ICache::flush_icache_stub [0x00007f8ab9000060, 0x00007f8ab900007d[ (29 bytes)
Loaded disassembler from /home/zbhuang/OpenJDK/jdk8u/build/linux-x86_64-normal-server-slowdebug/jdk/lib/amd64/hsdis-amd64.so
[Disassembling for mach='i386:x86-64']
  0x00007f8ab9000060: test   %esi,%esi
  0x00007f8ab9000062: je     0x00007f8ab9000079
  0x00007f8ab9000068: mfence 
  0x00007f8ab900006b: clflush (%rdi)
  0x00007f8ab900006e: add    $0x40,%rdi
  0x00007f8ab9000072: dec    %esi
  0x00007f8ab9000074: jne    0x00007f8ab900006b
  0x00007f8ab9000076: mfence 
  0x00007f8ab9000079: mov    %rdx,%rax
  0x00007f8ab900007c: retq   

VM_Version::get_cpu_info_stub [0x00007f8ab9000160, 0x00007f8ab900037b[ (539 bytes)
  0x00007f8ab9000160: push   %rbp
  0x00007f8ab9000161: mov    %rdi,%rbp
  0x00007f8ab9000164: push   %rbx
  0x00007f8ab9000165: push   %rsi
  0x00007f8ab9000166: pushfq 
  0x00007f8ab9000167: pop    %rax
  0x00007f8ab9000168: push   %rax
  0x00007f8ab9000169: mov    %rax,%rcx
  0x00007f8ab900016c: xor    $0x40000,%eax
  0x00007f8ab9000172: push   %rax
  0x00007f8ab9000173: popfq  
  0x00007f8ab9000174: pushfq 
  0x00007f8ab9000175: pop    %rax
  0x00007f8ab9000176: cmp    %rcx,%rax
  0x00007f8ab9000179: jne    0x00007f8ab9000188
  0x00007f8ab900017b: mov    $0x300,%eax
  0x00007f8ab9000180: mov    %eax,0x10(%rbp)
  0x00007f8ab9000183: jmpq   0x00007f8ab9000376
  0x00007f8ab9000188: mov    %rcx,%rax
  0x00007f8ab900018b: xor    $0x200000,%eax
  0x00007f8ab9000191: push   %rax
  0x00007f8ab9000192: popfq  
  0x00007f8ab9000193: pushfq 
  0x00007f8ab9000194: pop    %rax
  0x00007f8ab9000195: cmp    %rax,%rcx
  0x00007f8ab9000198: jne    0x00007f8ab90001a7
  0x00007f8ab900019a: mov    $0x400,%eax
  0x00007f8ab900019f: mov    %eax,0x10(%rbp)
  0x00007f8ab90001a2: jmpq   0x00007f8ab9000376
  0x00007f8ab90001a7: xor    %eax,%eax
  0x00007f8ab90001a9: cpuid  
  0x00007f8ab90001ab: or     %eax,%eax
  0x00007f8ab90001ad: je     0x00007f8ab900019a
  0x00007f8ab90001af: lea    0x0(%rbp),%rsi
  0x00007f8ab90001b3: mov    %eax,(%rsi)
  0x00007f8ab90001b5: mov    %ebx,0x4(%rsi)
  0x00007f8ab90001b8: mov    %ecx,0x8(%rsi)
  0x00007f8ab90001bb: mov    %edx,0xc(%rsi)
  0x00007f8ab90001be: cmp    $0xa,%eax
  0x00007f8ab90001c1: jbe    0x00007f8ab900022f
  0x00007f8ab90001c3: mov    $0xb,%eax
  0x00007f8ab90001c8: xor    %ecx,%ecx
  0x00007f8ab90001ca: cpuid  
  0x00007f8ab90001cc: lea    0x40(%rbp),%rsi
  0x00007f8ab90001d0: mov    %eax,(%rsi)
  0x00007f8ab90001d2: mov    %ebx,0x4(%rsi)
  0x00007f8ab90001d5: mov    %ecx,0x8(%rsi)
  0x00007f8ab90001d8: mov    %edx,0xc(%rsi)
  0x00007f8ab90001db: mov    $0xb,%eax
  0x00007f8ab90001e0: mov    $0x1,%ecx
  0x00007f8ab90001e5: cpuid  
  0x00007f8ab90001e7: push   %rax
  0x00007f8ab90001e8: and    $0x1f,%eax
  0x00007f8ab90001eb: or     %ebx,%eax
  0x00007f8ab90001ed: and    $0xffff,%eax
  0x00007f8ab90001f3: pop    %rax
  0x00007f8ab90001f4: je     0x00007f8ab900022f
  0x00007f8ab90001f6: lea    0x50(%rbp),%rsi
  0x00007f8ab90001fa: mov    %eax,(%rsi)
  0x00007f8ab90001fc: mov    %ebx,0x4(%rsi)
  0x00007f8ab90001ff: mov    %ecx,0x8(%rsi)
  0x00007f8ab9000202: mov    %edx,0xc(%rsi)
  0x00007f8ab9000205: mov    $0xb,%eax
  0x00007f8ab900020a: mov    $0x2,%ecx
  0x00007f8ab900020f: cpuid  
  0x00007f8ab9000211: push   %rax
  0x00007f8ab9000212: and    $0x1f,%eax
  0x00007f8ab9000215: or     %ebx,%eax
  0x00007f8ab9000217: and    $0xffff,%eax
  0x00007f8ab900021d: pop    %rax
  0x00007f8ab900021e: je     0x00007f8ab900022f
  0x00007f8ab9000220: lea    0x60(%rbp),%rsi
  0x00007f8ab9000224: mov    %eax,(%rsi)
  0x00007f8ab9000226: mov    %ebx,0x4(%rsi)
  0x00007f8ab9000229: mov    %ecx,0x8(%rsi)
  0x00007f8ab900022c: mov    %edx,0xc(%rsi)
  0x00007f8ab900022f: mov    $0x4,%eax
  0x00007f8ab9000234: cmp    0x0(%rbp),%eax
  0x00007f8ab9000237: jg     0x00007f8ab9000255
  0x00007f8ab9000239: xor    %ecx,%ecx
  0x00007f8ab900023b: cpuid  
  0x00007f8ab900023d: push   %rax
  0x00007f8ab900023e: and    $0x1f,%eax
  0x00007f8ab9000241: or     %eax,%eax
  0x00007f8ab9000243: pop    %rax
  0x00007f8ab9000244: je     0x00007f8ab9000255
  0x00007f8ab9000246: lea    0x20(%rbp),%rsi
  0x00007f8ab900024a: mov    %eax,(%rsi)
  0x00007f8ab900024c: mov    %ebx,0x4(%rsi)
  0x00007f8ab900024f: mov    %ecx,0x8(%rsi)
  0x00007f8ab9000252: mov    %edx,0xc(%rsi)
  0x00007f8ab9000255: mov    $0x1,%eax
  0x00007f8ab900025a: cpuid  
  0x00007f8ab900025c: lea    0x10(%rbp),%rsi
  0x00007f8ab9000260: mov    %eax,(%rsi)
  0x00007f8ab9000262: mov    %ebx,0x4(%rsi)
  0x00007f8ab9000265: mov    %ecx,0x8(%rsi)
  0x00007f8ab9000268: mov    %edx,0xc(%rsi)
  0x00007f8ab900026b: and    $0x18000000,%ecx
  0x00007f8ab9000271: cmp    $0x18000000,%ecx
  0x00007f8ab9000277: jne    0x00007f8ab90002d0
  0x00007f8ab9000279: xor    %ecx,%ecx
  0x00007f8ab900027b: xgetbv 
  0x00007f8ab900027e: lea    0xf0(%rbp),%rsi
  0x00007f8ab9000285: mov    %eax,(%rsi)
  0x00007f8ab9000287: mov    %edx,0x4(%rsi)
  0x00007f8ab900028a: and    $0x6,%eax
  0x00007f8ab900028d: cmp    $0x6,%eax
  0x00007f8ab9000290: jne    0x00007f8ab90002d0
  0x00007f8ab9000292: mov    $0xcafebabe,%ecx
  0x00007f8ab9000297: vmovd  %ecx,%xmm0
  0x00007f8ab900029b: vpshufd $0x0,%xmm0,%xmm0
  0x00007f8ab90002a0: vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007f8ab90002a6: vmovdqu %ymm0,%ymm7
  0x00007f8ab90002aa: vmovdqu %ymm0,%ymm8
  0x00007f8ab90002ae: vmovdqu %ymm0,%ymm15
  0x00007f8ab90002b2: xor    %esi,%esi
  0x00007f8ab90002b4: mov    (%rsi),%eax
  0x00007f8ab90002b6: lea    0xf8(%rbp),%rsi
  0x00007f8ab90002bd: vmovdqu %ymm0,(%rsi)
  0x00007f8ab90002c1: vmovdqu %ymm7,0x20(%rsi)
  0x00007f8ab90002c6: vmovdqu %ymm8,0x40(%rsi)
  0x00007f8ab90002cb: vmovdqu %ymm15,0x60(%rsi)
  0x00007f8ab90002d0: mov    $0x7,%eax
  0x00007f8ab90002d5: cmp    0x0(%rbp),%eax
  0x00007f8ab90002d8: jg     0x00007f8ab90002e7
  0x00007f8ab90002da: xor    %ecx,%ecx
  0x00007f8ab90002dc: cpuid  
  0x00007f8ab90002de: lea    0x30(%rbp),%rsi
  0x00007f8ab90002e2: mov    %eax,(%rsi)
  0x00007f8ab90002e4: mov    %ebx,0x4(%rsi)
  0x00007f8ab90002e7: mov    $0x80000000,%eax
  0x00007f8ab90002ec: cpuid  
  0x00007f8ab90002ee: cmp    $0x80000000,%eax
  0x00007f8ab90002f4: jbe    0x00007f8ab9000376
  0x00007f8ab90002fa: cmp    $0x80000004,%eax
  0x00007f8ab9000300: jbe    0x00007f8ab900035d
  0x00007f8ab9000302: cmp    $0x80000006,%eax
  0x00007f8ab9000308: jbe    0x00007f8ab9000344
  0x00007f8ab900030a: cmp    $0x80000007,%eax
  0x00007f8ab9000310: jbe    0x00007f8ab900032b
  0x00007f8ab9000312: mov    $0x80000008,%eax
  0x00007f8ab9000317: cpuid  
  0x00007f8ab9000319: lea    0xe0(%rbp),%rsi
  0x00007f8ab9000320: mov    %eax,(%rsi)
  0x00007f8ab9000322: mov    %ebx,0x4(%rsi)
  0x00007f8ab9000325: mov    %ecx,0x8(%rsi)
  0x00007f8ab9000328: mov    %edx,0xc(%rsi)
  0x00007f8ab900032b: mov    $0x80000007,%eax
  0x00007f8ab9000330: cpuid  
  0x00007f8ab9000332: lea    0xd0(%rbp),%rsi
  0x00007f8ab9000339: mov    %eax,(%rsi)
  0x00007f8ab900033b: mov    %ebx,0x4(%rsi)
  0x00007f8ab900033e: mov    %ecx,0x8(%rsi)
  0x00007f8ab9000341: mov    %edx,0xc(%rsi)
  0x00007f8ab9000344: mov    $0x80000005,%eax
  0x00007f8ab9000349: cpuid  
  0x00007f8ab900034b: lea    0xc0(%rbp),%rsi
  0x00007f8ab9000352: mov    %eax,(%rsi)
  0x00007f8ab9000354: mov    %ebx,0x4(%rsi)
  0x00007f8ab9000357: mov    %ecx,0x8(%rsi)
  0x00007f8ab900035a: mov    %edx,0xc(%rsi)
  0x00007f8ab900035d: mov    $0x80000001,%eax
  0x00007f8ab9000362: cpuid  
  0x00007f8ab9000364: lea    0x80(%rbp),%rsi
  0x00007f8ab900036b: mov    %eax,(%rsi)
  0x00007f8ab900036d: mov    %ebx,0x4(%rsi)
  0x00007f8ab9000370: mov    %ecx,0x8(%rsi)
  0x00007f8ab9000373: mov    %edx,0xc(%rsi)
  0x00007f8ab9000376: popfq  
  0x00007f8ab9000377: pop    %rsi
  0x00007f8ab9000378: pop    %rbx
  0x00007f8ab9000379: pop    %rbp
  0x00007f8ab900037a: retq   

Decoding RuntimeStub - StackOverflowError throw_exception 0x00007f8ab9005210
  0x00007f8ab9005280: push   %rbp
  0x00007f8ab9005281: mov    %rsp,%rbp
  0x00007f8ab9005284: sub    $0x0,%rsp
  0x00007f8ab9005288: mov    %rbp,0x210(%r15)
  0x00007f8ab900528f: movabs $0x7f8ab9005288,%r10
  0x00007f8ab9005299: mov    %r10,0x208(%r15)
  0x00007f8ab90052a0: mov    %rsp,0x200(%r15)
  0x00007f8ab90052a7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab90052ab: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f8ab90052ae: callq  0x00007f8acef86f40
  0x00007f8ab90052b3: movabs $0x0,%r10
  0x00007f8ab90052bd: mov    %r10,0x200(%r15)
  0x00007f8ab90052c4: movabs $0x0,%r10
  0x00007f8ab90052ce: mov    %r10,0x210(%r15)
  0x00007f8ab90052d5: movabs $0x0,%r10
  0x00007f8ab90052df: mov    %r10,0x208(%r15)
  0x00007f8ab90052e6: leaveq 
  0x00007f8ab90052e7: cmpq   $0x0,0x8(%r15)
  0x00007f8ab90052ef: jne    0x00007f8ab900536c
  0x00007f8ab90052f5: mov    %rsp,-0x28(%rsp)
  0x00007f8ab90052fa: sub    $0x80,%rsp
  0x00007f8ab9005301: mov    %rax,0x78(%rsp)
  0x00007f8ab9005306: mov    %rcx,0x70(%rsp)
  0x00007f8ab900530b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9005310: mov    %rbx,0x60(%rsp)
  0x00007f8ab9005315: mov    %rbp,0x50(%rsp)
  0x00007f8ab900531a: mov    %rsi,0x48(%rsp)
  0x00007f8ab900531f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9005324: mov    %r8,0x38(%rsp)
  0x00007f8ab9005329: mov    %r9,0x30(%rsp)
  0x00007f8ab900532e: mov    %r10,0x28(%rsp)
  0x00007f8ab9005333: mov    %r11,0x20(%rsp)
  0x00007f8ab9005338: mov    %r12,0x18(%rsp)
  0x00007f8ab900533d: mov    %r13,0x10(%rsp)
  0x00007f8ab9005342: mov    %r14,0x8(%rsp)
  0x00007f8ab9005347: mov    %r15,(%rsp)
  0x00007f8ab900534b: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab9005355: movabs $0x7f8ab90052f5,%rsi
  0x00007f8ab900535f: mov    %rsp,%rdx
  0x00007f8ab9005362: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9005366: callq  0x00007f8aceddb9fa
  0x00007f8ab900536b: hlt    
  0x00007f8ab900536c: jmpq   0x00007f8ab9000420
  0x00007f8ab9005371: hlt    
  0x00007f8ab9005372: hlt    
  0x00007f8ab9005373: hlt    
  0x00007f8ab9005374: hlt    
  0x00007f8ab9005375: hlt    
  0x00007f8ab9005376: hlt    
  0x00007f8ab9005377: hlt    

StubRoutines::forward exception [0x00007f8ab9000420, 0x00007f8ab9000564[ (324 bytes)
  0x00007f8ab9000420: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9000428: jne    0x00007f8ab90004a5
  0x00007f8ab900042e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9000433: sub    $0x80,%rsp
  0x00007f8ab900043a: mov    %rax,0x78(%rsp)
  0x00007f8ab900043f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9000444: mov    %rdx,0x68(%rsp)
  0x00007f8ab9000449: mov    %rbx,0x60(%rsp)
  0x00007f8ab900044e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9000453: mov    %rsi,0x48(%rsp)
  0x00007f8ab9000458: mov    %rdi,0x40(%rsp)
  0x00007f8ab900045d: mov    %r8,0x38(%rsp)
  0x00007f8ab9000462: mov    %r9,0x30(%rsp)
  0x00007f8ab9000467: mov    %r10,0x28(%rsp)
  0x00007f8ab900046c: mov    %r11,0x20(%rsp)
  0x00007f8ab9000471: mov    %r12,0x18(%rsp)
  0x00007f8ab9000476: mov    %r13,0x10(%rsp)
  0x00007f8ab900047b: mov    %r14,0x8(%rsp)
  0x00007f8ab9000480: mov    %r15,(%rsp)
  0x00007f8ab9000484: movabs $0x7f8acf3a63f0,%rdi
  0x00007f8ab900048e: movabs $0x7f8ab900042e,%rsi
  0x00007f8ab9000498: mov    %rsp,%rdx
  0x00007f8ab900049b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab900049f: callq  0x00007f8aceddb9fa
  0x00007f8ab90004a4: hlt    
  0x00007f8ab90004a5: mov    (%rsp),%rdi
  ;; call exception_handler_for_return_address
  0x00007f8ab90004a9: mov    %rdi,%rsi
  0x00007f8ab90004ac: mov    %r15,%rdi
  0x00007f8ab90004af: test   $0xf,%esp
  0x00007f8ab90004b5: je     0x00007f8ab90004cd
  0x00007f8ab90004bb: sub    $0x8,%rsp
  0x00007f8ab90004bf: callq  0x00007f8acef859be
  0x00007f8ab90004c4: add    $0x8,%rsp
  0x00007f8ab90004c8: jmpq   0x00007f8ab90004d2
  0x00007f8ab90004cd: callq  0x00007f8acef859be
  0x00007f8ab90004d2: mov    %rax,%rbx
  0x00007f8ab90004d5: pop    %rdx
  0x00007f8ab90004d6: mov    0x8(%r15),%rax
  0x00007f8ab90004da: movq   $0x0,0x8(%r15)
  0x00007f8ab90004e2: test   %rax,%rax
  0x00007f8ab90004e5: jne    0x00007f8ab9000562
  0x00007f8ab90004eb: mov    %rsp,-0x28(%rsp)
  0x00007f8ab90004f0: sub    $0x80,%rsp
  0x00007f8ab90004f7: mov    %rax,0x78(%rsp)
  0x00007f8ab90004fc: mov    %rcx,0x70(%rsp)
  0x00007f8ab9000501: mov    %rdx,0x68(%rsp)
  0x00007f8ab9000506: mov    %rbx,0x60(%rsp)
  0x00007f8ab900050b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9000510: mov    %rsi,0x48(%rsp)
  0x00007f8ab9000515: mov    %rdi,0x40(%rsp)
  0x00007f8ab900051a: mov    %r8,0x38(%rsp)
  0x00007f8ab900051f: mov    %r9,0x30(%rsp)
  0x00007f8ab9000524: mov    %r10,0x28(%rsp)
  0x00007f8ab9000529: mov    %r11,0x20(%rsp)
  0x00007f8ab900052e: mov    %r12,0x18(%rsp)
  0x00007f8ab9000533: mov    %r13,0x10(%rsp)
  0x00007f8ab9000538: mov    %r14,0x8(%rsp)
  0x00007f8ab900053d: mov    %r15,(%rsp)
  0x00007f8ab9000541: movabs $0x7f8acf3a6460,%rdi
  0x00007f8ab900054b: movabs $0x7f8ab90004eb,%rsi
  0x00007f8ab9000555: mov    %rsp,%rdx
  0x00007f8ab9000558: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab900055c: callq  0x00007f8aceddb9fa
  0x00007f8ab9000561: hlt    
  0x00007f8ab9000562: jmpq   *%rbx

StubRoutines::call_stub [0x00007f8ab9000564, 0x00007f8ab900079b[ (567 bytes)
  ;; enter
  0x00007f8ab9000564: push   %rbp
  0x00007f8ab9000565: mov    %rsp,%rbp
  ;; subptr
  0x00007f8ab9000568: sub    $0x60,%rsp
  0x00007f8ab900056c: mov    %r9,-0x8(%rbp)
  0x00007f8ab9000570: mov    %r8,-0x10(%rbp)
  ;; c_rarg3
  0x00007f8ab9000574: mov    %rcx,-0x18(%rbp)
  ;; c_rarg2
  0x00007f8ab9000578: mov    %edx,-0x20(%rbp)
  ;; c_rarg1
  0x00007f8ab900057b: mov    %rsi,-0x28(%rbp)
  ;; c_rarg0
  0x00007f8ab900057f: mov    %rdi,-0x30(%rbp)
  ;; rbx
  0x00007f8ab9000583: mov    %rbx,-0x38(%rbp)
  ;; r12
  0x00007f8ab9000587: mov    %r12,-0x40(%rbp)
  0x00007f8ab900058b: mov    %r13,-0x48(%rbp)
  0x00007f8ab900058f: mov    %r14,-0x50(%rbp)
  0x00007f8ab9000593: mov    %r15,-0x58(%rbp)
  ;; stmxcsr
  0x00007f8ab9000597: stmxcsr -0x60(%rbp)
  ;; movl
  0x00007f8ab900059b: mov    -0x60(%rbp),%eax
  ;; andl
  0x00007f8ab900059e: and    $0xffc0,%eax
  ;; cmp32
  0x00007f8ab90005a4: cmp    0x1698e19e(%rip),%eax        # 0x00007f8acf98e748
  ;; jcc
  0x00007f8ab90005aa: je     0x00007f8ab90005b7
  ;; ldmxcsr
  0x00007f8ab90005b0: ldmxcsr 0x1698e191(%rip)        # 0x00007f8acf98e748
  ;; bind
  ;; Load up thread register
  0x00007f8ab90005b7: mov    0x18(%rbp),%r15
  ;; reinit_heapbase
  0x00007f8ab90005bb: mov    0x169adc1e(%rip),%r12        # 0x00007f8acf9ae1e0
  ;; cmpptr
  0x00007f8ab90005c2: cmpq   $0x0,0x8(%r15)
  ;; jcc
  0x00007f8ab90005ca: je     0x00007f8ab9000647
  ;; stop
  0x00007f8ab90005d0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab90005d5: sub    $0x80,%rsp
  0x00007f8ab90005dc: mov    %rax,0x78(%rsp)
  0x00007f8ab90005e1: mov    %rcx,0x70(%rsp)
  0x00007f8ab90005e6: mov    %rdx,0x68(%rsp)
  0x00007f8ab90005eb: mov    %rbx,0x60(%rsp)
  0x00007f8ab90005f0: mov    %rbp,0x50(%rsp)
  0x00007f8ab90005f5: mov    %rsi,0x48(%rsp)
  0x00007f8ab90005fa: mov    %rdi,0x40(%rsp)
  0x00007f8ab90005ff: mov    %r8,0x38(%rsp)
  0x00007f8ab9000604: mov    %r9,0x30(%rsp)
  0x00007f8ab9000609: mov    %r10,0x28(%rsp)
  0x00007f8ab900060e: mov    %r11,0x20(%rsp)
  0x00007f8ab9000613: mov    %r12,0x18(%rsp)
  0x00007f8ab9000618: mov    %r13,0x10(%rsp)
  0x00007f8ab900061d: mov    %r14,0x8(%rsp)
  0x00007f8ab9000622: mov    %r15,(%rsp)
  0x00007f8ab9000626: movabs $0x7f8acf3a6170,%rdi
  0x00007f8ab9000630: movabs $0x7f8ab90005d0,%rsi
  0x00007f8ab900063a: mov    %rsp,%rdx
  0x00007f8ab900063d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9000641: callq  0x00007f8aceddb9fa
  0x00007f8ab9000646: hlt    
  ;; bind
  ;; pass parameters if any
  ;; movl
  0x00007f8ab9000647: mov    0x10(%rbp),%ecx
  ;; testl
  0x00007f8ab900064a: test   %ecx,%ecx
  ;; jcc
  0x00007f8ab900064c: je     0x00007f8ab9000664
  ;; movptr
  0x00007f8ab9000652: mov    -0x8(%rbp),%rdx
  ;; movl
  0x00007f8ab9000656: mov    %ecx,%esi
  ;; BIND
  ;; loop:
  ;; movptr
  0x00007f8ab9000658: mov    (%rdx),%rax
  ;; addptr
  0x00007f8ab900065b: add    $0x8,%rdx
  ;; decrementl
  0x00007f8ab900065f: dec    %esi
  ;; push
  0x00007f8ab9000661: push   %rax
  ;; jcc
  0x00007f8ab9000662: jne    0x00007f8ab9000658
  ;; BIND
  ;; parameters_done:
  ;; movptr
  0x00007f8ab9000664: mov    -0x18(%rbp),%rbx
  ;; movptr
  0x00007f8ab9000668: mov    -0x10(%rbp),%rsi
  ;; mov
  0x00007f8ab900066c: mov    %rsp,%r13
  ;; call Java function
  0x00007f8ab900066f: callq  *%rsi
  ;; call_stub_return_address:
  ;; movptr
  0x00007f8ab9000671: mov    -0x28(%rbp),%rdi
  ;; movl
  0x00007f8ab9000675: mov    -0x20(%rbp),%esi
  ;; cmpl
  0x00007f8ab9000678: cmp    $0xc,%esi
  0x00007f8ab900067b: je     0x00007f8ab9000781
  0x00007f8ab9000681: cmp    $0xb,%esi
  0x00007f8ab9000684: je     0x00007f8ab9000781
  0x00007f8ab900068a: cmp    $0x6,%esi
  0x00007f8ab900068d: je     0x00007f8ab9000789
  0x00007f8ab9000693: cmp    $0x7,%esi
  0x00007f8ab9000696: je     0x00007f8ab9000792
  ;; movl
  0x00007f8ab900069c: mov    %eax,(%rdi)
  ;; BIND
  ;; exit:
  ;; lea
  0x00007f8ab900069e: lea    -0x60(%rbp),%rsp
  ;; cmpptr
  0x00007f8ab90006a2: cmp    0x18(%rbp),%r15
  ;; jcc
  0x00007f8ab90006a6: jne    0x00007f8ab90006e6
  ;; get_thread
  0x00007f8ab90006ac: push   %rax
  0x00007f8ab90006ad: push   %rdi
  0x00007f8ab90006ae: push   %rsi
  0x00007f8ab90006af: push   %rdx
  0x00007f8ab90006b0: push   %rcx
  0x00007f8ab90006b1: push   %r8
  0x00007f8ab90006b3: push   %r9
  0x00007f8ab90006b5: push   %r10
  0x00007f8ab90006b7: mov    %rsp,%r10
  0x00007f8ab90006ba: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab90006be: push   %r10
  0x00007f8ab90006c0: push   %r11
  0x00007f8ab90006c2: mov    $0x1,%edi
  0x00007f8ab90006c7: callq  0x00007f8acf9c32d0
  0x00007f8ab90006cc: pop    %r11
  0x00007f8ab90006ce: pop    %rsp
  0x00007f8ab90006cf: pop    %r10
  0x00007f8ab90006d1: pop    %r9
  0x00007f8ab90006d3: pop    %r8
  0x00007f8ab90006d5: pop    %rcx
  0x00007f8ab90006d6: pop    %rdx
  0x00007f8ab90006d7: pop    %rsi
  0x00007f8ab90006d8: pop    %rdi
  0x00007f8ab90006d9: mov    %rax,%rbx
  0x00007f8ab90006dc: pop    %rax
  ;; cmpptr
  0x00007f8ab90006dd: cmp    %rbx,%r15
  ;; jcc
  0x00007f8ab90006e0: je     0x00007f8ab9000763
  ;; bind
  ;; jcc
  0x00007f8ab90006e6: je     0x00007f8ab9000763
  ;; stop
  0x00007f8ab90006ec: mov    %rsp,-0x28(%rsp)
  0x00007f8ab90006f1: sub    $0x80,%rsp
  0x00007f8ab90006f8: mov    %rax,0x78(%rsp)
  0x00007f8ab90006fd: mov    %rcx,0x70(%rsp)
  0x00007f8ab9000702: mov    %rdx,0x68(%rsp)
  0x00007f8ab9000707: mov    %rbx,0x60(%rsp)
  0x00007f8ab900070c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9000711: mov    %rsi,0x48(%rsp)
  0x00007f8ab9000716: mov    %rdi,0x40(%rsp)
  0x00007f8ab900071b: mov    %r8,0x38(%rsp)
  0x00007f8ab9000720: mov    %r9,0x30(%rsp)
  0x00007f8ab9000725: mov    %r10,0x28(%rsp)
  0x00007f8ab900072a: mov    %r11,0x20(%rsp)
  0x00007f8ab900072f: mov    %r12,0x18(%rsp)
  0x00007f8ab9000734: mov    %r13,0x10(%rsp)
  0x00007f8ab9000739: mov    %r14,0x8(%rsp)
  0x00007f8ab900073e: mov    %r15,(%rsp)
  0x00007f8ab9000742: movabs $0x7f8acf3a6250,%rdi
  0x00007f8ab900074c: movabs $0x7f8ab90006ec,%rsi
  0x00007f8ab9000756: mov    %rsp,%rdx
  0x00007f8ab9000759: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab900075d: callq  0x00007f8aceddb9fa
  0x00007f8ab9000762: hlt    
  ;; bind
  ;; r15
  0x00007f8ab9000763: mov    -0x58(%rbp),%r15
  0x00007f8ab9000767: mov    -0x50(%rbp),%r14
  0x00007f8ab900076b: mov    -0x48(%rbp),%r13
  0x00007f8ab900076f: mov    -0x40(%rbp),%r12
  0x00007f8ab9000773: mov    -0x38(%rbp),%rbx
  ;; ldmxcsr
  0x00007f8ab9000777: ldmxcsr -0x60(%rbp)
  ;; addptr
  0x00007f8ab900077b: add    $0x60,%rsp
  ;; pop
  0x00007f8ab900077f: pop    %rbp
  ;; ret
  0x00007f8ab9000780: retq   
  ;; is_long:
  0x00007f8ab9000781: mov    %rax,(%rdi)
  0x00007f8ab9000784: jmpq   0x00007f8ab900069e
  ;; is_float:
  0x00007f8ab9000789: vmovss %xmm0,(%rdi)
  0x00007f8ab900078d: jmpq   0x00007f8ab900069e
  ;; is_double:
  0x00007f8ab9000792: vmovsd %xmm0,(%rdi)
  0x00007f8ab9000796: jmpq   0x00007f8ab900069e

StubRoutines::catch_exception [0x00007f8ab900079b, 0x00007f8ab9000875[ (218 bytes)
  0x00007f8ab900079b: cmp    0x18(%rbp),%r15
  0x00007f8ab900079f: jne    0x00007f8ab90007df
  0x00007f8ab90007a5: push   %rax
  0x00007f8ab90007a6: push   %rdi
  0x00007f8ab90007a7: push   %rsi
  0x00007f8ab90007a8: push   %rdx
  0x00007f8ab90007a9: push   %rcx
  0x00007f8ab90007aa: push   %r8
  0x00007f8ab90007ac: push   %r9
  0x00007f8ab90007ae: push   %r10
  0x00007f8ab90007b0: mov    %rsp,%r10
  0x00007f8ab90007b3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab90007b7: push   %r10
  0x00007f8ab90007b9: push   %r11
  0x00007f8ab90007bb: mov    $0x1,%edi
  0x00007f8ab90007c0: callq  0x00007f8acf9c32d0
  0x00007f8ab90007c5: pop    %r11
  0x00007f8ab90007c7: pop    %rsp
  0x00007f8ab90007c8: pop    %r10
  0x00007f8ab90007ca: pop    %r9
  0x00007f8ab90007cc: pop    %r8
  0x00007f8ab90007ce: pop    %rcx
  0x00007f8ab90007cf: pop    %rdx
  0x00007f8ab90007d0: pop    %rsi
  0x00007f8ab90007d1: pop    %rdi
  0x00007f8ab90007d2: mov    %rax,%rbx
  0x00007f8ab90007d5: pop    %rax
  0x00007f8ab90007d6: cmp    %rbx,%r15
  0x00007f8ab90007d9: je     0x00007f8ab9000856
  0x00007f8ab90007df: mov    %rsp,-0x28(%rsp)
  0x00007f8ab90007e4: sub    $0x80,%rsp
  0x00007f8ab90007eb: mov    %rax,0x78(%rsp)
  0x00007f8ab90007f0: mov    %rcx,0x70(%rsp)
  0x00007f8ab90007f5: mov    %rdx,0x68(%rsp)
  0x00007f8ab90007fa: mov    %rbx,0x60(%rsp)
  0x00007f8ab90007ff: mov    %rbp,0x50(%rsp)
  0x00007f8ab9000804: mov    %rsi,0x48(%rsp)
  0x00007f8ab9000809: mov    %rdi,0x40(%rsp)
  0x00007f8ab900080e: mov    %r8,0x38(%rsp)
  0x00007f8ab9000813: mov    %r9,0x30(%rsp)
  0x00007f8ab9000818: mov    %r10,0x28(%rsp)
  0x00007f8ab900081d: mov    %r11,0x20(%rsp)
  0x00007f8ab9000822: mov    %r12,0x18(%rsp)
  0x00007f8ab9000827: mov    %r13,0x10(%rsp)
  0x00007f8ab900082c: mov    %r14,0x8(%rsp)
  0x00007f8ab9000831: mov    %r15,(%rsp)
  0x00007f8ab9000835: movabs $0x7f8acf3a62c0,%rdi
  0x00007f8ab900083f: movabs $0x7f8ab90007df,%rsi
  0x00007f8ab9000849: mov    %rsp,%rdx
  0x00007f8ab900084c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9000850: callq  0x00007f8aceddb9fa
  0x00007f8ab9000855: hlt    
  0x00007f8ab9000856: mov    %rax,0x8(%r15)
  0x00007f8ab900085a: movabs $0x7f8acf3a6308,%r10
  0x00007f8ab9000864: mov    %r10,0x10(%r15)
  0x00007f8ab9000868: movl   $0x1fe,0x18(%r15)
  0x00007f8ab9000870: jmpq   0x00007f8ab9000671

StubRoutines::atomic_xchg [0x00007f8ab9000875, 0x00007f8ab900087a[ (5 bytes)
  0x00007f8ab9000875: mov    %edi,%eax
  0x00007f8ab9000877: xchg   %eax,(%rsi)
  0x00007f8ab9000879: retq   

StubRoutines::atomic_xchg_ptr [0x00007f8ab900087a, 0x00007f8ab9000881[ (7 bytes)
  0x00007f8ab900087a: mov    %rdi,%rax
  0x00007f8ab900087d: xchg   %rax,(%rsi)
  0x00007f8ab9000880: retq   

StubRoutines::atomic_cmpxchg [0x00007f8ab9000881, 0x00007f8ab9000888[ (7 bytes)
  0x00007f8ab9000881: mov    %edx,%eax
  0x00007f8ab9000883: lock cmpxchg %edi,(%rsi)
  0x00007f8ab9000887: retq   

StubRoutines::atomic_cmpxchg_long [0x00007f8ab9000888, 0x00007f8ab9000891[ (9 bytes)
  0x00007f8ab9000888: mov    %rdx,%rax
  0x00007f8ab900088b: lock cmpxchg %rdi,(%rsi)
  0x00007f8ab9000890: retq   

StubRoutines::atomic_add [0x00007f8ab9000891, 0x00007f8ab900089a[ (9 bytes)
  0x00007f8ab9000891: mov    %edi,%eax
  0x00007f8ab9000893: lock xadd %edi,(%rsi)
  0x00007f8ab9000897: add    %edi,%eax
  0x00007f8ab9000899: retq   

StubRoutines::atomic_add_ptr [0x00007f8ab900089a, 0x00007f8ab90008a6[ (12 bytes)
  0x00007f8ab900089a: mov    %rdi,%rax
  0x00007f8ab900089d: lock xadd %rdi,(%rsi)
  0x00007f8ab90008a2: add    %rdi,%rax
  0x00007f8ab90008a5: retq   

StubRoutines::orderaccess_fence [0x00007f8ab90008a6, 0x00007f8ab90008ac[ (6 bytes)
  0x00007f8ab90008a6: lock addl $0x0,(%rsp)
  0x00007f8ab90008ab: retq   

StubRoutines::handler_for_unsafe_access [0x00007f8ab90008ac, 0x00007f8ab900096e[ (194 bytes)
  0x00007f8ab90008ac: pushq  $0x0
  0x00007f8ab90008b1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab90008b6: sub    $0x80,%rsp
  0x00007f8ab90008bd: mov    %rax,0x78(%rsp)
  0x00007f8ab90008c2: mov    %rcx,0x70(%rsp)
  0x00007f8ab90008c7: mov    %rdx,0x68(%rsp)
  0x00007f8ab90008cc: mov    %rbx,0x60(%rsp)
  0x00007f8ab90008d1: mov    %rbp,0x50(%rsp)
  0x00007f8ab90008d6: mov    %rsi,0x48(%rsp)
  0x00007f8ab90008db: mov    %rdi,0x40(%rsp)
  0x00007f8ab90008e0: mov    %r8,0x38(%rsp)
  0x00007f8ab90008e5: mov    %r9,0x30(%rsp)
  0x00007f8ab90008ea: mov    %r10,0x28(%rsp)
  0x00007f8ab90008ef: mov    %r11,0x20(%rsp)
  0x00007f8ab90008f4: mov    %r12,0x18(%rsp)
  0x00007f8ab90008f9: mov    %r13,0x10(%rsp)
  0x00007f8ab90008fe: mov    %r14,0x8(%rsp)
  0x00007f8ab9000903: mov    %r15,(%rsp)
  0x00007f8ab9000907: sub    $0x0,%rsp
  ;; call handle_unsafe_access
  0x00007f8ab900090b: callq  0x00007f8acefc1d54
  0x00007f8ab9000910: add    $0x0,%rsp
  0x00007f8ab9000914: mov    %rax,0x80(%rsp)
  0x00007f8ab900091c: mov    (%rsp),%r15
  0x00007f8ab9000920: mov    0x8(%rsp),%r14
  0x00007f8ab9000925: mov    0x10(%rsp),%r13
  0x00007f8ab900092a: mov    0x18(%rsp),%r12
  0x00007f8ab900092f: mov    0x20(%rsp),%r11
  0x00007f8ab9000934: mov    0x28(%rsp),%r10
  0x00007f8ab9000939: mov    0x30(%rsp),%r9
  0x00007f8ab900093e: mov    0x38(%rsp),%r8
  0x00007f8ab9000943: mov    0x40(%rsp),%rdi
  0x00007f8ab9000948: mov    0x48(%rsp),%rsi
  0x00007f8ab900094d: mov    0x50(%rsp),%rbp
  0x00007f8ab9000952: mov    0x60(%rsp),%rbx
  0x00007f8ab9000957: mov    0x68(%rsp),%rdx
  0x00007f8ab900095c: mov    0x70(%rsp),%rcx
  0x00007f8ab9000961: mov    0x78(%rsp),%rax
  0x00007f8ab9000966: add    $0x80,%rsp
  0x00007f8ab900096d: retq   

StubRoutines::get_previous_fp [0x00007f8ab900096e, 0x00007f8ab900097b[ (13 bytes)
  0x00007f8ab900096e: push   %rbp
  0x00007f8ab900096f: mov    %rsp,%rbp
  0x00007f8ab9000972: mov    0x0(%rbp),%rax
  0x00007f8ab9000976: mov    (%rax),%rax
  0x00007f8ab9000979: pop    %rbp
  0x00007f8ab900097a: retq   

StubRoutines::get_previous_sp [0x00007f8ab900097b, 0x00007f8ab9000983[ (8 bytes)
  0x00007f8ab900097b: mov    %rsp,%rax
  0x00007f8ab900097e: add    $0x8,%rax
  0x00007f8ab9000982: retq   

StubRoutines::verify_mxcsr [0x00007f8ab9000983, 0x00007f8ab9000984[ (1 bytes)
  0x00007f8ab9000983: retq   

StubRoutines::updateBytesCRC32 [0x00007f8ab90009a0, 0x00007f8ab9000bf6[ (598 bytes)
  ;; Entry:
  0x00007f8ab90009a0: push   %rbp
  0x00007f8ab90009a1: mov    %rsp,%rbp
  0x00007f8ab90009a4: movabs $0x7f8acf919d40,%rcx
  0x00007f8ab90009ae: not    %edi
  0x00007f8ab90009b0: cmp    $0x10,%edx
  0x00007f8ab90009b3: jl     0x00007f8ab9000bd2
  0x00007f8ab90009b9: mov    %esi,%r11d
  0x00007f8ab90009bc: and    $0xf,%r11d
  0x00007f8ab90009c0: je     0x00007f8ab90009e5
  0x00007f8ab90009c2: sub    $0x10,%r11d
  0x00007f8ab90009c6: add    %r11d,%edx
  0x00007f8ab90009c9: nop
  0x00007f8ab90009ca: nop
  0x00007f8ab90009cb: nop
  ;; L_align_loop:
  0x00007f8ab90009cc: movsbl (%rsi),%eax
  0x00007f8ab90009cf: xor    %edi,%eax
  0x00007f8ab90009d1: and    $0xff,%eax
  0x00007f8ab90009d7: shr    $0x8,%edi
  0x00007f8ab90009da: xor    (%rcx,%rax,4),%edi
  0x00007f8ab90009dd: inc    %rsi
  0x00007f8ab90009e0: inc    %r11d
  0x00007f8ab90009e3: jl     0x00007f8ab90009cc
  ;; L_aligned:
  0x00007f8ab90009e5: mov    %edx,%r11d
  0x00007f8ab90009e8: shr    $0x4,%edx
  0x00007f8ab90009eb: je     0x00007f8ab9000bcf
  0x00007f8ab90009f1: vmovdqa (%rsi),%xmm1
  0x00007f8ab90009f5: vmovd  %xmm1,%eax
  0x00007f8ab90009f9: xor    %eax,%edi
  0x00007f8ab90009fb: vpinsrd $0x0,%edi,%xmm1,%xmm1
  0x00007f8ab9000a01: add    $0x10,%rsi
  0x00007f8ab9000a05: sub    $0x4,%edx
  0x00007f8ab9000a08: jl     0x00007f8ab9000ae0
  0x00007f8ab9000a0e: vmovdqa (%rsi),%xmm2
  0x00007f8ab9000a12: vmovdqa 0x10(%rsi),%xmm3
  0x00007f8ab9000a17: vmovdqa 0x20(%rsi),%xmm4
  0x00007f8ab9000a1c: add    $0x30,%rsi
  0x00007f8ab9000a20: sub    $0x3,%edx
  0x00007f8ab9000a23: jle    0x00007f8ab9000a9c
  0x00007f8ab9000a29: vmovdqu 0x169192ef(%rip),%xmm0        # 0x00007f8acf919d20
  0x00007f8ab9000a31: nop
  0x00007f8ab9000a32: nop
  0x00007f8ab9000a33: nop
  0x00007f8ab9000a34: nop
  0x00007f8ab9000a35: nop
  0x00007f8ab9000a36: nop
  0x00007f8ab9000a37: nop
  0x00007f8ab9000a38: nop
  0x00007f8ab9000a39: nop
  0x00007f8ab9000a3a: nop
  0x00007f8ab9000a3b: nop
  0x00007f8ab9000a3c: nop
  0x00007f8ab9000a3d: nop
  0x00007f8ab9000a3e: nop
  0x00007f8ab9000a3f: nop
  ;; L_fold_512b_loop:
  0x00007f8ab9000a40: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f8ab9000a46: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f8ab9000a4c: vpxor  (%rsi),%xmm1,%xmm1
  0x00007f8ab9000a50: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f8ab9000a54: vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0x00007f8ab9000a5a: vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0x00007f8ab9000a60: vpxor  0x10(%rsi),%xmm2,%xmm2
  0x00007f8ab9000a65: vpxor  %xmm5,%xmm2,%xmm2
  0x00007f8ab9000a69: vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0x00007f8ab9000a6f: vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0x00007f8ab9000a75: vpxor  0x20(%rsi),%xmm3,%xmm3
  0x00007f8ab9000a7a: vpxor  %xmm5,%xmm3,%xmm3
  0x00007f8ab9000a7e: vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0x00007f8ab9000a84: vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0x00007f8ab9000a8a: vpxor  0x30(%rsi),%xmm4,%xmm4
  0x00007f8ab9000a8f: vpxor  %xmm5,%xmm4,%xmm4
  0x00007f8ab9000a93: add    $0x40,%rsi
  0x00007f8ab9000a97: sub    $0x4,%edx
  0x00007f8ab9000a9a: jg     0x00007f8ab9000a40
  ;; L_fold_512b:
  0x00007f8ab9000a9c: vmovdqu 0x1691926c(%rip),%xmm0        # 0x00007f8acf919d10
  0x00007f8ab9000aa4: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f8ab9000aaa: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f8ab9000ab0: vpxor  %xmm2,%xmm1,%xmm1
  0x00007f8ab9000ab4: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f8ab9000ab8: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f8ab9000abe: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f8ab9000ac4: vpxor  %xmm3,%xmm1,%xmm1
  0x00007f8ab9000ac8: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f8ab9000acc: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f8ab9000ad2: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f8ab9000ad8: vpxor  %xmm4,%xmm1,%xmm1
  0x00007f8ab9000adc: vpxor  %xmm5,%xmm1,%xmm1
  ;; L_fold_tail:
  0x00007f8ab9000ae0: add    $0x3,%edx
  0x00007f8ab9000ae3: jle    0x00007f8ab9000b09
  0x00007f8ab9000ae5: vmovdqu 0x16919223(%rip),%xmm0        # 0x00007f8acf919d10
  ;; L_fold_tail_loop:
  0x00007f8ab9000aed: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f8ab9000af3: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f8ab9000af9: vpxor  (%rsi),%xmm1,%xmm1
  0x00007f8ab9000afd: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f8ab9000b01: add    $0x10,%rsi
  0x00007f8ab9000b05: dec    %edx
  0x00007f8ab9000b07: jg     0x00007f8ab9000aed
  ;; L_fold_128b:
  0x00007f8ab9000b09: vmovdqu 0x169191ef(%rip),%xmm0        # 0x00007f8acf919d00
  0x00007f8ab9000b11: vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0x00007f8ab9000b17: vpand  %xmm2,%xmm0,%xmm3
  0x00007f8ab9000b1b: vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0x00007f8ab9000b21: vpsrldq $0x8,%xmm1,%xmm1
  0x00007f8ab9000b26: vpsrldq $0x4,%xmm2,%xmm2
  0x00007f8ab9000b2b: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9000b2f: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f8ab9000b33: vmovd  %xmm0,%eax
  0x00007f8ab9000b37: and    $0xff,%eax
  0x00007f8ab9000b3d: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f8ab9000b42: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f8ab9000b47: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9000b4b: vmovd  %xmm0,%eax
  0x00007f8ab9000b4f: and    $0xff,%eax
  0x00007f8ab9000b55: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f8ab9000b5a: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f8ab9000b5f: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9000b63: vmovd  %xmm0,%eax
  0x00007f8ab9000b67: and    $0xff,%eax
  0x00007f8ab9000b6d: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f8ab9000b72: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f8ab9000b77: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9000b7b: vmovd  %xmm0,%eax
  0x00007f8ab9000b7f: and    $0xff,%eax
  0x00007f8ab9000b85: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f8ab9000b8a: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f8ab9000b8f: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9000b93: vmovd  %xmm0,%edi
  0x00007f8ab9000b97: mov    %edi,%eax
  0x00007f8ab9000b99: and    $0xff,%eax
  0x00007f8ab9000b9f: shr    $0x8,%edi
  0x00007f8ab9000ba2: xor    (%rcx,%rax,4),%edi
  0x00007f8ab9000ba5: mov    %edi,%eax
  0x00007f8ab9000ba7: and    $0xff,%eax
  0x00007f8ab9000bad: shr    $0x8,%edi
  0x00007f8ab9000bb0: xor    (%rcx,%rax,4),%edi
  0x00007f8ab9000bb3: mov    %edi,%eax
  0x00007f8ab9000bb5: and    $0xff,%eax
  0x00007f8ab9000bbb: shr    $0x8,%edi
  0x00007f8ab9000bbe: xor    (%rcx,%rax,4),%edi
  0x00007f8ab9000bc1: mov    %edi,%eax
  0x00007f8ab9000bc3: and    $0xff,%eax
  0x00007f8ab9000bc9: shr    $0x8,%edi
  0x00007f8ab9000bcc: xor    (%rcx,%rax,4),%edi
  ;; L_tail_restore:
  0x00007f8ab9000bcf: mov    %r11d,%edx
  ;; L_tail:
  0x00007f8ab9000bd2: and    $0xf,%edx
  0x00007f8ab9000bd5: je     0x00007f8ab9000bf0
  0x00007f8ab9000bd7: nop
  ;; L_tail_loop:
  0x00007f8ab9000bd8: movsbl (%rsi),%eax
  0x00007f8ab9000bdb: xor    %edi,%eax
  0x00007f8ab9000bdd: and    $0xff,%eax
  0x00007f8ab9000be3: shr    $0x8,%edi
  0x00007f8ab9000be6: xor    (%rcx,%rax,4),%edi
  0x00007f8ab9000be9: inc    %rsi
  0x00007f8ab9000bec: dec    %edx
  0x00007f8ab9000bee: jg     0x00007f8ab9000bd8
  ;; L_exit:
  0x00007f8ab9000bf0: not    %edi
  0x00007f8ab9000bf2: mov    %edi,%eax
  0x00007f8ab9000bf4: leaveq 
  0x00007f8ab9000bf5: retq   

Decoding RuntimeStub - wrong_method_stub 0x00007f8ab9004fd0
  0x00007f8ab9005040: push   %rbp
  0x00007f8ab9005041: mov    %rsp,%rbp
  0x00007f8ab9005044: pushfq 
  0x00007f8ab9005045: sub    $0x8,%rsp
  0x00007f8ab9005049: mov    %rsp,-0x28(%rsp)
  0x00007f8ab900504e: sub    $0x80,%rsp
  0x00007f8ab9005055: mov    %rax,0x78(%rsp)
  0x00007f8ab900505a: mov    %rcx,0x70(%rsp)
  0x00007f8ab900505f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9005064: mov    %rbx,0x60(%rsp)
  0x00007f8ab9005069: mov    %rbp,0x50(%rsp)
  0x00007f8ab900506e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9005073: mov    %rdi,0x40(%rsp)
  0x00007f8ab9005078: mov    %r8,0x38(%rsp)
  0x00007f8ab900507d: mov    %r9,0x30(%rsp)
  0x00007f8ab9005082: mov    %r10,0x28(%rsp)
  0x00007f8ab9005087: mov    %r11,0x20(%rsp)
  0x00007f8ab900508c: mov    %r12,0x18(%rsp)
  0x00007f8ab9005091: mov    %r13,0x10(%rsp)
  0x00007f8ab9005096: mov    %r14,0x8(%rsp)
  0x00007f8ab900509b: mov    %r15,(%rsp)
  0x00007f8ab900509f: sub    $0x200,%rsp
  0x00007f8ab90050a6: fxsave64 (%rsp)
  0x00007f8ab90050ab: mov    %rsp,0x200(%r15)
  0x00007f8ab90050b2: mov    %r15,%rdi
  0x00007f8ab90050b5: callq  0x00007f8acef89de8
  0x00007f8ab90050ba: movabs $0x0,%r10
  0x00007f8ab90050c4: mov    %r10,0x200(%r15)
  0x00007f8ab90050cb: movabs $0x0,%r10
  0x00007f8ab90050d5: mov    %r10,0x208(%r15)
  0x00007f8ab90050dc: cmpq   $0x0,0x8(%r15)
  0x00007f8ab90050e4: jne    0x00007f8ab9005177
  0x00007f8ab90050ea: mov    0x268(%r15),%rbx
  0x00007f8ab90050f1: movabs $0x0,%r10
  0x00007f8ab90050fb: mov    %r10,0x268(%r15)
  0x00007f8ab9005102: mov    %rbx,0x260(%rsp)
  0x00007f8ab900510a: mov    %rax,0x278(%rsp)
  0x00007f8ab9005112: fxrstor64 (%rsp)
  0x00007f8ab9005117: add    $0x200,%rsp
  0x00007f8ab900511e: mov    (%rsp),%r15
  0x00007f8ab9005122: mov    0x8(%rsp),%r14
  0x00007f8ab9005127: mov    0x10(%rsp),%r13
  0x00007f8ab900512c: mov    0x18(%rsp),%r12
  0x00007f8ab9005131: mov    0x20(%rsp),%r11
  0x00007f8ab9005136: mov    0x28(%rsp),%r10
  0x00007f8ab900513b: mov    0x30(%rsp),%r9
  0x00007f8ab9005140: mov    0x38(%rsp),%r8
  0x00007f8ab9005145: mov    0x40(%rsp),%rdi
  0x00007f8ab900514a: mov    0x48(%rsp),%rsi
  0x00007f8ab900514f: mov    0x50(%rsp),%rbp
  0x00007f8ab9005154: mov    0x60(%rsp),%rbx
  0x00007f8ab9005159: mov    0x68(%rsp),%rdx
  0x00007f8ab900515e: mov    0x70(%rsp),%rcx
  0x00007f8ab9005163: mov    0x78(%rsp),%rax
  0x00007f8ab9005168: add    $0x80,%rsp
  0x00007f8ab900516f: add    $0x8,%rsp
  0x00007f8ab9005173: popfq  
  0x00007f8ab9005174: pop    %rbp
  0x00007f8ab9005175: jmpq   *%rax
  0x00007f8ab9005177: fxrstor64 (%rsp)
  0x00007f8ab900517c: add    $0x200,%rsp
  0x00007f8ab9005183: mov    (%rsp),%r15
  0x00007f8ab9005187: mov    0x8(%rsp),%r14
  0x00007f8ab900518c: mov    0x10(%rsp),%r13
  0x00007f8ab9005191: mov    0x18(%rsp),%r12
  0x00007f8ab9005196: mov    0x20(%rsp),%r11
  0x00007f8ab900519b: mov    0x28(%rsp),%r10
  0x00007f8ab90051a0: mov    0x30(%rsp),%r9
  0x00007f8ab90051a5: mov    0x38(%rsp),%r8
  0x00007f8ab90051aa: mov    0x40(%rsp),%rdi
  0x00007f8ab90051af: mov    0x48(%rsp),%rsi
  0x00007f8ab90051b4: mov    0x50(%rsp),%rbp
  0x00007f8ab90051b9: mov    0x60(%rsp),%rbx
  0x00007f8ab90051be: mov    0x68(%rsp),%rdx
  0x00007f8ab90051c3: mov    0x70(%rsp),%rcx
  0x00007f8ab90051c8: mov    0x78(%rsp),%rax
  0x00007f8ab90051cd: add    $0x80,%rsp
  0x00007f8ab90051d4: add    $0x8,%rsp
  0x00007f8ab90051d8: popfq  
  0x00007f8ab90051d9: pop    %rbp
  0x00007f8ab90051da: movq   $0x0,0x260(%r15)
  0x00007f8ab90051e5: mov    0x8(%r15),%rax
  0x00007f8ab90051e9: jmpq   0x00007f8ab9000420
  0x00007f8ab90051ee: hlt    
  0x00007f8ab90051ef: hlt    

Decoding RuntimeStub - wrong_method_abstract_stub 0x00007f8ab9105990
  0x00007f8ab9105a00: push   %rbp
  0x00007f8ab9105a01: mov    %rsp,%rbp
  0x00007f8ab9105a04: pushfq 
  0x00007f8ab9105a05: sub    $0x8,%rsp
  0x00007f8ab9105a09: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9105a0e: sub    $0x80,%rsp
  0x00007f8ab9105a15: mov    %rax,0x78(%rsp)
  0x00007f8ab9105a1a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9105a1f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9105a24: mov    %rbx,0x60(%rsp)
  0x00007f8ab9105a29: mov    %rbp,0x50(%rsp)
  0x00007f8ab9105a2e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9105a33: mov    %rdi,0x40(%rsp)
  0x00007f8ab9105a38: mov    %r8,0x38(%rsp)
  0x00007f8ab9105a3d: mov    %r9,0x30(%rsp)
  0x00007f8ab9105a42: mov    %r10,0x28(%rsp)
  0x00007f8ab9105a47: mov    %r11,0x20(%rsp)
  0x00007f8ab9105a4c: mov    %r12,0x18(%rsp)
  0x00007f8ab9105a51: mov    %r13,0x10(%rsp)
  0x00007f8ab9105a56: mov    %r14,0x8(%rsp)
  0x00007f8ab9105a5b: mov    %r15,(%rsp)
  0x00007f8ab9105a5f: sub    $0x200,%rsp
  0x00007f8ab9105a66: fxsave64 (%rsp)
  0x00007f8ab9105a6b: mov    %rsp,0x200(%r15)
  0x00007f8ab9105a72: mov    %r15,%rdi
  0x00007f8ab9105a75: callq  0x00007f8acef8a208
  0x00007f8ab9105a7a: movabs $0x0,%r10
  0x00007f8ab9105a84: mov    %r10,0x200(%r15)
  0x00007f8ab9105a8b: movabs $0x0,%r10
  0x00007f8ab9105a95: mov    %r10,0x208(%r15)
  0x00007f8ab9105a9c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9105aa4: jne    0x00007f8ab9105b37
  0x00007f8ab9105aaa: mov    0x268(%r15),%rbx
  0x00007f8ab9105ab1: movabs $0x0,%r10
  0x00007f8ab9105abb: mov    %r10,0x268(%r15)
  0x00007f8ab9105ac2: mov    %rbx,0x260(%rsp)
  0x00007f8ab9105aca: mov    %rax,0x278(%rsp)
  0x00007f8ab9105ad2: fxrstor64 (%rsp)
  0x00007f8ab9105ad7: add    $0x200,%rsp
  0x00007f8ab9105ade: mov    (%rsp),%r15
  0x00007f8ab9105ae2: mov    0x8(%rsp),%r14
  0x00007f8ab9105ae7: mov    0x10(%rsp),%r13
  0x00007f8ab9105aec: mov    0x18(%rsp),%r12
  0x00007f8ab9105af1: mov    0x20(%rsp),%r11
  0x00007f8ab9105af6: mov    0x28(%rsp),%r10
  0x00007f8ab9105afb: mov    0x30(%rsp),%r9
  0x00007f8ab9105b00: mov    0x38(%rsp),%r8
  0x00007f8ab9105b05: mov    0x40(%rsp),%rdi
  0x00007f8ab9105b0a: mov    0x48(%rsp),%rsi
  0x00007f8ab9105b0f: mov    0x50(%rsp),%rbp
  0x00007f8ab9105b14: mov    0x60(%rsp),%rbx
  0x00007f8ab9105b19: mov    0x68(%rsp),%rdx
  0x00007f8ab9105b1e: mov    0x70(%rsp),%rcx
  0x00007f8ab9105b23: mov    0x78(%rsp),%rax
  0x00007f8ab9105b28: add    $0x80,%rsp
  0x00007f8ab9105b2f: add    $0x8,%rsp
  0x00007f8ab9105b33: popfq  
  0x00007f8ab9105b34: pop    %rbp
  0x00007f8ab9105b35: jmpq   *%rax
  0x00007f8ab9105b37: fxrstor64 (%rsp)
  0x00007f8ab9105b3c: add    $0x200,%rsp
  0x00007f8ab9105b43: mov    (%rsp),%r15
  0x00007f8ab9105b47: mov    0x8(%rsp),%r14
  0x00007f8ab9105b4c: mov    0x10(%rsp),%r13
  0x00007f8ab9105b51: mov    0x18(%rsp),%r12
  0x00007f8ab9105b56: mov    0x20(%rsp),%r11
  0x00007f8ab9105b5b: mov    0x28(%rsp),%r10
  0x00007f8ab9105b60: mov    0x30(%rsp),%r9
  0x00007f8ab9105b65: mov    0x38(%rsp),%r8
  0x00007f8ab9105b6a: mov    0x40(%rsp),%rdi
  0x00007f8ab9105b6f: mov    0x48(%rsp),%rsi
  0x00007f8ab9105b74: mov    0x50(%rsp),%rbp
  0x00007f8ab9105b79: mov    0x60(%rsp),%rbx
  0x00007f8ab9105b7e: mov    0x68(%rsp),%rdx
  0x00007f8ab9105b83: mov    0x70(%rsp),%rcx
  0x00007f8ab9105b88: mov    0x78(%rsp),%rax
  0x00007f8ab9105b8d: add    $0x80,%rsp
  0x00007f8ab9105b94: add    $0x8,%rsp
  0x00007f8ab9105b98: popfq  
  0x00007f8ab9105b99: pop    %rbp
  0x00007f8ab9105b9a: movq   $0x0,0x260(%r15)
  0x00007f8ab9105ba5: mov    0x8(%r15),%rax
  0x00007f8ab9105ba9: jmpq   0x00007f8ab9000420
  0x00007f8ab9105bae: hlt    
  0x00007f8ab9105baf: hlt    

Decoding RuntimeStub - ic_miss_stub 0x00007f8ab9105bd0
  0x00007f8ab9105c40: push   %rbp
  0x00007f8ab9105c41: mov    %rsp,%rbp
  0x00007f8ab9105c44: pushfq 
  0x00007f8ab9105c45: sub    $0x8,%rsp
  0x00007f8ab9105c49: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9105c4e: sub    $0x80,%rsp
  0x00007f8ab9105c55: mov    %rax,0x78(%rsp)
  0x00007f8ab9105c5a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9105c5f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9105c64: mov    %rbx,0x60(%rsp)
  0x00007f8ab9105c69: mov    %rbp,0x50(%rsp)
  0x00007f8ab9105c6e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9105c73: mov    %rdi,0x40(%rsp)
  0x00007f8ab9105c78: mov    %r8,0x38(%rsp)
  0x00007f8ab9105c7d: mov    %r9,0x30(%rsp)
  0x00007f8ab9105c82: mov    %r10,0x28(%rsp)
  0x00007f8ab9105c87: mov    %r11,0x20(%rsp)
  0x00007f8ab9105c8c: mov    %r12,0x18(%rsp)
  0x00007f8ab9105c91: mov    %r13,0x10(%rsp)
  0x00007f8ab9105c96: mov    %r14,0x8(%rsp)
  0x00007f8ab9105c9b: mov    %r15,(%rsp)
  0x00007f8ab9105c9f: sub    $0x200,%rsp
  0x00007f8ab9105ca6: fxsave64 (%rsp)
  0x00007f8ab9105cab: mov    %rsp,0x200(%r15)
  0x00007f8ab9105cb2: mov    %r15,%rdi
  0x00007f8ab9105cb5: callq  0x00007f8acef89a64
  0x00007f8ab9105cba: movabs $0x0,%r10
  0x00007f8ab9105cc4: mov    %r10,0x200(%r15)
  0x00007f8ab9105ccb: movabs $0x0,%r10
  0x00007f8ab9105cd5: mov    %r10,0x208(%r15)
  0x00007f8ab9105cdc: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9105ce4: jne    0x00007f8ab9105d77
  0x00007f8ab9105cea: mov    0x268(%r15),%rbx
  0x00007f8ab9105cf1: movabs $0x0,%r10
  0x00007f8ab9105cfb: mov    %r10,0x268(%r15)
  0x00007f8ab9105d02: mov    %rbx,0x260(%rsp)
  0x00007f8ab9105d0a: mov    %rax,0x278(%rsp)
  0x00007f8ab9105d12: fxrstor64 (%rsp)
  0x00007f8ab9105d17: add    $0x200,%rsp
  0x00007f8ab9105d1e: mov    (%rsp),%r15
  0x00007f8ab9105d22: mov    0x8(%rsp),%r14
  0x00007f8ab9105d27: mov    0x10(%rsp),%r13
  0x00007f8ab9105d2c: mov    0x18(%rsp),%r12
  0x00007f8ab9105d31: mov    0x20(%rsp),%r11
  0x00007f8ab9105d36: mov    0x28(%rsp),%r10
  0x00007f8ab9105d3b: mov    0x30(%rsp),%r9
  0x00007f8ab9105d40: mov    0x38(%rsp),%r8
  0x00007f8ab9105d45: mov    0x40(%rsp),%rdi
  0x00007f8ab9105d4a: mov    0x48(%rsp),%rsi
  0x00007f8ab9105d4f: mov    0x50(%rsp),%rbp
  0x00007f8ab9105d54: mov    0x60(%rsp),%rbx
  0x00007f8ab9105d59: mov    0x68(%rsp),%rdx
  0x00007f8ab9105d5e: mov    0x70(%rsp),%rcx
  0x00007f8ab9105d63: mov    0x78(%rsp),%rax
  0x00007f8ab9105d68: add    $0x80,%rsp
  0x00007f8ab9105d6f: add    $0x8,%rsp
  0x00007f8ab9105d73: popfq  
  0x00007f8ab9105d74: pop    %rbp
  0x00007f8ab9105d75: jmpq   *%rax
  0x00007f8ab9105d77: fxrstor64 (%rsp)
  0x00007f8ab9105d7c: add    $0x200,%rsp
  0x00007f8ab9105d83: mov    (%rsp),%r15
  0x00007f8ab9105d87: mov    0x8(%rsp),%r14
  0x00007f8ab9105d8c: mov    0x10(%rsp),%r13
  0x00007f8ab9105d91: mov    0x18(%rsp),%r12
  0x00007f8ab9105d96: mov    0x20(%rsp),%r11
  0x00007f8ab9105d9b: mov    0x28(%rsp),%r10
  0x00007f8ab9105da0: mov    0x30(%rsp),%r9
  0x00007f8ab9105da5: mov    0x38(%rsp),%r8
  0x00007f8ab9105daa: mov    0x40(%rsp),%rdi
  0x00007f8ab9105daf: mov    0x48(%rsp),%rsi
  0x00007f8ab9105db4: mov    0x50(%rsp),%rbp
  0x00007f8ab9105db9: mov    0x60(%rsp),%rbx
  0x00007f8ab9105dbe: mov    0x68(%rsp),%rdx
  0x00007f8ab9105dc3: mov    0x70(%rsp),%rcx
  0x00007f8ab9105dc8: mov    0x78(%rsp),%rax
  0x00007f8ab9105dcd: add    $0x80,%rsp
  0x00007f8ab9105dd4: add    $0x8,%rsp
  0x00007f8ab9105dd8: popfq  
  0x00007f8ab9105dd9: pop    %rbp
  0x00007f8ab9105dda: movq   $0x0,0x260(%r15)
  0x00007f8ab9105de5: mov    0x8(%r15),%rax
  0x00007f8ab9105de9: jmpq   0x00007f8ab9000420
  0x00007f8ab9105dee: hlt    
  0x00007f8ab9105def: hlt    

Decoding RuntimeStub - resolve_opt_virtual_call 0x00007f8ab9105e10
  0x00007f8ab9105e80: push   %rbp
  0x00007f8ab9105e81: mov    %rsp,%rbp
  0x00007f8ab9105e84: pushfq 
  0x00007f8ab9105e85: sub    $0x8,%rsp
  0x00007f8ab9105e89: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9105e8e: sub    $0x80,%rsp
  0x00007f8ab9105e95: mov    %rax,0x78(%rsp)
  0x00007f8ab9105e9a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9105e9f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9105ea4: mov    %rbx,0x60(%rsp)
  0x00007f8ab9105ea9: mov    %rbp,0x50(%rsp)
  0x00007f8ab9105eae: mov    %rsi,0x48(%rsp)
  0x00007f8ab9105eb3: mov    %rdi,0x40(%rsp)
  0x00007f8ab9105eb8: mov    %r8,0x38(%rsp)
  0x00007f8ab9105ebd: mov    %r9,0x30(%rsp)
  0x00007f8ab9105ec2: mov    %r10,0x28(%rsp)
  0x00007f8ab9105ec7: mov    %r11,0x20(%rsp)
  0x00007f8ab9105ecc: mov    %r12,0x18(%rsp)
  0x00007f8ab9105ed1: mov    %r13,0x10(%rsp)
  0x00007f8ab9105ed6: mov    %r14,0x8(%rsp)
  0x00007f8ab9105edb: mov    %r15,(%rsp)
  0x00007f8ab9105edf: sub    $0x200,%rsp
  0x00007f8ab9105ee6: fxsave64 (%rsp)
  0x00007f8ab9105eeb: mov    %rsp,0x200(%r15)
  0x00007f8ab9105ef2: mov    %r15,%rdi
  0x00007f8ab9105ef5: callq  0x00007f8acef8a7ea
  0x00007f8ab9105efa: movabs $0x0,%r10
  0x00007f8ab9105f04: mov    %r10,0x200(%r15)
  0x00007f8ab9105f0b: movabs $0x0,%r10
  0x00007f8ab9105f15: mov    %r10,0x208(%r15)
  0x00007f8ab9105f1c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9105f24: jne    0x00007f8ab9105fb7
  0x00007f8ab9105f2a: mov    0x268(%r15),%rbx
  0x00007f8ab9105f31: movabs $0x0,%r10
  0x00007f8ab9105f3b: mov    %r10,0x268(%r15)
  0x00007f8ab9105f42: mov    %rbx,0x260(%rsp)
  0x00007f8ab9105f4a: mov    %rax,0x278(%rsp)
  0x00007f8ab9105f52: fxrstor64 (%rsp)
  0x00007f8ab9105f57: add    $0x200,%rsp
  0x00007f8ab9105f5e: mov    (%rsp),%r15
  0x00007f8ab9105f62: mov    0x8(%rsp),%r14
  0x00007f8ab9105f67: mov    0x10(%rsp),%r13
  0x00007f8ab9105f6c: mov    0x18(%rsp),%r12
  0x00007f8ab9105f71: mov    0x20(%rsp),%r11
  0x00007f8ab9105f76: mov    0x28(%rsp),%r10
  0x00007f8ab9105f7b: mov    0x30(%rsp),%r9
  0x00007f8ab9105f80: mov    0x38(%rsp),%r8
  0x00007f8ab9105f85: mov    0x40(%rsp),%rdi
  0x00007f8ab9105f8a: mov    0x48(%rsp),%rsi
  0x00007f8ab9105f8f: mov    0x50(%rsp),%rbp
  0x00007f8ab9105f94: mov    0x60(%rsp),%rbx
  0x00007f8ab9105f99: mov    0x68(%rsp),%rdx
  0x00007f8ab9105f9e: mov    0x70(%rsp),%rcx
  0x00007f8ab9105fa3: mov    0x78(%rsp),%rax
  0x00007f8ab9105fa8: add    $0x80,%rsp
  0x00007f8ab9105faf: add    $0x8,%rsp
  0x00007f8ab9105fb3: popfq  
  0x00007f8ab9105fb4: pop    %rbp
  0x00007f8ab9105fb5: jmpq   *%rax
  0x00007f8ab9105fb7: fxrstor64 (%rsp)
  0x00007f8ab9105fbc: add    $0x200,%rsp
  0x00007f8ab9105fc3: mov    (%rsp),%r15
  0x00007f8ab9105fc7: mov    0x8(%rsp),%r14
  0x00007f8ab9105fcc: mov    0x10(%rsp),%r13
  0x00007f8ab9105fd1: mov    0x18(%rsp),%r12
  0x00007f8ab9105fd6: mov    0x20(%rsp),%r11
  0x00007f8ab9105fdb: mov    0x28(%rsp),%r10
  0x00007f8ab9105fe0: mov    0x30(%rsp),%r9
  0x00007f8ab9105fe5: mov    0x38(%rsp),%r8
  0x00007f8ab9105fea: mov    0x40(%rsp),%rdi
  0x00007f8ab9105fef: mov    0x48(%rsp),%rsi
  0x00007f8ab9105ff4: mov    0x50(%rsp),%rbp
  0x00007f8ab9105ff9: mov    0x60(%rsp),%rbx
  0x00007f8ab9105ffe: mov    0x68(%rsp),%rdx
  0x00007f8ab9106003: mov    0x70(%rsp),%rcx
  0x00007f8ab9106008: mov    0x78(%rsp),%rax
  0x00007f8ab910600d: add    $0x80,%rsp
  0x00007f8ab9106014: add    $0x8,%rsp
  0x00007f8ab9106018: popfq  
  0x00007f8ab9106019: pop    %rbp
  0x00007f8ab910601a: movq   $0x0,0x260(%r15)
  0x00007f8ab9106025: mov    0x8(%r15),%rax
  0x00007f8ab9106029: jmpq   0x00007f8ab9000420
  0x00007f8ab910602e: hlt    
  0x00007f8ab910602f: hlt    

Decoding RuntimeStub - resolve_virtual_call 0x00007f8ab9106050
  0x00007f8ab91060c0: push   %rbp
  0x00007f8ab91060c1: mov    %rsp,%rbp
  0x00007f8ab91060c4: pushfq 
  0x00007f8ab91060c5: sub    $0x8,%rsp
  0x00007f8ab91060c9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91060ce: sub    $0x80,%rsp
  0x00007f8ab91060d5: mov    %rax,0x78(%rsp)
  0x00007f8ab91060da: mov    %rcx,0x70(%rsp)
  0x00007f8ab91060df: mov    %rdx,0x68(%rsp)
  0x00007f8ab91060e4: mov    %rbx,0x60(%rsp)
  0x00007f8ab91060e9: mov    %rbp,0x50(%rsp)
  0x00007f8ab91060ee: mov    %rsi,0x48(%rsp)
  0x00007f8ab91060f3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91060f8: mov    %r8,0x38(%rsp)
  0x00007f8ab91060fd: mov    %r9,0x30(%rsp)
  0x00007f8ab9106102: mov    %r10,0x28(%rsp)
  0x00007f8ab9106107: mov    %r11,0x20(%rsp)
  0x00007f8ab910610c: mov    %r12,0x18(%rsp)
  0x00007f8ab9106111: mov    %r13,0x10(%rsp)
  0x00007f8ab9106116: mov    %r14,0x8(%rsp)
  0x00007f8ab910611b: mov    %r15,(%rsp)
  0x00007f8ab910611f: sub    $0x200,%rsp
  0x00007f8ab9106126: fxsave64 (%rsp)
  0x00007f8ab910612b: mov    %rsp,0x200(%r15)
  0x00007f8ab9106132: mov    %r15,%rdi
  0x00007f8ab9106135: callq  0x00007f8acef8a582
  0x00007f8ab910613a: movabs $0x0,%r10
  0x00007f8ab9106144: mov    %r10,0x200(%r15)
  0x00007f8ab910614b: movabs $0x0,%r10
  0x00007f8ab9106155: mov    %r10,0x208(%r15)
  0x00007f8ab910615c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9106164: jne    0x00007f8ab91061f7
  0x00007f8ab910616a: mov    0x268(%r15),%rbx
  0x00007f8ab9106171: movabs $0x0,%r10
  0x00007f8ab910617b: mov    %r10,0x268(%r15)
  0x00007f8ab9106182: mov    %rbx,0x260(%rsp)
  0x00007f8ab910618a: mov    %rax,0x278(%rsp)
  0x00007f8ab9106192: fxrstor64 (%rsp)
  0x00007f8ab9106197: add    $0x200,%rsp
  0x00007f8ab910619e: mov    (%rsp),%r15
  0x00007f8ab91061a2: mov    0x8(%rsp),%r14
  0x00007f8ab91061a7: mov    0x10(%rsp),%r13
  0x00007f8ab91061ac: mov    0x18(%rsp),%r12
  0x00007f8ab91061b1: mov    0x20(%rsp),%r11
  0x00007f8ab91061b6: mov    0x28(%rsp),%r10
  0x00007f8ab91061bb: mov    0x30(%rsp),%r9
  0x00007f8ab91061c0: mov    0x38(%rsp),%r8
  0x00007f8ab91061c5: mov    0x40(%rsp),%rdi
  0x00007f8ab91061ca: mov    0x48(%rsp),%rsi
  0x00007f8ab91061cf: mov    0x50(%rsp),%rbp
  0x00007f8ab91061d4: mov    0x60(%rsp),%rbx
  0x00007f8ab91061d9: mov    0x68(%rsp),%rdx
  0x00007f8ab91061de: mov    0x70(%rsp),%rcx
  0x00007f8ab91061e3: mov    0x78(%rsp),%rax
  0x00007f8ab91061e8: add    $0x80,%rsp
  0x00007f8ab91061ef: add    $0x8,%rsp
  0x00007f8ab91061f3: popfq  
  0x00007f8ab91061f4: pop    %rbp
  0x00007f8ab91061f5: jmpq   *%rax
  0x00007f8ab91061f7: fxrstor64 (%rsp)
  0x00007f8ab91061fc: add    $0x200,%rsp
  0x00007f8ab9106203: mov    (%rsp),%r15
  0x00007f8ab9106207: mov    0x8(%rsp),%r14
  0x00007f8ab910620c: mov    0x10(%rsp),%r13
  0x00007f8ab9106211: mov    0x18(%rsp),%r12
  0x00007f8ab9106216: mov    0x20(%rsp),%r11
  0x00007f8ab910621b: mov    0x28(%rsp),%r10
  0x00007f8ab9106220: mov    0x30(%rsp),%r9
  0x00007f8ab9106225: mov    0x38(%rsp),%r8
  0x00007f8ab910622a: mov    0x40(%rsp),%rdi
  0x00007f8ab910622f: mov    0x48(%rsp),%rsi
  0x00007f8ab9106234: mov    0x50(%rsp),%rbp
  0x00007f8ab9106239: mov    0x60(%rsp),%rbx
  0x00007f8ab910623e: mov    0x68(%rsp),%rdx
  0x00007f8ab9106243: mov    0x70(%rsp),%rcx
  0x00007f8ab9106248: mov    0x78(%rsp),%rax
  0x00007f8ab910624d: add    $0x80,%rsp
  0x00007f8ab9106254: add    $0x8,%rsp
  0x00007f8ab9106258: popfq  
  0x00007f8ab9106259: pop    %rbp
  0x00007f8ab910625a: movq   $0x0,0x260(%r15)
  0x00007f8ab9106265: mov    0x8(%r15),%rax
  0x00007f8ab9106269: jmpq   0x00007f8ab9000420
  0x00007f8ab910626e: hlt    
  0x00007f8ab910626f: hlt    

Decoding RuntimeStub - resolve_static_call 0x00007f8ab9106290
  0x00007f8ab9106300: push   %rbp
  0x00007f8ab9106301: mov    %rsp,%rbp
  0x00007f8ab9106304: pushfq 
  0x00007f8ab9106305: sub    $0x8,%rsp
  0x00007f8ab9106309: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910630e: sub    $0x80,%rsp
  0x00007f8ab9106315: mov    %rax,0x78(%rsp)
  0x00007f8ab910631a: mov    %rcx,0x70(%rsp)
  0x00007f8ab910631f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9106324: mov    %rbx,0x60(%rsp)
  0x00007f8ab9106329: mov    %rbp,0x50(%rsp)
  0x00007f8ab910632e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9106333: mov    %rdi,0x40(%rsp)
  0x00007f8ab9106338: mov    %r8,0x38(%rsp)
  0x00007f8ab910633d: mov    %r9,0x30(%rsp)
  0x00007f8ab9106342: mov    %r10,0x28(%rsp)
  0x00007f8ab9106347: mov    %r11,0x20(%rsp)
  0x00007f8ab910634c: mov    %r12,0x18(%rsp)
  0x00007f8ab9106351: mov    %r13,0x10(%rsp)
  0x00007f8ab9106356: mov    %r14,0x8(%rsp)
  0x00007f8ab910635b: mov    %r15,(%rsp)
  0x00007f8ab910635f: sub    $0x200,%rsp
  0x00007f8ab9106366: fxsave64 (%rsp)
  0x00007f8ab910636b: mov    %rsp,0x200(%r15)
  0x00007f8ab9106372: mov    %r15,%rdi
  0x00007f8ab9106375: callq  0x00007f8acef8a31a
  0x00007f8ab910637a: movabs $0x0,%r10
  0x00007f8ab9106384: mov    %r10,0x200(%r15)
  0x00007f8ab910638b: movabs $0x0,%r10
  0x00007f8ab9106395: mov    %r10,0x208(%r15)
  0x00007f8ab910639c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91063a4: jne    0x00007f8ab9106437
  0x00007f8ab91063aa: mov    0x268(%r15),%rbx
  0x00007f8ab91063b1: movabs $0x0,%r10
  0x00007f8ab91063bb: mov    %r10,0x268(%r15)
  0x00007f8ab91063c2: mov    %rbx,0x260(%rsp)
  0x00007f8ab91063ca: mov    %rax,0x278(%rsp)
  0x00007f8ab91063d2: fxrstor64 (%rsp)
  0x00007f8ab91063d7: add    $0x200,%rsp
  0x00007f8ab91063de: mov    (%rsp),%r15
  0x00007f8ab91063e2: mov    0x8(%rsp),%r14
  0x00007f8ab91063e7: mov    0x10(%rsp),%r13
  0x00007f8ab91063ec: mov    0x18(%rsp),%r12
  0x00007f8ab91063f1: mov    0x20(%rsp),%r11
  0x00007f8ab91063f6: mov    0x28(%rsp),%r10
  0x00007f8ab91063fb: mov    0x30(%rsp),%r9
  0x00007f8ab9106400: mov    0x38(%rsp),%r8
  0x00007f8ab9106405: mov    0x40(%rsp),%rdi
  0x00007f8ab910640a: mov    0x48(%rsp),%rsi
  0x00007f8ab910640f: mov    0x50(%rsp),%rbp
  0x00007f8ab9106414: mov    0x60(%rsp),%rbx
  0x00007f8ab9106419: mov    0x68(%rsp),%rdx
  0x00007f8ab910641e: mov    0x70(%rsp),%rcx
  0x00007f8ab9106423: mov    0x78(%rsp),%rax
  0x00007f8ab9106428: add    $0x80,%rsp
  0x00007f8ab910642f: add    $0x8,%rsp
  0x00007f8ab9106433: popfq  
  0x00007f8ab9106434: pop    %rbp
  0x00007f8ab9106435: jmpq   *%rax
  0x00007f8ab9106437: fxrstor64 (%rsp)
  0x00007f8ab910643c: add    $0x200,%rsp
  0x00007f8ab9106443: mov    (%rsp),%r15
  0x00007f8ab9106447: mov    0x8(%rsp),%r14
  0x00007f8ab910644c: mov    0x10(%rsp),%r13
  0x00007f8ab9106451: mov    0x18(%rsp),%r12
  0x00007f8ab9106456: mov    0x20(%rsp),%r11
  0x00007f8ab910645b: mov    0x28(%rsp),%r10
  0x00007f8ab9106460: mov    0x30(%rsp),%r9
  0x00007f8ab9106465: mov    0x38(%rsp),%r8
  0x00007f8ab910646a: mov    0x40(%rsp),%rdi
  0x00007f8ab910646f: mov    0x48(%rsp),%rsi
  0x00007f8ab9106474: mov    0x50(%rsp),%rbp
  0x00007f8ab9106479: mov    0x60(%rsp),%rbx
  0x00007f8ab910647e: mov    0x68(%rsp),%rdx
  0x00007f8ab9106483: mov    0x70(%rsp),%rcx
  0x00007f8ab9106488: mov    0x78(%rsp),%rax
  0x00007f8ab910648d: add    $0x80,%rsp
  0x00007f8ab9106494: add    $0x8,%rsp
  0x00007f8ab9106498: popfq  
  0x00007f8ab9106499: pop    %rbp
  0x00007f8ab910649a: movq   $0x0,0x260(%r15)
  0x00007f8ab91064a5: mov    0x8(%r15),%rax
  0x00007f8ab91064a9: jmpq   0x00007f8ab9000420
  0x00007f8ab91064ae: hlt    
  0x00007f8ab91064af: hlt    

Decoding SafepointBlob 0x00007f8ab91055d0
  0x00007f8ab9105620: push   %rbx
  0x00007f8ab9105621: push   %rbp
  0x00007f8ab9105622: mov    %rsp,%rbp
  0x00007f8ab9105625: pushfq 
  0x00007f8ab9105626: sub    $0x8,%rsp
  0x00007f8ab910562a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910562f: sub    $0x80,%rsp
  0x00007f8ab9105636: mov    %rax,0x78(%rsp)
  0x00007f8ab910563b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9105640: mov    %rdx,0x68(%rsp)
  0x00007f8ab9105645: mov    %rbx,0x60(%rsp)
  0x00007f8ab910564a: mov    %rbp,0x50(%rsp)
  0x00007f8ab910564f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9105654: mov    %rdi,0x40(%rsp)
  0x00007f8ab9105659: mov    %r8,0x38(%rsp)
  0x00007f8ab910565e: mov    %r9,0x30(%rsp)
  0x00007f8ab9105663: mov    %r10,0x28(%rsp)
  0x00007f8ab9105668: mov    %r11,0x20(%rsp)
  0x00007f8ab910566d: mov    %r12,0x18(%rsp)
  0x00007f8ab9105672: mov    %r13,0x10(%rsp)
  0x00007f8ab9105677: mov    %r14,0x8(%rsp)
  0x00007f8ab910567c: mov    %r15,(%rsp)
  0x00007f8ab9105680: sub    $0x200,%rsp
  0x00007f8ab9105687: fxsave64 (%rsp)
  0x00007f8ab910568c: sub    $0x100,%rsp
  0x00007f8ab9105693: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f8ab910569a: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f8ab91056a2: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f8ab91056aa: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f8ab91056b2: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f8ab91056ba: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f8ab91056c2: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f8ab91056ca: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f8ab91056d2: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f8ab91056dd: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f8ab91056e8: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f8ab91056f3: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f8ab91056fe: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f8ab9105709: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f8ab9105714: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f8ab910571f: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f8ab910572a: mov    %rsp,0x200(%r15)
  0x00007f8ab9105731: mov    0x2a8(%r15),%rdi
  0x00007f8ab9105738: mov    %rdi,0x8(%rbp)
  0x00007f8ab910573c: mov    %r15,%rdi
  0x00007f8ab910573f: callq  0x00007f8acef7e892
  0x00007f8ab9105744: movabs $0x0,%r10
  0x00007f8ab910574e: mov    %r10,0x200(%r15)
  0x00007f8ab9105755: movabs $0x0,%r10
  0x00007f8ab910575f: mov    %r10,0x208(%r15)
  0x00007f8ab9105766: cmpq   $0x0,0x8(%r15)
  0x00007f8ab910576e: je     0x00007f8ab910587a
  0x00007f8ab9105774: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f8ab910577b: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f8ab9105783: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f8ab910578b: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f8ab9105793: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f8ab910579b: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f8ab91057a3: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f8ab91057ab: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f8ab91057b3: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f8ab91057be: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f8ab91057c9: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f8ab91057d4: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f8ab91057df: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f8ab91057ea: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f8ab91057f5: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f8ab9105800: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f8ab910580b: add    $0x100,%rsp
  0x00007f8ab9105812: fxrstor64 (%rsp)
  0x00007f8ab9105817: add    $0x200,%rsp
  0x00007f8ab910581e: mov    (%rsp),%r15
  0x00007f8ab9105822: mov    0x8(%rsp),%r14
  0x00007f8ab9105827: mov    0x10(%rsp),%r13
  0x00007f8ab910582c: mov    0x18(%rsp),%r12
  0x00007f8ab9105831: mov    0x20(%rsp),%r11
  0x00007f8ab9105836: mov    0x28(%rsp),%r10
  0x00007f8ab910583b: mov    0x30(%rsp),%r9
  0x00007f8ab9105840: mov    0x38(%rsp),%r8
  0x00007f8ab9105845: mov    0x40(%rsp),%rdi
  0x00007f8ab910584a: mov    0x48(%rsp),%rsi
  0x00007f8ab910584f: mov    0x50(%rsp),%rbp
  0x00007f8ab9105854: mov    0x60(%rsp),%rbx
  0x00007f8ab9105859: mov    0x68(%rsp),%rdx
  0x00007f8ab910585e: mov    0x70(%rsp),%rcx
  0x00007f8ab9105863: mov    0x78(%rsp),%rax
  0x00007f8ab9105868: add    $0x80,%rsp
  0x00007f8ab910586f: add    $0x8,%rsp
  0x00007f8ab9105873: popfq  
  0x00007f8ab9105874: pop    %rbp
  0x00007f8ab9105875: jmpq   0x00007f8ab9000420
  0x00007f8ab910587a: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f8ab9105881: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f8ab9105889: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f8ab9105891: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f8ab9105899: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f8ab91058a1: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f8ab91058a9: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f8ab91058b1: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f8ab91058b9: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f8ab91058c4: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f8ab91058cf: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f8ab91058da: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f8ab91058e5: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f8ab91058f0: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f8ab91058fb: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f8ab9105906: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f8ab9105911: add    $0x100,%rsp
  0x00007f8ab9105918: fxrstor64 (%rsp)
  0x00007f8ab910591d: add    $0x200,%rsp
  0x00007f8ab9105924: mov    (%rsp),%r15
  0x00007f8ab9105928: mov    0x8(%rsp),%r14
  0x00007f8ab910592d: mov    0x10(%rsp),%r13
  0x00007f8ab9105932: mov    0x18(%rsp),%r12
  0x00007f8ab9105937: mov    0x20(%rsp),%r11
  0x00007f8ab910593c: mov    0x28(%rsp),%r10
  0x00007f8ab9105941: mov    0x30(%rsp),%r9
  0x00007f8ab9105946: mov    0x38(%rsp),%r8
  0x00007f8ab910594b: mov    0x40(%rsp),%rdi
  0x00007f8ab9105950: mov    0x48(%rsp),%rsi
  0x00007f8ab9105955: mov    0x50(%rsp),%rbp
  0x00007f8ab910595a: mov    0x60(%rsp),%rbx
  0x00007f8ab910595f: mov    0x68(%rsp),%rdx
  0x00007f8ab9105964: mov    0x70(%rsp),%rcx
  0x00007f8ab9105969: mov    0x78(%rsp),%rax
  0x00007f8ab910596e: add    $0x80,%rsp
  0x00007f8ab9105975: add    $0x8,%rsp
  0x00007f8ab9105979: popfq  
  0x00007f8ab910597a: pop    %rbp
  0x00007f8ab910597b: retq   
  0x00007f8ab910597c: hlt    
  0x00007f8ab910597d: hlt    
  0x00007f8ab910597e: hlt    
  0x00007f8ab910597f: hlt    

Decoding SafepointBlob 0x00007f8ab9106e50
  0x00007f8ab9106ea0: push   %rbx
  0x00007f8ab9106ea1: push   %rbp
  0x00007f8ab9106ea2: mov    %rsp,%rbp
  0x00007f8ab9106ea5: pushfq 
  0x00007f8ab9106ea6: sub    $0x8,%rsp
  0x00007f8ab9106eaa: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9106eaf: sub    $0x80,%rsp
  0x00007f8ab9106eb6: mov    %rax,0x78(%rsp)
  0x00007f8ab9106ebb: mov    %rcx,0x70(%rsp)
  0x00007f8ab9106ec0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9106ec5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9106eca: mov    %rbp,0x50(%rsp)
  0x00007f8ab9106ecf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9106ed4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9106ed9: mov    %r8,0x38(%rsp)
  0x00007f8ab9106ede: mov    %r9,0x30(%rsp)
  0x00007f8ab9106ee3: mov    %r10,0x28(%rsp)
  0x00007f8ab9106ee8: mov    %r11,0x20(%rsp)
  0x00007f8ab9106eed: mov    %r12,0x18(%rsp)
  0x00007f8ab9106ef2: mov    %r13,0x10(%rsp)
  0x00007f8ab9106ef7: mov    %r14,0x8(%rsp)
  0x00007f8ab9106efc: mov    %r15,(%rsp)
  0x00007f8ab9106f00: sub    $0x200,%rsp
  0x00007f8ab9106f07: fxsave64 (%rsp)
  0x00007f8ab9106f0c: mov    %rsp,0x200(%r15)
  0x00007f8ab9106f13: mov    0x2a8(%r15),%rdi
  0x00007f8ab9106f1a: mov    %rdi,0x8(%rbp)
  0x00007f8ab9106f1e: mov    %r15,%rdi
  0x00007f8ab9106f21: callq  0x00007f8acef7e892
  0x00007f8ab9106f26: movabs $0x0,%r10
  0x00007f8ab9106f30: mov    %r10,0x200(%r15)
  0x00007f8ab9106f37: movabs $0x0,%r10
  0x00007f8ab9106f41: mov    %r10,0x208(%r15)
  0x00007f8ab9106f48: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9106f50: je     0x00007f8ab9106fbe
  0x00007f8ab9106f56: fxrstor64 (%rsp)
  0x00007f8ab9106f5b: add    $0x200,%rsp
  0x00007f8ab9106f62: mov    (%rsp),%r15
  0x00007f8ab9106f66: mov    0x8(%rsp),%r14
  0x00007f8ab9106f6b: mov    0x10(%rsp),%r13
  0x00007f8ab9106f70: mov    0x18(%rsp),%r12
  0x00007f8ab9106f75: mov    0x20(%rsp),%r11
  0x00007f8ab9106f7a: mov    0x28(%rsp),%r10
  0x00007f8ab9106f7f: mov    0x30(%rsp),%r9
  0x00007f8ab9106f84: mov    0x38(%rsp),%r8
  0x00007f8ab9106f89: mov    0x40(%rsp),%rdi
  0x00007f8ab9106f8e: mov    0x48(%rsp),%rsi
  0x00007f8ab9106f93: mov    0x50(%rsp),%rbp
  0x00007f8ab9106f98: mov    0x60(%rsp),%rbx
  0x00007f8ab9106f9d: mov    0x68(%rsp),%rdx
  0x00007f8ab9106fa2: mov    0x70(%rsp),%rcx
  0x00007f8ab9106fa7: mov    0x78(%rsp),%rax
  0x00007f8ab9106fac: add    $0x80,%rsp
  0x00007f8ab9106fb3: add    $0x8,%rsp
  0x00007f8ab9106fb7: popfq  
  0x00007f8ab9106fb8: pop    %rbp
  0x00007f8ab9106fb9: jmpq   0x00007f8ab9000420
  0x00007f8ab9106fbe: fxrstor64 (%rsp)
  0x00007f8ab9106fc3: add    $0x200,%rsp
  0x00007f8ab9106fca: mov    (%rsp),%r15
  0x00007f8ab9106fce: mov    0x8(%rsp),%r14
  0x00007f8ab9106fd3: mov    0x10(%rsp),%r13
  0x00007f8ab9106fd8: mov    0x18(%rsp),%r12
  0x00007f8ab9106fdd: mov    0x20(%rsp),%r11
  0x00007f8ab9106fe2: mov    0x28(%rsp),%r10
  0x00007f8ab9106fe7: mov    0x30(%rsp),%r9
  0x00007f8ab9106fec: mov    0x38(%rsp),%r8
  0x00007f8ab9106ff1: mov    0x40(%rsp),%rdi
  0x00007f8ab9106ff6: mov    0x48(%rsp),%rsi
  0x00007f8ab9106ffb: mov    0x50(%rsp),%rbp
  0x00007f8ab9107000: mov    0x60(%rsp),%rbx
  0x00007f8ab9107005: mov    0x68(%rsp),%rdx
  0x00007f8ab910700a: mov    0x70(%rsp),%rcx
  0x00007f8ab910700f: mov    0x78(%rsp),%rax
  0x00007f8ab9107014: add    $0x80,%rsp
  0x00007f8ab910701b: add    $0x8,%rsp
  0x00007f8ab910701f: popfq  
  0x00007f8ab9107020: pop    %rbp
  0x00007f8ab9107021: retq   
  0x00007f8ab9107022: hlt    
  0x00007f8ab9107023: hlt    
  0x00007f8ab9107024: hlt    
  0x00007f8ab9107025: hlt    
  0x00007f8ab9107026: hlt    
  0x00007f8ab9107027: hlt    

Decoding SafepointBlob 0x00007f8ab9107050
  0x00007f8ab91070a0: push   %rbp
  0x00007f8ab91070a1: mov    %rsp,%rbp
  0x00007f8ab91070a4: pushfq 
  0x00007f8ab91070a5: sub    $0x8,%rsp
  0x00007f8ab91070a9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91070ae: sub    $0x80,%rsp
  0x00007f8ab91070b5: mov    %rax,0x78(%rsp)
  0x00007f8ab91070ba: mov    %rcx,0x70(%rsp)
  0x00007f8ab91070bf: mov    %rdx,0x68(%rsp)
  0x00007f8ab91070c4: mov    %rbx,0x60(%rsp)
  0x00007f8ab91070c9: mov    %rbp,0x50(%rsp)
  0x00007f8ab91070ce: mov    %rsi,0x48(%rsp)
  0x00007f8ab91070d3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91070d8: mov    %r8,0x38(%rsp)
  0x00007f8ab91070dd: mov    %r9,0x30(%rsp)
  0x00007f8ab91070e2: mov    %r10,0x28(%rsp)
  0x00007f8ab91070e7: mov    %r11,0x20(%rsp)
  0x00007f8ab91070ec: mov    %r12,0x18(%rsp)
  0x00007f8ab91070f1: mov    %r13,0x10(%rsp)
  0x00007f8ab91070f6: mov    %r14,0x8(%rsp)
  0x00007f8ab91070fb: mov    %r15,(%rsp)
  0x00007f8ab91070ff: sub    $0x200,%rsp
  0x00007f8ab9107106: fxsave64 (%rsp)
  0x00007f8ab910710b: mov    %rsp,0x200(%r15)
  0x00007f8ab9107112: mov    %r15,%rdi
  0x00007f8ab9107115: callq  0x00007f8acef7e892
  0x00007f8ab910711a: movabs $0x0,%r10
  0x00007f8ab9107124: mov    %r10,0x200(%r15)
  0x00007f8ab910712b: movabs $0x0,%r10
  0x00007f8ab9107135: mov    %r10,0x208(%r15)
  0x00007f8ab910713c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9107144: je     0x00007f8ab91071b2
  0x00007f8ab910714a: fxrstor64 (%rsp)
  0x00007f8ab910714f: add    $0x200,%rsp
  0x00007f8ab9107156: mov    (%rsp),%r15
  0x00007f8ab910715a: mov    0x8(%rsp),%r14
  0x00007f8ab910715f: mov    0x10(%rsp),%r13
  0x00007f8ab9107164: mov    0x18(%rsp),%r12
  0x00007f8ab9107169: mov    0x20(%rsp),%r11
  0x00007f8ab910716e: mov    0x28(%rsp),%r10
  0x00007f8ab9107173: mov    0x30(%rsp),%r9
  0x00007f8ab9107178: mov    0x38(%rsp),%r8
  0x00007f8ab910717d: mov    0x40(%rsp),%rdi
  0x00007f8ab9107182: mov    0x48(%rsp),%rsi
  0x00007f8ab9107187: mov    0x50(%rsp),%rbp
  0x00007f8ab910718c: mov    0x60(%rsp),%rbx
  0x00007f8ab9107191: mov    0x68(%rsp),%rdx
  0x00007f8ab9107196: mov    0x70(%rsp),%rcx
  0x00007f8ab910719b: mov    0x78(%rsp),%rax
  0x00007f8ab91071a0: add    $0x80,%rsp
  0x00007f8ab91071a7: add    $0x8,%rsp
  0x00007f8ab91071ab: popfq  
  0x00007f8ab91071ac: pop    %rbp
  0x00007f8ab91071ad: jmpq   0x00007f8ab9000420
  0x00007f8ab91071b2: fxrstor64 (%rsp)
  0x00007f8ab91071b7: add    $0x200,%rsp
  0x00007f8ab91071be: mov    (%rsp),%r15
  0x00007f8ab91071c2: mov    0x8(%rsp),%r14
  0x00007f8ab91071c7: mov    0x10(%rsp),%r13
  0x00007f8ab91071cc: mov    0x18(%rsp),%r12
  0x00007f8ab91071d1: mov    0x20(%rsp),%r11
  0x00007f8ab91071d6: mov    0x28(%rsp),%r10
  0x00007f8ab91071db: mov    0x30(%rsp),%r9
  0x00007f8ab91071e0: mov    0x38(%rsp),%r8
  0x00007f8ab91071e5: mov    0x40(%rsp),%rdi
  0x00007f8ab91071ea: mov    0x48(%rsp),%rsi
  0x00007f8ab91071ef: mov    0x50(%rsp),%rbp
  0x00007f8ab91071f4: mov    0x60(%rsp),%rbx
  0x00007f8ab91071f9: mov    0x68(%rsp),%rdx
  0x00007f8ab91071fe: mov    0x70(%rsp),%rcx
  0x00007f8ab9107203: mov    0x78(%rsp),%rax
  0x00007f8ab9107208: add    $0x80,%rsp
  0x00007f8ab910720f: add    $0x8,%rsp
  0x00007f8ab9107213: popfq  
  0x00007f8ab9107214: pop    %rbp
  0x00007f8ab9107215: retq   
  0x00007f8ab9107216: hlt    
  0x00007f8ab9107217: hlt    

Decoding DeoptimizationBlob 0x00007f8ab9107250
  0x00007f8ab91072e0: push   %rbp
  0x00007f8ab91072e1: mov    %rsp,%rbp
  0x00007f8ab91072e4: pushfq 
  0x00007f8ab91072e5: sub    $0x8,%rsp
  0x00007f8ab91072e9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91072ee: sub    $0x80,%rsp
  0x00007f8ab91072f5: mov    %rax,0x78(%rsp)
  0x00007f8ab91072fa: mov    %rcx,0x70(%rsp)
  0x00007f8ab91072ff: mov    %rdx,0x68(%rsp)
  0x00007f8ab9107304: mov    %rbx,0x60(%rsp)
  0x00007f8ab9107309: mov    %rbp,0x50(%rsp)
  0x00007f8ab910730e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9107313: mov    %rdi,0x40(%rsp)
  0x00007f8ab9107318: mov    %r8,0x38(%rsp)
  0x00007f8ab910731d: mov    %r9,0x30(%rsp)
  0x00007f8ab9107322: mov    %r10,0x28(%rsp)
  0x00007f8ab9107327: mov    %r11,0x20(%rsp)
  0x00007f8ab910732c: mov    %r12,0x18(%rsp)
  0x00007f8ab9107331: mov    %r13,0x10(%rsp)
  0x00007f8ab9107336: mov    %r14,0x8(%rsp)
  0x00007f8ab910733b: mov    %r15,(%rsp)
  0x00007f8ab910733f: sub    $0x200,%rsp
  0x00007f8ab9107346: fxsave64 (%rsp)
  0x00007f8ab910734b: mov    $0x0,%r14d
  0x00007f8ab9107351: jmpq   0x00007f8ab91074f1
  0x00007f8ab9107356: push   %rbp
  0x00007f8ab9107357: mov    %rsp,%rbp
  0x00007f8ab910735a: pushfq 
  0x00007f8ab910735b: sub    $0x8,%rsp
  0x00007f8ab910735f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9107364: sub    $0x80,%rsp
  0x00007f8ab910736b: mov    %rax,0x78(%rsp)
  0x00007f8ab9107370: mov    %rcx,0x70(%rsp)
  0x00007f8ab9107375: mov    %rdx,0x68(%rsp)
  0x00007f8ab910737a: mov    %rbx,0x60(%rsp)
  0x00007f8ab910737f: mov    %rbp,0x50(%rsp)
  0x00007f8ab9107384: mov    %rsi,0x48(%rsp)
  0x00007f8ab9107389: mov    %rdi,0x40(%rsp)
  0x00007f8ab910738e: mov    %r8,0x38(%rsp)
  0x00007f8ab9107393: mov    %r9,0x30(%rsp)
  0x00007f8ab9107398: mov    %r10,0x28(%rsp)
  0x00007f8ab910739d: mov    %r11,0x20(%rsp)
  0x00007f8ab91073a2: mov    %r12,0x18(%rsp)
  0x00007f8ab91073a7: mov    %r13,0x10(%rsp)
  0x00007f8ab91073ac: mov    %r14,0x8(%rsp)
  0x00007f8ab91073b1: mov    %r15,(%rsp)
  0x00007f8ab91073b5: sub    $0x200,%rsp
  0x00007f8ab91073bc: fxsave64 (%rsp)
  0x00007f8ab91073c1: mov    $0x3,%r14d
  0x00007f8ab91073c7: jmpq   0x00007f8ab91074f1
  0x00007f8ab91073cc: mov    %rdx,0x2d8(%r15)
  0x00007f8ab91073d3: mov    %rax,0x2d0(%r15)
  0x00007f8ab91073da: pushq  $0x0
  0x00007f8ab91073df: push   %rbp
  0x00007f8ab91073e0: mov    %rsp,%rbp
  0x00007f8ab91073e3: pushfq 
  0x00007f8ab91073e4: sub    $0x8,%rsp
  0x00007f8ab91073e8: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91073ed: sub    $0x80,%rsp
  0x00007f8ab91073f4: mov    %rax,0x78(%rsp)
  0x00007f8ab91073f9: mov    %rcx,0x70(%rsp)
  0x00007f8ab91073fe: mov    %rdx,0x68(%rsp)
  0x00007f8ab9107403: mov    %rbx,0x60(%rsp)
  0x00007f8ab9107408: mov    %rbp,0x50(%rsp)
  0x00007f8ab910740d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9107412: mov    %rdi,0x40(%rsp)
  0x00007f8ab9107417: mov    %r8,0x38(%rsp)
  0x00007f8ab910741c: mov    %r9,0x30(%rsp)
  0x00007f8ab9107421: mov    %r10,0x28(%rsp)
  0x00007f8ab9107426: mov    %r11,0x20(%rsp)
  0x00007f8ab910742b: mov    %r12,0x18(%rsp)
  0x00007f8ab9107430: mov    %r13,0x10(%rsp)
  0x00007f8ab9107435: mov    %r14,0x8(%rsp)
  0x00007f8ab910743a: mov    %r15,(%rsp)
  0x00007f8ab910743e: sub    $0x200,%rsp
  0x00007f8ab9107445: fxsave64 (%rsp)
  0x00007f8ab910744a: mov    $0x1,%r14d
  0x00007f8ab9107450: mov    0x2d8(%r15),%rdx
  0x00007f8ab9107457: mov    %rdx,0x8(%rbp)
  0x00007f8ab910745b: movq   $0x0,0x2d8(%r15)
  0x00007f8ab9107466: mov    0x2d0(%r15),%rax
  0x00007f8ab910746d: mov    0x8(%r15),%rax
  0x00007f8ab9107471: test   %rax,%rax
  0x00007f8ab9107474: je     0x00007f8ab91074f1
  0x00007f8ab910747a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910747f: sub    $0x80,%rsp
  0x00007f8ab9107486: mov    %rax,0x78(%rsp)
  0x00007f8ab910748b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9107490: mov    %rdx,0x68(%rsp)
  0x00007f8ab9107495: mov    %rbx,0x60(%rsp)
  0x00007f8ab910749a: mov    %rbp,0x50(%rsp)
  0x00007f8ab910749f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91074a4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91074a9: mov    %r8,0x38(%rsp)
  0x00007f8ab91074ae: mov    %r9,0x30(%rsp)
  0x00007f8ab91074b3: mov    %r10,0x28(%rsp)
  0x00007f8ab91074b8: mov    %r11,0x20(%rsp)
  0x00007f8ab91074bd: mov    %r12,0x18(%rsp)
  0x00007f8ab91074c2: mov    %r13,0x10(%rsp)
  0x00007f8ab91074c7: mov    %r14,0x8(%rsp)
  0x00007f8ab91074cc: mov    %r15,(%rsp)
  0x00007f8ab91074d0: movabs $0x7f8acf399530,%rdi
  0x00007f8ab91074da: movabs $0x7f8ab910747a,%rsi
  0x00007f8ab91074e4: mov    %rsp,%rdx
  0x00007f8ab91074e7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91074eb: callq  0x00007f8aceddb9fa
  0x00007f8ab91074f0: hlt    
  0x00007f8ab91074f1: mov    %rsp,0x200(%r15)
  0x00007f8ab91074f8: cmpq   $0x0,0x210(%r15)
  0x00007f8ab9107503: je     0x00007f8ab9107580
  0x00007f8ab9107509: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910750e: sub    $0x80,%rsp
  0x00007f8ab9107515: mov    %rax,0x78(%rsp)
  0x00007f8ab910751a: mov    %rcx,0x70(%rsp)
  0x00007f8ab910751f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9107524: mov    %rbx,0x60(%rsp)
  0x00007f8ab9107529: mov    %rbp,0x50(%rsp)
  0x00007f8ab910752e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9107533: mov    %rdi,0x40(%rsp)
  0x00007f8ab9107538: mov    %r8,0x38(%rsp)
  0x00007f8ab910753d: mov    %r9,0x30(%rsp)
  0x00007f8ab9107542: mov    %r10,0x28(%rsp)
  0x00007f8ab9107547: mov    %r11,0x20(%rsp)
  0x00007f8ab910754c: mov    %r12,0x18(%rsp)
  0x00007f8ab9107551: mov    %r13,0x10(%rsp)
  0x00007f8ab9107556: mov    %r14,0x8(%rsp)
  0x00007f8ab910755b: mov    %r15,(%rsp)
  0x00007f8ab910755f: movabs $0x7f8acf399558,%rdi
  0x00007f8ab9107569: movabs $0x7f8ab9107509,%rsi
  0x00007f8ab9107573: mov    %rsp,%rdx
  0x00007f8ab9107576: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910757a: callq  0x00007f8aceddb9fa
  0x00007f8ab910757f: hlt    
  0x00007f8ab9107580: mov    %r15,%rdi
  0x00007f8ab9107583: callq  0x00007f8acea307e0
  0x00007f8ab9107588: movabs $0x0,%r10
  0x00007f8ab9107592: mov    %r10,0x200(%r15)
  0x00007f8ab9107599: movabs $0x0,%r10
  0x00007f8ab91075a3: mov    %r10,0x208(%r15)
  0x00007f8ab91075aa: mov    %rax,%rdi
  0x00007f8ab91075ad: cmp    $0x1,%r14d
  0x00007f8ab91075b1: jne    0x00007f8ab91075eb
  0x00007f8ab91075b7: mov    0x2d0(%r15),%rax
  0x00007f8ab91075be: mov    0x2d8(%r15),%rdx
  0x00007f8ab91075c5: movq   $0x0,0x2d0(%r15)
  0x00007f8ab91075d0: movq   $0x0,0x2d8(%r15)
  0x00007f8ab91075db: mov    %rax,0x278(%rsp)
  0x00007f8ab91075e3: mov    %rdx,0x268(%rsp)
  0x00007f8ab91075eb: vmovsd 0xa0(%rsp),%xmm0
  0x00007f8ab91075f4: mov    0x278(%rsp),%rax
  0x00007f8ab91075fc: mov    0x268(%rsp),%rdx
  0x00007f8ab9107604: add    $0x298,%rsp
  0x00007f8ab910760b: mov    0x8(%rdi),%ecx
  0x00007f8ab910760e: add    %rcx,%rsp
  0x00007f8ab9107611: mov    0x38(%rdi),%rbp
  0x00007f8ab9107615: mov    0x14(%rdi),%ebx
  0x00007f8ab9107618: mov    %rsp,%rcx
  0x00007f8ab910761b: mov    %ebx,-0x1000(%rcx)
  0x00007f8ab9107621: sub    $0x1000,%rcx
  0x00007f8ab9107628: sub    $0x1000,%ebx
  0x00007f8ab910762e: jg     0x00007f8ab910761b
  0x00007f8ab9107630: mov    %rbx,-0x1000(%rcx)
  0x00007f8ab9107637: mov    %rbx,-0x2000(%rcx)
  0x00007f8ab910763e: mov    %rbx,-0x3000(%rcx)
  0x00007f8ab9107645: mov    %rbx,-0x4000(%rcx)
  0x00007f8ab910764c: mov    %rbx,-0x5000(%rcx)
  0x00007f8ab9107653: mov    %rbx,-0x6000(%rcx)
  0x00007f8ab910765a: mov    %rbx,-0x7000(%rcx)
  0x00007f8ab9107661: mov    %rbx,-0x8000(%rcx)
  0x00007f8ab9107668: mov    %rbx,-0x9000(%rcx)
  0x00007f8ab910766f: mov    %rbx,-0xa000(%rcx)
  0x00007f8ab9107676: mov    %rbx,-0xb000(%rcx)
  0x00007f8ab910767d: mov    %rbx,-0xc000(%rcx)
  0x00007f8ab9107684: mov    %rbx,-0xd000(%rcx)
  0x00007f8ab910768b: mov    %rbx,-0xe000(%rcx)
  0x00007f8ab9107692: mov    %rbx,-0xf000(%rcx)
  0x00007f8ab9107699: mov    %rbx,-0x10000(%rcx)
  0x00007f8ab91076a0: mov    %rbx,-0x11000(%rcx)
  0x00007f8ab91076a7: mov    %rbx,-0x12000(%rcx)
  0x00007f8ab91076ae: mov    %rbx,-0x13000(%rcx)
  0x00007f8ab91076b5: mov    %rbx,-0x14000(%rcx)
  0x00007f8ab91076bc: mov    %rbx,-0x15000(%rcx)
  0x00007f8ab91076c3: mov    0x20(%rdi),%rcx
  0x00007f8ab91076c7: add    $0x8,%rsp
  0x00007f8ab91076cb: mov    0x18(%rdi),%rsi
  0x00007f8ab91076cf: mov    0x10(%rdi),%edx
  0x00007f8ab91076d2: mov    %rsp,%r8
  0x00007f8ab91076d5: mov    0xc(%rdi),%ebx
  0x00007f8ab91076d8: sub    %rbx,%rsp
  0x00007f8ab91076db: mov    (%rsi),%rbx
  0x00007f8ab91076de: sub    $0x10,%rbx
  0x00007f8ab91076e2: rex.W pushq (%rcx)
  0x00007f8ab91076e5: push   %rbp
  0x00007f8ab91076e6: mov    %rsp,%rbp
  0x00007f8ab91076e9: sub    %rbx,%rsp
  0x00007f8ab91076ec: movq   $0x0,-0x10(%rbp)
  0x00007f8ab91076f4: mov    %r8,-0x8(%rbp)
  0x00007f8ab91076f8: mov    %rsp,%r8
  0x00007f8ab91076fb: add    $0x8,%rsi
  0x00007f8ab91076ff: add    $0x8,%rcx
  0x00007f8ab9107703: dec    %edx
  0x00007f8ab9107705: jne    0x00007f8ab91076db
  0x00007f8ab9107707: rex.W pushq (%rcx)
  0x00007f8ab910770a: push   %rbp
  0x00007f8ab910770b: mov    %rsp,%rbp
  0x00007f8ab910770e: sub    $0x290,%rsp
  0x00007f8ab9107715: vmovsd %xmm0,0xa0(%rsp)
  0x00007f8ab910771e: mov    %rax,0x278(%rsp)
  0x00007f8ab9107726: mov    %rbp,0x210(%r15)
  0x00007f8ab910772d: movabs $0x7f8ab9107726,%r10
  0x00007f8ab9107737: mov    %r10,0x208(%r15)
  0x00007f8ab910773e: mov    %rsp,0x200(%r15)
  0x00007f8ab9107745: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9107749: mov    %r15,%rdi
  0x00007f8ab910774c: mov    %r14d,%esi
  0x00007f8ab910774f: callq  0x00007f8acea31f9e
  0x00007f8ab9107754: mov    0x200(%r15),%rsp
  0x00007f8ab910775b: movabs $0x0,%r10
  0x00007f8ab9107765: mov    %r10,0x200(%r15)
  0x00007f8ab910776c: movabs $0x0,%r10
  0x00007f8ab9107776: mov    %r10,0x210(%r15)
  0x00007f8ab910777d: movabs $0x0,%r10
  0x00007f8ab9107787: mov    %r10,0x208(%r15)
  0x00007f8ab910778e: vmovsd 0xa0(%rsp),%xmm0
  0x00007f8ab9107797: mov    0x278(%rsp),%rax
  0x00007f8ab910779f: mov    0x268(%rsp),%rdx
  0x00007f8ab91077a7: leaveq 
  0x00007f8ab91077a8: retq   
  0x00007f8ab91077a9: hlt    
  0x00007f8ab91077aa: hlt    
  0x00007f8ab91077ab: hlt    
  0x00007f8ab91077ac: hlt    
  0x00007f8ab91077ad: hlt    
  0x00007f8ab91077ae: hlt    
  0x00007f8ab91077af: hlt    

Decoding UncommonTrapBlob 0x00007f8ab91077d0
  0x00007f8ab9107820: sub    $0x8,%rsp
  0x00007f8ab9107824: mov    %rbp,(%rsp)
  0x00007f8ab9107828: mov    %esi,%esi
  0x00007f8ab910782a: mov    %rsp,0x200(%r15)
  0x00007f8ab9107831: mov    %r15,%rdi
  0x00007f8ab9107834: callq  0x00007f8acea36592
  0x00007f8ab9107839: movabs $0x0,%r10
  0x00007f8ab9107843: mov    %r10,0x200(%r15)
  0x00007f8ab910784a: movabs $0x0,%r10
  0x00007f8ab9107854: mov    %r10,0x208(%r15)
  0x00007f8ab910785b: mov    %rax,%rdi
  0x00007f8ab910785e: add    $0x8,%rsp
  0x00007f8ab9107862: mov    0x8(%rdi),%ecx
  0x00007f8ab9107865: add    %rcx,%rsp
  0x00007f8ab9107868: mov    0x38(%rdi),%rbp
  0x00007f8ab910786c: mov    0x14(%rdi),%ebx
  0x00007f8ab910786f: mov    %rsp,%rcx
  0x00007f8ab9107872: mov    %ebx,-0x1000(%rcx)
  0x00007f8ab9107878: sub    $0x1000,%rcx
  0x00007f8ab910787f: sub    $0x1000,%ebx
  0x00007f8ab9107885: jg     0x00007f8ab9107872
  0x00007f8ab9107887: mov    %rbx,-0x1000(%rcx)
  0x00007f8ab910788e: mov    %rbx,-0x2000(%rcx)
  0x00007f8ab9107895: mov    %rbx,-0x3000(%rcx)
  0x00007f8ab910789c: mov    %rbx,-0x4000(%rcx)
  0x00007f8ab91078a3: mov    %rbx,-0x5000(%rcx)
  0x00007f8ab91078aa: mov    %rbx,-0x6000(%rcx)
  0x00007f8ab91078b1: mov    %rbx,-0x7000(%rcx)
  0x00007f8ab91078b8: mov    %rbx,-0x8000(%rcx)
  0x00007f8ab91078bf: mov    %rbx,-0x9000(%rcx)
  0x00007f8ab91078c6: mov    %rbx,-0xa000(%rcx)
  0x00007f8ab91078cd: mov    %rbx,-0xb000(%rcx)
  0x00007f8ab91078d4: mov    %rbx,-0xc000(%rcx)
  0x00007f8ab91078db: mov    %rbx,-0xd000(%rcx)
  0x00007f8ab91078e2: mov    %rbx,-0xe000(%rcx)
  0x00007f8ab91078e9: mov    %rbx,-0xf000(%rcx)
  0x00007f8ab91078f0: mov    %rbx,-0x10000(%rcx)
  0x00007f8ab91078f7: mov    %rbx,-0x11000(%rcx)
  0x00007f8ab91078fe: mov    %rbx,-0x12000(%rcx)
  0x00007f8ab9107905: mov    %rbx,-0x13000(%rcx)
  0x00007f8ab910790c: mov    %rbx,-0x14000(%rcx)
  0x00007f8ab9107913: mov    %rbx,-0x15000(%rcx)
  0x00007f8ab910791a: mov    0x20(%rdi),%rcx
  0x00007f8ab910791e: add    $0x8,%rsp
  0x00007f8ab9107922: mov    0x18(%rdi),%rsi
  0x00007f8ab9107926: mov    0x10(%rdi),%edx
  0x00007f8ab9107929: mov    %rsp,%r8
  0x00007f8ab910792c: mov    0xc(%rdi),%ebx
  0x00007f8ab910792f: sub    %rbx,%rsp
  0x00007f8ab9107932: mov    (%rsi),%rbx
  0x00007f8ab9107935: sub    $0x10,%rbx
  0x00007f8ab9107939: rex.W pushq (%rcx)
  0x00007f8ab910793c: push   %rbp
  0x00007f8ab910793d: mov    %rsp,%rbp
  0x00007f8ab9107940: sub    %rbx,%rsp
  0x00007f8ab9107943: mov    %r8,-0x8(%rbp)
  0x00007f8ab9107947: movq   $0x0,-0x10(%rbp)
  0x00007f8ab910794f: mov    %rsp,%r8
  0x00007f8ab9107952: add    $0x8,%rsi
  0x00007f8ab9107956: add    $0x8,%rcx
  0x00007f8ab910795a: dec    %edx
  0x00007f8ab910795c: jne    0x00007f8ab9107932
  0x00007f8ab910795e: rex.W pushq (%rcx)
  0x00007f8ab9107961: push   %rbp
  0x00007f8ab9107962: mov    %rsp,%rbp
  0x00007f8ab9107965: sub    $0x0,%rsp
  0x00007f8ab9107969: mov    %rbp,0x210(%r15)
  0x00007f8ab9107970: movabs $0x7f8ab9107969,%r10
  0x00007f8ab910797a: mov    %r10,0x208(%r15)
  0x00007f8ab9107981: mov    %rsp,0x200(%r15)
  0x00007f8ab9107988: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910798c: mov    %r15,%rdi
  0x00007f8ab910798f: mov    $0x2,%esi
  0x00007f8ab9107994: callq  0x00007f8acea31f9e
  0x00007f8ab9107999: movabs $0x0,%r10
  0x00007f8ab91079a3: mov    %r10,0x200(%r15)
  0x00007f8ab91079aa: movabs $0x0,%r10
  0x00007f8ab91079b4: mov    %r10,0x210(%r15)
  0x00007f8ab91079bb: movabs $0x0,%r10
  0x00007f8ab91079c5: mov    %r10,0x208(%r15)
  0x00007f8ab91079cc: leaveq 
  0x00007f8ab91079cd: retq   
  0x00007f8ab91079ce: hlt    
  0x00007f8ab91079cf: hlt    

AHE@0x00007f8ac80c3788: 0xb0000000 i2c: 0x00007f8ab9106c20 c2i: 0x00007f8ab9106d34 c2iUV: 0x00007f8ab9106d07
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab9106d34
  0x00007f8ab9106c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9106c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9106c2e: cmp    %r11,%rax
  0x00007f8ab9106c31: jbe    0x00007f8ab9106c4a
  0x00007f8ab9106c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9106c41: cmp    %r11,%rax
  0x00007f8ab9106c44: jb     0x00007f8ab9106ce7
  0x00007f8ab9106c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9106c54: cmp    %r11,%rax
  0x00007f8ab9106c57: jbe    0x00007f8ab9106c70
  0x00007f8ab9106c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9106c67: cmp    %r11,%rax
  0x00007f8ab9106c6a: jb     0x00007f8ab9106ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9106c70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9106c75: sub    $0x80,%rsp
  0x00007f8ab9106c7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9106c81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9106c86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9106c8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9106c90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9106c95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9106c9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9106c9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9106ca4: mov    %r9,0x30(%rsp)
  0x00007f8ab9106ca9: mov    %r10,0x28(%rsp)
  0x00007f8ab9106cae: mov    %r11,0x20(%rsp)
  0x00007f8ab9106cb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9106cb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9106cbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9106cc2: mov    %r15,(%rsp)
  0x00007f8ab9106cc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9106cd0: movabs $0x7f8ab9106c70,%rsi
  0x00007f8ab9106cda: mov    %rsp,%rdx
  0x00007f8ab9106cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9106ce1: callq  0x00007f8aceddb9fa
  0x00007f8ab9106ce6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9106ce7: mov    %rsp,%r11
  0x00007f8ab9106cea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9106cee: push   %rax
  0x00007f8ab9106cef: mov    %r11,%rax
  0x00007f8ab9106cf2: mov    0x50(%rbx),%r11
  0x00007f8ab9106cf6: mov    0x8(%rax),%rsi
  0x00007f8ab9106cfa: mov    %rbx,0x258(%r15)
  0x00007f8ab9106d01: mov    %rbx,%rax
  0x00007f8ab9106d04: jmpq   *%r11
  0x00007f8ab9106d07: mov    0x8(%rsi),%ebx
  0x00007f8ab9106d0a: shl    $0x3,%rbx
  0x00007f8ab9106d0e: cmp    0x10(%rax),%rbx
  0x00007f8ab9106d12: mov    0x8(%rax),%rbx
  0x00007f8ab9106d16: je     0x00007f8ab9106d21
  0x00007f8ab9106d1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9106d21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9106d29: je     0x00007f8ab9106e24
  0x00007f8ab9106d2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9106d34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9106d3c: je     0x00007f8ab9106e24
  0x00007f8ab9106d42: mov    %rsp,%r13
  0x00007f8ab9106d45: mov    (%rsp),%rax
  0x00007f8ab9106d49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9106d4d: pushfq 
  0x00007f8ab9106d4e: sub    $0x8,%rsp
  0x00007f8ab9106d52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9106d57: sub    $0x80,%rsp
  0x00007f8ab9106d5e: mov    %rax,0x78(%rsp)
  0x00007f8ab9106d63: mov    %rcx,0x70(%rsp)
  0x00007f8ab9106d68: mov    %rdx,0x68(%rsp)
  0x00007f8ab9106d6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9106d72: mov    %rbp,0x50(%rsp)
  0x00007f8ab9106d77: mov    %rsi,0x48(%rsp)
  0x00007f8ab9106d7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9106d81: mov    %r8,0x38(%rsp)
  0x00007f8ab9106d86: mov    %r9,0x30(%rsp)
  0x00007f8ab9106d8b: mov    %r10,0x28(%rsp)
  0x00007f8ab9106d90: mov    %r11,0x20(%rsp)
  0x00007f8ab9106d95: mov    %r12,0x18(%rsp)
  0x00007f8ab9106d9a: mov    %r13,0x10(%rsp)
  0x00007f8ab9106d9f: mov    %r14,0x8(%rsp)
  0x00007f8ab9106da4: mov    %r15,(%rsp)
  0x00007f8ab9106da8: sub    $0x200,%rsp
  0x00007f8ab9106daf: fxsave64 (%rsp)
  0x00007f8ab9106db4: mov    %rbx,%rdi
  0x00007f8ab9106db7: mov    %rax,%rsi
  0x00007f8ab9106dba: callq  0x00007f8acef8bbca
  0x00007f8ab9106dbf: fxrstor64 (%rsp)
  0x00007f8ab9106dc4: add    $0x200,%rsp
  0x00007f8ab9106dcb: mov    (%rsp),%r15
  0x00007f8ab9106dcf: mov    0x8(%rsp),%r14
  0x00007f8ab9106dd4: mov    0x10(%rsp),%r13
  0x00007f8ab9106dd9: mov    0x18(%rsp),%r12
  0x00007f8ab9106dde: mov    0x20(%rsp),%r11
  0x00007f8ab9106de3: mov    0x28(%rsp),%r10
  0x00007f8ab9106de8: mov    0x30(%rsp),%r9
  0x00007f8ab9106ded: mov    0x38(%rsp),%r8
  0x00007f8ab9106df2: mov    0x40(%rsp),%rdi
  0x00007f8ab9106df7: mov    0x48(%rsp),%rsi
  0x00007f8ab9106dfc: mov    0x50(%rsp),%rbp
  0x00007f8ab9106e01: mov    0x60(%rsp),%rbx
  0x00007f8ab9106e06: mov    0x68(%rsp),%rdx
  0x00007f8ab9106e0b: mov    0x70(%rsp),%rcx
  0x00007f8ab9106e10: mov    0x78(%rsp),%rax
  0x00007f8ab9106e15: add    $0x80,%rsp
  0x00007f8ab9106e1c: add    $0x8,%rsp
  0x00007f8ab9106e20: popfq  
  0x00007f8ab9106e21: mov    %r13,%rsp
  0x00007f8ab9106e24: pop    %rax
  0x00007f8ab9106e25: mov    %rsp,%r13
  0x00007f8ab9106e28: sub    $0x10,%rsp
  0x00007f8ab9106e2c: mov    %rax,(%rsp)
  0x00007f8ab9106e30: mov    %rsi,0x8(%rsp)
  0x00007f8ab9106e35: mov    0x40(%rbx),%rcx
  0x00007f8ab9106e39: jmpq   *%rcx

AHE@0x00007f8ac80c37d0: 0xb0000000 i2c: 0x00007f8ab9106960 c2i: 0x00007f8ab9106a74 c2iUV: 0x00007f8ab9106a47
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab9106a74
  0x00007f8ab9106960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9106964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910696e: cmp    %r11,%rax
  0x00007f8ab9106971: jbe    0x00007f8ab910698a
  0x00007f8ab9106977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9106981: cmp    %r11,%rax
  0x00007f8ab9106984: jb     0x00007f8ab9106a27
  0x00007f8ab910698a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9106994: cmp    %r11,%rax
  0x00007f8ab9106997: jbe    0x00007f8ab91069b0
  0x00007f8ab910699d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91069a7: cmp    %r11,%rax
  0x00007f8ab91069aa: jb     0x00007f8ab9106a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91069b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91069b5: sub    $0x80,%rsp
  0x00007f8ab91069bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91069c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91069c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91069cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91069d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91069d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91069da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91069df: mov    %r8,0x38(%rsp)
  0x00007f8ab91069e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91069e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91069ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91069f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91069f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91069fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9106a02: mov    %r15,(%rsp)
  0x00007f8ab9106a06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9106a10: movabs $0x7f8ab91069b0,%rsi
  0x00007f8ab9106a1a: mov    %rsp,%rdx
  0x00007f8ab9106a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9106a21: callq  0x00007f8aceddb9fa
  0x00007f8ab9106a26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9106a27: mov    %rsp,%r11
  0x00007f8ab9106a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9106a2e: push   %rax
  0x00007f8ab9106a2f: mov    %r11,%rax
  0x00007f8ab9106a32: mov    0x50(%rbx),%r11
  0x00007f8ab9106a36: mov    0x8(%rax),%rsi
  0x00007f8ab9106a3a: mov    %rbx,0x258(%r15)
  0x00007f8ab9106a41: mov    %rbx,%rax
  0x00007f8ab9106a44: jmpq   *%r11
  0x00007f8ab9106a47: mov    0x8(%rsi),%ebx
  0x00007f8ab9106a4a: shl    $0x3,%rbx
  0x00007f8ab9106a4e: cmp    0x10(%rax),%rbx
  0x00007f8ab9106a52: mov    0x8(%rax),%rbx
  0x00007f8ab9106a56: je     0x00007f8ab9106a61
  0x00007f8ab9106a5c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9106a61: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9106a69: je     0x00007f8ab9106b64
  0x00007f8ab9106a6f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9106a74: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9106a7c: je     0x00007f8ab9106b64
  0x00007f8ab9106a82: mov    %rsp,%r13
  0x00007f8ab9106a85: mov    (%rsp),%rax
  0x00007f8ab9106a89: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9106a8d: pushfq 
  0x00007f8ab9106a8e: sub    $0x8,%rsp
  0x00007f8ab9106a92: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9106a97: sub    $0x80,%rsp
  0x00007f8ab9106a9e: mov    %rax,0x78(%rsp)
  0x00007f8ab9106aa3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9106aa8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9106aad: mov    %rbx,0x60(%rsp)
  0x00007f8ab9106ab2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9106ab7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9106abc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9106ac1: mov    %r8,0x38(%rsp)
  0x00007f8ab9106ac6: mov    %r9,0x30(%rsp)
  0x00007f8ab9106acb: mov    %r10,0x28(%rsp)
  0x00007f8ab9106ad0: mov    %r11,0x20(%rsp)
  0x00007f8ab9106ad5: mov    %r12,0x18(%rsp)
  0x00007f8ab9106ada: mov    %r13,0x10(%rsp)
  0x00007f8ab9106adf: mov    %r14,0x8(%rsp)
  0x00007f8ab9106ae4: mov    %r15,(%rsp)
  0x00007f8ab9106ae8: sub    $0x200,%rsp
  0x00007f8ab9106aef: fxsave64 (%rsp)
  0x00007f8ab9106af4: mov    %rbx,%rdi
  0x00007f8ab9106af7: mov    %rax,%rsi
  0x00007f8ab9106afa: callq  0x00007f8acef8bbca
  0x00007f8ab9106aff: fxrstor64 (%rsp)
  0x00007f8ab9106b04: add    $0x200,%rsp
  0x00007f8ab9106b0b: mov    (%rsp),%r15
  0x00007f8ab9106b0f: mov    0x8(%rsp),%r14
  0x00007f8ab9106b14: mov    0x10(%rsp),%r13
  0x00007f8ab9106b19: mov    0x18(%rsp),%r12
  0x00007f8ab9106b1e: mov    0x20(%rsp),%r11
  0x00007f8ab9106b23: mov    0x28(%rsp),%r10
  0x00007f8ab9106b28: mov    0x30(%rsp),%r9
  0x00007f8ab9106b2d: mov    0x38(%rsp),%r8
  0x00007f8ab9106b32: mov    0x40(%rsp),%rdi
  0x00007f8ab9106b37: mov    0x48(%rsp),%rsi
  0x00007f8ab9106b3c: mov    0x50(%rsp),%rbp
  0x00007f8ab9106b41: mov    0x60(%rsp),%rbx
  0x00007f8ab9106b46: mov    0x68(%rsp),%rdx
  0x00007f8ab9106b4b: mov    0x70(%rsp),%rcx
  0x00007f8ab9106b50: mov    0x78(%rsp),%rax
  0x00007f8ab9106b55: add    $0x80,%rsp
  0x00007f8ab9106b5c: add    $0x8,%rsp
  0x00007f8ab9106b60: popfq  
  0x00007f8ab9106b61: mov    %r13,%rsp
  0x00007f8ab9106b64: pop    %rax
  0x00007f8ab9106b65: mov    %rsp,%r13
  0x00007f8ab9106b68: sub    $0x10,%rsp
  0x00007f8ab9106b6c: mov    %rax,(%rsp)
  0x00007f8ab9106b70: mov    %rsi,0x8(%rsp)
  0x00007f8ab9106b75: mov    0x40(%rbx),%rcx
  0x00007f8ab9106b79: jmpq   *%rcx

AHE@0x00007f8ac80c3818: 0x i2c: 0x00007f8ab91066a0 c2i: 0x00007f8ab91067b0 c2iUV: 0x00007f8ab9106783
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab91067b0
  0x00007f8ab91066a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91066a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91066ae: cmp    %r11,%rax
  0x00007f8ab91066b1: jbe    0x00007f8ab91066ca
  0x00007f8ab91066b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91066c1: cmp    %r11,%rax
  0x00007f8ab91066c4: jb     0x00007f8ab9106767
  0x00007f8ab91066ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91066d4: cmp    %r11,%rax
  0x00007f8ab91066d7: jbe    0x00007f8ab91066f0
  0x00007f8ab91066dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91066e7: cmp    %r11,%rax
  0x00007f8ab91066ea: jb     0x00007f8ab9106767
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91066f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91066f5: sub    $0x80,%rsp
  0x00007f8ab91066fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9106701: mov    %rcx,0x70(%rsp)
  0x00007f8ab9106706: mov    %rdx,0x68(%rsp)
  0x00007f8ab910670b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9106710: mov    %rbp,0x50(%rsp)
  0x00007f8ab9106715: mov    %rsi,0x48(%rsp)
  0x00007f8ab910671a: mov    %rdi,0x40(%rsp)
  0x00007f8ab910671f: mov    %r8,0x38(%rsp)
  0x00007f8ab9106724: mov    %r9,0x30(%rsp)
  0x00007f8ab9106729: mov    %r10,0x28(%rsp)
  0x00007f8ab910672e: mov    %r11,0x20(%rsp)
  0x00007f8ab9106733: mov    %r12,0x18(%rsp)
  0x00007f8ab9106738: mov    %r13,0x10(%rsp)
  0x00007f8ab910673d: mov    %r14,0x8(%rsp)
  0x00007f8ab9106742: mov    %r15,(%rsp)
  0x00007f8ab9106746: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9106750: movabs $0x7f8ab91066f0,%rsi
  0x00007f8ab910675a: mov    %rsp,%rdx
  0x00007f8ab910675d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9106761: callq  0x00007f8aceddb9fa
  0x00007f8ab9106766: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9106767: mov    %rsp,%r11
  0x00007f8ab910676a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910676e: push   %rax
  0x00007f8ab910676f: mov    %r11,%rax
  0x00007f8ab9106772: mov    0x50(%rbx),%r11
  0x00007f8ab9106776: mov    %rbx,0x258(%r15)
  0x00007f8ab910677d: mov    %rbx,%rax
  0x00007f8ab9106780: jmpq   *%r11
  0x00007f8ab9106783: mov    0x8(%rsi),%ebx
  0x00007f8ab9106786: shl    $0x3,%rbx
  0x00007f8ab910678a: cmp    0x10(%rax),%rbx
  0x00007f8ab910678e: mov    0x8(%rax),%rbx
  0x00007f8ab9106792: je     0x00007f8ab910679d
  0x00007f8ab9106798: jmpq   0x00007f8ab9105c40
  0x00007f8ab910679d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91067a5: je     0x00007f8ab91068a0
  0x00007f8ab91067ab: jmpq   0x00007f8ab9105c40
  0x00007f8ab91067b0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91067b8: je     0x00007f8ab91068a0
  0x00007f8ab91067be: mov    %rsp,%r13
  0x00007f8ab91067c1: mov    (%rsp),%rax
  0x00007f8ab91067c5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91067c9: pushfq 
  0x00007f8ab91067ca: sub    $0x8,%rsp
  0x00007f8ab91067ce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91067d3: sub    $0x80,%rsp
  0x00007f8ab91067da: mov    %rax,0x78(%rsp)
  0x00007f8ab91067df: mov    %rcx,0x70(%rsp)
  0x00007f8ab91067e4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91067e9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91067ee: mov    %rbp,0x50(%rsp)
  0x00007f8ab91067f3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91067f8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91067fd: mov    %r8,0x38(%rsp)
  0x00007f8ab9106802: mov    %r9,0x30(%rsp)
  0x00007f8ab9106807: mov    %r10,0x28(%rsp)
  0x00007f8ab910680c: mov    %r11,0x20(%rsp)
  0x00007f8ab9106811: mov    %r12,0x18(%rsp)
  0x00007f8ab9106816: mov    %r13,0x10(%rsp)
  0x00007f8ab910681b: mov    %r14,0x8(%rsp)
  0x00007f8ab9106820: mov    %r15,(%rsp)
  0x00007f8ab9106824: sub    $0x200,%rsp
  0x00007f8ab910682b: fxsave64 (%rsp)
  0x00007f8ab9106830: mov    %rbx,%rdi
  0x00007f8ab9106833: mov    %rax,%rsi
  0x00007f8ab9106836: callq  0x00007f8acef8bbca
  0x00007f8ab910683b: fxrstor64 (%rsp)
  0x00007f8ab9106840: add    $0x200,%rsp
  0x00007f8ab9106847: mov    (%rsp),%r15
  0x00007f8ab910684b: mov    0x8(%rsp),%r14
  0x00007f8ab9106850: mov    0x10(%rsp),%r13
  0x00007f8ab9106855: mov    0x18(%rsp),%r12
  0x00007f8ab910685a: mov    0x20(%rsp),%r11
  0x00007f8ab910685f: mov    0x28(%rsp),%r10
  0x00007f8ab9106864: mov    0x30(%rsp),%r9
  0x00007f8ab9106869: mov    0x38(%rsp),%r8
  0x00007f8ab910686e: mov    0x40(%rsp),%rdi
  0x00007f8ab9106873: mov    0x48(%rsp),%rsi
  0x00007f8ab9106878: mov    0x50(%rsp),%rbp
  0x00007f8ab910687d: mov    0x60(%rsp),%rbx
  0x00007f8ab9106882: mov    0x68(%rsp),%rdx
  0x00007f8ab9106887: mov    0x70(%rsp),%rcx
  0x00007f8ab910688c: mov    0x78(%rsp),%rax
  0x00007f8ab9106891: add    $0x80,%rsp
  0x00007f8ab9106898: add    $0x8,%rsp
  0x00007f8ab910689c: popfq  
  0x00007f8ab910689d: mov    %r13,%rsp
  0x00007f8ab91068a0: pop    %rax
  0x00007f8ab91068a1: mov    %rsp,%r13
  0x00007f8ab91068a4: sub    $0x10,%rsp
  0x00007f8ab91068a8: mov    %rax,(%rsp)
  0x00007f8ab91068ac: mov    0x40(%rbx),%rcx
  0x00007f8ab91068b0: jmpq   *%rcx

AHE@0x00007f8ac80c3860: 0xb0000000 i2c: 0x00007f8ab910e3a0 c2i: 0x00007f8ab910e4b4 c2iUV: 0x00007f8ab910e487
i2c argument handler #0 for: receiver ()Ljava/lang/Object; (539 bytes generated)
c2i argument handler starts at 0x7f8ab910e4b4
  0x00007f8ab910e3a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910e3a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910e3ae: cmp    %r11,%rax
  0x00007f8ab910e3b1: jbe    0x00007f8ab910e3ca
  0x00007f8ab910e3b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910e3c1: cmp    %r11,%rax
  0x00007f8ab910e3c4: jb     0x00007f8ab910e467
  0x00007f8ab910e3ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910e3d4: cmp    %r11,%rax
  0x00007f8ab910e3d7: jbe    0x00007f8ab910e3f0
  0x00007f8ab910e3dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910e3e7: cmp    %r11,%rax
  0x00007f8ab910e3ea: jb     0x00007f8ab910e467
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910e3f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910e3f5: sub    $0x80,%rsp
  0x00007f8ab910e3fc: mov    %rax,0x78(%rsp)
  0x00007f8ab910e401: mov    %rcx,0x70(%rsp)
  0x00007f8ab910e406: mov    %rdx,0x68(%rsp)
  0x00007f8ab910e40b: mov    %rbx,0x60(%rsp)
  0x00007f8ab910e410: mov    %rbp,0x50(%rsp)
  0x00007f8ab910e415: mov    %rsi,0x48(%rsp)
  0x00007f8ab910e41a: mov    %rdi,0x40(%rsp)
  0x00007f8ab910e41f: mov    %r8,0x38(%rsp)
  0x00007f8ab910e424: mov    %r9,0x30(%rsp)
  0x00007f8ab910e429: mov    %r10,0x28(%rsp)
  0x00007f8ab910e42e: mov    %r11,0x20(%rsp)
  0x00007f8ab910e433: mov    %r12,0x18(%rsp)
  0x00007f8ab910e438: mov    %r13,0x10(%rsp)
  0x00007f8ab910e43d: mov    %r14,0x8(%rsp)
  0x00007f8ab910e442: mov    %r15,(%rsp)
  0x00007f8ab910e446: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910e450: movabs $0x7f8ab910e3f0,%rsi
  0x00007f8ab910e45a: mov    %rsp,%rdx
  0x00007f8ab910e45d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e461: callq  0x00007f8aceddb9fa
  0x00007f8ab910e466: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910e467: mov    %rsp,%r11
  0x00007f8ab910e46a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e46e: push   %rax
  0x00007f8ab910e46f: mov    %r11,%rax
  0x00007f8ab910e472: mov    0x50(%rbx),%r11
  0x00007f8ab910e476: mov    0x8(%rax),%rsi
  0x00007f8ab910e47a: mov    %rbx,0x258(%r15)
  0x00007f8ab910e481: mov    %rbx,%rax
  0x00007f8ab910e484: jmpq   *%r11
  0x00007f8ab910e487: mov    0x8(%rsi),%ebx
  0x00007f8ab910e48a: shl    $0x3,%rbx
  0x00007f8ab910e48e: cmp    0x10(%rax),%rbx
  0x00007f8ab910e492: mov    0x8(%rax),%rbx
  0x00007f8ab910e496: je     0x00007f8ab910e4a1
  0x00007f8ab910e49c: jmpq   0x00007f8ab9105c40
  0x00007f8ab910e4a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910e4a9: je     0x00007f8ab910e5a4
  0x00007f8ab910e4af: jmpq   0x00007f8ab9105c40
  0x00007f8ab910e4b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910e4bc: je     0x00007f8ab910e5a4
  0x00007f8ab910e4c2: mov    %rsp,%r13
  0x00007f8ab910e4c5: mov    (%rsp),%rax
  0x00007f8ab910e4c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e4cd: pushfq 
  0x00007f8ab910e4ce: sub    $0x8,%rsp
  0x00007f8ab910e4d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910e4d7: sub    $0x80,%rsp
  0x00007f8ab910e4de: mov    %rax,0x78(%rsp)
  0x00007f8ab910e4e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab910e4e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab910e4ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab910e4f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab910e4f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab910e4fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab910e501: mov    %r8,0x38(%rsp)
  0x00007f8ab910e506: mov    %r9,0x30(%rsp)
  0x00007f8ab910e50b: mov    %r10,0x28(%rsp)
  0x00007f8ab910e510: mov    %r11,0x20(%rsp)
  0x00007f8ab910e515: mov    %r12,0x18(%rsp)
  0x00007f8ab910e51a: mov    %r13,0x10(%rsp)
  0x00007f8ab910e51f: mov    %r14,0x8(%rsp)
  0x00007f8ab910e524: mov    %r15,(%rsp)
  0x00007f8ab910e528: sub    $0x200,%rsp
  0x00007f8ab910e52f: fxsave64 (%rsp)
  0x00007f8ab910e534: mov    %rbx,%rdi
  0x00007f8ab910e537: mov    %rax,%rsi
  0x00007f8ab910e53a: callq  0x00007f8acef8bbca
  0x00007f8ab910e53f: fxrstor64 (%rsp)
  0x00007f8ab910e544: add    $0x200,%rsp
  0x00007f8ab910e54b: mov    (%rsp),%r15
  0x00007f8ab910e54f: mov    0x8(%rsp),%r14
  0x00007f8ab910e554: mov    0x10(%rsp),%r13
  0x00007f8ab910e559: mov    0x18(%rsp),%r12
  0x00007f8ab910e55e: mov    0x20(%rsp),%r11
  0x00007f8ab910e563: mov    0x28(%rsp),%r10
  0x00007f8ab910e568: mov    0x30(%rsp),%r9
  0x00007f8ab910e56d: mov    0x38(%rsp),%r8
  0x00007f8ab910e572: mov    0x40(%rsp),%rdi
  0x00007f8ab910e577: mov    0x48(%rsp),%rsi
  0x00007f8ab910e57c: mov    0x50(%rsp),%rbp
  0x00007f8ab910e581: mov    0x60(%rsp),%rbx
  0x00007f8ab910e586: mov    0x68(%rsp),%rdx
  0x00007f8ab910e58b: mov    0x70(%rsp),%rcx
  0x00007f8ab910e590: mov    0x78(%rsp),%rax
  0x00007f8ab910e595: add    $0x80,%rsp
  0x00007f8ab910e59c: add    $0x8,%rsp
  0x00007f8ab910e5a0: popfq  
  0x00007f8ab910e5a1: mov    %r13,%rsp
  0x00007f8ab910e5a4: pop    %rax
  0x00007f8ab910e5a5: mov    %rsp,%r13
  0x00007f8ab910e5a8: sub    $0x10,%rsp
  0x00007f8ab910e5ac: mov    %rax,(%rsp)
  0x00007f8ab910e5b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab910e5b5: mov    0x40(%rbx),%rcx
  0x00007f8ab910e5b9: jmpq   *%rcx

AHE@0x00007f8ac80c38a8: 0xb0000000 i2c: 0x00007f8ab910e660 c2i: 0x00007f8ab910e774 c2iUV: 0x00007f8ab910e747
i2c argument handler #0 for: receiver ()Ljava/lang/Class; (539 bytes generated)
c2i argument handler starts at 0x7f8ab910e774
  0x00007f8ab910e660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910e664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910e66e: cmp    %r11,%rax
  0x00007f8ab910e671: jbe    0x00007f8ab910e68a
  0x00007f8ab910e677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910e681: cmp    %r11,%rax
  0x00007f8ab910e684: jb     0x00007f8ab910e727
  0x00007f8ab910e68a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910e694: cmp    %r11,%rax
  0x00007f8ab910e697: jbe    0x00007f8ab910e6b0
  0x00007f8ab910e69d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910e6a7: cmp    %r11,%rax
  0x00007f8ab910e6aa: jb     0x00007f8ab910e727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910e6b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910e6b5: sub    $0x80,%rsp
  0x00007f8ab910e6bc: mov    %rax,0x78(%rsp)
  0x00007f8ab910e6c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab910e6c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab910e6cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab910e6d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab910e6d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab910e6da: mov    %rdi,0x40(%rsp)
  0x00007f8ab910e6df: mov    %r8,0x38(%rsp)
  0x00007f8ab910e6e4: mov    %r9,0x30(%rsp)
  0x00007f8ab910e6e9: mov    %r10,0x28(%rsp)
  0x00007f8ab910e6ee: mov    %r11,0x20(%rsp)
  0x00007f8ab910e6f3: mov    %r12,0x18(%rsp)
  0x00007f8ab910e6f8: mov    %r13,0x10(%rsp)
  0x00007f8ab910e6fd: mov    %r14,0x8(%rsp)
  0x00007f8ab910e702: mov    %r15,(%rsp)
  0x00007f8ab910e706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910e710: movabs $0x7f8ab910e6b0,%rsi
  0x00007f8ab910e71a: mov    %rsp,%rdx
  0x00007f8ab910e71d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e721: callq  0x00007f8aceddb9fa
  0x00007f8ab910e726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910e727: mov    %rsp,%r11
  0x00007f8ab910e72a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e72e: push   %rax
  0x00007f8ab910e72f: mov    %r11,%rax
  0x00007f8ab910e732: mov    0x50(%rbx),%r11
  0x00007f8ab910e736: mov    0x8(%rax),%rsi
  0x00007f8ab910e73a: mov    %rbx,0x258(%r15)
  0x00007f8ab910e741: mov    %rbx,%rax
  0x00007f8ab910e744: jmpq   *%r11
  0x00007f8ab910e747: mov    0x8(%rsi),%ebx
  0x00007f8ab910e74a: shl    $0x3,%rbx
  0x00007f8ab910e74e: cmp    0x10(%rax),%rbx
  0x00007f8ab910e752: mov    0x8(%rax),%rbx
  0x00007f8ab910e756: je     0x00007f8ab910e761
  0x00007f8ab910e75c: jmpq   0x00007f8ab9105c40
  0x00007f8ab910e761: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910e769: je     0x00007f8ab910e864
  0x00007f8ab910e76f: jmpq   0x00007f8ab9105c40
  0x00007f8ab910e774: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910e77c: je     0x00007f8ab910e864
  0x00007f8ab910e782: mov    %rsp,%r13
  0x00007f8ab910e785: mov    (%rsp),%rax
  0x00007f8ab910e789: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e78d: pushfq 
  0x00007f8ab910e78e: sub    $0x8,%rsp
  0x00007f8ab910e792: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910e797: sub    $0x80,%rsp
  0x00007f8ab910e79e: mov    %rax,0x78(%rsp)
  0x00007f8ab910e7a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab910e7a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab910e7ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab910e7b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab910e7b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab910e7bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab910e7c1: mov    %r8,0x38(%rsp)
  0x00007f8ab910e7c6: mov    %r9,0x30(%rsp)
  0x00007f8ab910e7cb: mov    %r10,0x28(%rsp)
  0x00007f8ab910e7d0: mov    %r11,0x20(%rsp)
  0x00007f8ab910e7d5: mov    %r12,0x18(%rsp)
  0x00007f8ab910e7da: mov    %r13,0x10(%rsp)
  0x00007f8ab910e7df: mov    %r14,0x8(%rsp)
  0x00007f8ab910e7e4: mov    %r15,(%rsp)
  0x00007f8ab910e7e8: sub    $0x200,%rsp
  0x00007f8ab910e7ef: fxsave64 (%rsp)
  0x00007f8ab910e7f4: mov    %rbx,%rdi
  0x00007f8ab910e7f7: mov    %rax,%rsi
  0x00007f8ab910e7fa: callq  0x00007f8acef8bbca
  0x00007f8ab910e7ff: fxrstor64 (%rsp)
  0x00007f8ab910e804: add    $0x200,%rsp
  0x00007f8ab910e80b: mov    (%rsp),%r15
  0x00007f8ab910e80f: mov    0x8(%rsp),%r14
  0x00007f8ab910e814: mov    0x10(%rsp),%r13
  0x00007f8ab910e819: mov    0x18(%rsp),%r12
  0x00007f8ab910e81e: mov    0x20(%rsp),%r11
  0x00007f8ab910e823: mov    0x28(%rsp),%r10
  0x00007f8ab910e828: mov    0x30(%rsp),%r9
  0x00007f8ab910e82d: mov    0x38(%rsp),%r8
  0x00007f8ab910e832: mov    0x40(%rsp),%rdi
  0x00007f8ab910e837: mov    0x48(%rsp),%rsi
  0x00007f8ab910e83c: mov    0x50(%rsp),%rbp
  0x00007f8ab910e841: mov    0x60(%rsp),%rbx
  0x00007f8ab910e846: mov    0x68(%rsp),%rdx
  0x00007f8ab910e84b: mov    0x70(%rsp),%rcx
  0x00007f8ab910e850: mov    0x78(%rsp),%rax
  0x00007f8ab910e855: add    $0x80,%rsp
  0x00007f8ab910e85c: add    $0x8,%rsp
  0x00007f8ab910e860: popfq  
  0x00007f8ab910e861: mov    %r13,%rsp
  0x00007f8ab910e864: pop    %rax
  0x00007f8ab910e865: mov    %rsp,%r13
  0x00007f8ab910e868: sub    $0x10,%rsp
  0x00007f8ab910e86c: mov    %rax,(%rsp)
  0x00007f8ab910e870: mov    %rsi,0x8(%rsp)
  0x00007f8ab910e875: mov    0x40(%rbx),%rcx
  0x00007f8ab910e879: jmpq   *%rcx

AHE@0x00007f8ac80c38f0: 0xb0000000 i2c: 0x00007f8ab910e920 c2i: 0x00007f8ab910ea34 c2iUV: 0x00007f8ab910ea07
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f8ab910ea34
  0x00007f8ab910e920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910e924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910e92e: cmp    %r11,%rax
  0x00007f8ab910e931: jbe    0x00007f8ab910e94a
  0x00007f8ab910e937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910e941: cmp    %r11,%rax
  0x00007f8ab910e944: jb     0x00007f8ab910e9e7
  0x00007f8ab910e94a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910e954: cmp    %r11,%rax
  0x00007f8ab910e957: jbe    0x00007f8ab910e970
  0x00007f8ab910e95d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910e967: cmp    %r11,%rax
  0x00007f8ab910e96a: jb     0x00007f8ab910e9e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910e970: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910e975: sub    $0x80,%rsp
  0x00007f8ab910e97c: mov    %rax,0x78(%rsp)
  0x00007f8ab910e981: mov    %rcx,0x70(%rsp)
  0x00007f8ab910e986: mov    %rdx,0x68(%rsp)
  0x00007f8ab910e98b: mov    %rbx,0x60(%rsp)
  0x00007f8ab910e990: mov    %rbp,0x50(%rsp)
  0x00007f8ab910e995: mov    %rsi,0x48(%rsp)
  0x00007f8ab910e99a: mov    %rdi,0x40(%rsp)
  0x00007f8ab910e99f: mov    %r8,0x38(%rsp)
  0x00007f8ab910e9a4: mov    %r9,0x30(%rsp)
  0x00007f8ab910e9a9: mov    %r10,0x28(%rsp)
  0x00007f8ab910e9ae: mov    %r11,0x20(%rsp)
  0x00007f8ab910e9b3: mov    %r12,0x18(%rsp)
  0x00007f8ab910e9b8: mov    %r13,0x10(%rsp)
  0x00007f8ab910e9bd: mov    %r14,0x8(%rsp)
  0x00007f8ab910e9c2: mov    %r15,(%rsp)
  0x00007f8ab910e9c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910e9d0: movabs $0x7f8ab910e970,%rsi
  0x00007f8ab910e9da: mov    %rsp,%rdx
  0x00007f8ab910e9dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e9e1: callq  0x00007f8aceddb9fa
  0x00007f8ab910e9e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910e9e7: mov    %rsp,%r11
  0x00007f8ab910e9ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910e9ee: push   %rax
  0x00007f8ab910e9ef: mov    %r11,%rax
  0x00007f8ab910e9f2: mov    0x50(%rbx),%r11
  0x00007f8ab910e9f6: mov    0x8(%rax),%rsi
  0x00007f8ab910e9fa: mov    %rbx,0x258(%r15)
  0x00007f8ab910ea01: mov    %rbx,%rax
  0x00007f8ab910ea04: jmpq   *%r11
  0x00007f8ab910ea07: mov    0x8(%rsi),%ebx
  0x00007f8ab910ea0a: shl    $0x3,%rbx
  0x00007f8ab910ea0e: cmp    0x10(%rax),%rbx
  0x00007f8ab910ea12: mov    0x8(%rax),%rbx
  0x00007f8ab910ea16: je     0x00007f8ab910ea21
  0x00007f8ab910ea1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab910ea21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910ea29: je     0x00007f8ab910eb24
  0x00007f8ab910ea2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab910ea34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910ea3c: je     0x00007f8ab910eb24
  0x00007f8ab910ea42: mov    %rsp,%r13
  0x00007f8ab910ea45: mov    (%rsp),%rax
  0x00007f8ab910ea49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910ea4d: pushfq 
  0x00007f8ab910ea4e: sub    $0x8,%rsp
  0x00007f8ab910ea52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910ea57: sub    $0x80,%rsp
  0x00007f8ab910ea5e: mov    %rax,0x78(%rsp)
  0x00007f8ab910ea63: mov    %rcx,0x70(%rsp)
  0x00007f8ab910ea68: mov    %rdx,0x68(%rsp)
  0x00007f8ab910ea6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab910ea72: mov    %rbp,0x50(%rsp)
  0x00007f8ab910ea77: mov    %rsi,0x48(%rsp)
  0x00007f8ab910ea7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab910ea81: mov    %r8,0x38(%rsp)
  0x00007f8ab910ea86: mov    %r9,0x30(%rsp)
  0x00007f8ab910ea8b: mov    %r10,0x28(%rsp)
  0x00007f8ab910ea90: mov    %r11,0x20(%rsp)
  0x00007f8ab910ea95: mov    %r12,0x18(%rsp)
  0x00007f8ab910ea9a: mov    %r13,0x10(%rsp)
  0x00007f8ab910ea9f: mov    %r14,0x8(%rsp)
  0x00007f8ab910eaa4: mov    %r15,(%rsp)
  0x00007f8ab910eaa8: sub    $0x200,%rsp
  0x00007f8ab910eaaf: fxsave64 (%rsp)
  0x00007f8ab910eab4: mov    %rbx,%rdi
  0x00007f8ab910eab7: mov    %rax,%rsi
  0x00007f8ab910eaba: callq  0x00007f8acef8bbca
  0x00007f8ab910eabf: fxrstor64 (%rsp)
  0x00007f8ab910eac4: add    $0x200,%rsp
  0x00007f8ab910eacb: mov    (%rsp),%r15
  0x00007f8ab910eacf: mov    0x8(%rsp),%r14
  0x00007f8ab910ead4: mov    0x10(%rsp),%r13
  0x00007f8ab910ead9: mov    0x18(%rsp),%r12
  0x00007f8ab910eade: mov    0x20(%rsp),%r11
  0x00007f8ab910eae3: mov    0x28(%rsp),%r10
  0x00007f8ab910eae8: mov    0x30(%rsp),%r9
  0x00007f8ab910eaed: mov    0x38(%rsp),%r8
  0x00007f8ab910eaf2: mov    0x40(%rsp),%rdi
  0x00007f8ab910eaf7: mov    0x48(%rsp),%rsi
  0x00007f8ab910eafc: mov    0x50(%rsp),%rbp
  0x00007f8ab910eb01: mov    0x60(%rsp),%rbx
  0x00007f8ab910eb06: mov    0x68(%rsp),%rdx
  0x00007f8ab910eb0b: mov    0x70(%rsp),%rcx
  0x00007f8ab910eb10: mov    0x78(%rsp),%rax
  0x00007f8ab910eb15: add    $0x80,%rsp
  0x00007f8ab910eb1c: add    $0x8,%rsp
  0x00007f8ab910eb20: popfq  
  0x00007f8ab910eb21: mov    %r13,%rsp
  0x00007f8ab910eb24: pop    %rax
  0x00007f8ab910eb25: mov    %rsp,%r13
  0x00007f8ab910eb28: sub    $0x10,%rsp
  0x00007f8ab910eb2c: mov    %rax,(%rsp)
  0x00007f8ab910eb30: mov    %rsi,0x8(%rsp)
  0x00007f8ab910eb35: mov    0x40(%rbx),%rcx
  0x00007f8ab910eb39: jmpq   *%rcx

AHE@0x00007f8ac80c3938: 0xb0000000 i2c: 0x00007f8ab910ebe0 c2i: 0x00007f8ab910ecf4 c2iUV: 0x00007f8ab910ecc7
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f8ab910ecf4
  0x00007f8ab910ebe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910ebe4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910ebee: cmp    %r11,%rax
  0x00007f8ab910ebf1: jbe    0x00007f8ab910ec0a
  0x00007f8ab910ebf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910ec01: cmp    %r11,%rax
  0x00007f8ab910ec04: jb     0x00007f8ab910eca7
  0x00007f8ab910ec0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910ec14: cmp    %r11,%rax
  0x00007f8ab910ec17: jbe    0x00007f8ab910ec30
  0x00007f8ab910ec1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910ec27: cmp    %r11,%rax
  0x00007f8ab910ec2a: jb     0x00007f8ab910eca7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910ec30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910ec35: sub    $0x80,%rsp
  0x00007f8ab910ec3c: mov    %rax,0x78(%rsp)
  0x00007f8ab910ec41: mov    %rcx,0x70(%rsp)
  0x00007f8ab910ec46: mov    %rdx,0x68(%rsp)
  0x00007f8ab910ec4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab910ec50: mov    %rbp,0x50(%rsp)
  0x00007f8ab910ec55: mov    %rsi,0x48(%rsp)
  0x00007f8ab910ec5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab910ec5f: mov    %r8,0x38(%rsp)
  0x00007f8ab910ec64: mov    %r9,0x30(%rsp)
  0x00007f8ab910ec69: mov    %r10,0x28(%rsp)
  0x00007f8ab910ec6e: mov    %r11,0x20(%rsp)
  0x00007f8ab910ec73: mov    %r12,0x18(%rsp)
  0x00007f8ab910ec78: mov    %r13,0x10(%rsp)
  0x00007f8ab910ec7d: mov    %r14,0x8(%rsp)
  0x00007f8ab910ec82: mov    %r15,(%rsp)
  0x00007f8ab910ec86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910ec90: movabs $0x7f8ab910ec30,%rsi
  0x00007f8ab910ec9a: mov    %rsp,%rdx
  0x00007f8ab910ec9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910eca1: callq  0x00007f8aceddb9fa
  0x00007f8ab910eca6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910eca7: mov    %rsp,%r11
  0x00007f8ab910ecaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910ecae: push   %rax
  0x00007f8ab910ecaf: mov    %r11,%rax
  0x00007f8ab910ecb2: mov    0x50(%rbx),%r11
  0x00007f8ab910ecb6: mov    0x8(%rax),%rsi
  0x00007f8ab910ecba: mov    %rbx,0x258(%r15)
  0x00007f8ab910ecc1: mov    %rbx,%rax
  0x00007f8ab910ecc4: jmpq   *%r11
  0x00007f8ab910ecc7: mov    0x8(%rsi),%ebx
  0x00007f8ab910ecca: shl    $0x3,%rbx
  0x00007f8ab910ecce: cmp    0x10(%rax),%rbx
  0x00007f8ab910ecd2: mov    0x8(%rax),%rbx
  0x00007f8ab910ecd6: je     0x00007f8ab910ece1
  0x00007f8ab910ecdc: jmpq   0x00007f8ab9105c40
  0x00007f8ab910ece1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910ece9: je     0x00007f8ab910ede4
  0x00007f8ab910ecef: jmpq   0x00007f8ab9105c40
  0x00007f8ab910ecf4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910ecfc: je     0x00007f8ab910ede4
  0x00007f8ab910ed02: mov    %rsp,%r13
  0x00007f8ab910ed05: mov    (%rsp),%rax
  0x00007f8ab910ed09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910ed0d: pushfq 
  0x00007f8ab910ed0e: sub    $0x8,%rsp
  0x00007f8ab910ed12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910ed17: sub    $0x80,%rsp
  0x00007f8ab910ed1e: mov    %rax,0x78(%rsp)
  0x00007f8ab910ed23: mov    %rcx,0x70(%rsp)
  0x00007f8ab910ed28: mov    %rdx,0x68(%rsp)
  0x00007f8ab910ed2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab910ed32: mov    %rbp,0x50(%rsp)
  0x00007f8ab910ed37: mov    %rsi,0x48(%rsp)
  0x00007f8ab910ed3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab910ed41: mov    %r8,0x38(%rsp)
  0x00007f8ab910ed46: mov    %r9,0x30(%rsp)
  0x00007f8ab910ed4b: mov    %r10,0x28(%rsp)
  0x00007f8ab910ed50: mov    %r11,0x20(%rsp)
  0x00007f8ab910ed55: mov    %r12,0x18(%rsp)
  0x00007f8ab910ed5a: mov    %r13,0x10(%rsp)
  0x00007f8ab910ed5f: mov    %r14,0x8(%rsp)
  0x00007f8ab910ed64: mov    %r15,(%rsp)
  0x00007f8ab910ed68: sub    $0x200,%rsp
  0x00007f8ab910ed6f: fxsave64 (%rsp)
  0x00007f8ab910ed74: mov    %rbx,%rdi
  0x00007f8ab910ed77: mov    %rax,%rsi
  0x00007f8ab910ed7a: callq  0x00007f8acef8bbca
  0x00007f8ab910ed7f: fxrstor64 (%rsp)
  0x00007f8ab910ed84: add    $0x200,%rsp
  0x00007f8ab910ed8b: mov    (%rsp),%r15
  0x00007f8ab910ed8f: mov    0x8(%rsp),%r14
  0x00007f8ab910ed94: mov    0x10(%rsp),%r13
  0x00007f8ab910ed99: mov    0x18(%rsp),%r12
  0x00007f8ab910ed9e: mov    0x20(%rsp),%r11
  0x00007f8ab910eda3: mov    0x28(%rsp),%r10
  0x00007f8ab910eda8: mov    0x30(%rsp),%r9
  0x00007f8ab910edad: mov    0x38(%rsp),%r8
  0x00007f8ab910edb2: mov    0x40(%rsp),%rdi
  0x00007f8ab910edb7: mov    0x48(%rsp),%rsi
  0x00007f8ab910edbc: mov    0x50(%rsp),%rbp
  0x00007f8ab910edc1: mov    0x60(%rsp),%rbx
  0x00007f8ab910edc6: mov    0x68(%rsp),%rdx
  0x00007f8ab910edcb: mov    0x70(%rsp),%rcx
  0x00007f8ab910edd0: mov    0x78(%rsp),%rax
  0x00007f8ab910edd5: add    $0x80,%rsp
  0x00007f8ab910eddc: add    $0x8,%rsp
  0x00007f8ab910ede0: popfq  
  0x00007f8ab910ede1: mov    %r13,%rsp
  0x00007f8ab910ede4: pop    %rax
  0x00007f8ab910ede5: mov    %rsp,%r13
  0x00007f8ab910ede8: sub    $0x10,%rsp
  0x00007f8ab910edec: mov    %rax,(%rsp)
  0x00007f8ab910edf0: mov    %rsi,0x8(%rsp)
  0x00007f8ab910edf5: mov    0x40(%rbx),%rcx
  0x00007f8ab910edf9: jmpq   *%rcx

AHE@0x00007f8ac80c3980: 0xbb000000 i2c: 0x00007f8ab910eea0 c2i: 0x00007f8ab910efb8 c2iUV: 0x00007f8ab910ef8b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab910efb8
  0x00007f8ab910eea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910eea4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910eeae: cmp    %r11,%rax
  0x00007f8ab910eeb1: jbe    0x00007f8ab910eeca
  0x00007f8ab910eeb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910eec1: cmp    %r11,%rax
  0x00007f8ab910eec4: jb     0x00007f8ab910ef67
  0x00007f8ab910eeca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910eed4: cmp    %r11,%rax
  0x00007f8ab910eed7: jbe    0x00007f8ab910eef0
  0x00007f8ab910eedd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910eee7: cmp    %r11,%rax
  0x00007f8ab910eeea: jb     0x00007f8ab910ef67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910eef0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910eef5: sub    $0x80,%rsp
  0x00007f8ab910eefc: mov    %rax,0x78(%rsp)
  0x00007f8ab910ef01: mov    %rcx,0x70(%rsp)
  0x00007f8ab910ef06: mov    %rdx,0x68(%rsp)
  0x00007f8ab910ef0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab910ef10: mov    %rbp,0x50(%rsp)
  0x00007f8ab910ef15: mov    %rsi,0x48(%rsp)
  0x00007f8ab910ef1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab910ef1f: mov    %r8,0x38(%rsp)
  0x00007f8ab910ef24: mov    %r9,0x30(%rsp)
  0x00007f8ab910ef29: mov    %r10,0x28(%rsp)
  0x00007f8ab910ef2e: mov    %r11,0x20(%rsp)
  0x00007f8ab910ef33: mov    %r12,0x18(%rsp)
  0x00007f8ab910ef38: mov    %r13,0x10(%rsp)
  0x00007f8ab910ef3d: mov    %r14,0x8(%rsp)
  0x00007f8ab910ef42: mov    %r15,(%rsp)
  0x00007f8ab910ef46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910ef50: movabs $0x7f8ab910eef0,%rsi
  0x00007f8ab910ef5a: mov    %rsp,%rdx
  0x00007f8ab910ef5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910ef61: callq  0x00007f8aceddb9fa
  0x00007f8ab910ef66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910ef67: mov    %rsp,%r11
  0x00007f8ab910ef6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910ef6e: push   %rax
  0x00007f8ab910ef6f: mov    %r11,%rax
  0x00007f8ab910ef72: mov    0x50(%rbx),%r11
  0x00007f8ab910ef76: mov    0x10(%rax),%rsi
  0x00007f8ab910ef7a: mov    0x8(%rax),%rdx
  0x00007f8ab910ef7e: mov    %rbx,0x258(%r15)
  0x00007f8ab910ef85: mov    %rbx,%rax
  0x00007f8ab910ef88: jmpq   *%r11
  0x00007f8ab910ef8b: mov    0x8(%rsi),%ebx
  0x00007f8ab910ef8e: shl    $0x3,%rbx
  0x00007f8ab910ef92: cmp    0x10(%rax),%rbx
  0x00007f8ab910ef96: mov    0x8(%rax),%rbx
  0x00007f8ab910ef9a: je     0x00007f8ab910efa5
  0x00007f8ab910efa0: jmpq   0x00007f8ab9105c40
  0x00007f8ab910efa5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910efad: je     0x00007f8ab910f0a8
  0x00007f8ab910efb3: jmpq   0x00007f8ab9105c40
  0x00007f8ab910efb8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910efc0: je     0x00007f8ab910f0a8
  0x00007f8ab910efc6: mov    %rsp,%r13
  0x00007f8ab910efc9: mov    (%rsp),%rax
  0x00007f8ab910efcd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910efd1: pushfq 
  0x00007f8ab910efd2: sub    $0x8,%rsp
  0x00007f8ab910efd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910efdb: sub    $0x80,%rsp
  0x00007f8ab910efe2: mov    %rax,0x78(%rsp)
  0x00007f8ab910efe7: mov    %rcx,0x70(%rsp)
  0x00007f8ab910efec: mov    %rdx,0x68(%rsp)
  0x00007f8ab910eff1: mov    %rbx,0x60(%rsp)
  0x00007f8ab910eff6: mov    %rbp,0x50(%rsp)
  0x00007f8ab910effb: mov    %rsi,0x48(%rsp)
  0x00007f8ab910f000: mov    %rdi,0x40(%rsp)
  0x00007f8ab910f005: mov    %r8,0x38(%rsp)
  0x00007f8ab910f00a: mov    %r9,0x30(%rsp)
  0x00007f8ab910f00f: mov    %r10,0x28(%rsp)
  0x00007f8ab910f014: mov    %r11,0x20(%rsp)
  0x00007f8ab910f019: mov    %r12,0x18(%rsp)
  0x00007f8ab910f01e: mov    %r13,0x10(%rsp)
  0x00007f8ab910f023: mov    %r14,0x8(%rsp)
  0x00007f8ab910f028: mov    %r15,(%rsp)
  0x00007f8ab910f02c: sub    $0x200,%rsp
  0x00007f8ab910f033: fxsave64 (%rsp)
  0x00007f8ab910f038: mov    %rbx,%rdi
  0x00007f8ab910f03b: mov    %rax,%rsi
  0x00007f8ab910f03e: callq  0x00007f8acef8bbca
  0x00007f8ab910f043: fxrstor64 (%rsp)
  0x00007f8ab910f048: add    $0x200,%rsp
  0x00007f8ab910f04f: mov    (%rsp),%r15
  0x00007f8ab910f053: mov    0x8(%rsp),%r14
  0x00007f8ab910f058: mov    0x10(%rsp),%r13
  0x00007f8ab910f05d: mov    0x18(%rsp),%r12
  0x00007f8ab910f062: mov    0x20(%rsp),%r11
  0x00007f8ab910f067: mov    0x28(%rsp),%r10
  0x00007f8ab910f06c: mov    0x30(%rsp),%r9
  0x00007f8ab910f071: mov    0x38(%rsp),%r8
  0x00007f8ab910f076: mov    0x40(%rsp),%rdi
  0x00007f8ab910f07b: mov    0x48(%rsp),%rsi
  0x00007f8ab910f080: mov    0x50(%rsp),%rbp
  0x00007f8ab910f085: mov    0x60(%rsp),%rbx
  0x00007f8ab910f08a: mov    0x68(%rsp),%rdx
  0x00007f8ab910f08f: mov    0x70(%rsp),%rcx
  0x00007f8ab910f094: mov    0x78(%rsp),%rax
  0x00007f8ab910f099: add    $0x80,%rsp
  0x00007f8ab910f0a0: add    $0x8,%rsp
  0x00007f8ab910f0a4: popfq  
  0x00007f8ab910f0a5: mov    %r13,%rsp
  0x00007f8ab910f0a8: pop    %rax
  0x00007f8ab910f0a9: mov    %rsp,%r13
  0x00007f8ab910f0ac: sub    $0x20,%rsp
  0x00007f8ab910f0b0: mov    %rax,(%rsp)
  0x00007f8ab910f0b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab910f0b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab910f0be: mov    0x40(%rbx),%rcx
  0x00007f8ab910f0c2: jmpq   *%rcx

AHE@0x00007f8ac80c39c8: 0xb0000000 i2c: 0x00007f8ab910f1a0 c2i: 0x00007f8ab910f2b4 c2iUV: 0x00007f8ab910f287
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab910f2b4
  0x00007f8ab910f1a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910f1a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910f1ae: cmp    %r11,%rax
  0x00007f8ab910f1b1: jbe    0x00007f8ab910f1ca
  0x00007f8ab910f1b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910f1c1: cmp    %r11,%rax
  0x00007f8ab910f1c4: jb     0x00007f8ab910f267
  0x00007f8ab910f1ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910f1d4: cmp    %r11,%rax
  0x00007f8ab910f1d7: jbe    0x00007f8ab910f1f0
  0x00007f8ab910f1dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910f1e7: cmp    %r11,%rax
  0x00007f8ab910f1ea: jb     0x00007f8ab910f267
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910f1f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910f1f5: sub    $0x80,%rsp
  0x00007f8ab910f1fc: mov    %rax,0x78(%rsp)
  0x00007f8ab910f201: mov    %rcx,0x70(%rsp)
  0x00007f8ab910f206: mov    %rdx,0x68(%rsp)
  0x00007f8ab910f20b: mov    %rbx,0x60(%rsp)
  0x00007f8ab910f210: mov    %rbp,0x50(%rsp)
  0x00007f8ab910f215: mov    %rsi,0x48(%rsp)
  0x00007f8ab910f21a: mov    %rdi,0x40(%rsp)
  0x00007f8ab910f21f: mov    %r8,0x38(%rsp)
  0x00007f8ab910f224: mov    %r9,0x30(%rsp)
  0x00007f8ab910f229: mov    %r10,0x28(%rsp)
  0x00007f8ab910f22e: mov    %r11,0x20(%rsp)
  0x00007f8ab910f233: mov    %r12,0x18(%rsp)
  0x00007f8ab910f238: mov    %r13,0x10(%rsp)
  0x00007f8ab910f23d: mov    %r14,0x8(%rsp)
  0x00007f8ab910f242: mov    %r15,(%rsp)
  0x00007f8ab910f246: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910f250: movabs $0x7f8ab910f1f0,%rsi
  0x00007f8ab910f25a: mov    %rsp,%rdx
  0x00007f8ab910f25d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f261: callq  0x00007f8aceddb9fa
  0x00007f8ab910f266: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910f267: mov    %rsp,%r11
  0x00007f8ab910f26a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f26e: push   %rax
  0x00007f8ab910f26f: mov    %r11,%rax
  0x00007f8ab910f272: mov    0x50(%rbx),%r11
  0x00007f8ab910f276: mov    0x8(%rax),%rsi
  0x00007f8ab910f27a: mov    %rbx,0x258(%r15)
  0x00007f8ab910f281: mov    %rbx,%rax
  0x00007f8ab910f284: jmpq   *%r11
  0x00007f8ab910f287: mov    0x8(%rsi),%ebx
  0x00007f8ab910f28a: shl    $0x3,%rbx
  0x00007f8ab910f28e: cmp    0x10(%rax),%rbx
  0x00007f8ab910f292: mov    0x8(%rax),%rbx
  0x00007f8ab910f296: je     0x00007f8ab910f2a1
  0x00007f8ab910f29c: jmpq   0x00007f8ab9105c40
  0x00007f8ab910f2a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910f2a9: je     0x00007f8ab910f3a4
  0x00007f8ab910f2af: jmpq   0x00007f8ab9105c40
  0x00007f8ab910f2b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910f2bc: je     0x00007f8ab910f3a4
  0x00007f8ab910f2c2: mov    %rsp,%r13
  0x00007f8ab910f2c5: mov    (%rsp),%rax
  0x00007f8ab910f2c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f2cd: pushfq 
  0x00007f8ab910f2ce: sub    $0x8,%rsp
  0x00007f8ab910f2d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910f2d7: sub    $0x80,%rsp
  0x00007f8ab910f2de: mov    %rax,0x78(%rsp)
  0x00007f8ab910f2e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab910f2e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab910f2ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab910f2f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab910f2f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab910f2fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab910f301: mov    %r8,0x38(%rsp)
  0x00007f8ab910f306: mov    %r9,0x30(%rsp)
  0x00007f8ab910f30b: mov    %r10,0x28(%rsp)
  0x00007f8ab910f310: mov    %r11,0x20(%rsp)
  0x00007f8ab910f315: mov    %r12,0x18(%rsp)
  0x00007f8ab910f31a: mov    %r13,0x10(%rsp)
  0x00007f8ab910f31f: mov    %r14,0x8(%rsp)
  0x00007f8ab910f324: mov    %r15,(%rsp)
  0x00007f8ab910f328: sub    $0x200,%rsp
  0x00007f8ab910f32f: fxsave64 (%rsp)
  0x00007f8ab910f334: mov    %rbx,%rdi
  0x00007f8ab910f337: mov    %rax,%rsi
  0x00007f8ab910f33a: callq  0x00007f8acef8bbca
  0x00007f8ab910f33f: fxrstor64 (%rsp)
  0x00007f8ab910f344: add    $0x200,%rsp
  0x00007f8ab910f34b: mov    (%rsp),%r15
  0x00007f8ab910f34f: mov    0x8(%rsp),%r14
  0x00007f8ab910f354: mov    0x10(%rsp),%r13
  0x00007f8ab910f359: mov    0x18(%rsp),%r12
  0x00007f8ab910f35e: mov    0x20(%rsp),%r11
  0x00007f8ab910f363: mov    0x28(%rsp),%r10
  0x00007f8ab910f368: mov    0x30(%rsp),%r9
  0x00007f8ab910f36d: mov    0x38(%rsp),%r8
  0x00007f8ab910f372: mov    0x40(%rsp),%rdi
  0x00007f8ab910f377: mov    0x48(%rsp),%rsi
  0x00007f8ab910f37c: mov    0x50(%rsp),%rbp
  0x00007f8ab910f381: mov    0x60(%rsp),%rbx
  0x00007f8ab910f386: mov    0x68(%rsp),%rdx
  0x00007f8ab910f38b: mov    0x70(%rsp),%rcx
  0x00007f8ab910f390: mov    0x78(%rsp),%rax
  0x00007f8ab910f395: add    $0x80,%rsp
  0x00007f8ab910f39c: add    $0x8,%rsp
  0x00007f8ab910f3a0: popfq  
  0x00007f8ab910f3a1: mov    %r13,%rsp
  0x00007f8ab910f3a4: pop    %rax
  0x00007f8ab910f3a5: mov    %rsp,%r13
  0x00007f8ab910f3a8: sub    $0x10,%rsp
  0x00007f8ab910f3ac: mov    %rax,(%rsp)
  0x00007f8ab910f3b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab910f3b5: mov    0x40(%rbx),%rcx
  0x00007f8ab910f3b9: jmpq   *%rcx

AHE@0x00007f8ac80c3a10: 0xbbe00000 i2c: 0x00007f8ab910f460 c2i: 0x00007f8ab910f578 c2iUV: 0x00007f8ab910f54b
i2c argument handler #0 for: receiver (J)V (563 bytes generated)
c2i argument handler starts at 0x7f8ab910f578
  0x00007f8ab910f460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910f464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910f46e: cmp    %r11,%rax
  0x00007f8ab910f471: jbe    0x00007f8ab910f48a
  0x00007f8ab910f477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910f481: cmp    %r11,%rax
  0x00007f8ab910f484: jb     0x00007f8ab910f527
  0x00007f8ab910f48a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910f494: cmp    %r11,%rax
  0x00007f8ab910f497: jbe    0x00007f8ab910f4b0
  0x00007f8ab910f49d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910f4a7: cmp    %r11,%rax
  0x00007f8ab910f4aa: jb     0x00007f8ab910f527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910f4b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910f4b5: sub    $0x80,%rsp
  0x00007f8ab910f4bc: mov    %rax,0x78(%rsp)
  0x00007f8ab910f4c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab910f4c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab910f4cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab910f4d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab910f4d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab910f4da: mov    %rdi,0x40(%rsp)
  0x00007f8ab910f4df: mov    %r8,0x38(%rsp)
  0x00007f8ab910f4e4: mov    %r9,0x30(%rsp)
  0x00007f8ab910f4e9: mov    %r10,0x28(%rsp)
  0x00007f8ab910f4ee: mov    %r11,0x20(%rsp)
  0x00007f8ab910f4f3: mov    %r12,0x18(%rsp)
  0x00007f8ab910f4f8: mov    %r13,0x10(%rsp)
  0x00007f8ab910f4fd: mov    %r14,0x8(%rsp)
  0x00007f8ab910f502: mov    %r15,(%rsp)
  0x00007f8ab910f506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910f510: movabs $0x7f8ab910f4b0,%rsi
  0x00007f8ab910f51a: mov    %rsp,%rdx
  0x00007f8ab910f51d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f521: callq  0x00007f8aceddb9fa
  0x00007f8ab910f526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910f527: mov    %rsp,%r11
  0x00007f8ab910f52a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f52e: push   %rax
  0x00007f8ab910f52f: mov    %r11,%rax
  0x00007f8ab910f532: mov    0x50(%rbx),%r11
  0x00007f8ab910f536: mov    0x18(%rax),%rsi
  0x00007f8ab910f53a: mov    0x8(%rax),%rdx
  0x00007f8ab910f53e: mov    %rbx,0x258(%r15)
  0x00007f8ab910f545: mov    %rbx,%rax
  0x00007f8ab910f548: jmpq   *%r11
  0x00007f8ab910f54b: mov    0x8(%rsi),%ebx
  0x00007f8ab910f54e: shl    $0x3,%rbx
  0x00007f8ab910f552: cmp    0x10(%rax),%rbx
  0x00007f8ab910f556: mov    0x8(%rax),%rbx
  0x00007f8ab910f55a: je     0x00007f8ab910f565
  0x00007f8ab910f560: jmpq   0x00007f8ab9105c40
  0x00007f8ab910f565: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910f56d: je     0x00007f8ab910f668
  0x00007f8ab910f573: jmpq   0x00007f8ab9105c40
  0x00007f8ab910f578: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910f580: je     0x00007f8ab910f668
  0x00007f8ab910f586: mov    %rsp,%r13
  0x00007f8ab910f589: mov    (%rsp),%rax
  0x00007f8ab910f58d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f591: pushfq 
  0x00007f8ab910f592: sub    $0x8,%rsp
  0x00007f8ab910f596: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910f59b: sub    $0x80,%rsp
  0x00007f8ab910f5a2: mov    %rax,0x78(%rsp)
  0x00007f8ab910f5a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab910f5ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab910f5b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab910f5b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab910f5bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab910f5c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab910f5c5: mov    %r8,0x38(%rsp)
  0x00007f8ab910f5ca: mov    %r9,0x30(%rsp)
  0x00007f8ab910f5cf: mov    %r10,0x28(%rsp)
  0x00007f8ab910f5d4: mov    %r11,0x20(%rsp)
  0x00007f8ab910f5d9: mov    %r12,0x18(%rsp)
  0x00007f8ab910f5de: mov    %r13,0x10(%rsp)
  0x00007f8ab910f5e3: mov    %r14,0x8(%rsp)
  0x00007f8ab910f5e8: mov    %r15,(%rsp)
  0x00007f8ab910f5ec: sub    $0x200,%rsp
  0x00007f8ab910f5f3: fxsave64 (%rsp)
  0x00007f8ab910f5f8: mov    %rbx,%rdi
  0x00007f8ab910f5fb: mov    %rax,%rsi
  0x00007f8ab910f5fe: callq  0x00007f8acef8bbca
  0x00007f8ab910f603: fxrstor64 (%rsp)
  0x00007f8ab910f608: add    $0x200,%rsp
  0x00007f8ab910f60f: mov    (%rsp),%r15
  0x00007f8ab910f613: mov    0x8(%rsp),%r14
  0x00007f8ab910f618: mov    0x10(%rsp),%r13
  0x00007f8ab910f61d: mov    0x18(%rsp),%r12
  0x00007f8ab910f622: mov    0x20(%rsp),%r11
  0x00007f8ab910f627: mov    0x28(%rsp),%r10
  0x00007f8ab910f62c: mov    0x30(%rsp),%r9
  0x00007f8ab910f631: mov    0x38(%rsp),%r8
  0x00007f8ab910f636: mov    0x40(%rsp),%rdi
  0x00007f8ab910f63b: mov    0x48(%rsp),%rsi
  0x00007f8ab910f640: mov    0x50(%rsp),%rbp
  0x00007f8ab910f645: mov    0x60(%rsp),%rbx
  0x00007f8ab910f64a: mov    0x68(%rsp),%rdx
  0x00007f8ab910f64f: mov    0x70(%rsp),%rcx
  0x00007f8ab910f654: mov    0x78(%rsp),%rax
  0x00007f8ab910f659: add    $0x80,%rsp
  0x00007f8ab910f660: add    $0x8,%rsp
  0x00007f8ab910f664: popfq  
  0x00007f8ab910f665: mov    %r13,%rsp
  0x00007f8ab910f668: pop    %rax
  0x00007f8ab910f669: mov    %rsp,%r13
  0x00007f8ab910f66c: sub    $0x20,%rsp
  0x00007f8ab910f670: mov    %rax,(%rsp)
  0x00007f8ab910f674: mov    %rsi,0x18(%rsp)
  0x00007f8ab910f679: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab910f683: mov    %rax,0x10(%rsp)
  0x00007f8ab910f688: mov    %rdx,0x8(%rsp)
  0x00007f8ab910f68d: mov    0x40(%rbx),%rcx
  0x00007f8ab910f691: jmpq   *%rcx

AHE@0x00007f8ac80c3a58: 0xbbea0000 i2c: 0x00007f8ab910f760 c2i: 0x00007f8ab910f87b c2iUV: 0x00007f8ab910f84e
i2c argument handler #0 for: receiver (JI)V (570 bytes generated)
c2i argument handler starts at 0x7f8ab910f87b
  0x00007f8ab910f760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910f764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910f76e: cmp    %r11,%rax
  0x00007f8ab910f771: jbe    0x00007f8ab910f78a
  0x00007f8ab910f777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910f781: cmp    %r11,%rax
  0x00007f8ab910f784: jb     0x00007f8ab910f827
  0x00007f8ab910f78a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910f794: cmp    %r11,%rax
  0x00007f8ab910f797: jbe    0x00007f8ab910f7b0
  0x00007f8ab910f79d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910f7a7: cmp    %r11,%rax
  0x00007f8ab910f7aa: jb     0x00007f8ab910f827
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910f7b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910f7b5: sub    $0x80,%rsp
  0x00007f8ab910f7bc: mov    %rax,0x78(%rsp)
  0x00007f8ab910f7c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab910f7c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab910f7cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab910f7d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab910f7d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab910f7da: mov    %rdi,0x40(%rsp)
  0x00007f8ab910f7df: mov    %r8,0x38(%rsp)
  0x00007f8ab910f7e4: mov    %r9,0x30(%rsp)
  0x00007f8ab910f7e9: mov    %r10,0x28(%rsp)
  0x00007f8ab910f7ee: mov    %r11,0x20(%rsp)
  0x00007f8ab910f7f3: mov    %r12,0x18(%rsp)
  0x00007f8ab910f7f8: mov    %r13,0x10(%rsp)
  0x00007f8ab910f7fd: mov    %r14,0x8(%rsp)
  0x00007f8ab910f802: mov    %r15,(%rsp)
  0x00007f8ab910f806: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910f810: movabs $0x7f8ab910f7b0,%rsi
  0x00007f8ab910f81a: mov    %rsp,%rdx
  0x00007f8ab910f81d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f821: callq  0x00007f8aceddb9fa
  0x00007f8ab910f826: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910f827: mov    %rsp,%r11
  0x00007f8ab910f82a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f82e: push   %rax
  0x00007f8ab910f82f: mov    %r11,%rax
  0x00007f8ab910f832: mov    0x50(%rbx),%r11
  0x00007f8ab910f836: mov    0x20(%rax),%rsi
  0x00007f8ab910f83a: mov    0x10(%rax),%rdx
  0x00007f8ab910f83e: mov    0x8(%rax),%ecx
  0x00007f8ab910f841: mov    %rbx,0x258(%r15)
  0x00007f8ab910f848: mov    %rbx,%rax
  0x00007f8ab910f84b: jmpq   *%r11
  0x00007f8ab910f84e: mov    0x8(%rsi),%ebx
  0x00007f8ab910f851: shl    $0x3,%rbx
  0x00007f8ab910f855: cmp    0x10(%rax),%rbx
  0x00007f8ab910f859: mov    0x8(%rax),%rbx
  0x00007f8ab910f85d: je     0x00007f8ab910f868
  0x00007f8ab910f863: jmpq   0x00007f8ab9105c40
  0x00007f8ab910f868: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910f870: je     0x00007f8ab910f96b
  0x00007f8ab910f876: jmpq   0x00007f8ab9105c40
  0x00007f8ab910f87b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910f883: je     0x00007f8ab910f96b
  0x00007f8ab910f889: mov    %rsp,%r13
  0x00007f8ab910f88c: mov    (%rsp),%rax
  0x00007f8ab910f890: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910f894: pushfq 
  0x00007f8ab910f895: sub    $0x8,%rsp
  0x00007f8ab910f899: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910f89e: sub    $0x80,%rsp
  0x00007f8ab910f8a5: mov    %rax,0x78(%rsp)
  0x00007f8ab910f8aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab910f8af: mov    %rdx,0x68(%rsp)
  0x00007f8ab910f8b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab910f8b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab910f8be: mov    %rsi,0x48(%rsp)
  0x00007f8ab910f8c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab910f8c8: mov    %r8,0x38(%rsp)
  0x00007f8ab910f8cd: mov    %r9,0x30(%rsp)
  0x00007f8ab910f8d2: mov    %r10,0x28(%rsp)
  0x00007f8ab910f8d7: mov    %r11,0x20(%rsp)
  0x00007f8ab910f8dc: mov    %r12,0x18(%rsp)
  0x00007f8ab910f8e1: mov    %r13,0x10(%rsp)
  0x00007f8ab910f8e6: mov    %r14,0x8(%rsp)
  0x00007f8ab910f8eb: mov    %r15,(%rsp)
  0x00007f8ab910f8ef: sub    $0x200,%rsp
  0x00007f8ab910f8f6: fxsave64 (%rsp)
  0x00007f8ab910f8fb: mov    %rbx,%rdi
  0x00007f8ab910f8fe: mov    %rax,%rsi
  0x00007f8ab910f901: callq  0x00007f8acef8bbca
  0x00007f8ab910f906: fxrstor64 (%rsp)
  0x00007f8ab910f90b: add    $0x200,%rsp
  0x00007f8ab910f912: mov    (%rsp),%r15
  0x00007f8ab910f916: mov    0x8(%rsp),%r14
  0x00007f8ab910f91b: mov    0x10(%rsp),%r13
  0x00007f8ab910f920: mov    0x18(%rsp),%r12
  0x00007f8ab910f925: mov    0x20(%rsp),%r11
  0x00007f8ab910f92a: mov    0x28(%rsp),%r10
  0x00007f8ab910f92f: mov    0x30(%rsp),%r9
  0x00007f8ab910f934: mov    0x38(%rsp),%r8
  0x00007f8ab910f939: mov    0x40(%rsp),%rdi
  0x00007f8ab910f93e: mov    0x48(%rsp),%rsi
  0x00007f8ab910f943: mov    0x50(%rsp),%rbp
  0x00007f8ab910f948: mov    0x60(%rsp),%rbx
  0x00007f8ab910f94d: mov    0x68(%rsp),%rdx
  0x00007f8ab910f952: mov    0x70(%rsp),%rcx
  0x00007f8ab910f957: mov    0x78(%rsp),%rax
  0x00007f8ab910f95c: add    $0x80,%rsp
  0x00007f8ab910f963: add    $0x8,%rsp
  0x00007f8ab910f967: popfq  
  0x00007f8ab910f968: mov    %r13,%rsp
  0x00007f8ab910f96b: pop    %rax
  0x00007f8ab910f96c: mov    %rsp,%r13
  0x00007f8ab910f96f: sub    $0x30,%rsp
  0x00007f8ab910f973: mov    %rax,(%rsp)
  0x00007f8ab910f977: mov    %rsi,0x20(%rsp)
  0x00007f8ab910f97c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab910f986: mov    %rax,0x18(%rsp)
  0x00007f8ab910f98b: mov    %rdx,0x10(%rsp)
  0x00007f8ab910f990: mov    %ecx,0x8(%rsp)
  0x00007f8ab910f994: mov    0x40(%rbx),%rcx
  0x00007f8ab910f998: jmpq   *%rcx

AHE@0x00007f8ac80c3aa0: 0xb0000000 i2c: 0x00007f8ab910fa60 c2i: 0x00007f8ab910fb74 c2iUV: 0x00007f8ab910fb47
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab910fb74
  0x00007f8ab910fa60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910fa64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910fa6e: cmp    %r11,%rax
  0x00007f8ab910fa71: jbe    0x00007f8ab910fa8a
  0x00007f8ab910fa77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910fa81: cmp    %r11,%rax
  0x00007f8ab910fa84: jb     0x00007f8ab910fb27
  0x00007f8ab910fa8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910fa94: cmp    %r11,%rax
  0x00007f8ab910fa97: jbe    0x00007f8ab910fab0
  0x00007f8ab910fa9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910faa7: cmp    %r11,%rax
  0x00007f8ab910faaa: jb     0x00007f8ab910fb27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910fab0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910fab5: sub    $0x80,%rsp
  0x00007f8ab910fabc: mov    %rax,0x78(%rsp)
  0x00007f8ab910fac1: mov    %rcx,0x70(%rsp)
  0x00007f8ab910fac6: mov    %rdx,0x68(%rsp)
  0x00007f8ab910facb: mov    %rbx,0x60(%rsp)
  0x00007f8ab910fad0: mov    %rbp,0x50(%rsp)
  0x00007f8ab910fad5: mov    %rsi,0x48(%rsp)
  0x00007f8ab910fada: mov    %rdi,0x40(%rsp)
  0x00007f8ab910fadf: mov    %r8,0x38(%rsp)
  0x00007f8ab910fae4: mov    %r9,0x30(%rsp)
  0x00007f8ab910fae9: mov    %r10,0x28(%rsp)
  0x00007f8ab910faee: mov    %r11,0x20(%rsp)
  0x00007f8ab910faf3: mov    %r12,0x18(%rsp)
  0x00007f8ab910faf8: mov    %r13,0x10(%rsp)
  0x00007f8ab910fafd: mov    %r14,0x8(%rsp)
  0x00007f8ab910fb02: mov    %r15,(%rsp)
  0x00007f8ab910fb06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910fb10: movabs $0x7f8ab910fab0,%rsi
  0x00007f8ab910fb1a: mov    %rsp,%rdx
  0x00007f8ab910fb1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910fb21: callq  0x00007f8aceddb9fa
  0x00007f8ab910fb26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910fb27: mov    %rsp,%r11
  0x00007f8ab910fb2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910fb2e: push   %rax
  0x00007f8ab910fb2f: mov    %r11,%rax
  0x00007f8ab910fb32: mov    0x50(%rbx),%r11
  0x00007f8ab910fb36: mov    0x8(%rax),%rsi
  0x00007f8ab910fb3a: mov    %rbx,0x258(%r15)
  0x00007f8ab910fb41: mov    %rbx,%rax
  0x00007f8ab910fb44: jmpq   *%r11
  0x00007f8ab910fb47: mov    0x8(%rsi),%ebx
  0x00007f8ab910fb4a: shl    $0x3,%rbx
  0x00007f8ab910fb4e: cmp    0x10(%rax),%rbx
  0x00007f8ab910fb52: mov    0x8(%rax),%rbx
  0x00007f8ab910fb56: je     0x00007f8ab910fb61
  0x00007f8ab910fb5c: jmpq   0x00007f8ab9105c40
  0x00007f8ab910fb61: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910fb69: je     0x00007f8ab910fc64
  0x00007f8ab910fb6f: jmpq   0x00007f8ab9105c40
  0x00007f8ab910fb74: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910fb7c: je     0x00007f8ab910fc64
  0x00007f8ab910fb82: mov    %rsp,%r13
  0x00007f8ab910fb85: mov    (%rsp),%rax
  0x00007f8ab910fb89: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910fb8d: pushfq 
  0x00007f8ab910fb8e: sub    $0x8,%rsp
  0x00007f8ab910fb92: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910fb97: sub    $0x80,%rsp
  0x00007f8ab910fb9e: mov    %rax,0x78(%rsp)
  0x00007f8ab910fba3: mov    %rcx,0x70(%rsp)
  0x00007f8ab910fba8: mov    %rdx,0x68(%rsp)
  0x00007f8ab910fbad: mov    %rbx,0x60(%rsp)
  0x00007f8ab910fbb2: mov    %rbp,0x50(%rsp)
  0x00007f8ab910fbb7: mov    %rsi,0x48(%rsp)
  0x00007f8ab910fbbc: mov    %rdi,0x40(%rsp)
  0x00007f8ab910fbc1: mov    %r8,0x38(%rsp)
  0x00007f8ab910fbc6: mov    %r9,0x30(%rsp)
  0x00007f8ab910fbcb: mov    %r10,0x28(%rsp)
  0x00007f8ab910fbd0: mov    %r11,0x20(%rsp)
  0x00007f8ab910fbd5: mov    %r12,0x18(%rsp)
  0x00007f8ab910fbda: mov    %r13,0x10(%rsp)
  0x00007f8ab910fbdf: mov    %r14,0x8(%rsp)
  0x00007f8ab910fbe4: mov    %r15,(%rsp)
  0x00007f8ab910fbe8: sub    $0x200,%rsp
  0x00007f8ab910fbef: fxsave64 (%rsp)
  0x00007f8ab910fbf4: mov    %rbx,%rdi
  0x00007f8ab910fbf7: mov    %rax,%rsi
  0x00007f8ab910fbfa: callq  0x00007f8acef8bbca
  0x00007f8ab910fbff: fxrstor64 (%rsp)
  0x00007f8ab910fc04: add    $0x200,%rsp
  0x00007f8ab910fc0b: mov    (%rsp),%r15
  0x00007f8ab910fc0f: mov    0x8(%rsp),%r14
  0x00007f8ab910fc14: mov    0x10(%rsp),%r13
  0x00007f8ab910fc19: mov    0x18(%rsp),%r12
  0x00007f8ab910fc1e: mov    0x20(%rsp),%r11
  0x00007f8ab910fc23: mov    0x28(%rsp),%r10
  0x00007f8ab910fc28: mov    0x30(%rsp),%r9
  0x00007f8ab910fc2d: mov    0x38(%rsp),%r8
  0x00007f8ab910fc32: mov    0x40(%rsp),%rdi
  0x00007f8ab910fc37: mov    0x48(%rsp),%rsi
  0x00007f8ab910fc3c: mov    0x50(%rsp),%rbp
  0x00007f8ab910fc41: mov    0x60(%rsp),%rbx
  0x00007f8ab910fc46: mov    0x68(%rsp),%rdx
  0x00007f8ab910fc4b: mov    0x70(%rsp),%rcx
  0x00007f8ab910fc50: mov    0x78(%rsp),%rax
  0x00007f8ab910fc55: add    $0x80,%rsp
  0x00007f8ab910fc5c: add    $0x8,%rsp
  0x00007f8ab910fc60: popfq  
  0x00007f8ab910fc61: mov    %r13,%rsp
  0x00007f8ab910fc64: pop    %rax
  0x00007f8ab910fc65: mov    %rsp,%r13
  0x00007f8ab910fc68: sub    $0x10,%rsp
  0x00007f8ab910fc6c: mov    %rax,(%rsp)
  0x00007f8ab910fc70: mov    %rsi,0x8(%rsp)
  0x00007f8ab910fc75: mov    0x40(%rbx),%rcx
  0x00007f8ab910fc79: jmpq   *%rcx

AHE@0x00007f8ac80c3ae8: 0x i2c: 0x00007f8ab910fd20 c2i: 0x00007f8ab910fe30 c2iUV: 0x00007f8ab910fe03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab910fe30
  0x00007f8ab910fd20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910fd24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910fd2e: cmp    %r11,%rax
  0x00007f8ab910fd31: jbe    0x00007f8ab910fd4a
  0x00007f8ab910fd37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab910fd41: cmp    %r11,%rax
  0x00007f8ab910fd44: jb     0x00007f8ab910fde7
  0x00007f8ab910fd4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab910fd54: cmp    %r11,%rax
  0x00007f8ab910fd57: jbe    0x00007f8ab910fd70
  0x00007f8ab910fd5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab910fd67: cmp    %r11,%rax
  0x00007f8ab910fd6a: jb     0x00007f8ab910fde7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab910fd70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910fd75: sub    $0x80,%rsp
  0x00007f8ab910fd7c: mov    %rax,0x78(%rsp)
  0x00007f8ab910fd81: mov    %rcx,0x70(%rsp)
  0x00007f8ab910fd86: mov    %rdx,0x68(%rsp)
  0x00007f8ab910fd8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab910fd90: mov    %rbp,0x50(%rsp)
  0x00007f8ab910fd95: mov    %rsi,0x48(%rsp)
  0x00007f8ab910fd9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab910fd9f: mov    %r8,0x38(%rsp)
  0x00007f8ab910fda4: mov    %r9,0x30(%rsp)
  0x00007f8ab910fda9: mov    %r10,0x28(%rsp)
  0x00007f8ab910fdae: mov    %r11,0x20(%rsp)
  0x00007f8ab910fdb3: mov    %r12,0x18(%rsp)
  0x00007f8ab910fdb8: mov    %r13,0x10(%rsp)
  0x00007f8ab910fdbd: mov    %r14,0x8(%rsp)
  0x00007f8ab910fdc2: mov    %r15,(%rsp)
  0x00007f8ab910fdc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab910fdd0: movabs $0x7f8ab910fd70,%rsi
  0x00007f8ab910fdda: mov    %rsp,%rdx
  0x00007f8ab910fddd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910fde1: callq  0x00007f8aceddb9fa
  0x00007f8ab910fde6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab910fde7: mov    %rsp,%r11
  0x00007f8ab910fdea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910fdee: push   %rax
  0x00007f8ab910fdef: mov    %r11,%rax
  0x00007f8ab910fdf2: mov    0x50(%rbx),%r11
  0x00007f8ab910fdf6: mov    %rbx,0x258(%r15)
  0x00007f8ab910fdfd: mov    %rbx,%rax
  0x00007f8ab910fe00: jmpq   *%r11
  0x00007f8ab910fe03: mov    0x8(%rsi),%ebx
  0x00007f8ab910fe06: shl    $0x3,%rbx
  0x00007f8ab910fe0a: cmp    0x10(%rax),%rbx
  0x00007f8ab910fe0e: mov    0x8(%rax),%rbx
  0x00007f8ab910fe12: je     0x00007f8ab910fe1d
  0x00007f8ab910fe18: jmpq   0x00007f8ab9105c40
  0x00007f8ab910fe1d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910fe25: je     0x00007f8ab910ff20
  0x00007f8ab910fe2b: jmpq   0x00007f8ab9105c40
  0x00007f8ab910fe30: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab910fe38: je     0x00007f8ab910ff20
  0x00007f8ab910fe3e: mov    %rsp,%r13
  0x00007f8ab910fe41: mov    (%rsp),%rax
  0x00007f8ab910fe45: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab910fe49: pushfq 
  0x00007f8ab910fe4a: sub    $0x8,%rsp
  0x00007f8ab910fe4e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab910fe53: sub    $0x80,%rsp
  0x00007f8ab910fe5a: mov    %rax,0x78(%rsp)
  0x00007f8ab910fe5f: mov    %rcx,0x70(%rsp)
  0x00007f8ab910fe64: mov    %rdx,0x68(%rsp)
  0x00007f8ab910fe69: mov    %rbx,0x60(%rsp)
  0x00007f8ab910fe6e: mov    %rbp,0x50(%rsp)
  0x00007f8ab910fe73: mov    %rsi,0x48(%rsp)
  0x00007f8ab910fe78: mov    %rdi,0x40(%rsp)
  0x00007f8ab910fe7d: mov    %r8,0x38(%rsp)
  0x00007f8ab910fe82: mov    %r9,0x30(%rsp)
  0x00007f8ab910fe87: mov    %r10,0x28(%rsp)
  0x00007f8ab910fe8c: mov    %r11,0x20(%rsp)
  0x00007f8ab910fe91: mov    %r12,0x18(%rsp)
  0x00007f8ab910fe96: mov    %r13,0x10(%rsp)
  0x00007f8ab910fe9b: mov    %r14,0x8(%rsp)
  0x00007f8ab910fea0: mov    %r15,(%rsp)
  0x00007f8ab910fea4: sub    $0x200,%rsp
  0x00007f8ab910feab: fxsave64 (%rsp)
  0x00007f8ab910feb0: mov    %rbx,%rdi
  0x00007f8ab910feb3: mov    %rax,%rsi
  0x00007f8ab910feb6: callq  0x00007f8acef8bbca
  0x00007f8ab910febb: fxrstor64 (%rsp)
  0x00007f8ab910fec0: add    $0x200,%rsp
  0x00007f8ab910fec7: mov    (%rsp),%r15
  0x00007f8ab910fecb: mov    0x8(%rsp),%r14
  0x00007f8ab910fed0: mov    0x10(%rsp),%r13
  0x00007f8ab910fed5: mov    0x18(%rsp),%r12
  0x00007f8ab910feda: mov    0x20(%rsp),%r11
  0x00007f8ab910fedf: mov    0x28(%rsp),%r10
  0x00007f8ab910fee4: mov    0x30(%rsp),%r9
  0x00007f8ab910fee9: mov    0x38(%rsp),%r8
  0x00007f8ab910feee: mov    0x40(%rsp),%rdi
  0x00007f8ab910fef3: mov    0x48(%rsp),%rsi
  0x00007f8ab910fef8: mov    0x50(%rsp),%rbp
  0x00007f8ab910fefd: mov    0x60(%rsp),%rbx
  0x00007f8ab910ff02: mov    0x68(%rsp),%rdx
  0x00007f8ab910ff07: mov    0x70(%rsp),%rcx
  0x00007f8ab910ff0c: mov    0x78(%rsp),%rax
  0x00007f8ab910ff11: add    $0x80,%rsp
  0x00007f8ab910ff18: add    $0x8,%rsp
  0x00007f8ab910ff1c: popfq  
  0x00007f8ab910ff1d: mov    %r13,%rsp
  0x00007f8ab910ff20: pop    %rax
  0x00007f8ab910ff21: mov    %rsp,%r13
  0x00007f8ab910ff24: sub    $0x10,%rsp
  0x00007f8ab910ff28: mov    %rax,(%rsp)
  0x00007f8ab910ff2c: mov    0x40(%rbx),%rcx
  0x00007f8ab910ff30: jmpq   *%rcx

AHE@0x00007f8ac80c3b30: 0xb0000000 i2c: 0x00007f8ab910ffe0 c2i: 0x00007f8ab91100f4 c2iUV: 0x00007f8ab91100c7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab91100f4
  0x00007f8ab910ffe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab910ffe4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab910ffee: cmp    %r11,%rax
  0x00007f8ab910fff1: jbe    0x00007f8ab911000a
  0x00007f8ab910fff7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9110001: cmp    %r11,%rax
  0x00007f8ab9110004: jb     0x00007f8ab91100a7
  0x00007f8ab911000a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9110014: cmp    %r11,%rax
  0x00007f8ab9110017: jbe    0x00007f8ab9110030
  0x00007f8ab911001d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9110027: cmp    %r11,%rax
  0x00007f8ab911002a: jb     0x00007f8ab91100a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9110030: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9110035: sub    $0x80,%rsp
  0x00007f8ab911003c: mov    %rax,0x78(%rsp)
  0x00007f8ab9110041: mov    %rcx,0x70(%rsp)
  0x00007f8ab9110046: mov    %rdx,0x68(%rsp)
  0x00007f8ab911004b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9110050: mov    %rbp,0x50(%rsp)
  0x00007f8ab9110055: mov    %rsi,0x48(%rsp)
  0x00007f8ab911005a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911005f: mov    %r8,0x38(%rsp)
  0x00007f8ab9110064: mov    %r9,0x30(%rsp)
  0x00007f8ab9110069: mov    %r10,0x28(%rsp)
  0x00007f8ab911006e: mov    %r11,0x20(%rsp)
  0x00007f8ab9110073: mov    %r12,0x18(%rsp)
  0x00007f8ab9110078: mov    %r13,0x10(%rsp)
  0x00007f8ab911007d: mov    %r14,0x8(%rsp)
  0x00007f8ab9110082: mov    %r15,(%rsp)
  0x00007f8ab9110086: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9110090: movabs $0x7f8ab9110030,%rsi
  0x00007f8ab911009a: mov    %rsp,%rdx
  0x00007f8ab911009d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91100a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91100a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91100a7: mov    %rsp,%r11
  0x00007f8ab91100aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91100ae: push   %rax
  0x00007f8ab91100af: mov    %r11,%rax
  0x00007f8ab91100b2: mov    0x50(%rbx),%r11
  0x00007f8ab91100b6: mov    0x8(%rax),%rsi
  0x00007f8ab91100ba: mov    %rbx,0x258(%r15)
  0x00007f8ab91100c1: mov    %rbx,%rax
  0x00007f8ab91100c4: jmpq   *%r11
  0x00007f8ab91100c7: mov    0x8(%rsi),%ebx
  0x00007f8ab91100ca: shl    $0x3,%rbx
  0x00007f8ab91100ce: cmp    0x10(%rax),%rbx
  0x00007f8ab91100d2: mov    0x8(%rax),%rbx
  0x00007f8ab91100d6: je     0x00007f8ab91100e1
  0x00007f8ab91100dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab91100e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91100e9: je     0x00007f8ab91101e4
  0x00007f8ab91100ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab91100f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91100fc: je     0x00007f8ab91101e4
  0x00007f8ab9110102: mov    %rsp,%r13
  0x00007f8ab9110105: mov    (%rsp),%rax
  0x00007f8ab9110109: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911010d: pushfq 
  0x00007f8ab911010e: sub    $0x8,%rsp
  0x00007f8ab9110112: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9110117: sub    $0x80,%rsp
  0x00007f8ab911011e: mov    %rax,0x78(%rsp)
  0x00007f8ab9110123: mov    %rcx,0x70(%rsp)
  0x00007f8ab9110128: mov    %rdx,0x68(%rsp)
  0x00007f8ab911012d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9110132: mov    %rbp,0x50(%rsp)
  0x00007f8ab9110137: mov    %rsi,0x48(%rsp)
  0x00007f8ab911013c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9110141: mov    %r8,0x38(%rsp)
  0x00007f8ab9110146: mov    %r9,0x30(%rsp)
  0x00007f8ab911014b: mov    %r10,0x28(%rsp)
  0x00007f8ab9110150: mov    %r11,0x20(%rsp)
  0x00007f8ab9110155: mov    %r12,0x18(%rsp)
  0x00007f8ab911015a: mov    %r13,0x10(%rsp)
  0x00007f8ab911015f: mov    %r14,0x8(%rsp)
  0x00007f8ab9110164: mov    %r15,(%rsp)
  0x00007f8ab9110168: sub    $0x200,%rsp
  0x00007f8ab911016f: fxsave64 (%rsp)
  0x00007f8ab9110174: mov    %rbx,%rdi
  0x00007f8ab9110177: mov    %rax,%rsi
  0x00007f8ab911017a: callq  0x00007f8acef8bbca
  0x00007f8ab911017f: fxrstor64 (%rsp)
  0x00007f8ab9110184: add    $0x200,%rsp
  0x00007f8ab911018b: mov    (%rsp),%r15
  0x00007f8ab911018f: mov    0x8(%rsp),%r14
  0x00007f8ab9110194: mov    0x10(%rsp),%r13
  0x00007f8ab9110199: mov    0x18(%rsp),%r12
  0x00007f8ab911019e: mov    0x20(%rsp),%r11
  0x00007f8ab91101a3: mov    0x28(%rsp),%r10
  0x00007f8ab91101a8: mov    0x30(%rsp),%r9
  0x00007f8ab91101ad: mov    0x38(%rsp),%r8
  0x00007f8ab91101b2: mov    0x40(%rsp),%rdi
  0x00007f8ab91101b7: mov    0x48(%rsp),%rsi
  0x00007f8ab91101bc: mov    0x50(%rsp),%rbp
  0x00007f8ab91101c1: mov    0x60(%rsp),%rbx
  0x00007f8ab91101c6: mov    0x68(%rsp),%rdx
  0x00007f8ab91101cb: mov    0x70(%rsp),%rcx
  0x00007f8ab91101d0: mov    0x78(%rsp),%rax
  0x00007f8ab91101d5: add    $0x80,%rsp
  0x00007f8ab91101dc: add    $0x8,%rsp
  0x00007f8ab91101e0: popfq  
  0x00007f8ab91101e1: mov    %r13,%rsp
  0x00007f8ab91101e4: pop    %rax
  0x00007f8ab91101e5: mov    %rsp,%r13
  0x00007f8ab91101e8: sub    $0x10,%rsp
  0x00007f8ab91101ec: mov    %rax,(%rsp)
  0x00007f8ab91101f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91101f5: mov    0x40(%rbx),%rcx
  0x00007f8ab91101f9: jmpq   *%rcx

AHE@0x00007f8ac80c3b78: 0xb0000000 i2c: 0x00007f8ab91102a0 c2i: 0x00007f8ab91103b4 c2iUV: 0x00007f8ab9110387
i2c argument handler #0 for: receiver ()[Ljava/lang/Throwable; (539 bytes generated)
c2i argument handler starts at 0x7f8ab91103b4
  0x00007f8ab91102a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91102a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91102ae: cmp    %r11,%rax
  0x00007f8ab91102b1: jbe    0x00007f8ab91102ca
  0x00007f8ab91102b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91102c1: cmp    %r11,%rax
  0x00007f8ab91102c4: jb     0x00007f8ab9110367
  0x00007f8ab91102ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91102d4: cmp    %r11,%rax
  0x00007f8ab91102d7: jbe    0x00007f8ab91102f0
  0x00007f8ab91102dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91102e7: cmp    %r11,%rax
  0x00007f8ab91102ea: jb     0x00007f8ab9110367
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91102f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91102f5: sub    $0x80,%rsp
  0x00007f8ab91102fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9110301: mov    %rcx,0x70(%rsp)
  0x00007f8ab9110306: mov    %rdx,0x68(%rsp)
  0x00007f8ab911030b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9110310: mov    %rbp,0x50(%rsp)
  0x00007f8ab9110315: mov    %rsi,0x48(%rsp)
  0x00007f8ab911031a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911031f: mov    %r8,0x38(%rsp)
  0x00007f8ab9110324: mov    %r9,0x30(%rsp)
  0x00007f8ab9110329: mov    %r10,0x28(%rsp)
  0x00007f8ab911032e: mov    %r11,0x20(%rsp)
  0x00007f8ab9110333: mov    %r12,0x18(%rsp)
  0x00007f8ab9110338: mov    %r13,0x10(%rsp)
  0x00007f8ab911033d: mov    %r14,0x8(%rsp)
  0x00007f8ab9110342: mov    %r15,(%rsp)
  0x00007f8ab9110346: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9110350: movabs $0x7f8ab91102f0,%rsi
  0x00007f8ab911035a: mov    %rsp,%rdx
  0x00007f8ab911035d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110361: callq  0x00007f8aceddb9fa
  0x00007f8ab9110366: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9110367: mov    %rsp,%r11
  0x00007f8ab911036a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911036e: push   %rax
  0x00007f8ab911036f: mov    %r11,%rax
  0x00007f8ab9110372: mov    0x50(%rbx),%r11
  0x00007f8ab9110376: mov    0x8(%rax),%rsi
  0x00007f8ab911037a: mov    %rbx,0x258(%r15)
  0x00007f8ab9110381: mov    %rbx,%rax
  0x00007f8ab9110384: jmpq   *%r11
  0x00007f8ab9110387: mov    0x8(%rsi),%ebx
  0x00007f8ab911038a: shl    $0x3,%rbx
  0x00007f8ab911038e: cmp    0x10(%rax),%rbx
  0x00007f8ab9110392: mov    0x8(%rax),%rbx
  0x00007f8ab9110396: je     0x00007f8ab91103a1
  0x00007f8ab911039c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91103a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91103a9: je     0x00007f8ab91104a4
  0x00007f8ab91103af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91103b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91103bc: je     0x00007f8ab91104a4
  0x00007f8ab91103c2: mov    %rsp,%r13
  0x00007f8ab91103c5: mov    (%rsp),%rax
  0x00007f8ab91103c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91103cd: pushfq 
  0x00007f8ab91103ce: sub    $0x8,%rsp
  0x00007f8ab91103d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91103d7: sub    $0x80,%rsp
  0x00007f8ab91103de: mov    %rax,0x78(%rsp)
  0x00007f8ab91103e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91103e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91103ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91103f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91103f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91103fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9110401: mov    %r8,0x38(%rsp)
  0x00007f8ab9110406: mov    %r9,0x30(%rsp)
  0x00007f8ab911040b: mov    %r10,0x28(%rsp)
  0x00007f8ab9110410: mov    %r11,0x20(%rsp)
  0x00007f8ab9110415: mov    %r12,0x18(%rsp)
  0x00007f8ab911041a: mov    %r13,0x10(%rsp)
  0x00007f8ab911041f: mov    %r14,0x8(%rsp)
  0x00007f8ab9110424: mov    %r15,(%rsp)
  0x00007f8ab9110428: sub    $0x200,%rsp
  0x00007f8ab911042f: fxsave64 (%rsp)
  0x00007f8ab9110434: mov    %rbx,%rdi
  0x00007f8ab9110437: mov    %rax,%rsi
  0x00007f8ab911043a: callq  0x00007f8acef8bbca
  0x00007f8ab911043f: fxrstor64 (%rsp)
  0x00007f8ab9110444: add    $0x200,%rsp
  0x00007f8ab911044b: mov    (%rsp),%r15
  0x00007f8ab911044f: mov    0x8(%rsp),%r14
  0x00007f8ab9110454: mov    0x10(%rsp),%r13
  0x00007f8ab9110459: mov    0x18(%rsp),%r12
  0x00007f8ab911045e: mov    0x20(%rsp),%r11
  0x00007f8ab9110463: mov    0x28(%rsp),%r10
  0x00007f8ab9110468: mov    0x30(%rsp),%r9
  0x00007f8ab911046d: mov    0x38(%rsp),%r8
  0x00007f8ab9110472: mov    0x40(%rsp),%rdi
  0x00007f8ab9110477: mov    0x48(%rsp),%rsi
  0x00007f8ab911047c: mov    0x50(%rsp),%rbp
  0x00007f8ab9110481: mov    0x60(%rsp),%rbx
  0x00007f8ab9110486: mov    0x68(%rsp),%rdx
  0x00007f8ab911048b: mov    0x70(%rsp),%rcx
  0x00007f8ab9110490: mov    0x78(%rsp),%rax
  0x00007f8ab9110495: add    $0x80,%rsp
  0x00007f8ab911049c: add    $0x8,%rsp
  0x00007f8ab91104a0: popfq  
  0x00007f8ab91104a1: mov    %r13,%rsp
  0x00007f8ab91104a4: pop    %rax
  0x00007f8ab91104a5: mov    %rsp,%r13
  0x00007f8ab91104a8: sub    $0x10,%rsp
  0x00007f8ab91104ac: mov    %rax,(%rsp)
  0x00007f8ab91104b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91104b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91104b9: jmpq   *%rcx

AHE@0x00007f8ac80c3bc0: 0xbb000000 i2c: 0x00007f8ab9110560 c2i: 0x00007f8ab9110678 c2iUV: 0x00007f8ab911064b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9110678
  0x00007f8ab9110560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9110564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911056e: cmp    %r11,%rax
  0x00007f8ab9110571: jbe    0x00007f8ab911058a
  0x00007f8ab9110577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9110581: cmp    %r11,%rax
  0x00007f8ab9110584: jb     0x00007f8ab9110627
  0x00007f8ab911058a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9110594: cmp    %r11,%rax
  0x00007f8ab9110597: jbe    0x00007f8ab91105b0
  0x00007f8ab911059d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91105a7: cmp    %r11,%rax
  0x00007f8ab91105aa: jb     0x00007f8ab9110627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91105b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91105b5: sub    $0x80,%rsp
  0x00007f8ab91105bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91105c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91105c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91105cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91105d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91105d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91105da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91105df: mov    %r8,0x38(%rsp)
  0x00007f8ab91105e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91105e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91105ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91105f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91105f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91105fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9110602: mov    %r15,(%rsp)
  0x00007f8ab9110606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9110610: movabs $0x7f8ab91105b0,%rsi
  0x00007f8ab911061a: mov    %rsp,%rdx
  0x00007f8ab911061d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110621: callq  0x00007f8aceddb9fa
  0x00007f8ab9110626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9110627: mov    %rsp,%r11
  0x00007f8ab911062a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911062e: push   %rax
  0x00007f8ab911062f: mov    %r11,%rax
  0x00007f8ab9110632: mov    0x50(%rbx),%r11
  0x00007f8ab9110636: mov    0x10(%rax),%rsi
  0x00007f8ab911063a: mov    0x8(%rax),%rdx
  0x00007f8ab911063e: mov    %rbx,0x258(%r15)
  0x00007f8ab9110645: mov    %rbx,%rax
  0x00007f8ab9110648: jmpq   *%r11
  0x00007f8ab911064b: mov    0x8(%rsi),%ebx
  0x00007f8ab911064e: shl    $0x3,%rbx
  0x00007f8ab9110652: cmp    0x10(%rax),%rbx
  0x00007f8ab9110656: mov    0x8(%rax),%rbx
  0x00007f8ab911065a: je     0x00007f8ab9110665
  0x00007f8ab9110660: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110665: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911066d: je     0x00007f8ab9110768
  0x00007f8ab9110673: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110678: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9110680: je     0x00007f8ab9110768
  0x00007f8ab9110686: mov    %rsp,%r13
  0x00007f8ab9110689: mov    (%rsp),%rax
  0x00007f8ab911068d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110691: pushfq 
  0x00007f8ab9110692: sub    $0x8,%rsp
  0x00007f8ab9110696: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911069b: sub    $0x80,%rsp
  0x00007f8ab91106a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91106a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91106ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91106b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91106b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91106bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91106c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91106c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91106ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91106cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91106d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91106d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91106de: mov    %r13,0x10(%rsp)
  0x00007f8ab91106e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91106e8: mov    %r15,(%rsp)
  0x00007f8ab91106ec: sub    $0x200,%rsp
  0x00007f8ab91106f3: fxsave64 (%rsp)
  0x00007f8ab91106f8: mov    %rbx,%rdi
  0x00007f8ab91106fb: mov    %rax,%rsi
  0x00007f8ab91106fe: callq  0x00007f8acef8bbca
  0x00007f8ab9110703: fxrstor64 (%rsp)
  0x00007f8ab9110708: add    $0x200,%rsp
  0x00007f8ab911070f: mov    (%rsp),%r15
  0x00007f8ab9110713: mov    0x8(%rsp),%r14
  0x00007f8ab9110718: mov    0x10(%rsp),%r13
  0x00007f8ab911071d: mov    0x18(%rsp),%r12
  0x00007f8ab9110722: mov    0x20(%rsp),%r11
  0x00007f8ab9110727: mov    0x28(%rsp),%r10
  0x00007f8ab911072c: mov    0x30(%rsp),%r9
  0x00007f8ab9110731: mov    0x38(%rsp),%r8
  0x00007f8ab9110736: mov    0x40(%rsp),%rdi
  0x00007f8ab911073b: mov    0x48(%rsp),%rsi
  0x00007f8ab9110740: mov    0x50(%rsp),%rbp
  0x00007f8ab9110745: mov    0x60(%rsp),%rbx
  0x00007f8ab911074a: mov    0x68(%rsp),%rdx
  0x00007f8ab911074f: mov    0x70(%rsp),%rcx
  0x00007f8ab9110754: mov    0x78(%rsp),%rax
  0x00007f8ab9110759: add    $0x80,%rsp
  0x00007f8ab9110760: add    $0x8,%rsp
  0x00007f8ab9110764: popfq  
  0x00007f8ab9110765: mov    %r13,%rsp
  0x00007f8ab9110768: pop    %rax
  0x00007f8ab9110769: mov    %rsp,%r13
  0x00007f8ab911076c: sub    $0x20,%rsp
  0x00007f8ab9110770: mov    %rax,(%rsp)
  0x00007f8ab9110774: mov    %rsi,0x10(%rsp)
  0x00007f8ab9110779: mov    %rdx,0x8(%rsp)
  0x00007f8ab911077e: mov    0x40(%rbx),%rcx
  0x00007f8ab9110782: jmpq   *%rcx

AHE@0x00007f8ac80c3c08: 0xbb000000 i2c: 0x00007f8ab9110860 c2i: 0x00007f8ab9110978 c2iUV: 0x00007f8ab911094b
i2c argument handler #0 for: receiver (Ljava/io/ObjectOutputStream;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9110978
  0x00007f8ab9110860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9110864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911086e: cmp    %r11,%rax
  0x00007f8ab9110871: jbe    0x00007f8ab911088a
  0x00007f8ab9110877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9110881: cmp    %r11,%rax
  0x00007f8ab9110884: jb     0x00007f8ab9110927
  0x00007f8ab911088a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9110894: cmp    %r11,%rax
  0x00007f8ab9110897: jbe    0x00007f8ab91108b0
  0x00007f8ab911089d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91108a7: cmp    %r11,%rax
  0x00007f8ab91108aa: jb     0x00007f8ab9110927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91108b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91108b5: sub    $0x80,%rsp
  0x00007f8ab91108bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91108c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91108c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91108cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91108d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91108d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91108da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91108df: mov    %r8,0x38(%rsp)
  0x00007f8ab91108e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91108e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91108ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91108f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91108f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91108fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9110902: mov    %r15,(%rsp)
  0x00007f8ab9110906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9110910: movabs $0x7f8ab91108b0,%rsi
  0x00007f8ab911091a: mov    %rsp,%rdx
  0x00007f8ab911091d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110921: callq  0x00007f8aceddb9fa
  0x00007f8ab9110926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9110927: mov    %rsp,%r11
  0x00007f8ab911092a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911092e: push   %rax
  0x00007f8ab911092f: mov    %r11,%rax
  0x00007f8ab9110932: mov    0x50(%rbx),%r11
  0x00007f8ab9110936: mov    0x10(%rax),%rsi
  0x00007f8ab911093a: mov    0x8(%rax),%rdx
  0x00007f8ab911093e: mov    %rbx,0x258(%r15)
  0x00007f8ab9110945: mov    %rbx,%rax
  0x00007f8ab9110948: jmpq   *%r11
  0x00007f8ab911094b: mov    0x8(%rsi),%ebx
  0x00007f8ab911094e: shl    $0x3,%rbx
  0x00007f8ab9110952: cmp    0x10(%rax),%rbx
  0x00007f8ab9110956: mov    0x8(%rax),%rbx
  0x00007f8ab911095a: je     0x00007f8ab9110965
  0x00007f8ab9110960: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110965: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911096d: je     0x00007f8ab9110a68
  0x00007f8ab9110973: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110978: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9110980: je     0x00007f8ab9110a68
  0x00007f8ab9110986: mov    %rsp,%r13
  0x00007f8ab9110989: mov    (%rsp),%rax
  0x00007f8ab911098d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110991: pushfq 
  0x00007f8ab9110992: sub    $0x8,%rsp
  0x00007f8ab9110996: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911099b: sub    $0x80,%rsp
  0x00007f8ab91109a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91109a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91109ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91109b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91109b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91109bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91109c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91109c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91109ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91109cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91109d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91109d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91109de: mov    %r13,0x10(%rsp)
  0x00007f8ab91109e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91109e8: mov    %r15,(%rsp)
  0x00007f8ab91109ec: sub    $0x200,%rsp
  0x00007f8ab91109f3: fxsave64 (%rsp)
  0x00007f8ab91109f8: mov    %rbx,%rdi
  0x00007f8ab91109fb: mov    %rax,%rsi
  0x00007f8ab91109fe: callq  0x00007f8acef8bbca
  0x00007f8ab9110a03: fxrstor64 (%rsp)
  0x00007f8ab9110a08: add    $0x200,%rsp
  0x00007f8ab9110a0f: mov    (%rsp),%r15
  0x00007f8ab9110a13: mov    0x8(%rsp),%r14
  0x00007f8ab9110a18: mov    0x10(%rsp),%r13
  0x00007f8ab9110a1d: mov    0x18(%rsp),%r12
  0x00007f8ab9110a22: mov    0x20(%rsp),%r11
  0x00007f8ab9110a27: mov    0x28(%rsp),%r10
  0x00007f8ab9110a2c: mov    0x30(%rsp),%r9
  0x00007f8ab9110a31: mov    0x38(%rsp),%r8
  0x00007f8ab9110a36: mov    0x40(%rsp),%rdi
  0x00007f8ab9110a3b: mov    0x48(%rsp),%rsi
  0x00007f8ab9110a40: mov    0x50(%rsp),%rbp
  0x00007f8ab9110a45: mov    0x60(%rsp),%rbx
  0x00007f8ab9110a4a: mov    0x68(%rsp),%rdx
  0x00007f8ab9110a4f: mov    0x70(%rsp),%rcx
  0x00007f8ab9110a54: mov    0x78(%rsp),%rax
  0x00007f8ab9110a59: add    $0x80,%rsp
  0x00007f8ab9110a60: add    $0x8,%rsp
  0x00007f8ab9110a64: popfq  
  0x00007f8ab9110a65: mov    %r13,%rsp
  0x00007f8ab9110a68: pop    %rax
  0x00007f8ab9110a69: mov    %rsp,%r13
  0x00007f8ab9110a6c: sub    $0x20,%rsp
  0x00007f8ab9110a70: mov    %rax,(%rsp)
  0x00007f8ab9110a74: mov    %rsi,0x10(%rsp)
  0x00007f8ab9110a79: mov    %rdx,0x8(%rsp)
  0x00007f8ab9110a7e: mov    0x40(%rbx),%rcx
  0x00007f8ab9110a82: jmpq   *%rcx

AHE@0x00007f8ac80c3c50: 0xbb000000 i2c: 0x00007f8ab9110b60 c2i: 0x00007f8ab9110c78 c2iUV: 0x00007f8ab9110c4b
i2c argument handler #0 for: receiver (Ljava/util/List;)I (548 bytes generated)
c2i argument handler starts at 0x7f8ab9110c78
  0x00007f8ab9110b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9110b64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9110b6e: cmp    %r11,%rax
  0x00007f8ab9110b71: jbe    0x00007f8ab9110b8a
  0x00007f8ab9110b77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9110b81: cmp    %r11,%rax
  0x00007f8ab9110b84: jb     0x00007f8ab9110c27
  0x00007f8ab9110b8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9110b94: cmp    %r11,%rax
  0x00007f8ab9110b97: jbe    0x00007f8ab9110bb0
  0x00007f8ab9110b9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9110ba7: cmp    %r11,%rax
  0x00007f8ab9110baa: jb     0x00007f8ab9110c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9110bb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9110bb5: sub    $0x80,%rsp
  0x00007f8ab9110bbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9110bc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9110bc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9110bcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9110bd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9110bd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9110bda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9110bdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9110be4: mov    %r9,0x30(%rsp)
  0x00007f8ab9110be9: mov    %r10,0x28(%rsp)
  0x00007f8ab9110bee: mov    %r11,0x20(%rsp)
  0x00007f8ab9110bf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9110bf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9110bfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9110c02: mov    %r15,(%rsp)
  0x00007f8ab9110c06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9110c10: movabs $0x7f8ab9110bb0,%rsi
  0x00007f8ab9110c1a: mov    %rsp,%rdx
  0x00007f8ab9110c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110c21: callq  0x00007f8aceddb9fa
  0x00007f8ab9110c26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9110c27: mov    %rsp,%r11
  0x00007f8ab9110c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110c2e: push   %rax
  0x00007f8ab9110c2f: mov    %r11,%rax
  0x00007f8ab9110c32: mov    0x50(%rbx),%r11
  0x00007f8ab9110c36: mov    0x10(%rax),%rsi
  0x00007f8ab9110c3a: mov    0x8(%rax),%rdx
  0x00007f8ab9110c3e: mov    %rbx,0x258(%r15)
  0x00007f8ab9110c45: mov    %rbx,%rax
  0x00007f8ab9110c48: jmpq   *%r11
  0x00007f8ab9110c4b: mov    0x8(%rsi),%ebx
  0x00007f8ab9110c4e: shl    $0x3,%rbx
  0x00007f8ab9110c52: cmp    0x10(%rax),%rbx
  0x00007f8ab9110c56: mov    0x8(%rax),%rbx
  0x00007f8ab9110c5a: je     0x00007f8ab9110c65
  0x00007f8ab9110c60: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110c65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9110c6d: je     0x00007f8ab9110d68
  0x00007f8ab9110c73: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110c78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9110c80: je     0x00007f8ab9110d68
  0x00007f8ab9110c86: mov    %rsp,%r13
  0x00007f8ab9110c89: mov    (%rsp),%rax
  0x00007f8ab9110c8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110c91: pushfq 
  0x00007f8ab9110c92: sub    $0x8,%rsp
  0x00007f8ab9110c96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9110c9b: sub    $0x80,%rsp
  0x00007f8ab9110ca2: mov    %rax,0x78(%rsp)
  0x00007f8ab9110ca7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9110cac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9110cb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9110cb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9110cbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9110cc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9110cc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9110cca: mov    %r9,0x30(%rsp)
  0x00007f8ab9110ccf: mov    %r10,0x28(%rsp)
  0x00007f8ab9110cd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9110cd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9110cde: mov    %r13,0x10(%rsp)
  0x00007f8ab9110ce3: mov    %r14,0x8(%rsp)
  0x00007f8ab9110ce8: mov    %r15,(%rsp)
  0x00007f8ab9110cec: sub    $0x200,%rsp
  0x00007f8ab9110cf3: fxsave64 (%rsp)
  0x00007f8ab9110cf8: mov    %rbx,%rdi
  0x00007f8ab9110cfb: mov    %rax,%rsi
  0x00007f8ab9110cfe: callq  0x00007f8acef8bbca
  0x00007f8ab9110d03: fxrstor64 (%rsp)
  0x00007f8ab9110d08: add    $0x200,%rsp
  0x00007f8ab9110d0f: mov    (%rsp),%r15
  0x00007f8ab9110d13: mov    0x8(%rsp),%r14
  0x00007f8ab9110d18: mov    0x10(%rsp),%r13
  0x00007f8ab9110d1d: mov    0x18(%rsp),%r12
  0x00007f8ab9110d22: mov    0x20(%rsp),%r11
  0x00007f8ab9110d27: mov    0x28(%rsp),%r10
  0x00007f8ab9110d2c: mov    0x30(%rsp),%r9
  0x00007f8ab9110d31: mov    0x38(%rsp),%r8
  0x00007f8ab9110d36: mov    0x40(%rsp),%rdi
  0x00007f8ab9110d3b: mov    0x48(%rsp),%rsi
  0x00007f8ab9110d40: mov    0x50(%rsp),%rbp
  0x00007f8ab9110d45: mov    0x60(%rsp),%rbx
  0x00007f8ab9110d4a: mov    0x68(%rsp),%rdx
  0x00007f8ab9110d4f: mov    0x70(%rsp),%rcx
  0x00007f8ab9110d54: mov    0x78(%rsp),%rax
  0x00007f8ab9110d59: add    $0x80,%rsp
  0x00007f8ab9110d60: add    $0x8,%rsp
  0x00007f8ab9110d64: popfq  
  0x00007f8ab9110d65: mov    %r13,%rsp
  0x00007f8ab9110d68: pop    %rax
  0x00007f8ab9110d69: mov    %rsp,%r13
  0x00007f8ab9110d6c: sub    $0x20,%rsp
  0x00007f8ab9110d70: mov    %rax,(%rsp)
  0x00007f8ab9110d74: mov    %rsi,0x10(%rsp)
  0x00007f8ab9110d79: mov    %rdx,0x8(%rsp)
  0x00007f8ab9110d7e: mov    0x40(%rbx),%rcx
  0x00007f8ab9110d82: jmpq   *%rcx

AHE@0x00007f8ac80c3c98: 0xbb000000 i2c: 0x00007f8ab9110e60 c2i: 0x00007f8ab9110f78 c2iUV: 0x00007f8ab9110f4b
i2c argument handler #0 for: receiver (Ljava/io/ObjectInputStream;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9110f78
  0x00007f8ab9110e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9110e64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9110e6e: cmp    %r11,%rax
  0x00007f8ab9110e71: jbe    0x00007f8ab9110e8a
  0x00007f8ab9110e77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9110e81: cmp    %r11,%rax
  0x00007f8ab9110e84: jb     0x00007f8ab9110f27
  0x00007f8ab9110e8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9110e94: cmp    %r11,%rax
  0x00007f8ab9110e97: jbe    0x00007f8ab9110eb0
  0x00007f8ab9110e9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9110ea7: cmp    %r11,%rax
  0x00007f8ab9110eaa: jb     0x00007f8ab9110f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9110eb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9110eb5: sub    $0x80,%rsp
  0x00007f8ab9110ebc: mov    %rax,0x78(%rsp)
  0x00007f8ab9110ec1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9110ec6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9110ecb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9110ed0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9110ed5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9110eda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9110edf: mov    %r8,0x38(%rsp)
  0x00007f8ab9110ee4: mov    %r9,0x30(%rsp)
  0x00007f8ab9110ee9: mov    %r10,0x28(%rsp)
  0x00007f8ab9110eee: mov    %r11,0x20(%rsp)
  0x00007f8ab9110ef3: mov    %r12,0x18(%rsp)
  0x00007f8ab9110ef8: mov    %r13,0x10(%rsp)
  0x00007f8ab9110efd: mov    %r14,0x8(%rsp)
  0x00007f8ab9110f02: mov    %r15,(%rsp)
  0x00007f8ab9110f06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9110f10: movabs $0x7f8ab9110eb0,%rsi
  0x00007f8ab9110f1a: mov    %rsp,%rdx
  0x00007f8ab9110f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110f21: callq  0x00007f8aceddb9fa
  0x00007f8ab9110f26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9110f27: mov    %rsp,%r11
  0x00007f8ab9110f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110f2e: push   %rax
  0x00007f8ab9110f2f: mov    %r11,%rax
  0x00007f8ab9110f32: mov    0x50(%rbx),%r11
  0x00007f8ab9110f36: mov    0x10(%rax),%rsi
  0x00007f8ab9110f3a: mov    0x8(%rax),%rdx
  0x00007f8ab9110f3e: mov    %rbx,0x258(%r15)
  0x00007f8ab9110f45: mov    %rbx,%rax
  0x00007f8ab9110f48: jmpq   *%r11
  0x00007f8ab9110f4b: mov    0x8(%rsi),%ebx
  0x00007f8ab9110f4e: shl    $0x3,%rbx
  0x00007f8ab9110f52: cmp    0x10(%rax),%rbx
  0x00007f8ab9110f56: mov    0x8(%rax),%rbx
  0x00007f8ab9110f5a: je     0x00007f8ab9110f65
  0x00007f8ab9110f60: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110f65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9110f6d: je     0x00007f8ab9111068
  0x00007f8ab9110f73: jmpq   0x00007f8ab9105c40
  0x00007f8ab9110f78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9110f80: je     0x00007f8ab9111068
  0x00007f8ab9110f86: mov    %rsp,%r13
  0x00007f8ab9110f89: mov    (%rsp),%rax
  0x00007f8ab9110f8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9110f91: pushfq 
  0x00007f8ab9110f92: sub    $0x8,%rsp
  0x00007f8ab9110f96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9110f9b: sub    $0x80,%rsp
  0x00007f8ab9110fa2: mov    %rax,0x78(%rsp)
  0x00007f8ab9110fa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9110fac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9110fb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9110fb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9110fbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9110fc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9110fc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9110fca: mov    %r9,0x30(%rsp)
  0x00007f8ab9110fcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9110fd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9110fd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9110fde: mov    %r13,0x10(%rsp)
  0x00007f8ab9110fe3: mov    %r14,0x8(%rsp)
  0x00007f8ab9110fe8: mov    %r15,(%rsp)
  0x00007f8ab9110fec: sub    $0x200,%rsp
  0x00007f8ab9110ff3: fxsave64 (%rsp)
  0x00007f8ab9110ff8: mov    %rbx,%rdi
  0x00007f8ab9110ffb: mov    %rax,%rsi
  0x00007f8ab9110ffe: callq  0x00007f8acef8bbca
  0x00007f8ab9111003: fxrstor64 (%rsp)
  0x00007f8ab9111008: add    $0x200,%rsp
  0x00007f8ab911100f: mov    (%rsp),%r15
  0x00007f8ab9111013: mov    0x8(%rsp),%r14
  0x00007f8ab9111018: mov    0x10(%rsp),%r13
  0x00007f8ab911101d: mov    0x18(%rsp),%r12
  0x00007f8ab9111022: mov    0x20(%rsp),%r11
  0x00007f8ab9111027: mov    0x28(%rsp),%r10
  0x00007f8ab911102c: mov    0x30(%rsp),%r9
  0x00007f8ab9111031: mov    0x38(%rsp),%r8
  0x00007f8ab9111036: mov    0x40(%rsp),%rdi
  0x00007f8ab911103b: mov    0x48(%rsp),%rsi
  0x00007f8ab9111040: mov    0x50(%rsp),%rbp
  0x00007f8ab9111045: mov    0x60(%rsp),%rbx
  0x00007f8ab911104a: mov    0x68(%rsp),%rdx
  0x00007f8ab911104f: mov    0x70(%rsp),%rcx
  0x00007f8ab9111054: mov    0x78(%rsp),%rax
  0x00007f8ab9111059: add    $0x80,%rsp
  0x00007f8ab9111060: add    $0x8,%rsp
  0x00007f8ab9111064: popfq  
  0x00007f8ab9111065: mov    %r13,%rsp
  0x00007f8ab9111068: pop    %rax
  0x00007f8ab9111069: mov    %rsp,%r13
  0x00007f8ab911106c: sub    $0x20,%rsp
  0x00007f8ab9111070: mov    %rax,(%rsp)
  0x00007f8ab9111074: mov    %rsi,0x10(%rsp)
  0x00007f8ab9111079: mov    %rdx,0x8(%rsp)
  0x00007f8ab911107e: mov    0x40(%rbx),%rcx
  0x00007f8ab9111082: jmpq   *%rcx

AHE@0x00007f8ac80c3ce0: 0xba000000 i2c: 0x00007f8ab9111160 c2i: 0x00007f8ab9111277 c2iUV: 0x00007f8ab911124a
i2c argument handler #0 for: receiver (I)Ljava/lang/StackTraceElement; (546 bytes generated)
c2i argument handler starts at 0x7f8ab9111277
  0x00007f8ab9111160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9111164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911116e: cmp    %r11,%rax
  0x00007f8ab9111171: jbe    0x00007f8ab911118a
  0x00007f8ab9111177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9111181: cmp    %r11,%rax
  0x00007f8ab9111184: jb     0x00007f8ab9111227
  0x00007f8ab911118a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9111194: cmp    %r11,%rax
  0x00007f8ab9111197: jbe    0x00007f8ab91111b0
  0x00007f8ab911119d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91111a7: cmp    %r11,%rax
  0x00007f8ab91111aa: jb     0x00007f8ab9111227
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91111b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91111b5: sub    $0x80,%rsp
  0x00007f8ab91111bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91111c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91111c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91111cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91111d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91111d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91111da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91111df: mov    %r8,0x38(%rsp)
  0x00007f8ab91111e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91111e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91111ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91111f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91111f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91111fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9111202: mov    %r15,(%rsp)
  0x00007f8ab9111206: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9111210: movabs $0x7f8ab91111b0,%rsi
  0x00007f8ab911121a: mov    %rsp,%rdx
  0x00007f8ab911121d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111221: callq  0x00007f8aceddb9fa
  0x00007f8ab9111226: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9111227: mov    %rsp,%r11
  0x00007f8ab911122a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911122e: push   %rax
  0x00007f8ab911122f: mov    %r11,%rax
  0x00007f8ab9111232: mov    0x50(%rbx),%r11
  0x00007f8ab9111236: mov    0x10(%rax),%rsi
  0x00007f8ab911123a: mov    0x8(%rax),%edx
  0x00007f8ab911123d: mov    %rbx,0x258(%r15)
  0x00007f8ab9111244: mov    %rbx,%rax
  0x00007f8ab9111247: jmpq   *%r11
  0x00007f8ab911124a: mov    0x8(%rsi),%ebx
  0x00007f8ab911124d: shl    $0x3,%rbx
  0x00007f8ab9111251: cmp    0x10(%rax),%rbx
  0x00007f8ab9111255: mov    0x8(%rax),%rbx
  0x00007f8ab9111259: je     0x00007f8ab9111264
  0x00007f8ab911125f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111264: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911126c: je     0x00007f8ab9111367
  0x00007f8ab9111272: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111277: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911127f: je     0x00007f8ab9111367
  0x00007f8ab9111285: mov    %rsp,%r13
  0x00007f8ab9111288: mov    (%rsp),%rax
  0x00007f8ab911128c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111290: pushfq 
  0x00007f8ab9111291: sub    $0x8,%rsp
  0x00007f8ab9111295: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911129a: sub    $0x80,%rsp
  0x00007f8ab91112a1: mov    %rax,0x78(%rsp)
  0x00007f8ab91112a6: mov    %rcx,0x70(%rsp)
  0x00007f8ab91112ab: mov    %rdx,0x68(%rsp)
  0x00007f8ab91112b0: mov    %rbx,0x60(%rsp)
  0x00007f8ab91112b5: mov    %rbp,0x50(%rsp)
  0x00007f8ab91112ba: mov    %rsi,0x48(%rsp)
  0x00007f8ab91112bf: mov    %rdi,0x40(%rsp)
  0x00007f8ab91112c4: mov    %r8,0x38(%rsp)
  0x00007f8ab91112c9: mov    %r9,0x30(%rsp)
  0x00007f8ab91112ce: mov    %r10,0x28(%rsp)
  0x00007f8ab91112d3: mov    %r11,0x20(%rsp)
  0x00007f8ab91112d8: mov    %r12,0x18(%rsp)
  0x00007f8ab91112dd: mov    %r13,0x10(%rsp)
  0x00007f8ab91112e2: mov    %r14,0x8(%rsp)
  0x00007f8ab91112e7: mov    %r15,(%rsp)
  0x00007f8ab91112eb: sub    $0x200,%rsp
  0x00007f8ab91112f2: fxsave64 (%rsp)
  0x00007f8ab91112f7: mov    %rbx,%rdi
  0x00007f8ab91112fa: mov    %rax,%rsi
  0x00007f8ab91112fd: callq  0x00007f8acef8bbca
  0x00007f8ab9111302: fxrstor64 (%rsp)
  0x00007f8ab9111307: add    $0x200,%rsp
  0x00007f8ab911130e: mov    (%rsp),%r15
  0x00007f8ab9111312: mov    0x8(%rsp),%r14
  0x00007f8ab9111317: mov    0x10(%rsp),%r13
  0x00007f8ab911131c: mov    0x18(%rsp),%r12
  0x00007f8ab9111321: mov    0x20(%rsp),%r11
  0x00007f8ab9111326: mov    0x28(%rsp),%r10
  0x00007f8ab911132b: mov    0x30(%rsp),%r9
  0x00007f8ab9111330: mov    0x38(%rsp),%r8
  0x00007f8ab9111335: mov    0x40(%rsp),%rdi
  0x00007f8ab911133a: mov    0x48(%rsp),%rsi
  0x00007f8ab911133f: mov    0x50(%rsp),%rbp
  0x00007f8ab9111344: mov    0x60(%rsp),%rbx
  0x00007f8ab9111349: mov    0x68(%rsp),%rdx
  0x00007f8ab911134e: mov    0x70(%rsp),%rcx
  0x00007f8ab9111353: mov    0x78(%rsp),%rax
  0x00007f8ab9111358: add    $0x80,%rsp
  0x00007f8ab911135f: add    $0x8,%rsp
  0x00007f8ab9111363: popfq  
  0x00007f8ab9111364: mov    %r13,%rsp
  0x00007f8ab9111367: pop    %rax
  0x00007f8ab9111368: mov    %rsp,%r13
  0x00007f8ab911136b: sub    $0x20,%rsp
  0x00007f8ab911136f: mov    %rax,(%rsp)
  0x00007f8ab9111373: mov    %rsi,0x10(%rsp)
  0x00007f8ab9111378: mov    %edx,0x8(%rsp)
  0x00007f8ab911137c: mov    0x40(%rbx),%rcx
  0x00007f8ab9111380: jmpq   *%rcx

AHE@0x00007f8ac80c3d28: 0xb0000000 i2c: 0x00007f8ab9111460 c2i: 0x00007f8ab9111574 c2iUV: 0x00007f8ab9111547
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f8ab9111574
  0x00007f8ab9111460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9111464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911146e: cmp    %r11,%rax
  0x00007f8ab9111471: jbe    0x00007f8ab911148a
  0x00007f8ab9111477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9111481: cmp    %r11,%rax
  0x00007f8ab9111484: jb     0x00007f8ab9111527
  0x00007f8ab911148a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9111494: cmp    %r11,%rax
  0x00007f8ab9111497: jbe    0x00007f8ab91114b0
  0x00007f8ab911149d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91114a7: cmp    %r11,%rax
  0x00007f8ab91114aa: jb     0x00007f8ab9111527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91114b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91114b5: sub    $0x80,%rsp
  0x00007f8ab91114bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91114c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91114c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91114cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91114d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91114d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91114da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91114df: mov    %r8,0x38(%rsp)
  0x00007f8ab91114e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91114e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91114ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91114f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91114f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91114fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9111502: mov    %r15,(%rsp)
  0x00007f8ab9111506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9111510: movabs $0x7f8ab91114b0,%rsi
  0x00007f8ab911151a: mov    %rsp,%rdx
  0x00007f8ab911151d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111521: callq  0x00007f8aceddb9fa
  0x00007f8ab9111526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9111527: mov    %rsp,%r11
  0x00007f8ab911152a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911152e: push   %rax
  0x00007f8ab911152f: mov    %r11,%rax
  0x00007f8ab9111532: mov    0x50(%rbx),%r11
  0x00007f8ab9111536: mov    0x8(%rax),%rsi
  0x00007f8ab911153a: mov    %rbx,0x258(%r15)
  0x00007f8ab9111541: mov    %rbx,%rax
  0x00007f8ab9111544: jmpq   *%r11
  0x00007f8ab9111547: mov    0x8(%rsi),%ebx
  0x00007f8ab911154a: shl    $0x3,%rbx
  0x00007f8ab911154e: cmp    0x10(%rax),%rbx
  0x00007f8ab9111552: mov    0x8(%rax),%rbx
  0x00007f8ab9111556: je     0x00007f8ab9111561
  0x00007f8ab911155c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111561: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9111569: je     0x00007f8ab9111664
  0x00007f8ab911156f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111574: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911157c: je     0x00007f8ab9111664
  0x00007f8ab9111582: mov    %rsp,%r13
  0x00007f8ab9111585: mov    (%rsp),%rax
  0x00007f8ab9111589: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911158d: pushfq 
  0x00007f8ab911158e: sub    $0x8,%rsp
  0x00007f8ab9111592: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9111597: sub    $0x80,%rsp
  0x00007f8ab911159e: mov    %rax,0x78(%rsp)
  0x00007f8ab91115a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91115a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91115ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab91115b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91115b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91115bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab91115c1: mov    %r8,0x38(%rsp)
  0x00007f8ab91115c6: mov    %r9,0x30(%rsp)
  0x00007f8ab91115cb: mov    %r10,0x28(%rsp)
  0x00007f8ab91115d0: mov    %r11,0x20(%rsp)
  0x00007f8ab91115d5: mov    %r12,0x18(%rsp)
  0x00007f8ab91115da: mov    %r13,0x10(%rsp)
  0x00007f8ab91115df: mov    %r14,0x8(%rsp)
  0x00007f8ab91115e4: mov    %r15,(%rsp)
  0x00007f8ab91115e8: sub    $0x200,%rsp
  0x00007f8ab91115ef: fxsave64 (%rsp)
  0x00007f8ab91115f4: mov    %rbx,%rdi
  0x00007f8ab91115f7: mov    %rax,%rsi
  0x00007f8ab91115fa: callq  0x00007f8acef8bbca
  0x00007f8ab91115ff: fxrstor64 (%rsp)
  0x00007f8ab9111604: add    $0x200,%rsp
  0x00007f8ab911160b: mov    (%rsp),%r15
  0x00007f8ab911160f: mov    0x8(%rsp),%r14
  0x00007f8ab9111614: mov    0x10(%rsp),%r13
  0x00007f8ab9111619: mov    0x18(%rsp),%r12
  0x00007f8ab911161e: mov    0x20(%rsp),%r11
  0x00007f8ab9111623: mov    0x28(%rsp),%r10
  0x00007f8ab9111628: mov    0x30(%rsp),%r9
  0x00007f8ab911162d: mov    0x38(%rsp),%r8
  0x00007f8ab9111632: mov    0x40(%rsp),%rdi
  0x00007f8ab9111637: mov    0x48(%rsp),%rsi
  0x00007f8ab911163c: mov    0x50(%rsp),%rbp
  0x00007f8ab9111641: mov    0x60(%rsp),%rbx
  0x00007f8ab9111646: mov    0x68(%rsp),%rdx
  0x00007f8ab911164b: mov    0x70(%rsp),%rcx
  0x00007f8ab9111650: mov    0x78(%rsp),%rax
  0x00007f8ab9111655: add    $0x80,%rsp
  0x00007f8ab911165c: add    $0x8,%rsp
  0x00007f8ab9111660: popfq  
  0x00007f8ab9111661: mov    %r13,%rsp
  0x00007f8ab9111664: pop    %rax
  0x00007f8ab9111665: mov    %rsp,%r13
  0x00007f8ab9111668: sub    $0x10,%rsp
  0x00007f8ab911166c: mov    %rax,(%rsp)
  0x00007f8ab9111670: mov    %rsi,0x8(%rsp)
  0x00007f8ab9111675: mov    0x40(%rbx),%rcx
  0x00007f8ab9111679: jmpq   *%rcx

AHE@0x00007f8ac80c3d70: 0xbb000000 i2c: 0x00007f8ab9111720 c2i: 0x00007f8ab9111838 c2iUV: 0x00007f8ab911180b
i2c argument handler #0 for: receiver ([Ljava/lang/StackTraceElement;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9111838
  0x00007f8ab9111720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9111724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911172e: cmp    %r11,%rax
  0x00007f8ab9111731: jbe    0x00007f8ab911174a
  0x00007f8ab9111737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9111741: cmp    %r11,%rax
  0x00007f8ab9111744: jb     0x00007f8ab91117e7
  0x00007f8ab911174a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9111754: cmp    %r11,%rax
  0x00007f8ab9111757: jbe    0x00007f8ab9111770
  0x00007f8ab911175d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9111767: cmp    %r11,%rax
  0x00007f8ab911176a: jb     0x00007f8ab91117e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9111770: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9111775: sub    $0x80,%rsp
  0x00007f8ab911177c: mov    %rax,0x78(%rsp)
  0x00007f8ab9111781: mov    %rcx,0x70(%rsp)
  0x00007f8ab9111786: mov    %rdx,0x68(%rsp)
  0x00007f8ab911178b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9111790: mov    %rbp,0x50(%rsp)
  0x00007f8ab9111795: mov    %rsi,0x48(%rsp)
  0x00007f8ab911179a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911179f: mov    %r8,0x38(%rsp)
  0x00007f8ab91117a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91117a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91117ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91117b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91117b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91117bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91117c2: mov    %r15,(%rsp)
  0x00007f8ab91117c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91117d0: movabs $0x7f8ab9111770,%rsi
  0x00007f8ab91117da: mov    %rsp,%rdx
  0x00007f8ab91117dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91117e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91117e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91117e7: mov    %rsp,%r11
  0x00007f8ab91117ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91117ee: push   %rax
  0x00007f8ab91117ef: mov    %r11,%rax
  0x00007f8ab91117f2: mov    0x50(%rbx),%r11
  0x00007f8ab91117f6: mov    0x10(%rax),%rsi
  0x00007f8ab91117fa: mov    0x8(%rax),%rdx
  0x00007f8ab91117fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9111805: mov    %rbx,%rax
  0x00007f8ab9111808: jmpq   *%r11
  0x00007f8ab911180b: mov    0x8(%rsi),%ebx
  0x00007f8ab911180e: shl    $0x3,%rbx
  0x00007f8ab9111812: cmp    0x10(%rax),%rbx
  0x00007f8ab9111816: mov    0x8(%rax),%rbx
  0x00007f8ab911181a: je     0x00007f8ab9111825
  0x00007f8ab9111820: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111825: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911182d: je     0x00007f8ab9111928
  0x00007f8ab9111833: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111838: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9111840: je     0x00007f8ab9111928
  0x00007f8ab9111846: mov    %rsp,%r13
  0x00007f8ab9111849: mov    (%rsp),%rax
  0x00007f8ab911184d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111851: pushfq 
  0x00007f8ab9111852: sub    $0x8,%rsp
  0x00007f8ab9111856: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911185b: sub    $0x80,%rsp
  0x00007f8ab9111862: mov    %rax,0x78(%rsp)
  0x00007f8ab9111867: mov    %rcx,0x70(%rsp)
  0x00007f8ab911186c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9111871: mov    %rbx,0x60(%rsp)
  0x00007f8ab9111876: mov    %rbp,0x50(%rsp)
  0x00007f8ab911187b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9111880: mov    %rdi,0x40(%rsp)
  0x00007f8ab9111885: mov    %r8,0x38(%rsp)
  0x00007f8ab911188a: mov    %r9,0x30(%rsp)
  0x00007f8ab911188f: mov    %r10,0x28(%rsp)
  0x00007f8ab9111894: mov    %r11,0x20(%rsp)
  0x00007f8ab9111899: mov    %r12,0x18(%rsp)
  0x00007f8ab911189e: mov    %r13,0x10(%rsp)
  0x00007f8ab91118a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91118a8: mov    %r15,(%rsp)
  0x00007f8ab91118ac: sub    $0x200,%rsp
  0x00007f8ab91118b3: fxsave64 (%rsp)
  0x00007f8ab91118b8: mov    %rbx,%rdi
  0x00007f8ab91118bb: mov    %rax,%rsi
  0x00007f8ab91118be: callq  0x00007f8acef8bbca
  0x00007f8ab91118c3: fxrstor64 (%rsp)
  0x00007f8ab91118c8: add    $0x200,%rsp
  0x00007f8ab91118cf: mov    (%rsp),%r15
  0x00007f8ab91118d3: mov    0x8(%rsp),%r14
  0x00007f8ab91118d8: mov    0x10(%rsp),%r13
  0x00007f8ab91118dd: mov    0x18(%rsp),%r12
  0x00007f8ab91118e2: mov    0x20(%rsp),%r11
  0x00007f8ab91118e7: mov    0x28(%rsp),%r10
  0x00007f8ab91118ec: mov    0x30(%rsp),%r9
  0x00007f8ab91118f1: mov    0x38(%rsp),%r8
  0x00007f8ab91118f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91118fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9111900: mov    0x50(%rsp),%rbp
  0x00007f8ab9111905: mov    0x60(%rsp),%rbx
  0x00007f8ab911190a: mov    0x68(%rsp),%rdx
  0x00007f8ab911190f: mov    0x70(%rsp),%rcx
  0x00007f8ab9111914: mov    0x78(%rsp),%rax
  0x00007f8ab9111919: add    $0x80,%rsp
  0x00007f8ab9111920: add    $0x8,%rsp
  0x00007f8ab9111924: popfq  
  0x00007f8ab9111925: mov    %r13,%rsp
  0x00007f8ab9111928: pop    %rax
  0x00007f8ab9111929: mov    %rsp,%r13
  0x00007f8ab911192c: sub    $0x20,%rsp
  0x00007f8ab9111930: mov    %rax,(%rsp)
  0x00007f8ab9111934: mov    %rsi,0x10(%rsp)
  0x00007f8ab9111939: mov    %rdx,0x8(%rsp)
  0x00007f8ab911193e: mov    0x40(%rbx),%rcx
  0x00007f8ab9111942: jmpq   *%rcx

AHE@0x00007f8ac80c3db8: 0xb0000000 i2c: 0x00007f8ab9111a20 c2i: 0x00007f8ab9111b34 c2iUV: 0x00007f8ab9111b07
i2c argument handler #0 for: receiver ()[Ljava/lang/StackTraceElement; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9111b34
  0x00007f8ab9111a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9111a24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9111a2e: cmp    %r11,%rax
  0x00007f8ab9111a31: jbe    0x00007f8ab9111a4a
  0x00007f8ab9111a37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9111a41: cmp    %r11,%rax
  0x00007f8ab9111a44: jb     0x00007f8ab9111ae7
  0x00007f8ab9111a4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9111a54: cmp    %r11,%rax
  0x00007f8ab9111a57: jbe    0x00007f8ab9111a70
  0x00007f8ab9111a5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9111a67: cmp    %r11,%rax
  0x00007f8ab9111a6a: jb     0x00007f8ab9111ae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9111a70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9111a75: sub    $0x80,%rsp
  0x00007f8ab9111a7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9111a81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9111a86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9111a8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9111a90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9111a95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9111a9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9111a9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9111aa4: mov    %r9,0x30(%rsp)
  0x00007f8ab9111aa9: mov    %r10,0x28(%rsp)
  0x00007f8ab9111aae: mov    %r11,0x20(%rsp)
  0x00007f8ab9111ab3: mov    %r12,0x18(%rsp)
  0x00007f8ab9111ab8: mov    %r13,0x10(%rsp)
  0x00007f8ab9111abd: mov    %r14,0x8(%rsp)
  0x00007f8ab9111ac2: mov    %r15,(%rsp)
  0x00007f8ab9111ac6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9111ad0: movabs $0x7f8ab9111a70,%rsi
  0x00007f8ab9111ada: mov    %rsp,%rdx
  0x00007f8ab9111add: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111ae1: callq  0x00007f8aceddb9fa
  0x00007f8ab9111ae6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9111ae7: mov    %rsp,%r11
  0x00007f8ab9111aea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111aee: push   %rax
  0x00007f8ab9111aef: mov    %r11,%rax
  0x00007f8ab9111af2: mov    0x50(%rbx),%r11
  0x00007f8ab9111af6: mov    0x8(%rax),%rsi
  0x00007f8ab9111afa: mov    %rbx,0x258(%r15)
  0x00007f8ab9111b01: mov    %rbx,%rax
  0x00007f8ab9111b04: jmpq   *%r11
  0x00007f8ab9111b07: mov    0x8(%rsi),%ebx
  0x00007f8ab9111b0a: shl    $0x3,%rbx
  0x00007f8ab9111b0e: cmp    0x10(%rax),%rbx
  0x00007f8ab9111b12: mov    0x8(%rax),%rbx
  0x00007f8ab9111b16: je     0x00007f8ab9111b21
  0x00007f8ab9111b1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111b21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9111b29: je     0x00007f8ab9111c24
  0x00007f8ab9111b2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111b34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9111b3c: je     0x00007f8ab9111c24
  0x00007f8ab9111b42: mov    %rsp,%r13
  0x00007f8ab9111b45: mov    (%rsp),%rax
  0x00007f8ab9111b49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111b4d: pushfq 
  0x00007f8ab9111b4e: sub    $0x8,%rsp
  0x00007f8ab9111b52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9111b57: sub    $0x80,%rsp
  0x00007f8ab9111b5e: mov    %rax,0x78(%rsp)
  0x00007f8ab9111b63: mov    %rcx,0x70(%rsp)
  0x00007f8ab9111b68: mov    %rdx,0x68(%rsp)
  0x00007f8ab9111b6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9111b72: mov    %rbp,0x50(%rsp)
  0x00007f8ab9111b77: mov    %rsi,0x48(%rsp)
  0x00007f8ab9111b7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9111b81: mov    %r8,0x38(%rsp)
  0x00007f8ab9111b86: mov    %r9,0x30(%rsp)
  0x00007f8ab9111b8b: mov    %r10,0x28(%rsp)
  0x00007f8ab9111b90: mov    %r11,0x20(%rsp)
  0x00007f8ab9111b95: mov    %r12,0x18(%rsp)
  0x00007f8ab9111b9a: mov    %r13,0x10(%rsp)
  0x00007f8ab9111b9f: mov    %r14,0x8(%rsp)
  0x00007f8ab9111ba4: mov    %r15,(%rsp)
  0x00007f8ab9111ba8: sub    $0x200,%rsp
  0x00007f8ab9111baf: fxsave64 (%rsp)
  0x00007f8ab9111bb4: mov    %rbx,%rdi
  0x00007f8ab9111bb7: mov    %rax,%rsi
  0x00007f8ab9111bba: callq  0x00007f8acef8bbca
  0x00007f8ab9111bbf: fxrstor64 (%rsp)
  0x00007f8ab9111bc4: add    $0x200,%rsp
  0x00007f8ab9111bcb: mov    (%rsp),%r15
  0x00007f8ab9111bcf: mov    0x8(%rsp),%r14
  0x00007f8ab9111bd4: mov    0x10(%rsp),%r13
  0x00007f8ab9111bd9: mov    0x18(%rsp),%r12
  0x00007f8ab9111bde: mov    0x20(%rsp),%r11
  0x00007f8ab9111be3: mov    0x28(%rsp),%r10
  0x00007f8ab9111be8: mov    0x30(%rsp),%r9
  0x00007f8ab9111bed: mov    0x38(%rsp),%r8
  0x00007f8ab9111bf2: mov    0x40(%rsp),%rdi
  0x00007f8ab9111bf7: mov    0x48(%rsp),%rsi
  0x00007f8ab9111bfc: mov    0x50(%rsp),%rbp
  0x00007f8ab9111c01: mov    0x60(%rsp),%rbx
  0x00007f8ab9111c06: mov    0x68(%rsp),%rdx
  0x00007f8ab9111c0b: mov    0x70(%rsp),%rcx
  0x00007f8ab9111c10: mov    0x78(%rsp),%rax
  0x00007f8ab9111c15: add    $0x80,%rsp
  0x00007f8ab9111c1c: add    $0x8,%rsp
  0x00007f8ab9111c20: popfq  
  0x00007f8ab9111c21: mov    %r13,%rsp
  0x00007f8ab9111c24: pop    %rax
  0x00007f8ab9111c25: mov    %rsp,%r13
  0x00007f8ab9111c28: sub    $0x10,%rsp
  0x00007f8ab9111c2c: mov    %rax,(%rsp)
  0x00007f8ab9111c30: mov    %rsi,0x8(%rsp)
  0x00007f8ab9111c35: mov    0x40(%rbx),%rcx
  0x00007f8ab9111c39: jmpq   *%rcx

AHE@0x00007f8ac80c3e00: 0xb0000000 i2c: 0x00007f8ab9111ce0 c2i: 0x00007f8ab9111df4 c2iUV: 0x00007f8ab9111dc7
i2c argument handler #0 for: receiver ()[Ljava/lang/StackTraceElement; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9111df4
  0x00007f8ab9111ce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9111ce4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9111cee: cmp    %r11,%rax
  0x00007f8ab9111cf1: jbe    0x00007f8ab9111d0a
  0x00007f8ab9111cf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9111d01: cmp    %r11,%rax
  0x00007f8ab9111d04: jb     0x00007f8ab9111da7
  0x00007f8ab9111d0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9111d14: cmp    %r11,%rax
  0x00007f8ab9111d17: jbe    0x00007f8ab9111d30
  0x00007f8ab9111d1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9111d27: cmp    %r11,%rax
  0x00007f8ab9111d2a: jb     0x00007f8ab9111da7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9111d30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9111d35: sub    $0x80,%rsp
  0x00007f8ab9111d3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9111d41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9111d46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9111d4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9111d50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9111d55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9111d5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9111d5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9111d64: mov    %r9,0x30(%rsp)
  0x00007f8ab9111d69: mov    %r10,0x28(%rsp)
  0x00007f8ab9111d6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9111d73: mov    %r12,0x18(%rsp)
  0x00007f8ab9111d78: mov    %r13,0x10(%rsp)
  0x00007f8ab9111d7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9111d82: mov    %r15,(%rsp)
  0x00007f8ab9111d86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9111d90: movabs $0x7f8ab9111d30,%rsi
  0x00007f8ab9111d9a: mov    %rsp,%rdx
  0x00007f8ab9111d9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111da1: callq  0x00007f8aceddb9fa
  0x00007f8ab9111da6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9111da7: mov    %rsp,%r11
  0x00007f8ab9111daa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111dae: push   %rax
  0x00007f8ab9111daf: mov    %r11,%rax
  0x00007f8ab9111db2: mov    0x50(%rbx),%r11
  0x00007f8ab9111db6: mov    0x8(%rax),%rsi
  0x00007f8ab9111dba: mov    %rbx,0x258(%r15)
  0x00007f8ab9111dc1: mov    %rbx,%rax
  0x00007f8ab9111dc4: jmpq   *%r11
  0x00007f8ab9111dc7: mov    0x8(%rsi),%ebx
  0x00007f8ab9111dca: shl    $0x3,%rbx
  0x00007f8ab9111dce: cmp    0x10(%rax),%rbx
  0x00007f8ab9111dd2: mov    0x8(%rax),%rbx
  0x00007f8ab9111dd6: je     0x00007f8ab9111de1
  0x00007f8ab9111ddc: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111de1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9111de9: je     0x00007f8ab9111ee4
  0x00007f8ab9111def: jmpq   0x00007f8ab9105c40
  0x00007f8ab9111df4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9111dfc: je     0x00007f8ab9111ee4
  0x00007f8ab9111e02: mov    %rsp,%r13
  0x00007f8ab9111e05: mov    (%rsp),%rax
  0x00007f8ab9111e09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9111e0d: pushfq 
  0x00007f8ab9111e0e: sub    $0x8,%rsp
  0x00007f8ab9111e12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9111e17: sub    $0x80,%rsp
  0x00007f8ab9111e1e: mov    %rax,0x78(%rsp)
  0x00007f8ab9111e23: mov    %rcx,0x70(%rsp)
  0x00007f8ab9111e28: mov    %rdx,0x68(%rsp)
  0x00007f8ab9111e2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9111e32: mov    %rbp,0x50(%rsp)
  0x00007f8ab9111e37: mov    %rsi,0x48(%rsp)
  0x00007f8ab9111e3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9111e41: mov    %r8,0x38(%rsp)
  0x00007f8ab9111e46: mov    %r9,0x30(%rsp)
  0x00007f8ab9111e4b: mov    %r10,0x28(%rsp)
  0x00007f8ab9111e50: mov    %r11,0x20(%rsp)
  0x00007f8ab9111e55: mov    %r12,0x18(%rsp)
  0x00007f8ab9111e5a: mov    %r13,0x10(%rsp)
  0x00007f8ab9111e5f: mov    %r14,0x8(%rsp)
  0x00007f8ab9111e64: mov    %r15,(%rsp)
  0x00007f8ab9111e68: sub    $0x200,%rsp
  0x00007f8ab9111e6f: fxsave64 (%rsp)
  0x00007f8ab9111e74: mov    %rbx,%rdi
  0x00007f8ab9111e77: mov    %rax,%rsi
  0x00007f8ab9111e7a: callq  0x00007f8acef8bbca
  0x00007f8ab9111e7f: fxrstor64 (%rsp)
  0x00007f8ab9111e84: add    $0x200,%rsp
  0x00007f8ab9111e8b: mov    (%rsp),%r15
  0x00007f8ab9111e8f: mov    0x8(%rsp),%r14
  0x00007f8ab9111e94: mov    0x10(%rsp),%r13
  0x00007f8ab9111e99: mov    0x18(%rsp),%r12
  0x00007f8ab9111e9e: mov    0x20(%rsp),%r11
  0x00007f8ab9111ea3: mov    0x28(%rsp),%r10
  0x00007f8ab9111ea8: mov    0x30(%rsp),%r9
  0x00007f8ab9111ead: mov    0x38(%rsp),%r8
  0x00007f8ab9111eb2: mov    0x40(%rsp),%rdi
  0x00007f8ab9111eb7: mov    0x48(%rsp),%rsi
  0x00007f8ab9111ebc: mov    0x50(%rsp),%rbp
  0x00007f8ab9111ec1: mov    0x60(%rsp),%rbx
  0x00007f8ab9111ec6: mov    0x68(%rsp),%rdx
  0x00007f8ab9111ecb: mov    0x70(%rsp),%rcx
  0x00007f8ab9111ed0: mov    0x78(%rsp),%rax
  0x00007f8ab9111ed5: add    $0x80,%rsp
  0x00007f8ab9111edc: add    $0x8,%rsp
  0x00007f8ab9111ee0: popfq  
  0x00007f8ab9111ee1: mov    %r13,%rsp
  0x00007f8ab9111ee4: pop    %rax
  0x00007f8ab9111ee5: mov    %rsp,%r13
  0x00007f8ab9111ee8: sub    $0x10,%rsp
  0x00007f8ab9111eec: mov    %rax,(%rsp)
  0x00007f8ab9111ef0: mov    %rsi,0x8(%rsp)
  0x00007f8ab9111ef5: mov    0x40(%rbx),%rcx
  0x00007f8ab9111ef9: jmpq   *%rcx

AHE@0x00007f8ac80c3e48: 0xbbbbbb00 i2c: 0x00007f8ab9111fa0 c2i: 0x00007f8ab91120c8 c2iUV: 0x00007f8ab911209b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V (584 bytes generated)
c2i argument handler starts at 0x7f8ab91120c8
  0x00007f8ab9111fa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9111fa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9111fae: cmp    %r11,%rax
  0x00007f8ab9111fb1: jbe    0x00007f8ab9111fca
  0x00007f8ab9111fb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9111fc1: cmp    %r11,%rax
  0x00007f8ab9111fc4: jb     0x00007f8ab9112067
  0x00007f8ab9111fca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9111fd4: cmp    %r11,%rax
  0x00007f8ab9111fd7: jbe    0x00007f8ab9111ff0
  0x00007f8ab9111fdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9111fe7: cmp    %r11,%rax
  0x00007f8ab9111fea: jb     0x00007f8ab9112067
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9111ff0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9111ff5: sub    $0x80,%rsp
  0x00007f8ab9111ffc: mov    %rax,0x78(%rsp)
  0x00007f8ab9112001: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112006: mov    %rdx,0x68(%rsp)
  0x00007f8ab911200b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112010: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112015: mov    %rsi,0x48(%rsp)
  0x00007f8ab911201a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911201f: mov    %r8,0x38(%rsp)
  0x00007f8ab9112024: mov    %r9,0x30(%rsp)
  0x00007f8ab9112029: mov    %r10,0x28(%rsp)
  0x00007f8ab911202e: mov    %r11,0x20(%rsp)
  0x00007f8ab9112033: mov    %r12,0x18(%rsp)
  0x00007f8ab9112038: mov    %r13,0x10(%rsp)
  0x00007f8ab911203d: mov    %r14,0x8(%rsp)
  0x00007f8ab9112042: mov    %r15,(%rsp)
  0x00007f8ab9112046: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9112050: movabs $0x7f8ab9111ff0,%rsi
  0x00007f8ab911205a: mov    %rsp,%rdx
  0x00007f8ab911205d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112061: callq  0x00007f8aceddb9fa
  0x00007f8ab9112066: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9112067: mov    %rsp,%r11
  0x00007f8ab911206a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911206e: push   %rax
  0x00007f8ab911206f: mov    %r11,%rax
  0x00007f8ab9112072: mov    0x50(%rbx),%r11
  0x00007f8ab9112076: mov    0x30(%rax),%rsi
  0x00007f8ab911207a: mov    0x28(%rax),%rdx
  0x00007f8ab911207e: mov    0x20(%rax),%rcx
  0x00007f8ab9112082: mov    0x18(%rax),%r8
  0x00007f8ab9112086: mov    0x10(%rax),%r9
  0x00007f8ab911208a: mov    0x8(%rax),%rdi
  0x00007f8ab911208e: mov    %rbx,0x258(%r15)
  0x00007f8ab9112095: mov    %rbx,%rax
  0x00007f8ab9112098: jmpq   *%r11
  0x00007f8ab911209b: mov    0x8(%rsi),%ebx
  0x00007f8ab911209e: shl    $0x3,%rbx
  0x00007f8ab91120a2: cmp    0x10(%rax),%rbx
  0x00007f8ab91120a6: mov    0x8(%rax),%rbx
  0x00007f8ab91120aa: je     0x00007f8ab91120b5
  0x00007f8ab91120b0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91120b5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91120bd: je     0x00007f8ab91121b8
  0x00007f8ab91120c3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91120c8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91120d0: je     0x00007f8ab91121b8
  0x00007f8ab91120d6: mov    %rsp,%r13
  0x00007f8ab91120d9: mov    (%rsp),%rax
  0x00007f8ab91120dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91120e1: pushfq 
  0x00007f8ab91120e2: sub    $0x8,%rsp
  0x00007f8ab91120e6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91120eb: sub    $0x80,%rsp
  0x00007f8ab91120f2: mov    %rax,0x78(%rsp)
  0x00007f8ab91120f7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91120fc: mov    %rdx,0x68(%rsp)
  0x00007f8ab9112101: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112106: mov    %rbp,0x50(%rsp)
  0x00007f8ab911210b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9112110: mov    %rdi,0x40(%rsp)
  0x00007f8ab9112115: mov    %r8,0x38(%rsp)
  0x00007f8ab911211a: mov    %r9,0x30(%rsp)
  0x00007f8ab911211f: mov    %r10,0x28(%rsp)
  0x00007f8ab9112124: mov    %r11,0x20(%rsp)
  0x00007f8ab9112129: mov    %r12,0x18(%rsp)
  0x00007f8ab911212e: mov    %r13,0x10(%rsp)
  0x00007f8ab9112133: mov    %r14,0x8(%rsp)
  0x00007f8ab9112138: mov    %r15,(%rsp)
  0x00007f8ab911213c: sub    $0x200,%rsp
  0x00007f8ab9112143: fxsave64 (%rsp)
  0x00007f8ab9112148: mov    %rbx,%rdi
  0x00007f8ab911214b: mov    %rax,%rsi
  0x00007f8ab911214e: callq  0x00007f8acef8bbca
  0x00007f8ab9112153: fxrstor64 (%rsp)
  0x00007f8ab9112158: add    $0x200,%rsp
  0x00007f8ab911215f: mov    (%rsp),%r15
  0x00007f8ab9112163: mov    0x8(%rsp),%r14
  0x00007f8ab9112168: mov    0x10(%rsp),%r13
  0x00007f8ab911216d: mov    0x18(%rsp),%r12
  0x00007f8ab9112172: mov    0x20(%rsp),%r11
  0x00007f8ab9112177: mov    0x28(%rsp),%r10
  0x00007f8ab911217c: mov    0x30(%rsp),%r9
  0x00007f8ab9112181: mov    0x38(%rsp),%r8
  0x00007f8ab9112186: mov    0x40(%rsp),%rdi
  0x00007f8ab911218b: mov    0x48(%rsp),%rsi
  0x00007f8ab9112190: mov    0x50(%rsp),%rbp
  0x00007f8ab9112195: mov    0x60(%rsp),%rbx
  0x00007f8ab911219a: mov    0x68(%rsp),%rdx
  0x00007f8ab911219f: mov    0x70(%rsp),%rcx
  0x00007f8ab91121a4: mov    0x78(%rsp),%rax
  0x00007f8ab91121a9: add    $0x80,%rsp
  0x00007f8ab91121b0: add    $0x8,%rsp
  0x00007f8ab91121b4: popfq  
  0x00007f8ab91121b5: mov    %r13,%rsp
  0x00007f8ab91121b8: pop    %rax
  0x00007f8ab91121b9: mov    %rsp,%r13
  0x00007f8ab91121bc: sub    $0x40,%rsp
  0x00007f8ab91121c0: mov    %rax,(%rsp)
  0x00007f8ab91121c4: mov    %rsi,0x30(%rsp)
  0x00007f8ab91121c9: mov    %rdx,0x28(%rsp)
  0x00007f8ab91121ce: mov    %rcx,0x20(%rsp)
  0x00007f8ab91121d3: mov    %r8,0x18(%rsp)
  0x00007f8ab91121d8: mov    %r9,0x10(%rsp)
  0x00007f8ab91121dd: mov    %rdi,0x8(%rsp)
  0x00007f8ab91121e2: mov    0x40(%rbx),%rcx
  0x00007f8ab91121e6: jmpq   *%rcx

AHE@0x00007f8ac80c3e90: 0xb0000000 i2c: 0x00007f8ab91122a0 c2i: 0x00007f8ab91123b4 c2iUV: 0x00007f8ab9112387
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f8ab91123b4
  0x00007f8ab91122a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91122a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91122ae: cmp    %r11,%rax
  0x00007f8ab91122b1: jbe    0x00007f8ab91122ca
  0x00007f8ab91122b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91122c1: cmp    %r11,%rax
  0x00007f8ab91122c4: jb     0x00007f8ab9112367
  0x00007f8ab91122ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91122d4: cmp    %r11,%rax
  0x00007f8ab91122d7: jbe    0x00007f8ab91122f0
  0x00007f8ab91122dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91122e7: cmp    %r11,%rax
  0x00007f8ab91122ea: jb     0x00007f8ab9112367
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91122f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91122f5: sub    $0x80,%rsp
  0x00007f8ab91122fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9112301: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112306: mov    %rdx,0x68(%rsp)
  0x00007f8ab911230b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112310: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112315: mov    %rsi,0x48(%rsp)
  0x00007f8ab911231a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911231f: mov    %r8,0x38(%rsp)
  0x00007f8ab9112324: mov    %r9,0x30(%rsp)
  0x00007f8ab9112329: mov    %r10,0x28(%rsp)
  0x00007f8ab911232e: mov    %r11,0x20(%rsp)
  0x00007f8ab9112333: mov    %r12,0x18(%rsp)
  0x00007f8ab9112338: mov    %r13,0x10(%rsp)
  0x00007f8ab911233d: mov    %r14,0x8(%rsp)
  0x00007f8ab9112342: mov    %r15,(%rsp)
  0x00007f8ab9112346: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9112350: movabs $0x7f8ab91122f0,%rsi
  0x00007f8ab911235a: mov    %rsp,%rdx
  0x00007f8ab911235d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112361: callq  0x00007f8aceddb9fa
  0x00007f8ab9112366: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9112367: mov    %rsp,%r11
  0x00007f8ab911236a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911236e: push   %rax
  0x00007f8ab911236f: mov    %r11,%rax
  0x00007f8ab9112372: mov    0x50(%rbx),%r11
  0x00007f8ab9112376: mov    0x8(%rax),%rsi
  0x00007f8ab911237a: mov    %rbx,0x258(%r15)
  0x00007f8ab9112381: mov    %rbx,%rax
  0x00007f8ab9112384: jmpq   *%r11
  0x00007f8ab9112387: mov    0x8(%rsi),%ebx
  0x00007f8ab911238a: shl    $0x3,%rbx
  0x00007f8ab911238e: cmp    0x10(%rax),%rbx
  0x00007f8ab9112392: mov    0x8(%rax),%rbx
  0x00007f8ab9112396: je     0x00007f8ab91123a1
  0x00007f8ab911239c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91123a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91123a9: je     0x00007f8ab91124a4
  0x00007f8ab91123af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91123b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91123bc: je     0x00007f8ab91124a4
  0x00007f8ab91123c2: mov    %rsp,%r13
  0x00007f8ab91123c5: mov    (%rsp),%rax
  0x00007f8ab91123c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91123cd: pushfq 
  0x00007f8ab91123ce: sub    $0x8,%rsp
  0x00007f8ab91123d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91123d7: sub    $0x80,%rsp
  0x00007f8ab91123de: mov    %rax,0x78(%rsp)
  0x00007f8ab91123e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91123e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91123ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91123f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91123f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91123fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9112401: mov    %r8,0x38(%rsp)
  0x00007f8ab9112406: mov    %r9,0x30(%rsp)
  0x00007f8ab911240b: mov    %r10,0x28(%rsp)
  0x00007f8ab9112410: mov    %r11,0x20(%rsp)
  0x00007f8ab9112415: mov    %r12,0x18(%rsp)
  0x00007f8ab911241a: mov    %r13,0x10(%rsp)
  0x00007f8ab911241f: mov    %r14,0x8(%rsp)
  0x00007f8ab9112424: mov    %r15,(%rsp)
  0x00007f8ab9112428: sub    $0x200,%rsp
  0x00007f8ab911242f: fxsave64 (%rsp)
  0x00007f8ab9112434: mov    %rbx,%rdi
  0x00007f8ab9112437: mov    %rax,%rsi
  0x00007f8ab911243a: callq  0x00007f8acef8bbca
  0x00007f8ab911243f: fxrstor64 (%rsp)
  0x00007f8ab9112444: add    $0x200,%rsp
  0x00007f8ab911244b: mov    (%rsp),%r15
  0x00007f8ab911244f: mov    0x8(%rsp),%r14
  0x00007f8ab9112454: mov    0x10(%rsp),%r13
  0x00007f8ab9112459: mov    0x18(%rsp),%r12
  0x00007f8ab911245e: mov    0x20(%rsp),%r11
  0x00007f8ab9112463: mov    0x28(%rsp),%r10
  0x00007f8ab9112468: mov    0x30(%rsp),%r9
  0x00007f8ab911246d: mov    0x38(%rsp),%r8
  0x00007f8ab9112472: mov    0x40(%rsp),%rdi
  0x00007f8ab9112477: mov    0x48(%rsp),%rsi
  0x00007f8ab911247c: mov    0x50(%rsp),%rbp
  0x00007f8ab9112481: mov    0x60(%rsp),%rbx
  0x00007f8ab9112486: mov    0x68(%rsp),%rdx
  0x00007f8ab911248b: mov    0x70(%rsp),%rcx
  0x00007f8ab9112490: mov    0x78(%rsp),%rax
  0x00007f8ab9112495: add    $0x80,%rsp
  0x00007f8ab911249c: add    $0x8,%rsp
  0x00007f8ab91124a0: popfq  
  0x00007f8ab91124a1: mov    %r13,%rsp
  0x00007f8ab91124a4: pop    %rax
  0x00007f8ab91124a5: mov    %rsp,%r13
  0x00007f8ab91124a8: sub    $0x10,%rsp
  0x00007f8ab91124ac: mov    %rax,(%rsp)
  0x00007f8ab91124b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91124b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91124b9: jmpq   *%rcx

AHE@0x00007f8ac80c3ed8: 0xb0000000 i2c: 0x00007f8ab9112560 c2i: 0x00007f8ab9112674 c2iUV: 0x00007f8ab9112647
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9112674
  0x00007f8ab9112560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9112564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911256e: cmp    %r11,%rax
  0x00007f8ab9112571: jbe    0x00007f8ab911258a
  0x00007f8ab9112577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9112581: cmp    %r11,%rax
  0x00007f8ab9112584: jb     0x00007f8ab9112627
  0x00007f8ab911258a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9112594: cmp    %r11,%rax
  0x00007f8ab9112597: jbe    0x00007f8ab91125b0
  0x00007f8ab911259d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91125a7: cmp    %r11,%rax
  0x00007f8ab91125aa: jb     0x00007f8ab9112627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91125b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91125b5: sub    $0x80,%rsp
  0x00007f8ab91125bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91125c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91125c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91125cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91125d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91125d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91125da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91125df: mov    %r8,0x38(%rsp)
  0x00007f8ab91125e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91125e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91125ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91125f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91125f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91125fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9112602: mov    %r15,(%rsp)
  0x00007f8ab9112606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9112610: movabs $0x7f8ab91125b0,%rsi
  0x00007f8ab911261a: mov    %rsp,%rdx
  0x00007f8ab911261d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112621: callq  0x00007f8aceddb9fa
  0x00007f8ab9112626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9112627: mov    %rsp,%r11
  0x00007f8ab911262a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911262e: push   %rax
  0x00007f8ab911262f: mov    %r11,%rax
  0x00007f8ab9112632: mov    0x50(%rbx),%r11
  0x00007f8ab9112636: mov    0x8(%rax),%rsi
  0x00007f8ab911263a: mov    %rbx,0x258(%r15)
  0x00007f8ab9112641: mov    %rbx,%rax
  0x00007f8ab9112644: jmpq   *%r11
  0x00007f8ab9112647: mov    0x8(%rsi),%ebx
  0x00007f8ab911264a: shl    $0x3,%rbx
  0x00007f8ab911264e: cmp    0x10(%rax),%rbx
  0x00007f8ab9112652: mov    0x8(%rax),%rbx
  0x00007f8ab9112656: je     0x00007f8ab9112661
  0x00007f8ab911265c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112661: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9112669: je     0x00007f8ab9112764
  0x00007f8ab911266f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112674: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911267c: je     0x00007f8ab9112764
  0x00007f8ab9112682: mov    %rsp,%r13
  0x00007f8ab9112685: mov    (%rsp),%rax
  0x00007f8ab9112689: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911268d: pushfq 
  0x00007f8ab911268e: sub    $0x8,%rsp
  0x00007f8ab9112692: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9112697: sub    $0x80,%rsp
  0x00007f8ab911269e: mov    %rax,0x78(%rsp)
  0x00007f8ab91126a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91126a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91126ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab91126b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91126b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91126bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab91126c1: mov    %r8,0x38(%rsp)
  0x00007f8ab91126c6: mov    %r9,0x30(%rsp)
  0x00007f8ab91126cb: mov    %r10,0x28(%rsp)
  0x00007f8ab91126d0: mov    %r11,0x20(%rsp)
  0x00007f8ab91126d5: mov    %r12,0x18(%rsp)
  0x00007f8ab91126da: mov    %r13,0x10(%rsp)
  0x00007f8ab91126df: mov    %r14,0x8(%rsp)
  0x00007f8ab91126e4: mov    %r15,(%rsp)
  0x00007f8ab91126e8: sub    $0x200,%rsp
  0x00007f8ab91126ef: fxsave64 (%rsp)
  0x00007f8ab91126f4: mov    %rbx,%rdi
  0x00007f8ab91126f7: mov    %rax,%rsi
  0x00007f8ab91126fa: callq  0x00007f8acef8bbca
  0x00007f8ab91126ff: fxrstor64 (%rsp)
  0x00007f8ab9112704: add    $0x200,%rsp
  0x00007f8ab911270b: mov    (%rsp),%r15
  0x00007f8ab911270f: mov    0x8(%rsp),%r14
  0x00007f8ab9112714: mov    0x10(%rsp),%r13
  0x00007f8ab9112719: mov    0x18(%rsp),%r12
  0x00007f8ab911271e: mov    0x20(%rsp),%r11
  0x00007f8ab9112723: mov    0x28(%rsp),%r10
  0x00007f8ab9112728: mov    0x30(%rsp),%r9
  0x00007f8ab911272d: mov    0x38(%rsp),%r8
  0x00007f8ab9112732: mov    0x40(%rsp),%rdi
  0x00007f8ab9112737: mov    0x48(%rsp),%rsi
  0x00007f8ab911273c: mov    0x50(%rsp),%rbp
  0x00007f8ab9112741: mov    0x60(%rsp),%rbx
  0x00007f8ab9112746: mov    0x68(%rsp),%rdx
  0x00007f8ab911274b: mov    0x70(%rsp),%rcx
  0x00007f8ab9112750: mov    0x78(%rsp),%rax
  0x00007f8ab9112755: add    $0x80,%rsp
  0x00007f8ab911275c: add    $0x8,%rsp
  0x00007f8ab9112760: popfq  
  0x00007f8ab9112761: mov    %r13,%rsp
  0x00007f8ab9112764: pop    %rax
  0x00007f8ab9112765: mov    %rsp,%r13
  0x00007f8ab9112768: sub    $0x10,%rsp
  0x00007f8ab911276c: mov    %rax,(%rsp)
  0x00007f8ab9112770: mov    %rsi,0x8(%rsp)
  0x00007f8ab9112775: mov    0x40(%rbx),%rcx
  0x00007f8ab9112779: jmpq   *%rcx

AHE@0x00007f8ac80c3f20: 0xb0000000 i2c: 0x00007f8ab9112820 c2i: 0x00007f8ab9112934 c2iUV: 0x00007f8ab9112907
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9112934
  0x00007f8ab9112820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9112824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911282e: cmp    %r11,%rax
  0x00007f8ab9112831: jbe    0x00007f8ab911284a
  0x00007f8ab9112837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9112841: cmp    %r11,%rax
  0x00007f8ab9112844: jb     0x00007f8ab91128e7
  0x00007f8ab911284a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9112854: cmp    %r11,%rax
  0x00007f8ab9112857: jbe    0x00007f8ab9112870
  0x00007f8ab911285d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9112867: cmp    %r11,%rax
  0x00007f8ab911286a: jb     0x00007f8ab91128e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9112870: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9112875: sub    $0x80,%rsp
  0x00007f8ab911287c: mov    %rax,0x78(%rsp)
  0x00007f8ab9112881: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112886: mov    %rdx,0x68(%rsp)
  0x00007f8ab911288b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112890: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112895: mov    %rsi,0x48(%rsp)
  0x00007f8ab911289a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911289f: mov    %r8,0x38(%rsp)
  0x00007f8ab91128a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91128a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91128ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91128b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91128b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91128bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91128c2: mov    %r15,(%rsp)
  0x00007f8ab91128c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91128d0: movabs $0x7f8ab9112870,%rsi
  0x00007f8ab91128da: mov    %rsp,%rdx
  0x00007f8ab91128dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91128e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91128e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91128e7: mov    %rsp,%r11
  0x00007f8ab91128ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91128ee: push   %rax
  0x00007f8ab91128ef: mov    %r11,%rax
  0x00007f8ab91128f2: mov    0x50(%rbx),%r11
  0x00007f8ab91128f6: mov    0x8(%rax),%rsi
  0x00007f8ab91128fa: mov    %rbx,0x258(%r15)
  0x00007f8ab9112901: mov    %rbx,%rax
  0x00007f8ab9112904: jmpq   *%r11
  0x00007f8ab9112907: mov    0x8(%rsi),%ebx
  0x00007f8ab911290a: shl    $0x3,%rbx
  0x00007f8ab911290e: cmp    0x10(%rax),%rbx
  0x00007f8ab9112912: mov    0x8(%rax),%rbx
  0x00007f8ab9112916: je     0x00007f8ab9112921
  0x00007f8ab911291c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112921: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9112929: je     0x00007f8ab9112a24
  0x00007f8ab911292f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112934: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911293c: je     0x00007f8ab9112a24
  0x00007f8ab9112942: mov    %rsp,%r13
  0x00007f8ab9112945: mov    (%rsp),%rax
  0x00007f8ab9112949: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911294d: pushfq 
  0x00007f8ab911294e: sub    $0x8,%rsp
  0x00007f8ab9112952: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9112957: sub    $0x80,%rsp
  0x00007f8ab911295e: mov    %rax,0x78(%rsp)
  0x00007f8ab9112963: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112968: mov    %rdx,0x68(%rsp)
  0x00007f8ab911296d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112972: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112977: mov    %rsi,0x48(%rsp)
  0x00007f8ab911297c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9112981: mov    %r8,0x38(%rsp)
  0x00007f8ab9112986: mov    %r9,0x30(%rsp)
  0x00007f8ab911298b: mov    %r10,0x28(%rsp)
  0x00007f8ab9112990: mov    %r11,0x20(%rsp)
  0x00007f8ab9112995: mov    %r12,0x18(%rsp)
  0x00007f8ab911299a: mov    %r13,0x10(%rsp)
  0x00007f8ab911299f: mov    %r14,0x8(%rsp)
  0x00007f8ab91129a4: mov    %r15,(%rsp)
  0x00007f8ab91129a8: sub    $0x200,%rsp
  0x00007f8ab91129af: fxsave64 (%rsp)
  0x00007f8ab91129b4: mov    %rbx,%rdi
  0x00007f8ab91129b7: mov    %rax,%rsi
  0x00007f8ab91129ba: callq  0x00007f8acef8bbca
  0x00007f8ab91129bf: fxrstor64 (%rsp)
  0x00007f8ab91129c4: add    $0x200,%rsp
  0x00007f8ab91129cb: mov    (%rsp),%r15
  0x00007f8ab91129cf: mov    0x8(%rsp),%r14
  0x00007f8ab91129d4: mov    0x10(%rsp),%r13
  0x00007f8ab91129d9: mov    0x18(%rsp),%r12
  0x00007f8ab91129de: mov    0x20(%rsp),%r11
  0x00007f8ab91129e3: mov    0x28(%rsp),%r10
  0x00007f8ab91129e8: mov    0x30(%rsp),%r9
  0x00007f8ab91129ed: mov    0x38(%rsp),%r8
  0x00007f8ab91129f2: mov    0x40(%rsp),%rdi
  0x00007f8ab91129f7: mov    0x48(%rsp),%rsi
  0x00007f8ab91129fc: mov    0x50(%rsp),%rbp
  0x00007f8ab9112a01: mov    0x60(%rsp),%rbx
  0x00007f8ab9112a06: mov    0x68(%rsp),%rdx
  0x00007f8ab9112a0b: mov    0x70(%rsp),%rcx
  0x00007f8ab9112a10: mov    0x78(%rsp),%rax
  0x00007f8ab9112a15: add    $0x80,%rsp
  0x00007f8ab9112a1c: add    $0x8,%rsp
  0x00007f8ab9112a20: popfq  
  0x00007f8ab9112a21: mov    %r13,%rsp
  0x00007f8ab9112a24: pop    %rax
  0x00007f8ab9112a25: mov    %rsp,%r13
  0x00007f8ab9112a28: sub    $0x10,%rsp
  0x00007f8ab9112a2c: mov    %rax,(%rsp)
  0x00007f8ab9112a30: mov    %rsi,0x8(%rsp)
  0x00007f8ab9112a35: mov    0x40(%rbx),%rcx
  0x00007f8ab9112a39: jmpq   *%rcx

AHE@0x00007f8ac80c3f68: 0xbb000000 i2c: 0x00007f8ab9112ae0 c2i: 0x00007f8ab9112bf8 c2iUV: 0x00007f8ab9112bcb
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)Ljava/lang/Throwable; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9112bf8
  0x00007f8ab9112ae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9112ae4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9112aee: cmp    %r11,%rax
  0x00007f8ab9112af1: jbe    0x00007f8ab9112b0a
  0x00007f8ab9112af7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9112b01: cmp    %r11,%rax
  0x00007f8ab9112b04: jb     0x00007f8ab9112ba7
  0x00007f8ab9112b0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9112b14: cmp    %r11,%rax
  0x00007f8ab9112b17: jbe    0x00007f8ab9112b30
  0x00007f8ab9112b1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9112b27: cmp    %r11,%rax
  0x00007f8ab9112b2a: jb     0x00007f8ab9112ba7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9112b30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9112b35: sub    $0x80,%rsp
  0x00007f8ab9112b3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9112b41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112b46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9112b4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112b50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112b55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9112b5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9112b5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9112b64: mov    %r9,0x30(%rsp)
  0x00007f8ab9112b69: mov    %r10,0x28(%rsp)
  0x00007f8ab9112b6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9112b73: mov    %r12,0x18(%rsp)
  0x00007f8ab9112b78: mov    %r13,0x10(%rsp)
  0x00007f8ab9112b7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9112b82: mov    %r15,(%rsp)
  0x00007f8ab9112b86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9112b90: movabs $0x7f8ab9112b30,%rsi
  0x00007f8ab9112b9a: mov    %rsp,%rdx
  0x00007f8ab9112b9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112ba1: callq  0x00007f8aceddb9fa
  0x00007f8ab9112ba6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9112ba7: mov    %rsp,%r11
  0x00007f8ab9112baa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112bae: push   %rax
  0x00007f8ab9112baf: mov    %r11,%rax
  0x00007f8ab9112bb2: mov    0x50(%rbx),%r11
  0x00007f8ab9112bb6: mov    0x10(%rax),%rsi
  0x00007f8ab9112bba: mov    0x8(%rax),%rdx
  0x00007f8ab9112bbe: mov    %rbx,0x258(%r15)
  0x00007f8ab9112bc5: mov    %rbx,%rax
  0x00007f8ab9112bc8: jmpq   *%r11
  0x00007f8ab9112bcb: mov    0x8(%rsi),%ebx
  0x00007f8ab9112bce: shl    $0x3,%rbx
  0x00007f8ab9112bd2: cmp    0x10(%rax),%rbx
  0x00007f8ab9112bd6: mov    0x8(%rax),%rbx
  0x00007f8ab9112bda: je     0x00007f8ab9112be5
  0x00007f8ab9112be0: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112be5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9112bed: je     0x00007f8ab9112ce8
  0x00007f8ab9112bf3: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112bf8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9112c00: je     0x00007f8ab9112ce8
  0x00007f8ab9112c06: mov    %rsp,%r13
  0x00007f8ab9112c09: mov    (%rsp),%rax
  0x00007f8ab9112c0d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112c11: pushfq 
  0x00007f8ab9112c12: sub    $0x8,%rsp
  0x00007f8ab9112c16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9112c1b: sub    $0x80,%rsp
  0x00007f8ab9112c22: mov    %rax,0x78(%rsp)
  0x00007f8ab9112c27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112c2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9112c31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112c36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112c3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9112c40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9112c45: mov    %r8,0x38(%rsp)
  0x00007f8ab9112c4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9112c4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9112c54: mov    %r11,0x20(%rsp)
  0x00007f8ab9112c59: mov    %r12,0x18(%rsp)
  0x00007f8ab9112c5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9112c63: mov    %r14,0x8(%rsp)
  0x00007f8ab9112c68: mov    %r15,(%rsp)
  0x00007f8ab9112c6c: sub    $0x200,%rsp
  0x00007f8ab9112c73: fxsave64 (%rsp)
  0x00007f8ab9112c78: mov    %rbx,%rdi
  0x00007f8ab9112c7b: mov    %rax,%rsi
  0x00007f8ab9112c7e: callq  0x00007f8acef8bbca
  0x00007f8ab9112c83: fxrstor64 (%rsp)
  0x00007f8ab9112c88: add    $0x200,%rsp
  0x00007f8ab9112c8f: mov    (%rsp),%r15
  0x00007f8ab9112c93: mov    0x8(%rsp),%r14
  0x00007f8ab9112c98: mov    0x10(%rsp),%r13
  0x00007f8ab9112c9d: mov    0x18(%rsp),%r12
  0x00007f8ab9112ca2: mov    0x20(%rsp),%r11
  0x00007f8ab9112ca7: mov    0x28(%rsp),%r10
  0x00007f8ab9112cac: mov    0x30(%rsp),%r9
  0x00007f8ab9112cb1: mov    0x38(%rsp),%r8
  0x00007f8ab9112cb6: mov    0x40(%rsp),%rdi
  0x00007f8ab9112cbb: mov    0x48(%rsp),%rsi
  0x00007f8ab9112cc0: mov    0x50(%rsp),%rbp
  0x00007f8ab9112cc5: mov    0x60(%rsp),%rbx
  0x00007f8ab9112cca: mov    0x68(%rsp),%rdx
  0x00007f8ab9112ccf: mov    0x70(%rsp),%rcx
  0x00007f8ab9112cd4: mov    0x78(%rsp),%rax
  0x00007f8ab9112cd9: add    $0x80,%rsp
  0x00007f8ab9112ce0: add    $0x8,%rsp
  0x00007f8ab9112ce4: popfq  
  0x00007f8ab9112ce5: mov    %r13,%rsp
  0x00007f8ab9112ce8: pop    %rax
  0x00007f8ab9112ce9: mov    %rsp,%r13
  0x00007f8ab9112cec: sub    $0x20,%rsp
  0x00007f8ab9112cf0: mov    %rax,(%rsp)
  0x00007f8ab9112cf4: mov    %rsi,0x10(%rsp)
  0x00007f8ab9112cf9: mov    %rdx,0x8(%rsp)
  0x00007f8ab9112cfe: mov    0x40(%rbx),%rcx
  0x00007f8ab9112d02: jmpq   *%rcx

AHE@0x00007f8ac80c3fb0: 0xb0000000 i2c: 0x00007f8ab9112de0 c2i: 0x00007f8ab9112ef4 c2iUV: 0x00007f8ab9112ec7
i2c argument handler #0 for: receiver ()Ljava/lang/Throwable; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9112ef4
  0x00007f8ab9112de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9112de4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9112dee: cmp    %r11,%rax
  0x00007f8ab9112df1: jbe    0x00007f8ab9112e0a
  0x00007f8ab9112df7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9112e01: cmp    %r11,%rax
  0x00007f8ab9112e04: jb     0x00007f8ab9112ea7
  0x00007f8ab9112e0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9112e14: cmp    %r11,%rax
  0x00007f8ab9112e17: jbe    0x00007f8ab9112e30
  0x00007f8ab9112e1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9112e27: cmp    %r11,%rax
  0x00007f8ab9112e2a: jb     0x00007f8ab9112ea7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9112e30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9112e35: sub    $0x80,%rsp
  0x00007f8ab9112e3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9112e41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112e46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9112e4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112e50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112e55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9112e5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9112e5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9112e64: mov    %r9,0x30(%rsp)
  0x00007f8ab9112e69: mov    %r10,0x28(%rsp)
  0x00007f8ab9112e6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9112e73: mov    %r12,0x18(%rsp)
  0x00007f8ab9112e78: mov    %r13,0x10(%rsp)
  0x00007f8ab9112e7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9112e82: mov    %r15,(%rsp)
  0x00007f8ab9112e86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9112e90: movabs $0x7f8ab9112e30,%rsi
  0x00007f8ab9112e9a: mov    %rsp,%rdx
  0x00007f8ab9112e9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112ea1: callq  0x00007f8aceddb9fa
  0x00007f8ab9112ea6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9112ea7: mov    %rsp,%r11
  0x00007f8ab9112eaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112eae: push   %rax
  0x00007f8ab9112eaf: mov    %r11,%rax
  0x00007f8ab9112eb2: mov    0x50(%rbx),%r11
  0x00007f8ab9112eb6: mov    0x8(%rax),%rsi
  0x00007f8ab9112eba: mov    %rbx,0x258(%r15)
  0x00007f8ab9112ec1: mov    %rbx,%rax
  0x00007f8ab9112ec4: jmpq   *%r11
  0x00007f8ab9112ec7: mov    0x8(%rsi),%ebx
  0x00007f8ab9112eca: shl    $0x3,%rbx
  0x00007f8ab9112ece: cmp    0x10(%rax),%rbx
  0x00007f8ab9112ed2: mov    0x8(%rax),%rbx
  0x00007f8ab9112ed6: je     0x00007f8ab9112ee1
  0x00007f8ab9112edc: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112ee1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9112ee9: je     0x00007f8ab9112fe4
  0x00007f8ab9112eef: jmpq   0x00007f8ab9105c40
  0x00007f8ab9112ef4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9112efc: je     0x00007f8ab9112fe4
  0x00007f8ab9112f02: mov    %rsp,%r13
  0x00007f8ab9112f05: mov    (%rsp),%rax
  0x00007f8ab9112f09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9112f0d: pushfq 
  0x00007f8ab9112f0e: sub    $0x8,%rsp
  0x00007f8ab9112f12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9112f17: sub    $0x80,%rsp
  0x00007f8ab9112f1e: mov    %rax,0x78(%rsp)
  0x00007f8ab9112f23: mov    %rcx,0x70(%rsp)
  0x00007f8ab9112f28: mov    %rdx,0x68(%rsp)
  0x00007f8ab9112f2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9112f32: mov    %rbp,0x50(%rsp)
  0x00007f8ab9112f37: mov    %rsi,0x48(%rsp)
  0x00007f8ab9112f3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9112f41: mov    %r8,0x38(%rsp)
  0x00007f8ab9112f46: mov    %r9,0x30(%rsp)
  0x00007f8ab9112f4b: mov    %r10,0x28(%rsp)
  0x00007f8ab9112f50: mov    %r11,0x20(%rsp)
  0x00007f8ab9112f55: mov    %r12,0x18(%rsp)
  0x00007f8ab9112f5a: mov    %r13,0x10(%rsp)
  0x00007f8ab9112f5f: mov    %r14,0x8(%rsp)
  0x00007f8ab9112f64: mov    %r15,(%rsp)
  0x00007f8ab9112f68: sub    $0x200,%rsp
  0x00007f8ab9112f6f: fxsave64 (%rsp)
  0x00007f8ab9112f74: mov    %rbx,%rdi
  0x00007f8ab9112f77: mov    %rax,%rsi
  0x00007f8ab9112f7a: callq  0x00007f8acef8bbca
  0x00007f8ab9112f7f: fxrstor64 (%rsp)
  0x00007f8ab9112f84: add    $0x200,%rsp
  0x00007f8ab9112f8b: mov    (%rsp),%r15
  0x00007f8ab9112f8f: mov    0x8(%rsp),%r14
  0x00007f8ab9112f94: mov    0x10(%rsp),%r13
  0x00007f8ab9112f99: mov    0x18(%rsp),%r12
  0x00007f8ab9112f9e: mov    0x20(%rsp),%r11
  0x00007f8ab9112fa3: mov    0x28(%rsp),%r10
  0x00007f8ab9112fa8: mov    0x30(%rsp),%r9
  0x00007f8ab9112fad: mov    0x38(%rsp),%r8
  0x00007f8ab9112fb2: mov    0x40(%rsp),%rdi
  0x00007f8ab9112fb7: mov    0x48(%rsp),%rsi
  0x00007f8ab9112fbc: mov    0x50(%rsp),%rbp
  0x00007f8ab9112fc1: mov    0x60(%rsp),%rbx
  0x00007f8ab9112fc6: mov    0x68(%rsp),%rdx
  0x00007f8ab9112fcb: mov    0x70(%rsp),%rcx
  0x00007f8ab9112fd0: mov    0x78(%rsp),%rax
  0x00007f8ab9112fd5: add    $0x80,%rsp
  0x00007f8ab9112fdc: add    $0x8,%rsp
  0x00007f8ab9112fe0: popfq  
  0x00007f8ab9112fe1: mov    %r13,%rsp
  0x00007f8ab9112fe4: pop    %rax
  0x00007f8ab9112fe5: mov    %rsp,%r13
  0x00007f8ab9112fe8: sub    $0x10,%rsp
  0x00007f8ab9112fec: mov    %rax,(%rsp)
  0x00007f8ab9112ff0: mov    %rsi,0x8(%rsp)
  0x00007f8ab9112ff5: mov    0x40(%rbx),%rcx
  0x00007f8ab9112ff9: jmpq   *%rcx

AHE@0x00007f8ac80c3ff8: 0xba000000 i2c: 0x00007f8ab91130a0 c2i: 0x00007f8ab91131b7 c2iUV: 0x00007f8ab911318a
i2c argument handler #0 for: receiver (I)Ljava/lang/Throwable; (546 bytes generated)
c2i argument handler starts at 0x7f8ab91131b7
  0x00007f8ab91130a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91130a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91130ae: cmp    %r11,%rax
  0x00007f8ab91130b1: jbe    0x00007f8ab91130ca
  0x00007f8ab91130b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91130c1: cmp    %r11,%rax
  0x00007f8ab91130c4: jb     0x00007f8ab9113167
  0x00007f8ab91130ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91130d4: cmp    %r11,%rax
  0x00007f8ab91130d7: jbe    0x00007f8ab91130f0
  0x00007f8ab91130dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91130e7: cmp    %r11,%rax
  0x00007f8ab91130ea: jb     0x00007f8ab9113167
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91130f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91130f5: sub    $0x80,%rsp
  0x00007f8ab91130fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9113101: mov    %rcx,0x70(%rsp)
  0x00007f8ab9113106: mov    %rdx,0x68(%rsp)
  0x00007f8ab911310b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9113110: mov    %rbp,0x50(%rsp)
  0x00007f8ab9113115: mov    %rsi,0x48(%rsp)
  0x00007f8ab911311a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911311f: mov    %r8,0x38(%rsp)
  0x00007f8ab9113124: mov    %r9,0x30(%rsp)
  0x00007f8ab9113129: mov    %r10,0x28(%rsp)
  0x00007f8ab911312e: mov    %r11,0x20(%rsp)
  0x00007f8ab9113133: mov    %r12,0x18(%rsp)
  0x00007f8ab9113138: mov    %r13,0x10(%rsp)
  0x00007f8ab911313d: mov    %r14,0x8(%rsp)
  0x00007f8ab9113142: mov    %r15,(%rsp)
  0x00007f8ab9113146: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9113150: movabs $0x7f8ab91130f0,%rsi
  0x00007f8ab911315a: mov    %rsp,%rdx
  0x00007f8ab911315d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113161: callq  0x00007f8aceddb9fa
  0x00007f8ab9113166: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9113167: mov    %rsp,%r11
  0x00007f8ab911316a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911316e: push   %rax
  0x00007f8ab911316f: mov    %r11,%rax
  0x00007f8ab9113172: mov    0x50(%rbx),%r11
  0x00007f8ab9113176: mov    0x10(%rax),%rsi
  0x00007f8ab911317a: mov    0x8(%rax),%edx
  0x00007f8ab911317d: mov    %rbx,0x258(%r15)
  0x00007f8ab9113184: mov    %rbx,%rax
  0x00007f8ab9113187: jmpq   *%r11
  0x00007f8ab911318a: mov    0x8(%rsi),%ebx
  0x00007f8ab911318d: shl    $0x3,%rbx
  0x00007f8ab9113191: cmp    0x10(%rax),%rbx
  0x00007f8ab9113195: mov    0x8(%rax),%rbx
  0x00007f8ab9113199: je     0x00007f8ab91131a4
  0x00007f8ab911319f: jmpq   0x00007f8ab9105c40
  0x00007f8ab91131a4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91131ac: je     0x00007f8ab91132a7
  0x00007f8ab91131b2: jmpq   0x00007f8ab9105c40
  0x00007f8ab91131b7: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91131bf: je     0x00007f8ab91132a7
  0x00007f8ab91131c5: mov    %rsp,%r13
  0x00007f8ab91131c8: mov    (%rsp),%rax
  0x00007f8ab91131cc: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91131d0: pushfq 
  0x00007f8ab91131d1: sub    $0x8,%rsp
  0x00007f8ab91131d5: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91131da: sub    $0x80,%rsp
  0x00007f8ab91131e1: mov    %rax,0x78(%rsp)
  0x00007f8ab91131e6: mov    %rcx,0x70(%rsp)
  0x00007f8ab91131eb: mov    %rdx,0x68(%rsp)
  0x00007f8ab91131f0: mov    %rbx,0x60(%rsp)
  0x00007f8ab91131f5: mov    %rbp,0x50(%rsp)
  0x00007f8ab91131fa: mov    %rsi,0x48(%rsp)
  0x00007f8ab91131ff: mov    %rdi,0x40(%rsp)
  0x00007f8ab9113204: mov    %r8,0x38(%rsp)
  0x00007f8ab9113209: mov    %r9,0x30(%rsp)
  0x00007f8ab911320e: mov    %r10,0x28(%rsp)
  0x00007f8ab9113213: mov    %r11,0x20(%rsp)
  0x00007f8ab9113218: mov    %r12,0x18(%rsp)
  0x00007f8ab911321d: mov    %r13,0x10(%rsp)
  0x00007f8ab9113222: mov    %r14,0x8(%rsp)
  0x00007f8ab9113227: mov    %r15,(%rsp)
  0x00007f8ab911322b: sub    $0x200,%rsp
  0x00007f8ab9113232: fxsave64 (%rsp)
  0x00007f8ab9113237: mov    %rbx,%rdi
  0x00007f8ab911323a: mov    %rax,%rsi
  0x00007f8ab911323d: callq  0x00007f8acef8bbca
  0x00007f8ab9113242: fxrstor64 (%rsp)
  0x00007f8ab9113247: add    $0x200,%rsp
  0x00007f8ab911324e: mov    (%rsp),%r15
  0x00007f8ab9113252: mov    0x8(%rsp),%r14
  0x00007f8ab9113257: mov    0x10(%rsp),%r13
  0x00007f8ab911325c: mov    0x18(%rsp),%r12
  0x00007f8ab9113261: mov    0x20(%rsp),%r11
  0x00007f8ab9113266: mov    0x28(%rsp),%r10
  0x00007f8ab911326b: mov    0x30(%rsp),%r9
  0x00007f8ab9113270: mov    0x38(%rsp),%r8
  0x00007f8ab9113275: mov    0x40(%rsp),%rdi
  0x00007f8ab911327a: mov    0x48(%rsp),%rsi
  0x00007f8ab911327f: mov    0x50(%rsp),%rbp
  0x00007f8ab9113284: mov    0x60(%rsp),%rbx
  0x00007f8ab9113289: mov    0x68(%rsp),%rdx
  0x00007f8ab911328e: mov    0x70(%rsp),%rcx
  0x00007f8ab9113293: mov    0x78(%rsp),%rax
  0x00007f8ab9113298: add    $0x80,%rsp
  0x00007f8ab911329f: add    $0x8,%rsp
  0x00007f8ab91132a3: popfq  
  0x00007f8ab91132a4: mov    %r13,%rsp
  0x00007f8ab91132a7: pop    %rax
  0x00007f8ab91132a8: mov    %rsp,%r13
  0x00007f8ab91132ab: sub    $0x20,%rsp
  0x00007f8ab91132af: mov    %rax,(%rsp)
  0x00007f8ab91132b3: mov    %rsi,0x10(%rsp)
  0x00007f8ab91132b8: mov    %edx,0x8(%rsp)
  0x00007f8ab91132bc: mov    0x40(%rbx),%rcx
  0x00007f8ab91132c0: jmpq   *%rcx

AHE@0x00007f8ac80c4040: 0xb0000000 i2c: 0x00007f8ab91133a0 c2i: 0x00007f8ab91134b4 c2iUV: 0x00007f8ab9113487
i2c argument handler #0 for: receiver ()Ljava/lang/Throwable; (539 bytes generated)
c2i argument handler starts at 0x7f8ab91134b4
  0x00007f8ab91133a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91133a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91133ae: cmp    %r11,%rax
  0x00007f8ab91133b1: jbe    0x00007f8ab91133ca
  0x00007f8ab91133b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91133c1: cmp    %r11,%rax
  0x00007f8ab91133c4: jb     0x00007f8ab9113467
  0x00007f8ab91133ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91133d4: cmp    %r11,%rax
  0x00007f8ab91133d7: jbe    0x00007f8ab91133f0
  0x00007f8ab91133dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91133e7: cmp    %r11,%rax
  0x00007f8ab91133ea: jb     0x00007f8ab9113467
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91133f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91133f5: sub    $0x80,%rsp
  0x00007f8ab91133fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9113401: mov    %rcx,0x70(%rsp)
  0x00007f8ab9113406: mov    %rdx,0x68(%rsp)
  0x00007f8ab911340b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9113410: mov    %rbp,0x50(%rsp)
  0x00007f8ab9113415: mov    %rsi,0x48(%rsp)
  0x00007f8ab911341a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911341f: mov    %r8,0x38(%rsp)
  0x00007f8ab9113424: mov    %r9,0x30(%rsp)
  0x00007f8ab9113429: mov    %r10,0x28(%rsp)
  0x00007f8ab911342e: mov    %r11,0x20(%rsp)
  0x00007f8ab9113433: mov    %r12,0x18(%rsp)
  0x00007f8ab9113438: mov    %r13,0x10(%rsp)
  0x00007f8ab911343d: mov    %r14,0x8(%rsp)
  0x00007f8ab9113442: mov    %r15,(%rsp)
  0x00007f8ab9113446: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9113450: movabs $0x7f8ab91133f0,%rsi
  0x00007f8ab911345a: mov    %rsp,%rdx
  0x00007f8ab911345d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113461: callq  0x00007f8aceddb9fa
  0x00007f8ab9113466: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9113467: mov    %rsp,%r11
  0x00007f8ab911346a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911346e: push   %rax
  0x00007f8ab911346f: mov    %r11,%rax
  0x00007f8ab9113472: mov    0x50(%rbx),%r11
  0x00007f8ab9113476: mov    0x8(%rax),%rsi
  0x00007f8ab911347a: mov    %rbx,0x258(%r15)
  0x00007f8ab9113481: mov    %rbx,%rax
  0x00007f8ab9113484: jmpq   *%r11
  0x00007f8ab9113487: mov    0x8(%rsi),%ebx
  0x00007f8ab911348a: shl    $0x3,%rbx
  0x00007f8ab911348e: cmp    0x10(%rax),%rbx
  0x00007f8ab9113492: mov    0x8(%rax),%rbx
  0x00007f8ab9113496: je     0x00007f8ab91134a1
  0x00007f8ab911349c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91134a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91134a9: je     0x00007f8ab91135a4
  0x00007f8ab91134af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91134b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91134bc: je     0x00007f8ab91135a4
  0x00007f8ab91134c2: mov    %rsp,%r13
  0x00007f8ab91134c5: mov    (%rsp),%rax
  0x00007f8ab91134c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91134cd: pushfq 
  0x00007f8ab91134ce: sub    $0x8,%rsp
  0x00007f8ab91134d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91134d7: sub    $0x80,%rsp
  0x00007f8ab91134de: mov    %rax,0x78(%rsp)
  0x00007f8ab91134e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91134e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91134ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91134f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91134f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91134fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9113501: mov    %r8,0x38(%rsp)
  0x00007f8ab9113506: mov    %r9,0x30(%rsp)
  0x00007f8ab911350b: mov    %r10,0x28(%rsp)
  0x00007f8ab9113510: mov    %r11,0x20(%rsp)
  0x00007f8ab9113515: mov    %r12,0x18(%rsp)
  0x00007f8ab911351a: mov    %r13,0x10(%rsp)
  0x00007f8ab911351f: mov    %r14,0x8(%rsp)
  0x00007f8ab9113524: mov    %r15,(%rsp)
  0x00007f8ab9113528: sub    $0x200,%rsp
  0x00007f8ab911352f: fxsave64 (%rsp)
  0x00007f8ab9113534: mov    %rbx,%rdi
  0x00007f8ab9113537: mov    %rax,%rsi
  0x00007f8ab911353a: callq  0x00007f8acef8bbca
  0x00007f8ab911353f: fxrstor64 (%rsp)
  0x00007f8ab9113544: add    $0x200,%rsp
  0x00007f8ab911354b: mov    (%rsp),%r15
  0x00007f8ab911354f: mov    0x8(%rsp),%r14
  0x00007f8ab9113554: mov    0x10(%rsp),%r13
  0x00007f8ab9113559: mov    0x18(%rsp),%r12
  0x00007f8ab911355e: mov    0x20(%rsp),%r11
  0x00007f8ab9113563: mov    0x28(%rsp),%r10
  0x00007f8ab9113568: mov    0x30(%rsp),%r9
  0x00007f8ab911356d: mov    0x38(%rsp),%r8
  0x00007f8ab9113572: mov    0x40(%rsp),%rdi
  0x00007f8ab9113577: mov    0x48(%rsp),%rsi
  0x00007f8ab911357c: mov    0x50(%rsp),%rbp
  0x00007f8ab9113581: mov    0x60(%rsp),%rbx
  0x00007f8ab9113586: mov    0x68(%rsp),%rdx
  0x00007f8ab911358b: mov    0x70(%rsp),%rcx
  0x00007f8ab9113590: mov    0x78(%rsp),%rax
  0x00007f8ab9113595: add    $0x80,%rsp
  0x00007f8ab911359c: add    $0x8,%rsp
  0x00007f8ab91135a0: popfq  
  0x00007f8ab91135a1: mov    %r13,%rsp
  0x00007f8ab91135a4: pop    %rax
  0x00007f8ab91135a5: mov    %rsp,%r13
  0x00007f8ab91135a8: sub    $0x10,%rsp
  0x00007f8ab91135ac: mov    %rax,(%rsp)
  0x00007f8ab91135b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91135b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91135b9: jmpq   *%rcx

AHE@0x00007f8ac80c4088: 0xbb000000 i2c: 0x00007f8ab9113660 c2i: 0x00007f8ab9113778 c2iUV: 0x00007f8ab911374b
i2c argument handler #0 for: receiver (Ljava/io/PrintWriter;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9113778
  0x00007f8ab9113660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9113664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911366e: cmp    %r11,%rax
  0x00007f8ab9113671: jbe    0x00007f8ab911368a
  0x00007f8ab9113677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9113681: cmp    %r11,%rax
  0x00007f8ab9113684: jb     0x00007f8ab9113727
  0x00007f8ab911368a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9113694: cmp    %r11,%rax
  0x00007f8ab9113697: jbe    0x00007f8ab91136b0
  0x00007f8ab911369d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91136a7: cmp    %r11,%rax
  0x00007f8ab91136aa: jb     0x00007f8ab9113727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91136b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91136b5: sub    $0x80,%rsp
  0x00007f8ab91136bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91136c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91136c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91136cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91136d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91136d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91136da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91136df: mov    %r8,0x38(%rsp)
  0x00007f8ab91136e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91136e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91136ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91136f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91136f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91136fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9113702: mov    %r15,(%rsp)
  0x00007f8ab9113706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9113710: movabs $0x7f8ab91136b0,%rsi
  0x00007f8ab911371a: mov    %rsp,%rdx
  0x00007f8ab911371d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113721: callq  0x00007f8aceddb9fa
  0x00007f8ab9113726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9113727: mov    %rsp,%r11
  0x00007f8ab911372a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911372e: push   %rax
  0x00007f8ab911372f: mov    %r11,%rax
  0x00007f8ab9113732: mov    0x50(%rbx),%r11
  0x00007f8ab9113736: mov    0x10(%rax),%rsi
  0x00007f8ab911373a: mov    0x8(%rax),%rdx
  0x00007f8ab911373e: mov    %rbx,0x258(%r15)
  0x00007f8ab9113745: mov    %rbx,%rax
  0x00007f8ab9113748: jmpq   *%r11
  0x00007f8ab911374b: mov    0x8(%rsi),%ebx
  0x00007f8ab911374e: shl    $0x3,%rbx
  0x00007f8ab9113752: cmp    0x10(%rax),%rbx
  0x00007f8ab9113756: mov    0x8(%rax),%rbx
  0x00007f8ab911375a: je     0x00007f8ab9113765
  0x00007f8ab9113760: jmpq   0x00007f8ab9105c40
  0x00007f8ab9113765: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911376d: je     0x00007f8ab9113868
  0x00007f8ab9113773: jmpq   0x00007f8ab9105c40
  0x00007f8ab9113778: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9113780: je     0x00007f8ab9113868
  0x00007f8ab9113786: mov    %rsp,%r13
  0x00007f8ab9113789: mov    (%rsp),%rax
  0x00007f8ab911378d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113791: pushfq 
  0x00007f8ab9113792: sub    $0x8,%rsp
  0x00007f8ab9113796: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911379b: sub    $0x80,%rsp
  0x00007f8ab91137a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91137a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91137ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91137b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91137b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91137bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91137c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91137c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91137ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91137cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91137d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91137d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91137de: mov    %r13,0x10(%rsp)
  0x00007f8ab91137e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91137e8: mov    %r15,(%rsp)
  0x00007f8ab91137ec: sub    $0x200,%rsp
  0x00007f8ab91137f3: fxsave64 (%rsp)
  0x00007f8ab91137f8: mov    %rbx,%rdi
  0x00007f8ab91137fb: mov    %rax,%rsi
  0x00007f8ab91137fe: callq  0x00007f8acef8bbca
  0x00007f8ab9113803: fxrstor64 (%rsp)
  0x00007f8ab9113808: add    $0x200,%rsp
  0x00007f8ab911380f: mov    (%rsp),%r15
  0x00007f8ab9113813: mov    0x8(%rsp),%r14
  0x00007f8ab9113818: mov    0x10(%rsp),%r13
  0x00007f8ab911381d: mov    0x18(%rsp),%r12
  0x00007f8ab9113822: mov    0x20(%rsp),%r11
  0x00007f8ab9113827: mov    0x28(%rsp),%r10
  0x00007f8ab911382c: mov    0x30(%rsp),%r9
  0x00007f8ab9113831: mov    0x38(%rsp),%r8
  0x00007f8ab9113836: mov    0x40(%rsp),%rdi
  0x00007f8ab911383b: mov    0x48(%rsp),%rsi
  0x00007f8ab9113840: mov    0x50(%rsp),%rbp
  0x00007f8ab9113845: mov    0x60(%rsp),%rbx
  0x00007f8ab911384a: mov    0x68(%rsp),%rdx
  0x00007f8ab911384f: mov    0x70(%rsp),%rcx
  0x00007f8ab9113854: mov    0x78(%rsp),%rax
  0x00007f8ab9113859: add    $0x80,%rsp
  0x00007f8ab9113860: add    $0x8,%rsp
  0x00007f8ab9113864: popfq  
  0x00007f8ab9113865: mov    %r13,%rsp
  0x00007f8ab9113868: pop    %rax
  0x00007f8ab9113869: mov    %rsp,%r13
  0x00007f8ab911386c: sub    $0x20,%rsp
  0x00007f8ab9113870: mov    %rax,(%rsp)
  0x00007f8ab9113874: mov    %rsi,0x10(%rsp)
  0x00007f8ab9113879: mov    %rdx,0x8(%rsp)
  0x00007f8ab911387e: mov    0x40(%rbx),%rcx
  0x00007f8ab9113882: jmpq   *%rcx

AHE@0x00007f8ac80c40d0: 0xb0000000 i2c: 0x00007f8ab9113960 c2i: 0x00007f8ab9113a74 c2iUV: 0x00007f8ab9113a47
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab9113a74
  0x00007f8ab9113960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9113964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911396e: cmp    %r11,%rax
  0x00007f8ab9113971: jbe    0x00007f8ab911398a
  0x00007f8ab9113977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9113981: cmp    %r11,%rax
  0x00007f8ab9113984: jb     0x00007f8ab9113a27
  0x00007f8ab911398a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9113994: cmp    %r11,%rax
  0x00007f8ab9113997: jbe    0x00007f8ab91139b0
  0x00007f8ab911399d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91139a7: cmp    %r11,%rax
  0x00007f8ab91139aa: jb     0x00007f8ab9113a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91139b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91139b5: sub    $0x80,%rsp
  0x00007f8ab91139bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91139c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91139c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91139cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91139d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91139d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91139da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91139df: mov    %r8,0x38(%rsp)
  0x00007f8ab91139e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91139e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91139ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91139f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91139f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91139fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9113a02: mov    %r15,(%rsp)
  0x00007f8ab9113a06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9113a10: movabs $0x7f8ab91139b0,%rsi
  0x00007f8ab9113a1a: mov    %rsp,%rdx
  0x00007f8ab9113a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113a21: callq  0x00007f8aceddb9fa
  0x00007f8ab9113a26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9113a27: mov    %rsp,%r11
  0x00007f8ab9113a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113a2e: push   %rax
  0x00007f8ab9113a2f: mov    %r11,%rax
  0x00007f8ab9113a32: mov    0x50(%rbx),%r11
  0x00007f8ab9113a36: mov    0x8(%rax),%rsi
  0x00007f8ab9113a3a: mov    %rbx,0x258(%r15)
  0x00007f8ab9113a41: mov    %rbx,%rax
  0x00007f8ab9113a44: jmpq   *%r11
  0x00007f8ab9113a47: mov    0x8(%rsi),%ebx
  0x00007f8ab9113a4a: shl    $0x3,%rbx
  0x00007f8ab9113a4e: cmp    0x10(%rax),%rbx
  0x00007f8ab9113a52: mov    0x8(%rax),%rbx
  0x00007f8ab9113a56: je     0x00007f8ab9113a61
  0x00007f8ab9113a5c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9113a61: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9113a69: je     0x00007f8ab9113b64
  0x00007f8ab9113a6f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9113a74: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9113a7c: je     0x00007f8ab9113b64
  0x00007f8ab9113a82: mov    %rsp,%r13
  0x00007f8ab9113a85: mov    (%rsp),%rax
  0x00007f8ab9113a89: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113a8d: pushfq 
  0x00007f8ab9113a8e: sub    $0x8,%rsp
  0x00007f8ab9113a92: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9113a97: sub    $0x80,%rsp
  0x00007f8ab9113a9e: mov    %rax,0x78(%rsp)
  0x00007f8ab9113aa3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9113aa8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9113aad: mov    %rbx,0x60(%rsp)
  0x00007f8ab9113ab2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9113ab7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9113abc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9113ac1: mov    %r8,0x38(%rsp)
  0x00007f8ab9113ac6: mov    %r9,0x30(%rsp)
  0x00007f8ab9113acb: mov    %r10,0x28(%rsp)
  0x00007f8ab9113ad0: mov    %r11,0x20(%rsp)
  0x00007f8ab9113ad5: mov    %r12,0x18(%rsp)
  0x00007f8ab9113ada: mov    %r13,0x10(%rsp)
  0x00007f8ab9113adf: mov    %r14,0x8(%rsp)
  0x00007f8ab9113ae4: mov    %r15,(%rsp)
  0x00007f8ab9113ae8: sub    $0x200,%rsp
  0x00007f8ab9113aef: fxsave64 (%rsp)
  0x00007f8ab9113af4: mov    %rbx,%rdi
  0x00007f8ab9113af7: mov    %rax,%rsi
  0x00007f8ab9113afa: callq  0x00007f8acef8bbca
  0x00007f8ab9113aff: fxrstor64 (%rsp)
  0x00007f8ab9113b04: add    $0x200,%rsp
  0x00007f8ab9113b0b: mov    (%rsp),%r15
  0x00007f8ab9113b0f: mov    0x8(%rsp),%r14
  0x00007f8ab9113b14: mov    0x10(%rsp),%r13
  0x00007f8ab9113b19: mov    0x18(%rsp),%r12
  0x00007f8ab9113b1e: mov    0x20(%rsp),%r11
  0x00007f8ab9113b23: mov    0x28(%rsp),%r10
  0x00007f8ab9113b28: mov    0x30(%rsp),%r9
  0x00007f8ab9113b2d: mov    0x38(%rsp),%r8
  0x00007f8ab9113b32: mov    0x40(%rsp),%rdi
  0x00007f8ab9113b37: mov    0x48(%rsp),%rsi
  0x00007f8ab9113b3c: mov    0x50(%rsp),%rbp
  0x00007f8ab9113b41: mov    0x60(%rsp),%rbx
  0x00007f8ab9113b46: mov    0x68(%rsp),%rdx
  0x00007f8ab9113b4b: mov    0x70(%rsp),%rcx
  0x00007f8ab9113b50: mov    0x78(%rsp),%rax
  0x00007f8ab9113b55: add    $0x80,%rsp
  0x00007f8ab9113b5c: add    $0x8,%rsp
  0x00007f8ab9113b60: popfq  
  0x00007f8ab9113b61: mov    %r13,%rsp
  0x00007f8ab9113b64: pop    %rax
  0x00007f8ab9113b65: mov    %rsp,%r13
  0x00007f8ab9113b68: sub    $0x10,%rsp
  0x00007f8ab9113b6c: mov    %rax,(%rsp)
  0x00007f8ab9113b70: mov    %rsi,0x8(%rsp)
  0x00007f8ab9113b75: mov    0x40(%rbx),%rcx
  0x00007f8ab9113b79: jmpq   *%rcx

AHE@0x00007f8ac80c4118: 0xbb000000 i2c: 0x00007f8ab9113c20 c2i: 0x00007f8ab9113d38 c2iUV: 0x00007f8ab9113d0b
i2c argument handler #0 for: receiver (Ljava/io/PrintStream;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9113d38
  0x00007f8ab9113c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9113c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9113c2e: cmp    %r11,%rax
  0x00007f8ab9113c31: jbe    0x00007f8ab9113c4a
  0x00007f8ab9113c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9113c41: cmp    %r11,%rax
  0x00007f8ab9113c44: jb     0x00007f8ab9113ce7
  0x00007f8ab9113c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9113c54: cmp    %r11,%rax
  0x00007f8ab9113c57: jbe    0x00007f8ab9113c70
  0x00007f8ab9113c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9113c67: cmp    %r11,%rax
  0x00007f8ab9113c6a: jb     0x00007f8ab9113ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9113c70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9113c75: sub    $0x80,%rsp
  0x00007f8ab9113c7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9113c81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9113c86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9113c8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9113c90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9113c95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9113c9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9113c9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9113ca4: mov    %r9,0x30(%rsp)
  0x00007f8ab9113ca9: mov    %r10,0x28(%rsp)
  0x00007f8ab9113cae: mov    %r11,0x20(%rsp)
  0x00007f8ab9113cb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9113cb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9113cbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9113cc2: mov    %r15,(%rsp)
  0x00007f8ab9113cc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9113cd0: movabs $0x7f8ab9113c70,%rsi
  0x00007f8ab9113cda: mov    %rsp,%rdx
  0x00007f8ab9113cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113ce1: callq  0x00007f8aceddb9fa
  0x00007f8ab9113ce6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9113ce7: mov    %rsp,%r11
  0x00007f8ab9113cea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113cee: push   %rax
  0x00007f8ab9113cef: mov    %r11,%rax
  0x00007f8ab9113cf2: mov    0x50(%rbx),%r11
  0x00007f8ab9113cf6: mov    0x10(%rax),%rsi
  0x00007f8ab9113cfa: mov    0x8(%rax),%rdx
  0x00007f8ab9113cfe: mov    %rbx,0x258(%r15)
  0x00007f8ab9113d05: mov    %rbx,%rax
  0x00007f8ab9113d08: jmpq   *%r11
  0x00007f8ab9113d0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9113d0e: shl    $0x3,%rbx
  0x00007f8ab9113d12: cmp    0x10(%rax),%rbx
  0x00007f8ab9113d16: mov    0x8(%rax),%rbx
  0x00007f8ab9113d1a: je     0x00007f8ab9113d25
  0x00007f8ab9113d20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9113d25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9113d2d: je     0x00007f8ab9113e28
  0x00007f8ab9113d33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9113d38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9113d40: je     0x00007f8ab9113e28
  0x00007f8ab9113d46: mov    %rsp,%r13
  0x00007f8ab9113d49: mov    (%rsp),%rax
  0x00007f8ab9113d4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113d51: pushfq 
  0x00007f8ab9113d52: sub    $0x8,%rsp
  0x00007f8ab9113d56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9113d5b: sub    $0x80,%rsp
  0x00007f8ab9113d62: mov    %rax,0x78(%rsp)
  0x00007f8ab9113d67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9113d6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9113d71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9113d76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9113d7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9113d80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9113d85: mov    %r8,0x38(%rsp)
  0x00007f8ab9113d8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9113d8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9113d94: mov    %r11,0x20(%rsp)
  0x00007f8ab9113d99: mov    %r12,0x18(%rsp)
  0x00007f8ab9113d9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9113da3: mov    %r14,0x8(%rsp)
  0x00007f8ab9113da8: mov    %r15,(%rsp)
  0x00007f8ab9113dac: sub    $0x200,%rsp
  0x00007f8ab9113db3: fxsave64 (%rsp)
  0x00007f8ab9113db8: mov    %rbx,%rdi
  0x00007f8ab9113dbb: mov    %rax,%rsi
  0x00007f8ab9113dbe: callq  0x00007f8acef8bbca
  0x00007f8ab9113dc3: fxrstor64 (%rsp)
  0x00007f8ab9113dc8: add    $0x200,%rsp
  0x00007f8ab9113dcf: mov    (%rsp),%r15
  0x00007f8ab9113dd3: mov    0x8(%rsp),%r14
  0x00007f8ab9113dd8: mov    0x10(%rsp),%r13
  0x00007f8ab9113ddd: mov    0x18(%rsp),%r12
  0x00007f8ab9113de2: mov    0x20(%rsp),%r11
  0x00007f8ab9113de7: mov    0x28(%rsp),%r10
  0x00007f8ab9113dec: mov    0x30(%rsp),%r9
  0x00007f8ab9113df1: mov    0x38(%rsp),%r8
  0x00007f8ab9113df6: mov    0x40(%rsp),%rdi
  0x00007f8ab9113dfb: mov    0x48(%rsp),%rsi
  0x00007f8ab9113e00: mov    0x50(%rsp),%rbp
  0x00007f8ab9113e05: mov    0x60(%rsp),%rbx
  0x00007f8ab9113e0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9113e0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9113e14: mov    0x78(%rsp),%rax
  0x00007f8ab9113e19: add    $0x80,%rsp
  0x00007f8ab9113e20: add    $0x8,%rsp
  0x00007f8ab9113e24: popfq  
  0x00007f8ab9113e25: mov    %r13,%rsp
  0x00007f8ab9113e28: pop    %rax
  0x00007f8ab9113e29: mov    %rsp,%r13
  0x00007f8ab9113e2c: sub    $0x20,%rsp
  0x00007f8ab9113e30: mov    %rax,(%rsp)
  0x00007f8ab9113e34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9113e39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9113e3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9113e42: jmpq   *%rcx

AHE@0x00007f8ac80c4160: 0xbb000000 i2c: 0x00007f8ab9113f20 c2i: 0x00007f8ab9114038 c2iUV: 0x00007f8ab911400b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable$PrintStreamOrWriter;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9114038
  0x00007f8ab9113f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9113f24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9113f2e: cmp    %r11,%rax
  0x00007f8ab9113f31: jbe    0x00007f8ab9113f4a
  0x00007f8ab9113f37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9113f41: cmp    %r11,%rax
  0x00007f8ab9113f44: jb     0x00007f8ab9113fe7
  0x00007f8ab9113f4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9113f54: cmp    %r11,%rax
  0x00007f8ab9113f57: jbe    0x00007f8ab9113f70
  0x00007f8ab9113f5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9113f67: cmp    %r11,%rax
  0x00007f8ab9113f6a: jb     0x00007f8ab9113fe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9113f70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9113f75: sub    $0x80,%rsp
  0x00007f8ab9113f7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9113f81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9113f86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9113f8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9113f90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9113f95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9113f9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9113f9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9113fa4: mov    %r9,0x30(%rsp)
  0x00007f8ab9113fa9: mov    %r10,0x28(%rsp)
  0x00007f8ab9113fae: mov    %r11,0x20(%rsp)
  0x00007f8ab9113fb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9113fb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9113fbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9113fc2: mov    %r15,(%rsp)
  0x00007f8ab9113fc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9113fd0: movabs $0x7f8ab9113f70,%rsi
  0x00007f8ab9113fda: mov    %rsp,%rdx
  0x00007f8ab9113fdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113fe1: callq  0x00007f8aceddb9fa
  0x00007f8ab9113fe6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9113fe7: mov    %rsp,%r11
  0x00007f8ab9113fea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9113fee: push   %rax
  0x00007f8ab9113fef: mov    %r11,%rax
  0x00007f8ab9113ff2: mov    0x50(%rbx),%r11
  0x00007f8ab9113ff6: mov    0x10(%rax),%rsi
  0x00007f8ab9113ffa: mov    0x8(%rax),%rdx
  0x00007f8ab9113ffe: mov    %rbx,0x258(%r15)
  0x00007f8ab9114005: mov    %rbx,%rax
  0x00007f8ab9114008: jmpq   *%r11
  0x00007f8ab911400b: mov    0x8(%rsi),%ebx
  0x00007f8ab911400e: shl    $0x3,%rbx
  0x00007f8ab9114012: cmp    0x10(%rax),%rbx
  0x00007f8ab9114016: mov    0x8(%rax),%rbx
  0x00007f8ab911401a: je     0x00007f8ab9114025
  0x00007f8ab9114020: jmpq   0x00007f8ab9105c40
  0x00007f8ab9114025: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911402d: je     0x00007f8ab9114128
  0x00007f8ab9114033: jmpq   0x00007f8ab9105c40
  0x00007f8ab9114038: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9114040: je     0x00007f8ab9114128
  0x00007f8ab9114046: mov    %rsp,%r13
  0x00007f8ab9114049: mov    (%rsp),%rax
  0x00007f8ab911404d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114051: pushfq 
  0x00007f8ab9114052: sub    $0x8,%rsp
  0x00007f8ab9114056: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911405b: sub    $0x80,%rsp
  0x00007f8ab9114062: mov    %rax,0x78(%rsp)
  0x00007f8ab9114067: mov    %rcx,0x70(%rsp)
  0x00007f8ab911406c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9114071: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114076: mov    %rbp,0x50(%rsp)
  0x00007f8ab911407b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9114080: mov    %rdi,0x40(%rsp)
  0x00007f8ab9114085: mov    %r8,0x38(%rsp)
  0x00007f8ab911408a: mov    %r9,0x30(%rsp)
  0x00007f8ab911408f: mov    %r10,0x28(%rsp)
  0x00007f8ab9114094: mov    %r11,0x20(%rsp)
  0x00007f8ab9114099: mov    %r12,0x18(%rsp)
  0x00007f8ab911409e: mov    %r13,0x10(%rsp)
  0x00007f8ab91140a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91140a8: mov    %r15,(%rsp)
  0x00007f8ab91140ac: sub    $0x200,%rsp
  0x00007f8ab91140b3: fxsave64 (%rsp)
  0x00007f8ab91140b8: mov    %rbx,%rdi
  0x00007f8ab91140bb: mov    %rax,%rsi
  0x00007f8ab91140be: callq  0x00007f8acef8bbca
  0x00007f8ab91140c3: fxrstor64 (%rsp)
  0x00007f8ab91140c8: add    $0x200,%rsp
  0x00007f8ab91140cf: mov    (%rsp),%r15
  0x00007f8ab91140d3: mov    0x8(%rsp),%r14
  0x00007f8ab91140d8: mov    0x10(%rsp),%r13
  0x00007f8ab91140dd: mov    0x18(%rsp),%r12
  0x00007f8ab91140e2: mov    0x20(%rsp),%r11
  0x00007f8ab91140e7: mov    0x28(%rsp),%r10
  0x00007f8ab91140ec: mov    0x30(%rsp),%r9
  0x00007f8ab91140f1: mov    0x38(%rsp),%r8
  0x00007f8ab91140f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91140fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9114100: mov    0x50(%rsp),%rbp
  0x00007f8ab9114105: mov    0x60(%rsp),%rbx
  0x00007f8ab911410a: mov    0x68(%rsp),%rdx
  0x00007f8ab911410f: mov    0x70(%rsp),%rcx
  0x00007f8ab9114114: mov    0x78(%rsp),%rax
  0x00007f8ab9114119: add    $0x80,%rsp
  0x00007f8ab9114120: add    $0x8,%rsp
  0x00007f8ab9114124: popfq  
  0x00007f8ab9114125: mov    %r13,%rsp
  0x00007f8ab9114128: pop    %rax
  0x00007f8ab9114129: mov    %rsp,%r13
  0x00007f8ab911412c: sub    $0x20,%rsp
  0x00007f8ab9114130: mov    %rax,(%rsp)
  0x00007f8ab9114134: mov    %rsi,0x10(%rsp)
  0x00007f8ab9114139: mov    %rdx,0x8(%rsp)
  0x00007f8ab911413e: mov    0x40(%rbx),%rcx
  0x00007f8ab9114142: jmpq   *%rcx

AHE@0x00007f8ac80c41a8: 0x i2c: 0x00007f8ab9114220 c2i: 0x00007f8ab9114330 c2iUV: 0x00007f8ab9114303
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab9114330
  0x00007f8ab9114220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9114224: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911422e: cmp    %r11,%rax
  0x00007f8ab9114231: jbe    0x00007f8ab911424a
  0x00007f8ab9114237: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9114241: cmp    %r11,%rax
  0x00007f8ab9114244: jb     0x00007f8ab91142e7
  0x00007f8ab911424a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9114254: cmp    %r11,%rax
  0x00007f8ab9114257: jbe    0x00007f8ab9114270
  0x00007f8ab911425d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9114267: cmp    %r11,%rax
  0x00007f8ab911426a: jb     0x00007f8ab91142e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9114270: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114275: sub    $0x80,%rsp
  0x00007f8ab911427c: mov    %rax,0x78(%rsp)
  0x00007f8ab9114281: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114286: mov    %rdx,0x68(%rsp)
  0x00007f8ab911428b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114290: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114295: mov    %rsi,0x48(%rsp)
  0x00007f8ab911429a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911429f: mov    %r8,0x38(%rsp)
  0x00007f8ab91142a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91142a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91142ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91142b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91142b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91142bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91142c2: mov    %r15,(%rsp)
  0x00007f8ab91142c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91142d0: movabs $0x7f8ab9114270,%rsi
  0x00007f8ab91142da: mov    %rsp,%rdx
  0x00007f8ab91142dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91142e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91142e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91142e7: mov    %rsp,%r11
  0x00007f8ab91142ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91142ee: push   %rax
  0x00007f8ab91142ef: mov    %r11,%rax
  0x00007f8ab91142f2: mov    0x50(%rbx),%r11
  0x00007f8ab91142f6: mov    %rbx,0x258(%r15)
  0x00007f8ab91142fd: mov    %rbx,%rax
  0x00007f8ab9114300: jmpq   *%r11
  0x00007f8ab9114303: mov    0x8(%rsi),%ebx
  0x00007f8ab9114306: shl    $0x3,%rbx
  0x00007f8ab911430a: cmp    0x10(%rax),%rbx
  0x00007f8ab911430e: mov    0x8(%rax),%rbx
  0x00007f8ab9114312: je     0x00007f8ab911431d
  0x00007f8ab9114318: jmpq   0x00007f8ab9105c40
  0x00007f8ab911431d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9114325: je     0x00007f8ab9114420
  0x00007f8ab911432b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9114330: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9114338: je     0x00007f8ab9114420
  0x00007f8ab911433e: mov    %rsp,%r13
  0x00007f8ab9114341: mov    (%rsp),%rax
  0x00007f8ab9114345: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114349: pushfq 
  0x00007f8ab911434a: sub    $0x8,%rsp
  0x00007f8ab911434e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114353: sub    $0x80,%rsp
  0x00007f8ab911435a: mov    %rax,0x78(%rsp)
  0x00007f8ab911435f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114364: mov    %rdx,0x68(%rsp)
  0x00007f8ab9114369: mov    %rbx,0x60(%rsp)
  0x00007f8ab911436e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114373: mov    %rsi,0x48(%rsp)
  0x00007f8ab9114378: mov    %rdi,0x40(%rsp)
  0x00007f8ab911437d: mov    %r8,0x38(%rsp)
  0x00007f8ab9114382: mov    %r9,0x30(%rsp)
  0x00007f8ab9114387: mov    %r10,0x28(%rsp)
  0x00007f8ab911438c: mov    %r11,0x20(%rsp)
  0x00007f8ab9114391: mov    %r12,0x18(%rsp)
  0x00007f8ab9114396: mov    %r13,0x10(%rsp)
  0x00007f8ab911439b: mov    %r14,0x8(%rsp)
  0x00007f8ab91143a0: mov    %r15,(%rsp)
  0x00007f8ab91143a4: sub    $0x200,%rsp
  0x00007f8ab91143ab: fxsave64 (%rsp)
  0x00007f8ab91143b0: mov    %rbx,%rdi
  0x00007f8ab91143b3: mov    %rax,%rsi
  0x00007f8ab91143b6: callq  0x00007f8acef8bbca
  0x00007f8ab91143bb: fxrstor64 (%rsp)
  0x00007f8ab91143c0: add    $0x200,%rsp
  0x00007f8ab91143c7: mov    (%rsp),%r15
  0x00007f8ab91143cb: mov    0x8(%rsp),%r14
  0x00007f8ab91143d0: mov    0x10(%rsp),%r13
  0x00007f8ab91143d5: mov    0x18(%rsp),%r12
  0x00007f8ab91143da: mov    0x20(%rsp),%r11
  0x00007f8ab91143df: mov    0x28(%rsp),%r10
  0x00007f8ab91143e4: mov    0x30(%rsp),%r9
  0x00007f8ab91143e9: mov    0x38(%rsp),%r8
  0x00007f8ab91143ee: mov    0x40(%rsp),%rdi
  0x00007f8ab91143f3: mov    0x48(%rsp),%rsi
  0x00007f8ab91143f8: mov    0x50(%rsp),%rbp
  0x00007f8ab91143fd: mov    0x60(%rsp),%rbx
  0x00007f8ab9114402: mov    0x68(%rsp),%rdx
  0x00007f8ab9114407: mov    0x70(%rsp),%rcx
  0x00007f8ab911440c: mov    0x78(%rsp),%rax
  0x00007f8ab9114411: add    $0x80,%rsp
  0x00007f8ab9114418: add    $0x8,%rsp
  0x00007f8ab911441c: popfq  
  0x00007f8ab911441d: mov    %r13,%rsp
  0x00007f8ab9114420: pop    %rax
  0x00007f8ab9114421: mov    %rsp,%r13
  0x00007f8ab9114424: sub    $0x10,%rsp
  0x00007f8ab9114428: mov    %rax,(%rsp)
  0x00007f8ab911442c: mov    0x40(%rbx),%rcx
  0x00007f8ab9114430: jmpq   *%rcx

AHE@0x00007f8ac80c41f0: 0xb0000000 i2c: 0x00007f8ab91144e0 c2i: 0x00007f8ab91145f4 c2iUV: 0x00007f8ab91145c7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab91145f4
  0x00007f8ab91144e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91144e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91144ee: cmp    %r11,%rax
  0x00007f8ab91144f1: jbe    0x00007f8ab911450a
  0x00007f8ab91144f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9114501: cmp    %r11,%rax
  0x00007f8ab9114504: jb     0x00007f8ab91145a7
  0x00007f8ab911450a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9114514: cmp    %r11,%rax
  0x00007f8ab9114517: jbe    0x00007f8ab9114530
  0x00007f8ab911451d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9114527: cmp    %r11,%rax
  0x00007f8ab911452a: jb     0x00007f8ab91145a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9114530: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114535: sub    $0x80,%rsp
  0x00007f8ab911453c: mov    %rax,0x78(%rsp)
  0x00007f8ab9114541: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114546: mov    %rdx,0x68(%rsp)
  0x00007f8ab911454b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114550: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114555: mov    %rsi,0x48(%rsp)
  0x00007f8ab911455a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911455f: mov    %r8,0x38(%rsp)
  0x00007f8ab9114564: mov    %r9,0x30(%rsp)
  0x00007f8ab9114569: mov    %r10,0x28(%rsp)
  0x00007f8ab911456e: mov    %r11,0x20(%rsp)
  0x00007f8ab9114573: mov    %r12,0x18(%rsp)
  0x00007f8ab9114578: mov    %r13,0x10(%rsp)
  0x00007f8ab911457d: mov    %r14,0x8(%rsp)
  0x00007f8ab9114582: mov    %r15,(%rsp)
  0x00007f8ab9114586: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9114590: movabs $0x7f8ab9114530,%rsi
  0x00007f8ab911459a: mov    %rsp,%rdx
  0x00007f8ab911459d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91145a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91145a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91145a7: mov    %rsp,%r11
  0x00007f8ab91145aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91145ae: push   %rax
  0x00007f8ab91145af: mov    %r11,%rax
  0x00007f8ab91145b2: mov    0x50(%rbx),%r11
  0x00007f8ab91145b6: mov    0x8(%rax),%rsi
  0x00007f8ab91145ba: mov    %rbx,0x258(%r15)
  0x00007f8ab91145c1: mov    %rbx,%rax
  0x00007f8ab91145c4: jmpq   *%r11
  0x00007f8ab91145c7: mov    0x8(%rsi),%ebx
  0x00007f8ab91145ca: shl    $0x3,%rbx
  0x00007f8ab91145ce: cmp    0x10(%rax),%rbx
  0x00007f8ab91145d2: mov    0x8(%rax),%rbx
  0x00007f8ab91145d6: je     0x00007f8ab91145e1
  0x00007f8ab91145dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab91145e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91145e9: je     0x00007f8ab91146e4
  0x00007f8ab91145ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab91145f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91145fc: je     0x00007f8ab91146e4
  0x00007f8ab9114602: mov    %rsp,%r13
  0x00007f8ab9114605: mov    (%rsp),%rax
  0x00007f8ab9114609: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911460d: pushfq 
  0x00007f8ab911460e: sub    $0x8,%rsp
  0x00007f8ab9114612: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114617: sub    $0x80,%rsp
  0x00007f8ab911461e: mov    %rax,0x78(%rsp)
  0x00007f8ab9114623: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114628: mov    %rdx,0x68(%rsp)
  0x00007f8ab911462d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114632: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114637: mov    %rsi,0x48(%rsp)
  0x00007f8ab911463c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9114641: mov    %r8,0x38(%rsp)
  0x00007f8ab9114646: mov    %r9,0x30(%rsp)
  0x00007f8ab911464b: mov    %r10,0x28(%rsp)
  0x00007f8ab9114650: mov    %r11,0x20(%rsp)
  0x00007f8ab9114655: mov    %r12,0x18(%rsp)
  0x00007f8ab911465a: mov    %r13,0x10(%rsp)
  0x00007f8ab911465f: mov    %r14,0x8(%rsp)
  0x00007f8ab9114664: mov    %r15,(%rsp)
  0x00007f8ab9114668: sub    $0x200,%rsp
  0x00007f8ab911466f: fxsave64 (%rsp)
  0x00007f8ab9114674: mov    %rbx,%rdi
  0x00007f8ab9114677: mov    %rax,%rsi
  0x00007f8ab911467a: callq  0x00007f8acef8bbca
  0x00007f8ab911467f: fxrstor64 (%rsp)
  0x00007f8ab9114684: add    $0x200,%rsp
  0x00007f8ab911468b: mov    (%rsp),%r15
  0x00007f8ab911468f: mov    0x8(%rsp),%r14
  0x00007f8ab9114694: mov    0x10(%rsp),%r13
  0x00007f8ab9114699: mov    0x18(%rsp),%r12
  0x00007f8ab911469e: mov    0x20(%rsp),%r11
  0x00007f8ab91146a3: mov    0x28(%rsp),%r10
  0x00007f8ab91146a8: mov    0x30(%rsp),%r9
  0x00007f8ab91146ad: mov    0x38(%rsp),%r8
  0x00007f8ab91146b2: mov    0x40(%rsp),%rdi
  0x00007f8ab91146b7: mov    0x48(%rsp),%rsi
  0x00007f8ab91146bc: mov    0x50(%rsp),%rbp
  0x00007f8ab91146c1: mov    0x60(%rsp),%rbx
  0x00007f8ab91146c6: mov    0x68(%rsp),%rdx
  0x00007f8ab91146cb: mov    0x70(%rsp),%rcx
  0x00007f8ab91146d0: mov    0x78(%rsp),%rax
  0x00007f8ab91146d5: add    $0x80,%rsp
  0x00007f8ab91146dc: add    $0x8,%rsp
  0x00007f8ab91146e0: popfq  
  0x00007f8ab91146e1: mov    %r13,%rsp
  0x00007f8ab91146e4: pop    %rax
  0x00007f8ab91146e5: mov    %rsp,%r13
  0x00007f8ab91146e8: sub    $0x10,%rsp
  0x00007f8ab91146ec: mov    %rax,(%rsp)
  0x00007f8ab91146f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91146f5: mov    0x40(%rbx),%rcx
  0x00007f8ab91146f9: jmpq   *%rcx

AHE@0x00007f8ac80c4238: 0xbb000000 i2c: 0x00007f8ab91147a0 c2i: 0x00007f8ab91148b8 c2iUV: 0x00007f8ab911488b
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab91148b8
  0x00007f8ab91147a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91147a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91147ae: cmp    %r11,%rax
  0x00007f8ab91147b1: jbe    0x00007f8ab91147ca
  0x00007f8ab91147b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91147c1: cmp    %r11,%rax
  0x00007f8ab91147c4: jb     0x00007f8ab9114867
  0x00007f8ab91147ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91147d4: cmp    %r11,%rax
  0x00007f8ab91147d7: jbe    0x00007f8ab91147f0
  0x00007f8ab91147dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91147e7: cmp    %r11,%rax
  0x00007f8ab91147ea: jb     0x00007f8ab9114867
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91147f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91147f5: sub    $0x80,%rsp
  0x00007f8ab91147fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9114801: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114806: mov    %rdx,0x68(%rsp)
  0x00007f8ab911480b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114810: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114815: mov    %rsi,0x48(%rsp)
  0x00007f8ab911481a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911481f: mov    %r8,0x38(%rsp)
  0x00007f8ab9114824: mov    %r9,0x30(%rsp)
  0x00007f8ab9114829: mov    %r10,0x28(%rsp)
  0x00007f8ab911482e: mov    %r11,0x20(%rsp)
  0x00007f8ab9114833: mov    %r12,0x18(%rsp)
  0x00007f8ab9114838: mov    %r13,0x10(%rsp)
  0x00007f8ab911483d: mov    %r14,0x8(%rsp)
  0x00007f8ab9114842: mov    %r15,(%rsp)
  0x00007f8ab9114846: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9114850: movabs $0x7f8ab91147f0,%rsi
  0x00007f8ab911485a: mov    %rsp,%rdx
  0x00007f8ab911485d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114861: callq  0x00007f8aceddb9fa
  0x00007f8ab9114866: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9114867: mov    %rsp,%r11
  0x00007f8ab911486a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911486e: push   %rax
  0x00007f8ab911486f: mov    %r11,%rax
  0x00007f8ab9114872: mov    0x50(%rbx),%r11
  0x00007f8ab9114876: mov    0x10(%rax),%rsi
  0x00007f8ab911487a: mov    0x8(%rax),%rdx
  0x00007f8ab911487e: mov    %rbx,0x258(%r15)
  0x00007f8ab9114885: mov    %rbx,%rax
  0x00007f8ab9114888: jmpq   *%r11
  0x00007f8ab911488b: mov    0x8(%rsi),%ebx
  0x00007f8ab911488e: shl    $0x3,%rbx
  0x00007f8ab9114892: cmp    0x10(%rax),%rbx
  0x00007f8ab9114896: mov    0x8(%rax),%rbx
  0x00007f8ab911489a: je     0x00007f8ab91148a5
  0x00007f8ab91148a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91148a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91148ad: je     0x00007f8ab91149a8
  0x00007f8ab91148b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91148b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91148c0: je     0x00007f8ab91149a8
  0x00007f8ab91148c6: mov    %rsp,%r13
  0x00007f8ab91148c9: mov    (%rsp),%rax
  0x00007f8ab91148cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91148d1: pushfq 
  0x00007f8ab91148d2: sub    $0x8,%rsp
  0x00007f8ab91148d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91148db: sub    $0x80,%rsp
  0x00007f8ab91148e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91148e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91148ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91148f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91148f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91148fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9114900: mov    %rdi,0x40(%rsp)
  0x00007f8ab9114905: mov    %r8,0x38(%rsp)
  0x00007f8ab911490a: mov    %r9,0x30(%rsp)
  0x00007f8ab911490f: mov    %r10,0x28(%rsp)
  0x00007f8ab9114914: mov    %r11,0x20(%rsp)
  0x00007f8ab9114919: mov    %r12,0x18(%rsp)
  0x00007f8ab911491e: mov    %r13,0x10(%rsp)
  0x00007f8ab9114923: mov    %r14,0x8(%rsp)
  0x00007f8ab9114928: mov    %r15,(%rsp)
  0x00007f8ab911492c: sub    $0x200,%rsp
  0x00007f8ab9114933: fxsave64 (%rsp)
  0x00007f8ab9114938: mov    %rbx,%rdi
  0x00007f8ab911493b: mov    %rax,%rsi
  0x00007f8ab911493e: callq  0x00007f8acef8bbca
  0x00007f8ab9114943: fxrstor64 (%rsp)
  0x00007f8ab9114948: add    $0x200,%rsp
  0x00007f8ab911494f: mov    (%rsp),%r15
  0x00007f8ab9114953: mov    0x8(%rsp),%r14
  0x00007f8ab9114958: mov    0x10(%rsp),%r13
  0x00007f8ab911495d: mov    0x18(%rsp),%r12
  0x00007f8ab9114962: mov    0x20(%rsp),%r11
  0x00007f8ab9114967: mov    0x28(%rsp),%r10
  0x00007f8ab911496c: mov    0x30(%rsp),%r9
  0x00007f8ab9114971: mov    0x38(%rsp),%r8
  0x00007f8ab9114976: mov    0x40(%rsp),%rdi
  0x00007f8ab911497b: mov    0x48(%rsp),%rsi
  0x00007f8ab9114980: mov    0x50(%rsp),%rbp
  0x00007f8ab9114985: mov    0x60(%rsp),%rbx
  0x00007f8ab911498a: mov    0x68(%rsp),%rdx
  0x00007f8ab911498f: mov    0x70(%rsp),%rcx
  0x00007f8ab9114994: mov    0x78(%rsp),%rax
  0x00007f8ab9114999: add    $0x80,%rsp
  0x00007f8ab91149a0: add    $0x8,%rsp
  0x00007f8ab91149a4: popfq  
  0x00007f8ab91149a5: mov    %r13,%rsp
  0x00007f8ab91149a8: pop    %rax
  0x00007f8ab91149a9: mov    %rsp,%r13
  0x00007f8ab91149ac: sub    $0x20,%rsp
  0x00007f8ab91149b0: mov    %rax,(%rsp)
  0x00007f8ab91149b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab91149b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab91149be: mov    0x40(%rbx),%rcx
  0x00007f8ab91149c2: jmpq   *%rcx

AHE@0x00007f8ac80c4280: 0xbbb00000 i2c: 0x00007f8ab9114aa0 c2i: 0x00007f8ab9114bbc c2iUV: 0x00007f8ab9114b8f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab9114bbc
  0x00007f8ab9114aa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9114aa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9114aae: cmp    %r11,%rax
  0x00007f8ab9114ab1: jbe    0x00007f8ab9114aca
  0x00007f8ab9114ab7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9114ac1: cmp    %r11,%rax
  0x00007f8ab9114ac4: jb     0x00007f8ab9114b67
  0x00007f8ab9114aca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9114ad4: cmp    %r11,%rax
  0x00007f8ab9114ad7: jbe    0x00007f8ab9114af0
  0x00007f8ab9114add: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9114ae7: cmp    %r11,%rax
  0x00007f8ab9114aea: jb     0x00007f8ab9114b67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9114af0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114af5: sub    $0x80,%rsp
  0x00007f8ab9114afc: mov    %rax,0x78(%rsp)
  0x00007f8ab9114b01: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114b06: mov    %rdx,0x68(%rsp)
  0x00007f8ab9114b0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114b10: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114b15: mov    %rsi,0x48(%rsp)
  0x00007f8ab9114b1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9114b1f: mov    %r8,0x38(%rsp)
  0x00007f8ab9114b24: mov    %r9,0x30(%rsp)
  0x00007f8ab9114b29: mov    %r10,0x28(%rsp)
  0x00007f8ab9114b2e: mov    %r11,0x20(%rsp)
  0x00007f8ab9114b33: mov    %r12,0x18(%rsp)
  0x00007f8ab9114b38: mov    %r13,0x10(%rsp)
  0x00007f8ab9114b3d: mov    %r14,0x8(%rsp)
  0x00007f8ab9114b42: mov    %r15,(%rsp)
  0x00007f8ab9114b46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9114b50: movabs $0x7f8ab9114af0,%rsi
  0x00007f8ab9114b5a: mov    %rsp,%rdx
  0x00007f8ab9114b5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114b61: callq  0x00007f8aceddb9fa
  0x00007f8ab9114b66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9114b67: mov    %rsp,%r11
  0x00007f8ab9114b6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114b6e: push   %rax
  0x00007f8ab9114b6f: mov    %r11,%rax
  0x00007f8ab9114b72: mov    0x50(%rbx),%r11
  0x00007f8ab9114b76: mov    0x18(%rax),%rsi
  0x00007f8ab9114b7a: mov    0x10(%rax),%rdx
  0x00007f8ab9114b7e: mov    0x8(%rax),%rcx
  0x00007f8ab9114b82: mov    %rbx,0x258(%r15)
  0x00007f8ab9114b89: mov    %rbx,%rax
  0x00007f8ab9114b8c: jmpq   *%r11
  0x00007f8ab9114b8f: mov    0x8(%rsi),%ebx
  0x00007f8ab9114b92: shl    $0x3,%rbx
  0x00007f8ab9114b96: cmp    0x10(%rax),%rbx
  0x00007f8ab9114b9a: mov    0x8(%rax),%rbx
  0x00007f8ab9114b9e: je     0x00007f8ab9114ba9
  0x00007f8ab9114ba4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9114ba9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9114bb1: je     0x00007f8ab9114cac
  0x00007f8ab9114bb7: jmpq   0x00007f8ab9105c40
  0x00007f8ab9114bbc: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9114bc4: je     0x00007f8ab9114cac
  0x00007f8ab9114bca: mov    %rsp,%r13
  0x00007f8ab9114bcd: mov    (%rsp),%rax
  0x00007f8ab9114bd1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114bd5: pushfq 
  0x00007f8ab9114bd6: sub    $0x8,%rsp
  0x00007f8ab9114bda: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114bdf: sub    $0x80,%rsp
  0x00007f8ab9114be6: mov    %rax,0x78(%rsp)
  0x00007f8ab9114beb: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114bf0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9114bf5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114bfa: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114bff: mov    %rsi,0x48(%rsp)
  0x00007f8ab9114c04: mov    %rdi,0x40(%rsp)
  0x00007f8ab9114c09: mov    %r8,0x38(%rsp)
  0x00007f8ab9114c0e: mov    %r9,0x30(%rsp)
  0x00007f8ab9114c13: mov    %r10,0x28(%rsp)
  0x00007f8ab9114c18: mov    %r11,0x20(%rsp)
  0x00007f8ab9114c1d: mov    %r12,0x18(%rsp)
  0x00007f8ab9114c22: mov    %r13,0x10(%rsp)
  0x00007f8ab9114c27: mov    %r14,0x8(%rsp)
  0x00007f8ab9114c2c: mov    %r15,(%rsp)
  0x00007f8ab9114c30: sub    $0x200,%rsp
  0x00007f8ab9114c37: fxsave64 (%rsp)
  0x00007f8ab9114c3c: mov    %rbx,%rdi
  0x00007f8ab9114c3f: mov    %rax,%rsi
  0x00007f8ab9114c42: callq  0x00007f8acef8bbca
  0x00007f8ab9114c47: fxrstor64 (%rsp)
  0x00007f8ab9114c4c: add    $0x200,%rsp
  0x00007f8ab9114c53: mov    (%rsp),%r15
  0x00007f8ab9114c57: mov    0x8(%rsp),%r14
  0x00007f8ab9114c5c: mov    0x10(%rsp),%r13
  0x00007f8ab9114c61: mov    0x18(%rsp),%r12
  0x00007f8ab9114c66: mov    0x20(%rsp),%r11
  0x00007f8ab9114c6b: mov    0x28(%rsp),%r10
  0x00007f8ab9114c70: mov    0x30(%rsp),%r9
  0x00007f8ab9114c75: mov    0x38(%rsp),%r8
  0x00007f8ab9114c7a: mov    0x40(%rsp),%rdi
  0x00007f8ab9114c7f: mov    0x48(%rsp),%rsi
  0x00007f8ab9114c84: mov    0x50(%rsp),%rbp
  0x00007f8ab9114c89: mov    0x60(%rsp),%rbx
  0x00007f8ab9114c8e: mov    0x68(%rsp),%rdx
  0x00007f8ab9114c93: mov    0x70(%rsp),%rcx
  0x00007f8ab9114c98: mov    0x78(%rsp),%rax
  0x00007f8ab9114c9d: add    $0x80,%rsp
  0x00007f8ab9114ca4: add    $0x8,%rsp
  0x00007f8ab9114ca8: popfq  
  0x00007f8ab9114ca9: mov    %r13,%rsp
  0x00007f8ab9114cac: pop    %rax
  0x00007f8ab9114cad: mov    %rsp,%r13
  0x00007f8ab9114cb0: sub    $0x20,%rsp
  0x00007f8ab9114cb4: mov    %rax,(%rsp)
  0x00007f8ab9114cb8: mov    %rsi,0x18(%rsp)
  0x00007f8ab9114cbd: mov    %rdx,0x10(%rsp)
  0x00007f8ab9114cc2: mov    %rcx,0x8(%rsp)
  0x00007f8ab9114cc7: mov    0x40(%rbx),%rcx
  0x00007f8ab9114ccb: jmpq   *%rcx

AHE@0x00007f8ac80c42c8: 0xbb000000 i2c: 0x00007f8ab9114da0 c2i: 0x00007f8ab9114eb8 c2iUV: 0x00007f8ab9114e8b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9114eb8
  0x00007f8ab9114da0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9114da4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9114dae: cmp    %r11,%rax
  0x00007f8ab9114db1: jbe    0x00007f8ab9114dca
  0x00007f8ab9114db7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9114dc1: cmp    %r11,%rax
  0x00007f8ab9114dc4: jb     0x00007f8ab9114e67
  0x00007f8ab9114dca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9114dd4: cmp    %r11,%rax
  0x00007f8ab9114dd7: jbe    0x00007f8ab9114df0
  0x00007f8ab9114ddd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9114de7: cmp    %r11,%rax
  0x00007f8ab9114dea: jb     0x00007f8ab9114e67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9114df0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114df5: sub    $0x80,%rsp
  0x00007f8ab9114dfc: mov    %rax,0x78(%rsp)
  0x00007f8ab9114e01: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114e06: mov    %rdx,0x68(%rsp)
  0x00007f8ab9114e0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114e10: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114e15: mov    %rsi,0x48(%rsp)
  0x00007f8ab9114e1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9114e1f: mov    %r8,0x38(%rsp)
  0x00007f8ab9114e24: mov    %r9,0x30(%rsp)
  0x00007f8ab9114e29: mov    %r10,0x28(%rsp)
  0x00007f8ab9114e2e: mov    %r11,0x20(%rsp)
  0x00007f8ab9114e33: mov    %r12,0x18(%rsp)
  0x00007f8ab9114e38: mov    %r13,0x10(%rsp)
  0x00007f8ab9114e3d: mov    %r14,0x8(%rsp)
  0x00007f8ab9114e42: mov    %r15,(%rsp)
  0x00007f8ab9114e46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9114e50: movabs $0x7f8ab9114df0,%rsi
  0x00007f8ab9114e5a: mov    %rsp,%rdx
  0x00007f8ab9114e5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114e61: callq  0x00007f8aceddb9fa
  0x00007f8ab9114e66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9114e67: mov    %rsp,%r11
  0x00007f8ab9114e6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114e6e: push   %rax
  0x00007f8ab9114e6f: mov    %r11,%rax
  0x00007f8ab9114e72: mov    0x50(%rbx),%r11
  0x00007f8ab9114e76: mov    0x10(%rax),%rsi
  0x00007f8ab9114e7a: mov    0x8(%rax),%rdx
  0x00007f8ab9114e7e: mov    %rbx,0x258(%r15)
  0x00007f8ab9114e85: mov    %rbx,%rax
  0x00007f8ab9114e88: jmpq   *%r11
  0x00007f8ab9114e8b: mov    0x8(%rsi),%ebx
  0x00007f8ab9114e8e: shl    $0x3,%rbx
  0x00007f8ab9114e92: cmp    0x10(%rax),%rbx
  0x00007f8ab9114e96: mov    0x8(%rax),%rbx
  0x00007f8ab9114e9a: je     0x00007f8ab9114ea5
  0x00007f8ab9114ea0: jmpq   0x00007f8ab9105c40
  0x00007f8ab9114ea5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9114ead: je     0x00007f8ab9114fa8
  0x00007f8ab9114eb3: jmpq   0x00007f8ab9105c40
  0x00007f8ab9114eb8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9114ec0: je     0x00007f8ab9114fa8
  0x00007f8ab9114ec6: mov    %rsp,%r13
  0x00007f8ab9114ec9: mov    (%rsp),%rax
  0x00007f8ab9114ecd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9114ed1: pushfq 
  0x00007f8ab9114ed2: sub    $0x8,%rsp
  0x00007f8ab9114ed6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9114edb: sub    $0x80,%rsp
  0x00007f8ab9114ee2: mov    %rax,0x78(%rsp)
  0x00007f8ab9114ee7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9114eec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9114ef1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9114ef6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9114efb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9114f00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9114f05: mov    %r8,0x38(%rsp)
  0x00007f8ab9114f0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9114f0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9114f14: mov    %r11,0x20(%rsp)
  0x00007f8ab9114f19: mov    %r12,0x18(%rsp)
  0x00007f8ab9114f1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9114f23: mov    %r14,0x8(%rsp)
  0x00007f8ab9114f28: mov    %r15,(%rsp)
  0x00007f8ab9114f2c: sub    $0x200,%rsp
  0x00007f8ab9114f33: fxsave64 (%rsp)
  0x00007f8ab9114f38: mov    %rbx,%rdi
  0x00007f8ab9114f3b: mov    %rax,%rsi
  0x00007f8ab9114f3e: callq  0x00007f8acef8bbca
  0x00007f8ab9114f43: fxrstor64 (%rsp)
  0x00007f8ab9114f48: add    $0x200,%rsp
  0x00007f8ab9114f4f: mov    (%rsp),%r15
  0x00007f8ab9114f53: mov    0x8(%rsp),%r14
  0x00007f8ab9114f58: mov    0x10(%rsp),%r13
  0x00007f8ab9114f5d: mov    0x18(%rsp),%r12
  0x00007f8ab9114f62: mov    0x20(%rsp),%r11
  0x00007f8ab9114f67: mov    0x28(%rsp),%r10
  0x00007f8ab9114f6c: mov    0x30(%rsp),%r9
  0x00007f8ab9114f71: mov    0x38(%rsp),%r8
  0x00007f8ab9114f76: mov    0x40(%rsp),%rdi
  0x00007f8ab9114f7b: mov    0x48(%rsp),%rsi
  0x00007f8ab9114f80: mov    0x50(%rsp),%rbp
  0x00007f8ab9114f85: mov    0x60(%rsp),%rbx
  0x00007f8ab9114f8a: mov    0x68(%rsp),%rdx
  0x00007f8ab9114f8f: mov    0x70(%rsp),%rcx
  0x00007f8ab9114f94: mov    0x78(%rsp),%rax
  0x00007f8ab9114f99: add    $0x80,%rsp
  0x00007f8ab9114fa0: add    $0x8,%rsp
  0x00007f8ab9114fa4: popfq  
  0x00007f8ab9114fa5: mov    %r13,%rsp
  0x00007f8ab9114fa8: pop    %rax
  0x00007f8ab9114fa9: mov    %rsp,%r13
  0x00007f8ab9114fac: sub    $0x20,%rsp
  0x00007f8ab9114fb0: mov    %rax,(%rsp)
  0x00007f8ab9114fb4: mov    %rsi,0x10(%rsp)
  0x00007f8ab9114fb9: mov    %rdx,0x8(%rsp)
  0x00007f8ab9114fbe: mov    0x40(%rbx),%rcx
  0x00007f8ab9114fc2: jmpq   *%rcx

AHE@0x00007f8ac80c4310: 0xbbbaa000 i2c: 0x00007f8ab91150a0 c2i: 0x00007f8ab91151c4 c2iUV: 0x00007f8ab9115197
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (575 bytes generated)
c2i argument handler starts at 0x7f8ab91151c4
  0x00007f8ab91150a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91150a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91150ae: cmp    %r11,%rax
  0x00007f8ab91150b1: jbe    0x00007f8ab91150ca
  0x00007f8ab91150b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91150c1: cmp    %r11,%rax
  0x00007f8ab91150c4: jb     0x00007f8ab9115167
  0x00007f8ab91150ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91150d4: cmp    %r11,%rax
  0x00007f8ab91150d7: jbe    0x00007f8ab91150f0
  0x00007f8ab91150dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91150e7: cmp    %r11,%rax
  0x00007f8ab91150ea: jb     0x00007f8ab9115167
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91150f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91150f5: sub    $0x80,%rsp
  0x00007f8ab91150fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9115101: mov    %rcx,0x70(%rsp)
  0x00007f8ab9115106: mov    %rdx,0x68(%rsp)
  0x00007f8ab911510b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9115110: mov    %rbp,0x50(%rsp)
  0x00007f8ab9115115: mov    %rsi,0x48(%rsp)
  0x00007f8ab911511a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911511f: mov    %r8,0x38(%rsp)
  0x00007f8ab9115124: mov    %r9,0x30(%rsp)
  0x00007f8ab9115129: mov    %r10,0x28(%rsp)
  0x00007f8ab911512e: mov    %r11,0x20(%rsp)
  0x00007f8ab9115133: mov    %r12,0x18(%rsp)
  0x00007f8ab9115138: mov    %r13,0x10(%rsp)
  0x00007f8ab911513d: mov    %r14,0x8(%rsp)
  0x00007f8ab9115142: mov    %r15,(%rsp)
  0x00007f8ab9115146: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9115150: movabs $0x7f8ab91150f0,%rsi
  0x00007f8ab911515a: mov    %rsp,%rdx
  0x00007f8ab911515d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115161: callq  0x00007f8aceddb9fa
  0x00007f8ab9115166: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9115167: mov    %rsp,%r11
  0x00007f8ab911516a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911516e: push   %rax
  0x00007f8ab911516f: mov    %r11,%rax
  0x00007f8ab9115172: mov    0x50(%rbx),%r11
  0x00007f8ab9115176: mov    0x28(%rax),%rsi
  0x00007f8ab911517a: mov    0x20(%rax),%rdx
  0x00007f8ab911517e: mov    0x18(%rax),%rcx
  0x00007f8ab9115182: mov    0x10(%rax),%r8d
  0x00007f8ab9115186: mov    0x8(%rax),%r9d
  0x00007f8ab911518a: mov    %rbx,0x258(%r15)
  0x00007f8ab9115191: mov    %rbx,%rax
  0x00007f8ab9115194: jmpq   *%r11
  0x00007f8ab9115197: mov    0x8(%rsi),%ebx
  0x00007f8ab911519a: shl    $0x3,%rbx
  0x00007f8ab911519e: cmp    0x10(%rax),%rbx
  0x00007f8ab91151a2: mov    0x8(%rax),%rbx
  0x00007f8ab91151a6: je     0x00007f8ab91151b1
  0x00007f8ab91151ac: jmpq   0x00007f8ab9105c40
  0x00007f8ab91151b1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91151b9: je     0x00007f8ab91152b4
  0x00007f8ab91151bf: jmpq   0x00007f8ab9105c40
  0x00007f8ab91151c4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91151cc: je     0x00007f8ab91152b4
  0x00007f8ab91151d2: mov    %rsp,%r13
  0x00007f8ab91151d5: mov    (%rsp),%rax
  0x00007f8ab91151d9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91151dd: pushfq 
  0x00007f8ab91151de: sub    $0x8,%rsp
  0x00007f8ab91151e2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91151e7: sub    $0x80,%rsp
  0x00007f8ab91151ee: mov    %rax,0x78(%rsp)
  0x00007f8ab91151f3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91151f8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91151fd: mov    %rbx,0x60(%rsp)
  0x00007f8ab9115202: mov    %rbp,0x50(%rsp)
  0x00007f8ab9115207: mov    %rsi,0x48(%rsp)
  0x00007f8ab911520c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9115211: mov    %r8,0x38(%rsp)
  0x00007f8ab9115216: mov    %r9,0x30(%rsp)
  0x00007f8ab911521b: mov    %r10,0x28(%rsp)
  0x00007f8ab9115220: mov    %r11,0x20(%rsp)
  0x00007f8ab9115225: mov    %r12,0x18(%rsp)
  0x00007f8ab911522a: mov    %r13,0x10(%rsp)
  0x00007f8ab911522f: mov    %r14,0x8(%rsp)
  0x00007f8ab9115234: mov    %r15,(%rsp)
  0x00007f8ab9115238: sub    $0x200,%rsp
  0x00007f8ab911523f: fxsave64 (%rsp)
  0x00007f8ab9115244: mov    %rbx,%rdi
  0x00007f8ab9115247: mov    %rax,%rsi
  0x00007f8ab911524a: callq  0x00007f8acef8bbca
  0x00007f8ab911524f: fxrstor64 (%rsp)
  0x00007f8ab9115254: add    $0x200,%rsp
  0x00007f8ab911525b: mov    (%rsp),%r15
  0x00007f8ab911525f: mov    0x8(%rsp),%r14
  0x00007f8ab9115264: mov    0x10(%rsp),%r13
  0x00007f8ab9115269: mov    0x18(%rsp),%r12
  0x00007f8ab911526e: mov    0x20(%rsp),%r11
  0x00007f8ab9115273: mov    0x28(%rsp),%r10
  0x00007f8ab9115278: mov    0x30(%rsp),%r9
  0x00007f8ab911527d: mov    0x38(%rsp),%r8
  0x00007f8ab9115282: mov    0x40(%rsp),%rdi
  0x00007f8ab9115287: mov    0x48(%rsp),%rsi
  0x00007f8ab911528c: mov    0x50(%rsp),%rbp
  0x00007f8ab9115291: mov    0x60(%rsp),%rbx
  0x00007f8ab9115296: mov    0x68(%rsp),%rdx
  0x00007f8ab911529b: mov    0x70(%rsp),%rcx
  0x00007f8ab91152a0: mov    0x78(%rsp),%rax
  0x00007f8ab91152a5: add    $0x80,%rsp
  0x00007f8ab91152ac: add    $0x8,%rsp
  0x00007f8ab91152b0: popfq  
  0x00007f8ab91152b1: mov    %r13,%rsp
  0x00007f8ab91152b4: pop    %rax
  0x00007f8ab91152b5: mov    %rsp,%r13
  0x00007f8ab91152b8: sub    $0x30,%rsp
  0x00007f8ab91152bc: mov    %rax,(%rsp)
  0x00007f8ab91152c0: mov    %rsi,0x28(%rsp)
  0x00007f8ab91152c5: mov    %rdx,0x20(%rsp)
  0x00007f8ab91152ca: mov    %rcx,0x18(%rsp)
  0x00007f8ab91152cf: mov    %r8d,0x10(%rsp)
  0x00007f8ab91152d4: mov    %r9d,0x8(%rsp)
  0x00007f8ab91152d9: mov    0x40(%rbx),%rcx
  0x00007f8ab91152dd: jmpq   *%rcx

AHE@0x00007f8ac80c4358: 0xb0000000 i2c: 0x00007f8ab91153a0 c2i: 0x00007f8ab91154b4 c2iUV: 0x00007f8ab9115487
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab91154b4
  0x00007f8ab91153a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91153a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91153ae: cmp    %r11,%rax
  0x00007f8ab91153b1: jbe    0x00007f8ab91153ca
  0x00007f8ab91153b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91153c1: cmp    %r11,%rax
  0x00007f8ab91153c4: jb     0x00007f8ab9115467
  0x00007f8ab91153ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91153d4: cmp    %r11,%rax
  0x00007f8ab91153d7: jbe    0x00007f8ab91153f0
  0x00007f8ab91153dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91153e7: cmp    %r11,%rax
  0x00007f8ab91153ea: jb     0x00007f8ab9115467
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91153f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91153f5: sub    $0x80,%rsp
  0x00007f8ab91153fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9115401: mov    %rcx,0x70(%rsp)
  0x00007f8ab9115406: mov    %rdx,0x68(%rsp)
  0x00007f8ab911540b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9115410: mov    %rbp,0x50(%rsp)
  0x00007f8ab9115415: mov    %rsi,0x48(%rsp)
  0x00007f8ab911541a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911541f: mov    %r8,0x38(%rsp)
  0x00007f8ab9115424: mov    %r9,0x30(%rsp)
  0x00007f8ab9115429: mov    %r10,0x28(%rsp)
  0x00007f8ab911542e: mov    %r11,0x20(%rsp)
  0x00007f8ab9115433: mov    %r12,0x18(%rsp)
  0x00007f8ab9115438: mov    %r13,0x10(%rsp)
  0x00007f8ab911543d: mov    %r14,0x8(%rsp)
  0x00007f8ab9115442: mov    %r15,(%rsp)
  0x00007f8ab9115446: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9115450: movabs $0x7f8ab91153f0,%rsi
  0x00007f8ab911545a: mov    %rsp,%rdx
  0x00007f8ab911545d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115461: callq  0x00007f8aceddb9fa
  0x00007f8ab9115466: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9115467: mov    %rsp,%r11
  0x00007f8ab911546a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911546e: push   %rax
  0x00007f8ab911546f: mov    %r11,%rax
  0x00007f8ab9115472: mov    0x50(%rbx),%r11
  0x00007f8ab9115476: mov    0x8(%rax),%rsi
  0x00007f8ab911547a: mov    %rbx,0x258(%r15)
  0x00007f8ab9115481: mov    %rbx,%rax
  0x00007f8ab9115484: jmpq   *%r11
  0x00007f8ab9115487: mov    0x8(%rsi),%ebx
  0x00007f8ab911548a: shl    $0x3,%rbx
  0x00007f8ab911548e: cmp    0x10(%rax),%rbx
  0x00007f8ab9115492: mov    0x8(%rax),%rbx
  0x00007f8ab9115496: je     0x00007f8ab91154a1
  0x00007f8ab911549c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91154a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91154a9: je     0x00007f8ab91155a4
  0x00007f8ab91154af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91154b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91154bc: je     0x00007f8ab91155a4
  0x00007f8ab91154c2: mov    %rsp,%r13
  0x00007f8ab91154c5: mov    (%rsp),%rax
  0x00007f8ab91154c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91154cd: pushfq 
  0x00007f8ab91154ce: sub    $0x8,%rsp
  0x00007f8ab91154d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91154d7: sub    $0x80,%rsp
  0x00007f8ab91154de: mov    %rax,0x78(%rsp)
  0x00007f8ab91154e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91154e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91154ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91154f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91154f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91154fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9115501: mov    %r8,0x38(%rsp)
  0x00007f8ab9115506: mov    %r9,0x30(%rsp)
  0x00007f8ab911550b: mov    %r10,0x28(%rsp)
  0x00007f8ab9115510: mov    %r11,0x20(%rsp)
  0x00007f8ab9115515: mov    %r12,0x18(%rsp)
  0x00007f8ab911551a: mov    %r13,0x10(%rsp)
  0x00007f8ab911551f: mov    %r14,0x8(%rsp)
  0x00007f8ab9115524: mov    %r15,(%rsp)
  0x00007f8ab9115528: sub    $0x200,%rsp
  0x00007f8ab911552f: fxsave64 (%rsp)
  0x00007f8ab9115534: mov    %rbx,%rdi
  0x00007f8ab9115537: mov    %rax,%rsi
  0x00007f8ab911553a: callq  0x00007f8acef8bbca
  0x00007f8ab911553f: fxrstor64 (%rsp)
  0x00007f8ab9115544: add    $0x200,%rsp
  0x00007f8ab911554b: mov    (%rsp),%r15
  0x00007f8ab911554f: mov    0x8(%rsp),%r14
  0x00007f8ab9115554: mov    0x10(%rsp),%r13
  0x00007f8ab9115559: mov    0x18(%rsp),%r12
  0x00007f8ab911555e: mov    0x20(%rsp),%r11
  0x00007f8ab9115563: mov    0x28(%rsp),%r10
  0x00007f8ab9115568: mov    0x30(%rsp),%r9
  0x00007f8ab911556d: mov    0x38(%rsp),%r8
  0x00007f8ab9115572: mov    0x40(%rsp),%rdi
  0x00007f8ab9115577: mov    0x48(%rsp),%rsi
  0x00007f8ab911557c: mov    0x50(%rsp),%rbp
  0x00007f8ab9115581: mov    0x60(%rsp),%rbx
  0x00007f8ab9115586: mov    0x68(%rsp),%rdx
  0x00007f8ab911558b: mov    0x70(%rsp),%rcx
  0x00007f8ab9115590: mov    0x78(%rsp),%rax
  0x00007f8ab9115595: add    $0x80,%rsp
  0x00007f8ab911559c: add    $0x8,%rsp
  0x00007f8ab91155a0: popfq  
  0x00007f8ab91155a1: mov    %r13,%rsp
  0x00007f8ab91155a4: pop    %rax
  0x00007f8ab91155a5: mov    %rsp,%r13
  0x00007f8ab91155a8: sub    $0x10,%rsp
  0x00007f8ab91155ac: mov    %rax,(%rsp)
  0x00007f8ab91155b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91155b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91155b9: jmpq   *%rcx

AHE@0x00007f8ac80c43a0: 0xbb000000 i2c: 0x00007f8ab9115660 c2i: 0x00007f8ab9115778 c2iUV: 0x00007f8ab911574b
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9115778
  0x00007f8ab9115660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9115664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911566e: cmp    %r11,%rax
  0x00007f8ab9115671: jbe    0x00007f8ab911568a
  0x00007f8ab9115677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9115681: cmp    %r11,%rax
  0x00007f8ab9115684: jb     0x00007f8ab9115727
  0x00007f8ab911568a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9115694: cmp    %r11,%rax
  0x00007f8ab9115697: jbe    0x00007f8ab91156b0
  0x00007f8ab911569d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91156a7: cmp    %r11,%rax
  0x00007f8ab91156aa: jb     0x00007f8ab9115727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91156b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91156b5: sub    $0x80,%rsp
  0x00007f8ab91156bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91156c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91156c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91156cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91156d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91156d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91156da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91156df: mov    %r8,0x38(%rsp)
  0x00007f8ab91156e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91156e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91156ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91156f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91156f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91156fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9115702: mov    %r15,(%rsp)
  0x00007f8ab9115706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9115710: movabs $0x7f8ab91156b0,%rsi
  0x00007f8ab911571a: mov    %rsp,%rdx
  0x00007f8ab911571d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115721: callq  0x00007f8aceddb9fa
  0x00007f8ab9115726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9115727: mov    %rsp,%r11
  0x00007f8ab911572a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911572e: push   %rax
  0x00007f8ab911572f: mov    %r11,%rax
  0x00007f8ab9115732: mov    0x50(%rbx),%r11
  0x00007f8ab9115736: mov    0x10(%rax),%rsi
  0x00007f8ab911573a: mov    0x8(%rax),%rdx
  0x00007f8ab911573e: mov    %rbx,0x258(%r15)
  0x00007f8ab9115745: mov    %rbx,%rax
  0x00007f8ab9115748: jmpq   *%r11
  0x00007f8ab911574b: mov    0x8(%rsi),%ebx
  0x00007f8ab911574e: shl    $0x3,%rbx
  0x00007f8ab9115752: cmp    0x10(%rax),%rbx
  0x00007f8ab9115756: mov    0x8(%rax),%rbx
  0x00007f8ab911575a: je     0x00007f8ab9115765
  0x00007f8ab9115760: jmpq   0x00007f8ab9105c40
  0x00007f8ab9115765: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911576d: je     0x00007f8ab9115868
  0x00007f8ab9115773: jmpq   0x00007f8ab9105c40
  0x00007f8ab9115778: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9115780: je     0x00007f8ab9115868
  0x00007f8ab9115786: mov    %rsp,%r13
  0x00007f8ab9115789: mov    (%rsp),%rax
  0x00007f8ab911578d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115791: pushfq 
  0x00007f8ab9115792: sub    $0x8,%rsp
  0x00007f8ab9115796: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911579b: sub    $0x80,%rsp
  0x00007f8ab91157a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91157a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91157ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91157b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91157b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91157bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91157c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91157c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91157ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91157cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91157d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91157d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91157de: mov    %r13,0x10(%rsp)
  0x00007f8ab91157e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91157e8: mov    %r15,(%rsp)
  0x00007f8ab91157ec: sub    $0x200,%rsp
  0x00007f8ab91157f3: fxsave64 (%rsp)
  0x00007f8ab91157f8: mov    %rbx,%rdi
  0x00007f8ab91157fb: mov    %rax,%rsi
  0x00007f8ab91157fe: callq  0x00007f8acef8bbca
  0x00007f8ab9115803: fxrstor64 (%rsp)
  0x00007f8ab9115808: add    $0x200,%rsp
  0x00007f8ab911580f: mov    (%rsp),%r15
  0x00007f8ab9115813: mov    0x8(%rsp),%r14
  0x00007f8ab9115818: mov    0x10(%rsp),%r13
  0x00007f8ab911581d: mov    0x18(%rsp),%r12
  0x00007f8ab9115822: mov    0x20(%rsp),%r11
  0x00007f8ab9115827: mov    0x28(%rsp),%r10
  0x00007f8ab911582c: mov    0x30(%rsp),%r9
  0x00007f8ab9115831: mov    0x38(%rsp),%r8
  0x00007f8ab9115836: mov    0x40(%rsp),%rdi
  0x00007f8ab911583b: mov    0x48(%rsp),%rsi
  0x00007f8ab9115840: mov    0x50(%rsp),%rbp
  0x00007f8ab9115845: mov    0x60(%rsp),%rbx
  0x00007f8ab911584a: mov    0x68(%rsp),%rdx
  0x00007f8ab911584f: mov    0x70(%rsp),%rcx
  0x00007f8ab9115854: mov    0x78(%rsp),%rax
  0x00007f8ab9115859: add    $0x80,%rsp
  0x00007f8ab9115860: add    $0x8,%rsp
  0x00007f8ab9115864: popfq  
  0x00007f8ab9115865: mov    %r13,%rsp
  0x00007f8ab9115868: pop    %rax
  0x00007f8ab9115869: mov    %rsp,%r13
  0x00007f8ab911586c: sub    $0x20,%rsp
  0x00007f8ab9115870: mov    %rax,(%rsp)
  0x00007f8ab9115874: mov    %rsi,0x10(%rsp)
  0x00007f8ab9115879: mov    %rdx,0x8(%rsp)
  0x00007f8ab911587e: mov    0x40(%rbx),%rcx
  0x00007f8ab9115882: jmpq   *%rcx

AHE@0x00007f8ac80c43e8: 0xbbb00000 i2c: 0x00007f8ab9115960 c2i: 0x00007f8ab9115a7c c2iUV: 0x00007f8ab9115a4f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab9115a7c
  0x00007f8ab9115960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9115964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911596e: cmp    %r11,%rax
  0x00007f8ab9115971: jbe    0x00007f8ab911598a
  0x00007f8ab9115977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9115981: cmp    %r11,%rax
  0x00007f8ab9115984: jb     0x00007f8ab9115a27
  0x00007f8ab911598a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9115994: cmp    %r11,%rax
  0x00007f8ab9115997: jbe    0x00007f8ab91159b0
  0x00007f8ab911599d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91159a7: cmp    %r11,%rax
  0x00007f8ab91159aa: jb     0x00007f8ab9115a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91159b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91159b5: sub    $0x80,%rsp
  0x00007f8ab91159bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91159c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91159c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91159cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91159d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91159d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91159da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91159df: mov    %r8,0x38(%rsp)
  0x00007f8ab91159e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91159e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91159ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91159f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91159f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91159fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9115a02: mov    %r15,(%rsp)
  0x00007f8ab9115a06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9115a10: movabs $0x7f8ab91159b0,%rsi
  0x00007f8ab9115a1a: mov    %rsp,%rdx
  0x00007f8ab9115a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115a21: callq  0x00007f8aceddb9fa
  0x00007f8ab9115a26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9115a27: mov    %rsp,%r11
  0x00007f8ab9115a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115a2e: push   %rax
  0x00007f8ab9115a2f: mov    %r11,%rax
  0x00007f8ab9115a32: mov    0x50(%rbx),%r11
  0x00007f8ab9115a36: mov    0x18(%rax),%rsi
  0x00007f8ab9115a3a: mov    0x10(%rax),%rdx
  0x00007f8ab9115a3e: mov    0x8(%rax),%rcx
  0x00007f8ab9115a42: mov    %rbx,0x258(%r15)
  0x00007f8ab9115a49: mov    %rbx,%rax
  0x00007f8ab9115a4c: jmpq   *%r11
  0x00007f8ab9115a4f: mov    0x8(%rsi),%ebx
  0x00007f8ab9115a52: shl    $0x3,%rbx
  0x00007f8ab9115a56: cmp    0x10(%rax),%rbx
  0x00007f8ab9115a5a: mov    0x8(%rax),%rbx
  0x00007f8ab9115a5e: je     0x00007f8ab9115a69
  0x00007f8ab9115a64: jmpq   0x00007f8ab9105c40
  0x00007f8ab9115a69: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9115a71: je     0x00007f8ab9115b6c
  0x00007f8ab9115a77: jmpq   0x00007f8ab9105c40
  0x00007f8ab9115a7c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9115a84: je     0x00007f8ab9115b6c
  0x00007f8ab9115a8a: mov    %rsp,%r13
  0x00007f8ab9115a8d: mov    (%rsp),%rax
  0x00007f8ab9115a91: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115a95: pushfq 
  0x00007f8ab9115a96: sub    $0x8,%rsp
  0x00007f8ab9115a9a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9115a9f: sub    $0x80,%rsp
  0x00007f8ab9115aa6: mov    %rax,0x78(%rsp)
  0x00007f8ab9115aab: mov    %rcx,0x70(%rsp)
  0x00007f8ab9115ab0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9115ab5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9115aba: mov    %rbp,0x50(%rsp)
  0x00007f8ab9115abf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9115ac4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9115ac9: mov    %r8,0x38(%rsp)
  0x00007f8ab9115ace: mov    %r9,0x30(%rsp)
  0x00007f8ab9115ad3: mov    %r10,0x28(%rsp)
  0x00007f8ab9115ad8: mov    %r11,0x20(%rsp)
  0x00007f8ab9115add: mov    %r12,0x18(%rsp)
  0x00007f8ab9115ae2: mov    %r13,0x10(%rsp)
  0x00007f8ab9115ae7: mov    %r14,0x8(%rsp)
  0x00007f8ab9115aec: mov    %r15,(%rsp)
  0x00007f8ab9115af0: sub    $0x200,%rsp
  0x00007f8ab9115af7: fxsave64 (%rsp)
  0x00007f8ab9115afc: mov    %rbx,%rdi
  0x00007f8ab9115aff: mov    %rax,%rsi
  0x00007f8ab9115b02: callq  0x00007f8acef8bbca
  0x00007f8ab9115b07: fxrstor64 (%rsp)
  0x00007f8ab9115b0c: add    $0x200,%rsp
  0x00007f8ab9115b13: mov    (%rsp),%r15
  0x00007f8ab9115b17: mov    0x8(%rsp),%r14
  0x00007f8ab9115b1c: mov    0x10(%rsp),%r13
  0x00007f8ab9115b21: mov    0x18(%rsp),%r12
  0x00007f8ab9115b26: mov    0x20(%rsp),%r11
  0x00007f8ab9115b2b: mov    0x28(%rsp),%r10
  0x00007f8ab9115b30: mov    0x30(%rsp),%r9
  0x00007f8ab9115b35: mov    0x38(%rsp),%r8
  0x00007f8ab9115b3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9115b3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9115b44: mov    0x50(%rsp),%rbp
  0x00007f8ab9115b49: mov    0x60(%rsp),%rbx
  0x00007f8ab9115b4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9115b53: mov    0x70(%rsp),%rcx
  0x00007f8ab9115b58: mov    0x78(%rsp),%rax
  0x00007f8ab9115b5d: add    $0x80,%rsp
  0x00007f8ab9115b64: add    $0x8,%rsp
  0x00007f8ab9115b68: popfq  
  0x00007f8ab9115b69: mov    %r13,%rsp
  0x00007f8ab9115b6c: pop    %rax
  0x00007f8ab9115b6d: mov    %rsp,%r13
  0x00007f8ab9115b70: sub    $0x20,%rsp
  0x00007f8ab9115b74: mov    %rax,(%rsp)
  0x00007f8ab9115b78: mov    %rsi,0x18(%rsp)
  0x00007f8ab9115b7d: mov    %rdx,0x10(%rsp)
  0x00007f8ab9115b82: mov    %rcx,0x8(%rsp)
  0x00007f8ab9115b87: mov    0x40(%rbx),%rcx
  0x00007f8ab9115b8b: jmpq   *%rcx

AHE@0x00007f8ac80c4430: 0xbb000000 i2c: 0x00007f8ab9115c60 c2i: 0x00007f8ab9115d78 c2iUV: 0x00007f8ab9115d4b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9115d78
  0x00007f8ab9115c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9115c64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9115c6e: cmp    %r11,%rax
  0x00007f8ab9115c71: jbe    0x00007f8ab9115c8a
  0x00007f8ab9115c77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9115c81: cmp    %r11,%rax
  0x00007f8ab9115c84: jb     0x00007f8ab9115d27
  0x00007f8ab9115c8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9115c94: cmp    %r11,%rax
  0x00007f8ab9115c97: jbe    0x00007f8ab9115cb0
  0x00007f8ab9115c9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9115ca7: cmp    %r11,%rax
  0x00007f8ab9115caa: jb     0x00007f8ab9115d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9115cb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9115cb5: sub    $0x80,%rsp
  0x00007f8ab9115cbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9115cc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9115cc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9115ccb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9115cd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9115cd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9115cda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9115cdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9115ce4: mov    %r9,0x30(%rsp)
  0x00007f8ab9115ce9: mov    %r10,0x28(%rsp)
  0x00007f8ab9115cee: mov    %r11,0x20(%rsp)
  0x00007f8ab9115cf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9115cf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9115cfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9115d02: mov    %r15,(%rsp)
  0x00007f8ab9115d06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9115d10: movabs $0x7f8ab9115cb0,%rsi
  0x00007f8ab9115d1a: mov    %rsp,%rdx
  0x00007f8ab9115d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115d21: callq  0x00007f8aceddb9fa
  0x00007f8ab9115d26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9115d27: mov    %rsp,%r11
  0x00007f8ab9115d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115d2e: push   %rax
  0x00007f8ab9115d2f: mov    %r11,%rax
  0x00007f8ab9115d32: mov    0x50(%rbx),%r11
  0x00007f8ab9115d36: mov    0x10(%rax),%rsi
  0x00007f8ab9115d3a: mov    0x8(%rax),%rdx
  0x00007f8ab9115d3e: mov    %rbx,0x258(%r15)
  0x00007f8ab9115d45: mov    %rbx,%rax
  0x00007f8ab9115d48: jmpq   *%r11
  0x00007f8ab9115d4b: mov    0x8(%rsi),%ebx
  0x00007f8ab9115d4e: shl    $0x3,%rbx
  0x00007f8ab9115d52: cmp    0x10(%rax),%rbx
  0x00007f8ab9115d56: mov    0x8(%rax),%rbx
  0x00007f8ab9115d5a: je     0x00007f8ab9115d65
  0x00007f8ab9115d60: jmpq   0x00007f8ab9105c40
  0x00007f8ab9115d65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9115d6d: je     0x00007f8ab9115e68
  0x00007f8ab9115d73: jmpq   0x00007f8ab9105c40
  0x00007f8ab9115d78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9115d80: je     0x00007f8ab9115e68
  0x00007f8ab9115d86: mov    %rsp,%r13
  0x00007f8ab9115d89: mov    (%rsp),%rax
  0x00007f8ab9115d8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9115d91: pushfq 
  0x00007f8ab9115d92: sub    $0x8,%rsp
  0x00007f8ab9115d96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9115d9b: sub    $0x80,%rsp
  0x00007f8ab9115da2: mov    %rax,0x78(%rsp)
  0x00007f8ab9115da7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9115dac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9115db1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9115db6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9115dbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9115dc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9115dc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9115dca: mov    %r9,0x30(%rsp)
  0x00007f8ab9115dcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9115dd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9115dd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9115dde: mov    %r13,0x10(%rsp)
  0x00007f8ab9115de3: mov    %r14,0x8(%rsp)
  0x00007f8ab9115de8: mov    %r15,(%rsp)
  0x00007f8ab9115dec: sub    $0x200,%rsp
  0x00007f8ab9115df3: fxsave64 (%rsp)
  0x00007f8ab9115df8: mov    %rbx,%rdi
  0x00007f8ab9115dfb: mov    %rax,%rsi
  0x00007f8ab9115dfe: callq  0x00007f8acef8bbca
  0x00007f8ab9115e03: fxrstor64 (%rsp)
  0x00007f8ab9115e08: add    $0x200,%rsp
  0x00007f8ab9115e0f: mov    (%rsp),%r15
  0x00007f8ab9115e13: mov    0x8(%rsp),%r14
  0x00007f8ab9115e18: mov    0x10(%rsp),%r13
  0x00007f8ab9115e1d: mov    0x18(%rsp),%r12
  0x00007f8ab9115e22: mov    0x20(%rsp),%r11
  0x00007f8ab9115e27: mov    0x28(%rsp),%r10
  0x00007f8ab9115e2c: mov    0x30(%rsp),%r9
  0x00007f8ab9115e31: mov    0x38(%rsp),%r8
  0x00007f8ab9115e36: mov    0x40(%rsp),%rdi
  0x00007f8ab9115e3b: mov    0x48(%rsp),%rsi
  0x00007f8ab9115e40: mov    0x50(%rsp),%rbp
  0x00007f8ab9115e45: mov    0x60(%rsp),%rbx
  0x00007f8ab9115e4a: mov    0x68(%rsp),%rdx
  0x00007f8ab9115e4f: mov    0x70(%rsp),%rcx
  0x00007f8ab9115e54: mov    0x78(%rsp),%rax
  0x00007f8ab9115e59: add    $0x80,%rsp
  0x00007f8ab9115e60: add    $0x8,%rsp
  0x00007f8ab9115e64: popfq  
  0x00007f8ab9115e65: mov    %r13,%rsp
  0x00007f8ab9115e68: pop    %rax
  0x00007f8ab9115e69: mov    %rsp,%r13
  0x00007f8ab9115e6c: sub    $0x20,%rsp
  0x00007f8ab9115e70: mov    %rax,(%rsp)
  0x00007f8ab9115e74: mov    %rsi,0x10(%rsp)
  0x00007f8ab9115e79: mov    %rdx,0x8(%rsp)
  0x00007f8ab9115e7e: mov    0x40(%rbx),%rcx
  0x00007f8ab9115e82: jmpq   *%rcx

AHE@0x00007f8ac80c4478: 0xbbbaa000 i2c: 0x00007f8ab9115f60 c2i: 0x00007f8ab9116084 c2iUV: 0x00007f8ab9116057
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (575 bytes generated)
c2i argument handler starts at 0x7f8ab9116084
  0x00007f8ab9115f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9115f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9115f6e: cmp    %r11,%rax
  0x00007f8ab9115f71: jbe    0x00007f8ab9115f8a
  0x00007f8ab9115f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9115f81: cmp    %r11,%rax
  0x00007f8ab9115f84: jb     0x00007f8ab9116027
  0x00007f8ab9115f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9115f94: cmp    %r11,%rax
  0x00007f8ab9115f97: jbe    0x00007f8ab9115fb0
  0x00007f8ab9115f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9115fa7: cmp    %r11,%rax
  0x00007f8ab9115faa: jb     0x00007f8ab9116027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9115fb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9115fb5: sub    $0x80,%rsp
  0x00007f8ab9115fbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9115fc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9115fc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9115fcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9115fd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9115fd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9115fda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9115fdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9115fe4: mov    %r9,0x30(%rsp)
  0x00007f8ab9115fe9: mov    %r10,0x28(%rsp)
  0x00007f8ab9115fee: mov    %r11,0x20(%rsp)
  0x00007f8ab9115ff3: mov    %r12,0x18(%rsp)
  0x00007f8ab9115ff8: mov    %r13,0x10(%rsp)
  0x00007f8ab9115ffd: mov    %r14,0x8(%rsp)
  0x00007f8ab9116002: mov    %r15,(%rsp)
  0x00007f8ab9116006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9116010: movabs $0x7f8ab9115fb0,%rsi
  0x00007f8ab911601a: mov    %rsp,%rdx
  0x00007f8ab911601d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116021: callq  0x00007f8aceddb9fa
  0x00007f8ab9116026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9116027: mov    %rsp,%r11
  0x00007f8ab911602a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911602e: push   %rax
  0x00007f8ab911602f: mov    %r11,%rax
  0x00007f8ab9116032: mov    0x50(%rbx),%r11
  0x00007f8ab9116036: mov    0x28(%rax),%rsi
  0x00007f8ab911603a: mov    0x20(%rax),%rdx
  0x00007f8ab911603e: mov    0x18(%rax),%rcx
  0x00007f8ab9116042: mov    0x10(%rax),%r8d
  0x00007f8ab9116046: mov    0x8(%rax),%r9d
  0x00007f8ab911604a: mov    %rbx,0x258(%r15)
  0x00007f8ab9116051: mov    %rbx,%rax
  0x00007f8ab9116054: jmpq   *%r11
  0x00007f8ab9116057: mov    0x8(%rsi),%ebx
  0x00007f8ab911605a: shl    $0x3,%rbx
  0x00007f8ab911605e: cmp    0x10(%rax),%rbx
  0x00007f8ab9116062: mov    0x8(%rax),%rbx
  0x00007f8ab9116066: je     0x00007f8ab9116071
  0x00007f8ab911606c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116071: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116079: je     0x00007f8ab9116174
  0x00007f8ab911607f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116084: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911608c: je     0x00007f8ab9116174
  0x00007f8ab9116092: mov    %rsp,%r13
  0x00007f8ab9116095: mov    (%rsp),%rax
  0x00007f8ab9116099: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911609d: pushfq 
  0x00007f8ab911609e: sub    $0x8,%rsp
  0x00007f8ab91160a2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91160a7: sub    $0x80,%rsp
  0x00007f8ab91160ae: mov    %rax,0x78(%rsp)
  0x00007f8ab91160b3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91160b8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91160bd: mov    %rbx,0x60(%rsp)
  0x00007f8ab91160c2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91160c7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91160cc: mov    %rdi,0x40(%rsp)
  0x00007f8ab91160d1: mov    %r8,0x38(%rsp)
  0x00007f8ab91160d6: mov    %r9,0x30(%rsp)
  0x00007f8ab91160db: mov    %r10,0x28(%rsp)
  0x00007f8ab91160e0: mov    %r11,0x20(%rsp)
  0x00007f8ab91160e5: mov    %r12,0x18(%rsp)
  0x00007f8ab91160ea: mov    %r13,0x10(%rsp)
  0x00007f8ab91160ef: mov    %r14,0x8(%rsp)
  0x00007f8ab91160f4: mov    %r15,(%rsp)
  0x00007f8ab91160f8: sub    $0x200,%rsp
  0x00007f8ab91160ff: fxsave64 (%rsp)
  0x00007f8ab9116104: mov    %rbx,%rdi
  0x00007f8ab9116107: mov    %rax,%rsi
  0x00007f8ab911610a: callq  0x00007f8acef8bbca
  0x00007f8ab911610f: fxrstor64 (%rsp)
  0x00007f8ab9116114: add    $0x200,%rsp
  0x00007f8ab911611b: mov    (%rsp),%r15
  0x00007f8ab911611f: mov    0x8(%rsp),%r14
  0x00007f8ab9116124: mov    0x10(%rsp),%r13
  0x00007f8ab9116129: mov    0x18(%rsp),%r12
  0x00007f8ab911612e: mov    0x20(%rsp),%r11
  0x00007f8ab9116133: mov    0x28(%rsp),%r10
  0x00007f8ab9116138: mov    0x30(%rsp),%r9
  0x00007f8ab911613d: mov    0x38(%rsp),%r8
  0x00007f8ab9116142: mov    0x40(%rsp),%rdi
  0x00007f8ab9116147: mov    0x48(%rsp),%rsi
  0x00007f8ab911614c: mov    0x50(%rsp),%rbp
  0x00007f8ab9116151: mov    0x60(%rsp),%rbx
  0x00007f8ab9116156: mov    0x68(%rsp),%rdx
  0x00007f8ab911615b: mov    0x70(%rsp),%rcx
  0x00007f8ab9116160: mov    0x78(%rsp),%rax
  0x00007f8ab9116165: add    $0x80,%rsp
  0x00007f8ab911616c: add    $0x8,%rsp
  0x00007f8ab9116170: popfq  
  0x00007f8ab9116171: mov    %r13,%rsp
  0x00007f8ab9116174: pop    %rax
  0x00007f8ab9116175: mov    %rsp,%r13
  0x00007f8ab9116178: sub    $0x30,%rsp
  0x00007f8ab911617c: mov    %rax,(%rsp)
  0x00007f8ab9116180: mov    %rsi,0x28(%rsp)
  0x00007f8ab9116185: mov    %rdx,0x20(%rsp)
  0x00007f8ab911618a: mov    %rcx,0x18(%rsp)
  0x00007f8ab911618f: mov    %r8d,0x10(%rsp)
  0x00007f8ab9116194: mov    %r9d,0x8(%rsp)
  0x00007f8ab9116199: mov    0x40(%rbx),%rcx
  0x00007f8ab911619d: jmpq   *%rcx

AHE@0x00007f8ac80c44c0: 0xb0000000 i2c: 0x00007f8ab9116260 c2i: 0x00007f8ab9116374 c2iUV: 0x00007f8ab9116347
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab9116374
  0x00007f8ab9116260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9116264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911626e: cmp    %r11,%rax
  0x00007f8ab9116271: jbe    0x00007f8ab911628a
  0x00007f8ab9116277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9116281: cmp    %r11,%rax
  0x00007f8ab9116284: jb     0x00007f8ab9116327
  0x00007f8ab911628a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9116294: cmp    %r11,%rax
  0x00007f8ab9116297: jbe    0x00007f8ab91162b0
  0x00007f8ab911629d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91162a7: cmp    %r11,%rax
  0x00007f8ab91162aa: jb     0x00007f8ab9116327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91162b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91162b5: sub    $0x80,%rsp
  0x00007f8ab91162bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91162c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91162c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91162cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91162d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91162d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91162da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91162df: mov    %r8,0x38(%rsp)
  0x00007f8ab91162e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91162e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91162ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91162f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91162f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91162fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9116302: mov    %r15,(%rsp)
  0x00007f8ab9116306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9116310: movabs $0x7f8ab91162b0,%rsi
  0x00007f8ab911631a: mov    %rsp,%rdx
  0x00007f8ab911631d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116321: callq  0x00007f8aceddb9fa
  0x00007f8ab9116326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9116327: mov    %rsp,%r11
  0x00007f8ab911632a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911632e: push   %rax
  0x00007f8ab911632f: mov    %r11,%rax
  0x00007f8ab9116332: mov    0x50(%rbx),%r11
  0x00007f8ab9116336: mov    0x8(%rax),%rsi
  0x00007f8ab911633a: mov    %rbx,0x258(%r15)
  0x00007f8ab9116341: mov    %rbx,%rax
  0x00007f8ab9116344: jmpq   *%r11
  0x00007f8ab9116347: mov    0x8(%rsi),%ebx
  0x00007f8ab911634a: shl    $0x3,%rbx
  0x00007f8ab911634e: cmp    0x10(%rax),%rbx
  0x00007f8ab9116352: mov    0x8(%rax),%rbx
  0x00007f8ab9116356: je     0x00007f8ab9116361
  0x00007f8ab911635c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116361: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116369: je     0x00007f8ab9116464
  0x00007f8ab911636f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116374: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911637c: je     0x00007f8ab9116464
  0x00007f8ab9116382: mov    %rsp,%r13
  0x00007f8ab9116385: mov    (%rsp),%rax
  0x00007f8ab9116389: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911638d: pushfq 
  0x00007f8ab911638e: sub    $0x8,%rsp
  0x00007f8ab9116392: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9116397: sub    $0x80,%rsp
  0x00007f8ab911639e: mov    %rax,0x78(%rsp)
  0x00007f8ab91163a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91163a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91163ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab91163b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91163b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91163bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab91163c1: mov    %r8,0x38(%rsp)
  0x00007f8ab91163c6: mov    %r9,0x30(%rsp)
  0x00007f8ab91163cb: mov    %r10,0x28(%rsp)
  0x00007f8ab91163d0: mov    %r11,0x20(%rsp)
  0x00007f8ab91163d5: mov    %r12,0x18(%rsp)
  0x00007f8ab91163da: mov    %r13,0x10(%rsp)
  0x00007f8ab91163df: mov    %r14,0x8(%rsp)
  0x00007f8ab91163e4: mov    %r15,(%rsp)
  0x00007f8ab91163e8: sub    $0x200,%rsp
  0x00007f8ab91163ef: fxsave64 (%rsp)
  0x00007f8ab91163f4: mov    %rbx,%rdi
  0x00007f8ab91163f7: mov    %rax,%rsi
  0x00007f8ab91163fa: callq  0x00007f8acef8bbca
  0x00007f8ab91163ff: fxrstor64 (%rsp)
  0x00007f8ab9116404: add    $0x200,%rsp
  0x00007f8ab911640b: mov    (%rsp),%r15
  0x00007f8ab911640f: mov    0x8(%rsp),%r14
  0x00007f8ab9116414: mov    0x10(%rsp),%r13
  0x00007f8ab9116419: mov    0x18(%rsp),%r12
  0x00007f8ab911641e: mov    0x20(%rsp),%r11
  0x00007f8ab9116423: mov    0x28(%rsp),%r10
  0x00007f8ab9116428: mov    0x30(%rsp),%r9
  0x00007f8ab911642d: mov    0x38(%rsp),%r8
  0x00007f8ab9116432: mov    0x40(%rsp),%rdi
  0x00007f8ab9116437: mov    0x48(%rsp),%rsi
  0x00007f8ab911643c: mov    0x50(%rsp),%rbp
  0x00007f8ab9116441: mov    0x60(%rsp),%rbx
  0x00007f8ab9116446: mov    0x68(%rsp),%rdx
  0x00007f8ab911644b: mov    0x70(%rsp),%rcx
  0x00007f8ab9116450: mov    0x78(%rsp),%rax
  0x00007f8ab9116455: add    $0x80,%rsp
  0x00007f8ab911645c: add    $0x8,%rsp
  0x00007f8ab9116460: popfq  
  0x00007f8ab9116461: mov    %r13,%rsp
  0x00007f8ab9116464: pop    %rax
  0x00007f8ab9116465: mov    %rsp,%r13
  0x00007f8ab9116468: sub    $0x10,%rsp
  0x00007f8ab911646c: mov    %rax,(%rsp)
  0x00007f8ab9116470: mov    %rsi,0x8(%rsp)
  0x00007f8ab9116475: mov    0x40(%rbx),%rcx
  0x00007f8ab9116479: jmpq   *%rcx

AHE@0x00007f8ac80c4508: 0xbb000000 i2c: 0x00007f8ab9116520 c2i: 0x00007f8ab9116638 c2iUV: 0x00007f8ab911660b
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9116638
  0x00007f8ab9116520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9116524: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911652e: cmp    %r11,%rax
  0x00007f8ab9116531: jbe    0x00007f8ab911654a
  0x00007f8ab9116537: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9116541: cmp    %r11,%rax
  0x00007f8ab9116544: jb     0x00007f8ab91165e7
  0x00007f8ab911654a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9116554: cmp    %r11,%rax
  0x00007f8ab9116557: jbe    0x00007f8ab9116570
  0x00007f8ab911655d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9116567: cmp    %r11,%rax
  0x00007f8ab911656a: jb     0x00007f8ab91165e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9116570: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9116575: sub    $0x80,%rsp
  0x00007f8ab911657c: mov    %rax,0x78(%rsp)
  0x00007f8ab9116581: mov    %rcx,0x70(%rsp)
  0x00007f8ab9116586: mov    %rdx,0x68(%rsp)
  0x00007f8ab911658b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9116590: mov    %rbp,0x50(%rsp)
  0x00007f8ab9116595: mov    %rsi,0x48(%rsp)
  0x00007f8ab911659a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911659f: mov    %r8,0x38(%rsp)
  0x00007f8ab91165a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91165a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91165ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91165b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91165b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91165bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91165c2: mov    %r15,(%rsp)
  0x00007f8ab91165c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91165d0: movabs $0x7f8ab9116570,%rsi
  0x00007f8ab91165da: mov    %rsp,%rdx
  0x00007f8ab91165dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91165e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91165e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91165e7: mov    %rsp,%r11
  0x00007f8ab91165ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91165ee: push   %rax
  0x00007f8ab91165ef: mov    %r11,%rax
  0x00007f8ab91165f2: mov    0x50(%rbx),%r11
  0x00007f8ab91165f6: mov    0x10(%rax),%rsi
  0x00007f8ab91165fa: mov    0x8(%rax),%rdx
  0x00007f8ab91165fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9116605: mov    %rbx,%rax
  0x00007f8ab9116608: jmpq   *%r11
  0x00007f8ab911660b: mov    0x8(%rsi),%ebx
  0x00007f8ab911660e: shl    $0x3,%rbx
  0x00007f8ab9116612: cmp    0x10(%rax),%rbx
  0x00007f8ab9116616: mov    0x8(%rax),%rbx
  0x00007f8ab911661a: je     0x00007f8ab9116625
  0x00007f8ab9116620: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116625: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911662d: je     0x00007f8ab9116728
  0x00007f8ab9116633: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116638: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116640: je     0x00007f8ab9116728
  0x00007f8ab9116646: mov    %rsp,%r13
  0x00007f8ab9116649: mov    (%rsp),%rax
  0x00007f8ab911664d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116651: pushfq 
  0x00007f8ab9116652: sub    $0x8,%rsp
  0x00007f8ab9116656: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911665b: sub    $0x80,%rsp
  0x00007f8ab9116662: mov    %rax,0x78(%rsp)
  0x00007f8ab9116667: mov    %rcx,0x70(%rsp)
  0x00007f8ab911666c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9116671: mov    %rbx,0x60(%rsp)
  0x00007f8ab9116676: mov    %rbp,0x50(%rsp)
  0x00007f8ab911667b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9116680: mov    %rdi,0x40(%rsp)
  0x00007f8ab9116685: mov    %r8,0x38(%rsp)
  0x00007f8ab911668a: mov    %r9,0x30(%rsp)
  0x00007f8ab911668f: mov    %r10,0x28(%rsp)
  0x00007f8ab9116694: mov    %r11,0x20(%rsp)
  0x00007f8ab9116699: mov    %r12,0x18(%rsp)
  0x00007f8ab911669e: mov    %r13,0x10(%rsp)
  0x00007f8ab91166a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91166a8: mov    %r15,(%rsp)
  0x00007f8ab91166ac: sub    $0x200,%rsp
  0x00007f8ab91166b3: fxsave64 (%rsp)
  0x00007f8ab91166b8: mov    %rbx,%rdi
  0x00007f8ab91166bb: mov    %rax,%rsi
  0x00007f8ab91166be: callq  0x00007f8acef8bbca
  0x00007f8ab91166c3: fxrstor64 (%rsp)
  0x00007f8ab91166c8: add    $0x200,%rsp
  0x00007f8ab91166cf: mov    (%rsp),%r15
  0x00007f8ab91166d3: mov    0x8(%rsp),%r14
  0x00007f8ab91166d8: mov    0x10(%rsp),%r13
  0x00007f8ab91166dd: mov    0x18(%rsp),%r12
  0x00007f8ab91166e2: mov    0x20(%rsp),%r11
  0x00007f8ab91166e7: mov    0x28(%rsp),%r10
  0x00007f8ab91166ec: mov    0x30(%rsp),%r9
  0x00007f8ab91166f1: mov    0x38(%rsp),%r8
  0x00007f8ab91166f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91166fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9116700: mov    0x50(%rsp),%rbp
  0x00007f8ab9116705: mov    0x60(%rsp),%rbx
  0x00007f8ab911670a: mov    0x68(%rsp),%rdx
  0x00007f8ab911670f: mov    0x70(%rsp),%rcx
  0x00007f8ab9116714: mov    0x78(%rsp),%rax
  0x00007f8ab9116719: add    $0x80,%rsp
  0x00007f8ab9116720: add    $0x8,%rsp
  0x00007f8ab9116724: popfq  
  0x00007f8ab9116725: mov    %r13,%rsp
  0x00007f8ab9116728: pop    %rax
  0x00007f8ab9116729: mov    %rsp,%r13
  0x00007f8ab911672c: sub    $0x20,%rsp
  0x00007f8ab9116730: mov    %rax,(%rsp)
  0x00007f8ab9116734: mov    %rsi,0x10(%rsp)
  0x00007f8ab9116739: mov    %rdx,0x8(%rsp)
  0x00007f8ab911673e: mov    0x40(%rbx),%rcx
  0x00007f8ab9116742: jmpq   *%rcx

AHE@0x00007f8ac80c4550: 0xbbb00000 i2c: 0x00007f8ab9116820 c2i: 0x00007f8ab911693c c2iUV: 0x00007f8ab911690f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab911693c
  0x00007f8ab9116820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9116824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911682e: cmp    %r11,%rax
  0x00007f8ab9116831: jbe    0x00007f8ab911684a
  0x00007f8ab9116837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9116841: cmp    %r11,%rax
  0x00007f8ab9116844: jb     0x00007f8ab91168e7
  0x00007f8ab911684a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9116854: cmp    %r11,%rax
  0x00007f8ab9116857: jbe    0x00007f8ab9116870
  0x00007f8ab911685d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9116867: cmp    %r11,%rax
  0x00007f8ab911686a: jb     0x00007f8ab91168e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9116870: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9116875: sub    $0x80,%rsp
  0x00007f8ab911687c: mov    %rax,0x78(%rsp)
  0x00007f8ab9116881: mov    %rcx,0x70(%rsp)
  0x00007f8ab9116886: mov    %rdx,0x68(%rsp)
  0x00007f8ab911688b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9116890: mov    %rbp,0x50(%rsp)
  0x00007f8ab9116895: mov    %rsi,0x48(%rsp)
  0x00007f8ab911689a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911689f: mov    %r8,0x38(%rsp)
  0x00007f8ab91168a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91168a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91168ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91168b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91168b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91168bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91168c2: mov    %r15,(%rsp)
  0x00007f8ab91168c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91168d0: movabs $0x7f8ab9116870,%rsi
  0x00007f8ab91168da: mov    %rsp,%rdx
  0x00007f8ab91168dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91168e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91168e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91168e7: mov    %rsp,%r11
  0x00007f8ab91168ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91168ee: push   %rax
  0x00007f8ab91168ef: mov    %r11,%rax
  0x00007f8ab91168f2: mov    0x50(%rbx),%r11
  0x00007f8ab91168f6: mov    0x18(%rax),%rsi
  0x00007f8ab91168fa: mov    0x10(%rax),%rdx
  0x00007f8ab91168fe: mov    0x8(%rax),%rcx
  0x00007f8ab9116902: mov    %rbx,0x258(%r15)
  0x00007f8ab9116909: mov    %rbx,%rax
  0x00007f8ab911690c: jmpq   *%r11
  0x00007f8ab911690f: mov    0x8(%rsi),%ebx
  0x00007f8ab9116912: shl    $0x3,%rbx
  0x00007f8ab9116916: cmp    0x10(%rax),%rbx
  0x00007f8ab911691a: mov    0x8(%rax),%rbx
  0x00007f8ab911691e: je     0x00007f8ab9116929
  0x00007f8ab9116924: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116929: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116931: je     0x00007f8ab9116a2c
  0x00007f8ab9116937: jmpq   0x00007f8ab9105c40
  0x00007f8ab911693c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116944: je     0x00007f8ab9116a2c
  0x00007f8ab911694a: mov    %rsp,%r13
  0x00007f8ab911694d: mov    (%rsp),%rax
  0x00007f8ab9116951: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116955: pushfq 
  0x00007f8ab9116956: sub    $0x8,%rsp
  0x00007f8ab911695a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911695f: sub    $0x80,%rsp
  0x00007f8ab9116966: mov    %rax,0x78(%rsp)
  0x00007f8ab911696b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9116970: mov    %rdx,0x68(%rsp)
  0x00007f8ab9116975: mov    %rbx,0x60(%rsp)
  0x00007f8ab911697a: mov    %rbp,0x50(%rsp)
  0x00007f8ab911697f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9116984: mov    %rdi,0x40(%rsp)
  0x00007f8ab9116989: mov    %r8,0x38(%rsp)
  0x00007f8ab911698e: mov    %r9,0x30(%rsp)
  0x00007f8ab9116993: mov    %r10,0x28(%rsp)
  0x00007f8ab9116998: mov    %r11,0x20(%rsp)
  0x00007f8ab911699d: mov    %r12,0x18(%rsp)
  0x00007f8ab91169a2: mov    %r13,0x10(%rsp)
  0x00007f8ab91169a7: mov    %r14,0x8(%rsp)
  0x00007f8ab91169ac: mov    %r15,(%rsp)
  0x00007f8ab91169b0: sub    $0x200,%rsp
  0x00007f8ab91169b7: fxsave64 (%rsp)
  0x00007f8ab91169bc: mov    %rbx,%rdi
  0x00007f8ab91169bf: mov    %rax,%rsi
  0x00007f8ab91169c2: callq  0x00007f8acef8bbca
  0x00007f8ab91169c7: fxrstor64 (%rsp)
  0x00007f8ab91169cc: add    $0x200,%rsp
  0x00007f8ab91169d3: mov    (%rsp),%r15
  0x00007f8ab91169d7: mov    0x8(%rsp),%r14
  0x00007f8ab91169dc: mov    0x10(%rsp),%r13
  0x00007f8ab91169e1: mov    0x18(%rsp),%r12
  0x00007f8ab91169e6: mov    0x20(%rsp),%r11
  0x00007f8ab91169eb: mov    0x28(%rsp),%r10
  0x00007f8ab91169f0: mov    0x30(%rsp),%r9
  0x00007f8ab91169f5: mov    0x38(%rsp),%r8
  0x00007f8ab91169fa: mov    0x40(%rsp),%rdi
  0x00007f8ab91169ff: mov    0x48(%rsp),%rsi
  0x00007f8ab9116a04: mov    0x50(%rsp),%rbp
  0x00007f8ab9116a09: mov    0x60(%rsp),%rbx
  0x00007f8ab9116a0e: mov    0x68(%rsp),%rdx
  0x00007f8ab9116a13: mov    0x70(%rsp),%rcx
  0x00007f8ab9116a18: mov    0x78(%rsp),%rax
  0x00007f8ab9116a1d: add    $0x80,%rsp
  0x00007f8ab9116a24: add    $0x8,%rsp
  0x00007f8ab9116a28: popfq  
  0x00007f8ab9116a29: mov    %r13,%rsp
  0x00007f8ab9116a2c: pop    %rax
  0x00007f8ab9116a2d: mov    %rsp,%r13
  0x00007f8ab9116a30: sub    $0x20,%rsp
  0x00007f8ab9116a34: mov    %rax,(%rsp)
  0x00007f8ab9116a38: mov    %rsi,0x18(%rsp)
  0x00007f8ab9116a3d: mov    %rdx,0x10(%rsp)
  0x00007f8ab9116a42: mov    %rcx,0x8(%rsp)
  0x00007f8ab9116a47: mov    0x40(%rbx),%rcx
  0x00007f8ab9116a4b: jmpq   *%rcx

AHE@0x00007f8ac80c4598: 0xbb000000 i2c: 0x00007f8ab9116b20 c2i: 0x00007f8ab9116c38 c2iUV: 0x00007f8ab9116c0b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9116c38
  0x00007f8ab9116b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9116b24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9116b2e: cmp    %r11,%rax
  0x00007f8ab9116b31: jbe    0x00007f8ab9116b4a
  0x00007f8ab9116b37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9116b41: cmp    %r11,%rax
  0x00007f8ab9116b44: jb     0x00007f8ab9116be7
  0x00007f8ab9116b4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9116b54: cmp    %r11,%rax
  0x00007f8ab9116b57: jbe    0x00007f8ab9116b70
  0x00007f8ab9116b5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9116b67: cmp    %r11,%rax
  0x00007f8ab9116b6a: jb     0x00007f8ab9116be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9116b70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9116b75: sub    $0x80,%rsp
  0x00007f8ab9116b7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9116b81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9116b86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9116b8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9116b90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9116b95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9116b9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9116b9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9116ba4: mov    %r9,0x30(%rsp)
  0x00007f8ab9116ba9: mov    %r10,0x28(%rsp)
  0x00007f8ab9116bae: mov    %r11,0x20(%rsp)
  0x00007f8ab9116bb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9116bb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9116bbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9116bc2: mov    %r15,(%rsp)
  0x00007f8ab9116bc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9116bd0: movabs $0x7f8ab9116b70,%rsi
  0x00007f8ab9116bda: mov    %rsp,%rdx
  0x00007f8ab9116bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116be1: callq  0x00007f8aceddb9fa
  0x00007f8ab9116be6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9116be7: mov    %rsp,%r11
  0x00007f8ab9116bea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116bee: push   %rax
  0x00007f8ab9116bef: mov    %r11,%rax
  0x00007f8ab9116bf2: mov    0x50(%rbx),%r11
  0x00007f8ab9116bf6: mov    0x10(%rax),%rsi
  0x00007f8ab9116bfa: mov    0x8(%rax),%rdx
  0x00007f8ab9116bfe: mov    %rbx,0x258(%r15)
  0x00007f8ab9116c05: mov    %rbx,%rax
  0x00007f8ab9116c08: jmpq   *%r11
  0x00007f8ab9116c0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9116c0e: shl    $0x3,%rbx
  0x00007f8ab9116c12: cmp    0x10(%rax),%rbx
  0x00007f8ab9116c16: mov    0x8(%rax),%rbx
  0x00007f8ab9116c1a: je     0x00007f8ab9116c25
  0x00007f8ab9116c20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116c25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116c2d: je     0x00007f8ab9116d28
  0x00007f8ab9116c33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116c38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116c40: je     0x00007f8ab9116d28
  0x00007f8ab9116c46: mov    %rsp,%r13
  0x00007f8ab9116c49: mov    (%rsp),%rax
  0x00007f8ab9116c4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116c51: pushfq 
  0x00007f8ab9116c52: sub    $0x8,%rsp
  0x00007f8ab9116c56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9116c5b: sub    $0x80,%rsp
  0x00007f8ab9116c62: mov    %rax,0x78(%rsp)
  0x00007f8ab9116c67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9116c6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9116c71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9116c76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9116c7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9116c80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9116c85: mov    %r8,0x38(%rsp)
  0x00007f8ab9116c8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9116c8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9116c94: mov    %r11,0x20(%rsp)
  0x00007f8ab9116c99: mov    %r12,0x18(%rsp)
  0x00007f8ab9116c9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9116ca3: mov    %r14,0x8(%rsp)
  0x00007f8ab9116ca8: mov    %r15,(%rsp)
  0x00007f8ab9116cac: sub    $0x200,%rsp
  0x00007f8ab9116cb3: fxsave64 (%rsp)
  0x00007f8ab9116cb8: mov    %rbx,%rdi
  0x00007f8ab9116cbb: mov    %rax,%rsi
  0x00007f8ab9116cbe: callq  0x00007f8acef8bbca
  0x00007f8ab9116cc3: fxrstor64 (%rsp)
  0x00007f8ab9116cc8: add    $0x200,%rsp
  0x00007f8ab9116ccf: mov    (%rsp),%r15
  0x00007f8ab9116cd3: mov    0x8(%rsp),%r14
  0x00007f8ab9116cd8: mov    0x10(%rsp),%r13
  0x00007f8ab9116cdd: mov    0x18(%rsp),%r12
  0x00007f8ab9116ce2: mov    0x20(%rsp),%r11
  0x00007f8ab9116ce7: mov    0x28(%rsp),%r10
  0x00007f8ab9116cec: mov    0x30(%rsp),%r9
  0x00007f8ab9116cf1: mov    0x38(%rsp),%r8
  0x00007f8ab9116cf6: mov    0x40(%rsp),%rdi
  0x00007f8ab9116cfb: mov    0x48(%rsp),%rsi
  0x00007f8ab9116d00: mov    0x50(%rsp),%rbp
  0x00007f8ab9116d05: mov    0x60(%rsp),%rbx
  0x00007f8ab9116d0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9116d0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9116d14: mov    0x78(%rsp),%rax
  0x00007f8ab9116d19: add    $0x80,%rsp
  0x00007f8ab9116d20: add    $0x8,%rsp
  0x00007f8ab9116d24: popfq  
  0x00007f8ab9116d25: mov    %r13,%rsp
  0x00007f8ab9116d28: pop    %rax
  0x00007f8ab9116d29: mov    %rsp,%r13
  0x00007f8ab9116d2c: sub    $0x20,%rsp
  0x00007f8ab9116d30: mov    %rax,(%rsp)
  0x00007f8ab9116d34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9116d39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9116d3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9116d42: jmpq   *%rcx

AHE@0x00007f8ac80c45e0: 0xb0000000 i2c: 0x00007f8ab9116e20 c2i: 0x00007f8ab9116f34 c2iUV: 0x00007f8ab9116f07
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f8ab9116f34
  0x00007f8ab9116e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9116e24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9116e2e: cmp    %r11,%rax
  0x00007f8ab9116e31: jbe    0x00007f8ab9116e4a
  0x00007f8ab9116e37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9116e41: cmp    %r11,%rax
  0x00007f8ab9116e44: jb     0x00007f8ab9116ee7
  0x00007f8ab9116e4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9116e54: cmp    %r11,%rax
  0x00007f8ab9116e57: jbe    0x00007f8ab9116e70
  0x00007f8ab9116e5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9116e67: cmp    %r11,%rax
  0x00007f8ab9116e6a: jb     0x00007f8ab9116ee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9116e70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9116e75: sub    $0x80,%rsp
  0x00007f8ab9116e7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9116e81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9116e86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9116e8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9116e90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9116e95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9116e9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9116e9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9116ea4: mov    %r9,0x30(%rsp)
  0x00007f8ab9116ea9: mov    %r10,0x28(%rsp)
  0x00007f8ab9116eae: mov    %r11,0x20(%rsp)
  0x00007f8ab9116eb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9116eb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9116ebd: mov    %r14,0x8(%rsp)
  0x00007f8ab9116ec2: mov    %r15,(%rsp)
  0x00007f8ab9116ec6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9116ed0: movabs $0x7f8ab9116e70,%rsi
  0x00007f8ab9116eda: mov    %rsp,%rdx
  0x00007f8ab9116edd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116ee1: callq  0x00007f8aceddb9fa
  0x00007f8ab9116ee6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9116ee7: mov    %rsp,%r11
  0x00007f8ab9116eea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116eee: push   %rax
  0x00007f8ab9116eef: mov    %r11,%rax
  0x00007f8ab9116ef2: mov    0x50(%rbx),%r11
  0x00007f8ab9116ef6: mov    0x8(%rax),%rsi
  0x00007f8ab9116efa: mov    %rbx,0x258(%r15)
  0x00007f8ab9116f01: mov    %rbx,%rax
  0x00007f8ab9116f04: jmpq   *%r11
  0x00007f8ab9116f07: mov    0x8(%rsi),%ebx
  0x00007f8ab9116f0a: shl    $0x3,%rbx
  0x00007f8ab9116f0e: cmp    0x10(%rax),%rbx
  0x00007f8ab9116f12: mov    0x8(%rax),%rbx
  0x00007f8ab9116f16: je     0x00007f8ab9116f21
  0x00007f8ab9116f1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116f21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116f29: je     0x00007f8ab9117024
  0x00007f8ab9116f2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9116f34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9116f3c: je     0x00007f8ab9117024
  0x00007f8ab9116f42: mov    %rsp,%r13
  0x00007f8ab9116f45: mov    (%rsp),%rax
  0x00007f8ab9116f49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9116f4d: pushfq 
  0x00007f8ab9116f4e: sub    $0x8,%rsp
  0x00007f8ab9116f52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9116f57: sub    $0x80,%rsp
  0x00007f8ab9116f5e: mov    %rax,0x78(%rsp)
  0x00007f8ab9116f63: mov    %rcx,0x70(%rsp)
  0x00007f8ab9116f68: mov    %rdx,0x68(%rsp)
  0x00007f8ab9116f6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9116f72: mov    %rbp,0x50(%rsp)
  0x00007f8ab9116f77: mov    %rsi,0x48(%rsp)
  0x00007f8ab9116f7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9116f81: mov    %r8,0x38(%rsp)
  0x00007f8ab9116f86: mov    %r9,0x30(%rsp)
  0x00007f8ab9116f8b: mov    %r10,0x28(%rsp)
  0x00007f8ab9116f90: mov    %r11,0x20(%rsp)
  0x00007f8ab9116f95: mov    %r12,0x18(%rsp)
  0x00007f8ab9116f9a: mov    %r13,0x10(%rsp)
  0x00007f8ab9116f9f: mov    %r14,0x8(%rsp)
  0x00007f8ab9116fa4: mov    %r15,(%rsp)
  0x00007f8ab9116fa8: sub    $0x200,%rsp
  0x00007f8ab9116faf: fxsave64 (%rsp)
  0x00007f8ab9116fb4: mov    %rbx,%rdi
  0x00007f8ab9116fb7: mov    %rax,%rsi
  0x00007f8ab9116fba: callq  0x00007f8acef8bbca
  0x00007f8ab9116fbf: fxrstor64 (%rsp)
  0x00007f8ab9116fc4: add    $0x200,%rsp
  0x00007f8ab9116fcb: mov    (%rsp),%r15
  0x00007f8ab9116fcf: mov    0x8(%rsp),%r14
  0x00007f8ab9116fd4: mov    0x10(%rsp),%r13
  0x00007f8ab9116fd9: mov    0x18(%rsp),%r12
  0x00007f8ab9116fde: mov    0x20(%rsp),%r11
  0x00007f8ab9116fe3: mov    0x28(%rsp),%r10
  0x00007f8ab9116fe8: mov    0x30(%rsp),%r9
  0x00007f8ab9116fed: mov    0x38(%rsp),%r8
  0x00007f8ab9116ff2: mov    0x40(%rsp),%rdi
  0x00007f8ab9116ff7: mov    0x48(%rsp),%rsi
  0x00007f8ab9116ffc: mov    0x50(%rsp),%rbp
  0x00007f8ab9117001: mov    0x60(%rsp),%rbx
  0x00007f8ab9117006: mov    0x68(%rsp),%rdx
  0x00007f8ab911700b: mov    0x70(%rsp),%rcx
  0x00007f8ab9117010: mov    0x78(%rsp),%rax
  0x00007f8ab9117015: add    $0x80,%rsp
  0x00007f8ab911701c: add    $0x8,%rsp
  0x00007f8ab9117020: popfq  
  0x00007f8ab9117021: mov    %r13,%rsp
  0x00007f8ab9117024: pop    %rax
  0x00007f8ab9117025: mov    %rsp,%r13
  0x00007f8ab9117028: sub    $0x10,%rsp
  0x00007f8ab911702c: mov    %rax,(%rsp)
  0x00007f8ab9117030: mov    %rsi,0x8(%rsp)
  0x00007f8ab9117035: mov    0x40(%rbx),%rcx
  0x00007f8ab9117039: jmpq   *%rcx

AHE@0x00007f8ac80c4628: 0xb0000000 i2c: 0x00007f8ab91170e0 c2i: 0x00007f8ab91171f4 c2iUV: 0x00007f8ab91171c7
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f8ab91171f4
  0x00007f8ab91170e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91170e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91170ee: cmp    %r11,%rax
  0x00007f8ab91170f1: jbe    0x00007f8ab911710a
  0x00007f8ab91170f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9117101: cmp    %r11,%rax
  0x00007f8ab9117104: jb     0x00007f8ab91171a7
  0x00007f8ab911710a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9117114: cmp    %r11,%rax
  0x00007f8ab9117117: jbe    0x00007f8ab9117130
  0x00007f8ab911711d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9117127: cmp    %r11,%rax
  0x00007f8ab911712a: jb     0x00007f8ab91171a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9117130: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117135: sub    $0x80,%rsp
  0x00007f8ab911713c: mov    %rax,0x78(%rsp)
  0x00007f8ab9117141: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117146: mov    %rdx,0x68(%rsp)
  0x00007f8ab911714b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117150: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117155: mov    %rsi,0x48(%rsp)
  0x00007f8ab911715a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911715f: mov    %r8,0x38(%rsp)
  0x00007f8ab9117164: mov    %r9,0x30(%rsp)
  0x00007f8ab9117169: mov    %r10,0x28(%rsp)
  0x00007f8ab911716e: mov    %r11,0x20(%rsp)
  0x00007f8ab9117173: mov    %r12,0x18(%rsp)
  0x00007f8ab9117178: mov    %r13,0x10(%rsp)
  0x00007f8ab911717d: mov    %r14,0x8(%rsp)
  0x00007f8ab9117182: mov    %r15,(%rsp)
  0x00007f8ab9117186: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9117190: movabs $0x7f8ab9117130,%rsi
  0x00007f8ab911719a: mov    %rsp,%rdx
  0x00007f8ab911719d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91171a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91171a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91171a7: mov    %rsp,%r11
  0x00007f8ab91171aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91171ae: push   %rax
  0x00007f8ab91171af: mov    %r11,%rax
  0x00007f8ab91171b2: mov    0x50(%rbx),%r11
  0x00007f8ab91171b6: mov    0x8(%rax),%rsi
  0x00007f8ab91171ba: mov    %rbx,0x258(%r15)
  0x00007f8ab91171c1: mov    %rbx,%rax
  0x00007f8ab91171c4: jmpq   *%r11
  0x00007f8ab91171c7: mov    0x8(%rsi),%ebx
  0x00007f8ab91171ca: shl    $0x3,%rbx
  0x00007f8ab91171ce: cmp    0x10(%rax),%rbx
  0x00007f8ab91171d2: mov    0x8(%rax),%rbx
  0x00007f8ab91171d6: je     0x00007f8ab91171e1
  0x00007f8ab91171dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab91171e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91171e9: je     0x00007f8ab91172e4
  0x00007f8ab91171ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab91171f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91171fc: je     0x00007f8ab91172e4
  0x00007f8ab9117202: mov    %rsp,%r13
  0x00007f8ab9117205: mov    (%rsp),%rax
  0x00007f8ab9117209: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911720d: pushfq 
  0x00007f8ab911720e: sub    $0x8,%rsp
  0x00007f8ab9117212: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117217: sub    $0x80,%rsp
  0x00007f8ab911721e: mov    %rax,0x78(%rsp)
  0x00007f8ab9117223: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117228: mov    %rdx,0x68(%rsp)
  0x00007f8ab911722d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117232: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117237: mov    %rsi,0x48(%rsp)
  0x00007f8ab911723c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9117241: mov    %r8,0x38(%rsp)
  0x00007f8ab9117246: mov    %r9,0x30(%rsp)
  0x00007f8ab911724b: mov    %r10,0x28(%rsp)
  0x00007f8ab9117250: mov    %r11,0x20(%rsp)
  0x00007f8ab9117255: mov    %r12,0x18(%rsp)
  0x00007f8ab911725a: mov    %r13,0x10(%rsp)
  0x00007f8ab911725f: mov    %r14,0x8(%rsp)
  0x00007f8ab9117264: mov    %r15,(%rsp)
  0x00007f8ab9117268: sub    $0x200,%rsp
  0x00007f8ab911726f: fxsave64 (%rsp)
  0x00007f8ab9117274: mov    %rbx,%rdi
  0x00007f8ab9117277: mov    %rax,%rsi
  0x00007f8ab911727a: callq  0x00007f8acef8bbca
  0x00007f8ab911727f: fxrstor64 (%rsp)
  0x00007f8ab9117284: add    $0x200,%rsp
  0x00007f8ab911728b: mov    (%rsp),%r15
  0x00007f8ab911728f: mov    0x8(%rsp),%r14
  0x00007f8ab9117294: mov    0x10(%rsp),%r13
  0x00007f8ab9117299: mov    0x18(%rsp),%r12
  0x00007f8ab911729e: mov    0x20(%rsp),%r11
  0x00007f8ab91172a3: mov    0x28(%rsp),%r10
  0x00007f8ab91172a8: mov    0x30(%rsp),%r9
  0x00007f8ab91172ad: mov    0x38(%rsp),%r8
  0x00007f8ab91172b2: mov    0x40(%rsp),%rdi
  0x00007f8ab91172b7: mov    0x48(%rsp),%rsi
  0x00007f8ab91172bc: mov    0x50(%rsp),%rbp
  0x00007f8ab91172c1: mov    0x60(%rsp),%rbx
  0x00007f8ab91172c6: mov    0x68(%rsp),%rdx
  0x00007f8ab91172cb: mov    0x70(%rsp),%rcx
  0x00007f8ab91172d0: mov    0x78(%rsp),%rax
  0x00007f8ab91172d5: add    $0x80,%rsp
  0x00007f8ab91172dc: add    $0x8,%rsp
  0x00007f8ab91172e0: popfq  
  0x00007f8ab91172e1: mov    %r13,%rsp
  0x00007f8ab91172e4: pop    %rax
  0x00007f8ab91172e5: mov    %rsp,%r13
  0x00007f8ab91172e8: sub    $0x10,%rsp
  0x00007f8ab91172ec: mov    %rax,(%rsp)
  0x00007f8ab91172f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91172f5: mov    0x40(%rbx),%rcx
  0x00007f8ab91172f9: jmpq   *%rcx

AHE@0x00007f8ac80c4670: 0xa0000000 i2c: 0x00007f8ab91173a0 c2i: 0x00007f8ab91174b3 c2iUV: 0x00007f8ab9117486
i2c argument handler #0 for: static (Z)Z (537 bytes generated)
c2i argument handler starts at 0x7f8ab91174b3
  0x00007f8ab91173a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91173a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91173ae: cmp    %r11,%rax
  0x00007f8ab91173b1: jbe    0x00007f8ab91173ca
  0x00007f8ab91173b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91173c1: cmp    %r11,%rax
  0x00007f8ab91173c4: jb     0x00007f8ab9117467
  0x00007f8ab91173ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91173d4: cmp    %r11,%rax
  0x00007f8ab91173d7: jbe    0x00007f8ab91173f0
  0x00007f8ab91173dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91173e7: cmp    %r11,%rax
  0x00007f8ab91173ea: jb     0x00007f8ab9117467
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91173f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91173f5: sub    $0x80,%rsp
  0x00007f8ab91173fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9117401: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117406: mov    %rdx,0x68(%rsp)
  0x00007f8ab911740b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117410: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117415: mov    %rsi,0x48(%rsp)
  0x00007f8ab911741a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911741f: mov    %r8,0x38(%rsp)
  0x00007f8ab9117424: mov    %r9,0x30(%rsp)
  0x00007f8ab9117429: mov    %r10,0x28(%rsp)
  0x00007f8ab911742e: mov    %r11,0x20(%rsp)
  0x00007f8ab9117433: mov    %r12,0x18(%rsp)
  0x00007f8ab9117438: mov    %r13,0x10(%rsp)
  0x00007f8ab911743d: mov    %r14,0x8(%rsp)
  0x00007f8ab9117442: mov    %r15,(%rsp)
  0x00007f8ab9117446: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9117450: movabs $0x7f8ab91173f0,%rsi
  0x00007f8ab911745a: mov    %rsp,%rdx
  0x00007f8ab911745d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117461: callq  0x00007f8aceddb9fa
  0x00007f8ab9117466: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9117467: mov    %rsp,%r11
  0x00007f8ab911746a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911746e: push   %rax
  0x00007f8ab911746f: mov    %r11,%rax
  0x00007f8ab9117472: mov    0x50(%rbx),%r11
  0x00007f8ab9117476: mov    0x8(%rax),%esi
  0x00007f8ab9117479: mov    %rbx,0x258(%r15)
  0x00007f8ab9117480: mov    %rbx,%rax
  0x00007f8ab9117483: jmpq   *%r11
  0x00007f8ab9117486: mov    0x8(%rsi),%ebx
  0x00007f8ab9117489: shl    $0x3,%rbx
  0x00007f8ab911748d: cmp    0x10(%rax),%rbx
  0x00007f8ab9117491: mov    0x8(%rax),%rbx
  0x00007f8ab9117495: je     0x00007f8ab91174a0
  0x00007f8ab911749b: jmpq   0x00007f8ab9105c40
  0x00007f8ab91174a0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91174a8: je     0x00007f8ab91175a3
  0x00007f8ab91174ae: jmpq   0x00007f8ab9105c40
  0x00007f8ab91174b3: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91174bb: je     0x00007f8ab91175a3
  0x00007f8ab91174c1: mov    %rsp,%r13
  0x00007f8ab91174c4: mov    (%rsp),%rax
  0x00007f8ab91174c8: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91174cc: pushfq 
  0x00007f8ab91174cd: sub    $0x8,%rsp
  0x00007f8ab91174d1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91174d6: sub    $0x80,%rsp
  0x00007f8ab91174dd: mov    %rax,0x78(%rsp)
  0x00007f8ab91174e2: mov    %rcx,0x70(%rsp)
  0x00007f8ab91174e7: mov    %rdx,0x68(%rsp)
  0x00007f8ab91174ec: mov    %rbx,0x60(%rsp)
  0x00007f8ab91174f1: mov    %rbp,0x50(%rsp)
  0x00007f8ab91174f6: mov    %rsi,0x48(%rsp)
  0x00007f8ab91174fb: mov    %rdi,0x40(%rsp)
  0x00007f8ab9117500: mov    %r8,0x38(%rsp)
  0x00007f8ab9117505: mov    %r9,0x30(%rsp)
  0x00007f8ab911750a: mov    %r10,0x28(%rsp)
  0x00007f8ab911750f: mov    %r11,0x20(%rsp)
  0x00007f8ab9117514: mov    %r12,0x18(%rsp)
  0x00007f8ab9117519: mov    %r13,0x10(%rsp)
  0x00007f8ab911751e: mov    %r14,0x8(%rsp)
  0x00007f8ab9117523: mov    %r15,(%rsp)
  0x00007f8ab9117527: sub    $0x200,%rsp
  0x00007f8ab911752e: fxsave64 (%rsp)
  0x00007f8ab9117533: mov    %rbx,%rdi
  0x00007f8ab9117536: mov    %rax,%rsi
  0x00007f8ab9117539: callq  0x00007f8acef8bbca
  0x00007f8ab911753e: fxrstor64 (%rsp)
  0x00007f8ab9117543: add    $0x200,%rsp
  0x00007f8ab911754a: mov    (%rsp),%r15
  0x00007f8ab911754e: mov    0x8(%rsp),%r14
  0x00007f8ab9117553: mov    0x10(%rsp),%r13
  0x00007f8ab9117558: mov    0x18(%rsp),%r12
  0x00007f8ab911755d: mov    0x20(%rsp),%r11
  0x00007f8ab9117562: mov    0x28(%rsp),%r10
  0x00007f8ab9117567: mov    0x30(%rsp),%r9
  0x00007f8ab911756c: mov    0x38(%rsp),%r8
  0x00007f8ab9117571: mov    0x40(%rsp),%rdi
  0x00007f8ab9117576: mov    0x48(%rsp),%rsi
  0x00007f8ab911757b: mov    0x50(%rsp),%rbp
  0x00007f8ab9117580: mov    0x60(%rsp),%rbx
  0x00007f8ab9117585: mov    0x68(%rsp),%rdx
  0x00007f8ab911758a: mov    0x70(%rsp),%rcx
  0x00007f8ab911758f: mov    0x78(%rsp),%rax
  0x00007f8ab9117594: add    $0x80,%rsp
  0x00007f8ab911759b: add    $0x8,%rsp
  0x00007f8ab911759f: popfq  
  0x00007f8ab91175a0: mov    %r13,%rsp
  0x00007f8ab91175a3: pop    %rax
  0x00007f8ab91175a4: mov    %rsp,%r13
  0x00007f8ab91175a7: sub    $0x10,%rsp
  0x00007f8ab91175ab: mov    %rax,(%rsp)
  0x00007f8ab91175af: mov    %esi,0x8(%rsp)
  0x00007f8ab91175b3: mov    0x40(%rbx),%rcx
  0x00007f8ab91175b7: jmpq   *%rcx

AHE@0x00007f8ac80c46b8: 0xb0000000 i2c: 0x00007f8ab9117660 c2i: 0x00007f8ab9117774 c2iUV: 0x00007f8ab9117747
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab9117774
  0x00007f8ab9117660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9117664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911766e: cmp    %r11,%rax
  0x00007f8ab9117671: jbe    0x00007f8ab911768a
  0x00007f8ab9117677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9117681: cmp    %r11,%rax
  0x00007f8ab9117684: jb     0x00007f8ab9117727
  0x00007f8ab911768a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9117694: cmp    %r11,%rax
  0x00007f8ab9117697: jbe    0x00007f8ab91176b0
  0x00007f8ab911769d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91176a7: cmp    %r11,%rax
  0x00007f8ab91176aa: jb     0x00007f8ab9117727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91176b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91176b5: sub    $0x80,%rsp
  0x00007f8ab91176bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91176c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91176c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91176cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91176d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91176d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91176da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91176df: mov    %r8,0x38(%rsp)
  0x00007f8ab91176e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91176e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91176ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91176f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91176f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91176fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9117702: mov    %r15,(%rsp)
  0x00007f8ab9117706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9117710: movabs $0x7f8ab91176b0,%rsi
  0x00007f8ab911771a: mov    %rsp,%rdx
  0x00007f8ab911771d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117721: callq  0x00007f8aceddb9fa
  0x00007f8ab9117726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9117727: mov    %rsp,%r11
  0x00007f8ab911772a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911772e: push   %rax
  0x00007f8ab911772f: mov    %r11,%rax
  0x00007f8ab9117732: mov    0x50(%rbx),%r11
  0x00007f8ab9117736: mov    0x8(%rax),%rsi
  0x00007f8ab911773a: mov    %rbx,0x258(%r15)
  0x00007f8ab9117741: mov    %rbx,%rax
  0x00007f8ab9117744: jmpq   *%r11
  0x00007f8ab9117747: mov    0x8(%rsi),%ebx
  0x00007f8ab911774a: shl    $0x3,%rbx
  0x00007f8ab911774e: cmp    0x10(%rax),%rbx
  0x00007f8ab9117752: mov    0x8(%rax),%rbx
  0x00007f8ab9117756: je     0x00007f8ab9117761
  0x00007f8ab911775c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117761: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9117769: je     0x00007f8ab9117864
  0x00007f8ab911776f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117774: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911777c: je     0x00007f8ab9117864
  0x00007f8ab9117782: mov    %rsp,%r13
  0x00007f8ab9117785: mov    (%rsp),%rax
  0x00007f8ab9117789: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911778d: pushfq 
  0x00007f8ab911778e: sub    $0x8,%rsp
  0x00007f8ab9117792: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117797: sub    $0x80,%rsp
  0x00007f8ab911779e: mov    %rax,0x78(%rsp)
  0x00007f8ab91177a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91177a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91177ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab91177b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91177b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91177bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab91177c1: mov    %r8,0x38(%rsp)
  0x00007f8ab91177c6: mov    %r9,0x30(%rsp)
  0x00007f8ab91177cb: mov    %r10,0x28(%rsp)
  0x00007f8ab91177d0: mov    %r11,0x20(%rsp)
  0x00007f8ab91177d5: mov    %r12,0x18(%rsp)
  0x00007f8ab91177da: mov    %r13,0x10(%rsp)
  0x00007f8ab91177df: mov    %r14,0x8(%rsp)
  0x00007f8ab91177e4: mov    %r15,(%rsp)
  0x00007f8ab91177e8: sub    $0x200,%rsp
  0x00007f8ab91177ef: fxsave64 (%rsp)
  0x00007f8ab91177f4: mov    %rbx,%rdi
  0x00007f8ab91177f7: mov    %rax,%rsi
  0x00007f8ab91177fa: callq  0x00007f8acef8bbca
  0x00007f8ab91177ff: fxrstor64 (%rsp)
  0x00007f8ab9117804: add    $0x200,%rsp
  0x00007f8ab911780b: mov    (%rsp),%r15
  0x00007f8ab911780f: mov    0x8(%rsp),%r14
  0x00007f8ab9117814: mov    0x10(%rsp),%r13
  0x00007f8ab9117819: mov    0x18(%rsp),%r12
  0x00007f8ab911781e: mov    0x20(%rsp),%r11
  0x00007f8ab9117823: mov    0x28(%rsp),%r10
  0x00007f8ab9117828: mov    0x30(%rsp),%r9
  0x00007f8ab911782d: mov    0x38(%rsp),%r8
  0x00007f8ab9117832: mov    0x40(%rsp),%rdi
  0x00007f8ab9117837: mov    0x48(%rsp),%rsi
  0x00007f8ab911783c: mov    0x50(%rsp),%rbp
  0x00007f8ab9117841: mov    0x60(%rsp),%rbx
  0x00007f8ab9117846: mov    0x68(%rsp),%rdx
  0x00007f8ab911784b: mov    0x70(%rsp),%rcx
  0x00007f8ab9117850: mov    0x78(%rsp),%rax
  0x00007f8ab9117855: add    $0x80,%rsp
  0x00007f8ab911785c: add    $0x8,%rsp
  0x00007f8ab9117860: popfq  
  0x00007f8ab9117861: mov    %r13,%rsp
  0x00007f8ab9117864: pop    %rax
  0x00007f8ab9117865: mov    %rsp,%r13
  0x00007f8ab9117868: sub    $0x10,%rsp
  0x00007f8ab911786c: mov    %rax,(%rsp)
  0x00007f8ab9117870: mov    %rsi,0x8(%rsp)
  0x00007f8ab9117875: mov    0x40(%rbx),%rcx
  0x00007f8ab9117879: jmpq   *%rcx

AHE@0x00007f8ac80c4700: 0xb0000000 i2c: 0x00007f8ab9117920 c2i: 0x00007f8ab9117a34 c2iUV: 0x00007f8ab9117a07
i2c argument handler #0 for: receiver ()Ljava/lang/Object; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9117a34
  0x00007f8ab9117920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9117924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911792e: cmp    %r11,%rax
  0x00007f8ab9117931: jbe    0x00007f8ab911794a
  0x00007f8ab9117937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9117941: cmp    %r11,%rax
  0x00007f8ab9117944: jb     0x00007f8ab91179e7
  0x00007f8ab911794a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9117954: cmp    %r11,%rax
  0x00007f8ab9117957: jbe    0x00007f8ab9117970
  0x00007f8ab911795d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9117967: cmp    %r11,%rax
  0x00007f8ab911796a: jb     0x00007f8ab91179e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9117970: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117975: sub    $0x80,%rsp
  0x00007f8ab911797c: mov    %rax,0x78(%rsp)
  0x00007f8ab9117981: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117986: mov    %rdx,0x68(%rsp)
  0x00007f8ab911798b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117990: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117995: mov    %rsi,0x48(%rsp)
  0x00007f8ab911799a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911799f: mov    %r8,0x38(%rsp)
  0x00007f8ab91179a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91179a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91179ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91179b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91179b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91179bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91179c2: mov    %r15,(%rsp)
  0x00007f8ab91179c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91179d0: movabs $0x7f8ab9117970,%rsi
  0x00007f8ab91179da: mov    %rsp,%rdx
  0x00007f8ab91179dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91179e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91179e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91179e7: mov    %rsp,%r11
  0x00007f8ab91179ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91179ee: push   %rax
  0x00007f8ab91179ef: mov    %r11,%rax
  0x00007f8ab91179f2: mov    0x50(%rbx),%r11
  0x00007f8ab91179f6: mov    0x8(%rax),%rsi
  0x00007f8ab91179fa: mov    %rbx,0x258(%r15)
  0x00007f8ab9117a01: mov    %rbx,%rax
  0x00007f8ab9117a04: jmpq   *%r11
  0x00007f8ab9117a07: mov    0x8(%rsi),%ebx
  0x00007f8ab9117a0a: shl    $0x3,%rbx
  0x00007f8ab9117a0e: cmp    0x10(%rax),%rbx
  0x00007f8ab9117a12: mov    0x8(%rax),%rbx
  0x00007f8ab9117a16: je     0x00007f8ab9117a21
  0x00007f8ab9117a1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117a21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9117a29: je     0x00007f8ab9117b24
  0x00007f8ab9117a2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117a34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9117a3c: je     0x00007f8ab9117b24
  0x00007f8ab9117a42: mov    %rsp,%r13
  0x00007f8ab9117a45: mov    (%rsp),%rax
  0x00007f8ab9117a49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117a4d: pushfq 
  0x00007f8ab9117a4e: sub    $0x8,%rsp
  0x00007f8ab9117a52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117a57: sub    $0x80,%rsp
  0x00007f8ab9117a5e: mov    %rax,0x78(%rsp)
  0x00007f8ab9117a63: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117a68: mov    %rdx,0x68(%rsp)
  0x00007f8ab9117a6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117a72: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117a77: mov    %rsi,0x48(%rsp)
  0x00007f8ab9117a7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9117a81: mov    %r8,0x38(%rsp)
  0x00007f8ab9117a86: mov    %r9,0x30(%rsp)
  0x00007f8ab9117a8b: mov    %r10,0x28(%rsp)
  0x00007f8ab9117a90: mov    %r11,0x20(%rsp)
  0x00007f8ab9117a95: mov    %r12,0x18(%rsp)
  0x00007f8ab9117a9a: mov    %r13,0x10(%rsp)
  0x00007f8ab9117a9f: mov    %r14,0x8(%rsp)
  0x00007f8ab9117aa4: mov    %r15,(%rsp)
  0x00007f8ab9117aa8: sub    $0x200,%rsp
  0x00007f8ab9117aaf: fxsave64 (%rsp)
  0x00007f8ab9117ab4: mov    %rbx,%rdi
  0x00007f8ab9117ab7: mov    %rax,%rsi
  0x00007f8ab9117aba: callq  0x00007f8acef8bbca
  0x00007f8ab9117abf: fxrstor64 (%rsp)
  0x00007f8ab9117ac4: add    $0x200,%rsp
  0x00007f8ab9117acb: mov    (%rsp),%r15
  0x00007f8ab9117acf: mov    0x8(%rsp),%r14
  0x00007f8ab9117ad4: mov    0x10(%rsp),%r13
  0x00007f8ab9117ad9: mov    0x18(%rsp),%r12
  0x00007f8ab9117ade: mov    0x20(%rsp),%r11
  0x00007f8ab9117ae3: mov    0x28(%rsp),%r10
  0x00007f8ab9117ae8: mov    0x30(%rsp),%r9
  0x00007f8ab9117aed: mov    0x38(%rsp),%r8
  0x00007f8ab9117af2: mov    0x40(%rsp),%rdi
  0x00007f8ab9117af7: mov    0x48(%rsp),%rsi
  0x00007f8ab9117afc: mov    0x50(%rsp),%rbp
  0x00007f8ab9117b01: mov    0x60(%rsp),%rbx
  0x00007f8ab9117b06: mov    0x68(%rsp),%rdx
  0x00007f8ab9117b0b: mov    0x70(%rsp),%rcx
  0x00007f8ab9117b10: mov    0x78(%rsp),%rax
  0x00007f8ab9117b15: add    $0x80,%rsp
  0x00007f8ab9117b1c: add    $0x8,%rsp
  0x00007f8ab9117b20: popfq  
  0x00007f8ab9117b21: mov    %r13,%rsp
  0x00007f8ab9117b24: pop    %rax
  0x00007f8ab9117b25: mov    %rsp,%r13
  0x00007f8ab9117b28: sub    $0x10,%rsp
  0x00007f8ab9117b2c: mov    %rax,(%rsp)
  0x00007f8ab9117b30: mov    %rsi,0x8(%rsp)
  0x00007f8ab9117b35: mov    0x40(%rbx),%rcx
  0x00007f8ab9117b39: jmpq   *%rcx

AHE@0x00007f8ac80c4748: 0x i2c: 0x00007f8ab9117be0 c2i: 0x00007f8ab9117cf0 c2iUV: 0x00007f8ab9117cc3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab9117cf0
  0x00007f8ab9117be0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9117be4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9117bee: cmp    %r11,%rax
  0x00007f8ab9117bf1: jbe    0x00007f8ab9117c0a
  0x00007f8ab9117bf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9117c01: cmp    %r11,%rax
  0x00007f8ab9117c04: jb     0x00007f8ab9117ca7
  0x00007f8ab9117c0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9117c14: cmp    %r11,%rax
  0x00007f8ab9117c17: jbe    0x00007f8ab9117c30
  0x00007f8ab9117c1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9117c27: cmp    %r11,%rax
  0x00007f8ab9117c2a: jb     0x00007f8ab9117ca7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9117c30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117c35: sub    $0x80,%rsp
  0x00007f8ab9117c3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9117c41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117c46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9117c4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117c50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117c55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9117c5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9117c5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9117c64: mov    %r9,0x30(%rsp)
  0x00007f8ab9117c69: mov    %r10,0x28(%rsp)
  0x00007f8ab9117c6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9117c73: mov    %r12,0x18(%rsp)
  0x00007f8ab9117c78: mov    %r13,0x10(%rsp)
  0x00007f8ab9117c7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9117c82: mov    %r15,(%rsp)
  0x00007f8ab9117c86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9117c90: movabs $0x7f8ab9117c30,%rsi
  0x00007f8ab9117c9a: mov    %rsp,%rdx
  0x00007f8ab9117c9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117ca1: callq  0x00007f8aceddb9fa
  0x00007f8ab9117ca6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9117ca7: mov    %rsp,%r11
  0x00007f8ab9117caa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117cae: push   %rax
  0x00007f8ab9117caf: mov    %r11,%rax
  0x00007f8ab9117cb2: mov    0x50(%rbx),%r11
  0x00007f8ab9117cb6: mov    %rbx,0x258(%r15)
  0x00007f8ab9117cbd: mov    %rbx,%rax
  0x00007f8ab9117cc0: jmpq   *%r11
  0x00007f8ab9117cc3: mov    0x8(%rsi),%ebx
  0x00007f8ab9117cc6: shl    $0x3,%rbx
  0x00007f8ab9117cca: cmp    0x10(%rax),%rbx
  0x00007f8ab9117cce: mov    0x8(%rax),%rbx
  0x00007f8ab9117cd2: je     0x00007f8ab9117cdd
  0x00007f8ab9117cd8: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117cdd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9117ce5: je     0x00007f8ab9117de0
  0x00007f8ab9117ceb: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117cf0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9117cf8: je     0x00007f8ab9117de0
  0x00007f8ab9117cfe: mov    %rsp,%r13
  0x00007f8ab9117d01: mov    (%rsp),%rax
  0x00007f8ab9117d05: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117d09: pushfq 
  0x00007f8ab9117d0a: sub    $0x8,%rsp
  0x00007f8ab9117d0e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117d13: sub    $0x80,%rsp
  0x00007f8ab9117d1a: mov    %rax,0x78(%rsp)
  0x00007f8ab9117d1f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117d24: mov    %rdx,0x68(%rsp)
  0x00007f8ab9117d29: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117d2e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117d33: mov    %rsi,0x48(%rsp)
  0x00007f8ab9117d38: mov    %rdi,0x40(%rsp)
  0x00007f8ab9117d3d: mov    %r8,0x38(%rsp)
  0x00007f8ab9117d42: mov    %r9,0x30(%rsp)
  0x00007f8ab9117d47: mov    %r10,0x28(%rsp)
  0x00007f8ab9117d4c: mov    %r11,0x20(%rsp)
  0x00007f8ab9117d51: mov    %r12,0x18(%rsp)
  0x00007f8ab9117d56: mov    %r13,0x10(%rsp)
  0x00007f8ab9117d5b: mov    %r14,0x8(%rsp)
  0x00007f8ab9117d60: mov    %r15,(%rsp)
  0x00007f8ab9117d64: sub    $0x200,%rsp
  0x00007f8ab9117d6b: fxsave64 (%rsp)
  0x00007f8ab9117d70: mov    %rbx,%rdi
  0x00007f8ab9117d73: mov    %rax,%rsi
  0x00007f8ab9117d76: callq  0x00007f8acef8bbca
  0x00007f8ab9117d7b: fxrstor64 (%rsp)
  0x00007f8ab9117d80: add    $0x200,%rsp
  0x00007f8ab9117d87: mov    (%rsp),%r15
  0x00007f8ab9117d8b: mov    0x8(%rsp),%r14
  0x00007f8ab9117d90: mov    0x10(%rsp),%r13
  0x00007f8ab9117d95: mov    0x18(%rsp),%r12
  0x00007f8ab9117d9a: mov    0x20(%rsp),%r11
  0x00007f8ab9117d9f: mov    0x28(%rsp),%r10
  0x00007f8ab9117da4: mov    0x30(%rsp),%r9
  0x00007f8ab9117da9: mov    0x38(%rsp),%r8
  0x00007f8ab9117dae: mov    0x40(%rsp),%rdi
  0x00007f8ab9117db3: mov    0x48(%rsp),%rsi
  0x00007f8ab9117db8: mov    0x50(%rsp),%rbp
  0x00007f8ab9117dbd: mov    0x60(%rsp),%rbx
  0x00007f8ab9117dc2: mov    0x68(%rsp),%rdx
  0x00007f8ab9117dc7: mov    0x70(%rsp),%rcx
  0x00007f8ab9117dcc: mov    0x78(%rsp),%rax
  0x00007f8ab9117dd1: add    $0x80,%rsp
  0x00007f8ab9117dd8: add    $0x8,%rsp
  0x00007f8ab9117ddc: popfq  
  0x00007f8ab9117ddd: mov    %r13,%rsp
  0x00007f8ab9117de0: pop    %rax
  0x00007f8ab9117de1: mov    %rsp,%r13
  0x00007f8ab9117de4: sub    $0x10,%rsp
  0x00007f8ab9117de8: mov    %rax,(%rsp)
  0x00007f8ab9117dec: mov    0x40(%rbx),%rcx
  0x00007f8ab9117df0: jmpq   *%rcx

AHE@0x00007f8ac80c4790: 0xbbb00000 i2c: 0x00007f8ab9117ea0 c2i: 0x00007f8ab9117fbc c2iUV: 0x00007f8ab9117f8f
i2c argument handler #0 for: receiver (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab9117fbc
  0x00007f8ab9117ea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9117ea4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9117eae: cmp    %r11,%rax
  0x00007f8ab9117eb1: jbe    0x00007f8ab9117eca
  0x00007f8ab9117eb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9117ec1: cmp    %r11,%rax
  0x00007f8ab9117ec4: jb     0x00007f8ab9117f67
  0x00007f8ab9117eca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9117ed4: cmp    %r11,%rax
  0x00007f8ab9117ed7: jbe    0x00007f8ab9117ef0
  0x00007f8ab9117edd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9117ee7: cmp    %r11,%rax
  0x00007f8ab9117eea: jb     0x00007f8ab9117f67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9117ef0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117ef5: sub    $0x80,%rsp
  0x00007f8ab9117efc: mov    %rax,0x78(%rsp)
  0x00007f8ab9117f01: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117f06: mov    %rdx,0x68(%rsp)
  0x00007f8ab9117f0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117f10: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117f15: mov    %rsi,0x48(%rsp)
  0x00007f8ab9117f1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9117f1f: mov    %r8,0x38(%rsp)
  0x00007f8ab9117f24: mov    %r9,0x30(%rsp)
  0x00007f8ab9117f29: mov    %r10,0x28(%rsp)
  0x00007f8ab9117f2e: mov    %r11,0x20(%rsp)
  0x00007f8ab9117f33: mov    %r12,0x18(%rsp)
  0x00007f8ab9117f38: mov    %r13,0x10(%rsp)
  0x00007f8ab9117f3d: mov    %r14,0x8(%rsp)
  0x00007f8ab9117f42: mov    %r15,(%rsp)
  0x00007f8ab9117f46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9117f50: movabs $0x7f8ab9117ef0,%rsi
  0x00007f8ab9117f5a: mov    %rsp,%rdx
  0x00007f8ab9117f5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117f61: callq  0x00007f8aceddb9fa
  0x00007f8ab9117f66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9117f67: mov    %rsp,%r11
  0x00007f8ab9117f6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117f6e: push   %rax
  0x00007f8ab9117f6f: mov    %r11,%rax
  0x00007f8ab9117f72: mov    0x50(%rbx),%r11
  0x00007f8ab9117f76: mov    0x18(%rax),%rsi
  0x00007f8ab9117f7a: mov    0x10(%rax),%rdx
  0x00007f8ab9117f7e: mov    0x8(%rax),%rcx
  0x00007f8ab9117f82: mov    %rbx,0x258(%r15)
  0x00007f8ab9117f89: mov    %rbx,%rax
  0x00007f8ab9117f8c: jmpq   *%r11
  0x00007f8ab9117f8f: mov    0x8(%rsi),%ebx
  0x00007f8ab9117f92: shl    $0x3,%rbx
  0x00007f8ab9117f96: cmp    0x10(%rax),%rbx
  0x00007f8ab9117f9a: mov    0x8(%rax),%rbx
  0x00007f8ab9117f9e: je     0x00007f8ab9117fa9
  0x00007f8ab9117fa4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117fa9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9117fb1: je     0x00007f8ab91180ac
  0x00007f8ab9117fb7: jmpq   0x00007f8ab9105c40
  0x00007f8ab9117fbc: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9117fc4: je     0x00007f8ab91180ac
  0x00007f8ab9117fca: mov    %rsp,%r13
  0x00007f8ab9117fcd: mov    (%rsp),%rax
  0x00007f8ab9117fd1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9117fd5: pushfq 
  0x00007f8ab9117fd6: sub    $0x8,%rsp
  0x00007f8ab9117fda: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9117fdf: sub    $0x80,%rsp
  0x00007f8ab9117fe6: mov    %rax,0x78(%rsp)
  0x00007f8ab9117feb: mov    %rcx,0x70(%rsp)
  0x00007f8ab9117ff0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9117ff5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9117ffa: mov    %rbp,0x50(%rsp)
  0x00007f8ab9117fff: mov    %rsi,0x48(%rsp)
  0x00007f8ab9118004: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118009: mov    %r8,0x38(%rsp)
  0x00007f8ab911800e: mov    %r9,0x30(%rsp)
  0x00007f8ab9118013: mov    %r10,0x28(%rsp)
  0x00007f8ab9118018: mov    %r11,0x20(%rsp)
  0x00007f8ab911801d: mov    %r12,0x18(%rsp)
  0x00007f8ab9118022: mov    %r13,0x10(%rsp)
  0x00007f8ab9118027: mov    %r14,0x8(%rsp)
  0x00007f8ab911802c: mov    %r15,(%rsp)
  0x00007f8ab9118030: sub    $0x200,%rsp
  0x00007f8ab9118037: fxsave64 (%rsp)
  0x00007f8ab911803c: mov    %rbx,%rdi
  0x00007f8ab911803f: mov    %rax,%rsi
  0x00007f8ab9118042: callq  0x00007f8acef8bbca
  0x00007f8ab9118047: fxrstor64 (%rsp)
  0x00007f8ab911804c: add    $0x200,%rsp
  0x00007f8ab9118053: mov    (%rsp),%r15
  0x00007f8ab9118057: mov    0x8(%rsp),%r14
  0x00007f8ab911805c: mov    0x10(%rsp),%r13
  0x00007f8ab9118061: mov    0x18(%rsp),%r12
  0x00007f8ab9118066: mov    0x20(%rsp),%r11
  0x00007f8ab911806b: mov    0x28(%rsp),%r10
  0x00007f8ab9118070: mov    0x30(%rsp),%r9
  0x00007f8ab9118075: mov    0x38(%rsp),%r8
  0x00007f8ab911807a: mov    0x40(%rsp),%rdi
  0x00007f8ab911807f: mov    0x48(%rsp),%rsi
  0x00007f8ab9118084: mov    0x50(%rsp),%rbp
  0x00007f8ab9118089: mov    0x60(%rsp),%rbx
  0x00007f8ab911808e: mov    0x68(%rsp),%rdx
  0x00007f8ab9118093: mov    0x70(%rsp),%rcx
  0x00007f8ab9118098: mov    0x78(%rsp),%rax
  0x00007f8ab911809d: add    $0x80,%rsp
  0x00007f8ab91180a4: add    $0x8,%rsp
  0x00007f8ab91180a8: popfq  
  0x00007f8ab91180a9: mov    %r13,%rsp
  0x00007f8ab91180ac: pop    %rax
  0x00007f8ab91180ad: mov    %rsp,%r13
  0x00007f8ab91180b0: sub    $0x20,%rsp
  0x00007f8ab91180b4: mov    %rax,(%rsp)
  0x00007f8ab91180b8: mov    %rsi,0x18(%rsp)
  0x00007f8ab91180bd: mov    %rdx,0x10(%rsp)
  0x00007f8ab91180c2: mov    %rcx,0x8(%rsp)
  0x00007f8ab91180c7: mov    0x40(%rbx),%rcx
  0x00007f8ab91180cb: jmpq   *%rcx

AHE@0x00007f8ac80c47d8: 0xbb000000 i2c: 0x00007f8ab91181a0 c2i: 0x00007f8ab91182b8 c2iUV: 0x00007f8ab911828b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab91182b8
  0x00007f8ab91181a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91181a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91181ae: cmp    %r11,%rax
  0x00007f8ab91181b1: jbe    0x00007f8ab91181ca
  0x00007f8ab91181b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91181c1: cmp    %r11,%rax
  0x00007f8ab91181c4: jb     0x00007f8ab9118267
  0x00007f8ab91181ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91181d4: cmp    %r11,%rax
  0x00007f8ab91181d7: jbe    0x00007f8ab91181f0
  0x00007f8ab91181dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91181e7: cmp    %r11,%rax
  0x00007f8ab91181ea: jb     0x00007f8ab9118267
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91181f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91181f5: sub    $0x80,%rsp
  0x00007f8ab91181fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9118201: mov    %rcx,0x70(%rsp)
  0x00007f8ab9118206: mov    %rdx,0x68(%rsp)
  0x00007f8ab911820b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9118210: mov    %rbp,0x50(%rsp)
  0x00007f8ab9118215: mov    %rsi,0x48(%rsp)
  0x00007f8ab911821a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911821f: mov    %r8,0x38(%rsp)
  0x00007f8ab9118224: mov    %r9,0x30(%rsp)
  0x00007f8ab9118229: mov    %r10,0x28(%rsp)
  0x00007f8ab911822e: mov    %r11,0x20(%rsp)
  0x00007f8ab9118233: mov    %r12,0x18(%rsp)
  0x00007f8ab9118238: mov    %r13,0x10(%rsp)
  0x00007f8ab911823d: mov    %r14,0x8(%rsp)
  0x00007f8ab9118242: mov    %r15,(%rsp)
  0x00007f8ab9118246: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9118250: movabs $0x7f8ab91181f0,%rsi
  0x00007f8ab911825a: mov    %rsp,%rdx
  0x00007f8ab911825d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118261: callq  0x00007f8aceddb9fa
  0x00007f8ab9118266: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9118267: mov    %rsp,%r11
  0x00007f8ab911826a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911826e: push   %rax
  0x00007f8ab911826f: mov    %r11,%rax
  0x00007f8ab9118272: mov    0x50(%rbx),%r11
  0x00007f8ab9118276: mov    0x10(%rax),%rsi
  0x00007f8ab911827a: mov    0x8(%rax),%rdx
  0x00007f8ab911827e: mov    %rbx,0x258(%r15)
  0x00007f8ab9118285: mov    %rbx,%rax
  0x00007f8ab9118288: jmpq   *%r11
  0x00007f8ab911828b: mov    0x8(%rsi),%ebx
  0x00007f8ab911828e: shl    $0x3,%rbx
  0x00007f8ab9118292: cmp    0x10(%rax),%rbx
  0x00007f8ab9118296: mov    0x8(%rax),%rbx
  0x00007f8ab911829a: je     0x00007f8ab91182a5
  0x00007f8ab91182a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91182a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91182ad: je     0x00007f8ab91183a8
  0x00007f8ab91182b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91182b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91182c0: je     0x00007f8ab91183a8
  0x00007f8ab91182c6: mov    %rsp,%r13
  0x00007f8ab91182c9: mov    (%rsp),%rax
  0x00007f8ab91182cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91182d1: pushfq 
  0x00007f8ab91182d2: sub    $0x8,%rsp
  0x00007f8ab91182d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91182db: sub    $0x80,%rsp
  0x00007f8ab91182e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91182e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91182ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91182f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91182f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91182fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9118300: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118305: mov    %r8,0x38(%rsp)
  0x00007f8ab911830a: mov    %r9,0x30(%rsp)
  0x00007f8ab911830f: mov    %r10,0x28(%rsp)
  0x00007f8ab9118314: mov    %r11,0x20(%rsp)
  0x00007f8ab9118319: mov    %r12,0x18(%rsp)
  0x00007f8ab911831e: mov    %r13,0x10(%rsp)
  0x00007f8ab9118323: mov    %r14,0x8(%rsp)
  0x00007f8ab9118328: mov    %r15,(%rsp)
  0x00007f8ab911832c: sub    $0x200,%rsp
  0x00007f8ab9118333: fxsave64 (%rsp)
  0x00007f8ab9118338: mov    %rbx,%rdi
  0x00007f8ab911833b: mov    %rax,%rsi
  0x00007f8ab911833e: callq  0x00007f8acef8bbca
  0x00007f8ab9118343: fxrstor64 (%rsp)
  0x00007f8ab9118348: add    $0x200,%rsp
  0x00007f8ab911834f: mov    (%rsp),%r15
  0x00007f8ab9118353: mov    0x8(%rsp),%r14
  0x00007f8ab9118358: mov    0x10(%rsp),%r13
  0x00007f8ab911835d: mov    0x18(%rsp),%r12
  0x00007f8ab9118362: mov    0x20(%rsp),%r11
  0x00007f8ab9118367: mov    0x28(%rsp),%r10
  0x00007f8ab911836c: mov    0x30(%rsp),%r9
  0x00007f8ab9118371: mov    0x38(%rsp),%r8
  0x00007f8ab9118376: mov    0x40(%rsp),%rdi
  0x00007f8ab911837b: mov    0x48(%rsp),%rsi
  0x00007f8ab9118380: mov    0x50(%rsp),%rbp
  0x00007f8ab9118385: mov    0x60(%rsp),%rbx
  0x00007f8ab911838a: mov    0x68(%rsp),%rdx
  0x00007f8ab911838f: mov    0x70(%rsp),%rcx
  0x00007f8ab9118394: mov    0x78(%rsp),%rax
  0x00007f8ab9118399: add    $0x80,%rsp
  0x00007f8ab91183a0: add    $0x8,%rsp
  0x00007f8ab91183a4: popfq  
  0x00007f8ab91183a5: mov    %r13,%rsp
  0x00007f8ab91183a8: pop    %rax
  0x00007f8ab91183a9: mov    %rsp,%r13
  0x00007f8ab91183ac: sub    $0x20,%rsp
  0x00007f8ab91183b0: mov    %rax,(%rsp)
  0x00007f8ab91183b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab91183b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab91183be: mov    0x40(%rbx),%rcx
  0x00007f8ab91183c2: jmpq   *%rcx

AHE@0x00007f8ac80c4820: 0xbbb00000 i2c: 0x00007f8ab91184a0 c2i: 0x00007f8ab91185bc c2iUV: 0x00007f8ab911858f
i2c argument handler #0 for: receiver (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab91185bc
  0x00007f8ab91184a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91184a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91184ae: cmp    %r11,%rax
  0x00007f8ab91184b1: jbe    0x00007f8ab91184ca
  0x00007f8ab91184b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91184c1: cmp    %r11,%rax
  0x00007f8ab91184c4: jb     0x00007f8ab9118567
  0x00007f8ab91184ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91184d4: cmp    %r11,%rax
  0x00007f8ab91184d7: jbe    0x00007f8ab91184f0
  0x00007f8ab91184dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91184e7: cmp    %r11,%rax
  0x00007f8ab91184ea: jb     0x00007f8ab9118567
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91184f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91184f5: sub    $0x80,%rsp
  0x00007f8ab91184fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9118501: mov    %rcx,0x70(%rsp)
  0x00007f8ab9118506: mov    %rdx,0x68(%rsp)
  0x00007f8ab911850b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9118510: mov    %rbp,0x50(%rsp)
  0x00007f8ab9118515: mov    %rsi,0x48(%rsp)
  0x00007f8ab911851a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911851f: mov    %r8,0x38(%rsp)
  0x00007f8ab9118524: mov    %r9,0x30(%rsp)
  0x00007f8ab9118529: mov    %r10,0x28(%rsp)
  0x00007f8ab911852e: mov    %r11,0x20(%rsp)
  0x00007f8ab9118533: mov    %r12,0x18(%rsp)
  0x00007f8ab9118538: mov    %r13,0x10(%rsp)
  0x00007f8ab911853d: mov    %r14,0x8(%rsp)
  0x00007f8ab9118542: mov    %r15,(%rsp)
  0x00007f8ab9118546: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9118550: movabs $0x7f8ab91184f0,%rsi
  0x00007f8ab911855a: mov    %rsp,%rdx
  0x00007f8ab911855d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118561: callq  0x00007f8aceddb9fa
  0x00007f8ab9118566: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9118567: mov    %rsp,%r11
  0x00007f8ab911856a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911856e: push   %rax
  0x00007f8ab911856f: mov    %r11,%rax
  0x00007f8ab9118572: mov    0x50(%rbx),%r11
  0x00007f8ab9118576: mov    0x18(%rax),%rsi
  0x00007f8ab911857a: mov    0x10(%rax),%rdx
  0x00007f8ab911857e: mov    0x8(%rax),%rcx
  0x00007f8ab9118582: mov    %rbx,0x258(%r15)
  0x00007f8ab9118589: mov    %rbx,%rax
  0x00007f8ab911858c: jmpq   *%r11
  0x00007f8ab911858f: mov    0x8(%rsi),%ebx
  0x00007f8ab9118592: shl    $0x3,%rbx
  0x00007f8ab9118596: cmp    0x10(%rax),%rbx
  0x00007f8ab911859a: mov    0x8(%rax),%rbx
  0x00007f8ab911859e: je     0x00007f8ab91185a9
  0x00007f8ab91185a4: jmpq   0x00007f8ab9105c40
  0x00007f8ab91185a9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91185b1: je     0x00007f8ab91186ac
  0x00007f8ab91185b7: jmpq   0x00007f8ab9105c40
  0x00007f8ab91185bc: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91185c4: je     0x00007f8ab91186ac
  0x00007f8ab91185ca: mov    %rsp,%r13
  0x00007f8ab91185cd: mov    (%rsp),%rax
  0x00007f8ab91185d1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91185d5: pushfq 
  0x00007f8ab91185d6: sub    $0x8,%rsp
  0x00007f8ab91185da: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91185df: sub    $0x80,%rsp
  0x00007f8ab91185e6: mov    %rax,0x78(%rsp)
  0x00007f8ab91185eb: mov    %rcx,0x70(%rsp)
  0x00007f8ab91185f0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91185f5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91185fa: mov    %rbp,0x50(%rsp)
  0x00007f8ab91185ff: mov    %rsi,0x48(%rsp)
  0x00007f8ab9118604: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118609: mov    %r8,0x38(%rsp)
  0x00007f8ab911860e: mov    %r9,0x30(%rsp)
  0x00007f8ab9118613: mov    %r10,0x28(%rsp)
  0x00007f8ab9118618: mov    %r11,0x20(%rsp)
  0x00007f8ab911861d: mov    %r12,0x18(%rsp)
  0x00007f8ab9118622: mov    %r13,0x10(%rsp)
  0x00007f8ab9118627: mov    %r14,0x8(%rsp)
  0x00007f8ab911862c: mov    %r15,(%rsp)
  0x00007f8ab9118630: sub    $0x200,%rsp
  0x00007f8ab9118637: fxsave64 (%rsp)
  0x00007f8ab911863c: mov    %rbx,%rdi
  0x00007f8ab911863f: mov    %rax,%rsi
  0x00007f8ab9118642: callq  0x00007f8acef8bbca
  0x00007f8ab9118647: fxrstor64 (%rsp)
  0x00007f8ab911864c: add    $0x200,%rsp
  0x00007f8ab9118653: mov    (%rsp),%r15
  0x00007f8ab9118657: mov    0x8(%rsp),%r14
  0x00007f8ab911865c: mov    0x10(%rsp),%r13
  0x00007f8ab9118661: mov    0x18(%rsp),%r12
  0x00007f8ab9118666: mov    0x20(%rsp),%r11
  0x00007f8ab911866b: mov    0x28(%rsp),%r10
  0x00007f8ab9118670: mov    0x30(%rsp),%r9
  0x00007f8ab9118675: mov    0x38(%rsp),%r8
  0x00007f8ab911867a: mov    0x40(%rsp),%rdi
  0x00007f8ab911867f: mov    0x48(%rsp),%rsi
  0x00007f8ab9118684: mov    0x50(%rsp),%rbp
  0x00007f8ab9118689: mov    0x60(%rsp),%rbx
  0x00007f8ab911868e: mov    0x68(%rsp),%rdx
  0x00007f8ab9118693: mov    0x70(%rsp),%rcx
  0x00007f8ab9118698: mov    0x78(%rsp),%rax
  0x00007f8ab911869d: add    $0x80,%rsp
  0x00007f8ab91186a4: add    $0x8,%rsp
  0x00007f8ab91186a8: popfq  
  0x00007f8ab91186a9: mov    %r13,%rsp
  0x00007f8ab91186ac: pop    %rax
  0x00007f8ab91186ad: mov    %rsp,%r13
  0x00007f8ab91186b0: sub    $0x20,%rsp
  0x00007f8ab91186b4: mov    %rax,(%rsp)
  0x00007f8ab91186b8: mov    %rsi,0x18(%rsp)
  0x00007f8ab91186bd: mov    %rdx,0x10(%rsp)
  0x00007f8ab91186c2: mov    %rcx,0x8(%rsp)
  0x00007f8ab91186c7: mov    0x40(%rbx),%rcx
  0x00007f8ab91186cb: jmpq   *%rcx

AHE@0x00007f8ac80c4868: 0xb0000000 i2c: 0x00007f8ab91187a0 c2i: 0x00007f8ab91188b4 c2iUV: 0x00007f8ab9118887
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;)Ljava/lang/ref/Finalizer; (539 bytes generated)
c2i argument handler starts at 0x7f8ab91188b4
  0x00007f8ab91187a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91187a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91187ae: cmp    %r11,%rax
  0x00007f8ab91187b1: jbe    0x00007f8ab91187ca
  0x00007f8ab91187b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91187c1: cmp    %r11,%rax
  0x00007f8ab91187c4: jb     0x00007f8ab9118867
  0x00007f8ab91187ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91187d4: cmp    %r11,%rax
  0x00007f8ab91187d7: jbe    0x00007f8ab91187f0
  0x00007f8ab91187dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91187e7: cmp    %r11,%rax
  0x00007f8ab91187ea: jb     0x00007f8ab9118867
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91187f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91187f5: sub    $0x80,%rsp
  0x00007f8ab91187fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9118801: mov    %rcx,0x70(%rsp)
  0x00007f8ab9118806: mov    %rdx,0x68(%rsp)
  0x00007f8ab911880b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9118810: mov    %rbp,0x50(%rsp)
  0x00007f8ab9118815: mov    %rsi,0x48(%rsp)
  0x00007f8ab911881a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911881f: mov    %r8,0x38(%rsp)
  0x00007f8ab9118824: mov    %r9,0x30(%rsp)
  0x00007f8ab9118829: mov    %r10,0x28(%rsp)
  0x00007f8ab911882e: mov    %r11,0x20(%rsp)
  0x00007f8ab9118833: mov    %r12,0x18(%rsp)
  0x00007f8ab9118838: mov    %r13,0x10(%rsp)
  0x00007f8ab911883d: mov    %r14,0x8(%rsp)
  0x00007f8ab9118842: mov    %r15,(%rsp)
  0x00007f8ab9118846: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9118850: movabs $0x7f8ab91187f0,%rsi
  0x00007f8ab911885a: mov    %rsp,%rdx
  0x00007f8ab911885d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118861: callq  0x00007f8aceddb9fa
  0x00007f8ab9118866: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9118867: mov    %rsp,%r11
  0x00007f8ab911886a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911886e: push   %rax
  0x00007f8ab911886f: mov    %r11,%rax
  0x00007f8ab9118872: mov    0x50(%rbx),%r11
  0x00007f8ab9118876: mov    0x8(%rax),%rsi
  0x00007f8ab911887a: mov    %rbx,0x258(%r15)
  0x00007f8ab9118881: mov    %rbx,%rax
  0x00007f8ab9118884: jmpq   *%r11
  0x00007f8ab9118887: mov    0x8(%rsi),%ebx
  0x00007f8ab911888a: shl    $0x3,%rbx
  0x00007f8ab911888e: cmp    0x10(%rax),%rbx
  0x00007f8ab9118892: mov    0x8(%rax),%rbx
  0x00007f8ab9118896: je     0x00007f8ab91188a1
  0x00007f8ab911889c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91188a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91188a9: je     0x00007f8ab91189a4
  0x00007f8ab91188af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91188b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91188bc: je     0x00007f8ab91189a4
  0x00007f8ab91188c2: mov    %rsp,%r13
  0x00007f8ab91188c5: mov    (%rsp),%rax
  0x00007f8ab91188c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91188cd: pushfq 
  0x00007f8ab91188ce: sub    $0x8,%rsp
  0x00007f8ab91188d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91188d7: sub    $0x80,%rsp
  0x00007f8ab91188de: mov    %rax,0x78(%rsp)
  0x00007f8ab91188e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91188e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91188ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91188f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91188f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91188fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118901: mov    %r8,0x38(%rsp)
  0x00007f8ab9118906: mov    %r9,0x30(%rsp)
  0x00007f8ab911890b: mov    %r10,0x28(%rsp)
  0x00007f8ab9118910: mov    %r11,0x20(%rsp)
  0x00007f8ab9118915: mov    %r12,0x18(%rsp)
  0x00007f8ab911891a: mov    %r13,0x10(%rsp)
  0x00007f8ab911891f: mov    %r14,0x8(%rsp)
  0x00007f8ab9118924: mov    %r15,(%rsp)
  0x00007f8ab9118928: sub    $0x200,%rsp
  0x00007f8ab911892f: fxsave64 (%rsp)
  0x00007f8ab9118934: mov    %rbx,%rdi
  0x00007f8ab9118937: mov    %rax,%rsi
  0x00007f8ab911893a: callq  0x00007f8acef8bbca
  0x00007f8ab911893f: fxrstor64 (%rsp)
  0x00007f8ab9118944: add    $0x200,%rsp
  0x00007f8ab911894b: mov    (%rsp),%r15
  0x00007f8ab911894f: mov    0x8(%rsp),%r14
  0x00007f8ab9118954: mov    0x10(%rsp),%r13
  0x00007f8ab9118959: mov    0x18(%rsp),%r12
  0x00007f8ab911895e: mov    0x20(%rsp),%r11
  0x00007f8ab9118963: mov    0x28(%rsp),%r10
  0x00007f8ab9118968: mov    0x30(%rsp),%r9
  0x00007f8ab911896d: mov    0x38(%rsp),%r8
  0x00007f8ab9118972: mov    0x40(%rsp),%rdi
  0x00007f8ab9118977: mov    0x48(%rsp),%rsi
  0x00007f8ab911897c: mov    0x50(%rsp),%rbp
  0x00007f8ab9118981: mov    0x60(%rsp),%rbx
  0x00007f8ab9118986: mov    0x68(%rsp),%rdx
  0x00007f8ab911898b: mov    0x70(%rsp),%rcx
  0x00007f8ab9118990: mov    0x78(%rsp),%rax
  0x00007f8ab9118995: add    $0x80,%rsp
  0x00007f8ab911899c: add    $0x8,%rsp
  0x00007f8ab91189a0: popfq  
  0x00007f8ab91189a1: mov    %r13,%rsp
  0x00007f8ab91189a4: pop    %rax
  0x00007f8ab91189a5: mov    %rsp,%r13
  0x00007f8ab91189a8: sub    $0x10,%rsp
  0x00007f8ab91189ac: mov    %rax,(%rsp)
  0x00007f8ab91189b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91189b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91189b9: jmpq   *%rcx

AHE@0x00007f8ac80c48b0: 0xb0000000 i2c: 0x00007f8ab9118a60 c2i: 0x00007f8ab9118b74 c2iUV: 0x00007f8ab9118b47
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;)Ljava/lang/ref/Finalizer; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9118b74
  0x00007f8ab9118a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9118a64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9118a6e: cmp    %r11,%rax
  0x00007f8ab9118a71: jbe    0x00007f8ab9118a8a
  0x00007f8ab9118a77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9118a81: cmp    %r11,%rax
  0x00007f8ab9118a84: jb     0x00007f8ab9118b27
  0x00007f8ab9118a8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9118a94: cmp    %r11,%rax
  0x00007f8ab9118a97: jbe    0x00007f8ab9118ab0
  0x00007f8ab9118a9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9118aa7: cmp    %r11,%rax
  0x00007f8ab9118aaa: jb     0x00007f8ab9118b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9118ab0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9118ab5: sub    $0x80,%rsp
  0x00007f8ab9118abc: mov    %rax,0x78(%rsp)
  0x00007f8ab9118ac1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9118ac6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9118acb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9118ad0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9118ad5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9118ada: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118adf: mov    %r8,0x38(%rsp)
  0x00007f8ab9118ae4: mov    %r9,0x30(%rsp)
  0x00007f8ab9118ae9: mov    %r10,0x28(%rsp)
  0x00007f8ab9118aee: mov    %r11,0x20(%rsp)
  0x00007f8ab9118af3: mov    %r12,0x18(%rsp)
  0x00007f8ab9118af8: mov    %r13,0x10(%rsp)
  0x00007f8ab9118afd: mov    %r14,0x8(%rsp)
  0x00007f8ab9118b02: mov    %r15,(%rsp)
  0x00007f8ab9118b06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9118b10: movabs $0x7f8ab9118ab0,%rsi
  0x00007f8ab9118b1a: mov    %rsp,%rdx
  0x00007f8ab9118b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118b21: callq  0x00007f8aceddb9fa
  0x00007f8ab9118b26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9118b27: mov    %rsp,%r11
  0x00007f8ab9118b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118b2e: push   %rax
  0x00007f8ab9118b2f: mov    %r11,%rax
  0x00007f8ab9118b32: mov    0x50(%rbx),%r11
  0x00007f8ab9118b36: mov    0x8(%rax),%rsi
  0x00007f8ab9118b3a: mov    %rbx,0x258(%r15)
  0x00007f8ab9118b41: mov    %rbx,%rax
  0x00007f8ab9118b44: jmpq   *%r11
  0x00007f8ab9118b47: mov    0x8(%rsi),%ebx
  0x00007f8ab9118b4a: shl    $0x3,%rbx
  0x00007f8ab9118b4e: cmp    0x10(%rax),%rbx
  0x00007f8ab9118b52: mov    0x8(%rax),%rbx
  0x00007f8ab9118b56: je     0x00007f8ab9118b61
  0x00007f8ab9118b5c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9118b61: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9118b69: je     0x00007f8ab9118c64
  0x00007f8ab9118b6f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9118b74: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9118b7c: je     0x00007f8ab9118c64
  0x00007f8ab9118b82: mov    %rsp,%r13
  0x00007f8ab9118b85: mov    (%rsp),%rax
  0x00007f8ab9118b89: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118b8d: pushfq 
  0x00007f8ab9118b8e: sub    $0x8,%rsp
  0x00007f8ab9118b92: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9118b97: sub    $0x80,%rsp
  0x00007f8ab9118b9e: mov    %rax,0x78(%rsp)
  0x00007f8ab9118ba3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9118ba8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9118bad: mov    %rbx,0x60(%rsp)
  0x00007f8ab9118bb2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9118bb7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9118bbc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118bc1: mov    %r8,0x38(%rsp)
  0x00007f8ab9118bc6: mov    %r9,0x30(%rsp)
  0x00007f8ab9118bcb: mov    %r10,0x28(%rsp)
  0x00007f8ab9118bd0: mov    %r11,0x20(%rsp)
  0x00007f8ab9118bd5: mov    %r12,0x18(%rsp)
  0x00007f8ab9118bda: mov    %r13,0x10(%rsp)
  0x00007f8ab9118bdf: mov    %r14,0x8(%rsp)
  0x00007f8ab9118be4: mov    %r15,(%rsp)
  0x00007f8ab9118be8: sub    $0x200,%rsp
  0x00007f8ab9118bef: fxsave64 (%rsp)
  0x00007f8ab9118bf4: mov    %rbx,%rdi
  0x00007f8ab9118bf7: mov    %rax,%rsi
  0x00007f8ab9118bfa: callq  0x00007f8acef8bbca
  0x00007f8ab9118bff: fxrstor64 (%rsp)
  0x00007f8ab9118c04: add    $0x200,%rsp
  0x00007f8ab9118c0b: mov    (%rsp),%r15
  0x00007f8ab9118c0f: mov    0x8(%rsp),%r14
  0x00007f8ab9118c14: mov    0x10(%rsp),%r13
  0x00007f8ab9118c19: mov    0x18(%rsp),%r12
  0x00007f8ab9118c1e: mov    0x20(%rsp),%r11
  0x00007f8ab9118c23: mov    0x28(%rsp),%r10
  0x00007f8ab9118c28: mov    0x30(%rsp),%r9
  0x00007f8ab9118c2d: mov    0x38(%rsp),%r8
  0x00007f8ab9118c32: mov    0x40(%rsp),%rdi
  0x00007f8ab9118c37: mov    0x48(%rsp),%rsi
  0x00007f8ab9118c3c: mov    0x50(%rsp),%rbp
  0x00007f8ab9118c41: mov    0x60(%rsp),%rbx
  0x00007f8ab9118c46: mov    0x68(%rsp),%rdx
  0x00007f8ab9118c4b: mov    0x70(%rsp),%rcx
  0x00007f8ab9118c50: mov    0x78(%rsp),%rax
  0x00007f8ab9118c55: add    $0x80,%rsp
  0x00007f8ab9118c5c: add    $0x8,%rsp
  0x00007f8ab9118c60: popfq  
  0x00007f8ab9118c61: mov    %r13,%rsp
  0x00007f8ab9118c64: pop    %rax
  0x00007f8ab9118c65: mov    %rsp,%r13
  0x00007f8ab9118c68: sub    $0x10,%rsp
  0x00007f8ab9118c6c: mov    %rax,(%rsp)
  0x00007f8ab9118c70: mov    %rsi,0x8(%rsp)
  0x00007f8ab9118c75: mov    0x40(%rbx),%rcx
  0x00007f8ab9118c79: jmpq   *%rcx

AHE@0x00007f8ac80c48f8: 0x i2c: 0x00007f8ab9118d20 c2i: 0x00007f8ab9118e30 c2iUV: 0x00007f8ab9118e03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab9118e30
  0x00007f8ab9118d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9118d24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9118d2e: cmp    %r11,%rax
  0x00007f8ab9118d31: jbe    0x00007f8ab9118d4a
  0x00007f8ab9118d37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9118d41: cmp    %r11,%rax
  0x00007f8ab9118d44: jb     0x00007f8ab9118de7
  0x00007f8ab9118d4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9118d54: cmp    %r11,%rax
  0x00007f8ab9118d57: jbe    0x00007f8ab9118d70
  0x00007f8ab9118d5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9118d67: cmp    %r11,%rax
  0x00007f8ab9118d6a: jb     0x00007f8ab9118de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9118d70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9118d75: sub    $0x80,%rsp
  0x00007f8ab9118d7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9118d81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9118d86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9118d8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9118d90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9118d95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9118d9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118d9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9118da4: mov    %r9,0x30(%rsp)
  0x00007f8ab9118da9: mov    %r10,0x28(%rsp)
  0x00007f8ab9118dae: mov    %r11,0x20(%rsp)
  0x00007f8ab9118db3: mov    %r12,0x18(%rsp)
  0x00007f8ab9118db8: mov    %r13,0x10(%rsp)
  0x00007f8ab9118dbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9118dc2: mov    %r15,(%rsp)
  0x00007f8ab9118dc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9118dd0: movabs $0x7f8ab9118d70,%rsi
  0x00007f8ab9118dda: mov    %rsp,%rdx
  0x00007f8ab9118ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118de1: callq  0x00007f8aceddb9fa
  0x00007f8ab9118de6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9118de7: mov    %rsp,%r11
  0x00007f8ab9118dea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118dee: push   %rax
  0x00007f8ab9118def: mov    %r11,%rax
  0x00007f8ab9118df2: mov    0x50(%rbx),%r11
  0x00007f8ab9118df6: mov    %rbx,0x258(%r15)
  0x00007f8ab9118dfd: mov    %rbx,%rax
  0x00007f8ab9118e00: jmpq   *%r11
  0x00007f8ab9118e03: mov    0x8(%rsi),%ebx
  0x00007f8ab9118e06: shl    $0x3,%rbx
  0x00007f8ab9118e0a: cmp    0x10(%rax),%rbx
  0x00007f8ab9118e0e: mov    0x8(%rax),%rbx
  0x00007f8ab9118e12: je     0x00007f8ab9118e1d
  0x00007f8ab9118e18: jmpq   0x00007f8ab9105c40
  0x00007f8ab9118e1d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9118e25: je     0x00007f8ab9118f20
  0x00007f8ab9118e2b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9118e30: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9118e38: je     0x00007f8ab9118f20
  0x00007f8ab9118e3e: mov    %rsp,%r13
  0x00007f8ab9118e41: mov    (%rsp),%rax
  0x00007f8ab9118e45: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9118e49: pushfq 
  0x00007f8ab9118e4a: sub    $0x8,%rsp
  0x00007f8ab9118e4e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9118e53: sub    $0x80,%rsp
  0x00007f8ab9118e5a: mov    %rax,0x78(%rsp)
  0x00007f8ab9118e5f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9118e64: mov    %rdx,0x68(%rsp)
  0x00007f8ab9118e69: mov    %rbx,0x60(%rsp)
  0x00007f8ab9118e6e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9118e73: mov    %rsi,0x48(%rsp)
  0x00007f8ab9118e78: mov    %rdi,0x40(%rsp)
  0x00007f8ab9118e7d: mov    %r8,0x38(%rsp)
  0x00007f8ab9118e82: mov    %r9,0x30(%rsp)
  0x00007f8ab9118e87: mov    %r10,0x28(%rsp)
  0x00007f8ab9118e8c: mov    %r11,0x20(%rsp)
  0x00007f8ab9118e91: mov    %r12,0x18(%rsp)
  0x00007f8ab9118e96: mov    %r13,0x10(%rsp)
  0x00007f8ab9118e9b: mov    %r14,0x8(%rsp)
  0x00007f8ab9118ea0: mov    %r15,(%rsp)
  0x00007f8ab9118ea4: sub    $0x200,%rsp
  0x00007f8ab9118eab: fxsave64 (%rsp)
  0x00007f8ab9118eb0: mov    %rbx,%rdi
  0x00007f8ab9118eb3: mov    %rax,%rsi
  0x00007f8ab9118eb6: callq  0x00007f8acef8bbca
  0x00007f8ab9118ebb: fxrstor64 (%rsp)
  0x00007f8ab9118ec0: add    $0x200,%rsp
  0x00007f8ab9118ec7: mov    (%rsp),%r15
  0x00007f8ab9118ecb: mov    0x8(%rsp),%r14
  0x00007f8ab9118ed0: mov    0x10(%rsp),%r13
  0x00007f8ab9118ed5: mov    0x18(%rsp),%r12
  0x00007f8ab9118eda: mov    0x20(%rsp),%r11
  0x00007f8ab9118edf: mov    0x28(%rsp),%r10
  0x00007f8ab9118ee4: mov    0x30(%rsp),%r9
  0x00007f8ab9118ee9: mov    0x38(%rsp),%r8
  0x00007f8ab9118eee: mov    0x40(%rsp),%rdi
  0x00007f8ab9118ef3: mov    0x48(%rsp),%rsi
  0x00007f8ab9118ef8: mov    0x50(%rsp),%rbp
  0x00007f8ab9118efd: mov    0x60(%rsp),%rbx
  0x00007f8ab9118f02: mov    0x68(%rsp),%rdx
  0x00007f8ab9118f07: mov    0x70(%rsp),%rcx
  0x00007f8ab9118f0c: mov    0x78(%rsp),%rax
  0x00007f8ab9118f11: add    $0x80,%rsp
  0x00007f8ab9118f18: add    $0x8,%rsp
  0x00007f8ab9118f1c: popfq  
  0x00007f8ab9118f1d: mov    %r13,%rsp
  0x00007f8ab9118f20: pop    %rax
  0x00007f8ab9118f21: mov    %rsp,%r13
  0x00007f8ab9118f24: sub    $0x10,%rsp
  0x00007f8ab9118f28: mov    %rax,(%rsp)
  0x00007f8ab9118f2c: mov    0x40(%rbx),%rcx
  0x00007f8ab9118f30: jmpq   *%rcx

AHE@0x00007f8ac80c4940: 0xb0000000 i2c: 0x00007f8ab9118fe0 c2i: 0x00007f8ab91190f4 c2iUV: 0x00007f8ab91190c7
i2c argument handler #0 for: static (Ljava/lang/Runnable;)V (539 bytes generated)
c2i argument handler starts at 0x7f8ab91190f4
  0x00007f8ab9118fe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9118fe4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9118fee: cmp    %r11,%rax
  0x00007f8ab9118ff1: jbe    0x00007f8ab911900a
  0x00007f8ab9118ff7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9119001: cmp    %r11,%rax
  0x00007f8ab9119004: jb     0x00007f8ab91190a7
  0x00007f8ab911900a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9119014: cmp    %r11,%rax
  0x00007f8ab9119017: jbe    0x00007f8ab9119030
  0x00007f8ab911901d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9119027: cmp    %r11,%rax
  0x00007f8ab911902a: jb     0x00007f8ab91190a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9119030: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9119035: sub    $0x80,%rsp
  0x00007f8ab911903c: mov    %rax,0x78(%rsp)
  0x00007f8ab9119041: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119046: mov    %rdx,0x68(%rsp)
  0x00007f8ab911904b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119050: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119055: mov    %rsi,0x48(%rsp)
  0x00007f8ab911905a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911905f: mov    %r8,0x38(%rsp)
  0x00007f8ab9119064: mov    %r9,0x30(%rsp)
  0x00007f8ab9119069: mov    %r10,0x28(%rsp)
  0x00007f8ab911906e: mov    %r11,0x20(%rsp)
  0x00007f8ab9119073: mov    %r12,0x18(%rsp)
  0x00007f8ab9119078: mov    %r13,0x10(%rsp)
  0x00007f8ab911907d: mov    %r14,0x8(%rsp)
  0x00007f8ab9119082: mov    %r15,(%rsp)
  0x00007f8ab9119086: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9119090: movabs $0x7f8ab9119030,%rsi
  0x00007f8ab911909a: mov    %rsp,%rdx
  0x00007f8ab911909d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91190a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91190a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91190a7: mov    %rsp,%r11
  0x00007f8ab91190aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91190ae: push   %rax
  0x00007f8ab91190af: mov    %r11,%rax
  0x00007f8ab91190b2: mov    0x50(%rbx),%r11
  0x00007f8ab91190b6: mov    0x8(%rax),%rsi
  0x00007f8ab91190ba: mov    %rbx,0x258(%r15)
  0x00007f8ab91190c1: mov    %rbx,%rax
  0x00007f8ab91190c4: jmpq   *%r11
  0x00007f8ab91190c7: mov    0x8(%rsi),%ebx
  0x00007f8ab91190ca: shl    $0x3,%rbx
  0x00007f8ab91190ce: cmp    0x10(%rax),%rbx
  0x00007f8ab91190d2: mov    0x8(%rax),%rbx
  0x00007f8ab91190d6: je     0x00007f8ab91190e1
  0x00007f8ab91190dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab91190e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91190e9: je     0x00007f8ab91191e4
  0x00007f8ab91190ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab91190f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91190fc: je     0x00007f8ab91191e4
  0x00007f8ab9119102: mov    %rsp,%r13
  0x00007f8ab9119105: mov    (%rsp),%rax
  0x00007f8ab9119109: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911910d: pushfq 
  0x00007f8ab911910e: sub    $0x8,%rsp
  0x00007f8ab9119112: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9119117: sub    $0x80,%rsp
  0x00007f8ab911911e: mov    %rax,0x78(%rsp)
  0x00007f8ab9119123: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119128: mov    %rdx,0x68(%rsp)
  0x00007f8ab911912d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119132: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119137: mov    %rsi,0x48(%rsp)
  0x00007f8ab911913c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9119141: mov    %r8,0x38(%rsp)
  0x00007f8ab9119146: mov    %r9,0x30(%rsp)
  0x00007f8ab911914b: mov    %r10,0x28(%rsp)
  0x00007f8ab9119150: mov    %r11,0x20(%rsp)
  0x00007f8ab9119155: mov    %r12,0x18(%rsp)
  0x00007f8ab911915a: mov    %r13,0x10(%rsp)
  0x00007f8ab911915f: mov    %r14,0x8(%rsp)
  0x00007f8ab9119164: mov    %r15,(%rsp)
  0x00007f8ab9119168: sub    $0x200,%rsp
  0x00007f8ab911916f: fxsave64 (%rsp)
  0x00007f8ab9119174: mov    %rbx,%rdi
  0x00007f8ab9119177: mov    %rax,%rsi
  0x00007f8ab911917a: callq  0x00007f8acef8bbca
  0x00007f8ab911917f: fxrstor64 (%rsp)
  0x00007f8ab9119184: add    $0x200,%rsp
  0x00007f8ab911918b: mov    (%rsp),%r15
  0x00007f8ab911918f: mov    0x8(%rsp),%r14
  0x00007f8ab9119194: mov    0x10(%rsp),%r13
  0x00007f8ab9119199: mov    0x18(%rsp),%r12
  0x00007f8ab911919e: mov    0x20(%rsp),%r11
  0x00007f8ab91191a3: mov    0x28(%rsp),%r10
  0x00007f8ab91191a8: mov    0x30(%rsp),%r9
  0x00007f8ab91191ad: mov    0x38(%rsp),%r8
  0x00007f8ab91191b2: mov    0x40(%rsp),%rdi
  0x00007f8ab91191b7: mov    0x48(%rsp),%rsi
  0x00007f8ab91191bc: mov    0x50(%rsp),%rbp
  0x00007f8ab91191c1: mov    0x60(%rsp),%rbx
  0x00007f8ab91191c6: mov    0x68(%rsp),%rdx
  0x00007f8ab91191cb: mov    0x70(%rsp),%rcx
  0x00007f8ab91191d0: mov    0x78(%rsp),%rax
  0x00007f8ab91191d5: add    $0x80,%rsp
  0x00007f8ab91191dc: add    $0x8,%rsp
  0x00007f8ab91191e0: popfq  
  0x00007f8ab91191e1: mov    %r13,%rsp
  0x00007f8ab91191e4: pop    %rax
  0x00007f8ab91191e5: mov    %rsp,%r13
  0x00007f8ab91191e8: sub    $0x10,%rsp
  0x00007f8ab91191ec: mov    %rax,(%rsp)
  0x00007f8ab91191f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91191f5: mov    0x40(%rbx),%rcx
  0x00007f8ab91191f9: jmpq   *%rcx

AHE@0x00007f8ac80c4988: 0xbb000000 i2c: 0x00007f8ab91192a0 c2i: 0x00007f8ab91193b8 c2iUV: 0x00007f8ab911938b
i2c argument handler #0 for: receiver (Lsun/misc/JavaLangAccess;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab91193b8
  0x00007f8ab91192a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91192a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91192ae: cmp    %r11,%rax
  0x00007f8ab91192b1: jbe    0x00007f8ab91192ca
  0x00007f8ab91192b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91192c1: cmp    %r11,%rax
  0x00007f8ab91192c4: jb     0x00007f8ab9119367
  0x00007f8ab91192ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91192d4: cmp    %r11,%rax
  0x00007f8ab91192d7: jbe    0x00007f8ab91192f0
  0x00007f8ab91192dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91192e7: cmp    %r11,%rax
  0x00007f8ab91192ea: jb     0x00007f8ab9119367
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91192f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91192f5: sub    $0x80,%rsp
  0x00007f8ab91192fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9119301: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119306: mov    %rdx,0x68(%rsp)
  0x00007f8ab911930b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119310: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119315: mov    %rsi,0x48(%rsp)
  0x00007f8ab911931a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911931f: mov    %r8,0x38(%rsp)
  0x00007f8ab9119324: mov    %r9,0x30(%rsp)
  0x00007f8ab9119329: mov    %r10,0x28(%rsp)
  0x00007f8ab911932e: mov    %r11,0x20(%rsp)
  0x00007f8ab9119333: mov    %r12,0x18(%rsp)
  0x00007f8ab9119338: mov    %r13,0x10(%rsp)
  0x00007f8ab911933d: mov    %r14,0x8(%rsp)
  0x00007f8ab9119342: mov    %r15,(%rsp)
  0x00007f8ab9119346: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9119350: movabs $0x7f8ab91192f0,%rsi
  0x00007f8ab911935a: mov    %rsp,%rdx
  0x00007f8ab911935d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119361: callq  0x00007f8aceddb9fa
  0x00007f8ab9119366: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9119367: mov    %rsp,%r11
  0x00007f8ab911936a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911936e: push   %rax
  0x00007f8ab911936f: mov    %r11,%rax
  0x00007f8ab9119372: mov    0x50(%rbx),%r11
  0x00007f8ab9119376: mov    0x10(%rax),%rsi
  0x00007f8ab911937a: mov    0x8(%rax),%rdx
  0x00007f8ab911937e: mov    %rbx,0x258(%r15)
  0x00007f8ab9119385: mov    %rbx,%rax
  0x00007f8ab9119388: jmpq   *%r11
  0x00007f8ab911938b: mov    0x8(%rsi),%ebx
  0x00007f8ab911938e: shl    $0x3,%rbx
  0x00007f8ab9119392: cmp    0x10(%rax),%rbx
  0x00007f8ab9119396: mov    0x8(%rax),%rbx
  0x00007f8ab911939a: je     0x00007f8ab91193a5
  0x00007f8ab91193a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91193a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91193ad: je     0x00007f8ab91194a8
  0x00007f8ab91193b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91193b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91193c0: je     0x00007f8ab91194a8
  0x00007f8ab91193c6: mov    %rsp,%r13
  0x00007f8ab91193c9: mov    (%rsp),%rax
  0x00007f8ab91193cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91193d1: pushfq 
  0x00007f8ab91193d2: sub    $0x8,%rsp
  0x00007f8ab91193d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91193db: sub    $0x80,%rsp
  0x00007f8ab91193e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91193e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91193ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91193f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91193f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91193fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9119400: mov    %rdi,0x40(%rsp)
  0x00007f8ab9119405: mov    %r8,0x38(%rsp)
  0x00007f8ab911940a: mov    %r9,0x30(%rsp)
  0x00007f8ab911940f: mov    %r10,0x28(%rsp)
  0x00007f8ab9119414: mov    %r11,0x20(%rsp)
  0x00007f8ab9119419: mov    %r12,0x18(%rsp)
  0x00007f8ab911941e: mov    %r13,0x10(%rsp)
  0x00007f8ab9119423: mov    %r14,0x8(%rsp)
  0x00007f8ab9119428: mov    %r15,(%rsp)
  0x00007f8ab911942c: sub    $0x200,%rsp
  0x00007f8ab9119433: fxsave64 (%rsp)
  0x00007f8ab9119438: mov    %rbx,%rdi
  0x00007f8ab911943b: mov    %rax,%rsi
  0x00007f8ab911943e: callq  0x00007f8acef8bbca
  0x00007f8ab9119443: fxrstor64 (%rsp)
  0x00007f8ab9119448: add    $0x200,%rsp
  0x00007f8ab911944f: mov    (%rsp),%r15
  0x00007f8ab9119453: mov    0x8(%rsp),%r14
  0x00007f8ab9119458: mov    0x10(%rsp),%r13
  0x00007f8ab911945d: mov    0x18(%rsp),%r12
  0x00007f8ab9119462: mov    0x20(%rsp),%r11
  0x00007f8ab9119467: mov    0x28(%rsp),%r10
  0x00007f8ab911946c: mov    0x30(%rsp),%r9
  0x00007f8ab9119471: mov    0x38(%rsp),%r8
  0x00007f8ab9119476: mov    0x40(%rsp),%rdi
  0x00007f8ab911947b: mov    0x48(%rsp),%rsi
  0x00007f8ab9119480: mov    0x50(%rsp),%rbp
  0x00007f8ab9119485: mov    0x60(%rsp),%rbx
  0x00007f8ab911948a: mov    0x68(%rsp),%rdx
  0x00007f8ab911948f: mov    0x70(%rsp),%rcx
  0x00007f8ab9119494: mov    0x78(%rsp),%rax
  0x00007f8ab9119499: add    $0x80,%rsp
  0x00007f8ab91194a0: add    $0x8,%rsp
  0x00007f8ab91194a4: popfq  
  0x00007f8ab91194a5: mov    %r13,%rsp
  0x00007f8ab91194a8: pop    %rax
  0x00007f8ab91194a9: mov    %rsp,%r13
  0x00007f8ab91194ac: sub    $0x20,%rsp
  0x00007f8ab91194b0: mov    %rax,(%rsp)
  0x00007f8ab91194b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab91194b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab91194be: mov    0x40(%rbx),%rcx
  0x00007f8ab91194c2: jmpq   *%rcx

AHE@0x00007f8ac80c49d0: 0x i2c: 0x00007f8ab91195a0 c2i: 0x00007f8ab91196b0 c2iUV: 0x00007f8ab9119683
i2c argument handler #0 for: static ()Ljava/lang/ref/ReferenceQueue; (530 bytes generated)
c2i argument handler starts at 0x7f8ab91196b0
  0x00007f8ab91195a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91195a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91195ae: cmp    %r11,%rax
  0x00007f8ab91195b1: jbe    0x00007f8ab91195ca
  0x00007f8ab91195b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91195c1: cmp    %r11,%rax
  0x00007f8ab91195c4: jb     0x00007f8ab9119667
  0x00007f8ab91195ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91195d4: cmp    %r11,%rax
  0x00007f8ab91195d7: jbe    0x00007f8ab91195f0
  0x00007f8ab91195dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91195e7: cmp    %r11,%rax
  0x00007f8ab91195ea: jb     0x00007f8ab9119667
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91195f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91195f5: sub    $0x80,%rsp
  0x00007f8ab91195fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9119601: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119606: mov    %rdx,0x68(%rsp)
  0x00007f8ab911960b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119610: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119615: mov    %rsi,0x48(%rsp)
  0x00007f8ab911961a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911961f: mov    %r8,0x38(%rsp)
  0x00007f8ab9119624: mov    %r9,0x30(%rsp)
  0x00007f8ab9119629: mov    %r10,0x28(%rsp)
  0x00007f8ab911962e: mov    %r11,0x20(%rsp)
  0x00007f8ab9119633: mov    %r12,0x18(%rsp)
  0x00007f8ab9119638: mov    %r13,0x10(%rsp)
  0x00007f8ab911963d: mov    %r14,0x8(%rsp)
  0x00007f8ab9119642: mov    %r15,(%rsp)
  0x00007f8ab9119646: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9119650: movabs $0x7f8ab91195f0,%rsi
  0x00007f8ab911965a: mov    %rsp,%rdx
  0x00007f8ab911965d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119661: callq  0x00007f8aceddb9fa
  0x00007f8ab9119666: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9119667: mov    %rsp,%r11
  0x00007f8ab911966a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911966e: push   %rax
  0x00007f8ab911966f: mov    %r11,%rax
  0x00007f8ab9119672: mov    0x50(%rbx),%r11
  0x00007f8ab9119676: mov    %rbx,0x258(%r15)
  0x00007f8ab911967d: mov    %rbx,%rax
  0x00007f8ab9119680: jmpq   *%r11
  0x00007f8ab9119683: mov    0x8(%rsi),%ebx
  0x00007f8ab9119686: shl    $0x3,%rbx
  0x00007f8ab911968a: cmp    0x10(%rax),%rbx
  0x00007f8ab911968e: mov    0x8(%rax),%rbx
  0x00007f8ab9119692: je     0x00007f8ab911969d
  0x00007f8ab9119698: jmpq   0x00007f8ab9105c40
  0x00007f8ab911969d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91196a5: je     0x00007f8ab91197a0
  0x00007f8ab91196ab: jmpq   0x00007f8ab9105c40
  0x00007f8ab91196b0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91196b8: je     0x00007f8ab91197a0
  0x00007f8ab91196be: mov    %rsp,%r13
  0x00007f8ab91196c1: mov    (%rsp),%rax
  0x00007f8ab91196c5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91196c9: pushfq 
  0x00007f8ab91196ca: sub    $0x8,%rsp
  0x00007f8ab91196ce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91196d3: sub    $0x80,%rsp
  0x00007f8ab91196da: mov    %rax,0x78(%rsp)
  0x00007f8ab91196df: mov    %rcx,0x70(%rsp)
  0x00007f8ab91196e4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91196e9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91196ee: mov    %rbp,0x50(%rsp)
  0x00007f8ab91196f3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91196f8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91196fd: mov    %r8,0x38(%rsp)
  0x00007f8ab9119702: mov    %r9,0x30(%rsp)
  0x00007f8ab9119707: mov    %r10,0x28(%rsp)
  0x00007f8ab911970c: mov    %r11,0x20(%rsp)
  0x00007f8ab9119711: mov    %r12,0x18(%rsp)
  0x00007f8ab9119716: mov    %r13,0x10(%rsp)
  0x00007f8ab911971b: mov    %r14,0x8(%rsp)
  0x00007f8ab9119720: mov    %r15,(%rsp)
  0x00007f8ab9119724: sub    $0x200,%rsp
  0x00007f8ab911972b: fxsave64 (%rsp)
  0x00007f8ab9119730: mov    %rbx,%rdi
  0x00007f8ab9119733: mov    %rax,%rsi
  0x00007f8ab9119736: callq  0x00007f8acef8bbca
  0x00007f8ab911973b: fxrstor64 (%rsp)
  0x00007f8ab9119740: add    $0x200,%rsp
  0x00007f8ab9119747: mov    (%rsp),%r15
  0x00007f8ab911974b: mov    0x8(%rsp),%r14
  0x00007f8ab9119750: mov    0x10(%rsp),%r13
  0x00007f8ab9119755: mov    0x18(%rsp),%r12
  0x00007f8ab911975a: mov    0x20(%rsp),%r11
  0x00007f8ab911975f: mov    0x28(%rsp),%r10
  0x00007f8ab9119764: mov    0x30(%rsp),%r9
  0x00007f8ab9119769: mov    0x38(%rsp),%r8
  0x00007f8ab911976e: mov    0x40(%rsp),%rdi
  0x00007f8ab9119773: mov    0x48(%rsp),%rsi
  0x00007f8ab9119778: mov    0x50(%rsp),%rbp
  0x00007f8ab911977d: mov    0x60(%rsp),%rbx
  0x00007f8ab9119782: mov    0x68(%rsp),%rdx
  0x00007f8ab9119787: mov    0x70(%rsp),%rcx
  0x00007f8ab911978c: mov    0x78(%rsp),%rax
  0x00007f8ab9119791: add    $0x80,%rsp
  0x00007f8ab9119798: add    $0x8,%rsp
  0x00007f8ab911979c: popfq  
  0x00007f8ab911979d: mov    %r13,%rsp
  0x00007f8ab91197a0: pop    %rax
  0x00007f8ab91197a1: mov    %rsp,%r13
  0x00007f8ab91197a4: sub    $0x10,%rsp
  0x00007f8ab91197a8: mov    %rax,(%rsp)
  0x00007f8ab91197ac: mov    0x40(%rbx),%rcx
  0x00007f8ab91197b0: jmpq   *%rcx

AHE@0x00007f8ac80c4a18: 0xb0000000 i2c: 0x00007f8ab9119860 c2i: 0x00007f8ab9119974 c2iUV: 0x00007f8ab9119947
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f8ab9119974
  0x00007f8ab9119860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9119864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911986e: cmp    %r11,%rax
  0x00007f8ab9119871: jbe    0x00007f8ab911988a
  0x00007f8ab9119877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9119881: cmp    %r11,%rax
  0x00007f8ab9119884: jb     0x00007f8ab9119927
  0x00007f8ab911988a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9119894: cmp    %r11,%rax
  0x00007f8ab9119897: jbe    0x00007f8ab91198b0
  0x00007f8ab911989d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91198a7: cmp    %r11,%rax
  0x00007f8ab91198aa: jb     0x00007f8ab9119927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91198b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91198b5: sub    $0x80,%rsp
  0x00007f8ab91198bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91198c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91198c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91198cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91198d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91198d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91198da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91198df: mov    %r8,0x38(%rsp)
  0x00007f8ab91198e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91198e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91198ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91198f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91198f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91198fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9119902: mov    %r15,(%rsp)
  0x00007f8ab9119906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9119910: movabs $0x7f8ab91198b0,%rsi
  0x00007f8ab911991a: mov    %rsp,%rdx
  0x00007f8ab911991d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119921: callq  0x00007f8aceddb9fa
  0x00007f8ab9119926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9119927: mov    %rsp,%r11
  0x00007f8ab911992a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911992e: push   %rax
  0x00007f8ab911992f: mov    %r11,%rax
  0x00007f8ab9119932: mov    0x50(%rbx),%r11
  0x00007f8ab9119936: mov    0x8(%rax),%rsi
  0x00007f8ab911993a: mov    %rbx,0x258(%r15)
  0x00007f8ab9119941: mov    %rbx,%rax
  0x00007f8ab9119944: jmpq   *%r11
  0x00007f8ab9119947: mov    0x8(%rsi),%ebx
  0x00007f8ab911994a: shl    $0x3,%rbx
  0x00007f8ab911994e: cmp    0x10(%rax),%rbx
  0x00007f8ab9119952: mov    0x8(%rax),%rbx
  0x00007f8ab9119956: je     0x00007f8ab9119961
  0x00007f8ab911995c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9119961: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9119969: je     0x00007f8ab9119a64
  0x00007f8ab911996f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9119974: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911997c: je     0x00007f8ab9119a64
  0x00007f8ab9119982: mov    %rsp,%r13
  0x00007f8ab9119985: mov    (%rsp),%rax
  0x00007f8ab9119989: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911998d: pushfq 
  0x00007f8ab911998e: sub    $0x8,%rsp
  0x00007f8ab9119992: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9119997: sub    $0x80,%rsp
  0x00007f8ab911999e: mov    %rax,0x78(%rsp)
  0x00007f8ab91199a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91199a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91199ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab91199b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91199b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91199bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab91199c1: mov    %r8,0x38(%rsp)
  0x00007f8ab91199c6: mov    %r9,0x30(%rsp)
  0x00007f8ab91199cb: mov    %r10,0x28(%rsp)
  0x00007f8ab91199d0: mov    %r11,0x20(%rsp)
  0x00007f8ab91199d5: mov    %r12,0x18(%rsp)
  0x00007f8ab91199da: mov    %r13,0x10(%rsp)
  0x00007f8ab91199df: mov    %r14,0x8(%rsp)
  0x00007f8ab91199e4: mov    %r15,(%rsp)
  0x00007f8ab91199e8: sub    $0x200,%rsp
  0x00007f8ab91199ef: fxsave64 (%rsp)
  0x00007f8ab91199f4: mov    %rbx,%rdi
  0x00007f8ab91199f7: mov    %rax,%rsi
  0x00007f8ab91199fa: callq  0x00007f8acef8bbca
  0x00007f8ab91199ff: fxrstor64 (%rsp)
  0x00007f8ab9119a04: add    $0x200,%rsp
  0x00007f8ab9119a0b: mov    (%rsp),%r15
  0x00007f8ab9119a0f: mov    0x8(%rsp),%r14
  0x00007f8ab9119a14: mov    0x10(%rsp),%r13
  0x00007f8ab9119a19: mov    0x18(%rsp),%r12
  0x00007f8ab9119a1e: mov    0x20(%rsp),%r11
  0x00007f8ab9119a23: mov    0x28(%rsp),%r10
  0x00007f8ab9119a28: mov    0x30(%rsp),%r9
  0x00007f8ab9119a2d: mov    0x38(%rsp),%r8
  0x00007f8ab9119a32: mov    0x40(%rsp),%rdi
  0x00007f8ab9119a37: mov    0x48(%rsp),%rsi
  0x00007f8ab9119a3c: mov    0x50(%rsp),%rbp
  0x00007f8ab9119a41: mov    0x60(%rsp),%rbx
  0x00007f8ab9119a46: mov    0x68(%rsp),%rdx
  0x00007f8ab9119a4b: mov    0x70(%rsp),%rcx
  0x00007f8ab9119a50: mov    0x78(%rsp),%rax
  0x00007f8ab9119a55: add    $0x80,%rsp
  0x00007f8ab9119a5c: add    $0x8,%rsp
  0x00007f8ab9119a60: popfq  
  0x00007f8ab9119a61: mov    %r13,%rsp
  0x00007f8ab9119a64: pop    %rax
  0x00007f8ab9119a65: mov    %rsp,%r13
  0x00007f8ab9119a68: sub    $0x10,%rsp
  0x00007f8ab9119a6c: mov    %rax,(%rsp)
  0x00007f8ab9119a70: mov    %rsi,0x8(%rsp)
  0x00007f8ab9119a75: mov    0x40(%rbx),%rcx
  0x00007f8ab9119a79: jmpq   *%rcx

AHE@0x00007f8ac80c4a60: 0x i2c: 0x00007f8ab9119b20 c2i: 0x00007f8ab9119c30 c2iUV: 0x00007f8ab9119c03
i2c argument handler #0 for: static ()Ljava/lang/ref/ReferenceQueue; (530 bytes generated)
c2i argument handler starts at 0x7f8ab9119c30
  0x00007f8ab9119b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9119b24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9119b2e: cmp    %r11,%rax
  0x00007f8ab9119b31: jbe    0x00007f8ab9119b4a
  0x00007f8ab9119b37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9119b41: cmp    %r11,%rax
  0x00007f8ab9119b44: jb     0x00007f8ab9119be7
  0x00007f8ab9119b4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9119b54: cmp    %r11,%rax
  0x00007f8ab9119b57: jbe    0x00007f8ab9119b70
  0x00007f8ab9119b5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9119b67: cmp    %r11,%rax
  0x00007f8ab9119b6a: jb     0x00007f8ab9119be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9119b70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9119b75: sub    $0x80,%rsp
  0x00007f8ab9119b7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9119b81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119b86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9119b8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119b90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119b95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9119b9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9119b9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9119ba4: mov    %r9,0x30(%rsp)
  0x00007f8ab9119ba9: mov    %r10,0x28(%rsp)
  0x00007f8ab9119bae: mov    %r11,0x20(%rsp)
  0x00007f8ab9119bb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9119bb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9119bbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9119bc2: mov    %r15,(%rsp)
  0x00007f8ab9119bc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9119bd0: movabs $0x7f8ab9119b70,%rsi
  0x00007f8ab9119bda: mov    %rsp,%rdx
  0x00007f8ab9119bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119be1: callq  0x00007f8aceddb9fa
  0x00007f8ab9119be6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9119be7: mov    %rsp,%r11
  0x00007f8ab9119bea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119bee: push   %rax
  0x00007f8ab9119bef: mov    %r11,%rax
  0x00007f8ab9119bf2: mov    0x50(%rbx),%r11
  0x00007f8ab9119bf6: mov    %rbx,0x258(%r15)
  0x00007f8ab9119bfd: mov    %rbx,%rax
  0x00007f8ab9119c00: jmpq   *%r11
  0x00007f8ab9119c03: mov    0x8(%rsi),%ebx
  0x00007f8ab9119c06: shl    $0x3,%rbx
  0x00007f8ab9119c0a: cmp    0x10(%rax),%rbx
  0x00007f8ab9119c0e: mov    0x8(%rax),%rbx
  0x00007f8ab9119c12: je     0x00007f8ab9119c1d
  0x00007f8ab9119c18: jmpq   0x00007f8ab9105c40
  0x00007f8ab9119c1d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9119c25: je     0x00007f8ab9119d20
  0x00007f8ab9119c2b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9119c30: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9119c38: je     0x00007f8ab9119d20
  0x00007f8ab9119c3e: mov    %rsp,%r13
  0x00007f8ab9119c41: mov    (%rsp),%rax
  0x00007f8ab9119c45: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119c49: pushfq 
  0x00007f8ab9119c4a: sub    $0x8,%rsp
  0x00007f8ab9119c4e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9119c53: sub    $0x80,%rsp
  0x00007f8ab9119c5a: mov    %rax,0x78(%rsp)
  0x00007f8ab9119c5f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119c64: mov    %rdx,0x68(%rsp)
  0x00007f8ab9119c69: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119c6e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119c73: mov    %rsi,0x48(%rsp)
  0x00007f8ab9119c78: mov    %rdi,0x40(%rsp)
  0x00007f8ab9119c7d: mov    %r8,0x38(%rsp)
  0x00007f8ab9119c82: mov    %r9,0x30(%rsp)
  0x00007f8ab9119c87: mov    %r10,0x28(%rsp)
  0x00007f8ab9119c8c: mov    %r11,0x20(%rsp)
  0x00007f8ab9119c91: mov    %r12,0x18(%rsp)
  0x00007f8ab9119c96: mov    %r13,0x10(%rsp)
  0x00007f8ab9119c9b: mov    %r14,0x8(%rsp)
  0x00007f8ab9119ca0: mov    %r15,(%rsp)
  0x00007f8ab9119ca4: sub    $0x200,%rsp
  0x00007f8ab9119cab: fxsave64 (%rsp)
  0x00007f8ab9119cb0: mov    %rbx,%rdi
  0x00007f8ab9119cb3: mov    %rax,%rsi
  0x00007f8ab9119cb6: callq  0x00007f8acef8bbca
  0x00007f8ab9119cbb: fxrstor64 (%rsp)
  0x00007f8ab9119cc0: add    $0x200,%rsp
  0x00007f8ab9119cc7: mov    (%rsp),%r15
  0x00007f8ab9119ccb: mov    0x8(%rsp),%r14
  0x00007f8ab9119cd0: mov    0x10(%rsp),%r13
  0x00007f8ab9119cd5: mov    0x18(%rsp),%r12
  0x00007f8ab9119cda: mov    0x20(%rsp),%r11
  0x00007f8ab9119cdf: mov    0x28(%rsp),%r10
  0x00007f8ab9119ce4: mov    0x30(%rsp),%r9
  0x00007f8ab9119ce9: mov    0x38(%rsp),%r8
  0x00007f8ab9119cee: mov    0x40(%rsp),%rdi
  0x00007f8ab9119cf3: mov    0x48(%rsp),%rsi
  0x00007f8ab9119cf8: mov    0x50(%rsp),%rbp
  0x00007f8ab9119cfd: mov    0x60(%rsp),%rbx
  0x00007f8ab9119d02: mov    0x68(%rsp),%rdx
  0x00007f8ab9119d07: mov    0x70(%rsp),%rcx
  0x00007f8ab9119d0c: mov    0x78(%rsp),%rax
  0x00007f8ab9119d11: add    $0x80,%rsp
  0x00007f8ab9119d18: add    $0x8,%rsp
  0x00007f8ab9119d1c: popfq  
  0x00007f8ab9119d1d: mov    %r13,%rsp
  0x00007f8ab9119d20: pop    %rax
  0x00007f8ab9119d21: mov    %rsp,%r13
  0x00007f8ab9119d24: sub    $0x10,%rsp
  0x00007f8ab9119d28: mov    %rax,(%rsp)
  0x00007f8ab9119d2c: mov    0x40(%rbx),%rcx
  0x00007f8ab9119d30: jmpq   *%rcx

AHE@0x00007f8ac80c4aa8: 0x i2c: 0x00007f8ab9119de0 c2i: 0x00007f8ab9119ef0 c2iUV: 0x00007f8ab9119ec3
i2c argument handler #0 for: static ()Ljava/lang/ref/Finalizer; (530 bytes generated)
c2i argument handler starts at 0x7f8ab9119ef0
  0x00007f8ab9119de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9119de4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9119dee: cmp    %r11,%rax
  0x00007f8ab9119df1: jbe    0x00007f8ab9119e0a
  0x00007f8ab9119df7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9119e01: cmp    %r11,%rax
  0x00007f8ab9119e04: jb     0x00007f8ab9119ea7
  0x00007f8ab9119e0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9119e14: cmp    %r11,%rax
  0x00007f8ab9119e17: jbe    0x00007f8ab9119e30
  0x00007f8ab9119e1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9119e27: cmp    %r11,%rax
  0x00007f8ab9119e2a: jb     0x00007f8ab9119ea7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9119e30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9119e35: sub    $0x80,%rsp
  0x00007f8ab9119e3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9119e41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119e46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9119e4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119e50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119e55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9119e5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9119e5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9119e64: mov    %r9,0x30(%rsp)
  0x00007f8ab9119e69: mov    %r10,0x28(%rsp)
  0x00007f8ab9119e6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9119e73: mov    %r12,0x18(%rsp)
  0x00007f8ab9119e78: mov    %r13,0x10(%rsp)
  0x00007f8ab9119e7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9119e82: mov    %r15,(%rsp)
  0x00007f8ab9119e86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9119e90: movabs $0x7f8ab9119e30,%rsi
  0x00007f8ab9119e9a: mov    %rsp,%rdx
  0x00007f8ab9119e9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119ea1: callq  0x00007f8aceddb9fa
  0x00007f8ab9119ea6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9119ea7: mov    %rsp,%r11
  0x00007f8ab9119eaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119eae: push   %rax
  0x00007f8ab9119eaf: mov    %r11,%rax
  0x00007f8ab9119eb2: mov    0x50(%rbx),%r11
  0x00007f8ab9119eb6: mov    %rbx,0x258(%r15)
  0x00007f8ab9119ebd: mov    %rbx,%rax
  0x00007f8ab9119ec0: jmpq   *%r11
  0x00007f8ab9119ec3: mov    0x8(%rsi),%ebx
  0x00007f8ab9119ec6: shl    $0x3,%rbx
  0x00007f8ab9119eca: cmp    0x10(%rax),%rbx
  0x00007f8ab9119ece: mov    0x8(%rax),%rbx
  0x00007f8ab9119ed2: je     0x00007f8ab9119edd
  0x00007f8ab9119ed8: jmpq   0x00007f8ab9105c40
  0x00007f8ab9119edd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9119ee5: je     0x00007f8ab9119fe0
  0x00007f8ab9119eeb: jmpq   0x00007f8ab9105c40
  0x00007f8ab9119ef0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9119ef8: je     0x00007f8ab9119fe0
  0x00007f8ab9119efe: mov    %rsp,%r13
  0x00007f8ab9119f01: mov    (%rsp),%rax
  0x00007f8ab9119f05: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9119f09: pushfq 
  0x00007f8ab9119f0a: sub    $0x8,%rsp
  0x00007f8ab9119f0e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9119f13: sub    $0x80,%rsp
  0x00007f8ab9119f1a: mov    %rax,0x78(%rsp)
  0x00007f8ab9119f1f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9119f24: mov    %rdx,0x68(%rsp)
  0x00007f8ab9119f29: mov    %rbx,0x60(%rsp)
  0x00007f8ab9119f2e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9119f33: mov    %rsi,0x48(%rsp)
  0x00007f8ab9119f38: mov    %rdi,0x40(%rsp)
  0x00007f8ab9119f3d: mov    %r8,0x38(%rsp)
  0x00007f8ab9119f42: mov    %r9,0x30(%rsp)
  0x00007f8ab9119f47: mov    %r10,0x28(%rsp)
  0x00007f8ab9119f4c: mov    %r11,0x20(%rsp)
  0x00007f8ab9119f51: mov    %r12,0x18(%rsp)
  0x00007f8ab9119f56: mov    %r13,0x10(%rsp)
  0x00007f8ab9119f5b: mov    %r14,0x8(%rsp)
  0x00007f8ab9119f60: mov    %r15,(%rsp)
  0x00007f8ab9119f64: sub    $0x200,%rsp
  0x00007f8ab9119f6b: fxsave64 (%rsp)
  0x00007f8ab9119f70: mov    %rbx,%rdi
  0x00007f8ab9119f73: mov    %rax,%rsi
  0x00007f8ab9119f76: callq  0x00007f8acef8bbca
  0x00007f8ab9119f7b: fxrstor64 (%rsp)
  0x00007f8ab9119f80: add    $0x200,%rsp
  0x00007f8ab9119f87: mov    (%rsp),%r15
  0x00007f8ab9119f8b: mov    0x8(%rsp),%r14
  0x00007f8ab9119f90: mov    0x10(%rsp),%r13
  0x00007f8ab9119f95: mov    0x18(%rsp),%r12
  0x00007f8ab9119f9a: mov    0x20(%rsp),%r11
  0x00007f8ab9119f9f: mov    0x28(%rsp),%r10
  0x00007f8ab9119fa4: mov    0x30(%rsp),%r9
  0x00007f8ab9119fa9: mov    0x38(%rsp),%r8
  0x00007f8ab9119fae: mov    0x40(%rsp),%rdi
  0x00007f8ab9119fb3: mov    0x48(%rsp),%rsi
  0x00007f8ab9119fb8: mov    0x50(%rsp),%rbp
  0x00007f8ab9119fbd: mov    0x60(%rsp),%rbx
  0x00007f8ab9119fc2: mov    0x68(%rsp),%rdx
  0x00007f8ab9119fc7: mov    0x70(%rsp),%rcx
  0x00007f8ab9119fcc: mov    0x78(%rsp),%rax
  0x00007f8ab9119fd1: add    $0x80,%rsp
  0x00007f8ab9119fd8: add    $0x8,%rsp
  0x00007f8ab9119fdc: popfq  
  0x00007f8ab9119fdd: mov    %r13,%rsp
  0x00007f8ab9119fe0: pop    %rax
  0x00007f8ab9119fe1: mov    %rsp,%r13
  0x00007f8ab9119fe4: sub    $0x10,%rsp
  0x00007f8ab9119fe8: mov    %rax,(%rsp)
  0x00007f8ab9119fec: mov    0x40(%rbx),%rcx
  0x00007f8ab9119ff0: jmpq   *%rcx

AHE@0x00007f8ac80c4af0: 0x i2c: 0x00007f8ab911a0a0 c2i: 0x00007f8ab911a1b0 c2iUV: 0x00007f8ab911a183
i2c argument handler #0 for: static ()Ljava/lang/Object; (530 bytes generated)
c2i argument handler starts at 0x7f8ab911a1b0
  0x00007f8ab911a0a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911a0a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911a0ae: cmp    %r11,%rax
  0x00007f8ab911a0b1: jbe    0x00007f8ab911a0ca
  0x00007f8ab911a0b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911a0c1: cmp    %r11,%rax
  0x00007f8ab911a0c4: jb     0x00007f8ab911a167
  0x00007f8ab911a0ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911a0d4: cmp    %r11,%rax
  0x00007f8ab911a0d7: jbe    0x00007f8ab911a0f0
  0x00007f8ab911a0dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911a0e7: cmp    %r11,%rax
  0x00007f8ab911a0ea: jb     0x00007f8ab911a167
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911a0f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911a0f5: sub    $0x80,%rsp
  0x00007f8ab911a0fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911a101: mov    %rcx,0x70(%rsp)
  0x00007f8ab911a106: mov    %rdx,0x68(%rsp)
  0x00007f8ab911a10b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911a110: mov    %rbp,0x50(%rsp)
  0x00007f8ab911a115: mov    %rsi,0x48(%rsp)
  0x00007f8ab911a11a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911a11f: mov    %r8,0x38(%rsp)
  0x00007f8ab911a124: mov    %r9,0x30(%rsp)
  0x00007f8ab911a129: mov    %r10,0x28(%rsp)
  0x00007f8ab911a12e: mov    %r11,0x20(%rsp)
  0x00007f8ab911a133: mov    %r12,0x18(%rsp)
  0x00007f8ab911a138: mov    %r13,0x10(%rsp)
  0x00007f8ab911a13d: mov    %r14,0x8(%rsp)
  0x00007f8ab911a142: mov    %r15,(%rsp)
  0x00007f8ab911a146: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911a150: movabs $0x7f8ab911a0f0,%rsi
  0x00007f8ab911a15a: mov    %rsp,%rdx
  0x00007f8ab911a15d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a161: callq  0x00007f8aceddb9fa
  0x00007f8ab911a166: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911a167: mov    %rsp,%r11
  0x00007f8ab911a16a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a16e: push   %rax
  0x00007f8ab911a16f: mov    %r11,%rax
  0x00007f8ab911a172: mov    0x50(%rbx),%r11
  0x00007f8ab911a176: mov    %rbx,0x258(%r15)
  0x00007f8ab911a17d: mov    %rbx,%rax
  0x00007f8ab911a180: jmpq   *%r11
  0x00007f8ab911a183: mov    0x8(%rsi),%ebx
  0x00007f8ab911a186: shl    $0x3,%rbx
  0x00007f8ab911a18a: cmp    0x10(%rax),%rbx
  0x00007f8ab911a18e: mov    0x8(%rax),%rbx
  0x00007f8ab911a192: je     0x00007f8ab911a19d
  0x00007f8ab911a198: jmpq   0x00007f8ab9105c40
  0x00007f8ab911a19d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911a1a5: je     0x00007f8ab911a2a0
  0x00007f8ab911a1ab: jmpq   0x00007f8ab9105c40
  0x00007f8ab911a1b0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911a1b8: je     0x00007f8ab911a2a0
  0x00007f8ab911a1be: mov    %rsp,%r13
  0x00007f8ab911a1c1: mov    (%rsp),%rax
  0x00007f8ab911a1c5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a1c9: pushfq 
  0x00007f8ab911a1ca: sub    $0x8,%rsp
  0x00007f8ab911a1ce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911a1d3: sub    $0x80,%rsp
  0x00007f8ab911a1da: mov    %rax,0x78(%rsp)
  0x00007f8ab911a1df: mov    %rcx,0x70(%rsp)
  0x00007f8ab911a1e4: mov    %rdx,0x68(%rsp)
  0x00007f8ab911a1e9: mov    %rbx,0x60(%rsp)
  0x00007f8ab911a1ee: mov    %rbp,0x50(%rsp)
  0x00007f8ab911a1f3: mov    %rsi,0x48(%rsp)
  0x00007f8ab911a1f8: mov    %rdi,0x40(%rsp)
  0x00007f8ab911a1fd: mov    %r8,0x38(%rsp)
  0x00007f8ab911a202: mov    %r9,0x30(%rsp)
  0x00007f8ab911a207: mov    %r10,0x28(%rsp)
  0x00007f8ab911a20c: mov    %r11,0x20(%rsp)
  0x00007f8ab911a211: mov    %r12,0x18(%rsp)
  0x00007f8ab911a216: mov    %r13,0x10(%rsp)
  0x00007f8ab911a21b: mov    %r14,0x8(%rsp)
  0x00007f8ab911a220: mov    %r15,(%rsp)
  0x00007f8ab911a224: sub    $0x200,%rsp
  0x00007f8ab911a22b: fxsave64 (%rsp)
  0x00007f8ab911a230: mov    %rbx,%rdi
  0x00007f8ab911a233: mov    %rax,%rsi
  0x00007f8ab911a236: callq  0x00007f8acef8bbca
  0x00007f8ab911a23b: fxrstor64 (%rsp)
  0x00007f8ab911a240: add    $0x200,%rsp
  0x00007f8ab911a247: mov    (%rsp),%r15
  0x00007f8ab911a24b: mov    0x8(%rsp),%r14
  0x00007f8ab911a250: mov    0x10(%rsp),%r13
  0x00007f8ab911a255: mov    0x18(%rsp),%r12
  0x00007f8ab911a25a: mov    0x20(%rsp),%r11
  0x00007f8ab911a25f: mov    0x28(%rsp),%r10
  0x00007f8ab911a264: mov    0x30(%rsp),%r9
  0x00007f8ab911a269: mov    0x38(%rsp),%r8
  0x00007f8ab911a26e: mov    0x40(%rsp),%rdi
  0x00007f8ab911a273: mov    0x48(%rsp),%rsi
  0x00007f8ab911a278: mov    0x50(%rsp),%rbp
  0x00007f8ab911a27d: mov    0x60(%rsp),%rbx
  0x00007f8ab911a282: mov    0x68(%rsp),%rdx
  0x00007f8ab911a287: mov    0x70(%rsp),%rcx
  0x00007f8ab911a28c: mov    0x78(%rsp),%rax
  0x00007f8ab911a291: add    $0x80,%rsp
  0x00007f8ab911a298: add    $0x8,%rsp
  0x00007f8ab911a29c: popfq  
  0x00007f8ab911a29d: mov    %r13,%rsp
  0x00007f8ab911a2a0: pop    %rax
  0x00007f8ab911a2a1: mov    %rsp,%r13
  0x00007f8ab911a2a4: sub    $0x10,%rsp
  0x00007f8ab911a2a8: mov    %rax,(%rsp)
  0x00007f8ab911a2ac: mov    0x40(%rbx),%rcx
  0x00007f8ab911a2b0: jmpq   *%rcx

AHE@0x00007f8ac80c4b38: 0xbb000000 i2c: 0x00007f8ab911a360 c2i: 0x00007f8ab911a478 c2iUV: 0x00007f8ab911a44b
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;Lsun/misc/JavaLangAccess;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab911a478
  0x00007f8ab911a360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911a364: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911a36e: cmp    %r11,%rax
  0x00007f8ab911a371: jbe    0x00007f8ab911a38a
  0x00007f8ab911a377: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911a381: cmp    %r11,%rax
  0x00007f8ab911a384: jb     0x00007f8ab911a427
  0x00007f8ab911a38a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911a394: cmp    %r11,%rax
  0x00007f8ab911a397: jbe    0x00007f8ab911a3b0
  0x00007f8ab911a39d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911a3a7: cmp    %r11,%rax
  0x00007f8ab911a3aa: jb     0x00007f8ab911a427
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911a3b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911a3b5: sub    $0x80,%rsp
  0x00007f8ab911a3bc: mov    %rax,0x78(%rsp)
  0x00007f8ab911a3c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab911a3c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab911a3cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab911a3d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab911a3d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab911a3da: mov    %rdi,0x40(%rsp)
  0x00007f8ab911a3df: mov    %r8,0x38(%rsp)
  0x00007f8ab911a3e4: mov    %r9,0x30(%rsp)
  0x00007f8ab911a3e9: mov    %r10,0x28(%rsp)
  0x00007f8ab911a3ee: mov    %r11,0x20(%rsp)
  0x00007f8ab911a3f3: mov    %r12,0x18(%rsp)
  0x00007f8ab911a3f8: mov    %r13,0x10(%rsp)
  0x00007f8ab911a3fd: mov    %r14,0x8(%rsp)
  0x00007f8ab911a402: mov    %r15,(%rsp)
  0x00007f8ab911a406: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911a410: movabs $0x7f8ab911a3b0,%rsi
  0x00007f8ab911a41a: mov    %rsp,%rdx
  0x00007f8ab911a41d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a421: callq  0x00007f8aceddb9fa
  0x00007f8ab911a426: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911a427: mov    %rsp,%r11
  0x00007f8ab911a42a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a42e: push   %rax
  0x00007f8ab911a42f: mov    %r11,%rax
  0x00007f8ab911a432: mov    0x50(%rbx),%r11
  0x00007f8ab911a436: mov    0x10(%rax),%rsi
  0x00007f8ab911a43a: mov    0x8(%rax),%rdx
  0x00007f8ab911a43e: mov    %rbx,0x258(%r15)
  0x00007f8ab911a445: mov    %rbx,%rax
  0x00007f8ab911a448: jmpq   *%r11
  0x00007f8ab911a44b: mov    0x8(%rsi),%ebx
  0x00007f8ab911a44e: shl    $0x3,%rbx
  0x00007f8ab911a452: cmp    0x10(%rax),%rbx
  0x00007f8ab911a456: mov    0x8(%rax),%rbx
  0x00007f8ab911a45a: je     0x00007f8ab911a465
  0x00007f8ab911a460: jmpq   0x00007f8ab9105c40
  0x00007f8ab911a465: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911a46d: je     0x00007f8ab911a568
  0x00007f8ab911a473: jmpq   0x00007f8ab9105c40
  0x00007f8ab911a478: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911a480: je     0x00007f8ab911a568
  0x00007f8ab911a486: mov    %rsp,%r13
  0x00007f8ab911a489: mov    (%rsp),%rax
  0x00007f8ab911a48d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a491: pushfq 
  0x00007f8ab911a492: sub    $0x8,%rsp
  0x00007f8ab911a496: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911a49b: sub    $0x80,%rsp
  0x00007f8ab911a4a2: mov    %rax,0x78(%rsp)
  0x00007f8ab911a4a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911a4ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab911a4b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911a4b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911a4bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911a4c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab911a4c5: mov    %r8,0x38(%rsp)
  0x00007f8ab911a4ca: mov    %r9,0x30(%rsp)
  0x00007f8ab911a4cf: mov    %r10,0x28(%rsp)
  0x00007f8ab911a4d4: mov    %r11,0x20(%rsp)
  0x00007f8ab911a4d9: mov    %r12,0x18(%rsp)
  0x00007f8ab911a4de: mov    %r13,0x10(%rsp)
  0x00007f8ab911a4e3: mov    %r14,0x8(%rsp)
  0x00007f8ab911a4e8: mov    %r15,(%rsp)
  0x00007f8ab911a4ec: sub    $0x200,%rsp
  0x00007f8ab911a4f3: fxsave64 (%rsp)
  0x00007f8ab911a4f8: mov    %rbx,%rdi
  0x00007f8ab911a4fb: mov    %rax,%rsi
  0x00007f8ab911a4fe: callq  0x00007f8acef8bbca
  0x00007f8ab911a503: fxrstor64 (%rsp)
  0x00007f8ab911a508: add    $0x200,%rsp
  0x00007f8ab911a50f: mov    (%rsp),%r15
  0x00007f8ab911a513: mov    0x8(%rsp),%r14
  0x00007f8ab911a518: mov    0x10(%rsp),%r13
  0x00007f8ab911a51d: mov    0x18(%rsp),%r12
  0x00007f8ab911a522: mov    0x20(%rsp),%r11
  0x00007f8ab911a527: mov    0x28(%rsp),%r10
  0x00007f8ab911a52c: mov    0x30(%rsp),%r9
  0x00007f8ab911a531: mov    0x38(%rsp),%r8
  0x00007f8ab911a536: mov    0x40(%rsp),%rdi
  0x00007f8ab911a53b: mov    0x48(%rsp),%rsi
  0x00007f8ab911a540: mov    0x50(%rsp),%rbp
  0x00007f8ab911a545: mov    0x60(%rsp),%rbx
  0x00007f8ab911a54a: mov    0x68(%rsp),%rdx
  0x00007f8ab911a54f: mov    0x70(%rsp),%rcx
  0x00007f8ab911a554: mov    0x78(%rsp),%rax
  0x00007f8ab911a559: add    $0x80,%rsp
  0x00007f8ab911a560: add    $0x8,%rsp
  0x00007f8ab911a564: popfq  
  0x00007f8ab911a565: mov    %r13,%rsp
  0x00007f8ab911a568: pop    %rax
  0x00007f8ab911a569: mov    %rsp,%r13
  0x00007f8ab911a56c: sub    $0x20,%rsp
  0x00007f8ab911a570: mov    %rax,(%rsp)
  0x00007f8ab911a574: mov    %rsi,0x10(%rsp)
  0x00007f8ab911a579: mov    %rdx,0x8(%rsp)
  0x00007f8ab911a57e: mov    0x40(%rbx),%rcx
  0x00007f8ab911a582: jmpq   *%rcx

AHE@0x00007f8ac80c4b80: 0xb0000000 i2c: 0x00007f8ab911a660 c2i: 0x00007f8ab911a774 c2iUV: 0x00007f8ab911a747
i2c argument handler #0 for: static (Ljava/lang/Object;)V (539 bytes generated)
c2i argument handler starts at 0x7f8ab911a774
  0x00007f8ab911a660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911a664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911a66e: cmp    %r11,%rax
  0x00007f8ab911a671: jbe    0x00007f8ab911a68a
  0x00007f8ab911a677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911a681: cmp    %r11,%rax
  0x00007f8ab911a684: jb     0x00007f8ab911a727
  0x00007f8ab911a68a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911a694: cmp    %r11,%rax
  0x00007f8ab911a697: jbe    0x00007f8ab911a6b0
  0x00007f8ab911a69d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911a6a7: cmp    %r11,%rax
  0x00007f8ab911a6aa: jb     0x00007f8ab911a727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911a6b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911a6b5: sub    $0x80,%rsp
  0x00007f8ab911a6bc: mov    %rax,0x78(%rsp)
  0x00007f8ab911a6c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab911a6c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab911a6cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab911a6d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab911a6d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab911a6da: mov    %rdi,0x40(%rsp)
  0x00007f8ab911a6df: mov    %r8,0x38(%rsp)
  0x00007f8ab911a6e4: mov    %r9,0x30(%rsp)
  0x00007f8ab911a6e9: mov    %r10,0x28(%rsp)
  0x00007f8ab911a6ee: mov    %r11,0x20(%rsp)
  0x00007f8ab911a6f3: mov    %r12,0x18(%rsp)
  0x00007f8ab911a6f8: mov    %r13,0x10(%rsp)
  0x00007f8ab911a6fd: mov    %r14,0x8(%rsp)
  0x00007f8ab911a702: mov    %r15,(%rsp)
  0x00007f8ab911a706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911a710: movabs $0x7f8ab911a6b0,%rsi
  0x00007f8ab911a71a: mov    %rsp,%rdx
  0x00007f8ab911a71d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a721: callq  0x00007f8aceddb9fa
  0x00007f8ab911a726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911a727: mov    %rsp,%r11
  0x00007f8ab911a72a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a72e: push   %rax
  0x00007f8ab911a72f: mov    %r11,%rax
  0x00007f8ab911a732: mov    0x50(%rbx),%r11
  0x00007f8ab911a736: mov    0x8(%rax),%rsi
  0x00007f8ab911a73a: mov    %rbx,0x258(%r15)
  0x00007f8ab911a741: mov    %rbx,%rax
  0x00007f8ab911a744: jmpq   *%r11
  0x00007f8ab911a747: mov    0x8(%rsi),%ebx
  0x00007f8ab911a74a: shl    $0x3,%rbx
  0x00007f8ab911a74e: cmp    0x10(%rax),%rbx
  0x00007f8ab911a752: mov    0x8(%rax),%rbx
  0x00007f8ab911a756: je     0x00007f8ab911a761
  0x00007f8ab911a75c: jmpq   0x00007f8ab9105c40
  0x00007f8ab911a761: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911a769: je     0x00007f8ab911a864
  0x00007f8ab911a76f: jmpq   0x00007f8ab9105c40
  0x00007f8ab911a774: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911a77c: je     0x00007f8ab911a864
  0x00007f8ab911a782: mov    %rsp,%r13
  0x00007f8ab911a785: mov    (%rsp),%rax
  0x00007f8ab911a789: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a78d: pushfq 
  0x00007f8ab911a78e: sub    $0x8,%rsp
  0x00007f8ab911a792: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911a797: sub    $0x80,%rsp
  0x00007f8ab911a79e: mov    %rax,0x78(%rsp)
  0x00007f8ab911a7a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab911a7a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab911a7ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab911a7b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab911a7b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab911a7bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab911a7c1: mov    %r8,0x38(%rsp)
  0x00007f8ab911a7c6: mov    %r9,0x30(%rsp)
  0x00007f8ab911a7cb: mov    %r10,0x28(%rsp)
  0x00007f8ab911a7d0: mov    %r11,0x20(%rsp)
  0x00007f8ab911a7d5: mov    %r12,0x18(%rsp)
  0x00007f8ab911a7da: mov    %r13,0x10(%rsp)
  0x00007f8ab911a7df: mov    %r14,0x8(%rsp)
  0x00007f8ab911a7e4: mov    %r15,(%rsp)
  0x00007f8ab911a7e8: sub    $0x200,%rsp
  0x00007f8ab911a7ef: fxsave64 (%rsp)
  0x00007f8ab911a7f4: mov    %rbx,%rdi
  0x00007f8ab911a7f7: mov    %rax,%rsi
  0x00007f8ab911a7fa: callq  0x00007f8acef8bbca
  0x00007f8ab911a7ff: fxrstor64 (%rsp)
  0x00007f8ab911a804: add    $0x200,%rsp
  0x00007f8ab911a80b: mov    (%rsp),%r15
  0x00007f8ab911a80f: mov    0x8(%rsp),%r14
  0x00007f8ab911a814: mov    0x10(%rsp),%r13
  0x00007f8ab911a819: mov    0x18(%rsp),%r12
  0x00007f8ab911a81e: mov    0x20(%rsp),%r11
  0x00007f8ab911a823: mov    0x28(%rsp),%r10
  0x00007f8ab911a828: mov    0x30(%rsp),%r9
  0x00007f8ab911a82d: mov    0x38(%rsp),%r8
  0x00007f8ab911a832: mov    0x40(%rsp),%rdi
  0x00007f8ab911a837: mov    0x48(%rsp),%rsi
  0x00007f8ab911a83c: mov    0x50(%rsp),%rbp
  0x00007f8ab911a841: mov    0x60(%rsp),%rbx
  0x00007f8ab911a846: mov    0x68(%rsp),%rdx
  0x00007f8ab911a84b: mov    0x70(%rsp),%rcx
  0x00007f8ab911a850: mov    0x78(%rsp),%rax
  0x00007f8ab911a855: add    $0x80,%rsp
  0x00007f8ab911a85c: add    $0x8,%rsp
  0x00007f8ab911a860: popfq  
  0x00007f8ab911a861: mov    %r13,%rsp
  0x00007f8ab911a864: pop    %rax
  0x00007f8ab911a865: mov    %rsp,%r13
  0x00007f8ab911a868: sub    $0x10,%rsp
  0x00007f8ab911a86c: mov    %rax,(%rsp)
  0x00007f8ab911a870: mov    %rsi,0x8(%rsp)
  0x00007f8ab911a875: mov    0x40(%rbx),%rcx
  0x00007f8ab911a879: jmpq   *%rcx

AHE@0x00007f8ac80c4bc8: 0x i2c: 0x00007f8ab911a920 c2i: 0x00007f8ab911aa30 c2iUV: 0x00007f8ab911aa03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab911aa30
  0x00007f8ab911a920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911a924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911a92e: cmp    %r11,%rax
  0x00007f8ab911a931: jbe    0x00007f8ab911a94a
  0x00007f8ab911a937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911a941: cmp    %r11,%rax
  0x00007f8ab911a944: jb     0x00007f8ab911a9e7
  0x00007f8ab911a94a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911a954: cmp    %r11,%rax
  0x00007f8ab911a957: jbe    0x00007f8ab911a970
  0x00007f8ab911a95d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911a967: cmp    %r11,%rax
  0x00007f8ab911a96a: jb     0x00007f8ab911a9e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911a970: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911a975: sub    $0x80,%rsp
  0x00007f8ab911a97c: mov    %rax,0x78(%rsp)
  0x00007f8ab911a981: mov    %rcx,0x70(%rsp)
  0x00007f8ab911a986: mov    %rdx,0x68(%rsp)
  0x00007f8ab911a98b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911a990: mov    %rbp,0x50(%rsp)
  0x00007f8ab911a995: mov    %rsi,0x48(%rsp)
  0x00007f8ab911a99a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911a99f: mov    %r8,0x38(%rsp)
  0x00007f8ab911a9a4: mov    %r9,0x30(%rsp)
  0x00007f8ab911a9a9: mov    %r10,0x28(%rsp)
  0x00007f8ab911a9ae: mov    %r11,0x20(%rsp)
  0x00007f8ab911a9b3: mov    %r12,0x18(%rsp)
  0x00007f8ab911a9b8: mov    %r13,0x10(%rsp)
  0x00007f8ab911a9bd: mov    %r14,0x8(%rsp)
  0x00007f8ab911a9c2: mov    %r15,(%rsp)
  0x00007f8ab911a9c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911a9d0: movabs $0x7f8ab911a970,%rsi
  0x00007f8ab911a9da: mov    %rsp,%rdx
  0x00007f8ab911a9dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a9e1: callq  0x00007f8aceddb9fa
  0x00007f8ab911a9e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911a9e7: mov    %rsp,%r11
  0x00007f8ab911a9ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911a9ee: push   %rax
  0x00007f8ab911a9ef: mov    %r11,%rax
  0x00007f8ab911a9f2: mov    0x50(%rbx),%r11
  0x00007f8ab911a9f6: mov    %rbx,0x258(%r15)
  0x00007f8ab911a9fd: mov    %rbx,%rax
  0x00007f8ab911aa00: jmpq   *%r11
  0x00007f8ab911aa03: mov    0x8(%rsi),%ebx
  0x00007f8ab911aa06: shl    $0x3,%rbx
  0x00007f8ab911aa0a: cmp    0x10(%rax),%rbx
  0x00007f8ab911aa0e: mov    0x8(%rax),%rbx
  0x00007f8ab911aa12: je     0x00007f8ab911aa1d
  0x00007f8ab911aa18: jmpq   0x00007f8ab9105c40
  0x00007f8ab911aa1d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911aa25: je     0x00007f8ab911ab20
  0x00007f8ab911aa2b: jmpq   0x00007f8ab9105c40
  0x00007f8ab911aa30: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911aa38: je     0x00007f8ab911ab20
  0x00007f8ab911aa3e: mov    %rsp,%r13
  0x00007f8ab911aa41: mov    (%rsp),%rax
  0x00007f8ab911aa45: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911aa49: pushfq 
  0x00007f8ab911aa4a: sub    $0x8,%rsp
  0x00007f8ab911aa4e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911aa53: sub    $0x80,%rsp
  0x00007f8ab911aa5a: mov    %rax,0x78(%rsp)
  0x00007f8ab911aa5f: mov    %rcx,0x70(%rsp)
  0x00007f8ab911aa64: mov    %rdx,0x68(%rsp)
  0x00007f8ab911aa69: mov    %rbx,0x60(%rsp)
  0x00007f8ab911aa6e: mov    %rbp,0x50(%rsp)
  0x00007f8ab911aa73: mov    %rsi,0x48(%rsp)
  0x00007f8ab911aa78: mov    %rdi,0x40(%rsp)
  0x00007f8ab911aa7d: mov    %r8,0x38(%rsp)
  0x00007f8ab911aa82: mov    %r9,0x30(%rsp)
  0x00007f8ab911aa87: mov    %r10,0x28(%rsp)
  0x00007f8ab911aa8c: mov    %r11,0x20(%rsp)
  0x00007f8ab911aa91: mov    %r12,0x18(%rsp)
  0x00007f8ab911aa96: mov    %r13,0x10(%rsp)
  0x00007f8ab911aa9b: mov    %r14,0x8(%rsp)
  0x00007f8ab911aaa0: mov    %r15,(%rsp)
  0x00007f8ab911aaa4: sub    $0x200,%rsp
  0x00007f8ab911aaab: fxsave64 (%rsp)
  0x00007f8ab911aab0: mov    %rbx,%rdi
  0x00007f8ab911aab3: mov    %rax,%rsi
  0x00007f8ab911aab6: callq  0x00007f8acef8bbca
  0x00007f8ab911aabb: fxrstor64 (%rsp)
  0x00007f8ab911aac0: add    $0x200,%rsp
  0x00007f8ab911aac7: mov    (%rsp),%r15
  0x00007f8ab911aacb: mov    0x8(%rsp),%r14
  0x00007f8ab911aad0: mov    0x10(%rsp),%r13
  0x00007f8ab911aad5: mov    0x18(%rsp),%r12
  0x00007f8ab911aada: mov    0x20(%rsp),%r11
  0x00007f8ab911aadf: mov    0x28(%rsp),%r10
  0x00007f8ab911aae4: mov    0x30(%rsp),%r9
  0x00007f8ab911aae9: mov    0x38(%rsp),%r8
  0x00007f8ab911aaee: mov    0x40(%rsp),%rdi
  0x00007f8ab911aaf3: mov    0x48(%rsp),%rsi
  0x00007f8ab911aaf8: mov    0x50(%rsp),%rbp
  0x00007f8ab911aafd: mov    0x60(%rsp),%rbx
  0x00007f8ab911ab02: mov    0x68(%rsp),%rdx
  0x00007f8ab911ab07: mov    0x70(%rsp),%rcx
  0x00007f8ab911ab0c: mov    0x78(%rsp),%rax
  0x00007f8ab911ab11: add    $0x80,%rsp
  0x00007f8ab911ab18: add    $0x8,%rsp
  0x00007f8ab911ab1c: popfq  
  0x00007f8ab911ab1d: mov    %r13,%rsp
  0x00007f8ab911ab20: pop    %rax
  0x00007f8ab911ab21: mov    %rsp,%r13
  0x00007f8ab911ab24: sub    $0x10,%rsp
  0x00007f8ab911ab28: mov    %rax,(%rsp)
  0x00007f8ab911ab2c: mov    0x40(%rbx),%rcx
  0x00007f8ab911ab30: jmpq   *%rcx

AHE@0x00007f8ac80c4c10: 0xb0000000 i2c: 0x00007f8ab911abe0 c2i: 0x00007f8ab911acf4 c2iUV: 0x00007f8ab911acc7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab911acf4
  0x00007f8ab911abe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911abe4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911abee: cmp    %r11,%rax
  0x00007f8ab911abf1: jbe    0x00007f8ab911ac0a
  0x00007f8ab911abf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911ac01: cmp    %r11,%rax
  0x00007f8ab911ac04: jb     0x00007f8ab911aca7
  0x00007f8ab911ac0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911ac14: cmp    %r11,%rax
  0x00007f8ab911ac17: jbe    0x00007f8ab911ac30
  0x00007f8ab911ac1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911ac27: cmp    %r11,%rax
  0x00007f8ab911ac2a: jb     0x00007f8ab911aca7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911ac30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ac35: sub    $0x80,%rsp
  0x00007f8ab911ac3c: mov    %rax,0x78(%rsp)
  0x00007f8ab911ac41: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ac46: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ac4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ac50: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ac55: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ac5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ac5f: mov    %r8,0x38(%rsp)
  0x00007f8ab911ac64: mov    %r9,0x30(%rsp)
  0x00007f8ab911ac69: mov    %r10,0x28(%rsp)
  0x00007f8ab911ac6e: mov    %r11,0x20(%rsp)
  0x00007f8ab911ac73: mov    %r12,0x18(%rsp)
  0x00007f8ab911ac78: mov    %r13,0x10(%rsp)
  0x00007f8ab911ac7d: mov    %r14,0x8(%rsp)
  0x00007f8ab911ac82: mov    %r15,(%rsp)
  0x00007f8ab911ac86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911ac90: movabs $0x7f8ab911ac30,%rsi
  0x00007f8ab911ac9a: mov    %rsp,%rdx
  0x00007f8ab911ac9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911aca1: callq  0x00007f8aceddb9fa
  0x00007f8ab911aca6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911aca7: mov    %rsp,%r11
  0x00007f8ab911acaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911acae: push   %rax
  0x00007f8ab911acaf: mov    %r11,%rax
  0x00007f8ab911acb2: mov    0x50(%rbx),%r11
  0x00007f8ab911acb6: mov    0x8(%rax),%rsi
  0x00007f8ab911acba: mov    %rbx,0x258(%r15)
  0x00007f8ab911acc1: mov    %rbx,%rax
  0x00007f8ab911acc4: jmpq   *%r11
  0x00007f8ab911acc7: mov    0x8(%rsi),%ebx
  0x00007f8ab911acca: shl    $0x3,%rbx
  0x00007f8ab911acce: cmp    0x10(%rax),%rbx
  0x00007f8ab911acd2: mov    0x8(%rax),%rbx
  0x00007f8ab911acd6: je     0x00007f8ab911ace1
  0x00007f8ab911acdc: jmpq   0x00007f8ab9105c40
  0x00007f8ab911ace1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911ace9: je     0x00007f8ab911ade4
  0x00007f8ab911acef: jmpq   0x00007f8ab9105c40
  0x00007f8ab911acf4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911acfc: je     0x00007f8ab911ade4
  0x00007f8ab911ad02: mov    %rsp,%r13
  0x00007f8ab911ad05: mov    (%rsp),%rax
  0x00007f8ab911ad09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ad0d: pushfq 
  0x00007f8ab911ad0e: sub    $0x8,%rsp
  0x00007f8ab911ad12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ad17: sub    $0x80,%rsp
  0x00007f8ab911ad1e: mov    %rax,0x78(%rsp)
  0x00007f8ab911ad23: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ad28: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ad2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ad32: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ad37: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ad3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ad41: mov    %r8,0x38(%rsp)
  0x00007f8ab911ad46: mov    %r9,0x30(%rsp)
  0x00007f8ab911ad4b: mov    %r10,0x28(%rsp)
  0x00007f8ab911ad50: mov    %r11,0x20(%rsp)
  0x00007f8ab911ad55: mov    %r12,0x18(%rsp)
  0x00007f8ab911ad5a: mov    %r13,0x10(%rsp)
  0x00007f8ab911ad5f: mov    %r14,0x8(%rsp)
  0x00007f8ab911ad64: mov    %r15,(%rsp)
  0x00007f8ab911ad68: sub    $0x200,%rsp
  0x00007f8ab911ad6f: fxsave64 (%rsp)
  0x00007f8ab911ad74: mov    %rbx,%rdi
  0x00007f8ab911ad77: mov    %rax,%rsi
  0x00007f8ab911ad7a: callq  0x00007f8acef8bbca
  0x00007f8ab911ad7f: fxrstor64 (%rsp)
  0x00007f8ab911ad84: add    $0x200,%rsp
  0x00007f8ab911ad8b: mov    (%rsp),%r15
  0x00007f8ab911ad8f: mov    0x8(%rsp),%r14
  0x00007f8ab911ad94: mov    0x10(%rsp),%r13
  0x00007f8ab911ad99: mov    0x18(%rsp),%r12
  0x00007f8ab911ad9e: mov    0x20(%rsp),%r11
  0x00007f8ab911ada3: mov    0x28(%rsp),%r10
  0x00007f8ab911ada8: mov    0x30(%rsp),%r9
  0x00007f8ab911adad: mov    0x38(%rsp),%r8
  0x00007f8ab911adb2: mov    0x40(%rsp),%rdi
  0x00007f8ab911adb7: mov    0x48(%rsp),%rsi
  0x00007f8ab911adbc: mov    0x50(%rsp),%rbp
  0x00007f8ab911adc1: mov    0x60(%rsp),%rbx
  0x00007f8ab911adc6: mov    0x68(%rsp),%rdx
  0x00007f8ab911adcb: mov    0x70(%rsp),%rcx
  0x00007f8ab911add0: mov    0x78(%rsp),%rax
  0x00007f8ab911add5: add    $0x80,%rsp
  0x00007f8ab911addc: add    $0x8,%rsp
  0x00007f8ab911ade0: popfq  
  0x00007f8ab911ade1: mov    %r13,%rsp
  0x00007f8ab911ade4: pop    %rax
  0x00007f8ab911ade5: mov    %rsp,%r13
  0x00007f8ab911ade8: sub    $0x10,%rsp
  0x00007f8ab911adec: mov    %rax,(%rsp)
  0x00007f8ab911adf0: mov    %rsi,0x8(%rsp)
  0x00007f8ab911adf5: mov    0x40(%rbx),%rcx
  0x00007f8ab911adf9: jmpq   *%rcx

AHE@0x00007f8ac80c4c58: 0xb0000000 i2c: 0x00007f8ab911aea0 c2i: 0x00007f8ab911afb4 c2iUV: 0x00007f8ab911af87
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab911afb4
  0x00007f8ab911aea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911aea4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911aeae: cmp    %r11,%rax
  0x00007f8ab911aeb1: jbe    0x00007f8ab911aeca
  0x00007f8ab911aeb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911aec1: cmp    %r11,%rax
  0x00007f8ab911aec4: jb     0x00007f8ab911af67
  0x00007f8ab911aeca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911aed4: cmp    %r11,%rax
  0x00007f8ab911aed7: jbe    0x00007f8ab911aef0
  0x00007f8ab911aedd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911aee7: cmp    %r11,%rax
  0x00007f8ab911aeea: jb     0x00007f8ab911af67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911aef0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911aef5: sub    $0x80,%rsp
  0x00007f8ab911aefc: mov    %rax,0x78(%rsp)
  0x00007f8ab911af01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911af06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911af0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911af10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911af15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911af1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911af1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911af24: mov    %r9,0x30(%rsp)
  0x00007f8ab911af29: mov    %r10,0x28(%rsp)
  0x00007f8ab911af2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911af33: mov    %r12,0x18(%rsp)
  0x00007f8ab911af38: mov    %r13,0x10(%rsp)
  0x00007f8ab911af3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911af42: mov    %r15,(%rsp)
  0x00007f8ab911af46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911af50: movabs $0x7f8ab911aef0,%rsi
  0x00007f8ab911af5a: mov    %rsp,%rdx
  0x00007f8ab911af5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911af61: callq  0x00007f8aceddb9fa
  0x00007f8ab911af66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911af67: mov    %rsp,%r11
  0x00007f8ab911af6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911af6e: push   %rax
  0x00007f8ab911af6f: mov    %r11,%rax
  0x00007f8ab911af72: mov    0x50(%rbx),%r11
  0x00007f8ab911af76: mov    0x8(%rax),%rsi
  0x00007f8ab911af7a: mov    %rbx,0x258(%r15)
  0x00007f8ab911af81: mov    %rbx,%rax
  0x00007f8ab911af84: jmpq   *%r11
  0x00007f8ab911af87: mov    0x8(%rsi),%ebx
  0x00007f8ab911af8a: shl    $0x3,%rbx
  0x00007f8ab911af8e: cmp    0x10(%rax),%rbx
  0x00007f8ab911af92: mov    0x8(%rax),%rbx
  0x00007f8ab911af96: je     0x00007f8ab911afa1
  0x00007f8ab911af9c: jmpq   0x00007f8ab9105c40
  0x00007f8ab911afa1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911afa9: je     0x00007f8ab911b0a4
  0x00007f8ab911afaf: jmpq   0x00007f8ab9105c40
  0x00007f8ab911afb4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911afbc: je     0x00007f8ab911b0a4
  0x00007f8ab911afc2: mov    %rsp,%r13
  0x00007f8ab911afc5: mov    (%rsp),%rax
  0x00007f8ab911afc9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911afcd: pushfq 
  0x00007f8ab911afce: sub    $0x8,%rsp
  0x00007f8ab911afd2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911afd7: sub    $0x80,%rsp
  0x00007f8ab911afde: mov    %rax,0x78(%rsp)
  0x00007f8ab911afe3: mov    %rcx,0x70(%rsp)
  0x00007f8ab911afe8: mov    %rdx,0x68(%rsp)
  0x00007f8ab911afed: mov    %rbx,0x60(%rsp)
  0x00007f8ab911aff2: mov    %rbp,0x50(%rsp)
  0x00007f8ab911aff7: mov    %rsi,0x48(%rsp)
  0x00007f8ab911affc: mov    %rdi,0x40(%rsp)
  0x00007f8ab911b001: mov    %r8,0x38(%rsp)
  0x00007f8ab911b006: mov    %r9,0x30(%rsp)
  0x00007f8ab911b00b: mov    %r10,0x28(%rsp)
  0x00007f8ab911b010: mov    %r11,0x20(%rsp)
  0x00007f8ab911b015: mov    %r12,0x18(%rsp)
  0x00007f8ab911b01a: mov    %r13,0x10(%rsp)
  0x00007f8ab911b01f: mov    %r14,0x8(%rsp)
  0x00007f8ab911b024: mov    %r15,(%rsp)
  0x00007f8ab911b028: sub    $0x200,%rsp
  0x00007f8ab911b02f: fxsave64 (%rsp)
  0x00007f8ab911b034: mov    %rbx,%rdi
  0x00007f8ab911b037: mov    %rax,%rsi
  0x00007f8ab911b03a: callq  0x00007f8acef8bbca
  0x00007f8ab911b03f: fxrstor64 (%rsp)
  0x00007f8ab911b044: add    $0x200,%rsp
  0x00007f8ab911b04b: mov    (%rsp),%r15
  0x00007f8ab911b04f: mov    0x8(%rsp),%r14
  0x00007f8ab911b054: mov    0x10(%rsp),%r13
  0x00007f8ab911b059: mov    0x18(%rsp),%r12
  0x00007f8ab911b05e: mov    0x20(%rsp),%r11
  0x00007f8ab911b063: mov    0x28(%rsp),%r10
  0x00007f8ab911b068: mov    0x30(%rsp),%r9
  0x00007f8ab911b06d: mov    0x38(%rsp),%r8
  0x00007f8ab911b072: mov    0x40(%rsp),%rdi
  0x00007f8ab911b077: mov    0x48(%rsp),%rsi
  0x00007f8ab911b07c: mov    0x50(%rsp),%rbp
  0x00007f8ab911b081: mov    0x60(%rsp),%rbx
  0x00007f8ab911b086: mov    0x68(%rsp),%rdx
  0x00007f8ab911b08b: mov    0x70(%rsp),%rcx
  0x00007f8ab911b090: mov    0x78(%rsp),%rax
  0x00007f8ab911b095: add    $0x80,%rsp
  0x00007f8ab911b09c: add    $0x8,%rsp
  0x00007f8ab911b0a0: popfq  
  0x00007f8ab911b0a1: mov    %r13,%rsp
  0x00007f8ab911b0a4: pop    %rax
  0x00007f8ab911b0a5: mov    %rsp,%r13
  0x00007f8ab911b0a8: sub    $0x10,%rsp
  0x00007f8ab911b0ac: mov    %rax,(%rsp)
  0x00007f8ab911b0b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab911b0b5: mov    0x40(%rbx),%rcx
  0x00007f8ab911b0b9: jmpq   *%rcx

AHE@0x00007f8ac80c4ca0: 0x i2c: 0x00007f8ab911b160 c2i: 0x00007f8ab911b270 c2iUV: 0x00007f8ab911b243
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab911b270
  0x00007f8ab911b160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911b164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911b16e: cmp    %r11,%rax
  0x00007f8ab911b171: jbe    0x00007f8ab911b18a
  0x00007f8ab911b177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911b181: cmp    %r11,%rax
  0x00007f8ab911b184: jb     0x00007f8ab911b227
  0x00007f8ab911b18a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911b194: cmp    %r11,%rax
  0x00007f8ab911b197: jbe    0x00007f8ab911b1b0
  0x00007f8ab911b19d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911b1a7: cmp    %r11,%rax
  0x00007f8ab911b1aa: jb     0x00007f8ab911b227
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911b1b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911b1b5: sub    $0x80,%rsp
  0x00007f8ab911b1bc: mov    %rax,0x78(%rsp)
  0x00007f8ab911b1c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab911b1c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab911b1cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab911b1d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab911b1d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab911b1da: mov    %rdi,0x40(%rsp)
  0x00007f8ab911b1df: mov    %r8,0x38(%rsp)
  0x00007f8ab911b1e4: mov    %r9,0x30(%rsp)
  0x00007f8ab911b1e9: mov    %r10,0x28(%rsp)
  0x00007f8ab911b1ee: mov    %r11,0x20(%rsp)
  0x00007f8ab911b1f3: mov    %r12,0x18(%rsp)
  0x00007f8ab911b1f8: mov    %r13,0x10(%rsp)
  0x00007f8ab911b1fd: mov    %r14,0x8(%rsp)
  0x00007f8ab911b202: mov    %r15,(%rsp)
  0x00007f8ab911b206: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911b210: movabs $0x7f8ab911b1b0,%rsi
  0x00007f8ab911b21a: mov    %rsp,%rdx
  0x00007f8ab911b21d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b221: callq  0x00007f8aceddb9fa
  0x00007f8ab911b226: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911b227: mov    %rsp,%r11
  0x00007f8ab911b22a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b22e: push   %rax
  0x00007f8ab911b22f: mov    %r11,%rax
  0x00007f8ab911b232: mov    0x50(%rbx),%r11
  0x00007f8ab911b236: mov    %rbx,0x258(%r15)
  0x00007f8ab911b23d: mov    %rbx,%rax
  0x00007f8ab911b240: jmpq   *%r11
  0x00007f8ab911b243: mov    0x8(%rsi),%ebx
  0x00007f8ab911b246: shl    $0x3,%rbx
  0x00007f8ab911b24a: cmp    0x10(%rax),%rbx
  0x00007f8ab911b24e: mov    0x8(%rax),%rbx
  0x00007f8ab911b252: je     0x00007f8ab911b25d
  0x00007f8ab911b258: jmpq   0x00007f8ab9105c40
  0x00007f8ab911b25d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911b265: je     0x00007f8ab911b360
  0x00007f8ab911b26b: jmpq   0x00007f8ab9105c40
  0x00007f8ab911b270: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911b278: je     0x00007f8ab911b360
  0x00007f8ab911b27e: mov    %rsp,%r13
  0x00007f8ab911b281: mov    (%rsp),%rax
  0x00007f8ab911b285: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b289: pushfq 
  0x00007f8ab911b28a: sub    $0x8,%rsp
  0x00007f8ab911b28e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911b293: sub    $0x80,%rsp
  0x00007f8ab911b29a: mov    %rax,0x78(%rsp)
  0x00007f8ab911b29f: mov    %rcx,0x70(%rsp)
  0x00007f8ab911b2a4: mov    %rdx,0x68(%rsp)
  0x00007f8ab911b2a9: mov    %rbx,0x60(%rsp)
  0x00007f8ab911b2ae: mov    %rbp,0x50(%rsp)
  0x00007f8ab911b2b3: mov    %rsi,0x48(%rsp)
  0x00007f8ab911b2b8: mov    %rdi,0x40(%rsp)
  0x00007f8ab911b2bd: mov    %r8,0x38(%rsp)
  0x00007f8ab911b2c2: mov    %r9,0x30(%rsp)
  0x00007f8ab911b2c7: mov    %r10,0x28(%rsp)
  0x00007f8ab911b2cc: mov    %r11,0x20(%rsp)
  0x00007f8ab911b2d1: mov    %r12,0x18(%rsp)
  0x00007f8ab911b2d6: mov    %r13,0x10(%rsp)
  0x00007f8ab911b2db: mov    %r14,0x8(%rsp)
  0x00007f8ab911b2e0: mov    %r15,(%rsp)
  0x00007f8ab911b2e4: sub    $0x200,%rsp
  0x00007f8ab911b2eb: fxsave64 (%rsp)
  0x00007f8ab911b2f0: mov    %rbx,%rdi
  0x00007f8ab911b2f3: mov    %rax,%rsi
  0x00007f8ab911b2f6: callq  0x00007f8acef8bbca
  0x00007f8ab911b2fb: fxrstor64 (%rsp)
  0x00007f8ab911b300: add    $0x200,%rsp
  0x00007f8ab911b307: mov    (%rsp),%r15
  0x00007f8ab911b30b: mov    0x8(%rsp),%r14
  0x00007f8ab911b310: mov    0x10(%rsp),%r13
  0x00007f8ab911b315: mov    0x18(%rsp),%r12
  0x00007f8ab911b31a: mov    0x20(%rsp),%r11
  0x00007f8ab911b31f: mov    0x28(%rsp),%r10
  0x00007f8ab911b324: mov    0x30(%rsp),%r9
  0x00007f8ab911b329: mov    0x38(%rsp),%r8
  0x00007f8ab911b32e: mov    0x40(%rsp),%rdi
  0x00007f8ab911b333: mov    0x48(%rsp),%rsi
  0x00007f8ab911b338: mov    0x50(%rsp),%rbp
  0x00007f8ab911b33d: mov    0x60(%rsp),%rbx
  0x00007f8ab911b342: mov    0x68(%rsp),%rdx
  0x00007f8ab911b347: mov    0x70(%rsp),%rcx
  0x00007f8ab911b34c: mov    0x78(%rsp),%rax
  0x00007f8ab911b351: add    $0x80,%rsp
  0x00007f8ab911b358: add    $0x8,%rsp
  0x00007f8ab911b35c: popfq  
  0x00007f8ab911b35d: mov    %r13,%rsp
  0x00007f8ab911b360: pop    %rax
  0x00007f8ab911b361: mov    %rsp,%r13
  0x00007f8ab911b364: sub    $0x10,%rsp
  0x00007f8ab911b368: mov    %rax,(%rsp)
  0x00007f8ab911b36c: mov    0x40(%rbx),%rcx
  0x00007f8ab911b370: jmpq   *%rcx

AHE@0x00007f8ac80c4ce8: 0xbb000000 i2c: 0x00007f8ab911b420 c2i: 0x00007f8ab911b538 c2iUV: 0x00007f8ab911b50b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab911b538
  0x00007f8ab911b420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911b424: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911b42e: cmp    %r11,%rax
  0x00007f8ab911b431: jbe    0x00007f8ab911b44a
  0x00007f8ab911b437: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911b441: cmp    %r11,%rax
  0x00007f8ab911b444: jb     0x00007f8ab911b4e7
  0x00007f8ab911b44a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911b454: cmp    %r11,%rax
  0x00007f8ab911b457: jbe    0x00007f8ab911b470
  0x00007f8ab911b45d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911b467: cmp    %r11,%rax
  0x00007f8ab911b46a: jb     0x00007f8ab911b4e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911b470: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911b475: sub    $0x80,%rsp
  0x00007f8ab911b47c: mov    %rax,0x78(%rsp)
  0x00007f8ab911b481: mov    %rcx,0x70(%rsp)
  0x00007f8ab911b486: mov    %rdx,0x68(%rsp)
  0x00007f8ab911b48b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911b490: mov    %rbp,0x50(%rsp)
  0x00007f8ab911b495: mov    %rsi,0x48(%rsp)
  0x00007f8ab911b49a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911b49f: mov    %r8,0x38(%rsp)
  0x00007f8ab911b4a4: mov    %r9,0x30(%rsp)
  0x00007f8ab911b4a9: mov    %r10,0x28(%rsp)
  0x00007f8ab911b4ae: mov    %r11,0x20(%rsp)
  0x00007f8ab911b4b3: mov    %r12,0x18(%rsp)
  0x00007f8ab911b4b8: mov    %r13,0x10(%rsp)
  0x00007f8ab911b4bd: mov    %r14,0x8(%rsp)
  0x00007f8ab911b4c2: mov    %r15,(%rsp)
  0x00007f8ab911b4c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911b4d0: movabs $0x7f8ab911b470,%rsi
  0x00007f8ab911b4da: mov    %rsp,%rdx
  0x00007f8ab911b4dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b4e1: callq  0x00007f8aceddb9fa
  0x00007f8ab911b4e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911b4e7: mov    %rsp,%r11
  0x00007f8ab911b4ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b4ee: push   %rax
  0x00007f8ab911b4ef: mov    %r11,%rax
  0x00007f8ab911b4f2: mov    0x50(%rbx),%r11
  0x00007f8ab911b4f6: mov    0x10(%rax),%rsi
  0x00007f8ab911b4fa: mov    0x8(%rax),%rdx
  0x00007f8ab911b4fe: mov    %rbx,0x258(%r15)
  0x00007f8ab911b505: mov    %rbx,%rax
  0x00007f8ab911b508: jmpq   *%r11
  0x00007f8ab911b50b: mov    0x8(%rsi),%ebx
  0x00007f8ab911b50e: shl    $0x3,%rbx
  0x00007f8ab911b512: cmp    0x10(%rax),%rbx
  0x00007f8ab911b516: mov    0x8(%rax),%rbx
  0x00007f8ab911b51a: je     0x00007f8ab911b525
  0x00007f8ab911b520: jmpq   0x00007f8ab9105c40
  0x00007f8ab911b525: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911b52d: je     0x00007f8ab911b628
  0x00007f8ab911b533: jmpq   0x00007f8ab9105c40
  0x00007f8ab911b538: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911b540: je     0x00007f8ab911b628
  0x00007f8ab911b546: mov    %rsp,%r13
  0x00007f8ab911b549: mov    (%rsp),%rax
  0x00007f8ab911b54d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b551: pushfq 
  0x00007f8ab911b552: sub    $0x8,%rsp
  0x00007f8ab911b556: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911b55b: sub    $0x80,%rsp
  0x00007f8ab911b562: mov    %rax,0x78(%rsp)
  0x00007f8ab911b567: mov    %rcx,0x70(%rsp)
  0x00007f8ab911b56c: mov    %rdx,0x68(%rsp)
  0x00007f8ab911b571: mov    %rbx,0x60(%rsp)
  0x00007f8ab911b576: mov    %rbp,0x50(%rsp)
  0x00007f8ab911b57b: mov    %rsi,0x48(%rsp)
  0x00007f8ab911b580: mov    %rdi,0x40(%rsp)
  0x00007f8ab911b585: mov    %r8,0x38(%rsp)
  0x00007f8ab911b58a: mov    %r9,0x30(%rsp)
  0x00007f8ab911b58f: mov    %r10,0x28(%rsp)
  0x00007f8ab911b594: mov    %r11,0x20(%rsp)
  0x00007f8ab911b599: mov    %r12,0x18(%rsp)
  0x00007f8ab911b59e: mov    %r13,0x10(%rsp)
  0x00007f8ab911b5a3: mov    %r14,0x8(%rsp)
  0x00007f8ab911b5a8: mov    %r15,(%rsp)
  0x00007f8ab911b5ac: sub    $0x200,%rsp
  0x00007f8ab911b5b3: fxsave64 (%rsp)
  0x00007f8ab911b5b8: mov    %rbx,%rdi
  0x00007f8ab911b5bb: mov    %rax,%rsi
  0x00007f8ab911b5be: callq  0x00007f8acef8bbca
  0x00007f8ab911b5c3: fxrstor64 (%rsp)
  0x00007f8ab911b5c8: add    $0x200,%rsp
  0x00007f8ab911b5cf: mov    (%rsp),%r15
  0x00007f8ab911b5d3: mov    0x8(%rsp),%r14
  0x00007f8ab911b5d8: mov    0x10(%rsp),%r13
  0x00007f8ab911b5dd: mov    0x18(%rsp),%r12
  0x00007f8ab911b5e2: mov    0x20(%rsp),%r11
  0x00007f8ab911b5e7: mov    0x28(%rsp),%r10
  0x00007f8ab911b5ec: mov    0x30(%rsp),%r9
  0x00007f8ab911b5f1: mov    0x38(%rsp),%r8
  0x00007f8ab911b5f6: mov    0x40(%rsp),%rdi
  0x00007f8ab911b5fb: mov    0x48(%rsp),%rsi
  0x00007f8ab911b600: mov    0x50(%rsp),%rbp
  0x00007f8ab911b605: mov    0x60(%rsp),%rbx
  0x00007f8ab911b60a: mov    0x68(%rsp),%rdx
  0x00007f8ab911b60f: mov    0x70(%rsp),%rcx
  0x00007f8ab911b614: mov    0x78(%rsp),%rax
  0x00007f8ab911b619: add    $0x80,%rsp
  0x00007f8ab911b620: add    $0x8,%rsp
  0x00007f8ab911b624: popfq  
  0x00007f8ab911b625: mov    %r13,%rsp
  0x00007f8ab911b628: pop    %rax
  0x00007f8ab911b629: mov    %rsp,%r13
  0x00007f8ab911b62c: sub    $0x20,%rsp
  0x00007f8ab911b630: mov    %rax,(%rsp)
  0x00007f8ab911b634: mov    %rsi,0x10(%rsp)
  0x00007f8ab911b639: mov    %rdx,0x8(%rsp)
  0x00007f8ab911b63e: mov    0x40(%rbx),%rcx
  0x00007f8ab911b642: jmpq   *%rcx

AHE@0x00007f8ac80c4d30: 0xbba00000 i2c: 0x00007f8ab911b720 c2i: 0x00007f8ab911b83b c2iUV: 0x00007f8ab911b80e
i2c argument handler #0 for: receiver ([DI)I (555 bytes generated)
c2i argument handler starts at 0x7f8ab911b83b
  0x00007f8ab911b720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911b724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911b72e: cmp    %r11,%rax
  0x00007f8ab911b731: jbe    0x00007f8ab911b74a
  0x00007f8ab911b737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911b741: cmp    %r11,%rax
  0x00007f8ab911b744: jb     0x00007f8ab911b7e7
  0x00007f8ab911b74a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911b754: cmp    %r11,%rax
  0x00007f8ab911b757: jbe    0x00007f8ab911b770
  0x00007f8ab911b75d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911b767: cmp    %r11,%rax
  0x00007f8ab911b76a: jb     0x00007f8ab911b7e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911b770: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911b775: sub    $0x80,%rsp
  0x00007f8ab911b77c: mov    %rax,0x78(%rsp)
  0x00007f8ab911b781: mov    %rcx,0x70(%rsp)
  0x00007f8ab911b786: mov    %rdx,0x68(%rsp)
  0x00007f8ab911b78b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911b790: mov    %rbp,0x50(%rsp)
  0x00007f8ab911b795: mov    %rsi,0x48(%rsp)
  0x00007f8ab911b79a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911b79f: mov    %r8,0x38(%rsp)
  0x00007f8ab911b7a4: mov    %r9,0x30(%rsp)
  0x00007f8ab911b7a9: mov    %r10,0x28(%rsp)
  0x00007f8ab911b7ae: mov    %r11,0x20(%rsp)
  0x00007f8ab911b7b3: mov    %r12,0x18(%rsp)
  0x00007f8ab911b7b8: mov    %r13,0x10(%rsp)
  0x00007f8ab911b7bd: mov    %r14,0x8(%rsp)
  0x00007f8ab911b7c2: mov    %r15,(%rsp)
  0x00007f8ab911b7c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911b7d0: movabs $0x7f8ab911b770,%rsi
  0x00007f8ab911b7da: mov    %rsp,%rdx
  0x00007f8ab911b7dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b7e1: callq  0x00007f8aceddb9fa
  0x00007f8ab911b7e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911b7e7: mov    %rsp,%r11
  0x00007f8ab911b7ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b7ee: push   %rax
  0x00007f8ab911b7ef: mov    %r11,%rax
  0x00007f8ab911b7f2: mov    0x50(%rbx),%r11
  0x00007f8ab911b7f6: mov    0x18(%rax),%rsi
  0x00007f8ab911b7fa: mov    0x10(%rax),%rdx
  0x00007f8ab911b7fe: mov    0x8(%rax),%ecx
  0x00007f8ab911b801: mov    %rbx,0x258(%r15)
  0x00007f8ab911b808: mov    %rbx,%rax
  0x00007f8ab911b80b: jmpq   *%r11
  0x00007f8ab911b80e: mov    0x8(%rsi),%ebx
  0x00007f8ab911b811: shl    $0x3,%rbx
  0x00007f8ab911b815: cmp    0x10(%rax),%rbx
  0x00007f8ab911b819: mov    0x8(%rax),%rbx
  0x00007f8ab911b81d: je     0x00007f8ab911b828
  0x00007f8ab911b823: jmpq   0x00007f8ab9105c40
  0x00007f8ab911b828: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911b830: je     0x00007f8ab911b92b
  0x00007f8ab911b836: jmpq   0x00007f8ab9105c40
  0x00007f8ab911b83b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911b843: je     0x00007f8ab911b92b
  0x00007f8ab911b849: mov    %rsp,%r13
  0x00007f8ab911b84c: mov    (%rsp),%rax
  0x00007f8ab911b850: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911b854: pushfq 
  0x00007f8ab911b855: sub    $0x8,%rsp
  0x00007f8ab911b859: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911b85e: sub    $0x80,%rsp
  0x00007f8ab911b865: mov    %rax,0x78(%rsp)
  0x00007f8ab911b86a: mov    %rcx,0x70(%rsp)
  0x00007f8ab911b86f: mov    %rdx,0x68(%rsp)
  0x00007f8ab911b874: mov    %rbx,0x60(%rsp)
  0x00007f8ab911b879: mov    %rbp,0x50(%rsp)
  0x00007f8ab911b87e: mov    %rsi,0x48(%rsp)
  0x00007f8ab911b883: mov    %rdi,0x40(%rsp)
  0x00007f8ab911b888: mov    %r8,0x38(%rsp)
  0x00007f8ab911b88d: mov    %r9,0x30(%rsp)
  0x00007f8ab911b892: mov    %r10,0x28(%rsp)
  0x00007f8ab911b897: mov    %r11,0x20(%rsp)
  0x00007f8ab911b89c: mov    %r12,0x18(%rsp)
  0x00007f8ab911b8a1: mov    %r13,0x10(%rsp)
  0x00007f8ab911b8a6: mov    %r14,0x8(%rsp)
  0x00007f8ab911b8ab: mov    %r15,(%rsp)
  0x00007f8ab911b8af: sub    $0x200,%rsp
  0x00007f8ab911b8b6: fxsave64 (%rsp)
  0x00007f8ab911b8bb: mov    %rbx,%rdi
  0x00007f8ab911b8be: mov    %rax,%rsi
  0x00007f8ab911b8c1: callq  0x00007f8acef8bbca
  0x00007f8ab911b8c6: fxrstor64 (%rsp)
  0x00007f8ab911b8cb: add    $0x200,%rsp
  0x00007f8ab911b8d2: mov    (%rsp),%r15
  0x00007f8ab911b8d6: mov    0x8(%rsp),%r14
  0x00007f8ab911b8db: mov    0x10(%rsp),%r13
  0x00007f8ab911b8e0: mov    0x18(%rsp),%r12
  0x00007f8ab911b8e5: mov    0x20(%rsp),%r11
  0x00007f8ab911b8ea: mov    0x28(%rsp),%r10
  0x00007f8ab911b8ef: mov    0x30(%rsp),%r9
  0x00007f8ab911b8f4: mov    0x38(%rsp),%r8
  0x00007f8ab911b8f9: mov    0x40(%rsp),%rdi
  0x00007f8ab911b8fe: mov    0x48(%rsp),%rsi
  0x00007f8ab911b903: mov    0x50(%rsp),%rbp
  0x00007f8ab911b908: mov    0x60(%rsp),%rbx
  0x00007f8ab911b90d: mov    0x68(%rsp),%rdx
  0x00007f8ab911b912: mov    0x70(%rsp),%rcx
  0x00007f8ab911b917: mov    0x78(%rsp),%rax
  0x00007f8ab911b91c: add    $0x80,%rsp
  0x00007f8ab911b923: add    $0x8,%rsp
  0x00007f8ab911b927: popfq  
  0x00007f8ab911b928: mov    %r13,%rsp
  0x00007f8ab911b92b: pop    %rax
  0x00007f8ab911b92c: mov    %rsp,%r13
  0x00007f8ab911b92f: sub    $0x20,%rsp
  0x00007f8ab911b933: mov    %rax,(%rsp)
  0x00007f8ab911b937: mov    %rsi,0x18(%rsp)
  0x00007f8ab911b93c: mov    %rdx,0x10(%rsp)
  0x00007f8ab911b941: mov    %ecx,0x8(%rsp)
  0x00007f8ab911b945: mov    0x40(%rbx),%rcx
  0x00007f8ab911b949: jmpq   *%rcx

AHE@0x00007f8ac80c4d78: 0xbb000000 i2c: 0x00007f8ab911ba20 c2i: 0x00007f8ab911bb38 c2iUV: 0x00007f8ab911bb0b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab911bb38
  0x00007f8ab911ba20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911ba24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911ba2e: cmp    %r11,%rax
  0x00007f8ab911ba31: jbe    0x00007f8ab911ba4a
  0x00007f8ab911ba37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911ba41: cmp    %r11,%rax
  0x00007f8ab911ba44: jb     0x00007f8ab911bae7
  0x00007f8ab911ba4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911ba54: cmp    %r11,%rax
  0x00007f8ab911ba57: jbe    0x00007f8ab911ba70
  0x00007f8ab911ba5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911ba67: cmp    %r11,%rax
  0x00007f8ab911ba6a: jb     0x00007f8ab911bae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911ba70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ba75: sub    $0x80,%rsp
  0x00007f8ab911ba7c: mov    %rax,0x78(%rsp)
  0x00007f8ab911ba81: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ba86: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ba8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ba90: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ba95: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ba9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ba9f: mov    %r8,0x38(%rsp)
  0x00007f8ab911baa4: mov    %r9,0x30(%rsp)
  0x00007f8ab911baa9: mov    %r10,0x28(%rsp)
  0x00007f8ab911baae: mov    %r11,0x20(%rsp)
  0x00007f8ab911bab3: mov    %r12,0x18(%rsp)
  0x00007f8ab911bab8: mov    %r13,0x10(%rsp)
  0x00007f8ab911babd: mov    %r14,0x8(%rsp)
  0x00007f8ab911bac2: mov    %r15,(%rsp)
  0x00007f8ab911bac6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911bad0: movabs $0x7f8ab911ba70,%rsi
  0x00007f8ab911bada: mov    %rsp,%rdx
  0x00007f8ab911badd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911bae1: callq  0x00007f8aceddb9fa
  0x00007f8ab911bae6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911bae7: mov    %rsp,%r11
  0x00007f8ab911baea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911baee: push   %rax
  0x00007f8ab911baef: mov    %r11,%rax
  0x00007f8ab911baf2: mov    0x50(%rbx),%r11
  0x00007f8ab911baf6: mov    0x10(%rax),%rsi
  0x00007f8ab911bafa: mov    0x8(%rax),%rdx
  0x00007f8ab911bafe: mov    %rbx,0x258(%r15)
  0x00007f8ab911bb05: mov    %rbx,%rax
  0x00007f8ab911bb08: jmpq   *%r11
  0x00007f8ab911bb0b: mov    0x8(%rsi),%ebx
  0x00007f8ab911bb0e: shl    $0x3,%rbx
  0x00007f8ab911bb12: cmp    0x10(%rax),%rbx
  0x00007f8ab911bb16: mov    0x8(%rax),%rbx
  0x00007f8ab911bb1a: je     0x00007f8ab911bb25
  0x00007f8ab911bb20: jmpq   0x00007f8ab9105c40
  0x00007f8ab911bb25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911bb2d: je     0x00007f8ab911bc28
  0x00007f8ab911bb33: jmpq   0x00007f8ab9105c40
  0x00007f8ab911bb38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911bb40: je     0x00007f8ab911bc28
  0x00007f8ab911bb46: mov    %rsp,%r13
  0x00007f8ab911bb49: mov    (%rsp),%rax
  0x00007f8ab911bb4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911bb51: pushfq 
  0x00007f8ab911bb52: sub    $0x8,%rsp
  0x00007f8ab911bb56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911bb5b: sub    $0x80,%rsp
  0x00007f8ab911bb62: mov    %rax,0x78(%rsp)
  0x00007f8ab911bb67: mov    %rcx,0x70(%rsp)
  0x00007f8ab911bb6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab911bb71: mov    %rbx,0x60(%rsp)
  0x00007f8ab911bb76: mov    %rbp,0x50(%rsp)
  0x00007f8ab911bb7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab911bb80: mov    %rdi,0x40(%rsp)
  0x00007f8ab911bb85: mov    %r8,0x38(%rsp)
  0x00007f8ab911bb8a: mov    %r9,0x30(%rsp)
  0x00007f8ab911bb8f: mov    %r10,0x28(%rsp)
  0x00007f8ab911bb94: mov    %r11,0x20(%rsp)
  0x00007f8ab911bb99: mov    %r12,0x18(%rsp)
  0x00007f8ab911bb9e: mov    %r13,0x10(%rsp)
  0x00007f8ab911bba3: mov    %r14,0x8(%rsp)
  0x00007f8ab911bba8: mov    %r15,(%rsp)
  0x00007f8ab911bbac: sub    $0x200,%rsp
  0x00007f8ab911bbb3: fxsave64 (%rsp)
  0x00007f8ab911bbb8: mov    %rbx,%rdi
  0x00007f8ab911bbbb: mov    %rax,%rsi
  0x00007f8ab911bbbe: callq  0x00007f8acef8bbca
  0x00007f8ab911bbc3: fxrstor64 (%rsp)
  0x00007f8ab911bbc8: add    $0x200,%rsp
  0x00007f8ab911bbcf: mov    (%rsp),%r15
  0x00007f8ab911bbd3: mov    0x8(%rsp),%r14
  0x00007f8ab911bbd8: mov    0x10(%rsp),%r13
  0x00007f8ab911bbdd: mov    0x18(%rsp),%r12
  0x00007f8ab911bbe2: mov    0x20(%rsp),%r11
  0x00007f8ab911bbe7: mov    0x28(%rsp),%r10
  0x00007f8ab911bbec: mov    0x30(%rsp),%r9
  0x00007f8ab911bbf1: mov    0x38(%rsp),%r8
  0x00007f8ab911bbf6: mov    0x40(%rsp),%rdi
  0x00007f8ab911bbfb: mov    0x48(%rsp),%rsi
  0x00007f8ab911bc00: mov    0x50(%rsp),%rbp
  0x00007f8ab911bc05: mov    0x60(%rsp),%rbx
  0x00007f8ab911bc0a: mov    0x68(%rsp),%rdx
  0x00007f8ab911bc0f: mov    0x70(%rsp),%rcx
  0x00007f8ab911bc14: mov    0x78(%rsp),%rax
  0x00007f8ab911bc19: add    $0x80,%rsp
  0x00007f8ab911bc20: add    $0x8,%rsp
  0x00007f8ab911bc24: popfq  
  0x00007f8ab911bc25: mov    %r13,%rsp
  0x00007f8ab911bc28: pop    %rax
  0x00007f8ab911bc29: mov    %rsp,%r13
  0x00007f8ab911bc2c: sub    $0x20,%rsp
  0x00007f8ab911bc30: mov    %rax,(%rsp)
  0x00007f8ab911bc34: mov    %rsi,0x10(%rsp)
  0x00007f8ab911bc39: mov    %rdx,0x8(%rsp)
  0x00007f8ab911bc3e: mov    0x40(%rbx),%rcx
  0x00007f8ab911bc42: jmpq   *%rcx

AHE@0x00007f8ac80c4dc0: 0xbb000000 i2c: 0x00007f8ab911bd20 c2i: 0x00007f8ab911be38 c2iUV: 0x00007f8ab911be0b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab911be38
  0x00007f8ab911bd20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911bd24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911bd2e: cmp    %r11,%rax
  0x00007f8ab911bd31: jbe    0x00007f8ab911bd4a
  0x00007f8ab911bd37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911bd41: cmp    %r11,%rax
  0x00007f8ab911bd44: jb     0x00007f8ab911bde7
  0x00007f8ab911bd4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911bd54: cmp    %r11,%rax
  0x00007f8ab911bd57: jbe    0x00007f8ab911bd70
  0x00007f8ab911bd5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911bd67: cmp    %r11,%rax
  0x00007f8ab911bd6a: jb     0x00007f8ab911bde7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911bd70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911bd75: sub    $0x80,%rsp
  0x00007f8ab911bd7c: mov    %rax,0x78(%rsp)
  0x00007f8ab911bd81: mov    %rcx,0x70(%rsp)
  0x00007f8ab911bd86: mov    %rdx,0x68(%rsp)
  0x00007f8ab911bd8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911bd90: mov    %rbp,0x50(%rsp)
  0x00007f8ab911bd95: mov    %rsi,0x48(%rsp)
  0x00007f8ab911bd9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911bd9f: mov    %r8,0x38(%rsp)
  0x00007f8ab911bda4: mov    %r9,0x30(%rsp)
  0x00007f8ab911bda9: mov    %r10,0x28(%rsp)
  0x00007f8ab911bdae: mov    %r11,0x20(%rsp)
  0x00007f8ab911bdb3: mov    %r12,0x18(%rsp)
  0x00007f8ab911bdb8: mov    %r13,0x10(%rsp)
  0x00007f8ab911bdbd: mov    %r14,0x8(%rsp)
  0x00007f8ab911bdc2: mov    %r15,(%rsp)
  0x00007f8ab911bdc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911bdd0: movabs $0x7f8ab911bd70,%rsi
  0x00007f8ab911bdda: mov    %rsp,%rdx
  0x00007f8ab911bddd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911bde1: callq  0x00007f8aceddb9fa
  0x00007f8ab911bde6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911bde7: mov    %rsp,%r11
  0x00007f8ab911bdea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911bdee: push   %rax
  0x00007f8ab911bdef: mov    %r11,%rax
  0x00007f8ab911bdf2: mov    0x50(%rbx),%r11
  0x00007f8ab911bdf6: mov    0x10(%rax),%rsi
  0x00007f8ab911bdfa: mov    0x8(%rax),%rdx
  0x00007f8ab911bdfe: mov    %rbx,0x258(%r15)
  0x00007f8ab911be05: mov    %rbx,%rax
  0x00007f8ab911be08: jmpq   *%r11
  0x00007f8ab911be0b: mov    0x8(%rsi),%ebx
  0x00007f8ab911be0e: shl    $0x3,%rbx
  0x00007f8ab911be12: cmp    0x10(%rax),%rbx
  0x00007f8ab911be16: mov    0x8(%rax),%rbx
  0x00007f8ab911be1a: je     0x00007f8ab911be25
  0x00007f8ab911be20: jmpq   0x00007f8ab9105c40
  0x00007f8ab911be25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911be2d: je     0x00007f8ab911bf28
  0x00007f8ab911be33: jmpq   0x00007f8ab9105c40
  0x00007f8ab911be38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911be40: je     0x00007f8ab911bf28
  0x00007f8ab911be46: mov    %rsp,%r13
  0x00007f8ab911be49: mov    (%rsp),%rax
  0x00007f8ab911be4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911be51: pushfq 
  0x00007f8ab911be52: sub    $0x8,%rsp
  0x00007f8ab911be56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911be5b: sub    $0x80,%rsp
  0x00007f8ab911be62: mov    %rax,0x78(%rsp)
  0x00007f8ab911be67: mov    %rcx,0x70(%rsp)
  0x00007f8ab911be6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab911be71: mov    %rbx,0x60(%rsp)
  0x00007f8ab911be76: mov    %rbp,0x50(%rsp)
  0x00007f8ab911be7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab911be80: mov    %rdi,0x40(%rsp)
  0x00007f8ab911be85: mov    %r8,0x38(%rsp)
  0x00007f8ab911be8a: mov    %r9,0x30(%rsp)
  0x00007f8ab911be8f: mov    %r10,0x28(%rsp)
  0x00007f8ab911be94: mov    %r11,0x20(%rsp)
  0x00007f8ab911be99: mov    %r12,0x18(%rsp)
  0x00007f8ab911be9e: mov    %r13,0x10(%rsp)
  0x00007f8ab911bea3: mov    %r14,0x8(%rsp)
  0x00007f8ab911bea8: mov    %r15,(%rsp)
  0x00007f8ab911beac: sub    $0x200,%rsp
  0x00007f8ab911beb3: fxsave64 (%rsp)
  0x00007f8ab911beb8: mov    %rbx,%rdi
  0x00007f8ab911bebb: mov    %rax,%rsi
  0x00007f8ab911bebe: callq  0x00007f8acef8bbca
  0x00007f8ab911bec3: fxrstor64 (%rsp)
  0x00007f8ab911bec8: add    $0x200,%rsp
  0x00007f8ab911becf: mov    (%rsp),%r15
  0x00007f8ab911bed3: mov    0x8(%rsp),%r14
  0x00007f8ab911bed8: mov    0x10(%rsp),%r13
  0x00007f8ab911bedd: mov    0x18(%rsp),%r12
  0x00007f8ab911bee2: mov    0x20(%rsp),%r11
  0x00007f8ab911bee7: mov    0x28(%rsp),%r10
  0x00007f8ab911beec: mov    0x30(%rsp),%r9
  0x00007f8ab911bef1: mov    0x38(%rsp),%r8
  0x00007f8ab911bef6: mov    0x40(%rsp),%rdi
  0x00007f8ab911befb: mov    0x48(%rsp),%rsi
  0x00007f8ab911bf00: mov    0x50(%rsp),%rbp
  0x00007f8ab911bf05: mov    0x60(%rsp),%rbx
  0x00007f8ab911bf0a: mov    0x68(%rsp),%rdx
  0x00007f8ab911bf0f: mov    0x70(%rsp),%rcx
  0x00007f8ab911bf14: mov    0x78(%rsp),%rax
  0x00007f8ab911bf19: add    $0x80,%rsp
  0x00007f8ab911bf20: add    $0x8,%rsp
  0x00007f8ab911bf24: popfq  
  0x00007f8ab911bf25: mov    %r13,%rsp
  0x00007f8ab911bf28: pop    %rax
  0x00007f8ab911bf29: mov    %rsp,%r13
  0x00007f8ab911bf2c: sub    $0x20,%rsp
  0x00007f8ab911bf30: mov    %rax,(%rsp)
  0x00007f8ab911bf34: mov    %rsi,0x10(%rsp)
  0x00007f8ab911bf39: mov    %rdx,0x8(%rsp)
  0x00007f8ab911bf3e: mov    0x40(%rbx),%rcx
  0x00007f8ab911bf42: jmpq   *%rcx

AHE@0x00007f8ac80c4e08: 0xbb000000 i2c: 0x00007f8ab911c020 c2i: 0x00007f8ab911c138 c2iUV: 0x00007f8ab911c10b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab911c138
  0x00007f8ab911c020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911c024: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911c02e: cmp    %r11,%rax
  0x00007f8ab911c031: jbe    0x00007f8ab911c04a
  0x00007f8ab911c037: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911c041: cmp    %r11,%rax
  0x00007f8ab911c044: jb     0x00007f8ab911c0e7
  0x00007f8ab911c04a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911c054: cmp    %r11,%rax
  0x00007f8ab911c057: jbe    0x00007f8ab911c070
  0x00007f8ab911c05d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911c067: cmp    %r11,%rax
  0x00007f8ab911c06a: jb     0x00007f8ab911c0e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911c070: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911c075: sub    $0x80,%rsp
  0x00007f8ab911c07c: mov    %rax,0x78(%rsp)
  0x00007f8ab911c081: mov    %rcx,0x70(%rsp)
  0x00007f8ab911c086: mov    %rdx,0x68(%rsp)
  0x00007f8ab911c08b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911c090: mov    %rbp,0x50(%rsp)
  0x00007f8ab911c095: mov    %rsi,0x48(%rsp)
  0x00007f8ab911c09a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911c09f: mov    %r8,0x38(%rsp)
  0x00007f8ab911c0a4: mov    %r9,0x30(%rsp)
  0x00007f8ab911c0a9: mov    %r10,0x28(%rsp)
  0x00007f8ab911c0ae: mov    %r11,0x20(%rsp)
  0x00007f8ab911c0b3: mov    %r12,0x18(%rsp)
  0x00007f8ab911c0b8: mov    %r13,0x10(%rsp)
  0x00007f8ab911c0bd: mov    %r14,0x8(%rsp)
  0x00007f8ab911c0c2: mov    %r15,(%rsp)
  0x00007f8ab911c0c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911c0d0: movabs $0x7f8ab911c070,%rsi
  0x00007f8ab911c0da: mov    %rsp,%rdx
  0x00007f8ab911c0dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c0e1: callq  0x00007f8aceddb9fa
  0x00007f8ab911c0e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911c0e7: mov    %rsp,%r11
  0x00007f8ab911c0ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c0ee: push   %rax
  0x00007f8ab911c0ef: mov    %r11,%rax
  0x00007f8ab911c0f2: mov    0x50(%rbx),%r11
  0x00007f8ab911c0f6: mov    0x10(%rax),%rsi
  0x00007f8ab911c0fa: mov    0x8(%rax),%rdx
  0x00007f8ab911c0fe: mov    %rbx,0x258(%r15)
  0x00007f8ab911c105: mov    %rbx,%rax
  0x00007f8ab911c108: jmpq   *%r11
  0x00007f8ab911c10b: mov    0x8(%rsi),%ebx
  0x00007f8ab911c10e: shl    $0x3,%rbx
  0x00007f8ab911c112: cmp    0x10(%rax),%rbx
  0x00007f8ab911c116: mov    0x8(%rax),%rbx
  0x00007f8ab911c11a: je     0x00007f8ab911c125
  0x00007f8ab911c120: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c125: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c12d: je     0x00007f8ab911c228
  0x00007f8ab911c133: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c138: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c140: je     0x00007f8ab911c228
  0x00007f8ab911c146: mov    %rsp,%r13
  0x00007f8ab911c149: mov    (%rsp),%rax
  0x00007f8ab911c14d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c151: pushfq 
  0x00007f8ab911c152: sub    $0x8,%rsp
  0x00007f8ab911c156: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911c15b: sub    $0x80,%rsp
  0x00007f8ab911c162: mov    %rax,0x78(%rsp)
  0x00007f8ab911c167: mov    %rcx,0x70(%rsp)
  0x00007f8ab911c16c: mov    %rdx,0x68(%rsp)
  0x00007f8ab911c171: mov    %rbx,0x60(%rsp)
  0x00007f8ab911c176: mov    %rbp,0x50(%rsp)
  0x00007f8ab911c17b: mov    %rsi,0x48(%rsp)
  0x00007f8ab911c180: mov    %rdi,0x40(%rsp)
  0x00007f8ab911c185: mov    %r8,0x38(%rsp)
  0x00007f8ab911c18a: mov    %r9,0x30(%rsp)
  0x00007f8ab911c18f: mov    %r10,0x28(%rsp)
  0x00007f8ab911c194: mov    %r11,0x20(%rsp)
  0x00007f8ab911c199: mov    %r12,0x18(%rsp)
  0x00007f8ab911c19e: mov    %r13,0x10(%rsp)
  0x00007f8ab911c1a3: mov    %r14,0x8(%rsp)
  0x00007f8ab911c1a8: mov    %r15,(%rsp)
  0x00007f8ab911c1ac: sub    $0x200,%rsp
  0x00007f8ab911c1b3: fxsave64 (%rsp)
  0x00007f8ab911c1b8: mov    %rbx,%rdi
  0x00007f8ab911c1bb: mov    %rax,%rsi
  0x00007f8ab911c1be: callq  0x00007f8acef8bbca
  0x00007f8ab911c1c3: fxrstor64 (%rsp)
  0x00007f8ab911c1c8: add    $0x200,%rsp
  0x00007f8ab911c1cf: mov    (%rsp),%r15
  0x00007f8ab911c1d3: mov    0x8(%rsp),%r14
  0x00007f8ab911c1d8: mov    0x10(%rsp),%r13
  0x00007f8ab911c1dd: mov    0x18(%rsp),%r12
  0x00007f8ab911c1e2: mov    0x20(%rsp),%r11
  0x00007f8ab911c1e7: mov    0x28(%rsp),%r10
  0x00007f8ab911c1ec: mov    0x30(%rsp),%r9
  0x00007f8ab911c1f1: mov    0x38(%rsp),%r8
  0x00007f8ab911c1f6: mov    0x40(%rsp),%rdi
  0x00007f8ab911c1fb: mov    0x48(%rsp),%rsi
  0x00007f8ab911c200: mov    0x50(%rsp),%rbp
  0x00007f8ab911c205: mov    0x60(%rsp),%rbx
  0x00007f8ab911c20a: mov    0x68(%rsp),%rdx
  0x00007f8ab911c20f: mov    0x70(%rsp),%rcx
  0x00007f8ab911c214: mov    0x78(%rsp),%rax
  0x00007f8ab911c219: add    $0x80,%rsp
  0x00007f8ab911c220: add    $0x8,%rsp
  0x00007f8ab911c224: popfq  
  0x00007f8ab911c225: mov    %r13,%rsp
  0x00007f8ab911c228: pop    %rax
  0x00007f8ab911c229: mov    %rsp,%r13
  0x00007f8ab911c22c: sub    $0x20,%rsp
  0x00007f8ab911c230: mov    %rax,(%rsp)
  0x00007f8ab911c234: mov    %rsi,0x10(%rsp)
  0x00007f8ab911c239: mov    %rdx,0x8(%rsp)
  0x00007f8ab911c23e: mov    0x40(%rbx),%rcx
  0x00007f8ab911c242: jmpq   *%rcx

AHE@0x00007f8ac80c4e50: 0xbbbb0000 i2c: 0x00007f8ab911c320 c2i: 0x00007f8ab911c440 c2iUV: 0x00007f8ab911c413
i2c argument handler #0 for: receiver (Ljava/lang/Class;[B[Ljava/lang/Object;)Ljava/lang/Class; (566 bytes generated)
c2i argument handler starts at 0x7f8ab911c440
  0x00007f8ab911c320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911c324: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911c32e: cmp    %r11,%rax
  0x00007f8ab911c331: jbe    0x00007f8ab911c34a
  0x00007f8ab911c337: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911c341: cmp    %r11,%rax
  0x00007f8ab911c344: jb     0x00007f8ab911c3e7
  0x00007f8ab911c34a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911c354: cmp    %r11,%rax
  0x00007f8ab911c357: jbe    0x00007f8ab911c370
  0x00007f8ab911c35d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911c367: cmp    %r11,%rax
  0x00007f8ab911c36a: jb     0x00007f8ab911c3e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911c370: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911c375: sub    $0x80,%rsp
  0x00007f8ab911c37c: mov    %rax,0x78(%rsp)
  0x00007f8ab911c381: mov    %rcx,0x70(%rsp)
  0x00007f8ab911c386: mov    %rdx,0x68(%rsp)
  0x00007f8ab911c38b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911c390: mov    %rbp,0x50(%rsp)
  0x00007f8ab911c395: mov    %rsi,0x48(%rsp)
  0x00007f8ab911c39a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911c39f: mov    %r8,0x38(%rsp)
  0x00007f8ab911c3a4: mov    %r9,0x30(%rsp)
  0x00007f8ab911c3a9: mov    %r10,0x28(%rsp)
  0x00007f8ab911c3ae: mov    %r11,0x20(%rsp)
  0x00007f8ab911c3b3: mov    %r12,0x18(%rsp)
  0x00007f8ab911c3b8: mov    %r13,0x10(%rsp)
  0x00007f8ab911c3bd: mov    %r14,0x8(%rsp)
  0x00007f8ab911c3c2: mov    %r15,(%rsp)
  0x00007f8ab911c3c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911c3d0: movabs $0x7f8ab911c370,%rsi
  0x00007f8ab911c3da: mov    %rsp,%rdx
  0x00007f8ab911c3dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c3e1: callq  0x00007f8aceddb9fa
  0x00007f8ab911c3e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911c3e7: mov    %rsp,%r11
  0x00007f8ab911c3ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c3ee: push   %rax
  0x00007f8ab911c3ef: mov    %r11,%rax
  0x00007f8ab911c3f2: mov    0x50(%rbx),%r11
  0x00007f8ab911c3f6: mov    0x20(%rax),%rsi
  0x00007f8ab911c3fa: mov    0x18(%rax),%rdx
  0x00007f8ab911c3fe: mov    0x10(%rax),%rcx
  0x00007f8ab911c402: mov    0x8(%rax),%r8
  0x00007f8ab911c406: mov    %rbx,0x258(%r15)
  0x00007f8ab911c40d: mov    %rbx,%rax
  0x00007f8ab911c410: jmpq   *%r11
  0x00007f8ab911c413: mov    0x8(%rsi),%ebx
  0x00007f8ab911c416: shl    $0x3,%rbx
  0x00007f8ab911c41a: cmp    0x10(%rax),%rbx
  0x00007f8ab911c41e: mov    0x8(%rax),%rbx
  0x00007f8ab911c422: je     0x00007f8ab911c42d
  0x00007f8ab911c428: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c42d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c435: je     0x00007f8ab911c530
  0x00007f8ab911c43b: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c440: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c448: je     0x00007f8ab911c530
  0x00007f8ab911c44e: mov    %rsp,%r13
  0x00007f8ab911c451: mov    (%rsp),%rax
  0x00007f8ab911c455: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c459: pushfq 
  0x00007f8ab911c45a: sub    $0x8,%rsp
  0x00007f8ab911c45e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911c463: sub    $0x80,%rsp
  0x00007f8ab911c46a: mov    %rax,0x78(%rsp)
  0x00007f8ab911c46f: mov    %rcx,0x70(%rsp)
  0x00007f8ab911c474: mov    %rdx,0x68(%rsp)
  0x00007f8ab911c479: mov    %rbx,0x60(%rsp)
  0x00007f8ab911c47e: mov    %rbp,0x50(%rsp)
  0x00007f8ab911c483: mov    %rsi,0x48(%rsp)
  0x00007f8ab911c488: mov    %rdi,0x40(%rsp)
  0x00007f8ab911c48d: mov    %r8,0x38(%rsp)
  0x00007f8ab911c492: mov    %r9,0x30(%rsp)
  0x00007f8ab911c497: mov    %r10,0x28(%rsp)
  0x00007f8ab911c49c: mov    %r11,0x20(%rsp)
  0x00007f8ab911c4a1: mov    %r12,0x18(%rsp)
  0x00007f8ab911c4a6: mov    %r13,0x10(%rsp)
  0x00007f8ab911c4ab: mov    %r14,0x8(%rsp)
  0x00007f8ab911c4b0: mov    %r15,(%rsp)
  0x00007f8ab911c4b4: sub    $0x200,%rsp
  0x00007f8ab911c4bb: fxsave64 (%rsp)
  0x00007f8ab911c4c0: mov    %rbx,%rdi
  0x00007f8ab911c4c3: mov    %rax,%rsi
  0x00007f8ab911c4c6: callq  0x00007f8acef8bbca
  0x00007f8ab911c4cb: fxrstor64 (%rsp)
  0x00007f8ab911c4d0: add    $0x200,%rsp
  0x00007f8ab911c4d7: mov    (%rsp),%r15
  0x00007f8ab911c4db: mov    0x8(%rsp),%r14
  0x00007f8ab911c4e0: mov    0x10(%rsp),%r13
  0x00007f8ab911c4e5: mov    0x18(%rsp),%r12
  0x00007f8ab911c4ea: mov    0x20(%rsp),%r11
  0x00007f8ab911c4ef: mov    0x28(%rsp),%r10
  0x00007f8ab911c4f4: mov    0x30(%rsp),%r9
  0x00007f8ab911c4f9: mov    0x38(%rsp),%r8
  0x00007f8ab911c4fe: mov    0x40(%rsp),%rdi
  0x00007f8ab911c503: mov    0x48(%rsp),%rsi
  0x00007f8ab911c508: mov    0x50(%rsp),%rbp
  0x00007f8ab911c50d: mov    0x60(%rsp),%rbx
  0x00007f8ab911c512: mov    0x68(%rsp),%rdx
  0x00007f8ab911c517: mov    0x70(%rsp),%rcx
  0x00007f8ab911c51c: mov    0x78(%rsp),%rax
  0x00007f8ab911c521: add    $0x80,%rsp
  0x00007f8ab911c528: add    $0x8,%rsp
  0x00007f8ab911c52c: popfq  
  0x00007f8ab911c52d: mov    %r13,%rsp
  0x00007f8ab911c530: pop    %rax
  0x00007f8ab911c531: mov    %rsp,%r13
  0x00007f8ab911c534: sub    $0x30,%rsp
  0x00007f8ab911c538: mov    %rax,(%rsp)
  0x00007f8ab911c53c: mov    %rsi,0x20(%rsp)
  0x00007f8ab911c541: mov    %rdx,0x18(%rsp)
  0x00007f8ab911c546: mov    %rcx,0x10(%rsp)
  0x00007f8ab911c54b: mov    %r8,0x8(%rsp)
  0x00007f8ab911c550: mov    0x40(%rbx),%rcx
  0x00007f8ab911c554: jmpq   *%rcx

AHE@0x00007f8ac80c4e98: 0xb0000000 i2c: 0x00007f8ab911c620 c2i: 0x00007f8ab911c734 c2iUV: 0x00007f8ab911c707
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f8ab911c734
  0x00007f8ab911c620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911c624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911c62e: cmp    %r11,%rax
  0x00007f8ab911c631: jbe    0x00007f8ab911c64a
  0x00007f8ab911c637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911c641: cmp    %r11,%rax
  0x00007f8ab911c644: jb     0x00007f8ab911c6e7
  0x00007f8ab911c64a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911c654: cmp    %r11,%rax
  0x00007f8ab911c657: jbe    0x00007f8ab911c670
  0x00007f8ab911c65d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911c667: cmp    %r11,%rax
  0x00007f8ab911c66a: jb     0x00007f8ab911c6e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911c670: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911c675: sub    $0x80,%rsp
  0x00007f8ab911c67c: mov    %rax,0x78(%rsp)
  0x00007f8ab911c681: mov    %rcx,0x70(%rsp)
  0x00007f8ab911c686: mov    %rdx,0x68(%rsp)
  0x00007f8ab911c68b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911c690: mov    %rbp,0x50(%rsp)
  0x00007f8ab911c695: mov    %rsi,0x48(%rsp)
  0x00007f8ab911c69a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911c69f: mov    %r8,0x38(%rsp)
  0x00007f8ab911c6a4: mov    %r9,0x30(%rsp)
  0x00007f8ab911c6a9: mov    %r10,0x28(%rsp)
  0x00007f8ab911c6ae: mov    %r11,0x20(%rsp)
  0x00007f8ab911c6b3: mov    %r12,0x18(%rsp)
  0x00007f8ab911c6b8: mov    %r13,0x10(%rsp)
  0x00007f8ab911c6bd: mov    %r14,0x8(%rsp)
  0x00007f8ab911c6c2: mov    %r15,(%rsp)
  0x00007f8ab911c6c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911c6d0: movabs $0x7f8ab911c670,%rsi
  0x00007f8ab911c6da: mov    %rsp,%rdx
  0x00007f8ab911c6dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c6e1: callq  0x00007f8aceddb9fa
  0x00007f8ab911c6e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911c6e7: mov    %rsp,%r11
  0x00007f8ab911c6ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c6ee: push   %rax
  0x00007f8ab911c6ef: mov    %r11,%rax
  0x00007f8ab911c6f2: mov    0x50(%rbx),%r11
  0x00007f8ab911c6f6: mov    0x8(%rax),%rsi
  0x00007f8ab911c6fa: mov    %rbx,0x258(%r15)
  0x00007f8ab911c701: mov    %rbx,%rax
  0x00007f8ab911c704: jmpq   *%r11
  0x00007f8ab911c707: mov    0x8(%rsi),%ebx
  0x00007f8ab911c70a: shl    $0x3,%rbx
  0x00007f8ab911c70e: cmp    0x10(%rax),%rbx
  0x00007f8ab911c712: mov    0x8(%rax),%rbx
  0x00007f8ab911c716: je     0x00007f8ab911c721
  0x00007f8ab911c71c: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c721: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c729: je     0x00007f8ab911c824
  0x00007f8ab911c72f: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c734: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c73c: je     0x00007f8ab911c824
  0x00007f8ab911c742: mov    %rsp,%r13
  0x00007f8ab911c745: mov    (%rsp),%rax
  0x00007f8ab911c749: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c74d: pushfq 
  0x00007f8ab911c74e: sub    $0x8,%rsp
  0x00007f8ab911c752: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911c757: sub    $0x80,%rsp
  0x00007f8ab911c75e: mov    %rax,0x78(%rsp)
  0x00007f8ab911c763: mov    %rcx,0x70(%rsp)
  0x00007f8ab911c768: mov    %rdx,0x68(%rsp)
  0x00007f8ab911c76d: mov    %rbx,0x60(%rsp)
  0x00007f8ab911c772: mov    %rbp,0x50(%rsp)
  0x00007f8ab911c777: mov    %rsi,0x48(%rsp)
  0x00007f8ab911c77c: mov    %rdi,0x40(%rsp)
  0x00007f8ab911c781: mov    %r8,0x38(%rsp)
  0x00007f8ab911c786: mov    %r9,0x30(%rsp)
  0x00007f8ab911c78b: mov    %r10,0x28(%rsp)
  0x00007f8ab911c790: mov    %r11,0x20(%rsp)
  0x00007f8ab911c795: mov    %r12,0x18(%rsp)
  0x00007f8ab911c79a: mov    %r13,0x10(%rsp)
  0x00007f8ab911c79f: mov    %r14,0x8(%rsp)
  0x00007f8ab911c7a4: mov    %r15,(%rsp)
  0x00007f8ab911c7a8: sub    $0x200,%rsp
  0x00007f8ab911c7af: fxsave64 (%rsp)
  0x00007f8ab911c7b4: mov    %rbx,%rdi
  0x00007f8ab911c7b7: mov    %rax,%rsi
  0x00007f8ab911c7ba: callq  0x00007f8acef8bbca
  0x00007f8ab911c7bf: fxrstor64 (%rsp)
  0x00007f8ab911c7c4: add    $0x200,%rsp
  0x00007f8ab911c7cb: mov    (%rsp),%r15
  0x00007f8ab911c7cf: mov    0x8(%rsp),%r14
  0x00007f8ab911c7d4: mov    0x10(%rsp),%r13
  0x00007f8ab911c7d9: mov    0x18(%rsp),%r12
  0x00007f8ab911c7de: mov    0x20(%rsp),%r11
  0x00007f8ab911c7e3: mov    0x28(%rsp),%r10
  0x00007f8ab911c7e8: mov    0x30(%rsp),%r9
  0x00007f8ab911c7ed: mov    0x38(%rsp),%r8
  0x00007f8ab911c7f2: mov    0x40(%rsp),%rdi
  0x00007f8ab911c7f7: mov    0x48(%rsp),%rsi
  0x00007f8ab911c7fc: mov    0x50(%rsp),%rbp
  0x00007f8ab911c801: mov    0x60(%rsp),%rbx
  0x00007f8ab911c806: mov    0x68(%rsp),%rdx
  0x00007f8ab911c80b: mov    0x70(%rsp),%rcx
  0x00007f8ab911c810: mov    0x78(%rsp),%rax
  0x00007f8ab911c815: add    $0x80,%rsp
  0x00007f8ab911c81c: add    $0x8,%rsp
  0x00007f8ab911c820: popfq  
  0x00007f8ab911c821: mov    %r13,%rsp
  0x00007f8ab911c824: pop    %rax
  0x00007f8ab911c825: mov    %rsp,%r13
  0x00007f8ab911c828: sub    $0x10,%rsp
  0x00007f8ab911c82c: mov    %rax,(%rsp)
  0x00007f8ab911c830: mov    %rsi,0x8(%rsp)
  0x00007f8ab911c835: mov    0x40(%rbx),%rcx
  0x00007f8ab911c839: jmpq   *%rcx

AHE@0x00007f8ac80c4ee0: 0xb0000000 i2c: 0x00007f8ab911c8e0 c2i: 0x00007f8ab911c9f4 c2iUV: 0x00007f8ab911c9c7
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f8ab911c9f4
  0x00007f8ab911c8e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911c8e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911c8ee: cmp    %r11,%rax
  0x00007f8ab911c8f1: jbe    0x00007f8ab911c90a
  0x00007f8ab911c8f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911c901: cmp    %r11,%rax
  0x00007f8ab911c904: jb     0x00007f8ab911c9a7
  0x00007f8ab911c90a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911c914: cmp    %r11,%rax
  0x00007f8ab911c917: jbe    0x00007f8ab911c930
  0x00007f8ab911c91d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911c927: cmp    %r11,%rax
  0x00007f8ab911c92a: jb     0x00007f8ab911c9a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911c930: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911c935: sub    $0x80,%rsp
  0x00007f8ab911c93c: mov    %rax,0x78(%rsp)
  0x00007f8ab911c941: mov    %rcx,0x70(%rsp)
  0x00007f8ab911c946: mov    %rdx,0x68(%rsp)
  0x00007f8ab911c94b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911c950: mov    %rbp,0x50(%rsp)
  0x00007f8ab911c955: mov    %rsi,0x48(%rsp)
  0x00007f8ab911c95a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911c95f: mov    %r8,0x38(%rsp)
  0x00007f8ab911c964: mov    %r9,0x30(%rsp)
  0x00007f8ab911c969: mov    %r10,0x28(%rsp)
  0x00007f8ab911c96e: mov    %r11,0x20(%rsp)
  0x00007f8ab911c973: mov    %r12,0x18(%rsp)
  0x00007f8ab911c978: mov    %r13,0x10(%rsp)
  0x00007f8ab911c97d: mov    %r14,0x8(%rsp)
  0x00007f8ab911c982: mov    %r15,(%rsp)
  0x00007f8ab911c986: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911c990: movabs $0x7f8ab911c930,%rsi
  0x00007f8ab911c99a: mov    %rsp,%rdx
  0x00007f8ab911c99d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c9a1: callq  0x00007f8aceddb9fa
  0x00007f8ab911c9a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911c9a7: mov    %rsp,%r11
  0x00007f8ab911c9aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911c9ae: push   %rax
  0x00007f8ab911c9af: mov    %r11,%rax
  0x00007f8ab911c9b2: mov    0x50(%rbx),%r11
  0x00007f8ab911c9b6: mov    0x8(%rax),%rsi
  0x00007f8ab911c9ba: mov    %rbx,0x258(%r15)
  0x00007f8ab911c9c1: mov    %rbx,%rax
  0x00007f8ab911c9c4: jmpq   *%r11
  0x00007f8ab911c9c7: mov    0x8(%rsi),%ebx
  0x00007f8ab911c9ca: shl    $0x3,%rbx
  0x00007f8ab911c9ce: cmp    0x10(%rax),%rbx
  0x00007f8ab911c9d2: mov    0x8(%rax),%rbx
  0x00007f8ab911c9d6: je     0x00007f8ab911c9e1
  0x00007f8ab911c9dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c9e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c9e9: je     0x00007f8ab911cae4
  0x00007f8ab911c9ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab911c9f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911c9fc: je     0x00007f8ab911cae4
  0x00007f8ab911ca02: mov    %rsp,%r13
  0x00007f8ab911ca05: mov    (%rsp),%rax
  0x00007f8ab911ca09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ca0d: pushfq 
  0x00007f8ab911ca0e: sub    $0x8,%rsp
  0x00007f8ab911ca12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ca17: sub    $0x80,%rsp
  0x00007f8ab911ca1e: mov    %rax,0x78(%rsp)
  0x00007f8ab911ca23: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ca28: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ca2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ca32: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ca37: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ca3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ca41: mov    %r8,0x38(%rsp)
  0x00007f8ab911ca46: mov    %r9,0x30(%rsp)
  0x00007f8ab911ca4b: mov    %r10,0x28(%rsp)
  0x00007f8ab911ca50: mov    %r11,0x20(%rsp)
  0x00007f8ab911ca55: mov    %r12,0x18(%rsp)
  0x00007f8ab911ca5a: mov    %r13,0x10(%rsp)
  0x00007f8ab911ca5f: mov    %r14,0x8(%rsp)
  0x00007f8ab911ca64: mov    %r15,(%rsp)
  0x00007f8ab911ca68: sub    $0x200,%rsp
  0x00007f8ab911ca6f: fxsave64 (%rsp)
  0x00007f8ab911ca74: mov    %rbx,%rdi
  0x00007f8ab911ca77: mov    %rax,%rsi
  0x00007f8ab911ca7a: callq  0x00007f8acef8bbca
  0x00007f8ab911ca7f: fxrstor64 (%rsp)
  0x00007f8ab911ca84: add    $0x200,%rsp
  0x00007f8ab911ca8b: mov    (%rsp),%r15
  0x00007f8ab911ca8f: mov    0x8(%rsp),%r14
  0x00007f8ab911ca94: mov    0x10(%rsp),%r13
  0x00007f8ab911ca99: mov    0x18(%rsp),%r12
  0x00007f8ab911ca9e: mov    0x20(%rsp),%r11
  0x00007f8ab911caa3: mov    0x28(%rsp),%r10
  0x00007f8ab911caa8: mov    0x30(%rsp),%r9
  0x00007f8ab911caad: mov    0x38(%rsp),%r8
  0x00007f8ab911cab2: mov    0x40(%rsp),%rdi
  0x00007f8ab911cab7: mov    0x48(%rsp),%rsi
  0x00007f8ab911cabc: mov    0x50(%rsp),%rbp
  0x00007f8ab911cac1: mov    0x60(%rsp),%rbx
  0x00007f8ab911cac6: mov    0x68(%rsp),%rdx
  0x00007f8ab911cacb: mov    0x70(%rsp),%rcx
  0x00007f8ab911cad0: mov    0x78(%rsp),%rax
  0x00007f8ab911cad5: add    $0x80,%rsp
  0x00007f8ab911cadc: add    $0x8,%rsp
  0x00007f8ab911cae0: popfq  
  0x00007f8ab911cae1: mov    %r13,%rsp
  0x00007f8ab911cae4: pop    %rax
  0x00007f8ab911cae5: mov    %rsp,%r13
  0x00007f8ab911cae8: sub    $0x10,%rsp
  0x00007f8ab911caec: mov    %rax,(%rsp)
  0x00007f8ab911caf0: mov    %rsi,0x8(%rsp)
  0x00007f8ab911caf5: mov    0x40(%rbx),%rcx
  0x00007f8ab911caf9: jmpq   *%rcx

AHE@0x00007f8ac80c4f28: 0xbb000000 i2c: 0x00007f8ab911cba0 c2i: 0x00007f8ab911ccb8 c2iUV: 0x00007f8ab911cc8b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)I (548 bytes generated)
c2i argument handler starts at 0x7f8ab911ccb8
  0x00007f8ab911cba0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911cba4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911cbae: cmp    %r11,%rax
  0x00007f8ab911cbb1: jbe    0x00007f8ab911cbca
  0x00007f8ab911cbb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911cbc1: cmp    %r11,%rax
  0x00007f8ab911cbc4: jb     0x00007f8ab911cc67
  0x00007f8ab911cbca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911cbd4: cmp    %r11,%rax
  0x00007f8ab911cbd7: jbe    0x00007f8ab911cbf0
  0x00007f8ab911cbdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911cbe7: cmp    %r11,%rax
  0x00007f8ab911cbea: jb     0x00007f8ab911cc67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911cbf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911cbf5: sub    $0x80,%rsp
  0x00007f8ab911cbfc: mov    %rax,0x78(%rsp)
  0x00007f8ab911cc01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911cc06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911cc0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911cc10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911cc15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911cc1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911cc1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911cc24: mov    %r9,0x30(%rsp)
  0x00007f8ab911cc29: mov    %r10,0x28(%rsp)
  0x00007f8ab911cc2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911cc33: mov    %r12,0x18(%rsp)
  0x00007f8ab911cc38: mov    %r13,0x10(%rsp)
  0x00007f8ab911cc3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911cc42: mov    %r15,(%rsp)
  0x00007f8ab911cc46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911cc50: movabs $0x7f8ab911cbf0,%rsi
  0x00007f8ab911cc5a: mov    %rsp,%rdx
  0x00007f8ab911cc5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911cc61: callq  0x00007f8aceddb9fa
  0x00007f8ab911cc66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911cc67: mov    %rsp,%r11
  0x00007f8ab911cc6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911cc6e: push   %rax
  0x00007f8ab911cc6f: mov    %r11,%rax
  0x00007f8ab911cc72: mov    0x50(%rbx),%r11
  0x00007f8ab911cc76: mov    0x10(%rax),%rsi
  0x00007f8ab911cc7a: mov    0x8(%rax),%rdx
  0x00007f8ab911cc7e: mov    %rbx,0x258(%r15)
  0x00007f8ab911cc85: mov    %rbx,%rax
  0x00007f8ab911cc88: jmpq   *%r11
  0x00007f8ab911cc8b: mov    0x8(%rsi),%ebx
  0x00007f8ab911cc8e: shl    $0x3,%rbx
  0x00007f8ab911cc92: cmp    0x10(%rax),%rbx
  0x00007f8ab911cc96: mov    0x8(%rax),%rbx
  0x00007f8ab911cc9a: je     0x00007f8ab911cca5
  0x00007f8ab911cca0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911cca5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911ccad: je     0x00007f8ab911cda8
  0x00007f8ab911ccb3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911ccb8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911ccc0: je     0x00007f8ab911cda8
  0x00007f8ab911ccc6: mov    %rsp,%r13
  0x00007f8ab911ccc9: mov    (%rsp),%rax
  0x00007f8ab911cccd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ccd1: pushfq 
  0x00007f8ab911ccd2: sub    $0x8,%rsp
  0x00007f8ab911ccd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ccdb: sub    $0x80,%rsp
  0x00007f8ab911cce2: mov    %rax,0x78(%rsp)
  0x00007f8ab911cce7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ccec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ccf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ccf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ccfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911cd00: mov    %rdi,0x40(%rsp)
  0x00007f8ab911cd05: mov    %r8,0x38(%rsp)
  0x00007f8ab911cd0a: mov    %r9,0x30(%rsp)
  0x00007f8ab911cd0f: mov    %r10,0x28(%rsp)
  0x00007f8ab911cd14: mov    %r11,0x20(%rsp)
  0x00007f8ab911cd19: mov    %r12,0x18(%rsp)
  0x00007f8ab911cd1e: mov    %r13,0x10(%rsp)
  0x00007f8ab911cd23: mov    %r14,0x8(%rsp)
  0x00007f8ab911cd28: mov    %r15,(%rsp)
  0x00007f8ab911cd2c: sub    $0x200,%rsp
  0x00007f8ab911cd33: fxsave64 (%rsp)
  0x00007f8ab911cd38: mov    %rbx,%rdi
  0x00007f8ab911cd3b: mov    %rax,%rsi
  0x00007f8ab911cd3e: callq  0x00007f8acef8bbca
  0x00007f8ab911cd43: fxrstor64 (%rsp)
  0x00007f8ab911cd48: add    $0x200,%rsp
  0x00007f8ab911cd4f: mov    (%rsp),%r15
  0x00007f8ab911cd53: mov    0x8(%rsp),%r14
  0x00007f8ab911cd58: mov    0x10(%rsp),%r13
  0x00007f8ab911cd5d: mov    0x18(%rsp),%r12
  0x00007f8ab911cd62: mov    0x20(%rsp),%r11
  0x00007f8ab911cd67: mov    0x28(%rsp),%r10
  0x00007f8ab911cd6c: mov    0x30(%rsp),%r9
  0x00007f8ab911cd71: mov    0x38(%rsp),%r8
  0x00007f8ab911cd76: mov    0x40(%rsp),%rdi
  0x00007f8ab911cd7b: mov    0x48(%rsp),%rsi
  0x00007f8ab911cd80: mov    0x50(%rsp),%rbp
  0x00007f8ab911cd85: mov    0x60(%rsp),%rbx
  0x00007f8ab911cd8a: mov    0x68(%rsp),%rdx
  0x00007f8ab911cd8f: mov    0x70(%rsp),%rcx
  0x00007f8ab911cd94: mov    0x78(%rsp),%rax
  0x00007f8ab911cd99: add    $0x80,%rsp
  0x00007f8ab911cda0: add    $0x8,%rsp
  0x00007f8ab911cda4: popfq  
  0x00007f8ab911cda5: mov    %r13,%rsp
  0x00007f8ab911cda8: pop    %rax
  0x00007f8ab911cda9: mov    %rsp,%r13
  0x00007f8ab911cdac: sub    $0x20,%rsp
  0x00007f8ab911cdb0: mov    %rax,(%rsp)
  0x00007f8ab911cdb4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911cdb9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911cdbe: mov    0x40(%rbx),%rcx
  0x00007f8ab911cdc2: jmpq   *%rcx

AHE@0x00007f8ac80c4f70: 0xbb000000 i2c: 0x00007f8ab911cea0 c2i: 0x00007f8ab911cfb8 c2iUV: 0x00007f8ab911cf8b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)I (548 bytes generated)
c2i argument handler starts at 0x7f8ab911cfb8
  0x00007f8ab911cea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911cea4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911ceae: cmp    %r11,%rax
  0x00007f8ab911ceb1: jbe    0x00007f8ab911ceca
  0x00007f8ab911ceb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911cec1: cmp    %r11,%rax
  0x00007f8ab911cec4: jb     0x00007f8ab911cf67
  0x00007f8ab911ceca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911ced4: cmp    %r11,%rax
  0x00007f8ab911ced7: jbe    0x00007f8ab911cef0
  0x00007f8ab911cedd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911cee7: cmp    %r11,%rax
  0x00007f8ab911ceea: jb     0x00007f8ab911cf67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911cef0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911cef5: sub    $0x80,%rsp
  0x00007f8ab911cefc: mov    %rax,0x78(%rsp)
  0x00007f8ab911cf01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911cf06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911cf0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911cf10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911cf15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911cf1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911cf1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911cf24: mov    %r9,0x30(%rsp)
  0x00007f8ab911cf29: mov    %r10,0x28(%rsp)
  0x00007f8ab911cf2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911cf33: mov    %r12,0x18(%rsp)
  0x00007f8ab911cf38: mov    %r13,0x10(%rsp)
  0x00007f8ab911cf3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911cf42: mov    %r15,(%rsp)
  0x00007f8ab911cf46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911cf50: movabs $0x7f8ab911cef0,%rsi
  0x00007f8ab911cf5a: mov    %rsp,%rdx
  0x00007f8ab911cf5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911cf61: callq  0x00007f8aceddb9fa
  0x00007f8ab911cf66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911cf67: mov    %rsp,%r11
  0x00007f8ab911cf6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911cf6e: push   %rax
  0x00007f8ab911cf6f: mov    %r11,%rax
  0x00007f8ab911cf72: mov    0x50(%rbx),%r11
  0x00007f8ab911cf76: mov    0x10(%rax),%rsi
  0x00007f8ab911cf7a: mov    0x8(%rax),%rdx
  0x00007f8ab911cf7e: mov    %rbx,0x258(%r15)
  0x00007f8ab911cf85: mov    %rbx,%rax
  0x00007f8ab911cf88: jmpq   *%r11
  0x00007f8ab911cf8b: mov    0x8(%rsi),%ebx
  0x00007f8ab911cf8e: shl    $0x3,%rbx
  0x00007f8ab911cf92: cmp    0x10(%rax),%rbx
  0x00007f8ab911cf96: mov    0x8(%rax),%rbx
  0x00007f8ab911cf9a: je     0x00007f8ab911cfa5
  0x00007f8ab911cfa0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911cfa5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911cfad: je     0x00007f8ab911d0a8
  0x00007f8ab911cfb3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911cfb8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911cfc0: je     0x00007f8ab911d0a8
  0x00007f8ab911cfc6: mov    %rsp,%r13
  0x00007f8ab911cfc9: mov    (%rsp),%rax
  0x00007f8ab911cfcd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911cfd1: pushfq 
  0x00007f8ab911cfd2: sub    $0x8,%rsp
  0x00007f8ab911cfd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911cfdb: sub    $0x80,%rsp
  0x00007f8ab911cfe2: mov    %rax,0x78(%rsp)
  0x00007f8ab911cfe7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911cfec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911cff1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911cff6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911cffb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911d000: mov    %rdi,0x40(%rsp)
  0x00007f8ab911d005: mov    %r8,0x38(%rsp)
  0x00007f8ab911d00a: mov    %r9,0x30(%rsp)
  0x00007f8ab911d00f: mov    %r10,0x28(%rsp)
  0x00007f8ab911d014: mov    %r11,0x20(%rsp)
  0x00007f8ab911d019: mov    %r12,0x18(%rsp)
  0x00007f8ab911d01e: mov    %r13,0x10(%rsp)
  0x00007f8ab911d023: mov    %r14,0x8(%rsp)
  0x00007f8ab911d028: mov    %r15,(%rsp)
  0x00007f8ab911d02c: sub    $0x200,%rsp
  0x00007f8ab911d033: fxsave64 (%rsp)
  0x00007f8ab911d038: mov    %rbx,%rdi
  0x00007f8ab911d03b: mov    %rax,%rsi
  0x00007f8ab911d03e: callq  0x00007f8acef8bbca
  0x00007f8ab911d043: fxrstor64 (%rsp)
  0x00007f8ab911d048: add    $0x200,%rsp
  0x00007f8ab911d04f: mov    (%rsp),%r15
  0x00007f8ab911d053: mov    0x8(%rsp),%r14
  0x00007f8ab911d058: mov    0x10(%rsp),%r13
  0x00007f8ab911d05d: mov    0x18(%rsp),%r12
  0x00007f8ab911d062: mov    0x20(%rsp),%r11
  0x00007f8ab911d067: mov    0x28(%rsp),%r10
  0x00007f8ab911d06c: mov    0x30(%rsp),%r9
  0x00007f8ab911d071: mov    0x38(%rsp),%r8
  0x00007f8ab911d076: mov    0x40(%rsp),%rdi
  0x00007f8ab911d07b: mov    0x48(%rsp),%rsi
  0x00007f8ab911d080: mov    0x50(%rsp),%rbp
  0x00007f8ab911d085: mov    0x60(%rsp),%rbx
  0x00007f8ab911d08a: mov    0x68(%rsp),%rdx
  0x00007f8ab911d08f: mov    0x70(%rsp),%rcx
  0x00007f8ab911d094: mov    0x78(%rsp),%rax
  0x00007f8ab911d099: add    $0x80,%rsp
  0x00007f8ab911d0a0: add    $0x8,%rsp
  0x00007f8ab911d0a4: popfq  
  0x00007f8ab911d0a5: mov    %r13,%rsp
  0x00007f8ab911d0a8: pop    %rax
  0x00007f8ab911d0a9: mov    %rsp,%r13
  0x00007f8ab911d0ac: sub    $0x20,%rsp
  0x00007f8ab911d0b0: mov    %rax,(%rsp)
  0x00007f8ab911d0b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911d0b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911d0be: mov    0x40(%rbx),%rcx
  0x00007f8ab911d0c2: jmpq   *%rcx

AHE@0x00007f8ac80c4fb8: 0xbbe00000 i2c: 0x00007f8ab911d1a0 c2i: 0x00007f8ab911d2b8 c2iUV: 0x00007f8ab911d28b
i2c argument handler #0 for: receiver (J)V (563 bytes generated)
c2i argument handler starts at 0x7f8ab911d2b8
  0x00007f8ab911d1a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911d1a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911d1ae: cmp    %r11,%rax
  0x00007f8ab911d1b1: jbe    0x00007f8ab911d1ca
  0x00007f8ab911d1b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911d1c1: cmp    %r11,%rax
  0x00007f8ab911d1c4: jb     0x00007f8ab911d267
  0x00007f8ab911d1ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911d1d4: cmp    %r11,%rax
  0x00007f8ab911d1d7: jbe    0x00007f8ab911d1f0
  0x00007f8ab911d1dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911d1e7: cmp    %r11,%rax
  0x00007f8ab911d1ea: jb     0x00007f8ab911d267
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911d1f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911d1f5: sub    $0x80,%rsp
  0x00007f8ab911d1fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911d201: mov    %rcx,0x70(%rsp)
  0x00007f8ab911d206: mov    %rdx,0x68(%rsp)
  0x00007f8ab911d20b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911d210: mov    %rbp,0x50(%rsp)
  0x00007f8ab911d215: mov    %rsi,0x48(%rsp)
  0x00007f8ab911d21a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911d21f: mov    %r8,0x38(%rsp)
  0x00007f8ab911d224: mov    %r9,0x30(%rsp)
  0x00007f8ab911d229: mov    %r10,0x28(%rsp)
  0x00007f8ab911d22e: mov    %r11,0x20(%rsp)
  0x00007f8ab911d233: mov    %r12,0x18(%rsp)
  0x00007f8ab911d238: mov    %r13,0x10(%rsp)
  0x00007f8ab911d23d: mov    %r14,0x8(%rsp)
  0x00007f8ab911d242: mov    %r15,(%rsp)
  0x00007f8ab911d246: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911d250: movabs $0x7f8ab911d1f0,%rsi
  0x00007f8ab911d25a: mov    %rsp,%rdx
  0x00007f8ab911d25d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d261: callq  0x00007f8aceddb9fa
  0x00007f8ab911d266: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911d267: mov    %rsp,%r11
  0x00007f8ab911d26a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d26e: push   %rax
  0x00007f8ab911d26f: mov    %r11,%rax
  0x00007f8ab911d272: mov    0x50(%rbx),%r11
  0x00007f8ab911d276: mov    0x18(%rax),%rsi
  0x00007f8ab911d27a: mov    0x8(%rax),%rdx
  0x00007f8ab911d27e: mov    %rbx,0x258(%r15)
  0x00007f8ab911d285: mov    %rbx,%rax
  0x00007f8ab911d288: jmpq   *%r11
  0x00007f8ab911d28b: mov    0x8(%rsi),%ebx
  0x00007f8ab911d28e: shl    $0x3,%rbx
  0x00007f8ab911d292: cmp    0x10(%rax),%rbx
  0x00007f8ab911d296: mov    0x8(%rax),%rbx
  0x00007f8ab911d29a: je     0x00007f8ab911d2a5
  0x00007f8ab911d2a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911d2a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911d2ad: je     0x00007f8ab911d3a8
  0x00007f8ab911d2b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911d2b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911d2c0: je     0x00007f8ab911d3a8
  0x00007f8ab911d2c6: mov    %rsp,%r13
  0x00007f8ab911d2c9: mov    (%rsp),%rax
  0x00007f8ab911d2cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d2d1: pushfq 
  0x00007f8ab911d2d2: sub    $0x8,%rsp
  0x00007f8ab911d2d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911d2db: sub    $0x80,%rsp
  0x00007f8ab911d2e2: mov    %rax,0x78(%rsp)
  0x00007f8ab911d2e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911d2ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911d2f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911d2f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911d2fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911d300: mov    %rdi,0x40(%rsp)
  0x00007f8ab911d305: mov    %r8,0x38(%rsp)
  0x00007f8ab911d30a: mov    %r9,0x30(%rsp)
  0x00007f8ab911d30f: mov    %r10,0x28(%rsp)
  0x00007f8ab911d314: mov    %r11,0x20(%rsp)
  0x00007f8ab911d319: mov    %r12,0x18(%rsp)
  0x00007f8ab911d31e: mov    %r13,0x10(%rsp)
  0x00007f8ab911d323: mov    %r14,0x8(%rsp)
  0x00007f8ab911d328: mov    %r15,(%rsp)
  0x00007f8ab911d32c: sub    $0x200,%rsp
  0x00007f8ab911d333: fxsave64 (%rsp)
  0x00007f8ab911d338: mov    %rbx,%rdi
  0x00007f8ab911d33b: mov    %rax,%rsi
  0x00007f8ab911d33e: callq  0x00007f8acef8bbca
  0x00007f8ab911d343: fxrstor64 (%rsp)
  0x00007f8ab911d348: add    $0x200,%rsp
  0x00007f8ab911d34f: mov    (%rsp),%r15
  0x00007f8ab911d353: mov    0x8(%rsp),%r14
  0x00007f8ab911d358: mov    0x10(%rsp),%r13
  0x00007f8ab911d35d: mov    0x18(%rsp),%r12
  0x00007f8ab911d362: mov    0x20(%rsp),%r11
  0x00007f8ab911d367: mov    0x28(%rsp),%r10
  0x00007f8ab911d36c: mov    0x30(%rsp),%r9
  0x00007f8ab911d371: mov    0x38(%rsp),%r8
  0x00007f8ab911d376: mov    0x40(%rsp),%rdi
  0x00007f8ab911d37b: mov    0x48(%rsp),%rsi
  0x00007f8ab911d380: mov    0x50(%rsp),%rbp
  0x00007f8ab911d385: mov    0x60(%rsp),%rbx
  0x00007f8ab911d38a: mov    0x68(%rsp),%rdx
  0x00007f8ab911d38f: mov    0x70(%rsp),%rcx
  0x00007f8ab911d394: mov    0x78(%rsp),%rax
  0x00007f8ab911d399: add    $0x80,%rsp
  0x00007f8ab911d3a0: add    $0x8,%rsp
  0x00007f8ab911d3a4: popfq  
  0x00007f8ab911d3a5: mov    %r13,%rsp
  0x00007f8ab911d3a8: pop    %rax
  0x00007f8ab911d3a9: mov    %rsp,%r13
  0x00007f8ab911d3ac: sub    $0x20,%rsp
  0x00007f8ab911d3b0: mov    %rax,(%rsp)
  0x00007f8ab911d3b4: mov    %rsi,0x18(%rsp)
  0x00007f8ab911d3b9: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911d3c3: mov    %rax,0x10(%rsp)
  0x00007f8ab911d3c8: mov    %rdx,0x8(%rsp)
  0x00007f8ab911d3cd: mov    0x40(%rbx),%rcx
  0x00007f8ab911d3d1: jmpq   *%rcx

AHE@0x00007f8ac80c5000: 0xbbbebea0 i2c: 0x00007f8ab911d4a0 c2i: 0x00007f8ab911d5c4 c2iUV: 0x00007f8ab911d597
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJB)V (605 bytes generated)
c2i argument handler starts at 0x7f8ab911d5c4
  0x00007f8ab911d4a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911d4a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911d4ae: cmp    %r11,%rax
  0x00007f8ab911d4b1: jbe    0x00007f8ab911d4ca
  0x00007f8ab911d4b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911d4c1: cmp    %r11,%rax
  0x00007f8ab911d4c4: jb     0x00007f8ab911d567
  0x00007f8ab911d4ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911d4d4: cmp    %r11,%rax
  0x00007f8ab911d4d7: jbe    0x00007f8ab911d4f0
  0x00007f8ab911d4dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911d4e7: cmp    %r11,%rax
  0x00007f8ab911d4ea: jb     0x00007f8ab911d567
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911d4f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911d4f5: sub    $0x80,%rsp
  0x00007f8ab911d4fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911d501: mov    %rcx,0x70(%rsp)
  0x00007f8ab911d506: mov    %rdx,0x68(%rsp)
  0x00007f8ab911d50b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911d510: mov    %rbp,0x50(%rsp)
  0x00007f8ab911d515: mov    %rsi,0x48(%rsp)
  0x00007f8ab911d51a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911d51f: mov    %r8,0x38(%rsp)
  0x00007f8ab911d524: mov    %r9,0x30(%rsp)
  0x00007f8ab911d529: mov    %r10,0x28(%rsp)
  0x00007f8ab911d52e: mov    %r11,0x20(%rsp)
  0x00007f8ab911d533: mov    %r12,0x18(%rsp)
  0x00007f8ab911d538: mov    %r13,0x10(%rsp)
  0x00007f8ab911d53d: mov    %r14,0x8(%rsp)
  0x00007f8ab911d542: mov    %r15,(%rsp)
  0x00007f8ab911d546: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911d550: movabs $0x7f8ab911d4f0,%rsi
  0x00007f8ab911d55a: mov    %rsp,%rdx
  0x00007f8ab911d55d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d561: callq  0x00007f8aceddb9fa
  0x00007f8ab911d566: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911d567: mov    %rsp,%r11
  0x00007f8ab911d56a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d56e: push   %rax
  0x00007f8ab911d56f: mov    %r11,%rax
  0x00007f8ab911d572: mov    0x50(%rbx),%r11
  0x00007f8ab911d576: mov    0x38(%rax),%rsi
  0x00007f8ab911d57a: mov    0x30(%rax),%rdx
  0x00007f8ab911d57e: mov    0x20(%rax),%rcx
  0x00007f8ab911d582: mov    0x10(%rax),%r8
  0x00007f8ab911d586: mov    0x8(%rax),%r9d
  0x00007f8ab911d58a: mov    %rbx,0x258(%r15)
  0x00007f8ab911d591: mov    %rbx,%rax
  0x00007f8ab911d594: jmpq   *%r11
  0x00007f8ab911d597: mov    0x8(%rsi),%ebx
  0x00007f8ab911d59a: shl    $0x3,%rbx
  0x00007f8ab911d59e: cmp    0x10(%rax),%rbx
  0x00007f8ab911d5a2: mov    0x8(%rax),%rbx
  0x00007f8ab911d5a6: je     0x00007f8ab911d5b1
  0x00007f8ab911d5ac: jmpq   0x00007f8ab9105c40
  0x00007f8ab911d5b1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911d5b9: je     0x00007f8ab911d6b4
  0x00007f8ab911d5bf: jmpq   0x00007f8ab9105c40
  0x00007f8ab911d5c4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911d5cc: je     0x00007f8ab911d6b4
  0x00007f8ab911d5d2: mov    %rsp,%r13
  0x00007f8ab911d5d5: mov    (%rsp),%rax
  0x00007f8ab911d5d9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d5dd: pushfq 
  0x00007f8ab911d5de: sub    $0x8,%rsp
  0x00007f8ab911d5e2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911d5e7: sub    $0x80,%rsp
  0x00007f8ab911d5ee: mov    %rax,0x78(%rsp)
  0x00007f8ab911d5f3: mov    %rcx,0x70(%rsp)
  0x00007f8ab911d5f8: mov    %rdx,0x68(%rsp)
  0x00007f8ab911d5fd: mov    %rbx,0x60(%rsp)
  0x00007f8ab911d602: mov    %rbp,0x50(%rsp)
  0x00007f8ab911d607: mov    %rsi,0x48(%rsp)
  0x00007f8ab911d60c: mov    %rdi,0x40(%rsp)
  0x00007f8ab911d611: mov    %r8,0x38(%rsp)
  0x00007f8ab911d616: mov    %r9,0x30(%rsp)
  0x00007f8ab911d61b: mov    %r10,0x28(%rsp)
  0x00007f8ab911d620: mov    %r11,0x20(%rsp)
  0x00007f8ab911d625: mov    %r12,0x18(%rsp)
  0x00007f8ab911d62a: mov    %r13,0x10(%rsp)
  0x00007f8ab911d62f: mov    %r14,0x8(%rsp)
  0x00007f8ab911d634: mov    %r15,(%rsp)
  0x00007f8ab911d638: sub    $0x200,%rsp
  0x00007f8ab911d63f: fxsave64 (%rsp)
  0x00007f8ab911d644: mov    %rbx,%rdi
  0x00007f8ab911d647: mov    %rax,%rsi
  0x00007f8ab911d64a: callq  0x00007f8acef8bbca
  0x00007f8ab911d64f: fxrstor64 (%rsp)
  0x00007f8ab911d654: add    $0x200,%rsp
  0x00007f8ab911d65b: mov    (%rsp),%r15
  0x00007f8ab911d65f: mov    0x8(%rsp),%r14
  0x00007f8ab911d664: mov    0x10(%rsp),%r13
  0x00007f8ab911d669: mov    0x18(%rsp),%r12
  0x00007f8ab911d66e: mov    0x20(%rsp),%r11
  0x00007f8ab911d673: mov    0x28(%rsp),%r10
  0x00007f8ab911d678: mov    0x30(%rsp),%r9
  0x00007f8ab911d67d: mov    0x38(%rsp),%r8
  0x00007f8ab911d682: mov    0x40(%rsp),%rdi
  0x00007f8ab911d687: mov    0x48(%rsp),%rsi
  0x00007f8ab911d68c: mov    0x50(%rsp),%rbp
  0x00007f8ab911d691: mov    0x60(%rsp),%rbx
  0x00007f8ab911d696: mov    0x68(%rsp),%rdx
  0x00007f8ab911d69b: mov    0x70(%rsp),%rcx
  0x00007f8ab911d6a0: mov    0x78(%rsp),%rax
  0x00007f8ab911d6a5: add    $0x80,%rsp
  0x00007f8ab911d6ac: add    $0x8,%rsp
  0x00007f8ab911d6b0: popfq  
  0x00007f8ab911d6b1: mov    %r13,%rsp
  0x00007f8ab911d6b4: pop    %rax
  0x00007f8ab911d6b5: mov    %rsp,%r13
  0x00007f8ab911d6b8: sub    $0x40,%rsp
  0x00007f8ab911d6bc: mov    %rax,(%rsp)
  0x00007f8ab911d6c0: mov    %rsi,0x38(%rsp)
  0x00007f8ab911d6c5: mov    %rdx,0x30(%rsp)
  0x00007f8ab911d6ca: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911d6d4: mov    %rax,0x28(%rsp)
  0x00007f8ab911d6d9: mov    %rcx,0x20(%rsp)
  0x00007f8ab911d6de: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911d6e8: mov    %rax,0x18(%rsp)
  0x00007f8ab911d6ed: mov    %r8,0x10(%rsp)
  0x00007f8ab911d6f2: mov    %r9d,0x8(%rsp)
  0x00007f8ab911d6f7: mov    0x40(%rbx),%rcx
  0x00007f8ab911d6fb: jmpq   *%rcx

AHE@0x00007f8ac80c5048: 0xbbebea00 i2c: 0x00007f8ab911d7a0 c2i: 0x00007f8ab911d8c0 c2iUV: 0x00007f8ab911d893
i2c argument handler #0 for: receiver (JJB)V (596 bytes generated)
c2i argument handler starts at 0x7f8ab911d8c0
  0x00007f8ab911d7a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911d7a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911d7ae: cmp    %r11,%rax
  0x00007f8ab911d7b1: jbe    0x00007f8ab911d7ca
  0x00007f8ab911d7b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911d7c1: cmp    %r11,%rax
  0x00007f8ab911d7c4: jb     0x00007f8ab911d867
  0x00007f8ab911d7ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911d7d4: cmp    %r11,%rax
  0x00007f8ab911d7d7: jbe    0x00007f8ab911d7f0
  0x00007f8ab911d7dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911d7e7: cmp    %r11,%rax
  0x00007f8ab911d7ea: jb     0x00007f8ab911d867
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911d7f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911d7f5: sub    $0x80,%rsp
  0x00007f8ab911d7fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911d801: mov    %rcx,0x70(%rsp)
  0x00007f8ab911d806: mov    %rdx,0x68(%rsp)
  0x00007f8ab911d80b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911d810: mov    %rbp,0x50(%rsp)
  0x00007f8ab911d815: mov    %rsi,0x48(%rsp)
  0x00007f8ab911d81a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911d81f: mov    %r8,0x38(%rsp)
  0x00007f8ab911d824: mov    %r9,0x30(%rsp)
  0x00007f8ab911d829: mov    %r10,0x28(%rsp)
  0x00007f8ab911d82e: mov    %r11,0x20(%rsp)
  0x00007f8ab911d833: mov    %r12,0x18(%rsp)
  0x00007f8ab911d838: mov    %r13,0x10(%rsp)
  0x00007f8ab911d83d: mov    %r14,0x8(%rsp)
  0x00007f8ab911d842: mov    %r15,(%rsp)
  0x00007f8ab911d846: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911d850: movabs $0x7f8ab911d7f0,%rsi
  0x00007f8ab911d85a: mov    %rsp,%rdx
  0x00007f8ab911d85d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d861: callq  0x00007f8aceddb9fa
  0x00007f8ab911d866: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911d867: mov    %rsp,%r11
  0x00007f8ab911d86a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d86e: push   %rax
  0x00007f8ab911d86f: mov    %r11,%rax
  0x00007f8ab911d872: mov    0x50(%rbx),%r11
  0x00007f8ab911d876: mov    0x30(%rax),%rsi
  0x00007f8ab911d87a: mov    0x20(%rax),%rdx
  0x00007f8ab911d87e: mov    0x10(%rax),%rcx
  0x00007f8ab911d882: mov    0x8(%rax),%r8d
  0x00007f8ab911d886: mov    %rbx,0x258(%r15)
  0x00007f8ab911d88d: mov    %rbx,%rax
  0x00007f8ab911d890: jmpq   *%r11
  0x00007f8ab911d893: mov    0x8(%rsi),%ebx
  0x00007f8ab911d896: shl    $0x3,%rbx
  0x00007f8ab911d89a: cmp    0x10(%rax),%rbx
  0x00007f8ab911d89e: mov    0x8(%rax),%rbx
  0x00007f8ab911d8a2: je     0x00007f8ab911d8ad
  0x00007f8ab911d8a8: jmpq   0x00007f8ab9105c40
  0x00007f8ab911d8ad: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911d8b5: je     0x00007f8ab911d9b0
  0x00007f8ab911d8bb: jmpq   0x00007f8ab9105c40
  0x00007f8ab911d8c0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911d8c8: je     0x00007f8ab911d9b0
  0x00007f8ab911d8ce: mov    %rsp,%r13
  0x00007f8ab911d8d1: mov    (%rsp),%rax
  0x00007f8ab911d8d5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911d8d9: pushfq 
  0x00007f8ab911d8da: sub    $0x8,%rsp
  0x00007f8ab911d8de: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911d8e3: sub    $0x80,%rsp
  0x00007f8ab911d8ea: mov    %rax,0x78(%rsp)
  0x00007f8ab911d8ef: mov    %rcx,0x70(%rsp)
  0x00007f8ab911d8f4: mov    %rdx,0x68(%rsp)
  0x00007f8ab911d8f9: mov    %rbx,0x60(%rsp)
  0x00007f8ab911d8fe: mov    %rbp,0x50(%rsp)
  0x00007f8ab911d903: mov    %rsi,0x48(%rsp)
  0x00007f8ab911d908: mov    %rdi,0x40(%rsp)
  0x00007f8ab911d90d: mov    %r8,0x38(%rsp)
  0x00007f8ab911d912: mov    %r9,0x30(%rsp)
  0x00007f8ab911d917: mov    %r10,0x28(%rsp)
  0x00007f8ab911d91c: mov    %r11,0x20(%rsp)
  0x00007f8ab911d921: mov    %r12,0x18(%rsp)
  0x00007f8ab911d926: mov    %r13,0x10(%rsp)
  0x00007f8ab911d92b: mov    %r14,0x8(%rsp)
  0x00007f8ab911d930: mov    %r15,(%rsp)
  0x00007f8ab911d934: sub    $0x200,%rsp
  0x00007f8ab911d93b: fxsave64 (%rsp)
  0x00007f8ab911d940: mov    %rbx,%rdi
  0x00007f8ab911d943: mov    %rax,%rsi
  0x00007f8ab911d946: callq  0x00007f8acef8bbca
  0x00007f8ab911d94b: fxrstor64 (%rsp)
  0x00007f8ab911d950: add    $0x200,%rsp
  0x00007f8ab911d957: mov    (%rsp),%r15
  0x00007f8ab911d95b: mov    0x8(%rsp),%r14
  0x00007f8ab911d960: mov    0x10(%rsp),%r13
  0x00007f8ab911d965: mov    0x18(%rsp),%r12
  0x00007f8ab911d96a: mov    0x20(%rsp),%r11
  0x00007f8ab911d96f: mov    0x28(%rsp),%r10
  0x00007f8ab911d974: mov    0x30(%rsp),%r9
  0x00007f8ab911d979: mov    0x38(%rsp),%r8
  0x00007f8ab911d97e: mov    0x40(%rsp),%rdi
  0x00007f8ab911d983: mov    0x48(%rsp),%rsi
  0x00007f8ab911d988: mov    0x50(%rsp),%rbp
  0x00007f8ab911d98d: mov    0x60(%rsp),%rbx
  0x00007f8ab911d992: mov    0x68(%rsp),%rdx
  0x00007f8ab911d997: mov    0x70(%rsp),%rcx
  0x00007f8ab911d99c: mov    0x78(%rsp),%rax
  0x00007f8ab911d9a1: add    $0x80,%rsp
  0x00007f8ab911d9a8: add    $0x8,%rsp
  0x00007f8ab911d9ac: popfq  
  0x00007f8ab911d9ad: mov    %r13,%rsp
  0x00007f8ab911d9b0: pop    %rax
  0x00007f8ab911d9b1: mov    %rsp,%r13
  0x00007f8ab911d9b4: sub    $0x40,%rsp
  0x00007f8ab911d9b8: mov    %rax,(%rsp)
  0x00007f8ab911d9bc: mov    %rsi,0x30(%rsp)
  0x00007f8ab911d9c1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911d9cb: mov    %rax,0x28(%rsp)
  0x00007f8ab911d9d0: mov    %rdx,0x20(%rsp)
  0x00007f8ab911d9d5: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911d9df: mov    %rax,0x18(%rsp)
  0x00007f8ab911d9e4: mov    %rcx,0x10(%rsp)
  0x00007f8ab911d9e9: mov    %r8d,0x8(%rsp)
  0x00007f8ab911d9ee: mov    0x40(%rbx),%rcx
  0x00007f8ab911d9f2: jmpq   *%rcx

AHE@0x00007f8ac80c5090: 0xbbebe000 i2c: 0x00007f8ab911daa0 c2i: 0x00007f8ab911dbbc c2iUV: 0x00007f8ab911db8f
i2c argument handler #0 for: receiver (JJ)J (587 bytes generated)
c2i argument handler starts at 0x7f8ab911dbbc
  0x00007f8ab911daa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911daa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911daae: cmp    %r11,%rax
  0x00007f8ab911dab1: jbe    0x00007f8ab911daca
  0x00007f8ab911dab7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911dac1: cmp    %r11,%rax
  0x00007f8ab911dac4: jb     0x00007f8ab911db67
  0x00007f8ab911daca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911dad4: cmp    %r11,%rax
  0x00007f8ab911dad7: jbe    0x00007f8ab911daf0
  0x00007f8ab911dadd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911dae7: cmp    %r11,%rax
  0x00007f8ab911daea: jb     0x00007f8ab911db67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911daf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911daf5: sub    $0x80,%rsp
  0x00007f8ab911dafc: mov    %rax,0x78(%rsp)
  0x00007f8ab911db01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911db06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911db0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911db10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911db15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911db1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911db1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911db24: mov    %r9,0x30(%rsp)
  0x00007f8ab911db29: mov    %r10,0x28(%rsp)
  0x00007f8ab911db2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911db33: mov    %r12,0x18(%rsp)
  0x00007f8ab911db38: mov    %r13,0x10(%rsp)
  0x00007f8ab911db3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911db42: mov    %r15,(%rsp)
  0x00007f8ab911db46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911db50: movabs $0x7f8ab911daf0,%rsi
  0x00007f8ab911db5a: mov    %rsp,%rdx
  0x00007f8ab911db5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911db61: callq  0x00007f8aceddb9fa
  0x00007f8ab911db66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911db67: mov    %rsp,%r11
  0x00007f8ab911db6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911db6e: push   %rax
  0x00007f8ab911db6f: mov    %r11,%rax
  0x00007f8ab911db72: mov    0x50(%rbx),%r11
  0x00007f8ab911db76: mov    0x28(%rax),%rsi
  0x00007f8ab911db7a: mov    0x18(%rax),%rdx
  0x00007f8ab911db7e: mov    0x8(%rax),%rcx
  0x00007f8ab911db82: mov    %rbx,0x258(%r15)
  0x00007f8ab911db89: mov    %rbx,%rax
  0x00007f8ab911db8c: jmpq   *%r11
  0x00007f8ab911db8f: mov    0x8(%rsi),%ebx
  0x00007f8ab911db92: shl    $0x3,%rbx
  0x00007f8ab911db96: cmp    0x10(%rax),%rbx
  0x00007f8ab911db9a: mov    0x8(%rax),%rbx
  0x00007f8ab911db9e: je     0x00007f8ab911dba9
  0x00007f8ab911dba4: jmpq   0x00007f8ab9105c40
  0x00007f8ab911dba9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911dbb1: je     0x00007f8ab911dcac
  0x00007f8ab911dbb7: jmpq   0x00007f8ab9105c40
  0x00007f8ab911dbbc: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911dbc4: je     0x00007f8ab911dcac
  0x00007f8ab911dbca: mov    %rsp,%r13
  0x00007f8ab911dbcd: mov    (%rsp),%rax
  0x00007f8ab911dbd1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911dbd5: pushfq 
  0x00007f8ab911dbd6: sub    $0x8,%rsp
  0x00007f8ab911dbda: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911dbdf: sub    $0x80,%rsp
  0x00007f8ab911dbe6: mov    %rax,0x78(%rsp)
  0x00007f8ab911dbeb: mov    %rcx,0x70(%rsp)
  0x00007f8ab911dbf0: mov    %rdx,0x68(%rsp)
  0x00007f8ab911dbf5: mov    %rbx,0x60(%rsp)
  0x00007f8ab911dbfa: mov    %rbp,0x50(%rsp)
  0x00007f8ab911dbff: mov    %rsi,0x48(%rsp)
  0x00007f8ab911dc04: mov    %rdi,0x40(%rsp)
  0x00007f8ab911dc09: mov    %r8,0x38(%rsp)
  0x00007f8ab911dc0e: mov    %r9,0x30(%rsp)
  0x00007f8ab911dc13: mov    %r10,0x28(%rsp)
  0x00007f8ab911dc18: mov    %r11,0x20(%rsp)
  0x00007f8ab911dc1d: mov    %r12,0x18(%rsp)
  0x00007f8ab911dc22: mov    %r13,0x10(%rsp)
  0x00007f8ab911dc27: mov    %r14,0x8(%rsp)
  0x00007f8ab911dc2c: mov    %r15,(%rsp)
  0x00007f8ab911dc30: sub    $0x200,%rsp
  0x00007f8ab911dc37: fxsave64 (%rsp)
  0x00007f8ab911dc3c: mov    %rbx,%rdi
  0x00007f8ab911dc3f: mov    %rax,%rsi
  0x00007f8ab911dc42: callq  0x00007f8acef8bbca
  0x00007f8ab911dc47: fxrstor64 (%rsp)
  0x00007f8ab911dc4c: add    $0x200,%rsp
  0x00007f8ab911dc53: mov    (%rsp),%r15
  0x00007f8ab911dc57: mov    0x8(%rsp),%r14
  0x00007f8ab911dc5c: mov    0x10(%rsp),%r13
  0x00007f8ab911dc61: mov    0x18(%rsp),%r12
  0x00007f8ab911dc66: mov    0x20(%rsp),%r11
  0x00007f8ab911dc6b: mov    0x28(%rsp),%r10
  0x00007f8ab911dc70: mov    0x30(%rsp),%r9
  0x00007f8ab911dc75: mov    0x38(%rsp),%r8
  0x00007f8ab911dc7a: mov    0x40(%rsp),%rdi
  0x00007f8ab911dc7f: mov    0x48(%rsp),%rsi
  0x00007f8ab911dc84: mov    0x50(%rsp),%rbp
  0x00007f8ab911dc89: mov    0x60(%rsp),%rbx
  0x00007f8ab911dc8e: mov    0x68(%rsp),%rdx
  0x00007f8ab911dc93: mov    0x70(%rsp),%rcx
  0x00007f8ab911dc98: mov    0x78(%rsp),%rax
  0x00007f8ab911dc9d: add    $0x80,%rsp
  0x00007f8ab911dca4: add    $0x8,%rsp
  0x00007f8ab911dca8: popfq  
  0x00007f8ab911dca9: mov    %r13,%rsp
  0x00007f8ab911dcac: pop    %rax
  0x00007f8ab911dcad: mov    %rsp,%r13
  0x00007f8ab911dcb0: sub    $0x30,%rsp
  0x00007f8ab911dcb4: mov    %rax,(%rsp)
  0x00007f8ab911dcb8: mov    %rsi,0x28(%rsp)
  0x00007f8ab911dcbd: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911dcc7: mov    %rax,0x20(%rsp)
  0x00007f8ab911dccc: mov    %rdx,0x18(%rsp)
  0x00007f8ab911dcd1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911dcdb: mov    %rax,0x10(%rsp)
  0x00007f8ab911dce0: mov    %rcx,0x8(%rsp)
  0x00007f8ab911dce5: mov    0x40(%rbx),%rcx
  0x00007f8ab911dce9: jmpq   *%rcx

AHE@0x00007f8ac80c50d8: 0xbbe00000 i2c: 0x00007f8ab911dda0 c2i: 0x00007f8ab911deb8 c2iUV: 0x00007f8ab911de8b
i2c argument handler #0 for: receiver (J)J (563 bytes generated)
c2i argument handler starts at 0x7f8ab911deb8
  0x00007f8ab911dda0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911dda4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911ddae: cmp    %r11,%rax
  0x00007f8ab911ddb1: jbe    0x00007f8ab911ddca
  0x00007f8ab911ddb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911ddc1: cmp    %r11,%rax
  0x00007f8ab911ddc4: jb     0x00007f8ab911de67
  0x00007f8ab911ddca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911ddd4: cmp    %r11,%rax
  0x00007f8ab911ddd7: jbe    0x00007f8ab911ddf0
  0x00007f8ab911dddd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911dde7: cmp    %r11,%rax
  0x00007f8ab911ddea: jb     0x00007f8ab911de67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911ddf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ddf5: sub    $0x80,%rsp
  0x00007f8ab911ddfc: mov    %rax,0x78(%rsp)
  0x00007f8ab911de01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911de06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911de0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911de10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911de15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911de1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911de1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911de24: mov    %r9,0x30(%rsp)
  0x00007f8ab911de29: mov    %r10,0x28(%rsp)
  0x00007f8ab911de2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911de33: mov    %r12,0x18(%rsp)
  0x00007f8ab911de38: mov    %r13,0x10(%rsp)
  0x00007f8ab911de3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911de42: mov    %r15,(%rsp)
  0x00007f8ab911de46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911de50: movabs $0x7f8ab911ddf0,%rsi
  0x00007f8ab911de5a: mov    %rsp,%rdx
  0x00007f8ab911de5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911de61: callq  0x00007f8aceddb9fa
  0x00007f8ab911de66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911de67: mov    %rsp,%r11
  0x00007f8ab911de6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911de6e: push   %rax
  0x00007f8ab911de6f: mov    %r11,%rax
  0x00007f8ab911de72: mov    0x50(%rbx),%r11
  0x00007f8ab911de76: mov    0x18(%rax),%rsi
  0x00007f8ab911de7a: mov    0x8(%rax),%rdx
  0x00007f8ab911de7e: mov    %rbx,0x258(%r15)
  0x00007f8ab911de85: mov    %rbx,%rax
  0x00007f8ab911de88: jmpq   *%r11
  0x00007f8ab911de8b: mov    0x8(%rsi),%ebx
  0x00007f8ab911de8e: shl    $0x3,%rbx
  0x00007f8ab911de92: cmp    0x10(%rax),%rbx
  0x00007f8ab911de96: mov    0x8(%rax),%rbx
  0x00007f8ab911de9a: je     0x00007f8ab911dea5
  0x00007f8ab911dea0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911dea5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911dead: je     0x00007f8ab911dfa8
  0x00007f8ab911deb3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911deb8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911dec0: je     0x00007f8ab911dfa8
  0x00007f8ab911dec6: mov    %rsp,%r13
  0x00007f8ab911dec9: mov    (%rsp),%rax
  0x00007f8ab911decd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ded1: pushfq 
  0x00007f8ab911ded2: sub    $0x8,%rsp
  0x00007f8ab911ded6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911dedb: sub    $0x80,%rsp
  0x00007f8ab911dee2: mov    %rax,0x78(%rsp)
  0x00007f8ab911dee7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911deec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911def1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911def6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911defb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911df00: mov    %rdi,0x40(%rsp)
  0x00007f8ab911df05: mov    %r8,0x38(%rsp)
  0x00007f8ab911df0a: mov    %r9,0x30(%rsp)
  0x00007f8ab911df0f: mov    %r10,0x28(%rsp)
  0x00007f8ab911df14: mov    %r11,0x20(%rsp)
  0x00007f8ab911df19: mov    %r12,0x18(%rsp)
  0x00007f8ab911df1e: mov    %r13,0x10(%rsp)
  0x00007f8ab911df23: mov    %r14,0x8(%rsp)
  0x00007f8ab911df28: mov    %r15,(%rsp)
  0x00007f8ab911df2c: sub    $0x200,%rsp
  0x00007f8ab911df33: fxsave64 (%rsp)
  0x00007f8ab911df38: mov    %rbx,%rdi
  0x00007f8ab911df3b: mov    %rax,%rsi
  0x00007f8ab911df3e: callq  0x00007f8acef8bbca
  0x00007f8ab911df43: fxrstor64 (%rsp)
  0x00007f8ab911df48: add    $0x200,%rsp
  0x00007f8ab911df4f: mov    (%rsp),%r15
  0x00007f8ab911df53: mov    0x8(%rsp),%r14
  0x00007f8ab911df58: mov    0x10(%rsp),%r13
  0x00007f8ab911df5d: mov    0x18(%rsp),%r12
  0x00007f8ab911df62: mov    0x20(%rsp),%r11
  0x00007f8ab911df67: mov    0x28(%rsp),%r10
  0x00007f8ab911df6c: mov    0x30(%rsp),%r9
  0x00007f8ab911df71: mov    0x38(%rsp),%r8
  0x00007f8ab911df76: mov    0x40(%rsp),%rdi
  0x00007f8ab911df7b: mov    0x48(%rsp),%rsi
  0x00007f8ab911df80: mov    0x50(%rsp),%rbp
  0x00007f8ab911df85: mov    0x60(%rsp),%rbx
  0x00007f8ab911df8a: mov    0x68(%rsp),%rdx
  0x00007f8ab911df8f: mov    0x70(%rsp),%rcx
  0x00007f8ab911df94: mov    0x78(%rsp),%rax
  0x00007f8ab911df99: add    $0x80,%rsp
  0x00007f8ab911dfa0: add    $0x8,%rsp
  0x00007f8ab911dfa4: popfq  
  0x00007f8ab911dfa5: mov    %r13,%rsp
  0x00007f8ab911dfa8: pop    %rax
  0x00007f8ab911dfa9: mov    %rsp,%r13
  0x00007f8ab911dfac: sub    $0x20,%rsp
  0x00007f8ab911dfb0: mov    %rax,(%rsp)
  0x00007f8ab911dfb4: mov    %rsi,0x18(%rsp)
  0x00007f8ab911dfb9: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab911dfc3: mov    %rax,0x10(%rsp)
  0x00007f8ab911dfc8: mov    %rdx,0x8(%rsp)
  0x00007f8ab911dfcd: mov    0x40(%rbx),%rcx
  0x00007f8ab911dfd1: jmpq   *%rcx

AHE@0x00007f8ac80c5120: 0xbb000000 i2c: 0x00007f8ab911e0a0 c2i: 0x00007f8ab911e1b8 c2iUV: 0x00007f8ab911e18b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab911e1b8
  0x00007f8ab911e0a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911e0a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911e0ae: cmp    %r11,%rax
  0x00007f8ab911e0b1: jbe    0x00007f8ab911e0ca
  0x00007f8ab911e0b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911e0c1: cmp    %r11,%rax
  0x00007f8ab911e0c4: jb     0x00007f8ab911e167
  0x00007f8ab911e0ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911e0d4: cmp    %r11,%rax
  0x00007f8ab911e0d7: jbe    0x00007f8ab911e0f0
  0x00007f8ab911e0dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911e0e7: cmp    %r11,%rax
  0x00007f8ab911e0ea: jb     0x00007f8ab911e167
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911e0f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911e0f5: sub    $0x80,%rsp
  0x00007f8ab911e0fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911e101: mov    %rcx,0x70(%rsp)
  0x00007f8ab911e106: mov    %rdx,0x68(%rsp)
  0x00007f8ab911e10b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911e110: mov    %rbp,0x50(%rsp)
  0x00007f8ab911e115: mov    %rsi,0x48(%rsp)
  0x00007f8ab911e11a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911e11f: mov    %r8,0x38(%rsp)
  0x00007f8ab911e124: mov    %r9,0x30(%rsp)
  0x00007f8ab911e129: mov    %r10,0x28(%rsp)
  0x00007f8ab911e12e: mov    %r11,0x20(%rsp)
  0x00007f8ab911e133: mov    %r12,0x18(%rsp)
  0x00007f8ab911e138: mov    %r13,0x10(%rsp)
  0x00007f8ab911e13d: mov    %r14,0x8(%rsp)
  0x00007f8ab911e142: mov    %r15,(%rsp)
  0x00007f8ab911e146: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911e150: movabs $0x7f8ab911e0f0,%rsi
  0x00007f8ab911e15a: mov    %rsp,%rdx
  0x00007f8ab911e15d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e161: callq  0x00007f8aceddb9fa
  0x00007f8ab911e166: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911e167: mov    %rsp,%r11
  0x00007f8ab911e16a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e16e: push   %rax
  0x00007f8ab911e16f: mov    %r11,%rax
  0x00007f8ab911e172: mov    0x50(%rbx),%r11
  0x00007f8ab911e176: mov    0x10(%rax),%rsi
  0x00007f8ab911e17a: mov    0x8(%rax),%rdx
  0x00007f8ab911e17e: mov    %rbx,0x258(%r15)
  0x00007f8ab911e185: mov    %rbx,%rax
  0x00007f8ab911e188: jmpq   *%r11
  0x00007f8ab911e18b: mov    0x8(%rsi),%ebx
  0x00007f8ab911e18e: shl    $0x3,%rbx
  0x00007f8ab911e192: cmp    0x10(%rax),%rbx
  0x00007f8ab911e196: mov    0x8(%rax),%rbx
  0x00007f8ab911e19a: je     0x00007f8ab911e1a5
  0x00007f8ab911e1a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911e1a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911e1ad: je     0x00007f8ab911e2a8
  0x00007f8ab911e1b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911e1b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911e1c0: je     0x00007f8ab911e2a8
  0x00007f8ab911e1c6: mov    %rsp,%r13
  0x00007f8ab911e1c9: mov    (%rsp),%rax
  0x00007f8ab911e1cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e1d1: pushfq 
  0x00007f8ab911e1d2: sub    $0x8,%rsp
  0x00007f8ab911e1d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911e1db: sub    $0x80,%rsp
  0x00007f8ab911e1e2: mov    %rax,0x78(%rsp)
  0x00007f8ab911e1e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911e1ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911e1f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911e1f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911e1fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911e200: mov    %rdi,0x40(%rsp)
  0x00007f8ab911e205: mov    %r8,0x38(%rsp)
  0x00007f8ab911e20a: mov    %r9,0x30(%rsp)
  0x00007f8ab911e20f: mov    %r10,0x28(%rsp)
  0x00007f8ab911e214: mov    %r11,0x20(%rsp)
  0x00007f8ab911e219: mov    %r12,0x18(%rsp)
  0x00007f8ab911e21e: mov    %r13,0x10(%rsp)
  0x00007f8ab911e223: mov    %r14,0x8(%rsp)
  0x00007f8ab911e228: mov    %r15,(%rsp)
  0x00007f8ab911e22c: sub    $0x200,%rsp
  0x00007f8ab911e233: fxsave64 (%rsp)
  0x00007f8ab911e238: mov    %rbx,%rdi
  0x00007f8ab911e23b: mov    %rax,%rsi
  0x00007f8ab911e23e: callq  0x00007f8acef8bbca
  0x00007f8ab911e243: fxrstor64 (%rsp)
  0x00007f8ab911e248: add    $0x200,%rsp
  0x00007f8ab911e24f: mov    (%rsp),%r15
  0x00007f8ab911e253: mov    0x8(%rsp),%r14
  0x00007f8ab911e258: mov    0x10(%rsp),%r13
  0x00007f8ab911e25d: mov    0x18(%rsp),%r12
  0x00007f8ab911e262: mov    0x20(%rsp),%r11
  0x00007f8ab911e267: mov    0x28(%rsp),%r10
  0x00007f8ab911e26c: mov    0x30(%rsp),%r9
  0x00007f8ab911e271: mov    0x38(%rsp),%r8
  0x00007f8ab911e276: mov    0x40(%rsp),%rdi
  0x00007f8ab911e27b: mov    0x48(%rsp),%rsi
  0x00007f8ab911e280: mov    0x50(%rsp),%rbp
  0x00007f8ab911e285: mov    0x60(%rsp),%rbx
  0x00007f8ab911e28a: mov    0x68(%rsp),%rdx
  0x00007f8ab911e28f: mov    0x70(%rsp),%rcx
  0x00007f8ab911e294: mov    0x78(%rsp),%rax
  0x00007f8ab911e299: add    $0x80,%rsp
  0x00007f8ab911e2a0: add    $0x8,%rsp
  0x00007f8ab911e2a4: popfq  
  0x00007f8ab911e2a5: mov    %r13,%rsp
  0x00007f8ab911e2a8: pop    %rax
  0x00007f8ab911e2a9: mov    %rsp,%r13
  0x00007f8ab911e2ac: sub    $0x20,%rsp
  0x00007f8ab911e2b0: mov    %rax,(%rsp)
  0x00007f8ab911e2b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911e2b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911e2be: mov    0x40(%rbx),%rcx
  0x00007f8ab911e2c2: jmpq   *%rcx

AHE@0x00007f8ac80c5168: 0xbb000000 i2c: 0x00007f8ab911e3a0 c2i: 0x00007f8ab911e4b8 c2iUV: 0x00007f8ab911e48b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab911e4b8
  0x00007f8ab911e3a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911e3a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911e3ae: cmp    %r11,%rax
  0x00007f8ab911e3b1: jbe    0x00007f8ab911e3ca
  0x00007f8ab911e3b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911e3c1: cmp    %r11,%rax
  0x00007f8ab911e3c4: jb     0x00007f8ab911e467
  0x00007f8ab911e3ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911e3d4: cmp    %r11,%rax
  0x00007f8ab911e3d7: jbe    0x00007f8ab911e3f0
  0x00007f8ab911e3dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911e3e7: cmp    %r11,%rax
  0x00007f8ab911e3ea: jb     0x00007f8ab911e467
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911e3f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911e3f5: sub    $0x80,%rsp
  0x00007f8ab911e3fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911e401: mov    %rcx,0x70(%rsp)
  0x00007f8ab911e406: mov    %rdx,0x68(%rsp)
  0x00007f8ab911e40b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911e410: mov    %rbp,0x50(%rsp)
  0x00007f8ab911e415: mov    %rsi,0x48(%rsp)
  0x00007f8ab911e41a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911e41f: mov    %r8,0x38(%rsp)
  0x00007f8ab911e424: mov    %r9,0x30(%rsp)
  0x00007f8ab911e429: mov    %r10,0x28(%rsp)
  0x00007f8ab911e42e: mov    %r11,0x20(%rsp)
  0x00007f8ab911e433: mov    %r12,0x18(%rsp)
  0x00007f8ab911e438: mov    %r13,0x10(%rsp)
  0x00007f8ab911e43d: mov    %r14,0x8(%rsp)
  0x00007f8ab911e442: mov    %r15,(%rsp)
  0x00007f8ab911e446: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911e450: movabs $0x7f8ab911e3f0,%rsi
  0x00007f8ab911e45a: mov    %rsp,%rdx
  0x00007f8ab911e45d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e461: callq  0x00007f8aceddb9fa
  0x00007f8ab911e466: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911e467: mov    %rsp,%r11
  0x00007f8ab911e46a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e46e: push   %rax
  0x00007f8ab911e46f: mov    %r11,%rax
  0x00007f8ab911e472: mov    0x50(%rbx),%r11
  0x00007f8ab911e476: mov    0x10(%rax),%rsi
  0x00007f8ab911e47a: mov    0x8(%rax),%rdx
  0x00007f8ab911e47e: mov    %rbx,0x258(%r15)
  0x00007f8ab911e485: mov    %rbx,%rax
  0x00007f8ab911e488: jmpq   *%r11
  0x00007f8ab911e48b: mov    0x8(%rsi),%ebx
  0x00007f8ab911e48e: shl    $0x3,%rbx
  0x00007f8ab911e492: cmp    0x10(%rax),%rbx
  0x00007f8ab911e496: mov    0x8(%rax),%rbx
  0x00007f8ab911e49a: je     0x00007f8ab911e4a5
  0x00007f8ab911e4a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911e4a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911e4ad: je     0x00007f8ab911e5a8
  0x00007f8ab911e4b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911e4b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911e4c0: je     0x00007f8ab911e5a8
  0x00007f8ab911e4c6: mov    %rsp,%r13
  0x00007f8ab911e4c9: mov    (%rsp),%rax
  0x00007f8ab911e4cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e4d1: pushfq 
  0x00007f8ab911e4d2: sub    $0x8,%rsp
  0x00007f8ab911e4d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911e4db: sub    $0x80,%rsp
  0x00007f8ab911e4e2: mov    %rax,0x78(%rsp)
  0x00007f8ab911e4e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911e4ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911e4f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911e4f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911e4fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911e500: mov    %rdi,0x40(%rsp)
  0x00007f8ab911e505: mov    %r8,0x38(%rsp)
  0x00007f8ab911e50a: mov    %r9,0x30(%rsp)
  0x00007f8ab911e50f: mov    %r10,0x28(%rsp)
  0x00007f8ab911e514: mov    %r11,0x20(%rsp)
  0x00007f8ab911e519: mov    %r12,0x18(%rsp)
  0x00007f8ab911e51e: mov    %r13,0x10(%rsp)
  0x00007f8ab911e523: mov    %r14,0x8(%rsp)
  0x00007f8ab911e528: mov    %r15,(%rsp)
  0x00007f8ab911e52c: sub    $0x200,%rsp
  0x00007f8ab911e533: fxsave64 (%rsp)
  0x00007f8ab911e538: mov    %rbx,%rdi
  0x00007f8ab911e53b: mov    %rax,%rsi
  0x00007f8ab911e53e: callq  0x00007f8acef8bbca
  0x00007f8ab911e543: fxrstor64 (%rsp)
  0x00007f8ab911e548: add    $0x200,%rsp
  0x00007f8ab911e54f: mov    (%rsp),%r15
  0x00007f8ab911e553: mov    0x8(%rsp),%r14
  0x00007f8ab911e558: mov    0x10(%rsp),%r13
  0x00007f8ab911e55d: mov    0x18(%rsp),%r12
  0x00007f8ab911e562: mov    0x20(%rsp),%r11
  0x00007f8ab911e567: mov    0x28(%rsp),%r10
  0x00007f8ab911e56c: mov    0x30(%rsp),%r9
  0x00007f8ab911e571: mov    0x38(%rsp),%r8
  0x00007f8ab911e576: mov    0x40(%rsp),%rdi
  0x00007f8ab911e57b: mov    0x48(%rsp),%rsi
  0x00007f8ab911e580: mov    0x50(%rsp),%rbp
  0x00007f8ab911e585: mov    0x60(%rsp),%rbx
  0x00007f8ab911e58a: mov    0x68(%rsp),%rdx
  0x00007f8ab911e58f: mov    0x70(%rsp),%rcx
  0x00007f8ab911e594: mov    0x78(%rsp),%rax
  0x00007f8ab911e599: add    $0x80,%rsp
  0x00007f8ab911e5a0: add    $0x8,%rsp
  0x00007f8ab911e5a4: popfq  
  0x00007f8ab911e5a5: mov    %r13,%rsp
  0x00007f8ab911e5a8: pop    %rax
  0x00007f8ab911e5a9: mov    %rsp,%r13
  0x00007f8ab911e5ac: sub    $0x20,%rsp
  0x00007f8ab911e5b0: mov    %rax,(%rsp)
  0x00007f8ab911e5b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911e5b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911e5be: mov    0x40(%rbx),%rcx
  0x00007f8ab911e5c2: jmpq   *%rcx

AHE@0x00007f8ac80c51b0: 0xbb000000 i2c: 0x00007f8ab911e6a0 c2i: 0x00007f8ab911e7b8 c2iUV: 0x00007f8ab911e78b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)J (548 bytes generated)
c2i argument handler starts at 0x7f8ab911e7b8
  0x00007f8ab911e6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911e6a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911e6ae: cmp    %r11,%rax
  0x00007f8ab911e6b1: jbe    0x00007f8ab911e6ca
  0x00007f8ab911e6b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911e6c1: cmp    %r11,%rax
  0x00007f8ab911e6c4: jb     0x00007f8ab911e767
  0x00007f8ab911e6ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911e6d4: cmp    %r11,%rax
  0x00007f8ab911e6d7: jbe    0x00007f8ab911e6f0
  0x00007f8ab911e6dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911e6e7: cmp    %r11,%rax
  0x00007f8ab911e6ea: jb     0x00007f8ab911e767
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911e6f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911e6f5: sub    $0x80,%rsp
  0x00007f8ab911e6fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911e701: mov    %rcx,0x70(%rsp)
  0x00007f8ab911e706: mov    %rdx,0x68(%rsp)
  0x00007f8ab911e70b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911e710: mov    %rbp,0x50(%rsp)
  0x00007f8ab911e715: mov    %rsi,0x48(%rsp)
  0x00007f8ab911e71a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911e71f: mov    %r8,0x38(%rsp)
  0x00007f8ab911e724: mov    %r9,0x30(%rsp)
  0x00007f8ab911e729: mov    %r10,0x28(%rsp)
  0x00007f8ab911e72e: mov    %r11,0x20(%rsp)
  0x00007f8ab911e733: mov    %r12,0x18(%rsp)
  0x00007f8ab911e738: mov    %r13,0x10(%rsp)
  0x00007f8ab911e73d: mov    %r14,0x8(%rsp)
  0x00007f8ab911e742: mov    %r15,(%rsp)
  0x00007f8ab911e746: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911e750: movabs $0x7f8ab911e6f0,%rsi
  0x00007f8ab911e75a: mov    %rsp,%rdx
  0x00007f8ab911e75d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e761: callq  0x00007f8aceddb9fa
  0x00007f8ab911e766: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911e767: mov    %rsp,%r11
  0x00007f8ab911e76a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e76e: push   %rax
  0x00007f8ab911e76f: mov    %r11,%rax
  0x00007f8ab911e772: mov    0x50(%rbx),%r11
  0x00007f8ab911e776: mov    0x10(%rax),%rsi
  0x00007f8ab911e77a: mov    0x8(%rax),%rdx
  0x00007f8ab911e77e: mov    %rbx,0x258(%r15)
  0x00007f8ab911e785: mov    %rbx,%rax
  0x00007f8ab911e788: jmpq   *%r11
  0x00007f8ab911e78b: mov    0x8(%rsi),%ebx
  0x00007f8ab911e78e: shl    $0x3,%rbx
  0x00007f8ab911e792: cmp    0x10(%rax),%rbx
  0x00007f8ab911e796: mov    0x8(%rax),%rbx
  0x00007f8ab911e79a: je     0x00007f8ab911e7a5
  0x00007f8ab911e7a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911e7a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911e7ad: je     0x00007f8ab911e8a8
  0x00007f8ab911e7b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911e7b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911e7c0: je     0x00007f8ab911e8a8
  0x00007f8ab911e7c6: mov    %rsp,%r13
  0x00007f8ab911e7c9: mov    (%rsp),%rax
  0x00007f8ab911e7cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911e7d1: pushfq 
  0x00007f8ab911e7d2: sub    $0x8,%rsp
  0x00007f8ab911e7d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911e7db: sub    $0x80,%rsp
  0x00007f8ab911e7e2: mov    %rax,0x78(%rsp)
  0x00007f8ab911e7e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911e7ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911e7f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911e7f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911e7fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911e800: mov    %rdi,0x40(%rsp)
  0x00007f8ab911e805: mov    %r8,0x38(%rsp)
  0x00007f8ab911e80a: mov    %r9,0x30(%rsp)
  0x00007f8ab911e80f: mov    %r10,0x28(%rsp)
  0x00007f8ab911e814: mov    %r11,0x20(%rsp)
  0x00007f8ab911e819: mov    %r12,0x18(%rsp)
  0x00007f8ab911e81e: mov    %r13,0x10(%rsp)
  0x00007f8ab911e823: mov    %r14,0x8(%rsp)
  0x00007f8ab911e828: mov    %r15,(%rsp)
  0x00007f8ab911e82c: sub    $0x200,%rsp
  0x00007f8ab911e833: fxsave64 (%rsp)
  0x00007f8ab911e838: mov    %rbx,%rdi
  0x00007f8ab911e83b: mov    %rax,%rsi
  0x00007f8ab911e83e: callq  0x00007f8acef8bbca
  0x00007f8ab911e843: fxrstor64 (%rsp)
  0x00007f8ab911e848: add    $0x200,%rsp
  0x00007f8ab911e84f: mov    (%rsp),%r15
  0x00007f8ab911e853: mov    0x8(%rsp),%r14
  0x00007f8ab911e858: mov    0x10(%rsp),%r13
  0x00007f8ab911e85d: mov    0x18(%rsp),%r12
  0x00007f8ab911e862: mov    0x20(%rsp),%r11
  0x00007f8ab911e867: mov    0x28(%rsp),%r10
  0x00007f8ab911e86c: mov    0x30(%rsp),%r9
  0x00007f8ab911e871: mov    0x38(%rsp),%r8
  0x00007f8ab911e876: mov    0x40(%rsp),%rdi
  0x00007f8ab911e87b: mov    0x48(%rsp),%rsi
  0x00007f8ab911e880: mov    0x50(%rsp),%rbp
  0x00007f8ab911e885: mov    0x60(%rsp),%rbx
  0x00007f8ab911e88a: mov    0x68(%rsp),%rdx
  0x00007f8ab911e88f: mov    0x70(%rsp),%rcx
  0x00007f8ab911e894: mov    0x78(%rsp),%rax
  0x00007f8ab911e899: add    $0x80,%rsp
  0x00007f8ab911e8a0: add    $0x8,%rsp
  0x00007f8ab911e8a4: popfq  
  0x00007f8ab911e8a5: mov    %r13,%rsp
  0x00007f8ab911e8a8: pop    %rax
  0x00007f8ab911e8a9: mov    %rsp,%r13
  0x00007f8ab911e8ac: sub    $0x20,%rsp
  0x00007f8ab911e8b0: mov    %rax,(%rsp)
  0x00007f8ab911e8b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911e8b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911e8be: mov    0x40(%rbx),%rcx
  0x00007f8ab911e8c2: jmpq   *%rcx

AHE@0x00007f8ac80c51f8: 0xbb000000 i2c: 0x00007f8ab911e9a0 c2i: 0x00007f8ab911eab8 c2iUV: 0x00007f8ab911ea8b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)J (548 bytes generated)
c2i argument handler starts at 0x7f8ab911eab8
  0x00007f8ab911e9a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911e9a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911e9ae: cmp    %r11,%rax
  0x00007f8ab911e9b1: jbe    0x00007f8ab911e9ca
  0x00007f8ab911e9b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911e9c1: cmp    %r11,%rax
  0x00007f8ab911e9c4: jb     0x00007f8ab911ea67
  0x00007f8ab911e9ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911e9d4: cmp    %r11,%rax
  0x00007f8ab911e9d7: jbe    0x00007f8ab911e9f0
  0x00007f8ab911e9dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911e9e7: cmp    %r11,%rax
  0x00007f8ab911e9ea: jb     0x00007f8ab911ea67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911e9f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911e9f5: sub    $0x80,%rsp
  0x00007f8ab911e9fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911ea01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ea06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ea0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ea10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ea15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ea1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ea1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911ea24: mov    %r9,0x30(%rsp)
  0x00007f8ab911ea29: mov    %r10,0x28(%rsp)
  0x00007f8ab911ea2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911ea33: mov    %r12,0x18(%rsp)
  0x00007f8ab911ea38: mov    %r13,0x10(%rsp)
  0x00007f8ab911ea3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911ea42: mov    %r15,(%rsp)
  0x00007f8ab911ea46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911ea50: movabs $0x7f8ab911e9f0,%rsi
  0x00007f8ab911ea5a: mov    %rsp,%rdx
  0x00007f8ab911ea5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ea61: callq  0x00007f8aceddb9fa
  0x00007f8ab911ea66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911ea67: mov    %rsp,%r11
  0x00007f8ab911ea6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ea6e: push   %rax
  0x00007f8ab911ea6f: mov    %r11,%rax
  0x00007f8ab911ea72: mov    0x50(%rbx),%r11
  0x00007f8ab911ea76: mov    0x10(%rax),%rsi
  0x00007f8ab911ea7a: mov    0x8(%rax),%rdx
  0x00007f8ab911ea7e: mov    %rbx,0x258(%r15)
  0x00007f8ab911ea85: mov    %rbx,%rax
  0x00007f8ab911ea88: jmpq   *%r11
  0x00007f8ab911ea8b: mov    0x8(%rsi),%ebx
  0x00007f8ab911ea8e: shl    $0x3,%rbx
  0x00007f8ab911ea92: cmp    0x10(%rax),%rbx
  0x00007f8ab911ea96: mov    0x8(%rax),%rbx
  0x00007f8ab911ea9a: je     0x00007f8ab911eaa5
  0x00007f8ab911eaa0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911eaa5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911eaad: je     0x00007f8ab911eba8
  0x00007f8ab911eab3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911eab8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911eac0: je     0x00007f8ab911eba8
  0x00007f8ab911eac6: mov    %rsp,%r13
  0x00007f8ab911eac9: mov    (%rsp),%rax
  0x00007f8ab911eacd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ead1: pushfq 
  0x00007f8ab911ead2: sub    $0x8,%rsp
  0x00007f8ab911ead6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911eadb: sub    $0x80,%rsp
  0x00007f8ab911eae2: mov    %rax,0x78(%rsp)
  0x00007f8ab911eae7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911eaec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911eaf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911eaf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911eafb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911eb00: mov    %rdi,0x40(%rsp)
  0x00007f8ab911eb05: mov    %r8,0x38(%rsp)
  0x00007f8ab911eb0a: mov    %r9,0x30(%rsp)
  0x00007f8ab911eb0f: mov    %r10,0x28(%rsp)
  0x00007f8ab911eb14: mov    %r11,0x20(%rsp)
  0x00007f8ab911eb19: mov    %r12,0x18(%rsp)
  0x00007f8ab911eb1e: mov    %r13,0x10(%rsp)
  0x00007f8ab911eb23: mov    %r14,0x8(%rsp)
  0x00007f8ab911eb28: mov    %r15,(%rsp)
  0x00007f8ab911eb2c: sub    $0x200,%rsp
  0x00007f8ab911eb33: fxsave64 (%rsp)
  0x00007f8ab911eb38: mov    %rbx,%rdi
  0x00007f8ab911eb3b: mov    %rax,%rsi
  0x00007f8ab911eb3e: callq  0x00007f8acef8bbca
  0x00007f8ab911eb43: fxrstor64 (%rsp)
  0x00007f8ab911eb48: add    $0x200,%rsp
  0x00007f8ab911eb4f: mov    (%rsp),%r15
  0x00007f8ab911eb53: mov    0x8(%rsp),%r14
  0x00007f8ab911eb58: mov    0x10(%rsp),%r13
  0x00007f8ab911eb5d: mov    0x18(%rsp),%r12
  0x00007f8ab911eb62: mov    0x20(%rsp),%r11
  0x00007f8ab911eb67: mov    0x28(%rsp),%r10
  0x00007f8ab911eb6c: mov    0x30(%rsp),%r9
  0x00007f8ab911eb71: mov    0x38(%rsp),%r8
  0x00007f8ab911eb76: mov    0x40(%rsp),%rdi
  0x00007f8ab911eb7b: mov    0x48(%rsp),%rsi
  0x00007f8ab911eb80: mov    0x50(%rsp),%rbp
  0x00007f8ab911eb85: mov    0x60(%rsp),%rbx
  0x00007f8ab911eb8a: mov    0x68(%rsp),%rdx
  0x00007f8ab911eb8f: mov    0x70(%rsp),%rcx
  0x00007f8ab911eb94: mov    0x78(%rsp),%rax
  0x00007f8ab911eb99: add    $0x80,%rsp
  0x00007f8ab911eba0: add    $0x8,%rsp
  0x00007f8ab911eba4: popfq  
  0x00007f8ab911eba5: mov    %r13,%rsp
  0x00007f8ab911eba8: pop    %rax
  0x00007f8ab911eba9: mov    %rsp,%r13
  0x00007f8ab911ebac: sub    $0x20,%rsp
  0x00007f8ab911ebb0: mov    %rax,(%rsp)
  0x00007f8ab911ebb4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911ebb9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911ebbe: mov    0x40(%rbx),%rcx
  0x00007f8ab911ebc2: jmpq   *%rcx

AHE@0x00007f8ac80c5240: 0xbb000000 i2c: 0x00007f8ab911eca0 c2i: 0x00007f8ab911edb8 c2iUV: 0x00007f8ab911ed8b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)I (548 bytes generated)
c2i argument handler starts at 0x7f8ab911edb8
  0x00007f8ab911eca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911eca4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911ecae: cmp    %r11,%rax
  0x00007f8ab911ecb1: jbe    0x00007f8ab911ecca
  0x00007f8ab911ecb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911ecc1: cmp    %r11,%rax
  0x00007f8ab911ecc4: jb     0x00007f8ab911ed67
  0x00007f8ab911ecca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911ecd4: cmp    %r11,%rax
  0x00007f8ab911ecd7: jbe    0x00007f8ab911ecf0
  0x00007f8ab911ecdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911ece7: cmp    %r11,%rax
  0x00007f8ab911ecea: jb     0x00007f8ab911ed67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911ecf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ecf5: sub    $0x80,%rsp
  0x00007f8ab911ecfc: mov    %rax,0x78(%rsp)
  0x00007f8ab911ed01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ed06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ed0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ed10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ed15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ed1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ed1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911ed24: mov    %r9,0x30(%rsp)
  0x00007f8ab911ed29: mov    %r10,0x28(%rsp)
  0x00007f8ab911ed2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911ed33: mov    %r12,0x18(%rsp)
  0x00007f8ab911ed38: mov    %r13,0x10(%rsp)
  0x00007f8ab911ed3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911ed42: mov    %r15,(%rsp)
  0x00007f8ab911ed46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911ed50: movabs $0x7f8ab911ecf0,%rsi
  0x00007f8ab911ed5a: mov    %rsp,%rdx
  0x00007f8ab911ed5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ed61: callq  0x00007f8aceddb9fa
  0x00007f8ab911ed66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911ed67: mov    %rsp,%r11
  0x00007f8ab911ed6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ed6e: push   %rax
  0x00007f8ab911ed6f: mov    %r11,%rax
  0x00007f8ab911ed72: mov    0x50(%rbx),%r11
  0x00007f8ab911ed76: mov    0x10(%rax),%rsi
  0x00007f8ab911ed7a: mov    0x8(%rax),%rdx
  0x00007f8ab911ed7e: mov    %rbx,0x258(%r15)
  0x00007f8ab911ed85: mov    %rbx,%rax
  0x00007f8ab911ed88: jmpq   *%r11
  0x00007f8ab911ed8b: mov    0x8(%rsi),%ebx
  0x00007f8ab911ed8e: shl    $0x3,%rbx
  0x00007f8ab911ed92: cmp    0x10(%rax),%rbx
  0x00007f8ab911ed96: mov    0x8(%rax),%rbx
  0x00007f8ab911ed9a: je     0x00007f8ab911eda5
  0x00007f8ab911eda0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911eda5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911edad: je     0x00007f8ab911eea8
  0x00007f8ab911edb3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911edb8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911edc0: je     0x00007f8ab911eea8
  0x00007f8ab911edc6: mov    %rsp,%r13
  0x00007f8ab911edc9: mov    (%rsp),%rax
  0x00007f8ab911edcd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911edd1: pushfq 
  0x00007f8ab911edd2: sub    $0x8,%rsp
  0x00007f8ab911edd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911eddb: sub    $0x80,%rsp
  0x00007f8ab911ede2: mov    %rax,0x78(%rsp)
  0x00007f8ab911ede7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911edec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911edf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911edf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911edfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ee00: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ee05: mov    %r8,0x38(%rsp)
  0x00007f8ab911ee0a: mov    %r9,0x30(%rsp)
  0x00007f8ab911ee0f: mov    %r10,0x28(%rsp)
  0x00007f8ab911ee14: mov    %r11,0x20(%rsp)
  0x00007f8ab911ee19: mov    %r12,0x18(%rsp)
  0x00007f8ab911ee1e: mov    %r13,0x10(%rsp)
  0x00007f8ab911ee23: mov    %r14,0x8(%rsp)
  0x00007f8ab911ee28: mov    %r15,(%rsp)
  0x00007f8ab911ee2c: sub    $0x200,%rsp
  0x00007f8ab911ee33: fxsave64 (%rsp)
  0x00007f8ab911ee38: mov    %rbx,%rdi
  0x00007f8ab911ee3b: mov    %rax,%rsi
  0x00007f8ab911ee3e: callq  0x00007f8acef8bbca
  0x00007f8ab911ee43: fxrstor64 (%rsp)
  0x00007f8ab911ee48: add    $0x200,%rsp
  0x00007f8ab911ee4f: mov    (%rsp),%r15
  0x00007f8ab911ee53: mov    0x8(%rsp),%r14
  0x00007f8ab911ee58: mov    0x10(%rsp),%r13
  0x00007f8ab911ee5d: mov    0x18(%rsp),%r12
  0x00007f8ab911ee62: mov    0x20(%rsp),%r11
  0x00007f8ab911ee67: mov    0x28(%rsp),%r10
  0x00007f8ab911ee6c: mov    0x30(%rsp),%r9
  0x00007f8ab911ee71: mov    0x38(%rsp),%r8
  0x00007f8ab911ee76: mov    0x40(%rsp),%rdi
  0x00007f8ab911ee7b: mov    0x48(%rsp),%rsi
  0x00007f8ab911ee80: mov    0x50(%rsp),%rbp
  0x00007f8ab911ee85: mov    0x60(%rsp),%rbx
  0x00007f8ab911ee8a: mov    0x68(%rsp),%rdx
  0x00007f8ab911ee8f: mov    0x70(%rsp),%rcx
  0x00007f8ab911ee94: mov    0x78(%rsp),%rax
  0x00007f8ab911ee99: add    $0x80,%rsp
  0x00007f8ab911eea0: add    $0x8,%rsp
  0x00007f8ab911eea4: popfq  
  0x00007f8ab911eea5: mov    %r13,%rsp
  0x00007f8ab911eea8: pop    %rax
  0x00007f8ab911eea9: mov    %rsp,%r13
  0x00007f8ab911eeac: sub    $0x20,%rsp
  0x00007f8ab911eeb0: mov    %rax,(%rsp)
  0x00007f8ab911eeb4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911eeb9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911eebe: mov    0x40(%rbx),%rcx
  0x00007f8ab911eec2: jmpq   *%rcx

AHE@0x00007f8ac80c5288: 0xbb000000 i2c: 0x00007f8ab911efa0 c2i: 0x00007f8ab911f0b8 c2iUV: 0x00007f8ab911f08b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f8ab911f0b8
  0x00007f8ab911efa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911efa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911efae: cmp    %r11,%rax
  0x00007f8ab911efb1: jbe    0x00007f8ab911efca
  0x00007f8ab911efb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911efc1: cmp    %r11,%rax
  0x00007f8ab911efc4: jb     0x00007f8ab911f067
  0x00007f8ab911efca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911efd4: cmp    %r11,%rax
  0x00007f8ab911efd7: jbe    0x00007f8ab911eff0
  0x00007f8ab911efdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911efe7: cmp    %r11,%rax
  0x00007f8ab911efea: jb     0x00007f8ab911f067
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911eff0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911eff5: sub    $0x80,%rsp
  0x00007f8ab911effc: mov    %rax,0x78(%rsp)
  0x00007f8ab911f001: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f006: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f00b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f010: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f015: mov    %rsi,0x48(%rsp)
  0x00007f8ab911f01a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911f01f: mov    %r8,0x38(%rsp)
  0x00007f8ab911f024: mov    %r9,0x30(%rsp)
  0x00007f8ab911f029: mov    %r10,0x28(%rsp)
  0x00007f8ab911f02e: mov    %r11,0x20(%rsp)
  0x00007f8ab911f033: mov    %r12,0x18(%rsp)
  0x00007f8ab911f038: mov    %r13,0x10(%rsp)
  0x00007f8ab911f03d: mov    %r14,0x8(%rsp)
  0x00007f8ab911f042: mov    %r15,(%rsp)
  0x00007f8ab911f046: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911f050: movabs $0x7f8ab911eff0,%rsi
  0x00007f8ab911f05a: mov    %rsp,%rdx
  0x00007f8ab911f05d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f061: callq  0x00007f8aceddb9fa
  0x00007f8ab911f066: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911f067: mov    %rsp,%r11
  0x00007f8ab911f06a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f06e: push   %rax
  0x00007f8ab911f06f: mov    %r11,%rax
  0x00007f8ab911f072: mov    0x50(%rbx),%r11
  0x00007f8ab911f076: mov    0x10(%rax),%rsi
  0x00007f8ab911f07a: mov    0x8(%rax),%rdx
  0x00007f8ab911f07e: mov    %rbx,0x258(%r15)
  0x00007f8ab911f085: mov    %rbx,%rax
  0x00007f8ab911f088: jmpq   *%r11
  0x00007f8ab911f08b: mov    0x8(%rsi),%ebx
  0x00007f8ab911f08e: shl    $0x3,%rbx
  0x00007f8ab911f092: cmp    0x10(%rax),%rbx
  0x00007f8ab911f096: mov    0x8(%rax),%rbx
  0x00007f8ab911f09a: je     0x00007f8ab911f0a5
  0x00007f8ab911f0a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f0a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f0ad: je     0x00007f8ab911f1a8
  0x00007f8ab911f0b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f0b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f0c0: je     0x00007f8ab911f1a8
  0x00007f8ab911f0c6: mov    %rsp,%r13
  0x00007f8ab911f0c9: mov    (%rsp),%rax
  0x00007f8ab911f0cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f0d1: pushfq 
  0x00007f8ab911f0d2: sub    $0x8,%rsp
  0x00007f8ab911f0d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911f0db: sub    $0x80,%rsp
  0x00007f8ab911f0e2: mov    %rax,0x78(%rsp)
  0x00007f8ab911f0e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f0ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f0f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f0f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f0fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911f100: mov    %rdi,0x40(%rsp)
  0x00007f8ab911f105: mov    %r8,0x38(%rsp)
  0x00007f8ab911f10a: mov    %r9,0x30(%rsp)
  0x00007f8ab911f10f: mov    %r10,0x28(%rsp)
  0x00007f8ab911f114: mov    %r11,0x20(%rsp)
  0x00007f8ab911f119: mov    %r12,0x18(%rsp)
  0x00007f8ab911f11e: mov    %r13,0x10(%rsp)
  0x00007f8ab911f123: mov    %r14,0x8(%rsp)
  0x00007f8ab911f128: mov    %r15,(%rsp)
  0x00007f8ab911f12c: sub    $0x200,%rsp
  0x00007f8ab911f133: fxsave64 (%rsp)
  0x00007f8ab911f138: mov    %rbx,%rdi
  0x00007f8ab911f13b: mov    %rax,%rsi
  0x00007f8ab911f13e: callq  0x00007f8acef8bbca
  0x00007f8ab911f143: fxrstor64 (%rsp)
  0x00007f8ab911f148: add    $0x200,%rsp
  0x00007f8ab911f14f: mov    (%rsp),%r15
  0x00007f8ab911f153: mov    0x8(%rsp),%r14
  0x00007f8ab911f158: mov    0x10(%rsp),%r13
  0x00007f8ab911f15d: mov    0x18(%rsp),%r12
  0x00007f8ab911f162: mov    0x20(%rsp),%r11
  0x00007f8ab911f167: mov    0x28(%rsp),%r10
  0x00007f8ab911f16c: mov    0x30(%rsp),%r9
  0x00007f8ab911f171: mov    0x38(%rsp),%r8
  0x00007f8ab911f176: mov    0x40(%rsp),%rdi
  0x00007f8ab911f17b: mov    0x48(%rsp),%rsi
  0x00007f8ab911f180: mov    0x50(%rsp),%rbp
  0x00007f8ab911f185: mov    0x60(%rsp),%rbx
  0x00007f8ab911f18a: mov    0x68(%rsp),%rdx
  0x00007f8ab911f18f: mov    0x70(%rsp),%rcx
  0x00007f8ab911f194: mov    0x78(%rsp),%rax
  0x00007f8ab911f199: add    $0x80,%rsp
  0x00007f8ab911f1a0: add    $0x8,%rsp
  0x00007f8ab911f1a4: popfq  
  0x00007f8ab911f1a5: mov    %r13,%rsp
  0x00007f8ab911f1a8: pop    %rax
  0x00007f8ab911f1a9: mov    %rsp,%r13
  0x00007f8ab911f1ac: sub    $0x20,%rsp
  0x00007f8ab911f1b0: mov    %rax,(%rsp)
  0x00007f8ab911f1b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911f1b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911f1be: mov    0x40(%rbx),%rcx
  0x00007f8ab911f1c2: jmpq   *%rcx

AHE@0x00007f8ac80c52d0: 0xbb000000 i2c: 0x00007f8ab911f2a0 c2i: 0x00007f8ab911f3b8 c2iUV: 0x00007f8ab911f38b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f8ab911f3b8
  0x00007f8ab911f2a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911f2a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911f2ae: cmp    %r11,%rax
  0x00007f8ab911f2b1: jbe    0x00007f8ab911f2ca
  0x00007f8ab911f2b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911f2c1: cmp    %r11,%rax
  0x00007f8ab911f2c4: jb     0x00007f8ab911f367
  0x00007f8ab911f2ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911f2d4: cmp    %r11,%rax
  0x00007f8ab911f2d7: jbe    0x00007f8ab911f2f0
  0x00007f8ab911f2dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911f2e7: cmp    %r11,%rax
  0x00007f8ab911f2ea: jb     0x00007f8ab911f367
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911f2f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911f2f5: sub    $0x80,%rsp
  0x00007f8ab911f2fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911f301: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f306: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f30b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f310: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f315: mov    %rsi,0x48(%rsp)
  0x00007f8ab911f31a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911f31f: mov    %r8,0x38(%rsp)
  0x00007f8ab911f324: mov    %r9,0x30(%rsp)
  0x00007f8ab911f329: mov    %r10,0x28(%rsp)
  0x00007f8ab911f32e: mov    %r11,0x20(%rsp)
  0x00007f8ab911f333: mov    %r12,0x18(%rsp)
  0x00007f8ab911f338: mov    %r13,0x10(%rsp)
  0x00007f8ab911f33d: mov    %r14,0x8(%rsp)
  0x00007f8ab911f342: mov    %r15,(%rsp)
  0x00007f8ab911f346: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911f350: movabs $0x7f8ab911f2f0,%rsi
  0x00007f8ab911f35a: mov    %rsp,%rdx
  0x00007f8ab911f35d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f361: callq  0x00007f8aceddb9fa
  0x00007f8ab911f366: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911f367: mov    %rsp,%r11
  0x00007f8ab911f36a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f36e: push   %rax
  0x00007f8ab911f36f: mov    %r11,%rax
  0x00007f8ab911f372: mov    0x50(%rbx),%r11
  0x00007f8ab911f376: mov    0x10(%rax),%rsi
  0x00007f8ab911f37a: mov    0x8(%rax),%rdx
  0x00007f8ab911f37e: mov    %rbx,0x258(%r15)
  0x00007f8ab911f385: mov    %rbx,%rax
  0x00007f8ab911f388: jmpq   *%r11
  0x00007f8ab911f38b: mov    0x8(%rsi),%ebx
  0x00007f8ab911f38e: shl    $0x3,%rbx
  0x00007f8ab911f392: cmp    0x10(%rax),%rbx
  0x00007f8ab911f396: mov    0x8(%rax),%rbx
  0x00007f8ab911f39a: je     0x00007f8ab911f3a5
  0x00007f8ab911f3a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f3a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f3ad: je     0x00007f8ab911f4a8
  0x00007f8ab911f3b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f3b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f3c0: je     0x00007f8ab911f4a8
  0x00007f8ab911f3c6: mov    %rsp,%r13
  0x00007f8ab911f3c9: mov    (%rsp),%rax
  0x00007f8ab911f3cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f3d1: pushfq 
  0x00007f8ab911f3d2: sub    $0x8,%rsp
  0x00007f8ab911f3d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911f3db: sub    $0x80,%rsp
  0x00007f8ab911f3e2: mov    %rax,0x78(%rsp)
  0x00007f8ab911f3e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f3ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f3f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f3f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f3fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911f400: mov    %rdi,0x40(%rsp)
  0x00007f8ab911f405: mov    %r8,0x38(%rsp)
  0x00007f8ab911f40a: mov    %r9,0x30(%rsp)
  0x00007f8ab911f40f: mov    %r10,0x28(%rsp)
  0x00007f8ab911f414: mov    %r11,0x20(%rsp)
  0x00007f8ab911f419: mov    %r12,0x18(%rsp)
  0x00007f8ab911f41e: mov    %r13,0x10(%rsp)
  0x00007f8ab911f423: mov    %r14,0x8(%rsp)
  0x00007f8ab911f428: mov    %r15,(%rsp)
  0x00007f8ab911f42c: sub    $0x200,%rsp
  0x00007f8ab911f433: fxsave64 (%rsp)
  0x00007f8ab911f438: mov    %rbx,%rdi
  0x00007f8ab911f43b: mov    %rax,%rsi
  0x00007f8ab911f43e: callq  0x00007f8acef8bbca
  0x00007f8ab911f443: fxrstor64 (%rsp)
  0x00007f8ab911f448: add    $0x200,%rsp
  0x00007f8ab911f44f: mov    (%rsp),%r15
  0x00007f8ab911f453: mov    0x8(%rsp),%r14
  0x00007f8ab911f458: mov    0x10(%rsp),%r13
  0x00007f8ab911f45d: mov    0x18(%rsp),%r12
  0x00007f8ab911f462: mov    0x20(%rsp),%r11
  0x00007f8ab911f467: mov    0x28(%rsp),%r10
  0x00007f8ab911f46c: mov    0x30(%rsp),%r9
  0x00007f8ab911f471: mov    0x38(%rsp),%r8
  0x00007f8ab911f476: mov    0x40(%rsp),%rdi
  0x00007f8ab911f47b: mov    0x48(%rsp),%rsi
  0x00007f8ab911f480: mov    0x50(%rsp),%rbp
  0x00007f8ab911f485: mov    0x60(%rsp),%rbx
  0x00007f8ab911f48a: mov    0x68(%rsp),%rdx
  0x00007f8ab911f48f: mov    0x70(%rsp),%rcx
  0x00007f8ab911f494: mov    0x78(%rsp),%rax
  0x00007f8ab911f499: add    $0x80,%rsp
  0x00007f8ab911f4a0: add    $0x8,%rsp
  0x00007f8ab911f4a4: popfq  
  0x00007f8ab911f4a5: mov    %r13,%rsp
  0x00007f8ab911f4a8: pop    %rax
  0x00007f8ab911f4a9: mov    %rsp,%r13
  0x00007f8ab911f4ac: sub    $0x20,%rsp
  0x00007f8ab911f4b0: mov    %rax,(%rsp)
  0x00007f8ab911f4b4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911f4b9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911f4be: mov    0x40(%rbx),%rcx
  0x00007f8ab911f4c2: jmpq   *%rcx

AHE@0x00007f8ac80c5318: 0xbbbaabb0 i2c: 0x00007f8ab911f5a0 c2i: 0x00007f8ab911f6d5 c2iUV: 0x00007f8ab911f6a8
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/lang/ClassLoader;Ljava/security/ProtectionDomain;)Ljava/lang/Class; (607 bytes generated)
c2i argument handler starts at 0x7f8ab911f6d5
  0x00007f8ab911f5a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911f5a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911f5ae: cmp    %r11,%rax
  0x00007f8ab911f5b1: jbe    0x00007f8ab911f5ca
  0x00007f8ab911f5b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911f5c1: cmp    %r11,%rax
  0x00007f8ab911f5c4: jb     0x00007f8ab911f667
  0x00007f8ab911f5ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911f5d4: cmp    %r11,%rax
  0x00007f8ab911f5d7: jbe    0x00007f8ab911f5f0
  0x00007f8ab911f5dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911f5e7: cmp    %r11,%rax
  0x00007f8ab911f5ea: jb     0x00007f8ab911f667
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911f5f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911f5f5: sub    $0x80,%rsp
  0x00007f8ab911f5fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911f601: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f606: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f60b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f610: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f615: mov    %rsi,0x48(%rsp)
  0x00007f8ab911f61a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911f61f: mov    %r8,0x38(%rsp)
  0x00007f8ab911f624: mov    %r9,0x30(%rsp)
  0x00007f8ab911f629: mov    %r10,0x28(%rsp)
  0x00007f8ab911f62e: mov    %r11,0x20(%rsp)
  0x00007f8ab911f633: mov    %r12,0x18(%rsp)
  0x00007f8ab911f638: mov    %r13,0x10(%rsp)
  0x00007f8ab911f63d: mov    %r14,0x8(%rsp)
  0x00007f8ab911f642: mov    %r15,(%rsp)
  0x00007f8ab911f646: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911f650: movabs $0x7f8ab911f5f0,%rsi
  0x00007f8ab911f65a: mov    %rsp,%rdx
  0x00007f8ab911f65d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f661: callq  0x00007f8aceddb9fa
  0x00007f8ab911f666: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911f667: mov    %rsp,%r11
  0x00007f8ab911f66a: sub    $0x10,%rsp
  0x00007f8ab911f66e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f672: push   %rax
  0x00007f8ab911f673: mov    %r11,%rax
  0x00007f8ab911f676: mov    0x50(%rbx),%r11
  0x00007f8ab911f67a: mov    0x38(%rax),%rsi
  0x00007f8ab911f67e: mov    0x30(%rax),%rdx
  0x00007f8ab911f682: mov    0x28(%rax),%rcx
  0x00007f8ab911f686: mov    0x20(%rax),%r8d
  0x00007f8ab911f68a: mov    0x18(%rax),%r9d
  0x00007f8ab911f68e: mov    0x10(%rax),%rdi
  0x00007f8ab911f692: mov    0x8(%rax),%r13
  0x00007f8ab911f696: mov    %r13,0x8(%rsp)
  0x00007f8ab911f69b: mov    %rbx,0x258(%r15)
  0x00007f8ab911f6a2: mov    %rbx,%rax
  0x00007f8ab911f6a5: jmpq   *%r11
  0x00007f8ab911f6a8: mov    0x8(%rsi),%ebx
  0x00007f8ab911f6ab: shl    $0x3,%rbx
  0x00007f8ab911f6af: cmp    0x10(%rax),%rbx
  0x00007f8ab911f6b3: mov    0x8(%rax),%rbx
  0x00007f8ab911f6b7: je     0x00007f8ab911f6c2
  0x00007f8ab911f6bd: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f6c2: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f6ca: je     0x00007f8ab911f7c5
  0x00007f8ab911f6d0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f6d5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f6dd: je     0x00007f8ab911f7c5
  0x00007f8ab911f6e3: mov    %rsp,%r13
  0x00007f8ab911f6e6: mov    (%rsp),%rax
  0x00007f8ab911f6ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f6ee: pushfq 
  0x00007f8ab911f6ef: sub    $0x8,%rsp
  0x00007f8ab911f6f3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911f6f8: sub    $0x80,%rsp
  0x00007f8ab911f6ff: mov    %rax,0x78(%rsp)
  0x00007f8ab911f704: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f709: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f70e: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f713: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f718: mov    %rsi,0x48(%rsp)
  0x00007f8ab911f71d: mov    %rdi,0x40(%rsp)
  0x00007f8ab911f722: mov    %r8,0x38(%rsp)
  0x00007f8ab911f727: mov    %r9,0x30(%rsp)
  0x00007f8ab911f72c: mov    %r10,0x28(%rsp)
  0x00007f8ab911f731: mov    %r11,0x20(%rsp)
  0x00007f8ab911f736: mov    %r12,0x18(%rsp)
  0x00007f8ab911f73b: mov    %r13,0x10(%rsp)
  0x00007f8ab911f740: mov    %r14,0x8(%rsp)
  0x00007f8ab911f745: mov    %r15,(%rsp)
  0x00007f8ab911f749: sub    $0x200,%rsp
  0x00007f8ab911f750: fxsave64 (%rsp)
  0x00007f8ab911f755: mov    %rbx,%rdi
  0x00007f8ab911f758: mov    %rax,%rsi
  0x00007f8ab911f75b: callq  0x00007f8acef8bbca
  0x00007f8ab911f760: fxrstor64 (%rsp)
  0x00007f8ab911f765: add    $0x200,%rsp
  0x00007f8ab911f76c: mov    (%rsp),%r15
  0x00007f8ab911f770: mov    0x8(%rsp),%r14
  0x00007f8ab911f775: mov    0x10(%rsp),%r13
  0x00007f8ab911f77a: mov    0x18(%rsp),%r12
  0x00007f8ab911f77f: mov    0x20(%rsp),%r11
  0x00007f8ab911f784: mov    0x28(%rsp),%r10
  0x00007f8ab911f789: mov    0x30(%rsp),%r9
  0x00007f8ab911f78e: mov    0x38(%rsp),%r8
  0x00007f8ab911f793: mov    0x40(%rsp),%rdi
  0x00007f8ab911f798: mov    0x48(%rsp),%rsi
  0x00007f8ab911f79d: mov    0x50(%rsp),%rbp
  0x00007f8ab911f7a2: mov    0x60(%rsp),%rbx
  0x00007f8ab911f7a7: mov    0x68(%rsp),%rdx
  0x00007f8ab911f7ac: mov    0x70(%rsp),%rcx
  0x00007f8ab911f7b1: mov    0x78(%rsp),%rax
  0x00007f8ab911f7b6: add    $0x80,%rsp
  0x00007f8ab911f7bd: add    $0x8,%rsp
  0x00007f8ab911f7c1: popfq  
  0x00007f8ab911f7c2: mov    %r13,%rsp
  0x00007f8ab911f7c5: pop    %rax
  0x00007f8ab911f7c6: mov    %rsp,%r13
  0x00007f8ab911f7c9: sub    $0x40,%rsp
  0x00007f8ab911f7cd: mov    %rax,(%rsp)
  0x00007f8ab911f7d1: mov    %rsi,0x38(%rsp)
  0x00007f8ab911f7d6: mov    %rdx,0x30(%rsp)
  0x00007f8ab911f7db: mov    %rcx,0x28(%rsp)
  0x00007f8ab911f7e0: mov    %r8d,0x20(%rsp)
  0x00007f8ab911f7e5: mov    %r9d,0x18(%rsp)
  0x00007f8ab911f7ea: mov    %rdi,0x10(%rsp)
  0x00007f8ab911f7ef: mov    0x40(%rsp),%rax
  0x00007f8ab911f7f4: mov    %rax,0x8(%rsp)
  0x00007f8ab911f7f9: mov    0x40(%rbx),%rcx
  0x00007f8ab911f7fd: jmpq   *%rcx

AHE@0x00007f8ac80c5360: 0xbb000000 i2c: 0x00007f8ab911f8a0 c2i: 0x00007f8ab911f9b8 c2iUV: 0x00007f8ab911f98b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab911f9b8
  0x00007f8ab911f8a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911f8a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911f8ae: cmp    %r11,%rax
  0x00007f8ab911f8b1: jbe    0x00007f8ab911f8ca
  0x00007f8ab911f8b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911f8c1: cmp    %r11,%rax
  0x00007f8ab911f8c4: jb     0x00007f8ab911f967
  0x00007f8ab911f8ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911f8d4: cmp    %r11,%rax
  0x00007f8ab911f8d7: jbe    0x00007f8ab911f8f0
  0x00007f8ab911f8dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911f8e7: cmp    %r11,%rax
  0x00007f8ab911f8ea: jb     0x00007f8ab911f967
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911f8f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911f8f5: sub    $0x80,%rsp
  0x00007f8ab911f8fc: mov    %rax,0x78(%rsp)
  0x00007f8ab911f901: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f906: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f90b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f910: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f915: mov    %rsi,0x48(%rsp)
  0x00007f8ab911f91a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911f91f: mov    %r8,0x38(%rsp)
  0x00007f8ab911f924: mov    %r9,0x30(%rsp)
  0x00007f8ab911f929: mov    %r10,0x28(%rsp)
  0x00007f8ab911f92e: mov    %r11,0x20(%rsp)
  0x00007f8ab911f933: mov    %r12,0x18(%rsp)
  0x00007f8ab911f938: mov    %r13,0x10(%rsp)
  0x00007f8ab911f93d: mov    %r14,0x8(%rsp)
  0x00007f8ab911f942: mov    %r15,(%rsp)
  0x00007f8ab911f946: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911f950: movabs $0x7f8ab911f8f0,%rsi
  0x00007f8ab911f95a: mov    %rsp,%rdx
  0x00007f8ab911f95d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f961: callq  0x00007f8aceddb9fa
  0x00007f8ab911f966: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911f967: mov    %rsp,%r11
  0x00007f8ab911f96a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f96e: push   %rax
  0x00007f8ab911f96f: mov    %r11,%rax
  0x00007f8ab911f972: mov    0x50(%rbx),%r11
  0x00007f8ab911f976: mov    0x10(%rax),%rsi
  0x00007f8ab911f97a: mov    0x8(%rax),%rdx
  0x00007f8ab911f97e: mov    %rbx,0x258(%r15)
  0x00007f8ab911f985: mov    %rbx,%rax
  0x00007f8ab911f988: jmpq   *%r11
  0x00007f8ab911f98b: mov    0x8(%rsi),%ebx
  0x00007f8ab911f98e: shl    $0x3,%rbx
  0x00007f8ab911f992: cmp    0x10(%rax),%rbx
  0x00007f8ab911f996: mov    0x8(%rax),%rbx
  0x00007f8ab911f99a: je     0x00007f8ab911f9a5
  0x00007f8ab911f9a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f9a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f9ad: je     0x00007f8ab911faa8
  0x00007f8ab911f9b3: jmpq   0x00007f8ab9105c40
  0x00007f8ab911f9b8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911f9c0: je     0x00007f8ab911faa8
  0x00007f8ab911f9c6: mov    %rsp,%r13
  0x00007f8ab911f9c9: mov    (%rsp),%rax
  0x00007f8ab911f9cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911f9d1: pushfq 
  0x00007f8ab911f9d2: sub    $0x8,%rsp
  0x00007f8ab911f9d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911f9db: sub    $0x80,%rsp
  0x00007f8ab911f9e2: mov    %rax,0x78(%rsp)
  0x00007f8ab911f9e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab911f9ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab911f9f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab911f9f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab911f9fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab911fa00: mov    %rdi,0x40(%rsp)
  0x00007f8ab911fa05: mov    %r8,0x38(%rsp)
  0x00007f8ab911fa0a: mov    %r9,0x30(%rsp)
  0x00007f8ab911fa0f: mov    %r10,0x28(%rsp)
  0x00007f8ab911fa14: mov    %r11,0x20(%rsp)
  0x00007f8ab911fa19: mov    %r12,0x18(%rsp)
  0x00007f8ab911fa1e: mov    %r13,0x10(%rsp)
  0x00007f8ab911fa23: mov    %r14,0x8(%rsp)
  0x00007f8ab911fa28: mov    %r15,(%rsp)
  0x00007f8ab911fa2c: sub    $0x200,%rsp
  0x00007f8ab911fa33: fxsave64 (%rsp)
  0x00007f8ab911fa38: mov    %rbx,%rdi
  0x00007f8ab911fa3b: mov    %rax,%rsi
  0x00007f8ab911fa3e: callq  0x00007f8acef8bbca
  0x00007f8ab911fa43: fxrstor64 (%rsp)
  0x00007f8ab911fa48: add    $0x200,%rsp
  0x00007f8ab911fa4f: mov    (%rsp),%r15
  0x00007f8ab911fa53: mov    0x8(%rsp),%r14
  0x00007f8ab911fa58: mov    0x10(%rsp),%r13
  0x00007f8ab911fa5d: mov    0x18(%rsp),%r12
  0x00007f8ab911fa62: mov    0x20(%rsp),%r11
  0x00007f8ab911fa67: mov    0x28(%rsp),%r10
  0x00007f8ab911fa6c: mov    0x30(%rsp),%r9
  0x00007f8ab911fa71: mov    0x38(%rsp),%r8
  0x00007f8ab911fa76: mov    0x40(%rsp),%rdi
  0x00007f8ab911fa7b: mov    0x48(%rsp),%rsi
  0x00007f8ab911fa80: mov    0x50(%rsp),%rbp
  0x00007f8ab911fa85: mov    0x60(%rsp),%rbx
  0x00007f8ab911fa8a: mov    0x68(%rsp),%rdx
  0x00007f8ab911fa8f: mov    0x70(%rsp),%rcx
  0x00007f8ab911fa94: mov    0x78(%rsp),%rax
  0x00007f8ab911fa99: add    $0x80,%rsp
  0x00007f8ab911faa0: add    $0x8,%rsp
  0x00007f8ab911faa4: popfq  
  0x00007f8ab911faa5: mov    %r13,%rsp
  0x00007f8ab911faa8: pop    %rax
  0x00007f8ab911faa9: mov    %rsp,%r13
  0x00007f8ab911faac: sub    $0x20,%rsp
  0x00007f8ab911fab0: mov    %rax,(%rsp)
  0x00007f8ab911fab4: mov    %rsi,0x10(%rsp)
  0x00007f8ab911fab9: mov    %rdx,0x8(%rsp)
  0x00007f8ab911fabe: mov    0x40(%rbx),%rcx
  0x00007f8ab911fac2: jmpq   *%rcx

AHE@0x00007f8ac80c53a8: 0x i2c: 0x00007f8ab911fba0 c2i: 0x00007f8ab911fcb0 c2iUV: 0x00007f8ab911fc83
i2c argument handler #0 for: static ()Lsun/misc/Unsafe; (530 bytes generated)
c2i argument handler starts at 0x7f8ab911fcb0
  0x00007f8ab911fba0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911fba4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911fbae: cmp    %r11,%rax
  0x00007f8ab911fbb1: jbe    0x00007f8ab911fbca
  0x00007f8ab911fbb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911fbc1: cmp    %r11,%rax
  0x00007f8ab911fbc4: jb     0x00007f8ab911fc67
  0x00007f8ab911fbca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911fbd4: cmp    %r11,%rax
  0x00007f8ab911fbd7: jbe    0x00007f8ab911fbf0
  0x00007f8ab911fbdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911fbe7: cmp    %r11,%rax
  0x00007f8ab911fbea: jb     0x00007f8ab911fc67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911fbf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911fbf5: sub    $0x80,%rsp
  0x00007f8ab911fbfc: mov    %rax,0x78(%rsp)
  0x00007f8ab911fc01: mov    %rcx,0x70(%rsp)
  0x00007f8ab911fc06: mov    %rdx,0x68(%rsp)
  0x00007f8ab911fc0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab911fc10: mov    %rbp,0x50(%rsp)
  0x00007f8ab911fc15: mov    %rsi,0x48(%rsp)
  0x00007f8ab911fc1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab911fc1f: mov    %r8,0x38(%rsp)
  0x00007f8ab911fc24: mov    %r9,0x30(%rsp)
  0x00007f8ab911fc29: mov    %r10,0x28(%rsp)
  0x00007f8ab911fc2e: mov    %r11,0x20(%rsp)
  0x00007f8ab911fc33: mov    %r12,0x18(%rsp)
  0x00007f8ab911fc38: mov    %r13,0x10(%rsp)
  0x00007f8ab911fc3d: mov    %r14,0x8(%rsp)
  0x00007f8ab911fc42: mov    %r15,(%rsp)
  0x00007f8ab911fc46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911fc50: movabs $0x7f8ab911fbf0,%rsi
  0x00007f8ab911fc5a: mov    %rsp,%rdx
  0x00007f8ab911fc5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911fc61: callq  0x00007f8aceddb9fa
  0x00007f8ab911fc66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911fc67: mov    %rsp,%r11
  0x00007f8ab911fc6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911fc6e: push   %rax
  0x00007f8ab911fc6f: mov    %r11,%rax
  0x00007f8ab911fc72: mov    0x50(%rbx),%r11
  0x00007f8ab911fc76: mov    %rbx,0x258(%r15)
  0x00007f8ab911fc7d: mov    %rbx,%rax
  0x00007f8ab911fc80: jmpq   *%r11
  0x00007f8ab911fc83: mov    0x8(%rsi),%ebx
  0x00007f8ab911fc86: shl    $0x3,%rbx
  0x00007f8ab911fc8a: cmp    0x10(%rax),%rbx
  0x00007f8ab911fc8e: mov    0x8(%rax),%rbx
  0x00007f8ab911fc92: je     0x00007f8ab911fc9d
  0x00007f8ab911fc98: jmpq   0x00007f8ab9105c40
  0x00007f8ab911fc9d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911fca5: je     0x00007f8ab911fda0
  0x00007f8ab911fcab: jmpq   0x00007f8ab9105c40
  0x00007f8ab911fcb0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911fcb8: je     0x00007f8ab911fda0
  0x00007f8ab911fcbe: mov    %rsp,%r13
  0x00007f8ab911fcc1: mov    (%rsp),%rax
  0x00007f8ab911fcc5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911fcc9: pushfq 
  0x00007f8ab911fcca: sub    $0x8,%rsp
  0x00007f8ab911fcce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911fcd3: sub    $0x80,%rsp
  0x00007f8ab911fcda: mov    %rax,0x78(%rsp)
  0x00007f8ab911fcdf: mov    %rcx,0x70(%rsp)
  0x00007f8ab911fce4: mov    %rdx,0x68(%rsp)
  0x00007f8ab911fce9: mov    %rbx,0x60(%rsp)
  0x00007f8ab911fcee: mov    %rbp,0x50(%rsp)
  0x00007f8ab911fcf3: mov    %rsi,0x48(%rsp)
  0x00007f8ab911fcf8: mov    %rdi,0x40(%rsp)
  0x00007f8ab911fcfd: mov    %r8,0x38(%rsp)
  0x00007f8ab911fd02: mov    %r9,0x30(%rsp)
  0x00007f8ab911fd07: mov    %r10,0x28(%rsp)
  0x00007f8ab911fd0c: mov    %r11,0x20(%rsp)
  0x00007f8ab911fd11: mov    %r12,0x18(%rsp)
  0x00007f8ab911fd16: mov    %r13,0x10(%rsp)
  0x00007f8ab911fd1b: mov    %r14,0x8(%rsp)
  0x00007f8ab911fd20: mov    %r15,(%rsp)
  0x00007f8ab911fd24: sub    $0x200,%rsp
  0x00007f8ab911fd2b: fxsave64 (%rsp)
  0x00007f8ab911fd30: mov    %rbx,%rdi
  0x00007f8ab911fd33: mov    %rax,%rsi
  0x00007f8ab911fd36: callq  0x00007f8acef8bbca
  0x00007f8ab911fd3b: fxrstor64 (%rsp)
  0x00007f8ab911fd40: add    $0x200,%rsp
  0x00007f8ab911fd47: mov    (%rsp),%r15
  0x00007f8ab911fd4b: mov    0x8(%rsp),%r14
  0x00007f8ab911fd50: mov    0x10(%rsp),%r13
  0x00007f8ab911fd55: mov    0x18(%rsp),%r12
  0x00007f8ab911fd5a: mov    0x20(%rsp),%r11
  0x00007f8ab911fd5f: mov    0x28(%rsp),%r10
  0x00007f8ab911fd64: mov    0x30(%rsp),%r9
  0x00007f8ab911fd69: mov    0x38(%rsp),%r8
  0x00007f8ab911fd6e: mov    0x40(%rsp),%rdi
  0x00007f8ab911fd73: mov    0x48(%rsp),%rsi
  0x00007f8ab911fd78: mov    0x50(%rsp),%rbp
  0x00007f8ab911fd7d: mov    0x60(%rsp),%rbx
  0x00007f8ab911fd82: mov    0x68(%rsp),%rdx
  0x00007f8ab911fd87: mov    0x70(%rsp),%rcx
  0x00007f8ab911fd8c: mov    0x78(%rsp),%rax
  0x00007f8ab911fd91: add    $0x80,%rsp
  0x00007f8ab911fd98: add    $0x8,%rsp
  0x00007f8ab911fd9c: popfq  
  0x00007f8ab911fd9d: mov    %r13,%rsp
  0x00007f8ab911fda0: pop    %rax
  0x00007f8ab911fda1: mov    %rsp,%r13
  0x00007f8ab911fda4: sub    $0x10,%rsp
  0x00007f8ab911fda8: mov    %rax,(%rsp)
  0x00007f8ab911fdac: mov    0x40(%rbx),%rcx
  0x00007f8ab911fdb0: jmpq   *%rcx

AHE@0x00007f8ac80c53f0: 0x i2c: 0x00007f8ab911fe60 c2i: 0x00007f8ab911ff70 c2iUV: 0x00007f8ab911ff43
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab911ff70
  0x00007f8ab911fe60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab911fe64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab911fe6e: cmp    %r11,%rax
  0x00007f8ab911fe71: jbe    0x00007f8ab911fe8a
  0x00007f8ab911fe77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab911fe81: cmp    %r11,%rax
  0x00007f8ab911fe84: jb     0x00007f8ab911ff27
  0x00007f8ab911fe8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab911fe94: cmp    %r11,%rax
  0x00007f8ab911fe97: jbe    0x00007f8ab911feb0
  0x00007f8ab911fe9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab911fea7: cmp    %r11,%rax
  0x00007f8ab911feaa: jb     0x00007f8ab911ff27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab911feb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911feb5: sub    $0x80,%rsp
  0x00007f8ab911febc: mov    %rax,0x78(%rsp)
  0x00007f8ab911fec1: mov    %rcx,0x70(%rsp)
  0x00007f8ab911fec6: mov    %rdx,0x68(%rsp)
  0x00007f8ab911fecb: mov    %rbx,0x60(%rsp)
  0x00007f8ab911fed0: mov    %rbp,0x50(%rsp)
  0x00007f8ab911fed5: mov    %rsi,0x48(%rsp)
  0x00007f8ab911feda: mov    %rdi,0x40(%rsp)
  0x00007f8ab911fedf: mov    %r8,0x38(%rsp)
  0x00007f8ab911fee4: mov    %r9,0x30(%rsp)
  0x00007f8ab911fee9: mov    %r10,0x28(%rsp)
  0x00007f8ab911feee: mov    %r11,0x20(%rsp)
  0x00007f8ab911fef3: mov    %r12,0x18(%rsp)
  0x00007f8ab911fef8: mov    %r13,0x10(%rsp)
  0x00007f8ab911fefd: mov    %r14,0x8(%rsp)
  0x00007f8ab911ff02: mov    %r15,(%rsp)
  0x00007f8ab911ff06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab911ff10: movabs $0x7f8ab911feb0,%rsi
  0x00007f8ab911ff1a: mov    %rsp,%rdx
  0x00007f8ab911ff1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ff21: callq  0x00007f8aceddb9fa
  0x00007f8ab911ff26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab911ff27: mov    %rsp,%r11
  0x00007f8ab911ff2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ff2e: push   %rax
  0x00007f8ab911ff2f: mov    %r11,%rax
  0x00007f8ab911ff32: mov    0x50(%rbx),%r11
  0x00007f8ab911ff36: mov    %rbx,0x258(%r15)
  0x00007f8ab911ff3d: mov    %rbx,%rax
  0x00007f8ab911ff40: jmpq   *%r11
  0x00007f8ab911ff43: mov    0x8(%rsi),%ebx
  0x00007f8ab911ff46: shl    $0x3,%rbx
  0x00007f8ab911ff4a: cmp    0x10(%rax),%rbx
  0x00007f8ab911ff4e: mov    0x8(%rax),%rbx
  0x00007f8ab911ff52: je     0x00007f8ab911ff5d
  0x00007f8ab911ff58: jmpq   0x00007f8ab9105c40
  0x00007f8ab911ff5d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911ff65: je     0x00007f8ab9120060
  0x00007f8ab911ff6b: jmpq   0x00007f8ab9105c40
  0x00007f8ab911ff70: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab911ff78: je     0x00007f8ab9120060
  0x00007f8ab911ff7e: mov    %rsp,%r13
  0x00007f8ab911ff81: mov    (%rsp),%rax
  0x00007f8ab911ff85: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab911ff89: pushfq 
  0x00007f8ab911ff8a: sub    $0x8,%rsp
  0x00007f8ab911ff8e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab911ff93: sub    $0x80,%rsp
  0x00007f8ab911ff9a: mov    %rax,0x78(%rsp)
  0x00007f8ab911ff9f: mov    %rcx,0x70(%rsp)
  0x00007f8ab911ffa4: mov    %rdx,0x68(%rsp)
  0x00007f8ab911ffa9: mov    %rbx,0x60(%rsp)
  0x00007f8ab911ffae: mov    %rbp,0x50(%rsp)
  0x00007f8ab911ffb3: mov    %rsi,0x48(%rsp)
  0x00007f8ab911ffb8: mov    %rdi,0x40(%rsp)
  0x00007f8ab911ffbd: mov    %r8,0x38(%rsp)
  0x00007f8ab911ffc2: mov    %r9,0x30(%rsp)
  0x00007f8ab911ffc7: mov    %r10,0x28(%rsp)
  0x00007f8ab911ffcc: mov    %r11,0x20(%rsp)
  0x00007f8ab911ffd1: mov    %r12,0x18(%rsp)
  0x00007f8ab911ffd6: mov    %r13,0x10(%rsp)
  0x00007f8ab911ffdb: mov    %r14,0x8(%rsp)
  0x00007f8ab911ffe0: mov    %r15,(%rsp)
  0x00007f8ab911ffe4: sub    $0x200,%rsp
  0x00007f8ab911ffeb: fxsave64 (%rsp)
  0x00007f8ab911fff0: mov    %rbx,%rdi
  0x00007f8ab911fff3: mov    %rax,%rsi
  0x00007f8ab911fff6: callq  0x00007f8acef8bbca
  0x00007f8ab911fffb: fxrstor64 (%rsp)
  0x00007f8ab9120000: add    $0x200,%rsp
  0x00007f8ab9120007: mov    (%rsp),%r15
  0x00007f8ab912000b: mov    0x8(%rsp),%r14
  0x00007f8ab9120010: mov    0x10(%rsp),%r13
  0x00007f8ab9120015: mov    0x18(%rsp),%r12
  0x00007f8ab912001a: mov    0x20(%rsp),%r11
  0x00007f8ab912001f: mov    0x28(%rsp),%r10
  0x00007f8ab9120024: mov    0x30(%rsp),%r9
  0x00007f8ab9120029: mov    0x38(%rsp),%r8
  0x00007f8ab912002e: mov    0x40(%rsp),%rdi
  0x00007f8ab9120033: mov    0x48(%rsp),%rsi
  0x00007f8ab9120038: mov    0x50(%rsp),%rbp
  0x00007f8ab912003d: mov    0x60(%rsp),%rbx
  0x00007f8ab9120042: mov    0x68(%rsp),%rdx
  0x00007f8ab9120047: mov    0x70(%rsp),%rcx
  0x00007f8ab912004c: mov    0x78(%rsp),%rax
  0x00007f8ab9120051: add    $0x80,%rsp
  0x00007f8ab9120058: add    $0x8,%rsp
  0x00007f8ab912005c: popfq  
  0x00007f8ab912005d: mov    %r13,%rsp
  0x00007f8ab9120060: pop    %rax
  0x00007f8ab9120061: mov    %rsp,%r13
  0x00007f8ab9120064: sub    $0x10,%rsp
  0x00007f8ab9120068: mov    %rax,(%rsp)
  0x00007f8ab912006c: mov    0x40(%rbx),%rcx
  0x00007f8ab9120070: jmpq   *%rcx

AHE@0x00007f8ac80c5438: 0xbbbeb000 i2c: 0x00007f8ab9120120 c2i: 0x00007f8ab9120240 c2iUV: 0x00007f8ab9120213
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)Ljava/lang/Object; (581 bytes generated)
c2i argument handler starts at 0x7f8ab9120240
  0x00007f8ab9120120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9120124: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912012e: cmp    %r11,%rax
  0x00007f8ab9120131: jbe    0x00007f8ab912014a
  0x00007f8ab9120137: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9120141: cmp    %r11,%rax
  0x00007f8ab9120144: jb     0x00007f8ab91201e7
  0x00007f8ab912014a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9120154: cmp    %r11,%rax
  0x00007f8ab9120157: jbe    0x00007f8ab9120170
  0x00007f8ab912015d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9120167: cmp    %r11,%rax
  0x00007f8ab912016a: jb     0x00007f8ab91201e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9120170: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120175: sub    $0x80,%rsp
  0x00007f8ab912017c: mov    %rax,0x78(%rsp)
  0x00007f8ab9120181: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120186: mov    %rdx,0x68(%rsp)
  0x00007f8ab912018b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9120190: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120195: mov    %rsi,0x48(%rsp)
  0x00007f8ab912019a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912019f: mov    %r8,0x38(%rsp)
  0x00007f8ab91201a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91201a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91201ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91201b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91201b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91201bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91201c2: mov    %r15,(%rsp)
  0x00007f8ab91201c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91201d0: movabs $0x7f8ab9120170,%rsi
  0x00007f8ab91201da: mov    %rsp,%rdx
  0x00007f8ab91201dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91201e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91201e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91201e7: mov    %rsp,%r11
  0x00007f8ab91201ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91201ee: push   %rax
  0x00007f8ab91201ef: mov    %r11,%rax
  0x00007f8ab91201f2: mov    0x50(%rbx),%r11
  0x00007f8ab91201f6: mov    0x28(%rax),%rsi
  0x00007f8ab91201fa: mov    0x20(%rax),%rdx
  0x00007f8ab91201fe: mov    0x10(%rax),%rcx
  0x00007f8ab9120202: mov    0x8(%rax),%r8
  0x00007f8ab9120206: mov    %rbx,0x258(%r15)
  0x00007f8ab912020d: mov    %rbx,%rax
  0x00007f8ab9120210: jmpq   *%r11
  0x00007f8ab9120213: mov    0x8(%rsi),%ebx
  0x00007f8ab9120216: shl    $0x3,%rbx
  0x00007f8ab912021a: cmp    0x10(%rax),%rbx
  0x00007f8ab912021e: mov    0x8(%rax),%rbx
  0x00007f8ab9120222: je     0x00007f8ab912022d
  0x00007f8ab9120228: jmpq   0x00007f8ab9105c40
  0x00007f8ab912022d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120235: je     0x00007f8ab9120330
  0x00007f8ab912023b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9120240: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120248: je     0x00007f8ab9120330
  0x00007f8ab912024e: mov    %rsp,%r13
  0x00007f8ab9120251: mov    (%rsp),%rax
  0x00007f8ab9120255: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120259: pushfq 
  0x00007f8ab912025a: sub    $0x8,%rsp
  0x00007f8ab912025e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120263: sub    $0x80,%rsp
  0x00007f8ab912026a: mov    %rax,0x78(%rsp)
  0x00007f8ab912026f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120274: mov    %rdx,0x68(%rsp)
  0x00007f8ab9120279: mov    %rbx,0x60(%rsp)
  0x00007f8ab912027e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120283: mov    %rsi,0x48(%rsp)
  0x00007f8ab9120288: mov    %rdi,0x40(%rsp)
  0x00007f8ab912028d: mov    %r8,0x38(%rsp)
  0x00007f8ab9120292: mov    %r9,0x30(%rsp)
  0x00007f8ab9120297: mov    %r10,0x28(%rsp)
  0x00007f8ab912029c: mov    %r11,0x20(%rsp)
  0x00007f8ab91202a1: mov    %r12,0x18(%rsp)
  0x00007f8ab91202a6: mov    %r13,0x10(%rsp)
  0x00007f8ab91202ab: mov    %r14,0x8(%rsp)
  0x00007f8ab91202b0: mov    %r15,(%rsp)
  0x00007f8ab91202b4: sub    $0x200,%rsp
  0x00007f8ab91202bb: fxsave64 (%rsp)
  0x00007f8ab91202c0: mov    %rbx,%rdi
  0x00007f8ab91202c3: mov    %rax,%rsi
  0x00007f8ab91202c6: callq  0x00007f8acef8bbca
  0x00007f8ab91202cb: fxrstor64 (%rsp)
  0x00007f8ab91202d0: add    $0x200,%rsp
  0x00007f8ab91202d7: mov    (%rsp),%r15
  0x00007f8ab91202db: mov    0x8(%rsp),%r14
  0x00007f8ab91202e0: mov    0x10(%rsp),%r13
  0x00007f8ab91202e5: mov    0x18(%rsp),%r12
  0x00007f8ab91202ea: mov    0x20(%rsp),%r11
  0x00007f8ab91202ef: mov    0x28(%rsp),%r10
  0x00007f8ab91202f4: mov    0x30(%rsp),%r9
  0x00007f8ab91202f9: mov    0x38(%rsp),%r8
  0x00007f8ab91202fe: mov    0x40(%rsp),%rdi
  0x00007f8ab9120303: mov    0x48(%rsp),%rsi
  0x00007f8ab9120308: mov    0x50(%rsp),%rbp
  0x00007f8ab912030d: mov    0x60(%rsp),%rbx
  0x00007f8ab9120312: mov    0x68(%rsp),%rdx
  0x00007f8ab9120317: mov    0x70(%rsp),%rcx
  0x00007f8ab912031c: mov    0x78(%rsp),%rax
  0x00007f8ab9120321: add    $0x80,%rsp
  0x00007f8ab9120328: add    $0x8,%rsp
  0x00007f8ab912032c: popfq  
  0x00007f8ab912032d: mov    %r13,%rsp
  0x00007f8ab9120330: pop    %rax
  0x00007f8ab9120331: mov    %rsp,%r13
  0x00007f8ab9120334: sub    $0x30,%rsp
  0x00007f8ab9120338: mov    %rax,(%rsp)
  0x00007f8ab912033c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9120341: mov    %rdx,0x20(%rsp)
  0x00007f8ab9120346: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9120350: mov    %rax,0x18(%rsp)
  0x00007f8ab9120355: mov    %rcx,0x10(%rsp)
  0x00007f8ab912035a: mov    %r8,0x8(%rsp)
  0x00007f8ab912035f: mov    0x40(%rbx),%rcx
  0x00007f8ab9120363: jmpq   *%rcx

AHE@0x00007f8ac80c5480: 0xbbbebe00 i2c: 0x00007f8ab9120420 c2i: 0x00007f8ab9120540 c2iUV: 0x00007f8ab9120513
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)J (596 bytes generated)
c2i argument handler starts at 0x7f8ab9120540
  0x00007f8ab9120420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9120424: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912042e: cmp    %r11,%rax
  0x00007f8ab9120431: jbe    0x00007f8ab912044a
  0x00007f8ab9120437: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9120441: cmp    %r11,%rax
  0x00007f8ab9120444: jb     0x00007f8ab91204e7
  0x00007f8ab912044a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9120454: cmp    %r11,%rax
  0x00007f8ab9120457: jbe    0x00007f8ab9120470
  0x00007f8ab912045d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9120467: cmp    %r11,%rax
  0x00007f8ab912046a: jb     0x00007f8ab91204e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9120470: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120475: sub    $0x80,%rsp
  0x00007f8ab912047c: mov    %rax,0x78(%rsp)
  0x00007f8ab9120481: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120486: mov    %rdx,0x68(%rsp)
  0x00007f8ab912048b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9120490: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120495: mov    %rsi,0x48(%rsp)
  0x00007f8ab912049a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912049f: mov    %r8,0x38(%rsp)
  0x00007f8ab91204a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91204a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91204ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91204b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91204b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91204bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91204c2: mov    %r15,(%rsp)
  0x00007f8ab91204c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91204d0: movabs $0x7f8ab9120470,%rsi
  0x00007f8ab91204da: mov    %rsp,%rdx
  0x00007f8ab91204dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91204e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91204e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91204e7: mov    %rsp,%r11
  0x00007f8ab91204ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91204ee: push   %rax
  0x00007f8ab91204ef: mov    %r11,%rax
  0x00007f8ab91204f2: mov    0x50(%rbx),%r11
  0x00007f8ab91204f6: mov    0x30(%rax),%rsi
  0x00007f8ab91204fa: mov    0x28(%rax),%rdx
  0x00007f8ab91204fe: mov    0x18(%rax),%rcx
  0x00007f8ab9120502: mov    0x8(%rax),%r8
  0x00007f8ab9120506: mov    %rbx,0x258(%r15)
  0x00007f8ab912050d: mov    %rbx,%rax
  0x00007f8ab9120510: jmpq   *%r11
  0x00007f8ab9120513: mov    0x8(%rsi),%ebx
  0x00007f8ab9120516: shl    $0x3,%rbx
  0x00007f8ab912051a: cmp    0x10(%rax),%rbx
  0x00007f8ab912051e: mov    0x8(%rax),%rbx
  0x00007f8ab9120522: je     0x00007f8ab912052d
  0x00007f8ab9120528: jmpq   0x00007f8ab9105c40
  0x00007f8ab912052d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120535: je     0x00007f8ab9120630
  0x00007f8ab912053b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9120540: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120548: je     0x00007f8ab9120630
  0x00007f8ab912054e: mov    %rsp,%r13
  0x00007f8ab9120551: mov    (%rsp),%rax
  0x00007f8ab9120555: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120559: pushfq 
  0x00007f8ab912055a: sub    $0x8,%rsp
  0x00007f8ab912055e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120563: sub    $0x80,%rsp
  0x00007f8ab912056a: mov    %rax,0x78(%rsp)
  0x00007f8ab912056f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120574: mov    %rdx,0x68(%rsp)
  0x00007f8ab9120579: mov    %rbx,0x60(%rsp)
  0x00007f8ab912057e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120583: mov    %rsi,0x48(%rsp)
  0x00007f8ab9120588: mov    %rdi,0x40(%rsp)
  0x00007f8ab912058d: mov    %r8,0x38(%rsp)
  0x00007f8ab9120592: mov    %r9,0x30(%rsp)
  0x00007f8ab9120597: mov    %r10,0x28(%rsp)
  0x00007f8ab912059c: mov    %r11,0x20(%rsp)
  0x00007f8ab91205a1: mov    %r12,0x18(%rsp)
  0x00007f8ab91205a6: mov    %r13,0x10(%rsp)
  0x00007f8ab91205ab: mov    %r14,0x8(%rsp)
  0x00007f8ab91205b0: mov    %r15,(%rsp)
  0x00007f8ab91205b4: sub    $0x200,%rsp
  0x00007f8ab91205bb: fxsave64 (%rsp)
  0x00007f8ab91205c0: mov    %rbx,%rdi
  0x00007f8ab91205c3: mov    %rax,%rsi
  0x00007f8ab91205c6: callq  0x00007f8acef8bbca
  0x00007f8ab91205cb: fxrstor64 (%rsp)
  0x00007f8ab91205d0: add    $0x200,%rsp
  0x00007f8ab91205d7: mov    (%rsp),%r15
  0x00007f8ab91205db: mov    0x8(%rsp),%r14
  0x00007f8ab91205e0: mov    0x10(%rsp),%r13
  0x00007f8ab91205e5: mov    0x18(%rsp),%r12
  0x00007f8ab91205ea: mov    0x20(%rsp),%r11
  0x00007f8ab91205ef: mov    0x28(%rsp),%r10
  0x00007f8ab91205f4: mov    0x30(%rsp),%r9
  0x00007f8ab91205f9: mov    0x38(%rsp),%r8
  0x00007f8ab91205fe: mov    0x40(%rsp),%rdi
  0x00007f8ab9120603: mov    0x48(%rsp),%rsi
  0x00007f8ab9120608: mov    0x50(%rsp),%rbp
  0x00007f8ab912060d: mov    0x60(%rsp),%rbx
  0x00007f8ab9120612: mov    0x68(%rsp),%rdx
  0x00007f8ab9120617: mov    0x70(%rsp),%rcx
  0x00007f8ab912061c: mov    0x78(%rsp),%rax
  0x00007f8ab9120621: add    $0x80,%rsp
  0x00007f8ab9120628: add    $0x8,%rsp
  0x00007f8ab912062c: popfq  
  0x00007f8ab912062d: mov    %r13,%rsp
  0x00007f8ab9120630: pop    %rax
  0x00007f8ab9120631: mov    %rsp,%r13
  0x00007f8ab9120634: sub    $0x40,%rsp
  0x00007f8ab9120638: mov    %rax,(%rsp)
  0x00007f8ab912063c: mov    %rsi,0x30(%rsp)
  0x00007f8ab9120641: mov    %rdx,0x28(%rsp)
  0x00007f8ab9120646: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9120650: mov    %rax,0x20(%rsp)
  0x00007f8ab9120655: mov    %rcx,0x18(%rsp)
  0x00007f8ab912065a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9120664: mov    %rax,0x10(%rsp)
  0x00007f8ab9120669: mov    %r8,0x8(%rsp)
  0x00007f8ab912066e: mov    0x40(%rbx),%rcx
  0x00007f8ab9120672: jmpq   *%rcx

AHE@0x00007f8ac80c54c8: 0xbbbea000 i2c: 0x00007f8ab9120720 c2i: 0x00007f8ab9120840 c2iUV: 0x00007f8ab9120813
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)I (581 bytes generated)
c2i argument handler starts at 0x7f8ab9120840
  0x00007f8ab9120720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9120724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912072e: cmp    %r11,%rax
  0x00007f8ab9120731: jbe    0x00007f8ab912074a
  0x00007f8ab9120737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9120741: cmp    %r11,%rax
  0x00007f8ab9120744: jb     0x00007f8ab91207e7
  0x00007f8ab912074a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9120754: cmp    %r11,%rax
  0x00007f8ab9120757: jbe    0x00007f8ab9120770
  0x00007f8ab912075d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9120767: cmp    %r11,%rax
  0x00007f8ab912076a: jb     0x00007f8ab91207e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9120770: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120775: sub    $0x80,%rsp
  0x00007f8ab912077c: mov    %rax,0x78(%rsp)
  0x00007f8ab9120781: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120786: mov    %rdx,0x68(%rsp)
  0x00007f8ab912078b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9120790: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120795: mov    %rsi,0x48(%rsp)
  0x00007f8ab912079a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912079f: mov    %r8,0x38(%rsp)
  0x00007f8ab91207a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91207a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91207ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91207b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91207b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91207bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91207c2: mov    %r15,(%rsp)
  0x00007f8ab91207c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91207d0: movabs $0x7f8ab9120770,%rsi
  0x00007f8ab91207da: mov    %rsp,%rdx
  0x00007f8ab91207dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91207e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91207e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91207e7: mov    %rsp,%r11
  0x00007f8ab91207ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91207ee: push   %rax
  0x00007f8ab91207ef: mov    %r11,%rax
  0x00007f8ab91207f2: mov    0x50(%rbx),%r11
  0x00007f8ab91207f6: mov    0x28(%rax),%rsi
  0x00007f8ab91207fa: mov    0x20(%rax),%rdx
  0x00007f8ab91207fe: mov    0x10(%rax),%rcx
  0x00007f8ab9120802: mov    0x8(%rax),%r8d
  0x00007f8ab9120806: mov    %rbx,0x258(%r15)
  0x00007f8ab912080d: mov    %rbx,%rax
  0x00007f8ab9120810: jmpq   *%r11
  0x00007f8ab9120813: mov    0x8(%rsi),%ebx
  0x00007f8ab9120816: shl    $0x3,%rbx
  0x00007f8ab912081a: cmp    0x10(%rax),%rbx
  0x00007f8ab912081e: mov    0x8(%rax),%rbx
  0x00007f8ab9120822: je     0x00007f8ab912082d
  0x00007f8ab9120828: jmpq   0x00007f8ab9105c40
  0x00007f8ab912082d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120835: je     0x00007f8ab9120930
  0x00007f8ab912083b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9120840: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120848: je     0x00007f8ab9120930
  0x00007f8ab912084e: mov    %rsp,%r13
  0x00007f8ab9120851: mov    (%rsp),%rax
  0x00007f8ab9120855: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120859: pushfq 
  0x00007f8ab912085a: sub    $0x8,%rsp
  0x00007f8ab912085e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120863: sub    $0x80,%rsp
  0x00007f8ab912086a: mov    %rax,0x78(%rsp)
  0x00007f8ab912086f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120874: mov    %rdx,0x68(%rsp)
  0x00007f8ab9120879: mov    %rbx,0x60(%rsp)
  0x00007f8ab912087e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120883: mov    %rsi,0x48(%rsp)
  0x00007f8ab9120888: mov    %rdi,0x40(%rsp)
  0x00007f8ab912088d: mov    %r8,0x38(%rsp)
  0x00007f8ab9120892: mov    %r9,0x30(%rsp)
  0x00007f8ab9120897: mov    %r10,0x28(%rsp)
  0x00007f8ab912089c: mov    %r11,0x20(%rsp)
  0x00007f8ab91208a1: mov    %r12,0x18(%rsp)
  0x00007f8ab91208a6: mov    %r13,0x10(%rsp)
  0x00007f8ab91208ab: mov    %r14,0x8(%rsp)
  0x00007f8ab91208b0: mov    %r15,(%rsp)
  0x00007f8ab91208b4: sub    $0x200,%rsp
  0x00007f8ab91208bb: fxsave64 (%rsp)
  0x00007f8ab91208c0: mov    %rbx,%rdi
  0x00007f8ab91208c3: mov    %rax,%rsi
  0x00007f8ab91208c6: callq  0x00007f8acef8bbca
  0x00007f8ab91208cb: fxrstor64 (%rsp)
  0x00007f8ab91208d0: add    $0x200,%rsp
  0x00007f8ab91208d7: mov    (%rsp),%r15
  0x00007f8ab91208db: mov    0x8(%rsp),%r14
  0x00007f8ab91208e0: mov    0x10(%rsp),%r13
  0x00007f8ab91208e5: mov    0x18(%rsp),%r12
  0x00007f8ab91208ea: mov    0x20(%rsp),%r11
  0x00007f8ab91208ef: mov    0x28(%rsp),%r10
  0x00007f8ab91208f4: mov    0x30(%rsp),%r9
  0x00007f8ab91208f9: mov    0x38(%rsp),%r8
  0x00007f8ab91208fe: mov    0x40(%rsp),%rdi
  0x00007f8ab9120903: mov    0x48(%rsp),%rsi
  0x00007f8ab9120908: mov    0x50(%rsp),%rbp
  0x00007f8ab912090d: mov    0x60(%rsp),%rbx
  0x00007f8ab9120912: mov    0x68(%rsp),%rdx
  0x00007f8ab9120917: mov    0x70(%rsp),%rcx
  0x00007f8ab912091c: mov    0x78(%rsp),%rax
  0x00007f8ab9120921: add    $0x80,%rsp
  0x00007f8ab9120928: add    $0x8,%rsp
  0x00007f8ab912092c: popfq  
  0x00007f8ab912092d: mov    %r13,%rsp
  0x00007f8ab9120930: pop    %rax
  0x00007f8ab9120931: mov    %rsp,%r13
  0x00007f8ab9120934: sub    $0x30,%rsp
  0x00007f8ab9120938: mov    %rax,(%rsp)
  0x00007f8ab912093c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9120941: mov    %rdx,0x20(%rsp)
  0x00007f8ab9120946: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9120950: mov    %rax,0x18(%rsp)
  0x00007f8ab9120955: mov    %rcx,0x10(%rsp)
  0x00007f8ab912095a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912095f: mov    0x40(%rbx),%rcx
  0x00007f8ab9120963: jmpq   *%rcx

AHE@0x00007f8ac80c5510: 0xbbbebe00 i2c: 0x00007f8ab9120a20 c2i: 0x00007f8ab9120b40 c2iUV: 0x00007f8ab9120b13
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)J (596 bytes generated)
c2i argument handler starts at 0x7f8ab9120b40
  0x00007f8ab9120a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9120a24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9120a2e: cmp    %r11,%rax
  0x00007f8ab9120a31: jbe    0x00007f8ab9120a4a
  0x00007f8ab9120a37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9120a41: cmp    %r11,%rax
  0x00007f8ab9120a44: jb     0x00007f8ab9120ae7
  0x00007f8ab9120a4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9120a54: cmp    %r11,%rax
  0x00007f8ab9120a57: jbe    0x00007f8ab9120a70
  0x00007f8ab9120a5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9120a67: cmp    %r11,%rax
  0x00007f8ab9120a6a: jb     0x00007f8ab9120ae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9120a70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120a75: sub    $0x80,%rsp
  0x00007f8ab9120a7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9120a81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120a86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9120a8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9120a90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120a95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9120a9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9120a9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9120aa4: mov    %r9,0x30(%rsp)
  0x00007f8ab9120aa9: mov    %r10,0x28(%rsp)
  0x00007f8ab9120aae: mov    %r11,0x20(%rsp)
  0x00007f8ab9120ab3: mov    %r12,0x18(%rsp)
  0x00007f8ab9120ab8: mov    %r13,0x10(%rsp)
  0x00007f8ab9120abd: mov    %r14,0x8(%rsp)
  0x00007f8ab9120ac2: mov    %r15,(%rsp)
  0x00007f8ab9120ac6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9120ad0: movabs $0x7f8ab9120a70,%rsi
  0x00007f8ab9120ada: mov    %rsp,%rdx
  0x00007f8ab9120add: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120ae1: callq  0x00007f8aceddb9fa
  0x00007f8ab9120ae6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9120ae7: mov    %rsp,%r11
  0x00007f8ab9120aea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120aee: push   %rax
  0x00007f8ab9120aef: mov    %r11,%rax
  0x00007f8ab9120af2: mov    0x50(%rbx),%r11
  0x00007f8ab9120af6: mov    0x30(%rax),%rsi
  0x00007f8ab9120afa: mov    0x28(%rax),%rdx
  0x00007f8ab9120afe: mov    0x18(%rax),%rcx
  0x00007f8ab9120b02: mov    0x8(%rax),%r8
  0x00007f8ab9120b06: mov    %rbx,0x258(%r15)
  0x00007f8ab9120b0d: mov    %rbx,%rax
  0x00007f8ab9120b10: jmpq   *%r11
  0x00007f8ab9120b13: mov    0x8(%rsi),%ebx
  0x00007f8ab9120b16: shl    $0x3,%rbx
  0x00007f8ab9120b1a: cmp    0x10(%rax),%rbx
  0x00007f8ab9120b1e: mov    0x8(%rax),%rbx
  0x00007f8ab9120b22: je     0x00007f8ab9120b2d
  0x00007f8ab9120b28: jmpq   0x00007f8ab9105c40
  0x00007f8ab9120b2d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120b35: je     0x00007f8ab9120c30
  0x00007f8ab9120b3b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9120b40: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120b48: je     0x00007f8ab9120c30
  0x00007f8ab9120b4e: mov    %rsp,%r13
  0x00007f8ab9120b51: mov    (%rsp),%rax
  0x00007f8ab9120b55: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120b59: pushfq 
  0x00007f8ab9120b5a: sub    $0x8,%rsp
  0x00007f8ab9120b5e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120b63: sub    $0x80,%rsp
  0x00007f8ab9120b6a: mov    %rax,0x78(%rsp)
  0x00007f8ab9120b6f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120b74: mov    %rdx,0x68(%rsp)
  0x00007f8ab9120b79: mov    %rbx,0x60(%rsp)
  0x00007f8ab9120b7e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120b83: mov    %rsi,0x48(%rsp)
  0x00007f8ab9120b88: mov    %rdi,0x40(%rsp)
  0x00007f8ab9120b8d: mov    %r8,0x38(%rsp)
  0x00007f8ab9120b92: mov    %r9,0x30(%rsp)
  0x00007f8ab9120b97: mov    %r10,0x28(%rsp)
  0x00007f8ab9120b9c: mov    %r11,0x20(%rsp)
  0x00007f8ab9120ba1: mov    %r12,0x18(%rsp)
  0x00007f8ab9120ba6: mov    %r13,0x10(%rsp)
  0x00007f8ab9120bab: mov    %r14,0x8(%rsp)
  0x00007f8ab9120bb0: mov    %r15,(%rsp)
  0x00007f8ab9120bb4: sub    $0x200,%rsp
  0x00007f8ab9120bbb: fxsave64 (%rsp)
  0x00007f8ab9120bc0: mov    %rbx,%rdi
  0x00007f8ab9120bc3: mov    %rax,%rsi
  0x00007f8ab9120bc6: callq  0x00007f8acef8bbca
  0x00007f8ab9120bcb: fxrstor64 (%rsp)
  0x00007f8ab9120bd0: add    $0x200,%rsp
  0x00007f8ab9120bd7: mov    (%rsp),%r15
  0x00007f8ab9120bdb: mov    0x8(%rsp),%r14
  0x00007f8ab9120be0: mov    0x10(%rsp),%r13
  0x00007f8ab9120be5: mov    0x18(%rsp),%r12
  0x00007f8ab9120bea: mov    0x20(%rsp),%r11
  0x00007f8ab9120bef: mov    0x28(%rsp),%r10
  0x00007f8ab9120bf4: mov    0x30(%rsp),%r9
  0x00007f8ab9120bf9: mov    0x38(%rsp),%r8
  0x00007f8ab9120bfe: mov    0x40(%rsp),%rdi
  0x00007f8ab9120c03: mov    0x48(%rsp),%rsi
  0x00007f8ab9120c08: mov    0x50(%rsp),%rbp
  0x00007f8ab9120c0d: mov    0x60(%rsp),%rbx
  0x00007f8ab9120c12: mov    0x68(%rsp),%rdx
  0x00007f8ab9120c17: mov    0x70(%rsp),%rcx
  0x00007f8ab9120c1c: mov    0x78(%rsp),%rax
  0x00007f8ab9120c21: add    $0x80,%rsp
  0x00007f8ab9120c28: add    $0x8,%rsp
  0x00007f8ab9120c2c: popfq  
  0x00007f8ab9120c2d: mov    %r13,%rsp
  0x00007f8ab9120c30: pop    %rax
  0x00007f8ab9120c31: mov    %rsp,%r13
  0x00007f8ab9120c34: sub    $0x40,%rsp
  0x00007f8ab9120c38: mov    %rax,(%rsp)
  0x00007f8ab9120c3c: mov    %rsi,0x30(%rsp)
  0x00007f8ab9120c41: mov    %rdx,0x28(%rsp)
  0x00007f8ab9120c46: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9120c50: mov    %rax,0x20(%rsp)
  0x00007f8ab9120c55: mov    %rcx,0x18(%rsp)
  0x00007f8ab9120c5a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9120c64: mov    %rax,0x10(%rsp)
  0x00007f8ab9120c69: mov    %r8,0x8(%rsp)
  0x00007f8ab9120c6e: mov    0x40(%rbx),%rcx
  0x00007f8ab9120c72: jmpq   *%rcx

AHE@0x00007f8ac80c5558: 0xbbbea000 i2c: 0x00007f8ab9120d20 c2i: 0x00007f8ab9120e40 c2iUV: 0x00007f8ab9120e13
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)I (581 bytes generated)
c2i argument handler starts at 0x7f8ab9120e40
  0x00007f8ab9120d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9120d24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9120d2e: cmp    %r11,%rax
  0x00007f8ab9120d31: jbe    0x00007f8ab9120d4a
  0x00007f8ab9120d37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9120d41: cmp    %r11,%rax
  0x00007f8ab9120d44: jb     0x00007f8ab9120de7
  0x00007f8ab9120d4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9120d54: cmp    %r11,%rax
  0x00007f8ab9120d57: jbe    0x00007f8ab9120d70
  0x00007f8ab9120d5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9120d67: cmp    %r11,%rax
  0x00007f8ab9120d6a: jb     0x00007f8ab9120de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9120d70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120d75: sub    $0x80,%rsp
  0x00007f8ab9120d7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9120d81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120d86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9120d8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9120d90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120d95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9120d9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9120d9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9120da4: mov    %r9,0x30(%rsp)
  0x00007f8ab9120da9: mov    %r10,0x28(%rsp)
  0x00007f8ab9120dae: mov    %r11,0x20(%rsp)
  0x00007f8ab9120db3: mov    %r12,0x18(%rsp)
  0x00007f8ab9120db8: mov    %r13,0x10(%rsp)
  0x00007f8ab9120dbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9120dc2: mov    %r15,(%rsp)
  0x00007f8ab9120dc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9120dd0: movabs $0x7f8ab9120d70,%rsi
  0x00007f8ab9120dda: mov    %rsp,%rdx
  0x00007f8ab9120ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120de1: callq  0x00007f8aceddb9fa
  0x00007f8ab9120de6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9120de7: mov    %rsp,%r11
  0x00007f8ab9120dea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120dee: push   %rax
  0x00007f8ab9120def: mov    %r11,%rax
  0x00007f8ab9120df2: mov    0x50(%rbx),%r11
  0x00007f8ab9120df6: mov    0x28(%rax),%rsi
  0x00007f8ab9120dfa: mov    0x20(%rax),%rdx
  0x00007f8ab9120dfe: mov    0x10(%rax),%rcx
  0x00007f8ab9120e02: mov    0x8(%rax),%r8d
  0x00007f8ab9120e06: mov    %rbx,0x258(%r15)
  0x00007f8ab9120e0d: mov    %rbx,%rax
  0x00007f8ab9120e10: jmpq   *%r11
  0x00007f8ab9120e13: mov    0x8(%rsi),%ebx
  0x00007f8ab9120e16: shl    $0x3,%rbx
  0x00007f8ab9120e1a: cmp    0x10(%rax),%rbx
  0x00007f8ab9120e1e: mov    0x8(%rax),%rbx
  0x00007f8ab9120e22: je     0x00007f8ab9120e2d
  0x00007f8ab9120e28: jmpq   0x00007f8ab9105c40
  0x00007f8ab9120e2d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120e35: je     0x00007f8ab9120f30
  0x00007f8ab9120e3b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9120e40: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9120e48: je     0x00007f8ab9120f30
  0x00007f8ab9120e4e: mov    %rsp,%r13
  0x00007f8ab9120e51: mov    (%rsp),%rax
  0x00007f8ab9120e55: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9120e59: pushfq 
  0x00007f8ab9120e5a: sub    $0x8,%rsp
  0x00007f8ab9120e5e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9120e63: sub    $0x80,%rsp
  0x00007f8ab9120e6a: mov    %rax,0x78(%rsp)
  0x00007f8ab9120e6f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9120e74: mov    %rdx,0x68(%rsp)
  0x00007f8ab9120e79: mov    %rbx,0x60(%rsp)
  0x00007f8ab9120e7e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9120e83: mov    %rsi,0x48(%rsp)
  0x00007f8ab9120e88: mov    %rdi,0x40(%rsp)
  0x00007f8ab9120e8d: mov    %r8,0x38(%rsp)
  0x00007f8ab9120e92: mov    %r9,0x30(%rsp)
  0x00007f8ab9120e97: mov    %r10,0x28(%rsp)
  0x00007f8ab9120e9c: mov    %r11,0x20(%rsp)
  0x00007f8ab9120ea1: mov    %r12,0x18(%rsp)
  0x00007f8ab9120ea6: mov    %r13,0x10(%rsp)
  0x00007f8ab9120eab: mov    %r14,0x8(%rsp)
  0x00007f8ab9120eb0: mov    %r15,(%rsp)
  0x00007f8ab9120eb4: sub    $0x200,%rsp
  0x00007f8ab9120ebb: fxsave64 (%rsp)
  0x00007f8ab9120ec0: mov    %rbx,%rdi
  0x00007f8ab9120ec3: mov    %rax,%rsi
  0x00007f8ab9120ec6: callq  0x00007f8acef8bbca
  0x00007f8ab9120ecb: fxrstor64 (%rsp)
  0x00007f8ab9120ed0: add    $0x200,%rsp
  0x00007f8ab9120ed7: mov    (%rsp),%r15
  0x00007f8ab9120edb: mov    0x8(%rsp),%r14
  0x00007f8ab9120ee0: mov    0x10(%rsp),%r13
  0x00007f8ab9120ee5: mov    0x18(%rsp),%r12
  0x00007f8ab9120eea: mov    0x20(%rsp),%r11
  0x00007f8ab9120eef: mov    0x28(%rsp),%r10
  0x00007f8ab9120ef4: mov    0x30(%rsp),%r9
  0x00007f8ab9120ef9: mov    0x38(%rsp),%r8
  0x00007f8ab9120efe: mov    0x40(%rsp),%rdi
  0x00007f8ab9120f03: mov    0x48(%rsp),%rsi
  0x00007f8ab9120f08: mov    0x50(%rsp),%rbp
  0x00007f8ab9120f0d: mov    0x60(%rsp),%rbx
  0x00007f8ab9120f12: mov    0x68(%rsp),%rdx
  0x00007f8ab9120f17: mov    0x70(%rsp),%rcx
  0x00007f8ab9120f1c: mov    0x78(%rsp),%rax
  0x00007f8ab9120f21: add    $0x80,%rsp
  0x00007f8ab9120f28: add    $0x8,%rsp
  0x00007f8ab9120f2c: popfq  
  0x00007f8ab9120f2d: mov    %r13,%rsp
  0x00007f8ab9120f30: pop    %rax
  0x00007f8ab9120f31: mov    %rsp,%r13
  0x00007f8ab9120f34: sub    $0x30,%rsp
  0x00007f8ab9120f38: mov    %rax,(%rsp)
  0x00007f8ab9120f3c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9120f41: mov    %rdx,0x20(%rsp)
  0x00007f8ab9120f46: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9120f50: mov    %rax,0x18(%rsp)
  0x00007f8ab9120f55: mov    %rcx,0x10(%rsp)
  0x00007f8ab9120f5a: mov    %r8d,0x8(%rsp)
  0x00007f8ab9120f5f: mov    0x40(%rbx),%rcx
  0x00007f8ab9120f63: jmpq   *%rcx

AHE@0x00007f8ac80c55a0: 0xbbbea000 i2c: 0x00007f8ab9121020 c2i: 0x00007f8ab9121140 c2iUV: 0x00007f8ab9121113
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9121140
  0x00007f8ab9121020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9121024: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912102e: cmp    %r11,%rax
  0x00007f8ab9121031: jbe    0x00007f8ab912104a
  0x00007f8ab9121037: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9121041: cmp    %r11,%rax
  0x00007f8ab9121044: jb     0x00007f8ab91210e7
  0x00007f8ab912104a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9121054: cmp    %r11,%rax
  0x00007f8ab9121057: jbe    0x00007f8ab9121070
  0x00007f8ab912105d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9121067: cmp    %r11,%rax
  0x00007f8ab912106a: jb     0x00007f8ab91210e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9121070: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121075: sub    $0x80,%rsp
  0x00007f8ab912107c: mov    %rax,0x78(%rsp)
  0x00007f8ab9121081: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121086: mov    %rdx,0x68(%rsp)
  0x00007f8ab912108b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121090: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121095: mov    %rsi,0x48(%rsp)
  0x00007f8ab912109a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912109f: mov    %r8,0x38(%rsp)
  0x00007f8ab91210a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91210a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91210ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91210b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91210b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91210bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91210c2: mov    %r15,(%rsp)
  0x00007f8ab91210c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91210d0: movabs $0x7f8ab9121070,%rsi
  0x00007f8ab91210da: mov    %rsp,%rdx
  0x00007f8ab91210dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91210e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91210e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91210e7: mov    %rsp,%r11
  0x00007f8ab91210ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91210ee: push   %rax
  0x00007f8ab91210ef: mov    %r11,%rax
  0x00007f8ab91210f2: mov    0x50(%rbx),%r11
  0x00007f8ab91210f6: mov    0x28(%rax),%rsi
  0x00007f8ab91210fa: mov    0x20(%rax),%rdx
  0x00007f8ab91210fe: mov    0x10(%rax),%rcx
  0x00007f8ab9121102: mov    0x8(%rax),%r8d
  0x00007f8ab9121106: mov    %rbx,0x258(%r15)
  0x00007f8ab912110d: mov    %rbx,%rax
  0x00007f8ab9121110: jmpq   *%r11
  0x00007f8ab9121113: mov    0x8(%rsi),%ebx
  0x00007f8ab9121116: shl    $0x3,%rbx
  0x00007f8ab912111a: cmp    0x10(%rax),%rbx
  0x00007f8ab912111e: mov    0x8(%rax),%rbx
  0x00007f8ab9121122: je     0x00007f8ab912112d
  0x00007f8ab9121128: jmpq   0x00007f8ab9105c40
  0x00007f8ab912112d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121135: je     0x00007f8ab9121230
  0x00007f8ab912113b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9121140: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121148: je     0x00007f8ab9121230
  0x00007f8ab912114e: mov    %rsp,%r13
  0x00007f8ab9121151: mov    (%rsp),%rax
  0x00007f8ab9121155: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9121159: pushfq 
  0x00007f8ab912115a: sub    $0x8,%rsp
  0x00007f8ab912115e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121163: sub    $0x80,%rsp
  0x00007f8ab912116a: mov    %rax,0x78(%rsp)
  0x00007f8ab912116f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121174: mov    %rdx,0x68(%rsp)
  0x00007f8ab9121179: mov    %rbx,0x60(%rsp)
  0x00007f8ab912117e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121183: mov    %rsi,0x48(%rsp)
  0x00007f8ab9121188: mov    %rdi,0x40(%rsp)
  0x00007f8ab912118d: mov    %r8,0x38(%rsp)
  0x00007f8ab9121192: mov    %r9,0x30(%rsp)
  0x00007f8ab9121197: mov    %r10,0x28(%rsp)
  0x00007f8ab912119c: mov    %r11,0x20(%rsp)
  0x00007f8ab91211a1: mov    %r12,0x18(%rsp)
  0x00007f8ab91211a6: mov    %r13,0x10(%rsp)
  0x00007f8ab91211ab: mov    %r14,0x8(%rsp)
  0x00007f8ab91211b0: mov    %r15,(%rsp)
  0x00007f8ab91211b4: sub    $0x200,%rsp
  0x00007f8ab91211bb: fxsave64 (%rsp)
  0x00007f8ab91211c0: mov    %rbx,%rdi
  0x00007f8ab91211c3: mov    %rax,%rsi
  0x00007f8ab91211c6: callq  0x00007f8acef8bbca
  0x00007f8ab91211cb: fxrstor64 (%rsp)
  0x00007f8ab91211d0: add    $0x200,%rsp
  0x00007f8ab91211d7: mov    (%rsp),%r15
  0x00007f8ab91211db: mov    0x8(%rsp),%r14
  0x00007f8ab91211e0: mov    0x10(%rsp),%r13
  0x00007f8ab91211e5: mov    0x18(%rsp),%r12
  0x00007f8ab91211ea: mov    0x20(%rsp),%r11
  0x00007f8ab91211ef: mov    0x28(%rsp),%r10
  0x00007f8ab91211f4: mov    0x30(%rsp),%r9
  0x00007f8ab91211f9: mov    0x38(%rsp),%r8
  0x00007f8ab91211fe: mov    0x40(%rsp),%rdi
  0x00007f8ab9121203: mov    0x48(%rsp),%rsi
  0x00007f8ab9121208: mov    0x50(%rsp),%rbp
  0x00007f8ab912120d: mov    0x60(%rsp),%rbx
  0x00007f8ab9121212: mov    0x68(%rsp),%rdx
  0x00007f8ab9121217: mov    0x70(%rsp),%rcx
  0x00007f8ab912121c: mov    0x78(%rsp),%rax
  0x00007f8ab9121221: add    $0x80,%rsp
  0x00007f8ab9121228: add    $0x8,%rsp
  0x00007f8ab912122c: popfq  
  0x00007f8ab912122d: mov    %r13,%rsp
  0x00007f8ab9121230: pop    %rax
  0x00007f8ab9121231: mov    %rsp,%r13
  0x00007f8ab9121234: sub    $0x30,%rsp
  0x00007f8ab9121238: mov    %rax,(%rsp)
  0x00007f8ab912123c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9121241: mov    %rdx,0x20(%rsp)
  0x00007f8ab9121246: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121250: mov    %rax,0x18(%rsp)
  0x00007f8ab9121255: mov    %rcx,0x10(%rsp)
  0x00007f8ab912125a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912125f: mov    0x40(%rbx),%rcx
  0x00007f8ab9121263: jmpq   *%rcx

AHE@0x00007f8ac80c55e8: 0xbbbebe00 i2c: 0x00007f8ab9121320 c2i: 0x00007f8ab9121440 c2iUV: 0x00007f8ab9121413
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (596 bytes generated)
c2i argument handler starts at 0x7f8ab9121440
  0x00007f8ab9121320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9121324: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912132e: cmp    %r11,%rax
  0x00007f8ab9121331: jbe    0x00007f8ab912134a
  0x00007f8ab9121337: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9121341: cmp    %r11,%rax
  0x00007f8ab9121344: jb     0x00007f8ab91213e7
  0x00007f8ab912134a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9121354: cmp    %r11,%rax
  0x00007f8ab9121357: jbe    0x00007f8ab9121370
  0x00007f8ab912135d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9121367: cmp    %r11,%rax
  0x00007f8ab912136a: jb     0x00007f8ab91213e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9121370: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121375: sub    $0x80,%rsp
  0x00007f8ab912137c: mov    %rax,0x78(%rsp)
  0x00007f8ab9121381: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121386: mov    %rdx,0x68(%rsp)
  0x00007f8ab912138b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121390: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121395: mov    %rsi,0x48(%rsp)
  0x00007f8ab912139a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912139f: mov    %r8,0x38(%rsp)
  0x00007f8ab91213a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91213a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91213ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91213b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91213b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91213bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91213c2: mov    %r15,(%rsp)
  0x00007f8ab91213c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91213d0: movabs $0x7f8ab9121370,%rsi
  0x00007f8ab91213da: mov    %rsp,%rdx
  0x00007f8ab91213dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91213e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91213e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91213e7: mov    %rsp,%r11
  0x00007f8ab91213ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91213ee: push   %rax
  0x00007f8ab91213ef: mov    %r11,%rax
  0x00007f8ab91213f2: mov    0x50(%rbx),%r11
  0x00007f8ab91213f6: mov    0x30(%rax),%rsi
  0x00007f8ab91213fa: mov    0x28(%rax),%rdx
  0x00007f8ab91213fe: mov    0x18(%rax),%rcx
  0x00007f8ab9121402: mov    0x8(%rax),%r8
  0x00007f8ab9121406: mov    %rbx,0x258(%r15)
  0x00007f8ab912140d: mov    %rbx,%rax
  0x00007f8ab9121410: jmpq   *%r11
  0x00007f8ab9121413: mov    0x8(%rsi),%ebx
  0x00007f8ab9121416: shl    $0x3,%rbx
  0x00007f8ab912141a: cmp    0x10(%rax),%rbx
  0x00007f8ab912141e: mov    0x8(%rax),%rbx
  0x00007f8ab9121422: je     0x00007f8ab912142d
  0x00007f8ab9121428: jmpq   0x00007f8ab9105c40
  0x00007f8ab912142d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121435: je     0x00007f8ab9121530
  0x00007f8ab912143b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9121440: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121448: je     0x00007f8ab9121530
  0x00007f8ab912144e: mov    %rsp,%r13
  0x00007f8ab9121451: mov    (%rsp),%rax
  0x00007f8ab9121455: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9121459: pushfq 
  0x00007f8ab912145a: sub    $0x8,%rsp
  0x00007f8ab912145e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121463: sub    $0x80,%rsp
  0x00007f8ab912146a: mov    %rax,0x78(%rsp)
  0x00007f8ab912146f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121474: mov    %rdx,0x68(%rsp)
  0x00007f8ab9121479: mov    %rbx,0x60(%rsp)
  0x00007f8ab912147e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121483: mov    %rsi,0x48(%rsp)
  0x00007f8ab9121488: mov    %rdi,0x40(%rsp)
  0x00007f8ab912148d: mov    %r8,0x38(%rsp)
  0x00007f8ab9121492: mov    %r9,0x30(%rsp)
  0x00007f8ab9121497: mov    %r10,0x28(%rsp)
  0x00007f8ab912149c: mov    %r11,0x20(%rsp)
  0x00007f8ab91214a1: mov    %r12,0x18(%rsp)
  0x00007f8ab91214a6: mov    %r13,0x10(%rsp)
  0x00007f8ab91214ab: mov    %r14,0x8(%rsp)
  0x00007f8ab91214b0: mov    %r15,(%rsp)
  0x00007f8ab91214b4: sub    $0x200,%rsp
  0x00007f8ab91214bb: fxsave64 (%rsp)
  0x00007f8ab91214c0: mov    %rbx,%rdi
  0x00007f8ab91214c3: mov    %rax,%rsi
  0x00007f8ab91214c6: callq  0x00007f8acef8bbca
  0x00007f8ab91214cb: fxrstor64 (%rsp)
  0x00007f8ab91214d0: add    $0x200,%rsp
  0x00007f8ab91214d7: mov    (%rsp),%r15
  0x00007f8ab91214db: mov    0x8(%rsp),%r14
  0x00007f8ab91214e0: mov    0x10(%rsp),%r13
  0x00007f8ab91214e5: mov    0x18(%rsp),%r12
  0x00007f8ab91214ea: mov    0x20(%rsp),%r11
  0x00007f8ab91214ef: mov    0x28(%rsp),%r10
  0x00007f8ab91214f4: mov    0x30(%rsp),%r9
  0x00007f8ab91214f9: mov    0x38(%rsp),%r8
  0x00007f8ab91214fe: mov    0x40(%rsp),%rdi
  0x00007f8ab9121503: mov    0x48(%rsp),%rsi
  0x00007f8ab9121508: mov    0x50(%rsp),%rbp
  0x00007f8ab912150d: mov    0x60(%rsp),%rbx
  0x00007f8ab9121512: mov    0x68(%rsp),%rdx
  0x00007f8ab9121517: mov    0x70(%rsp),%rcx
  0x00007f8ab912151c: mov    0x78(%rsp),%rax
  0x00007f8ab9121521: add    $0x80,%rsp
  0x00007f8ab9121528: add    $0x8,%rsp
  0x00007f8ab912152c: popfq  
  0x00007f8ab912152d: mov    %r13,%rsp
  0x00007f8ab9121530: pop    %rax
  0x00007f8ab9121531: mov    %rsp,%r13
  0x00007f8ab9121534: sub    $0x40,%rsp
  0x00007f8ab9121538: mov    %rax,(%rsp)
  0x00007f8ab912153c: mov    %rsi,0x30(%rsp)
  0x00007f8ab9121541: mov    %rdx,0x28(%rsp)
  0x00007f8ab9121546: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121550: mov    %rax,0x20(%rsp)
  0x00007f8ab9121555: mov    %rcx,0x18(%rsp)
  0x00007f8ab912155a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121564: mov    %rax,0x10(%rsp)
  0x00007f8ab9121569: mov    %r8,0x8(%rsp)
  0x00007f8ab912156e: mov    0x40(%rbx),%rcx
  0x00007f8ab9121572: jmpq   *%rcx

AHE@0x00007f8ac80c5630: 0xbbbeb000 i2c: 0x00007f8ab9121620 c2i: 0x00007f8ab9121740 c2iUV: 0x00007f8ab9121713
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9121740
  0x00007f8ab9121620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9121624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912162e: cmp    %r11,%rax
  0x00007f8ab9121631: jbe    0x00007f8ab912164a
  0x00007f8ab9121637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9121641: cmp    %r11,%rax
  0x00007f8ab9121644: jb     0x00007f8ab91216e7
  0x00007f8ab912164a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9121654: cmp    %r11,%rax
  0x00007f8ab9121657: jbe    0x00007f8ab9121670
  0x00007f8ab912165d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9121667: cmp    %r11,%rax
  0x00007f8ab912166a: jb     0x00007f8ab91216e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9121670: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121675: sub    $0x80,%rsp
  0x00007f8ab912167c: mov    %rax,0x78(%rsp)
  0x00007f8ab9121681: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121686: mov    %rdx,0x68(%rsp)
  0x00007f8ab912168b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121690: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121695: mov    %rsi,0x48(%rsp)
  0x00007f8ab912169a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912169f: mov    %r8,0x38(%rsp)
  0x00007f8ab91216a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91216a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91216ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91216b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91216b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91216bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91216c2: mov    %r15,(%rsp)
  0x00007f8ab91216c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91216d0: movabs $0x7f8ab9121670,%rsi
  0x00007f8ab91216da: mov    %rsp,%rdx
  0x00007f8ab91216dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91216e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91216e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91216e7: mov    %rsp,%r11
  0x00007f8ab91216ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91216ee: push   %rax
  0x00007f8ab91216ef: mov    %r11,%rax
  0x00007f8ab91216f2: mov    0x50(%rbx),%r11
  0x00007f8ab91216f6: mov    0x28(%rax),%rsi
  0x00007f8ab91216fa: mov    0x20(%rax),%rdx
  0x00007f8ab91216fe: mov    0x10(%rax),%rcx
  0x00007f8ab9121702: mov    0x8(%rax),%r8
  0x00007f8ab9121706: mov    %rbx,0x258(%r15)
  0x00007f8ab912170d: mov    %rbx,%rax
  0x00007f8ab9121710: jmpq   *%r11
  0x00007f8ab9121713: mov    0x8(%rsi),%ebx
  0x00007f8ab9121716: shl    $0x3,%rbx
  0x00007f8ab912171a: cmp    0x10(%rax),%rbx
  0x00007f8ab912171e: mov    0x8(%rax),%rbx
  0x00007f8ab9121722: je     0x00007f8ab912172d
  0x00007f8ab9121728: jmpq   0x00007f8ab9105c40
  0x00007f8ab912172d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121735: je     0x00007f8ab9121830
  0x00007f8ab912173b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9121740: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121748: je     0x00007f8ab9121830
  0x00007f8ab912174e: mov    %rsp,%r13
  0x00007f8ab9121751: mov    (%rsp),%rax
  0x00007f8ab9121755: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9121759: pushfq 
  0x00007f8ab912175a: sub    $0x8,%rsp
  0x00007f8ab912175e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121763: sub    $0x80,%rsp
  0x00007f8ab912176a: mov    %rax,0x78(%rsp)
  0x00007f8ab912176f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121774: mov    %rdx,0x68(%rsp)
  0x00007f8ab9121779: mov    %rbx,0x60(%rsp)
  0x00007f8ab912177e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121783: mov    %rsi,0x48(%rsp)
  0x00007f8ab9121788: mov    %rdi,0x40(%rsp)
  0x00007f8ab912178d: mov    %r8,0x38(%rsp)
  0x00007f8ab9121792: mov    %r9,0x30(%rsp)
  0x00007f8ab9121797: mov    %r10,0x28(%rsp)
  0x00007f8ab912179c: mov    %r11,0x20(%rsp)
  0x00007f8ab91217a1: mov    %r12,0x18(%rsp)
  0x00007f8ab91217a6: mov    %r13,0x10(%rsp)
  0x00007f8ab91217ab: mov    %r14,0x8(%rsp)
  0x00007f8ab91217b0: mov    %r15,(%rsp)
  0x00007f8ab91217b4: sub    $0x200,%rsp
  0x00007f8ab91217bb: fxsave64 (%rsp)
  0x00007f8ab91217c0: mov    %rbx,%rdi
  0x00007f8ab91217c3: mov    %rax,%rsi
  0x00007f8ab91217c6: callq  0x00007f8acef8bbca
  0x00007f8ab91217cb: fxrstor64 (%rsp)
  0x00007f8ab91217d0: add    $0x200,%rsp
  0x00007f8ab91217d7: mov    (%rsp),%r15
  0x00007f8ab91217db: mov    0x8(%rsp),%r14
  0x00007f8ab91217e0: mov    0x10(%rsp),%r13
  0x00007f8ab91217e5: mov    0x18(%rsp),%r12
  0x00007f8ab91217ea: mov    0x20(%rsp),%r11
  0x00007f8ab91217ef: mov    0x28(%rsp),%r10
  0x00007f8ab91217f4: mov    0x30(%rsp),%r9
  0x00007f8ab91217f9: mov    0x38(%rsp),%r8
  0x00007f8ab91217fe: mov    0x40(%rsp),%rdi
  0x00007f8ab9121803: mov    0x48(%rsp),%rsi
  0x00007f8ab9121808: mov    0x50(%rsp),%rbp
  0x00007f8ab912180d: mov    0x60(%rsp),%rbx
  0x00007f8ab9121812: mov    0x68(%rsp),%rdx
  0x00007f8ab9121817: mov    0x70(%rsp),%rcx
  0x00007f8ab912181c: mov    0x78(%rsp),%rax
  0x00007f8ab9121821: add    $0x80,%rsp
  0x00007f8ab9121828: add    $0x8,%rsp
  0x00007f8ab912182c: popfq  
  0x00007f8ab912182d: mov    %r13,%rsp
  0x00007f8ab9121830: pop    %rax
  0x00007f8ab9121831: mov    %rsp,%r13
  0x00007f8ab9121834: sub    $0x30,%rsp
  0x00007f8ab9121838: mov    %rax,(%rsp)
  0x00007f8ab912183c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9121841: mov    %rdx,0x20(%rsp)
  0x00007f8ab9121846: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121850: mov    %rax,0x18(%rsp)
  0x00007f8ab9121855: mov    %rcx,0x10(%rsp)
  0x00007f8ab912185a: mov    %r8,0x8(%rsp)
  0x00007f8ab912185f: mov    0x40(%rbx),%rcx
  0x00007f8ab9121863: jmpq   *%rcx

AHE@0x00007f8ac80c5678: 0xbbbeaa00 i2c: 0x00007f8ab9121920 c2i: 0x00007f8ab9121a44 c2iUV: 0x00007f8ab9121a17
i2c argument handler #0 for: receiver (Ljava/lang/Object;JII)Z (590 bytes generated)
c2i argument handler starts at 0x7f8ab9121a44
  0x00007f8ab9121920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9121924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912192e: cmp    %r11,%rax
  0x00007f8ab9121931: jbe    0x00007f8ab912194a
  0x00007f8ab9121937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9121941: cmp    %r11,%rax
  0x00007f8ab9121944: jb     0x00007f8ab91219e7
  0x00007f8ab912194a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9121954: cmp    %r11,%rax
  0x00007f8ab9121957: jbe    0x00007f8ab9121970
  0x00007f8ab912195d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9121967: cmp    %r11,%rax
  0x00007f8ab912196a: jb     0x00007f8ab91219e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9121970: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121975: sub    $0x80,%rsp
  0x00007f8ab912197c: mov    %rax,0x78(%rsp)
  0x00007f8ab9121981: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121986: mov    %rdx,0x68(%rsp)
  0x00007f8ab912198b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121990: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121995: mov    %rsi,0x48(%rsp)
  0x00007f8ab912199a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912199f: mov    %r8,0x38(%rsp)
  0x00007f8ab91219a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91219a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91219ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91219b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91219b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91219bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91219c2: mov    %r15,(%rsp)
  0x00007f8ab91219c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91219d0: movabs $0x7f8ab9121970,%rsi
  0x00007f8ab91219da: mov    %rsp,%rdx
  0x00007f8ab91219dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91219e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91219e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91219e7: mov    %rsp,%r11
  0x00007f8ab91219ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91219ee: push   %rax
  0x00007f8ab91219ef: mov    %r11,%rax
  0x00007f8ab91219f2: mov    0x50(%rbx),%r11
  0x00007f8ab91219f6: mov    0x30(%rax),%rsi
  0x00007f8ab91219fa: mov    0x28(%rax),%rdx
  0x00007f8ab91219fe: mov    0x18(%rax),%rcx
  0x00007f8ab9121a02: mov    0x10(%rax),%r8d
  0x00007f8ab9121a06: mov    0x8(%rax),%r9d
  0x00007f8ab9121a0a: mov    %rbx,0x258(%r15)
  0x00007f8ab9121a11: mov    %rbx,%rax
  0x00007f8ab9121a14: jmpq   *%r11
  0x00007f8ab9121a17: mov    0x8(%rsi),%ebx
  0x00007f8ab9121a1a: shl    $0x3,%rbx
  0x00007f8ab9121a1e: cmp    0x10(%rax),%rbx
  0x00007f8ab9121a22: mov    0x8(%rax),%rbx
  0x00007f8ab9121a26: je     0x00007f8ab9121a31
  0x00007f8ab9121a2c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9121a31: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121a39: je     0x00007f8ab9121b34
  0x00007f8ab9121a3f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9121a44: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121a4c: je     0x00007f8ab9121b34
  0x00007f8ab9121a52: mov    %rsp,%r13
  0x00007f8ab9121a55: mov    (%rsp),%rax
  0x00007f8ab9121a59: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9121a5d: pushfq 
  0x00007f8ab9121a5e: sub    $0x8,%rsp
  0x00007f8ab9121a62: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121a67: sub    $0x80,%rsp
  0x00007f8ab9121a6e: mov    %rax,0x78(%rsp)
  0x00007f8ab9121a73: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121a78: mov    %rdx,0x68(%rsp)
  0x00007f8ab9121a7d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121a82: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121a87: mov    %rsi,0x48(%rsp)
  0x00007f8ab9121a8c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9121a91: mov    %r8,0x38(%rsp)
  0x00007f8ab9121a96: mov    %r9,0x30(%rsp)
  0x00007f8ab9121a9b: mov    %r10,0x28(%rsp)
  0x00007f8ab9121aa0: mov    %r11,0x20(%rsp)
  0x00007f8ab9121aa5: mov    %r12,0x18(%rsp)
  0x00007f8ab9121aaa: mov    %r13,0x10(%rsp)
  0x00007f8ab9121aaf: mov    %r14,0x8(%rsp)
  0x00007f8ab9121ab4: mov    %r15,(%rsp)
  0x00007f8ab9121ab8: sub    $0x200,%rsp
  0x00007f8ab9121abf: fxsave64 (%rsp)
  0x00007f8ab9121ac4: mov    %rbx,%rdi
  0x00007f8ab9121ac7: mov    %rax,%rsi
  0x00007f8ab9121aca: callq  0x00007f8acef8bbca
  0x00007f8ab9121acf: fxrstor64 (%rsp)
  0x00007f8ab9121ad4: add    $0x200,%rsp
  0x00007f8ab9121adb: mov    (%rsp),%r15
  0x00007f8ab9121adf: mov    0x8(%rsp),%r14
  0x00007f8ab9121ae4: mov    0x10(%rsp),%r13
  0x00007f8ab9121ae9: mov    0x18(%rsp),%r12
  0x00007f8ab9121aee: mov    0x20(%rsp),%r11
  0x00007f8ab9121af3: mov    0x28(%rsp),%r10
  0x00007f8ab9121af8: mov    0x30(%rsp),%r9
  0x00007f8ab9121afd: mov    0x38(%rsp),%r8
  0x00007f8ab9121b02: mov    0x40(%rsp),%rdi
  0x00007f8ab9121b07: mov    0x48(%rsp),%rsi
  0x00007f8ab9121b0c: mov    0x50(%rsp),%rbp
  0x00007f8ab9121b11: mov    0x60(%rsp),%rbx
  0x00007f8ab9121b16: mov    0x68(%rsp),%rdx
  0x00007f8ab9121b1b: mov    0x70(%rsp),%rcx
  0x00007f8ab9121b20: mov    0x78(%rsp),%rax
  0x00007f8ab9121b25: add    $0x80,%rsp
  0x00007f8ab9121b2c: add    $0x8,%rsp
  0x00007f8ab9121b30: popfq  
  0x00007f8ab9121b31: mov    %r13,%rsp
  0x00007f8ab9121b34: pop    %rax
  0x00007f8ab9121b35: mov    %rsp,%r13
  0x00007f8ab9121b38: sub    $0x40,%rsp
  0x00007f8ab9121b3c: mov    %rax,(%rsp)
  0x00007f8ab9121b40: mov    %rsi,0x30(%rsp)
  0x00007f8ab9121b45: mov    %rdx,0x28(%rsp)
  0x00007f8ab9121b4a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121b54: mov    %rax,0x20(%rsp)
  0x00007f8ab9121b59: mov    %rcx,0x18(%rsp)
  0x00007f8ab9121b5e: mov    %r8d,0x10(%rsp)
  0x00007f8ab9121b63: mov    %r9d,0x8(%rsp)
  0x00007f8ab9121b68: mov    0x40(%rbx),%rcx
  0x00007f8ab9121b6c: jmpq   *%rcx

AHE@0x00007f8ac80c56c0: 0xbbbebebe i2c: 0x00007f8ab9121c20 c2i: 0x00007f8ab9121d44 c2iUV: 0x00007f8ab9121d17
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJJ)Z (620 bytes generated)
c2i argument handler starts at 0x7f8ab9121d44
  0x00007f8ab9121c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9121c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9121c2e: cmp    %r11,%rax
  0x00007f8ab9121c31: jbe    0x00007f8ab9121c4a
  0x00007f8ab9121c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9121c41: cmp    %r11,%rax
  0x00007f8ab9121c44: jb     0x00007f8ab9121ce7
  0x00007f8ab9121c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9121c54: cmp    %r11,%rax
  0x00007f8ab9121c57: jbe    0x00007f8ab9121c70
  0x00007f8ab9121c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9121c67: cmp    %r11,%rax
  0x00007f8ab9121c6a: jb     0x00007f8ab9121ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9121c70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121c75: sub    $0x80,%rsp
  0x00007f8ab9121c7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9121c81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121c86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9121c8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121c90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121c95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9121c9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9121c9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9121ca4: mov    %r9,0x30(%rsp)
  0x00007f8ab9121ca9: mov    %r10,0x28(%rsp)
  0x00007f8ab9121cae: mov    %r11,0x20(%rsp)
  0x00007f8ab9121cb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9121cb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9121cbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9121cc2: mov    %r15,(%rsp)
  0x00007f8ab9121cc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9121cd0: movabs $0x7f8ab9121c70,%rsi
  0x00007f8ab9121cda: mov    %rsp,%rdx
  0x00007f8ab9121cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9121ce1: callq  0x00007f8aceddb9fa
  0x00007f8ab9121ce6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9121ce7: mov    %rsp,%r11
  0x00007f8ab9121cea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9121cee: push   %rax
  0x00007f8ab9121cef: mov    %r11,%rax
  0x00007f8ab9121cf2: mov    0x50(%rbx),%r11
  0x00007f8ab9121cf6: mov    0x40(%rax),%rsi
  0x00007f8ab9121cfa: mov    0x38(%rax),%rdx
  0x00007f8ab9121cfe: mov    0x28(%rax),%rcx
  0x00007f8ab9121d02: mov    0x18(%rax),%r8
  0x00007f8ab9121d06: mov    0x8(%rax),%r9
  0x00007f8ab9121d0a: mov    %rbx,0x258(%r15)
  0x00007f8ab9121d11: mov    %rbx,%rax
  0x00007f8ab9121d14: jmpq   *%r11
  0x00007f8ab9121d17: mov    0x8(%rsi),%ebx
  0x00007f8ab9121d1a: shl    $0x3,%rbx
  0x00007f8ab9121d1e: cmp    0x10(%rax),%rbx
  0x00007f8ab9121d22: mov    0x8(%rax),%rbx
  0x00007f8ab9121d26: je     0x00007f8ab9121d31
  0x00007f8ab9121d2c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9121d31: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121d39: je     0x00007f8ab9121e34
  0x00007f8ab9121d3f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9121d44: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9121d4c: je     0x00007f8ab9121e34
  0x00007f8ab9121d52: mov    %rsp,%r13
  0x00007f8ab9121d55: mov    (%rsp),%rax
  0x00007f8ab9121d59: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9121d5d: pushfq 
  0x00007f8ab9121d5e: sub    $0x8,%rsp
  0x00007f8ab9121d62: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121d67: sub    $0x80,%rsp
  0x00007f8ab9121d6e: mov    %rax,0x78(%rsp)
  0x00007f8ab9121d73: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121d78: mov    %rdx,0x68(%rsp)
  0x00007f8ab9121d7d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121d82: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121d87: mov    %rsi,0x48(%rsp)
  0x00007f8ab9121d8c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9121d91: mov    %r8,0x38(%rsp)
  0x00007f8ab9121d96: mov    %r9,0x30(%rsp)
  0x00007f8ab9121d9b: mov    %r10,0x28(%rsp)
  0x00007f8ab9121da0: mov    %r11,0x20(%rsp)
  0x00007f8ab9121da5: mov    %r12,0x18(%rsp)
  0x00007f8ab9121daa: mov    %r13,0x10(%rsp)
  0x00007f8ab9121daf: mov    %r14,0x8(%rsp)
  0x00007f8ab9121db4: mov    %r15,(%rsp)
  0x00007f8ab9121db8: sub    $0x200,%rsp
  0x00007f8ab9121dbf: fxsave64 (%rsp)
  0x00007f8ab9121dc4: mov    %rbx,%rdi
  0x00007f8ab9121dc7: mov    %rax,%rsi
  0x00007f8ab9121dca: callq  0x00007f8acef8bbca
  0x00007f8ab9121dcf: fxrstor64 (%rsp)
  0x00007f8ab9121dd4: add    $0x200,%rsp
  0x00007f8ab9121ddb: mov    (%rsp),%r15
  0x00007f8ab9121ddf: mov    0x8(%rsp),%r14
  0x00007f8ab9121de4: mov    0x10(%rsp),%r13
  0x00007f8ab9121de9: mov    0x18(%rsp),%r12
  0x00007f8ab9121dee: mov    0x20(%rsp),%r11
  0x00007f8ab9121df3: mov    0x28(%rsp),%r10
  0x00007f8ab9121df8: mov    0x30(%rsp),%r9
  0x00007f8ab9121dfd: mov    0x38(%rsp),%r8
  0x00007f8ab9121e02: mov    0x40(%rsp),%rdi
  0x00007f8ab9121e07: mov    0x48(%rsp),%rsi
  0x00007f8ab9121e0c: mov    0x50(%rsp),%rbp
  0x00007f8ab9121e11: mov    0x60(%rsp),%rbx
  0x00007f8ab9121e16: mov    0x68(%rsp),%rdx
  0x00007f8ab9121e1b: mov    0x70(%rsp),%rcx
  0x00007f8ab9121e20: mov    0x78(%rsp),%rax
  0x00007f8ab9121e25: add    $0x80,%rsp
  0x00007f8ab9121e2c: add    $0x8,%rsp
  0x00007f8ab9121e30: popfq  
  0x00007f8ab9121e31: mov    %r13,%rsp
  0x00007f8ab9121e34: pop    %rax
  0x00007f8ab9121e35: mov    %rsp,%r13
  0x00007f8ab9121e38: sub    $0x50,%rsp
  0x00007f8ab9121e3c: mov    %rax,(%rsp)
  0x00007f8ab9121e40: mov    %rsi,0x40(%rsp)
  0x00007f8ab9121e45: mov    %rdx,0x38(%rsp)
  0x00007f8ab9121e4a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121e54: mov    %rax,0x30(%rsp)
  0x00007f8ab9121e59: mov    %rcx,0x28(%rsp)
  0x00007f8ab9121e5e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121e68: mov    %rax,0x20(%rsp)
  0x00007f8ab9121e6d: mov    %r8,0x18(%rsp)
  0x00007f8ab9121e72: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9121e7c: mov    %rax,0x10(%rsp)
  0x00007f8ab9121e81: mov    %r9,0x8(%rsp)
  0x00007f8ab9121e86: mov    0x40(%rbx),%rcx
  0x00007f8ab9121e8a: jmpq   *%rcx

AHE@0x00007f8ac80d6a00: 0xbbbebb00 i2c: 0x00007f8ab9121f60 c2i: 0x00007f8ab9122084 c2iUV: 0x00007f8ab9122057
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z (590 bytes generated)
c2i argument handler starts at 0x7f8ab9122084
  0x00007f8ab9121f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9121f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9121f6e: cmp    %r11,%rax
  0x00007f8ab9121f71: jbe    0x00007f8ab9121f8a
  0x00007f8ab9121f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9121f81: cmp    %r11,%rax
  0x00007f8ab9121f84: jb     0x00007f8ab9122027
  0x00007f8ab9121f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9121f94: cmp    %r11,%rax
  0x00007f8ab9121f97: jbe    0x00007f8ab9121fb0
  0x00007f8ab9121f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9121fa7: cmp    %r11,%rax
  0x00007f8ab9121faa: jb     0x00007f8ab9122027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9121fb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9121fb5: sub    $0x80,%rsp
  0x00007f8ab9121fbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9121fc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9121fc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9121fcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9121fd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9121fd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9121fda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9121fdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9121fe4: mov    %r9,0x30(%rsp)
  0x00007f8ab9121fe9: mov    %r10,0x28(%rsp)
  0x00007f8ab9121fee: mov    %r11,0x20(%rsp)
  0x00007f8ab9121ff3: mov    %r12,0x18(%rsp)
  0x00007f8ab9121ff8: mov    %r13,0x10(%rsp)
  0x00007f8ab9121ffd: mov    %r14,0x8(%rsp)
  0x00007f8ab9122002: mov    %r15,(%rsp)
  0x00007f8ab9122006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9122010: movabs $0x7f8ab9121fb0,%rsi
  0x00007f8ab912201a: mov    %rsp,%rdx
  0x00007f8ab912201d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122021: callq  0x00007f8aceddb9fa
  0x00007f8ab9122026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9122027: mov    %rsp,%r11
  0x00007f8ab912202a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912202e: push   %rax
  0x00007f8ab912202f: mov    %r11,%rax
  0x00007f8ab9122032: mov    0x50(%rbx),%r11
  0x00007f8ab9122036: mov    0x30(%rax),%rsi
  0x00007f8ab912203a: mov    0x28(%rax),%rdx
  0x00007f8ab912203e: mov    0x18(%rax),%rcx
  0x00007f8ab9122042: mov    0x10(%rax),%r8
  0x00007f8ab9122046: mov    0x8(%rax),%r9
  0x00007f8ab912204a: mov    %rbx,0x258(%r15)
  0x00007f8ab9122051: mov    %rbx,%rax
  0x00007f8ab9122054: jmpq   *%r11
  0x00007f8ab9122057: mov    0x8(%rsi),%ebx
  0x00007f8ab912205a: shl    $0x3,%rbx
  0x00007f8ab912205e: cmp    0x10(%rax),%rbx
  0x00007f8ab9122062: mov    0x8(%rax),%rbx
  0x00007f8ab9122066: je     0x00007f8ab9122071
  0x00007f8ab912206c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122071: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122079: je     0x00007f8ab9122174
  0x00007f8ab912207f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122084: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912208c: je     0x00007f8ab9122174
  0x00007f8ab9122092: mov    %rsp,%r13
  0x00007f8ab9122095: mov    (%rsp),%rax
  0x00007f8ab9122099: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912209d: pushfq 
  0x00007f8ab912209e: sub    $0x8,%rsp
  0x00007f8ab91220a2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91220a7: sub    $0x80,%rsp
  0x00007f8ab91220ae: mov    %rax,0x78(%rsp)
  0x00007f8ab91220b3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91220b8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91220bd: mov    %rbx,0x60(%rsp)
  0x00007f8ab91220c2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91220c7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91220cc: mov    %rdi,0x40(%rsp)
  0x00007f8ab91220d1: mov    %r8,0x38(%rsp)
  0x00007f8ab91220d6: mov    %r9,0x30(%rsp)
  0x00007f8ab91220db: mov    %r10,0x28(%rsp)
  0x00007f8ab91220e0: mov    %r11,0x20(%rsp)
  0x00007f8ab91220e5: mov    %r12,0x18(%rsp)
  0x00007f8ab91220ea: mov    %r13,0x10(%rsp)
  0x00007f8ab91220ef: mov    %r14,0x8(%rsp)
  0x00007f8ab91220f4: mov    %r15,(%rsp)
  0x00007f8ab91220f8: sub    $0x200,%rsp
  0x00007f8ab91220ff: fxsave64 (%rsp)
  0x00007f8ab9122104: mov    %rbx,%rdi
  0x00007f8ab9122107: mov    %rax,%rsi
  0x00007f8ab912210a: callq  0x00007f8acef8bbca
  0x00007f8ab912210f: fxrstor64 (%rsp)
  0x00007f8ab9122114: add    $0x200,%rsp
  0x00007f8ab912211b: mov    (%rsp),%r15
  0x00007f8ab912211f: mov    0x8(%rsp),%r14
  0x00007f8ab9122124: mov    0x10(%rsp),%r13
  0x00007f8ab9122129: mov    0x18(%rsp),%r12
  0x00007f8ab912212e: mov    0x20(%rsp),%r11
  0x00007f8ab9122133: mov    0x28(%rsp),%r10
  0x00007f8ab9122138: mov    0x30(%rsp),%r9
  0x00007f8ab912213d: mov    0x38(%rsp),%r8
  0x00007f8ab9122142: mov    0x40(%rsp),%rdi
  0x00007f8ab9122147: mov    0x48(%rsp),%rsi
  0x00007f8ab912214c: mov    0x50(%rsp),%rbp
  0x00007f8ab9122151: mov    0x60(%rsp),%rbx
  0x00007f8ab9122156: mov    0x68(%rsp),%rdx
  0x00007f8ab912215b: mov    0x70(%rsp),%rcx
  0x00007f8ab9122160: mov    0x78(%rsp),%rax
  0x00007f8ab9122165: add    $0x80,%rsp
  0x00007f8ab912216c: add    $0x8,%rsp
  0x00007f8ab9122170: popfq  
  0x00007f8ab9122171: mov    %r13,%rsp
  0x00007f8ab9122174: pop    %rax
  0x00007f8ab9122175: mov    %rsp,%r13
  0x00007f8ab9122178: sub    $0x40,%rsp
  0x00007f8ab912217c: mov    %rax,(%rsp)
  0x00007f8ab9122180: mov    %rsi,0x30(%rsp)
  0x00007f8ab9122185: mov    %rdx,0x28(%rsp)
  0x00007f8ab912218a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9122194: mov    %rax,0x20(%rsp)
  0x00007f8ab9122199: mov    %rcx,0x18(%rsp)
  0x00007f8ab912219e: mov    %r8,0x10(%rsp)
  0x00007f8ab91221a3: mov    %r9,0x8(%rsp)
  0x00007f8ab91221a8: mov    0x40(%rbx),%rcx
  0x00007f8ab91221ac: jmpq   *%rcx

AHE@0x00007f8ac80d6a48: 0xbbebe000 i2c: 0x00007f8ab9122260 c2i: 0x00007f8ab912237c c2iUV: 0x00007f8ab912234f
i2c argument handler #0 for: receiver (JJ)V (587 bytes generated)
c2i argument handler starts at 0x7f8ab912237c
  0x00007f8ab9122260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9122264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912226e: cmp    %r11,%rax
  0x00007f8ab9122271: jbe    0x00007f8ab912228a
  0x00007f8ab9122277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9122281: cmp    %r11,%rax
  0x00007f8ab9122284: jb     0x00007f8ab9122327
  0x00007f8ab912228a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9122294: cmp    %r11,%rax
  0x00007f8ab9122297: jbe    0x00007f8ab91222b0
  0x00007f8ab912229d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91222a7: cmp    %r11,%rax
  0x00007f8ab91222aa: jb     0x00007f8ab9122327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91222b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91222b5: sub    $0x80,%rsp
  0x00007f8ab91222bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91222c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91222c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91222cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91222d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91222d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91222da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91222df: mov    %r8,0x38(%rsp)
  0x00007f8ab91222e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91222e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91222ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91222f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91222f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91222fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9122302: mov    %r15,(%rsp)
  0x00007f8ab9122306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9122310: movabs $0x7f8ab91222b0,%rsi
  0x00007f8ab912231a: mov    %rsp,%rdx
  0x00007f8ab912231d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122321: callq  0x00007f8aceddb9fa
  0x00007f8ab9122326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9122327: mov    %rsp,%r11
  0x00007f8ab912232a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912232e: push   %rax
  0x00007f8ab912232f: mov    %r11,%rax
  0x00007f8ab9122332: mov    0x50(%rbx),%r11
  0x00007f8ab9122336: mov    0x28(%rax),%rsi
  0x00007f8ab912233a: mov    0x18(%rax),%rdx
  0x00007f8ab912233e: mov    0x8(%rax),%rcx
  0x00007f8ab9122342: mov    %rbx,0x258(%r15)
  0x00007f8ab9122349: mov    %rbx,%rax
  0x00007f8ab912234c: jmpq   *%r11
  0x00007f8ab912234f: mov    0x8(%rsi),%ebx
  0x00007f8ab9122352: shl    $0x3,%rbx
  0x00007f8ab9122356: cmp    0x10(%rax),%rbx
  0x00007f8ab912235a: mov    0x8(%rax),%rbx
  0x00007f8ab912235e: je     0x00007f8ab9122369
  0x00007f8ab9122364: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122369: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122371: je     0x00007f8ab912246c
  0x00007f8ab9122377: jmpq   0x00007f8ab9105c40
  0x00007f8ab912237c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122384: je     0x00007f8ab912246c
  0x00007f8ab912238a: mov    %rsp,%r13
  0x00007f8ab912238d: mov    (%rsp),%rax
  0x00007f8ab9122391: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122395: pushfq 
  0x00007f8ab9122396: sub    $0x8,%rsp
  0x00007f8ab912239a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912239f: sub    $0x80,%rsp
  0x00007f8ab91223a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91223ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91223b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91223b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91223ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91223bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91223c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91223c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91223ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91223d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91223d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91223dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91223e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91223e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91223ec: mov    %r15,(%rsp)
  0x00007f8ab91223f0: sub    $0x200,%rsp
  0x00007f8ab91223f7: fxsave64 (%rsp)
  0x00007f8ab91223fc: mov    %rbx,%rdi
  0x00007f8ab91223ff: mov    %rax,%rsi
  0x00007f8ab9122402: callq  0x00007f8acef8bbca
  0x00007f8ab9122407: fxrstor64 (%rsp)
  0x00007f8ab912240c: add    $0x200,%rsp
  0x00007f8ab9122413: mov    (%rsp),%r15
  0x00007f8ab9122417: mov    0x8(%rsp),%r14
  0x00007f8ab912241c: mov    0x10(%rsp),%r13
  0x00007f8ab9122421: mov    0x18(%rsp),%r12
  0x00007f8ab9122426: mov    0x20(%rsp),%r11
  0x00007f8ab912242b: mov    0x28(%rsp),%r10
  0x00007f8ab9122430: mov    0x30(%rsp),%r9
  0x00007f8ab9122435: mov    0x38(%rsp),%r8
  0x00007f8ab912243a: mov    0x40(%rsp),%rdi
  0x00007f8ab912243f: mov    0x48(%rsp),%rsi
  0x00007f8ab9122444: mov    0x50(%rsp),%rbp
  0x00007f8ab9122449: mov    0x60(%rsp),%rbx
  0x00007f8ab912244e: mov    0x68(%rsp),%rdx
  0x00007f8ab9122453: mov    0x70(%rsp),%rcx
  0x00007f8ab9122458: mov    0x78(%rsp),%rax
  0x00007f8ab912245d: add    $0x80,%rsp
  0x00007f8ab9122464: add    $0x8,%rsp
  0x00007f8ab9122468: popfq  
  0x00007f8ab9122469: mov    %r13,%rsp
  0x00007f8ab912246c: pop    %rax
  0x00007f8ab912246d: mov    %rsp,%r13
  0x00007f8ab9122470: sub    $0x30,%rsp
  0x00007f8ab9122474: mov    %rax,(%rsp)
  0x00007f8ab9122478: mov    %rsi,0x28(%rsp)
  0x00007f8ab912247d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9122487: mov    %rax,0x20(%rsp)
  0x00007f8ab912248c: mov    %rdx,0x18(%rsp)
  0x00007f8ab9122491: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912249b: mov    %rax,0x10(%rsp)
  0x00007f8ab91224a0: mov    %rcx,0x8(%rsp)
  0x00007f8ab91224a5: mov    0x40(%rbx),%rcx
  0x00007f8ab91224a9: jmpq   *%rcx

AHE@0x00007f8ac80d6a90: 0xbbe00000 i2c: 0x00007f8ab9122560 c2i: 0x00007f8ab9122678 c2iUV: 0x00007f8ab912264b
i2c argument handler #0 for: receiver (J)J (563 bytes generated)
c2i argument handler starts at 0x7f8ab9122678
  0x00007f8ab9122560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9122564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912256e: cmp    %r11,%rax
  0x00007f8ab9122571: jbe    0x00007f8ab912258a
  0x00007f8ab9122577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9122581: cmp    %r11,%rax
  0x00007f8ab9122584: jb     0x00007f8ab9122627
  0x00007f8ab912258a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9122594: cmp    %r11,%rax
  0x00007f8ab9122597: jbe    0x00007f8ab91225b0
  0x00007f8ab912259d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91225a7: cmp    %r11,%rax
  0x00007f8ab91225aa: jb     0x00007f8ab9122627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91225b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91225b5: sub    $0x80,%rsp
  0x00007f8ab91225bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91225c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91225c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91225cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91225d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91225d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91225da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91225df: mov    %r8,0x38(%rsp)
  0x00007f8ab91225e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91225e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91225ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91225f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91225f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91225fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9122602: mov    %r15,(%rsp)
  0x00007f8ab9122606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9122610: movabs $0x7f8ab91225b0,%rsi
  0x00007f8ab912261a: mov    %rsp,%rdx
  0x00007f8ab912261d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122621: callq  0x00007f8aceddb9fa
  0x00007f8ab9122626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9122627: mov    %rsp,%r11
  0x00007f8ab912262a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912262e: push   %rax
  0x00007f8ab912262f: mov    %r11,%rax
  0x00007f8ab9122632: mov    0x50(%rbx),%r11
  0x00007f8ab9122636: mov    0x18(%rax),%rsi
  0x00007f8ab912263a: mov    0x8(%rax),%rdx
  0x00007f8ab912263e: mov    %rbx,0x258(%r15)
  0x00007f8ab9122645: mov    %rbx,%rax
  0x00007f8ab9122648: jmpq   *%r11
  0x00007f8ab912264b: mov    0x8(%rsi),%ebx
  0x00007f8ab912264e: shl    $0x3,%rbx
  0x00007f8ab9122652: cmp    0x10(%rax),%rbx
  0x00007f8ab9122656: mov    0x8(%rax),%rbx
  0x00007f8ab912265a: je     0x00007f8ab9122665
  0x00007f8ab9122660: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122665: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912266d: je     0x00007f8ab9122768
  0x00007f8ab9122673: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122678: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122680: je     0x00007f8ab9122768
  0x00007f8ab9122686: mov    %rsp,%r13
  0x00007f8ab9122689: mov    (%rsp),%rax
  0x00007f8ab912268d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122691: pushfq 
  0x00007f8ab9122692: sub    $0x8,%rsp
  0x00007f8ab9122696: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912269b: sub    $0x80,%rsp
  0x00007f8ab91226a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91226a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91226ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91226b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91226b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91226bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91226c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91226c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91226ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91226cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91226d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91226d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91226de: mov    %r13,0x10(%rsp)
  0x00007f8ab91226e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91226e8: mov    %r15,(%rsp)
  0x00007f8ab91226ec: sub    $0x200,%rsp
  0x00007f8ab91226f3: fxsave64 (%rsp)
  0x00007f8ab91226f8: mov    %rbx,%rdi
  0x00007f8ab91226fb: mov    %rax,%rsi
  0x00007f8ab91226fe: callq  0x00007f8acef8bbca
  0x00007f8ab9122703: fxrstor64 (%rsp)
  0x00007f8ab9122708: add    $0x200,%rsp
  0x00007f8ab912270f: mov    (%rsp),%r15
  0x00007f8ab9122713: mov    0x8(%rsp),%r14
  0x00007f8ab9122718: mov    0x10(%rsp),%r13
  0x00007f8ab912271d: mov    0x18(%rsp),%r12
  0x00007f8ab9122722: mov    0x20(%rsp),%r11
  0x00007f8ab9122727: mov    0x28(%rsp),%r10
  0x00007f8ab912272c: mov    0x30(%rsp),%r9
  0x00007f8ab9122731: mov    0x38(%rsp),%r8
  0x00007f8ab9122736: mov    0x40(%rsp),%rdi
  0x00007f8ab912273b: mov    0x48(%rsp),%rsi
  0x00007f8ab9122740: mov    0x50(%rsp),%rbp
  0x00007f8ab9122745: mov    0x60(%rsp),%rbx
  0x00007f8ab912274a: mov    0x68(%rsp),%rdx
  0x00007f8ab912274f: mov    0x70(%rsp),%rcx
  0x00007f8ab9122754: mov    0x78(%rsp),%rax
  0x00007f8ab9122759: add    $0x80,%rsp
  0x00007f8ab9122760: add    $0x8,%rsp
  0x00007f8ab9122764: popfq  
  0x00007f8ab9122765: mov    %r13,%rsp
  0x00007f8ab9122768: pop    %rax
  0x00007f8ab9122769: mov    %rsp,%r13
  0x00007f8ab912276c: sub    $0x20,%rsp
  0x00007f8ab9122770: mov    %rax,(%rsp)
  0x00007f8ab9122774: mov    %rsi,0x18(%rsp)
  0x00007f8ab9122779: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9122783: mov    %rax,0x10(%rsp)
  0x00007f8ab9122788: mov    %rdx,0x8(%rsp)
  0x00007f8ab912278d: mov    0x40(%rbx),%rcx
  0x00007f8ab9122791: jmpq   *%rcx

AHE@0x00007f8ac80d6ad8: 0xbbbe7e00 i2c: 0x00007f8ab9122860 c2i: 0x00007f8ab9122981 c2iUV: 0x00007f8ab9122954
i2c argument handler #0 for: receiver (Ljava/lang/Object;JD)V (598 bytes generated)
c2i argument handler starts at 0x7f8ab9122981
  0x00007f8ab9122860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9122864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912286e: cmp    %r11,%rax
  0x00007f8ab9122871: jbe    0x00007f8ab912288a
  0x00007f8ab9122877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9122881: cmp    %r11,%rax
  0x00007f8ab9122884: jb     0x00007f8ab9122927
  0x00007f8ab912288a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9122894: cmp    %r11,%rax
  0x00007f8ab9122897: jbe    0x00007f8ab91228b0
  0x00007f8ab912289d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91228a7: cmp    %r11,%rax
  0x00007f8ab91228aa: jb     0x00007f8ab9122927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91228b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91228b5: sub    $0x80,%rsp
  0x00007f8ab91228bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91228c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91228c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91228cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91228d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91228d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91228da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91228df: mov    %r8,0x38(%rsp)
  0x00007f8ab91228e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91228e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91228ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91228f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91228f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91228fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9122902: mov    %r15,(%rsp)
  0x00007f8ab9122906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9122910: movabs $0x7f8ab91228b0,%rsi
  0x00007f8ab912291a: mov    %rsp,%rdx
  0x00007f8ab912291d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122921: callq  0x00007f8aceddb9fa
  0x00007f8ab9122926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9122927: mov    %rsp,%r11
  0x00007f8ab912292a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912292e: push   %rax
  0x00007f8ab912292f: mov    %r11,%rax
  0x00007f8ab9122932: mov    0x50(%rbx),%r11
  0x00007f8ab9122936: mov    0x30(%rax),%rsi
  0x00007f8ab912293a: mov    0x28(%rax),%rdx
  0x00007f8ab912293e: mov    0x18(%rax),%rcx
  0x00007f8ab9122942: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab9122947: mov    %rbx,0x258(%r15)
  0x00007f8ab912294e: mov    %rbx,%rax
  0x00007f8ab9122951: jmpq   *%r11
  0x00007f8ab9122954: mov    0x8(%rsi),%ebx
  0x00007f8ab9122957: shl    $0x3,%rbx
  0x00007f8ab912295b: cmp    0x10(%rax),%rbx
  0x00007f8ab912295f: mov    0x8(%rax),%rbx
  0x00007f8ab9122963: je     0x00007f8ab912296e
  0x00007f8ab9122969: jmpq   0x00007f8ab9105c40
  0x00007f8ab912296e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122976: je     0x00007f8ab9122a71
  0x00007f8ab912297c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122981: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122989: je     0x00007f8ab9122a71
  0x00007f8ab912298f: mov    %rsp,%r13
  0x00007f8ab9122992: mov    (%rsp),%rax
  0x00007f8ab9122996: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912299a: pushfq 
  0x00007f8ab912299b: sub    $0x8,%rsp
  0x00007f8ab912299f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91229a4: sub    $0x80,%rsp
  0x00007f8ab91229ab: mov    %rax,0x78(%rsp)
  0x00007f8ab91229b0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91229b5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91229ba: mov    %rbx,0x60(%rsp)
  0x00007f8ab91229bf: mov    %rbp,0x50(%rsp)
  0x00007f8ab91229c4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91229c9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91229ce: mov    %r8,0x38(%rsp)
  0x00007f8ab91229d3: mov    %r9,0x30(%rsp)
  0x00007f8ab91229d8: mov    %r10,0x28(%rsp)
  0x00007f8ab91229dd: mov    %r11,0x20(%rsp)
  0x00007f8ab91229e2: mov    %r12,0x18(%rsp)
  0x00007f8ab91229e7: mov    %r13,0x10(%rsp)
  0x00007f8ab91229ec: mov    %r14,0x8(%rsp)
  0x00007f8ab91229f1: mov    %r15,(%rsp)
  0x00007f8ab91229f5: sub    $0x200,%rsp
  0x00007f8ab91229fc: fxsave64 (%rsp)
  0x00007f8ab9122a01: mov    %rbx,%rdi
  0x00007f8ab9122a04: mov    %rax,%rsi
  0x00007f8ab9122a07: callq  0x00007f8acef8bbca
  0x00007f8ab9122a0c: fxrstor64 (%rsp)
  0x00007f8ab9122a11: add    $0x200,%rsp
  0x00007f8ab9122a18: mov    (%rsp),%r15
  0x00007f8ab9122a1c: mov    0x8(%rsp),%r14
  0x00007f8ab9122a21: mov    0x10(%rsp),%r13
  0x00007f8ab9122a26: mov    0x18(%rsp),%r12
  0x00007f8ab9122a2b: mov    0x20(%rsp),%r11
  0x00007f8ab9122a30: mov    0x28(%rsp),%r10
  0x00007f8ab9122a35: mov    0x30(%rsp),%r9
  0x00007f8ab9122a3a: mov    0x38(%rsp),%r8
  0x00007f8ab9122a3f: mov    0x40(%rsp),%rdi
  0x00007f8ab9122a44: mov    0x48(%rsp),%rsi
  0x00007f8ab9122a49: mov    0x50(%rsp),%rbp
  0x00007f8ab9122a4e: mov    0x60(%rsp),%rbx
  0x00007f8ab9122a53: mov    0x68(%rsp),%rdx
  0x00007f8ab9122a58: mov    0x70(%rsp),%rcx
  0x00007f8ab9122a5d: mov    0x78(%rsp),%rax
  0x00007f8ab9122a62: add    $0x80,%rsp
  0x00007f8ab9122a69: add    $0x8,%rsp
  0x00007f8ab9122a6d: popfq  
  0x00007f8ab9122a6e: mov    %r13,%rsp
  0x00007f8ab9122a71: pop    %rax
  0x00007f8ab9122a72: mov    %rsp,%r13
  0x00007f8ab9122a75: sub    $0x40,%rsp
  0x00007f8ab9122a79: mov    %rax,(%rsp)
  0x00007f8ab9122a7d: mov    %rsi,0x30(%rsp)
  0x00007f8ab9122a82: mov    %rdx,0x28(%rsp)
  0x00007f8ab9122a87: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9122a91: mov    %rax,0x20(%rsp)
  0x00007f8ab9122a96: mov    %rcx,0x18(%rsp)
  0x00007f8ab9122a9b: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9122aa5: mov    %rax,0x10(%rsp)
  0x00007f8ab9122aaa: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9122ab0: mov    0x40(%rbx),%rcx
  0x00007f8ab9122ab4: jmpq   *%rcx

AHE@0x00007f8ac80d6b20: 0xbbbe0000 i2c: 0x00007f8ab9122b60 c2i: 0x00007f8ab9122c7c c2iUV: 0x00007f8ab9122c4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)D (572 bytes generated)
c2i argument handler starts at 0x7f8ab9122c7c
  0x00007f8ab9122b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9122b64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9122b6e: cmp    %r11,%rax
  0x00007f8ab9122b71: jbe    0x00007f8ab9122b8a
  0x00007f8ab9122b77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9122b81: cmp    %r11,%rax
  0x00007f8ab9122b84: jb     0x00007f8ab9122c27
  0x00007f8ab9122b8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9122b94: cmp    %r11,%rax
  0x00007f8ab9122b97: jbe    0x00007f8ab9122bb0
  0x00007f8ab9122b9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9122ba7: cmp    %r11,%rax
  0x00007f8ab9122baa: jb     0x00007f8ab9122c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9122bb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9122bb5: sub    $0x80,%rsp
  0x00007f8ab9122bbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9122bc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9122bc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9122bcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9122bd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9122bd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9122bda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9122bdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9122be4: mov    %r9,0x30(%rsp)
  0x00007f8ab9122be9: mov    %r10,0x28(%rsp)
  0x00007f8ab9122bee: mov    %r11,0x20(%rsp)
  0x00007f8ab9122bf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9122bf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9122bfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9122c02: mov    %r15,(%rsp)
  0x00007f8ab9122c06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9122c10: movabs $0x7f8ab9122bb0,%rsi
  0x00007f8ab9122c1a: mov    %rsp,%rdx
  0x00007f8ab9122c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122c21: callq  0x00007f8aceddb9fa
  0x00007f8ab9122c26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9122c27: mov    %rsp,%r11
  0x00007f8ab9122c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122c2e: push   %rax
  0x00007f8ab9122c2f: mov    %r11,%rax
  0x00007f8ab9122c32: mov    0x50(%rbx),%r11
  0x00007f8ab9122c36: mov    0x20(%rax),%rsi
  0x00007f8ab9122c3a: mov    0x18(%rax),%rdx
  0x00007f8ab9122c3e: mov    0x8(%rax),%rcx
  0x00007f8ab9122c42: mov    %rbx,0x258(%r15)
  0x00007f8ab9122c49: mov    %rbx,%rax
  0x00007f8ab9122c4c: jmpq   *%r11
  0x00007f8ab9122c4f: mov    0x8(%rsi),%ebx
  0x00007f8ab9122c52: shl    $0x3,%rbx
  0x00007f8ab9122c56: cmp    0x10(%rax),%rbx
  0x00007f8ab9122c5a: mov    0x8(%rax),%rbx
  0x00007f8ab9122c5e: je     0x00007f8ab9122c69
  0x00007f8ab9122c64: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122c69: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122c71: je     0x00007f8ab9122d6c
  0x00007f8ab9122c77: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122c7c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122c84: je     0x00007f8ab9122d6c
  0x00007f8ab9122c8a: mov    %rsp,%r13
  0x00007f8ab9122c8d: mov    (%rsp),%rax
  0x00007f8ab9122c91: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122c95: pushfq 
  0x00007f8ab9122c96: sub    $0x8,%rsp
  0x00007f8ab9122c9a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9122c9f: sub    $0x80,%rsp
  0x00007f8ab9122ca6: mov    %rax,0x78(%rsp)
  0x00007f8ab9122cab: mov    %rcx,0x70(%rsp)
  0x00007f8ab9122cb0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9122cb5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9122cba: mov    %rbp,0x50(%rsp)
  0x00007f8ab9122cbf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9122cc4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9122cc9: mov    %r8,0x38(%rsp)
  0x00007f8ab9122cce: mov    %r9,0x30(%rsp)
  0x00007f8ab9122cd3: mov    %r10,0x28(%rsp)
  0x00007f8ab9122cd8: mov    %r11,0x20(%rsp)
  0x00007f8ab9122cdd: mov    %r12,0x18(%rsp)
  0x00007f8ab9122ce2: mov    %r13,0x10(%rsp)
  0x00007f8ab9122ce7: mov    %r14,0x8(%rsp)
  0x00007f8ab9122cec: mov    %r15,(%rsp)
  0x00007f8ab9122cf0: sub    $0x200,%rsp
  0x00007f8ab9122cf7: fxsave64 (%rsp)
  0x00007f8ab9122cfc: mov    %rbx,%rdi
  0x00007f8ab9122cff: mov    %rax,%rsi
  0x00007f8ab9122d02: callq  0x00007f8acef8bbca
  0x00007f8ab9122d07: fxrstor64 (%rsp)
  0x00007f8ab9122d0c: add    $0x200,%rsp
  0x00007f8ab9122d13: mov    (%rsp),%r15
  0x00007f8ab9122d17: mov    0x8(%rsp),%r14
  0x00007f8ab9122d1c: mov    0x10(%rsp),%r13
  0x00007f8ab9122d21: mov    0x18(%rsp),%r12
  0x00007f8ab9122d26: mov    0x20(%rsp),%r11
  0x00007f8ab9122d2b: mov    0x28(%rsp),%r10
  0x00007f8ab9122d30: mov    0x30(%rsp),%r9
  0x00007f8ab9122d35: mov    0x38(%rsp),%r8
  0x00007f8ab9122d3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9122d3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9122d44: mov    0x50(%rsp),%rbp
  0x00007f8ab9122d49: mov    0x60(%rsp),%rbx
  0x00007f8ab9122d4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9122d53: mov    0x70(%rsp),%rcx
  0x00007f8ab9122d58: mov    0x78(%rsp),%rax
  0x00007f8ab9122d5d: add    $0x80,%rsp
  0x00007f8ab9122d64: add    $0x8,%rsp
  0x00007f8ab9122d68: popfq  
  0x00007f8ab9122d69: mov    %r13,%rsp
  0x00007f8ab9122d6c: pop    %rax
  0x00007f8ab9122d6d: mov    %rsp,%r13
  0x00007f8ab9122d70: sub    $0x30,%rsp
  0x00007f8ab9122d74: mov    %rax,(%rsp)
  0x00007f8ab9122d78: mov    %rsi,0x20(%rsp)
  0x00007f8ab9122d7d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9122d82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9122d8c: mov    %rax,0x10(%rsp)
  0x00007f8ab9122d91: mov    %rcx,0x8(%rsp)
  0x00007f8ab9122d96: mov    0x40(%rbx),%rcx
  0x00007f8ab9122d9a: jmpq   *%rcx

AHE@0x00007f8ac80d6b68: 0xbbbe6000 i2c: 0x00007f8ab9122e60 c2i: 0x00007f8ab9122f81 c2iUV: 0x00007f8ab9122f54
i2c argument handler #0 for: receiver (Ljava/lang/Object;JF)V (583 bytes generated)
c2i argument handler starts at 0x7f8ab9122f81
  0x00007f8ab9122e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9122e64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9122e6e: cmp    %r11,%rax
  0x00007f8ab9122e71: jbe    0x00007f8ab9122e8a
  0x00007f8ab9122e77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9122e81: cmp    %r11,%rax
  0x00007f8ab9122e84: jb     0x00007f8ab9122f27
  0x00007f8ab9122e8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9122e94: cmp    %r11,%rax
  0x00007f8ab9122e97: jbe    0x00007f8ab9122eb0
  0x00007f8ab9122e9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9122ea7: cmp    %r11,%rax
  0x00007f8ab9122eaa: jb     0x00007f8ab9122f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9122eb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9122eb5: sub    $0x80,%rsp
  0x00007f8ab9122ebc: mov    %rax,0x78(%rsp)
  0x00007f8ab9122ec1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9122ec6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9122ecb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9122ed0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9122ed5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9122eda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9122edf: mov    %r8,0x38(%rsp)
  0x00007f8ab9122ee4: mov    %r9,0x30(%rsp)
  0x00007f8ab9122ee9: mov    %r10,0x28(%rsp)
  0x00007f8ab9122eee: mov    %r11,0x20(%rsp)
  0x00007f8ab9122ef3: mov    %r12,0x18(%rsp)
  0x00007f8ab9122ef8: mov    %r13,0x10(%rsp)
  0x00007f8ab9122efd: mov    %r14,0x8(%rsp)
  0x00007f8ab9122f02: mov    %r15,(%rsp)
  0x00007f8ab9122f06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9122f10: movabs $0x7f8ab9122eb0,%rsi
  0x00007f8ab9122f1a: mov    %rsp,%rdx
  0x00007f8ab9122f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122f21: callq  0x00007f8aceddb9fa
  0x00007f8ab9122f26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9122f27: mov    %rsp,%r11
  0x00007f8ab9122f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122f2e: push   %rax
  0x00007f8ab9122f2f: mov    %r11,%rax
  0x00007f8ab9122f32: mov    0x50(%rbx),%r11
  0x00007f8ab9122f36: mov    0x28(%rax),%rsi
  0x00007f8ab9122f3a: mov    0x20(%rax),%rdx
  0x00007f8ab9122f3e: mov    0x10(%rax),%rcx
  0x00007f8ab9122f42: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9122f47: mov    %rbx,0x258(%r15)
  0x00007f8ab9122f4e: mov    %rbx,%rax
  0x00007f8ab9122f51: jmpq   *%r11
  0x00007f8ab9122f54: mov    0x8(%rsi),%ebx
  0x00007f8ab9122f57: shl    $0x3,%rbx
  0x00007f8ab9122f5b: cmp    0x10(%rax),%rbx
  0x00007f8ab9122f5f: mov    0x8(%rax),%rbx
  0x00007f8ab9122f63: je     0x00007f8ab9122f6e
  0x00007f8ab9122f69: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122f6e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122f76: je     0x00007f8ab9123071
  0x00007f8ab9122f7c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9122f81: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9122f89: je     0x00007f8ab9123071
  0x00007f8ab9122f8f: mov    %rsp,%r13
  0x00007f8ab9122f92: mov    (%rsp),%rax
  0x00007f8ab9122f96: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9122f9a: pushfq 
  0x00007f8ab9122f9b: sub    $0x8,%rsp
  0x00007f8ab9122f9f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9122fa4: sub    $0x80,%rsp
  0x00007f8ab9122fab: mov    %rax,0x78(%rsp)
  0x00007f8ab9122fb0: mov    %rcx,0x70(%rsp)
  0x00007f8ab9122fb5: mov    %rdx,0x68(%rsp)
  0x00007f8ab9122fba: mov    %rbx,0x60(%rsp)
  0x00007f8ab9122fbf: mov    %rbp,0x50(%rsp)
  0x00007f8ab9122fc4: mov    %rsi,0x48(%rsp)
  0x00007f8ab9122fc9: mov    %rdi,0x40(%rsp)
  0x00007f8ab9122fce: mov    %r8,0x38(%rsp)
  0x00007f8ab9122fd3: mov    %r9,0x30(%rsp)
  0x00007f8ab9122fd8: mov    %r10,0x28(%rsp)
  0x00007f8ab9122fdd: mov    %r11,0x20(%rsp)
  0x00007f8ab9122fe2: mov    %r12,0x18(%rsp)
  0x00007f8ab9122fe7: mov    %r13,0x10(%rsp)
  0x00007f8ab9122fec: mov    %r14,0x8(%rsp)
  0x00007f8ab9122ff1: mov    %r15,(%rsp)
  0x00007f8ab9122ff5: sub    $0x200,%rsp
  0x00007f8ab9122ffc: fxsave64 (%rsp)
  0x00007f8ab9123001: mov    %rbx,%rdi
  0x00007f8ab9123004: mov    %rax,%rsi
  0x00007f8ab9123007: callq  0x00007f8acef8bbca
  0x00007f8ab912300c: fxrstor64 (%rsp)
  0x00007f8ab9123011: add    $0x200,%rsp
  0x00007f8ab9123018: mov    (%rsp),%r15
  0x00007f8ab912301c: mov    0x8(%rsp),%r14
  0x00007f8ab9123021: mov    0x10(%rsp),%r13
  0x00007f8ab9123026: mov    0x18(%rsp),%r12
  0x00007f8ab912302b: mov    0x20(%rsp),%r11
  0x00007f8ab9123030: mov    0x28(%rsp),%r10
  0x00007f8ab9123035: mov    0x30(%rsp),%r9
  0x00007f8ab912303a: mov    0x38(%rsp),%r8
  0x00007f8ab912303f: mov    0x40(%rsp),%rdi
  0x00007f8ab9123044: mov    0x48(%rsp),%rsi
  0x00007f8ab9123049: mov    0x50(%rsp),%rbp
  0x00007f8ab912304e: mov    0x60(%rsp),%rbx
  0x00007f8ab9123053: mov    0x68(%rsp),%rdx
  0x00007f8ab9123058: mov    0x70(%rsp),%rcx
  0x00007f8ab912305d: mov    0x78(%rsp),%rax
  0x00007f8ab9123062: add    $0x80,%rsp
  0x00007f8ab9123069: add    $0x8,%rsp
  0x00007f8ab912306d: popfq  
  0x00007f8ab912306e: mov    %r13,%rsp
  0x00007f8ab9123071: pop    %rax
  0x00007f8ab9123072: mov    %rsp,%r13
  0x00007f8ab9123075: sub    $0x30,%rsp
  0x00007f8ab9123079: mov    %rax,(%rsp)
  0x00007f8ab912307d: mov    %rsi,0x28(%rsp)
  0x00007f8ab9123082: mov    %rdx,0x20(%rsp)
  0x00007f8ab9123087: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9123091: mov    %rax,0x18(%rsp)
  0x00007f8ab9123096: mov    %rcx,0x10(%rsp)
  0x00007f8ab912309b: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab91230a1: mov    0x40(%rbx),%rcx
  0x00007f8ab91230a5: jmpq   *%rcx

AHE@0x00007f8ac80d6bb0: 0xbbbe0000 i2c: 0x00007f8ab9123160 c2i: 0x00007f8ab912327c c2iUV: 0x00007f8ab912324f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)F (572 bytes generated)
c2i argument handler starts at 0x7f8ab912327c
  0x00007f8ab9123160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9123164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912316e: cmp    %r11,%rax
  0x00007f8ab9123171: jbe    0x00007f8ab912318a
  0x00007f8ab9123177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9123181: cmp    %r11,%rax
  0x00007f8ab9123184: jb     0x00007f8ab9123227
  0x00007f8ab912318a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9123194: cmp    %r11,%rax
  0x00007f8ab9123197: jbe    0x00007f8ab91231b0
  0x00007f8ab912319d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91231a7: cmp    %r11,%rax
  0x00007f8ab91231aa: jb     0x00007f8ab9123227
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91231b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91231b5: sub    $0x80,%rsp
  0x00007f8ab91231bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91231c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91231c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91231cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91231d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91231d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91231da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91231df: mov    %r8,0x38(%rsp)
  0x00007f8ab91231e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91231e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91231ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91231f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91231f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91231fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9123202: mov    %r15,(%rsp)
  0x00007f8ab9123206: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9123210: movabs $0x7f8ab91231b0,%rsi
  0x00007f8ab912321a: mov    %rsp,%rdx
  0x00007f8ab912321d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123221: callq  0x00007f8aceddb9fa
  0x00007f8ab9123226: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9123227: mov    %rsp,%r11
  0x00007f8ab912322a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912322e: push   %rax
  0x00007f8ab912322f: mov    %r11,%rax
  0x00007f8ab9123232: mov    0x50(%rbx),%r11
  0x00007f8ab9123236: mov    0x20(%rax),%rsi
  0x00007f8ab912323a: mov    0x18(%rax),%rdx
  0x00007f8ab912323e: mov    0x8(%rax),%rcx
  0x00007f8ab9123242: mov    %rbx,0x258(%r15)
  0x00007f8ab9123249: mov    %rbx,%rax
  0x00007f8ab912324c: jmpq   *%r11
  0x00007f8ab912324f: mov    0x8(%rsi),%ebx
  0x00007f8ab9123252: shl    $0x3,%rbx
  0x00007f8ab9123256: cmp    0x10(%rax),%rbx
  0x00007f8ab912325a: mov    0x8(%rax),%rbx
  0x00007f8ab912325e: je     0x00007f8ab9123269
  0x00007f8ab9123264: jmpq   0x00007f8ab9105c40
  0x00007f8ab9123269: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123271: je     0x00007f8ab912336c
  0x00007f8ab9123277: jmpq   0x00007f8ab9105c40
  0x00007f8ab912327c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123284: je     0x00007f8ab912336c
  0x00007f8ab912328a: mov    %rsp,%r13
  0x00007f8ab912328d: mov    (%rsp),%rax
  0x00007f8ab9123291: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123295: pushfq 
  0x00007f8ab9123296: sub    $0x8,%rsp
  0x00007f8ab912329a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912329f: sub    $0x80,%rsp
  0x00007f8ab91232a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91232ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91232b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91232b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91232ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91232bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91232c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91232c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91232ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91232d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91232d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91232dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91232e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91232e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91232ec: mov    %r15,(%rsp)
  0x00007f8ab91232f0: sub    $0x200,%rsp
  0x00007f8ab91232f7: fxsave64 (%rsp)
  0x00007f8ab91232fc: mov    %rbx,%rdi
  0x00007f8ab91232ff: mov    %rax,%rsi
  0x00007f8ab9123302: callq  0x00007f8acef8bbca
  0x00007f8ab9123307: fxrstor64 (%rsp)
  0x00007f8ab912330c: add    $0x200,%rsp
  0x00007f8ab9123313: mov    (%rsp),%r15
  0x00007f8ab9123317: mov    0x8(%rsp),%r14
  0x00007f8ab912331c: mov    0x10(%rsp),%r13
  0x00007f8ab9123321: mov    0x18(%rsp),%r12
  0x00007f8ab9123326: mov    0x20(%rsp),%r11
  0x00007f8ab912332b: mov    0x28(%rsp),%r10
  0x00007f8ab9123330: mov    0x30(%rsp),%r9
  0x00007f8ab9123335: mov    0x38(%rsp),%r8
  0x00007f8ab912333a: mov    0x40(%rsp),%rdi
  0x00007f8ab912333f: mov    0x48(%rsp),%rsi
  0x00007f8ab9123344: mov    0x50(%rsp),%rbp
  0x00007f8ab9123349: mov    0x60(%rsp),%rbx
  0x00007f8ab912334e: mov    0x68(%rsp),%rdx
  0x00007f8ab9123353: mov    0x70(%rsp),%rcx
  0x00007f8ab9123358: mov    0x78(%rsp),%rax
  0x00007f8ab912335d: add    $0x80,%rsp
  0x00007f8ab9123364: add    $0x8,%rsp
  0x00007f8ab9123368: popfq  
  0x00007f8ab9123369: mov    %r13,%rsp
  0x00007f8ab912336c: pop    %rax
  0x00007f8ab912336d: mov    %rsp,%r13
  0x00007f8ab9123370: sub    $0x30,%rsp
  0x00007f8ab9123374: mov    %rax,(%rsp)
  0x00007f8ab9123378: mov    %rsi,0x20(%rsp)
  0x00007f8ab912337d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9123382: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912338c: mov    %rax,0x10(%rsp)
  0x00007f8ab9123391: mov    %rcx,0x8(%rsp)
  0x00007f8ab9123396: mov    0x40(%rbx),%rcx
  0x00007f8ab912339a: jmpq   *%rcx

AHE@0x00007f8ac80d6bf8: 0xbbbebe00 i2c: 0x00007f8ab9123460 c2i: 0x00007f8ab9123580 c2iUV: 0x00007f8ab9123553
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (596 bytes generated)
c2i argument handler starts at 0x7f8ab9123580
  0x00007f8ab9123460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9123464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912346e: cmp    %r11,%rax
  0x00007f8ab9123471: jbe    0x00007f8ab912348a
  0x00007f8ab9123477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9123481: cmp    %r11,%rax
  0x00007f8ab9123484: jb     0x00007f8ab9123527
  0x00007f8ab912348a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9123494: cmp    %r11,%rax
  0x00007f8ab9123497: jbe    0x00007f8ab91234b0
  0x00007f8ab912349d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91234a7: cmp    %r11,%rax
  0x00007f8ab91234aa: jb     0x00007f8ab9123527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91234b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91234b5: sub    $0x80,%rsp
  0x00007f8ab91234bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91234c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91234c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91234cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91234d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91234d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91234da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91234df: mov    %r8,0x38(%rsp)
  0x00007f8ab91234e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91234e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91234ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91234f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91234f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91234fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9123502: mov    %r15,(%rsp)
  0x00007f8ab9123506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9123510: movabs $0x7f8ab91234b0,%rsi
  0x00007f8ab912351a: mov    %rsp,%rdx
  0x00007f8ab912351d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123521: callq  0x00007f8aceddb9fa
  0x00007f8ab9123526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9123527: mov    %rsp,%r11
  0x00007f8ab912352a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912352e: push   %rax
  0x00007f8ab912352f: mov    %r11,%rax
  0x00007f8ab9123532: mov    0x50(%rbx),%r11
  0x00007f8ab9123536: mov    0x30(%rax),%rsi
  0x00007f8ab912353a: mov    0x28(%rax),%rdx
  0x00007f8ab912353e: mov    0x18(%rax),%rcx
  0x00007f8ab9123542: mov    0x8(%rax),%r8
  0x00007f8ab9123546: mov    %rbx,0x258(%r15)
  0x00007f8ab912354d: mov    %rbx,%rax
  0x00007f8ab9123550: jmpq   *%r11
  0x00007f8ab9123553: mov    0x8(%rsi),%ebx
  0x00007f8ab9123556: shl    $0x3,%rbx
  0x00007f8ab912355a: cmp    0x10(%rax),%rbx
  0x00007f8ab912355e: mov    0x8(%rax),%rbx
  0x00007f8ab9123562: je     0x00007f8ab912356d
  0x00007f8ab9123568: jmpq   0x00007f8ab9105c40
  0x00007f8ab912356d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123575: je     0x00007f8ab9123670
  0x00007f8ab912357b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9123580: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123588: je     0x00007f8ab9123670
  0x00007f8ab912358e: mov    %rsp,%r13
  0x00007f8ab9123591: mov    (%rsp),%rax
  0x00007f8ab9123595: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123599: pushfq 
  0x00007f8ab912359a: sub    $0x8,%rsp
  0x00007f8ab912359e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91235a3: sub    $0x80,%rsp
  0x00007f8ab91235aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91235af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91235b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91235b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91235be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91235c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91235c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91235cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91235d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91235d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91235dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91235e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91235e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91235eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91235f0: mov    %r15,(%rsp)
  0x00007f8ab91235f4: sub    $0x200,%rsp
  0x00007f8ab91235fb: fxsave64 (%rsp)
  0x00007f8ab9123600: mov    %rbx,%rdi
  0x00007f8ab9123603: mov    %rax,%rsi
  0x00007f8ab9123606: callq  0x00007f8acef8bbca
  0x00007f8ab912360b: fxrstor64 (%rsp)
  0x00007f8ab9123610: add    $0x200,%rsp
  0x00007f8ab9123617: mov    (%rsp),%r15
  0x00007f8ab912361b: mov    0x8(%rsp),%r14
  0x00007f8ab9123620: mov    0x10(%rsp),%r13
  0x00007f8ab9123625: mov    0x18(%rsp),%r12
  0x00007f8ab912362a: mov    0x20(%rsp),%r11
  0x00007f8ab912362f: mov    0x28(%rsp),%r10
  0x00007f8ab9123634: mov    0x30(%rsp),%r9
  0x00007f8ab9123639: mov    0x38(%rsp),%r8
  0x00007f8ab912363e: mov    0x40(%rsp),%rdi
  0x00007f8ab9123643: mov    0x48(%rsp),%rsi
  0x00007f8ab9123648: mov    0x50(%rsp),%rbp
  0x00007f8ab912364d: mov    0x60(%rsp),%rbx
  0x00007f8ab9123652: mov    0x68(%rsp),%rdx
  0x00007f8ab9123657: mov    0x70(%rsp),%rcx
  0x00007f8ab912365c: mov    0x78(%rsp),%rax
  0x00007f8ab9123661: add    $0x80,%rsp
  0x00007f8ab9123668: add    $0x8,%rsp
  0x00007f8ab912366c: popfq  
  0x00007f8ab912366d: mov    %r13,%rsp
  0x00007f8ab9123670: pop    %rax
  0x00007f8ab9123671: mov    %rsp,%r13
  0x00007f8ab9123674: sub    $0x40,%rsp
  0x00007f8ab9123678: mov    %rax,(%rsp)
  0x00007f8ab912367c: mov    %rsi,0x30(%rsp)
  0x00007f8ab9123681: mov    %rdx,0x28(%rsp)
  0x00007f8ab9123686: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9123690: mov    %rax,0x20(%rsp)
  0x00007f8ab9123695: mov    %rcx,0x18(%rsp)
  0x00007f8ab912369a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91236a4: mov    %rax,0x10(%rsp)
  0x00007f8ab91236a9: mov    %r8,0x8(%rsp)
  0x00007f8ab91236ae: mov    0x40(%rbx),%rcx
  0x00007f8ab91236b2: jmpq   *%rcx

AHE@0x00007f8ac80d6c40: 0xbbbe0000 i2c: 0x00007f8ab9123760 c2i: 0x00007f8ab912387c c2iUV: 0x00007f8ab912384f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)J (572 bytes generated)
c2i argument handler starts at 0x7f8ab912387c
  0x00007f8ab9123760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9123764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912376e: cmp    %r11,%rax
  0x00007f8ab9123771: jbe    0x00007f8ab912378a
  0x00007f8ab9123777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9123781: cmp    %r11,%rax
  0x00007f8ab9123784: jb     0x00007f8ab9123827
  0x00007f8ab912378a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9123794: cmp    %r11,%rax
  0x00007f8ab9123797: jbe    0x00007f8ab91237b0
  0x00007f8ab912379d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91237a7: cmp    %r11,%rax
  0x00007f8ab91237aa: jb     0x00007f8ab9123827
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91237b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91237b5: sub    $0x80,%rsp
  0x00007f8ab91237bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91237c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91237c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91237cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91237d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91237d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91237da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91237df: mov    %r8,0x38(%rsp)
  0x00007f8ab91237e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91237e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91237ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91237f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91237f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91237fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9123802: mov    %r15,(%rsp)
  0x00007f8ab9123806: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9123810: movabs $0x7f8ab91237b0,%rsi
  0x00007f8ab912381a: mov    %rsp,%rdx
  0x00007f8ab912381d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123821: callq  0x00007f8aceddb9fa
  0x00007f8ab9123826: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9123827: mov    %rsp,%r11
  0x00007f8ab912382a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912382e: push   %rax
  0x00007f8ab912382f: mov    %r11,%rax
  0x00007f8ab9123832: mov    0x50(%rbx),%r11
  0x00007f8ab9123836: mov    0x20(%rax),%rsi
  0x00007f8ab912383a: mov    0x18(%rax),%rdx
  0x00007f8ab912383e: mov    0x8(%rax),%rcx
  0x00007f8ab9123842: mov    %rbx,0x258(%r15)
  0x00007f8ab9123849: mov    %rbx,%rax
  0x00007f8ab912384c: jmpq   *%r11
  0x00007f8ab912384f: mov    0x8(%rsi),%ebx
  0x00007f8ab9123852: shl    $0x3,%rbx
  0x00007f8ab9123856: cmp    0x10(%rax),%rbx
  0x00007f8ab912385a: mov    0x8(%rax),%rbx
  0x00007f8ab912385e: je     0x00007f8ab9123869
  0x00007f8ab9123864: jmpq   0x00007f8ab9105c40
  0x00007f8ab9123869: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123871: je     0x00007f8ab912396c
  0x00007f8ab9123877: jmpq   0x00007f8ab9105c40
  0x00007f8ab912387c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123884: je     0x00007f8ab912396c
  0x00007f8ab912388a: mov    %rsp,%r13
  0x00007f8ab912388d: mov    (%rsp),%rax
  0x00007f8ab9123891: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123895: pushfq 
  0x00007f8ab9123896: sub    $0x8,%rsp
  0x00007f8ab912389a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912389f: sub    $0x80,%rsp
  0x00007f8ab91238a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91238ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91238b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91238b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91238ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91238bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91238c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91238c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91238ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91238d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91238d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91238dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91238e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91238e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91238ec: mov    %r15,(%rsp)
  0x00007f8ab91238f0: sub    $0x200,%rsp
  0x00007f8ab91238f7: fxsave64 (%rsp)
  0x00007f8ab91238fc: mov    %rbx,%rdi
  0x00007f8ab91238ff: mov    %rax,%rsi
  0x00007f8ab9123902: callq  0x00007f8acef8bbca
  0x00007f8ab9123907: fxrstor64 (%rsp)
  0x00007f8ab912390c: add    $0x200,%rsp
  0x00007f8ab9123913: mov    (%rsp),%r15
  0x00007f8ab9123917: mov    0x8(%rsp),%r14
  0x00007f8ab912391c: mov    0x10(%rsp),%r13
  0x00007f8ab9123921: mov    0x18(%rsp),%r12
  0x00007f8ab9123926: mov    0x20(%rsp),%r11
  0x00007f8ab912392b: mov    0x28(%rsp),%r10
  0x00007f8ab9123930: mov    0x30(%rsp),%r9
  0x00007f8ab9123935: mov    0x38(%rsp),%r8
  0x00007f8ab912393a: mov    0x40(%rsp),%rdi
  0x00007f8ab912393f: mov    0x48(%rsp),%rsi
  0x00007f8ab9123944: mov    0x50(%rsp),%rbp
  0x00007f8ab9123949: mov    0x60(%rsp),%rbx
  0x00007f8ab912394e: mov    0x68(%rsp),%rdx
  0x00007f8ab9123953: mov    0x70(%rsp),%rcx
  0x00007f8ab9123958: mov    0x78(%rsp),%rax
  0x00007f8ab912395d: add    $0x80,%rsp
  0x00007f8ab9123964: add    $0x8,%rsp
  0x00007f8ab9123968: popfq  
  0x00007f8ab9123969: mov    %r13,%rsp
  0x00007f8ab912396c: pop    %rax
  0x00007f8ab912396d: mov    %rsp,%r13
  0x00007f8ab9123970: sub    $0x30,%rsp
  0x00007f8ab9123974: mov    %rax,(%rsp)
  0x00007f8ab9123978: mov    %rsi,0x20(%rsp)
  0x00007f8ab912397d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9123982: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912398c: mov    %rax,0x10(%rsp)
  0x00007f8ab9123991: mov    %rcx,0x8(%rsp)
  0x00007f8ab9123996: mov    0x40(%rbx),%rcx
  0x00007f8ab912399a: jmpq   *%rcx

AHE@0x00007f8ac80d6c88: 0xbbbea000 i2c: 0x00007f8ab9123a60 c2i: 0x00007f8ab9123b80 c2iUV: 0x00007f8ab9123b53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9123b80
  0x00007f8ab9123a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9123a64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9123a6e: cmp    %r11,%rax
  0x00007f8ab9123a71: jbe    0x00007f8ab9123a8a
  0x00007f8ab9123a77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9123a81: cmp    %r11,%rax
  0x00007f8ab9123a84: jb     0x00007f8ab9123b27
  0x00007f8ab9123a8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9123a94: cmp    %r11,%rax
  0x00007f8ab9123a97: jbe    0x00007f8ab9123ab0
  0x00007f8ab9123a9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9123aa7: cmp    %r11,%rax
  0x00007f8ab9123aaa: jb     0x00007f8ab9123b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9123ab0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9123ab5: sub    $0x80,%rsp
  0x00007f8ab9123abc: mov    %rax,0x78(%rsp)
  0x00007f8ab9123ac1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9123ac6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9123acb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9123ad0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9123ad5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9123ada: mov    %rdi,0x40(%rsp)
  0x00007f8ab9123adf: mov    %r8,0x38(%rsp)
  0x00007f8ab9123ae4: mov    %r9,0x30(%rsp)
  0x00007f8ab9123ae9: mov    %r10,0x28(%rsp)
  0x00007f8ab9123aee: mov    %r11,0x20(%rsp)
  0x00007f8ab9123af3: mov    %r12,0x18(%rsp)
  0x00007f8ab9123af8: mov    %r13,0x10(%rsp)
  0x00007f8ab9123afd: mov    %r14,0x8(%rsp)
  0x00007f8ab9123b02: mov    %r15,(%rsp)
  0x00007f8ab9123b06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9123b10: movabs $0x7f8ab9123ab0,%rsi
  0x00007f8ab9123b1a: mov    %rsp,%rdx
  0x00007f8ab9123b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123b21: callq  0x00007f8aceddb9fa
  0x00007f8ab9123b26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9123b27: mov    %rsp,%r11
  0x00007f8ab9123b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123b2e: push   %rax
  0x00007f8ab9123b2f: mov    %r11,%rax
  0x00007f8ab9123b32: mov    0x50(%rbx),%r11
  0x00007f8ab9123b36: mov    0x28(%rax),%rsi
  0x00007f8ab9123b3a: mov    0x20(%rax),%rdx
  0x00007f8ab9123b3e: mov    0x10(%rax),%rcx
  0x00007f8ab9123b42: mov    0x8(%rax),%r8d
  0x00007f8ab9123b46: mov    %rbx,0x258(%r15)
  0x00007f8ab9123b4d: mov    %rbx,%rax
  0x00007f8ab9123b50: jmpq   *%r11
  0x00007f8ab9123b53: mov    0x8(%rsi),%ebx
  0x00007f8ab9123b56: shl    $0x3,%rbx
  0x00007f8ab9123b5a: cmp    0x10(%rax),%rbx
  0x00007f8ab9123b5e: mov    0x8(%rax),%rbx
  0x00007f8ab9123b62: je     0x00007f8ab9123b6d
  0x00007f8ab9123b68: jmpq   0x00007f8ab9105c40
  0x00007f8ab9123b6d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123b75: je     0x00007f8ab9123c70
  0x00007f8ab9123b7b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9123b80: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123b88: je     0x00007f8ab9123c70
  0x00007f8ab9123b8e: mov    %rsp,%r13
  0x00007f8ab9123b91: mov    (%rsp),%rax
  0x00007f8ab9123b95: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123b99: pushfq 
  0x00007f8ab9123b9a: sub    $0x8,%rsp
  0x00007f8ab9123b9e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9123ba3: sub    $0x80,%rsp
  0x00007f8ab9123baa: mov    %rax,0x78(%rsp)
  0x00007f8ab9123baf: mov    %rcx,0x70(%rsp)
  0x00007f8ab9123bb4: mov    %rdx,0x68(%rsp)
  0x00007f8ab9123bb9: mov    %rbx,0x60(%rsp)
  0x00007f8ab9123bbe: mov    %rbp,0x50(%rsp)
  0x00007f8ab9123bc3: mov    %rsi,0x48(%rsp)
  0x00007f8ab9123bc8: mov    %rdi,0x40(%rsp)
  0x00007f8ab9123bcd: mov    %r8,0x38(%rsp)
  0x00007f8ab9123bd2: mov    %r9,0x30(%rsp)
  0x00007f8ab9123bd7: mov    %r10,0x28(%rsp)
  0x00007f8ab9123bdc: mov    %r11,0x20(%rsp)
  0x00007f8ab9123be1: mov    %r12,0x18(%rsp)
  0x00007f8ab9123be6: mov    %r13,0x10(%rsp)
  0x00007f8ab9123beb: mov    %r14,0x8(%rsp)
  0x00007f8ab9123bf0: mov    %r15,(%rsp)
  0x00007f8ab9123bf4: sub    $0x200,%rsp
  0x00007f8ab9123bfb: fxsave64 (%rsp)
  0x00007f8ab9123c00: mov    %rbx,%rdi
  0x00007f8ab9123c03: mov    %rax,%rsi
  0x00007f8ab9123c06: callq  0x00007f8acef8bbca
  0x00007f8ab9123c0b: fxrstor64 (%rsp)
  0x00007f8ab9123c10: add    $0x200,%rsp
  0x00007f8ab9123c17: mov    (%rsp),%r15
  0x00007f8ab9123c1b: mov    0x8(%rsp),%r14
  0x00007f8ab9123c20: mov    0x10(%rsp),%r13
  0x00007f8ab9123c25: mov    0x18(%rsp),%r12
  0x00007f8ab9123c2a: mov    0x20(%rsp),%r11
  0x00007f8ab9123c2f: mov    0x28(%rsp),%r10
  0x00007f8ab9123c34: mov    0x30(%rsp),%r9
  0x00007f8ab9123c39: mov    0x38(%rsp),%r8
  0x00007f8ab9123c3e: mov    0x40(%rsp),%rdi
  0x00007f8ab9123c43: mov    0x48(%rsp),%rsi
  0x00007f8ab9123c48: mov    0x50(%rsp),%rbp
  0x00007f8ab9123c4d: mov    0x60(%rsp),%rbx
  0x00007f8ab9123c52: mov    0x68(%rsp),%rdx
  0x00007f8ab9123c57: mov    0x70(%rsp),%rcx
  0x00007f8ab9123c5c: mov    0x78(%rsp),%rax
  0x00007f8ab9123c61: add    $0x80,%rsp
  0x00007f8ab9123c68: add    $0x8,%rsp
  0x00007f8ab9123c6c: popfq  
  0x00007f8ab9123c6d: mov    %r13,%rsp
  0x00007f8ab9123c70: pop    %rax
  0x00007f8ab9123c71: mov    %rsp,%r13
  0x00007f8ab9123c74: sub    $0x30,%rsp
  0x00007f8ab9123c78: mov    %rax,(%rsp)
  0x00007f8ab9123c7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9123c81: mov    %rdx,0x20(%rsp)
  0x00007f8ab9123c86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9123c90: mov    %rax,0x18(%rsp)
  0x00007f8ab9123c95: mov    %rcx,0x10(%rsp)
  0x00007f8ab9123c9a: mov    %r8d,0x8(%rsp)
  0x00007f8ab9123c9f: mov    0x40(%rbx),%rcx
  0x00007f8ab9123ca3: jmpq   *%rcx

AHE@0x00007f8ac80d6cd0: 0xbbbe0000 i2c: 0x00007f8ab9123d60 c2i: 0x00007f8ab9123e7c c2iUV: 0x00007f8ab9123e4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)I (572 bytes generated)
c2i argument handler starts at 0x7f8ab9123e7c
  0x00007f8ab9123d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9123d64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9123d6e: cmp    %r11,%rax
  0x00007f8ab9123d71: jbe    0x00007f8ab9123d8a
  0x00007f8ab9123d77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9123d81: cmp    %r11,%rax
  0x00007f8ab9123d84: jb     0x00007f8ab9123e27
  0x00007f8ab9123d8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9123d94: cmp    %r11,%rax
  0x00007f8ab9123d97: jbe    0x00007f8ab9123db0
  0x00007f8ab9123d9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9123da7: cmp    %r11,%rax
  0x00007f8ab9123daa: jb     0x00007f8ab9123e27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9123db0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9123db5: sub    $0x80,%rsp
  0x00007f8ab9123dbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9123dc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9123dc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9123dcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9123dd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9123dd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9123dda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9123ddf: mov    %r8,0x38(%rsp)
  0x00007f8ab9123de4: mov    %r9,0x30(%rsp)
  0x00007f8ab9123de9: mov    %r10,0x28(%rsp)
  0x00007f8ab9123dee: mov    %r11,0x20(%rsp)
  0x00007f8ab9123df3: mov    %r12,0x18(%rsp)
  0x00007f8ab9123df8: mov    %r13,0x10(%rsp)
  0x00007f8ab9123dfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9123e02: mov    %r15,(%rsp)
  0x00007f8ab9123e06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9123e10: movabs $0x7f8ab9123db0,%rsi
  0x00007f8ab9123e1a: mov    %rsp,%rdx
  0x00007f8ab9123e1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123e21: callq  0x00007f8aceddb9fa
  0x00007f8ab9123e26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9123e27: mov    %rsp,%r11
  0x00007f8ab9123e2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123e2e: push   %rax
  0x00007f8ab9123e2f: mov    %r11,%rax
  0x00007f8ab9123e32: mov    0x50(%rbx),%r11
  0x00007f8ab9123e36: mov    0x20(%rax),%rsi
  0x00007f8ab9123e3a: mov    0x18(%rax),%rdx
  0x00007f8ab9123e3e: mov    0x8(%rax),%rcx
  0x00007f8ab9123e42: mov    %rbx,0x258(%r15)
  0x00007f8ab9123e49: mov    %rbx,%rax
  0x00007f8ab9123e4c: jmpq   *%r11
  0x00007f8ab9123e4f: mov    0x8(%rsi),%ebx
  0x00007f8ab9123e52: shl    $0x3,%rbx
  0x00007f8ab9123e56: cmp    0x10(%rax),%rbx
  0x00007f8ab9123e5a: mov    0x8(%rax),%rbx
  0x00007f8ab9123e5e: je     0x00007f8ab9123e69
  0x00007f8ab9123e64: jmpq   0x00007f8ab9105c40
  0x00007f8ab9123e69: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123e71: je     0x00007f8ab9123f6c
  0x00007f8ab9123e77: jmpq   0x00007f8ab9105c40
  0x00007f8ab9123e7c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9123e84: je     0x00007f8ab9123f6c
  0x00007f8ab9123e8a: mov    %rsp,%r13
  0x00007f8ab9123e8d: mov    (%rsp),%rax
  0x00007f8ab9123e91: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9123e95: pushfq 
  0x00007f8ab9123e96: sub    $0x8,%rsp
  0x00007f8ab9123e9a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9123e9f: sub    $0x80,%rsp
  0x00007f8ab9123ea6: mov    %rax,0x78(%rsp)
  0x00007f8ab9123eab: mov    %rcx,0x70(%rsp)
  0x00007f8ab9123eb0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9123eb5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9123eba: mov    %rbp,0x50(%rsp)
  0x00007f8ab9123ebf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9123ec4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9123ec9: mov    %r8,0x38(%rsp)
  0x00007f8ab9123ece: mov    %r9,0x30(%rsp)
  0x00007f8ab9123ed3: mov    %r10,0x28(%rsp)
  0x00007f8ab9123ed8: mov    %r11,0x20(%rsp)
  0x00007f8ab9123edd: mov    %r12,0x18(%rsp)
  0x00007f8ab9123ee2: mov    %r13,0x10(%rsp)
  0x00007f8ab9123ee7: mov    %r14,0x8(%rsp)
  0x00007f8ab9123eec: mov    %r15,(%rsp)
  0x00007f8ab9123ef0: sub    $0x200,%rsp
  0x00007f8ab9123ef7: fxsave64 (%rsp)
  0x00007f8ab9123efc: mov    %rbx,%rdi
  0x00007f8ab9123eff: mov    %rax,%rsi
  0x00007f8ab9123f02: callq  0x00007f8acef8bbca
  0x00007f8ab9123f07: fxrstor64 (%rsp)
  0x00007f8ab9123f0c: add    $0x200,%rsp
  0x00007f8ab9123f13: mov    (%rsp),%r15
  0x00007f8ab9123f17: mov    0x8(%rsp),%r14
  0x00007f8ab9123f1c: mov    0x10(%rsp),%r13
  0x00007f8ab9123f21: mov    0x18(%rsp),%r12
  0x00007f8ab9123f26: mov    0x20(%rsp),%r11
  0x00007f8ab9123f2b: mov    0x28(%rsp),%r10
  0x00007f8ab9123f30: mov    0x30(%rsp),%r9
  0x00007f8ab9123f35: mov    0x38(%rsp),%r8
  0x00007f8ab9123f3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9123f3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9123f44: mov    0x50(%rsp),%rbp
  0x00007f8ab9123f49: mov    0x60(%rsp),%rbx
  0x00007f8ab9123f4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9123f53: mov    0x70(%rsp),%rcx
  0x00007f8ab9123f58: mov    0x78(%rsp),%rax
  0x00007f8ab9123f5d: add    $0x80,%rsp
  0x00007f8ab9123f64: add    $0x8,%rsp
  0x00007f8ab9123f68: popfq  
  0x00007f8ab9123f69: mov    %r13,%rsp
  0x00007f8ab9123f6c: pop    %rax
  0x00007f8ab9123f6d: mov    %rsp,%r13
  0x00007f8ab9123f70: sub    $0x30,%rsp
  0x00007f8ab9123f74: mov    %rax,(%rsp)
  0x00007f8ab9123f78: mov    %rsi,0x20(%rsp)
  0x00007f8ab9123f7d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9123f82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9123f8c: mov    %rax,0x10(%rsp)
  0x00007f8ab9123f91: mov    %rcx,0x8(%rsp)
  0x00007f8ab9123f96: mov    0x40(%rbx),%rcx
  0x00007f8ab9123f9a: jmpq   *%rcx

AHE@0x00007f8ac80d6d18: 0xbbbea000 i2c: 0x00007f8ab9124060 c2i: 0x00007f8ab9124180 c2iUV: 0x00007f8ab9124153
i2c argument handler #0 for: receiver (Ljava/lang/Object;JC)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9124180
  0x00007f8ab9124060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9124064: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912406e: cmp    %r11,%rax
  0x00007f8ab9124071: jbe    0x00007f8ab912408a
  0x00007f8ab9124077: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9124081: cmp    %r11,%rax
  0x00007f8ab9124084: jb     0x00007f8ab9124127
  0x00007f8ab912408a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9124094: cmp    %r11,%rax
  0x00007f8ab9124097: jbe    0x00007f8ab91240b0
  0x00007f8ab912409d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91240a7: cmp    %r11,%rax
  0x00007f8ab91240aa: jb     0x00007f8ab9124127
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91240b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91240b5: sub    $0x80,%rsp
  0x00007f8ab91240bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91240c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91240c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91240cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91240d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91240d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91240da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91240df: mov    %r8,0x38(%rsp)
  0x00007f8ab91240e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91240e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91240ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91240f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91240f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91240fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9124102: mov    %r15,(%rsp)
  0x00007f8ab9124106: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9124110: movabs $0x7f8ab91240b0,%rsi
  0x00007f8ab912411a: mov    %rsp,%rdx
  0x00007f8ab912411d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124121: callq  0x00007f8aceddb9fa
  0x00007f8ab9124126: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9124127: mov    %rsp,%r11
  0x00007f8ab912412a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912412e: push   %rax
  0x00007f8ab912412f: mov    %r11,%rax
  0x00007f8ab9124132: mov    0x50(%rbx),%r11
  0x00007f8ab9124136: mov    0x28(%rax),%rsi
  0x00007f8ab912413a: mov    0x20(%rax),%rdx
  0x00007f8ab912413e: mov    0x10(%rax),%rcx
  0x00007f8ab9124142: mov    0x8(%rax),%r8d
  0x00007f8ab9124146: mov    %rbx,0x258(%r15)
  0x00007f8ab912414d: mov    %rbx,%rax
  0x00007f8ab9124150: jmpq   *%r11
  0x00007f8ab9124153: mov    0x8(%rsi),%ebx
  0x00007f8ab9124156: shl    $0x3,%rbx
  0x00007f8ab912415a: cmp    0x10(%rax),%rbx
  0x00007f8ab912415e: mov    0x8(%rax),%rbx
  0x00007f8ab9124162: je     0x00007f8ab912416d
  0x00007f8ab9124168: jmpq   0x00007f8ab9105c40
  0x00007f8ab912416d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124175: je     0x00007f8ab9124270
  0x00007f8ab912417b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9124180: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124188: je     0x00007f8ab9124270
  0x00007f8ab912418e: mov    %rsp,%r13
  0x00007f8ab9124191: mov    (%rsp),%rax
  0x00007f8ab9124195: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124199: pushfq 
  0x00007f8ab912419a: sub    $0x8,%rsp
  0x00007f8ab912419e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91241a3: sub    $0x80,%rsp
  0x00007f8ab91241aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91241af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91241b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91241b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91241be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91241c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91241c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91241cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91241d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91241d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91241dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91241e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91241e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91241eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91241f0: mov    %r15,(%rsp)
  0x00007f8ab91241f4: sub    $0x200,%rsp
  0x00007f8ab91241fb: fxsave64 (%rsp)
  0x00007f8ab9124200: mov    %rbx,%rdi
  0x00007f8ab9124203: mov    %rax,%rsi
  0x00007f8ab9124206: callq  0x00007f8acef8bbca
  0x00007f8ab912420b: fxrstor64 (%rsp)
  0x00007f8ab9124210: add    $0x200,%rsp
  0x00007f8ab9124217: mov    (%rsp),%r15
  0x00007f8ab912421b: mov    0x8(%rsp),%r14
  0x00007f8ab9124220: mov    0x10(%rsp),%r13
  0x00007f8ab9124225: mov    0x18(%rsp),%r12
  0x00007f8ab912422a: mov    0x20(%rsp),%r11
  0x00007f8ab912422f: mov    0x28(%rsp),%r10
  0x00007f8ab9124234: mov    0x30(%rsp),%r9
  0x00007f8ab9124239: mov    0x38(%rsp),%r8
  0x00007f8ab912423e: mov    0x40(%rsp),%rdi
  0x00007f8ab9124243: mov    0x48(%rsp),%rsi
  0x00007f8ab9124248: mov    0x50(%rsp),%rbp
  0x00007f8ab912424d: mov    0x60(%rsp),%rbx
  0x00007f8ab9124252: mov    0x68(%rsp),%rdx
  0x00007f8ab9124257: mov    0x70(%rsp),%rcx
  0x00007f8ab912425c: mov    0x78(%rsp),%rax
  0x00007f8ab9124261: add    $0x80,%rsp
  0x00007f8ab9124268: add    $0x8,%rsp
  0x00007f8ab912426c: popfq  
  0x00007f8ab912426d: mov    %r13,%rsp
  0x00007f8ab9124270: pop    %rax
  0x00007f8ab9124271: mov    %rsp,%r13
  0x00007f8ab9124274: sub    $0x30,%rsp
  0x00007f8ab9124278: mov    %rax,(%rsp)
  0x00007f8ab912427c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9124281: mov    %rdx,0x20(%rsp)
  0x00007f8ab9124286: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9124290: mov    %rax,0x18(%rsp)
  0x00007f8ab9124295: mov    %rcx,0x10(%rsp)
  0x00007f8ab912429a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912429f: mov    0x40(%rbx),%rcx
  0x00007f8ab91242a3: jmpq   *%rcx

AHE@0x00007f8ac80d6d60: 0xbbbe0000 i2c: 0x00007f8ab9124360 c2i: 0x00007f8ab912447c c2iUV: 0x00007f8ab912444f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)C (572 bytes generated)
c2i argument handler starts at 0x7f8ab912447c
  0x00007f8ab9124360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9124364: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912436e: cmp    %r11,%rax
  0x00007f8ab9124371: jbe    0x00007f8ab912438a
  0x00007f8ab9124377: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9124381: cmp    %r11,%rax
  0x00007f8ab9124384: jb     0x00007f8ab9124427
  0x00007f8ab912438a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9124394: cmp    %r11,%rax
  0x00007f8ab9124397: jbe    0x00007f8ab91243b0
  0x00007f8ab912439d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91243a7: cmp    %r11,%rax
  0x00007f8ab91243aa: jb     0x00007f8ab9124427
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91243b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91243b5: sub    $0x80,%rsp
  0x00007f8ab91243bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91243c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91243c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91243cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91243d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91243d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91243da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91243df: mov    %r8,0x38(%rsp)
  0x00007f8ab91243e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91243e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91243ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91243f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91243f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91243fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9124402: mov    %r15,(%rsp)
  0x00007f8ab9124406: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9124410: movabs $0x7f8ab91243b0,%rsi
  0x00007f8ab912441a: mov    %rsp,%rdx
  0x00007f8ab912441d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124421: callq  0x00007f8aceddb9fa
  0x00007f8ab9124426: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9124427: mov    %rsp,%r11
  0x00007f8ab912442a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912442e: push   %rax
  0x00007f8ab912442f: mov    %r11,%rax
  0x00007f8ab9124432: mov    0x50(%rbx),%r11
  0x00007f8ab9124436: mov    0x20(%rax),%rsi
  0x00007f8ab912443a: mov    0x18(%rax),%rdx
  0x00007f8ab912443e: mov    0x8(%rax),%rcx
  0x00007f8ab9124442: mov    %rbx,0x258(%r15)
  0x00007f8ab9124449: mov    %rbx,%rax
  0x00007f8ab912444c: jmpq   *%r11
  0x00007f8ab912444f: mov    0x8(%rsi),%ebx
  0x00007f8ab9124452: shl    $0x3,%rbx
  0x00007f8ab9124456: cmp    0x10(%rax),%rbx
  0x00007f8ab912445a: mov    0x8(%rax),%rbx
  0x00007f8ab912445e: je     0x00007f8ab9124469
  0x00007f8ab9124464: jmpq   0x00007f8ab9105c40
  0x00007f8ab9124469: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124471: je     0x00007f8ab912456c
  0x00007f8ab9124477: jmpq   0x00007f8ab9105c40
  0x00007f8ab912447c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124484: je     0x00007f8ab912456c
  0x00007f8ab912448a: mov    %rsp,%r13
  0x00007f8ab912448d: mov    (%rsp),%rax
  0x00007f8ab9124491: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124495: pushfq 
  0x00007f8ab9124496: sub    $0x8,%rsp
  0x00007f8ab912449a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912449f: sub    $0x80,%rsp
  0x00007f8ab91244a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91244ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91244b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91244b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91244ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91244bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91244c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91244c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91244ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91244d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91244d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91244dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91244e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91244e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91244ec: mov    %r15,(%rsp)
  0x00007f8ab91244f0: sub    $0x200,%rsp
  0x00007f8ab91244f7: fxsave64 (%rsp)
  0x00007f8ab91244fc: mov    %rbx,%rdi
  0x00007f8ab91244ff: mov    %rax,%rsi
  0x00007f8ab9124502: callq  0x00007f8acef8bbca
  0x00007f8ab9124507: fxrstor64 (%rsp)
  0x00007f8ab912450c: add    $0x200,%rsp
  0x00007f8ab9124513: mov    (%rsp),%r15
  0x00007f8ab9124517: mov    0x8(%rsp),%r14
  0x00007f8ab912451c: mov    0x10(%rsp),%r13
  0x00007f8ab9124521: mov    0x18(%rsp),%r12
  0x00007f8ab9124526: mov    0x20(%rsp),%r11
  0x00007f8ab912452b: mov    0x28(%rsp),%r10
  0x00007f8ab9124530: mov    0x30(%rsp),%r9
  0x00007f8ab9124535: mov    0x38(%rsp),%r8
  0x00007f8ab912453a: mov    0x40(%rsp),%rdi
  0x00007f8ab912453f: mov    0x48(%rsp),%rsi
  0x00007f8ab9124544: mov    0x50(%rsp),%rbp
  0x00007f8ab9124549: mov    0x60(%rsp),%rbx
  0x00007f8ab912454e: mov    0x68(%rsp),%rdx
  0x00007f8ab9124553: mov    0x70(%rsp),%rcx
  0x00007f8ab9124558: mov    0x78(%rsp),%rax
  0x00007f8ab912455d: add    $0x80,%rsp
  0x00007f8ab9124564: add    $0x8,%rsp
  0x00007f8ab9124568: popfq  
  0x00007f8ab9124569: mov    %r13,%rsp
  0x00007f8ab912456c: pop    %rax
  0x00007f8ab912456d: mov    %rsp,%r13
  0x00007f8ab9124570: sub    $0x30,%rsp
  0x00007f8ab9124574: mov    %rax,(%rsp)
  0x00007f8ab9124578: mov    %rsi,0x20(%rsp)
  0x00007f8ab912457d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9124582: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912458c: mov    %rax,0x10(%rsp)
  0x00007f8ab9124591: mov    %rcx,0x8(%rsp)
  0x00007f8ab9124596: mov    0x40(%rbx),%rcx
  0x00007f8ab912459a: jmpq   *%rcx

AHE@0x00007f8ac80d6da8: 0xbbbea000 i2c: 0x00007f8ab9124660 c2i: 0x00007f8ab9124780 c2iUV: 0x00007f8ab9124753
i2c argument handler #0 for: receiver (Ljava/lang/Object;JS)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9124780
  0x00007f8ab9124660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9124664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912466e: cmp    %r11,%rax
  0x00007f8ab9124671: jbe    0x00007f8ab912468a
  0x00007f8ab9124677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9124681: cmp    %r11,%rax
  0x00007f8ab9124684: jb     0x00007f8ab9124727
  0x00007f8ab912468a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9124694: cmp    %r11,%rax
  0x00007f8ab9124697: jbe    0x00007f8ab91246b0
  0x00007f8ab912469d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91246a7: cmp    %r11,%rax
  0x00007f8ab91246aa: jb     0x00007f8ab9124727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91246b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91246b5: sub    $0x80,%rsp
  0x00007f8ab91246bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91246c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91246c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91246cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91246d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91246d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91246da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91246df: mov    %r8,0x38(%rsp)
  0x00007f8ab91246e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91246e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91246ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91246f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91246f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91246fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9124702: mov    %r15,(%rsp)
  0x00007f8ab9124706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9124710: movabs $0x7f8ab91246b0,%rsi
  0x00007f8ab912471a: mov    %rsp,%rdx
  0x00007f8ab912471d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124721: callq  0x00007f8aceddb9fa
  0x00007f8ab9124726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9124727: mov    %rsp,%r11
  0x00007f8ab912472a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912472e: push   %rax
  0x00007f8ab912472f: mov    %r11,%rax
  0x00007f8ab9124732: mov    0x50(%rbx),%r11
  0x00007f8ab9124736: mov    0x28(%rax),%rsi
  0x00007f8ab912473a: mov    0x20(%rax),%rdx
  0x00007f8ab912473e: mov    0x10(%rax),%rcx
  0x00007f8ab9124742: mov    0x8(%rax),%r8d
  0x00007f8ab9124746: mov    %rbx,0x258(%r15)
  0x00007f8ab912474d: mov    %rbx,%rax
  0x00007f8ab9124750: jmpq   *%r11
  0x00007f8ab9124753: mov    0x8(%rsi),%ebx
  0x00007f8ab9124756: shl    $0x3,%rbx
  0x00007f8ab912475a: cmp    0x10(%rax),%rbx
  0x00007f8ab912475e: mov    0x8(%rax),%rbx
  0x00007f8ab9124762: je     0x00007f8ab912476d
  0x00007f8ab9124768: jmpq   0x00007f8ab9105c40
  0x00007f8ab912476d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124775: je     0x00007f8ab9124870
  0x00007f8ab912477b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9124780: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124788: je     0x00007f8ab9124870
  0x00007f8ab912478e: mov    %rsp,%r13
  0x00007f8ab9124791: mov    (%rsp),%rax
  0x00007f8ab9124795: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124799: pushfq 
  0x00007f8ab912479a: sub    $0x8,%rsp
  0x00007f8ab912479e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91247a3: sub    $0x80,%rsp
  0x00007f8ab91247aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91247af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91247b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91247b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91247be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91247c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91247c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91247cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91247d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91247d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91247dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91247e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91247e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91247eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91247f0: mov    %r15,(%rsp)
  0x00007f8ab91247f4: sub    $0x200,%rsp
  0x00007f8ab91247fb: fxsave64 (%rsp)
  0x00007f8ab9124800: mov    %rbx,%rdi
  0x00007f8ab9124803: mov    %rax,%rsi
  0x00007f8ab9124806: callq  0x00007f8acef8bbca
  0x00007f8ab912480b: fxrstor64 (%rsp)
  0x00007f8ab9124810: add    $0x200,%rsp
  0x00007f8ab9124817: mov    (%rsp),%r15
  0x00007f8ab912481b: mov    0x8(%rsp),%r14
  0x00007f8ab9124820: mov    0x10(%rsp),%r13
  0x00007f8ab9124825: mov    0x18(%rsp),%r12
  0x00007f8ab912482a: mov    0x20(%rsp),%r11
  0x00007f8ab912482f: mov    0x28(%rsp),%r10
  0x00007f8ab9124834: mov    0x30(%rsp),%r9
  0x00007f8ab9124839: mov    0x38(%rsp),%r8
  0x00007f8ab912483e: mov    0x40(%rsp),%rdi
  0x00007f8ab9124843: mov    0x48(%rsp),%rsi
  0x00007f8ab9124848: mov    0x50(%rsp),%rbp
  0x00007f8ab912484d: mov    0x60(%rsp),%rbx
  0x00007f8ab9124852: mov    0x68(%rsp),%rdx
  0x00007f8ab9124857: mov    0x70(%rsp),%rcx
  0x00007f8ab912485c: mov    0x78(%rsp),%rax
  0x00007f8ab9124861: add    $0x80,%rsp
  0x00007f8ab9124868: add    $0x8,%rsp
  0x00007f8ab912486c: popfq  
  0x00007f8ab912486d: mov    %r13,%rsp
  0x00007f8ab9124870: pop    %rax
  0x00007f8ab9124871: mov    %rsp,%r13
  0x00007f8ab9124874: sub    $0x30,%rsp
  0x00007f8ab9124878: mov    %rax,(%rsp)
  0x00007f8ab912487c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9124881: mov    %rdx,0x20(%rsp)
  0x00007f8ab9124886: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9124890: mov    %rax,0x18(%rsp)
  0x00007f8ab9124895: mov    %rcx,0x10(%rsp)
  0x00007f8ab912489a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912489f: mov    0x40(%rbx),%rcx
  0x00007f8ab91248a3: jmpq   *%rcx

AHE@0x00007f8ac80d6df0: 0xbbbe0000 i2c: 0x00007f8ab9124960 c2i: 0x00007f8ab9124a7c c2iUV: 0x00007f8ab9124a4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)S (572 bytes generated)
c2i argument handler starts at 0x7f8ab9124a7c
  0x00007f8ab9124960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9124964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912496e: cmp    %r11,%rax
  0x00007f8ab9124971: jbe    0x00007f8ab912498a
  0x00007f8ab9124977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9124981: cmp    %r11,%rax
  0x00007f8ab9124984: jb     0x00007f8ab9124a27
  0x00007f8ab912498a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9124994: cmp    %r11,%rax
  0x00007f8ab9124997: jbe    0x00007f8ab91249b0
  0x00007f8ab912499d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91249a7: cmp    %r11,%rax
  0x00007f8ab91249aa: jb     0x00007f8ab9124a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91249b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91249b5: sub    $0x80,%rsp
  0x00007f8ab91249bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91249c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91249c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91249cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91249d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91249d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91249da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91249df: mov    %r8,0x38(%rsp)
  0x00007f8ab91249e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91249e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91249ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91249f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91249f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91249fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9124a02: mov    %r15,(%rsp)
  0x00007f8ab9124a06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9124a10: movabs $0x7f8ab91249b0,%rsi
  0x00007f8ab9124a1a: mov    %rsp,%rdx
  0x00007f8ab9124a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124a21: callq  0x00007f8aceddb9fa
  0x00007f8ab9124a26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9124a27: mov    %rsp,%r11
  0x00007f8ab9124a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124a2e: push   %rax
  0x00007f8ab9124a2f: mov    %r11,%rax
  0x00007f8ab9124a32: mov    0x50(%rbx),%r11
  0x00007f8ab9124a36: mov    0x20(%rax),%rsi
  0x00007f8ab9124a3a: mov    0x18(%rax),%rdx
  0x00007f8ab9124a3e: mov    0x8(%rax),%rcx
  0x00007f8ab9124a42: mov    %rbx,0x258(%r15)
  0x00007f8ab9124a49: mov    %rbx,%rax
  0x00007f8ab9124a4c: jmpq   *%r11
  0x00007f8ab9124a4f: mov    0x8(%rsi),%ebx
  0x00007f8ab9124a52: shl    $0x3,%rbx
  0x00007f8ab9124a56: cmp    0x10(%rax),%rbx
  0x00007f8ab9124a5a: mov    0x8(%rax),%rbx
  0x00007f8ab9124a5e: je     0x00007f8ab9124a69
  0x00007f8ab9124a64: jmpq   0x00007f8ab9105c40
  0x00007f8ab9124a69: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124a71: je     0x00007f8ab9124b6c
  0x00007f8ab9124a77: jmpq   0x00007f8ab9105c40
  0x00007f8ab9124a7c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124a84: je     0x00007f8ab9124b6c
  0x00007f8ab9124a8a: mov    %rsp,%r13
  0x00007f8ab9124a8d: mov    (%rsp),%rax
  0x00007f8ab9124a91: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124a95: pushfq 
  0x00007f8ab9124a96: sub    $0x8,%rsp
  0x00007f8ab9124a9a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9124a9f: sub    $0x80,%rsp
  0x00007f8ab9124aa6: mov    %rax,0x78(%rsp)
  0x00007f8ab9124aab: mov    %rcx,0x70(%rsp)
  0x00007f8ab9124ab0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9124ab5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9124aba: mov    %rbp,0x50(%rsp)
  0x00007f8ab9124abf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9124ac4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9124ac9: mov    %r8,0x38(%rsp)
  0x00007f8ab9124ace: mov    %r9,0x30(%rsp)
  0x00007f8ab9124ad3: mov    %r10,0x28(%rsp)
  0x00007f8ab9124ad8: mov    %r11,0x20(%rsp)
  0x00007f8ab9124add: mov    %r12,0x18(%rsp)
  0x00007f8ab9124ae2: mov    %r13,0x10(%rsp)
  0x00007f8ab9124ae7: mov    %r14,0x8(%rsp)
  0x00007f8ab9124aec: mov    %r15,(%rsp)
  0x00007f8ab9124af0: sub    $0x200,%rsp
  0x00007f8ab9124af7: fxsave64 (%rsp)
  0x00007f8ab9124afc: mov    %rbx,%rdi
  0x00007f8ab9124aff: mov    %rax,%rsi
  0x00007f8ab9124b02: callq  0x00007f8acef8bbca
  0x00007f8ab9124b07: fxrstor64 (%rsp)
  0x00007f8ab9124b0c: add    $0x200,%rsp
  0x00007f8ab9124b13: mov    (%rsp),%r15
  0x00007f8ab9124b17: mov    0x8(%rsp),%r14
  0x00007f8ab9124b1c: mov    0x10(%rsp),%r13
  0x00007f8ab9124b21: mov    0x18(%rsp),%r12
  0x00007f8ab9124b26: mov    0x20(%rsp),%r11
  0x00007f8ab9124b2b: mov    0x28(%rsp),%r10
  0x00007f8ab9124b30: mov    0x30(%rsp),%r9
  0x00007f8ab9124b35: mov    0x38(%rsp),%r8
  0x00007f8ab9124b3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9124b3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9124b44: mov    0x50(%rsp),%rbp
  0x00007f8ab9124b49: mov    0x60(%rsp),%rbx
  0x00007f8ab9124b4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9124b53: mov    0x70(%rsp),%rcx
  0x00007f8ab9124b58: mov    0x78(%rsp),%rax
  0x00007f8ab9124b5d: add    $0x80,%rsp
  0x00007f8ab9124b64: add    $0x8,%rsp
  0x00007f8ab9124b68: popfq  
  0x00007f8ab9124b69: mov    %r13,%rsp
  0x00007f8ab9124b6c: pop    %rax
  0x00007f8ab9124b6d: mov    %rsp,%r13
  0x00007f8ab9124b70: sub    $0x30,%rsp
  0x00007f8ab9124b74: mov    %rax,(%rsp)
  0x00007f8ab9124b78: mov    %rsi,0x20(%rsp)
  0x00007f8ab9124b7d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9124b82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9124b8c: mov    %rax,0x10(%rsp)
  0x00007f8ab9124b91: mov    %rcx,0x8(%rsp)
  0x00007f8ab9124b96: mov    0x40(%rbx),%rcx
  0x00007f8ab9124b9a: jmpq   *%rcx

AHE@0x00007f8ac80d6e38: 0xbbbea000 i2c: 0x00007f8ab9124c60 c2i: 0x00007f8ab9124d80 c2iUV: 0x00007f8ab9124d53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JB)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9124d80
  0x00007f8ab9124c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9124c64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9124c6e: cmp    %r11,%rax
  0x00007f8ab9124c71: jbe    0x00007f8ab9124c8a
  0x00007f8ab9124c77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9124c81: cmp    %r11,%rax
  0x00007f8ab9124c84: jb     0x00007f8ab9124d27
  0x00007f8ab9124c8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9124c94: cmp    %r11,%rax
  0x00007f8ab9124c97: jbe    0x00007f8ab9124cb0
  0x00007f8ab9124c9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9124ca7: cmp    %r11,%rax
  0x00007f8ab9124caa: jb     0x00007f8ab9124d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9124cb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9124cb5: sub    $0x80,%rsp
  0x00007f8ab9124cbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9124cc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9124cc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9124ccb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9124cd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9124cd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9124cda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9124cdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9124ce4: mov    %r9,0x30(%rsp)
  0x00007f8ab9124ce9: mov    %r10,0x28(%rsp)
  0x00007f8ab9124cee: mov    %r11,0x20(%rsp)
  0x00007f8ab9124cf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9124cf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9124cfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9124d02: mov    %r15,(%rsp)
  0x00007f8ab9124d06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9124d10: movabs $0x7f8ab9124cb0,%rsi
  0x00007f8ab9124d1a: mov    %rsp,%rdx
  0x00007f8ab9124d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124d21: callq  0x00007f8aceddb9fa
  0x00007f8ab9124d26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9124d27: mov    %rsp,%r11
  0x00007f8ab9124d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124d2e: push   %rax
  0x00007f8ab9124d2f: mov    %r11,%rax
  0x00007f8ab9124d32: mov    0x50(%rbx),%r11
  0x00007f8ab9124d36: mov    0x28(%rax),%rsi
  0x00007f8ab9124d3a: mov    0x20(%rax),%rdx
  0x00007f8ab9124d3e: mov    0x10(%rax),%rcx
  0x00007f8ab9124d42: mov    0x8(%rax),%r8d
  0x00007f8ab9124d46: mov    %rbx,0x258(%r15)
  0x00007f8ab9124d4d: mov    %rbx,%rax
  0x00007f8ab9124d50: jmpq   *%r11
  0x00007f8ab9124d53: mov    0x8(%rsi),%ebx
  0x00007f8ab9124d56: shl    $0x3,%rbx
  0x00007f8ab9124d5a: cmp    0x10(%rax),%rbx
  0x00007f8ab9124d5e: mov    0x8(%rax),%rbx
  0x00007f8ab9124d62: je     0x00007f8ab9124d6d
  0x00007f8ab9124d68: jmpq   0x00007f8ab9105c40
  0x00007f8ab9124d6d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124d75: je     0x00007f8ab9124e70
  0x00007f8ab9124d7b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9124d80: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9124d88: je     0x00007f8ab9124e70
  0x00007f8ab9124d8e: mov    %rsp,%r13
  0x00007f8ab9124d91: mov    (%rsp),%rax
  0x00007f8ab9124d95: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9124d99: pushfq 
  0x00007f8ab9124d9a: sub    $0x8,%rsp
  0x00007f8ab9124d9e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9124da3: sub    $0x80,%rsp
  0x00007f8ab9124daa: mov    %rax,0x78(%rsp)
  0x00007f8ab9124daf: mov    %rcx,0x70(%rsp)
  0x00007f8ab9124db4: mov    %rdx,0x68(%rsp)
  0x00007f8ab9124db9: mov    %rbx,0x60(%rsp)
  0x00007f8ab9124dbe: mov    %rbp,0x50(%rsp)
  0x00007f8ab9124dc3: mov    %rsi,0x48(%rsp)
  0x00007f8ab9124dc8: mov    %rdi,0x40(%rsp)
  0x00007f8ab9124dcd: mov    %r8,0x38(%rsp)
  0x00007f8ab9124dd2: mov    %r9,0x30(%rsp)
  0x00007f8ab9124dd7: mov    %r10,0x28(%rsp)
  0x00007f8ab9124ddc: mov    %r11,0x20(%rsp)
  0x00007f8ab9124de1: mov    %r12,0x18(%rsp)
  0x00007f8ab9124de6: mov    %r13,0x10(%rsp)
  0x00007f8ab9124deb: mov    %r14,0x8(%rsp)
  0x00007f8ab9124df0: mov    %r15,(%rsp)
  0x00007f8ab9124df4: sub    $0x200,%rsp
  0x00007f8ab9124dfb: fxsave64 (%rsp)
  0x00007f8ab9124e00: mov    %rbx,%rdi
  0x00007f8ab9124e03: mov    %rax,%rsi
  0x00007f8ab9124e06: callq  0x00007f8acef8bbca
  0x00007f8ab9124e0b: fxrstor64 (%rsp)
  0x00007f8ab9124e10: add    $0x200,%rsp
  0x00007f8ab9124e17: mov    (%rsp),%r15
  0x00007f8ab9124e1b: mov    0x8(%rsp),%r14
  0x00007f8ab9124e20: mov    0x10(%rsp),%r13
  0x00007f8ab9124e25: mov    0x18(%rsp),%r12
  0x00007f8ab9124e2a: mov    0x20(%rsp),%r11
  0x00007f8ab9124e2f: mov    0x28(%rsp),%r10
  0x00007f8ab9124e34: mov    0x30(%rsp),%r9
  0x00007f8ab9124e39: mov    0x38(%rsp),%r8
  0x00007f8ab9124e3e: mov    0x40(%rsp),%rdi
  0x00007f8ab9124e43: mov    0x48(%rsp),%rsi
  0x00007f8ab9124e48: mov    0x50(%rsp),%rbp
  0x00007f8ab9124e4d: mov    0x60(%rsp),%rbx
  0x00007f8ab9124e52: mov    0x68(%rsp),%rdx
  0x00007f8ab9124e57: mov    0x70(%rsp),%rcx
  0x00007f8ab9124e5c: mov    0x78(%rsp),%rax
  0x00007f8ab9124e61: add    $0x80,%rsp
  0x00007f8ab9124e68: add    $0x8,%rsp
  0x00007f8ab9124e6c: popfq  
  0x00007f8ab9124e6d: mov    %r13,%rsp
  0x00007f8ab9124e70: pop    %rax
  0x00007f8ab9124e71: mov    %rsp,%r13
  0x00007f8ab9124e74: sub    $0x30,%rsp
  0x00007f8ab9124e78: mov    %rax,(%rsp)
  0x00007f8ab9124e7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9124e81: mov    %rdx,0x20(%rsp)
  0x00007f8ab9124e86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9124e90: mov    %rax,0x18(%rsp)
  0x00007f8ab9124e95: mov    %rcx,0x10(%rsp)
  0x00007f8ab9124e9a: mov    %r8d,0x8(%rsp)
  0x00007f8ab9124e9f: mov    0x40(%rbx),%rcx
  0x00007f8ab9124ea3: jmpq   *%rcx

AHE@0x00007f8ac80d6e80: 0xbbbe0000 i2c: 0x00007f8ab9124f60 c2i: 0x00007f8ab912507c c2iUV: 0x00007f8ab912504f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)B (572 bytes generated)
c2i argument handler starts at 0x7f8ab912507c
  0x00007f8ab9124f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9124f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9124f6e: cmp    %r11,%rax
  0x00007f8ab9124f71: jbe    0x00007f8ab9124f8a
  0x00007f8ab9124f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9124f81: cmp    %r11,%rax
  0x00007f8ab9124f84: jb     0x00007f8ab9125027
  0x00007f8ab9124f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9124f94: cmp    %r11,%rax
  0x00007f8ab9124f97: jbe    0x00007f8ab9124fb0
  0x00007f8ab9124f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9124fa7: cmp    %r11,%rax
  0x00007f8ab9124faa: jb     0x00007f8ab9125027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9124fb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9124fb5: sub    $0x80,%rsp
  0x00007f8ab9124fbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9124fc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9124fc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9124fcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9124fd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9124fd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9124fda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9124fdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9124fe4: mov    %r9,0x30(%rsp)
  0x00007f8ab9124fe9: mov    %r10,0x28(%rsp)
  0x00007f8ab9124fee: mov    %r11,0x20(%rsp)
  0x00007f8ab9124ff3: mov    %r12,0x18(%rsp)
  0x00007f8ab9124ff8: mov    %r13,0x10(%rsp)
  0x00007f8ab9124ffd: mov    %r14,0x8(%rsp)
  0x00007f8ab9125002: mov    %r15,(%rsp)
  0x00007f8ab9125006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9125010: movabs $0x7f8ab9124fb0,%rsi
  0x00007f8ab912501a: mov    %rsp,%rdx
  0x00007f8ab912501d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125021: callq  0x00007f8aceddb9fa
  0x00007f8ab9125026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9125027: mov    %rsp,%r11
  0x00007f8ab912502a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912502e: push   %rax
  0x00007f8ab912502f: mov    %r11,%rax
  0x00007f8ab9125032: mov    0x50(%rbx),%r11
  0x00007f8ab9125036: mov    0x20(%rax),%rsi
  0x00007f8ab912503a: mov    0x18(%rax),%rdx
  0x00007f8ab912503e: mov    0x8(%rax),%rcx
  0x00007f8ab9125042: mov    %rbx,0x258(%r15)
  0x00007f8ab9125049: mov    %rbx,%rax
  0x00007f8ab912504c: jmpq   *%r11
  0x00007f8ab912504f: mov    0x8(%rsi),%ebx
  0x00007f8ab9125052: shl    $0x3,%rbx
  0x00007f8ab9125056: cmp    0x10(%rax),%rbx
  0x00007f8ab912505a: mov    0x8(%rax),%rbx
  0x00007f8ab912505e: je     0x00007f8ab9125069
  0x00007f8ab9125064: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125069: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125071: je     0x00007f8ab912516c
  0x00007f8ab9125077: jmpq   0x00007f8ab9105c40
  0x00007f8ab912507c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125084: je     0x00007f8ab912516c
  0x00007f8ab912508a: mov    %rsp,%r13
  0x00007f8ab912508d: mov    (%rsp),%rax
  0x00007f8ab9125091: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125095: pushfq 
  0x00007f8ab9125096: sub    $0x8,%rsp
  0x00007f8ab912509a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912509f: sub    $0x80,%rsp
  0x00007f8ab91250a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91250ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91250b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91250b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91250ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91250bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91250c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91250c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91250ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91250d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91250d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91250dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91250e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91250e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91250ec: mov    %r15,(%rsp)
  0x00007f8ab91250f0: sub    $0x200,%rsp
  0x00007f8ab91250f7: fxsave64 (%rsp)
  0x00007f8ab91250fc: mov    %rbx,%rdi
  0x00007f8ab91250ff: mov    %rax,%rsi
  0x00007f8ab9125102: callq  0x00007f8acef8bbca
  0x00007f8ab9125107: fxrstor64 (%rsp)
  0x00007f8ab912510c: add    $0x200,%rsp
  0x00007f8ab9125113: mov    (%rsp),%r15
  0x00007f8ab9125117: mov    0x8(%rsp),%r14
  0x00007f8ab912511c: mov    0x10(%rsp),%r13
  0x00007f8ab9125121: mov    0x18(%rsp),%r12
  0x00007f8ab9125126: mov    0x20(%rsp),%r11
  0x00007f8ab912512b: mov    0x28(%rsp),%r10
  0x00007f8ab9125130: mov    0x30(%rsp),%r9
  0x00007f8ab9125135: mov    0x38(%rsp),%r8
  0x00007f8ab912513a: mov    0x40(%rsp),%rdi
  0x00007f8ab912513f: mov    0x48(%rsp),%rsi
  0x00007f8ab9125144: mov    0x50(%rsp),%rbp
  0x00007f8ab9125149: mov    0x60(%rsp),%rbx
  0x00007f8ab912514e: mov    0x68(%rsp),%rdx
  0x00007f8ab9125153: mov    0x70(%rsp),%rcx
  0x00007f8ab9125158: mov    0x78(%rsp),%rax
  0x00007f8ab912515d: add    $0x80,%rsp
  0x00007f8ab9125164: add    $0x8,%rsp
  0x00007f8ab9125168: popfq  
  0x00007f8ab9125169: mov    %r13,%rsp
  0x00007f8ab912516c: pop    %rax
  0x00007f8ab912516d: mov    %rsp,%r13
  0x00007f8ab9125170: sub    $0x30,%rsp
  0x00007f8ab9125174: mov    %rax,(%rsp)
  0x00007f8ab9125178: mov    %rsi,0x20(%rsp)
  0x00007f8ab912517d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9125182: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912518c: mov    %rax,0x10(%rsp)
  0x00007f8ab9125191: mov    %rcx,0x8(%rsp)
  0x00007f8ab9125196: mov    0x40(%rbx),%rcx
  0x00007f8ab912519a: jmpq   *%rcx

AHE@0x00007f8ac80d6ec8: 0xbbbea000 i2c: 0x00007f8ab9125260 c2i: 0x00007f8ab9125380 c2iUV: 0x00007f8ab9125353
i2c argument handler #0 for: receiver (Ljava/lang/Object;JZ)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9125380
  0x00007f8ab9125260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9125264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912526e: cmp    %r11,%rax
  0x00007f8ab9125271: jbe    0x00007f8ab912528a
  0x00007f8ab9125277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9125281: cmp    %r11,%rax
  0x00007f8ab9125284: jb     0x00007f8ab9125327
  0x00007f8ab912528a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9125294: cmp    %r11,%rax
  0x00007f8ab9125297: jbe    0x00007f8ab91252b0
  0x00007f8ab912529d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91252a7: cmp    %r11,%rax
  0x00007f8ab91252aa: jb     0x00007f8ab9125327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91252b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91252b5: sub    $0x80,%rsp
  0x00007f8ab91252bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91252c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91252c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91252cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91252d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91252d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91252da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91252df: mov    %r8,0x38(%rsp)
  0x00007f8ab91252e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91252e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91252ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91252f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91252f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91252fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9125302: mov    %r15,(%rsp)
  0x00007f8ab9125306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9125310: movabs $0x7f8ab91252b0,%rsi
  0x00007f8ab912531a: mov    %rsp,%rdx
  0x00007f8ab912531d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125321: callq  0x00007f8aceddb9fa
  0x00007f8ab9125326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9125327: mov    %rsp,%r11
  0x00007f8ab912532a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912532e: push   %rax
  0x00007f8ab912532f: mov    %r11,%rax
  0x00007f8ab9125332: mov    0x50(%rbx),%r11
  0x00007f8ab9125336: mov    0x28(%rax),%rsi
  0x00007f8ab912533a: mov    0x20(%rax),%rdx
  0x00007f8ab912533e: mov    0x10(%rax),%rcx
  0x00007f8ab9125342: mov    0x8(%rax),%r8d
  0x00007f8ab9125346: mov    %rbx,0x258(%r15)
  0x00007f8ab912534d: mov    %rbx,%rax
  0x00007f8ab9125350: jmpq   *%r11
  0x00007f8ab9125353: mov    0x8(%rsi),%ebx
  0x00007f8ab9125356: shl    $0x3,%rbx
  0x00007f8ab912535a: cmp    0x10(%rax),%rbx
  0x00007f8ab912535e: mov    0x8(%rax),%rbx
  0x00007f8ab9125362: je     0x00007f8ab912536d
  0x00007f8ab9125368: jmpq   0x00007f8ab9105c40
  0x00007f8ab912536d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125375: je     0x00007f8ab9125470
  0x00007f8ab912537b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125380: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125388: je     0x00007f8ab9125470
  0x00007f8ab912538e: mov    %rsp,%r13
  0x00007f8ab9125391: mov    (%rsp),%rax
  0x00007f8ab9125395: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125399: pushfq 
  0x00007f8ab912539a: sub    $0x8,%rsp
  0x00007f8ab912539e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91253a3: sub    $0x80,%rsp
  0x00007f8ab91253aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91253af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91253b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91253b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91253be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91253c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91253c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91253cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91253d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91253d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91253dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91253e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91253e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91253eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91253f0: mov    %r15,(%rsp)
  0x00007f8ab91253f4: sub    $0x200,%rsp
  0x00007f8ab91253fb: fxsave64 (%rsp)
  0x00007f8ab9125400: mov    %rbx,%rdi
  0x00007f8ab9125403: mov    %rax,%rsi
  0x00007f8ab9125406: callq  0x00007f8acef8bbca
  0x00007f8ab912540b: fxrstor64 (%rsp)
  0x00007f8ab9125410: add    $0x200,%rsp
  0x00007f8ab9125417: mov    (%rsp),%r15
  0x00007f8ab912541b: mov    0x8(%rsp),%r14
  0x00007f8ab9125420: mov    0x10(%rsp),%r13
  0x00007f8ab9125425: mov    0x18(%rsp),%r12
  0x00007f8ab912542a: mov    0x20(%rsp),%r11
  0x00007f8ab912542f: mov    0x28(%rsp),%r10
  0x00007f8ab9125434: mov    0x30(%rsp),%r9
  0x00007f8ab9125439: mov    0x38(%rsp),%r8
  0x00007f8ab912543e: mov    0x40(%rsp),%rdi
  0x00007f8ab9125443: mov    0x48(%rsp),%rsi
  0x00007f8ab9125448: mov    0x50(%rsp),%rbp
  0x00007f8ab912544d: mov    0x60(%rsp),%rbx
  0x00007f8ab9125452: mov    0x68(%rsp),%rdx
  0x00007f8ab9125457: mov    0x70(%rsp),%rcx
  0x00007f8ab912545c: mov    0x78(%rsp),%rax
  0x00007f8ab9125461: add    $0x80,%rsp
  0x00007f8ab9125468: add    $0x8,%rsp
  0x00007f8ab912546c: popfq  
  0x00007f8ab912546d: mov    %r13,%rsp
  0x00007f8ab9125470: pop    %rax
  0x00007f8ab9125471: mov    %rsp,%r13
  0x00007f8ab9125474: sub    $0x30,%rsp
  0x00007f8ab9125478: mov    %rax,(%rsp)
  0x00007f8ab912547c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9125481: mov    %rdx,0x20(%rsp)
  0x00007f8ab9125486: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9125490: mov    %rax,0x18(%rsp)
  0x00007f8ab9125495: mov    %rcx,0x10(%rsp)
  0x00007f8ab912549a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912549f: mov    0x40(%rbx),%rcx
  0x00007f8ab91254a3: jmpq   *%rcx

AHE@0x00007f8ac80d6f10: 0xbbbe0000 i2c: 0x00007f8ab9125560 c2i: 0x00007f8ab912567c c2iUV: 0x00007f8ab912564f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Z (572 bytes generated)
c2i argument handler starts at 0x7f8ab912567c
  0x00007f8ab9125560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9125564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912556e: cmp    %r11,%rax
  0x00007f8ab9125571: jbe    0x00007f8ab912558a
  0x00007f8ab9125577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9125581: cmp    %r11,%rax
  0x00007f8ab9125584: jb     0x00007f8ab9125627
  0x00007f8ab912558a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9125594: cmp    %r11,%rax
  0x00007f8ab9125597: jbe    0x00007f8ab91255b0
  0x00007f8ab912559d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91255a7: cmp    %r11,%rax
  0x00007f8ab91255aa: jb     0x00007f8ab9125627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91255b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91255b5: sub    $0x80,%rsp
  0x00007f8ab91255bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91255c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91255c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91255cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91255d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91255d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91255da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91255df: mov    %r8,0x38(%rsp)
  0x00007f8ab91255e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91255e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91255ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91255f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91255f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91255fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9125602: mov    %r15,(%rsp)
  0x00007f8ab9125606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9125610: movabs $0x7f8ab91255b0,%rsi
  0x00007f8ab912561a: mov    %rsp,%rdx
  0x00007f8ab912561d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125621: callq  0x00007f8aceddb9fa
  0x00007f8ab9125626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9125627: mov    %rsp,%r11
  0x00007f8ab912562a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912562e: push   %rax
  0x00007f8ab912562f: mov    %r11,%rax
  0x00007f8ab9125632: mov    0x50(%rbx),%r11
  0x00007f8ab9125636: mov    0x20(%rax),%rsi
  0x00007f8ab912563a: mov    0x18(%rax),%rdx
  0x00007f8ab912563e: mov    0x8(%rax),%rcx
  0x00007f8ab9125642: mov    %rbx,0x258(%r15)
  0x00007f8ab9125649: mov    %rbx,%rax
  0x00007f8ab912564c: jmpq   *%r11
  0x00007f8ab912564f: mov    0x8(%rsi),%ebx
  0x00007f8ab9125652: shl    $0x3,%rbx
  0x00007f8ab9125656: cmp    0x10(%rax),%rbx
  0x00007f8ab912565a: mov    0x8(%rax),%rbx
  0x00007f8ab912565e: je     0x00007f8ab9125669
  0x00007f8ab9125664: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125669: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125671: je     0x00007f8ab912576c
  0x00007f8ab9125677: jmpq   0x00007f8ab9105c40
  0x00007f8ab912567c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125684: je     0x00007f8ab912576c
  0x00007f8ab912568a: mov    %rsp,%r13
  0x00007f8ab912568d: mov    (%rsp),%rax
  0x00007f8ab9125691: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125695: pushfq 
  0x00007f8ab9125696: sub    $0x8,%rsp
  0x00007f8ab912569a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912569f: sub    $0x80,%rsp
  0x00007f8ab91256a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91256ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91256b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91256b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91256ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91256bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91256c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91256c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91256ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91256d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91256d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91256dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91256e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91256e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91256ec: mov    %r15,(%rsp)
  0x00007f8ab91256f0: sub    $0x200,%rsp
  0x00007f8ab91256f7: fxsave64 (%rsp)
  0x00007f8ab91256fc: mov    %rbx,%rdi
  0x00007f8ab91256ff: mov    %rax,%rsi
  0x00007f8ab9125702: callq  0x00007f8acef8bbca
  0x00007f8ab9125707: fxrstor64 (%rsp)
  0x00007f8ab912570c: add    $0x200,%rsp
  0x00007f8ab9125713: mov    (%rsp),%r15
  0x00007f8ab9125717: mov    0x8(%rsp),%r14
  0x00007f8ab912571c: mov    0x10(%rsp),%r13
  0x00007f8ab9125721: mov    0x18(%rsp),%r12
  0x00007f8ab9125726: mov    0x20(%rsp),%r11
  0x00007f8ab912572b: mov    0x28(%rsp),%r10
  0x00007f8ab9125730: mov    0x30(%rsp),%r9
  0x00007f8ab9125735: mov    0x38(%rsp),%r8
  0x00007f8ab912573a: mov    0x40(%rsp),%rdi
  0x00007f8ab912573f: mov    0x48(%rsp),%rsi
  0x00007f8ab9125744: mov    0x50(%rsp),%rbp
  0x00007f8ab9125749: mov    0x60(%rsp),%rbx
  0x00007f8ab912574e: mov    0x68(%rsp),%rdx
  0x00007f8ab9125753: mov    0x70(%rsp),%rcx
  0x00007f8ab9125758: mov    0x78(%rsp),%rax
  0x00007f8ab912575d: add    $0x80,%rsp
  0x00007f8ab9125764: add    $0x8,%rsp
  0x00007f8ab9125768: popfq  
  0x00007f8ab9125769: mov    %r13,%rsp
  0x00007f8ab912576c: pop    %rax
  0x00007f8ab912576d: mov    %rsp,%r13
  0x00007f8ab9125770: sub    $0x30,%rsp
  0x00007f8ab9125774: mov    %rax,(%rsp)
  0x00007f8ab9125778: mov    %rsi,0x20(%rsp)
  0x00007f8ab912577d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9125782: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912578c: mov    %rax,0x10(%rsp)
  0x00007f8ab9125791: mov    %rcx,0x8(%rsp)
  0x00007f8ab9125796: mov    0x40(%rbx),%rcx
  0x00007f8ab912579a: jmpq   *%rcx

AHE@0x00007f8ac80d6f58: 0xbbbeb000 i2c: 0x00007f8ab9125860 c2i: 0x00007f8ab9125980 c2iUV: 0x00007f8ab9125953
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9125980
  0x00007f8ab9125860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9125864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912586e: cmp    %r11,%rax
  0x00007f8ab9125871: jbe    0x00007f8ab912588a
  0x00007f8ab9125877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9125881: cmp    %r11,%rax
  0x00007f8ab9125884: jb     0x00007f8ab9125927
  0x00007f8ab912588a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9125894: cmp    %r11,%rax
  0x00007f8ab9125897: jbe    0x00007f8ab91258b0
  0x00007f8ab912589d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91258a7: cmp    %r11,%rax
  0x00007f8ab91258aa: jb     0x00007f8ab9125927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91258b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91258b5: sub    $0x80,%rsp
  0x00007f8ab91258bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91258c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91258c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91258cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91258d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91258d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91258da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91258df: mov    %r8,0x38(%rsp)
  0x00007f8ab91258e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91258e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91258ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91258f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91258f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91258fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9125902: mov    %r15,(%rsp)
  0x00007f8ab9125906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9125910: movabs $0x7f8ab91258b0,%rsi
  0x00007f8ab912591a: mov    %rsp,%rdx
  0x00007f8ab912591d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125921: callq  0x00007f8aceddb9fa
  0x00007f8ab9125926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9125927: mov    %rsp,%r11
  0x00007f8ab912592a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912592e: push   %rax
  0x00007f8ab912592f: mov    %r11,%rax
  0x00007f8ab9125932: mov    0x50(%rbx),%r11
  0x00007f8ab9125936: mov    0x28(%rax),%rsi
  0x00007f8ab912593a: mov    0x20(%rax),%rdx
  0x00007f8ab912593e: mov    0x10(%rax),%rcx
  0x00007f8ab9125942: mov    0x8(%rax),%r8
  0x00007f8ab9125946: mov    %rbx,0x258(%r15)
  0x00007f8ab912594d: mov    %rbx,%rax
  0x00007f8ab9125950: jmpq   *%r11
  0x00007f8ab9125953: mov    0x8(%rsi),%ebx
  0x00007f8ab9125956: shl    $0x3,%rbx
  0x00007f8ab912595a: cmp    0x10(%rax),%rbx
  0x00007f8ab912595e: mov    0x8(%rax),%rbx
  0x00007f8ab9125962: je     0x00007f8ab912596d
  0x00007f8ab9125968: jmpq   0x00007f8ab9105c40
  0x00007f8ab912596d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125975: je     0x00007f8ab9125a70
  0x00007f8ab912597b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125980: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125988: je     0x00007f8ab9125a70
  0x00007f8ab912598e: mov    %rsp,%r13
  0x00007f8ab9125991: mov    (%rsp),%rax
  0x00007f8ab9125995: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125999: pushfq 
  0x00007f8ab912599a: sub    $0x8,%rsp
  0x00007f8ab912599e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91259a3: sub    $0x80,%rsp
  0x00007f8ab91259aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91259af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91259b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91259b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91259be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91259c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91259c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91259cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91259d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91259d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91259dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91259e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91259e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91259eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91259f0: mov    %r15,(%rsp)
  0x00007f8ab91259f4: sub    $0x200,%rsp
  0x00007f8ab91259fb: fxsave64 (%rsp)
  0x00007f8ab9125a00: mov    %rbx,%rdi
  0x00007f8ab9125a03: mov    %rax,%rsi
  0x00007f8ab9125a06: callq  0x00007f8acef8bbca
  0x00007f8ab9125a0b: fxrstor64 (%rsp)
  0x00007f8ab9125a10: add    $0x200,%rsp
  0x00007f8ab9125a17: mov    (%rsp),%r15
  0x00007f8ab9125a1b: mov    0x8(%rsp),%r14
  0x00007f8ab9125a20: mov    0x10(%rsp),%r13
  0x00007f8ab9125a25: mov    0x18(%rsp),%r12
  0x00007f8ab9125a2a: mov    0x20(%rsp),%r11
  0x00007f8ab9125a2f: mov    0x28(%rsp),%r10
  0x00007f8ab9125a34: mov    0x30(%rsp),%r9
  0x00007f8ab9125a39: mov    0x38(%rsp),%r8
  0x00007f8ab9125a3e: mov    0x40(%rsp),%rdi
  0x00007f8ab9125a43: mov    0x48(%rsp),%rsi
  0x00007f8ab9125a48: mov    0x50(%rsp),%rbp
  0x00007f8ab9125a4d: mov    0x60(%rsp),%rbx
  0x00007f8ab9125a52: mov    0x68(%rsp),%rdx
  0x00007f8ab9125a57: mov    0x70(%rsp),%rcx
  0x00007f8ab9125a5c: mov    0x78(%rsp),%rax
  0x00007f8ab9125a61: add    $0x80,%rsp
  0x00007f8ab9125a68: add    $0x8,%rsp
  0x00007f8ab9125a6c: popfq  
  0x00007f8ab9125a6d: mov    %r13,%rsp
  0x00007f8ab9125a70: pop    %rax
  0x00007f8ab9125a71: mov    %rsp,%r13
  0x00007f8ab9125a74: sub    $0x30,%rsp
  0x00007f8ab9125a78: mov    %rax,(%rsp)
  0x00007f8ab9125a7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9125a81: mov    %rdx,0x20(%rsp)
  0x00007f8ab9125a86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9125a90: mov    %rax,0x18(%rsp)
  0x00007f8ab9125a95: mov    %rcx,0x10(%rsp)
  0x00007f8ab9125a9a: mov    %r8,0x8(%rsp)
  0x00007f8ab9125a9f: mov    0x40(%rbx),%rcx
  0x00007f8ab9125aa3: jmpq   *%rcx

AHE@0x00007f8ac80d6fa0: 0xbbbe0000 i2c: 0x00007f8ab9125b60 c2i: 0x00007f8ab9125c7c c2iUV: 0x00007f8ab9125c4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Ljava/lang/Object; (572 bytes generated)
c2i argument handler starts at 0x7f8ab9125c7c
  0x00007f8ab9125b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9125b64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9125b6e: cmp    %r11,%rax
  0x00007f8ab9125b71: jbe    0x00007f8ab9125b8a
  0x00007f8ab9125b77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9125b81: cmp    %r11,%rax
  0x00007f8ab9125b84: jb     0x00007f8ab9125c27
  0x00007f8ab9125b8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9125b94: cmp    %r11,%rax
  0x00007f8ab9125b97: jbe    0x00007f8ab9125bb0
  0x00007f8ab9125b9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9125ba7: cmp    %r11,%rax
  0x00007f8ab9125baa: jb     0x00007f8ab9125c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9125bb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9125bb5: sub    $0x80,%rsp
  0x00007f8ab9125bbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9125bc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9125bc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9125bcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9125bd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9125bd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9125bda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9125bdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9125be4: mov    %r9,0x30(%rsp)
  0x00007f8ab9125be9: mov    %r10,0x28(%rsp)
  0x00007f8ab9125bee: mov    %r11,0x20(%rsp)
  0x00007f8ab9125bf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9125bf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9125bfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9125c02: mov    %r15,(%rsp)
  0x00007f8ab9125c06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9125c10: movabs $0x7f8ab9125bb0,%rsi
  0x00007f8ab9125c1a: mov    %rsp,%rdx
  0x00007f8ab9125c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125c21: callq  0x00007f8aceddb9fa
  0x00007f8ab9125c26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9125c27: mov    %rsp,%r11
  0x00007f8ab9125c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125c2e: push   %rax
  0x00007f8ab9125c2f: mov    %r11,%rax
  0x00007f8ab9125c32: mov    0x50(%rbx),%r11
  0x00007f8ab9125c36: mov    0x20(%rax),%rsi
  0x00007f8ab9125c3a: mov    0x18(%rax),%rdx
  0x00007f8ab9125c3e: mov    0x8(%rax),%rcx
  0x00007f8ab9125c42: mov    %rbx,0x258(%r15)
  0x00007f8ab9125c49: mov    %rbx,%rax
  0x00007f8ab9125c4c: jmpq   *%r11
  0x00007f8ab9125c4f: mov    0x8(%rsi),%ebx
  0x00007f8ab9125c52: shl    $0x3,%rbx
  0x00007f8ab9125c56: cmp    0x10(%rax),%rbx
  0x00007f8ab9125c5a: mov    0x8(%rax),%rbx
  0x00007f8ab9125c5e: je     0x00007f8ab9125c69
  0x00007f8ab9125c64: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125c69: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125c71: je     0x00007f8ab9125d6c
  0x00007f8ab9125c77: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125c7c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125c84: je     0x00007f8ab9125d6c
  0x00007f8ab9125c8a: mov    %rsp,%r13
  0x00007f8ab9125c8d: mov    (%rsp),%rax
  0x00007f8ab9125c91: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125c95: pushfq 
  0x00007f8ab9125c96: sub    $0x8,%rsp
  0x00007f8ab9125c9a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9125c9f: sub    $0x80,%rsp
  0x00007f8ab9125ca6: mov    %rax,0x78(%rsp)
  0x00007f8ab9125cab: mov    %rcx,0x70(%rsp)
  0x00007f8ab9125cb0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9125cb5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9125cba: mov    %rbp,0x50(%rsp)
  0x00007f8ab9125cbf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9125cc4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9125cc9: mov    %r8,0x38(%rsp)
  0x00007f8ab9125cce: mov    %r9,0x30(%rsp)
  0x00007f8ab9125cd3: mov    %r10,0x28(%rsp)
  0x00007f8ab9125cd8: mov    %r11,0x20(%rsp)
  0x00007f8ab9125cdd: mov    %r12,0x18(%rsp)
  0x00007f8ab9125ce2: mov    %r13,0x10(%rsp)
  0x00007f8ab9125ce7: mov    %r14,0x8(%rsp)
  0x00007f8ab9125cec: mov    %r15,(%rsp)
  0x00007f8ab9125cf0: sub    $0x200,%rsp
  0x00007f8ab9125cf7: fxsave64 (%rsp)
  0x00007f8ab9125cfc: mov    %rbx,%rdi
  0x00007f8ab9125cff: mov    %rax,%rsi
  0x00007f8ab9125d02: callq  0x00007f8acef8bbca
  0x00007f8ab9125d07: fxrstor64 (%rsp)
  0x00007f8ab9125d0c: add    $0x200,%rsp
  0x00007f8ab9125d13: mov    (%rsp),%r15
  0x00007f8ab9125d17: mov    0x8(%rsp),%r14
  0x00007f8ab9125d1c: mov    0x10(%rsp),%r13
  0x00007f8ab9125d21: mov    0x18(%rsp),%r12
  0x00007f8ab9125d26: mov    0x20(%rsp),%r11
  0x00007f8ab9125d2b: mov    0x28(%rsp),%r10
  0x00007f8ab9125d30: mov    0x30(%rsp),%r9
  0x00007f8ab9125d35: mov    0x38(%rsp),%r8
  0x00007f8ab9125d3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9125d3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9125d44: mov    0x50(%rsp),%rbp
  0x00007f8ab9125d49: mov    0x60(%rsp),%rbx
  0x00007f8ab9125d4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9125d53: mov    0x70(%rsp),%rcx
  0x00007f8ab9125d58: mov    0x78(%rsp),%rax
  0x00007f8ab9125d5d: add    $0x80,%rsp
  0x00007f8ab9125d64: add    $0x8,%rsp
  0x00007f8ab9125d68: popfq  
  0x00007f8ab9125d69: mov    %r13,%rsp
  0x00007f8ab9125d6c: pop    %rax
  0x00007f8ab9125d6d: mov    %rsp,%r13
  0x00007f8ab9125d70: sub    $0x30,%rsp
  0x00007f8ab9125d74: mov    %rax,(%rsp)
  0x00007f8ab9125d78: mov    %rsi,0x20(%rsp)
  0x00007f8ab9125d7d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9125d82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9125d8c: mov    %rax,0x10(%rsp)
  0x00007f8ab9125d91: mov    %rcx,0x8(%rsp)
  0x00007f8ab9125d96: mov    0x40(%rbx),%rcx
  0x00007f8ab9125d9a: jmpq   *%rcx

AHE@0x00007f8ac80d6fe8: 0xbbbe7e00 i2c: 0x00007f8ab9125e60 c2i: 0x00007f8ab9125f81 c2iUV: 0x00007f8ab9125f54
i2c argument handler #0 for: receiver (Ljava/lang/Object;JD)V (598 bytes generated)
c2i argument handler starts at 0x7f8ab9125f81
  0x00007f8ab9125e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9125e64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9125e6e: cmp    %r11,%rax
  0x00007f8ab9125e71: jbe    0x00007f8ab9125e8a
  0x00007f8ab9125e77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9125e81: cmp    %r11,%rax
  0x00007f8ab9125e84: jb     0x00007f8ab9125f27
  0x00007f8ab9125e8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9125e94: cmp    %r11,%rax
  0x00007f8ab9125e97: jbe    0x00007f8ab9125eb0
  0x00007f8ab9125e9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9125ea7: cmp    %r11,%rax
  0x00007f8ab9125eaa: jb     0x00007f8ab9125f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9125eb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9125eb5: sub    $0x80,%rsp
  0x00007f8ab9125ebc: mov    %rax,0x78(%rsp)
  0x00007f8ab9125ec1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9125ec6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9125ecb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9125ed0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9125ed5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9125eda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9125edf: mov    %r8,0x38(%rsp)
  0x00007f8ab9125ee4: mov    %r9,0x30(%rsp)
  0x00007f8ab9125ee9: mov    %r10,0x28(%rsp)
  0x00007f8ab9125eee: mov    %r11,0x20(%rsp)
  0x00007f8ab9125ef3: mov    %r12,0x18(%rsp)
  0x00007f8ab9125ef8: mov    %r13,0x10(%rsp)
  0x00007f8ab9125efd: mov    %r14,0x8(%rsp)
  0x00007f8ab9125f02: mov    %r15,(%rsp)
  0x00007f8ab9125f06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9125f10: movabs $0x7f8ab9125eb0,%rsi
  0x00007f8ab9125f1a: mov    %rsp,%rdx
  0x00007f8ab9125f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125f21: callq  0x00007f8aceddb9fa
  0x00007f8ab9125f26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9125f27: mov    %rsp,%r11
  0x00007f8ab9125f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125f2e: push   %rax
  0x00007f8ab9125f2f: mov    %r11,%rax
  0x00007f8ab9125f32: mov    0x50(%rbx),%r11
  0x00007f8ab9125f36: mov    0x30(%rax),%rsi
  0x00007f8ab9125f3a: mov    0x28(%rax),%rdx
  0x00007f8ab9125f3e: mov    0x18(%rax),%rcx
  0x00007f8ab9125f42: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab9125f47: mov    %rbx,0x258(%r15)
  0x00007f8ab9125f4e: mov    %rbx,%rax
  0x00007f8ab9125f51: jmpq   *%r11
  0x00007f8ab9125f54: mov    0x8(%rsi),%ebx
  0x00007f8ab9125f57: shl    $0x3,%rbx
  0x00007f8ab9125f5b: cmp    0x10(%rax),%rbx
  0x00007f8ab9125f5f: mov    0x8(%rax),%rbx
  0x00007f8ab9125f63: je     0x00007f8ab9125f6e
  0x00007f8ab9125f69: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125f6e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125f76: je     0x00007f8ab9126071
  0x00007f8ab9125f7c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9125f81: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9125f89: je     0x00007f8ab9126071
  0x00007f8ab9125f8f: mov    %rsp,%r13
  0x00007f8ab9125f92: mov    (%rsp),%rax
  0x00007f8ab9125f96: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9125f9a: pushfq 
  0x00007f8ab9125f9b: sub    $0x8,%rsp
  0x00007f8ab9125f9f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9125fa4: sub    $0x80,%rsp
  0x00007f8ab9125fab: mov    %rax,0x78(%rsp)
  0x00007f8ab9125fb0: mov    %rcx,0x70(%rsp)
  0x00007f8ab9125fb5: mov    %rdx,0x68(%rsp)
  0x00007f8ab9125fba: mov    %rbx,0x60(%rsp)
  0x00007f8ab9125fbf: mov    %rbp,0x50(%rsp)
  0x00007f8ab9125fc4: mov    %rsi,0x48(%rsp)
  0x00007f8ab9125fc9: mov    %rdi,0x40(%rsp)
  0x00007f8ab9125fce: mov    %r8,0x38(%rsp)
  0x00007f8ab9125fd3: mov    %r9,0x30(%rsp)
  0x00007f8ab9125fd8: mov    %r10,0x28(%rsp)
  0x00007f8ab9125fdd: mov    %r11,0x20(%rsp)
  0x00007f8ab9125fe2: mov    %r12,0x18(%rsp)
  0x00007f8ab9125fe7: mov    %r13,0x10(%rsp)
  0x00007f8ab9125fec: mov    %r14,0x8(%rsp)
  0x00007f8ab9125ff1: mov    %r15,(%rsp)
  0x00007f8ab9125ff5: sub    $0x200,%rsp
  0x00007f8ab9125ffc: fxsave64 (%rsp)
  0x00007f8ab9126001: mov    %rbx,%rdi
  0x00007f8ab9126004: mov    %rax,%rsi
  0x00007f8ab9126007: callq  0x00007f8acef8bbca
  0x00007f8ab912600c: fxrstor64 (%rsp)
  0x00007f8ab9126011: add    $0x200,%rsp
  0x00007f8ab9126018: mov    (%rsp),%r15
  0x00007f8ab912601c: mov    0x8(%rsp),%r14
  0x00007f8ab9126021: mov    0x10(%rsp),%r13
  0x00007f8ab9126026: mov    0x18(%rsp),%r12
  0x00007f8ab912602b: mov    0x20(%rsp),%r11
  0x00007f8ab9126030: mov    0x28(%rsp),%r10
  0x00007f8ab9126035: mov    0x30(%rsp),%r9
  0x00007f8ab912603a: mov    0x38(%rsp),%r8
  0x00007f8ab912603f: mov    0x40(%rsp),%rdi
  0x00007f8ab9126044: mov    0x48(%rsp),%rsi
  0x00007f8ab9126049: mov    0x50(%rsp),%rbp
  0x00007f8ab912604e: mov    0x60(%rsp),%rbx
  0x00007f8ab9126053: mov    0x68(%rsp),%rdx
  0x00007f8ab9126058: mov    0x70(%rsp),%rcx
  0x00007f8ab912605d: mov    0x78(%rsp),%rax
  0x00007f8ab9126062: add    $0x80,%rsp
  0x00007f8ab9126069: add    $0x8,%rsp
  0x00007f8ab912606d: popfq  
  0x00007f8ab912606e: mov    %r13,%rsp
  0x00007f8ab9126071: pop    %rax
  0x00007f8ab9126072: mov    %rsp,%r13
  0x00007f8ab9126075: sub    $0x40,%rsp
  0x00007f8ab9126079: mov    %rax,(%rsp)
  0x00007f8ab912607d: mov    %rsi,0x30(%rsp)
  0x00007f8ab9126082: mov    %rdx,0x28(%rsp)
  0x00007f8ab9126087: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9126091: mov    %rax,0x20(%rsp)
  0x00007f8ab9126096: mov    %rcx,0x18(%rsp)
  0x00007f8ab912609b: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab91260a5: mov    %rax,0x10(%rsp)
  0x00007f8ab91260aa: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91260b0: mov    0x40(%rbx),%rcx
  0x00007f8ab91260b4: jmpq   *%rcx

AHE@0x00007f8ac80d7030: 0xbbe7e000 i2c: 0x00007f8ab9126160 c2i: 0x00007f8ab912627d c2iUV: 0x00007f8ab9126250
i2c argument handler #0 for: receiver (JD)V (589 bytes generated)
c2i argument handler starts at 0x7f8ab912627d
  0x00007f8ab9126160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9126164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912616e: cmp    %r11,%rax
  0x00007f8ab9126171: jbe    0x00007f8ab912618a
  0x00007f8ab9126177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9126181: cmp    %r11,%rax
  0x00007f8ab9126184: jb     0x00007f8ab9126227
  0x00007f8ab912618a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9126194: cmp    %r11,%rax
  0x00007f8ab9126197: jbe    0x00007f8ab91261b0
  0x00007f8ab912619d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91261a7: cmp    %r11,%rax
  0x00007f8ab91261aa: jb     0x00007f8ab9126227
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91261b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91261b5: sub    $0x80,%rsp
  0x00007f8ab91261bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91261c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91261c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91261cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91261d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91261d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91261da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91261df: mov    %r8,0x38(%rsp)
  0x00007f8ab91261e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91261e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91261ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91261f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91261f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91261fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9126202: mov    %r15,(%rsp)
  0x00007f8ab9126206: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9126210: movabs $0x7f8ab91261b0,%rsi
  0x00007f8ab912621a: mov    %rsp,%rdx
  0x00007f8ab912621d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126221: callq  0x00007f8aceddb9fa
  0x00007f8ab9126226: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9126227: mov    %rsp,%r11
  0x00007f8ab912622a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912622e: push   %rax
  0x00007f8ab912622f: mov    %r11,%rax
  0x00007f8ab9126232: mov    0x50(%rbx),%r11
  0x00007f8ab9126236: mov    0x28(%rax),%rsi
  0x00007f8ab912623a: mov    0x18(%rax),%rdx
  0x00007f8ab912623e: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab9126243: mov    %rbx,0x258(%r15)
  0x00007f8ab912624a: mov    %rbx,%rax
  0x00007f8ab912624d: jmpq   *%r11
  0x00007f8ab9126250: mov    0x8(%rsi),%ebx
  0x00007f8ab9126253: shl    $0x3,%rbx
  0x00007f8ab9126257: cmp    0x10(%rax),%rbx
  0x00007f8ab912625b: mov    0x8(%rax),%rbx
  0x00007f8ab912625f: je     0x00007f8ab912626a
  0x00007f8ab9126265: jmpq   0x00007f8ab9105c40
  0x00007f8ab912626a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126272: je     0x00007f8ab912636d
  0x00007f8ab9126278: jmpq   0x00007f8ab9105c40
  0x00007f8ab912627d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126285: je     0x00007f8ab912636d
  0x00007f8ab912628b: mov    %rsp,%r13
  0x00007f8ab912628e: mov    (%rsp),%rax
  0x00007f8ab9126292: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126296: pushfq 
  0x00007f8ab9126297: sub    $0x8,%rsp
  0x00007f8ab912629b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91262a0: sub    $0x80,%rsp
  0x00007f8ab91262a7: mov    %rax,0x78(%rsp)
  0x00007f8ab91262ac: mov    %rcx,0x70(%rsp)
  0x00007f8ab91262b1: mov    %rdx,0x68(%rsp)
  0x00007f8ab91262b6: mov    %rbx,0x60(%rsp)
  0x00007f8ab91262bb: mov    %rbp,0x50(%rsp)
  0x00007f8ab91262c0: mov    %rsi,0x48(%rsp)
  0x00007f8ab91262c5: mov    %rdi,0x40(%rsp)
  0x00007f8ab91262ca: mov    %r8,0x38(%rsp)
  0x00007f8ab91262cf: mov    %r9,0x30(%rsp)
  0x00007f8ab91262d4: mov    %r10,0x28(%rsp)
  0x00007f8ab91262d9: mov    %r11,0x20(%rsp)
  0x00007f8ab91262de: mov    %r12,0x18(%rsp)
  0x00007f8ab91262e3: mov    %r13,0x10(%rsp)
  0x00007f8ab91262e8: mov    %r14,0x8(%rsp)
  0x00007f8ab91262ed: mov    %r15,(%rsp)
  0x00007f8ab91262f1: sub    $0x200,%rsp
  0x00007f8ab91262f8: fxsave64 (%rsp)
  0x00007f8ab91262fd: mov    %rbx,%rdi
  0x00007f8ab9126300: mov    %rax,%rsi
  0x00007f8ab9126303: callq  0x00007f8acef8bbca
  0x00007f8ab9126308: fxrstor64 (%rsp)
  0x00007f8ab912630d: add    $0x200,%rsp
  0x00007f8ab9126314: mov    (%rsp),%r15
  0x00007f8ab9126318: mov    0x8(%rsp),%r14
  0x00007f8ab912631d: mov    0x10(%rsp),%r13
  0x00007f8ab9126322: mov    0x18(%rsp),%r12
  0x00007f8ab9126327: mov    0x20(%rsp),%r11
  0x00007f8ab912632c: mov    0x28(%rsp),%r10
  0x00007f8ab9126331: mov    0x30(%rsp),%r9
  0x00007f8ab9126336: mov    0x38(%rsp),%r8
  0x00007f8ab912633b: mov    0x40(%rsp),%rdi
  0x00007f8ab9126340: mov    0x48(%rsp),%rsi
  0x00007f8ab9126345: mov    0x50(%rsp),%rbp
  0x00007f8ab912634a: mov    0x60(%rsp),%rbx
  0x00007f8ab912634f: mov    0x68(%rsp),%rdx
  0x00007f8ab9126354: mov    0x70(%rsp),%rcx
  0x00007f8ab9126359: mov    0x78(%rsp),%rax
  0x00007f8ab912635e: add    $0x80,%rsp
  0x00007f8ab9126365: add    $0x8,%rsp
  0x00007f8ab9126369: popfq  
  0x00007f8ab912636a: mov    %r13,%rsp
  0x00007f8ab912636d: pop    %rax
  0x00007f8ab912636e: mov    %rsp,%r13
  0x00007f8ab9126371: sub    $0x30,%rsp
  0x00007f8ab9126375: mov    %rax,(%rsp)
  0x00007f8ab9126379: mov    %rsi,0x28(%rsp)
  0x00007f8ab912637e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9126388: mov    %rax,0x20(%rsp)
  0x00007f8ab912638d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9126392: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab912639c: mov    %rax,0x10(%rsp)
  0x00007f8ab91263a1: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91263a7: mov    0x40(%rbx),%rcx
  0x00007f8ab91263ab: jmpq   *%rcx

AHE@0x00007f8ac80d7078: 0xbba7e000 i2c: 0x00007f8ab9126460 c2i: 0x00007f8ab9126580 c2iUV: 0x00007f8ab9126553
i2c argument handler #0 for: receiver (Ljava/lang/Object;ID)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9126580
  0x00007f8ab9126460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9126464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912646e: cmp    %r11,%rax
  0x00007f8ab9126471: jbe    0x00007f8ab912648a
  0x00007f8ab9126477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9126481: cmp    %r11,%rax
  0x00007f8ab9126484: jb     0x00007f8ab9126527
  0x00007f8ab912648a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9126494: cmp    %r11,%rax
  0x00007f8ab9126497: jbe    0x00007f8ab91264b0
  0x00007f8ab912649d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91264a7: cmp    %r11,%rax
  0x00007f8ab91264aa: jb     0x00007f8ab9126527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91264b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91264b5: sub    $0x80,%rsp
  0x00007f8ab91264bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91264c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91264c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91264cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91264d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91264d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91264da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91264df: mov    %r8,0x38(%rsp)
  0x00007f8ab91264e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91264e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91264ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91264f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91264f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91264fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9126502: mov    %r15,(%rsp)
  0x00007f8ab9126506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9126510: movabs $0x7f8ab91264b0,%rsi
  0x00007f8ab912651a: mov    %rsp,%rdx
  0x00007f8ab912651d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126521: callq  0x00007f8aceddb9fa
  0x00007f8ab9126526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9126527: mov    %rsp,%r11
  0x00007f8ab912652a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912652e: push   %rax
  0x00007f8ab912652f: mov    %r11,%rax
  0x00007f8ab9126532: mov    0x50(%rbx),%r11
  0x00007f8ab9126536: mov    0x28(%rax),%rsi
  0x00007f8ab912653a: mov    0x20(%rax),%rdx
  0x00007f8ab912653e: mov    0x18(%rax),%ecx
  0x00007f8ab9126541: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab9126546: mov    %rbx,0x258(%r15)
  0x00007f8ab912654d: mov    %rbx,%rax
  0x00007f8ab9126550: jmpq   *%r11
  0x00007f8ab9126553: mov    0x8(%rsi),%ebx
  0x00007f8ab9126556: shl    $0x3,%rbx
  0x00007f8ab912655a: cmp    0x10(%rax),%rbx
  0x00007f8ab912655e: mov    0x8(%rax),%rbx
  0x00007f8ab9126562: je     0x00007f8ab912656d
  0x00007f8ab9126568: jmpq   0x00007f8ab9105c40
  0x00007f8ab912656d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126575: je     0x00007f8ab9126670
  0x00007f8ab912657b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9126580: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126588: je     0x00007f8ab9126670
  0x00007f8ab912658e: mov    %rsp,%r13
  0x00007f8ab9126591: mov    (%rsp),%rax
  0x00007f8ab9126595: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126599: pushfq 
  0x00007f8ab912659a: sub    $0x8,%rsp
  0x00007f8ab912659e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91265a3: sub    $0x80,%rsp
  0x00007f8ab91265aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91265af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91265b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91265b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91265be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91265c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91265c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91265cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91265d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91265d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91265dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91265e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91265e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91265eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91265f0: mov    %r15,(%rsp)
  0x00007f8ab91265f4: sub    $0x200,%rsp
  0x00007f8ab91265fb: fxsave64 (%rsp)
  0x00007f8ab9126600: mov    %rbx,%rdi
  0x00007f8ab9126603: mov    %rax,%rsi
  0x00007f8ab9126606: callq  0x00007f8acef8bbca
  0x00007f8ab912660b: fxrstor64 (%rsp)
  0x00007f8ab9126610: add    $0x200,%rsp
  0x00007f8ab9126617: mov    (%rsp),%r15
  0x00007f8ab912661b: mov    0x8(%rsp),%r14
  0x00007f8ab9126620: mov    0x10(%rsp),%r13
  0x00007f8ab9126625: mov    0x18(%rsp),%r12
  0x00007f8ab912662a: mov    0x20(%rsp),%r11
  0x00007f8ab912662f: mov    0x28(%rsp),%r10
  0x00007f8ab9126634: mov    0x30(%rsp),%r9
  0x00007f8ab9126639: mov    0x38(%rsp),%r8
  0x00007f8ab912663e: mov    0x40(%rsp),%rdi
  0x00007f8ab9126643: mov    0x48(%rsp),%rsi
  0x00007f8ab9126648: mov    0x50(%rsp),%rbp
  0x00007f8ab912664d: mov    0x60(%rsp),%rbx
  0x00007f8ab9126652: mov    0x68(%rsp),%rdx
  0x00007f8ab9126657: mov    0x70(%rsp),%rcx
  0x00007f8ab912665c: mov    0x78(%rsp),%rax
  0x00007f8ab9126661: add    $0x80,%rsp
  0x00007f8ab9126668: add    $0x8,%rsp
  0x00007f8ab912666c: popfq  
  0x00007f8ab912666d: mov    %r13,%rsp
  0x00007f8ab9126670: pop    %rax
  0x00007f8ab9126671: mov    %rsp,%r13
  0x00007f8ab9126674: sub    $0x30,%rsp
  0x00007f8ab9126678: mov    %rax,(%rsp)
  0x00007f8ab912667c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9126681: mov    %rdx,0x20(%rsp)
  0x00007f8ab9126686: mov    %ecx,0x18(%rsp)
  0x00007f8ab912668a: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9126694: mov    %rax,0x10(%rsp)
  0x00007f8ab9126699: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab912669f: mov    0x40(%rbx),%rcx
  0x00007f8ab91266a3: jmpq   *%rcx

AHE@0x00007f8ac80d70c0: 0xbbe00000 i2c: 0x00007f8ab9126760 c2i: 0x00007f8ab9126878 c2iUV: 0x00007f8ab912684b
i2c argument handler #0 for: receiver (J)D (563 bytes generated)
c2i argument handler starts at 0x7f8ab9126878
  0x00007f8ab9126760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9126764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912676e: cmp    %r11,%rax
  0x00007f8ab9126771: jbe    0x00007f8ab912678a
  0x00007f8ab9126777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9126781: cmp    %r11,%rax
  0x00007f8ab9126784: jb     0x00007f8ab9126827
  0x00007f8ab912678a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9126794: cmp    %r11,%rax
  0x00007f8ab9126797: jbe    0x00007f8ab91267b0
  0x00007f8ab912679d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91267a7: cmp    %r11,%rax
  0x00007f8ab91267aa: jb     0x00007f8ab9126827
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91267b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91267b5: sub    $0x80,%rsp
  0x00007f8ab91267bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91267c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91267c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91267cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91267d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91267d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91267da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91267df: mov    %r8,0x38(%rsp)
  0x00007f8ab91267e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91267e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91267ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91267f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91267f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91267fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9126802: mov    %r15,(%rsp)
  0x00007f8ab9126806: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9126810: movabs $0x7f8ab91267b0,%rsi
  0x00007f8ab912681a: mov    %rsp,%rdx
  0x00007f8ab912681d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126821: callq  0x00007f8aceddb9fa
  0x00007f8ab9126826: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9126827: mov    %rsp,%r11
  0x00007f8ab912682a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912682e: push   %rax
  0x00007f8ab912682f: mov    %r11,%rax
  0x00007f8ab9126832: mov    0x50(%rbx),%r11
  0x00007f8ab9126836: mov    0x18(%rax),%rsi
  0x00007f8ab912683a: mov    0x8(%rax),%rdx
  0x00007f8ab912683e: mov    %rbx,0x258(%r15)
  0x00007f8ab9126845: mov    %rbx,%rax
  0x00007f8ab9126848: jmpq   *%r11
  0x00007f8ab912684b: mov    0x8(%rsi),%ebx
  0x00007f8ab912684e: shl    $0x3,%rbx
  0x00007f8ab9126852: cmp    0x10(%rax),%rbx
  0x00007f8ab9126856: mov    0x8(%rax),%rbx
  0x00007f8ab912685a: je     0x00007f8ab9126865
  0x00007f8ab9126860: jmpq   0x00007f8ab9105c40
  0x00007f8ab9126865: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912686d: je     0x00007f8ab9126968
  0x00007f8ab9126873: jmpq   0x00007f8ab9105c40
  0x00007f8ab9126878: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126880: je     0x00007f8ab9126968
  0x00007f8ab9126886: mov    %rsp,%r13
  0x00007f8ab9126889: mov    (%rsp),%rax
  0x00007f8ab912688d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126891: pushfq 
  0x00007f8ab9126892: sub    $0x8,%rsp
  0x00007f8ab9126896: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912689b: sub    $0x80,%rsp
  0x00007f8ab91268a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91268a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91268ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91268b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91268b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91268bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91268c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91268c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91268ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91268cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91268d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91268d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91268de: mov    %r13,0x10(%rsp)
  0x00007f8ab91268e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91268e8: mov    %r15,(%rsp)
  0x00007f8ab91268ec: sub    $0x200,%rsp
  0x00007f8ab91268f3: fxsave64 (%rsp)
  0x00007f8ab91268f8: mov    %rbx,%rdi
  0x00007f8ab91268fb: mov    %rax,%rsi
  0x00007f8ab91268fe: callq  0x00007f8acef8bbca
  0x00007f8ab9126903: fxrstor64 (%rsp)
  0x00007f8ab9126908: add    $0x200,%rsp
  0x00007f8ab912690f: mov    (%rsp),%r15
  0x00007f8ab9126913: mov    0x8(%rsp),%r14
  0x00007f8ab9126918: mov    0x10(%rsp),%r13
  0x00007f8ab912691d: mov    0x18(%rsp),%r12
  0x00007f8ab9126922: mov    0x20(%rsp),%r11
  0x00007f8ab9126927: mov    0x28(%rsp),%r10
  0x00007f8ab912692c: mov    0x30(%rsp),%r9
  0x00007f8ab9126931: mov    0x38(%rsp),%r8
  0x00007f8ab9126936: mov    0x40(%rsp),%rdi
  0x00007f8ab912693b: mov    0x48(%rsp),%rsi
  0x00007f8ab9126940: mov    0x50(%rsp),%rbp
  0x00007f8ab9126945: mov    0x60(%rsp),%rbx
  0x00007f8ab912694a: mov    0x68(%rsp),%rdx
  0x00007f8ab912694f: mov    0x70(%rsp),%rcx
  0x00007f8ab9126954: mov    0x78(%rsp),%rax
  0x00007f8ab9126959: add    $0x80,%rsp
  0x00007f8ab9126960: add    $0x8,%rsp
  0x00007f8ab9126964: popfq  
  0x00007f8ab9126965: mov    %r13,%rsp
  0x00007f8ab9126968: pop    %rax
  0x00007f8ab9126969: mov    %rsp,%r13
  0x00007f8ab912696c: sub    $0x20,%rsp
  0x00007f8ab9126970: mov    %rax,(%rsp)
  0x00007f8ab9126974: mov    %rsi,0x18(%rsp)
  0x00007f8ab9126979: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9126983: mov    %rax,0x10(%rsp)
  0x00007f8ab9126988: mov    %rdx,0x8(%rsp)
  0x00007f8ab912698d: mov    0x40(%rbx),%rcx
  0x00007f8ab9126991: jmpq   *%rcx

AHE@0x00007f8ac80d7108: 0xbba00000 i2c: 0x00007f8ab9126a60 c2i: 0x00007f8ab9126b7b c2iUV: 0x00007f8ab9126b4e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)D (555 bytes generated)
c2i argument handler starts at 0x7f8ab9126b7b
  0x00007f8ab9126a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9126a64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9126a6e: cmp    %r11,%rax
  0x00007f8ab9126a71: jbe    0x00007f8ab9126a8a
  0x00007f8ab9126a77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9126a81: cmp    %r11,%rax
  0x00007f8ab9126a84: jb     0x00007f8ab9126b27
  0x00007f8ab9126a8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9126a94: cmp    %r11,%rax
  0x00007f8ab9126a97: jbe    0x00007f8ab9126ab0
  0x00007f8ab9126a9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9126aa7: cmp    %r11,%rax
  0x00007f8ab9126aaa: jb     0x00007f8ab9126b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9126ab0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9126ab5: sub    $0x80,%rsp
  0x00007f8ab9126abc: mov    %rax,0x78(%rsp)
  0x00007f8ab9126ac1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9126ac6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9126acb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9126ad0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9126ad5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9126ada: mov    %rdi,0x40(%rsp)
  0x00007f8ab9126adf: mov    %r8,0x38(%rsp)
  0x00007f8ab9126ae4: mov    %r9,0x30(%rsp)
  0x00007f8ab9126ae9: mov    %r10,0x28(%rsp)
  0x00007f8ab9126aee: mov    %r11,0x20(%rsp)
  0x00007f8ab9126af3: mov    %r12,0x18(%rsp)
  0x00007f8ab9126af8: mov    %r13,0x10(%rsp)
  0x00007f8ab9126afd: mov    %r14,0x8(%rsp)
  0x00007f8ab9126b02: mov    %r15,(%rsp)
  0x00007f8ab9126b06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9126b10: movabs $0x7f8ab9126ab0,%rsi
  0x00007f8ab9126b1a: mov    %rsp,%rdx
  0x00007f8ab9126b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126b21: callq  0x00007f8aceddb9fa
  0x00007f8ab9126b26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9126b27: mov    %rsp,%r11
  0x00007f8ab9126b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126b2e: push   %rax
  0x00007f8ab9126b2f: mov    %r11,%rax
  0x00007f8ab9126b32: mov    0x50(%rbx),%r11
  0x00007f8ab9126b36: mov    0x18(%rax),%rsi
  0x00007f8ab9126b3a: mov    0x10(%rax),%rdx
  0x00007f8ab9126b3e: mov    0x8(%rax),%ecx
  0x00007f8ab9126b41: mov    %rbx,0x258(%r15)
  0x00007f8ab9126b48: mov    %rbx,%rax
  0x00007f8ab9126b4b: jmpq   *%r11
  0x00007f8ab9126b4e: mov    0x8(%rsi),%ebx
  0x00007f8ab9126b51: shl    $0x3,%rbx
  0x00007f8ab9126b55: cmp    0x10(%rax),%rbx
  0x00007f8ab9126b59: mov    0x8(%rax),%rbx
  0x00007f8ab9126b5d: je     0x00007f8ab9126b68
  0x00007f8ab9126b63: jmpq   0x00007f8ab9105c40
  0x00007f8ab9126b68: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126b70: je     0x00007f8ab9126c6b
  0x00007f8ab9126b76: jmpq   0x00007f8ab9105c40
  0x00007f8ab9126b7b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126b83: je     0x00007f8ab9126c6b
  0x00007f8ab9126b89: mov    %rsp,%r13
  0x00007f8ab9126b8c: mov    (%rsp),%rax
  0x00007f8ab9126b90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126b94: pushfq 
  0x00007f8ab9126b95: sub    $0x8,%rsp
  0x00007f8ab9126b99: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9126b9e: sub    $0x80,%rsp
  0x00007f8ab9126ba5: mov    %rax,0x78(%rsp)
  0x00007f8ab9126baa: mov    %rcx,0x70(%rsp)
  0x00007f8ab9126baf: mov    %rdx,0x68(%rsp)
  0x00007f8ab9126bb4: mov    %rbx,0x60(%rsp)
  0x00007f8ab9126bb9: mov    %rbp,0x50(%rsp)
  0x00007f8ab9126bbe: mov    %rsi,0x48(%rsp)
  0x00007f8ab9126bc3: mov    %rdi,0x40(%rsp)
  0x00007f8ab9126bc8: mov    %r8,0x38(%rsp)
  0x00007f8ab9126bcd: mov    %r9,0x30(%rsp)
  0x00007f8ab9126bd2: mov    %r10,0x28(%rsp)
  0x00007f8ab9126bd7: mov    %r11,0x20(%rsp)
  0x00007f8ab9126bdc: mov    %r12,0x18(%rsp)
  0x00007f8ab9126be1: mov    %r13,0x10(%rsp)
  0x00007f8ab9126be6: mov    %r14,0x8(%rsp)
  0x00007f8ab9126beb: mov    %r15,(%rsp)
  0x00007f8ab9126bef: sub    $0x200,%rsp
  0x00007f8ab9126bf6: fxsave64 (%rsp)
  0x00007f8ab9126bfb: mov    %rbx,%rdi
  0x00007f8ab9126bfe: mov    %rax,%rsi
  0x00007f8ab9126c01: callq  0x00007f8acef8bbca
  0x00007f8ab9126c06: fxrstor64 (%rsp)
  0x00007f8ab9126c0b: add    $0x200,%rsp
  0x00007f8ab9126c12: mov    (%rsp),%r15
  0x00007f8ab9126c16: mov    0x8(%rsp),%r14
  0x00007f8ab9126c1b: mov    0x10(%rsp),%r13
  0x00007f8ab9126c20: mov    0x18(%rsp),%r12
  0x00007f8ab9126c25: mov    0x20(%rsp),%r11
  0x00007f8ab9126c2a: mov    0x28(%rsp),%r10
  0x00007f8ab9126c2f: mov    0x30(%rsp),%r9
  0x00007f8ab9126c34: mov    0x38(%rsp),%r8
  0x00007f8ab9126c39: mov    0x40(%rsp),%rdi
  0x00007f8ab9126c3e: mov    0x48(%rsp),%rsi
  0x00007f8ab9126c43: mov    0x50(%rsp),%rbp
  0x00007f8ab9126c48: mov    0x60(%rsp),%rbx
  0x00007f8ab9126c4d: mov    0x68(%rsp),%rdx
  0x00007f8ab9126c52: mov    0x70(%rsp),%rcx
  0x00007f8ab9126c57: mov    0x78(%rsp),%rax
  0x00007f8ab9126c5c: add    $0x80,%rsp
  0x00007f8ab9126c63: add    $0x8,%rsp
  0x00007f8ab9126c67: popfq  
  0x00007f8ab9126c68: mov    %r13,%rsp
  0x00007f8ab9126c6b: pop    %rax
  0x00007f8ab9126c6c: mov    %rsp,%r13
  0x00007f8ab9126c6f: sub    $0x20,%rsp
  0x00007f8ab9126c73: mov    %rax,(%rsp)
  0x00007f8ab9126c77: mov    %rsi,0x18(%rsp)
  0x00007f8ab9126c7c: mov    %rdx,0x10(%rsp)
  0x00007f8ab9126c81: mov    %ecx,0x8(%rsp)
  0x00007f8ab9126c85: mov    0x40(%rbx),%rcx
  0x00007f8ab9126c89: jmpq   *%rcx

AHE@0x00007f8ac80d7150: 0xbbbe0000 i2c: 0x00007f8ab9126d60 c2i: 0x00007f8ab9126e7c c2iUV: 0x00007f8ab9126e4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)D (572 bytes generated)
c2i argument handler starts at 0x7f8ab9126e7c
  0x00007f8ab9126d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9126d64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9126d6e: cmp    %r11,%rax
  0x00007f8ab9126d71: jbe    0x00007f8ab9126d8a
  0x00007f8ab9126d77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9126d81: cmp    %r11,%rax
  0x00007f8ab9126d84: jb     0x00007f8ab9126e27
  0x00007f8ab9126d8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9126d94: cmp    %r11,%rax
  0x00007f8ab9126d97: jbe    0x00007f8ab9126db0
  0x00007f8ab9126d9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9126da7: cmp    %r11,%rax
  0x00007f8ab9126daa: jb     0x00007f8ab9126e27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9126db0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9126db5: sub    $0x80,%rsp
  0x00007f8ab9126dbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9126dc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9126dc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9126dcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9126dd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9126dd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9126dda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9126ddf: mov    %r8,0x38(%rsp)
  0x00007f8ab9126de4: mov    %r9,0x30(%rsp)
  0x00007f8ab9126de9: mov    %r10,0x28(%rsp)
  0x00007f8ab9126dee: mov    %r11,0x20(%rsp)
  0x00007f8ab9126df3: mov    %r12,0x18(%rsp)
  0x00007f8ab9126df8: mov    %r13,0x10(%rsp)
  0x00007f8ab9126dfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9126e02: mov    %r15,(%rsp)
  0x00007f8ab9126e06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9126e10: movabs $0x7f8ab9126db0,%rsi
  0x00007f8ab9126e1a: mov    %rsp,%rdx
  0x00007f8ab9126e1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126e21: callq  0x00007f8aceddb9fa
  0x00007f8ab9126e26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9126e27: mov    %rsp,%r11
  0x00007f8ab9126e2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126e2e: push   %rax
  0x00007f8ab9126e2f: mov    %r11,%rax
  0x00007f8ab9126e32: mov    0x50(%rbx),%r11
  0x00007f8ab9126e36: mov    0x20(%rax),%rsi
  0x00007f8ab9126e3a: mov    0x18(%rax),%rdx
  0x00007f8ab9126e3e: mov    0x8(%rax),%rcx
  0x00007f8ab9126e42: mov    %rbx,0x258(%r15)
  0x00007f8ab9126e49: mov    %rbx,%rax
  0x00007f8ab9126e4c: jmpq   *%r11
  0x00007f8ab9126e4f: mov    0x8(%rsi),%ebx
  0x00007f8ab9126e52: shl    $0x3,%rbx
  0x00007f8ab9126e56: cmp    0x10(%rax),%rbx
  0x00007f8ab9126e5a: mov    0x8(%rax),%rbx
  0x00007f8ab9126e5e: je     0x00007f8ab9126e69
  0x00007f8ab9126e64: jmpq   0x00007f8ab9105c40
  0x00007f8ab9126e69: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126e71: je     0x00007f8ab9126f6c
  0x00007f8ab9126e77: jmpq   0x00007f8ab9105c40
  0x00007f8ab9126e7c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9126e84: je     0x00007f8ab9126f6c
  0x00007f8ab9126e8a: mov    %rsp,%r13
  0x00007f8ab9126e8d: mov    (%rsp),%rax
  0x00007f8ab9126e91: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9126e95: pushfq 
  0x00007f8ab9126e96: sub    $0x8,%rsp
  0x00007f8ab9126e9a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9126e9f: sub    $0x80,%rsp
  0x00007f8ab9126ea6: mov    %rax,0x78(%rsp)
  0x00007f8ab9126eab: mov    %rcx,0x70(%rsp)
  0x00007f8ab9126eb0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9126eb5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9126eba: mov    %rbp,0x50(%rsp)
  0x00007f8ab9126ebf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9126ec4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9126ec9: mov    %r8,0x38(%rsp)
  0x00007f8ab9126ece: mov    %r9,0x30(%rsp)
  0x00007f8ab9126ed3: mov    %r10,0x28(%rsp)
  0x00007f8ab9126ed8: mov    %r11,0x20(%rsp)
  0x00007f8ab9126edd: mov    %r12,0x18(%rsp)
  0x00007f8ab9126ee2: mov    %r13,0x10(%rsp)
  0x00007f8ab9126ee7: mov    %r14,0x8(%rsp)
  0x00007f8ab9126eec: mov    %r15,(%rsp)
  0x00007f8ab9126ef0: sub    $0x200,%rsp
  0x00007f8ab9126ef7: fxsave64 (%rsp)
  0x00007f8ab9126efc: mov    %rbx,%rdi
  0x00007f8ab9126eff: mov    %rax,%rsi
  0x00007f8ab9126f02: callq  0x00007f8acef8bbca
  0x00007f8ab9126f07: fxrstor64 (%rsp)
  0x00007f8ab9126f0c: add    $0x200,%rsp
  0x00007f8ab9126f13: mov    (%rsp),%r15
  0x00007f8ab9126f17: mov    0x8(%rsp),%r14
  0x00007f8ab9126f1c: mov    0x10(%rsp),%r13
  0x00007f8ab9126f21: mov    0x18(%rsp),%r12
  0x00007f8ab9126f26: mov    0x20(%rsp),%r11
  0x00007f8ab9126f2b: mov    0x28(%rsp),%r10
  0x00007f8ab9126f30: mov    0x30(%rsp),%r9
  0x00007f8ab9126f35: mov    0x38(%rsp),%r8
  0x00007f8ab9126f3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9126f3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9126f44: mov    0x50(%rsp),%rbp
  0x00007f8ab9126f49: mov    0x60(%rsp),%rbx
  0x00007f8ab9126f4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9126f53: mov    0x70(%rsp),%rcx
  0x00007f8ab9126f58: mov    0x78(%rsp),%rax
  0x00007f8ab9126f5d: add    $0x80,%rsp
  0x00007f8ab9126f64: add    $0x8,%rsp
  0x00007f8ab9126f68: popfq  
  0x00007f8ab9126f69: mov    %r13,%rsp
  0x00007f8ab9126f6c: pop    %rax
  0x00007f8ab9126f6d: mov    %rsp,%r13
  0x00007f8ab9126f70: sub    $0x30,%rsp
  0x00007f8ab9126f74: mov    %rax,(%rsp)
  0x00007f8ab9126f78: mov    %rsi,0x20(%rsp)
  0x00007f8ab9126f7d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9126f82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9126f8c: mov    %rax,0x10(%rsp)
  0x00007f8ab9126f91: mov    %rcx,0x8(%rsp)
  0x00007f8ab9126f96: mov    0x40(%rbx),%rcx
  0x00007f8ab9126f9a: jmpq   *%rcx

AHE@0x00007f8ac80d7198: 0xbba60000 i2c: 0x00007f8ab9127060 c2i: 0x00007f8ab9127180 c2iUV: 0x00007f8ab9127153
i2c argument handler #0 for: receiver (Ljava/lang/Object;IF)V (566 bytes generated)
c2i argument handler starts at 0x7f8ab9127180
  0x00007f8ab9127060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9127064: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912706e: cmp    %r11,%rax
  0x00007f8ab9127071: jbe    0x00007f8ab912708a
  0x00007f8ab9127077: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9127081: cmp    %r11,%rax
  0x00007f8ab9127084: jb     0x00007f8ab9127127
  0x00007f8ab912708a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9127094: cmp    %r11,%rax
  0x00007f8ab9127097: jbe    0x00007f8ab91270b0
  0x00007f8ab912709d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91270a7: cmp    %r11,%rax
  0x00007f8ab91270aa: jb     0x00007f8ab9127127
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91270b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91270b5: sub    $0x80,%rsp
  0x00007f8ab91270bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91270c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91270c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91270cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91270d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91270d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91270da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91270df: mov    %r8,0x38(%rsp)
  0x00007f8ab91270e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91270e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91270ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91270f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91270f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91270fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9127102: mov    %r15,(%rsp)
  0x00007f8ab9127106: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9127110: movabs $0x7f8ab91270b0,%rsi
  0x00007f8ab912711a: mov    %rsp,%rdx
  0x00007f8ab912711d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127121: callq  0x00007f8aceddb9fa
  0x00007f8ab9127126: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9127127: mov    %rsp,%r11
  0x00007f8ab912712a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912712e: push   %rax
  0x00007f8ab912712f: mov    %r11,%rax
  0x00007f8ab9127132: mov    0x50(%rbx),%r11
  0x00007f8ab9127136: mov    0x20(%rax),%rsi
  0x00007f8ab912713a: mov    0x18(%rax),%rdx
  0x00007f8ab912713e: mov    0x10(%rax),%ecx
  0x00007f8ab9127141: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9127146: mov    %rbx,0x258(%r15)
  0x00007f8ab912714d: mov    %rbx,%rax
  0x00007f8ab9127150: jmpq   *%r11
  0x00007f8ab9127153: mov    0x8(%rsi),%ebx
  0x00007f8ab9127156: shl    $0x3,%rbx
  0x00007f8ab912715a: cmp    0x10(%rax),%rbx
  0x00007f8ab912715e: mov    0x8(%rax),%rbx
  0x00007f8ab9127162: je     0x00007f8ab912716d
  0x00007f8ab9127168: jmpq   0x00007f8ab9105c40
  0x00007f8ab912716d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127175: je     0x00007f8ab9127270
  0x00007f8ab912717b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9127180: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127188: je     0x00007f8ab9127270
  0x00007f8ab912718e: mov    %rsp,%r13
  0x00007f8ab9127191: mov    (%rsp),%rax
  0x00007f8ab9127195: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127199: pushfq 
  0x00007f8ab912719a: sub    $0x8,%rsp
  0x00007f8ab912719e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91271a3: sub    $0x80,%rsp
  0x00007f8ab91271aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91271af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91271b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91271b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91271be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91271c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91271c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91271cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91271d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91271d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91271dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91271e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91271e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91271eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91271f0: mov    %r15,(%rsp)
  0x00007f8ab91271f4: sub    $0x200,%rsp
  0x00007f8ab91271fb: fxsave64 (%rsp)
  0x00007f8ab9127200: mov    %rbx,%rdi
  0x00007f8ab9127203: mov    %rax,%rsi
  0x00007f8ab9127206: callq  0x00007f8acef8bbca
  0x00007f8ab912720b: fxrstor64 (%rsp)
  0x00007f8ab9127210: add    $0x200,%rsp
  0x00007f8ab9127217: mov    (%rsp),%r15
  0x00007f8ab912721b: mov    0x8(%rsp),%r14
  0x00007f8ab9127220: mov    0x10(%rsp),%r13
  0x00007f8ab9127225: mov    0x18(%rsp),%r12
  0x00007f8ab912722a: mov    0x20(%rsp),%r11
  0x00007f8ab912722f: mov    0x28(%rsp),%r10
  0x00007f8ab9127234: mov    0x30(%rsp),%r9
  0x00007f8ab9127239: mov    0x38(%rsp),%r8
  0x00007f8ab912723e: mov    0x40(%rsp),%rdi
  0x00007f8ab9127243: mov    0x48(%rsp),%rsi
  0x00007f8ab9127248: mov    0x50(%rsp),%rbp
  0x00007f8ab912724d: mov    0x60(%rsp),%rbx
  0x00007f8ab9127252: mov    0x68(%rsp),%rdx
  0x00007f8ab9127257: mov    0x70(%rsp),%rcx
  0x00007f8ab912725c: mov    0x78(%rsp),%rax
  0x00007f8ab9127261: add    $0x80,%rsp
  0x00007f8ab9127268: add    $0x8,%rsp
  0x00007f8ab912726c: popfq  
  0x00007f8ab912726d: mov    %r13,%rsp
  0x00007f8ab9127270: pop    %rax
  0x00007f8ab9127271: mov    %rsp,%r13
  0x00007f8ab9127274: sub    $0x30,%rsp
  0x00007f8ab9127278: mov    %rax,(%rsp)
  0x00007f8ab912727c: mov    %rsi,0x20(%rsp)
  0x00007f8ab9127281: mov    %rdx,0x18(%rsp)
  0x00007f8ab9127286: mov    %ecx,0x10(%rsp)
  0x00007f8ab912728a: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab9127290: mov    0x40(%rbx),%rcx
  0x00007f8ab9127294: jmpq   *%rcx

AHE@0x00007f8ac80d71e0: 0xbbe60000 i2c: 0x00007f8ab9127360 c2i: 0x00007f8ab912747d c2iUV: 0x00007f8ab9127450
i2c argument handler #0 for: receiver (JF)V (574 bytes generated)
c2i argument handler starts at 0x7f8ab912747d
  0x00007f8ab9127360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9127364: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912736e: cmp    %r11,%rax
  0x00007f8ab9127371: jbe    0x00007f8ab912738a
  0x00007f8ab9127377: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9127381: cmp    %r11,%rax
  0x00007f8ab9127384: jb     0x00007f8ab9127427
  0x00007f8ab912738a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9127394: cmp    %r11,%rax
  0x00007f8ab9127397: jbe    0x00007f8ab91273b0
  0x00007f8ab912739d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91273a7: cmp    %r11,%rax
  0x00007f8ab91273aa: jb     0x00007f8ab9127427
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91273b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91273b5: sub    $0x80,%rsp
  0x00007f8ab91273bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91273c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91273c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91273cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91273d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91273d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91273da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91273df: mov    %r8,0x38(%rsp)
  0x00007f8ab91273e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91273e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91273ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91273f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91273f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91273fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9127402: mov    %r15,(%rsp)
  0x00007f8ab9127406: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9127410: movabs $0x7f8ab91273b0,%rsi
  0x00007f8ab912741a: mov    %rsp,%rdx
  0x00007f8ab912741d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127421: callq  0x00007f8aceddb9fa
  0x00007f8ab9127426: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9127427: mov    %rsp,%r11
  0x00007f8ab912742a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912742e: push   %rax
  0x00007f8ab912742f: mov    %r11,%rax
  0x00007f8ab9127432: mov    0x50(%rbx),%r11
  0x00007f8ab9127436: mov    0x20(%rax),%rsi
  0x00007f8ab912743a: mov    0x10(%rax),%rdx
  0x00007f8ab912743e: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9127443: mov    %rbx,0x258(%r15)
  0x00007f8ab912744a: mov    %rbx,%rax
  0x00007f8ab912744d: jmpq   *%r11
  0x00007f8ab9127450: mov    0x8(%rsi),%ebx
  0x00007f8ab9127453: shl    $0x3,%rbx
  0x00007f8ab9127457: cmp    0x10(%rax),%rbx
  0x00007f8ab912745b: mov    0x8(%rax),%rbx
  0x00007f8ab912745f: je     0x00007f8ab912746a
  0x00007f8ab9127465: jmpq   0x00007f8ab9105c40
  0x00007f8ab912746a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127472: je     0x00007f8ab912756d
  0x00007f8ab9127478: jmpq   0x00007f8ab9105c40
  0x00007f8ab912747d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127485: je     0x00007f8ab912756d
  0x00007f8ab912748b: mov    %rsp,%r13
  0x00007f8ab912748e: mov    (%rsp),%rax
  0x00007f8ab9127492: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127496: pushfq 
  0x00007f8ab9127497: sub    $0x8,%rsp
  0x00007f8ab912749b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91274a0: sub    $0x80,%rsp
  0x00007f8ab91274a7: mov    %rax,0x78(%rsp)
  0x00007f8ab91274ac: mov    %rcx,0x70(%rsp)
  0x00007f8ab91274b1: mov    %rdx,0x68(%rsp)
  0x00007f8ab91274b6: mov    %rbx,0x60(%rsp)
  0x00007f8ab91274bb: mov    %rbp,0x50(%rsp)
  0x00007f8ab91274c0: mov    %rsi,0x48(%rsp)
  0x00007f8ab91274c5: mov    %rdi,0x40(%rsp)
  0x00007f8ab91274ca: mov    %r8,0x38(%rsp)
  0x00007f8ab91274cf: mov    %r9,0x30(%rsp)
  0x00007f8ab91274d4: mov    %r10,0x28(%rsp)
  0x00007f8ab91274d9: mov    %r11,0x20(%rsp)
  0x00007f8ab91274de: mov    %r12,0x18(%rsp)
  0x00007f8ab91274e3: mov    %r13,0x10(%rsp)
  0x00007f8ab91274e8: mov    %r14,0x8(%rsp)
  0x00007f8ab91274ed: mov    %r15,(%rsp)
  0x00007f8ab91274f1: sub    $0x200,%rsp
  0x00007f8ab91274f8: fxsave64 (%rsp)
  0x00007f8ab91274fd: mov    %rbx,%rdi
  0x00007f8ab9127500: mov    %rax,%rsi
  0x00007f8ab9127503: callq  0x00007f8acef8bbca
  0x00007f8ab9127508: fxrstor64 (%rsp)
  0x00007f8ab912750d: add    $0x200,%rsp
  0x00007f8ab9127514: mov    (%rsp),%r15
  0x00007f8ab9127518: mov    0x8(%rsp),%r14
  0x00007f8ab912751d: mov    0x10(%rsp),%r13
  0x00007f8ab9127522: mov    0x18(%rsp),%r12
  0x00007f8ab9127527: mov    0x20(%rsp),%r11
  0x00007f8ab912752c: mov    0x28(%rsp),%r10
  0x00007f8ab9127531: mov    0x30(%rsp),%r9
  0x00007f8ab9127536: mov    0x38(%rsp),%r8
  0x00007f8ab912753b: mov    0x40(%rsp),%rdi
  0x00007f8ab9127540: mov    0x48(%rsp),%rsi
  0x00007f8ab9127545: mov    0x50(%rsp),%rbp
  0x00007f8ab912754a: mov    0x60(%rsp),%rbx
  0x00007f8ab912754f: mov    0x68(%rsp),%rdx
  0x00007f8ab9127554: mov    0x70(%rsp),%rcx
  0x00007f8ab9127559: mov    0x78(%rsp),%rax
  0x00007f8ab912755e: add    $0x80,%rsp
  0x00007f8ab9127565: add    $0x8,%rsp
  0x00007f8ab9127569: popfq  
  0x00007f8ab912756a: mov    %r13,%rsp
  0x00007f8ab912756d: pop    %rax
  0x00007f8ab912756e: mov    %rsp,%r13
  0x00007f8ab9127571: sub    $0x30,%rsp
  0x00007f8ab9127575: mov    %rax,(%rsp)
  0x00007f8ab9127579: mov    %rsi,0x20(%rsp)
  0x00007f8ab912757e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9127588: mov    %rax,0x18(%rsp)
  0x00007f8ab912758d: mov    %rdx,0x10(%rsp)
  0x00007f8ab9127592: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab9127598: mov    0x40(%rbx),%rcx
  0x00007f8ab912759c: jmpq   *%rcx

AHE@0x00007f8ac80d7228: 0xbbbe6000 i2c: 0x00007f8ab9127660 c2i: 0x00007f8ab9127781 c2iUV: 0x00007f8ab9127754
i2c argument handler #0 for: receiver (Ljava/lang/Object;JF)V (583 bytes generated)
c2i argument handler starts at 0x7f8ab9127781
  0x00007f8ab9127660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9127664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912766e: cmp    %r11,%rax
  0x00007f8ab9127671: jbe    0x00007f8ab912768a
  0x00007f8ab9127677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9127681: cmp    %r11,%rax
  0x00007f8ab9127684: jb     0x00007f8ab9127727
  0x00007f8ab912768a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9127694: cmp    %r11,%rax
  0x00007f8ab9127697: jbe    0x00007f8ab91276b0
  0x00007f8ab912769d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91276a7: cmp    %r11,%rax
  0x00007f8ab91276aa: jb     0x00007f8ab9127727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91276b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91276b5: sub    $0x80,%rsp
  0x00007f8ab91276bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91276c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91276c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91276cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91276d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91276d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91276da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91276df: mov    %r8,0x38(%rsp)
  0x00007f8ab91276e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91276e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91276ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91276f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91276f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91276fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9127702: mov    %r15,(%rsp)
  0x00007f8ab9127706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9127710: movabs $0x7f8ab91276b0,%rsi
  0x00007f8ab912771a: mov    %rsp,%rdx
  0x00007f8ab912771d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127721: callq  0x00007f8aceddb9fa
  0x00007f8ab9127726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9127727: mov    %rsp,%r11
  0x00007f8ab912772a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912772e: push   %rax
  0x00007f8ab912772f: mov    %r11,%rax
  0x00007f8ab9127732: mov    0x50(%rbx),%r11
  0x00007f8ab9127736: mov    0x28(%rax),%rsi
  0x00007f8ab912773a: mov    0x20(%rax),%rdx
  0x00007f8ab912773e: mov    0x10(%rax),%rcx
  0x00007f8ab9127742: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9127747: mov    %rbx,0x258(%r15)
  0x00007f8ab912774e: mov    %rbx,%rax
  0x00007f8ab9127751: jmpq   *%r11
  0x00007f8ab9127754: mov    0x8(%rsi),%ebx
  0x00007f8ab9127757: shl    $0x3,%rbx
  0x00007f8ab912775b: cmp    0x10(%rax),%rbx
  0x00007f8ab912775f: mov    0x8(%rax),%rbx
  0x00007f8ab9127763: je     0x00007f8ab912776e
  0x00007f8ab9127769: jmpq   0x00007f8ab9105c40
  0x00007f8ab912776e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127776: je     0x00007f8ab9127871
  0x00007f8ab912777c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9127781: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127789: je     0x00007f8ab9127871
  0x00007f8ab912778f: mov    %rsp,%r13
  0x00007f8ab9127792: mov    (%rsp),%rax
  0x00007f8ab9127796: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912779a: pushfq 
  0x00007f8ab912779b: sub    $0x8,%rsp
  0x00007f8ab912779f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91277a4: sub    $0x80,%rsp
  0x00007f8ab91277ab: mov    %rax,0x78(%rsp)
  0x00007f8ab91277b0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91277b5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91277ba: mov    %rbx,0x60(%rsp)
  0x00007f8ab91277bf: mov    %rbp,0x50(%rsp)
  0x00007f8ab91277c4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91277c9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91277ce: mov    %r8,0x38(%rsp)
  0x00007f8ab91277d3: mov    %r9,0x30(%rsp)
  0x00007f8ab91277d8: mov    %r10,0x28(%rsp)
  0x00007f8ab91277dd: mov    %r11,0x20(%rsp)
  0x00007f8ab91277e2: mov    %r12,0x18(%rsp)
  0x00007f8ab91277e7: mov    %r13,0x10(%rsp)
  0x00007f8ab91277ec: mov    %r14,0x8(%rsp)
  0x00007f8ab91277f1: mov    %r15,(%rsp)
  0x00007f8ab91277f5: sub    $0x200,%rsp
  0x00007f8ab91277fc: fxsave64 (%rsp)
  0x00007f8ab9127801: mov    %rbx,%rdi
  0x00007f8ab9127804: mov    %rax,%rsi
  0x00007f8ab9127807: callq  0x00007f8acef8bbca
  0x00007f8ab912780c: fxrstor64 (%rsp)
  0x00007f8ab9127811: add    $0x200,%rsp
  0x00007f8ab9127818: mov    (%rsp),%r15
  0x00007f8ab912781c: mov    0x8(%rsp),%r14
  0x00007f8ab9127821: mov    0x10(%rsp),%r13
  0x00007f8ab9127826: mov    0x18(%rsp),%r12
  0x00007f8ab912782b: mov    0x20(%rsp),%r11
  0x00007f8ab9127830: mov    0x28(%rsp),%r10
  0x00007f8ab9127835: mov    0x30(%rsp),%r9
  0x00007f8ab912783a: mov    0x38(%rsp),%r8
  0x00007f8ab912783f: mov    0x40(%rsp),%rdi
  0x00007f8ab9127844: mov    0x48(%rsp),%rsi
  0x00007f8ab9127849: mov    0x50(%rsp),%rbp
  0x00007f8ab912784e: mov    0x60(%rsp),%rbx
  0x00007f8ab9127853: mov    0x68(%rsp),%rdx
  0x00007f8ab9127858: mov    0x70(%rsp),%rcx
  0x00007f8ab912785d: mov    0x78(%rsp),%rax
  0x00007f8ab9127862: add    $0x80,%rsp
  0x00007f8ab9127869: add    $0x8,%rsp
  0x00007f8ab912786d: popfq  
  0x00007f8ab912786e: mov    %r13,%rsp
  0x00007f8ab9127871: pop    %rax
  0x00007f8ab9127872: mov    %rsp,%r13
  0x00007f8ab9127875: sub    $0x30,%rsp
  0x00007f8ab9127879: mov    %rax,(%rsp)
  0x00007f8ab912787d: mov    %rsi,0x28(%rsp)
  0x00007f8ab9127882: mov    %rdx,0x20(%rsp)
  0x00007f8ab9127887: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9127891: mov    %rax,0x18(%rsp)
  0x00007f8ab9127896: mov    %rcx,0x10(%rsp)
  0x00007f8ab912789b: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab91278a1: mov    0x40(%rbx),%rcx
  0x00007f8ab91278a5: jmpq   *%rcx

AHE@0x00007f8ac80d7270: 0xbba00000 i2c: 0x00007f8ab9127960 c2i: 0x00007f8ab9127a7b c2iUV: 0x00007f8ab9127a4e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)F (555 bytes generated)
c2i argument handler starts at 0x7f8ab9127a7b
  0x00007f8ab9127960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9127964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912796e: cmp    %r11,%rax
  0x00007f8ab9127971: jbe    0x00007f8ab912798a
  0x00007f8ab9127977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9127981: cmp    %r11,%rax
  0x00007f8ab9127984: jb     0x00007f8ab9127a27
  0x00007f8ab912798a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9127994: cmp    %r11,%rax
  0x00007f8ab9127997: jbe    0x00007f8ab91279b0
  0x00007f8ab912799d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91279a7: cmp    %r11,%rax
  0x00007f8ab91279aa: jb     0x00007f8ab9127a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91279b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91279b5: sub    $0x80,%rsp
  0x00007f8ab91279bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91279c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91279c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91279cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91279d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91279d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91279da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91279df: mov    %r8,0x38(%rsp)
  0x00007f8ab91279e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91279e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91279ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91279f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91279f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91279fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9127a02: mov    %r15,(%rsp)
  0x00007f8ab9127a06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9127a10: movabs $0x7f8ab91279b0,%rsi
  0x00007f8ab9127a1a: mov    %rsp,%rdx
  0x00007f8ab9127a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127a21: callq  0x00007f8aceddb9fa
  0x00007f8ab9127a26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9127a27: mov    %rsp,%r11
  0x00007f8ab9127a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127a2e: push   %rax
  0x00007f8ab9127a2f: mov    %r11,%rax
  0x00007f8ab9127a32: mov    0x50(%rbx),%r11
  0x00007f8ab9127a36: mov    0x18(%rax),%rsi
  0x00007f8ab9127a3a: mov    0x10(%rax),%rdx
  0x00007f8ab9127a3e: mov    0x8(%rax),%ecx
  0x00007f8ab9127a41: mov    %rbx,0x258(%r15)
  0x00007f8ab9127a48: mov    %rbx,%rax
  0x00007f8ab9127a4b: jmpq   *%r11
  0x00007f8ab9127a4e: mov    0x8(%rsi),%ebx
  0x00007f8ab9127a51: shl    $0x3,%rbx
  0x00007f8ab9127a55: cmp    0x10(%rax),%rbx
  0x00007f8ab9127a59: mov    0x8(%rax),%rbx
  0x00007f8ab9127a5d: je     0x00007f8ab9127a68
  0x00007f8ab9127a63: jmpq   0x00007f8ab9105c40
  0x00007f8ab9127a68: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127a70: je     0x00007f8ab9127b6b
  0x00007f8ab9127a76: jmpq   0x00007f8ab9105c40
  0x00007f8ab9127a7b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127a83: je     0x00007f8ab9127b6b
  0x00007f8ab9127a89: mov    %rsp,%r13
  0x00007f8ab9127a8c: mov    (%rsp),%rax
  0x00007f8ab9127a90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127a94: pushfq 
  0x00007f8ab9127a95: sub    $0x8,%rsp
  0x00007f8ab9127a99: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9127a9e: sub    $0x80,%rsp
  0x00007f8ab9127aa5: mov    %rax,0x78(%rsp)
  0x00007f8ab9127aaa: mov    %rcx,0x70(%rsp)
  0x00007f8ab9127aaf: mov    %rdx,0x68(%rsp)
  0x00007f8ab9127ab4: mov    %rbx,0x60(%rsp)
  0x00007f8ab9127ab9: mov    %rbp,0x50(%rsp)
  0x00007f8ab9127abe: mov    %rsi,0x48(%rsp)
  0x00007f8ab9127ac3: mov    %rdi,0x40(%rsp)
  0x00007f8ab9127ac8: mov    %r8,0x38(%rsp)
  0x00007f8ab9127acd: mov    %r9,0x30(%rsp)
  0x00007f8ab9127ad2: mov    %r10,0x28(%rsp)
  0x00007f8ab9127ad7: mov    %r11,0x20(%rsp)
  0x00007f8ab9127adc: mov    %r12,0x18(%rsp)
  0x00007f8ab9127ae1: mov    %r13,0x10(%rsp)
  0x00007f8ab9127ae6: mov    %r14,0x8(%rsp)
  0x00007f8ab9127aeb: mov    %r15,(%rsp)
  0x00007f8ab9127aef: sub    $0x200,%rsp
  0x00007f8ab9127af6: fxsave64 (%rsp)
  0x00007f8ab9127afb: mov    %rbx,%rdi
  0x00007f8ab9127afe: mov    %rax,%rsi
  0x00007f8ab9127b01: callq  0x00007f8acef8bbca
  0x00007f8ab9127b06: fxrstor64 (%rsp)
  0x00007f8ab9127b0b: add    $0x200,%rsp
  0x00007f8ab9127b12: mov    (%rsp),%r15
  0x00007f8ab9127b16: mov    0x8(%rsp),%r14
  0x00007f8ab9127b1b: mov    0x10(%rsp),%r13
  0x00007f8ab9127b20: mov    0x18(%rsp),%r12
  0x00007f8ab9127b25: mov    0x20(%rsp),%r11
  0x00007f8ab9127b2a: mov    0x28(%rsp),%r10
  0x00007f8ab9127b2f: mov    0x30(%rsp),%r9
  0x00007f8ab9127b34: mov    0x38(%rsp),%r8
  0x00007f8ab9127b39: mov    0x40(%rsp),%rdi
  0x00007f8ab9127b3e: mov    0x48(%rsp),%rsi
  0x00007f8ab9127b43: mov    0x50(%rsp),%rbp
  0x00007f8ab9127b48: mov    0x60(%rsp),%rbx
  0x00007f8ab9127b4d: mov    0x68(%rsp),%rdx
  0x00007f8ab9127b52: mov    0x70(%rsp),%rcx
  0x00007f8ab9127b57: mov    0x78(%rsp),%rax
  0x00007f8ab9127b5c: add    $0x80,%rsp
  0x00007f8ab9127b63: add    $0x8,%rsp
  0x00007f8ab9127b67: popfq  
  0x00007f8ab9127b68: mov    %r13,%rsp
  0x00007f8ab9127b6b: pop    %rax
  0x00007f8ab9127b6c: mov    %rsp,%r13
  0x00007f8ab9127b6f: sub    $0x20,%rsp
  0x00007f8ab9127b73: mov    %rax,(%rsp)
  0x00007f8ab9127b77: mov    %rsi,0x18(%rsp)
  0x00007f8ab9127b7c: mov    %rdx,0x10(%rsp)
  0x00007f8ab9127b81: mov    %ecx,0x8(%rsp)
  0x00007f8ab9127b85: mov    0x40(%rbx),%rcx
  0x00007f8ab9127b89: jmpq   *%rcx

AHE@0x00007f8ac80d72b8: 0xbbe00000 i2c: 0x00007f8ab9127c60 c2i: 0x00007f8ab9127d78 c2iUV: 0x00007f8ab9127d4b
i2c argument handler #0 for: receiver (J)F (563 bytes generated)
c2i argument handler starts at 0x7f8ab9127d78
  0x00007f8ab9127c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9127c64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9127c6e: cmp    %r11,%rax
  0x00007f8ab9127c71: jbe    0x00007f8ab9127c8a
  0x00007f8ab9127c77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9127c81: cmp    %r11,%rax
  0x00007f8ab9127c84: jb     0x00007f8ab9127d27
  0x00007f8ab9127c8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9127c94: cmp    %r11,%rax
  0x00007f8ab9127c97: jbe    0x00007f8ab9127cb0
  0x00007f8ab9127c9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9127ca7: cmp    %r11,%rax
  0x00007f8ab9127caa: jb     0x00007f8ab9127d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9127cb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9127cb5: sub    $0x80,%rsp
  0x00007f8ab9127cbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9127cc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9127cc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9127ccb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9127cd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9127cd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9127cda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9127cdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9127ce4: mov    %r9,0x30(%rsp)
  0x00007f8ab9127ce9: mov    %r10,0x28(%rsp)
  0x00007f8ab9127cee: mov    %r11,0x20(%rsp)
  0x00007f8ab9127cf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9127cf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9127cfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9127d02: mov    %r15,(%rsp)
  0x00007f8ab9127d06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9127d10: movabs $0x7f8ab9127cb0,%rsi
  0x00007f8ab9127d1a: mov    %rsp,%rdx
  0x00007f8ab9127d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127d21: callq  0x00007f8aceddb9fa
  0x00007f8ab9127d26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9127d27: mov    %rsp,%r11
  0x00007f8ab9127d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127d2e: push   %rax
  0x00007f8ab9127d2f: mov    %r11,%rax
  0x00007f8ab9127d32: mov    0x50(%rbx),%r11
  0x00007f8ab9127d36: mov    0x18(%rax),%rsi
  0x00007f8ab9127d3a: mov    0x8(%rax),%rdx
  0x00007f8ab9127d3e: mov    %rbx,0x258(%r15)
  0x00007f8ab9127d45: mov    %rbx,%rax
  0x00007f8ab9127d48: jmpq   *%r11
  0x00007f8ab9127d4b: mov    0x8(%rsi),%ebx
  0x00007f8ab9127d4e: shl    $0x3,%rbx
  0x00007f8ab9127d52: cmp    0x10(%rax),%rbx
  0x00007f8ab9127d56: mov    0x8(%rax),%rbx
  0x00007f8ab9127d5a: je     0x00007f8ab9127d65
  0x00007f8ab9127d60: jmpq   0x00007f8ab9105c40
  0x00007f8ab9127d65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127d6d: je     0x00007f8ab9127e68
  0x00007f8ab9127d73: jmpq   0x00007f8ab9105c40
  0x00007f8ab9127d78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9127d80: je     0x00007f8ab9127e68
  0x00007f8ab9127d86: mov    %rsp,%r13
  0x00007f8ab9127d89: mov    (%rsp),%rax
  0x00007f8ab9127d8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9127d91: pushfq 
  0x00007f8ab9127d92: sub    $0x8,%rsp
  0x00007f8ab9127d96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9127d9b: sub    $0x80,%rsp
  0x00007f8ab9127da2: mov    %rax,0x78(%rsp)
  0x00007f8ab9127da7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9127dac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9127db1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9127db6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9127dbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9127dc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9127dc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9127dca: mov    %r9,0x30(%rsp)
  0x00007f8ab9127dcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9127dd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9127dd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9127dde: mov    %r13,0x10(%rsp)
  0x00007f8ab9127de3: mov    %r14,0x8(%rsp)
  0x00007f8ab9127de8: mov    %r15,(%rsp)
  0x00007f8ab9127dec: sub    $0x200,%rsp
  0x00007f8ab9127df3: fxsave64 (%rsp)
  0x00007f8ab9127df8: mov    %rbx,%rdi
  0x00007f8ab9127dfb: mov    %rax,%rsi
  0x00007f8ab9127dfe: callq  0x00007f8acef8bbca
  0x00007f8ab9127e03: fxrstor64 (%rsp)
  0x00007f8ab9127e08: add    $0x200,%rsp
  0x00007f8ab9127e0f: mov    (%rsp),%r15
  0x00007f8ab9127e13: mov    0x8(%rsp),%r14
  0x00007f8ab9127e18: mov    0x10(%rsp),%r13
  0x00007f8ab9127e1d: mov    0x18(%rsp),%r12
  0x00007f8ab9127e22: mov    0x20(%rsp),%r11
  0x00007f8ab9127e27: mov    0x28(%rsp),%r10
  0x00007f8ab9127e2c: mov    0x30(%rsp),%r9
  0x00007f8ab9127e31: mov    0x38(%rsp),%r8
  0x00007f8ab9127e36: mov    0x40(%rsp),%rdi
  0x00007f8ab9127e3b: mov    0x48(%rsp),%rsi
  0x00007f8ab9127e40: mov    0x50(%rsp),%rbp
  0x00007f8ab9127e45: mov    0x60(%rsp),%rbx
  0x00007f8ab9127e4a: mov    0x68(%rsp),%rdx
  0x00007f8ab9127e4f: mov    0x70(%rsp),%rcx
  0x00007f8ab9127e54: mov    0x78(%rsp),%rax
  0x00007f8ab9127e59: add    $0x80,%rsp
  0x00007f8ab9127e60: add    $0x8,%rsp
  0x00007f8ab9127e64: popfq  
  0x00007f8ab9127e65: mov    %r13,%rsp
  0x00007f8ab9127e68: pop    %rax
  0x00007f8ab9127e69: mov    %rsp,%r13
  0x00007f8ab9127e6c: sub    $0x20,%rsp
  0x00007f8ab9127e70: mov    %rax,(%rsp)
  0x00007f8ab9127e74: mov    %rsi,0x18(%rsp)
  0x00007f8ab9127e79: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9127e83: mov    %rax,0x10(%rsp)
  0x00007f8ab9127e88: mov    %rdx,0x8(%rsp)
  0x00007f8ab9127e8d: mov    0x40(%rbx),%rcx
  0x00007f8ab9127e91: jmpq   *%rcx

AHE@0x00007f8ac80d7300: 0xbbbe0000 i2c: 0x00007f8ab9127f60 c2i: 0x00007f8ab912807c c2iUV: 0x00007f8ab912804f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)F (572 bytes generated)
c2i argument handler starts at 0x7f8ab912807c
  0x00007f8ab9127f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9127f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9127f6e: cmp    %r11,%rax
  0x00007f8ab9127f71: jbe    0x00007f8ab9127f8a
  0x00007f8ab9127f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9127f81: cmp    %r11,%rax
  0x00007f8ab9127f84: jb     0x00007f8ab9128027
  0x00007f8ab9127f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9127f94: cmp    %r11,%rax
  0x00007f8ab9127f97: jbe    0x00007f8ab9127fb0
  0x00007f8ab9127f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9127fa7: cmp    %r11,%rax
  0x00007f8ab9127faa: jb     0x00007f8ab9128027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9127fb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9127fb5: sub    $0x80,%rsp
  0x00007f8ab9127fbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9127fc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9127fc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9127fcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9127fd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9127fd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9127fda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9127fdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9127fe4: mov    %r9,0x30(%rsp)
  0x00007f8ab9127fe9: mov    %r10,0x28(%rsp)
  0x00007f8ab9127fee: mov    %r11,0x20(%rsp)
  0x00007f8ab9127ff3: mov    %r12,0x18(%rsp)
  0x00007f8ab9127ff8: mov    %r13,0x10(%rsp)
  0x00007f8ab9127ffd: mov    %r14,0x8(%rsp)
  0x00007f8ab9128002: mov    %r15,(%rsp)
  0x00007f8ab9128006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9128010: movabs $0x7f8ab9127fb0,%rsi
  0x00007f8ab912801a: mov    %rsp,%rdx
  0x00007f8ab912801d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128021: callq  0x00007f8aceddb9fa
  0x00007f8ab9128026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9128027: mov    %rsp,%r11
  0x00007f8ab912802a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912802e: push   %rax
  0x00007f8ab912802f: mov    %r11,%rax
  0x00007f8ab9128032: mov    0x50(%rbx),%r11
  0x00007f8ab9128036: mov    0x20(%rax),%rsi
  0x00007f8ab912803a: mov    0x18(%rax),%rdx
  0x00007f8ab912803e: mov    0x8(%rax),%rcx
  0x00007f8ab9128042: mov    %rbx,0x258(%r15)
  0x00007f8ab9128049: mov    %rbx,%rax
  0x00007f8ab912804c: jmpq   *%r11
  0x00007f8ab912804f: mov    0x8(%rsi),%ebx
  0x00007f8ab9128052: shl    $0x3,%rbx
  0x00007f8ab9128056: cmp    0x10(%rax),%rbx
  0x00007f8ab912805a: mov    0x8(%rax),%rbx
  0x00007f8ab912805e: je     0x00007f8ab9128069
  0x00007f8ab9128064: jmpq   0x00007f8ab9105c40
  0x00007f8ab9128069: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128071: je     0x00007f8ab912816c
  0x00007f8ab9128077: jmpq   0x00007f8ab9105c40
  0x00007f8ab912807c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128084: je     0x00007f8ab912816c
  0x00007f8ab912808a: mov    %rsp,%r13
  0x00007f8ab912808d: mov    (%rsp),%rax
  0x00007f8ab9128091: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128095: pushfq 
  0x00007f8ab9128096: sub    $0x8,%rsp
  0x00007f8ab912809a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912809f: sub    $0x80,%rsp
  0x00007f8ab91280a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91280ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91280b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91280b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91280ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91280bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91280c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91280c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91280ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91280d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91280d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91280dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91280e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91280e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91280ec: mov    %r15,(%rsp)
  0x00007f8ab91280f0: sub    $0x200,%rsp
  0x00007f8ab91280f7: fxsave64 (%rsp)
  0x00007f8ab91280fc: mov    %rbx,%rdi
  0x00007f8ab91280ff: mov    %rax,%rsi
  0x00007f8ab9128102: callq  0x00007f8acef8bbca
  0x00007f8ab9128107: fxrstor64 (%rsp)
  0x00007f8ab912810c: add    $0x200,%rsp
  0x00007f8ab9128113: mov    (%rsp),%r15
  0x00007f8ab9128117: mov    0x8(%rsp),%r14
  0x00007f8ab912811c: mov    0x10(%rsp),%r13
  0x00007f8ab9128121: mov    0x18(%rsp),%r12
  0x00007f8ab9128126: mov    0x20(%rsp),%r11
  0x00007f8ab912812b: mov    0x28(%rsp),%r10
  0x00007f8ab9128130: mov    0x30(%rsp),%r9
  0x00007f8ab9128135: mov    0x38(%rsp),%r8
  0x00007f8ab912813a: mov    0x40(%rsp),%rdi
  0x00007f8ab912813f: mov    0x48(%rsp),%rsi
  0x00007f8ab9128144: mov    0x50(%rsp),%rbp
  0x00007f8ab9128149: mov    0x60(%rsp),%rbx
  0x00007f8ab912814e: mov    0x68(%rsp),%rdx
  0x00007f8ab9128153: mov    0x70(%rsp),%rcx
  0x00007f8ab9128158: mov    0x78(%rsp),%rax
  0x00007f8ab912815d: add    $0x80,%rsp
  0x00007f8ab9128164: add    $0x8,%rsp
  0x00007f8ab9128168: popfq  
  0x00007f8ab9128169: mov    %r13,%rsp
  0x00007f8ab912816c: pop    %rax
  0x00007f8ab912816d: mov    %rsp,%r13
  0x00007f8ab9128170: sub    $0x30,%rsp
  0x00007f8ab9128174: mov    %rax,(%rsp)
  0x00007f8ab9128178: mov    %rsi,0x20(%rsp)
  0x00007f8ab912817d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9128182: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912818c: mov    %rax,0x10(%rsp)
  0x00007f8ab9128191: mov    %rcx,0x8(%rsp)
  0x00007f8ab9128196: mov    0x40(%rbx),%rcx
  0x00007f8ab912819a: jmpq   *%rcx

AHE@0x00007f8ac80d7348: 0xbbabe000 i2c: 0x00007f8ab9128260 c2i: 0x00007f8ab912837f c2iUV: 0x00007f8ab9128352
i2c argument handler #0 for: receiver (Ljava/lang/Object;IJ)V (579 bytes generated)
c2i argument handler starts at 0x7f8ab912837f
  0x00007f8ab9128260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9128264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912826e: cmp    %r11,%rax
  0x00007f8ab9128271: jbe    0x00007f8ab912828a
  0x00007f8ab9128277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9128281: cmp    %r11,%rax
  0x00007f8ab9128284: jb     0x00007f8ab9128327
  0x00007f8ab912828a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9128294: cmp    %r11,%rax
  0x00007f8ab9128297: jbe    0x00007f8ab91282b0
  0x00007f8ab912829d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91282a7: cmp    %r11,%rax
  0x00007f8ab91282aa: jb     0x00007f8ab9128327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91282b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91282b5: sub    $0x80,%rsp
  0x00007f8ab91282bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91282c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91282c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91282cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91282d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91282d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91282da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91282df: mov    %r8,0x38(%rsp)
  0x00007f8ab91282e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91282e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91282ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91282f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91282f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91282fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9128302: mov    %r15,(%rsp)
  0x00007f8ab9128306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9128310: movabs $0x7f8ab91282b0,%rsi
  0x00007f8ab912831a: mov    %rsp,%rdx
  0x00007f8ab912831d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128321: callq  0x00007f8aceddb9fa
  0x00007f8ab9128326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9128327: mov    %rsp,%r11
  0x00007f8ab912832a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912832e: push   %rax
  0x00007f8ab912832f: mov    %r11,%rax
  0x00007f8ab9128332: mov    0x50(%rbx),%r11
  0x00007f8ab9128336: mov    0x28(%rax),%rsi
  0x00007f8ab912833a: mov    0x20(%rax),%rdx
  0x00007f8ab912833e: mov    0x18(%rax),%ecx
  0x00007f8ab9128341: mov    0x8(%rax),%r8
  0x00007f8ab9128345: mov    %rbx,0x258(%r15)
  0x00007f8ab912834c: mov    %rbx,%rax
  0x00007f8ab912834f: jmpq   *%r11
  0x00007f8ab9128352: mov    0x8(%rsi),%ebx
  0x00007f8ab9128355: shl    $0x3,%rbx
  0x00007f8ab9128359: cmp    0x10(%rax),%rbx
  0x00007f8ab912835d: mov    0x8(%rax),%rbx
  0x00007f8ab9128361: je     0x00007f8ab912836c
  0x00007f8ab9128367: jmpq   0x00007f8ab9105c40
  0x00007f8ab912836c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128374: je     0x00007f8ab912846f
  0x00007f8ab912837a: jmpq   0x00007f8ab9105c40
  0x00007f8ab912837f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128387: je     0x00007f8ab912846f
  0x00007f8ab912838d: mov    %rsp,%r13
  0x00007f8ab9128390: mov    (%rsp),%rax
  0x00007f8ab9128394: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128398: pushfq 
  0x00007f8ab9128399: sub    $0x8,%rsp
  0x00007f8ab912839d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91283a2: sub    $0x80,%rsp
  0x00007f8ab91283a9: mov    %rax,0x78(%rsp)
  0x00007f8ab91283ae: mov    %rcx,0x70(%rsp)
  0x00007f8ab91283b3: mov    %rdx,0x68(%rsp)
  0x00007f8ab91283b8: mov    %rbx,0x60(%rsp)
  0x00007f8ab91283bd: mov    %rbp,0x50(%rsp)
  0x00007f8ab91283c2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91283c7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91283cc: mov    %r8,0x38(%rsp)
  0x00007f8ab91283d1: mov    %r9,0x30(%rsp)
  0x00007f8ab91283d6: mov    %r10,0x28(%rsp)
  0x00007f8ab91283db: mov    %r11,0x20(%rsp)
  0x00007f8ab91283e0: mov    %r12,0x18(%rsp)
  0x00007f8ab91283e5: mov    %r13,0x10(%rsp)
  0x00007f8ab91283ea: mov    %r14,0x8(%rsp)
  0x00007f8ab91283ef: mov    %r15,(%rsp)
  0x00007f8ab91283f3: sub    $0x200,%rsp
  0x00007f8ab91283fa: fxsave64 (%rsp)
  0x00007f8ab91283ff: mov    %rbx,%rdi
  0x00007f8ab9128402: mov    %rax,%rsi
  0x00007f8ab9128405: callq  0x00007f8acef8bbca
  0x00007f8ab912840a: fxrstor64 (%rsp)
  0x00007f8ab912840f: add    $0x200,%rsp
  0x00007f8ab9128416: mov    (%rsp),%r15
  0x00007f8ab912841a: mov    0x8(%rsp),%r14
  0x00007f8ab912841f: mov    0x10(%rsp),%r13
  0x00007f8ab9128424: mov    0x18(%rsp),%r12
  0x00007f8ab9128429: mov    0x20(%rsp),%r11
  0x00007f8ab912842e: mov    0x28(%rsp),%r10
  0x00007f8ab9128433: mov    0x30(%rsp),%r9
  0x00007f8ab9128438: mov    0x38(%rsp),%r8
  0x00007f8ab912843d: mov    0x40(%rsp),%rdi
  0x00007f8ab9128442: mov    0x48(%rsp),%rsi
  0x00007f8ab9128447: mov    0x50(%rsp),%rbp
  0x00007f8ab912844c: mov    0x60(%rsp),%rbx
  0x00007f8ab9128451: mov    0x68(%rsp),%rdx
  0x00007f8ab9128456: mov    0x70(%rsp),%rcx
  0x00007f8ab912845b: mov    0x78(%rsp),%rax
  0x00007f8ab9128460: add    $0x80,%rsp
  0x00007f8ab9128467: add    $0x8,%rsp
  0x00007f8ab912846b: popfq  
  0x00007f8ab912846c: mov    %r13,%rsp
  0x00007f8ab912846f: pop    %rax
  0x00007f8ab9128470: mov    %rsp,%r13
  0x00007f8ab9128473: sub    $0x30,%rsp
  0x00007f8ab9128477: mov    %rax,(%rsp)
  0x00007f8ab912847b: mov    %rsi,0x28(%rsp)
  0x00007f8ab9128480: mov    %rdx,0x20(%rsp)
  0x00007f8ab9128485: mov    %ecx,0x18(%rsp)
  0x00007f8ab9128489: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9128493: mov    %rax,0x10(%rsp)
  0x00007f8ab9128498: mov    %r8,0x8(%rsp)
  0x00007f8ab912849d: mov    0x40(%rbx),%rcx
  0x00007f8ab91284a1: jmpq   *%rcx

AHE@0x00007f8ac80d7390: 0xbbbebe00 i2c: 0x00007f8ab9128560 c2i: 0x00007f8ab9128680 c2iUV: 0x00007f8ab9128653
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (596 bytes generated)
c2i argument handler starts at 0x7f8ab9128680
  0x00007f8ab9128560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9128564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912856e: cmp    %r11,%rax
  0x00007f8ab9128571: jbe    0x00007f8ab912858a
  0x00007f8ab9128577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9128581: cmp    %r11,%rax
  0x00007f8ab9128584: jb     0x00007f8ab9128627
  0x00007f8ab912858a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9128594: cmp    %r11,%rax
  0x00007f8ab9128597: jbe    0x00007f8ab91285b0
  0x00007f8ab912859d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91285a7: cmp    %r11,%rax
  0x00007f8ab91285aa: jb     0x00007f8ab9128627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91285b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91285b5: sub    $0x80,%rsp
  0x00007f8ab91285bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91285c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91285c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91285cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91285d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91285d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91285da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91285df: mov    %r8,0x38(%rsp)
  0x00007f8ab91285e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91285e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91285ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91285f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91285f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91285fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9128602: mov    %r15,(%rsp)
  0x00007f8ab9128606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9128610: movabs $0x7f8ab91285b0,%rsi
  0x00007f8ab912861a: mov    %rsp,%rdx
  0x00007f8ab912861d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128621: callq  0x00007f8aceddb9fa
  0x00007f8ab9128626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9128627: mov    %rsp,%r11
  0x00007f8ab912862a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912862e: push   %rax
  0x00007f8ab912862f: mov    %r11,%rax
  0x00007f8ab9128632: mov    0x50(%rbx),%r11
  0x00007f8ab9128636: mov    0x30(%rax),%rsi
  0x00007f8ab912863a: mov    0x28(%rax),%rdx
  0x00007f8ab912863e: mov    0x18(%rax),%rcx
  0x00007f8ab9128642: mov    0x8(%rax),%r8
  0x00007f8ab9128646: mov    %rbx,0x258(%r15)
  0x00007f8ab912864d: mov    %rbx,%rax
  0x00007f8ab9128650: jmpq   *%r11
  0x00007f8ab9128653: mov    0x8(%rsi),%ebx
  0x00007f8ab9128656: shl    $0x3,%rbx
  0x00007f8ab912865a: cmp    0x10(%rax),%rbx
  0x00007f8ab912865e: mov    0x8(%rax),%rbx
  0x00007f8ab9128662: je     0x00007f8ab912866d
  0x00007f8ab9128668: jmpq   0x00007f8ab9105c40
  0x00007f8ab912866d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128675: je     0x00007f8ab9128770
  0x00007f8ab912867b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9128680: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128688: je     0x00007f8ab9128770
  0x00007f8ab912868e: mov    %rsp,%r13
  0x00007f8ab9128691: mov    (%rsp),%rax
  0x00007f8ab9128695: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128699: pushfq 
  0x00007f8ab912869a: sub    $0x8,%rsp
  0x00007f8ab912869e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91286a3: sub    $0x80,%rsp
  0x00007f8ab91286aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91286af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91286b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91286b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91286be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91286c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91286c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91286cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91286d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91286d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91286dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91286e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91286e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91286eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91286f0: mov    %r15,(%rsp)
  0x00007f8ab91286f4: sub    $0x200,%rsp
  0x00007f8ab91286fb: fxsave64 (%rsp)
  0x00007f8ab9128700: mov    %rbx,%rdi
  0x00007f8ab9128703: mov    %rax,%rsi
  0x00007f8ab9128706: callq  0x00007f8acef8bbca
  0x00007f8ab912870b: fxrstor64 (%rsp)
  0x00007f8ab9128710: add    $0x200,%rsp
  0x00007f8ab9128717: mov    (%rsp),%r15
  0x00007f8ab912871b: mov    0x8(%rsp),%r14
  0x00007f8ab9128720: mov    0x10(%rsp),%r13
  0x00007f8ab9128725: mov    0x18(%rsp),%r12
  0x00007f8ab912872a: mov    0x20(%rsp),%r11
  0x00007f8ab912872f: mov    0x28(%rsp),%r10
  0x00007f8ab9128734: mov    0x30(%rsp),%r9
  0x00007f8ab9128739: mov    0x38(%rsp),%r8
  0x00007f8ab912873e: mov    0x40(%rsp),%rdi
  0x00007f8ab9128743: mov    0x48(%rsp),%rsi
  0x00007f8ab9128748: mov    0x50(%rsp),%rbp
  0x00007f8ab912874d: mov    0x60(%rsp),%rbx
  0x00007f8ab9128752: mov    0x68(%rsp),%rdx
  0x00007f8ab9128757: mov    0x70(%rsp),%rcx
  0x00007f8ab912875c: mov    0x78(%rsp),%rax
  0x00007f8ab9128761: add    $0x80,%rsp
  0x00007f8ab9128768: add    $0x8,%rsp
  0x00007f8ab912876c: popfq  
  0x00007f8ab912876d: mov    %r13,%rsp
  0x00007f8ab9128770: pop    %rax
  0x00007f8ab9128771: mov    %rsp,%r13
  0x00007f8ab9128774: sub    $0x40,%rsp
  0x00007f8ab9128778: mov    %rax,(%rsp)
  0x00007f8ab912877c: mov    %rsi,0x30(%rsp)
  0x00007f8ab9128781: mov    %rdx,0x28(%rsp)
  0x00007f8ab9128786: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9128790: mov    %rax,0x20(%rsp)
  0x00007f8ab9128795: mov    %rcx,0x18(%rsp)
  0x00007f8ab912879a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91287a4: mov    %rax,0x10(%rsp)
  0x00007f8ab91287a9: mov    %r8,0x8(%rsp)
  0x00007f8ab91287ae: mov    0x40(%rbx),%rcx
  0x00007f8ab91287b2: jmpq   *%rcx

AHE@0x00007f8ac80d73d8: 0xbbebe000 i2c: 0x00007f8ab9128860 c2i: 0x00007f8ab912897c c2iUV: 0x00007f8ab912894f
i2c argument handler #0 for: receiver (JJ)V (587 bytes generated)
c2i argument handler starts at 0x7f8ab912897c
  0x00007f8ab9128860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9128864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912886e: cmp    %r11,%rax
  0x00007f8ab9128871: jbe    0x00007f8ab912888a
  0x00007f8ab9128877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9128881: cmp    %r11,%rax
  0x00007f8ab9128884: jb     0x00007f8ab9128927
  0x00007f8ab912888a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9128894: cmp    %r11,%rax
  0x00007f8ab9128897: jbe    0x00007f8ab91288b0
  0x00007f8ab912889d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91288a7: cmp    %r11,%rax
  0x00007f8ab91288aa: jb     0x00007f8ab9128927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91288b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91288b5: sub    $0x80,%rsp
  0x00007f8ab91288bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91288c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91288c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91288cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91288d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91288d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91288da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91288df: mov    %r8,0x38(%rsp)
  0x00007f8ab91288e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91288e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91288ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91288f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91288f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91288fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9128902: mov    %r15,(%rsp)
  0x00007f8ab9128906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9128910: movabs $0x7f8ab91288b0,%rsi
  0x00007f8ab912891a: mov    %rsp,%rdx
  0x00007f8ab912891d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128921: callq  0x00007f8aceddb9fa
  0x00007f8ab9128926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9128927: mov    %rsp,%r11
  0x00007f8ab912892a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912892e: push   %rax
  0x00007f8ab912892f: mov    %r11,%rax
  0x00007f8ab9128932: mov    0x50(%rbx),%r11
  0x00007f8ab9128936: mov    0x28(%rax),%rsi
  0x00007f8ab912893a: mov    0x18(%rax),%rdx
  0x00007f8ab912893e: mov    0x8(%rax),%rcx
  0x00007f8ab9128942: mov    %rbx,0x258(%r15)
  0x00007f8ab9128949: mov    %rbx,%rax
  0x00007f8ab912894c: jmpq   *%r11
  0x00007f8ab912894f: mov    0x8(%rsi),%ebx
  0x00007f8ab9128952: shl    $0x3,%rbx
  0x00007f8ab9128956: cmp    0x10(%rax),%rbx
  0x00007f8ab912895a: mov    0x8(%rax),%rbx
  0x00007f8ab912895e: je     0x00007f8ab9128969
  0x00007f8ab9128964: jmpq   0x00007f8ab9105c40
  0x00007f8ab9128969: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128971: je     0x00007f8ab9128a6c
  0x00007f8ab9128977: jmpq   0x00007f8ab9105c40
  0x00007f8ab912897c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128984: je     0x00007f8ab9128a6c
  0x00007f8ab912898a: mov    %rsp,%r13
  0x00007f8ab912898d: mov    (%rsp),%rax
  0x00007f8ab9128991: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128995: pushfq 
  0x00007f8ab9128996: sub    $0x8,%rsp
  0x00007f8ab912899a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912899f: sub    $0x80,%rsp
  0x00007f8ab91289a6: mov    %rax,0x78(%rsp)
  0x00007f8ab91289ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab91289b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91289b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91289ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab91289bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91289c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91289c9: mov    %r8,0x38(%rsp)
  0x00007f8ab91289ce: mov    %r9,0x30(%rsp)
  0x00007f8ab91289d3: mov    %r10,0x28(%rsp)
  0x00007f8ab91289d8: mov    %r11,0x20(%rsp)
  0x00007f8ab91289dd: mov    %r12,0x18(%rsp)
  0x00007f8ab91289e2: mov    %r13,0x10(%rsp)
  0x00007f8ab91289e7: mov    %r14,0x8(%rsp)
  0x00007f8ab91289ec: mov    %r15,(%rsp)
  0x00007f8ab91289f0: sub    $0x200,%rsp
  0x00007f8ab91289f7: fxsave64 (%rsp)
  0x00007f8ab91289fc: mov    %rbx,%rdi
  0x00007f8ab91289ff: mov    %rax,%rsi
  0x00007f8ab9128a02: callq  0x00007f8acef8bbca
  0x00007f8ab9128a07: fxrstor64 (%rsp)
  0x00007f8ab9128a0c: add    $0x200,%rsp
  0x00007f8ab9128a13: mov    (%rsp),%r15
  0x00007f8ab9128a17: mov    0x8(%rsp),%r14
  0x00007f8ab9128a1c: mov    0x10(%rsp),%r13
  0x00007f8ab9128a21: mov    0x18(%rsp),%r12
  0x00007f8ab9128a26: mov    0x20(%rsp),%r11
  0x00007f8ab9128a2b: mov    0x28(%rsp),%r10
  0x00007f8ab9128a30: mov    0x30(%rsp),%r9
  0x00007f8ab9128a35: mov    0x38(%rsp),%r8
  0x00007f8ab9128a3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9128a3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9128a44: mov    0x50(%rsp),%rbp
  0x00007f8ab9128a49: mov    0x60(%rsp),%rbx
  0x00007f8ab9128a4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9128a53: mov    0x70(%rsp),%rcx
  0x00007f8ab9128a58: mov    0x78(%rsp),%rax
  0x00007f8ab9128a5d: add    $0x80,%rsp
  0x00007f8ab9128a64: add    $0x8,%rsp
  0x00007f8ab9128a68: popfq  
  0x00007f8ab9128a69: mov    %r13,%rsp
  0x00007f8ab9128a6c: pop    %rax
  0x00007f8ab9128a6d: mov    %rsp,%r13
  0x00007f8ab9128a70: sub    $0x30,%rsp
  0x00007f8ab9128a74: mov    %rax,(%rsp)
  0x00007f8ab9128a78: mov    %rsi,0x28(%rsp)
  0x00007f8ab9128a7d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9128a87: mov    %rax,0x20(%rsp)
  0x00007f8ab9128a8c: mov    %rdx,0x18(%rsp)
  0x00007f8ab9128a91: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9128a9b: mov    %rax,0x10(%rsp)
  0x00007f8ab9128aa0: mov    %rcx,0x8(%rsp)
  0x00007f8ab9128aa5: mov    0x40(%rbx),%rcx
  0x00007f8ab9128aa9: jmpq   *%rcx

AHE@0x00007f8ac80d7420: 0xbbbe0000 i2c: 0x00007f8ab9128b60 c2i: 0x00007f8ab9128c7c c2iUV: 0x00007f8ab9128c4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)J (572 bytes generated)
c2i argument handler starts at 0x7f8ab9128c7c
  0x00007f8ab9128b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9128b64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9128b6e: cmp    %r11,%rax
  0x00007f8ab9128b71: jbe    0x00007f8ab9128b8a
  0x00007f8ab9128b77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9128b81: cmp    %r11,%rax
  0x00007f8ab9128b84: jb     0x00007f8ab9128c27
  0x00007f8ab9128b8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9128b94: cmp    %r11,%rax
  0x00007f8ab9128b97: jbe    0x00007f8ab9128bb0
  0x00007f8ab9128b9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9128ba7: cmp    %r11,%rax
  0x00007f8ab9128baa: jb     0x00007f8ab9128c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9128bb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9128bb5: sub    $0x80,%rsp
  0x00007f8ab9128bbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9128bc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9128bc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9128bcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9128bd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9128bd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9128bda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9128bdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9128be4: mov    %r9,0x30(%rsp)
  0x00007f8ab9128be9: mov    %r10,0x28(%rsp)
  0x00007f8ab9128bee: mov    %r11,0x20(%rsp)
  0x00007f8ab9128bf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9128bf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9128bfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9128c02: mov    %r15,(%rsp)
  0x00007f8ab9128c06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9128c10: movabs $0x7f8ab9128bb0,%rsi
  0x00007f8ab9128c1a: mov    %rsp,%rdx
  0x00007f8ab9128c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128c21: callq  0x00007f8aceddb9fa
  0x00007f8ab9128c26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9128c27: mov    %rsp,%r11
  0x00007f8ab9128c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128c2e: push   %rax
  0x00007f8ab9128c2f: mov    %r11,%rax
  0x00007f8ab9128c32: mov    0x50(%rbx),%r11
  0x00007f8ab9128c36: mov    0x20(%rax),%rsi
  0x00007f8ab9128c3a: mov    0x18(%rax),%rdx
  0x00007f8ab9128c3e: mov    0x8(%rax),%rcx
  0x00007f8ab9128c42: mov    %rbx,0x258(%r15)
  0x00007f8ab9128c49: mov    %rbx,%rax
  0x00007f8ab9128c4c: jmpq   *%r11
  0x00007f8ab9128c4f: mov    0x8(%rsi),%ebx
  0x00007f8ab9128c52: shl    $0x3,%rbx
  0x00007f8ab9128c56: cmp    0x10(%rax),%rbx
  0x00007f8ab9128c5a: mov    0x8(%rax),%rbx
  0x00007f8ab9128c5e: je     0x00007f8ab9128c69
  0x00007f8ab9128c64: jmpq   0x00007f8ab9105c40
  0x00007f8ab9128c69: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128c71: je     0x00007f8ab9128d6c
  0x00007f8ab9128c77: jmpq   0x00007f8ab9105c40
  0x00007f8ab9128c7c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128c84: je     0x00007f8ab9128d6c
  0x00007f8ab9128c8a: mov    %rsp,%r13
  0x00007f8ab9128c8d: mov    (%rsp),%rax
  0x00007f8ab9128c91: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128c95: pushfq 
  0x00007f8ab9128c96: sub    $0x8,%rsp
  0x00007f8ab9128c9a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9128c9f: sub    $0x80,%rsp
  0x00007f8ab9128ca6: mov    %rax,0x78(%rsp)
  0x00007f8ab9128cab: mov    %rcx,0x70(%rsp)
  0x00007f8ab9128cb0: mov    %rdx,0x68(%rsp)
  0x00007f8ab9128cb5: mov    %rbx,0x60(%rsp)
  0x00007f8ab9128cba: mov    %rbp,0x50(%rsp)
  0x00007f8ab9128cbf: mov    %rsi,0x48(%rsp)
  0x00007f8ab9128cc4: mov    %rdi,0x40(%rsp)
  0x00007f8ab9128cc9: mov    %r8,0x38(%rsp)
  0x00007f8ab9128cce: mov    %r9,0x30(%rsp)
  0x00007f8ab9128cd3: mov    %r10,0x28(%rsp)
  0x00007f8ab9128cd8: mov    %r11,0x20(%rsp)
  0x00007f8ab9128cdd: mov    %r12,0x18(%rsp)
  0x00007f8ab9128ce2: mov    %r13,0x10(%rsp)
  0x00007f8ab9128ce7: mov    %r14,0x8(%rsp)
  0x00007f8ab9128cec: mov    %r15,(%rsp)
  0x00007f8ab9128cf0: sub    $0x200,%rsp
  0x00007f8ab9128cf7: fxsave64 (%rsp)
  0x00007f8ab9128cfc: mov    %rbx,%rdi
  0x00007f8ab9128cff: mov    %rax,%rsi
  0x00007f8ab9128d02: callq  0x00007f8acef8bbca
  0x00007f8ab9128d07: fxrstor64 (%rsp)
  0x00007f8ab9128d0c: add    $0x200,%rsp
  0x00007f8ab9128d13: mov    (%rsp),%r15
  0x00007f8ab9128d17: mov    0x8(%rsp),%r14
  0x00007f8ab9128d1c: mov    0x10(%rsp),%r13
  0x00007f8ab9128d21: mov    0x18(%rsp),%r12
  0x00007f8ab9128d26: mov    0x20(%rsp),%r11
  0x00007f8ab9128d2b: mov    0x28(%rsp),%r10
  0x00007f8ab9128d30: mov    0x30(%rsp),%r9
  0x00007f8ab9128d35: mov    0x38(%rsp),%r8
  0x00007f8ab9128d3a: mov    0x40(%rsp),%rdi
  0x00007f8ab9128d3f: mov    0x48(%rsp),%rsi
  0x00007f8ab9128d44: mov    0x50(%rsp),%rbp
  0x00007f8ab9128d49: mov    0x60(%rsp),%rbx
  0x00007f8ab9128d4e: mov    0x68(%rsp),%rdx
  0x00007f8ab9128d53: mov    0x70(%rsp),%rcx
  0x00007f8ab9128d58: mov    0x78(%rsp),%rax
  0x00007f8ab9128d5d: add    $0x80,%rsp
  0x00007f8ab9128d64: add    $0x8,%rsp
  0x00007f8ab9128d68: popfq  
  0x00007f8ab9128d69: mov    %r13,%rsp
  0x00007f8ab9128d6c: pop    %rax
  0x00007f8ab9128d6d: mov    %rsp,%r13
  0x00007f8ab9128d70: sub    $0x30,%rsp
  0x00007f8ab9128d74: mov    %rax,(%rsp)
  0x00007f8ab9128d78: mov    %rsi,0x20(%rsp)
  0x00007f8ab9128d7d: mov    %rdx,0x18(%rsp)
  0x00007f8ab9128d82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9128d8c: mov    %rax,0x10(%rsp)
  0x00007f8ab9128d91: mov    %rcx,0x8(%rsp)
  0x00007f8ab9128d96: mov    0x40(%rbx),%rcx
  0x00007f8ab9128d9a: jmpq   *%rcx

AHE@0x00007f8ac80d7468: 0xbbe00000 i2c: 0x00007f8ab9128e60 c2i: 0x00007f8ab9128f78 c2iUV: 0x00007f8ab9128f4b
i2c argument handler #0 for: receiver (J)J (563 bytes generated)
c2i argument handler starts at 0x7f8ab9128f78
  0x00007f8ab9128e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9128e64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9128e6e: cmp    %r11,%rax
  0x00007f8ab9128e71: jbe    0x00007f8ab9128e8a
  0x00007f8ab9128e77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9128e81: cmp    %r11,%rax
  0x00007f8ab9128e84: jb     0x00007f8ab9128f27
  0x00007f8ab9128e8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9128e94: cmp    %r11,%rax
  0x00007f8ab9128e97: jbe    0x00007f8ab9128eb0
  0x00007f8ab9128e9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9128ea7: cmp    %r11,%rax
  0x00007f8ab9128eaa: jb     0x00007f8ab9128f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9128eb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9128eb5: sub    $0x80,%rsp
  0x00007f8ab9128ebc: mov    %rax,0x78(%rsp)
  0x00007f8ab9128ec1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9128ec6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9128ecb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9128ed0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9128ed5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9128eda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9128edf: mov    %r8,0x38(%rsp)
  0x00007f8ab9128ee4: mov    %r9,0x30(%rsp)
  0x00007f8ab9128ee9: mov    %r10,0x28(%rsp)
  0x00007f8ab9128eee: mov    %r11,0x20(%rsp)
  0x00007f8ab9128ef3: mov    %r12,0x18(%rsp)
  0x00007f8ab9128ef8: mov    %r13,0x10(%rsp)
  0x00007f8ab9128efd: mov    %r14,0x8(%rsp)
  0x00007f8ab9128f02: mov    %r15,(%rsp)
  0x00007f8ab9128f06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9128f10: movabs $0x7f8ab9128eb0,%rsi
  0x00007f8ab9128f1a: mov    %rsp,%rdx
  0x00007f8ab9128f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128f21: callq  0x00007f8aceddb9fa
  0x00007f8ab9128f26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9128f27: mov    %rsp,%r11
  0x00007f8ab9128f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128f2e: push   %rax
  0x00007f8ab9128f2f: mov    %r11,%rax
  0x00007f8ab9128f32: mov    0x50(%rbx),%r11
  0x00007f8ab9128f36: mov    0x18(%rax),%rsi
  0x00007f8ab9128f3a: mov    0x8(%rax),%rdx
  0x00007f8ab9128f3e: mov    %rbx,0x258(%r15)
  0x00007f8ab9128f45: mov    %rbx,%rax
  0x00007f8ab9128f48: jmpq   *%r11
  0x00007f8ab9128f4b: mov    0x8(%rsi),%ebx
  0x00007f8ab9128f4e: shl    $0x3,%rbx
  0x00007f8ab9128f52: cmp    0x10(%rax),%rbx
  0x00007f8ab9128f56: mov    0x8(%rax),%rbx
  0x00007f8ab9128f5a: je     0x00007f8ab9128f65
  0x00007f8ab9128f60: jmpq   0x00007f8ab9105c40
  0x00007f8ab9128f65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128f6d: je     0x00007f8ab9129068
  0x00007f8ab9128f73: jmpq   0x00007f8ab9105c40
  0x00007f8ab9128f78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9128f80: je     0x00007f8ab9129068
  0x00007f8ab9128f86: mov    %rsp,%r13
  0x00007f8ab9128f89: mov    (%rsp),%rax
  0x00007f8ab9128f8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9128f91: pushfq 
  0x00007f8ab9128f92: sub    $0x8,%rsp
  0x00007f8ab9128f96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9128f9b: sub    $0x80,%rsp
  0x00007f8ab9128fa2: mov    %rax,0x78(%rsp)
  0x00007f8ab9128fa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9128fac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9128fb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9128fb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9128fbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9128fc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9128fc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9128fca: mov    %r9,0x30(%rsp)
  0x00007f8ab9128fcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9128fd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9128fd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9128fde: mov    %r13,0x10(%rsp)
  0x00007f8ab9128fe3: mov    %r14,0x8(%rsp)
  0x00007f8ab9128fe8: mov    %r15,(%rsp)
  0x00007f8ab9128fec: sub    $0x200,%rsp
  0x00007f8ab9128ff3: fxsave64 (%rsp)
  0x00007f8ab9128ff8: mov    %rbx,%rdi
  0x00007f8ab9128ffb: mov    %rax,%rsi
  0x00007f8ab9128ffe: callq  0x00007f8acef8bbca
  0x00007f8ab9129003: fxrstor64 (%rsp)
  0x00007f8ab9129008: add    $0x200,%rsp
  0x00007f8ab912900f: mov    (%rsp),%r15
  0x00007f8ab9129013: mov    0x8(%rsp),%r14
  0x00007f8ab9129018: mov    0x10(%rsp),%r13
  0x00007f8ab912901d: mov    0x18(%rsp),%r12
  0x00007f8ab9129022: mov    0x20(%rsp),%r11
  0x00007f8ab9129027: mov    0x28(%rsp),%r10
  0x00007f8ab912902c: mov    0x30(%rsp),%r9
  0x00007f8ab9129031: mov    0x38(%rsp),%r8
  0x00007f8ab9129036: mov    0x40(%rsp),%rdi
  0x00007f8ab912903b: mov    0x48(%rsp),%rsi
  0x00007f8ab9129040: mov    0x50(%rsp),%rbp
  0x00007f8ab9129045: mov    0x60(%rsp),%rbx
  0x00007f8ab912904a: mov    0x68(%rsp),%rdx
  0x00007f8ab912904f: mov    0x70(%rsp),%rcx
  0x00007f8ab9129054: mov    0x78(%rsp),%rax
  0x00007f8ab9129059: add    $0x80,%rsp
  0x00007f8ab9129060: add    $0x8,%rsp
  0x00007f8ab9129064: popfq  
  0x00007f8ab9129065: mov    %r13,%rsp
  0x00007f8ab9129068: pop    %rax
  0x00007f8ab9129069: mov    %rsp,%r13
  0x00007f8ab912906c: sub    $0x20,%rsp
  0x00007f8ab9129070: mov    %rax,(%rsp)
  0x00007f8ab9129074: mov    %rsi,0x18(%rsp)
  0x00007f8ab9129079: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9129083: mov    %rax,0x10(%rsp)
  0x00007f8ab9129088: mov    %rdx,0x8(%rsp)
  0x00007f8ab912908d: mov    0x40(%rbx),%rcx
  0x00007f8ab9129091: jmpq   *%rcx

AHE@0x00007f8ac80d74b0: 0xbba00000 i2c: 0x00007f8ab9129160 c2i: 0x00007f8ab912927b c2iUV: 0x00007f8ab912924e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)J (555 bytes generated)
c2i argument handler starts at 0x7f8ab912927b
  0x00007f8ab9129160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9129164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912916e: cmp    %r11,%rax
  0x00007f8ab9129171: jbe    0x00007f8ab912918a
  0x00007f8ab9129177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9129181: cmp    %r11,%rax
  0x00007f8ab9129184: jb     0x00007f8ab9129227
  0x00007f8ab912918a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9129194: cmp    %r11,%rax
  0x00007f8ab9129197: jbe    0x00007f8ab91291b0
  0x00007f8ab912919d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91291a7: cmp    %r11,%rax
  0x00007f8ab91291aa: jb     0x00007f8ab9129227
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91291b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91291b5: sub    $0x80,%rsp
  0x00007f8ab91291bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91291c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91291c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91291cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91291d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91291d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91291da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91291df: mov    %r8,0x38(%rsp)
  0x00007f8ab91291e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91291e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91291ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91291f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91291f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91291fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9129202: mov    %r15,(%rsp)
  0x00007f8ab9129206: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9129210: movabs $0x7f8ab91291b0,%rsi
  0x00007f8ab912921a: mov    %rsp,%rdx
  0x00007f8ab912921d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129221: callq  0x00007f8aceddb9fa
  0x00007f8ab9129226: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9129227: mov    %rsp,%r11
  0x00007f8ab912922a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912922e: push   %rax
  0x00007f8ab912922f: mov    %r11,%rax
  0x00007f8ab9129232: mov    0x50(%rbx),%r11
  0x00007f8ab9129236: mov    0x18(%rax),%rsi
  0x00007f8ab912923a: mov    0x10(%rax),%rdx
  0x00007f8ab912923e: mov    0x8(%rax),%ecx
  0x00007f8ab9129241: mov    %rbx,0x258(%r15)
  0x00007f8ab9129248: mov    %rbx,%rax
  0x00007f8ab912924b: jmpq   *%r11
  0x00007f8ab912924e: mov    0x8(%rsi),%ebx
  0x00007f8ab9129251: shl    $0x3,%rbx
  0x00007f8ab9129255: cmp    0x10(%rax),%rbx
  0x00007f8ab9129259: mov    0x8(%rax),%rbx
  0x00007f8ab912925d: je     0x00007f8ab9129268
  0x00007f8ab9129263: jmpq   0x00007f8ab9105c40
  0x00007f8ab9129268: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129270: je     0x00007f8ab912936b
  0x00007f8ab9129276: jmpq   0x00007f8ab9105c40
  0x00007f8ab912927b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129283: je     0x00007f8ab912936b
  0x00007f8ab9129289: mov    %rsp,%r13
  0x00007f8ab912928c: mov    (%rsp),%rax
  0x00007f8ab9129290: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129294: pushfq 
  0x00007f8ab9129295: sub    $0x8,%rsp
  0x00007f8ab9129299: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912929e: sub    $0x80,%rsp
  0x00007f8ab91292a5: mov    %rax,0x78(%rsp)
  0x00007f8ab91292aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab91292af: mov    %rdx,0x68(%rsp)
  0x00007f8ab91292b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab91292b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab91292be: mov    %rsi,0x48(%rsp)
  0x00007f8ab91292c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91292c8: mov    %r8,0x38(%rsp)
  0x00007f8ab91292cd: mov    %r9,0x30(%rsp)
  0x00007f8ab91292d2: mov    %r10,0x28(%rsp)
  0x00007f8ab91292d7: mov    %r11,0x20(%rsp)
  0x00007f8ab91292dc: mov    %r12,0x18(%rsp)
  0x00007f8ab91292e1: mov    %r13,0x10(%rsp)
  0x00007f8ab91292e6: mov    %r14,0x8(%rsp)
  0x00007f8ab91292eb: mov    %r15,(%rsp)
  0x00007f8ab91292ef: sub    $0x200,%rsp
  0x00007f8ab91292f6: fxsave64 (%rsp)
  0x00007f8ab91292fb: mov    %rbx,%rdi
  0x00007f8ab91292fe: mov    %rax,%rsi
  0x00007f8ab9129301: callq  0x00007f8acef8bbca
  0x00007f8ab9129306: fxrstor64 (%rsp)
  0x00007f8ab912930b: add    $0x200,%rsp
  0x00007f8ab9129312: mov    (%rsp),%r15
  0x00007f8ab9129316: mov    0x8(%rsp),%r14
  0x00007f8ab912931b: mov    0x10(%rsp),%r13
  0x00007f8ab9129320: mov    0x18(%rsp),%r12
  0x00007f8ab9129325: mov    0x20(%rsp),%r11
  0x00007f8ab912932a: mov    0x28(%rsp),%r10
  0x00007f8ab912932f: mov    0x30(%rsp),%r9
  0x00007f8ab9129334: mov    0x38(%rsp),%r8
  0x00007f8ab9129339: mov    0x40(%rsp),%rdi
  0x00007f8ab912933e: mov    0x48(%rsp),%rsi
  0x00007f8ab9129343: mov    0x50(%rsp),%rbp
  0x00007f8ab9129348: mov    0x60(%rsp),%rbx
  0x00007f8ab912934d: mov    0x68(%rsp),%rdx
  0x00007f8ab9129352: mov    0x70(%rsp),%rcx
  0x00007f8ab9129357: mov    0x78(%rsp),%rax
  0x00007f8ab912935c: add    $0x80,%rsp
  0x00007f8ab9129363: add    $0x8,%rsp
  0x00007f8ab9129367: popfq  
  0x00007f8ab9129368: mov    %r13,%rsp
  0x00007f8ab912936b: pop    %rax
  0x00007f8ab912936c: mov    %rsp,%r13
  0x00007f8ab912936f: sub    $0x20,%rsp
  0x00007f8ab9129373: mov    %rax,(%rsp)
  0x00007f8ab9129377: mov    %rsi,0x18(%rsp)
  0x00007f8ab912937c: mov    %rdx,0x10(%rsp)
  0x00007f8ab9129381: mov    %ecx,0x8(%rsp)
  0x00007f8ab9129385: mov    0x40(%rbx),%rcx
  0x00007f8ab9129389: jmpq   *%rcx

AHE@0x00007f8ac80d74f8: 0xbbbea000 i2c: 0x00007f8ab9129460 c2i: 0x00007f8ab9129580 c2iUV: 0x00007f8ab9129553
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab9129580
  0x00007f8ab9129460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9129464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912946e: cmp    %r11,%rax
  0x00007f8ab9129471: jbe    0x00007f8ab912948a
  0x00007f8ab9129477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9129481: cmp    %r11,%rax
  0x00007f8ab9129484: jb     0x00007f8ab9129527
  0x00007f8ab912948a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9129494: cmp    %r11,%rax
  0x00007f8ab9129497: jbe    0x00007f8ab91294b0
  0x00007f8ab912949d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91294a7: cmp    %r11,%rax
  0x00007f8ab91294aa: jb     0x00007f8ab9129527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91294b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91294b5: sub    $0x80,%rsp
  0x00007f8ab91294bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91294c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91294c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91294cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91294d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91294d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91294da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91294df: mov    %r8,0x38(%rsp)
  0x00007f8ab91294e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91294e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91294ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91294f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91294f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91294fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9129502: mov    %r15,(%rsp)
  0x00007f8ab9129506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9129510: movabs $0x7f8ab91294b0,%rsi
  0x00007f8ab912951a: mov    %rsp,%rdx
  0x00007f8ab912951d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129521: callq  0x00007f8aceddb9fa
  0x00007f8ab9129526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9129527: mov    %rsp,%r11
  0x00007f8ab912952a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912952e: push   %rax
  0x00007f8ab912952f: mov    %r11,%rax
  0x00007f8ab9129532: mov    0x50(%rbx),%r11
  0x00007f8ab9129536: mov    0x28(%rax),%rsi
  0x00007f8ab912953a: mov    0x20(%rax),%rdx
  0x00007f8ab912953e: mov    0x10(%rax),%rcx
  0x00007f8ab9129542: mov    0x8(%rax),%r8d
  0x00007f8ab9129546: mov    %rbx,0x258(%r15)
  0x00007f8ab912954d: mov    %rbx,%rax
  0x00007f8ab9129550: jmpq   *%r11
  0x00007f8ab9129553: mov    0x8(%rsi),%ebx
  0x00007f8ab9129556: shl    $0x3,%rbx
  0x00007f8ab912955a: cmp    0x10(%rax),%rbx
  0x00007f8ab912955e: mov    0x8(%rax),%rbx
  0x00007f8ab9129562: je     0x00007f8ab912956d
  0x00007f8ab9129568: jmpq   0x00007f8ab9105c40
  0x00007f8ab912956d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129575: je     0x00007f8ab9129670
  0x00007f8ab912957b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9129580: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129588: je     0x00007f8ab9129670
  0x00007f8ab912958e: mov    %rsp,%r13
  0x00007f8ab9129591: mov    (%rsp),%rax
  0x00007f8ab9129595: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129599: pushfq 
  0x00007f8ab912959a: sub    $0x8,%rsp
  0x00007f8ab912959e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91295a3: sub    $0x80,%rsp
  0x00007f8ab91295aa: mov    %rax,0x78(%rsp)
  0x00007f8ab91295af: mov    %rcx,0x70(%rsp)
  0x00007f8ab91295b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91295b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91295be: mov    %rbp,0x50(%rsp)
  0x00007f8ab91295c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91295c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91295cd: mov    %r8,0x38(%rsp)
  0x00007f8ab91295d2: mov    %r9,0x30(%rsp)
  0x00007f8ab91295d7: mov    %r10,0x28(%rsp)
  0x00007f8ab91295dc: mov    %r11,0x20(%rsp)
  0x00007f8ab91295e1: mov    %r12,0x18(%rsp)
  0x00007f8ab91295e6: mov    %r13,0x10(%rsp)
  0x00007f8ab91295eb: mov    %r14,0x8(%rsp)
  0x00007f8ab91295f0: mov    %r15,(%rsp)
  0x00007f8ab91295f4: sub    $0x200,%rsp
  0x00007f8ab91295fb: fxsave64 (%rsp)
  0x00007f8ab9129600: mov    %rbx,%rdi
  0x00007f8ab9129603: mov    %rax,%rsi
  0x00007f8ab9129606: callq  0x00007f8acef8bbca
  0x00007f8ab912960b: fxrstor64 (%rsp)
  0x00007f8ab9129610: add    $0x200,%rsp
  0x00007f8ab9129617: mov    (%rsp),%r15
  0x00007f8ab912961b: mov    0x8(%rsp),%r14
  0x00007f8ab9129620: mov    0x10(%rsp),%r13
  0x00007f8ab9129625: mov    0x18(%rsp),%r12
  0x00007f8ab912962a: mov    0x20(%rsp),%r11
  0x00007f8ab912962f: mov    0x28(%rsp),%r10
  0x00007f8ab9129634: mov    0x30(%rsp),%r9
  0x00007f8ab9129639: mov    0x38(%rsp),%r8
  0x00007f8ab912963e: mov    0x40(%rsp),%rdi
  0x00007f8ab9129643: mov    0x48(%rsp),%rsi
  0x00007f8ab9129648: mov    0x50(%rsp),%rbp
  0x00007f8ab912964d: mov    0x60(%rsp),%rbx
  0x00007f8ab9129652: mov    0x68(%rsp),%rdx
  0x00007f8ab9129657: mov    0x70(%rsp),%rcx
  0x00007f8ab912965c: mov    0x78(%rsp),%rax
  0x00007f8ab9129661: add    $0x80,%rsp
  0x00007f8ab9129668: add    $0x8,%rsp
  0x00007f8ab912966c: popfq  
  0x00007f8ab912966d: mov    %r13,%rsp
  0x00007f8ab9129670: pop    %rax
  0x00007f8ab9129671: mov    %rsp,%r13
  0x00007f8ab9129674: sub    $0x30,%rsp
  0x00007f8ab9129678: mov    %rax,(%rsp)
  0x00007f8ab912967c: mov    %rsi,0x28(%rsp)
  0x00007f8ab9129681: mov    %rdx,0x20(%rsp)
  0x00007f8ab9129686: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9129690: mov    %rax,0x18(%rsp)
  0x00007f8ab9129695: mov    %rcx,0x10(%rsp)
  0x00007f8ab912969a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912969f: mov    0x40(%rbx),%rcx
  0x00007f8ab91296a3: jmpq   *%rcx

AHE@0x00007f8ac80d7540: 0xbbaa0000 i2c: 0x00007f8ab9129760 c2i: 0x00007f8ab912987f c2iUV: 0x00007f8ab9129852
i2c argument handler #0 for: receiver (Ljava/lang/Object;II)V (564 bytes generated)
c2i argument handler starts at 0x7f8ab912987f
  0x00007f8ab9129760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9129764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912976e: cmp    %r11,%rax
  0x00007f8ab9129771: jbe    0x00007f8ab912978a
  0x00007f8ab9129777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9129781: cmp    %r11,%rax
  0x00007f8ab9129784: jb     0x00007f8ab9129827
  0x00007f8ab912978a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9129794: cmp    %r11,%rax
  0x00007f8ab9129797: jbe    0x00007f8ab91297b0
  0x00007f8ab912979d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91297a7: cmp    %r11,%rax
  0x00007f8ab91297aa: jb     0x00007f8ab9129827
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91297b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91297b5: sub    $0x80,%rsp
  0x00007f8ab91297bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91297c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91297c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91297cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91297d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91297d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91297da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91297df: mov    %r8,0x38(%rsp)
  0x00007f8ab91297e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91297e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91297ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91297f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91297f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91297fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9129802: mov    %r15,(%rsp)
  0x00007f8ab9129806: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9129810: movabs $0x7f8ab91297b0,%rsi
  0x00007f8ab912981a: mov    %rsp,%rdx
  0x00007f8ab912981d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129821: callq  0x00007f8aceddb9fa
  0x00007f8ab9129826: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9129827: mov    %rsp,%r11
  0x00007f8ab912982a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912982e: push   %rax
  0x00007f8ab912982f: mov    %r11,%rax
  0x00007f8ab9129832: mov    0x50(%rbx),%r11
  0x00007f8ab9129836: mov    0x20(%rax),%rsi
  0x00007f8ab912983a: mov    0x18(%rax),%rdx
  0x00007f8ab912983e: mov    0x10(%rax),%ecx
  0x00007f8ab9129841: mov    0x8(%rax),%r8d
  0x00007f8ab9129845: mov    %rbx,0x258(%r15)
  0x00007f8ab912984c: mov    %rbx,%rax
  0x00007f8ab912984f: jmpq   *%r11
  0x00007f8ab9129852: mov    0x8(%rsi),%ebx
  0x00007f8ab9129855: shl    $0x3,%rbx
  0x00007f8ab9129859: cmp    0x10(%rax),%rbx
  0x00007f8ab912985d: mov    0x8(%rax),%rbx
  0x00007f8ab9129861: je     0x00007f8ab912986c
  0x00007f8ab9129867: jmpq   0x00007f8ab9105c40
  0x00007f8ab912986c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129874: je     0x00007f8ab912996f
  0x00007f8ab912987a: jmpq   0x00007f8ab9105c40
  0x00007f8ab912987f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129887: je     0x00007f8ab912996f
  0x00007f8ab912988d: mov    %rsp,%r13
  0x00007f8ab9129890: mov    (%rsp),%rax
  0x00007f8ab9129894: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129898: pushfq 
  0x00007f8ab9129899: sub    $0x8,%rsp
  0x00007f8ab912989d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91298a2: sub    $0x80,%rsp
  0x00007f8ab91298a9: mov    %rax,0x78(%rsp)
  0x00007f8ab91298ae: mov    %rcx,0x70(%rsp)
  0x00007f8ab91298b3: mov    %rdx,0x68(%rsp)
  0x00007f8ab91298b8: mov    %rbx,0x60(%rsp)
  0x00007f8ab91298bd: mov    %rbp,0x50(%rsp)
  0x00007f8ab91298c2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91298c7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91298cc: mov    %r8,0x38(%rsp)
  0x00007f8ab91298d1: mov    %r9,0x30(%rsp)
  0x00007f8ab91298d6: mov    %r10,0x28(%rsp)
  0x00007f8ab91298db: mov    %r11,0x20(%rsp)
  0x00007f8ab91298e0: mov    %r12,0x18(%rsp)
  0x00007f8ab91298e5: mov    %r13,0x10(%rsp)
  0x00007f8ab91298ea: mov    %r14,0x8(%rsp)
  0x00007f8ab91298ef: mov    %r15,(%rsp)
  0x00007f8ab91298f3: sub    $0x200,%rsp
  0x00007f8ab91298fa: fxsave64 (%rsp)
  0x00007f8ab91298ff: mov    %rbx,%rdi
  0x00007f8ab9129902: mov    %rax,%rsi
  0x00007f8ab9129905: callq  0x00007f8acef8bbca
  0x00007f8ab912990a: fxrstor64 (%rsp)
  0x00007f8ab912990f: add    $0x200,%rsp
  0x00007f8ab9129916: mov    (%rsp),%r15
  0x00007f8ab912991a: mov    0x8(%rsp),%r14
  0x00007f8ab912991f: mov    0x10(%rsp),%r13
  0x00007f8ab9129924: mov    0x18(%rsp),%r12
  0x00007f8ab9129929: mov    0x20(%rsp),%r11
  0x00007f8ab912992e: mov    0x28(%rsp),%r10
  0x00007f8ab9129933: mov    0x30(%rsp),%r9
  0x00007f8ab9129938: mov    0x38(%rsp),%r8
  0x00007f8ab912993d: mov    0x40(%rsp),%rdi
  0x00007f8ab9129942: mov    0x48(%rsp),%rsi
  0x00007f8ab9129947: mov    0x50(%rsp),%rbp
  0x00007f8ab912994c: mov    0x60(%rsp),%rbx
  0x00007f8ab9129951: mov    0x68(%rsp),%rdx
  0x00007f8ab9129956: mov    0x70(%rsp),%rcx
  0x00007f8ab912995b: mov    0x78(%rsp),%rax
  0x00007f8ab9129960: add    $0x80,%rsp
  0x00007f8ab9129967: add    $0x8,%rsp
  0x00007f8ab912996b: popfq  
  0x00007f8ab912996c: mov    %r13,%rsp
  0x00007f8ab912996f: pop    %rax
  0x00007f8ab9129970: mov    %rsp,%r13
  0x00007f8ab9129973: sub    $0x30,%rsp
  0x00007f8ab9129977: mov    %rax,(%rsp)
  0x00007f8ab912997b: mov    %rsi,0x20(%rsp)
  0x00007f8ab9129980: mov    %rdx,0x18(%rsp)
  0x00007f8ab9129985: mov    %ecx,0x10(%rsp)
  0x00007f8ab9129989: mov    %r8d,0x8(%rsp)
  0x00007f8ab912998e: mov    0x40(%rbx),%rcx
  0x00007f8ab9129992: jmpq   *%rcx

AHE@0x00007f8ac80d7588: 0xbbea0000 i2c: 0x00007f8ab9129a60 c2i: 0x00007f8ab9129b7b c2iUV: 0x00007f8ab9129b4e
i2c argument handler #0 for: receiver (JI)V (570 bytes generated)
c2i argument handler starts at 0x7f8ab9129b7b
  0x00007f8ab9129a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9129a64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9129a6e: cmp    %r11,%rax
  0x00007f8ab9129a71: jbe    0x00007f8ab9129a8a
  0x00007f8ab9129a77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9129a81: cmp    %r11,%rax
  0x00007f8ab9129a84: jb     0x00007f8ab9129b27
  0x00007f8ab9129a8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9129a94: cmp    %r11,%rax
  0x00007f8ab9129a97: jbe    0x00007f8ab9129ab0
  0x00007f8ab9129a9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9129aa7: cmp    %r11,%rax
  0x00007f8ab9129aaa: jb     0x00007f8ab9129b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9129ab0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9129ab5: sub    $0x80,%rsp
  0x00007f8ab9129abc: mov    %rax,0x78(%rsp)
  0x00007f8ab9129ac1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9129ac6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9129acb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9129ad0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9129ad5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9129ada: mov    %rdi,0x40(%rsp)
  0x00007f8ab9129adf: mov    %r8,0x38(%rsp)
  0x00007f8ab9129ae4: mov    %r9,0x30(%rsp)
  0x00007f8ab9129ae9: mov    %r10,0x28(%rsp)
  0x00007f8ab9129aee: mov    %r11,0x20(%rsp)
  0x00007f8ab9129af3: mov    %r12,0x18(%rsp)
  0x00007f8ab9129af8: mov    %r13,0x10(%rsp)
  0x00007f8ab9129afd: mov    %r14,0x8(%rsp)
  0x00007f8ab9129b02: mov    %r15,(%rsp)
  0x00007f8ab9129b06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9129b10: movabs $0x7f8ab9129ab0,%rsi
  0x00007f8ab9129b1a: mov    %rsp,%rdx
  0x00007f8ab9129b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129b21: callq  0x00007f8aceddb9fa
  0x00007f8ab9129b26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9129b27: mov    %rsp,%r11
  0x00007f8ab9129b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129b2e: push   %rax
  0x00007f8ab9129b2f: mov    %r11,%rax
  0x00007f8ab9129b32: mov    0x50(%rbx),%r11
  0x00007f8ab9129b36: mov    0x20(%rax),%rsi
  0x00007f8ab9129b3a: mov    0x10(%rax),%rdx
  0x00007f8ab9129b3e: mov    0x8(%rax),%ecx
  0x00007f8ab9129b41: mov    %rbx,0x258(%r15)
  0x00007f8ab9129b48: mov    %rbx,%rax
  0x00007f8ab9129b4b: jmpq   *%r11
  0x00007f8ab9129b4e: mov    0x8(%rsi),%ebx
  0x00007f8ab9129b51: shl    $0x3,%rbx
  0x00007f8ab9129b55: cmp    0x10(%rax),%rbx
  0x00007f8ab9129b59: mov    0x8(%rax),%rbx
  0x00007f8ab9129b5d: je     0x00007f8ab9129b68
  0x00007f8ab9129b63: jmpq   0x00007f8ab9105c40
  0x00007f8ab9129b68: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129b70: je     0x00007f8ab9129c6b
  0x00007f8ab9129b76: jmpq   0x00007f8ab9105c40
  0x00007f8ab9129b7b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129b83: je     0x00007f8ab9129c6b
  0x00007f8ab9129b89: mov    %rsp,%r13
  0x00007f8ab9129b8c: mov    (%rsp),%rax
  0x00007f8ab9129b90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129b94: pushfq 
  0x00007f8ab9129b95: sub    $0x8,%rsp
  0x00007f8ab9129b99: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9129b9e: sub    $0x80,%rsp
  0x00007f8ab9129ba5: mov    %rax,0x78(%rsp)
  0x00007f8ab9129baa: mov    %rcx,0x70(%rsp)
  0x00007f8ab9129baf: mov    %rdx,0x68(%rsp)
  0x00007f8ab9129bb4: mov    %rbx,0x60(%rsp)
  0x00007f8ab9129bb9: mov    %rbp,0x50(%rsp)
  0x00007f8ab9129bbe: mov    %rsi,0x48(%rsp)
  0x00007f8ab9129bc3: mov    %rdi,0x40(%rsp)
  0x00007f8ab9129bc8: mov    %r8,0x38(%rsp)
  0x00007f8ab9129bcd: mov    %r9,0x30(%rsp)
  0x00007f8ab9129bd2: mov    %r10,0x28(%rsp)
  0x00007f8ab9129bd7: mov    %r11,0x20(%rsp)
  0x00007f8ab9129bdc: mov    %r12,0x18(%rsp)
  0x00007f8ab9129be1: mov    %r13,0x10(%rsp)
  0x00007f8ab9129be6: mov    %r14,0x8(%rsp)
  0x00007f8ab9129beb: mov    %r15,(%rsp)
  0x00007f8ab9129bef: sub    $0x200,%rsp
  0x00007f8ab9129bf6: fxsave64 (%rsp)
  0x00007f8ab9129bfb: mov    %rbx,%rdi
  0x00007f8ab9129bfe: mov    %rax,%rsi
  0x00007f8ab9129c01: callq  0x00007f8acef8bbca
  0x00007f8ab9129c06: fxrstor64 (%rsp)
  0x00007f8ab9129c0b: add    $0x200,%rsp
  0x00007f8ab9129c12: mov    (%rsp),%r15
  0x00007f8ab9129c16: mov    0x8(%rsp),%r14
  0x00007f8ab9129c1b: mov    0x10(%rsp),%r13
  0x00007f8ab9129c20: mov    0x18(%rsp),%r12
  0x00007f8ab9129c25: mov    0x20(%rsp),%r11
  0x00007f8ab9129c2a: mov    0x28(%rsp),%r10
  0x00007f8ab9129c2f: mov    0x30(%rsp),%r9
  0x00007f8ab9129c34: mov    0x38(%rsp),%r8
  0x00007f8ab9129c39: mov    0x40(%rsp),%rdi
  0x00007f8ab9129c3e: mov    0x48(%rsp),%rsi
  0x00007f8ab9129c43: mov    0x50(%rsp),%rbp
  0x00007f8ab9129c48: mov    0x60(%rsp),%rbx
  0x00007f8ab9129c4d: mov    0x68(%rsp),%rdx
  0x00007f8ab9129c52: mov    0x70(%rsp),%rcx
  0x00007f8ab9129c57: mov    0x78(%rsp),%rax
  0x00007f8ab9129c5c: add    $0x80,%rsp
  0x00007f8ab9129c63: add    $0x8,%rsp
  0x00007f8ab9129c67: popfq  
  0x00007f8ab9129c68: mov    %r13,%rsp
  0x00007f8ab9129c6b: pop    %rax
  0x00007f8ab9129c6c: mov    %rsp,%r13
  0x00007f8ab9129c6f: sub    $0x30,%rsp
  0x00007f8ab9129c73: mov    %rax,(%rsp)
  0x00007f8ab9129c77: mov    %rsi,0x20(%rsp)
  0x00007f8ab9129c7c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9129c86: mov    %rax,0x18(%rsp)
  0x00007f8ab9129c8b: mov    %rdx,0x10(%rsp)
  0x00007f8ab9129c90: mov    %ecx,0x8(%rsp)
  0x00007f8ab9129c94: mov    0x40(%rbx),%rcx
  0x00007f8ab9129c98: jmpq   *%rcx

AHE@0x00007f8ac80d75d0: 0xbbe00000 i2c: 0x00007f8ab9129d60 c2i: 0x00007f8ab9129e78 c2iUV: 0x00007f8ab9129e4b
i2c argument handler #0 for: receiver (J)I (563 bytes generated)
c2i argument handler starts at 0x7f8ab9129e78
  0x00007f8ab9129d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9129d64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9129d6e: cmp    %r11,%rax
  0x00007f8ab9129d71: jbe    0x00007f8ab9129d8a
  0x00007f8ab9129d77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9129d81: cmp    %r11,%rax
  0x00007f8ab9129d84: jb     0x00007f8ab9129e27
  0x00007f8ab9129d8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9129d94: cmp    %r11,%rax
  0x00007f8ab9129d97: jbe    0x00007f8ab9129db0
  0x00007f8ab9129d9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9129da7: cmp    %r11,%rax
  0x00007f8ab9129daa: jb     0x00007f8ab9129e27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9129db0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9129db5: sub    $0x80,%rsp
  0x00007f8ab9129dbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9129dc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9129dc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9129dcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9129dd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9129dd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9129dda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9129ddf: mov    %r8,0x38(%rsp)
  0x00007f8ab9129de4: mov    %r9,0x30(%rsp)
  0x00007f8ab9129de9: mov    %r10,0x28(%rsp)
  0x00007f8ab9129dee: mov    %r11,0x20(%rsp)
  0x00007f8ab9129df3: mov    %r12,0x18(%rsp)
  0x00007f8ab9129df8: mov    %r13,0x10(%rsp)
  0x00007f8ab9129dfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9129e02: mov    %r15,(%rsp)
  0x00007f8ab9129e06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9129e10: movabs $0x7f8ab9129db0,%rsi
  0x00007f8ab9129e1a: mov    %rsp,%rdx
  0x00007f8ab9129e1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129e21: callq  0x00007f8aceddb9fa
  0x00007f8ab9129e26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9129e27: mov    %rsp,%r11
  0x00007f8ab9129e2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129e2e: push   %rax
  0x00007f8ab9129e2f: mov    %r11,%rax
  0x00007f8ab9129e32: mov    0x50(%rbx),%r11
  0x00007f8ab9129e36: mov    0x18(%rax),%rsi
  0x00007f8ab9129e3a: mov    0x8(%rax),%rdx
  0x00007f8ab9129e3e: mov    %rbx,0x258(%r15)
  0x00007f8ab9129e45: mov    %rbx,%rax
  0x00007f8ab9129e48: jmpq   *%r11
  0x00007f8ab9129e4b: mov    0x8(%rsi),%ebx
  0x00007f8ab9129e4e: shl    $0x3,%rbx
  0x00007f8ab9129e52: cmp    0x10(%rax),%rbx
  0x00007f8ab9129e56: mov    0x8(%rax),%rbx
  0x00007f8ab9129e5a: je     0x00007f8ab9129e65
  0x00007f8ab9129e60: jmpq   0x00007f8ab9105c40
  0x00007f8ab9129e65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129e6d: je     0x00007f8ab9129f68
  0x00007f8ab9129e73: jmpq   0x00007f8ab9105c40
  0x00007f8ab9129e78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9129e80: je     0x00007f8ab9129f68
  0x00007f8ab9129e86: mov    %rsp,%r13
  0x00007f8ab9129e89: mov    (%rsp),%rax
  0x00007f8ab9129e8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9129e91: pushfq 
  0x00007f8ab9129e92: sub    $0x8,%rsp
  0x00007f8ab9129e96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9129e9b: sub    $0x80,%rsp
  0x00007f8ab9129ea2: mov    %rax,0x78(%rsp)
  0x00007f8ab9129ea7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9129eac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9129eb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9129eb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9129ebb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9129ec0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9129ec5: mov    %r8,0x38(%rsp)
  0x00007f8ab9129eca: mov    %r9,0x30(%rsp)
  0x00007f8ab9129ecf: mov    %r10,0x28(%rsp)
  0x00007f8ab9129ed4: mov    %r11,0x20(%rsp)
  0x00007f8ab9129ed9: mov    %r12,0x18(%rsp)
  0x00007f8ab9129ede: mov    %r13,0x10(%rsp)
  0x00007f8ab9129ee3: mov    %r14,0x8(%rsp)
  0x00007f8ab9129ee8: mov    %r15,(%rsp)
  0x00007f8ab9129eec: sub    $0x200,%rsp
  0x00007f8ab9129ef3: fxsave64 (%rsp)
  0x00007f8ab9129ef8: mov    %rbx,%rdi
  0x00007f8ab9129efb: mov    %rax,%rsi
  0x00007f8ab9129efe: callq  0x00007f8acef8bbca
  0x00007f8ab9129f03: fxrstor64 (%rsp)
  0x00007f8ab9129f08: add    $0x200,%rsp
  0x00007f8ab9129f0f: mov    (%rsp),%r15
  0x00007f8ab9129f13: mov    0x8(%rsp),%r14
  0x00007f8ab9129f18: mov    0x10(%rsp),%r13
  0x00007f8ab9129f1d: mov    0x18(%rsp),%r12
  0x00007f8ab9129f22: mov    0x20(%rsp),%r11
  0x00007f8ab9129f27: mov    0x28(%rsp),%r10
  0x00007f8ab9129f2c: mov    0x30(%rsp),%r9
  0x00007f8ab9129f31: mov    0x38(%rsp),%r8
  0x00007f8ab9129f36: mov    0x40(%rsp),%rdi
  0x00007f8ab9129f3b: mov    0x48(%rsp),%rsi
  0x00007f8ab9129f40: mov    0x50(%rsp),%rbp
  0x00007f8ab9129f45: mov    0x60(%rsp),%rbx
  0x00007f8ab9129f4a: mov    0x68(%rsp),%rdx
  0x00007f8ab9129f4f: mov    0x70(%rsp),%rcx
  0x00007f8ab9129f54: mov    0x78(%rsp),%rax
  0x00007f8ab9129f59: add    $0x80,%rsp
  0x00007f8ab9129f60: add    $0x8,%rsp
  0x00007f8ab9129f64: popfq  
  0x00007f8ab9129f65: mov    %r13,%rsp
  0x00007f8ab9129f68: pop    %rax
  0x00007f8ab9129f69: mov    %rsp,%r13
  0x00007f8ab9129f6c: sub    $0x20,%rsp
  0x00007f8ab9129f70: mov    %rax,(%rsp)
  0x00007f8ab9129f74: mov    %rsi,0x18(%rsp)
  0x00007f8ab9129f79: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9129f83: mov    %rax,0x10(%rsp)
  0x00007f8ab9129f88: mov    %rdx,0x8(%rsp)
  0x00007f8ab9129f8d: mov    0x40(%rbx),%rcx
  0x00007f8ab9129f91: jmpq   *%rcx

AHE@0x00007f8ac80d7618: 0xbba00000 i2c: 0x00007f8ab912a060 c2i: 0x00007f8ab912a17b c2iUV: 0x00007f8ab912a14e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)I (555 bytes generated)
c2i argument handler starts at 0x7f8ab912a17b
  0x00007f8ab912a060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912a064: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912a06e: cmp    %r11,%rax
  0x00007f8ab912a071: jbe    0x00007f8ab912a08a
  0x00007f8ab912a077: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912a081: cmp    %r11,%rax
  0x00007f8ab912a084: jb     0x00007f8ab912a127
  0x00007f8ab912a08a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912a094: cmp    %r11,%rax
  0x00007f8ab912a097: jbe    0x00007f8ab912a0b0
  0x00007f8ab912a09d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912a0a7: cmp    %r11,%rax
  0x00007f8ab912a0aa: jb     0x00007f8ab912a127
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912a0b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912a0b5: sub    $0x80,%rsp
  0x00007f8ab912a0bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912a0c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912a0c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912a0cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912a0d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912a0d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912a0da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912a0df: mov    %r8,0x38(%rsp)
  0x00007f8ab912a0e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912a0e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912a0ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912a0f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912a0f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912a0fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912a102: mov    %r15,(%rsp)
  0x00007f8ab912a106: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912a110: movabs $0x7f8ab912a0b0,%rsi
  0x00007f8ab912a11a: mov    %rsp,%rdx
  0x00007f8ab912a11d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a121: callq  0x00007f8aceddb9fa
  0x00007f8ab912a126: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912a127: mov    %rsp,%r11
  0x00007f8ab912a12a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a12e: push   %rax
  0x00007f8ab912a12f: mov    %r11,%rax
  0x00007f8ab912a132: mov    0x50(%rbx),%r11
  0x00007f8ab912a136: mov    0x18(%rax),%rsi
  0x00007f8ab912a13a: mov    0x10(%rax),%rdx
  0x00007f8ab912a13e: mov    0x8(%rax),%ecx
  0x00007f8ab912a141: mov    %rbx,0x258(%r15)
  0x00007f8ab912a148: mov    %rbx,%rax
  0x00007f8ab912a14b: jmpq   *%r11
  0x00007f8ab912a14e: mov    0x8(%rsi),%ebx
  0x00007f8ab912a151: shl    $0x3,%rbx
  0x00007f8ab912a155: cmp    0x10(%rax),%rbx
  0x00007f8ab912a159: mov    0x8(%rax),%rbx
  0x00007f8ab912a15d: je     0x00007f8ab912a168
  0x00007f8ab912a163: jmpq   0x00007f8ab9105c40
  0x00007f8ab912a168: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912a170: je     0x00007f8ab912a26b
  0x00007f8ab912a176: jmpq   0x00007f8ab9105c40
  0x00007f8ab912a17b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912a183: je     0x00007f8ab912a26b
  0x00007f8ab912a189: mov    %rsp,%r13
  0x00007f8ab912a18c: mov    (%rsp),%rax
  0x00007f8ab912a190: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a194: pushfq 
  0x00007f8ab912a195: sub    $0x8,%rsp
  0x00007f8ab912a199: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912a19e: sub    $0x80,%rsp
  0x00007f8ab912a1a5: mov    %rax,0x78(%rsp)
  0x00007f8ab912a1aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912a1af: mov    %rdx,0x68(%rsp)
  0x00007f8ab912a1b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912a1b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912a1be: mov    %rsi,0x48(%rsp)
  0x00007f8ab912a1c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912a1c8: mov    %r8,0x38(%rsp)
  0x00007f8ab912a1cd: mov    %r9,0x30(%rsp)
  0x00007f8ab912a1d2: mov    %r10,0x28(%rsp)
  0x00007f8ab912a1d7: mov    %r11,0x20(%rsp)
  0x00007f8ab912a1dc: mov    %r12,0x18(%rsp)
  0x00007f8ab912a1e1: mov    %r13,0x10(%rsp)
  0x00007f8ab912a1e6: mov    %r14,0x8(%rsp)
  0x00007f8ab912a1eb: mov    %r15,(%rsp)
  0x00007f8ab912a1ef: sub    $0x200,%rsp
  0x00007f8ab912a1f6: fxsave64 (%rsp)
  0x00007f8ab912a1fb: mov    %rbx,%rdi
  0x00007f8ab912a1fe: mov    %rax,%rsi
  0x00007f8ab912a201: callq  0x00007f8acef8bbca
  0x00007f8ab912a206: fxrstor64 (%rsp)
  0x00007f8ab912a20b: add    $0x200,%rsp
  0x00007f8ab912a212: mov    (%rsp),%r15
  0x00007f8ab912a216: mov    0x8(%rsp),%r14
  0x00007f8ab912a21b: mov    0x10(%rsp),%r13
  0x00007f8ab912a220: mov    0x18(%rsp),%r12
  0x00007f8ab912a225: mov    0x20(%rsp),%r11
  0x00007f8ab912a22a: mov    0x28(%rsp),%r10
  0x00007f8ab912a22f: mov    0x30(%rsp),%r9
  0x00007f8ab912a234: mov    0x38(%rsp),%r8
  0x00007f8ab912a239: mov    0x40(%rsp),%rdi
  0x00007f8ab912a23e: mov    0x48(%rsp),%rsi
  0x00007f8ab912a243: mov    0x50(%rsp),%rbp
  0x00007f8ab912a248: mov    0x60(%rsp),%rbx
  0x00007f8ab912a24d: mov    0x68(%rsp),%rdx
  0x00007f8ab912a252: mov    0x70(%rsp),%rcx
  0x00007f8ab912a257: mov    0x78(%rsp),%rax
  0x00007f8ab912a25c: add    $0x80,%rsp
  0x00007f8ab912a263: add    $0x8,%rsp
  0x00007f8ab912a267: popfq  
  0x00007f8ab912a268: mov    %r13,%rsp
  0x00007f8ab912a26b: pop    %rax
  0x00007f8ab912a26c: mov    %rsp,%r13
  0x00007f8ab912a26f: sub    $0x20,%rsp
  0x00007f8ab912a273: mov    %rax,(%rsp)
  0x00007f8ab912a277: mov    %rsi,0x18(%rsp)
  0x00007f8ab912a27c: mov    %rdx,0x10(%rsp)
  0x00007f8ab912a281: mov    %ecx,0x8(%rsp)
  0x00007f8ab912a285: mov    0x40(%rbx),%rcx
  0x00007f8ab912a289: jmpq   *%rcx

AHE@0x00007f8ac80d7660: 0xbbbe0000 i2c: 0x00007f8ab912a360 c2i: 0x00007f8ab912a47c c2iUV: 0x00007f8ab912a44f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)I (572 bytes generated)
c2i argument handler starts at 0x7f8ab912a47c
  0x00007f8ab912a360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912a364: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912a36e: cmp    %r11,%rax
  0x00007f8ab912a371: jbe    0x00007f8ab912a38a
  0x00007f8ab912a377: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912a381: cmp    %r11,%rax
  0x00007f8ab912a384: jb     0x00007f8ab912a427
  0x00007f8ab912a38a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912a394: cmp    %r11,%rax
  0x00007f8ab912a397: jbe    0x00007f8ab912a3b0
  0x00007f8ab912a39d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912a3a7: cmp    %r11,%rax
  0x00007f8ab912a3aa: jb     0x00007f8ab912a427
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912a3b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912a3b5: sub    $0x80,%rsp
  0x00007f8ab912a3bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912a3c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912a3c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912a3cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912a3d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912a3d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912a3da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912a3df: mov    %r8,0x38(%rsp)
  0x00007f8ab912a3e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912a3e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912a3ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912a3f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912a3f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912a3fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912a402: mov    %r15,(%rsp)
  0x00007f8ab912a406: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912a410: movabs $0x7f8ab912a3b0,%rsi
  0x00007f8ab912a41a: mov    %rsp,%rdx
  0x00007f8ab912a41d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a421: callq  0x00007f8aceddb9fa
  0x00007f8ab912a426: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912a427: mov    %rsp,%r11
  0x00007f8ab912a42a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a42e: push   %rax
  0x00007f8ab912a42f: mov    %r11,%rax
  0x00007f8ab912a432: mov    0x50(%rbx),%r11
  0x00007f8ab912a436: mov    0x20(%rax),%rsi
  0x00007f8ab912a43a: mov    0x18(%rax),%rdx
  0x00007f8ab912a43e: mov    0x8(%rax),%rcx
  0x00007f8ab912a442: mov    %rbx,0x258(%r15)
  0x00007f8ab912a449: mov    %rbx,%rax
  0x00007f8ab912a44c: jmpq   *%r11
  0x00007f8ab912a44f: mov    0x8(%rsi),%ebx
  0x00007f8ab912a452: shl    $0x3,%rbx
  0x00007f8ab912a456: cmp    0x10(%rax),%rbx
  0x00007f8ab912a45a: mov    0x8(%rax),%rbx
  0x00007f8ab912a45e: je     0x00007f8ab912a469
  0x00007f8ab912a464: jmpq   0x00007f8ab9105c40
  0x00007f8ab912a469: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912a471: je     0x00007f8ab912a56c
  0x00007f8ab912a477: jmpq   0x00007f8ab9105c40
  0x00007f8ab912a47c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912a484: je     0x00007f8ab912a56c
  0x00007f8ab912a48a: mov    %rsp,%r13
  0x00007f8ab912a48d: mov    (%rsp),%rax
  0x00007f8ab912a491: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a495: pushfq 
  0x00007f8ab912a496: sub    $0x8,%rsp
  0x00007f8ab912a49a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912a49f: sub    $0x80,%rsp
  0x00007f8ab912a4a6: mov    %rax,0x78(%rsp)
  0x00007f8ab912a4ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab912a4b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab912a4b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab912a4ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab912a4bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab912a4c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab912a4c9: mov    %r8,0x38(%rsp)
  0x00007f8ab912a4ce: mov    %r9,0x30(%rsp)
  0x00007f8ab912a4d3: mov    %r10,0x28(%rsp)
  0x00007f8ab912a4d8: mov    %r11,0x20(%rsp)
  0x00007f8ab912a4dd: mov    %r12,0x18(%rsp)
  0x00007f8ab912a4e2: mov    %r13,0x10(%rsp)
  0x00007f8ab912a4e7: mov    %r14,0x8(%rsp)
  0x00007f8ab912a4ec: mov    %r15,(%rsp)
  0x00007f8ab912a4f0: sub    $0x200,%rsp
  0x00007f8ab912a4f7: fxsave64 (%rsp)
  0x00007f8ab912a4fc: mov    %rbx,%rdi
  0x00007f8ab912a4ff: mov    %rax,%rsi
  0x00007f8ab912a502: callq  0x00007f8acef8bbca
  0x00007f8ab912a507: fxrstor64 (%rsp)
  0x00007f8ab912a50c: add    $0x200,%rsp
  0x00007f8ab912a513: mov    (%rsp),%r15
  0x00007f8ab912a517: mov    0x8(%rsp),%r14
  0x00007f8ab912a51c: mov    0x10(%rsp),%r13
  0x00007f8ab912a521: mov    0x18(%rsp),%r12
  0x00007f8ab912a526: mov    0x20(%rsp),%r11
  0x00007f8ab912a52b: mov    0x28(%rsp),%r10
  0x00007f8ab912a530: mov    0x30(%rsp),%r9
  0x00007f8ab912a535: mov    0x38(%rsp),%r8
  0x00007f8ab912a53a: mov    0x40(%rsp),%rdi
  0x00007f8ab912a53f: mov    0x48(%rsp),%rsi
  0x00007f8ab912a544: mov    0x50(%rsp),%rbp
  0x00007f8ab912a549: mov    0x60(%rsp),%rbx
  0x00007f8ab912a54e: mov    0x68(%rsp),%rdx
  0x00007f8ab912a553: mov    0x70(%rsp),%rcx
  0x00007f8ab912a558: mov    0x78(%rsp),%rax
  0x00007f8ab912a55d: add    $0x80,%rsp
  0x00007f8ab912a564: add    $0x8,%rsp
  0x00007f8ab912a568: popfq  
  0x00007f8ab912a569: mov    %r13,%rsp
  0x00007f8ab912a56c: pop    %rax
  0x00007f8ab912a56d: mov    %rsp,%r13
  0x00007f8ab912a570: sub    $0x30,%rsp
  0x00007f8ab912a574: mov    %rax,(%rsp)
  0x00007f8ab912a578: mov    %rsi,0x20(%rsp)
  0x00007f8ab912a57d: mov    %rdx,0x18(%rsp)
  0x00007f8ab912a582: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912a58c: mov    %rax,0x10(%rsp)
  0x00007f8ab912a591: mov    %rcx,0x8(%rsp)
  0x00007f8ab912a596: mov    0x40(%rbx),%rcx
  0x00007f8ab912a59a: jmpq   *%rcx

AHE@0x00007f8ac80d76a8: 0xbbaa0000 i2c: 0x00007f8ab912a660 c2i: 0x00007f8ab912a77f c2iUV: 0x00007f8ab912a752
i2c argument handler #0 for: receiver (Ljava/lang/Object;IC)V (564 bytes generated)
c2i argument handler starts at 0x7f8ab912a77f
  0x00007f8ab912a660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912a664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912a66e: cmp    %r11,%rax
  0x00007f8ab912a671: jbe    0x00007f8ab912a68a
  0x00007f8ab912a677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912a681: cmp    %r11,%rax
  0x00007f8ab912a684: jb     0x00007f8ab912a727
  0x00007f8ab912a68a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912a694: cmp    %r11,%rax
  0x00007f8ab912a697: jbe    0x00007f8ab912a6b0
  0x00007f8ab912a69d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912a6a7: cmp    %r11,%rax
  0x00007f8ab912a6aa: jb     0x00007f8ab912a727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912a6b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912a6b5: sub    $0x80,%rsp
  0x00007f8ab912a6bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912a6c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912a6c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912a6cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912a6d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912a6d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912a6da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912a6df: mov    %r8,0x38(%rsp)
  0x00007f8ab912a6e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912a6e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912a6ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912a6f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912a6f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912a6fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912a702: mov    %r15,(%rsp)
  0x00007f8ab912a706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912a710: movabs $0x7f8ab912a6b0,%rsi
  0x00007f8ab912a71a: mov    %rsp,%rdx
  0x00007f8ab912a71d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a721: callq  0x00007f8aceddb9fa
  0x00007f8ab912a726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912a727: mov    %rsp,%r11
  0x00007f8ab912a72a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a72e: push   %rax
  0x00007f8ab912a72f: mov    %r11,%rax
  0x00007f8ab912a732: mov    0x50(%rbx),%r11
  0x00007f8ab912a736: mov    0x20(%rax),%rsi
  0x00007f8ab912a73a: mov    0x18(%rax),%rdx
  0x00007f8ab912a73e: mov    0x10(%rax),%ecx
  0x00007f8ab912a741: mov    0x8(%rax),%r8d
  0x00007f8ab912a745: mov    %rbx,0x258(%r15)
  0x00007f8ab912a74c: mov    %rbx,%rax
  0x00007f8ab912a74f: jmpq   *%r11
  0x00007f8ab912a752: mov    0x8(%rsi),%ebx
  0x00007f8ab912a755: shl    $0x3,%rbx
  0x00007f8ab912a759: cmp    0x10(%rax),%rbx
  0x00007f8ab912a75d: mov    0x8(%rax),%rbx
  0x00007f8ab912a761: je     0x00007f8ab912a76c
  0x00007f8ab912a767: jmpq   0x00007f8ab9105c40
  0x00007f8ab912a76c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912a774: je     0x00007f8ab912a86f
  0x00007f8ab912a77a: jmpq   0x00007f8ab9105c40
  0x00007f8ab912a77f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912a787: je     0x00007f8ab912a86f
  0x00007f8ab912a78d: mov    %rsp,%r13
  0x00007f8ab912a790: mov    (%rsp),%rax
  0x00007f8ab912a794: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912a798: pushfq 
  0x00007f8ab912a799: sub    $0x8,%rsp
  0x00007f8ab912a79d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912a7a2: sub    $0x80,%rsp
  0x00007f8ab912a7a9: mov    %rax,0x78(%rsp)
  0x00007f8ab912a7ae: mov    %rcx,0x70(%rsp)
  0x00007f8ab912a7b3: mov    %rdx,0x68(%rsp)
  0x00007f8ab912a7b8: mov    %rbx,0x60(%rsp)
  0x00007f8ab912a7bd: mov    %rbp,0x50(%rsp)
  0x00007f8ab912a7c2: mov    %rsi,0x48(%rsp)
  0x00007f8ab912a7c7: mov    %rdi,0x40(%rsp)
  0x00007f8ab912a7cc: mov    %r8,0x38(%rsp)
  0x00007f8ab912a7d1: mov    %r9,0x30(%rsp)
  0x00007f8ab912a7d6: mov    %r10,0x28(%rsp)
  0x00007f8ab912a7db: mov    %r11,0x20(%rsp)
  0x00007f8ab912a7e0: mov    %r12,0x18(%rsp)
  0x00007f8ab912a7e5: mov    %r13,0x10(%rsp)
  0x00007f8ab912a7ea: mov    %r14,0x8(%rsp)
  0x00007f8ab912a7ef: mov    %r15,(%rsp)
  0x00007f8ab912a7f3: sub    $0x200,%rsp
  0x00007f8ab912a7fa: fxsave64 (%rsp)
  0x00007f8ab912a7ff: mov    %rbx,%rdi
  0x00007f8ab912a802: mov    %rax,%rsi
  0x00007f8ab912a805: callq  0x00007f8acef8bbca
  0x00007f8ab912a80a: fxrstor64 (%rsp)
  0x00007f8ab912a80f: add    $0x200,%rsp
  0x00007f8ab912a816: mov    (%rsp),%r15
  0x00007f8ab912a81a: mov    0x8(%rsp),%r14
  0x00007f8ab912a81f: mov    0x10(%rsp),%r13
  0x00007f8ab912a824: mov    0x18(%rsp),%r12
  0x00007f8ab912a829: mov    0x20(%rsp),%r11
  0x00007f8ab912a82e: mov    0x28(%rsp),%r10
  0x00007f8ab912a833: mov    0x30(%rsp),%r9
  0x00007f8ab912a838: mov    0x38(%rsp),%r8
  0x00007f8ab912a83d: mov    0x40(%rsp),%rdi
  0x00007f8ab912a842: mov    0x48(%rsp),%rsi
  0x00007f8ab912a847: mov    0x50(%rsp),%rbp
  0x00007f8ab912a84c: mov    0x60(%rsp),%rbx
  0x00007f8ab912a851: mov    0x68(%rsp),%rdx
  0x00007f8ab912a856: mov    0x70(%rsp),%rcx
  0x00007f8ab912a85b: mov    0x78(%rsp),%rax
  0x00007f8ab912a860: add    $0x80,%rsp
  0x00007f8ab912a867: add    $0x8,%rsp
  0x00007f8ab912a86b: popfq  
  0x00007f8ab912a86c: mov    %r13,%rsp
  0x00007f8ab912a86f: pop    %rax
  0x00007f8ab912a870: mov    %rsp,%r13
  0x00007f8ab912a873: sub    $0x30,%rsp
  0x00007f8ab912a877: mov    %rax,(%rsp)
  0x00007f8ab912a87b: mov    %rsi,0x20(%rsp)
  0x00007f8ab912a880: mov    %rdx,0x18(%rsp)
  0x00007f8ab912a885: mov    %ecx,0x10(%rsp)
  0x00007f8ab912a889: mov    %r8d,0x8(%rsp)
  0x00007f8ab912a88e: mov    0x40(%rbx),%rcx
  0x00007f8ab912a892: jmpq   *%rcx

AHE@0x00007f8ac80d76f0: 0xbbbea000 i2c: 0x00007f8ab912a960 c2i: 0x00007f8ab912aa80 c2iUV: 0x00007f8ab912aa53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JC)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab912aa80
  0x00007f8ab912a960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912a964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912a96e: cmp    %r11,%rax
  0x00007f8ab912a971: jbe    0x00007f8ab912a98a
  0x00007f8ab912a977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912a981: cmp    %r11,%rax
  0x00007f8ab912a984: jb     0x00007f8ab912aa27
  0x00007f8ab912a98a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912a994: cmp    %r11,%rax
  0x00007f8ab912a997: jbe    0x00007f8ab912a9b0
  0x00007f8ab912a99d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912a9a7: cmp    %r11,%rax
  0x00007f8ab912a9aa: jb     0x00007f8ab912aa27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912a9b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912a9b5: sub    $0x80,%rsp
  0x00007f8ab912a9bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912a9c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912a9c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912a9cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912a9d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912a9d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912a9da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912a9df: mov    %r8,0x38(%rsp)
  0x00007f8ab912a9e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912a9e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912a9ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912a9f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912a9f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912a9fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912aa02: mov    %r15,(%rsp)
  0x00007f8ab912aa06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912aa10: movabs $0x7f8ab912a9b0,%rsi
  0x00007f8ab912aa1a: mov    %rsp,%rdx
  0x00007f8ab912aa1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912aa21: callq  0x00007f8aceddb9fa
  0x00007f8ab912aa26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912aa27: mov    %rsp,%r11
  0x00007f8ab912aa2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912aa2e: push   %rax
  0x00007f8ab912aa2f: mov    %r11,%rax
  0x00007f8ab912aa32: mov    0x50(%rbx),%r11
  0x00007f8ab912aa36: mov    0x28(%rax),%rsi
  0x00007f8ab912aa3a: mov    0x20(%rax),%rdx
  0x00007f8ab912aa3e: mov    0x10(%rax),%rcx
  0x00007f8ab912aa42: mov    0x8(%rax),%r8d
  0x00007f8ab912aa46: mov    %rbx,0x258(%r15)
  0x00007f8ab912aa4d: mov    %rbx,%rax
  0x00007f8ab912aa50: jmpq   *%r11
  0x00007f8ab912aa53: mov    0x8(%rsi),%ebx
  0x00007f8ab912aa56: shl    $0x3,%rbx
  0x00007f8ab912aa5a: cmp    0x10(%rax),%rbx
  0x00007f8ab912aa5e: mov    0x8(%rax),%rbx
  0x00007f8ab912aa62: je     0x00007f8ab912aa6d
  0x00007f8ab912aa68: jmpq   0x00007f8ab9105c40
  0x00007f8ab912aa6d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912aa75: je     0x00007f8ab912ab70
  0x00007f8ab912aa7b: jmpq   0x00007f8ab9105c40
  0x00007f8ab912aa80: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912aa88: je     0x00007f8ab912ab70
  0x00007f8ab912aa8e: mov    %rsp,%r13
  0x00007f8ab912aa91: mov    (%rsp),%rax
  0x00007f8ab912aa95: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912aa99: pushfq 
  0x00007f8ab912aa9a: sub    $0x8,%rsp
  0x00007f8ab912aa9e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912aaa3: sub    $0x80,%rsp
  0x00007f8ab912aaaa: mov    %rax,0x78(%rsp)
  0x00007f8ab912aaaf: mov    %rcx,0x70(%rsp)
  0x00007f8ab912aab4: mov    %rdx,0x68(%rsp)
  0x00007f8ab912aab9: mov    %rbx,0x60(%rsp)
  0x00007f8ab912aabe: mov    %rbp,0x50(%rsp)
  0x00007f8ab912aac3: mov    %rsi,0x48(%rsp)
  0x00007f8ab912aac8: mov    %rdi,0x40(%rsp)
  0x00007f8ab912aacd: mov    %r8,0x38(%rsp)
  0x00007f8ab912aad2: mov    %r9,0x30(%rsp)
  0x00007f8ab912aad7: mov    %r10,0x28(%rsp)
  0x00007f8ab912aadc: mov    %r11,0x20(%rsp)
  0x00007f8ab912aae1: mov    %r12,0x18(%rsp)
  0x00007f8ab912aae6: mov    %r13,0x10(%rsp)
  0x00007f8ab912aaeb: mov    %r14,0x8(%rsp)
  0x00007f8ab912aaf0: mov    %r15,(%rsp)
  0x00007f8ab912aaf4: sub    $0x200,%rsp
  0x00007f8ab912aafb: fxsave64 (%rsp)
  0x00007f8ab912ab00: mov    %rbx,%rdi
  0x00007f8ab912ab03: mov    %rax,%rsi
  0x00007f8ab912ab06: callq  0x00007f8acef8bbca
  0x00007f8ab912ab0b: fxrstor64 (%rsp)
  0x00007f8ab912ab10: add    $0x200,%rsp
  0x00007f8ab912ab17: mov    (%rsp),%r15
  0x00007f8ab912ab1b: mov    0x8(%rsp),%r14
  0x00007f8ab912ab20: mov    0x10(%rsp),%r13
  0x00007f8ab912ab25: mov    0x18(%rsp),%r12
  0x00007f8ab912ab2a: mov    0x20(%rsp),%r11
  0x00007f8ab912ab2f: mov    0x28(%rsp),%r10
  0x00007f8ab912ab34: mov    0x30(%rsp),%r9
  0x00007f8ab912ab39: mov    0x38(%rsp),%r8
  0x00007f8ab912ab3e: mov    0x40(%rsp),%rdi
  0x00007f8ab912ab43: mov    0x48(%rsp),%rsi
  0x00007f8ab912ab48: mov    0x50(%rsp),%rbp
  0x00007f8ab912ab4d: mov    0x60(%rsp),%rbx
  0x00007f8ab912ab52: mov    0x68(%rsp),%rdx
  0x00007f8ab912ab57: mov    0x70(%rsp),%rcx
  0x00007f8ab912ab5c: mov    0x78(%rsp),%rax
  0x00007f8ab912ab61: add    $0x80,%rsp
  0x00007f8ab912ab68: add    $0x8,%rsp
  0x00007f8ab912ab6c: popfq  
  0x00007f8ab912ab6d: mov    %r13,%rsp
  0x00007f8ab912ab70: pop    %rax
  0x00007f8ab912ab71: mov    %rsp,%r13
  0x00007f8ab912ab74: sub    $0x30,%rsp
  0x00007f8ab912ab78: mov    %rax,(%rsp)
  0x00007f8ab912ab7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab912ab81: mov    %rdx,0x20(%rsp)
  0x00007f8ab912ab86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912ab90: mov    %rax,0x18(%rsp)
  0x00007f8ab912ab95: mov    %rcx,0x10(%rsp)
  0x00007f8ab912ab9a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912ab9f: mov    0x40(%rbx),%rcx
  0x00007f8ab912aba3: jmpq   *%rcx

AHE@0x00007f8ac80d7738: 0xbbea0000 i2c: 0x00007f8ab912ac60 c2i: 0x00007f8ab912ad7b c2iUV: 0x00007f8ab912ad4e
i2c argument handler #0 for: receiver (JC)V (570 bytes generated)
c2i argument handler starts at 0x7f8ab912ad7b
  0x00007f8ab912ac60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912ac64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912ac6e: cmp    %r11,%rax
  0x00007f8ab912ac71: jbe    0x00007f8ab912ac8a
  0x00007f8ab912ac77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912ac81: cmp    %r11,%rax
  0x00007f8ab912ac84: jb     0x00007f8ab912ad27
  0x00007f8ab912ac8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912ac94: cmp    %r11,%rax
  0x00007f8ab912ac97: jbe    0x00007f8ab912acb0
  0x00007f8ab912ac9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912aca7: cmp    %r11,%rax
  0x00007f8ab912acaa: jb     0x00007f8ab912ad27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912acb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912acb5: sub    $0x80,%rsp
  0x00007f8ab912acbc: mov    %rax,0x78(%rsp)
  0x00007f8ab912acc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912acc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912accb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912acd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912acd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912acda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912acdf: mov    %r8,0x38(%rsp)
  0x00007f8ab912ace4: mov    %r9,0x30(%rsp)
  0x00007f8ab912ace9: mov    %r10,0x28(%rsp)
  0x00007f8ab912acee: mov    %r11,0x20(%rsp)
  0x00007f8ab912acf3: mov    %r12,0x18(%rsp)
  0x00007f8ab912acf8: mov    %r13,0x10(%rsp)
  0x00007f8ab912acfd: mov    %r14,0x8(%rsp)
  0x00007f8ab912ad02: mov    %r15,(%rsp)
  0x00007f8ab912ad06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912ad10: movabs $0x7f8ab912acb0,%rsi
  0x00007f8ab912ad1a: mov    %rsp,%rdx
  0x00007f8ab912ad1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ad21: callq  0x00007f8aceddb9fa
  0x00007f8ab912ad26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912ad27: mov    %rsp,%r11
  0x00007f8ab912ad2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ad2e: push   %rax
  0x00007f8ab912ad2f: mov    %r11,%rax
  0x00007f8ab912ad32: mov    0x50(%rbx),%r11
  0x00007f8ab912ad36: mov    0x20(%rax),%rsi
  0x00007f8ab912ad3a: mov    0x10(%rax),%rdx
  0x00007f8ab912ad3e: mov    0x8(%rax),%ecx
  0x00007f8ab912ad41: mov    %rbx,0x258(%r15)
  0x00007f8ab912ad48: mov    %rbx,%rax
  0x00007f8ab912ad4b: jmpq   *%r11
  0x00007f8ab912ad4e: mov    0x8(%rsi),%ebx
  0x00007f8ab912ad51: shl    $0x3,%rbx
  0x00007f8ab912ad55: cmp    0x10(%rax),%rbx
  0x00007f8ab912ad59: mov    0x8(%rax),%rbx
  0x00007f8ab912ad5d: je     0x00007f8ab912ad68
  0x00007f8ab912ad63: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ad68: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ad70: je     0x00007f8ab912ae6b
  0x00007f8ab912ad76: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ad7b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ad83: je     0x00007f8ab912ae6b
  0x00007f8ab912ad89: mov    %rsp,%r13
  0x00007f8ab912ad8c: mov    (%rsp),%rax
  0x00007f8ab912ad90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ad94: pushfq 
  0x00007f8ab912ad95: sub    $0x8,%rsp
  0x00007f8ab912ad99: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912ad9e: sub    $0x80,%rsp
  0x00007f8ab912ada5: mov    %rax,0x78(%rsp)
  0x00007f8ab912adaa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912adaf: mov    %rdx,0x68(%rsp)
  0x00007f8ab912adb4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912adb9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912adbe: mov    %rsi,0x48(%rsp)
  0x00007f8ab912adc3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912adc8: mov    %r8,0x38(%rsp)
  0x00007f8ab912adcd: mov    %r9,0x30(%rsp)
  0x00007f8ab912add2: mov    %r10,0x28(%rsp)
  0x00007f8ab912add7: mov    %r11,0x20(%rsp)
  0x00007f8ab912addc: mov    %r12,0x18(%rsp)
  0x00007f8ab912ade1: mov    %r13,0x10(%rsp)
  0x00007f8ab912ade6: mov    %r14,0x8(%rsp)
  0x00007f8ab912adeb: mov    %r15,(%rsp)
  0x00007f8ab912adef: sub    $0x200,%rsp
  0x00007f8ab912adf6: fxsave64 (%rsp)
  0x00007f8ab912adfb: mov    %rbx,%rdi
  0x00007f8ab912adfe: mov    %rax,%rsi
  0x00007f8ab912ae01: callq  0x00007f8acef8bbca
  0x00007f8ab912ae06: fxrstor64 (%rsp)
  0x00007f8ab912ae0b: add    $0x200,%rsp
  0x00007f8ab912ae12: mov    (%rsp),%r15
  0x00007f8ab912ae16: mov    0x8(%rsp),%r14
  0x00007f8ab912ae1b: mov    0x10(%rsp),%r13
  0x00007f8ab912ae20: mov    0x18(%rsp),%r12
  0x00007f8ab912ae25: mov    0x20(%rsp),%r11
  0x00007f8ab912ae2a: mov    0x28(%rsp),%r10
  0x00007f8ab912ae2f: mov    0x30(%rsp),%r9
  0x00007f8ab912ae34: mov    0x38(%rsp),%r8
  0x00007f8ab912ae39: mov    0x40(%rsp),%rdi
  0x00007f8ab912ae3e: mov    0x48(%rsp),%rsi
  0x00007f8ab912ae43: mov    0x50(%rsp),%rbp
  0x00007f8ab912ae48: mov    0x60(%rsp),%rbx
  0x00007f8ab912ae4d: mov    0x68(%rsp),%rdx
  0x00007f8ab912ae52: mov    0x70(%rsp),%rcx
  0x00007f8ab912ae57: mov    0x78(%rsp),%rax
  0x00007f8ab912ae5c: add    $0x80,%rsp
  0x00007f8ab912ae63: add    $0x8,%rsp
  0x00007f8ab912ae67: popfq  
  0x00007f8ab912ae68: mov    %r13,%rsp
  0x00007f8ab912ae6b: pop    %rax
  0x00007f8ab912ae6c: mov    %rsp,%r13
  0x00007f8ab912ae6f: sub    $0x30,%rsp
  0x00007f8ab912ae73: mov    %rax,(%rsp)
  0x00007f8ab912ae77: mov    %rsi,0x20(%rsp)
  0x00007f8ab912ae7c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912ae86: mov    %rax,0x18(%rsp)
  0x00007f8ab912ae8b: mov    %rdx,0x10(%rsp)
  0x00007f8ab912ae90: mov    %ecx,0x8(%rsp)
  0x00007f8ab912ae94: mov    0x40(%rbx),%rcx
  0x00007f8ab912ae98: jmpq   *%rcx

AHE@0x00007f8ac80d7780: 0xbba00000 i2c: 0x00007f8ab912af60 c2i: 0x00007f8ab912b07b c2iUV: 0x00007f8ab912b04e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)C (555 bytes generated)
c2i argument handler starts at 0x7f8ab912b07b
  0x00007f8ab912af60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912af64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912af6e: cmp    %r11,%rax
  0x00007f8ab912af71: jbe    0x00007f8ab912af8a
  0x00007f8ab912af77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912af81: cmp    %r11,%rax
  0x00007f8ab912af84: jb     0x00007f8ab912b027
  0x00007f8ab912af8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912af94: cmp    %r11,%rax
  0x00007f8ab912af97: jbe    0x00007f8ab912afb0
  0x00007f8ab912af9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912afa7: cmp    %r11,%rax
  0x00007f8ab912afaa: jb     0x00007f8ab912b027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912afb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912afb5: sub    $0x80,%rsp
  0x00007f8ab912afbc: mov    %rax,0x78(%rsp)
  0x00007f8ab912afc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912afc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912afcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912afd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912afd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912afda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912afdf: mov    %r8,0x38(%rsp)
  0x00007f8ab912afe4: mov    %r9,0x30(%rsp)
  0x00007f8ab912afe9: mov    %r10,0x28(%rsp)
  0x00007f8ab912afee: mov    %r11,0x20(%rsp)
  0x00007f8ab912aff3: mov    %r12,0x18(%rsp)
  0x00007f8ab912aff8: mov    %r13,0x10(%rsp)
  0x00007f8ab912affd: mov    %r14,0x8(%rsp)
  0x00007f8ab912b002: mov    %r15,(%rsp)
  0x00007f8ab912b006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912b010: movabs $0x7f8ab912afb0,%rsi
  0x00007f8ab912b01a: mov    %rsp,%rdx
  0x00007f8ab912b01d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b021: callq  0x00007f8aceddb9fa
  0x00007f8ab912b026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912b027: mov    %rsp,%r11
  0x00007f8ab912b02a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b02e: push   %rax
  0x00007f8ab912b02f: mov    %r11,%rax
  0x00007f8ab912b032: mov    0x50(%rbx),%r11
  0x00007f8ab912b036: mov    0x18(%rax),%rsi
  0x00007f8ab912b03a: mov    0x10(%rax),%rdx
  0x00007f8ab912b03e: mov    0x8(%rax),%ecx
  0x00007f8ab912b041: mov    %rbx,0x258(%r15)
  0x00007f8ab912b048: mov    %rbx,%rax
  0x00007f8ab912b04b: jmpq   *%r11
  0x00007f8ab912b04e: mov    0x8(%rsi),%ebx
  0x00007f8ab912b051: shl    $0x3,%rbx
  0x00007f8ab912b055: cmp    0x10(%rax),%rbx
  0x00007f8ab912b059: mov    0x8(%rax),%rbx
  0x00007f8ab912b05d: je     0x00007f8ab912b068
  0x00007f8ab912b063: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b068: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b070: je     0x00007f8ab912b16b
  0x00007f8ab912b076: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b07b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b083: je     0x00007f8ab912b16b
  0x00007f8ab912b089: mov    %rsp,%r13
  0x00007f8ab912b08c: mov    (%rsp),%rax
  0x00007f8ab912b090: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b094: pushfq 
  0x00007f8ab912b095: sub    $0x8,%rsp
  0x00007f8ab912b099: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912b09e: sub    $0x80,%rsp
  0x00007f8ab912b0a5: mov    %rax,0x78(%rsp)
  0x00007f8ab912b0aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912b0af: mov    %rdx,0x68(%rsp)
  0x00007f8ab912b0b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912b0b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912b0be: mov    %rsi,0x48(%rsp)
  0x00007f8ab912b0c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912b0c8: mov    %r8,0x38(%rsp)
  0x00007f8ab912b0cd: mov    %r9,0x30(%rsp)
  0x00007f8ab912b0d2: mov    %r10,0x28(%rsp)
  0x00007f8ab912b0d7: mov    %r11,0x20(%rsp)
  0x00007f8ab912b0dc: mov    %r12,0x18(%rsp)
  0x00007f8ab912b0e1: mov    %r13,0x10(%rsp)
  0x00007f8ab912b0e6: mov    %r14,0x8(%rsp)
  0x00007f8ab912b0eb: mov    %r15,(%rsp)
  0x00007f8ab912b0ef: sub    $0x200,%rsp
  0x00007f8ab912b0f6: fxsave64 (%rsp)
  0x00007f8ab912b0fb: mov    %rbx,%rdi
  0x00007f8ab912b0fe: mov    %rax,%rsi
  0x00007f8ab912b101: callq  0x00007f8acef8bbca
  0x00007f8ab912b106: fxrstor64 (%rsp)
  0x00007f8ab912b10b: add    $0x200,%rsp
  0x00007f8ab912b112: mov    (%rsp),%r15
  0x00007f8ab912b116: mov    0x8(%rsp),%r14
  0x00007f8ab912b11b: mov    0x10(%rsp),%r13
  0x00007f8ab912b120: mov    0x18(%rsp),%r12
  0x00007f8ab912b125: mov    0x20(%rsp),%r11
  0x00007f8ab912b12a: mov    0x28(%rsp),%r10
  0x00007f8ab912b12f: mov    0x30(%rsp),%r9
  0x00007f8ab912b134: mov    0x38(%rsp),%r8
  0x00007f8ab912b139: mov    0x40(%rsp),%rdi
  0x00007f8ab912b13e: mov    0x48(%rsp),%rsi
  0x00007f8ab912b143: mov    0x50(%rsp),%rbp
  0x00007f8ab912b148: mov    0x60(%rsp),%rbx
  0x00007f8ab912b14d: mov    0x68(%rsp),%rdx
  0x00007f8ab912b152: mov    0x70(%rsp),%rcx
  0x00007f8ab912b157: mov    0x78(%rsp),%rax
  0x00007f8ab912b15c: add    $0x80,%rsp
  0x00007f8ab912b163: add    $0x8,%rsp
  0x00007f8ab912b167: popfq  
  0x00007f8ab912b168: mov    %r13,%rsp
  0x00007f8ab912b16b: pop    %rax
  0x00007f8ab912b16c: mov    %rsp,%r13
  0x00007f8ab912b16f: sub    $0x20,%rsp
  0x00007f8ab912b173: mov    %rax,(%rsp)
  0x00007f8ab912b177: mov    %rsi,0x18(%rsp)
  0x00007f8ab912b17c: mov    %rdx,0x10(%rsp)
  0x00007f8ab912b181: mov    %ecx,0x8(%rsp)
  0x00007f8ab912b185: mov    0x40(%rbx),%rcx
  0x00007f8ab912b189: jmpq   *%rcx

AHE@0x00007f8ac80d77c8: 0xbbbe0000 i2c: 0x00007f8ab912b260 c2i: 0x00007f8ab912b37c c2iUV: 0x00007f8ab912b34f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)C (572 bytes generated)
c2i argument handler starts at 0x7f8ab912b37c
  0x00007f8ab912b260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912b264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912b26e: cmp    %r11,%rax
  0x00007f8ab912b271: jbe    0x00007f8ab912b28a
  0x00007f8ab912b277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912b281: cmp    %r11,%rax
  0x00007f8ab912b284: jb     0x00007f8ab912b327
  0x00007f8ab912b28a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912b294: cmp    %r11,%rax
  0x00007f8ab912b297: jbe    0x00007f8ab912b2b0
  0x00007f8ab912b29d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912b2a7: cmp    %r11,%rax
  0x00007f8ab912b2aa: jb     0x00007f8ab912b327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912b2b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912b2b5: sub    $0x80,%rsp
  0x00007f8ab912b2bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912b2c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912b2c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912b2cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912b2d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912b2d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912b2da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912b2df: mov    %r8,0x38(%rsp)
  0x00007f8ab912b2e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912b2e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912b2ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912b2f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912b2f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912b2fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912b302: mov    %r15,(%rsp)
  0x00007f8ab912b306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912b310: movabs $0x7f8ab912b2b0,%rsi
  0x00007f8ab912b31a: mov    %rsp,%rdx
  0x00007f8ab912b31d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b321: callq  0x00007f8aceddb9fa
  0x00007f8ab912b326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912b327: mov    %rsp,%r11
  0x00007f8ab912b32a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b32e: push   %rax
  0x00007f8ab912b32f: mov    %r11,%rax
  0x00007f8ab912b332: mov    0x50(%rbx),%r11
  0x00007f8ab912b336: mov    0x20(%rax),%rsi
  0x00007f8ab912b33a: mov    0x18(%rax),%rdx
  0x00007f8ab912b33e: mov    0x8(%rax),%rcx
  0x00007f8ab912b342: mov    %rbx,0x258(%r15)
  0x00007f8ab912b349: mov    %rbx,%rax
  0x00007f8ab912b34c: jmpq   *%r11
  0x00007f8ab912b34f: mov    0x8(%rsi),%ebx
  0x00007f8ab912b352: shl    $0x3,%rbx
  0x00007f8ab912b356: cmp    0x10(%rax),%rbx
  0x00007f8ab912b35a: mov    0x8(%rax),%rbx
  0x00007f8ab912b35e: je     0x00007f8ab912b369
  0x00007f8ab912b364: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b369: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b371: je     0x00007f8ab912b46c
  0x00007f8ab912b377: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b37c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b384: je     0x00007f8ab912b46c
  0x00007f8ab912b38a: mov    %rsp,%r13
  0x00007f8ab912b38d: mov    (%rsp),%rax
  0x00007f8ab912b391: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b395: pushfq 
  0x00007f8ab912b396: sub    $0x8,%rsp
  0x00007f8ab912b39a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912b39f: sub    $0x80,%rsp
  0x00007f8ab912b3a6: mov    %rax,0x78(%rsp)
  0x00007f8ab912b3ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab912b3b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab912b3b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab912b3ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab912b3bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab912b3c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab912b3c9: mov    %r8,0x38(%rsp)
  0x00007f8ab912b3ce: mov    %r9,0x30(%rsp)
  0x00007f8ab912b3d3: mov    %r10,0x28(%rsp)
  0x00007f8ab912b3d8: mov    %r11,0x20(%rsp)
  0x00007f8ab912b3dd: mov    %r12,0x18(%rsp)
  0x00007f8ab912b3e2: mov    %r13,0x10(%rsp)
  0x00007f8ab912b3e7: mov    %r14,0x8(%rsp)
  0x00007f8ab912b3ec: mov    %r15,(%rsp)
  0x00007f8ab912b3f0: sub    $0x200,%rsp
  0x00007f8ab912b3f7: fxsave64 (%rsp)
  0x00007f8ab912b3fc: mov    %rbx,%rdi
  0x00007f8ab912b3ff: mov    %rax,%rsi
  0x00007f8ab912b402: callq  0x00007f8acef8bbca
  0x00007f8ab912b407: fxrstor64 (%rsp)
  0x00007f8ab912b40c: add    $0x200,%rsp
  0x00007f8ab912b413: mov    (%rsp),%r15
  0x00007f8ab912b417: mov    0x8(%rsp),%r14
  0x00007f8ab912b41c: mov    0x10(%rsp),%r13
  0x00007f8ab912b421: mov    0x18(%rsp),%r12
  0x00007f8ab912b426: mov    0x20(%rsp),%r11
  0x00007f8ab912b42b: mov    0x28(%rsp),%r10
  0x00007f8ab912b430: mov    0x30(%rsp),%r9
  0x00007f8ab912b435: mov    0x38(%rsp),%r8
  0x00007f8ab912b43a: mov    0x40(%rsp),%rdi
  0x00007f8ab912b43f: mov    0x48(%rsp),%rsi
  0x00007f8ab912b444: mov    0x50(%rsp),%rbp
  0x00007f8ab912b449: mov    0x60(%rsp),%rbx
  0x00007f8ab912b44e: mov    0x68(%rsp),%rdx
  0x00007f8ab912b453: mov    0x70(%rsp),%rcx
  0x00007f8ab912b458: mov    0x78(%rsp),%rax
  0x00007f8ab912b45d: add    $0x80,%rsp
  0x00007f8ab912b464: add    $0x8,%rsp
  0x00007f8ab912b468: popfq  
  0x00007f8ab912b469: mov    %r13,%rsp
  0x00007f8ab912b46c: pop    %rax
  0x00007f8ab912b46d: mov    %rsp,%r13
  0x00007f8ab912b470: sub    $0x30,%rsp
  0x00007f8ab912b474: mov    %rax,(%rsp)
  0x00007f8ab912b478: mov    %rsi,0x20(%rsp)
  0x00007f8ab912b47d: mov    %rdx,0x18(%rsp)
  0x00007f8ab912b482: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912b48c: mov    %rax,0x10(%rsp)
  0x00007f8ab912b491: mov    %rcx,0x8(%rsp)
  0x00007f8ab912b496: mov    0x40(%rbx),%rcx
  0x00007f8ab912b49a: jmpq   *%rcx

AHE@0x00007f8ac80d7810: 0xbbe00000 i2c: 0x00007f8ab912b560 c2i: 0x00007f8ab912b678 c2iUV: 0x00007f8ab912b64b
i2c argument handler #0 for: receiver (J)C (563 bytes generated)
c2i argument handler starts at 0x7f8ab912b678
  0x00007f8ab912b560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912b564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912b56e: cmp    %r11,%rax
  0x00007f8ab912b571: jbe    0x00007f8ab912b58a
  0x00007f8ab912b577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912b581: cmp    %r11,%rax
  0x00007f8ab912b584: jb     0x00007f8ab912b627
  0x00007f8ab912b58a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912b594: cmp    %r11,%rax
  0x00007f8ab912b597: jbe    0x00007f8ab912b5b0
  0x00007f8ab912b59d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912b5a7: cmp    %r11,%rax
  0x00007f8ab912b5aa: jb     0x00007f8ab912b627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912b5b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912b5b5: sub    $0x80,%rsp
  0x00007f8ab912b5bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912b5c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912b5c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912b5cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912b5d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912b5d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912b5da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912b5df: mov    %r8,0x38(%rsp)
  0x00007f8ab912b5e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912b5e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912b5ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912b5f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912b5f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912b5fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912b602: mov    %r15,(%rsp)
  0x00007f8ab912b606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912b610: movabs $0x7f8ab912b5b0,%rsi
  0x00007f8ab912b61a: mov    %rsp,%rdx
  0x00007f8ab912b61d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b621: callq  0x00007f8aceddb9fa
  0x00007f8ab912b626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912b627: mov    %rsp,%r11
  0x00007f8ab912b62a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b62e: push   %rax
  0x00007f8ab912b62f: mov    %r11,%rax
  0x00007f8ab912b632: mov    0x50(%rbx),%r11
  0x00007f8ab912b636: mov    0x18(%rax),%rsi
  0x00007f8ab912b63a: mov    0x8(%rax),%rdx
  0x00007f8ab912b63e: mov    %rbx,0x258(%r15)
  0x00007f8ab912b645: mov    %rbx,%rax
  0x00007f8ab912b648: jmpq   *%r11
  0x00007f8ab912b64b: mov    0x8(%rsi),%ebx
  0x00007f8ab912b64e: shl    $0x3,%rbx
  0x00007f8ab912b652: cmp    0x10(%rax),%rbx
  0x00007f8ab912b656: mov    0x8(%rax),%rbx
  0x00007f8ab912b65a: je     0x00007f8ab912b665
  0x00007f8ab912b660: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b665: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b66d: je     0x00007f8ab912b768
  0x00007f8ab912b673: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b678: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b680: je     0x00007f8ab912b768
  0x00007f8ab912b686: mov    %rsp,%r13
  0x00007f8ab912b689: mov    (%rsp),%rax
  0x00007f8ab912b68d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b691: pushfq 
  0x00007f8ab912b692: sub    $0x8,%rsp
  0x00007f8ab912b696: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912b69b: sub    $0x80,%rsp
  0x00007f8ab912b6a2: mov    %rax,0x78(%rsp)
  0x00007f8ab912b6a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab912b6ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab912b6b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab912b6b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab912b6bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab912b6c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab912b6c5: mov    %r8,0x38(%rsp)
  0x00007f8ab912b6ca: mov    %r9,0x30(%rsp)
  0x00007f8ab912b6cf: mov    %r10,0x28(%rsp)
  0x00007f8ab912b6d4: mov    %r11,0x20(%rsp)
  0x00007f8ab912b6d9: mov    %r12,0x18(%rsp)
  0x00007f8ab912b6de: mov    %r13,0x10(%rsp)
  0x00007f8ab912b6e3: mov    %r14,0x8(%rsp)
  0x00007f8ab912b6e8: mov    %r15,(%rsp)
  0x00007f8ab912b6ec: sub    $0x200,%rsp
  0x00007f8ab912b6f3: fxsave64 (%rsp)
  0x00007f8ab912b6f8: mov    %rbx,%rdi
  0x00007f8ab912b6fb: mov    %rax,%rsi
  0x00007f8ab912b6fe: callq  0x00007f8acef8bbca
  0x00007f8ab912b703: fxrstor64 (%rsp)
  0x00007f8ab912b708: add    $0x200,%rsp
  0x00007f8ab912b70f: mov    (%rsp),%r15
  0x00007f8ab912b713: mov    0x8(%rsp),%r14
  0x00007f8ab912b718: mov    0x10(%rsp),%r13
  0x00007f8ab912b71d: mov    0x18(%rsp),%r12
  0x00007f8ab912b722: mov    0x20(%rsp),%r11
  0x00007f8ab912b727: mov    0x28(%rsp),%r10
  0x00007f8ab912b72c: mov    0x30(%rsp),%r9
  0x00007f8ab912b731: mov    0x38(%rsp),%r8
  0x00007f8ab912b736: mov    0x40(%rsp),%rdi
  0x00007f8ab912b73b: mov    0x48(%rsp),%rsi
  0x00007f8ab912b740: mov    0x50(%rsp),%rbp
  0x00007f8ab912b745: mov    0x60(%rsp),%rbx
  0x00007f8ab912b74a: mov    0x68(%rsp),%rdx
  0x00007f8ab912b74f: mov    0x70(%rsp),%rcx
  0x00007f8ab912b754: mov    0x78(%rsp),%rax
  0x00007f8ab912b759: add    $0x80,%rsp
  0x00007f8ab912b760: add    $0x8,%rsp
  0x00007f8ab912b764: popfq  
  0x00007f8ab912b765: mov    %r13,%rsp
  0x00007f8ab912b768: pop    %rax
  0x00007f8ab912b769: mov    %rsp,%r13
  0x00007f8ab912b76c: sub    $0x20,%rsp
  0x00007f8ab912b770: mov    %rax,(%rsp)
  0x00007f8ab912b774: mov    %rsi,0x18(%rsp)
  0x00007f8ab912b779: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912b783: mov    %rax,0x10(%rsp)
  0x00007f8ab912b788: mov    %rdx,0x8(%rsp)
  0x00007f8ab912b78d: mov    0x40(%rbx),%rcx
  0x00007f8ab912b791: jmpq   *%rcx

AHE@0x00007f8ac80d7858: 0xbbbea000 i2c: 0x00007f8ab912b860 c2i: 0x00007f8ab912b980 c2iUV: 0x00007f8ab912b953
i2c argument handler #0 for: receiver (Ljava/lang/Object;JS)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab912b980
  0x00007f8ab912b860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912b864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912b86e: cmp    %r11,%rax
  0x00007f8ab912b871: jbe    0x00007f8ab912b88a
  0x00007f8ab912b877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912b881: cmp    %r11,%rax
  0x00007f8ab912b884: jb     0x00007f8ab912b927
  0x00007f8ab912b88a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912b894: cmp    %r11,%rax
  0x00007f8ab912b897: jbe    0x00007f8ab912b8b0
  0x00007f8ab912b89d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912b8a7: cmp    %r11,%rax
  0x00007f8ab912b8aa: jb     0x00007f8ab912b927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912b8b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912b8b5: sub    $0x80,%rsp
  0x00007f8ab912b8bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912b8c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912b8c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912b8cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912b8d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912b8d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912b8da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912b8df: mov    %r8,0x38(%rsp)
  0x00007f8ab912b8e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912b8e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912b8ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912b8f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912b8f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912b8fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912b902: mov    %r15,(%rsp)
  0x00007f8ab912b906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912b910: movabs $0x7f8ab912b8b0,%rsi
  0x00007f8ab912b91a: mov    %rsp,%rdx
  0x00007f8ab912b91d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b921: callq  0x00007f8aceddb9fa
  0x00007f8ab912b926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912b927: mov    %rsp,%r11
  0x00007f8ab912b92a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b92e: push   %rax
  0x00007f8ab912b92f: mov    %r11,%rax
  0x00007f8ab912b932: mov    0x50(%rbx),%r11
  0x00007f8ab912b936: mov    0x28(%rax),%rsi
  0x00007f8ab912b93a: mov    0x20(%rax),%rdx
  0x00007f8ab912b93e: mov    0x10(%rax),%rcx
  0x00007f8ab912b942: mov    0x8(%rax),%r8d
  0x00007f8ab912b946: mov    %rbx,0x258(%r15)
  0x00007f8ab912b94d: mov    %rbx,%rax
  0x00007f8ab912b950: jmpq   *%r11
  0x00007f8ab912b953: mov    0x8(%rsi),%ebx
  0x00007f8ab912b956: shl    $0x3,%rbx
  0x00007f8ab912b95a: cmp    0x10(%rax),%rbx
  0x00007f8ab912b95e: mov    0x8(%rax),%rbx
  0x00007f8ab912b962: je     0x00007f8ab912b96d
  0x00007f8ab912b968: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b96d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b975: je     0x00007f8ab912ba70
  0x00007f8ab912b97b: jmpq   0x00007f8ab9105c40
  0x00007f8ab912b980: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912b988: je     0x00007f8ab912ba70
  0x00007f8ab912b98e: mov    %rsp,%r13
  0x00007f8ab912b991: mov    (%rsp),%rax
  0x00007f8ab912b995: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912b999: pushfq 
  0x00007f8ab912b99a: sub    $0x8,%rsp
  0x00007f8ab912b99e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912b9a3: sub    $0x80,%rsp
  0x00007f8ab912b9aa: mov    %rax,0x78(%rsp)
  0x00007f8ab912b9af: mov    %rcx,0x70(%rsp)
  0x00007f8ab912b9b4: mov    %rdx,0x68(%rsp)
  0x00007f8ab912b9b9: mov    %rbx,0x60(%rsp)
  0x00007f8ab912b9be: mov    %rbp,0x50(%rsp)
  0x00007f8ab912b9c3: mov    %rsi,0x48(%rsp)
  0x00007f8ab912b9c8: mov    %rdi,0x40(%rsp)
  0x00007f8ab912b9cd: mov    %r8,0x38(%rsp)
  0x00007f8ab912b9d2: mov    %r9,0x30(%rsp)
  0x00007f8ab912b9d7: mov    %r10,0x28(%rsp)
  0x00007f8ab912b9dc: mov    %r11,0x20(%rsp)
  0x00007f8ab912b9e1: mov    %r12,0x18(%rsp)
  0x00007f8ab912b9e6: mov    %r13,0x10(%rsp)
  0x00007f8ab912b9eb: mov    %r14,0x8(%rsp)
  0x00007f8ab912b9f0: mov    %r15,(%rsp)
  0x00007f8ab912b9f4: sub    $0x200,%rsp
  0x00007f8ab912b9fb: fxsave64 (%rsp)
  0x00007f8ab912ba00: mov    %rbx,%rdi
  0x00007f8ab912ba03: mov    %rax,%rsi
  0x00007f8ab912ba06: callq  0x00007f8acef8bbca
  0x00007f8ab912ba0b: fxrstor64 (%rsp)
  0x00007f8ab912ba10: add    $0x200,%rsp
  0x00007f8ab912ba17: mov    (%rsp),%r15
  0x00007f8ab912ba1b: mov    0x8(%rsp),%r14
  0x00007f8ab912ba20: mov    0x10(%rsp),%r13
  0x00007f8ab912ba25: mov    0x18(%rsp),%r12
  0x00007f8ab912ba2a: mov    0x20(%rsp),%r11
  0x00007f8ab912ba2f: mov    0x28(%rsp),%r10
  0x00007f8ab912ba34: mov    0x30(%rsp),%r9
  0x00007f8ab912ba39: mov    0x38(%rsp),%r8
  0x00007f8ab912ba3e: mov    0x40(%rsp),%rdi
  0x00007f8ab912ba43: mov    0x48(%rsp),%rsi
  0x00007f8ab912ba48: mov    0x50(%rsp),%rbp
  0x00007f8ab912ba4d: mov    0x60(%rsp),%rbx
  0x00007f8ab912ba52: mov    0x68(%rsp),%rdx
  0x00007f8ab912ba57: mov    0x70(%rsp),%rcx
  0x00007f8ab912ba5c: mov    0x78(%rsp),%rax
  0x00007f8ab912ba61: add    $0x80,%rsp
  0x00007f8ab912ba68: add    $0x8,%rsp
  0x00007f8ab912ba6c: popfq  
  0x00007f8ab912ba6d: mov    %r13,%rsp
  0x00007f8ab912ba70: pop    %rax
  0x00007f8ab912ba71: mov    %rsp,%r13
  0x00007f8ab912ba74: sub    $0x30,%rsp
  0x00007f8ab912ba78: mov    %rax,(%rsp)
  0x00007f8ab912ba7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab912ba81: mov    %rdx,0x20(%rsp)
  0x00007f8ab912ba86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912ba90: mov    %rax,0x18(%rsp)
  0x00007f8ab912ba95: mov    %rcx,0x10(%rsp)
  0x00007f8ab912ba9a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912ba9f: mov    0x40(%rbx),%rcx
  0x00007f8ab912baa3: jmpq   *%rcx

AHE@0x00007f8ac80d78a0: 0xbbea0000 i2c: 0x00007f8ab912bb60 c2i: 0x00007f8ab912bc7b c2iUV: 0x00007f8ab912bc4e
i2c argument handler #0 for: receiver (JS)V (570 bytes generated)
c2i argument handler starts at 0x7f8ab912bc7b
  0x00007f8ab912bb60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912bb64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912bb6e: cmp    %r11,%rax
  0x00007f8ab912bb71: jbe    0x00007f8ab912bb8a
  0x00007f8ab912bb77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912bb81: cmp    %r11,%rax
  0x00007f8ab912bb84: jb     0x00007f8ab912bc27
  0x00007f8ab912bb8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912bb94: cmp    %r11,%rax
  0x00007f8ab912bb97: jbe    0x00007f8ab912bbb0
  0x00007f8ab912bb9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912bba7: cmp    %r11,%rax
  0x00007f8ab912bbaa: jb     0x00007f8ab912bc27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912bbb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912bbb5: sub    $0x80,%rsp
  0x00007f8ab912bbbc: mov    %rax,0x78(%rsp)
  0x00007f8ab912bbc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912bbc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912bbcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912bbd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912bbd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912bbda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912bbdf: mov    %r8,0x38(%rsp)
  0x00007f8ab912bbe4: mov    %r9,0x30(%rsp)
  0x00007f8ab912bbe9: mov    %r10,0x28(%rsp)
  0x00007f8ab912bbee: mov    %r11,0x20(%rsp)
  0x00007f8ab912bbf3: mov    %r12,0x18(%rsp)
  0x00007f8ab912bbf8: mov    %r13,0x10(%rsp)
  0x00007f8ab912bbfd: mov    %r14,0x8(%rsp)
  0x00007f8ab912bc02: mov    %r15,(%rsp)
  0x00007f8ab912bc06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912bc10: movabs $0x7f8ab912bbb0,%rsi
  0x00007f8ab912bc1a: mov    %rsp,%rdx
  0x00007f8ab912bc1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912bc21: callq  0x00007f8aceddb9fa
  0x00007f8ab912bc26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912bc27: mov    %rsp,%r11
  0x00007f8ab912bc2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912bc2e: push   %rax
  0x00007f8ab912bc2f: mov    %r11,%rax
  0x00007f8ab912bc32: mov    0x50(%rbx),%r11
  0x00007f8ab912bc36: mov    0x20(%rax),%rsi
  0x00007f8ab912bc3a: mov    0x10(%rax),%rdx
  0x00007f8ab912bc3e: mov    0x8(%rax),%ecx
  0x00007f8ab912bc41: mov    %rbx,0x258(%r15)
  0x00007f8ab912bc48: mov    %rbx,%rax
  0x00007f8ab912bc4b: jmpq   *%r11
  0x00007f8ab912bc4e: mov    0x8(%rsi),%ebx
  0x00007f8ab912bc51: shl    $0x3,%rbx
  0x00007f8ab912bc55: cmp    0x10(%rax),%rbx
  0x00007f8ab912bc59: mov    0x8(%rax),%rbx
  0x00007f8ab912bc5d: je     0x00007f8ab912bc68
  0x00007f8ab912bc63: jmpq   0x00007f8ab9105c40
  0x00007f8ab912bc68: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912bc70: je     0x00007f8ab912bd6b
  0x00007f8ab912bc76: jmpq   0x00007f8ab9105c40
  0x00007f8ab912bc7b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912bc83: je     0x00007f8ab912bd6b
  0x00007f8ab912bc89: mov    %rsp,%r13
  0x00007f8ab912bc8c: mov    (%rsp),%rax
  0x00007f8ab912bc90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912bc94: pushfq 
  0x00007f8ab912bc95: sub    $0x8,%rsp
  0x00007f8ab912bc99: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912bc9e: sub    $0x80,%rsp
  0x00007f8ab912bca5: mov    %rax,0x78(%rsp)
  0x00007f8ab912bcaa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912bcaf: mov    %rdx,0x68(%rsp)
  0x00007f8ab912bcb4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912bcb9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912bcbe: mov    %rsi,0x48(%rsp)
  0x00007f8ab912bcc3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912bcc8: mov    %r8,0x38(%rsp)
  0x00007f8ab912bccd: mov    %r9,0x30(%rsp)
  0x00007f8ab912bcd2: mov    %r10,0x28(%rsp)
  0x00007f8ab912bcd7: mov    %r11,0x20(%rsp)
  0x00007f8ab912bcdc: mov    %r12,0x18(%rsp)
  0x00007f8ab912bce1: mov    %r13,0x10(%rsp)
  0x00007f8ab912bce6: mov    %r14,0x8(%rsp)
  0x00007f8ab912bceb: mov    %r15,(%rsp)
  0x00007f8ab912bcef: sub    $0x200,%rsp
  0x00007f8ab912bcf6: fxsave64 (%rsp)
  0x00007f8ab912bcfb: mov    %rbx,%rdi
  0x00007f8ab912bcfe: mov    %rax,%rsi
  0x00007f8ab912bd01: callq  0x00007f8acef8bbca
  0x00007f8ab912bd06: fxrstor64 (%rsp)
  0x00007f8ab912bd0b: add    $0x200,%rsp
  0x00007f8ab912bd12: mov    (%rsp),%r15
  0x00007f8ab912bd16: mov    0x8(%rsp),%r14
  0x00007f8ab912bd1b: mov    0x10(%rsp),%r13
  0x00007f8ab912bd20: mov    0x18(%rsp),%r12
  0x00007f8ab912bd25: mov    0x20(%rsp),%r11
  0x00007f8ab912bd2a: mov    0x28(%rsp),%r10
  0x00007f8ab912bd2f: mov    0x30(%rsp),%r9
  0x00007f8ab912bd34: mov    0x38(%rsp),%r8
  0x00007f8ab912bd39: mov    0x40(%rsp),%rdi
  0x00007f8ab912bd3e: mov    0x48(%rsp),%rsi
  0x00007f8ab912bd43: mov    0x50(%rsp),%rbp
  0x00007f8ab912bd48: mov    0x60(%rsp),%rbx
  0x00007f8ab912bd4d: mov    0x68(%rsp),%rdx
  0x00007f8ab912bd52: mov    0x70(%rsp),%rcx
  0x00007f8ab912bd57: mov    0x78(%rsp),%rax
  0x00007f8ab912bd5c: add    $0x80,%rsp
  0x00007f8ab912bd63: add    $0x8,%rsp
  0x00007f8ab912bd67: popfq  
  0x00007f8ab912bd68: mov    %r13,%rsp
  0x00007f8ab912bd6b: pop    %rax
  0x00007f8ab912bd6c: mov    %rsp,%r13
  0x00007f8ab912bd6f: sub    $0x30,%rsp
  0x00007f8ab912bd73: mov    %rax,(%rsp)
  0x00007f8ab912bd77: mov    %rsi,0x20(%rsp)
  0x00007f8ab912bd7c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912bd86: mov    %rax,0x18(%rsp)
  0x00007f8ab912bd8b: mov    %rdx,0x10(%rsp)
  0x00007f8ab912bd90: mov    %ecx,0x8(%rsp)
  0x00007f8ab912bd94: mov    0x40(%rbx),%rcx
  0x00007f8ab912bd98: jmpq   *%rcx

AHE@0x00007f8ac80d78e8: 0xbbaa0000 i2c: 0x00007f8ab912be60 c2i: 0x00007f8ab912bf7f c2iUV: 0x00007f8ab912bf52
i2c argument handler #0 for: receiver (Ljava/lang/Object;IS)V (564 bytes generated)
c2i argument handler starts at 0x7f8ab912bf7f
  0x00007f8ab912be60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912be64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912be6e: cmp    %r11,%rax
  0x00007f8ab912be71: jbe    0x00007f8ab912be8a
  0x00007f8ab912be77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912be81: cmp    %r11,%rax
  0x00007f8ab912be84: jb     0x00007f8ab912bf27
  0x00007f8ab912be8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912be94: cmp    %r11,%rax
  0x00007f8ab912be97: jbe    0x00007f8ab912beb0
  0x00007f8ab912be9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912bea7: cmp    %r11,%rax
  0x00007f8ab912beaa: jb     0x00007f8ab912bf27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912beb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912beb5: sub    $0x80,%rsp
  0x00007f8ab912bebc: mov    %rax,0x78(%rsp)
  0x00007f8ab912bec1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912bec6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912becb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912bed0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912bed5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912beda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912bedf: mov    %r8,0x38(%rsp)
  0x00007f8ab912bee4: mov    %r9,0x30(%rsp)
  0x00007f8ab912bee9: mov    %r10,0x28(%rsp)
  0x00007f8ab912beee: mov    %r11,0x20(%rsp)
  0x00007f8ab912bef3: mov    %r12,0x18(%rsp)
  0x00007f8ab912bef8: mov    %r13,0x10(%rsp)
  0x00007f8ab912befd: mov    %r14,0x8(%rsp)
  0x00007f8ab912bf02: mov    %r15,(%rsp)
  0x00007f8ab912bf06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912bf10: movabs $0x7f8ab912beb0,%rsi
  0x00007f8ab912bf1a: mov    %rsp,%rdx
  0x00007f8ab912bf1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912bf21: callq  0x00007f8aceddb9fa
  0x00007f8ab912bf26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912bf27: mov    %rsp,%r11
  0x00007f8ab912bf2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912bf2e: push   %rax
  0x00007f8ab912bf2f: mov    %r11,%rax
  0x00007f8ab912bf32: mov    0x50(%rbx),%r11
  0x00007f8ab912bf36: mov    0x20(%rax),%rsi
  0x00007f8ab912bf3a: mov    0x18(%rax),%rdx
  0x00007f8ab912bf3e: mov    0x10(%rax),%ecx
  0x00007f8ab912bf41: mov    0x8(%rax),%r8d
  0x00007f8ab912bf45: mov    %rbx,0x258(%r15)
  0x00007f8ab912bf4c: mov    %rbx,%rax
  0x00007f8ab912bf4f: jmpq   *%r11
  0x00007f8ab912bf52: mov    0x8(%rsi),%ebx
  0x00007f8ab912bf55: shl    $0x3,%rbx
  0x00007f8ab912bf59: cmp    0x10(%rax),%rbx
  0x00007f8ab912bf5d: mov    0x8(%rax),%rbx
  0x00007f8ab912bf61: je     0x00007f8ab912bf6c
  0x00007f8ab912bf67: jmpq   0x00007f8ab9105c40
  0x00007f8ab912bf6c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912bf74: je     0x00007f8ab912c06f
  0x00007f8ab912bf7a: jmpq   0x00007f8ab9105c40
  0x00007f8ab912bf7f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912bf87: je     0x00007f8ab912c06f
  0x00007f8ab912bf8d: mov    %rsp,%r13
  0x00007f8ab912bf90: mov    (%rsp),%rax
  0x00007f8ab912bf94: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912bf98: pushfq 
  0x00007f8ab912bf99: sub    $0x8,%rsp
  0x00007f8ab912bf9d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912bfa2: sub    $0x80,%rsp
  0x00007f8ab912bfa9: mov    %rax,0x78(%rsp)
  0x00007f8ab912bfae: mov    %rcx,0x70(%rsp)
  0x00007f8ab912bfb3: mov    %rdx,0x68(%rsp)
  0x00007f8ab912bfb8: mov    %rbx,0x60(%rsp)
  0x00007f8ab912bfbd: mov    %rbp,0x50(%rsp)
  0x00007f8ab912bfc2: mov    %rsi,0x48(%rsp)
  0x00007f8ab912bfc7: mov    %rdi,0x40(%rsp)
  0x00007f8ab912bfcc: mov    %r8,0x38(%rsp)
  0x00007f8ab912bfd1: mov    %r9,0x30(%rsp)
  0x00007f8ab912bfd6: mov    %r10,0x28(%rsp)
  0x00007f8ab912bfdb: mov    %r11,0x20(%rsp)
  0x00007f8ab912bfe0: mov    %r12,0x18(%rsp)
  0x00007f8ab912bfe5: mov    %r13,0x10(%rsp)
  0x00007f8ab912bfea: mov    %r14,0x8(%rsp)
  0x00007f8ab912bfef: mov    %r15,(%rsp)
  0x00007f8ab912bff3: sub    $0x200,%rsp
  0x00007f8ab912bffa: fxsave64 (%rsp)
  0x00007f8ab912bfff: mov    %rbx,%rdi
  0x00007f8ab912c002: mov    %rax,%rsi
  0x00007f8ab912c005: callq  0x00007f8acef8bbca
  0x00007f8ab912c00a: fxrstor64 (%rsp)
  0x00007f8ab912c00f: add    $0x200,%rsp
  0x00007f8ab912c016: mov    (%rsp),%r15
  0x00007f8ab912c01a: mov    0x8(%rsp),%r14
  0x00007f8ab912c01f: mov    0x10(%rsp),%r13
  0x00007f8ab912c024: mov    0x18(%rsp),%r12
  0x00007f8ab912c029: mov    0x20(%rsp),%r11
  0x00007f8ab912c02e: mov    0x28(%rsp),%r10
  0x00007f8ab912c033: mov    0x30(%rsp),%r9
  0x00007f8ab912c038: mov    0x38(%rsp),%r8
  0x00007f8ab912c03d: mov    0x40(%rsp),%rdi
  0x00007f8ab912c042: mov    0x48(%rsp),%rsi
  0x00007f8ab912c047: mov    0x50(%rsp),%rbp
  0x00007f8ab912c04c: mov    0x60(%rsp),%rbx
  0x00007f8ab912c051: mov    0x68(%rsp),%rdx
  0x00007f8ab912c056: mov    0x70(%rsp),%rcx
  0x00007f8ab912c05b: mov    0x78(%rsp),%rax
  0x00007f8ab912c060: add    $0x80,%rsp
  0x00007f8ab912c067: add    $0x8,%rsp
  0x00007f8ab912c06b: popfq  
  0x00007f8ab912c06c: mov    %r13,%rsp
  0x00007f8ab912c06f: pop    %rax
  0x00007f8ab912c070: mov    %rsp,%r13
  0x00007f8ab912c073: sub    $0x30,%rsp
  0x00007f8ab912c077: mov    %rax,(%rsp)
  0x00007f8ab912c07b: mov    %rsi,0x20(%rsp)
  0x00007f8ab912c080: mov    %rdx,0x18(%rsp)
  0x00007f8ab912c085: mov    %ecx,0x10(%rsp)
  0x00007f8ab912c089: mov    %r8d,0x8(%rsp)
  0x00007f8ab912c08e: mov    0x40(%rbx),%rcx
  0x00007f8ab912c092: jmpq   *%rcx

AHE@0x00007f8ac80d7930: 0xbbbe0000 i2c: 0x00007f8ab912c160 c2i: 0x00007f8ab912c27c c2iUV: 0x00007f8ab912c24f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)S (572 bytes generated)
c2i argument handler starts at 0x7f8ab912c27c
  0x00007f8ab912c160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912c164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912c16e: cmp    %r11,%rax
  0x00007f8ab912c171: jbe    0x00007f8ab912c18a
  0x00007f8ab912c177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912c181: cmp    %r11,%rax
  0x00007f8ab912c184: jb     0x00007f8ab912c227
  0x00007f8ab912c18a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912c194: cmp    %r11,%rax
  0x00007f8ab912c197: jbe    0x00007f8ab912c1b0
  0x00007f8ab912c19d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912c1a7: cmp    %r11,%rax
  0x00007f8ab912c1aa: jb     0x00007f8ab912c227
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912c1b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912c1b5: sub    $0x80,%rsp
  0x00007f8ab912c1bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912c1c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912c1c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912c1cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912c1d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912c1d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912c1da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912c1df: mov    %r8,0x38(%rsp)
  0x00007f8ab912c1e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912c1e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912c1ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912c1f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912c1f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912c1fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912c202: mov    %r15,(%rsp)
  0x00007f8ab912c206: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912c210: movabs $0x7f8ab912c1b0,%rsi
  0x00007f8ab912c21a: mov    %rsp,%rdx
  0x00007f8ab912c21d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c221: callq  0x00007f8aceddb9fa
  0x00007f8ab912c226: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912c227: mov    %rsp,%r11
  0x00007f8ab912c22a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c22e: push   %rax
  0x00007f8ab912c22f: mov    %r11,%rax
  0x00007f8ab912c232: mov    0x50(%rbx),%r11
  0x00007f8ab912c236: mov    0x20(%rax),%rsi
  0x00007f8ab912c23a: mov    0x18(%rax),%rdx
  0x00007f8ab912c23e: mov    0x8(%rax),%rcx
  0x00007f8ab912c242: mov    %rbx,0x258(%r15)
  0x00007f8ab912c249: mov    %rbx,%rax
  0x00007f8ab912c24c: jmpq   *%r11
  0x00007f8ab912c24f: mov    0x8(%rsi),%ebx
  0x00007f8ab912c252: shl    $0x3,%rbx
  0x00007f8ab912c256: cmp    0x10(%rax),%rbx
  0x00007f8ab912c25a: mov    0x8(%rax),%rbx
  0x00007f8ab912c25e: je     0x00007f8ab912c269
  0x00007f8ab912c264: jmpq   0x00007f8ab9105c40
  0x00007f8ab912c269: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912c271: je     0x00007f8ab912c36c
  0x00007f8ab912c277: jmpq   0x00007f8ab9105c40
  0x00007f8ab912c27c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912c284: je     0x00007f8ab912c36c
  0x00007f8ab912c28a: mov    %rsp,%r13
  0x00007f8ab912c28d: mov    (%rsp),%rax
  0x00007f8ab912c291: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c295: pushfq 
  0x00007f8ab912c296: sub    $0x8,%rsp
  0x00007f8ab912c29a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912c29f: sub    $0x80,%rsp
  0x00007f8ab912c2a6: mov    %rax,0x78(%rsp)
  0x00007f8ab912c2ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab912c2b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab912c2b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab912c2ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab912c2bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab912c2c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab912c2c9: mov    %r8,0x38(%rsp)
  0x00007f8ab912c2ce: mov    %r9,0x30(%rsp)
  0x00007f8ab912c2d3: mov    %r10,0x28(%rsp)
  0x00007f8ab912c2d8: mov    %r11,0x20(%rsp)
  0x00007f8ab912c2dd: mov    %r12,0x18(%rsp)
  0x00007f8ab912c2e2: mov    %r13,0x10(%rsp)
  0x00007f8ab912c2e7: mov    %r14,0x8(%rsp)
  0x00007f8ab912c2ec: mov    %r15,(%rsp)
  0x00007f8ab912c2f0: sub    $0x200,%rsp
  0x00007f8ab912c2f7: fxsave64 (%rsp)
  0x00007f8ab912c2fc: mov    %rbx,%rdi
  0x00007f8ab912c2ff: mov    %rax,%rsi
  0x00007f8ab912c302: callq  0x00007f8acef8bbca
  0x00007f8ab912c307: fxrstor64 (%rsp)
  0x00007f8ab912c30c: add    $0x200,%rsp
  0x00007f8ab912c313: mov    (%rsp),%r15
  0x00007f8ab912c317: mov    0x8(%rsp),%r14
  0x00007f8ab912c31c: mov    0x10(%rsp),%r13
  0x00007f8ab912c321: mov    0x18(%rsp),%r12
  0x00007f8ab912c326: mov    0x20(%rsp),%r11
  0x00007f8ab912c32b: mov    0x28(%rsp),%r10
  0x00007f8ab912c330: mov    0x30(%rsp),%r9
  0x00007f8ab912c335: mov    0x38(%rsp),%r8
  0x00007f8ab912c33a: mov    0x40(%rsp),%rdi
  0x00007f8ab912c33f: mov    0x48(%rsp),%rsi
  0x00007f8ab912c344: mov    0x50(%rsp),%rbp
  0x00007f8ab912c349: mov    0x60(%rsp),%rbx
  0x00007f8ab912c34e: mov    0x68(%rsp),%rdx
  0x00007f8ab912c353: mov    0x70(%rsp),%rcx
  0x00007f8ab912c358: mov    0x78(%rsp),%rax
  0x00007f8ab912c35d: add    $0x80,%rsp
  0x00007f8ab912c364: add    $0x8,%rsp
  0x00007f8ab912c368: popfq  
  0x00007f8ab912c369: mov    %r13,%rsp
  0x00007f8ab912c36c: pop    %rax
  0x00007f8ab912c36d: mov    %rsp,%r13
  0x00007f8ab912c370: sub    $0x30,%rsp
  0x00007f8ab912c374: mov    %rax,(%rsp)
  0x00007f8ab912c378: mov    %rsi,0x20(%rsp)
  0x00007f8ab912c37d: mov    %rdx,0x18(%rsp)
  0x00007f8ab912c382: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912c38c: mov    %rax,0x10(%rsp)
  0x00007f8ab912c391: mov    %rcx,0x8(%rsp)
  0x00007f8ab912c396: mov    0x40(%rbx),%rcx
  0x00007f8ab912c39a: jmpq   *%rcx

AHE@0x00007f8ac80d7978: 0xbbe00000 i2c: 0x00007f8ab912c460 c2i: 0x00007f8ab912c578 c2iUV: 0x00007f8ab912c54b
i2c argument handler #0 for: receiver (J)S (563 bytes generated)
c2i argument handler starts at 0x7f8ab912c578
  0x00007f8ab912c460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912c464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912c46e: cmp    %r11,%rax
  0x00007f8ab912c471: jbe    0x00007f8ab912c48a
  0x00007f8ab912c477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912c481: cmp    %r11,%rax
  0x00007f8ab912c484: jb     0x00007f8ab912c527
  0x00007f8ab912c48a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912c494: cmp    %r11,%rax
  0x00007f8ab912c497: jbe    0x00007f8ab912c4b0
  0x00007f8ab912c49d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912c4a7: cmp    %r11,%rax
  0x00007f8ab912c4aa: jb     0x00007f8ab912c527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912c4b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912c4b5: sub    $0x80,%rsp
  0x00007f8ab912c4bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912c4c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912c4c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912c4cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912c4d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912c4d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912c4da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912c4df: mov    %r8,0x38(%rsp)
  0x00007f8ab912c4e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912c4e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912c4ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912c4f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912c4f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912c4fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912c502: mov    %r15,(%rsp)
  0x00007f8ab912c506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912c510: movabs $0x7f8ab912c4b0,%rsi
  0x00007f8ab912c51a: mov    %rsp,%rdx
  0x00007f8ab912c51d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c521: callq  0x00007f8aceddb9fa
  0x00007f8ab912c526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912c527: mov    %rsp,%r11
  0x00007f8ab912c52a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c52e: push   %rax
  0x00007f8ab912c52f: mov    %r11,%rax
  0x00007f8ab912c532: mov    0x50(%rbx),%r11
  0x00007f8ab912c536: mov    0x18(%rax),%rsi
  0x00007f8ab912c53a: mov    0x8(%rax),%rdx
  0x00007f8ab912c53e: mov    %rbx,0x258(%r15)
  0x00007f8ab912c545: mov    %rbx,%rax
  0x00007f8ab912c548: jmpq   *%r11
  0x00007f8ab912c54b: mov    0x8(%rsi),%ebx
  0x00007f8ab912c54e: shl    $0x3,%rbx
  0x00007f8ab912c552: cmp    0x10(%rax),%rbx
  0x00007f8ab912c556: mov    0x8(%rax),%rbx
  0x00007f8ab912c55a: je     0x00007f8ab912c565
  0x00007f8ab912c560: jmpq   0x00007f8ab9105c40
  0x00007f8ab912c565: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912c56d: je     0x00007f8ab912c668
  0x00007f8ab912c573: jmpq   0x00007f8ab9105c40
  0x00007f8ab912c578: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912c580: je     0x00007f8ab912c668
  0x00007f8ab912c586: mov    %rsp,%r13
  0x00007f8ab912c589: mov    (%rsp),%rax
  0x00007f8ab912c58d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c591: pushfq 
  0x00007f8ab912c592: sub    $0x8,%rsp
  0x00007f8ab912c596: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912c59b: sub    $0x80,%rsp
  0x00007f8ab912c5a2: mov    %rax,0x78(%rsp)
  0x00007f8ab912c5a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab912c5ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab912c5b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab912c5b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab912c5bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab912c5c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab912c5c5: mov    %r8,0x38(%rsp)
  0x00007f8ab912c5ca: mov    %r9,0x30(%rsp)
  0x00007f8ab912c5cf: mov    %r10,0x28(%rsp)
  0x00007f8ab912c5d4: mov    %r11,0x20(%rsp)
  0x00007f8ab912c5d9: mov    %r12,0x18(%rsp)
  0x00007f8ab912c5de: mov    %r13,0x10(%rsp)
  0x00007f8ab912c5e3: mov    %r14,0x8(%rsp)
  0x00007f8ab912c5e8: mov    %r15,(%rsp)
  0x00007f8ab912c5ec: sub    $0x200,%rsp
  0x00007f8ab912c5f3: fxsave64 (%rsp)
  0x00007f8ab912c5f8: mov    %rbx,%rdi
  0x00007f8ab912c5fb: mov    %rax,%rsi
  0x00007f8ab912c5fe: callq  0x00007f8acef8bbca
  0x00007f8ab912c603: fxrstor64 (%rsp)
  0x00007f8ab912c608: add    $0x200,%rsp
  0x00007f8ab912c60f: mov    (%rsp),%r15
  0x00007f8ab912c613: mov    0x8(%rsp),%r14
  0x00007f8ab912c618: mov    0x10(%rsp),%r13
  0x00007f8ab912c61d: mov    0x18(%rsp),%r12
  0x00007f8ab912c622: mov    0x20(%rsp),%r11
  0x00007f8ab912c627: mov    0x28(%rsp),%r10
  0x00007f8ab912c62c: mov    0x30(%rsp),%r9
  0x00007f8ab912c631: mov    0x38(%rsp),%r8
  0x00007f8ab912c636: mov    0x40(%rsp),%rdi
  0x00007f8ab912c63b: mov    0x48(%rsp),%rsi
  0x00007f8ab912c640: mov    0x50(%rsp),%rbp
  0x00007f8ab912c645: mov    0x60(%rsp),%rbx
  0x00007f8ab912c64a: mov    0x68(%rsp),%rdx
  0x00007f8ab912c64f: mov    0x70(%rsp),%rcx
  0x00007f8ab912c654: mov    0x78(%rsp),%rax
  0x00007f8ab912c659: add    $0x80,%rsp
  0x00007f8ab912c660: add    $0x8,%rsp
  0x00007f8ab912c664: popfq  
  0x00007f8ab912c665: mov    %r13,%rsp
  0x00007f8ab912c668: pop    %rax
  0x00007f8ab912c669: mov    %rsp,%r13
  0x00007f8ab912c66c: sub    $0x20,%rsp
  0x00007f8ab912c670: mov    %rax,(%rsp)
  0x00007f8ab912c674: mov    %rsi,0x18(%rsp)
  0x00007f8ab912c679: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912c683: mov    %rax,0x10(%rsp)
  0x00007f8ab912c688: mov    %rdx,0x8(%rsp)
  0x00007f8ab912c68d: mov    0x40(%rbx),%rcx
  0x00007f8ab912c691: jmpq   *%rcx

AHE@0x00007f8ac80d79c0: 0xbba00000 i2c: 0x00007f8ab912c760 c2i: 0x00007f8ab912c87b c2iUV: 0x00007f8ab912c84e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)S (555 bytes generated)
c2i argument handler starts at 0x7f8ab912c87b
  0x00007f8ab912c760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912c764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912c76e: cmp    %r11,%rax
  0x00007f8ab912c771: jbe    0x00007f8ab912c78a
  0x00007f8ab912c777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912c781: cmp    %r11,%rax
  0x00007f8ab912c784: jb     0x00007f8ab912c827
  0x00007f8ab912c78a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912c794: cmp    %r11,%rax
  0x00007f8ab912c797: jbe    0x00007f8ab912c7b0
  0x00007f8ab912c79d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912c7a7: cmp    %r11,%rax
  0x00007f8ab912c7aa: jb     0x00007f8ab912c827
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912c7b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912c7b5: sub    $0x80,%rsp
  0x00007f8ab912c7bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912c7c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912c7c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912c7cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912c7d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912c7d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912c7da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912c7df: mov    %r8,0x38(%rsp)
  0x00007f8ab912c7e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912c7e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912c7ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912c7f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912c7f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912c7fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912c802: mov    %r15,(%rsp)
  0x00007f8ab912c806: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912c810: movabs $0x7f8ab912c7b0,%rsi
  0x00007f8ab912c81a: mov    %rsp,%rdx
  0x00007f8ab912c81d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c821: callq  0x00007f8aceddb9fa
  0x00007f8ab912c826: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912c827: mov    %rsp,%r11
  0x00007f8ab912c82a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c82e: push   %rax
  0x00007f8ab912c82f: mov    %r11,%rax
  0x00007f8ab912c832: mov    0x50(%rbx),%r11
  0x00007f8ab912c836: mov    0x18(%rax),%rsi
  0x00007f8ab912c83a: mov    0x10(%rax),%rdx
  0x00007f8ab912c83e: mov    0x8(%rax),%ecx
  0x00007f8ab912c841: mov    %rbx,0x258(%r15)
  0x00007f8ab912c848: mov    %rbx,%rax
  0x00007f8ab912c84b: jmpq   *%r11
  0x00007f8ab912c84e: mov    0x8(%rsi),%ebx
  0x00007f8ab912c851: shl    $0x3,%rbx
  0x00007f8ab912c855: cmp    0x10(%rax),%rbx
  0x00007f8ab912c859: mov    0x8(%rax),%rbx
  0x00007f8ab912c85d: je     0x00007f8ab912c868
  0x00007f8ab912c863: jmpq   0x00007f8ab9105c40
  0x00007f8ab912c868: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912c870: je     0x00007f8ab912c96b
  0x00007f8ab912c876: jmpq   0x00007f8ab9105c40
  0x00007f8ab912c87b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912c883: je     0x00007f8ab912c96b
  0x00007f8ab912c889: mov    %rsp,%r13
  0x00007f8ab912c88c: mov    (%rsp),%rax
  0x00007f8ab912c890: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912c894: pushfq 
  0x00007f8ab912c895: sub    $0x8,%rsp
  0x00007f8ab912c899: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912c89e: sub    $0x80,%rsp
  0x00007f8ab912c8a5: mov    %rax,0x78(%rsp)
  0x00007f8ab912c8aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912c8af: mov    %rdx,0x68(%rsp)
  0x00007f8ab912c8b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912c8b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912c8be: mov    %rsi,0x48(%rsp)
  0x00007f8ab912c8c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912c8c8: mov    %r8,0x38(%rsp)
  0x00007f8ab912c8cd: mov    %r9,0x30(%rsp)
  0x00007f8ab912c8d2: mov    %r10,0x28(%rsp)
  0x00007f8ab912c8d7: mov    %r11,0x20(%rsp)
  0x00007f8ab912c8dc: mov    %r12,0x18(%rsp)
  0x00007f8ab912c8e1: mov    %r13,0x10(%rsp)
  0x00007f8ab912c8e6: mov    %r14,0x8(%rsp)
  0x00007f8ab912c8eb: mov    %r15,(%rsp)
  0x00007f8ab912c8ef: sub    $0x200,%rsp
  0x00007f8ab912c8f6: fxsave64 (%rsp)
  0x00007f8ab912c8fb: mov    %rbx,%rdi
  0x00007f8ab912c8fe: mov    %rax,%rsi
  0x00007f8ab912c901: callq  0x00007f8acef8bbca
  0x00007f8ab912c906: fxrstor64 (%rsp)
  0x00007f8ab912c90b: add    $0x200,%rsp
  0x00007f8ab912c912: mov    (%rsp),%r15
  0x00007f8ab912c916: mov    0x8(%rsp),%r14
  0x00007f8ab912c91b: mov    0x10(%rsp),%r13
  0x00007f8ab912c920: mov    0x18(%rsp),%r12
  0x00007f8ab912c925: mov    0x20(%rsp),%r11
  0x00007f8ab912c92a: mov    0x28(%rsp),%r10
  0x00007f8ab912c92f: mov    0x30(%rsp),%r9
  0x00007f8ab912c934: mov    0x38(%rsp),%r8
  0x00007f8ab912c939: mov    0x40(%rsp),%rdi
  0x00007f8ab912c93e: mov    0x48(%rsp),%rsi
  0x00007f8ab912c943: mov    0x50(%rsp),%rbp
  0x00007f8ab912c948: mov    0x60(%rsp),%rbx
  0x00007f8ab912c94d: mov    0x68(%rsp),%rdx
  0x00007f8ab912c952: mov    0x70(%rsp),%rcx
  0x00007f8ab912c957: mov    0x78(%rsp),%rax
  0x00007f8ab912c95c: add    $0x80,%rsp
  0x00007f8ab912c963: add    $0x8,%rsp
  0x00007f8ab912c967: popfq  
  0x00007f8ab912c968: mov    %r13,%rsp
  0x00007f8ab912c96b: pop    %rax
  0x00007f8ab912c96c: mov    %rsp,%r13
  0x00007f8ab912c96f: sub    $0x20,%rsp
  0x00007f8ab912c973: mov    %rax,(%rsp)
  0x00007f8ab912c977: mov    %rsi,0x18(%rsp)
  0x00007f8ab912c97c: mov    %rdx,0x10(%rsp)
  0x00007f8ab912c981: mov    %ecx,0x8(%rsp)
  0x00007f8ab912c985: mov    0x40(%rbx),%rcx
  0x00007f8ab912c989: jmpq   *%rcx

AHE@0x00007f8ac80d7a08: 0xbbbea000 i2c: 0x00007f8ab912ca60 c2i: 0x00007f8ab912cb80 c2iUV: 0x00007f8ab912cb53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JB)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab912cb80
  0x00007f8ab912ca60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912ca64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912ca6e: cmp    %r11,%rax
  0x00007f8ab912ca71: jbe    0x00007f8ab912ca8a
  0x00007f8ab912ca77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912ca81: cmp    %r11,%rax
  0x00007f8ab912ca84: jb     0x00007f8ab912cb27
  0x00007f8ab912ca8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912ca94: cmp    %r11,%rax
  0x00007f8ab912ca97: jbe    0x00007f8ab912cab0
  0x00007f8ab912ca9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912caa7: cmp    %r11,%rax
  0x00007f8ab912caaa: jb     0x00007f8ab912cb27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912cab0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912cab5: sub    $0x80,%rsp
  0x00007f8ab912cabc: mov    %rax,0x78(%rsp)
  0x00007f8ab912cac1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912cac6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912cacb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912cad0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912cad5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912cada: mov    %rdi,0x40(%rsp)
  0x00007f8ab912cadf: mov    %r8,0x38(%rsp)
  0x00007f8ab912cae4: mov    %r9,0x30(%rsp)
  0x00007f8ab912cae9: mov    %r10,0x28(%rsp)
  0x00007f8ab912caee: mov    %r11,0x20(%rsp)
  0x00007f8ab912caf3: mov    %r12,0x18(%rsp)
  0x00007f8ab912caf8: mov    %r13,0x10(%rsp)
  0x00007f8ab912cafd: mov    %r14,0x8(%rsp)
  0x00007f8ab912cb02: mov    %r15,(%rsp)
  0x00007f8ab912cb06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912cb10: movabs $0x7f8ab912cab0,%rsi
  0x00007f8ab912cb1a: mov    %rsp,%rdx
  0x00007f8ab912cb1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912cb21: callq  0x00007f8aceddb9fa
  0x00007f8ab912cb26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912cb27: mov    %rsp,%r11
  0x00007f8ab912cb2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912cb2e: push   %rax
  0x00007f8ab912cb2f: mov    %r11,%rax
  0x00007f8ab912cb32: mov    0x50(%rbx),%r11
  0x00007f8ab912cb36: mov    0x28(%rax),%rsi
  0x00007f8ab912cb3a: mov    0x20(%rax),%rdx
  0x00007f8ab912cb3e: mov    0x10(%rax),%rcx
  0x00007f8ab912cb42: mov    0x8(%rax),%r8d
  0x00007f8ab912cb46: mov    %rbx,0x258(%r15)
  0x00007f8ab912cb4d: mov    %rbx,%rax
  0x00007f8ab912cb50: jmpq   *%r11
  0x00007f8ab912cb53: mov    0x8(%rsi),%ebx
  0x00007f8ab912cb56: shl    $0x3,%rbx
  0x00007f8ab912cb5a: cmp    0x10(%rax),%rbx
  0x00007f8ab912cb5e: mov    0x8(%rax),%rbx
  0x00007f8ab912cb62: je     0x00007f8ab912cb6d
  0x00007f8ab912cb68: jmpq   0x00007f8ab9105c40
  0x00007f8ab912cb6d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912cb75: je     0x00007f8ab912cc70
  0x00007f8ab912cb7b: jmpq   0x00007f8ab9105c40
  0x00007f8ab912cb80: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912cb88: je     0x00007f8ab912cc70
  0x00007f8ab912cb8e: mov    %rsp,%r13
  0x00007f8ab912cb91: mov    (%rsp),%rax
  0x00007f8ab912cb95: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912cb99: pushfq 
  0x00007f8ab912cb9a: sub    $0x8,%rsp
  0x00007f8ab912cb9e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912cba3: sub    $0x80,%rsp
  0x00007f8ab912cbaa: mov    %rax,0x78(%rsp)
  0x00007f8ab912cbaf: mov    %rcx,0x70(%rsp)
  0x00007f8ab912cbb4: mov    %rdx,0x68(%rsp)
  0x00007f8ab912cbb9: mov    %rbx,0x60(%rsp)
  0x00007f8ab912cbbe: mov    %rbp,0x50(%rsp)
  0x00007f8ab912cbc3: mov    %rsi,0x48(%rsp)
  0x00007f8ab912cbc8: mov    %rdi,0x40(%rsp)
  0x00007f8ab912cbcd: mov    %r8,0x38(%rsp)
  0x00007f8ab912cbd2: mov    %r9,0x30(%rsp)
  0x00007f8ab912cbd7: mov    %r10,0x28(%rsp)
  0x00007f8ab912cbdc: mov    %r11,0x20(%rsp)
  0x00007f8ab912cbe1: mov    %r12,0x18(%rsp)
  0x00007f8ab912cbe6: mov    %r13,0x10(%rsp)
  0x00007f8ab912cbeb: mov    %r14,0x8(%rsp)
  0x00007f8ab912cbf0: mov    %r15,(%rsp)
  0x00007f8ab912cbf4: sub    $0x200,%rsp
  0x00007f8ab912cbfb: fxsave64 (%rsp)
  0x00007f8ab912cc00: mov    %rbx,%rdi
  0x00007f8ab912cc03: mov    %rax,%rsi
  0x00007f8ab912cc06: callq  0x00007f8acef8bbca
  0x00007f8ab912cc0b: fxrstor64 (%rsp)
  0x00007f8ab912cc10: add    $0x200,%rsp
  0x00007f8ab912cc17: mov    (%rsp),%r15
  0x00007f8ab912cc1b: mov    0x8(%rsp),%r14
  0x00007f8ab912cc20: mov    0x10(%rsp),%r13
  0x00007f8ab912cc25: mov    0x18(%rsp),%r12
  0x00007f8ab912cc2a: mov    0x20(%rsp),%r11
  0x00007f8ab912cc2f: mov    0x28(%rsp),%r10
  0x00007f8ab912cc34: mov    0x30(%rsp),%r9
  0x00007f8ab912cc39: mov    0x38(%rsp),%r8
  0x00007f8ab912cc3e: mov    0x40(%rsp),%rdi
  0x00007f8ab912cc43: mov    0x48(%rsp),%rsi
  0x00007f8ab912cc48: mov    0x50(%rsp),%rbp
  0x00007f8ab912cc4d: mov    0x60(%rsp),%rbx
  0x00007f8ab912cc52: mov    0x68(%rsp),%rdx
  0x00007f8ab912cc57: mov    0x70(%rsp),%rcx
  0x00007f8ab912cc5c: mov    0x78(%rsp),%rax
  0x00007f8ab912cc61: add    $0x80,%rsp
  0x00007f8ab912cc68: add    $0x8,%rsp
  0x00007f8ab912cc6c: popfq  
  0x00007f8ab912cc6d: mov    %r13,%rsp
  0x00007f8ab912cc70: pop    %rax
  0x00007f8ab912cc71: mov    %rsp,%r13
  0x00007f8ab912cc74: sub    $0x30,%rsp
  0x00007f8ab912cc78: mov    %rax,(%rsp)
  0x00007f8ab912cc7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab912cc81: mov    %rdx,0x20(%rsp)
  0x00007f8ab912cc86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912cc90: mov    %rax,0x18(%rsp)
  0x00007f8ab912cc95: mov    %rcx,0x10(%rsp)
  0x00007f8ab912cc9a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912cc9f: mov    0x40(%rbx),%rcx
  0x00007f8ab912cca3: jmpq   *%rcx

AHE@0x00007f8ac80d7a50: 0xbbaa0000 i2c: 0x00007f8ab912cd60 c2i: 0x00007f8ab912ce7f c2iUV: 0x00007f8ab912ce52
i2c argument handler #0 for: receiver (Ljava/lang/Object;IB)V (564 bytes generated)
c2i argument handler starts at 0x7f8ab912ce7f
  0x00007f8ab912cd60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912cd64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912cd6e: cmp    %r11,%rax
  0x00007f8ab912cd71: jbe    0x00007f8ab912cd8a
  0x00007f8ab912cd77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912cd81: cmp    %r11,%rax
  0x00007f8ab912cd84: jb     0x00007f8ab912ce27
  0x00007f8ab912cd8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912cd94: cmp    %r11,%rax
  0x00007f8ab912cd97: jbe    0x00007f8ab912cdb0
  0x00007f8ab912cd9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912cda7: cmp    %r11,%rax
  0x00007f8ab912cdaa: jb     0x00007f8ab912ce27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912cdb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912cdb5: sub    $0x80,%rsp
  0x00007f8ab912cdbc: mov    %rax,0x78(%rsp)
  0x00007f8ab912cdc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912cdc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912cdcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912cdd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912cdd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912cdda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912cddf: mov    %r8,0x38(%rsp)
  0x00007f8ab912cde4: mov    %r9,0x30(%rsp)
  0x00007f8ab912cde9: mov    %r10,0x28(%rsp)
  0x00007f8ab912cdee: mov    %r11,0x20(%rsp)
  0x00007f8ab912cdf3: mov    %r12,0x18(%rsp)
  0x00007f8ab912cdf8: mov    %r13,0x10(%rsp)
  0x00007f8ab912cdfd: mov    %r14,0x8(%rsp)
  0x00007f8ab912ce02: mov    %r15,(%rsp)
  0x00007f8ab912ce06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912ce10: movabs $0x7f8ab912cdb0,%rsi
  0x00007f8ab912ce1a: mov    %rsp,%rdx
  0x00007f8ab912ce1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ce21: callq  0x00007f8aceddb9fa
  0x00007f8ab912ce26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912ce27: mov    %rsp,%r11
  0x00007f8ab912ce2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ce2e: push   %rax
  0x00007f8ab912ce2f: mov    %r11,%rax
  0x00007f8ab912ce32: mov    0x50(%rbx),%r11
  0x00007f8ab912ce36: mov    0x20(%rax),%rsi
  0x00007f8ab912ce3a: mov    0x18(%rax),%rdx
  0x00007f8ab912ce3e: mov    0x10(%rax),%ecx
  0x00007f8ab912ce41: mov    0x8(%rax),%r8d
  0x00007f8ab912ce45: mov    %rbx,0x258(%r15)
  0x00007f8ab912ce4c: mov    %rbx,%rax
  0x00007f8ab912ce4f: jmpq   *%r11
  0x00007f8ab912ce52: mov    0x8(%rsi),%ebx
  0x00007f8ab912ce55: shl    $0x3,%rbx
  0x00007f8ab912ce59: cmp    0x10(%rax),%rbx
  0x00007f8ab912ce5d: mov    0x8(%rax),%rbx
  0x00007f8ab912ce61: je     0x00007f8ab912ce6c
  0x00007f8ab912ce67: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ce6c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ce74: je     0x00007f8ab912cf6f
  0x00007f8ab912ce7a: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ce7f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ce87: je     0x00007f8ab912cf6f
  0x00007f8ab912ce8d: mov    %rsp,%r13
  0x00007f8ab912ce90: mov    (%rsp),%rax
  0x00007f8ab912ce94: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ce98: pushfq 
  0x00007f8ab912ce99: sub    $0x8,%rsp
  0x00007f8ab912ce9d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912cea2: sub    $0x80,%rsp
  0x00007f8ab912cea9: mov    %rax,0x78(%rsp)
  0x00007f8ab912ceae: mov    %rcx,0x70(%rsp)
  0x00007f8ab912ceb3: mov    %rdx,0x68(%rsp)
  0x00007f8ab912ceb8: mov    %rbx,0x60(%rsp)
  0x00007f8ab912cebd: mov    %rbp,0x50(%rsp)
  0x00007f8ab912cec2: mov    %rsi,0x48(%rsp)
  0x00007f8ab912cec7: mov    %rdi,0x40(%rsp)
  0x00007f8ab912cecc: mov    %r8,0x38(%rsp)
  0x00007f8ab912ced1: mov    %r9,0x30(%rsp)
  0x00007f8ab912ced6: mov    %r10,0x28(%rsp)
  0x00007f8ab912cedb: mov    %r11,0x20(%rsp)
  0x00007f8ab912cee0: mov    %r12,0x18(%rsp)
  0x00007f8ab912cee5: mov    %r13,0x10(%rsp)
  0x00007f8ab912ceea: mov    %r14,0x8(%rsp)
  0x00007f8ab912ceef: mov    %r15,(%rsp)
  0x00007f8ab912cef3: sub    $0x200,%rsp
  0x00007f8ab912cefa: fxsave64 (%rsp)
  0x00007f8ab912ceff: mov    %rbx,%rdi
  0x00007f8ab912cf02: mov    %rax,%rsi
  0x00007f8ab912cf05: callq  0x00007f8acef8bbca
  0x00007f8ab912cf0a: fxrstor64 (%rsp)
  0x00007f8ab912cf0f: add    $0x200,%rsp
  0x00007f8ab912cf16: mov    (%rsp),%r15
  0x00007f8ab912cf1a: mov    0x8(%rsp),%r14
  0x00007f8ab912cf1f: mov    0x10(%rsp),%r13
  0x00007f8ab912cf24: mov    0x18(%rsp),%r12
  0x00007f8ab912cf29: mov    0x20(%rsp),%r11
  0x00007f8ab912cf2e: mov    0x28(%rsp),%r10
  0x00007f8ab912cf33: mov    0x30(%rsp),%r9
  0x00007f8ab912cf38: mov    0x38(%rsp),%r8
  0x00007f8ab912cf3d: mov    0x40(%rsp),%rdi
  0x00007f8ab912cf42: mov    0x48(%rsp),%rsi
  0x00007f8ab912cf47: mov    0x50(%rsp),%rbp
  0x00007f8ab912cf4c: mov    0x60(%rsp),%rbx
  0x00007f8ab912cf51: mov    0x68(%rsp),%rdx
  0x00007f8ab912cf56: mov    0x70(%rsp),%rcx
  0x00007f8ab912cf5b: mov    0x78(%rsp),%rax
  0x00007f8ab912cf60: add    $0x80,%rsp
  0x00007f8ab912cf67: add    $0x8,%rsp
  0x00007f8ab912cf6b: popfq  
  0x00007f8ab912cf6c: mov    %r13,%rsp
  0x00007f8ab912cf6f: pop    %rax
  0x00007f8ab912cf70: mov    %rsp,%r13
  0x00007f8ab912cf73: sub    $0x30,%rsp
  0x00007f8ab912cf77: mov    %rax,(%rsp)
  0x00007f8ab912cf7b: mov    %rsi,0x20(%rsp)
  0x00007f8ab912cf80: mov    %rdx,0x18(%rsp)
  0x00007f8ab912cf85: mov    %ecx,0x10(%rsp)
  0x00007f8ab912cf89: mov    %r8d,0x8(%rsp)
  0x00007f8ab912cf8e: mov    0x40(%rbx),%rcx
  0x00007f8ab912cf92: jmpq   *%rcx

AHE@0x00007f8ac80d7a98: 0xbbea0000 i2c: 0x00007f8ab912d060 c2i: 0x00007f8ab912d17b c2iUV: 0x00007f8ab912d14e
i2c argument handler #0 for: receiver (JB)V (570 bytes generated)
c2i argument handler starts at 0x7f8ab912d17b
  0x00007f8ab912d060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912d064: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912d06e: cmp    %r11,%rax
  0x00007f8ab912d071: jbe    0x00007f8ab912d08a
  0x00007f8ab912d077: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912d081: cmp    %r11,%rax
  0x00007f8ab912d084: jb     0x00007f8ab912d127
  0x00007f8ab912d08a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912d094: cmp    %r11,%rax
  0x00007f8ab912d097: jbe    0x00007f8ab912d0b0
  0x00007f8ab912d09d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912d0a7: cmp    %r11,%rax
  0x00007f8ab912d0aa: jb     0x00007f8ab912d127
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912d0b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912d0b5: sub    $0x80,%rsp
  0x00007f8ab912d0bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912d0c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912d0c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912d0cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912d0d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912d0d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912d0da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912d0df: mov    %r8,0x38(%rsp)
  0x00007f8ab912d0e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912d0e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912d0ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912d0f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912d0f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912d0fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912d102: mov    %r15,(%rsp)
  0x00007f8ab912d106: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912d110: movabs $0x7f8ab912d0b0,%rsi
  0x00007f8ab912d11a: mov    %rsp,%rdx
  0x00007f8ab912d11d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d121: callq  0x00007f8aceddb9fa
  0x00007f8ab912d126: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912d127: mov    %rsp,%r11
  0x00007f8ab912d12a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d12e: push   %rax
  0x00007f8ab912d12f: mov    %r11,%rax
  0x00007f8ab912d132: mov    0x50(%rbx),%r11
  0x00007f8ab912d136: mov    0x20(%rax),%rsi
  0x00007f8ab912d13a: mov    0x10(%rax),%rdx
  0x00007f8ab912d13e: mov    0x8(%rax),%ecx
  0x00007f8ab912d141: mov    %rbx,0x258(%r15)
  0x00007f8ab912d148: mov    %rbx,%rax
  0x00007f8ab912d14b: jmpq   *%r11
  0x00007f8ab912d14e: mov    0x8(%rsi),%ebx
  0x00007f8ab912d151: shl    $0x3,%rbx
  0x00007f8ab912d155: cmp    0x10(%rax),%rbx
  0x00007f8ab912d159: mov    0x8(%rax),%rbx
  0x00007f8ab912d15d: je     0x00007f8ab912d168
  0x00007f8ab912d163: jmpq   0x00007f8ab9105c40
  0x00007f8ab912d168: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912d170: je     0x00007f8ab912d26b
  0x00007f8ab912d176: jmpq   0x00007f8ab9105c40
  0x00007f8ab912d17b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912d183: je     0x00007f8ab912d26b
  0x00007f8ab912d189: mov    %rsp,%r13
  0x00007f8ab912d18c: mov    (%rsp),%rax
  0x00007f8ab912d190: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d194: pushfq 
  0x00007f8ab912d195: sub    $0x8,%rsp
  0x00007f8ab912d199: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912d19e: sub    $0x80,%rsp
  0x00007f8ab912d1a5: mov    %rax,0x78(%rsp)
  0x00007f8ab912d1aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912d1af: mov    %rdx,0x68(%rsp)
  0x00007f8ab912d1b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912d1b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912d1be: mov    %rsi,0x48(%rsp)
  0x00007f8ab912d1c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912d1c8: mov    %r8,0x38(%rsp)
  0x00007f8ab912d1cd: mov    %r9,0x30(%rsp)
  0x00007f8ab912d1d2: mov    %r10,0x28(%rsp)
  0x00007f8ab912d1d7: mov    %r11,0x20(%rsp)
  0x00007f8ab912d1dc: mov    %r12,0x18(%rsp)
  0x00007f8ab912d1e1: mov    %r13,0x10(%rsp)
  0x00007f8ab912d1e6: mov    %r14,0x8(%rsp)
  0x00007f8ab912d1eb: mov    %r15,(%rsp)
  0x00007f8ab912d1ef: sub    $0x200,%rsp
  0x00007f8ab912d1f6: fxsave64 (%rsp)
  0x00007f8ab912d1fb: mov    %rbx,%rdi
  0x00007f8ab912d1fe: mov    %rax,%rsi
  0x00007f8ab912d201: callq  0x00007f8acef8bbca
  0x00007f8ab912d206: fxrstor64 (%rsp)
  0x00007f8ab912d20b: add    $0x200,%rsp
  0x00007f8ab912d212: mov    (%rsp),%r15
  0x00007f8ab912d216: mov    0x8(%rsp),%r14
  0x00007f8ab912d21b: mov    0x10(%rsp),%r13
  0x00007f8ab912d220: mov    0x18(%rsp),%r12
  0x00007f8ab912d225: mov    0x20(%rsp),%r11
  0x00007f8ab912d22a: mov    0x28(%rsp),%r10
  0x00007f8ab912d22f: mov    0x30(%rsp),%r9
  0x00007f8ab912d234: mov    0x38(%rsp),%r8
  0x00007f8ab912d239: mov    0x40(%rsp),%rdi
  0x00007f8ab912d23e: mov    0x48(%rsp),%rsi
  0x00007f8ab912d243: mov    0x50(%rsp),%rbp
  0x00007f8ab912d248: mov    0x60(%rsp),%rbx
  0x00007f8ab912d24d: mov    0x68(%rsp),%rdx
  0x00007f8ab912d252: mov    0x70(%rsp),%rcx
  0x00007f8ab912d257: mov    0x78(%rsp),%rax
  0x00007f8ab912d25c: add    $0x80,%rsp
  0x00007f8ab912d263: add    $0x8,%rsp
  0x00007f8ab912d267: popfq  
  0x00007f8ab912d268: mov    %r13,%rsp
  0x00007f8ab912d26b: pop    %rax
  0x00007f8ab912d26c: mov    %rsp,%r13
  0x00007f8ab912d26f: sub    $0x30,%rsp
  0x00007f8ab912d273: mov    %rax,(%rsp)
  0x00007f8ab912d277: mov    %rsi,0x20(%rsp)
  0x00007f8ab912d27c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912d286: mov    %rax,0x18(%rsp)
  0x00007f8ab912d28b: mov    %rdx,0x10(%rsp)
  0x00007f8ab912d290: mov    %ecx,0x8(%rsp)
  0x00007f8ab912d294: mov    0x40(%rbx),%rcx
  0x00007f8ab912d298: jmpq   *%rcx

AHE@0x00007f8ac80d7ae0: 0xbba00000 i2c: 0x00007f8ab912d360 c2i: 0x00007f8ab912d47b c2iUV: 0x00007f8ab912d44e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)B (555 bytes generated)
c2i argument handler starts at 0x7f8ab912d47b
  0x00007f8ab912d360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912d364: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912d36e: cmp    %r11,%rax
  0x00007f8ab912d371: jbe    0x00007f8ab912d38a
  0x00007f8ab912d377: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912d381: cmp    %r11,%rax
  0x00007f8ab912d384: jb     0x00007f8ab912d427
  0x00007f8ab912d38a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912d394: cmp    %r11,%rax
  0x00007f8ab912d397: jbe    0x00007f8ab912d3b0
  0x00007f8ab912d39d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912d3a7: cmp    %r11,%rax
  0x00007f8ab912d3aa: jb     0x00007f8ab912d427
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912d3b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912d3b5: sub    $0x80,%rsp
  0x00007f8ab912d3bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912d3c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912d3c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912d3cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912d3d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912d3d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912d3da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912d3df: mov    %r8,0x38(%rsp)
  0x00007f8ab912d3e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912d3e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912d3ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912d3f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912d3f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912d3fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912d402: mov    %r15,(%rsp)
  0x00007f8ab912d406: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912d410: movabs $0x7f8ab912d3b0,%rsi
  0x00007f8ab912d41a: mov    %rsp,%rdx
  0x00007f8ab912d41d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d421: callq  0x00007f8aceddb9fa
  0x00007f8ab912d426: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912d427: mov    %rsp,%r11
  0x00007f8ab912d42a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d42e: push   %rax
  0x00007f8ab912d42f: mov    %r11,%rax
  0x00007f8ab912d432: mov    0x50(%rbx),%r11
  0x00007f8ab912d436: mov    0x18(%rax),%rsi
  0x00007f8ab912d43a: mov    0x10(%rax),%rdx
  0x00007f8ab912d43e: mov    0x8(%rax),%ecx
  0x00007f8ab912d441: mov    %rbx,0x258(%r15)
  0x00007f8ab912d448: mov    %rbx,%rax
  0x00007f8ab912d44b: jmpq   *%r11
  0x00007f8ab912d44e: mov    0x8(%rsi),%ebx
  0x00007f8ab912d451: shl    $0x3,%rbx
  0x00007f8ab912d455: cmp    0x10(%rax),%rbx
  0x00007f8ab912d459: mov    0x8(%rax),%rbx
  0x00007f8ab912d45d: je     0x00007f8ab912d468
  0x00007f8ab912d463: jmpq   0x00007f8ab9105c40
  0x00007f8ab912d468: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912d470: je     0x00007f8ab912d56b
  0x00007f8ab912d476: jmpq   0x00007f8ab9105c40
  0x00007f8ab912d47b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912d483: je     0x00007f8ab912d56b
  0x00007f8ab912d489: mov    %rsp,%r13
  0x00007f8ab912d48c: mov    (%rsp),%rax
  0x00007f8ab912d490: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d494: pushfq 
  0x00007f8ab912d495: sub    $0x8,%rsp
  0x00007f8ab912d499: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912d49e: sub    $0x80,%rsp
  0x00007f8ab912d4a5: mov    %rax,0x78(%rsp)
  0x00007f8ab912d4aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912d4af: mov    %rdx,0x68(%rsp)
  0x00007f8ab912d4b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912d4b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912d4be: mov    %rsi,0x48(%rsp)
  0x00007f8ab912d4c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912d4c8: mov    %r8,0x38(%rsp)
  0x00007f8ab912d4cd: mov    %r9,0x30(%rsp)
  0x00007f8ab912d4d2: mov    %r10,0x28(%rsp)
  0x00007f8ab912d4d7: mov    %r11,0x20(%rsp)
  0x00007f8ab912d4dc: mov    %r12,0x18(%rsp)
  0x00007f8ab912d4e1: mov    %r13,0x10(%rsp)
  0x00007f8ab912d4e6: mov    %r14,0x8(%rsp)
  0x00007f8ab912d4eb: mov    %r15,(%rsp)
  0x00007f8ab912d4ef: sub    $0x200,%rsp
  0x00007f8ab912d4f6: fxsave64 (%rsp)
  0x00007f8ab912d4fb: mov    %rbx,%rdi
  0x00007f8ab912d4fe: mov    %rax,%rsi
  0x00007f8ab912d501: callq  0x00007f8acef8bbca
  0x00007f8ab912d506: fxrstor64 (%rsp)
  0x00007f8ab912d50b: add    $0x200,%rsp
  0x00007f8ab912d512: mov    (%rsp),%r15
  0x00007f8ab912d516: mov    0x8(%rsp),%r14
  0x00007f8ab912d51b: mov    0x10(%rsp),%r13
  0x00007f8ab912d520: mov    0x18(%rsp),%r12
  0x00007f8ab912d525: mov    0x20(%rsp),%r11
  0x00007f8ab912d52a: mov    0x28(%rsp),%r10
  0x00007f8ab912d52f: mov    0x30(%rsp),%r9
  0x00007f8ab912d534: mov    0x38(%rsp),%r8
  0x00007f8ab912d539: mov    0x40(%rsp),%rdi
  0x00007f8ab912d53e: mov    0x48(%rsp),%rsi
  0x00007f8ab912d543: mov    0x50(%rsp),%rbp
  0x00007f8ab912d548: mov    0x60(%rsp),%rbx
  0x00007f8ab912d54d: mov    0x68(%rsp),%rdx
  0x00007f8ab912d552: mov    0x70(%rsp),%rcx
  0x00007f8ab912d557: mov    0x78(%rsp),%rax
  0x00007f8ab912d55c: add    $0x80,%rsp
  0x00007f8ab912d563: add    $0x8,%rsp
  0x00007f8ab912d567: popfq  
  0x00007f8ab912d568: mov    %r13,%rsp
  0x00007f8ab912d56b: pop    %rax
  0x00007f8ab912d56c: mov    %rsp,%r13
  0x00007f8ab912d56f: sub    $0x20,%rsp
  0x00007f8ab912d573: mov    %rax,(%rsp)
  0x00007f8ab912d577: mov    %rsi,0x18(%rsp)
  0x00007f8ab912d57c: mov    %rdx,0x10(%rsp)
  0x00007f8ab912d581: mov    %ecx,0x8(%rsp)
  0x00007f8ab912d585: mov    0x40(%rbx),%rcx
  0x00007f8ab912d589: jmpq   *%rcx

AHE@0x00007f8ac80d7b28: 0xbbbe0000 i2c: 0x00007f8ab912d660 c2i: 0x00007f8ab912d77c c2iUV: 0x00007f8ab912d74f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)B (572 bytes generated)
c2i argument handler starts at 0x7f8ab912d77c
  0x00007f8ab912d660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912d664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912d66e: cmp    %r11,%rax
  0x00007f8ab912d671: jbe    0x00007f8ab912d68a
  0x00007f8ab912d677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912d681: cmp    %r11,%rax
  0x00007f8ab912d684: jb     0x00007f8ab912d727
  0x00007f8ab912d68a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912d694: cmp    %r11,%rax
  0x00007f8ab912d697: jbe    0x00007f8ab912d6b0
  0x00007f8ab912d69d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912d6a7: cmp    %r11,%rax
  0x00007f8ab912d6aa: jb     0x00007f8ab912d727
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912d6b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912d6b5: sub    $0x80,%rsp
  0x00007f8ab912d6bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912d6c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912d6c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912d6cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912d6d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912d6d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912d6da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912d6df: mov    %r8,0x38(%rsp)
  0x00007f8ab912d6e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912d6e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912d6ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912d6f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912d6f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912d6fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912d702: mov    %r15,(%rsp)
  0x00007f8ab912d706: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912d710: movabs $0x7f8ab912d6b0,%rsi
  0x00007f8ab912d71a: mov    %rsp,%rdx
  0x00007f8ab912d71d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d721: callq  0x00007f8aceddb9fa
  0x00007f8ab912d726: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912d727: mov    %rsp,%r11
  0x00007f8ab912d72a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d72e: push   %rax
  0x00007f8ab912d72f: mov    %r11,%rax
  0x00007f8ab912d732: mov    0x50(%rbx),%r11
  0x00007f8ab912d736: mov    0x20(%rax),%rsi
  0x00007f8ab912d73a: mov    0x18(%rax),%rdx
  0x00007f8ab912d73e: mov    0x8(%rax),%rcx
  0x00007f8ab912d742: mov    %rbx,0x258(%r15)
  0x00007f8ab912d749: mov    %rbx,%rax
  0x00007f8ab912d74c: jmpq   *%r11
  0x00007f8ab912d74f: mov    0x8(%rsi),%ebx
  0x00007f8ab912d752: shl    $0x3,%rbx
  0x00007f8ab912d756: cmp    0x10(%rax),%rbx
  0x00007f8ab912d75a: mov    0x8(%rax),%rbx
  0x00007f8ab912d75e: je     0x00007f8ab912d769
  0x00007f8ab912d764: jmpq   0x00007f8ab9105c40
  0x00007f8ab912d769: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912d771: je     0x00007f8ab912d86c
  0x00007f8ab912d777: jmpq   0x00007f8ab9105c40
  0x00007f8ab912d77c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912d784: je     0x00007f8ab912d86c
  0x00007f8ab912d78a: mov    %rsp,%r13
  0x00007f8ab912d78d: mov    (%rsp),%rax
  0x00007f8ab912d791: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912d795: pushfq 
  0x00007f8ab912d796: sub    $0x8,%rsp
  0x00007f8ab912d79a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912d79f: sub    $0x80,%rsp
  0x00007f8ab912d7a6: mov    %rax,0x78(%rsp)
  0x00007f8ab912d7ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab912d7b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab912d7b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab912d7ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab912d7bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab912d7c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab912d7c9: mov    %r8,0x38(%rsp)
  0x00007f8ab912d7ce: mov    %r9,0x30(%rsp)
  0x00007f8ab912d7d3: mov    %r10,0x28(%rsp)
  0x00007f8ab912d7d8: mov    %r11,0x20(%rsp)
  0x00007f8ab912d7dd: mov    %r12,0x18(%rsp)
  0x00007f8ab912d7e2: mov    %r13,0x10(%rsp)
  0x00007f8ab912d7e7: mov    %r14,0x8(%rsp)
  0x00007f8ab912d7ec: mov    %r15,(%rsp)
  0x00007f8ab912d7f0: sub    $0x200,%rsp
  0x00007f8ab912d7f7: fxsave64 (%rsp)
  0x00007f8ab912d7fc: mov    %rbx,%rdi
  0x00007f8ab912d7ff: mov    %rax,%rsi
  0x00007f8ab912d802: callq  0x00007f8acef8bbca
  0x00007f8ab912d807: fxrstor64 (%rsp)
  0x00007f8ab912d80c: add    $0x200,%rsp
  0x00007f8ab912d813: mov    (%rsp),%r15
  0x00007f8ab912d817: mov    0x8(%rsp),%r14
  0x00007f8ab912d81c: mov    0x10(%rsp),%r13
  0x00007f8ab912d821: mov    0x18(%rsp),%r12
  0x00007f8ab912d826: mov    0x20(%rsp),%r11
  0x00007f8ab912d82b: mov    0x28(%rsp),%r10
  0x00007f8ab912d830: mov    0x30(%rsp),%r9
  0x00007f8ab912d835: mov    0x38(%rsp),%r8
  0x00007f8ab912d83a: mov    0x40(%rsp),%rdi
  0x00007f8ab912d83f: mov    0x48(%rsp),%rsi
  0x00007f8ab912d844: mov    0x50(%rsp),%rbp
  0x00007f8ab912d849: mov    0x60(%rsp),%rbx
  0x00007f8ab912d84e: mov    0x68(%rsp),%rdx
  0x00007f8ab912d853: mov    0x70(%rsp),%rcx
  0x00007f8ab912d858: mov    0x78(%rsp),%rax
  0x00007f8ab912d85d: add    $0x80,%rsp
  0x00007f8ab912d864: add    $0x8,%rsp
  0x00007f8ab912d868: popfq  
  0x00007f8ab912d869: mov    %r13,%rsp
  0x00007f8ab912d86c: pop    %rax
  0x00007f8ab912d86d: mov    %rsp,%r13
  0x00007f8ab912d870: sub    $0x30,%rsp
  0x00007f8ab912d874: mov    %rax,(%rsp)
  0x00007f8ab912d878: mov    %rsi,0x20(%rsp)
  0x00007f8ab912d87d: mov    %rdx,0x18(%rsp)
  0x00007f8ab912d882: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912d88c: mov    %rax,0x10(%rsp)
  0x00007f8ab912d891: mov    %rcx,0x8(%rsp)
  0x00007f8ab912d896: mov    0x40(%rbx),%rcx
  0x00007f8ab912d89a: jmpq   *%rcx

AHE@0x00007f8ac80d7b70: 0xbbe00000 i2c: 0x00007f8ab912d960 c2i: 0x00007f8ab912da78 c2iUV: 0x00007f8ab912da4b
i2c argument handler #0 for: receiver (J)B (563 bytes generated)
c2i argument handler starts at 0x7f8ab912da78
  0x00007f8ab912d960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912d964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912d96e: cmp    %r11,%rax
  0x00007f8ab912d971: jbe    0x00007f8ab912d98a
  0x00007f8ab912d977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912d981: cmp    %r11,%rax
  0x00007f8ab912d984: jb     0x00007f8ab912da27
  0x00007f8ab912d98a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912d994: cmp    %r11,%rax
  0x00007f8ab912d997: jbe    0x00007f8ab912d9b0
  0x00007f8ab912d99d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912d9a7: cmp    %r11,%rax
  0x00007f8ab912d9aa: jb     0x00007f8ab912da27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912d9b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912d9b5: sub    $0x80,%rsp
  0x00007f8ab912d9bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912d9c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912d9c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912d9cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912d9d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912d9d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912d9da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912d9df: mov    %r8,0x38(%rsp)
  0x00007f8ab912d9e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912d9e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912d9ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912d9f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912d9f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912d9fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912da02: mov    %r15,(%rsp)
  0x00007f8ab912da06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912da10: movabs $0x7f8ab912d9b0,%rsi
  0x00007f8ab912da1a: mov    %rsp,%rdx
  0x00007f8ab912da1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912da21: callq  0x00007f8aceddb9fa
  0x00007f8ab912da26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912da27: mov    %rsp,%r11
  0x00007f8ab912da2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912da2e: push   %rax
  0x00007f8ab912da2f: mov    %r11,%rax
  0x00007f8ab912da32: mov    0x50(%rbx),%r11
  0x00007f8ab912da36: mov    0x18(%rax),%rsi
  0x00007f8ab912da3a: mov    0x8(%rax),%rdx
  0x00007f8ab912da3e: mov    %rbx,0x258(%r15)
  0x00007f8ab912da45: mov    %rbx,%rax
  0x00007f8ab912da48: jmpq   *%r11
  0x00007f8ab912da4b: mov    0x8(%rsi),%ebx
  0x00007f8ab912da4e: shl    $0x3,%rbx
  0x00007f8ab912da52: cmp    0x10(%rax),%rbx
  0x00007f8ab912da56: mov    0x8(%rax),%rbx
  0x00007f8ab912da5a: je     0x00007f8ab912da65
  0x00007f8ab912da60: jmpq   0x00007f8ab9105c40
  0x00007f8ab912da65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912da6d: je     0x00007f8ab912db68
  0x00007f8ab912da73: jmpq   0x00007f8ab9105c40
  0x00007f8ab912da78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912da80: je     0x00007f8ab912db68
  0x00007f8ab912da86: mov    %rsp,%r13
  0x00007f8ab912da89: mov    (%rsp),%rax
  0x00007f8ab912da8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912da91: pushfq 
  0x00007f8ab912da92: sub    $0x8,%rsp
  0x00007f8ab912da96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912da9b: sub    $0x80,%rsp
  0x00007f8ab912daa2: mov    %rax,0x78(%rsp)
  0x00007f8ab912daa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab912daac: mov    %rdx,0x68(%rsp)
  0x00007f8ab912dab1: mov    %rbx,0x60(%rsp)
  0x00007f8ab912dab6: mov    %rbp,0x50(%rsp)
  0x00007f8ab912dabb: mov    %rsi,0x48(%rsp)
  0x00007f8ab912dac0: mov    %rdi,0x40(%rsp)
  0x00007f8ab912dac5: mov    %r8,0x38(%rsp)
  0x00007f8ab912daca: mov    %r9,0x30(%rsp)
  0x00007f8ab912dacf: mov    %r10,0x28(%rsp)
  0x00007f8ab912dad4: mov    %r11,0x20(%rsp)
  0x00007f8ab912dad9: mov    %r12,0x18(%rsp)
  0x00007f8ab912dade: mov    %r13,0x10(%rsp)
  0x00007f8ab912dae3: mov    %r14,0x8(%rsp)
  0x00007f8ab912dae8: mov    %r15,(%rsp)
  0x00007f8ab912daec: sub    $0x200,%rsp
  0x00007f8ab912daf3: fxsave64 (%rsp)
  0x00007f8ab912daf8: mov    %rbx,%rdi
  0x00007f8ab912dafb: mov    %rax,%rsi
  0x00007f8ab912dafe: callq  0x00007f8acef8bbca
  0x00007f8ab912db03: fxrstor64 (%rsp)
  0x00007f8ab912db08: add    $0x200,%rsp
  0x00007f8ab912db0f: mov    (%rsp),%r15
  0x00007f8ab912db13: mov    0x8(%rsp),%r14
  0x00007f8ab912db18: mov    0x10(%rsp),%r13
  0x00007f8ab912db1d: mov    0x18(%rsp),%r12
  0x00007f8ab912db22: mov    0x20(%rsp),%r11
  0x00007f8ab912db27: mov    0x28(%rsp),%r10
  0x00007f8ab912db2c: mov    0x30(%rsp),%r9
  0x00007f8ab912db31: mov    0x38(%rsp),%r8
  0x00007f8ab912db36: mov    0x40(%rsp),%rdi
  0x00007f8ab912db3b: mov    0x48(%rsp),%rsi
  0x00007f8ab912db40: mov    0x50(%rsp),%rbp
  0x00007f8ab912db45: mov    0x60(%rsp),%rbx
  0x00007f8ab912db4a: mov    0x68(%rsp),%rdx
  0x00007f8ab912db4f: mov    0x70(%rsp),%rcx
  0x00007f8ab912db54: mov    0x78(%rsp),%rax
  0x00007f8ab912db59: add    $0x80,%rsp
  0x00007f8ab912db60: add    $0x8,%rsp
  0x00007f8ab912db64: popfq  
  0x00007f8ab912db65: mov    %r13,%rsp
  0x00007f8ab912db68: pop    %rax
  0x00007f8ab912db69: mov    %rsp,%r13
  0x00007f8ab912db6c: sub    $0x20,%rsp
  0x00007f8ab912db70: mov    %rax,(%rsp)
  0x00007f8ab912db74: mov    %rsi,0x18(%rsp)
  0x00007f8ab912db79: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912db83: mov    %rax,0x10(%rsp)
  0x00007f8ab912db88: mov    %rdx,0x8(%rsp)
  0x00007f8ab912db8d: mov    0x40(%rbx),%rcx
  0x00007f8ab912db91: jmpq   *%rcx

AHE@0x00007f8ac80d7bb8: 0xbbbea000 i2c: 0x00007f8ab912dc60 c2i: 0x00007f8ab912dd80 c2iUV: 0x00007f8ab912dd53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JZ)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab912dd80
  0x00007f8ab912dc60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912dc64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912dc6e: cmp    %r11,%rax
  0x00007f8ab912dc71: jbe    0x00007f8ab912dc8a
  0x00007f8ab912dc77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912dc81: cmp    %r11,%rax
  0x00007f8ab912dc84: jb     0x00007f8ab912dd27
  0x00007f8ab912dc8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912dc94: cmp    %r11,%rax
  0x00007f8ab912dc97: jbe    0x00007f8ab912dcb0
  0x00007f8ab912dc9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912dca7: cmp    %r11,%rax
  0x00007f8ab912dcaa: jb     0x00007f8ab912dd27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912dcb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912dcb5: sub    $0x80,%rsp
  0x00007f8ab912dcbc: mov    %rax,0x78(%rsp)
  0x00007f8ab912dcc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912dcc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912dccb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912dcd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912dcd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912dcda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912dcdf: mov    %r8,0x38(%rsp)
  0x00007f8ab912dce4: mov    %r9,0x30(%rsp)
  0x00007f8ab912dce9: mov    %r10,0x28(%rsp)
  0x00007f8ab912dcee: mov    %r11,0x20(%rsp)
  0x00007f8ab912dcf3: mov    %r12,0x18(%rsp)
  0x00007f8ab912dcf8: mov    %r13,0x10(%rsp)
  0x00007f8ab912dcfd: mov    %r14,0x8(%rsp)
  0x00007f8ab912dd02: mov    %r15,(%rsp)
  0x00007f8ab912dd06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912dd10: movabs $0x7f8ab912dcb0,%rsi
  0x00007f8ab912dd1a: mov    %rsp,%rdx
  0x00007f8ab912dd1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912dd21: callq  0x00007f8aceddb9fa
  0x00007f8ab912dd26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912dd27: mov    %rsp,%r11
  0x00007f8ab912dd2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912dd2e: push   %rax
  0x00007f8ab912dd2f: mov    %r11,%rax
  0x00007f8ab912dd32: mov    0x50(%rbx),%r11
  0x00007f8ab912dd36: mov    0x28(%rax),%rsi
  0x00007f8ab912dd3a: mov    0x20(%rax),%rdx
  0x00007f8ab912dd3e: mov    0x10(%rax),%rcx
  0x00007f8ab912dd42: mov    0x8(%rax),%r8d
  0x00007f8ab912dd46: mov    %rbx,0x258(%r15)
  0x00007f8ab912dd4d: mov    %rbx,%rax
  0x00007f8ab912dd50: jmpq   *%r11
  0x00007f8ab912dd53: mov    0x8(%rsi),%ebx
  0x00007f8ab912dd56: shl    $0x3,%rbx
  0x00007f8ab912dd5a: cmp    0x10(%rax),%rbx
  0x00007f8ab912dd5e: mov    0x8(%rax),%rbx
  0x00007f8ab912dd62: je     0x00007f8ab912dd6d
  0x00007f8ab912dd68: jmpq   0x00007f8ab9105c40
  0x00007f8ab912dd6d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912dd75: je     0x00007f8ab912de70
  0x00007f8ab912dd7b: jmpq   0x00007f8ab9105c40
  0x00007f8ab912dd80: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912dd88: je     0x00007f8ab912de70
  0x00007f8ab912dd8e: mov    %rsp,%r13
  0x00007f8ab912dd91: mov    (%rsp),%rax
  0x00007f8ab912dd95: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912dd99: pushfq 
  0x00007f8ab912dd9a: sub    $0x8,%rsp
  0x00007f8ab912dd9e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912dda3: sub    $0x80,%rsp
  0x00007f8ab912ddaa: mov    %rax,0x78(%rsp)
  0x00007f8ab912ddaf: mov    %rcx,0x70(%rsp)
  0x00007f8ab912ddb4: mov    %rdx,0x68(%rsp)
  0x00007f8ab912ddb9: mov    %rbx,0x60(%rsp)
  0x00007f8ab912ddbe: mov    %rbp,0x50(%rsp)
  0x00007f8ab912ddc3: mov    %rsi,0x48(%rsp)
  0x00007f8ab912ddc8: mov    %rdi,0x40(%rsp)
  0x00007f8ab912ddcd: mov    %r8,0x38(%rsp)
  0x00007f8ab912ddd2: mov    %r9,0x30(%rsp)
  0x00007f8ab912ddd7: mov    %r10,0x28(%rsp)
  0x00007f8ab912dddc: mov    %r11,0x20(%rsp)
  0x00007f8ab912dde1: mov    %r12,0x18(%rsp)
  0x00007f8ab912dde6: mov    %r13,0x10(%rsp)
  0x00007f8ab912ddeb: mov    %r14,0x8(%rsp)
  0x00007f8ab912ddf0: mov    %r15,(%rsp)
  0x00007f8ab912ddf4: sub    $0x200,%rsp
  0x00007f8ab912ddfb: fxsave64 (%rsp)
  0x00007f8ab912de00: mov    %rbx,%rdi
  0x00007f8ab912de03: mov    %rax,%rsi
  0x00007f8ab912de06: callq  0x00007f8acef8bbca
  0x00007f8ab912de0b: fxrstor64 (%rsp)
  0x00007f8ab912de10: add    $0x200,%rsp
  0x00007f8ab912de17: mov    (%rsp),%r15
  0x00007f8ab912de1b: mov    0x8(%rsp),%r14
  0x00007f8ab912de20: mov    0x10(%rsp),%r13
  0x00007f8ab912de25: mov    0x18(%rsp),%r12
  0x00007f8ab912de2a: mov    0x20(%rsp),%r11
  0x00007f8ab912de2f: mov    0x28(%rsp),%r10
  0x00007f8ab912de34: mov    0x30(%rsp),%r9
  0x00007f8ab912de39: mov    0x38(%rsp),%r8
  0x00007f8ab912de3e: mov    0x40(%rsp),%rdi
  0x00007f8ab912de43: mov    0x48(%rsp),%rsi
  0x00007f8ab912de48: mov    0x50(%rsp),%rbp
  0x00007f8ab912de4d: mov    0x60(%rsp),%rbx
  0x00007f8ab912de52: mov    0x68(%rsp),%rdx
  0x00007f8ab912de57: mov    0x70(%rsp),%rcx
  0x00007f8ab912de5c: mov    0x78(%rsp),%rax
  0x00007f8ab912de61: add    $0x80,%rsp
  0x00007f8ab912de68: add    $0x8,%rsp
  0x00007f8ab912de6c: popfq  
  0x00007f8ab912de6d: mov    %r13,%rsp
  0x00007f8ab912de70: pop    %rax
  0x00007f8ab912de71: mov    %rsp,%r13
  0x00007f8ab912de74: sub    $0x30,%rsp
  0x00007f8ab912de78: mov    %rax,(%rsp)
  0x00007f8ab912de7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab912de81: mov    %rdx,0x20(%rsp)
  0x00007f8ab912de86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912de90: mov    %rax,0x18(%rsp)
  0x00007f8ab912de95: mov    %rcx,0x10(%rsp)
  0x00007f8ab912de9a: mov    %r8d,0x8(%rsp)
  0x00007f8ab912de9f: mov    0x40(%rbx),%rcx
  0x00007f8ab912dea3: jmpq   *%rcx

AHE@0x00007f8ac80d7c00: 0xbbaa0000 i2c: 0x00007f8ab912df60 c2i: 0x00007f8ab912e07f c2iUV: 0x00007f8ab912e052
i2c argument handler #0 for: receiver (Ljava/lang/Object;IZ)V (564 bytes generated)
c2i argument handler starts at 0x7f8ab912e07f
  0x00007f8ab912df60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912df64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912df6e: cmp    %r11,%rax
  0x00007f8ab912df71: jbe    0x00007f8ab912df8a
  0x00007f8ab912df77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912df81: cmp    %r11,%rax
  0x00007f8ab912df84: jb     0x00007f8ab912e027
  0x00007f8ab912df8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912df94: cmp    %r11,%rax
  0x00007f8ab912df97: jbe    0x00007f8ab912dfb0
  0x00007f8ab912df9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912dfa7: cmp    %r11,%rax
  0x00007f8ab912dfaa: jb     0x00007f8ab912e027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912dfb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912dfb5: sub    $0x80,%rsp
  0x00007f8ab912dfbc: mov    %rax,0x78(%rsp)
  0x00007f8ab912dfc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912dfc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912dfcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912dfd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912dfd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912dfda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912dfdf: mov    %r8,0x38(%rsp)
  0x00007f8ab912dfe4: mov    %r9,0x30(%rsp)
  0x00007f8ab912dfe9: mov    %r10,0x28(%rsp)
  0x00007f8ab912dfee: mov    %r11,0x20(%rsp)
  0x00007f8ab912dff3: mov    %r12,0x18(%rsp)
  0x00007f8ab912dff8: mov    %r13,0x10(%rsp)
  0x00007f8ab912dffd: mov    %r14,0x8(%rsp)
  0x00007f8ab912e002: mov    %r15,(%rsp)
  0x00007f8ab912e006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912e010: movabs $0x7f8ab912dfb0,%rsi
  0x00007f8ab912e01a: mov    %rsp,%rdx
  0x00007f8ab912e01d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e021: callq  0x00007f8aceddb9fa
  0x00007f8ab912e026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912e027: mov    %rsp,%r11
  0x00007f8ab912e02a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e02e: push   %rax
  0x00007f8ab912e02f: mov    %r11,%rax
  0x00007f8ab912e032: mov    0x50(%rbx),%r11
  0x00007f8ab912e036: mov    0x20(%rax),%rsi
  0x00007f8ab912e03a: mov    0x18(%rax),%rdx
  0x00007f8ab912e03e: mov    0x10(%rax),%ecx
  0x00007f8ab912e041: mov    0x8(%rax),%r8d
  0x00007f8ab912e045: mov    %rbx,0x258(%r15)
  0x00007f8ab912e04c: mov    %rbx,%rax
  0x00007f8ab912e04f: jmpq   *%r11
  0x00007f8ab912e052: mov    0x8(%rsi),%ebx
  0x00007f8ab912e055: shl    $0x3,%rbx
  0x00007f8ab912e059: cmp    0x10(%rax),%rbx
  0x00007f8ab912e05d: mov    0x8(%rax),%rbx
  0x00007f8ab912e061: je     0x00007f8ab912e06c
  0x00007f8ab912e067: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e06c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e074: je     0x00007f8ab912e16f
  0x00007f8ab912e07a: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e07f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e087: je     0x00007f8ab912e16f
  0x00007f8ab912e08d: mov    %rsp,%r13
  0x00007f8ab912e090: mov    (%rsp),%rax
  0x00007f8ab912e094: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e098: pushfq 
  0x00007f8ab912e099: sub    $0x8,%rsp
  0x00007f8ab912e09d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912e0a2: sub    $0x80,%rsp
  0x00007f8ab912e0a9: mov    %rax,0x78(%rsp)
  0x00007f8ab912e0ae: mov    %rcx,0x70(%rsp)
  0x00007f8ab912e0b3: mov    %rdx,0x68(%rsp)
  0x00007f8ab912e0b8: mov    %rbx,0x60(%rsp)
  0x00007f8ab912e0bd: mov    %rbp,0x50(%rsp)
  0x00007f8ab912e0c2: mov    %rsi,0x48(%rsp)
  0x00007f8ab912e0c7: mov    %rdi,0x40(%rsp)
  0x00007f8ab912e0cc: mov    %r8,0x38(%rsp)
  0x00007f8ab912e0d1: mov    %r9,0x30(%rsp)
  0x00007f8ab912e0d6: mov    %r10,0x28(%rsp)
  0x00007f8ab912e0db: mov    %r11,0x20(%rsp)
  0x00007f8ab912e0e0: mov    %r12,0x18(%rsp)
  0x00007f8ab912e0e5: mov    %r13,0x10(%rsp)
  0x00007f8ab912e0ea: mov    %r14,0x8(%rsp)
  0x00007f8ab912e0ef: mov    %r15,(%rsp)
  0x00007f8ab912e0f3: sub    $0x200,%rsp
  0x00007f8ab912e0fa: fxsave64 (%rsp)
  0x00007f8ab912e0ff: mov    %rbx,%rdi
  0x00007f8ab912e102: mov    %rax,%rsi
  0x00007f8ab912e105: callq  0x00007f8acef8bbca
  0x00007f8ab912e10a: fxrstor64 (%rsp)
  0x00007f8ab912e10f: add    $0x200,%rsp
  0x00007f8ab912e116: mov    (%rsp),%r15
  0x00007f8ab912e11a: mov    0x8(%rsp),%r14
  0x00007f8ab912e11f: mov    0x10(%rsp),%r13
  0x00007f8ab912e124: mov    0x18(%rsp),%r12
  0x00007f8ab912e129: mov    0x20(%rsp),%r11
  0x00007f8ab912e12e: mov    0x28(%rsp),%r10
  0x00007f8ab912e133: mov    0x30(%rsp),%r9
  0x00007f8ab912e138: mov    0x38(%rsp),%r8
  0x00007f8ab912e13d: mov    0x40(%rsp),%rdi
  0x00007f8ab912e142: mov    0x48(%rsp),%rsi
  0x00007f8ab912e147: mov    0x50(%rsp),%rbp
  0x00007f8ab912e14c: mov    0x60(%rsp),%rbx
  0x00007f8ab912e151: mov    0x68(%rsp),%rdx
  0x00007f8ab912e156: mov    0x70(%rsp),%rcx
  0x00007f8ab912e15b: mov    0x78(%rsp),%rax
  0x00007f8ab912e160: add    $0x80,%rsp
  0x00007f8ab912e167: add    $0x8,%rsp
  0x00007f8ab912e16b: popfq  
  0x00007f8ab912e16c: mov    %r13,%rsp
  0x00007f8ab912e16f: pop    %rax
  0x00007f8ab912e170: mov    %rsp,%r13
  0x00007f8ab912e173: sub    $0x30,%rsp
  0x00007f8ab912e177: mov    %rax,(%rsp)
  0x00007f8ab912e17b: mov    %rsi,0x20(%rsp)
  0x00007f8ab912e180: mov    %rdx,0x18(%rsp)
  0x00007f8ab912e185: mov    %ecx,0x10(%rsp)
  0x00007f8ab912e189: mov    %r8d,0x8(%rsp)
  0x00007f8ab912e18e: mov    0x40(%rbx),%rcx
  0x00007f8ab912e192: jmpq   *%rcx

AHE@0x00007f8ac80d7c48: 0xbbbe0000 i2c: 0x00007f8ab912e260 c2i: 0x00007f8ab912e37c c2iUV: 0x00007f8ab912e34f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Z (572 bytes generated)
c2i argument handler starts at 0x7f8ab912e37c
  0x00007f8ab912e260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912e264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912e26e: cmp    %r11,%rax
  0x00007f8ab912e271: jbe    0x00007f8ab912e28a
  0x00007f8ab912e277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912e281: cmp    %r11,%rax
  0x00007f8ab912e284: jb     0x00007f8ab912e327
  0x00007f8ab912e28a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912e294: cmp    %r11,%rax
  0x00007f8ab912e297: jbe    0x00007f8ab912e2b0
  0x00007f8ab912e29d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912e2a7: cmp    %r11,%rax
  0x00007f8ab912e2aa: jb     0x00007f8ab912e327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912e2b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912e2b5: sub    $0x80,%rsp
  0x00007f8ab912e2bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912e2c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912e2c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912e2cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912e2d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912e2d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912e2da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912e2df: mov    %r8,0x38(%rsp)
  0x00007f8ab912e2e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912e2e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912e2ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912e2f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912e2f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912e2fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912e302: mov    %r15,(%rsp)
  0x00007f8ab912e306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912e310: movabs $0x7f8ab912e2b0,%rsi
  0x00007f8ab912e31a: mov    %rsp,%rdx
  0x00007f8ab912e31d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e321: callq  0x00007f8aceddb9fa
  0x00007f8ab912e326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912e327: mov    %rsp,%r11
  0x00007f8ab912e32a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e32e: push   %rax
  0x00007f8ab912e32f: mov    %r11,%rax
  0x00007f8ab912e332: mov    0x50(%rbx),%r11
  0x00007f8ab912e336: mov    0x20(%rax),%rsi
  0x00007f8ab912e33a: mov    0x18(%rax),%rdx
  0x00007f8ab912e33e: mov    0x8(%rax),%rcx
  0x00007f8ab912e342: mov    %rbx,0x258(%r15)
  0x00007f8ab912e349: mov    %rbx,%rax
  0x00007f8ab912e34c: jmpq   *%r11
  0x00007f8ab912e34f: mov    0x8(%rsi),%ebx
  0x00007f8ab912e352: shl    $0x3,%rbx
  0x00007f8ab912e356: cmp    0x10(%rax),%rbx
  0x00007f8ab912e35a: mov    0x8(%rax),%rbx
  0x00007f8ab912e35e: je     0x00007f8ab912e369
  0x00007f8ab912e364: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e369: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e371: je     0x00007f8ab912e46c
  0x00007f8ab912e377: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e37c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e384: je     0x00007f8ab912e46c
  0x00007f8ab912e38a: mov    %rsp,%r13
  0x00007f8ab912e38d: mov    (%rsp),%rax
  0x00007f8ab912e391: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e395: pushfq 
  0x00007f8ab912e396: sub    $0x8,%rsp
  0x00007f8ab912e39a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912e39f: sub    $0x80,%rsp
  0x00007f8ab912e3a6: mov    %rax,0x78(%rsp)
  0x00007f8ab912e3ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab912e3b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab912e3b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab912e3ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab912e3bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab912e3c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab912e3c9: mov    %r8,0x38(%rsp)
  0x00007f8ab912e3ce: mov    %r9,0x30(%rsp)
  0x00007f8ab912e3d3: mov    %r10,0x28(%rsp)
  0x00007f8ab912e3d8: mov    %r11,0x20(%rsp)
  0x00007f8ab912e3dd: mov    %r12,0x18(%rsp)
  0x00007f8ab912e3e2: mov    %r13,0x10(%rsp)
  0x00007f8ab912e3e7: mov    %r14,0x8(%rsp)
  0x00007f8ab912e3ec: mov    %r15,(%rsp)
  0x00007f8ab912e3f0: sub    $0x200,%rsp
  0x00007f8ab912e3f7: fxsave64 (%rsp)
  0x00007f8ab912e3fc: mov    %rbx,%rdi
  0x00007f8ab912e3ff: mov    %rax,%rsi
  0x00007f8ab912e402: callq  0x00007f8acef8bbca
  0x00007f8ab912e407: fxrstor64 (%rsp)
  0x00007f8ab912e40c: add    $0x200,%rsp
  0x00007f8ab912e413: mov    (%rsp),%r15
  0x00007f8ab912e417: mov    0x8(%rsp),%r14
  0x00007f8ab912e41c: mov    0x10(%rsp),%r13
  0x00007f8ab912e421: mov    0x18(%rsp),%r12
  0x00007f8ab912e426: mov    0x20(%rsp),%r11
  0x00007f8ab912e42b: mov    0x28(%rsp),%r10
  0x00007f8ab912e430: mov    0x30(%rsp),%r9
  0x00007f8ab912e435: mov    0x38(%rsp),%r8
  0x00007f8ab912e43a: mov    0x40(%rsp),%rdi
  0x00007f8ab912e43f: mov    0x48(%rsp),%rsi
  0x00007f8ab912e444: mov    0x50(%rsp),%rbp
  0x00007f8ab912e449: mov    0x60(%rsp),%rbx
  0x00007f8ab912e44e: mov    0x68(%rsp),%rdx
  0x00007f8ab912e453: mov    0x70(%rsp),%rcx
  0x00007f8ab912e458: mov    0x78(%rsp),%rax
  0x00007f8ab912e45d: add    $0x80,%rsp
  0x00007f8ab912e464: add    $0x8,%rsp
  0x00007f8ab912e468: popfq  
  0x00007f8ab912e469: mov    %r13,%rsp
  0x00007f8ab912e46c: pop    %rax
  0x00007f8ab912e46d: mov    %rsp,%r13
  0x00007f8ab912e470: sub    $0x30,%rsp
  0x00007f8ab912e474: mov    %rax,(%rsp)
  0x00007f8ab912e478: mov    %rsi,0x20(%rsp)
  0x00007f8ab912e47d: mov    %rdx,0x18(%rsp)
  0x00007f8ab912e482: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912e48c: mov    %rax,0x10(%rsp)
  0x00007f8ab912e491: mov    %rcx,0x8(%rsp)
  0x00007f8ab912e496: mov    0x40(%rbx),%rcx
  0x00007f8ab912e49a: jmpq   *%rcx

AHE@0x00007f8ac80d7c90: 0xbba00000 i2c: 0x00007f8ab912e560 c2i: 0x00007f8ab912e67b c2iUV: 0x00007f8ab912e64e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)Z (555 bytes generated)
c2i argument handler starts at 0x7f8ab912e67b
  0x00007f8ab912e560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912e564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912e56e: cmp    %r11,%rax
  0x00007f8ab912e571: jbe    0x00007f8ab912e58a
  0x00007f8ab912e577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912e581: cmp    %r11,%rax
  0x00007f8ab912e584: jb     0x00007f8ab912e627
  0x00007f8ab912e58a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912e594: cmp    %r11,%rax
  0x00007f8ab912e597: jbe    0x00007f8ab912e5b0
  0x00007f8ab912e59d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912e5a7: cmp    %r11,%rax
  0x00007f8ab912e5aa: jb     0x00007f8ab912e627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912e5b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912e5b5: sub    $0x80,%rsp
  0x00007f8ab912e5bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912e5c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912e5c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912e5cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912e5d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912e5d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912e5da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912e5df: mov    %r8,0x38(%rsp)
  0x00007f8ab912e5e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912e5e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912e5ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912e5f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912e5f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912e5fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912e602: mov    %r15,(%rsp)
  0x00007f8ab912e606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912e610: movabs $0x7f8ab912e5b0,%rsi
  0x00007f8ab912e61a: mov    %rsp,%rdx
  0x00007f8ab912e61d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e621: callq  0x00007f8aceddb9fa
  0x00007f8ab912e626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912e627: mov    %rsp,%r11
  0x00007f8ab912e62a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e62e: push   %rax
  0x00007f8ab912e62f: mov    %r11,%rax
  0x00007f8ab912e632: mov    0x50(%rbx),%r11
  0x00007f8ab912e636: mov    0x18(%rax),%rsi
  0x00007f8ab912e63a: mov    0x10(%rax),%rdx
  0x00007f8ab912e63e: mov    0x8(%rax),%ecx
  0x00007f8ab912e641: mov    %rbx,0x258(%r15)
  0x00007f8ab912e648: mov    %rbx,%rax
  0x00007f8ab912e64b: jmpq   *%r11
  0x00007f8ab912e64e: mov    0x8(%rsi),%ebx
  0x00007f8ab912e651: shl    $0x3,%rbx
  0x00007f8ab912e655: cmp    0x10(%rax),%rbx
  0x00007f8ab912e659: mov    0x8(%rax),%rbx
  0x00007f8ab912e65d: je     0x00007f8ab912e668
  0x00007f8ab912e663: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e668: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e670: je     0x00007f8ab912e76b
  0x00007f8ab912e676: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e67b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e683: je     0x00007f8ab912e76b
  0x00007f8ab912e689: mov    %rsp,%r13
  0x00007f8ab912e68c: mov    (%rsp),%rax
  0x00007f8ab912e690: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e694: pushfq 
  0x00007f8ab912e695: sub    $0x8,%rsp
  0x00007f8ab912e699: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912e69e: sub    $0x80,%rsp
  0x00007f8ab912e6a5: mov    %rax,0x78(%rsp)
  0x00007f8ab912e6aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912e6af: mov    %rdx,0x68(%rsp)
  0x00007f8ab912e6b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912e6b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912e6be: mov    %rsi,0x48(%rsp)
  0x00007f8ab912e6c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912e6c8: mov    %r8,0x38(%rsp)
  0x00007f8ab912e6cd: mov    %r9,0x30(%rsp)
  0x00007f8ab912e6d2: mov    %r10,0x28(%rsp)
  0x00007f8ab912e6d7: mov    %r11,0x20(%rsp)
  0x00007f8ab912e6dc: mov    %r12,0x18(%rsp)
  0x00007f8ab912e6e1: mov    %r13,0x10(%rsp)
  0x00007f8ab912e6e6: mov    %r14,0x8(%rsp)
  0x00007f8ab912e6eb: mov    %r15,(%rsp)
  0x00007f8ab912e6ef: sub    $0x200,%rsp
  0x00007f8ab912e6f6: fxsave64 (%rsp)
  0x00007f8ab912e6fb: mov    %rbx,%rdi
  0x00007f8ab912e6fe: mov    %rax,%rsi
  0x00007f8ab912e701: callq  0x00007f8acef8bbca
  0x00007f8ab912e706: fxrstor64 (%rsp)
  0x00007f8ab912e70b: add    $0x200,%rsp
  0x00007f8ab912e712: mov    (%rsp),%r15
  0x00007f8ab912e716: mov    0x8(%rsp),%r14
  0x00007f8ab912e71b: mov    0x10(%rsp),%r13
  0x00007f8ab912e720: mov    0x18(%rsp),%r12
  0x00007f8ab912e725: mov    0x20(%rsp),%r11
  0x00007f8ab912e72a: mov    0x28(%rsp),%r10
  0x00007f8ab912e72f: mov    0x30(%rsp),%r9
  0x00007f8ab912e734: mov    0x38(%rsp),%r8
  0x00007f8ab912e739: mov    0x40(%rsp),%rdi
  0x00007f8ab912e73e: mov    0x48(%rsp),%rsi
  0x00007f8ab912e743: mov    0x50(%rsp),%rbp
  0x00007f8ab912e748: mov    0x60(%rsp),%rbx
  0x00007f8ab912e74d: mov    0x68(%rsp),%rdx
  0x00007f8ab912e752: mov    0x70(%rsp),%rcx
  0x00007f8ab912e757: mov    0x78(%rsp),%rax
  0x00007f8ab912e75c: add    $0x80,%rsp
  0x00007f8ab912e763: add    $0x8,%rsp
  0x00007f8ab912e767: popfq  
  0x00007f8ab912e768: mov    %r13,%rsp
  0x00007f8ab912e76b: pop    %rax
  0x00007f8ab912e76c: mov    %rsp,%r13
  0x00007f8ab912e76f: sub    $0x20,%rsp
  0x00007f8ab912e773: mov    %rax,(%rsp)
  0x00007f8ab912e777: mov    %rsi,0x18(%rsp)
  0x00007f8ab912e77c: mov    %rdx,0x10(%rsp)
  0x00007f8ab912e781: mov    %ecx,0x8(%rsp)
  0x00007f8ab912e785: mov    0x40(%rbx),%rcx
  0x00007f8ab912e789: jmpq   *%rcx

AHE@0x00007f8ac80d7cd8: 0xbbab0000 i2c: 0x00007f8ab912e860 c2i: 0x00007f8ab912e97f c2iUV: 0x00007f8ab912e952
i2c argument handler #0 for: receiver (Ljava/lang/Object;ILjava/lang/Object;)V (564 bytes generated)
c2i argument handler starts at 0x7f8ab912e97f
  0x00007f8ab912e860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912e864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912e86e: cmp    %r11,%rax
  0x00007f8ab912e871: jbe    0x00007f8ab912e88a
  0x00007f8ab912e877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912e881: cmp    %r11,%rax
  0x00007f8ab912e884: jb     0x00007f8ab912e927
  0x00007f8ab912e88a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912e894: cmp    %r11,%rax
  0x00007f8ab912e897: jbe    0x00007f8ab912e8b0
  0x00007f8ab912e89d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912e8a7: cmp    %r11,%rax
  0x00007f8ab912e8aa: jb     0x00007f8ab912e927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912e8b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912e8b5: sub    $0x80,%rsp
  0x00007f8ab912e8bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912e8c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912e8c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912e8cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912e8d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912e8d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912e8da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912e8df: mov    %r8,0x38(%rsp)
  0x00007f8ab912e8e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912e8e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912e8ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912e8f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912e8f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912e8fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912e902: mov    %r15,(%rsp)
  0x00007f8ab912e906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912e910: movabs $0x7f8ab912e8b0,%rsi
  0x00007f8ab912e91a: mov    %rsp,%rdx
  0x00007f8ab912e91d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e921: callq  0x00007f8aceddb9fa
  0x00007f8ab912e926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912e927: mov    %rsp,%r11
  0x00007f8ab912e92a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e92e: push   %rax
  0x00007f8ab912e92f: mov    %r11,%rax
  0x00007f8ab912e932: mov    0x50(%rbx),%r11
  0x00007f8ab912e936: mov    0x20(%rax),%rsi
  0x00007f8ab912e93a: mov    0x18(%rax),%rdx
  0x00007f8ab912e93e: mov    0x10(%rax),%ecx
  0x00007f8ab912e941: mov    0x8(%rax),%r8
  0x00007f8ab912e945: mov    %rbx,0x258(%r15)
  0x00007f8ab912e94c: mov    %rbx,%rax
  0x00007f8ab912e94f: jmpq   *%r11
  0x00007f8ab912e952: mov    0x8(%rsi),%ebx
  0x00007f8ab912e955: shl    $0x3,%rbx
  0x00007f8ab912e959: cmp    0x10(%rax),%rbx
  0x00007f8ab912e95d: mov    0x8(%rax),%rbx
  0x00007f8ab912e961: je     0x00007f8ab912e96c
  0x00007f8ab912e967: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e96c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e974: je     0x00007f8ab912ea6f
  0x00007f8ab912e97a: jmpq   0x00007f8ab9105c40
  0x00007f8ab912e97f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912e987: je     0x00007f8ab912ea6f
  0x00007f8ab912e98d: mov    %rsp,%r13
  0x00007f8ab912e990: mov    (%rsp),%rax
  0x00007f8ab912e994: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912e998: pushfq 
  0x00007f8ab912e999: sub    $0x8,%rsp
  0x00007f8ab912e99d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912e9a2: sub    $0x80,%rsp
  0x00007f8ab912e9a9: mov    %rax,0x78(%rsp)
  0x00007f8ab912e9ae: mov    %rcx,0x70(%rsp)
  0x00007f8ab912e9b3: mov    %rdx,0x68(%rsp)
  0x00007f8ab912e9b8: mov    %rbx,0x60(%rsp)
  0x00007f8ab912e9bd: mov    %rbp,0x50(%rsp)
  0x00007f8ab912e9c2: mov    %rsi,0x48(%rsp)
  0x00007f8ab912e9c7: mov    %rdi,0x40(%rsp)
  0x00007f8ab912e9cc: mov    %r8,0x38(%rsp)
  0x00007f8ab912e9d1: mov    %r9,0x30(%rsp)
  0x00007f8ab912e9d6: mov    %r10,0x28(%rsp)
  0x00007f8ab912e9db: mov    %r11,0x20(%rsp)
  0x00007f8ab912e9e0: mov    %r12,0x18(%rsp)
  0x00007f8ab912e9e5: mov    %r13,0x10(%rsp)
  0x00007f8ab912e9ea: mov    %r14,0x8(%rsp)
  0x00007f8ab912e9ef: mov    %r15,(%rsp)
  0x00007f8ab912e9f3: sub    $0x200,%rsp
  0x00007f8ab912e9fa: fxsave64 (%rsp)
  0x00007f8ab912e9ff: mov    %rbx,%rdi
  0x00007f8ab912ea02: mov    %rax,%rsi
  0x00007f8ab912ea05: callq  0x00007f8acef8bbca
  0x00007f8ab912ea0a: fxrstor64 (%rsp)
  0x00007f8ab912ea0f: add    $0x200,%rsp
  0x00007f8ab912ea16: mov    (%rsp),%r15
  0x00007f8ab912ea1a: mov    0x8(%rsp),%r14
  0x00007f8ab912ea1f: mov    0x10(%rsp),%r13
  0x00007f8ab912ea24: mov    0x18(%rsp),%r12
  0x00007f8ab912ea29: mov    0x20(%rsp),%r11
  0x00007f8ab912ea2e: mov    0x28(%rsp),%r10
  0x00007f8ab912ea33: mov    0x30(%rsp),%r9
  0x00007f8ab912ea38: mov    0x38(%rsp),%r8
  0x00007f8ab912ea3d: mov    0x40(%rsp),%rdi
  0x00007f8ab912ea42: mov    0x48(%rsp),%rsi
  0x00007f8ab912ea47: mov    0x50(%rsp),%rbp
  0x00007f8ab912ea4c: mov    0x60(%rsp),%rbx
  0x00007f8ab912ea51: mov    0x68(%rsp),%rdx
  0x00007f8ab912ea56: mov    0x70(%rsp),%rcx
  0x00007f8ab912ea5b: mov    0x78(%rsp),%rax
  0x00007f8ab912ea60: add    $0x80,%rsp
  0x00007f8ab912ea67: add    $0x8,%rsp
  0x00007f8ab912ea6b: popfq  
  0x00007f8ab912ea6c: mov    %r13,%rsp
  0x00007f8ab912ea6f: pop    %rax
  0x00007f8ab912ea70: mov    %rsp,%r13
  0x00007f8ab912ea73: sub    $0x30,%rsp
  0x00007f8ab912ea77: mov    %rax,(%rsp)
  0x00007f8ab912ea7b: mov    %rsi,0x20(%rsp)
  0x00007f8ab912ea80: mov    %rdx,0x18(%rsp)
  0x00007f8ab912ea85: mov    %ecx,0x10(%rsp)
  0x00007f8ab912ea89: mov    %r8,0x8(%rsp)
  0x00007f8ab912ea8e: mov    0x40(%rbx),%rcx
  0x00007f8ab912ea92: jmpq   *%rcx

AHE@0x00007f8ac80d7d20: 0xbbbeb000 i2c: 0x00007f8ab912eb60 c2i: 0x00007f8ab912ec80 c2iUV: 0x00007f8ab912ec53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (581 bytes generated)
c2i argument handler starts at 0x7f8ab912ec80
  0x00007f8ab912eb60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912eb64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912eb6e: cmp    %r11,%rax
  0x00007f8ab912eb71: jbe    0x00007f8ab912eb8a
  0x00007f8ab912eb77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912eb81: cmp    %r11,%rax
  0x00007f8ab912eb84: jb     0x00007f8ab912ec27
  0x00007f8ab912eb8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912eb94: cmp    %r11,%rax
  0x00007f8ab912eb97: jbe    0x00007f8ab912ebb0
  0x00007f8ab912eb9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912eba7: cmp    %r11,%rax
  0x00007f8ab912ebaa: jb     0x00007f8ab912ec27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912ebb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912ebb5: sub    $0x80,%rsp
  0x00007f8ab912ebbc: mov    %rax,0x78(%rsp)
  0x00007f8ab912ebc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912ebc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912ebcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912ebd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912ebd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912ebda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912ebdf: mov    %r8,0x38(%rsp)
  0x00007f8ab912ebe4: mov    %r9,0x30(%rsp)
  0x00007f8ab912ebe9: mov    %r10,0x28(%rsp)
  0x00007f8ab912ebee: mov    %r11,0x20(%rsp)
  0x00007f8ab912ebf3: mov    %r12,0x18(%rsp)
  0x00007f8ab912ebf8: mov    %r13,0x10(%rsp)
  0x00007f8ab912ebfd: mov    %r14,0x8(%rsp)
  0x00007f8ab912ec02: mov    %r15,(%rsp)
  0x00007f8ab912ec06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912ec10: movabs $0x7f8ab912ebb0,%rsi
  0x00007f8ab912ec1a: mov    %rsp,%rdx
  0x00007f8ab912ec1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ec21: callq  0x00007f8aceddb9fa
  0x00007f8ab912ec26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912ec27: mov    %rsp,%r11
  0x00007f8ab912ec2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ec2e: push   %rax
  0x00007f8ab912ec2f: mov    %r11,%rax
  0x00007f8ab912ec32: mov    0x50(%rbx),%r11
  0x00007f8ab912ec36: mov    0x28(%rax),%rsi
  0x00007f8ab912ec3a: mov    0x20(%rax),%rdx
  0x00007f8ab912ec3e: mov    0x10(%rax),%rcx
  0x00007f8ab912ec42: mov    0x8(%rax),%r8
  0x00007f8ab912ec46: mov    %rbx,0x258(%r15)
  0x00007f8ab912ec4d: mov    %rbx,%rax
  0x00007f8ab912ec50: jmpq   *%r11
  0x00007f8ab912ec53: mov    0x8(%rsi),%ebx
  0x00007f8ab912ec56: shl    $0x3,%rbx
  0x00007f8ab912ec5a: cmp    0x10(%rax),%rbx
  0x00007f8ab912ec5e: mov    0x8(%rax),%rbx
  0x00007f8ab912ec62: je     0x00007f8ab912ec6d
  0x00007f8ab912ec68: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ec6d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ec75: je     0x00007f8ab912ed70
  0x00007f8ab912ec7b: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ec80: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ec88: je     0x00007f8ab912ed70
  0x00007f8ab912ec8e: mov    %rsp,%r13
  0x00007f8ab912ec91: mov    (%rsp),%rax
  0x00007f8ab912ec95: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ec99: pushfq 
  0x00007f8ab912ec9a: sub    $0x8,%rsp
  0x00007f8ab912ec9e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912eca3: sub    $0x80,%rsp
  0x00007f8ab912ecaa: mov    %rax,0x78(%rsp)
  0x00007f8ab912ecaf: mov    %rcx,0x70(%rsp)
  0x00007f8ab912ecb4: mov    %rdx,0x68(%rsp)
  0x00007f8ab912ecb9: mov    %rbx,0x60(%rsp)
  0x00007f8ab912ecbe: mov    %rbp,0x50(%rsp)
  0x00007f8ab912ecc3: mov    %rsi,0x48(%rsp)
  0x00007f8ab912ecc8: mov    %rdi,0x40(%rsp)
  0x00007f8ab912eccd: mov    %r8,0x38(%rsp)
  0x00007f8ab912ecd2: mov    %r9,0x30(%rsp)
  0x00007f8ab912ecd7: mov    %r10,0x28(%rsp)
  0x00007f8ab912ecdc: mov    %r11,0x20(%rsp)
  0x00007f8ab912ece1: mov    %r12,0x18(%rsp)
  0x00007f8ab912ece6: mov    %r13,0x10(%rsp)
  0x00007f8ab912eceb: mov    %r14,0x8(%rsp)
  0x00007f8ab912ecf0: mov    %r15,(%rsp)
  0x00007f8ab912ecf4: sub    $0x200,%rsp
  0x00007f8ab912ecfb: fxsave64 (%rsp)
  0x00007f8ab912ed00: mov    %rbx,%rdi
  0x00007f8ab912ed03: mov    %rax,%rsi
  0x00007f8ab912ed06: callq  0x00007f8acef8bbca
  0x00007f8ab912ed0b: fxrstor64 (%rsp)
  0x00007f8ab912ed10: add    $0x200,%rsp
  0x00007f8ab912ed17: mov    (%rsp),%r15
  0x00007f8ab912ed1b: mov    0x8(%rsp),%r14
  0x00007f8ab912ed20: mov    0x10(%rsp),%r13
  0x00007f8ab912ed25: mov    0x18(%rsp),%r12
  0x00007f8ab912ed2a: mov    0x20(%rsp),%r11
  0x00007f8ab912ed2f: mov    0x28(%rsp),%r10
  0x00007f8ab912ed34: mov    0x30(%rsp),%r9
  0x00007f8ab912ed39: mov    0x38(%rsp),%r8
  0x00007f8ab912ed3e: mov    0x40(%rsp),%rdi
  0x00007f8ab912ed43: mov    0x48(%rsp),%rsi
  0x00007f8ab912ed48: mov    0x50(%rsp),%rbp
  0x00007f8ab912ed4d: mov    0x60(%rsp),%rbx
  0x00007f8ab912ed52: mov    0x68(%rsp),%rdx
  0x00007f8ab912ed57: mov    0x70(%rsp),%rcx
  0x00007f8ab912ed5c: mov    0x78(%rsp),%rax
  0x00007f8ab912ed61: add    $0x80,%rsp
  0x00007f8ab912ed68: add    $0x8,%rsp
  0x00007f8ab912ed6c: popfq  
  0x00007f8ab912ed6d: mov    %r13,%rsp
  0x00007f8ab912ed70: pop    %rax
  0x00007f8ab912ed71: mov    %rsp,%r13
  0x00007f8ab912ed74: sub    $0x30,%rsp
  0x00007f8ab912ed78: mov    %rax,(%rsp)
  0x00007f8ab912ed7c: mov    %rsi,0x28(%rsp)
  0x00007f8ab912ed81: mov    %rdx,0x20(%rsp)
  0x00007f8ab912ed86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912ed90: mov    %rax,0x18(%rsp)
  0x00007f8ab912ed95: mov    %rcx,0x10(%rsp)
  0x00007f8ab912ed9a: mov    %r8,0x8(%rsp)
  0x00007f8ab912ed9f: mov    0x40(%rbx),%rcx
  0x00007f8ab912eda3: jmpq   *%rcx

AHE@0x00007f8ac80d7d68: 0xbba00000 i2c: 0x00007f8ab912ee60 c2i: 0x00007f8ab912ef7b c2iUV: 0x00007f8ab912ef4e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)Ljava/lang/Object; (555 bytes generated)
c2i argument handler starts at 0x7f8ab912ef7b
  0x00007f8ab912ee60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912ee64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912ee6e: cmp    %r11,%rax
  0x00007f8ab912ee71: jbe    0x00007f8ab912ee8a
  0x00007f8ab912ee77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912ee81: cmp    %r11,%rax
  0x00007f8ab912ee84: jb     0x00007f8ab912ef27
  0x00007f8ab912ee8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912ee94: cmp    %r11,%rax
  0x00007f8ab912ee97: jbe    0x00007f8ab912eeb0
  0x00007f8ab912ee9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912eea7: cmp    %r11,%rax
  0x00007f8ab912eeaa: jb     0x00007f8ab912ef27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912eeb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912eeb5: sub    $0x80,%rsp
  0x00007f8ab912eebc: mov    %rax,0x78(%rsp)
  0x00007f8ab912eec1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912eec6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912eecb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912eed0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912eed5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912eeda: mov    %rdi,0x40(%rsp)
  0x00007f8ab912eedf: mov    %r8,0x38(%rsp)
  0x00007f8ab912eee4: mov    %r9,0x30(%rsp)
  0x00007f8ab912eee9: mov    %r10,0x28(%rsp)
  0x00007f8ab912eeee: mov    %r11,0x20(%rsp)
  0x00007f8ab912eef3: mov    %r12,0x18(%rsp)
  0x00007f8ab912eef8: mov    %r13,0x10(%rsp)
  0x00007f8ab912eefd: mov    %r14,0x8(%rsp)
  0x00007f8ab912ef02: mov    %r15,(%rsp)
  0x00007f8ab912ef06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912ef10: movabs $0x7f8ab912eeb0,%rsi
  0x00007f8ab912ef1a: mov    %rsp,%rdx
  0x00007f8ab912ef1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ef21: callq  0x00007f8aceddb9fa
  0x00007f8ab912ef26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912ef27: mov    %rsp,%r11
  0x00007f8ab912ef2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ef2e: push   %rax
  0x00007f8ab912ef2f: mov    %r11,%rax
  0x00007f8ab912ef32: mov    0x50(%rbx),%r11
  0x00007f8ab912ef36: mov    0x18(%rax),%rsi
  0x00007f8ab912ef3a: mov    0x10(%rax),%rdx
  0x00007f8ab912ef3e: mov    0x8(%rax),%ecx
  0x00007f8ab912ef41: mov    %rbx,0x258(%r15)
  0x00007f8ab912ef48: mov    %rbx,%rax
  0x00007f8ab912ef4b: jmpq   *%r11
  0x00007f8ab912ef4e: mov    0x8(%rsi),%ebx
  0x00007f8ab912ef51: shl    $0x3,%rbx
  0x00007f8ab912ef55: cmp    0x10(%rax),%rbx
  0x00007f8ab912ef59: mov    0x8(%rax),%rbx
  0x00007f8ab912ef5d: je     0x00007f8ab912ef68
  0x00007f8ab912ef63: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ef68: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ef70: je     0x00007f8ab912f06b
  0x00007f8ab912ef76: jmpq   0x00007f8ab9105c40
  0x00007f8ab912ef7b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912ef83: je     0x00007f8ab912f06b
  0x00007f8ab912ef89: mov    %rsp,%r13
  0x00007f8ab912ef8c: mov    (%rsp),%rax
  0x00007f8ab912ef90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912ef94: pushfq 
  0x00007f8ab912ef95: sub    $0x8,%rsp
  0x00007f8ab912ef99: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912ef9e: sub    $0x80,%rsp
  0x00007f8ab912efa5: mov    %rax,0x78(%rsp)
  0x00007f8ab912efaa: mov    %rcx,0x70(%rsp)
  0x00007f8ab912efaf: mov    %rdx,0x68(%rsp)
  0x00007f8ab912efb4: mov    %rbx,0x60(%rsp)
  0x00007f8ab912efb9: mov    %rbp,0x50(%rsp)
  0x00007f8ab912efbe: mov    %rsi,0x48(%rsp)
  0x00007f8ab912efc3: mov    %rdi,0x40(%rsp)
  0x00007f8ab912efc8: mov    %r8,0x38(%rsp)
  0x00007f8ab912efcd: mov    %r9,0x30(%rsp)
  0x00007f8ab912efd2: mov    %r10,0x28(%rsp)
  0x00007f8ab912efd7: mov    %r11,0x20(%rsp)
  0x00007f8ab912efdc: mov    %r12,0x18(%rsp)
  0x00007f8ab912efe1: mov    %r13,0x10(%rsp)
  0x00007f8ab912efe6: mov    %r14,0x8(%rsp)
  0x00007f8ab912efeb: mov    %r15,(%rsp)
  0x00007f8ab912efef: sub    $0x200,%rsp
  0x00007f8ab912eff6: fxsave64 (%rsp)
  0x00007f8ab912effb: mov    %rbx,%rdi
  0x00007f8ab912effe: mov    %rax,%rsi
  0x00007f8ab912f001: callq  0x00007f8acef8bbca
  0x00007f8ab912f006: fxrstor64 (%rsp)
  0x00007f8ab912f00b: add    $0x200,%rsp
  0x00007f8ab912f012: mov    (%rsp),%r15
  0x00007f8ab912f016: mov    0x8(%rsp),%r14
  0x00007f8ab912f01b: mov    0x10(%rsp),%r13
  0x00007f8ab912f020: mov    0x18(%rsp),%r12
  0x00007f8ab912f025: mov    0x20(%rsp),%r11
  0x00007f8ab912f02a: mov    0x28(%rsp),%r10
  0x00007f8ab912f02f: mov    0x30(%rsp),%r9
  0x00007f8ab912f034: mov    0x38(%rsp),%r8
  0x00007f8ab912f039: mov    0x40(%rsp),%rdi
  0x00007f8ab912f03e: mov    0x48(%rsp),%rsi
  0x00007f8ab912f043: mov    0x50(%rsp),%rbp
  0x00007f8ab912f048: mov    0x60(%rsp),%rbx
  0x00007f8ab912f04d: mov    0x68(%rsp),%rdx
  0x00007f8ab912f052: mov    0x70(%rsp),%rcx
  0x00007f8ab912f057: mov    0x78(%rsp),%rax
  0x00007f8ab912f05c: add    $0x80,%rsp
  0x00007f8ab912f063: add    $0x8,%rsp
  0x00007f8ab912f067: popfq  
  0x00007f8ab912f068: mov    %r13,%rsp
  0x00007f8ab912f06b: pop    %rax
  0x00007f8ab912f06c: mov    %rsp,%r13
  0x00007f8ab912f06f: sub    $0x20,%rsp
  0x00007f8ab912f073: mov    %rax,(%rsp)
  0x00007f8ab912f077: mov    %rsi,0x18(%rsp)
  0x00007f8ab912f07c: mov    %rdx,0x10(%rsp)
  0x00007f8ab912f081: mov    %ecx,0x8(%rsp)
  0x00007f8ab912f085: mov    0x40(%rbx),%rcx
  0x00007f8ab912f089: jmpq   *%rcx

AHE@0x00007f8ac80d7db0: 0xbbbe0000 i2c: 0x00007f8ab912f160 c2i: 0x00007f8ab912f27c c2iUV: 0x00007f8ab912f24f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Ljava/lang/Object; (572 bytes generated)
c2i argument handler starts at 0x7f8ab912f27c
  0x00007f8ab912f160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912f164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912f16e: cmp    %r11,%rax
  0x00007f8ab912f171: jbe    0x00007f8ab912f18a
  0x00007f8ab912f177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912f181: cmp    %r11,%rax
  0x00007f8ab912f184: jb     0x00007f8ab912f227
  0x00007f8ab912f18a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912f194: cmp    %r11,%rax
  0x00007f8ab912f197: jbe    0x00007f8ab912f1b0
  0x00007f8ab912f19d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912f1a7: cmp    %r11,%rax
  0x00007f8ab912f1aa: jb     0x00007f8ab912f227
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912f1b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912f1b5: sub    $0x80,%rsp
  0x00007f8ab912f1bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912f1c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912f1c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912f1cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912f1d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912f1d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912f1da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912f1df: mov    %r8,0x38(%rsp)
  0x00007f8ab912f1e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912f1e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912f1ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912f1f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912f1f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912f1fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912f202: mov    %r15,(%rsp)
  0x00007f8ab912f206: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912f210: movabs $0x7f8ab912f1b0,%rsi
  0x00007f8ab912f21a: mov    %rsp,%rdx
  0x00007f8ab912f21d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f221: callq  0x00007f8aceddb9fa
  0x00007f8ab912f226: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912f227: mov    %rsp,%r11
  0x00007f8ab912f22a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f22e: push   %rax
  0x00007f8ab912f22f: mov    %r11,%rax
  0x00007f8ab912f232: mov    0x50(%rbx),%r11
  0x00007f8ab912f236: mov    0x20(%rax),%rsi
  0x00007f8ab912f23a: mov    0x18(%rax),%rdx
  0x00007f8ab912f23e: mov    0x8(%rax),%rcx
  0x00007f8ab912f242: mov    %rbx,0x258(%r15)
  0x00007f8ab912f249: mov    %rbx,%rax
  0x00007f8ab912f24c: jmpq   *%r11
  0x00007f8ab912f24f: mov    0x8(%rsi),%ebx
  0x00007f8ab912f252: shl    $0x3,%rbx
  0x00007f8ab912f256: cmp    0x10(%rax),%rbx
  0x00007f8ab912f25a: mov    0x8(%rax),%rbx
  0x00007f8ab912f25e: je     0x00007f8ab912f269
  0x00007f8ab912f264: jmpq   0x00007f8ab9105c40
  0x00007f8ab912f269: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912f271: je     0x00007f8ab912f36c
  0x00007f8ab912f277: jmpq   0x00007f8ab9105c40
  0x00007f8ab912f27c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912f284: je     0x00007f8ab912f36c
  0x00007f8ab912f28a: mov    %rsp,%r13
  0x00007f8ab912f28d: mov    (%rsp),%rax
  0x00007f8ab912f291: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f295: pushfq 
  0x00007f8ab912f296: sub    $0x8,%rsp
  0x00007f8ab912f29a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912f29f: sub    $0x80,%rsp
  0x00007f8ab912f2a6: mov    %rax,0x78(%rsp)
  0x00007f8ab912f2ab: mov    %rcx,0x70(%rsp)
  0x00007f8ab912f2b0: mov    %rdx,0x68(%rsp)
  0x00007f8ab912f2b5: mov    %rbx,0x60(%rsp)
  0x00007f8ab912f2ba: mov    %rbp,0x50(%rsp)
  0x00007f8ab912f2bf: mov    %rsi,0x48(%rsp)
  0x00007f8ab912f2c4: mov    %rdi,0x40(%rsp)
  0x00007f8ab912f2c9: mov    %r8,0x38(%rsp)
  0x00007f8ab912f2ce: mov    %r9,0x30(%rsp)
  0x00007f8ab912f2d3: mov    %r10,0x28(%rsp)
  0x00007f8ab912f2d8: mov    %r11,0x20(%rsp)
  0x00007f8ab912f2dd: mov    %r12,0x18(%rsp)
  0x00007f8ab912f2e2: mov    %r13,0x10(%rsp)
  0x00007f8ab912f2e7: mov    %r14,0x8(%rsp)
  0x00007f8ab912f2ec: mov    %r15,(%rsp)
  0x00007f8ab912f2f0: sub    $0x200,%rsp
  0x00007f8ab912f2f7: fxsave64 (%rsp)
  0x00007f8ab912f2fc: mov    %rbx,%rdi
  0x00007f8ab912f2ff: mov    %rax,%rsi
  0x00007f8ab912f302: callq  0x00007f8acef8bbca
  0x00007f8ab912f307: fxrstor64 (%rsp)
  0x00007f8ab912f30c: add    $0x200,%rsp
  0x00007f8ab912f313: mov    (%rsp),%r15
  0x00007f8ab912f317: mov    0x8(%rsp),%r14
  0x00007f8ab912f31c: mov    0x10(%rsp),%r13
  0x00007f8ab912f321: mov    0x18(%rsp),%r12
  0x00007f8ab912f326: mov    0x20(%rsp),%r11
  0x00007f8ab912f32b: mov    0x28(%rsp),%r10
  0x00007f8ab912f330: mov    0x30(%rsp),%r9
  0x00007f8ab912f335: mov    0x38(%rsp),%r8
  0x00007f8ab912f33a: mov    0x40(%rsp),%rdi
  0x00007f8ab912f33f: mov    0x48(%rsp),%rsi
  0x00007f8ab912f344: mov    0x50(%rsp),%rbp
  0x00007f8ab912f349: mov    0x60(%rsp),%rbx
  0x00007f8ab912f34e: mov    0x68(%rsp),%rdx
  0x00007f8ab912f353: mov    0x70(%rsp),%rcx
  0x00007f8ab912f358: mov    0x78(%rsp),%rax
  0x00007f8ab912f35d: add    $0x80,%rsp
  0x00007f8ab912f364: add    $0x8,%rsp
  0x00007f8ab912f368: popfq  
  0x00007f8ab912f369: mov    %r13,%rsp
  0x00007f8ab912f36c: pop    %rax
  0x00007f8ab912f36d: mov    %rsp,%r13
  0x00007f8ab912f370: sub    $0x30,%rsp
  0x00007f8ab912f374: mov    %rax,(%rsp)
  0x00007f8ab912f378: mov    %rsi,0x20(%rsp)
  0x00007f8ab912f37d: mov    %rdx,0x18(%rsp)
  0x00007f8ab912f382: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab912f38c: mov    %rax,0x10(%rsp)
  0x00007f8ab912f391: mov    %rcx,0x8(%rsp)
  0x00007f8ab912f396: mov    0x40(%rbx),%rcx
  0x00007f8ab912f39a: jmpq   *%rcx

AHE@0x00007f8ac80d7df8: 0xb0000000 i2c: 0x00007f8ab912f460 c2i: 0x00007f8ab912f574 c2iUV: 0x00007f8ab912f547
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab912f574
  0x00007f8ab912f460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912f464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912f46e: cmp    %r11,%rax
  0x00007f8ab912f471: jbe    0x00007f8ab912f48a
  0x00007f8ab912f477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912f481: cmp    %r11,%rax
  0x00007f8ab912f484: jb     0x00007f8ab912f527
  0x00007f8ab912f48a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912f494: cmp    %r11,%rax
  0x00007f8ab912f497: jbe    0x00007f8ab912f4b0
  0x00007f8ab912f49d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912f4a7: cmp    %r11,%rax
  0x00007f8ab912f4aa: jb     0x00007f8ab912f527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912f4b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912f4b5: sub    $0x80,%rsp
  0x00007f8ab912f4bc: mov    %rax,0x78(%rsp)
  0x00007f8ab912f4c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab912f4c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab912f4cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab912f4d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab912f4d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab912f4da: mov    %rdi,0x40(%rsp)
  0x00007f8ab912f4df: mov    %r8,0x38(%rsp)
  0x00007f8ab912f4e4: mov    %r9,0x30(%rsp)
  0x00007f8ab912f4e9: mov    %r10,0x28(%rsp)
  0x00007f8ab912f4ee: mov    %r11,0x20(%rsp)
  0x00007f8ab912f4f3: mov    %r12,0x18(%rsp)
  0x00007f8ab912f4f8: mov    %r13,0x10(%rsp)
  0x00007f8ab912f4fd: mov    %r14,0x8(%rsp)
  0x00007f8ab912f502: mov    %r15,(%rsp)
  0x00007f8ab912f506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912f510: movabs $0x7f8ab912f4b0,%rsi
  0x00007f8ab912f51a: mov    %rsp,%rdx
  0x00007f8ab912f51d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f521: callq  0x00007f8aceddb9fa
  0x00007f8ab912f526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912f527: mov    %rsp,%r11
  0x00007f8ab912f52a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f52e: push   %rax
  0x00007f8ab912f52f: mov    %r11,%rax
  0x00007f8ab912f532: mov    0x50(%rbx),%r11
  0x00007f8ab912f536: mov    0x8(%rax),%rsi
  0x00007f8ab912f53a: mov    %rbx,0x258(%r15)
  0x00007f8ab912f541: mov    %rbx,%rax
  0x00007f8ab912f544: jmpq   *%r11
  0x00007f8ab912f547: mov    0x8(%rsi),%ebx
  0x00007f8ab912f54a: shl    $0x3,%rbx
  0x00007f8ab912f54e: cmp    0x10(%rax),%rbx
  0x00007f8ab912f552: mov    0x8(%rax),%rbx
  0x00007f8ab912f556: je     0x00007f8ab912f561
  0x00007f8ab912f55c: jmpq   0x00007f8ab9105c40
  0x00007f8ab912f561: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912f569: je     0x00007f8ab912f664
  0x00007f8ab912f56f: jmpq   0x00007f8ab9105c40
  0x00007f8ab912f574: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912f57c: je     0x00007f8ab912f664
  0x00007f8ab912f582: mov    %rsp,%r13
  0x00007f8ab912f585: mov    (%rsp),%rax
  0x00007f8ab912f589: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f58d: pushfq 
  0x00007f8ab912f58e: sub    $0x8,%rsp
  0x00007f8ab912f592: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912f597: sub    $0x80,%rsp
  0x00007f8ab912f59e: mov    %rax,0x78(%rsp)
  0x00007f8ab912f5a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab912f5a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab912f5ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab912f5b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab912f5b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab912f5bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab912f5c1: mov    %r8,0x38(%rsp)
  0x00007f8ab912f5c6: mov    %r9,0x30(%rsp)
  0x00007f8ab912f5cb: mov    %r10,0x28(%rsp)
  0x00007f8ab912f5d0: mov    %r11,0x20(%rsp)
  0x00007f8ab912f5d5: mov    %r12,0x18(%rsp)
  0x00007f8ab912f5da: mov    %r13,0x10(%rsp)
  0x00007f8ab912f5df: mov    %r14,0x8(%rsp)
  0x00007f8ab912f5e4: mov    %r15,(%rsp)
  0x00007f8ab912f5e8: sub    $0x200,%rsp
  0x00007f8ab912f5ef: fxsave64 (%rsp)
  0x00007f8ab912f5f4: mov    %rbx,%rdi
  0x00007f8ab912f5f7: mov    %rax,%rsi
  0x00007f8ab912f5fa: callq  0x00007f8acef8bbca
  0x00007f8ab912f5ff: fxrstor64 (%rsp)
  0x00007f8ab912f604: add    $0x200,%rsp
  0x00007f8ab912f60b: mov    (%rsp),%r15
  0x00007f8ab912f60f: mov    0x8(%rsp),%r14
  0x00007f8ab912f614: mov    0x10(%rsp),%r13
  0x00007f8ab912f619: mov    0x18(%rsp),%r12
  0x00007f8ab912f61e: mov    0x20(%rsp),%r11
  0x00007f8ab912f623: mov    0x28(%rsp),%r10
  0x00007f8ab912f628: mov    0x30(%rsp),%r9
  0x00007f8ab912f62d: mov    0x38(%rsp),%r8
  0x00007f8ab912f632: mov    0x40(%rsp),%rdi
  0x00007f8ab912f637: mov    0x48(%rsp),%rsi
  0x00007f8ab912f63c: mov    0x50(%rsp),%rbp
  0x00007f8ab912f641: mov    0x60(%rsp),%rbx
  0x00007f8ab912f646: mov    0x68(%rsp),%rdx
  0x00007f8ab912f64b: mov    0x70(%rsp),%rcx
  0x00007f8ab912f650: mov    0x78(%rsp),%rax
  0x00007f8ab912f655: add    $0x80,%rsp
  0x00007f8ab912f65c: add    $0x8,%rsp
  0x00007f8ab912f660: popfq  
  0x00007f8ab912f661: mov    %r13,%rsp
  0x00007f8ab912f664: pop    %rax
  0x00007f8ab912f665: mov    %rsp,%r13
  0x00007f8ab912f668: sub    $0x10,%rsp
  0x00007f8ab912f66c: mov    %rax,(%rsp)
  0x00007f8ab912f670: mov    %rsi,0x8(%rsp)
  0x00007f8ab912f675: mov    0x40(%rbx),%rcx
  0x00007f8ab912f679: jmpq   *%rcx

AHE@0x00007f8ac80d7e40: 0xb0000000 i2c: 0x00007f8ab912f720 c2i: 0x00007f8ab912f834 c2iUV: 0x00007f8ab912f807
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab912f834
  0x00007f8ab912f720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912f724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912f72e: cmp    %r11,%rax
  0x00007f8ab912f731: jbe    0x00007f8ab912f74a
  0x00007f8ab912f737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912f741: cmp    %r11,%rax
  0x00007f8ab912f744: jb     0x00007f8ab912f7e7
  0x00007f8ab912f74a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912f754: cmp    %r11,%rax
  0x00007f8ab912f757: jbe    0x00007f8ab912f770
  0x00007f8ab912f75d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912f767: cmp    %r11,%rax
  0x00007f8ab912f76a: jb     0x00007f8ab912f7e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912f770: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912f775: sub    $0x80,%rsp
  0x00007f8ab912f77c: mov    %rax,0x78(%rsp)
  0x00007f8ab912f781: mov    %rcx,0x70(%rsp)
  0x00007f8ab912f786: mov    %rdx,0x68(%rsp)
  0x00007f8ab912f78b: mov    %rbx,0x60(%rsp)
  0x00007f8ab912f790: mov    %rbp,0x50(%rsp)
  0x00007f8ab912f795: mov    %rsi,0x48(%rsp)
  0x00007f8ab912f79a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912f79f: mov    %r8,0x38(%rsp)
  0x00007f8ab912f7a4: mov    %r9,0x30(%rsp)
  0x00007f8ab912f7a9: mov    %r10,0x28(%rsp)
  0x00007f8ab912f7ae: mov    %r11,0x20(%rsp)
  0x00007f8ab912f7b3: mov    %r12,0x18(%rsp)
  0x00007f8ab912f7b8: mov    %r13,0x10(%rsp)
  0x00007f8ab912f7bd: mov    %r14,0x8(%rsp)
  0x00007f8ab912f7c2: mov    %r15,(%rsp)
  0x00007f8ab912f7c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912f7d0: movabs $0x7f8ab912f770,%rsi
  0x00007f8ab912f7da: mov    %rsp,%rdx
  0x00007f8ab912f7dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f7e1: callq  0x00007f8aceddb9fa
  0x00007f8ab912f7e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912f7e7: mov    %rsp,%r11
  0x00007f8ab912f7ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f7ee: push   %rax
  0x00007f8ab912f7ef: mov    %r11,%rax
  0x00007f8ab912f7f2: mov    0x50(%rbx),%r11
  0x00007f8ab912f7f6: mov    0x8(%rax),%rsi
  0x00007f8ab912f7fa: mov    %rbx,0x258(%r15)
  0x00007f8ab912f801: mov    %rbx,%rax
  0x00007f8ab912f804: jmpq   *%r11
  0x00007f8ab912f807: mov    0x8(%rsi),%ebx
  0x00007f8ab912f80a: shl    $0x3,%rbx
  0x00007f8ab912f80e: cmp    0x10(%rax),%rbx
  0x00007f8ab912f812: mov    0x8(%rax),%rbx
  0x00007f8ab912f816: je     0x00007f8ab912f821
  0x00007f8ab912f81c: jmpq   0x00007f8ab9105c40
  0x00007f8ab912f821: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912f829: je     0x00007f8ab912f924
  0x00007f8ab912f82f: jmpq   0x00007f8ab9105c40
  0x00007f8ab912f834: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912f83c: je     0x00007f8ab912f924
  0x00007f8ab912f842: mov    %rsp,%r13
  0x00007f8ab912f845: mov    (%rsp),%rax
  0x00007f8ab912f849: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912f84d: pushfq 
  0x00007f8ab912f84e: sub    $0x8,%rsp
  0x00007f8ab912f852: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912f857: sub    $0x80,%rsp
  0x00007f8ab912f85e: mov    %rax,0x78(%rsp)
  0x00007f8ab912f863: mov    %rcx,0x70(%rsp)
  0x00007f8ab912f868: mov    %rdx,0x68(%rsp)
  0x00007f8ab912f86d: mov    %rbx,0x60(%rsp)
  0x00007f8ab912f872: mov    %rbp,0x50(%rsp)
  0x00007f8ab912f877: mov    %rsi,0x48(%rsp)
  0x00007f8ab912f87c: mov    %rdi,0x40(%rsp)
  0x00007f8ab912f881: mov    %r8,0x38(%rsp)
  0x00007f8ab912f886: mov    %r9,0x30(%rsp)
  0x00007f8ab912f88b: mov    %r10,0x28(%rsp)
  0x00007f8ab912f890: mov    %r11,0x20(%rsp)
  0x00007f8ab912f895: mov    %r12,0x18(%rsp)
  0x00007f8ab912f89a: mov    %r13,0x10(%rsp)
  0x00007f8ab912f89f: mov    %r14,0x8(%rsp)
  0x00007f8ab912f8a4: mov    %r15,(%rsp)
  0x00007f8ab912f8a8: sub    $0x200,%rsp
  0x00007f8ab912f8af: fxsave64 (%rsp)
  0x00007f8ab912f8b4: mov    %rbx,%rdi
  0x00007f8ab912f8b7: mov    %rax,%rsi
  0x00007f8ab912f8ba: callq  0x00007f8acef8bbca
  0x00007f8ab912f8bf: fxrstor64 (%rsp)
  0x00007f8ab912f8c4: add    $0x200,%rsp
  0x00007f8ab912f8cb: mov    (%rsp),%r15
  0x00007f8ab912f8cf: mov    0x8(%rsp),%r14
  0x00007f8ab912f8d4: mov    0x10(%rsp),%r13
  0x00007f8ab912f8d9: mov    0x18(%rsp),%r12
  0x00007f8ab912f8de: mov    0x20(%rsp),%r11
  0x00007f8ab912f8e3: mov    0x28(%rsp),%r10
  0x00007f8ab912f8e8: mov    0x30(%rsp),%r9
  0x00007f8ab912f8ed: mov    0x38(%rsp),%r8
  0x00007f8ab912f8f2: mov    0x40(%rsp),%rdi
  0x00007f8ab912f8f7: mov    0x48(%rsp),%rsi
  0x00007f8ab912f8fc: mov    0x50(%rsp),%rbp
  0x00007f8ab912f901: mov    0x60(%rsp),%rbx
  0x00007f8ab912f906: mov    0x68(%rsp),%rdx
  0x00007f8ab912f90b: mov    0x70(%rsp),%rcx
  0x00007f8ab912f910: mov    0x78(%rsp),%rax
  0x00007f8ab912f915: add    $0x80,%rsp
  0x00007f8ab912f91c: add    $0x8,%rsp
  0x00007f8ab912f920: popfq  
  0x00007f8ab912f921: mov    %r13,%rsp
  0x00007f8ab912f924: pop    %rax
  0x00007f8ab912f925: mov    %rsp,%r13
  0x00007f8ab912f928: sub    $0x10,%rsp
  0x00007f8ab912f92c: mov    %rax,(%rsp)
  0x00007f8ab912f930: mov    %rsi,0x8(%rsp)
  0x00007f8ab912f935: mov    0x40(%rbx),%rcx
  0x00007f8ab912f939: jmpq   *%rcx

AHE@0x00007f8ac80d7e88: 0xb0000000 i2c: 0x00007f8ab912f9e0 c2i: 0x00007f8ab912faf4 c2iUV: 0x00007f8ab912fac7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab912faf4
  0x00007f8ab912f9e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912f9e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912f9ee: cmp    %r11,%rax
  0x00007f8ab912f9f1: jbe    0x00007f8ab912fa0a
  0x00007f8ab912f9f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912fa01: cmp    %r11,%rax
  0x00007f8ab912fa04: jb     0x00007f8ab912faa7
  0x00007f8ab912fa0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912fa14: cmp    %r11,%rax
  0x00007f8ab912fa17: jbe    0x00007f8ab912fa30
  0x00007f8ab912fa1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912fa27: cmp    %r11,%rax
  0x00007f8ab912fa2a: jb     0x00007f8ab912faa7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912fa30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912fa35: sub    $0x80,%rsp
  0x00007f8ab912fa3c: mov    %rax,0x78(%rsp)
  0x00007f8ab912fa41: mov    %rcx,0x70(%rsp)
  0x00007f8ab912fa46: mov    %rdx,0x68(%rsp)
  0x00007f8ab912fa4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab912fa50: mov    %rbp,0x50(%rsp)
  0x00007f8ab912fa55: mov    %rsi,0x48(%rsp)
  0x00007f8ab912fa5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912fa5f: mov    %r8,0x38(%rsp)
  0x00007f8ab912fa64: mov    %r9,0x30(%rsp)
  0x00007f8ab912fa69: mov    %r10,0x28(%rsp)
  0x00007f8ab912fa6e: mov    %r11,0x20(%rsp)
  0x00007f8ab912fa73: mov    %r12,0x18(%rsp)
  0x00007f8ab912fa78: mov    %r13,0x10(%rsp)
  0x00007f8ab912fa7d: mov    %r14,0x8(%rsp)
  0x00007f8ab912fa82: mov    %r15,(%rsp)
  0x00007f8ab912fa86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912fa90: movabs $0x7f8ab912fa30,%rsi
  0x00007f8ab912fa9a: mov    %rsp,%rdx
  0x00007f8ab912fa9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912faa1: callq  0x00007f8aceddb9fa
  0x00007f8ab912faa6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912faa7: mov    %rsp,%r11
  0x00007f8ab912faaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912faae: push   %rax
  0x00007f8ab912faaf: mov    %r11,%rax
  0x00007f8ab912fab2: mov    0x50(%rbx),%r11
  0x00007f8ab912fab6: mov    0x8(%rax),%rsi
  0x00007f8ab912faba: mov    %rbx,0x258(%r15)
  0x00007f8ab912fac1: mov    %rbx,%rax
  0x00007f8ab912fac4: jmpq   *%r11
  0x00007f8ab912fac7: mov    0x8(%rsi),%ebx
  0x00007f8ab912faca: shl    $0x3,%rbx
  0x00007f8ab912face: cmp    0x10(%rax),%rbx
  0x00007f8ab912fad2: mov    0x8(%rax),%rbx
  0x00007f8ab912fad6: je     0x00007f8ab912fae1
  0x00007f8ab912fadc: jmpq   0x00007f8ab9105c40
  0x00007f8ab912fae1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912fae9: je     0x00007f8ab912fbe4
  0x00007f8ab912faef: jmpq   0x00007f8ab9105c40
  0x00007f8ab912faf4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912fafc: je     0x00007f8ab912fbe4
  0x00007f8ab912fb02: mov    %rsp,%r13
  0x00007f8ab912fb05: mov    (%rsp),%rax
  0x00007f8ab912fb09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912fb0d: pushfq 
  0x00007f8ab912fb0e: sub    $0x8,%rsp
  0x00007f8ab912fb12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912fb17: sub    $0x80,%rsp
  0x00007f8ab912fb1e: mov    %rax,0x78(%rsp)
  0x00007f8ab912fb23: mov    %rcx,0x70(%rsp)
  0x00007f8ab912fb28: mov    %rdx,0x68(%rsp)
  0x00007f8ab912fb2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab912fb32: mov    %rbp,0x50(%rsp)
  0x00007f8ab912fb37: mov    %rsi,0x48(%rsp)
  0x00007f8ab912fb3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab912fb41: mov    %r8,0x38(%rsp)
  0x00007f8ab912fb46: mov    %r9,0x30(%rsp)
  0x00007f8ab912fb4b: mov    %r10,0x28(%rsp)
  0x00007f8ab912fb50: mov    %r11,0x20(%rsp)
  0x00007f8ab912fb55: mov    %r12,0x18(%rsp)
  0x00007f8ab912fb5a: mov    %r13,0x10(%rsp)
  0x00007f8ab912fb5f: mov    %r14,0x8(%rsp)
  0x00007f8ab912fb64: mov    %r15,(%rsp)
  0x00007f8ab912fb68: sub    $0x200,%rsp
  0x00007f8ab912fb6f: fxsave64 (%rsp)
  0x00007f8ab912fb74: mov    %rbx,%rdi
  0x00007f8ab912fb77: mov    %rax,%rsi
  0x00007f8ab912fb7a: callq  0x00007f8acef8bbca
  0x00007f8ab912fb7f: fxrstor64 (%rsp)
  0x00007f8ab912fb84: add    $0x200,%rsp
  0x00007f8ab912fb8b: mov    (%rsp),%r15
  0x00007f8ab912fb8f: mov    0x8(%rsp),%r14
  0x00007f8ab912fb94: mov    0x10(%rsp),%r13
  0x00007f8ab912fb99: mov    0x18(%rsp),%r12
  0x00007f8ab912fb9e: mov    0x20(%rsp),%r11
  0x00007f8ab912fba3: mov    0x28(%rsp),%r10
  0x00007f8ab912fba8: mov    0x30(%rsp),%r9
  0x00007f8ab912fbad: mov    0x38(%rsp),%r8
  0x00007f8ab912fbb2: mov    0x40(%rsp),%rdi
  0x00007f8ab912fbb7: mov    0x48(%rsp),%rsi
  0x00007f8ab912fbbc: mov    0x50(%rsp),%rbp
  0x00007f8ab912fbc1: mov    0x60(%rsp),%rbx
  0x00007f8ab912fbc6: mov    0x68(%rsp),%rdx
  0x00007f8ab912fbcb: mov    0x70(%rsp),%rcx
  0x00007f8ab912fbd0: mov    0x78(%rsp),%rax
  0x00007f8ab912fbd5: add    $0x80,%rsp
  0x00007f8ab912fbdc: add    $0x8,%rsp
  0x00007f8ab912fbe0: popfq  
  0x00007f8ab912fbe1: mov    %r13,%rsp
  0x00007f8ab912fbe4: pop    %rax
  0x00007f8ab912fbe5: mov    %rsp,%r13
  0x00007f8ab912fbe8: sub    $0x10,%rsp
  0x00007f8ab912fbec: mov    %rax,(%rsp)
  0x00007f8ab912fbf0: mov    %rsi,0x8(%rsp)
  0x00007f8ab912fbf5: mov    0x40(%rbx),%rcx
  0x00007f8ab912fbf9: jmpq   *%rcx

AHE@0x00007f8ac80d7ed0: 0xbb000000 i2c: 0x00007f8ab912fca0 c2i: 0x00007f8ab912fdb8 c2iUV: 0x00007f8ab912fd8b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab912fdb8
  0x00007f8ab912fca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912fca4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912fcae: cmp    %r11,%rax
  0x00007f8ab912fcb1: jbe    0x00007f8ab912fcca
  0x00007f8ab912fcb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912fcc1: cmp    %r11,%rax
  0x00007f8ab912fcc4: jb     0x00007f8ab912fd67
  0x00007f8ab912fcca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912fcd4: cmp    %r11,%rax
  0x00007f8ab912fcd7: jbe    0x00007f8ab912fcf0
  0x00007f8ab912fcdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912fce7: cmp    %r11,%rax
  0x00007f8ab912fcea: jb     0x00007f8ab912fd67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912fcf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912fcf5: sub    $0x80,%rsp
  0x00007f8ab912fcfc: mov    %rax,0x78(%rsp)
  0x00007f8ab912fd01: mov    %rcx,0x70(%rsp)
  0x00007f8ab912fd06: mov    %rdx,0x68(%rsp)
  0x00007f8ab912fd0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab912fd10: mov    %rbp,0x50(%rsp)
  0x00007f8ab912fd15: mov    %rsi,0x48(%rsp)
  0x00007f8ab912fd1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab912fd1f: mov    %r8,0x38(%rsp)
  0x00007f8ab912fd24: mov    %r9,0x30(%rsp)
  0x00007f8ab912fd29: mov    %r10,0x28(%rsp)
  0x00007f8ab912fd2e: mov    %r11,0x20(%rsp)
  0x00007f8ab912fd33: mov    %r12,0x18(%rsp)
  0x00007f8ab912fd38: mov    %r13,0x10(%rsp)
  0x00007f8ab912fd3d: mov    %r14,0x8(%rsp)
  0x00007f8ab912fd42: mov    %r15,(%rsp)
  0x00007f8ab912fd46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab912fd50: movabs $0x7f8ab912fcf0,%rsi
  0x00007f8ab912fd5a: mov    %rsp,%rdx
  0x00007f8ab912fd5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912fd61: callq  0x00007f8aceddb9fa
  0x00007f8ab912fd66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab912fd67: mov    %rsp,%r11
  0x00007f8ab912fd6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912fd6e: push   %rax
  0x00007f8ab912fd6f: mov    %r11,%rax
  0x00007f8ab912fd72: mov    0x50(%rbx),%r11
  0x00007f8ab912fd76: mov    0x10(%rax),%rsi
  0x00007f8ab912fd7a: mov    0x8(%rax),%rdx
  0x00007f8ab912fd7e: mov    %rbx,0x258(%r15)
  0x00007f8ab912fd85: mov    %rbx,%rax
  0x00007f8ab912fd88: jmpq   *%r11
  0x00007f8ab912fd8b: mov    0x8(%rsi),%ebx
  0x00007f8ab912fd8e: shl    $0x3,%rbx
  0x00007f8ab912fd92: cmp    0x10(%rax),%rbx
  0x00007f8ab912fd96: mov    0x8(%rax),%rbx
  0x00007f8ab912fd9a: je     0x00007f8ab912fda5
  0x00007f8ab912fda0: jmpq   0x00007f8ab9105c40
  0x00007f8ab912fda5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912fdad: je     0x00007f8ab912fea8
  0x00007f8ab912fdb3: jmpq   0x00007f8ab9105c40
  0x00007f8ab912fdb8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab912fdc0: je     0x00007f8ab912fea8
  0x00007f8ab912fdc6: mov    %rsp,%r13
  0x00007f8ab912fdc9: mov    (%rsp),%rax
  0x00007f8ab912fdcd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab912fdd1: pushfq 
  0x00007f8ab912fdd2: sub    $0x8,%rsp
  0x00007f8ab912fdd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912fddb: sub    $0x80,%rsp
  0x00007f8ab912fde2: mov    %rax,0x78(%rsp)
  0x00007f8ab912fde7: mov    %rcx,0x70(%rsp)
  0x00007f8ab912fdec: mov    %rdx,0x68(%rsp)
  0x00007f8ab912fdf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab912fdf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab912fdfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab912fe00: mov    %rdi,0x40(%rsp)
  0x00007f8ab912fe05: mov    %r8,0x38(%rsp)
  0x00007f8ab912fe0a: mov    %r9,0x30(%rsp)
  0x00007f8ab912fe0f: mov    %r10,0x28(%rsp)
  0x00007f8ab912fe14: mov    %r11,0x20(%rsp)
  0x00007f8ab912fe19: mov    %r12,0x18(%rsp)
  0x00007f8ab912fe1e: mov    %r13,0x10(%rsp)
  0x00007f8ab912fe23: mov    %r14,0x8(%rsp)
  0x00007f8ab912fe28: mov    %r15,(%rsp)
  0x00007f8ab912fe2c: sub    $0x200,%rsp
  0x00007f8ab912fe33: fxsave64 (%rsp)
  0x00007f8ab912fe38: mov    %rbx,%rdi
  0x00007f8ab912fe3b: mov    %rax,%rsi
  0x00007f8ab912fe3e: callq  0x00007f8acef8bbca
  0x00007f8ab912fe43: fxrstor64 (%rsp)
  0x00007f8ab912fe48: add    $0x200,%rsp
  0x00007f8ab912fe4f: mov    (%rsp),%r15
  0x00007f8ab912fe53: mov    0x8(%rsp),%r14
  0x00007f8ab912fe58: mov    0x10(%rsp),%r13
  0x00007f8ab912fe5d: mov    0x18(%rsp),%r12
  0x00007f8ab912fe62: mov    0x20(%rsp),%r11
  0x00007f8ab912fe67: mov    0x28(%rsp),%r10
  0x00007f8ab912fe6c: mov    0x30(%rsp),%r9
  0x00007f8ab912fe71: mov    0x38(%rsp),%r8
  0x00007f8ab912fe76: mov    0x40(%rsp),%rdi
  0x00007f8ab912fe7b: mov    0x48(%rsp),%rsi
  0x00007f8ab912fe80: mov    0x50(%rsp),%rbp
  0x00007f8ab912fe85: mov    0x60(%rsp),%rbx
  0x00007f8ab912fe8a: mov    0x68(%rsp),%rdx
  0x00007f8ab912fe8f: mov    0x70(%rsp),%rcx
  0x00007f8ab912fe94: mov    0x78(%rsp),%rax
  0x00007f8ab912fe99: add    $0x80,%rsp
  0x00007f8ab912fea0: add    $0x8,%rsp
  0x00007f8ab912fea4: popfq  
  0x00007f8ab912fea5: mov    %r13,%rsp
  0x00007f8ab912fea8: pop    %rax
  0x00007f8ab912fea9: mov    %rsp,%r13
  0x00007f8ab912feac: sub    $0x20,%rsp
  0x00007f8ab912feb0: mov    %rax,(%rsp)
  0x00007f8ab912feb4: mov    %rsi,0x10(%rsp)
  0x00007f8ab912feb9: mov    %rdx,0x8(%rsp)
  0x00007f8ab912febe: mov    0x40(%rbx),%rcx
  0x00007f8ab912fec2: jmpq   *%rcx

AHE@0x00007f8ac80d7f18: 0xbabe0000 i2c: 0x00007f8ab912ffa0 c2i: 0x00007f8ab91300bb c2iUV: 0x00007f8ab913008e
i2c argument handler #0 for: receiver (ZJ)V (570 bytes generated)
c2i argument handler starts at 0x7f8ab91300bb
  0x00007f8ab912ffa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab912ffa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab912ffae: cmp    %r11,%rax
  0x00007f8ab912ffb1: jbe    0x00007f8ab912ffca
  0x00007f8ab912ffb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab912ffc1: cmp    %r11,%rax
  0x00007f8ab912ffc4: jb     0x00007f8ab9130067
  0x00007f8ab912ffca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab912ffd4: cmp    %r11,%rax
  0x00007f8ab912ffd7: jbe    0x00007f8ab912fff0
  0x00007f8ab912ffdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab912ffe7: cmp    %r11,%rax
  0x00007f8ab912ffea: jb     0x00007f8ab9130067
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab912fff0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab912fff5: sub    $0x80,%rsp
  0x00007f8ab912fffc: mov    %rax,0x78(%rsp)
  0x00007f8ab9130001: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130006: mov    %rdx,0x68(%rsp)
  0x00007f8ab913000b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130010: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130015: mov    %rsi,0x48(%rsp)
  0x00007f8ab913001a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913001f: mov    %r8,0x38(%rsp)
  0x00007f8ab9130024: mov    %r9,0x30(%rsp)
  0x00007f8ab9130029: mov    %r10,0x28(%rsp)
  0x00007f8ab913002e: mov    %r11,0x20(%rsp)
  0x00007f8ab9130033: mov    %r12,0x18(%rsp)
  0x00007f8ab9130038: mov    %r13,0x10(%rsp)
  0x00007f8ab913003d: mov    %r14,0x8(%rsp)
  0x00007f8ab9130042: mov    %r15,(%rsp)
  0x00007f8ab9130046: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9130050: movabs $0x7f8ab912fff0,%rsi
  0x00007f8ab913005a: mov    %rsp,%rdx
  0x00007f8ab913005d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130061: callq  0x00007f8aceddb9fa
  0x00007f8ab9130066: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9130067: mov    %rsp,%r11
  0x00007f8ab913006a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913006e: push   %rax
  0x00007f8ab913006f: mov    %r11,%rax
  0x00007f8ab9130072: mov    0x50(%rbx),%r11
  0x00007f8ab9130076: mov    0x20(%rax),%rsi
  0x00007f8ab913007a: mov    0x18(%rax),%edx
  0x00007f8ab913007d: mov    0x8(%rax),%rcx
  0x00007f8ab9130081: mov    %rbx,0x258(%r15)
  0x00007f8ab9130088: mov    %rbx,%rax
  0x00007f8ab913008b: jmpq   *%r11
  0x00007f8ab913008e: mov    0x8(%rsi),%ebx
  0x00007f8ab9130091: shl    $0x3,%rbx
  0x00007f8ab9130095: cmp    0x10(%rax),%rbx
  0x00007f8ab9130099: mov    0x8(%rax),%rbx
  0x00007f8ab913009d: je     0x00007f8ab91300a8
  0x00007f8ab91300a3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91300a8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91300b0: je     0x00007f8ab91301ab
  0x00007f8ab91300b6: jmpq   0x00007f8ab9105c40
  0x00007f8ab91300bb: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91300c3: je     0x00007f8ab91301ab
  0x00007f8ab91300c9: mov    %rsp,%r13
  0x00007f8ab91300cc: mov    (%rsp),%rax
  0x00007f8ab91300d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91300d4: pushfq 
  0x00007f8ab91300d5: sub    $0x8,%rsp
  0x00007f8ab91300d9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91300de: sub    $0x80,%rsp
  0x00007f8ab91300e5: mov    %rax,0x78(%rsp)
  0x00007f8ab91300ea: mov    %rcx,0x70(%rsp)
  0x00007f8ab91300ef: mov    %rdx,0x68(%rsp)
  0x00007f8ab91300f4: mov    %rbx,0x60(%rsp)
  0x00007f8ab91300f9: mov    %rbp,0x50(%rsp)
  0x00007f8ab91300fe: mov    %rsi,0x48(%rsp)
  0x00007f8ab9130103: mov    %rdi,0x40(%rsp)
  0x00007f8ab9130108: mov    %r8,0x38(%rsp)
  0x00007f8ab913010d: mov    %r9,0x30(%rsp)
  0x00007f8ab9130112: mov    %r10,0x28(%rsp)
  0x00007f8ab9130117: mov    %r11,0x20(%rsp)
  0x00007f8ab913011c: mov    %r12,0x18(%rsp)
  0x00007f8ab9130121: mov    %r13,0x10(%rsp)
  0x00007f8ab9130126: mov    %r14,0x8(%rsp)
  0x00007f8ab913012b: mov    %r15,(%rsp)
  0x00007f8ab913012f: sub    $0x200,%rsp
  0x00007f8ab9130136: fxsave64 (%rsp)
  0x00007f8ab913013b: mov    %rbx,%rdi
  0x00007f8ab913013e: mov    %rax,%rsi
  0x00007f8ab9130141: callq  0x00007f8acef8bbca
  0x00007f8ab9130146: fxrstor64 (%rsp)
  0x00007f8ab913014b: add    $0x200,%rsp
  0x00007f8ab9130152: mov    (%rsp),%r15
  0x00007f8ab9130156: mov    0x8(%rsp),%r14
  0x00007f8ab913015b: mov    0x10(%rsp),%r13
  0x00007f8ab9130160: mov    0x18(%rsp),%r12
  0x00007f8ab9130165: mov    0x20(%rsp),%r11
  0x00007f8ab913016a: mov    0x28(%rsp),%r10
  0x00007f8ab913016f: mov    0x30(%rsp),%r9
  0x00007f8ab9130174: mov    0x38(%rsp),%r8
  0x00007f8ab9130179: mov    0x40(%rsp),%rdi
  0x00007f8ab913017e: mov    0x48(%rsp),%rsi
  0x00007f8ab9130183: mov    0x50(%rsp),%rbp
  0x00007f8ab9130188: mov    0x60(%rsp),%rbx
  0x00007f8ab913018d: mov    0x68(%rsp),%rdx
  0x00007f8ab9130192: mov    0x70(%rsp),%rcx
  0x00007f8ab9130197: mov    0x78(%rsp),%rax
  0x00007f8ab913019c: add    $0x80,%rsp
  0x00007f8ab91301a3: add    $0x8,%rsp
  0x00007f8ab91301a7: popfq  
  0x00007f8ab91301a8: mov    %r13,%rsp
  0x00007f8ab91301ab: pop    %rax
  0x00007f8ab91301ac: mov    %rsp,%r13
  0x00007f8ab91301af: sub    $0x30,%rsp
  0x00007f8ab91301b3: mov    %rax,(%rsp)
  0x00007f8ab91301b7: mov    %rsi,0x20(%rsp)
  0x00007f8ab91301bc: mov    %edx,0x18(%rsp)
  0x00007f8ab91301c0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91301ca: mov    %rax,0x10(%rsp)
  0x00007f8ab91301cf: mov    %rcx,0x8(%rsp)
  0x00007f8ab91301d4: mov    0x40(%rbx),%rcx
  0x00007f8ab91301d8: jmpq   *%rcx

AHE@0x00007f8ac80d7f60: 0xbbbebbebe0000000 i2c: 0x00007f8ab91302a0 c2i: 0x00007f8ab91303c8 c2iUV: 0x00007f8ab913039b
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;JJ)V (629 bytes generated)
c2i argument handler starts at 0x7f8ab91303c8
  0x00007f8ab91302a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91302a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91302ae: cmp    %r11,%rax
  0x00007f8ab91302b1: jbe    0x00007f8ab91302ca
  0x00007f8ab91302b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91302c1: cmp    %r11,%rax
  0x00007f8ab91302c4: jb     0x00007f8ab9130367
  0x00007f8ab91302ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91302d4: cmp    %r11,%rax
  0x00007f8ab91302d7: jbe    0x00007f8ab91302f0
  0x00007f8ab91302dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91302e7: cmp    %r11,%rax
  0x00007f8ab91302ea: jb     0x00007f8ab9130367
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91302f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91302f5: sub    $0x80,%rsp
  0x00007f8ab91302fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9130301: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130306: mov    %rdx,0x68(%rsp)
  0x00007f8ab913030b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130310: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130315: mov    %rsi,0x48(%rsp)
  0x00007f8ab913031a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913031f: mov    %r8,0x38(%rsp)
  0x00007f8ab9130324: mov    %r9,0x30(%rsp)
  0x00007f8ab9130329: mov    %r10,0x28(%rsp)
  0x00007f8ab913032e: mov    %r11,0x20(%rsp)
  0x00007f8ab9130333: mov    %r12,0x18(%rsp)
  0x00007f8ab9130338: mov    %r13,0x10(%rsp)
  0x00007f8ab913033d: mov    %r14,0x8(%rsp)
  0x00007f8ab9130342: mov    %r15,(%rsp)
  0x00007f8ab9130346: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9130350: movabs $0x7f8ab91302f0,%rsi
  0x00007f8ab913035a: mov    %rsp,%rdx
  0x00007f8ab913035d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130361: callq  0x00007f8aceddb9fa
  0x00007f8ab9130366: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9130367: mov    %rsp,%r11
  0x00007f8ab913036a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913036e: push   %rax
  0x00007f8ab913036f: mov    %r11,%rax
  0x00007f8ab9130372: mov    0x50(%rbx),%r11
  0x00007f8ab9130376: mov    0x48(%rax),%rsi
  0x00007f8ab913037a: mov    0x40(%rax),%rdx
  0x00007f8ab913037e: mov    0x30(%rax),%rcx
  0x00007f8ab9130382: mov    0x28(%rax),%r8
  0x00007f8ab9130386: mov    0x18(%rax),%r9
  0x00007f8ab913038a: mov    0x8(%rax),%rdi
  0x00007f8ab913038e: mov    %rbx,0x258(%r15)
  0x00007f8ab9130395: mov    %rbx,%rax
  0x00007f8ab9130398: jmpq   *%r11
  0x00007f8ab913039b: mov    0x8(%rsi),%ebx
  0x00007f8ab913039e: shl    $0x3,%rbx
  0x00007f8ab91303a2: cmp    0x10(%rax),%rbx
  0x00007f8ab91303a6: mov    0x8(%rax),%rbx
  0x00007f8ab91303aa: je     0x00007f8ab91303b5
  0x00007f8ab91303b0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91303b5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91303bd: je     0x00007f8ab91304b8
  0x00007f8ab91303c3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91303c8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91303d0: je     0x00007f8ab91304b8
  0x00007f8ab91303d6: mov    %rsp,%r13
  0x00007f8ab91303d9: mov    (%rsp),%rax
  0x00007f8ab91303dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91303e1: pushfq 
  0x00007f8ab91303e2: sub    $0x8,%rsp
  0x00007f8ab91303e6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91303eb: sub    $0x80,%rsp
  0x00007f8ab91303f2: mov    %rax,0x78(%rsp)
  0x00007f8ab91303f7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91303fc: mov    %rdx,0x68(%rsp)
  0x00007f8ab9130401: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130406: mov    %rbp,0x50(%rsp)
  0x00007f8ab913040b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9130410: mov    %rdi,0x40(%rsp)
  0x00007f8ab9130415: mov    %r8,0x38(%rsp)
  0x00007f8ab913041a: mov    %r9,0x30(%rsp)
  0x00007f8ab913041f: mov    %r10,0x28(%rsp)
  0x00007f8ab9130424: mov    %r11,0x20(%rsp)
  0x00007f8ab9130429: mov    %r12,0x18(%rsp)
  0x00007f8ab913042e: mov    %r13,0x10(%rsp)
  0x00007f8ab9130433: mov    %r14,0x8(%rsp)
  0x00007f8ab9130438: mov    %r15,(%rsp)
  0x00007f8ab913043c: sub    $0x200,%rsp
  0x00007f8ab9130443: fxsave64 (%rsp)
  0x00007f8ab9130448: mov    %rbx,%rdi
  0x00007f8ab913044b: mov    %rax,%rsi
  0x00007f8ab913044e: callq  0x00007f8acef8bbca
  0x00007f8ab9130453: fxrstor64 (%rsp)
  0x00007f8ab9130458: add    $0x200,%rsp
  0x00007f8ab913045f: mov    (%rsp),%r15
  0x00007f8ab9130463: mov    0x8(%rsp),%r14
  0x00007f8ab9130468: mov    0x10(%rsp),%r13
  0x00007f8ab913046d: mov    0x18(%rsp),%r12
  0x00007f8ab9130472: mov    0x20(%rsp),%r11
  0x00007f8ab9130477: mov    0x28(%rsp),%r10
  0x00007f8ab913047c: mov    0x30(%rsp),%r9
  0x00007f8ab9130481: mov    0x38(%rsp),%r8
  0x00007f8ab9130486: mov    0x40(%rsp),%rdi
  0x00007f8ab913048b: mov    0x48(%rsp),%rsi
  0x00007f8ab9130490: mov    0x50(%rsp),%rbp
  0x00007f8ab9130495: mov    0x60(%rsp),%rbx
  0x00007f8ab913049a: mov    0x68(%rsp),%rdx
  0x00007f8ab913049f: mov    0x70(%rsp),%rcx
  0x00007f8ab91304a4: mov    0x78(%rsp),%rax
  0x00007f8ab91304a9: add    $0x80,%rsp
  0x00007f8ab91304b0: add    $0x8,%rsp
  0x00007f8ab91304b4: popfq  
  0x00007f8ab91304b5: mov    %r13,%rsp
  0x00007f8ab91304b8: pop    %rax
  0x00007f8ab91304b9: mov    %rsp,%r13
  0x00007f8ab91304bc: sub    $0x50,%rsp
  0x00007f8ab91304c0: mov    %rax,(%rsp)
  0x00007f8ab91304c4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91304c9: mov    %rdx,0x40(%rsp)
  0x00007f8ab91304ce: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91304d8: mov    %rax,0x38(%rsp)
  0x00007f8ab91304dd: mov    %rcx,0x30(%rsp)
  0x00007f8ab91304e2: mov    %r8,0x28(%rsp)
  0x00007f8ab91304e7: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91304f1: mov    %rax,0x20(%rsp)
  0x00007f8ab91304f6: mov    %r9,0x18(%rsp)
  0x00007f8ab91304fb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9130505: mov    %rax,0x10(%rsp)
  0x00007f8ab913050a: mov    %rdi,0x8(%rsp)
  0x00007f8ab913050f: mov    0x40(%rbx),%rcx
  0x00007f8ab9130513: jmpq   *%rcx

AHE@0x00007f8ac80d7fa8: 0xbbebebe0 i2c: 0x00007f8ab91305e0 c2i: 0x00007f8ab9130700 c2iUV: 0x00007f8ab91306d3
i2c argument handler #0 for: receiver (JJJ)V (611 bytes generated)
c2i argument handler starts at 0x7f8ab9130700
  0x00007f8ab91305e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91305e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91305ee: cmp    %r11,%rax
  0x00007f8ab91305f1: jbe    0x00007f8ab913060a
  0x00007f8ab91305f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9130601: cmp    %r11,%rax
  0x00007f8ab9130604: jb     0x00007f8ab91306a7
  0x00007f8ab913060a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9130614: cmp    %r11,%rax
  0x00007f8ab9130617: jbe    0x00007f8ab9130630
  0x00007f8ab913061d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9130627: cmp    %r11,%rax
  0x00007f8ab913062a: jb     0x00007f8ab91306a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9130630: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9130635: sub    $0x80,%rsp
  0x00007f8ab913063c: mov    %rax,0x78(%rsp)
  0x00007f8ab9130641: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130646: mov    %rdx,0x68(%rsp)
  0x00007f8ab913064b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130650: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130655: mov    %rsi,0x48(%rsp)
  0x00007f8ab913065a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913065f: mov    %r8,0x38(%rsp)
  0x00007f8ab9130664: mov    %r9,0x30(%rsp)
  0x00007f8ab9130669: mov    %r10,0x28(%rsp)
  0x00007f8ab913066e: mov    %r11,0x20(%rsp)
  0x00007f8ab9130673: mov    %r12,0x18(%rsp)
  0x00007f8ab9130678: mov    %r13,0x10(%rsp)
  0x00007f8ab913067d: mov    %r14,0x8(%rsp)
  0x00007f8ab9130682: mov    %r15,(%rsp)
  0x00007f8ab9130686: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9130690: movabs $0x7f8ab9130630,%rsi
  0x00007f8ab913069a: mov    %rsp,%rdx
  0x00007f8ab913069d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91306a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91306a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91306a7: mov    %rsp,%r11
  0x00007f8ab91306aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91306ae: push   %rax
  0x00007f8ab91306af: mov    %r11,%rax
  0x00007f8ab91306b2: mov    0x50(%rbx),%r11
  0x00007f8ab91306b6: mov    0x38(%rax),%rsi
  0x00007f8ab91306ba: mov    0x28(%rax),%rdx
  0x00007f8ab91306be: mov    0x18(%rax),%rcx
  0x00007f8ab91306c2: mov    0x8(%rax),%r8
  0x00007f8ab91306c6: mov    %rbx,0x258(%r15)
  0x00007f8ab91306cd: mov    %rbx,%rax
  0x00007f8ab91306d0: jmpq   *%r11
  0x00007f8ab91306d3: mov    0x8(%rsi),%ebx
  0x00007f8ab91306d6: shl    $0x3,%rbx
  0x00007f8ab91306da: cmp    0x10(%rax),%rbx
  0x00007f8ab91306de: mov    0x8(%rax),%rbx
  0x00007f8ab91306e2: je     0x00007f8ab91306ed
  0x00007f8ab91306e8: jmpq   0x00007f8ab9105c40
  0x00007f8ab91306ed: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91306f5: je     0x00007f8ab91307f0
  0x00007f8ab91306fb: jmpq   0x00007f8ab9105c40
  0x00007f8ab9130700: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9130708: je     0x00007f8ab91307f0
  0x00007f8ab913070e: mov    %rsp,%r13
  0x00007f8ab9130711: mov    (%rsp),%rax
  0x00007f8ab9130715: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130719: pushfq 
  0x00007f8ab913071a: sub    $0x8,%rsp
  0x00007f8ab913071e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9130723: sub    $0x80,%rsp
  0x00007f8ab913072a: mov    %rax,0x78(%rsp)
  0x00007f8ab913072f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130734: mov    %rdx,0x68(%rsp)
  0x00007f8ab9130739: mov    %rbx,0x60(%rsp)
  0x00007f8ab913073e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130743: mov    %rsi,0x48(%rsp)
  0x00007f8ab9130748: mov    %rdi,0x40(%rsp)
  0x00007f8ab913074d: mov    %r8,0x38(%rsp)
  0x00007f8ab9130752: mov    %r9,0x30(%rsp)
  0x00007f8ab9130757: mov    %r10,0x28(%rsp)
  0x00007f8ab913075c: mov    %r11,0x20(%rsp)
  0x00007f8ab9130761: mov    %r12,0x18(%rsp)
  0x00007f8ab9130766: mov    %r13,0x10(%rsp)
  0x00007f8ab913076b: mov    %r14,0x8(%rsp)
  0x00007f8ab9130770: mov    %r15,(%rsp)
  0x00007f8ab9130774: sub    $0x200,%rsp
  0x00007f8ab913077b: fxsave64 (%rsp)
  0x00007f8ab9130780: mov    %rbx,%rdi
  0x00007f8ab9130783: mov    %rax,%rsi
  0x00007f8ab9130786: callq  0x00007f8acef8bbca
  0x00007f8ab913078b: fxrstor64 (%rsp)
  0x00007f8ab9130790: add    $0x200,%rsp
  0x00007f8ab9130797: mov    (%rsp),%r15
  0x00007f8ab913079b: mov    0x8(%rsp),%r14
  0x00007f8ab91307a0: mov    0x10(%rsp),%r13
  0x00007f8ab91307a5: mov    0x18(%rsp),%r12
  0x00007f8ab91307aa: mov    0x20(%rsp),%r11
  0x00007f8ab91307af: mov    0x28(%rsp),%r10
  0x00007f8ab91307b4: mov    0x30(%rsp),%r9
  0x00007f8ab91307b9: mov    0x38(%rsp),%r8
  0x00007f8ab91307be: mov    0x40(%rsp),%rdi
  0x00007f8ab91307c3: mov    0x48(%rsp),%rsi
  0x00007f8ab91307c8: mov    0x50(%rsp),%rbp
  0x00007f8ab91307cd: mov    0x60(%rsp),%rbx
  0x00007f8ab91307d2: mov    0x68(%rsp),%rdx
  0x00007f8ab91307d7: mov    0x70(%rsp),%rcx
  0x00007f8ab91307dc: mov    0x78(%rsp),%rax
  0x00007f8ab91307e1: add    $0x80,%rsp
  0x00007f8ab91307e8: add    $0x8,%rsp
  0x00007f8ab91307ec: popfq  
  0x00007f8ab91307ed: mov    %r13,%rsp
  0x00007f8ab91307f0: pop    %rax
  0x00007f8ab91307f1: mov    %rsp,%r13
  0x00007f8ab91307f4: sub    $0x40,%rsp
  0x00007f8ab91307f8: mov    %rax,(%rsp)
  0x00007f8ab91307fc: mov    %rsi,0x38(%rsp)
  0x00007f8ab9130801: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab913080b: mov    %rax,0x30(%rsp)
  0x00007f8ab9130810: mov    %rdx,0x28(%rsp)
  0x00007f8ab9130815: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab913081f: mov    %rax,0x20(%rsp)
  0x00007f8ab9130824: mov    %rcx,0x18(%rsp)
  0x00007f8ab9130829: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9130833: mov    %rax,0x10(%rsp)
  0x00007f8ab9130838: mov    %r8,0x8(%rsp)
  0x00007f8ab913083d: mov    0x40(%rbx),%rcx
  0x00007f8ab9130841: jmpq   *%rcx

AHE@0x00007f8ac80d7ff0: 0xbb000000 i2c: 0x00007f8ab9130920 c2i: 0x00007f8ab9130a38 c2iUV: 0x00007f8ab9130a0b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9130a38
  0x00007f8ab9130920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9130924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913092e: cmp    %r11,%rax
  0x00007f8ab9130931: jbe    0x00007f8ab913094a
  0x00007f8ab9130937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9130941: cmp    %r11,%rax
  0x00007f8ab9130944: jb     0x00007f8ab91309e7
  0x00007f8ab913094a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9130954: cmp    %r11,%rax
  0x00007f8ab9130957: jbe    0x00007f8ab9130970
  0x00007f8ab913095d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9130967: cmp    %r11,%rax
  0x00007f8ab913096a: jb     0x00007f8ab91309e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9130970: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9130975: sub    $0x80,%rsp
  0x00007f8ab913097c: mov    %rax,0x78(%rsp)
  0x00007f8ab9130981: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130986: mov    %rdx,0x68(%rsp)
  0x00007f8ab913098b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130990: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130995: mov    %rsi,0x48(%rsp)
  0x00007f8ab913099a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913099f: mov    %r8,0x38(%rsp)
  0x00007f8ab91309a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91309a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91309ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91309b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91309b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91309bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91309c2: mov    %r15,(%rsp)
  0x00007f8ab91309c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91309d0: movabs $0x7f8ab9130970,%rsi
  0x00007f8ab91309da: mov    %rsp,%rdx
  0x00007f8ab91309dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91309e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91309e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91309e7: mov    %rsp,%r11
  0x00007f8ab91309ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91309ee: push   %rax
  0x00007f8ab91309ef: mov    %r11,%rax
  0x00007f8ab91309f2: mov    0x50(%rbx),%r11
  0x00007f8ab91309f6: mov    0x10(%rax),%rsi
  0x00007f8ab91309fa: mov    0x8(%rax),%rdx
  0x00007f8ab91309fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9130a05: mov    %rbx,%rax
  0x00007f8ab9130a08: jmpq   *%r11
  0x00007f8ab9130a0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9130a0e: shl    $0x3,%rbx
  0x00007f8ab9130a12: cmp    0x10(%rax),%rbx
  0x00007f8ab9130a16: mov    0x8(%rax),%rbx
  0x00007f8ab9130a1a: je     0x00007f8ab9130a25
  0x00007f8ab9130a20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9130a25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9130a2d: je     0x00007f8ab9130b28
  0x00007f8ab9130a33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9130a38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9130a40: je     0x00007f8ab9130b28
  0x00007f8ab9130a46: mov    %rsp,%r13
  0x00007f8ab9130a49: mov    (%rsp),%rax
  0x00007f8ab9130a4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130a51: pushfq 
  0x00007f8ab9130a52: sub    $0x8,%rsp
  0x00007f8ab9130a56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9130a5b: sub    $0x80,%rsp
  0x00007f8ab9130a62: mov    %rax,0x78(%rsp)
  0x00007f8ab9130a67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130a6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9130a71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130a76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130a7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9130a80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9130a85: mov    %r8,0x38(%rsp)
  0x00007f8ab9130a8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9130a8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9130a94: mov    %r11,0x20(%rsp)
  0x00007f8ab9130a99: mov    %r12,0x18(%rsp)
  0x00007f8ab9130a9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9130aa3: mov    %r14,0x8(%rsp)
  0x00007f8ab9130aa8: mov    %r15,(%rsp)
  0x00007f8ab9130aac: sub    $0x200,%rsp
  0x00007f8ab9130ab3: fxsave64 (%rsp)
  0x00007f8ab9130ab8: mov    %rbx,%rdi
  0x00007f8ab9130abb: mov    %rax,%rsi
  0x00007f8ab9130abe: callq  0x00007f8acef8bbca
  0x00007f8ab9130ac3: fxrstor64 (%rsp)
  0x00007f8ab9130ac8: add    $0x200,%rsp
  0x00007f8ab9130acf: mov    (%rsp),%r15
  0x00007f8ab9130ad3: mov    0x8(%rsp),%r14
  0x00007f8ab9130ad8: mov    0x10(%rsp),%r13
  0x00007f8ab9130add: mov    0x18(%rsp),%r12
  0x00007f8ab9130ae2: mov    0x20(%rsp),%r11
  0x00007f8ab9130ae7: mov    0x28(%rsp),%r10
  0x00007f8ab9130aec: mov    0x30(%rsp),%r9
  0x00007f8ab9130af1: mov    0x38(%rsp),%r8
  0x00007f8ab9130af6: mov    0x40(%rsp),%rdi
  0x00007f8ab9130afb: mov    0x48(%rsp),%rsi
  0x00007f8ab9130b00: mov    0x50(%rsp),%rbp
  0x00007f8ab9130b05: mov    0x60(%rsp),%rbx
  0x00007f8ab9130b0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9130b0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9130b14: mov    0x78(%rsp),%rax
  0x00007f8ab9130b19: add    $0x80,%rsp
  0x00007f8ab9130b20: add    $0x8,%rsp
  0x00007f8ab9130b24: popfq  
  0x00007f8ab9130b25: mov    %r13,%rsp
  0x00007f8ab9130b28: pop    %rax
  0x00007f8ab9130b29: mov    %rsp,%r13
  0x00007f8ab9130b2c: sub    $0x20,%rsp
  0x00007f8ab9130b30: mov    %rax,(%rsp)
  0x00007f8ab9130b34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9130b39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9130b3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9130b42: jmpq   *%rcx

AHE@0x00007f8ac80d8038: 0x i2c: 0x00007f8ab9130c20 c2i: 0x00007f8ab9130d30 c2iUV: 0x00007f8ab9130d03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab9130d30
  0x00007f8ab9130c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9130c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9130c2e: cmp    %r11,%rax
  0x00007f8ab9130c31: jbe    0x00007f8ab9130c4a
  0x00007f8ab9130c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9130c41: cmp    %r11,%rax
  0x00007f8ab9130c44: jb     0x00007f8ab9130ce7
  0x00007f8ab9130c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9130c54: cmp    %r11,%rax
  0x00007f8ab9130c57: jbe    0x00007f8ab9130c70
  0x00007f8ab9130c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9130c67: cmp    %r11,%rax
  0x00007f8ab9130c6a: jb     0x00007f8ab9130ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9130c70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9130c75: sub    $0x80,%rsp
  0x00007f8ab9130c7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9130c81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130c86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9130c8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130c90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130c95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9130c9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9130c9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9130ca4: mov    %r9,0x30(%rsp)
  0x00007f8ab9130ca9: mov    %r10,0x28(%rsp)
  0x00007f8ab9130cae: mov    %r11,0x20(%rsp)
  0x00007f8ab9130cb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9130cb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9130cbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9130cc2: mov    %r15,(%rsp)
  0x00007f8ab9130cc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9130cd0: movabs $0x7f8ab9130c70,%rsi
  0x00007f8ab9130cda: mov    %rsp,%rdx
  0x00007f8ab9130cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130ce1: callq  0x00007f8aceddb9fa
  0x00007f8ab9130ce6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9130ce7: mov    %rsp,%r11
  0x00007f8ab9130cea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130cee: push   %rax
  0x00007f8ab9130cef: mov    %r11,%rax
  0x00007f8ab9130cf2: mov    0x50(%rbx),%r11
  0x00007f8ab9130cf6: mov    %rbx,0x258(%r15)
  0x00007f8ab9130cfd: mov    %rbx,%rax
  0x00007f8ab9130d00: jmpq   *%r11
  0x00007f8ab9130d03: mov    0x8(%rsi),%ebx
  0x00007f8ab9130d06: shl    $0x3,%rbx
  0x00007f8ab9130d0a: cmp    0x10(%rax),%rbx
  0x00007f8ab9130d0e: mov    0x8(%rax),%rbx
  0x00007f8ab9130d12: je     0x00007f8ab9130d1d
  0x00007f8ab9130d18: jmpq   0x00007f8ab9105c40
  0x00007f8ab9130d1d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9130d25: je     0x00007f8ab9130e20
  0x00007f8ab9130d2b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9130d30: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9130d38: je     0x00007f8ab9130e20
  0x00007f8ab9130d3e: mov    %rsp,%r13
  0x00007f8ab9130d41: mov    (%rsp),%rax
  0x00007f8ab9130d45: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130d49: pushfq 
  0x00007f8ab9130d4a: sub    $0x8,%rsp
  0x00007f8ab9130d4e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9130d53: sub    $0x80,%rsp
  0x00007f8ab9130d5a: mov    %rax,0x78(%rsp)
  0x00007f8ab9130d5f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130d64: mov    %rdx,0x68(%rsp)
  0x00007f8ab9130d69: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130d6e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130d73: mov    %rsi,0x48(%rsp)
  0x00007f8ab9130d78: mov    %rdi,0x40(%rsp)
  0x00007f8ab9130d7d: mov    %r8,0x38(%rsp)
  0x00007f8ab9130d82: mov    %r9,0x30(%rsp)
  0x00007f8ab9130d87: mov    %r10,0x28(%rsp)
  0x00007f8ab9130d8c: mov    %r11,0x20(%rsp)
  0x00007f8ab9130d91: mov    %r12,0x18(%rsp)
  0x00007f8ab9130d96: mov    %r13,0x10(%rsp)
  0x00007f8ab9130d9b: mov    %r14,0x8(%rsp)
  0x00007f8ab9130da0: mov    %r15,(%rsp)
  0x00007f8ab9130da4: sub    $0x200,%rsp
  0x00007f8ab9130dab: fxsave64 (%rsp)
  0x00007f8ab9130db0: mov    %rbx,%rdi
  0x00007f8ab9130db3: mov    %rax,%rsi
  0x00007f8ab9130db6: callq  0x00007f8acef8bbca
  0x00007f8ab9130dbb: fxrstor64 (%rsp)
  0x00007f8ab9130dc0: add    $0x200,%rsp
  0x00007f8ab9130dc7: mov    (%rsp),%r15
  0x00007f8ab9130dcb: mov    0x8(%rsp),%r14
  0x00007f8ab9130dd0: mov    0x10(%rsp),%r13
  0x00007f8ab9130dd5: mov    0x18(%rsp),%r12
  0x00007f8ab9130dda: mov    0x20(%rsp),%r11
  0x00007f8ab9130ddf: mov    0x28(%rsp),%r10
  0x00007f8ab9130de4: mov    0x30(%rsp),%r9
  0x00007f8ab9130de9: mov    0x38(%rsp),%r8
  0x00007f8ab9130dee: mov    0x40(%rsp),%rdi
  0x00007f8ab9130df3: mov    0x48(%rsp),%rsi
  0x00007f8ab9130df8: mov    0x50(%rsp),%rbp
  0x00007f8ab9130dfd: mov    0x60(%rsp),%rbx
  0x00007f8ab9130e02: mov    0x68(%rsp),%rdx
  0x00007f8ab9130e07: mov    0x70(%rsp),%rcx
  0x00007f8ab9130e0c: mov    0x78(%rsp),%rax
  0x00007f8ab9130e11: add    $0x80,%rsp
  0x00007f8ab9130e18: add    $0x8,%rsp
  0x00007f8ab9130e1c: popfq  
  0x00007f8ab9130e1d: mov    %r13,%rsp
  0x00007f8ab9130e20: pop    %rax
  0x00007f8ab9130e21: mov    %rsp,%r13
  0x00007f8ab9130e24: sub    $0x10,%rsp
  0x00007f8ab9130e28: mov    %rax,(%rsp)
  0x00007f8ab9130e2c: mov    0x40(%rbx),%rcx
  0x00007f8ab9130e30: jmpq   *%rcx

AHE@0x00007f8ac80d8080: 0x i2c: 0x00007f8ab9130ee0 c2i: 0x00007f8ab9130ff0 c2iUV: 0x00007f8ab9130fc3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab9130ff0
  0x00007f8ab9130ee0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9130ee4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9130eee: cmp    %r11,%rax
  0x00007f8ab9130ef1: jbe    0x00007f8ab9130f0a
  0x00007f8ab9130ef7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9130f01: cmp    %r11,%rax
  0x00007f8ab9130f04: jb     0x00007f8ab9130fa7
  0x00007f8ab9130f0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9130f14: cmp    %r11,%rax
  0x00007f8ab9130f17: jbe    0x00007f8ab9130f30
  0x00007f8ab9130f1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9130f27: cmp    %r11,%rax
  0x00007f8ab9130f2a: jb     0x00007f8ab9130fa7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9130f30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9130f35: sub    $0x80,%rsp
  0x00007f8ab9130f3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9130f41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9130f46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9130f4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9130f50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9130f55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9130f5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9130f5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9130f64: mov    %r9,0x30(%rsp)
  0x00007f8ab9130f69: mov    %r10,0x28(%rsp)
  0x00007f8ab9130f6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9130f73: mov    %r12,0x18(%rsp)
  0x00007f8ab9130f78: mov    %r13,0x10(%rsp)
  0x00007f8ab9130f7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9130f82: mov    %r15,(%rsp)
  0x00007f8ab9130f86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9130f90: movabs $0x7f8ab9130f30,%rsi
  0x00007f8ab9130f9a: mov    %rsp,%rdx
  0x00007f8ab9130f9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130fa1: callq  0x00007f8aceddb9fa
  0x00007f8ab9130fa6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9130fa7: mov    %rsp,%r11
  0x00007f8ab9130faa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9130fae: push   %rax
  0x00007f8ab9130faf: mov    %r11,%rax
  0x00007f8ab9130fb2: mov    0x50(%rbx),%r11
  0x00007f8ab9130fb6: mov    %rbx,0x258(%r15)
  0x00007f8ab9130fbd: mov    %rbx,%rax
  0x00007f8ab9130fc0: jmpq   *%r11
  0x00007f8ab9130fc3: mov    0x8(%rsi),%ebx
  0x00007f8ab9130fc6: shl    $0x3,%rbx
  0x00007f8ab9130fca: cmp    0x10(%rax),%rbx
  0x00007f8ab9130fce: mov    0x8(%rax),%rbx
  0x00007f8ab9130fd2: je     0x00007f8ab9130fdd
  0x00007f8ab9130fd8: jmpq   0x00007f8ab9105c40
  0x00007f8ab9130fdd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9130fe5: je     0x00007f8ab91310e0
  0x00007f8ab9130feb: jmpq   0x00007f8ab9105c40
  0x00007f8ab9130ff0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9130ff8: je     0x00007f8ab91310e0
  0x00007f8ab9130ffe: mov    %rsp,%r13
  0x00007f8ab9131001: mov    (%rsp),%rax
  0x00007f8ab9131005: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131009: pushfq 
  0x00007f8ab913100a: sub    $0x8,%rsp
  0x00007f8ab913100e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131013: sub    $0x80,%rsp
  0x00007f8ab913101a: mov    %rax,0x78(%rsp)
  0x00007f8ab913101f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131024: mov    %rdx,0x68(%rsp)
  0x00007f8ab9131029: mov    %rbx,0x60(%rsp)
  0x00007f8ab913102e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131033: mov    %rsi,0x48(%rsp)
  0x00007f8ab9131038: mov    %rdi,0x40(%rsp)
  0x00007f8ab913103d: mov    %r8,0x38(%rsp)
  0x00007f8ab9131042: mov    %r9,0x30(%rsp)
  0x00007f8ab9131047: mov    %r10,0x28(%rsp)
  0x00007f8ab913104c: mov    %r11,0x20(%rsp)
  0x00007f8ab9131051: mov    %r12,0x18(%rsp)
  0x00007f8ab9131056: mov    %r13,0x10(%rsp)
  0x00007f8ab913105b: mov    %r14,0x8(%rsp)
  0x00007f8ab9131060: mov    %r15,(%rsp)
  0x00007f8ab9131064: sub    $0x200,%rsp
  0x00007f8ab913106b: fxsave64 (%rsp)
  0x00007f8ab9131070: mov    %rbx,%rdi
  0x00007f8ab9131073: mov    %rax,%rsi
  0x00007f8ab9131076: callq  0x00007f8acef8bbca
  0x00007f8ab913107b: fxrstor64 (%rsp)
  0x00007f8ab9131080: add    $0x200,%rsp
  0x00007f8ab9131087: mov    (%rsp),%r15
  0x00007f8ab913108b: mov    0x8(%rsp),%r14
  0x00007f8ab9131090: mov    0x10(%rsp),%r13
  0x00007f8ab9131095: mov    0x18(%rsp),%r12
  0x00007f8ab913109a: mov    0x20(%rsp),%r11
  0x00007f8ab913109f: mov    0x28(%rsp),%r10
  0x00007f8ab91310a4: mov    0x30(%rsp),%r9
  0x00007f8ab91310a9: mov    0x38(%rsp),%r8
  0x00007f8ab91310ae: mov    0x40(%rsp),%rdi
  0x00007f8ab91310b3: mov    0x48(%rsp),%rsi
  0x00007f8ab91310b8: mov    0x50(%rsp),%rbp
  0x00007f8ab91310bd: mov    0x60(%rsp),%rbx
  0x00007f8ab91310c2: mov    0x68(%rsp),%rdx
  0x00007f8ab91310c7: mov    0x70(%rsp),%rcx
  0x00007f8ab91310cc: mov    0x78(%rsp),%rax
  0x00007f8ab91310d1: add    $0x80,%rsp
  0x00007f8ab91310d8: add    $0x8,%rsp
  0x00007f8ab91310dc: popfq  
  0x00007f8ab91310dd: mov    %r13,%rsp
  0x00007f8ab91310e0: pop    %rax
  0x00007f8ab91310e1: mov    %rsp,%r13
  0x00007f8ab91310e4: sub    $0x10,%rsp
  0x00007f8ab91310e8: mov    %rax,(%rsp)
  0x00007f8ab91310ec: mov    0x40(%rbx),%rcx
  0x00007f8ab91310f0: jmpq   *%rcx

AHE@0x00007f8ac80d80c8: 0xb0000000 i2c: 0x00007f8ab91311a0 c2i: 0x00007f8ab91312b4 c2iUV: 0x00007f8ab9131287
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab91312b4
  0x00007f8ab91311a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91311a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91311ae: cmp    %r11,%rax
  0x00007f8ab91311b1: jbe    0x00007f8ab91311ca
  0x00007f8ab91311b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91311c1: cmp    %r11,%rax
  0x00007f8ab91311c4: jb     0x00007f8ab9131267
  0x00007f8ab91311ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91311d4: cmp    %r11,%rax
  0x00007f8ab91311d7: jbe    0x00007f8ab91311f0
  0x00007f8ab91311dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91311e7: cmp    %r11,%rax
  0x00007f8ab91311ea: jb     0x00007f8ab9131267
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91311f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91311f5: sub    $0x80,%rsp
  0x00007f8ab91311fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9131201: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131206: mov    %rdx,0x68(%rsp)
  0x00007f8ab913120b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9131210: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131215: mov    %rsi,0x48(%rsp)
  0x00007f8ab913121a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913121f: mov    %r8,0x38(%rsp)
  0x00007f8ab9131224: mov    %r9,0x30(%rsp)
  0x00007f8ab9131229: mov    %r10,0x28(%rsp)
  0x00007f8ab913122e: mov    %r11,0x20(%rsp)
  0x00007f8ab9131233: mov    %r12,0x18(%rsp)
  0x00007f8ab9131238: mov    %r13,0x10(%rsp)
  0x00007f8ab913123d: mov    %r14,0x8(%rsp)
  0x00007f8ab9131242: mov    %r15,(%rsp)
  0x00007f8ab9131246: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9131250: movabs $0x7f8ab91311f0,%rsi
  0x00007f8ab913125a: mov    %rsp,%rdx
  0x00007f8ab913125d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131261: callq  0x00007f8aceddb9fa
  0x00007f8ab9131266: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9131267: mov    %rsp,%r11
  0x00007f8ab913126a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913126e: push   %rax
  0x00007f8ab913126f: mov    %r11,%rax
  0x00007f8ab9131272: mov    0x50(%rbx),%r11
  0x00007f8ab9131276: mov    0x8(%rax),%rsi
  0x00007f8ab913127a: mov    %rbx,0x258(%r15)
  0x00007f8ab9131281: mov    %rbx,%rax
  0x00007f8ab9131284: jmpq   *%r11
  0x00007f8ab9131287: mov    0x8(%rsi),%ebx
  0x00007f8ab913128a: shl    $0x3,%rbx
  0x00007f8ab913128e: cmp    0x10(%rax),%rbx
  0x00007f8ab9131292: mov    0x8(%rax),%rbx
  0x00007f8ab9131296: je     0x00007f8ab91312a1
  0x00007f8ab913129c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91312a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91312a9: je     0x00007f8ab91313a4
  0x00007f8ab91312af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91312b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91312bc: je     0x00007f8ab91313a4
  0x00007f8ab91312c2: mov    %rsp,%r13
  0x00007f8ab91312c5: mov    (%rsp),%rax
  0x00007f8ab91312c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91312cd: pushfq 
  0x00007f8ab91312ce: sub    $0x8,%rsp
  0x00007f8ab91312d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91312d7: sub    $0x80,%rsp
  0x00007f8ab91312de: mov    %rax,0x78(%rsp)
  0x00007f8ab91312e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91312e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91312ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91312f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91312f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91312fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9131301: mov    %r8,0x38(%rsp)
  0x00007f8ab9131306: mov    %r9,0x30(%rsp)
  0x00007f8ab913130b: mov    %r10,0x28(%rsp)
  0x00007f8ab9131310: mov    %r11,0x20(%rsp)
  0x00007f8ab9131315: mov    %r12,0x18(%rsp)
  0x00007f8ab913131a: mov    %r13,0x10(%rsp)
  0x00007f8ab913131f: mov    %r14,0x8(%rsp)
  0x00007f8ab9131324: mov    %r15,(%rsp)
  0x00007f8ab9131328: sub    $0x200,%rsp
  0x00007f8ab913132f: fxsave64 (%rsp)
  0x00007f8ab9131334: mov    %rbx,%rdi
  0x00007f8ab9131337: mov    %rax,%rsi
  0x00007f8ab913133a: callq  0x00007f8acef8bbca
  0x00007f8ab913133f: fxrstor64 (%rsp)
  0x00007f8ab9131344: add    $0x200,%rsp
  0x00007f8ab913134b: mov    (%rsp),%r15
  0x00007f8ab913134f: mov    0x8(%rsp),%r14
  0x00007f8ab9131354: mov    0x10(%rsp),%r13
  0x00007f8ab9131359: mov    0x18(%rsp),%r12
  0x00007f8ab913135e: mov    0x20(%rsp),%r11
  0x00007f8ab9131363: mov    0x28(%rsp),%r10
  0x00007f8ab9131368: mov    0x30(%rsp),%r9
  0x00007f8ab913136d: mov    0x38(%rsp),%r8
  0x00007f8ab9131372: mov    0x40(%rsp),%rdi
  0x00007f8ab9131377: mov    0x48(%rsp),%rsi
  0x00007f8ab913137c: mov    0x50(%rsp),%rbp
  0x00007f8ab9131381: mov    0x60(%rsp),%rbx
  0x00007f8ab9131386: mov    0x68(%rsp),%rdx
  0x00007f8ab913138b: mov    0x70(%rsp),%rcx
  0x00007f8ab9131390: mov    0x78(%rsp),%rax
  0x00007f8ab9131395: add    $0x80,%rsp
  0x00007f8ab913139c: add    $0x8,%rsp
  0x00007f8ab91313a0: popfq  
  0x00007f8ab91313a1: mov    %r13,%rsp
  0x00007f8ab91313a4: pop    %rax
  0x00007f8ab91313a5: mov    %rsp,%r13
  0x00007f8ab91313a8: sub    $0x10,%rsp
  0x00007f8ab91313ac: mov    %rax,(%rsp)
  0x00007f8ab91313b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91313b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91313b9: jmpq   *%rcx

AHE@0x00007f8ac80d8110: 0x i2c: 0x00007f8ab9131460 c2i: 0x00007f8ab9131570 c2iUV: 0x00007f8ab9131543
i2c argument handler #0 for: static ()Ljava/util/Vector; (530 bytes generated)
c2i argument handler starts at 0x7f8ab9131570
  0x00007f8ab9131460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9131464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913146e: cmp    %r11,%rax
  0x00007f8ab9131471: jbe    0x00007f8ab913148a
  0x00007f8ab9131477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9131481: cmp    %r11,%rax
  0x00007f8ab9131484: jb     0x00007f8ab9131527
  0x00007f8ab913148a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9131494: cmp    %r11,%rax
  0x00007f8ab9131497: jbe    0x00007f8ab91314b0
  0x00007f8ab913149d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91314a7: cmp    %r11,%rax
  0x00007f8ab91314aa: jb     0x00007f8ab9131527
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91314b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91314b5: sub    $0x80,%rsp
  0x00007f8ab91314bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91314c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91314c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91314cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91314d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91314d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91314da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91314df: mov    %r8,0x38(%rsp)
  0x00007f8ab91314e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91314e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91314ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91314f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91314f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91314fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9131502: mov    %r15,(%rsp)
  0x00007f8ab9131506: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9131510: movabs $0x7f8ab91314b0,%rsi
  0x00007f8ab913151a: mov    %rsp,%rdx
  0x00007f8ab913151d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131521: callq  0x00007f8aceddb9fa
  0x00007f8ab9131526: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9131527: mov    %rsp,%r11
  0x00007f8ab913152a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913152e: push   %rax
  0x00007f8ab913152f: mov    %r11,%rax
  0x00007f8ab9131532: mov    0x50(%rbx),%r11
  0x00007f8ab9131536: mov    %rbx,0x258(%r15)
  0x00007f8ab913153d: mov    %rbx,%rax
  0x00007f8ab9131540: jmpq   *%r11
  0x00007f8ab9131543: mov    0x8(%rsi),%ebx
  0x00007f8ab9131546: shl    $0x3,%rbx
  0x00007f8ab913154a: cmp    0x10(%rax),%rbx
  0x00007f8ab913154e: mov    0x8(%rax),%rbx
  0x00007f8ab9131552: je     0x00007f8ab913155d
  0x00007f8ab9131558: jmpq   0x00007f8ab9105c40
  0x00007f8ab913155d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131565: je     0x00007f8ab9131660
  0x00007f8ab913156b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9131570: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131578: je     0x00007f8ab9131660
  0x00007f8ab913157e: mov    %rsp,%r13
  0x00007f8ab9131581: mov    (%rsp),%rax
  0x00007f8ab9131585: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131589: pushfq 
  0x00007f8ab913158a: sub    $0x8,%rsp
  0x00007f8ab913158e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131593: sub    $0x80,%rsp
  0x00007f8ab913159a: mov    %rax,0x78(%rsp)
  0x00007f8ab913159f: mov    %rcx,0x70(%rsp)
  0x00007f8ab91315a4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91315a9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91315ae: mov    %rbp,0x50(%rsp)
  0x00007f8ab91315b3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91315b8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91315bd: mov    %r8,0x38(%rsp)
  0x00007f8ab91315c2: mov    %r9,0x30(%rsp)
  0x00007f8ab91315c7: mov    %r10,0x28(%rsp)
  0x00007f8ab91315cc: mov    %r11,0x20(%rsp)
  0x00007f8ab91315d1: mov    %r12,0x18(%rsp)
  0x00007f8ab91315d6: mov    %r13,0x10(%rsp)
  0x00007f8ab91315db: mov    %r14,0x8(%rsp)
  0x00007f8ab91315e0: mov    %r15,(%rsp)
  0x00007f8ab91315e4: sub    $0x200,%rsp
  0x00007f8ab91315eb: fxsave64 (%rsp)
  0x00007f8ab91315f0: mov    %rbx,%rdi
  0x00007f8ab91315f3: mov    %rax,%rsi
  0x00007f8ab91315f6: callq  0x00007f8acef8bbca
  0x00007f8ab91315fb: fxrstor64 (%rsp)
  0x00007f8ab9131600: add    $0x200,%rsp
  0x00007f8ab9131607: mov    (%rsp),%r15
  0x00007f8ab913160b: mov    0x8(%rsp),%r14
  0x00007f8ab9131610: mov    0x10(%rsp),%r13
  0x00007f8ab9131615: mov    0x18(%rsp),%r12
  0x00007f8ab913161a: mov    0x20(%rsp),%r11
  0x00007f8ab913161f: mov    0x28(%rsp),%r10
  0x00007f8ab9131624: mov    0x30(%rsp),%r9
  0x00007f8ab9131629: mov    0x38(%rsp),%r8
  0x00007f8ab913162e: mov    0x40(%rsp),%rdi
  0x00007f8ab9131633: mov    0x48(%rsp),%rsi
  0x00007f8ab9131638: mov    0x50(%rsp),%rbp
  0x00007f8ab913163d: mov    0x60(%rsp),%rbx
  0x00007f8ab9131642: mov    0x68(%rsp),%rdx
  0x00007f8ab9131647: mov    0x70(%rsp),%rcx
  0x00007f8ab913164c: mov    0x78(%rsp),%rax
  0x00007f8ab9131651: add    $0x80,%rsp
  0x00007f8ab9131658: add    $0x8,%rsp
  0x00007f8ab913165c: popfq  
  0x00007f8ab913165d: mov    %r13,%rsp
  0x00007f8ab9131660: pop    %rax
  0x00007f8ab9131661: mov    %rsp,%r13
  0x00007f8ab9131664: sub    $0x10,%rsp
  0x00007f8ab9131668: mov    %rax,(%rsp)
  0x00007f8ab913166c: mov    0x40(%rbx),%rcx
  0x00007f8ab9131670: jmpq   *%rcx

AHE@0x00007f8ac80d8158: 0x i2c: 0x00007f8ab9131720 c2i: 0x00007f8ab9131830 c2iUV: 0x00007f8ab9131803
i2c argument handler #0 for: static ()Ljava/lang/AssertionStatusDirectives; (530 bytes generated)
c2i argument handler starts at 0x7f8ab9131830
  0x00007f8ab9131720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9131724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913172e: cmp    %r11,%rax
  0x00007f8ab9131731: jbe    0x00007f8ab913174a
  0x00007f8ab9131737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9131741: cmp    %r11,%rax
  0x00007f8ab9131744: jb     0x00007f8ab91317e7
  0x00007f8ab913174a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9131754: cmp    %r11,%rax
  0x00007f8ab9131757: jbe    0x00007f8ab9131770
  0x00007f8ab913175d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9131767: cmp    %r11,%rax
  0x00007f8ab913176a: jb     0x00007f8ab91317e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9131770: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131775: sub    $0x80,%rsp
  0x00007f8ab913177c: mov    %rax,0x78(%rsp)
  0x00007f8ab9131781: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131786: mov    %rdx,0x68(%rsp)
  0x00007f8ab913178b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9131790: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131795: mov    %rsi,0x48(%rsp)
  0x00007f8ab913179a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913179f: mov    %r8,0x38(%rsp)
  0x00007f8ab91317a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91317a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91317ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91317b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91317b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91317bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91317c2: mov    %r15,(%rsp)
  0x00007f8ab91317c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91317d0: movabs $0x7f8ab9131770,%rsi
  0x00007f8ab91317da: mov    %rsp,%rdx
  0x00007f8ab91317dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91317e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91317e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91317e7: mov    %rsp,%r11
  0x00007f8ab91317ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91317ee: push   %rax
  0x00007f8ab91317ef: mov    %r11,%rax
  0x00007f8ab91317f2: mov    0x50(%rbx),%r11
  0x00007f8ab91317f6: mov    %rbx,0x258(%r15)
  0x00007f8ab91317fd: mov    %rbx,%rax
  0x00007f8ab9131800: jmpq   *%r11
  0x00007f8ab9131803: mov    0x8(%rsi),%ebx
  0x00007f8ab9131806: shl    $0x3,%rbx
  0x00007f8ab913180a: cmp    0x10(%rax),%rbx
  0x00007f8ab913180e: mov    0x8(%rax),%rbx
  0x00007f8ab9131812: je     0x00007f8ab913181d
  0x00007f8ab9131818: jmpq   0x00007f8ab9105c40
  0x00007f8ab913181d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131825: je     0x00007f8ab9131920
  0x00007f8ab913182b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9131830: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131838: je     0x00007f8ab9131920
  0x00007f8ab913183e: mov    %rsp,%r13
  0x00007f8ab9131841: mov    (%rsp),%rax
  0x00007f8ab9131845: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131849: pushfq 
  0x00007f8ab913184a: sub    $0x8,%rsp
  0x00007f8ab913184e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131853: sub    $0x80,%rsp
  0x00007f8ab913185a: mov    %rax,0x78(%rsp)
  0x00007f8ab913185f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131864: mov    %rdx,0x68(%rsp)
  0x00007f8ab9131869: mov    %rbx,0x60(%rsp)
  0x00007f8ab913186e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131873: mov    %rsi,0x48(%rsp)
  0x00007f8ab9131878: mov    %rdi,0x40(%rsp)
  0x00007f8ab913187d: mov    %r8,0x38(%rsp)
  0x00007f8ab9131882: mov    %r9,0x30(%rsp)
  0x00007f8ab9131887: mov    %r10,0x28(%rsp)
  0x00007f8ab913188c: mov    %r11,0x20(%rsp)
  0x00007f8ab9131891: mov    %r12,0x18(%rsp)
  0x00007f8ab9131896: mov    %r13,0x10(%rsp)
  0x00007f8ab913189b: mov    %r14,0x8(%rsp)
  0x00007f8ab91318a0: mov    %r15,(%rsp)
  0x00007f8ab91318a4: sub    $0x200,%rsp
  0x00007f8ab91318ab: fxsave64 (%rsp)
  0x00007f8ab91318b0: mov    %rbx,%rdi
  0x00007f8ab91318b3: mov    %rax,%rsi
  0x00007f8ab91318b6: callq  0x00007f8acef8bbca
  0x00007f8ab91318bb: fxrstor64 (%rsp)
  0x00007f8ab91318c0: add    $0x200,%rsp
  0x00007f8ab91318c7: mov    (%rsp),%r15
  0x00007f8ab91318cb: mov    0x8(%rsp),%r14
  0x00007f8ab91318d0: mov    0x10(%rsp),%r13
  0x00007f8ab91318d5: mov    0x18(%rsp),%r12
  0x00007f8ab91318da: mov    0x20(%rsp),%r11
  0x00007f8ab91318df: mov    0x28(%rsp),%r10
  0x00007f8ab91318e4: mov    0x30(%rsp),%r9
  0x00007f8ab91318e9: mov    0x38(%rsp),%r8
  0x00007f8ab91318ee: mov    0x40(%rsp),%rdi
  0x00007f8ab91318f3: mov    0x48(%rsp),%rsi
  0x00007f8ab91318f8: mov    0x50(%rsp),%rbp
  0x00007f8ab91318fd: mov    0x60(%rsp),%rbx
  0x00007f8ab9131902: mov    0x68(%rsp),%rdx
  0x00007f8ab9131907: mov    0x70(%rsp),%rcx
  0x00007f8ab913190c: mov    0x78(%rsp),%rax
  0x00007f8ab9131911: add    $0x80,%rsp
  0x00007f8ab9131918: add    $0x8,%rsp
  0x00007f8ab913191c: popfq  
  0x00007f8ab913191d: mov    %r13,%rsp
  0x00007f8ab9131920: pop    %rax
  0x00007f8ab9131921: mov    %rsp,%r13
  0x00007f8ab9131924: sub    $0x10,%rsp
  0x00007f8ab9131928: mov    %rax,(%rsp)
  0x00007f8ab913192c: mov    0x40(%rbx),%rcx
  0x00007f8ab9131930: jmpq   *%rcx

AHE@0x00007f8ac80d81a0: 0xb0000000 i2c: 0x00007f8ab91319e0 c2i: 0x00007f8ab9131af4 c2iUV: 0x00007f8ab9131ac7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab9131af4
  0x00007f8ab91319e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91319e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91319ee: cmp    %r11,%rax
  0x00007f8ab91319f1: jbe    0x00007f8ab9131a0a
  0x00007f8ab91319f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9131a01: cmp    %r11,%rax
  0x00007f8ab9131a04: jb     0x00007f8ab9131aa7
  0x00007f8ab9131a0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9131a14: cmp    %r11,%rax
  0x00007f8ab9131a17: jbe    0x00007f8ab9131a30
  0x00007f8ab9131a1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9131a27: cmp    %r11,%rax
  0x00007f8ab9131a2a: jb     0x00007f8ab9131aa7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9131a30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131a35: sub    $0x80,%rsp
  0x00007f8ab9131a3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9131a41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131a46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9131a4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9131a50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131a55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9131a5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9131a5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9131a64: mov    %r9,0x30(%rsp)
  0x00007f8ab9131a69: mov    %r10,0x28(%rsp)
  0x00007f8ab9131a6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9131a73: mov    %r12,0x18(%rsp)
  0x00007f8ab9131a78: mov    %r13,0x10(%rsp)
  0x00007f8ab9131a7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9131a82: mov    %r15,(%rsp)
  0x00007f8ab9131a86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9131a90: movabs $0x7f8ab9131a30,%rsi
  0x00007f8ab9131a9a: mov    %rsp,%rdx
  0x00007f8ab9131a9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131aa1: callq  0x00007f8aceddb9fa
  0x00007f8ab9131aa6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9131aa7: mov    %rsp,%r11
  0x00007f8ab9131aaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131aae: push   %rax
  0x00007f8ab9131aaf: mov    %r11,%rax
  0x00007f8ab9131ab2: mov    0x50(%rbx),%r11
  0x00007f8ab9131ab6: mov    0x8(%rax),%rsi
  0x00007f8ab9131aba: mov    %rbx,0x258(%r15)
  0x00007f8ab9131ac1: mov    %rbx,%rax
  0x00007f8ab9131ac4: jmpq   *%r11
  0x00007f8ab9131ac7: mov    0x8(%rsi),%ebx
  0x00007f8ab9131aca: shl    $0x3,%rbx
  0x00007f8ab9131ace: cmp    0x10(%rax),%rbx
  0x00007f8ab9131ad2: mov    0x8(%rax),%rbx
  0x00007f8ab9131ad6: je     0x00007f8ab9131ae1
  0x00007f8ab9131adc: jmpq   0x00007f8ab9105c40
  0x00007f8ab9131ae1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131ae9: je     0x00007f8ab9131be4
  0x00007f8ab9131aef: jmpq   0x00007f8ab9105c40
  0x00007f8ab9131af4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131afc: je     0x00007f8ab9131be4
  0x00007f8ab9131b02: mov    %rsp,%r13
  0x00007f8ab9131b05: mov    (%rsp),%rax
  0x00007f8ab9131b09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131b0d: pushfq 
  0x00007f8ab9131b0e: sub    $0x8,%rsp
  0x00007f8ab9131b12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131b17: sub    $0x80,%rsp
  0x00007f8ab9131b1e: mov    %rax,0x78(%rsp)
  0x00007f8ab9131b23: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131b28: mov    %rdx,0x68(%rsp)
  0x00007f8ab9131b2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9131b32: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131b37: mov    %rsi,0x48(%rsp)
  0x00007f8ab9131b3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9131b41: mov    %r8,0x38(%rsp)
  0x00007f8ab9131b46: mov    %r9,0x30(%rsp)
  0x00007f8ab9131b4b: mov    %r10,0x28(%rsp)
  0x00007f8ab9131b50: mov    %r11,0x20(%rsp)
  0x00007f8ab9131b55: mov    %r12,0x18(%rsp)
  0x00007f8ab9131b5a: mov    %r13,0x10(%rsp)
  0x00007f8ab9131b5f: mov    %r14,0x8(%rsp)
  0x00007f8ab9131b64: mov    %r15,(%rsp)
  0x00007f8ab9131b68: sub    $0x200,%rsp
  0x00007f8ab9131b6f: fxsave64 (%rsp)
  0x00007f8ab9131b74: mov    %rbx,%rdi
  0x00007f8ab9131b77: mov    %rax,%rsi
  0x00007f8ab9131b7a: callq  0x00007f8acef8bbca
  0x00007f8ab9131b7f: fxrstor64 (%rsp)
  0x00007f8ab9131b84: add    $0x200,%rsp
  0x00007f8ab9131b8b: mov    (%rsp),%r15
  0x00007f8ab9131b8f: mov    0x8(%rsp),%r14
  0x00007f8ab9131b94: mov    0x10(%rsp),%r13
  0x00007f8ab9131b99: mov    0x18(%rsp),%r12
  0x00007f8ab9131b9e: mov    0x20(%rsp),%r11
  0x00007f8ab9131ba3: mov    0x28(%rsp),%r10
  0x00007f8ab9131ba8: mov    0x30(%rsp),%r9
  0x00007f8ab9131bad: mov    0x38(%rsp),%r8
  0x00007f8ab9131bb2: mov    0x40(%rsp),%rdi
  0x00007f8ab9131bb7: mov    0x48(%rsp),%rsi
  0x00007f8ab9131bbc: mov    0x50(%rsp),%rbp
  0x00007f8ab9131bc1: mov    0x60(%rsp),%rbx
  0x00007f8ab9131bc6: mov    0x68(%rsp),%rdx
  0x00007f8ab9131bcb: mov    0x70(%rsp),%rcx
  0x00007f8ab9131bd0: mov    0x78(%rsp),%rax
  0x00007f8ab9131bd5: add    $0x80,%rsp
  0x00007f8ab9131bdc: add    $0x8,%rsp
  0x00007f8ab9131be0: popfq  
  0x00007f8ab9131be1: mov    %r13,%rsp
  0x00007f8ab9131be4: pop    %rax
  0x00007f8ab9131be5: mov    %rsp,%r13
  0x00007f8ab9131be8: sub    $0x10,%rsp
  0x00007f8ab9131bec: mov    %rax,(%rsp)
  0x00007f8ab9131bf0: mov    %rsi,0x8(%rsp)
  0x00007f8ab9131bf5: mov    0x40(%rbx),%rcx
  0x00007f8ab9131bf9: jmpq   *%rcx

AHE@0x00007f8ac80d81e8: 0xb0000000 i2c: 0x00007f8ab9131ca0 c2i: 0x00007f8ab9131db4 c2iUV: 0x00007f8ab9131d87
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab9131db4
  0x00007f8ab9131ca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9131ca4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9131cae: cmp    %r11,%rax
  0x00007f8ab9131cb1: jbe    0x00007f8ab9131cca
  0x00007f8ab9131cb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9131cc1: cmp    %r11,%rax
  0x00007f8ab9131cc4: jb     0x00007f8ab9131d67
  0x00007f8ab9131cca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9131cd4: cmp    %r11,%rax
  0x00007f8ab9131cd7: jbe    0x00007f8ab9131cf0
  0x00007f8ab9131cdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9131ce7: cmp    %r11,%rax
  0x00007f8ab9131cea: jb     0x00007f8ab9131d67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9131cf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131cf5: sub    $0x80,%rsp
  0x00007f8ab9131cfc: mov    %rax,0x78(%rsp)
  0x00007f8ab9131d01: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131d06: mov    %rdx,0x68(%rsp)
  0x00007f8ab9131d0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9131d10: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131d15: mov    %rsi,0x48(%rsp)
  0x00007f8ab9131d1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9131d1f: mov    %r8,0x38(%rsp)
  0x00007f8ab9131d24: mov    %r9,0x30(%rsp)
  0x00007f8ab9131d29: mov    %r10,0x28(%rsp)
  0x00007f8ab9131d2e: mov    %r11,0x20(%rsp)
  0x00007f8ab9131d33: mov    %r12,0x18(%rsp)
  0x00007f8ab9131d38: mov    %r13,0x10(%rsp)
  0x00007f8ab9131d3d: mov    %r14,0x8(%rsp)
  0x00007f8ab9131d42: mov    %r15,(%rsp)
  0x00007f8ab9131d46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9131d50: movabs $0x7f8ab9131cf0,%rsi
  0x00007f8ab9131d5a: mov    %rsp,%rdx
  0x00007f8ab9131d5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131d61: callq  0x00007f8aceddb9fa
  0x00007f8ab9131d66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9131d67: mov    %rsp,%r11
  0x00007f8ab9131d6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131d6e: push   %rax
  0x00007f8ab9131d6f: mov    %r11,%rax
  0x00007f8ab9131d72: mov    0x50(%rbx),%r11
  0x00007f8ab9131d76: mov    0x8(%rax),%rsi
  0x00007f8ab9131d7a: mov    %rbx,0x258(%r15)
  0x00007f8ab9131d81: mov    %rbx,%rax
  0x00007f8ab9131d84: jmpq   *%r11
  0x00007f8ab9131d87: mov    0x8(%rsi),%ebx
  0x00007f8ab9131d8a: shl    $0x3,%rbx
  0x00007f8ab9131d8e: cmp    0x10(%rax),%rbx
  0x00007f8ab9131d92: mov    0x8(%rax),%rbx
  0x00007f8ab9131d96: je     0x00007f8ab9131da1
  0x00007f8ab9131d9c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9131da1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131da9: je     0x00007f8ab9131ea4
  0x00007f8ab9131daf: jmpq   0x00007f8ab9105c40
  0x00007f8ab9131db4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9131dbc: je     0x00007f8ab9131ea4
  0x00007f8ab9131dc2: mov    %rsp,%r13
  0x00007f8ab9131dc5: mov    (%rsp),%rax
  0x00007f8ab9131dc9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9131dcd: pushfq 
  0x00007f8ab9131dce: sub    $0x8,%rsp
  0x00007f8ab9131dd2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131dd7: sub    $0x80,%rsp
  0x00007f8ab9131dde: mov    %rax,0x78(%rsp)
  0x00007f8ab9131de3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131de8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9131ded: mov    %rbx,0x60(%rsp)
  0x00007f8ab9131df2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131df7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9131dfc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9131e01: mov    %r8,0x38(%rsp)
  0x00007f8ab9131e06: mov    %r9,0x30(%rsp)
  0x00007f8ab9131e0b: mov    %r10,0x28(%rsp)
  0x00007f8ab9131e10: mov    %r11,0x20(%rsp)
  0x00007f8ab9131e15: mov    %r12,0x18(%rsp)
  0x00007f8ab9131e1a: mov    %r13,0x10(%rsp)
  0x00007f8ab9131e1f: mov    %r14,0x8(%rsp)
  0x00007f8ab9131e24: mov    %r15,(%rsp)
  0x00007f8ab9131e28: sub    $0x200,%rsp
  0x00007f8ab9131e2f: fxsave64 (%rsp)
  0x00007f8ab9131e34: mov    %rbx,%rdi
  0x00007f8ab9131e37: mov    %rax,%rsi
  0x00007f8ab9131e3a: callq  0x00007f8acef8bbca
  0x00007f8ab9131e3f: fxrstor64 (%rsp)
  0x00007f8ab9131e44: add    $0x200,%rsp
  0x00007f8ab9131e4b: mov    (%rsp),%r15
  0x00007f8ab9131e4f: mov    0x8(%rsp),%r14
  0x00007f8ab9131e54: mov    0x10(%rsp),%r13
  0x00007f8ab9131e59: mov    0x18(%rsp),%r12
  0x00007f8ab9131e5e: mov    0x20(%rsp),%r11
  0x00007f8ab9131e63: mov    0x28(%rsp),%r10
  0x00007f8ab9131e68: mov    0x30(%rsp),%r9
  0x00007f8ab9131e6d: mov    0x38(%rsp),%r8
  0x00007f8ab9131e72: mov    0x40(%rsp),%rdi
  0x00007f8ab9131e77: mov    0x48(%rsp),%rsi
  0x00007f8ab9131e7c: mov    0x50(%rsp),%rbp
  0x00007f8ab9131e81: mov    0x60(%rsp),%rbx
  0x00007f8ab9131e86: mov    0x68(%rsp),%rdx
  0x00007f8ab9131e8b: mov    0x70(%rsp),%rcx
  0x00007f8ab9131e90: mov    0x78(%rsp),%rax
  0x00007f8ab9131e95: add    $0x80,%rsp
  0x00007f8ab9131e9c: add    $0x8,%rsp
  0x00007f8ab9131ea0: popfq  
  0x00007f8ab9131ea1: mov    %r13,%rsp
  0x00007f8ab9131ea4: pop    %rax
  0x00007f8ab9131ea5: mov    %rsp,%r13
  0x00007f8ab9131ea8: sub    $0x10,%rsp
  0x00007f8ab9131eac: mov    %rax,(%rsp)
  0x00007f8ab9131eb0: mov    %rsi,0x8(%rsp)
  0x00007f8ab9131eb5: mov    0x40(%rbx),%rcx
  0x00007f8ab9131eb9: jmpq   *%rcx

AHE@0x00007f8ac80d8230: 0xbba00000 i2c: 0x00007f8ab9131f60 c2i: 0x00007f8ab913207b c2iUV: 0x00007f8ab913204e
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)V (555 bytes generated)
c2i argument handler starts at 0x7f8ab913207b
  0x00007f8ab9131f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9131f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9131f6e: cmp    %r11,%rax
  0x00007f8ab9131f71: jbe    0x00007f8ab9131f8a
  0x00007f8ab9131f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9131f81: cmp    %r11,%rax
  0x00007f8ab9131f84: jb     0x00007f8ab9132027
  0x00007f8ab9131f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9131f94: cmp    %r11,%rax
  0x00007f8ab9131f97: jbe    0x00007f8ab9131fb0
  0x00007f8ab9131f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9131fa7: cmp    %r11,%rax
  0x00007f8ab9131faa: jb     0x00007f8ab9132027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9131fb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9131fb5: sub    $0x80,%rsp
  0x00007f8ab9131fbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9131fc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9131fc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9131fcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9131fd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9131fd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9131fda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9131fdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9131fe4: mov    %r9,0x30(%rsp)
  0x00007f8ab9131fe9: mov    %r10,0x28(%rsp)
  0x00007f8ab9131fee: mov    %r11,0x20(%rsp)
  0x00007f8ab9131ff3: mov    %r12,0x18(%rsp)
  0x00007f8ab9131ff8: mov    %r13,0x10(%rsp)
  0x00007f8ab9131ffd: mov    %r14,0x8(%rsp)
  0x00007f8ab9132002: mov    %r15,(%rsp)
  0x00007f8ab9132006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9132010: movabs $0x7f8ab9131fb0,%rsi
  0x00007f8ab913201a: mov    %rsp,%rdx
  0x00007f8ab913201d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132021: callq  0x00007f8aceddb9fa
  0x00007f8ab9132026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9132027: mov    %rsp,%r11
  0x00007f8ab913202a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913202e: push   %rax
  0x00007f8ab913202f: mov    %r11,%rax
  0x00007f8ab9132032: mov    0x50(%rbx),%r11
  0x00007f8ab9132036: mov    0x18(%rax),%rsi
  0x00007f8ab913203a: mov    0x10(%rax),%rdx
  0x00007f8ab913203e: mov    0x8(%rax),%ecx
  0x00007f8ab9132041: mov    %rbx,0x258(%r15)
  0x00007f8ab9132048: mov    %rbx,%rax
  0x00007f8ab913204b: jmpq   *%r11
  0x00007f8ab913204e: mov    0x8(%rsi),%ebx
  0x00007f8ab9132051: shl    $0x3,%rbx
  0x00007f8ab9132055: cmp    0x10(%rax),%rbx
  0x00007f8ab9132059: mov    0x8(%rax),%rbx
  0x00007f8ab913205d: je     0x00007f8ab9132068
  0x00007f8ab9132063: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132068: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132070: je     0x00007f8ab913216b
  0x00007f8ab9132076: jmpq   0x00007f8ab9105c40
  0x00007f8ab913207b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132083: je     0x00007f8ab913216b
  0x00007f8ab9132089: mov    %rsp,%r13
  0x00007f8ab913208c: mov    (%rsp),%rax
  0x00007f8ab9132090: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132094: pushfq 
  0x00007f8ab9132095: sub    $0x8,%rsp
  0x00007f8ab9132099: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913209e: sub    $0x80,%rsp
  0x00007f8ab91320a5: mov    %rax,0x78(%rsp)
  0x00007f8ab91320aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab91320af: mov    %rdx,0x68(%rsp)
  0x00007f8ab91320b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab91320b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab91320be: mov    %rsi,0x48(%rsp)
  0x00007f8ab91320c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91320c8: mov    %r8,0x38(%rsp)
  0x00007f8ab91320cd: mov    %r9,0x30(%rsp)
  0x00007f8ab91320d2: mov    %r10,0x28(%rsp)
  0x00007f8ab91320d7: mov    %r11,0x20(%rsp)
  0x00007f8ab91320dc: mov    %r12,0x18(%rsp)
  0x00007f8ab91320e1: mov    %r13,0x10(%rsp)
  0x00007f8ab91320e6: mov    %r14,0x8(%rsp)
  0x00007f8ab91320eb: mov    %r15,(%rsp)
  0x00007f8ab91320ef: sub    $0x200,%rsp
  0x00007f8ab91320f6: fxsave64 (%rsp)
  0x00007f8ab91320fb: mov    %rbx,%rdi
  0x00007f8ab91320fe: mov    %rax,%rsi
  0x00007f8ab9132101: callq  0x00007f8acef8bbca
  0x00007f8ab9132106: fxrstor64 (%rsp)
  0x00007f8ab913210b: add    $0x200,%rsp
  0x00007f8ab9132112: mov    (%rsp),%r15
  0x00007f8ab9132116: mov    0x8(%rsp),%r14
  0x00007f8ab913211b: mov    0x10(%rsp),%r13
  0x00007f8ab9132120: mov    0x18(%rsp),%r12
  0x00007f8ab9132125: mov    0x20(%rsp),%r11
  0x00007f8ab913212a: mov    0x28(%rsp),%r10
  0x00007f8ab913212f: mov    0x30(%rsp),%r9
  0x00007f8ab9132134: mov    0x38(%rsp),%r8
  0x00007f8ab9132139: mov    0x40(%rsp),%rdi
  0x00007f8ab913213e: mov    0x48(%rsp),%rsi
  0x00007f8ab9132143: mov    0x50(%rsp),%rbp
  0x00007f8ab9132148: mov    0x60(%rsp),%rbx
  0x00007f8ab913214d: mov    0x68(%rsp),%rdx
  0x00007f8ab9132152: mov    0x70(%rsp),%rcx
  0x00007f8ab9132157: mov    0x78(%rsp),%rax
  0x00007f8ab913215c: add    $0x80,%rsp
  0x00007f8ab9132163: add    $0x8,%rsp
  0x00007f8ab9132167: popfq  
  0x00007f8ab9132168: mov    %r13,%rsp
  0x00007f8ab913216b: pop    %rax
  0x00007f8ab913216c: mov    %rsp,%r13
  0x00007f8ab913216f: sub    $0x20,%rsp
  0x00007f8ab9132173: mov    %rax,(%rsp)
  0x00007f8ab9132177: mov    %rsi,0x18(%rsp)
  0x00007f8ab913217c: mov    %rdx,0x10(%rsp)
  0x00007f8ab9132181: mov    %ecx,0x8(%rsp)
  0x00007f8ab9132185: mov    0x40(%rbx),%rcx
  0x00007f8ab9132189: jmpq   *%rcx

AHE@0x00007f8ac80d8278: 0xbba00000 i2c: 0x00007f8ab9132260 c2i: 0x00007f8ab913237b c2iUV: 0x00007f8ab913234e
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)V (555 bytes generated)
c2i argument handler starts at 0x7f8ab913237b
  0x00007f8ab9132260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9132264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913226e: cmp    %r11,%rax
  0x00007f8ab9132271: jbe    0x00007f8ab913228a
  0x00007f8ab9132277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9132281: cmp    %r11,%rax
  0x00007f8ab9132284: jb     0x00007f8ab9132327
  0x00007f8ab913228a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9132294: cmp    %r11,%rax
  0x00007f8ab9132297: jbe    0x00007f8ab91322b0
  0x00007f8ab913229d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91322a7: cmp    %r11,%rax
  0x00007f8ab91322aa: jb     0x00007f8ab9132327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91322b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91322b5: sub    $0x80,%rsp
  0x00007f8ab91322bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91322c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91322c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91322cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91322d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91322d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91322da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91322df: mov    %r8,0x38(%rsp)
  0x00007f8ab91322e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91322e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91322ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91322f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91322f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91322fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9132302: mov    %r15,(%rsp)
  0x00007f8ab9132306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9132310: movabs $0x7f8ab91322b0,%rsi
  0x00007f8ab913231a: mov    %rsp,%rdx
  0x00007f8ab913231d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132321: callq  0x00007f8aceddb9fa
  0x00007f8ab9132326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9132327: mov    %rsp,%r11
  0x00007f8ab913232a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913232e: push   %rax
  0x00007f8ab913232f: mov    %r11,%rax
  0x00007f8ab9132332: mov    0x50(%rbx),%r11
  0x00007f8ab9132336: mov    0x18(%rax),%rsi
  0x00007f8ab913233a: mov    0x10(%rax),%rdx
  0x00007f8ab913233e: mov    0x8(%rax),%ecx
  0x00007f8ab9132341: mov    %rbx,0x258(%r15)
  0x00007f8ab9132348: mov    %rbx,%rax
  0x00007f8ab913234b: jmpq   *%r11
  0x00007f8ab913234e: mov    0x8(%rsi),%ebx
  0x00007f8ab9132351: shl    $0x3,%rbx
  0x00007f8ab9132355: cmp    0x10(%rax),%rbx
  0x00007f8ab9132359: mov    0x8(%rax),%rbx
  0x00007f8ab913235d: je     0x00007f8ab9132368
  0x00007f8ab9132363: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132368: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132370: je     0x00007f8ab913246b
  0x00007f8ab9132376: jmpq   0x00007f8ab9105c40
  0x00007f8ab913237b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132383: je     0x00007f8ab913246b
  0x00007f8ab9132389: mov    %rsp,%r13
  0x00007f8ab913238c: mov    (%rsp),%rax
  0x00007f8ab9132390: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132394: pushfq 
  0x00007f8ab9132395: sub    $0x8,%rsp
  0x00007f8ab9132399: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913239e: sub    $0x80,%rsp
  0x00007f8ab91323a5: mov    %rax,0x78(%rsp)
  0x00007f8ab91323aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab91323af: mov    %rdx,0x68(%rsp)
  0x00007f8ab91323b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab91323b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab91323be: mov    %rsi,0x48(%rsp)
  0x00007f8ab91323c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91323c8: mov    %r8,0x38(%rsp)
  0x00007f8ab91323cd: mov    %r9,0x30(%rsp)
  0x00007f8ab91323d2: mov    %r10,0x28(%rsp)
  0x00007f8ab91323d7: mov    %r11,0x20(%rsp)
  0x00007f8ab91323dc: mov    %r12,0x18(%rsp)
  0x00007f8ab91323e1: mov    %r13,0x10(%rsp)
  0x00007f8ab91323e6: mov    %r14,0x8(%rsp)
  0x00007f8ab91323eb: mov    %r15,(%rsp)
  0x00007f8ab91323ef: sub    $0x200,%rsp
  0x00007f8ab91323f6: fxsave64 (%rsp)
  0x00007f8ab91323fb: mov    %rbx,%rdi
  0x00007f8ab91323fe: mov    %rax,%rsi
  0x00007f8ab9132401: callq  0x00007f8acef8bbca
  0x00007f8ab9132406: fxrstor64 (%rsp)
  0x00007f8ab913240b: add    $0x200,%rsp
  0x00007f8ab9132412: mov    (%rsp),%r15
  0x00007f8ab9132416: mov    0x8(%rsp),%r14
  0x00007f8ab913241b: mov    0x10(%rsp),%r13
  0x00007f8ab9132420: mov    0x18(%rsp),%r12
  0x00007f8ab9132425: mov    0x20(%rsp),%r11
  0x00007f8ab913242a: mov    0x28(%rsp),%r10
  0x00007f8ab913242f: mov    0x30(%rsp),%r9
  0x00007f8ab9132434: mov    0x38(%rsp),%r8
  0x00007f8ab9132439: mov    0x40(%rsp),%rdi
  0x00007f8ab913243e: mov    0x48(%rsp),%rsi
  0x00007f8ab9132443: mov    0x50(%rsp),%rbp
  0x00007f8ab9132448: mov    0x60(%rsp),%rbx
  0x00007f8ab913244d: mov    0x68(%rsp),%rdx
  0x00007f8ab9132452: mov    0x70(%rsp),%rcx
  0x00007f8ab9132457: mov    0x78(%rsp),%rax
  0x00007f8ab913245c: add    $0x80,%rsp
  0x00007f8ab9132463: add    $0x8,%rsp
  0x00007f8ab9132467: popfq  
  0x00007f8ab9132468: mov    %r13,%rsp
  0x00007f8ab913246b: pop    %rax
  0x00007f8ab913246c: mov    %rsp,%r13
  0x00007f8ab913246f: sub    $0x20,%rsp
  0x00007f8ab9132473: mov    %rax,(%rsp)
  0x00007f8ab9132477: mov    %rsi,0x18(%rsp)
  0x00007f8ab913247c: mov    %rdx,0x10(%rsp)
  0x00007f8ab9132481: mov    %ecx,0x8(%rsp)
  0x00007f8ab9132485: mov    0x40(%rbx),%rcx
  0x00007f8ab9132489: jmpq   *%rcx

AHE@0x00007f8ac80d82c0: 0xba000000 i2c: 0x00007f8ab9132560 c2i: 0x00007f8ab9132677 c2iUV: 0x00007f8ab913264a
i2c argument handler #0 for: receiver (Z)V (546 bytes generated)
c2i argument handler starts at 0x7f8ab9132677
  0x00007f8ab9132560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9132564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913256e: cmp    %r11,%rax
  0x00007f8ab9132571: jbe    0x00007f8ab913258a
  0x00007f8ab9132577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9132581: cmp    %r11,%rax
  0x00007f8ab9132584: jb     0x00007f8ab9132627
  0x00007f8ab913258a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9132594: cmp    %r11,%rax
  0x00007f8ab9132597: jbe    0x00007f8ab91325b0
  0x00007f8ab913259d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91325a7: cmp    %r11,%rax
  0x00007f8ab91325aa: jb     0x00007f8ab9132627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91325b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91325b5: sub    $0x80,%rsp
  0x00007f8ab91325bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91325c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91325c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91325cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91325d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91325d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91325da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91325df: mov    %r8,0x38(%rsp)
  0x00007f8ab91325e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91325e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91325ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91325f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91325f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91325fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9132602: mov    %r15,(%rsp)
  0x00007f8ab9132606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9132610: movabs $0x7f8ab91325b0,%rsi
  0x00007f8ab913261a: mov    %rsp,%rdx
  0x00007f8ab913261d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132621: callq  0x00007f8aceddb9fa
  0x00007f8ab9132626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9132627: mov    %rsp,%r11
  0x00007f8ab913262a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913262e: push   %rax
  0x00007f8ab913262f: mov    %r11,%rax
  0x00007f8ab9132632: mov    0x50(%rbx),%r11
  0x00007f8ab9132636: mov    0x10(%rax),%rsi
  0x00007f8ab913263a: mov    0x8(%rax),%edx
  0x00007f8ab913263d: mov    %rbx,0x258(%r15)
  0x00007f8ab9132644: mov    %rbx,%rax
  0x00007f8ab9132647: jmpq   *%r11
  0x00007f8ab913264a: mov    0x8(%rsi),%ebx
  0x00007f8ab913264d: shl    $0x3,%rbx
  0x00007f8ab9132651: cmp    0x10(%rax),%rbx
  0x00007f8ab9132655: mov    0x8(%rax),%rbx
  0x00007f8ab9132659: je     0x00007f8ab9132664
  0x00007f8ab913265f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132664: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913266c: je     0x00007f8ab9132767
  0x00007f8ab9132672: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132677: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913267f: je     0x00007f8ab9132767
  0x00007f8ab9132685: mov    %rsp,%r13
  0x00007f8ab9132688: mov    (%rsp),%rax
  0x00007f8ab913268c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132690: pushfq 
  0x00007f8ab9132691: sub    $0x8,%rsp
  0x00007f8ab9132695: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913269a: sub    $0x80,%rsp
  0x00007f8ab91326a1: mov    %rax,0x78(%rsp)
  0x00007f8ab91326a6: mov    %rcx,0x70(%rsp)
  0x00007f8ab91326ab: mov    %rdx,0x68(%rsp)
  0x00007f8ab91326b0: mov    %rbx,0x60(%rsp)
  0x00007f8ab91326b5: mov    %rbp,0x50(%rsp)
  0x00007f8ab91326ba: mov    %rsi,0x48(%rsp)
  0x00007f8ab91326bf: mov    %rdi,0x40(%rsp)
  0x00007f8ab91326c4: mov    %r8,0x38(%rsp)
  0x00007f8ab91326c9: mov    %r9,0x30(%rsp)
  0x00007f8ab91326ce: mov    %r10,0x28(%rsp)
  0x00007f8ab91326d3: mov    %r11,0x20(%rsp)
  0x00007f8ab91326d8: mov    %r12,0x18(%rsp)
  0x00007f8ab91326dd: mov    %r13,0x10(%rsp)
  0x00007f8ab91326e2: mov    %r14,0x8(%rsp)
  0x00007f8ab91326e7: mov    %r15,(%rsp)
  0x00007f8ab91326eb: sub    $0x200,%rsp
  0x00007f8ab91326f2: fxsave64 (%rsp)
  0x00007f8ab91326f7: mov    %rbx,%rdi
  0x00007f8ab91326fa: mov    %rax,%rsi
  0x00007f8ab91326fd: callq  0x00007f8acef8bbca
  0x00007f8ab9132702: fxrstor64 (%rsp)
  0x00007f8ab9132707: add    $0x200,%rsp
  0x00007f8ab913270e: mov    (%rsp),%r15
  0x00007f8ab9132712: mov    0x8(%rsp),%r14
  0x00007f8ab9132717: mov    0x10(%rsp),%r13
  0x00007f8ab913271c: mov    0x18(%rsp),%r12
  0x00007f8ab9132721: mov    0x20(%rsp),%r11
  0x00007f8ab9132726: mov    0x28(%rsp),%r10
  0x00007f8ab913272b: mov    0x30(%rsp),%r9
  0x00007f8ab9132730: mov    0x38(%rsp),%r8
  0x00007f8ab9132735: mov    0x40(%rsp),%rdi
  0x00007f8ab913273a: mov    0x48(%rsp),%rsi
  0x00007f8ab913273f: mov    0x50(%rsp),%rbp
  0x00007f8ab9132744: mov    0x60(%rsp),%rbx
  0x00007f8ab9132749: mov    0x68(%rsp),%rdx
  0x00007f8ab913274e: mov    0x70(%rsp),%rcx
  0x00007f8ab9132753: mov    0x78(%rsp),%rax
  0x00007f8ab9132758: add    $0x80,%rsp
  0x00007f8ab913275f: add    $0x8,%rsp
  0x00007f8ab9132763: popfq  
  0x00007f8ab9132764: mov    %r13,%rsp
  0x00007f8ab9132767: pop    %rax
  0x00007f8ab9132768: mov    %rsp,%r13
  0x00007f8ab913276b: sub    $0x20,%rsp
  0x00007f8ab913276f: mov    %rax,(%rsp)
  0x00007f8ab9132773: mov    %rsi,0x10(%rsp)
  0x00007f8ab9132778: mov    %edx,0x8(%rsp)
  0x00007f8ab913277c: mov    0x40(%rbx),%rcx
  0x00007f8ab9132780: jmpq   *%rcx

AHE@0x00007f8ac80d8308: 0xbb000000 i2c: 0x00007f8ab9132860 c2i: 0x00007f8ab9132978 c2iUV: 0x00007f8ab913294b
i2c argument handler #0 for: static (Ljava/lang/Class;Ljava/io/File;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab9132978
  0x00007f8ab9132860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9132864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913286e: cmp    %r11,%rax
  0x00007f8ab9132871: jbe    0x00007f8ab913288a
  0x00007f8ab9132877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9132881: cmp    %r11,%rax
  0x00007f8ab9132884: jb     0x00007f8ab9132927
  0x00007f8ab913288a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9132894: cmp    %r11,%rax
  0x00007f8ab9132897: jbe    0x00007f8ab91328b0
  0x00007f8ab913289d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91328a7: cmp    %r11,%rax
  0x00007f8ab91328aa: jb     0x00007f8ab9132927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91328b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91328b5: sub    $0x80,%rsp
  0x00007f8ab91328bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91328c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91328c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91328cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91328d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91328d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91328da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91328df: mov    %r8,0x38(%rsp)
  0x00007f8ab91328e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91328e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91328ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91328f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91328f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91328fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9132902: mov    %r15,(%rsp)
  0x00007f8ab9132906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9132910: movabs $0x7f8ab91328b0,%rsi
  0x00007f8ab913291a: mov    %rsp,%rdx
  0x00007f8ab913291d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132921: callq  0x00007f8aceddb9fa
  0x00007f8ab9132926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9132927: mov    %rsp,%r11
  0x00007f8ab913292a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913292e: push   %rax
  0x00007f8ab913292f: mov    %r11,%rax
  0x00007f8ab9132932: mov    0x50(%rbx),%r11
  0x00007f8ab9132936: mov    0x10(%rax),%rsi
  0x00007f8ab913293a: mov    0x8(%rax),%rdx
  0x00007f8ab913293e: mov    %rbx,0x258(%r15)
  0x00007f8ab9132945: mov    %rbx,%rax
  0x00007f8ab9132948: jmpq   *%r11
  0x00007f8ab913294b: mov    0x8(%rsi),%ebx
  0x00007f8ab913294e: shl    $0x3,%rbx
  0x00007f8ab9132952: cmp    0x10(%rax),%rbx
  0x00007f8ab9132956: mov    0x8(%rax),%rbx
  0x00007f8ab913295a: je     0x00007f8ab9132965
  0x00007f8ab9132960: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132965: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913296d: je     0x00007f8ab9132a68
  0x00007f8ab9132973: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132978: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132980: je     0x00007f8ab9132a68
  0x00007f8ab9132986: mov    %rsp,%r13
  0x00007f8ab9132989: mov    (%rsp),%rax
  0x00007f8ab913298d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132991: pushfq 
  0x00007f8ab9132992: sub    $0x8,%rsp
  0x00007f8ab9132996: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913299b: sub    $0x80,%rsp
  0x00007f8ab91329a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91329a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91329ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91329b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91329b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91329bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91329c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91329c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91329ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91329cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91329d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91329d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91329de: mov    %r13,0x10(%rsp)
  0x00007f8ab91329e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91329e8: mov    %r15,(%rsp)
  0x00007f8ab91329ec: sub    $0x200,%rsp
  0x00007f8ab91329f3: fxsave64 (%rsp)
  0x00007f8ab91329f8: mov    %rbx,%rdi
  0x00007f8ab91329fb: mov    %rax,%rsi
  0x00007f8ab91329fe: callq  0x00007f8acef8bbca
  0x00007f8ab9132a03: fxrstor64 (%rsp)
  0x00007f8ab9132a08: add    $0x200,%rsp
  0x00007f8ab9132a0f: mov    (%rsp),%r15
  0x00007f8ab9132a13: mov    0x8(%rsp),%r14
  0x00007f8ab9132a18: mov    0x10(%rsp),%r13
  0x00007f8ab9132a1d: mov    0x18(%rsp),%r12
  0x00007f8ab9132a22: mov    0x20(%rsp),%r11
  0x00007f8ab9132a27: mov    0x28(%rsp),%r10
  0x00007f8ab9132a2c: mov    0x30(%rsp),%r9
  0x00007f8ab9132a31: mov    0x38(%rsp),%r8
  0x00007f8ab9132a36: mov    0x40(%rsp),%rdi
  0x00007f8ab9132a3b: mov    0x48(%rsp),%rsi
  0x00007f8ab9132a40: mov    0x50(%rsp),%rbp
  0x00007f8ab9132a45: mov    0x60(%rsp),%rbx
  0x00007f8ab9132a4a: mov    0x68(%rsp),%rdx
  0x00007f8ab9132a4f: mov    0x70(%rsp),%rcx
  0x00007f8ab9132a54: mov    0x78(%rsp),%rax
  0x00007f8ab9132a59: add    $0x80,%rsp
  0x00007f8ab9132a60: add    $0x8,%rsp
  0x00007f8ab9132a64: popfq  
  0x00007f8ab9132a65: mov    %r13,%rsp
  0x00007f8ab9132a68: pop    %rax
  0x00007f8ab9132a69: mov    %rsp,%r13
  0x00007f8ab9132a6c: sub    $0x20,%rsp
  0x00007f8ab9132a70: mov    %rax,(%rsp)
  0x00007f8ab9132a74: mov    %rsi,0x10(%rsp)
  0x00007f8ab9132a79: mov    %rdx,0x8(%rsp)
  0x00007f8ab9132a7e: mov    0x40(%rbx),%rcx
  0x00007f8ab9132a82: jmpq   *%rcx

AHE@0x00007f8ac80d8350: 0xb0000000 i2c: 0x00007f8ab9132b60 c2i: 0x00007f8ab9132c74 c2iUV: 0x00007f8ab9132c47
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9132c74
  0x00007f8ab9132b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9132b64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9132b6e: cmp    %r11,%rax
  0x00007f8ab9132b71: jbe    0x00007f8ab9132b8a
  0x00007f8ab9132b77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9132b81: cmp    %r11,%rax
  0x00007f8ab9132b84: jb     0x00007f8ab9132c27
  0x00007f8ab9132b8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9132b94: cmp    %r11,%rax
  0x00007f8ab9132b97: jbe    0x00007f8ab9132bb0
  0x00007f8ab9132b9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9132ba7: cmp    %r11,%rax
  0x00007f8ab9132baa: jb     0x00007f8ab9132c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9132bb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9132bb5: sub    $0x80,%rsp
  0x00007f8ab9132bbc: mov    %rax,0x78(%rsp)
  0x00007f8ab9132bc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9132bc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9132bcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9132bd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9132bd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9132bda: mov    %rdi,0x40(%rsp)
  0x00007f8ab9132bdf: mov    %r8,0x38(%rsp)
  0x00007f8ab9132be4: mov    %r9,0x30(%rsp)
  0x00007f8ab9132be9: mov    %r10,0x28(%rsp)
  0x00007f8ab9132bee: mov    %r11,0x20(%rsp)
  0x00007f8ab9132bf3: mov    %r12,0x18(%rsp)
  0x00007f8ab9132bf8: mov    %r13,0x10(%rsp)
  0x00007f8ab9132bfd: mov    %r14,0x8(%rsp)
  0x00007f8ab9132c02: mov    %r15,(%rsp)
  0x00007f8ab9132c06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9132c10: movabs $0x7f8ab9132bb0,%rsi
  0x00007f8ab9132c1a: mov    %rsp,%rdx
  0x00007f8ab9132c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132c21: callq  0x00007f8aceddb9fa
  0x00007f8ab9132c26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9132c27: mov    %rsp,%r11
  0x00007f8ab9132c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132c2e: push   %rax
  0x00007f8ab9132c2f: mov    %r11,%rax
  0x00007f8ab9132c32: mov    0x50(%rbx),%r11
  0x00007f8ab9132c36: mov    0x8(%rax),%rsi
  0x00007f8ab9132c3a: mov    %rbx,0x258(%r15)
  0x00007f8ab9132c41: mov    %rbx,%rax
  0x00007f8ab9132c44: jmpq   *%r11
  0x00007f8ab9132c47: mov    0x8(%rsi),%ebx
  0x00007f8ab9132c4a: shl    $0x3,%rbx
  0x00007f8ab9132c4e: cmp    0x10(%rax),%rbx
  0x00007f8ab9132c52: mov    0x8(%rax),%rbx
  0x00007f8ab9132c56: je     0x00007f8ab9132c61
  0x00007f8ab9132c5c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132c61: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132c69: je     0x00007f8ab9132d64
  0x00007f8ab9132c6f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132c74: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132c7c: je     0x00007f8ab9132d64
  0x00007f8ab9132c82: mov    %rsp,%r13
  0x00007f8ab9132c85: mov    (%rsp),%rax
  0x00007f8ab9132c89: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132c8d: pushfq 
  0x00007f8ab9132c8e: sub    $0x8,%rsp
  0x00007f8ab9132c92: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9132c97: sub    $0x80,%rsp
  0x00007f8ab9132c9e: mov    %rax,0x78(%rsp)
  0x00007f8ab9132ca3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9132ca8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9132cad: mov    %rbx,0x60(%rsp)
  0x00007f8ab9132cb2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9132cb7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9132cbc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9132cc1: mov    %r8,0x38(%rsp)
  0x00007f8ab9132cc6: mov    %r9,0x30(%rsp)
  0x00007f8ab9132ccb: mov    %r10,0x28(%rsp)
  0x00007f8ab9132cd0: mov    %r11,0x20(%rsp)
  0x00007f8ab9132cd5: mov    %r12,0x18(%rsp)
  0x00007f8ab9132cda: mov    %r13,0x10(%rsp)
  0x00007f8ab9132cdf: mov    %r14,0x8(%rsp)
  0x00007f8ab9132ce4: mov    %r15,(%rsp)
  0x00007f8ab9132ce8: sub    $0x200,%rsp
  0x00007f8ab9132cef: fxsave64 (%rsp)
  0x00007f8ab9132cf4: mov    %rbx,%rdi
  0x00007f8ab9132cf7: mov    %rax,%rsi
  0x00007f8ab9132cfa: callq  0x00007f8acef8bbca
  0x00007f8ab9132cff: fxrstor64 (%rsp)
  0x00007f8ab9132d04: add    $0x200,%rsp
  0x00007f8ab9132d0b: mov    (%rsp),%r15
  0x00007f8ab9132d0f: mov    0x8(%rsp),%r14
  0x00007f8ab9132d14: mov    0x10(%rsp),%r13
  0x00007f8ab9132d19: mov    0x18(%rsp),%r12
  0x00007f8ab9132d1e: mov    0x20(%rsp),%r11
  0x00007f8ab9132d23: mov    0x28(%rsp),%r10
  0x00007f8ab9132d28: mov    0x30(%rsp),%r9
  0x00007f8ab9132d2d: mov    0x38(%rsp),%r8
  0x00007f8ab9132d32: mov    0x40(%rsp),%rdi
  0x00007f8ab9132d37: mov    0x48(%rsp),%rsi
  0x00007f8ab9132d3c: mov    0x50(%rsp),%rbp
  0x00007f8ab9132d41: mov    0x60(%rsp),%rbx
  0x00007f8ab9132d46: mov    0x68(%rsp),%rdx
  0x00007f8ab9132d4b: mov    0x70(%rsp),%rcx
  0x00007f8ab9132d50: mov    0x78(%rsp),%rax
  0x00007f8ab9132d55: add    $0x80,%rsp
  0x00007f8ab9132d5c: add    $0x8,%rsp
  0x00007f8ab9132d60: popfq  
  0x00007f8ab9132d61: mov    %r13,%rsp
  0x00007f8ab9132d64: pop    %rax
  0x00007f8ab9132d65: mov    %rsp,%r13
  0x00007f8ab9132d68: sub    $0x10,%rsp
  0x00007f8ab9132d6c: mov    %rax,(%rsp)
  0x00007f8ab9132d70: mov    %rsi,0x8(%rsp)
  0x00007f8ab9132d75: mov    0x40(%rbx),%rcx
  0x00007f8ab9132d79: jmpq   *%rcx

AHE@0x00007f8ac80d8398: 0xbba00000 i2c: 0x00007f8ab9132e20 c2i: 0x00007f8ab9132f3b c2iUV: 0x00007f8ab9132f0e
i2c argument handler #0 for: static (Ljava/lang/Class;Ljava/lang/String;Z)V (555 bytes generated)
c2i argument handler starts at 0x7f8ab9132f3b
  0x00007f8ab9132e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9132e24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9132e2e: cmp    %r11,%rax
  0x00007f8ab9132e31: jbe    0x00007f8ab9132e4a
  0x00007f8ab9132e37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9132e41: cmp    %r11,%rax
  0x00007f8ab9132e44: jb     0x00007f8ab9132ee7
  0x00007f8ab9132e4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9132e54: cmp    %r11,%rax
  0x00007f8ab9132e57: jbe    0x00007f8ab9132e70
  0x00007f8ab9132e5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9132e67: cmp    %r11,%rax
  0x00007f8ab9132e6a: jb     0x00007f8ab9132ee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9132e70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9132e75: sub    $0x80,%rsp
  0x00007f8ab9132e7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9132e81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9132e86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9132e8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9132e90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9132e95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9132e9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9132e9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9132ea4: mov    %r9,0x30(%rsp)
  0x00007f8ab9132ea9: mov    %r10,0x28(%rsp)
  0x00007f8ab9132eae: mov    %r11,0x20(%rsp)
  0x00007f8ab9132eb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9132eb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9132ebd: mov    %r14,0x8(%rsp)
  0x00007f8ab9132ec2: mov    %r15,(%rsp)
  0x00007f8ab9132ec6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9132ed0: movabs $0x7f8ab9132e70,%rsi
  0x00007f8ab9132eda: mov    %rsp,%rdx
  0x00007f8ab9132edd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132ee1: callq  0x00007f8aceddb9fa
  0x00007f8ab9132ee6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9132ee7: mov    %rsp,%r11
  0x00007f8ab9132eea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132eee: push   %rax
  0x00007f8ab9132eef: mov    %r11,%rax
  0x00007f8ab9132ef2: mov    0x50(%rbx),%r11
  0x00007f8ab9132ef6: mov    0x18(%rax),%rsi
  0x00007f8ab9132efa: mov    0x10(%rax),%rdx
  0x00007f8ab9132efe: mov    0x8(%rax),%ecx
  0x00007f8ab9132f01: mov    %rbx,0x258(%r15)
  0x00007f8ab9132f08: mov    %rbx,%rax
  0x00007f8ab9132f0b: jmpq   *%r11
  0x00007f8ab9132f0e: mov    0x8(%rsi),%ebx
  0x00007f8ab9132f11: shl    $0x3,%rbx
  0x00007f8ab9132f15: cmp    0x10(%rax),%rbx
  0x00007f8ab9132f19: mov    0x8(%rax),%rbx
  0x00007f8ab9132f1d: je     0x00007f8ab9132f28
  0x00007f8ab9132f23: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132f28: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132f30: je     0x00007f8ab913302b
  0x00007f8ab9132f36: jmpq   0x00007f8ab9105c40
  0x00007f8ab9132f3b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9132f43: je     0x00007f8ab913302b
  0x00007f8ab9132f49: mov    %rsp,%r13
  0x00007f8ab9132f4c: mov    (%rsp),%rax
  0x00007f8ab9132f50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9132f54: pushfq 
  0x00007f8ab9132f55: sub    $0x8,%rsp
  0x00007f8ab9132f59: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9132f5e: sub    $0x80,%rsp
  0x00007f8ab9132f65: mov    %rax,0x78(%rsp)
  0x00007f8ab9132f6a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9132f6f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9132f74: mov    %rbx,0x60(%rsp)
  0x00007f8ab9132f79: mov    %rbp,0x50(%rsp)
  0x00007f8ab9132f7e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9132f83: mov    %rdi,0x40(%rsp)
  0x00007f8ab9132f88: mov    %r8,0x38(%rsp)
  0x00007f8ab9132f8d: mov    %r9,0x30(%rsp)
  0x00007f8ab9132f92: mov    %r10,0x28(%rsp)
  0x00007f8ab9132f97: mov    %r11,0x20(%rsp)
  0x00007f8ab9132f9c: mov    %r12,0x18(%rsp)
  0x00007f8ab9132fa1: mov    %r13,0x10(%rsp)
  0x00007f8ab9132fa6: mov    %r14,0x8(%rsp)
  0x00007f8ab9132fab: mov    %r15,(%rsp)
  0x00007f8ab9132faf: sub    $0x200,%rsp
  0x00007f8ab9132fb6: fxsave64 (%rsp)
  0x00007f8ab9132fbb: mov    %rbx,%rdi
  0x00007f8ab9132fbe: mov    %rax,%rsi
  0x00007f8ab9132fc1: callq  0x00007f8acef8bbca
  0x00007f8ab9132fc6: fxrstor64 (%rsp)
  0x00007f8ab9132fcb: add    $0x200,%rsp
  0x00007f8ab9132fd2: mov    (%rsp),%r15
  0x00007f8ab9132fd6: mov    0x8(%rsp),%r14
  0x00007f8ab9132fdb: mov    0x10(%rsp),%r13
  0x00007f8ab9132fe0: mov    0x18(%rsp),%r12
  0x00007f8ab9132fe5: mov    0x20(%rsp),%r11
  0x00007f8ab9132fea: mov    0x28(%rsp),%r10
  0x00007f8ab9132fef: mov    0x30(%rsp),%r9
  0x00007f8ab9132ff4: mov    0x38(%rsp),%r8
  0x00007f8ab9132ff9: mov    0x40(%rsp),%rdi
  0x00007f8ab9132ffe: mov    0x48(%rsp),%rsi
  0x00007f8ab9133003: mov    0x50(%rsp),%rbp
  0x00007f8ab9133008: mov    0x60(%rsp),%rbx
  0x00007f8ab913300d: mov    0x68(%rsp),%rdx
  0x00007f8ab9133012: mov    0x70(%rsp),%rcx
  0x00007f8ab9133017: mov    0x78(%rsp),%rax
  0x00007f8ab913301c: add    $0x80,%rsp
  0x00007f8ab9133023: add    $0x8,%rsp
  0x00007f8ab9133027: popfq  
  0x00007f8ab9133028: mov    %r13,%rsp
  0x00007f8ab913302b: pop    %rax
  0x00007f8ab913302c: mov    %rsp,%r13
  0x00007f8ab913302f: sub    $0x20,%rsp
  0x00007f8ab9133033: mov    %rax,(%rsp)
  0x00007f8ab9133037: mov    %rsi,0x18(%rsp)
  0x00007f8ab913303c: mov    %rdx,0x10(%rsp)
  0x00007f8ab9133041: mov    %ecx,0x8(%rsp)
  0x00007f8ab9133045: mov    0x40(%rbx),%rcx
  0x00007f8ab9133049: jmpq   *%rcx

AHE@0x00007f8ac80d83e0: 0xb0000000 i2c: 0x00007f8ab9133120 c2i: 0x00007f8ab9133234 c2iUV: 0x00007f8ab9133207
i2c argument handler #0 for: static (Ljava/lang/String;)[Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9133234
  0x00007f8ab9133120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9133124: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913312e: cmp    %r11,%rax
  0x00007f8ab9133131: jbe    0x00007f8ab913314a
  0x00007f8ab9133137: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9133141: cmp    %r11,%rax
  0x00007f8ab9133144: jb     0x00007f8ab91331e7
  0x00007f8ab913314a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9133154: cmp    %r11,%rax
  0x00007f8ab9133157: jbe    0x00007f8ab9133170
  0x00007f8ab913315d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9133167: cmp    %r11,%rax
  0x00007f8ab913316a: jb     0x00007f8ab91331e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9133170: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133175: sub    $0x80,%rsp
  0x00007f8ab913317c: mov    %rax,0x78(%rsp)
  0x00007f8ab9133181: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133186: mov    %rdx,0x68(%rsp)
  0x00007f8ab913318b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133190: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133195: mov    %rsi,0x48(%rsp)
  0x00007f8ab913319a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913319f: mov    %r8,0x38(%rsp)
  0x00007f8ab91331a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91331a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91331ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91331b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91331b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91331bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91331c2: mov    %r15,(%rsp)
  0x00007f8ab91331c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91331d0: movabs $0x7f8ab9133170,%rsi
  0x00007f8ab91331da: mov    %rsp,%rdx
  0x00007f8ab91331dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91331e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91331e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91331e7: mov    %rsp,%r11
  0x00007f8ab91331ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91331ee: push   %rax
  0x00007f8ab91331ef: mov    %r11,%rax
  0x00007f8ab91331f2: mov    0x50(%rbx),%r11
  0x00007f8ab91331f6: mov    0x8(%rax),%rsi
  0x00007f8ab91331fa: mov    %rbx,0x258(%r15)
  0x00007f8ab9133201: mov    %rbx,%rax
  0x00007f8ab9133204: jmpq   *%r11
  0x00007f8ab9133207: mov    0x8(%rsi),%ebx
  0x00007f8ab913320a: shl    $0x3,%rbx
  0x00007f8ab913320e: cmp    0x10(%rax),%rbx
  0x00007f8ab9133212: mov    0x8(%rax),%rbx
  0x00007f8ab9133216: je     0x00007f8ab9133221
  0x00007f8ab913321c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9133221: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9133229: je     0x00007f8ab9133324
  0x00007f8ab913322f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9133234: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913323c: je     0x00007f8ab9133324
  0x00007f8ab9133242: mov    %rsp,%r13
  0x00007f8ab9133245: mov    (%rsp),%rax
  0x00007f8ab9133249: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913324d: pushfq 
  0x00007f8ab913324e: sub    $0x8,%rsp
  0x00007f8ab9133252: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133257: sub    $0x80,%rsp
  0x00007f8ab913325e: mov    %rax,0x78(%rsp)
  0x00007f8ab9133263: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133268: mov    %rdx,0x68(%rsp)
  0x00007f8ab913326d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133272: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133277: mov    %rsi,0x48(%rsp)
  0x00007f8ab913327c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9133281: mov    %r8,0x38(%rsp)
  0x00007f8ab9133286: mov    %r9,0x30(%rsp)
  0x00007f8ab913328b: mov    %r10,0x28(%rsp)
  0x00007f8ab9133290: mov    %r11,0x20(%rsp)
  0x00007f8ab9133295: mov    %r12,0x18(%rsp)
  0x00007f8ab913329a: mov    %r13,0x10(%rsp)
  0x00007f8ab913329f: mov    %r14,0x8(%rsp)
  0x00007f8ab91332a4: mov    %r15,(%rsp)
  0x00007f8ab91332a8: sub    $0x200,%rsp
  0x00007f8ab91332af: fxsave64 (%rsp)
  0x00007f8ab91332b4: mov    %rbx,%rdi
  0x00007f8ab91332b7: mov    %rax,%rsi
  0x00007f8ab91332ba: callq  0x00007f8acef8bbca
  0x00007f8ab91332bf: fxrstor64 (%rsp)
  0x00007f8ab91332c4: add    $0x200,%rsp
  0x00007f8ab91332cb: mov    (%rsp),%r15
  0x00007f8ab91332cf: mov    0x8(%rsp),%r14
  0x00007f8ab91332d4: mov    0x10(%rsp),%r13
  0x00007f8ab91332d9: mov    0x18(%rsp),%r12
  0x00007f8ab91332de: mov    0x20(%rsp),%r11
  0x00007f8ab91332e3: mov    0x28(%rsp),%r10
  0x00007f8ab91332e8: mov    0x30(%rsp),%r9
  0x00007f8ab91332ed: mov    0x38(%rsp),%r8
  0x00007f8ab91332f2: mov    0x40(%rsp),%rdi
  0x00007f8ab91332f7: mov    0x48(%rsp),%rsi
  0x00007f8ab91332fc: mov    0x50(%rsp),%rbp
  0x00007f8ab9133301: mov    0x60(%rsp),%rbx
  0x00007f8ab9133306: mov    0x68(%rsp),%rdx
  0x00007f8ab913330b: mov    0x70(%rsp),%rcx
  0x00007f8ab9133310: mov    0x78(%rsp),%rax
  0x00007f8ab9133315: add    $0x80,%rsp
  0x00007f8ab913331c: add    $0x8,%rsp
  0x00007f8ab9133320: popfq  
  0x00007f8ab9133321: mov    %r13,%rsp
  0x00007f8ab9133324: pop    %rax
  0x00007f8ab9133325: mov    %rsp,%r13
  0x00007f8ab9133328: sub    $0x10,%rsp
  0x00007f8ab913332c: mov    %rax,(%rsp)
  0x00007f8ab9133330: mov    %rsi,0x8(%rsp)
  0x00007f8ab9133335: mov    0x40(%rbx),%rcx
  0x00007f8ab9133339: jmpq   *%rcx

AHE@0x00007f8ac80d8428: 0xbb000000 i2c: 0x00007f8ab91333e0 c2i: 0x00007f8ab91334f8 c2iUV: 0x00007f8ab91334cb
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/String; (548 bytes generated)
c2i argument handler starts at 0x7f8ab91334f8
  0x00007f8ab91333e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91333e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91333ee: cmp    %r11,%rax
  0x00007f8ab91333f1: jbe    0x00007f8ab913340a
  0x00007f8ab91333f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9133401: cmp    %r11,%rax
  0x00007f8ab9133404: jb     0x00007f8ab91334a7
  0x00007f8ab913340a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9133414: cmp    %r11,%rax
  0x00007f8ab9133417: jbe    0x00007f8ab9133430
  0x00007f8ab913341d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9133427: cmp    %r11,%rax
  0x00007f8ab913342a: jb     0x00007f8ab91334a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9133430: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133435: sub    $0x80,%rsp
  0x00007f8ab913343c: mov    %rax,0x78(%rsp)
  0x00007f8ab9133441: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133446: mov    %rdx,0x68(%rsp)
  0x00007f8ab913344b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133450: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133455: mov    %rsi,0x48(%rsp)
  0x00007f8ab913345a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913345f: mov    %r8,0x38(%rsp)
  0x00007f8ab9133464: mov    %r9,0x30(%rsp)
  0x00007f8ab9133469: mov    %r10,0x28(%rsp)
  0x00007f8ab913346e: mov    %r11,0x20(%rsp)
  0x00007f8ab9133473: mov    %r12,0x18(%rsp)
  0x00007f8ab9133478: mov    %r13,0x10(%rsp)
  0x00007f8ab913347d: mov    %r14,0x8(%rsp)
  0x00007f8ab9133482: mov    %r15,(%rsp)
  0x00007f8ab9133486: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9133490: movabs $0x7f8ab9133430,%rsi
  0x00007f8ab913349a: mov    %rsp,%rdx
  0x00007f8ab913349d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91334a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91334a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91334a7: mov    %rsp,%r11
  0x00007f8ab91334aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91334ae: push   %rax
  0x00007f8ab91334af: mov    %r11,%rax
  0x00007f8ab91334b2: mov    0x50(%rbx),%r11
  0x00007f8ab91334b6: mov    0x10(%rax),%rsi
  0x00007f8ab91334ba: mov    0x8(%rax),%rdx
  0x00007f8ab91334be: mov    %rbx,0x258(%r15)
  0x00007f8ab91334c5: mov    %rbx,%rax
  0x00007f8ab91334c8: jmpq   *%r11
  0x00007f8ab91334cb: mov    0x8(%rsi),%ebx
  0x00007f8ab91334ce: shl    $0x3,%rbx
  0x00007f8ab91334d2: cmp    0x10(%rax),%rbx
  0x00007f8ab91334d6: mov    0x8(%rax),%rbx
  0x00007f8ab91334da: je     0x00007f8ab91334e5
  0x00007f8ab91334e0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91334e5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91334ed: je     0x00007f8ab91335e8
  0x00007f8ab91334f3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91334f8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9133500: je     0x00007f8ab91335e8
  0x00007f8ab9133506: mov    %rsp,%r13
  0x00007f8ab9133509: mov    (%rsp),%rax
  0x00007f8ab913350d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9133511: pushfq 
  0x00007f8ab9133512: sub    $0x8,%rsp
  0x00007f8ab9133516: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913351b: sub    $0x80,%rsp
  0x00007f8ab9133522: mov    %rax,0x78(%rsp)
  0x00007f8ab9133527: mov    %rcx,0x70(%rsp)
  0x00007f8ab913352c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9133531: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133536: mov    %rbp,0x50(%rsp)
  0x00007f8ab913353b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9133540: mov    %rdi,0x40(%rsp)
  0x00007f8ab9133545: mov    %r8,0x38(%rsp)
  0x00007f8ab913354a: mov    %r9,0x30(%rsp)
  0x00007f8ab913354f: mov    %r10,0x28(%rsp)
  0x00007f8ab9133554: mov    %r11,0x20(%rsp)
  0x00007f8ab9133559: mov    %r12,0x18(%rsp)
  0x00007f8ab913355e: mov    %r13,0x10(%rsp)
  0x00007f8ab9133563: mov    %r14,0x8(%rsp)
  0x00007f8ab9133568: mov    %r15,(%rsp)
  0x00007f8ab913356c: sub    $0x200,%rsp
  0x00007f8ab9133573: fxsave64 (%rsp)
  0x00007f8ab9133578: mov    %rbx,%rdi
  0x00007f8ab913357b: mov    %rax,%rsi
  0x00007f8ab913357e: callq  0x00007f8acef8bbca
  0x00007f8ab9133583: fxrstor64 (%rsp)
  0x00007f8ab9133588: add    $0x200,%rsp
  0x00007f8ab913358f: mov    (%rsp),%r15
  0x00007f8ab9133593: mov    0x8(%rsp),%r14
  0x00007f8ab9133598: mov    0x10(%rsp),%r13
  0x00007f8ab913359d: mov    0x18(%rsp),%r12
  0x00007f8ab91335a2: mov    0x20(%rsp),%r11
  0x00007f8ab91335a7: mov    0x28(%rsp),%r10
  0x00007f8ab91335ac: mov    0x30(%rsp),%r9
  0x00007f8ab91335b1: mov    0x38(%rsp),%r8
  0x00007f8ab91335b6: mov    0x40(%rsp),%rdi
  0x00007f8ab91335bb: mov    0x48(%rsp),%rsi
  0x00007f8ab91335c0: mov    0x50(%rsp),%rbp
  0x00007f8ab91335c5: mov    0x60(%rsp),%rbx
  0x00007f8ab91335ca: mov    0x68(%rsp),%rdx
  0x00007f8ab91335cf: mov    0x70(%rsp),%rcx
  0x00007f8ab91335d4: mov    0x78(%rsp),%rax
  0x00007f8ab91335d9: add    $0x80,%rsp
  0x00007f8ab91335e0: add    $0x8,%rsp
  0x00007f8ab91335e4: popfq  
  0x00007f8ab91335e5: mov    %r13,%rsp
  0x00007f8ab91335e8: pop    %rax
  0x00007f8ab91335e9: mov    %rsp,%r13
  0x00007f8ab91335ec: sub    $0x20,%rsp
  0x00007f8ab91335f0: mov    %rax,(%rsp)
  0x00007f8ab91335f4: mov    %rsi,0x10(%rsp)
  0x00007f8ab91335f9: mov    %rdx,0x8(%rsp)
  0x00007f8ab91335fe: mov    0x40(%rbx),%rcx
  0x00007f8ab9133602: jmpq   *%rcx

AHE@0x00007f8ac80d8470: 0xb0000000 i2c: 0x00007f8ab91336e0 c2i: 0x00007f8ab91337f4 c2iUV: 0x00007f8ab91337c7
i2c argument handler #0 for: receiver ()[Ljava/lang/Package; (539 bytes generated)
c2i argument handler starts at 0x7f8ab91337f4
  0x00007f8ab91336e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91336e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91336ee: cmp    %r11,%rax
  0x00007f8ab91336f1: jbe    0x00007f8ab913370a
  0x00007f8ab91336f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9133701: cmp    %r11,%rax
  0x00007f8ab9133704: jb     0x00007f8ab91337a7
  0x00007f8ab913370a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9133714: cmp    %r11,%rax
  0x00007f8ab9133717: jbe    0x00007f8ab9133730
  0x00007f8ab913371d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9133727: cmp    %r11,%rax
  0x00007f8ab913372a: jb     0x00007f8ab91337a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9133730: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133735: sub    $0x80,%rsp
  0x00007f8ab913373c: mov    %rax,0x78(%rsp)
  0x00007f8ab9133741: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133746: mov    %rdx,0x68(%rsp)
  0x00007f8ab913374b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133750: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133755: mov    %rsi,0x48(%rsp)
  0x00007f8ab913375a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913375f: mov    %r8,0x38(%rsp)
  0x00007f8ab9133764: mov    %r9,0x30(%rsp)
  0x00007f8ab9133769: mov    %r10,0x28(%rsp)
  0x00007f8ab913376e: mov    %r11,0x20(%rsp)
  0x00007f8ab9133773: mov    %r12,0x18(%rsp)
  0x00007f8ab9133778: mov    %r13,0x10(%rsp)
  0x00007f8ab913377d: mov    %r14,0x8(%rsp)
  0x00007f8ab9133782: mov    %r15,(%rsp)
  0x00007f8ab9133786: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9133790: movabs $0x7f8ab9133730,%rsi
  0x00007f8ab913379a: mov    %rsp,%rdx
  0x00007f8ab913379d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91337a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91337a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91337a7: mov    %rsp,%r11
  0x00007f8ab91337aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91337ae: push   %rax
  0x00007f8ab91337af: mov    %r11,%rax
  0x00007f8ab91337b2: mov    0x50(%rbx),%r11
  0x00007f8ab91337b6: mov    0x8(%rax),%rsi
  0x00007f8ab91337ba: mov    %rbx,0x258(%r15)
  0x00007f8ab91337c1: mov    %rbx,%rax
  0x00007f8ab91337c4: jmpq   *%r11
  0x00007f8ab91337c7: mov    0x8(%rsi),%ebx
  0x00007f8ab91337ca: shl    $0x3,%rbx
  0x00007f8ab91337ce: cmp    0x10(%rax),%rbx
  0x00007f8ab91337d2: mov    0x8(%rax),%rbx
  0x00007f8ab91337d6: je     0x00007f8ab91337e1
  0x00007f8ab91337dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab91337e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91337e9: je     0x00007f8ab91338e4
  0x00007f8ab91337ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab91337f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91337fc: je     0x00007f8ab91338e4
  0x00007f8ab9133802: mov    %rsp,%r13
  0x00007f8ab9133805: mov    (%rsp),%rax
  0x00007f8ab9133809: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913380d: pushfq 
  0x00007f8ab913380e: sub    $0x8,%rsp
  0x00007f8ab9133812: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133817: sub    $0x80,%rsp
  0x00007f8ab913381e: mov    %rax,0x78(%rsp)
  0x00007f8ab9133823: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133828: mov    %rdx,0x68(%rsp)
  0x00007f8ab913382d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133832: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133837: mov    %rsi,0x48(%rsp)
  0x00007f8ab913383c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9133841: mov    %r8,0x38(%rsp)
  0x00007f8ab9133846: mov    %r9,0x30(%rsp)
  0x00007f8ab913384b: mov    %r10,0x28(%rsp)
  0x00007f8ab9133850: mov    %r11,0x20(%rsp)
  0x00007f8ab9133855: mov    %r12,0x18(%rsp)
  0x00007f8ab913385a: mov    %r13,0x10(%rsp)
  0x00007f8ab913385f: mov    %r14,0x8(%rsp)
  0x00007f8ab9133864: mov    %r15,(%rsp)
  0x00007f8ab9133868: sub    $0x200,%rsp
  0x00007f8ab913386f: fxsave64 (%rsp)
  0x00007f8ab9133874: mov    %rbx,%rdi
  0x00007f8ab9133877: mov    %rax,%rsi
  0x00007f8ab913387a: callq  0x00007f8acef8bbca
  0x00007f8ab913387f: fxrstor64 (%rsp)
  0x00007f8ab9133884: add    $0x200,%rsp
  0x00007f8ab913388b: mov    (%rsp),%r15
  0x00007f8ab913388f: mov    0x8(%rsp),%r14
  0x00007f8ab9133894: mov    0x10(%rsp),%r13
  0x00007f8ab9133899: mov    0x18(%rsp),%r12
  0x00007f8ab913389e: mov    0x20(%rsp),%r11
  0x00007f8ab91338a3: mov    0x28(%rsp),%r10
  0x00007f8ab91338a8: mov    0x30(%rsp),%r9
  0x00007f8ab91338ad: mov    0x38(%rsp),%r8
  0x00007f8ab91338b2: mov    0x40(%rsp),%rdi
  0x00007f8ab91338b7: mov    0x48(%rsp),%rsi
  0x00007f8ab91338bc: mov    0x50(%rsp),%rbp
  0x00007f8ab91338c1: mov    0x60(%rsp),%rbx
  0x00007f8ab91338c6: mov    0x68(%rsp),%rdx
  0x00007f8ab91338cb: mov    0x70(%rsp),%rcx
  0x00007f8ab91338d0: mov    0x78(%rsp),%rax
  0x00007f8ab91338d5: add    $0x80,%rsp
  0x00007f8ab91338dc: add    $0x8,%rsp
  0x00007f8ab91338e0: popfq  
  0x00007f8ab91338e1: mov    %r13,%rsp
  0x00007f8ab91338e4: pop    %rax
  0x00007f8ab91338e5: mov    %rsp,%r13
  0x00007f8ab91338e8: sub    $0x10,%rsp
  0x00007f8ab91338ec: mov    %rax,(%rsp)
  0x00007f8ab91338f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91338f5: mov    0x40(%rbx),%rcx
  0x00007f8ab91338f9: jmpq   *%rcx

AHE@0x00007f8ac80d84b8: 0xbbbbbbbbb0000000 i2c: 0x00007f8ab91339a0 c2i: 0x00007f8ab9133ae7 c2iUV: 0x00007f8ab9133aba
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package; (645 bytes generated)
c2i argument handler starts at 0x7f8ab9133ae7
  0x00007f8ab91339a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91339a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91339ae: cmp    %r11,%rax
  0x00007f8ab91339b1: jbe    0x00007f8ab91339ca
  0x00007f8ab91339b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91339c1: cmp    %r11,%rax
  0x00007f8ab91339c4: jb     0x00007f8ab9133a67
  0x00007f8ab91339ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91339d4: cmp    %r11,%rax
  0x00007f8ab91339d7: jbe    0x00007f8ab91339f0
  0x00007f8ab91339dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91339e7: cmp    %r11,%rax
  0x00007f8ab91339ea: jb     0x00007f8ab9133a67
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91339f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91339f5: sub    $0x80,%rsp
  0x00007f8ab91339fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9133a01: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133a06: mov    %rdx,0x68(%rsp)
  0x00007f8ab9133a0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133a10: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133a15: mov    %rsi,0x48(%rsp)
  0x00007f8ab9133a1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9133a1f: mov    %r8,0x38(%rsp)
  0x00007f8ab9133a24: mov    %r9,0x30(%rsp)
  0x00007f8ab9133a29: mov    %r10,0x28(%rsp)
  0x00007f8ab9133a2e: mov    %r11,0x20(%rsp)
  0x00007f8ab9133a33: mov    %r12,0x18(%rsp)
  0x00007f8ab9133a38: mov    %r13,0x10(%rsp)
  0x00007f8ab9133a3d: mov    %r14,0x8(%rsp)
  0x00007f8ab9133a42: mov    %r15,(%rsp)
  0x00007f8ab9133a46: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9133a50: movabs $0x7f8ab91339f0,%rsi
  0x00007f8ab9133a5a: mov    %rsp,%rdx
  0x00007f8ab9133a5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9133a61: callq  0x00007f8aceddb9fa
  0x00007f8ab9133a66: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9133a67: mov    %rsp,%r11
  0x00007f8ab9133a6a: sub    $0x20,%rsp
  0x00007f8ab9133a6e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9133a72: push   %rax
  0x00007f8ab9133a73: mov    %r11,%rax
  0x00007f8ab9133a76: mov    0x50(%rbx),%r11
  0x00007f8ab9133a7a: mov    0x48(%rax),%rsi
  0x00007f8ab9133a7e: mov    0x40(%rax),%rdx
  0x00007f8ab9133a82: mov    0x38(%rax),%rcx
  0x00007f8ab9133a86: mov    0x30(%rax),%r8
  0x00007f8ab9133a8a: mov    0x28(%rax),%r9
  0x00007f8ab9133a8e: mov    0x20(%rax),%rdi
  0x00007f8ab9133a92: mov    0x18(%rax),%r13
  0x00007f8ab9133a96: mov    %r13,0x8(%rsp)
  0x00007f8ab9133a9b: mov    0x10(%rax),%r13
  0x00007f8ab9133a9f: mov    %r13,0x10(%rsp)
  0x00007f8ab9133aa4: mov    0x8(%rax),%r13
  0x00007f8ab9133aa8: mov    %r13,0x18(%rsp)
  0x00007f8ab9133aad: mov    %rbx,0x258(%r15)
  0x00007f8ab9133ab4: mov    %rbx,%rax
  0x00007f8ab9133ab7: jmpq   *%r11
  0x00007f8ab9133aba: mov    0x8(%rsi),%ebx
  0x00007f8ab9133abd: shl    $0x3,%rbx
  0x00007f8ab9133ac1: cmp    0x10(%rax),%rbx
  0x00007f8ab9133ac5: mov    0x8(%rax),%rbx
  0x00007f8ab9133ac9: je     0x00007f8ab9133ad4
  0x00007f8ab9133acf: jmpq   0x00007f8ab9105c40
  0x00007f8ab9133ad4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9133adc: je     0x00007f8ab9133bd7
  0x00007f8ab9133ae2: jmpq   0x00007f8ab9105c40
  0x00007f8ab9133ae7: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9133aef: je     0x00007f8ab9133bd7
  0x00007f8ab9133af5: mov    %rsp,%r13
  0x00007f8ab9133af8: mov    (%rsp),%rax
  0x00007f8ab9133afc: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9133b00: pushfq 
  0x00007f8ab9133b01: sub    $0x8,%rsp
  0x00007f8ab9133b05: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133b0a: sub    $0x80,%rsp
  0x00007f8ab9133b11: mov    %rax,0x78(%rsp)
  0x00007f8ab9133b16: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133b1b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9133b20: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133b25: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133b2a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9133b2f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9133b34: mov    %r8,0x38(%rsp)
  0x00007f8ab9133b39: mov    %r9,0x30(%rsp)
  0x00007f8ab9133b3e: mov    %r10,0x28(%rsp)
  0x00007f8ab9133b43: mov    %r11,0x20(%rsp)
  0x00007f8ab9133b48: mov    %r12,0x18(%rsp)
  0x00007f8ab9133b4d: mov    %r13,0x10(%rsp)
  0x00007f8ab9133b52: mov    %r14,0x8(%rsp)
  0x00007f8ab9133b57: mov    %r15,(%rsp)
  0x00007f8ab9133b5b: sub    $0x200,%rsp
  0x00007f8ab9133b62: fxsave64 (%rsp)
  0x00007f8ab9133b67: mov    %rbx,%rdi
  0x00007f8ab9133b6a: mov    %rax,%rsi
  0x00007f8ab9133b6d: callq  0x00007f8acef8bbca
  0x00007f8ab9133b72: fxrstor64 (%rsp)
  0x00007f8ab9133b77: add    $0x200,%rsp
  0x00007f8ab9133b7e: mov    (%rsp),%r15
  0x00007f8ab9133b82: mov    0x8(%rsp),%r14
  0x00007f8ab9133b87: mov    0x10(%rsp),%r13
  0x00007f8ab9133b8c: mov    0x18(%rsp),%r12
  0x00007f8ab9133b91: mov    0x20(%rsp),%r11
  0x00007f8ab9133b96: mov    0x28(%rsp),%r10
  0x00007f8ab9133b9b: mov    0x30(%rsp),%r9
  0x00007f8ab9133ba0: mov    0x38(%rsp),%r8
  0x00007f8ab9133ba5: mov    0x40(%rsp),%rdi
  0x00007f8ab9133baa: mov    0x48(%rsp),%rsi
  0x00007f8ab9133baf: mov    0x50(%rsp),%rbp
  0x00007f8ab9133bb4: mov    0x60(%rsp),%rbx
  0x00007f8ab9133bb9: mov    0x68(%rsp),%rdx
  0x00007f8ab9133bbe: mov    0x70(%rsp),%rcx
  0x00007f8ab9133bc3: mov    0x78(%rsp),%rax
  0x00007f8ab9133bc8: add    $0x80,%rsp
  0x00007f8ab9133bcf: add    $0x8,%rsp
  0x00007f8ab9133bd3: popfq  
  0x00007f8ab9133bd4: mov    %r13,%rsp
  0x00007f8ab9133bd7: pop    %rax
  0x00007f8ab9133bd8: mov    %rsp,%r13
  0x00007f8ab9133bdb: sub    $0x50,%rsp
  0x00007f8ab9133bdf: mov    %rax,(%rsp)
  0x00007f8ab9133be3: mov    %rsi,0x48(%rsp)
  0x00007f8ab9133be8: mov    %rdx,0x40(%rsp)
  0x00007f8ab9133bed: mov    %rcx,0x38(%rsp)
  0x00007f8ab9133bf2: mov    %r8,0x30(%rsp)
  0x00007f8ab9133bf7: mov    %r9,0x28(%rsp)
  0x00007f8ab9133bfc: mov    %rdi,0x20(%rsp)
  0x00007f8ab9133c01: mov    0x50(%rsp),%rax
  0x00007f8ab9133c06: mov    %rax,0x18(%rsp)
  0x00007f8ab9133c0b: mov    0x58(%rsp),%rax
  0x00007f8ab9133c10: mov    %rax,0x10(%rsp)
  0x00007f8ab9133c15: mov    0x60(%rsp),%rax
  0x00007f8ab9133c1a: mov    %rax,0x8(%rsp)
  0x00007f8ab9133c1f: mov    0x40(%rbx),%rcx
  0x00007f8ab9133c23: jmpq   *%rcx

AHE@0x00007f8ac80d8500: 0xbb000000 i2c: 0x00007f8ab9133ce0 c2i: 0x00007f8ab9133df8 c2iUV: 0x00007f8ab9133dcb
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab9133df8
  0x00007f8ab9133ce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9133ce4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9133cee: cmp    %r11,%rax
  0x00007f8ab9133cf1: jbe    0x00007f8ab9133d0a
  0x00007f8ab9133cf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9133d01: cmp    %r11,%rax
  0x00007f8ab9133d04: jb     0x00007f8ab9133da7
  0x00007f8ab9133d0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9133d14: cmp    %r11,%rax
  0x00007f8ab9133d17: jbe    0x00007f8ab9133d30
  0x00007f8ab9133d1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9133d27: cmp    %r11,%rax
  0x00007f8ab9133d2a: jb     0x00007f8ab9133da7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9133d30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133d35: sub    $0x80,%rsp
  0x00007f8ab9133d3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9133d41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133d46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9133d4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133d50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133d55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9133d5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9133d5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9133d64: mov    %r9,0x30(%rsp)
  0x00007f8ab9133d69: mov    %r10,0x28(%rsp)
  0x00007f8ab9133d6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9133d73: mov    %r12,0x18(%rsp)
  0x00007f8ab9133d78: mov    %r13,0x10(%rsp)
  0x00007f8ab9133d7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9133d82: mov    %r15,(%rsp)
  0x00007f8ab9133d86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9133d90: movabs $0x7f8ab9133d30,%rsi
  0x00007f8ab9133d9a: mov    %rsp,%rdx
  0x00007f8ab9133d9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9133da1: callq  0x00007f8aceddb9fa
  0x00007f8ab9133da6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9133da7: mov    %rsp,%r11
  0x00007f8ab9133daa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9133dae: push   %rax
  0x00007f8ab9133daf: mov    %r11,%rax
  0x00007f8ab9133db2: mov    0x50(%rbx),%r11
  0x00007f8ab9133db6: mov    0x10(%rax),%rsi
  0x00007f8ab9133dba: mov    0x8(%rax),%rdx
  0x00007f8ab9133dbe: mov    %rbx,0x258(%r15)
  0x00007f8ab9133dc5: mov    %rbx,%rax
  0x00007f8ab9133dc8: jmpq   *%r11
  0x00007f8ab9133dcb: mov    0x8(%rsi),%ebx
  0x00007f8ab9133dce: shl    $0x3,%rbx
  0x00007f8ab9133dd2: cmp    0x10(%rax),%rbx
  0x00007f8ab9133dd6: mov    0x8(%rax),%rbx
  0x00007f8ab9133dda: je     0x00007f8ab9133de5
  0x00007f8ab9133de0: jmpq   0x00007f8ab9105c40
  0x00007f8ab9133de5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9133ded: je     0x00007f8ab9133ee8
  0x00007f8ab9133df3: jmpq   0x00007f8ab9105c40
  0x00007f8ab9133df8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9133e00: je     0x00007f8ab9133ee8
  0x00007f8ab9133e06: mov    %rsp,%r13
  0x00007f8ab9133e09: mov    (%rsp),%rax
  0x00007f8ab9133e0d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9133e11: pushfq 
  0x00007f8ab9133e12: sub    $0x8,%rsp
  0x00007f8ab9133e16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9133e1b: sub    $0x80,%rsp
  0x00007f8ab9133e22: mov    %rax,0x78(%rsp)
  0x00007f8ab9133e27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9133e2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9133e31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9133e36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9133e3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9133e40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9133e45: mov    %r8,0x38(%rsp)
  0x00007f8ab9133e4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9133e4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9133e54: mov    %r11,0x20(%rsp)
  0x00007f8ab9133e59: mov    %r12,0x18(%rsp)
  0x00007f8ab9133e5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9133e63: mov    %r14,0x8(%rsp)
  0x00007f8ab9133e68: mov    %r15,(%rsp)
  0x00007f8ab9133e6c: sub    $0x200,%rsp
  0x00007f8ab9133e73: fxsave64 (%rsp)
  0x00007f8ab9133e78: mov    %rbx,%rdi
  0x00007f8ab9133e7b: mov    %rax,%rsi
  0x00007f8ab9133e7e: callq  0x00007f8acef8bbca
  0x00007f8ab9133e83: fxrstor64 (%rsp)
  0x00007f8ab9133e88: add    $0x200,%rsp
  0x00007f8ab9133e8f: mov    (%rsp),%r15
  0x00007f8ab9133e93: mov    0x8(%rsp),%r14
  0x00007f8ab9133e98: mov    0x10(%rsp),%r13
  0x00007f8ab9133e9d: mov    0x18(%rsp),%r12
  0x00007f8ab9133ea2: mov    0x20(%rsp),%r11
  0x00007f8ab9133ea7: mov    0x28(%rsp),%r10
  0x00007f8ab9133eac: mov    0x30(%rsp),%r9
  0x00007f8ab9133eb1: mov    0x38(%rsp),%r8
  0x00007f8ab9133eb6: mov    0x40(%rsp),%rdi
  0x00007f8ab9133ebb: mov    0x48(%rsp),%rsi
  0x00007f8ab9133ec0: mov    0x50(%rsp),%rbp
  0x00007f8ab9133ec5: mov    0x60(%rsp),%rbx
  0x00007f8ab9133eca: mov    0x68(%rsp),%rdx
  0x00007f8ab9133ecf: mov    0x70(%rsp),%rcx
  0x00007f8ab9133ed4: mov    0x78(%rsp),%rax
  0x00007f8ab9133ed9: add    $0x80,%rsp
  0x00007f8ab9133ee0: add    $0x8,%rsp
  0x00007f8ab9133ee4: popfq  
  0x00007f8ab9133ee5: mov    %r13,%rsp
  0x00007f8ab9133ee8: pop    %rax
  0x00007f8ab9133ee9: mov    %rsp,%r13
  0x00007f8ab9133eec: sub    $0x20,%rsp
  0x00007f8ab9133ef0: mov    %rax,(%rsp)
  0x00007f8ab9133ef4: mov    %rsi,0x10(%rsp)
  0x00007f8ab9133ef9: mov    %rdx,0x8(%rsp)
  0x00007f8ab9133efe: mov    0x40(%rbx),%rcx
  0x00007f8ab9133f02: jmpq   *%rcx

AHE@0x00007f8ac80d8548: 0xbb000000 i2c: 0x00007f8ab9133fe0 c2i: 0x00007f8ab91340f8 c2iUV: 0x00007f8ab91340cb
i2c argument handler #0 for: receiver (Ljava/lang/ClassLoader;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab91340f8
  0x00007f8ab9133fe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9133fe4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9133fee: cmp    %r11,%rax
  0x00007f8ab9133ff1: jbe    0x00007f8ab913400a
  0x00007f8ab9133ff7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9134001: cmp    %r11,%rax
  0x00007f8ab9134004: jb     0x00007f8ab91340a7
  0x00007f8ab913400a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9134014: cmp    %r11,%rax
  0x00007f8ab9134017: jbe    0x00007f8ab9134030
  0x00007f8ab913401d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9134027: cmp    %r11,%rax
  0x00007f8ab913402a: jb     0x00007f8ab91340a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9134030: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134035: sub    $0x80,%rsp
  0x00007f8ab913403c: mov    %rax,0x78(%rsp)
  0x00007f8ab9134041: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134046: mov    %rdx,0x68(%rsp)
  0x00007f8ab913404b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134050: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134055: mov    %rsi,0x48(%rsp)
  0x00007f8ab913405a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913405f: mov    %r8,0x38(%rsp)
  0x00007f8ab9134064: mov    %r9,0x30(%rsp)
  0x00007f8ab9134069: mov    %r10,0x28(%rsp)
  0x00007f8ab913406e: mov    %r11,0x20(%rsp)
  0x00007f8ab9134073: mov    %r12,0x18(%rsp)
  0x00007f8ab9134078: mov    %r13,0x10(%rsp)
  0x00007f8ab913407d: mov    %r14,0x8(%rsp)
  0x00007f8ab9134082: mov    %r15,(%rsp)
  0x00007f8ab9134086: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9134090: movabs $0x7f8ab9134030,%rsi
  0x00007f8ab913409a: mov    %rsp,%rdx
  0x00007f8ab913409d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91340a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91340a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91340a7: mov    %rsp,%r11
  0x00007f8ab91340aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91340ae: push   %rax
  0x00007f8ab91340af: mov    %r11,%rax
  0x00007f8ab91340b2: mov    0x50(%rbx),%r11
  0x00007f8ab91340b6: mov    0x10(%rax),%rsi
  0x00007f8ab91340ba: mov    0x8(%rax),%rdx
  0x00007f8ab91340be: mov    %rbx,0x258(%r15)
  0x00007f8ab91340c5: mov    %rbx,%rax
  0x00007f8ab91340c8: jmpq   *%r11
  0x00007f8ab91340cb: mov    0x8(%rsi),%ebx
  0x00007f8ab91340ce: shl    $0x3,%rbx
  0x00007f8ab91340d2: cmp    0x10(%rax),%rbx
  0x00007f8ab91340d6: mov    0x8(%rax),%rbx
  0x00007f8ab91340da: je     0x00007f8ab91340e5
  0x00007f8ab91340e0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91340e5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91340ed: je     0x00007f8ab91341e8
  0x00007f8ab91340f3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91340f8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9134100: je     0x00007f8ab91341e8
  0x00007f8ab9134106: mov    %rsp,%r13
  0x00007f8ab9134109: mov    (%rsp),%rax
  0x00007f8ab913410d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134111: pushfq 
  0x00007f8ab9134112: sub    $0x8,%rsp
  0x00007f8ab9134116: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913411b: sub    $0x80,%rsp
  0x00007f8ab9134122: mov    %rax,0x78(%rsp)
  0x00007f8ab9134127: mov    %rcx,0x70(%rsp)
  0x00007f8ab913412c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9134131: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134136: mov    %rbp,0x50(%rsp)
  0x00007f8ab913413b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9134140: mov    %rdi,0x40(%rsp)
  0x00007f8ab9134145: mov    %r8,0x38(%rsp)
  0x00007f8ab913414a: mov    %r9,0x30(%rsp)
  0x00007f8ab913414f: mov    %r10,0x28(%rsp)
  0x00007f8ab9134154: mov    %r11,0x20(%rsp)
  0x00007f8ab9134159: mov    %r12,0x18(%rsp)
  0x00007f8ab913415e: mov    %r13,0x10(%rsp)
  0x00007f8ab9134163: mov    %r14,0x8(%rsp)
  0x00007f8ab9134168: mov    %r15,(%rsp)
  0x00007f8ab913416c: sub    $0x200,%rsp
  0x00007f8ab9134173: fxsave64 (%rsp)
  0x00007f8ab9134178: mov    %rbx,%rdi
  0x00007f8ab913417b: mov    %rax,%rsi
  0x00007f8ab913417e: callq  0x00007f8acef8bbca
  0x00007f8ab9134183: fxrstor64 (%rsp)
  0x00007f8ab9134188: add    $0x200,%rsp
  0x00007f8ab913418f: mov    (%rsp),%r15
  0x00007f8ab9134193: mov    0x8(%rsp),%r14
  0x00007f8ab9134198: mov    0x10(%rsp),%r13
  0x00007f8ab913419d: mov    0x18(%rsp),%r12
  0x00007f8ab91341a2: mov    0x20(%rsp),%r11
  0x00007f8ab91341a7: mov    0x28(%rsp),%r10
  0x00007f8ab91341ac: mov    0x30(%rsp),%r9
  0x00007f8ab91341b1: mov    0x38(%rsp),%r8
  0x00007f8ab91341b6: mov    0x40(%rsp),%rdi
  0x00007f8ab91341bb: mov    0x48(%rsp),%rsi
  0x00007f8ab91341c0: mov    0x50(%rsp),%rbp
  0x00007f8ab91341c5: mov    0x60(%rsp),%rbx
  0x00007f8ab91341ca: mov    0x68(%rsp),%rdx
  0x00007f8ab91341cf: mov    0x70(%rsp),%rcx
  0x00007f8ab91341d4: mov    0x78(%rsp),%rax
  0x00007f8ab91341d9: add    $0x80,%rsp
  0x00007f8ab91341e0: add    $0x8,%rsp
  0x00007f8ab91341e4: popfq  
  0x00007f8ab91341e5: mov    %r13,%rsp
  0x00007f8ab91341e8: pop    %rax
  0x00007f8ab91341e9: mov    %rsp,%r13
  0x00007f8ab91341ec: sub    $0x20,%rsp
  0x00007f8ab91341f0: mov    %rax,(%rsp)
  0x00007f8ab91341f4: mov    %rsi,0x10(%rsp)
  0x00007f8ab91341f9: mov    %rdx,0x8(%rsp)
  0x00007f8ab91341fe: mov    0x40(%rbx),%rcx
  0x00007f8ab9134202: jmpq   *%rcx

AHE@0x00007f8ac80d8590: 0x i2c: 0x00007f8ab91342e0 c2i: 0x00007f8ab91343f0 c2iUV: 0x00007f8ab91343c3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab91343f0
  0x00007f8ab91342e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91342e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91342ee: cmp    %r11,%rax
  0x00007f8ab91342f1: jbe    0x00007f8ab913430a
  0x00007f8ab91342f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9134301: cmp    %r11,%rax
  0x00007f8ab9134304: jb     0x00007f8ab91343a7
  0x00007f8ab913430a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9134314: cmp    %r11,%rax
  0x00007f8ab9134317: jbe    0x00007f8ab9134330
  0x00007f8ab913431d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9134327: cmp    %r11,%rax
  0x00007f8ab913432a: jb     0x00007f8ab91343a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9134330: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134335: sub    $0x80,%rsp
  0x00007f8ab913433c: mov    %rax,0x78(%rsp)
  0x00007f8ab9134341: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134346: mov    %rdx,0x68(%rsp)
  0x00007f8ab913434b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134350: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134355: mov    %rsi,0x48(%rsp)
  0x00007f8ab913435a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913435f: mov    %r8,0x38(%rsp)
  0x00007f8ab9134364: mov    %r9,0x30(%rsp)
  0x00007f8ab9134369: mov    %r10,0x28(%rsp)
  0x00007f8ab913436e: mov    %r11,0x20(%rsp)
  0x00007f8ab9134373: mov    %r12,0x18(%rsp)
  0x00007f8ab9134378: mov    %r13,0x10(%rsp)
  0x00007f8ab913437d: mov    %r14,0x8(%rsp)
  0x00007f8ab9134382: mov    %r15,(%rsp)
  0x00007f8ab9134386: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9134390: movabs $0x7f8ab9134330,%rsi
  0x00007f8ab913439a: mov    %rsp,%rdx
  0x00007f8ab913439d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91343a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91343a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91343a7: mov    %rsp,%r11
  0x00007f8ab91343aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91343ae: push   %rax
  0x00007f8ab91343af: mov    %r11,%rax
  0x00007f8ab91343b2: mov    0x50(%rbx),%r11
  0x00007f8ab91343b6: mov    %rbx,0x258(%r15)
  0x00007f8ab91343bd: mov    %rbx,%rax
  0x00007f8ab91343c0: jmpq   *%r11
  0x00007f8ab91343c3: mov    0x8(%rsi),%ebx
  0x00007f8ab91343c6: shl    $0x3,%rbx
  0x00007f8ab91343ca: cmp    0x10(%rax),%rbx
  0x00007f8ab91343ce: mov    0x8(%rax),%rbx
  0x00007f8ab91343d2: je     0x00007f8ab91343dd
  0x00007f8ab91343d8: jmpq   0x00007f8ab9105c40
  0x00007f8ab91343dd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91343e5: je     0x00007f8ab91344e0
  0x00007f8ab91343eb: jmpq   0x00007f8ab9105c40
  0x00007f8ab91343f0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91343f8: je     0x00007f8ab91344e0
  0x00007f8ab91343fe: mov    %rsp,%r13
  0x00007f8ab9134401: mov    (%rsp),%rax
  0x00007f8ab9134405: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134409: pushfq 
  0x00007f8ab913440a: sub    $0x8,%rsp
  0x00007f8ab913440e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134413: sub    $0x80,%rsp
  0x00007f8ab913441a: mov    %rax,0x78(%rsp)
  0x00007f8ab913441f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134424: mov    %rdx,0x68(%rsp)
  0x00007f8ab9134429: mov    %rbx,0x60(%rsp)
  0x00007f8ab913442e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134433: mov    %rsi,0x48(%rsp)
  0x00007f8ab9134438: mov    %rdi,0x40(%rsp)
  0x00007f8ab913443d: mov    %r8,0x38(%rsp)
  0x00007f8ab9134442: mov    %r9,0x30(%rsp)
  0x00007f8ab9134447: mov    %r10,0x28(%rsp)
  0x00007f8ab913444c: mov    %r11,0x20(%rsp)
  0x00007f8ab9134451: mov    %r12,0x18(%rsp)
  0x00007f8ab9134456: mov    %r13,0x10(%rsp)
  0x00007f8ab913445b: mov    %r14,0x8(%rsp)
  0x00007f8ab9134460: mov    %r15,(%rsp)
  0x00007f8ab9134464: sub    $0x200,%rsp
  0x00007f8ab913446b: fxsave64 (%rsp)
  0x00007f8ab9134470: mov    %rbx,%rdi
  0x00007f8ab9134473: mov    %rax,%rsi
  0x00007f8ab9134476: callq  0x00007f8acef8bbca
  0x00007f8ab913447b: fxrstor64 (%rsp)
  0x00007f8ab9134480: add    $0x200,%rsp
  0x00007f8ab9134487: mov    (%rsp),%r15
  0x00007f8ab913448b: mov    0x8(%rsp),%r14
  0x00007f8ab9134490: mov    0x10(%rsp),%r13
  0x00007f8ab9134495: mov    0x18(%rsp),%r12
  0x00007f8ab913449a: mov    0x20(%rsp),%r11
  0x00007f8ab913449f: mov    0x28(%rsp),%r10
  0x00007f8ab91344a4: mov    0x30(%rsp),%r9
  0x00007f8ab91344a9: mov    0x38(%rsp),%r8
  0x00007f8ab91344ae: mov    0x40(%rsp),%rdi
  0x00007f8ab91344b3: mov    0x48(%rsp),%rsi
  0x00007f8ab91344b8: mov    0x50(%rsp),%rbp
  0x00007f8ab91344bd: mov    0x60(%rsp),%rbx
  0x00007f8ab91344c2: mov    0x68(%rsp),%rdx
  0x00007f8ab91344c7: mov    0x70(%rsp),%rcx
  0x00007f8ab91344cc: mov    0x78(%rsp),%rax
  0x00007f8ab91344d1: add    $0x80,%rsp
  0x00007f8ab91344d8: add    $0x8,%rsp
  0x00007f8ab91344dc: popfq  
  0x00007f8ab91344dd: mov    %r13,%rsp
  0x00007f8ab91344e0: pop    %rax
  0x00007f8ab91344e1: mov    %rsp,%r13
  0x00007f8ab91344e4: sub    $0x10,%rsp
  0x00007f8ab91344e8: mov    %rax,(%rsp)
  0x00007f8ab91344ec: mov    0x40(%rbx),%rcx
  0x00007f8ab91344f0: jmpq   *%rcx

AHE@0x00007f8ac80d85d8: 0xb0000000 i2c: 0x00007f8ab91345a0 c2i: 0x00007f8ab91346b4 c2iUV: 0x00007f8ab9134687
i2c argument handler #0 for: receiver ()Ljava/lang/ClassLoader; (539 bytes generated)
c2i argument handler starts at 0x7f8ab91346b4
  0x00007f8ab91345a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91345a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91345ae: cmp    %r11,%rax
  0x00007f8ab91345b1: jbe    0x00007f8ab91345ca
  0x00007f8ab91345b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91345c1: cmp    %r11,%rax
  0x00007f8ab91345c4: jb     0x00007f8ab9134667
  0x00007f8ab91345ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91345d4: cmp    %r11,%rax
  0x00007f8ab91345d7: jbe    0x00007f8ab91345f0
  0x00007f8ab91345dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91345e7: cmp    %r11,%rax
  0x00007f8ab91345ea: jb     0x00007f8ab9134667
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91345f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91345f5: sub    $0x80,%rsp
  0x00007f8ab91345fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9134601: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134606: mov    %rdx,0x68(%rsp)
  0x00007f8ab913460b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134610: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134615: mov    %rsi,0x48(%rsp)
  0x00007f8ab913461a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913461f: mov    %r8,0x38(%rsp)
  0x00007f8ab9134624: mov    %r9,0x30(%rsp)
  0x00007f8ab9134629: mov    %r10,0x28(%rsp)
  0x00007f8ab913462e: mov    %r11,0x20(%rsp)
  0x00007f8ab9134633: mov    %r12,0x18(%rsp)
  0x00007f8ab9134638: mov    %r13,0x10(%rsp)
  0x00007f8ab913463d: mov    %r14,0x8(%rsp)
  0x00007f8ab9134642: mov    %r15,(%rsp)
  0x00007f8ab9134646: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9134650: movabs $0x7f8ab91345f0,%rsi
  0x00007f8ab913465a: mov    %rsp,%rdx
  0x00007f8ab913465d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134661: callq  0x00007f8aceddb9fa
  0x00007f8ab9134666: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9134667: mov    %rsp,%r11
  0x00007f8ab913466a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913466e: push   %rax
  0x00007f8ab913466f: mov    %r11,%rax
  0x00007f8ab9134672: mov    0x50(%rbx),%r11
  0x00007f8ab9134676: mov    0x8(%rax),%rsi
  0x00007f8ab913467a: mov    %rbx,0x258(%r15)
  0x00007f8ab9134681: mov    %rbx,%rax
  0x00007f8ab9134684: jmpq   *%r11
  0x00007f8ab9134687: mov    0x8(%rsi),%ebx
  0x00007f8ab913468a: shl    $0x3,%rbx
  0x00007f8ab913468e: cmp    0x10(%rax),%rbx
  0x00007f8ab9134692: mov    0x8(%rax),%rbx
  0x00007f8ab9134696: je     0x00007f8ab91346a1
  0x00007f8ab913469c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91346a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91346a9: je     0x00007f8ab91347a4
  0x00007f8ab91346af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91346b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91346bc: je     0x00007f8ab91347a4
  0x00007f8ab91346c2: mov    %rsp,%r13
  0x00007f8ab91346c5: mov    (%rsp),%rax
  0x00007f8ab91346c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91346cd: pushfq 
  0x00007f8ab91346ce: sub    $0x8,%rsp
  0x00007f8ab91346d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91346d7: sub    $0x80,%rsp
  0x00007f8ab91346de: mov    %rax,0x78(%rsp)
  0x00007f8ab91346e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91346e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91346ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91346f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91346f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91346fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9134701: mov    %r8,0x38(%rsp)
  0x00007f8ab9134706: mov    %r9,0x30(%rsp)
  0x00007f8ab913470b: mov    %r10,0x28(%rsp)
  0x00007f8ab9134710: mov    %r11,0x20(%rsp)
  0x00007f8ab9134715: mov    %r12,0x18(%rsp)
  0x00007f8ab913471a: mov    %r13,0x10(%rsp)
  0x00007f8ab913471f: mov    %r14,0x8(%rsp)
  0x00007f8ab9134724: mov    %r15,(%rsp)
  0x00007f8ab9134728: sub    $0x200,%rsp
  0x00007f8ab913472f: fxsave64 (%rsp)
  0x00007f8ab9134734: mov    %rbx,%rdi
  0x00007f8ab9134737: mov    %rax,%rsi
  0x00007f8ab913473a: callq  0x00007f8acef8bbca
  0x00007f8ab913473f: fxrstor64 (%rsp)
  0x00007f8ab9134744: add    $0x200,%rsp
  0x00007f8ab913474b: mov    (%rsp),%r15
  0x00007f8ab913474f: mov    0x8(%rsp),%r14
  0x00007f8ab9134754: mov    0x10(%rsp),%r13
  0x00007f8ab9134759: mov    0x18(%rsp),%r12
  0x00007f8ab913475e: mov    0x20(%rsp),%r11
  0x00007f8ab9134763: mov    0x28(%rsp),%r10
  0x00007f8ab9134768: mov    0x30(%rsp),%r9
  0x00007f8ab913476d: mov    0x38(%rsp),%r8
  0x00007f8ab9134772: mov    0x40(%rsp),%rdi
  0x00007f8ab9134777: mov    0x48(%rsp),%rsi
  0x00007f8ab913477c: mov    0x50(%rsp),%rbp
  0x00007f8ab9134781: mov    0x60(%rsp),%rbx
  0x00007f8ab9134786: mov    0x68(%rsp),%rdx
  0x00007f8ab913478b: mov    0x70(%rsp),%rcx
  0x00007f8ab9134790: mov    0x78(%rsp),%rax
  0x00007f8ab9134795: add    $0x80,%rsp
  0x00007f8ab913479c: add    $0x8,%rsp
  0x00007f8ab91347a0: popfq  
  0x00007f8ab91347a1: mov    %r13,%rsp
  0x00007f8ab91347a4: pop    %rax
  0x00007f8ab91347a5: mov    %rsp,%r13
  0x00007f8ab91347a8: sub    $0x10,%rsp
  0x00007f8ab91347ac: mov    %rax,(%rsp)
  0x00007f8ab91347b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91347b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91347b9: jmpq   *%rcx

AHE@0x00007f8ac80d8620: 0x i2c: 0x00007f8ab9134860 c2i: 0x00007f8ab9134970 c2iUV: 0x00007f8ab9134943
i2c argument handler #0 for: static ()Lsun/misc/URLClassPath; (530 bytes generated)
c2i argument handler starts at 0x7f8ab9134970
  0x00007f8ab9134860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9134864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913486e: cmp    %r11,%rax
  0x00007f8ab9134871: jbe    0x00007f8ab913488a
  0x00007f8ab9134877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9134881: cmp    %r11,%rax
  0x00007f8ab9134884: jb     0x00007f8ab9134927
  0x00007f8ab913488a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9134894: cmp    %r11,%rax
  0x00007f8ab9134897: jbe    0x00007f8ab91348b0
  0x00007f8ab913489d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91348a7: cmp    %r11,%rax
  0x00007f8ab91348aa: jb     0x00007f8ab9134927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91348b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91348b5: sub    $0x80,%rsp
  0x00007f8ab91348bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91348c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91348c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91348cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91348d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91348d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91348da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91348df: mov    %r8,0x38(%rsp)
  0x00007f8ab91348e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91348e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91348ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91348f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91348f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91348fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9134902: mov    %r15,(%rsp)
  0x00007f8ab9134906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9134910: movabs $0x7f8ab91348b0,%rsi
  0x00007f8ab913491a: mov    %rsp,%rdx
  0x00007f8ab913491d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134921: callq  0x00007f8aceddb9fa
  0x00007f8ab9134926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9134927: mov    %rsp,%r11
  0x00007f8ab913492a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913492e: push   %rax
  0x00007f8ab913492f: mov    %r11,%rax
  0x00007f8ab9134932: mov    0x50(%rbx),%r11
  0x00007f8ab9134936: mov    %rbx,0x258(%r15)
  0x00007f8ab913493d: mov    %rbx,%rax
  0x00007f8ab9134940: jmpq   *%r11
  0x00007f8ab9134943: mov    0x8(%rsi),%ebx
  0x00007f8ab9134946: shl    $0x3,%rbx
  0x00007f8ab913494a: cmp    0x10(%rax),%rbx
  0x00007f8ab913494e: mov    0x8(%rax),%rbx
  0x00007f8ab9134952: je     0x00007f8ab913495d
  0x00007f8ab9134958: jmpq   0x00007f8ab9105c40
  0x00007f8ab913495d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9134965: je     0x00007f8ab9134a60
  0x00007f8ab913496b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9134970: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9134978: je     0x00007f8ab9134a60
  0x00007f8ab913497e: mov    %rsp,%r13
  0x00007f8ab9134981: mov    (%rsp),%rax
  0x00007f8ab9134985: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134989: pushfq 
  0x00007f8ab913498a: sub    $0x8,%rsp
  0x00007f8ab913498e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134993: sub    $0x80,%rsp
  0x00007f8ab913499a: mov    %rax,0x78(%rsp)
  0x00007f8ab913499f: mov    %rcx,0x70(%rsp)
  0x00007f8ab91349a4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91349a9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91349ae: mov    %rbp,0x50(%rsp)
  0x00007f8ab91349b3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91349b8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91349bd: mov    %r8,0x38(%rsp)
  0x00007f8ab91349c2: mov    %r9,0x30(%rsp)
  0x00007f8ab91349c7: mov    %r10,0x28(%rsp)
  0x00007f8ab91349cc: mov    %r11,0x20(%rsp)
  0x00007f8ab91349d1: mov    %r12,0x18(%rsp)
  0x00007f8ab91349d6: mov    %r13,0x10(%rsp)
  0x00007f8ab91349db: mov    %r14,0x8(%rsp)
  0x00007f8ab91349e0: mov    %r15,(%rsp)
  0x00007f8ab91349e4: sub    $0x200,%rsp
  0x00007f8ab91349eb: fxsave64 (%rsp)
  0x00007f8ab91349f0: mov    %rbx,%rdi
  0x00007f8ab91349f3: mov    %rax,%rsi
  0x00007f8ab91349f6: callq  0x00007f8acef8bbca
  0x00007f8ab91349fb: fxrstor64 (%rsp)
  0x00007f8ab9134a00: add    $0x200,%rsp
  0x00007f8ab9134a07: mov    (%rsp),%r15
  0x00007f8ab9134a0b: mov    0x8(%rsp),%r14
  0x00007f8ab9134a10: mov    0x10(%rsp),%r13
  0x00007f8ab9134a15: mov    0x18(%rsp),%r12
  0x00007f8ab9134a1a: mov    0x20(%rsp),%r11
  0x00007f8ab9134a1f: mov    0x28(%rsp),%r10
  0x00007f8ab9134a24: mov    0x30(%rsp),%r9
  0x00007f8ab9134a29: mov    0x38(%rsp),%r8
  0x00007f8ab9134a2e: mov    0x40(%rsp),%rdi
  0x00007f8ab9134a33: mov    0x48(%rsp),%rsi
  0x00007f8ab9134a38: mov    0x50(%rsp),%rbp
  0x00007f8ab9134a3d: mov    0x60(%rsp),%rbx
  0x00007f8ab9134a42: mov    0x68(%rsp),%rdx
  0x00007f8ab9134a47: mov    0x70(%rsp),%rcx
  0x00007f8ab9134a4c: mov    0x78(%rsp),%rax
  0x00007f8ab9134a51: add    $0x80,%rsp
  0x00007f8ab9134a58: add    $0x8,%rsp
  0x00007f8ab9134a5c: popfq  
  0x00007f8ab9134a5d: mov    %r13,%rsp
  0x00007f8ab9134a60: pop    %rax
  0x00007f8ab9134a61: mov    %rsp,%r13
  0x00007f8ab9134a64: sub    $0x10,%rsp
  0x00007f8ab9134a68: mov    %rax,(%rsp)
  0x00007f8ab9134a6c: mov    0x40(%rbx),%rcx
  0x00007f8ab9134a70: jmpq   *%rcx

AHE@0x00007f8ac80d8668: 0xb0000000 i2c: 0x00007f8ab9134b20 c2i: 0x00007f8ab9134c34 c2iUV: 0x00007f8ab9134c07
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/util/Enumeration; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9134c34
  0x00007f8ab9134b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9134b24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9134b2e: cmp    %r11,%rax
  0x00007f8ab9134b31: jbe    0x00007f8ab9134b4a
  0x00007f8ab9134b37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9134b41: cmp    %r11,%rax
  0x00007f8ab9134b44: jb     0x00007f8ab9134be7
  0x00007f8ab9134b4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9134b54: cmp    %r11,%rax
  0x00007f8ab9134b57: jbe    0x00007f8ab9134b70
  0x00007f8ab9134b5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9134b67: cmp    %r11,%rax
  0x00007f8ab9134b6a: jb     0x00007f8ab9134be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9134b70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134b75: sub    $0x80,%rsp
  0x00007f8ab9134b7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9134b81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134b86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9134b8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134b90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134b95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9134b9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9134b9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9134ba4: mov    %r9,0x30(%rsp)
  0x00007f8ab9134ba9: mov    %r10,0x28(%rsp)
  0x00007f8ab9134bae: mov    %r11,0x20(%rsp)
  0x00007f8ab9134bb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9134bb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9134bbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9134bc2: mov    %r15,(%rsp)
  0x00007f8ab9134bc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9134bd0: movabs $0x7f8ab9134b70,%rsi
  0x00007f8ab9134bda: mov    %rsp,%rdx
  0x00007f8ab9134bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134be1: callq  0x00007f8aceddb9fa
  0x00007f8ab9134be6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9134be7: mov    %rsp,%r11
  0x00007f8ab9134bea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134bee: push   %rax
  0x00007f8ab9134bef: mov    %r11,%rax
  0x00007f8ab9134bf2: mov    0x50(%rbx),%r11
  0x00007f8ab9134bf6: mov    0x8(%rax),%rsi
  0x00007f8ab9134bfa: mov    %rbx,0x258(%r15)
  0x00007f8ab9134c01: mov    %rbx,%rax
  0x00007f8ab9134c04: jmpq   *%r11
  0x00007f8ab9134c07: mov    0x8(%rsi),%ebx
  0x00007f8ab9134c0a: shl    $0x3,%rbx
  0x00007f8ab9134c0e: cmp    0x10(%rax),%rbx
  0x00007f8ab9134c12: mov    0x8(%rax),%rbx
  0x00007f8ab9134c16: je     0x00007f8ab9134c21
  0x00007f8ab9134c1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9134c21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9134c29: je     0x00007f8ab9134d24
  0x00007f8ab9134c2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9134c34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9134c3c: je     0x00007f8ab9134d24
  0x00007f8ab9134c42: mov    %rsp,%r13
  0x00007f8ab9134c45: mov    (%rsp),%rax
  0x00007f8ab9134c49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134c4d: pushfq 
  0x00007f8ab9134c4e: sub    $0x8,%rsp
  0x00007f8ab9134c52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134c57: sub    $0x80,%rsp
  0x00007f8ab9134c5e: mov    %rax,0x78(%rsp)
  0x00007f8ab9134c63: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134c68: mov    %rdx,0x68(%rsp)
  0x00007f8ab9134c6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134c72: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134c77: mov    %rsi,0x48(%rsp)
  0x00007f8ab9134c7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9134c81: mov    %r8,0x38(%rsp)
  0x00007f8ab9134c86: mov    %r9,0x30(%rsp)
  0x00007f8ab9134c8b: mov    %r10,0x28(%rsp)
  0x00007f8ab9134c90: mov    %r11,0x20(%rsp)
  0x00007f8ab9134c95: mov    %r12,0x18(%rsp)
  0x00007f8ab9134c9a: mov    %r13,0x10(%rsp)
  0x00007f8ab9134c9f: mov    %r14,0x8(%rsp)
  0x00007f8ab9134ca4: mov    %r15,(%rsp)
  0x00007f8ab9134ca8: sub    $0x200,%rsp
  0x00007f8ab9134caf: fxsave64 (%rsp)
  0x00007f8ab9134cb4: mov    %rbx,%rdi
  0x00007f8ab9134cb7: mov    %rax,%rsi
  0x00007f8ab9134cba: callq  0x00007f8acef8bbca
  0x00007f8ab9134cbf: fxrstor64 (%rsp)
  0x00007f8ab9134cc4: add    $0x200,%rsp
  0x00007f8ab9134ccb: mov    (%rsp),%r15
  0x00007f8ab9134ccf: mov    0x8(%rsp),%r14
  0x00007f8ab9134cd4: mov    0x10(%rsp),%r13
  0x00007f8ab9134cd9: mov    0x18(%rsp),%r12
  0x00007f8ab9134cde: mov    0x20(%rsp),%r11
  0x00007f8ab9134ce3: mov    0x28(%rsp),%r10
  0x00007f8ab9134ce8: mov    0x30(%rsp),%r9
  0x00007f8ab9134ced: mov    0x38(%rsp),%r8
  0x00007f8ab9134cf2: mov    0x40(%rsp),%rdi
  0x00007f8ab9134cf7: mov    0x48(%rsp),%rsi
  0x00007f8ab9134cfc: mov    0x50(%rsp),%rbp
  0x00007f8ab9134d01: mov    0x60(%rsp),%rbx
  0x00007f8ab9134d06: mov    0x68(%rsp),%rdx
  0x00007f8ab9134d0b: mov    0x70(%rsp),%rcx
  0x00007f8ab9134d10: mov    0x78(%rsp),%rax
  0x00007f8ab9134d15: add    $0x80,%rsp
  0x00007f8ab9134d1c: add    $0x8,%rsp
  0x00007f8ab9134d20: popfq  
  0x00007f8ab9134d21: mov    %r13,%rsp
  0x00007f8ab9134d24: pop    %rax
  0x00007f8ab9134d25: mov    %rsp,%r13
  0x00007f8ab9134d28: sub    $0x10,%rsp
  0x00007f8ab9134d2c: mov    %rax,(%rsp)
  0x00007f8ab9134d30: mov    %rsi,0x8(%rsp)
  0x00007f8ab9134d35: mov    0x40(%rbx),%rcx
  0x00007f8ab9134d39: jmpq   *%rcx

AHE@0x00007f8ac80d86b0: 0xb0000000 i2c: 0x00007f8ab9134de0 c2i: 0x00007f8ab9134ef4 c2iUV: 0x00007f8ab9134ec7
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/net/URL; (539 bytes generated)
c2i argument handler starts at 0x7f8ab9134ef4
  0x00007f8ab9134de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9134de4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9134dee: cmp    %r11,%rax
  0x00007f8ab9134df1: jbe    0x00007f8ab9134e0a
  0x00007f8ab9134df7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9134e01: cmp    %r11,%rax
  0x00007f8ab9134e04: jb     0x00007f8ab9134ea7
  0x00007f8ab9134e0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9134e14: cmp    %r11,%rax
  0x00007f8ab9134e17: jbe    0x00007f8ab9134e30
  0x00007f8ab9134e1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9134e27: cmp    %r11,%rax
  0x00007f8ab9134e2a: jb     0x00007f8ab9134ea7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9134e30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134e35: sub    $0x80,%rsp
  0x00007f8ab9134e3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9134e41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134e46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9134e4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134e50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134e55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9134e5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9134e5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9134e64: mov    %r9,0x30(%rsp)
  0x00007f8ab9134e69: mov    %r10,0x28(%rsp)
  0x00007f8ab9134e6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9134e73: mov    %r12,0x18(%rsp)
  0x00007f8ab9134e78: mov    %r13,0x10(%rsp)
  0x00007f8ab9134e7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9134e82: mov    %r15,(%rsp)
  0x00007f8ab9134e86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9134e90: movabs $0x7f8ab9134e30,%rsi
  0x00007f8ab9134e9a: mov    %rsp,%rdx
  0x00007f8ab9134e9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134ea1: callq  0x00007f8aceddb9fa
  0x00007f8ab9134ea6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9134ea7: mov    %rsp,%r11
  0x00007f8ab9134eaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134eae: push   %rax
  0x00007f8ab9134eaf: mov    %r11,%rax
  0x00007f8ab9134eb2: mov    0x50(%rbx),%r11
  0x00007f8ab9134eb6: mov    0x8(%rax),%rsi
  0x00007f8ab9134eba: mov    %rbx,0x258(%r15)
  0x00007f8ab9134ec1: mov    %rbx,%rax
  0x00007f8ab9134ec4: jmpq   *%r11
  0x00007f8ab9134ec7: mov    0x8(%rsi),%ebx
  0x00007f8ab9134eca: shl    $0x3,%rbx
  0x00007f8ab9134ece: cmp    0x10(%rax),%rbx
  0x00007f8ab9134ed2: mov    0x8(%rax),%rbx
  0x00007f8ab9134ed6: je     0x00007f8ab9134ee1
  0x00007f8ab9134edc: jmpq   0x00007f8ab9105c40
  0x00007f8ab9134ee1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9134ee9: je     0x00007f8ab9134fe4
  0x00007f8ab9134eef: jmpq   0x00007f8ab9105c40
  0x00007f8ab9134ef4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9134efc: je     0x00007f8ab9134fe4
  0x00007f8ab9134f02: mov    %rsp,%r13
  0x00007f8ab9134f05: mov    (%rsp),%rax
  0x00007f8ab9134f09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9134f0d: pushfq 
  0x00007f8ab9134f0e: sub    $0x8,%rsp
  0x00007f8ab9134f12: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9134f17: sub    $0x80,%rsp
  0x00007f8ab9134f1e: mov    %rax,0x78(%rsp)
  0x00007f8ab9134f23: mov    %rcx,0x70(%rsp)
  0x00007f8ab9134f28: mov    %rdx,0x68(%rsp)
  0x00007f8ab9134f2d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9134f32: mov    %rbp,0x50(%rsp)
  0x00007f8ab9134f37: mov    %rsi,0x48(%rsp)
  0x00007f8ab9134f3c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9134f41: mov    %r8,0x38(%rsp)
  0x00007f8ab9134f46: mov    %r9,0x30(%rsp)
  0x00007f8ab9134f4b: mov    %r10,0x28(%rsp)
  0x00007f8ab9134f50: mov    %r11,0x20(%rsp)
  0x00007f8ab9134f55: mov    %r12,0x18(%rsp)
  0x00007f8ab9134f5a: mov    %r13,0x10(%rsp)
  0x00007f8ab9134f5f: mov    %r14,0x8(%rsp)
  0x00007f8ab9134f64: mov    %r15,(%rsp)
  0x00007f8ab9134f68: sub    $0x200,%rsp
  0x00007f8ab9134f6f: fxsave64 (%rsp)
  0x00007f8ab9134f74: mov    %rbx,%rdi
  0x00007f8ab9134f77: mov    %rax,%rsi
  0x00007f8ab9134f7a: callq  0x00007f8acef8bbca
  0x00007f8ab9134f7f: fxrstor64 (%rsp)
  0x00007f8ab9134f84: add    $0x200,%rsp
  0x00007f8ab9134f8b: mov    (%rsp),%r15
  0x00007f8ab9134f8f: mov    0x8(%rsp),%r14
  0x00007f8ab9134f94: mov    0x10(%rsp),%r13
  0x00007f8ab9134f99: mov    0x18(%rsp),%r12
  0x00007f8ab9134f9e: mov    0x20(%rsp),%r11
  0x00007f8ab9134fa3: mov    0x28(%rsp),%r10
  0x00007f8ab9134fa8: mov    0x30(%rsp),%r9
  0x00007f8ab9134fad: mov    0x38(%rsp),%r8
  0x00007f8ab9134fb2: mov    0x40(%rsp),%rdi
  0x00007f8ab9134fb7: mov    0x48(%rsp),%rsi
  0x00007f8ab9134fbc: mov    0x50(%rsp),%rbp
  0x00007f8ab9134fc1: mov    0x60(%rsp),%rbx
  0x00007f8ab9134fc6: mov    0x68(%rsp),%rdx
  0x00007f8ab9134fcb: mov    0x70(%rsp),%rcx
  0x00007f8ab9134fd0: mov    0x78(%rsp),%rax
  0x00007f8ab9134fd5: add    $0x80,%rsp
  0x00007f8ab9134fdc: add    $0x8,%rsp
  0x00007f8ab9134fe0: popfq  
  0x00007f8ab9134fe1: mov    %r13,%rsp
  0x00007f8ab9134fe4: pop    %rax
  0x00007f8ab9134fe5: mov    %rsp,%r13
  0x00007f8ab9134fe8: sub    $0x10,%rsp
  0x00007f8ab9134fec: mov    %rax,(%rsp)
  0x00007f8ab9134ff0: mov    %rsi,0x8(%rsp)
  0x00007f8ab9134ff5: mov    0x40(%rbx),%rcx
  0x00007f8ab9134ff9: jmpq   *%rcx

AHE@0x00007f8ac80d86f8: 0xb0000000 i2c: 0x00007f8ab91350a0 c2i: 0x00007f8ab91351b4 c2iUV: 0x00007f8ab9135187
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/util/Enumeration; (539 bytes generated)
c2i argument handler starts at 0x7f8ab91351b4
  0x00007f8ab91350a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91350a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91350ae: cmp    %r11,%rax
  0x00007f8ab91350b1: jbe    0x00007f8ab91350ca
  0x00007f8ab91350b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91350c1: cmp    %r11,%rax
  0x00007f8ab91350c4: jb     0x00007f8ab9135167
  0x00007f8ab91350ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91350d4: cmp    %r11,%rax
  0x00007f8ab91350d7: jbe    0x00007f8ab91350f0
  0x00007f8ab91350dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91350e7: cmp    %r11,%rax
  0x00007f8ab91350ea: jb     0x00007f8ab9135167
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91350f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91350f5: sub    $0x80,%rsp
  0x00007f8ab91350fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9135101: mov    %rcx,0x70(%rsp)
  0x00007f8ab9135106: mov    %rdx,0x68(%rsp)
  0x00007f8ab913510b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135110: mov    %rbp,0x50(%rsp)
  0x00007f8ab9135115: mov    %rsi,0x48(%rsp)
  0x00007f8ab913511a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913511f: mov    %r8,0x38(%rsp)
  0x00007f8ab9135124: mov    %r9,0x30(%rsp)
  0x00007f8ab9135129: mov    %r10,0x28(%rsp)
  0x00007f8ab913512e: mov    %r11,0x20(%rsp)
  0x00007f8ab9135133: mov    %r12,0x18(%rsp)
  0x00007f8ab9135138: mov    %r13,0x10(%rsp)
  0x00007f8ab913513d: mov    %r14,0x8(%rsp)
  0x00007f8ab9135142: mov    %r15,(%rsp)
  0x00007f8ab9135146: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9135150: movabs $0x7f8ab91350f0,%rsi
  0x00007f8ab913515a: mov    %rsp,%rdx
  0x00007f8ab913515d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135161: callq  0x00007f8aceddb9fa
  0x00007f8ab9135166: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9135167: mov    %rsp,%r11
  0x00007f8ab913516a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913516e: push   %rax
  0x00007f8ab913516f: mov    %r11,%rax
  0x00007f8ab9135172: mov    0x50(%rbx),%r11
  0x00007f8ab9135176: mov    0x8(%rax),%rsi
  0x00007f8ab913517a: mov    %rbx,0x258(%r15)
  0x00007f8ab9135181: mov    %rbx,%rax
  0x00007f8ab9135184: jmpq   *%r11
  0x00007f8ab9135187: mov    0x8(%rsi),%ebx
  0x00007f8ab913518a: shl    $0x3,%rbx
  0x00007f8ab913518e: cmp    0x10(%rax),%rbx
  0x00007f8ab9135192: mov    0x8(%rax),%rbx
  0x00007f8ab9135196: je     0x00007f8ab91351a1
  0x00007f8ab913519c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91351a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91351a9: je     0x00007f8ab91352a4
  0x00007f8ab91351af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91351b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91351bc: je     0x00007f8ab91352a4
  0x00007f8ab91351c2: mov    %rsp,%r13
  0x00007f8ab91351c5: mov    (%rsp),%rax
  0x00007f8ab91351c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91351cd: pushfq 
  0x00007f8ab91351ce: sub    $0x8,%rsp
  0x00007f8ab91351d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91351d7: sub    $0x80,%rsp
  0x00007f8ab91351de: mov    %rax,0x78(%rsp)
  0x00007f8ab91351e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91351e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91351ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91351f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91351f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91351fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9135201: mov    %r8,0x38(%rsp)
  0x00007f8ab9135206: mov    %r9,0x30(%rsp)
  0x00007f8ab913520b: mov    %r10,0x28(%rsp)
  0x00007f8ab9135210: mov    %r11,0x20(%rsp)
  0x00007f8ab9135215: mov    %r12,0x18(%rsp)
  0x00007f8ab913521a: mov    %r13,0x10(%rsp)
  0x00007f8ab913521f: mov    %r14,0x8(%rsp)
  0x00007f8ab9135224: mov    %r15,(%rsp)
  0x00007f8ab9135228: sub    $0x200,%rsp
  0x00007f8ab913522f: fxsave64 (%rsp)
  0x00007f8ab9135234: mov    %rbx,%rdi
  0x00007f8ab9135237: mov    %rax,%rsi
  0x00007f8ab913523a: callq  0x00007f8acef8bbca
  0x00007f8ab913523f: fxrstor64 (%rsp)
  0x00007f8ab9135244: add    $0x200,%rsp
  0x00007f8ab913524b: mov    (%rsp),%r15
  0x00007f8ab913524f: mov    0x8(%rsp),%r14
  0x00007f8ab9135254: mov    0x10(%rsp),%r13
  0x00007f8ab9135259: mov    0x18(%rsp),%r12
  0x00007f8ab913525e: mov    0x20(%rsp),%r11
  0x00007f8ab9135263: mov    0x28(%rsp),%r10
  0x00007f8ab9135268: mov    0x30(%rsp),%r9
  0x00007f8ab913526d: mov    0x38(%rsp),%r8
  0x00007f8ab9135272: mov    0x40(%rsp),%rdi
  0x00007f8ab9135277: mov    0x48(%rsp),%rsi
  0x00007f8ab913527c: mov    0x50(%rsp),%rbp
  0x00007f8ab9135281: mov    0x60(%rsp),%rbx
  0x00007f8ab9135286: mov    0x68(%rsp),%rdx
  0x00007f8ab913528b: mov    0x70(%rsp),%rcx
  0x00007f8ab9135290: mov    0x78(%rsp),%rax
  0x00007f8ab9135295: add    $0x80,%rsp
  0x00007f8ab913529c: add    $0x8,%rsp
  0x00007f8ab91352a0: popfq  
  0x00007f8ab91352a1: mov    %r13,%rsp
  0x00007f8ab91352a4: pop    %rax
  0x00007f8ab91352a5: mov    %rsp,%r13
  0x00007f8ab91352a8: sub    $0x10,%rsp
  0x00007f8ab91352ac: mov    %rax,(%rsp)
  0x00007f8ab91352b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91352b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91352b9: jmpq   *%rcx

AHE@0x00007f8ac80d8740: 0x i2c: 0x00007f8ab9135360 c2i: 0x00007f8ab9135470 c2iUV: 0x00007f8ab9135443
i2c argument handler #0 for: static ()Z (530 bytes generated)
c2i argument handler starts at 0x7f8ab9135470
  0x00007f8ab9135360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9135364: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913536e: cmp    %r11,%rax
  0x00007f8ab9135371: jbe    0x00007f8ab913538a
  0x00007f8ab9135377: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9135381: cmp    %r11,%rax
  0x00007f8ab9135384: jb     0x00007f8ab9135427
  0x00007f8ab913538a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9135394: cmp    %r11,%rax
  0x00007f8ab9135397: jbe    0x00007f8ab91353b0
  0x00007f8ab913539d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91353a7: cmp    %r11,%rax
  0x00007f8ab91353aa: jb     0x00007f8ab9135427
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91353b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91353b5: sub    $0x80,%rsp
  0x00007f8ab91353bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91353c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91353c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91353cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91353d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91353d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91353da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91353df: mov    %r8,0x38(%rsp)
  0x00007f8ab91353e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91353e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91353ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91353f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91353f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91353fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9135402: mov    %r15,(%rsp)
  0x00007f8ab9135406: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9135410: movabs $0x7f8ab91353b0,%rsi
  0x00007f8ab913541a: mov    %rsp,%rdx
  0x00007f8ab913541d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135421: callq  0x00007f8aceddb9fa
  0x00007f8ab9135426: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9135427: mov    %rsp,%r11
  0x00007f8ab913542a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913542e: push   %rax
  0x00007f8ab913542f: mov    %r11,%rax
  0x00007f8ab9135432: mov    0x50(%rbx),%r11
  0x00007f8ab9135436: mov    %rbx,0x258(%r15)
  0x00007f8ab913543d: mov    %rbx,%rax
  0x00007f8ab9135440: jmpq   *%r11
  0x00007f8ab9135443: mov    0x8(%rsi),%ebx
  0x00007f8ab9135446: shl    $0x3,%rbx
  0x00007f8ab913544a: cmp    0x10(%rax),%rbx
  0x00007f8ab913544e: mov    0x8(%rax),%rbx
  0x00007f8ab9135452: je     0x00007f8ab913545d
  0x00007f8ab9135458: jmpq   0x00007f8ab9105c40
  0x00007f8ab913545d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9135465: je     0x00007f8ab9135560
  0x00007f8ab913546b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9135470: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9135478: je     0x00007f8ab9135560
  0x00007f8ab913547e: mov    %rsp,%r13
  0x00007f8ab9135481: mov    (%rsp),%rax
  0x00007f8ab9135485: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135489: pushfq 
  0x00007f8ab913548a: sub    $0x8,%rsp
  0x00007f8ab913548e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9135493: sub    $0x80,%rsp
  0x00007f8ab913549a: mov    %rax,0x78(%rsp)
  0x00007f8ab913549f: mov    %rcx,0x70(%rsp)
  0x00007f8ab91354a4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91354a9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91354ae: mov    %rbp,0x50(%rsp)
  0x00007f8ab91354b3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91354b8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91354bd: mov    %r8,0x38(%rsp)
  0x00007f8ab91354c2: mov    %r9,0x30(%rsp)
  0x00007f8ab91354c7: mov    %r10,0x28(%rsp)
  0x00007f8ab91354cc: mov    %r11,0x20(%rsp)
  0x00007f8ab91354d1: mov    %r12,0x18(%rsp)
  0x00007f8ab91354d6: mov    %r13,0x10(%rsp)
  0x00007f8ab91354db: mov    %r14,0x8(%rsp)
  0x00007f8ab91354e0: mov    %r15,(%rsp)
  0x00007f8ab91354e4: sub    $0x200,%rsp
  0x00007f8ab91354eb: fxsave64 (%rsp)
  0x00007f8ab91354f0: mov    %rbx,%rdi
  0x00007f8ab91354f3: mov    %rax,%rsi
  0x00007f8ab91354f6: callq  0x00007f8acef8bbca
  0x00007f8ab91354fb: fxrstor64 (%rsp)
  0x00007f8ab9135500: add    $0x200,%rsp
  0x00007f8ab9135507: mov    (%rsp),%r15
  0x00007f8ab913550b: mov    0x8(%rsp),%r14
  0x00007f8ab9135510: mov    0x10(%rsp),%r13
  0x00007f8ab9135515: mov    0x18(%rsp),%r12
  0x00007f8ab913551a: mov    0x20(%rsp),%r11
  0x00007f8ab913551f: mov    0x28(%rsp),%r10
  0x00007f8ab9135524: mov    0x30(%rsp),%r9
  0x00007f8ab9135529: mov    0x38(%rsp),%r8
  0x00007f8ab913552e: mov    0x40(%rsp),%rdi
  0x00007f8ab9135533: mov    0x48(%rsp),%rsi
  0x00007f8ab9135538: mov    0x50(%rsp),%rbp
  0x00007f8ab913553d: mov    0x60(%rsp),%rbx
  0x00007f8ab9135542: mov    0x68(%rsp),%rdx
  0x00007f8ab9135547: mov    0x70(%rsp),%rcx
  0x00007f8ab913554c: mov    0x78(%rsp),%rax
  0x00007f8ab9135551: add    $0x80,%rsp
  0x00007f8ab9135558: add    $0x8,%rsp
  0x00007f8ab913555c: popfq  
  0x00007f8ab913555d: mov    %r13,%rsp
  0x00007f8ab9135560: pop    %rax
  0x00007f8ab9135561: mov    %rsp,%r13
  0x00007f8ab9135564: sub    $0x10,%rsp
  0x00007f8ab9135568: mov    %rax,(%rsp)
  0x00007f8ab913556c: mov    0x40(%rbx),%rcx
  0x00007f8ab9135570: jmpq   *%rcx

AHE@0x00007f8ac80d8788: 0xbb000000 i2c: 0x00007f8ab9135620 c2i: 0x00007f8ab9135738 c2iUV: 0x00007f8ab913570b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/util/Enumeration; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9135738
  0x00007f8ab9135620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9135624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913562e: cmp    %r11,%rax
  0x00007f8ab9135631: jbe    0x00007f8ab913564a
  0x00007f8ab9135637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9135641: cmp    %r11,%rax
  0x00007f8ab9135644: jb     0x00007f8ab91356e7
  0x00007f8ab913564a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9135654: cmp    %r11,%rax
  0x00007f8ab9135657: jbe    0x00007f8ab9135670
  0x00007f8ab913565d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9135667: cmp    %r11,%rax
  0x00007f8ab913566a: jb     0x00007f8ab91356e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9135670: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9135675: sub    $0x80,%rsp
  0x00007f8ab913567c: mov    %rax,0x78(%rsp)
  0x00007f8ab9135681: mov    %rcx,0x70(%rsp)
  0x00007f8ab9135686: mov    %rdx,0x68(%rsp)
  0x00007f8ab913568b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135690: mov    %rbp,0x50(%rsp)
  0x00007f8ab9135695: mov    %rsi,0x48(%rsp)
  0x00007f8ab913569a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913569f: mov    %r8,0x38(%rsp)
  0x00007f8ab91356a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91356a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91356ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91356b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91356b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91356bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91356c2: mov    %r15,(%rsp)
  0x00007f8ab91356c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91356d0: movabs $0x7f8ab9135670,%rsi
  0x00007f8ab91356da: mov    %rsp,%rdx
  0x00007f8ab91356dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91356e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91356e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91356e7: mov    %rsp,%r11
  0x00007f8ab91356ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91356ee: push   %rax
  0x00007f8ab91356ef: mov    %r11,%rax
  0x00007f8ab91356f2: mov    0x50(%rbx),%r11
  0x00007f8ab91356f6: mov    0x10(%rax),%rsi
  0x00007f8ab91356fa: mov    0x8(%rax),%rdx
  0x00007f8ab91356fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9135705: mov    %rbx,%rax
  0x00007f8ab9135708: jmpq   *%r11
  0x00007f8ab913570b: mov    0x8(%rsi),%ebx
  0x00007f8ab913570e: shl    $0x3,%rbx
  0x00007f8ab9135712: cmp    0x10(%rax),%rbx
  0x00007f8ab9135716: mov    0x8(%rax),%rbx
  0x00007f8ab913571a: je     0x00007f8ab9135725
  0x00007f8ab9135720: jmpq   0x00007f8ab9105c40
  0x00007f8ab9135725: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913572d: je     0x00007f8ab9135828
  0x00007f8ab9135733: jmpq   0x00007f8ab9105c40
  0x00007f8ab9135738: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9135740: je     0x00007f8ab9135828
  0x00007f8ab9135746: mov    %rsp,%r13
  0x00007f8ab9135749: mov    (%rsp),%rax
  0x00007f8ab913574d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135751: pushfq 
  0x00007f8ab9135752: sub    $0x8,%rsp
  0x00007f8ab9135756: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913575b: sub    $0x80,%rsp
  0x00007f8ab9135762: mov    %rax,0x78(%rsp)
  0x00007f8ab9135767: mov    %rcx,0x70(%rsp)
  0x00007f8ab913576c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9135771: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135776: mov    %rbp,0x50(%rsp)
  0x00007f8ab913577b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9135780: mov    %rdi,0x40(%rsp)
  0x00007f8ab9135785: mov    %r8,0x38(%rsp)
  0x00007f8ab913578a: mov    %r9,0x30(%rsp)
  0x00007f8ab913578f: mov    %r10,0x28(%rsp)
  0x00007f8ab9135794: mov    %r11,0x20(%rsp)
  0x00007f8ab9135799: mov    %r12,0x18(%rsp)
  0x00007f8ab913579e: mov    %r13,0x10(%rsp)
  0x00007f8ab91357a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91357a8: mov    %r15,(%rsp)
  0x00007f8ab91357ac: sub    $0x200,%rsp
  0x00007f8ab91357b3: fxsave64 (%rsp)
  0x00007f8ab91357b8: mov    %rbx,%rdi
  0x00007f8ab91357bb: mov    %rax,%rsi
  0x00007f8ab91357be: callq  0x00007f8acef8bbca
  0x00007f8ab91357c3: fxrstor64 (%rsp)
  0x00007f8ab91357c8: add    $0x200,%rsp
  0x00007f8ab91357cf: mov    (%rsp),%r15
  0x00007f8ab91357d3: mov    0x8(%rsp),%r14
  0x00007f8ab91357d8: mov    0x10(%rsp),%r13
  0x00007f8ab91357dd: mov    0x18(%rsp),%r12
  0x00007f8ab91357e2: mov    0x20(%rsp),%r11
  0x00007f8ab91357e7: mov    0x28(%rsp),%r10
  0x00007f8ab91357ec: mov    0x30(%rsp),%r9
  0x00007f8ab91357f1: mov    0x38(%rsp),%r8
  0x00007f8ab91357f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91357fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9135800: mov    0x50(%rsp),%rbp
  0x00007f8ab9135805: mov    0x60(%rsp),%rbx
  0x00007f8ab913580a: mov    0x68(%rsp),%rdx
  0x00007f8ab913580f: mov    0x70(%rsp),%rcx
  0x00007f8ab9135814: mov    0x78(%rsp),%rax
  0x00007f8ab9135819: add    $0x80,%rsp
  0x00007f8ab9135820: add    $0x8,%rsp
  0x00007f8ab9135824: popfq  
  0x00007f8ab9135825: mov    %r13,%rsp
  0x00007f8ab9135828: pop    %rax
  0x00007f8ab9135829: mov    %rsp,%r13
  0x00007f8ab913582c: sub    $0x20,%rsp
  0x00007f8ab9135830: mov    %rax,(%rsp)
  0x00007f8ab9135834: mov    %rsi,0x10(%rsp)
  0x00007f8ab9135839: mov    %rdx,0x8(%rsp)
  0x00007f8ab913583e: mov    0x40(%rbx),%rcx
  0x00007f8ab9135842: jmpq   *%rcx

AHE@0x00007f8ac80d87d0: 0xbb000000 i2c: 0x00007f8ab9135920 c2i: 0x00007f8ab9135a38 c2iUV: 0x00007f8ab9135a0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/net/URL; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9135a38
  0x00007f8ab9135920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9135924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913592e: cmp    %r11,%rax
  0x00007f8ab9135931: jbe    0x00007f8ab913594a
  0x00007f8ab9135937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9135941: cmp    %r11,%rax
  0x00007f8ab9135944: jb     0x00007f8ab91359e7
  0x00007f8ab913594a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9135954: cmp    %r11,%rax
  0x00007f8ab9135957: jbe    0x00007f8ab9135970
  0x00007f8ab913595d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9135967: cmp    %r11,%rax
  0x00007f8ab913596a: jb     0x00007f8ab91359e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9135970: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9135975: sub    $0x80,%rsp
  0x00007f8ab913597c: mov    %rax,0x78(%rsp)
  0x00007f8ab9135981: mov    %rcx,0x70(%rsp)
  0x00007f8ab9135986: mov    %rdx,0x68(%rsp)
  0x00007f8ab913598b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135990: mov    %rbp,0x50(%rsp)
  0x00007f8ab9135995: mov    %rsi,0x48(%rsp)
  0x00007f8ab913599a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913599f: mov    %r8,0x38(%rsp)
  0x00007f8ab91359a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91359a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91359ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91359b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91359b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91359bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91359c2: mov    %r15,(%rsp)
  0x00007f8ab91359c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91359d0: movabs $0x7f8ab9135970,%rsi
  0x00007f8ab91359da: mov    %rsp,%rdx
  0x00007f8ab91359dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91359e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91359e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91359e7: mov    %rsp,%r11
  0x00007f8ab91359ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91359ee: push   %rax
  0x00007f8ab91359ef: mov    %r11,%rax
  0x00007f8ab91359f2: mov    0x50(%rbx),%r11
  0x00007f8ab91359f6: mov    0x10(%rax),%rsi
  0x00007f8ab91359fa: mov    0x8(%rax),%rdx
  0x00007f8ab91359fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9135a05: mov    %rbx,%rax
  0x00007f8ab9135a08: jmpq   *%r11
  0x00007f8ab9135a0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9135a0e: shl    $0x3,%rbx
  0x00007f8ab9135a12: cmp    0x10(%rax),%rbx
  0x00007f8ab9135a16: mov    0x8(%rax),%rbx
  0x00007f8ab9135a1a: je     0x00007f8ab9135a25
  0x00007f8ab9135a20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9135a25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9135a2d: je     0x00007f8ab9135b28
  0x00007f8ab9135a33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9135a38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9135a40: je     0x00007f8ab9135b28
  0x00007f8ab9135a46: mov    %rsp,%r13
  0x00007f8ab9135a49: mov    (%rsp),%rax
  0x00007f8ab9135a4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135a51: pushfq 
  0x00007f8ab9135a52: sub    $0x8,%rsp
  0x00007f8ab9135a56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9135a5b: sub    $0x80,%rsp
  0x00007f8ab9135a62: mov    %rax,0x78(%rsp)
  0x00007f8ab9135a67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9135a6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9135a71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135a76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9135a7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9135a80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9135a85: mov    %r8,0x38(%rsp)
  0x00007f8ab9135a8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9135a8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9135a94: mov    %r11,0x20(%rsp)
  0x00007f8ab9135a99: mov    %r12,0x18(%rsp)
  0x00007f8ab9135a9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9135aa3: mov    %r14,0x8(%rsp)
  0x00007f8ab9135aa8: mov    %r15,(%rsp)
  0x00007f8ab9135aac: sub    $0x200,%rsp
  0x00007f8ab9135ab3: fxsave64 (%rsp)
  0x00007f8ab9135ab8: mov    %rbx,%rdi
  0x00007f8ab9135abb: mov    %rax,%rsi
  0x00007f8ab9135abe: callq  0x00007f8acef8bbca
  0x00007f8ab9135ac3: fxrstor64 (%rsp)
  0x00007f8ab9135ac8: add    $0x200,%rsp
  0x00007f8ab9135acf: mov    (%rsp),%r15
  0x00007f8ab9135ad3: mov    0x8(%rsp),%r14
  0x00007f8ab9135ad8: mov    0x10(%rsp),%r13
  0x00007f8ab9135add: mov    0x18(%rsp),%r12
  0x00007f8ab9135ae2: mov    0x20(%rsp),%r11
  0x00007f8ab9135ae7: mov    0x28(%rsp),%r10
  0x00007f8ab9135aec: mov    0x30(%rsp),%r9
  0x00007f8ab9135af1: mov    0x38(%rsp),%r8
  0x00007f8ab9135af6: mov    0x40(%rsp),%rdi
  0x00007f8ab9135afb: mov    0x48(%rsp),%rsi
  0x00007f8ab9135b00: mov    0x50(%rsp),%rbp
  0x00007f8ab9135b05: mov    0x60(%rsp),%rbx
  0x00007f8ab9135b0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9135b0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9135b14: mov    0x78(%rsp),%rax
  0x00007f8ab9135b19: add    $0x80,%rsp
  0x00007f8ab9135b20: add    $0x8,%rsp
  0x00007f8ab9135b24: popfq  
  0x00007f8ab9135b25: mov    %r13,%rsp
  0x00007f8ab9135b28: pop    %rax
  0x00007f8ab9135b29: mov    %rsp,%r13
  0x00007f8ab9135b2c: sub    $0x20,%rsp
  0x00007f8ab9135b30: mov    %rax,(%rsp)
  0x00007f8ab9135b34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9135b39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9135b3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9135b42: jmpq   *%rcx

AHE@0x00007f8ac80d8818: 0xbb000000 i2c: 0x00007f8ab9135c20 c2i: 0x00007f8ab9135d38 c2iUV: 0x00007f8ab9135d0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/util/Enumeration; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9135d38
  0x00007f8ab9135c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9135c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9135c2e: cmp    %r11,%rax
  0x00007f8ab9135c31: jbe    0x00007f8ab9135c4a
  0x00007f8ab9135c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9135c41: cmp    %r11,%rax
  0x00007f8ab9135c44: jb     0x00007f8ab9135ce7
  0x00007f8ab9135c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9135c54: cmp    %r11,%rax
  0x00007f8ab9135c57: jbe    0x00007f8ab9135c70
  0x00007f8ab9135c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9135c67: cmp    %r11,%rax
  0x00007f8ab9135c6a: jb     0x00007f8ab9135ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9135c70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9135c75: sub    $0x80,%rsp
  0x00007f8ab9135c7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9135c81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9135c86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9135c8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135c90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9135c95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9135c9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9135c9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9135ca4: mov    %r9,0x30(%rsp)
  0x00007f8ab9135ca9: mov    %r10,0x28(%rsp)
  0x00007f8ab9135cae: mov    %r11,0x20(%rsp)
  0x00007f8ab9135cb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9135cb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9135cbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9135cc2: mov    %r15,(%rsp)
  0x00007f8ab9135cc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9135cd0: movabs $0x7f8ab9135c70,%rsi
  0x00007f8ab9135cda: mov    %rsp,%rdx
  0x00007f8ab9135cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135ce1: callq  0x00007f8aceddb9fa
  0x00007f8ab9135ce6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9135ce7: mov    %rsp,%r11
  0x00007f8ab9135cea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135cee: push   %rax
  0x00007f8ab9135cef: mov    %r11,%rax
  0x00007f8ab9135cf2: mov    0x50(%rbx),%r11
  0x00007f8ab9135cf6: mov    0x10(%rax),%rsi
  0x00007f8ab9135cfa: mov    0x8(%rax),%rdx
  0x00007f8ab9135cfe: mov    %rbx,0x258(%r15)
  0x00007f8ab9135d05: mov    %rbx,%rax
  0x00007f8ab9135d08: jmpq   *%r11
  0x00007f8ab9135d0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9135d0e: shl    $0x3,%rbx
  0x00007f8ab9135d12: cmp    0x10(%rax),%rbx
  0x00007f8ab9135d16: mov    0x8(%rax),%rbx
  0x00007f8ab9135d1a: je     0x00007f8ab9135d25
  0x00007f8ab9135d20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9135d25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9135d2d: je     0x00007f8ab9135e28
  0x00007f8ab9135d33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9135d38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9135d40: je     0x00007f8ab9135e28
  0x00007f8ab9135d46: mov    %rsp,%r13
  0x00007f8ab9135d49: mov    (%rsp),%rax
  0x00007f8ab9135d4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135d51: pushfq 
  0x00007f8ab9135d52: sub    $0x8,%rsp
  0x00007f8ab9135d56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9135d5b: sub    $0x80,%rsp
  0x00007f8ab9135d62: mov    %rax,0x78(%rsp)
  0x00007f8ab9135d67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9135d6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9135d71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135d76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9135d7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9135d80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9135d85: mov    %r8,0x38(%rsp)
  0x00007f8ab9135d8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9135d8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9135d94: mov    %r11,0x20(%rsp)
  0x00007f8ab9135d99: mov    %r12,0x18(%rsp)
  0x00007f8ab9135d9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9135da3: mov    %r14,0x8(%rsp)
  0x00007f8ab9135da8: mov    %r15,(%rsp)
  0x00007f8ab9135dac: sub    $0x200,%rsp
  0x00007f8ab9135db3: fxsave64 (%rsp)
  0x00007f8ab9135db8: mov    %rbx,%rdi
  0x00007f8ab9135dbb: mov    %rax,%rsi
  0x00007f8ab9135dbe: callq  0x00007f8acef8bbca
  0x00007f8ab9135dc3: fxrstor64 (%rsp)
  0x00007f8ab9135dc8: add    $0x200,%rsp
  0x00007f8ab9135dcf: mov    (%rsp),%r15
  0x00007f8ab9135dd3: mov    0x8(%rsp),%r14
  0x00007f8ab9135dd8: mov    0x10(%rsp),%r13
  0x00007f8ab9135ddd: mov    0x18(%rsp),%r12
  0x00007f8ab9135de2: mov    0x20(%rsp),%r11
  0x00007f8ab9135de7: mov    0x28(%rsp),%r10
  0x00007f8ab9135dec: mov    0x30(%rsp),%r9
  0x00007f8ab9135df1: mov    0x38(%rsp),%r8
  0x00007f8ab9135df6: mov    0x40(%rsp),%rdi
  0x00007f8ab9135dfb: mov    0x48(%rsp),%rsi
  0x00007f8ab9135e00: mov    0x50(%rsp),%rbp
  0x00007f8ab9135e05: mov    0x60(%rsp),%rbx
  0x00007f8ab9135e0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9135e0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9135e14: mov    0x78(%rsp),%rax
  0x00007f8ab9135e19: add    $0x80,%rsp
  0x00007f8ab9135e20: add    $0x8,%rsp
  0x00007f8ab9135e24: popfq  
  0x00007f8ab9135e25: mov    %r13,%rsp
  0x00007f8ab9135e28: pop    %rax
  0x00007f8ab9135e29: mov    %rsp,%r13
  0x00007f8ab9135e2c: sub    $0x20,%rsp
  0x00007f8ab9135e30: mov    %rax,(%rsp)
  0x00007f8ab9135e34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9135e39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9135e3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9135e42: jmpq   *%rcx

AHE@0x00007f8ac80d8860: 0xbb000000 i2c: 0x00007f8ab9135f20 c2i: 0x00007f8ab9136038 c2iUV: 0x00007f8ab913600b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9136038
  0x00007f8ab9135f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9135f24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9135f2e: cmp    %r11,%rax
  0x00007f8ab9135f31: jbe    0x00007f8ab9135f4a
  0x00007f8ab9135f37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9135f41: cmp    %r11,%rax
  0x00007f8ab9135f44: jb     0x00007f8ab9135fe7
  0x00007f8ab9135f4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9135f54: cmp    %r11,%rax
  0x00007f8ab9135f57: jbe    0x00007f8ab9135f70
  0x00007f8ab9135f5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9135f67: cmp    %r11,%rax
  0x00007f8ab9135f6a: jb     0x00007f8ab9135fe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9135f70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9135f75: sub    $0x80,%rsp
  0x00007f8ab9135f7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9135f81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9135f86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9135f8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9135f90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9135f95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9135f9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9135f9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9135fa4: mov    %r9,0x30(%rsp)
  0x00007f8ab9135fa9: mov    %r10,0x28(%rsp)
  0x00007f8ab9135fae: mov    %r11,0x20(%rsp)
  0x00007f8ab9135fb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9135fb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9135fbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9135fc2: mov    %r15,(%rsp)
  0x00007f8ab9135fc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9135fd0: movabs $0x7f8ab9135f70,%rsi
  0x00007f8ab9135fda: mov    %rsp,%rdx
  0x00007f8ab9135fdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135fe1: callq  0x00007f8aceddb9fa
  0x00007f8ab9135fe6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9135fe7: mov    %rsp,%r11
  0x00007f8ab9135fea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9135fee: push   %rax
  0x00007f8ab9135fef: mov    %r11,%rax
  0x00007f8ab9135ff2: mov    0x50(%rbx),%r11
  0x00007f8ab9135ff6: mov    0x10(%rax),%rsi
  0x00007f8ab9135ffa: mov    0x8(%rax),%rdx
  0x00007f8ab9135ffe: mov    %rbx,0x258(%r15)
  0x00007f8ab9136005: mov    %rbx,%rax
  0x00007f8ab9136008: jmpq   *%r11
  0x00007f8ab913600b: mov    0x8(%rsi),%ebx
  0x00007f8ab913600e: shl    $0x3,%rbx
  0x00007f8ab9136012: cmp    0x10(%rax),%rbx
  0x00007f8ab9136016: mov    0x8(%rax),%rbx
  0x00007f8ab913601a: je     0x00007f8ab9136025
  0x00007f8ab9136020: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136025: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913602d: je     0x00007f8ab9136128
  0x00007f8ab9136033: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136038: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136040: je     0x00007f8ab9136128
  0x00007f8ab9136046: mov    %rsp,%r13
  0x00007f8ab9136049: mov    (%rsp),%rax
  0x00007f8ab913604d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136051: pushfq 
  0x00007f8ab9136052: sub    $0x8,%rsp
  0x00007f8ab9136056: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913605b: sub    $0x80,%rsp
  0x00007f8ab9136062: mov    %rax,0x78(%rsp)
  0x00007f8ab9136067: mov    %rcx,0x70(%rsp)
  0x00007f8ab913606c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136071: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136076: mov    %rbp,0x50(%rsp)
  0x00007f8ab913607b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136080: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136085: mov    %r8,0x38(%rsp)
  0x00007f8ab913608a: mov    %r9,0x30(%rsp)
  0x00007f8ab913608f: mov    %r10,0x28(%rsp)
  0x00007f8ab9136094: mov    %r11,0x20(%rsp)
  0x00007f8ab9136099: mov    %r12,0x18(%rsp)
  0x00007f8ab913609e: mov    %r13,0x10(%rsp)
  0x00007f8ab91360a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91360a8: mov    %r15,(%rsp)
  0x00007f8ab91360ac: sub    $0x200,%rsp
  0x00007f8ab91360b3: fxsave64 (%rsp)
  0x00007f8ab91360b8: mov    %rbx,%rdi
  0x00007f8ab91360bb: mov    %rax,%rsi
  0x00007f8ab91360be: callq  0x00007f8acef8bbca
  0x00007f8ab91360c3: fxrstor64 (%rsp)
  0x00007f8ab91360c8: add    $0x200,%rsp
  0x00007f8ab91360cf: mov    (%rsp),%r15
  0x00007f8ab91360d3: mov    0x8(%rsp),%r14
  0x00007f8ab91360d8: mov    0x10(%rsp),%r13
  0x00007f8ab91360dd: mov    0x18(%rsp),%r12
  0x00007f8ab91360e2: mov    0x20(%rsp),%r11
  0x00007f8ab91360e7: mov    0x28(%rsp),%r10
  0x00007f8ab91360ec: mov    0x30(%rsp),%r9
  0x00007f8ab91360f1: mov    0x38(%rsp),%r8
  0x00007f8ab91360f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91360fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9136100: mov    0x50(%rsp),%rbp
  0x00007f8ab9136105: mov    0x60(%rsp),%rbx
  0x00007f8ab913610a: mov    0x68(%rsp),%rdx
  0x00007f8ab913610f: mov    0x70(%rsp),%rcx
  0x00007f8ab9136114: mov    0x78(%rsp),%rax
  0x00007f8ab9136119: add    $0x80,%rsp
  0x00007f8ab9136120: add    $0x8,%rsp
  0x00007f8ab9136124: popfq  
  0x00007f8ab9136125: mov    %r13,%rsp
  0x00007f8ab9136128: pop    %rax
  0x00007f8ab9136129: mov    %rsp,%r13
  0x00007f8ab913612c: sub    $0x20,%rsp
  0x00007f8ab9136130: mov    %rax,(%rsp)
  0x00007f8ab9136134: mov    %rsi,0x10(%rsp)
  0x00007f8ab9136139: mov    %rdx,0x8(%rsp)
  0x00007f8ab913613e: mov    0x40(%rbx),%rcx
  0x00007f8ab9136142: jmpq   *%rcx

AHE@0x00007f8ac80d88a8: 0xbb000000 i2c: 0x00007f8ab9136220 c2i: 0x00007f8ab9136338 c2iUV: 0x00007f8ab913630b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9136338
  0x00007f8ab9136220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9136224: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913622e: cmp    %r11,%rax
  0x00007f8ab9136231: jbe    0x00007f8ab913624a
  0x00007f8ab9136237: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9136241: cmp    %r11,%rax
  0x00007f8ab9136244: jb     0x00007f8ab91362e7
  0x00007f8ab913624a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9136254: cmp    %r11,%rax
  0x00007f8ab9136257: jbe    0x00007f8ab9136270
  0x00007f8ab913625d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9136267: cmp    %r11,%rax
  0x00007f8ab913626a: jb     0x00007f8ab91362e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9136270: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9136275: sub    $0x80,%rsp
  0x00007f8ab913627c: mov    %rax,0x78(%rsp)
  0x00007f8ab9136281: mov    %rcx,0x70(%rsp)
  0x00007f8ab9136286: mov    %rdx,0x68(%rsp)
  0x00007f8ab913628b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136290: mov    %rbp,0x50(%rsp)
  0x00007f8ab9136295: mov    %rsi,0x48(%rsp)
  0x00007f8ab913629a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913629f: mov    %r8,0x38(%rsp)
  0x00007f8ab91362a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91362a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91362ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91362b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91362b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91362bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91362c2: mov    %r15,(%rsp)
  0x00007f8ab91362c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91362d0: movabs $0x7f8ab9136270,%rsi
  0x00007f8ab91362da: mov    %rsp,%rdx
  0x00007f8ab91362dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91362e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91362e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91362e7: mov    %rsp,%r11
  0x00007f8ab91362ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91362ee: push   %rax
  0x00007f8ab91362ef: mov    %r11,%rax
  0x00007f8ab91362f2: mov    0x50(%rbx),%r11
  0x00007f8ab91362f6: mov    0x10(%rax),%rsi
  0x00007f8ab91362fa: mov    0x8(%rax),%rdx
  0x00007f8ab91362fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9136305: mov    %rbx,%rax
  0x00007f8ab9136308: jmpq   *%r11
  0x00007f8ab913630b: mov    0x8(%rsi),%ebx
  0x00007f8ab913630e: shl    $0x3,%rbx
  0x00007f8ab9136312: cmp    0x10(%rax),%rbx
  0x00007f8ab9136316: mov    0x8(%rax),%rbx
  0x00007f8ab913631a: je     0x00007f8ab9136325
  0x00007f8ab9136320: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136325: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913632d: je     0x00007f8ab9136428
  0x00007f8ab9136333: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136338: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136340: je     0x00007f8ab9136428
  0x00007f8ab9136346: mov    %rsp,%r13
  0x00007f8ab9136349: mov    (%rsp),%rax
  0x00007f8ab913634d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136351: pushfq 
  0x00007f8ab9136352: sub    $0x8,%rsp
  0x00007f8ab9136356: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913635b: sub    $0x80,%rsp
  0x00007f8ab9136362: mov    %rax,0x78(%rsp)
  0x00007f8ab9136367: mov    %rcx,0x70(%rsp)
  0x00007f8ab913636c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136371: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136376: mov    %rbp,0x50(%rsp)
  0x00007f8ab913637b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136380: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136385: mov    %r8,0x38(%rsp)
  0x00007f8ab913638a: mov    %r9,0x30(%rsp)
  0x00007f8ab913638f: mov    %r10,0x28(%rsp)
  0x00007f8ab9136394: mov    %r11,0x20(%rsp)
  0x00007f8ab9136399: mov    %r12,0x18(%rsp)
  0x00007f8ab913639e: mov    %r13,0x10(%rsp)
  0x00007f8ab91363a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91363a8: mov    %r15,(%rsp)
  0x00007f8ab91363ac: sub    $0x200,%rsp
  0x00007f8ab91363b3: fxsave64 (%rsp)
  0x00007f8ab91363b8: mov    %rbx,%rdi
  0x00007f8ab91363bb: mov    %rax,%rsi
  0x00007f8ab91363be: callq  0x00007f8acef8bbca
  0x00007f8ab91363c3: fxrstor64 (%rsp)
  0x00007f8ab91363c8: add    $0x200,%rsp
  0x00007f8ab91363cf: mov    (%rsp),%r15
  0x00007f8ab91363d3: mov    0x8(%rsp),%r14
  0x00007f8ab91363d8: mov    0x10(%rsp),%r13
  0x00007f8ab91363dd: mov    0x18(%rsp),%r12
  0x00007f8ab91363e2: mov    0x20(%rsp),%r11
  0x00007f8ab91363e7: mov    0x28(%rsp),%r10
  0x00007f8ab91363ec: mov    0x30(%rsp),%r9
  0x00007f8ab91363f1: mov    0x38(%rsp),%r8
  0x00007f8ab91363f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91363fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9136400: mov    0x50(%rsp),%rbp
  0x00007f8ab9136405: mov    0x60(%rsp),%rbx
  0x00007f8ab913640a: mov    0x68(%rsp),%rdx
  0x00007f8ab913640f: mov    0x70(%rsp),%rcx
  0x00007f8ab9136414: mov    0x78(%rsp),%rax
  0x00007f8ab9136419: add    $0x80,%rsp
  0x00007f8ab9136420: add    $0x8,%rsp
  0x00007f8ab9136424: popfq  
  0x00007f8ab9136425: mov    %r13,%rsp
  0x00007f8ab9136428: pop    %rax
  0x00007f8ab9136429: mov    %rsp,%r13
  0x00007f8ab913642c: sub    $0x20,%rsp
  0x00007f8ab9136430: mov    %rax,(%rsp)
  0x00007f8ab9136434: mov    %rsi,0x10(%rsp)
  0x00007f8ab9136439: mov    %rdx,0x8(%rsp)
  0x00007f8ab913643e: mov    0x40(%rbx),%rcx
  0x00007f8ab9136442: jmpq   *%rcx

AHE@0x00007f8ac80d88f0: 0xbb000000 i2c: 0x00007f8ab9136520 c2i: 0x00007f8ab9136638 c2iUV: 0x00007f8ab913660b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9136638
  0x00007f8ab9136520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9136524: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913652e: cmp    %r11,%rax
  0x00007f8ab9136531: jbe    0x00007f8ab913654a
  0x00007f8ab9136537: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9136541: cmp    %r11,%rax
  0x00007f8ab9136544: jb     0x00007f8ab91365e7
  0x00007f8ab913654a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9136554: cmp    %r11,%rax
  0x00007f8ab9136557: jbe    0x00007f8ab9136570
  0x00007f8ab913655d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9136567: cmp    %r11,%rax
  0x00007f8ab913656a: jb     0x00007f8ab91365e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9136570: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9136575: sub    $0x80,%rsp
  0x00007f8ab913657c: mov    %rax,0x78(%rsp)
  0x00007f8ab9136581: mov    %rcx,0x70(%rsp)
  0x00007f8ab9136586: mov    %rdx,0x68(%rsp)
  0x00007f8ab913658b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136590: mov    %rbp,0x50(%rsp)
  0x00007f8ab9136595: mov    %rsi,0x48(%rsp)
  0x00007f8ab913659a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913659f: mov    %r8,0x38(%rsp)
  0x00007f8ab91365a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91365a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91365ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91365b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91365b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91365bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91365c2: mov    %r15,(%rsp)
  0x00007f8ab91365c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91365d0: movabs $0x7f8ab9136570,%rsi
  0x00007f8ab91365da: mov    %rsp,%rdx
  0x00007f8ab91365dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91365e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91365e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91365e7: mov    %rsp,%r11
  0x00007f8ab91365ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91365ee: push   %rax
  0x00007f8ab91365ef: mov    %r11,%rax
  0x00007f8ab91365f2: mov    0x50(%rbx),%r11
  0x00007f8ab91365f6: mov    0x10(%rax),%rsi
  0x00007f8ab91365fa: mov    0x8(%rax),%rdx
  0x00007f8ab91365fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9136605: mov    %rbx,%rax
  0x00007f8ab9136608: jmpq   *%r11
  0x00007f8ab913660b: mov    0x8(%rsi),%ebx
  0x00007f8ab913660e: shl    $0x3,%rbx
  0x00007f8ab9136612: cmp    0x10(%rax),%rbx
  0x00007f8ab9136616: mov    0x8(%rax),%rbx
  0x00007f8ab913661a: je     0x00007f8ab9136625
  0x00007f8ab9136620: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136625: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913662d: je     0x00007f8ab9136728
  0x00007f8ab9136633: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136638: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136640: je     0x00007f8ab9136728
  0x00007f8ab9136646: mov    %rsp,%r13
  0x00007f8ab9136649: mov    (%rsp),%rax
  0x00007f8ab913664d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136651: pushfq 
  0x00007f8ab9136652: sub    $0x8,%rsp
  0x00007f8ab9136656: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913665b: sub    $0x80,%rsp
  0x00007f8ab9136662: mov    %rax,0x78(%rsp)
  0x00007f8ab9136667: mov    %rcx,0x70(%rsp)
  0x00007f8ab913666c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136671: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136676: mov    %rbp,0x50(%rsp)
  0x00007f8ab913667b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136680: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136685: mov    %r8,0x38(%rsp)
  0x00007f8ab913668a: mov    %r9,0x30(%rsp)
  0x00007f8ab913668f: mov    %r10,0x28(%rsp)
  0x00007f8ab9136694: mov    %r11,0x20(%rsp)
  0x00007f8ab9136699: mov    %r12,0x18(%rsp)
  0x00007f8ab913669e: mov    %r13,0x10(%rsp)
  0x00007f8ab91366a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91366a8: mov    %r15,(%rsp)
  0x00007f8ab91366ac: sub    $0x200,%rsp
  0x00007f8ab91366b3: fxsave64 (%rsp)
  0x00007f8ab91366b8: mov    %rbx,%rdi
  0x00007f8ab91366bb: mov    %rax,%rsi
  0x00007f8ab91366be: callq  0x00007f8acef8bbca
  0x00007f8ab91366c3: fxrstor64 (%rsp)
  0x00007f8ab91366c8: add    $0x200,%rsp
  0x00007f8ab91366cf: mov    (%rsp),%r15
  0x00007f8ab91366d3: mov    0x8(%rsp),%r14
  0x00007f8ab91366d8: mov    0x10(%rsp),%r13
  0x00007f8ab91366dd: mov    0x18(%rsp),%r12
  0x00007f8ab91366e2: mov    0x20(%rsp),%r11
  0x00007f8ab91366e7: mov    0x28(%rsp),%r10
  0x00007f8ab91366ec: mov    0x30(%rsp),%r9
  0x00007f8ab91366f1: mov    0x38(%rsp),%r8
  0x00007f8ab91366f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91366fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9136700: mov    0x50(%rsp),%rbp
  0x00007f8ab9136705: mov    0x60(%rsp),%rbx
  0x00007f8ab913670a: mov    0x68(%rsp),%rdx
  0x00007f8ab913670f: mov    0x70(%rsp),%rcx
  0x00007f8ab9136714: mov    0x78(%rsp),%rax
  0x00007f8ab9136719: add    $0x80,%rsp
  0x00007f8ab9136720: add    $0x8,%rsp
  0x00007f8ab9136724: popfq  
  0x00007f8ab9136725: mov    %r13,%rsp
  0x00007f8ab9136728: pop    %rax
  0x00007f8ab9136729: mov    %rsp,%r13
  0x00007f8ab913672c: sub    $0x20,%rsp
  0x00007f8ab9136730: mov    %rax,(%rsp)
  0x00007f8ab9136734: mov    %rsi,0x10(%rsp)
  0x00007f8ab9136739: mov    %rdx,0x8(%rsp)
  0x00007f8ab913673e: mov    0x40(%rbx),%rcx
  0x00007f8ab9136742: jmpq   *%rcx

AHE@0x00007f8ac80d8938: 0xbb000000 i2c: 0x00007f8ab9136820 c2i: 0x00007f8ab9136938 c2iUV: 0x00007f8ab913690b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9136938
  0x00007f8ab9136820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9136824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913682e: cmp    %r11,%rax
  0x00007f8ab9136831: jbe    0x00007f8ab913684a
  0x00007f8ab9136837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9136841: cmp    %r11,%rax
  0x00007f8ab9136844: jb     0x00007f8ab91368e7
  0x00007f8ab913684a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9136854: cmp    %r11,%rax
  0x00007f8ab9136857: jbe    0x00007f8ab9136870
  0x00007f8ab913685d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9136867: cmp    %r11,%rax
  0x00007f8ab913686a: jb     0x00007f8ab91368e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9136870: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9136875: sub    $0x80,%rsp
  0x00007f8ab913687c: mov    %rax,0x78(%rsp)
  0x00007f8ab9136881: mov    %rcx,0x70(%rsp)
  0x00007f8ab9136886: mov    %rdx,0x68(%rsp)
  0x00007f8ab913688b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136890: mov    %rbp,0x50(%rsp)
  0x00007f8ab9136895: mov    %rsi,0x48(%rsp)
  0x00007f8ab913689a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913689f: mov    %r8,0x38(%rsp)
  0x00007f8ab91368a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91368a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91368ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91368b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91368b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91368bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91368c2: mov    %r15,(%rsp)
  0x00007f8ab91368c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91368d0: movabs $0x7f8ab9136870,%rsi
  0x00007f8ab91368da: mov    %rsp,%rdx
  0x00007f8ab91368dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91368e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91368e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91368e7: mov    %rsp,%r11
  0x00007f8ab91368ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91368ee: push   %rax
  0x00007f8ab91368ef: mov    %r11,%rax
  0x00007f8ab91368f2: mov    0x50(%rbx),%r11
  0x00007f8ab91368f6: mov    0x10(%rax),%rsi
  0x00007f8ab91368fa: mov    0x8(%rax),%rdx
  0x00007f8ab91368fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9136905: mov    %rbx,%rax
  0x00007f8ab9136908: jmpq   *%r11
  0x00007f8ab913690b: mov    0x8(%rsi),%ebx
  0x00007f8ab913690e: shl    $0x3,%rbx
  0x00007f8ab9136912: cmp    0x10(%rax),%rbx
  0x00007f8ab9136916: mov    0x8(%rax),%rbx
  0x00007f8ab913691a: je     0x00007f8ab9136925
  0x00007f8ab9136920: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136925: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913692d: je     0x00007f8ab9136a28
  0x00007f8ab9136933: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136938: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136940: je     0x00007f8ab9136a28
  0x00007f8ab9136946: mov    %rsp,%r13
  0x00007f8ab9136949: mov    (%rsp),%rax
  0x00007f8ab913694d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136951: pushfq 
  0x00007f8ab9136952: sub    $0x8,%rsp
  0x00007f8ab9136956: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913695b: sub    $0x80,%rsp
  0x00007f8ab9136962: mov    %rax,0x78(%rsp)
  0x00007f8ab9136967: mov    %rcx,0x70(%rsp)
  0x00007f8ab913696c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136971: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136976: mov    %rbp,0x50(%rsp)
  0x00007f8ab913697b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136980: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136985: mov    %r8,0x38(%rsp)
  0x00007f8ab913698a: mov    %r9,0x30(%rsp)
  0x00007f8ab913698f: mov    %r10,0x28(%rsp)
  0x00007f8ab9136994: mov    %r11,0x20(%rsp)
  0x00007f8ab9136999: mov    %r12,0x18(%rsp)
  0x00007f8ab913699e: mov    %r13,0x10(%rsp)
  0x00007f8ab91369a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91369a8: mov    %r15,(%rsp)
  0x00007f8ab91369ac: sub    $0x200,%rsp
  0x00007f8ab91369b3: fxsave64 (%rsp)
  0x00007f8ab91369b8: mov    %rbx,%rdi
  0x00007f8ab91369bb: mov    %rax,%rsi
  0x00007f8ab91369be: callq  0x00007f8acef8bbca
  0x00007f8ab91369c3: fxrstor64 (%rsp)
  0x00007f8ab91369c8: add    $0x200,%rsp
  0x00007f8ab91369cf: mov    (%rsp),%r15
  0x00007f8ab91369d3: mov    0x8(%rsp),%r14
  0x00007f8ab91369d8: mov    0x10(%rsp),%r13
  0x00007f8ab91369dd: mov    0x18(%rsp),%r12
  0x00007f8ab91369e2: mov    0x20(%rsp),%r11
  0x00007f8ab91369e7: mov    0x28(%rsp),%r10
  0x00007f8ab91369ec: mov    0x30(%rsp),%r9
  0x00007f8ab91369f1: mov    0x38(%rsp),%r8
  0x00007f8ab91369f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91369fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9136a00: mov    0x50(%rsp),%rbp
  0x00007f8ab9136a05: mov    0x60(%rsp),%rbx
  0x00007f8ab9136a0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9136a0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9136a14: mov    0x78(%rsp),%rax
  0x00007f8ab9136a19: add    $0x80,%rsp
  0x00007f8ab9136a20: add    $0x8,%rsp
  0x00007f8ab9136a24: popfq  
  0x00007f8ab9136a25: mov    %r13,%rsp
  0x00007f8ab9136a28: pop    %rax
  0x00007f8ab9136a29: mov    %rsp,%r13
  0x00007f8ab9136a2c: sub    $0x20,%rsp
  0x00007f8ab9136a30: mov    %rax,(%rsp)
  0x00007f8ab9136a34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9136a39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9136a3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9136a42: jmpq   *%rcx

AHE@0x00007f8ac80d8980: 0xbb000000 i2c: 0x00007f8ab9136b20 c2i: 0x00007f8ab9136c38 c2iUV: 0x00007f8ab9136c0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9136c38
  0x00007f8ab9136b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9136b24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9136b2e: cmp    %r11,%rax
  0x00007f8ab9136b31: jbe    0x00007f8ab9136b4a
  0x00007f8ab9136b37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9136b41: cmp    %r11,%rax
  0x00007f8ab9136b44: jb     0x00007f8ab9136be7
  0x00007f8ab9136b4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9136b54: cmp    %r11,%rax
  0x00007f8ab9136b57: jbe    0x00007f8ab9136b70
  0x00007f8ab9136b5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9136b67: cmp    %r11,%rax
  0x00007f8ab9136b6a: jb     0x00007f8ab9136be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9136b70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9136b75: sub    $0x80,%rsp
  0x00007f8ab9136b7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9136b81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9136b86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136b8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136b90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9136b95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136b9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136b9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9136ba4: mov    %r9,0x30(%rsp)
  0x00007f8ab9136ba9: mov    %r10,0x28(%rsp)
  0x00007f8ab9136bae: mov    %r11,0x20(%rsp)
  0x00007f8ab9136bb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9136bb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9136bbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9136bc2: mov    %r15,(%rsp)
  0x00007f8ab9136bc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9136bd0: movabs $0x7f8ab9136b70,%rsi
  0x00007f8ab9136bda: mov    %rsp,%rdx
  0x00007f8ab9136bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136be1: callq  0x00007f8aceddb9fa
  0x00007f8ab9136be6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9136be7: mov    %rsp,%r11
  0x00007f8ab9136bea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136bee: push   %rax
  0x00007f8ab9136bef: mov    %r11,%rax
  0x00007f8ab9136bf2: mov    0x50(%rbx),%r11
  0x00007f8ab9136bf6: mov    0x10(%rax),%rsi
  0x00007f8ab9136bfa: mov    0x8(%rax),%rdx
  0x00007f8ab9136bfe: mov    %rbx,0x258(%r15)
  0x00007f8ab9136c05: mov    %rbx,%rax
  0x00007f8ab9136c08: jmpq   *%r11
  0x00007f8ab9136c0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9136c0e: shl    $0x3,%rbx
  0x00007f8ab9136c12: cmp    0x10(%rax),%rbx
  0x00007f8ab9136c16: mov    0x8(%rax),%rbx
  0x00007f8ab9136c1a: je     0x00007f8ab9136c25
  0x00007f8ab9136c20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136c25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136c2d: je     0x00007f8ab9136d28
  0x00007f8ab9136c33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136c38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136c40: je     0x00007f8ab9136d28
  0x00007f8ab9136c46: mov    %rsp,%r13
  0x00007f8ab9136c49: mov    (%rsp),%rax
  0x00007f8ab9136c4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136c51: pushfq 
  0x00007f8ab9136c52: sub    $0x8,%rsp
  0x00007f8ab9136c56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9136c5b: sub    $0x80,%rsp
  0x00007f8ab9136c62: mov    %rax,0x78(%rsp)
  0x00007f8ab9136c67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9136c6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136c71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136c76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9136c7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136c80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136c85: mov    %r8,0x38(%rsp)
  0x00007f8ab9136c8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9136c8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9136c94: mov    %r11,0x20(%rsp)
  0x00007f8ab9136c99: mov    %r12,0x18(%rsp)
  0x00007f8ab9136c9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9136ca3: mov    %r14,0x8(%rsp)
  0x00007f8ab9136ca8: mov    %r15,(%rsp)
  0x00007f8ab9136cac: sub    $0x200,%rsp
  0x00007f8ab9136cb3: fxsave64 (%rsp)
  0x00007f8ab9136cb8: mov    %rbx,%rdi
  0x00007f8ab9136cbb: mov    %rax,%rsi
  0x00007f8ab9136cbe: callq  0x00007f8acef8bbca
  0x00007f8ab9136cc3: fxrstor64 (%rsp)
  0x00007f8ab9136cc8: add    $0x200,%rsp
  0x00007f8ab9136ccf: mov    (%rsp),%r15
  0x00007f8ab9136cd3: mov    0x8(%rsp),%r14
  0x00007f8ab9136cd8: mov    0x10(%rsp),%r13
  0x00007f8ab9136cdd: mov    0x18(%rsp),%r12
  0x00007f8ab9136ce2: mov    0x20(%rsp),%r11
  0x00007f8ab9136ce7: mov    0x28(%rsp),%r10
  0x00007f8ab9136cec: mov    0x30(%rsp),%r9
  0x00007f8ab9136cf1: mov    0x38(%rsp),%r8
  0x00007f8ab9136cf6: mov    0x40(%rsp),%rdi
  0x00007f8ab9136cfb: mov    0x48(%rsp),%rsi
  0x00007f8ab9136d00: mov    0x50(%rsp),%rbp
  0x00007f8ab9136d05: mov    0x60(%rsp),%rbx
  0x00007f8ab9136d0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9136d0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9136d14: mov    0x78(%rsp),%rax
  0x00007f8ab9136d19: add    $0x80,%rsp
  0x00007f8ab9136d20: add    $0x8,%rsp
  0x00007f8ab9136d24: popfq  
  0x00007f8ab9136d25: mov    %r13,%rsp
  0x00007f8ab9136d28: pop    %rax
  0x00007f8ab9136d29: mov    %rsp,%r13
  0x00007f8ab9136d2c: sub    $0x20,%rsp
  0x00007f8ab9136d30: mov    %rax,(%rsp)
  0x00007f8ab9136d34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9136d39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9136d3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9136d42: jmpq   *%rcx

AHE@0x00007f8ac80eabd0: 0xbb000000 i2c: 0x00007f8ab9136e20 c2i: 0x00007f8ab9136f38 c2iUV: 0x00007f8ab9136f0b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9136f38
  0x00007f8ab9136e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9136e24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9136e2e: cmp    %r11,%rax
  0x00007f8ab9136e31: jbe    0x00007f8ab9136e4a
  0x00007f8ab9136e37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9136e41: cmp    %r11,%rax
  0x00007f8ab9136e44: jb     0x00007f8ab9136ee7
  0x00007f8ab9136e4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9136e54: cmp    %r11,%rax
  0x00007f8ab9136e57: jbe    0x00007f8ab9136e70
  0x00007f8ab9136e5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9136e67: cmp    %r11,%rax
  0x00007f8ab9136e6a: jb     0x00007f8ab9136ee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9136e70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9136e75: sub    $0x80,%rsp
  0x00007f8ab9136e7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9136e81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9136e86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136e8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136e90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9136e95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136e9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136e9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9136ea4: mov    %r9,0x30(%rsp)
  0x00007f8ab9136ea9: mov    %r10,0x28(%rsp)
  0x00007f8ab9136eae: mov    %r11,0x20(%rsp)
  0x00007f8ab9136eb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9136eb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9136ebd: mov    %r14,0x8(%rsp)
  0x00007f8ab9136ec2: mov    %r15,(%rsp)
  0x00007f8ab9136ec6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9136ed0: movabs $0x7f8ab9136e70,%rsi
  0x00007f8ab9136eda: mov    %rsp,%rdx
  0x00007f8ab9136edd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136ee1: callq  0x00007f8aceddb9fa
  0x00007f8ab9136ee6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9136ee7: mov    %rsp,%r11
  0x00007f8ab9136eea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136eee: push   %rax
  0x00007f8ab9136eef: mov    %r11,%rax
  0x00007f8ab9136ef2: mov    0x50(%rbx),%r11
  0x00007f8ab9136ef6: mov    0x10(%rax),%rsi
  0x00007f8ab9136efa: mov    0x8(%rax),%rdx
  0x00007f8ab9136efe: mov    %rbx,0x258(%r15)
  0x00007f8ab9136f05: mov    %rbx,%rax
  0x00007f8ab9136f08: jmpq   *%r11
  0x00007f8ab9136f0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9136f0e: shl    $0x3,%rbx
  0x00007f8ab9136f12: cmp    0x10(%rax),%rbx
  0x00007f8ab9136f16: mov    0x8(%rax),%rbx
  0x00007f8ab9136f1a: je     0x00007f8ab9136f25
  0x00007f8ab9136f20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136f25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136f2d: je     0x00007f8ab9137028
  0x00007f8ab9136f33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9136f38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9136f40: je     0x00007f8ab9137028
  0x00007f8ab9136f46: mov    %rsp,%r13
  0x00007f8ab9136f49: mov    (%rsp),%rax
  0x00007f8ab9136f4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9136f51: pushfq 
  0x00007f8ab9136f52: sub    $0x8,%rsp
  0x00007f8ab9136f56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9136f5b: sub    $0x80,%rsp
  0x00007f8ab9136f62: mov    %rax,0x78(%rsp)
  0x00007f8ab9136f67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9136f6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9136f71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9136f76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9136f7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9136f80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9136f85: mov    %r8,0x38(%rsp)
  0x00007f8ab9136f8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9136f8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9136f94: mov    %r11,0x20(%rsp)
  0x00007f8ab9136f99: mov    %r12,0x18(%rsp)
  0x00007f8ab9136f9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9136fa3: mov    %r14,0x8(%rsp)
  0x00007f8ab9136fa8: mov    %r15,(%rsp)
  0x00007f8ab9136fac: sub    $0x200,%rsp
  0x00007f8ab9136fb3: fxsave64 (%rsp)
  0x00007f8ab9136fb8: mov    %rbx,%rdi
  0x00007f8ab9136fbb: mov    %rax,%rsi
  0x00007f8ab9136fbe: callq  0x00007f8acef8bbca
  0x00007f8ab9136fc3: fxrstor64 (%rsp)
  0x00007f8ab9136fc8: add    $0x200,%rsp
  0x00007f8ab9136fcf: mov    (%rsp),%r15
  0x00007f8ab9136fd3: mov    0x8(%rsp),%r14
  0x00007f8ab9136fd8: mov    0x10(%rsp),%r13
  0x00007f8ab9136fdd: mov    0x18(%rsp),%r12
  0x00007f8ab9136fe2: mov    0x20(%rsp),%r11
  0x00007f8ab9136fe7: mov    0x28(%rsp),%r10
  0x00007f8ab9136fec: mov    0x30(%rsp),%r9
  0x00007f8ab9136ff1: mov    0x38(%rsp),%r8
  0x00007f8ab9136ff6: mov    0x40(%rsp),%rdi
  0x00007f8ab9136ffb: mov    0x48(%rsp),%rsi
  0x00007f8ab9137000: mov    0x50(%rsp),%rbp
  0x00007f8ab9137005: mov    0x60(%rsp),%rbx
  0x00007f8ab913700a: mov    0x68(%rsp),%rdx
  0x00007f8ab913700f: mov    0x70(%rsp),%rcx
  0x00007f8ab9137014: mov    0x78(%rsp),%rax
  0x00007f8ab9137019: add    $0x80,%rsp
  0x00007f8ab9137020: add    $0x8,%rsp
  0x00007f8ab9137024: popfq  
  0x00007f8ab9137025: mov    %r13,%rsp
  0x00007f8ab9137028: pop    %rax
  0x00007f8ab9137029: mov    %rsp,%r13
  0x00007f8ab913702c: sub    $0x20,%rsp
  0x00007f8ab9137030: mov    %rax,(%rsp)
  0x00007f8ab9137034: mov    %rsi,0x10(%rsp)
  0x00007f8ab9137039: mov    %rdx,0x8(%rsp)
  0x00007f8ab913703e: mov    0x40(%rbx),%rcx
  0x00007f8ab9137042: jmpq   *%rcx

AHE@0x00007f8ac80eac18: 0xbb000000 i2c: 0x00007f8ab9137120 c2i: 0x00007f8ab9137238 c2iUV: 0x00007f8ab913720b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab9137238
  0x00007f8ab9137120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9137124: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913712e: cmp    %r11,%rax
  0x00007f8ab9137131: jbe    0x00007f8ab913714a
  0x00007f8ab9137137: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9137141: cmp    %r11,%rax
  0x00007f8ab9137144: jb     0x00007f8ab91371e7
  0x00007f8ab913714a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9137154: cmp    %r11,%rax
  0x00007f8ab9137157: jbe    0x00007f8ab9137170
  0x00007f8ab913715d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9137167: cmp    %r11,%rax
  0x00007f8ab913716a: jb     0x00007f8ab91371e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9137170: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9137175: sub    $0x80,%rsp
  0x00007f8ab913717c: mov    %rax,0x78(%rsp)
  0x00007f8ab9137181: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137186: mov    %rdx,0x68(%rsp)
  0x00007f8ab913718b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137190: mov    %rbp,0x50(%rsp)
  0x00007f8ab9137195: mov    %rsi,0x48(%rsp)
  0x00007f8ab913719a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913719f: mov    %r8,0x38(%rsp)
  0x00007f8ab91371a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91371a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91371ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91371b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91371b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91371bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91371c2: mov    %r15,(%rsp)
  0x00007f8ab91371c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91371d0: movabs $0x7f8ab9137170,%rsi
  0x00007f8ab91371da: mov    %rsp,%rdx
  0x00007f8ab91371dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91371e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91371e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91371e7: mov    %rsp,%r11
  0x00007f8ab91371ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91371ee: push   %rax
  0x00007f8ab91371ef: mov    %r11,%rax
  0x00007f8ab91371f2: mov    0x50(%rbx),%r11
  0x00007f8ab91371f6: mov    0x10(%rax),%rsi
  0x00007f8ab91371fa: mov    0x8(%rax),%rdx
  0x00007f8ab91371fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9137205: mov    %rbx,%rax
  0x00007f8ab9137208: jmpq   *%r11
  0x00007f8ab913720b: mov    0x8(%rsi),%ebx
  0x00007f8ab913720e: shl    $0x3,%rbx
  0x00007f8ab9137212: cmp    0x10(%rax),%rbx
  0x00007f8ab9137216: mov    0x8(%rax),%rbx
  0x00007f8ab913721a: je     0x00007f8ab9137225
  0x00007f8ab9137220: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137225: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913722d: je     0x00007f8ab9137328
  0x00007f8ab9137233: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137238: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137240: je     0x00007f8ab9137328
  0x00007f8ab9137246: mov    %rsp,%r13
  0x00007f8ab9137249: mov    (%rsp),%rax
  0x00007f8ab913724d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137251: pushfq 
  0x00007f8ab9137252: sub    $0x8,%rsp
  0x00007f8ab9137256: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913725b: sub    $0x80,%rsp
  0x00007f8ab9137262: mov    %rax,0x78(%rsp)
  0x00007f8ab9137267: mov    %rcx,0x70(%rsp)
  0x00007f8ab913726c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9137271: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137276: mov    %rbp,0x50(%rsp)
  0x00007f8ab913727b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9137280: mov    %rdi,0x40(%rsp)
  0x00007f8ab9137285: mov    %r8,0x38(%rsp)
  0x00007f8ab913728a: mov    %r9,0x30(%rsp)
  0x00007f8ab913728f: mov    %r10,0x28(%rsp)
  0x00007f8ab9137294: mov    %r11,0x20(%rsp)
  0x00007f8ab9137299: mov    %r12,0x18(%rsp)
  0x00007f8ab913729e: mov    %r13,0x10(%rsp)
  0x00007f8ab91372a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91372a8: mov    %r15,(%rsp)
  0x00007f8ab91372ac: sub    $0x200,%rsp
  0x00007f8ab91372b3: fxsave64 (%rsp)
  0x00007f8ab91372b8: mov    %rbx,%rdi
  0x00007f8ab91372bb: mov    %rax,%rsi
  0x00007f8ab91372be: callq  0x00007f8acef8bbca
  0x00007f8ab91372c3: fxrstor64 (%rsp)
  0x00007f8ab91372c8: add    $0x200,%rsp
  0x00007f8ab91372cf: mov    (%rsp),%r15
  0x00007f8ab91372d3: mov    0x8(%rsp),%r14
  0x00007f8ab91372d8: mov    0x10(%rsp),%r13
  0x00007f8ab91372dd: mov    0x18(%rsp),%r12
  0x00007f8ab91372e2: mov    0x20(%rsp),%r11
  0x00007f8ab91372e7: mov    0x28(%rsp),%r10
  0x00007f8ab91372ec: mov    0x30(%rsp),%r9
  0x00007f8ab91372f1: mov    0x38(%rsp),%r8
  0x00007f8ab91372f6: mov    0x40(%rsp),%rdi
  0x00007f8ab91372fb: mov    0x48(%rsp),%rsi
  0x00007f8ab9137300: mov    0x50(%rsp),%rbp
  0x00007f8ab9137305: mov    0x60(%rsp),%rbx
  0x00007f8ab913730a: mov    0x68(%rsp),%rdx
  0x00007f8ab913730f: mov    0x70(%rsp),%rcx
  0x00007f8ab9137314: mov    0x78(%rsp),%rax
  0x00007f8ab9137319: add    $0x80,%rsp
  0x00007f8ab9137320: add    $0x8,%rsp
  0x00007f8ab9137324: popfq  
  0x00007f8ab9137325: mov    %r13,%rsp
  0x00007f8ab9137328: pop    %rax
  0x00007f8ab9137329: mov    %rsp,%r13
  0x00007f8ab913732c: sub    $0x20,%rsp
  0x00007f8ab9137330: mov    %rax,(%rsp)
  0x00007f8ab9137334: mov    %rsi,0x10(%rsp)
  0x00007f8ab9137339: mov    %rdx,0x8(%rsp)
  0x00007f8ab913733e: mov    0x40(%rbx),%rcx
  0x00007f8ab9137342: jmpq   *%rcx

AHE@0x00007f8ac80eac60: 0xbbb00000 i2c: 0x00007f8ab9137420 c2i: 0x00007f8ab913753c c2iUV: 0x00007f8ab913750f
i2c argument handler #0 for: receiver ([Ljava/security/cert/Certificate;[Ljava/security/cert/Certificate;)Z (557 bytes generated)
c2i argument handler starts at 0x7f8ab913753c
  0x00007f8ab9137420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9137424: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913742e: cmp    %r11,%rax
  0x00007f8ab9137431: jbe    0x00007f8ab913744a
  0x00007f8ab9137437: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9137441: cmp    %r11,%rax
  0x00007f8ab9137444: jb     0x00007f8ab91374e7
  0x00007f8ab913744a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9137454: cmp    %r11,%rax
  0x00007f8ab9137457: jbe    0x00007f8ab9137470
  0x00007f8ab913745d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9137467: cmp    %r11,%rax
  0x00007f8ab913746a: jb     0x00007f8ab91374e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9137470: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9137475: sub    $0x80,%rsp
  0x00007f8ab913747c: mov    %rax,0x78(%rsp)
  0x00007f8ab9137481: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137486: mov    %rdx,0x68(%rsp)
  0x00007f8ab913748b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137490: mov    %rbp,0x50(%rsp)
  0x00007f8ab9137495: mov    %rsi,0x48(%rsp)
  0x00007f8ab913749a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913749f: mov    %r8,0x38(%rsp)
  0x00007f8ab91374a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91374a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91374ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91374b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91374b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91374bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91374c2: mov    %r15,(%rsp)
  0x00007f8ab91374c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91374d0: movabs $0x7f8ab9137470,%rsi
  0x00007f8ab91374da: mov    %rsp,%rdx
  0x00007f8ab91374dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91374e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91374e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91374e7: mov    %rsp,%r11
  0x00007f8ab91374ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91374ee: push   %rax
  0x00007f8ab91374ef: mov    %r11,%rax
  0x00007f8ab91374f2: mov    0x50(%rbx),%r11
  0x00007f8ab91374f6: mov    0x18(%rax),%rsi
  0x00007f8ab91374fa: mov    0x10(%rax),%rdx
  0x00007f8ab91374fe: mov    0x8(%rax),%rcx
  0x00007f8ab9137502: mov    %rbx,0x258(%r15)
  0x00007f8ab9137509: mov    %rbx,%rax
  0x00007f8ab913750c: jmpq   *%r11
  0x00007f8ab913750f: mov    0x8(%rsi),%ebx
  0x00007f8ab9137512: shl    $0x3,%rbx
  0x00007f8ab9137516: cmp    0x10(%rax),%rbx
  0x00007f8ab913751a: mov    0x8(%rax),%rbx
  0x00007f8ab913751e: je     0x00007f8ab9137529
  0x00007f8ab9137524: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137529: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137531: je     0x00007f8ab913762c
  0x00007f8ab9137537: jmpq   0x00007f8ab9105c40
  0x00007f8ab913753c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137544: je     0x00007f8ab913762c
  0x00007f8ab913754a: mov    %rsp,%r13
  0x00007f8ab913754d: mov    (%rsp),%rax
  0x00007f8ab9137551: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137555: pushfq 
  0x00007f8ab9137556: sub    $0x8,%rsp
  0x00007f8ab913755a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913755f: sub    $0x80,%rsp
  0x00007f8ab9137566: mov    %rax,0x78(%rsp)
  0x00007f8ab913756b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137570: mov    %rdx,0x68(%rsp)
  0x00007f8ab9137575: mov    %rbx,0x60(%rsp)
  0x00007f8ab913757a: mov    %rbp,0x50(%rsp)
  0x00007f8ab913757f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9137584: mov    %rdi,0x40(%rsp)
  0x00007f8ab9137589: mov    %r8,0x38(%rsp)
  0x00007f8ab913758e: mov    %r9,0x30(%rsp)
  0x00007f8ab9137593: mov    %r10,0x28(%rsp)
  0x00007f8ab9137598: mov    %r11,0x20(%rsp)
  0x00007f8ab913759d: mov    %r12,0x18(%rsp)
  0x00007f8ab91375a2: mov    %r13,0x10(%rsp)
  0x00007f8ab91375a7: mov    %r14,0x8(%rsp)
  0x00007f8ab91375ac: mov    %r15,(%rsp)
  0x00007f8ab91375b0: sub    $0x200,%rsp
  0x00007f8ab91375b7: fxsave64 (%rsp)
  0x00007f8ab91375bc: mov    %rbx,%rdi
  0x00007f8ab91375bf: mov    %rax,%rsi
  0x00007f8ab91375c2: callq  0x00007f8acef8bbca
  0x00007f8ab91375c7: fxrstor64 (%rsp)
  0x00007f8ab91375cc: add    $0x200,%rsp
  0x00007f8ab91375d3: mov    (%rsp),%r15
  0x00007f8ab91375d7: mov    0x8(%rsp),%r14
  0x00007f8ab91375dc: mov    0x10(%rsp),%r13
  0x00007f8ab91375e1: mov    0x18(%rsp),%r12
  0x00007f8ab91375e6: mov    0x20(%rsp),%r11
  0x00007f8ab91375eb: mov    0x28(%rsp),%r10
  0x00007f8ab91375f0: mov    0x30(%rsp),%r9
  0x00007f8ab91375f5: mov    0x38(%rsp),%r8
  0x00007f8ab91375fa: mov    0x40(%rsp),%rdi
  0x00007f8ab91375ff: mov    0x48(%rsp),%rsi
  0x00007f8ab9137604: mov    0x50(%rsp),%rbp
  0x00007f8ab9137609: mov    0x60(%rsp),%rbx
  0x00007f8ab913760e: mov    0x68(%rsp),%rdx
  0x00007f8ab9137613: mov    0x70(%rsp),%rcx
  0x00007f8ab9137618: mov    0x78(%rsp),%rax
  0x00007f8ab913761d: add    $0x80,%rsp
  0x00007f8ab9137624: add    $0x8,%rsp
  0x00007f8ab9137628: popfq  
  0x00007f8ab9137629: mov    %r13,%rsp
  0x00007f8ab913762c: pop    %rax
  0x00007f8ab913762d: mov    %rsp,%r13
  0x00007f8ab9137630: sub    $0x20,%rsp
  0x00007f8ab9137634: mov    %rax,(%rsp)
  0x00007f8ab9137638: mov    %rsi,0x18(%rsp)
  0x00007f8ab913763d: mov    %rdx,0x10(%rsp)
  0x00007f8ab9137642: mov    %rcx,0x8(%rsp)
  0x00007f8ab9137647: mov    0x40(%rbx),%rcx
  0x00007f8ab913764b: jmpq   *%rcx

AHE@0x00007f8ac80eaca8: 0xbbb00000 i2c: 0x00007f8ab9137720 c2i: 0x00007f8ab913783c c2iUV: 0x00007f8ab913780f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/security/CodeSource;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab913783c
  0x00007f8ab9137720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9137724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913772e: cmp    %r11,%rax
  0x00007f8ab9137731: jbe    0x00007f8ab913774a
  0x00007f8ab9137737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9137741: cmp    %r11,%rax
  0x00007f8ab9137744: jb     0x00007f8ab91377e7
  0x00007f8ab913774a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9137754: cmp    %r11,%rax
  0x00007f8ab9137757: jbe    0x00007f8ab9137770
  0x00007f8ab913775d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9137767: cmp    %r11,%rax
  0x00007f8ab913776a: jb     0x00007f8ab91377e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9137770: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9137775: sub    $0x80,%rsp
  0x00007f8ab913777c: mov    %rax,0x78(%rsp)
  0x00007f8ab9137781: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137786: mov    %rdx,0x68(%rsp)
  0x00007f8ab913778b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137790: mov    %rbp,0x50(%rsp)
  0x00007f8ab9137795: mov    %rsi,0x48(%rsp)
  0x00007f8ab913779a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913779f: mov    %r8,0x38(%rsp)
  0x00007f8ab91377a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91377a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91377ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91377b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91377b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91377bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91377c2: mov    %r15,(%rsp)
  0x00007f8ab91377c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91377d0: movabs $0x7f8ab9137770,%rsi
  0x00007f8ab91377da: mov    %rsp,%rdx
  0x00007f8ab91377dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91377e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91377e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91377e7: mov    %rsp,%r11
  0x00007f8ab91377ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91377ee: push   %rax
  0x00007f8ab91377ef: mov    %r11,%rax
  0x00007f8ab91377f2: mov    0x50(%rbx),%r11
  0x00007f8ab91377f6: mov    0x18(%rax),%rsi
  0x00007f8ab91377fa: mov    0x10(%rax),%rdx
  0x00007f8ab91377fe: mov    0x8(%rax),%rcx
  0x00007f8ab9137802: mov    %rbx,0x258(%r15)
  0x00007f8ab9137809: mov    %rbx,%rax
  0x00007f8ab913780c: jmpq   *%r11
  0x00007f8ab913780f: mov    0x8(%rsi),%ebx
  0x00007f8ab9137812: shl    $0x3,%rbx
  0x00007f8ab9137816: cmp    0x10(%rax),%rbx
  0x00007f8ab913781a: mov    0x8(%rax),%rbx
  0x00007f8ab913781e: je     0x00007f8ab9137829
  0x00007f8ab9137824: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137829: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137831: je     0x00007f8ab913792c
  0x00007f8ab9137837: jmpq   0x00007f8ab9105c40
  0x00007f8ab913783c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137844: je     0x00007f8ab913792c
  0x00007f8ab913784a: mov    %rsp,%r13
  0x00007f8ab913784d: mov    (%rsp),%rax
  0x00007f8ab9137851: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137855: pushfq 
  0x00007f8ab9137856: sub    $0x8,%rsp
  0x00007f8ab913785a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913785f: sub    $0x80,%rsp
  0x00007f8ab9137866: mov    %rax,0x78(%rsp)
  0x00007f8ab913786b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137870: mov    %rdx,0x68(%rsp)
  0x00007f8ab9137875: mov    %rbx,0x60(%rsp)
  0x00007f8ab913787a: mov    %rbp,0x50(%rsp)
  0x00007f8ab913787f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9137884: mov    %rdi,0x40(%rsp)
  0x00007f8ab9137889: mov    %r8,0x38(%rsp)
  0x00007f8ab913788e: mov    %r9,0x30(%rsp)
  0x00007f8ab9137893: mov    %r10,0x28(%rsp)
  0x00007f8ab9137898: mov    %r11,0x20(%rsp)
  0x00007f8ab913789d: mov    %r12,0x18(%rsp)
  0x00007f8ab91378a2: mov    %r13,0x10(%rsp)
  0x00007f8ab91378a7: mov    %r14,0x8(%rsp)
  0x00007f8ab91378ac: mov    %r15,(%rsp)
  0x00007f8ab91378b0: sub    $0x200,%rsp
  0x00007f8ab91378b7: fxsave64 (%rsp)
  0x00007f8ab91378bc: mov    %rbx,%rdi
  0x00007f8ab91378bf: mov    %rax,%rsi
  0x00007f8ab91378c2: callq  0x00007f8acef8bbca
  0x00007f8ab91378c7: fxrstor64 (%rsp)
  0x00007f8ab91378cc: add    $0x200,%rsp
  0x00007f8ab91378d3: mov    (%rsp),%r15
  0x00007f8ab91378d7: mov    0x8(%rsp),%r14
  0x00007f8ab91378dc: mov    0x10(%rsp),%r13
  0x00007f8ab91378e1: mov    0x18(%rsp),%r12
  0x00007f8ab91378e6: mov    0x20(%rsp),%r11
  0x00007f8ab91378eb: mov    0x28(%rsp),%r10
  0x00007f8ab91378f0: mov    0x30(%rsp),%r9
  0x00007f8ab91378f5: mov    0x38(%rsp),%r8
  0x00007f8ab91378fa: mov    0x40(%rsp),%rdi
  0x00007f8ab91378ff: mov    0x48(%rsp),%rsi
  0x00007f8ab9137904: mov    0x50(%rsp),%rbp
  0x00007f8ab9137909: mov    0x60(%rsp),%rbx
  0x00007f8ab913790e: mov    0x68(%rsp),%rdx
  0x00007f8ab9137913: mov    0x70(%rsp),%rcx
  0x00007f8ab9137918: mov    0x78(%rsp),%rax
  0x00007f8ab913791d: add    $0x80,%rsp
  0x00007f8ab9137924: add    $0x8,%rsp
  0x00007f8ab9137928: popfq  
  0x00007f8ab9137929: mov    %r13,%rsp
  0x00007f8ab913792c: pop    %rax
  0x00007f8ab913792d: mov    %rsp,%r13
  0x00007f8ab9137930: sub    $0x20,%rsp
  0x00007f8ab9137934: mov    %rax,(%rsp)
  0x00007f8ab9137938: mov    %rsi,0x18(%rsp)
  0x00007f8ab913793d: mov    %rdx,0x10(%rsp)
  0x00007f8ab9137942: mov    %rcx,0x8(%rsp)
  0x00007f8ab9137947: mov    0x40(%rbx),%rcx
  0x00007f8ab913794b: jmpq   *%rcx

AHE@0x00007f8ac80eacf0: 0xbb000000 i2c: 0x00007f8ab9137a20 c2i: 0x00007f8ab9137b38 c2iUV: 0x00007f8ab9137b0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab9137b38
  0x00007f8ab9137a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9137a24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9137a2e: cmp    %r11,%rax
  0x00007f8ab9137a31: jbe    0x00007f8ab9137a4a
  0x00007f8ab9137a37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9137a41: cmp    %r11,%rax
  0x00007f8ab9137a44: jb     0x00007f8ab9137ae7
  0x00007f8ab9137a4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9137a54: cmp    %r11,%rax
  0x00007f8ab9137a57: jbe    0x00007f8ab9137a70
  0x00007f8ab9137a5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9137a67: cmp    %r11,%rax
  0x00007f8ab9137a6a: jb     0x00007f8ab9137ae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9137a70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9137a75: sub    $0x80,%rsp
  0x00007f8ab9137a7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9137a81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137a86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9137a8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137a90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9137a95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9137a9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9137a9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9137aa4: mov    %r9,0x30(%rsp)
  0x00007f8ab9137aa9: mov    %r10,0x28(%rsp)
  0x00007f8ab9137aae: mov    %r11,0x20(%rsp)
  0x00007f8ab9137ab3: mov    %r12,0x18(%rsp)
  0x00007f8ab9137ab8: mov    %r13,0x10(%rsp)
  0x00007f8ab9137abd: mov    %r14,0x8(%rsp)
  0x00007f8ab9137ac2: mov    %r15,(%rsp)
  0x00007f8ab9137ac6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9137ad0: movabs $0x7f8ab9137a70,%rsi
  0x00007f8ab9137ada: mov    %rsp,%rdx
  0x00007f8ab9137add: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137ae1: callq  0x00007f8aceddb9fa
  0x00007f8ab9137ae6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9137ae7: mov    %rsp,%r11
  0x00007f8ab9137aea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137aee: push   %rax
  0x00007f8ab9137aef: mov    %r11,%rax
  0x00007f8ab9137af2: mov    0x50(%rbx),%r11
  0x00007f8ab9137af6: mov    0x10(%rax),%rsi
  0x00007f8ab9137afa: mov    0x8(%rax),%rdx
  0x00007f8ab9137afe: mov    %rbx,0x258(%r15)
  0x00007f8ab9137b05: mov    %rbx,%rax
  0x00007f8ab9137b08: jmpq   *%r11
  0x00007f8ab9137b0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9137b0e: shl    $0x3,%rbx
  0x00007f8ab9137b12: cmp    0x10(%rax),%rbx
  0x00007f8ab9137b16: mov    0x8(%rax),%rbx
  0x00007f8ab9137b1a: je     0x00007f8ab9137b25
  0x00007f8ab9137b20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137b25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137b2d: je     0x00007f8ab9137c28
  0x00007f8ab9137b33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137b38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137b40: je     0x00007f8ab9137c28
  0x00007f8ab9137b46: mov    %rsp,%r13
  0x00007f8ab9137b49: mov    (%rsp),%rax
  0x00007f8ab9137b4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137b51: pushfq 
  0x00007f8ab9137b52: sub    $0x8,%rsp
  0x00007f8ab9137b56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9137b5b: sub    $0x80,%rsp
  0x00007f8ab9137b62: mov    %rax,0x78(%rsp)
  0x00007f8ab9137b67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137b6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9137b71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137b76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9137b7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9137b80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9137b85: mov    %r8,0x38(%rsp)
  0x00007f8ab9137b8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9137b8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9137b94: mov    %r11,0x20(%rsp)
  0x00007f8ab9137b99: mov    %r12,0x18(%rsp)
  0x00007f8ab9137b9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9137ba3: mov    %r14,0x8(%rsp)
  0x00007f8ab9137ba8: mov    %r15,(%rsp)
  0x00007f8ab9137bac: sub    $0x200,%rsp
  0x00007f8ab9137bb3: fxsave64 (%rsp)
  0x00007f8ab9137bb8: mov    %rbx,%rdi
  0x00007f8ab9137bbb: mov    %rax,%rsi
  0x00007f8ab9137bbe: callq  0x00007f8acef8bbca
  0x00007f8ab9137bc3: fxrstor64 (%rsp)
  0x00007f8ab9137bc8: add    $0x200,%rsp
  0x00007f8ab9137bcf: mov    (%rsp),%r15
  0x00007f8ab9137bd3: mov    0x8(%rsp),%r14
  0x00007f8ab9137bd8: mov    0x10(%rsp),%r13
  0x00007f8ab9137bdd: mov    0x18(%rsp),%r12
  0x00007f8ab9137be2: mov    0x20(%rsp),%r11
  0x00007f8ab9137be7: mov    0x28(%rsp),%r10
  0x00007f8ab9137bec: mov    0x30(%rsp),%r9
  0x00007f8ab9137bf1: mov    0x38(%rsp),%r8
  0x00007f8ab9137bf6: mov    0x40(%rsp),%rdi
  0x00007f8ab9137bfb: mov    0x48(%rsp),%rsi
  0x00007f8ab9137c00: mov    0x50(%rsp),%rbp
  0x00007f8ab9137c05: mov    0x60(%rsp),%rbx
  0x00007f8ab9137c0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9137c0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9137c14: mov    0x78(%rsp),%rax
  0x00007f8ab9137c19: add    $0x80,%rsp
  0x00007f8ab9137c20: add    $0x8,%rsp
  0x00007f8ab9137c24: popfq  
  0x00007f8ab9137c25: mov    %r13,%rsp
  0x00007f8ab9137c28: pop    %rax
  0x00007f8ab9137c29: mov    %rsp,%r13
  0x00007f8ab9137c2c: sub    $0x20,%rsp
  0x00007f8ab9137c30: mov    %rax,(%rsp)
  0x00007f8ab9137c34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9137c39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9137c3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9137c42: jmpq   *%rcx

AHE@0x00007f8ac80ead38: 0xbbbaabb0 i2c: 0x00007f8ab9137d20 c2i: 0x00007f8ab9137e55 c2iUV: 0x00007f8ab9137e28
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; (607 bytes generated)
c2i argument handler starts at 0x7f8ab9137e55
  0x00007f8ab9137d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9137d24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9137d2e: cmp    %r11,%rax
  0x00007f8ab9137d31: jbe    0x00007f8ab9137d4a
  0x00007f8ab9137d37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9137d41: cmp    %r11,%rax
  0x00007f8ab9137d44: jb     0x00007f8ab9137de7
  0x00007f8ab9137d4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9137d54: cmp    %r11,%rax
  0x00007f8ab9137d57: jbe    0x00007f8ab9137d70
  0x00007f8ab9137d5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9137d67: cmp    %r11,%rax
  0x00007f8ab9137d6a: jb     0x00007f8ab9137de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9137d70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9137d75: sub    $0x80,%rsp
  0x00007f8ab9137d7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9137d81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137d86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9137d8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137d90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9137d95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9137d9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9137d9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9137da4: mov    %r9,0x30(%rsp)
  0x00007f8ab9137da9: mov    %r10,0x28(%rsp)
  0x00007f8ab9137dae: mov    %r11,0x20(%rsp)
  0x00007f8ab9137db3: mov    %r12,0x18(%rsp)
  0x00007f8ab9137db8: mov    %r13,0x10(%rsp)
  0x00007f8ab9137dbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9137dc2: mov    %r15,(%rsp)
  0x00007f8ab9137dc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9137dd0: movabs $0x7f8ab9137d70,%rsi
  0x00007f8ab9137dda: mov    %rsp,%rdx
  0x00007f8ab9137ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137de1: callq  0x00007f8aceddb9fa
  0x00007f8ab9137de6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9137de7: mov    %rsp,%r11
  0x00007f8ab9137dea: sub    $0x10,%rsp
  0x00007f8ab9137dee: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137df2: push   %rax
  0x00007f8ab9137df3: mov    %r11,%rax
  0x00007f8ab9137df6: mov    0x50(%rbx),%r11
  0x00007f8ab9137dfa: mov    0x38(%rax),%rsi
  0x00007f8ab9137dfe: mov    0x30(%rax),%rdx
  0x00007f8ab9137e02: mov    0x28(%rax),%rcx
  0x00007f8ab9137e06: mov    0x20(%rax),%r8d
  0x00007f8ab9137e0a: mov    0x18(%rax),%r9d
  0x00007f8ab9137e0e: mov    0x10(%rax),%rdi
  0x00007f8ab9137e12: mov    0x8(%rax),%r13
  0x00007f8ab9137e16: mov    %r13,0x8(%rsp)
  0x00007f8ab9137e1b: mov    %rbx,0x258(%r15)
  0x00007f8ab9137e22: mov    %rbx,%rax
  0x00007f8ab9137e25: jmpq   *%r11
  0x00007f8ab9137e28: mov    0x8(%rsi),%ebx
  0x00007f8ab9137e2b: shl    $0x3,%rbx
  0x00007f8ab9137e2f: cmp    0x10(%rax),%rbx
  0x00007f8ab9137e33: mov    0x8(%rax),%rbx
  0x00007f8ab9137e37: je     0x00007f8ab9137e42
  0x00007f8ab9137e3d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137e42: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137e4a: je     0x00007f8ab9137f45
  0x00007f8ab9137e50: jmpq   0x00007f8ab9105c40
  0x00007f8ab9137e55: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9137e5d: je     0x00007f8ab9137f45
  0x00007f8ab9137e63: mov    %rsp,%r13
  0x00007f8ab9137e66: mov    (%rsp),%rax
  0x00007f8ab9137e6a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9137e6e: pushfq 
  0x00007f8ab9137e6f: sub    $0x8,%rsp
  0x00007f8ab9137e73: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9137e78: sub    $0x80,%rsp
  0x00007f8ab9137e7f: mov    %rax,0x78(%rsp)
  0x00007f8ab9137e84: mov    %rcx,0x70(%rsp)
  0x00007f8ab9137e89: mov    %rdx,0x68(%rsp)
  0x00007f8ab9137e8e: mov    %rbx,0x60(%rsp)
  0x00007f8ab9137e93: mov    %rbp,0x50(%rsp)
  0x00007f8ab9137e98: mov    %rsi,0x48(%rsp)
  0x00007f8ab9137e9d: mov    %rdi,0x40(%rsp)
  0x00007f8ab9137ea2: mov    %r8,0x38(%rsp)
  0x00007f8ab9137ea7: mov    %r9,0x30(%rsp)
  0x00007f8ab9137eac: mov    %r10,0x28(%rsp)
  0x00007f8ab9137eb1: mov    %r11,0x20(%rsp)
  0x00007f8ab9137eb6: mov    %r12,0x18(%rsp)
  0x00007f8ab9137ebb: mov    %r13,0x10(%rsp)
  0x00007f8ab9137ec0: mov    %r14,0x8(%rsp)
  0x00007f8ab9137ec5: mov    %r15,(%rsp)
  0x00007f8ab9137ec9: sub    $0x200,%rsp
  0x00007f8ab9137ed0: fxsave64 (%rsp)
  0x00007f8ab9137ed5: mov    %rbx,%rdi
  0x00007f8ab9137ed8: mov    %rax,%rsi
  0x00007f8ab9137edb: callq  0x00007f8acef8bbca
  0x00007f8ab9137ee0: fxrstor64 (%rsp)
  0x00007f8ab9137ee5: add    $0x200,%rsp
  0x00007f8ab9137eec: mov    (%rsp),%r15
  0x00007f8ab9137ef0: mov    0x8(%rsp),%r14
  0x00007f8ab9137ef5: mov    0x10(%rsp),%r13
  0x00007f8ab9137efa: mov    0x18(%rsp),%r12
  0x00007f8ab9137eff: mov    0x20(%rsp),%r11
  0x00007f8ab9137f04: mov    0x28(%rsp),%r10
  0x00007f8ab9137f09: mov    0x30(%rsp),%r9
  0x00007f8ab9137f0e: mov    0x38(%rsp),%r8
  0x00007f8ab9137f13: mov    0x40(%rsp),%rdi
  0x00007f8ab9137f18: mov    0x48(%rsp),%rsi
  0x00007f8ab9137f1d: mov    0x50(%rsp),%rbp
  0x00007f8ab9137f22: mov    0x60(%rsp),%rbx
  0x00007f8ab9137f27: mov    0x68(%rsp),%rdx
  0x00007f8ab9137f2c: mov    0x70(%rsp),%rcx
  0x00007f8ab9137f31: mov    0x78(%rsp),%rax
  0x00007f8ab9137f36: add    $0x80,%rsp
  0x00007f8ab9137f3d: add    $0x8,%rsp
  0x00007f8ab9137f41: popfq  
  0x00007f8ab9137f42: mov    %r13,%rsp
  0x00007f8ab9137f45: pop    %rax
  0x00007f8ab9137f46: mov    %rsp,%r13
  0x00007f8ab9137f49: sub    $0x40,%rsp
  0x00007f8ab9137f4d: mov    %rax,(%rsp)
  0x00007f8ab9137f51: mov    %rsi,0x38(%rsp)
  0x00007f8ab9137f56: mov    %rdx,0x30(%rsp)
  0x00007f8ab9137f5b: mov    %rcx,0x28(%rsp)
  0x00007f8ab9137f60: mov    %r8d,0x20(%rsp)
  0x00007f8ab9137f65: mov    %r9d,0x18(%rsp)
  0x00007f8ab9137f6a: mov    %rdi,0x10(%rsp)
  0x00007f8ab9137f6f: mov    0x40(%rsp),%rax
  0x00007f8ab9137f74: mov    %rax,0x8(%rsp)
  0x00007f8ab9137f79: mov    0x40(%rbx),%rcx
  0x00007f8ab9137f7d: jmpq   *%rcx

AHE@0x00007f8ac80ead80: 0xbbbaabb0 i2c: 0x00007f8ab9138020 c2i: 0x00007f8ab9138155 c2iUV: 0x00007f8ab9138128
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; (607 bytes generated)
c2i argument handler starts at 0x7f8ab9138155
  0x00007f8ab9138020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9138024: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913802e: cmp    %r11,%rax
  0x00007f8ab9138031: jbe    0x00007f8ab913804a
  0x00007f8ab9138037: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9138041: cmp    %r11,%rax
  0x00007f8ab9138044: jb     0x00007f8ab91380e7
  0x00007f8ab913804a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9138054: cmp    %r11,%rax
  0x00007f8ab9138057: jbe    0x00007f8ab9138070
  0x00007f8ab913805d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9138067: cmp    %r11,%rax
  0x00007f8ab913806a: jb     0x00007f8ab91380e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9138070: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138075: sub    $0x80,%rsp
  0x00007f8ab913807c: mov    %rax,0x78(%rsp)
  0x00007f8ab9138081: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138086: mov    %rdx,0x68(%rsp)
  0x00007f8ab913808b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138090: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138095: mov    %rsi,0x48(%rsp)
  0x00007f8ab913809a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913809f: mov    %r8,0x38(%rsp)
  0x00007f8ab91380a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91380a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91380ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91380b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91380b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91380bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91380c2: mov    %r15,(%rsp)
  0x00007f8ab91380c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91380d0: movabs $0x7f8ab9138070,%rsi
  0x00007f8ab91380da: mov    %rsp,%rdx
  0x00007f8ab91380dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91380e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91380e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91380e7: mov    %rsp,%r11
  0x00007f8ab91380ea: sub    $0x10,%rsp
  0x00007f8ab91380ee: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91380f2: push   %rax
  0x00007f8ab91380f3: mov    %r11,%rax
  0x00007f8ab91380f6: mov    0x50(%rbx),%r11
  0x00007f8ab91380fa: mov    0x38(%rax),%rsi
  0x00007f8ab91380fe: mov    0x30(%rax),%rdx
  0x00007f8ab9138102: mov    0x28(%rax),%rcx
  0x00007f8ab9138106: mov    0x20(%rax),%r8d
  0x00007f8ab913810a: mov    0x18(%rax),%r9d
  0x00007f8ab913810e: mov    0x10(%rax),%rdi
  0x00007f8ab9138112: mov    0x8(%rax),%r13
  0x00007f8ab9138116: mov    %r13,0x8(%rsp)
  0x00007f8ab913811b: mov    %rbx,0x258(%r15)
  0x00007f8ab9138122: mov    %rbx,%rax
  0x00007f8ab9138125: jmpq   *%r11
  0x00007f8ab9138128: mov    0x8(%rsi),%ebx
  0x00007f8ab913812b: shl    $0x3,%rbx
  0x00007f8ab913812f: cmp    0x10(%rax),%rbx
  0x00007f8ab9138133: mov    0x8(%rax),%rbx
  0x00007f8ab9138137: je     0x00007f8ab9138142
  0x00007f8ab913813d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138142: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913814a: je     0x00007f8ab9138245
  0x00007f8ab9138150: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138155: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913815d: je     0x00007f8ab9138245
  0x00007f8ab9138163: mov    %rsp,%r13
  0x00007f8ab9138166: mov    (%rsp),%rax
  0x00007f8ab913816a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913816e: pushfq 
  0x00007f8ab913816f: sub    $0x8,%rsp
  0x00007f8ab9138173: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138178: sub    $0x80,%rsp
  0x00007f8ab913817f: mov    %rax,0x78(%rsp)
  0x00007f8ab9138184: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138189: mov    %rdx,0x68(%rsp)
  0x00007f8ab913818e: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138193: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138198: mov    %rsi,0x48(%rsp)
  0x00007f8ab913819d: mov    %rdi,0x40(%rsp)
  0x00007f8ab91381a2: mov    %r8,0x38(%rsp)
  0x00007f8ab91381a7: mov    %r9,0x30(%rsp)
  0x00007f8ab91381ac: mov    %r10,0x28(%rsp)
  0x00007f8ab91381b1: mov    %r11,0x20(%rsp)
  0x00007f8ab91381b6: mov    %r12,0x18(%rsp)
  0x00007f8ab91381bb: mov    %r13,0x10(%rsp)
  0x00007f8ab91381c0: mov    %r14,0x8(%rsp)
  0x00007f8ab91381c5: mov    %r15,(%rsp)
  0x00007f8ab91381c9: sub    $0x200,%rsp
  0x00007f8ab91381d0: fxsave64 (%rsp)
  0x00007f8ab91381d5: mov    %rbx,%rdi
  0x00007f8ab91381d8: mov    %rax,%rsi
  0x00007f8ab91381db: callq  0x00007f8acef8bbca
  0x00007f8ab91381e0: fxrstor64 (%rsp)
  0x00007f8ab91381e5: add    $0x200,%rsp
  0x00007f8ab91381ec: mov    (%rsp),%r15
  0x00007f8ab91381f0: mov    0x8(%rsp),%r14
  0x00007f8ab91381f5: mov    0x10(%rsp),%r13
  0x00007f8ab91381fa: mov    0x18(%rsp),%r12
  0x00007f8ab91381ff: mov    0x20(%rsp),%r11
  0x00007f8ab9138204: mov    0x28(%rsp),%r10
  0x00007f8ab9138209: mov    0x30(%rsp),%r9
  0x00007f8ab913820e: mov    0x38(%rsp),%r8
  0x00007f8ab9138213: mov    0x40(%rsp),%rdi
  0x00007f8ab9138218: mov    0x48(%rsp),%rsi
  0x00007f8ab913821d: mov    0x50(%rsp),%rbp
  0x00007f8ab9138222: mov    0x60(%rsp),%rbx
  0x00007f8ab9138227: mov    0x68(%rsp),%rdx
  0x00007f8ab913822c: mov    0x70(%rsp),%rcx
  0x00007f8ab9138231: mov    0x78(%rsp),%rax
  0x00007f8ab9138236: add    $0x80,%rsp
  0x00007f8ab913823d: add    $0x8,%rsp
  0x00007f8ab9138241: popfq  
  0x00007f8ab9138242: mov    %r13,%rsp
  0x00007f8ab9138245: pop    %rax
  0x00007f8ab9138246: mov    %rsp,%r13
  0x00007f8ab9138249: sub    $0x40,%rsp
  0x00007f8ab913824d: mov    %rax,(%rsp)
  0x00007f8ab9138251: mov    %rsi,0x38(%rsp)
  0x00007f8ab9138256: mov    %rdx,0x30(%rsp)
  0x00007f8ab913825b: mov    %rcx,0x28(%rsp)
  0x00007f8ab9138260: mov    %r8d,0x20(%rsp)
  0x00007f8ab9138265: mov    %r9d,0x18(%rsp)
  0x00007f8ab913826a: mov    %rdi,0x10(%rsp)
  0x00007f8ab913826f: mov    0x40(%rsp),%rax
  0x00007f8ab9138274: mov    %rax,0x8(%rsp)
  0x00007f8ab9138279: mov    0x40(%rbx),%rcx
  0x00007f8ab913827d: jmpq   *%rcx

AHE@0x00007f8ac80eadc8: 0xbbbaab00 i2c: 0x00007f8ab9138320 c2i: 0x00007f8ab9138448 c2iUV: 0x00007f8ab913841b
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; (584 bytes generated)
c2i argument handler starts at 0x7f8ab9138448
  0x00007f8ab9138320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9138324: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913832e: cmp    %r11,%rax
  0x00007f8ab9138331: jbe    0x00007f8ab913834a
  0x00007f8ab9138337: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9138341: cmp    %r11,%rax
  0x00007f8ab9138344: jb     0x00007f8ab91383e7
  0x00007f8ab913834a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9138354: cmp    %r11,%rax
  0x00007f8ab9138357: jbe    0x00007f8ab9138370
  0x00007f8ab913835d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9138367: cmp    %r11,%rax
  0x00007f8ab913836a: jb     0x00007f8ab91383e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9138370: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138375: sub    $0x80,%rsp
  0x00007f8ab913837c: mov    %rax,0x78(%rsp)
  0x00007f8ab9138381: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138386: mov    %rdx,0x68(%rsp)
  0x00007f8ab913838b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138390: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138395: mov    %rsi,0x48(%rsp)
  0x00007f8ab913839a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913839f: mov    %r8,0x38(%rsp)
  0x00007f8ab91383a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91383a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91383ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91383b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91383b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91383bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91383c2: mov    %r15,(%rsp)
  0x00007f8ab91383c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91383d0: movabs $0x7f8ab9138370,%rsi
  0x00007f8ab91383da: mov    %rsp,%rdx
  0x00007f8ab91383dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91383e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91383e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91383e7: mov    %rsp,%r11
  0x00007f8ab91383ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91383ee: push   %rax
  0x00007f8ab91383ef: mov    %r11,%rax
  0x00007f8ab91383f2: mov    0x50(%rbx),%r11
  0x00007f8ab91383f6: mov    0x30(%rax),%rsi
  0x00007f8ab91383fa: mov    0x28(%rax),%rdx
  0x00007f8ab91383fe: mov    0x20(%rax),%rcx
  0x00007f8ab9138402: mov    0x18(%rax),%r8d
  0x00007f8ab9138406: mov    0x10(%rax),%r9d
  0x00007f8ab913840a: mov    0x8(%rax),%rdi
  0x00007f8ab913840e: mov    %rbx,0x258(%r15)
  0x00007f8ab9138415: mov    %rbx,%rax
  0x00007f8ab9138418: jmpq   *%r11
  0x00007f8ab913841b: mov    0x8(%rsi),%ebx
  0x00007f8ab913841e: shl    $0x3,%rbx
  0x00007f8ab9138422: cmp    0x10(%rax),%rbx
  0x00007f8ab9138426: mov    0x8(%rax),%rbx
  0x00007f8ab913842a: je     0x00007f8ab9138435
  0x00007f8ab9138430: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138435: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913843d: je     0x00007f8ab9138538
  0x00007f8ab9138443: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138448: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9138450: je     0x00007f8ab9138538
  0x00007f8ab9138456: mov    %rsp,%r13
  0x00007f8ab9138459: mov    (%rsp),%rax
  0x00007f8ab913845d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138461: pushfq 
  0x00007f8ab9138462: sub    $0x8,%rsp
  0x00007f8ab9138466: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913846b: sub    $0x80,%rsp
  0x00007f8ab9138472: mov    %rax,0x78(%rsp)
  0x00007f8ab9138477: mov    %rcx,0x70(%rsp)
  0x00007f8ab913847c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9138481: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138486: mov    %rbp,0x50(%rsp)
  0x00007f8ab913848b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9138490: mov    %rdi,0x40(%rsp)
  0x00007f8ab9138495: mov    %r8,0x38(%rsp)
  0x00007f8ab913849a: mov    %r9,0x30(%rsp)
  0x00007f8ab913849f: mov    %r10,0x28(%rsp)
  0x00007f8ab91384a4: mov    %r11,0x20(%rsp)
  0x00007f8ab91384a9: mov    %r12,0x18(%rsp)
  0x00007f8ab91384ae: mov    %r13,0x10(%rsp)
  0x00007f8ab91384b3: mov    %r14,0x8(%rsp)
  0x00007f8ab91384b8: mov    %r15,(%rsp)
  0x00007f8ab91384bc: sub    $0x200,%rsp
  0x00007f8ab91384c3: fxsave64 (%rsp)
  0x00007f8ab91384c8: mov    %rbx,%rdi
  0x00007f8ab91384cb: mov    %rax,%rsi
  0x00007f8ab91384ce: callq  0x00007f8acef8bbca
  0x00007f8ab91384d3: fxrstor64 (%rsp)
  0x00007f8ab91384d8: add    $0x200,%rsp
  0x00007f8ab91384df: mov    (%rsp),%r15
  0x00007f8ab91384e3: mov    0x8(%rsp),%r14
  0x00007f8ab91384e8: mov    0x10(%rsp),%r13
  0x00007f8ab91384ed: mov    0x18(%rsp),%r12
  0x00007f8ab91384f2: mov    0x20(%rsp),%r11
  0x00007f8ab91384f7: mov    0x28(%rsp),%r10
  0x00007f8ab91384fc: mov    0x30(%rsp),%r9
  0x00007f8ab9138501: mov    0x38(%rsp),%r8
  0x00007f8ab9138506: mov    0x40(%rsp),%rdi
  0x00007f8ab913850b: mov    0x48(%rsp),%rsi
  0x00007f8ab9138510: mov    0x50(%rsp),%rbp
  0x00007f8ab9138515: mov    0x60(%rsp),%rbx
  0x00007f8ab913851a: mov    0x68(%rsp),%rdx
  0x00007f8ab913851f: mov    0x70(%rsp),%rcx
  0x00007f8ab9138524: mov    0x78(%rsp),%rax
  0x00007f8ab9138529: add    $0x80,%rsp
  0x00007f8ab9138530: add    $0x8,%rsp
  0x00007f8ab9138534: popfq  
  0x00007f8ab9138535: mov    %r13,%rsp
  0x00007f8ab9138538: pop    %rax
  0x00007f8ab9138539: mov    %rsp,%r13
  0x00007f8ab913853c: sub    $0x40,%rsp
  0x00007f8ab9138540: mov    %rax,(%rsp)
  0x00007f8ab9138544: mov    %rsi,0x30(%rsp)
  0x00007f8ab9138549: mov    %rdx,0x28(%rsp)
  0x00007f8ab913854e: mov    %rcx,0x20(%rsp)
  0x00007f8ab9138553: mov    %r8d,0x18(%rsp)
  0x00007f8ab9138558: mov    %r9d,0x10(%rsp)
  0x00007f8ab913855d: mov    %rdi,0x8(%rsp)
  0x00007f8ab9138562: mov    0x40(%rbx),%rcx
  0x00007f8ab9138566: jmpq   *%rcx

AHE@0x00007f8ac80eae10: 0xbbb00000 i2c: 0x00007f8ab9138620 c2i: 0x00007f8ab913873c c2iUV: 0x00007f8ab913870f
i2c argument handler #0 for: receiver (Ljava/lang/Class;Ljava/security/ProtectionDomain;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab913873c
  0x00007f8ab9138620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9138624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913862e: cmp    %r11,%rax
  0x00007f8ab9138631: jbe    0x00007f8ab913864a
  0x00007f8ab9138637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9138641: cmp    %r11,%rax
  0x00007f8ab9138644: jb     0x00007f8ab91386e7
  0x00007f8ab913864a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9138654: cmp    %r11,%rax
  0x00007f8ab9138657: jbe    0x00007f8ab9138670
  0x00007f8ab913865d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9138667: cmp    %r11,%rax
  0x00007f8ab913866a: jb     0x00007f8ab91386e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9138670: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138675: sub    $0x80,%rsp
  0x00007f8ab913867c: mov    %rax,0x78(%rsp)
  0x00007f8ab9138681: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138686: mov    %rdx,0x68(%rsp)
  0x00007f8ab913868b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138690: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138695: mov    %rsi,0x48(%rsp)
  0x00007f8ab913869a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913869f: mov    %r8,0x38(%rsp)
  0x00007f8ab91386a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91386a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91386ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91386b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91386b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91386bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91386c2: mov    %r15,(%rsp)
  0x00007f8ab91386c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91386d0: movabs $0x7f8ab9138670,%rsi
  0x00007f8ab91386da: mov    %rsp,%rdx
  0x00007f8ab91386dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91386e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91386e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91386e7: mov    %rsp,%r11
  0x00007f8ab91386ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91386ee: push   %rax
  0x00007f8ab91386ef: mov    %r11,%rax
  0x00007f8ab91386f2: mov    0x50(%rbx),%r11
  0x00007f8ab91386f6: mov    0x18(%rax),%rsi
  0x00007f8ab91386fa: mov    0x10(%rax),%rdx
  0x00007f8ab91386fe: mov    0x8(%rax),%rcx
  0x00007f8ab9138702: mov    %rbx,0x258(%r15)
  0x00007f8ab9138709: mov    %rbx,%rax
  0x00007f8ab913870c: jmpq   *%r11
  0x00007f8ab913870f: mov    0x8(%rsi),%ebx
  0x00007f8ab9138712: shl    $0x3,%rbx
  0x00007f8ab9138716: cmp    0x10(%rax),%rbx
  0x00007f8ab913871a: mov    0x8(%rax),%rbx
  0x00007f8ab913871e: je     0x00007f8ab9138729
  0x00007f8ab9138724: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138729: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9138731: je     0x00007f8ab913882c
  0x00007f8ab9138737: jmpq   0x00007f8ab9105c40
  0x00007f8ab913873c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9138744: je     0x00007f8ab913882c
  0x00007f8ab913874a: mov    %rsp,%r13
  0x00007f8ab913874d: mov    (%rsp),%rax
  0x00007f8ab9138751: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138755: pushfq 
  0x00007f8ab9138756: sub    $0x8,%rsp
  0x00007f8ab913875a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913875f: sub    $0x80,%rsp
  0x00007f8ab9138766: mov    %rax,0x78(%rsp)
  0x00007f8ab913876b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138770: mov    %rdx,0x68(%rsp)
  0x00007f8ab9138775: mov    %rbx,0x60(%rsp)
  0x00007f8ab913877a: mov    %rbp,0x50(%rsp)
  0x00007f8ab913877f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9138784: mov    %rdi,0x40(%rsp)
  0x00007f8ab9138789: mov    %r8,0x38(%rsp)
  0x00007f8ab913878e: mov    %r9,0x30(%rsp)
  0x00007f8ab9138793: mov    %r10,0x28(%rsp)
  0x00007f8ab9138798: mov    %r11,0x20(%rsp)
  0x00007f8ab913879d: mov    %r12,0x18(%rsp)
  0x00007f8ab91387a2: mov    %r13,0x10(%rsp)
  0x00007f8ab91387a7: mov    %r14,0x8(%rsp)
  0x00007f8ab91387ac: mov    %r15,(%rsp)
  0x00007f8ab91387b0: sub    $0x200,%rsp
  0x00007f8ab91387b7: fxsave64 (%rsp)
  0x00007f8ab91387bc: mov    %rbx,%rdi
  0x00007f8ab91387bf: mov    %rax,%rsi
  0x00007f8ab91387c2: callq  0x00007f8acef8bbca
  0x00007f8ab91387c7: fxrstor64 (%rsp)
  0x00007f8ab91387cc: add    $0x200,%rsp
  0x00007f8ab91387d3: mov    (%rsp),%r15
  0x00007f8ab91387d7: mov    0x8(%rsp),%r14
  0x00007f8ab91387dc: mov    0x10(%rsp),%r13
  0x00007f8ab91387e1: mov    0x18(%rsp),%r12
  0x00007f8ab91387e6: mov    0x20(%rsp),%r11
  0x00007f8ab91387eb: mov    0x28(%rsp),%r10
  0x00007f8ab91387f0: mov    0x30(%rsp),%r9
  0x00007f8ab91387f5: mov    0x38(%rsp),%r8
  0x00007f8ab91387fa: mov    0x40(%rsp),%rdi
  0x00007f8ab91387ff: mov    0x48(%rsp),%rsi
  0x00007f8ab9138804: mov    0x50(%rsp),%rbp
  0x00007f8ab9138809: mov    0x60(%rsp),%rbx
  0x00007f8ab913880e: mov    0x68(%rsp),%rdx
  0x00007f8ab9138813: mov    0x70(%rsp),%rcx
  0x00007f8ab9138818: mov    0x78(%rsp),%rax
  0x00007f8ab913881d: add    $0x80,%rsp
  0x00007f8ab9138824: add    $0x8,%rsp
  0x00007f8ab9138828: popfq  
  0x00007f8ab9138829: mov    %r13,%rsp
  0x00007f8ab913882c: pop    %rax
  0x00007f8ab913882d: mov    %rsp,%r13
  0x00007f8ab9138830: sub    $0x20,%rsp
  0x00007f8ab9138834: mov    %rax,(%rsp)
  0x00007f8ab9138838: mov    %rsi,0x18(%rsp)
  0x00007f8ab913883d: mov    %rdx,0x10(%rsp)
  0x00007f8ab9138842: mov    %rcx,0x8(%rsp)
  0x00007f8ab9138847: mov    0x40(%rbx),%rcx
  0x00007f8ab913884b: jmpq   *%rcx

AHE@0x00007f8ac80eae58: 0xbb000000 i2c: 0x00007f8ab9138920 c2i: 0x00007f8ab9138a38 c2iUV: 0x00007f8ab9138a0b
i2c argument handler #0 for: receiver (Ljava/security/ProtectionDomain;)Ljava/lang/String; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9138a38
  0x00007f8ab9138920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9138924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913892e: cmp    %r11,%rax
  0x00007f8ab9138931: jbe    0x00007f8ab913894a
  0x00007f8ab9138937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9138941: cmp    %r11,%rax
  0x00007f8ab9138944: jb     0x00007f8ab91389e7
  0x00007f8ab913894a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9138954: cmp    %r11,%rax
  0x00007f8ab9138957: jbe    0x00007f8ab9138970
  0x00007f8ab913895d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9138967: cmp    %r11,%rax
  0x00007f8ab913896a: jb     0x00007f8ab91389e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9138970: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138975: sub    $0x80,%rsp
  0x00007f8ab913897c: mov    %rax,0x78(%rsp)
  0x00007f8ab9138981: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138986: mov    %rdx,0x68(%rsp)
  0x00007f8ab913898b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138990: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138995: mov    %rsi,0x48(%rsp)
  0x00007f8ab913899a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913899f: mov    %r8,0x38(%rsp)
  0x00007f8ab91389a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91389a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91389ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91389b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91389b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91389bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91389c2: mov    %r15,(%rsp)
  0x00007f8ab91389c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91389d0: movabs $0x7f8ab9138970,%rsi
  0x00007f8ab91389da: mov    %rsp,%rdx
  0x00007f8ab91389dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91389e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91389e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91389e7: mov    %rsp,%r11
  0x00007f8ab91389ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91389ee: push   %rax
  0x00007f8ab91389ef: mov    %r11,%rax
  0x00007f8ab91389f2: mov    0x50(%rbx),%r11
  0x00007f8ab91389f6: mov    0x10(%rax),%rsi
  0x00007f8ab91389fa: mov    0x8(%rax),%rdx
  0x00007f8ab91389fe: mov    %rbx,0x258(%r15)
  0x00007f8ab9138a05: mov    %rbx,%rax
  0x00007f8ab9138a08: jmpq   *%r11
  0x00007f8ab9138a0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9138a0e: shl    $0x3,%rbx
  0x00007f8ab9138a12: cmp    0x10(%rax),%rbx
  0x00007f8ab9138a16: mov    0x8(%rax),%rbx
  0x00007f8ab9138a1a: je     0x00007f8ab9138a25
  0x00007f8ab9138a20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138a25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9138a2d: je     0x00007f8ab9138b28
  0x00007f8ab9138a33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138a38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9138a40: je     0x00007f8ab9138b28
  0x00007f8ab9138a46: mov    %rsp,%r13
  0x00007f8ab9138a49: mov    (%rsp),%rax
  0x00007f8ab9138a4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138a51: pushfq 
  0x00007f8ab9138a52: sub    $0x8,%rsp
  0x00007f8ab9138a56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138a5b: sub    $0x80,%rsp
  0x00007f8ab9138a62: mov    %rax,0x78(%rsp)
  0x00007f8ab9138a67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138a6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9138a71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138a76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138a7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9138a80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9138a85: mov    %r8,0x38(%rsp)
  0x00007f8ab9138a8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9138a8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9138a94: mov    %r11,0x20(%rsp)
  0x00007f8ab9138a99: mov    %r12,0x18(%rsp)
  0x00007f8ab9138a9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9138aa3: mov    %r14,0x8(%rsp)
  0x00007f8ab9138aa8: mov    %r15,(%rsp)
  0x00007f8ab9138aac: sub    $0x200,%rsp
  0x00007f8ab9138ab3: fxsave64 (%rsp)
  0x00007f8ab9138ab8: mov    %rbx,%rdi
  0x00007f8ab9138abb: mov    %rax,%rsi
  0x00007f8ab9138abe: callq  0x00007f8acef8bbca
  0x00007f8ab9138ac3: fxrstor64 (%rsp)
  0x00007f8ab9138ac8: add    $0x200,%rsp
  0x00007f8ab9138acf: mov    (%rsp),%r15
  0x00007f8ab9138ad3: mov    0x8(%rsp),%r14
  0x00007f8ab9138ad8: mov    0x10(%rsp),%r13
  0x00007f8ab9138add: mov    0x18(%rsp),%r12
  0x00007f8ab9138ae2: mov    0x20(%rsp),%r11
  0x00007f8ab9138ae7: mov    0x28(%rsp),%r10
  0x00007f8ab9138aec: mov    0x30(%rsp),%r9
  0x00007f8ab9138af1: mov    0x38(%rsp),%r8
  0x00007f8ab9138af6: mov    0x40(%rsp),%rdi
  0x00007f8ab9138afb: mov    0x48(%rsp),%rsi
  0x00007f8ab9138b00: mov    0x50(%rsp),%rbp
  0x00007f8ab9138b05: mov    0x60(%rsp),%rbx
  0x00007f8ab9138b0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9138b0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9138b14: mov    0x78(%rsp),%rax
  0x00007f8ab9138b19: add    $0x80,%rsp
  0x00007f8ab9138b20: add    $0x8,%rsp
  0x00007f8ab9138b24: popfq  
  0x00007f8ab9138b25: mov    %r13,%rsp
  0x00007f8ab9138b28: pop    %rax
  0x00007f8ab9138b29: mov    %rsp,%r13
  0x00007f8ab9138b2c: sub    $0x20,%rsp
  0x00007f8ab9138b30: mov    %rax,(%rsp)
  0x00007f8ab9138b34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9138b39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9138b3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9138b42: jmpq   *%rcx

AHE@0x00007f8ac80eaea0: 0xbbb00000 i2c: 0x00007f8ab9138c20 c2i: 0x00007f8ab9138d3c c2iUV: 0x00007f8ab9138d0f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain; (557 bytes generated)
c2i argument handler starts at 0x7f8ab9138d3c
  0x00007f8ab9138c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9138c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9138c2e: cmp    %r11,%rax
  0x00007f8ab9138c31: jbe    0x00007f8ab9138c4a
  0x00007f8ab9138c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9138c41: cmp    %r11,%rax
  0x00007f8ab9138c44: jb     0x00007f8ab9138ce7
  0x00007f8ab9138c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9138c54: cmp    %r11,%rax
  0x00007f8ab9138c57: jbe    0x00007f8ab9138c70
  0x00007f8ab9138c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9138c67: cmp    %r11,%rax
  0x00007f8ab9138c6a: jb     0x00007f8ab9138ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9138c70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138c75: sub    $0x80,%rsp
  0x00007f8ab9138c7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9138c81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138c86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9138c8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138c90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138c95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9138c9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9138c9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9138ca4: mov    %r9,0x30(%rsp)
  0x00007f8ab9138ca9: mov    %r10,0x28(%rsp)
  0x00007f8ab9138cae: mov    %r11,0x20(%rsp)
  0x00007f8ab9138cb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9138cb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9138cbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9138cc2: mov    %r15,(%rsp)
  0x00007f8ab9138cc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9138cd0: movabs $0x7f8ab9138c70,%rsi
  0x00007f8ab9138cda: mov    %rsp,%rdx
  0x00007f8ab9138cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138ce1: callq  0x00007f8aceddb9fa
  0x00007f8ab9138ce6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9138ce7: mov    %rsp,%r11
  0x00007f8ab9138cea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138cee: push   %rax
  0x00007f8ab9138cef: mov    %r11,%rax
  0x00007f8ab9138cf2: mov    0x50(%rbx),%r11
  0x00007f8ab9138cf6: mov    0x18(%rax),%rsi
  0x00007f8ab9138cfa: mov    0x10(%rax),%rdx
  0x00007f8ab9138cfe: mov    0x8(%rax),%rcx
  0x00007f8ab9138d02: mov    %rbx,0x258(%r15)
  0x00007f8ab9138d09: mov    %rbx,%rax
  0x00007f8ab9138d0c: jmpq   *%r11
  0x00007f8ab9138d0f: mov    0x8(%rsi),%ebx
  0x00007f8ab9138d12: shl    $0x3,%rbx
  0x00007f8ab9138d16: cmp    0x10(%rax),%rbx
  0x00007f8ab9138d1a: mov    0x8(%rax),%rbx
  0x00007f8ab9138d1e: je     0x00007f8ab9138d29
  0x00007f8ab9138d24: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138d29: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9138d31: je     0x00007f8ab9138e2c
  0x00007f8ab9138d37: jmpq   0x00007f8ab9105c40
  0x00007f8ab9138d3c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9138d44: je     0x00007f8ab9138e2c
  0x00007f8ab9138d4a: mov    %rsp,%r13
  0x00007f8ab9138d4d: mov    (%rsp),%rax
  0x00007f8ab9138d51: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138d55: pushfq 
  0x00007f8ab9138d56: sub    $0x8,%rsp
  0x00007f8ab9138d5a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138d5f: sub    $0x80,%rsp
  0x00007f8ab9138d66: mov    %rax,0x78(%rsp)
  0x00007f8ab9138d6b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138d70: mov    %rdx,0x68(%rsp)
  0x00007f8ab9138d75: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138d7a: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138d7f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9138d84: mov    %rdi,0x40(%rsp)
  0x00007f8ab9138d89: mov    %r8,0x38(%rsp)
  0x00007f8ab9138d8e: mov    %r9,0x30(%rsp)
  0x00007f8ab9138d93: mov    %r10,0x28(%rsp)
  0x00007f8ab9138d98: mov    %r11,0x20(%rsp)
  0x00007f8ab9138d9d: mov    %r12,0x18(%rsp)
  0x00007f8ab9138da2: mov    %r13,0x10(%rsp)
  0x00007f8ab9138da7: mov    %r14,0x8(%rsp)
  0x00007f8ab9138dac: mov    %r15,(%rsp)
  0x00007f8ab9138db0: sub    $0x200,%rsp
  0x00007f8ab9138db7: fxsave64 (%rsp)
  0x00007f8ab9138dbc: mov    %rbx,%rdi
  0x00007f8ab9138dbf: mov    %rax,%rsi
  0x00007f8ab9138dc2: callq  0x00007f8acef8bbca
  0x00007f8ab9138dc7: fxrstor64 (%rsp)
  0x00007f8ab9138dcc: add    $0x200,%rsp
  0x00007f8ab9138dd3: mov    (%rsp),%r15
  0x00007f8ab9138dd7: mov    0x8(%rsp),%r14
  0x00007f8ab9138ddc: mov    0x10(%rsp),%r13
  0x00007f8ab9138de1: mov    0x18(%rsp),%r12
  0x00007f8ab9138de6: mov    0x20(%rsp),%r11
  0x00007f8ab9138deb: mov    0x28(%rsp),%r10
  0x00007f8ab9138df0: mov    0x30(%rsp),%r9
  0x00007f8ab9138df5: mov    0x38(%rsp),%r8
  0x00007f8ab9138dfa: mov    0x40(%rsp),%rdi
  0x00007f8ab9138dff: mov    0x48(%rsp),%rsi
  0x00007f8ab9138e04: mov    0x50(%rsp),%rbp
  0x00007f8ab9138e09: mov    0x60(%rsp),%rbx
  0x00007f8ab9138e0e: mov    0x68(%rsp),%rdx
  0x00007f8ab9138e13: mov    0x70(%rsp),%rcx
  0x00007f8ab9138e18: mov    0x78(%rsp),%rax
  0x00007f8ab9138e1d: add    $0x80,%rsp
  0x00007f8ab9138e24: add    $0x8,%rsp
  0x00007f8ab9138e28: popfq  
  0x00007f8ab9138e29: mov    %r13,%rsp
  0x00007f8ab9138e2c: pop    %rax
  0x00007f8ab9138e2d: mov    %rsp,%r13
  0x00007f8ab9138e30: sub    $0x20,%rsp
  0x00007f8ab9138e34: mov    %rax,(%rsp)
  0x00007f8ab9138e38: mov    %rsi,0x18(%rsp)
  0x00007f8ab9138e3d: mov    %rdx,0x10(%rsp)
  0x00007f8ab9138e42: mov    %rcx,0x8(%rsp)
  0x00007f8ab9138e47: mov    0x40(%rbx),%rcx
  0x00007f8ab9138e4b: jmpq   *%rcx

AHE@0x00007f8ac80eaee8: 0xbbbb0000 i2c: 0x00007f8ab9138f20 c2i: 0x00007f8ab9139040 c2iUV: 0x00007f8ab9139013
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class; (566 bytes generated)
c2i argument handler starts at 0x7f8ab9139040
  0x00007f8ab9138f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9138f24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9138f2e: cmp    %r11,%rax
  0x00007f8ab9138f31: jbe    0x00007f8ab9138f4a
  0x00007f8ab9138f37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9138f41: cmp    %r11,%rax
  0x00007f8ab9138f44: jb     0x00007f8ab9138fe7
  0x00007f8ab9138f4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9138f54: cmp    %r11,%rax
  0x00007f8ab9138f57: jbe    0x00007f8ab9138f70
  0x00007f8ab9138f5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9138f67: cmp    %r11,%rax
  0x00007f8ab9138f6a: jb     0x00007f8ab9138fe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9138f70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9138f75: sub    $0x80,%rsp
  0x00007f8ab9138f7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9138f81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9138f86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9138f8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9138f90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9138f95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9138f9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9138f9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9138fa4: mov    %r9,0x30(%rsp)
  0x00007f8ab9138fa9: mov    %r10,0x28(%rsp)
  0x00007f8ab9138fae: mov    %r11,0x20(%rsp)
  0x00007f8ab9138fb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9138fb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9138fbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9138fc2: mov    %r15,(%rsp)
  0x00007f8ab9138fc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9138fd0: movabs $0x7f8ab9138f70,%rsi
  0x00007f8ab9138fda: mov    %rsp,%rdx
  0x00007f8ab9138fdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138fe1: callq  0x00007f8aceddb9fa
  0x00007f8ab9138fe6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9138fe7: mov    %rsp,%r11
  0x00007f8ab9138fea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9138fee: push   %rax
  0x00007f8ab9138fef: mov    %r11,%rax
  0x00007f8ab9138ff2: mov    0x50(%rbx),%r11
  0x00007f8ab9138ff6: mov    0x20(%rax),%rsi
  0x00007f8ab9138ffa: mov    0x18(%rax),%rdx
  0x00007f8ab9138ffe: mov    0x10(%rax),%rcx
  0x00007f8ab9139002: mov    0x8(%rax),%r8
  0x00007f8ab9139006: mov    %rbx,0x258(%r15)
  0x00007f8ab913900d: mov    %rbx,%rax
  0x00007f8ab9139010: jmpq   *%r11
  0x00007f8ab9139013: mov    0x8(%rsi),%ebx
  0x00007f8ab9139016: shl    $0x3,%rbx
  0x00007f8ab913901a: cmp    0x10(%rax),%rbx
  0x00007f8ab913901e: mov    0x8(%rax),%rbx
  0x00007f8ab9139022: je     0x00007f8ab913902d
  0x00007f8ab9139028: jmpq   0x00007f8ab9105c40
  0x00007f8ab913902d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139035: je     0x00007f8ab9139130
  0x00007f8ab913903b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139040: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139048: je     0x00007f8ab9139130
  0x00007f8ab913904e: mov    %rsp,%r13
  0x00007f8ab9139051: mov    (%rsp),%rax
  0x00007f8ab9139055: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139059: pushfq 
  0x00007f8ab913905a: sub    $0x8,%rsp
  0x00007f8ab913905e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139063: sub    $0x80,%rsp
  0x00007f8ab913906a: mov    %rax,0x78(%rsp)
  0x00007f8ab913906f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139074: mov    %rdx,0x68(%rsp)
  0x00007f8ab9139079: mov    %rbx,0x60(%rsp)
  0x00007f8ab913907e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139083: mov    %rsi,0x48(%rsp)
  0x00007f8ab9139088: mov    %rdi,0x40(%rsp)
  0x00007f8ab913908d: mov    %r8,0x38(%rsp)
  0x00007f8ab9139092: mov    %r9,0x30(%rsp)
  0x00007f8ab9139097: mov    %r10,0x28(%rsp)
  0x00007f8ab913909c: mov    %r11,0x20(%rsp)
  0x00007f8ab91390a1: mov    %r12,0x18(%rsp)
  0x00007f8ab91390a6: mov    %r13,0x10(%rsp)
  0x00007f8ab91390ab: mov    %r14,0x8(%rsp)
  0x00007f8ab91390b0: mov    %r15,(%rsp)
  0x00007f8ab91390b4: sub    $0x200,%rsp
  0x00007f8ab91390bb: fxsave64 (%rsp)
  0x00007f8ab91390c0: mov    %rbx,%rdi
  0x00007f8ab91390c3: mov    %rax,%rsi
  0x00007f8ab91390c6: callq  0x00007f8acef8bbca
  0x00007f8ab91390cb: fxrstor64 (%rsp)
  0x00007f8ab91390d0: add    $0x200,%rsp
  0x00007f8ab91390d7: mov    (%rsp),%r15
  0x00007f8ab91390db: mov    0x8(%rsp),%r14
  0x00007f8ab91390e0: mov    0x10(%rsp),%r13
  0x00007f8ab91390e5: mov    0x18(%rsp),%r12
  0x00007f8ab91390ea: mov    0x20(%rsp),%r11
  0x00007f8ab91390ef: mov    0x28(%rsp),%r10
  0x00007f8ab91390f4: mov    0x30(%rsp),%r9
  0x00007f8ab91390f9: mov    0x38(%rsp),%r8
  0x00007f8ab91390fe: mov    0x40(%rsp),%rdi
  0x00007f8ab9139103: mov    0x48(%rsp),%rsi
  0x00007f8ab9139108: mov    0x50(%rsp),%rbp
  0x00007f8ab913910d: mov    0x60(%rsp),%rbx
  0x00007f8ab9139112: mov    0x68(%rsp),%rdx
  0x00007f8ab9139117: mov    0x70(%rsp),%rcx
  0x00007f8ab913911c: mov    0x78(%rsp),%rax
  0x00007f8ab9139121: add    $0x80,%rsp
  0x00007f8ab9139128: add    $0x8,%rsp
  0x00007f8ab913912c: popfq  
  0x00007f8ab913912d: mov    %r13,%rsp
  0x00007f8ab9139130: pop    %rax
  0x00007f8ab9139131: mov    %rsp,%r13
  0x00007f8ab9139134: sub    $0x30,%rsp
  0x00007f8ab9139138: mov    %rax,(%rsp)
  0x00007f8ab913913c: mov    %rsi,0x20(%rsp)
  0x00007f8ab9139141: mov    %rdx,0x18(%rsp)
  0x00007f8ab9139146: mov    %rcx,0x10(%rsp)
  0x00007f8ab913914b: mov    %r8,0x8(%rsp)
  0x00007f8ab9139150: mov    0x40(%rbx),%rcx
  0x00007f8ab9139154: jmpq   *%rcx

AHE@0x00007f8ac80eaf30: 0xbbbaa000 i2c: 0x00007f8ab9139220 c2i: 0x00007f8ab9139344 c2iUV: 0x00007f8ab9139317
i2c argument handler #0 for: receiver (Ljava/lang/String;[BII)Ljava/lang/Class; (575 bytes generated)
c2i argument handler starts at 0x7f8ab9139344
  0x00007f8ab9139220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9139224: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913922e: cmp    %r11,%rax
  0x00007f8ab9139231: jbe    0x00007f8ab913924a
  0x00007f8ab9139237: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9139241: cmp    %r11,%rax
  0x00007f8ab9139244: jb     0x00007f8ab91392e7
  0x00007f8ab913924a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9139254: cmp    %r11,%rax
  0x00007f8ab9139257: jbe    0x00007f8ab9139270
  0x00007f8ab913925d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9139267: cmp    %r11,%rax
  0x00007f8ab913926a: jb     0x00007f8ab91392e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9139270: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139275: sub    $0x80,%rsp
  0x00007f8ab913927c: mov    %rax,0x78(%rsp)
  0x00007f8ab9139281: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139286: mov    %rdx,0x68(%rsp)
  0x00007f8ab913928b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139290: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139295: mov    %rsi,0x48(%rsp)
  0x00007f8ab913929a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913929f: mov    %r8,0x38(%rsp)
  0x00007f8ab91392a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91392a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91392ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91392b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91392b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91392bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91392c2: mov    %r15,(%rsp)
  0x00007f8ab91392c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91392d0: movabs $0x7f8ab9139270,%rsi
  0x00007f8ab91392da: mov    %rsp,%rdx
  0x00007f8ab91392dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91392e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91392e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91392e7: mov    %rsp,%r11
  0x00007f8ab91392ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91392ee: push   %rax
  0x00007f8ab91392ef: mov    %r11,%rax
  0x00007f8ab91392f2: mov    0x50(%rbx),%r11
  0x00007f8ab91392f6: mov    0x28(%rax),%rsi
  0x00007f8ab91392fa: mov    0x20(%rax),%rdx
  0x00007f8ab91392fe: mov    0x18(%rax),%rcx
  0x00007f8ab9139302: mov    0x10(%rax),%r8d
  0x00007f8ab9139306: mov    0x8(%rax),%r9d
  0x00007f8ab913930a: mov    %rbx,0x258(%r15)
  0x00007f8ab9139311: mov    %rbx,%rax
  0x00007f8ab9139314: jmpq   *%r11
  0x00007f8ab9139317: mov    0x8(%rsi),%ebx
  0x00007f8ab913931a: shl    $0x3,%rbx
  0x00007f8ab913931e: cmp    0x10(%rax),%rbx
  0x00007f8ab9139322: mov    0x8(%rax),%rbx
  0x00007f8ab9139326: je     0x00007f8ab9139331
  0x00007f8ab913932c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139331: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139339: je     0x00007f8ab9139434
  0x00007f8ab913933f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139344: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913934c: je     0x00007f8ab9139434
  0x00007f8ab9139352: mov    %rsp,%r13
  0x00007f8ab9139355: mov    (%rsp),%rax
  0x00007f8ab9139359: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913935d: pushfq 
  0x00007f8ab913935e: sub    $0x8,%rsp
  0x00007f8ab9139362: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139367: sub    $0x80,%rsp
  0x00007f8ab913936e: mov    %rax,0x78(%rsp)
  0x00007f8ab9139373: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139378: mov    %rdx,0x68(%rsp)
  0x00007f8ab913937d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139382: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139387: mov    %rsi,0x48(%rsp)
  0x00007f8ab913938c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9139391: mov    %r8,0x38(%rsp)
  0x00007f8ab9139396: mov    %r9,0x30(%rsp)
  0x00007f8ab913939b: mov    %r10,0x28(%rsp)
  0x00007f8ab91393a0: mov    %r11,0x20(%rsp)
  0x00007f8ab91393a5: mov    %r12,0x18(%rsp)
  0x00007f8ab91393aa: mov    %r13,0x10(%rsp)
  0x00007f8ab91393af: mov    %r14,0x8(%rsp)
  0x00007f8ab91393b4: mov    %r15,(%rsp)
  0x00007f8ab91393b8: sub    $0x200,%rsp
  0x00007f8ab91393bf: fxsave64 (%rsp)
  0x00007f8ab91393c4: mov    %rbx,%rdi
  0x00007f8ab91393c7: mov    %rax,%rsi
  0x00007f8ab91393ca: callq  0x00007f8acef8bbca
  0x00007f8ab91393cf: fxrstor64 (%rsp)
  0x00007f8ab91393d4: add    $0x200,%rsp
  0x00007f8ab91393db: mov    (%rsp),%r15
  0x00007f8ab91393df: mov    0x8(%rsp),%r14
  0x00007f8ab91393e4: mov    0x10(%rsp),%r13
  0x00007f8ab91393e9: mov    0x18(%rsp),%r12
  0x00007f8ab91393ee: mov    0x20(%rsp),%r11
  0x00007f8ab91393f3: mov    0x28(%rsp),%r10
  0x00007f8ab91393f8: mov    0x30(%rsp),%r9
  0x00007f8ab91393fd: mov    0x38(%rsp),%r8
  0x00007f8ab9139402: mov    0x40(%rsp),%rdi
  0x00007f8ab9139407: mov    0x48(%rsp),%rsi
  0x00007f8ab913940c: mov    0x50(%rsp),%rbp
  0x00007f8ab9139411: mov    0x60(%rsp),%rbx
  0x00007f8ab9139416: mov    0x68(%rsp),%rdx
  0x00007f8ab913941b: mov    0x70(%rsp),%rcx
  0x00007f8ab9139420: mov    0x78(%rsp),%rax
  0x00007f8ab9139425: add    $0x80,%rsp
  0x00007f8ab913942c: add    $0x8,%rsp
  0x00007f8ab9139430: popfq  
  0x00007f8ab9139431: mov    %r13,%rsp
  0x00007f8ab9139434: pop    %rax
  0x00007f8ab9139435: mov    %rsp,%r13
  0x00007f8ab9139438: sub    $0x30,%rsp
  0x00007f8ab913943c: mov    %rax,(%rsp)
  0x00007f8ab9139440: mov    %rsi,0x28(%rsp)
  0x00007f8ab9139445: mov    %rdx,0x20(%rsp)
  0x00007f8ab913944a: mov    %rcx,0x18(%rsp)
  0x00007f8ab913944f: mov    %r8d,0x10(%rsp)
  0x00007f8ab9139454: mov    %r9d,0x8(%rsp)
  0x00007f8ab9139459: mov    0x40(%rbx),%rcx
  0x00007f8ab913945d: jmpq   *%rcx

AHE@0x00007f8ac80eaf78: 0xbbbaab00 i2c: 0x00007f8ab9139520 c2i: 0x00007f8ab9139648 c2iUV: 0x00007f8ab913961b
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; (584 bytes generated)
c2i argument handler starts at 0x7f8ab9139648
  0x00007f8ab9139520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9139524: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913952e: cmp    %r11,%rax
  0x00007f8ab9139531: jbe    0x00007f8ab913954a
  0x00007f8ab9139537: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9139541: cmp    %r11,%rax
  0x00007f8ab9139544: jb     0x00007f8ab91395e7
  0x00007f8ab913954a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9139554: cmp    %r11,%rax
  0x00007f8ab9139557: jbe    0x00007f8ab9139570
  0x00007f8ab913955d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9139567: cmp    %r11,%rax
  0x00007f8ab913956a: jb     0x00007f8ab91395e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9139570: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139575: sub    $0x80,%rsp
  0x00007f8ab913957c: mov    %rax,0x78(%rsp)
  0x00007f8ab9139581: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139586: mov    %rdx,0x68(%rsp)
  0x00007f8ab913958b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139590: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139595: mov    %rsi,0x48(%rsp)
  0x00007f8ab913959a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913959f: mov    %r8,0x38(%rsp)
  0x00007f8ab91395a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91395a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91395ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91395b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91395b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91395bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91395c2: mov    %r15,(%rsp)
  0x00007f8ab91395c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91395d0: movabs $0x7f8ab9139570,%rsi
  0x00007f8ab91395da: mov    %rsp,%rdx
  0x00007f8ab91395dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91395e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91395e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91395e7: mov    %rsp,%r11
  0x00007f8ab91395ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91395ee: push   %rax
  0x00007f8ab91395ef: mov    %r11,%rax
  0x00007f8ab91395f2: mov    0x50(%rbx),%r11
  0x00007f8ab91395f6: mov    0x30(%rax),%rsi
  0x00007f8ab91395fa: mov    0x28(%rax),%rdx
  0x00007f8ab91395fe: mov    0x20(%rax),%rcx
  0x00007f8ab9139602: mov    0x18(%rax),%r8d
  0x00007f8ab9139606: mov    0x10(%rax),%r9d
  0x00007f8ab913960a: mov    0x8(%rax),%rdi
  0x00007f8ab913960e: mov    %rbx,0x258(%r15)
  0x00007f8ab9139615: mov    %rbx,%rax
  0x00007f8ab9139618: jmpq   *%r11
  0x00007f8ab913961b: mov    0x8(%rsi),%ebx
  0x00007f8ab913961e: shl    $0x3,%rbx
  0x00007f8ab9139622: cmp    0x10(%rax),%rbx
  0x00007f8ab9139626: mov    0x8(%rax),%rbx
  0x00007f8ab913962a: je     0x00007f8ab9139635
  0x00007f8ab9139630: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139635: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913963d: je     0x00007f8ab9139738
  0x00007f8ab9139643: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139648: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139650: je     0x00007f8ab9139738
  0x00007f8ab9139656: mov    %rsp,%r13
  0x00007f8ab9139659: mov    (%rsp),%rax
  0x00007f8ab913965d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139661: pushfq 
  0x00007f8ab9139662: sub    $0x8,%rsp
  0x00007f8ab9139666: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913966b: sub    $0x80,%rsp
  0x00007f8ab9139672: mov    %rax,0x78(%rsp)
  0x00007f8ab9139677: mov    %rcx,0x70(%rsp)
  0x00007f8ab913967c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9139681: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139686: mov    %rbp,0x50(%rsp)
  0x00007f8ab913968b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9139690: mov    %rdi,0x40(%rsp)
  0x00007f8ab9139695: mov    %r8,0x38(%rsp)
  0x00007f8ab913969a: mov    %r9,0x30(%rsp)
  0x00007f8ab913969f: mov    %r10,0x28(%rsp)
  0x00007f8ab91396a4: mov    %r11,0x20(%rsp)
  0x00007f8ab91396a9: mov    %r12,0x18(%rsp)
  0x00007f8ab91396ae: mov    %r13,0x10(%rsp)
  0x00007f8ab91396b3: mov    %r14,0x8(%rsp)
  0x00007f8ab91396b8: mov    %r15,(%rsp)
  0x00007f8ab91396bc: sub    $0x200,%rsp
  0x00007f8ab91396c3: fxsave64 (%rsp)
  0x00007f8ab91396c8: mov    %rbx,%rdi
  0x00007f8ab91396cb: mov    %rax,%rsi
  0x00007f8ab91396ce: callq  0x00007f8acef8bbca
  0x00007f8ab91396d3: fxrstor64 (%rsp)
  0x00007f8ab91396d8: add    $0x200,%rsp
  0x00007f8ab91396df: mov    (%rsp),%r15
  0x00007f8ab91396e3: mov    0x8(%rsp),%r14
  0x00007f8ab91396e8: mov    0x10(%rsp),%r13
  0x00007f8ab91396ed: mov    0x18(%rsp),%r12
  0x00007f8ab91396f2: mov    0x20(%rsp),%r11
  0x00007f8ab91396f7: mov    0x28(%rsp),%r10
  0x00007f8ab91396fc: mov    0x30(%rsp),%r9
  0x00007f8ab9139701: mov    0x38(%rsp),%r8
  0x00007f8ab9139706: mov    0x40(%rsp),%rdi
  0x00007f8ab913970b: mov    0x48(%rsp),%rsi
  0x00007f8ab9139710: mov    0x50(%rsp),%rbp
  0x00007f8ab9139715: mov    0x60(%rsp),%rbx
  0x00007f8ab913971a: mov    0x68(%rsp),%rdx
  0x00007f8ab913971f: mov    0x70(%rsp),%rcx
  0x00007f8ab9139724: mov    0x78(%rsp),%rax
  0x00007f8ab9139729: add    $0x80,%rsp
  0x00007f8ab9139730: add    $0x8,%rsp
  0x00007f8ab9139734: popfq  
  0x00007f8ab9139735: mov    %r13,%rsp
  0x00007f8ab9139738: pop    %rax
  0x00007f8ab9139739: mov    %rsp,%r13
  0x00007f8ab913973c: sub    $0x40,%rsp
  0x00007f8ab9139740: mov    %rax,(%rsp)
  0x00007f8ab9139744: mov    %rsi,0x30(%rsp)
  0x00007f8ab9139749: mov    %rdx,0x28(%rsp)
  0x00007f8ab913974e: mov    %rcx,0x20(%rsp)
  0x00007f8ab9139753: mov    %r8d,0x18(%rsp)
  0x00007f8ab9139758: mov    %r9d,0x10(%rsp)
  0x00007f8ab913975d: mov    %rdi,0x8(%rsp)
  0x00007f8ab9139762: mov    0x40(%rbx),%rcx
  0x00007f8ab9139766: jmpq   *%rcx

AHE@0x00007f8ac80eafc0: 0xbbaa0000 i2c: 0x00007f8ab9139820 c2i: 0x00007f8ab913993f c2iUV: 0x00007f8ab9139912
i2c argument handler #0 for: receiver ([BII)Ljava/lang/Class; (564 bytes generated)
c2i argument handler starts at 0x7f8ab913993f
  0x00007f8ab9139820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9139824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913982e: cmp    %r11,%rax
  0x00007f8ab9139831: jbe    0x00007f8ab913984a
  0x00007f8ab9139837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9139841: cmp    %r11,%rax
  0x00007f8ab9139844: jb     0x00007f8ab91398e7
  0x00007f8ab913984a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9139854: cmp    %r11,%rax
  0x00007f8ab9139857: jbe    0x00007f8ab9139870
  0x00007f8ab913985d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9139867: cmp    %r11,%rax
  0x00007f8ab913986a: jb     0x00007f8ab91398e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9139870: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139875: sub    $0x80,%rsp
  0x00007f8ab913987c: mov    %rax,0x78(%rsp)
  0x00007f8ab9139881: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139886: mov    %rdx,0x68(%rsp)
  0x00007f8ab913988b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139890: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139895: mov    %rsi,0x48(%rsp)
  0x00007f8ab913989a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913989f: mov    %r8,0x38(%rsp)
  0x00007f8ab91398a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91398a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91398ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91398b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91398b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91398bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91398c2: mov    %r15,(%rsp)
  0x00007f8ab91398c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91398d0: movabs $0x7f8ab9139870,%rsi
  0x00007f8ab91398da: mov    %rsp,%rdx
  0x00007f8ab91398dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91398e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91398e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91398e7: mov    %rsp,%r11
  0x00007f8ab91398ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91398ee: push   %rax
  0x00007f8ab91398ef: mov    %r11,%rax
  0x00007f8ab91398f2: mov    0x50(%rbx),%r11
  0x00007f8ab91398f6: mov    0x20(%rax),%rsi
  0x00007f8ab91398fa: mov    0x18(%rax),%rdx
  0x00007f8ab91398fe: mov    0x10(%rax),%ecx
  0x00007f8ab9139901: mov    0x8(%rax),%r8d
  0x00007f8ab9139905: mov    %rbx,0x258(%r15)
  0x00007f8ab913990c: mov    %rbx,%rax
  0x00007f8ab913990f: jmpq   *%r11
  0x00007f8ab9139912: mov    0x8(%rsi),%ebx
  0x00007f8ab9139915: shl    $0x3,%rbx
  0x00007f8ab9139919: cmp    0x10(%rax),%rbx
  0x00007f8ab913991d: mov    0x8(%rax),%rbx
  0x00007f8ab9139921: je     0x00007f8ab913992c
  0x00007f8ab9139927: jmpq   0x00007f8ab9105c40
  0x00007f8ab913992c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139934: je     0x00007f8ab9139a2f
  0x00007f8ab913993a: jmpq   0x00007f8ab9105c40
  0x00007f8ab913993f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139947: je     0x00007f8ab9139a2f
  0x00007f8ab913994d: mov    %rsp,%r13
  0x00007f8ab9139950: mov    (%rsp),%rax
  0x00007f8ab9139954: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139958: pushfq 
  0x00007f8ab9139959: sub    $0x8,%rsp
  0x00007f8ab913995d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139962: sub    $0x80,%rsp
  0x00007f8ab9139969: mov    %rax,0x78(%rsp)
  0x00007f8ab913996e: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139973: mov    %rdx,0x68(%rsp)
  0x00007f8ab9139978: mov    %rbx,0x60(%rsp)
  0x00007f8ab913997d: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139982: mov    %rsi,0x48(%rsp)
  0x00007f8ab9139987: mov    %rdi,0x40(%rsp)
  0x00007f8ab913998c: mov    %r8,0x38(%rsp)
  0x00007f8ab9139991: mov    %r9,0x30(%rsp)
  0x00007f8ab9139996: mov    %r10,0x28(%rsp)
  0x00007f8ab913999b: mov    %r11,0x20(%rsp)
  0x00007f8ab91399a0: mov    %r12,0x18(%rsp)
  0x00007f8ab91399a5: mov    %r13,0x10(%rsp)
  0x00007f8ab91399aa: mov    %r14,0x8(%rsp)
  0x00007f8ab91399af: mov    %r15,(%rsp)
  0x00007f8ab91399b3: sub    $0x200,%rsp
  0x00007f8ab91399ba: fxsave64 (%rsp)
  0x00007f8ab91399bf: mov    %rbx,%rdi
  0x00007f8ab91399c2: mov    %rax,%rsi
  0x00007f8ab91399c5: callq  0x00007f8acef8bbca
  0x00007f8ab91399ca: fxrstor64 (%rsp)
  0x00007f8ab91399cf: add    $0x200,%rsp
  0x00007f8ab91399d6: mov    (%rsp),%r15
  0x00007f8ab91399da: mov    0x8(%rsp),%r14
  0x00007f8ab91399df: mov    0x10(%rsp),%r13
  0x00007f8ab91399e4: mov    0x18(%rsp),%r12
  0x00007f8ab91399e9: mov    0x20(%rsp),%r11
  0x00007f8ab91399ee: mov    0x28(%rsp),%r10
  0x00007f8ab91399f3: mov    0x30(%rsp),%r9
  0x00007f8ab91399f8: mov    0x38(%rsp),%r8
  0x00007f8ab91399fd: mov    0x40(%rsp),%rdi
  0x00007f8ab9139a02: mov    0x48(%rsp),%rsi
  0x00007f8ab9139a07: mov    0x50(%rsp),%rbp
  0x00007f8ab9139a0c: mov    0x60(%rsp),%rbx
  0x00007f8ab9139a11: mov    0x68(%rsp),%rdx
  0x00007f8ab9139a16: mov    0x70(%rsp),%rcx
  0x00007f8ab9139a1b: mov    0x78(%rsp),%rax
  0x00007f8ab9139a20: add    $0x80,%rsp
  0x00007f8ab9139a27: add    $0x8,%rsp
  0x00007f8ab9139a2b: popfq  
  0x00007f8ab9139a2c: mov    %r13,%rsp
  0x00007f8ab9139a2f: pop    %rax
  0x00007f8ab9139a30: mov    %rsp,%r13
  0x00007f8ab9139a33: sub    $0x30,%rsp
  0x00007f8ab9139a37: mov    %rax,(%rsp)
  0x00007f8ab9139a3b: mov    %rsi,0x20(%rsp)
  0x00007f8ab9139a40: mov    %rdx,0x18(%rsp)
  0x00007f8ab9139a45: mov    %ecx,0x10(%rsp)
  0x00007f8ab9139a49: mov    %r8d,0x8(%rsp)
  0x00007f8ab9139a4e: mov    0x40(%rbx),%rcx
  0x00007f8ab9139a52: jmpq   *%rcx

AHE@0x00007f8ac80eb008: 0xbb000000 i2c: 0x00007f8ab9139b20 c2i: 0x00007f8ab9139c38 c2iUV: 0x00007f8ab9139c0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9139c38
  0x00007f8ab9139b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9139b24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9139b2e: cmp    %r11,%rax
  0x00007f8ab9139b31: jbe    0x00007f8ab9139b4a
  0x00007f8ab9139b37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9139b41: cmp    %r11,%rax
  0x00007f8ab9139b44: jb     0x00007f8ab9139be7
  0x00007f8ab9139b4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9139b54: cmp    %r11,%rax
  0x00007f8ab9139b57: jbe    0x00007f8ab9139b70
  0x00007f8ab9139b5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9139b67: cmp    %r11,%rax
  0x00007f8ab9139b6a: jb     0x00007f8ab9139be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9139b70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139b75: sub    $0x80,%rsp
  0x00007f8ab9139b7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9139b81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139b86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9139b8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139b90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139b95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9139b9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9139b9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9139ba4: mov    %r9,0x30(%rsp)
  0x00007f8ab9139ba9: mov    %r10,0x28(%rsp)
  0x00007f8ab9139bae: mov    %r11,0x20(%rsp)
  0x00007f8ab9139bb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9139bb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9139bbd: mov    %r14,0x8(%rsp)
  0x00007f8ab9139bc2: mov    %r15,(%rsp)
  0x00007f8ab9139bc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9139bd0: movabs $0x7f8ab9139b70,%rsi
  0x00007f8ab9139bda: mov    %rsp,%rdx
  0x00007f8ab9139bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139be1: callq  0x00007f8aceddb9fa
  0x00007f8ab9139be6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9139be7: mov    %rsp,%r11
  0x00007f8ab9139bea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139bee: push   %rax
  0x00007f8ab9139bef: mov    %r11,%rax
  0x00007f8ab9139bf2: mov    0x50(%rbx),%r11
  0x00007f8ab9139bf6: mov    0x10(%rax),%rsi
  0x00007f8ab9139bfa: mov    0x8(%rax),%rdx
  0x00007f8ab9139bfe: mov    %rbx,0x258(%r15)
  0x00007f8ab9139c05: mov    %rbx,%rax
  0x00007f8ab9139c08: jmpq   *%r11
  0x00007f8ab9139c0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9139c0e: shl    $0x3,%rbx
  0x00007f8ab9139c12: cmp    0x10(%rax),%rbx
  0x00007f8ab9139c16: mov    0x8(%rax),%rbx
  0x00007f8ab9139c1a: je     0x00007f8ab9139c25
  0x00007f8ab9139c20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139c25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139c2d: je     0x00007f8ab9139d28
  0x00007f8ab9139c33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139c38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139c40: je     0x00007f8ab9139d28
  0x00007f8ab9139c46: mov    %rsp,%r13
  0x00007f8ab9139c49: mov    (%rsp),%rax
  0x00007f8ab9139c4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139c51: pushfq 
  0x00007f8ab9139c52: sub    $0x8,%rsp
  0x00007f8ab9139c56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139c5b: sub    $0x80,%rsp
  0x00007f8ab9139c62: mov    %rax,0x78(%rsp)
  0x00007f8ab9139c67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139c6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9139c71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139c76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139c7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9139c80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9139c85: mov    %r8,0x38(%rsp)
  0x00007f8ab9139c8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9139c8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9139c94: mov    %r11,0x20(%rsp)
  0x00007f8ab9139c99: mov    %r12,0x18(%rsp)
  0x00007f8ab9139c9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9139ca3: mov    %r14,0x8(%rsp)
  0x00007f8ab9139ca8: mov    %r15,(%rsp)
  0x00007f8ab9139cac: sub    $0x200,%rsp
  0x00007f8ab9139cb3: fxsave64 (%rsp)
  0x00007f8ab9139cb8: mov    %rbx,%rdi
  0x00007f8ab9139cbb: mov    %rax,%rsi
  0x00007f8ab9139cbe: callq  0x00007f8acef8bbca
  0x00007f8ab9139cc3: fxrstor64 (%rsp)
  0x00007f8ab9139cc8: add    $0x200,%rsp
  0x00007f8ab9139ccf: mov    (%rsp),%r15
  0x00007f8ab9139cd3: mov    0x8(%rsp),%r14
  0x00007f8ab9139cd8: mov    0x10(%rsp),%r13
  0x00007f8ab9139cdd: mov    0x18(%rsp),%r12
  0x00007f8ab9139ce2: mov    0x20(%rsp),%r11
  0x00007f8ab9139ce7: mov    0x28(%rsp),%r10
  0x00007f8ab9139cec: mov    0x30(%rsp),%r9
  0x00007f8ab9139cf1: mov    0x38(%rsp),%r8
  0x00007f8ab9139cf6: mov    0x40(%rsp),%rdi
  0x00007f8ab9139cfb: mov    0x48(%rsp),%rsi
  0x00007f8ab9139d00: mov    0x50(%rsp),%rbp
  0x00007f8ab9139d05: mov    0x60(%rsp),%rbx
  0x00007f8ab9139d0a: mov    0x68(%rsp),%rdx
  0x00007f8ab9139d0f: mov    0x70(%rsp),%rcx
  0x00007f8ab9139d14: mov    0x78(%rsp),%rax
  0x00007f8ab9139d19: add    $0x80,%rsp
  0x00007f8ab9139d20: add    $0x8,%rsp
  0x00007f8ab9139d24: popfq  
  0x00007f8ab9139d25: mov    %r13,%rsp
  0x00007f8ab9139d28: pop    %rax
  0x00007f8ab9139d29: mov    %rsp,%r13
  0x00007f8ab9139d2c: sub    $0x20,%rsp
  0x00007f8ab9139d30: mov    %rax,(%rsp)
  0x00007f8ab9139d34: mov    %rsi,0x10(%rsp)
  0x00007f8ab9139d39: mov    %rdx,0x8(%rsp)
  0x00007f8ab9139d3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9139d42: jmpq   *%rcx

AHE@0x00007f8ac80eb050: 0xbb000000 i2c: 0x00007f8ab9139e20 c2i: 0x00007f8ab9139f38 c2iUV: 0x00007f8ab9139f0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f8ab9139f38
  0x00007f8ab9139e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9139e24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9139e2e: cmp    %r11,%rax
  0x00007f8ab9139e31: jbe    0x00007f8ab9139e4a
  0x00007f8ab9139e37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9139e41: cmp    %r11,%rax
  0x00007f8ab9139e44: jb     0x00007f8ab9139ee7
  0x00007f8ab9139e4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9139e54: cmp    %r11,%rax
  0x00007f8ab9139e57: jbe    0x00007f8ab9139e70
  0x00007f8ab9139e5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9139e67: cmp    %r11,%rax
  0x00007f8ab9139e6a: jb     0x00007f8ab9139ee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9139e70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139e75: sub    $0x80,%rsp
  0x00007f8ab9139e7c: mov    %rax,0x78(%rsp)
  0x00007f8ab9139e81: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139e86: mov    %rdx,0x68(%rsp)
  0x00007f8ab9139e8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139e90: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139e95: mov    %rsi,0x48(%rsp)
  0x00007f8ab9139e9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9139e9f: mov    %r8,0x38(%rsp)
  0x00007f8ab9139ea4: mov    %r9,0x30(%rsp)
  0x00007f8ab9139ea9: mov    %r10,0x28(%rsp)
  0x00007f8ab9139eae: mov    %r11,0x20(%rsp)
  0x00007f8ab9139eb3: mov    %r12,0x18(%rsp)
  0x00007f8ab9139eb8: mov    %r13,0x10(%rsp)
  0x00007f8ab9139ebd: mov    %r14,0x8(%rsp)
  0x00007f8ab9139ec2: mov    %r15,(%rsp)
  0x00007f8ab9139ec6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9139ed0: movabs $0x7f8ab9139e70,%rsi
  0x00007f8ab9139eda: mov    %rsp,%rdx
  0x00007f8ab9139edd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139ee1: callq  0x00007f8aceddb9fa
  0x00007f8ab9139ee6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9139ee7: mov    %rsp,%r11
  0x00007f8ab9139eea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139eee: push   %rax
  0x00007f8ab9139eef: mov    %r11,%rax
  0x00007f8ab9139ef2: mov    0x50(%rbx),%r11
  0x00007f8ab9139ef6: mov    0x10(%rax),%rsi
  0x00007f8ab9139efa: mov    0x8(%rax),%rdx
  0x00007f8ab9139efe: mov    %rbx,0x258(%r15)
  0x00007f8ab9139f05: mov    %rbx,%rax
  0x00007f8ab9139f08: jmpq   *%r11
  0x00007f8ab9139f0b: mov    0x8(%rsi),%ebx
  0x00007f8ab9139f0e: shl    $0x3,%rbx
  0x00007f8ab9139f12: cmp    0x10(%rax),%rbx
  0x00007f8ab9139f16: mov    0x8(%rax),%rbx
  0x00007f8ab9139f1a: je     0x00007f8ab9139f25
  0x00007f8ab9139f20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139f25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139f2d: je     0x00007f8ab913a028
  0x00007f8ab9139f33: jmpq   0x00007f8ab9105c40
  0x00007f8ab9139f38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9139f40: je     0x00007f8ab913a028
  0x00007f8ab9139f46: mov    %rsp,%r13
  0x00007f8ab9139f49: mov    (%rsp),%rax
  0x00007f8ab9139f4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9139f51: pushfq 
  0x00007f8ab9139f52: sub    $0x8,%rsp
  0x00007f8ab9139f56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9139f5b: sub    $0x80,%rsp
  0x00007f8ab9139f62: mov    %rax,0x78(%rsp)
  0x00007f8ab9139f67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9139f6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9139f71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9139f76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9139f7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9139f80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9139f85: mov    %r8,0x38(%rsp)
  0x00007f8ab9139f8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9139f8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9139f94: mov    %r11,0x20(%rsp)
  0x00007f8ab9139f99: mov    %r12,0x18(%rsp)
  0x00007f8ab9139f9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9139fa3: mov    %r14,0x8(%rsp)
  0x00007f8ab9139fa8: mov    %r15,(%rsp)
  0x00007f8ab9139fac: sub    $0x200,%rsp
  0x00007f8ab9139fb3: fxsave64 (%rsp)
  0x00007f8ab9139fb8: mov    %rbx,%rdi
  0x00007f8ab9139fbb: mov    %rax,%rsi
  0x00007f8ab9139fbe: callq  0x00007f8acef8bbca
  0x00007f8ab9139fc3: fxrstor64 (%rsp)
  0x00007f8ab9139fc8: add    $0x200,%rsp
  0x00007f8ab9139fcf: mov    (%rsp),%r15
  0x00007f8ab9139fd3: mov    0x8(%rsp),%r14
  0x00007f8ab9139fd8: mov    0x10(%rsp),%r13
  0x00007f8ab9139fdd: mov    0x18(%rsp),%r12
  0x00007f8ab9139fe2: mov    0x20(%rsp),%r11
  0x00007f8ab9139fe7: mov    0x28(%rsp),%r10
  0x00007f8ab9139fec: mov    0x30(%rsp),%r9
  0x00007f8ab9139ff1: mov    0x38(%rsp),%r8
  0x00007f8ab9139ff6: mov    0x40(%rsp),%rdi
  0x00007f8ab9139ffb: mov    0x48(%rsp),%rsi
  0x00007f8ab913a000: mov    0x50(%rsp),%rbp
  0x00007f8ab913a005: mov    0x60(%rsp),%rbx
  0x00007f8ab913a00a: mov    0x68(%rsp),%rdx
  0x00007f8ab913a00f: mov    0x70(%rsp),%rcx
  0x00007f8ab913a014: mov    0x78(%rsp),%rax
  0x00007f8ab913a019: add    $0x80,%rsp
  0x00007f8ab913a020: add    $0x8,%rsp
  0x00007f8ab913a024: popfq  
  0x00007f8ab913a025: mov    %r13,%rsp
  0x00007f8ab913a028: pop    %rax
  0x00007f8ab913a029: mov    %rsp,%r13
  0x00007f8ab913a02c: sub    $0x20,%rsp
  0x00007f8ab913a030: mov    %rax,(%rsp)
  0x00007f8ab913a034: mov    %rsi,0x10(%rsp)
  0x00007f8ab913a039: mov    %rdx,0x8(%rsp)
  0x00007f8ab913a03e: mov    0x40(%rbx),%rcx
  0x00007f8ab913a042: jmpq   *%rcx

AHE@0x00007f8ac80eb098: 0x i2c: 0x00007f8ab913a120 c2i: 0x00007f8ab913a230 c2iUV: 0x00007f8ab913a203
i2c argument handler #0 for: static ()Ljava/lang/Void; (530 bytes generated)
c2i argument handler starts at 0x7f8ab913a230
  0x00007f8ab913a120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913a124: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913a12e: cmp    %r11,%rax
  0x00007f8ab913a131: jbe    0x00007f8ab913a14a
  0x00007f8ab913a137: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913a141: cmp    %r11,%rax
  0x00007f8ab913a144: jb     0x00007f8ab913a1e7
  0x00007f8ab913a14a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913a154: cmp    %r11,%rax
  0x00007f8ab913a157: jbe    0x00007f8ab913a170
  0x00007f8ab913a15d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913a167: cmp    %r11,%rax
  0x00007f8ab913a16a: jb     0x00007f8ab913a1e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913a170: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913a175: sub    $0x80,%rsp
  0x00007f8ab913a17c: mov    %rax,0x78(%rsp)
  0x00007f8ab913a181: mov    %rcx,0x70(%rsp)
  0x00007f8ab913a186: mov    %rdx,0x68(%rsp)
  0x00007f8ab913a18b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913a190: mov    %rbp,0x50(%rsp)
  0x00007f8ab913a195: mov    %rsi,0x48(%rsp)
  0x00007f8ab913a19a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913a19f: mov    %r8,0x38(%rsp)
  0x00007f8ab913a1a4: mov    %r9,0x30(%rsp)
  0x00007f8ab913a1a9: mov    %r10,0x28(%rsp)
  0x00007f8ab913a1ae: mov    %r11,0x20(%rsp)
  0x00007f8ab913a1b3: mov    %r12,0x18(%rsp)
  0x00007f8ab913a1b8: mov    %r13,0x10(%rsp)
  0x00007f8ab913a1bd: mov    %r14,0x8(%rsp)
  0x00007f8ab913a1c2: mov    %r15,(%rsp)
  0x00007f8ab913a1c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913a1d0: movabs $0x7f8ab913a170,%rsi
  0x00007f8ab913a1da: mov    %rsp,%rdx
  0x00007f8ab913a1dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a1e1: callq  0x00007f8aceddb9fa
  0x00007f8ab913a1e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913a1e7: mov    %rsp,%r11
  0x00007f8ab913a1ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a1ee: push   %rax
  0x00007f8ab913a1ef: mov    %r11,%rax
  0x00007f8ab913a1f2: mov    0x50(%rbx),%r11
  0x00007f8ab913a1f6: mov    %rbx,0x258(%r15)
  0x00007f8ab913a1fd: mov    %rbx,%rax
  0x00007f8ab913a200: jmpq   *%r11
  0x00007f8ab913a203: mov    0x8(%rsi),%ebx
  0x00007f8ab913a206: shl    $0x3,%rbx
  0x00007f8ab913a20a: cmp    0x10(%rax),%rbx
  0x00007f8ab913a20e: mov    0x8(%rax),%rbx
  0x00007f8ab913a212: je     0x00007f8ab913a21d
  0x00007f8ab913a218: jmpq   0x00007f8ab9105c40
  0x00007f8ab913a21d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913a225: je     0x00007f8ab913a320
  0x00007f8ab913a22b: jmpq   0x00007f8ab9105c40
  0x00007f8ab913a230: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913a238: je     0x00007f8ab913a320
  0x00007f8ab913a23e: mov    %rsp,%r13
  0x00007f8ab913a241: mov    (%rsp),%rax
  0x00007f8ab913a245: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a249: pushfq 
  0x00007f8ab913a24a: sub    $0x8,%rsp
  0x00007f8ab913a24e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913a253: sub    $0x80,%rsp
  0x00007f8ab913a25a: mov    %rax,0x78(%rsp)
  0x00007f8ab913a25f: mov    %rcx,0x70(%rsp)
  0x00007f8ab913a264: mov    %rdx,0x68(%rsp)
  0x00007f8ab913a269: mov    %rbx,0x60(%rsp)
  0x00007f8ab913a26e: mov    %rbp,0x50(%rsp)
  0x00007f8ab913a273: mov    %rsi,0x48(%rsp)
  0x00007f8ab913a278: mov    %rdi,0x40(%rsp)
  0x00007f8ab913a27d: mov    %r8,0x38(%rsp)
  0x00007f8ab913a282: mov    %r9,0x30(%rsp)
  0x00007f8ab913a287: mov    %r10,0x28(%rsp)
  0x00007f8ab913a28c: mov    %r11,0x20(%rsp)
  0x00007f8ab913a291: mov    %r12,0x18(%rsp)
  0x00007f8ab913a296: mov    %r13,0x10(%rsp)
  0x00007f8ab913a29b: mov    %r14,0x8(%rsp)
  0x00007f8ab913a2a0: mov    %r15,(%rsp)
  0x00007f8ab913a2a4: sub    $0x200,%rsp
  0x00007f8ab913a2ab: fxsave64 (%rsp)
  0x00007f8ab913a2b0: mov    %rbx,%rdi
  0x00007f8ab913a2b3: mov    %rax,%rsi
  0x00007f8ab913a2b6: callq  0x00007f8acef8bbca
  0x00007f8ab913a2bb: fxrstor64 (%rsp)
  0x00007f8ab913a2c0: add    $0x200,%rsp
  0x00007f8ab913a2c7: mov    (%rsp),%r15
  0x00007f8ab913a2cb: mov    0x8(%rsp),%r14
  0x00007f8ab913a2d0: mov    0x10(%rsp),%r13
  0x00007f8ab913a2d5: mov    0x18(%rsp),%r12
  0x00007f8ab913a2da: mov    0x20(%rsp),%r11
  0x00007f8ab913a2df: mov    0x28(%rsp),%r10
  0x00007f8ab913a2e4: mov    0x30(%rsp),%r9
  0x00007f8ab913a2e9: mov    0x38(%rsp),%r8
  0x00007f8ab913a2ee: mov    0x40(%rsp),%rdi
  0x00007f8ab913a2f3: mov    0x48(%rsp),%rsi
  0x00007f8ab913a2f8: mov    0x50(%rsp),%rbp
  0x00007f8ab913a2fd: mov    0x60(%rsp),%rbx
  0x00007f8ab913a302: mov    0x68(%rsp),%rdx
  0x00007f8ab913a307: mov    0x70(%rsp),%rcx
  0x00007f8ab913a30c: mov    0x78(%rsp),%rax
  0x00007f8ab913a311: add    $0x80,%rsp
  0x00007f8ab913a318: add    $0x8,%rsp
  0x00007f8ab913a31c: popfq  
  0x00007f8ab913a31d: mov    %r13,%rsp
  0x00007f8ab913a320: pop    %rax
  0x00007f8ab913a321: mov    %rsp,%r13
  0x00007f8ab913a324: sub    $0x10,%rsp
  0x00007f8ab913a328: mov    %rax,(%rsp)
  0x00007f8ab913a32c: mov    0x40(%rbx),%rcx
  0x00007f8ab913a330: jmpq   *%rcx

AHE@0x00007f8ac80eb0e0: 0xb0000000 i2c: 0x00007f8ab913a3e0 c2i: 0x00007f8ab913a4f4 c2iUV: 0x00007f8ab913a4c7
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/net/URL; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913a4f4
  0x00007f8ab913a3e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913a3e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913a3ee: cmp    %r11,%rax
  0x00007f8ab913a3f1: jbe    0x00007f8ab913a40a
  0x00007f8ab913a3f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913a401: cmp    %r11,%rax
  0x00007f8ab913a404: jb     0x00007f8ab913a4a7
  0x00007f8ab913a40a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913a414: cmp    %r11,%rax
  0x00007f8ab913a417: jbe    0x00007f8ab913a430
  0x00007f8ab913a41d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913a427: cmp    %r11,%rax
  0x00007f8ab913a42a: jb     0x00007f8ab913a4a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913a430: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913a435: sub    $0x80,%rsp
  0x00007f8ab913a43c: mov    %rax,0x78(%rsp)
  0x00007f8ab913a441: mov    %rcx,0x70(%rsp)
  0x00007f8ab913a446: mov    %rdx,0x68(%rsp)
  0x00007f8ab913a44b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913a450: mov    %rbp,0x50(%rsp)
  0x00007f8ab913a455: mov    %rsi,0x48(%rsp)
  0x00007f8ab913a45a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913a45f: mov    %r8,0x38(%rsp)
  0x00007f8ab913a464: mov    %r9,0x30(%rsp)
  0x00007f8ab913a469: mov    %r10,0x28(%rsp)
  0x00007f8ab913a46e: mov    %r11,0x20(%rsp)
  0x00007f8ab913a473: mov    %r12,0x18(%rsp)
  0x00007f8ab913a478: mov    %r13,0x10(%rsp)
  0x00007f8ab913a47d: mov    %r14,0x8(%rsp)
  0x00007f8ab913a482: mov    %r15,(%rsp)
  0x00007f8ab913a486: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913a490: movabs $0x7f8ab913a430,%rsi
  0x00007f8ab913a49a: mov    %rsp,%rdx
  0x00007f8ab913a49d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a4a1: callq  0x00007f8aceddb9fa
  0x00007f8ab913a4a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913a4a7: mov    %rsp,%r11
  0x00007f8ab913a4aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a4ae: push   %rax
  0x00007f8ab913a4af: mov    %r11,%rax
  0x00007f8ab913a4b2: mov    0x50(%rbx),%r11
  0x00007f8ab913a4b6: mov    0x8(%rax),%rsi
  0x00007f8ab913a4ba: mov    %rbx,0x258(%r15)
  0x00007f8ab913a4c1: mov    %rbx,%rax
  0x00007f8ab913a4c4: jmpq   *%r11
  0x00007f8ab913a4c7: mov    0x8(%rsi),%ebx
  0x00007f8ab913a4ca: shl    $0x3,%rbx
  0x00007f8ab913a4ce: cmp    0x10(%rax),%rbx
  0x00007f8ab913a4d2: mov    0x8(%rax),%rbx
  0x00007f8ab913a4d6: je     0x00007f8ab913a4e1
  0x00007f8ab913a4dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab913a4e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913a4e9: je     0x00007f8ab913a5e4
  0x00007f8ab913a4ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab913a4f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913a4fc: je     0x00007f8ab913a5e4
  0x00007f8ab913a502: mov    %rsp,%r13
  0x00007f8ab913a505: mov    (%rsp),%rax
  0x00007f8ab913a509: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a50d: pushfq 
  0x00007f8ab913a50e: sub    $0x8,%rsp
  0x00007f8ab913a512: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913a517: sub    $0x80,%rsp
  0x00007f8ab913a51e: mov    %rax,0x78(%rsp)
  0x00007f8ab913a523: mov    %rcx,0x70(%rsp)
  0x00007f8ab913a528: mov    %rdx,0x68(%rsp)
  0x00007f8ab913a52d: mov    %rbx,0x60(%rsp)
  0x00007f8ab913a532: mov    %rbp,0x50(%rsp)
  0x00007f8ab913a537: mov    %rsi,0x48(%rsp)
  0x00007f8ab913a53c: mov    %rdi,0x40(%rsp)
  0x00007f8ab913a541: mov    %r8,0x38(%rsp)
  0x00007f8ab913a546: mov    %r9,0x30(%rsp)
  0x00007f8ab913a54b: mov    %r10,0x28(%rsp)
  0x00007f8ab913a550: mov    %r11,0x20(%rsp)
  0x00007f8ab913a555: mov    %r12,0x18(%rsp)
  0x00007f8ab913a55a: mov    %r13,0x10(%rsp)
  0x00007f8ab913a55f: mov    %r14,0x8(%rsp)
  0x00007f8ab913a564: mov    %r15,(%rsp)
  0x00007f8ab913a568: sub    $0x200,%rsp
  0x00007f8ab913a56f: fxsave64 (%rsp)
  0x00007f8ab913a574: mov    %rbx,%rdi
  0x00007f8ab913a577: mov    %rax,%rsi
  0x00007f8ab913a57a: callq  0x00007f8acef8bbca
  0x00007f8ab913a57f: fxrstor64 (%rsp)
  0x00007f8ab913a584: add    $0x200,%rsp
  0x00007f8ab913a58b: mov    (%rsp),%r15
  0x00007f8ab913a58f: mov    0x8(%rsp),%r14
  0x00007f8ab913a594: mov    0x10(%rsp),%r13
  0x00007f8ab913a599: mov    0x18(%rsp),%r12
  0x00007f8ab913a59e: mov    0x20(%rsp),%r11
  0x00007f8ab913a5a3: mov    0x28(%rsp),%r10
  0x00007f8ab913a5a8: mov    0x30(%rsp),%r9
  0x00007f8ab913a5ad: mov    0x38(%rsp),%r8
  0x00007f8ab913a5b2: mov    0x40(%rsp),%rdi
  0x00007f8ab913a5b7: mov    0x48(%rsp),%rsi
  0x00007f8ab913a5bc: mov    0x50(%rsp),%rbp
  0x00007f8ab913a5c1: mov    0x60(%rsp),%rbx
  0x00007f8ab913a5c6: mov    0x68(%rsp),%rdx
  0x00007f8ab913a5cb: mov    0x70(%rsp),%rcx
  0x00007f8ab913a5d0: mov    0x78(%rsp),%rax
  0x00007f8ab913a5d5: add    $0x80,%rsp
  0x00007f8ab913a5dc: add    $0x8,%rsp
  0x00007f8ab913a5e0: popfq  
  0x00007f8ab913a5e1: mov    %r13,%rsp
  0x00007f8ab913a5e4: pop    %rax
  0x00007f8ab913a5e5: mov    %rsp,%r13
  0x00007f8ab913a5e8: sub    $0x10,%rsp
  0x00007f8ab913a5ec: mov    %rax,(%rsp)
  0x00007f8ab913a5f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab913a5f5: mov    0x40(%rbx),%rcx
  0x00007f8ab913a5f9: jmpq   *%rcx

AHE@0x00007f8ac80eb128: 0xb0000000 i2c: 0x00007f8ab913a6a0 c2i: 0x00007f8ab913a7b4 c2iUV: 0x00007f8ab913a787
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/io/InputStream; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913a7b4
  0x00007f8ab913a6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913a6a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913a6ae: cmp    %r11,%rax
  0x00007f8ab913a6b1: jbe    0x00007f8ab913a6ca
  0x00007f8ab913a6b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913a6c1: cmp    %r11,%rax
  0x00007f8ab913a6c4: jb     0x00007f8ab913a767
  0x00007f8ab913a6ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913a6d4: cmp    %r11,%rax
  0x00007f8ab913a6d7: jbe    0x00007f8ab913a6f0
  0x00007f8ab913a6dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913a6e7: cmp    %r11,%rax
  0x00007f8ab913a6ea: jb     0x00007f8ab913a767
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913a6f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913a6f5: sub    $0x80,%rsp
  0x00007f8ab913a6fc: mov    %rax,0x78(%rsp)
  0x00007f8ab913a701: mov    %rcx,0x70(%rsp)
  0x00007f8ab913a706: mov    %rdx,0x68(%rsp)
  0x00007f8ab913a70b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913a710: mov    %rbp,0x50(%rsp)
  0x00007f8ab913a715: mov    %rsi,0x48(%rsp)
  0x00007f8ab913a71a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913a71f: mov    %r8,0x38(%rsp)
  0x00007f8ab913a724: mov    %r9,0x30(%rsp)
  0x00007f8ab913a729: mov    %r10,0x28(%rsp)
  0x00007f8ab913a72e: mov    %r11,0x20(%rsp)
  0x00007f8ab913a733: mov    %r12,0x18(%rsp)
  0x00007f8ab913a738: mov    %r13,0x10(%rsp)
  0x00007f8ab913a73d: mov    %r14,0x8(%rsp)
  0x00007f8ab913a742: mov    %r15,(%rsp)
  0x00007f8ab913a746: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913a750: movabs $0x7f8ab913a6f0,%rsi
  0x00007f8ab913a75a: mov    %rsp,%rdx
  0x00007f8ab913a75d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a761: callq  0x00007f8aceddb9fa
  0x00007f8ab913a766: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913a767: mov    %rsp,%r11
  0x00007f8ab913a76a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a76e: push   %rax
  0x00007f8ab913a76f: mov    %r11,%rax
  0x00007f8ab913a772: mov    0x50(%rbx),%r11
  0x00007f8ab913a776: mov    0x8(%rax),%rsi
  0x00007f8ab913a77a: mov    %rbx,0x258(%r15)
  0x00007f8ab913a781: mov    %rbx,%rax
  0x00007f8ab913a784: jmpq   *%r11
  0x00007f8ab913a787: mov    0x8(%rsi),%ebx
  0x00007f8ab913a78a: shl    $0x3,%rbx
  0x00007f8ab913a78e: cmp    0x10(%rax),%rbx
  0x00007f8ab913a792: mov    0x8(%rax),%rbx
  0x00007f8ab913a796: je     0x00007f8ab913a7a1
  0x00007f8ab913a79c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913a7a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913a7a9: je     0x00007f8ab913a8a4
  0x00007f8ab913a7af: jmpq   0x00007f8ab9105c40
  0x00007f8ab913a7b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913a7bc: je     0x00007f8ab913a8a4
  0x00007f8ab913a7c2: mov    %rsp,%r13
  0x00007f8ab913a7c5: mov    (%rsp),%rax
  0x00007f8ab913a7c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913a7cd: pushfq 
  0x00007f8ab913a7ce: sub    $0x8,%rsp
  0x00007f8ab913a7d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913a7d7: sub    $0x80,%rsp
  0x00007f8ab913a7de: mov    %rax,0x78(%rsp)
  0x00007f8ab913a7e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab913a7e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab913a7ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab913a7f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab913a7f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab913a7fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab913a801: mov    %r8,0x38(%rsp)
  0x00007f8ab913a806: mov    %r9,0x30(%rsp)
  0x00007f8ab913a80b: mov    %r10,0x28(%rsp)
  0x00007f8ab913a810: mov    %r11,0x20(%rsp)
  0x00007f8ab913a815: mov    %r12,0x18(%rsp)
  0x00007f8ab913a81a: mov    %r13,0x10(%rsp)
  0x00007f8ab913a81f: mov    %r14,0x8(%rsp)
  0x00007f8ab913a824: mov    %r15,(%rsp)
  0x00007f8ab913a828: sub    $0x200,%rsp
  0x00007f8ab913a82f: fxsave64 (%rsp)
  0x00007f8ab913a834: mov    %rbx,%rdi
  0x00007f8ab913a837: mov    %rax,%rsi
  0x00007f8ab913a83a: callq  0x00007f8acef8bbca
  0x00007f8ab913a83f: fxrstor64 (%rsp)
  0x00007f8ab913a844: add    $0x200,%rsp
  0x00007f8ab913a84b: mov    (%rsp),%r15
  0x00007f8ab913a84f: mov    0x8(%rsp),%r14
  0x00007f8ab913a854: mov    0x10(%rsp),%r13
  0x00007f8ab913a859: mov    0x18(%rsp),%r12
  0x00007f8ab913a85e: mov    0x20(%rsp),%r11
  0x00007f8ab913a863: mov    0x28(%rsp),%r10
  0x00007f8ab913a868: mov    0x30(%rsp),%r9
  0x00007f8ab913a86d: mov    0x38(%rsp),%r8
  0x00007f8ab913a872: mov    0x40(%rsp),%rdi
  0x00007f8ab913a877: mov    0x48(%rsp),%rsi
  0x00007f8ab913a87c: mov    0x50(%rsp),%rbp
  0x00007f8ab913a881: mov    0x60(%rsp),%rbx
  0x00007f8ab913a886: mov    0x68(%rsp),%rdx
  0x00007f8ab913a88b: mov    0x70(%rsp),%rcx
  0x00007f8ab913a890: mov    0x78(%rsp),%rax
  0x00007f8ab913a895: add    $0x80,%rsp
  0x00007f8ab913a89c: add    $0x8,%rsp
  0x00007f8ab913a8a0: popfq  
  0x00007f8ab913a8a1: mov    %r13,%rsp
  0x00007f8ab913a8a4: pop    %rax
  0x00007f8ab913a8a5: mov    %rsp,%r13
  0x00007f8ab913a8a8: sub    $0x10,%rsp
  0x00007f8ab913a8ac: mov    %rax,(%rsp)
  0x00007f8ab913a8b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab913a8b5: mov    0x40(%rbx),%rcx
  0x00007f8ab913a8b9: jmpq   *%rcx

AHE@0x00007f8ac80eb170: 0xbb000000 i2c: 0x00007f8ab913a960 c2i: 0x00007f8ab913aa78 c2iUV: 0x00007f8ab913aa4b
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab913aa78
  0x00007f8ab913a960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913a964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913a96e: cmp    %r11,%rax
  0x00007f8ab913a971: jbe    0x00007f8ab913a98a
  0x00007f8ab913a977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913a981: cmp    %r11,%rax
  0x00007f8ab913a984: jb     0x00007f8ab913aa27
  0x00007f8ab913a98a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913a994: cmp    %r11,%rax
  0x00007f8ab913a997: jbe    0x00007f8ab913a9b0
  0x00007f8ab913a99d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913a9a7: cmp    %r11,%rax
  0x00007f8ab913a9aa: jb     0x00007f8ab913aa27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913a9b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913a9b5: sub    $0x80,%rsp
  0x00007f8ab913a9bc: mov    %rax,0x78(%rsp)
  0x00007f8ab913a9c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913a9c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913a9cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913a9d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913a9d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913a9da: mov    %rdi,0x40(%rsp)
  0x00007f8ab913a9df: mov    %r8,0x38(%rsp)
  0x00007f8ab913a9e4: mov    %r9,0x30(%rsp)
  0x00007f8ab913a9e9: mov    %r10,0x28(%rsp)
  0x00007f8ab913a9ee: mov    %r11,0x20(%rsp)
  0x00007f8ab913a9f3: mov    %r12,0x18(%rsp)
  0x00007f8ab913a9f8: mov    %r13,0x10(%rsp)
  0x00007f8ab913a9fd: mov    %r14,0x8(%rsp)
  0x00007f8ab913aa02: mov    %r15,(%rsp)
  0x00007f8ab913aa06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913aa10: movabs $0x7f8ab913a9b0,%rsi
  0x00007f8ab913aa1a: mov    %rsp,%rdx
  0x00007f8ab913aa1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913aa21: callq  0x00007f8aceddb9fa
  0x00007f8ab913aa26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913aa27: mov    %rsp,%r11
  0x00007f8ab913aa2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913aa2e: push   %rax
  0x00007f8ab913aa2f: mov    %r11,%rax
  0x00007f8ab913aa32: mov    0x50(%rbx),%r11
  0x00007f8ab913aa36: mov    0x10(%rax),%rsi
  0x00007f8ab913aa3a: mov    0x8(%rax),%rdx
  0x00007f8ab913aa3e: mov    %rbx,0x258(%r15)
  0x00007f8ab913aa45: mov    %rbx,%rax
  0x00007f8ab913aa48: jmpq   *%r11
  0x00007f8ab913aa4b: mov    0x8(%rsi),%ebx
  0x00007f8ab913aa4e: shl    $0x3,%rbx
  0x00007f8ab913aa52: cmp    0x10(%rax),%rbx
  0x00007f8ab913aa56: mov    0x8(%rax),%rbx
  0x00007f8ab913aa5a: je     0x00007f8ab913aa65
  0x00007f8ab913aa60: jmpq   0x00007f8ab9105c40
  0x00007f8ab913aa65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913aa6d: je     0x00007f8ab913ab68
  0x00007f8ab913aa73: jmpq   0x00007f8ab9105c40
  0x00007f8ab913aa78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913aa80: je     0x00007f8ab913ab68
  0x00007f8ab913aa86: mov    %rsp,%r13
  0x00007f8ab913aa89: mov    (%rsp),%rax
  0x00007f8ab913aa8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913aa91: pushfq 
  0x00007f8ab913aa92: sub    $0x8,%rsp
  0x00007f8ab913aa96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913aa9b: sub    $0x80,%rsp
  0x00007f8ab913aaa2: mov    %rax,0x78(%rsp)
  0x00007f8ab913aaa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab913aaac: mov    %rdx,0x68(%rsp)
  0x00007f8ab913aab1: mov    %rbx,0x60(%rsp)
  0x00007f8ab913aab6: mov    %rbp,0x50(%rsp)
  0x00007f8ab913aabb: mov    %rsi,0x48(%rsp)
  0x00007f8ab913aac0: mov    %rdi,0x40(%rsp)
  0x00007f8ab913aac5: mov    %r8,0x38(%rsp)
  0x00007f8ab913aaca: mov    %r9,0x30(%rsp)
  0x00007f8ab913aacf: mov    %r10,0x28(%rsp)
  0x00007f8ab913aad4: mov    %r11,0x20(%rsp)
  0x00007f8ab913aad9: mov    %r12,0x18(%rsp)
  0x00007f8ab913aade: mov    %r13,0x10(%rsp)
  0x00007f8ab913aae3: mov    %r14,0x8(%rsp)
  0x00007f8ab913aae8: mov    %r15,(%rsp)
  0x00007f8ab913aaec: sub    $0x200,%rsp
  0x00007f8ab913aaf3: fxsave64 (%rsp)
  0x00007f8ab913aaf8: mov    %rbx,%rdi
  0x00007f8ab913aafb: mov    %rax,%rsi
  0x00007f8ab913aafe: callq  0x00007f8acef8bbca
  0x00007f8ab913ab03: fxrstor64 (%rsp)
  0x00007f8ab913ab08: add    $0x200,%rsp
  0x00007f8ab913ab0f: mov    (%rsp),%r15
  0x00007f8ab913ab13: mov    0x8(%rsp),%r14
  0x00007f8ab913ab18: mov    0x10(%rsp),%r13
  0x00007f8ab913ab1d: mov    0x18(%rsp),%r12
  0x00007f8ab913ab22: mov    0x20(%rsp),%r11
  0x00007f8ab913ab27: mov    0x28(%rsp),%r10
  0x00007f8ab913ab2c: mov    0x30(%rsp),%r9
  0x00007f8ab913ab31: mov    0x38(%rsp),%r8
  0x00007f8ab913ab36: mov    0x40(%rsp),%rdi
  0x00007f8ab913ab3b: mov    0x48(%rsp),%rsi
  0x00007f8ab913ab40: mov    0x50(%rsp),%rbp
  0x00007f8ab913ab45: mov    0x60(%rsp),%rbx
  0x00007f8ab913ab4a: mov    0x68(%rsp),%rdx
  0x00007f8ab913ab4f: mov    0x70(%rsp),%rcx
  0x00007f8ab913ab54: mov    0x78(%rsp),%rax
  0x00007f8ab913ab59: add    $0x80,%rsp
  0x00007f8ab913ab60: add    $0x8,%rsp
  0x00007f8ab913ab64: popfq  
  0x00007f8ab913ab65: mov    %r13,%rsp
  0x00007f8ab913ab68: pop    %rax
  0x00007f8ab913ab69: mov    %rsp,%r13
  0x00007f8ab913ab6c: sub    $0x20,%rsp
  0x00007f8ab913ab70: mov    %rax,(%rsp)
  0x00007f8ab913ab74: mov    %rsi,0x10(%rsp)
  0x00007f8ab913ab79: mov    %rdx,0x8(%rsp)
  0x00007f8ab913ab7e: mov    0x40(%rbx),%rcx
  0x00007f8ab913ab82: jmpq   *%rcx

AHE@0x00007f8ac80eb1b8: 0x i2c: 0x00007f8ab913ac60 c2i: 0x00007f8ab913ad70 c2iUV: 0x00007f8ab913ad43
i2c argument handler #0 for: static ()Ljava/util/Stack; (530 bytes generated)
c2i argument handler starts at 0x7f8ab913ad70
  0x00007f8ab913ac60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913ac64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913ac6e: cmp    %r11,%rax
  0x00007f8ab913ac71: jbe    0x00007f8ab913ac8a
  0x00007f8ab913ac77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913ac81: cmp    %r11,%rax
  0x00007f8ab913ac84: jb     0x00007f8ab913ad27
  0x00007f8ab913ac8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913ac94: cmp    %r11,%rax
  0x00007f8ab913ac97: jbe    0x00007f8ab913acb0
  0x00007f8ab913ac9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913aca7: cmp    %r11,%rax
  0x00007f8ab913acaa: jb     0x00007f8ab913ad27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913acb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913acb5: sub    $0x80,%rsp
  0x00007f8ab913acbc: mov    %rax,0x78(%rsp)
  0x00007f8ab913acc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913acc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913accb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913acd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913acd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913acda: mov    %rdi,0x40(%rsp)
  0x00007f8ab913acdf: mov    %r8,0x38(%rsp)
  0x00007f8ab913ace4: mov    %r9,0x30(%rsp)
  0x00007f8ab913ace9: mov    %r10,0x28(%rsp)
  0x00007f8ab913acee: mov    %r11,0x20(%rsp)
  0x00007f8ab913acf3: mov    %r12,0x18(%rsp)
  0x00007f8ab913acf8: mov    %r13,0x10(%rsp)
  0x00007f8ab913acfd: mov    %r14,0x8(%rsp)
  0x00007f8ab913ad02: mov    %r15,(%rsp)
  0x00007f8ab913ad06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913ad10: movabs $0x7f8ab913acb0,%rsi
  0x00007f8ab913ad1a: mov    %rsp,%rdx
  0x00007f8ab913ad1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ad21: callq  0x00007f8aceddb9fa
  0x00007f8ab913ad26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913ad27: mov    %rsp,%r11
  0x00007f8ab913ad2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ad2e: push   %rax
  0x00007f8ab913ad2f: mov    %r11,%rax
  0x00007f8ab913ad32: mov    0x50(%rbx),%r11
  0x00007f8ab913ad36: mov    %rbx,0x258(%r15)
  0x00007f8ab913ad3d: mov    %rbx,%rax
  0x00007f8ab913ad40: jmpq   *%r11
  0x00007f8ab913ad43: mov    0x8(%rsi),%ebx
  0x00007f8ab913ad46: shl    $0x3,%rbx
  0x00007f8ab913ad4a: cmp    0x10(%rax),%rbx
  0x00007f8ab913ad4e: mov    0x8(%rax),%rbx
  0x00007f8ab913ad52: je     0x00007f8ab913ad5d
  0x00007f8ab913ad58: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ad5d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ad65: je     0x00007f8ab913ae60
  0x00007f8ab913ad6b: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ad70: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ad78: je     0x00007f8ab913ae60
  0x00007f8ab913ad7e: mov    %rsp,%r13
  0x00007f8ab913ad81: mov    (%rsp),%rax
  0x00007f8ab913ad85: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ad89: pushfq 
  0x00007f8ab913ad8a: sub    $0x8,%rsp
  0x00007f8ab913ad8e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913ad93: sub    $0x80,%rsp
  0x00007f8ab913ad9a: mov    %rax,0x78(%rsp)
  0x00007f8ab913ad9f: mov    %rcx,0x70(%rsp)
  0x00007f8ab913ada4: mov    %rdx,0x68(%rsp)
  0x00007f8ab913ada9: mov    %rbx,0x60(%rsp)
  0x00007f8ab913adae: mov    %rbp,0x50(%rsp)
  0x00007f8ab913adb3: mov    %rsi,0x48(%rsp)
  0x00007f8ab913adb8: mov    %rdi,0x40(%rsp)
  0x00007f8ab913adbd: mov    %r8,0x38(%rsp)
  0x00007f8ab913adc2: mov    %r9,0x30(%rsp)
  0x00007f8ab913adc7: mov    %r10,0x28(%rsp)
  0x00007f8ab913adcc: mov    %r11,0x20(%rsp)
  0x00007f8ab913add1: mov    %r12,0x18(%rsp)
  0x00007f8ab913add6: mov    %r13,0x10(%rsp)
  0x00007f8ab913addb: mov    %r14,0x8(%rsp)
  0x00007f8ab913ade0: mov    %r15,(%rsp)
  0x00007f8ab913ade4: sub    $0x200,%rsp
  0x00007f8ab913adeb: fxsave64 (%rsp)
  0x00007f8ab913adf0: mov    %rbx,%rdi
  0x00007f8ab913adf3: mov    %rax,%rsi
  0x00007f8ab913adf6: callq  0x00007f8acef8bbca
  0x00007f8ab913adfb: fxrstor64 (%rsp)
  0x00007f8ab913ae00: add    $0x200,%rsp
  0x00007f8ab913ae07: mov    (%rsp),%r15
  0x00007f8ab913ae0b: mov    0x8(%rsp),%r14
  0x00007f8ab913ae10: mov    0x10(%rsp),%r13
  0x00007f8ab913ae15: mov    0x18(%rsp),%r12
  0x00007f8ab913ae1a: mov    0x20(%rsp),%r11
  0x00007f8ab913ae1f: mov    0x28(%rsp),%r10
  0x00007f8ab913ae24: mov    0x30(%rsp),%r9
  0x00007f8ab913ae29: mov    0x38(%rsp),%r8
  0x00007f8ab913ae2e: mov    0x40(%rsp),%rdi
  0x00007f8ab913ae33: mov    0x48(%rsp),%rsi
  0x00007f8ab913ae38: mov    0x50(%rsp),%rbp
  0x00007f8ab913ae3d: mov    0x60(%rsp),%rbx
  0x00007f8ab913ae42: mov    0x68(%rsp),%rdx
  0x00007f8ab913ae47: mov    0x70(%rsp),%rcx
  0x00007f8ab913ae4c: mov    0x78(%rsp),%rax
  0x00007f8ab913ae51: add    $0x80,%rsp
  0x00007f8ab913ae58: add    $0x8,%rsp
  0x00007f8ab913ae5c: popfq  
  0x00007f8ab913ae5d: mov    %r13,%rsp
  0x00007f8ab913ae60: pop    %rax
  0x00007f8ab913ae61: mov    %rsp,%r13
  0x00007f8ab913ae64: sub    $0x10,%rsp
  0x00007f8ab913ae68: mov    %rax,(%rsp)
  0x00007f8ab913ae6c: mov    0x40(%rbx),%rcx
  0x00007f8ab913ae70: jmpq   *%rcx

AHE@0x00007f8ac80eb200: 0xbb000000 i2c: 0x00007f8ab913af20 c2i: 0x00007f8ab913b038 c2iUV: 0x00007f8ab913b00b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab913b038
  0x00007f8ab913af20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913af24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913af2e: cmp    %r11,%rax
  0x00007f8ab913af31: jbe    0x00007f8ab913af4a
  0x00007f8ab913af37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913af41: cmp    %r11,%rax
  0x00007f8ab913af44: jb     0x00007f8ab913afe7
  0x00007f8ab913af4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913af54: cmp    %r11,%rax
  0x00007f8ab913af57: jbe    0x00007f8ab913af70
  0x00007f8ab913af5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913af67: cmp    %r11,%rax
  0x00007f8ab913af6a: jb     0x00007f8ab913afe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913af70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913af75: sub    $0x80,%rsp
  0x00007f8ab913af7c: mov    %rax,0x78(%rsp)
  0x00007f8ab913af81: mov    %rcx,0x70(%rsp)
  0x00007f8ab913af86: mov    %rdx,0x68(%rsp)
  0x00007f8ab913af8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913af90: mov    %rbp,0x50(%rsp)
  0x00007f8ab913af95: mov    %rsi,0x48(%rsp)
  0x00007f8ab913af9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913af9f: mov    %r8,0x38(%rsp)
  0x00007f8ab913afa4: mov    %r9,0x30(%rsp)
  0x00007f8ab913afa9: mov    %r10,0x28(%rsp)
  0x00007f8ab913afae: mov    %r11,0x20(%rsp)
  0x00007f8ab913afb3: mov    %r12,0x18(%rsp)
  0x00007f8ab913afb8: mov    %r13,0x10(%rsp)
  0x00007f8ab913afbd: mov    %r14,0x8(%rsp)
  0x00007f8ab913afc2: mov    %r15,(%rsp)
  0x00007f8ab913afc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913afd0: movabs $0x7f8ab913af70,%rsi
  0x00007f8ab913afda: mov    %rsp,%rdx
  0x00007f8ab913afdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913afe1: callq  0x00007f8aceddb9fa
  0x00007f8ab913afe6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913afe7: mov    %rsp,%r11
  0x00007f8ab913afea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913afee: push   %rax
  0x00007f8ab913afef: mov    %r11,%rax
  0x00007f8ab913aff2: mov    0x50(%rbx),%r11
  0x00007f8ab913aff6: mov    0x10(%rax),%rsi
  0x00007f8ab913affa: mov    0x8(%rax),%rdx
  0x00007f8ab913affe: mov    %rbx,0x258(%r15)
  0x00007f8ab913b005: mov    %rbx,%rax
  0x00007f8ab913b008: jmpq   *%r11
  0x00007f8ab913b00b: mov    0x8(%rsi),%ebx
  0x00007f8ab913b00e: shl    $0x3,%rbx
  0x00007f8ab913b012: cmp    0x10(%rax),%rbx
  0x00007f8ab913b016: mov    0x8(%rax),%rbx
  0x00007f8ab913b01a: je     0x00007f8ab913b025
  0x00007f8ab913b020: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b025: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b02d: je     0x00007f8ab913b128
  0x00007f8ab913b033: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b038: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b040: je     0x00007f8ab913b128
  0x00007f8ab913b046: mov    %rsp,%r13
  0x00007f8ab913b049: mov    (%rsp),%rax
  0x00007f8ab913b04d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b051: pushfq 
  0x00007f8ab913b052: sub    $0x8,%rsp
  0x00007f8ab913b056: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913b05b: sub    $0x80,%rsp
  0x00007f8ab913b062: mov    %rax,0x78(%rsp)
  0x00007f8ab913b067: mov    %rcx,0x70(%rsp)
  0x00007f8ab913b06c: mov    %rdx,0x68(%rsp)
  0x00007f8ab913b071: mov    %rbx,0x60(%rsp)
  0x00007f8ab913b076: mov    %rbp,0x50(%rsp)
  0x00007f8ab913b07b: mov    %rsi,0x48(%rsp)
  0x00007f8ab913b080: mov    %rdi,0x40(%rsp)
  0x00007f8ab913b085: mov    %r8,0x38(%rsp)
  0x00007f8ab913b08a: mov    %r9,0x30(%rsp)
  0x00007f8ab913b08f: mov    %r10,0x28(%rsp)
  0x00007f8ab913b094: mov    %r11,0x20(%rsp)
  0x00007f8ab913b099: mov    %r12,0x18(%rsp)
  0x00007f8ab913b09e: mov    %r13,0x10(%rsp)
  0x00007f8ab913b0a3: mov    %r14,0x8(%rsp)
  0x00007f8ab913b0a8: mov    %r15,(%rsp)
  0x00007f8ab913b0ac: sub    $0x200,%rsp
  0x00007f8ab913b0b3: fxsave64 (%rsp)
  0x00007f8ab913b0b8: mov    %rbx,%rdi
  0x00007f8ab913b0bb: mov    %rax,%rsi
  0x00007f8ab913b0be: callq  0x00007f8acef8bbca
  0x00007f8ab913b0c3: fxrstor64 (%rsp)
  0x00007f8ab913b0c8: add    $0x200,%rsp
  0x00007f8ab913b0cf: mov    (%rsp),%r15
  0x00007f8ab913b0d3: mov    0x8(%rsp),%r14
  0x00007f8ab913b0d8: mov    0x10(%rsp),%r13
  0x00007f8ab913b0dd: mov    0x18(%rsp),%r12
  0x00007f8ab913b0e2: mov    0x20(%rsp),%r11
  0x00007f8ab913b0e7: mov    0x28(%rsp),%r10
  0x00007f8ab913b0ec: mov    0x30(%rsp),%r9
  0x00007f8ab913b0f1: mov    0x38(%rsp),%r8
  0x00007f8ab913b0f6: mov    0x40(%rsp),%rdi
  0x00007f8ab913b0fb: mov    0x48(%rsp),%rsi
  0x00007f8ab913b100: mov    0x50(%rsp),%rbp
  0x00007f8ab913b105: mov    0x60(%rsp),%rbx
  0x00007f8ab913b10a: mov    0x68(%rsp),%rdx
  0x00007f8ab913b10f: mov    0x70(%rsp),%rcx
  0x00007f8ab913b114: mov    0x78(%rsp),%rax
  0x00007f8ab913b119: add    $0x80,%rsp
  0x00007f8ab913b120: add    $0x8,%rsp
  0x00007f8ab913b124: popfq  
  0x00007f8ab913b125: mov    %r13,%rsp
  0x00007f8ab913b128: pop    %rax
  0x00007f8ab913b129: mov    %rsp,%r13
  0x00007f8ab913b12c: sub    $0x20,%rsp
  0x00007f8ab913b130: mov    %rax,(%rsp)
  0x00007f8ab913b134: mov    %rsi,0x10(%rsp)
  0x00007f8ab913b139: mov    %rdx,0x8(%rsp)
  0x00007f8ab913b13e: mov    0x40(%rbx),%rcx
  0x00007f8ab913b142: jmpq   *%rcx

AHE@0x00007f8ac80eb248: 0xbb000000 i2c: 0x00007f8ab913b220 c2i: 0x00007f8ab913b338 c2iUV: 0x00007f8ab913b30b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/net/URL; (548 bytes generated)
c2i argument handler starts at 0x7f8ab913b338
  0x00007f8ab913b220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913b224: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913b22e: cmp    %r11,%rax
  0x00007f8ab913b231: jbe    0x00007f8ab913b24a
  0x00007f8ab913b237: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913b241: cmp    %r11,%rax
  0x00007f8ab913b244: jb     0x00007f8ab913b2e7
  0x00007f8ab913b24a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913b254: cmp    %r11,%rax
  0x00007f8ab913b257: jbe    0x00007f8ab913b270
  0x00007f8ab913b25d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913b267: cmp    %r11,%rax
  0x00007f8ab913b26a: jb     0x00007f8ab913b2e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913b270: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913b275: sub    $0x80,%rsp
  0x00007f8ab913b27c: mov    %rax,0x78(%rsp)
  0x00007f8ab913b281: mov    %rcx,0x70(%rsp)
  0x00007f8ab913b286: mov    %rdx,0x68(%rsp)
  0x00007f8ab913b28b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913b290: mov    %rbp,0x50(%rsp)
  0x00007f8ab913b295: mov    %rsi,0x48(%rsp)
  0x00007f8ab913b29a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913b29f: mov    %r8,0x38(%rsp)
  0x00007f8ab913b2a4: mov    %r9,0x30(%rsp)
  0x00007f8ab913b2a9: mov    %r10,0x28(%rsp)
  0x00007f8ab913b2ae: mov    %r11,0x20(%rsp)
  0x00007f8ab913b2b3: mov    %r12,0x18(%rsp)
  0x00007f8ab913b2b8: mov    %r13,0x10(%rsp)
  0x00007f8ab913b2bd: mov    %r14,0x8(%rsp)
  0x00007f8ab913b2c2: mov    %r15,(%rsp)
  0x00007f8ab913b2c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913b2d0: movabs $0x7f8ab913b270,%rsi
  0x00007f8ab913b2da: mov    %rsp,%rdx
  0x00007f8ab913b2dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b2e1: callq  0x00007f8aceddb9fa
  0x00007f8ab913b2e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913b2e7: mov    %rsp,%r11
  0x00007f8ab913b2ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b2ee: push   %rax
  0x00007f8ab913b2ef: mov    %r11,%rax
  0x00007f8ab913b2f2: mov    0x50(%rbx),%r11
  0x00007f8ab913b2f6: mov    0x10(%rax),%rsi
  0x00007f8ab913b2fa: mov    0x8(%rax),%rdx
  0x00007f8ab913b2fe: mov    %rbx,0x258(%r15)
  0x00007f8ab913b305: mov    %rbx,%rax
  0x00007f8ab913b308: jmpq   *%r11
  0x00007f8ab913b30b: mov    0x8(%rsi),%ebx
  0x00007f8ab913b30e: shl    $0x3,%rbx
  0x00007f8ab913b312: cmp    0x10(%rax),%rbx
  0x00007f8ab913b316: mov    0x8(%rax),%rbx
  0x00007f8ab913b31a: je     0x00007f8ab913b325
  0x00007f8ab913b320: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b325: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b32d: je     0x00007f8ab913b428
  0x00007f8ab913b333: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b338: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b340: je     0x00007f8ab913b428
  0x00007f8ab913b346: mov    %rsp,%r13
  0x00007f8ab913b349: mov    (%rsp),%rax
  0x00007f8ab913b34d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b351: pushfq 
  0x00007f8ab913b352: sub    $0x8,%rsp
  0x00007f8ab913b356: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913b35b: sub    $0x80,%rsp
  0x00007f8ab913b362: mov    %rax,0x78(%rsp)
  0x00007f8ab913b367: mov    %rcx,0x70(%rsp)
  0x00007f8ab913b36c: mov    %rdx,0x68(%rsp)
  0x00007f8ab913b371: mov    %rbx,0x60(%rsp)
  0x00007f8ab913b376: mov    %rbp,0x50(%rsp)
  0x00007f8ab913b37b: mov    %rsi,0x48(%rsp)
  0x00007f8ab913b380: mov    %rdi,0x40(%rsp)
  0x00007f8ab913b385: mov    %r8,0x38(%rsp)
  0x00007f8ab913b38a: mov    %r9,0x30(%rsp)
  0x00007f8ab913b38f: mov    %r10,0x28(%rsp)
  0x00007f8ab913b394: mov    %r11,0x20(%rsp)
  0x00007f8ab913b399: mov    %r12,0x18(%rsp)
  0x00007f8ab913b39e: mov    %r13,0x10(%rsp)
  0x00007f8ab913b3a3: mov    %r14,0x8(%rsp)
  0x00007f8ab913b3a8: mov    %r15,(%rsp)
  0x00007f8ab913b3ac: sub    $0x200,%rsp
  0x00007f8ab913b3b3: fxsave64 (%rsp)
  0x00007f8ab913b3b8: mov    %rbx,%rdi
  0x00007f8ab913b3bb: mov    %rax,%rsi
  0x00007f8ab913b3be: callq  0x00007f8acef8bbca
  0x00007f8ab913b3c3: fxrstor64 (%rsp)
  0x00007f8ab913b3c8: add    $0x200,%rsp
  0x00007f8ab913b3cf: mov    (%rsp),%r15
  0x00007f8ab913b3d3: mov    0x8(%rsp),%r14
  0x00007f8ab913b3d8: mov    0x10(%rsp),%r13
  0x00007f8ab913b3dd: mov    0x18(%rsp),%r12
  0x00007f8ab913b3e2: mov    0x20(%rsp),%r11
  0x00007f8ab913b3e7: mov    0x28(%rsp),%r10
  0x00007f8ab913b3ec: mov    0x30(%rsp),%r9
  0x00007f8ab913b3f1: mov    0x38(%rsp),%r8
  0x00007f8ab913b3f6: mov    0x40(%rsp),%rdi
  0x00007f8ab913b3fb: mov    0x48(%rsp),%rsi
  0x00007f8ab913b400: mov    0x50(%rsp),%rbp
  0x00007f8ab913b405: mov    0x60(%rsp),%rbx
  0x00007f8ab913b40a: mov    0x68(%rsp),%rdx
  0x00007f8ab913b40f: mov    0x70(%rsp),%rcx
  0x00007f8ab913b414: mov    0x78(%rsp),%rax
  0x00007f8ab913b419: add    $0x80,%rsp
  0x00007f8ab913b420: add    $0x8,%rsp
  0x00007f8ab913b424: popfq  
  0x00007f8ab913b425: mov    %r13,%rsp
  0x00007f8ab913b428: pop    %rax
  0x00007f8ab913b429: mov    %rsp,%r13
  0x00007f8ab913b42c: sub    $0x20,%rsp
  0x00007f8ab913b430: mov    %rax,(%rsp)
  0x00007f8ab913b434: mov    %rsi,0x10(%rsp)
  0x00007f8ab913b439: mov    %rdx,0x8(%rsp)
  0x00007f8ab913b43e: mov    0x40(%rbx),%rcx
  0x00007f8ab913b442: jmpq   *%rcx

AHE@0x00007f8ac80eb290: 0xbb000000 i2c: 0x00007f8ab913b520 c2i: 0x00007f8ab913b638 c2iUV: 0x00007f8ab913b60b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/io/InputStream; (548 bytes generated)
c2i argument handler starts at 0x7f8ab913b638
  0x00007f8ab913b520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913b524: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913b52e: cmp    %r11,%rax
  0x00007f8ab913b531: jbe    0x00007f8ab913b54a
  0x00007f8ab913b537: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913b541: cmp    %r11,%rax
  0x00007f8ab913b544: jb     0x00007f8ab913b5e7
  0x00007f8ab913b54a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913b554: cmp    %r11,%rax
  0x00007f8ab913b557: jbe    0x00007f8ab913b570
  0x00007f8ab913b55d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913b567: cmp    %r11,%rax
  0x00007f8ab913b56a: jb     0x00007f8ab913b5e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913b570: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913b575: sub    $0x80,%rsp
  0x00007f8ab913b57c: mov    %rax,0x78(%rsp)
  0x00007f8ab913b581: mov    %rcx,0x70(%rsp)
  0x00007f8ab913b586: mov    %rdx,0x68(%rsp)
  0x00007f8ab913b58b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913b590: mov    %rbp,0x50(%rsp)
  0x00007f8ab913b595: mov    %rsi,0x48(%rsp)
  0x00007f8ab913b59a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913b59f: mov    %r8,0x38(%rsp)
  0x00007f8ab913b5a4: mov    %r9,0x30(%rsp)
  0x00007f8ab913b5a9: mov    %r10,0x28(%rsp)
  0x00007f8ab913b5ae: mov    %r11,0x20(%rsp)
  0x00007f8ab913b5b3: mov    %r12,0x18(%rsp)
  0x00007f8ab913b5b8: mov    %r13,0x10(%rsp)
  0x00007f8ab913b5bd: mov    %r14,0x8(%rsp)
  0x00007f8ab913b5c2: mov    %r15,(%rsp)
  0x00007f8ab913b5c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913b5d0: movabs $0x7f8ab913b570,%rsi
  0x00007f8ab913b5da: mov    %rsp,%rdx
  0x00007f8ab913b5dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b5e1: callq  0x00007f8aceddb9fa
  0x00007f8ab913b5e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913b5e7: mov    %rsp,%r11
  0x00007f8ab913b5ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b5ee: push   %rax
  0x00007f8ab913b5ef: mov    %r11,%rax
  0x00007f8ab913b5f2: mov    0x50(%rbx),%r11
  0x00007f8ab913b5f6: mov    0x10(%rax),%rsi
  0x00007f8ab913b5fa: mov    0x8(%rax),%rdx
  0x00007f8ab913b5fe: mov    %rbx,0x258(%r15)
  0x00007f8ab913b605: mov    %rbx,%rax
  0x00007f8ab913b608: jmpq   *%r11
  0x00007f8ab913b60b: mov    0x8(%rsi),%ebx
  0x00007f8ab913b60e: shl    $0x3,%rbx
  0x00007f8ab913b612: cmp    0x10(%rax),%rbx
  0x00007f8ab913b616: mov    0x8(%rax),%rbx
  0x00007f8ab913b61a: je     0x00007f8ab913b625
  0x00007f8ab913b620: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b625: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b62d: je     0x00007f8ab913b728
  0x00007f8ab913b633: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b638: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b640: je     0x00007f8ab913b728
  0x00007f8ab913b646: mov    %rsp,%r13
  0x00007f8ab913b649: mov    (%rsp),%rax
  0x00007f8ab913b64d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b651: pushfq 
  0x00007f8ab913b652: sub    $0x8,%rsp
  0x00007f8ab913b656: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913b65b: sub    $0x80,%rsp
  0x00007f8ab913b662: mov    %rax,0x78(%rsp)
  0x00007f8ab913b667: mov    %rcx,0x70(%rsp)
  0x00007f8ab913b66c: mov    %rdx,0x68(%rsp)
  0x00007f8ab913b671: mov    %rbx,0x60(%rsp)
  0x00007f8ab913b676: mov    %rbp,0x50(%rsp)
  0x00007f8ab913b67b: mov    %rsi,0x48(%rsp)
  0x00007f8ab913b680: mov    %rdi,0x40(%rsp)
  0x00007f8ab913b685: mov    %r8,0x38(%rsp)
  0x00007f8ab913b68a: mov    %r9,0x30(%rsp)
  0x00007f8ab913b68f: mov    %r10,0x28(%rsp)
  0x00007f8ab913b694: mov    %r11,0x20(%rsp)
  0x00007f8ab913b699: mov    %r12,0x18(%rsp)
  0x00007f8ab913b69e: mov    %r13,0x10(%rsp)
  0x00007f8ab913b6a3: mov    %r14,0x8(%rsp)
  0x00007f8ab913b6a8: mov    %r15,(%rsp)
  0x00007f8ab913b6ac: sub    $0x200,%rsp
  0x00007f8ab913b6b3: fxsave64 (%rsp)
  0x00007f8ab913b6b8: mov    %rbx,%rdi
  0x00007f8ab913b6bb: mov    %rax,%rsi
  0x00007f8ab913b6be: callq  0x00007f8acef8bbca
  0x00007f8ab913b6c3: fxrstor64 (%rsp)
  0x00007f8ab913b6c8: add    $0x200,%rsp
  0x00007f8ab913b6cf: mov    (%rsp),%r15
  0x00007f8ab913b6d3: mov    0x8(%rsp),%r14
  0x00007f8ab913b6d8: mov    0x10(%rsp),%r13
  0x00007f8ab913b6dd: mov    0x18(%rsp),%r12
  0x00007f8ab913b6e2: mov    0x20(%rsp),%r11
  0x00007f8ab913b6e7: mov    0x28(%rsp),%r10
  0x00007f8ab913b6ec: mov    0x30(%rsp),%r9
  0x00007f8ab913b6f1: mov    0x38(%rsp),%r8
  0x00007f8ab913b6f6: mov    0x40(%rsp),%rdi
  0x00007f8ab913b6fb: mov    0x48(%rsp),%rsi
  0x00007f8ab913b700: mov    0x50(%rsp),%rbp
  0x00007f8ab913b705: mov    0x60(%rsp),%rbx
  0x00007f8ab913b70a: mov    0x68(%rsp),%rdx
  0x00007f8ab913b70f: mov    0x70(%rsp),%rcx
  0x00007f8ab913b714: mov    0x78(%rsp),%rax
  0x00007f8ab913b719: add    $0x80,%rsp
  0x00007f8ab913b720: add    $0x8,%rsp
  0x00007f8ab913b724: popfq  
  0x00007f8ab913b725: mov    %r13,%rsp
  0x00007f8ab913b728: pop    %rax
  0x00007f8ab913b729: mov    %rsp,%r13
  0x00007f8ab913b72c: sub    $0x20,%rsp
  0x00007f8ab913b730: mov    %rax,(%rsp)
  0x00007f8ab913b734: mov    %rsi,0x10(%rsp)
  0x00007f8ab913b739: mov    %rdx,0x8(%rsp)
  0x00007f8ab913b73e: mov    0x40(%rbx),%rcx
  0x00007f8ab913b742: jmpq   *%rcx

AHE@0x00007f8ac80eb2d8: 0xbbb00000 i2c: 0x00007f8ab913b820 c2i: 0x00007f8ab913b93c c2iUV: 0x00007f8ab913b90f
i2c argument handler #0 for: receiver (Ljava/lang/Class;[Ljava/lang/Object;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab913b93c
  0x00007f8ab913b820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913b824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913b82e: cmp    %r11,%rax
  0x00007f8ab913b831: jbe    0x00007f8ab913b84a
  0x00007f8ab913b837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913b841: cmp    %r11,%rax
  0x00007f8ab913b844: jb     0x00007f8ab913b8e7
  0x00007f8ab913b84a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913b854: cmp    %r11,%rax
  0x00007f8ab913b857: jbe    0x00007f8ab913b870
  0x00007f8ab913b85d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913b867: cmp    %r11,%rax
  0x00007f8ab913b86a: jb     0x00007f8ab913b8e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913b870: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913b875: sub    $0x80,%rsp
  0x00007f8ab913b87c: mov    %rax,0x78(%rsp)
  0x00007f8ab913b881: mov    %rcx,0x70(%rsp)
  0x00007f8ab913b886: mov    %rdx,0x68(%rsp)
  0x00007f8ab913b88b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913b890: mov    %rbp,0x50(%rsp)
  0x00007f8ab913b895: mov    %rsi,0x48(%rsp)
  0x00007f8ab913b89a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913b89f: mov    %r8,0x38(%rsp)
  0x00007f8ab913b8a4: mov    %r9,0x30(%rsp)
  0x00007f8ab913b8a9: mov    %r10,0x28(%rsp)
  0x00007f8ab913b8ae: mov    %r11,0x20(%rsp)
  0x00007f8ab913b8b3: mov    %r12,0x18(%rsp)
  0x00007f8ab913b8b8: mov    %r13,0x10(%rsp)
  0x00007f8ab913b8bd: mov    %r14,0x8(%rsp)
  0x00007f8ab913b8c2: mov    %r15,(%rsp)
  0x00007f8ab913b8c6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913b8d0: movabs $0x7f8ab913b870,%rsi
  0x00007f8ab913b8da: mov    %rsp,%rdx
  0x00007f8ab913b8dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b8e1: callq  0x00007f8aceddb9fa
  0x00007f8ab913b8e6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913b8e7: mov    %rsp,%r11
  0x00007f8ab913b8ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b8ee: push   %rax
  0x00007f8ab913b8ef: mov    %r11,%rax
  0x00007f8ab913b8f2: mov    0x50(%rbx),%r11
  0x00007f8ab913b8f6: mov    0x18(%rax),%rsi
  0x00007f8ab913b8fa: mov    0x10(%rax),%rdx
  0x00007f8ab913b8fe: mov    0x8(%rax),%rcx
  0x00007f8ab913b902: mov    %rbx,0x258(%r15)
  0x00007f8ab913b909: mov    %rbx,%rax
  0x00007f8ab913b90c: jmpq   *%r11
  0x00007f8ab913b90f: mov    0x8(%rsi),%ebx
  0x00007f8ab913b912: shl    $0x3,%rbx
  0x00007f8ab913b916: cmp    0x10(%rax),%rbx
  0x00007f8ab913b91a: mov    0x8(%rax),%rbx
  0x00007f8ab913b91e: je     0x00007f8ab913b929
  0x00007f8ab913b924: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b929: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b931: je     0x00007f8ab913ba2c
  0x00007f8ab913b937: jmpq   0x00007f8ab9105c40
  0x00007f8ab913b93c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913b944: je     0x00007f8ab913ba2c
  0x00007f8ab913b94a: mov    %rsp,%r13
  0x00007f8ab913b94d: mov    (%rsp),%rax
  0x00007f8ab913b951: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913b955: pushfq 
  0x00007f8ab913b956: sub    $0x8,%rsp
  0x00007f8ab913b95a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913b95f: sub    $0x80,%rsp
  0x00007f8ab913b966: mov    %rax,0x78(%rsp)
  0x00007f8ab913b96b: mov    %rcx,0x70(%rsp)
  0x00007f8ab913b970: mov    %rdx,0x68(%rsp)
  0x00007f8ab913b975: mov    %rbx,0x60(%rsp)
  0x00007f8ab913b97a: mov    %rbp,0x50(%rsp)
  0x00007f8ab913b97f: mov    %rsi,0x48(%rsp)
  0x00007f8ab913b984: mov    %rdi,0x40(%rsp)
  0x00007f8ab913b989: mov    %r8,0x38(%rsp)
  0x00007f8ab913b98e: mov    %r9,0x30(%rsp)
  0x00007f8ab913b993: mov    %r10,0x28(%rsp)
  0x00007f8ab913b998: mov    %r11,0x20(%rsp)
  0x00007f8ab913b99d: mov    %r12,0x18(%rsp)
  0x00007f8ab913b9a2: mov    %r13,0x10(%rsp)
  0x00007f8ab913b9a7: mov    %r14,0x8(%rsp)
  0x00007f8ab913b9ac: mov    %r15,(%rsp)
  0x00007f8ab913b9b0: sub    $0x200,%rsp
  0x00007f8ab913b9b7: fxsave64 (%rsp)
  0x00007f8ab913b9bc: mov    %rbx,%rdi
  0x00007f8ab913b9bf: mov    %rax,%rsi
  0x00007f8ab913b9c2: callq  0x00007f8acef8bbca
  0x00007f8ab913b9c7: fxrstor64 (%rsp)
  0x00007f8ab913b9cc: add    $0x200,%rsp
  0x00007f8ab913b9d3: mov    (%rsp),%r15
  0x00007f8ab913b9d7: mov    0x8(%rsp),%r14
  0x00007f8ab913b9dc: mov    0x10(%rsp),%r13
  0x00007f8ab913b9e1: mov    0x18(%rsp),%r12
  0x00007f8ab913b9e6: mov    0x20(%rsp),%r11
  0x00007f8ab913b9eb: mov    0x28(%rsp),%r10
  0x00007f8ab913b9f0: mov    0x30(%rsp),%r9
  0x00007f8ab913b9f5: mov    0x38(%rsp),%r8
  0x00007f8ab913b9fa: mov    0x40(%rsp),%rdi
  0x00007f8ab913b9ff: mov    0x48(%rsp),%rsi
  0x00007f8ab913ba04: mov    0x50(%rsp),%rbp
  0x00007f8ab913ba09: mov    0x60(%rsp),%rbx
  0x00007f8ab913ba0e: mov    0x68(%rsp),%rdx
  0x00007f8ab913ba13: mov    0x70(%rsp),%rcx
  0x00007f8ab913ba18: mov    0x78(%rsp),%rax
  0x00007f8ab913ba1d: add    $0x80,%rsp
  0x00007f8ab913ba24: add    $0x8,%rsp
  0x00007f8ab913ba28: popfq  
  0x00007f8ab913ba29: mov    %r13,%rsp
  0x00007f8ab913ba2c: pop    %rax
  0x00007f8ab913ba2d: mov    %rsp,%r13
  0x00007f8ab913ba30: sub    $0x20,%rsp
  0x00007f8ab913ba34: mov    %rax,(%rsp)
  0x00007f8ab913ba38: mov    %rsi,0x18(%rsp)
  0x00007f8ab913ba3d: mov    %rdx,0x10(%rsp)
  0x00007f8ab913ba42: mov    %rcx,0x8(%rsp)
  0x00007f8ab913ba47: mov    0x40(%rbx),%rcx
  0x00007f8ab913ba4b: jmpq   *%rcx

AHE@0x00007f8ac80eb320: 0xbb000000 i2c: 0x00007f8ab913bb20 c2i: 0x00007f8ab913bc38 c2iUV: 0x00007f8ab913bc0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Package; (548 bytes generated)
c2i argument handler starts at 0x7f8ab913bc38
  0x00007f8ab913bb20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913bb24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913bb2e: cmp    %r11,%rax
  0x00007f8ab913bb31: jbe    0x00007f8ab913bb4a
  0x00007f8ab913bb37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913bb41: cmp    %r11,%rax
  0x00007f8ab913bb44: jb     0x00007f8ab913bbe7
  0x00007f8ab913bb4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913bb54: cmp    %r11,%rax
  0x00007f8ab913bb57: jbe    0x00007f8ab913bb70
  0x00007f8ab913bb5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913bb67: cmp    %r11,%rax
  0x00007f8ab913bb6a: jb     0x00007f8ab913bbe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913bb70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913bb75: sub    $0x80,%rsp
  0x00007f8ab913bb7c: mov    %rax,0x78(%rsp)
  0x00007f8ab913bb81: mov    %rcx,0x70(%rsp)
  0x00007f8ab913bb86: mov    %rdx,0x68(%rsp)
  0x00007f8ab913bb8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913bb90: mov    %rbp,0x50(%rsp)
  0x00007f8ab913bb95: mov    %rsi,0x48(%rsp)
  0x00007f8ab913bb9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913bb9f: mov    %r8,0x38(%rsp)
  0x00007f8ab913bba4: mov    %r9,0x30(%rsp)
  0x00007f8ab913bba9: mov    %r10,0x28(%rsp)
  0x00007f8ab913bbae: mov    %r11,0x20(%rsp)
  0x00007f8ab913bbb3: mov    %r12,0x18(%rsp)
  0x00007f8ab913bbb8: mov    %r13,0x10(%rsp)
  0x00007f8ab913bbbd: mov    %r14,0x8(%rsp)
  0x00007f8ab913bbc2: mov    %r15,(%rsp)
  0x00007f8ab913bbc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913bbd0: movabs $0x7f8ab913bb70,%rsi
  0x00007f8ab913bbda: mov    %rsp,%rdx
  0x00007f8ab913bbdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913bbe1: callq  0x00007f8aceddb9fa
  0x00007f8ab913bbe6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913bbe7: mov    %rsp,%r11
  0x00007f8ab913bbea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913bbee: push   %rax
  0x00007f8ab913bbef: mov    %r11,%rax
  0x00007f8ab913bbf2: mov    0x50(%rbx),%r11
  0x00007f8ab913bbf6: mov    0x10(%rax),%rsi
  0x00007f8ab913bbfa: mov    0x8(%rax),%rdx
  0x00007f8ab913bbfe: mov    %rbx,0x258(%r15)
  0x00007f8ab913bc05: mov    %rbx,%rax
  0x00007f8ab913bc08: jmpq   *%r11
  0x00007f8ab913bc0b: mov    0x8(%rsi),%ebx
  0x00007f8ab913bc0e: shl    $0x3,%rbx
  0x00007f8ab913bc12: cmp    0x10(%rax),%rbx
  0x00007f8ab913bc16: mov    0x8(%rax),%rbx
  0x00007f8ab913bc1a: je     0x00007f8ab913bc25
  0x00007f8ab913bc20: jmpq   0x00007f8ab9105c40
  0x00007f8ab913bc25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913bc2d: je     0x00007f8ab913bd28
  0x00007f8ab913bc33: jmpq   0x00007f8ab9105c40
  0x00007f8ab913bc38: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913bc40: je     0x00007f8ab913bd28
  0x00007f8ab913bc46: mov    %rsp,%r13
  0x00007f8ab913bc49: mov    (%rsp),%rax
  0x00007f8ab913bc4d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913bc51: pushfq 
  0x00007f8ab913bc52: sub    $0x8,%rsp
  0x00007f8ab913bc56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913bc5b: sub    $0x80,%rsp
  0x00007f8ab913bc62: mov    %rax,0x78(%rsp)
  0x00007f8ab913bc67: mov    %rcx,0x70(%rsp)
  0x00007f8ab913bc6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab913bc71: mov    %rbx,0x60(%rsp)
  0x00007f8ab913bc76: mov    %rbp,0x50(%rsp)
  0x00007f8ab913bc7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab913bc80: mov    %rdi,0x40(%rsp)
  0x00007f8ab913bc85: mov    %r8,0x38(%rsp)
  0x00007f8ab913bc8a: mov    %r9,0x30(%rsp)
  0x00007f8ab913bc8f: mov    %r10,0x28(%rsp)
  0x00007f8ab913bc94: mov    %r11,0x20(%rsp)
  0x00007f8ab913bc99: mov    %r12,0x18(%rsp)
  0x00007f8ab913bc9e: mov    %r13,0x10(%rsp)
  0x00007f8ab913bca3: mov    %r14,0x8(%rsp)
  0x00007f8ab913bca8: mov    %r15,(%rsp)
  0x00007f8ab913bcac: sub    $0x200,%rsp
  0x00007f8ab913bcb3: fxsave64 (%rsp)
  0x00007f8ab913bcb8: mov    %rbx,%rdi
  0x00007f8ab913bcbb: mov    %rax,%rsi
  0x00007f8ab913bcbe: callq  0x00007f8acef8bbca
  0x00007f8ab913bcc3: fxrstor64 (%rsp)
  0x00007f8ab913bcc8: add    $0x200,%rsp
  0x00007f8ab913bccf: mov    (%rsp),%r15
  0x00007f8ab913bcd3: mov    0x8(%rsp),%r14
  0x00007f8ab913bcd8: mov    0x10(%rsp),%r13
  0x00007f8ab913bcdd: mov    0x18(%rsp),%r12
  0x00007f8ab913bce2: mov    0x20(%rsp),%r11
  0x00007f8ab913bce7: mov    0x28(%rsp),%r10
  0x00007f8ab913bcec: mov    0x30(%rsp),%r9
  0x00007f8ab913bcf1: mov    0x38(%rsp),%r8
  0x00007f8ab913bcf6: mov    0x40(%rsp),%rdi
  0x00007f8ab913bcfb: mov    0x48(%rsp),%rsi
  0x00007f8ab913bd00: mov    0x50(%rsp),%rbp
  0x00007f8ab913bd05: mov    0x60(%rsp),%rbx
  0x00007f8ab913bd0a: mov    0x68(%rsp),%rdx
  0x00007f8ab913bd0f: mov    0x70(%rsp),%rcx
  0x00007f8ab913bd14: mov    0x78(%rsp),%rax
  0x00007f8ab913bd19: add    $0x80,%rsp
  0x00007f8ab913bd20: add    $0x8,%rsp
  0x00007f8ab913bd24: popfq  
  0x00007f8ab913bd25: mov    %r13,%rsp
  0x00007f8ab913bd28: pop    %rax
  0x00007f8ab913bd29: mov    %rsp,%r13
  0x00007f8ab913bd2c: sub    $0x20,%rsp
  0x00007f8ab913bd30: mov    %rax,(%rsp)
  0x00007f8ab913bd34: mov    %rsi,0x10(%rsp)
  0x00007f8ab913bd39: mov    %rdx,0x8(%rsp)
  0x00007f8ab913bd3e: mov    0x40(%rbx),%rcx
  0x00007f8ab913bd42: jmpq   *%rcx

AHE@0x00007f8ac80eb368: 0xb0000000 i2c: 0x00007f8ab913be20 c2i: 0x00007f8ab913bf34 c2iUV: 0x00007f8ab913bf07
i2c argument handler #0 for: static (Ljava/lang/Class;)Ljava/lang/ClassLoader; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913bf34
  0x00007f8ab913be20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913be24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913be2e: cmp    %r11,%rax
  0x00007f8ab913be31: jbe    0x00007f8ab913be4a
  0x00007f8ab913be37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913be41: cmp    %r11,%rax
  0x00007f8ab913be44: jb     0x00007f8ab913bee7
  0x00007f8ab913be4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913be54: cmp    %r11,%rax
  0x00007f8ab913be57: jbe    0x00007f8ab913be70
  0x00007f8ab913be5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913be67: cmp    %r11,%rax
  0x00007f8ab913be6a: jb     0x00007f8ab913bee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913be70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913be75: sub    $0x80,%rsp
  0x00007f8ab913be7c: mov    %rax,0x78(%rsp)
  0x00007f8ab913be81: mov    %rcx,0x70(%rsp)
  0x00007f8ab913be86: mov    %rdx,0x68(%rsp)
  0x00007f8ab913be8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913be90: mov    %rbp,0x50(%rsp)
  0x00007f8ab913be95: mov    %rsi,0x48(%rsp)
  0x00007f8ab913be9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913be9f: mov    %r8,0x38(%rsp)
  0x00007f8ab913bea4: mov    %r9,0x30(%rsp)
  0x00007f8ab913bea9: mov    %r10,0x28(%rsp)
  0x00007f8ab913beae: mov    %r11,0x20(%rsp)
  0x00007f8ab913beb3: mov    %r12,0x18(%rsp)
  0x00007f8ab913beb8: mov    %r13,0x10(%rsp)
  0x00007f8ab913bebd: mov    %r14,0x8(%rsp)
  0x00007f8ab913bec2: mov    %r15,(%rsp)
  0x00007f8ab913bec6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913bed0: movabs $0x7f8ab913be70,%rsi
  0x00007f8ab913beda: mov    %rsp,%rdx
  0x00007f8ab913bedd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913bee1: callq  0x00007f8aceddb9fa
  0x00007f8ab913bee6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913bee7: mov    %rsp,%r11
  0x00007f8ab913beea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913beee: push   %rax
  0x00007f8ab913beef: mov    %r11,%rax
  0x00007f8ab913bef2: mov    0x50(%rbx),%r11
  0x00007f8ab913bef6: mov    0x8(%rax),%rsi
  0x00007f8ab913befa: mov    %rbx,0x258(%r15)
  0x00007f8ab913bf01: mov    %rbx,%rax
  0x00007f8ab913bf04: jmpq   *%r11
  0x00007f8ab913bf07: mov    0x8(%rsi),%ebx
  0x00007f8ab913bf0a: shl    $0x3,%rbx
  0x00007f8ab913bf0e: cmp    0x10(%rax),%rbx
  0x00007f8ab913bf12: mov    0x8(%rax),%rbx
  0x00007f8ab913bf16: je     0x00007f8ab913bf21
  0x00007f8ab913bf1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913bf21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913bf29: je     0x00007f8ab913c024
  0x00007f8ab913bf2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab913bf34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913bf3c: je     0x00007f8ab913c024
  0x00007f8ab913bf42: mov    %rsp,%r13
  0x00007f8ab913bf45: mov    (%rsp),%rax
  0x00007f8ab913bf49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913bf4d: pushfq 
  0x00007f8ab913bf4e: sub    $0x8,%rsp
  0x00007f8ab913bf52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913bf57: sub    $0x80,%rsp
  0x00007f8ab913bf5e: mov    %rax,0x78(%rsp)
  0x00007f8ab913bf63: mov    %rcx,0x70(%rsp)
  0x00007f8ab913bf68: mov    %rdx,0x68(%rsp)
  0x00007f8ab913bf6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab913bf72: mov    %rbp,0x50(%rsp)
  0x00007f8ab913bf77: mov    %rsi,0x48(%rsp)
  0x00007f8ab913bf7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab913bf81: mov    %r8,0x38(%rsp)
  0x00007f8ab913bf86: mov    %r9,0x30(%rsp)
  0x00007f8ab913bf8b: mov    %r10,0x28(%rsp)
  0x00007f8ab913bf90: mov    %r11,0x20(%rsp)
  0x00007f8ab913bf95: mov    %r12,0x18(%rsp)
  0x00007f8ab913bf9a: mov    %r13,0x10(%rsp)
  0x00007f8ab913bf9f: mov    %r14,0x8(%rsp)
  0x00007f8ab913bfa4: mov    %r15,(%rsp)
  0x00007f8ab913bfa8: sub    $0x200,%rsp
  0x00007f8ab913bfaf: fxsave64 (%rsp)
  0x00007f8ab913bfb4: mov    %rbx,%rdi
  0x00007f8ab913bfb7: mov    %rax,%rsi
  0x00007f8ab913bfba: callq  0x00007f8acef8bbca
  0x00007f8ab913bfbf: fxrstor64 (%rsp)
  0x00007f8ab913bfc4: add    $0x200,%rsp
  0x00007f8ab913bfcb: mov    (%rsp),%r15
  0x00007f8ab913bfcf: mov    0x8(%rsp),%r14
  0x00007f8ab913bfd4: mov    0x10(%rsp),%r13
  0x00007f8ab913bfd9: mov    0x18(%rsp),%r12
  0x00007f8ab913bfde: mov    0x20(%rsp),%r11
  0x00007f8ab913bfe3: mov    0x28(%rsp),%r10
  0x00007f8ab913bfe8: mov    0x30(%rsp),%r9
  0x00007f8ab913bfed: mov    0x38(%rsp),%r8
  0x00007f8ab913bff2: mov    0x40(%rsp),%rdi
  0x00007f8ab913bff7: mov    0x48(%rsp),%rsi
  0x00007f8ab913bffc: mov    0x50(%rsp),%rbp
  0x00007f8ab913c001: mov    0x60(%rsp),%rbx
  0x00007f8ab913c006: mov    0x68(%rsp),%rdx
  0x00007f8ab913c00b: mov    0x70(%rsp),%rcx
  0x00007f8ab913c010: mov    0x78(%rsp),%rax
  0x00007f8ab913c015: add    $0x80,%rsp
  0x00007f8ab913c01c: add    $0x8,%rsp
  0x00007f8ab913c020: popfq  
  0x00007f8ab913c021: mov    %r13,%rsp
  0x00007f8ab913c024: pop    %rax
  0x00007f8ab913c025: mov    %rsp,%r13
  0x00007f8ab913c028: sub    $0x10,%rsp
  0x00007f8ab913c02c: mov    %rax,(%rsp)
  0x00007f8ab913c030: mov    %rsi,0x8(%rsp)
  0x00007f8ab913c035: mov    0x40(%rbx),%rcx
  0x00007f8ab913c039: jmpq   *%rcx

AHE@0x00007f8ac80eb3b0: 0x i2c: 0x00007f8ab913c0e0 c2i: 0x00007f8ab913c1f0 c2iUV: 0x00007f8ab913c1c3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab913c1f0
  0x00007f8ab913c0e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913c0e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913c0ee: cmp    %r11,%rax
  0x00007f8ab913c0f1: jbe    0x00007f8ab913c10a
  0x00007f8ab913c0f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913c101: cmp    %r11,%rax
  0x00007f8ab913c104: jb     0x00007f8ab913c1a7
  0x00007f8ab913c10a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913c114: cmp    %r11,%rax
  0x00007f8ab913c117: jbe    0x00007f8ab913c130
  0x00007f8ab913c11d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913c127: cmp    %r11,%rax
  0x00007f8ab913c12a: jb     0x00007f8ab913c1a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913c130: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913c135: sub    $0x80,%rsp
  0x00007f8ab913c13c: mov    %rax,0x78(%rsp)
  0x00007f8ab913c141: mov    %rcx,0x70(%rsp)
  0x00007f8ab913c146: mov    %rdx,0x68(%rsp)
  0x00007f8ab913c14b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913c150: mov    %rbp,0x50(%rsp)
  0x00007f8ab913c155: mov    %rsi,0x48(%rsp)
  0x00007f8ab913c15a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913c15f: mov    %r8,0x38(%rsp)
  0x00007f8ab913c164: mov    %r9,0x30(%rsp)
  0x00007f8ab913c169: mov    %r10,0x28(%rsp)
  0x00007f8ab913c16e: mov    %r11,0x20(%rsp)
  0x00007f8ab913c173: mov    %r12,0x18(%rsp)
  0x00007f8ab913c178: mov    %r13,0x10(%rsp)
  0x00007f8ab913c17d: mov    %r14,0x8(%rsp)
  0x00007f8ab913c182: mov    %r15,(%rsp)
  0x00007f8ab913c186: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913c190: movabs $0x7f8ab913c130,%rsi
  0x00007f8ab913c19a: mov    %rsp,%rdx
  0x00007f8ab913c19d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c1a1: callq  0x00007f8aceddb9fa
  0x00007f8ab913c1a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913c1a7: mov    %rsp,%r11
  0x00007f8ab913c1aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c1ae: push   %rax
  0x00007f8ab913c1af: mov    %r11,%rax
  0x00007f8ab913c1b2: mov    0x50(%rbx),%r11
  0x00007f8ab913c1b6: mov    %rbx,0x258(%r15)
  0x00007f8ab913c1bd: mov    %rbx,%rax
  0x00007f8ab913c1c0: jmpq   *%r11
  0x00007f8ab913c1c3: mov    0x8(%rsi),%ebx
  0x00007f8ab913c1c6: shl    $0x3,%rbx
  0x00007f8ab913c1ca: cmp    0x10(%rax),%rbx
  0x00007f8ab913c1ce: mov    0x8(%rax),%rbx
  0x00007f8ab913c1d2: je     0x00007f8ab913c1dd
  0x00007f8ab913c1d8: jmpq   0x00007f8ab9105c40
  0x00007f8ab913c1dd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913c1e5: je     0x00007f8ab913c2e0
  0x00007f8ab913c1eb: jmpq   0x00007f8ab9105c40
  0x00007f8ab913c1f0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913c1f8: je     0x00007f8ab913c2e0
  0x00007f8ab913c1fe: mov    %rsp,%r13
  0x00007f8ab913c201: mov    (%rsp),%rax
  0x00007f8ab913c205: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c209: pushfq 
  0x00007f8ab913c20a: sub    $0x8,%rsp
  0x00007f8ab913c20e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913c213: sub    $0x80,%rsp
  0x00007f8ab913c21a: mov    %rax,0x78(%rsp)
  0x00007f8ab913c21f: mov    %rcx,0x70(%rsp)
  0x00007f8ab913c224: mov    %rdx,0x68(%rsp)
  0x00007f8ab913c229: mov    %rbx,0x60(%rsp)
  0x00007f8ab913c22e: mov    %rbp,0x50(%rsp)
  0x00007f8ab913c233: mov    %rsi,0x48(%rsp)
  0x00007f8ab913c238: mov    %rdi,0x40(%rsp)
  0x00007f8ab913c23d: mov    %r8,0x38(%rsp)
  0x00007f8ab913c242: mov    %r9,0x30(%rsp)
  0x00007f8ab913c247: mov    %r10,0x28(%rsp)
  0x00007f8ab913c24c: mov    %r11,0x20(%rsp)
  0x00007f8ab913c251: mov    %r12,0x18(%rsp)
  0x00007f8ab913c256: mov    %r13,0x10(%rsp)
  0x00007f8ab913c25b: mov    %r14,0x8(%rsp)
  0x00007f8ab913c260: mov    %r15,(%rsp)
  0x00007f8ab913c264: sub    $0x200,%rsp
  0x00007f8ab913c26b: fxsave64 (%rsp)
  0x00007f8ab913c270: mov    %rbx,%rdi
  0x00007f8ab913c273: mov    %rax,%rsi
  0x00007f8ab913c276: callq  0x00007f8acef8bbca
  0x00007f8ab913c27b: fxrstor64 (%rsp)
  0x00007f8ab913c280: add    $0x200,%rsp
  0x00007f8ab913c287: mov    (%rsp),%r15
  0x00007f8ab913c28b: mov    0x8(%rsp),%r14
  0x00007f8ab913c290: mov    0x10(%rsp),%r13
  0x00007f8ab913c295: mov    0x18(%rsp),%r12
  0x00007f8ab913c29a: mov    0x20(%rsp),%r11
  0x00007f8ab913c29f: mov    0x28(%rsp),%r10
  0x00007f8ab913c2a4: mov    0x30(%rsp),%r9
  0x00007f8ab913c2a9: mov    0x38(%rsp),%r8
  0x00007f8ab913c2ae: mov    0x40(%rsp),%rdi
  0x00007f8ab913c2b3: mov    0x48(%rsp),%rsi
  0x00007f8ab913c2b8: mov    0x50(%rsp),%rbp
  0x00007f8ab913c2bd: mov    0x60(%rsp),%rbx
  0x00007f8ab913c2c2: mov    0x68(%rsp),%rdx
  0x00007f8ab913c2c7: mov    0x70(%rsp),%rcx
  0x00007f8ab913c2cc: mov    0x78(%rsp),%rax
  0x00007f8ab913c2d1: add    $0x80,%rsp
  0x00007f8ab913c2d8: add    $0x8,%rsp
  0x00007f8ab913c2dc: popfq  
  0x00007f8ab913c2dd: mov    %r13,%rsp
  0x00007f8ab913c2e0: pop    %rax
  0x00007f8ab913c2e1: mov    %rsp,%r13
  0x00007f8ab913c2e4: sub    $0x10,%rsp
  0x00007f8ab913c2e8: mov    %rax,(%rsp)
  0x00007f8ab913c2ec: mov    0x40(%rbx),%rcx
  0x00007f8ab913c2f0: jmpq   *%rcx

AHE@0x00007f8ac80eb3f8: 0xbbb00000 i2c: 0x00007f8ab913c3a0 c2i: 0x00007f8ab913c4bc c2iUV: 0x00007f8ab913c48f
i2c argument handler #0 for: receiver (Ljava/lang/Class;Ljava/security/ProtectionDomain;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab913c4bc
  0x00007f8ab913c3a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913c3a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913c3ae: cmp    %r11,%rax
  0x00007f8ab913c3b1: jbe    0x00007f8ab913c3ca
  0x00007f8ab913c3b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913c3c1: cmp    %r11,%rax
  0x00007f8ab913c3c4: jb     0x00007f8ab913c467
  0x00007f8ab913c3ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913c3d4: cmp    %r11,%rax
  0x00007f8ab913c3d7: jbe    0x00007f8ab913c3f0
  0x00007f8ab913c3dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913c3e7: cmp    %r11,%rax
  0x00007f8ab913c3ea: jb     0x00007f8ab913c467
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913c3f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913c3f5: sub    $0x80,%rsp
  0x00007f8ab913c3fc: mov    %rax,0x78(%rsp)
  0x00007f8ab913c401: mov    %rcx,0x70(%rsp)
  0x00007f8ab913c406: mov    %rdx,0x68(%rsp)
  0x00007f8ab913c40b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913c410: mov    %rbp,0x50(%rsp)
  0x00007f8ab913c415: mov    %rsi,0x48(%rsp)
  0x00007f8ab913c41a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913c41f: mov    %r8,0x38(%rsp)
  0x00007f8ab913c424: mov    %r9,0x30(%rsp)
  0x00007f8ab913c429: mov    %r10,0x28(%rsp)
  0x00007f8ab913c42e: mov    %r11,0x20(%rsp)
  0x00007f8ab913c433: mov    %r12,0x18(%rsp)
  0x00007f8ab913c438: mov    %r13,0x10(%rsp)
  0x00007f8ab913c43d: mov    %r14,0x8(%rsp)
  0x00007f8ab913c442: mov    %r15,(%rsp)
  0x00007f8ab913c446: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913c450: movabs $0x7f8ab913c3f0,%rsi
  0x00007f8ab913c45a: mov    %rsp,%rdx
  0x00007f8ab913c45d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c461: callq  0x00007f8aceddb9fa
  0x00007f8ab913c466: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913c467: mov    %rsp,%r11
  0x00007f8ab913c46a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c46e: push   %rax
  0x00007f8ab913c46f: mov    %r11,%rax
  0x00007f8ab913c472: mov    0x50(%rbx),%r11
  0x00007f8ab913c476: mov    0x18(%rax),%rsi
  0x00007f8ab913c47a: mov    0x10(%rax),%rdx
  0x00007f8ab913c47e: mov    0x8(%rax),%rcx
  0x00007f8ab913c482: mov    %rbx,0x258(%r15)
  0x00007f8ab913c489: mov    %rbx,%rax
  0x00007f8ab913c48c: jmpq   *%r11
  0x00007f8ab913c48f: mov    0x8(%rsi),%ebx
  0x00007f8ab913c492: shl    $0x3,%rbx
  0x00007f8ab913c496: cmp    0x10(%rax),%rbx
  0x00007f8ab913c49a: mov    0x8(%rax),%rbx
  0x00007f8ab913c49e: je     0x00007f8ab913c4a9
  0x00007f8ab913c4a4: jmpq   0x00007f8ab9105c40
  0x00007f8ab913c4a9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913c4b1: je     0x00007f8ab913c5ac
  0x00007f8ab913c4b7: jmpq   0x00007f8ab9105c40
  0x00007f8ab913c4bc: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913c4c4: je     0x00007f8ab913c5ac
  0x00007f8ab913c4ca: mov    %rsp,%r13
  0x00007f8ab913c4cd: mov    (%rsp),%rax
  0x00007f8ab913c4d1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c4d5: pushfq 
  0x00007f8ab913c4d6: sub    $0x8,%rsp
  0x00007f8ab913c4da: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913c4df: sub    $0x80,%rsp
  0x00007f8ab913c4e6: mov    %rax,0x78(%rsp)
  0x00007f8ab913c4eb: mov    %rcx,0x70(%rsp)
  0x00007f8ab913c4f0: mov    %rdx,0x68(%rsp)
  0x00007f8ab913c4f5: mov    %rbx,0x60(%rsp)
  0x00007f8ab913c4fa: mov    %rbp,0x50(%rsp)
  0x00007f8ab913c4ff: mov    %rsi,0x48(%rsp)
  0x00007f8ab913c504: mov    %rdi,0x40(%rsp)
  0x00007f8ab913c509: mov    %r8,0x38(%rsp)
  0x00007f8ab913c50e: mov    %r9,0x30(%rsp)
  0x00007f8ab913c513: mov    %r10,0x28(%rsp)
  0x00007f8ab913c518: mov    %r11,0x20(%rsp)
  0x00007f8ab913c51d: mov    %r12,0x18(%rsp)
  0x00007f8ab913c522: mov    %r13,0x10(%rsp)
  0x00007f8ab913c527: mov    %r14,0x8(%rsp)
  0x00007f8ab913c52c: mov    %r15,(%rsp)
  0x00007f8ab913c530: sub    $0x200,%rsp
  0x00007f8ab913c537: fxsave64 (%rsp)
  0x00007f8ab913c53c: mov    %rbx,%rdi
  0x00007f8ab913c53f: mov    %rax,%rsi
  0x00007f8ab913c542: callq  0x00007f8acef8bbca
  0x00007f8ab913c547: fxrstor64 (%rsp)
  0x00007f8ab913c54c: add    $0x200,%rsp
  0x00007f8ab913c553: mov    (%rsp),%r15
  0x00007f8ab913c557: mov    0x8(%rsp),%r14
  0x00007f8ab913c55c: mov    0x10(%rsp),%r13
  0x00007f8ab913c561: mov    0x18(%rsp),%r12
  0x00007f8ab913c566: mov    0x20(%rsp),%r11
  0x00007f8ab913c56b: mov    0x28(%rsp),%r10
  0x00007f8ab913c570: mov    0x30(%rsp),%r9
  0x00007f8ab913c575: mov    0x38(%rsp),%r8
  0x00007f8ab913c57a: mov    0x40(%rsp),%rdi
  0x00007f8ab913c57f: mov    0x48(%rsp),%rsi
  0x00007f8ab913c584: mov    0x50(%rsp),%rbp
  0x00007f8ab913c589: mov    0x60(%rsp),%rbx
  0x00007f8ab913c58e: mov    0x68(%rsp),%rdx
  0x00007f8ab913c593: mov    0x70(%rsp),%rcx
  0x00007f8ab913c598: mov    0x78(%rsp),%rax
  0x00007f8ab913c59d: add    $0x80,%rsp
  0x00007f8ab913c5a4: add    $0x8,%rsp
  0x00007f8ab913c5a8: popfq  
  0x00007f8ab913c5a9: mov    %r13,%rsp
  0x00007f8ab913c5ac: pop    %rax
  0x00007f8ab913c5ad: mov    %rsp,%r13
  0x00007f8ab913c5b0: sub    $0x20,%rsp
  0x00007f8ab913c5b4: mov    %rax,(%rsp)
  0x00007f8ab913c5b8: mov    %rsi,0x18(%rsp)
  0x00007f8ab913c5bd: mov    %rdx,0x10(%rsp)
  0x00007f8ab913c5c2: mov    %rcx,0x8(%rsp)
  0x00007f8ab913c5c7: mov    0x40(%rbx),%rcx
  0x00007f8ab913c5cb: jmpq   *%rcx

AHE@0x00007f8ac80eb440: 0x i2c: 0x00007f8ab913c6a0 c2i: 0x00007f8ab913c7b0 c2iUV: 0x00007f8ab913c783
i2c argument handler #0 for: static ()Ljava/lang/ClassLoader; (530 bytes generated)
c2i argument handler starts at 0x7f8ab913c7b0
  0x00007f8ab913c6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913c6a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913c6ae: cmp    %r11,%rax
  0x00007f8ab913c6b1: jbe    0x00007f8ab913c6ca
  0x00007f8ab913c6b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913c6c1: cmp    %r11,%rax
  0x00007f8ab913c6c4: jb     0x00007f8ab913c767
  0x00007f8ab913c6ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913c6d4: cmp    %r11,%rax
  0x00007f8ab913c6d7: jbe    0x00007f8ab913c6f0
  0x00007f8ab913c6dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913c6e7: cmp    %r11,%rax
  0x00007f8ab913c6ea: jb     0x00007f8ab913c767
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913c6f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913c6f5: sub    $0x80,%rsp
  0x00007f8ab913c6fc: mov    %rax,0x78(%rsp)
  0x00007f8ab913c701: mov    %rcx,0x70(%rsp)
  0x00007f8ab913c706: mov    %rdx,0x68(%rsp)
  0x00007f8ab913c70b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913c710: mov    %rbp,0x50(%rsp)
  0x00007f8ab913c715: mov    %rsi,0x48(%rsp)
  0x00007f8ab913c71a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913c71f: mov    %r8,0x38(%rsp)
  0x00007f8ab913c724: mov    %r9,0x30(%rsp)
  0x00007f8ab913c729: mov    %r10,0x28(%rsp)
  0x00007f8ab913c72e: mov    %r11,0x20(%rsp)
  0x00007f8ab913c733: mov    %r12,0x18(%rsp)
  0x00007f8ab913c738: mov    %r13,0x10(%rsp)
  0x00007f8ab913c73d: mov    %r14,0x8(%rsp)
  0x00007f8ab913c742: mov    %r15,(%rsp)
  0x00007f8ab913c746: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913c750: movabs $0x7f8ab913c6f0,%rsi
  0x00007f8ab913c75a: mov    %rsp,%rdx
  0x00007f8ab913c75d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c761: callq  0x00007f8aceddb9fa
  0x00007f8ab913c766: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913c767: mov    %rsp,%r11
  0x00007f8ab913c76a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c76e: push   %rax
  0x00007f8ab913c76f: mov    %r11,%rax
  0x00007f8ab913c772: mov    0x50(%rbx),%r11
  0x00007f8ab913c776: mov    %rbx,0x258(%r15)
  0x00007f8ab913c77d: mov    %rbx,%rax
  0x00007f8ab913c780: jmpq   *%r11
  0x00007f8ab913c783: mov    0x8(%rsi),%ebx
  0x00007f8ab913c786: shl    $0x3,%rbx
  0x00007f8ab913c78a: cmp    0x10(%rax),%rbx
  0x00007f8ab913c78e: mov    0x8(%rax),%rbx
  0x00007f8ab913c792: je     0x00007f8ab913c79d
  0x00007f8ab913c798: jmpq   0x00007f8ab9105c40
  0x00007f8ab913c79d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913c7a5: je     0x00007f8ab913c8a0
  0x00007f8ab913c7ab: jmpq   0x00007f8ab9105c40
  0x00007f8ab913c7b0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913c7b8: je     0x00007f8ab913c8a0
  0x00007f8ab913c7be: mov    %rsp,%r13
  0x00007f8ab913c7c1: mov    (%rsp),%rax
  0x00007f8ab913c7c5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913c7c9: pushfq 
  0x00007f8ab913c7ca: sub    $0x8,%rsp
  0x00007f8ab913c7ce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913c7d3: sub    $0x80,%rsp
  0x00007f8ab913c7da: mov    %rax,0x78(%rsp)
  0x00007f8ab913c7df: mov    %rcx,0x70(%rsp)
  0x00007f8ab913c7e4: mov    %rdx,0x68(%rsp)
  0x00007f8ab913c7e9: mov    %rbx,0x60(%rsp)
  0x00007f8ab913c7ee: mov    %rbp,0x50(%rsp)
  0x00007f8ab913c7f3: mov    %rsi,0x48(%rsp)
  0x00007f8ab913c7f8: mov    %rdi,0x40(%rsp)
  0x00007f8ab913c7fd: mov    %r8,0x38(%rsp)
  0x00007f8ab913c802: mov    %r9,0x30(%rsp)
  0x00007f8ab913c807: mov    %r10,0x28(%rsp)
  0x00007f8ab913c80c: mov    %r11,0x20(%rsp)
  0x00007f8ab913c811: mov    %r12,0x18(%rsp)
  0x00007f8ab913c816: mov    %r13,0x10(%rsp)
  0x00007f8ab913c81b: mov    %r14,0x8(%rsp)
  0x00007f8ab913c820: mov    %r15,(%rsp)
  0x00007f8ab913c824: sub    $0x200,%rsp
  0x00007f8ab913c82b: fxsave64 (%rsp)
  0x00007f8ab913c830: mov    %rbx,%rdi
  0x00007f8ab913c833: mov    %rax,%rsi
  0x00007f8ab913c836: callq  0x00007f8acef8bbca
  0x00007f8ab913c83b: fxrstor64 (%rsp)
  0x00007f8ab913c840: add    $0x200,%rsp
  0x00007f8ab913c847: mov    (%rsp),%r15
  0x00007f8ab913c84b: mov    0x8(%rsp),%r14
  0x00007f8ab913c850: mov    0x10(%rsp),%r13
  0x00007f8ab913c855: mov    0x18(%rsp),%r12
  0x00007f8ab913c85a: mov    0x20(%rsp),%r11
  0x00007f8ab913c85f: mov    0x28(%rsp),%r10
  0x00007f8ab913c864: mov    0x30(%rsp),%r9
  0x00007f8ab913c869: mov    0x38(%rsp),%r8
  0x00007f8ab913c86e: mov    0x40(%rsp),%rdi
  0x00007f8ab913c873: mov    0x48(%rsp),%rsi
  0x00007f8ab913c878: mov    0x50(%rsp),%rbp
  0x00007f8ab913c87d: mov    0x60(%rsp),%rbx
  0x00007f8ab913c882: mov    0x68(%rsp),%rdx
  0x00007f8ab913c887: mov    0x70(%rsp),%rcx
  0x00007f8ab913c88c: mov    0x78(%rsp),%rax
  0x00007f8ab913c891: add    $0x80,%rsp
  0x00007f8ab913c898: add    $0x8,%rsp
  0x00007f8ab913c89c: popfq  
  0x00007f8ab913c89d: mov    %r13,%rsp
  0x00007f8ab913c8a0: pop    %rax
  0x00007f8ab913c8a1: mov    %rsp,%r13
  0x00007f8ab913c8a4: sub    $0x10,%rsp
  0x00007f8ab913c8a8: mov    %rax,(%rsp)
  0x00007f8ab913c8ac: mov    0x40(%rbx),%rcx
  0x00007f8ab913c8b0: jmpq   *%rcx

AHE@0x00007f8ac80eb488: 0xbb000000 i2c: 0x00007f8ab913c960 c2i: 0x00007f8ab913ca78 c2iUV: 0x00007f8ab913ca4b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab913ca78
  0x00007f8ab913c960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913c964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913c96e: cmp    %r11,%rax
  0x00007f8ab913c971: jbe    0x00007f8ab913c98a
  0x00007f8ab913c977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913c981: cmp    %r11,%rax
  0x00007f8ab913c984: jb     0x00007f8ab913ca27
  0x00007f8ab913c98a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913c994: cmp    %r11,%rax
  0x00007f8ab913c997: jbe    0x00007f8ab913c9b0
  0x00007f8ab913c99d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913c9a7: cmp    %r11,%rax
  0x00007f8ab913c9aa: jb     0x00007f8ab913ca27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913c9b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913c9b5: sub    $0x80,%rsp
  0x00007f8ab913c9bc: mov    %rax,0x78(%rsp)
  0x00007f8ab913c9c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913c9c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913c9cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913c9d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913c9d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913c9da: mov    %rdi,0x40(%rsp)
  0x00007f8ab913c9df: mov    %r8,0x38(%rsp)
  0x00007f8ab913c9e4: mov    %r9,0x30(%rsp)
  0x00007f8ab913c9e9: mov    %r10,0x28(%rsp)
  0x00007f8ab913c9ee: mov    %r11,0x20(%rsp)
  0x00007f8ab913c9f3: mov    %r12,0x18(%rsp)
  0x00007f8ab913c9f8: mov    %r13,0x10(%rsp)
  0x00007f8ab913c9fd: mov    %r14,0x8(%rsp)
  0x00007f8ab913ca02: mov    %r15,(%rsp)
  0x00007f8ab913ca06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913ca10: movabs $0x7f8ab913c9b0,%rsi
  0x00007f8ab913ca1a: mov    %rsp,%rdx
  0x00007f8ab913ca1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ca21: callq  0x00007f8aceddb9fa
  0x00007f8ab913ca26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913ca27: mov    %rsp,%r11
  0x00007f8ab913ca2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ca2e: push   %rax
  0x00007f8ab913ca2f: mov    %r11,%rax
  0x00007f8ab913ca32: mov    0x50(%rbx),%r11
  0x00007f8ab913ca36: mov    0x10(%rax),%rsi
  0x00007f8ab913ca3a: mov    0x8(%rax),%rdx
  0x00007f8ab913ca3e: mov    %rbx,0x258(%r15)
  0x00007f8ab913ca45: mov    %rbx,%rax
  0x00007f8ab913ca48: jmpq   *%r11
  0x00007f8ab913ca4b: mov    0x8(%rsi),%ebx
  0x00007f8ab913ca4e: shl    $0x3,%rbx
  0x00007f8ab913ca52: cmp    0x10(%rax),%rbx
  0x00007f8ab913ca56: mov    0x8(%rax),%rbx
  0x00007f8ab913ca5a: je     0x00007f8ab913ca65
  0x00007f8ab913ca60: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ca65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ca6d: je     0x00007f8ab913cb68
  0x00007f8ab913ca73: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ca78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ca80: je     0x00007f8ab913cb68
  0x00007f8ab913ca86: mov    %rsp,%r13
  0x00007f8ab913ca89: mov    (%rsp),%rax
  0x00007f8ab913ca8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ca91: pushfq 
  0x00007f8ab913ca92: sub    $0x8,%rsp
  0x00007f8ab913ca96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913ca9b: sub    $0x80,%rsp
  0x00007f8ab913caa2: mov    %rax,0x78(%rsp)
  0x00007f8ab913caa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab913caac: mov    %rdx,0x68(%rsp)
  0x00007f8ab913cab1: mov    %rbx,0x60(%rsp)
  0x00007f8ab913cab6: mov    %rbp,0x50(%rsp)
  0x00007f8ab913cabb: mov    %rsi,0x48(%rsp)
  0x00007f8ab913cac0: mov    %rdi,0x40(%rsp)
  0x00007f8ab913cac5: mov    %r8,0x38(%rsp)
  0x00007f8ab913caca: mov    %r9,0x30(%rsp)
  0x00007f8ab913cacf: mov    %r10,0x28(%rsp)
  0x00007f8ab913cad4: mov    %r11,0x20(%rsp)
  0x00007f8ab913cad9: mov    %r12,0x18(%rsp)
  0x00007f8ab913cade: mov    %r13,0x10(%rsp)
  0x00007f8ab913cae3: mov    %r14,0x8(%rsp)
  0x00007f8ab913cae8: mov    %r15,(%rsp)
  0x00007f8ab913caec: sub    $0x200,%rsp
  0x00007f8ab913caf3: fxsave64 (%rsp)
  0x00007f8ab913caf8: mov    %rbx,%rdi
  0x00007f8ab913cafb: mov    %rax,%rsi
  0x00007f8ab913cafe: callq  0x00007f8acef8bbca
  0x00007f8ab913cb03: fxrstor64 (%rsp)
  0x00007f8ab913cb08: add    $0x200,%rsp
  0x00007f8ab913cb0f: mov    (%rsp),%r15
  0x00007f8ab913cb13: mov    0x8(%rsp),%r14
  0x00007f8ab913cb18: mov    0x10(%rsp),%r13
  0x00007f8ab913cb1d: mov    0x18(%rsp),%r12
  0x00007f8ab913cb22: mov    0x20(%rsp),%r11
  0x00007f8ab913cb27: mov    0x28(%rsp),%r10
  0x00007f8ab913cb2c: mov    0x30(%rsp),%r9
  0x00007f8ab913cb31: mov    0x38(%rsp),%r8
  0x00007f8ab913cb36: mov    0x40(%rsp),%rdi
  0x00007f8ab913cb3b: mov    0x48(%rsp),%rsi
  0x00007f8ab913cb40: mov    0x50(%rsp),%rbp
  0x00007f8ab913cb45: mov    0x60(%rsp),%rbx
  0x00007f8ab913cb4a: mov    0x68(%rsp),%rdx
  0x00007f8ab913cb4f: mov    0x70(%rsp),%rcx
  0x00007f8ab913cb54: mov    0x78(%rsp),%rax
  0x00007f8ab913cb59: add    $0x80,%rsp
  0x00007f8ab913cb60: add    $0x8,%rsp
  0x00007f8ab913cb64: popfq  
  0x00007f8ab913cb65: mov    %r13,%rsp
  0x00007f8ab913cb68: pop    %rax
  0x00007f8ab913cb69: mov    %rsp,%r13
  0x00007f8ab913cb6c: sub    $0x20,%rsp
  0x00007f8ab913cb70: mov    %rax,(%rsp)
  0x00007f8ab913cb74: mov    %rsi,0x10(%rsp)
  0x00007f8ab913cb79: mov    %rdx,0x8(%rsp)
  0x00007f8ab913cb7e: mov    0x40(%rbx),%rcx
  0x00007f8ab913cb82: jmpq   *%rcx

AHE@0x00007f8ac80eb4d0: 0xbb000000 i2c: 0x00007f8ab913cc60 c2i: 0x00007f8ab913cd78 c2iUV: 0x00007f8ab913cd4b
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/String;)J (548 bytes generated)
c2i argument handler starts at 0x7f8ab913cd78
  0x00007f8ab913cc60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913cc64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913cc6e: cmp    %r11,%rax
  0x00007f8ab913cc71: jbe    0x00007f8ab913cc8a
  0x00007f8ab913cc77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913cc81: cmp    %r11,%rax
  0x00007f8ab913cc84: jb     0x00007f8ab913cd27
  0x00007f8ab913cc8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913cc94: cmp    %r11,%rax
  0x00007f8ab913cc97: jbe    0x00007f8ab913ccb0
  0x00007f8ab913cc9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913cca7: cmp    %r11,%rax
  0x00007f8ab913ccaa: jb     0x00007f8ab913cd27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913ccb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913ccb5: sub    $0x80,%rsp
  0x00007f8ab913ccbc: mov    %rax,0x78(%rsp)
  0x00007f8ab913ccc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913ccc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913cccb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913ccd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913ccd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913ccda: mov    %rdi,0x40(%rsp)
  0x00007f8ab913ccdf: mov    %r8,0x38(%rsp)
  0x00007f8ab913cce4: mov    %r9,0x30(%rsp)
  0x00007f8ab913cce9: mov    %r10,0x28(%rsp)
  0x00007f8ab913ccee: mov    %r11,0x20(%rsp)
  0x00007f8ab913ccf3: mov    %r12,0x18(%rsp)
  0x00007f8ab913ccf8: mov    %r13,0x10(%rsp)
  0x00007f8ab913ccfd: mov    %r14,0x8(%rsp)
  0x00007f8ab913cd02: mov    %r15,(%rsp)
  0x00007f8ab913cd06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913cd10: movabs $0x7f8ab913ccb0,%rsi
  0x00007f8ab913cd1a: mov    %rsp,%rdx
  0x00007f8ab913cd1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913cd21: callq  0x00007f8aceddb9fa
  0x00007f8ab913cd26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913cd27: mov    %rsp,%r11
  0x00007f8ab913cd2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913cd2e: push   %rax
  0x00007f8ab913cd2f: mov    %r11,%rax
  0x00007f8ab913cd32: mov    0x50(%rbx),%r11
  0x00007f8ab913cd36: mov    0x10(%rax),%rsi
  0x00007f8ab913cd3a: mov    0x8(%rax),%rdx
  0x00007f8ab913cd3e: mov    %rbx,0x258(%r15)
  0x00007f8ab913cd45: mov    %rbx,%rax
  0x00007f8ab913cd48: jmpq   *%r11
  0x00007f8ab913cd4b: mov    0x8(%rsi),%ebx
  0x00007f8ab913cd4e: shl    $0x3,%rbx
  0x00007f8ab913cd52: cmp    0x10(%rax),%rbx
  0x00007f8ab913cd56: mov    0x8(%rax),%rbx
  0x00007f8ab913cd5a: je     0x00007f8ab913cd65
  0x00007f8ab913cd60: jmpq   0x00007f8ab9105c40
  0x00007f8ab913cd65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913cd6d: je     0x00007f8ab913ce68
  0x00007f8ab913cd73: jmpq   0x00007f8ab9105c40
  0x00007f8ab913cd78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913cd80: je     0x00007f8ab913ce68
  0x00007f8ab913cd86: mov    %rsp,%r13
  0x00007f8ab913cd89: mov    (%rsp),%rax
  0x00007f8ab913cd8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913cd91: pushfq 
  0x00007f8ab913cd92: sub    $0x8,%rsp
  0x00007f8ab913cd96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913cd9b: sub    $0x80,%rsp
  0x00007f8ab913cda2: mov    %rax,0x78(%rsp)
  0x00007f8ab913cda7: mov    %rcx,0x70(%rsp)
  0x00007f8ab913cdac: mov    %rdx,0x68(%rsp)
  0x00007f8ab913cdb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab913cdb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab913cdbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab913cdc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab913cdc5: mov    %r8,0x38(%rsp)
  0x00007f8ab913cdca: mov    %r9,0x30(%rsp)
  0x00007f8ab913cdcf: mov    %r10,0x28(%rsp)
  0x00007f8ab913cdd4: mov    %r11,0x20(%rsp)
  0x00007f8ab913cdd9: mov    %r12,0x18(%rsp)
  0x00007f8ab913cdde: mov    %r13,0x10(%rsp)
  0x00007f8ab913cde3: mov    %r14,0x8(%rsp)
  0x00007f8ab913cde8: mov    %r15,(%rsp)
  0x00007f8ab913cdec: sub    $0x200,%rsp
  0x00007f8ab913cdf3: fxsave64 (%rsp)
  0x00007f8ab913cdf8: mov    %rbx,%rdi
  0x00007f8ab913cdfb: mov    %rax,%rsi
  0x00007f8ab913cdfe: callq  0x00007f8acef8bbca
  0x00007f8ab913ce03: fxrstor64 (%rsp)
  0x00007f8ab913ce08: add    $0x200,%rsp
  0x00007f8ab913ce0f: mov    (%rsp),%r15
  0x00007f8ab913ce13: mov    0x8(%rsp),%r14
  0x00007f8ab913ce18: mov    0x10(%rsp),%r13
  0x00007f8ab913ce1d: mov    0x18(%rsp),%r12
  0x00007f8ab913ce22: mov    0x20(%rsp),%r11
  0x00007f8ab913ce27: mov    0x28(%rsp),%r10
  0x00007f8ab913ce2c: mov    0x30(%rsp),%r9
  0x00007f8ab913ce31: mov    0x38(%rsp),%r8
  0x00007f8ab913ce36: mov    0x40(%rsp),%rdi
  0x00007f8ab913ce3b: mov    0x48(%rsp),%rsi
  0x00007f8ab913ce40: mov    0x50(%rsp),%rbp
  0x00007f8ab913ce45: mov    0x60(%rsp),%rbx
  0x00007f8ab913ce4a: mov    0x68(%rsp),%rdx
  0x00007f8ab913ce4f: mov    0x70(%rsp),%rcx
  0x00007f8ab913ce54: mov    0x78(%rsp),%rax
  0x00007f8ab913ce59: add    $0x80,%rsp
  0x00007f8ab913ce60: add    $0x8,%rsp
  0x00007f8ab913ce64: popfq  
  0x00007f8ab913ce65: mov    %r13,%rsp
  0x00007f8ab913ce68: pop    %rax
  0x00007f8ab913ce69: mov    %rsp,%r13
  0x00007f8ab913ce6c: sub    $0x20,%rsp
  0x00007f8ab913ce70: mov    %rax,(%rsp)
  0x00007f8ab913ce74: mov    %rsi,0x10(%rsp)
  0x00007f8ab913ce79: mov    %rdx,0x8(%rsp)
  0x00007f8ab913ce7e: mov    0x40(%rbx),%rcx
  0x00007f8ab913ce82: jmpq   *%rcx

AHE@0x00007f8ac80eb518: 0xbb000000 i2c: 0x00007f8ab913cf60 c2i: 0x00007f8ab913d078 c2iUV: 0x00007f8ab913d04b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab913d078
  0x00007f8ab913cf60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913cf64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913cf6e: cmp    %r11,%rax
  0x00007f8ab913cf71: jbe    0x00007f8ab913cf8a
  0x00007f8ab913cf77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913cf81: cmp    %r11,%rax
  0x00007f8ab913cf84: jb     0x00007f8ab913d027
  0x00007f8ab913cf8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913cf94: cmp    %r11,%rax
  0x00007f8ab913cf97: jbe    0x00007f8ab913cfb0
  0x00007f8ab913cf9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913cfa7: cmp    %r11,%rax
  0x00007f8ab913cfaa: jb     0x00007f8ab913d027
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913cfb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913cfb5: sub    $0x80,%rsp
  0x00007f8ab913cfbc: mov    %rax,0x78(%rsp)
  0x00007f8ab913cfc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913cfc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913cfcb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913cfd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913cfd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913cfda: mov    %rdi,0x40(%rsp)
  0x00007f8ab913cfdf: mov    %r8,0x38(%rsp)
  0x00007f8ab913cfe4: mov    %r9,0x30(%rsp)
  0x00007f8ab913cfe9: mov    %r10,0x28(%rsp)
  0x00007f8ab913cfee: mov    %r11,0x20(%rsp)
  0x00007f8ab913cff3: mov    %r12,0x18(%rsp)
  0x00007f8ab913cff8: mov    %r13,0x10(%rsp)
  0x00007f8ab913cffd: mov    %r14,0x8(%rsp)
  0x00007f8ab913d002: mov    %r15,(%rsp)
  0x00007f8ab913d006: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913d010: movabs $0x7f8ab913cfb0,%rsi
  0x00007f8ab913d01a: mov    %rsp,%rdx
  0x00007f8ab913d01d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d021: callq  0x00007f8aceddb9fa
  0x00007f8ab913d026: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913d027: mov    %rsp,%r11
  0x00007f8ab913d02a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d02e: push   %rax
  0x00007f8ab913d02f: mov    %r11,%rax
  0x00007f8ab913d032: mov    0x50(%rbx),%r11
  0x00007f8ab913d036: mov    0x10(%rax),%rsi
  0x00007f8ab913d03a: mov    0x8(%rax),%rdx
  0x00007f8ab913d03e: mov    %rbx,0x258(%r15)
  0x00007f8ab913d045: mov    %rbx,%rax
  0x00007f8ab913d048: jmpq   *%r11
  0x00007f8ab913d04b: mov    0x8(%rsi),%ebx
  0x00007f8ab913d04e: shl    $0x3,%rbx
  0x00007f8ab913d052: cmp    0x10(%rax),%rbx
  0x00007f8ab913d056: mov    0x8(%rax),%rbx
  0x00007f8ab913d05a: je     0x00007f8ab913d065
  0x00007f8ab913d060: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d065: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d06d: je     0x00007f8ab913d168
  0x00007f8ab913d073: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d078: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d080: je     0x00007f8ab913d168
  0x00007f8ab913d086: mov    %rsp,%r13
  0x00007f8ab913d089: mov    (%rsp),%rax
  0x00007f8ab913d08d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d091: pushfq 
  0x00007f8ab913d092: sub    $0x8,%rsp
  0x00007f8ab913d096: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913d09b: sub    $0x80,%rsp
  0x00007f8ab913d0a2: mov    %rax,0x78(%rsp)
  0x00007f8ab913d0a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab913d0ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab913d0b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab913d0b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab913d0bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab913d0c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab913d0c5: mov    %r8,0x38(%rsp)
  0x00007f8ab913d0ca: mov    %r9,0x30(%rsp)
  0x00007f8ab913d0cf: mov    %r10,0x28(%rsp)
  0x00007f8ab913d0d4: mov    %r11,0x20(%rsp)
  0x00007f8ab913d0d9: mov    %r12,0x18(%rsp)
  0x00007f8ab913d0de: mov    %r13,0x10(%rsp)
  0x00007f8ab913d0e3: mov    %r14,0x8(%rsp)
  0x00007f8ab913d0e8: mov    %r15,(%rsp)
  0x00007f8ab913d0ec: sub    $0x200,%rsp
  0x00007f8ab913d0f3: fxsave64 (%rsp)
  0x00007f8ab913d0f8: mov    %rbx,%rdi
  0x00007f8ab913d0fb: mov    %rax,%rsi
  0x00007f8ab913d0fe: callq  0x00007f8acef8bbca
  0x00007f8ab913d103: fxrstor64 (%rsp)
  0x00007f8ab913d108: add    $0x200,%rsp
  0x00007f8ab913d10f: mov    (%rsp),%r15
  0x00007f8ab913d113: mov    0x8(%rsp),%r14
  0x00007f8ab913d118: mov    0x10(%rsp),%r13
  0x00007f8ab913d11d: mov    0x18(%rsp),%r12
  0x00007f8ab913d122: mov    0x20(%rsp),%r11
  0x00007f8ab913d127: mov    0x28(%rsp),%r10
  0x00007f8ab913d12c: mov    0x30(%rsp),%r9
  0x00007f8ab913d131: mov    0x38(%rsp),%r8
  0x00007f8ab913d136: mov    0x40(%rsp),%rdi
  0x00007f8ab913d13b: mov    0x48(%rsp),%rsi
  0x00007f8ab913d140: mov    0x50(%rsp),%rbp
  0x00007f8ab913d145: mov    0x60(%rsp),%rbx
  0x00007f8ab913d14a: mov    0x68(%rsp),%rdx
  0x00007f8ab913d14f: mov    0x70(%rsp),%rcx
  0x00007f8ab913d154: mov    0x78(%rsp),%rax
  0x00007f8ab913d159: add    $0x80,%rsp
  0x00007f8ab913d160: add    $0x8,%rsp
  0x00007f8ab913d164: popfq  
  0x00007f8ab913d165: mov    %r13,%rsp
  0x00007f8ab913d168: pop    %rax
  0x00007f8ab913d169: mov    %rsp,%r13
  0x00007f8ab913d16c: sub    $0x20,%rsp
  0x00007f8ab913d170: mov    %rax,(%rsp)
  0x00007f8ab913d174: mov    %rsi,0x10(%rsp)
  0x00007f8ab913d179: mov    %rdx,0x8(%rsp)
  0x00007f8ab913d17e: mov    0x40(%rbx),%rcx
  0x00007f8ab913d182: jmpq   *%rcx

AHE@0x00007f8ac80eb560: 0xbb000000 i2c: 0x00007f8ab913d260 c2i: 0x00007f8ab913d378 c2iUV: 0x00007f8ab913d34b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f8ab913d378
  0x00007f8ab913d260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913d264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913d26e: cmp    %r11,%rax
  0x00007f8ab913d271: jbe    0x00007f8ab913d28a
  0x00007f8ab913d277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913d281: cmp    %r11,%rax
  0x00007f8ab913d284: jb     0x00007f8ab913d327
  0x00007f8ab913d28a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913d294: cmp    %r11,%rax
  0x00007f8ab913d297: jbe    0x00007f8ab913d2b0
  0x00007f8ab913d29d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913d2a7: cmp    %r11,%rax
  0x00007f8ab913d2aa: jb     0x00007f8ab913d327
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913d2b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913d2b5: sub    $0x80,%rsp
  0x00007f8ab913d2bc: mov    %rax,0x78(%rsp)
  0x00007f8ab913d2c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913d2c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913d2cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913d2d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913d2d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913d2da: mov    %rdi,0x40(%rsp)
  0x00007f8ab913d2df: mov    %r8,0x38(%rsp)
  0x00007f8ab913d2e4: mov    %r9,0x30(%rsp)
  0x00007f8ab913d2e9: mov    %r10,0x28(%rsp)
  0x00007f8ab913d2ee: mov    %r11,0x20(%rsp)
  0x00007f8ab913d2f3: mov    %r12,0x18(%rsp)
  0x00007f8ab913d2f8: mov    %r13,0x10(%rsp)
  0x00007f8ab913d2fd: mov    %r14,0x8(%rsp)
  0x00007f8ab913d302: mov    %r15,(%rsp)
  0x00007f8ab913d306: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913d310: movabs $0x7f8ab913d2b0,%rsi
  0x00007f8ab913d31a: mov    %rsp,%rdx
  0x00007f8ab913d31d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d321: callq  0x00007f8aceddb9fa
  0x00007f8ab913d326: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913d327: mov    %rsp,%r11
  0x00007f8ab913d32a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d32e: push   %rax
  0x00007f8ab913d32f: mov    %r11,%rax
  0x00007f8ab913d332: mov    0x50(%rbx),%r11
  0x00007f8ab913d336: mov    0x10(%rax),%rsi
  0x00007f8ab913d33a: mov    0x8(%rax),%rdx
  0x00007f8ab913d33e: mov    %rbx,0x258(%r15)
  0x00007f8ab913d345: mov    %rbx,%rax
  0x00007f8ab913d348: jmpq   *%r11
  0x00007f8ab913d34b: mov    0x8(%rsi),%ebx
  0x00007f8ab913d34e: shl    $0x3,%rbx
  0x00007f8ab913d352: cmp    0x10(%rax),%rbx
  0x00007f8ab913d356: mov    0x8(%rax),%rbx
  0x00007f8ab913d35a: je     0x00007f8ab913d365
  0x00007f8ab913d360: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d365: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d36d: je     0x00007f8ab913d468
  0x00007f8ab913d373: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d378: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d380: je     0x00007f8ab913d468
  0x00007f8ab913d386: mov    %rsp,%r13
  0x00007f8ab913d389: mov    (%rsp),%rax
  0x00007f8ab913d38d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d391: pushfq 
  0x00007f8ab913d392: sub    $0x8,%rsp
  0x00007f8ab913d396: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913d39b: sub    $0x80,%rsp
  0x00007f8ab913d3a2: mov    %rax,0x78(%rsp)
  0x00007f8ab913d3a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab913d3ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab913d3b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab913d3b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab913d3bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab913d3c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab913d3c5: mov    %r8,0x38(%rsp)
  0x00007f8ab913d3ca: mov    %r9,0x30(%rsp)
  0x00007f8ab913d3cf: mov    %r10,0x28(%rsp)
  0x00007f8ab913d3d4: mov    %r11,0x20(%rsp)
  0x00007f8ab913d3d9: mov    %r12,0x18(%rsp)
  0x00007f8ab913d3de: mov    %r13,0x10(%rsp)
  0x00007f8ab913d3e3: mov    %r14,0x8(%rsp)
  0x00007f8ab913d3e8: mov    %r15,(%rsp)
  0x00007f8ab913d3ec: sub    $0x200,%rsp
  0x00007f8ab913d3f3: fxsave64 (%rsp)
  0x00007f8ab913d3f8: mov    %rbx,%rdi
  0x00007f8ab913d3fb: mov    %rax,%rsi
  0x00007f8ab913d3fe: callq  0x00007f8acef8bbca
  0x00007f8ab913d403: fxrstor64 (%rsp)
  0x00007f8ab913d408: add    $0x200,%rsp
  0x00007f8ab913d40f: mov    (%rsp),%r15
  0x00007f8ab913d413: mov    0x8(%rsp),%r14
  0x00007f8ab913d418: mov    0x10(%rsp),%r13
  0x00007f8ab913d41d: mov    0x18(%rsp),%r12
  0x00007f8ab913d422: mov    0x20(%rsp),%r11
  0x00007f8ab913d427: mov    0x28(%rsp),%r10
  0x00007f8ab913d42c: mov    0x30(%rsp),%r9
  0x00007f8ab913d431: mov    0x38(%rsp),%r8
  0x00007f8ab913d436: mov    0x40(%rsp),%rdi
  0x00007f8ab913d43b: mov    0x48(%rsp),%rsi
  0x00007f8ab913d440: mov    0x50(%rsp),%rbp
  0x00007f8ab913d445: mov    0x60(%rsp),%rbx
  0x00007f8ab913d44a: mov    0x68(%rsp),%rdx
  0x00007f8ab913d44f: mov    0x70(%rsp),%rcx
  0x00007f8ab913d454: mov    0x78(%rsp),%rax
  0x00007f8ab913d459: add    $0x80,%rsp
  0x00007f8ab913d460: add    $0x8,%rsp
  0x00007f8ab913d464: popfq  
  0x00007f8ab913d465: mov    %r13,%rsp
  0x00007f8ab913d468: pop    %rax
  0x00007f8ab913d469: mov    %rsp,%r13
  0x00007f8ab913d46c: sub    $0x20,%rsp
  0x00007f8ab913d470: mov    %rax,(%rsp)
  0x00007f8ab913d474: mov    %rsi,0x10(%rsp)
  0x00007f8ab913d479: mov    %rdx,0x8(%rsp)
  0x00007f8ab913d47e: mov    0x40(%rbx),%rcx
  0x00007f8ab913d482: jmpq   *%rcx

AHE@0x00007f8ac80eb5a8: 0xbba00000 i2c: 0x00007f8ab913d560 c2i: 0x00007f8ab913d67b c2iUV: 0x00007f8ab913d64e
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)Ljava/lang/Class; (555 bytes generated)
c2i argument handler starts at 0x7f8ab913d67b
  0x00007f8ab913d560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913d564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913d56e: cmp    %r11,%rax
  0x00007f8ab913d571: jbe    0x00007f8ab913d58a
  0x00007f8ab913d577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913d581: cmp    %r11,%rax
  0x00007f8ab913d584: jb     0x00007f8ab913d627
  0x00007f8ab913d58a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913d594: cmp    %r11,%rax
  0x00007f8ab913d597: jbe    0x00007f8ab913d5b0
  0x00007f8ab913d59d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913d5a7: cmp    %r11,%rax
  0x00007f8ab913d5aa: jb     0x00007f8ab913d627
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913d5b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913d5b5: sub    $0x80,%rsp
  0x00007f8ab913d5bc: mov    %rax,0x78(%rsp)
  0x00007f8ab913d5c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913d5c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913d5cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913d5d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913d5d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913d5da: mov    %rdi,0x40(%rsp)
  0x00007f8ab913d5df: mov    %r8,0x38(%rsp)
  0x00007f8ab913d5e4: mov    %r9,0x30(%rsp)
  0x00007f8ab913d5e9: mov    %r10,0x28(%rsp)
  0x00007f8ab913d5ee: mov    %r11,0x20(%rsp)
  0x00007f8ab913d5f3: mov    %r12,0x18(%rsp)
  0x00007f8ab913d5f8: mov    %r13,0x10(%rsp)
  0x00007f8ab913d5fd: mov    %r14,0x8(%rsp)
  0x00007f8ab913d602: mov    %r15,(%rsp)
  0x00007f8ab913d606: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913d610: movabs $0x7f8ab913d5b0,%rsi
  0x00007f8ab913d61a: mov    %rsp,%rdx
  0x00007f8ab913d61d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d621: callq  0x00007f8aceddb9fa
  0x00007f8ab913d626: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913d627: mov    %rsp,%r11
  0x00007f8ab913d62a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d62e: push   %rax
  0x00007f8ab913d62f: mov    %r11,%rax
  0x00007f8ab913d632: mov    0x50(%rbx),%r11
  0x00007f8ab913d636: mov    0x18(%rax),%rsi
  0x00007f8ab913d63a: mov    0x10(%rax),%rdx
  0x00007f8ab913d63e: mov    0x8(%rax),%ecx
  0x00007f8ab913d641: mov    %rbx,0x258(%r15)
  0x00007f8ab913d648: mov    %rbx,%rax
  0x00007f8ab913d64b: jmpq   *%r11
  0x00007f8ab913d64e: mov    0x8(%rsi),%ebx
  0x00007f8ab913d651: shl    $0x3,%rbx
  0x00007f8ab913d655: cmp    0x10(%rax),%rbx
  0x00007f8ab913d659: mov    0x8(%rax),%rbx
  0x00007f8ab913d65d: je     0x00007f8ab913d668
  0x00007f8ab913d663: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d668: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d670: je     0x00007f8ab913d76b
  0x00007f8ab913d676: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d67b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d683: je     0x00007f8ab913d76b
  0x00007f8ab913d689: mov    %rsp,%r13
  0x00007f8ab913d68c: mov    (%rsp),%rax
  0x00007f8ab913d690: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d694: pushfq 
  0x00007f8ab913d695: sub    $0x8,%rsp
  0x00007f8ab913d699: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913d69e: sub    $0x80,%rsp
  0x00007f8ab913d6a5: mov    %rax,0x78(%rsp)
  0x00007f8ab913d6aa: mov    %rcx,0x70(%rsp)
  0x00007f8ab913d6af: mov    %rdx,0x68(%rsp)
  0x00007f8ab913d6b4: mov    %rbx,0x60(%rsp)
  0x00007f8ab913d6b9: mov    %rbp,0x50(%rsp)
  0x00007f8ab913d6be: mov    %rsi,0x48(%rsp)
  0x00007f8ab913d6c3: mov    %rdi,0x40(%rsp)
  0x00007f8ab913d6c8: mov    %r8,0x38(%rsp)
  0x00007f8ab913d6cd: mov    %r9,0x30(%rsp)
  0x00007f8ab913d6d2: mov    %r10,0x28(%rsp)
  0x00007f8ab913d6d7: mov    %r11,0x20(%rsp)
  0x00007f8ab913d6dc: mov    %r12,0x18(%rsp)
  0x00007f8ab913d6e1: mov    %r13,0x10(%rsp)
  0x00007f8ab913d6e6: mov    %r14,0x8(%rsp)
  0x00007f8ab913d6eb: mov    %r15,(%rsp)
  0x00007f8ab913d6ef: sub    $0x200,%rsp
  0x00007f8ab913d6f6: fxsave64 (%rsp)
  0x00007f8ab913d6fb: mov    %rbx,%rdi
  0x00007f8ab913d6fe: mov    %rax,%rsi
  0x00007f8ab913d701: callq  0x00007f8acef8bbca
  0x00007f8ab913d706: fxrstor64 (%rsp)
  0x00007f8ab913d70b: add    $0x200,%rsp
  0x00007f8ab913d712: mov    (%rsp),%r15
  0x00007f8ab913d716: mov    0x8(%rsp),%r14
  0x00007f8ab913d71b: mov    0x10(%rsp),%r13
  0x00007f8ab913d720: mov    0x18(%rsp),%r12
  0x00007f8ab913d725: mov    0x20(%rsp),%r11
  0x00007f8ab913d72a: mov    0x28(%rsp),%r10
  0x00007f8ab913d72f: mov    0x30(%rsp),%r9
  0x00007f8ab913d734: mov    0x38(%rsp),%r8
  0x00007f8ab913d739: mov    0x40(%rsp),%rdi
  0x00007f8ab913d73e: mov    0x48(%rsp),%rsi
  0x00007f8ab913d743: mov    0x50(%rsp),%rbp
  0x00007f8ab913d748: mov    0x60(%rsp),%rbx
  0x00007f8ab913d74d: mov    0x68(%rsp),%rdx
  0x00007f8ab913d752: mov    0x70(%rsp),%rcx
  0x00007f8ab913d757: mov    0x78(%rsp),%rax
  0x00007f8ab913d75c: add    $0x80,%rsp
  0x00007f8ab913d763: add    $0x8,%rsp
  0x00007f8ab913d767: popfq  
  0x00007f8ab913d768: mov    %r13,%rsp
  0x00007f8ab913d76b: pop    %rax
  0x00007f8ab913d76c: mov    %rsp,%r13
  0x00007f8ab913d76f: sub    $0x20,%rsp
  0x00007f8ab913d773: mov    %rax,(%rsp)
  0x00007f8ab913d777: mov    %rsi,0x18(%rsp)
  0x00007f8ab913d77c: mov    %rdx,0x10(%rsp)
  0x00007f8ab913d781: mov    %ecx,0x8(%rsp)
  0x00007f8ab913d785: mov    0x40(%rbx),%rcx
  0x00007f8ab913d789: jmpq   *%rcx

AHE@0x00007f8ac80eb5f0: 0x i2c: 0x00007f8ab913d860 c2i: 0x00007f8ab913d970 c2iUV: 0x00007f8ab913d943
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab913d970
  0x00007f8ab913d860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913d864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913d86e: cmp    %r11,%rax
  0x00007f8ab913d871: jbe    0x00007f8ab913d88a
  0x00007f8ab913d877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913d881: cmp    %r11,%rax
  0x00007f8ab913d884: jb     0x00007f8ab913d927
  0x00007f8ab913d88a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913d894: cmp    %r11,%rax
  0x00007f8ab913d897: jbe    0x00007f8ab913d8b0
  0x00007f8ab913d89d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913d8a7: cmp    %r11,%rax
  0x00007f8ab913d8aa: jb     0x00007f8ab913d927
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913d8b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913d8b5: sub    $0x80,%rsp
  0x00007f8ab913d8bc: mov    %rax,0x78(%rsp)
  0x00007f8ab913d8c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913d8c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913d8cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913d8d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913d8d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913d8da: mov    %rdi,0x40(%rsp)
  0x00007f8ab913d8df: mov    %r8,0x38(%rsp)
  0x00007f8ab913d8e4: mov    %r9,0x30(%rsp)
  0x00007f8ab913d8e9: mov    %r10,0x28(%rsp)
  0x00007f8ab913d8ee: mov    %r11,0x20(%rsp)
  0x00007f8ab913d8f3: mov    %r12,0x18(%rsp)
  0x00007f8ab913d8f8: mov    %r13,0x10(%rsp)
  0x00007f8ab913d8fd: mov    %r14,0x8(%rsp)
  0x00007f8ab913d902: mov    %r15,(%rsp)
  0x00007f8ab913d906: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913d910: movabs $0x7f8ab913d8b0,%rsi
  0x00007f8ab913d91a: mov    %rsp,%rdx
  0x00007f8ab913d91d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d921: callq  0x00007f8aceddb9fa
  0x00007f8ab913d926: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913d927: mov    %rsp,%r11
  0x00007f8ab913d92a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d92e: push   %rax
  0x00007f8ab913d92f: mov    %r11,%rax
  0x00007f8ab913d932: mov    0x50(%rbx),%r11
  0x00007f8ab913d936: mov    %rbx,0x258(%r15)
  0x00007f8ab913d93d: mov    %rbx,%rax
  0x00007f8ab913d940: jmpq   *%r11
  0x00007f8ab913d943: mov    0x8(%rsi),%ebx
  0x00007f8ab913d946: shl    $0x3,%rbx
  0x00007f8ab913d94a: cmp    0x10(%rax),%rbx
  0x00007f8ab913d94e: mov    0x8(%rax),%rbx
  0x00007f8ab913d952: je     0x00007f8ab913d95d
  0x00007f8ab913d958: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d95d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d965: je     0x00007f8ab913da60
  0x00007f8ab913d96b: jmpq   0x00007f8ab9105c40
  0x00007f8ab913d970: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913d978: je     0x00007f8ab913da60
  0x00007f8ab913d97e: mov    %rsp,%r13
  0x00007f8ab913d981: mov    (%rsp),%rax
  0x00007f8ab913d985: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913d989: pushfq 
  0x00007f8ab913d98a: sub    $0x8,%rsp
  0x00007f8ab913d98e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913d993: sub    $0x80,%rsp
  0x00007f8ab913d99a: mov    %rax,0x78(%rsp)
  0x00007f8ab913d99f: mov    %rcx,0x70(%rsp)
  0x00007f8ab913d9a4: mov    %rdx,0x68(%rsp)
  0x00007f8ab913d9a9: mov    %rbx,0x60(%rsp)
  0x00007f8ab913d9ae: mov    %rbp,0x50(%rsp)
  0x00007f8ab913d9b3: mov    %rsi,0x48(%rsp)
  0x00007f8ab913d9b8: mov    %rdi,0x40(%rsp)
  0x00007f8ab913d9bd: mov    %r8,0x38(%rsp)
  0x00007f8ab913d9c2: mov    %r9,0x30(%rsp)
  0x00007f8ab913d9c7: mov    %r10,0x28(%rsp)
  0x00007f8ab913d9cc: mov    %r11,0x20(%rsp)
  0x00007f8ab913d9d1: mov    %r12,0x18(%rsp)
  0x00007f8ab913d9d6: mov    %r13,0x10(%rsp)
  0x00007f8ab913d9db: mov    %r14,0x8(%rsp)
  0x00007f8ab913d9e0: mov    %r15,(%rsp)
  0x00007f8ab913d9e4: sub    $0x200,%rsp
  0x00007f8ab913d9eb: fxsave64 (%rsp)
  0x00007f8ab913d9f0: mov    %rbx,%rdi
  0x00007f8ab913d9f3: mov    %rax,%rsi
  0x00007f8ab913d9f6: callq  0x00007f8acef8bbca
  0x00007f8ab913d9fb: fxrstor64 (%rsp)
  0x00007f8ab913da00: add    $0x200,%rsp
  0x00007f8ab913da07: mov    (%rsp),%r15
  0x00007f8ab913da0b: mov    0x8(%rsp),%r14
  0x00007f8ab913da10: mov    0x10(%rsp),%r13
  0x00007f8ab913da15: mov    0x18(%rsp),%r12
  0x00007f8ab913da1a: mov    0x20(%rsp),%r11
  0x00007f8ab913da1f: mov    0x28(%rsp),%r10
  0x00007f8ab913da24: mov    0x30(%rsp),%r9
  0x00007f8ab913da29: mov    0x38(%rsp),%r8
  0x00007f8ab913da2e: mov    0x40(%rsp),%rdi
  0x00007f8ab913da33: mov    0x48(%rsp),%rsi
  0x00007f8ab913da38: mov    0x50(%rsp),%rbp
  0x00007f8ab913da3d: mov    0x60(%rsp),%rbx
  0x00007f8ab913da42: mov    0x68(%rsp),%rdx
  0x00007f8ab913da47: mov    0x70(%rsp),%rcx
  0x00007f8ab913da4c: mov    0x78(%rsp),%rax
  0x00007f8ab913da51: add    $0x80,%rsp
  0x00007f8ab913da58: add    $0x8,%rsp
  0x00007f8ab913da5c: popfq  
  0x00007f8ab913da5d: mov    %r13,%rsp
  0x00007f8ab913da60: pop    %rax
  0x00007f8ab913da61: mov    %rsp,%r13
  0x00007f8ab913da64: sub    $0x10,%rsp
  0x00007f8ab913da68: mov    %rax,(%rsp)
  0x00007f8ab913da6c: mov    0x40(%rbx),%rcx
  0x00007f8ab913da70: jmpq   *%rcx

AHE@0x00007f8ac80eb638: 0xbbb00000 i2c: 0x00007f8ab913db20 c2i: 0x00007f8ab913dc3c c2iUV: 0x00007f8ab913dc0f
i2c argument handler #0 for: receiver (Ljava/lang/Void;Ljava/lang/ClassLoader;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab913dc3c
  0x00007f8ab913db20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913db24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913db2e: cmp    %r11,%rax
  0x00007f8ab913db31: jbe    0x00007f8ab913db4a
  0x00007f8ab913db37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913db41: cmp    %r11,%rax
  0x00007f8ab913db44: jb     0x00007f8ab913dbe7
  0x00007f8ab913db4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913db54: cmp    %r11,%rax
  0x00007f8ab913db57: jbe    0x00007f8ab913db70
  0x00007f8ab913db5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913db67: cmp    %r11,%rax
  0x00007f8ab913db6a: jb     0x00007f8ab913dbe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913db70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913db75: sub    $0x80,%rsp
  0x00007f8ab913db7c: mov    %rax,0x78(%rsp)
  0x00007f8ab913db81: mov    %rcx,0x70(%rsp)
  0x00007f8ab913db86: mov    %rdx,0x68(%rsp)
  0x00007f8ab913db8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913db90: mov    %rbp,0x50(%rsp)
  0x00007f8ab913db95: mov    %rsi,0x48(%rsp)
  0x00007f8ab913db9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913db9f: mov    %r8,0x38(%rsp)
  0x00007f8ab913dba4: mov    %r9,0x30(%rsp)
  0x00007f8ab913dba9: mov    %r10,0x28(%rsp)
  0x00007f8ab913dbae: mov    %r11,0x20(%rsp)
  0x00007f8ab913dbb3: mov    %r12,0x18(%rsp)
  0x00007f8ab913dbb8: mov    %r13,0x10(%rsp)
  0x00007f8ab913dbbd: mov    %r14,0x8(%rsp)
  0x00007f8ab913dbc2: mov    %r15,(%rsp)
  0x00007f8ab913dbc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913dbd0: movabs $0x7f8ab913db70,%rsi
  0x00007f8ab913dbda: mov    %rsp,%rdx
  0x00007f8ab913dbdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913dbe1: callq  0x00007f8aceddb9fa
  0x00007f8ab913dbe6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913dbe7: mov    %rsp,%r11
  0x00007f8ab913dbea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913dbee: push   %rax
  0x00007f8ab913dbef: mov    %r11,%rax
  0x00007f8ab913dbf2: mov    0x50(%rbx),%r11
  0x00007f8ab913dbf6: mov    0x18(%rax),%rsi
  0x00007f8ab913dbfa: mov    0x10(%rax),%rdx
  0x00007f8ab913dbfe: mov    0x8(%rax),%rcx
  0x00007f8ab913dc02: mov    %rbx,0x258(%r15)
  0x00007f8ab913dc09: mov    %rbx,%rax
  0x00007f8ab913dc0c: jmpq   *%r11
  0x00007f8ab913dc0f: mov    0x8(%rsi),%ebx
  0x00007f8ab913dc12: shl    $0x3,%rbx
  0x00007f8ab913dc16: cmp    0x10(%rax),%rbx
  0x00007f8ab913dc1a: mov    0x8(%rax),%rbx
  0x00007f8ab913dc1e: je     0x00007f8ab913dc29
  0x00007f8ab913dc24: jmpq   0x00007f8ab9105c40
  0x00007f8ab913dc29: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913dc31: je     0x00007f8ab913dd2c
  0x00007f8ab913dc37: jmpq   0x00007f8ab9105c40
  0x00007f8ab913dc3c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913dc44: je     0x00007f8ab913dd2c
  0x00007f8ab913dc4a: mov    %rsp,%r13
  0x00007f8ab913dc4d: mov    (%rsp),%rax
  0x00007f8ab913dc51: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913dc55: pushfq 
  0x00007f8ab913dc56: sub    $0x8,%rsp
  0x00007f8ab913dc5a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913dc5f: sub    $0x80,%rsp
  0x00007f8ab913dc66: mov    %rax,0x78(%rsp)
  0x00007f8ab913dc6b: mov    %rcx,0x70(%rsp)
  0x00007f8ab913dc70: mov    %rdx,0x68(%rsp)
  0x00007f8ab913dc75: mov    %rbx,0x60(%rsp)
  0x00007f8ab913dc7a: mov    %rbp,0x50(%rsp)
  0x00007f8ab913dc7f: mov    %rsi,0x48(%rsp)
  0x00007f8ab913dc84: mov    %rdi,0x40(%rsp)
  0x00007f8ab913dc89: mov    %r8,0x38(%rsp)
  0x00007f8ab913dc8e: mov    %r9,0x30(%rsp)
  0x00007f8ab913dc93: mov    %r10,0x28(%rsp)
  0x00007f8ab913dc98: mov    %r11,0x20(%rsp)
  0x00007f8ab913dc9d: mov    %r12,0x18(%rsp)
  0x00007f8ab913dca2: mov    %r13,0x10(%rsp)
  0x00007f8ab913dca7: mov    %r14,0x8(%rsp)
  0x00007f8ab913dcac: mov    %r15,(%rsp)
  0x00007f8ab913dcb0: sub    $0x200,%rsp
  0x00007f8ab913dcb7: fxsave64 (%rsp)
  0x00007f8ab913dcbc: mov    %rbx,%rdi
  0x00007f8ab913dcbf: mov    %rax,%rsi
  0x00007f8ab913dcc2: callq  0x00007f8acef8bbca
  0x00007f8ab913dcc7: fxrstor64 (%rsp)
  0x00007f8ab913dccc: add    $0x200,%rsp
  0x00007f8ab913dcd3: mov    (%rsp),%r15
  0x00007f8ab913dcd7: mov    0x8(%rsp),%r14
  0x00007f8ab913dcdc: mov    0x10(%rsp),%r13
  0x00007f8ab913dce1: mov    0x18(%rsp),%r12
  0x00007f8ab913dce6: mov    0x20(%rsp),%r11
  0x00007f8ab913dceb: mov    0x28(%rsp),%r10
  0x00007f8ab913dcf0: mov    0x30(%rsp),%r9
  0x00007f8ab913dcf5: mov    0x38(%rsp),%r8
  0x00007f8ab913dcfa: mov    0x40(%rsp),%rdi
  0x00007f8ab913dcff: mov    0x48(%rsp),%rsi
  0x00007f8ab913dd04: mov    0x50(%rsp),%rbp
  0x00007f8ab913dd09: mov    0x60(%rsp),%rbx
  0x00007f8ab913dd0e: mov    0x68(%rsp),%rdx
  0x00007f8ab913dd13: mov    0x70(%rsp),%rcx
  0x00007f8ab913dd18: mov    0x78(%rsp),%rax
  0x00007f8ab913dd1d: add    $0x80,%rsp
  0x00007f8ab913dd24: add    $0x8,%rsp
  0x00007f8ab913dd28: popfq  
  0x00007f8ab913dd29: mov    %r13,%rsp
  0x00007f8ab913dd2c: pop    %rax
  0x00007f8ab913dd2d: mov    %rsp,%r13
  0x00007f8ab913dd30: sub    $0x20,%rsp
  0x00007f8ab913dd34: mov    %rax,(%rsp)
  0x00007f8ab913dd38: mov    %rsi,0x18(%rsp)
  0x00007f8ab913dd3d: mov    %rdx,0x10(%rsp)
  0x00007f8ab913dd42: mov    %rcx,0x8(%rsp)
  0x00007f8ab913dd47: mov    0x40(%rbx),%rcx
  0x00007f8ab913dd4b: jmpq   *%rcx

AHE@0x00007f8ac80eb680: 0xb0000000 i2c: 0x00007f8ab913de20 c2i: 0x00007f8ab913df34 c2iUV: 0x00007f8ab913df07
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f8ab913df34
  0x00007f8ab913de20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913de24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913de2e: cmp    %r11,%rax
  0x00007f8ab913de31: jbe    0x00007f8ab913de4a
  0x00007f8ab913de37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913de41: cmp    %r11,%rax
  0x00007f8ab913de44: jb     0x00007f8ab913dee7
  0x00007f8ab913de4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913de54: cmp    %r11,%rax
  0x00007f8ab913de57: jbe    0x00007f8ab913de70
  0x00007f8ab913de5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913de67: cmp    %r11,%rax
  0x00007f8ab913de6a: jb     0x00007f8ab913dee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913de70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913de75: sub    $0x80,%rsp
  0x00007f8ab913de7c: mov    %rax,0x78(%rsp)
  0x00007f8ab913de81: mov    %rcx,0x70(%rsp)
  0x00007f8ab913de86: mov    %rdx,0x68(%rsp)
  0x00007f8ab913de8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913de90: mov    %rbp,0x50(%rsp)
  0x00007f8ab913de95: mov    %rsi,0x48(%rsp)
  0x00007f8ab913de9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913de9f: mov    %r8,0x38(%rsp)
  0x00007f8ab913dea4: mov    %r9,0x30(%rsp)
  0x00007f8ab913dea9: mov    %r10,0x28(%rsp)
  0x00007f8ab913deae: mov    %r11,0x20(%rsp)
  0x00007f8ab913deb3: mov    %r12,0x18(%rsp)
  0x00007f8ab913deb8: mov    %r13,0x10(%rsp)
  0x00007f8ab913debd: mov    %r14,0x8(%rsp)
  0x00007f8ab913dec2: mov    %r15,(%rsp)
  0x00007f8ab913dec6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913ded0: movabs $0x7f8ab913de70,%rsi
  0x00007f8ab913deda: mov    %rsp,%rdx
  0x00007f8ab913dedd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913dee1: callq  0x00007f8aceddb9fa
  0x00007f8ab913dee6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913dee7: mov    %rsp,%r11
  0x00007f8ab913deea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913deee: push   %rax
  0x00007f8ab913deef: mov    %r11,%rax
  0x00007f8ab913def2: mov    0x50(%rbx),%r11
  0x00007f8ab913def6: mov    0x8(%rax),%rsi
  0x00007f8ab913defa: mov    %rbx,0x258(%r15)
  0x00007f8ab913df01: mov    %rbx,%rax
  0x00007f8ab913df04: jmpq   *%r11
  0x00007f8ab913df07: mov    0x8(%rsi),%ebx
  0x00007f8ab913df0a: shl    $0x3,%rbx
  0x00007f8ab913df0e: cmp    0x10(%rax),%rbx
  0x00007f8ab913df12: mov    0x8(%rax),%rbx
  0x00007f8ab913df16: je     0x00007f8ab913df21
  0x00007f8ab913df1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913df21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913df29: je     0x00007f8ab913e024
  0x00007f8ab913df2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab913df34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913df3c: je     0x00007f8ab913e024
  0x00007f8ab913df42: mov    %rsp,%r13
  0x00007f8ab913df45: mov    (%rsp),%rax
  0x00007f8ab913df49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913df4d: pushfq 
  0x00007f8ab913df4e: sub    $0x8,%rsp
  0x00007f8ab913df52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913df57: sub    $0x80,%rsp
  0x00007f8ab913df5e: mov    %rax,0x78(%rsp)
  0x00007f8ab913df63: mov    %rcx,0x70(%rsp)
  0x00007f8ab913df68: mov    %rdx,0x68(%rsp)
  0x00007f8ab913df6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab913df72: mov    %rbp,0x50(%rsp)
  0x00007f8ab913df77: mov    %rsi,0x48(%rsp)
  0x00007f8ab913df7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab913df81: mov    %r8,0x38(%rsp)
  0x00007f8ab913df86: mov    %r9,0x30(%rsp)
  0x00007f8ab913df8b: mov    %r10,0x28(%rsp)
  0x00007f8ab913df90: mov    %r11,0x20(%rsp)
  0x00007f8ab913df95: mov    %r12,0x18(%rsp)
  0x00007f8ab913df9a: mov    %r13,0x10(%rsp)
  0x00007f8ab913df9f: mov    %r14,0x8(%rsp)
  0x00007f8ab913dfa4: mov    %r15,(%rsp)
  0x00007f8ab913dfa8: sub    $0x200,%rsp
  0x00007f8ab913dfaf: fxsave64 (%rsp)
  0x00007f8ab913dfb4: mov    %rbx,%rdi
  0x00007f8ab913dfb7: mov    %rax,%rsi
  0x00007f8ab913dfba: callq  0x00007f8acef8bbca
  0x00007f8ab913dfbf: fxrstor64 (%rsp)
  0x00007f8ab913dfc4: add    $0x200,%rsp
  0x00007f8ab913dfcb: mov    (%rsp),%r15
  0x00007f8ab913dfcf: mov    0x8(%rsp),%r14
  0x00007f8ab913dfd4: mov    0x10(%rsp),%r13
  0x00007f8ab913dfd9: mov    0x18(%rsp),%r12
  0x00007f8ab913dfde: mov    0x20(%rsp),%r11
  0x00007f8ab913dfe3: mov    0x28(%rsp),%r10
  0x00007f8ab913dfe8: mov    0x30(%rsp),%r9
  0x00007f8ab913dfed: mov    0x38(%rsp),%r8
  0x00007f8ab913dff2: mov    0x40(%rsp),%rdi
  0x00007f8ab913dff7: mov    0x48(%rsp),%rsi
  0x00007f8ab913dffc: mov    0x50(%rsp),%rbp
  0x00007f8ab913e001: mov    0x60(%rsp),%rbx
  0x00007f8ab913e006: mov    0x68(%rsp),%rdx
  0x00007f8ab913e00b: mov    0x70(%rsp),%rcx
  0x00007f8ab913e010: mov    0x78(%rsp),%rax
  0x00007f8ab913e015: add    $0x80,%rsp
  0x00007f8ab913e01c: add    $0x8,%rsp
  0x00007f8ab913e020: popfq  
  0x00007f8ab913e021: mov    %r13,%rsp
  0x00007f8ab913e024: pop    %rax
  0x00007f8ab913e025: mov    %rsp,%r13
  0x00007f8ab913e028: sub    $0x10,%rsp
  0x00007f8ab913e02c: mov    %rax,(%rsp)
  0x00007f8ab913e030: mov    %rsi,0x8(%rsp)
  0x00007f8ab913e035: mov    0x40(%rbx),%rcx
  0x00007f8ab913e039: jmpq   *%rcx

AHE@0x00007f8ac80eb6c8: 0xbb000000 i2c: 0x00007f8ab913e0e0 c2i: 0x00007f8ab913e1f8 c2iUV: 0x00007f8ab913e1cb
i2c argument handler #0 for: receiver (Ljava/lang/ClassLoader;)V (548 bytes generated)
c2i argument handler starts at 0x7f8ab913e1f8
  0x00007f8ab913e0e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913e0e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913e0ee: cmp    %r11,%rax
  0x00007f8ab913e0f1: jbe    0x00007f8ab913e10a
  0x00007f8ab913e0f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913e101: cmp    %r11,%rax
  0x00007f8ab913e104: jb     0x00007f8ab913e1a7
  0x00007f8ab913e10a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913e114: cmp    %r11,%rax
  0x00007f8ab913e117: jbe    0x00007f8ab913e130
  0x00007f8ab913e11d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913e127: cmp    %r11,%rax
  0x00007f8ab913e12a: jb     0x00007f8ab913e1a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913e130: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913e135: sub    $0x80,%rsp
  0x00007f8ab913e13c: mov    %rax,0x78(%rsp)
  0x00007f8ab913e141: mov    %rcx,0x70(%rsp)
  0x00007f8ab913e146: mov    %rdx,0x68(%rsp)
  0x00007f8ab913e14b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913e150: mov    %rbp,0x50(%rsp)
  0x00007f8ab913e155: mov    %rsi,0x48(%rsp)
  0x00007f8ab913e15a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913e15f: mov    %r8,0x38(%rsp)
  0x00007f8ab913e164: mov    %r9,0x30(%rsp)
  0x00007f8ab913e169: mov    %r10,0x28(%rsp)
  0x00007f8ab913e16e: mov    %r11,0x20(%rsp)
  0x00007f8ab913e173: mov    %r12,0x18(%rsp)
  0x00007f8ab913e178: mov    %r13,0x10(%rsp)
  0x00007f8ab913e17d: mov    %r14,0x8(%rsp)
  0x00007f8ab913e182: mov    %r15,(%rsp)
  0x00007f8ab913e186: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913e190: movabs $0x7f8ab913e130,%rsi
  0x00007f8ab913e19a: mov    %rsp,%rdx
  0x00007f8ab913e19d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e1a1: callq  0x00007f8aceddb9fa
  0x00007f8ab913e1a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913e1a7: mov    %rsp,%r11
  0x00007f8ab913e1aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e1ae: push   %rax
  0x00007f8ab913e1af: mov    %r11,%rax
  0x00007f8ab913e1b2: mov    0x50(%rbx),%r11
  0x00007f8ab913e1b6: mov    0x10(%rax),%rsi
  0x00007f8ab913e1ba: mov    0x8(%rax),%rdx
  0x00007f8ab913e1be: mov    %rbx,0x258(%r15)
  0x00007f8ab913e1c5: mov    %rbx,%rax
  0x00007f8ab913e1c8: jmpq   *%r11
  0x00007f8ab913e1cb: mov    0x8(%rsi),%ebx
  0x00007f8ab913e1ce: shl    $0x3,%rbx
  0x00007f8ab913e1d2: cmp    0x10(%rax),%rbx
  0x00007f8ab913e1d6: mov    0x8(%rax),%rbx
  0x00007f8ab913e1da: je     0x00007f8ab913e1e5
  0x00007f8ab913e1e0: jmpq   0x00007f8ab9105c40
  0x00007f8ab913e1e5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913e1ed: je     0x00007f8ab913e2e8
  0x00007f8ab913e1f3: jmpq   0x00007f8ab9105c40
  0x00007f8ab913e1f8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913e200: je     0x00007f8ab913e2e8
  0x00007f8ab913e206: mov    %rsp,%r13
  0x00007f8ab913e209: mov    (%rsp),%rax
  0x00007f8ab913e20d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e211: pushfq 
  0x00007f8ab913e212: sub    $0x8,%rsp
  0x00007f8ab913e216: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913e21b: sub    $0x80,%rsp
  0x00007f8ab913e222: mov    %rax,0x78(%rsp)
  0x00007f8ab913e227: mov    %rcx,0x70(%rsp)
  0x00007f8ab913e22c: mov    %rdx,0x68(%rsp)
  0x00007f8ab913e231: mov    %rbx,0x60(%rsp)
  0x00007f8ab913e236: mov    %rbp,0x50(%rsp)
  0x00007f8ab913e23b: mov    %rsi,0x48(%rsp)
  0x00007f8ab913e240: mov    %rdi,0x40(%rsp)
  0x00007f8ab913e245: mov    %r8,0x38(%rsp)
  0x00007f8ab913e24a: mov    %r9,0x30(%rsp)
  0x00007f8ab913e24f: mov    %r10,0x28(%rsp)
  0x00007f8ab913e254: mov    %r11,0x20(%rsp)
  0x00007f8ab913e259: mov    %r12,0x18(%rsp)
  0x00007f8ab913e25e: mov    %r13,0x10(%rsp)
  0x00007f8ab913e263: mov    %r14,0x8(%rsp)
  0x00007f8ab913e268: mov    %r15,(%rsp)
  0x00007f8ab913e26c: sub    $0x200,%rsp
  0x00007f8ab913e273: fxsave64 (%rsp)
  0x00007f8ab913e278: mov    %rbx,%rdi
  0x00007f8ab913e27b: mov    %rax,%rsi
  0x00007f8ab913e27e: callq  0x00007f8acef8bbca
  0x00007f8ab913e283: fxrstor64 (%rsp)
  0x00007f8ab913e288: add    $0x200,%rsp
  0x00007f8ab913e28f: mov    (%rsp),%r15
  0x00007f8ab913e293: mov    0x8(%rsp),%r14
  0x00007f8ab913e298: mov    0x10(%rsp),%r13
  0x00007f8ab913e29d: mov    0x18(%rsp),%r12
  0x00007f8ab913e2a2: mov    0x20(%rsp),%r11
  0x00007f8ab913e2a7: mov    0x28(%rsp),%r10
  0x00007f8ab913e2ac: mov    0x30(%rsp),%r9
  0x00007f8ab913e2b1: mov    0x38(%rsp),%r8
  0x00007f8ab913e2b6: mov    0x40(%rsp),%rdi
  0x00007f8ab913e2bb: mov    0x48(%rsp),%rsi
  0x00007f8ab913e2c0: mov    0x50(%rsp),%rbp
  0x00007f8ab913e2c5: mov    0x60(%rsp),%rbx
  0x00007f8ab913e2ca: mov    0x68(%rsp),%rdx
  0x00007f8ab913e2cf: mov    0x70(%rsp),%rcx
  0x00007f8ab913e2d4: mov    0x78(%rsp),%rax
  0x00007f8ab913e2d9: add    $0x80,%rsp
  0x00007f8ab913e2e0: add    $0x8,%rsp
  0x00007f8ab913e2e4: popfq  
  0x00007f8ab913e2e5: mov    %r13,%rsp
  0x00007f8ab913e2e8: pop    %rax
  0x00007f8ab913e2e9: mov    %rsp,%r13
  0x00007f8ab913e2ec: sub    $0x20,%rsp
  0x00007f8ab913e2f0: mov    %rax,(%rsp)
  0x00007f8ab913e2f4: mov    %rsi,0x10(%rsp)
  0x00007f8ab913e2f9: mov    %rdx,0x8(%rsp)
  0x00007f8ab913e2fe: mov    0x40(%rbx),%rcx
  0x00007f8ab913e302: jmpq   *%rcx

AHE@0x00007f8ac80eb710: 0xb0000000 i2c: 0x00007f8ab913e3e0 c2i: 0x00007f8ab913e4f4 c2iUV: 0x00007f8ab913e4c7
i2c argument handler #0 for: receiver ()Ljava/security/PermissionCollection; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913e4f4
  0x00007f8ab913e3e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913e3e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913e3ee: cmp    %r11,%rax
  0x00007f8ab913e3f1: jbe    0x00007f8ab913e40a
  0x00007f8ab913e3f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913e401: cmp    %r11,%rax
  0x00007f8ab913e404: jb     0x00007f8ab913e4a7
  0x00007f8ab913e40a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913e414: cmp    %r11,%rax
  0x00007f8ab913e417: jbe    0x00007f8ab913e430
  0x00007f8ab913e41d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913e427: cmp    %r11,%rax
  0x00007f8ab913e42a: jb     0x00007f8ab913e4a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913e430: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913e435: sub    $0x80,%rsp
  0x00007f8ab913e43c: mov    %rax,0x78(%rsp)
  0x00007f8ab913e441: mov    %rcx,0x70(%rsp)
  0x00007f8ab913e446: mov    %rdx,0x68(%rsp)
  0x00007f8ab913e44b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913e450: mov    %rbp,0x50(%rsp)
  0x00007f8ab913e455: mov    %rsi,0x48(%rsp)
  0x00007f8ab913e45a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913e45f: mov    %r8,0x38(%rsp)
  0x00007f8ab913e464: mov    %r9,0x30(%rsp)
  0x00007f8ab913e469: mov    %r10,0x28(%rsp)
  0x00007f8ab913e46e: mov    %r11,0x20(%rsp)
  0x00007f8ab913e473: mov    %r12,0x18(%rsp)
  0x00007f8ab913e478: mov    %r13,0x10(%rsp)
  0x00007f8ab913e47d: mov    %r14,0x8(%rsp)
  0x00007f8ab913e482: mov    %r15,(%rsp)
  0x00007f8ab913e486: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913e490: movabs $0x7f8ab913e430,%rsi
  0x00007f8ab913e49a: mov    %rsp,%rdx
  0x00007f8ab913e49d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e4a1: callq  0x00007f8aceddb9fa
  0x00007f8ab913e4a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913e4a7: mov    %rsp,%r11
  0x00007f8ab913e4aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e4ae: push   %rax
  0x00007f8ab913e4af: mov    %r11,%rax
  0x00007f8ab913e4b2: mov    0x50(%rbx),%r11
  0x00007f8ab913e4b6: mov    0x8(%rax),%rsi
  0x00007f8ab913e4ba: mov    %rbx,0x258(%r15)
  0x00007f8ab913e4c1: mov    %rbx,%rax
  0x00007f8ab913e4c4: jmpq   *%r11
  0x00007f8ab913e4c7: mov    0x8(%rsi),%ebx
  0x00007f8ab913e4ca: shl    $0x3,%rbx
  0x00007f8ab913e4ce: cmp    0x10(%rax),%rbx
  0x00007f8ab913e4d2: mov    0x8(%rax),%rbx
  0x00007f8ab913e4d6: je     0x00007f8ab913e4e1
  0x00007f8ab913e4dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab913e4e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913e4e9: je     0x00007f8ab913e5e4
  0x00007f8ab913e4ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab913e4f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913e4fc: je     0x00007f8ab913e5e4
  0x00007f8ab913e502: mov    %rsp,%r13
  0x00007f8ab913e505: mov    (%rsp),%rax
  0x00007f8ab913e509: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e50d: pushfq 
  0x00007f8ab913e50e: sub    $0x8,%rsp
  0x00007f8ab913e512: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913e517: sub    $0x80,%rsp
  0x00007f8ab913e51e: mov    %rax,0x78(%rsp)
  0x00007f8ab913e523: mov    %rcx,0x70(%rsp)
  0x00007f8ab913e528: mov    %rdx,0x68(%rsp)
  0x00007f8ab913e52d: mov    %rbx,0x60(%rsp)
  0x00007f8ab913e532: mov    %rbp,0x50(%rsp)
  0x00007f8ab913e537: mov    %rsi,0x48(%rsp)
  0x00007f8ab913e53c: mov    %rdi,0x40(%rsp)
  0x00007f8ab913e541: mov    %r8,0x38(%rsp)
  0x00007f8ab913e546: mov    %r9,0x30(%rsp)
  0x00007f8ab913e54b: mov    %r10,0x28(%rsp)
  0x00007f8ab913e550: mov    %r11,0x20(%rsp)
  0x00007f8ab913e555: mov    %r12,0x18(%rsp)
  0x00007f8ab913e55a: mov    %r13,0x10(%rsp)
  0x00007f8ab913e55f: mov    %r14,0x8(%rsp)
  0x00007f8ab913e564: mov    %r15,(%rsp)
  0x00007f8ab913e568: sub    $0x200,%rsp
  0x00007f8ab913e56f: fxsave64 (%rsp)
  0x00007f8ab913e574: mov    %rbx,%rdi
  0x00007f8ab913e577: mov    %rax,%rsi
  0x00007f8ab913e57a: callq  0x00007f8acef8bbca
  0x00007f8ab913e57f: fxrstor64 (%rsp)
  0x00007f8ab913e584: add    $0x200,%rsp
  0x00007f8ab913e58b: mov    (%rsp),%r15
  0x00007f8ab913e58f: mov    0x8(%rsp),%r14
  0x00007f8ab913e594: mov    0x10(%rsp),%r13
  0x00007f8ab913e599: mov    0x18(%rsp),%r12
  0x00007f8ab913e59e: mov    0x20(%rsp),%r11
  0x00007f8ab913e5a3: mov    0x28(%rsp),%r10
  0x00007f8ab913e5a8: mov    0x30(%rsp),%r9
  0x00007f8ab913e5ad: mov    0x38(%rsp),%r8
  0x00007f8ab913e5b2: mov    0x40(%rsp),%rdi
  0x00007f8ab913e5b7: mov    0x48(%rsp),%rsi
  0x00007f8ab913e5bc: mov    0x50(%rsp),%rbp
  0x00007f8ab913e5c1: mov    0x60(%rsp),%rbx
  0x00007f8ab913e5c6: mov    0x68(%rsp),%rdx
  0x00007f8ab913e5cb: mov    0x70(%rsp),%rcx
  0x00007f8ab913e5d0: mov    0x78(%rsp),%rax
  0x00007f8ab913e5d5: add    $0x80,%rsp
  0x00007f8ab913e5dc: add    $0x8,%rsp
  0x00007f8ab913e5e0: popfq  
  0x00007f8ab913e5e1: mov    %r13,%rsp
  0x00007f8ab913e5e4: pop    %rax
  0x00007f8ab913e5e5: mov    %rsp,%r13
  0x00007f8ab913e5e8: sub    $0x10,%rsp
  0x00007f8ab913e5ec: mov    %rax,(%rsp)
  0x00007f8ab913e5f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab913e5f5: mov    0x40(%rbx),%rcx
  0x00007f8ab913e5f9: jmpq   *%rcx

AHE@0x00007f8ac80eb758: 0x i2c: 0x00007f8ab913e6a0 c2i: 0x00007f8ab913e7b0 c2iUV: 0x00007f8ab913e783
i2c argument handler #0 for: static ()Z (530 bytes generated)
c2i argument handler starts at 0x7f8ab913e7b0
  0x00007f8ab913e6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913e6a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913e6ae: cmp    %r11,%rax
  0x00007f8ab913e6b1: jbe    0x00007f8ab913e6ca
  0x00007f8ab913e6b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913e6c1: cmp    %r11,%rax
  0x00007f8ab913e6c4: jb     0x00007f8ab913e767
  0x00007f8ab913e6ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913e6d4: cmp    %r11,%rax
  0x00007f8ab913e6d7: jbe    0x00007f8ab913e6f0
  0x00007f8ab913e6dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913e6e7: cmp    %r11,%rax
  0x00007f8ab913e6ea: jb     0x00007f8ab913e767
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913e6f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913e6f5: sub    $0x80,%rsp
  0x00007f8ab913e6fc: mov    %rax,0x78(%rsp)
  0x00007f8ab913e701: mov    %rcx,0x70(%rsp)
  0x00007f8ab913e706: mov    %rdx,0x68(%rsp)
  0x00007f8ab913e70b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913e710: mov    %rbp,0x50(%rsp)
  0x00007f8ab913e715: mov    %rsi,0x48(%rsp)
  0x00007f8ab913e71a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913e71f: mov    %r8,0x38(%rsp)
  0x00007f8ab913e724: mov    %r9,0x30(%rsp)
  0x00007f8ab913e729: mov    %r10,0x28(%rsp)
  0x00007f8ab913e72e: mov    %r11,0x20(%rsp)
  0x00007f8ab913e733: mov    %r12,0x18(%rsp)
  0x00007f8ab913e738: mov    %r13,0x10(%rsp)
  0x00007f8ab913e73d: mov    %r14,0x8(%rsp)
  0x00007f8ab913e742: mov    %r15,(%rsp)
  0x00007f8ab913e746: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913e750: movabs $0x7f8ab913e6f0,%rsi
  0x00007f8ab913e75a: mov    %rsp,%rdx
  0x00007f8ab913e75d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e761: callq  0x00007f8aceddb9fa
  0x00007f8ab913e766: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913e767: mov    %rsp,%r11
  0x00007f8ab913e76a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e76e: push   %rax
  0x00007f8ab913e76f: mov    %r11,%rax
  0x00007f8ab913e772: mov    0x50(%rbx),%r11
  0x00007f8ab913e776: mov    %rbx,0x258(%r15)
  0x00007f8ab913e77d: mov    %rbx,%rax
  0x00007f8ab913e780: jmpq   *%r11
  0x00007f8ab913e783: mov    0x8(%rsi),%ebx
  0x00007f8ab913e786: shl    $0x3,%rbx
  0x00007f8ab913e78a: cmp    0x10(%rax),%rbx
  0x00007f8ab913e78e: mov    0x8(%rax),%rbx
  0x00007f8ab913e792: je     0x00007f8ab913e79d
  0x00007f8ab913e798: jmpq   0x00007f8ab9105c40
  0x00007f8ab913e79d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913e7a5: je     0x00007f8ab913e8a0
  0x00007f8ab913e7ab: jmpq   0x00007f8ab9105c40
  0x00007f8ab913e7b0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913e7b8: je     0x00007f8ab913e8a0
  0x00007f8ab913e7be: mov    %rsp,%r13
  0x00007f8ab913e7c1: mov    (%rsp),%rax
  0x00007f8ab913e7c5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913e7c9: pushfq 
  0x00007f8ab913e7ca: sub    $0x8,%rsp
  0x00007f8ab913e7ce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913e7d3: sub    $0x80,%rsp
  0x00007f8ab913e7da: mov    %rax,0x78(%rsp)
  0x00007f8ab913e7df: mov    %rcx,0x70(%rsp)
  0x00007f8ab913e7e4: mov    %rdx,0x68(%rsp)
  0x00007f8ab913e7e9: mov    %rbx,0x60(%rsp)
  0x00007f8ab913e7ee: mov    %rbp,0x50(%rsp)
  0x00007f8ab913e7f3: mov    %rsi,0x48(%rsp)
  0x00007f8ab913e7f8: mov    %rdi,0x40(%rsp)
  0x00007f8ab913e7fd: mov    %r8,0x38(%rsp)
  0x00007f8ab913e802: mov    %r9,0x30(%rsp)
  0x00007f8ab913e807: mov    %r10,0x28(%rsp)
  0x00007f8ab913e80c: mov    %r11,0x20(%rsp)
  0x00007f8ab913e811: mov    %r12,0x18(%rsp)
  0x00007f8ab913e816: mov    %r13,0x10(%rsp)
  0x00007f8ab913e81b: mov    %r14,0x8(%rsp)
  0x00007f8ab913e820: mov    %r15,(%rsp)
  0x00007f8ab913e824: sub    $0x200,%rsp
  0x00007f8ab913e82b: fxsave64 (%rsp)
  0x00007f8ab913e830: mov    %rbx,%rdi
  0x00007f8ab913e833: mov    %rax,%rsi
  0x00007f8ab913e836: callq  0x00007f8acef8bbca
  0x00007f8ab913e83b: fxrstor64 (%rsp)
  0x00007f8ab913e840: add    $0x200,%rsp
  0x00007f8ab913e847: mov    (%rsp),%r15
  0x00007f8ab913e84b: mov    0x8(%rsp),%r14
  0x00007f8ab913e850: mov    0x10(%rsp),%r13
  0x00007f8ab913e855: mov    0x18(%rsp),%r12
  0x00007f8ab913e85a: mov    0x20(%rsp),%r11
  0x00007f8ab913e85f: mov    0x28(%rsp),%r10
  0x00007f8ab913e864: mov    0x30(%rsp),%r9
  0x00007f8ab913e869: mov    0x38(%rsp),%r8
  0x00007f8ab913e86e: mov    0x40(%rsp),%rdi
  0x00007f8ab913e873: mov    0x48(%rsp),%rsi
  0x00007f8ab913e878: mov    0x50(%rsp),%rbp
  0x00007f8ab913e87d: mov    0x60(%rsp),%rbx
  0x00007f8ab913e882: mov    0x68(%rsp),%rdx
  0x00007f8ab913e887: mov    0x70(%rsp),%rcx
  0x00007f8ab913e88c: mov    0x78(%rsp),%rax
  0x00007f8ab913e891: add    $0x80,%rsp
  0x00007f8ab913e898: add    $0x8,%rsp
  0x00007f8ab913e89c: popfq  
  0x00007f8ab913e89d: mov    %r13,%rsp
  0x00007f8ab913e8a0: pop    %rax
  0x00007f8ab913e8a1: mov    %rsp,%r13
  0x00007f8ab913e8a4: sub    $0x10,%rsp
  0x00007f8ab913e8a8: mov    %rax,(%rsp)
  0x00007f8ab913e8ac: mov    0x40(%rbx),%rcx
  0x00007f8ab913e8b0: jmpq   *%rcx

AHE@0x00007f8ac80eb7a0: 0xbb000000 i2c: 0x00007f8ab913e960 c2i: 0x00007f8ab913ea78 c2iUV: 0x00007f8ab913ea4b
i2c argument handler #0 for: receiver (Ljava/security/Permission;)Z (548 bytes generated)
c2i argument handler starts at 0x7f8ab913ea78
  0x00007f8ab913e960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913e964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913e96e: cmp    %r11,%rax
  0x00007f8ab913e971: jbe    0x00007f8ab913e98a
  0x00007f8ab913e977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913e981: cmp    %r11,%rax
  0x00007f8ab913e984: jb     0x00007f8ab913ea27
  0x00007f8ab913e98a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913e994: cmp    %r11,%rax
  0x00007f8ab913e997: jbe    0x00007f8ab913e9b0
  0x00007f8ab913e99d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913e9a7: cmp    %r11,%rax
  0x00007f8ab913e9aa: jb     0x00007f8ab913ea27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913e9b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913e9b5: sub    $0x80,%rsp
  0x00007f8ab913e9bc: mov    %rax,0x78(%rsp)
  0x00007f8ab913e9c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913e9c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913e9cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913e9d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913e9d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913e9da: mov    %rdi,0x40(%rsp)
  0x00007f8ab913e9df: mov    %r8,0x38(%rsp)
  0x00007f8ab913e9e4: mov    %r9,0x30(%rsp)
  0x00007f8ab913e9e9: mov    %r10,0x28(%rsp)
  0x00007f8ab913e9ee: mov    %r11,0x20(%rsp)
  0x00007f8ab913e9f3: mov    %r12,0x18(%rsp)
  0x00007f8ab913e9f8: mov    %r13,0x10(%rsp)
  0x00007f8ab913e9fd: mov    %r14,0x8(%rsp)
  0x00007f8ab913ea02: mov    %r15,(%rsp)
  0x00007f8ab913ea06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913ea10: movabs $0x7f8ab913e9b0,%rsi
  0x00007f8ab913ea1a: mov    %rsp,%rdx
  0x00007f8ab913ea1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ea21: callq  0x00007f8aceddb9fa
  0x00007f8ab913ea26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913ea27: mov    %rsp,%r11
  0x00007f8ab913ea2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ea2e: push   %rax
  0x00007f8ab913ea2f: mov    %r11,%rax
  0x00007f8ab913ea32: mov    0x50(%rbx),%r11
  0x00007f8ab913ea36: mov    0x10(%rax),%rsi
  0x00007f8ab913ea3a: mov    0x8(%rax),%rdx
  0x00007f8ab913ea3e: mov    %rbx,0x258(%r15)
  0x00007f8ab913ea45: mov    %rbx,%rax
  0x00007f8ab913ea48: jmpq   *%r11
  0x00007f8ab913ea4b: mov    0x8(%rsi),%ebx
  0x00007f8ab913ea4e: shl    $0x3,%rbx
  0x00007f8ab913ea52: cmp    0x10(%rax),%rbx
  0x00007f8ab913ea56: mov    0x8(%rax),%rbx
  0x00007f8ab913ea5a: je     0x00007f8ab913ea65
  0x00007f8ab913ea60: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ea65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ea6d: je     0x00007f8ab913eb68
  0x00007f8ab913ea73: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ea78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ea80: je     0x00007f8ab913eb68
  0x00007f8ab913ea86: mov    %rsp,%r13
  0x00007f8ab913ea89: mov    (%rsp),%rax
  0x00007f8ab913ea8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ea91: pushfq 
  0x00007f8ab913ea92: sub    $0x8,%rsp
  0x00007f8ab913ea96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913ea9b: sub    $0x80,%rsp
  0x00007f8ab913eaa2: mov    %rax,0x78(%rsp)
  0x00007f8ab913eaa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab913eaac: mov    %rdx,0x68(%rsp)
  0x00007f8ab913eab1: mov    %rbx,0x60(%rsp)
  0x00007f8ab913eab6: mov    %rbp,0x50(%rsp)
  0x00007f8ab913eabb: mov    %rsi,0x48(%rsp)
  0x00007f8ab913eac0: mov    %rdi,0x40(%rsp)
  0x00007f8ab913eac5: mov    %r8,0x38(%rsp)
  0x00007f8ab913eaca: mov    %r9,0x30(%rsp)
  0x00007f8ab913eacf: mov    %r10,0x28(%rsp)
  0x00007f8ab913ead4: mov    %r11,0x20(%rsp)
  0x00007f8ab913ead9: mov    %r12,0x18(%rsp)
  0x00007f8ab913eade: mov    %r13,0x10(%rsp)
  0x00007f8ab913eae3: mov    %r14,0x8(%rsp)
  0x00007f8ab913eae8: mov    %r15,(%rsp)
  0x00007f8ab913eaec: sub    $0x200,%rsp
  0x00007f8ab913eaf3: fxsave64 (%rsp)
  0x00007f8ab913eaf8: mov    %rbx,%rdi
  0x00007f8ab913eafb: mov    %rax,%rsi
  0x00007f8ab913eafe: callq  0x00007f8acef8bbca
  0x00007f8ab913eb03: fxrstor64 (%rsp)
  0x00007f8ab913eb08: add    $0x200,%rsp
  0x00007f8ab913eb0f: mov    (%rsp),%r15
  0x00007f8ab913eb13: mov    0x8(%rsp),%r14
  0x00007f8ab913eb18: mov    0x10(%rsp),%r13
  0x00007f8ab913eb1d: mov    0x18(%rsp),%r12
  0x00007f8ab913eb22: mov    0x20(%rsp),%r11
  0x00007f8ab913eb27: mov    0x28(%rsp),%r10
  0x00007f8ab913eb2c: mov    0x30(%rsp),%r9
  0x00007f8ab913eb31: mov    0x38(%rsp),%r8
  0x00007f8ab913eb36: mov    0x40(%rsp),%rdi
  0x00007f8ab913eb3b: mov    0x48(%rsp),%rsi
  0x00007f8ab913eb40: mov    0x50(%rsp),%rbp
  0x00007f8ab913eb45: mov    0x60(%rsp),%rbx
  0x00007f8ab913eb4a: mov    0x68(%rsp),%rdx
  0x00007f8ab913eb4f: mov    0x70(%rsp),%rcx
  0x00007f8ab913eb54: mov    0x78(%rsp),%rax
  0x00007f8ab913eb59: add    $0x80,%rsp
  0x00007f8ab913eb60: add    $0x8,%rsp
  0x00007f8ab913eb64: popfq  
  0x00007f8ab913eb65: mov    %r13,%rsp
  0x00007f8ab913eb68: pop    %rax
  0x00007f8ab913eb69: mov    %rsp,%r13
  0x00007f8ab913eb6c: sub    $0x20,%rsp
  0x00007f8ab913eb70: mov    %rax,(%rsp)
  0x00007f8ab913eb74: mov    %rsi,0x10(%rsp)
  0x00007f8ab913eb79: mov    %rdx,0x8(%rsp)
  0x00007f8ab913eb7e: mov    0x40(%rbx),%rcx
  0x00007f8ab913eb82: jmpq   *%rcx

AHE@0x00007f8ac80eb7e8: 0xb0000000 i2c: 0x00007f8ab913ec60 c2i: 0x00007f8ab913ed74 c2iUV: 0x00007f8ab913ed47
i2c argument handler #0 for: receiver ()Ljava/security/PermissionCollection; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913ed74
  0x00007f8ab913ec60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913ec64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913ec6e: cmp    %r11,%rax
  0x00007f8ab913ec71: jbe    0x00007f8ab913ec8a
  0x00007f8ab913ec77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913ec81: cmp    %r11,%rax
  0x00007f8ab913ec84: jb     0x00007f8ab913ed27
  0x00007f8ab913ec8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913ec94: cmp    %r11,%rax
  0x00007f8ab913ec97: jbe    0x00007f8ab913ecb0
  0x00007f8ab913ec9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913eca7: cmp    %r11,%rax
  0x00007f8ab913ecaa: jb     0x00007f8ab913ed27
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913ecb0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913ecb5: sub    $0x80,%rsp
  0x00007f8ab913ecbc: mov    %rax,0x78(%rsp)
  0x00007f8ab913ecc1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913ecc6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913eccb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913ecd0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913ecd5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913ecda: mov    %rdi,0x40(%rsp)
  0x00007f8ab913ecdf: mov    %r8,0x38(%rsp)
  0x00007f8ab913ece4: mov    %r9,0x30(%rsp)
  0x00007f8ab913ece9: mov    %r10,0x28(%rsp)
  0x00007f8ab913ecee: mov    %r11,0x20(%rsp)
  0x00007f8ab913ecf3: mov    %r12,0x18(%rsp)
  0x00007f8ab913ecf8: mov    %r13,0x10(%rsp)
  0x00007f8ab913ecfd: mov    %r14,0x8(%rsp)
  0x00007f8ab913ed02: mov    %r15,(%rsp)
  0x00007f8ab913ed06: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913ed10: movabs $0x7f8ab913ecb0,%rsi
  0x00007f8ab913ed1a: mov    %rsp,%rdx
  0x00007f8ab913ed1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ed21: callq  0x00007f8aceddb9fa
  0x00007f8ab913ed26: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913ed27: mov    %rsp,%r11
  0x00007f8ab913ed2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ed2e: push   %rax
  0x00007f8ab913ed2f: mov    %r11,%rax
  0x00007f8ab913ed32: mov    0x50(%rbx),%r11
  0x00007f8ab913ed36: mov    0x8(%rax),%rsi
  0x00007f8ab913ed3a: mov    %rbx,0x258(%r15)
  0x00007f8ab913ed41: mov    %rbx,%rax
  0x00007f8ab913ed44: jmpq   *%r11
  0x00007f8ab913ed47: mov    0x8(%rsi),%ebx
  0x00007f8ab913ed4a: shl    $0x3,%rbx
  0x00007f8ab913ed4e: cmp    0x10(%rax),%rbx
  0x00007f8ab913ed52: mov    0x8(%rax),%rbx
  0x00007f8ab913ed56: je     0x00007f8ab913ed61
  0x00007f8ab913ed5c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ed61: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ed69: je     0x00007f8ab913ee64
  0x00007f8ab913ed6f: jmpq   0x00007f8ab9105c40
  0x00007f8ab913ed74: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913ed7c: je     0x00007f8ab913ee64
  0x00007f8ab913ed82: mov    %rsp,%r13
  0x00007f8ab913ed85: mov    (%rsp),%rax
  0x00007f8ab913ed89: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913ed8d: pushfq 
  0x00007f8ab913ed8e: sub    $0x8,%rsp
  0x00007f8ab913ed92: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913ed97: sub    $0x80,%rsp
  0x00007f8ab913ed9e: mov    %rax,0x78(%rsp)
  0x00007f8ab913eda3: mov    %rcx,0x70(%rsp)
  0x00007f8ab913eda8: mov    %rdx,0x68(%rsp)
  0x00007f8ab913edad: mov    %rbx,0x60(%rsp)
  0x00007f8ab913edb2: mov    %rbp,0x50(%rsp)
  0x00007f8ab913edb7: mov    %rsi,0x48(%rsp)
  0x00007f8ab913edbc: mov    %rdi,0x40(%rsp)
  0x00007f8ab913edc1: mov    %r8,0x38(%rsp)
  0x00007f8ab913edc6: mov    %r9,0x30(%rsp)
  0x00007f8ab913edcb: mov    %r10,0x28(%rsp)
  0x00007f8ab913edd0: mov    %r11,0x20(%rsp)
  0x00007f8ab913edd5: mov    %r12,0x18(%rsp)
  0x00007f8ab913edda: mov    %r13,0x10(%rsp)
  0x00007f8ab913eddf: mov    %r14,0x8(%rsp)
  0x00007f8ab913ede4: mov    %r15,(%rsp)
  0x00007f8ab913ede8: sub    $0x200,%rsp
  0x00007f8ab913edef: fxsave64 (%rsp)
  0x00007f8ab913edf4: mov    %rbx,%rdi
  0x00007f8ab913edf7: mov    %rax,%rsi
  0x00007f8ab913edfa: callq  0x00007f8acef8bbca
  0x00007f8ab913edff: fxrstor64 (%rsp)
  0x00007f8ab913ee04: add    $0x200,%rsp
  0x00007f8ab913ee0b: mov    (%rsp),%r15
  0x00007f8ab913ee0f: mov    0x8(%rsp),%r14
  0x00007f8ab913ee14: mov    0x10(%rsp),%r13
  0x00007f8ab913ee19: mov    0x18(%rsp),%r12
  0x00007f8ab913ee1e: mov    0x20(%rsp),%r11
  0x00007f8ab913ee23: mov    0x28(%rsp),%r10
  0x00007f8ab913ee28: mov    0x30(%rsp),%r9
  0x00007f8ab913ee2d: mov    0x38(%rsp),%r8
  0x00007f8ab913ee32: mov    0x40(%rsp),%rdi
  0x00007f8ab913ee37: mov    0x48(%rsp),%rsi
  0x00007f8ab913ee3c: mov    0x50(%rsp),%rbp
  0x00007f8ab913ee41: mov    0x60(%rsp),%rbx
  0x00007f8ab913ee46: mov    0x68(%rsp),%rdx
  0x00007f8ab913ee4b: mov    0x70(%rsp),%rcx
  0x00007f8ab913ee50: mov    0x78(%rsp),%rax
  0x00007f8ab913ee55: add    $0x80,%rsp
  0x00007f8ab913ee5c: add    $0x8,%rsp
  0x00007f8ab913ee60: popfq  
  0x00007f8ab913ee61: mov    %r13,%rsp
  0x00007f8ab913ee64: pop    %rax
  0x00007f8ab913ee65: mov    %rsp,%r13
  0x00007f8ab913ee68: sub    $0x10,%rsp
  0x00007f8ab913ee6c: mov    %rax,(%rsp)
  0x00007f8ab913ee70: mov    %rsi,0x8(%rsp)
  0x00007f8ab913ee75: mov    0x40(%rbx),%rcx
  0x00007f8ab913ee79: jmpq   *%rcx

AHE@0x00007f8ac80eb830: 0xb0000000 i2c: 0x00007f8ab913ef20 c2i: 0x00007f8ab913f034 c2iUV: 0x00007f8ab913f007
i2c argument handler #0 for: receiver ()[Ljava/security/Principal; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913f034
  0x00007f8ab913ef20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913ef24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913ef2e: cmp    %r11,%rax
  0x00007f8ab913ef31: jbe    0x00007f8ab913ef4a
  0x00007f8ab913ef37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913ef41: cmp    %r11,%rax
  0x00007f8ab913ef44: jb     0x00007f8ab913efe7
  0x00007f8ab913ef4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913ef54: cmp    %r11,%rax
  0x00007f8ab913ef57: jbe    0x00007f8ab913ef70
  0x00007f8ab913ef5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913ef67: cmp    %r11,%rax
  0x00007f8ab913ef6a: jb     0x00007f8ab913efe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913ef70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913ef75: sub    $0x80,%rsp
  0x00007f8ab913ef7c: mov    %rax,0x78(%rsp)
  0x00007f8ab913ef81: mov    %rcx,0x70(%rsp)
  0x00007f8ab913ef86: mov    %rdx,0x68(%rsp)
  0x00007f8ab913ef8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913ef90: mov    %rbp,0x50(%rsp)
  0x00007f8ab913ef95: mov    %rsi,0x48(%rsp)
  0x00007f8ab913ef9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913ef9f: mov    %r8,0x38(%rsp)
  0x00007f8ab913efa4: mov    %r9,0x30(%rsp)
  0x00007f8ab913efa9: mov    %r10,0x28(%rsp)
  0x00007f8ab913efae: mov    %r11,0x20(%rsp)
  0x00007f8ab913efb3: mov    %r12,0x18(%rsp)
  0x00007f8ab913efb8: mov    %r13,0x10(%rsp)
  0x00007f8ab913efbd: mov    %r14,0x8(%rsp)
  0x00007f8ab913efc2: mov    %r15,(%rsp)
  0x00007f8ab913efc6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913efd0: movabs $0x7f8ab913ef70,%rsi
  0x00007f8ab913efda: mov    %rsp,%rdx
  0x00007f8ab913efdd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913efe1: callq  0x00007f8aceddb9fa
  0x00007f8ab913efe6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913efe7: mov    %rsp,%r11
  0x00007f8ab913efea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913efee: push   %rax
  0x00007f8ab913efef: mov    %r11,%rax
  0x00007f8ab913eff2: mov    0x50(%rbx),%r11
  0x00007f8ab913eff6: mov    0x8(%rax),%rsi
  0x00007f8ab913effa: mov    %rbx,0x258(%r15)
  0x00007f8ab913f001: mov    %rbx,%rax
  0x00007f8ab913f004: jmpq   *%r11
  0x00007f8ab913f007: mov    0x8(%rsi),%ebx
  0x00007f8ab913f00a: shl    $0x3,%rbx
  0x00007f8ab913f00e: cmp    0x10(%rax),%rbx
  0x00007f8ab913f012: mov    0x8(%rax),%rbx
  0x00007f8ab913f016: je     0x00007f8ab913f021
  0x00007f8ab913f01c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f021: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f029: je     0x00007f8ab913f124
  0x00007f8ab913f02f: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f034: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f03c: je     0x00007f8ab913f124
  0x00007f8ab913f042: mov    %rsp,%r13
  0x00007f8ab913f045: mov    (%rsp),%rax
  0x00007f8ab913f049: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f04d: pushfq 
  0x00007f8ab913f04e: sub    $0x8,%rsp
  0x00007f8ab913f052: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913f057: sub    $0x80,%rsp
  0x00007f8ab913f05e: mov    %rax,0x78(%rsp)
  0x00007f8ab913f063: mov    %rcx,0x70(%rsp)
  0x00007f8ab913f068: mov    %rdx,0x68(%rsp)
  0x00007f8ab913f06d: mov    %rbx,0x60(%rsp)
  0x00007f8ab913f072: mov    %rbp,0x50(%rsp)
  0x00007f8ab913f077: mov    %rsi,0x48(%rsp)
  0x00007f8ab913f07c: mov    %rdi,0x40(%rsp)
  0x00007f8ab913f081: mov    %r8,0x38(%rsp)
  0x00007f8ab913f086: mov    %r9,0x30(%rsp)
  0x00007f8ab913f08b: mov    %r10,0x28(%rsp)
  0x00007f8ab913f090: mov    %r11,0x20(%rsp)
  0x00007f8ab913f095: mov    %r12,0x18(%rsp)
  0x00007f8ab913f09a: mov    %r13,0x10(%rsp)
  0x00007f8ab913f09f: mov    %r14,0x8(%rsp)
  0x00007f8ab913f0a4: mov    %r15,(%rsp)
  0x00007f8ab913f0a8: sub    $0x200,%rsp
  0x00007f8ab913f0af: fxsave64 (%rsp)
  0x00007f8ab913f0b4: mov    %rbx,%rdi
  0x00007f8ab913f0b7: mov    %rax,%rsi
  0x00007f8ab913f0ba: callq  0x00007f8acef8bbca
  0x00007f8ab913f0bf: fxrstor64 (%rsp)
  0x00007f8ab913f0c4: add    $0x200,%rsp
  0x00007f8ab913f0cb: mov    (%rsp),%r15
  0x00007f8ab913f0cf: mov    0x8(%rsp),%r14
  0x00007f8ab913f0d4: mov    0x10(%rsp),%r13
  0x00007f8ab913f0d9: mov    0x18(%rsp),%r12
  0x00007f8ab913f0de: mov    0x20(%rsp),%r11
  0x00007f8ab913f0e3: mov    0x28(%rsp),%r10
  0x00007f8ab913f0e8: mov    0x30(%rsp),%r9
  0x00007f8ab913f0ed: mov    0x38(%rsp),%r8
  0x00007f8ab913f0f2: mov    0x40(%rsp),%rdi
  0x00007f8ab913f0f7: mov    0x48(%rsp),%rsi
  0x00007f8ab913f0fc: mov    0x50(%rsp),%rbp
  0x00007f8ab913f101: mov    0x60(%rsp),%rbx
  0x00007f8ab913f106: mov    0x68(%rsp),%rdx
  0x00007f8ab913f10b: mov    0x70(%rsp),%rcx
  0x00007f8ab913f110: mov    0x78(%rsp),%rax
  0x00007f8ab913f115: add    $0x80,%rsp
  0x00007f8ab913f11c: add    $0x8,%rsp
  0x00007f8ab913f120: popfq  
  0x00007f8ab913f121: mov    %r13,%rsp
  0x00007f8ab913f124: pop    %rax
  0x00007f8ab913f125: mov    %rsp,%r13
  0x00007f8ab913f128: sub    $0x10,%rsp
  0x00007f8ab913f12c: mov    %rax,(%rsp)
  0x00007f8ab913f130: mov    %rsi,0x8(%rsp)
  0x00007f8ab913f135: mov    0x40(%rbx),%rcx
  0x00007f8ab913f139: jmpq   *%rcx

AHE@0x00007f8ac80eb878: 0xb0000000 i2c: 0x00007f8ab913f1e0 c2i: 0x00007f8ab913f2f4 c2iUV: 0x00007f8ab913f2c7
i2c argument handler #0 for: receiver ()Ljava/security/CodeSource; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913f2f4
  0x00007f8ab913f1e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913f1e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913f1ee: cmp    %r11,%rax
  0x00007f8ab913f1f1: jbe    0x00007f8ab913f20a
  0x00007f8ab913f1f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913f201: cmp    %r11,%rax
  0x00007f8ab913f204: jb     0x00007f8ab913f2a7
  0x00007f8ab913f20a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913f214: cmp    %r11,%rax
  0x00007f8ab913f217: jbe    0x00007f8ab913f230
  0x00007f8ab913f21d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913f227: cmp    %r11,%rax
  0x00007f8ab913f22a: jb     0x00007f8ab913f2a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913f230: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913f235: sub    $0x80,%rsp
  0x00007f8ab913f23c: mov    %rax,0x78(%rsp)
  0x00007f8ab913f241: mov    %rcx,0x70(%rsp)
  0x00007f8ab913f246: mov    %rdx,0x68(%rsp)
  0x00007f8ab913f24b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913f250: mov    %rbp,0x50(%rsp)
  0x00007f8ab913f255: mov    %rsi,0x48(%rsp)
  0x00007f8ab913f25a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913f25f: mov    %r8,0x38(%rsp)
  0x00007f8ab913f264: mov    %r9,0x30(%rsp)
  0x00007f8ab913f269: mov    %r10,0x28(%rsp)
  0x00007f8ab913f26e: mov    %r11,0x20(%rsp)
  0x00007f8ab913f273: mov    %r12,0x18(%rsp)
  0x00007f8ab913f278: mov    %r13,0x10(%rsp)
  0x00007f8ab913f27d: mov    %r14,0x8(%rsp)
  0x00007f8ab913f282: mov    %r15,(%rsp)
  0x00007f8ab913f286: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913f290: movabs $0x7f8ab913f230,%rsi
  0x00007f8ab913f29a: mov    %rsp,%rdx
  0x00007f8ab913f29d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f2a1: callq  0x00007f8aceddb9fa
  0x00007f8ab913f2a6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913f2a7: mov    %rsp,%r11
  0x00007f8ab913f2aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f2ae: push   %rax
  0x00007f8ab913f2af: mov    %r11,%rax
  0x00007f8ab913f2b2: mov    0x50(%rbx),%r11
  0x00007f8ab913f2b6: mov    0x8(%rax),%rsi
  0x00007f8ab913f2ba: mov    %rbx,0x258(%r15)
  0x00007f8ab913f2c1: mov    %rbx,%rax
  0x00007f8ab913f2c4: jmpq   *%r11
  0x00007f8ab913f2c7: mov    0x8(%rsi),%ebx
  0x00007f8ab913f2ca: shl    $0x3,%rbx
  0x00007f8ab913f2ce: cmp    0x10(%rax),%rbx
  0x00007f8ab913f2d2: mov    0x8(%rax),%rbx
  0x00007f8ab913f2d6: je     0x00007f8ab913f2e1
  0x00007f8ab913f2dc: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f2e1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f2e9: je     0x00007f8ab913f3e4
  0x00007f8ab913f2ef: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f2f4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f2fc: je     0x00007f8ab913f3e4
  0x00007f8ab913f302: mov    %rsp,%r13
  0x00007f8ab913f305: mov    (%rsp),%rax
  0x00007f8ab913f309: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f30d: pushfq 
  0x00007f8ab913f30e: sub    $0x8,%rsp
  0x00007f8ab913f312: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913f317: sub    $0x80,%rsp
  0x00007f8ab913f31e: mov    %rax,0x78(%rsp)
  0x00007f8ab913f323: mov    %rcx,0x70(%rsp)
  0x00007f8ab913f328: mov    %rdx,0x68(%rsp)
  0x00007f8ab913f32d: mov    %rbx,0x60(%rsp)
  0x00007f8ab913f332: mov    %rbp,0x50(%rsp)
  0x00007f8ab913f337: mov    %rsi,0x48(%rsp)
  0x00007f8ab913f33c: mov    %rdi,0x40(%rsp)
  0x00007f8ab913f341: mov    %r8,0x38(%rsp)
  0x00007f8ab913f346: mov    %r9,0x30(%rsp)
  0x00007f8ab913f34b: mov    %r10,0x28(%rsp)
  0x00007f8ab913f350: mov    %r11,0x20(%rsp)
  0x00007f8ab913f355: mov    %r12,0x18(%rsp)
  0x00007f8ab913f35a: mov    %r13,0x10(%rsp)
  0x00007f8ab913f35f: mov    %r14,0x8(%rsp)
  0x00007f8ab913f364: mov    %r15,(%rsp)
  0x00007f8ab913f368: sub    $0x200,%rsp
  0x00007f8ab913f36f: fxsave64 (%rsp)
  0x00007f8ab913f374: mov    %rbx,%rdi
  0x00007f8ab913f377: mov    %rax,%rsi
  0x00007f8ab913f37a: callq  0x00007f8acef8bbca
  0x00007f8ab913f37f: fxrstor64 (%rsp)
  0x00007f8ab913f384: add    $0x200,%rsp
  0x00007f8ab913f38b: mov    (%rsp),%r15
  0x00007f8ab913f38f: mov    0x8(%rsp),%r14
  0x00007f8ab913f394: mov    0x10(%rsp),%r13
  0x00007f8ab913f399: mov    0x18(%rsp),%r12
  0x00007f8ab913f39e: mov    0x20(%rsp),%r11
  0x00007f8ab913f3a3: mov    0x28(%rsp),%r10
  0x00007f8ab913f3a8: mov    0x30(%rsp),%r9
  0x00007f8ab913f3ad: mov    0x38(%rsp),%r8
  0x00007f8ab913f3b2: mov    0x40(%rsp),%rdi
  0x00007f8ab913f3b7: mov    0x48(%rsp),%rsi
  0x00007f8ab913f3bc: mov    0x50(%rsp),%rbp
  0x00007f8ab913f3c1: mov    0x60(%rsp),%rbx
  0x00007f8ab913f3c6: mov    0x68(%rsp),%rdx
  0x00007f8ab913f3cb: mov    0x70(%rsp),%rcx
  0x00007f8ab913f3d0: mov    0x78(%rsp),%rax
  0x00007f8ab913f3d5: add    $0x80,%rsp
  0x00007f8ab913f3dc: add    $0x8,%rsp
  0x00007f8ab913f3e0: popfq  
  0x00007f8ab913f3e1: mov    %r13,%rsp
  0x00007f8ab913f3e4: pop    %rax
  0x00007f8ab913f3e5: mov    %rsp,%r13
  0x00007f8ab913f3e8: sub    $0x10,%rsp
  0x00007f8ab913f3ec: mov    %rax,(%rsp)
  0x00007f8ab913f3f0: mov    %rsi,0x8(%rsp)
  0x00007f8ab913f3f5: mov    0x40(%rbx),%rcx
  0x00007f8ab913f3f9: jmpq   *%rcx

AHE@0x00007f8ac80eb8c0: 0xb0000000 i2c: 0x00007f8ab913f4a0 c2i: 0x00007f8ab913f5b4 c2iUV: 0x00007f8ab913f587
i2c argument handler #0 for: static (Ljava/security/ProtectionDomain;)Z (539 bytes generated)
c2i argument handler starts at 0x7f8ab913f5b4
  0x00007f8ab913f4a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913f4a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913f4ae: cmp    %r11,%rax
  0x00007f8ab913f4b1: jbe    0x00007f8ab913f4ca
  0x00007f8ab913f4b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913f4c1: cmp    %r11,%rax
  0x00007f8ab913f4c4: jb     0x00007f8ab913f567
  0x00007f8ab913f4ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913f4d4: cmp    %r11,%rax
  0x00007f8ab913f4d7: jbe    0x00007f8ab913f4f0
  0x00007f8ab913f4dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913f4e7: cmp    %r11,%rax
  0x00007f8ab913f4ea: jb     0x00007f8ab913f567
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913f4f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913f4f5: sub    $0x80,%rsp
  0x00007f8ab913f4fc: mov    %rax,0x78(%rsp)
  0x00007f8ab913f501: mov    %rcx,0x70(%rsp)
  0x00007f8ab913f506: mov    %rdx,0x68(%rsp)
  0x00007f8ab913f50b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913f510: mov    %rbp,0x50(%rsp)
  0x00007f8ab913f515: mov    %rsi,0x48(%rsp)
  0x00007f8ab913f51a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913f51f: mov    %r8,0x38(%rsp)
  0x00007f8ab913f524: mov    %r9,0x30(%rsp)
  0x00007f8ab913f529: mov    %r10,0x28(%rsp)
  0x00007f8ab913f52e: mov    %r11,0x20(%rsp)
  0x00007f8ab913f533: mov    %r12,0x18(%rsp)
  0x00007f8ab913f538: mov    %r13,0x10(%rsp)
  0x00007f8ab913f53d: mov    %r14,0x8(%rsp)
  0x00007f8ab913f542: mov    %r15,(%rsp)
  0x00007f8ab913f546: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913f550: movabs $0x7f8ab913f4f0,%rsi
  0x00007f8ab913f55a: mov    %rsp,%rdx
  0x00007f8ab913f55d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f561: callq  0x00007f8aceddb9fa
  0x00007f8ab913f566: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913f567: mov    %rsp,%r11
  0x00007f8ab913f56a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f56e: push   %rax
  0x00007f8ab913f56f: mov    %r11,%rax
  0x00007f8ab913f572: mov    0x50(%rbx),%r11
  0x00007f8ab913f576: mov    0x8(%rax),%rsi
  0x00007f8ab913f57a: mov    %rbx,0x258(%r15)
  0x00007f8ab913f581: mov    %rbx,%rax
  0x00007f8ab913f584: jmpq   *%r11
  0x00007f8ab913f587: mov    0x8(%rsi),%ebx
  0x00007f8ab913f58a: shl    $0x3,%rbx
  0x00007f8ab913f58e: cmp    0x10(%rax),%rbx
  0x00007f8ab913f592: mov    0x8(%rax),%rbx
  0x00007f8ab913f596: je     0x00007f8ab913f5a1
  0x00007f8ab913f59c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f5a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f5a9: je     0x00007f8ab913f6a4
  0x00007f8ab913f5af: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f5b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f5bc: je     0x00007f8ab913f6a4
  0x00007f8ab913f5c2: mov    %rsp,%r13
  0x00007f8ab913f5c5: mov    (%rsp),%rax
  0x00007f8ab913f5c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f5cd: pushfq 
  0x00007f8ab913f5ce: sub    $0x8,%rsp
  0x00007f8ab913f5d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913f5d7: sub    $0x80,%rsp
  0x00007f8ab913f5de: mov    %rax,0x78(%rsp)
  0x00007f8ab913f5e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab913f5e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab913f5ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab913f5f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab913f5f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab913f5fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab913f601: mov    %r8,0x38(%rsp)
  0x00007f8ab913f606: mov    %r9,0x30(%rsp)
  0x00007f8ab913f60b: mov    %r10,0x28(%rsp)
  0x00007f8ab913f610: mov    %r11,0x20(%rsp)
  0x00007f8ab913f615: mov    %r12,0x18(%rsp)
  0x00007f8ab913f61a: mov    %r13,0x10(%rsp)
  0x00007f8ab913f61f: mov    %r14,0x8(%rsp)
  0x00007f8ab913f624: mov    %r15,(%rsp)
  0x00007f8ab913f628: sub    $0x200,%rsp
  0x00007f8ab913f62f: fxsave64 (%rsp)
  0x00007f8ab913f634: mov    %rbx,%rdi
  0x00007f8ab913f637: mov    %rax,%rsi
  0x00007f8ab913f63a: callq  0x00007f8acef8bbca
  0x00007f8ab913f63f: fxrstor64 (%rsp)
  0x00007f8ab913f644: add    $0x200,%rsp
  0x00007f8ab913f64b: mov    (%rsp),%r15
  0x00007f8ab913f64f: mov    0x8(%rsp),%r14
  0x00007f8ab913f654: mov    0x10(%rsp),%r13
  0x00007f8ab913f659: mov    0x18(%rsp),%r12
  0x00007f8ab913f65e: mov    0x20(%rsp),%r11
  0x00007f8ab913f663: mov    0x28(%rsp),%r10
  0x00007f8ab913f668: mov    0x30(%rsp),%r9
  0x00007f8ab913f66d: mov    0x38(%rsp),%r8
  0x00007f8ab913f672: mov    0x40(%rsp),%rdi
  0x00007f8ab913f677: mov    0x48(%rsp),%rsi
  0x00007f8ab913f67c: mov    0x50(%rsp),%rbp
  0x00007f8ab913f681: mov    0x60(%rsp),%rbx
  0x00007f8ab913f686: mov    0x68(%rsp),%rdx
  0x00007f8ab913f68b: mov    0x70(%rsp),%rcx
  0x00007f8ab913f690: mov    0x78(%rsp),%rax
  0x00007f8ab913f695: add    $0x80,%rsp
  0x00007f8ab913f69c: add    $0x8,%rsp
  0x00007f8ab913f6a0: popfq  
  0x00007f8ab913f6a1: mov    %r13,%rsp
  0x00007f8ab913f6a4: pop    %rax
  0x00007f8ab913f6a5: mov    %rsp,%r13
  0x00007f8ab913f6a8: sub    $0x10,%rsp
  0x00007f8ab913f6ac: mov    %rax,(%rsp)
  0x00007f8ab913f6b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab913f6b5: mov    0x40(%rbx),%rcx
  0x00007f8ab913f6b9: jmpq   *%rcx

AHE@0x00007f8ac80eb908: 0xb0000000 i2c: 0x00007f8ab913f760 c2i: 0x00007f8ab913f874 c2iUV: 0x00007f8ab913f847
i2c argument handler #0 for: receiver ()Ljava/lang/ClassLoader; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913f874
  0x00007f8ab913f760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913f764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913f76e: cmp    %r11,%rax
  0x00007f8ab913f771: jbe    0x00007f8ab913f78a
  0x00007f8ab913f777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913f781: cmp    %r11,%rax
  0x00007f8ab913f784: jb     0x00007f8ab913f827
  0x00007f8ab913f78a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913f794: cmp    %r11,%rax
  0x00007f8ab913f797: jbe    0x00007f8ab913f7b0
  0x00007f8ab913f79d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913f7a7: cmp    %r11,%rax
  0x00007f8ab913f7aa: jb     0x00007f8ab913f827
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913f7b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913f7b5: sub    $0x80,%rsp
  0x00007f8ab913f7bc: mov    %rax,0x78(%rsp)
  0x00007f8ab913f7c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab913f7c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab913f7cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab913f7d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab913f7d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab913f7da: mov    %rdi,0x40(%rsp)
  0x00007f8ab913f7df: mov    %r8,0x38(%rsp)
  0x00007f8ab913f7e4: mov    %r9,0x30(%rsp)
  0x00007f8ab913f7e9: mov    %r10,0x28(%rsp)
  0x00007f8ab913f7ee: mov    %r11,0x20(%rsp)
  0x00007f8ab913f7f3: mov    %r12,0x18(%rsp)
  0x00007f8ab913f7f8: mov    %r13,0x10(%rsp)
  0x00007f8ab913f7fd: mov    %r14,0x8(%rsp)
  0x00007f8ab913f802: mov    %r15,(%rsp)
  0x00007f8ab913f806: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913f810: movabs $0x7f8ab913f7b0,%rsi
  0x00007f8ab913f81a: mov    %rsp,%rdx
  0x00007f8ab913f81d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f821: callq  0x00007f8aceddb9fa
  0x00007f8ab913f826: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913f827: mov    %rsp,%r11
  0x00007f8ab913f82a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f82e: push   %rax
  0x00007f8ab913f82f: mov    %r11,%rax
  0x00007f8ab913f832: mov    0x50(%rbx),%r11
  0x00007f8ab913f836: mov    0x8(%rax),%rsi
  0x00007f8ab913f83a: mov    %rbx,0x258(%r15)
  0x00007f8ab913f841: mov    %rbx,%rax
  0x00007f8ab913f844: jmpq   *%r11
  0x00007f8ab913f847: mov    0x8(%rsi),%ebx
  0x00007f8ab913f84a: shl    $0x3,%rbx
  0x00007f8ab913f84e: cmp    0x10(%rax),%rbx
  0x00007f8ab913f852: mov    0x8(%rax),%rbx
  0x00007f8ab913f856: je     0x00007f8ab913f861
  0x00007f8ab913f85c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f861: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f869: je     0x00007f8ab913f964
  0x00007f8ab913f86f: jmpq   0x00007f8ab9105c40
  0x00007f8ab913f874: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913f87c: je     0x00007f8ab913f964
  0x00007f8ab913f882: mov    %rsp,%r13
  0x00007f8ab913f885: mov    (%rsp),%rax
  0x00007f8ab913f889: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913f88d: pushfq 
  0x00007f8ab913f88e: sub    $0x8,%rsp
  0x00007f8ab913f892: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913f897: sub    $0x80,%rsp
  0x00007f8ab913f89e: mov    %rax,0x78(%rsp)
  0x00007f8ab913f8a3: mov    %rcx,0x70(%rsp)
  0x00007f8ab913f8a8: mov    %rdx,0x68(%rsp)
  0x00007f8ab913f8ad: mov    %rbx,0x60(%rsp)
  0x00007f8ab913f8b2: mov    %rbp,0x50(%rsp)
  0x00007f8ab913f8b7: mov    %rsi,0x48(%rsp)
  0x00007f8ab913f8bc: mov    %rdi,0x40(%rsp)
  0x00007f8ab913f8c1: mov    %r8,0x38(%rsp)
  0x00007f8ab913f8c6: mov    %r9,0x30(%rsp)
  0x00007f8ab913f8cb: mov    %r10,0x28(%rsp)
  0x00007f8ab913f8d0: mov    %r11,0x20(%rsp)
  0x00007f8ab913f8d5: mov    %r12,0x18(%rsp)
  0x00007f8ab913f8da: mov    %r13,0x10(%rsp)
  0x00007f8ab913f8df: mov    %r14,0x8(%rsp)
  0x00007f8ab913f8e4: mov    %r15,(%rsp)
  0x00007f8ab913f8e8: sub    $0x200,%rsp
  0x00007f8ab913f8ef: fxsave64 (%rsp)
  0x00007f8ab913f8f4: mov    %rbx,%rdi
  0x00007f8ab913f8f7: mov    %rax,%rsi
  0x00007f8ab913f8fa: callq  0x00007f8acef8bbca
  0x00007f8ab913f8ff: fxrstor64 (%rsp)
  0x00007f8ab913f904: add    $0x200,%rsp
  0x00007f8ab913f90b: mov    (%rsp),%r15
  0x00007f8ab913f90f: mov    0x8(%rsp),%r14
  0x00007f8ab913f914: mov    0x10(%rsp),%r13
  0x00007f8ab913f919: mov    0x18(%rsp),%r12
  0x00007f8ab913f91e: mov    0x20(%rsp),%r11
  0x00007f8ab913f923: mov    0x28(%rsp),%r10
  0x00007f8ab913f928: mov    0x30(%rsp),%r9
  0x00007f8ab913f92d: mov    0x38(%rsp),%r8
  0x00007f8ab913f932: mov    0x40(%rsp),%rdi
  0x00007f8ab913f937: mov    0x48(%rsp),%rsi
  0x00007f8ab913f93c: mov    0x50(%rsp),%rbp
  0x00007f8ab913f941: mov    0x60(%rsp),%rbx
  0x00007f8ab913f946: mov    0x68(%rsp),%rdx
  0x00007f8ab913f94b: mov    0x70(%rsp),%rcx
  0x00007f8ab913f950: mov    0x78(%rsp),%rax
  0x00007f8ab913f955: add    $0x80,%rsp
  0x00007f8ab913f95c: add    $0x8,%rsp
  0x00007f8ab913f960: popfq  
  0x00007f8ab913f961: mov    %r13,%rsp
  0x00007f8ab913f964: pop    %rax
  0x00007f8ab913f965: mov    %rsp,%r13
  0x00007f8ab913f968: sub    $0x10,%rsp
  0x00007f8ab913f96c: mov    %rax,(%rsp)
  0x00007f8ab913f970: mov    %rsi,0x8(%rsp)
  0x00007f8ab913f975: mov    0x40(%rbx),%rcx
  0x00007f8ab913f979: jmpq   *%rcx

AHE@0x00007f8ac80eb950: 0xb0000000 i2c: 0x00007f8ab913fa20 c2i: 0x00007f8ab913fb34 c2iUV: 0x00007f8ab913fb07
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f8ab913fb34
  0x00007f8ab913fa20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913fa24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913fa2e: cmp    %r11,%rax
  0x00007f8ab913fa31: jbe    0x00007f8ab913fa4a
  0x00007f8ab913fa37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913fa41: cmp    %r11,%rax
  0x00007f8ab913fa44: jb     0x00007f8ab913fae7
  0x00007f8ab913fa4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913fa54: cmp    %r11,%rax
  0x00007f8ab913fa57: jbe    0x00007f8ab913fa70
  0x00007f8ab913fa5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913fa67: cmp    %r11,%rax
  0x00007f8ab913fa6a: jb     0x00007f8ab913fae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913fa70: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913fa75: sub    $0x80,%rsp
  0x00007f8ab913fa7c: mov    %rax,0x78(%rsp)
  0x00007f8ab913fa81: mov    %rcx,0x70(%rsp)
  0x00007f8ab913fa86: mov    %rdx,0x68(%rsp)
  0x00007f8ab913fa8b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913fa90: mov    %rbp,0x50(%rsp)
  0x00007f8ab913fa95: mov    %rsi,0x48(%rsp)
  0x00007f8ab913fa9a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913fa9f: mov    %r8,0x38(%rsp)
  0x00007f8ab913faa4: mov    %r9,0x30(%rsp)
  0x00007f8ab913faa9: mov    %r10,0x28(%rsp)
  0x00007f8ab913faae: mov    %r11,0x20(%rsp)
  0x00007f8ab913fab3: mov    %r12,0x18(%rsp)
  0x00007f8ab913fab8: mov    %r13,0x10(%rsp)
  0x00007f8ab913fabd: mov    %r14,0x8(%rsp)
  0x00007f8ab913fac2: mov    %r15,(%rsp)
  0x00007f8ab913fac6: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913fad0: movabs $0x7f8ab913fa70,%rsi
  0x00007f8ab913fada: mov    %rsp,%rdx
  0x00007f8ab913fadd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913fae1: callq  0x00007f8aceddb9fa
  0x00007f8ab913fae6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913fae7: mov    %rsp,%r11
  0x00007f8ab913faea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913faee: push   %rax
  0x00007f8ab913faef: mov    %r11,%rax
  0x00007f8ab913faf2: mov    0x50(%rbx),%r11
  0x00007f8ab913faf6: mov    0x8(%rax),%rsi
  0x00007f8ab913fafa: mov    %rbx,0x258(%r15)
  0x00007f8ab913fb01: mov    %rbx,%rax
  0x00007f8ab913fb04: jmpq   *%r11
  0x00007f8ab913fb07: mov    0x8(%rsi),%ebx
  0x00007f8ab913fb0a: shl    $0x3,%rbx
  0x00007f8ab913fb0e: cmp    0x10(%rax),%rbx
  0x00007f8ab913fb12: mov    0x8(%rax),%rbx
  0x00007f8ab913fb16: je     0x00007f8ab913fb21
  0x00007f8ab913fb1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab913fb21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913fb29: je     0x00007f8ab913fc24
  0x00007f8ab913fb2f: jmpq   0x00007f8ab9105c40
  0x00007f8ab913fb34: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913fb3c: je     0x00007f8ab913fc24
  0x00007f8ab913fb42: mov    %rsp,%r13
  0x00007f8ab913fb45: mov    (%rsp),%rax
  0x00007f8ab913fb49: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913fb4d: pushfq 
  0x00007f8ab913fb4e: sub    $0x8,%rsp
  0x00007f8ab913fb52: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913fb57: sub    $0x80,%rsp
  0x00007f8ab913fb5e: mov    %rax,0x78(%rsp)
  0x00007f8ab913fb63: mov    %rcx,0x70(%rsp)
  0x00007f8ab913fb68: mov    %rdx,0x68(%rsp)
  0x00007f8ab913fb6d: mov    %rbx,0x60(%rsp)
  0x00007f8ab913fb72: mov    %rbp,0x50(%rsp)
  0x00007f8ab913fb77: mov    %rsi,0x48(%rsp)
  0x00007f8ab913fb7c: mov    %rdi,0x40(%rsp)
  0x00007f8ab913fb81: mov    %r8,0x38(%rsp)
  0x00007f8ab913fb86: mov    %r9,0x30(%rsp)
  0x00007f8ab913fb8b: mov    %r10,0x28(%rsp)
  0x00007f8ab913fb90: mov    %r11,0x20(%rsp)
  0x00007f8ab913fb95: mov    %r12,0x18(%rsp)
  0x00007f8ab913fb9a: mov    %r13,0x10(%rsp)
  0x00007f8ab913fb9f: mov    %r14,0x8(%rsp)
  0x00007f8ab913fba4: mov    %r15,(%rsp)
  0x00007f8ab913fba8: sub    $0x200,%rsp
  0x00007f8ab913fbaf: fxsave64 (%rsp)
  0x00007f8ab913fbb4: mov    %rbx,%rdi
  0x00007f8ab913fbb7: mov    %rax,%rsi
  0x00007f8ab913fbba: callq  0x00007f8acef8bbca
  0x00007f8ab913fbbf: fxrstor64 (%rsp)
  0x00007f8ab913fbc4: add    $0x200,%rsp
  0x00007f8ab913fbcb: mov    (%rsp),%r15
  0x00007f8ab913fbcf: mov    0x8(%rsp),%r14
  0x00007f8ab913fbd4: mov    0x10(%rsp),%r13
  0x00007f8ab913fbd9: mov    0x18(%rsp),%r12
  0x00007f8ab913fbde: mov    0x20(%rsp),%r11
  0x00007f8ab913fbe3: mov    0x28(%rsp),%r10
  0x00007f8ab913fbe8: mov    0x30(%rsp),%r9
  0x00007f8ab913fbed: mov    0x38(%rsp),%r8
  0x00007f8ab913fbf2: mov    0x40(%rsp),%rdi
  0x00007f8ab913fbf7: mov    0x48(%rsp),%rsi
  0x00007f8ab913fbfc: mov    0x50(%rsp),%rbp
  0x00007f8ab913fc01: mov    0x60(%rsp),%rbx
  0x00007f8ab913fc06: mov    0x68(%rsp),%rdx
  0x00007f8ab913fc0b: mov    0x70(%rsp),%rcx
  0x00007f8ab913fc10: mov    0x78(%rsp),%rax
  0x00007f8ab913fc15: add    $0x80,%rsp
  0x00007f8ab913fc1c: add    $0x8,%rsp
  0x00007f8ab913fc20: popfq  
  0x00007f8ab913fc21: mov    %r13,%rsp
  0x00007f8ab913fc24: pop    %rax
  0x00007f8ab913fc25: mov    %rsp,%r13
  0x00007f8ab913fc28: sub    $0x10,%rsp
  0x00007f8ab913fc2c: mov    %rax,(%rsp)
  0x00007f8ab913fc30: mov    %rsi,0x8(%rsp)
  0x00007f8ab913fc35: mov    0x40(%rbx),%rcx
  0x00007f8ab913fc39: jmpq   *%rcx

AHE@0x00007f8ac80eb998: 0x i2c: 0x00007f8ab913fce0 c2i: 0x00007f8ab913fdf0 c2iUV: 0x00007f8ab913fdc3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f8ab913fdf0
  0x00007f8ab913fce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913fce4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913fcee: cmp    %r11,%rax
  0x00007f8ab913fcf1: jbe    0x00007f8ab913fd0a
  0x00007f8ab913fcf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913fd01: cmp    %r11,%rax
  0x00007f8ab913fd04: jb     0x00007f8ab913fda7
  0x00007f8ab913fd0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913fd14: cmp    %r11,%rax
  0x00007f8ab913fd17: jbe    0x00007f8ab913fd30
  0x00007f8ab913fd1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913fd27: cmp    %r11,%rax
  0x00007f8ab913fd2a: jb     0x00007f8ab913fda7
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913fd30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913fd35: sub    $0x80,%rsp
  0x00007f8ab913fd3c: mov    %rax,0x78(%rsp)
  0x00007f8ab913fd41: mov    %rcx,0x70(%rsp)
  0x00007f8ab913fd46: mov    %rdx,0x68(%rsp)
  0x00007f8ab913fd4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab913fd50: mov    %rbp,0x50(%rsp)
  0x00007f8ab913fd55: mov    %rsi,0x48(%rsp)
  0x00007f8ab913fd5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab913fd5f: mov    %r8,0x38(%rsp)
  0x00007f8ab913fd64: mov    %r9,0x30(%rsp)
  0x00007f8ab913fd69: mov    %r10,0x28(%rsp)
  0x00007f8ab913fd6e: mov    %r11,0x20(%rsp)
  0x00007f8ab913fd73: mov    %r12,0x18(%rsp)
  0x00007f8ab913fd78: mov    %r13,0x10(%rsp)
  0x00007f8ab913fd7d: mov    %r14,0x8(%rsp)
  0x00007f8ab913fd82: mov    %r15,(%rsp)
  0x00007f8ab913fd86: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab913fd90: movabs $0x7f8ab913fd30,%rsi
  0x00007f8ab913fd9a: mov    %rsp,%rdx
  0x00007f8ab913fd9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913fda1: callq  0x00007f8aceddb9fa
  0x00007f8ab913fda6: hlt    
  ;; } verify_i2ce 
  0x00007f8ab913fda7: mov    %rsp,%r11
  0x00007f8ab913fdaa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913fdae: push   %rax
  0x00007f8ab913fdaf: mov    %r11,%rax
  0x00007f8ab913fdb2: mov    0x50(%rbx),%r11
  0x00007f8ab913fdb6: mov    %rbx,0x258(%r15)
  0x00007f8ab913fdbd: mov    %rbx,%rax
  0x00007f8ab913fdc0: jmpq   *%r11
  0x00007f8ab913fdc3: mov    0x8(%rsi),%ebx
  0x00007f8ab913fdc6: shl    $0x3,%rbx
  0x00007f8ab913fdca: cmp    0x10(%rax),%rbx
  0x00007f8ab913fdce: mov    0x8(%rax),%rbx
  0x00007f8ab913fdd2: je     0x00007f8ab913fddd
  0x00007f8ab913fdd8: jmpq   0x00007f8ab9105c40
  0x00007f8ab913fddd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913fde5: je     0x00007f8ab913fee0
  0x00007f8ab913fdeb: jmpq   0x00007f8ab9105c40
  0x00007f8ab913fdf0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab913fdf8: je     0x00007f8ab913fee0
  0x00007f8ab913fdfe: mov    %rsp,%r13
  0x00007f8ab913fe01: mov    (%rsp),%rax
  0x00007f8ab913fe05: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab913fe09: pushfq 
  0x00007f8ab913fe0a: sub    $0x8,%rsp
  0x00007f8ab913fe0e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913fe13: sub    $0x80,%rsp
  0x00007f8ab913fe1a: mov    %rax,0x78(%rsp)
  0x00007f8ab913fe1f: mov    %rcx,0x70(%rsp)
  0x00007f8ab913fe24: mov    %rdx,0x68(%rsp)
  0x00007f8ab913fe29: mov    %rbx,0x60(%rsp)
  0x00007f8ab913fe2e: mov    %rbp,0x50(%rsp)
  0x00007f8ab913fe33: mov    %rsi,0x48(%rsp)
  0x00007f8ab913fe38: mov    %rdi,0x40(%rsp)
  0x00007f8ab913fe3d: mov    %r8,0x38(%rsp)
  0x00007f8ab913fe42: mov    %r9,0x30(%rsp)
  0x00007f8ab913fe47: mov    %r10,0x28(%rsp)
  0x00007f8ab913fe4c: mov    %r11,0x20(%rsp)
  0x00007f8ab913fe51: mov    %r12,0x18(%rsp)
  0x00007f8ab913fe56: mov    %r13,0x10(%rsp)
  0x00007f8ab913fe5b: mov    %r14,0x8(%rsp)
  0x00007f8ab913fe60: mov    %r15,(%rsp)
  0x00007f8ab913fe64: sub    $0x200,%rsp
  0x00007f8ab913fe6b: fxsave64 (%rsp)
  0x00007f8ab913fe70: mov    %rbx,%rdi
  0x00007f8ab913fe73: mov    %rax,%rsi
  0x00007f8ab913fe76: callq  0x00007f8acef8bbca
  0x00007f8ab913fe7b: fxrstor64 (%rsp)
  0x00007f8ab913fe80: add    $0x200,%rsp
  0x00007f8ab913fe87: mov    (%rsp),%r15
  0x00007f8ab913fe8b: mov    0x8(%rsp),%r14
  0x00007f8ab913fe90: mov    0x10(%rsp),%r13
  0x00007f8ab913fe95: mov    0x18(%rsp),%r12
  0x00007f8ab913fe9a: mov    0x20(%rsp),%r11
  0x00007f8ab913fe9f: mov    0x28(%rsp),%r10
  0x00007f8ab913fea4: mov    0x30(%rsp),%r9
  0x00007f8ab913fea9: mov    0x38(%rsp),%r8
  0x00007f8ab913feae: mov    0x40(%rsp),%rdi
  0x00007f8ab913feb3: mov    0x48(%rsp),%rsi
  0x00007f8ab913feb8: mov    0x50(%rsp),%rbp
  0x00007f8ab913febd: mov    0x60(%rsp),%rbx
  0x00007f8ab913fec2: mov    0x68(%rsp),%rdx
  0x00007f8ab913fec7: mov    0x70(%rsp),%rcx
  0x00007f8ab913fecc: mov    0x78(%rsp),%rax
  0x00007f8ab913fed1: add    $0x80,%rsp
  0x00007f8ab913fed8: add    $0x8,%rsp
  0x00007f8ab913fedc: popfq  
  0x00007f8ab913fedd: mov    %r13,%rsp
  0x00007f8ab913fee0: pop    %rax
  0x00007f8ab913fee1: mov    %rsp,%r13
  0x00007f8ab913fee4: sub    $0x10,%rsp
  0x00007f8ab913fee8: mov    %rax,(%rsp)
  0x00007f8ab913feec: mov    0x40(%rbx),%rcx
  0x00007f8ab913fef0: jmpq   *%rcx

AHE@0x00007f8ac80eb9e0: 0xbbbbb000 i2c: 0x00007f8ab913ffa0 c2i: 0x00007f8ab91400c4 c2iUV: 0x00007f8ab9140097
i2c argument handler #0 for: receiver (Ljava/security/CodeSource;Ljava/security/PermissionCollection;Ljava/lang/ClassLoader;[Ljava/security/Principal;)V (575 bytes generated)
c2i argument handler starts at 0x7f8ab91400c4
  0x00007f8ab913ffa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab913ffa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab913ffae: cmp    %r11,%rax
  0x00007f8ab913ffb1: jbe    0x00007f8ab913ffca
  0x00007f8ab913ffb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab913ffc1: cmp    %r11,%rax
  0x00007f8ab913ffc4: jb     0x00007f8ab9140067
  0x00007f8ab913ffca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab913ffd4: cmp    %r11,%rax
  0x00007f8ab913ffd7: jbe    0x00007f8ab913fff0
  0x00007f8ab913ffdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab913ffe7: cmp    %r11,%rax
  0x00007f8ab913ffea: jb     0x00007f8ab9140067
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab913fff0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab913fff5: sub    $0x80,%rsp
  0x00007f8ab913fffc: mov    %rax,0x78(%rsp)
  0x00007f8ab9140001: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140006: mov    %rdx,0x68(%rsp)
  0x00007f8ab914000b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140010: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140015: mov    %rsi,0x48(%rsp)
  0x00007f8ab914001a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914001f: mov    %r8,0x38(%rsp)
  0x00007f8ab9140024: mov    %r9,0x30(%rsp)
  0x00007f8ab9140029: mov    %r10,0x28(%rsp)
  0x00007f8ab914002e: mov    %r11,0x20(%rsp)
  0x00007f8ab9140033: mov    %r12,0x18(%rsp)
  0x00007f8ab9140038: mov    %r13,0x10(%rsp)
  0x00007f8ab914003d: mov    %r14,0x8(%rsp)
  0x00007f8ab9140042: mov    %r15,(%rsp)
  0x00007f8ab9140046: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9140050: movabs $0x7f8ab913fff0,%rsi
  0x00007f8ab914005a: mov    %rsp,%rdx
  0x00007f8ab914005d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140061: callq  0x00007f8aceddb9fa
  0x00007f8ab9140066: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9140067: mov    %rsp,%r11
  0x00007f8ab914006a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914006e: push   %rax
  0x00007f8ab914006f: mov    %r11,%rax
  0x00007f8ab9140072: mov    0x50(%rbx),%r11
  0x00007f8ab9140076: mov    0x28(%rax),%rsi
  0x00007f8ab914007a: mov    0x20(%rax),%rdx
  0x00007f8ab914007e: mov    0x18(%rax),%rcx
  0x00007f8ab9140082: mov    0x10(%rax),%r8
  0x00007f8ab9140086: mov    0x8(%rax),%r9
  0x00007f8ab914008a: mov    %rbx,0x258(%r15)
  0x00007f8ab9140091: mov    %rbx,%rax
  0x00007f8ab9140094: jmpq   *%r11
  0x00007f8ab9140097: mov    0x8(%rsi),%ebx
  0x00007f8ab914009a: shl    $0x3,%rbx
  0x00007f8ab914009e: cmp    0x10(%rax),%rbx
  0x00007f8ab91400a2: mov    0x8(%rax),%rbx
  0x00007f8ab91400a6: je     0x00007f8ab91400b1
  0x00007f8ab91400ac: jmpq   0x00007f8ab9105c40
  0x00007f8ab91400b1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91400b9: je     0x00007f8ab91401b4
  0x00007f8ab91400bf: jmpq   0x00007f8ab9105c40
  0x00007f8ab91400c4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91400cc: je     0x00007f8ab91401b4
  0x00007f8ab91400d2: mov    %rsp,%r13
  0x00007f8ab91400d5: mov    (%rsp),%rax
  0x00007f8ab91400d9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91400dd: pushfq 
  0x00007f8ab91400de: sub    $0x8,%rsp
  0x00007f8ab91400e2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91400e7: sub    $0x80,%rsp
  0x00007f8ab91400ee: mov    %rax,0x78(%rsp)
  0x00007f8ab91400f3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91400f8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91400fd: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140102: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140107: mov    %rsi,0x48(%rsp)
  0x00007f8ab914010c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140111: mov    %r8,0x38(%rsp)
  0x00007f8ab9140116: mov    %r9,0x30(%rsp)
  0x00007f8ab914011b: mov    %r10,0x28(%rsp)
  0x00007f8ab9140120: mov    %r11,0x20(%rsp)
  0x00007f8ab9140125: mov    %r12,0x18(%rsp)
  0x00007f8ab914012a: mov    %r13,0x10(%rsp)
  0x00007f8ab914012f: mov    %r14,0x8(%rsp)
  0x00007f8ab9140134: mov    %r15,(%rsp)
  0x00007f8ab9140138: sub    $0x200,%rsp
  0x00007f8ab914013f: fxsave64 (%rsp)
  0x00007f8ab9140144: mov    %rbx,%rdi
  0x00007f8ab9140147: mov    %rax,%rsi
  0x00007f8ab914014a: callq  0x00007f8acef8bbca
  0x00007f8ab914014f: fxrstor64 (%rsp)
  0x00007f8ab9140154: add    $0x200,%rsp
  0x00007f8ab914015b: mov    (%rsp),%r15
  0x00007f8ab914015f: mov    0x8(%rsp),%r14
  0x00007f8ab9140164: mov    0x10(%rsp),%r13
  0x00007f8ab9140169: mov    0x18(%rsp),%r12
  0x00007f8ab914016e: mov    0x20(%rsp),%r11
  0x00007f8ab9140173: mov    0x28(%rsp),%r10
  0x00007f8ab9140178: mov    0x30(%rsp),%r9
  0x00007f8ab914017d: mov    0x38(%rsp),%r8
  0x00007f8ab9140182: mov    0x40(%rsp),%rdi
  0x00007f8ab9140187: mov    0x48(%rsp),%rsi
  0x00007f8ab914018c: mov    0x50(%rsp),%rbp
  0x00007f8ab9140191: mov    0x60(%rsp),%rbx
  0x00007f8ab9140196: mov    0x68(%rsp),%rdx
  0x00007f8ab914019b: mov    0x70(%rsp),%rcx
  0x00007f8ab91401a0: mov    0x78(%rsp),%rax
  0x00007f8ab91401a5: add    $0x80,%rsp
  0x00007f8ab91401ac: add    $0x8,%rsp
  0x00007f8ab91401b0: popfq  
  0x00007f8ab91401b1: mov    %r13,%rsp
  0x00007f8ab91401b4: pop    %rax
  0x00007f8ab91401b5: mov    %rsp,%r13
  0x00007f8ab91401b8: sub    $0x30,%rsp
  0x00007f8ab91401bc: mov    %rax,(%rsp)
  0x00007f8ab91401c0: mov    %rsi,0x28(%rsp)
  0x00007f8ab91401c5: mov    %rdx,0x20(%rsp)
  0x00007f8ab91401ca: mov    %rcx,0x18(%rsp)
  0x00007f8ab91401cf: mov    %r8,0x10(%rsp)
  0x00007f8ab91401d4: mov    %r9,0x8(%rsp)
  0x00007f8ab91401d9: mov    0x40(%rbx),%rcx
  0x00007f8ab91401dd: jmpq   *%rcx

AHE@0x00007f8ac80eba28: 0xbbb00000 i2c: 0x00007f8ab91402a0 c2i: 0x00007f8ab91403bc c2iUV: 0x00007f8ab914038f
i2c argument handler #0 for: receiver (Ljava/security/CodeSource;Ljava/security/PermissionCollection;)V (557 bytes generated)
c2i argument handler starts at 0x7f8ab91403bc
  0x00007f8ab91402a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91402a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91402ae: cmp    %r11,%rax
  0x00007f8ab91402b1: jbe    0x00007f8ab91402ca
  0x00007f8ab91402b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91402c1: cmp    %r11,%rax
  0x00007f8ab91402c4: jb     0x00007f8ab9140367
  0x00007f8ab91402ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91402d4: cmp    %r11,%rax
  0x00007f8ab91402d7: jbe    0x00007f8ab91402f0
  0x00007f8ab91402dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91402e7: cmp    %r11,%rax
  0x00007f8ab91402ea: jb     0x00007f8ab9140367
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91402f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91402f5: sub    $0x80,%rsp
  0x00007f8ab91402fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9140301: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140306: mov    %rdx,0x68(%rsp)
  0x00007f8ab914030b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140310: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140315: mov    %rsi,0x48(%rsp)
  0x00007f8ab914031a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914031f: mov    %r8,0x38(%rsp)
  0x00007f8ab9140324: mov    %r9,0x30(%rsp)
  0x00007f8ab9140329: mov    %r10,0x28(%rsp)
  0x00007f8ab914032e: mov    %r11,0x20(%rsp)
  0x00007f8ab9140333: mov    %r12,0x18(%rsp)
  0x00007f8ab9140338: mov    %r13,0x10(%rsp)
  0x00007f8ab914033d: mov    %r14,0x8(%rsp)
  0x00007f8ab9140342: mov    %r15,(%rsp)
  0x00007f8ab9140346: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9140350: movabs $0x7f8ab91402f0,%rsi
  0x00007f8ab914035a: mov    %rsp,%rdx
  0x00007f8ab914035d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140361: callq  0x00007f8aceddb9fa
  0x00007f8ab9140366: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9140367: mov    %rsp,%r11
  0x00007f8ab914036a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914036e: push   %rax
  0x00007f8ab914036f: mov    %r11,%rax
  0x00007f8ab9140372: mov    0x50(%rbx),%r11
  0x00007f8ab9140376: mov    0x18(%rax),%rsi
  0x00007f8ab914037a: mov    0x10(%rax),%rdx
  0x00007f8ab914037e: mov    0x8(%rax),%rcx
  0x00007f8ab9140382: mov    %rbx,0x258(%r15)
  0x00007f8ab9140389: mov    %rbx,%rax
  0x00007f8ab914038c: jmpq   *%r11
  0x00007f8ab914038f: mov    0x8(%rsi),%ebx
  0x00007f8ab9140392: shl    $0x3,%rbx
  0x00007f8ab9140396: cmp    0x10(%rax),%rbx
  0x00007f8ab914039a: mov    0x8(%rax),%rbx
  0x00007f8ab914039e: je     0x00007f8ab91403a9
  0x00007f8ab91403a4: jmpq   0x00007f8ab9105c40
  0x00007f8ab91403a9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91403b1: je     0x00007f8ab91404ac
  0x00007f8ab91403b7: jmpq   0x00007f8ab9105c40
  0x00007f8ab91403bc: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91403c4: je     0x00007f8ab91404ac
  0x00007f8ab91403ca: mov    %rsp,%r13
  0x00007f8ab91403cd: mov    (%rsp),%rax
  0x00007f8ab91403d1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91403d5: pushfq 
  0x00007f8ab91403d6: sub    $0x8,%rsp
  0x00007f8ab91403da: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91403df: sub    $0x80,%rsp
  0x00007f8ab91403e6: mov    %rax,0x78(%rsp)
  0x00007f8ab91403eb: mov    %rcx,0x70(%rsp)
  0x00007f8ab91403f0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91403f5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91403fa: mov    %rbp,0x50(%rsp)
  0x00007f8ab91403ff: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140404: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140409: mov    %r8,0x38(%rsp)
  0x00007f8ab914040e: mov    %r9,0x30(%rsp)
  0x00007f8ab9140413: mov    %r10,0x28(%rsp)
  0x00007f8ab9140418: mov    %r11,0x20(%rsp)
  0x00007f8ab914041d: mov    %r12,0x18(%rsp)
  0x00007f8ab9140422: mov    %r13,0x10(%rsp)
  0x00007f8ab9140427: mov    %r14,0x8(%rsp)
  0x00007f8ab914042c: mov    %r15,(%rsp)
  0x00007f8ab9140430: sub    $0x200,%rsp
  0x00007f8ab9140437: fxsave64 (%rsp)
  0x00007f8ab914043c: mov    %rbx,%rdi
  0x00007f8ab914043f: mov    %rax,%rsi
  0x00007f8ab9140442: callq  0x00007f8acef8bbca
  0x00007f8ab9140447: fxrstor64 (%rsp)
  0x00007f8ab914044c: add    $0x200,%rsp
  0x00007f8ab9140453: mov    (%rsp),%r15
  0x00007f8ab9140457: mov    0x8(%rsp),%r14
  0x00007f8ab914045c: mov    0x10(%rsp),%r13
  0x00007f8ab9140461: mov    0x18(%rsp),%r12
  0x00007f8ab9140466: mov    0x20(%rsp),%r11
  0x00007f8ab914046b: mov    0x28(%rsp),%r10
  0x00007f8ab9140470: mov    0x30(%rsp),%r9
  0x00007f8ab9140475: mov    0x38(%rsp),%r8
  0x00007f8ab914047a: mov    0x40(%rsp),%rdi
  0x00007f8ab914047f: mov    0x48(%rsp),%rsi
  0x00007f8ab9140484: mov    0x50(%rsp),%rbp
  0x00007f8ab9140489: mov    0x60(%rsp),%rbx
  0x00007f8ab914048e: mov    0x68(%rsp),%rdx
  0x00007f8ab9140493: mov    0x70(%rsp),%rcx
  0x00007f8ab9140498: mov    0x78(%rsp),%rax
  0x00007f8ab914049d: add    $0x80,%rsp
  0x00007f8ab91404a4: add    $0x8,%rsp
  0x00007f8ab91404a8: popfq  
  0x00007f8ab91404a9: mov    %r13,%rsp
  0x00007f8ab91404ac: pop    %rax
  0x00007f8ab91404ad: mov    %rsp,%r13
  0x00007f8ab91404b0: sub    $0x20,%rsp
  0x00007f8ab91404b4: mov    %rax,(%rsp)
  0x00007f8ab91404b8: mov    %rsi,0x18(%rsp)
  0x00007f8ab91404bd: mov    %rdx,0x10(%rsp)
  0x00007f8ab91404c2: mov    %rcx,0x8(%rsp)
  0x00007f8ab91404c7: mov    0x40(%rbx),%rcx
  0x00007f8ab91404cb: jmpq   *%rcx

AHE@0x00007f8ac80eba70: 0xb0000000 i2c: 0x00007f8ab91405a0 c2i: 0x00007f8ab91406b4 c2iUV: 0x00007f8ab9140687
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f8ab91406b4
  0x00007f8ab91405a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91405a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91405ae: cmp    %r11,%rax
  0x00007f8ab91405b1: jbe    0x00007f8ab91405ca
  0x00007f8ab91405b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91405c1: cmp    %r11,%rax
  0x00007f8ab91405c4: jb     0x00007f8ab9140667
  0x00007f8ab91405ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91405d4: cmp    %r11,%rax
  0x00007f8ab91405d7: jbe    0x00007f8ab91405f0
  0x00007f8ab91405dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91405e7: cmp    %r11,%rax
  0x00007f8ab91405ea: jb     0x00007f8ab9140667
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91405f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91405f5: sub    $0x80,%rsp
  0x00007f8ab91405fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9140601: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140606: mov    %rdx,0x68(%rsp)
  0x00007f8ab914060b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140610: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140615: mov    %rsi,0x48(%rsp)
  0x00007f8ab914061a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914061f: mov    %r8,0x38(%rsp)
  0x00007f8ab9140624: mov    %r9,0x30(%rsp)
  0x00007f8ab9140629: mov    %r10,0x28(%rsp)
  0x00007f8ab914062e: mov    %r11,0x20(%rsp)
  0x00007f8ab9140633: mov    %r12,0x18(%rsp)
  0x00007f8ab9140638: mov    %r13,0x10(%rsp)
  0x00007f8ab914063d: mov    %r14,0x8(%rsp)
  0x00007f8ab9140642: mov    %r15,(%rsp)
  0x00007f8ab9140646: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9140650: movabs $0x7f8ab91405f0,%rsi
  0x00007f8ab914065a: mov    %rsp,%rdx
  0x00007f8ab914065d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140661: callq  0x00007f8aceddb9fa
  0x00007f8ab9140666: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9140667: mov    %rsp,%r11
  0x00007f8ab914066a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914066e: push   %rax
  0x00007f8ab914066f: mov    %r11,%rax
  0x00007f8ab9140672: mov    0x50(%rbx),%r11
  0x00007f8ab9140676: mov    0x8(%rax),%rsi
  0x00007f8ab914067a: mov    %rbx,0x258(%r15)
  0x00007f8ab9140681: mov    %rbx,%rax
  0x00007f8ab9140684: jmpq   *%r11
  0x00007f8ab9140687: mov    0x8(%rsi),%ebx
  0x00007f8ab914068a: shl    $0x3,%rbx
  0x00007f8ab914068e: cmp    0x10(%rax),%rbx
  0x00007f8ab9140692: mov    0x8(%rax),%rbx
  0x00007f8ab9140696: je     0x00007f8ab91406a1
  0x00007f8ab914069c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91406a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91406a9: je     0x00007f8ab91407a4
  0x00007f8ab91406af: jmpq   0x00007f8ab9105c40
  0x00007f8ab91406b4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91406bc: je     0x00007f8ab91407a4
  0x00007f8ab91406c2: mov    %rsp,%r13
  0x00007f8ab91406c5: mov    (%rsp),%rax
  0x00007f8ab91406c9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91406cd: pushfq 
  0x00007f8ab91406ce: sub    $0x8,%rsp
  0x00007f8ab91406d2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91406d7: sub    $0x80,%rsp
  0x00007f8ab91406de: mov    %rax,0x78(%rsp)
  0x00007f8ab91406e3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91406e8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91406ed: mov    %rbx,0x60(%rsp)
  0x00007f8ab91406f2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91406f7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91406fc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140701: mov    %r8,0x38(%rsp)
  0x00007f8ab9140706: mov    %r9,0x30(%rsp)
  0x00007f8ab914070b: mov    %r10,0x28(%rsp)
  0x00007f8ab9140710: mov    %r11,0x20(%rsp)
  0x00007f8ab9140715: mov    %r12,0x18(%rsp)
  0x00007f8ab914071a: mov    %r13,0x10(%rsp)
  0x00007f8ab914071f: mov    %r14,0x8(%rsp)
  0x00007f8ab9140724: mov    %r15,(%rsp)
  0x00007f8ab9140728: sub    $0x200,%rsp
  0x00007f8ab914072f: fxsave64 (%rsp)
  0x00007f8ab9140734: mov    %rbx,%rdi
  0x00007f8ab9140737: mov    %rax,%rsi
  0x00007f8ab914073a: callq  0x00007f8acef8bbca
  0x00007f8ab914073f: fxrstor64 (%rsp)
  0x00007f8ab9140744: add    $0x200,%rsp
  0x00007f8ab914074b: mov    (%rsp),%r15
  0x00007f8ab914074f: mov    0x8(%rsp),%r14
  0x00007f8ab9140754: mov    0x10(%rsp),%r13
  0x00007f8ab9140759: mov    0x18(%rsp),%r12
  0x00007f8ab914075e: mov    0x20(%rsp),%r11
  0x00007f8ab9140763: mov    0x28(%rsp),%r10
  0x00007f8ab9140768: mov    0x30(%rsp),%r9
  0x00007f8ab914076d: mov    0x38(%rsp),%r8
  0x00007f8ab9140772: mov    0x40(%rsp),%rdi
  0x00007f8ab9140777: mov    0x48(%rsp),%rsi
  0x00007f8ab914077c: mov    0x50(%rsp),%rbp
  0x00007f8ab9140781: mov    0x60(%rsp),%rbx
  0x00007f8ab9140786: mov    0x68(%rsp),%rdx
  0x00007f8ab914078b: mov    0x70(%rsp),%rcx
  0x00007f8ab9140790: mov    0x78(%rsp),%rax
  0x00007f8ab9140795: add    $0x80,%rsp
  0x00007f8ab914079c: add    $0x8,%rsp
  0x00007f8ab91407a0: popfq  
  0x00007f8ab91407a1: mov    %r13,%rsp
  0x00007f8ab91407a4: pop    %rax
  0x00007f8ab91407a5: mov    %rsp,%r13
  0x00007f8ab91407a8: sub    $0x10,%rsp
  0x00007f8ab91407ac: mov    %rax,(%rsp)
  0x00007f8ab91407b0: mov    %rsi,0x8(%rsp)
  0x00007f8ab91407b5: mov    0x40(%rbx),%rcx
  0x00007f8ab91407b9: jmpq   *%rcx

Decoding RuntimeStub - AbstractMethodError throw_exception 0x00007f8ab9105410
  0x00007f8ab9105480: push   %rbp
  0x00007f8ab9105481: mov    %rsp,%rbp
  0x00007f8ab9105484: sub    $0x0,%rsp
  0x00007f8ab9105488: mov    %rbp,0x210(%r15)
  0x00007f8ab910548f: movabs $0x7f8ab9105488,%r10
  0x00007f8ab9105499: mov    %r10,0x208(%r15)
  0x00007f8ab91054a0: mov    %rsp,0x200(%r15)
  0x00007f8ab91054a7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91054ab: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f8ab91054ae: callq  0x00007f8acef86834
  0x00007f8ab91054b3: movabs $0x0,%r10
  0x00007f8ab91054bd: mov    %r10,0x200(%r15)
  0x00007f8ab91054c4: movabs $0x0,%r10
  0x00007f8ab91054ce: mov    %r10,0x210(%r15)
  0x00007f8ab91054d5: movabs $0x0,%r10
  0x00007f8ab91054df: mov    %r10,0x208(%r15)
  0x00007f8ab91054e6: leaveq 
  0x00007f8ab91054e7: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91054ef: jne    0x00007f8ab910556c
  0x00007f8ab91054f5: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91054fa: sub    $0x80,%rsp
  0x00007f8ab9105501: mov    %rax,0x78(%rsp)
  0x00007f8ab9105506: mov    %rcx,0x70(%rsp)
  0x00007f8ab910550b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9105510: mov    %rbx,0x60(%rsp)
  0x00007f8ab9105515: mov    %rbp,0x50(%rsp)
  0x00007f8ab910551a: mov    %rsi,0x48(%rsp)
  0x00007f8ab910551f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9105524: mov    %r8,0x38(%rsp)
  0x00007f8ab9105529: mov    %r9,0x30(%rsp)
  0x00007f8ab910552e: mov    %r10,0x28(%rsp)
  0x00007f8ab9105533: mov    %r11,0x20(%rsp)
  0x00007f8ab9105538: mov    %r12,0x18(%rsp)
  0x00007f8ab910553d: mov    %r13,0x10(%rsp)
  0x00007f8ab9105542: mov    %r14,0x8(%rsp)
  0x00007f8ab9105547: mov    %r15,(%rsp)
  0x00007f8ab910554b: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab9105555: movabs $0x7f8ab91054f5,%rsi
  0x00007f8ab910555f: mov    %rsp,%rdx
  0x00007f8ab9105562: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9105566: callq  0x00007f8aceddb9fa
  0x00007f8ab910556b: hlt    
  0x00007f8ab910556c: jmpq   Stub::forward exception
  0x00007f8ab9105571: hlt    
  0x00007f8ab9105572: hlt    
  0x00007f8ab9105573: hlt    
  0x00007f8ab9105574: hlt    
  0x00007f8ab9105575: hlt    
  0x00007f8ab9105576: hlt    
  0x00007f8ab9105577: hlt    

Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0x00007f8ab9146990
  0x00007f8ab9146a00: push   %rbp
  0x00007f8ab9146a01: mov    %rsp,%rbp
  0x00007f8ab9146a04: sub    $0x0,%rsp
  0x00007f8ab9146a08: mov    %rbp,0x210(%r15)
  0x00007f8ab9146a0f: movabs $0x7f8ab9146a08,%r10
  0x00007f8ab9146a19: mov    %r10,0x208(%r15)
  0x00007f8ab9146a20: mov    %rsp,0x200(%r15)
  0x00007f8ab9146a27: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146a2b: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f8ab9146a2e: callq  0x00007f8acef8699c
  0x00007f8ab9146a33: movabs $0x0,%r10
  0x00007f8ab9146a3d: mov    %r10,0x200(%r15)
  0x00007f8ab9146a44: movabs $0x0,%r10
  0x00007f8ab9146a4e: mov    %r10,0x210(%r15)
  0x00007f8ab9146a55: movabs $0x0,%r10
  0x00007f8ab9146a5f: mov    %r10,0x208(%r15)
  0x00007f8ab9146a66: leaveq 
  0x00007f8ab9146a67: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9146a6f: jne    0x00007f8ab9146aec
  0x00007f8ab9146a75: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9146a7a: sub    $0x80,%rsp
  0x00007f8ab9146a81: mov    %rax,0x78(%rsp)
  0x00007f8ab9146a86: mov    %rcx,0x70(%rsp)
  0x00007f8ab9146a8b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9146a90: mov    %rbx,0x60(%rsp)
  0x00007f8ab9146a95: mov    %rbp,0x50(%rsp)
  0x00007f8ab9146a9a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9146a9f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9146aa4: mov    %r8,0x38(%rsp)
  0x00007f8ab9146aa9: mov    %r9,0x30(%rsp)
  0x00007f8ab9146aae: mov    %r10,0x28(%rsp)
  0x00007f8ab9146ab3: mov    %r11,0x20(%rsp)
  0x00007f8ab9146ab8: mov    %r12,0x18(%rsp)
  0x00007f8ab9146abd: mov    %r13,0x10(%rsp)
  0x00007f8ab9146ac2: mov    %r14,0x8(%rsp)
  0x00007f8ab9146ac7: mov    %r15,(%rsp)
  0x00007f8ab9146acb: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab9146ad5: movabs $0x7f8ab9146a75,%rsi
  0x00007f8ab9146adf: mov    %rsp,%rdx
  0x00007f8ab9146ae2: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146ae6: callq  0x00007f8aceddb9fa
  0x00007f8ab9146aeb: hlt    
  0x00007f8ab9146aec: jmpq   Stub::forward exception
  0x00007f8ab9146af1: hlt    
  0x00007f8ab9146af2: hlt    
  0x00007f8ab9146af3: hlt    
  0x00007f8ab9146af4: hlt    
  0x00007f8ab9146af5: hlt    
  0x00007f8ab9146af6: hlt    
  0x00007f8ab9146af7: hlt    

Decoding RuntimeStub - NullPointerException at call throw_exception 0x00007f8ab9146b10
  0x00007f8ab9146b80: push   %rbp
  0x00007f8ab9146b81: mov    %rsp,%rbp
  0x00007f8ab9146b84: sub    $0x0,%rsp
  0x00007f8ab9146b88: mov    %rbp,0x210(%r15)
  0x00007f8ab9146b8f: movabs $0x7f8ab9146b88,%r10
  0x00007f8ab9146b99: mov    %r10,0x208(%r15)
  0x00007f8ab9146ba0: mov    %rsp,0x200(%r15)
  0x00007f8ab9146ba7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146bab: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f8ab9146bae: callq  0x00007f8acef86dd8
  0x00007f8ab9146bb3: movabs $0x0,%r10
  0x00007f8ab9146bbd: mov    %r10,0x200(%r15)
  0x00007f8ab9146bc4: movabs $0x0,%r10
  0x00007f8ab9146bce: mov    %r10,0x210(%r15)
  0x00007f8ab9146bd5: movabs $0x0,%r10
  0x00007f8ab9146bdf: mov    %r10,0x208(%r15)
  0x00007f8ab9146be6: leaveq 
  0x00007f8ab9146be7: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9146bef: jne    0x00007f8ab9146c6c
  0x00007f8ab9146bf5: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9146bfa: sub    $0x80,%rsp
  0x00007f8ab9146c01: mov    %rax,0x78(%rsp)
  0x00007f8ab9146c06: mov    %rcx,0x70(%rsp)
  0x00007f8ab9146c0b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9146c10: mov    %rbx,0x60(%rsp)
  0x00007f8ab9146c15: mov    %rbp,0x50(%rsp)
  0x00007f8ab9146c1a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9146c1f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9146c24: mov    %r8,0x38(%rsp)
  0x00007f8ab9146c29: mov    %r9,0x30(%rsp)
  0x00007f8ab9146c2e: mov    %r10,0x28(%rsp)
  0x00007f8ab9146c33: mov    %r11,0x20(%rsp)
  0x00007f8ab9146c38: mov    %r12,0x18(%rsp)
  0x00007f8ab9146c3d: mov    %r13,0x10(%rsp)
  0x00007f8ab9146c42: mov    %r14,0x8(%rsp)
  0x00007f8ab9146c47: mov    %r15,(%rsp)
  0x00007f8ab9146c4b: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab9146c55: movabs $0x7f8ab9146bf5,%rsi
  0x00007f8ab9146c5f: mov    %rsp,%rdx
  0x00007f8ab9146c62: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146c66: callq  0x00007f8aceddb9fa
  0x00007f8ab9146c6b: hlt    
  0x00007f8ab9146c6c: jmpq   Stub::forward exception
  0x00007f8ab9146c71: hlt    
  0x00007f8ab9146c72: hlt    
  0x00007f8ab9146c73: hlt    
  0x00007f8ab9146c74: hlt    
  0x00007f8ab9146c75: hlt    
  0x00007f8ab9146c76: hlt    
  0x00007f8ab9146c77: hlt    

StubRoutines::f2i_fixup [0x00007f8ab9140820, 0x00007f8ab9140858[ (56 bytes)
  0x00007f8ab9140820: push   %rax
  0x00007f8ab9140821: push   %rcx
  0x00007f8ab9140822: push   %rdx
  0x00007f8ab9140823: push   %rsi
  0x00007f8ab9140824: mov    $0x7f800000,%eax
  0x00007f8ab9140829: xor    %ecx,%ecx
  0x00007f8ab914082b: mov    0x28(%rsp),%edx
  0x00007f8ab914082f: mov    %edx,%esi
  0x00007f8ab9140831: and    $0x7fffffff,%esi
  0x00007f8ab9140837: cmp    %esi,%eax
  0x00007f8ab9140839: js     Stub::f2i_fixup+46 0x0x7f8ab914084e
  0x00007f8ab914083f: test   %edx,%edx
  0x00007f8ab9140841: mov    $0x80000000,%ecx
  0x00007f8ab9140846: mov    $0x7fffffff,%eax
  0x00007f8ab914084b: cmovns %eax,%ecx
  0x00007f8ab914084e: mov    %rcx,0x28(%rsp)
  0x00007f8ab9140853: pop    %rsi
  0x00007f8ab9140854: pop    %rdx
  0x00007f8ab9140855: pop    %rcx
  0x00007f8ab9140856: pop    %rax
  0x00007f8ab9140857: retq   

StubRoutines::f2l_fixup [0x00007f8ab9140858, 0x00007f8ab914089b[ (67 bytes)
  0x00007f8ab9140858: push   %rax
  0x00007f8ab9140859: push   %rcx
  0x00007f8ab914085a: push   %rdx
  0x00007f8ab914085b: push   %rsi
  0x00007f8ab914085c: mov    $0x7f800000,%eax
  0x00007f8ab9140861: xor    %ecx,%ecx
  0x00007f8ab9140863: mov    0x28(%rsp),%edx
  0x00007f8ab9140867: mov    %edx,%esi
  0x00007f8ab9140869: and    $0x7fffffff,%esi
  0x00007f8ab914086f: cmp    %esi,%eax
  0x00007f8ab9140871: js     Stub::f2l_fixup+57 0x0x7f8ab9140891
  0x00007f8ab9140877: test   %edx,%edx
  0x00007f8ab9140879: movabs $0x8000000000000000,%rcx
  0x00007f8ab9140883: movabs $0x7fffffffffffffff,%rax
  0x00007f8ab914088d: cmovns %rax,%rcx
  0x00007f8ab9140891: mov    %rcx,0x28(%rsp)
  0x00007f8ab9140896: pop    %rsi
  0x00007f8ab9140897: pop    %rdx
  0x00007f8ab9140898: pop    %rcx
  0x00007f8ab9140899: pop    %rax
  0x00007f8ab914089a: retq   

StubRoutines::d2i_fixup [0x00007f8ab914089b, 0x00007f8ab91408eb[ (80 bytes)
  0x00007f8ab914089b: push   %rax
  0x00007f8ab914089c: push   %rcx
  0x00007f8ab914089d: push   %rdx
  0x00007f8ab914089e: push   %rsi
  0x00007f8ab914089f: push   %rdi
  0x00007f8ab91408a0: mov    $0x7ff00000,%eax
  0x00007f8ab91408a5: mov    0x30(%rsp),%rdx
  0x00007f8ab91408aa: mov    %edx,%ecx
  0x00007f8ab91408ac: mov    %rdx,%rsi
  0x00007f8ab91408af: mov    %rdx,%rdi
  0x00007f8ab91408b2: neg    %ecx
  0x00007f8ab91408b4: shr    $0x20,%rsi
  0x00007f8ab91408b8: or     %edx,%ecx
  0x00007f8ab91408ba: and    $0x7fffffff,%esi
  0x00007f8ab91408c0: xor    %edx,%edx
  0x00007f8ab91408c2: shr    $0x1f,%ecx
  0x00007f8ab91408c5: or     %ecx,%esi
  0x00007f8ab91408c7: cmp    %esi,%eax
  0x00007f8ab91408c9: js     Stub::d2i_fixup+69 0x0x7f8ab91408e0
  0x00007f8ab91408cf: test   %rdi,%rdi
  0x00007f8ab91408d2: mov    $0x80000000,%edx
  0x00007f8ab91408d7: mov    $0x7fffffff,%eax
  0x00007f8ab91408dc: cmovns %rax,%rdx
  0x00007f8ab91408e0: mov    %rdx,0x30(%rsp)
  0x00007f8ab91408e5: pop    %rdi
  0x00007f8ab91408e6: pop    %rsi
  0x00007f8ab91408e7: pop    %rdx
  0x00007f8ab91408e8: pop    %rcx
  0x00007f8ab91408e9: pop    %rax
  0x00007f8ab91408ea: retq   

StubRoutines::d2l_fixup [0x00007f8ab91408eb, 0x00007f8ab9140945[ (90 bytes)
  0x00007f8ab91408eb: push   %rax
  0x00007f8ab91408ec: push   %rcx
  0x00007f8ab91408ed: push   %rdx
  0x00007f8ab91408ee: push   %rsi
  0x00007f8ab91408ef: push   %rdi
  0x00007f8ab91408f0: mov    $0x7ff00000,%eax
  0x00007f8ab91408f5: mov    0x30(%rsp),%rdx
  0x00007f8ab91408fa: mov    %edx,%ecx
  0x00007f8ab91408fc: mov    %rdx,%rsi
  0x00007f8ab91408ff: mov    %rdx,%rdi
  0x00007f8ab9140902: neg    %ecx
  0x00007f8ab9140904: shr    $0x20,%rsi
  0x00007f8ab9140908: or     %edx,%ecx
  0x00007f8ab914090a: and    $0x7fffffff,%esi
  0x00007f8ab9140910: xor    %edx,%edx
  0x00007f8ab9140912: shr    $0x1f,%ecx
  0x00007f8ab9140915: or     %ecx,%esi
  0x00007f8ab9140917: cmp    %esi,%eax
  0x00007f8ab9140919: js     Stub::d2l_fixup+79 0x0x7f8ab914093a
  0x00007f8ab914091f: test   %rdi,%rdi
  0x00007f8ab9140922: movabs $0x8000000000000000,%rdx
  0x00007f8ab914092c: movabs $0x7fffffffffffffff,%rax
  0x00007f8ab9140936: cmovns %rax,%rdx
  0x00007f8ab914093a: mov    %rdx,0x30(%rsp)
  0x00007f8ab914093f: pop    %rdi
  0x00007f8ab9140940: pop    %rsi
  0x00007f8ab9140941: pop    %rdx
  0x00007f8ab9140942: pop    %rcx
  0x00007f8ab9140943: pop    %rax
  0x00007f8ab9140944: retq   

StubRoutines::float_sign_mask [0x00007f8ab9140960, 0x00007f8ab9140970[ (16 bytes)
  0x00007f8ab9140960: (bad)  
  0x00007f8ab9140961: (bad)  
  0x00007f8ab9140962: (bad)  
  0x00007f8ab9140963: jg     Stub::float_sign_mask+4 0x0x7f8ab9140964
  0x00007f8ab9140965: (bad)  
  0x00007f8ab9140966: (bad)  
  0x00007f8ab9140967: jg     Stub::float_sign_mask+8 0x0x7f8ab9140968
  0x00007f8ab9140969: (bad)  
  0x00007f8ab914096a: (bad)  
  0x00007f8ab914096b: jg     Stub::float_sign_mask+12 0x0x7f8ab914096c
  0x00007f8ab914096d: (bad)  
  0x00007f8ab914096e: (bad)  
  0x00007f8ab914096f: .byte 0x7f

StubRoutines::float_sign_flip [0x00007f8ab9140980, 0x00007f8ab9140990[ (16 bytes)
  0x00007f8ab9140980: add    %al,(%rax)
  0x00007f8ab9140982: add    %al,-0x80000000(%rax)
  0x00007f8ab9140988: add    %al,(%rax)
  0x00007f8ab914098a: add    %al,-0x80000000(%rax)

StubRoutines::double_sign_mask [0x00007f8ab91409a0, 0x00007f8ab91409b0[ (16 bytes)
  0x00007f8ab91409a0: (bad)  
  0x00007f8ab91409a1: (bad)  
  0x00007f8ab91409a2: (bad)  
  0x00007f8ab91409a3: (bad)  
  0x00007f8ab91409a4: (bad)  
  0x00007f8ab91409a5: (bad)  
  0x00007f8ab91409a6: (bad)  
  0x00007f8ab91409a7: jg     Stub::double_sign_mask+8 0x0x7f8ab91409a8
  0x00007f8ab91409a9: (bad)  
  0x00007f8ab91409aa: (bad)  
  0x00007f8ab91409ab: (bad)  
  0x00007f8ab91409ac: (bad)  
  0x00007f8ab91409ad: (bad)  
  0x00007f8ab91409ae: (bad)  
  0x00007f8ab91409af: .byte 0x7f

StubRoutines::double_sign_flip [0x00007f8ab91409c0, 0x00007f8ab91409d0[ (16 bytes)
  0x00007f8ab91409c0: add    %al,(%rax)
  0x00007f8ab91409c2: add    %al,(%rax)
  0x00007f8ab91409c4: add    %al,(%rax)
  0x00007f8ab91409c6: add    %al,0x0(%rax)
  0x00007f8ab91409cc: add    %al,(%rax)
  0x00007f8ab91409ce: .byte 0x0
  0x00007f8ab91409cf: .byte 0x80

StubRoutines::verify_oop [0x00007f8ab91409d0, 0x00007f8ab9140b10[ (320 bytes)
  0x00007f8ab91409d0: pushfq 
  0x00007f8ab91409d1: incl   0x1684dcf1(%rip)        # 0x00007f8acf98e6c8
  0x00007f8ab91409d7: push   %r12
  0x00007f8ab91409d9: push   %rdx
  0x00007f8ab91409da: push   %rcx
  0x00007f8ab91409db: mov    0x30(%rsp),%rax
  0x00007f8ab91409e0: test   %rax,%rax
  0x00007f8ab91409e3: je     Stub::verify_oop+79 0x0x7f8ab9140a1f
  0x00007f8ab91409e9: mov    %rax,%rdx
  0x00007f8ab91409ec: movabs $0xffffffff80000007,%rcx
  0x00007f8ab91409f6: and    %rcx,%rdx
  0x00007f8ab91409f9: movabs $0x80000000,%rcx
  0x00007f8ab9140a03: cmp    %rcx,%rdx
  0x00007f8ab9140a06: jne    Stub::verify_oop+97 0x0x7f8ab9140a31
  0x00007f8ab9140a0c: xor    %r12,%r12
  0x00007f8ab9140a0f: mov    0x8(%rax),%eax
  0x00007f8ab9140a12: shl    $0x3,%rax
  0x00007f8ab9140a16: test   %rax,%rax
  0x00007f8ab9140a19: je     Stub::verify_oop+97 0x0x7f8ab9140a31
  0x00007f8ab9140a1f: mov    0x38(%rsp),%rax
  0x00007f8ab9140a24: mov    0x40(%rsp),%r10
  0x00007f8ab9140a29: pop    %rcx
  0x00007f8ab9140a2a: pop    %rdx
  0x00007f8ab9140a2b: pop    %r12
  0x00007f8ab9140a2d: popfq  
  0x00007f8ab9140a2e: retq   $0x20
  0x00007f8ab9140a31: mov    0x38(%rsp),%rax
  0x00007f8ab9140a36: mov    0x40(%rsp),%r10
  0x00007f8ab9140a3b: pop    %rcx
  0x00007f8ab9140a3c: pop    %rdx
  0x00007f8ab9140a3d: pop    %r12
  0x00007f8ab9140a3f: popfq  
  0x00007f8ab9140a40: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9140a45: sub    $0x80,%rsp
  0x00007f8ab9140a4c: mov    %rax,0x78(%rsp)
  0x00007f8ab9140a51: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140a56: mov    %rdx,0x68(%rsp)
  0x00007f8ab9140a5b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140a60: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140a65: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140a6a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140a6f: mov    %r8,0x38(%rsp)
  0x00007f8ab9140a74: mov    %r9,0x30(%rsp)
  0x00007f8ab9140a79: mov    %r10,0x28(%rsp)
  0x00007f8ab9140a7e: mov    %r11,0x20(%rsp)
  0x00007f8ab9140a83: mov    %r12,0x18(%rsp)
  0x00007f8ab9140a88: mov    %r13,0x10(%rsp)
  0x00007f8ab9140a8d: mov    %r14,0x8(%rsp)
  0x00007f8ab9140a92: mov    %r15,(%rsp)
  0x00007f8ab9140a96: mov    0x88(%rsp),%rdi
  0x00007f8ab9140a9e: mov    0x80(%rsp),%rsi
  0x00007f8ab9140aa6: mov    %rsp,%rdx
  0x00007f8ab9140aa9: mov    %rsp,%r12
  0x00007f8ab9140aac: sub    $0x0,%rsp
  0x00007f8ab9140ab0: and    $0xfffffffffffffff0,%rsp
  ;; call MacroAssembler::debug
  0x00007f8ab9140ab4: callq  0x00007f8aceddb9fa
  0x00007f8ab9140ab9: mov    %r12,%rsp
  0x00007f8ab9140abc: mov    (%rsp),%r15
  0x00007f8ab9140ac0: mov    0x8(%rsp),%r14
  0x00007f8ab9140ac5: mov    0x10(%rsp),%r13
  0x00007f8ab9140aca: mov    0x18(%rsp),%r12
  0x00007f8ab9140acf: mov    0x20(%rsp),%r11
  0x00007f8ab9140ad4: mov    0x28(%rsp),%r10
  0x00007f8ab9140ad9: mov    0x30(%rsp),%r9
  0x00007f8ab9140ade: mov    0x38(%rsp),%r8
  0x00007f8ab9140ae3: mov    0x40(%rsp),%rdi
  0x00007f8ab9140ae8: mov    0x48(%rsp),%rsi
  0x00007f8ab9140aed: mov    0x50(%rsp),%rbp
  0x00007f8ab9140af2: mov    0x60(%rsp),%rbx
  0x00007f8ab9140af7: mov    0x68(%rsp),%rdx
  0x00007f8ab9140afc: mov    0x70(%rsp),%rcx
  0x00007f8ab9140b01: mov    0x78(%rsp),%rax
  0x00007f8ab9140b06: add    $0x80,%rsp
  0x00007f8ab9140b0d: retq   $0x20

StubRoutines::jbyte_disjoint_arraycopy [0x00007f8ab9140b20, 0x00007f8ab9140ccb[ (427 bytes)
  0x00007f8ab9140b20: push   %rbp
  0x00007f8ab9140b21: mov    %rsp,%rbp
  0x00007f8ab9140b24: movslq %edx,%rax
  0x00007f8ab9140b27: cmp    %rdx,%rax
  0x00007f8ab9140b2a: je     Stub::jbyte_disjoint_arraycopy+135 0x0x7f8ab9140ba7
  0x00007f8ab9140b30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9140b35: sub    $0x80,%rsp
  0x00007f8ab9140b3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9140b41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140b46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9140b4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140b50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140b55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140b5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140b5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9140b64: mov    %r9,0x30(%rsp)
  0x00007f8ab9140b69: mov    %r10,0x28(%rsp)
  0x00007f8ab9140b6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9140b73: mov    %r12,0x18(%rsp)
  0x00007f8ab9140b78: mov    %r13,0x10(%rsp)
  0x00007f8ab9140b7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9140b82: mov    %r15,(%rsp)
  0x00007f8ab9140b86: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9140b90: movabs $0x7f8ab9140b30,%rsi
  0x00007f8ab9140b9a: mov    %rsp,%rdx
  0x00007f8ab9140b9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140ba1: callq  0x00007f8aceddb9fa
  0x00007f8ab9140ba6: hlt    
  ;; Entry:
  0x00007f8ab9140ba7: mov    %rdx,%rcx
  0x00007f8ab9140baa: shr    $0x3,%rdx
  0x00007f8ab9140bae: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f8ab9140bb3: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f8ab9140bb8: neg    %rdx
  0x00007f8ab9140bbb: jmpq   Stub::jbyte_disjoint_arraycopy+406 0x0x7f8ab9140cb6
  ;; L_copy_8_bytes:
  0x00007f8ab9140bc0: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9140bc5: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab9140bca: inc    %rdx
  0x00007f8ab9140bcd: jne    Stub::jbyte_disjoint_arraycopy+160 0x0x7f8ab9140bc0
  ;; L_copy_4_bytes:
  0x00007f8ab9140bcf: test   $0x4,%ecx
  0x00007f8ab9140bd5: je     Stub::jbyte_disjoint_arraycopy+197 0x0x7f8ab9140be5
  0x00007f8ab9140bd7: mov    0x8(%rdi),%eax
  0x00007f8ab9140bda: mov    %eax,0x8(%rsi)
  0x00007f8ab9140bdd: add    $0x4,%rdi
  0x00007f8ab9140be1: add    $0x4,%rsi
  ;; L_copy_2_bytes:
  0x00007f8ab9140be5: test   $0x2,%ecx
  0x00007f8ab9140beb: je     Stub::jbyte_disjoint_arraycopy+221 0x0x7f8ab9140bfd
  0x00007f8ab9140bed: mov    0x8(%rdi),%ax
  0x00007f8ab9140bf1: mov    %ax,0x8(%rsi)
  0x00007f8ab9140bf5: add    $0x2,%rdi
  0x00007f8ab9140bf9: add    $0x2,%rsi
  ;; L_copy_byte:
  0x00007f8ab9140bfd: test   $0x1,%ecx
  0x00007f8ab9140c03: je     Stub::jbyte_disjoint_arraycopy+235 0x0x7f8ab9140c0b
  0x00007f8ab9140c05: mov    0x8(%rdi),%al
  0x00007f8ab9140c08: mov    %al,0x8(%rsi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0x00007f8ab9140c0b: incl   0x1684c863(%rip)        # 0x00007f8acf98d474
  0x00007f8ab9140c11: xor    %rax,%rax
  0x00007f8ab9140c14: leaveq 
  0x00007f8ab9140c15: retq   
  0x00007f8ab9140c16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9140c1b: sub    $0x80,%rsp
  0x00007f8ab9140c22: mov    %rax,0x78(%rsp)
  0x00007f8ab9140c27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140c2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9140c31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140c36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140c3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140c40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140c45: mov    %r8,0x38(%rsp)
  0x00007f8ab9140c4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9140c4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9140c54: mov    %r11,0x20(%rsp)
  0x00007f8ab9140c59: mov    %r12,0x18(%rsp)
  0x00007f8ab9140c5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9140c63: mov    %r14,0x8(%rsp)
  0x00007f8ab9140c68: mov    %r15,(%rsp)
  0x00007f8ab9140c6c: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab9140c76: movabs $0x7f8ab9140c16,%rsi
  0x00007f8ab9140c80: mov    %rsp,%rdx
  0x00007f8ab9140c83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140c87: callq  0x00007f8aceddb9fa
  0x00007f8ab9140c8c: hlt    
  0x00007f8ab9140c8d: nop
  0x00007f8ab9140c8e: nop
  0x00007f8ab9140c8f: nop
  ;; L_loop:
  0x00007f8ab9140c90: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9140c95: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f8ab9140c9a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f8ab9140c9f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f8ab9140ca4: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9140ca9: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab9140cae: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9140cb2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9140cb6: add    $0x4,%rdx
  0x00007f8ab9140cba: jle    Stub::jbyte_disjoint_arraycopy+368 0x0x7f8ab9140c90
  0x00007f8ab9140cbc: sub    $0x4,%rdx
  0x00007f8ab9140cc0: jl     Stub::jbyte_disjoint_arraycopy+160 0x0x7f8ab9140bc0
  0x00007f8ab9140cc6: jmpq   Stub::jbyte_disjoint_arraycopy+175 0x0x7f8ab9140bcf

StubRoutines::jbyte_arraycopy [0x00007f8ab9140ce0, 0x00007f8ab9140ea1[ (449 bytes)
  0x00007f8ab9140ce0: push   %rbp
  0x00007f8ab9140ce1: mov    %rsp,%rbp
  0x00007f8ab9140ce4: movslq %edx,%rax
  0x00007f8ab9140ce7: cmp    %rdx,%rax
  0x00007f8ab9140cea: je     Stub::jbyte_arraycopy+135 0x0x7f8ab9140d67
  0x00007f8ab9140cf0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9140cf5: sub    $0x80,%rsp
  0x00007f8ab9140cfc: mov    %rax,0x78(%rsp)
  0x00007f8ab9140d01: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140d06: mov    %rdx,0x68(%rsp)
  0x00007f8ab9140d0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140d10: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140d15: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140d1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140d1f: mov    %r8,0x38(%rsp)
  0x00007f8ab9140d24: mov    %r9,0x30(%rsp)
  0x00007f8ab9140d29: mov    %r10,0x28(%rsp)
  0x00007f8ab9140d2e: mov    %r11,0x20(%rsp)
  0x00007f8ab9140d33: mov    %r12,0x18(%rsp)
  0x00007f8ab9140d38: mov    %r13,0x10(%rsp)
  0x00007f8ab9140d3d: mov    %r14,0x8(%rsp)
  0x00007f8ab9140d42: mov    %r15,(%rsp)
  0x00007f8ab9140d46: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9140d50: movabs $0x7f8ab9140cf0,%rsi
  0x00007f8ab9140d5a: mov    %rsp,%rdx
  0x00007f8ab9140d5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140d61: callq  0x00007f8aceddb9fa
  0x00007f8ab9140d66: hlt    
  ;; Entry:
  0x00007f8ab9140d67: cmp    %rdi,%rsi
  0x00007f8ab9140d6a: lea    (%rdi,%rdx,1),%rax
  0x00007f8ab9140d6e: jbe    Stub::jbyte_disjoint_arraycopy+135 0x0x7f8ab9140ba7
  0x00007f8ab9140d74: cmp    %rax,%rsi
  0x00007f8ab9140d77: jae    Stub::jbyte_disjoint_arraycopy+135 0x0x7f8ab9140ba7
  0x00007f8ab9140d7d: mov    %rdx,%rcx
  0x00007f8ab9140d80: shr    $0x3,%rdx
  0x00007f8ab9140d84: test   $0x1,%ecx
  0x00007f8ab9140d8a: je     Stub::jbyte_arraycopy+187 0x0x7f8ab9140d9b
  0x00007f8ab9140d90: mov    -0x1(%rdi,%rcx,1),%al
  0x00007f8ab9140d94: mov    %al,-0x1(%rsi,%rcx,1)
  0x00007f8ab9140d98: dec    %rcx
  ;; L_copy_2_bytes:
  0x00007f8ab9140d9b: test   $0x2,%ecx
  0x00007f8ab9140da1: je     Stub::jbyte_arraycopy+209 0x0x7f8ab9140db1
  0x00007f8ab9140da7: mov    -0x2(%rdi,%rcx,1),%ax
  0x00007f8ab9140dac: mov    %ax,-0x2(%rsi,%rcx,1)
  ;; L_copy_4_bytes:
  0x00007f8ab9140db1: test   $0x4,%ecx
  0x00007f8ab9140db7: je     Stub::jbyte_arraycopy+422 0x0x7f8ab9140e86
  0x00007f8ab9140dbd: mov    (%rdi,%rdx,8),%eax
  0x00007f8ab9140dc0: mov    %eax,(%rsi,%rdx,8)
  0x00007f8ab9140dc3: jmpq   Stub::jbyte_arraycopy+422 0x0x7f8ab9140e86
  ;; L_copy_8_bytes:
  0x00007f8ab9140dc8: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9140dcd: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab9140dd2: dec    %rdx
  0x00007f8ab9140dd5: jne    Stub::jbyte_arraycopy+232 0x0x7f8ab9140dc8
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0x00007f8ab9140dd7: incl   0x1684c697(%rip)        # 0x00007f8acf98d474
  0x00007f8ab9140ddd: xor    %rax,%rax
  0x00007f8ab9140de0: leaveq 
  0x00007f8ab9140de1: retq   
  0x00007f8ab9140de2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9140de7: sub    $0x80,%rsp
  0x00007f8ab9140dee: mov    %rax,0x78(%rsp)
  0x00007f8ab9140df3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140df8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9140dfd: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140e02: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140e07: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140e0c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140e11: mov    %r8,0x38(%rsp)
  0x00007f8ab9140e16: mov    %r9,0x30(%rsp)
  0x00007f8ab9140e1b: mov    %r10,0x28(%rsp)
  0x00007f8ab9140e20: mov    %r11,0x20(%rsp)
  0x00007f8ab9140e25: mov    %r12,0x18(%rsp)
  0x00007f8ab9140e2a: mov    %r13,0x10(%rsp)
  0x00007f8ab9140e2f: mov    %r14,0x8(%rsp)
  0x00007f8ab9140e34: mov    %r15,(%rsp)
  0x00007f8ab9140e38: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab9140e42: movabs $0x7f8ab9140de2,%rsi
  0x00007f8ab9140e4c: mov    %rsp,%rdx
  0x00007f8ab9140e4f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140e53: callq  0x00007f8aceddb9fa
  0x00007f8ab9140e58: hlt    
  0x00007f8ab9140e59: nop
  0x00007f8ab9140e5a: nop
  0x00007f8ab9140e5b: nop
  0x00007f8ab9140e5c: nop
  0x00007f8ab9140e5d: nop
  0x00007f8ab9140e5e: nop
  0x00007f8ab9140e5f: nop
  ;; L_loop:
  0x00007f8ab9140e60: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9140e65: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f8ab9140e6a: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f8ab9140e6f: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f8ab9140e74: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9140e79: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab9140e7e: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9140e82: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9140e86: sub    $0x4,%rdx
  0x00007f8ab9140e8a: jge    Stub::jbyte_arraycopy+384 0x0x7f8ab9140e60
  0x00007f8ab9140e8c: add    $0x4,%rdx
  0x00007f8ab9140e90: jg     Stub::jbyte_arraycopy+232 0x0x7f8ab9140dc8
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0x00007f8ab9140e96: incl   0x1684c5d8(%rip)        # 0x00007f8acf98d474
  0x00007f8ab9140e9c: xor    %rax,%rax
  0x00007f8ab9140e9f: leaveq 
  0x00007f8ab9140ea0: retq   

StubRoutines::jshort_disjoint_arraycopy [0x00007f8ab9140ec0, 0x00007f8ab914105b[ (411 bytes)
  0x00007f8ab9140ec0: push   %rbp
  0x00007f8ab9140ec1: mov    %rsp,%rbp
  0x00007f8ab9140ec4: movslq %edx,%rax
  0x00007f8ab9140ec7: cmp    %rdx,%rax
  0x00007f8ab9140eca: je     Stub::jshort_disjoint_arraycopy+135 0x0x7f8ab9140f47
  0x00007f8ab9140ed0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9140ed5: sub    $0x80,%rsp
  0x00007f8ab9140edc: mov    %rax,0x78(%rsp)
  0x00007f8ab9140ee1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140ee6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9140eeb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140ef0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140ef5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140efa: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140eff: mov    %r8,0x38(%rsp)
  0x00007f8ab9140f04: mov    %r9,0x30(%rsp)
  0x00007f8ab9140f09: mov    %r10,0x28(%rsp)
  0x00007f8ab9140f0e: mov    %r11,0x20(%rsp)
  0x00007f8ab9140f13: mov    %r12,0x18(%rsp)
  0x00007f8ab9140f18: mov    %r13,0x10(%rsp)
  0x00007f8ab9140f1d: mov    %r14,0x8(%rsp)
  0x00007f8ab9140f22: mov    %r15,(%rsp)
  0x00007f8ab9140f26: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9140f30: movabs $0x7f8ab9140ed0,%rsi
  0x00007f8ab9140f3a: mov    %rsp,%rdx
  0x00007f8ab9140f3d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9140f41: callq  0x00007f8aceddb9fa
  0x00007f8ab9140f46: hlt    
  ;; Entry:
  0x00007f8ab9140f47: mov    %rdx,%rcx
  0x00007f8ab9140f4a: shr    $0x2,%rdx
  0x00007f8ab9140f4e: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f8ab9140f53: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f8ab9140f58: neg    %rdx
  0x00007f8ab9140f5b: jmpq   Stub::jshort_disjoint_arraycopy+390 0x0x7f8ab9141046
  ;; L_copy_8_bytes:
  0x00007f8ab9140f60: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9140f65: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab9140f6a: inc    %rdx
  0x00007f8ab9140f6d: jne    Stub::jshort_disjoint_arraycopy+160 0x0x7f8ab9140f60
  ;; L_copy_4_bytes:
  0x00007f8ab9140f6f: test   $0x2,%ecx
  0x00007f8ab9140f75: je     Stub::jshort_disjoint_arraycopy+197 0x0x7f8ab9140f85
  0x00007f8ab9140f77: mov    0x8(%rdi),%eax
  0x00007f8ab9140f7a: mov    %eax,0x8(%rsi)
  0x00007f8ab9140f7d: add    $0x4,%rdi
  0x00007f8ab9140f81: add    $0x4,%rsi
  ;; L_copy_2_bytes:
  0x00007f8ab9140f85: test   $0x1,%ecx
  0x00007f8ab9140f8b: je     Stub::jshort_disjoint_arraycopy+213 0x0x7f8ab9140f95
  0x00007f8ab9140f8d: mov    0x8(%rdi),%ax
  0x00007f8ab9140f91: mov    %ax,0x8(%rsi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0x00007f8ab9140f95: incl   0x1684c4dd(%rip)        # 0x00007f8acf98d478
  0x00007f8ab9140f9b: xor    %rax,%rax
  0x00007f8ab9140f9e: leaveq 
  0x00007f8ab9140f9f: retq   
  0x00007f8ab9140fa0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9140fa5: sub    $0x80,%rsp
  0x00007f8ab9140fac: mov    %rax,0x78(%rsp)
  0x00007f8ab9140fb1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9140fb6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9140fbb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9140fc0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9140fc5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9140fca: mov    %rdi,0x40(%rsp)
  0x00007f8ab9140fcf: mov    %r8,0x38(%rsp)
  0x00007f8ab9140fd4: mov    %r9,0x30(%rsp)
  0x00007f8ab9140fd9: mov    %r10,0x28(%rsp)
  0x00007f8ab9140fde: mov    %r11,0x20(%rsp)
  0x00007f8ab9140fe3: mov    %r12,0x18(%rsp)
  0x00007f8ab9140fe8: mov    %r13,0x10(%rsp)
  0x00007f8ab9140fed: mov    %r14,0x8(%rsp)
  0x00007f8ab9140ff2: mov    %r15,(%rsp)
  0x00007f8ab9140ff6: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab9141000: movabs $0x7f8ab9140fa0,%rsi
  0x00007f8ab914100a: mov    %rsp,%rdx
  0x00007f8ab914100d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141011: callq  0x00007f8aceddb9fa
  0x00007f8ab9141016: hlt    
  0x00007f8ab9141017: nop
  0x00007f8ab9141018: nop
  0x00007f8ab9141019: nop
  0x00007f8ab914101a: nop
  0x00007f8ab914101b: nop
  0x00007f8ab914101c: nop
  0x00007f8ab914101d: nop
  0x00007f8ab914101e: nop
  0x00007f8ab914101f: nop
  ;; L_loop:
  0x00007f8ab9141020: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9141025: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f8ab914102a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f8ab914102f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f8ab9141034: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141039: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab914103e: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9141042: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9141046: add    $0x4,%rdx
  0x00007f8ab914104a: jle    Stub::jshort_disjoint_arraycopy+352 0x0x7f8ab9141020
  0x00007f8ab914104c: sub    $0x4,%rdx
  0x00007f8ab9141050: jl     Stub::jshort_disjoint_arraycopy+160 0x0x7f8ab9140f60
  0x00007f8ab9141056: jmpq   Stub::jshort_disjoint_arraycopy+175 0x0x7f8ab9140f6f

StubRoutines::jshort_arraycopy [0x00007f8ab9141060, 0x00007f8ab9141201[ (417 bytes)
  0x00007f8ab9141060: push   %rbp
  0x00007f8ab9141061: mov    %rsp,%rbp
  0x00007f8ab9141064: movslq %edx,%rax
  0x00007f8ab9141067: cmp    %rdx,%rax
  0x00007f8ab914106a: je     Stub::jshort_arraycopy+135 0x0x7f8ab91410e7
  0x00007f8ab9141070: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141075: sub    $0x80,%rsp
  0x00007f8ab914107c: mov    %rax,0x78(%rsp)
  0x00007f8ab9141081: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141086: mov    %rdx,0x68(%rsp)
  0x00007f8ab914108b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141090: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141095: mov    %rsi,0x48(%rsp)
  0x00007f8ab914109a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914109f: mov    %r8,0x38(%rsp)
  0x00007f8ab91410a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91410a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91410ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91410b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91410b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91410bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91410c2: mov    %r15,(%rsp)
  0x00007f8ab91410c6: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab91410d0: movabs $0x7f8ab9141070,%rsi
  0x00007f8ab91410da: mov    %rsp,%rdx
  0x00007f8ab91410dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91410e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91410e6: hlt    
  ;; Entry:
  0x00007f8ab91410e7: cmp    %rdi,%rsi
  0x00007f8ab91410ea: lea    (%rdi,%rdx,2),%rax
  0x00007f8ab91410ee: jbe    Stub::jshort_disjoint_arraycopy+135 0x0x7f8ab9140f47
  0x00007f8ab91410f4: cmp    %rax,%rsi
  0x00007f8ab91410f7: jae    Stub::jshort_disjoint_arraycopy+135 0x0x7f8ab9140f47
  0x00007f8ab91410fd: mov    %rdx,%rcx
  0x00007f8ab9141100: shr    $0x2,%rdx
  0x00007f8ab9141104: test   $0x1,%ecx
  0x00007f8ab914110a: je     Stub::jshort_arraycopy+182 0x0x7f8ab9141116
  0x00007f8ab914110c: mov    -0x2(%rdi,%rcx,2),%ax
  0x00007f8ab9141111: mov    %ax,-0x2(%rsi,%rcx,2)
  ;; L_copy_4_bytes:
  0x00007f8ab9141116: test   $0x2,%ecx
  0x00007f8ab914111c: je     Stub::jshort_arraycopy+390 0x0x7f8ab91411e6
  0x00007f8ab9141122: mov    (%rdi,%rdx,8),%eax
  0x00007f8ab9141125: mov    %eax,(%rsi,%rdx,8)
  0x00007f8ab9141128: jmpq   Stub::jshort_arraycopy+390 0x0x7f8ab91411e6
  ;; L_copy_8_bytes:
  0x00007f8ab914112d: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141132: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab9141137: dec    %rdx
  0x00007f8ab914113a: jne    Stub::jshort_arraycopy+205 0x0x7f8ab914112d
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0x00007f8ab914113c: incl   0x1684c336(%rip)        # 0x00007f8acf98d478
  0x00007f8ab9141142: xor    %rax,%rax
  0x00007f8ab9141145: leaveq 
  0x00007f8ab9141146: retq   
  0x00007f8ab9141147: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914114c: sub    $0x80,%rsp
  0x00007f8ab9141153: mov    %rax,0x78(%rsp)
  0x00007f8ab9141158: mov    %rcx,0x70(%rsp)
  0x00007f8ab914115d: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141162: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141167: mov    %rbp,0x50(%rsp)
  0x00007f8ab914116c: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141171: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141176: mov    %r8,0x38(%rsp)
  0x00007f8ab914117b: mov    %r9,0x30(%rsp)
  0x00007f8ab9141180: mov    %r10,0x28(%rsp)
  0x00007f8ab9141185: mov    %r11,0x20(%rsp)
  0x00007f8ab914118a: mov    %r12,0x18(%rsp)
  0x00007f8ab914118f: mov    %r13,0x10(%rsp)
  0x00007f8ab9141194: mov    %r14,0x8(%rsp)
  0x00007f8ab9141199: mov    %r15,(%rsp)
  0x00007f8ab914119d: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab91411a7: movabs $0x7f8ab9141147,%rsi
  0x00007f8ab91411b1: mov    %rsp,%rdx
  0x00007f8ab91411b4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91411b8: callq  0x00007f8aceddb9fa
  0x00007f8ab91411bd: hlt    
  0x00007f8ab91411be: nop
  0x00007f8ab91411bf: nop
  ;; L_loop:
  0x00007f8ab91411c0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f8ab91411c5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f8ab91411ca: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f8ab91411cf: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f8ab91411d4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab91411d9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab91411de: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab91411e2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab91411e6: sub    $0x4,%rdx
  0x00007f8ab91411ea: jge    Stub::jshort_arraycopy+352 0x0x7f8ab91411c0
  0x00007f8ab91411ec: add    $0x4,%rdx
  0x00007f8ab91411f0: jg     Stub::jshort_arraycopy+205 0x0x7f8ab914112d
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0x00007f8ab91411f6: incl   0x1684c27c(%rip)        # 0x00007f8acf98d478
  0x00007f8ab91411fc: xor    %rax,%rax
  0x00007f8ab91411ff: leaveq 
  0x00007f8ab9141200: retq   

StubRoutines::jint_disjoint_arraycopy [0x00007f8ab9141220, 0x00007f8ab914139b[ (379 bytes)
  0x00007f8ab9141220: push   %rbp
  0x00007f8ab9141221: mov    %rsp,%rbp
  0x00007f8ab9141224: movslq %edx,%rax
  0x00007f8ab9141227: cmp    %rdx,%rax
  0x00007f8ab914122a: je     Stub::jint_disjoint_arraycopy+135 0x0x7f8ab91412a7
  0x00007f8ab9141230: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141235: sub    $0x80,%rsp
  0x00007f8ab914123c: mov    %rax,0x78(%rsp)
  0x00007f8ab9141241: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141246: mov    %rdx,0x68(%rsp)
  0x00007f8ab914124b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141250: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141255: mov    %rsi,0x48(%rsp)
  0x00007f8ab914125a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914125f: mov    %r8,0x38(%rsp)
  0x00007f8ab9141264: mov    %r9,0x30(%rsp)
  0x00007f8ab9141269: mov    %r10,0x28(%rsp)
  0x00007f8ab914126e: mov    %r11,0x20(%rsp)
  0x00007f8ab9141273: mov    %r12,0x18(%rsp)
  0x00007f8ab9141278: mov    %r13,0x10(%rsp)
  0x00007f8ab914127d: mov    %r14,0x8(%rsp)
  0x00007f8ab9141282: mov    %r15,(%rsp)
  0x00007f8ab9141286: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141290: movabs $0x7f8ab9141230,%rsi
  0x00007f8ab914129a: mov    %rsp,%rdx
  0x00007f8ab914129d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91412a1: callq  0x00007f8aceddb9fa
  0x00007f8ab91412a6: hlt    
  ;; Entry:
  0x00007f8ab91412a7: mov    %rdx,%rcx
  0x00007f8ab91412aa: shr    $0x1,%rdx
  0x00007f8ab91412ae: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f8ab91412b3: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f8ab91412b8: neg    %rdx
  0x00007f8ab91412bb: jmpq   Stub::jint_disjoint_arraycopy+358 0x0x7f8ab9141386
  ;; L_copy_8_bytes:
  0x00007f8ab91412c0: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab91412c5: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab91412ca: inc    %rdx
  0x00007f8ab91412cd: jne    Stub::jint_disjoint_arraycopy+160 0x0x7f8ab91412c0
  ;; L_copy_4_bytes:
  0x00007f8ab91412cf: test   $0x1,%ecx
  0x00007f8ab91412d5: je     Stub::jint_disjoint_arraycopy+189 0x0x7f8ab91412dd
  0x00007f8ab91412d7: mov    0x8(%rdi),%eax
  0x00007f8ab91412da: mov    %eax,0x8(%rsi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab91412dd: incl   0x1684c199(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab91412e3: xor    %rax,%rax
  0x00007f8ab91412e6: leaveq 
  0x00007f8ab91412e7: retq   
  0x00007f8ab91412e8: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91412ed: sub    $0x80,%rsp
  0x00007f8ab91412f4: mov    %rax,0x78(%rsp)
  0x00007f8ab91412f9: mov    %rcx,0x70(%rsp)
  0x00007f8ab91412fe: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141303: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141308: mov    %rbp,0x50(%rsp)
  0x00007f8ab914130d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141312: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141317: mov    %r8,0x38(%rsp)
  0x00007f8ab914131c: mov    %r9,0x30(%rsp)
  0x00007f8ab9141321: mov    %r10,0x28(%rsp)
  0x00007f8ab9141326: mov    %r11,0x20(%rsp)
  0x00007f8ab914132b: mov    %r12,0x18(%rsp)
  0x00007f8ab9141330: mov    %r13,0x10(%rsp)
  0x00007f8ab9141335: mov    %r14,0x8(%rsp)
  0x00007f8ab914133a: mov    %r15,(%rsp)
  0x00007f8ab914133e: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab9141348: movabs $0x7f8ab91412e8,%rsi
  0x00007f8ab9141352: mov    %rsp,%rdx
  0x00007f8ab9141355: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141359: callq  0x00007f8aceddb9fa
  0x00007f8ab914135e: hlt    
  0x00007f8ab914135f: nop
  ;; L_loop:
  0x00007f8ab9141360: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9141365: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f8ab914136a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f8ab914136f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f8ab9141374: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141379: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab914137e: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9141382: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9141386: add    $0x4,%rdx
  0x00007f8ab914138a: jle    Stub::jint_disjoint_arraycopy+320 0x0x7f8ab9141360
  0x00007f8ab914138c: sub    $0x4,%rdx
  0x00007f8ab9141390: jl     Stub::jint_disjoint_arraycopy+160 0x0x7f8ab91412c0
  0x00007f8ab9141396: jmpq   Stub::jint_disjoint_arraycopy+175 0x0x7f8ab91412cf

StubRoutines::jint_arraycopy [0x00007f8ab91413a0, 0x00007f8ab91415c1[ (545 bytes)
  0x00007f8ab91413a0: push   %rbp
  0x00007f8ab91413a1: mov    %rsp,%rbp
  0x00007f8ab91413a4: movslq %edx,%rax
  0x00007f8ab91413a7: cmp    %rdx,%rax
  0x00007f8ab91413aa: je     Stub::jint_arraycopy+135 0x0x7f8ab9141427
  0x00007f8ab91413b0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91413b5: sub    $0x80,%rsp
  0x00007f8ab91413bc: mov    %rax,0x78(%rsp)
  0x00007f8ab91413c1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91413c6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91413cb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91413d0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91413d5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91413da: mov    %rdi,0x40(%rsp)
  0x00007f8ab91413df: mov    %r8,0x38(%rsp)
  0x00007f8ab91413e4: mov    %r9,0x30(%rsp)
  0x00007f8ab91413e9: mov    %r10,0x28(%rsp)
  0x00007f8ab91413ee: mov    %r11,0x20(%rsp)
  0x00007f8ab91413f3: mov    %r12,0x18(%rsp)
  0x00007f8ab91413f8: mov    %r13,0x10(%rsp)
  0x00007f8ab91413fd: mov    %r14,0x8(%rsp)
  0x00007f8ab9141402: mov    %r15,(%rsp)
  0x00007f8ab9141406: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141410: movabs $0x7f8ab91413b0,%rsi
  0x00007f8ab914141a: mov    %rsp,%rdx
  0x00007f8ab914141d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141421: callq  0x00007f8aceddb9fa
  0x00007f8ab9141426: hlt    
  ;; Entry:
  0x00007f8ab9141427: cmp    %rdi,%rsi
  0x00007f8ab914142a: lea    (%rdi,%rdx,4),%rax
  0x00007f8ab914142e: jbe    Stub::jint_disjoint_arraycopy+135 0x0x7f8ab91412a7
  0x00007f8ab9141434: cmp    %rax,%rsi
  0x00007f8ab9141437: jae    Stub::jint_disjoint_arraycopy+135 0x0x7f8ab91412a7
  0x00007f8ab914143d: movslq %edx,%rax
  0x00007f8ab9141440: cmp    %rdx,%rax
  0x00007f8ab9141443: je     Stub::jint_arraycopy+288 0x0x7f8ab91414c0
  0x00007f8ab9141449: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914144e: sub    $0x80,%rsp
  0x00007f8ab9141455: mov    %rax,0x78(%rsp)
  0x00007f8ab914145a: mov    %rcx,0x70(%rsp)
  0x00007f8ab914145f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141464: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141469: mov    %rbp,0x50(%rsp)
  0x00007f8ab914146e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141473: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141478: mov    %r8,0x38(%rsp)
  0x00007f8ab914147d: mov    %r9,0x30(%rsp)
  0x00007f8ab9141482: mov    %r10,0x28(%rsp)
  0x00007f8ab9141487: mov    %r11,0x20(%rsp)
  0x00007f8ab914148c: mov    %r12,0x18(%rsp)
  0x00007f8ab9141491: mov    %r13,0x10(%rsp)
  0x00007f8ab9141496: mov    %r14,0x8(%rsp)
  0x00007f8ab914149b: mov    %r15,(%rsp)
  0x00007f8ab914149f: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab91414a9: movabs $0x7f8ab9141449,%rsi
  0x00007f8ab91414b3: mov    %rsp,%rdx
  0x00007f8ab91414b6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91414ba: callq  0x00007f8aceddb9fa
  0x00007f8ab91414bf: hlt    
  0x00007f8ab91414c0: mov    %rdx,%rcx
  0x00007f8ab91414c3: shr    $0x1,%rdx
  0x00007f8ab91414c7: test   $0x1,%ecx
  0x00007f8ab91414cd: je     Stub::jint_arraycopy+518 0x0x7f8ab91415a6
  0x00007f8ab91414d3: mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f8ab91414d7: mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f8ab91414db: jmpq   Stub::jint_arraycopy+518 0x0x7f8ab91415a6
  ;; L_copy_8_bytes:
  0x00007f8ab91414e0: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab91414e5: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab91414ea: dec    %rdx
  0x00007f8ab91414ed: jne    Stub::jint_arraycopy+320 0x0x7f8ab91414e0
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab91414ef: incl   0x1684bf87(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab91414f5: xor    %rax,%rax
  0x00007f8ab91414f8: leaveq 
  0x00007f8ab91414f9: retq   
  0x00007f8ab91414fa: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91414ff: sub    $0x80,%rsp
  0x00007f8ab9141506: mov    %rax,0x78(%rsp)
  0x00007f8ab914150b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141510: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141515: mov    %rbx,0x60(%rsp)
  0x00007f8ab914151a: mov    %rbp,0x50(%rsp)
  0x00007f8ab914151f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141524: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141529: mov    %r8,0x38(%rsp)
  0x00007f8ab914152e: mov    %r9,0x30(%rsp)
  0x00007f8ab9141533: mov    %r10,0x28(%rsp)
  0x00007f8ab9141538: mov    %r11,0x20(%rsp)
  0x00007f8ab914153d: mov    %r12,0x18(%rsp)
  0x00007f8ab9141542: mov    %r13,0x10(%rsp)
  0x00007f8ab9141547: mov    %r14,0x8(%rsp)
  0x00007f8ab914154c: mov    %r15,(%rsp)
  0x00007f8ab9141550: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab914155a: movabs $0x7f8ab91414fa,%rsi
  0x00007f8ab9141564: mov    %rsp,%rdx
  0x00007f8ab9141567: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914156b: callq  0x00007f8aceddb9fa
  0x00007f8ab9141570: hlt    
  0x00007f8ab9141571: nop
  0x00007f8ab9141572: nop
  0x00007f8ab9141573: nop
  0x00007f8ab9141574: nop
  0x00007f8ab9141575: nop
  0x00007f8ab9141576: nop
  0x00007f8ab9141577: nop
  0x00007f8ab9141578: nop
  0x00007f8ab9141579: nop
  0x00007f8ab914157a: nop
  0x00007f8ab914157b: nop
  0x00007f8ab914157c: nop
  0x00007f8ab914157d: nop
  0x00007f8ab914157e: nop
  0x00007f8ab914157f: nop
  ;; L_loop:
  0x00007f8ab9141580: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9141585: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f8ab914158a: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f8ab914158f: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f8ab9141594: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141599: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab914159e: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab91415a2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab91415a6: sub    $0x4,%rdx
  0x00007f8ab91415aa: jge    Stub::jint_arraycopy+480 0x0x7f8ab9141580
  0x00007f8ab91415ac: add    $0x4,%rdx
  0x00007f8ab91415b0: jg     Stub::jint_arraycopy+320 0x0x7f8ab91414e0
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab91415b6: incl   0x1684bec0(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab91415bc: xor    %rax,%rax
  0x00007f8ab91415bf: leaveq 
  0x00007f8ab91415c0: retq   

StubRoutines::jlong_disjoint_arraycopy [0x00007f8ab91415e0, 0x00007f8ab9141751[ (369 bytes)
  0x00007f8ab91415e0: push   %rbp
  0x00007f8ab91415e1: mov    %rsp,%rbp
  0x00007f8ab91415e4: movslq %edx,%rax
  0x00007f8ab91415e7: cmp    %rdx,%rax
  0x00007f8ab91415ea: je     Stub::jlong_disjoint_arraycopy+135 0x0x7f8ab9141667
  0x00007f8ab91415f0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91415f5: sub    $0x80,%rsp
  0x00007f8ab91415fc: mov    %rax,0x78(%rsp)
  0x00007f8ab9141601: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141606: mov    %rdx,0x68(%rsp)
  0x00007f8ab914160b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141610: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141615: mov    %rsi,0x48(%rsp)
  0x00007f8ab914161a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914161f: mov    %r8,0x38(%rsp)
  0x00007f8ab9141624: mov    %r9,0x30(%rsp)
  0x00007f8ab9141629: mov    %r10,0x28(%rsp)
  0x00007f8ab914162e: mov    %r11,0x20(%rsp)
  0x00007f8ab9141633: mov    %r12,0x18(%rsp)
  0x00007f8ab9141638: mov    %r13,0x10(%rsp)
  0x00007f8ab914163d: mov    %r14,0x8(%rsp)
  0x00007f8ab9141642: mov    %r15,(%rsp)
  0x00007f8ab9141646: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141650: movabs $0x7f8ab91415f0,%rsi
  0x00007f8ab914165a: mov    %rsp,%rdx
  0x00007f8ab914165d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141661: callq  0x00007f8aceddb9fa
  0x00007f8ab9141666: hlt    
  ;; Entry:
  0x00007f8ab9141667: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f8ab914166c: lea    -0x8(%rsi,%rdx,8),%rcx
  0x00007f8ab9141671: neg    %rdx
  0x00007f8ab9141674: jmpq   Stub::jlong_disjoint_arraycopy+342 0x0x7f8ab9141736
  ;; L_copy_8_bytes:
  0x00007f8ab9141679: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab914167e: mov    %rax,0x8(%rcx,%rdx,8)
  0x00007f8ab9141683: inc    %rdx
  0x00007f8ab9141686: jne    Stub::jlong_disjoint_arraycopy+153 0x0x7f8ab9141679
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f8ab9141688: incl   0x1684bdf2(%rip)        # 0x00007f8acf98d480
  0x00007f8ab914168e: xor    %rax,%rax
  0x00007f8ab9141691: leaveq 
  0x00007f8ab9141692: retq   
  0x00007f8ab9141693: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141698: sub    $0x80,%rsp
  0x00007f8ab914169f: mov    %rax,0x78(%rsp)
  0x00007f8ab91416a4: mov    %rcx,0x70(%rsp)
  0x00007f8ab91416a9: mov    %rdx,0x68(%rsp)
  0x00007f8ab91416ae: mov    %rbx,0x60(%rsp)
  0x00007f8ab91416b3: mov    %rbp,0x50(%rsp)
  0x00007f8ab91416b8: mov    %rsi,0x48(%rsp)
  0x00007f8ab91416bd: mov    %rdi,0x40(%rsp)
  0x00007f8ab91416c2: mov    %r8,0x38(%rsp)
  0x00007f8ab91416c7: mov    %r9,0x30(%rsp)
  0x00007f8ab91416cc: mov    %r10,0x28(%rsp)
  0x00007f8ab91416d1: mov    %r11,0x20(%rsp)
  0x00007f8ab91416d6: mov    %r12,0x18(%rsp)
  0x00007f8ab91416db: mov    %r13,0x10(%rsp)
  0x00007f8ab91416e0: mov    %r14,0x8(%rsp)
  0x00007f8ab91416e5: mov    %r15,(%rsp)
  0x00007f8ab91416e9: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab91416f3: movabs $0x7f8ab9141693,%rsi
  0x00007f8ab91416fd: mov    %rsp,%rdx
  0x00007f8ab9141700: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141704: callq  0x00007f8aceddb9fa
  0x00007f8ab9141709: hlt    
  0x00007f8ab914170a: nop
  0x00007f8ab914170b: nop
  0x00007f8ab914170c: nop
  0x00007f8ab914170d: nop
  0x00007f8ab914170e: nop
  0x00007f8ab914170f: nop
  ;; L_loop:
  0x00007f8ab9141710: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9141715: mov    %rax,-0x18(%rcx,%rdx,8)
  0x00007f8ab914171a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f8ab914171f: mov    %rax,-0x10(%rcx,%rdx,8)
  0x00007f8ab9141724: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141729: mov    %rax,-0x8(%rcx,%rdx,8)
  0x00007f8ab914172e: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9141732: mov    %rax,(%rcx,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9141736: add    $0x4,%rdx
  0x00007f8ab914173a: jle    Stub::jlong_disjoint_arraycopy+304 0x0x7f8ab9141710
  0x00007f8ab914173c: sub    $0x4,%rdx
  0x00007f8ab9141740: jl     Stub::jlong_disjoint_arraycopy+153 0x0x7f8ab9141679
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f8ab9141746: incl   0x1684bd34(%rip)        # 0x00007f8acf98d480
  0x00007f8ab914174c: xor    %rax,%rax
  0x00007f8ab914174f: leaveq 
  0x00007f8ab9141750: retq   

StubRoutines::jlong_arraycopy [0x00007f8ab9141760, 0x00007f8ab91418e1[ (385 bytes)
  0x00007f8ab9141760: push   %rbp
  0x00007f8ab9141761: mov    %rsp,%rbp
  0x00007f8ab9141764: movslq %edx,%rax
  0x00007f8ab9141767: cmp    %rdx,%rax
  0x00007f8ab914176a: je     Stub::jlong_arraycopy+135 0x0x7f8ab91417e7
  0x00007f8ab9141770: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141775: sub    $0x80,%rsp
  0x00007f8ab914177c: mov    %rax,0x78(%rsp)
  0x00007f8ab9141781: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141786: mov    %rdx,0x68(%rsp)
  0x00007f8ab914178b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141790: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141795: mov    %rsi,0x48(%rsp)
  0x00007f8ab914179a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914179f: mov    %r8,0x38(%rsp)
  0x00007f8ab91417a4: mov    %r9,0x30(%rsp)
  0x00007f8ab91417a9: mov    %r10,0x28(%rsp)
  0x00007f8ab91417ae: mov    %r11,0x20(%rsp)
  0x00007f8ab91417b3: mov    %r12,0x18(%rsp)
  0x00007f8ab91417b8: mov    %r13,0x10(%rsp)
  0x00007f8ab91417bd: mov    %r14,0x8(%rsp)
  0x00007f8ab91417c2: mov    %r15,(%rsp)
  0x00007f8ab91417c6: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab91417d0: movabs $0x7f8ab9141770,%rsi
  0x00007f8ab91417da: mov    %rsp,%rdx
  0x00007f8ab91417dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91417e1: callq  0x00007f8aceddb9fa
  0x00007f8ab91417e6: hlt    
  ;; Entry:
  0x00007f8ab91417e7: cmp    %rdi,%rsi
  0x00007f8ab91417ea: lea    (%rdi,%rdx,8),%rax
  0x00007f8ab91417ee: jbe    Stub::jlong_disjoint_arraycopy+135 0x0x7f8ab9141667
  0x00007f8ab91417f4: cmp    %rax,%rsi
  0x00007f8ab91417f7: jae    Stub::jlong_disjoint_arraycopy+135 0x0x7f8ab9141667
  0x00007f8ab91417fd: jmpq   Stub::jlong_arraycopy+358 0x0x7f8ab91418c6
  ;; L_copy_8_bytes:
  0x00007f8ab9141802: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141807: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab914180c: dec    %rdx
  0x00007f8ab914180f: jne    Stub::jlong_arraycopy+162 0x0x7f8ab9141802
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f8ab9141811: incl   0x1684bc69(%rip)        # 0x00007f8acf98d480
  0x00007f8ab9141817: xor    %rax,%rax
  0x00007f8ab914181a: leaveq 
  0x00007f8ab914181b: retq   
  0x00007f8ab914181c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141821: sub    $0x80,%rsp
  0x00007f8ab9141828: mov    %rax,0x78(%rsp)
  0x00007f8ab914182d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141832: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141837: mov    %rbx,0x60(%rsp)
  0x00007f8ab914183c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141841: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141846: mov    %rdi,0x40(%rsp)
  0x00007f8ab914184b: mov    %r8,0x38(%rsp)
  0x00007f8ab9141850: mov    %r9,0x30(%rsp)
  0x00007f8ab9141855: mov    %r10,0x28(%rsp)
  0x00007f8ab914185a: mov    %r11,0x20(%rsp)
  0x00007f8ab914185f: mov    %r12,0x18(%rsp)
  0x00007f8ab9141864: mov    %r13,0x10(%rsp)
  0x00007f8ab9141869: mov    %r14,0x8(%rsp)
  0x00007f8ab914186e: mov    %r15,(%rsp)
  0x00007f8ab9141872: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab914187c: movabs $0x7f8ab914181c,%rsi
  0x00007f8ab9141886: mov    %rsp,%rdx
  0x00007f8ab9141889: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914188d: callq  0x00007f8aceddb9fa
  0x00007f8ab9141892: hlt    
  0x00007f8ab9141893: nop
  0x00007f8ab9141894: nop
  0x00007f8ab9141895: nop
  0x00007f8ab9141896: nop
  0x00007f8ab9141897: nop
  0x00007f8ab9141898: nop
  0x00007f8ab9141899: nop
  0x00007f8ab914189a: nop
  0x00007f8ab914189b: nop
  0x00007f8ab914189c: nop
  0x00007f8ab914189d: nop
  0x00007f8ab914189e: nop
  0x00007f8ab914189f: nop
  ;; L_loop:
  0x00007f8ab91418a0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f8ab91418a5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f8ab91418aa: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f8ab91418af: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f8ab91418b4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab91418b9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab91418be: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab91418c2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab91418c6: sub    $0x4,%rdx
  0x00007f8ab91418ca: jge    Stub::jlong_arraycopy+320 0x0x7f8ab91418a0
  0x00007f8ab91418cc: add    $0x4,%rdx
  0x00007f8ab91418d0: jg     Stub::jlong_arraycopy+162 0x0x7f8ab9141802
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f8ab91418d6: incl   0x1684bba4(%rip)        # 0x00007f8acf98d480
  0x00007f8ab91418dc: xor    %rax,%rax
  0x00007f8ab91418df: leaveq 
  0x00007f8ab91418e0: retq   

StubRoutines::oop_disjoint_arraycopy [0x00007f8ab9141900, 0x00007f8ab9141aab[ (427 bytes)
  0x00007f8ab9141900: push   %rbp
  0x00007f8ab9141901: mov    %rsp,%rbp
  0x00007f8ab9141904: movslq %edx,%rax
  0x00007f8ab9141907: cmp    %rdx,%rax
  0x00007f8ab914190a: je     Stub::oop_disjoint_arraycopy+135 0x0x7f8ab9141987
  0x00007f8ab9141910: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141915: sub    $0x80,%rsp
  0x00007f8ab914191c: mov    %rax,0x78(%rsp)
  0x00007f8ab9141921: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141926: mov    %rdx,0x68(%rsp)
  0x00007f8ab914192b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141930: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141935: mov    %rsi,0x48(%rsp)
  0x00007f8ab914193a: mov    %rdi,0x40(%rsp)
  0x00007f8ab914193f: mov    %r8,0x38(%rsp)
  0x00007f8ab9141944: mov    %r9,0x30(%rsp)
  0x00007f8ab9141949: mov    %r10,0x28(%rsp)
  0x00007f8ab914194e: mov    %r11,0x20(%rsp)
  0x00007f8ab9141953: mov    %r12,0x18(%rsp)
  0x00007f8ab9141958: mov    %r13,0x10(%rsp)
  0x00007f8ab914195d: mov    %r14,0x8(%rsp)
  0x00007f8ab9141962: mov    %r15,(%rsp)
  0x00007f8ab9141966: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141970: movabs $0x7f8ab9141910,%rsi
  0x00007f8ab914197a: mov    %rsp,%rdx
  0x00007f8ab914197d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141981: callq  0x00007f8aceddb9fa
  0x00007f8ab9141986: hlt    
  ;; Entry:
  0x00007f8ab9141987: mov    %rsi,%r11
  0x00007f8ab914198a: mov    %rdx,%rcx
  0x00007f8ab914198d: shr    $0x1,%rdx
  0x00007f8ab9141991: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f8ab9141996: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f8ab914199b: neg    %rdx
  0x00007f8ab914199e: jmpq   Stub::oop_disjoint_arraycopy+406 0x0x7f8ab9141a96
  ;; L_copy_8_bytes:
  0x00007f8ab91419a3: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab91419a8: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab91419ad: inc    %rdx
  0x00007f8ab91419b0: jne    Stub::oop_disjoint_arraycopy+163 0x0x7f8ab91419a3
  ;; L_copy_4_bytes:
  0x00007f8ab91419b2: test   $0x1,%ecx
  0x00007f8ab91419b8: je     Stub::oop_disjoint_arraycopy+192 0x0x7f8ab91419c0
  0x00007f8ab91419ba: mov    0x8(%rdi),%eax
  0x00007f8ab91419bd: mov    %eax,0x8(%rsi)
  ;; L_exit:
  0x00007f8ab91419c0: lea    (%r11,%rcx,4),%rcx
  0x00007f8ab91419c4: sub    $0x4,%rcx
  0x00007f8ab91419c8: shr    $0x9,%r11
  0x00007f8ab91419cc: shr    $0x9,%rcx
  0x00007f8ab91419d0: sub    %r11,%rcx
  0x00007f8ab91419d3: movabs $0x7f8acbf27000,%rax
  0x00007f8ab91419dd: add    %rax,%r11
  ;; L_loop:
  0x00007f8ab91419e0: movb   $0x0,(%r11,%rcx,1)
  0x00007f8ab91419e5: dec    %rcx
  0x00007f8ab91419e8: jge    Stub::oop_disjoint_arraycopy+224 0x0x7f8ab91419e0
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab91419ea: incl   0x1684ba8c(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab91419f0: xor    %rax,%rax
  0x00007f8ab91419f3: leaveq 
  0x00007f8ab91419f4: retq   
  0x00007f8ab91419f5: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91419fa: sub    $0x80,%rsp
  0x00007f8ab9141a01: mov    %rax,0x78(%rsp)
  0x00007f8ab9141a06: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141a0b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141a10: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141a15: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141a1a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141a1f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141a24: mov    %r8,0x38(%rsp)
  0x00007f8ab9141a29: mov    %r9,0x30(%rsp)
  0x00007f8ab9141a2e: mov    %r10,0x28(%rsp)
  0x00007f8ab9141a33: mov    %r11,0x20(%rsp)
  0x00007f8ab9141a38: mov    %r12,0x18(%rsp)
  0x00007f8ab9141a3d: mov    %r13,0x10(%rsp)
  0x00007f8ab9141a42: mov    %r14,0x8(%rsp)
  0x00007f8ab9141a47: mov    %r15,(%rsp)
  0x00007f8ab9141a4b: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab9141a55: movabs $0x7f8ab91419f5,%rsi
  0x00007f8ab9141a5f: mov    %rsp,%rdx
  0x00007f8ab9141a62: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141a66: callq  0x00007f8aceddb9fa
  0x00007f8ab9141a6b: hlt    
  0x00007f8ab9141a6c: nop
  0x00007f8ab9141a6d: nop
  0x00007f8ab9141a6e: nop
  0x00007f8ab9141a6f: nop
  ;; L_loop:
  0x00007f8ab9141a70: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9141a75: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f8ab9141a7a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f8ab9141a7f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f8ab9141a84: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141a89: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab9141a8e: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9141a92: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9141a96: add    $0x4,%rdx
  0x00007f8ab9141a9a: jle    Stub::oop_disjoint_arraycopy+368 0x0x7f8ab9141a70
  0x00007f8ab9141a9c: sub    $0x4,%rdx
  0x00007f8ab9141aa0: jl     Stub::oop_disjoint_arraycopy+163 0x0x7f8ab91419a3
  0x00007f8ab9141aa6: jmpq   Stub::oop_disjoint_arraycopy+178 0x0x7f8ab91419b2

StubRoutines::oop_arraycopy [0x00007f8ab9141ac0, 0x00007f8ab9141d0a[ (586 bytes)
  0x00007f8ab9141ac0: push   %rbp
  0x00007f8ab9141ac1: mov    %rsp,%rbp
  0x00007f8ab9141ac4: movslq %edx,%rax
  0x00007f8ab9141ac7: cmp    %rdx,%rax
  0x00007f8ab9141aca: je     Stub::oop_arraycopy+135 0x0x7f8ab9141b47
  0x00007f8ab9141ad0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141ad5: sub    $0x80,%rsp
  0x00007f8ab9141adc: mov    %rax,0x78(%rsp)
  0x00007f8ab9141ae1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141ae6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141aeb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141af0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141af5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141afa: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141aff: mov    %r8,0x38(%rsp)
  0x00007f8ab9141b04: mov    %r9,0x30(%rsp)
  0x00007f8ab9141b09: mov    %r10,0x28(%rsp)
  0x00007f8ab9141b0e: mov    %r11,0x20(%rsp)
  0x00007f8ab9141b13: mov    %r12,0x18(%rsp)
  0x00007f8ab9141b18: mov    %r13,0x10(%rsp)
  0x00007f8ab9141b1d: mov    %r14,0x8(%rsp)
  0x00007f8ab9141b22: mov    %r15,(%rsp)
  0x00007f8ab9141b26: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141b30: movabs $0x7f8ab9141ad0,%rsi
  0x00007f8ab9141b3a: mov    %rsp,%rdx
  0x00007f8ab9141b3d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141b41: callq  0x00007f8aceddb9fa
  0x00007f8ab9141b46: hlt    
  ;; Entry:
  0x00007f8ab9141b47: cmp    %rdi,%rsi
  0x00007f8ab9141b4a: lea    (%rdi,%rdx,4),%rax
  0x00007f8ab9141b4e: jbe    Stub::oop_disjoint_arraycopy+135 0x0x7f8ab9141987
  0x00007f8ab9141b54: cmp    %rax,%rsi
  0x00007f8ab9141b57: jae    Stub::oop_disjoint_arraycopy+135 0x0x7f8ab9141987
  0x00007f8ab9141b5d: movslq %edx,%rax
  0x00007f8ab9141b60: cmp    %rdx,%rax
  0x00007f8ab9141b63: je     Stub::oop_arraycopy+288 0x0x7f8ab9141be0
  0x00007f8ab9141b69: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141b6e: sub    $0x80,%rsp
  0x00007f8ab9141b75: mov    %rax,0x78(%rsp)
  0x00007f8ab9141b7a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141b7f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141b84: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141b89: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141b8e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141b93: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141b98: mov    %r8,0x38(%rsp)
  0x00007f8ab9141b9d: mov    %r9,0x30(%rsp)
  0x00007f8ab9141ba2: mov    %r10,0x28(%rsp)
  0x00007f8ab9141ba7: mov    %r11,0x20(%rsp)
  0x00007f8ab9141bac: mov    %r12,0x18(%rsp)
  0x00007f8ab9141bb1: mov    %r13,0x10(%rsp)
  0x00007f8ab9141bb6: mov    %r14,0x8(%rsp)
  0x00007f8ab9141bbb: mov    %r15,(%rsp)
  0x00007f8ab9141bbf: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141bc9: movabs $0x7f8ab9141b69,%rsi
  0x00007f8ab9141bd3: mov    %rsp,%rdx
  0x00007f8ab9141bd6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141bda: callq  0x00007f8aceddb9fa
  0x00007f8ab9141bdf: hlt    
  0x00007f8ab9141be0: mov    %rdx,%rcx
  0x00007f8ab9141be3: shr    $0x1,%rdx
  0x00007f8ab9141be7: test   $0x1,%ecx
  0x00007f8ab9141bed: je     Stub::oop_arraycopy+518 0x0x7f8ab9141cc6
  0x00007f8ab9141bf3: mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f8ab9141bf7: mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f8ab9141bfb: jmpq   Stub::oop_arraycopy+518 0x0x7f8ab9141cc6
  ;; L_copy_8_bytes:
  0x00007f8ab9141c00: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141c05: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab9141c0a: dec    %rdx
  0x00007f8ab9141c0d: jne    Stub::oop_arraycopy+320 0x0x7f8ab9141c00
  0x00007f8ab9141c0f: jmpq   Stub::oop_arraycopy+534 0x0x7f8ab9141cd6
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab9141c14: incl   0x1684b862(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab9141c1a: xor    %rax,%rax
  0x00007f8ab9141c1d: leaveq 
  0x00007f8ab9141c1e: retq   
  0x00007f8ab9141c1f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141c24: sub    $0x80,%rsp
  0x00007f8ab9141c2b: mov    %rax,0x78(%rsp)
  0x00007f8ab9141c30: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141c35: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141c3a: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141c3f: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141c44: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141c49: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141c4e: mov    %r8,0x38(%rsp)
  0x00007f8ab9141c53: mov    %r9,0x30(%rsp)
  0x00007f8ab9141c58: mov    %r10,0x28(%rsp)
  0x00007f8ab9141c5d: mov    %r11,0x20(%rsp)
  0x00007f8ab9141c62: mov    %r12,0x18(%rsp)
  0x00007f8ab9141c67: mov    %r13,0x10(%rsp)
  0x00007f8ab9141c6c: mov    %r14,0x8(%rsp)
  0x00007f8ab9141c71: mov    %r15,(%rsp)
  0x00007f8ab9141c75: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab9141c7f: movabs $0x7f8ab9141c1f,%rsi
  0x00007f8ab9141c89: mov    %rsp,%rdx
  0x00007f8ab9141c8c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141c90: callq  0x00007f8aceddb9fa
  0x00007f8ab9141c95: hlt    
  0x00007f8ab9141c96: nop
  0x00007f8ab9141c97: nop
  0x00007f8ab9141c98: nop
  0x00007f8ab9141c99: nop
  0x00007f8ab9141c9a: nop
  0x00007f8ab9141c9b: nop
  0x00007f8ab9141c9c: nop
  0x00007f8ab9141c9d: nop
  0x00007f8ab9141c9e: nop
  0x00007f8ab9141c9f: nop
  ;; L_loop:
  0x00007f8ab9141ca0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9141ca5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f8ab9141caa: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f8ab9141caf: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f8ab9141cb4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141cb9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab9141cbe: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9141cc2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9141cc6: sub    $0x4,%rdx
  0x00007f8ab9141cca: jge    Stub::oop_arraycopy+480 0x0x7f8ab9141ca0
  0x00007f8ab9141ccc: add    $0x4,%rdx
  0x00007f8ab9141cd0: jg     Stub::oop_arraycopy+320 0x0x7f8ab9141c00
  ;; L_exit:
  0x00007f8ab9141cd6: lea    (%rsi,%rcx,4),%rcx
  0x00007f8ab9141cda: sub    $0x4,%rcx
  0x00007f8ab9141cde: shr    $0x9,%rsi
  0x00007f8ab9141ce2: shr    $0x9,%rcx
  0x00007f8ab9141ce6: sub    %rsi,%rcx
  0x00007f8ab9141ce9: movabs $0x7f8acbf27000,%rax
  0x00007f8ab9141cf3: add    %rax,%rsi
  ;; L_loop:
  0x00007f8ab9141cf6: movb   $0x0,(%rsi,%rcx,1)
  0x00007f8ab9141cfa: dec    %rcx
  0x00007f8ab9141cfd: jge    Stub::oop_arraycopy+566 0x0x7f8ab9141cf6
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab9141cff: incl   0x1684b777(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab9141d05: xor    %rax,%rax
  0x00007f8ab9141d08: leaveq 
  0x00007f8ab9141d09: retq   

StubRoutines::oop_disjoint_arraycopy_uninit [0x00007f8ab9141d20, 0x00007f8ab9141ecb[ (427 bytes)
  0x00007f8ab9141d20: push   %rbp
  0x00007f8ab9141d21: mov    %rsp,%rbp
  0x00007f8ab9141d24: movslq %edx,%rax
  0x00007f8ab9141d27: cmp    %rdx,%rax
  0x00007f8ab9141d2a: je     Stub::oop_disjoint_arraycopy_uninit+135 0x0x7f8ab9141da7
  0x00007f8ab9141d30: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141d35: sub    $0x80,%rsp
  0x00007f8ab9141d3c: mov    %rax,0x78(%rsp)
  0x00007f8ab9141d41: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141d46: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141d4b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141d50: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141d55: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141d5a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141d5f: mov    %r8,0x38(%rsp)
  0x00007f8ab9141d64: mov    %r9,0x30(%rsp)
  0x00007f8ab9141d69: mov    %r10,0x28(%rsp)
  0x00007f8ab9141d6e: mov    %r11,0x20(%rsp)
  0x00007f8ab9141d73: mov    %r12,0x18(%rsp)
  0x00007f8ab9141d78: mov    %r13,0x10(%rsp)
  0x00007f8ab9141d7d: mov    %r14,0x8(%rsp)
  0x00007f8ab9141d82: mov    %r15,(%rsp)
  0x00007f8ab9141d86: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141d90: movabs $0x7f8ab9141d30,%rsi
  0x00007f8ab9141d9a: mov    %rsp,%rdx
  0x00007f8ab9141d9d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141da1: callq  0x00007f8aceddb9fa
  0x00007f8ab9141da6: hlt    
  ;; Entry:
  0x00007f8ab9141da7: mov    %rsi,%r11
  0x00007f8ab9141daa: mov    %rdx,%rcx
  0x00007f8ab9141dad: shr    $0x1,%rdx
  0x00007f8ab9141db1: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f8ab9141db6: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f8ab9141dbb: neg    %rdx
  0x00007f8ab9141dbe: jmpq   Stub::oop_disjoint_arraycopy_uninit+406 0x0x7f8ab9141eb6
  ;; L_copy_8_bytes:
  0x00007f8ab9141dc3: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141dc8: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab9141dcd: inc    %rdx
  0x00007f8ab9141dd0: jne    Stub::oop_disjoint_arraycopy_uninit+163 0x0x7f8ab9141dc3
  ;; L_copy_4_bytes:
  0x00007f8ab9141dd2: test   $0x1,%ecx
  0x00007f8ab9141dd8: je     Stub::oop_disjoint_arraycopy_uninit+192 0x0x7f8ab9141de0
  0x00007f8ab9141dda: mov    0x8(%rdi),%eax
  0x00007f8ab9141ddd: mov    %eax,0x8(%rsi)
  ;; L_exit:
  0x00007f8ab9141de0: lea    (%r11,%rcx,4),%rcx
  0x00007f8ab9141de4: sub    $0x4,%rcx
  0x00007f8ab9141de8: shr    $0x9,%r11
  0x00007f8ab9141dec: shr    $0x9,%rcx
  0x00007f8ab9141df0: sub    %r11,%rcx
  0x00007f8ab9141df3: movabs $0x7f8acbf27000,%rax
  0x00007f8ab9141dfd: add    %rax,%r11
  ;; L_loop:
  0x00007f8ab9141e00: movb   $0x0,(%r11,%rcx,1)
  0x00007f8ab9141e05: dec    %rcx
  0x00007f8ab9141e08: jge    Stub::oop_disjoint_arraycopy_uninit+224 0x0x7f8ab9141e00
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab9141e0a: incl   0x1684b66c(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab9141e10: xor    %rax,%rax
  0x00007f8ab9141e13: leaveq 
  0x00007f8ab9141e14: retq   
  0x00007f8ab9141e15: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141e1a: sub    $0x80,%rsp
  0x00007f8ab9141e21: mov    %rax,0x78(%rsp)
  0x00007f8ab9141e26: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141e2b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141e30: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141e35: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141e3a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141e3f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141e44: mov    %r8,0x38(%rsp)
  0x00007f8ab9141e49: mov    %r9,0x30(%rsp)
  0x00007f8ab9141e4e: mov    %r10,0x28(%rsp)
  0x00007f8ab9141e53: mov    %r11,0x20(%rsp)
  0x00007f8ab9141e58: mov    %r12,0x18(%rsp)
  0x00007f8ab9141e5d: mov    %r13,0x10(%rsp)
  0x00007f8ab9141e62: mov    %r14,0x8(%rsp)
  0x00007f8ab9141e67: mov    %r15,(%rsp)
  0x00007f8ab9141e6b: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab9141e75: movabs $0x7f8ab9141e15,%rsi
  0x00007f8ab9141e7f: mov    %rsp,%rdx
  0x00007f8ab9141e82: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141e86: callq  0x00007f8aceddb9fa
  0x00007f8ab9141e8b: hlt    
  0x00007f8ab9141e8c: nop
  0x00007f8ab9141e8d: nop
  0x00007f8ab9141e8e: nop
  0x00007f8ab9141e8f: nop
  ;; L_loop:
  0x00007f8ab9141e90: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f8ab9141e95: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f8ab9141e9a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f8ab9141e9f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f8ab9141ea4: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9141ea9: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab9141eae: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab9141eb2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab9141eb6: add    $0x4,%rdx
  0x00007f8ab9141eba: jle    Stub::oop_disjoint_arraycopy_uninit+368 0x0x7f8ab9141e90
  0x00007f8ab9141ebc: sub    $0x4,%rdx
  0x00007f8ab9141ec0: jl     Stub::oop_disjoint_arraycopy_uninit+163 0x0x7f8ab9141dc3
  0x00007f8ab9141ec6: jmpq   Stub::oop_disjoint_arraycopy_uninit+178 0x0x7f8ab9141dd2

StubRoutines::oop_arraycopy_uninit [0x00007f8ab9141ee0, 0x00007f8ab914212a[ (586 bytes)
  0x00007f8ab9141ee0: push   %rbp
  0x00007f8ab9141ee1: mov    %rsp,%rbp
  0x00007f8ab9141ee4: movslq %edx,%rax
  0x00007f8ab9141ee7: cmp    %rdx,%rax
  0x00007f8ab9141eea: je     Stub::oop_arraycopy_uninit+135 0x0x7f8ab9141f67
  0x00007f8ab9141ef0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141ef5: sub    $0x80,%rsp
  0x00007f8ab9141efc: mov    %rax,0x78(%rsp)
  0x00007f8ab9141f01: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141f06: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141f0b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141f10: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141f15: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141f1a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141f1f: mov    %r8,0x38(%rsp)
  0x00007f8ab9141f24: mov    %r9,0x30(%rsp)
  0x00007f8ab9141f29: mov    %r10,0x28(%rsp)
  0x00007f8ab9141f2e: mov    %r11,0x20(%rsp)
  0x00007f8ab9141f33: mov    %r12,0x18(%rsp)
  0x00007f8ab9141f38: mov    %r13,0x10(%rsp)
  0x00007f8ab9141f3d: mov    %r14,0x8(%rsp)
  0x00007f8ab9141f42: mov    %r15,(%rsp)
  0x00007f8ab9141f46: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141f50: movabs $0x7f8ab9141ef0,%rsi
  0x00007f8ab9141f5a: mov    %rsp,%rdx
  0x00007f8ab9141f5d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141f61: callq  0x00007f8aceddb9fa
  0x00007f8ab9141f66: hlt    
  0x00007f8ab9141f67: cmp    %rdi,%rsi
  0x00007f8ab9141f6a: lea    (%rdi,%rdx,4),%rax
  0x00007f8ab9141f6e: jbe    Stub::oop_disjoint_arraycopy_uninit+135 0x0x7f8ab9141da7
  0x00007f8ab9141f74: cmp    %rax,%rsi
  0x00007f8ab9141f77: jae    Stub::oop_disjoint_arraycopy_uninit+135 0x0x7f8ab9141da7
  0x00007f8ab9141f7d: movslq %edx,%rax
  0x00007f8ab9141f80: cmp    %rdx,%rax
  0x00007f8ab9141f83: je     Stub::oop_arraycopy_uninit+288 0x0x7f8ab9142000
  0x00007f8ab9141f89: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9141f8e: sub    $0x80,%rsp
  0x00007f8ab9141f95: mov    %rax,0x78(%rsp)
  0x00007f8ab9141f9a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9141f9f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9141fa4: mov    %rbx,0x60(%rsp)
  0x00007f8ab9141fa9: mov    %rbp,0x50(%rsp)
  0x00007f8ab9141fae: mov    %rsi,0x48(%rsp)
  0x00007f8ab9141fb3: mov    %rdi,0x40(%rsp)
  0x00007f8ab9141fb8: mov    %r8,0x38(%rsp)
  0x00007f8ab9141fbd: mov    %r9,0x30(%rsp)
  0x00007f8ab9141fc2: mov    %r10,0x28(%rsp)
  0x00007f8ab9141fc7: mov    %r11,0x20(%rsp)
  0x00007f8ab9141fcc: mov    %r12,0x18(%rsp)
  0x00007f8ab9141fd1: mov    %r13,0x10(%rsp)
  0x00007f8ab9141fd6: mov    %r14,0x8(%rsp)
  0x00007f8ab9141fdb: mov    %r15,(%rsp)
  0x00007f8ab9141fdf: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9141fe9: movabs $0x7f8ab9141f89,%rsi
  0x00007f8ab9141ff3: mov    %rsp,%rdx
  0x00007f8ab9141ff6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9141ffa: callq  0x00007f8aceddb9fa
  0x00007f8ab9141fff: hlt    
  0x00007f8ab9142000: mov    %rdx,%rcx
  0x00007f8ab9142003: shr    $0x1,%rdx
  0x00007f8ab9142007: test   $0x1,%ecx
  0x00007f8ab914200d: je     Stub::oop_arraycopy_uninit+518 0x0x7f8ab91420e6
  0x00007f8ab9142013: mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f8ab9142017: mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f8ab914201b: jmpq   Stub::oop_arraycopy_uninit+518 0x0x7f8ab91420e6
  ;; L_copy_8_bytes:
  0x00007f8ab9142020: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f8ab9142025: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f8ab914202a: dec    %rdx
  0x00007f8ab914202d: jne    Stub::oop_arraycopy_uninit+320 0x0x7f8ab9142020
  0x00007f8ab914202f: jmpq   Stub::oop_arraycopy_uninit+534 0x0x7f8ab91420f6
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab9142034: incl   0x1684b442(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab914203a: xor    %rax,%rax
  0x00007f8ab914203d: leaveq 
  0x00007f8ab914203e: retq   
  0x00007f8ab914203f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142044: sub    $0x80,%rsp
  0x00007f8ab914204b: mov    %rax,0x78(%rsp)
  0x00007f8ab9142050: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142055: mov    %rdx,0x68(%rsp)
  0x00007f8ab914205a: mov    %rbx,0x60(%rsp)
  0x00007f8ab914205f: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142064: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142069: mov    %rdi,0x40(%rsp)
  0x00007f8ab914206e: mov    %r8,0x38(%rsp)
  0x00007f8ab9142073: mov    %r9,0x30(%rsp)
  0x00007f8ab9142078: mov    %r10,0x28(%rsp)
  0x00007f8ab914207d: mov    %r11,0x20(%rsp)
  0x00007f8ab9142082: mov    %r12,0x18(%rsp)
  0x00007f8ab9142087: mov    %r13,0x10(%rsp)
  0x00007f8ab914208c: mov    %r14,0x8(%rsp)
  0x00007f8ab9142091: mov    %r15,(%rsp)
  0x00007f8ab9142095: movabs $0x7f8acf3a6718,%rdi
  0x00007f8ab914209f: movabs $0x7f8ab914203f,%rsi
  0x00007f8ab91420a9: mov    %rsp,%rdx
  0x00007f8ab91420ac: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91420b0: callq  0x00007f8aceddb9fa
  0x00007f8ab91420b5: hlt    
  0x00007f8ab91420b6: nop
  0x00007f8ab91420b7: nop
  0x00007f8ab91420b8: nop
  0x00007f8ab91420b9: nop
  0x00007f8ab91420ba: nop
  0x00007f8ab91420bb: nop
  0x00007f8ab91420bc: nop
  0x00007f8ab91420bd: nop
  0x00007f8ab91420be: nop
  0x00007f8ab91420bf: nop
  ;; L_loop:
  0x00007f8ab91420c0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f8ab91420c5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f8ab91420ca: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f8ab91420cf: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f8ab91420d4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f8ab91420d9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f8ab91420de: mov    (%rdi,%rdx,8),%rax
  0x00007f8ab91420e2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f8ab91420e6: sub    $0x4,%rdx
  0x00007f8ab91420ea: jge    Stub::oop_arraycopy_uninit+480 0x0x7f8ab91420c0
  0x00007f8ab91420ec: add    $0x4,%rdx
  0x00007f8ab91420f0: jg     Stub::oop_arraycopy_uninit+320 0x0x7f8ab9142020
  ;; L_exit:
  0x00007f8ab91420f6: lea    (%rsi,%rcx,4),%rcx
  0x00007f8ab91420fa: sub    $0x4,%rcx
  0x00007f8ab91420fe: shr    $0x9,%rsi
  0x00007f8ab9142102: shr    $0x9,%rcx
  0x00007f8ab9142106: sub    %rsi,%rcx
  0x00007f8ab9142109: movabs $0x7f8acbf27000,%rax
  0x00007f8ab9142113: add    %rax,%rsi
  ;; L_loop:
  0x00007f8ab9142116: movb   $0x0,(%rsi,%rcx,1)
  0x00007f8ab914211a: dec    %rcx
  0x00007f8ab914211d: jge    Stub::oop_arraycopy_uninit+566 0x0x7f8ab9142116
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f8ab914211f: incl   0x1684b357(%rip)        # 0x00007f8acf98d47c
  0x00007f8ab9142125: xor    %rax,%rax
  0x00007f8ab9142128: leaveq 
  0x00007f8ab9142129: retq   

StubRoutines::checkcast_arraycopy [0x00007f8ab9142140, 0x00007f8ab914255c[ (1052 bytes)
  0x00007f8ab9142140: push   %rbp
  0x00007f8ab9142141: mov    %rsp,%rbp
  0x00007f8ab9142144: cmp    %rdi,%rsi
  0x00007f8ab9142147: lea    (%rdi,%rdx,4),%rax
  0x00007f8ab914214b: jbe    Stub::checkcast_arraycopy+145 0x0x7f8ab91421d1
  0x00007f8ab9142151: cmp    %rax,%rsi
  0x00007f8ab9142154: jae    Stub::checkcast_arraycopy+145 0x0x7f8ab91421d1
  0x00007f8ab914215a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914215f: sub    $0x80,%rsp
  0x00007f8ab9142166: mov    %rax,0x78(%rsp)
  0x00007f8ab914216b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142170: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142175: mov    %rbx,0x60(%rsp)
  0x00007f8ab914217a: mov    %rbp,0x50(%rsp)
  0x00007f8ab914217f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142184: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142189: mov    %r8,0x38(%rsp)
  0x00007f8ab914218e: mov    %r9,0x30(%rsp)
  0x00007f8ab9142193: mov    %r10,0x28(%rsp)
  0x00007f8ab9142198: mov    %r11,0x20(%rsp)
  0x00007f8ab914219d: mov    %r12,0x18(%rsp)
  0x00007f8ab91421a2: mov    %r13,0x10(%rsp)
  0x00007f8ab91421a7: mov    %r14,0x8(%rsp)
  0x00007f8ab91421ac: mov    %r15,(%rsp)
  0x00007f8ab91421b0: movabs $0x7f8acf3a68b8,%rdi
  0x00007f8ab91421ba: movabs $0x7f8ab914215a,%rsi
  0x00007f8ab91421c4: mov    %rsp,%rdx
  0x00007f8ab91421c7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91421cb: callq  0x00007f8aceddb9fa
  0x00007f8ab91421d0: hlt    
  ;; Entry:
  0x00007f8ab91421d1: sub    $0x10,%rsp
  0x00007f8ab91421d5: mov    %r13,(%rsp)
  0x00007f8ab91421d9: mov    %r14,0x8(%rsp)
  0x00007f8ab91421de: movslq %edx,%rax
  0x00007f8ab91421e1: cmp    %rdx,%rax
  0x00007f8ab91421e4: je     Stub::checkcast_arraycopy+289 0x0x7f8ab9142261
  0x00007f8ab91421ea: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91421ef: sub    $0x80,%rsp
  0x00007f8ab91421f6: mov    %rax,0x78(%rsp)
  0x00007f8ab91421fb: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142200: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142205: mov    %rbx,0x60(%rsp)
  0x00007f8ab914220a: mov    %rbp,0x50(%rsp)
  0x00007f8ab914220f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142214: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142219: mov    %r8,0x38(%rsp)
  0x00007f8ab914221e: mov    %r9,0x30(%rsp)
  0x00007f8ab9142223: mov    %r10,0x28(%rsp)
  0x00007f8ab9142228: mov    %r11,0x20(%rsp)
  0x00007f8ab914222d: mov    %r12,0x18(%rsp)
  0x00007f8ab9142232: mov    %r13,0x10(%rsp)
  0x00007f8ab9142237: mov    %r14,0x8(%rsp)
  0x00007f8ab914223c: mov    %r15,(%rsp)
  0x00007f8ab9142240: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab914224a: movabs $0x7f8ab91421ea,%rsi
  0x00007f8ab9142254: mov    %rsp,%rdx
  0x00007f8ab9142257: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914225b: callq  0x00007f8aceddb9fa
  0x00007f8ab9142260: hlt    
  0x00007f8ab9142261: movslq %ecx,%rax
  0x00007f8ab9142264: cmp    %rcx,%rax
  0x00007f8ab9142267: je     Stub::checkcast_arraycopy+420 0x0x7f8ab91422e4
  0x00007f8ab914226d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142272: sub    $0x80,%rsp
  0x00007f8ab9142279: mov    %rax,0x78(%rsp)
  0x00007f8ab914227e: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142283: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142288: mov    %rbx,0x60(%rsp)
  0x00007f8ab914228d: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142292: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142297: mov    %rdi,0x40(%rsp)
  0x00007f8ab914229c: mov    %r8,0x38(%rsp)
  0x00007f8ab91422a1: mov    %r9,0x30(%rsp)
  0x00007f8ab91422a6: mov    %r10,0x28(%rsp)
  0x00007f8ab91422ab: mov    %r11,0x20(%rsp)
  0x00007f8ab91422b0: mov    %r12,0x18(%rsp)
  0x00007f8ab91422b5: mov    %r13,0x10(%rsp)
  0x00007f8ab91422ba: mov    %r14,0x8(%rsp)
  0x00007f8ab91422bf: mov    %r15,(%rsp)
  0x00007f8ab91422c3: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab91422cd: movabs $0x7f8ab914226d,%rsi
  0x00007f8ab91422d7: mov    %rsp,%rdx
  0x00007f8ab91422da: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91422de: callq  0x00007f8aceddb9fa
  0x00007f8ab91422e3: hlt    
  ;; assert consistent ckoff/ckval
  0x00007f8ab91422e4: cmp    0x10(%r8),%ecx
  0x00007f8ab91422e8: je     Stub::checkcast_arraycopy+549 0x0x7f8ab9142365
  0x00007f8ab91422ee: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91422f3: sub    $0x80,%rsp
  0x00007f8ab91422fa: mov    %rax,0x78(%rsp)
  0x00007f8ab91422ff: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142304: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142309: mov    %rbx,0x60(%rsp)
  0x00007f8ab914230e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142313: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142318: mov    %rdi,0x40(%rsp)
  0x00007f8ab914231d: mov    %r8,0x38(%rsp)
  0x00007f8ab9142322: mov    %r9,0x30(%rsp)
  0x00007f8ab9142327: mov    %r10,0x28(%rsp)
  0x00007f8ab914232c: mov    %r11,0x20(%rsp)
  0x00007f8ab9142331: mov    %r12,0x18(%rsp)
  0x00007f8ab9142336: mov    %r13,0x10(%rsp)
  0x00007f8ab914233b: mov    %r14,0x8(%rsp)
  0x00007f8ab9142340: mov    %r15,(%rsp)
  0x00007f8ab9142344: movabs $0x7f8acf3a6900,%rdi
  0x00007f8ab914234e: movabs $0x7f8ab91422ee,%rsi
  0x00007f8ab9142358: mov    %rsp,%rdx
  0x00007f8ab914235b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914235f: callq  0x00007f8aceddb9fa
  0x00007f8ab9142364: hlt    
  0x00007f8ab9142365: lea    (%rdi,%rdx,4),%rdi
  0x00007f8ab9142369: lea    (%rsi,%rdx,4),%r13
  0x00007f8ab914236d: mov    %rdx,%r14
  0x00007f8ab9142370: neg    %rdx
  0x00007f8ab9142373: jne    Stub::checkcast_arraycopy+742 0x0x7f8ab9142426
  0x00007f8ab9142379: xor    %rax,%rax
  0x00007f8ab914237c: jmpq   Stub::checkcast_arraycopy+1035 0x0x7f8ab914254b
  0x00007f8ab9142381: nop
  0x00007f8ab9142382: nop
  0x00007f8ab9142383: nop
  0x00007f8ab9142384: nop
  0x00007f8ab9142385: nop
  0x00007f8ab9142386: nop
  0x00007f8ab9142387: nop
  0x00007f8ab9142388: nop
  0x00007f8ab9142389: nop
  0x00007f8ab914238a: nop
  0x00007f8ab914238b: nop
  0x00007f8ab914238c: nop
  0x00007f8ab914238d: nop
  0x00007f8ab914238e: nop
  0x00007f8ab914238f: nop
  ;; L_store_element:
  0x00007f8ab9142390: push   %r10
  0x00007f8ab9142392: cmp    0x1686be47(%rip),%r12        # 0x00007f8acf9ae1e0
  0x00007f8ab9142399: je     Stub::checkcast_arraycopy+726 0x0x7f8ab9142416
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007f8ab914239f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91423a4: sub    $0x80,%rsp
  0x00007f8ab91423ab: mov    %rax,0x78(%rsp)
  0x00007f8ab91423b0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91423b5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91423ba: mov    %rbx,0x60(%rsp)
  0x00007f8ab91423bf: mov    %rbp,0x50(%rsp)
  0x00007f8ab91423c4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91423c9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91423ce: mov    %r8,0x38(%rsp)
  0x00007f8ab91423d3: mov    %r9,0x30(%rsp)
  0x00007f8ab91423d8: mov    %r10,0x28(%rsp)
  0x00007f8ab91423dd: mov    %r11,0x20(%rsp)
  0x00007f8ab91423e2: mov    %r12,0x18(%rsp)
  0x00007f8ab91423e7: mov    %r13,0x10(%rsp)
  0x00007f8ab91423ec: mov    %r14,0x8(%rsp)
  0x00007f8ab91423f1: mov    %r15,(%rsp)
  0x00007f8ab91423f5: movabs $0x7f8acf2f1e80,%rdi
  0x00007f8ab91423ff: movabs $0x7f8ab914239f,%rsi
  0x00007f8ab9142409: mov    %rsp,%rdx
  0x00007f8ab914240c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142410: callq  0x00007f8aceddb9fa
  0x00007f8ab9142415: hlt    
  0x00007f8ab9142416: pop    %r10
  0x00007f8ab9142418: mov    %eax,0x0(%r13,%rdx,4)
  0x00007f8ab914241d: inc    %rdx
  0x00007f8ab9142420: je     Stub::checkcast_arraycopy+990 0x0x7f8ab914251e
  ;; L_load_element:
  0x00007f8ab9142426: mov    (%rdi,%rdx,4),%eax
  0x00007f8ab9142429: push   %r10
  0x00007f8ab914242b: cmp    0x1686bdae(%rip),%r12        # 0x00007f8acf9ae1e0
  0x00007f8ab9142432: je     Stub::checkcast_arraycopy+879 0x0x7f8ab91424af
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f8ab9142438: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914243d: sub    $0x80,%rsp
  0x00007f8ab9142444: mov    %rax,0x78(%rsp)
  0x00007f8ab9142449: mov    %rcx,0x70(%rsp)
  0x00007f8ab914244e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142453: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142458: mov    %rbp,0x50(%rsp)
  0x00007f8ab914245d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142462: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142467: mov    %r8,0x38(%rsp)
  0x00007f8ab914246c: mov    %r9,0x30(%rsp)
  0x00007f8ab9142471: mov    %r10,0x28(%rsp)
  0x00007f8ab9142476: mov    %r11,0x20(%rsp)
  0x00007f8ab914247b: mov    %r12,0x18(%rsp)
  0x00007f8ab9142480: mov    %r13,0x10(%rsp)
  0x00007f8ab9142485: mov    %r14,0x8(%rsp)
  0x00007f8ab914248a: mov    %r15,(%rsp)
  0x00007f8ab914248e: movabs $0x7f8acf2f2068,%rdi
  0x00007f8ab9142498: movabs $0x7f8ab9142438,%rsi
  0x00007f8ab91424a2: mov    %rsp,%rdx
  0x00007f8ab91424a5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91424a9: callq  0x00007f8aceddb9fa
  0x00007f8ab91424ae: hlt    
  0x00007f8ab91424af: pop    %r10
  0x00007f8ab91424b1: test   %rax,%rax
  0x00007f8ab91424b4: je     Stub::checkcast_arraycopy+592 0x0x7f8ab9142390
  0x00007f8ab91424ba: mov    0x8(%rax),%r11d
  0x00007f8ab91424be: shl    $0x3,%r11
  ;; type_check:
  0x00007f8ab91424c2: cmp    %r8,%r11
  0x00007f8ab91424c5: je     Stub::checkcast_arraycopy+592 0x0x7f8ab9142390
  0x00007f8ab91424cb: cmp    (%r11,%rcx,1),%r8
  0x00007f8ab91424cf: je     Stub::checkcast_arraycopy+592 0x0x7f8ab9142390
  0x00007f8ab91424d5: cmp    $0x20,%ecx
  0x00007f8ab91424d8: jne    Stub::checkcast_arraycopy+974 0x0x7f8ab914250e
  0x00007f8ab91424de: push   %rax
  0x00007f8ab91424df: mov    %r8,%rax
  0x00007f8ab91424e2: push   %rcx
  0x00007f8ab91424e3: push   %rdi
  0x00007f8ab91424e4: movabs $0x7f8acf98d470,%rcx
  0x00007f8ab91424ee: incl   (%rcx)
  0x00007f8ab91424f0: mov    0x28(%r11),%rdi
  0x00007f8ab91424f4: mov    (%rdi),%ecx
  0x00007f8ab91424f6: add    $0x8,%rdi
  0x00007f8ab91424fa: test   %rax,%rax
  0x00007f8ab91424fd: repnz scas %es:(%rdi),%rax
  0x00007f8ab9142500: pop    %rdi
  0x00007f8ab9142501: pop    %rcx
  0x00007f8ab9142502: pop    %rax
  0x00007f8ab9142503: jne    Stub::checkcast_arraycopy+974 0x0x7f8ab914250e
  0x00007f8ab9142505: mov    %r8,0x20(%r11)
  0x00007f8ab9142509: jmpq   Stub::checkcast_arraycopy+592 0x0x7f8ab9142390
  ;; L_miss:
  0x00007f8ab914250e: add    %rdx,%r14
  0x00007f8ab9142511: mov    %r14,%rax
  0x00007f8ab9142514: not    %rax
  0x00007f8ab9142517: jne    Stub::checkcast_arraycopy+993 0x0x7f8ab9142521
  0x00007f8ab9142519: jmpq   Stub::checkcast_arraycopy+1035 0x0x7f8ab914254b
  ;; L_do_card_marks:
  0x00007f8ab914251e: xor    %rax,%rax
  ;; L_post_barrier:
  0x00007f8ab9142521: lea    (%rsi,%r14,4),%r14
  0x00007f8ab9142525: sub    $0x4,%r14
  0x00007f8ab9142529: shr    $0x9,%rsi
  0x00007f8ab914252d: shr    $0x9,%r14
  0x00007f8ab9142531: sub    %rsi,%r14
  0x00007f8ab9142534: movabs $0x7f8acbf27000,%r10
  0x00007f8ab914253e: add    %r10,%rsi
  ;; L_loop:
  0x00007f8ab9142541: movb   $0x0,(%rsi,%r14,1)
  0x00007f8ab9142546: dec    %r14
  0x00007f8ab9142549: jge    Stub::checkcast_arraycopy+1025 0x0x7f8ab9142541
  ;; L_done:
  0x00007f8ab914254b: mov    (%rsp),%r13
  0x00007f8ab914254f: mov    0x8(%rsp),%r14
  ;; inc_counter SharedRuntime::_checkcast_array_copy_ctr
  0x00007f8ab9142554: incl   0x1684af2e(%rip)        # 0x00007f8acf98d488
  0x00007f8ab914255a: leaveq 
  0x00007f8ab914255b: retq   

StubRoutines::checkcast_arraycopy_uninit [0x00007f8ab9142560, 0x00007f8ab914297c[ (1052 bytes)
  0x00007f8ab9142560: push   %rbp
  0x00007f8ab9142561: mov    %rsp,%rbp
  0x00007f8ab9142564: cmp    %rdi,%rsi
  0x00007f8ab9142567: lea    (%rdi,%rdx,4),%rax
  0x00007f8ab914256b: jbe    Stub::checkcast_arraycopy_uninit+145 0x0x7f8ab91425f1
  0x00007f8ab9142571: cmp    %rax,%rsi
  0x00007f8ab9142574: jae    Stub::checkcast_arraycopy_uninit+145 0x0x7f8ab91425f1
  0x00007f8ab914257a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914257f: sub    $0x80,%rsp
  0x00007f8ab9142586: mov    %rax,0x78(%rsp)
  0x00007f8ab914258b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142590: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142595: mov    %rbx,0x60(%rsp)
  0x00007f8ab914259a: mov    %rbp,0x50(%rsp)
  0x00007f8ab914259f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91425a4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91425a9: mov    %r8,0x38(%rsp)
  0x00007f8ab91425ae: mov    %r9,0x30(%rsp)
  0x00007f8ab91425b3: mov    %r10,0x28(%rsp)
  0x00007f8ab91425b8: mov    %r11,0x20(%rsp)
  0x00007f8ab91425bd: mov    %r12,0x18(%rsp)
  0x00007f8ab91425c2: mov    %r13,0x10(%rsp)
  0x00007f8ab91425c7: mov    %r14,0x8(%rsp)
  0x00007f8ab91425cc: mov    %r15,(%rsp)
  0x00007f8ab91425d0: movabs $0x7f8acf3a68b8,%rdi
  0x00007f8ab91425da: movabs $0x7f8ab914257a,%rsi
  0x00007f8ab91425e4: mov    %rsp,%rdx
  0x00007f8ab91425e7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91425eb: callq  0x00007f8aceddb9fa
  0x00007f8ab91425f0: hlt    
  0x00007f8ab91425f1: sub    $0x10,%rsp
  0x00007f8ab91425f5: mov    %r13,(%rsp)
  0x00007f8ab91425f9: mov    %r14,0x8(%rsp)
  0x00007f8ab91425fe: movslq %edx,%rax
  0x00007f8ab9142601: cmp    %rdx,%rax
  0x00007f8ab9142604: je     Stub::checkcast_arraycopy_uninit+289 0x0x7f8ab9142681
  0x00007f8ab914260a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914260f: sub    $0x80,%rsp
  0x00007f8ab9142616: mov    %rax,0x78(%rsp)
  0x00007f8ab914261b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142620: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142625: mov    %rbx,0x60(%rsp)
  0x00007f8ab914262a: mov    %rbp,0x50(%rsp)
  0x00007f8ab914262f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142634: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142639: mov    %r8,0x38(%rsp)
  0x00007f8ab914263e: mov    %r9,0x30(%rsp)
  0x00007f8ab9142643: mov    %r10,0x28(%rsp)
  0x00007f8ab9142648: mov    %r11,0x20(%rsp)
  0x00007f8ab914264d: mov    %r12,0x18(%rsp)
  0x00007f8ab9142652: mov    %r13,0x10(%rsp)
  0x00007f8ab9142657: mov    %r14,0x8(%rsp)
  0x00007f8ab914265c: mov    %r15,(%rsp)
  0x00007f8ab9142660: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab914266a: movabs $0x7f8ab914260a,%rsi
  0x00007f8ab9142674: mov    %rsp,%rdx
  0x00007f8ab9142677: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914267b: callq  0x00007f8aceddb9fa
  0x00007f8ab9142680: hlt    
  0x00007f8ab9142681: movslq %ecx,%rax
  0x00007f8ab9142684: cmp    %rcx,%rax
  0x00007f8ab9142687: je     Stub::checkcast_arraycopy_uninit+420 0x0x7f8ab9142704
  0x00007f8ab914268d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142692: sub    $0x80,%rsp
  0x00007f8ab9142699: mov    %rax,0x78(%rsp)
  0x00007f8ab914269e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91426a3: mov    %rdx,0x68(%rsp)
  0x00007f8ab91426a8: mov    %rbx,0x60(%rsp)
  0x00007f8ab91426ad: mov    %rbp,0x50(%rsp)
  0x00007f8ab91426b2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91426b7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91426bc: mov    %r8,0x38(%rsp)
  0x00007f8ab91426c1: mov    %r9,0x30(%rsp)
  0x00007f8ab91426c6: mov    %r10,0x28(%rsp)
  0x00007f8ab91426cb: mov    %r11,0x20(%rsp)
  0x00007f8ab91426d0: mov    %r12,0x18(%rsp)
  0x00007f8ab91426d5: mov    %r13,0x10(%rsp)
  0x00007f8ab91426da: mov    %r14,0x8(%rsp)
  0x00007f8ab91426df: mov    %r15,(%rsp)
  0x00007f8ab91426e3: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab91426ed: movabs $0x7f8ab914268d,%rsi
  0x00007f8ab91426f7: mov    %rsp,%rdx
  0x00007f8ab91426fa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91426fe: callq  0x00007f8aceddb9fa
  0x00007f8ab9142703: hlt    
  ;; assert consistent ckoff/ckval
  0x00007f8ab9142704: cmp    0x10(%r8),%ecx
  0x00007f8ab9142708: je     Stub::checkcast_arraycopy_uninit+549 0x0x7f8ab9142785
  0x00007f8ab914270e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142713: sub    $0x80,%rsp
  0x00007f8ab914271a: mov    %rax,0x78(%rsp)
  0x00007f8ab914271f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142724: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142729: mov    %rbx,0x60(%rsp)
  0x00007f8ab914272e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142733: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142738: mov    %rdi,0x40(%rsp)
  0x00007f8ab914273d: mov    %r8,0x38(%rsp)
  0x00007f8ab9142742: mov    %r9,0x30(%rsp)
  0x00007f8ab9142747: mov    %r10,0x28(%rsp)
  0x00007f8ab914274c: mov    %r11,0x20(%rsp)
  0x00007f8ab9142751: mov    %r12,0x18(%rsp)
  0x00007f8ab9142756: mov    %r13,0x10(%rsp)
  0x00007f8ab914275b: mov    %r14,0x8(%rsp)
  0x00007f8ab9142760: mov    %r15,(%rsp)
  0x00007f8ab9142764: movabs $0x7f8acf3a6900,%rdi
  0x00007f8ab914276e: movabs $0x7f8ab914270e,%rsi
  0x00007f8ab9142778: mov    %rsp,%rdx
  0x00007f8ab914277b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914277f: callq  0x00007f8aceddb9fa
  0x00007f8ab9142784: hlt    
  0x00007f8ab9142785: lea    (%rdi,%rdx,4),%rdi
  0x00007f8ab9142789: lea    (%rsi,%rdx,4),%r13
  0x00007f8ab914278d: mov    %rdx,%r14
  0x00007f8ab9142790: neg    %rdx
  0x00007f8ab9142793: jne    Stub::checkcast_arraycopy_uninit+742 0x0x7f8ab9142846
  0x00007f8ab9142799: xor    %rax,%rax
  0x00007f8ab914279c: jmpq   Stub::checkcast_arraycopy_uninit+1035 0x0x7f8ab914296b
  0x00007f8ab91427a1: nop
  0x00007f8ab91427a2: nop
  0x00007f8ab91427a3: nop
  0x00007f8ab91427a4: nop
  0x00007f8ab91427a5: nop
  0x00007f8ab91427a6: nop
  0x00007f8ab91427a7: nop
  0x00007f8ab91427a8: nop
  0x00007f8ab91427a9: nop
  0x00007f8ab91427aa: nop
  0x00007f8ab91427ab: nop
  0x00007f8ab91427ac: nop
  0x00007f8ab91427ad: nop
  0x00007f8ab91427ae: nop
  0x00007f8ab91427af: nop
  ;; L_store_element:
  0x00007f8ab91427b0: push   %r10
  0x00007f8ab91427b2: cmp    0x1686ba27(%rip),%r12        # 0x00007f8acf9ae1e0
  0x00007f8ab91427b9: je     Stub::checkcast_arraycopy_uninit+726 0x0x7f8ab9142836
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007f8ab91427bf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91427c4: sub    $0x80,%rsp
  0x00007f8ab91427cb: mov    %rax,0x78(%rsp)
  0x00007f8ab91427d0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91427d5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91427da: mov    %rbx,0x60(%rsp)
  0x00007f8ab91427df: mov    %rbp,0x50(%rsp)
  0x00007f8ab91427e4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91427e9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91427ee: mov    %r8,0x38(%rsp)
  0x00007f8ab91427f3: mov    %r9,0x30(%rsp)
  0x00007f8ab91427f8: mov    %r10,0x28(%rsp)
  0x00007f8ab91427fd: mov    %r11,0x20(%rsp)
  0x00007f8ab9142802: mov    %r12,0x18(%rsp)
  0x00007f8ab9142807: mov    %r13,0x10(%rsp)
  0x00007f8ab914280c: mov    %r14,0x8(%rsp)
  0x00007f8ab9142811: mov    %r15,(%rsp)
  0x00007f8ab9142815: movabs $0x7f8acf2f1e80,%rdi
  0x00007f8ab914281f: movabs $0x7f8ab91427bf,%rsi
  0x00007f8ab9142829: mov    %rsp,%rdx
  0x00007f8ab914282c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142830: callq  0x00007f8aceddb9fa
  0x00007f8ab9142835: hlt    
  0x00007f8ab9142836: pop    %r10
  0x00007f8ab9142838: mov    %eax,0x0(%r13,%rdx,4)
  0x00007f8ab914283d: inc    %rdx
  0x00007f8ab9142840: je     Stub::checkcast_arraycopy_uninit+990 0x0x7f8ab914293e
  ;; L_load_element:
  0x00007f8ab9142846: mov    (%rdi,%rdx,4),%eax
  0x00007f8ab9142849: push   %r10
  0x00007f8ab914284b: cmp    0x1686b98e(%rip),%r12        # 0x00007f8acf9ae1e0
  0x00007f8ab9142852: je     Stub::checkcast_arraycopy_uninit+879 0x0x7f8ab91428cf
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f8ab9142858: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914285d: sub    $0x80,%rsp
  0x00007f8ab9142864: mov    %rax,0x78(%rsp)
  0x00007f8ab9142869: mov    %rcx,0x70(%rsp)
  0x00007f8ab914286e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142873: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142878: mov    %rbp,0x50(%rsp)
  0x00007f8ab914287d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142882: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142887: mov    %r8,0x38(%rsp)
  0x00007f8ab914288c: mov    %r9,0x30(%rsp)
  0x00007f8ab9142891: mov    %r10,0x28(%rsp)
  0x00007f8ab9142896: mov    %r11,0x20(%rsp)
  0x00007f8ab914289b: mov    %r12,0x18(%rsp)
  0x00007f8ab91428a0: mov    %r13,0x10(%rsp)
  0x00007f8ab91428a5: mov    %r14,0x8(%rsp)
  0x00007f8ab91428aa: mov    %r15,(%rsp)
  0x00007f8ab91428ae: movabs $0x7f8acf2f2068,%rdi
  0x00007f8ab91428b8: movabs $0x7f8ab9142858,%rsi
  0x00007f8ab91428c2: mov    %rsp,%rdx
  0x00007f8ab91428c5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91428c9: callq  0x00007f8aceddb9fa
  0x00007f8ab91428ce: hlt    
  0x00007f8ab91428cf: pop    %r10
  0x00007f8ab91428d1: test   %rax,%rax
  0x00007f8ab91428d4: je     Stub::checkcast_arraycopy_uninit+592 0x0x7f8ab91427b0
  0x00007f8ab91428da: mov    0x8(%rax),%r11d
  0x00007f8ab91428de: shl    $0x3,%r11
  ;; type_check:
  0x00007f8ab91428e2: cmp    %r8,%r11
  0x00007f8ab91428e5: je     Stub::checkcast_arraycopy_uninit+592 0x0x7f8ab91427b0
  0x00007f8ab91428eb: cmp    (%r11,%rcx,1),%r8
  0x00007f8ab91428ef: je     Stub::checkcast_arraycopy_uninit+592 0x0x7f8ab91427b0
  0x00007f8ab91428f5: cmp    $0x20,%ecx
  0x00007f8ab91428f8: jne    Stub::checkcast_arraycopy_uninit+974 0x0x7f8ab914292e
  0x00007f8ab91428fe: push   %rax
  0x00007f8ab91428ff: mov    %r8,%rax
  0x00007f8ab9142902: push   %rcx
  0x00007f8ab9142903: push   %rdi
  0x00007f8ab9142904: movabs $0x7f8acf98d470,%rcx
  0x00007f8ab914290e: incl   (%rcx)
  0x00007f8ab9142910: mov    0x28(%r11),%rdi
  0x00007f8ab9142914: mov    (%rdi),%ecx
  0x00007f8ab9142916: add    $0x8,%rdi
  0x00007f8ab914291a: test   %rax,%rax
  0x00007f8ab914291d: repnz scas %es:(%rdi),%rax
  0x00007f8ab9142920: pop    %rdi
  0x00007f8ab9142921: pop    %rcx
  0x00007f8ab9142922: pop    %rax
  0x00007f8ab9142923: jne    Stub::checkcast_arraycopy_uninit+974 0x0x7f8ab914292e
  0x00007f8ab9142925: mov    %r8,0x20(%r11)
  0x00007f8ab9142929: jmpq   Stub::checkcast_arraycopy_uninit+592 0x0x7f8ab91427b0
  ;; L_miss:
  0x00007f8ab914292e: add    %rdx,%r14
  0x00007f8ab9142931: mov    %r14,%rax
  0x00007f8ab9142934: not    %rax
  0x00007f8ab9142937: jne    Stub::checkcast_arraycopy_uninit+993 0x0x7f8ab9142941
  0x00007f8ab9142939: jmpq   Stub::checkcast_arraycopy_uninit+1035 0x0x7f8ab914296b
  ;; L_do_card_marks:
  0x00007f8ab914293e: xor    %rax,%rax
  ;; L_post_barrier:
  0x00007f8ab9142941: lea    (%rsi,%r14,4),%r14
  0x00007f8ab9142945: sub    $0x4,%r14
  0x00007f8ab9142949: shr    $0x9,%rsi
  0x00007f8ab914294d: shr    $0x9,%r14
  0x00007f8ab9142951: sub    %rsi,%r14
  0x00007f8ab9142954: movabs $0x7f8acbf27000,%r10
  0x00007f8ab914295e: add    %r10,%rsi
  ;; L_loop:
  0x00007f8ab9142961: movb   $0x0,(%rsi,%r14,1)
  0x00007f8ab9142966: dec    %r14
  0x00007f8ab9142969: jge    Stub::checkcast_arraycopy_uninit+1025 0x0x7f8ab9142961
  ;; L_done:
  0x00007f8ab914296b: mov    (%rsp),%r13
  0x00007f8ab914296f: mov    0x8(%rsp),%r14
  ;; inc_counter SharedRuntime::_checkcast_array_copy_ctr
  0x00007f8ab9142974: incl   0x1684ab0e(%rip)        # 0x00007f8acf98d488
  0x00007f8ab914297a: leaveq 
  0x00007f8ab914297b: retq   

StubRoutines::unsafe_arraycopy [0x00007f8ab9142980, 0x00007f8ab91429c1[ (65 bytes)
  0x00007f8ab9142980: push   %rbp
  0x00007f8ab9142981: mov    %rsp,%rbp
  ;; inc_counter SharedRuntime::_unsafe_array_copy_ctr
  0x00007f8ab9142984: incl   0x1684ab02(%rip)        # 0x00007f8acf98d48c
  0x00007f8ab914298a: mov    %rdi,%rax
  0x00007f8ab914298d: or     %rsi,%rax
  0x00007f8ab9142990: or     %rdx,%rax
  0x00007f8ab9142993: test   $0x7,%al
  0x00007f8ab9142996: je     Stub::unsafe_arraycopy+56 0x0x7f8ab91429b8
  0x00007f8ab9142998: test   $0x3,%al
  0x00007f8ab914299b: je     Stub::unsafe_arraycopy+47 0x0x7f8ab91429af
  0x00007f8ab914299d: test   $0x1,%al
  0x00007f8ab91429a0: jne    Stub::jbyte_arraycopy+135 0x0x7f8ab9140d67
  ;; L_short_aligned:
  0x00007f8ab91429a6: shr    $0x1,%rdx
  0x00007f8ab91429aa: jmpq   Stub::jshort_arraycopy+135 0x0x7f8ab91410e7
  ;; L_int_aligned:
  0x00007f8ab91429af: shr    $0x2,%rdx
  0x00007f8ab91429b3: jmpq   Stub::jint_arraycopy+135 0x0x7f8ab9141427
  ;; L_long_aligned:
  0x00007f8ab91429b8: shr    $0x3,%rdx
  0x00007f8ab91429bc: jmpq   Stub::jlong_arraycopy+135 0x0x7f8ab91417e7

StubRoutines::generic_arraycopy [0x00007f8ab91429db, 0x00007f8ab9142ed7[ (1276 bytes)
  ;; L_failed_0:
  0x00007f8ab91429db: jmpq   Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab91429e0: push   %rbp
  0x00007f8ab91429e1: mov    %rsp,%rbp
  ;; inc_counter SharedRuntime::_generic_array_copy_ctr
  0x00007f8ab91429e4: incl   0x1684aaa6(%rip)        # 0x00007f8acf98d490
  0x00007f8ab91429ea: test   %rdi,%rdi
  0x00007f8ab91429ed: je     Stub::generic_arraycopy
  0x00007f8ab91429ef: test   %esi,%esi
  0x00007f8ab91429f1: js     Stub::generic_arraycopy
  0x00007f8ab91429f3: test   %rdx,%rdx
  0x00007f8ab91429f6: je     Stub::generic_arraycopy
  0x00007f8ab91429f8: test   %ecx,%ecx
  0x00007f8ab91429fa: js     Stub::generic_arraycopy
  0x00007f8ab91429fc: mov    %r8d,%r11d
  0x00007f8ab91429ff: test   %r11d,%r11d
  0x00007f8ab9142a02: js     Stub::generic_arraycopy
  0x00007f8ab9142a04: mov    0x8(%rdi),%r10d
  0x00007f8ab9142a08: shl    $0x3,%r10
  ;; assert klasses not null {
  0x00007f8ab9142a0c: test   %r10,%r10
  0x00007f8ab9142a0f: jne    Stub::generic_arraycopy+177 0x0x7f8ab9142a8c
  0x00007f8ab9142a15: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142a1a: sub    $0x80,%rsp
  0x00007f8ab9142a21: mov    %rax,0x78(%rsp)
  0x00007f8ab9142a26: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142a2b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142a30: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142a35: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142a3a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142a3f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142a44: mov    %r8,0x38(%rsp)
  0x00007f8ab9142a49: mov    %r9,0x30(%rsp)
  0x00007f8ab9142a4e: mov    %r10,0x28(%rsp)
  0x00007f8ab9142a53: mov    %r11,0x20(%rsp)
  0x00007f8ab9142a58: mov    %r12,0x18(%rsp)
  0x00007f8ab9142a5d: mov    %r13,0x10(%rsp)
  0x00007f8ab9142a62: mov    %r14,0x8(%rsp)
  0x00007f8ab9142a67: mov    %r15,(%rsp)
  0x00007f8ab9142a6b: movabs $0x7f8acf3a6b61,%rdi
  0x00007f8ab9142a75: movabs $0x7f8ab9142a15,%rsi
  0x00007f8ab9142a7f: mov    %rsp,%rdx
  0x00007f8ab9142a82: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142a86: callq  0x00007f8aceddb9fa
  0x00007f8ab9142a8b: hlt    
  0x00007f8ab9142a8c: mov    0x8(%rdx),%eax
  0x00007f8ab9142a8f: shl    $0x3,%rax
  0x00007f8ab9142a93: cmp    $0x0,%rax
  0x00007f8ab9142a97: je     Stub::generic_arraycopy+58 0x0x7f8ab9142a15
  ;; } assert klasses not null done
  0x00007f8ab9142a9d: cmpl   $0x80100c02,0xc(%r10)
  0x00007f8ab9142aa5: je     Stub::generic_arraycopy+636 0x0x7f8ab9142c57
  0x00007f8ab9142aab: mov    0x8(%rdx),%eax
  0x00007f8ab9142aae: shl    $0x3,%rax
  0x00007f8ab9142ab2: cmp    %rax,%r10
  0x00007f8ab9142ab5: jne    Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab9142abb: mov    0xc(%r10),%eax
  0x00007f8ab9142abf: cmp    $0x0,%eax
  0x00007f8ab9142ac2: jge    Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  ;; assert primitive array {
  0x00007f8ab9142ac8: cmp    $0xc0000000,%eax
  0x00007f8ab9142ace: jge    Stub::generic_arraycopy+368 0x0x7f8ab9142b4b
  0x00007f8ab9142ad4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142ad9: sub    $0x80,%rsp
  0x00007f8ab9142ae0: mov    %rax,0x78(%rsp)
  0x00007f8ab9142ae5: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142aea: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142aef: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142af4: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142af9: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142afe: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142b03: mov    %r8,0x38(%rsp)
  0x00007f8ab9142b08: mov    %r9,0x30(%rsp)
  0x00007f8ab9142b0d: mov    %r10,0x28(%rsp)
  0x00007f8ab9142b12: mov    %r11,0x20(%rsp)
  0x00007f8ab9142b17: mov    %r12,0x18(%rsp)
  0x00007f8ab9142b1c: mov    %r13,0x10(%rsp)
  0x00007f8ab9142b21: mov    %r14,0x8(%rsp)
  0x00007f8ab9142b26: mov    %r15,(%rsp)
  0x00007f8ab9142b2a: movabs $0x7f8acf3a6bb0,%rdi
  0x00007f8ab9142b34: movabs $0x7f8ab9142ad4,%rsi
  0x00007f8ab9142b3e: mov    %rsp,%rdx
  0x00007f8ab9142b41: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142b45: callq  0x00007f8aceddb9fa
  0x00007f8ab9142b4a: hlt    
  ;; } assert primitive array done
  ;; arraycopy_range_checks:
  0x00007f8ab9142b4b: mov    %r11d,%r10d
  0x00007f8ab9142b4e: add    %esi,%r10d
  0x00007f8ab9142b51: cmp    0xc(%rdi),%r10d
  0x00007f8ab9142b55: ja     Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab9142b5b: mov    %r11d,%r10d
  0x00007f8ab9142b5e: add    %ecx,%r10d
  0x00007f8ab9142b61: cmp    0xc(%rdx),%r10d
  0x00007f8ab9142b65: ja     Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab9142b6b: movslq %esi,%rsi
  0x00007f8ab9142b6e: movslq %ecx,%rcx
  ;; arraycopy_range_checks done
  0x00007f8ab9142b71: mov    %eax,%r10d
  0x00007f8ab9142b74: shr    $0x10,%r10d
  0x00007f8ab9142b78: and    $0xff,%r10
  0x00007f8ab9142b7f: add    %r10,%rdi
  0x00007f8ab9142b82: add    %r10,%rdx
  ;; choose copy loop based on element size
  0x00007f8ab9142b85: and    $0x3f,%eax
  ;; L_copy_bytes:
  0x00007f8ab9142b88: cmp    $0x0,%eax
  0x00007f8ab9142b8b: jne    Stub::generic_arraycopy+450 0x0x7f8ab9142b9d
  0x00007f8ab9142b8d: lea    (%rdi,%rsi,1),%rdi
  0x00007f8ab9142b91: lea    (%rdx,%rcx,1),%rsi
  0x00007f8ab9142b95: movslq %r11d,%rdx
  0x00007f8ab9142b98: jmpq   Stub::jbyte_arraycopy+135 0x0x7f8ab9140d67
  ;; L_copy_shorts:
  0x00007f8ab9142b9d: cmp    $0x1,%eax
  0x00007f8ab9142ba0: jne    Stub::generic_arraycopy+471 0x0x7f8ab9142bb2
  0x00007f8ab9142ba2: lea    (%rdi,%rsi,2),%rdi
  0x00007f8ab9142ba6: lea    (%rdx,%rcx,2),%rsi
  0x00007f8ab9142baa: movslq %r11d,%rdx
  0x00007f8ab9142bad: jmpq   Stub::jshort_arraycopy+135 0x0x7f8ab91410e7
  ;; L_copy_ints:
  0x00007f8ab9142bb2: cmp    $0x2,%eax
  0x00007f8ab9142bb5: jne    Stub::generic_arraycopy+492 0x0x7f8ab9142bc7
  0x00007f8ab9142bb7: lea    (%rdi,%rsi,4),%rdi
  0x00007f8ab9142bbb: lea    (%rdx,%rcx,4),%rsi
  0x00007f8ab9142bbf: movslq %r11d,%rdx
  0x00007f8ab9142bc2: jmpq   Stub::jint_arraycopy+135 0x0x7f8ab9141427
  ;; L_copy_longs:
  ;; assert long copy {
  0x00007f8ab9142bc7: cmp    $0x3,%eax
  0x00007f8ab9142bca: je     Stub::generic_arraycopy+620 0x0x7f8ab9142c47
  0x00007f8ab9142bd0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142bd5: sub    $0x80,%rsp
  0x00007f8ab9142bdc: mov    %rax,0x78(%rsp)
  0x00007f8ab9142be1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142be6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142beb: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142bf0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142bf5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142bfa: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142bff: mov    %r8,0x38(%rsp)
  0x00007f8ab9142c04: mov    %r9,0x30(%rsp)
  0x00007f8ab9142c09: mov    %r10,0x28(%rsp)
  0x00007f8ab9142c0e: mov    %r11,0x20(%rsp)
  0x00007f8ab9142c13: mov    %r12,0x18(%rsp)
  0x00007f8ab9142c18: mov    %r13,0x10(%rsp)
  0x00007f8ab9142c1d: mov    %r14,0x8(%rsp)
  0x00007f8ab9142c22: mov    %r15,(%rsp)
  0x00007f8ab9142c26: movabs $0x7f8acf3a6c50,%rdi
  0x00007f8ab9142c30: movabs $0x7f8ab9142bd0,%rsi
  0x00007f8ab9142c3a: mov    %rsp,%rdx
  0x00007f8ab9142c3d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142c41: callq  0x00007f8aceddb9fa
  0x00007f8ab9142c46: hlt    
  ;; } assert long copy done
  0x00007f8ab9142c47: lea    (%rdi,%rsi,8),%rdi
  0x00007f8ab9142c4b: lea    (%rdx,%rcx,8),%rsi
  0x00007f8ab9142c4f: movslq %r11d,%rdx
  0x00007f8ab9142c52: jmpq   Stub::jlong_arraycopy+135 0x0x7f8ab91417e7
  ;; L_objArray:
  0x00007f8ab9142c57: mov    0x8(%rdx),%eax
  0x00007f8ab9142c5a: shl    $0x3,%rax
  0x00007f8ab9142c5e: cmp    %rax,%r10
  0x00007f8ab9142c61: jne    Stub::generic_arraycopy+708 0x0x7f8ab9142c9f
  ;; arraycopy_range_checks:
  0x00007f8ab9142c67: mov    %r11d,%r10d
  0x00007f8ab9142c6a: add    %esi,%r10d
  0x00007f8ab9142c6d: cmp    0xc(%rdi),%r10d
  0x00007f8ab9142c71: ja     Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab9142c77: mov    %r11d,%r10d
  0x00007f8ab9142c7a: add    %ecx,%r10d
  0x00007f8ab9142c7d: cmp    0xc(%rdx),%r10d
  0x00007f8ab9142c81: ja     Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab9142c87: movslq %esi,%rsi
  0x00007f8ab9142c8a: movslq %ecx,%rcx
  ;; arraycopy_range_checks done
  0x00007f8ab9142c8d: lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f8ab9142c92: lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f8ab9142c97: movslq %r11d,%rdx
  ;; L_plain_copy:
  0x00007f8ab9142c9a: jmpq   Stub::oop_arraycopy+135 0x0x7f8ab9141b47
  ;; L_checkcast_copy:
  0x00007f8ab9142c9f: cmpl   $0x80100c02,0xc(%rax)
  0x00007f8ab9142ca6: jne    Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  ;; arraycopy_range_checks:
  0x00007f8ab9142cac: mov    %r11d,%eax
  0x00007f8ab9142caf: add    %esi,%eax
  0x00007f8ab9142cb1: cmp    0xc(%rdi),%eax
  0x00007f8ab9142cb4: ja     Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab9142cba: mov    %r11d,%eax
  0x00007f8ab9142cbd: add    %ecx,%eax
  0x00007f8ab9142cbf: cmp    0xc(%rdx),%eax
  0x00007f8ab9142cc2: ja     Stub::generic_arraycopy+1268 0x0x7f8ab9142ecf
  0x00007f8ab9142cc8: movslq %esi,%rsi
  0x00007f8ab9142ccb: movslq %ecx,%rcx
  ;; arraycopy_range_checks done
  0x00007f8ab9142cce: mov    0x8(%rdx),%r11d
  0x00007f8ab9142cd2: shl    $0x3,%r11
  0x00007f8ab9142cd6: lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f8ab9142cdb: lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f8ab9142ce0: mov    %r8d,%edx
  0x00007f8ab9142ce3: movslq %edx,%rcx
  0x00007f8ab9142ce6: cmp    %rdx,%rcx
  0x00007f8ab9142ce9: je     Stub::generic_arraycopy+907 0x0x7f8ab9142d66
  0x00007f8ab9142cef: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142cf4: sub    $0x80,%rsp
  0x00007f8ab9142cfb: mov    %rax,0x78(%rsp)
  0x00007f8ab9142d00: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142d05: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142d0a: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142d0f: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142d14: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142d19: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142d1e: mov    %r8,0x38(%rsp)
  0x00007f8ab9142d23: mov    %r9,0x30(%rsp)
  0x00007f8ab9142d28: mov    %r10,0x28(%rsp)
  0x00007f8ab9142d2d: mov    %r11,0x20(%rsp)
  0x00007f8ab9142d32: mov    %r12,0x18(%rsp)
  0x00007f8ab9142d37: mov    %r13,0x10(%rsp)
  0x00007f8ab9142d3c: mov    %r14,0x8(%rsp)
  0x00007f8ab9142d41: mov    %r15,(%rsp)
  0x00007f8ab9142d45: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9142d4f: movabs $0x7f8ab9142cef,%rsi
  0x00007f8ab9142d59: mov    %rsp,%rdx
  0x00007f8ab9142d5c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142d60: callq  0x00007f8aceddb9fa
  0x00007f8ab9142d65: hlt    
  0x00007f8ab9142d66: mov    0x10(%r11),%ecx
  0x00007f8ab9142d6a: movslq %ecx,%rax
  0x00007f8ab9142d6d: cmp    %rcx,%rax
  0x00007f8ab9142d70: je     Stub::generic_arraycopy+1042 0x0x7f8ab9142ded
  0x00007f8ab9142d76: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142d7b: sub    $0x80,%rsp
  0x00007f8ab9142d82: mov    %rax,0x78(%rsp)
  0x00007f8ab9142d87: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142d8c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142d91: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142d96: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142d9b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142da0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142da5: mov    %r8,0x38(%rsp)
  0x00007f8ab9142daa: mov    %r9,0x30(%rsp)
  0x00007f8ab9142daf: mov    %r10,0x28(%rsp)
  0x00007f8ab9142db4: mov    %r11,0x20(%rsp)
  0x00007f8ab9142db9: mov    %r12,0x18(%rsp)
  0x00007f8ab9142dbe: mov    %r13,0x10(%rsp)
  0x00007f8ab9142dc3: mov    %r14,0x8(%rsp)
  0x00007f8ab9142dc8: mov    %r15,(%rsp)
  0x00007f8ab9142dcc: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9142dd6: movabs $0x7f8ab9142d76,%rsi
  0x00007f8ab9142de0: mov    %rsp,%rdx
  0x00007f8ab9142de3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142de7: callq  0x00007f8aceddb9fa
  0x00007f8ab9142dec: hlt    
  ;; type_check:
  0x00007f8ab9142ded: cmp    %r11,%r10
  0x00007f8ab9142df0: je     Stub::generic_arraycopy+703 0x0x7f8ab9142c9a
  0x00007f8ab9142df6: cmp    (%r10,%rcx,1),%r11
  0x00007f8ab9142dfa: je     Stub::generic_arraycopy+703 0x0x7f8ab9142c9a
  0x00007f8ab9142e00: cmp    $0x20,%ecx
  0x00007f8ab9142e03: jne    Stub::generic_arraycopy+1118 0x0x7f8ab9142e39
  0x00007f8ab9142e09: push   %rax
  0x00007f8ab9142e0a: mov    %r11,%rax
  0x00007f8ab9142e0d: push   %rcx
  0x00007f8ab9142e0e: push   %rdi
  0x00007f8ab9142e0f: movabs $0x7f8acf98d470,%rcx
  0x00007f8ab9142e19: incl   (%rcx)
  0x00007f8ab9142e1b: mov    0x28(%r10),%rdi
  0x00007f8ab9142e1f: mov    (%rdi),%ecx
  0x00007f8ab9142e21: add    $0x8,%rdi
  0x00007f8ab9142e25: test   %rax,%rax
  0x00007f8ab9142e28: repnz scas %es:(%rdi),%rax
  0x00007f8ab9142e2b: pop    %rdi
  0x00007f8ab9142e2c: pop    %rcx
  0x00007f8ab9142e2d: pop    %rax
  0x00007f8ab9142e2e: jne    Stub::generic_arraycopy+1118 0x0x7f8ab9142e39
  0x00007f8ab9142e30: mov    %r11,0x20(%r10)
  0x00007f8ab9142e34: jmpq   Stub::generic_arraycopy+703 0x0x7f8ab9142c9a
  ;; L_miss:
  0x00007f8ab9142e39: mov    0xe8(%r11),%r11
  0x00007f8ab9142e40: mov    0x10(%r11),%ecx
  0x00007f8ab9142e44: movslq %ecx,%rax
  0x00007f8ab9142e47: cmp    %rcx,%rax
  0x00007f8ab9142e4a: je     Stub::generic_arraycopy+1260 0x0x7f8ab9142ec7
  0x00007f8ab9142e50: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9142e55: sub    $0x80,%rsp
  0x00007f8ab9142e5c: mov    %rax,0x78(%rsp)
  0x00007f8ab9142e61: mov    %rcx,0x70(%rsp)
  0x00007f8ab9142e66: mov    %rdx,0x68(%rsp)
  0x00007f8ab9142e6b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9142e70: mov    %rbp,0x50(%rsp)
  0x00007f8ab9142e75: mov    %rsi,0x48(%rsp)
  0x00007f8ab9142e7a: mov    %rdi,0x40(%rsp)
  0x00007f8ab9142e7f: mov    %r8,0x38(%rsp)
  0x00007f8ab9142e84: mov    %r9,0x30(%rsp)
  0x00007f8ab9142e89: mov    %r10,0x28(%rsp)
  0x00007f8ab9142e8e: mov    %r11,0x20(%rsp)
  0x00007f8ab9142e93: mov    %r12,0x18(%rsp)
  0x00007f8ab9142e98: mov    %r13,0x10(%rsp)
  0x00007f8ab9142e9d: mov    %r14,0x8(%rsp)
  0x00007f8ab9142ea2: mov    %r15,(%rsp)
  0x00007f8ab9142ea6: movabs $0x7f8acf3a6600,%rdi
  0x00007f8ab9142eb0: movabs $0x7f8ab9142e50,%rsi
  0x00007f8ab9142eba: mov    %rsp,%rdx
  0x00007f8ab9142ebd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9142ec1: callq  0x00007f8aceddb9fa
  0x00007f8ab9142ec6: hlt    
  0x00007f8ab9142ec7: mov    %r11,%r8
  0x00007f8ab9142eca: jmpq   Stub::checkcast_arraycopy+145 0x0x7f8ab91421d1
  ;; L_failed:
  0x00007f8ab9142ecf: xor    %rax,%rax
  0x00007f8ab9142ed2: not    %rax
  0x00007f8ab9142ed5: leaveq 
  0x00007f8ab9142ed6: retq   

StubRoutines::jbyte_fill [0x00007f8ab9142ee0, 0x00007f8ab9142faa[ (202 bytes)
  ;; Entry:
  0x00007f8ab9142ee0: push   %rbp
  0x00007f8ab9142ee1: mov    %rsp,%rbp
  0x00007f8ab9142ee4: and    $0xff,%esi
  0x00007f8ab9142eea: mov    %esi,%eax
  0x00007f8ab9142eec: shl    $0x8,%eax
  0x00007f8ab9142eef: or     %eax,%esi
  0x00007f8ab9142ef1: mov    %esi,%eax
  0x00007f8ab9142ef3: shl    $0x10,%eax
  0x00007f8ab9142ef6: or     %eax,%esi
  0x00007f8ab9142ef8: cmp    $0x8,%edx
  0x00007f8ab9142efb: jb     Stub::jbyte_fill+160 0x0x7f8ab9142f80
  0x00007f8ab9142f01: test   $0x1,%rdi
  0x00007f8ab9142f08: je     Stub::jbyte_fill+51 0x0x7f8ab9142f13
  0x00007f8ab9142f0a: mov    %sil,(%rdi)
  0x00007f8ab9142f0d: inc    %rdi
  0x00007f8ab9142f10: dec    %rdx
  ;; L_skip_align1:
  0x00007f8ab9142f13: test   $0x2,%rdi
  0x00007f8ab9142f1a: je     Stub::jbyte_fill+70 0x0x7f8ab9142f26
  0x00007f8ab9142f1c: mov    %si,(%rdi)
  0x00007f8ab9142f1f: add    $0x2,%rdi
  0x00007f8ab9142f23: sub    $0x2,%edx
  ;; L_skip_align2:
  0x00007f8ab9142f26: test   $0x4,%rdi
  0x00007f8ab9142f2d: je     Stub::jbyte_fill+88 0x0x7f8ab9142f38
  0x00007f8ab9142f2f: mov    %esi,(%rdi)
  0x00007f8ab9142f31: add    $0x4,%rdi
  0x00007f8ab9142f35: sub    $0x4,%edx
  ;; L_fill_32_bytes:
  0x00007f8ab9142f38: vmovd  %esi,%xmm0
  0x00007f8ab9142f3c: vpshufd $0x0,%xmm0,%xmm0
  0x00007f8ab9142f41: sub    $0x20,%edx
  0x00007f8ab9142f44: jl     Stub::jbyte_fill+140 0x0x7f8ab9142f6c
  0x00007f8ab9142f4a: nop
  0x00007f8ab9142f4b: nop
  0x00007f8ab9142f4c: nop
  0x00007f8ab9142f4d: nop
  0x00007f8ab9142f4e: nop
  0x00007f8ab9142f4f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f8ab9142f50: vmovq  %xmm0,(%rdi)
  0x00007f8ab9142f54: vmovq  %xmm0,0x8(%rdi)
  0x00007f8ab9142f59: vmovq  %xmm0,0x10(%rdi)
  0x00007f8ab9142f5e: vmovq  %xmm0,0x18(%rdi)
  0x00007f8ab9142f63: add    $0x20,%rdi
  0x00007f8ab9142f67: sub    $0x20,%edx
  0x00007f8ab9142f6a: jge    Stub::jbyte_fill+112 0x0x7f8ab9142f50
  ;; L_check_fill_8_bytes:
  0x00007f8ab9142f6c: add    $0x20,%edx
  0x00007f8ab9142f6f: je     Stub::jbyte_fill+200 0x0x7f8ab9142fa8
  0x00007f8ab9142f71: jmp    Stub::jbyte_fill+155 0x0x7f8ab9142f7b
  ;; L_fill_8_bytes_loop:
  0x00007f8ab9142f73: vmovq  %xmm0,(%rdi)
  0x00007f8ab9142f77: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f8ab9142f7b: sub    $0x8,%edx
  0x00007f8ab9142f7e: jge    Stub::jbyte_fill+147 0x0x7f8ab9142f73
  ;; L_fill_4_bytes:
  0x00007f8ab9142f80: test   $0x4,%edx
  0x00007f8ab9142f86: je     Stub::jbyte_fill+174 0x0x7f8ab9142f8e
  0x00007f8ab9142f88: mov    %esi,(%rdi)
  0x00007f8ab9142f8a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f8ab9142f8e: test   $0x2,%edx
  0x00007f8ab9142f94: je     Stub::jbyte_fill+189 0x0x7f8ab9142f9d
  0x00007f8ab9142f96: mov    %si,(%rdi)
  0x00007f8ab9142f99: add    $0x2,%rdi
  ;; L_fill_byte:
  0x00007f8ab9142f9d: test   $0x1,%edx
  0x00007f8ab9142fa3: je     Stub::jbyte_fill+200 0x0x7f8ab9142fa8
  0x00007f8ab9142fa5: mov    %sil,(%rdi)
  ;; L_exit:
  0x00007f8ab9142fa8: leaveq 
  0x00007f8ab9142fa9: retq   

StubRoutines::jshort_fill [0x00007f8ab9142fc0, 0x00007f8ab914306b[ (171 bytes)
  ;; Entry:
  0x00007f8ab9142fc0: push   %rbp
  0x00007f8ab9142fc1: mov    %rsp,%rbp
  0x00007f8ab9142fc4: and    $0xffff,%esi
  0x00007f8ab9142fca: mov    %esi,%eax
  0x00007f8ab9142fcc: shl    $0x10,%eax
  0x00007f8ab9142fcf: or     %eax,%esi
  0x00007f8ab9142fd1: cmp    $0x4,%edx
  0x00007f8ab9142fd4: jb     Stub::jshort_fill+144 0x0x7f8ab9143050
  0x00007f8ab9142fda: test   $0x2,%rdi
  0x00007f8ab9142fe1: je     Stub::jshort_fill+45 0x0x7f8ab9142fed
  0x00007f8ab9142fe3: mov    %si,(%rdi)
  0x00007f8ab9142fe6: add    $0x2,%rdi
  0x00007f8ab9142fea: sub    $0x1,%edx
  ;; L_skip_align2:
  0x00007f8ab9142fed: test   $0x4,%rdi
  0x00007f8ab9142ff4: je     Stub::jshort_fill+63 0x0x7f8ab9142fff
  0x00007f8ab9142ff6: mov    %esi,(%rdi)
  0x00007f8ab9142ff8: add    $0x4,%rdi
  0x00007f8ab9142ffc: sub    $0x2,%edx
  ;; L_fill_32_bytes:
  0x00007f8ab9142fff: vmovd  %esi,%xmm0
  0x00007f8ab9143003: vpshufd $0x0,%xmm0,%xmm0
  0x00007f8ab9143008: sub    $0x10,%edx
  0x00007f8ab914300b: jl     Stub::jshort_fill+124 0x0x7f8ab914303c
  0x00007f8ab9143011: nop
  0x00007f8ab9143012: nop
  0x00007f8ab9143013: nop
  0x00007f8ab9143014: nop
  0x00007f8ab9143015: nop
  0x00007f8ab9143016: nop
  0x00007f8ab9143017: nop
  0x00007f8ab9143018: nop
  0x00007f8ab9143019: nop
  0x00007f8ab914301a: nop
  0x00007f8ab914301b: nop
  0x00007f8ab914301c: nop
  0x00007f8ab914301d: nop
  0x00007f8ab914301e: nop
  0x00007f8ab914301f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f8ab9143020: vmovq  %xmm0,(%rdi)
  0x00007f8ab9143024: vmovq  %xmm0,0x8(%rdi)
  0x00007f8ab9143029: vmovq  %xmm0,0x10(%rdi)
  0x00007f8ab914302e: vmovq  %xmm0,0x18(%rdi)
  0x00007f8ab9143033: add    $0x20,%rdi
  0x00007f8ab9143037: sub    $0x10,%edx
  0x00007f8ab914303a: jge    Stub::jshort_fill+96 0x0x7f8ab9143020
  ;; L_check_fill_8_bytes:
  0x00007f8ab914303c: add    $0x10,%edx
  0x00007f8ab914303f: je     Stub::jshort_fill+169 0x0x7f8ab9143069
  0x00007f8ab9143041: jmp    Stub::jshort_fill+139 0x0x7f8ab914304b
  ;; L_fill_8_bytes_loop:
  0x00007f8ab9143043: vmovq  %xmm0,(%rdi)
  0x00007f8ab9143047: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f8ab914304b: sub    $0x4,%edx
  0x00007f8ab914304e: jge    Stub::jshort_fill+131 0x0x7f8ab9143043
  ;; L_fill_4_bytes:
  0x00007f8ab9143050: test   $0x2,%edx
  0x00007f8ab9143056: je     Stub::jshort_fill+158 0x0x7f8ab914305e
  0x00007f8ab9143058: mov    %esi,(%rdi)
  0x00007f8ab914305a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f8ab914305e: test   $0x1,%edx
  0x00007f8ab9143064: je     Stub::jshort_fill+169 0x0x7f8ab9143069
  0x00007f8ab9143066: mov    %si,(%rdi)
  ;; L_fill_byte:
  ;; L_exit:
  0x00007f8ab9143069: leaveq 
  0x00007f8ab914306a: retq   

StubRoutines::jint_fill [0x00007f8ab9143080, 0x00007f8ab91430fc[ (124 bytes)
  ;; Entry:
  0x00007f8ab9143080: push   %rbp
  0x00007f8ab9143081: mov    %rsp,%rbp
  0x00007f8ab9143084: cmp    $0x2,%edx
  0x00007f8ab9143087: jb     Stub::jint_fill+112 0x0x7f8ab91430f0
  0x00007f8ab914308d: test   $0x4,%rdi
  0x00007f8ab9143094: je     Stub::jint_fill+31 0x0x7f8ab914309f
  0x00007f8ab9143096: mov    %esi,(%rdi)
  0x00007f8ab9143098: add    $0x4,%rdi
  0x00007f8ab914309c: sub    $0x1,%edx
  ;; L_fill_32_bytes:
  0x00007f8ab914309f: vmovd  %esi,%xmm0
  0x00007f8ab91430a3: vpshufd $0x0,%xmm0,%xmm0
  0x00007f8ab91430a8: sub    $0x8,%edx
  0x00007f8ab91430ab: jl     Stub::jint_fill+92 0x0x7f8ab91430dc
  0x00007f8ab91430b1: nop
  0x00007f8ab91430b2: nop
  0x00007f8ab91430b3: nop
  0x00007f8ab91430b4: nop
  0x00007f8ab91430b5: nop
  0x00007f8ab91430b6: nop
  0x00007f8ab91430b7: nop
  0x00007f8ab91430b8: nop
  0x00007f8ab91430b9: nop
  0x00007f8ab91430ba: nop
  0x00007f8ab91430bb: nop
  0x00007f8ab91430bc: nop
  0x00007f8ab91430bd: nop
  0x00007f8ab91430be: nop
  0x00007f8ab91430bf: nop
  ;; L_fill_32_bytes_loop:
  0x00007f8ab91430c0: vmovq  %xmm0,(%rdi)
  0x00007f8ab91430c4: vmovq  %xmm0,0x8(%rdi)
  0x00007f8ab91430c9: vmovq  %xmm0,0x10(%rdi)
  0x00007f8ab91430ce: vmovq  %xmm0,0x18(%rdi)
  0x00007f8ab91430d3: add    $0x20,%rdi
  0x00007f8ab91430d7: sub    $0x8,%edx
  0x00007f8ab91430da: jge    Stub::jint_fill+64 0x0x7f8ab91430c0
  ;; L_check_fill_8_bytes:
  0x00007f8ab91430dc: add    $0x8,%edx
  0x00007f8ab91430df: je     Stub::jint_fill+122 0x0x7f8ab91430fa
  0x00007f8ab91430e1: jmp    Stub::jint_fill+107 0x0x7f8ab91430eb
  ;; L_fill_8_bytes_loop:
  0x00007f8ab91430e3: vmovq  %xmm0,(%rdi)
  0x00007f8ab91430e7: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f8ab91430eb: sub    $0x2,%edx
  0x00007f8ab91430ee: jge    Stub::jint_fill+99 0x0x7f8ab91430e3
  ;; L_fill_4_bytes:
  0x00007f8ab91430f0: test   $0x1,%edx
  0x00007f8ab91430f6: je     Stub::jint_fill+122 0x0x7f8ab91430fa
  0x00007f8ab91430f8: mov    %esi,(%rdi)
  ;; L_fill_2_bytes:
  ;; L_exit:
  0x00007f8ab91430fa: leaveq 
  0x00007f8ab91430fb: retq   

StubRoutines::arrayof_jbyte_fill [0x00007f8ab9143100, 0x00007f8ab91431aa[ (170 bytes)
  ;; Entry:
  0x00007f8ab9143100: push   %rbp
  0x00007f8ab9143101: mov    %rsp,%rbp
  0x00007f8ab9143104: and    $0xff,%esi
  0x00007f8ab914310a: mov    %esi,%eax
  0x00007f8ab914310c: shl    $0x8,%eax
  0x00007f8ab914310f: or     %eax,%esi
  0x00007f8ab9143111: mov    %esi,%eax
  0x00007f8ab9143113: shl    $0x10,%eax
  0x00007f8ab9143116: or     %eax,%esi
  0x00007f8ab9143118: cmp    $0x8,%edx
  0x00007f8ab914311b: jb     Stub::arrayof_jbyte_fill+128 0x0x7f8ab9143180
  0x00007f8ab9143121: test   $0x4,%rdi
  0x00007f8ab9143128: je     Stub::arrayof_jbyte_fill+51 0x0x7f8ab9143133
  0x00007f8ab914312a: mov    %esi,(%rdi)
  0x00007f8ab914312c: add    $0x4,%rdi
  0x00007f8ab9143130: sub    $0x4,%edx
  ;; L_fill_32_bytes:
  0x00007f8ab9143133: vmovd  %esi,%xmm0
  0x00007f8ab9143137: vpshufd $0x0,%xmm0,%xmm0
  0x00007f8ab914313c: sub    $0x20,%edx
  0x00007f8ab914313f: jl     Stub::arrayof_jbyte_fill+108 0x0x7f8ab914316c
  0x00007f8ab9143145: nop
  0x00007f8ab9143146: nop
  0x00007f8ab9143147: nop
  0x00007f8ab9143148: nop
  0x00007f8ab9143149: nop
  0x00007f8ab914314a: nop
  0x00007f8ab914314b: nop
  0x00007f8ab914314c: nop
  0x00007f8ab914314d: nop
  0x00007f8ab914314e: nop
  0x00007f8ab914314f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f8ab9143150: vmovq  %xmm0,(%rdi)
  0x00007f8ab9143154: vmovq  %xmm0,0x8(%rdi)
  0x00007f8ab9143159: vmovq  %xmm0,0x10(%rdi)
  0x00007f8ab914315e: vmovq  %xmm0,0x18(%rdi)
  0x00007f8ab9143163: add    $0x20,%rdi
  0x00007f8ab9143167: sub    $0x20,%edx
  0x00007f8ab914316a: jge    Stub::arrayof_jbyte_fill+80 0x0x7f8ab9143150
  ;; L_check_fill_8_bytes:
  0x00007f8ab914316c: add    $0x20,%edx
  0x00007f8ab914316f: je     Stub::arrayof_jbyte_fill+168 0x0x7f8ab91431a8
  0x00007f8ab9143171: jmp    Stub::arrayof_jbyte_fill+123 0x0x7f8ab914317b
  ;; L_fill_8_bytes_loop:
  0x00007f8ab9143173: vmovq  %xmm0,(%rdi)
  0x00007f8ab9143177: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f8ab914317b: sub    $0x8,%edx
  0x00007f8ab914317e: jge    Stub::arrayof_jbyte_fill+115 0x0x7f8ab9143173
  ;; L_fill_4_bytes:
  0x00007f8ab9143180: test   $0x4,%edx
  0x00007f8ab9143186: je     Stub::arrayof_jbyte_fill+142 0x0x7f8ab914318e
  0x00007f8ab9143188: mov    %esi,(%rdi)
  0x00007f8ab914318a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f8ab914318e: test   $0x2,%edx
  0x00007f8ab9143194: je     Stub::arrayof_jbyte_fill+157 0x0x7f8ab914319d
  0x00007f8ab9143196: mov    %si,(%rdi)
  0x00007f8ab9143199: add    $0x2,%rdi
  ;; L_fill_byte:
  0x00007f8ab914319d: test   $0x1,%edx
  0x00007f8ab91431a3: je     Stub::arrayof_jbyte_fill+168 0x0x7f8ab91431a8
  0x00007f8ab91431a5: mov    %sil,(%rdi)
  ;; L_exit:
  0x00007f8ab91431a8: leaveq 
  0x00007f8ab91431a9: retq   

StubRoutines::arrayof_jshort_fill [0x00007f8ab91431c0, 0x00007f8ab914324b[ (139 bytes)
  ;; Entry:
  0x00007f8ab91431c0: push   %rbp
  0x00007f8ab91431c1: mov    %rsp,%rbp
  0x00007f8ab91431c4: and    $0xffff,%esi
  0x00007f8ab91431ca: mov    %esi,%eax
  0x00007f8ab91431cc: shl    $0x10,%eax
  0x00007f8ab91431cf: or     %eax,%esi
  0x00007f8ab91431d1: cmp    $0x4,%edx
  0x00007f8ab91431d4: jb     Stub::arrayof_jshort_fill+112 0x0x7f8ab9143230
  0x00007f8ab91431da: test   $0x4,%rdi
  0x00007f8ab91431e1: je     Stub::arrayof_jshort_fill+44 0x0x7f8ab91431ec
  0x00007f8ab91431e3: mov    %esi,(%rdi)
  0x00007f8ab91431e5: add    $0x4,%rdi
  0x00007f8ab91431e9: sub    $0x2,%edx
  ;; L_fill_32_bytes:
  0x00007f8ab91431ec: vmovd  %esi,%xmm0
  0x00007f8ab91431f0: vpshufd $0x0,%xmm0,%xmm0
  0x00007f8ab91431f5: sub    $0x10,%edx
  0x00007f8ab91431f8: jl     Stub::arrayof_jshort_fill+92 0x0x7f8ab914321c
  0x00007f8ab91431fe: nop
  0x00007f8ab91431ff: nop
  ;; L_fill_32_bytes_loop:
  0x00007f8ab9143200: vmovq  %xmm0,(%rdi)
  0x00007f8ab9143204: vmovq  %xmm0,0x8(%rdi)
  0x00007f8ab9143209: vmovq  %xmm0,0x10(%rdi)
  0x00007f8ab914320e: vmovq  %xmm0,0x18(%rdi)
  0x00007f8ab9143213: add    $0x20,%rdi
  0x00007f8ab9143217: sub    $0x10,%edx
  0x00007f8ab914321a: jge    Stub::arrayof_jshort_fill+64 0x0x7f8ab9143200
  ;; L_check_fill_8_bytes:
  0x00007f8ab914321c: add    $0x10,%edx
  0x00007f8ab914321f: je     Stub::arrayof_jshort_fill+137 0x0x7f8ab9143249
  0x00007f8ab9143221: jmp    Stub::arrayof_jshort_fill+107 0x0x7f8ab914322b
  ;; L_fill_8_bytes_loop:
  0x00007f8ab9143223: vmovq  %xmm0,(%rdi)
  0x00007f8ab9143227: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f8ab914322b: sub    $0x4,%edx
  0x00007f8ab914322e: jge    Stub::arrayof_jshort_fill+99 0x0x7f8ab9143223
  ;; L_fill_4_bytes:
  0x00007f8ab9143230: test   $0x2,%edx
  0x00007f8ab9143236: je     Stub::arrayof_jshort_fill+126 0x0x7f8ab914323e
  0x00007f8ab9143238: mov    %esi,(%rdi)
  0x00007f8ab914323a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f8ab914323e: test   $0x1,%edx
  0x00007f8ab9143244: je     Stub::arrayof_jshort_fill+137 0x0x7f8ab9143249
  0x00007f8ab9143246: mov    %si,(%rdi)
  ;; L_fill_byte:
  ;; L_exit:
  0x00007f8ab9143249: leaveq 
  0x00007f8ab914324a: retq   

StubRoutines::arrayof_jint_fill [0x00007f8ab9143260, 0x00007f8ab91432dc[ (124 bytes)
  ;; Entry:
  0x00007f8ab9143260: push   %rbp
  0x00007f8ab9143261: mov    %rsp,%rbp
  0x00007f8ab9143264: cmp    $0x2,%edx
  0x00007f8ab9143267: jb     Stub::arrayof_jint_fill+112 0x0x7f8ab91432d0
  0x00007f8ab914326d: test   $0x4,%rdi
  0x00007f8ab9143274: je     Stub::arrayof_jint_fill+31 0x0x7f8ab914327f
  0x00007f8ab9143276: mov    %esi,(%rdi)
  0x00007f8ab9143278: add    $0x4,%rdi
  0x00007f8ab914327c: sub    $0x1,%edx
  ;; L_fill_32_bytes:
  0x00007f8ab914327f: vmovd  %esi,%xmm0
  0x00007f8ab9143283: vpshufd $0x0,%xmm0,%xmm0
  0x00007f8ab9143288: sub    $0x8,%edx
  0x00007f8ab914328b: jl     Stub::arrayof_jint_fill+92 0x0x7f8ab91432bc
  0x00007f8ab9143291: nop
  0x00007f8ab9143292: nop
  0x00007f8ab9143293: nop
  0x00007f8ab9143294: nop
  0x00007f8ab9143295: nop
  0x00007f8ab9143296: nop
  0x00007f8ab9143297: nop
  0x00007f8ab9143298: nop
  0x00007f8ab9143299: nop
  0x00007f8ab914329a: nop
  0x00007f8ab914329b: nop
  0x00007f8ab914329c: nop
  0x00007f8ab914329d: nop
  0x00007f8ab914329e: nop
  0x00007f8ab914329f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f8ab91432a0: vmovq  %xmm0,(%rdi)
  0x00007f8ab91432a4: vmovq  %xmm0,0x8(%rdi)
  0x00007f8ab91432a9: vmovq  %xmm0,0x10(%rdi)
  0x00007f8ab91432ae: vmovq  %xmm0,0x18(%rdi)
  0x00007f8ab91432b3: add    $0x20,%rdi
  0x00007f8ab91432b7: sub    $0x8,%edx
  0x00007f8ab91432ba: jge    Stub::arrayof_jint_fill+64 0x0x7f8ab91432a0
  ;; L_check_fill_8_bytes:
  0x00007f8ab91432bc: add    $0x8,%edx
  0x00007f8ab91432bf: je     Stub::arrayof_jint_fill+122 0x0x7f8ab91432da
  0x00007f8ab91432c1: jmp    Stub::arrayof_jint_fill+107 0x0x7f8ab91432cb
  ;; L_fill_8_bytes_loop:
  0x00007f8ab91432c3: vmovq  %xmm0,(%rdi)
  0x00007f8ab91432c7: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f8ab91432cb: sub    $0x2,%edx
  0x00007f8ab91432ce: jge    Stub::arrayof_jint_fill+99 0x0x7f8ab91432c3
  ;; L_fill_4_bytes:
  0x00007f8ab91432d0: test   $0x1,%edx
  0x00007f8ab91432d6: je     Stub::arrayof_jint_fill+122 0x0x7f8ab91432da
  0x00007f8ab91432d8: mov    %esi,(%rdi)
  ;; L_fill_2_bytes:
  ;; L_exit:
  0x00007f8ab91432da: leaveq 
  0x00007f8ab91432db: retq   

StubRoutines::log [0x00007f8ab91432dc, 0x00007f8ab91432fb[ (31 bytes)
  0x00007f8ab91432dc: sub    $0x8,%rsp
  0x00007f8ab91432e0: vmovsd %xmm0,(%rsp)
  0x00007f8ab91432e5: fldl   (%rsp)
  0x00007f8ab91432e8: fldln2 
  0x00007f8ab91432ea: fxch   %st(1)
  0x00007f8ab91432ec: fyl2x  
  0x00007f8ab91432ee: fstpl  (%rsp)
  0x00007f8ab91432f1: vmovsd (%rsp),%xmm0
  0x00007f8ab91432f6: add    $0x8,%rsp
  0x00007f8ab91432fa: retq   

StubRoutines::log10 [0x00007f8ab91432fb, 0x00007f8ab914331a[ (31 bytes)
  0x00007f8ab91432fb: sub    $0x8,%rsp
  0x00007f8ab91432ff: vmovsd %xmm0,(%rsp)
  0x00007f8ab9143304: fldl   (%rsp)
  0x00007f8ab9143307: fldlg2 
  0x00007f8ab9143309: fxch   %st(1)
  0x00007f8ab914330b: fyl2x  
  0x00007f8ab914330d: fstpl  (%rsp)
  0x00007f8ab9143310: vmovsd (%rsp),%xmm0
  0x00007f8ab9143315: add    $0x8,%rsp
  0x00007f8ab9143319: retq   

StubRoutines::sin [0x00007f8ab914331a, 0x00007f8ab914366a[ (848 bytes)
  0x00007f8ab914331a: sub    $0x8,%rsp
  0x00007f8ab914331e: vmovsd %xmm0,(%rsp)
  0x00007f8ab9143323: fldl   (%rsp)
  0x00007f8ab9143326: fldl   0x161ae38c(%rip)        # 0x00007f8acf2f16b8
  0x00007f8ab914332c: fld    %st(1)
  0x00007f8ab914332e: fabs   
  0x00007f8ab9143330: fucomip %st(1),%st
  0x00007f8ab9143332: ffree  %st(0)
  0x00007f8ab9143334: fincstp 
  0x00007f8ab9143336: ja     Stub::sin+41 0x0x7f8ab9143343
  0x00007f8ab914333c: fsin   
  0x00007f8ab914333e: jmpq   Stub::sin+835 0x0x7f8ab914365d
  0x00007f8ab9143343: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9143348: sub    $0x80,%rsp
  0x00007f8ab914334f: mov    %rax,0x78(%rsp)
  0x00007f8ab9143354: mov    %rcx,0x70(%rsp)
  0x00007f8ab9143359: mov    %rdx,0x68(%rsp)
  0x00007f8ab914335e: mov    %rbx,0x60(%rsp)
  0x00007f8ab9143363: mov    %rbp,0x50(%rsp)
  0x00007f8ab9143368: mov    %rsi,0x48(%rsp)
  0x00007f8ab914336d: mov    %rdi,0x40(%rsp)
  0x00007f8ab9143372: mov    %r8,0x38(%rsp)
  0x00007f8ab9143377: mov    %r9,0x30(%rsp)
  0x00007f8ab914337c: mov    %r10,0x28(%rsp)
  0x00007f8ab9143381: mov    %r11,0x20(%rsp)
  0x00007f8ab9143386: mov    %r12,0x18(%rsp)
  0x00007f8ab914338b: mov    %r13,0x10(%rsp)
  0x00007f8ab9143390: mov    %r14,0x8(%rsp)
  0x00007f8ab9143395: mov    %r15,(%rsp)
  0x00007f8ab9143399: sub    $0x100,%rsp
  0x00007f8ab91433a0: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f8ab91433a7: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f8ab91433af: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f8ab91433b7: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f8ab91433bf: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f8ab91433c7: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f8ab91433cf: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f8ab91433d7: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f8ab91433df: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f8ab91433ea: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f8ab91433f5: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f8ab9143400: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f8ab914340b: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f8ab9143416: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f8ab9143421: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f8ab914342c: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f8ab9143437: sub    $0x100,%rsp
  0x00007f8ab914343e: vmovdqu %xmm0,(%rsp)
  0x00007f8ab9143443: vmovdqu %xmm1,0x10(%rsp)
  0x00007f8ab9143449: vmovdqu %xmm2,0x20(%rsp)
  0x00007f8ab914344f: vmovdqu %xmm3,0x30(%rsp)
  0x00007f8ab9143455: vmovdqu %xmm4,0x40(%rsp)
  0x00007f8ab914345b: vmovdqu %xmm5,0x50(%rsp)
  0x00007f8ab9143461: vmovdqu %xmm6,0x60(%rsp)
  0x00007f8ab9143467: vmovdqu %xmm7,0x70(%rsp)
  0x00007f8ab914346d: vmovdqu %xmm8,0x80(%rsp)
  0x00007f8ab9143476: vmovdqu %xmm9,0x90(%rsp)
  0x00007f8ab914347f: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f8ab9143488: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f8ab9143491: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f8ab914349a: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f8ab91434a3: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f8ab91434ac: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f8ab91434b5: sub    $0x8,%rsp
  0x00007f8ab91434b9: fstpl  (%rsp)
  0x00007f8ab91434bc: vmovsd (%rsp),%xmm0
  0x00007f8ab91434c1: test   $0xf,%esp
  0x00007f8ab91434c7: je     Stub::sin+453 0x0x7f8ab91434df
  0x00007f8ab91434cd: sub    $0x8,%rsp
  0x00007f8ab91434d1: callq  0x00007f8acef94fb6
  0x00007f8ab91434d6: add    $0x8,%rsp
  0x00007f8ab91434da: jmpq   Stub::sin+458 0x0x7f8ab91434e4
  0x00007f8ab91434df: callq  0x00007f8acef94fb6
  0x00007f8ab91434e4: vmovsd %xmm0,(%rsp)
  0x00007f8ab91434e9: fldl   (%rsp)
  0x00007f8ab91434ec: add    $0x8,%rsp
  0x00007f8ab91434f0: vmovdqu (%rsp),%xmm0
  0x00007f8ab91434f5: vmovdqu 0x10(%rsp),%xmm1
  0x00007f8ab91434fb: vmovdqu 0x20(%rsp),%xmm2
  0x00007f8ab9143501: vmovdqu 0x30(%rsp),%xmm3
  0x00007f8ab9143507: vmovdqu 0x40(%rsp),%xmm4
  0x00007f8ab914350d: vmovdqu 0x50(%rsp),%xmm5
  0x00007f8ab9143513: vmovdqu 0x60(%rsp),%xmm6
  0x00007f8ab9143519: vmovdqu 0x70(%rsp),%xmm7
  0x00007f8ab914351f: vmovdqu 0x80(%rsp),%xmm8
  0x00007f8ab9143528: vmovdqu 0x90(%rsp),%xmm9
  0x00007f8ab9143531: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f8ab914353a: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f8ab9143543: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f8ab914354c: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f8ab9143555: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f8ab914355e: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f8ab9143567: add    $0x100,%rsp
  0x00007f8ab914356e: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f8ab9143575: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f8ab914357d: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f8ab9143585: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f8ab914358d: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f8ab9143595: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f8ab914359d: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f8ab91435a5: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f8ab91435ad: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f8ab91435b8: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f8ab91435c3: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f8ab91435ce: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f8ab91435d9: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f8ab91435e4: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f8ab91435ef: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f8ab91435fa: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f8ab9143605: add    $0x100,%rsp
  0x00007f8ab914360c: mov    (%rsp),%r15
  0x00007f8ab9143610: mov    0x8(%rsp),%r14
  0x00007f8ab9143615: mov    0x10(%rsp),%r13
  0x00007f8ab914361a: mov    0x18(%rsp),%r12
  0x00007f8ab914361f: mov    0x20(%rsp),%r11
  0x00007f8ab9143624: mov    0x28(%rsp),%r10
  0x00007f8ab9143629: mov    0x30(%rsp),%r9
  0x00007f8ab914362e: mov    0x38(%rsp),%r8
  0x00007f8ab9143633: mov    0x40(%rsp),%rdi
  0x00007f8ab9143638: mov    0x48(%rsp),%rsi
  0x00007f8ab914363d: mov    0x50(%rsp),%rbp
  0x00007f8ab9143642: mov    0x60(%rsp),%rbx
  0x00007f8ab9143647: mov    0x68(%rsp),%rdx
  0x00007f8ab914364c: mov    0x70(%rsp),%rcx
  0x00007f8ab9143651: mov    0x78(%rsp),%rax
  0x00007f8ab9143656: add    $0x80,%rsp
  0x00007f8ab914365d: fstpl  (%rsp)
  0x00007f8ab9143660: vmovsd (%rsp),%xmm0
  0x00007f8ab9143665: add    $0x8,%rsp
  0x00007f8ab9143669: retq   

StubRoutines::cos [0x00007f8ab914366a, 0x00007f8ab91439ba[ (848 bytes)
  0x00007f8ab914366a: sub    $0x8,%rsp
  0x00007f8ab914366e: vmovsd %xmm0,(%rsp)
  0x00007f8ab9143673: fldl   (%rsp)
  0x00007f8ab9143676: fldl   0x161ae03c(%rip)        # 0x00007f8acf2f16b8
  0x00007f8ab914367c: fld    %st(1)
  0x00007f8ab914367e: fabs   
  0x00007f8ab9143680: fucomip %st(1),%st
  0x00007f8ab9143682: ffree  %st(0)
  0x00007f8ab9143684: fincstp 
  0x00007f8ab9143686: ja     Stub::cos+41 0x0x7f8ab9143693
  0x00007f8ab914368c: fcos   
  0x00007f8ab914368e: jmpq   Stub::cos+835 0x0x7f8ab91439ad
  0x00007f8ab9143693: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9143698: sub    $0x80,%rsp
  0x00007f8ab914369f: mov    %rax,0x78(%rsp)
  0x00007f8ab91436a4: mov    %rcx,0x70(%rsp)
  0x00007f8ab91436a9: mov    %rdx,0x68(%rsp)
  0x00007f8ab91436ae: mov    %rbx,0x60(%rsp)
  0x00007f8ab91436b3: mov    %rbp,0x50(%rsp)
  0x00007f8ab91436b8: mov    %rsi,0x48(%rsp)
  0x00007f8ab91436bd: mov    %rdi,0x40(%rsp)
  0x00007f8ab91436c2: mov    %r8,0x38(%rsp)
  0x00007f8ab91436c7: mov    %r9,0x30(%rsp)
  0x00007f8ab91436cc: mov    %r10,0x28(%rsp)
  0x00007f8ab91436d1: mov    %r11,0x20(%rsp)
  0x00007f8ab91436d6: mov    %r12,0x18(%rsp)
  0x00007f8ab91436db: mov    %r13,0x10(%rsp)
  0x00007f8ab91436e0: mov    %r14,0x8(%rsp)
  0x00007f8ab91436e5: mov    %r15,(%rsp)
  0x00007f8ab91436e9: sub    $0x100,%rsp
  0x00007f8ab91436f0: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f8ab91436f7: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f8ab91436ff: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f8ab9143707: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f8ab914370f: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f8ab9143717: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f8ab914371f: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f8ab9143727: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f8ab914372f: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f8ab914373a: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f8ab9143745: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f8ab9143750: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f8ab914375b: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f8ab9143766: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f8ab9143771: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f8ab914377c: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f8ab9143787: sub    $0x100,%rsp
  0x00007f8ab914378e: vmovdqu %xmm0,(%rsp)
  0x00007f8ab9143793: vmovdqu %xmm1,0x10(%rsp)
  0x00007f8ab9143799: vmovdqu %xmm2,0x20(%rsp)
  0x00007f8ab914379f: vmovdqu %xmm3,0x30(%rsp)
  0x00007f8ab91437a5: vmovdqu %xmm4,0x40(%rsp)
  0x00007f8ab91437ab: vmovdqu %xmm5,0x50(%rsp)
  0x00007f8ab91437b1: vmovdqu %xmm6,0x60(%rsp)
  0x00007f8ab91437b7: vmovdqu %xmm7,0x70(%rsp)
  0x00007f8ab91437bd: vmovdqu %xmm8,0x80(%rsp)
  0x00007f8ab91437c6: vmovdqu %xmm9,0x90(%rsp)
  0x00007f8ab91437cf: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f8ab91437d8: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f8ab91437e1: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f8ab91437ea: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f8ab91437f3: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f8ab91437fc: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f8ab9143805: sub    $0x8,%rsp
  0x00007f8ab9143809: fstpl  (%rsp)
  0x00007f8ab914380c: vmovsd (%rsp),%xmm0
  0x00007f8ab9143811: test   $0xf,%esp
  0x00007f8ab9143817: je     Stub::cos+453 0x0x7f8ab914382f
  0x00007f8ab914381d: sub    $0x8,%rsp
  0x00007f8ab9143821: callq  0x00007f8acef95238
  0x00007f8ab9143826: add    $0x8,%rsp
  0x00007f8ab914382a: jmpq   Stub::cos+458 0x0x7f8ab9143834
  0x00007f8ab914382f: callq  0x00007f8acef95238
  0x00007f8ab9143834: vmovsd %xmm0,(%rsp)
  0x00007f8ab9143839: fldl   (%rsp)
  0x00007f8ab914383c: add    $0x8,%rsp
  0x00007f8ab9143840: vmovdqu (%rsp),%xmm0
  0x00007f8ab9143845: vmovdqu 0x10(%rsp),%xmm1
  0x00007f8ab914384b: vmovdqu 0x20(%rsp),%xmm2
  0x00007f8ab9143851: vmovdqu 0x30(%rsp),%xmm3
  0x00007f8ab9143857: vmovdqu 0x40(%rsp),%xmm4
  0x00007f8ab914385d: vmovdqu 0x50(%rsp),%xmm5
  0x00007f8ab9143863: vmovdqu 0x60(%rsp),%xmm6
  0x00007f8ab9143869: vmovdqu 0x70(%rsp),%xmm7
  0x00007f8ab914386f: vmovdqu 0x80(%rsp),%xmm8
  0x00007f8ab9143878: vmovdqu 0x90(%rsp),%xmm9
  0x00007f8ab9143881: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f8ab914388a: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f8ab9143893: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f8ab914389c: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f8ab91438a5: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f8ab91438ae: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f8ab91438b7: add    $0x100,%rsp
  0x00007f8ab91438be: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f8ab91438c5: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f8ab91438cd: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f8ab91438d5: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f8ab91438dd: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f8ab91438e5: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f8ab91438ed: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f8ab91438f5: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f8ab91438fd: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f8ab9143908: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f8ab9143913: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f8ab914391e: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f8ab9143929: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f8ab9143934: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f8ab914393f: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f8ab914394a: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f8ab9143955: add    $0x100,%rsp
  0x00007f8ab914395c: mov    (%rsp),%r15
  0x00007f8ab9143960: mov    0x8(%rsp),%r14
  0x00007f8ab9143965: mov    0x10(%rsp),%r13
  0x00007f8ab914396a: mov    0x18(%rsp),%r12
  0x00007f8ab914396f: mov    0x20(%rsp),%r11
  0x00007f8ab9143974: mov    0x28(%rsp),%r10
  0x00007f8ab9143979: mov    0x30(%rsp),%r9
  0x00007f8ab914397e: mov    0x38(%rsp),%r8
  0x00007f8ab9143983: mov    0x40(%rsp),%rdi
  0x00007f8ab9143988: mov    0x48(%rsp),%rsi
  0x00007f8ab914398d: mov    0x50(%rsp),%rbp
  0x00007f8ab9143992: mov    0x60(%rsp),%rbx
  0x00007f8ab9143997: mov    0x68(%rsp),%rdx
  0x00007f8ab914399c: mov    0x70(%rsp),%rcx
  0x00007f8ab91439a1: mov    0x78(%rsp),%rax
  0x00007f8ab91439a6: add    $0x80,%rsp
  0x00007f8ab91439ad: fstpl  (%rsp)
  0x00007f8ab91439b0: vmovsd (%rsp),%xmm0
  0x00007f8ab91439b5: add    $0x8,%rsp
  0x00007f8ab91439b9: retq   

StubRoutines::tan [0x00007f8ab91439ba, 0x00007f8ab9143d0c[ (850 bytes)
  0x00007f8ab91439ba: sub    $0x8,%rsp
  0x00007f8ab91439be: vmovsd %xmm0,(%rsp)
  0x00007f8ab91439c3: fldl   (%rsp)
  0x00007f8ab91439c6: fldl   0x161adcec(%rip)        # 0x00007f8acf2f16b8
  0x00007f8ab91439cc: fld    %st(1)
  0x00007f8ab91439ce: fabs   
  0x00007f8ab91439d0: fucomip %st(1),%st
  0x00007f8ab91439d2: ffree  %st(0)
  0x00007f8ab91439d4: fincstp 
  0x00007f8ab91439d6: ja     Stub::tan+43 0x0x7f8ab91439e5
  0x00007f8ab91439dc: fptan  
  0x00007f8ab91439de: fstp   %st(0)
  0x00007f8ab91439e0: jmpq   Stub::tan+837 0x0x7f8ab9143cff
  0x00007f8ab91439e5: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91439ea: sub    $0x80,%rsp
  0x00007f8ab91439f1: mov    %rax,0x78(%rsp)
  0x00007f8ab91439f6: mov    %rcx,0x70(%rsp)
  0x00007f8ab91439fb: mov    %rdx,0x68(%rsp)
  0x00007f8ab9143a00: mov    %rbx,0x60(%rsp)
  0x00007f8ab9143a05: mov    %rbp,0x50(%rsp)
  0x00007f8ab9143a0a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9143a0f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9143a14: mov    %r8,0x38(%rsp)
  0x00007f8ab9143a19: mov    %r9,0x30(%rsp)
  0x00007f8ab9143a1e: mov    %r10,0x28(%rsp)
  0x00007f8ab9143a23: mov    %r11,0x20(%rsp)
  0x00007f8ab9143a28: mov    %r12,0x18(%rsp)
  0x00007f8ab9143a2d: mov    %r13,0x10(%rsp)
  0x00007f8ab9143a32: mov    %r14,0x8(%rsp)
  0x00007f8ab9143a37: mov    %r15,(%rsp)
  0x00007f8ab9143a3b: sub    $0x100,%rsp
  0x00007f8ab9143a42: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f8ab9143a49: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f8ab9143a51: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f8ab9143a59: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f8ab9143a61: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f8ab9143a69: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f8ab9143a71: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f8ab9143a79: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f8ab9143a81: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f8ab9143a8c: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f8ab9143a97: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f8ab9143aa2: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f8ab9143aad: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f8ab9143ab8: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f8ab9143ac3: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f8ab9143ace: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f8ab9143ad9: sub    $0x100,%rsp
  0x00007f8ab9143ae0: vmovdqu %xmm0,(%rsp)
  0x00007f8ab9143ae5: vmovdqu %xmm1,0x10(%rsp)
  0x00007f8ab9143aeb: vmovdqu %xmm2,0x20(%rsp)
  0x00007f8ab9143af1: vmovdqu %xmm3,0x30(%rsp)
  0x00007f8ab9143af7: vmovdqu %xmm4,0x40(%rsp)
  0x00007f8ab9143afd: vmovdqu %xmm5,0x50(%rsp)
  0x00007f8ab9143b03: vmovdqu %xmm6,0x60(%rsp)
  0x00007f8ab9143b09: vmovdqu %xmm7,0x70(%rsp)
  0x00007f8ab9143b0f: vmovdqu %xmm8,0x80(%rsp)
  0x00007f8ab9143b18: vmovdqu %xmm9,0x90(%rsp)
  0x00007f8ab9143b21: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f8ab9143b2a: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f8ab9143b33: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f8ab9143b3c: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f8ab9143b45: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f8ab9143b4e: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f8ab9143b57: sub    $0x8,%rsp
  0x00007f8ab9143b5b: fstpl  (%rsp)
  0x00007f8ab9143b5e: vmovsd (%rsp),%xmm0
  0x00007f8ab9143b63: test   $0xf,%esp
  0x00007f8ab9143b69: je     Stub::tan+455 0x0x7f8ab9143b81
  0x00007f8ab9143b6f: sub    $0x8,%rsp
  0x00007f8ab9143b73: callq  0x00007f8acef954b6
  0x00007f8ab9143b78: add    $0x8,%rsp
  0x00007f8ab9143b7c: jmpq   Stub::tan+460 0x0x7f8ab9143b86
  0x00007f8ab9143b81: callq  0x00007f8acef954b6
  0x00007f8ab9143b86: vmovsd %xmm0,(%rsp)
  0x00007f8ab9143b8b: fldl   (%rsp)
  0x00007f8ab9143b8e: add    $0x8,%rsp
  0x00007f8ab9143b92: vmovdqu (%rsp),%xmm0
  0x00007f8ab9143b97: vmovdqu 0x10(%rsp),%xmm1
  0x00007f8ab9143b9d: vmovdqu 0x20(%rsp),%xmm2
  0x00007f8ab9143ba3: vmovdqu 0x30(%rsp),%xmm3
  0x00007f8ab9143ba9: vmovdqu 0x40(%rsp),%xmm4
  0x00007f8ab9143baf: vmovdqu 0x50(%rsp),%xmm5
  0x00007f8ab9143bb5: vmovdqu 0x60(%rsp),%xmm6
  0x00007f8ab9143bbb: vmovdqu 0x70(%rsp),%xmm7
  0x00007f8ab9143bc1: vmovdqu 0x80(%rsp),%xmm8
  0x00007f8ab9143bca: vmovdqu 0x90(%rsp),%xmm9
  0x00007f8ab9143bd3: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f8ab9143bdc: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f8ab9143be5: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f8ab9143bee: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f8ab9143bf7: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f8ab9143c00: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f8ab9143c09: add    $0x100,%rsp
  0x00007f8ab9143c10: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f8ab9143c17: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f8ab9143c1f: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f8ab9143c27: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f8ab9143c2f: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f8ab9143c37: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f8ab9143c3f: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f8ab9143c47: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f8ab9143c4f: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f8ab9143c5a: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f8ab9143c65: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f8ab9143c70: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f8ab9143c7b: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f8ab9143c86: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f8ab9143c91: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f8ab9143c9c: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f8ab9143ca7: add    $0x100,%rsp
  0x00007f8ab9143cae: mov    (%rsp),%r15
  0x00007f8ab9143cb2: mov    0x8(%rsp),%r14
  0x00007f8ab9143cb7: mov    0x10(%rsp),%r13
  0x00007f8ab9143cbc: mov    0x18(%rsp),%r12
  0x00007f8ab9143cc1: mov    0x20(%rsp),%r11
  0x00007f8ab9143cc6: mov    0x28(%rsp),%r10
  0x00007f8ab9143ccb: mov    0x30(%rsp),%r9
  0x00007f8ab9143cd0: mov    0x38(%rsp),%r8
  0x00007f8ab9143cd5: mov    0x40(%rsp),%rdi
  0x00007f8ab9143cda: mov    0x48(%rsp),%rsi
  0x00007f8ab9143cdf: mov    0x50(%rsp),%rbp
  0x00007f8ab9143ce4: mov    0x60(%rsp),%rbx
  0x00007f8ab9143ce9: mov    0x68(%rsp),%rdx
  0x00007f8ab9143cee: mov    0x70(%rsp),%rcx
  0x00007f8ab9143cf3: mov    0x78(%rsp),%rax
  0x00007f8ab9143cf8: add    $0x80,%rsp
  0x00007f8ab9143cff: fstpl  (%rsp)
  0x00007f8ab9143d02: vmovsd (%rsp),%xmm0
  0x00007f8ab9143d07: add    $0x8,%rsp
  0x00007f8ab9143d0b: retq   

StubRoutines::exp [0x00007f8ab9143d0c, 0x00007f8ab91440be[ (946 bytes)
  0x00007f8ab9143d0c: sub    $0x8,%rsp
  0x00007f8ab9143d10: vmovsd %xmm0,(%rsp)
  0x00007f8ab9143d15: fldl   (%rsp)
  0x00007f8ab9143d18: fld    %st(0)
  0x00007f8ab9143d1a: sub    $0x8,%rsp
  0x00007f8ab9143d1e: fstcw  (%rsp)
  0x00007f8ab9143d22: mov    (%rsp),%eax
  0x00007f8ab9143d25: or     $0x300,%eax
  0x00007f8ab9143d2b: push   %rax
  0x00007f8ab9143d2c: fldcw  (%rsp)
  0x00007f8ab9143d2f: pop    %rax
  0x00007f8ab9143d30: fldl2e 
  0x00007f8ab9143d32: fmulp  %st,%st(1)
  0x00007f8ab9143d34: sub    $0x8,%rsp
  0x00007f8ab9143d38: fld    %st(0)
  0x00007f8ab9143d3a: frndint 
  0x00007f8ab9143d3c: fsubr  %st,%st(1)
  0x00007f8ab9143d3e: fistpl (%rsp)
  0x00007f8ab9143d41: f2xm1  
  0x00007f8ab9143d43: fld1   
  0x00007f8ab9143d45: faddp  %st,%st(1)
  0x00007f8ab9143d47: mov    (%rsp),%eax
  0x00007f8ab9143d4a: mov    $0xfffff800,%ecx
  0x00007f8ab9143d4f: add    $0x3ff,%eax
  0x00007f8ab9143d55: mov    %eax,%edx
  0x00007f8ab9143d57: shl    $0x14,%eax
  0x00007f8ab9143d5a: add    $0x1,%edx
  0x00007f8ab9143d5d: cmove  %ecx,%eax
  0x00007f8ab9143d60: cmp    $0x1,%edx
  0x00007f8ab9143d63: cmove  %ecx,%eax
  0x00007f8ab9143d66: test   %edx,%ecx
  0x00007f8ab9143d68: cmovne %ecx,%eax
  0x00007f8ab9143d6b: mov    %eax,0x4(%rsp)
  0x00007f8ab9143d6f: movl   $0x0,(%rsp)
  0x00007f8ab9143d76: fmull  (%rsp)
  0x00007f8ab9143d79: add    $0x8,%rsp
  0x00007f8ab9143d7d: fldcw  (%rsp)
  0x00007f8ab9143d80: add    $0x8,%rsp
  0x00007f8ab9143d84: fucomi %st(0),%st
  0x00007f8ab9143d86: jp     Stub::exp+135 0x0x7f8ab9143d93
  0x00007f8ab9143d8c: ffree  %st(1)
  0x00007f8ab9143d8e: jmpq   Stub::exp+933 0x0x7f8ab91440b1
  0x00007f8ab9143d93: ffree  %st(0)
  0x00007f8ab9143d95: fincstp 
  0x00007f8ab9143d97: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9143d9c: sub    $0x80,%rsp
  0x00007f8ab9143da3: mov    %rax,0x78(%rsp)
  0x00007f8ab9143da8: mov    %rcx,0x70(%rsp)
  0x00007f8ab9143dad: mov    %rdx,0x68(%rsp)
  0x00007f8ab9143db2: mov    %rbx,0x60(%rsp)
  0x00007f8ab9143db7: mov    %rbp,0x50(%rsp)
  0x00007f8ab9143dbc: mov    %rsi,0x48(%rsp)
  0x00007f8ab9143dc1: mov    %rdi,0x40(%rsp)
  0x00007f8ab9143dc6: mov    %r8,0x38(%rsp)
  0x00007f8ab9143dcb: mov    %r9,0x30(%rsp)
  0x00007f8ab9143dd0: mov    %r10,0x28(%rsp)
  0x00007f8ab9143dd5: mov    %r11,0x20(%rsp)
  0x00007f8ab9143dda: mov    %r12,0x18(%rsp)
  0x00007f8ab9143ddf: mov    %r13,0x10(%rsp)
  0x00007f8ab9143de4: mov    %r14,0x8(%rsp)
  0x00007f8ab9143de9: mov    %r15,(%rsp)
  0x00007f8ab9143ded: sub    $0x100,%rsp
  0x00007f8ab9143df4: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f8ab9143dfb: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f8ab9143e03: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f8ab9143e0b: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f8ab9143e13: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f8ab9143e1b: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f8ab9143e23: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f8ab9143e2b: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f8ab9143e33: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f8ab9143e3e: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f8ab9143e49: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f8ab9143e54: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f8ab9143e5f: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f8ab9143e6a: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f8ab9143e75: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f8ab9143e80: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f8ab9143e8b: sub    $0x100,%rsp
  0x00007f8ab9143e92: vmovdqu %xmm0,(%rsp)
  0x00007f8ab9143e97: vmovdqu %xmm1,0x10(%rsp)
  0x00007f8ab9143e9d: vmovdqu %xmm2,0x20(%rsp)
  0x00007f8ab9143ea3: vmovdqu %xmm3,0x30(%rsp)
  0x00007f8ab9143ea9: vmovdqu %xmm4,0x40(%rsp)
  0x00007f8ab9143eaf: vmovdqu %xmm5,0x50(%rsp)
  0x00007f8ab9143eb5: vmovdqu %xmm6,0x60(%rsp)
  0x00007f8ab9143ebb: vmovdqu %xmm7,0x70(%rsp)
  0x00007f8ab9143ec1: vmovdqu %xmm8,0x80(%rsp)
  0x00007f8ab9143eca: vmovdqu %xmm9,0x90(%rsp)
  0x00007f8ab9143ed3: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f8ab9143edc: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f8ab9143ee5: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f8ab9143eee: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f8ab9143ef7: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f8ab9143f00: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f8ab9143f09: sub    $0x8,%rsp
  0x00007f8ab9143f0d: fstpl  (%rsp)
  0x00007f8ab9143f10: vmovsd (%rsp),%xmm0
  0x00007f8ab9143f15: test   $0xf,%esp
  0x00007f8ab9143f1b: je     Stub::exp+551 0x0x7f8ab9143f33
  0x00007f8ab9143f21: sub    $0x8,%rsp
  0x00007f8ab9143f25: callq  0x00007f8acef91c7a
  0x00007f8ab9143f2a: add    $0x8,%rsp
  0x00007f8ab9143f2e: jmpq   Stub::exp+556 0x0x7f8ab9143f38
  0x00007f8ab9143f33: callq  0x00007f8acef91c7a
  0x00007f8ab9143f38: vmovsd %xmm0,(%rsp)
  0x00007f8ab9143f3d: fldl   (%rsp)
  0x00007f8ab9143f40: add    $0x8,%rsp
  0x00007f8ab9143f44: vmovdqu (%rsp),%xmm0
  0x00007f8ab9143f49: vmovdqu 0x10(%rsp),%xmm1
  0x00007f8ab9143f4f: vmovdqu 0x20(%rsp),%xmm2
  0x00007f8ab9143f55: vmovdqu 0x30(%rsp),%xmm3
  0x00007f8ab9143f5b: vmovdqu 0x40(%rsp),%xmm4
  0x00007f8ab9143f61: vmovdqu 0x50(%rsp),%xmm5
  0x00007f8ab9143f67: vmovdqu 0x60(%rsp),%xmm6
  0x00007f8ab9143f6d: vmovdqu 0x70(%rsp),%xmm7
  0x00007f8ab9143f73: vmovdqu 0x80(%rsp),%xmm8
  0x00007f8ab9143f7c: vmovdqu 0x90(%rsp),%xmm9
  0x00007f8ab9143f85: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f8ab9143f8e: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f8ab9143f97: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f8ab9143fa0: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f8ab9143fa9: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f8ab9143fb2: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f8ab9143fbb: add    $0x100,%rsp
  0x00007f8ab9143fc2: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f8ab9143fc9: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f8ab9143fd1: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f8ab9143fd9: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f8ab9143fe1: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f8ab9143fe9: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f8ab9143ff1: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f8ab9143ff9: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f8ab9144001: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f8ab914400c: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f8ab9144017: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f8ab9144022: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f8ab914402d: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f8ab9144038: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f8ab9144043: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f8ab914404e: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f8ab9144059: add    $0x100,%rsp
  0x00007f8ab9144060: mov    (%rsp),%r15
  0x00007f8ab9144064: mov    0x8(%rsp),%r14
  0x00007f8ab9144069: mov    0x10(%rsp),%r13
  0x00007f8ab914406e: mov    0x18(%rsp),%r12
  0x00007f8ab9144073: mov    0x20(%rsp),%r11
  0x00007f8ab9144078: mov    0x28(%rsp),%r10
  0x00007f8ab914407d: mov    0x30(%rsp),%r9
  0x00007f8ab9144082: mov    0x38(%rsp),%r8
  0x00007f8ab9144087: mov    0x40(%rsp),%rdi
  0x00007f8ab914408c: mov    0x48(%rsp),%rsi
  0x00007f8ab9144091: mov    0x50(%rsp),%rbp
  0x00007f8ab9144096: mov    0x60(%rsp),%rbx
  0x00007f8ab914409b: mov    0x68(%rsp),%rdx
  0x00007f8ab91440a0: mov    0x70(%rsp),%rcx
  0x00007f8ab91440a5: mov    0x78(%rsp),%rax
  0x00007f8ab91440aa: add    $0x80,%rsp
  0x00007f8ab91440b1: fstpl  (%rsp)
  0x00007f8ab91440b4: vmovsd (%rsp),%xmm0
  0x00007f8ab91440b9: add    $0x8,%rsp
  0x00007f8ab91440bd: retq   

StubRoutines::pow [0x00007f8ab91440be, 0x00007f8ab91445ff[ (1345 bytes)
  0x00007f8ab91440be: sub    $0x8,%rsp
  0x00007f8ab91440c2: vmovsd %xmm1,(%rsp)
  0x00007f8ab91440c7: fldl   (%rsp)
  0x00007f8ab91440ca: vmovsd %xmm0,(%rsp)
  0x00007f8ab91440cf: fldl   (%rsp)
  0x00007f8ab91440d2: movabs $0x7f8acf918800,%rax
  0x00007f8ab91440dc: fldl   (%rax)
  0x00007f8ab91440de: fucomip %st(2),%st
  0x00007f8ab91440e0: jp     Stub::pow+59 0x0x7f8ab91440f9
  0x00007f8ab91440e6: jne    Stub::pow+59 0x0x7f8ab91440f9
  0x00007f8ab91440ec: fxch   %st(1)
  0x00007f8ab91440ee: ffree  %st(0)
  0x00007f8ab91440f0: fincstp 
  0x00007f8ab91440f2: fmul   %st(0),%st
  0x00007f8ab91440f4: jmpq   Stub::pow+1332 0x0x7f8ab91445f2
  0x00007f8ab91440f9: fldz   
  0x00007f8ab91440fb: fucomip %st(1),%st
  0x00007f8ab91440fd: ja     Stub::pow+194 0x0x7f8ab9144180
  0x00007f8ab9144103: fld    %st(1)
  0x00007f8ab9144105: fld    %st(1)
  ;; fast_pow {
  0x00007f8ab9144107: sub    $0x8,%rsp
  0x00007f8ab914410b: fstcw  (%rsp)
  0x00007f8ab914410f: mov    (%rsp),%eax
  0x00007f8ab9144112: or     $0x300,%eax
  0x00007f8ab9144118: push   %rax
  0x00007f8ab9144119: fldcw  (%rsp)
  0x00007f8ab914411c: pop    %rax
  0x00007f8ab914411d: fyl2x  
  0x00007f8ab914411f: sub    $0x8,%rsp
  0x00007f8ab9144123: fld    %st(0)
  0x00007f8ab9144125: frndint 
  0x00007f8ab9144127: fsubr  %st,%st(1)
  0x00007f8ab9144129: fistpl (%rsp)
  0x00007f8ab914412c: f2xm1  
  0x00007f8ab914412e: fld1   
  0x00007f8ab9144130: faddp  %st,%st(1)
  0x00007f8ab9144132: mov    (%rsp),%eax
  0x00007f8ab9144135: mov    $0xfffff800,%ecx
  0x00007f8ab914413a: add    $0x3ff,%eax
  0x00007f8ab9144140: mov    %eax,%edx
  0x00007f8ab9144142: shl    $0x14,%eax
  0x00007f8ab9144145: add    $0x1,%edx
  0x00007f8ab9144148: cmove  %ecx,%eax
  0x00007f8ab914414b: cmp    $0x1,%edx
  0x00007f8ab914414e: cmove  %ecx,%eax
  0x00007f8ab9144151: test   %edx,%ecx
  0x00007f8ab9144153: cmovne %ecx,%eax
  0x00007f8ab9144156: mov    %eax,0x4(%rsp)
  0x00007f8ab914415a: movl   $0x0,(%rsp)
  0x00007f8ab9144161: fmull  (%rsp)
  0x00007f8ab9144164: add    $0x8,%rsp
  0x00007f8ab9144168: fldcw  (%rsp)
  0x00007f8ab914416b: add    $0x8,%rsp
  ;; } fast_pow
  0x00007f8ab914416f: fucomi %st(0),%st
  0x00007f8ab9144171: jp     Stub::pow+524 0x0x7f8ab91442ca
  0x00007f8ab9144177: ffree  %st(2)
  0x00007f8ab9144179: ffree  %st(1)
  0x00007f8ab914417b: jmpq   Stub::pow+1332 0x0x7f8ab91445f2
  0x00007f8ab9144180: fld    %st(1)
  0x00007f8ab9144182: frndint 
  0x00007f8ab9144184: fucomi %st(2),%st
  0x00007f8ab9144186: jne    Stub::pow+524 0x0x7f8ab91442ca
  0x00007f8ab914418c: sub    $0x8,%rsp
  0x00007f8ab9144190: fld1   
  0x00007f8ab9144192: fadd   %st(1),%st
  0x00007f8ab9144194: fstpl  (%rsp)
  0x00007f8ab9144197: fldl   (%rsp)
  0x00007f8ab914419a: fucomip %st(1),%st
  0x00007f8ab914419c: fistpll (%rsp)
  0x00007f8ab914419f: jne    Stub::pow+246 0x0x7f8ab91441b4
  0x00007f8ab91441a5: movl   $0x0,(%rsp)
  0x00007f8ab91441ac: movl   $0x0,0x4(%rsp)
  0x00007f8ab91441b4: fld    %st(1)
  0x00007f8ab91441b6: fld    %st(1)
  0x00007f8ab91441b8: fabs   
  ;; fast_pow {
  0x00007f8ab91441ba: sub    $0x8,%rsp
  0x00007f8ab91441be: fstcw  (%rsp)
  0x00007f8ab91441c2: mov    (%rsp),%eax
  0x00007f8ab91441c5: or     $0x300,%eax
  0x00007f8ab91441cb: push   %rax
  0x00007f8ab91441cc: fldcw  (%rsp)
  0x00007f8ab91441cf: pop    %rax
  0x00007f8ab91441d0: fyl2x  
  0x00007f8ab91441d2: sub    $0x8,%rsp
  0x00007f8ab91441d6: fld    %st(0)
  0x00007f8ab91441d8: frndint 
  0x00007f8ab91441da: fsubr  %st,%st(1)
  0x00007f8ab91441dc: fistpl (%rsp)
  0x00007f8ab91441df: f2xm1  
  0x00007f8ab91441e1: fld1   
  0x00007f8ab91441e3: faddp  %st,%st(1)
  0x00007f8ab91441e5: mov    (%rsp),%eax
  0x00007f8ab91441e8: mov    $0xfffff800,%ecx
  0x00007f8ab91441ed: add    $0x3ff,%eax
  0x00007f8ab91441f3: mov    %eax,%edx
  0x00007f8ab91441f5: shl    $0x14,%eax
  0x00007f8ab91441f8: add    $0x1,%edx
  0x00007f8ab91441fb: cmove  %ecx,%eax
  0x00007f8ab91441fe: cmp    $0x1,%edx
  0x00007f8ab9144201: cmove  %ecx,%eax
  0x00007f8ab9144204: test   %edx,%ecx
  0x00007f8ab9144206: cmovne %ecx,%eax
  0x00007f8ab9144209: mov    %eax,0x4(%rsp)
  0x00007f8ab914420d: movl   $0x0,(%rsp)
  0x00007f8ab9144214: fmull  (%rsp)
  0x00007f8ab9144217: add    $0x8,%rsp
  0x00007f8ab914421b: fldcw  (%rsp)
  0x00007f8ab914421e: add    $0x8,%rsp
  ;; } fast_pow
  0x00007f8ab9144222: fucomi %st(0),%st
  0x00007f8ab9144224: pop    %rax
  0x00007f8ab9144225: jp     Stub::pow+524 0x0x7f8ab91442ca
  0x00007f8ab914422b: mov    %rax,%rcx
  0x00007f8ab914422e: shl    %rcx
  0x00007f8ab9144231: jae    Stub::pow+502 0x0x7f8ab91442b4
  0x00007f8ab9144237: jne    Stub::pow+502 0x0x7f8ab91442b4
  ;; integer indefinite value shouldn't be seen here
  0x00007f8ab914423d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9144242: sub    $0x80,%rsp
  0x00007f8ab9144249: mov    %rax,0x78(%rsp)
  0x00007f8ab914424e: mov    %rcx,0x70(%rsp)
  0x00007f8ab9144253: mov    %rdx,0x68(%rsp)
  0x00007f8ab9144258: mov    %rbx,0x60(%rsp)
  0x00007f8ab914425d: mov    %rbp,0x50(%rsp)
  0x00007f8ab9144262: mov    %rsi,0x48(%rsp)
  0x00007f8ab9144267: mov    %rdi,0x40(%rsp)
  0x00007f8ab914426c: mov    %r8,0x38(%rsp)
  0x00007f8ab9144271: mov    %r9,0x30(%rsp)
  0x00007f8ab9144276: mov    %r10,0x28(%rsp)
  0x00007f8ab914427b: mov    %r11,0x20(%rsp)
  0x00007f8ab9144280: mov    %r12,0x18(%rsp)
  0x00007f8ab9144285: mov    %r13,0x10(%rsp)
  0x00007f8ab914428a: mov    %r14,0x8(%rsp)
  0x00007f8ab914428f: mov    %r15,(%rsp)
  0x00007f8ab9144293: movabs $0x7f8acf2f1418,%rdi
  0x00007f8ab914429d: movabs $0x7f8ab914423d,%rsi
  0x00007f8ab91442a7: mov    %rsp,%rdx
  0x00007f8ab91442aa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91442ae: callq  0x00007f8aceddb9fa
  0x00007f8ab91442b3: hlt    
  0x00007f8ab91442b4: ffree  %st(2)
  0x00007f8ab91442b6: ffree  %st(1)
  0x00007f8ab91442b8: test   $0x1,%eax
  0x00007f8ab91442bd: je     Stub::pow+1332 0x0x7f8ab91445f2
  0x00007f8ab91442c3: fchs   
  0x00007f8ab91442c5: jmpq   Stub::pow+1332 0x0x7f8ab91445f2
  0x00007f8ab91442ca: ffree  %st(0)
  0x00007f8ab91442cc: fincstp 
  0x00007f8ab91442ce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91442d3: sub    $0x80,%rsp
  0x00007f8ab91442da: mov    %rax,0x78(%rsp)
  0x00007f8ab91442df: mov    %rcx,0x70(%rsp)
  0x00007f8ab91442e4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91442e9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91442ee: mov    %rbp,0x50(%rsp)
  0x00007f8ab91442f3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91442f8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91442fd: mov    %r8,0x38(%rsp)
  0x00007f8ab9144302: mov    %r9,0x30(%rsp)
  0x00007f8ab9144307: mov    %r10,0x28(%rsp)
  0x00007f8ab914430c: mov    %r11,0x20(%rsp)
  0x00007f8ab9144311: mov    %r12,0x18(%rsp)
  0x00007f8ab9144316: mov    %r13,0x10(%rsp)
  0x00007f8ab914431b: mov    %r14,0x8(%rsp)
  0x00007f8ab9144320: mov    %r15,(%rsp)
  0x00007f8ab9144324: sub    $0x100,%rsp
  0x00007f8ab914432b: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f8ab9144332: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f8ab914433a: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f8ab9144342: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f8ab914434a: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f8ab9144352: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f8ab914435a: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f8ab9144362: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f8ab914436a: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f8ab9144375: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f8ab9144380: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f8ab914438b: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f8ab9144396: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f8ab91443a1: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f8ab91443ac: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f8ab91443b7: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f8ab91443c2: sub    $0x100,%rsp
  0x00007f8ab91443c9: vmovdqu %xmm0,(%rsp)
  0x00007f8ab91443ce: vmovdqu %xmm1,0x10(%rsp)
  0x00007f8ab91443d4: vmovdqu %xmm2,0x20(%rsp)
  0x00007f8ab91443da: vmovdqu %xmm3,0x30(%rsp)
  0x00007f8ab91443e0: vmovdqu %xmm4,0x40(%rsp)
  0x00007f8ab91443e6: vmovdqu %xmm5,0x50(%rsp)
  0x00007f8ab91443ec: vmovdqu %xmm6,0x60(%rsp)
  0x00007f8ab91443f2: vmovdqu %xmm7,0x70(%rsp)
  0x00007f8ab91443f8: vmovdqu %xmm8,0x80(%rsp)
  0x00007f8ab9144401: vmovdqu %xmm9,0x90(%rsp)
  0x00007f8ab914440a: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f8ab9144413: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f8ab914441c: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f8ab9144425: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f8ab914442e: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f8ab9144437: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f8ab9144440: sub    $0x10,%rsp
  0x00007f8ab9144444: fstpl  (%rsp)
  0x00007f8ab9144447: fstpl  0x8(%rsp)
  0x00007f8ab914444b: vmovsd (%rsp),%xmm0
  0x00007f8ab9144450: vmovsd 0x8(%rsp),%xmm1
  0x00007f8ab9144456: test   $0xf,%esp
  0x00007f8ab914445c: je     Stub::pow+950 0x0x7f8ab9144474
  0x00007f8ab9144462: sub    $0x8,%rsp
  0x00007f8ab9144466: callq  0x00007f8acef92f2a
  0x00007f8ab914446b: add    $0x8,%rsp
  0x00007f8ab914446f: jmpq   Stub::pow+955 0x0x7f8ab9144479
  0x00007f8ab9144474: callq  0x00007f8acef92f2a
  0x00007f8ab9144479: vmovsd %xmm0,(%rsp)
  0x00007f8ab914447e: fldl   (%rsp)
  0x00007f8ab9144481: add    $0x10,%rsp
  0x00007f8ab9144485: vmovdqu (%rsp),%xmm0
  0x00007f8ab914448a: vmovdqu 0x10(%rsp),%xmm1
  0x00007f8ab9144490: vmovdqu 0x20(%rsp),%xmm2
  0x00007f8ab9144496: vmovdqu 0x30(%rsp),%xmm3
  0x00007f8ab914449c: vmovdqu 0x40(%rsp),%xmm4
  0x00007f8ab91444a2: vmovdqu 0x50(%rsp),%xmm5
  0x00007f8ab91444a8: vmovdqu 0x60(%rsp),%xmm6
  0x00007f8ab91444ae: vmovdqu 0x70(%rsp),%xmm7
  0x00007f8ab91444b4: vmovdqu 0x80(%rsp),%xmm8
  0x00007f8ab91444bd: vmovdqu 0x90(%rsp),%xmm9
  0x00007f8ab91444c6: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f8ab91444cf: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f8ab91444d8: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f8ab91444e1: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f8ab91444ea: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f8ab91444f3: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f8ab91444fc: add    $0x100,%rsp
  0x00007f8ab9144503: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f8ab914450a: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f8ab9144512: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f8ab914451a: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f8ab9144522: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f8ab914452a: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f8ab9144532: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f8ab914453a: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f8ab9144542: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f8ab914454d: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f8ab9144558: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f8ab9144563: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f8ab914456e: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f8ab9144579: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f8ab9144584: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f8ab914458f: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f8ab914459a: add    $0x100,%rsp
  0x00007f8ab91445a1: mov    (%rsp),%r15
  0x00007f8ab91445a5: mov    0x8(%rsp),%r14
  0x00007f8ab91445aa: mov    0x10(%rsp),%r13
  0x00007f8ab91445af: mov    0x18(%rsp),%r12
  0x00007f8ab91445b4: mov    0x20(%rsp),%r11
  0x00007f8ab91445b9: mov    0x28(%rsp),%r10
  0x00007f8ab91445be: mov    0x30(%rsp),%r9
  0x00007f8ab91445c3: mov    0x38(%rsp),%r8
  0x00007f8ab91445c8: mov    0x40(%rsp),%rdi
  0x00007f8ab91445cd: mov    0x48(%rsp),%rsi
  0x00007f8ab91445d2: mov    0x50(%rsp),%rbp
  0x00007f8ab91445d7: mov    0x60(%rsp),%rbx
  0x00007f8ab91445dc: mov    0x68(%rsp),%rdx
  0x00007f8ab91445e1: mov    0x70(%rsp),%rcx
  0x00007f8ab91445e6: mov    0x78(%rsp),%rax
  0x00007f8ab91445eb: add    $0x80,%rsp
  0x00007f8ab91445f2: fstpl  (%rsp)
  0x00007f8ab91445f5: vmovsd (%rsp),%xmm0
  0x00007f8ab91445fa: add    $0x8,%rsp
  0x00007f8ab91445fe: retq   

StubRoutines::key_shuffle_mask [0x00007f8ab9144600, 0x00007f8ab9144610[ (16 bytes)
  0x00007f8ab9144600: add    (%rdx),%eax
  0x00007f8ab9144602: add    %eax,(%rax)
  0x00007f8ab9144604: (bad)  
  0x00007f8ab9144605: (bad)  
  0x00007f8ab9144606: add    $0x90a0b04,%eax
  0x00007f8ab914460b: or     %cl,(%rdi)
  0x00007f8ab914460d: (bad)  
  0x00007f8ab914460e: .byte 0xd
  0x00007f8ab914460f: .byte 0xc

StubRoutines::aescrypt_encryptBlock [0x00007f8ab9144620, 0x00007f8ab914473a[ (282 bytes)
  0x00007f8ab9144620: push   %rbp
  0x00007f8ab9144621: mov    %rsp,%rbp
  0x00007f8ab9144624: mov    -0x4(%rdx),%eax
  0x00007f8ab9144627: vmovdqu -0x2f(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f8ab914462f: vmovdqu (%rdi),%xmm0
  0x00007f8ab9144633: vmovdqu (%rdx),%xmm2
  0x00007f8ab9144637: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab914463c: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f8ab9144640: vmovdqu 0x10(%rdx),%xmm2
  0x00007f8ab9144645: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab914464a: vmovdqu 0x20(%rdx),%xmm3
  0x00007f8ab914464f: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab9144654: vmovdqu 0x30(%rdx),%xmm4
  0x00007f8ab9144659: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f8ab914465e: vmovdqu 0x40(%rdx),%xmm5
  0x00007f8ab9144663: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f8ab9144668: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f8ab914466d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f8ab9144672: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f8ab9144677: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f8ab914467c: vmovdqu 0x50(%rdx),%xmm2
  0x00007f8ab9144681: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab9144686: vmovdqu 0x60(%rdx),%xmm3
  0x00007f8ab914468b: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab9144690: vmovdqu 0x70(%rdx),%xmm4
  0x00007f8ab9144695: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f8ab914469a: vmovdqu 0x80(%rdx),%xmm5
  0x00007f8ab91446a2: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f8ab91446a7: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f8ab91446ac: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f8ab91446b1: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f8ab91446b6: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f8ab91446bb: vmovdqu 0x90(%rdx),%xmm2
  0x00007f8ab91446c3: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab91446c8: vmovdqu 0xa0(%rdx),%xmm3
  0x00007f8ab91446d0: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab91446d5: cmp    $0x2c,%eax
  0x00007f8ab91446d8: je     Stub::aescrypt_encryptBlock+263 0x0x7f8ab9144727
  0x00007f8ab91446da: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f8ab91446df: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f8ab91446e4: vmovdqu 0xb0(%rdx),%xmm2
  0x00007f8ab91446ec: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab91446f1: vmovdqu 0xc0(%rdx),%xmm3
  0x00007f8ab91446f9: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab91446fe: cmp    $0x34,%eax
  0x00007f8ab9144701: je     Stub::aescrypt_encryptBlock+263 0x0x7f8ab9144727
  0x00007f8ab9144703: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f8ab9144708: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f8ab914470d: vmovdqu 0xd0(%rdx),%xmm2
  0x00007f8ab9144715: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab914471a: vmovdqu 0xe0(%rdx),%xmm3
  0x00007f8ab9144722: vpshufb %xmm1,%xmm3,%xmm3
  ;; L_doLast:
  0x00007f8ab9144727: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f8ab914472c: vaesenclast %xmm3,%xmm0,%xmm0
  0x00007f8ab9144731: vmovdqu %xmm0,(%rsi)
  0x00007f8ab9144735: xor    %rax,%rax
  0x00007f8ab9144738: leaveq 
  0x00007f8ab9144739: retq   

StubRoutines::aescrypt_decryptBlock [0x00007f8ab9144740, 0x00007f8ab914485a[ (282 bytes)
  0x00007f8ab9144740: push   %rbp
  0x00007f8ab9144741: mov    %rsp,%rbp
  0x00007f8ab9144744: mov    -0x4(%rdx),%eax
  0x00007f8ab9144747: vmovdqu -0x14f(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f8ab914474f: vmovdqu (%rdi),%xmm0
  0x00007f8ab9144753: vmovdqu 0x10(%rdx),%xmm2
  0x00007f8ab9144758: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab914475d: vmovdqu 0x20(%rdx),%xmm3
  0x00007f8ab9144762: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab9144767: vmovdqu 0x30(%rdx),%xmm4
  0x00007f8ab914476c: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f8ab9144771: vmovdqu 0x40(%rdx),%xmm5
  0x00007f8ab9144776: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f8ab914477b: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f8ab914477f: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f8ab9144784: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f8ab9144789: vaesdec %xmm5,%xmm0,%xmm0
  0x00007f8ab914478e: vmovdqu 0x50(%rdx),%xmm2
  0x00007f8ab9144793: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab9144798: vmovdqu 0x60(%rdx),%xmm3
  0x00007f8ab914479d: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab91447a2: vmovdqu 0x70(%rdx),%xmm4
  0x00007f8ab91447a7: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f8ab91447ac: vmovdqu 0x80(%rdx),%xmm5
  0x00007f8ab91447b4: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f8ab91447b9: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f8ab91447be: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f8ab91447c3: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f8ab91447c8: vaesdec %xmm5,%xmm0,%xmm0
  0x00007f8ab91447cd: vmovdqu 0x90(%rdx),%xmm2
  0x00007f8ab91447d5: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab91447da: vmovdqu 0xa0(%rdx),%xmm3
  0x00007f8ab91447e2: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab91447e7: vmovdqu (%rdx),%xmm4
  0x00007f8ab91447eb: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f8ab91447f0: cmp    $0x2c,%eax
  0x00007f8ab91447f3: je     Stub::aescrypt_decryptBlock+258 0x0x7f8ab9144842
  0x00007f8ab91447f5: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f8ab91447fa: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f8ab91447ff: vmovdqu 0xb0(%rdx),%xmm2
  0x00007f8ab9144807: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab914480c: vmovdqu 0xc0(%rdx),%xmm3
  0x00007f8ab9144814: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab9144819: cmp    $0x34,%eax
  0x00007f8ab914481c: je     Stub::aescrypt_decryptBlock+258 0x0x7f8ab9144842
  0x00007f8ab914481e: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f8ab9144823: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f8ab9144828: vmovdqu 0xd0(%rdx),%xmm2
  0x00007f8ab9144830: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab9144835: vmovdqu 0xe0(%rdx),%xmm3
  0x00007f8ab914483d: vpshufb %xmm1,%xmm3,%xmm3
  ;; L_doLast:
  0x00007f8ab9144842: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f8ab9144847: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f8ab914484c: vaesdeclast %xmm4,%xmm0,%xmm0
  0x00007f8ab9144851: vmovdqu %xmm0,(%rsi)
  0x00007f8ab9144855: xor    %rax,%rax
  0x00007f8ab9144858: leaveq 
  0x00007f8ab9144859: retq   

StubRoutines::cipherBlockChaining_encryptAESCrypt [0x00007f8ab9144860, 0x00007f8ab9144a88[ (552 bytes)
  0x00007f8ab9144860: push   %rbp
  0x00007f8ab9144861: mov    %rsp,%rbp
  0x00007f8ab9144864: push   %r8
  0x00007f8ab9144866: vmovdqu -0x26e(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f8ab914486e: vmovdqu (%rdx),%xmm2
  0x00007f8ab9144872: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f8ab9144877: vmovdqu 0x10(%rdx),%xmm3
  0x00007f8ab914487c: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f8ab9144881: vmovdqu 0x20(%rdx),%xmm4
  0x00007f8ab9144886: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f8ab914488b: vmovdqu 0x30(%rdx),%xmm5
  0x00007f8ab9144890: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f8ab9144895: vmovdqu 0x40(%rdx),%xmm6
  0x00007f8ab914489a: vpshufb %xmm1,%xmm6,%xmm6
  0x00007f8ab914489f: vmovdqu 0x50(%rdx),%xmm7
  0x00007f8ab91448a4: vpshufb %xmm1,%xmm7,%xmm7
  0x00007f8ab91448a9: vmovdqu 0x60(%rdx),%xmm8
  0x00007f8ab91448ae: vpshufb %xmm1,%xmm8,%xmm8
  0x00007f8ab91448b3: vmovdqu 0x70(%rdx),%xmm9
  0x00007f8ab91448b8: vpshufb %xmm1,%xmm9,%xmm9
  0x00007f8ab91448bd: vmovdqu 0x80(%rdx),%xmm10
  0x00007f8ab91448c5: vpshufb %xmm1,%xmm10,%xmm10
  0x00007f8ab91448ca: vmovdqu 0x90(%rdx),%xmm11
  0x00007f8ab91448d2: vpshufb %xmm1,%xmm11,%xmm11
  0x00007f8ab91448d7: vmovdqu 0xa0(%rdx),%xmm12
  0x00007f8ab91448df: vpshufb %xmm1,%xmm12,%xmm12
  0x00007f8ab91448e4: vmovdqu (%rcx),%xmm0
  0x00007f8ab91448e8: mov    -0x4(%rdx),%eax
  0x00007f8ab91448eb: cmp    $0x2c,%eax
  0x00007f8ab91448ee: jne    Stub::cipherBlockChaining_encryptAESCrypt+245 0x0x7f8ab9144955
  0x00007f8ab91448f4: movabs $0x0,%rax
  0x00007f8ab91448fe: nop
  0x00007f8ab91448ff: nop
  ;; L_loopTop_128:
  0x00007f8ab9144900: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f8ab9144905: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9144909: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f8ab914490d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f8ab9144912: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f8ab9144917: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f8ab914491c: vaesenc %xmm6,%xmm0,%xmm0
  0x00007f8ab9144921: vaesenc %xmm7,%xmm0,%xmm0
  0x00007f8ab9144926: vaesenc %xmm8,%xmm0,%xmm0
  0x00007f8ab914492b: vaesenc %xmm9,%xmm0,%xmm0
  0x00007f8ab9144930: vaesenc %xmm10,%xmm0,%xmm0
  0x00007f8ab9144935: vaesenc %xmm11,%xmm0,%xmm0
  0x00007f8ab914493a: vaesenclast %xmm12,%xmm0,%xmm0
  0x00007f8ab914493f: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f8ab9144944: add    $0x10,%rax
  0x00007f8ab9144948: sub    $0x10,%r8
  0x00007f8ab914494c: jne    Stub::cipherBlockChaining_encryptAESCrypt+160 0x0x7f8ab9144900
  ;; L_exit:
  0x00007f8ab914494e: vmovdqu %xmm0,(%rcx)
  0x00007f8ab9144952: pop    %rax
  0x00007f8ab9144953: leaveq 
  0x00007f8ab9144954: retq   
  ;; L_key_192_256:
  0x00007f8ab9144955: vmovdqu 0xb0(%rdx),%xmm13
  0x00007f8ab914495d: vpshufb %xmm1,%xmm13,%xmm13
  0x00007f8ab9144962: vmovdqu 0xc0(%rdx),%xmm14
  0x00007f8ab914496a: vpshufb %xmm1,%xmm14,%xmm14
  0x00007f8ab914496f: cmp    $0x34,%eax
  0x00007f8ab9144972: jne    Stub::cipherBlockChaining_encryptAESCrypt+397 0x0x7f8ab91449ed
  0x00007f8ab9144978: movabs $0x0,%rax
  0x00007f8ab9144982: nop
  0x00007f8ab9144983: nop
  0x00007f8ab9144984: nop
  0x00007f8ab9144985: nop
  0x00007f8ab9144986: nop
  0x00007f8ab9144987: nop
  0x00007f8ab9144988: nop
  0x00007f8ab9144989: nop
  0x00007f8ab914498a: nop
  0x00007f8ab914498b: nop
  0x00007f8ab914498c: nop
  0x00007f8ab914498d: nop
  0x00007f8ab914498e: nop
  0x00007f8ab914498f: nop
  ;; L_loopTop_192:
  0x00007f8ab9144990: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f8ab9144995: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9144999: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f8ab914499d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f8ab91449a2: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f8ab91449a7: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f8ab91449ac: vaesenc %xmm6,%xmm0,%xmm0
  0x00007f8ab91449b1: vaesenc %xmm7,%xmm0,%xmm0
  0x00007f8ab91449b6: vaesenc %xmm8,%xmm0,%xmm0
  0x00007f8ab91449bb: vaesenc %xmm9,%xmm0,%xmm0
  0x00007f8ab91449c0: vaesenc %xmm10,%xmm0,%xmm0
  0x00007f8ab91449c5: vaesenc %xmm11,%xmm0,%xmm0
  0x00007f8ab91449ca: vaesenc %xmm12,%xmm0,%xmm0
  0x00007f8ab91449cf: vaesenc %xmm13,%xmm0,%xmm0
  0x00007f8ab91449d4: vaesenclast %xmm14,%xmm0,%xmm0
  0x00007f8ab91449d9: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f8ab91449de: add    $0x10,%rax
  0x00007f8ab91449e2: sub    $0x10,%r8
  0x00007f8ab91449e6: jne    Stub::cipherBlockChaining_encryptAESCrypt+304 0x0x7f8ab9144990
  0x00007f8ab91449e8: jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x0x7f8ab914494e
  ;; L_key_256:
  0x00007f8ab91449ed: vmovdqu 0xd0(%rdx),%xmm15
  0x00007f8ab91449f5: vpshufb %xmm1,%xmm15,%xmm15
  0x00007f8ab91449fa: movabs $0x0,%rax
  0x00007f8ab9144a04: nop
  0x00007f8ab9144a05: nop
  0x00007f8ab9144a06: nop
  0x00007f8ab9144a07: nop
  0x00007f8ab9144a08: nop
  0x00007f8ab9144a09: nop
  0x00007f8ab9144a0a: nop
  0x00007f8ab9144a0b: nop
  0x00007f8ab9144a0c: nop
  0x00007f8ab9144a0d: nop
  0x00007f8ab9144a0e: nop
  0x00007f8ab9144a0f: nop
  ;; L_loopTop_256:
  0x00007f8ab9144a10: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f8ab9144a15: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9144a19: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f8ab9144a1d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f8ab9144a22: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f8ab9144a27: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f8ab9144a2c: vaesenc %xmm6,%xmm0,%xmm0
  0x00007f8ab9144a31: vaesenc %xmm7,%xmm0,%xmm0
  0x00007f8ab9144a36: vaesenc %xmm8,%xmm0,%xmm0
  0x00007f8ab9144a3b: vaesenc %xmm9,%xmm0,%xmm0
  0x00007f8ab9144a40: vaesenc %xmm10,%xmm0,%xmm0
  0x00007f8ab9144a45: vaesenc %xmm11,%xmm0,%xmm0
  0x00007f8ab9144a4a: vaesenc %xmm12,%xmm0,%xmm0
  0x00007f8ab9144a4f: vaesenc %xmm13,%xmm0,%xmm0
  0x00007f8ab9144a54: vaesenc %xmm14,%xmm0,%xmm0
  0x00007f8ab9144a59: vaesenc %xmm15,%xmm0,%xmm0
  0x00007f8ab9144a5e: vmovdqu 0xe0(%rdx),%xmm1
  0x00007f8ab9144a66: vpshufb -0x46f(%rip),%xmm1,%xmm1        # Stub::key_shuffle_mask
  0x00007f8ab9144a6f: vaesenclast %xmm1,%xmm0,%xmm0
  0x00007f8ab9144a74: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f8ab9144a79: add    $0x10,%rax
  0x00007f8ab9144a7d: sub    $0x10,%r8
  0x00007f8ab9144a81: jne    Stub::cipherBlockChaining_encryptAESCrypt+432 0x0x7f8ab9144a10
  0x00007f8ab9144a83: jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x0x7f8ab914494e

StubRoutines::cipherBlockChaining_decryptAESCrypt [0x00007f8ab9144aa0, 0x00007f8ab9144e46[ (934 bytes)
  0x00007f8ab9144aa0: push   %rbp
  0x00007f8ab9144aa1: mov    %rsp,%rbp
  0x00007f8ab9144aa4: push   %r8
  0x00007f8ab9144aa6: vmovdqu -0x4ae(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f8ab9144aae: vmovdqu 0x10(%rdx),%xmm5
  0x00007f8ab9144ab3: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f8ab9144ab8: vmovdqu 0x20(%rdx),%xmm6
  0x00007f8ab9144abd: vpshufb %xmm1,%xmm6,%xmm6
  0x00007f8ab9144ac2: vmovdqu 0x30(%rdx),%xmm7
  0x00007f8ab9144ac7: vpshufb %xmm1,%xmm7,%xmm7
  0x00007f8ab9144acc: vmovdqu 0x40(%rdx),%xmm8
  0x00007f8ab9144ad1: vpshufb %xmm1,%xmm8,%xmm8
  0x00007f8ab9144ad6: vmovdqu 0x50(%rdx),%xmm9
  0x00007f8ab9144adb: vpshufb %xmm1,%xmm9,%xmm9
  0x00007f8ab9144ae0: vmovdqu 0x60(%rdx),%xmm10
  0x00007f8ab9144ae5: vpshufb %xmm1,%xmm10,%xmm10
  0x00007f8ab9144aea: vmovdqu 0x70(%rdx),%xmm11
  0x00007f8ab9144aef: vpshufb %xmm1,%xmm11,%xmm11
  0x00007f8ab9144af4: vmovdqu 0x80(%rdx),%xmm12
  0x00007f8ab9144afc: vpshufb %xmm1,%xmm12,%xmm12
  0x00007f8ab9144b01: vmovdqu 0x90(%rdx),%xmm13
  0x00007f8ab9144b09: vpshufb %xmm1,%xmm13,%xmm13
  0x00007f8ab9144b0e: vmovdqu 0xa0(%rdx),%xmm14
  0x00007f8ab9144b16: vpshufb %xmm1,%xmm14,%xmm14
  0x00007f8ab9144b1b: vmovdqu (%rdx),%xmm15
  0x00007f8ab9144b1f: vpshufb %xmm1,%xmm15,%xmm15
  0x00007f8ab9144b24: vmovdqu (%rcx),%xmm1
  0x00007f8ab9144b28: mov    -0x4(%rdx),%eax
  0x00007f8ab9144b2b: cmp    $0x2c,%eax
  0x00007f8ab9144b2e: jne    Stub::cipherBlockChaining_decryptAESCrypt+599 0x0x7f8ab9144cf7
  0x00007f8ab9144b34: movabs $0x0,%rax
  0x00007f8ab9144b3e: nop
  0x00007f8ab9144b3f: nop
  ;; L_multiBlock_loopTop_128:
  0x00007f8ab9144b40: cmp    $0x40,%r8
  0x00007f8ab9144b44: jl     Stub::cipherBlockChaining_decryptAESCrypt+496 0x0x7f8ab9144c90
  0x00007f8ab9144b4a: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f8ab9144b4f: vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f8ab9144b55: vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f8ab9144b5b: vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f8ab9144b61: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f8ab9144b65: vpxor  %xmm5,%xmm2,%xmm2
  0x00007f8ab9144b69: vpxor  %xmm5,%xmm3,%xmm3
  0x00007f8ab9144b6d: vpxor  %xmm5,%xmm4,%xmm4
  0x00007f8ab9144b71: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f8ab9144b76: vaesdec %xmm6,%xmm2,%xmm2
  0x00007f8ab9144b7b: vaesdec %xmm6,%xmm3,%xmm3
  0x00007f8ab9144b80: vaesdec %xmm6,%xmm4,%xmm4
  0x00007f8ab9144b85: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f8ab9144b8a: vaesdec %xmm7,%xmm2,%xmm2
  0x00007f8ab9144b8f: vaesdec %xmm7,%xmm3,%xmm3
  0x00007f8ab9144b94: vaesdec %xmm7,%xmm4,%xmm4
  0x00007f8ab9144b99: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f8ab9144b9e: vaesdec %xmm8,%xmm2,%xmm2
  0x00007f8ab9144ba3: vaesdec %xmm8,%xmm3,%xmm3
  0x00007f8ab9144ba8: vaesdec %xmm8,%xmm4,%xmm4
  0x00007f8ab9144bad: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f8ab9144bb2: vaesdec %xmm9,%xmm2,%xmm2
  0x00007f8ab9144bb7: vaesdec %xmm9,%xmm3,%xmm3
  0x00007f8ab9144bbc: vaesdec %xmm9,%xmm4,%xmm4
  0x00007f8ab9144bc1: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f8ab9144bc6: vaesdec %xmm10,%xmm2,%xmm2
  0x00007f8ab9144bcb: vaesdec %xmm10,%xmm3,%xmm3
  0x00007f8ab9144bd0: vaesdec %xmm10,%xmm4,%xmm4
  0x00007f8ab9144bd5: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f8ab9144bda: vaesdec %xmm11,%xmm2,%xmm2
  0x00007f8ab9144bdf: vaesdec %xmm11,%xmm3,%xmm3
  0x00007f8ab9144be4: vaesdec %xmm11,%xmm4,%xmm4
  0x00007f8ab9144be9: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f8ab9144bee: vaesdec %xmm12,%xmm2,%xmm2
  0x00007f8ab9144bf3: vaesdec %xmm12,%xmm3,%xmm3
  0x00007f8ab9144bf8: vaesdec %xmm12,%xmm4,%xmm4
  0x00007f8ab9144bfd: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f8ab9144c02: vaesdec %xmm13,%xmm2,%xmm2
  0x00007f8ab9144c07: vaesdec %xmm13,%xmm3,%xmm3
  0x00007f8ab9144c0c: vaesdec %xmm13,%xmm4,%xmm4
  0x00007f8ab9144c11: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f8ab9144c16: vaesdec %xmm14,%xmm2,%xmm2
  0x00007f8ab9144c1b: vaesdec %xmm14,%xmm3,%xmm3
  0x00007f8ab9144c20: vaesdec %xmm14,%xmm4,%xmm4
  0x00007f8ab9144c25: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f8ab9144c2a: vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f8ab9144c2f: vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f8ab9144c34: vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f8ab9144c39: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9144c3d: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f8ab9144c42: vpxor  %xmm1,%xmm2,%xmm2
  0x00007f8ab9144c46: vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f8ab9144c4c: vpxor  %xmm1,%xmm3,%xmm3
  0x00007f8ab9144c50: vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f8ab9144c56: vpxor  %xmm1,%xmm4,%xmm4
  0x00007f8ab9144c5a: vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f8ab9144c60: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f8ab9144c65: vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f8ab9144c6b: vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f8ab9144c71: vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f8ab9144c77: add    $0x40,%rax
  0x00007f8ab9144c7b: sub    $0x40,%r8
  0x00007f8ab9144c7f: jmpq   Stub::cipherBlockChaining_decryptAESCrypt+160 0x0x7f8ab9144b40
  0x00007f8ab9144c84: nop
  0x00007f8ab9144c85: nop
  0x00007f8ab9144c86: nop
  0x00007f8ab9144c87: nop
  0x00007f8ab9144c88: nop
  0x00007f8ab9144c89: nop
  0x00007f8ab9144c8a: nop
  0x00007f8ab9144c8b: nop
  0x00007f8ab9144c8c: nop
  0x00007f8ab9144c8d: nop
  0x00007f8ab9144c8e: nop
  0x00007f8ab9144c8f: nop
  ;; L_singleBlock_loopTop_128:
  0x00007f8ab9144c90: cmp    $0x0,%r8
  0x00007f8ab9144c94: je     Stub::cipherBlockChaining_decryptAESCrypt+592 0x0x7f8ab9144cf0
  0x00007f8ab9144c9a: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f8ab9144c9f: vmovdqa %xmm0,%xmm2
  0x00007f8ab9144ca3: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f8ab9144ca7: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f8ab9144cac: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f8ab9144cb1: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f8ab9144cb6: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f8ab9144cbb: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f8ab9144cc0: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f8ab9144cc5: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f8ab9144cca: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f8ab9144ccf: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f8ab9144cd4: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f8ab9144cd9: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9144cdd: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f8ab9144ce2: vmovdqa %xmm2,%xmm1
  0x00007f8ab9144ce6: add    $0x10,%rax
  0x00007f8ab9144cea: sub    $0x10,%r8
  0x00007f8ab9144cee: jmp    Stub::cipherBlockChaining_decryptAESCrypt+496 0x0x7f8ab9144c90
  ;; L_exit:
  0x00007f8ab9144cf0: vmovdqu %xmm1,(%rcx)
  0x00007f8ab9144cf4: pop    %rax
  0x00007f8ab9144cf5: leaveq 
  0x00007f8ab9144cf6: retq   
  ;; L_key_192_256:
  0x00007f8ab9144cf7: vmovdqu 0xb0(%rdx),%xmm3
  0x00007f8ab9144cff: vpshufb -0x708(%rip),%xmm3,%xmm3        # Stub::key_shuffle_mask
  0x00007f8ab9144d08: cmp    $0x34,%eax
  0x00007f8ab9144d0b: jne    Stub::cipherBlockChaining_decryptAESCrypt+757 0x0x7f8ab9144d95
  0x00007f8ab9144d11: vmovdqu 0xc0(%rdx),%xmm4
  0x00007f8ab9144d19: vpshufb -0x722(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f8ab9144d22: movabs $0x0,%rax
  0x00007f8ab9144d2c: nop
  0x00007f8ab9144d2d: nop
  0x00007f8ab9144d2e: nop
  0x00007f8ab9144d2f: nop
  ;; L_singleBlock_loopTop_192:
  0x00007f8ab9144d30: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f8ab9144d35: vmovdqa %xmm0,%xmm2
  0x00007f8ab9144d39: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f8ab9144d3d: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f8ab9144d42: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f8ab9144d47: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f8ab9144d4c: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f8ab9144d51: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f8ab9144d56: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f8ab9144d5b: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f8ab9144d60: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f8ab9144d65: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f8ab9144d6a: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f8ab9144d6f: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f8ab9144d74: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f8ab9144d79: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9144d7d: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f8ab9144d82: vmovdqa %xmm2,%xmm1
  0x00007f8ab9144d86: add    $0x10,%rax
  0x00007f8ab9144d8a: sub    $0x10,%r8
  0x00007f8ab9144d8e: jne    Stub::cipherBlockChaining_decryptAESCrypt+656 0x0x7f8ab9144d30
  0x00007f8ab9144d90: jmpq   Stub::cipherBlockChaining_decryptAESCrypt+592 0x0x7f8ab9144cf0
  ;; L_key_256:
  0x00007f8ab9144d95: movabs $0x0,%rax
  0x00007f8ab9144d9f: nop
  ;; L_singleBlock_loopTop_256:
  0x00007f8ab9144da0: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f8ab9144da5: vmovdqa %xmm0,%xmm2
  0x00007f8ab9144da9: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f8ab9144dad: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f8ab9144db2: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f8ab9144db7: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f8ab9144dbc: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f8ab9144dc1: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f8ab9144dc6: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f8ab9144dcb: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f8ab9144dd0: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f8ab9144dd5: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f8ab9144dda: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f8ab9144ddf: vmovdqu 0xc0(%rdx),%xmm4
  0x00007f8ab9144de7: vpshufb -0x7f0(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f8ab9144df0: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f8ab9144df5: vmovdqu 0xd0(%rdx),%xmm4
  0x00007f8ab9144dfd: vpshufb -0x806(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f8ab9144e06: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f8ab9144e0b: vmovdqu 0xe0(%rdx),%xmm4
  0x00007f8ab9144e13: vpshufb -0x81c(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f8ab9144e1c: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f8ab9144e21: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f8ab9144e26: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f8ab9144e2a: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f8ab9144e2f: vmovdqa %xmm2,%xmm1
  0x00007f8ab9144e33: add    $0x10,%rax
  0x00007f8ab9144e37: sub    $0x10,%r8
  0x00007f8ab9144e3b: jne    Stub::cipherBlockChaining_decryptAESCrypt+768 0x0x7f8ab9144da0
  0x00007f8ab9144e41: jmpq   Stub::cipherBlockChaining_decryptAESCrypt+592 0x0x7f8ab9144cf0

StubRoutines::SafeFetch32 [0x00007f8ab9144e46, 0x00007f8ab9144e4c[ (6 bytes)
  0x00007f8ab9144e46: mov    (%rdi),%esi
  0x00007f8ab9144e48: mov    %rsi,%rax
  0x00007f8ab9144e4b: retq   

StubRoutines::SafeFetchN [0x00007f8ab9144e4c, 0x00007f8ab9144e53[ (7 bytes)
  0x00007f8ab9144e4c: mov    (%rdi),%rsi
  0x00007f8ab9144e4f: mov    %rsi,%rax
  0x00007f8ab9144e52: retq   

StubRoutines::multiplyToLen [0x00007f8ab9144e60, 0x00007f8ab9145079[ (537 bytes)
  ;; Entry:
  0x00007f8ab9144e60: push   %rbp
  0x00007f8ab9144e61: mov    %rsp,%rbp
  0x00007f8ab9144e64: mov    %r9,%r11
  0x00007f8ab9144e67: mov    %rsi,%rax
  0x00007f8ab9144e6a: mov    %rdx,%rsi
  0x00007f8ab9144e6d: push   %r12
  0x00007f8ab9144e6f: push   %r13
  0x00007f8ab9144e71: push   %r14
  0x00007f8ab9144e73: push   %r15
  0x00007f8ab9144e75: push   %rbx
  0x00007f8ab9144e76: push   %rax
  0x00007f8ab9144e77: push   %r11
  0x00007f8ab9144e79: mov    %ecx,%r12d
  0x00007f8ab9144e7c: mov    %r11d,%r13d
  0x00007f8ab9144e7f: xor    %rbx,%rbx
  0x00007f8ab9144e82: mov    %eax,%r14d
  0x00007f8ab9144e85: dec    %r14d
  0x00007f8ab9144e88: js     Stub::multiplyToLen+523 0x0x7f8ab914506b
  0x00007f8ab9144e8e: dec    %r14d
  0x00007f8ab9144e91: js     Stub::multiplyToLen+129 0x0x7f8ab9144ee1
  0x00007f8ab9144e97: mov    (%rdi,%r14,4),%r11
  0x00007f8ab9144e9b: ror    $0x20,%r11
  0x00007f8ab9144e9f: dec    %r12d
  0x00007f8ab9144ea2: js     Stub::multiplyToLen+134 0x0x7f8ab9144ee6
  0x00007f8ab9144ea8: dec    %r12d
  0x00007f8ab9144eab: js     Stub::multiplyToLen+124 0x0x7f8ab9144edc
  0x00007f8ab9144eb1: mov    (%rsi,%r12,4),%r15
  0x00007f8ab9144eb5: ror    $0x20,%r15
  0x00007f8ab9144eb9: mov    %r11,%rax
  0x00007f8ab9144ebc: mul    %r15
  0x00007f8ab9144ebf: add    %rbx,%rax
  0x00007f8ab9144ec2: adc    $0x0,%rdx
  0x00007f8ab9144ec6: sub    $0x2,%r13d
  0x00007f8ab9144eca: mov    %eax,0x4(%r8,%r13,4)
  0x00007f8ab9144ecf: shr    $0x20,%rax
  0x00007f8ab9144ed3: mov    %eax,(%r8,%r13,4)
  0x00007f8ab9144ed7: mov    %rdx,%rbx
  0x00007f8ab9144eda: jmp    Stub::multiplyToLen+63 0x0x7f8ab9144e9f
  0x00007f8ab9144edc: mov    (%rsi),%r15d
  0x00007f8ab9144edf: jmp    Stub::multiplyToLen+89 0x0x7f8ab9144eb9
  0x00007f8ab9144ee1: mov    (%rdi),%r11d
  0x00007f8ab9144ee4: jmp    Stub::multiplyToLen+63 0x0x7f8ab9144e9f
  0x00007f8ab9144ee6: test   %r13d,%r13d
  0x00007f8ab9144ee9: je     Stub::multiplyToLen+169 0x0x7f8ab9144f09
  0x00007f8ab9144eef: sub    $0x1,%r13d
  0x00007f8ab9144ef3: je     Stub::multiplyToLen+165 0x0x7f8ab9144f05
  0x00007f8ab9144ef9: mov    %ebx,(%r8,%r13,4)
  0x00007f8ab9144efd: shr    $0x20,%rbx
  0x00007f8ab9144f01: sub    $0x1,%r13d
  0x00007f8ab9144f05: mov    %ebx,(%r8,%r13,4)
  0x00007f8ab9144f09: xor    %ebx,%ebx
  0x00007f8ab9144f0b: mov    %ecx,%r12d
  0x00007f8ab9144f0e: sub    $0x1,%r14d
  0x00007f8ab9144f12: js     Stub::multiplyToLen+523 0x0x7f8ab914506b
  0x00007f8ab9144f18: push   %r8
  0x00007f8ab9144f1a: lea    0x4(%r8,%r14,4),%r8
  0x00007f8ab9144f1f: sub    $0x1,%r14d
  0x00007f8ab9144f23: js     Stub::multiplyToLen+515 0x0x7f8ab9145063
  0x00007f8ab9144f29: mov    (%rdi,%r14,4),%r11
  0x00007f8ab9144f2d: ror    $0x20,%r11
  0x00007f8ab9144f31: push   %rdi
  0x00007f8ab9144f32: push   %r14
  0x00007f8ab9144f34: push   %rcx
  0x00007f8ab9144f35: mov    %r12d,%ecx
  0x00007f8ab9144f38: and    $0xfffffffc,%ecx
  0x00007f8ab9144f3b: shr    $0x2,%ecx
  0x00007f8ab9144f3e: sub    $0x1,%ecx
  0x00007f8ab9144f41: js     Stub::multiplyToLen+344 0x0x7f8ab9144fb8
  0x00007f8ab9144f47: sub    $0x4,%r12d
  0x00007f8ab9144f4b: mov    0x8(%rsi,%r12,4),%r15
  0x00007f8ab9144f50: ror    $0x20,%r15
  0x00007f8ab9144f54: mov    %r11,%rax
  0x00007f8ab9144f57: mul    %r15
  0x00007f8ab9144f5a: mov    0x8(%r8,%r12,4),%r15
  0x00007f8ab9144f5f: ror    $0x20,%r15
  0x00007f8ab9144f63: add    %rbx,%rax
  0x00007f8ab9144f66: adc    $0x0,%rdx
  0x00007f8ab9144f6a: add    %r15,%rax
  0x00007f8ab9144f6d: adc    $0x0,%rdx
  0x00007f8ab9144f71: mov    %eax,0xc(%r8,%r12,4)
  0x00007f8ab9144f76: shr    $0x20,%rax
  0x00007f8ab9144f7a: mov    %eax,0x8(%r8,%r12,4)
  0x00007f8ab9144f7f: mov    %rdx,%rdi
  0x00007f8ab9144f82: mov    (%rsi,%r12,4),%r15
  0x00007f8ab9144f86: ror    $0x20,%r15
  0x00007f8ab9144f8a: mov    %r11,%rax
  0x00007f8ab9144f8d: mul    %r15
  0x00007f8ab9144f90: mov    (%r8,%r12,4),%r15
  0x00007f8ab9144f94: ror    $0x20,%r15
  0x00007f8ab9144f98: add    %rdi,%rax
  0x00007f8ab9144f9b: adc    $0x0,%rdx
  0x00007f8ab9144f9f: add    %r15,%rax
  0x00007f8ab9144fa2: adc    $0x0,%rdx
  0x00007f8ab9144fa6: mov    %eax,0x4(%r8,%r12,4)
  0x00007f8ab9144fab: shr    $0x20,%rax
  0x00007f8ab9144faf: mov    %eax,(%r8,%r12,4)
  0x00007f8ab9144fb3: mov    %rdx,%rbx
  0x00007f8ab9144fb6: jmp    Stub::multiplyToLen+222 0x0x7f8ab9144f3e
  0x00007f8ab9144fb8: and    $0x3,%r12d
  0x00007f8ab9144fbc: je     Stub::multiplyToLen+480 0x0x7f8ab9145040
  0x00007f8ab9144fc2: sub    $0x2,%r12d
  0x00007f8ab9144fc6: js     Stub::multiplyToLen+416 0x0x7f8ab9145000
  0x00007f8ab9144fcc: mov    (%rsi,%r12,4),%r15
  0x00007f8ab9144fd0: ror    $0x20,%r15
  0x00007f8ab9144fd4: mov    %r11,%rax
  0x00007f8ab9144fd7: mul    %r15
  0x00007f8ab9144fda: mov    (%r8,%r12,4),%r15
  0x00007f8ab9144fde: ror    $0x20,%r15
  0x00007f8ab9144fe2: add    %rbx,%rax
  0x00007f8ab9144fe5: adc    $0x0,%rdx
  0x00007f8ab9144fe9: add    %r15,%rax
  0x00007f8ab9144fec: adc    $0x0,%rdx
  0x00007f8ab9144ff0: mov    %eax,0x4(%r8,%r12,4)
  0x00007f8ab9144ff5: shr    $0x20,%rax
  0x00007f8ab9144ff9: mov    %eax,(%r8,%r12,4)
  0x00007f8ab9144ffd: mov    %rdx,%rbx
  0x00007f8ab9145000: add    $0x2,%r12d
  0x00007f8ab9145004: and    $0x1,%r12d
  0x00007f8ab9145008: sub    $0x1,%r12d
  0x00007f8ab914500c: js     Stub::multiplyToLen+480 0x0x7f8ab9145040
  0x00007f8ab9145012: mov    (%rsi,%r12,4),%r15d
  0x00007f8ab9145016: mov    %r11,%rax
  0x00007f8ab9145019: mul    %r15
  0x00007f8ab914501c: mov    (%r8,%r12,4),%r15d
  0x00007f8ab9145020: add    %r15,%rax
  0x00007f8ab9145023: adc    $0x0,%rdx
  0x00007f8ab9145027: add    %rbx,%rax
  0x00007f8ab914502a: adc    $0x0,%rdx
  0x00007f8ab914502e: mov    %eax,(%r8,%r12,4)
  0x00007f8ab9145032: shr    $0x20,%rax
  0x00007f8ab9145036: shl    $0x20,%rdx
  0x00007f8ab914503a: or     %rdx,%rax
  0x00007f8ab914503d: mov    %rax,%rbx
  0x00007f8ab9145040: pop    %rcx
  0x00007f8ab9145041: pop    %rax
  0x00007f8ab9145042: pop    %rdi
  0x00007f8ab9145043: pop    %r8
  0x00007f8ab9145045: mov    %eax,%r14d
  0x00007f8ab9145048: add    $0x1,%r14d
  0x00007f8ab914504c: mov    %ebx,(%r8,%r14,4)
  0x00007f8ab9145050: sub    $0x1,%r14d
  0x00007f8ab9145054: js     Stub::multiplyToLen+523 0x0x7f8ab914506b
  0x00007f8ab9145056: shr    $0x20,%rbx
  0x00007f8ab914505a: mov    %ebx,(%r8,%r14,4)
  0x00007f8ab914505e: jmpq   Stub::multiplyToLen+169 0x0x7f8ab9144f09
  0x00007f8ab9145063: mov    (%rdi),%r11d
  0x00007f8ab9145066: jmpq   Stub::multiplyToLen+209 0x0x7f8ab9144f31
  0x00007f8ab914506b: pop    %r11
  0x00007f8ab914506d: pop    %rax
  0x00007f8ab914506e: pop    %rbx
  0x00007f8ab914506f: pop    %r15
  0x00007f8ab9145071: pop    %r14
  0x00007f8ab9145073: pop    %r13
  0x00007f8ab9145075: pop    %r12
  0x00007f8ab9145077: leaveq 
  0x00007f8ab9145078: retq   

StubRoutines::squareToLen [0x00007f8ab9145080, 0x00007f8ab91451ad[ (301 bytes)
  ;; Entry:
  0x00007f8ab9145080: push   %rbp
  0x00007f8ab9145081: mov    %rsp,%rbp
  0x00007f8ab9145084: mov    %rdx,%r8
  0x00007f8ab9145087: push   %r12
  0x00007f8ab9145089: push   %r13
  0x00007f8ab914508b: push   %r14
  0x00007f8ab914508d: push   %r15
  0x00007f8ab914508f: push   %rbx
  0x00007f8ab9145090: xor    %rbx,%rbx
  0x00007f8ab9145093: xor    %rdx,%rdx
  0x00007f8ab9145096: xor    %r12d,%r12d
  0x00007f8ab9145099: xor    %r15d,%r15d
  0x00007f8ab914509c: test   $0x1,%esi
  0x00007f8ab91450a2: je     Stub::squareToLen+63 0x0x7f8ab91450bf
  0x00007f8ab91450a4: mov    (%rdi,%r12,4),%eax
  0x00007f8ab91450a8: imul   %rax,%rax
  0x00007f8ab91450ac: shr    $0x1,%rax
  0x00007f8ab91450b0: adc    $0x0,%rbx
  0x00007f8ab91450b4: mov    %rax,(%r8,%r15,4)
  0x00007f8ab91450b8: inc    %r12d
  0x00007f8ab91450bb: add    $0x2,%r15d
  0x00007f8ab91450bf: cmp    %rsi,%r12
  0x00007f8ab91450c2: je     Stub::squareToLen+112 0x0x7f8ab91450f0
  0x00007f8ab91450c4: mov    (%rdi,%r12,4),%rax
  0x00007f8ab91450c8: ror    $0x20,%rax
  0x00007f8ab91450cc: mul    %rax
  0x00007f8ab91450cf: shr    $0x1,%rbx
  0x00007f8ab91450d3: rcr    %rdx
  0x00007f8ab91450d6: rcr    %rax
  0x00007f8ab91450d9: adc    $0x0,%rbx
  0x00007f8ab91450dd: mov    %rdx,(%r8,%r15,4)
  0x00007f8ab91450e1: mov    %rax,0x8(%r8,%r15,4)
  0x00007f8ab91450e6: add    $0x2,%r12d
  0x00007f8ab91450ea: add    $0x4,%r15d
  0x00007f8ab91450ee: jmp    Stub::squareToLen+63 0x0x7f8ab91450bf
  0x00007f8ab91450f0: push   %rcx
  0x00007f8ab91450f1: push   %rsi
  0x00007f8ab91450f2: add    $0x2,%ecx
  0x00007f8ab91450f5: xor    %rbx,%rbx
  0x00007f8ab91450f8: sub    $0x4,%ecx
  0x00007f8ab91450fb: sub    $0x2,%esi
  0x00007f8ab91450fe: push   %rcx
  0x00007f8ab91450ff: push   %rsi
  0x00007f8ab9145100: cmp    $0x0,%esi
  0x00007f8ab9145103: jle    Stub::squareToLen+228 0x0x7f8ab9145164
  0x00007f8ab9145105: mov    (%rdi,%rsi,4),%r13
  0x00007f8ab9145109: ror    $0x20,%r13
  0x00007f8ab914510d: dec    %esi
  0x00007f8ab914510f: js     Stub::squareToLen+193 0x0x7f8ab9145141
  0x00007f8ab9145111: dec    %esi
  0x00007f8ab9145113: js     Stub::squareToLen+223 0x0x7f8ab914515f
  0x00007f8ab9145115: mov    (%rdi,%rsi,4),%r15
  0x00007f8ab9145119: ror    $0x20,%r15
  0x00007f8ab914511d: sub    $0x2,%ecx
  0x00007f8ab9145120: mov    (%r8,%rcx,4),%r14
  0x00007f8ab9145124: mov    %r13,%rax
  0x00007f8ab9145127: mul    %r15
  0x00007f8ab914512a: add    %rbx,%r14
  0x00007f8ab914512d: adc    $0x0,%rdx
  0x00007f8ab9145131: add    %rax,%r14
  0x00007f8ab9145134: adc    $0x0,%rdx
  0x00007f8ab9145138: mov    %rdx,%rbx
  0x00007f8ab914513b: mov    %r14,(%r8,%rcx,4)
  0x00007f8ab914513f: jmp    Stub::squareToLen+141 0x0x7f8ab914510d
  0x00007f8ab9145141: mov    $0x1,%r12d
  0x00007f8ab9145147: sub    $0x2,%ecx
  0x00007f8ab914514a: add    %rbx,(%r8,%rcx,4)
  0x00007f8ab914514e: jae    Stub::squareToLen+219 0x0x7f8ab914515b
  0x00007f8ab9145150: sub    $0x2,%ecx
  0x00007f8ab9145153: js     Stub::squareToLen+219 0x0x7f8ab914515b
  0x00007f8ab9145155: add    %r12,(%r8,%rcx,4)
  0x00007f8ab9145159: jmp    Stub::squareToLen+206 0x0x7f8ab914514e
  0x00007f8ab914515b: pop    %rsi
  0x00007f8ab914515c: pop    %rcx
  0x00007f8ab914515d: jmp    Stub::squareToLen+117 0x0x7f8ab91450f5
  0x00007f8ab914515f: mov    (%rdi),%r15d
  0x00007f8ab9145162: jmp    Stub::squareToLen+157 0x0x7f8ab914511d
  0x00007f8ab9145164: pop    %rsi
  0x00007f8ab9145165: pop    %rcx
  0x00007f8ab9145166: pop    %rsi
  0x00007f8ab9145167: pop    %rcx
  0x00007f8ab9145168: mov    %ecx,%r14d
  0x00007f8ab914516b: xor    %r12d,%r12d
  0x00007f8ab914516e: dec    %r14d
  0x00007f8ab9145171: dec    %r14d
  0x00007f8ab9145174: js     Stub::squareToLen+276 0x0x7f8ab9145194
  0x00007f8ab9145176: xor    %r15d,%r15d
  0x00007f8ab9145179: mov    (%r8,%r14,4),%r13
  0x00007f8ab914517d: shl    %r13
  0x00007f8ab9145180: adc    $0x0,%r15d
  0x00007f8ab9145184: or     %r12,%r13
  0x00007f8ab9145187: ror    $0x20,%r13
  0x00007f8ab914518b: mov    %r13,(%r8,%r14,4)
  0x00007f8ab914518f: mov    %r15d,%r12d
  0x00007f8ab9145192: jmp    Stub::squareToLen+238 0x0x7f8ab914516e
  0x00007f8ab9145194: mov    -0x4(%rdi,%rsi,4),%r14d
  0x00007f8ab9145199: and    $0x1,%r14d
  0x00007f8ab914519d: or     %r14d,-0x4(%r8,%rcx,4)
  0x00007f8ab91451a2: pop    %rbx
  0x00007f8ab91451a3: pop    %r15
  0x00007f8ab91451a5: pop    %r14
  0x00007f8ab91451a7: pop    %r13
  0x00007f8ab91451a9: pop    %r12
  0x00007f8ab91451ab: leaveq 
  0x00007f8ab91451ac: retq   

StubRoutines::mulAdd [0x00007f8ab91451c0, 0x00007f8ab91452ba[ (250 bytes)
  ;; Entry:
  0x00007f8ab91451c0: push   %rbp
  0x00007f8ab91451c1: mov    %rsp,%rbp
  0x00007f8ab91451c4: mov    %rdx,%r11
  0x00007f8ab91451c7: push   %r12
  0x00007f8ab91451c9: push   %r13
  0x00007f8ab91451cb: push   %r14
  0x00007f8ab91451cd: push   %r15
  0x00007f8ab91451cf: push   %rbx
  0x00007f8ab91451d0: mov    %r8d,%r13d
  0x00007f8ab91451d3: xor    %rbx,%rbx
  0x00007f8ab91451d6: mov    %ecx,%r12d
  0x00007f8ab91451d9: shr    $0x2,%r12d
  0x00007f8ab91451dd: sub    $0x1,%r12d
  0x00007f8ab91451e1: js     Stub::mulAdd+141 0x0x7f8ab914524d
  0x00007f8ab91451e3: sub    $0x4,%ecx
  0x00007f8ab91451e6: sub    $0x4,%r11d
  0x00007f8ab91451ea: mov    0x8(%rsi,%rcx,4),%r15
  0x00007f8ab91451ef: ror    $0x20,%r15
  0x00007f8ab91451f3: mov    0x8(%rdi,%r11,4),%r14
  0x00007f8ab91451f8: ror    $0x20,%r14
  0x00007f8ab91451fc: mov    %r13,%rax
  0x00007f8ab91451ff: mul    %r15
  0x00007f8ab9145202: add    %rbx,%r14
  0x00007f8ab9145205: adc    $0x0,%rdx
  0x00007f8ab9145209: add    %rax,%r14
  0x00007f8ab914520c: adc    $0x0,%rdx
  0x00007f8ab9145210: mov    %rdx,%rbx
  0x00007f8ab9145213: ror    $0x20,%r14
  0x00007f8ab9145217: mov    %r14,0x8(%rdi,%r11,4)
  0x00007f8ab914521c: mov    (%rsi,%rcx,4),%r15
  0x00007f8ab9145220: ror    $0x20,%r15
  0x00007f8ab9145224: mov    (%rdi,%r11,4),%r14
  0x00007f8ab9145228: ror    $0x20,%r14
  0x00007f8ab914522c: mov    %r13,%rax
  0x00007f8ab914522f: mul    %r15
  0x00007f8ab9145232: add    %rbx,%r14
  0x00007f8ab9145235: adc    $0x0,%rdx
  0x00007f8ab9145239: add    %rax,%r14
  0x00007f8ab914523c: adc    $0x0,%rdx
  0x00007f8ab9145240: mov    %rdx,%rbx
  0x00007f8ab9145243: ror    $0x20,%r14
  0x00007f8ab9145247: mov    %r14,(%rdi,%r11,4)
  0x00007f8ab914524b: jmp    Stub::mulAdd+29 0x0x7f8ab91451dd
  0x00007f8ab914524d: dec    %ecx
  0x00007f8ab914524f: js     Stub::mulAdd+237 0x0x7f8ab91452ad
  0x00007f8ab9145251: dec    %ecx
  0x00007f8ab9145253: js     Stub::mulAdd+204 0x0x7f8ab914528c
  0x00007f8ab9145255: mov    (%rsi,%rcx,4),%r15
  0x00007f8ab9145259: ror    $0x20,%r15
  0x00007f8ab914525d: sub    $0x2,%r11d
  0x00007f8ab9145261: mov    (%rdi,%r11,4),%r14
  0x00007f8ab9145265: ror    $0x20,%r14
  0x00007f8ab9145269: mov    %r13,%rax
  0x00007f8ab914526c: mul    %r15
  0x00007f8ab914526f: add    %rbx,%r14
  0x00007f8ab9145272: adc    $0x0,%rdx
  0x00007f8ab9145276: add    %rax,%r14
  0x00007f8ab9145279: adc    $0x0,%rdx
  0x00007f8ab914527d: mov    %rdx,%rbx
  0x00007f8ab9145280: ror    $0x20,%r14
  0x00007f8ab9145284: mov    %r14,(%rdi,%r11,4)
  0x00007f8ab9145288: test   %ecx,%ecx
  0x00007f8ab914528a: je     Stub::mulAdd+237 0x0x7f8ab91452ad
  0x00007f8ab914528c: mov    (%rsi),%r15d
  0x00007f8ab914528f: mov    -0x4(%rdi,%r11,4),%r14d
  0x00007f8ab9145294: mov    %r8d,%eax
  0x00007f8ab9145297: mul    %r15d
  0x00007f8ab914529a: add    %ebx,%r14d
  0x00007f8ab914529d: adc    $0x0,%edx
  0x00007f8ab91452a0: add    %eax,%r14d
  0x00007f8ab91452a3: adc    $0x0,%edx
  0x00007f8ab91452a6: mov    %edx,%ebx
  0x00007f8ab91452a8: mov    %r14d,-0x4(%rdi,%r11,4)
  0x00007f8ab91452ad: mov    %ebx,%eax
  0x00007f8ab91452af: pop    %rbx
  0x00007f8ab91452b0: pop    %r15
  0x00007f8ab91452b2: pop    %r14
  0x00007f8ab91452b4: pop    %r13
  0x00007f8ab91452b6: pop    %r12
  0x00007f8ab91452b8: leaveq 
  0x00007f8ab91452b9: retq   

AHE@0x00007f8ac80ebab8: 0xb0000000 i2c: 0x00007f8ab91466a0 c2i: 0x00007f8ab91467da c2iUV: 0x00007f8ab91467ad
i2c argument handler #0 for: receiver ()Ljava/util/Spliterator$OfInt; (577 bytes generated)
c2i argument handler starts at 0x7f8ab91467da
  0x00007f8ab91466a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91466a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91466ae: cmp    %r11,%rax
  0x00007f8ab91466b1: jbe    0x00007f8ab91466ca
  0x00007f8ab91466b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91466c1: cmp    %r11,%rax
  0x00007f8ab91466c4: jb     0x00007f8ab914678d
  0x00007f8ab91466ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91466d4: cmp    %r11,%rax
  0x00007f8ab91466d7: jbe    0x00007f8ab91466f0
  0x00007f8ab91466dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91466e7: cmp    %r11,%rax
  0x00007f8ab91466ea: jb     0x00007f8ab914678d
  0x00007f8ab91466f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91466fa: cmp    %r11,%rax
  0x00007f8ab91466fd: jbe    0x00007f8ab9146716
  0x00007f8ab9146703: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914670d: cmp    %r11,%rax
  0x00007f8ab9146710: jb     0x00007f8ab914678d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9146716: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914671b: sub    $0x80,%rsp
  0x00007f8ab9146722: mov    %rax,0x78(%rsp)
  0x00007f8ab9146727: mov    %rcx,0x70(%rsp)
  0x00007f8ab914672c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9146731: mov    %rbx,0x60(%rsp)
  0x00007f8ab9146736: mov    %rbp,0x50(%rsp)
  0x00007f8ab914673b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9146740: mov    %rdi,0x40(%rsp)
  0x00007f8ab9146745: mov    %r8,0x38(%rsp)
  0x00007f8ab914674a: mov    %r9,0x30(%rsp)
  0x00007f8ab914674f: mov    %r10,0x28(%rsp)
  0x00007f8ab9146754: mov    %r11,0x20(%rsp)
  0x00007f8ab9146759: mov    %r12,0x18(%rsp)
  0x00007f8ab914675e: mov    %r13,0x10(%rsp)
  0x00007f8ab9146763: mov    %r14,0x8(%rsp)
  0x00007f8ab9146768: mov    %r15,(%rsp)
  0x00007f8ab914676c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9146776: movabs $0x7f8ab9146716,%rsi
  0x00007f8ab9146780: mov    %rsp,%rdx
  0x00007f8ab9146783: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146787: callq  0x00007f8aceddb9fa
  0x00007f8ab914678c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914678d: mov    %rsp,%r11
  0x00007f8ab9146790: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146794: push   %rax
  0x00007f8ab9146795: mov    %r11,%rax
  0x00007f8ab9146798: mov    0x50(%rbx),%r11
  0x00007f8ab914679c: mov    0x8(%rax),%rsi
  0x00007f8ab91467a0: mov    %rbx,0x258(%r15)
  0x00007f8ab91467a7: mov    %rbx,%rax
  0x00007f8ab91467aa: jmpq   *%r11
  0x00007f8ab91467ad: mov    0x8(%rsi),%ebx
  0x00007f8ab91467b0: shl    $0x3,%rbx
  0x00007f8ab91467b4: cmp    0x10(%rax),%rbx
  0x00007f8ab91467b8: mov    0x8(%rax),%rbx
  0x00007f8ab91467bc: je     0x00007f8ab91467c7
  0x00007f8ab91467c2: jmpq   0x00007f8ab9105c40
  0x00007f8ab91467c7: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91467cf: je     0x00007f8ab91468ca
  0x00007f8ab91467d5: jmpq   0x00007f8ab9105c40
  0x00007f8ab91467da: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91467e2: je     0x00007f8ab91468ca
  0x00007f8ab91467e8: mov    %rsp,%r13
  0x00007f8ab91467eb: mov    (%rsp),%rax
  0x00007f8ab91467ef: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91467f3: pushfq 
  0x00007f8ab91467f4: sub    $0x8,%rsp
  0x00007f8ab91467f8: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91467fd: sub    $0x80,%rsp
  0x00007f8ab9146804: mov    %rax,0x78(%rsp)
  0x00007f8ab9146809: mov    %rcx,0x70(%rsp)
  0x00007f8ab914680e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9146813: mov    %rbx,0x60(%rsp)
  0x00007f8ab9146818: mov    %rbp,0x50(%rsp)
  0x00007f8ab914681d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9146822: mov    %rdi,0x40(%rsp)
  0x00007f8ab9146827: mov    %r8,0x38(%rsp)
  0x00007f8ab914682c: mov    %r9,0x30(%rsp)
  0x00007f8ab9146831: mov    %r10,0x28(%rsp)
  0x00007f8ab9146836: mov    %r11,0x20(%rsp)
  0x00007f8ab914683b: mov    %r12,0x18(%rsp)
  0x00007f8ab9146840: mov    %r13,0x10(%rsp)
  0x00007f8ab9146845: mov    %r14,0x8(%rsp)
  0x00007f8ab914684a: mov    %r15,(%rsp)
  0x00007f8ab914684e: sub    $0x200,%rsp
  0x00007f8ab9146855: fxsave64 (%rsp)
  0x00007f8ab914685a: mov    %rbx,%rdi
  0x00007f8ab914685d: mov    %rax,%rsi
  0x00007f8ab9146860: callq  0x00007f8acef8bbca
  0x00007f8ab9146865: fxrstor64 (%rsp)
  0x00007f8ab914686a: add    $0x200,%rsp
  0x00007f8ab9146871: mov    (%rsp),%r15
  0x00007f8ab9146875: mov    0x8(%rsp),%r14
  0x00007f8ab914687a: mov    0x10(%rsp),%r13
  0x00007f8ab914687f: mov    0x18(%rsp),%r12
  0x00007f8ab9146884: mov    0x20(%rsp),%r11
  0x00007f8ab9146889: mov    0x28(%rsp),%r10
  0x00007f8ab914688e: mov    0x30(%rsp),%r9
  0x00007f8ab9146893: mov    0x38(%rsp),%r8
  0x00007f8ab9146898: mov    0x40(%rsp),%rdi
  0x00007f8ab914689d: mov    0x48(%rsp),%rsi
  0x00007f8ab91468a2: mov    0x50(%rsp),%rbp
  0x00007f8ab91468a7: mov    0x60(%rsp),%rbx
  0x00007f8ab91468ac: mov    0x68(%rsp),%rdx
  0x00007f8ab91468b1: mov    0x70(%rsp),%rcx
  0x00007f8ab91468b6: mov    0x78(%rsp),%rax
  0x00007f8ab91468bb: add    $0x80,%rsp
  0x00007f8ab91468c2: add    $0x8,%rsp
  0x00007f8ab91468c6: popfq  
  0x00007f8ab91468c7: mov    %r13,%rsp
  0x00007f8ab91468ca: pop    %rax
  0x00007f8ab91468cb: mov    %rsp,%r13
  0x00007f8ab91468ce: sub    $0x10,%rsp
  0x00007f8ab91468d2: mov    %rax,(%rsp)
  0x00007f8ab91468d6: mov    %rsi,0x8(%rsp)
  0x00007f8ab91468db: mov    0x40(%rbx),%rcx
  0x00007f8ab91468df: jmpq   *%rcx

AHE@0x00007f8ac80ebb00: 0xbaa00000 i2c: 0x00007f8ab9146d20 c2i: 0x00007f8ab9146e60 c2iUV: 0x00007f8ab9146e33
i2c argument handler #1 for: static ([CII)Ljava/lang/String; (591 bytes generated)
c2i argument handler starts at 0x7f8ab9146e60
  0x00007f8ab9146d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9146d24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9146d2e: cmp    %r11,%rax
  0x00007f8ab9146d31: jbe    0x00007f8ab9146d4a
  0x00007f8ab9146d37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9146d41: cmp    %r11,%rax
  0x00007f8ab9146d44: jb     0x00007f8ab9146e0d
  0x00007f8ab9146d4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9146d54: cmp    %r11,%rax
  0x00007f8ab9146d57: jbe    0x00007f8ab9146d70
  0x00007f8ab9146d5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9146d67: cmp    %r11,%rax
  0x00007f8ab9146d6a: jb     0x00007f8ab9146e0d
  0x00007f8ab9146d70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9146d7a: cmp    %r11,%rax
  0x00007f8ab9146d7d: jbe    0x00007f8ab9146d96
  0x00007f8ab9146d83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9146d8d: cmp    %r11,%rax
  0x00007f8ab9146d90: jb     0x00007f8ab9146e0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9146d96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9146d9b: sub    $0x80,%rsp
  0x00007f8ab9146da2: mov    %rax,0x78(%rsp)
  0x00007f8ab9146da7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9146dac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9146db1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9146db6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9146dbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9146dc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9146dc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9146dca: mov    %r9,0x30(%rsp)
  0x00007f8ab9146dcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9146dd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9146dd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9146dde: mov    %r13,0x10(%rsp)
  0x00007f8ab9146de3: mov    %r14,0x8(%rsp)
  0x00007f8ab9146de8: mov    %r15,(%rsp)
  0x00007f8ab9146dec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9146df6: movabs $0x7f8ab9146d96,%rsi
  0x00007f8ab9146e00: mov    %rsp,%rdx
  0x00007f8ab9146e03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146e07: callq  0x00007f8aceddb9fa
  0x00007f8ab9146e0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9146e0d: mov    %rsp,%r11
  0x00007f8ab9146e10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146e14: push   %rax
  0x00007f8ab9146e15: mov    %r11,%rax
  0x00007f8ab9146e18: mov    0x50(%rbx),%r11
  0x00007f8ab9146e1c: mov    0x18(%rax),%rsi
  0x00007f8ab9146e20: mov    0x10(%rax),%edx
  0x00007f8ab9146e23: mov    0x8(%rax),%ecx
  0x00007f8ab9146e26: mov    %rbx,0x258(%r15)
  0x00007f8ab9146e2d: mov    %rbx,%rax
  0x00007f8ab9146e30: jmpq   *%r11
  0x00007f8ab9146e33: mov    0x8(%rsi),%ebx
  0x00007f8ab9146e36: shl    $0x3,%rbx
  0x00007f8ab9146e3a: cmp    0x10(%rax),%rbx
  0x00007f8ab9146e3e: mov    0x8(%rax),%rbx
  0x00007f8ab9146e42: je     0x00007f8ab9146e4d
  0x00007f8ab9146e48: jmpq   0x00007f8ab9105c40
  0x00007f8ab9146e4d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9146e55: je     0x00007f8ab9146f50
  0x00007f8ab9146e5b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9146e60: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9146e68: je     0x00007f8ab9146f50
  0x00007f8ab9146e6e: mov    %rsp,%r13
  0x00007f8ab9146e71: mov    (%rsp),%rax
  0x00007f8ab9146e75: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9146e79: pushfq 
  0x00007f8ab9146e7a: sub    $0x8,%rsp
  0x00007f8ab9146e7e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9146e83: sub    $0x80,%rsp
  0x00007f8ab9146e8a: mov    %rax,0x78(%rsp)
  0x00007f8ab9146e8f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9146e94: mov    %rdx,0x68(%rsp)
  0x00007f8ab9146e99: mov    %rbx,0x60(%rsp)
  0x00007f8ab9146e9e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9146ea3: mov    %rsi,0x48(%rsp)
  0x00007f8ab9146ea8: mov    %rdi,0x40(%rsp)
  0x00007f8ab9146ead: mov    %r8,0x38(%rsp)
  0x00007f8ab9146eb2: mov    %r9,0x30(%rsp)
  0x00007f8ab9146eb7: mov    %r10,0x28(%rsp)
  0x00007f8ab9146ebc: mov    %r11,0x20(%rsp)
  0x00007f8ab9146ec1: mov    %r12,0x18(%rsp)
  0x00007f8ab9146ec6: mov    %r13,0x10(%rsp)
  0x00007f8ab9146ecb: mov    %r14,0x8(%rsp)
  0x00007f8ab9146ed0: mov    %r15,(%rsp)
  0x00007f8ab9146ed4: sub    $0x200,%rsp
  0x00007f8ab9146edb: fxsave64 (%rsp)
  0x00007f8ab9146ee0: mov    %rbx,%rdi
  0x00007f8ab9146ee3: mov    %rax,%rsi
  0x00007f8ab9146ee6: callq  0x00007f8acef8bbca
  0x00007f8ab9146eeb: fxrstor64 (%rsp)
  0x00007f8ab9146ef0: add    $0x200,%rsp
  0x00007f8ab9146ef7: mov    (%rsp),%r15
  0x00007f8ab9146efb: mov    0x8(%rsp),%r14
  0x00007f8ab9146f00: mov    0x10(%rsp),%r13
  0x00007f8ab9146f05: mov    0x18(%rsp),%r12
  0x00007f8ab9146f0a: mov    0x20(%rsp),%r11
  0x00007f8ab9146f0f: mov    0x28(%rsp),%r10
  0x00007f8ab9146f14: mov    0x30(%rsp),%r9
  0x00007f8ab9146f19: mov    0x38(%rsp),%r8
  0x00007f8ab9146f1e: mov    0x40(%rsp),%rdi
  0x00007f8ab9146f23: mov    0x48(%rsp),%rsi
  0x00007f8ab9146f28: mov    0x50(%rsp),%rbp
  0x00007f8ab9146f2d: mov    0x60(%rsp),%rbx
  0x00007f8ab9146f32: mov    0x68(%rsp),%rdx
  0x00007f8ab9146f37: mov    0x70(%rsp),%rcx
  0x00007f8ab9146f3c: mov    0x78(%rsp),%rax
  0x00007f8ab9146f41: add    $0x80,%rsp
  0x00007f8ab9146f48: add    $0x8,%rsp
  0x00007f8ab9146f4c: popfq  
  0x00007f8ab9146f4d: mov    %r13,%rsp
  0x00007f8ab9146f50: pop    %rax
  0x00007f8ab9146f51: mov    %rsp,%r13
  0x00007f8ab9146f54: sub    $0x20,%rsp
  0x00007f8ab9146f58: mov    %rax,(%rsp)
  0x00007f8ab9146f5c: mov    %rsi,0x18(%rsp)
  0x00007f8ab9146f61: mov    %edx,0x10(%rsp)
  0x00007f8ab9146f65: mov    %ecx,0x8(%rsp)
  0x00007f8ab9146f69: mov    0x40(%rbx),%rcx
  0x00007f8ab9146f6d: jmpq   *%rcx

AHE@0x00007f8ac80ebb48: 0xbb000000 i2c: 0x00007f8ab9147020 c2i: 0x00007f8ab914715e c2iUV: 0x00007f8ab9147131
i2c argument handler #2 for: receiver (Ljava/util/Locale;)Ljava/lang/String; (586 bytes generated)
c2i argument handler starts at 0x7f8ab914715e
  0x00007f8ab9147020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9147024: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914702e: cmp    %r11,%rax
  0x00007f8ab9147031: jbe    0x00007f8ab914704a
  0x00007f8ab9147037: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9147041: cmp    %r11,%rax
  0x00007f8ab9147044: jb     0x00007f8ab914710d
  0x00007f8ab914704a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9147054: cmp    %r11,%rax
  0x00007f8ab9147057: jbe    0x00007f8ab9147070
  0x00007f8ab914705d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9147067: cmp    %r11,%rax
  0x00007f8ab914706a: jb     0x00007f8ab914710d
  0x00007f8ab9147070: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914707a: cmp    %r11,%rax
  0x00007f8ab914707d: jbe    0x00007f8ab9147096
  0x00007f8ab9147083: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914708d: cmp    %r11,%rax
  0x00007f8ab9147090: jb     0x00007f8ab914710d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9147096: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914709b: sub    $0x80,%rsp
  0x00007f8ab91470a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91470a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91470ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91470b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91470b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91470bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91470c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91470c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91470ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91470cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91470d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91470d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91470de: mov    %r13,0x10(%rsp)
  0x00007f8ab91470e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91470e8: mov    %r15,(%rsp)
  0x00007f8ab91470ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91470f6: movabs $0x7f8ab9147096,%rsi
  0x00007f8ab9147100: mov    %rsp,%rdx
  0x00007f8ab9147103: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147107: callq  0x00007f8aceddb9fa
  0x00007f8ab914710c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914710d: mov    %rsp,%r11
  0x00007f8ab9147110: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147114: push   %rax
  0x00007f8ab9147115: mov    %r11,%rax
  0x00007f8ab9147118: mov    0x50(%rbx),%r11
  0x00007f8ab914711c: mov    0x10(%rax),%rsi
  0x00007f8ab9147120: mov    0x8(%rax),%rdx
  0x00007f8ab9147124: mov    %rbx,0x258(%r15)
  0x00007f8ab914712b: mov    %rbx,%rax
  0x00007f8ab914712e: jmpq   *%r11
  0x00007f8ab9147131: mov    0x8(%rsi),%ebx
  0x00007f8ab9147134: shl    $0x3,%rbx
  0x00007f8ab9147138: cmp    0x10(%rax),%rbx
  0x00007f8ab914713c: mov    0x8(%rax),%rbx
  0x00007f8ab9147140: je     0x00007f8ab914714b
  0x00007f8ab9147146: jmpq   0x00007f8ab9105c40
  0x00007f8ab914714b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147153: je     0x00007f8ab914724e
  0x00007f8ab9147159: jmpq   0x00007f8ab9105c40
  0x00007f8ab914715e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147166: je     0x00007f8ab914724e
  0x00007f8ab914716c: mov    %rsp,%r13
  0x00007f8ab914716f: mov    (%rsp),%rax
  0x00007f8ab9147173: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147177: pushfq 
  0x00007f8ab9147178: sub    $0x8,%rsp
  0x00007f8ab914717c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9147181: sub    $0x80,%rsp
  0x00007f8ab9147188: mov    %rax,0x78(%rsp)
  0x00007f8ab914718d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9147192: mov    %rdx,0x68(%rsp)
  0x00007f8ab9147197: mov    %rbx,0x60(%rsp)
  0x00007f8ab914719c: mov    %rbp,0x50(%rsp)
  0x00007f8ab91471a1: mov    %rsi,0x48(%rsp)
  0x00007f8ab91471a6: mov    %rdi,0x40(%rsp)
  0x00007f8ab91471ab: mov    %r8,0x38(%rsp)
  0x00007f8ab91471b0: mov    %r9,0x30(%rsp)
  0x00007f8ab91471b5: mov    %r10,0x28(%rsp)
  0x00007f8ab91471ba: mov    %r11,0x20(%rsp)
  0x00007f8ab91471bf: mov    %r12,0x18(%rsp)
  0x00007f8ab91471c4: mov    %r13,0x10(%rsp)
  0x00007f8ab91471c9: mov    %r14,0x8(%rsp)
  0x00007f8ab91471ce: mov    %r15,(%rsp)
  0x00007f8ab91471d2: sub    $0x200,%rsp
  0x00007f8ab91471d9: fxsave64 (%rsp)
  0x00007f8ab91471de: mov    %rbx,%rdi
  0x00007f8ab91471e1: mov    %rax,%rsi
  0x00007f8ab91471e4: callq  0x00007f8acef8bbca
  0x00007f8ab91471e9: fxrstor64 (%rsp)
  0x00007f8ab91471ee: add    $0x200,%rsp
  0x00007f8ab91471f5: mov    (%rsp),%r15
  0x00007f8ab91471f9: mov    0x8(%rsp),%r14
  0x00007f8ab91471fe: mov    0x10(%rsp),%r13
  0x00007f8ab9147203: mov    0x18(%rsp),%r12
  0x00007f8ab9147208: mov    0x20(%rsp),%r11
  0x00007f8ab914720d: mov    0x28(%rsp),%r10
  0x00007f8ab9147212: mov    0x30(%rsp),%r9
  0x00007f8ab9147217: mov    0x38(%rsp),%r8
  0x00007f8ab914721c: mov    0x40(%rsp),%rdi
  0x00007f8ab9147221: mov    0x48(%rsp),%rsi
  0x00007f8ab9147226: mov    0x50(%rsp),%rbp
  0x00007f8ab914722b: mov    0x60(%rsp),%rbx
  0x00007f8ab9147230: mov    0x68(%rsp),%rdx
  0x00007f8ab9147235: mov    0x70(%rsp),%rcx
  0x00007f8ab914723a: mov    0x78(%rsp),%rax
  0x00007f8ab914723f: add    $0x80,%rsp
  0x00007f8ab9147246: add    $0x8,%rsp
  0x00007f8ab914724a: popfq  
  0x00007f8ab914724b: mov    %r13,%rsp
  0x00007f8ab914724e: pop    %rax
  0x00007f8ab914724f: mov    %rsp,%r13
  0x00007f8ab9147252: sub    $0x20,%rsp
  0x00007f8ab9147256: mov    %rax,(%rsp)
  0x00007f8ab914725a: mov    %rsi,0x10(%rsp)
  0x00007f8ab914725f: mov    %rdx,0x8(%rsp)
  0x00007f8ab9147264: mov    0x40(%rbx),%rcx
  0x00007f8ab9147268: jmpq   *%rcx

AHE@0x00007f8ac80ebb90: 0xbba00000 i2c: 0x00007f8ab9147320 c2i: 0x00007f8ab9147461 c2iUV: 0x00007f8ab9147434
i2c argument handler #3 for: receiver (Ljava/lang/String;I)[Ljava/lang/String; (593 bytes generated)
c2i argument handler starts at 0x7f8ab9147461
  0x00007f8ab9147320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9147324: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914732e: cmp    %r11,%rax
  0x00007f8ab9147331: jbe    0x00007f8ab914734a
  0x00007f8ab9147337: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9147341: cmp    %r11,%rax
  0x00007f8ab9147344: jb     0x00007f8ab914740d
  0x00007f8ab914734a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9147354: cmp    %r11,%rax
  0x00007f8ab9147357: jbe    0x00007f8ab9147370
  0x00007f8ab914735d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9147367: cmp    %r11,%rax
  0x00007f8ab914736a: jb     0x00007f8ab914740d
  0x00007f8ab9147370: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914737a: cmp    %r11,%rax
  0x00007f8ab914737d: jbe    0x00007f8ab9147396
  0x00007f8ab9147383: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914738d: cmp    %r11,%rax
  0x00007f8ab9147390: jb     0x00007f8ab914740d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9147396: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914739b: sub    $0x80,%rsp
  0x00007f8ab91473a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91473a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91473ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91473b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91473b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91473bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91473c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91473c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91473ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91473cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91473d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91473d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91473de: mov    %r13,0x10(%rsp)
  0x00007f8ab91473e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91473e8: mov    %r15,(%rsp)
  0x00007f8ab91473ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91473f6: movabs $0x7f8ab9147396,%rsi
  0x00007f8ab9147400: mov    %rsp,%rdx
  0x00007f8ab9147403: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147407: callq  0x00007f8aceddb9fa
  0x00007f8ab914740c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914740d: mov    %rsp,%r11
  0x00007f8ab9147410: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147414: push   %rax
  0x00007f8ab9147415: mov    %r11,%rax
  0x00007f8ab9147418: mov    0x50(%rbx),%r11
  0x00007f8ab914741c: mov    0x18(%rax),%rsi
  0x00007f8ab9147420: mov    0x10(%rax),%rdx
  0x00007f8ab9147424: mov    0x8(%rax),%ecx
  0x00007f8ab9147427: mov    %rbx,0x258(%r15)
  0x00007f8ab914742e: mov    %rbx,%rax
  0x00007f8ab9147431: jmpq   *%r11
  0x00007f8ab9147434: mov    0x8(%rsi),%ebx
  0x00007f8ab9147437: shl    $0x3,%rbx
  0x00007f8ab914743b: cmp    0x10(%rax),%rbx
  0x00007f8ab914743f: mov    0x8(%rax),%rbx
  0x00007f8ab9147443: je     0x00007f8ab914744e
  0x00007f8ab9147449: jmpq   0x00007f8ab9105c40
  0x00007f8ab914744e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147456: je     0x00007f8ab9147551
  0x00007f8ab914745c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9147461: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147469: je     0x00007f8ab9147551
  0x00007f8ab914746f: mov    %rsp,%r13
  0x00007f8ab9147472: mov    (%rsp),%rax
  0x00007f8ab9147476: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914747a: pushfq 
  0x00007f8ab914747b: sub    $0x8,%rsp
  0x00007f8ab914747f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9147484: sub    $0x80,%rsp
  0x00007f8ab914748b: mov    %rax,0x78(%rsp)
  0x00007f8ab9147490: mov    %rcx,0x70(%rsp)
  0x00007f8ab9147495: mov    %rdx,0x68(%rsp)
  0x00007f8ab914749a: mov    %rbx,0x60(%rsp)
  0x00007f8ab914749f: mov    %rbp,0x50(%rsp)
  0x00007f8ab91474a4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91474a9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91474ae: mov    %r8,0x38(%rsp)
  0x00007f8ab91474b3: mov    %r9,0x30(%rsp)
  0x00007f8ab91474b8: mov    %r10,0x28(%rsp)
  0x00007f8ab91474bd: mov    %r11,0x20(%rsp)
  0x00007f8ab91474c2: mov    %r12,0x18(%rsp)
  0x00007f8ab91474c7: mov    %r13,0x10(%rsp)
  0x00007f8ab91474cc: mov    %r14,0x8(%rsp)
  0x00007f8ab91474d1: mov    %r15,(%rsp)
  0x00007f8ab91474d5: sub    $0x200,%rsp
  0x00007f8ab91474dc: fxsave64 (%rsp)
  0x00007f8ab91474e1: mov    %rbx,%rdi
  0x00007f8ab91474e4: mov    %rax,%rsi
  0x00007f8ab91474e7: callq  0x00007f8acef8bbca
  0x00007f8ab91474ec: fxrstor64 (%rsp)
  0x00007f8ab91474f1: add    $0x200,%rsp
  0x00007f8ab91474f8: mov    (%rsp),%r15
  0x00007f8ab91474fc: mov    0x8(%rsp),%r14
  0x00007f8ab9147501: mov    0x10(%rsp),%r13
  0x00007f8ab9147506: mov    0x18(%rsp),%r12
  0x00007f8ab914750b: mov    0x20(%rsp),%r11
  0x00007f8ab9147510: mov    0x28(%rsp),%r10
  0x00007f8ab9147515: mov    0x30(%rsp),%r9
  0x00007f8ab914751a: mov    0x38(%rsp),%r8
  0x00007f8ab914751f: mov    0x40(%rsp),%rdi
  0x00007f8ab9147524: mov    0x48(%rsp),%rsi
  0x00007f8ab9147529: mov    0x50(%rsp),%rbp
  0x00007f8ab914752e: mov    0x60(%rsp),%rbx
  0x00007f8ab9147533: mov    0x68(%rsp),%rdx
  0x00007f8ab9147538: mov    0x70(%rsp),%rcx
  0x00007f8ab914753d: mov    0x78(%rsp),%rax
  0x00007f8ab9147542: add    $0x80,%rsp
  0x00007f8ab9147549: add    $0x8,%rsp
  0x00007f8ab914754d: popfq  
  0x00007f8ab914754e: mov    %r13,%rsp
  0x00007f8ab9147551: pop    %rax
  0x00007f8ab9147552: mov    %rsp,%r13
  0x00007f8ab9147555: sub    $0x20,%rsp
  0x00007f8ab9147559: mov    %rax,(%rsp)
  0x00007f8ab914755d: mov    %rsi,0x18(%rsp)
  0x00007f8ab9147562: mov    %rdx,0x10(%rsp)
  0x00007f8ab9147567: mov    %ecx,0x8(%rsp)
  0x00007f8ab914756b: mov    0x40(%rbx),%rcx
  0x00007f8ab914756f: jmpq   *%rcx

AHE@0x00007f8ac80ebbd8: 0xbbb00000 i2c: 0x00007f8ab9147620 c2i: 0x00007f8ab9147762 c2iUV: 0x00007f8ab9147735
i2c argument handler #4 for: receiver (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (595 bytes generated)
c2i argument handler starts at 0x7f8ab9147762
  0x00007f8ab9147620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9147624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914762e: cmp    %r11,%rax
  0x00007f8ab9147631: jbe    0x00007f8ab914764a
  0x00007f8ab9147637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9147641: cmp    %r11,%rax
  0x00007f8ab9147644: jb     0x00007f8ab914770d
  0x00007f8ab914764a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9147654: cmp    %r11,%rax
  0x00007f8ab9147657: jbe    0x00007f8ab9147670
  0x00007f8ab914765d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9147667: cmp    %r11,%rax
  0x00007f8ab914766a: jb     0x00007f8ab914770d
  0x00007f8ab9147670: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914767a: cmp    %r11,%rax
  0x00007f8ab914767d: jbe    0x00007f8ab9147696
  0x00007f8ab9147683: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914768d: cmp    %r11,%rax
  0x00007f8ab9147690: jb     0x00007f8ab914770d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9147696: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914769b: sub    $0x80,%rsp
  0x00007f8ab91476a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91476a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91476ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91476b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91476b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91476bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91476c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91476c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91476ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91476cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91476d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91476d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91476de: mov    %r13,0x10(%rsp)
  0x00007f8ab91476e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91476e8: mov    %r15,(%rsp)
  0x00007f8ab91476ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91476f6: movabs $0x7f8ab9147696,%rsi
  0x00007f8ab9147700: mov    %rsp,%rdx
  0x00007f8ab9147703: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147707: callq  0x00007f8aceddb9fa
  0x00007f8ab914770c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914770d: mov    %rsp,%r11
  0x00007f8ab9147710: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147714: push   %rax
  0x00007f8ab9147715: mov    %r11,%rax
  0x00007f8ab9147718: mov    0x50(%rbx),%r11
  0x00007f8ab914771c: mov    0x18(%rax),%rsi
  0x00007f8ab9147720: mov    0x10(%rax),%rdx
  0x00007f8ab9147724: mov    0x8(%rax),%rcx
  0x00007f8ab9147728: mov    %rbx,0x258(%r15)
  0x00007f8ab914772f: mov    %rbx,%rax
  0x00007f8ab9147732: jmpq   *%r11
  0x00007f8ab9147735: mov    0x8(%rsi),%ebx
  0x00007f8ab9147738: shl    $0x3,%rbx
  0x00007f8ab914773c: cmp    0x10(%rax),%rbx
  0x00007f8ab9147740: mov    0x8(%rax),%rbx
  0x00007f8ab9147744: je     0x00007f8ab914774f
  0x00007f8ab914774a: jmpq   0x00007f8ab9105c40
  0x00007f8ab914774f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147757: je     0x00007f8ab9147852
  0x00007f8ab914775d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9147762: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab914776a: je     0x00007f8ab9147852
  0x00007f8ab9147770: mov    %rsp,%r13
  0x00007f8ab9147773: mov    (%rsp),%rax
  0x00007f8ab9147777: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914777b: pushfq 
  0x00007f8ab914777c: sub    $0x8,%rsp
  0x00007f8ab9147780: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9147785: sub    $0x80,%rsp
  0x00007f8ab914778c: mov    %rax,0x78(%rsp)
  0x00007f8ab9147791: mov    %rcx,0x70(%rsp)
  0x00007f8ab9147796: mov    %rdx,0x68(%rsp)
  0x00007f8ab914779b: mov    %rbx,0x60(%rsp)
  0x00007f8ab91477a0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91477a5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91477aa: mov    %rdi,0x40(%rsp)
  0x00007f8ab91477af: mov    %r8,0x38(%rsp)
  0x00007f8ab91477b4: mov    %r9,0x30(%rsp)
  0x00007f8ab91477b9: mov    %r10,0x28(%rsp)
  0x00007f8ab91477be: mov    %r11,0x20(%rsp)
  0x00007f8ab91477c3: mov    %r12,0x18(%rsp)
  0x00007f8ab91477c8: mov    %r13,0x10(%rsp)
  0x00007f8ab91477cd: mov    %r14,0x8(%rsp)
  0x00007f8ab91477d2: mov    %r15,(%rsp)
  0x00007f8ab91477d6: sub    $0x200,%rsp
  0x00007f8ab91477dd: fxsave64 (%rsp)
  0x00007f8ab91477e2: mov    %rbx,%rdi
  0x00007f8ab91477e5: mov    %rax,%rsi
  0x00007f8ab91477e8: callq  0x00007f8acef8bbca
  0x00007f8ab91477ed: fxrstor64 (%rsp)
  0x00007f8ab91477f2: add    $0x200,%rsp
  0x00007f8ab91477f9: mov    (%rsp),%r15
  0x00007f8ab91477fd: mov    0x8(%rsp),%r14
  0x00007f8ab9147802: mov    0x10(%rsp),%r13
  0x00007f8ab9147807: mov    0x18(%rsp),%r12
  0x00007f8ab914780c: mov    0x20(%rsp),%r11
  0x00007f8ab9147811: mov    0x28(%rsp),%r10
  0x00007f8ab9147816: mov    0x30(%rsp),%r9
  0x00007f8ab914781b: mov    0x38(%rsp),%r8
  0x00007f8ab9147820: mov    0x40(%rsp),%rdi
  0x00007f8ab9147825: mov    0x48(%rsp),%rsi
  0x00007f8ab914782a: mov    0x50(%rsp),%rbp
  0x00007f8ab914782f: mov    0x60(%rsp),%rbx
  0x00007f8ab9147834: mov    0x68(%rsp),%rdx
  0x00007f8ab9147839: mov    0x70(%rsp),%rcx
  0x00007f8ab914783e: mov    0x78(%rsp),%rax
  0x00007f8ab9147843: add    $0x80,%rsp
  0x00007f8ab914784a: add    $0x8,%rsp
  0x00007f8ab914784e: popfq  
  0x00007f8ab914784f: mov    %r13,%rsp
  0x00007f8ab9147852: pop    %rax
  0x00007f8ab9147853: mov    %rsp,%r13
  0x00007f8ab9147856: sub    $0x20,%rsp
  0x00007f8ab914785a: mov    %rax,(%rsp)
  0x00007f8ab914785e: mov    %rsi,0x18(%rsp)
  0x00007f8ab9147863: mov    %rdx,0x10(%rsp)
  0x00007f8ab9147868: mov    %rcx,0x8(%rsp)
  0x00007f8ab914786d: mov    0x40(%rbx),%rcx
  0x00007f8ab9147871: jmpq   *%rcx

AHE@0x00007f8ac80ebc20: 0xba000000 i2c: 0x00007f8ab9147920 c2i: 0x00007f8ab9147a5d c2iUV: 0x00007f8ab9147a30
i2c argument handler #5 for: receiver (I)Ljava/lang/String; (584 bytes generated)
c2i argument handler starts at 0x7f8ab9147a5d
  0x00007f8ab9147920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9147924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914792e: cmp    %r11,%rax
  0x00007f8ab9147931: jbe    0x00007f8ab914794a
  0x00007f8ab9147937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9147941: cmp    %r11,%rax
  0x00007f8ab9147944: jb     0x00007f8ab9147a0d
  0x00007f8ab914794a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9147954: cmp    %r11,%rax
  0x00007f8ab9147957: jbe    0x00007f8ab9147970
  0x00007f8ab914795d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9147967: cmp    %r11,%rax
  0x00007f8ab914796a: jb     0x00007f8ab9147a0d
  0x00007f8ab9147970: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914797a: cmp    %r11,%rax
  0x00007f8ab914797d: jbe    0x00007f8ab9147996
  0x00007f8ab9147983: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914798d: cmp    %r11,%rax
  0x00007f8ab9147990: jb     0x00007f8ab9147a0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9147996: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914799b: sub    $0x80,%rsp
  0x00007f8ab91479a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91479a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91479ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91479b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91479b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91479bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91479c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91479c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91479ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91479cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91479d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91479d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91479de: mov    %r13,0x10(%rsp)
  0x00007f8ab91479e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91479e8: mov    %r15,(%rsp)
  0x00007f8ab91479ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91479f6: movabs $0x7f8ab9147996,%rsi
  0x00007f8ab9147a00: mov    %rsp,%rdx
  0x00007f8ab9147a03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147a07: callq  0x00007f8aceddb9fa
  0x00007f8ab9147a0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9147a0d: mov    %rsp,%r11
  0x00007f8ab9147a10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147a14: push   %rax
  0x00007f8ab9147a15: mov    %r11,%rax
  0x00007f8ab9147a18: mov    0x50(%rbx),%r11
  0x00007f8ab9147a1c: mov    0x10(%rax),%rsi
  0x00007f8ab9147a20: mov    0x8(%rax),%edx
  0x00007f8ab9147a23: mov    %rbx,0x258(%r15)
  0x00007f8ab9147a2a: mov    %rbx,%rax
  0x00007f8ab9147a2d: jmpq   *%r11
  0x00007f8ab9147a30: mov    0x8(%rsi),%ebx
  0x00007f8ab9147a33: shl    $0x3,%rbx
  0x00007f8ab9147a37: cmp    0x10(%rax),%rbx
  0x00007f8ab9147a3b: mov    0x8(%rax),%rbx
  0x00007f8ab9147a3f: je     0x00007f8ab9147a4a
  0x00007f8ab9147a45: jmpq   0x00007f8ab9105c40
  0x00007f8ab9147a4a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147a52: je     0x00007f8ab9147b4d
  0x00007f8ab9147a58: jmpq   0x00007f8ab9105c40
  0x00007f8ab9147a5d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147a65: je     0x00007f8ab9147b4d
  0x00007f8ab9147a6b: mov    %rsp,%r13
  0x00007f8ab9147a6e: mov    (%rsp),%rax
  0x00007f8ab9147a72: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147a76: pushfq 
  0x00007f8ab9147a77: sub    $0x8,%rsp
  0x00007f8ab9147a7b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9147a80: sub    $0x80,%rsp
  0x00007f8ab9147a87: mov    %rax,0x78(%rsp)
  0x00007f8ab9147a8c: mov    %rcx,0x70(%rsp)
  0x00007f8ab9147a91: mov    %rdx,0x68(%rsp)
  0x00007f8ab9147a96: mov    %rbx,0x60(%rsp)
  0x00007f8ab9147a9b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9147aa0: mov    %rsi,0x48(%rsp)
  0x00007f8ab9147aa5: mov    %rdi,0x40(%rsp)
  0x00007f8ab9147aaa: mov    %r8,0x38(%rsp)
  0x00007f8ab9147aaf: mov    %r9,0x30(%rsp)
  0x00007f8ab9147ab4: mov    %r10,0x28(%rsp)
  0x00007f8ab9147ab9: mov    %r11,0x20(%rsp)
  0x00007f8ab9147abe: mov    %r12,0x18(%rsp)
  0x00007f8ab9147ac3: mov    %r13,0x10(%rsp)
  0x00007f8ab9147ac8: mov    %r14,0x8(%rsp)
  0x00007f8ab9147acd: mov    %r15,(%rsp)
  0x00007f8ab9147ad1: sub    $0x200,%rsp
  0x00007f8ab9147ad8: fxsave64 (%rsp)
  0x00007f8ab9147add: mov    %rbx,%rdi
  0x00007f8ab9147ae0: mov    %rax,%rsi
  0x00007f8ab9147ae3: callq  0x00007f8acef8bbca
  0x00007f8ab9147ae8: fxrstor64 (%rsp)
  0x00007f8ab9147aed: add    $0x200,%rsp
  0x00007f8ab9147af4: mov    (%rsp),%r15
  0x00007f8ab9147af8: mov    0x8(%rsp),%r14
  0x00007f8ab9147afd: mov    0x10(%rsp),%r13
  0x00007f8ab9147b02: mov    0x18(%rsp),%r12
  0x00007f8ab9147b07: mov    0x20(%rsp),%r11
  0x00007f8ab9147b0c: mov    0x28(%rsp),%r10
  0x00007f8ab9147b11: mov    0x30(%rsp),%r9
  0x00007f8ab9147b16: mov    0x38(%rsp),%r8
  0x00007f8ab9147b1b: mov    0x40(%rsp),%rdi
  0x00007f8ab9147b20: mov    0x48(%rsp),%rsi
  0x00007f8ab9147b25: mov    0x50(%rsp),%rbp
  0x00007f8ab9147b2a: mov    0x60(%rsp),%rbx
  0x00007f8ab9147b2f: mov    0x68(%rsp),%rdx
  0x00007f8ab9147b34: mov    0x70(%rsp),%rcx
  0x00007f8ab9147b39: mov    0x78(%rsp),%rax
  0x00007f8ab9147b3e: add    $0x80,%rsp
  0x00007f8ab9147b45: add    $0x8,%rsp
  0x00007f8ab9147b49: popfq  
  0x00007f8ab9147b4a: mov    %r13,%rsp
  0x00007f8ab9147b4d: pop    %rax
  0x00007f8ab9147b4e: mov    %rsp,%r13
  0x00007f8ab9147b51: sub    $0x20,%rsp
  0x00007f8ab9147b55: mov    %rax,(%rsp)
  0x00007f8ab9147b59: mov    %rsi,0x10(%rsp)
  0x00007f8ab9147b5e: mov    %edx,0x8(%rsp)
  0x00007f8ab9147b62: mov    0x40(%rbx),%rcx
  0x00007f8ab9147b66: jmpq   *%rcx

AHE@0x00007f8ac80ebc68: 0xbaabaaa0 i2c: 0x00007f8ab9147c20 c2i: 0x00007f8ab9147d78 c2iUV: 0x00007f8ab9147d4b
i2c argument handler #6 for: static ([CII[CIII)I (638 bytes generated)
c2i argument handler starts at 0x7f8ab9147d78
  0x00007f8ab9147c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9147c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9147c2e: cmp    %r11,%rax
  0x00007f8ab9147c31: jbe    0x00007f8ab9147c4a
  0x00007f8ab9147c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9147c41: cmp    %r11,%rax
  0x00007f8ab9147c44: jb     0x00007f8ab9147d0d
  0x00007f8ab9147c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9147c54: cmp    %r11,%rax
  0x00007f8ab9147c57: jbe    0x00007f8ab9147c70
  0x00007f8ab9147c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9147c67: cmp    %r11,%rax
  0x00007f8ab9147c6a: jb     0x00007f8ab9147d0d
  0x00007f8ab9147c70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9147c7a: cmp    %r11,%rax
  0x00007f8ab9147c7d: jbe    0x00007f8ab9147c96
  0x00007f8ab9147c83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9147c8d: cmp    %r11,%rax
  0x00007f8ab9147c90: jb     0x00007f8ab9147d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9147c96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9147c9b: sub    $0x80,%rsp
  0x00007f8ab9147ca2: mov    %rax,0x78(%rsp)
  0x00007f8ab9147ca7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9147cac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9147cb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9147cb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9147cbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9147cc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9147cc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9147cca: mov    %r9,0x30(%rsp)
  0x00007f8ab9147ccf: mov    %r10,0x28(%rsp)
  0x00007f8ab9147cd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9147cd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9147cde: mov    %r13,0x10(%rsp)
  0x00007f8ab9147ce3: mov    %r14,0x8(%rsp)
  0x00007f8ab9147ce8: mov    %r15,(%rsp)
  0x00007f8ab9147cec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9147cf6: movabs $0x7f8ab9147c96,%rsi
  0x00007f8ab9147d00: mov    %rsp,%rdx
  0x00007f8ab9147d03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147d07: callq  0x00007f8aceddb9fa
  0x00007f8ab9147d0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9147d0d: mov    %rsp,%r11
  0x00007f8ab9147d10: sub    $0x10,%rsp
  0x00007f8ab9147d14: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147d18: push   %rax
  0x00007f8ab9147d19: mov    %r11,%rax
  0x00007f8ab9147d1c: mov    0x50(%rbx),%r11
  0x00007f8ab9147d20: mov    0x38(%rax),%rsi
  0x00007f8ab9147d24: mov    0x30(%rax),%edx
  0x00007f8ab9147d27: mov    0x28(%rax),%ecx
  0x00007f8ab9147d2a: mov    0x20(%rax),%r8
  0x00007f8ab9147d2e: mov    0x18(%rax),%r9d
  0x00007f8ab9147d32: mov    0x10(%rax),%edi
  0x00007f8ab9147d35: mov    0x8(%rax),%r13d
  0x00007f8ab9147d39: mov    %r13,0x8(%rsp)
  0x00007f8ab9147d3e: mov    %rbx,0x258(%r15)
  0x00007f8ab9147d45: mov    %rbx,%rax
  0x00007f8ab9147d48: jmpq   *%r11
  0x00007f8ab9147d4b: mov    0x8(%rsi),%ebx
  0x00007f8ab9147d4e: shl    $0x3,%rbx
  0x00007f8ab9147d52: cmp    0x10(%rax),%rbx
  0x00007f8ab9147d56: mov    0x8(%rax),%rbx
  0x00007f8ab9147d5a: je     0x00007f8ab9147d65
  0x00007f8ab9147d60: jmpq   0x00007f8ab9105c40
  0x00007f8ab9147d65: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147d6d: je     0x00007f8ab9147e68
  0x00007f8ab9147d73: jmpq   0x00007f8ab9105c40
  0x00007f8ab9147d78: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9147d80: je     0x00007f8ab9147e68
  0x00007f8ab9147d86: mov    %rsp,%r13
  0x00007f8ab9147d89: mov    (%rsp),%rax
  0x00007f8ab9147d8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9147d91: pushfq 
  0x00007f8ab9147d92: sub    $0x8,%rsp
  0x00007f8ab9147d96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9147d9b: sub    $0x80,%rsp
  0x00007f8ab9147da2: mov    %rax,0x78(%rsp)
  0x00007f8ab9147da7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9147dac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9147db1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9147db6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9147dbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9147dc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9147dc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9147dca: mov    %r9,0x30(%rsp)
  0x00007f8ab9147dcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9147dd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9147dd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9147dde: mov    %r13,0x10(%rsp)
  0x00007f8ab9147de3: mov    %r14,0x8(%rsp)
  0x00007f8ab9147de8: mov    %r15,(%rsp)
  0x00007f8ab9147dec: sub    $0x200,%rsp
  0x00007f8ab9147df3: fxsave64 (%rsp)
  0x00007f8ab9147df8: mov    %rbx,%rdi
  0x00007f8ab9147dfb: mov    %rax,%rsi
  0x00007f8ab9147dfe: callq  0x00007f8acef8bbca
  0x00007f8ab9147e03: fxrstor64 (%rsp)
  0x00007f8ab9147e08: add    $0x200,%rsp
  0x00007f8ab9147e0f: mov    (%rsp),%r15
  0x00007f8ab9147e13: mov    0x8(%rsp),%r14
  0x00007f8ab9147e18: mov    0x10(%rsp),%r13
  0x00007f8ab9147e1d: mov    0x18(%rsp),%r12
  0x00007f8ab9147e22: mov    0x20(%rsp),%r11
  0x00007f8ab9147e27: mov    0x28(%rsp),%r10
  0x00007f8ab9147e2c: mov    0x30(%rsp),%r9
  0x00007f8ab9147e31: mov    0x38(%rsp),%r8
  0x00007f8ab9147e36: mov    0x40(%rsp),%rdi
  0x00007f8ab9147e3b: mov    0x48(%rsp),%rsi
  0x00007f8ab9147e40: mov    0x50(%rsp),%rbp
  0x00007f8ab9147e45: mov    0x60(%rsp),%rbx
  0x00007f8ab9147e4a: mov    0x68(%rsp),%rdx
  0x00007f8ab9147e4f: mov    0x70(%rsp),%rcx
  0x00007f8ab9147e54: mov    0x78(%rsp),%rax
  0x00007f8ab9147e59: add    $0x80,%rsp
  0x00007f8ab9147e60: add    $0x8,%rsp
  0x00007f8ab9147e64: popfq  
  0x00007f8ab9147e65: mov    %r13,%rsp
  0x00007f8ab9147e68: pop    %rax
  0x00007f8ab9147e69: mov    %rsp,%r13
  0x00007f8ab9147e6c: sub    $0x40,%rsp
  0x00007f8ab9147e70: mov    %rax,(%rsp)
  0x00007f8ab9147e74: mov    %rsi,0x38(%rsp)
  0x00007f8ab9147e79: mov    %edx,0x30(%rsp)
  0x00007f8ab9147e7d: mov    %ecx,0x28(%rsp)
  0x00007f8ab9147e81: mov    %r8,0x20(%rsp)
  0x00007f8ab9147e86: mov    %r9d,0x18(%rsp)
  0x00007f8ab9147e8b: mov    %edi,0x10(%rsp)
  0x00007f8ab9147e8f: mov    0x40(%rsp),%eax
  0x00007f8ab9147e93: mov    %rax,0x8(%rsp)
  0x00007f8ab9147e98: mov    0x40(%rbx),%rcx
  0x00007f8ab9147e9c: jmpq   *%rcx

AHE@0x00007f8ac80ebcb0: 0xbaaba000 i2c: 0x00007f8ab9147f60 c2i: 0x00007f8ab91480a8 c2iUV: 0x00007f8ab914807b
i2c argument handler #7 for: static ([CIILjava/lang/String;I)I (609 bytes generated)
c2i argument handler starts at 0x7f8ab91480a8
  0x00007f8ab9147f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9147f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9147f6e: cmp    %r11,%rax
  0x00007f8ab9147f71: jbe    0x00007f8ab9147f8a
  0x00007f8ab9147f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9147f81: cmp    %r11,%rax
  0x00007f8ab9147f84: jb     0x00007f8ab914804d
  0x00007f8ab9147f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9147f94: cmp    %r11,%rax
  0x00007f8ab9147f97: jbe    0x00007f8ab9147fb0
  0x00007f8ab9147f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9147fa7: cmp    %r11,%rax
  0x00007f8ab9147faa: jb     0x00007f8ab914804d
  0x00007f8ab9147fb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9147fba: cmp    %r11,%rax
  0x00007f8ab9147fbd: jbe    0x00007f8ab9147fd6
  0x00007f8ab9147fc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9147fcd: cmp    %r11,%rax
  0x00007f8ab9147fd0: jb     0x00007f8ab914804d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9147fd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9147fdb: sub    $0x80,%rsp
  0x00007f8ab9147fe2: mov    %rax,0x78(%rsp)
  0x00007f8ab9147fe7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9147fec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9147ff1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9147ff6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9147ffb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148000: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148005: mov    %r8,0x38(%rsp)
  0x00007f8ab914800a: mov    %r9,0x30(%rsp)
  0x00007f8ab914800f: mov    %r10,0x28(%rsp)
  0x00007f8ab9148014: mov    %r11,0x20(%rsp)
  0x00007f8ab9148019: mov    %r12,0x18(%rsp)
  0x00007f8ab914801e: mov    %r13,0x10(%rsp)
  0x00007f8ab9148023: mov    %r14,0x8(%rsp)
  0x00007f8ab9148028: mov    %r15,(%rsp)
  0x00007f8ab914802c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9148036: movabs $0x7f8ab9147fd6,%rsi
  0x00007f8ab9148040: mov    %rsp,%rdx
  0x00007f8ab9148043: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148047: callq  0x00007f8aceddb9fa
  0x00007f8ab914804c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914804d: mov    %rsp,%r11
  0x00007f8ab9148050: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148054: push   %rax
  0x00007f8ab9148055: mov    %r11,%rax
  0x00007f8ab9148058: mov    0x50(%rbx),%r11
  0x00007f8ab914805c: mov    0x28(%rax),%rsi
  0x00007f8ab9148060: mov    0x20(%rax),%edx
  0x00007f8ab9148063: mov    0x18(%rax),%ecx
  0x00007f8ab9148066: mov    0x10(%rax),%r8
  0x00007f8ab914806a: mov    0x8(%rax),%r9d
  0x00007f8ab914806e: mov    %rbx,0x258(%r15)
  0x00007f8ab9148075: mov    %rbx,%rax
  0x00007f8ab9148078: jmpq   *%r11
  0x00007f8ab914807b: mov    0x8(%rsi),%ebx
  0x00007f8ab914807e: shl    $0x3,%rbx
  0x00007f8ab9148082: cmp    0x10(%rax),%rbx
  0x00007f8ab9148086: mov    0x8(%rax),%rbx
  0x00007f8ab914808a: je     0x00007f8ab9148095
  0x00007f8ab9148090: jmpq   0x00007f8ab9105c40
  0x00007f8ab9148095: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab914809d: je     0x00007f8ab9148198
  0x00007f8ab91480a3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91480a8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91480b0: je     0x00007f8ab9148198
  0x00007f8ab91480b6: mov    %rsp,%r13
  0x00007f8ab91480b9: mov    (%rsp),%rax
  0x00007f8ab91480bd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91480c1: pushfq 
  0x00007f8ab91480c2: sub    $0x8,%rsp
  0x00007f8ab91480c6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91480cb: sub    $0x80,%rsp
  0x00007f8ab91480d2: mov    %rax,0x78(%rsp)
  0x00007f8ab91480d7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91480dc: mov    %rdx,0x68(%rsp)
  0x00007f8ab91480e1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91480e6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91480eb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91480f0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91480f5: mov    %r8,0x38(%rsp)
  0x00007f8ab91480fa: mov    %r9,0x30(%rsp)
  0x00007f8ab91480ff: mov    %r10,0x28(%rsp)
  0x00007f8ab9148104: mov    %r11,0x20(%rsp)
  0x00007f8ab9148109: mov    %r12,0x18(%rsp)
  0x00007f8ab914810e: mov    %r13,0x10(%rsp)
  0x00007f8ab9148113: mov    %r14,0x8(%rsp)
  0x00007f8ab9148118: mov    %r15,(%rsp)
  0x00007f8ab914811c: sub    $0x200,%rsp
  0x00007f8ab9148123: fxsave64 (%rsp)
  0x00007f8ab9148128: mov    %rbx,%rdi
  0x00007f8ab914812b: mov    %rax,%rsi
  0x00007f8ab914812e: callq  0x00007f8acef8bbca
  0x00007f8ab9148133: fxrstor64 (%rsp)
  0x00007f8ab9148138: add    $0x200,%rsp
  0x00007f8ab914813f: mov    (%rsp),%r15
  0x00007f8ab9148143: mov    0x8(%rsp),%r14
  0x00007f8ab9148148: mov    0x10(%rsp),%r13
  0x00007f8ab914814d: mov    0x18(%rsp),%r12
  0x00007f8ab9148152: mov    0x20(%rsp),%r11
  0x00007f8ab9148157: mov    0x28(%rsp),%r10
  0x00007f8ab914815c: mov    0x30(%rsp),%r9
  0x00007f8ab9148161: mov    0x38(%rsp),%r8
  0x00007f8ab9148166: mov    0x40(%rsp),%rdi
  0x00007f8ab914816b: mov    0x48(%rsp),%rsi
  0x00007f8ab9148170: mov    0x50(%rsp),%rbp
  0x00007f8ab9148175: mov    0x60(%rsp),%rbx
  0x00007f8ab914817a: mov    0x68(%rsp),%rdx
  0x00007f8ab914817f: mov    0x70(%rsp),%rcx
  0x00007f8ab9148184: mov    0x78(%rsp),%rax
  0x00007f8ab9148189: add    $0x80,%rsp
  0x00007f8ab9148190: add    $0x8,%rsp
  0x00007f8ab9148194: popfq  
  0x00007f8ab9148195: mov    %r13,%rsp
  0x00007f8ab9148198: pop    %rax
  0x00007f8ab9148199: mov    %rsp,%r13
  0x00007f8ab914819c: sub    $0x30,%rsp
  0x00007f8ab91481a0: mov    %rax,(%rsp)
  0x00007f8ab91481a4: mov    %rsi,0x28(%rsp)
  0x00007f8ab91481a9: mov    %edx,0x20(%rsp)
  0x00007f8ab91481ad: mov    %ecx,0x18(%rsp)
  0x00007f8ab91481b1: mov    %r8,0x10(%rsp)
  0x00007f8ab91481b6: mov    %r9d,0x8(%rsp)
  0x00007f8ab91481bb: mov    0x40(%rbx),%rcx
  0x00007f8ab91481bf: jmpq   *%rcx

AHE@0x00007f8ac80ebcf8: 0xbaabaa00 i2c: 0x00007f8ab91482a0 c2i: 0x00007f8ab91483eb c2iUV: 0x00007f8ab91483be
i2c argument handler #8 for: receiver (ZILjava/lang/String;II)Z (616 bytes generated)
c2i argument handler starts at 0x7f8ab91483eb
  0x00007f8ab91482a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91482a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91482ae: cmp    %r11,%rax
  0x00007f8ab91482b1: jbe    0x00007f8ab91482ca
  0x00007f8ab91482b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91482c1: cmp    %r11,%rax
  0x00007f8ab91482c4: jb     0x00007f8ab914838d
  0x00007f8ab91482ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91482d4: cmp    %r11,%rax
  0x00007f8ab91482d7: jbe    0x00007f8ab91482f0
  0x00007f8ab91482dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91482e7: cmp    %r11,%rax
  0x00007f8ab91482ea: jb     0x00007f8ab914838d
  0x00007f8ab91482f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91482fa: cmp    %r11,%rax
  0x00007f8ab91482fd: jbe    0x00007f8ab9148316
  0x00007f8ab9148303: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914830d: cmp    %r11,%rax
  0x00007f8ab9148310: jb     0x00007f8ab914838d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9148316: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914831b: sub    $0x80,%rsp
  0x00007f8ab9148322: mov    %rax,0x78(%rsp)
  0x00007f8ab9148327: mov    %rcx,0x70(%rsp)
  0x00007f8ab914832c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148331: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148336: mov    %rbp,0x50(%rsp)
  0x00007f8ab914833b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148340: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148345: mov    %r8,0x38(%rsp)
  0x00007f8ab914834a: mov    %r9,0x30(%rsp)
  0x00007f8ab914834f: mov    %r10,0x28(%rsp)
  0x00007f8ab9148354: mov    %r11,0x20(%rsp)
  0x00007f8ab9148359: mov    %r12,0x18(%rsp)
  0x00007f8ab914835e: mov    %r13,0x10(%rsp)
  0x00007f8ab9148363: mov    %r14,0x8(%rsp)
  0x00007f8ab9148368: mov    %r15,(%rsp)
  0x00007f8ab914836c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9148376: movabs $0x7f8ab9148316,%rsi
  0x00007f8ab9148380: mov    %rsp,%rdx
  0x00007f8ab9148383: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148387: callq  0x00007f8aceddb9fa
  0x00007f8ab914838c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914838d: mov    %rsp,%r11
  0x00007f8ab9148390: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148394: push   %rax
  0x00007f8ab9148395: mov    %r11,%rax
  0x00007f8ab9148398: mov    0x50(%rbx),%r11
  0x00007f8ab914839c: mov    0x30(%rax),%rsi
  0x00007f8ab91483a0: mov    0x28(%rax),%edx
  0x00007f8ab91483a3: mov    0x20(%rax),%ecx
  0x00007f8ab91483a6: mov    0x18(%rax),%r8
  0x00007f8ab91483aa: mov    0x10(%rax),%r9d
  0x00007f8ab91483ae: mov    0x8(%rax),%edi
  0x00007f8ab91483b1: mov    %rbx,0x258(%r15)
  0x00007f8ab91483b8: mov    %rbx,%rax
  0x00007f8ab91483bb: jmpq   *%r11
  0x00007f8ab91483be: mov    0x8(%rsi),%ebx
  0x00007f8ab91483c1: shl    $0x3,%rbx
  0x00007f8ab91483c5: cmp    0x10(%rax),%rbx
  0x00007f8ab91483c9: mov    0x8(%rax),%rbx
  0x00007f8ab91483cd: je     0x00007f8ab91483d8
  0x00007f8ab91483d3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91483d8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91483e0: je     0x00007f8ab91484db
  0x00007f8ab91483e6: jmpq   0x00007f8ab9105c40
  0x00007f8ab91483eb: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91483f3: je     0x00007f8ab91484db
  0x00007f8ab91483f9: mov    %rsp,%r13
  0x00007f8ab91483fc: mov    (%rsp),%rax
  0x00007f8ab9148400: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148404: pushfq 
  0x00007f8ab9148405: sub    $0x8,%rsp
  0x00007f8ab9148409: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914840e: sub    $0x80,%rsp
  0x00007f8ab9148415: mov    %rax,0x78(%rsp)
  0x00007f8ab914841a: mov    %rcx,0x70(%rsp)
  0x00007f8ab914841f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148424: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148429: mov    %rbp,0x50(%rsp)
  0x00007f8ab914842e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148433: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148438: mov    %r8,0x38(%rsp)
  0x00007f8ab914843d: mov    %r9,0x30(%rsp)
  0x00007f8ab9148442: mov    %r10,0x28(%rsp)
  0x00007f8ab9148447: mov    %r11,0x20(%rsp)
  0x00007f8ab914844c: mov    %r12,0x18(%rsp)
  0x00007f8ab9148451: mov    %r13,0x10(%rsp)
  0x00007f8ab9148456: mov    %r14,0x8(%rsp)
  0x00007f8ab914845b: mov    %r15,(%rsp)
  0x00007f8ab914845f: sub    $0x200,%rsp
  0x00007f8ab9148466: fxsave64 (%rsp)
  0x00007f8ab914846b: mov    %rbx,%rdi
  0x00007f8ab914846e: mov    %rax,%rsi
  0x00007f8ab9148471: callq  0x00007f8acef8bbca
  0x00007f8ab9148476: fxrstor64 (%rsp)
  0x00007f8ab914847b: add    $0x200,%rsp
  0x00007f8ab9148482: mov    (%rsp),%r15
  0x00007f8ab9148486: mov    0x8(%rsp),%r14
  0x00007f8ab914848b: mov    0x10(%rsp),%r13
  0x00007f8ab9148490: mov    0x18(%rsp),%r12
  0x00007f8ab9148495: mov    0x20(%rsp),%r11
  0x00007f8ab914849a: mov    0x28(%rsp),%r10
  0x00007f8ab914849f: mov    0x30(%rsp),%r9
  0x00007f8ab91484a4: mov    0x38(%rsp),%r8
  0x00007f8ab91484a9: mov    0x40(%rsp),%rdi
  0x00007f8ab91484ae: mov    0x48(%rsp),%rsi
  0x00007f8ab91484b3: mov    0x50(%rsp),%rbp
  0x00007f8ab91484b8: mov    0x60(%rsp),%rbx
  0x00007f8ab91484bd: mov    0x68(%rsp),%rdx
  0x00007f8ab91484c2: mov    0x70(%rsp),%rcx
  0x00007f8ab91484c7: mov    0x78(%rsp),%rax
  0x00007f8ab91484cc: add    $0x80,%rsp
  0x00007f8ab91484d3: add    $0x8,%rsp
  0x00007f8ab91484d7: popfq  
  0x00007f8ab91484d8: mov    %r13,%rsp
  0x00007f8ab91484db: pop    %rax
  0x00007f8ab91484dc: mov    %rsp,%r13
  0x00007f8ab91484df: sub    $0x40,%rsp
  0x00007f8ab91484e3: mov    %rax,(%rsp)
  0x00007f8ab91484e7: mov    %rsi,0x30(%rsp)
  0x00007f8ab91484ec: mov    %edx,0x28(%rsp)
  0x00007f8ab91484f0: mov    %ecx,0x20(%rsp)
  0x00007f8ab91484f4: mov    %r8,0x18(%rsp)
  0x00007f8ab91484f9: mov    %r9d,0x10(%rsp)
  0x00007f8ab91484fe: mov    %edi,0x8(%rsp)
  0x00007f8ab9148502: mov    0x40(%rbx),%rcx
  0x00007f8ab9148506: jmpq   *%rcx

AHE@0x00007f8ac80ebd40: 0xbabaa000 i2c: 0x00007f8ab91485e0 c2i: 0x00007f8ab9148729 c2iUV: 0x00007f8ab91486fc
i2c argument handler #9 for: receiver (ILjava/lang/String;II)Z (611 bytes generated)
c2i argument handler starts at 0x7f8ab9148729
  0x00007f8ab91485e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91485e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91485ee: cmp    %r11,%rax
  0x00007f8ab91485f1: jbe    0x00007f8ab914860a
  0x00007f8ab91485f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9148601: cmp    %r11,%rax
  0x00007f8ab9148604: jb     0x00007f8ab91486cd
  0x00007f8ab914860a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9148614: cmp    %r11,%rax
  0x00007f8ab9148617: jbe    0x00007f8ab9148630
  0x00007f8ab914861d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9148627: cmp    %r11,%rax
  0x00007f8ab914862a: jb     0x00007f8ab91486cd
  0x00007f8ab9148630: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914863a: cmp    %r11,%rax
  0x00007f8ab914863d: jbe    0x00007f8ab9148656
  0x00007f8ab9148643: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914864d: cmp    %r11,%rax
  0x00007f8ab9148650: jb     0x00007f8ab91486cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9148656: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914865b: sub    $0x80,%rsp
  0x00007f8ab9148662: mov    %rax,0x78(%rsp)
  0x00007f8ab9148667: mov    %rcx,0x70(%rsp)
  0x00007f8ab914866c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148671: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148676: mov    %rbp,0x50(%rsp)
  0x00007f8ab914867b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148680: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148685: mov    %r8,0x38(%rsp)
  0x00007f8ab914868a: mov    %r9,0x30(%rsp)
  0x00007f8ab914868f: mov    %r10,0x28(%rsp)
  0x00007f8ab9148694: mov    %r11,0x20(%rsp)
  0x00007f8ab9148699: mov    %r12,0x18(%rsp)
  0x00007f8ab914869e: mov    %r13,0x10(%rsp)
  0x00007f8ab91486a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91486a8: mov    %r15,(%rsp)
  0x00007f8ab91486ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91486b6: movabs $0x7f8ab9148656,%rsi
  0x00007f8ab91486c0: mov    %rsp,%rdx
  0x00007f8ab91486c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91486c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91486cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91486cd: mov    %rsp,%r11
  0x00007f8ab91486d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91486d4: push   %rax
  0x00007f8ab91486d5: mov    %r11,%rax
  0x00007f8ab91486d8: mov    0x50(%rbx),%r11
  0x00007f8ab91486dc: mov    0x28(%rax),%rsi
  0x00007f8ab91486e0: mov    0x20(%rax),%edx
  0x00007f8ab91486e3: mov    0x18(%rax),%rcx
  0x00007f8ab91486e7: mov    0x10(%rax),%r8d
  0x00007f8ab91486eb: mov    0x8(%rax),%r9d
  0x00007f8ab91486ef: mov    %rbx,0x258(%r15)
  0x00007f8ab91486f6: mov    %rbx,%rax
  0x00007f8ab91486f9: jmpq   *%r11
  0x00007f8ab91486fc: mov    0x8(%rsi),%ebx
  0x00007f8ab91486ff: shl    $0x3,%rbx
  0x00007f8ab9148703: cmp    0x10(%rax),%rbx
  0x00007f8ab9148707: mov    0x8(%rax),%rbx
  0x00007f8ab914870b: je     0x00007f8ab9148716
  0x00007f8ab9148711: jmpq   0x00007f8ab9105c40
  0x00007f8ab9148716: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab914871e: je     0x00007f8ab9148819
  0x00007f8ab9148724: jmpq   0x00007f8ab9105c40
  0x00007f8ab9148729: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9148731: je     0x00007f8ab9148819
  0x00007f8ab9148737: mov    %rsp,%r13
  0x00007f8ab914873a: mov    (%rsp),%rax
  0x00007f8ab914873e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148742: pushfq 
  0x00007f8ab9148743: sub    $0x8,%rsp
  0x00007f8ab9148747: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914874c: sub    $0x80,%rsp
  0x00007f8ab9148753: mov    %rax,0x78(%rsp)
  0x00007f8ab9148758: mov    %rcx,0x70(%rsp)
  0x00007f8ab914875d: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148762: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148767: mov    %rbp,0x50(%rsp)
  0x00007f8ab914876c: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148771: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148776: mov    %r8,0x38(%rsp)
  0x00007f8ab914877b: mov    %r9,0x30(%rsp)
  0x00007f8ab9148780: mov    %r10,0x28(%rsp)
  0x00007f8ab9148785: mov    %r11,0x20(%rsp)
  0x00007f8ab914878a: mov    %r12,0x18(%rsp)
  0x00007f8ab914878f: mov    %r13,0x10(%rsp)
  0x00007f8ab9148794: mov    %r14,0x8(%rsp)
  0x00007f8ab9148799: mov    %r15,(%rsp)
  0x00007f8ab914879d: sub    $0x200,%rsp
  0x00007f8ab91487a4: fxsave64 (%rsp)
  0x00007f8ab91487a9: mov    %rbx,%rdi
  0x00007f8ab91487ac: mov    %rax,%rsi
  0x00007f8ab91487af: callq  0x00007f8acef8bbca
  0x00007f8ab91487b4: fxrstor64 (%rsp)
  0x00007f8ab91487b9: add    $0x200,%rsp
  0x00007f8ab91487c0: mov    (%rsp),%r15
  0x00007f8ab91487c4: mov    0x8(%rsp),%r14
  0x00007f8ab91487c9: mov    0x10(%rsp),%r13
  0x00007f8ab91487ce: mov    0x18(%rsp),%r12
  0x00007f8ab91487d3: mov    0x20(%rsp),%r11
  0x00007f8ab91487d8: mov    0x28(%rsp),%r10
  0x00007f8ab91487dd: mov    0x30(%rsp),%r9
  0x00007f8ab91487e2: mov    0x38(%rsp),%r8
  0x00007f8ab91487e7: mov    0x40(%rsp),%rdi
  0x00007f8ab91487ec: mov    0x48(%rsp),%rsi
  0x00007f8ab91487f1: mov    0x50(%rsp),%rbp
  0x00007f8ab91487f6: mov    0x60(%rsp),%rbx
  0x00007f8ab91487fb: mov    0x68(%rsp),%rdx
  0x00007f8ab9148800: mov    0x70(%rsp),%rcx
  0x00007f8ab9148805: mov    0x78(%rsp),%rax
  0x00007f8ab914880a: add    $0x80,%rsp
  0x00007f8ab9148811: add    $0x8,%rsp
  0x00007f8ab9148815: popfq  
  0x00007f8ab9148816: mov    %r13,%rsp
  0x00007f8ab9148819: pop    %rax
  0x00007f8ab914881a: mov    %rsp,%r13
  0x00007f8ab914881d: sub    $0x30,%rsp
  0x00007f8ab9148821: mov    %rax,(%rsp)
  0x00007f8ab9148825: mov    %rsi,0x28(%rsp)
  0x00007f8ab914882a: mov    %edx,0x20(%rsp)
  0x00007f8ab914882e: mov    %rcx,0x18(%rsp)
  0x00007f8ab9148833: mov    %r8d,0x10(%rsp)
  0x00007f8ab9148838: mov    %r9d,0x8(%rsp)
  0x00007f8ab914883d: mov    0x40(%rbx),%rcx
  0x00007f8ab9148841: jmpq   *%rcx

AHE@0x00007f8ac80ebd88: 0xbe000000 i2c: 0x00007f8ab9148920 c2i: 0x00007f8ab9148a5a c2iUV: 0x00007f8ab9148a2d
i2c argument handler #10 for: static (J)Ljava/lang/String; (592 bytes generated)
c2i argument handler starts at 0x7f8ab9148a5a
  0x00007f8ab9148920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9148924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914892e: cmp    %r11,%rax
  0x00007f8ab9148931: jbe    0x00007f8ab914894a
  0x00007f8ab9148937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9148941: cmp    %r11,%rax
  0x00007f8ab9148944: jb     0x00007f8ab9148a0d
  0x00007f8ab914894a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9148954: cmp    %r11,%rax
  0x00007f8ab9148957: jbe    0x00007f8ab9148970
  0x00007f8ab914895d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9148967: cmp    %r11,%rax
  0x00007f8ab914896a: jb     0x00007f8ab9148a0d
  0x00007f8ab9148970: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914897a: cmp    %r11,%rax
  0x00007f8ab914897d: jbe    0x00007f8ab9148996
  0x00007f8ab9148983: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914898d: cmp    %r11,%rax
  0x00007f8ab9148990: jb     0x00007f8ab9148a0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9148996: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914899b: sub    $0x80,%rsp
  0x00007f8ab91489a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91489a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91489ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91489b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91489b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91489bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91489c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91489c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91489ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91489cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91489d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91489d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91489de: mov    %r13,0x10(%rsp)
  0x00007f8ab91489e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91489e8: mov    %r15,(%rsp)
  0x00007f8ab91489ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91489f6: movabs $0x7f8ab9148996,%rsi
  0x00007f8ab9148a00: mov    %rsp,%rdx
  0x00007f8ab9148a03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148a07: callq  0x00007f8aceddb9fa
  0x00007f8ab9148a0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9148a0d: mov    %rsp,%r11
  0x00007f8ab9148a10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148a14: push   %rax
  0x00007f8ab9148a15: mov    %r11,%rax
  0x00007f8ab9148a18: mov    0x50(%rbx),%r11
  0x00007f8ab9148a1c: mov    0x8(%rax),%rsi
  0x00007f8ab9148a20: mov    %rbx,0x258(%r15)
  0x00007f8ab9148a27: mov    %rbx,%rax
  0x00007f8ab9148a2a: jmpq   *%r11
  0x00007f8ab9148a2d: mov    0x8(%rsi),%ebx
  0x00007f8ab9148a30: shl    $0x3,%rbx
  0x00007f8ab9148a34: cmp    0x10(%rax),%rbx
  0x00007f8ab9148a38: mov    0x8(%rax),%rbx
  0x00007f8ab9148a3c: je     0x00007f8ab9148a47
  0x00007f8ab9148a42: jmpq   0x00007f8ab9105c40
  0x00007f8ab9148a47: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9148a4f: je     0x00007f8ab9148b4a
  0x00007f8ab9148a55: jmpq   0x00007f8ab9105c40
  0x00007f8ab9148a5a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9148a62: je     0x00007f8ab9148b4a
  0x00007f8ab9148a68: mov    %rsp,%r13
  0x00007f8ab9148a6b: mov    (%rsp),%rax
  0x00007f8ab9148a6f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148a73: pushfq 
  0x00007f8ab9148a74: sub    $0x8,%rsp
  0x00007f8ab9148a78: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9148a7d: sub    $0x80,%rsp
  0x00007f8ab9148a84: mov    %rax,0x78(%rsp)
  0x00007f8ab9148a89: mov    %rcx,0x70(%rsp)
  0x00007f8ab9148a8e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148a93: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148a98: mov    %rbp,0x50(%rsp)
  0x00007f8ab9148a9d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148aa2: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148aa7: mov    %r8,0x38(%rsp)
  0x00007f8ab9148aac: mov    %r9,0x30(%rsp)
  0x00007f8ab9148ab1: mov    %r10,0x28(%rsp)
  0x00007f8ab9148ab6: mov    %r11,0x20(%rsp)
  0x00007f8ab9148abb: mov    %r12,0x18(%rsp)
  0x00007f8ab9148ac0: mov    %r13,0x10(%rsp)
  0x00007f8ab9148ac5: mov    %r14,0x8(%rsp)
  0x00007f8ab9148aca: mov    %r15,(%rsp)
  0x00007f8ab9148ace: sub    $0x200,%rsp
  0x00007f8ab9148ad5: fxsave64 (%rsp)
  0x00007f8ab9148ada: mov    %rbx,%rdi
  0x00007f8ab9148add: mov    %rax,%rsi
  0x00007f8ab9148ae0: callq  0x00007f8acef8bbca
  0x00007f8ab9148ae5: fxrstor64 (%rsp)
  0x00007f8ab9148aea: add    $0x200,%rsp
  0x00007f8ab9148af1: mov    (%rsp),%r15
  0x00007f8ab9148af5: mov    0x8(%rsp),%r14
  0x00007f8ab9148afa: mov    0x10(%rsp),%r13
  0x00007f8ab9148aff: mov    0x18(%rsp),%r12
  0x00007f8ab9148b04: mov    0x20(%rsp),%r11
  0x00007f8ab9148b09: mov    0x28(%rsp),%r10
  0x00007f8ab9148b0e: mov    0x30(%rsp),%r9
  0x00007f8ab9148b13: mov    0x38(%rsp),%r8
  0x00007f8ab9148b18: mov    0x40(%rsp),%rdi
  0x00007f8ab9148b1d: mov    0x48(%rsp),%rsi
  0x00007f8ab9148b22: mov    0x50(%rsp),%rbp
  0x00007f8ab9148b27: mov    0x60(%rsp),%rbx
  0x00007f8ab9148b2c: mov    0x68(%rsp),%rdx
  0x00007f8ab9148b31: mov    0x70(%rsp),%rcx
  0x00007f8ab9148b36: mov    0x78(%rsp),%rax
  0x00007f8ab9148b3b: add    $0x80,%rsp
  0x00007f8ab9148b42: add    $0x8,%rsp
  0x00007f8ab9148b46: popfq  
  0x00007f8ab9148b47: mov    %r13,%rsp
  0x00007f8ab9148b4a: pop    %rax
  0x00007f8ab9148b4b: mov    %rsp,%r13
  0x00007f8ab9148b4e: sub    $0x20,%rsp
  0x00007f8ab9148b52: mov    %rax,(%rsp)
  0x00007f8ab9148b56: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9148b60: mov    %rax,0x10(%rsp)
  0x00007f8ab9148b65: mov    %rsi,0x8(%rsp)
  0x00007f8ab9148b6a: mov    0x40(%rbx),%rcx
  0x00007f8ab9148b6e: jmpq   *%rcx

AHE@0x00007f8ac80ebdd0: 0xa0000000 i2c: 0x00007f8ab9148c20 c2i: 0x00007f8ab9148d59 c2iUV: 0x00007f8ab9148d2c
i2c argument handler #11 for: static (I)Ljava/lang/String; (575 bytes generated)
c2i argument handler starts at 0x7f8ab9148d59
  0x00007f8ab9148c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9148c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9148c2e: cmp    %r11,%rax
  0x00007f8ab9148c31: jbe    0x00007f8ab9148c4a
  0x00007f8ab9148c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9148c41: cmp    %r11,%rax
  0x00007f8ab9148c44: jb     0x00007f8ab9148d0d
  0x00007f8ab9148c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9148c54: cmp    %r11,%rax
  0x00007f8ab9148c57: jbe    0x00007f8ab9148c70
  0x00007f8ab9148c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9148c67: cmp    %r11,%rax
  0x00007f8ab9148c6a: jb     0x00007f8ab9148d0d
  0x00007f8ab9148c70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9148c7a: cmp    %r11,%rax
  0x00007f8ab9148c7d: jbe    0x00007f8ab9148c96
  0x00007f8ab9148c83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9148c8d: cmp    %r11,%rax
  0x00007f8ab9148c90: jb     0x00007f8ab9148d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9148c96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9148c9b: sub    $0x80,%rsp
  0x00007f8ab9148ca2: mov    %rax,0x78(%rsp)
  0x00007f8ab9148ca7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9148cac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148cb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148cb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9148cbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148cc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148cc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9148cca: mov    %r9,0x30(%rsp)
  0x00007f8ab9148ccf: mov    %r10,0x28(%rsp)
  0x00007f8ab9148cd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9148cd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9148cde: mov    %r13,0x10(%rsp)
  0x00007f8ab9148ce3: mov    %r14,0x8(%rsp)
  0x00007f8ab9148ce8: mov    %r15,(%rsp)
  0x00007f8ab9148cec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9148cf6: movabs $0x7f8ab9148c96,%rsi
  0x00007f8ab9148d00: mov    %rsp,%rdx
  0x00007f8ab9148d03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148d07: callq  0x00007f8aceddb9fa
  0x00007f8ab9148d0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9148d0d: mov    %rsp,%r11
  0x00007f8ab9148d10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148d14: push   %rax
  0x00007f8ab9148d15: mov    %r11,%rax
  0x00007f8ab9148d18: mov    0x50(%rbx),%r11
  0x00007f8ab9148d1c: mov    0x8(%rax),%esi
  0x00007f8ab9148d1f: mov    %rbx,0x258(%r15)
  0x00007f8ab9148d26: mov    %rbx,%rax
  0x00007f8ab9148d29: jmpq   *%r11
  0x00007f8ab9148d2c: mov    0x8(%rsi),%ebx
  0x00007f8ab9148d2f: shl    $0x3,%rbx
  0x00007f8ab9148d33: cmp    0x10(%rax),%rbx
  0x00007f8ab9148d37: mov    0x8(%rax),%rbx
  0x00007f8ab9148d3b: je     0x00007f8ab9148d46
  0x00007f8ab9148d41: jmpq   0x00007f8ab9105c40
  0x00007f8ab9148d46: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9148d4e: je     0x00007f8ab9148e49
  0x00007f8ab9148d54: jmpq   0x00007f8ab9105c40
  0x00007f8ab9148d59: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9148d61: je     0x00007f8ab9148e49
  0x00007f8ab9148d67: mov    %rsp,%r13
  0x00007f8ab9148d6a: mov    (%rsp),%rax
  0x00007f8ab9148d6e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9148d72: pushfq 
  0x00007f8ab9148d73: sub    $0x8,%rsp
  0x00007f8ab9148d77: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9148d7c: sub    $0x80,%rsp
  0x00007f8ab9148d83: mov    %rax,0x78(%rsp)
  0x00007f8ab9148d88: mov    %rcx,0x70(%rsp)
  0x00007f8ab9148d8d: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148d92: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148d97: mov    %rbp,0x50(%rsp)
  0x00007f8ab9148d9c: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148da1: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148da6: mov    %r8,0x38(%rsp)
  0x00007f8ab9148dab: mov    %r9,0x30(%rsp)
  0x00007f8ab9148db0: mov    %r10,0x28(%rsp)
  0x00007f8ab9148db5: mov    %r11,0x20(%rsp)
  0x00007f8ab9148dba: mov    %r12,0x18(%rsp)
  0x00007f8ab9148dbf: mov    %r13,0x10(%rsp)
  0x00007f8ab9148dc4: mov    %r14,0x8(%rsp)
  0x00007f8ab9148dc9: mov    %r15,(%rsp)
  0x00007f8ab9148dcd: sub    $0x200,%rsp
  0x00007f8ab9148dd4: fxsave64 (%rsp)
  0x00007f8ab9148dd9: mov    %rbx,%rdi
  0x00007f8ab9148ddc: mov    %rax,%rsi
  0x00007f8ab9148ddf: callq  0x00007f8acef8bbca
  0x00007f8ab9148de4: fxrstor64 (%rsp)
  0x00007f8ab9148de9: add    $0x200,%rsp
  0x00007f8ab9148df0: mov    (%rsp),%r15
  0x00007f8ab9148df4: mov    0x8(%rsp),%r14
  0x00007f8ab9148df9: mov    0x10(%rsp),%r13
  0x00007f8ab9148dfe: mov    0x18(%rsp),%r12
  0x00007f8ab9148e03: mov    0x20(%rsp),%r11
  0x00007f8ab9148e08: mov    0x28(%rsp),%r10
  0x00007f8ab9148e0d: mov    0x30(%rsp),%r9
  0x00007f8ab9148e12: mov    0x38(%rsp),%r8
  0x00007f8ab9148e17: mov    0x40(%rsp),%rdi
  0x00007f8ab9148e1c: mov    0x48(%rsp),%rsi
  0x00007f8ab9148e21: mov    0x50(%rsp),%rbp
  0x00007f8ab9148e26: mov    0x60(%rsp),%rbx
  0x00007f8ab9148e2b: mov    0x68(%rsp),%rdx
  0x00007f8ab9148e30: mov    0x70(%rsp),%rcx
  0x00007f8ab9148e35: mov    0x78(%rsp),%rax
  0x00007f8ab9148e3a: add    $0x80,%rsp
  0x00007f8ab9148e41: add    $0x8,%rsp
  0x00007f8ab9148e45: popfq  
  0x00007f8ab9148e46: mov    %r13,%rsp
  0x00007f8ab9148e49: pop    %rax
  0x00007f8ab9148e4a: mov    %rsp,%r13
  0x00007f8ab9148e4d: sub    $0x10,%rsp
  0x00007f8ab9148e51: mov    %rax,(%rsp)
  0x00007f8ab9148e55: mov    %esi,0x8(%rsp)
  0x00007f8ab9148e59: mov    0x40(%rbx),%rcx
  0x00007f8ab9148e5d: jmpq   *%rcx

AHE@0x00007f8ac80ebe18: 0x60000000 i2c: 0x00007f8ab9148f20 c2i: 0x00007f8ab914905b c2iUV: 0x00007f8ab914902e
i2c argument handler #12 for: static (F)Ljava/lang/String; (579 bytes generated)
c2i argument handler starts at 0x7f8ab914905b
  0x00007f8ab9148f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9148f24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9148f2e: cmp    %r11,%rax
  0x00007f8ab9148f31: jbe    0x00007f8ab9148f4a
  0x00007f8ab9148f37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9148f41: cmp    %r11,%rax
  0x00007f8ab9148f44: jb     0x00007f8ab914900d
  0x00007f8ab9148f4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9148f54: cmp    %r11,%rax
  0x00007f8ab9148f57: jbe    0x00007f8ab9148f70
  0x00007f8ab9148f5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9148f67: cmp    %r11,%rax
  0x00007f8ab9148f6a: jb     0x00007f8ab914900d
  0x00007f8ab9148f70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9148f7a: cmp    %r11,%rax
  0x00007f8ab9148f7d: jbe    0x00007f8ab9148f96
  0x00007f8ab9148f83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9148f8d: cmp    %r11,%rax
  0x00007f8ab9148f90: jb     0x00007f8ab914900d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9148f96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9148f9b: sub    $0x80,%rsp
  0x00007f8ab9148fa2: mov    %rax,0x78(%rsp)
  0x00007f8ab9148fa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9148fac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9148fb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9148fb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9148fbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9148fc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9148fc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9148fca: mov    %r9,0x30(%rsp)
  0x00007f8ab9148fcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9148fd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9148fd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9148fde: mov    %r13,0x10(%rsp)
  0x00007f8ab9148fe3: mov    %r14,0x8(%rsp)
  0x00007f8ab9148fe8: mov    %r15,(%rsp)
  0x00007f8ab9148fec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9148ff6: movabs $0x7f8ab9148f96,%rsi
  0x00007f8ab9149000: mov    %rsp,%rdx
  0x00007f8ab9149003: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149007: callq  0x00007f8aceddb9fa
  0x00007f8ab914900c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914900d: mov    %rsp,%r11
  0x00007f8ab9149010: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149014: push   %rax
  0x00007f8ab9149015: mov    %r11,%rax
  0x00007f8ab9149018: mov    0x50(%rbx),%r11
  0x00007f8ab914901c: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9149021: mov    %rbx,0x258(%r15)
  0x00007f8ab9149028: mov    %rbx,%rax
  0x00007f8ab914902b: jmpq   *%r11
  0x00007f8ab914902e: mov    0x8(%rsi),%ebx
  0x00007f8ab9149031: shl    $0x3,%rbx
  0x00007f8ab9149035: cmp    0x10(%rax),%rbx
  0x00007f8ab9149039: mov    0x8(%rax),%rbx
  0x00007f8ab914903d: je     0x00007f8ab9149048
  0x00007f8ab9149043: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149048: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149050: je     0x00007f8ab914914b
  0x00007f8ab9149056: jmpq   0x00007f8ab9105c40
  0x00007f8ab914905b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149063: je     0x00007f8ab914914b
  0x00007f8ab9149069: mov    %rsp,%r13
  0x00007f8ab914906c: mov    (%rsp),%rax
  0x00007f8ab9149070: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149074: pushfq 
  0x00007f8ab9149075: sub    $0x8,%rsp
  0x00007f8ab9149079: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914907e: sub    $0x80,%rsp
  0x00007f8ab9149085: mov    %rax,0x78(%rsp)
  0x00007f8ab914908a: mov    %rcx,0x70(%rsp)
  0x00007f8ab914908f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9149094: mov    %rbx,0x60(%rsp)
  0x00007f8ab9149099: mov    %rbp,0x50(%rsp)
  0x00007f8ab914909e: mov    %rsi,0x48(%rsp)
  0x00007f8ab91490a3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91490a8: mov    %r8,0x38(%rsp)
  0x00007f8ab91490ad: mov    %r9,0x30(%rsp)
  0x00007f8ab91490b2: mov    %r10,0x28(%rsp)
  0x00007f8ab91490b7: mov    %r11,0x20(%rsp)
  0x00007f8ab91490bc: mov    %r12,0x18(%rsp)
  0x00007f8ab91490c1: mov    %r13,0x10(%rsp)
  0x00007f8ab91490c6: mov    %r14,0x8(%rsp)
  0x00007f8ab91490cb: mov    %r15,(%rsp)
  0x00007f8ab91490cf: sub    $0x200,%rsp
  0x00007f8ab91490d6: fxsave64 (%rsp)
  0x00007f8ab91490db: mov    %rbx,%rdi
  0x00007f8ab91490de: mov    %rax,%rsi
  0x00007f8ab91490e1: callq  0x00007f8acef8bbca
  0x00007f8ab91490e6: fxrstor64 (%rsp)
  0x00007f8ab91490eb: add    $0x200,%rsp
  0x00007f8ab91490f2: mov    (%rsp),%r15
  0x00007f8ab91490f6: mov    0x8(%rsp),%r14
  0x00007f8ab91490fb: mov    0x10(%rsp),%r13
  0x00007f8ab9149100: mov    0x18(%rsp),%r12
  0x00007f8ab9149105: mov    0x20(%rsp),%r11
  0x00007f8ab914910a: mov    0x28(%rsp),%r10
  0x00007f8ab914910f: mov    0x30(%rsp),%r9
  0x00007f8ab9149114: mov    0x38(%rsp),%r8
  0x00007f8ab9149119: mov    0x40(%rsp),%rdi
  0x00007f8ab914911e: mov    0x48(%rsp),%rsi
  0x00007f8ab9149123: mov    0x50(%rsp),%rbp
  0x00007f8ab9149128: mov    0x60(%rsp),%rbx
  0x00007f8ab914912d: mov    0x68(%rsp),%rdx
  0x00007f8ab9149132: mov    0x70(%rsp),%rcx
  0x00007f8ab9149137: mov    0x78(%rsp),%rax
  0x00007f8ab914913c: add    $0x80,%rsp
  0x00007f8ab9149143: add    $0x8,%rsp
  0x00007f8ab9149147: popfq  
  0x00007f8ab9149148: mov    %r13,%rsp
  0x00007f8ab914914b: pop    %rax
  0x00007f8ab914914c: mov    %rsp,%r13
  0x00007f8ab914914f: sub    $0x10,%rsp
  0x00007f8ab9149153: mov    %rax,(%rsp)
  0x00007f8ab9149157: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab914915d: mov    0x40(%rbx),%rcx
  0x00007f8ab9149161: jmpq   *%rcx

AHE@0x00007f8ac80ebe60: 0x7e000000 i2c: 0x00007f8ab9149220 c2i: 0x00007f8ab914935b c2iUV: 0x00007f8ab914932e
i2c argument handler #13 for: static (D)Ljava/lang/String; (594 bytes generated)
c2i argument handler starts at 0x7f8ab914935b
  0x00007f8ab9149220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9149224: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914922e: cmp    %r11,%rax
  0x00007f8ab9149231: jbe    0x00007f8ab914924a
  0x00007f8ab9149237: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9149241: cmp    %r11,%rax
  0x00007f8ab9149244: jb     0x00007f8ab914930d
  0x00007f8ab914924a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9149254: cmp    %r11,%rax
  0x00007f8ab9149257: jbe    0x00007f8ab9149270
  0x00007f8ab914925d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9149267: cmp    %r11,%rax
  0x00007f8ab914926a: jb     0x00007f8ab914930d
  0x00007f8ab9149270: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914927a: cmp    %r11,%rax
  0x00007f8ab914927d: jbe    0x00007f8ab9149296
  0x00007f8ab9149283: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914928d: cmp    %r11,%rax
  0x00007f8ab9149290: jb     0x00007f8ab914930d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9149296: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914929b: sub    $0x80,%rsp
  0x00007f8ab91492a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91492a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91492ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91492b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91492b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91492bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91492c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91492c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91492ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91492cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91492d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91492d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91492de: mov    %r13,0x10(%rsp)
  0x00007f8ab91492e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91492e8: mov    %r15,(%rsp)
  0x00007f8ab91492ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91492f6: movabs $0x7f8ab9149296,%rsi
  0x00007f8ab9149300: mov    %rsp,%rdx
  0x00007f8ab9149303: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149307: callq  0x00007f8aceddb9fa
  0x00007f8ab914930c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914930d: mov    %rsp,%r11
  0x00007f8ab9149310: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149314: push   %rax
  0x00007f8ab9149315: mov    %r11,%rax
  0x00007f8ab9149318: mov    0x50(%rbx),%r11
  0x00007f8ab914931c: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab9149321: mov    %rbx,0x258(%r15)
  0x00007f8ab9149328: mov    %rbx,%rax
  0x00007f8ab914932b: jmpq   *%r11
  0x00007f8ab914932e: mov    0x8(%rsi),%ebx
  0x00007f8ab9149331: shl    $0x3,%rbx
  0x00007f8ab9149335: cmp    0x10(%rax),%rbx
  0x00007f8ab9149339: mov    0x8(%rax),%rbx
  0x00007f8ab914933d: je     0x00007f8ab9149348
  0x00007f8ab9149343: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149348: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149350: je     0x00007f8ab914944b
  0x00007f8ab9149356: jmpq   0x00007f8ab9105c40
  0x00007f8ab914935b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149363: je     0x00007f8ab914944b
  0x00007f8ab9149369: mov    %rsp,%r13
  0x00007f8ab914936c: mov    (%rsp),%rax
  0x00007f8ab9149370: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149374: pushfq 
  0x00007f8ab9149375: sub    $0x8,%rsp
  0x00007f8ab9149379: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914937e: sub    $0x80,%rsp
  0x00007f8ab9149385: mov    %rax,0x78(%rsp)
  0x00007f8ab914938a: mov    %rcx,0x70(%rsp)
  0x00007f8ab914938f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9149394: mov    %rbx,0x60(%rsp)
  0x00007f8ab9149399: mov    %rbp,0x50(%rsp)
  0x00007f8ab914939e: mov    %rsi,0x48(%rsp)
  0x00007f8ab91493a3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91493a8: mov    %r8,0x38(%rsp)
  0x00007f8ab91493ad: mov    %r9,0x30(%rsp)
  0x00007f8ab91493b2: mov    %r10,0x28(%rsp)
  0x00007f8ab91493b7: mov    %r11,0x20(%rsp)
  0x00007f8ab91493bc: mov    %r12,0x18(%rsp)
  0x00007f8ab91493c1: mov    %r13,0x10(%rsp)
  0x00007f8ab91493c6: mov    %r14,0x8(%rsp)
  0x00007f8ab91493cb: mov    %r15,(%rsp)
  0x00007f8ab91493cf: sub    $0x200,%rsp
  0x00007f8ab91493d6: fxsave64 (%rsp)
  0x00007f8ab91493db: mov    %rbx,%rdi
  0x00007f8ab91493de: mov    %rax,%rsi
  0x00007f8ab91493e1: callq  0x00007f8acef8bbca
  0x00007f8ab91493e6: fxrstor64 (%rsp)
  0x00007f8ab91493eb: add    $0x200,%rsp
  0x00007f8ab91493f2: mov    (%rsp),%r15
  0x00007f8ab91493f6: mov    0x8(%rsp),%r14
  0x00007f8ab91493fb: mov    0x10(%rsp),%r13
  0x00007f8ab9149400: mov    0x18(%rsp),%r12
  0x00007f8ab9149405: mov    0x20(%rsp),%r11
  0x00007f8ab914940a: mov    0x28(%rsp),%r10
  0x00007f8ab914940f: mov    0x30(%rsp),%r9
  0x00007f8ab9149414: mov    0x38(%rsp),%r8
  0x00007f8ab9149419: mov    0x40(%rsp),%rdi
  0x00007f8ab914941e: mov    0x48(%rsp),%rsi
  0x00007f8ab9149423: mov    0x50(%rsp),%rbp
  0x00007f8ab9149428: mov    0x60(%rsp),%rbx
  0x00007f8ab914942d: mov    0x68(%rsp),%rdx
  0x00007f8ab9149432: mov    0x70(%rsp),%rcx
  0x00007f8ab9149437: mov    0x78(%rsp),%rax
  0x00007f8ab914943c: add    $0x80,%rsp
  0x00007f8ab9149443: add    $0x8,%rsp
  0x00007f8ab9149447: popfq  
  0x00007f8ab9149448: mov    %r13,%rsp
  0x00007f8ab914944b: pop    %rax
  0x00007f8ab914944c: mov    %rsp,%r13
  0x00007f8ab914944f: sub    $0x20,%rsp
  0x00007f8ab9149453: mov    %rax,(%rsp)
  0x00007f8ab9149457: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9149461: mov    %rax,0x10(%rsp)
  0x00007f8ab9149466: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab914946c: mov    0x40(%rbx),%rcx
  0x00007f8ab9149470: jmpq   *%rcx

AHE@0x00007f8ac80ebea8: 0x i2c: 0x00007f8ab9149520 c2i: 0x00007f8ab9149656 c2iUV: 0x00007f8ab9149629
i2c argument handler #14 for: static ()V (568 bytes generated)
c2i argument handler starts at 0x7f8ab9149656
  0x00007f8ab9149520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9149524: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914952e: cmp    %r11,%rax
  0x00007f8ab9149531: jbe    0x00007f8ab914954a
  0x00007f8ab9149537: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9149541: cmp    %r11,%rax
  0x00007f8ab9149544: jb     0x00007f8ab914960d
  0x00007f8ab914954a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9149554: cmp    %r11,%rax
  0x00007f8ab9149557: jbe    0x00007f8ab9149570
  0x00007f8ab914955d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9149567: cmp    %r11,%rax
  0x00007f8ab914956a: jb     0x00007f8ab914960d
  0x00007f8ab9149570: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914957a: cmp    %r11,%rax
  0x00007f8ab914957d: jbe    0x00007f8ab9149596
  0x00007f8ab9149583: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914958d: cmp    %r11,%rax
  0x00007f8ab9149590: jb     0x00007f8ab914960d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9149596: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914959b: sub    $0x80,%rsp
  0x00007f8ab91495a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91495a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91495ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91495b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91495b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91495bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91495c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91495c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91495ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91495cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91495d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91495d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91495de: mov    %r13,0x10(%rsp)
  0x00007f8ab91495e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91495e8: mov    %r15,(%rsp)
  0x00007f8ab91495ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91495f6: movabs $0x7f8ab9149596,%rsi
  0x00007f8ab9149600: mov    %rsp,%rdx
  0x00007f8ab9149603: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149607: callq  0x00007f8aceddb9fa
  0x00007f8ab914960c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914960d: mov    %rsp,%r11
  0x00007f8ab9149610: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149614: push   %rax
  0x00007f8ab9149615: mov    %r11,%rax
  0x00007f8ab9149618: mov    0x50(%rbx),%r11
  0x00007f8ab914961c: mov    %rbx,0x258(%r15)
  0x00007f8ab9149623: mov    %rbx,%rax
  0x00007f8ab9149626: jmpq   *%r11
  0x00007f8ab9149629: mov    0x8(%rsi),%ebx
  0x00007f8ab914962c: shl    $0x3,%rbx
  0x00007f8ab9149630: cmp    0x10(%rax),%rbx
  0x00007f8ab9149634: mov    0x8(%rax),%rbx
  0x00007f8ab9149638: je     0x00007f8ab9149643
  0x00007f8ab914963e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149643: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab914964b: je     0x00007f8ab9149746
  0x00007f8ab9149651: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149656: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab914965e: je     0x00007f8ab9149746
  0x00007f8ab9149664: mov    %rsp,%r13
  0x00007f8ab9149667: mov    (%rsp),%rax
  0x00007f8ab914966b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab914966f: pushfq 
  0x00007f8ab9149670: sub    $0x8,%rsp
  0x00007f8ab9149674: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9149679: sub    $0x80,%rsp
  0x00007f8ab9149680: mov    %rax,0x78(%rsp)
  0x00007f8ab9149685: mov    %rcx,0x70(%rsp)
  0x00007f8ab914968a: mov    %rdx,0x68(%rsp)
  0x00007f8ab914968f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9149694: mov    %rbp,0x50(%rsp)
  0x00007f8ab9149699: mov    %rsi,0x48(%rsp)
  0x00007f8ab914969e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91496a3: mov    %r8,0x38(%rsp)
  0x00007f8ab91496a8: mov    %r9,0x30(%rsp)
  0x00007f8ab91496ad: mov    %r10,0x28(%rsp)
  0x00007f8ab91496b2: mov    %r11,0x20(%rsp)
  0x00007f8ab91496b7: mov    %r12,0x18(%rsp)
  0x00007f8ab91496bc: mov    %r13,0x10(%rsp)
  0x00007f8ab91496c1: mov    %r14,0x8(%rsp)
  0x00007f8ab91496c6: mov    %r15,(%rsp)
  0x00007f8ab91496ca: sub    $0x200,%rsp
  0x00007f8ab91496d1: fxsave64 (%rsp)
  0x00007f8ab91496d6: mov    %rbx,%rdi
  0x00007f8ab91496d9: mov    %rax,%rsi
  0x00007f8ab91496dc: callq  0x00007f8acef8bbca
  0x00007f8ab91496e1: fxrstor64 (%rsp)
  0x00007f8ab91496e6: add    $0x200,%rsp
  0x00007f8ab91496ed: mov    (%rsp),%r15
  0x00007f8ab91496f1: mov    0x8(%rsp),%r14
  0x00007f8ab91496f6: mov    0x10(%rsp),%r13
  0x00007f8ab91496fb: mov    0x18(%rsp),%r12
  0x00007f8ab9149700: mov    0x20(%rsp),%r11
  0x00007f8ab9149705: mov    0x28(%rsp),%r10
  0x00007f8ab914970a: mov    0x30(%rsp),%r9
  0x00007f8ab914970f: mov    0x38(%rsp),%r8
  0x00007f8ab9149714: mov    0x40(%rsp),%rdi
  0x00007f8ab9149719: mov    0x48(%rsp),%rsi
  0x00007f8ab914971e: mov    0x50(%rsp),%rbp
  0x00007f8ab9149723: mov    0x60(%rsp),%rbx
  0x00007f8ab9149728: mov    0x68(%rsp),%rdx
  0x00007f8ab914972d: mov    0x70(%rsp),%rcx
  0x00007f8ab9149732: mov    0x78(%rsp),%rax
  0x00007f8ab9149737: add    $0x80,%rsp
  0x00007f8ab914973e: add    $0x8,%rsp
  0x00007f8ab9149742: popfq  
  0x00007f8ab9149743: mov    %r13,%rsp
  0x00007f8ab9149746: pop    %rax
  0x00007f8ab9149747: mov    %rsp,%r13
  0x00007f8ab914974a: sub    $0x10,%rsp
  0x00007f8ab914974e: mov    %rax,(%rsp)
  0x00007f8ab9149752: mov    0x40(%rbx),%rcx
  0x00007f8ab9149756: jmpq   *%rcx

AHE@0x00007f8ac80ebef0: 0xbbaaa000 i2c: 0x00007f8ab9149820 c2i: 0x00007f8ab9149969 c2iUV: 0x00007f8ab914993c
i2c argument handler #15 for: receiver ([BIII)V (611 bytes generated)
c2i argument handler starts at 0x7f8ab9149969
  0x00007f8ab9149820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9149824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab914982e: cmp    %r11,%rax
  0x00007f8ab9149831: jbe    0x00007f8ab914984a
  0x00007f8ab9149837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9149841: cmp    %r11,%rax
  0x00007f8ab9149844: jb     0x00007f8ab914990d
  0x00007f8ab914984a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9149854: cmp    %r11,%rax
  0x00007f8ab9149857: jbe    0x00007f8ab9149870
  0x00007f8ab914985d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9149867: cmp    %r11,%rax
  0x00007f8ab914986a: jb     0x00007f8ab914990d
  0x00007f8ab9149870: movabs $0x7f8ab9140820,%r11
  0x00007f8ab914987a: cmp    %r11,%rax
  0x00007f8ab914987d: jbe    0x00007f8ab9149896
  0x00007f8ab9149883: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab914988d: cmp    %r11,%rax
  0x00007f8ab9149890: jb     0x00007f8ab914990d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9149896: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914989b: sub    $0x80,%rsp
  0x00007f8ab91498a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91498a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91498ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91498b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91498b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91498bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91498c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91498c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91498ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91498cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91498d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91498d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91498de: mov    %r13,0x10(%rsp)
  0x00007f8ab91498e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91498e8: mov    %r15,(%rsp)
  0x00007f8ab91498ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91498f6: movabs $0x7f8ab9149896,%rsi
  0x00007f8ab9149900: mov    %rsp,%rdx
  0x00007f8ab9149903: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149907: callq  0x00007f8aceddb9fa
  0x00007f8ab914990c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab914990d: mov    %rsp,%r11
  0x00007f8ab9149910: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149914: push   %rax
  0x00007f8ab9149915: mov    %r11,%rax
  0x00007f8ab9149918: mov    0x50(%rbx),%r11
  0x00007f8ab914991c: mov    0x28(%rax),%rsi
  0x00007f8ab9149920: mov    0x20(%rax),%rdx
  0x00007f8ab9149924: mov    0x18(%rax),%ecx
  0x00007f8ab9149927: mov    0x10(%rax),%r8d
  0x00007f8ab914992b: mov    0x8(%rax),%r9d
  0x00007f8ab914992f: mov    %rbx,0x258(%r15)
  0x00007f8ab9149936: mov    %rbx,%rax
  0x00007f8ab9149939: jmpq   *%r11
  0x00007f8ab914993c: mov    0x8(%rsi),%ebx
  0x00007f8ab914993f: shl    $0x3,%rbx
  0x00007f8ab9149943: cmp    0x10(%rax),%rbx
  0x00007f8ab9149947: mov    0x8(%rax),%rbx
  0x00007f8ab914994b: je     0x00007f8ab9149956
  0x00007f8ab9149951: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149956: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab914995e: je     0x00007f8ab9149a59
  0x00007f8ab9149964: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149969: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149971: je     0x00007f8ab9149a59
  0x00007f8ab9149977: mov    %rsp,%r13
  0x00007f8ab914997a: mov    (%rsp),%rax
  0x00007f8ab914997e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149982: pushfq 
  0x00007f8ab9149983: sub    $0x8,%rsp
  0x00007f8ab9149987: mov    %rsp,-0x28(%rsp)
  0x00007f8ab914998c: sub    $0x80,%rsp
  0x00007f8ab9149993: mov    %rax,0x78(%rsp)
  0x00007f8ab9149998: mov    %rcx,0x70(%rsp)
  0x00007f8ab914999d: mov    %rdx,0x68(%rsp)
  0x00007f8ab91499a2: mov    %rbx,0x60(%rsp)
  0x00007f8ab91499a7: mov    %rbp,0x50(%rsp)
  0x00007f8ab91499ac: mov    %rsi,0x48(%rsp)
  0x00007f8ab91499b1: mov    %rdi,0x40(%rsp)
  0x00007f8ab91499b6: mov    %r8,0x38(%rsp)
  0x00007f8ab91499bb: mov    %r9,0x30(%rsp)
  0x00007f8ab91499c0: mov    %r10,0x28(%rsp)
  0x00007f8ab91499c5: mov    %r11,0x20(%rsp)
  0x00007f8ab91499ca: mov    %r12,0x18(%rsp)
  0x00007f8ab91499cf: mov    %r13,0x10(%rsp)
  0x00007f8ab91499d4: mov    %r14,0x8(%rsp)
  0x00007f8ab91499d9: mov    %r15,(%rsp)
  0x00007f8ab91499dd: sub    $0x200,%rsp
  0x00007f8ab91499e4: fxsave64 (%rsp)
  0x00007f8ab91499e9: mov    %rbx,%rdi
  0x00007f8ab91499ec: mov    %rax,%rsi
  0x00007f8ab91499ef: callq  0x00007f8acef8bbca
  0x00007f8ab91499f4: fxrstor64 (%rsp)
  0x00007f8ab91499f9: add    $0x200,%rsp
  0x00007f8ab9149a00: mov    (%rsp),%r15
  0x00007f8ab9149a04: mov    0x8(%rsp),%r14
  0x00007f8ab9149a09: mov    0x10(%rsp),%r13
  0x00007f8ab9149a0e: mov    0x18(%rsp),%r12
  0x00007f8ab9149a13: mov    0x20(%rsp),%r11
  0x00007f8ab9149a18: mov    0x28(%rsp),%r10
  0x00007f8ab9149a1d: mov    0x30(%rsp),%r9
  0x00007f8ab9149a22: mov    0x38(%rsp),%r8
  0x00007f8ab9149a27: mov    0x40(%rsp),%rdi
  0x00007f8ab9149a2c: mov    0x48(%rsp),%rsi
  0x00007f8ab9149a31: mov    0x50(%rsp),%rbp
  0x00007f8ab9149a36: mov    0x60(%rsp),%rbx
  0x00007f8ab9149a3b: mov    0x68(%rsp),%rdx
  0x00007f8ab9149a40: mov    0x70(%rsp),%rcx
  0x00007f8ab9149a45: mov    0x78(%rsp),%rax
  0x00007f8ab9149a4a: add    $0x80,%rsp
  0x00007f8ab9149a51: add    $0x8,%rsp
  0x00007f8ab9149a55: popfq  
  0x00007f8ab9149a56: mov    %r13,%rsp
  0x00007f8ab9149a59: pop    %rax
  0x00007f8ab9149a5a: mov    %rsp,%r13
  0x00007f8ab9149a5d: sub    $0x30,%rsp
  0x00007f8ab9149a61: mov    %rax,(%rsp)
  0x00007f8ab9149a65: mov    %rsi,0x28(%rsp)
  0x00007f8ab9149a6a: mov    %rdx,0x20(%rsp)
  0x00007f8ab9149a6f: mov    %ecx,0x18(%rsp)
  0x00007f8ab9149a73: mov    %r8d,0x10(%rsp)
  0x00007f8ab9149a78: mov    %r9d,0x8(%rsp)
  0x00007f8ab9149a7d: mov    0x40(%rbx),%rcx
  0x00007f8ab9149a81: jmpq   *%rcx

AHE@0x00007f8ac80ebf38: 0xbbaa0000 i2c: 0x00007f8ab9149b60 c2i: 0x00007f8ab9149ca5 c2iUV: 0x00007f8ab9149c78
i2c argument handler #16 for: receiver ([CII)V (602 bytes generated)
c2i argument handler starts at 0x7f8ab9149ca5
  0x00007f8ab9149b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9149b64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9149b6e: cmp    %r11,%rax
  0x00007f8ab9149b71: jbe    0x00007f8ab9149b8a
  0x00007f8ab9149b77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9149b81: cmp    %r11,%rax
  0x00007f8ab9149b84: jb     0x00007f8ab9149c4d
  0x00007f8ab9149b8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9149b94: cmp    %r11,%rax
  0x00007f8ab9149b97: jbe    0x00007f8ab9149bb0
  0x00007f8ab9149b9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9149ba7: cmp    %r11,%rax
  0x00007f8ab9149baa: jb     0x00007f8ab9149c4d
  0x00007f8ab9149bb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9149bba: cmp    %r11,%rax
  0x00007f8ab9149bbd: jbe    0x00007f8ab9149bd6
  0x00007f8ab9149bc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9149bcd: cmp    %r11,%rax
  0x00007f8ab9149bd0: jb     0x00007f8ab9149c4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9149bd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9149bdb: sub    $0x80,%rsp
  0x00007f8ab9149be2: mov    %rax,0x78(%rsp)
  0x00007f8ab9149be7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9149bec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9149bf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9149bf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9149bfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9149c00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9149c05: mov    %r8,0x38(%rsp)
  0x00007f8ab9149c0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9149c0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9149c14: mov    %r11,0x20(%rsp)
  0x00007f8ab9149c19: mov    %r12,0x18(%rsp)
  0x00007f8ab9149c1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9149c23: mov    %r14,0x8(%rsp)
  0x00007f8ab9149c28: mov    %r15,(%rsp)
  0x00007f8ab9149c2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9149c36: movabs $0x7f8ab9149bd6,%rsi
  0x00007f8ab9149c40: mov    %rsp,%rdx
  0x00007f8ab9149c43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149c47: callq  0x00007f8aceddb9fa
  0x00007f8ab9149c4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9149c4d: mov    %rsp,%r11
  0x00007f8ab9149c50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149c54: push   %rax
  0x00007f8ab9149c55: mov    %r11,%rax
  0x00007f8ab9149c58: mov    0x50(%rbx),%r11
  0x00007f8ab9149c5c: mov    0x20(%rax),%rsi
  0x00007f8ab9149c60: mov    0x18(%rax),%rdx
  0x00007f8ab9149c64: mov    0x10(%rax),%ecx
  0x00007f8ab9149c67: mov    0x8(%rax),%r8d
  0x00007f8ab9149c6b: mov    %rbx,0x258(%r15)
  0x00007f8ab9149c72: mov    %rbx,%rax
  0x00007f8ab9149c75: jmpq   *%r11
  0x00007f8ab9149c78: mov    0x8(%rsi),%ebx
  0x00007f8ab9149c7b: shl    $0x3,%rbx
  0x00007f8ab9149c7f: cmp    0x10(%rax),%rbx
  0x00007f8ab9149c83: mov    0x8(%rax),%rbx
  0x00007f8ab9149c87: je     0x00007f8ab9149c92
  0x00007f8ab9149c8d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149c92: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149c9a: je     0x00007f8ab9149d95
  0x00007f8ab9149ca0: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149ca5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149cad: je     0x00007f8ab9149d95
  0x00007f8ab9149cb3: mov    %rsp,%r13
  0x00007f8ab9149cb6: mov    (%rsp),%rax
  0x00007f8ab9149cba: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149cbe: pushfq 
  0x00007f8ab9149cbf: sub    $0x8,%rsp
  0x00007f8ab9149cc3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9149cc8: sub    $0x80,%rsp
  0x00007f8ab9149ccf: mov    %rax,0x78(%rsp)
  0x00007f8ab9149cd4: mov    %rcx,0x70(%rsp)
  0x00007f8ab9149cd9: mov    %rdx,0x68(%rsp)
  0x00007f8ab9149cde: mov    %rbx,0x60(%rsp)
  0x00007f8ab9149ce3: mov    %rbp,0x50(%rsp)
  0x00007f8ab9149ce8: mov    %rsi,0x48(%rsp)
  0x00007f8ab9149ced: mov    %rdi,0x40(%rsp)
  0x00007f8ab9149cf2: mov    %r8,0x38(%rsp)
  0x00007f8ab9149cf7: mov    %r9,0x30(%rsp)
  0x00007f8ab9149cfc: mov    %r10,0x28(%rsp)
  0x00007f8ab9149d01: mov    %r11,0x20(%rsp)
  0x00007f8ab9149d06: mov    %r12,0x18(%rsp)
  0x00007f8ab9149d0b: mov    %r13,0x10(%rsp)
  0x00007f8ab9149d10: mov    %r14,0x8(%rsp)
  0x00007f8ab9149d15: mov    %r15,(%rsp)
  0x00007f8ab9149d19: sub    $0x200,%rsp
  0x00007f8ab9149d20: fxsave64 (%rsp)
  0x00007f8ab9149d25: mov    %rbx,%rdi
  0x00007f8ab9149d28: mov    %rax,%rsi
  0x00007f8ab9149d2b: callq  0x00007f8acef8bbca
  0x00007f8ab9149d30: fxrstor64 (%rsp)
  0x00007f8ab9149d35: add    $0x200,%rsp
  0x00007f8ab9149d3c: mov    (%rsp),%r15
  0x00007f8ab9149d40: mov    0x8(%rsp),%r14
  0x00007f8ab9149d45: mov    0x10(%rsp),%r13
  0x00007f8ab9149d4a: mov    0x18(%rsp),%r12
  0x00007f8ab9149d4f: mov    0x20(%rsp),%r11
  0x00007f8ab9149d54: mov    0x28(%rsp),%r10
  0x00007f8ab9149d59: mov    0x30(%rsp),%r9
  0x00007f8ab9149d5e: mov    0x38(%rsp),%r8
  0x00007f8ab9149d63: mov    0x40(%rsp),%rdi
  0x00007f8ab9149d68: mov    0x48(%rsp),%rsi
  0x00007f8ab9149d6d: mov    0x50(%rsp),%rbp
  0x00007f8ab9149d72: mov    0x60(%rsp),%rbx
  0x00007f8ab9149d77: mov    0x68(%rsp),%rdx
  0x00007f8ab9149d7c: mov    0x70(%rsp),%rcx
  0x00007f8ab9149d81: mov    0x78(%rsp),%rax
  0x00007f8ab9149d86: add    $0x80,%rsp
  0x00007f8ab9149d8d: add    $0x8,%rsp
  0x00007f8ab9149d91: popfq  
  0x00007f8ab9149d92: mov    %r13,%rsp
  0x00007f8ab9149d95: pop    %rax
  0x00007f8ab9149d96: mov    %rsp,%r13
  0x00007f8ab9149d99: sub    $0x30,%rsp
  0x00007f8ab9149d9d: mov    %rax,(%rsp)
  0x00007f8ab9149da1: mov    %rsi,0x20(%rsp)
  0x00007f8ab9149da6: mov    %rdx,0x18(%rsp)
  0x00007f8ab9149dab: mov    %ecx,0x10(%rsp)
  0x00007f8ab9149daf: mov    %r8d,0x8(%rsp)
  0x00007f8ab9149db4: mov    0x40(%rbx),%rcx
  0x00007f8ab9149db8: jmpq   *%rcx

AHE@0x00007f8ac80ebf80: 0xbbaab000 i2c: 0x00007f8ab9149e60 c2i: 0x00007f8ab9149fa9 c2iUV: 0x00007f8ab9149f7c
i2c argument handler #17 for: receiver ([BIILjava/lang/String;)V (611 bytes generated)
c2i argument handler starts at 0x7f8ab9149fa9
  0x00007f8ab9149e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9149e64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9149e6e: cmp    %r11,%rax
  0x00007f8ab9149e71: jbe    0x00007f8ab9149e8a
  0x00007f8ab9149e77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9149e81: cmp    %r11,%rax
  0x00007f8ab9149e84: jb     0x00007f8ab9149f4d
  0x00007f8ab9149e8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9149e94: cmp    %r11,%rax
  0x00007f8ab9149e97: jbe    0x00007f8ab9149eb0
  0x00007f8ab9149e9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9149ea7: cmp    %r11,%rax
  0x00007f8ab9149eaa: jb     0x00007f8ab9149f4d
  0x00007f8ab9149eb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9149eba: cmp    %r11,%rax
  0x00007f8ab9149ebd: jbe    0x00007f8ab9149ed6
  0x00007f8ab9149ec3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9149ecd: cmp    %r11,%rax
  0x00007f8ab9149ed0: jb     0x00007f8ab9149f4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9149ed6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9149edb: sub    $0x80,%rsp
  0x00007f8ab9149ee2: mov    %rax,0x78(%rsp)
  0x00007f8ab9149ee7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9149eec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9149ef1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9149ef6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9149efb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9149f00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9149f05: mov    %r8,0x38(%rsp)
  0x00007f8ab9149f0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9149f0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9149f14: mov    %r11,0x20(%rsp)
  0x00007f8ab9149f19: mov    %r12,0x18(%rsp)
  0x00007f8ab9149f1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9149f23: mov    %r14,0x8(%rsp)
  0x00007f8ab9149f28: mov    %r15,(%rsp)
  0x00007f8ab9149f2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9149f36: movabs $0x7f8ab9149ed6,%rsi
  0x00007f8ab9149f40: mov    %rsp,%rdx
  0x00007f8ab9149f43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149f47: callq  0x00007f8aceddb9fa
  0x00007f8ab9149f4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9149f4d: mov    %rsp,%r11
  0x00007f8ab9149f50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149f54: push   %rax
  0x00007f8ab9149f55: mov    %r11,%rax
  0x00007f8ab9149f58: mov    0x50(%rbx),%r11
  0x00007f8ab9149f5c: mov    0x28(%rax),%rsi
  0x00007f8ab9149f60: mov    0x20(%rax),%rdx
  0x00007f8ab9149f64: mov    0x18(%rax),%ecx
  0x00007f8ab9149f67: mov    0x10(%rax),%r8d
  0x00007f8ab9149f6b: mov    0x8(%rax),%r9
  0x00007f8ab9149f6f: mov    %rbx,0x258(%r15)
  0x00007f8ab9149f76: mov    %rbx,%rax
  0x00007f8ab9149f79: jmpq   *%r11
  0x00007f8ab9149f7c: mov    0x8(%rsi),%ebx
  0x00007f8ab9149f7f: shl    $0x3,%rbx
  0x00007f8ab9149f83: cmp    0x10(%rax),%rbx
  0x00007f8ab9149f87: mov    0x8(%rax),%rbx
  0x00007f8ab9149f8b: je     0x00007f8ab9149f96
  0x00007f8ab9149f91: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149f96: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149f9e: je     0x00007f8ab914a099
  0x00007f8ab9149fa4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9149fa9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9149fb1: je     0x00007f8ab914a099
  0x00007f8ab9149fb7: mov    %rsp,%r13
  0x00007f8ab9149fba: mov    (%rsp),%rax
  0x00007f8ab9149fbe: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9149fc2: pushfq 
  0x00007f8ab9149fc3: sub    $0x8,%rsp
  0x00007f8ab9149fc7: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9149fcc: sub    $0x80,%rsp
  0x00007f8ab9149fd3: mov    %rax,0x78(%rsp)
  0x00007f8ab9149fd8: mov    %rcx,0x70(%rsp)
  0x00007f8ab9149fdd: mov    %rdx,0x68(%rsp)
  0x00007f8ab9149fe2: mov    %rbx,0x60(%rsp)
  0x00007f8ab9149fe7: mov    %rbp,0x50(%rsp)
  0x00007f8ab9149fec: mov    %rsi,0x48(%rsp)
  0x00007f8ab9149ff1: mov    %rdi,0x40(%rsp)
  0x00007f8ab9149ff6: mov    %r8,0x38(%rsp)
  0x00007f8ab9149ffb: mov    %r9,0x30(%rsp)
  0x00007f8ab914a000: mov    %r10,0x28(%rsp)
  0x00007f8ab914a005: mov    %r11,0x20(%rsp)
  0x00007f8ab914a00a: mov    %r12,0x18(%rsp)
  0x00007f8ab914a00f: mov    %r13,0x10(%rsp)
  0x00007f8ab914a014: mov    %r14,0x8(%rsp)
  0x00007f8ab914a019: mov    %r15,(%rsp)
  0x00007f8ab914a01d: sub    $0x200,%rsp
  0x00007f8ab914a024: fxsave64 (%rsp)
  0x00007f8ab914a029: mov    %rbx,%rdi
  0x00007f8ab914a02c: mov    %rax,%rsi
  0x00007f8ab914a02f: callq  0x00007f8acef8bbca
  0x00007f8ab914a034: fxrstor64 (%rsp)
  0x00007f8ab914a039: add    $0x200,%rsp
  0x00007f8ab914a040: mov    (%rsp),%r15
  0x00007f8ab914a044: mov    0x8(%rsp),%r14
  0x00007f8ab914a049: mov    0x10(%rsp),%r13
  0x00007f8ab914a04e: mov    0x18(%rsp),%r12
  0x00007f8ab914a053: mov    0x20(%rsp),%r11
  0x00007f8ab914a058: mov    0x28(%rsp),%r10
  0x00007f8ab914a05d: mov    0x30(%rsp),%r9
  0x00007f8ab914a062: mov    0x38(%rsp),%r8
  0x00007f8ab914a067: mov    0x40(%rsp),%rdi
  0x00007f8ab914a06c: mov    0x48(%rsp),%rsi
  0x00007f8ab914a071: mov    0x50(%rsp),%rbp
  0x00007f8ab914a076: mov    0x60(%rsp),%rbx
  0x00007f8ab914a07b: mov    0x68(%rsp),%rdx
  0x00007f8ab914a080: mov    0x70(%rsp),%rcx
  0x00007f8ab914a085: mov    0x78(%rsp),%rax
  0x00007f8ab914a08a: add    $0x80,%rsp
  0x00007f8ab914a091: add    $0x8,%rsp
  0x00007f8ab914a095: popfq  
  0x00007f8ab914a096: mov    %r13,%rsp
  0x00007f8ab914a099: pop    %rax
  0x00007f8ab914a09a: mov    %rsp,%r13
  0x00007f8ab914a09d: sub    $0x30,%rsp
  0x00007f8ab914a0a1: mov    %rax,(%rsp)
  0x00007f8ab914a0a5: mov    %rsi,0x28(%rsp)
  0x00007f8ab914a0aa: mov    %rdx,0x20(%rsp)
  0x00007f8ab914a0af: mov    %ecx,0x18(%rsp)
  0x00007f8ab914a0b3: mov    %r8d,0x10(%rsp)
  0x00007f8ab914a0b8: mov    %r9,0x8(%rsp)
  0x00007f8ab914a0bd: mov    0x40(%rbx),%rcx
  0x00007f8ab914a0c1: jmpq   *%rcx

AHE@0x00007f8ac80ebfc8: 0xbbbb0000 i2c: 0x00007f8ab91526a0 c2i: 0x00007f8ab91527e6 c2iUV: 0x00007f8ab91527b9
i2c argument handler #18 for: receiver (Ljava/util/Comparator;Ljava/lang/Object;Ljava/lang/Object;)I (604 bytes generated)
c2i argument handler starts at 0x7f8ab91527e6
  0x00007f8ab91526a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91526a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91526ae: cmp    %r11,%rax
  0x00007f8ab91526b1: jbe    0x00007f8ab91526ca
  0x00007f8ab91526b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91526c1: cmp    %r11,%rax
  0x00007f8ab91526c4: jb     0x00007f8ab915278d
  0x00007f8ab91526ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91526d4: cmp    %r11,%rax
  0x00007f8ab91526d7: jbe    0x00007f8ab91526f0
  0x00007f8ab91526dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91526e7: cmp    %r11,%rax
  0x00007f8ab91526ea: jb     0x00007f8ab915278d
  0x00007f8ab91526f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91526fa: cmp    %r11,%rax
  0x00007f8ab91526fd: jbe    0x00007f8ab9152716
  0x00007f8ab9152703: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915270d: cmp    %r11,%rax
  0x00007f8ab9152710: jb     0x00007f8ab915278d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9152716: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915271b: sub    $0x80,%rsp
  0x00007f8ab9152722: mov    %rax,0x78(%rsp)
  0x00007f8ab9152727: mov    %rcx,0x70(%rsp)
  0x00007f8ab915272c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9152731: mov    %rbx,0x60(%rsp)
  0x00007f8ab9152736: mov    %rbp,0x50(%rsp)
  0x00007f8ab915273b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9152740: mov    %rdi,0x40(%rsp)
  0x00007f8ab9152745: mov    %r8,0x38(%rsp)
  0x00007f8ab915274a: mov    %r9,0x30(%rsp)
  0x00007f8ab915274f: mov    %r10,0x28(%rsp)
  0x00007f8ab9152754: mov    %r11,0x20(%rsp)
  0x00007f8ab9152759: mov    %r12,0x18(%rsp)
  0x00007f8ab915275e: mov    %r13,0x10(%rsp)
  0x00007f8ab9152763: mov    %r14,0x8(%rsp)
  0x00007f8ab9152768: mov    %r15,(%rsp)
  0x00007f8ab915276c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9152776: movabs $0x7f8ab9152716,%rsi
  0x00007f8ab9152780: mov    %rsp,%rdx
  0x00007f8ab9152783: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152787: callq  0x00007f8aceddb9fa
  0x00007f8ab915278c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915278d: mov    %rsp,%r11
  0x00007f8ab9152790: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152794: push   %rax
  0x00007f8ab9152795: mov    %r11,%rax
  0x00007f8ab9152798: mov    0x50(%rbx),%r11
  0x00007f8ab915279c: mov    0x20(%rax),%rsi
  0x00007f8ab91527a0: mov    0x18(%rax),%rdx
  0x00007f8ab91527a4: mov    0x10(%rax),%rcx
  0x00007f8ab91527a8: mov    0x8(%rax),%r8
  0x00007f8ab91527ac: mov    %rbx,0x258(%r15)
  0x00007f8ab91527b3: mov    %rbx,%rax
  0x00007f8ab91527b6: jmpq   *%r11
  0x00007f8ab91527b9: mov    0x8(%rsi),%ebx
  0x00007f8ab91527bc: shl    $0x3,%rbx
  0x00007f8ab91527c0: cmp    0x10(%rax),%rbx
  0x00007f8ab91527c4: mov    0x8(%rax),%rbx
  0x00007f8ab91527c8: je     0x00007f8ab91527d3
  0x00007f8ab91527ce: jmpq   0x00007f8ab9105c40
  0x00007f8ab91527d3: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91527db: je     0x00007f8ab91528d6
  0x00007f8ab91527e1: jmpq   0x00007f8ab9105c40
  0x00007f8ab91527e6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91527ee: je     0x00007f8ab91528d6
  0x00007f8ab91527f4: mov    %rsp,%r13
  0x00007f8ab91527f7: mov    (%rsp),%rax
  0x00007f8ab91527fb: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91527ff: pushfq 
  0x00007f8ab9152800: sub    $0x8,%rsp
  0x00007f8ab9152804: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9152809: sub    $0x80,%rsp
  0x00007f8ab9152810: mov    %rax,0x78(%rsp)
  0x00007f8ab9152815: mov    %rcx,0x70(%rsp)
  0x00007f8ab915281a: mov    %rdx,0x68(%rsp)
  0x00007f8ab915281f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9152824: mov    %rbp,0x50(%rsp)
  0x00007f8ab9152829: mov    %rsi,0x48(%rsp)
  0x00007f8ab915282e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9152833: mov    %r8,0x38(%rsp)
  0x00007f8ab9152838: mov    %r9,0x30(%rsp)
  0x00007f8ab915283d: mov    %r10,0x28(%rsp)
  0x00007f8ab9152842: mov    %r11,0x20(%rsp)
  0x00007f8ab9152847: mov    %r12,0x18(%rsp)
  0x00007f8ab915284c: mov    %r13,0x10(%rsp)
  0x00007f8ab9152851: mov    %r14,0x8(%rsp)
  0x00007f8ab9152856: mov    %r15,(%rsp)
  0x00007f8ab915285a: sub    $0x200,%rsp
  0x00007f8ab9152861: fxsave64 (%rsp)
  0x00007f8ab9152866: mov    %rbx,%rdi
  0x00007f8ab9152869: mov    %rax,%rsi
  0x00007f8ab915286c: callq  0x00007f8acef8bbca
  0x00007f8ab9152871: fxrstor64 (%rsp)
  0x00007f8ab9152876: add    $0x200,%rsp
  0x00007f8ab915287d: mov    (%rsp),%r15
  0x00007f8ab9152881: mov    0x8(%rsp),%r14
  0x00007f8ab9152886: mov    0x10(%rsp),%r13
  0x00007f8ab915288b: mov    0x18(%rsp),%r12
  0x00007f8ab9152890: mov    0x20(%rsp),%r11
  0x00007f8ab9152895: mov    0x28(%rsp),%r10
  0x00007f8ab915289a: mov    0x30(%rsp),%r9
  0x00007f8ab915289f: mov    0x38(%rsp),%r8
  0x00007f8ab91528a4: mov    0x40(%rsp),%rdi
  0x00007f8ab91528a9: mov    0x48(%rsp),%rsi
  0x00007f8ab91528ae: mov    0x50(%rsp),%rbp
  0x00007f8ab91528b3: mov    0x60(%rsp),%rbx
  0x00007f8ab91528b8: mov    0x68(%rsp),%rdx
  0x00007f8ab91528bd: mov    0x70(%rsp),%rcx
  0x00007f8ab91528c2: mov    0x78(%rsp),%rax
  0x00007f8ab91528c7: add    $0x80,%rsp
  0x00007f8ab91528ce: add    $0x8,%rsp
  0x00007f8ab91528d2: popfq  
  0x00007f8ab91528d3: mov    %r13,%rsp
  0x00007f8ab91528d6: pop    %rax
  0x00007f8ab91528d7: mov    %rsp,%r13
  0x00007f8ab91528da: sub    $0x30,%rsp
  0x00007f8ab91528de: mov    %rax,(%rsp)
  0x00007f8ab91528e2: mov    %rsi,0x20(%rsp)
  0x00007f8ab91528e7: mov    %rdx,0x18(%rsp)
  0x00007f8ab91528ec: mov    %rcx,0x10(%rsp)
  0x00007f8ab91528f1: mov    %r8,0x8(%rsp)
  0x00007f8ab91528f6: mov    0x40(%rbx),%rcx
  0x00007f8ab91528fa: jmpq   *%rcx

AHE@0x00007f8ac80ec010: 0xbea00000 i2c: 0x00007f8ab91529a0 c2i: 0x00007f8ab9152add c2iUV: 0x00007f8ab9152ab0
i2c argument handler #19 for: static (JI)V (599 bytes generated)
c2i argument handler starts at 0x7f8ab9152add
  0x00007f8ab91529a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91529a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91529ae: cmp    %r11,%rax
  0x00007f8ab91529b1: jbe    0x00007f8ab91529ca
  0x00007f8ab91529b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91529c1: cmp    %r11,%rax
  0x00007f8ab91529c4: jb     0x00007f8ab9152a8d
  0x00007f8ab91529ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91529d4: cmp    %r11,%rax
  0x00007f8ab91529d7: jbe    0x00007f8ab91529f0
  0x00007f8ab91529dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91529e7: cmp    %r11,%rax
  0x00007f8ab91529ea: jb     0x00007f8ab9152a8d
  0x00007f8ab91529f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91529fa: cmp    %r11,%rax
  0x00007f8ab91529fd: jbe    0x00007f8ab9152a16
  0x00007f8ab9152a03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9152a0d: cmp    %r11,%rax
  0x00007f8ab9152a10: jb     0x00007f8ab9152a8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9152a16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9152a1b: sub    $0x80,%rsp
  0x00007f8ab9152a22: mov    %rax,0x78(%rsp)
  0x00007f8ab9152a27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9152a2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9152a31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9152a36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9152a3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9152a40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9152a45: mov    %r8,0x38(%rsp)
  0x00007f8ab9152a4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9152a4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9152a54: mov    %r11,0x20(%rsp)
  0x00007f8ab9152a59: mov    %r12,0x18(%rsp)
  0x00007f8ab9152a5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9152a63: mov    %r14,0x8(%rsp)
  0x00007f8ab9152a68: mov    %r15,(%rsp)
  0x00007f8ab9152a6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9152a76: movabs $0x7f8ab9152a16,%rsi
  0x00007f8ab9152a80: mov    %rsp,%rdx
  0x00007f8ab9152a83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152a87: callq  0x00007f8aceddb9fa
  0x00007f8ab9152a8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9152a8d: mov    %rsp,%r11
  0x00007f8ab9152a90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152a94: push   %rax
  0x00007f8ab9152a95: mov    %r11,%rax
  0x00007f8ab9152a98: mov    0x50(%rbx),%r11
  0x00007f8ab9152a9c: mov    0x10(%rax),%rsi
  0x00007f8ab9152aa0: mov    0x8(%rax),%edx
  0x00007f8ab9152aa3: mov    %rbx,0x258(%r15)
  0x00007f8ab9152aaa: mov    %rbx,%rax
  0x00007f8ab9152aad: jmpq   *%r11
  0x00007f8ab9152ab0: mov    0x8(%rsi),%ebx
  0x00007f8ab9152ab3: shl    $0x3,%rbx
  0x00007f8ab9152ab7: cmp    0x10(%rax),%rbx
  0x00007f8ab9152abb: mov    0x8(%rax),%rbx
  0x00007f8ab9152abf: je     0x00007f8ab9152aca
  0x00007f8ab9152ac5: jmpq   0x00007f8ab9105c40
  0x00007f8ab9152aca: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9152ad2: je     0x00007f8ab9152bcd
  0x00007f8ab9152ad8: jmpq   0x00007f8ab9105c40
  0x00007f8ab9152add: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9152ae5: je     0x00007f8ab9152bcd
  0x00007f8ab9152aeb: mov    %rsp,%r13
  0x00007f8ab9152aee: mov    (%rsp),%rax
  0x00007f8ab9152af2: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152af6: pushfq 
  0x00007f8ab9152af7: sub    $0x8,%rsp
  0x00007f8ab9152afb: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9152b00: sub    $0x80,%rsp
  0x00007f8ab9152b07: mov    %rax,0x78(%rsp)
  0x00007f8ab9152b0c: mov    %rcx,0x70(%rsp)
  0x00007f8ab9152b11: mov    %rdx,0x68(%rsp)
  0x00007f8ab9152b16: mov    %rbx,0x60(%rsp)
  0x00007f8ab9152b1b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9152b20: mov    %rsi,0x48(%rsp)
  0x00007f8ab9152b25: mov    %rdi,0x40(%rsp)
  0x00007f8ab9152b2a: mov    %r8,0x38(%rsp)
  0x00007f8ab9152b2f: mov    %r9,0x30(%rsp)
  0x00007f8ab9152b34: mov    %r10,0x28(%rsp)
  0x00007f8ab9152b39: mov    %r11,0x20(%rsp)
  0x00007f8ab9152b3e: mov    %r12,0x18(%rsp)
  0x00007f8ab9152b43: mov    %r13,0x10(%rsp)
  0x00007f8ab9152b48: mov    %r14,0x8(%rsp)
  0x00007f8ab9152b4d: mov    %r15,(%rsp)
  0x00007f8ab9152b51: sub    $0x200,%rsp
  0x00007f8ab9152b58: fxsave64 (%rsp)
  0x00007f8ab9152b5d: mov    %rbx,%rdi
  0x00007f8ab9152b60: mov    %rax,%rsi
  0x00007f8ab9152b63: callq  0x00007f8acef8bbca
  0x00007f8ab9152b68: fxrstor64 (%rsp)
  0x00007f8ab9152b6d: add    $0x200,%rsp
  0x00007f8ab9152b74: mov    (%rsp),%r15
  0x00007f8ab9152b78: mov    0x8(%rsp),%r14
  0x00007f8ab9152b7d: mov    0x10(%rsp),%r13
  0x00007f8ab9152b82: mov    0x18(%rsp),%r12
  0x00007f8ab9152b87: mov    0x20(%rsp),%r11
  0x00007f8ab9152b8c: mov    0x28(%rsp),%r10
  0x00007f8ab9152b91: mov    0x30(%rsp),%r9
  0x00007f8ab9152b96: mov    0x38(%rsp),%r8
  0x00007f8ab9152b9b: mov    0x40(%rsp),%rdi
  0x00007f8ab9152ba0: mov    0x48(%rsp),%rsi
  0x00007f8ab9152ba5: mov    0x50(%rsp),%rbp
  0x00007f8ab9152baa: mov    0x60(%rsp),%rbx
  0x00007f8ab9152baf: mov    0x68(%rsp),%rdx
  0x00007f8ab9152bb4: mov    0x70(%rsp),%rcx
  0x00007f8ab9152bb9: mov    0x78(%rsp),%rax
  0x00007f8ab9152bbe: add    $0x80,%rsp
  0x00007f8ab9152bc5: add    $0x8,%rsp
  0x00007f8ab9152bc9: popfq  
  0x00007f8ab9152bca: mov    %r13,%rsp
  0x00007f8ab9152bcd: pop    %rax
  0x00007f8ab9152bce: mov    %rsp,%r13
  0x00007f8ab9152bd1: sub    $0x20,%rsp
  0x00007f8ab9152bd5: mov    %rax,(%rsp)
  0x00007f8ab9152bd9: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9152be3: mov    %rax,0x18(%rsp)
  0x00007f8ab9152be8: mov    %rsi,0x10(%rsp)
  0x00007f8ab9152bed: mov    %edx,0x8(%rsp)
  0x00007f8ab9152bf1: mov    0x40(%rbx),%rcx
  0x00007f8ab9152bf5: jmpq   *%rcx

AHE@0x00007f8ac80ec058: 0xbbbbbe00 i2c: 0x00007f8ab9152ca0 c2i: 0x00007f8ab9152dea c2iUV: 0x00007f8ab9152dbd
i2c argument handler #20 for: receiver (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V (628 bytes generated)
c2i argument handler starts at 0x7f8ab9152dea
  0x00007f8ab9152ca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9152ca4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9152cae: cmp    %r11,%rax
  0x00007f8ab9152cb1: jbe    0x00007f8ab9152cca
  0x00007f8ab9152cb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9152cc1: cmp    %r11,%rax
  0x00007f8ab9152cc4: jb     0x00007f8ab9152d8d
  0x00007f8ab9152cca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9152cd4: cmp    %r11,%rax
  0x00007f8ab9152cd7: jbe    0x00007f8ab9152cf0
  0x00007f8ab9152cdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9152ce7: cmp    %r11,%rax
  0x00007f8ab9152cea: jb     0x00007f8ab9152d8d
  0x00007f8ab9152cf0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9152cfa: cmp    %r11,%rax
  0x00007f8ab9152cfd: jbe    0x00007f8ab9152d16
  0x00007f8ab9152d03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9152d0d: cmp    %r11,%rax
  0x00007f8ab9152d10: jb     0x00007f8ab9152d8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9152d16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9152d1b: sub    $0x80,%rsp
  0x00007f8ab9152d22: mov    %rax,0x78(%rsp)
  0x00007f8ab9152d27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9152d2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9152d31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9152d36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9152d3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9152d40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9152d45: mov    %r8,0x38(%rsp)
  0x00007f8ab9152d4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9152d4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9152d54: mov    %r11,0x20(%rsp)
  0x00007f8ab9152d59: mov    %r12,0x18(%rsp)
  0x00007f8ab9152d5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9152d63: mov    %r14,0x8(%rsp)
  0x00007f8ab9152d68: mov    %r15,(%rsp)
  0x00007f8ab9152d6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9152d76: movabs $0x7f8ab9152d16,%rsi
  0x00007f8ab9152d80: mov    %rsp,%rdx
  0x00007f8ab9152d83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152d87: callq  0x00007f8aceddb9fa
  0x00007f8ab9152d8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9152d8d: mov    %rsp,%r11
  0x00007f8ab9152d90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152d94: push   %rax
  0x00007f8ab9152d95: mov    %r11,%rax
  0x00007f8ab9152d98: mov    0x50(%rbx),%r11
  0x00007f8ab9152d9c: mov    0x30(%rax),%rsi
  0x00007f8ab9152da0: mov    0x28(%rax),%rdx
  0x00007f8ab9152da4: mov    0x20(%rax),%rcx
  0x00007f8ab9152da8: mov    0x18(%rax),%r8
  0x00007f8ab9152dac: mov    0x8(%rax),%r9
  0x00007f8ab9152db0: mov    %rbx,0x258(%r15)
  0x00007f8ab9152db7: mov    %rbx,%rax
  0x00007f8ab9152dba: jmpq   *%r11
  0x00007f8ab9152dbd: mov    0x8(%rsi),%ebx
  0x00007f8ab9152dc0: shl    $0x3,%rbx
  0x00007f8ab9152dc4: cmp    0x10(%rax),%rbx
  0x00007f8ab9152dc8: mov    0x8(%rax),%rbx
  0x00007f8ab9152dcc: je     0x00007f8ab9152dd7
  0x00007f8ab9152dd2: jmpq   0x00007f8ab9105c40
  0x00007f8ab9152dd7: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9152ddf: je     0x00007f8ab9152eda
  0x00007f8ab9152de5: jmpq   0x00007f8ab9105c40
  0x00007f8ab9152dea: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9152df2: je     0x00007f8ab9152eda
  0x00007f8ab9152df8: mov    %rsp,%r13
  0x00007f8ab9152dfb: mov    (%rsp),%rax
  0x00007f8ab9152dff: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9152e03: pushfq 
  0x00007f8ab9152e04: sub    $0x8,%rsp
  0x00007f8ab9152e08: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9152e0d: sub    $0x80,%rsp
  0x00007f8ab9152e14: mov    %rax,0x78(%rsp)
  0x00007f8ab9152e19: mov    %rcx,0x70(%rsp)
  0x00007f8ab9152e1e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9152e23: mov    %rbx,0x60(%rsp)
  0x00007f8ab9152e28: mov    %rbp,0x50(%rsp)
  0x00007f8ab9152e2d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9152e32: mov    %rdi,0x40(%rsp)
  0x00007f8ab9152e37: mov    %r8,0x38(%rsp)
  0x00007f8ab9152e3c: mov    %r9,0x30(%rsp)
  0x00007f8ab9152e41: mov    %r10,0x28(%rsp)
  0x00007f8ab9152e46: mov    %r11,0x20(%rsp)
  0x00007f8ab9152e4b: mov    %r12,0x18(%rsp)
  0x00007f8ab9152e50: mov    %r13,0x10(%rsp)
  0x00007f8ab9152e55: mov    %r14,0x8(%rsp)
  0x00007f8ab9152e5a: mov    %r15,(%rsp)
  0x00007f8ab9152e5e: sub    $0x200,%rsp
  0x00007f8ab9152e65: fxsave64 (%rsp)
  0x00007f8ab9152e6a: mov    %rbx,%rdi
  0x00007f8ab9152e6d: mov    %rax,%rsi
  0x00007f8ab9152e70: callq  0x00007f8acef8bbca
  0x00007f8ab9152e75: fxrstor64 (%rsp)
  0x00007f8ab9152e7a: add    $0x200,%rsp
  0x00007f8ab9152e81: mov    (%rsp),%r15
  0x00007f8ab9152e85: mov    0x8(%rsp),%r14
  0x00007f8ab9152e8a: mov    0x10(%rsp),%r13
  0x00007f8ab9152e8f: mov    0x18(%rsp),%r12
  0x00007f8ab9152e94: mov    0x20(%rsp),%r11
  0x00007f8ab9152e99: mov    0x28(%rsp),%r10
  0x00007f8ab9152e9e: mov    0x30(%rsp),%r9
  0x00007f8ab9152ea3: mov    0x38(%rsp),%r8
  0x00007f8ab9152ea8: mov    0x40(%rsp),%rdi
  0x00007f8ab9152ead: mov    0x48(%rsp),%rsi
  0x00007f8ab9152eb2: mov    0x50(%rsp),%rbp
  0x00007f8ab9152eb7: mov    0x60(%rsp),%rbx
  0x00007f8ab9152ebc: mov    0x68(%rsp),%rdx
  0x00007f8ab9152ec1: mov    0x70(%rsp),%rcx
  0x00007f8ab9152ec6: mov    0x78(%rsp),%rax
  0x00007f8ab9152ecb: add    $0x80,%rsp
  0x00007f8ab9152ed2: add    $0x8,%rsp
  0x00007f8ab9152ed6: popfq  
  0x00007f8ab9152ed7: mov    %r13,%rsp
  0x00007f8ab9152eda: pop    %rax
  0x00007f8ab9152edb: mov    %rsp,%r13
  0x00007f8ab9152ede: sub    $0x40,%rsp
  0x00007f8ab9152ee2: mov    %rax,(%rsp)
  0x00007f8ab9152ee6: mov    %rsi,0x30(%rsp)
  0x00007f8ab9152eeb: mov    %rdx,0x28(%rsp)
  0x00007f8ab9152ef0: mov    %rcx,0x20(%rsp)
  0x00007f8ab9152ef5: mov    %r8,0x18(%rsp)
  0x00007f8ab9152efa: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9152f04: mov    %rax,0x10(%rsp)
  0x00007f8ab9152f09: mov    %r9,0x8(%rsp)
  0x00007f8ab9152f0e: mov    0x40(%rbx),%rcx
  0x00007f8ab9152f12: jmpq   *%rcx

AHE@0x00007f8ac80ec0a0: 0xbbbbbeba i2c: 0x00007f8ab9152fe0 c2i: 0x00007f8ab915313b c2iUV: 0x00007f8ab915310e
i2c argument handler #21 for: receiver (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;Z)V (659 bytes generated)
c2i argument handler starts at 0x7f8ab915313b
  0x00007f8ab9152fe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9152fe4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9152fee: cmp    %r11,%rax
  0x00007f8ab9152ff1: jbe    0x00007f8ab915300a
  0x00007f8ab9152ff7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9153001: cmp    %r11,%rax
  0x00007f8ab9153004: jb     0x00007f8ab91530cd
  0x00007f8ab915300a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9153014: cmp    %r11,%rax
  0x00007f8ab9153017: jbe    0x00007f8ab9153030
  0x00007f8ab915301d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9153027: cmp    %r11,%rax
  0x00007f8ab915302a: jb     0x00007f8ab91530cd
  0x00007f8ab9153030: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915303a: cmp    %r11,%rax
  0x00007f8ab915303d: jbe    0x00007f8ab9153056
  0x00007f8ab9153043: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915304d: cmp    %r11,%rax
  0x00007f8ab9153050: jb     0x00007f8ab91530cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9153056: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915305b: sub    $0x80,%rsp
  0x00007f8ab9153062: mov    %rax,0x78(%rsp)
  0x00007f8ab9153067: mov    %rcx,0x70(%rsp)
  0x00007f8ab915306c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9153071: mov    %rbx,0x60(%rsp)
  0x00007f8ab9153076: mov    %rbp,0x50(%rsp)
  0x00007f8ab915307b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9153080: mov    %rdi,0x40(%rsp)
  0x00007f8ab9153085: mov    %r8,0x38(%rsp)
  0x00007f8ab915308a: mov    %r9,0x30(%rsp)
  0x00007f8ab915308f: mov    %r10,0x28(%rsp)
  0x00007f8ab9153094: mov    %r11,0x20(%rsp)
  0x00007f8ab9153099: mov    %r12,0x18(%rsp)
  0x00007f8ab915309e: mov    %r13,0x10(%rsp)
  0x00007f8ab91530a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91530a8: mov    %r15,(%rsp)
  0x00007f8ab91530ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91530b6: movabs $0x7f8ab9153056,%rsi
  0x00007f8ab91530c0: mov    %rsp,%rdx
  0x00007f8ab91530c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91530c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91530cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91530cd: mov    %rsp,%r11
  0x00007f8ab91530d0: sub    $0x10,%rsp
  0x00007f8ab91530d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91530d8: push   %rax
  0x00007f8ab91530d9: mov    %r11,%rax
  0x00007f8ab91530dc: mov    0x50(%rbx),%r11
  0x00007f8ab91530e0: mov    0x40(%rax),%rsi
  0x00007f8ab91530e4: mov    0x38(%rax),%rdx
  0x00007f8ab91530e8: mov    0x30(%rax),%rcx
  0x00007f8ab91530ec: mov    0x28(%rax),%r8
  0x00007f8ab91530f0: mov    0x18(%rax),%r9
  0x00007f8ab91530f4: mov    0x10(%rax),%rdi
  0x00007f8ab91530f8: mov    0x8(%rax),%r13d
  0x00007f8ab91530fc: mov    %r13,0x8(%rsp)
  0x00007f8ab9153101: mov    %rbx,0x258(%r15)
  0x00007f8ab9153108: mov    %rbx,%rax
  0x00007f8ab915310b: jmpq   *%r11
  0x00007f8ab915310e: mov    0x8(%rsi),%ebx
  0x00007f8ab9153111: shl    $0x3,%rbx
  0x00007f8ab9153115: cmp    0x10(%rax),%rbx
  0x00007f8ab9153119: mov    0x8(%rax),%rbx
  0x00007f8ab915311d: je     0x00007f8ab9153128
  0x00007f8ab9153123: jmpq   0x00007f8ab9105c40
  0x00007f8ab9153128: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153130: je     0x00007f8ab915322b
  0x00007f8ab9153136: jmpq   0x00007f8ab9105c40
  0x00007f8ab915313b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153143: je     0x00007f8ab915322b
  0x00007f8ab9153149: mov    %rsp,%r13
  0x00007f8ab915314c: mov    (%rsp),%rax
  0x00007f8ab9153150: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153154: pushfq 
  0x00007f8ab9153155: sub    $0x8,%rsp
  0x00007f8ab9153159: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915315e: sub    $0x80,%rsp
  0x00007f8ab9153165: mov    %rax,0x78(%rsp)
  0x00007f8ab915316a: mov    %rcx,0x70(%rsp)
  0x00007f8ab915316f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9153174: mov    %rbx,0x60(%rsp)
  0x00007f8ab9153179: mov    %rbp,0x50(%rsp)
  0x00007f8ab915317e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9153183: mov    %rdi,0x40(%rsp)
  0x00007f8ab9153188: mov    %r8,0x38(%rsp)
  0x00007f8ab915318d: mov    %r9,0x30(%rsp)
  0x00007f8ab9153192: mov    %r10,0x28(%rsp)
  0x00007f8ab9153197: mov    %r11,0x20(%rsp)
  0x00007f8ab915319c: mov    %r12,0x18(%rsp)
  0x00007f8ab91531a1: mov    %r13,0x10(%rsp)
  0x00007f8ab91531a6: mov    %r14,0x8(%rsp)
  0x00007f8ab91531ab: mov    %r15,(%rsp)
  0x00007f8ab91531af: sub    $0x200,%rsp
  0x00007f8ab91531b6: fxsave64 (%rsp)
  0x00007f8ab91531bb: mov    %rbx,%rdi
  0x00007f8ab91531be: mov    %rax,%rsi
  0x00007f8ab91531c1: callq  0x00007f8acef8bbca
  0x00007f8ab91531c6: fxrstor64 (%rsp)
  0x00007f8ab91531cb: add    $0x200,%rsp
  0x00007f8ab91531d2: mov    (%rsp),%r15
  0x00007f8ab91531d6: mov    0x8(%rsp),%r14
  0x00007f8ab91531db: mov    0x10(%rsp),%r13
  0x00007f8ab91531e0: mov    0x18(%rsp),%r12
  0x00007f8ab91531e5: mov    0x20(%rsp),%r11
  0x00007f8ab91531ea: mov    0x28(%rsp),%r10
  0x00007f8ab91531ef: mov    0x30(%rsp),%r9
  0x00007f8ab91531f4: mov    0x38(%rsp),%r8
  0x00007f8ab91531f9: mov    0x40(%rsp),%rdi
  0x00007f8ab91531fe: mov    0x48(%rsp),%rsi
  0x00007f8ab9153203: mov    0x50(%rsp),%rbp
  0x00007f8ab9153208: mov    0x60(%rsp),%rbx
  0x00007f8ab915320d: mov    0x68(%rsp),%rdx
  0x00007f8ab9153212: mov    0x70(%rsp),%rcx
  0x00007f8ab9153217: mov    0x78(%rsp),%rax
  0x00007f8ab915321c: add    $0x80,%rsp
  0x00007f8ab9153223: add    $0x8,%rsp
  0x00007f8ab9153227: popfq  
  0x00007f8ab9153228: mov    %r13,%rsp
  0x00007f8ab915322b: pop    %rax
  0x00007f8ab915322c: mov    %rsp,%r13
  0x00007f8ab915322f: sub    $0x50,%rsp
  0x00007f8ab9153233: mov    %rax,(%rsp)
  0x00007f8ab9153237: mov    %rsi,0x40(%rsp)
  0x00007f8ab915323c: mov    %rdx,0x38(%rsp)
  0x00007f8ab9153241: mov    %rcx,0x30(%rsp)
  0x00007f8ab9153246: mov    %r8,0x28(%rsp)
  0x00007f8ab915324b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9153255: mov    %rax,0x20(%rsp)
  0x00007f8ab915325a: mov    %r9,0x18(%rsp)
  0x00007f8ab915325f: mov    %rdi,0x10(%rsp)
  0x00007f8ab9153264: mov    0x50(%rsp),%eax
  0x00007f8ab9153268: mov    %rax,0x8(%rsp)
  0x00007f8ab915326d: mov    0x40(%rbx),%rcx
  0x00007f8ab9153271: jmpq   *%rcx

AHE@0x00007f8ac80ec0e8: 0xbbe00000 i2c: 0x00007f8ab9153320 c2i: 0x00007f8ab915345e c2iUV: 0x00007f8ab9153431
i2c argument handler #22 for: receiver (J)V (601 bytes generated)
c2i argument handler starts at 0x7f8ab915345e
  0x00007f8ab9153320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9153324: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915332e: cmp    %r11,%rax
  0x00007f8ab9153331: jbe    0x00007f8ab915334a
  0x00007f8ab9153337: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9153341: cmp    %r11,%rax
  0x00007f8ab9153344: jb     0x00007f8ab915340d
  0x00007f8ab915334a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9153354: cmp    %r11,%rax
  0x00007f8ab9153357: jbe    0x00007f8ab9153370
  0x00007f8ab915335d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9153367: cmp    %r11,%rax
  0x00007f8ab915336a: jb     0x00007f8ab915340d
  0x00007f8ab9153370: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915337a: cmp    %r11,%rax
  0x00007f8ab915337d: jbe    0x00007f8ab9153396
  0x00007f8ab9153383: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915338d: cmp    %r11,%rax
  0x00007f8ab9153390: jb     0x00007f8ab915340d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9153396: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915339b: sub    $0x80,%rsp
  0x00007f8ab91533a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91533a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91533ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91533b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91533b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91533bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91533c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91533c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91533ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91533cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91533d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91533d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91533de: mov    %r13,0x10(%rsp)
  0x00007f8ab91533e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91533e8: mov    %r15,(%rsp)
  0x00007f8ab91533ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91533f6: movabs $0x7f8ab9153396,%rsi
  0x00007f8ab9153400: mov    %rsp,%rdx
  0x00007f8ab9153403: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153407: callq  0x00007f8aceddb9fa
  0x00007f8ab915340c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915340d: mov    %rsp,%r11
  0x00007f8ab9153410: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153414: push   %rax
  0x00007f8ab9153415: mov    %r11,%rax
  0x00007f8ab9153418: mov    0x50(%rbx),%r11
  0x00007f8ab915341c: mov    0x18(%rax),%rsi
  0x00007f8ab9153420: mov    0x8(%rax),%rdx
  0x00007f8ab9153424: mov    %rbx,0x258(%r15)
  0x00007f8ab915342b: mov    %rbx,%rax
  0x00007f8ab915342e: jmpq   *%r11
  0x00007f8ab9153431: mov    0x8(%rsi),%ebx
  0x00007f8ab9153434: shl    $0x3,%rbx
  0x00007f8ab9153438: cmp    0x10(%rax),%rbx
  0x00007f8ab915343c: mov    0x8(%rax),%rbx
  0x00007f8ab9153440: je     0x00007f8ab915344b
  0x00007f8ab9153446: jmpq   0x00007f8ab9105c40
  0x00007f8ab915344b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153453: je     0x00007f8ab915354e
  0x00007f8ab9153459: jmpq   0x00007f8ab9105c40
  0x00007f8ab915345e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153466: je     0x00007f8ab915354e
  0x00007f8ab915346c: mov    %rsp,%r13
  0x00007f8ab915346f: mov    (%rsp),%rax
  0x00007f8ab9153473: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153477: pushfq 
  0x00007f8ab9153478: sub    $0x8,%rsp
  0x00007f8ab915347c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9153481: sub    $0x80,%rsp
  0x00007f8ab9153488: mov    %rax,0x78(%rsp)
  0x00007f8ab915348d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9153492: mov    %rdx,0x68(%rsp)
  0x00007f8ab9153497: mov    %rbx,0x60(%rsp)
  0x00007f8ab915349c: mov    %rbp,0x50(%rsp)
  0x00007f8ab91534a1: mov    %rsi,0x48(%rsp)
  0x00007f8ab91534a6: mov    %rdi,0x40(%rsp)
  0x00007f8ab91534ab: mov    %r8,0x38(%rsp)
  0x00007f8ab91534b0: mov    %r9,0x30(%rsp)
  0x00007f8ab91534b5: mov    %r10,0x28(%rsp)
  0x00007f8ab91534ba: mov    %r11,0x20(%rsp)
  0x00007f8ab91534bf: mov    %r12,0x18(%rsp)
  0x00007f8ab91534c4: mov    %r13,0x10(%rsp)
  0x00007f8ab91534c9: mov    %r14,0x8(%rsp)
  0x00007f8ab91534ce: mov    %r15,(%rsp)
  0x00007f8ab91534d2: sub    $0x200,%rsp
  0x00007f8ab91534d9: fxsave64 (%rsp)
  0x00007f8ab91534de: mov    %rbx,%rdi
  0x00007f8ab91534e1: mov    %rax,%rsi
  0x00007f8ab91534e4: callq  0x00007f8acef8bbca
  0x00007f8ab91534e9: fxrstor64 (%rsp)
  0x00007f8ab91534ee: add    $0x200,%rsp
  0x00007f8ab91534f5: mov    (%rsp),%r15
  0x00007f8ab91534f9: mov    0x8(%rsp),%r14
  0x00007f8ab91534fe: mov    0x10(%rsp),%r13
  0x00007f8ab9153503: mov    0x18(%rsp),%r12
  0x00007f8ab9153508: mov    0x20(%rsp),%r11
  0x00007f8ab915350d: mov    0x28(%rsp),%r10
  0x00007f8ab9153512: mov    0x30(%rsp),%r9
  0x00007f8ab9153517: mov    0x38(%rsp),%r8
  0x00007f8ab915351c: mov    0x40(%rsp),%rdi
  0x00007f8ab9153521: mov    0x48(%rsp),%rsi
  0x00007f8ab9153526: mov    0x50(%rsp),%rbp
  0x00007f8ab915352b: mov    0x60(%rsp),%rbx
  0x00007f8ab9153530: mov    0x68(%rsp),%rdx
  0x00007f8ab9153535: mov    0x70(%rsp),%rcx
  0x00007f8ab915353a: mov    0x78(%rsp),%rax
  0x00007f8ab915353f: add    $0x80,%rsp
  0x00007f8ab9153546: add    $0x8,%rsp
  0x00007f8ab915354a: popfq  
  0x00007f8ab915354b: mov    %r13,%rsp
  0x00007f8ab915354e: pop    %rax
  0x00007f8ab915354f: mov    %rsp,%r13
  0x00007f8ab9153552: sub    $0x20,%rsp
  0x00007f8ab9153556: mov    %rax,(%rsp)
  0x00007f8ab915355a: mov    %rsi,0x18(%rsp)
  0x00007f8ab915355f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9153569: mov    %rax,0x10(%rsp)
  0x00007f8ab915356e: mov    %rdx,0x8(%rsp)
  0x00007f8ab9153573: mov    0x40(%rbx),%rcx
  0x00007f8ab9153577: jmpq   *%rcx

AHE@0x00007f8ac80ec130: 0xbbea0000 i2c: 0x00007f8ab9153620 c2i: 0x00007f8ab9153761 c2iUV: 0x00007f8ab9153734
i2c argument handler #23 for: receiver (JI)V (608 bytes generated)
c2i argument handler starts at 0x7f8ab9153761
  0x00007f8ab9153620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9153624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915362e: cmp    %r11,%rax
  0x00007f8ab9153631: jbe    0x00007f8ab915364a
  0x00007f8ab9153637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9153641: cmp    %r11,%rax
  0x00007f8ab9153644: jb     0x00007f8ab915370d
  0x00007f8ab915364a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9153654: cmp    %r11,%rax
  0x00007f8ab9153657: jbe    0x00007f8ab9153670
  0x00007f8ab915365d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9153667: cmp    %r11,%rax
  0x00007f8ab915366a: jb     0x00007f8ab915370d
  0x00007f8ab9153670: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915367a: cmp    %r11,%rax
  0x00007f8ab915367d: jbe    0x00007f8ab9153696
  0x00007f8ab9153683: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915368d: cmp    %r11,%rax
  0x00007f8ab9153690: jb     0x00007f8ab915370d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9153696: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915369b: sub    $0x80,%rsp
  0x00007f8ab91536a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91536a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91536ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91536b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91536b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91536bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91536c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91536c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91536ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91536cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91536d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91536d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91536de: mov    %r13,0x10(%rsp)
  0x00007f8ab91536e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91536e8: mov    %r15,(%rsp)
  0x00007f8ab91536ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91536f6: movabs $0x7f8ab9153696,%rsi
  0x00007f8ab9153700: mov    %rsp,%rdx
  0x00007f8ab9153703: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153707: callq  0x00007f8aceddb9fa
  0x00007f8ab915370c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915370d: mov    %rsp,%r11
  0x00007f8ab9153710: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153714: push   %rax
  0x00007f8ab9153715: mov    %r11,%rax
  0x00007f8ab9153718: mov    0x50(%rbx),%r11
  0x00007f8ab915371c: mov    0x20(%rax),%rsi
  0x00007f8ab9153720: mov    0x10(%rax),%rdx
  0x00007f8ab9153724: mov    0x8(%rax),%ecx
  0x00007f8ab9153727: mov    %rbx,0x258(%r15)
  0x00007f8ab915372e: mov    %rbx,%rax
  0x00007f8ab9153731: jmpq   *%r11
  0x00007f8ab9153734: mov    0x8(%rsi),%ebx
  0x00007f8ab9153737: shl    $0x3,%rbx
  0x00007f8ab915373b: cmp    0x10(%rax),%rbx
  0x00007f8ab915373f: mov    0x8(%rax),%rbx
  0x00007f8ab9153743: je     0x00007f8ab915374e
  0x00007f8ab9153749: jmpq   0x00007f8ab9105c40
  0x00007f8ab915374e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153756: je     0x00007f8ab9153851
  0x00007f8ab915375c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9153761: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153769: je     0x00007f8ab9153851
  0x00007f8ab915376f: mov    %rsp,%r13
  0x00007f8ab9153772: mov    (%rsp),%rax
  0x00007f8ab9153776: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915377a: pushfq 
  0x00007f8ab915377b: sub    $0x8,%rsp
  0x00007f8ab915377f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9153784: sub    $0x80,%rsp
  0x00007f8ab915378b: mov    %rax,0x78(%rsp)
  0x00007f8ab9153790: mov    %rcx,0x70(%rsp)
  0x00007f8ab9153795: mov    %rdx,0x68(%rsp)
  0x00007f8ab915379a: mov    %rbx,0x60(%rsp)
  0x00007f8ab915379f: mov    %rbp,0x50(%rsp)
  0x00007f8ab91537a4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91537a9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91537ae: mov    %r8,0x38(%rsp)
  0x00007f8ab91537b3: mov    %r9,0x30(%rsp)
  0x00007f8ab91537b8: mov    %r10,0x28(%rsp)
  0x00007f8ab91537bd: mov    %r11,0x20(%rsp)
  0x00007f8ab91537c2: mov    %r12,0x18(%rsp)
  0x00007f8ab91537c7: mov    %r13,0x10(%rsp)
  0x00007f8ab91537cc: mov    %r14,0x8(%rsp)
  0x00007f8ab91537d1: mov    %r15,(%rsp)
  0x00007f8ab91537d5: sub    $0x200,%rsp
  0x00007f8ab91537dc: fxsave64 (%rsp)
  0x00007f8ab91537e1: mov    %rbx,%rdi
  0x00007f8ab91537e4: mov    %rax,%rsi
  0x00007f8ab91537e7: callq  0x00007f8acef8bbca
  0x00007f8ab91537ec: fxrstor64 (%rsp)
  0x00007f8ab91537f1: add    $0x200,%rsp
  0x00007f8ab91537f8: mov    (%rsp),%r15
  0x00007f8ab91537fc: mov    0x8(%rsp),%r14
  0x00007f8ab9153801: mov    0x10(%rsp),%r13
  0x00007f8ab9153806: mov    0x18(%rsp),%r12
  0x00007f8ab915380b: mov    0x20(%rsp),%r11
  0x00007f8ab9153810: mov    0x28(%rsp),%r10
  0x00007f8ab9153815: mov    0x30(%rsp),%r9
  0x00007f8ab915381a: mov    0x38(%rsp),%r8
  0x00007f8ab915381f: mov    0x40(%rsp),%rdi
  0x00007f8ab9153824: mov    0x48(%rsp),%rsi
  0x00007f8ab9153829: mov    0x50(%rsp),%rbp
  0x00007f8ab915382e: mov    0x60(%rsp),%rbx
  0x00007f8ab9153833: mov    0x68(%rsp),%rdx
  0x00007f8ab9153838: mov    0x70(%rsp),%rcx
  0x00007f8ab915383d: mov    0x78(%rsp),%rax
  0x00007f8ab9153842: add    $0x80,%rsp
  0x00007f8ab9153849: add    $0x8,%rsp
  0x00007f8ab915384d: popfq  
  0x00007f8ab915384e: mov    %r13,%rsp
  0x00007f8ab9153851: pop    %rax
  0x00007f8ab9153852: mov    %rsp,%r13
  0x00007f8ab9153855: sub    $0x30,%rsp
  0x00007f8ab9153859: mov    %rax,(%rsp)
  0x00007f8ab915385d: mov    %rsi,0x20(%rsp)
  0x00007f8ab9153862: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915386c: mov    %rax,0x18(%rsp)
  0x00007f8ab9153871: mov    %rdx,0x10(%rsp)
  0x00007f8ab9153876: mov    %ecx,0x8(%rsp)
  0x00007f8ab915387a: mov    0x40(%rbx),%rcx
  0x00007f8ab915387e: jmpq   *%rcx

AHE@0x00007f8ac80ec178: 0xbbbbb000 i2c: 0x00007f8ab9153920 c2i: 0x00007f8ab9153a6a c2iUV: 0x00007f8ab9153a3d
i2c argument handler #24 for: static (Ljava/security/DomainCombiner;Ljava/lang/Class;Ljava/security/AccessControlContext;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/security/AccessControlContext; (613 bytes generated)
c2i argument handler starts at 0x7f8ab9153a6a
  0x00007f8ab9153920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9153924: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915392e: cmp    %r11,%rax
  0x00007f8ab9153931: jbe    0x00007f8ab915394a
  0x00007f8ab9153937: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9153941: cmp    %r11,%rax
  0x00007f8ab9153944: jb     0x00007f8ab9153a0d
  0x00007f8ab915394a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9153954: cmp    %r11,%rax
  0x00007f8ab9153957: jbe    0x00007f8ab9153970
  0x00007f8ab915395d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9153967: cmp    %r11,%rax
  0x00007f8ab915396a: jb     0x00007f8ab9153a0d
  0x00007f8ab9153970: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915397a: cmp    %r11,%rax
  0x00007f8ab915397d: jbe    0x00007f8ab9153996
  0x00007f8ab9153983: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915398d: cmp    %r11,%rax
  0x00007f8ab9153990: jb     0x00007f8ab9153a0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9153996: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915399b: sub    $0x80,%rsp
  0x00007f8ab91539a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91539a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91539ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91539b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91539b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91539bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91539c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91539c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91539ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91539cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91539d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91539d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91539de: mov    %r13,0x10(%rsp)
  0x00007f8ab91539e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91539e8: mov    %r15,(%rsp)
  0x00007f8ab91539ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91539f6: movabs $0x7f8ab9153996,%rsi
  0x00007f8ab9153a00: mov    %rsp,%rdx
  0x00007f8ab9153a03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153a07: callq  0x00007f8aceddb9fa
  0x00007f8ab9153a0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9153a0d: mov    %rsp,%r11
  0x00007f8ab9153a10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153a14: push   %rax
  0x00007f8ab9153a15: mov    %r11,%rax
  0x00007f8ab9153a18: mov    0x50(%rbx),%r11
  0x00007f8ab9153a1c: mov    0x28(%rax),%rsi
  0x00007f8ab9153a20: mov    0x20(%rax),%rdx
  0x00007f8ab9153a24: mov    0x18(%rax),%rcx
  0x00007f8ab9153a28: mov    0x10(%rax),%r8
  0x00007f8ab9153a2c: mov    0x8(%rax),%r9
  0x00007f8ab9153a30: mov    %rbx,0x258(%r15)
  0x00007f8ab9153a37: mov    %rbx,%rax
  0x00007f8ab9153a3a: jmpq   *%r11
  0x00007f8ab9153a3d: mov    0x8(%rsi),%ebx
  0x00007f8ab9153a40: shl    $0x3,%rbx
  0x00007f8ab9153a44: cmp    0x10(%rax),%rbx
  0x00007f8ab9153a48: mov    0x8(%rax),%rbx
  0x00007f8ab9153a4c: je     0x00007f8ab9153a57
  0x00007f8ab9153a52: jmpq   0x00007f8ab9105c40
  0x00007f8ab9153a57: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153a5f: je     0x00007f8ab9153b5a
  0x00007f8ab9153a65: jmpq   0x00007f8ab9105c40
  0x00007f8ab9153a6a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153a72: je     0x00007f8ab9153b5a
  0x00007f8ab9153a78: mov    %rsp,%r13
  0x00007f8ab9153a7b: mov    (%rsp),%rax
  0x00007f8ab9153a7f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153a83: pushfq 
  0x00007f8ab9153a84: sub    $0x8,%rsp
  0x00007f8ab9153a88: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9153a8d: sub    $0x80,%rsp
  0x00007f8ab9153a94: mov    %rax,0x78(%rsp)
  0x00007f8ab9153a99: mov    %rcx,0x70(%rsp)
  0x00007f8ab9153a9e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9153aa3: mov    %rbx,0x60(%rsp)
  0x00007f8ab9153aa8: mov    %rbp,0x50(%rsp)
  0x00007f8ab9153aad: mov    %rsi,0x48(%rsp)
  0x00007f8ab9153ab2: mov    %rdi,0x40(%rsp)
  0x00007f8ab9153ab7: mov    %r8,0x38(%rsp)
  0x00007f8ab9153abc: mov    %r9,0x30(%rsp)
  0x00007f8ab9153ac1: mov    %r10,0x28(%rsp)
  0x00007f8ab9153ac6: mov    %r11,0x20(%rsp)
  0x00007f8ab9153acb: mov    %r12,0x18(%rsp)
  0x00007f8ab9153ad0: mov    %r13,0x10(%rsp)
  0x00007f8ab9153ad5: mov    %r14,0x8(%rsp)
  0x00007f8ab9153ada: mov    %r15,(%rsp)
  0x00007f8ab9153ade: sub    $0x200,%rsp
  0x00007f8ab9153ae5: fxsave64 (%rsp)
  0x00007f8ab9153aea: mov    %rbx,%rdi
  0x00007f8ab9153aed: mov    %rax,%rsi
  0x00007f8ab9153af0: callq  0x00007f8acef8bbca
  0x00007f8ab9153af5: fxrstor64 (%rsp)
  0x00007f8ab9153afa: add    $0x200,%rsp
  0x00007f8ab9153b01: mov    (%rsp),%r15
  0x00007f8ab9153b05: mov    0x8(%rsp),%r14
  0x00007f8ab9153b0a: mov    0x10(%rsp),%r13
  0x00007f8ab9153b0f: mov    0x18(%rsp),%r12
  0x00007f8ab9153b14: mov    0x20(%rsp),%r11
  0x00007f8ab9153b19: mov    0x28(%rsp),%r10
  0x00007f8ab9153b1e: mov    0x30(%rsp),%r9
  0x00007f8ab9153b23: mov    0x38(%rsp),%r8
  0x00007f8ab9153b28: mov    0x40(%rsp),%rdi
  0x00007f8ab9153b2d: mov    0x48(%rsp),%rsi
  0x00007f8ab9153b32: mov    0x50(%rsp),%rbp
  0x00007f8ab9153b37: mov    0x60(%rsp),%rbx
  0x00007f8ab9153b3c: mov    0x68(%rsp),%rdx
  0x00007f8ab9153b41: mov    0x70(%rsp),%rcx
  0x00007f8ab9153b46: mov    0x78(%rsp),%rax
  0x00007f8ab9153b4b: add    $0x80,%rsp
  0x00007f8ab9153b52: add    $0x8,%rsp
  0x00007f8ab9153b56: popfq  
  0x00007f8ab9153b57: mov    %r13,%rsp
  0x00007f8ab9153b5a: pop    %rax
  0x00007f8ab9153b5b: mov    %rsp,%r13
  0x00007f8ab9153b5e: sub    $0x30,%rsp
  0x00007f8ab9153b62: mov    %rax,(%rsp)
  0x00007f8ab9153b66: mov    %rsi,0x28(%rsp)
  0x00007f8ab9153b6b: mov    %rdx,0x20(%rsp)
  0x00007f8ab9153b70: mov    %rcx,0x18(%rsp)
  0x00007f8ab9153b75: mov    %r8,0x10(%rsp)
  0x00007f8ab9153b7a: mov    %r9,0x8(%rsp)
  0x00007f8ab9153b7f: mov    0x40(%rbx),%rcx
  0x00007f8ab9153b83: jmpq   *%rcx

AHE@0x00007f8ac80ec1c0: 0xbbba0000 i2c: 0x00007f8ab9153c60 c2i: 0x00007f8ab9153da6 c2iUV: 0x00007f8ab9153d79
i2c argument handler #25 for: receiver (Ljava/security/AccessControlContext;Ljava/security/DomainCombiner;Z)V (604 bytes generated)
c2i argument handler starts at 0x7f8ab9153da6
  0x00007f8ab9153c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9153c64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9153c6e: cmp    %r11,%rax
  0x00007f8ab9153c71: jbe    0x00007f8ab9153c8a
  0x00007f8ab9153c77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9153c81: cmp    %r11,%rax
  0x00007f8ab9153c84: jb     0x00007f8ab9153d4d
  0x00007f8ab9153c8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9153c94: cmp    %r11,%rax
  0x00007f8ab9153c97: jbe    0x00007f8ab9153cb0
  0x00007f8ab9153c9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9153ca7: cmp    %r11,%rax
  0x00007f8ab9153caa: jb     0x00007f8ab9153d4d
  0x00007f8ab9153cb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9153cba: cmp    %r11,%rax
  0x00007f8ab9153cbd: jbe    0x00007f8ab9153cd6
  0x00007f8ab9153cc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9153ccd: cmp    %r11,%rax
  0x00007f8ab9153cd0: jb     0x00007f8ab9153d4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9153cd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9153cdb: sub    $0x80,%rsp
  0x00007f8ab9153ce2: mov    %rax,0x78(%rsp)
  0x00007f8ab9153ce7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9153cec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9153cf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9153cf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9153cfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9153d00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9153d05: mov    %r8,0x38(%rsp)
  0x00007f8ab9153d0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9153d0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9153d14: mov    %r11,0x20(%rsp)
  0x00007f8ab9153d19: mov    %r12,0x18(%rsp)
  0x00007f8ab9153d1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9153d23: mov    %r14,0x8(%rsp)
  0x00007f8ab9153d28: mov    %r15,(%rsp)
  0x00007f8ab9153d2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9153d36: movabs $0x7f8ab9153cd6,%rsi
  0x00007f8ab9153d40: mov    %rsp,%rdx
  0x00007f8ab9153d43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153d47: callq  0x00007f8aceddb9fa
  0x00007f8ab9153d4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9153d4d: mov    %rsp,%r11
  0x00007f8ab9153d50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153d54: push   %rax
  0x00007f8ab9153d55: mov    %r11,%rax
  0x00007f8ab9153d58: mov    0x50(%rbx),%r11
  0x00007f8ab9153d5c: mov    0x20(%rax),%rsi
  0x00007f8ab9153d60: mov    0x18(%rax),%rdx
  0x00007f8ab9153d64: mov    0x10(%rax),%rcx
  0x00007f8ab9153d68: mov    0x8(%rax),%r8d
  0x00007f8ab9153d6c: mov    %rbx,0x258(%r15)
  0x00007f8ab9153d73: mov    %rbx,%rax
  0x00007f8ab9153d76: jmpq   *%r11
  0x00007f8ab9153d79: mov    0x8(%rsi),%ebx
  0x00007f8ab9153d7c: shl    $0x3,%rbx
  0x00007f8ab9153d80: cmp    0x10(%rax),%rbx
  0x00007f8ab9153d84: mov    0x8(%rax),%rbx
  0x00007f8ab9153d88: je     0x00007f8ab9153d93
  0x00007f8ab9153d8e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9153d93: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153d9b: je     0x00007f8ab9153e96
  0x00007f8ab9153da1: jmpq   0x00007f8ab9105c40
  0x00007f8ab9153da6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9153dae: je     0x00007f8ab9153e96
  0x00007f8ab9153db4: mov    %rsp,%r13
  0x00007f8ab9153db7: mov    (%rsp),%rax
  0x00007f8ab9153dbb: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9153dbf: pushfq 
  0x00007f8ab9153dc0: sub    $0x8,%rsp
  0x00007f8ab9153dc4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9153dc9: sub    $0x80,%rsp
  0x00007f8ab9153dd0: mov    %rax,0x78(%rsp)
  0x00007f8ab9153dd5: mov    %rcx,0x70(%rsp)
  0x00007f8ab9153dda: mov    %rdx,0x68(%rsp)
  0x00007f8ab9153ddf: mov    %rbx,0x60(%rsp)
  0x00007f8ab9153de4: mov    %rbp,0x50(%rsp)
  0x00007f8ab9153de9: mov    %rsi,0x48(%rsp)
  0x00007f8ab9153dee: mov    %rdi,0x40(%rsp)
  0x00007f8ab9153df3: mov    %r8,0x38(%rsp)
  0x00007f8ab9153df8: mov    %r9,0x30(%rsp)
  0x00007f8ab9153dfd: mov    %r10,0x28(%rsp)
  0x00007f8ab9153e02: mov    %r11,0x20(%rsp)
  0x00007f8ab9153e07: mov    %r12,0x18(%rsp)
  0x00007f8ab9153e0c: mov    %r13,0x10(%rsp)
  0x00007f8ab9153e11: mov    %r14,0x8(%rsp)
  0x00007f8ab9153e16: mov    %r15,(%rsp)
  0x00007f8ab9153e1a: sub    $0x200,%rsp
  0x00007f8ab9153e21: fxsave64 (%rsp)
  0x00007f8ab9153e26: mov    %rbx,%rdi
  0x00007f8ab9153e29: mov    %rax,%rsi
  0x00007f8ab9153e2c: callq  0x00007f8acef8bbca
  0x00007f8ab9153e31: fxrstor64 (%rsp)
  0x00007f8ab9153e36: add    $0x200,%rsp
  0x00007f8ab9153e3d: mov    (%rsp),%r15
  0x00007f8ab9153e41: mov    0x8(%rsp),%r14
  0x00007f8ab9153e46: mov    0x10(%rsp),%r13
  0x00007f8ab9153e4b: mov    0x18(%rsp),%r12
  0x00007f8ab9153e50: mov    0x20(%rsp),%r11
  0x00007f8ab9153e55: mov    0x28(%rsp),%r10
  0x00007f8ab9153e5a: mov    0x30(%rsp),%r9
  0x00007f8ab9153e5f: mov    0x38(%rsp),%r8
  0x00007f8ab9153e64: mov    0x40(%rsp),%rdi
  0x00007f8ab9153e69: mov    0x48(%rsp),%rsi
  0x00007f8ab9153e6e: mov    0x50(%rsp),%rbp
  0x00007f8ab9153e73: mov    0x60(%rsp),%rbx
  0x00007f8ab9153e78: mov    0x68(%rsp),%rdx
  0x00007f8ab9153e7d: mov    0x70(%rsp),%rcx
  0x00007f8ab9153e82: mov    0x78(%rsp),%rax
  0x00007f8ab9153e87: add    $0x80,%rsp
  0x00007f8ab9153e8e: add    $0x8,%rsp
  0x00007f8ab9153e92: popfq  
  0x00007f8ab9153e93: mov    %r13,%rsp
  0x00007f8ab9153e96: pop    %rax
  0x00007f8ab9153e97: mov    %rsp,%r13
  0x00007f8ab9153e9a: sub    $0x30,%rsp
  0x00007f8ab9153e9e: mov    %rax,(%rsp)
  0x00007f8ab9153ea2: mov    %rsi,0x20(%rsp)
  0x00007f8ab9153ea7: mov    %rdx,0x18(%rsp)
  0x00007f8ab9153eac: mov    %rcx,0x10(%rsp)
  0x00007f8ab9153eb1: mov    %r8d,0x8(%rsp)
  0x00007f8ab9153eb6: mov    0x40(%rbx),%rcx
  0x00007f8ab9153eba: jmpq   *%rcx

AHE@0x00007f8ac80ec208: 0xbbbbbb00 i2c: 0x00007f8ab9153f60 c2i: 0x00007f8ab91540ae c2iUV: 0x00007f8ab9154081
i2c argument handler #26 for: receiver (Ljava/security/ProtectionDomain;Ljava/security/DomainCombiner;Ljava/security/AccessControlContext;Ljava/security/AccessControlContext;[Ljava/security/Permission;)V (622 bytes generated)
c2i argument handler starts at 0x7f8ab91540ae
  0x00007f8ab9153f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9153f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9153f6e: cmp    %r11,%rax
  0x00007f8ab9153f71: jbe    0x00007f8ab9153f8a
  0x00007f8ab9153f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9153f81: cmp    %r11,%rax
  0x00007f8ab9153f84: jb     0x00007f8ab915404d
  0x00007f8ab9153f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9153f94: cmp    %r11,%rax
  0x00007f8ab9153f97: jbe    0x00007f8ab9153fb0
  0x00007f8ab9153f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9153fa7: cmp    %r11,%rax
  0x00007f8ab9153faa: jb     0x00007f8ab915404d
  0x00007f8ab9153fb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9153fba: cmp    %r11,%rax
  0x00007f8ab9153fbd: jbe    0x00007f8ab9153fd6
  0x00007f8ab9153fc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9153fcd: cmp    %r11,%rax
  0x00007f8ab9153fd0: jb     0x00007f8ab915404d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9153fd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9153fdb: sub    $0x80,%rsp
  0x00007f8ab9153fe2: mov    %rax,0x78(%rsp)
  0x00007f8ab9153fe7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9153fec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9153ff1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9153ff6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9153ffb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154000: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154005: mov    %r8,0x38(%rsp)
  0x00007f8ab915400a: mov    %r9,0x30(%rsp)
  0x00007f8ab915400f: mov    %r10,0x28(%rsp)
  0x00007f8ab9154014: mov    %r11,0x20(%rsp)
  0x00007f8ab9154019: mov    %r12,0x18(%rsp)
  0x00007f8ab915401e: mov    %r13,0x10(%rsp)
  0x00007f8ab9154023: mov    %r14,0x8(%rsp)
  0x00007f8ab9154028: mov    %r15,(%rsp)
  0x00007f8ab915402c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9154036: movabs $0x7f8ab9153fd6,%rsi
  0x00007f8ab9154040: mov    %rsp,%rdx
  0x00007f8ab9154043: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154047: callq  0x00007f8aceddb9fa
  0x00007f8ab915404c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915404d: mov    %rsp,%r11
  0x00007f8ab9154050: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154054: push   %rax
  0x00007f8ab9154055: mov    %r11,%rax
  0x00007f8ab9154058: mov    0x50(%rbx),%r11
  0x00007f8ab915405c: mov    0x30(%rax),%rsi
  0x00007f8ab9154060: mov    0x28(%rax),%rdx
  0x00007f8ab9154064: mov    0x20(%rax),%rcx
  0x00007f8ab9154068: mov    0x18(%rax),%r8
  0x00007f8ab915406c: mov    0x10(%rax),%r9
  0x00007f8ab9154070: mov    0x8(%rax),%rdi
  0x00007f8ab9154074: mov    %rbx,0x258(%r15)
  0x00007f8ab915407b: mov    %rbx,%rax
  0x00007f8ab915407e: jmpq   *%r11
  0x00007f8ab9154081: mov    0x8(%rsi),%ebx
  0x00007f8ab9154084: shl    $0x3,%rbx
  0x00007f8ab9154088: cmp    0x10(%rax),%rbx
  0x00007f8ab915408c: mov    0x8(%rax),%rbx
  0x00007f8ab9154090: je     0x00007f8ab915409b
  0x00007f8ab9154096: jmpq   0x00007f8ab9105c40
  0x00007f8ab915409b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91540a3: je     0x00007f8ab915419e
  0x00007f8ab91540a9: jmpq   0x00007f8ab9105c40
  0x00007f8ab91540ae: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91540b6: je     0x00007f8ab915419e
  0x00007f8ab91540bc: mov    %rsp,%r13
  0x00007f8ab91540bf: mov    (%rsp),%rax
  0x00007f8ab91540c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91540c7: pushfq 
  0x00007f8ab91540c8: sub    $0x8,%rsp
  0x00007f8ab91540cc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91540d1: sub    $0x80,%rsp
  0x00007f8ab91540d8: mov    %rax,0x78(%rsp)
  0x00007f8ab91540dd: mov    %rcx,0x70(%rsp)
  0x00007f8ab91540e2: mov    %rdx,0x68(%rsp)
  0x00007f8ab91540e7: mov    %rbx,0x60(%rsp)
  0x00007f8ab91540ec: mov    %rbp,0x50(%rsp)
  0x00007f8ab91540f1: mov    %rsi,0x48(%rsp)
  0x00007f8ab91540f6: mov    %rdi,0x40(%rsp)
  0x00007f8ab91540fb: mov    %r8,0x38(%rsp)
  0x00007f8ab9154100: mov    %r9,0x30(%rsp)
  0x00007f8ab9154105: mov    %r10,0x28(%rsp)
  0x00007f8ab915410a: mov    %r11,0x20(%rsp)
  0x00007f8ab915410f: mov    %r12,0x18(%rsp)
  0x00007f8ab9154114: mov    %r13,0x10(%rsp)
  0x00007f8ab9154119: mov    %r14,0x8(%rsp)
  0x00007f8ab915411e: mov    %r15,(%rsp)
  0x00007f8ab9154122: sub    $0x200,%rsp
  0x00007f8ab9154129: fxsave64 (%rsp)
  0x00007f8ab915412e: mov    %rbx,%rdi
  0x00007f8ab9154131: mov    %rax,%rsi
  0x00007f8ab9154134: callq  0x00007f8acef8bbca
  0x00007f8ab9154139: fxrstor64 (%rsp)
  0x00007f8ab915413e: add    $0x200,%rsp
  0x00007f8ab9154145: mov    (%rsp),%r15
  0x00007f8ab9154149: mov    0x8(%rsp),%r14
  0x00007f8ab915414e: mov    0x10(%rsp),%r13
  0x00007f8ab9154153: mov    0x18(%rsp),%r12
  0x00007f8ab9154158: mov    0x20(%rsp),%r11
  0x00007f8ab915415d: mov    0x28(%rsp),%r10
  0x00007f8ab9154162: mov    0x30(%rsp),%r9
  0x00007f8ab9154167: mov    0x38(%rsp),%r8
  0x00007f8ab915416c: mov    0x40(%rsp),%rdi
  0x00007f8ab9154171: mov    0x48(%rsp),%rsi
  0x00007f8ab9154176: mov    0x50(%rsp),%rbp
  0x00007f8ab915417b: mov    0x60(%rsp),%rbx
  0x00007f8ab9154180: mov    0x68(%rsp),%rdx
  0x00007f8ab9154185: mov    0x70(%rsp),%rcx
  0x00007f8ab915418a: mov    0x78(%rsp),%rax
  0x00007f8ab915418f: add    $0x80,%rsp
  0x00007f8ab9154196: add    $0x8,%rsp
  0x00007f8ab915419a: popfq  
  0x00007f8ab915419b: mov    %r13,%rsp
  0x00007f8ab915419e: pop    %rax
  0x00007f8ab915419f: mov    %rsp,%r13
  0x00007f8ab91541a2: sub    $0x40,%rsp
  0x00007f8ab91541a6: mov    %rax,(%rsp)
  0x00007f8ab91541aa: mov    %rsi,0x30(%rsp)
  0x00007f8ab91541af: mov    %rdx,0x28(%rsp)
  0x00007f8ab91541b4: mov    %rcx,0x20(%rsp)
  0x00007f8ab91541b9: mov    %r8,0x18(%rsp)
  0x00007f8ab91541be: mov    %r9,0x10(%rsp)
  0x00007f8ab91541c3: mov    %rdi,0x8(%rsp)
  0x00007f8ab91541c8: mov    0x40(%rbx),%rcx
  0x00007f8ab91541cc: jmpq   *%rcx

AHE@0x00007f8ac80ec250: 0xbbbab000 i2c: 0x00007f8ab91542a0 c2i: 0x00007f8ab91543ea c2iUV: 0x00007f8ab91543bd
i2c argument handler #27 for: receiver (Ljava/lang/String;[Ljava/lang/Class;ZLjava/lang/Class$MethodArray;)Ljava/lang/reflect/Method; (613 bytes generated)
c2i argument handler starts at 0x7f8ab91543ea
  0x00007f8ab91542a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91542a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91542ae: cmp    %r11,%rax
  0x00007f8ab91542b1: jbe    0x00007f8ab91542ca
  0x00007f8ab91542b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91542c1: cmp    %r11,%rax
  0x00007f8ab91542c4: jb     0x00007f8ab915438d
  0x00007f8ab91542ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91542d4: cmp    %r11,%rax
  0x00007f8ab91542d7: jbe    0x00007f8ab91542f0
  0x00007f8ab91542dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91542e7: cmp    %r11,%rax
  0x00007f8ab91542ea: jb     0x00007f8ab915438d
  0x00007f8ab91542f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91542fa: cmp    %r11,%rax
  0x00007f8ab91542fd: jbe    0x00007f8ab9154316
  0x00007f8ab9154303: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915430d: cmp    %r11,%rax
  0x00007f8ab9154310: jb     0x00007f8ab915438d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9154316: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915431b: sub    $0x80,%rsp
  0x00007f8ab9154322: mov    %rax,0x78(%rsp)
  0x00007f8ab9154327: mov    %rcx,0x70(%rsp)
  0x00007f8ab915432c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154331: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154336: mov    %rbp,0x50(%rsp)
  0x00007f8ab915433b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154340: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154345: mov    %r8,0x38(%rsp)
  0x00007f8ab915434a: mov    %r9,0x30(%rsp)
  0x00007f8ab915434f: mov    %r10,0x28(%rsp)
  0x00007f8ab9154354: mov    %r11,0x20(%rsp)
  0x00007f8ab9154359: mov    %r12,0x18(%rsp)
  0x00007f8ab915435e: mov    %r13,0x10(%rsp)
  0x00007f8ab9154363: mov    %r14,0x8(%rsp)
  0x00007f8ab9154368: mov    %r15,(%rsp)
  0x00007f8ab915436c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9154376: movabs $0x7f8ab9154316,%rsi
  0x00007f8ab9154380: mov    %rsp,%rdx
  0x00007f8ab9154383: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154387: callq  0x00007f8aceddb9fa
  0x00007f8ab915438c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915438d: mov    %rsp,%r11
  0x00007f8ab9154390: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154394: push   %rax
  0x00007f8ab9154395: mov    %r11,%rax
  0x00007f8ab9154398: mov    0x50(%rbx),%r11
  0x00007f8ab915439c: mov    0x28(%rax),%rsi
  0x00007f8ab91543a0: mov    0x20(%rax),%rdx
  0x00007f8ab91543a4: mov    0x18(%rax),%rcx
  0x00007f8ab91543a8: mov    0x10(%rax),%r8d
  0x00007f8ab91543ac: mov    0x8(%rax),%r9
  0x00007f8ab91543b0: mov    %rbx,0x258(%r15)
  0x00007f8ab91543b7: mov    %rbx,%rax
  0x00007f8ab91543ba: jmpq   *%r11
  0x00007f8ab91543bd: mov    0x8(%rsi),%ebx
  0x00007f8ab91543c0: shl    $0x3,%rbx
  0x00007f8ab91543c4: cmp    0x10(%rax),%rbx
  0x00007f8ab91543c8: mov    0x8(%rax),%rbx
  0x00007f8ab91543cc: je     0x00007f8ab91543d7
  0x00007f8ab91543d2: jmpq   0x00007f8ab9105c40
  0x00007f8ab91543d7: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91543df: je     0x00007f8ab91544da
  0x00007f8ab91543e5: jmpq   0x00007f8ab9105c40
  0x00007f8ab91543ea: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91543f2: je     0x00007f8ab91544da
  0x00007f8ab91543f8: mov    %rsp,%r13
  0x00007f8ab91543fb: mov    (%rsp),%rax
  0x00007f8ab91543ff: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154403: pushfq 
  0x00007f8ab9154404: sub    $0x8,%rsp
  0x00007f8ab9154408: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915440d: sub    $0x80,%rsp
  0x00007f8ab9154414: mov    %rax,0x78(%rsp)
  0x00007f8ab9154419: mov    %rcx,0x70(%rsp)
  0x00007f8ab915441e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154423: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154428: mov    %rbp,0x50(%rsp)
  0x00007f8ab915442d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154432: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154437: mov    %r8,0x38(%rsp)
  0x00007f8ab915443c: mov    %r9,0x30(%rsp)
  0x00007f8ab9154441: mov    %r10,0x28(%rsp)
  0x00007f8ab9154446: mov    %r11,0x20(%rsp)
  0x00007f8ab915444b: mov    %r12,0x18(%rsp)
  0x00007f8ab9154450: mov    %r13,0x10(%rsp)
  0x00007f8ab9154455: mov    %r14,0x8(%rsp)
  0x00007f8ab915445a: mov    %r15,(%rsp)
  0x00007f8ab915445e: sub    $0x200,%rsp
  0x00007f8ab9154465: fxsave64 (%rsp)
  0x00007f8ab915446a: mov    %rbx,%rdi
  0x00007f8ab915446d: mov    %rax,%rsi
  0x00007f8ab9154470: callq  0x00007f8acef8bbca
  0x00007f8ab9154475: fxrstor64 (%rsp)
  0x00007f8ab915447a: add    $0x200,%rsp
  0x00007f8ab9154481: mov    (%rsp),%r15
  0x00007f8ab9154485: mov    0x8(%rsp),%r14
  0x00007f8ab915448a: mov    0x10(%rsp),%r13
  0x00007f8ab915448f: mov    0x18(%rsp),%r12
  0x00007f8ab9154494: mov    0x20(%rsp),%r11
  0x00007f8ab9154499: mov    0x28(%rsp),%r10
  0x00007f8ab915449e: mov    0x30(%rsp),%r9
  0x00007f8ab91544a3: mov    0x38(%rsp),%r8
  0x00007f8ab91544a8: mov    0x40(%rsp),%rdi
  0x00007f8ab91544ad: mov    0x48(%rsp),%rsi
  0x00007f8ab91544b2: mov    0x50(%rsp),%rbp
  0x00007f8ab91544b7: mov    0x60(%rsp),%rbx
  0x00007f8ab91544bc: mov    0x68(%rsp),%rdx
  0x00007f8ab91544c1: mov    0x70(%rsp),%rcx
  0x00007f8ab91544c6: mov    0x78(%rsp),%rax
  0x00007f8ab91544cb: add    $0x80,%rsp
  0x00007f8ab91544d2: add    $0x8,%rsp
  0x00007f8ab91544d6: popfq  
  0x00007f8ab91544d7: mov    %r13,%rsp
  0x00007f8ab91544da: pop    %rax
  0x00007f8ab91544db: mov    %rsp,%r13
  0x00007f8ab91544de: sub    $0x30,%rsp
  0x00007f8ab91544e2: mov    %rax,(%rsp)
  0x00007f8ab91544e6: mov    %rsi,0x28(%rsp)
  0x00007f8ab91544eb: mov    %rdx,0x20(%rsp)
  0x00007f8ab91544f0: mov    %rcx,0x18(%rsp)
  0x00007f8ab91544f5: mov    %r8d,0x10(%rsp)
  0x00007f8ab91544fa: mov    %r9,0x8(%rsp)
  0x00007f8ab91544ff: mov    0x40(%rbx),%rcx
  0x00007f8ab9154503: jmpq   *%rcx

AHE@0x00007f8ac80ec298: 0xbaba0000 i2c: 0x00007f8ab91545e0 c2i: 0x00007f8ab9154725 c2iUV: 0x00007f8ab91546f8
i2c argument handler #28 for: receiver (ILjava/lang/Class;Z)V (602 bytes generated)
c2i argument handler starts at 0x7f8ab9154725
  0x00007f8ab91545e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91545e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91545ee: cmp    %r11,%rax
  0x00007f8ab91545f1: jbe    0x00007f8ab915460a
  0x00007f8ab91545f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9154601: cmp    %r11,%rax
  0x00007f8ab9154604: jb     0x00007f8ab91546cd
  0x00007f8ab915460a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9154614: cmp    %r11,%rax
  0x00007f8ab9154617: jbe    0x00007f8ab9154630
  0x00007f8ab915461d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9154627: cmp    %r11,%rax
  0x00007f8ab915462a: jb     0x00007f8ab91546cd
  0x00007f8ab9154630: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915463a: cmp    %r11,%rax
  0x00007f8ab915463d: jbe    0x00007f8ab9154656
  0x00007f8ab9154643: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915464d: cmp    %r11,%rax
  0x00007f8ab9154650: jb     0x00007f8ab91546cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9154656: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915465b: sub    $0x80,%rsp
  0x00007f8ab9154662: mov    %rax,0x78(%rsp)
  0x00007f8ab9154667: mov    %rcx,0x70(%rsp)
  0x00007f8ab915466c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154671: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154676: mov    %rbp,0x50(%rsp)
  0x00007f8ab915467b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154680: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154685: mov    %r8,0x38(%rsp)
  0x00007f8ab915468a: mov    %r9,0x30(%rsp)
  0x00007f8ab915468f: mov    %r10,0x28(%rsp)
  0x00007f8ab9154694: mov    %r11,0x20(%rsp)
  0x00007f8ab9154699: mov    %r12,0x18(%rsp)
  0x00007f8ab915469e: mov    %r13,0x10(%rsp)
  0x00007f8ab91546a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91546a8: mov    %r15,(%rsp)
  0x00007f8ab91546ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91546b6: movabs $0x7f8ab9154656,%rsi
  0x00007f8ab91546c0: mov    %rsp,%rdx
  0x00007f8ab91546c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91546c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91546cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91546cd: mov    %rsp,%r11
  0x00007f8ab91546d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91546d4: push   %rax
  0x00007f8ab91546d5: mov    %r11,%rax
  0x00007f8ab91546d8: mov    0x50(%rbx),%r11
  0x00007f8ab91546dc: mov    0x20(%rax),%rsi
  0x00007f8ab91546e0: mov    0x18(%rax),%edx
  0x00007f8ab91546e3: mov    0x10(%rax),%rcx
  0x00007f8ab91546e7: mov    0x8(%rax),%r8d
  0x00007f8ab91546eb: mov    %rbx,0x258(%r15)
  0x00007f8ab91546f2: mov    %rbx,%rax
  0x00007f8ab91546f5: jmpq   *%r11
  0x00007f8ab91546f8: mov    0x8(%rsi),%ebx
  0x00007f8ab91546fb: shl    $0x3,%rbx
  0x00007f8ab91546ff: cmp    0x10(%rax),%rbx
  0x00007f8ab9154703: mov    0x8(%rax),%rbx
  0x00007f8ab9154707: je     0x00007f8ab9154712
  0x00007f8ab915470d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9154712: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915471a: je     0x00007f8ab9154815
  0x00007f8ab9154720: jmpq   0x00007f8ab9105c40
  0x00007f8ab9154725: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915472d: je     0x00007f8ab9154815
  0x00007f8ab9154733: mov    %rsp,%r13
  0x00007f8ab9154736: mov    (%rsp),%rax
  0x00007f8ab915473a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915473e: pushfq 
  0x00007f8ab915473f: sub    $0x8,%rsp
  0x00007f8ab9154743: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9154748: sub    $0x80,%rsp
  0x00007f8ab915474f: mov    %rax,0x78(%rsp)
  0x00007f8ab9154754: mov    %rcx,0x70(%rsp)
  0x00007f8ab9154759: mov    %rdx,0x68(%rsp)
  0x00007f8ab915475e: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154763: mov    %rbp,0x50(%rsp)
  0x00007f8ab9154768: mov    %rsi,0x48(%rsp)
  0x00007f8ab915476d: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154772: mov    %r8,0x38(%rsp)
  0x00007f8ab9154777: mov    %r9,0x30(%rsp)
  0x00007f8ab915477c: mov    %r10,0x28(%rsp)
  0x00007f8ab9154781: mov    %r11,0x20(%rsp)
  0x00007f8ab9154786: mov    %r12,0x18(%rsp)
  0x00007f8ab915478b: mov    %r13,0x10(%rsp)
  0x00007f8ab9154790: mov    %r14,0x8(%rsp)
  0x00007f8ab9154795: mov    %r15,(%rsp)
  0x00007f8ab9154799: sub    $0x200,%rsp
  0x00007f8ab91547a0: fxsave64 (%rsp)
  0x00007f8ab91547a5: mov    %rbx,%rdi
  0x00007f8ab91547a8: mov    %rax,%rsi
  0x00007f8ab91547ab: callq  0x00007f8acef8bbca
  0x00007f8ab91547b0: fxrstor64 (%rsp)
  0x00007f8ab91547b5: add    $0x200,%rsp
  0x00007f8ab91547bc: mov    (%rsp),%r15
  0x00007f8ab91547c0: mov    0x8(%rsp),%r14
  0x00007f8ab91547c5: mov    0x10(%rsp),%r13
  0x00007f8ab91547ca: mov    0x18(%rsp),%r12
  0x00007f8ab91547cf: mov    0x20(%rsp),%r11
  0x00007f8ab91547d4: mov    0x28(%rsp),%r10
  0x00007f8ab91547d9: mov    0x30(%rsp),%r9
  0x00007f8ab91547de: mov    0x38(%rsp),%r8
  0x00007f8ab91547e3: mov    0x40(%rsp),%rdi
  0x00007f8ab91547e8: mov    0x48(%rsp),%rsi
  0x00007f8ab91547ed: mov    0x50(%rsp),%rbp
  0x00007f8ab91547f2: mov    0x60(%rsp),%rbx
  0x00007f8ab91547f7: mov    0x68(%rsp),%rdx
  0x00007f8ab91547fc: mov    0x70(%rsp),%rcx
  0x00007f8ab9154801: mov    0x78(%rsp),%rax
  0x00007f8ab9154806: add    $0x80,%rsp
  0x00007f8ab915480d: add    $0x8,%rsp
  0x00007f8ab9154811: popfq  
  0x00007f8ab9154812: mov    %r13,%rsp
  0x00007f8ab9154815: pop    %rax
  0x00007f8ab9154816: mov    %rsp,%r13
  0x00007f8ab9154819: sub    $0x30,%rsp
  0x00007f8ab915481d: mov    %rax,(%rsp)
  0x00007f8ab9154821: mov    %rsi,0x20(%rsp)
  0x00007f8ab9154826: mov    %edx,0x18(%rsp)
  0x00007f8ab915482a: mov    %rcx,0x10(%rsp)
  0x00007f8ab915482f: mov    %r8d,0x8(%rsp)
  0x00007f8ab9154834: mov    0x40(%rbx),%rcx
  0x00007f8ab9154838: jmpq   *%rcx

AHE@0x00007f8ac80ec2e0: 0xbabb0000 i2c: 0x00007f8ab91548e0 c2i: 0x00007f8ab9154a25 c2iUV: 0x00007f8ab91549f8
i2c argument handler #29 for: static (Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class; (602 bytes generated)
c2i argument handler starts at 0x7f8ab9154a25
  0x00007f8ab91548e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91548e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91548ee: cmp    %r11,%rax
  0x00007f8ab91548f1: jbe    0x00007f8ab915490a
  0x00007f8ab91548f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9154901: cmp    %r11,%rax
  0x00007f8ab9154904: jb     0x00007f8ab91549cd
  0x00007f8ab915490a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9154914: cmp    %r11,%rax
  0x00007f8ab9154917: jbe    0x00007f8ab9154930
  0x00007f8ab915491d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9154927: cmp    %r11,%rax
  0x00007f8ab915492a: jb     0x00007f8ab91549cd
  0x00007f8ab9154930: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915493a: cmp    %r11,%rax
  0x00007f8ab915493d: jbe    0x00007f8ab9154956
  0x00007f8ab9154943: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915494d: cmp    %r11,%rax
  0x00007f8ab9154950: jb     0x00007f8ab91549cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9154956: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915495b: sub    $0x80,%rsp
  0x00007f8ab9154962: mov    %rax,0x78(%rsp)
  0x00007f8ab9154967: mov    %rcx,0x70(%rsp)
  0x00007f8ab915496c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154971: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154976: mov    %rbp,0x50(%rsp)
  0x00007f8ab915497b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154980: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154985: mov    %r8,0x38(%rsp)
  0x00007f8ab915498a: mov    %r9,0x30(%rsp)
  0x00007f8ab915498f: mov    %r10,0x28(%rsp)
  0x00007f8ab9154994: mov    %r11,0x20(%rsp)
  0x00007f8ab9154999: mov    %r12,0x18(%rsp)
  0x00007f8ab915499e: mov    %r13,0x10(%rsp)
  0x00007f8ab91549a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91549a8: mov    %r15,(%rsp)
  0x00007f8ab91549ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91549b6: movabs $0x7f8ab9154956,%rsi
  0x00007f8ab91549c0: mov    %rsp,%rdx
  0x00007f8ab91549c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91549c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91549cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91549cd: mov    %rsp,%r11
  0x00007f8ab91549d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91549d4: push   %rax
  0x00007f8ab91549d5: mov    %r11,%rax
  0x00007f8ab91549d8: mov    0x50(%rbx),%r11
  0x00007f8ab91549dc: mov    0x20(%rax),%rsi
  0x00007f8ab91549e0: mov    0x18(%rax),%edx
  0x00007f8ab91549e3: mov    0x10(%rax),%rcx
  0x00007f8ab91549e7: mov    0x8(%rax),%r8
  0x00007f8ab91549eb: mov    %rbx,0x258(%r15)
  0x00007f8ab91549f2: mov    %rbx,%rax
  0x00007f8ab91549f5: jmpq   *%r11
  0x00007f8ab91549f8: mov    0x8(%rsi),%ebx
  0x00007f8ab91549fb: shl    $0x3,%rbx
  0x00007f8ab91549ff: cmp    0x10(%rax),%rbx
  0x00007f8ab9154a03: mov    0x8(%rax),%rbx
  0x00007f8ab9154a07: je     0x00007f8ab9154a12
  0x00007f8ab9154a0d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9154a12: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9154a1a: je     0x00007f8ab9154b15
  0x00007f8ab9154a20: jmpq   0x00007f8ab9105c40
  0x00007f8ab9154a25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9154a2d: je     0x00007f8ab9154b15
  0x00007f8ab9154a33: mov    %rsp,%r13
  0x00007f8ab9154a36: mov    (%rsp),%rax
  0x00007f8ab9154a3a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154a3e: pushfq 
  0x00007f8ab9154a3f: sub    $0x8,%rsp
  0x00007f8ab9154a43: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9154a48: sub    $0x80,%rsp
  0x00007f8ab9154a4f: mov    %rax,0x78(%rsp)
  0x00007f8ab9154a54: mov    %rcx,0x70(%rsp)
  0x00007f8ab9154a59: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154a5e: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154a63: mov    %rbp,0x50(%rsp)
  0x00007f8ab9154a68: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154a6d: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154a72: mov    %r8,0x38(%rsp)
  0x00007f8ab9154a77: mov    %r9,0x30(%rsp)
  0x00007f8ab9154a7c: mov    %r10,0x28(%rsp)
  0x00007f8ab9154a81: mov    %r11,0x20(%rsp)
  0x00007f8ab9154a86: mov    %r12,0x18(%rsp)
  0x00007f8ab9154a8b: mov    %r13,0x10(%rsp)
  0x00007f8ab9154a90: mov    %r14,0x8(%rsp)
  0x00007f8ab9154a95: mov    %r15,(%rsp)
  0x00007f8ab9154a99: sub    $0x200,%rsp
  0x00007f8ab9154aa0: fxsave64 (%rsp)
  0x00007f8ab9154aa5: mov    %rbx,%rdi
  0x00007f8ab9154aa8: mov    %rax,%rsi
  0x00007f8ab9154aab: callq  0x00007f8acef8bbca
  0x00007f8ab9154ab0: fxrstor64 (%rsp)
  0x00007f8ab9154ab5: add    $0x200,%rsp
  0x00007f8ab9154abc: mov    (%rsp),%r15
  0x00007f8ab9154ac0: mov    0x8(%rsp),%r14
  0x00007f8ab9154ac5: mov    0x10(%rsp),%r13
  0x00007f8ab9154aca: mov    0x18(%rsp),%r12
  0x00007f8ab9154acf: mov    0x20(%rsp),%r11
  0x00007f8ab9154ad4: mov    0x28(%rsp),%r10
  0x00007f8ab9154ad9: mov    0x30(%rsp),%r9
  0x00007f8ab9154ade: mov    0x38(%rsp),%r8
  0x00007f8ab9154ae3: mov    0x40(%rsp),%rdi
  0x00007f8ab9154ae8: mov    0x48(%rsp),%rsi
  0x00007f8ab9154aed: mov    0x50(%rsp),%rbp
  0x00007f8ab9154af2: mov    0x60(%rsp),%rbx
  0x00007f8ab9154af7: mov    0x68(%rsp),%rdx
  0x00007f8ab9154afc: mov    0x70(%rsp),%rcx
  0x00007f8ab9154b01: mov    0x78(%rsp),%rax
  0x00007f8ab9154b06: add    $0x80,%rsp
  0x00007f8ab9154b0d: add    $0x8,%rsp
  0x00007f8ab9154b11: popfq  
  0x00007f8ab9154b12: mov    %r13,%rsp
  0x00007f8ab9154b15: pop    %rax
  0x00007f8ab9154b16: mov    %rsp,%r13
  0x00007f8ab9154b19: sub    $0x30,%rsp
  0x00007f8ab9154b1d: mov    %rax,(%rsp)
  0x00007f8ab9154b21: mov    %rsi,0x20(%rsp)
  0x00007f8ab9154b26: mov    %edx,0x18(%rsp)
  0x00007f8ab9154b2a: mov    %rcx,0x10(%rsp)
  0x00007f8ab9154b2f: mov    %r8,0x8(%rsp)
  0x00007f8ab9154b34: mov    0x40(%rbx),%rcx
  0x00007f8ab9154b38: jmpq   *%rcx

AHE@0x00007f8ac80ec328: 0xbab00000 i2c: 0x00007f8ab9154be0 c2i: 0x00007f8ab9154d21 c2iUV: 0x00007f8ab9154cf4
i2c argument handler #30 for: static (Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; (593 bytes generated)
c2i argument handler starts at 0x7f8ab9154d21
  0x00007f8ab9154be0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9154be4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9154bee: cmp    %r11,%rax
  0x00007f8ab9154bf1: jbe    0x00007f8ab9154c0a
  0x00007f8ab9154bf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9154c01: cmp    %r11,%rax
  0x00007f8ab9154c04: jb     0x00007f8ab9154ccd
  0x00007f8ab9154c0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9154c14: cmp    %r11,%rax
  0x00007f8ab9154c17: jbe    0x00007f8ab9154c30
  0x00007f8ab9154c1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9154c27: cmp    %r11,%rax
  0x00007f8ab9154c2a: jb     0x00007f8ab9154ccd
  0x00007f8ab9154c30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9154c3a: cmp    %r11,%rax
  0x00007f8ab9154c3d: jbe    0x00007f8ab9154c56
  0x00007f8ab9154c43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9154c4d: cmp    %r11,%rax
  0x00007f8ab9154c50: jb     0x00007f8ab9154ccd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9154c56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9154c5b: sub    $0x80,%rsp
  0x00007f8ab9154c62: mov    %rax,0x78(%rsp)
  0x00007f8ab9154c67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9154c6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154c71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154c76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9154c7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154c80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154c85: mov    %r8,0x38(%rsp)
  0x00007f8ab9154c8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9154c8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9154c94: mov    %r11,0x20(%rsp)
  0x00007f8ab9154c99: mov    %r12,0x18(%rsp)
  0x00007f8ab9154c9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9154ca3: mov    %r14,0x8(%rsp)
  0x00007f8ab9154ca8: mov    %r15,(%rsp)
  0x00007f8ab9154cac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9154cb6: movabs $0x7f8ab9154c56,%rsi
  0x00007f8ab9154cc0: mov    %rsp,%rdx
  0x00007f8ab9154cc3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154cc7: callq  0x00007f8aceddb9fa
  0x00007f8ab9154ccc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9154ccd: mov    %rsp,%r11
  0x00007f8ab9154cd0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154cd4: push   %rax
  0x00007f8ab9154cd5: mov    %r11,%rax
  0x00007f8ab9154cd8: mov    0x50(%rbx),%r11
  0x00007f8ab9154cdc: mov    0x18(%rax),%rsi
  0x00007f8ab9154ce0: mov    0x10(%rax),%edx
  0x00007f8ab9154ce3: mov    0x8(%rax),%rcx
  0x00007f8ab9154ce7: mov    %rbx,0x258(%r15)
  0x00007f8ab9154cee: mov    %rbx,%rax
  0x00007f8ab9154cf1: jmpq   *%r11
  0x00007f8ab9154cf4: mov    0x8(%rsi),%ebx
  0x00007f8ab9154cf7: shl    $0x3,%rbx
  0x00007f8ab9154cfb: cmp    0x10(%rax),%rbx
  0x00007f8ab9154cff: mov    0x8(%rax),%rbx
  0x00007f8ab9154d03: je     0x00007f8ab9154d0e
  0x00007f8ab9154d09: jmpq   0x00007f8ab9105c40
  0x00007f8ab9154d0e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9154d16: je     0x00007f8ab9154e11
  0x00007f8ab9154d1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9154d21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9154d29: je     0x00007f8ab9154e11
  0x00007f8ab9154d2f: mov    %rsp,%r13
  0x00007f8ab9154d32: mov    (%rsp),%rax
  0x00007f8ab9154d36: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154d3a: pushfq 
  0x00007f8ab9154d3b: sub    $0x8,%rsp
  0x00007f8ab9154d3f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9154d44: sub    $0x80,%rsp
  0x00007f8ab9154d4b: mov    %rax,0x78(%rsp)
  0x00007f8ab9154d50: mov    %rcx,0x70(%rsp)
  0x00007f8ab9154d55: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154d5a: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154d5f: mov    %rbp,0x50(%rsp)
  0x00007f8ab9154d64: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154d69: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154d6e: mov    %r8,0x38(%rsp)
  0x00007f8ab9154d73: mov    %r9,0x30(%rsp)
  0x00007f8ab9154d78: mov    %r10,0x28(%rsp)
  0x00007f8ab9154d7d: mov    %r11,0x20(%rsp)
  0x00007f8ab9154d82: mov    %r12,0x18(%rsp)
  0x00007f8ab9154d87: mov    %r13,0x10(%rsp)
  0x00007f8ab9154d8c: mov    %r14,0x8(%rsp)
  0x00007f8ab9154d91: mov    %r15,(%rsp)
  0x00007f8ab9154d95: sub    $0x200,%rsp
  0x00007f8ab9154d9c: fxsave64 (%rsp)
  0x00007f8ab9154da1: mov    %rbx,%rdi
  0x00007f8ab9154da4: mov    %rax,%rsi
  0x00007f8ab9154da7: callq  0x00007f8acef8bbca
  0x00007f8ab9154dac: fxrstor64 (%rsp)
  0x00007f8ab9154db1: add    $0x200,%rsp
  0x00007f8ab9154db8: mov    (%rsp),%r15
  0x00007f8ab9154dbc: mov    0x8(%rsp),%r14
  0x00007f8ab9154dc1: mov    0x10(%rsp),%r13
  0x00007f8ab9154dc6: mov    0x18(%rsp),%r12
  0x00007f8ab9154dcb: mov    0x20(%rsp),%r11
  0x00007f8ab9154dd0: mov    0x28(%rsp),%r10
  0x00007f8ab9154dd5: mov    0x30(%rsp),%r9
  0x00007f8ab9154dda: mov    0x38(%rsp),%r8
  0x00007f8ab9154ddf: mov    0x40(%rsp),%rdi
  0x00007f8ab9154de4: mov    0x48(%rsp),%rsi
  0x00007f8ab9154de9: mov    0x50(%rsp),%rbp
  0x00007f8ab9154dee: mov    0x60(%rsp),%rbx
  0x00007f8ab9154df3: mov    0x68(%rsp),%rdx
  0x00007f8ab9154df8: mov    0x70(%rsp),%rcx
  0x00007f8ab9154dfd: mov    0x78(%rsp),%rax
  0x00007f8ab9154e02: add    $0x80,%rsp
  0x00007f8ab9154e09: add    $0x8,%rsp
  0x00007f8ab9154e0d: popfq  
  0x00007f8ab9154e0e: mov    %r13,%rsp
  0x00007f8ab9154e11: pop    %rax
  0x00007f8ab9154e12: mov    %rsp,%r13
  0x00007f8ab9154e15: sub    $0x20,%rsp
  0x00007f8ab9154e19: mov    %rax,(%rsp)
  0x00007f8ab9154e1d: mov    %rsi,0x18(%rsp)
  0x00007f8ab9154e22: mov    %edx,0x10(%rsp)
  0x00007f8ab9154e26: mov    %rcx,0x8(%rsp)
  0x00007f8ab9154e2b: mov    0x40(%rbx),%rcx
  0x00007f8ab9154e2f: jmpq   *%rcx

AHE@0x00007f8ac80ec370: 0xbbbbab00 i2c: 0x00007f8ab9154ee0 c2i: 0x00007f8ab915502e c2iUV: 0x00007f8ab9155001
i2c argument handler #31 for: receiver (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;ILjava/lang/Class;)V (622 bytes generated)
c2i argument handler starts at 0x7f8ab915502e
  0x00007f8ab9154ee0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9154ee4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9154eee: cmp    %r11,%rax
  0x00007f8ab9154ef1: jbe    0x00007f8ab9154f0a
  0x00007f8ab9154ef7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9154f01: cmp    %r11,%rax
  0x00007f8ab9154f04: jb     0x00007f8ab9154fcd
  0x00007f8ab9154f0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9154f14: cmp    %r11,%rax
  0x00007f8ab9154f17: jbe    0x00007f8ab9154f30
  0x00007f8ab9154f1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9154f27: cmp    %r11,%rax
  0x00007f8ab9154f2a: jb     0x00007f8ab9154fcd
  0x00007f8ab9154f30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9154f3a: cmp    %r11,%rax
  0x00007f8ab9154f3d: jbe    0x00007f8ab9154f56
  0x00007f8ab9154f43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9154f4d: cmp    %r11,%rax
  0x00007f8ab9154f50: jb     0x00007f8ab9154fcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9154f56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9154f5b: sub    $0x80,%rsp
  0x00007f8ab9154f62: mov    %rax,0x78(%rsp)
  0x00007f8ab9154f67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9154f6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9154f71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9154f76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9154f7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9154f80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9154f85: mov    %r8,0x38(%rsp)
  0x00007f8ab9154f8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9154f8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9154f94: mov    %r11,0x20(%rsp)
  0x00007f8ab9154f99: mov    %r12,0x18(%rsp)
  0x00007f8ab9154f9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9154fa3: mov    %r14,0x8(%rsp)
  0x00007f8ab9154fa8: mov    %r15,(%rsp)
  0x00007f8ab9154fac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9154fb6: movabs $0x7f8ab9154f56,%rsi
  0x00007f8ab9154fc0: mov    %rsp,%rdx
  0x00007f8ab9154fc3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154fc7: callq  0x00007f8aceddb9fa
  0x00007f8ab9154fcc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9154fcd: mov    %rsp,%r11
  0x00007f8ab9154fd0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9154fd4: push   %rax
  0x00007f8ab9154fd5: mov    %r11,%rax
  0x00007f8ab9154fd8: mov    0x50(%rbx),%r11
  0x00007f8ab9154fdc: mov    0x30(%rax),%rsi
  0x00007f8ab9154fe0: mov    0x28(%rax),%rdx
  0x00007f8ab9154fe4: mov    0x20(%rax),%rcx
  0x00007f8ab9154fe8: mov    0x18(%rax),%r8
  0x00007f8ab9154fec: mov    0x10(%rax),%r9d
  0x00007f8ab9154ff0: mov    0x8(%rax),%rdi
  0x00007f8ab9154ff4: mov    %rbx,0x258(%r15)
  0x00007f8ab9154ffb: mov    %rbx,%rax
  0x00007f8ab9154ffe: jmpq   *%r11
  0x00007f8ab9155001: mov    0x8(%rsi),%ebx
  0x00007f8ab9155004: shl    $0x3,%rbx
  0x00007f8ab9155008: cmp    0x10(%rax),%rbx
  0x00007f8ab915500c: mov    0x8(%rax),%rbx
  0x00007f8ab9155010: je     0x00007f8ab915501b
  0x00007f8ab9155016: jmpq   0x00007f8ab9105c40
  0x00007f8ab915501b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9155023: je     0x00007f8ab915511e
  0x00007f8ab9155029: jmpq   0x00007f8ab9105c40
  0x00007f8ab915502e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9155036: je     0x00007f8ab915511e
  0x00007f8ab915503c: mov    %rsp,%r13
  0x00007f8ab915503f: mov    (%rsp),%rax
  0x00007f8ab9155043: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155047: pushfq 
  0x00007f8ab9155048: sub    $0x8,%rsp
  0x00007f8ab915504c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9155051: sub    $0x80,%rsp
  0x00007f8ab9155058: mov    %rax,0x78(%rsp)
  0x00007f8ab915505d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9155062: mov    %rdx,0x68(%rsp)
  0x00007f8ab9155067: mov    %rbx,0x60(%rsp)
  0x00007f8ab915506c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9155071: mov    %rsi,0x48(%rsp)
  0x00007f8ab9155076: mov    %rdi,0x40(%rsp)
  0x00007f8ab915507b: mov    %r8,0x38(%rsp)
  0x00007f8ab9155080: mov    %r9,0x30(%rsp)
  0x00007f8ab9155085: mov    %r10,0x28(%rsp)
  0x00007f8ab915508a: mov    %r11,0x20(%rsp)
  0x00007f8ab915508f: mov    %r12,0x18(%rsp)
  0x00007f8ab9155094: mov    %r13,0x10(%rsp)
  0x00007f8ab9155099: mov    %r14,0x8(%rsp)
  0x00007f8ab915509e: mov    %r15,(%rsp)
  0x00007f8ab91550a2: sub    $0x200,%rsp
  0x00007f8ab91550a9: fxsave64 (%rsp)
  0x00007f8ab91550ae: mov    %rbx,%rdi
  0x00007f8ab91550b1: mov    %rax,%rsi
  0x00007f8ab91550b4: callq  0x00007f8acef8bbca
  0x00007f8ab91550b9: fxrstor64 (%rsp)
  0x00007f8ab91550be: add    $0x200,%rsp
  0x00007f8ab91550c5: mov    (%rsp),%r15
  0x00007f8ab91550c9: mov    0x8(%rsp),%r14
  0x00007f8ab91550ce: mov    0x10(%rsp),%r13
  0x00007f8ab91550d3: mov    0x18(%rsp),%r12
  0x00007f8ab91550d8: mov    0x20(%rsp),%r11
  0x00007f8ab91550dd: mov    0x28(%rsp),%r10
  0x00007f8ab91550e2: mov    0x30(%rsp),%r9
  0x00007f8ab91550e7: mov    0x38(%rsp),%r8
  0x00007f8ab91550ec: mov    0x40(%rsp),%rdi
  0x00007f8ab91550f1: mov    0x48(%rsp),%rsi
  0x00007f8ab91550f6: mov    0x50(%rsp),%rbp
  0x00007f8ab91550fb: mov    0x60(%rsp),%rbx
  0x00007f8ab9155100: mov    0x68(%rsp),%rdx
  0x00007f8ab9155105: mov    0x70(%rsp),%rcx
  0x00007f8ab915510a: mov    0x78(%rsp),%rax
  0x00007f8ab915510f: add    $0x80,%rsp
  0x00007f8ab9155116: add    $0x8,%rsp
  0x00007f8ab915511a: popfq  
  0x00007f8ab915511b: mov    %r13,%rsp
  0x00007f8ab915511e: pop    %rax
  0x00007f8ab915511f: mov    %rsp,%r13
  0x00007f8ab9155122: sub    $0x40,%rsp
  0x00007f8ab9155126: mov    %rax,(%rsp)
  0x00007f8ab915512a: mov    %rsi,0x30(%rsp)
  0x00007f8ab915512f: mov    %rdx,0x28(%rsp)
  0x00007f8ab9155134: mov    %rcx,0x20(%rsp)
  0x00007f8ab9155139: mov    %r8,0x18(%rsp)
  0x00007f8ab915513e: mov    %r9d,0x10(%rsp)
  0x00007f8ab9155143: mov    %rdi,0x8(%rsp)
  0x00007f8ab9155148: mov    0x40(%rbx),%rcx
  0x00007f8ab915514c: jmpq   *%rcx

AHE@0x00007f8ac80ec3b8: 0xbbbba000 i2c: 0x00007f8ab9155220 c2i: 0x00007f8ab915536a c2iUV: 0x00007f8ab915533d
i2c argument handler #32 for: receiver (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;I)V (613 bytes generated)
c2i argument handler starts at 0x7f8ab915536a
  0x00007f8ab9155220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9155224: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915522e: cmp    %r11,%rax
  0x00007f8ab9155231: jbe    0x00007f8ab915524a
  0x00007f8ab9155237: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9155241: cmp    %r11,%rax
  0x00007f8ab9155244: jb     0x00007f8ab915530d
  0x00007f8ab915524a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9155254: cmp    %r11,%rax
  0x00007f8ab9155257: jbe    0x00007f8ab9155270
  0x00007f8ab915525d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9155267: cmp    %r11,%rax
  0x00007f8ab915526a: jb     0x00007f8ab915530d
  0x00007f8ab9155270: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915527a: cmp    %r11,%rax
  0x00007f8ab915527d: jbe    0x00007f8ab9155296
  0x00007f8ab9155283: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915528d: cmp    %r11,%rax
  0x00007f8ab9155290: jb     0x00007f8ab915530d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9155296: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915529b: sub    $0x80,%rsp
  0x00007f8ab91552a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91552a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91552ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91552b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91552b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91552bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91552c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91552c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91552ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91552cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91552d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91552d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91552de: mov    %r13,0x10(%rsp)
  0x00007f8ab91552e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91552e8: mov    %r15,(%rsp)
  0x00007f8ab91552ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91552f6: movabs $0x7f8ab9155296,%rsi
  0x00007f8ab9155300: mov    %rsp,%rdx
  0x00007f8ab9155303: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155307: callq  0x00007f8aceddb9fa
  0x00007f8ab915530c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915530d: mov    %rsp,%r11
  0x00007f8ab9155310: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155314: push   %rax
  0x00007f8ab9155315: mov    %r11,%rax
  0x00007f8ab9155318: mov    0x50(%rbx),%r11
  0x00007f8ab915531c: mov    0x28(%rax),%rsi
  0x00007f8ab9155320: mov    0x20(%rax),%rdx
  0x00007f8ab9155324: mov    0x18(%rax),%rcx
  0x00007f8ab9155328: mov    0x10(%rax),%r8
  0x00007f8ab915532c: mov    0x8(%rax),%r9d
  0x00007f8ab9155330: mov    %rbx,0x258(%r15)
  0x00007f8ab9155337: mov    %rbx,%rax
  0x00007f8ab915533a: jmpq   *%r11
  0x00007f8ab915533d: mov    0x8(%rsi),%ebx
  0x00007f8ab9155340: shl    $0x3,%rbx
  0x00007f8ab9155344: cmp    0x10(%rax),%rbx
  0x00007f8ab9155348: mov    0x8(%rax),%rbx
  0x00007f8ab915534c: je     0x00007f8ab9155357
  0x00007f8ab9155352: jmpq   0x00007f8ab9105c40
  0x00007f8ab9155357: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915535f: je     0x00007f8ab915545a
  0x00007f8ab9155365: jmpq   0x00007f8ab9105c40
  0x00007f8ab915536a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9155372: je     0x00007f8ab915545a
  0x00007f8ab9155378: mov    %rsp,%r13
  0x00007f8ab915537b: mov    (%rsp),%rax
  0x00007f8ab915537f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155383: pushfq 
  0x00007f8ab9155384: sub    $0x8,%rsp
  0x00007f8ab9155388: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915538d: sub    $0x80,%rsp
  0x00007f8ab9155394: mov    %rax,0x78(%rsp)
  0x00007f8ab9155399: mov    %rcx,0x70(%rsp)
  0x00007f8ab915539e: mov    %rdx,0x68(%rsp)
  0x00007f8ab91553a3: mov    %rbx,0x60(%rsp)
  0x00007f8ab91553a8: mov    %rbp,0x50(%rsp)
  0x00007f8ab91553ad: mov    %rsi,0x48(%rsp)
  0x00007f8ab91553b2: mov    %rdi,0x40(%rsp)
  0x00007f8ab91553b7: mov    %r8,0x38(%rsp)
  0x00007f8ab91553bc: mov    %r9,0x30(%rsp)
  0x00007f8ab91553c1: mov    %r10,0x28(%rsp)
  0x00007f8ab91553c6: mov    %r11,0x20(%rsp)
  0x00007f8ab91553cb: mov    %r12,0x18(%rsp)
  0x00007f8ab91553d0: mov    %r13,0x10(%rsp)
  0x00007f8ab91553d5: mov    %r14,0x8(%rsp)
  0x00007f8ab91553da: mov    %r15,(%rsp)
  0x00007f8ab91553de: sub    $0x200,%rsp
  0x00007f8ab91553e5: fxsave64 (%rsp)
  0x00007f8ab91553ea: mov    %rbx,%rdi
  0x00007f8ab91553ed: mov    %rax,%rsi
  0x00007f8ab91553f0: callq  0x00007f8acef8bbca
  0x00007f8ab91553f5: fxrstor64 (%rsp)
  0x00007f8ab91553fa: add    $0x200,%rsp
  0x00007f8ab9155401: mov    (%rsp),%r15
  0x00007f8ab9155405: mov    0x8(%rsp),%r14
  0x00007f8ab915540a: mov    0x10(%rsp),%r13
  0x00007f8ab915540f: mov    0x18(%rsp),%r12
  0x00007f8ab9155414: mov    0x20(%rsp),%r11
  0x00007f8ab9155419: mov    0x28(%rsp),%r10
  0x00007f8ab915541e: mov    0x30(%rsp),%r9
  0x00007f8ab9155423: mov    0x38(%rsp),%r8
  0x00007f8ab9155428: mov    0x40(%rsp),%rdi
  0x00007f8ab915542d: mov    0x48(%rsp),%rsi
  0x00007f8ab9155432: mov    0x50(%rsp),%rbp
  0x00007f8ab9155437: mov    0x60(%rsp),%rbx
  0x00007f8ab915543c: mov    0x68(%rsp),%rdx
  0x00007f8ab9155441: mov    0x70(%rsp),%rcx
  0x00007f8ab9155446: mov    0x78(%rsp),%rax
  0x00007f8ab915544b: add    $0x80,%rsp
  0x00007f8ab9155452: add    $0x8,%rsp
  0x00007f8ab9155456: popfq  
  0x00007f8ab9155457: mov    %r13,%rsp
  0x00007f8ab915545a: pop    %rax
  0x00007f8ab915545b: mov    %rsp,%r13
  0x00007f8ab915545e: sub    $0x30,%rsp
  0x00007f8ab9155462: mov    %rax,(%rsp)
  0x00007f8ab9155466: mov    %rsi,0x28(%rsp)
  0x00007f8ab915546b: mov    %rdx,0x20(%rsp)
  0x00007f8ab9155470: mov    %rcx,0x18(%rsp)
  0x00007f8ab9155475: mov    %r8,0x10(%rsp)
  0x00007f8ab915547a: mov    %r9d,0x8(%rsp)
  0x00007f8ab915547f: mov    0x40(%rbx),%rcx
  0x00007f8ab9155483: jmpq   *%rcx

AHE@0x00007f8ac80ec400: 0xbaabb000 i2c: 0x00007f8ab9155560 c2i: 0x00007f8ab91556a8 c2iUV: 0x00007f8ab915567b
i2c argument handler #33 for: receiver (IZ[Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/String; (609 bytes generated)
c2i argument handler starts at 0x7f8ab91556a8
  0x00007f8ab9155560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9155564: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915556e: cmp    %r11,%rax
  0x00007f8ab9155571: jbe    0x00007f8ab915558a
  0x00007f8ab9155577: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9155581: cmp    %r11,%rax
  0x00007f8ab9155584: jb     0x00007f8ab915564d
  0x00007f8ab915558a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9155594: cmp    %r11,%rax
  0x00007f8ab9155597: jbe    0x00007f8ab91555b0
  0x00007f8ab915559d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91555a7: cmp    %r11,%rax
  0x00007f8ab91555aa: jb     0x00007f8ab915564d
  0x00007f8ab91555b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91555ba: cmp    %r11,%rax
  0x00007f8ab91555bd: jbe    0x00007f8ab91555d6
  0x00007f8ab91555c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91555cd: cmp    %r11,%rax
  0x00007f8ab91555d0: jb     0x00007f8ab915564d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91555d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91555db: sub    $0x80,%rsp
  0x00007f8ab91555e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91555e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91555ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91555f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91555f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91555fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9155600: mov    %rdi,0x40(%rsp)
  0x00007f8ab9155605: mov    %r8,0x38(%rsp)
  0x00007f8ab915560a: mov    %r9,0x30(%rsp)
  0x00007f8ab915560f: mov    %r10,0x28(%rsp)
  0x00007f8ab9155614: mov    %r11,0x20(%rsp)
  0x00007f8ab9155619: mov    %r12,0x18(%rsp)
  0x00007f8ab915561e: mov    %r13,0x10(%rsp)
  0x00007f8ab9155623: mov    %r14,0x8(%rsp)
  0x00007f8ab9155628: mov    %r15,(%rsp)
  0x00007f8ab915562c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9155636: movabs $0x7f8ab91555d6,%rsi
  0x00007f8ab9155640: mov    %rsp,%rdx
  0x00007f8ab9155643: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155647: callq  0x00007f8aceddb9fa
  0x00007f8ab915564c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915564d: mov    %rsp,%r11
  0x00007f8ab9155650: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155654: push   %rax
  0x00007f8ab9155655: mov    %r11,%rax
  0x00007f8ab9155658: mov    0x50(%rbx),%r11
  0x00007f8ab915565c: mov    0x28(%rax),%rsi
  0x00007f8ab9155660: mov    0x20(%rax),%edx
  0x00007f8ab9155663: mov    0x18(%rax),%ecx
  0x00007f8ab9155666: mov    0x10(%rax),%r8
  0x00007f8ab915566a: mov    0x8(%rax),%r9
  0x00007f8ab915566e: mov    %rbx,0x258(%r15)
  0x00007f8ab9155675: mov    %rbx,%rax
  0x00007f8ab9155678: jmpq   *%r11
  0x00007f8ab915567b: mov    0x8(%rsi),%ebx
  0x00007f8ab915567e: shl    $0x3,%rbx
  0x00007f8ab9155682: cmp    0x10(%rax),%rbx
  0x00007f8ab9155686: mov    0x8(%rax),%rbx
  0x00007f8ab915568a: je     0x00007f8ab9155695
  0x00007f8ab9155690: jmpq   0x00007f8ab9105c40
  0x00007f8ab9155695: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915569d: je     0x00007f8ab9155798
  0x00007f8ab91556a3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91556a8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91556b0: je     0x00007f8ab9155798
  0x00007f8ab91556b6: mov    %rsp,%r13
  0x00007f8ab91556b9: mov    (%rsp),%rax
  0x00007f8ab91556bd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91556c1: pushfq 
  0x00007f8ab91556c2: sub    $0x8,%rsp
  0x00007f8ab91556c6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91556cb: sub    $0x80,%rsp
  0x00007f8ab91556d2: mov    %rax,0x78(%rsp)
  0x00007f8ab91556d7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91556dc: mov    %rdx,0x68(%rsp)
  0x00007f8ab91556e1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91556e6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91556eb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91556f0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91556f5: mov    %r8,0x38(%rsp)
  0x00007f8ab91556fa: mov    %r9,0x30(%rsp)
  0x00007f8ab91556ff: mov    %r10,0x28(%rsp)
  0x00007f8ab9155704: mov    %r11,0x20(%rsp)
  0x00007f8ab9155709: mov    %r12,0x18(%rsp)
  0x00007f8ab915570e: mov    %r13,0x10(%rsp)
  0x00007f8ab9155713: mov    %r14,0x8(%rsp)
  0x00007f8ab9155718: mov    %r15,(%rsp)
  0x00007f8ab915571c: sub    $0x200,%rsp
  0x00007f8ab9155723: fxsave64 (%rsp)
  0x00007f8ab9155728: mov    %rbx,%rdi
  0x00007f8ab915572b: mov    %rax,%rsi
  0x00007f8ab915572e: callq  0x00007f8acef8bbca
  0x00007f8ab9155733: fxrstor64 (%rsp)
  0x00007f8ab9155738: add    $0x200,%rsp
  0x00007f8ab915573f: mov    (%rsp),%r15
  0x00007f8ab9155743: mov    0x8(%rsp),%r14
  0x00007f8ab9155748: mov    0x10(%rsp),%r13
  0x00007f8ab915574d: mov    0x18(%rsp),%r12
  0x00007f8ab9155752: mov    0x20(%rsp),%r11
  0x00007f8ab9155757: mov    0x28(%rsp),%r10
  0x00007f8ab915575c: mov    0x30(%rsp),%r9
  0x00007f8ab9155761: mov    0x38(%rsp),%r8
  0x00007f8ab9155766: mov    0x40(%rsp),%rdi
  0x00007f8ab915576b: mov    0x48(%rsp),%rsi
  0x00007f8ab9155770: mov    0x50(%rsp),%rbp
  0x00007f8ab9155775: mov    0x60(%rsp),%rbx
  0x00007f8ab915577a: mov    0x68(%rsp),%rdx
  0x00007f8ab915577f: mov    0x70(%rsp),%rcx
  0x00007f8ab9155784: mov    0x78(%rsp),%rax
  0x00007f8ab9155789: add    $0x80,%rsp
  0x00007f8ab9155790: add    $0x8,%rsp
  0x00007f8ab9155794: popfq  
  0x00007f8ab9155795: mov    %r13,%rsp
  0x00007f8ab9155798: pop    %rax
  0x00007f8ab9155799: mov    %rsp,%r13
  0x00007f8ab915579c: sub    $0x30,%rsp
  0x00007f8ab91557a0: mov    %rax,(%rsp)
  0x00007f8ab91557a4: mov    %rsi,0x28(%rsp)
  0x00007f8ab91557a9: mov    %edx,0x20(%rsp)
  0x00007f8ab91557ad: mov    %ecx,0x18(%rsp)
  0x00007f8ab91557b1: mov    %r8,0x10(%rsp)
  0x00007f8ab91557b6: mov    %r9,0x8(%rsp)
  0x00007f8ab91557bb: mov    0x40(%rbx),%rcx
  0x00007f8ab91557bf: jmpq   *%rcx

AHE@0x00007f8ac80ec448: 0xbbbbbbaabbbb0000 i2c: 0x00007f8ab91558a0 c2i: 0x00007f8ab9155a28 c2iUV: 0x00007f8ab91559fb
i2c argument handler #34 for: receiver (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B[B)V (750 bytes generated)
c2i argument handler starts at 0x7f8ab9155a28
  0x00007f8ab91558a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91558a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91558ae: cmp    %r11,%rax
  0x00007f8ab91558b1: jbe    0x00007f8ab91558ca
  0x00007f8ab91558b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91558c1: cmp    %r11,%rax
  0x00007f8ab91558c4: jb     0x00007f8ab915598d
  0x00007f8ab91558ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91558d4: cmp    %r11,%rax
  0x00007f8ab91558d7: jbe    0x00007f8ab91558f0
  0x00007f8ab91558dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91558e7: cmp    %r11,%rax
  0x00007f8ab91558ea: jb     0x00007f8ab915598d
  0x00007f8ab91558f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91558fa: cmp    %r11,%rax
  0x00007f8ab91558fd: jbe    0x00007f8ab9155916
  0x00007f8ab9155903: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915590d: cmp    %r11,%rax
  0x00007f8ab9155910: jb     0x00007f8ab915598d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9155916: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915591b: sub    $0x80,%rsp
  0x00007f8ab9155922: mov    %rax,0x78(%rsp)
  0x00007f8ab9155927: mov    %rcx,0x70(%rsp)
  0x00007f8ab915592c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9155931: mov    %rbx,0x60(%rsp)
  0x00007f8ab9155936: mov    %rbp,0x50(%rsp)
  0x00007f8ab915593b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9155940: mov    %rdi,0x40(%rsp)
  0x00007f8ab9155945: mov    %r8,0x38(%rsp)
  0x00007f8ab915594a: mov    %r9,0x30(%rsp)
  0x00007f8ab915594f: mov    %r10,0x28(%rsp)
  0x00007f8ab9155954: mov    %r11,0x20(%rsp)
  0x00007f8ab9155959: mov    %r12,0x18(%rsp)
  0x00007f8ab915595e: mov    %r13,0x10(%rsp)
  0x00007f8ab9155963: mov    %r14,0x8(%rsp)
  0x00007f8ab9155968: mov    %r15,(%rsp)
  0x00007f8ab915596c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9155976: movabs $0x7f8ab9155916,%rsi
  0x00007f8ab9155980: mov    %rsp,%rdx
  0x00007f8ab9155983: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155987: callq  0x00007f8aceddb9fa
  0x00007f8ab915598c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915598d: mov    %rsp,%r11
  0x00007f8ab9155990: sub    $0x30,%rsp
  0x00007f8ab9155994: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155998: push   %rax
  0x00007f8ab9155999: mov    %r11,%rax
  0x00007f8ab915599c: mov    0x50(%rbx),%r11
  0x00007f8ab91559a0: mov    0x60(%rax),%rsi
  0x00007f8ab91559a4: mov    0x58(%rax),%rdx
  0x00007f8ab91559a8: mov    0x50(%rax),%rcx
  0x00007f8ab91559ac: mov    0x48(%rax),%r8
  0x00007f8ab91559b0: mov    0x40(%rax),%r9
  0x00007f8ab91559b4: mov    0x38(%rax),%rdi
  0x00007f8ab91559b8: mov    0x30(%rax),%r13d
  0x00007f8ab91559bc: mov    %r13,0x8(%rsp)
  0x00007f8ab91559c1: mov    0x28(%rax),%r13d
  0x00007f8ab91559c5: mov    %r13,0x10(%rsp)
  0x00007f8ab91559ca: mov    0x20(%rax),%r13
  0x00007f8ab91559ce: mov    %r13,0x18(%rsp)
  0x00007f8ab91559d3: mov    0x18(%rax),%r13
  0x00007f8ab91559d7: mov    %r13,0x20(%rsp)
  0x00007f8ab91559dc: mov    0x10(%rax),%r13
  0x00007f8ab91559e0: mov    %r13,0x28(%rsp)
  0x00007f8ab91559e5: mov    0x8(%rax),%r13
  0x00007f8ab91559e9: mov    %r13,0x30(%rsp)
  0x00007f8ab91559ee: mov    %rbx,0x258(%r15)
  0x00007f8ab91559f5: mov    %rbx,%rax
  0x00007f8ab91559f8: jmpq   *%r11
  0x00007f8ab91559fb: mov    0x8(%rsi),%ebx
  0x00007f8ab91559fe: shl    $0x3,%rbx
  0x00007f8ab9155a02: cmp    0x10(%rax),%rbx
  0x00007f8ab9155a06: mov    0x8(%rax),%rbx
  0x00007f8ab9155a0a: je     0x00007f8ab9155a15
  0x00007f8ab9155a10: jmpq   0x00007f8ab9105c40
  0x00007f8ab9155a15: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9155a1d: je     0x00007f8ab9155b18
  0x00007f8ab9155a23: jmpq   0x00007f8ab9105c40
  0x00007f8ab9155a28: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9155a30: je     0x00007f8ab9155b18
  0x00007f8ab9155a36: mov    %rsp,%r13
  0x00007f8ab9155a39: mov    (%rsp),%rax
  0x00007f8ab9155a3d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155a41: pushfq 
  0x00007f8ab9155a42: sub    $0x8,%rsp
  0x00007f8ab9155a46: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9155a4b: sub    $0x80,%rsp
  0x00007f8ab9155a52: mov    %rax,0x78(%rsp)
  0x00007f8ab9155a57: mov    %rcx,0x70(%rsp)
  0x00007f8ab9155a5c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9155a61: mov    %rbx,0x60(%rsp)
  0x00007f8ab9155a66: mov    %rbp,0x50(%rsp)
  0x00007f8ab9155a6b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9155a70: mov    %rdi,0x40(%rsp)
  0x00007f8ab9155a75: mov    %r8,0x38(%rsp)
  0x00007f8ab9155a7a: mov    %r9,0x30(%rsp)
  0x00007f8ab9155a7f: mov    %r10,0x28(%rsp)
  0x00007f8ab9155a84: mov    %r11,0x20(%rsp)
  0x00007f8ab9155a89: mov    %r12,0x18(%rsp)
  0x00007f8ab9155a8e: mov    %r13,0x10(%rsp)
  0x00007f8ab9155a93: mov    %r14,0x8(%rsp)
  0x00007f8ab9155a98: mov    %r15,(%rsp)
  0x00007f8ab9155a9c: sub    $0x200,%rsp
  0x00007f8ab9155aa3: fxsave64 (%rsp)
  0x00007f8ab9155aa8: mov    %rbx,%rdi
  0x00007f8ab9155aab: mov    %rax,%rsi
  0x00007f8ab9155aae: callq  0x00007f8acef8bbca
  0x00007f8ab9155ab3: fxrstor64 (%rsp)
  0x00007f8ab9155ab8: add    $0x200,%rsp
  0x00007f8ab9155abf: mov    (%rsp),%r15
  0x00007f8ab9155ac3: mov    0x8(%rsp),%r14
  0x00007f8ab9155ac8: mov    0x10(%rsp),%r13
  0x00007f8ab9155acd: mov    0x18(%rsp),%r12
  0x00007f8ab9155ad2: mov    0x20(%rsp),%r11
  0x00007f8ab9155ad7: mov    0x28(%rsp),%r10
  0x00007f8ab9155adc: mov    0x30(%rsp),%r9
  0x00007f8ab9155ae1: mov    0x38(%rsp),%r8
  0x00007f8ab9155ae6: mov    0x40(%rsp),%rdi
  0x00007f8ab9155aeb: mov    0x48(%rsp),%rsi
  0x00007f8ab9155af0: mov    0x50(%rsp),%rbp
  0x00007f8ab9155af5: mov    0x60(%rsp),%rbx
  0x00007f8ab9155afa: mov    0x68(%rsp),%rdx
  0x00007f8ab9155aff: mov    0x70(%rsp),%rcx
  0x00007f8ab9155b04: mov    0x78(%rsp),%rax
  0x00007f8ab9155b09: add    $0x80,%rsp
  0x00007f8ab9155b10: add    $0x8,%rsp
  0x00007f8ab9155b14: popfq  
  0x00007f8ab9155b15: mov    %r13,%rsp
  0x00007f8ab9155b18: pop    %rax
  0x00007f8ab9155b19: mov    %rsp,%r13
  0x00007f8ab9155b1c: sub    $0x70,%rsp
  0x00007f8ab9155b20: mov    %rax,(%rsp)
  0x00007f8ab9155b24: mov    %rsi,0x60(%rsp)
  0x00007f8ab9155b29: mov    %rdx,0x58(%rsp)
  0x00007f8ab9155b2e: mov    %rcx,0x50(%rsp)
  0x00007f8ab9155b33: mov    %r8,0x48(%rsp)
  0x00007f8ab9155b38: mov    %r9,0x40(%rsp)
  0x00007f8ab9155b3d: mov    %rdi,0x38(%rsp)
  0x00007f8ab9155b42: mov    0x70(%rsp),%eax
  0x00007f8ab9155b46: mov    %rax,0x30(%rsp)
  0x00007f8ab9155b4b: mov    0x78(%rsp),%eax
  0x00007f8ab9155b4f: mov    %rax,0x28(%rsp)
  0x00007f8ab9155b54: mov    0x80(%rsp),%rax
  0x00007f8ab9155b5c: mov    %rax,0x20(%rsp)
  0x00007f8ab9155b61: mov    0x88(%rsp),%rax
  0x00007f8ab9155b69: mov    %rax,0x18(%rsp)
  0x00007f8ab9155b6e: mov    0x90(%rsp),%rax
  0x00007f8ab9155b76: mov    %rax,0x10(%rsp)
  0x00007f8ab9155b7b: mov    0x98(%rsp),%rax
  0x00007f8ab9155b83: mov    %rax,0x8(%rsp)
  0x00007f8ab9155b88: mov    0x40(%rbx),%rcx
  0x00007f8ab9155b8c: jmpq   *%rcx

AHE@0x00007f8ac80ec490: 0xbbbbaabb i2c: 0x00007f8ab9155c60 c2i: 0x00007f8ab9155dc3 c2iUV: 0x00007f8ab9155d96
i2c argument handler #35 for: receiver (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;IILjava/lang/String;[B)Ljava/lang/reflect/Field; (662 bytes generated)
c2i argument handler starts at 0x7f8ab9155dc3
  0x00007f8ab9155c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9155c64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9155c6e: cmp    %r11,%rax
  0x00007f8ab9155c71: jbe    0x00007f8ab9155c8a
  0x00007f8ab9155c77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9155c81: cmp    %r11,%rax
  0x00007f8ab9155c84: jb     0x00007f8ab9155d4d
  0x00007f8ab9155c8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9155c94: cmp    %r11,%rax
  0x00007f8ab9155c97: jbe    0x00007f8ab9155cb0
  0x00007f8ab9155c9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9155ca7: cmp    %r11,%rax
  0x00007f8ab9155caa: jb     0x00007f8ab9155d4d
  0x00007f8ab9155cb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9155cba: cmp    %r11,%rax
  0x00007f8ab9155cbd: jbe    0x00007f8ab9155cd6
  0x00007f8ab9155cc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9155ccd: cmp    %r11,%rax
  0x00007f8ab9155cd0: jb     0x00007f8ab9155d4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9155cd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9155cdb: sub    $0x80,%rsp
  0x00007f8ab9155ce2: mov    %rax,0x78(%rsp)
  0x00007f8ab9155ce7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9155cec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9155cf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9155cf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9155cfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9155d00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9155d05: mov    %r8,0x38(%rsp)
  0x00007f8ab9155d0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9155d0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9155d14: mov    %r11,0x20(%rsp)
  0x00007f8ab9155d19: mov    %r12,0x18(%rsp)
  0x00007f8ab9155d1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9155d23: mov    %r14,0x8(%rsp)
  0x00007f8ab9155d28: mov    %r15,(%rsp)
  0x00007f8ab9155d2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9155d36: movabs $0x7f8ab9155cd6,%rsi
  0x00007f8ab9155d40: mov    %rsp,%rdx
  0x00007f8ab9155d43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155d47: callq  0x00007f8aceddb9fa
  0x00007f8ab9155d4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9155d4d: mov    %rsp,%r11
  0x00007f8ab9155d50: sub    $0x10,%rsp
  0x00007f8ab9155d54: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155d58: push   %rax
  0x00007f8ab9155d59: mov    %r11,%rax
  0x00007f8ab9155d5c: mov    0x50(%rbx),%r11
  0x00007f8ab9155d60: mov    0x40(%rax),%rsi
  0x00007f8ab9155d64: mov    0x38(%rax),%rdx
  0x00007f8ab9155d68: mov    0x30(%rax),%rcx
  0x00007f8ab9155d6c: mov    0x28(%rax),%r8
  0x00007f8ab9155d70: mov    0x20(%rax),%r9d
  0x00007f8ab9155d74: mov    0x18(%rax),%edi
  0x00007f8ab9155d77: mov    0x10(%rax),%r13
  0x00007f8ab9155d7b: mov    %r13,0x8(%rsp)
  0x00007f8ab9155d80: mov    0x8(%rax),%r13
  0x00007f8ab9155d84: mov    %r13,0x10(%rsp)
  0x00007f8ab9155d89: mov    %rbx,0x258(%r15)
  0x00007f8ab9155d90: mov    %rbx,%rax
  0x00007f8ab9155d93: jmpq   *%r11
  0x00007f8ab9155d96: mov    0x8(%rsi),%ebx
  0x00007f8ab9155d99: shl    $0x3,%rbx
  0x00007f8ab9155d9d: cmp    0x10(%rax),%rbx
  0x00007f8ab9155da1: mov    0x8(%rax),%rbx
  0x00007f8ab9155da5: je     0x00007f8ab9155db0
  0x00007f8ab9155dab: jmpq   0x00007f8ab9105c40
  0x00007f8ab9155db0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9155db8: je     0x00007f8ab9155eb3
  0x00007f8ab9155dbe: jmpq   0x00007f8ab9105c40
  0x00007f8ab9155dc3: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9155dcb: je     0x00007f8ab9155eb3
  0x00007f8ab9155dd1: mov    %rsp,%r13
  0x00007f8ab9155dd4: mov    (%rsp),%rax
  0x00007f8ab9155dd8: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9155ddc: pushfq 
  0x00007f8ab9155ddd: sub    $0x8,%rsp
  0x00007f8ab9155de1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9155de6: sub    $0x80,%rsp
  0x00007f8ab9155ded: mov    %rax,0x78(%rsp)
  0x00007f8ab9155df2: mov    %rcx,0x70(%rsp)
  0x00007f8ab9155df7: mov    %rdx,0x68(%rsp)
  0x00007f8ab9155dfc: mov    %rbx,0x60(%rsp)
  0x00007f8ab9155e01: mov    %rbp,0x50(%rsp)
  0x00007f8ab9155e06: mov    %rsi,0x48(%rsp)
  0x00007f8ab9155e0b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9155e10: mov    %r8,0x38(%rsp)
  0x00007f8ab9155e15: mov    %r9,0x30(%rsp)
  0x00007f8ab9155e1a: mov    %r10,0x28(%rsp)
  0x00007f8ab9155e1f: mov    %r11,0x20(%rsp)
  0x00007f8ab9155e24: mov    %r12,0x18(%rsp)
  0x00007f8ab9155e29: mov    %r13,0x10(%rsp)
  0x00007f8ab9155e2e: mov    %r14,0x8(%rsp)
  0x00007f8ab9155e33: mov    %r15,(%rsp)
  0x00007f8ab9155e37: sub    $0x200,%rsp
  0x00007f8ab9155e3e: fxsave64 (%rsp)
  0x00007f8ab9155e43: mov    %rbx,%rdi
  0x00007f8ab9155e46: mov    %rax,%rsi
  0x00007f8ab9155e49: callq  0x00007f8acef8bbca
  0x00007f8ab9155e4e: fxrstor64 (%rsp)
  0x00007f8ab9155e53: add    $0x200,%rsp
  0x00007f8ab9155e5a: mov    (%rsp),%r15
  0x00007f8ab9155e5e: mov    0x8(%rsp),%r14
  0x00007f8ab9155e63: mov    0x10(%rsp),%r13
  0x00007f8ab9155e68: mov    0x18(%rsp),%r12
  0x00007f8ab9155e6d: mov    0x20(%rsp),%r11
  0x00007f8ab9155e72: mov    0x28(%rsp),%r10
  0x00007f8ab9155e77: mov    0x30(%rsp),%r9
  0x00007f8ab9155e7c: mov    0x38(%rsp),%r8
  0x00007f8ab9155e81: mov    0x40(%rsp),%rdi
  0x00007f8ab9155e86: mov    0x48(%rsp),%rsi
  0x00007f8ab9155e8b: mov    0x50(%rsp),%rbp
  0x00007f8ab9155e90: mov    0x60(%rsp),%rbx
  0x00007f8ab9155e95: mov    0x68(%rsp),%rdx
  0x00007f8ab9155e9a: mov    0x70(%rsp),%rcx
  0x00007f8ab9155e9f: mov    0x78(%rsp),%rax
  0x00007f8ab9155ea4: add    $0x80,%rsp
  0x00007f8ab9155eab: add    $0x8,%rsp
  0x00007f8ab9155eaf: popfq  
  0x00007f8ab9155eb0: mov    %r13,%rsp
  0x00007f8ab9155eb3: pop    %rax
  0x00007f8ab9155eb4: mov    %rsp,%r13
  0x00007f8ab9155eb7: sub    $0x50,%rsp
  0x00007f8ab9155ebb: mov    %rax,(%rsp)
  0x00007f8ab9155ebf: mov    %rsi,0x40(%rsp)
  0x00007f8ab9155ec4: mov    %rdx,0x38(%rsp)
  0x00007f8ab9155ec9: mov    %rcx,0x30(%rsp)
  0x00007f8ab9155ece: mov    %r8,0x28(%rsp)
  0x00007f8ab9155ed3: mov    %r9d,0x20(%rsp)
  0x00007f8ab9155ed8: mov    %edi,0x18(%rsp)
  0x00007f8ab9155edc: mov    0x50(%rsp),%rax
  0x00007f8ab9155ee1: mov    %rax,0x10(%rsp)
  0x00007f8ab9155ee6: mov    0x58(%rsp),%rax
  0x00007f8ab9155eeb: mov    %rax,0x8(%rsp)
  0x00007f8ab9155ef0: mov    0x40(%rbx),%rcx
  0x00007f8ab9155ef4: jmpq   *%rcx

AHE@0x00007f8ac80ec4d8: 0xbbbbaabbb0000000 i2c: 0x00007f8ab9155fa0 c2i: 0x00007f8ab915610c c2iUV: 0x00007f8ab91560df
i2c argument handler #36 for: receiver (Ljava/lang/Class;[Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B)Ljava/lang/reflect/Constructor; (681 bytes generated)
c2i argument handler starts at 0x7f8ab915610c
  0x00007f8ab9155fa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9155fa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9155fae: cmp    %r11,%rax
  0x00007f8ab9155fb1: jbe    0x00007f8ab9155fca
  0x00007f8ab9155fb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9155fc1: cmp    %r11,%rax
  0x00007f8ab9155fc4: jb     0x00007f8ab915608d
  0x00007f8ab9155fca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9155fd4: cmp    %r11,%rax
  0x00007f8ab9155fd7: jbe    0x00007f8ab9155ff0
  0x00007f8ab9155fdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9155fe7: cmp    %r11,%rax
  0x00007f8ab9155fea: jb     0x00007f8ab915608d
  0x00007f8ab9155ff0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9155ffa: cmp    %r11,%rax
  0x00007f8ab9155ffd: jbe    0x00007f8ab9156016
  0x00007f8ab9156003: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915600d: cmp    %r11,%rax
  0x00007f8ab9156010: jb     0x00007f8ab915608d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9156016: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915601b: sub    $0x80,%rsp
  0x00007f8ab9156022: mov    %rax,0x78(%rsp)
  0x00007f8ab9156027: mov    %rcx,0x70(%rsp)
  0x00007f8ab915602c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9156031: mov    %rbx,0x60(%rsp)
  0x00007f8ab9156036: mov    %rbp,0x50(%rsp)
  0x00007f8ab915603b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9156040: mov    %rdi,0x40(%rsp)
  0x00007f8ab9156045: mov    %r8,0x38(%rsp)
  0x00007f8ab915604a: mov    %r9,0x30(%rsp)
  0x00007f8ab915604f: mov    %r10,0x28(%rsp)
  0x00007f8ab9156054: mov    %r11,0x20(%rsp)
  0x00007f8ab9156059: mov    %r12,0x18(%rsp)
  0x00007f8ab915605e: mov    %r13,0x10(%rsp)
  0x00007f8ab9156063: mov    %r14,0x8(%rsp)
  0x00007f8ab9156068: mov    %r15,(%rsp)
  0x00007f8ab915606c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9156076: movabs $0x7f8ab9156016,%rsi
  0x00007f8ab9156080: mov    %rsp,%rdx
  0x00007f8ab9156083: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156087: callq  0x00007f8aceddb9fa
  0x00007f8ab915608c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915608d: mov    %rsp,%r11
  0x00007f8ab9156090: sub    $0x20,%rsp
  0x00007f8ab9156094: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156098: push   %rax
  0x00007f8ab9156099: mov    %r11,%rax
  0x00007f8ab915609c: mov    0x50(%rbx),%r11
  0x00007f8ab91560a0: mov    0x48(%rax),%rsi
  0x00007f8ab91560a4: mov    0x40(%rax),%rdx
  0x00007f8ab91560a8: mov    0x38(%rax),%rcx
  0x00007f8ab91560ac: mov    0x30(%rax),%r8
  0x00007f8ab91560b0: mov    0x28(%rax),%r9d
  0x00007f8ab91560b4: mov    0x20(%rax),%edi
  0x00007f8ab91560b7: mov    0x18(%rax),%r13
  0x00007f8ab91560bb: mov    %r13,0x8(%rsp)
  0x00007f8ab91560c0: mov    0x10(%rax),%r13
  0x00007f8ab91560c4: mov    %r13,0x10(%rsp)
  0x00007f8ab91560c9: mov    0x8(%rax),%r13
  0x00007f8ab91560cd: mov    %r13,0x18(%rsp)
  0x00007f8ab91560d2: mov    %rbx,0x258(%r15)
  0x00007f8ab91560d9: mov    %rbx,%rax
  0x00007f8ab91560dc: jmpq   *%r11
  0x00007f8ab91560df: mov    0x8(%rsi),%ebx
  0x00007f8ab91560e2: shl    $0x3,%rbx
  0x00007f8ab91560e6: cmp    0x10(%rax),%rbx
  0x00007f8ab91560ea: mov    0x8(%rax),%rbx
  0x00007f8ab91560ee: je     0x00007f8ab91560f9
  0x00007f8ab91560f4: jmpq   0x00007f8ab9105c40
  0x00007f8ab91560f9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156101: je     0x00007f8ab91561fc
  0x00007f8ab9156107: jmpq   0x00007f8ab9105c40
  0x00007f8ab915610c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156114: je     0x00007f8ab91561fc
  0x00007f8ab915611a: mov    %rsp,%r13
  0x00007f8ab915611d: mov    (%rsp),%rax
  0x00007f8ab9156121: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156125: pushfq 
  0x00007f8ab9156126: sub    $0x8,%rsp
  0x00007f8ab915612a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915612f: sub    $0x80,%rsp
  0x00007f8ab9156136: mov    %rax,0x78(%rsp)
  0x00007f8ab915613b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9156140: mov    %rdx,0x68(%rsp)
  0x00007f8ab9156145: mov    %rbx,0x60(%rsp)
  0x00007f8ab915614a: mov    %rbp,0x50(%rsp)
  0x00007f8ab915614f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9156154: mov    %rdi,0x40(%rsp)
  0x00007f8ab9156159: mov    %r8,0x38(%rsp)
  0x00007f8ab915615e: mov    %r9,0x30(%rsp)
  0x00007f8ab9156163: mov    %r10,0x28(%rsp)
  0x00007f8ab9156168: mov    %r11,0x20(%rsp)
  0x00007f8ab915616d: mov    %r12,0x18(%rsp)
  0x00007f8ab9156172: mov    %r13,0x10(%rsp)
  0x00007f8ab9156177: mov    %r14,0x8(%rsp)
  0x00007f8ab915617c: mov    %r15,(%rsp)
  0x00007f8ab9156180: sub    $0x200,%rsp
  0x00007f8ab9156187: fxsave64 (%rsp)
  0x00007f8ab915618c: mov    %rbx,%rdi
  0x00007f8ab915618f: mov    %rax,%rsi
  0x00007f8ab9156192: callq  0x00007f8acef8bbca
  0x00007f8ab9156197: fxrstor64 (%rsp)
  0x00007f8ab915619c: add    $0x200,%rsp
  0x00007f8ab91561a3: mov    (%rsp),%r15
  0x00007f8ab91561a7: mov    0x8(%rsp),%r14
  0x00007f8ab91561ac: mov    0x10(%rsp),%r13
  0x00007f8ab91561b1: mov    0x18(%rsp),%r12
  0x00007f8ab91561b6: mov    0x20(%rsp),%r11
  0x00007f8ab91561bb: mov    0x28(%rsp),%r10
  0x00007f8ab91561c0: mov    0x30(%rsp),%r9
  0x00007f8ab91561c5: mov    0x38(%rsp),%r8
  0x00007f8ab91561ca: mov    0x40(%rsp),%rdi
  0x00007f8ab91561cf: mov    0x48(%rsp),%rsi
  0x00007f8ab91561d4: mov    0x50(%rsp),%rbp
  0x00007f8ab91561d9: mov    0x60(%rsp),%rbx
  0x00007f8ab91561de: mov    0x68(%rsp),%rdx
  0x00007f8ab91561e3: mov    0x70(%rsp),%rcx
  0x00007f8ab91561e8: mov    0x78(%rsp),%rax
  0x00007f8ab91561ed: add    $0x80,%rsp
  0x00007f8ab91561f4: add    $0x8,%rsp
  0x00007f8ab91561f8: popfq  
  0x00007f8ab91561f9: mov    %r13,%rsp
  0x00007f8ab91561fc: pop    %rax
  0x00007f8ab91561fd: mov    %rsp,%r13
  0x00007f8ab9156200: sub    $0x50,%rsp
  0x00007f8ab9156204: mov    %rax,(%rsp)
  0x00007f8ab9156208: mov    %rsi,0x48(%rsp)
  0x00007f8ab915620d: mov    %rdx,0x40(%rsp)
  0x00007f8ab9156212: mov    %rcx,0x38(%rsp)
  0x00007f8ab9156217: mov    %r8,0x30(%rsp)
  0x00007f8ab915621c: mov    %r9d,0x28(%rsp)
  0x00007f8ab9156221: mov    %edi,0x20(%rsp)
  0x00007f8ab9156225: mov    0x50(%rsp),%rax
  0x00007f8ab915622a: mov    %rax,0x18(%rsp)
  0x00007f8ab915622f: mov    0x58(%rsp),%rax
  0x00007f8ab9156234: mov    %rax,0x10(%rsp)
  0x00007f8ab9156239: mov    0x60(%rsp),%rax
  0x00007f8ab915623e: mov    %rax,0x8(%rsp)
  0x00007f8ab9156243: mov    0x40(%rbx),%rcx
  0x00007f8ab9156247: jmpq   *%rcx

AHE@0x00007f8ac80ec520: 0xbbbaa000 i2c: 0x00007f8ab9156320 c2i: 0x00007f8ab915646a c2iUV: 0x00007f8ab915643d
i2c argument handler #37 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (613 bytes generated)
c2i argument handler starts at 0x7f8ab915646a
  0x00007f8ab9156320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9156324: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915632e: cmp    %r11,%rax
  0x00007f8ab9156331: jbe    0x00007f8ab915634a
  0x00007f8ab9156337: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9156341: cmp    %r11,%rax
  0x00007f8ab9156344: jb     0x00007f8ab915640d
  0x00007f8ab915634a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9156354: cmp    %r11,%rax
  0x00007f8ab9156357: jbe    0x00007f8ab9156370
  0x00007f8ab915635d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9156367: cmp    %r11,%rax
  0x00007f8ab915636a: jb     0x00007f8ab915640d
  0x00007f8ab9156370: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915637a: cmp    %r11,%rax
  0x00007f8ab915637d: jbe    0x00007f8ab9156396
  0x00007f8ab9156383: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915638d: cmp    %r11,%rax
  0x00007f8ab9156390: jb     0x00007f8ab915640d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9156396: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915639b: sub    $0x80,%rsp
  0x00007f8ab91563a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91563a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91563ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91563b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91563b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91563bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91563c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91563c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91563ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91563cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91563d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91563d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91563de: mov    %r13,0x10(%rsp)
  0x00007f8ab91563e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91563e8: mov    %r15,(%rsp)
  0x00007f8ab91563ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91563f6: movabs $0x7f8ab9156396,%rsi
  0x00007f8ab9156400: mov    %rsp,%rdx
  0x00007f8ab9156403: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156407: callq  0x00007f8aceddb9fa
  0x00007f8ab915640c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915640d: mov    %rsp,%r11
  0x00007f8ab9156410: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156414: push   %rax
  0x00007f8ab9156415: mov    %r11,%rax
  0x00007f8ab9156418: mov    0x50(%rbx),%r11
  0x00007f8ab915641c: mov    0x28(%rax),%rsi
  0x00007f8ab9156420: mov    0x20(%rax),%rdx
  0x00007f8ab9156424: mov    0x18(%rax),%rcx
  0x00007f8ab9156428: mov    0x10(%rax),%r8d
  0x00007f8ab915642c: mov    0x8(%rax),%r9d
  0x00007f8ab9156430: mov    %rbx,0x258(%r15)
  0x00007f8ab9156437: mov    %rbx,%rax
  0x00007f8ab915643a: jmpq   *%r11
  0x00007f8ab915643d: mov    0x8(%rsi),%ebx
  0x00007f8ab9156440: shl    $0x3,%rbx
  0x00007f8ab9156444: cmp    0x10(%rax),%rbx
  0x00007f8ab9156448: mov    0x8(%rax),%rbx
  0x00007f8ab915644c: je     0x00007f8ab9156457
  0x00007f8ab9156452: jmpq   0x00007f8ab9105c40
  0x00007f8ab9156457: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915645f: je     0x00007f8ab915655a
  0x00007f8ab9156465: jmpq   0x00007f8ab9105c40
  0x00007f8ab915646a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156472: je     0x00007f8ab915655a
  0x00007f8ab9156478: mov    %rsp,%r13
  0x00007f8ab915647b: mov    (%rsp),%rax
  0x00007f8ab915647f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156483: pushfq 
  0x00007f8ab9156484: sub    $0x8,%rsp
  0x00007f8ab9156488: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915648d: sub    $0x80,%rsp
  0x00007f8ab9156494: mov    %rax,0x78(%rsp)
  0x00007f8ab9156499: mov    %rcx,0x70(%rsp)
  0x00007f8ab915649e: mov    %rdx,0x68(%rsp)
  0x00007f8ab91564a3: mov    %rbx,0x60(%rsp)
  0x00007f8ab91564a8: mov    %rbp,0x50(%rsp)
  0x00007f8ab91564ad: mov    %rsi,0x48(%rsp)
  0x00007f8ab91564b2: mov    %rdi,0x40(%rsp)
  0x00007f8ab91564b7: mov    %r8,0x38(%rsp)
  0x00007f8ab91564bc: mov    %r9,0x30(%rsp)
  0x00007f8ab91564c1: mov    %r10,0x28(%rsp)
  0x00007f8ab91564c6: mov    %r11,0x20(%rsp)
  0x00007f8ab91564cb: mov    %r12,0x18(%rsp)
  0x00007f8ab91564d0: mov    %r13,0x10(%rsp)
  0x00007f8ab91564d5: mov    %r14,0x8(%rsp)
  0x00007f8ab91564da: mov    %r15,(%rsp)
  0x00007f8ab91564de: sub    $0x200,%rsp
  0x00007f8ab91564e5: fxsave64 (%rsp)
  0x00007f8ab91564ea: mov    %rbx,%rdi
  0x00007f8ab91564ed: mov    %rax,%rsi
  0x00007f8ab91564f0: callq  0x00007f8acef8bbca
  0x00007f8ab91564f5: fxrstor64 (%rsp)
  0x00007f8ab91564fa: add    $0x200,%rsp
  0x00007f8ab9156501: mov    (%rsp),%r15
  0x00007f8ab9156505: mov    0x8(%rsp),%r14
  0x00007f8ab915650a: mov    0x10(%rsp),%r13
  0x00007f8ab915650f: mov    0x18(%rsp),%r12
  0x00007f8ab9156514: mov    0x20(%rsp),%r11
  0x00007f8ab9156519: mov    0x28(%rsp),%r10
  0x00007f8ab915651e: mov    0x30(%rsp),%r9
  0x00007f8ab9156523: mov    0x38(%rsp),%r8
  0x00007f8ab9156528: mov    0x40(%rsp),%rdi
  0x00007f8ab915652d: mov    0x48(%rsp),%rsi
  0x00007f8ab9156532: mov    0x50(%rsp),%rbp
  0x00007f8ab9156537: mov    0x60(%rsp),%rbx
  0x00007f8ab915653c: mov    0x68(%rsp),%rdx
  0x00007f8ab9156541: mov    0x70(%rsp),%rcx
  0x00007f8ab9156546: mov    0x78(%rsp),%rax
  0x00007f8ab915654b: add    $0x80,%rsp
  0x00007f8ab9156552: add    $0x8,%rsp
  0x00007f8ab9156556: popfq  
  0x00007f8ab9156557: mov    %r13,%rsp
  0x00007f8ab915655a: pop    %rax
  0x00007f8ab915655b: mov    %rsp,%r13
  0x00007f8ab915655e: sub    $0x30,%rsp
  0x00007f8ab9156562: mov    %rax,(%rsp)
  0x00007f8ab9156566: mov    %rsi,0x28(%rsp)
  0x00007f8ab915656b: mov    %rdx,0x20(%rsp)
  0x00007f8ab9156570: mov    %rcx,0x18(%rsp)
  0x00007f8ab9156575: mov    %r8d,0x10(%rsp)
  0x00007f8ab915657a: mov    %r9d,0x8(%rsp)
  0x00007f8ab915657f: mov    0x40(%rbx),%rcx
  0x00007f8ab9156583: jmpq   *%rcx

AHE@0x00007f8ac80ec568: 0xaaa00000 i2c: 0x00007f8ab9156660 c2i: 0x00007f8ab915679f c2iUV: 0x00007f8ab9156772
i2c argument handler #38 for: static (III)V (589 bytes generated)
c2i argument handler starts at 0x7f8ab915679f
  0x00007f8ab9156660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9156664: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915666e: cmp    %r11,%rax
  0x00007f8ab9156671: jbe    0x00007f8ab915668a
  0x00007f8ab9156677: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9156681: cmp    %r11,%rax
  0x00007f8ab9156684: jb     0x00007f8ab915674d
  0x00007f8ab915668a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9156694: cmp    %r11,%rax
  0x00007f8ab9156697: jbe    0x00007f8ab91566b0
  0x00007f8ab915669d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91566a7: cmp    %r11,%rax
  0x00007f8ab91566aa: jb     0x00007f8ab915674d
  0x00007f8ab91566b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91566ba: cmp    %r11,%rax
  0x00007f8ab91566bd: jbe    0x00007f8ab91566d6
  0x00007f8ab91566c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91566cd: cmp    %r11,%rax
  0x00007f8ab91566d0: jb     0x00007f8ab915674d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91566d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91566db: sub    $0x80,%rsp
  0x00007f8ab91566e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91566e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91566ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91566f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91566f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91566fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9156700: mov    %rdi,0x40(%rsp)
  0x00007f8ab9156705: mov    %r8,0x38(%rsp)
  0x00007f8ab915670a: mov    %r9,0x30(%rsp)
  0x00007f8ab915670f: mov    %r10,0x28(%rsp)
  0x00007f8ab9156714: mov    %r11,0x20(%rsp)
  0x00007f8ab9156719: mov    %r12,0x18(%rsp)
  0x00007f8ab915671e: mov    %r13,0x10(%rsp)
  0x00007f8ab9156723: mov    %r14,0x8(%rsp)
  0x00007f8ab9156728: mov    %r15,(%rsp)
  0x00007f8ab915672c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9156736: movabs $0x7f8ab91566d6,%rsi
  0x00007f8ab9156740: mov    %rsp,%rdx
  0x00007f8ab9156743: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156747: callq  0x00007f8aceddb9fa
  0x00007f8ab915674c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915674d: mov    %rsp,%r11
  0x00007f8ab9156750: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156754: push   %rax
  0x00007f8ab9156755: mov    %r11,%rax
  0x00007f8ab9156758: mov    0x50(%rbx),%r11
  0x00007f8ab915675c: mov    0x18(%rax),%esi
  0x00007f8ab915675f: mov    0x10(%rax),%edx
  0x00007f8ab9156762: mov    0x8(%rax),%ecx
  0x00007f8ab9156765: mov    %rbx,0x258(%r15)
  0x00007f8ab915676c: mov    %rbx,%rax
  0x00007f8ab915676f: jmpq   *%r11
  0x00007f8ab9156772: mov    0x8(%rsi),%ebx
  0x00007f8ab9156775: shl    $0x3,%rbx
  0x00007f8ab9156779: cmp    0x10(%rax),%rbx
  0x00007f8ab915677d: mov    0x8(%rax),%rbx
  0x00007f8ab9156781: je     0x00007f8ab915678c
  0x00007f8ab9156787: jmpq   0x00007f8ab9105c40
  0x00007f8ab915678c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156794: je     0x00007f8ab915688f
  0x00007f8ab915679a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915679f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91567a7: je     0x00007f8ab915688f
  0x00007f8ab91567ad: mov    %rsp,%r13
  0x00007f8ab91567b0: mov    (%rsp),%rax
  0x00007f8ab91567b4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91567b8: pushfq 
  0x00007f8ab91567b9: sub    $0x8,%rsp
  0x00007f8ab91567bd: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91567c2: sub    $0x80,%rsp
  0x00007f8ab91567c9: mov    %rax,0x78(%rsp)
  0x00007f8ab91567ce: mov    %rcx,0x70(%rsp)
  0x00007f8ab91567d3: mov    %rdx,0x68(%rsp)
  0x00007f8ab91567d8: mov    %rbx,0x60(%rsp)
  0x00007f8ab91567dd: mov    %rbp,0x50(%rsp)
  0x00007f8ab91567e2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91567e7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91567ec: mov    %r8,0x38(%rsp)
  0x00007f8ab91567f1: mov    %r9,0x30(%rsp)
  0x00007f8ab91567f6: mov    %r10,0x28(%rsp)
  0x00007f8ab91567fb: mov    %r11,0x20(%rsp)
  0x00007f8ab9156800: mov    %r12,0x18(%rsp)
  0x00007f8ab9156805: mov    %r13,0x10(%rsp)
  0x00007f8ab915680a: mov    %r14,0x8(%rsp)
  0x00007f8ab915680f: mov    %r15,(%rsp)
  0x00007f8ab9156813: sub    $0x200,%rsp
  0x00007f8ab915681a: fxsave64 (%rsp)
  0x00007f8ab915681f: mov    %rbx,%rdi
  0x00007f8ab9156822: mov    %rax,%rsi
  0x00007f8ab9156825: callq  0x00007f8acef8bbca
  0x00007f8ab915682a: fxrstor64 (%rsp)
  0x00007f8ab915682f: add    $0x200,%rsp
  0x00007f8ab9156836: mov    (%rsp),%r15
  0x00007f8ab915683a: mov    0x8(%rsp),%r14
  0x00007f8ab915683f: mov    0x10(%rsp),%r13
  0x00007f8ab9156844: mov    0x18(%rsp),%r12
  0x00007f8ab9156849: mov    0x20(%rsp),%r11
  0x00007f8ab915684e: mov    0x28(%rsp),%r10
  0x00007f8ab9156853: mov    0x30(%rsp),%r9
  0x00007f8ab9156858: mov    0x38(%rsp),%r8
  0x00007f8ab915685d: mov    0x40(%rsp),%rdi
  0x00007f8ab9156862: mov    0x48(%rsp),%rsi
  0x00007f8ab9156867: mov    0x50(%rsp),%rbp
  0x00007f8ab915686c: mov    0x60(%rsp),%rbx
  0x00007f8ab9156871: mov    0x68(%rsp),%rdx
  0x00007f8ab9156876: mov    0x70(%rsp),%rcx
  0x00007f8ab915687b: mov    0x78(%rsp),%rax
  0x00007f8ab9156880: add    $0x80,%rsp
  0x00007f8ab9156887: add    $0x8,%rsp
  0x00007f8ab915688b: popfq  
  0x00007f8ab915688c: mov    %r13,%rsp
  0x00007f8ab915688f: pop    %rax
  0x00007f8ab9156890: mov    %rsp,%r13
  0x00007f8ab9156893: sub    $0x20,%rsp
  0x00007f8ab9156897: mov    %rax,(%rsp)
  0x00007f8ab915689b: mov    %esi,0x18(%rsp)
  0x00007f8ab915689f: mov    %edx,0x10(%rsp)
  0x00007f8ab91568a3: mov    %ecx,0x8(%rsp)
  0x00007f8ab91568a7: mov    0x40(%rbx),%rcx
  0x00007f8ab91568ab: jmpq   *%rcx

AHE@0x00007f8ac80ec5b0: 0xab000000 i2c: 0x00007f8ab9156960 c2i: 0x00007f8ab9156a9d c2iUV: 0x00007f8ab9156a70
i2c argument handler #39 for: static (ILjava/lang/Object;)Ljava/util/List; (584 bytes generated)
c2i argument handler starts at 0x7f8ab9156a9d
  0x00007f8ab9156960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9156964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915696e: cmp    %r11,%rax
  0x00007f8ab9156971: jbe    0x00007f8ab915698a
  0x00007f8ab9156977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9156981: cmp    %r11,%rax
  0x00007f8ab9156984: jb     0x00007f8ab9156a4d
  0x00007f8ab915698a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9156994: cmp    %r11,%rax
  0x00007f8ab9156997: jbe    0x00007f8ab91569b0
  0x00007f8ab915699d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91569a7: cmp    %r11,%rax
  0x00007f8ab91569aa: jb     0x00007f8ab9156a4d
  0x00007f8ab91569b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91569ba: cmp    %r11,%rax
  0x00007f8ab91569bd: jbe    0x00007f8ab91569d6
  0x00007f8ab91569c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91569cd: cmp    %r11,%rax
  0x00007f8ab91569d0: jb     0x00007f8ab9156a4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91569d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91569db: sub    $0x80,%rsp
  0x00007f8ab91569e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91569e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91569ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91569f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91569f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91569fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9156a00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9156a05: mov    %r8,0x38(%rsp)
  0x00007f8ab9156a0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9156a0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9156a14: mov    %r11,0x20(%rsp)
  0x00007f8ab9156a19: mov    %r12,0x18(%rsp)
  0x00007f8ab9156a1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9156a23: mov    %r14,0x8(%rsp)
  0x00007f8ab9156a28: mov    %r15,(%rsp)
  0x00007f8ab9156a2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9156a36: movabs $0x7f8ab91569d6,%rsi
  0x00007f8ab9156a40: mov    %rsp,%rdx
  0x00007f8ab9156a43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156a47: callq  0x00007f8aceddb9fa
  0x00007f8ab9156a4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9156a4d: mov    %rsp,%r11
  0x00007f8ab9156a50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156a54: push   %rax
  0x00007f8ab9156a55: mov    %r11,%rax
  0x00007f8ab9156a58: mov    0x50(%rbx),%r11
  0x00007f8ab9156a5c: mov    0x10(%rax),%esi
  0x00007f8ab9156a5f: mov    0x8(%rax),%rdx
  0x00007f8ab9156a63: mov    %rbx,0x258(%r15)
  0x00007f8ab9156a6a: mov    %rbx,%rax
  0x00007f8ab9156a6d: jmpq   *%r11
  0x00007f8ab9156a70: mov    0x8(%rsi),%ebx
  0x00007f8ab9156a73: shl    $0x3,%rbx
  0x00007f8ab9156a77: cmp    0x10(%rax),%rbx
  0x00007f8ab9156a7b: mov    0x8(%rax),%rbx
  0x00007f8ab9156a7f: je     0x00007f8ab9156a8a
  0x00007f8ab9156a85: jmpq   0x00007f8ab9105c40
  0x00007f8ab9156a8a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156a92: je     0x00007f8ab9156b8d
  0x00007f8ab9156a98: jmpq   0x00007f8ab9105c40
  0x00007f8ab9156a9d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156aa5: je     0x00007f8ab9156b8d
  0x00007f8ab9156aab: mov    %rsp,%r13
  0x00007f8ab9156aae: mov    (%rsp),%rax
  0x00007f8ab9156ab2: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156ab6: pushfq 
  0x00007f8ab9156ab7: sub    $0x8,%rsp
  0x00007f8ab9156abb: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9156ac0: sub    $0x80,%rsp
  0x00007f8ab9156ac7: mov    %rax,0x78(%rsp)
  0x00007f8ab9156acc: mov    %rcx,0x70(%rsp)
  0x00007f8ab9156ad1: mov    %rdx,0x68(%rsp)
  0x00007f8ab9156ad6: mov    %rbx,0x60(%rsp)
  0x00007f8ab9156adb: mov    %rbp,0x50(%rsp)
  0x00007f8ab9156ae0: mov    %rsi,0x48(%rsp)
  0x00007f8ab9156ae5: mov    %rdi,0x40(%rsp)
  0x00007f8ab9156aea: mov    %r8,0x38(%rsp)
  0x00007f8ab9156aef: mov    %r9,0x30(%rsp)
  0x00007f8ab9156af4: mov    %r10,0x28(%rsp)
  0x00007f8ab9156af9: mov    %r11,0x20(%rsp)
  0x00007f8ab9156afe: mov    %r12,0x18(%rsp)
  0x00007f8ab9156b03: mov    %r13,0x10(%rsp)
  0x00007f8ab9156b08: mov    %r14,0x8(%rsp)
  0x00007f8ab9156b0d: mov    %r15,(%rsp)
  0x00007f8ab9156b11: sub    $0x200,%rsp
  0x00007f8ab9156b18: fxsave64 (%rsp)
  0x00007f8ab9156b1d: mov    %rbx,%rdi
  0x00007f8ab9156b20: mov    %rax,%rsi
  0x00007f8ab9156b23: callq  0x00007f8acef8bbca
  0x00007f8ab9156b28: fxrstor64 (%rsp)
  0x00007f8ab9156b2d: add    $0x200,%rsp
  0x00007f8ab9156b34: mov    (%rsp),%r15
  0x00007f8ab9156b38: mov    0x8(%rsp),%r14
  0x00007f8ab9156b3d: mov    0x10(%rsp),%r13
  0x00007f8ab9156b42: mov    0x18(%rsp),%r12
  0x00007f8ab9156b47: mov    0x20(%rsp),%r11
  0x00007f8ab9156b4c: mov    0x28(%rsp),%r10
  0x00007f8ab9156b51: mov    0x30(%rsp),%r9
  0x00007f8ab9156b56: mov    0x38(%rsp),%r8
  0x00007f8ab9156b5b: mov    0x40(%rsp),%rdi
  0x00007f8ab9156b60: mov    0x48(%rsp),%rsi
  0x00007f8ab9156b65: mov    0x50(%rsp),%rbp
  0x00007f8ab9156b6a: mov    0x60(%rsp),%rbx
  0x00007f8ab9156b6f: mov    0x68(%rsp),%rdx
  0x00007f8ab9156b74: mov    0x70(%rsp),%rcx
  0x00007f8ab9156b79: mov    0x78(%rsp),%rax
  0x00007f8ab9156b7e: add    $0x80,%rsp
  0x00007f8ab9156b85: add    $0x8,%rsp
  0x00007f8ab9156b89: popfq  
  0x00007f8ab9156b8a: mov    %r13,%rsp
  0x00007f8ab9156b8d: pop    %rax
  0x00007f8ab9156b8e: mov    %rsp,%r13
  0x00007f8ab9156b91: sub    $0x20,%rsp
  0x00007f8ab9156b95: mov    %rax,(%rsp)
  0x00007f8ab9156b99: mov    %esi,0x10(%rsp)
  0x00007f8ab9156b9d: mov    %rdx,0x8(%rsp)
  0x00007f8ab9156ba2: mov    0x40(%rbx),%rcx
  0x00007f8ab9156ba6: jmpq   *%rcx

AHE@0x00007f8ac80ec5f8: 0xbabbb000 i2c: 0x00007f8ab9156c60 c2i: 0x00007f8ab9156da9 c2iUV: 0x00007f8ab9156d7c
i2c argument handler #40 for: receiver (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode; (611 bytes generated)
c2i argument handler starts at 0x7f8ab9156da9
  0x00007f8ab9156c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9156c64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9156c6e: cmp    %r11,%rax
  0x00007f8ab9156c71: jbe    0x00007f8ab9156c8a
  0x00007f8ab9156c77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9156c81: cmp    %r11,%rax
  0x00007f8ab9156c84: jb     0x00007f8ab9156d4d
  0x00007f8ab9156c8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9156c94: cmp    %r11,%rax
  0x00007f8ab9156c97: jbe    0x00007f8ab9156cb0
  0x00007f8ab9156c9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9156ca7: cmp    %r11,%rax
  0x00007f8ab9156caa: jb     0x00007f8ab9156d4d
  0x00007f8ab9156cb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9156cba: cmp    %r11,%rax
  0x00007f8ab9156cbd: jbe    0x00007f8ab9156cd6
  0x00007f8ab9156cc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9156ccd: cmp    %r11,%rax
  0x00007f8ab9156cd0: jb     0x00007f8ab9156d4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9156cd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9156cdb: sub    $0x80,%rsp
  0x00007f8ab9156ce2: mov    %rax,0x78(%rsp)
  0x00007f8ab9156ce7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9156cec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9156cf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9156cf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9156cfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9156d00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9156d05: mov    %r8,0x38(%rsp)
  0x00007f8ab9156d0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9156d0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9156d14: mov    %r11,0x20(%rsp)
  0x00007f8ab9156d19: mov    %r12,0x18(%rsp)
  0x00007f8ab9156d1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9156d23: mov    %r14,0x8(%rsp)
  0x00007f8ab9156d28: mov    %r15,(%rsp)
  0x00007f8ab9156d2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9156d36: movabs $0x7f8ab9156cd6,%rsi
  0x00007f8ab9156d40: mov    %rsp,%rdx
  0x00007f8ab9156d43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156d47: callq  0x00007f8aceddb9fa
  0x00007f8ab9156d4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9156d4d: mov    %rsp,%r11
  0x00007f8ab9156d50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156d54: push   %rax
  0x00007f8ab9156d55: mov    %r11,%rax
  0x00007f8ab9156d58: mov    0x50(%rbx),%r11
  0x00007f8ab9156d5c: mov    0x28(%rax),%rsi
  0x00007f8ab9156d60: mov    0x20(%rax),%edx
  0x00007f8ab9156d63: mov    0x18(%rax),%rcx
  0x00007f8ab9156d67: mov    0x10(%rax),%r8
  0x00007f8ab9156d6b: mov    0x8(%rax),%r9
  0x00007f8ab9156d6f: mov    %rbx,0x258(%r15)
  0x00007f8ab9156d76: mov    %rbx,%rax
  0x00007f8ab9156d79: jmpq   *%r11
  0x00007f8ab9156d7c: mov    0x8(%rsi),%ebx
  0x00007f8ab9156d7f: shl    $0x3,%rbx
  0x00007f8ab9156d83: cmp    0x10(%rax),%rbx
  0x00007f8ab9156d87: mov    0x8(%rax),%rbx
  0x00007f8ab9156d8b: je     0x00007f8ab9156d96
  0x00007f8ab9156d91: jmpq   0x00007f8ab9105c40
  0x00007f8ab9156d96: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156d9e: je     0x00007f8ab9156e99
  0x00007f8ab9156da4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9156da9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9156db1: je     0x00007f8ab9156e99
  0x00007f8ab9156db7: mov    %rsp,%r13
  0x00007f8ab9156dba: mov    (%rsp),%rax
  0x00007f8ab9156dbe: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9156dc2: pushfq 
  0x00007f8ab9156dc3: sub    $0x8,%rsp
  0x00007f8ab9156dc7: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9156dcc: sub    $0x80,%rsp
  0x00007f8ab9156dd3: mov    %rax,0x78(%rsp)
  0x00007f8ab9156dd8: mov    %rcx,0x70(%rsp)
  0x00007f8ab9156ddd: mov    %rdx,0x68(%rsp)
  0x00007f8ab9156de2: mov    %rbx,0x60(%rsp)
  0x00007f8ab9156de7: mov    %rbp,0x50(%rsp)
  0x00007f8ab9156dec: mov    %rsi,0x48(%rsp)
  0x00007f8ab9156df1: mov    %rdi,0x40(%rsp)
  0x00007f8ab9156df6: mov    %r8,0x38(%rsp)
  0x00007f8ab9156dfb: mov    %r9,0x30(%rsp)
  0x00007f8ab9156e00: mov    %r10,0x28(%rsp)
  0x00007f8ab9156e05: mov    %r11,0x20(%rsp)
  0x00007f8ab9156e0a: mov    %r12,0x18(%rsp)
  0x00007f8ab9156e0f: mov    %r13,0x10(%rsp)
  0x00007f8ab9156e14: mov    %r14,0x8(%rsp)
  0x00007f8ab9156e19: mov    %r15,(%rsp)
  0x00007f8ab9156e1d: sub    $0x200,%rsp
  0x00007f8ab9156e24: fxsave64 (%rsp)
  0x00007f8ab9156e29: mov    %rbx,%rdi
  0x00007f8ab9156e2c: mov    %rax,%rsi
  0x00007f8ab9156e2f: callq  0x00007f8acef8bbca
  0x00007f8ab9156e34: fxrstor64 (%rsp)
  0x00007f8ab9156e39: add    $0x200,%rsp
  0x00007f8ab9156e40: mov    (%rsp),%r15
  0x00007f8ab9156e44: mov    0x8(%rsp),%r14
  0x00007f8ab9156e49: mov    0x10(%rsp),%r13
  0x00007f8ab9156e4e: mov    0x18(%rsp),%r12
  0x00007f8ab9156e53: mov    0x20(%rsp),%r11
  0x00007f8ab9156e58: mov    0x28(%rsp),%r10
  0x00007f8ab9156e5d: mov    0x30(%rsp),%r9
  0x00007f8ab9156e62: mov    0x38(%rsp),%r8
  0x00007f8ab9156e67: mov    0x40(%rsp),%rdi
  0x00007f8ab9156e6c: mov    0x48(%rsp),%rsi
  0x00007f8ab9156e71: mov    0x50(%rsp),%rbp
  0x00007f8ab9156e76: mov    0x60(%rsp),%rbx
  0x00007f8ab9156e7b: mov    0x68(%rsp),%rdx
  0x00007f8ab9156e80: mov    0x70(%rsp),%rcx
  0x00007f8ab9156e85: mov    0x78(%rsp),%rax
  0x00007f8ab9156e8a: add    $0x80,%rsp
  0x00007f8ab9156e91: add    $0x8,%rsp
  0x00007f8ab9156e95: popfq  
  0x00007f8ab9156e96: mov    %r13,%rsp
  0x00007f8ab9156e99: pop    %rax
  0x00007f8ab9156e9a: mov    %rsp,%r13
  0x00007f8ab9156e9d: sub    $0x30,%rsp
  0x00007f8ab9156ea1: mov    %rax,(%rsp)
  0x00007f8ab9156ea5: mov    %rsi,0x28(%rsp)
  0x00007f8ab9156eaa: mov    %edx,0x20(%rsp)
  0x00007f8ab9156eae: mov    %rcx,0x18(%rsp)
  0x00007f8ab9156eb3: mov    %r8,0x10(%rsp)
  0x00007f8ab9156eb8: mov    %r9,0x8(%rsp)
  0x00007f8ab9156ebd: mov    0x40(%rbx),%rcx
  0x00007f8ab9156ec1: jmpq   *%rcx

AHE@0x00007f8ac80ec640: 0xbabbaa00 i2c: 0x00007f8ab9156fa0 c2i: 0x00007f8ab91570ec c2iUV: 0x00007f8ab91570bf
i2c argument handler #41 for: receiver (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node; (618 bytes generated)
c2i argument handler starts at 0x7f8ab91570ec
  0x00007f8ab9156fa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9156fa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9156fae: cmp    %r11,%rax
  0x00007f8ab9156fb1: jbe    0x00007f8ab9156fca
  0x00007f8ab9156fb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9156fc1: cmp    %r11,%rax
  0x00007f8ab9156fc4: jb     0x00007f8ab915708d
  0x00007f8ab9156fca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9156fd4: cmp    %r11,%rax
  0x00007f8ab9156fd7: jbe    0x00007f8ab9156ff0
  0x00007f8ab9156fdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9156fe7: cmp    %r11,%rax
  0x00007f8ab9156fea: jb     0x00007f8ab915708d
  0x00007f8ab9156ff0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9156ffa: cmp    %r11,%rax
  0x00007f8ab9156ffd: jbe    0x00007f8ab9157016
  0x00007f8ab9157003: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915700d: cmp    %r11,%rax
  0x00007f8ab9157010: jb     0x00007f8ab915708d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9157016: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915701b: sub    $0x80,%rsp
  0x00007f8ab9157022: mov    %rax,0x78(%rsp)
  0x00007f8ab9157027: mov    %rcx,0x70(%rsp)
  0x00007f8ab915702c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157031: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157036: mov    %rbp,0x50(%rsp)
  0x00007f8ab915703b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157040: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157045: mov    %r8,0x38(%rsp)
  0x00007f8ab915704a: mov    %r9,0x30(%rsp)
  0x00007f8ab915704f: mov    %r10,0x28(%rsp)
  0x00007f8ab9157054: mov    %r11,0x20(%rsp)
  0x00007f8ab9157059: mov    %r12,0x18(%rsp)
  0x00007f8ab915705e: mov    %r13,0x10(%rsp)
  0x00007f8ab9157063: mov    %r14,0x8(%rsp)
  0x00007f8ab9157068: mov    %r15,(%rsp)
  0x00007f8ab915706c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9157076: movabs $0x7f8ab9157016,%rsi
  0x00007f8ab9157080: mov    %rsp,%rdx
  0x00007f8ab9157083: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157087: callq  0x00007f8aceddb9fa
  0x00007f8ab915708c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915708d: mov    %rsp,%r11
  0x00007f8ab9157090: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157094: push   %rax
  0x00007f8ab9157095: mov    %r11,%rax
  0x00007f8ab9157098: mov    0x50(%rbx),%r11
  0x00007f8ab915709c: mov    0x30(%rax),%rsi
  0x00007f8ab91570a0: mov    0x28(%rax),%edx
  0x00007f8ab91570a3: mov    0x20(%rax),%rcx
  0x00007f8ab91570a7: mov    0x18(%rax),%r8
  0x00007f8ab91570ab: mov    0x10(%rax),%r9d
  0x00007f8ab91570af: mov    0x8(%rax),%edi
  0x00007f8ab91570b2: mov    %rbx,0x258(%r15)
  0x00007f8ab91570b9: mov    %rbx,%rax
  0x00007f8ab91570bc: jmpq   *%r11
  0x00007f8ab91570bf: mov    0x8(%rsi),%ebx
  0x00007f8ab91570c2: shl    $0x3,%rbx
  0x00007f8ab91570c6: cmp    0x10(%rax),%rbx
  0x00007f8ab91570ca: mov    0x8(%rax),%rbx
  0x00007f8ab91570ce: je     0x00007f8ab91570d9
  0x00007f8ab91570d4: jmpq   0x00007f8ab9105c40
  0x00007f8ab91570d9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91570e1: je     0x00007f8ab91571dc
  0x00007f8ab91570e7: jmpq   0x00007f8ab9105c40
  0x00007f8ab91570ec: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91570f4: je     0x00007f8ab91571dc
  0x00007f8ab91570fa: mov    %rsp,%r13
  0x00007f8ab91570fd: mov    (%rsp),%rax
  0x00007f8ab9157101: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157105: pushfq 
  0x00007f8ab9157106: sub    $0x8,%rsp
  0x00007f8ab915710a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915710f: sub    $0x80,%rsp
  0x00007f8ab9157116: mov    %rax,0x78(%rsp)
  0x00007f8ab915711b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9157120: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157125: mov    %rbx,0x60(%rsp)
  0x00007f8ab915712a: mov    %rbp,0x50(%rsp)
  0x00007f8ab915712f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157134: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157139: mov    %r8,0x38(%rsp)
  0x00007f8ab915713e: mov    %r9,0x30(%rsp)
  0x00007f8ab9157143: mov    %r10,0x28(%rsp)
  0x00007f8ab9157148: mov    %r11,0x20(%rsp)
  0x00007f8ab915714d: mov    %r12,0x18(%rsp)
  0x00007f8ab9157152: mov    %r13,0x10(%rsp)
  0x00007f8ab9157157: mov    %r14,0x8(%rsp)
  0x00007f8ab915715c: mov    %r15,(%rsp)
  0x00007f8ab9157160: sub    $0x200,%rsp
  0x00007f8ab9157167: fxsave64 (%rsp)
  0x00007f8ab915716c: mov    %rbx,%rdi
  0x00007f8ab915716f: mov    %rax,%rsi
  0x00007f8ab9157172: callq  0x00007f8acef8bbca
  0x00007f8ab9157177: fxrstor64 (%rsp)
  0x00007f8ab915717c: add    $0x200,%rsp
  0x00007f8ab9157183: mov    (%rsp),%r15
  0x00007f8ab9157187: mov    0x8(%rsp),%r14
  0x00007f8ab915718c: mov    0x10(%rsp),%r13
  0x00007f8ab9157191: mov    0x18(%rsp),%r12
  0x00007f8ab9157196: mov    0x20(%rsp),%r11
  0x00007f8ab915719b: mov    0x28(%rsp),%r10
  0x00007f8ab91571a0: mov    0x30(%rsp),%r9
  0x00007f8ab91571a5: mov    0x38(%rsp),%r8
  0x00007f8ab91571aa: mov    0x40(%rsp),%rdi
  0x00007f8ab91571af: mov    0x48(%rsp),%rsi
  0x00007f8ab91571b4: mov    0x50(%rsp),%rbp
  0x00007f8ab91571b9: mov    0x60(%rsp),%rbx
  0x00007f8ab91571be: mov    0x68(%rsp),%rdx
  0x00007f8ab91571c3: mov    0x70(%rsp),%rcx
  0x00007f8ab91571c8: mov    0x78(%rsp),%rax
  0x00007f8ab91571cd: add    $0x80,%rsp
  0x00007f8ab91571d4: add    $0x8,%rsp
  0x00007f8ab91571d8: popfq  
  0x00007f8ab91571d9: mov    %r13,%rsp
  0x00007f8ab91571dc: pop    %rax
  0x00007f8ab91571dd: mov    %rsp,%r13
  0x00007f8ab91571e0: sub    $0x40,%rsp
  0x00007f8ab91571e4: mov    %rax,(%rsp)
  0x00007f8ab91571e8: mov    %rsi,0x30(%rsp)
  0x00007f8ab91571ed: mov    %edx,0x28(%rsp)
  0x00007f8ab91571f1: mov    %rcx,0x20(%rsp)
  0x00007f8ab91571f6: mov    %r8,0x18(%rsp)
  0x00007f8ab91571fb: mov    %r9d,0x10(%rsp)
  0x00007f8ab9157200: mov    %edi,0x8(%rsp)
  0x00007f8ab9157204: mov    0x40(%rbx),%rcx
  0x00007f8ab9157208: jmpq   *%rcx

AHE@0x00007f8ac80ec688: 0xba600000 i2c: 0x00007f8ab91572e0 c2i: 0x00007f8ab9157422 c2iUV: 0x00007f8ab91573f5
i2c argument handler #42 for: receiver (IF)V (595 bytes generated)
c2i argument handler starts at 0x7f8ab9157422
  0x00007f8ab91572e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91572e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91572ee: cmp    %r11,%rax
  0x00007f8ab91572f1: jbe    0x00007f8ab915730a
  0x00007f8ab91572f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9157301: cmp    %r11,%rax
  0x00007f8ab9157304: jb     0x00007f8ab91573cd
  0x00007f8ab915730a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9157314: cmp    %r11,%rax
  0x00007f8ab9157317: jbe    0x00007f8ab9157330
  0x00007f8ab915731d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9157327: cmp    %r11,%rax
  0x00007f8ab915732a: jb     0x00007f8ab91573cd
  0x00007f8ab9157330: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915733a: cmp    %r11,%rax
  0x00007f8ab915733d: jbe    0x00007f8ab9157356
  0x00007f8ab9157343: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915734d: cmp    %r11,%rax
  0x00007f8ab9157350: jb     0x00007f8ab91573cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9157356: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915735b: sub    $0x80,%rsp
  0x00007f8ab9157362: mov    %rax,0x78(%rsp)
  0x00007f8ab9157367: mov    %rcx,0x70(%rsp)
  0x00007f8ab915736c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157371: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157376: mov    %rbp,0x50(%rsp)
  0x00007f8ab915737b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157380: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157385: mov    %r8,0x38(%rsp)
  0x00007f8ab915738a: mov    %r9,0x30(%rsp)
  0x00007f8ab915738f: mov    %r10,0x28(%rsp)
  0x00007f8ab9157394: mov    %r11,0x20(%rsp)
  0x00007f8ab9157399: mov    %r12,0x18(%rsp)
  0x00007f8ab915739e: mov    %r13,0x10(%rsp)
  0x00007f8ab91573a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91573a8: mov    %r15,(%rsp)
  0x00007f8ab91573ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91573b6: movabs $0x7f8ab9157356,%rsi
  0x00007f8ab91573c0: mov    %rsp,%rdx
  0x00007f8ab91573c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91573c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91573cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91573cd: mov    %rsp,%r11
  0x00007f8ab91573d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91573d4: push   %rax
  0x00007f8ab91573d5: mov    %r11,%rax
  0x00007f8ab91573d8: mov    0x50(%rbx),%r11
  0x00007f8ab91573dc: mov    0x18(%rax),%rsi
  0x00007f8ab91573e0: mov    0x10(%rax),%edx
  0x00007f8ab91573e3: vmovss 0x8(%rax),%xmm0
  0x00007f8ab91573e8: mov    %rbx,0x258(%r15)
  0x00007f8ab91573ef: mov    %rbx,%rax
  0x00007f8ab91573f2: jmpq   *%r11
  0x00007f8ab91573f5: mov    0x8(%rsi),%ebx
  0x00007f8ab91573f8: shl    $0x3,%rbx
  0x00007f8ab91573fc: cmp    0x10(%rax),%rbx
  0x00007f8ab9157400: mov    0x8(%rax),%rbx
  0x00007f8ab9157404: je     0x00007f8ab915740f
  0x00007f8ab915740a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915740f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9157417: je     0x00007f8ab9157512
  0x00007f8ab915741d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9157422: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915742a: je     0x00007f8ab9157512
  0x00007f8ab9157430: mov    %rsp,%r13
  0x00007f8ab9157433: mov    (%rsp),%rax
  0x00007f8ab9157437: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915743b: pushfq 
  0x00007f8ab915743c: sub    $0x8,%rsp
  0x00007f8ab9157440: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9157445: sub    $0x80,%rsp
  0x00007f8ab915744c: mov    %rax,0x78(%rsp)
  0x00007f8ab9157451: mov    %rcx,0x70(%rsp)
  0x00007f8ab9157456: mov    %rdx,0x68(%rsp)
  0x00007f8ab915745b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157460: mov    %rbp,0x50(%rsp)
  0x00007f8ab9157465: mov    %rsi,0x48(%rsp)
  0x00007f8ab915746a: mov    %rdi,0x40(%rsp)
  0x00007f8ab915746f: mov    %r8,0x38(%rsp)
  0x00007f8ab9157474: mov    %r9,0x30(%rsp)
  0x00007f8ab9157479: mov    %r10,0x28(%rsp)
  0x00007f8ab915747e: mov    %r11,0x20(%rsp)
  0x00007f8ab9157483: mov    %r12,0x18(%rsp)
  0x00007f8ab9157488: mov    %r13,0x10(%rsp)
  0x00007f8ab915748d: mov    %r14,0x8(%rsp)
  0x00007f8ab9157492: mov    %r15,(%rsp)
  0x00007f8ab9157496: sub    $0x200,%rsp
  0x00007f8ab915749d: fxsave64 (%rsp)
  0x00007f8ab91574a2: mov    %rbx,%rdi
  0x00007f8ab91574a5: mov    %rax,%rsi
  0x00007f8ab91574a8: callq  0x00007f8acef8bbca
  0x00007f8ab91574ad: fxrstor64 (%rsp)
  0x00007f8ab91574b2: add    $0x200,%rsp
  0x00007f8ab91574b9: mov    (%rsp),%r15
  0x00007f8ab91574bd: mov    0x8(%rsp),%r14
  0x00007f8ab91574c2: mov    0x10(%rsp),%r13
  0x00007f8ab91574c7: mov    0x18(%rsp),%r12
  0x00007f8ab91574cc: mov    0x20(%rsp),%r11
  0x00007f8ab91574d1: mov    0x28(%rsp),%r10
  0x00007f8ab91574d6: mov    0x30(%rsp),%r9
  0x00007f8ab91574db: mov    0x38(%rsp),%r8
  0x00007f8ab91574e0: mov    0x40(%rsp),%rdi
  0x00007f8ab91574e5: mov    0x48(%rsp),%rsi
  0x00007f8ab91574ea: mov    0x50(%rsp),%rbp
  0x00007f8ab91574ef: mov    0x60(%rsp),%rbx
  0x00007f8ab91574f4: mov    0x68(%rsp),%rdx
  0x00007f8ab91574f9: mov    0x70(%rsp),%rcx
  0x00007f8ab91574fe: mov    0x78(%rsp),%rax
  0x00007f8ab9157503: add    $0x80,%rsp
  0x00007f8ab915750a: add    $0x8,%rsp
  0x00007f8ab915750e: popfq  
  0x00007f8ab915750f: mov    %r13,%rsp
  0x00007f8ab9157512: pop    %rax
  0x00007f8ab9157513: mov    %rsp,%r13
  0x00007f8ab9157516: sub    $0x20,%rsp
  0x00007f8ab915751a: mov    %rax,(%rsp)
  0x00007f8ab915751e: mov    %rsi,0x18(%rsp)
  0x00007f8ab9157523: mov    %edx,0x10(%rsp)
  0x00007f8ab9157527: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab915752d: mov    0x40(%rbx),%rcx
  0x00007f8ab9157531: jmpq   *%rcx

AHE@0x00007f8ac80ec6d0: 0xaa000000 i2c: 0x00007f8ab91575e0 c2i: 0x00007f8ab915771c c2iUV: 0x00007f8ab91576ef
i2c argument handler #43 for: static (II)V (582 bytes generated)
c2i argument handler starts at 0x7f8ab915771c
  0x00007f8ab91575e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91575e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91575ee: cmp    %r11,%rax
  0x00007f8ab91575f1: jbe    0x00007f8ab915760a
  0x00007f8ab91575f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9157601: cmp    %r11,%rax
  0x00007f8ab9157604: jb     0x00007f8ab91576cd
  0x00007f8ab915760a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9157614: cmp    %r11,%rax
  0x00007f8ab9157617: jbe    0x00007f8ab9157630
  0x00007f8ab915761d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9157627: cmp    %r11,%rax
  0x00007f8ab915762a: jb     0x00007f8ab91576cd
  0x00007f8ab9157630: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915763a: cmp    %r11,%rax
  0x00007f8ab915763d: jbe    0x00007f8ab9157656
  0x00007f8ab9157643: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915764d: cmp    %r11,%rax
  0x00007f8ab9157650: jb     0x00007f8ab91576cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9157656: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915765b: sub    $0x80,%rsp
  0x00007f8ab9157662: mov    %rax,0x78(%rsp)
  0x00007f8ab9157667: mov    %rcx,0x70(%rsp)
  0x00007f8ab915766c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157671: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157676: mov    %rbp,0x50(%rsp)
  0x00007f8ab915767b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157680: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157685: mov    %r8,0x38(%rsp)
  0x00007f8ab915768a: mov    %r9,0x30(%rsp)
  0x00007f8ab915768f: mov    %r10,0x28(%rsp)
  0x00007f8ab9157694: mov    %r11,0x20(%rsp)
  0x00007f8ab9157699: mov    %r12,0x18(%rsp)
  0x00007f8ab915769e: mov    %r13,0x10(%rsp)
  0x00007f8ab91576a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91576a8: mov    %r15,(%rsp)
  0x00007f8ab91576ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91576b6: movabs $0x7f8ab9157656,%rsi
  0x00007f8ab91576c0: mov    %rsp,%rdx
  0x00007f8ab91576c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91576c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91576cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91576cd: mov    %rsp,%r11
  0x00007f8ab91576d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91576d4: push   %rax
  0x00007f8ab91576d5: mov    %r11,%rax
  0x00007f8ab91576d8: mov    0x50(%rbx),%r11
  0x00007f8ab91576dc: mov    0x10(%rax),%esi
  0x00007f8ab91576df: mov    0x8(%rax),%edx
  0x00007f8ab91576e2: mov    %rbx,0x258(%r15)
  0x00007f8ab91576e9: mov    %rbx,%rax
  0x00007f8ab91576ec: jmpq   *%r11
  0x00007f8ab91576ef: mov    0x8(%rsi),%ebx
  0x00007f8ab91576f2: shl    $0x3,%rbx
  0x00007f8ab91576f6: cmp    0x10(%rax),%rbx
  0x00007f8ab91576fa: mov    0x8(%rax),%rbx
  0x00007f8ab91576fe: je     0x00007f8ab9157709
  0x00007f8ab9157704: jmpq   0x00007f8ab9105c40
  0x00007f8ab9157709: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9157711: je     0x00007f8ab915780c
  0x00007f8ab9157717: jmpq   0x00007f8ab9105c40
  0x00007f8ab915771c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9157724: je     0x00007f8ab915780c
  0x00007f8ab915772a: mov    %rsp,%r13
  0x00007f8ab915772d: mov    (%rsp),%rax
  0x00007f8ab9157731: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157735: pushfq 
  0x00007f8ab9157736: sub    $0x8,%rsp
  0x00007f8ab915773a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915773f: sub    $0x80,%rsp
  0x00007f8ab9157746: mov    %rax,0x78(%rsp)
  0x00007f8ab915774b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9157750: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157755: mov    %rbx,0x60(%rsp)
  0x00007f8ab915775a: mov    %rbp,0x50(%rsp)
  0x00007f8ab915775f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157764: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157769: mov    %r8,0x38(%rsp)
  0x00007f8ab915776e: mov    %r9,0x30(%rsp)
  0x00007f8ab9157773: mov    %r10,0x28(%rsp)
  0x00007f8ab9157778: mov    %r11,0x20(%rsp)
  0x00007f8ab915777d: mov    %r12,0x18(%rsp)
  0x00007f8ab9157782: mov    %r13,0x10(%rsp)
  0x00007f8ab9157787: mov    %r14,0x8(%rsp)
  0x00007f8ab915778c: mov    %r15,(%rsp)
  0x00007f8ab9157790: sub    $0x200,%rsp
  0x00007f8ab9157797: fxsave64 (%rsp)
  0x00007f8ab915779c: mov    %rbx,%rdi
  0x00007f8ab915779f: mov    %rax,%rsi
  0x00007f8ab91577a2: callq  0x00007f8acef8bbca
  0x00007f8ab91577a7: fxrstor64 (%rsp)
  0x00007f8ab91577ac: add    $0x200,%rsp
  0x00007f8ab91577b3: mov    (%rsp),%r15
  0x00007f8ab91577b7: mov    0x8(%rsp),%r14
  0x00007f8ab91577bc: mov    0x10(%rsp),%r13
  0x00007f8ab91577c1: mov    0x18(%rsp),%r12
  0x00007f8ab91577c6: mov    0x20(%rsp),%r11
  0x00007f8ab91577cb: mov    0x28(%rsp),%r10
  0x00007f8ab91577d0: mov    0x30(%rsp),%r9
  0x00007f8ab91577d5: mov    0x38(%rsp),%r8
  0x00007f8ab91577da: mov    0x40(%rsp),%rdi
  0x00007f8ab91577df: mov    0x48(%rsp),%rsi
  0x00007f8ab91577e4: mov    0x50(%rsp),%rbp
  0x00007f8ab91577e9: mov    0x60(%rsp),%rbx
  0x00007f8ab91577ee: mov    0x68(%rsp),%rdx
  0x00007f8ab91577f3: mov    0x70(%rsp),%rcx
  0x00007f8ab91577f8: mov    0x78(%rsp),%rax
  0x00007f8ab91577fd: add    $0x80,%rsp
  0x00007f8ab9157804: add    $0x8,%rsp
  0x00007f8ab9157808: popfq  
  0x00007f8ab9157809: mov    %r13,%rsp
  0x00007f8ab915780c: pop    %rax
  0x00007f8ab915780d: mov    %rsp,%r13
  0x00007f8ab9157810: sub    $0x20,%rsp
  0x00007f8ab9157814: mov    %rax,(%rsp)
  0x00007f8ab9157818: mov    %esi,0x10(%rsp)
  0x00007f8ab915781c: mov    %edx,0x8(%rsp)
  0x00007f8ab9157820: mov    0x40(%rbx),%rcx
  0x00007f8ab9157824: jmpq   *%rcx

AHE@0x00007f8ac80ec718: 0xbabba000 i2c: 0x00007f8ab91578e0 c2i: 0x00007f8ab9157a29 c2iUV: 0x00007f8ab91579fc
i2c argument handler #44 for: receiver (ILjava/lang/Object;Ljava/lang/Object;I)V (611 bytes generated)
c2i argument handler starts at 0x7f8ab9157a29
  0x00007f8ab91578e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91578e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91578ee: cmp    %r11,%rax
  0x00007f8ab91578f1: jbe    0x00007f8ab915790a
  0x00007f8ab91578f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9157901: cmp    %r11,%rax
  0x00007f8ab9157904: jb     0x00007f8ab91579cd
  0x00007f8ab915790a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9157914: cmp    %r11,%rax
  0x00007f8ab9157917: jbe    0x00007f8ab9157930
  0x00007f8ab915791d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9157927: cmp    %r11,%rax
  0x00007f8ab915792a: jb     0x00007f8ab91579cd
  0x00007f8ab9157930: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915793a: cmp    %r11,%rax
  0x00007f8ab915793d: jbe    0x00007f8ab9157956
  0x00007f8ab9157943: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915794d: cmp    %r11,%rax
  0x00007f8ab9157950: jb     0x00007f8ab91579cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9157956: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915795b: sub    $0x80,%rsp
  0x00007f8ab9157962: mov    %rax,0x78(%rsp)
  0x00007f8ab9157967: mov    %rcx,0x70(%rsp)
  0x00007f8ab915796c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157971: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157976: mov    %rbp,0x50(%rsp)
  0x00007f8ab915797b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157980: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157985: mov    %r8,0x38(%rsp)
  0x00007f8ab915798a: mov    %r9,0x30(%rsp)
  0x00007f8ab915798f: mov    %r10,0x28(%rsp)
  0x00007f8ab9157994: mov    %r11,0x20(%rsp)
  0x00007f8ab9157999: mov    %r12,0x18(%rsp)
  0x00007f8ab915799e: mov    %r13,0x10(%rsp)
  0x00007f8ab91579a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91579a8: mov    %r15,(%rsp)
  0x00007f8ab91579ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91579b6: movabs $0x7f8ab9157956,%rsi
  0x00007f8ab91579c0: mov    %rsp,%rdx
  0x00007f8ab91579c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91579c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91579cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91579cd: mov    %rsp,%r11
  0x00007f8ab91579d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91579d4: push   %rax
  0x00007f8ab91579d5: mov    %r11,%rax
  0x00007f8ab91579d8: mov    0x50(%rbx),%r11
  0x00007f8ab91579dc: mov    0x28(%rax),%rsi
  0x00007f8ab91579e0: mov    0x20(%rax),%edx
  0x00007f8ab91579e3: mov    0x18(%rax),%rcx
  0x00007f8ab91579e7: mov    0x10(%rax),%r8
  0x00007f8ab91579eb: mov    0x8(%rax),%r9d
  0x00007f8ab91579ef: mov    %rbx,0x258(%r15)
  0x00007f8ab91579f6: mov    %rbx,%rax
  0x00007f8ab91579f9: jmpq   *%r11
  0x00007f8ab91579fc: mov    0x8(%rsi),%ebx
  0x00007f8ab91579ff: shl    $0x3,%rbx
  0x00007f8ab9157a03: cmp    0x10(%rax),%rbx
  0x00007f8ab9157a07: mov    0x8(%rax),%rbx
  0x00007f8ab9157a0b: je     0x00007f8ab9157a16
  0x00007f8ab9157a11: jmpq   0x00007f8ab9105c40
  0x00007f8ab9157a16: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9157a1e: je     0x00007f8ab9157b19
  0x00007f8ab9157a24: jmpq   0x00007f8ab9105c40
  0x00007f8ab9157a29: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9157a31: je     0x00007f8ab9157b19
  0x00007f8ab9157a37: mov    %rsp,%r13
  0x00007f8ab9157a3a: mov    (%rsp),%rax
  0x00007f8ab9157a3e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157a42: pushfq 
  0x00007f8ab9157a43: sub    $0x8,%rsp
  0x00007f8ab9157a47: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9157a4c: sub    $0x80,%rsp
  0x00007f8ab9157a53: mov    %rax,0x78(%rsp)
  0x00007f8ab9157a58: mov    %rcx,0x70(%rsp)
  0x00007f8ab9157a5d: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157a62: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157a67: mov    %rbp,0x50(%rsp)
  0x00007f8ab9157a6c: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157a71: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157a76: mov    %r8,0x38(%rsp)
  0x00007f8ab9157a7b: mov    %r9,0x30(%rsp)
  0x00007f8ab9157a80: mov    %r10,0x28(%rsp)
  0x00007f8ab9157a85: mov    %r11,0x20(%rsp)
  0x00007f8ab9157a8a: mov    %r12,0x18(%rsp)
  0x00007f8ab9157a8f: mov    %r13,0x10(%rsp)
  0x00007f8ab9157a94: mov    %r14,0x8(%rsp)
  0x00007f8ab9157a99: mov    %r15,(%rsp)
  0x00007f8ab9157a9d: sub    $0x200,%rsp
  0x00007f8ab9157aa4: fxsave64 (%rsp)
  0x00007f8ab9157aa9: mov    %rbx,%rdi
  0x00007f8ab9157aac: mov    %rax,%rsi
  0x00007f8ab9157aaf: callq  0x00007f8acef8bbca
  0x00007f8ab9157ab4: fxrstor64 (%rsp)
  0x00007f8ab9157ab9: add    $0x200,%rsp
  0x00007f8ab9157ac0: mov    (%rsp),%r15
  0x00007f8ab9157ac4: mov    0x8(%rsp),%r14
  0x00007f8ab9157ac9: mov    0x10(%rsp),%r13
  0x00007f8ab9157ace: mov    0x18(%rsp),%r12
  0x00007f8ab9157ad3: mov    0x20(%rsp),%r11
  0x00007f8ab9157ad8: mov    0x28(%rsp),%r10
  0x00007f8ab9157add: mov    0x30(%rsp),%r9
  0x00007f8ab9157ae2: mov    0x38(%rsp),%r8
  0x00007f8ab9157ae7: mov    0x40(%rsp),%rdi
  0x00007f8ab9157aec: mov    0x48(%rsp),%rsi
  0x00007f8ab9157af1: mov    0x50(%rsp),%rbp
  0x00007f8ab9157af6: mov    0x60(%rsp),%rbx
  0x00007f8ab9157afb: mov    0x68(%rsp),%rdx
  0x00007f8ab9157b00: mov    0x70(%rsp),%rcx
  0x00007f8ab9157b05: mov    0x78(%rsp),%rax
  0x00007f8ab9157b0a: add    $0x80,%rsp
  0x00007f8ab9157b11: add    $0x8,%rsp
  0x00007f8ab9157b15: popfq  
  0x00007f8ab9157b16: mov    %r13,%rsp
  0x00007f8ab9157b19: pop    %rax
  0x00007f8ab9157b1a: mov    %rsp,%r13
  0x00007f8ab9157b1d: sub    $0x30,%rsp
  0x00007f8ab9157b21: mov    %rax,(%rsp)
  0x00007f8ab9157b25: mov    %rsi,0x28(%rsp)
  0x00007f8ab9157b2a: mov    %edx,0x20(%rsp)
  0x00007f8ab9157b2e: mov    %rcx,0x18(%rsp)
  0x00007f8ab9157b33: mov    %r8,0x10(%rsp)
  0x00007f8ab9157b38: mov    %r9d,0x8(%rsp)
  0x00007f8ab9157b3d: mov    0x40(%rbx),%rcx
  0x00007f8ab9157b41: jmpq   *%rcx

AHE@0x00007f8ac80ec760: 0x66000000 i2c: 0x00007f8ab9157c20 c2i: 0x00007f8ab9157d60 c2iUV: 0x00007f8ab9157d33
i2c argument handler #45 for: static (FF)F (590 bytes generated)
c2i argument handler starts at 0x7f8ab9157d60
  0x00007f8ab9157c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9157c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9157c2e: cmp    %r11,%rax
  0x00007f8ab9157c31: jbe    0x00007f8ab9157c4a
  0x00007f8ab9157c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9157c41: cmp    %r11,%rax
  0x00007f8ab9157c44: jb     0x00007f8ab9157d0d
  0x00007f8ab9157c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9157c54: cmp    %r11,%rax
  0x00007f8ab9157c57: jbe    0x00007f8ab9157c70
  0x00007f8ab9157c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9157c67: cmp    %r11,%rax
  0x00007f8ab9157c6a: jb     0x00007f8ab9157d0d
  0x00007f8ab9157c70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9157c7a: cmp    %r11,%rax
  0x00007f8ab9157c7d: jbe    0x00007f8ab9157c96
  0x00007f8ab9157c83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9157c8d: cmp    %r11,%rax
  0x00007f8ab9157c90: jb     0x00007f8ab9157d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9157c96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9157c9b: sub    $0x80,%rsp
  0x00007f8ab9157ca2: mov    %rax,0x78(%rsp)
  0x00007f8ab9157ca7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9157cac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157cb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157cb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9157cbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157cc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157cc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9157cca: mov    %r9,0x30(%rsp)
  0x00007f8ab9157ccf: mov    %r10,0x28(%rsp)
  0x00007f8ab9157cd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9157cd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9157cde: mov    %r13,0x10(%rsp)
  0x00007f8ab9157ce3: mov    %r14,0x8(%rsp)
  0x00007f8ab9157ce8: mov    %r15,(%rsp)
  0x00007f8ab9157cec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9157cf6: movabs $0x7f8ab9157c96,%rsi
  0x00007f8ab9157d00: mov    %rsp,%rdx
  0x00007f8ab9157d03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157d07: callq  0x00007f8aceddb9fa
  0x00007f8ab9157d0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9157d0d: mov    %rsp,%r11
  0x00007f8ab9157d10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157d14: push   %rax
  0x00007f8ab9157d15: mov    %r11,%rax
  0x00007f8ab9157d18: mov    0x50(%rbx),%r11
  0x00007f8ab9157d1c: vmovss 0x10(%rax),%xmm0
  0x00007f8ab9157d21: vmovss 0x8(%rax),%xmm1
  0x00007f8ab9157d26: mov    %rbx,0x258(%r15)
  0x00007f8ab9157d2d: mov    %rbx,%rax
  0x00007f8ab9157d30: jmpq   *%r11
  0x00007f8ab9157d33: mov    0x8(%rsi),%ebx
  0x00007f8ab9157d36: shl    $0x3,%rbx
  0x00007f8ab9157d3a: cmp    0x10(%rax),%rbx
  0x00007f8ab9157d3e: mov    0x8(%rax),%rbx
  0x00007f8ab9157d42: je     0x00007f8ab9157d4d
  0x00007f8ab9157d48: jmpq   0x00007f8ab9105c40
  0x00007f8ab9157d4d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9157d55: je     0x00007f8ab9157e50
  0x00007f8ab9157d5b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9157d60: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9157d68: je     0x00007f8ab9157e50
  0x00007f8ab9157d6e: mov    %rsp,%r13
  0x00007f8ab9157d71: mov    (%rsp),%rax
  0x00007f8ab9157d75: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9157d79: pushfq 
  0x00007f8ab9157d7a: sub    $0x8,%rsp
  0x00007f8ab9157d7e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9157d83: sub    $0x80,%rsp
  0x00007f8ab9157d8a: mov    %rax,0x78(%rsp)
  0x00007f8ab9157d8f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9157d94: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157d99: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157d9e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9157da3: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157da8: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157dad: mov    %r8,0x38(%rsp)
  0x00007f8ab9157db2: mov    %r9,0x30(%rsp)
  0x00007f8ab9157db7: mov    %r10,0x28(%rsp)
  0x00007f8ab9157dbc: mov    %r11,0x20(%rsp)
  0x00007f8ab9157dc1: mov    %r12,0x18(%rsp)
  0x00007f8ab9157dc6: mov    %r13,0x10(%rsp)
  0x00007f8ab9157dcb: mov    %r14,0x8(%rsp)
  0x00007f8ab9157dd0: mov    %r15,(%rsp)
  0x00007f8ab9157dd4: sub    $0x200,%rsp
  0x00007f8ab9157ddb: fxsave64 (%rsp)
  0x00007f8ab9157de0: mov    %rbx,%rdi
  0x00007f8ab9157de3: mov    %rax,%rsi
  0x00007f8ab9157de6: callq  0x00007f8acef8bbca
  0x00007f8ab9157deb: fxrstor64 (%rsp)
  0x00007f8ab9157df0: add    $0x200,%rsp
  0x00007f8ab9157df7: mov    (%rsp),%r15
  0x00007f8ab9157dfb: mov    0x8(%rsp),%r14
  0x00007f8ab9157e00: mov    0x10(%rsp),%r13
  0x00007f8ab9157e05: mov    0x18(%rsp),%r12
  0x00007f8ab9157e0a: mov    0x20(%rsp),%r11
  0x00007f8ab9157e0f: mov    0x28(%rsp),%r10
  0x00007f8ab9157e14: mov    0x30(%rsp),%r9
  0x00007f8ab9157e19: mov    0x38(%rsp),%r8
  0x00007f8ab9157e1e: mov    0x40(%rsp),%rdi
  0x00007f8ab9157e23: mov    0x48(%rsp),%rsi
  0x00007f8ab9157e28: mov    0x50(%rsp),%rbp
  0x00007f8ab9157e2d: mov    0x60(%rsp),%rbx
  0x00007f8ab9157e32: mov    0x68(%rsp),%rdx
  0x00007f8ab9157e37: mov    0x70(%rsp),%rcx
  0x00007f8ab9157e3c: mov    0x78(%rsp),%rax
  0x00007f8ab9157e41: add    $0x80,%rsp
  0x00007f8ab9157e48: add    $0x8,%rsp
  0x00007f8ab9157e4c: popfq  
  0x00007f8ab9157e4d: mov    %r13,%rsp
  0x00007f8ab9157e50: pop    %rax
  0x00007f8ab9157e51: mov    %rsp,%r13
  0x00007f8ab9157e54: sub    $0x20,%rsp
  0x00007f8ab9157e58: mov    %rax,(%rsp)
  0x00007f8ab9157e5c: vmovss %xmm0,0x10(%rsp)
  0x00007f8ab9157e62: vmovss %xmm1,0x8(%rsp)
  0x00007f8ab9157e68: mov    0x40(%rbx),%rcx
  0x00007f8ab9157e6c: jmpq   *%rcx

AHE@0x00007f8ac80ec7a8: 0xb6000000 i2c: 0x00007f8ab9157f20 c2i: 0x00007f8ab915805f c2iUV: 0x00007f8ab9158032
i2c argument handler #46 for: receiver (F)V (588 bytes generated)
c2i argument handler starts at 0x7f8ab915805f
  0x00007f8ab9157f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9157f24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9157f2e: cmp    %r11,%rax
  0x00007f8ab9157f31: jbe    0x00007f8ab9157f4a
  0x00007f8ab9157f37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9157f41: cmp    %r11,%rax
  0x00007f8ab9157f44: jb     0x00007f8ab915800d
  0x00007f8ab9157f4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9157f54: cmp    %r11,%rax
  0x00007f8ab9157f57: jbe    0x00007f8ab9157f70
  0x00007f8ab9157f5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9157f67: cmp    %r11,%rax
  0x00007f8ab9157f6a: jb     0x00007f8ab915800d
  0x00007f8ab9157f70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9157f7a: cmp    %r11,%rax
  0x00007f8ab9157f7d: jbe    0x00007f8ab9157f96
  0x00007f8ab9157f83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9157f8d: cmp    %r11,%rax
  0x00007f8ab9157f90: jb     0x00007f8ab915800d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9157f96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9157f9b: sub    $0x80,%rsp
  0x00007f8ab9157fa2: mov    %rax,0x78(%rsp)
  0x00007f8ab9157fa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9157fac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9157fb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9157fb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9157fbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9157fc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9157fc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9157fca: mov    %r9,0x30(%rsp)
  0x00007f8ab9157fcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9157fd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9157fd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9157fde: mov    %r13,0x10(%rsp)
  0x00007f8ab9157fe3: mov    %r14,0x8(%rsp)
  0x00007f8ab9157fe8: mov    %r15,(%rsp)
  0x00007f8ab9157fec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9157ff6: movabs $0x7f8ab9157f96,%rsi
  0x00007f8ab9158000: mov    %rsp,%rdx
  0x00007f8ab9158003: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158007: callq  0x00007f8aceddb9fa
  0x00007f8ab915800c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915800d: mov    %rsp,%r11
  0x00007f8ab9158010: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158014: push   %rax
  0x00007f8ab9158015: mov    %r11,%rax
  0x00007f8ab9158018: mov    0x50(%rbx),%r11
  0x00007f8ab915801c: mov    0x10(%rax),%rsi
  0x00007f8ab9158020: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9158025: mov    %rbx,0x258(%r15)
  0x00007f8ab915802c: mov    %rbx,%rax
  0x00007f8ab915802f: jmpq   *%r11
  0x00007f8ab9158032: mov    0x8(%rsi),%ebx
  0x00007f8ab9158035: shl    $0x3,%rbx
  0x00007f8ab9158039: cmp    0x10(%rax),%rbx
  0x00007f8ab915803d: mov    0x8(%rax),%rbx
  0x00007f8ab9158041: je     0x00007f8ab915804c
  0x00007f8ab9158047: jmpq   0x00007f8ab9105c40
  0x00007f8ab915804c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158054: je     0x00007f8ab915814f
  0x00007f8ab915805a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915805f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158067: je     0x00007f8ab915814f
  0x00007f8ab915806d: mov    %rsp,%r13
  0x00007f8ab9158070: mov    (%rsp),%rax
  0x00007f8ab9158074: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158078: pushfq 
  0x00007f8ab9158079: sub    $0x8,%rsp
  0x00007f8ab915807d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9158082: sub    $0x80,%rsp
  0x00007f8ab9158089: mov    %rax,0x78(%rsp)
  0x00007f8ab915808e: mov    %rcx,0x70(%rsp)
  0x00007f8ab9158093: mov    %rdx,0x68(%rsp)
  0x00007f8ab9158098: mov    %rbx,0x60(%rsp)
  0x00007f8ab915809d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91580a2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91580a7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91580ac: mov    %r8,0x38(%rsp)
  0x00007f8ab91580b1: mov    %r9,0x30(%rsp)
  0x00007f8ab91580b6: mov    %r10,0x28(%rsp)
  0x00007f8ab91580bb: mov    %r11,0x20(%rsp)
  0x00007f8ab91580c0: mov    %r12,0x18(%rsp)
  0x00007f8ab91580c5: mov    %r13,0x10(%rsp)
  0x00007f8ab91580ca: mov    %r14,0x8(%rsp)
  0x00007f8ab91580cf: mov    %r15,(%rsp)
  0x00007f8ab91580d3: sub    $0x200,%rsp
  0x00007f8ab91580da: fxsave64 (%rsp)
  0x00007f8ab91580df: mov    %rbx,%rdi
  0x00007f8ab91580e2: mov    %rax,%rsi
  0x00007f8ab91580e5: callq  0x00007f8acef8bbca
  0x00007f8ab91580ea: fxrstor64 (%rsp)
  0x00007f8ab91580ef: add    $0x200,%rsp
  0x00007f8ab91580f6: mov    (%rsp),%r15
  0x00007f8ab91580fa: mov    0x8(%rsp),%r14
  0x00007f8ab91580ff: mov    0x10(%rsp),%r13
  0x00007f8ab9158104: mov    0x18(%rsp),%r12
  0x00007f8ab9158109: mov    0x20(%rsp),%r11
  0x00007f8ab915810e: mov    0x28(%rsp),%r10
  0x00007f8ab9158113: mov    0x30(%rsp),%r9
  0x00007f8ab9158118: mov    0x38(%rsp),%r8
  0x00007f8ab915811d: mov    0x40(%rsp),%rdi
  0x00007f8ab9158122: mov    0x48(%rsp),%rsi
  0x00007f8ab9158127: mov    0x50(%rsp),%rbp
  0x00007f8ab915812c: mov    0x60(%rsp),%rbx
  0x00007f8ab9158131: mov    0x68(%rsp),%rdx
  0x00007f8ab9158136: mov    0x70(%rsp),%rcx
  0x00007f8ab915813b: mov    0x78(%rsp),%rax
  0x00007f8ab9158140: add    $0x80,%rsp
  0x00007f8ab9158147: add    $0x8,%rsp
  0x00007f8ab915814b: popfq  
  0x00007f8ab915814c: mov    %r13,%rsp
  0x00007f8ab915814f: pop    %rax
  0x00007f8ab9158150: mov    %rsp,%r13
  0x00007f8ab9158153: sub    $0x20,%rsp
  0x00007f8ab9158157: mov    %rax,(%rsp)
  0x00007f8ab915815b: mov    %rsi,0x10(%rsp)
  0x00007f8ab9158160: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab9158166: mov    0x40(%rbx),%rcx
  0x00007f8ab915816a: jmpq   *%rcx

AHE@0x00007f8ac80ec7f0: 0xb7e00000 i2c: 0x00007f8ab9158220 c2i: 0x00007f8ab915835f c2iUV: 0x00007f8ab9158332
i2c argument handler #47 for: receiver (D)V (603 bytes generated)
c2i argument handler starts at 0x7f8ab915835f
  0x00007f8ab9158220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9158224: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915822e: cmp    %r11,%rax
  0x00007f8ab9158231: jbe    0x00007f8ab915824a
  0x00007f8ab9158237: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9158241: cmp    %r11,%rax
  0x00007f8ab9158244: jb     0x00007f8ab915830d
  0x00007f8ab915824a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9158254: cmp    %r11,%rax
  0x00007f8ab9158257: jbe    0x00007f8ab9158270
  0x00007f8ab915825d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9158267: cmp    %r11,%rax
  0x00007f8ab915826a: jb     0x00007f8ab915830d
  0x00007f8ab9158270: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915827a: cmp    %r11,%rax
  0x00007f8ab915827d: jbe    0x00007f8ab9158296
  0x00007f8ab9158283: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915828d: cmp    %r11,%rax
  0x00007f8ab9158290: jb     0x00007f8ab915830d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9158296: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915829b: sub    $0x80,%rsp
  0x00007f8ab91582a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91582a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91582ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91582b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91582b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91582bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91582c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91582c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91582ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91582cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91582d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91582d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91582de: mov    %r13,0x10(%rsp)
  0x00007f8ab91582e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91582e8: mov    %r15,(%rsp)
  0x00007f8ab91582ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91582f6: movabs $0x7f8ab9158296,%rsi
  0x00007f8ab9158300: mov    %rsp,%rdx
  0x00007f8ab9158303: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158307: callq  0x00007f8aceddb9fa
  0x00007f8ab915830c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915830d: mov    %rsp,%r11
  0x00007f8ab9158310: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158314: push   %rax
  0x00007f8ab9158315: mov    %r11,%rax
  0x00007f8ab9158318: mov    0x50(%rbx),%r11
  0x00007f8ab915831c: mov    0x18(%rax),%rsi
  0x00007f8ab9158320: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab9158325: mov    %rbx,0x258(%r15)
  0x00007f8ab915832c: mov    %rbx,%rax
  0x00007f8ab915832f: jmpq   *%r11
  0x00007f8ab9158332: mov    0x8(%rsi),%ebx
  0x00007f8ab9158335: shl    $0x3,%rbx
  0x00007f8ab9158339: cmp    0x10(%rax),%rbx
  0x00007f8ab915833d: mov    0x8(%rax),%rbx
  0x00007f8ab9158341: je     0x00007f8ab915834c
  0x00007f8ab9158347: jmpq   0x00007f8ab9105c40
  0x00007f8ab915834c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158354: je     0x00007f8ab915844f
  0x00007f8ab915835a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915835f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158367: je     0x00007f8ab915844f
  0x00007f8ab915836d: mov    %rsp,%r13
  0x00007f8ab9158370: mov    (%rsp),%rax
  0x00007f8ab9158374: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158378: pushfq 
  0x00007f8ab9158379: sub    $0x8,%rsp
  0x00007f8ab915837d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9158382: sub    $0x80,%rsp
  0x00007f8ab9158389: mov    %rax,0x78(%rsp)
  0x00007f8ab915838e: mov    %rcx,0x70(%rsp)
  0x00007f8ab9158393: mov    %rdx,0x68(%rsp)
  0x00007f8ab9158398: mov    %rbx,0x60(%rsp)
  0x00007f8ab915839d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91583a2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91583a7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91583ac: mov    %r8,0x38(%rsp)
  0x00007f8ab91583b1: mov    %r9,0x30(%rsp)
  0x00007f8ab91583b6: mov    %r10,0x28(%rsp)
  0x00007f8ab91583bb: mov    %r11,0x20(%rsp)
  0x00007f8ab91583c0: mov    %r12,0x18(%rsp)
  0x00007f8ab91583c5: mov    %r13,0x10(%rsp)
  0x00007f8ab91583ca: mov    %r14,0x8(%rsp)
  0x00007f8ab91583cf: mov    %r15,(%rsp)
  0x00007f8ab91583d3: sub    $0x200,%rsp
  0x00007f8ab91583da: fxsave64 (%rsp)
  0x00007f8ab91583df: mov    %rbx,%rdi
  0x00007f8ab91583e2: mov    %rax,%rsi
  0x00007f8ab91583e5: callq  0x00007f8acef8bbca
  0x00007f8ab91583ea: fxrstor64 (%rsp)
  0x00007f8ab91583ef: add    $0x200,%rsp
  0x00007f8ab91583f6: mov    (%rsp),%r15
  0x00007f8ab91583fa: mov    0x8(%rsp),%r14
  0x00007f8ab91583ff: mov    0x10(%rsp),%r13
  0x00007f8ab9158404: mov    0x18(%rsp),%r12
  0x00007f8ab9158409: mov    0x20(%rsp),%r11
  0x00007f8ab915840e: mov    0x28(%rsp),%r10
  0x00007f8ab9158413: mov    0x30(%rsp),%r9
  0x00007f8ab9158418: mov    0x38(%rsp),%r8
  0x00007f8ab915841d: mov    0x40(%rsp),%rdi
  0x00007f8ab9158422: mov    0x48(%rsp),%rsi
  0x00007f8ab9158427: mov    0x50(%rsp),%rbp
  0x00007f8ab915842c: mov    0x60(%rsp),%rbx
  0x00007f8ab9158431: mov    0x68(%rsp),%rdx
  0x00007f8ab9158436: mov    0x70(%rsp),%rcx
  0x00007f8ab915843b: mov    0x78(%rsp),%rax
  0x00007f8ab9158440: add    $0x80,%rsp
  0x00007f8ab9158447: add    $0x8,%rsp
  0x00007f8ab915844b: popfq  
  0x00007f8ab915844c: mov    %r13,%rsp
  0x00007f8ab915844f: pop    %rax
  0x00007f8ab9158450: mov    %rsp,%r13
  0x00007f8ab9158453: sub    $0x20,%rsp
  0x00007f8ab9158457: mov    %rax,(%rsp)
  0x00007f8ab915845b: mov    %rsi,0x18(%rsp)
  0x00007f8ab9158460: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab915846a: mov    %rax,0x10(%rsp)
  0x00007f8ab915846f: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9158475: mov    0x40(%rbx),%rcx
  0x00007f8ab9158479: jmpq   *%rcx

AHE@0x00007f8ac80ec838: 0x67e00000 i2c: 0x00007f8ab9158520 c2i: 0x00007f8ab9158660 c2iUV: 0x00007f8ab9158633
i2c argument handler #48 for: static (FD)F (605 bytes generated)
c2i argument handler starts at 0x7f8ab9158660
  0x00007f8ab9158520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9158524: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915852e: cmp    %r11,%rax
  0x00007f8ab9158531: jbe    0x00007f8ab915854a
  0x00007f8ab9158537: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9158541: cmp    %r11,%rax
  0x00007f8ab9158544: jb     0x00007f8ab915860d
  0x00007f8ab915854a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9158554: cmp    %r11,%rax
  0x00007f8ab9158557: jbe    0x00007f8ab9158570
  0x00007f8ab915855d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9158567: cmp    %r11,%rax
  0x00007f8ab915856a: jb     0x00007f8ab915860d
  0x00007f8ab9158570: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915857a: cmp    %r11,%rax
  0x00007f8ab915857d: jbe    0x00007f8ab9158596
  0x00007f8ab9158583: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915858d: cmp    %r11,%rax
  0x00007f8ab9158590: jb     0x00007f8ab915860d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9158596: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915859b: sub    $0x80,%rsp
  0x00007f8ab91585a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91585a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91585ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91585b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91585b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91585bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91585c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91585c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91585ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91585cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91585d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91585d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91585de: mov    %r13,0x10(%rsp)
  0x00007f8ab91585e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91585e8: mov    %r15,(%rsp)
  0x00007f8ab91585ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91585f6: movabs $0x7f8ab9158596,%rsi
  0x00007f8ab9158600: mov    %rsp,%rdx
  0x00007f8ab9158603: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158607: callq  0x00007f8aceddb9fa
  0x00007f8ab915860c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915860d: mov    %rsp,%r11
  0x00007f8ab9158610: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158614: push   %rax
  0x00007f8ab9158615: mov    %r11,%rax
  0x00007f8ab9158618: mov    0x50(%rbx),%r11
  0x00007f8ab915861c: vmovss 0x18(%rax),%xmm0
  0x00007f8ab9158621: vmovsd 0x8(%rax),%xmm1
  0x00007f8ab9158626: mov    %rbx,0x258(%r15)
  0x00007f8ab915862d: mov    %rbx,%rax
  0x00007f8ab9158630: jmpq   *%r11
  0x00007f8ab9158633: mov    0x8(%rsi),%ebx
  0x00007f8ab9158636: shl    $0x3,%rbx
  0x00007f8ab915863a: cmp    0x10(%rax),%rbx
  0x00007f8ab915863e: mov    0x8(%rax),%rbx
  0x00007f8ab9158642: je     0x00007f8ab915864d
  0x00007f8ab9158648: jmpq   0x00007f8ab9105c40
  0x00007f8ab915864d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158655: je     0x00007f8ab9158750
  0x00007f8ab915865b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9158660: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158668: je     0x00007f8ab9158750
  0x00007f8ab915866e: mov    %rsp,%r13
  0x00007f8ab9158671: mov    (%rsp),%rax
  0x00007f8ab9158675: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158679: pushfq 
  0x00007f8ab915867a: sub    $0x8,%rsp
  0x00007f8ab915867e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9158683: sub    $0x80,%rsp
  0x00007f8ab915868a: mov    %rax,0x78(%rsp)
  0x00007f8ab915868f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9158694: mov    %rdx,0x68(%rsp)
  0x00007f8ab9158699: mov    %rbx,0x60(%rsp)
  0x00007f8ab915869e: mov    %rbp,0x50(%rsp)
  0x00007f8ab91586a3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91586a8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91586ad: mov    %r8,0x38(%rsp)
  0x00007f8ab91586b2: mov    %r9,0x30(%rsp)
  0x00007f8ab91586b7: mov    %r10,0x28(%rsp)
  0x00007f8ab91586bc: mov    %r11,0x20(%rsp)
  0x00007f8ab91586c1: mov    %r12,0x18(%rsp)
  0x00007f8ab91586c6: mov    %r13,0x10(%rsp)
  0x00007f8ab91586cb: mov    %r14,0x8(%rsp)
  0x00007f8ab91586d0: mov    %r15,(%rsp)
  0x00007f8ab91586d4: sub    $0x200,%rsp
  0x00007f8ab91586db: fxsave64 (%rsp)
  0x00007f8ab91586e0: mov    %rbx,%rdi
  0x00007f8ab91586e3: mov    %rax,%rsi
  0x00007f8ab91586e6: callq  0x00007f8acef8bbca
  0x00007f8ab91586eb: fxrstor64 (%rsp)
  0x00007f8ab91586f0: add    $0x200,%rsp
  0x00007f8ab91586f7: mov    (%rsp),%r15
  0x00007f8ab91586fb: mov    0x8(%rsp),%r14
  0x00007f8ab9158700: mov    0x10(%rsp),%r13
  0x00007f8ab9158705: mov    0x18(%rsp),%r12
  0x00007f8ab915870a: mov    0x20(%rsp),%r11
  0x00007f8ab915870f: mov    0x28(%rsp),%r10
  0x00007f8ab9158714: mov    0x30(%rsp),%r9
  0x00007f8ab9158719: mov    0x38(%rsp),%r8
  0x00007f8ab915871e: mov    0x40(%rsp),%rdi
  0x00007f8ab9158723: mov    0x48(%rsp),%rsi
  0x00007f8ab9158728: mov    0x50(%rsp),%rbp
  0x00007f8ab915872d: mov    0x60(%rsp),%rbx
  0x00007f8ab9158732: mov    0x68(%rsp),%rdx
  0x00007f8ab9158737: mov    0x70(%rsp),%rcx
  0x00007f8ab915873c: mov    0x78(%rsp),%rax
  0x00007f8ab9158741: add    $0x80,%rsp
  0x00007f8ab9158748: add    $0x8,%rsp
  0x00007f8ab915874c: popfq  
  0x00007f8ab915874d: mov    %r13,%rsp
  0x00007f8ab9158750: pop    %rax
  0x00007f8ab9158751: mov    %rsp,%r13
  0x00007f8ab9158754: sub    $0x20,%rsp
  0x00007f8ab9158758: mov    %rax,(%rsp)
  0x00007f8ab915875c: vmovss %xmm0,0x18(%rsp)
  0x00007f8ab9158762: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab915876c: mov    %rax,0x10(%rsp)
  0x00007f8ab9158771: vmovsd %xmm1,0x8(%rsp)
  0x00007f8ab9158777: mov    0x40(%rbx),%rcx
  0x00007f8ab915877b: jmpq   *%rcx

AHE@0x00007f8ac80ec880: 0x7e7e0000 i2c: 0x00007f8ab9158820 c2i: 0x00007f8ab9158960 c2iUV: 0x00007f8ab9158933
i2c argument handler #49 for: static (DD)D (620 bytes generated)
c2i argument handler starts at 0x7f8ab9158960
  0x00007f8ab9158820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9158824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915882e: cmp    %r11,%rax
  0x00007f8ab9158831: jbe    0x00007f8ab915884a
  0x00007f8ab9158837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9158841: cmp    %r11,%rax
  0x00007f8ab9158844: jb     0x00007f8ab915890d
  0x00007f8ab915884a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9158854: cmp    %r11,%rax
  0x00007f8ab9158857: jbe    0x00007f8ab9158870
  0x00007f8ab915885d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9158867: cmp    %r11,%rax
  0x00007f8ab915886a: jb     0x00007f8ab915890d
  0x00007f8ab9158870: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915887a: cmp    %r11,%rax
  0x00007f8ab915887d: jbe    0x00007f8ab9158896
  0x00007f8ab9158883: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915888d: cmp    %r11,%rax
  0x00007f8ab9158890: jb     0x00007f8ab915890d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9158896: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915889b: sub    $0x80,%rsp
  0x00007f8ab91588a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91588a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91588ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91588b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91588b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91588bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91588c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91588c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91588ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91588cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91588d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91588d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91588de: mov    %r13,0x10(%rsp)
  0x00007f8ab91588e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91588e8: mov    %r15,(%rsp)
  0x00007f8ab91588ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91588f6: movabs $0x7f8ab9158896,%rsi
  0x00007f8ab9158900: mov    %rsp,%rdx
  0x00007f8ab9158903: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158907: callq  0x00007f8aceddb9fa
  0x00007f8ab915890c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915890d: mov    %rsp,%r11
  0x00007f8ab9158910: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158914: push   %rax
  0x00007f8ab9158915: mov    %r11,%rax
  0x00007f8ab9158918: mov    0x50(%rbx),%r11
  0x00007f8ab915891c: vmovsd 0x18(%rax),%xmm0
  0x00007f8ab9158921: vmovsd 0x8(%rax),%xmm1
  0x00007f8ab9158926: mov    %rbx,0x258(%r15)
  0x00007f8ab915892d: mov    %rbx,%rax
  0x00007f8ab9158930: jmpq   *%r11
  0x00007f8ab9158933: mov    0x8(%rsi),%ebx
  0x00007f8ab9158936: shl    $0x3,%rbx
  0x00007f8ab915893a: cmp    0x10(%rax),%rbx
  0x00007f8ab915893e: mov    0x8(%rax),%rbx
  0x00007f8ab9158942: je     0x00007f8ab915894d
  0x00007f8ab9158948: jmpq   0x00007f8ab9105c40
  0x00007f8ab915894d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158955: je     0x00007f8ab9158a50
  0x00007f8ab915895b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9158960: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158968: je     0x00007f8ab9158a50
  0x00007f8ab915896e: mov    %rsp,%r13
  0x00007f8ab9158971: mov    (%rsp),%rax
  0x00007f8ab9158975: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158979: pushfq 
  0x00007f8ab915897a: sub    $0x8,%rsp
  0x00007f8ab915897e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9158983: sub    $0x80,%rsp
  0x00007f8ab915898a: mov    %rax,0x78(%rsp)
  0x00007f8ab915898f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9158994: mov    %rdx,0x68(%rsp)
  0x00007f8ab9158999: mov    %rbx,0x60(%rsp)
  0x00007f8ab915899e: mov    %rbp,0x50(%rsp)
  0x00007f8ab91589a3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91589a8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91589ad: mov    %r8,0x38(%rsp)
  0x00007f8ab91589b2: mov    %r9,0x30(%rsp)
  0x00007f8ab91589b7: mov    %r10,0x28(%rsp)
  0x00007f8ab91589bc: mov    %r11,0x20(%rsp)
  0x00007f8ab91589c1: mov    %r12,0x18(%rsp)
  0x00007f8ab91589c6: mov    %r13,0x10(%rsp)
  0x00007f8ab91589cb: mov    %r14,0x8(%rsp)
  0x00007f8ab91589d0: mov    %r15,(%rsp)
  0x00007f8ab91589d4: sub    $0x200,%rsp
  0x00007f8ab91589db: fxsave64 (%rsp)
  0x00007f8ab91589e0: mov    %rbx,%rdi
  0x00007f8ab91589e3: mov    %rax,%rsi
  0x00007f8ab91589e6: callq  0x00007f8acef8bbca
  0x00007f8ab91589eb: fxrstor64 (%rsp)
  0x00007f8ab91589f0: add    $0x200,%rsp
  0x00007f8ab91589f7: mov    (%rsp),%r15
  0x00007f8ab91589fb: mov    0x8(%rsp),%r14
  0x00007f8ab9158a00: mov    0x10(%rsp),%r13
  0x00007f8ab9158a05: mov    0x18(%rsp),%r12
  0x00007f8ab9158a0a: mov    0x20(%rsp),%r11
  0x00007f8ab9158a0f: mov    0x28(%rsp),%r10
  0x00007f8ab9158a14: mov    0x30(%rsp),%r9
  0x00007f8ab9158a19: mov    0x38(%rsp),%r8
  0x00007f8ab9158a1e: mov    0x40(%rsp),%rdi
  0x00007f8ab9158a23: mov    0x48(%rsp),%rsi
  0x00007f8ab9158a28: mov    0x50(%rsp),%rbp
  0x00007f8ab9158a2d: mov    0x60(%rsp),%rbx
  0x00007f8ab9158a32: mov    0x68(%rsp),%rdx
  0x00007f8ab9158a37: mov    0x70(%rsp),%rcx
  0x00007f8ab9158a3c: mov    0x78(%rsp),%rax
  0x00007f8ab9158a41: add    $0x80,%rsp
  0x00007f8ab9158a48: add    $0x8,%rsp
  0x00007f8ab9158a4c: popfq  
  0x00007f8ab9158a4d: mov    %r13,%rsp
  0x00007f8ab9158a50: pop    %rax
  0x00007f8ab9158a51: mov    %rsp,%r13
  0x00007f8ab9158a54: sub    $0x30,%rsp
  0x00007f8ab9158a58: mov    %rax,(%rsp)
  0x00007f8ab9158a5c: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9158a66: mov    %rax,0x20(%rsp)
  0x00007f8ab9158a6b: vmovsd %xmm0,0x18(%rsp)
  0x00007f8ab9158a71: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9158a7b: mov    %rax,0x10(%rsp)
  0x00007f8ab9158a80: vmovsd %xmm1,0x8(%rsp)
  0x00007f8ab9158a86: mov    0x40(%rbx),%rcx
  0x00007f8ab9158a8a: jmpq   *%rcx

AHE@0x00007f8ac80ec8c8: 0xbebe0000 i2c: 0x00007f8ab9158b60 c2i: 0x00007f8ab9158c9e c2iUV: 0x00007f8ab9158c71
i2c argument handler #50 for: static (JJ)J (616 bytes generated)
c2i argument handler starts at 0x7f8ab9158c9e
  0x00007f8ab9158b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9158b64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9158b6e: cmp    %r11,%rax
  0x00007f8ab9158b71: jbe    0x00007f8ab9158b8a
  0x00007f8ab9158b77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9158b81: cmp    %r11,%rax
  0x00007f8ab9158b84: jb     0x00007f8ab9158c4d
  0x00007f8ab9158b8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9158b94: cmp    %r11,%rax
  0x00007f8ab9158b97: jbe    0x00007f8ab9158bb0
  0x00007f8ab9158b9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9158ba7: cmp    %r11,%rax
  0x00007f8ab9158baa: jb     0x00007f8ab9158c4d
  0x00007f8ab9158bb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9158bba: cmp    %r11,%rax
  0x00007f8ab9158bbd: jbe    0x00007f8ab9158bd6
  0x00007f8ab9158bc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9158bcd: cmp    %r11,%rax
  0x00007f8ab9158bd0: jb     0x00007f8ab9158c4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9158bd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9158bdb: sub    $0x80,%rsp
  0x00007f8ab9158be2: mov    %rax,0x78(%rsp)
  0x00007f8ab9158be7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9158bec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9158bf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9158bf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9158bfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9158c00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9158c05: mov    %r8,0x38(%rsp)
  0x00007f8ab9158c0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9158c0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9158c14: mov    %r11,0x20(%rsp)
  0x00007f8ab9158c19: mov    %r12,0x18(%rsp)
  0x00007f8ab9158c1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9158c23: mov    %r14,0x8(%rsp)
  0x00007f8ab9158c28: mov    %r15,(%rsp)
  0x00007f8ab9158c2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9158c36: movabs $0x7f8ab9158bd6,%rsi
  0x00007f8ab9158c40: mov    %rsp,%rdx
  0x00007f8ab9158c43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158c47: callq  0x00007f8aceddb9fa
  0x00007f8ab9158c4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9158c4d: mov    %rsp,%r11
  0x00007f8ab9158c50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158c54: push   %rax
  0x00007f8ab9158c55: mov    %r11,%rax
  0x00007f8ab9158c58: mov    0x50(%rbx),%r11
  0x00007f8ab9158c5c: mov    0x18(%rax),%rsi
  0x00007f8ab9158c60: mov    0x8(%rax),%rdx
  0x00007f8ab9158c64: mov    %rbx,0x258(%r15)
  0x00007f8ab9158c6b: mov    %rbx,%rax
  0x00007f8ab9158c6e: jmpq   *%r11
  0x00007f8ab9158c71: mov    0x8(%rsi),%ebx
  0x00007f8ab9158c74: shl    $0x3,%rbx
  0x00007f8ab9158c78: cmp    0x10(%rax),%rbx
  0x00007f8ab9158c7c: mov    0x8(%rax),%rbx
  0x00007f8ab9158c80: je     0x00007f8ab9158c8b
  0x00007f8ab9158c86: jmpq   0x00007f8ab9105c40
  0x00007f8ab9158c8b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158c93: je     0x00007f8ab9158d8e
  0x00007f8ab9158c99: jmpq   0x00007f8ab9105c40
  0x00007f8ab9158c9e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158ca6: je     0x00007f8ab9158d8e
  0x00007f8ab9158cac: mov    %rsp,%r13
  0x00007f8ab9158caf: mov    (%rsp),%rax
  0x00007f8ab9158cb3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158cb7: pushfq 
  0x00007f8ab9158cb8: sub    $0x8,%rsp
  0x00007f8ab9158cbc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9158cc1: sub    $0x80,%rsp
  0x00007f8ab9158cc8: mov    %rax,0x78(%rsp)
  0x00007f8ab9158ccd: mov    %rcx,0x70(%rsp)
  0x00007f8ab9158cd2: mov    %rdx,0x68(%rsp)
  0x00007f8ab9158cd7: mov    %rbx,0x60(%rsp)
  0x00007f8ab9158cdc: mov    %rbp,0x50(%rsp)
  0x00007f8ab9158ce1: mov    %rsi,0x48(%rsp)
  0x00007f8ab9158ce6: mov    %rdi,0x40(%rsp)
  0x00007f8ab9158ceb: mov    %r8,0x38(%rsp)
  0x00007f8ab9158cf0: mov    %r9,0x30(%rsp)
  0x00007f8ab9158cf5: mov    %r10,0x28(%rsp)
  0x00007f8ab9158cfa: mov    %r11,0x20(%rsp)
  0x00007f8ab9158cff: mov    %r12,0x18(%rsp)
  0x00007f8ab9158d04: mov    %r13,0x10(%rsp)
  0x00007f8ab9158d09: mov    %r14,0x8(%rsp)
  0x00007f8ab9158d0e: mov    %r15,(%rsp)
  0x00007f8ab9158d12: sub    $0x200,%rsp
  0x00007f8ab9158d19: fxsave64 (%rsp)
  0x00007f8ab9158d1e: mov    %rbx,%rdi
  0x00007f8ab9158d21: mov    %rax,%rsi
  0x00007f8ab9158d24: callq  0x00007f8acef8bbca
  0x00007f8ab9158d29: fxrstor64 (%rsp)
  0x00007f8ab9158d2e: add    $0x200,%rsp
  0x00007f8ab9158d35: mov    (%rsp),%r15
  0x00007f8ab9158d39: mov    0x8(%rsp),%r14
  0x00007f8ab9158d3e: mov    0x10(%rsp),%r13
  0x00007f8ab9158d43: mov    0x18(%rsp),%r12
  0x00007f8ab9158d48: mov    0x20(%rsp),%r11
  0x00007f8ab9158d4d: mov    0x28(%rsp),%r10
  0x00007f8ab9158d52: mov    0x30(%rsp),%r9
  0x00007f8ab9158d57: mov    0x38(%rsp),%r8
  0x00007f8ab9158d5c: mov    0x40(%rsp),%rdi
  0x00007f8ab9158d61: mov    0x48(%rsp),%rsi
  0x00007f8ab9158d66: mov    0x50(%rsp),%rbp
  0x00007f8ab9158d6b: mov    0x60(%rsp),%rbx
  0x00007f8ab9158d70: mov    0x68(%rsp),%rdx
  0x00007f8ab9158d75: mov    0x70(%rsp),%rcx
  0x00007f8ab9158d7a: mov    0x78(%rsp),%rax
  0x00007f8ab9158d7f: add    $0x80,%rsp
  0x00007f8ab9158d86: add    $0x8,%rsp
  0x00007f8ab9158d8a: popfq  
  0x00007f8ab9158d8b: mov    %r13,%rsp
  0x00007f8ab9158d8e: pop    %rax
  0x00007f8ab9158d8f: mov    %rsp,%r13
  0x00007f8ab9158d92: sub    $0x30,%rsp
  0x00007f8ab9158d96: mov    %rax,(%rsp)
  0x00007f8ab9158d9a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9158da4: mov    %rax,0x20(%rsp)
  0x00007f8ab9158da9: mov    %rsi,0x18(%rsp)
  0x00007f8ab9158dae: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9158db8: mov    %rax,0x10(%rsp)
  0x00007f8ab9158dbd: mov    %rdx,0x8(%rsp)
  0x00007f8ab9158dc2: mov    0x40(%rbx),%rcx
  0x00007f8ab9158dc6: jmpq   *%rcx

AHE@0x00007f8ac80ec910: 0x6a000000 i2c: 0x00007f8ab9158ea0 c2i: 0x00007f8ab9158fde c2iUV: 0x00007f8ab9158fb1
i2c argument handler #51 for: static (FI)F (586 bytes generated)
c2i argument handler starts at 0x7f8ab9158fde
  0x00007f8ab9158ea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9158ea4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9158eae: cmp    %r11,%rax
  0x00007f8ab9158eb1: jbe    0x00007f8ab9158eca
  0x00007f8ab9158eb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9158ec1: cmp    %r11,%rax
  0x00007f8ab9158ec4: jb     0x00007f8ab9158f8d
  0x00007f8ab9158eca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9158ed4: cmp    %r11,%rax
  0x00007f8ab9158ed7: jbe    0x00007f8ab9158ef0
  0x00007f8ab9158edd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9158ee7: cmp    %r11,%rax
  0x00007f8ab9158eea: jb     0x00007f8ab9158f8d
  0x00007f8ab9158ef0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9158efa: cmp    %r11,%rax
  0x00007f8ab9158efd: jbe    0x00007f8ab9158f16
  0x00007f8ab9158f03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9158f0d: cmp    %r11,%rax
  0x00007f8ab9158f10: jb     0x00007f8ab9158f8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9158f16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9158f1b: sub    $0x80,%rsp
  0x00007f8ab9158f22: mov    %rax,0x78(%rsp)
  0x00007f8ab9158f27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9158f2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9158f31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9158f36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9158f3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9158f40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9158f45: mov    %r8,0x38(%rsp)
  0x00007f8ab9158f4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9158f4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9158f54: mov    %r11,0x20(%rsp)
  0x00007f8ab9158f59: mov    %r12,0x18(%rsp)
  0x00007f8ab9158f5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9158f63: mov    %r14,0x8(%rsp)
  0x00007f8ab9158f68: mov    %r15,(%rsp)
  0x00007f8ab9158f6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9158f76: movabs $0x7f8ab9158f16,%rsi
  0x00007f8ab9158f80: mov    %rsp,%rdx
  0x00007f8ab9158f83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158f87: callq  0x00007f8aceddb9fa
  0x00007f8ab9158f8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9158f8d: mov    %rsp,%r11
  0x00007f8ab9158f90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158f94: push   %rax
  0x00007f8ab9158f95: mov    %r11,%rax
  0x00007f8ab9158f98: mov    0x50(%rbx),%r11
  0x00007f8ab9158f9c: vmovss 0x10(%rax),%xmm0
  0x00007f8ab9158fa1: mov    0x8(%rax),%esi
  0x00007f8ab9158fa4: mov    %rbx,0x258(%r15)
  0x00007f8ab9158fab: mov    %rbx,%rax
  0x00007f8ab9158fae: jmpq   *%r11
  0x00007f8ab9158fb1: mov    0x8(%rsi),%ebx
  0x00007f8ab9158fb4: shl    $0x3,%rbx
  0x00007f8ab9158fb8: cmp    0x10(%rax),%rbx
  0x00007f8ab9158fbc: mov    0x8(%rax),%rbx
  0x00007f8ab9158fc0: je     0x00007f8ab9158fcb
  0x00007f8ab9158fc6: jmpq   0x00007f8ab9105c40
  0x00007f8ab9158fcb: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158fd3: je     0x00007f8ab91590ce
  0x00007f8ab9158fd9: jmpq   0x00007f8ab9105c40
  0x00007f8ab9158fde: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9158fe6: je     0x00007f8ab91590ce
  0x00007f8ab9158fec: mov    %rsp,%r13
  0x00007f8ab9158fef: mov    (%rsp),%rax
  0x00007f8ab9158ff3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9158ff7: pushfq 
  0x00007f8ab9158ff8: sub    $0x8,%rsp
  0x00007f8ab9158ffc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9159001: sub    $0x80,%rsp
  0x00007f8ab9159008: mov    %rax,0x78(%rsp)
  0x00007f8ab915900d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9159012: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159017: mov    %rbx,0x60(%rsp)
  0x00007f8ab915901c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9159021: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159026: mov    %rdi,0x40(%rsp)
  0x00007f8ab915902b: mov    %r8,0x38(%rsp)
  0x00007f8ab9159030: mov    %r9,0x30(%rsp)
  0x00007f8ab9159035: mov    %r10,0x28(%rsp)
  0x00007f8ab915903a: mov    %r11,0x20(%rsp)
  0x00007f8ab915903f: mov    %r12,0x18(%rsp)
  0x00007f8ab9159044: mov    %r13,0x10(%rsp)
  0x00007f8ab9159049: mov    %r14,0x8(%rsp)
  0x00007f8ab915904e: mov    %r15,(%rsp)
  0x00007f8ab9159052: sub    $0x200,%rsp
  0x00007f8ab9159059: fxsave64 (%rsp)
  0x00007f8ab915905e: mov    %rbx,%rdi
  0x00007f8ab9159061: mov    %rax,%rsi
  0x00007f8ab9159064: callq  0x00007f8acef8bbca
  0x00007f8ab9159069: fxrstor64 (%rsp)
  0x00007f8ab915906e: add    $0x200,%rsp
  0x00007f8ab9159075: mov    (%rsp),%r15
  0x00007f8ab9159079: mov    0x8(%rsp),%r14
  0x00007f8ab915907e: mov    0x10(%rsp),%r13
  0x00007f8ab9159083: mov    0x18(%rsp),%r12
  0x00007f8ab9159088: mov    0x20(%rsp),%r11
  0x00007f8ab915908d: mov    0x28(%rsp),%r10
  0x00007f8ab9159092: mov    0x30(%rsp),%r9
  0x00007f8ab9159097: mov    0x38(%rsp),%r8
  0x00007f8ab915909c: mov    0x40(%rsp),%rdi
  0x00007f8ab91590a1: mov    0x48(%rsp),%rsi
  0x00007f8ab91590a6: mov    0x50(%rsp),%rbp
  0x00007f8ab91590ab: mov    0x60(%rsp),%rbx
  0x00007f8ab91590b0: mov    0x68(%rsp),%rdx
  0x00007f8ab91590b5: mov    0x70(%rsp),%rcx
  0x00007f8ab91590ba: mov    0x78(%rsp),%rax
  0x00007f8ab91590bf: add    $0x80,%rsp
  0x00007f8ab91590c6: add    $0x8,%rsp
  0x00007f8ab91590ca: popfq  
  0x00007f8ab91590cb: mov    %r13,%rsp
  0x00007f8ab91590ce: pop    %rax
  0x00007f8ab91590cf: mov    %rsp,%r13
  0x00007f8ab91590d2: sub    $0x20,%rsp
  0x00007f8ab91590d6: mov    %rax,(%rsp)
  0x00007f8ab91590da: vmovss %xmm0,0x10(%rsp)
  0x00007f8ab91590e0: mov    %esi,0x8(%rsp)
  0x00007f8ab91590e4: mov    0x40(%rbx),%rcx
  0x00007f8ab91590e8: jmpq   *%rcx

AHE@0x00007f8ac80ec958: 0x7ea00000 i2c: 0x00007f8ab91591a0 c2i: 0x00007f8ab91592de c2iUV: 0x00007f8ab91592b1
i2c argument handler #52 for: static (DI)D (601 bytes generated)
c2i argument handler starts at 0x7f8ab91592de
  0x00007f8ab91591a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91591a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91591ae: cmp    %r11,%rax
  0x00007f8ab91591b1: jbe    0x00007f8ab91591ca
  0x00007f8ab91591b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91591c1: cmp    %r11,%rax
  0x00007f8ab91591c4: jb     0x00007f8ab915928d
  0x00007f8ab91591ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91591d4: cmp    %r11,%rax
  0x00007f8ab91591d7: jbe    0x00007f8ab91591f0
  0x00007f8ab91591dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91591e7: cmp    %r11,%rax
  0x00007f8ab91591ea: jb     0x00007f8ab915928d
  0x00007f8ab91591f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91591fa: cmp    %r11,%rax
  0x00007f8ab91591fd: jbe    0x00007f8ab9159216
  0x00007f8ab9159203: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915920d: cmp    %r11,%rax
  0x00007f8ab9159210: jb     0x00007f8ab915928d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9159216: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915921b: sub    $0x80,%rsp
  0x00007f8ab9159222: mov    %rax,0x78(%rsp)
  0x00007f8ab9159227: mov    %rcx,0x70(%rsp)
  0x00007f8ab915922c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159231: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159236: mov    %rbp,0x50(%rsp)
  0x00007f8ab915923b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159240: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159245: mov    %r8,0x38(%rsp)
  0x00007f8ab915924a: mov    %r9,0x30(%rsp)
  0x00007f8ab915924f: mov    %r10,0x28(%rsp)
  0x00007f8ab9159254: mov    %r11,0x20(%rsp)
  0x00007f8ab9159259: mov    %r12,0x18(%rsp)
  0x00007f8ab915925e: mov    %r13,0x10(%rsp)
  0x00007f8ab9159263: mov    %r14,0x8(%rsp)
  0x00007f8ab9159268: mov    %r15,(%rsp)
  0x00007f8ab915926c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9159276: movabs $0x7f8ab9159216,%rsi
  0x00007f8ab9159280: mov    %rsp,%rdx
  0x00007f8ab9159283: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159287: callq  0x00007f8aceddb9fa
  0x00007f8ab915928c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915928d: mov    %rsp,%r11
  0x00007f8ab9159290: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159294: push   %rax
  0x00007f8ab9159295: mov    %r11,%rax
  0x00007f8ab9159298: mov    0x50(%rbx),%r11
  0x00007f8ab915929c: vmovsd 0x10(%rax),%xmm0
  0x00007f8ab91592a1: mov    0x8(%rax),%esi
  0x00007f8ab91592a4: mov    %rbx,0x258(%r15)
  0x00007f8ab91592ab: mov    %rbx,%rax
  0x00007f8ab91592ae: jmpq   *%r11
  0x00007f8ab91592b1: mov    0x8(%rsi),%ebx
  0x00007f8ab91592b4: shl    $0x3,%rbx
  0x00007f8ab91592b8: cmp    0x10(%rax),%rbx
  0x00007f8ab91592bc: mov    0x8(%rax),%rbx
  0x00007f8ab91592c0: je     0x00007f8ab91592cb
  0x00007f8ab91592c6: jmpq   0x00007f8ab9105c40
  0x00007f8ab91592cb: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91592d3: je     0x00007f8ab91593ce
  0x00007f8ab91592d9: jmpq   0x00007f8ab9105c40
  0x00007f8ab91592de: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91592e6: je     0x00007f8ab91593ce
  0x00007f8ab91592ec: mov    %rsp,%r13
  0x00007f8ab91592ef: mov    (%rsp),%rax
  0x00007f8ab91592f3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91592f7: pushfq 
  0x00007f8ab91592f8: sub    $0x8,%rsp
  0x00007f8ab91592fc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9159301: sub    $0x80,%rsp
  0x00007f8ab9159308: mov    %rax,0x78(%rsp)
  0x00007f8ab915930d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9159312: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159317: mov    %rbx,0x60(%rsp)
  0x00007f8ab915931c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9159321: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159326: mov    %rdi,0x40(%rsp)
  0x00007f8ab915932b: mov    %r8,0x38(%rsp)
  0x00007f8ab9159330: mov    %r9,0x30(%rsp)
  0x00007f8ab9159335: mov    %r10,0x28(%rsp)
  0x00007f8ab915933a: mov    %r11,0x20(%rsp)
  0x00007f8ab915933f: mov    %r12,0x18(%rsp)
  0x00007f8ab9159344: mov    %r13,0x10(%rsp)
  0x00007f8ab9159349: mov    %r14,0x8(%rsp)
  0x00007f8ab915934e: mov    %r15,(%rsp)
  0x00007f8ab9159352: sub    $0x200,%rsp
  0x00007f8ab9159359: fxsave64 (%rsp)
  0x00007f8ab915935e: mov    %rbx,%rdi
  0x00007f8ab9159361: mov    %rax,%rsi
  0x00007f8ab9159364: callq  0x00007f8acef8bbca
  0x00007f8ab9159369: fxrstor64 (%rsp)
  0x00007f8ab915936e: add    $0x200,%rsp
  0x00007f8ab9159375: mov    (%rsp),%r15
  0x00007f8ab9159379: mov    0x8(%rsp),%r14
  0x00007f8ab915937e: mov    0x10(%rsp),%r13
  0x00007f8ab9159383: mov    0x18(%rsp),%r12
  0x00007f8ab9159388: mov    0x20(%rsp),%r11
  0x00007f8ab915938d: mov    0x28(%rsp),%r10
  0x00007f8ab9159392: mov    0x30(%rsp),%r9
  0x00007f8ab9159397: mov    0x38(%rsp),%r8
  0x00007f8ab915939c: mov    0x40(%rsp),%rdi
  0x00007f8ab91593a1: mov    0x48(%rsp),%rsi
  0x00007f8ab91593a6: mov    0x50(%rsp),%rbp
  0x00007f8ab91593ab: mov    0x60(%rsp),%rbx
  0x00007f8ab91593b0: mov    0x68(%rsp),%rdx
  0x00007f8ab91593b5: mov    0x70(%rsp),%rcx
  0x00007f8ab91593ba: mov    0x78(%rsp),%rax
  0x00007f8ab91593bf: add    $0x80,%rsp
  0x00007f8ab91593c6: add    $0x8,%rsp
  0x00007f8ab91593ca: popfq  
  0x00007f8ab91593cb: mov    %r13,%rsp
  0x00007f8ab91593ce: pop    %rax
  0x00007f8ab91593cf: mov    %rsp,%r13
  0x00007f8ab91593d2: sub    $0x20,%rsp
  0x00007f8ab91593d6: mov    %rax,(%rsp)
  0x00007f8ab91593da: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab91593e4: mov    %rax,0x18(%rsp)
  0x00007f8ab91593e9: vmovsd %xmm0,0x10(%rsp)
  0x00007f8ab91593ef: mov    %esi,0x8(%rsp)
  0x00007f8ab91593f3: mov    0x40(%rbx),%rcx
  0x00007f8ab91593f7: jmpq   *%rcx

AHE@0x00007f8ac80ec9a0: 0xbaaaa000 i2c: 0x00007f8ab91594a0 c2i: 0x00007f8ab91595e8 c2iUV: 0x00007f8ab91595bb
i2c argument handler #53 for: receiver (IIII)V (609 bytes generated)
c2i argument handler starts at 0x7f8ab91595e8
  0x00007f8ab91594a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91594a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91594ae: cmp    %r11,%rax
  0x00007f8ab91594b1: jbe    0x00007f8ab91594ca
  0x00007f8ab91594b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91594c1: cmp    %r11,%rax
  0x00007f8ab91594c4: jb     0x00007f8ab915958d
  0x00007f8ab91594ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91594d4: cmp    %r11,%rax
  0x00007f8ab91594d7: jbe    0x00007f8ab91594f0
  0x00007f8ab91594dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91594e7: cmp    %r11,%rax
  0x00007f8ab91594ea: jb     0x00007f8ab915958d
  0x00007f8ab91594f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91594fa: cmp    %r11,%rax
  0x00007f8ab91594fd: jbe    0x00007f8ab9159516
  0x00007f8ab9159503: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915950d: cmp    %r11,%rax
  0x00007f8ab9159510: jb     0x00007f8ab915958d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9159516: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915951b: sub    $0x80,%rsp
  0x00007f8ab9159522: mov    %rax,0x78(%rsp)
  0x00007f8ab9159527: mov    %rcx,0x70(%rsp)
  0x00007f8ab915952c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159531: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159536: mov    %rbp,0x50(%rsp)
  0x00007f8ab915953b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159540: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159545: mov    %r8,0x38(%rsp)
  0x00007f8ab915954a: mov    %r9,0x30(%rsp)
  0x00007f8ab915954f: mov    %r10,0x28(%rsp)
  0x00007f8ab9159554: mov    %r11,0x20(%rsp)
  0x00007f8ab9159559: mov    %r12,0x18(%rsp)
  0x00007f8ab915955e: mov    %r13,0x10(%rsp)
  0x00007f8ab9159563: mov    %r14,0x8(%rsp)
  0x00007f8ab9159568: mov    %r15,(%rsp)
  0x00007f8ab915956c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9159576: movabs $0x7f8ab9159516,%rsi
  0x00007f8ab9159580: mov    %rsp,%rdx
  0x00007f8ab9159583: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159587: callq  0x00007f8aceddb9fa
  0x00007f8ab915958c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915958d: mov    %rsp,%r11
  0x00007f8ab9159590: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159594: push   %rax
  0x00007f8ab9159595: mov    %r11,%rax
  0x00007f8ab9159598: mov    0x50(%rbx),%r11
  0x00007f8ab915959c: mov    0x28(%rax),%rsi
  0x00007f8ab91595a0: mov    0x20(%rax),%edx
  0x00007f8ab91595a3: mov    0x18(%rax),%ecx
  0x00007f8ab91595a6: mov    0x10(%rax),%r8d
  0x00007f8ab91595aa: mov    0x8(%rax),%r9d
  0x00007f8ab91595ae: mov    %rbx,0x258(%r15)
  0x00007f8ab91595b5: mov    %rbx,%rax
  0x00007f8ab91595b8: jmpq   *%r11
  0x00007f8ab91595bb: mov    0x8(%rsi),%ebx
  0x00007f8ab91595be: shl    $0x3,%rbx
  0x00007f8ab91595c2: cmp    0x10(%rax),%rbx
  0x00007f8ab91595c6: mov    0x8(%rax),%rbx
  0x00007f8ab91595ca: je     0x00007f8ab91595d5
  0x00007f8ab91595d0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91595d5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91595dd: je     0x00007f8ab91596d8
  0x00007f8ab91595e3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91595e8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91595f0: je     0x00007f8ab91596d8
  0x00007f8ab91595f6: mov    %rsp,%r13
  0x00007f8ab91595f9: mov    (%rsp),%rax
  0x00007f8ab91595fd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159601: pushfq 
  0x00007f8ab9159602: sub    $0x8,%rsp
  0x00007f8ab9159606: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915960b: sub    $0x80,%rsp
  0x00007f8ab9159612: mov    %rax,0x78(%rsp)
  0x00007f8ab9159617: mov    %rcx,0x70(%rsp)
  0x00007f8ab915961c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159621: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159626: mov    %rbp,0x50(%rsp)
  0x00007f8ab915962b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159630: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159635: mov    %r8,0x38(%rsp)
  0x00007f8ab915963a: mov    %r9,0x30(%rsp)
  0x00007f8ab915963f: mov    %r10,0x28(%rsp)
  0x00007f8ab9159644: mov    %r11,0x20(%rsp)
  0x00007f8ab9159649: mov    %r12,0x18(%rsp)
  0x00007f8ab915964e: mov    %r13,0x10(%rsp)
  0x00007f8ab9159653: mov    %r14,0x8(%rsp)
  0x00007f8ab9159658: mov    %r15,(%rsp)
  0x00007f8ab915965c: sub    $0x200,%rsp
  0x00007f8ab9159663: fxsave64 (%rsp)
  0x00007f8ab9159668: mov    %rbx,%rdi
  0x00007f8ab915966b: mov    %rax,%rsi
  0x00007f8ab915966e: callq  0x00007f8acef8bbca
  0x00007f8ab9159673: fxrstor64 (%rsp)
  0x00007f8ab9159678: add    $0x200,%rsp
  0x00007f8ab915967f: mov    (%rsp),%r15
  0x00007f8ab9159683: mov    0x8(%rsp),%r14
  0x00007f8ab9159688: mov    0x10(%rsp),%r13
  0x00007f8ab915968d: mov    0x18(%rsp),%r12
  0x00007f8ab9159692: mov    0x20(%rsp),%r11
  0x00007f8ab9159697: mov    0x28(%rsp),%r10
  0x00007f8ab915969c: mov    0x30(%rsp),%r9
  0x00007f8ab91596a1: mov    0x38(%rsp),%r8
  0x00007f8ab91596a6: mov    0x40(%rsp),%rdi
  0x00007f8ab91596ab: mov    0x48(%rsp),%rsi
  0x00007f8ab91596b0: mov    0x50(%rsp),%rbp
  0x00007f8ab91596b5: mov    0x60(%rsp),%rbx
  0x00007f8ab91596ba: mov    0x68(%rsp),%rdx
  0x00007f8ab91596bf: mov    0x70(%rsp),%rcx
  0x00007f8ab91596c4: mov    0x78(%rsp),%rax
  0x00007f8ab91596c9: add    $0x80,%rsp
  0x00007f8ab91596d0: add    $0x8,%rsp
  0x00007f8ab91596d4: popfq  
  0x00007f8ab91596d5: mov    %r13,%rsp
  0x00007f8ab91596d8: pop    %rax
  0x00007f8ab91596d9: mov    %rsp,%r13
  0x00007f8ab91596dc: sub    $0x30,%rsp
  0x00007f8ab91596e0: mov    %rax,(%rsp)
  0x00007f8ab91596e4: mov    %rsi,0x28(%rsp)
  0x00007f8ab91596e9: mov    %edx,0x20(%rsp)
  0x00007f8ab91596ed: mov    %ecx,0x18(%rsp)
  0x00007f8ab91596f1: mov    %r8d,0x10(%rsp)
  0x00007f8ab91596f6: mov    %r9d,0x8(%rsp)
  0x00007f8ab91596fb: mov    0x40(%rbx),%rcx
  0x00007f8ab91596ff: jmpq   *%rcx

AHE@0x00007f8ac80ec9e8: 0xbb7e0000 i2c: 0x00007f8ab91597e0 c2i: 0x00007f8ab9159923 c2iUV: 0x00007f8ab91598f6
i2c argument handler #54 for: receiver (Ljava/lang/Object;D)V (612 bytes generated)
c2i argument handler starts at 0x7f8ab9159923
  0x00007f8ab91597e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91597e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91597ee: cmp    %r11,%rax
  0x00007f8ab91597f1: jbe    0x00007f8ab915980a
  0x00007f8ab91597f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9159801: cmp    %r11,%rax
  0x00007f8ab9159804: jb     0x00007f8ab91598cd
  0x00007f8ab915980a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9159814: cmp    %r11,%rax
  0x00007f8ab9159817: jbe    0x00007f8ab9159830
  0x00007f8ab915981d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9159827: cmp    %r11,%rax
  0x00007f8ab915982a: jb     0x00007f8ab91598cd
  0x00007f8ab9159830: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915983a: cmp    %r11,%rax
  0x00007f8ab915983d: jbe    0x00007f8ab9159856
  0x00007f8ab9159843: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915984d: cmp    %r11,%rax
  0x00007f8ab9159850: jb     0x00007f8ab91598cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9159856: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915985b: sub    $0x80,%rsp
  0x00007f8ab9159862: mov    %rax,0x78(%rsp)
  0x00007f8ab9159867: mov    %rcx,0x70(%rsp)
  0x00007f8ab915986c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159871: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159876: mov    %rbp,0x50(%rsp)
  0x00007f8ab915987b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159880: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159885: mov    %r8,0x38(%rsp)
  0x00007f8ab915988a: mov    %r9,0x30(%rsp)
  0x00007f8ab915988f: mov    %r10,0x28(%rsp)
  0x00007f8ab9159894: mov    %r11,0x20(%rsp)
  0x00007f8ab9159899: mov    %r12,0x18(%rsp)
  0x00007f8ab915989e: mov    %r13,0x10(%rsp)
  0x00007f8ab91598a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91598a8: mov    %r15,(%rsp)
  0x00007f8ab91598ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91598b6: movabs $0x7f8ab9159856,%rsi
  0x00007f8ab91598c0: mov    %rsp,%rdx
  0x00007f8ab91598c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91598c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91598cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91598cd: mov    %rsp,%r11
  0x00007f8ab91598d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91598d4: push   %rax
  0x00007f8ab91598d5: mov    %r11,%rax
  0x00007f8ab91598d8: mov    0x50(%rbx),%r11
  0x00007f8ab91598dc: mov    0x20(%rax),%rsi
  0x00007f8ab91598e0: mov    0x18(%rax),%rdx
  0x00007f8ab91598e4: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab91598e9: mov    %rbx,0x258(%r15)
  0x00007f8ab91598f0: mov    %rbx,%rax
  0x00007f8ab91598f3: jmpq   *%r11
  0x00007f8ab91598f6: mov    0x8(%rsi),%ebx
  0x00007f8ab91598f9: shl    $0x3,%rbx
  0x00007f8ab91598fd: cmp    0x10(%rax),%rbx
  0x00007f8ab9159901: mov    0x8(%rax),%rbx
  0x00007f8ab9159905: je     0x00007f8ab9159910
  0x00007f8ab915990b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9159910: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9159918: je     0x00007f8ab9159a13
  0x00007f8ab915991e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9159923: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915992b: je     0x00007f8ab9159a13
  0x00007f8ab9159931: mov    %rsp,%r13
  0x00007f8ab9159934: mov    (%rsp),%rax
  0x00007f8ab9159938: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915993c: pushfq 
  0x00007f8ab915993d: sub    $0x8,%rsp
  0x00007f8ab9159941: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9159946: sub    $0x80,%rsp
  0x00007f8ab915994d: mov    %rax,0x78(%rsp)
  0x00007f8ab9159952: mov    %rcx,0x70(%rsp)
  0x00007f8ab9159957: mov    %rdx,0x68(%rsp)
  0x00007f8ab915995c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159961: mov    %rbp,0x50(%rsp)
  0x00007f8ab9159966: mov    %rsi,0x48(%rsp)
  0x00007f8ab915996b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159970: mov    %r8,0x38(%rsp)
  0x00007f8ab9159975: mov    %r9,0x30(%rsp)
  0x00007f8ab915997a: mov    %r10,0x28(%rsp)
  0x00007f8ab915997f: mov    %r11,0x20(%rsp)
  0x00007f8ab9159984: mov    %r12,0x18(%rsp)
  0x00007f8ab9159989: mov    %r13,0x10(%rsp)
  0x00007f8ab915998e: mov    %r14,0x8(%rsp)
  0x00007f8ab9159993: mov    %r15,(%rsp)
  0x00007f8ab9159997: sub    $0x200,%rsp
  0x00007f8ab915999e: fxsave64 (%rsp)
  0x00007f8ab91599a3: mov    %rbx,%rdi
  0x00007f8ab91599a6: mov    %rax,%rsi
  0x00007f8ab91599a9: callq  0x00007f8acef8bbca
  0x00007f8ab91599ae: fxrstor64 (%rsp)
  0x00007f8ab91599b3: add    $0x200,%rsp
  0x00007f8ab91599ba: mov    (%rsp),%r15
  0x00007f8ab91599be: mov    0x8(%rsp),%r14
  0x00007f8ab91599c3: mov    0x10(%rsp),%r13
  0x00007f8ab91599c8: mov    0x18(%rsp),%r12
  0x00007f8ab91599cd: mov    0x20(%rsp),%r11
  0x00007f8ab91599d2: mov    0x28(%rsp),%r10
  0x00007f8ab91599d7: mov    0x30(%rsp),%r9
  0x00007f8ab91599dc: mov    0x38(%rsp),%r8
  0x00007f8ab91599e1: mov    0x40(%rsp),%rdi
  0x00007f8ab91599e6: mov    0x48(%rsp),%rsi
  0x00007f8ab91599eb: mov    0x50(%rsp),%rbp
  0x00007f8ab91599f0: mov    0x60(%rsp),%rbx
  0x00007f8ab91599f5: mov    0x68(%rsp),%rdx
  0x00007f8ab91599fa: mov    0x70(%rsp),%rcx
  0x00007f8ab91599ff: mov    0x78(%rsp),%rax
  0x00007f8ab9159a04: add    $0x80,%rsp
  0x00007f8ab9159a0b: add    $0x8,%rsp
  0x00007f8ab9159a0f: popfq  
  0x00007f8ab9159a10: mov    %r13,%rsp
  0x00007f8ab9159a13: pop    %rax
  0x00007f8ab9159a14: mov    %rsp,%r13
  0x00007f8ab9159a17: sub    $0x30,%rsp
  0x00007f8ab9159a1b: mov    %rax,(%rsp)
  0x00007f8ab9159a1f: mov    %rsi,0x20(%rsp)
  0x00007f8ab9159a24: mov    %rdx,0x18(%rsp)
  0x00007f8ab9159a29: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9159a33: mov    %rax,0x10(%rsp)
  0x00007f8ab9159a38: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9159a3e: mov    0x40(%rbx),%rcx
  0x00007f8ab9159a42: jmpq   *%rcx

AHE@0x00007f8ac80eca30: 0xbb600000 i2c: 0x00007f8ab9159b20 c2i: 0x00007f8ab9159c63 c2iUV: 0x00007f8ab9159c36
i2c argument handler #55 for: receiver (Ljava/lang/Object;F)V (597 bytes generated)
c2i argument handler starts at 0x7f8ab9159c63
  0x00007f8ab9159b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9159b24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9159b2e: cmp    %r11,%rax
  0x00007f8ab9159b31: jbe    0x00007f8ab9159b4a
  0x00007f8ab9159b37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9159b41: cmp    %r11,%rax
  0x00007f8ab9159b44: jb     0x00007f8ab9159c0d
  0x00007f8ab9159b4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9159b54: cmp    %r11,%rax
  0x00007f8ab9159b57: jbe    0x00007f8ab9159b70
  0x00007f8ab9159b5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9159b67: cmp    %r11,%rax
  0x00007f8ab9159b6a: jb     0x00007f8ab9159c0d
  0x00007f8ab9159b70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9159b7a: cmp    %r11,%rax
  0x00007f8ab9159b7d: jbe    0x00007f8ab9159b96
  0x00007f8ab9159b83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9159b8d: cmp    %r11,%rax
  0x00007f8ab9159b90: jb     0x00007f8ab9159c0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9159b96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9159b9b: sub    $0x80,%rsp
  0x00007f8ab9159ba2: mov    %rax,0x78(%rsp)
  0x00007f8ab9159ba7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9159bac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159bb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159bb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9159bbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159bc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159bc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9159bca: mov    %r9,0x30(%rsp)
  0x00007f8ab9159bcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9159bd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9159bd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9159bde: mov    %r13,0x10(%rsp)
  0x00007f8ab9159be3: mov    %r14,0x8(%rsp)
  0x00007f8ab9159be8: mov    %r15,(%rsp)
  0x00007f8ab9159bec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9159bf6: movabs $0x7f8ab9159b96,%rsi
  0x00007f8ab9159c00: mov    %rsp,%rdx
  0x00007f8ab9159c03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159c07: callq  0x00007f8aceddb9fa
  0x00007f8ab9159c0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9159c0d: mov    %rsp,%r11
  0x00007f8ab9159c10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159c14: push   %rax
  0x00007f8ab9159c15: mov    %r11,%rax
  0x00007f8ab9159c18: mov    0x50(%rbx),%r11
  0x00007f8ab9159c1c: mov    0x18(%rax),%rsi
  0x00007f8ab9159c20: mov    0x10(%rax),%rdx
  0x00007f8ab9159c24: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9159c29: mov    %rbx,0x258(%r15)
  0x00007f8ab9159c30: mov    %rbx,%rax
  0x00007f8ab9159c33: jmpq   *%r11
  0x00007f8ab9159c36: mov    0x8(%rsi),%ebx
  0x00007f8ab9159c39: shl    $0x3,%rbx
  0x00007f8ab9159c3d: cmp    0x10(%rax),%rbx
  0x00007f8ab9159c41: mov    0x8(%rax),%rbx
  0x00007f8ab9159c45: je     0x00007f8ab9159c50
  0x00007f8ab9159c4b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9159c50: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9159c58: je     0x00007f8ab9159d53
  0x00007f8ab9159c5e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9159c63: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9159c6b: je     0x00007f8ab9159d53
  0x00007f8ab9159c71: mov    %rsp,%r13
  0x00007f8ab9159c74: mov    (%rsp),%rax
  0x00007f8ab9159c78: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159c7c: pushfq 
  0x00007f8ab9159c7d: sub    $0x8,%rsp
  0x00007f8ab9159c81: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9159c86: sub    $0x80,%rsp
  0x00007f8ab9159c8d: mov    %rax,0x78(%rsp)
  0x00007f8ab9159c92: mov    %rcx,0x70(%rsp)
  0x00007f8ab9159c97: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159c9c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159ca1: mov    %rbp,0x50(%rsp)
  0x00007f8ab9159ca6: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159cab: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159cb0: mov    %r8,0x38(%rsp)
  0x00007f8ab9159cb5: mov    %r9,0x30(%rsp)
  0x00007f8ab9159cba: mov    %r10,0x28(%rsp)
  0x00007f8ab9159cbf: mov    %r11,0x20(%rsp)
  0x00007f8ab9159cc4: mov    %r12,0x18(%rsp)
  0x00007f8ab9159cc9: mov    %r13,0x10(%rsp)
  0x00007f8ab9159cce: mov    %r14,0x8(%rsp)
  0x00007f8ab9159cd3: mov    %r15,(%rsp)
  0x00007f8ab9159cd7: sub    $0x200,%rsp
  0x00007f8ab9159cde: fxsave64 (%rsp)
  0x00007f8ab9159ce3: mov    %rbx,%rdi
  0x00007f8ab9159ce6: mov    %rax,%rsi
  0x00007f8ab9159ce9: callq  0x00007f8acef8bbca
  0x00007f8ab9159cee: fxrstor64 (%rsp)
  0x00007f8ab9159cf3: add    $0x200,%rsp
  0x00007f8ab9159cfa: mov    (%rsp),%r15
  0x00007f8ab9159cfe: mov    0x8(%rsp),%r14
  0x00007f8ab9159d03: mov    0x10(%rsp),%r13
  0x00007f8ab9159d08: mov    0x18(%rsp),%r12
  0x00007f8ab9159d0d: mov    0x20(%rsp),%r11
  0x00007f8ab9159d12: mov    0x28(%rsp),%r10
  0x00007f8ab9159d17: mov    0x30(%rsp),%r9
  0x00007f8ab9159d1c: mov    0x38(%rsp),%r8
  0x00007f8ab9159d21: mov    0x40(%rsp),%rdi
  0x00007f8ab9159d26: mov    0x48(%rsp),%rsi
  0x00007f8ab9159d2b: mov    0x50(%rsp),%rbp
  0x00007f8ab9159d30: mov    0x60(%rsp),%rbx
  0x00007f8ab9159d35: mov    0x68(%rsp),%rdx
  0x00007f8ab9159d3a: mov    0x70(%rsp),%rcx
  0x00007f8ab9159d3f: mov    0x78(%rsp),%rax
  0x00007f8ab9159d44: add    $0x80,%rsp
  0x00007f8ab9159d4b: add    $0x8,%rsp
  0x00007f8ab9159d4f: popfq  
  0x00007f8ab9159d50: mov    %r13,%rsp
  0x00007f8ab9159d53: pop    %rax
  0x00007f8ab9159d54: mov    %rsp,%r13
  0x00007f8ab9159d57: sub    $0x20,%rsp
  0x00007f8ab9159d5b: mov    %rax,(%rsp)
  0x00007f8ab9159d5f: mov    %rsi,0x18(%rsp)
  0x00007f8ab9159d64: mov    %rdx,0x10(%rsp)
  0x00007f8ab9159d69: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab9159d6f: mov    0x40(%rbx),%rcx
  0x00007f8ab9159d73: jmpq   *%rcx

AHE@0x00007f8ac80eca78: 0xbbbe0000 i2c: 0x00007f8ab9159e20 c2i: 0x00007f8ab9159f62 c2iUV: 0x00007f8ab9159f35
i2c argument handler #56 for: receiver (Ljava/lang/Object;J)V (610 bytes generated)
c2i argument handler starts at 0x7f8ab9159f62
  0x00007f8ab9159e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9159e24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9159e2e: cmp    %r11,%rax
  0x00007f8ab9159e31: jbe    0x00007f8ab9159e4a
  0x00007f8ab9159e37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9159e41: cmp    %r11,%rax
  0x00007f8ab9159e44: jb     0x00007f8ab9159f0d
  0x00007f8ab9159e4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9159e54: cmp    %r11,%rax
  0x00007f8ab9159e57: jbe    0x00007f8ab9159e70
  0x00007f8ab9159e5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9159e67: cmp    %r11,%rax
  0x00007f8ab9159e6a: jb     0x00007f8ab9159f0d
  0x00007f8ab9159e70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9159e7a: cmp    %r11,%rax
  0x00007f8ab9159e7d: jbe    0x00007f8ab9159e96
  0x00007f8ab9159e83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9159e8d: cmp    %r11,%rax
  0x00007f8ab9159e90: jb     0x00007f8ab9159f0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9159e96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9159e9b: sub    $0x80,%rsp
  0x00007f8ab9159ea2: mov    %rax,0x78(%rsp)
  0x00007f8ab9159ea7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9159eac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159eb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159eb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9159ebb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159ec0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159ec5: mov    %r8,0x38(%rsp)
  0x00007f8ab9159eca: mov    %r9,0x30(%rsp)
  0x00007f8ab9159ecf: mov    %r10,0x28(%rsp)
  0x00007f8ab9159ed4: mov    %r11,0x20(%rsp)
  0x00007f8ab9159ed9: mov    %r12,0x18(%rsp)
  0x00007f8ab9159ede: mov    %r13,0x10(%rsp)
  0x00007f8ab9159ee3: mov    %r14,0x8(%rsp)
  0x00007f8ab9159ee8: mov    %r15,(%rsp)
  0x00007f8ab9159eec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9159ef6: movabs $0x7f8ab9159e96,%rsi
  0x00007f8ab9159f00: mov    %rsp,%rdx
  0x00007f8ab9159f03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159f07: callq  0x00007f8aceddb9fa
  0x00007f8ab9159f0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9159f0d: mov    %rsp,%r11
  0x00007f8ab9159f10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159f14: push   %rax
  0x00007f8ab9159f15: mov    %r11,%rax
  0x00007f8ab9159f18: mov    0x50(%rbx),%r11
  0x00007f8ab9159f1c: mov    0x20(%rax),%rsi
  0x00007f8ab9159f20: mov    0x18(%rax),%rdx
  0x00007f8ab9159f24: mov    0x8(%rax),%rcx
  0x00007f8ab9159f28: mov    %rbx,0x258(%r15)
  0x00007f8ab9159f2f: mov    %rbx,%rax
  0x00007f8ab9159f32: jmpq   *%r11
  0x00007f8ab9159f35: mov    0x8(%rsi),%ebx
  0x00007f8ab9159f38: shl    $0x3,%rbx
  0x00007f8ab9159f3c: cmp    0x10(%rax),%rbx
  0x00007f8ab9159f40: mov    0x8(%rax),%rbx
  0x00007f8ab9159f44: je     0x00007f8ab9159f4f
  0x00007f8ab9159f4a: jmpq   0x00007f8ab9105c40
  0x00007f8ab9159f4f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9159f57: je     0x00007f8ab915a052
  0x00007f8ab9159f5d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9159f62: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9159f6a: je     0x00007f8ab915a052
  0x00007f8ab9159f70: mov    %rsp,%r13
  0x00007f8ab9159f73: mov    (%rsp),%rax
  0x00007f8ab9159f77: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9159f7b: pushfq 
  0x00007f8ab9159f7c: sub    $0x8,%rsp
  0x00007f8ab9159f80: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9159f85: sub    $0x80,%rsp
  0x00007f8ab9159f8c: mov    %rax,0x78(%rsp)
  0x00007f8ab9159f91: mov    %rcx,0x70(%rsp)
  0x00007f8ab9159f96: mov    %rdx,0x68(%rsp)
  0x00007f8ab9159f9b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9159fa0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9159fa5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9159faa: mov    %rdi,0x40(%rsp)
  0x00007f8ab9159faf: mov    %r8,0x38(%rsp)
  0x00007f8ab9159fb4: mov    %r9,0x30(%rsp)
  0x00007f8ab9159fb9: mov    %r10,0x28(%rsp)
  0x00007f8ab9159fbe: mov    %r11,0x20(%rsp)
  0x00007f8ab9159fc3: mov    %r12,0x18(%rsp)
  0x00007f8ab9159fc8: mov    %r13,0x10(%rsp)
  0x00007f8ab9159fcd: mov    %r14,0x8(%rsp)
  0x00007f8ab9159fd2: mov    %r15,(%rsp)
  0x00007f8ab9159fd6: sub    $0x200,%rsp
  0x00007f8ab9159fdd: fxsave64 (%rsp)
  0x00007f8ab9159fe2: mov    %rbx,%rdi
  0x00007f8ab9159fe5: mov    %rax,%rsi
  0x00007f8ab9159fe8: callq  0x00007f8acef8bbca
  0x00007f8ab9159fed: fxrstor64 (%rsp)
  0x00007f8ab9159ff2: add    $0x200,%rsp
  0x00007f8ab9159ff9: mov    (%rsp),%r15
  0x00007f8ab9159ffd: mov    0x8(%rsp),%r14
  0x00007f8ab915a002: mov    0x10(%rsp),%r13
  0x00007f8ab915a007: mov    0x18(%rsp),%r12
  0x00007f8ab915a00c: mov    0x20(%rsp),%r11
  0x00007f8ab915a011: mov    0x28(%rsp),%r10
  0x00007f8ab915a016: mov    0x30(%rsp),%r9
  0x00007f8ab915a01b: mov    0x38(%rsp),%r8
  0x00007f8ab915a020: mov    0x40(%rsp),%rdi
  0x00007f8ab915a025: mov    0x48(%rsp),%rsi
  0x00007f8ab915a02a: mov    0x50(%rsp),%rbp
  0x00007f8ab915a02f: mov    0x60(%rsp),%rbx
  0x00007f8ab915a034: mov    0x68(%rsp),%rdx
  0x00007f8ab915a039: mov    0x70(%rsp),%rcx
  0x00007f8ab915a03e: mov    0x78(%rsp),%rax
  0x00007f8ab915a043: add    $0x80,%rsp
  0x00007f8ab915a04a: add    $0x8,%rsp
  0x00007f8ab915a04e: popfq  
  0x00007f8ab915a04f: mov    %r13,%rsp
  0x00007f8ab915a052: pop    %rax
  0x00007f8ab915a053: mov    %rsp,%r13
  0x00007f8ab915a056: sub    $0x30,%rsp
  0x00007f8ab915a05a: mov    %rax,(%rsp)
  0x00007f8ab915a05e: mov    %rsi,0x20(%rsp)
  0x00007f8ab915a063: mov    %rdx,0x18(%rsp)
  0x00007f8ab915a068: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915a072: mov    %rax,0x10(%rsp)
  0x00007f8ab915a077: mov    %rcx,0x8(%rsp)
  0x00007f8ab915a07c: mov    0x40(%rbx),%rcx
  0x00007f8ab915a080: jmpq   *%rcx

AHE@0x00007f8ac80ecac0: 0xbaaa0000 i2c: 0x00007f8ab915a160 c2i: 0x00007f8ab915a2a4 c2iUV: 0x00007f8ab915a277
i2c argument handler #57 for: static ([CIIC)I (600 bytes generated)
c2i argument handler starts at 0x7f8ab915a2a4
  0x00007f8ab915a160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915a164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915a16e: cmp    %r11,%rax
  0x00007f8ab915a171: jbe    0x00007f8ab915a18a
  0x00007f8ab915a177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915a181: cmp    %r11,%rax
  0x00007f8ab915a184: jb     0x00007f8ab915a24d
  0x00007f8ab915a18a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915a194: cmp    %r11,%rax
  0x00007f8ab915a197: jbe    0x00007f8ab915a1b0
  0x00007f8ab915a19d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915a1a7: cmp    %r11,%rax
  0x00007f8ab915a1aa: jb     0x00007f8ab915a24d
  0x00007f8ab915a1b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915a1ba: cmp    %r11,%rax
  0x00007f8ab915a1bd: jbe    0x00007f8ab915a1d6
  0x00007f8ab915a1c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915a1cd: cmp    %r11,%rax
  0x00007f8ab915a1d0: jb     0x00007f8ab915a24d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915a1d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915a1db: sub    $0x80,%rsp
  0x00007f8ab915a1e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915a1e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915a1ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915a1f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915a1f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915a1fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915a200: mov    %rdi,0x40(%rsp)
  0x00007f8ab915a205: mov    %r8,0x38(%rsp)
  0x00007f8ab915a20a: mov    %r9,0x30(%rsp)
  0x00007f8ab915a20f: mov    %r10,0x28(%rsp)
  0x00007f8ab915a214: mov    %r11,0x20(%rsp)
  0x00007f8ab915a219: mov    %r12,0x18(%rsp)
  0x00007f8ab915a21e: mov    %r13,0x10(%rsp)
  0x00007f8ab915a223: mov    %r14,0x8(%rsp)
  0x00007f8ab915a228: mov    %r15,(%rsp)
  0x00007f8ab915a22c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915a236: movabs $0x7f8ab915a1d6,%rsi
  0x00007f8ab915a240: mov    %rsp,%rdx
  0x00007f8ab915a243: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a247: callq  0x00007f8aceddb9fa
  0x00007f8ab915a24c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915a24d: mov    %rsp,%r11
  0x00007f8ab915a250: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a254: push   %rax
  0x00007f8ab915a255: mov    %r11,%rax
  0x00007f8ab915a258: mov    0x50(%rbx),%r11
  0x00007f8ab915a25c: mov    0x20(%rax),%rsi
  0x00007f8ab915a260: mov    0x18(%rax),%edx
  0x00007f8ab915a263: mov    0x10(%rax),%ecx
  0x00007f8ab915a266: mov    0x8(%rax),%r8d
  0x00007f8ab915a26a: mov    %rbx,0x258(%r15)
  0x00007f8ab915a271: mov    %rbx,%rax
  0x00007f8ab915a274: jmpq   *%r11
  0x00007f8ab915a277: mov    0x8(%rsi),%ebx
  0x00007f8ab915a27a: shl    $0x3,%rbx
  0x00007f8ab915a27e: cmp    0x10(%rax),%rbx
  0x00007f8ab915a282: mov    0x8(%rax),%rbx
  0x00007f8ab915a286: je     0x00007f8ab915a291
  0x00007f8ab915a28c: jmpq   0x00007f8ab9105c40
  0x00007f8ab915a291: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915a299: je     0x00007f8ab915a394
  0x00007f8ab915a29f: jmpq   0x00007f8ab9105c40
  0x00007f8ab915a2a4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915a2ac: je     0x00007f8ab915a394
  0x00007f8ab915a2b2: mov    %rsp,%r13
  0x00007f8ab915a2b5: mov    (%rsp),%rax
  0x00007f8ab915a2b9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a2bd: pushfq 
  0x00007f8ab915a2be: sub    $0x8,%rsp
  0x00007f8ab915a2c2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915a2c7: sub    $0x80,%rsp
  0x00007f8ab915a2ce: mov    %rax,0x78(%rsp)
  0x00007f8ab915a2d3: mov    %rcx,0x70(%rsp)
  0x00007f8ab915a2d8: mov    %rdx,0x68(%rsp)
  0x00007f8ab915a2dd: mov    %rbx,0x60(%rsp)
  0x00007f8ab915a2e2: mov    %rbp,0x50(%rsp)
  0x00007f8ab915a2e7: mov    %rsi,0x48(%rsp)
  0x00007f8ab915a2ec: mov    %rdi,0x40(%rsp)
  0x00007f8ab915a2f1: mov    %r8,0x38(%rsp)
  0x00007f8ab915a2f6: mov    %r9,0x30(%rsp)
  0x00007f8ab915a2fb: mov    %r10,0x28(%rsp)
  0x00007f8ab915a300: mov    %r11,0x20(%rsp)
  0x00007f8ab915a305: mov    %r12,0x18(%rsp)
  0x00007f8ab915a30a: mov    %r13,0x10(%rsp)
  0x00007f8ab915a30f: mov    %r14,0x8(%rsp)
  0x00007f8ab915a314: mov    %r15,(%rsp)
  0x00007f8ab915a318: sub    $0x200,%rsp
  0x00007f8ab915a31f: fxsave64 (%rsp)
  0x00007f8ab915a324: mov    %rbx,%rdi
  0x00007f8ab915a327: mov    %rax,%rsi
  0x00007f8ab915a32a: callq  0x00007f8acef8bbca
  0x00007f8ab915a32f: fxrstor64 (%rsp)
  0x00007f8ab915a334: add    $0x200,%rsp
  0x00007f8ab915a33b: mov    (%rsp),%r15
  0x00007f8ab915a33f: mov    0x8(%rsp),%r14
  0x00007f8ab915a344: mov    0x10(%rsp),%r13
  0x00007f8ab915a349: mov    0x18(%rsp),%r12
  0x00007f8ab915a34e: mov    0x20(%rsp),%r11
  0x00007f8ab915a353: mov    0x28(%rsp),%r10
  0x00007f8ab915a358: mov    0x30(%rsp),%r9
  0x00007f8ab915a35d: mov    0x38(%rsp),%r8
  0x00007f8ab915a362: mov    0x40(%rsp),%rdi
  0x00007f8ab915a367: mov    0x48(%rsp),%rsi
  0x00007f8ab915a36c: mov    0x50(%rsp),%rbp
  0x00007f8ab915a371: mov    0x60(%rsp),%rbx
  0x00007f8ab915a376: mov    0x68(%rsp),%rdx
  0x00007f8ab915a37b: mov    0x70(%rsp),%rcx
  0x00007f8ab915a380: mov    0x78(%rsp),%rax
  0x00007f8ab915a385: add    $0x80,%rsp
  0x00007f8ab915a38c: add    $0x8,%rsp
  0x00007f8ab915a390: popfq  
  0x00007f8ab915a391: mov    %r13,%rsp
  0x00007f8ab915a394: pop    %rax
  0x00007f8ab915a395: mov    %rsp,%r13
  0x00007f8ab915a398: sub    $0x30,%rsp
  0x00007f8ab915a39c: mov    %rax,(%rsp)
  0x00007f8ab915a3a0: mov    %rsi,0x20(%rsp)
  0x00007f8ab915a3a5: mov    %edx,0x18(%rsp)
  0x00007f8ab915a3a9: mov    %ecx,0x10(%rsp)
  0x00007f8ab915a3ad: mov    %r8d,0x8(%rsp)
  0x00007f8ab915a3b2: mov    0x40(%rbx),%rcx
  0x00007f8ab915a3b6: jmpq   *%rcx

AHE@0x00007f8ac80ecb08: 0xbaabe000 i2c: 0x00007f8ab915a460 c2i: 0x00007f8ab915a5a4 c2iUV: 0x00007f8ab915a577
i2c argument handler #58 for: static ([JIIJ)I (615 bytes generated)
c2i argument handler starts at 0x7f8ab915a5a4
  0x00007f8ab915a460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915a464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915a46e: cmp    %r11,%rax
  0x00007f8ab915a471: jbe    0x00007f8ab915a48a
  0x00007f8ab915a477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915a481: cmp    %r11,%rax
  0x00007f8ab915a484: jb     0x00007f8ab915a54d
  0x00007f8ab915a48a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915a494: cmp    %r11,%rax
  0x00007f8ab915a497: jbe    0x00007f8ab915a4b0
  0x00007f8ab915a49d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915a4a7: cmp    %r11,%rax
  0x00007f8ab915a4aa: jb     0x00007f8ab915a54d
  0x00007f8ab915a4b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915a4ba: cmp    %r11,%rax
  0x00007f8ab915a4bd: jbe    0x00007f8ab915a4d6
  0x00007f8ab915a4c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915a4cd: cmp    %r11,%rax
  0x00007f8ab915a4d0: jb     0x00007f8ab915a54d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915a4d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915a4db: sub    $0x80,%rsp
  0x00007f8ab915a4e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915a4e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915a4ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915a4f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915a4f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915a4fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915a500: mov    %rdi,0x40(%rsp)
  0x00007f8ab915a505: mov    %r8,0x38(%rsp)
  0x00007f8ab915a50a: mov    %r9,0x30(%rsp)
  0x00007f8ab915a50f: mov    %r10,0x28(%rsp)
  0x00007f8ab915a514: mov    %r11,0x20(%rsp)
  0x00007f8ab915a519: mov    %r12,0x18(%rsp)
  0x00007f8ab915a51e: mov    %r13,0x10(%rsp)
  0x00007f8ab915a523: mov    %r14,0x8(%rsp)
  0x00007f8ab915a528: mov    %r15,(%rsp)
  0x00007f8ab915a52c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915a536: movabs $0x7f8ab915a4d6,%rsi
  0x00007f8ab915a540: mov    %rsp,%rdx
  0x00007f8ab915a543: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a547: callq  0x00007f8aceddb9fa
  0x00007f8ab915a54c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915a54d: mov    %rsp,%r11
  0x00007f8ab915a550: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a554: push   %rax
  0x00007f8ab915a555: mov    %r11,%rax
  0x00007f8ab915a558: mov    0x50(%rbx),%r11
  0x00007f8ab915a55c: mov    0x28(%rax),%rsi
  0x00007f8ab915a560: mov    0x20(%rax),%edx
  0x00007f8ab915a563: mov    0x18(%rax),%ecx
  0x00007f8ab915a566: mov    0x8(%rax),%r8
  0x00007f8ab915a56a: mov    %rbx,0x258(%r15)
  0x00007f8ab915a571: mov    %rbx,%rax
  0x00007f8ab915a574: jmpq   *%r11
  0x00007f8ab915a577: mov    0x8(%rsi),%ebx
  0x00007f8ab915a57a: shl    $0x3,%rbx
  0x00007f8ab915a57e: cmp    0x10(%rax),%rbx
  0x00007f8ab915a582: mov    0x8(%rax),%rbx
  0x00007f8ab915a586: je     0x00007f8ab915a591
  0x00007f8ab915a58c: jmpq   0x00007f8ab9105c40
  0x00007f8ab915a591: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915a599: je     0x00007f8ab915a694
  0x00007f8ab915a59f: jmpq   0x00007f8ab9105c40
  0x00007f8ab915a5a4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915a5ac: je     0x00007f8ab915a694
  0x00007f8ab915a5b2: mov    %rsp,%r13
  0x00007f8ab915a5b5: mov    (%rsp),%rax
  0x00007f8ab915a5b9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a5bd: pushfq 
  0x00007f8ab915a5be: sub    $0x8,%rsp
  0x00007f8ab915a5c2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915a5c7: sub    $0x80,%rsp
  0x00007f8ab915a5ce: mov    %rax,0x78(%rsp)
  0x00007f8ab915a5d3: mov    %rcx,0x70(%rsp)
  0x00007f8ab915a5d8: mov    %rdx,0x68(%rsp)
  0x00007f8ab915a5dd: mov    %rbx,0x60(%rsp)
  0x00007f8ab915a5e2: mov    %rbp,0x50(%rsp)
  0x00007f8ab915a5e7: mov    %rsi,0x48(%rsp)
  0x00007f8ab915a5ec: mov    %rdi,0x40(%rsp)
  0x00007f8ab915a5f1: mov    %r8,0x38(%rsp)
  0x00007f8ab915a5f6: mov    %r9,0x30(%rsp)
  0x00007f8ab915a5fb: mov    %r10,0x28(%rsp)
  0x00007f8ab915a600: mov    %r11,0x20(%rsp)
  0x00007f8ab915a605: mov    %r12,0x18(%rsp)
  0x00007f8ab915a60a: mov    %r13,0x10(%rsp)
  0x00007f8ab915a60f: mov    %r14,0x8(%rsp)
  0x00007f8ab915a614: mov    %r15,(%rsp)
  0x00007f8ab915a618: sub    $0x200,%rsp
  0x00007f8ab915a61f: fxsave64 (%rsp)
  0x00007f8ab915a624: mov    %rbx,%rdi
  0x00007f8ab915a627: mov    %rax,%rsi
  0x00007f8ab915a62a: callq  0x00007f8acef8bbca
  0x00007f8ab915a62f: fxrstor64 (%rsp)
  0x00007f8ab915a634: add    $0x200,%rsp
  0x00007f8ab915a63b: mov    (%rsp),%r15
  0x00007f8ab915a63f: mov    0x8(%rsp),%r14
  0x00007f8ab915a644: mov    0x10(%rsp),%r13
  0x00007f8ab915a649: mov    0x18(%rsp),%r12
  0x00007f8ab915a64e: mov    0x20(%rsp),%r11
  0x00007f8ab915a653: mov    0x28(%rsp),%r10
  0x00007f8ab915a658: mov    0x30(%rsp),%r9
  0x00007f8ab915a65d: mov    0x38(%rsp),%r8
  0x00007f8ab915a662: mov    0x40(%rsp),%rdi
  0x00007f8ab915a667: mov    0x48(%rsp),%rsi
  0x00007f8ab915a66c: mov    0x50(%rsp),%rbp
  0x00007f8ab915a671: mov    0x60(%rsp),%rbx
  0x00007f8ab915a676: mov    0x68(%rsp),%rdx
  0x00007f8ab915a67b: mov    0x70(%rsp),%rcx
  0x00007f8ab915a680: mov    0x78(%rsp),%rax
  0x00007f8ab915a685: add    $0x80,%rsp
  0x00007f8ab915a68c: add    $0x8,%rsp
  0x00007f8ab915a690: popfq  
  0x00007f8ab915a691: mov    %r13,%rsp
  0x00007f8ab915a694: pop    %rax
  0x00007f8ab915a695: mov    %rsp,%r13
  0x00007f8ab915a698: sub    $0x30,%rsp
  0x00007f8ab915a69c: mov    %rax,(%rsp)
  0x00007f8ab915a6a0: mov    %rsi,0x28(%rsp)
  0x00007f8ab915a6a5: mov    %edx,0x20(%rsp)
  0x00007f8ab915a6a9: mov    %ecx,0x18(%rsp)
  0x00007f8ab915a6ad: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915a6b7: mov    %rax,0x10(%rsp)
  0x00007f8ab915a6bc: mov    %r8,0x8(%rsp)
  0x00007f8ab915a6c1: mov    0x40(%rbx),%rcx
  0x00007f8ab915a6c5: jmpq   *%rcx

AHE@0x00007f8ac80ecb50: 0xbaa7e000 i2c: 0x00007f8ab915a7a0 c2i: 0x00007f8ab915a8e5 c2iUV: 0x00007f8ab915a8b8
i2c argument handler #59 for: static ([DIID)I (617 bytes generated)
c2i argument handler starts at 0x7f8ab915a8e5
  0x00007f8ab915a7a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915a7a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915a7ae: cmp    %r11,%rax
  0x00007f8ab915a7b1: jbe    0x00007f8ab915a7ca
  0x00007f8ab915a7b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915a7c1: cmp    %r11,%rax
  0x00007f8ab915a7c4: jb     0x00007f8ab915a88d
  0x00007f8ab915a7ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915a7d4: cmp    %r11,%rax
  0x00007f8ab915a7d7: jbe    0x00007f8ab915a7f0
  0x00007f8ab915a7dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915a7e7: cmp    %r11,%rax
  0x00007f8ab915a7ea: jb     0x00007f8ab915a88d
  0x00007f8ab915a7f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915a7fa: cmp    %r11,%rax
  0x00007f8ab915a7fd: jbe    0x00007f8ab915a816
  0x00007f8ab915a803: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915a80d: cmp    %r11,%rax
  0x00007f8ab915a810: jb     0x00007f8ab915a88d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915a816: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915a81b: sub    $0x80,%rsp
  0x00007f8ab915a822: mov    %rax,0x78(%rsp)
  0x00007f8ab915a827: mov    %rcx,0x70(%rsp)
  0x00007f8ab915a82c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915a831: mov    %rbx,0x60(%rsp)
  0x00007f8ab915a836: mov    %rbp,0x50(%rsp)
  0x00007f8ab915a83b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915a840: mov    %rdi,0x40(%rsp)
  0x00007f8ab915a845: mov    %r8,0x38(%rsp)
  0x00007f8ab915a84a: mov    %r9,0x30(%rsp)
  0x00007f8ab915a84f: mov    %r10,0x28(%rsp)
  0x00007f8ab915a854: mov    %r11,0x20(%rsp)
  0x00007f8ab915a859: mov    %r12,0x18(%rsp)
  0x00007f8ab915a85e: mov    %r13,0x10(%rsp)
  0x00007f8ab915a863: mov    %r14,0x8(%rsp)
  0x00007f8ab915a868: mov    %r15,(%rsp)
  0x00007f8ab915a86c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915a876: movabs $0x7f8ab915a816,%rsi
  0x00007f8ab915a880: mov    %rsp,%rdx
  0x00007f8ab915a883: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a887: callq  0x00007f8aceddb9fa
  0x00007f8ab915a88c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915a88d: mov    %rsp,%r11
  0x00007f8ab915a890: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a894: push   %rax
  0x00007f8ab915a895: mov    %r11,%rax
  0x00007f8ab915a898: mov    0x50(%rbx),%r11
  0x00007f8ab915a89c: mov    0x28(%rax),%rsi
  0x00007f8ab915a8a0: mov    0x20(%rax),%edx
  0x00007f8ab915a8a3: mov    0x18(%rax),%ecx
  0x00007f8ab915a8a6: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab915a8ab: mov    %rbx,0x258(%r15)
  0x00007f8ab915a8b2: mov    %rbx,%rax
  0x00007f8ab915a8b5: jmpq   *%r11
  0x00007f8ab915a8b8: mov    0x8(%rsi),%ebx
  0x00007f8ab915a8bb: shl    $0x3,%rbx
  0x00007f8ab915a8bf: cmp    0x10(%rax),%rbx
  0x00007f8ab915a8c3: mov    0x8(%rax),%rbx
  0x00007f8ab915a8c7: je     0x00007f8ab915a8d2
  0x00007f8ab915a8cd: jmpq   0x00007f8ab9105c40
  0x00007f8ab915a8d2: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915a8da: je     0x00007f8ab915a9d5
  0x00007f8ab915a8e0: jmpq   0x00007f8ab9105c40
  0x00007f8ab915a8e5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915a8ed: je     0x00007f8ab915a9d5
  0x00007f8ab915a8f3: mov    %rsp,%r13
  0x00007f8ab915a8f6: mov    (%rsp),%rax
  0x00007f8ab915a8fa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915a8fe: pushfq 
  0x00007f8ab915a8ff: sub    $0x8,%rsp
  0x00007f8ab915a903: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915a908: sub    $0x80,%rsp
  0x00007f8ab915a90f: mov    %rax,0x78(%rsp)
  0x00007f8ab915a914: mov    %rcx,0x70(%rsp)
  0x00007f8ab915a919: mov    %rdx,0x68(%rsp)
  0x00007f8ab915a91e: mov    %rbx,0x60(%rsp)
  0x00007f8ab915a923: mov    %rbp,0x50(%rsp)
  0x00007f8ab915a928: mov    %rsi,0x48(%rsp)
  0x00007f8ab915a92d: mov    %rdi,0x40(%rsp)
  0x00007f8ab915a932: mov    %r8,0x38(%rsp)
  0x00007f8ab915a937: mov    %r9,0x30(%rsp)
  0x00007f8ab915a93c: mov    %r10,0x28(%rsp)
  0x00007f8ab915a941: mov    %r11,0x20(%rsp)
  0x00007f8ab915a946: mov    %r12,0x18(%rsp)
  0x00007f8ab915a94b: mov    %r13,0x10(%rsp)
  0x00007f8ab915a950: mov    %r14,0x8(%rsp)
  0x00007f8ab915a955: mov    %r15,(%rsp)
  0x00007f8ab915a959: sub    $0x200,%rsp
  0x00007f8ab915a960: fxsave64 (%rsp)
  0x00007f8ab915a965: mov    %rbx,%rdi
  0x00007f8ab915a968: mov    %rax,%rsi
  0x00007f8ab915a96b: callq  0x00007f8acef8bbca
  0x00007f8ab915a970: fxrstor64 (%rsp)
  0x00007f8ab915a975: add    $0x200,%rsp
  0x00007f8ab915a97c: mov    (%rsp),%r15
  0x00007f8ab915a980: mov    0x8(%rsp),%r14
  0x00007f8ab915a985: mov    0x10(%rsp),%r13
  0x00007f8ab915a98a: mov    0x18(%rsp),%r12
  0x00007f8ab915a98f: mov    0x20(%rsp),%r11
  0x00007f8ab915a994: mov    0x28(%rsp),%r10
  0x00007f8ab915a999: mov    0x30(%rsp),%r9
  0x00007f8ab915a99e: mov    0x38(%rsp),%r8
  0x00007f8ab915a9a3: mov    0x40(%rsp),%rdi
  0x00007f8ab915a9a8: mov    0x48(%rsp),%rsi
  0x00007f8ab915a9ad: mov    0x50(%rsp),%rbp
  0x00007f8ab915a9b2: mov    0x60(%rsp),%rbx
  0x00007f8ab915a9b7: mov    0x68(%rsp),%rdx
  0x00007f8ab915a9bc: mov    0x70(%rsp),%rcx
  0x00007f8ab915a9c1: mov    0x78(%rsp),%rax
  0x00007f8ab915a9c6: add    $0x80,%rsp
  0x00007f8ab915a9cd: add    $0x8,%rsp
  0x00007f8ab915a9d1: popfq  
  0x00007f8ab915a9d2: mov    %r13,%rsp
  0x00007f8ab915a9d5: pop    %rax
  0x00007f8ab915a9d6: mov    %rsp,%r13
  0x00007f8ab915a9d9: sub    $0x30,%rsp
  0x00007f8ab915a9dd: mov    %rax,(%rsp)
  0x00007f8ab915a9e1: mov    %rsi,0x28(%rsp)
  0x00007f8ab915a9e6: mov    %edx,0x20(%rsp)
  0x00007f8ab915a9ea: mov    %ecx,0x18(%rsp)
  0x00007f8ab915a9ee: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab915a9f8: mov    %rax,0x10(%rsp)
  0x00007f8ab915a9fd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab915aa03: mov    0x40(%rbx),%rcx
  0x00007f8ab915aa07: jmpq   *%rcx

AHE@0x00007f8ac812e380: 0xbaa60000 i2c: 0x00007f8ab915aae0 c2i: 0x00007f8ab915ac25 c2iUV: 0x00007f8ab915abf8
i2c argument handler #60 for: static ([FIIF)I (602 bytes generated)
c2i argument handler starts at 0x7f8ab915ac25
  0x00007f8ab915aae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915aae4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915aaee: cmp    %r11,%rax
  0x00007f8ab915aaf1: jbe    0x00007f8ab915ab0a
  0x00007f8ab915aaf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915ab01: cmp    %r11,%rax
  0x00007f8ab915ab04: jb     0x00007f8ab915abcd
  0x00007f8ab915ab0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915ab14: cmp    %r11,%rax
  0x00007f8ab915ab17: jbe    0x00007f8ab915ab30
  0x00007f8ab915ab1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915ab27: cmp    %r11,%rax
  0x00007f8ab915ab2a: jb     0x00007f8ab915abcd
  0x00007f8ab915ab30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915ab3a: cmp    %r11,%rax
  0x00007f8ab915ab3d: jbe    0x00007f8ab915ab56
  0x00007f8ab915ab43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915ab4d: cmp    %r11,%rax
  0x00007f8ab915ab50: jb     0x00007f8ab915abcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915ab56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ab5b: sub    $0x80,%rsp
  0x00007f8ab915ab62: mov    %rax,0x78(%rsp)
  0x00007f8ab915ab67: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ab6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ab71: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ab76: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ab7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ab80: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ab85: mov    %r8,0x38(%rsp)
  0x00007f8ab915ab8a: mov    %r9,0x30(%rsp)
  0x00007f8ab915ab8f: mov    %r10,0x28(%rsp)
  0x00007f8ab915ab94: mov    %r11,0x20(%rsp)
  0x00007f8ab915ab99: mov    %r12,0x18(%rsp)
  0x00007f8ab915ab9e: mov    %r13,0x10(%rsp)
  0x00007f8ab915aba3: mov    %r14,0x8(%rsp)
  0x00007f8ab915aba8: mov    %r15,(%rsp)
  0x00007f8ab915abac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915abb6: movabs $0x7f8ab915ab56,%rsi
  0x00007f8ab915abc0: mov    %rsp,%rdx
  0x00007f8ab915abc3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915abc7: callq  0x00007f8aceddb9fa
  0x00007f8ab915abcc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915abcd: mov    %rsp,%r11
  0x00007f8ab915abd0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915abd4: push   %rax
  0x00007f8ab915abd5: mov    %r11,%rax
  0x00007f8ab915abd8: mov    0x50(%rbx),%r11
  0x00007f8ab915abdc: mov    0x20(%rax),%rsi
  0x00007f8ab915abe0: mov    0x18(%rax),%edx
  0x00007f8ab915abe3: mov    0x10(%rax),%ecx
  0x00007f8ab915abe6: vmovss 0x8(%rax),%xmm0
  0x00007f8ab915abeb: mov    %rbx,0x258(%r15)
  0x00007f8ab915abf2: mov    %rbx,%rax
  0x00007f8ab915abf5: jmpq   *%r11
  0x00007f8ab915abf8: mov    0x8(%rsi),%ebx
  0x00007f8ab915abfb: shl    $0x3,%rbx
  0x00007f8ab915abff: cmp    0x10(%rax),%rbx
  0x00007f8ab915ac03: mov    0x8(%rax),%rbx
  0x00007f8ab915ac07: je     0x00007f8ab915ac12
  0x00007f8ab915ac0d: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ac12: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ac1a: je     0x00007f8ab915ad15
  0x00007f8ab915ac20: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ac25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ac2d: je     0x00007f8ab915ad15
  0x00007f8ab915ac33: mov    %rsp,%r13
  0x00007f8ab915ac36: mov    (%rsp),%rax
  0x00007f8ab915ac3a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915ac3e: pushfq 
  0x00007f8ab915ac3f: sub    $0x8,%rsp
  0x00007f8ab915ac43: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ac48: sub    $0x80,%rsp
  0x00007f8ab915ac4f: mov    %rax,0x78(%rsp)
  0x00007f8ab915ac54: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ac59: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ac5e: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ac63: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ac68: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ac6d: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ac72: mov    %r8,0x38(%rsp)
  0x00007f8ab915ac77: mov    %r9,0x30(%rsp)
  0x00007f8ab915ac7c: mov    %r10,0x28(%rsp)
  0x00007f8ab915ac81: mov    %r11,0x20(%rsp)
  0x00007f8ab915ac86: mov    %r12,0x18(%rsp)
  0x00007f8ab915ac8b: mov    %r13,0x10(%rsp)
  0x00007f8ab915ac90: mov    %r14,0x8(%rsp)
  0x00007f8ab915ac95: mov    %r15,(%rsp)
  0x00007f8ab915ac99: sub    $0x200,%rsp
  0x00007f8ab915aca0: fxsave64 (%rsp)
  0x00007f8ab915aca5: mov    %rbx,%rdi
  0x00007f8ab915aca8: mov    %rax,%rsi
  0x00007f8ab915acab: callq  0x00007f8acef8bbca
  0x00007f8ab915acb0: fxrstor64 (%rsp)
  0x00007f8ab915acb5: add    $0x200,%rsp
  0x00007f8ab915acbc: mov    (%rsp),%r15
  0x00007f8ab915acc0: mov    0x8(%rsp),%r14
  0x00007f8ab915acc5: mov    0x10(%rsp),%r13
  0x00007f8ab915acca: mov    0x18(%rsp),%r12
  0x00007f8ab915accf: mov    0x20(%rsp),%r11
  0x00007f8ab915acd4: mov    0x28(%rsp),%r10
  0x00007f8ab915acd9: mov    0x30(%rsp),%r9
  0x00007f8ab915acde: mov    0x38(%rsp),%r8
  0x00007f8ab915ace3: mov    0x40(%rsp),%rdi
  0x00007f8ab915ace8: mov    0x48(%rsp),%rsi
  0x00007f8ab915aced: mov    0x50(%rsp),%rbp
  0x00007f8ab915acf2: mov    0x60(%rsp),%rbx
  0x00007f8ab915acf7: mov    0x68(%rsp),%rdx
  0x00007f8ab915acfc: mov    0x70(%rsp),%rcx
  0x00007f8ab915ad01: mov    0x78(%rsp),%rax
  0x00007f8ab915ad06: add    $0x80,%rsp
  0x00007f8ab915ad0d: add    $0x8,%rsp
  0x00007f8ab915ad11: popfq  
  0x00007f8ab915ad12: mov    %r13,%rsp
  0x00007f8ab915ad15: pop    %rax
  0x00007f8ab915ad16: mov    %rsp,%r13
  0x00007f8ab915ad19: sub    $0x30,%rsp
  0x00007f8ab915ad1d: mov    %rax,(%rsp)
  0x00007f8ab915ad21: mov    %rsi,0x20(%rsp)
  0x00007f8ab915ad26: mov    %edx,0x18(%rsp)
  0x00007f8ab915ad2a: mov    %ecx,0x10(%rsp)
  0x00007f8ab915ad2e: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab915ad34: mov    0x40(%rbx),%rcx
  0x00007f8ab915ad38: jmpq   *%rcx

AHE@0x00007f8ac812e3c8: 0xbaab0000 i2c: 0x00007f8ab915ade0 c2i: 0x00007f8ab915af24 c2iUV: 0x00007f8ab915aef7
i2c argument handler #61 for: static ([Ljava/lang/Object;IILjava/lang/Object;)I (600 bytes generated)
c2i argument handler starts at 0x7f8ab915af24
  0x00007f8ab915ade0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915ade4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915adee: cmp    %r11,%rax
  0x00007f8ab915adf1: jbe    0x00007f8ab915ae0a
  0x00007f8ab915adf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915ae01: cmp    %r11,%rax
  0x00007f8ab915ae04: jb     0x00007f8ab915aecd
  0x00007f8ab915ae0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915ae14: cmp    %r11,%rax
  0x00007f8ab915ae17: jbe    0x00007f8ab915ae30
  0x00007f8ab915ae1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915ae27: cmp    %r11,%rax
  0x00007f8ab915ae2a: jb     0x00007f8ab915aecd
  0x00007f8ab915ae30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915ae3a: cmp    %r11,%rax
  0x00007f8ab915ae3d: jbe    0x00007f8ab915ae56
  0x00007f8ab915ae43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915ae4d: cmp    %r11,%rax
  0x00007f8ab915ae50: jb     0x00007f8ab915aecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915ae56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ae5b: sub    $0x80,%rsp
  0x00007f8ab915ae62: mov    %rax,0x78(%rsp)
  0x00007f8ab915ae67: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ae6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ae71: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ae76: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ae7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ae80: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ae85: mov    %r8,0x38(%rsp)
  0x00007f8ab915ae8a: mov    %r9,0x30(%rsp)
  0x00007f8ab915ae8f: mov    %r10,0x28(%rsp)
  0x00007f8ab915ae94: mov    %r11,0x20(%rsp)
  0x00007f8ab915ae99: mov    %r12,0x18(%rsp)
  0x00007f8ab915ae9e: mov    %r13,0x10(%rsp)
  0x00007f8ab915aea3: mov    %r14,0x8(%rsp)
  0x00007f8ab915aea8: mov    %r15,(%rsp)
  0x00007f8ab915aeac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915aeb6: movabs $0x7f8ab915ae56,%rsi
  0x00007f8ab915aec0: mov    %rsp,%rdx
  0x00007f8ab915aec3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915aec7: callq  0x00007f8aceddb9fa
  0x00007f8ab915aecc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915aecd: mov    %rsp,%r11
  0x00007f8ab915aed0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915aed4: push   %rax
  0x00007f8ab915aed5: mov    %r11,%rax
  0x00007f8ab915aed8: mov    0x50(%rbx),%r11
  0x00007f8ab915aedc: mov    0x20(%rax),%rsi
  0x00007f8ab915aee0: mov    0x18(%rax),%edx
  0x00007f8ab915aee3: mov    0x10(%rax),%ecx
  0x00007f8ab915aee6: mov    0x8(%rax),%r8
  0x00007f8ab915aeea: mov    %rbx,0x258(%r15)
  0x00007f8ab915aef1: mov    %rbx,%rax
  0x00007f8ab915aef4: jmpq   *%r11
  0x00007f8ab915aef7: mov    0x8(%rsi),%ebx
  0x00007f8ab915aefa: shl    $0x3,%rbx
  0x00007f8ab915aefe: cmp    0x10(%rax),%rbx
  0x00007f8ab915af02: mov    0x8(%rax),%rbx
  0x00007f8ab915af06: je     0x00007f8ab915af11
  0x00007f8ab915af0c: jmpq   0x00007f8ab9105c40
  0x00007f8ab915af11: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915af19: je     0x00007f8ab915b014
  0x00007f8ab915af1f: jmpq   0x00007f8ab9105c40
  0x00007f8ab915af24: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915af2c: je     0x00007f8ab915b014
  0x00007f8ab915af32: mov    %rsp,%r13
  0x00007f8ab915af35: mov    (%rsp),%rax
  0x00007f8ab915af39: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915af3d: pushfq 
  0x00007f8ab915af3e: sub    $0x8,%rsp
  0x00007f8ab915af42: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915af47: sub    $0x80,%rsp
  0x00007f8ab915af4e: mov    %rax,0x78(%rsp)
  0x00007f8ab915af53: mov    %rcx,0x70(%rsp)
  0x00007f8ab915af58: mov    %rdx,0x68(%rsp)
  0x00007f8ab915af5d: mov    %rbx,0x60(%rsp)
  0x00007f8ab915af62: mov    %rbp,0x50(%rsp)
  0x00007f8ab915af67: mov    %rsi,0x48(%rsp)
  0x00007f8ab915af6c: mov    %rdi,0x40(%rsp)
  0x00007f8ab915af71: mov    %r8,0x38(%rsp)
  0x00007f8ab915af76: mov    %r9,0x30(%rsp)
  0x00007f8ab915af7b: mov    %r10,0x28(%rsp)
  0x00007f8ab915af80: mov    %r11,0x20(%rsp)
  0x00007f8ab915af85: mov    %r12,0x18(%rsp)
  0x00007f8ab915af8a: mov    %r13,0x10(%rsp)
  0x00007f8ab915af8f: mov    %r14,0x8(%rsp)
  0x00007f8ab915af94: mov    %r15,(%rsp)
  0x00007f8ab915af98: sub    $0x200,%rsp
  0x00007f8ab915af9f: fxsave64 (%rsp)
  0x00007f8ab915afa4: mov    %rbx,%rdi
  0x00007f8ab915afa7: mov    %rax,%rsi
  0x00007f8ab915afaa: callq  0x00007f8acef8bbca
  0x00007f8ab915afaf: fxrstor64 (%rsp)
  0x00007f8ab915afb4: add    $0x200,%rsp
  0x00007f8ab915afbb: mov    (%rsp),%r15
  0x00007f8ab915afbf: mov    0x8(%rsp),%r14
  0x00007f8ab915afc4: mov    0x10(%rsp),%r13
  0x00007f8ab915afc9: mov    0x18(%rsp),%r12
  0x00007f8ab915afce: mov    0x20(%rsp),%r11
  0x00007f8ab915afd3: mov    0x28(%rsp),%r10
  0x00007f8ab915afd8: mov    0x30(%rsp),%r9
  0x00007f8ab915afdd: mov    0x38(%rsp),%r8
  0x00007f8ab915afe2: mov    0x40(%rsp),%rdi
  0x00007f8ab915afe7: mov    0x48(%rsp),%rsi
  0x00007f8ab915afec: mov    0x50(%rsp),%rbp
  0x00007f8ab915aff1: mov    0x60(%rsp),%rbx
  0x00007f8ab915aff6: mov    0x68(%rsp),%rdx
  0x00007f8ab915affb: mov    0x70(%rsp),%rcx
  0x00007f8ab915b000: mov    0x78(%rsp),%rax
  0x00007f8ab915b005: add    $0x80,%rsp
  0x00007f8ab915b00c: add    $0x8,%rsp
  0x00007f8ab915b010: popfq  
  0x00007f8ab915b011: mov    %r13,%rsp
  0x00007f8ab915b014: pop    %rax
  0x00007f8ab915b015: mov    %rsp,%r13
  0x00007f8ab915b018: sub    $0x30,%rsp
  0x00007f8ab915b01c: mov    %rax,(%rsp)
  0x00007f8ab915b020: mov    %rsi,0x20(%rsp)
  0x00007f8ab915b025: mov    %edx,0x18(%rsp)
  0x00007f8ab915b029: mov    %ecx,0x10(%rsp)
  0x00007f8ab915b02d: mov    %r8,0x8(%rsp)
  0x00007f8ab915b032: mov    0x40(%rbx),%rcx
  0x00007f8ab915b036: jmpq   *%rcx

AHE@0x00007f8ac812e410: 0xbbaaab00 i2c: 0x00007f8ab915b0e0 c2i: 0x00007f8ab915b22d c2iUV: 0x00007f8ab915b200
i2c argument handler #62 for: static ([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)V (620 bytes generated)
c2i argument handler starts at 0x7f8ab915b22d
  0x00007f8ab915b0e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915b0e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915b0ee: cmp    %r11,%rax
  0x00007f8ab915b0f1: jbe    0x00007f8ab915b10a
  0x00007f8ab915b0f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915b101: cmp    %r11,%rax
  0x00007f8ab915b104: jb     0x00007f8ab915b1cd
  0x00007f8ab915b10a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915b114: cmp    %r11,%rax
  0x00007f8ab915b117: jbe    0x00007f8ab915b130
  0x00007f8ab915b11d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915b127: cmp    %r11,%rax
  0x00007f8ab915b12a: jb     0x00007f8ab915b1cd
  0x00007f8ab915b130: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915b13a: cmp    %r11,%rax
  0x00007f8ab915b13d: jbe    0x00007f8ab915b156
  0x00007f8ab915b143: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915b14d: cmp    %r11,%rax
  0x00007f8ab915b150: jb     0x00007f8ab915b1cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915b156: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915b15b: sub    $0x80,%rsp
  0x00007f8ab915b162: mov    %rax,0x78(%rsp)
  0x00007f8ab915b167: mov    %rcx,0x70(%rsp)
  0x00007f8ab915b16c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915b171: mov    %rbx,0x60(%rsp)
  0x00007f8ab915b176: mov    %rbp,0x50(%rsp)
  0x00007f8ab915b17b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915b180: mov    %rdi,0x40(%rsp)
  0x00007f8ab915b185: mov    %r8,0x38(%rsp)
  0x00007f8ab915b18a: mov    %r9,0x30(%rsp)
  0x00007f8ab915b18f: mov    %r10,0x28(%rsp)
  0x00007f8ab915b194: mov    %r11,0x20(%rsp)
  0x00007f8ab915b199: mov    %r12,0x18(%rsp)
  0x00007f8ab915b19e: mov    %r13,0x10(%rsp)
  0x00007f8ab915b1a3: mov    %r14,0x8(%rsp)
  0x00007f8ab915b1a8: mov    %r15,(%rsp)
  0x00007f8ab915b1ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915b1b6: movabs $0x7f8ab915b156,%rsi
  0x00007f8ab915b1c0: mov    %rsp,%rdx
  0x00007f8ab915b1c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b1c7: callq  0x00007f8aceddb9fa
  0x00007f8ab915b1cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915b1cd: mov    %rsp,%r11
  0x00007f8ab915b1d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b1d4: push   %rax
  0x00007f8ab915b1d5: mov    %r11,%rax
  0x00007f8ab915b1d8: mov    0x50(%rbx),%r11
  0x00007f8ab915b1dc: mov    0x30(%rax),%rsi
  0x00007f8ab915b1e0: mov    0x28(%rax),%rdx
  0x00007f8ab915b1e4: mov    0x20(%rax),%ecx
  0x00007f8ab915b1e7: mov    0x18(%rax),%r8d
  0x00007f8ab915b1eb: mov    0x10(%rax),%r9d
  0x00007f8ab915b1ef: mov    0x8(%rax),%rdi
  0x00007f8ab915b1f3: mov    %rbx,0x258(%r15)
  0x00007f8ab915b1fa: mov    %rbx,%rax
  0x00007f8ab915b1fd: jmpq   *%r11
  0x00007f8ab915b200: mov    0x8(%rsi),%ebx
  0x00007f8ab915b203: shl    $0x3,%rbx
  0x00007f8ab915b207: cmp    0x10(%rax),%rbx
  0x00007f8ab915b20b: mov    0x8(%rax),%rbx
  0x00007f8ab915b20f: je     0x00007f8ab915b21a
  0x00007f8ab915b215: jmpq   0x00007f8ab9105c40
  0x00007f8ab915b21a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915b222: je     0x00007f8ab915b31d
  0x00007f8ab915b228: jmpq   0x00007f8ab9105c40
  0x00007f8ab915b22d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915b235: je     0x00007f8ab915b31d
  0x00007f8ab915b23b: mov    %rsp,%r13
  0x00007f8ab915b23e: mov    (%rsp),%rax
  0x00007f8ab915b242: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b246: pushfq 
  0x00007f8ab915b247: sub    $0x8,%rsp
  0x00007f8ab915b24b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915b250: sub    $0x80,%rsp
  0x00007f8ab915b257: mov    %rax,0x78(%rsp)
  0x00007f8ab915b25c: mov    %rcx,0x70(%rsp)
  0x00007f8ab915b261: mov    %rdx,0x68(%rsp)
  0x00007f8ab915b266: mov    %rbx,0x60(%rsp)
  0x00007f8ab915b26b: mov    %rbp,0x50(%rsp)
  0x00007f8ab915b270: mov    %rsi,0x48(%rsp)
  0x00007f8ab915b275: mov    %rdi,0x40(%rsp)
  0x00007f8ab915b27a: mov    %r8,0x38(%rsp)
  0x00007f8ab915b27f: mov    %r9,0x30(%rsp)
  0x00007f8ab915b284: mov    %r10,0x28(%rsp)
  0x00007f8ab915b289: mov    %r11,0x20(%rsp)
  0x00007f8ab915b28e: mov    %r12,0x18(%rsp)
  0x00007f8ab915b293: mov    %r13,0x10(%rsp)
  0x00007f8ab915b298: mov    %r14,0x8(%rsp)
  0x00007f8ab915b29d: mov    %r15,(%rsp)
  0x00007f8ab915b2a1: sub    $0x200,%rsp
  0x00007f8ab915b2a8: fxsave64 (%rsp)
  0x00007f8ab915b2ad: mov    %rbx,%rdi
  0x00007f8ab915b2b0: mov    %rax,%rsi
  0x00007f8ab915b2b3: callq  0x00007f8acef8bbca
  0x00007f8ab915b2b8: fxrstor64 (%rsp)
  0x00007f8ab915b2bd: add    $0x200,%rsp
  0x00007f8ab915b2c4: mov    (%rsp),%r15
  0x00007f8ab915b2c8: mov    0x8(%rsp),%r14
  0x00007f8ab915b2cd: mov    0x10(%rsp),%r13
  0x00007f8ab915b2d2: mov    0x18(%rsp),%r12
  0x00007f8ab915b2d7: mov    0x20(%rsp),%r11
  0x00007f8ab915b2dc: mov    0x28(%rsp),%r10
  0x00007f8ab915b2e1: mov    0x30(%rsp),%r9
  0x00007f8ab915b2e6: mov    0x38(%rsp),%r8
  0x00007f8ab915b2eb: mov    0x40(%rsp),%rdi
  0x00007f8ab915b2f0: mov    0x48(%rsp),%rsi
  0x00007f8ab915b2f5: mov    0x50(%rsp),%rbp
  0x00007f8ab915b2fa: mov    0x60(%rsp),%rbx
  0x00007f8ab915b2ff: mov    0x68(%rsp),%rdx
  0x00007f8ab915b304: mov    0x70(%rsp),%rcx
  0x00007f8ab915b309: mov    0x78(%rsp),%rax
  0x00007f8ab915b30e: add    $0x80,%rsp
  0x00007f8ab915b315: add    $0x8,%rsp
  0x00007f8ab915b319: popfq  
  0x00007f8ab915b31a: mov    %r13,%rsp
  0x00007f8ab915b31d: pop    %rax
  0x00007f8ab915b31e: mov    %rsp,%r13
  0x00007f8ab915b321: sub    $0x40,%rsp
  0x00007f8ab915b325: mov    %rax,(%rsp)
  0x00007f8ab915b329: mov    %rsi,0x30(%rsp)
  0x00007f8ab915b32e: mov    %rdx,0x28(%rsp)
  0x00007f8ab915b333: mov    %ecx,0x20(%rsp)
  0x00007f8ab915b337: mov    %r8d,0x18(%rsp)
  0x00007f8ab915b33c: mov    %r9d,0x10(%rsp)
  0x00007f8ab915b341: mov    %rdi,0x8(%rsp)
  0x00007f8ab915b346: mov    0x40(%rbx),%rcx
  0x00007f8ab915b34a: jmpq   *%rcx

AHE@0x00007f8ac812e458: 0xba7e0000 i2c: 0x00007f8ab915b420 c2i: 0x00007f8ab915b562 c2iUV: 0x00007f8ab915b535
i2c argument handler #63 for: receiver (ID)Ljava/lang/AbstractStringBuilder; (610 bytes generated)
c2i argument handler starts at 0x7f8ab915b562
  0x00007f8ab915b420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915b424: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915b42e: cmp    %r11,%rax
  0x00007f8ab915b431: jbe    0x00007f8ab915b44a
  0x00007f8ab915b437: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915b441: cmp    %r11,%rax
  0x00007f8ab915b444: jb     0x00007f8ab915b50d
  0x00007f8ab915b44a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915b454: cmp    %r11,%rax
  0x00007f8ab915b457: jbe    0x00007f8ab915b470
  0x00007f8ab915b45d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915b467: cmp    %r11,%rax
  0x00007f8ab915b46a: jb     0x00007f8ab915b50d
  0x00007f8ab915b470: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915b47a: cmp    %r11,%rax
  0x00007f8ab915b47d: jbe    0x00007f8ab915b496
  0x00007f8ab915b483: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915b48d: cmp    %r11,%rax
  0x00007f8ab915b490: jb     0x00007f8ab915b50d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915b496: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915b49b: sub    $0x80,%rsp
  0x00007f8ab915b4a2: mov    %rax,0x78(%rsp)
  0x00007f8ab915b4a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915b4ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab915b4b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915b4b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915b4bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915b4c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab915b4c5: mov    %r8,0x38(%rsp)
  0x00007f8ab915b4ca: mov    %r9,0x30(%rsp)
  0x00007f8ab915b4cf: mov    %r10,0x28(%rsp)
  0x00007f8ab915b4d4: mov    %r11,0x20(%rsp)
  0x00007f8ab915b4d9: mov    %r12,0x18(%rsp)
  0x00007f8ab915b4de: mov    %r13,0x10(%rsp)
  0x00007f8ab915b4e3: mov    %r14,0x8(%rsp)
  0x00007f8ab915b4e8: mov    %r15,(%rsp)
  0x00007f8ab915b4ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915b4f6: movabs $0x7f8ab915b496,%rsi
  0x00007f8ab915b500: mov    %rsp,%rdx
  0x00007f8ab915b503: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b507: callq  0x00007f8aceddb9fa
  0x00007f8ab915b50c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915b50d: mov    %rsp,%r11
  0x00007f8ab915b510: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b514: push   %rax
  0x00007f8ab915b515: mov    %r11,%rax
  0x00007f8ab915b518: mov    0x50(%rbx),%r11
  0x00007f8ab915b51c: mov    0x20(%rax),%rsi
  0x00007f8ab915b520: mov    0x18(%rax),%edx
  0x00007f8ab915b523: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab915b528: mov    %rbx,0x258(%r15)
  0x00007f8ab915b52f: mov    %rbx,%rax
  0x00007f8ab915b532: jmpq   *%r11
  0x00007f8ab915b535: mov    0x8(%rsi),%ebx
  0x00007f8ab915b538: shl    $0x3,%rbx
  0x00007f8ab915b53c: cmp    0x10(%rax),%rbx
  0x00007f8ab915b540: mov    0x8(%rax),%rbx
  0x00007f8ab915b544: je     0x00007f8ab915b54f
  0x00007f8ab915b54a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915b54f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915b557: je     0x00007f8ab915b652
  0x00007f8ab915b55d: jmpq   0x00007f8ab9105c40
  0x00007f8ab915b562: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915b56a: je     0x00007f8ab915b652
  0x00007f8ab915b570: mov    %rsp,%r13
  0x00007f8ab915b573: mov    (%rsp),%rax
  0x00007f8ab915b577: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b57b: pushfq 
  0x00007f8ab915b57c: sub    $0x8,%rsp
  0x00007f8ab915b580: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915b585: sub    $0x80,%rsp
  0x00007f8ab915b58c: mov    %rax,0x78(%rsp)
  0x00007f8ab915b591: mov    %rcx,0x70(%rsp)
  0x00007f8ab915b596: mov    %rdx,0x68(%rsp)
  0x00007f8ab915b59b: mov    %rbx,0x60(%rsp)
  0x00007f8ab915b5a0: mov    %rbp,0x50(%rsp)
  0x00007f8ab915b5a5: mov    %rsi,0x48(%rsp)
  0x00007f8ab915b5aa: mov    %rdi,0x40(%rsp)
  0x00007f8ab915b5af: mov    %r8,0x38(%rsp)
  0x00007f8ab915b5b4: mov    %r9,0x30(%rsp)
  0x00007f8ab915b5b9: mov    %r10,0x28(%rsp)
  0x00007f8ab915b5be: mov    %r11,0x20(%rsp)
  0x00007f8ab915b5c3: mov    %r12,0x18(%rsp)
  0x00007f8ab915b5c8: mov    %r13,0x10(%rsp)
  0x00007f8ab915b5cd: mov    %r14,0x8(%rsp)
  0x00007f8ab915b5d2: mov    %r15,(%rsp)
  0x00007f8ab915b5d6: sub    $0x200,%rsp
  0x00007f8ab915b5dd: fxsave64 (%rsp)
  0x00007f8ab915b5e2: mov    %rbx,%rdi
  0x00007f8ab915b5e5: mov    %rax,%rsi
  0x00007f8ab915b5e8: callq  0x00007f8acef8bbca
  0x00007f8ab915b5ed: fxrstor64 (%rsp)
  0x00007f8ab915b5f2: add    $0x200,%rsp
  0x00007f8ab915b5f9: mov    (%rsp),%r15
  0x00007f8ab915b5fd: mov    0x8(%rsp),%r14
  0x00007f8ab915b602: mov    0x10(%rsp),%r13
  0x00007f8ab915b607: mov    0x18(%rsp),%r12
  0x00007f8ab915b60c: mov    0x20(%rsp),%r11
  0x00007f8ab915b611: mov    0x28(%rsp),%r10
  0x00007f8ab915b616: mov    0x30(%rsp),%r9
  0x00007f8ab915b61b: mov    0x38(%rsp),%r8
  0x00007f8ab915b620: mov    0x40(%rsp),%rdi
  0x00007f8ab915b625: mov    0x48(%rsp),%rsi
  0x00007f8ab915b62a: mov    0x50(%rsp),%rbp
  0x00007f8ab915b62f: mov    0x60(%rsp),%rbx
  0x00007f8ab915b634: mov    0x68(%rsp),%rdx
  0x00007f8ab915b639: mov    0x70(%rsp),%rcx
  0x00007f8ab915b63e: mov    0x78(%rsp),%rax
  0x00007f8ab915b643: add    $0x80,%rsp
  0x00007f8ab915b64a: add    $0x8,%rsp
  0x00007f8ab915b64e: popfq  
  0x00007f8ab915b64f: mov    %r13,%rsp
  0x00007f8ab915b652: pop    %rax
  0x00007f8ab915b653: mov    %rsp,%r13
  0x00007f8ab915b656: sub    $0x30,%rsp
  0x00007f8ab915b65a: mov    %rax,(%rsp)
  0x00007f8ab915b65e: mov    %rsi,0x20(%rsp)
  0x00007f8ab915b663: mov    %edx,0x18(%rsp)
  0x00007f8ab915b667: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab915b671: mov    %rax,0x10(%rsp)
  0x00007f8ab915b676: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab915b67c: mov    0x40(%rbx),%rcx
  0x00007f8ab915b680: jmpq   *%rcx

AHE@0x00007f8ac812e4a0: 0xbabe0000 i2c: 0x00007f8ab915b760 c2i: 0x00007f8ab915b8a1 c2iUV: 0x00007f8ab915b874
i2c argument handler #64 for: receiver (IJ)Ljava/lang/AbstractStringBuilder; (608 bytes generated)
c2i argument handler starts at 0x7f8ab915b8a1
  0x00007f8ab915b760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915b764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915b76e: cmp    %r11,%rax
  0x00007f8ab915b771: jbe    0x00007f8ab915b78a
  0x00007f8ab915b777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915b781: cmp    %r11,%rax
  0x00007f8ab915b784: jb     0x00007f8ab915b84d
  0x00007f8ab915b78a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915b794: cmp    %r11,%rax
  0x00007f8ab915b797: jbe    0x00007f8ab915b7b0
  0x00007f8ab915b79d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915b7a7: cmp    %r11,%rax
  0x00007f8ab915b7aa: jb     0x00007f8ab915b84d
  0x00007f8ab915b7b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915b7ba: cmp    %r11,%rax
  0x00007f8ab915b7bd: jbe    0x00007f8ab915b7d6
  0x00007f8ab915b7c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915b7cd: cmp    %r11,%rax
  0x00007f8ab915b7d0: jb     0x00007f8ab915b84d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915b7d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915b7db: sub    $0x80,%rsp
  0x00007f8ab915b7e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915b7e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915b7ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915b7f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915b7f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915b7fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915b800: mov    %rdi,0x40(%rsp)
  0x00007f8ab915b805: mov    %r8,0x38(%rsp)
  0x00007f8ab915b80a: mov    %r9,0x30(%rsp)
  0x00007f8ab915b80f: mov    %r10,0x28(%rsp)
  0x00007f8ab915b814: mov    %r11,0x20(%rsp)
  0x00007f8ab915b819: mov    %r12,0x18(%rsp)
  0x00007f8ab915b81e: mov    %r13,0x10(%rsp)
  0x00007f8ab915b823: mov    %r14,0x8(%rsp)
  0x00007f8ab915b828: mov    %r15,(%rsp)
  0x00007f8ab915b82c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915b836: movabs $0x7f8ab915b7d6,%rsi
  0x00007f8ab915b840: mov    %rsp,%rdx
  0x00007f8ab915b843: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b847: callq  0x00007f8aceddb9fa
  0x00007f8ab915b84c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915b84d: mov    %rsp,%r11
  0x00007f8ab915b850: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b854: push   %rax
  0x00007f8ab915b855: mov    %r11,%rax
  0x00007f8ab915b858: mov    0x50(%rbx),%r11
  0x00007f8ab915b85c: mov    0x20(%rax),%rsi
  0x00007f8ab915b860: mov    0x18(%rax),%edx
  0x00007f8ab915b863: mov    0x8(%rax),%rcx
  0x00007f8ab915b867: mov    %rbx,0x258(%r15)
  0x00007f8ab915b86e: mov    %rbx,%rax
  0x00007f8ab915b871: jmpq   *%r11
  0x00007f8ab915b874: mov    0x8(%rsi),%ebx
  0x00007f8ab915b877: shl    $0x3,%rbx
  0x00007f8ab915b87b: cmp    0x10(%rax),%rbx
  0x00007f8ab915b87f: mov    0x8(%rax),%rbx
  0x00007f8ab915b883: je     0x00007f8ab915b88e
  0x00007f8ab915b889: jmpq   0x00007f8ab9105c40
  0x00007f8ab915b88e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915b896: je     0x00007f8ab915b991
  0x00007f8ab915b89c: jmpq   0x00007f8ab9105c40
  0x00007f8ab915b8a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915b8a9: je     0x00007f8ab915b991
  0x00007f8ab915b8af: mov    %rsp,%r13
  0x00007f8ab915b8b2: mov    (%rsp),%rax
  0x00007f8ab915b8b6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915b8ba: pushfq 
  0x00007f8ab915b8bb: sub    $0x8,%rsp
  0x00007f8ab915b8bf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915b8c4: sub    $0x80,%rsp
  0x00007f8ab915b8cb: mov    %rax,0x78(%rsp)
  0x00007f8ab915b8d0: mov    %rcx,0x70(%rsp)
  0x00007f8ab915b8d5: mov    %rdx,0x68(%rsp)
  0x00007f8ab915b8da: mov    %rbx,0x60(%rsp)
  0x00007f8ab915b8df: mov    %rbp,0x50(%rsp)
  0x00007f8ab915b8e4: mov    %rsi,0x48(%rsp)
  0x00007f8ab915b8e9: mov    %rdi,0x40(%rsp)
  0x00007f8ab915b8ee: mov    %r8,0x38(%rsp)
  0x00007f8ab915b8f3: mov    %r9,0x30(%rsp)
  0x00007f8ab915b8f8: mov    %r10,0x28(%rsp)
  0x00007f8ab915b8fd: mov    %r11,0x20(%rsp)
  0x00007f8ab915b902: mov    %r12,0x18(%rsp)
  0x00007f8ab915b907: mov    %r13,0x10(%rsp)
  0x00007f8ab915b90c: mov    %r14,0x8(%rsp)
  0x00007f8ab915b911: mov    %r15,(%rsp)
  0x00007f8ab915b915: sub    $0x200,%rsp
  0x00007f8ab915b91c: fxsave64 (%rsp)
  0x00007f8ab915b921: mov    %rbx,%rdi
  0x00007f8ab915b924: mov    %rax,%rsi
  0x00007f8ab915b927: callq  0x00007f8acef8bbca
  0x00007f8ab915b92c: fxrstor64 (%rsp)
  0x00007f8ab915b931: add    $0x200,%rsp
  0x00007f8ab915b938: mov    (%rsp),%r15
  0x00007f8ab915b93c: mov    0x8(%rsp),%r14
  0x00007f8ab915b941: mov    0x10(%rsp),%r13
  0x00007f8ab915b946: mov    0x18(%rsp),%r12
  0x00007f8ab915b94b: mov    0x20(%rsp),%r11
  0x00007f8ab915b950: mov    0x28(%rsp),%r10
  0x00007f8ab915b955: mov    0x30(%rsp),%r9
  0x00007f8ab915b95a: mov    0x38(%rsp),%r8
  0x00007f8ab915b95f: mov    0x40(%rsp),%rdi
  0x00007f8ab915b964: mov    0x48(%rsp),%rsi
  0x00007f8ab915b969: mov    0x50(%rsp),%rbp
  0x00007f8ab915b96e: mov    0x60(%rsp),%rbx
  0x00007f8ab915b973: mov    0x68(%rsp),%rdx
  0x00007f8ab915b978: mov    0x70(%rsp),%rcx
  0x00007f8ab915b97d: mov    0x78(%rsp),%rax
  0x00007f8ab915b982: add    $0x80,%rsp
  0x00007f8ab915b989: add    $0x8,%rsp
  0x00007f8ab915b98d: popfq  
  0x00007f8ab915b98e: mov    %r13,%rsp
  0x00007f8ab915b991: pop    %rax
  0x00007f8ab915b992: mov    %rsp,%r13
  0x00007f8ab915b995: sub    $0x30,%rsp
  0x00007f8ab915b999: mov    %rax,(%rsp)
  0x00007f8ab915b99d: mov    %rsi,0x20(%rsp)
  0x00007f8ab915b9a2: mov    %edx,0x18(%rsp)
  0x00007f8ab915b9a6: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915b9b0: mov    %rax,0x10(%rsp)
  0x00007f8ab915b9b5: mov    %rcx,0x8(%rsp)
  0x00007f8ab915b9ba: mov    0x40(%rbx),%rcx
  0x00007f8ab915b9be: jmpq   *%rcx

AHE@0x00007f8ac812e4e8: 0xa6000000 i2c: 0x00007f8ab915ba60 c2i: 0x00007f8ab915bb9e c2iUV: 0x00007f8ab915bb71
i2c argument handler #65 for: static (IF)I (586 bytes generated)
c2i argument handler starts at 0x7f8ab915bb9e
  0x00007f8ab915ba60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915ba64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915ba6e: cmp    %r11,%rax
  0x00007f8ab915ba71: jbe    0x00007f8ab915ba8a
  0x00007f8ab915ba77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915ba81: cmp    %r11,%rax
  0x00007f8ab915ba84: jb     0x00007f8ab915bb4d
  0x00007f8ab915ba8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915ba94: cmp    %r11,%rax
  0x00007f8ab915ba97: jbe    0x00007f8ab915bab0
  0x00007f8ab915ba9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915baa7: cmp    %r11,%rax
  0x00007f8ab915baaa: jb     0x00007f8ab915bb4d
  0x00007f8ab915bab0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915baba: cmp    %r11,%rax
  0x00007f8ab915babd: jbe    0x00007f8ab915bad6
  0x00007f8ab915bac3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915bacd: cmp    %r11,%rax
  0x00007f8ab915bad0: jb     0x00007f8ab915bb4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915bad6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915badb: sub    $0x80,%rsp
  0x00007f8ab915bae2: mov    %rax,0x78(%rsp)
  0x00007f8ab915bae7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915baec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915baf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915baf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915bafb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915bb00: mov    %rdi,0x40(%rsp)
  0x00007f8ab915bb05: mov    %r8,0x38(%rsp)
  0x00007f8ab915bb0a: mov    %r9,0x30(%rsp)
  0x00007f8ab915bb0f: mov    %r10,0x28(%rsp)
  0x00007f8ab915bb14: mov    %r11,0x20(%rsp)
  0x00007f8ab915bb19: mov    %r12,0x18(%rsp)
  0x00007f8ab915bb1e: mov    %r13,0x10(%rsp)
  0x00007f8ab915bb23: mov    %r14,0x8(%rsp)
  0x00007f8ab915bb28: mov    %r15,(%rsp)
  0x00007f8ab915bb2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915bb36: movabs $0x7f8ab915bad6,%rsi
  0x00007f8ab915bb40: mov    %rsp,%rdx
  0x00007f8ab915bb43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915bb47: callq  0x00007f8aceddb9fa
  0x00007f8ab915bb4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915bb4d: mov    %rsp,%r11
  0x00007f8ab915bb50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915bb54: push   %rax
  0x00007f8ab915bb55: mov    %r11,%rax
  0x00007f8ab915bb58: mov    0x50(%rbx),%r11
  0x00007f8ab915bb5c: mov    0x10(%rax),%esi
  0x00007f8ab915bb5f: vmovss 0x8(%rax),%xmm0
  0x00007f8ab915bb64: mov    %rbx,0x258(%r15)
  0x00007f8ab915bb6b: mov    %rbx,%rax
  0x00007f8ab915bb6e: jmpq   *%r11
  0x00007f8ab915bb71: mov    0x8(%rsi),%ebx
  0x00007f8ab915bb74: shl    $0x3,%rbx
  0x00007f8ab915bb78: cmp    0x10(%rax),%rbx
  0x00007f8ab915bb7c: mov    0x8(%rax),%rbx
  0x00007f8ab915bb80: je     0x00007f8ab915bb8b
  0x00007f8ab915bb86: jmpq   0x00007f8ab9105c40
  0x00007f8ab915bb8b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915bb93: je     0x00007f8ab915bc8e
  0x00007f8ab915bb99: jmpq   0x00007f8ab9105c40
  0x00007f8ab915bb9e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915bba6: je     0x00007f8ab915bc8e
  0x00007f8ab915bbac: mov    %rsp,%r13
  0x00007f8ab915bbaf: mov    (%rsp),%rax
  0x00007f8ab915bbb3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915bbb7: pushfq 
  0x00007f8ab915bbb8: sub    $0x8,%rsp
  0x00007f8ab915bbbc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915bbc1: sub    $0x80,%rsp
  0x00007f8ab915bbc8: mov    %rax,0x78(%rsp)
  0x00007f8ab915bbcd: mov    %rcx,0x70(%rsp)
  0x00007f8ab915bbd2: mov    %rdx,0x68(%rsp)
  0x00007f8ab915bbd7: mov    %rbx,0x60(%rsp)
  0x00007f8ab915bbdc: mov    %rbp,0x50(%rsp)
  0x00007f8ab915bbe1: mov    %rsi,0x48(%rsp)
  0x00007f8ab915bbe6: mov    %rdi,0x40(%rsp)
  0x00007f8ab915bbeb: mov    %r8,0x38(%rsp)
  0x00007f8ab915bbf0: mov    %r9,0x30(%rsp)
  0x00007f8ab915bbf5: mov    %r10,0x28(%rsp)
  0x00007f8ab915bbfa: mov    %r11,0x20(%rsp)
  0x00007f8ab915bbff: mov    %r12,0x18(%rsp)
  0x00007f8ab915bc04: mov    %r13,0x10(%rsp)
  0x00007f8ab915bc09: mov    %r14,0x8(%rsp)
  0x00007f8ab915bc0e: mov    %r15,(%rsp)
  0x00007f8ab915bc12: sub    $0x200,%rsp
  0x00007f8ab915bc19: fxsave64 (%rsp)
  0x00007f8ab915bc1e: mov    %rbx,%rdi
  0x00007f8ab915bc21: mov    %rax,%rsi
  0x00007f8ab915bc24: callq  0x00007f8acef8bbca
  0x00007f8ab915bc29: fxrstor64 (%rsp)
  0x00007f8ab915bc2e: add    $0x200,%rsp
  0x00007f8ab915bc35: mov    (%rsp),%r15
  0x00007f8ab915bc39: mov    0x8(%rsp),%r14
  0x00007f8ab915bc3e: mov    0x10(%rsp),%r13
  0x00007f8ab915bc43: mov    0x18(%rsp),%r12
  0x00007f8ab915bc48: mov    0x20(%rsp),%r11
  0x00007f8ab915bc4d: mov    0x28(%rsp),%r10
  0x00007f8ab915bc52: mov    0x30(%rsp),%r9
  0x00007f8ab915bc57: mov    0x38(%rsp),%r8
  0x00007f8ab915bc5c: mov    0x40(%rsp),%rdi
  0x00007f8ab915bc61: mov    0x48(%rsp),%rsi
  0x00007f8ab915bc66: mov    0x50(%rsp),%rbp
  0x00007f8ab915bc6b: mov    0x60(%rsp),%rbx
  0x00007f8ab915bc70: mov    0x68(%rsp),%rdx
  0x00007f8ab915bc75: mov    0x70(%rsp),%rcx
  0x00007f8ab915bc7a: mov    0x78(%rsp),%rax
  0x00007f8ab915bc7f: add    $0x80,%rsp
  0x00007f8ab915bc86: add    $0x8,%rsp
  0x00007f8ab915bc8a: popfq  
  0x00007f8ab915bc8b: mov    %r13,%rsp
  0x00007f8ab915bc8e: pop    %rax
  0x00007f8ab915bc8f: mov    %rsp,%r13
  0x00007f8ab915bc92: sub    $0x20,%rsp
  0x00007f8ab915bc96: mov    %rax,(%rsp)
  0x00007f8ab915bc9a: mov    %esi,0x10(%rsp)
  0x00007f8ab915bc9e: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab915bca4: mov    0x40(%rbx),%rcx
  0x00007f8ab915bca8: jmpq   *%rcx

AHE@0x00007f8ac812e530: 0xbbab0000 i2c: 0x00007f8ab915bd60 c2i: 0x00007f8ab915bea5 c2iUV: 0x00007f8ab915be78
i2c argument handler #66 for: receiver (Ljava/lang/ThreadLocal;ILjava/lang/ThreadLocal$ThreadLocalMap$Entry;)Ljava/lang/ThreadLocal$ThreadLocalMap$Entry; (602 bytes generated)
c2i argument handler starts at 0x7f8ab915bea5
  0x00007f8ab915bd60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915bd64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915bd6e: cmp    %r11,%rax
  0x00007f8ab915bd71: jbe    0x00007f8ab915bd8a
  0x00007f8ab915bd77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915bd81: cmp    %r11,%rax
  0x00007f8ab915bd84: jb     0x00007f8ab915be4d
  0x00007f8ab915bd8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915bd94: cmp    %r11,%rax
  0x00007f8ab915bd97: jbe    0x00007f8ab915bdb0
  0x00007f8ab915bd9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915bda7: cmp    %r11,%rax
  0x00007f8ab915bdaa: jb     0x00007f8ab915be4d
  0x00007f8ab915bdb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915bdba: cmp    %r11,%rax
  0x00007f8ab915bdbd: jbe    0x00007f8ab915bdd6
  0x00007f8ab915bdc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915bdcd: cmp    %r11,%rax
  0x00007f8ab915bdd0: jb     0x00007f8ab915be4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915bdd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915bddb: sub    $0x80,%rsp
  0x00007f8ab915bde2: mov    %rax,0x78(%rsp)
  0x00007f8ab915bde7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915bdec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915bdf1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915bdf6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915bdfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915be00: mov    %rdi,0x40(%rsp)
  0x00007f8ab915be05: mov    %r8,0x38(%rsp)
  0x00007f8ab915be0a: mov    %r9,0x30(%rsp)
  0x00007f8ab915be0f: mov    %r10,0x28(%rsp)
  0x00007f8ab915be14: mov    %r11,0x20(%rsp)
  0x00007f8ab915be19: mov    %r12,0x18(%rsp)
  0x00007f8ab915be1e: mov    %r13,0x10(%rsp)
  0x00007f8ab915be23: mov    %r14,0x8(%rsp)
  0x00007f8ab915be28: mov    %r15,(%rsp)
  0x00007f8ab915be2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915be36: movabs $0x7f8ab915bdd6,%rsi
  0x00007f8ab915be40: mov    %rsp,%rdx
  0x00007f8ab915be43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915be47: callq  0x00007f8aceddb9fa
  0x00007f8ab915be4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915be4d: mov    %rsp,%r11
  0x00007f8ab915be50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915be54: push   %rax
  0x00007f8ab915be55: mov    %r11,%rax
  0x00007f8ab915be58: mov    0x50(%rbx),%r11
  0x00007f8ab915be5c: mov    0x20(%rax),%rsi
  0x00007f8ab915be60: mov    0x18(%rax),%rdx
  0x00007f8ab915be64: mov    0x10(%rax),%ecx
  0x00007f8ab915be67: mov    0x8(%rax),%r8
  0x00007f8ab915be6b: mov    %rbx,0x258(%r15)
  0x00007f8ab915be72: mov    %rbx,%rax
  0x00007f8ab915be75: jmpq   *%r11
  0x00007f8ab915be78: mov    0x8(%rsi),%ebx
  0x00007f8ab915be7b: shl    $0x3,%rbx
  0x00007f8ab915be7f: cmp    0x10(%rax),%rbx
  0x00007f8ab915be83: mov    0x8(%rax),%rbx
  0x00007f8ab915be87: je     0x00007f8ab915be92
  0x00007f8ab915be8d: jmpq   0x00007f8ab9105c40
  0x00007f8ab915be92: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915be9a: je     0x00007f8ab915bf95
  0x00007f8ab915bea0: jmpq   0x00007f8ab9105c40
  0x00007f8ab915bea5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915bead: je     0x00007f8ab915bf95
  0x00007f8ab915beb3: mov    %rsp,%r13
  0x00007f8ab915beb6: mov    (%rsp),%rax
  0x00007f8ab915beba: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915bebe: pushfq 
  0x00007f8ab915bebf: sub    $0x8,%rsp
  0x00007f8ab915bec3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915bec8: sub    $0x80,%rsp
  0x00007f8ab915becf: mov    %rax,0x78(%rsp)
  0x00007f8ab915bed4: mov    %rcx,0x70(%rsp)
  0x00007f8ab915bed9: mov    %rdx,0x68(%rsp)
  0x00007f8ab915bede: mov    %rbx,0x60(%rsp)
  0x00007f8ab915bee3: mov    %rbp,0x50(%rsp)
  0x00007f8ab915bee8: mov    %rsi,0x48(%rsp)
  0x00007f8ab915beed: mov    %rdi,0x40(%rsp)
  0x00007f8ab915bef2: mov    %r8,0x38(%rsp)
  0x00007f8ab915bef7: mov    %r9,0x30(%rsp)
  0x00007f8ab915befc: mov    %r10,0x28(%rsp)
  0x00007f8ab915bf01: mov    %r11,0x20(%rsp)
  0x00007f8ab915bf06: mov    %r12,0x18(%rsp)
  0x00007f8ab915bf0b: mov    %r13,0x10(%rsp)
  0x00007f8ab915bf10: mov    %r14,0x8(%rsp)
  0x00007f8ab915bf15: mov    %r15,(%rsp)
  0x00007f8ab915bf19: sub    $0x200,%rsp
  0x00007f8ab915bf20: fxsave64 (%rsp)
  0x00007f8ab915bf25: mov    %rbx,%rdi
  0x00007f8ab915bf28: mov    %rax,%rsi
  0x00007f8ab915bf2b: callq  0x00007f8acef8bbca
  0x00007f8ab915bf30: fxrstor64 (%rsp)
  0x00007f8ab915bf35: add    $0x200,%rsp
  0x00007f8ab915bf3c: mov    (%rsp),%r15
  0x00007f8ab915bf40: mov    0x8(%rsp),%r14
  0x00007f8ab915bf45: mov    0x10(%rsp),%r13
  0x00007f8ab915bf4a: mov    0x18(%rsp),%r12
  0x00007f8ab915bf4f: mov    0x20(%rsp),%r11
  0x00007f8ab915bf54: mov    0x28(%rsp),%r10
  0x00007f8ab915bf59: mov    0x30(%rsp),%r9
  0x00007f8ab915bf5e: mov    0x38(%rsp),%r8
  0x00007f8ab915bf63: mov    0x40(%rsp),%rdi
  0x00007f8ab915bf68: mov    0x48(%rsp),%rsi
  0x00007f8ab915bf6d: mov    0x50(%rsp),%rbp
  0x00007f8ab915bf72: mov    0x60(%rsp),%rbx
  0x00007f8ab915bf77: mov    0x68(%rsp),%rdx
  0x00007f8ab915bf7c: mov    0x70(%rsp),%rcx
  0x00007f8ab915bf81: mov    0x78(%rsp),%rax
  0x00007f8ab915bf86: add    $0x80,%rsp
  0x00007f8ab915bf8d: add    $0x8,%rsp
  0x00007f8ab915bf91: popfq  
  0x00007f8ab915bf92: mov    %r13,%rsp
  0x00007f8ab915bf95: pop    %rax
  0x00007f8ab915bf96: mov    %rsp,%r13
  0x00007f8ab915bf99: sub    $0x30,%rsp
  0x00007f8ab915bf9d: mov    %rax,(%rsp)
  0x00007f8ab915bfa1: mov    %rsi,0x20(%rsp)
  0x00007f8ab915bfa6: mov    %rdx,0x18(%rsp)
  0x00007f8ab915bfab: mov    %ecx,0x10(%rsp)
  0x00007f8ab915bfaf: mov    %r8,0x8(%rsp)
  0x00007f8ab915bfb4: mov    0x40(%rbx),%rcx
  0x00007f8ab915bfb8: jmpq   *%rcx

AHE@0x00007f8ac812e578: 0xbb660000 i2c: 0x00007f8ab915c060 c2i: 0x00007f8ab915c1a8 c2iUV: 0x00007f8ab915c17b
i2c argument handler #67 for: receiver (Ljava/nio/charset/Charset;FF)V (608 bytes generated)
c2i argument handler starts at 0x7f8ab915c1a8
  0x00007f8ab915c060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915c064: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915c06e: cmp    %r11,%rax
  0x00007f8ab915c071: jbe    0x00007f8ab915c08a
  0x00007f8ab915c077: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915c081: cmp    %r11,%rax
  0x00007f8ab915c084: jb     0x00007f8ab915c14d
  0x00007f8ab915c08a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915c094: cmp    %r11,%rax
  0x00007f8ab915c097: jbe    0x00007f8ab915c0b0
  0x00007f8ab915c09d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915c0a7: cmp    %r11,%rax
  0x00007f8ab915c0aa: jb     0x00007f8ab915c14d
  0x00007f8ab915c0b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915c0ba: cmp    %r11,%rax
  0x00007f8ab915c0bd: jbe    0x00007f8ab915c0d6
  0x00007f8ab915c0c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915c0cd: cmp    %r11,%rax
  0x00007f8ab915c0d0: jb     0x00007f8ab915c14d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915c0d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915c0db: sub    $0x80,%rsp
  0x00007f8ab915c0e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915c0e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915c0ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915c0f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915c0f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915c0fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915c100: mov    %rdi,0x40(%rsp)
  0x00007f8ab915c105: mov    %r8,0x38(%rsp)
  0x00007f8ab915c10a: mov    %r9,0x30(%rsp)
  0x00007f8ab915c10f: mov    %r10,0x28(%rsp)
  0x00007f8ab915c114: mov    %r11,0x20(%rsp)
  0x00007f8ab915c119: mov    %r12,0x18(%rsp)
  0x00007f8ab915c11e: mov    %r13,0x10(%rsp)
  0x00007f8ab915c123: mov    %r14,0x8(%rsp)
  0x00007f8ab915c128: mov    %r15,(%rsp)
  0x00007f8ab915c12c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915c136: movabs $0x7f8ab915c0d6,%rsi
  0x00007f8ab915c140: mov    %rsp,%rdx
  0x00007f8ab915c143: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c147: callq  0x00007f8aceddb9fa
  0x00007f8ab915c14c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915c14d: mov    %rsp,%r11
  0x00007f8ab915c150: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c154: push   %rax
  0x00007f8ab915c155: mov    %r11,%rax
  0x00007f8ab915c158: mov    0x50(%rbx),%r11
  0x00007f8ab915c15c: mov    0x20(%rax),%rsi
  0x00007f8ab915c160: mov    0x18(%rax),%rdx
  0x00007f8ab915c164: vmovss 0x10(%rax),%xmm0
  0x00007f8ab915c169: vmovss 0x8(%rax),%xmm1
  0x00007f8ab915c16e: mov    %rbx,0x258(%r15)
  0x00007f8ab915c175: mov    %rbx,%rax
  0x00007f8ab915c178: jmpq   *%r11
  0x00007f8ab915c17b: mov    0x8(%rsi),%ebx
  0x00007f8ab915c17e: shl    $0x3,%rbx
  0x00007f8ab915c182: cmp    0x10(%rax),%rbx
  0x00007f8ab915c186: mov    0x8(%rax),%rbx
  0x00007f8ab915c18a: je     0x00007f8ab915c195
  0x00007f8ab915c190: jmpq   0x00007f8ab9105c40
  0x00007f8ab915c195: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915c19d: je     0x00007f8ab915c298
  0x00007f8ab915c1a3: jmpq   0x00007f8ab9105c40
  0x00007f8ab915c1a8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915c1b0: je     0x00007f8ab915c298
  0x00007f8ab915c1b6: mov    %rsp,%r13
  0x00007f8ab915c1b9: mov    (%rsp),%rax
  0x00007f8ab915c1bd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c1c1: pushfq 
  0x00007f8ab915c1c2: sub    $0x8,%rsp
  0x00007f8ab915c1c6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915c1cb: sub    $0x80,%rsp
  0x00007f8ab915c1d2: mov    %rax,0x78(%rsp)
  0x00007f8ab915c1d7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915c1dc: mov    %rdx,0x68(%rsp)
  0x00007f8ab915c1e1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915c1e6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915c1eb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915c1f0: mov    %rdi,0x40(%rsp)
  0x00007f8ab915c1f5: mov    %r8,0x38(%rsp)
  0x00007f8ab915c1fa: mov    %r9,0x30(%rsp)
  0x00007f8ab915c1ff: mov    %r10,0x28(%rsp)
  0x00007f8ab915c204: mov    %r11,0x20(%rsp)
  0x00007f8ab915c209: mov    %r12,0x18(%rsp)
  0x00007f8ab915c20e: mov    %r13,0x10(%rsp)
  0x00007f8ab915c213: mov    %r14,0x8(%rsp)
  0x00007f8ab915c218: mov    %r15,(%rsp)
  0x00007f8ab915c21c: sub    $0x200,%rsp
  0x00007f8ab915c223: fxsave64 (%rsp)
  0x00007f8ab915c228: mov    %rbx,%rdi
  0x00007f8ab915c22b: mov    %rax,%rsi
  0x00007f8ab915c22e: callq  0x00007f8acef8bbca
  0x00007f8ab915c233: fxrstor64 (%rsp)
  0x00007f8ab915c238: add    $0x200,%rsp
  0x00007f8ab915c23f: mov    (%rsp),%r15
  0x00007f8ab915c243: mov    0x8(%rsp),%r14
  0x00007f8ab915c248: mov    0x10(%rsp),%r13
  0x00007f8ab915c24d: mov    0x18(%rsp),%r12
  0x00007f8ab915c252: mov    0x20(%rsp),%r11
  0x00007f8ab915c257: mov    0x28(%rsp),%r10
  0x00007f8ab915c25c: mov    0x30(%rsp),%r9
  0x00007f8ab915c261: mov    0x38(%rsp),%r8
  0x00007f8ab915c266: mov    0x40(%rsp),%rdi
  0x00007f8ab915c26b: mov    0x48(%rsp),%rsi
  0x00007f8ab915c270: mov    0x50(%rsp),%rbp
  0x00007f8ab915c275: mov    0x60(%rsp),%rbx
  0x00007f8ab915c27a: mov    0x68(%rsp),%rdx
  0x00007f8ab915c27f: mov    0x70(%rsp),%rcx
  0x00007f8ab915c284: mov    0x78(%rsp),%rax
  0x00007f8ab915c289: add    $0x80,%rsp
  0x00007f8ab915c290: add    $0x8,%rsp
  0x00007f8ab915c294: popfq  
  0x00007f8ab915c295: mov    %r13,%rsp
  0x00007f8ab915c298: pop    %rax
  0x00007f8ab915c299: mov    %rsp,%r13
  0x00007f8ab915c29c: sub    $0x30,%rsp
  0x00007f8ab915c2a0: mov    %rax,(%rsp)
  0x00007f8ab915c2a4: mov    %rsi,0x20(%rsp)
  0x00007f8ab915c2a9: mov    %rdx,0x18(%rsp)
  0x00007f8ab915c2ae: vmovss %xmm0,0x10(%rsp)
  0x00007f8ab915c2b4: vmovss %xmm1,0x8(%rsp)
  0x00007f8ab915c2ba: mov    0x40(%rbx),%rcx
  0x00007f8ab915c2be: jmpq   *%rcx

AHE@0x00007f8ac812e5c0: 0xbb66b000 i2c: 0x00007f8ab915c360 c2i: 0x00007f8ab915c4ac c2iUV: 0x00007f8ab915c47f
i2c argument handler #68 for: receiver (Ljava/nio/charset/Charset;FFLjava/lang/String;)V (617 bytes generated)
c2i argument handler starts at 0x7f8ab915c4ac
  0x00007f8ab915c360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915c364: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915c36e: cmp    %r11,%rax
  0x00007f8ab915c371: jbe    0x00007f8ab915c38a
  0x00007f8ab915c377: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915c381: cmp    %r11,%rax
  0x00007f8ab915c384: jb     0x00007f8ab915c44d
  0x00007f8ab915c38a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915c394: cmp    %r11,%rax
  0x00007f8ab915c397: jbe    0x00007f8ab915c3b0
  0x00007f8ab915c39d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915c3a7: cmp    %r11,%rax
  0x00007f8ab915c3aa: jb     0x00007f8ab915c44d
  0x00007f8ab915c3b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915c3ba: cmp    %r11,%rax
  0x00007f8ab915c3bd: jbe    0x00007f8ab915c3d6
  0x00007f8ab915c3c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915c3cd: cmp    %r11,%rax
  0x00007f8ab915c3d0: jb     0x00007f8ab915c44d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915c3d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915c3db: sub    $0x80,%rsp
  0x00007f8ab915c3e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915c3e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915c3ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915c3f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915c3f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915c3fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915c400: mov    %rdi,0x40(%rsp)
  0x00007f8ab915c405: mov    %r8,0x38(%rsp)
  0x00007f8ab915c40a: mov    %r9,0x30(%rsp)
  0x00007f8ab915c40f: mov    %r10,0x28(%rsp)
  0x00007f8ab915c414: mov    %r11,0x20(%rsp)
  0x00007f8ab915c419: mov    %r12,0x18(%rsp)
  0x00007f8ab915c41e: mov    %r13,0x10(%rsp)
  0x00007f8ab915c423: mov    %r14,0x8(%rsp)
  0x00007f8ab915c428: mov    %r15,(%rsp)
  0x00007f8ab915c42c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915c436: movabs $0x7f8ab915c3d6,%rsi
  0x00007f8ab915c440: mov    %rsp,%rdx
  0x00007f8ab915c443: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c447: callq  0x00007f8aceddb9fa
  0x00007f8ab915c44c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915c44d: mov    %rsp,%r11
  0x00007f8ab915c450: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c454: push   %rax
  0x00007f8ab915c455: mov    %r11,%rax
  0x00007f8ab915c458: mov    0x50(%rbx),%r11
  0x00007f8ab915c45c: mov    0x28(%rax),%rsi
  0x00007f8ab915c460: mov    0x20(%rax),%rdx
  0x00007f8ab915c464: vmovss 0x18(%rax),%xmm0
  0x00007f8ab915c469: vmovss 0x10(%rax),%xmm1
  0x00007f8ab915c46e: mov    0x8(%rax),%rcx
  0x00007f8ab915c472: mov    %rbx,0x258(%r15)
  0x00007f8ab915c479: mov    %rbx,%rax
  0x00007f8ab915c47c: jmpq   *%r11
  0x00007f8ab915c47f: mov    0x8(%rsi),%ebx
  0x00007f8ab915c482: shl    $0x3,%rbx
  0x00007f8ab915c486: cmp    0x10(%rax),%rbx
  0x00007f8ab915c48a: mov    0x8(%rax),%rbx
  0x00007f8ab915c48e: je     0x00007f8ab915c499
  0x00007f8ab915c494: jmpq   0x00007f8ab9105c40
  0x00007f8ab915c499: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915c4a1: je     0x00007f8ab915c59c
  0x00007f8ab915c4a7: jmpq   0x00007f8ab9105c40
  0x00007f8ab915c4ac: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915c4b4: je     0x00007f8ab915c59c
  0x00007f8ab915c4ba: mov    %rsp,%r13
  0x00007f8ab915c4bd: mov    (%rsp),%rax
  0x00007f8ab915c4c1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c4c5: pushfq 
  0x00007f8ab915c4c6: sub    $0x8,%rsp
  0x00007f8ab915c4ca: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915c4cf: sub    $0x80,%rsp
  0x00007f8ab915c4d6: mov    %rax,0x78(%rsp)
  0x00007f8ab915c4db: mov    %rcx,0x70(%rsp)
  0x00007f8ab915c4e0: mov    %rdx,0x68(%rsp)
  0x00007f8ab915c4e5: mov    %rbx,0x60(%rsp)
  0x00007f8ab915c4ea: mov    %rbp,0x50(%rsp)
  0x00007f8ab915c4ef: mov    %rsi,0x48(%rsp)
  0x00007f8ab915c4f4: mov    %rdi,0x40(%rsp)
  0x00007f8ab915c4f9: mov    %r8,0x38(%rsp)
  0x00007f8ab915c4fe: mov    %r9,0x30(%rsp)
  0x00007f8ab915c503: mov    %r10,0x28(%rsp)
  0x00007f8ab915c508: mov    %r11,0x20(%rsp)
  0x00007f8ab915c50d: mov    %r12,0x18(%rsp)
  0x00007f8ab915c512: mov    %r13,0x10(%rsp)
  0x00007f8ab915c517: mov    %r14,0x8(%rsp)
  0x00007f8ab915c51c: mov    %r15,(%rsp)
  0x00007f8ab915c520: sub    $0x200,%rsp
  0x00007f8ab915c527: fxsave64 (%rsp)
  0x00007f8ab915c52c: mov    %rbx,%rdi
  0x00007f8ab915c52f: mov    %rax,%rsi
  0x00007f8ab915c532: callq  0x00007f8acef8bbca
  0x00007f8ab915c537: fxrstor64 (%rsp)
  0x00007f8ab915c53c: add    $0x200,%rsp
  0x00007f8ab915c543: mov    (%rsp),%r15
  0x00007f8ab915c547: mov    0x8(%rsp),%r14
  0x00007f8ab915c54c: mov    0x10(%rsp),%r13
  0x00007f8ab915c551: mov    0x18(%rsp),%r12
  0x00007f8ab915c556: mov    0x20(%rsp),%r11
  0x00007f8ab915c55b: mov    0x28(%rsp),%r10
  0x00007f8ab915c560: mov    0x30(%rsp),%r9
  0x00007f8ab915c565: mov    0x38(%rsp),%r8
  0x00007f8ab915c56a: mov    0x40(%rsp),%rdi
  0x00007f8ab915c56f: mov    0x48(%rsp),%rsi
  0x00007f8ab915c574: mov    0x50(%rsp),%rbp
  0x00007f8ab915c579: mov    0x60(%rsp),%rbx
  0x00007f8ab915c57e: mov    0x68(%rsp),%rdx
  0x00007f8ab915c583: mov    0x70(%rsp),%rcx
  0x00007f8ab915c588: mov    0x78(%rsp),%rax
  0x00007f8ab915c58d: add    $0x80,%rsp
  0x00007f8ab915c594: add    $0x8,%rsp
  0x00007f8ab915c598: popfq  
  0x00007f8ab915c599: mov    %r13,%rsp
  0x00007f8ab915c59c: pop    %rax
  0x00007f8ab915c59d: mov    %rsp,%r13
  0x00007f8ab915c5a0: sub    $0x30,%rsp
  0x00007f8ab915c5a4: mov    %rax,(%rsp)
  0x00007f8ab915c5a8: mov    %rsi,0x28(%rsp)
  0x00007f8ab915c5ad: mov    %rdx,0x20(%rsp)
  0x00007f8ab915c5b2: vmovss %xmm0,0x18(%rsp)
  0x00007f8ab915c5b8: vmovss %xmm1,0x10(%rsp)
  0x00007f8ab915c5be: mov    %rcx,0x8(%rsp)
  0x00007f8ab915c5c3: mov    0x40(%rbx),%rcx
  0x00007f8ab915c5c7: jmpq   *%rcx

AHE@0x00007f8ac812e608: 0xbaaaaba0 i2c: 0x00007f8ab915c6a0 c2i: 0x00007f8ab915c7f9 c2iUV: 0x00007f8ab915c7cc
i2c argument handler #69 for: receiver (IIII[BI)V (640 bytes generated)
c2i argument handler starts at 0x7f8ab915c7f9
  0x00007f8ab915c6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915c6a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915c6ae: cmp    %r11,%rax
  0x00007f8ab915c6b1: jbe    0x00007f8ab915c6ca
  0x00007f8ab915c6b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915c6c1: cmp    %r11,%rax
  0x00007f8ab915c6c4: jb     0x00007f8ab915c78d
  0x00007f8ab915c6ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915c6d4: cmp    %r11,%rax
  0x00007f8ab915c6d7: jbe    0x00007f8ab915c6f0
  0x00007f8ab915c6dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915c6e7: cmp    %r11,%rax
  0x00007f8ab915c6ea: jb     0x00007f8ab915c78d
  0x00007f8ab915c6f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915c6fa: cmp    %r11,%rax
  0x00007f8ab915c6fd: jbe    0x00007f8ab915c716
  0x00007f8ab915c703: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915c70d: cmp    %r11,%rax
  0x00007f8ab915c710: jb     0x00007f8ab915c78d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915c716: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915c71b: sub    $0x80,%rsp
  0x00007f8ab915c722: mov    %rax,0x78(%rsp)
  0x00007f8ab915c727: mov    %rcx,0x70(%rsp)
  0x00007f8ab915c72c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915c731: mov    %rbx,0x60(%rsp)
  0x00007f8ab915c736: mov    %rbp,0x50(%rsp)
  0x00007f8ab915c73b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915c740: mov    %rdi,0x40(%rsp)
  0x00007f8ab915c745: mov    %r8,0x38(%rsp)
  0x00007f8ab915c74a: mov    %r9,0x30(%rsp)
  0x00007f8ab915c74f: mov    %r10,0x28(%rsp)
  0x00007f8ab915c754: mov    %r11,0x20(%rsp)
  0x00007f8ab915c759: mov    %r12,0x18(%rsp)
  0x00007f8ab915c75e: mov    %r13,0x10(%rsp)
  0x00007f8ab915c763: mov    %r14,0x8(%rsp)
  0x00007f8ab915c768: mov    %r15,(%rsp)
  0x00007f8ab915c76c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915c776: movabs $0x7f8ab915c716,%rsi
  0x00007f8ab915c780: mov    %rsp,%rdx
  0x00007f8ab915c783: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c787: callq  0x00007f8aceddb9fa
  0x00007f8ab915c78c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915c78d: mov    %rsp,%r11
  0x00007f8ab915c790: sub    $0x10,%rsp
  0x00007f8ab915c794: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c798: push   %rax
  0x00007f8ab915c799: mov    %r11,%rax
  0x00007f8ab915c79c: mov    0x50(%rbx),%r11
  0x00007f8ab915c7a0: mov    0x38(%rax),%rsi
  0x00007f8ab915c7a4: mov    0x30(%rax),%edx
  0x00007f8ab915c7a7: mov    0x28(%rax),%ecx
  0x00007f8ab915c7aa: mov    0x20(%rax),%r8d
  0x00007f8ab915c7ae: mov    0x18(%rax),%r9d
  0x00007f8ab915c7b2: mov    0x10(%rax),%rdi
  0x00007f8ab915c7b6: mov    0x8(%rax),%r13d
  0x00007f8ab915c7ba: mov    %r13,0x8(%rsp)
  0x00007f8ab915c7bf: mov    %rbx,0x258(%r15)
  0x00007f8ab915c7c6: mov    %rbx,%rax
  0x00007f8ab915c7c9: jmpq   *%r11
  0x00007f8ab915c7cc: mov    0x8(%rsi),%ebx
  0x00007f8ab915c7cf: shl    $0x3,%rbx
  0x00007f8ab915c7d3: cmp    0x10(%rax),%rbx
  0x00007f8ab915c7d7: mov    0x8(%rax),%rbx
  0x00007f8ab915c7db: je     0x00007f8ab915c7e6
  0x00007f8ab915c7e1: jmpq   0x00007f8ab9105c40
  0x00007f8ab915c7e6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915c7ee: je     0x00007f8ab915c8e9
  0x00007f8ab915c7f4: jmpq   0x00007f8ab9105c40
  0x00007f8ab915c7f9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915c801: je     0x00007f8ab915c8e9
  0x00007f8ab915c807: mov    %rsp,%r13
  0x00007f8ab915c80a: mov    (%rsp),%rax
  0x00007f8ab915c80e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915c812: pushfq 
  0x00007f8ab915c813: sub    $0x8,%rsp
  0x00007f8ab915c817: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915c81c: sub    $0x80,%rsp
  0x00007f8ab915c823: mov    %rax,0x78(%rsp)
  0x00007f8ab915c828: mov    %rcx,0x70(%rsp)
  0x00007f8ab915c82d: mov    %rdx,0x68(%rsp)
  0x00007f8ab915c832: mov    %rbx,0x60(%rsp)
  0x00007f8ab915c837: mov    %rbp,0x50(%rsp)
  0x00007f8ab915c83c: mov    %rsi,0x48(%rsp)
  0x00007f8ab915c841: mov    %rdi,0x40(%rsp)
  0x00007f8ab915c846: mov    %r8,0x38(%rsp)
  0x00007f8ab915c84b: mov    %r9,0x30(%rsp)
  0x00007f8ab915c850: mov    %r10,0x28(%rsp)
  0x00007f8ab915c855: mov    %r11,0x20(%rsp)
  0x00007f8ab915c85a: mov    %r12,0x18(%rsp)
  0x00007f8ab915c85f: mov    %r13,0x10(%rsp)
  0x00007f8ab915c864: mov    %r14,0x8(%rsp)
  0x00007f8ab915c869: mov    %r15,(%rsp)
  0x00007f8ab915c86d: sub    $0x200,%rsp
  0x00007f8ab915c874: fxsave64 (%rsp)
  0x00007f8ab915c879: mov    %rbx,%rdi
  0x00007f8ab915c87c: mov    %rax,%rsi
  0x00007f8ab915c87f: callq  0x00007f8acef8bbca
  0x00007f8ab915c884: fxrstor64 (%rsp)
  0x00007f8ab915c889: add    $0x200,%rsp
  0x00007f8ab915c890: mov    (%rsp),%r15
  0x00007f8ab915c894: mov    0x8(%rsp),%r14
  0x00007f8ab915c899: mov    0x10(%rsp),%r13
  0x00007f8ab915c89e: mov    0x18(%rsp),%r12
  0x00007f8ab915c8a3: mov    0x20(%rsp),%r11
  0x00007f8ab915c8a8: mov    0x28(%rsp),%r10
  0x00007f8ab915c8ad: mov    0x30(%rsp),%r9
  0x00007f8ab915c8b2: mov    0x38(%rsp),%r8
  0x00007f8ab915c8b7: mov    0x40(%rsp),%rdi
  0x00007f8ab915c8bc: mov    0x48(%rsp),%rsi
  0x00007f8ab915c8c1: mov    0x50(%rsp),%rbp
  0x00007f8ab915c8c6: mov    0x60(%rsp),%rbx
  0x00007f8ab915c8cb: mov    0x68(%rsp),%rdx
  0x00007f8ab915c8d0: mov    0x70(%rsp),%rcx
  0x00007f8ab915c8d5: mov    0x78(%rsp),%rax
  0x00007f8ab915c8da: add    $0x80,%rsp
  0x00007f8ab915c8e1: add    $0x8,%rsp
  0x00007f8ab915c8e5: popfq  
  0x00007f8ab915c8e6: mov    %r13,%rsp
  0x00007f8ab915c8e9: pop    %rax
  0x00007f8ab915c8ea: mov    %rsp,%r13
  0x00007f8ab915c8ed: sub    $0x40,%rsp
  0x00007f8ab915c8f1: mov    %rax,(%rsp)
  0x00007f8ab915c8f5: mov    %rsi,0x38(%rsp)
  0x00007f8ab915c8fa: mov    %edx,0x30(%rsp)
  0x00007f8ab915c8fe: mov    %ecx,0x28(%rsp)
  0x00007f8ab915c902: mov    %r8d,0x20(%rsp)
  0x00007f8ab915c907: mov    %r9d,0x18(%rsp)
  0x00007f8ab915c90c: mov    %rdi,0x10(%rsp)
  0x00007f8ab915c911: mov    0x40(%rsp),%eax
  0x00007f8ab915c915: mov    %rax,0x8(%rsp)
  0x00007f8ab915c91a: mov    0x40(%rbx),%rcx
  0x00007f8ab915c91e: jmpq   *%rcx

AHE@0x00007f8ac812e650: 0xbbaaaaa0 i2c: 0x00007f8ab915c9e0 c2i: 0x00007f8ab915cb39 c2iUV: 0x00007f8ab915cb0c
i2c argument handler #70 for: receiver ([BIIIII)V (640 bytes generated)
c2i argument handler starts at 0x7f8ab915cb39
  0x00007f8ab915c9e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915c9e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915c9ee: cmp    %r11,%rax
  0x00007f8ab915c9f1: jbe    0x00007f8ab915ca0a
  0x00007f8ab915c9f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915ca01: cmp    %r11,%rax
  0x00007f8ab915ca04: jb     0x00007f8ab915cacd
  0x00007f8ab915ca0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915ca14: cmp    %r11,%rax
  0x00007f8ab915ca17: jbe    0x00007f8ab915ca30
  0x00007f8ab915ca1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915ca27: cmp    %r11,%rax
  0x00007f8ab915ca2a: jb     0x00007f8ab915cacd
  0x00007f8ab915ca30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915ca3a: cmp    %r11,%rax
  0x00007f8ab915ca3d: jbe    0x00007f8ab915ca56
  0x00007f8ab915ca43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915ca4d: cmp    %r11,%rax
  0x00007f8ab915ca50: jb     0x00007f8ab915cacd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915ca56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ca5b: sub    $0x80,%rsp
  0x00007f8ab915ca62: mov    %rax,0x78(%rsp)
  0x00007f8ab915ca67: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ca6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ca71: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ca76: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ca7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ca80: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ca85: mov    %r8,0x38(%rsp)
  0x00007f8ab915ca8a: mov    %r9,0x30(%rsp)
  0x00007f8ab915ca8f: mov    %r10,0x28(%rsp)
  0x00007f8ab915ca94: mov    %r11,0x20(%rsp)
  0x00007f8ab915ca99: mov    %r12,0x18(%rsp)
  0x00007f8ab915ca9e: mov    %r13,0x10(%rsp)
  0x00007f8ab915caa3: mov    %r14,0x8(%rsp)
  0x00007f8ab915caa8: mov    %r15,(%rsp)
  0x00007f8ab915caac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915cab6: movabs $0x7f8ab915ca56,%rsi
  0x00007f8ab915cac0: mov    %rsp,%rdx
  0x00007f8ab915cac3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915cac7: callq  0x00007f8aceddb9fa
  0x00007f8ab915cacc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915cacd: mov    %rsp,%r11
  0x00007f8ab915cad0: sub    $0x10,%rsp
  0x00007f8ab915cad4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915cad8: push   %rax
  0x00007f8ab915cad9: mov    %r11,%rax
  0x00007f8ab915cadc: mov    0x50(%rbx),%r11
  0x00007f8ab915cae0: mov    0x38(%rax),%rsi
  0x00007f8ab915cae4: mov    0x30(%rax),%rdx
  0x00007f8ab915cae8: mov    0x28(%rax),%ecx
  0x00007f8ab915caeb: mov    0x20(%rax),%r8d
  0x00007f8ab915caef: mov    0x18(%rax),%r9d
  0x00007f8ab915caf3: mov    0x10(%rax),%edi
  0x00007f8ab915caf6: mov    0x8(%rax),%r13d
  0x00007f8ab915cafa: mov    %r13,0x8(%rsp)
  0x00007f8ab915caff: mov    %rbx,0x258(%r15)
  0x00007f8ab915cb06: mov    %rbx,%rax
  0x00007f8ab915cb09: jmpq   *%r11
  0x00007f8ab915cb0c: mov    0x8(%rsi),%ebx
  0x00007f8ab915cb0f: shl    $0x3,%rbx
  0x00007f8ab915cb13: cmp    0x10(%rax),%rbx
  0x00007f8ab915cb17: mov    0x8(%rax),%rbx
  0x00007f8ab915cb1b: je     0x00007f8ab915cb26
  0x00007f8ab915cb21: jmpq   0x00007f8ab9105c40
  0x00007f8ab915cb26: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915cb2e: je     0x00007f8ab915cc29
  0x00007f8ab915cb34: jmpq   0x00007f8ab9105c40
  0x00007f8ab915cb39: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915cb41: je     0x00007f8ab915cc29
  0x00007f8ab915cb47: mov    %rsp,%r13
  0x00007f8ab915cb4a: mov    (%rsp),%rax
  0x00007f8ab915cb4e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915cb52: pushfq 
  0x00007f8ab915cb53: sub    $0x8,%rsp
  0x00007f8ab915cb57: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915cb5c: sub    $0x80,%rsp
  0x00007f8ab915cb63: mov    %rax,0x78(%rsp)
  0x00007f8ab915cb68: mov    %rcx,0x70(%rsp)
  0x00007f8ab915cb6d: mov    %rdx,0x68(%rsp)
  0x00007f8ab915cb72: mov    %rbx,0x60(%rsp)
  0x00007f8ab915cb77: mov    %rbp,0x50(%rsp)
  0x00007f8ab915cb7c: mov    %rsi,0x48(%rsp)
  0x00007f8ab915cb81: mov    %rdi,0x40(%rsp)
  0x00007f8ab915cb86: mov    %r8,0x38(%rsp)
  0x00007f8ab915cb8b: mov    %r9,0x30(%rsp)
  0x00007f8ab915cb90: mov    %r10,0x28(%rsp)
  0x00007f8ab915cb95: mov    %r11,0x20(%rsp)
  0x00007f8ab915cb9a: mov    %r12,0x18(%rsp)
  0x00007f8ab915cb9f: mov    %r13,0x10(%rsp)
  0x00007f8ab915cba4: mov    %r14,0x8(%rsp)
  0x00007f8ab915cba9: mov    %r15,(%rsp)
  0x00007f8ab915cbad: sub    $0x200,%rsp
  0x00007f8ab915cbb4: fxsave64 (%rsp)
  0x00007f8ab915cbb9: mov    %rbx,%rdi
  0x00007f8ab915cbbc: mov    %rax,%rsi
  0x00007f8ab915cbbf: callq  0x00007f8acef8bbca
  0x00007f8ab915cbc4: fxrstor64 (%rsp)
  0x00007f8ab915cbc9: add    $0x200,%rsp
  0x00007f8ab915cbd0: mov    (%rsp),%r15
  0x00007f8ab915cbd4: mov    0x8(%rsp),%r14
  0x00007f8ab915cbd9: mov    0x10(%rsp),%r13
  0x00007f8ab915cbde: mov    0x18(%rsp),%r12
  0x00007f8ab915cbe3: mov    0x20(%rsp),%r11
  0x00007f8ab915cbe8: mov    0x28(%rsp),%r10
  0x00007f8ab915cbed: mov    0x30(%rsp),%r9
  0x00007f8ab915cbf2: mov    0x38(%rsp),%r8
  0x00007f8ab915cbf7: mov    0x40(%rsp),%rdi
  0x00007f8ab915cbfc: mov    0x48(%rsp),%rsi
  0x00007f8ab915cc01: mov    0x50(%rsp),%rbp
  0x00007f8ab915cc06: mov    0x60(%rsp),%rbx
  0x00007f8ab915cc0b: mov    0x68(%rsp),%rdx
  0x00007f8ab915cc10: mov    0x70(%rsp),%rcx
  0x00007f8ab915cc15: mov    0x78(%rsp),%rax
  0x00007f8ab915cc1a: add    $0x80,%rsp
  0x00007f8ab915cc21: add    $0x8,%rsp
  0x00007f8ab915cc25: popfq  
  0x00007f8ab915cc26: mov    %r13,%rsp
  0x00007f8ab915cc29: pop    %rax
  0x00007f8ab915cc2a: mov    %rsp,%r13
  0x00007f8ab915cc2d: sub    $0x40,%rsp
  0x00007f8ab915cc31: mov    %rax,(%rsp)
  0x00007f8ab915cc35: mov    %rsi,0x38(%rsp)
  0x00007f8ab915cc3a: mov    %rdx,0x30(%rsp)
  0x00007f8ab915cc3f: mov    %ecx,0x28(%rsp)
  0x00007f8ab915cc43: mov    %r8d,0x20(%rsp)
  0x00007f8ab915cc48: mov    %r9d,0x18(%rsp)
  0x00007f8ab915cc4d: mov    %edi,0x10(%rsp)
  0x00007f8ab915cc51: mov    0x40(%rsp),%eax
  0x00007f8ab915cc55: mov    %rax,0x8(%rsp)
  0x00007f8ab915cc5a: mov    0x40(%rbx),%rcx
  0x00007f8ab915cc5e: jmpq   *%rcx

AHE@0x00007f8ac812e698: 0xbbebbebebe000000 i2c: 0x00007f8ab915cd20 c2i: 0x00007f8ab915ce6e c2iUV: 0x00007f8ab915ce41
i2c argument handler #71 for: static (Ljava/lang/Object;JLjava/lang/Object;JJJ)V (682 bytes generated)
c2i argument handler starts at 0x7f8ab915ce6e
  0x00007f8ab915cd20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915cd24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915cd2e: cmp    %r11,%rax
  0x00007f8ab915cd31: jbe    0x00007f8ab915cd4a
  0x00007f8ab915cd37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915cd41: cmp    %r11,%rax
  0x00007f8ab915cd44: jb     0x00007f8ab915ce0d
  0x00007f8ab915cd4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915cd54: cmp    %r11,%rax
  0x00007f8ab915cd57: jbe    0x00007f8ab915cd70
  0x00007f8ab915cd5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915cd67: cmp    %r11,%rax
  0x00007f8ab915cd6a: jb     0x00007f8ab915ce0d
  0x00007f8ab915cd70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915cd7a: cmp    %r11,%rax
  0x00007f8ab915cd7d: jbe    0x00007f8ab915cd96
  0x00007f8ab915cd83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915cd8d: cmp    %r11,%rax
  0x00007f8ab915cd90: jb     0x00007f8ab915ce0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915cd96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915cd9b: sub    $0x80,%rsp
  0x00007f8ab915cda2: mov    %rax,0x78(%rsp)
  0x00007f8ab915cda7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915cdac: mov    %rdx,0x68(%rsp)
  0x00007f8ab915cdb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915cdb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915cdbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915cdc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab915cdc5: mov    %r8,0x38(%rsp)
  0x00007f8ab915cdca: mov    %r9,0x30(%rsp)
  0x00007f8ab915cdcf: mov    %r10,0x28(%rsp)
  0x00007f8ab915cdd4: mov    %r11,0x20(%rsp)
  0x00007f8ab915cdd9: mov    %r12,0x18(%rsp)
  0x00007f8ab915cdde: mov    %r13,0x10(%rsp)
  0x00007f8ab915cde3: mov    %r14,0x8(%rsp)
  0x00007f8ab915cde8: mov    %r15,(%rsp)
  0x00007f8ab915cdec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915cdf6: movabs $0x7f8ab915cd96,%rsi
  0x00007f8ab915ce00: mov    %rsp,%rdx
  0x00007f8ab915ce03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915ce07: callq  0x00007f8aceddb9fa
  0x00007f8ab915ce0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915ce0d: mov    %rsp,%r11
  0x00007f8ab915ce10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915ce14: push   %rax
  0x00007f8ab915ce15: mov    %r11,%rax
  0x00007f8ab915ce18: mov    0x50(%rbx),%r11
  0x00007f8ab915ce1c: mov    0x50(%rax),%rsi
  0x00007f8ab915ce20: mov    0x40(%rax),%rdx
  0x00007f8ab915ce24: mov    0x38(%rax),%rcx
  0x00007f8ab915ce28: mov    0x28(%rax),%r8
  0x00007f8ab915ce2c: mov    0x18(%rax),%r9
  0x00007f8ab915ce30: mov    0x8(%rax),%rdi
  0x00007f8ab915ce34: mov    %rbx,0x258(%r15)
  0x00007f8ab915ce3b: mov    %rbx,%rax
  0x00007f8ab915ce3e: jmpq   *%r11
  0x00007f8ab915ce41: mov    0x8(%rsi),%ebx
  0x00007f8ab915ce44: shl    $0x3,%rbx
  0x00007f8ab915ce48: cmp    0x10(%rax),%rbx
  0x00007f8ab915ce4c: mov    0x8(%rax),%rbx
  0x00007f8ab915ce50: je     0x00007f8ab915ce5b
  0x00007f8ab915ce56: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ce5b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ce63: je     0x00007f8ab915cf5e
  0x00007f8ab915ce69: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ce6e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ce76: je     0x00007f8ab915cf5e
  0x00007f8ab915ce7c: mov    %rsp,%r13
  0x00007f8ab915ce7f: mov    (%rsp),%rax
  0x00007f8ab915ce83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915ce87: pushfq 
  0x00007f8ab915ce88: sub    $0x8,%rsp
  0x00007f8ab915ce8c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ce91: sub    $0x80,%rsp
  0x00007f8ab915ce98: mov    %rax,0x78(%rsp)
  0x00007f8ab915ce9d: mov    %rcx,0x70(%rsp)
  0x00007f8ab915cea2: mov    %rdx,0x68(%rsp)
  0x00007f8ab915cea7: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ceac: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ceb1: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ceb6: mov    %rdi,0x40(%rsp)
  0x00007f8ab915cebb: mov    %r8,0x38(%rsp)
  0x00007f8ab915cec0: mov    %r9,0x30(%rsp)
  0x00007f8ab915cec5: mov    %r10,0x28(%rsp)
  0x00007f8ab915ceca: mov    %r11,0x20(%rsp)
  0x00007f8ab915cecf: mov    %r12,0x18(%rsp)
  0x00007f8ab915ced4: mov    %r13,0x10(%rsp)
  0x00007f8ab915ced9: mov    %r14,0x8(%rsp)
  0x00007f8ab915cede: mov    %r15,(%rsp)
  0x00007f8ab915cee2: sub    $0x200,%rsp
  0x00007f8ab915cee9: fxsave64 (%rsp)
  0x00007f8ab915ceee: mov    %rbx,%rdi
  0x00007f8ab915cef1: mov    %rax,%rsi
  0x00007f8ab915cef4: callq  0x00007f8acef8bbca
  0x00007f8ab915cef9: fxrstor64 (%rsp)
  0x00007f8ab915cefe: add    $0x200,%rsp
  0x00007f8ab915cf05: mov    (%rsp),%r15
  0x00007f8ab915cf09: mov    0x8(%rsp),%r14
  0x00007f8ab915cf0e: mov    0x10(%rsp),%r13
  0x00007f8ab915cf13: mov    0x18(%rsp),%r12
  0x00007f8ab915cf18: mov    0x20(%rsp),%r11
  0x00007f8ab915cf1d: mov    0x28(%rsp),%r10
  0x00007f8ab915cf22: mov    0x30(%rsp),%r9
  0x00007f8ab915cf27: mov    0x38(%rsp),%r8
  0x00007f8ab915cf2c: mov    0x40(%rsp),%rdi
  0x00007f8ab915cf31: mov    0x48(%rsp),%rsi
  0x00007f8ab915cf36: mov    0x50(%rsp),%rbp
  0x00007f8ab915cf3b: mov    0x60(%rsp),%rbx
  0x00007f8ab915cf40: mov    0x68(%rsp),%rdx
  0x00007f8ab915cf45: mov    0x70(%rsp),%rcx
  0x00007f8ab915cf4a: mov    0x78(%rsp),%rax
  0x00007f8ab915cf4f: add    $0x80,%rsp
  0x00007f8ab915cf56: add    $0x8,%rsp
  0x00007f8ab915cf5a: popfq  
  0x00007f8ab915cf5b: mov    %r13,%rsp
  0x00007f8ab915cf5e: pop    %rax
  0x00007f8ab915cf5f: mov    %rsp,%r13
  0x00007f8ab915cf62: sub    $0x60,%rsp
  0x00007f8ab915cf66: mov    %rax,(%rsp)
  0x00007f8ab915cf6a: mov    %rsi,0x50(%rsp)
  0x00007f8ab915cf6f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915cf79: mov    %rax,0x48(%rsp)
  0x00007f8ab915cf7e: mov    %rdx,0x40(%rsp)
  0x00007f8ab915cf83: mov    %rcx,0x38(%rsp)
  0x00007f8ab915cf88: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915cf92: mov    %rax,0x30(%rsp)
  0x00007f8ab915cf97: mov    %r8,0x28(%rsp)
  0x00007f8ab915cf9c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915cfa6: mov    %rax,0x20(%rsp)
  0x00007f8ab915cfab: mov    %r9,0x18(%rsp)
  0x00007f8ab915cfb0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915cfba: mov    %rax,0x10(%rsp)
  0x00007f8ab915cfbf: mov    %rdi,0x8(%rsp)
  0x00007f8ab915cfc4: mov    0x40(%rbx),%rcx
  0x00007f8ab915cfc8: jmpq   *%rcx

AHE@0x00007f8ac812e6e0: 0xbebbebe0 i2c: 0x00007f8ab915d0a0 c2i: 0x00007f8ab915d1e6 c2iUV: 0x00007f8ab915d1b9
i2c argument handler #72 for: static (JLjava/lang/Object;JJ)V (649 bytes generated)
c2i argument handler starts at 0x7f8ab915d1e6
  0x00007f8ab915d0a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915d0a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915d0ae: cmp    %r11,%rax
  0x00007f8ab915d0b1: jbe    0x00007f8ab915d0ca
  0x00007f8ab915d0b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915d0c1: cmp    %r11,%rax
  0x00007f8ab915d0c4: jb     0x00007f8ab915d18d
  0x00007f8ab915d0ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915d0d4: cmp    %r11,%rax
  0x00007f8ab915d0d7: jbe    0x00007f8ab915d0f0
  0x00007f8ab915d0dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915d0e7: cmp    %r11,%rax
  0x00007f8ab915d0ea: jb     0x00007f8ab915d18d
  0x00007f8ab915d0f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915d0fa: cmp    %r11,%rax
  0x00007f8ab915d0fd: jbe    0x00007f8ab915d116
  0x00007f8ab915d103: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915d10d: cmp    %r11,%rax
  0x00007f8ab915d110: jb     0x00007f8ab915d18d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915d116: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915d11b: sub    $0x80,%rsp
  0x00007f8ab915d122: mov    %rax,0x78(%rsp)
  0x00007f8ab915d127: mov    %rcx,0x70(%rsp)
  0x00007f8ab915d12c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915d131: mov    %rbx,0x60(%rsp)
  0x00007f8ab915d136: mov    %rbp,0x50(%rsp)
  0x00007f8ab915d13b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915d140: mov    %rdi,0x40(%rsp)
  0x00007f8ab915d145: mov    %r8,0x38(%rsp)
  0x00007f8ab915d14a: mov    %r9,0x30(%rsp)
  0x00007f8ab915d14f: mov    %r10,0x28(%rsp)
  0x00007f8ab915d154: mov    %r11,0x20(%rsp)
  0x00007f8ab915d159: mov    %r12,0x18(%rsp)
  0x00007f8ab915d15e: mov    %r13,0x10(%rsp)
  0x00007f8ab915d163: mov    %r14,0x8(%rsp)
  0x00007f8ab915d168: mov    %r15,(%rsp)
  0x00007f8ab915d16c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915d176: movabs $0x7f8ab915d116,%rsi
  0x00007f8ab915d180: mov    %rsp,%rdx
  0x00007f8ab915d183: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d187: callq  0x00007f8aceddb9fa
  0x00007f8ab915d18c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915d18d: mov    %rsp,%r11
  0x00007f8ab915d190: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d194: push   %rax
  0x00007f8ab915d195: mov    %r11,%rax
  0x00007f8ab915d198: mov    0x50(%rbx),%r11
  0x00007f8ab915d19c: mov    0x30(%rax),%rsi
  0x00007f8ab915d1a0: mov    0x28(%rax),%rdx
  0x00007f8ab915d1a4: mov    0x18(%rax),%rcx
  0x00007f8ab915d1a8: mov    0x8(%rax),%r8
  0x00007f8ab915d1ac: mov    %rbx,0x258(%r15)
  0x00007f8ab915d1b3: mov    %rbx,%rax
  0x00007f8ab915d1b6: jmpq   *%r11
  0x00007f8ab915d1b9: mov    0x8(%rsi),%ebx
  0x00007f8ab915d1bc: shl    $0x3,%rbx
  0x00007f8ab915d1c0: cmp    0x10(%rax),%rbx
  0x00007f8ab915d1c4: mov    0x8(%rax),%rbx
  0x00007f8ab915d1c8: je     0x00007f8ab915d1d3
  0x00007f8ab915d1ce: jmpq   0x00007f8ab9105c40
  0x00007f8ab915d1d3: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915d1db: je     0x00007f8ab915d2d6
  0x00007f8ab915d1e1: jmpq   0x00007f8ab9105c40
  0x00007f8ab915d1e6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915d1ee: je     0x00007f8ab915d2d6
  0x00007f8ab915d1f4: mov    %rsp,%r13
  0x00007f8ab915d1f7: mov    (%rsp),%rax
  0x00007f8ab915d1fb: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d1ff: pushfq 
  0x00007f8ab915d200: sub    $0x8,%rsp
  0x00007f8ab915d204: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915d209: sub    $0x80,%rsp
  0x00007f8ab915d210: mov    %rax,0x78(%rsp)
  0x00007f8ab915d215: mov    %rcx,0x70(%rsp)
  0x00007f8ab915d21a: mov    %rdx,0x68(%rsp)
  0x00007f8ab915d21f: mov    %rbx,0x60(%rsp)
  0x00007f8ab915d224: mov    %rbp,0x50(%rsp)
  0x00007f8ab915d229: mov    %rsi,0x48(%rsp)
  0x00007f8ab915d22e: mov    %rdi,0x40(%rsp)
  0x00007f8ab915d233: mov    %r8,0x38(%rsp)
  0x00007f8ab915d238: mov    %r9,0x30(%rsp)
  0x00007f8ab915d23d: mov    %r10,0x28(%rsp)
  0x00007f8ab915d242: mov    %r11,0x20(%rsp)
  0x00007f8ab915d247: mov    %r12,0x18(%rsp)
  0x00007f8ab915d24c: mov    %r13,0x10(%rsp)
  0x00007f8ab915d251: mov    %r14,0x8(%rsp)
  0x00007f8ab915d256: mov    %r15,(%rsp)
  0x00007f8ab915d25a: sub    $0x200,%rsp
  0x00007f8ab915d261: fxsave64 (%rsp)
  0x00007f8ab915d266: mov    %rbx,%rdi
  0x00007f8ab915d269: mov    %rax,%rsi
  0x00007f8ab915d26c: callq  0x00007f8acef8bbca
  0x00007f8ab915d271: fxrstor64 (%rsp)
  0x00007f8ab915d276: add    $0x200,%rsp
  0x00007f8ab915d27d: mov    (%rsp),%r15
  0x00007f8ab915d281: mov    0x8(%rsp),%r14
  0x00007f8ab915d286: mov    0x10(%rsp),%r13
  0x00007f8ab915d28b: mov    0x18(%rsp),%r12
  0x00007f8ab915d290: mov    0x20(%rsp),%r11
  0x00007f8ab915d295: mov    0x28(%rsp),%r10
  0x00007f8ab915d29a: mov    0x30(%rsp),%r9
  0x00007f8ab915d29f: mov    0x38(%rsp),%r8
  0x00007f8ab915d2a4: mov    0x40(%rsp),%rdi
  0x00007f8ab915d2a9: mov    0x48(%rsp),%rsi
  0x00007f8ab915d2ae: mov    0x50(%rsp),%rbp
  0x00007f8ab915d2b3: mov    0x60(%rsp),%rbx
  0x00007f8ab915d2b8: mov    0x68(%rsp),%rdx
  0x00007f8ab915d2bd: mov    0x70(%rsp),%rcx
  0x00007f8ab915d2c2: mov    0x78(%rsp),%rax
  0x00007f8ab915d2c7: add    $0x80,%rsp
  0x00007f8ab915d2ce: add    $0x8,%rsp
  0x00007f8ab915d2d2: popfq  
  0x00007f8ab915d2d3: mov    %r13,%rsp
  0x00007f8ab915d2d6: pop    %rax
  0x00007f8ab915d2d7: mov    %rsp,%r13
  0x00007f8ab915d2da: sub    $0x40,%rsp
  0x00007f8ab915d2de: mov    %rax,(%rsp)
  0x00007f8ab915d2e2: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d2ec: mov    %rax,0x38(%rsp)
  0x00007f8ab915d2f1: mov    %rsi,0x30(%rsp)
  0x00007f8ab915d2f6: mov    %rdx,0x28(%rsp)
  0x00007f8ab915d2fb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d305: mov    %rax,0x20(%rsp)
  0x00007f8ab915d30a: mov    %rcx,0x18(%rsp)
  0x00007f8ab915d30f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d319: mov    %rax,0x10(%rsp)
  0x00007f8ab915d31e: mov    %r8,0x8(%rsp)
  0x00007f8ab915d323: mov    0x40(%rbx),%rcx
  0x00007f8ab915d327: jmpq   *%rcx

AHE@0x00007f8ac812e728: 0xbbebebe0 i2c: 0x00007f8ab915d3e0 c2i: 0x00007f8ab915d526 c2iUV: 0x00007f8ab915d4f9
i2c argument handler #73 for: static (Ljava/lang/Object;JJJ)V (649 bytes generated)
c2i argument handler starts at 0x7f8ab915d526
  0x00007f8ab915d3e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915d3e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915d3ee: cmp    %r11,%rax
  0x00007f8ab915d3f1: jbe    0x00007f8ab915d40a
  0x00007f8ab915d3f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915d401: cmp    %r11,%rax
  0x00007f8ab915d404: jb     0x00007f8ab915d4cd
  0x00007f8ab915d40a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915d414: cmp    %r11,%rax
  0x00007f8ab915d417: jbe    0x00007f8ab915d430
  0x00007f8ab915d41d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915d427: cmp    %r11,%rax
  0x00007f8ab915d42a: jb     0x00007f8ab915d4cd
  0x00007f8ab915d430: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915d43a: cmp    %r11,%rax
  0x00007f8ab915d43d: jbe    0x00007f8ab915d456
  0x00007f8ab915d443: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915d44d: cmp    %r11,%rax
  0x00007f8ab915d450: jb     0x00007f8ab915d4cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915d456: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915d45b: sub    $0x80,%rsp
  0x00007f8ab915d462: mov    %rax,0x78(%rsp)
  0x00007f8ab915d467: mov    %rcx,0x70(%rsp)
  0x00007f8ab915d46c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915d471: mov    %rbx,0x60(%rsp)
  0x00007f8ab915d476: mov    %rbp,0x50(%rsp)
  0x00007f8ab915d47b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915d480: mov    %rdi,0x40(%rsp)
  0x00007f8ab915d485: mov    %r8,0x38(%rsp)
  0x00007f8ab915d48a: mov    %r9,0x30(%rsp)
  0x00007f8ab915d48f: mov    %r10,0x28(%rsp)
  0x00007f8ab915d494: mov    %r11,0x20(%rsp)
  0x00007f8ab915d499: mov    %r12,0x18(%rsp)
  0x00007f8ab915d49e: mov    %r13,0x10(%rsp)
  0x00007f8ab915d4a3: mov    %r14,0x8(%rsp)
  0x00007f8ab915d4a8: mov    %r15,(%rsp)
  0x00007f8ab915d4ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915d4b6: movabs $0x7f8ab915d456,%rsi
  0x00007f8ab915d4c0: mov    %rsp,%rdx
  0x00007f8ab915d4c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d4c7: callq  0x00007f8aceddb9fa
  0x00007f8ab915d4cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915d4cd: mov    %rsp,%r11
  0x00007f8ab915d4d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d4d4: push   %rax
  0x00007f8ab915d4d5: mov    %r11,%rax
  0x00007f8ab915d4d8: mov    0x50(%rbx),%r11
  0x00007f8ab915d4dc: mov    0x38(%rax),%rsi
  0x00007f8ab915d4e0: mov    0x28(%rax),%rdx
  0x00007f8ab915d4e4: mov    0x18(%rax),%rcx
  0x00007f8ab915d4e8: mov    0x8(%rax),%r8
  0x00007f8ab915d4ec: mov    %rbx,0x258(%r15)
  0x00007f8ab915d4f3: mov    %rbx,%rax
  0x00007f8ab915d4f6: jmpq   *%r11
  0x00007f8ab915d4f9: mov    0x8(%rsi),%ebx
  0x00007f8ab915d4fc: shl    $0x3,%rbx
  0x00007f8ab915d500: cmp    0x10(%rax),%rbx
  0x00007f8ab915d504: mov    0x8(%rax),%rbx
  0x00007f8ab915d508: je     0x00007f8ab915d513
  0x00007f8ab915d50e: jmpq   0x00007f8ab9105c40
  0x00007f8ab915d513: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915d51b: je     0x00007f8ab915d616
  0x00007f8ab915d521: jmpq   0x00007f8ab9105c40
  0x00007f8ab915d526: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915d52e: je     0x00007f8ab915d616
  0x00007f8ab915d534: mov    %rsp,%r13
  0x00007f8ab915d537: mov    (%rsp),%rax
  0x00007f8ab915d53b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d53f: pushfq 
  0x00007f8ab915d540: sub    $0x8,%rsp
  0x00007f8ab915d544: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915d549: sub    $0x80,%rsp
  0x00007f8ab915d550: mov    %rax,0x78(%rsp)
  0x00007f8ab915d555: mov    %rcx,0x70(%rsp)
  0x00007f8ab915d55a: mov    %rdx,0x68(%rsp)
  0x00007f8ab915d55f: mov    %rbx,0x60(%rsp)
  0x00007f8ab915d564: mov    %rbp,0x50(%rsp)
  0x00007f8ab915d569: mov    %rsi,0x48(%rsp)
  0x00007f8ab915d56e: mov    %rdi,0x40(%rsp)
  0x00007f8ab915d573: mov    %r8,0x38(%rsp)
  0x00007f8ab915d578: mov    %r9,0x30(%rsp)
  0x00007f8ab915d57d: mov    %r10,0x28(%rsp)
  0x00007f8ab915d582: mov    %r11,0x20(%rsp)
  0x00007f8ab915d587: mov    %r12,0x18(%rsp)
  0x00007f8ab915d58c: mov    %r13,0x10(%rsp)
  0x00007f8ab915d591: mov    %r14,0x8(%rsp)
  0x00007f8ab915d596: mov    %r15,(%rsp)
  0x00007f8ab915d59a: sub    $0x200,%rsp
  0x00007f8ab915d5a1: fxsave64 (%rsp)
  0x00007f8ab915d5a6: mov    %rbx,%rdi
  0x00007f8ab915d5a9: mov    %rax,%rsi
  0x00007f8ab915d5ac: callq  0x00007f8acef8bbca
  0x00007f8ab915d5b1: fxrstor64 (%rsp)
  0x00007f8ab915d5b6: add    $0x200,%rsp
  0x00007f8ab915d5bd: mov    (%rsp),%r15
  0x00007f8ab915d5c1: mov    0x8(%rsp),%r14
  0x00007f8ab915d5c6: mov    0x10(%rsp),%r13
  0x00007f8ab915d5cb: mov    0x18(%rsp),%r12
  0x00007f8ab915d5d0: mov    0x20(%rsp),%r11
  0x00007f8ab915d5d5: mov    0x28(%rsp),%r10
  0x00007f8ab915d5da: mov    0x30(%rsp),%r9
  0x00007f8ab915d5df: mov    0x38(%rsp),%r8
  0x00007f8ab915d5e4: mov    0x40(%rsp),%rdi
  0x00007f8ab915d5e9: mov    0x48(%rsp),%rsi
  0x00007f8ab915d5ee: mov    0x50(%rsp),%rbp
  0x00007f8ab915d5f3: mov    0x60(%rsp),%rbx
  0x00007f8ab915d5f8: mov    0x68(%rsp),%rdx
  0x00007f8ab915d5fd: mov    0x70(%rsp),%rcx
  0x00007f8ab915d602: mov    0x78(%rsp),%rax
  0x00007f8ab915d607: add    $0x80,%rsp
  0x00007f8ab915d60e: add    $0x8,%rsp
  0x00007f8ab915d612: popfq  
  0x00007f8ab915d613: mov    %r13,%rsp
  0x00007f8ab915d616: pop    %rax
  0x00007f8ab915d617: mov    %rsp,%r13
  0x00007f8ab915d61a: sub    $0x40,%rsp
  0x00007f8ab915d61e: mov    %rax,(%rsp)
  0x00007f8ab915d622: mov    %rsi,0x38(%rsp)
  0x00007f8ab915d627: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d631: mov    %rax,0x30(%rsp)
  0x00007f8ab915d636: mov    %rdx,0x28(%rsp)
  0x00007f8ab915d63b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d645: mov    %rax,0x20(%rsp)
  0x00007f8ab915d64a: mov    %rcx,0x18(%rsp)
  0x00007f8ab915d64f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d659: mov    %rax,0x10(%rsp)
  0x00007f8ab915d65e: mov    %r8,0x8(%rsp)
  0x00007f8ab915d663: mov    0x40(%rbx),%rcx
  0x00007f8ab915d667: jmpq   *%rcx

AHE@0x00007f8ac812e770: 0xbebbebebe0000000 i2c: 0x00007f8ab915d720 c2i: 0x00007f8ab915d86a c2iUV: 0x00007f8ab915d83d
i2c argument handler #74 for: static (JLjava/lang/Object;JJJ)V (673 bytes generated)
c2i argument handler starts at 0x7f8ab915d86a
  0x00007f8ab915d720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915d724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915d72e: cmp    %r11,%rax
  0x00007f8ab915d731: jbe    0x00007f8ab915d74a
  0x00007f8ab915d737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915d741: cmp    %r11,%rax
  0x00007f8ab915d744: jb     0x00007f8ab915d80d
  0x00007f8ab915d74a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915d754: cmp    %r11,%rax
  0x00007f8ab915d757: jbe    0x00007f8ab915d770
  0x00007f8ab915d75d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915d767: cmp    %r11,%rax
  0x00007f8ab915d76a: jb     0x00007f8ab915d80d
  0x00007f8ab915d770: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915d77a: cmp    %r11,%rax
  0x00007f8ab915d77d: jbe    0x00007f8ab915d796
  0x00007f8ab915d783: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915d78d: cmp    %r11,%rax
  0x00007f8ab915d790: jb     0x00007f8ab915d80d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915d796: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915d79b: sub    $0x80,%rsp
  0x00007f8ab915d7a2: mov    %rax,0x78(%rsp)
  0x00007f8ab915d7a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915d7ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab915d7b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915d7b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915d7bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915d7c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab915d7c5: mov    %r8,0x38(%rsp)
  0x00007f8ab915d7ca: mov    %r9,0x30(%rsp)
  0x00007f8ab915d7cf: mov    %r10,0x28(%rsp)
  0x00007f8ab915d7d4: mov    %r11,0x20(%rsp)
  0x00007f8ab915d7d9: mov    %r12,0x18(%rsp)
  0x00007f8ab915d7de: mov    %r13,0x10(%rsp)
  0x00007f8ab915d7e3: mov    %r14,0x8(%rsp)
  0x00007f8ab915d7e8: mov    %r15,(%rsp)
  0x00007f8ab915d7ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915d7f6: movabs $0x7f8ab915d796,%rsi
  0x00007f8ab915d800: mov    %rsp,%rdx
  0x00007f8ab915d803: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d807: callq  0x00007f8aceddb9fa
  0x00007f8ab915d80c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915d80d: mov    %rsp,%r11
  0x00007f8ab915d810: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d814: push   %rax
  0x00007f8ab915d815: mov    %r11,%rax
  0x00007f8ab915d818: mov    0x50(%rbx),%r11
  0x00007f8ab915d81c: mov    0x40(%rax),%rsi
  0x00007f8ab915d820: mov    0x38(%rax),%rdx
  0x00007f8ab915d824: mov    0x28(%rax),%rcx
  0x00007f8ab915d828: mov    0x18(%rax),%r8
  0x00007f8ab915d82c: mov    0x8(%rax),%r9
  0x00007f8ab915d830: mov    %rbx,0x258(%r15)
  0x00007f8ab915d837: mov    %rbx,%rax
  0x00007f8ab915d83a: jmpq   *%r11
  0x00007f8ab915d83d: mov    0x8(%rsi),%ebx
  0x00007f8ab915d840: shl    $0x3,%rbx
  0x00007f8ab915d844: cmp    0x10(%rax),%rbx
  0x00007f8ab915d848: mov    0x8(%rax),%rbx
  0x00007f8ab915d84c: je     0x00007f8ab915d857
  0x00007f8ab915d852: jmpq   0x00007f8ab9105c40
  0x00007f8ab915d857: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915d85f: je     0x00007f8ab915d95a
  0x00007f8ab915d865: jmpq   0x00007f8ab9105c40
  0x00007f8ab915d86a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915d872: je     0x00007f8ab915d95a
  0x00007f8ab915d878: mov    %rsp,%r13
  0x00007f8ab915d87b: mov    (%rsp),%rax
  0x00007f8ab915d87f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915d883: pushfq 
  0x00007f8ab915d884: sub    $0x8,%rsp
  0x00007f8ab915d888: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915d88d: sub    $0x80,%rsp
  0x00007f8ab915d894: mov    %rax,0x78(%rsp)
  0x00007f8ab915d899: mov    %rcx,0x70(%rsp)
  0x00007f8ab915d89e: mov    %rdx,0x68(%rsp)
  0x00007f8ab915d8a3: mov    %rbx,0x60(%rsp)
  0x00007f8ab915d8a8: mov    %rbp,0x50(%rsp)
  0x00007f8ab915d8ad: mov    %rsi,0x48(%rsp)
  0x00007f8ab915d8b2: mov    %rdi,0x40(%rsp)
  0x00007f8ab915d8b7: mov    %r8,0x38(%rsp)
  0x00007f8ab915d8bc: mov    %r9,0x30(%rsp)
  0x00007f8ab915d8c1: mov    %r10,0x28(%rsp)
  0x00007f8ab915d8c6: mov    %r11,0x20(%rsp)
  0x00007f8ab915d8cb: mov    %r12,0x18(%rsp)
  0x00007f8ab915d8d0: mov    %r13,0x10(%rsp)
  0x00007f8ab915d8d5: mov    %r14,0x8(%rsp)
  0x00007f8ab915d8da: mov    %r15,(%rsp)
  0x00007f8ab915d8de: sub    $0x200,%rsp
  0x00007f8ab915d8e5: fxsave64 (%rsp)
  0x00007f8ab915d8ea: mov    %rbx,%rdi
  0x00007f8ab915d8ed: mov    %rax,%rsi
  0x00007f8ab915d8f0: callq  0x00007f8acef8bbca
  0x00007f8ab915d8f5: fxrstor64 (%rsp)
  0x00007f8ab915d8fa: add    $0x200,%rsp
  0x00007f8ab915d901: mov    (%rsp),%r15
  0x00007f8ab915d905: mov    0x8(%rsp),%r14
  0x00007f8ab915d90a: mov    0x10(%rsp),%r13
  0x00007f8ab915d90f: mov    0x18(%rsp),%r12
  0x00007f8ab915d914: mov    0x20(%rsp),%r11
  0x00007f8ab915d919: mov    0x28(%rsp),%r10
  0x00007f8ab915d91e: mov    0x30(%rsp),%r9
  0x00007f8ab915d923: mov    0x38(%rsp),%r8
  0x00007f8ab915d928: mov    0x40(%rsp),%rdi
  0x00007f8ab915d92d: mov    0x48(%rsp),%rsi
  0x00007f8ab915d932: mov    0x50(%rsp),%rbp
  0x00007f8ab915d937: mov    0x60(%rsp),%rbx
  0x00007f8ab915d93c: mov    0x68(%rsp),%rdx
  0x00007f8ab915d941: mov    0x70(%rsp),%rcx
  0x00007f8ab915d946: mov    0x78(%rsp),%rax
  0x00007f8ab915d94b: add    $0x80,%rsp
  0x00007f8ab915d952: add    $0x8,%rsp
  0x00007f8ab915d956: popfq  
  0x00007f8ab915d957: mov    %r13,%rsp
  0x00007f8ab915d95a: pop    %rax
  0x00007f8ab915d95b: mov    %rsp,%r13
  0x00007f8ab915d95e: sub    $0x50,%rsp
  0x00007f8ab915d962: mov    %rax,(%rsp)
  0x00007f8ab915d966: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d970: mov    %rax,0x48(%rsp)
  0x00007f8ab915d975: mov    %rsi,0x40(%rsp)
  0x00007f8ab915d97a: mov    %rdx,0x38(%rsp)
  0x00007f8ab915d97f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d989: mov    %rax,0x30(%rsp)
  0x00007f8ab915d98e: mov    %rcx,0x28(%rsp)
  0x00007f8ab915d993: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d99d: mov    %rax,0x20(%rsp)
  0x00007f8ab915d9a2: mov    %r8,0x18(%rsp)
  0x00007f8ab915d9a7: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915d9b1: mov    %rax,0x10(%rsp)
  0x00007f8ab915d9b6: mov    %r9,0x8(%rsp)
  0x00007f8ab915d9bb: mov    0x40(%rbx),%rcx
  0x00007f8ab915d9bf: jmpq   *%rcx

AHE@0x00007f8ac812e7b8: 0xbbebebebe0000000 i2c: 0x00007f8ab915daa0 c2i: 0x00007f8ab915dbea c2iUV: 0x00007f8ab915dbbd
i2c argument handler #75 for: static (Ljava/lang/Object;JJJJ)V (673 bytes generated)
c2i argument handler starts at 0x7f8ab915dbea
  0x00007f8ab915daa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915daa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915daae: cmp    %r11,%rax
  0x00007f8ab915dab1: jbe    0x00007f8ab915daca
  0x00007f8ab915dab7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915dac1: cmp    %r11,%rax
  0x00007f8ab915dac4: jb     0x00007f8ab915db8d
  0x00007f8ab915daca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915dad4: cmp    %r11,%rax
  0x00007f8ab915dad7: jbe    0x00007f8ab915daf0
  0x00007f8ab915dadd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915dae7: cmp    %r11,%rax
  0x00007f8ab915daea: jb     0x00007f8ab915db8d
  0x00007f8ab915daf0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915dafa: cmp    %r11,%rax
  0x00007f8ab915dafd: jbe    0x00007f8ab915db16
  0x00007f8ab915db03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915db0d: cmp    %r11,%rax
  0x00007f8ab915db10: jb     0x00007f8ab915db8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915db16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915db1b: sub    $0x80,%rsp
  0x00007f8ab915db22: mov    %rax,0x78(%rsp)
  0x00007f8ab915db27: mov    %rcx,0x70(%rsp)
  0x00007f8ab915db2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915db31: mov    %rbx,0x60(%rsp)
  0x00007f8ab915db36: mov    %rbp,0x50(%rsp)
  0x00007f8ab915db3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915db40: mov    %rdi,0x40(%rsp)
  0x00007f8ab915db45: mov    %r8,0x38(%rsp)
  0x00007f8ab915db4a: mov    %r9,0x30(%rsp)
  0x00007f8ab915db4f: mov    %r10,0x28(%rsp)
  0x00007f8ab915db54: mov    %r11,0x20(%rsp)
  0x00007f8ab915db59: mov    %r12,0x18(%rsp)
  0x00007f8ab915db5e: mov    %r13,0x10(%rsp)
  0x00007f8ab915db63: mov    %r14,0x8(%rsp)
  0x00007f8ab915db68: mov    %r15,(%rsp)
  0x00007f8ab915db6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915db76: movabs $0x7f8ab915db16,%rsi
  0x00007f8ab915db80: mov    %rsp,%rdx
  0x00007f8ab915db83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915db87: callq  0x00007f8aceddb9fa
  0x00007f8ab915db8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915db8d: mov    %rsp,%r11
  0x00007f8ab915db90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915db94: push   %rax
  0x00007f8ab915db95: mov    %r11,%rax
  0x00007f8ab915db98: mov    0x50(%rbx),%r11
  0x00007f8ab915db9c: mov    0x48(%rax),%rsi
  0x00007f8ab915dba0: mov    0x38(%rax),%rdx
  0x00007f8ab915dba4: mov    0x28(%rax),%rcx
  0x00007f8ab915dba8: mov    0x18(%rax),%r8
  0x00007f8ab915dbac: mov    0x8(%rax),%r9
  0x00007f8ab915dbb0: mov    %rbx,0x258(%r15)
  0x00007f8ab915dbb7: mov    %rbx,%rax
  0x00007f8ab915dbba: jmpq   *%r11
  0x00007f8ab915dbbd: mov    0x8(%rsi),%ebx
  0x00007f8ab915dbc0: shl    $0x3,%rbx
  0x00007f8ab915dbc4: cmp    0x10(%rax),%rbx
  0x00007f8ab915dbc8: mov    0x8(%rax),%rbx
  0x00007f8ab915dbcc: je     0x00007f8ab915dbd7
  0x00007f8ab915dbd2: jmpq   0x00007f8ab9105c40
  0x00007f8ab915dbd7: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915dbdf: je     0x00007f8ab915dcda
  0x00007f8ab915dbe5: jmpq   0x00007f8ab9105c40
  0x00007f8ab915dbea: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915dbf2: je     0x00007f8ab915dcda
  0x00007f8ab915dbf8: mov    %rsp,%r13
  0x00007f8ab915dbfb: mov    (%rsp),%rax
  0x00007f8ab915dbff: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915dc03: pushfq 
  0x00007f8ab915dc04: sub    $0x8,%rsp
  0x00007f8ab915dc08: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915dc0d: sub    $0x80,%rsp
  0x00007f8ab915dc14: mov    %rax,0x78(%rsp)
  0x00007f8ab915dc19: mov    %rcx,0x70(%rsp)
  0x00007f8ab915dc1e: mov    %rdx,0x68(%rsp)
  0x00007f8ab915dc23: mov    %rbx,0x60(%rsp)
  0x00007f8ab915dc28: mov    %rbp,0x50(%rsp)
  0x00007f8ab915dc2d: mov    %rsi,0x48(%rsp)
  0x00007f8ab915dc32: mov    %rdi,0x40(%rsp)
  0x00007f8ab915dc37: mov    %r8,0x38(%rsp)
  0x00007f8ab915dc3c: mov    %r9,0x30(%rsp)
  0x00007f8ab915dc41: mov    %r10,0x28(%rsp)
  0x00007f8ab915dc46: mov    %r11,0x20(%rsp)
  0x00007f8ab915dc4b: mov    %r12,0x18(%rsp)
  0x00007f8ab915dc50: mov    %r13,0x10(%rsp)
  0x00007f8ab915dc55: mov    %r14,0x8(%rsp)
  0x00007f8ab915dc5a: mov    %r15,(%rsp)
  0x00007f8ab915dc5e: sub    $0x200,%rsp
  0x00007f8ab915dc65: fxsave64 (%rsp)
  0x00007f8ab915dc6a: mov    %rbx,%rdi
  0x00007f8ab915dc6d: mov    %rax,%rsi
  0x00007f8ab915dc70: callq  0x00007f8acef8bbca
  0x00007f8ab915dc75: fxrstor64 (%rsp)
  0x00007f8ab915dc7a: add    $0x200,%rsp
  0x00007f8ab915dc81: mov    (%rsp),%r15
  0x00007f8ab915dc85: mov    0x8(%rsp),%r14
  0x00007f8ab915dc8a: mov    0x10(%rsp),%r13
  0x00007f8ab915dc8f: mov    0x18(%rsp),%r12
  0x00007f8ab915dc94: mov    0x20(%rsp),%r11
  0x00007f8ab915dc99: mov    0x28(%rsp),%r10
  0x00007f8ab915dc9e: mov    0x30(%rsp),%r9
  0x00007f8ab915dca3: mov    0x38(%rsp),%r8
  0x00007f8ab915dca8: mov    0x40(%rsp),%rdi
  0x00007f8ab915dcad: mov    0x48(%rsp),%rsi
  0x00007f8ab915dcb2: mov    0x50(%rsp),%rbp
  0x00007f8ab915dcb7: mov    0x60(%rsp),%rbx
  0x00007f8ab915dcbc: mov    0x68(%rsp),%rdx
  0x00007f8ab915dcc1: mov    0x70(%rsp),%rcx
  0x00007f8ab915dcc6: mov    0x78(%rsp),%rax
  0x00007f8ab915dccb: add    $0x80,%rsp
  0x00007f8ab915dcd2: add    $0x8,%rsp
  0x00007f8ab915dcd6: popfq  
  0x00007f8ab915dcd7: mov    %r13,%rsp
  0x00007f8ab915dcda: pop    %rax
  0x00007f8ab915dcdb: mov    %rsp,%r13
  0x00007f8ab915dcde: sub    $0x50,%rsp
  0x00007f8ab915dce2: mov    %rax,(%rsp)
  0x00007f8ab915dce6: mov    %rsi,0x48(%rsp)
  0x00007f8ab915dceb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915dcf5: mov    %rax,0x40(%rsp)
  0x00007f8ab915dcfa: mov    %rdx,0x38(%rsp)
  0x00007f8ab915dcff: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915dd09: mov    %rax,0x30(%rsp)
  0x00007f8ab915dd0e: mov    %rcx,0x28(%rsp)
  0x00007f8ab915dd13: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915dd1d: mov    %rax,0x20(%rsp)
  0x00007f8ab915dd22: mov    %r8,0x18(%rsp)
  0x00007f8ab915dd27: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915dd31: mov    %rax,0x10(%rsp)
  0x00007f8ab915dd36: mov    %r9,0x8(%rsp)
  0x00007f8ab915dd3b: mov    0x40(%rbx),%rcx
  0x00007f8ab915dd3f: jmpq   *%rcx

AHE@0x00007f8ac812e800: 0xbe7e0000 i2c: 0x00007f8ab915de20 c2i: 0x00007f8ab915df5f c2iUV: 0x00007f8ab915df32
i2c argument handler #76 for: static (JD)V (618 bytes generated)
c2i argument handler starts at 0x7f8ab915df5f
  0x00007f8ab915de20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915de24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915de2e: cmp    %r11,%rax
  0x00007f8ab915de31: jbe    0x00007f8ab915de4a
  0x00007f8ab915de37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915de41: cmp    %r11,%rax
  0x00007f8ab915de44: jb     0x00007f8ab915df0d
  0x00007f8ab915de4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915de54: cmp    %r11,%rax
  0x00007f8ab915de57: jbe    0x00007f8ab915de70
  0x00007f8ab915de5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915de67: cmp    %r11,%rax
  0x00007f8ab915de6a: jb     0x00007f8ab915df0d
  0x00007f8ab915de70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915de7a: cmp    %r11,%rax
  0x00007f8ab915de7d: jbe    0x00007f8ab915de96
  0x00007f8ab915de83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915de8d: cmp    %r11,%rax
  0x00007f8ab915de90: jb     0x00007f8ab915df0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915de96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915de9b: sub    $0x80,%rsp
  0x00007f8ab915dea2: mov    %rax,0x78(%rsp)
  0x00007f8ab915dea7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915deac: mov    %rdx,0x68(%rsp)
  0x00007f8ab915deb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915deb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915debb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915dec0: mov    %rdi,0x40(%rsp)
  0x00007f8ab915dec5: mov    %r8,0x38(%rsp)
  0x00007f8ab915deca: mov    %r9,0x30(%rsp)
  0x00007f8ab915decf: mov    %r10,0x28(%rsp)
  0x00007f8ab915ded4: mov    %r11,0x20(%rsp)
  0x00007f8ab915ded9: mov    %r12,0x18(%rsp)
  0x00007f8ab915dede: mov    %r13,0x10(%rsp)
  0x00007f8ab915dee3: mov    %r14,0x8(%rsp)
  0x00007f8ab915dee8: mov    %r15,(%rsp)
  0x00007f8ab915deec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915def6: movabs $0x7f8ab915de96,%rsi
  0x00007f8ab915df00: mov    %rsp,%rdx
  0x00007f8ab915df03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915df07: callq  0x00007f8aceddb9fa
  0x00007f8ab915df0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915df0d: mov    %rsp,%r11
  0x00007f8ab915df10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915df14: push   %rax
  0x00007f8ab915df15: mov    %r11,%rax
  0x00007f8ab915df18: mov    0x50(%rbx),%r11
  0x00007f8ab915df1c: mov    0x18(%rax),%rsi
  0x00007f8ab915df20: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab915df25: mov    %rbx,0x258(%r15)
  0x00007f8ab915df2c: mov    %rbx,%rax
  0x00007f8ab915df2f: jmpq   *%r11
  0x00007f8ab915df32: mov    0x8(%rsi),%ebx
  0x00007f8ab915df35: shl    $0x3,%rbx
  0x00007f8ab915df39: cmp    0x10(%rax),%rbx
  0x00007f8ab915df3d: mov    0x8(%rax),%rbx
  0x00007f8ab915df41: je     0x00007f8ab915df4c
  0x00007f8ab915df47: jmpq   0x00007f8ab9105c40
  0x00007f8ab915df4c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915df54: je     0x00007f8ab915e04f
  0x00007f8ab915df5a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915df5f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915df67: je     0x00007f8ab915e04f
  0x00007f8ab915df6d: mov    %rsp,%r13
  0x00007f8ab915df70: mov    (%rsp),%rax
  0x00007f8ab915df74: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915df78: pushfq 
  0x00007f8ab915df79: sub    $0x8,%rsp
  0x00007f8ab915df7d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915df82: sub    $0x80,%rsp
  0x00007f8ab915df89: mov    %rax,0x78(%rsp)
  0x00007f8ab915df8e: mov    %rcx,0x70(%rsp)
  0x00007f8ab915df93: mov    %rdx,0x68(%rsp)
  0x00007f8ab915df98: mov    %rbx,0x60(%rsp)
  0x00007f8ab915df9d: mov    %rbp,0x50(%rsp)
  0x00007f8ab915dfa2: mov    %rsi,0x48(%rsp)
  0x00007f8ab915dfa7: mov    %rdi,0x40(%rsp)
  0x00007f8ab915dfac: mov    %r8,0x38(%rsp)
  0x00007f8ab915dfb1: mov    %r9,0x30(%rsp)
  0x00007f8ab915dfb6: mov    %r10,0x28(%rsp)
  0x00007f8ab915dfbb: mov    %r11,0x20(%rsp)
  0x00007f8ab915dfc0: mov    %r12,0x18(%rsp)
  0x00007f8ab915dfc5: mov    %r13,0x10(%rsp)
  0x00007f8ab915dfca: mov    %r14,0x8(%rsp)
  0x00007f8ab915dfcf: mov    %r15,(%rsp)
  0x00007f8ab915dfd3: sub    $0x200,%rsp
  0x00007f8ab915dfda: fxsave64 (%rsp)
  0x00007f8ab915dfdf: mov    %rbx,%rdi
  0x00007f8ab915dfe2: mov    %rax,%rsi
  0x00007f8ab915dfe5: callq  0x00007f8acef8bbca
  0x00007f8ab915dfea: fxrstor64 (%rsp)
  0x00007f8ab915dfef: add    $0x200,%rsp
  0x00007f8ab915dff6: mov    (%rsp),%r15
  0x00007f8ab915dffa: mov    0x8(%rsp),%r14
  0x00007f8ab915dfff: mov    0x10(%rsp),%r13
  0x00007f8ab915e004: mov    0x18(%rsp),%r12
  0x00007f8ab915e009: mov    0x20(%rsp),%r11
  0x00007f8ab915e00e: mov    0x28(%rsp),%r10
  0x00007f8ab915e013: mov    0x30(%rsp),%r9
  0x00007f8ab915e018: mov    0x38(%rsp),%r8
  0x00007f8ab915e01d: mov    0x40(%rsp),%rdi
  0x00007f8ab915e022: mov    0x48(%rsp),%rsi
  0x00007f8ab915e027: mov    0x50(%rsp),%rbp
  0x00007f8ab915e02c: mov    0x60(%rsp),%rbx
  0x00007f8ab915e031: mov    0x68(%rsp),%rdx
  0x00007f8ab915e036: mov    0x70(%rsp),%rcx
  0x00007f8ab915e03b: mov    0x78(%rsp),%rax
  0x00007f8ab915e040: add    $0x80,%rsp
  0x00007f8ab915e047: add    $0x8,%rsp
  0x00007f8ab915e04b: popfq  
  0x00007f8ab915e04c: mov    %r13,%rsp
  0x00007f8ab915e04f: pop    %rax
  0x00007f8ab915e050: mov    %rsp,%r13
  0x00007f8ab915e053: sub    $0x30,%rsp
  0x00007f8ab915e057: mov    %rax,(%rsp)
  0x00007f8ab915e05b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915e065: mov    %rax,0x20(%rsp)
  0x00007f8ab915e06a: mov    %rsi,0x18(%rsp)
  0x00007f8ab915e06f: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab915e079: mov    %rax,0x10(%rsp)
  0x00007f8ab915e07e: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab915e084: mov    0x40(%rbx),%rcx
  0x00007f8ab915e088: jmpq   *%rcx

AHE@0x00007f8ac812e848: 0xbe600000 i2c: 0x00007f8ab915e160 c2i: 0x00007f8ab915e29f c2iUV: 0x00007f8ab915e272
i2c argument handler #77 for: static (JF)V (603 bytes generated)
c2i argument handler starts at 0x7f8ab915e29f
  0x00007f8ab915e160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915e164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915e16e: cmp    %r11,%rax
  0x00007f8ab915e171: jbe    0x00007f8ab915e18a
  0x00007f8ab915e177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915e181: cmp    %r11,%rax
  0x00007f8ab915e184: jb     0x00007f8ab915e24d
  0x00007f8ab915e18a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915e194: cmp    %r11,%rax
  0x00007f8ab915e197: jbe    0x00007f8ab915e1b0
  0x00007f8ab915e19d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915e1a7: cmp    %r11,%rax
  0x00007f8ab915e1aa: jb     0x00007f8ab915e24d
  0x00007f8ab915e1b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915e1ba: cmp    %r11,%rax
  0x00007f8ab915e1bd: jbe    0x00007f8ab915e1d6
  0x00007f8ab915e1c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915e1cd: cmp    %r11,%rax
  0x00007f8ab915e1d0: jb     0x00007f8ab915e24d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915e1d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915e1db: sub    $0x80,%rsp
  0x00007f8ab915e1e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915e1e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915e1ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915e1f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915e1f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915e1fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915e200: mov    %rdi,0x40(%rsp)
  0x00007f8ab915e205: mov    %r8,0x38(%rsp)
  0x00007f8ab915e20a: mov    %r9,0x30(%rsp)
  0x00007f8ab915e20f: mov    %r10,0x28(%rsp)
  0x00007f8ab915e214: mov    %r11,0x20(%rsp)
  0x00007f8ab915e219: mov    %r12,0x18(%rsp)
  0x00007f8ab915e21e: mov    %r13,0x10(%rsp)
  0x00007f8ab915e223: mov    %r14,0x8(%rsp)
  0x00007f8ab915e228: mov    %r15,(%rsp)
  0x00007f8ab915e22c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915e236: movabs $0x7f8ab915e1d6,%rsi
  0x00007f8ab915e240: mov    %rsp,%rdx
  0x00007f8ab915e243: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e247: callq  0x00007f8aceddb9fa
  0x00007f8ab915e24c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915e24d: mov    %rsp,%r11
  0x00007f8ab915e250: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e254: push   %rax
  0x00007f8ab915e255: mov    %r11,%rax
  0x00007f8ab915e258: mov    0x50(%rbx),%r11
  0x00007f8ab915e25c: mov    0x10(%rax),%rsi
  0x00007f8ab915e260: vmovss 0x8(%rax),%xmm0
  0x00007f8ab915e265: mov    %rbx,0x258(%r15)
  0x00007f8ab915e26c: mov    %rbx,%rax
  0x00007f8ab915e26f: jmpq   *%r11
  0x00007f8ab915e272: mov    0x8(%rsi),%ebx
  0x00007f8ab915e275: shl    $0x3,%rbx
  0x00007f8ab915e279: cmp    0x10(%rax),%rbx
  0x00007f8ab915e27d: mov    0x8(%rax),%rbx
  0x00007f8ab915e281: je     0x00007f8ab915e28c
  0x00007f8ab915e287: jmpq   0x00007f8ab9105c40
  0x00007f8ab915e28c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915e294: je     0x00007f8ab915e38f
  0x00007f8ab915e29a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915e29f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915e2a7: je     0x00007f8ab915e38f
  0x00007f8ab915e2ad: mov    %rsp,%r13
  0x00007f8ab915e2b0: mov    (%rsp),%rax
  0x00007f8ab915e2b4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e2b8: pushfq 
  0x00007f8ab915e2b9: sub    $0x8,%rsp
  0x00007f8ab915e2bd: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915e2c2: sub    $0x80,%rsp
  0x00007f8ab915e2c9: mov    %rax,0x78(%rsp)
  0x00007f8ab915e2ce: mov    %rcx,0x70(%rsp)
  0x00007f8ab915e2d3: mov    %rdx,0x68(%rsp)
  0x00007f8ab915e2d8: mov    %rbx,0x60(%rsp)
  0x00007f8ab915e2dd: mov    %rbp,0x50(%rsp)
  0x00007f8ab915e2e2: mov    %rsi,0x48(%rsp)
  0x00007f8ab915e2e7: mov    %rdi,0x40(%rsp)
  0x00007f8ab915e2ec: mov    %r8,0x38(%rsp)
  0x00007f8ab915e2f1: mov    %r9,0x30(%rsp)
  0x00007f8ab915e2f6: mov    %r10,0x28(%rsp)
  0x00007f8ab915e2fb: mov    %r11,0x20(%rsp)
  0x00007f8ab915e300: mov    %r12,0x18(%rsp)
  0x00007f8ab915e305: mov    %r13,0x10(%rsp)
  0x00007f8ab915e30a: mov    %r14,0x8(%rsp)
  0x00007f8ab915e30f: mov    %r15,(%rsp)
  0x00007f8ab915e313: sub    $0x200,%rsp
  0x00007f8ab915e31a: fxsave64 (%rsp)
  0x00007f8ab915e31f: mov    %rbx,%rdi
  0x00007f8ab915e322: mov    %rax,%rsi
  0x00007f8ab915e325: callq  0x00007f8acef8bbca
  0x00007f8ab915e32a: fxrstor64 (%rsp)
  0x00007f8ab915e32f: add    $0x200,%rsp
  0x00007f8ab915e336: mov    (%rsp),%r15
  0x00007f8ab915e33a: mov    0x8(%rsp),%r14
  0x00007f8ab915e33f: mov    0x10(%rsp),%r13
  0x00007f8ab915e344: mov    0x18(%rsp),%r12
  0x00007f8ab915e349: mov    0x20(%rsp),%r11
  0x00007f8ab915e34e: mov    0x28(%rsp),%r10
  0x00007f8ab915e353: mov    0x30(%rsp),%r9
  0x00007f8ab915e358: mov    0x38(%rsp),%r8
  0x00007f8ab915e35d: mov    0x40(%rsp),%rdi
  0x00007f8ab915e362: mov    0x48(%rsp),%rsi
  0x00007f8ab915e367: mov    0x50(%rsp),%rbp
  0x00007f8ab915e36c: mov    0x60(%rsp),%rbx
  0x00007f8ab915e371: mov    0x68(%rsp),%rdx
  0x00007f8ab915e376: mov    0x70(%rsp),%rcx
  0x00007f8ab915e37b: mov    0x78(%rsp),%rax
  0x00007f8ab915e380: add    $0x80,%rsp
  0x00007f8ab915e387: add    $0x8,%rsp
  0x00007f8ab915e38b: popfq  
  0x00007f8ab915e38c: mov    %r13,%rsp
  0x00007f8ab915e38f: pop    %rax
  0x00007f8ab915e390: mov    %rsp,%r13
  0x00007f8ab915e393: sub    $0x20,%rsp
  0x00007f8ab915e397: mov    %rax,(%rsp)
  0x00007f8ab915e39b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915e3a5: mov    %rax,0x18(%rsp)
  0x00007f8ab915e3aa: mov    %rsi,0x10(%rsp)
  0x00007f8ab915e3af: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab915e3b5: mov    0x40(%rbx),%rcx
  0x00007f8ab915e3b9: jmpq   *%rcx

AHE@0x00007f8ac812e890: 0xaaaaaaaa i2c: 0x00007f8ab915e460 c2i: 0x00007f8ab915e5c0 c2iUV: 0x00007f8ab915e593
i2c argument handler #78 for: static (BBBBBBBB)J (654 bytes generated)
c2i argument handler starts at 0x7f8ab915e5c0
  0x00007f8ab915e460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915e464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915e46e: cmp    %r11,%rax
  0x00007f8ab915e471: jbe    0x00007f8ab915e48a
  0x00007f8ab915e477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915e481: cmp    %r11,%rax
  0x00007f8ab915e484: jb     0x00007f8ab915e54d
  0x00007f8ab915e48a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915e494: cmp    %r11,%rax
  0x00007f8ab915e497: jbe    0x00007f8ab915e4b0
  0x00007f8ab915e49d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915e4a7: cmp    %r11,%rax
  0x00007f8ab915e4aa: jb     0x00007f8ab915e54d
  0x00007f8ab915e4b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915e4ba: cmp    %r11,%rax
  0x00007f8ab915e4bd: jbe    0x00007f8ab915e4d6
  0x00007f8ab915e4c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915e4cd: cmp    %r11,%rax
  0x00007f8ab915e4d0: jb     0x00007f8ab915e54d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915e4d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915e4db: sub    $0x80,%rsp
  0x00007f8ab915e4e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915e4e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915e4ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915e4f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915e4f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915e4fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915e500: mov    %rdi,0x40(%rsp)
  0x00007f8ab915e505: mov    %r8,0x38(%rsp)
  0x00007f8ab915e50a: mov    %r9,0x30(%rsp)
  0x00007f8ab915e50f: mov    %r10,0x28(%rsp)
  0x00007f8ab915e514: mov    %r11,0x20(%rsp)
  0x00007f8ab915e519: mov    %r12,0x18(%rsp)
  0x00007f8ab915e51e: mov    %r13,0x10(%rsp)
  0x00007f8ab915e523: mov    %r14,0x8(%rsp)
  0x00007f8ab915e528: mov    %r15,(%rsp)
  0x00007f8ab915e52c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915e536: movabs $0x7f8ab915e4d6,%rsi
  0x00007f8ab915e540: mov    %rsp,%rdx
  0x00007f8ab915e543: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e547: callq  0x00007f8aceddb9fa
  0x00007f8ab915e54c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915e54d: mov    %rsp,%r11
  0x00007f8ab915e550: sub    $0x10,%rsp
  0x00007f8ab915e554: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e558: push   %rax
  0x00007f8ab915e559: mov    %r11,%rax
  0x00007f8ab915e55c: mov    0x50(%rbx),%r11
  0x00007f8ab915e560: mov    0x40(%rax),%esi
  0x00007f8ab915e563: mov    0x38(%rax),%edx
  0x00007f8ab915e566: mov    0x30(%rax),%ecx
  0x00007f8ab915e569: mov    0x28(%rax),%r8d
  0x00007f8ab915e56d: mov    0x20(%rax),%r9d
  0x00007f8ab915e571: mov    0x18(%rax),%edi
  0x00007f8ab915e574: mov    0x10(%rax),%r13d
  0x00007f8ab915e578: mov    %r13,0x8(%rsp)
  0x00007f8ab915e57d: mov    0x8(%rax),%r13d
  0x00007f8ab915e581: mov    %r13,0x10(%rsp)
  0x00007f8ab915e586: mov    %rbx,0x258(%r15)
  0x00007f8ab915e58d: mov    %rbx,%rax
  0x00007f8ab915e590: jmpq   *%r11
  0x00007f8ab915e593: mov    0x8(%rsi),%ebx
  0x00007f8ab915e596: shl    $0x3,%rbx
  0x00007f8ab915e59a: cmp    0x10(%rax),%rbx
  0x00007f8ab915e59e: mov    0x8(%rax),%rbx
  0x00007f8ab915e5a2: je     0x00007f8ab915e5ad
  0x00007f8ab915e5a8: jmpq   0x00007f8ab9105c40
  0x00007f8ab915e5ad: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915e5b5: je     0x00007f8ab915e6b0
  0x00007f8ab915e5bb: jmpq   0x00007f8ab9105c40
  0x00007f8ab915e5c0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915e5c8: je     0x00007f8ab915e6b0
  0x00007f8ab915e5ce: mov    %rsp,%r13
  0x00007f8ab915e5d1: mov    (%rsp),%rax
  0x00007f8ab915e5d5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e5d9: pushfq 
  0x00007f8ab915e5da: sub    $0x8,%rsp
  0x00007f8ab915e5de: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915e5e3: sub    $0x80,%rsp
  0x00007f8ab915e5ea: mov    %rax,0x78(%rsp)
  0x00007f8ab915e5ef: mov    %rcx,0x70(%rsp)
  0x00007f8ab915e5f4: mov    %rdx,0x68(%rsp)
  0x00007f8ab915e5f9: mov    %rbx,0x60(%rsp)
  0x00007f8ab915e5fe: mov    %rbp,0x50(%rsp)
  0x00007f8ab915e603: mov    %rsi,0x48(%rsp)
  0x00007f8ab915e608: mov    %rdi,0x40(%rsp)
  0x00007f8ab915e60d: mov    %r8,0x38(%rsp)
  0x00007f8ab915e612: mov    %r9,0x30(%rsp)
  0x00007f8ab915e617: mov    %r10,0x28(%rsp)
  0x00007f8ab915e61c: mov    %r11,0x20(%rsp)
  0x00007f8ab915e621: mov    %r12,0x18(%rsp)
  0x00007f8ab915e626: mov    %r13,0x10(%rsp)
  0x00007f8ab915e62b: mov    %r14,0x8(%rsp)
  0x00007f8ab915e630: mov    %r15,(%rsp)
  0x00007f8ab915e634: sub    $0x200,%rsp
  0x00007f8ab915e63b: fxsave64 (%rsp)
  0x00007f8ab915e640: mov    %rbx,%rdi
  0x00007f8ab915e643: mov    %rax,%rsi
  0x00007f8ab915e646: callq  0x00007f8acef8bbca
  0x00007f8ab915e64b: fxrstor64 (%rsp)
  0x00007f8ab915e650: add    $0x200,%rsp
  0x00007f8ab915e657: mov    (%rsp),%r15
  0x00007f8ab915e65b: mov    0x8(%rsp),%r14
  0x00007f8ab915e660: mov    0x10(%rsp),%r13
  0x00007f8ab915e665: mov    0x18(%rsp),%r12
  0x00007f8ab915e66a: mov    0x20(%rsp),%r11
  0x00007f8ab915e66f: mov    0x28(%rsp),%r10
  0x00007f8ab915e674: mov    0x30(%rsp),%r9
  0x00007f8ab915e679: mov    0x38(%rsp),%r8
  0x00007f8ab915e67e: mov    0x40(%rsp),%rdi
  0x00007f8ab915e683: mov    0x48(%rsp),%rsi
  0x00007f8ab915e688: mov    0x50(%rsp),%rbp
  0x00007f8ab915e68d: mov    0x60(%rsp),%rbx
  0x00007f8ab915e692: mov    0x68(%rsp),%rdx
  0x00007f8ab915e697: mov    0x70(%rsp),%rcx
  0x00007f8ab915e69c: mov    0x78(%rsp),%rax
  0x00007f8ab915e6a1: add    $0x80,%rsp
  0x00007f8ab915e6a8: add    $0x8,%rsp
  0x00007f8ab915e6ac: popfq  
  0x00007f8ab915e6ad: mov    %r13,%rsp
  0x00007f8ab915e6b0: pop    %rax
  0x00007f8ab915e6b1: mov    %rsp,%r13
  0x00007f8ab915e6b4: sub    $0x50,%rsp
  0x00007f8ab915e6b8: mov    %rax,(%rsp)
  0x00007f8ab915e6bc: mov    %esi,0x40(%rsp)
  0x00007f8ab915e6c0: mov    %edx,0x38(%rsp)
  0x00007f8ab915e6c4: mov    %ecx,0x30(%rsp)
  0x00007f8ab915e6c8: mov    %r8d,0x28(%rsp)
  0x00007f8ab915e6cd: mov    %r9d,0x20(%rsp)
  0x00007f8ab915e6d2: mov    %edi,0x18(%rsp)
  0x00007f8ab915e6d6: mov    0x50(%rsp),%eax
  0x00007f8ab915e6da: mov    %rax,0x10(%rsp)
  0x00007f8ab915e6df: mov    0x58(%rsp),%eax
  0x00007f8ab915e6e3: mov    %rax,0x8(%rsp)
  0x00007f8ab915e6e8: mov    0x40(%rbx),%rcx
  0x00007f8ab915e6ec: jmpq   *%rcx

AHE@0x00007f8ac812e8d8: 0xaaaa0000 i2c: 0x00007f8ab915e7a0 c2i: 0x00007f8ab915e8e3 c2iUV: 0x00007f8ab915e8b6
i2c argument handler #79 for: static (BBBB)I (598 bytes generated)
c2i argument handler starts at 0x7f8ab915e8e3
  0x00007f8ab915e7a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915e7a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915e7ae: cmp    %r11,%rax
  0x00007f8ab915e7b1: jbe    0x00007f8ab915e7ca
  0x00007f8ab915e7b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915e7c1: cmp    %r11,%rax
  0x00007f8ab915e7c4: jb     0x00007f8ab915e88d
  0x00007f8ab915e7ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915e7d4: cmp    %r11,%rax
  0x00007f8ab915e7d7: jbe    0x00007f8ab915e7f0
  0x00007f8ab915e7dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915e7e7: cmp    %r11,%rax
  0x00007f8ab915e7ea: jb     0x00007f8ab915e88d
  0x00007f8ab915e7f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915e7fa: cmp    %r11,%rax
  0x00007f8ab915e7fd: jbe    0x00007f8ab915e816
  0x00007f8ab915e803: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915e80d: cmp    %r11,%rax
  0x00007f8ab915e810: jb     0x00007f8ab915e88d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915e816: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915e81b: sub    $0x80,%rsp
  0x00007f8ab915e822: mov    %rax,0x78(%rsp)
  0x00007f8ab915e827: mov    %rcx,0x70(%rsp)
  0x00007f8ab915e82c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915e831: mov    %rbx,0x60(%rsp)
  0x00007f8ab915e836: mov    %rbp,0x50(%rsp)
  0x00007f8ab915e83b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915e840: mov    %rdi,0x40(%rsp)
  0x00007f8ab915e845: mov    %r8,0x38(%rsp)
  0x00007f8ab915e84a: mov    %r9,0x30(%rsp)
  0x00007f8ab915e84f: mov    %r10,0x28(%rsp)
  0x00007f8ab915e854: mov    %r11,0x20(%rsp)
  0x00007f8ab915e859: mov    %r12,0x18(%rsp)
  0x00007f8ab915e85e: mov    %r13,0x10(%rsp)
  0x00007f8ab915e863: mov    %r14,0x8(%rsp)
  0x00007f8ab915e868: mov    %r15,(%rsp)
  0x00007f8ab915e86c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915e876: movabs $0x7f8ab915e816,%rsi
  0x00007f8ab915e880: mov    %rsp,%rdx
  0x00007f8ab915e883: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e887: callq  0x00007f8aceddb9fa
  0x00007f8ab915e88c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915e88d: mov    %rsp,%r11
  0x00007f8ab915e890: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e894: push   %rax
  0x00007f8ab915e895: mov    %r11,%rax
  0x00007f8ab915e898: mov    0x50(%rbx),%r11
  0x00007f8ab915e89c: mov    0x20(%rax),%esi
  0x00007f8ab915e89f: mov    0x18(%rax),%edx
  0x00007f8ab915e8a2: mov    0x10(%rax),%ecx
  0x00007f8ab915e8a5: mov    0x8(%rax),%r8d
  0x00007f8ab915e8a9: mov    %rbx,0x258(%r15)
  0x00007f8ab915e8b0: mov    %rbx,%rax
  0x00007f8ab915e8b3: jmpq   *%r11
  0x00007f8ab915e8b6: mov    0x8(%rsi),%ebx
  0x00007f8ab915e8b9: shl    $0x3,%rbx
  0x00007f8ab915e8bd: cmp    0x10(%rax),%rbx
  0x00007f8ab915e8c1: mov    0x8(%rax),%rbx
  0x00007f8ab915e8c5: je     0x00007f8ab915e8d0
  0x00007f8ab915e8cb: jmpq   0x00007f8ab9105c40
  0x00007f8ab915e8d0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915e8d8: je     0x00007f8ab915e9d3
  0x00007f8ab915e8de: jmpq   0x00007f8ab9105c40
  0x00007f8ab915e8e3: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915e8eb: je     0x00007f8ab915e9d3
  0x00007f8ab915e8f1: mov    %rsp,%r13
  0x00007f8ab915e8f4: mov    (%rsp),%rax
  0x00007f8ab915e8f8: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915e8fc: pushfq 
  0x00007f8ab915e8fd: sub    $0x8,%rsp
  0x00007f8ab915e901: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915e906: sub    $0x80,%rsp
  0x00007f8ab915e90d: mov    %rax,0x78(%rsp)
  0x00007f8ab915e912: mov    %rcx,0x70(%rsp)
  0x00007f8ab915e917: mov    %rdx,0x68(%rsp)
  0x00007f8ab915e91c: mov    %rbx,0x60(%rsp)
  0x00007f8ab915e921: mov    %rbp,0x50(%rsp)
  0x00007f8ab915e926: mov    %rsi,0x48(%rsp)
  0x00007f8ab915e92b: mov    %rdi,0x40(%rsp)
  0x00007f8ab915e930: mov    %r8,0x38(%rsp)
  0x00007f8ab915e935: mov    %r9,0x30(%rsp)
  0x00007f8ab915e93a: mov    %r10,0x28(%rsp)
  0x00007f8ab915e93f: mov    %r11,0x20(%rsp)
  0x00007f8ab915e944: mov    %r12,0x18(%rsp)
  0x00007f8ab915e949: mov    %r13,0x10(%rsp)
  0x00007f8ab915e94e: mov    %r14,0x8(%rsp)
  0x00007f8ab915e953: mov    %r15,(%rsp)
  0x00007f8ab915e957: sub    $0x200,%rsp
  0x00007f8ab915e95e: fxsave64 (%rsp)
  0x00007f8ab915e963: mov    %rbx,%rdi
  0x00007f8ab915e966: mov    %rax,%rsi
  0x00007f8ab915e969: callq  0x00007f8acef8bbca
  0x00007f8ab915e96e: fxrstor64 (%rsp)
  0x00007f8ab915e973: add    $0x200,%rsp
  0x00007f8ab915e97a: mov    (%rsp),%r15
  0x00007f8ab915e97e: mov    0x8(%rsp),%r14
  0x00007f8ab915e983: mov    0x10(%rsp),%r13
  0x00007f8ab915e988: mov    0x18(%rsp),%r12
  0x00007f8ab915e98d: mov    0x20(%rsp),%r11
  0x00007f8ab915e992: mov    0x28(%rsp),%r10
  0x00007f8ab915e997: mov    0x30(%rsp),%r9
  0x00007f8ab915e99c: mov    0x38(%rsp),%r8
  0x00007f8ab915e9a1: mov    0x40(%rsp),%rdi
  0x00007f8ab915e9a6: mov    0x48(%rsp),%rsi
  0x00007f8ab915e9ab: mov    0x50(%rsp),%rbp
  0x00007f8ab915e9b0: mov    0x60(%rsp),%rbx
  0x00007f8ab915e9b5: mov    0x68(%rsp),%rdx
  0x00007f8ab915e9ba: mov    0x70(%rsp),%rcx
  0x00007f8ab915e9bf: mov    0x78(%rsp),%rax
  0x00007f8ab915e9c4: add    $0x80,%rsp
  0x00007f8ab915e9cb: add    $0x8,%rsp
  0x00007f8ab915e9cf: popfq  
  0x00007f8ab915e9d0: mov    %r13,%rsp
  0x00007f8ab915e9d3: pop    %rax
  0x00007f8ab915e9d4: mov    %rsp,%r13
  0x00007f8ab915e9d7: sub    $0x30,%rsp
  0x00007f8ab915e9db: mov    %rax,(%rsp)
  0x00007f8ab915e9df: mov    %esi,0x20(%rsp)
  0x00007f8ab915e9e3: mov    %edx,0x18(%rsp)
  0x00007f8ab915e9e7: mov    %ecx,0x10(%rsp)
  0x00007f8ab915e9eb: mov    %r8d,0x8(%rsp)
  0x00007f8ab915e9f0: mov    0x40(%rbx),%rcx
  0x00007f8ab915e9f4: jmpq   *%rcx

AHE@0x00007f8ac812e920: 0xbe7ea000 i2c: 0x00007f8ab915eaa0 c2i: 0x00007f8ab915ebe2 c2iUV: 0x00007f8ab915ebb5
i2c argument handler #80 for: static (JDZ)V (625 bytes generated)
c2i argument handler starts at 0x7f8ab915ebe2
  0x00007f8ab915eaa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915eaa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915eaae: cmp    %r11,%rax
  0x00007f8ab915eab1: jbe    0x00007f8ab915eaca
  0x00007f8ab915eab7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915eac1: cmp    %r11,%rax
  0x00007f8ab915eac4: jb     0x00007f8ab915eb8d
  0x00007f8ab915eaca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915ead4: cmp    %r11,%rax
  0x00007f8ab915ead7: jbe    0x00007f8ab915eaf0
  0x00007f8ab915eadd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915eae7: cmp    %r11,%rax
  0x00007f8ab915eaea: jb     0x00007f8ab915eb8d
  0x00007f8ab915eaf0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915eafa: cmp    %r11,%rax
  0x00007f8ab915eafd: jbe    0x00007f8ab915eb16
  0x00007f8ab915eb03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915eb0d: cmp    %r11,%rax
  0x00007f8ab915eb10: jb     0x00007f8ab915eb8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915eb16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915eb1b: sub    $0x80,%rsp
  0x00007f8ab915eb22: mov    %rax,0x78(%rsp)
  0x00007f8ab915eb27: mov    %rcx,0x70(%rsp)
  0x00007f8ab915eb2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915eb31: mov    %rbx,0x60(%rsp)
  0x00007f8ab915eb36: mov    %rbp,0x50(%rsp)
  0x00007f8ab915eb3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915eb40: mov    %rdi,0x40(%rsp)
  0x00007f8ab915eb45: mov    %r8,0x38(%rsp)
  0x00007f8ab915eb4a: mov    %r9,0x30(%rsp)
  0x00007f8ab915eb4f: mov    %r10,0x28(%rsp)
  0x00007f8ab915eb54: mov    %r11,0x20(%rsp)
  0x00007f8ab915eb59: mov    %r12,0x18(%rsp)
  0x00007f8ab915eb5e: mov    %r13,0x10(%rsp)
  0x00007f8ab915eb63: mov    %r14,0x8(%rsp)
  0x00007f8ab915eb68: mov    %r15,(%rsp)
  0x00007f8ab915eb6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915eb76: movabs $0x7f8ab915eb16,%rsi
  0x00007f8ab915eb80: mov    %rsp,%rdx
  0x00007f8ab915eb83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915eb87: callq  0x00007f8aceddb9fa
  0x00007f8ab915eb8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915eb8d: mov    %rsp,%r11
  0x00007f8ab915eb90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915eb94: push   %rax
  0x00007f8ab915eb95: mov    %r11,%rax
  0x00007f8ab915eb98: mov    0x50(%rbx),%r11
  0x00007f8ab915eb9c: mov    0x20(%rax),%rsi
  0x00007f8ab915eba0: vmovsd 0x10(%rax),%xmm0
  0x00007f8ab915eba5: mov    0x8(%rax),%edx
  0x00007f8ab915eba8: mov    %rbx,0x258(%r15)
  0x00007f8ab915ebaf: mov    %rbx,%rax
  0x00007f8ab915ebb2: jmpq   *%r11
  0x00007f8ab915ebb5: mov    0x8(%rsi),%ebx
  0x00007f8ab915ebb8: shl    $0x3,%rbx
  0x00007f8ab915ebbc: cmp    0x10(%rax),%rbx
  0x00007f8ab915ebc0: mov    0x8(%rax),%rbx
  0x00007f8ab915ebc4: je     0x00007f8ab915ebcf
  0x00007f8ab915ebca: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ebcf: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ebd7: je     0x00007f8ab915ecd2
  0x00007f8ab915ebdd: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ebe2: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ebea: je     0x00007f8ab915ecd2
  0x00007f8ab915ebf0: mov    %rsp,%r13
  0x00007f8ab915ebf3: mov    (%rsp),%rax
  0x00007f8ab915ebf7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915ebfb: pushfq 
  0x00007f8ab915ebfc: sub    $0x8,%rsp
  0x00007f8ab915ec00: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ec05: sub    $0x80,%rsp
  0x00007f8ab915ec0c: mov    %rax,0x78(%rsp)
  0x00007f8ab915ec11: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ec16: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ec1b: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ec20: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ec25: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ec2a: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ec2f: mov    %r8,0x38(%rsp)
  0x00007f8ab915ec34: mov    %r9,0x30(%rsp)
  0x00007f8ab915ec39: mov    %r10,0x28(%rsp)
  0x00007f8ab915ec3e: mov    %r11,0x20(%rsp)
  0x00007f8ab915ec43: mov    %r12,0x18(%rsp)
  0x00007f8ab915ec48: mov    %r13,0x10(%rsp)
  0x00007f8ab915ec4d: mov    %r14,0x8(%rsp)
  0x00007f8ab915ec52: mov    %r15,(%rsp)
  0x00007f8ab915ec56: sub    $0x200,%rsp
  0x00007f8ab915ec5d: fxsave64 (%rsp)
  0x00007f8ab915ec62: mov    %rbx,%rdi
  0x00007f8ab915ec65: mov    %rax,%rsi
  0x00007f8ab915ec68: callq  0x00007f8acef8bbca
  0x00007f8ab915ec6d: fxrstor64 (%rsp)
  0x00007f8ab915ec72: add    $0x200,%rsp
  0x00007f8ab915ec79: mov    (%rsp),%r15
  0x00007f8ab915ec7d: mov    0x8(%rsp),%r14
  0x00007f8ab915ec82: mov    0x10(%rsp),%r13
  0x00007f8ab915ec87: mov    0x18(%rsp),%r12
  0x00007f8ab915ec8c: mov    0x20(%rsp),%r11
  0x00007f8ab915ec91: mov    0x28(%rsp),%r10
  0x00007f8ab915ec96: mov    0x30(%rsp),%r9
  0x00007f8ab915ec9b: mov    0x38(%rsp),%r8
  0x00007f8ab915eca0: mov    0x40(%rsp),%rdi
  0x00007f8ab915eca5: mov    0x48(%rsp),%rsi
  0x00007f8ab915ecaa: mov    0x50(%rsp),%rbp
  0x00007f8ab915ecaf: mov    0x60(%rsp),%rbx
  0x00007f8ab915ecb4: mov    0x68(%rsp),%rdx
  0x00007f8ab915ecb9: mov    0x70(%rsp),%rcx
  0x00007f8ab915ecbe: mov    0x78(%rsp),%rax
  0x00007f8ab915ecc3: add    $0x80,%rsp
  0x00007f8ab915ecca: add    $0x8,%rsp
  0x00007f8ab915ecce: popfq  
  0x00007f8ab915eccf: mov    %r13,%rsp
  0x00007f8ab915ecd2: pop    %rax
  0x00007f8ab915ecd3: mov    %rsp,%r13
  0x00007f8ab915ecd6: sub    $0x30,%rsp
  0x00007f8ab915ecda: mov    %rax,(%rsp)
  0x00007f8ab915ecde: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915ece8: mov    %rax,0x28(%rsp)
  0x00007f8ab915eced: mov    %rsi,0x20(%rsp)
  0x00007f8ab915ecf2: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab915ecfc: mov    %rax,0x18(%rsp)
  0x00007f8ab915ed01: vmovsd %xmm0,0x10(%rsp)
  0x00007f8ab915ed07: mov    %edx,0x8(%rsp)
  0x00007f8ab915ed0b: mov    0x40(%rbx),%rcx
  0x00007f8ab915ed0f: jmpq   *%rcx

AHE@0x00007f8ac812e968: 0xba7ea000 i2c: 0x00007f8ab915ede0 c2i: 0x00007f8ab915ef25 c2iUV: 0x00007f8ab915eef8
i2c argument handler #81 for: static (Ljava/nio/ByteBuffer;IDZ)V (617 bytes generated)
c2i argument handler starts at 0x7f8ab915ef25
  0x00007f8ab915ede0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915ede4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915edee: cmp    %r11,%rax
  0x00007f8ab915edf1: jbe    0x00007f8ab915ee0a
  0x00007f8ab915edf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915ee01: cmp    %r11,%rax
  0x00007f8ab915ee04: jb     0x00007f8ab915eecd
  0x00007f8ab915ee0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915ee14: cmp    %r11,%rax
  0x00007f8ab915ee17: jbe    0x00007f8ab915ee30
  0x00007f8ab915ee1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915ee27: cmp    %r11,%rax
  0x00007f8ab915ee2a: jb     0x00007f8ab915eecd
  0x00007f8ab915ee30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915ee3a: cmp    %r11,%rax
  0x00007f8ab915ee3d: jbe    0x00007f8ab915ee56
  0x00007f8ab915ee43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915ee4d: cmp    %r11,%rax
  0x00007f8ab915ee50: jb     0x00007f8ab915eecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915ee56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ee5b: sub    $0x80,%rsp
  0x00007f8ab915ee62: mov    %rax,0x78(%rsp)
  0x00007f8ab915ee67: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ee6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ee71: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ee76: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ee7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ee80: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ee85: mov    %r8,0x38(%rsp)
  0x00007f8ab915ee8a: mov    %r9,0x30(%rsp)
  0x00007f8ab915ee8f: mov    %r10,0x28(%rsp)
  0x00007f8ab915ee94: mov    %r11,0x20(%rsp)
  0x00007f8ab915ee99: mov    %r12,0x18(%rsp)
  0x00007f8ab915ee9e: mov    %r13,0x10(%rsp)
  0x00007f8ab915eea3: mov    %r14,0x8(%rsp)
  0x00007f8ab915eea8: mov    %r15,(%rsp)
  0x00007f8ab915eeac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915eeb6: movabs $0x7f8ab915ee56,%rsi
  0x00007f8ab915eec0: mov    %rsp,%rdx
  0x00007f8ab915eec3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915eec7: callq  0x00007f8aceddb9fa
  0x00007f8ab915eecc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915eecd: mov    %rsp,%r11
  0x00007f8ab915eed0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915eed4: push   %rax
  0x00007f8ab915eed5: mov    %r11,%rax
  0x00007f8ab915eed8: mov    0x50(%rbx),%r11
  0x00007f8ab915eedc: mov    0x28(%rax),%rsi
  0x00007f8ab915eee0: mov    0x20(%rax),%edx
  0x00007f8ab915eee3: vmovsd 0x10(%rax),%xmm0
  0x00007f8ab915eee8: mov    0x8(%rax),%ecx
  0x00007f8ab915eeeb: mov    %rbx,0x258(%r15)
  0x00007f8ab915eef2: mov    %rbx,%rax
  0x00007f8ab915eef5: jmpq   *%r11
  0x00007f8ab915eef8: mov    0x8(%rsi),%ebx
  0x00007f8ab915eefb: shl    $0x3,%rbx
  0x00007f8ab915eeff: cmp    0x10(%rax),%rbx
  0x00007f8ab915ef03: mov    0x8(%rax),%rbx
  0x00007f8ab915ef07: je     0x00007f8ab915ef12
  0x00007f8ab915ef0d: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ef12: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ef1a: je     0x00007f8ab915f015
  0x00007f8ab915ef20: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ef25: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ef2d: je     0x00007f8ab915f015
  0x00007f8ab915ef33: mov    %rsp,%r13
  0x00007f8ab915ef36: mov    (%rsp),%rax
  0x00007f8ab915ef3a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915ef3e: pushfq 
  0x00007f8ab915ef3f: sub    $0x8,%rsp
  0x00007f8ab915ef43: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ef48: sub    $0x80,%rsp
  0x00007f8ab915ef4f: mov    %rax,0x78(%rsp)
  0x00007f8ab915ef54: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ef59: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ef5e: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ef63: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ef68: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ef6d: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ef72: mov    %r8,0x38(%rsp)
  0x00007f8ab915ef77: mov    %r9,0x30(%rsp)
  0x00007f8ab915ef7c: mov    %r10,0x28(%rsp)
  0x00007f8ab915ef81: mov    %r11,0x20(%rsp)
  0x00007f8ab915ef86: mov    %r12,0x18(%rsp)
  0x00007f8ab915ef8b: mov    %r13,0x10(%rsp)
  0x00007f8ab915ef90: mov    %r14,0x8(%rsp)
  0x00007f8ab915ef95: mov    %r15,(%rsp)
  0x00007f8ab915ef99: sub    $0x200,%rsp
  0x00007f8ab915efa0: fxsave64 (%rsp)
  0x00007f8ab915efa5: mov    %rbx,%rdi
  0x00007f8ab915efa8: mov    %rax,%rsi
  0x00007f8ab915efab: callq  0x00007f8acef8bbca
  0x00007f8ab915efb0: fxrstor64 (%rsp)
  0x00007f8ab915efb5: add    $0x200,%rsp
  0x00007f8ab915efbc: mov    (%rsp),%r15
  0x00007f8ab915efc0: mov    0x8(%rsp),%r14
  0x00007f8ab915efc5: mov    0x10(%rsp),%r13
  0x00007f8ab915efca: mov    0x18(%rsp),%r12
  0x00007f8ab915efcf: mov    0x20(%rsp),%r11
  0x00007f8ab915efd4: mov    0x28(%rsp),%r10
  0x00007f8ab915efd9: mov    0x30(%rsp),%r9
  0x00007f8ab915efde: mov    0x38(%rsp),%r8
  0x00007f8ab915efe3: mov    0x40(%rsp),%rdi
  0x00007f8ab915efe8: mov    0x48(%rsp),%rsi
  0x00007f8ab915efed: mov    0x50(%rsp),%rbp
  0x00007f8ab915eff2: mov    0x60(%rsp),%rbx
  0x00007f8ab915eff7: mov    0x68(%rsp),%rdx
  0x00007f8ab915effc: mov    0x70(%rsp),%rcx
  0x00007f8ab915f001: mov    0x78(%rsp),%rax
  0x00007f8ab915f006: add    $0x80,%rsp
  0x00007f8ab915f00d: add    $0x8,%rsp
  0x00007f8ab915f011: popfq  
  0x00007f8ab915f012: mov    %r13,%rsp
  0x00007f8ab915f015: pop    %rax
  0x00007f8ab915f016: mov    %rsp,%r13
  0x00007f8ab915f019: sub    $0x30,%rsp
  0x00007f8ab915f01d: mov    %rax,(%rsp)
  0x00007f8ab915f021: mov    %rsi,0x28(%rsp)
  0x00007f8ab915f026: mov    %edx,0x20(%rsp)
  0x00007f8ab915f02a: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab915f034: mov    %rax,0x18(%rsp)
  0x00007f8ab915f039: vmovsd %xmm0,0x10(%rsp)
  0x00007f8ab915f03f: mov    %ecx,0x8(%rsp)
  0x00007f8ab915f043: mov    0x40(%rbx),%rcx
  0x00007f8ab915f047: jmpq   *%rcx

AHE@0x00007f8ac812e9b0: 0xbe6a0000 i2c: 0x00007f8ab915f120 c2i: 0x00007f8ab915f262 c2iUV: 0x00007f8ab915f235
i2c argument handler #82 for: static (JFZ)V (610 bytes generated)
c2i argument handler starts at 0x7f8ab915f262
  0x00007f8ab915f120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915f124: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915f12e: cmp    %r11,%rax
  0x00007f8ab915f131: jbe    0x00007f8ab915f14a
  0x00007f8ab915f137: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915f141: cmp    %r11,%rax
  0x00007f8ab915f144: jb     0x00007f8ab915f20d
  0x00007f8ab915f14a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915f154: cmp    %r11,%rax
  0x00007f8ab915f157: jbe    0x00007f8ab915f170
  0x00007f8ab915f15d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915f167: cmp    %r11,%rax
  0x00007f8ab915f16a: jb     0x00007f8ab915f20d
  0x00007f8ab915f170: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915f17a: cmp    %r11,%rax
  0x00007f8ab915f17d: jbe    0x00007f8ab915f196
  0x00007f8ab915f183: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915f18d: cmp    %r11,%rax
  0x00007f8ab915f190: jb     0x00007f8ab915f20d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915f196: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915f19b: sub    $0x80,%rsp
  0x00007f8ab915f1a2: mov    %rax,0x78(%rsp)
  0x00007f8ab915f1a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915f1ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab915f1b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915f1b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915f1bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915f1c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab915f1c5: mov    %r8,0x38(%rsp)
  0x00007f8ab915f1ca: mov    %r9,0x30(%rsp)
  0x00007f8ab915f1cf: mov    %r10,0x28(%rsp)
  0x00007f8ab915f1d4: mov    %r11,0x20(%rsp)
  0x00007f8ab915f1d9: mov    %r12,0x18(%rsp)
  0x00007f8ab915f1de: mov    %r13,0x10(%rsp)
  0x00007f8ab915f1e3: mov    %r14,0x8(%rsp)
  0x00007f8ab915f1e8: mov    %r15,(%rsp)
  0x00007f8ab915f1ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915f1f6: movabs $0x7f8ab915f196,%rsi
  0x00007f8ab915f200: mov    %rsp,%rdx
  0x00007f8ab915f203: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f207: callq  0x00007f8aceddb9fa
  0x00007f8ab915f20c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915f20d: mov    %rsp,%r11
  0x00007f8ab915f210: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f214: push   %rax
  0x00007f8ab915f215: mov    %r11,%rax
  0x00007f8ab915f218: mov    0x50(%rbx),%r11
  0x00007f8ab915f21c: mov    0x18(%rax),%rsi
  0x00007f8ab915f220: vmovss 0x10(%rax),%xmm0
  0x00007f8ab915f225: mov    0x8(%rax),%edx
  0x00007f8ab915f228: mov    %rbx,0x258(%r15)
  0x00007f8ab915f22f: mov    %rbx,%rax
  0x00007f8ab915f232: jmpq   *%r11
  0x00007f8ab915f235: mov    0x8(%rsi),%ebx
  0x00007f8ab915f238: shl    $0x3,%rbx
  0x00007f8ab915f23c: cmp    0x10(%rax),%rbx
  0x00007f8ab915f240: mov    0x8(%rax),%rbx
  0x00007f8ab915f244: je     0x00007f8ab915f24f
  0x00007f8ab915f24a: jmpq   0x00007f8ab9105c40
  0x00007f8ab915f24f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915f257: je     0x00007f8ab915f352
  0x00007f8ab915f25d: jmpq   0x00007f8ab9105c40
  0x00007f8ab915f262: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915f26a: je     0x00007f8ab915f352
  0x00007f8ab915f270: mov    %rsp,%r13
  0x00007f8ab915f273: mov    (%rsp),%rax
  0x00007f8ab915f277: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f27b: pushfq 
  0x00007f8ab915f27c: sub    $0x8,%rsp
  0x00007f8ab915f280: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915f285: sub    $0x80,%rsp
  0x00007f8ab915f28c: mov    %rax,0x78(%rsp)
  0x00007f8ab915f291: mov    %rcx,0x70(%rsp)
  0x00007f8ab915f296: mov    %rdx,0x68(%rsp)
  0x00007f8ab915f29b: mov    %rbx,0x60(%rsp)
  0x00007f8ab915f2a0: mov    %rbp,0x50(%rsp)
  0x00007f8ab915f2a5: mov    %rsi,0x48(%rsp)
  0x00007f8ab915f2aa: mov    %rdi,0x40(%rsp)
  0x00007f8ab915f2af: mov    %r8,0x38(%rsp)
  0x00007f8ab915f2b4: mov    %r9,0x30(%rsp)
  0x00007f8ab915f2b9: mov    %r10,0x28(%rsp)
  0x00007f8ab915f2be: mov    %r11,0x20(%rsp)
  0x00007f8ab915f2c3: mov    %r12,0x18(%rsp)
  0x00007f8ab915f2c8: mov    %r13,0x10(%rsp)
  0x00007f8ab915f2cd: mov    %r14,0x8(%rsp)
  0x00007f8ab915f2d2: mov    %r15,(%rsp)
  0x00007f8ab915f2d6: sub    $0x200,%rsp
  0x00007f8ab915f2dd: fxsave64 (%rsp)
  0x00007f8ab915f2e2: mov    %rbx,%rdi
  0x00007f8ab915f2e5: mov    %rax,%rsi
  0x00007f8ab915f2e8: callq  0x00007f8acef8bbca
  0x00007f8ab915f2ed: fxrstor64 (%rsp)
  0x00007f8ab915f2f2: add    $0x200,%rsp
  0x00007f8ab915f2f9: mov    (%rsp),%r15
  0x00007f8ab915f2fd: mov    0x8(%rsp),%r14
  0x00007f8ab915f302: mov    0x10(%rsp),%r13
  0x00007f8ab915f307: mov    0x18(%rsp),%r12
  0x00007f8ab915f30c: mov    0x20(%rsp),%r11
  0x00007f8ab915f311: mov    0x28(%rsp),%r10
  0x00007f8ab915f316: mov    0x30(%rsp),%r9
  0x00007f8ab915f31b: mov    0x38(%rsp),%r8
  0x00007f8ab915f320: mov    0x40(%rsp),%rdi
  0x00007f8ab915f325: mov    0x48(%rsp),%rsi
  0x00007f8ab915f32a: mov    0x50(%rsp),%rbp
  0x00007f8ab915f32f: mov    0x60(%rsp),%rbx
  0x00007f8ab915f334: mov    0x68(%rsp),%rdx
  0x00007f8ab915f339: mov    0x70(%rsp),%rcx
  0x00007f8ab915f33e: mov    0x78(%rsp),%rax
  0x00007f8ab915f343: add    $0x80,%rsp
  0x00007f8ab915f34a: add    $0x8,%rsp
  0x00007f8ab915f34e: popfq  
  0x00007f8ab915f34f: mov    %r13,%rsp
  0x00007f8ab915f352: pop    %rax
  0x00007f8ab915f353: mov    %rsp,%r13
  0x00007f8ab915f356: sub    $0x30,%rsp
  0x00007f8ab915f35a: mov    %rax,(%rsp)
  0x00007f8ab915f35e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915f368: mov    %rax,0x20(%rsp)
  0x00007f8ab915f36d: mov    %rsi,0x18(%rsp)
  0x00007f8ab915f372: vmovss %xmm0,0x10(%rsp)
  0x00007f8ab915f378: mov    %edx,0x8(%rsp)
  0x00007f8ab915f37c: mov    0x40(%rbx),%rcx
  0x00007f8ab915f380: jmpq   *%rcx

AHE@0x00007f8ac812e9f8: 0xba6a0000 i2c: 0x00007f8ab915f460 c2i: 0x00007f8ab915f5a5 c2iUV: 0x00007f8ab915f578
i2c argument handler #83 for: static (Ljava/nio/ByteBuffer;IFZ)V (602 bytes generated)
c2i argument handler starts at 0x7f8ab915f5a5
  0x00007f8ab915f460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915f464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915f46e: cmp    %r11,%rax
  0x00007f8ab915f471: jbe    0x00007f8ab915f48a
  0x00007f8ab915f477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915f481: cmp    %r11,%rax
  0x00007f8ab915f484: jb     0x00007f8ab915f54d
  0x00007f8ab915f48a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915f494: cmp    %r11,%rax
  0x00007f8ab915f497: jbe    0x00007f8ab915f4b0
  0x00007f8ab915f49d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915f4a7: cmp    %r11,%rax
  0x00007f8ab915f4aa: jb     0x00007f8ab915f54d
  0x00007f8ab915f4b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915f4ba: cmp    %r11,%rax
  0x00007f8ab915f4bd: jbe    0x00007f8ab915f4d6
  0x00007f8ab915f4c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915f4cd: cmp    %r11,%rax
  0x00007f8ab915f4d0: jb     0x00007f8ab915f54d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915f4d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915f4db: sub    $0x80,%rsp
  0x00007f8ab915f4e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915f4e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915f4ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915f4f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915f4f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915f4fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915f500: mov    %rdi,0x40(%rsp)
  0x00007f8ab915f505: mov    %r8,0x38(%rsp)
  0x00007f8ab915f50a: mov    %r9,0x30(%rsp)
  0x00007f8ab915f50f: mov    %r10,0x28(%rsp)
  0x00007f8ab915f514: mov    %r11,0x20(%rsp)
  0x00007f8ab915f519: mov    %r12,0x18(%rsp)
  0x00007f8ab915f51e: mov    %r13,0x10(%rsp)
  0x00007f8ab915f523: mov    %r14,0x8(%rsp)
  0x00007f8ab915f528: mov    %r15,(%rsp)
  0x00007f8ab915f52c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915f536: movabs $0x7f8ab915f4d6,%rsi
  0x00007f8ab915f540: mov    %rsp,%rdx
  0x00007f8ab915f543: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f547: callq  0x00007f8aceddb9fa
  0x00007f8ab915f54c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915f54d: mov    %rsp,%r11
  0x00007f8ab915f550: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f554: push   %rax
  0x00007f8ab915f555: mov    %r11,%rax
  0x00007f8ab915f558: mov    0x50(%rbx),%r11
  0x00007f8ab915f55c: mov    0x20(%rax),%rsi
  0x00007f8ab915f560: mov    0x18(%rax),%edx
  0x00007f8ab915f563: vmovss 0x10(%rax),%xmm0
  0x00007f8ab915f568: mov    0x8(%rax),%ecx
  0x00007f8ab915f56b: mov    %rbx,0x258(%r15)
  0x00007f8ab915f572: mov    %rbx,%rax
  0x00007f8ab915f575: jmpq   *%r11
  0x00007f8ab915f578: mov    0x8(%rsi),%ebx
  0x00007f8ab915f57b: shl    $0x3,%rbx
  0x00007f8ab915f57f: cmp    0x10(%rax),%rbx
  0x00007f8ab915f583: mov    0x8(%rax),%rbx
  0x00007f8ab915f587: je     0x00007f8ab915f592
  0x00007f8ab915f58d: jmpq   0x00007f8ab9105c40
  0x00007f8ab915f592: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915f59a: je     0x00007f8ab915f695
  0x00007f8ab915f5a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab915f5a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915f5ad: je     0x00007f8ab915f695
  0x00007f8ab915f5b3: mov    %rsp,%r13
  0x00007f8ab915f5b6: mov    (%rsp),%rax
  0x00007f8ab915f5ba: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f5be: pushfq 
  0x00007f8ab915f5bf: sub    $0x8,%rsp
  0x00007f8ab915f5c3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915f5c8: sub    $0x80,%rsp
  0x00007f8ab915f5cf: mov    %rax,0x78(%rsp)
  0x00007f8ab915f5d4: mov    %rcx,0x70(%rsp)
  0x00007f8ab915f5d9: mov    %rdx,0x68(%rsp)
  0x00007f8ab915f5de: mov    %rbx,0x60(%rsp)
  0x00007f8ab915f5e3: mov    %rbp,0x50(%rsp)
  0x00007f8ab915f5e8: mov    %rsi,0x48(%rsp)
  0x00007f8ab915f5ed: mov    %rdi,0x40(%rsp)
  0x00007f8ab915f5f2: mov    %r8,0x38(%rsp)
  0x00007f8ab915f5f7: mov    %r9,0x30(%rsp)
  0x00007f8ab915f5fc: mov    %r10,0x28(%rsp)
  0x00007f8ab915f601: mov    %r11,0x20(%rsp)
  0x00007f8ab915f606: mov    %r12,0x18(%rsp)
  0x00007f8ab915f60b: mov    %r13,0x10(%rsp)
  0x00007f8ab915f610: mov    %r14,0x8(%rsp)
  0x00007f8ab915f615: mov    %r15,(%rsp)
  0x00007f8ab915f619: sub    $0x200,%rsp
  0x00007f8ab915f620: fxsave64 (%rsp)
  0x00007f8ab915f625: mov    %rbx,%rdi
  0x00007f8ab915f628: mov    %rax,%rsi
  0x00007f8ab915f62b: callq  0x00007f8acef8bbca
  0x00007f8ab915f630: fxrstor64 (%rsp)
  0x00007f8ab915f635: add    $0x200,%rsp
  0x00007f8ab915f63c: mov    (%rsp),%r15
  0x00007f8ab915f640: mov    0x8(%rsp),%r14
  0x00007f8ab915f645: mov    0x10(%rsp),%r13
  0x00007f8ab915f64a: mov    0x18(%rsp),%r12
  0x00007f8ab915f64f: mov    0x20(%rsp),%r11
  0x00007f8ab915f654: mov    0x28(%rsp),%r10
  0x00007f8ab915f659: mov    0x30(%rsp),%r9
  0x00007f8ab915f65e: mov    0x38(%rsp),%r8
  0x00007f8ab915f663: mov    0x40(%rsp),%rdi
  0x00007f8ab915f668: mov    0x48(%rsp),%rsi
  0x00007f8ab915f66d: mov    0x50(%rsp),%rbp
  0x00007f8ab915f672: mov    0x60(%rsp),%rbx
  0x00007f8ab915f677: mov    0x68(%rsp),%rdx
  0x00007f8ab915f67c: mov    0x70(%rsp),%rcx
  0x00007f8ab915f681: mov    0x78(%rsp),%rax
  0x00007f8ab915f686: add    $0x80,%rsp
  0x00007f8ab915f68d: add    $0x8,%rsp
  0x00007f8ab915f691: popfq  
  0x00007f8ab915f692: mov    %r13,%rsp
  0x00007f8ab915f695: pop    %rax
  0x00007f8ab915f696: mov    %rsp,%r13
  0x00007f8ab915f699: sub    $0x30,%rsp
  0x00007f8ab915f69d: mov    %rax,(%rsp)
  0x00007f8ab915f6a1: mov    %rsi,0x20(%rsp)
  0x00007f8ab915f6a6: mov    %edx,0x18(%rsp)
  0x00007f8ab915f6aa: vmovss %xmm0,0x10(%rsp)
  0x00007f8ab915f6b0: mov    %ecx,0x8(%rsp)
  0x00007f8ab915f6b4: mov    0x40(%rbx),%rcx
  0x00007f8ab915f6b8: jmpq   *%rcx

AHE@0x00007f8ac812ea40: 0xbebea000 i2c: 0x00007f8ab915f760 c2i: 0x00007f8ab915f8a1 c2iUV: 0x00007f8ab915f874
i2c argument handler #84 for: static (JJZ)V (623 bytes generated)
c2i argument handler starts at 0x7f8ab915f8a1
  0x00007f8ab915f760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915f764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915f76e: cmp    %r11,%rax
  0x00007f8ab915f771: jbe    0x00007f8ab915f78a
  0x00007f8ab915f777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915f781: cmp    %r11,%rax
  0x00007f8ab915f784: jb     0x00007f8ab915f84d
  0x00007f8ab915f78a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915f794: cmp    %r11,%rax
  0x00007f8ab915f797: jbe    0x00007f8ab915f7b0
  0x00007f8ab915f79d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915f7a7: cmp    %r11,%rax
  0x00007f8ab915f7aa: jb     0x00007f8ab915f84d
  0x00007f8ab915f7b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915f7ba: cmp    %r11,%rax
  0x00007f8ab915f7bd: jbe    0x00007f8ab915f7d6
  0x00007f8ab915f7c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915f7cd: cmp    %r11,%rax
  0x00007f8ab915f7d0: jb     0x00007f8ab915f84d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915f7d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915f7db: sub    $0x80,%rsp
  0x00007f8ab915f7e2: mov    %rax,0x78(%rsp)
  0x00007f8ab915f7e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab915f7ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab915f7f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab915f7f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab915f7fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab915f800: mov    %rdi,0x40(%rsp)
  0x00007f8ab915f805: mov    %r8,0x38(%rsp)
  0x00007f8ab915f80a: mov    %r9,0x30(%rsp)
  0x00007f8ab915f80f: mov    %r10,0x28(%rsp)
  0x00007f8ab915f814: mov    %r11,0x20(%rsp)
  0x00007f8ab915f819: mov    %r12,0x18(%rsp)
  0x00007f8ab915f81e: mov    %r13,0x10(%rsp)
  0x00007f8ab915f823: mov    %r14,0x8(%rsp)
  0x00007f8ab915f828: mov    %r15,(%rsp)
  0x00007f8ab915f82c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915f836: movabs $0x7f8ab915f7d6,%rsi
  0x00007f8ab915f840: mov    %rsp,%rdx
  0x00007f8ab915f843: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f847: callq  0x00007f8aceddb9fa
  0x00007f8ab915f84c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915f84d: mov    %rsp,%r11
  0x00007f8ab915f850: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f854: push   %rax
  0x00007f8ab915f855: mov    %r11,%rax
  0x00007f8ab915f858: mov    0x50(%rbx),%r11
  0x00007f8ab915f85c: mov    0x20(%rax),%rsi
  0x00007f8ab915f860: mov    0x10(%rax),%rdx
  0x00007f8ab915f864: mov    0x8(%rax),%ecx
  0x00007f8ab915f867: mov    %rbx,0x258(%r15)
  0x00007f8ab915f86e: mov    %rbx,%rax
  0x00007f8ab915f871: jmpq   *%r11
  0x00007f8ab915f874: mov    0x8(%rsi),%ebx
  0x00007f8ab915f877: shl    $0x3,%rbx
  0x00007f8ab915f87b: cmp    0x10(%rax),%rbx
  0x00007f8ab915f87f: mov    0x8(%rax),%rbx
  0x00007f8ab915f883: je     0x00007f8ab915f88e
  0x00007f8ab915f889: jmpq   0x00007f8ab9105c40
  0x00007f8ab915f88e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915f896: je     0x00007f8ab915f991
  0x00007f8ab915f89c: jmpq   0x00007f8ab9105c40
  0x00007f8ab915f8a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915f8a9: je     0x00007f8ab915f991
  0x00007f8ab915f8af: mov    %rsp,%r13
  0x00007f8ab915f8b2: mov    (%rsp),%rax
  0x00007f8ab915f8b6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915f8ba: pushfq 
  0x00007f8ab915f8bb: sub    $0x8,%rsp
  0x00007f8ab915f8bf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915f8c4: sub    $0x80,%rsp
  0x00007f8ab915f8cb: mov    %rax,0x78(%rsp)
  0x00007f8ab915f8d0: mov    %rcx,0x70(%rsp)
  0x00007f8ab915f8d5: mov    %rdx,0x68(%rsp)
  0x00007f8ab915f8da: mov    %rbx,0x60(%rsp)
  0x00007f8ab915f8df: mov    %rbp,0x50(%rsp)
  0x00007f8ab915f8e4: mov    %rsi,0x48(%rsp)
  0x00007f8ab915f8e9: mov    %rdi,0x40(%rsp)
  0x00007f8ab915f8ee: mov    %r8,0x38(%rsp)
  0x00007f8ab915f8f3: mov    %r9,0x30(%rsp)
  0x00007f8ab915f8f8: mov    %r10,0x28(%rsp)
  0x00007f8ab915f8fd: mov    %r11,0x20(%rsp)
  0x00007f8ab915f902: mov    %r12,0x18(%rsp)
  0x00007f8ab915f907: mov    %r13,0x10(%rsp)
  0x00007f8ab915f90c: mov    %r14,0x8(%rsp)
  0x00007f8ab915f911: mov    %r15,(%rsp)
  0x00007f8ab915f915: sub    $0x200,%rsp
  0x00007f8ab915f91c: fxsave64 (%rsp)
  0x00007f8ab915f921: mov    %rbx,%rdi
  0x00007f8ab915f924: mov    %rax,%rsi
  0x00007f8ab915f927: callq  0x00007f8acef8bbca
  0x00007f8ab915f92c: fxrstor64 (%rsp)
  0x00007f8ab915f931: add    $0x200,%rsp
  0x00007f8ab915f938: mov    (%rsp),%r15
  0x00007f8ab915f93c: mov    0x8(%rsp),%r14
  0x00007f8ab915f941: mov    0x10(%rsp),%r13
  0x00007f8ab915f946: mov    0x18(%rsp),%r12
  0x00007f8ab915f94b: mov    0x20(%rsp),%r11
  0x00007f8ab915f950: mov    0x28(%rsp),%r10
  0x00007f8ab915f955: mov    0x30(%rsp),%r9
  0x00007f8ab915f95a: mov    0x38(%rsp),%r8
  0x00007f8ab915f95f: mov    0x40(%rsp),%rdi
  0x00007f8ab915f964: mov    0x48(%rsp),%rsi
  0x00007f8ab915f969: mov    0x50(%rsp),%rbp
  0x00007f8ab915f96e: mov    0x60(%rsp),%rbx
  0x00007f8ab915f973: mov    0x68(%rsp),%rdx
  0x00007f8ab915f978: mov    0x70(%rsp),%rcx
  0x00007f8ab915f97d: mov    0x78(%rsp),%rax
  0x00007f8ab915f982: add    $0x80,%rsp
  0x00007f8ab915f989: add    $0x8,%rsp
  0x00007f8ab915f98d: popfq  
  0x00007f8ab915f98e: mov    %r13,%rsp
  0x00007f8ab915f991: pop    %rax
  0x00007f8ab915f992: mov    %rsp,%r13
  0x00007f8ab915f995: sub    $0x30,%rsp
  0x00007f8ab915f999: mov    %rax,(%rsp)
  0x00007f8ab915f99d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915f9a7: mov    %rax,0x28(%rsp)
  0x00007f8ab915f9ac: mov    %rsi,0x20(%rsp)
  0x00007f8ab915f9b1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915f9bb: mov    %rax,0x18(%rsp)
  0x00007f8ab915f9c0: mov    %rdx,0x10(%rsp)
  0x00007f8ab915f9c5: mov    %ecx,0x8(%rsp)
  0x00007f8ab915f9c9: mov    0x40(%rbx),%rcx
  0x00007f8ab915f9cd: jmpq   *%rcx

AHE@0x00007f8ac812ea88: 0xbabea000 i2c: 0x00007f8ab915faa0 c2i: 0x00007f8ab915fbe5 c2iUV: 0x00007f8ab915fbb8
i2c argument handler #85 for: static (Ljava/nio/ByteBuffer;IJZ)V (617 bytes generated)
c2i argument handler starts at 0x7f8ab915fbe5
  0x00007f8ab915faa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915faa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915faae: cmp    %r11,%rax
  0x00007f8ab915fab1: jbe    0x00007f8ab915faca
  0x00007f8ab915fab7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915fac1: cmp    %r11,%rax
  0x00007f8ab915fac4: jb     0x00007f8ab915fb8d
  0x00007f8ab915faca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915fad4: cmp    %r11,%rax
  0x00007f8ab915fad7: jbe    0x00007f8ab915faf0
  0x00007f8ab915fadd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915fae7: cmp    %r11,%rax
  0x00007f8ab915faea: jb     0x00007f8ab915fb8d
  0x00007f8ab915faf0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915fafa: cmp    %r11,%rax
  0x00007f8ab915fafd: jbe    0x00007f8ab915fb16
  0x00007f8ab915fb03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915fb0d: cmp    %r11,%rax
  0x00007f8ab915fb10: jb     0x00007f8ab915fb8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915fb16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915fb1b: sub    $0x80,%rsp
  0x00007f8ab915fb22: mov    %rax,0x78(%rsp)
  0x00007f8ab915fb27: mov    %rcx,0x70(%rsp)
  0x00007f8ab915fb2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915fb31: mov    %rbx,0x60(%rsp)
  0x00007f8ab915fb36: mov    %rbp,0x50(%rsp)
  0x00007f8ab915fb3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915fb40: mov    %rdi,0x40(%rsp)
  0x00007f8ab915fb45: mov    %r8,0x38(%rsp)
  0x00007f8ab915fb4a: mov    %r9,0x30(%rsp)
  0x00007f8ab915fb4f: mov    %r10,0x28(%rsp)
  0x00007f8ab915fb54: mov    %r11,0x20(%rsp)
  0x00007f8ab915fb59: mov    %r12,0x18(%rsp)
  0x00007f8ab915fb5e: mov    %r13,0x10(%rsp)
  0x00007f8ab915fb63: mov    %r14,0x8(%rsp)
  0x00007f8ab915fb68: mov    %r15,(%rsp)
  0x00007f8ab915fb6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915fb76: movabs $0x7f8ab915fb16,%rsi
  0x00007f8ab915fb80: mov    %rsp,%rdx
  0x00007f8ab915fb83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915fb87: callq  0x00007f8aceddb9fa
  0x00007f8ab915fb8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915fb8d: mov    %rsp,%r11
  0x00007f8ab915fb90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915fb94: push   %rax
  0x00007f8ab915fb95: mov    %r11,%rax
  0x00007f8ab915fb98: mov    0x50(%rbx),%r11
  0x00007f8ab915fb9c: mov    0x28(%rax),%rsi
  0x00007f8ab915fba0: mov    0x20(%rax),%edx
  0x00007f8ab915fba3: mov    0x10(%rax),%rcx
  0x00007f8ab915fba7: mov    0x8(%rax),%r8d
  0x00007f8ab915fbab: mov    %rbx,0x258(%r15)
  0x00007f8ab915fbb2: mov    %rbx,%rax
  0x00007f8ab915fbb5: jmpq   *%r11
  0x00007f8ab915fbb8: mov    0x8(%rsi),%ebx
  0x00007f8ab915fbbb: shl    $0x3,%rbx
  0x00007f8ab915fbbf: cmp    0x10(%rax),%rbx
  0x00007f8ab915fbc3: mov    0x8(%rax),%rbx
  0x00007f8ab915fbc7: je     0x00007f8ab915fbd2
  0x00007f8ab915fbcd: jmpq   0x00007f8ab9105c40
  0x00007f8ab915fbd2: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915fbda: je     0x00007f8ab915fcd5
  0x00007f8ab915fbe0: jmpq   0x00007f8ab9105c40
  0x00007f8ab915fbe5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915fbed: je     0x00007f8ab915fcd5
  0x00007f8ab915fbf3: mov    %rsp,%r13
  0x00007f8ab915fbf6: mov    (%rsp),%rax
  0x00007f8ab915fbfa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915fbfe: pushfq 
  0x00007f8ab915fbff: sub    $0x8,%rsp
  0x00007f8ab915fc03: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915fc08: sub    $0x80,%rsp
  0x00007f8ab915fc0f: mov    %rax,0x78(%rsp)
  0x00007f8ab915fc14: mov    %rcx,0x70(%rsp)
  0x00007f8ab915fc19: mov    %rdx,0x68(%rsp)
  0x00007f8ab915fc1e: mov    %rbx,0x60(%rsp)
  0x00007f8ab915fc23: mov    %rbp,0x50(%rsp)
  0x00007f8ab915fc28: mov    %rsi,0x48(%rsp)
  0x00007f8ab915fc2d: mov    %rdi,0x40(%rsp)
  0x00007f8ab915fc32: mov    %r8,0x38(%rsp)
  0x00007f8ab915fc37: mov    %r9,0x30(%rsp)
  0x00007f8ab915fc3c: mov    %r10,0x28(%rsp)
  0x00007f8ab915fc41: mov    %r11,0x20(%rsp)
  0x00007f8ab915fc46: mov    %r12,0x18(%rsp)
  0x00007f8ab915fc4b: mov    %r13,0x10(%rsp)
  0x00007f8ab915fc50: mov    %r14,0x8(%rsp)
  0x00007f8ab915fc55: mov    %r15,(%rsp)
  0x00007f8ab915fc59: sub    $0x200,%rsp
  0x00007f8ab915fc60: fxsave64 (%rsp)
  0x00007f8ab915fc65: mov    %rbx,%rdi
  0x00007f8ab915fc68: mov    %rax,%rsi
  0x00007f8ab915fc6b: callq  0x00007f8acef8bbca
  0x00007f8ab915fc70: fxrstor64 (%rsp)
  0x00007f8ab915fc75: add    $0x200,%rsp
  0x00007f8ab915fc7c: mov    (%rsp),%r15
  0x00007f8ab915fc80: mov    0x8(%rsp),%r14
  0x00007f8ab915fc85: mov    0x10(%rsp),%r13
  0x00007f8ab915fc8a: mov    0x18(%rsp),%r12
  0x00007f8ab915fc8f: mov    0x20(%rsp),%r11
  0x00007f8ab915fc94: mov    0x28(%rsp),%r10
  0x00007f8ab915fc99: mov    0x30(%rsp),%r9
  0x00007f8ab915fc9e: mov    0x38(%rsp),%r8
  0x00007f8ab915fca3: mov    0x40(%rsp),%rdi
  0x00007f8ab915fca8: mov    0x48(%rsp),%rsi
  0x00007f8ab915fcad: mov    0x50(%rsp),%rbp
  0x00007f8ab915fcb2: mov    0x60(%rsp),%rbx
  0x00007f8ab915fcb7: mov    0x68(%rsp),%rdx
  0x00007f8ab915fcbc: mov    0x70(%rsp),%rcx
  0x00007f8ab915fcc1: mov    0x78(%rsp),%rax
  0x00007f8ab915fcc6: add    $0x80,%rsp
  0x00007f8ab915fccd: add    $0x8,%rsp
  0x00007f8ab915fcd1: popfq  
  0x00007f8ab915fcd2: mov    %r13,%rsp
  0x00007f8ab915fcd5: pop    %rax
  0x00007f8ab915fcd6: mov    %rsp,%r13
  0x00007f8ab915fcd9: sub    $0x30,%rsp
  0x00007f8ab915fcdd: mov    %rax,(%rsp)
  0x00007f8ab915fce1: mov    %rsi,0x28(%rsp)
  0x00007f8ab915fce6: mov    %edx,0x20(%rsp)
  0x00007f8ab915fcea: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab915fcf4: mov    %rax,0x18(%rsp)
  0x00007f8ab915fcf9: mov    %rcx,0x10(%rsp)
  0x00007f8ab915fcfe: mov    %r8d,0x8(%rsp)
  0x00007f8ab915fd03: mov    0x40(%rbx),%rcx
  0x00007f8ab915fd07: jmpq   *%rcx

AHE@0x00007f8ac812ead0: 0xbeaa0000 i2c: 0x00007f8ab915fde0 c2i: 0x00007f8ab915ff20 c2iUV: 0x00007f8ab915fef3
i2c argument handler #86 for: static (JIZ)V (606 bytes generated)
c2i argument handler starts at 0x7f8ab915ff20
  0x00007f8ab915fde0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab915fde4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab915fdee: cmp    %r11,%rax
  0x00007f8ab915fdf1: jbe    0x00007f8ab915fe0a
  0x00007f8ab915fdf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab915fe01: cmp    %r11,%rax
  0x00007f8ab915fe04: jb     0x00007f8ab915fecd
  0x00007f8ab915fe0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab915fe14: cmp    %r11,%rax
  0x00007f8ab915fe17: jbe    0x00007f8ab915fe30
  0x00007f8ab915fe1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab915fe27: cmp    %r11,%rax
  0x00007f8ab915fe2a: jb     0x00007f8ab915fecd
  0x00007f8ab915fe30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab915fe3a: cmp    %r11,%rax
  0x00007f8ab915fe3d: jbe    0x00007f8ab915fe56
  0x00007f8ab915fe43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab915fe4d: cmp    %r11,%rax
  0x00007f8ab915fe50: jb     0x00007f8ab915fecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab915fe56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915fe5b: sub    $0x80,%rsp
  0x00007f8ab915fe62: mov    %rax,0x78(%rsp)
  0x00007f8ab915fe67: mov    %rcx,0x70(%rsp)
  0x00007f8ab915fe6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab915fe71: mov    %rbx,0x60(%rsp)
  0x00007f8ab915fe76: mov    %rbp,0x50(%rsp)
  0x00007f8ab915fe7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab915fe80: mov    %rdi,0x40(%rsp)
  0x00007f8ab915fe85: mov    %r8,0x38(%rsp)
  0x00007f8ab915fe8a: mov    %r9,0x30(%rsp)
  0x00007f8ab915fe8f: mov    %r10,0x28(%rsp)
  0x00007f8ab915fe94: mov    %r11,0x20(%rsp)
  0x00007f8ab915fe99: mov    %r12,0x18(%rsp)
  0x00007f8ab915fe9e: mov    %r13,0x10(%rsp)
  0x00007f8ab915fea3: mov    %r14,0x8(%rsp)
  0x00007f8ab915fea8: mov    %r15,(%rsp)
  0x00007f8ab915feac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab915feb6: movabs $0x7f8ab915fe56,%rsi
  0x00007f8ab915fec0: mov    %rsp,%rdx
  0x00007f8ab915fec3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915fec7: callq  0x00007f8aceddb9fa
  0x00007f8ab915fecc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab915fecd: mov    %rsp,%r11
  0x00007f8ab915fed0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915fed4: push   %rax
  0x00007f8ab915fed5: mov    %r11,%rax
  0x00007f8ab915fed8: mov    0x50(%rbx),%r11
  0x00007f8ab915fedc: mov    0x18(%rax),%rsi
  0x00007f8ab915fee0: mov    0x10(%rax),%edx
  0x00007f8ab915fee3: mov    0x8(%rax),%ecx
  0x00007f8ab915fee6: mov    %rbx,0x258(%r15)
  0x00007f8ab915feed: mov    %rbx,%rax
  0x00007f8ab915fef0: jmpq   *%r11
  0x00007f8ab915fef3: mov    0x8(%rsi),%ebx
  0x00007f8ab915fef6: shl    $0x3,%rbx
  0x00007f8ab915fefa: cmp    0x10(%rax),%rbx
  0x00007f8ab915fefe: mov    0x8(%rax),%rbx
  0x00007f8ab915ff02: je     0x00007f8ab915ff0d
  0x00007f8ab915ff08: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ff0d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ff15: je     0x00007f8ab9160010
  0x00007f8ab915ff1b: jmpq   0x00007f8ab9105c40
  0x00007f8ab915ff20: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab915ff28: je     0x00007f8ab9160010
  0x00007f8ab915ff2e: mov    %rsp,%r13
  0x00007f8ab915ff31: mov    (%rsp),%rax
  0x00007f8ab915ff35: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab915ff39: pushfq 
  0x00007f8ab915ff3a: sub    $0x8,%rsp
  0x00007f8ab915ff3e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab915ff43: sub    $0x80,%rsp
  0x00007f8ab915ff4a: mov    %rax,0x78(%rsp)
  0x00007f8ab915ff4f: mov    %rcx,0x70(%rsp)
  0x00007f8ab915ff54: mov    %rdx,0x68(%rsp)
  0x00007f8ab915ff59: mov    %rbx,0x60(%rsp)
  0x00007f8ab915ff5e: mov    %rbp,0x50(%rsp)
  0x00007f8ab915ff63: mov    %rsi,0x48(%rsp)
  0x00007f8ab915ff68: mov    %rdi,0x40(%rsp)
  0x00007f8ab915ff6d: mov    %r8,0x38(%rsp)
  0x00007f8ab915ff72: mov    %r9,0x30(%rsp)
  0x00007f8ab915ff77: mov    %r10,0x28(%rsp)
  0x00007f8ab915ff7c: mov    %r11,0x20(%rsp)
  0x00007f8ab915ff81: mov    %r12,0x18(%rsp)
  0x00007f8ab915ff86: mov    %r13,0x10(%rsp)
  0x00007f8ab915ff8b: mov    %r14,0x8(%rsp)
  0x00007f8ab915ff90: mov    %r15,(%rsp)
  0x00007f8ab915ff94: sub    $0x200,%rsp
  0x00007f8ab915ff9b: fxsave64 (%rsp)
  0x00007f8ab915ffa0: mov    %rbx,%rdi
  0x00007f8ab915ffa3: mov    %rax,%rsi
  0x00007f8ab915ffa6: callq  0x00007f8acef8bbca
  0x00007f8ab915ffab: fxrstor64 (%rsp)
  0x00007f8ab915ffb0: add    $0x200,%rsp
  0x00007f8ab915ffb7: mov    (%rsp),%r15
  0x00007f8ab915ffbb: mov    0x8(%rsp),%r14
  0x00007f8ab915ffc0: mov    0x10(%rsp),%r13
  0x00007f8ab915ffc5: mov    0x18(%rsp),%r12
  0x00007f8ab915ffca: mov    0x20(%rsp),%r11
  0x00007f8ab915ffcf: mov    0x28(%rsp),%r10
  0x00007f8ab915ffd4: mov    0x30(%rsp),%r9
  0x00007f8ab915ffd9: mov    0x38(%rsp),%r8
  0x00007f8ab915ffde: mov    0x40(%rsp),%rdi
  0x00007f8ab915ffe3: mov    0x48(%rsp),%rsi
  0x00007f8ab915ffe8: mov    0x50(%rsp),%rbp
  0x00007f8ab915ffed: mov    0x60(%rsp),%rbx
  0x00007f8ab915fff2: mov    0x68(%rsp),%rdx
  0x00007f8ab915fff7: mov    0x70(%rsp),%rcx
  0x00007f8ab915fffc: mov    0x78(%rsp),%rax
  0x00007f8ab9160001: add    $0x80,%rsp
  0x00007f8ab9160008: add    $0x8,%rsp
  0x00007f8ab916000c: popfq  
  0x00007f8ab916000d: mov    %r13,%rsp
  0x00007f8ab9160010: pop    %rax
  0x00007f8ab9160011: mov    %rsp,%r13
  0x00007f8ab9160014: sub    $0x30,%rsp
  0x00007f8ab9160018: mov    %rax,(%rsp)
  0x00007f8ab916001c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9160026: mov    %rax,0x20(%rsp)
  0x00007f8ab916002b: mov    %rsi,0x18(%rsp)
  0x00007f8ab9160030: mov    %edx,0x10(%rsp)
  0x00007f8ab9160034: mov    %ecx,0x8(%rsp)
  0x00007f8ab9160038: mov    0x40(%rbx),%rcx
  0x00007f8ab916003c: jmpq   *%rcx

AHE@0x00007f8ac812eb18: 0xbbeb0000 i2c: 0x00007f8ab91600e0 c2i: 0x00007f8ab9160222 c2iUV: 0x00007f8ab91601f5
i2c argument handler #87 for: receiver (JLjava/util/function/LongBinaryOperator;)J (610 bytes generated)
c2i argument handler starts at 0x7f8ab9160222
  0x00007f8ab91600e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91600e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91600ee: cmp    %r11,%rax
  0x00007f8ab91600f1: jbe    0x00007f8ab916010a
  0x00007f8ab91600f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9160101: cmp    %r11,%rax
  0x00007f8ab9160104: jb     0x00007f8ab91601cd
  0x00007f8ab916010a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9160114: cmp    %r11,%rax
  0x00007f8ab9160117: jbe    0x00007f8ab9160130
  0x00007f8ab916011d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9160127: cmp    %r11,%rax
  0x00007f8ab916012a: jb     0x00007f8ab91601cd
  0x00007f8ab9160130: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916013a: cmp    %r11,%rax
  0x00007f8ab916013d: jbe    0x00007f8ab9160156
  0x00007f8ab9160143: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916014d: cmp    %r11,%rax
  0x00007f8ab9160150: jb     0x00007f8ab91601cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9160156: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916015b: sub    $0x80,%rsp
  0x00007f8ab9160162: mov    %rax,0x78(%rsp)
  0x00007f8ab9160167: mov    %rcx,0x70(%rsp)
  0x00007f8ab916016c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9160171: mov    %rbx,0x60(%rsp)
  0x00007f8ab9160176: mov    %rbp,0x50(%rsp)
  0x00007f8ab916017b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9160180: mov    %rdi,0x40(%rsp)
  0x00007f8ab9160185: mov    %r8,0x38(%rsp)
  0x00007f8ab916018a: mov    %r9,0x30(%rsp)
  0x00007f8ab916018f: mov    %r10,0x28(%rsp)
  0x00007f8ab9160194: mov    %r11,0x20(%rsp)
  0x00007f8ab9160199: mov    %r12,0x18(%rsp)
  0x00007f8ab916019e: mov    %r13,0x10(%rsp)
  0x00007f8ab91601a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91601a8: mov    %r15,(%rsp)
  0x00007f8ab91601ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91601b6: movabs $0x7f8ab9160156,%rsi
  0x00007f8ab91601c0: mov    %rsp,%rdx
  0x00007f8ab91601c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91601c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91601cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91601cd: mov    %rsp,%r11
  0x00007f8ab91601d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91601d4: push   %rax
  0x00007f8ab91601d5: mov    %r11,%rax
  0x00007f8ab91601d8: mov    0x50(%rbx),%r11
  0x00007f8ab91601dc: mov    0x20(%rax),%rsi
  0x00007f8ab91601e0: mov    0x10(%rax),%rdx
  0x00007f8ab91601e4: mov    0x8(%rax),%rcx
  0x00007f8ab91601e8: mov    %rbx,0x258(%r15)
  0x00007f8ab91601ef: mov    %rbx,%rax
  0x00007f8ab91601f2: jmpq   *%r11
  0x00007f8ab91601f5: mov    0x8(%rsi),%ebx
  0x00007f8ab91601f8: shl    $0x3,%rbx
  0x00007f8ab91601fc: cmp    0x10(%rax),%rbx
  0x00007f8ab9160200: mov    0x8(%rax),%rbx
  0x00007f8ab9160204: je     0x00007f8ab916020f
  0x00007f8ab916020a: jmpq   0x00007f8ab9105c40
  0x00007f8ab916020f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9160217: je     0x00007f8ab9160312
  0x00007f8ab916021d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9160222: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916022a: je     0x00007f8ab9160312
  0x00007f8ab9160230: mov    %rsp,%r13
  0x00007f8ab9160233: mov    (%rsp),%rax
  0x00007f8ab9160237: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916023b: pushfq 
  0x00007f8ab916023c: sub    $0x8,%rsp
  0x00007f8ab9160240: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9160245: sub    $0x80,%rsp
  0x00007f8ab916024c: mov    %rax,0x78(%rsp)
  0x00007f8ab9160251: mov    %rcx,0x70(%rsp)
  0x00007f8ab9160256: mov    %rdx,0x68(%rsp)
  0x00007f8ab916025b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9160260: mov    %rbp,0x50(%rsp)
  0x00007f8ab9160265: mov    %rsi,0x48(%rsp)
  0x00007f8ab916026a: mov    %rdi,0x40(%rsp)
  0x00007f8ab916026f: mov    %r8,0x38(%rsp)
  0x00007f8ab9160274: mov    %r9,0x30(%rsp)
  0x00007f8ab9160279: mov    %r10,0x28(%rsp)
  0x00007f8ab916027e: mov    %r11,0x20(%rsp)
  0x00007f8ab9160283: mov    %r12,0x18(%rsp)
  0x00007f8ab9160288: mov    %r13,0x10(%rsp)
  0x00007f8ab916028d: mov    %r14,0x8(%rsp)
  0x00007f8ab9160292: mov    %r15,(%rsp)
  0x00007f8ab9160296: sub    $0x200,%rsp
  0x00007f8ab916029d: fxsave64 (%rsp)
  0x00007f8ab91602a2: mov    %rbx,%rdi
  0x00007f8ab91602a5: mov    %rax,%rsi
  0x00007f8ab91602a8: callq  0x00007f8acef8bbca
  0x00007f8ab91602ad: fxrstor64 (%rsp)
  0x00007f8ab91602b2: add    $0x200,%rsp
  0x00007f8ab91602b9: mov    (%rsp),%r15
  0x00007f8ab91602bd: mov    0x8(%rsp),%r14
  0x00007f8ab91602c2: mov    0x10(%rsp),%r13
  0x00007f8ab91602c7: mov    0x18(%rsp),%r12
  0x00007f8ab91602cc: mov    0x20(%rsp),%r11
  0x00007f8ab91602d1: mov    0x28(%rsp),%r10
  0x00007f8ab91602d6: mov    0x30(%rsp),%r9
  0x00007f8ab91602db: mov    0x38(%rsp),%r8
  0x00007f8ab91602e0: mov    0x40(%rsp),%rdi
  0x00007f8ab91602e5: mov    0x48(%rsp),%rsi
  0x00007f8ab91602ea: mov    0x50(%rsp),%rbp
  0x00007f8ab91602ef: mov    0x60(%rsp),%rbx
  0x00007f8ab91602f4: mov    0x68(%rsp),%rdx
  0x00007f8ab91602f9: mov    0x70(%rsp),%rcx
  0x00007f8ab91602fe: mov    0x78(%rsp),%rax
  0x00007f8ab9160303: add    $0x80,%rsp
  0x00007f8ab916030a: add    $0x8,%rsp
  0x00007f8ab916030e: popfq  
  0x00007f8ab916030f: mov    %r13,%rsp
  0x00007f8ab9160312: pop    %rax
  0x00007f8ab9160313: mov    %rsp,%r13
  0x00007f8ab9160316: sub    $0x30,%rsp
  0x00007f8ab916031a: mov    %rax,(%rsp)
  0x00007f8ab916031e: mov    %rsi,0x20(%rsp)
  0x00007f8ab9160323: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab916032d: mov    %rax,0x18(%rsp)
  0x00007f8ab9160332: mov    %rdx,0x10(%rsp)
  0x00007f8ab9160337: mov    %rcx,0x8(%rsp)
  0x00007f8ab916033c: mov    0x40(%rbx),%rcx
  0x00007f8ab9160340: jmpq   *%rcx

AHE@0x00007f8ac812eb60: 0xbbebe000 i2c: 0x00007f8ab9160420 c2i: 0x00007f8ab9160562 c2iUV: 0x00007f8ab9160535
i2c argument handler #88 for: receiver (JJ)Z (625 bytes generated)
c2i argument handler starts at 0x7f8ab9160562
  0x00007f8ab9160420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9160424: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916042e: cmp    %r11,%rax
  0x00007f8ab9160431: jbe    0x00007f8ab916044a
  0x00007f8ab9160437: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9160441: cmp    %r11,%rax
  0x00007f8ab9160444: jb     0x00007f8ab916050d
  0x00007f8ab916044a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9160454: cmp    %r11,%rax
  0x00007f8ab9160457: jbe    0x00007f8ab9160470
  0x00007f8ab916045d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9160467: cmp    %r11,%rax
  0x00007f8ab916046a: jb     0x00007f8ab916050d
  0x00007f8ab9160470: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916047a: cmp    %r11,%rax
  0x00007f8ab916047d: jbe    0x00007f8ab9160496
  0x00007f8ab9160483: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916048d: cmp    %r11,%rax
  0x00007f8ab9160490: jb     0x00007f8ab916050d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9160496: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916049b: sub    $0x80,%rsp
  0x00007f8ab91604a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91604a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91604ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91604b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91604b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91604bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91604c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91604c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91604ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91604cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91604d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91604d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91604de: mov    %r13,0x10(%rsp)
  0x00007f8ab91604e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91604e8: mov    %r15,(%rsp)
  0x00007f8ab91604ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91604f6: movabs $0x7f8ab9160496,%rsi
  0x00007f8ab9160500: mov    %rsp,%rdx
  0x00007f8ab9160503: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160507: callq  0x00007f8aceddb9fa
  0x00007f8ab916050c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916050d: mov    %rsp,%r11
  0x00007f8ab9160510: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160514: push   %rax
  0x00007f8ab9160515: mov    %r11,%rax
  0x00007f8ab9160518: mov    0x50(%rbx),%r11
  0x00007f8ab916051c: mov    0x28(%rax),%rsi
  0x00007f8ab9160520: mov    0x18(%rax),%rdx
  0x00007f8ab9160524: mov    0x8(%rax),%rcx
  0x00007f8ab9160528: mov    %rbx,0x258(%r15)
  0x00007f8ab916052f: mov    %rbx,%rax
  0x00007f8ab9160532: jmpq   *%r11
  0x00007f8ab9160535: mov    0x8(%rsi),%ebx
  0x00007f8ab9160538: shl    $0x3,%rbx
  0x00007f8ab916053c: cmp    0x10(%rax),%rbx
  0x00007f8ab9160540: mov    0x8(%rax),%rbx
  0x00007f8ab9160544: je     0x00007f8ab916054f
  0x00007f8ab916054a: jmpq   0x00007f8ab9105c40
  0x00007f8ab916054f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9160557: je     0x00007f8ab9160652
  0x00007f8ab916055d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9160562: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916056a: je     0x00007f8ab9160652
  0x00007f8ab9160570: mov    %rsp,%r13
  0x00007f8ab9160573: mov    (%rsp),%rax
  0x00007f8ab9160577: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916057b: pushfq 
  0x00007f8ab916057c: sub    $0x8,%rsp
  0x00007f8ab9160580: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9160585: sub    $0x80,%rsp
  0x00007f8ab916058c: mov    %rax,0x78(%rsp)
  0x00007f8ab9160591: mov    %rcx,0x70(%rsp)
  0x00007f8ab9160596: mov    %rdx,0x68(%rsp)
  0x00007f8ab916059b: mov    %rbx,0x60(%rsp)
  0x00007f8ab91605a0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91605a5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91605aa: mov    %rdi,0x40(%rsp)
  0x00007f8ab91605af: mov    %r8,0x38(%rsp)
  0x00007f8ab91605b4: mov    %r9,0x30(%rsp)
  0x00007f8ab91605b9: mov    %r10,0x28(%rsp)
  0x00007f8ab91605be: mov    %r11,0x20(%rsp)
  0x00007f8ab91605c3: mov    %r12,0x18(%rsp)
  0x00007f8ab91605c8: mov    %r13,0x10(%rsp)
  0x00007f8ab91605cd: mov    %r14,0x8(%rsp)
  0x00007f8ab91605d2: mov    %r15,(%rsp)
  0x00007f8ab91605d6: sub    $0x200,%rsp
  0x00007f8ab91605dd: fxsave64 (%rsp)
  0x00007f8ab91605e2: mov    %rbx,%rdi
  0x00007f8ab91605e5: mov    %rax,%rsi
  0x00007f8ab91605e8: callq  0x00007f8acef8bbca
  0x00007f8ab91605ed: fxrstor64 (%rsp)
  0x00007f8ab91605f2: add    $0x200,%rsp
  0x00007f8ab91605f9: mov    (%rsp),%r15
  0x00007f8ab91605fd: mov    0x8(%rsp),%r14
  0x00007f8ab9160602: mov    0x10(%rsp),%r13
  0x00007f8ab9160607: mov    0x18(%rsp),%r12
  0x00007f8ab916060c: mov    0x20(%rsp),%r11
  0x00007f8ab9160611: mov    0x28(%rsp),%r10
  0x00007f8ab9160616: mov    0x30(%rsp),%r9
  0x00007f8ab916061b: mov    0x38(%rsp),%r8
  0x00007f8ab9160620: mov    0x40(%rsp),%rdi
  0x00007f8ab9160625: mov    0x48(%rsp),%rsi
  0x00007f8ab916062a: mov    0x50(%rsp),%rbp
  0x00007f8ab916062f: mov    0x60(%rsp),%rbx
  0x00007f8ab9160634: mov    0x68(%rsp),%rdx
  0x00007f8ab9160639: mov    0x70(%rsp),%rcx
  0x00007f8ab916063e: mov    0x78(%rsp),%rax
  0x00007f8ab9160643: add    $0x80,%rsp
  0x00007f8ab916064a: add    $0x8,%rsp
  0x00007f8ab916064e: popfq  
  0x00007f8ab916064f: mov    %r13,%rsp
  0x00007f8ab9160652: pop    %rax
  0x00007f8ab9160653: mov    %rsp,%r13
  0x00007f8ab9160656: sub    $0x30,%rsp
  0x00007f8ab916065a: mov    %rax,(%rsp)
  0x00007f8ab916065e: mov    %rsi,0x28(%rsp)
  0x00007f8ab9160663: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab916066d: mov    %rax,0x20(%rsp)
  0x00007f8ab9160672: mov    %rdx,0x18(%rsp)
  0x00007f8ab9160677: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9160681: mov    %rax,0x10(%rsp)
  0x00007f8ab9160686: mov    %rcx,0x8(%rsp)
  0x00007f8ab916068b: mov    0x40(%rbx),%rcx
  0x00007f8ab916068f: jmpq   *%rcx

AHE@0x00007f8ac812eba8: 0xbbeab000 i2c: 0x00007f8ab9160760 c2i: 0x00007f8ab91608a5 c2iUV: 0x00007f8ab9160878
i2c argument handler #89 for: receiver (JILjava/lang/Object;)Ljava/nio/ByteBuffer; (617 bytes generated)
c2i argument handler starts at 0x7f8ab91608a5
  0x00007f8ab9160760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9160764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916076e: cmp    %r11,%rax
  0x00007f8ab9160771: jbe    0x00007f8ab916078a
  0x00007f8ab9160777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9160781: cmp    %r11,%rax
  0x00007f8ab9160784: jb     0x00007f8ab916084d
  0x00007f8ab916078a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9160794: cmp    %r11,%rax
  0x00007f8ab9160797: jbe    0x00007f8ab91607b0
  0x00007f8ab916079d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91607a7: cmp    %r11,%rax
  0x00007f8ab91607aa: jb     0x00007f8ab916084d
  0x00007f8ab91607b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91607ba: cmp    %r11,%rax
  0x00007f8ab91607bd: jbe    0x00007f8ab91607d6
  0x00007f8ab91607c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91607cd: cmp    %r11,%rax
  0x00007f8ab91607d0: jb     0x00007f8ab916084d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91607d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91607db: sub    $0x80,%rsp
  0x00007f8ab91607e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91607e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91607ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91607f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91607f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91607fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9160800: mov    %rdi,0x40(%rsp)
  0x00007f8ab9160805: mov    %r8,0x38(%rsp)
  0x00007f8ab916080a: mov    %r9,0x30(%rsp)
  0x00007f8ab916080f: mov    %r10,0x28(%rsp)
  0x00007f8ab9160814: mov    %r11,0x20(%rsp)
  0x00007f8ab9160819: mov    %r12,0x18(%rsp)
  0x00007f8ab916081e: mov    %r13,0x10(%rsp)
  0x00007f8ab9160823: mov    %r14,0x8(%rsp)
  0x00007f8ab9160828: mov    %r15,(%rsp)
  0x00007f8ab916082c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9160836: movabs $0x7f8ab91607d6,%rsi
  0x00007f8ab9160840: mov    %rsp,%rdx
  0x00007f8ab9160843: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160847: callq  0x00007f8aceddb9fa
  0x00007f8ab916084c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916084d: mov    %rsp,%r11
  0x00007f8ab9160850: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160854: push   %rax
  0x00007f8ab9160855: mov    %r11,%rax
  0x00007f8ab9160858: mov    0x50(%rbx),%r11
  0x00007f8ab916085c: mov    0x28(%rax),%rsi
  0x00007f8ab9160860: mov    0x18(%rax),%rdx
  0x00007f8ab9160864: mov    0x10(%rax),%ecx
  0x00007f8ab9160867: mov    0x8(%rax),%r8
  0x00007f8ab916086b: mov    %rbx,0x258(%r15)
  0x00007f8ab9160872: mov    %rbx,%rax
  0x00007f8ab9160875: jmpq   *%r11
  0x00007f8ab9160878: mov    0x8(%rsi),%ebx
  0x00007f8ab916087b: shl    $0x3,%rbx
  0x00007f8ab916087f: cmp    0x10(%rax),%rbx
  0x00007f8ab9160883: mov    0x8(%rax),%rbx
  0x00007f8ab9160887: je     0x00007f8ab9160892
  0x00007f8ab916088d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9160892: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916089a: je     0x00007f8ab9160995
  0x00007f8ab91608a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab91608a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91608ad: je     0x00007f8ab9160995
  0x00007f8ab91608b3: mov    %rsp,%r13
  0x00007f8ab91608b6: mov    (%rsp),%rax
  0x00007f8ab91608ba: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91608be: pushfq 
  0x00007f8ab91608bf: sub    $0x8,%rsp
  0x00007f8ab91608c3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91608c8: sub    $0x80,%rsp
  0x00007f8ab91608cf: mov    %rax,0x78(%rsp)
  0x00007f8ab91608d4: mov    %rcx,0x70(%rsp)
  0x00007f8ab91608d9: mov    %rdx,0x68(%rsp)
  0x00007f8ab91608de: mov    %rbx,0x60(%rsp)
  0x00007f8ab91608e3: mov    %rbp,0x50(%rsp)
  0x00007f8ab91608e8: mov    %rsi,0x48(%rsp)
  0x00007f8ab91608ed: mov    %rdi,0x40(%rsp)
  0x00007f8ab91608f2: mov    %r8,0x38(%rsp)
  0x00007f8ab91608f7: mov    %r9,0x30(%rsp)
  0x00007f8ab91608fc: mov    %r10,0x28(%rsp)
  0x00007f8ab9160901: mov    %r11,0x20(%rsp)
  0x00007f8ab9160906: mov    %r12,0x18(%rsp)
  0x00007f8ab916090b: mov    %r13,0x10(%rsp)
  0x00007f8ab9160910: mov    %r14,0x8(%rsp)
  0x00007f8ab9160915: mov    %r15,(%rsp)
  0x00007f8ab9160919: sub    $0x200,%rsp
  0x00007f8ab9160920: fxsave64 (%rsp)
  0x00007f8ab9160925: mov    %rbx,%rdi
  0x00007f8ab9160928: mov    %rax,%rsi
  0x00007f8ab916092b: callq  0x00007f8acef8bbca
  0x00007f8ab9160930: fxrstor64 (%rsp)
  0x00007f8ab9160935: add    $0x200,%rsp
  0x00007f8ab916093c: mov    (%rsp),%r15
  0x00007f8ab9160940: mov    0x8(%rsp),%r14
  0x00007f8ab9160945: mov    0x10(%rsp),%r13
  0x00007f8ab916094a: mov    0x18(%rsp),%r12
  0x00007f8ab916094f: mov    0x20(%rsp),%r11
  0x00007f8ab9160954: mov    0x28(%rsp),%r10
  0x00007f8ab9160959: mov    0x30(%rsp),%r9
  0x00007f8ab916095e: mov    0x38(%rsp),%r8
  0x00007f8ab9160963: mov    0x40(%rsp),%rdi
  0x00007f8ab9160968: mov    0x48(%rsp),%rsi
  0x00007f8ab916096d: mov    0x50(%rsp),%rbp
  0x00007f8ab9160972: mov    0x60(%rsp),%rbx
  0x00007f8ab9160977: mov    0x68(%rsp),%rdx
  0x00007f8ab916097c: mov    0x70(%rsp),%rcx
  0x00007f8ab9160981: mov    0x78(%rsp),%rax
  0x00007f8ab9160986: add    $0x80,%rsp
  0x00007f8ab916098d: add    $0x8,%rsp
  0x00007f8ab9160991: popfq  
  0x00007f8ab9160992: mov    %r13,%rsp
  0x00007f8ab9160995: pop    %rax
  0x00007f8ab9160996: mov    %rsp,%r13
  0x00007f8ab9160999: sub    $0x30,%rsp
  0x00007f8ab916099d: mov    %rax,(%rsp)
  0x00007f8ab91609a1: mov    %rsi,0x28(%rsp)
  0x00007f8ab91609a6: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91609b0: mov    %rax,0x20(%rsp)
  0x00007f8ab91609b5: mov    %rdx,0x18(%rsp)
  0x00007f8ab91609ba: mov    %ecx,0x10(%rsp)
  0x00007f8ab91609be: mov    %r8,0x8(%rsp)
  0x00007f8ab91609c3: mov    0x40(%rbx),%rcx
  0x00007f8ab91609c7: jmpq   *%rcx

AHE@0x00007f8ac812ebf0: 0xabe00000 i2c: 0x00007f8ab9160aa0 c2i: 0x00007f8ab9160bdd c2iUV: 0x00007f8ab9160bb0
i2c argument handler #90 for: static (IJ)J (599 bytes generated)
c2i argument handler starts at 0x7f8ab9160bdd
  0x00007f8ab9160aa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9160aa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9160aae: cmp    %r11,%rax
  0x00007f8ab9160ab1: jbe    0x00007f8ab9160aca
  0x00007f8ab9160ab7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9160ac1: cmp    %r11,%rax
  0x00007f8ab9160ac4: jb     0x00007f8ab9160b8d
  0x00007f8ab9160aca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9160ad4: cmp    %r11,%rax
  0x00007f8ab9160ad7: jbe    0x00007f8ab9160af0
  0x00007f8ab9160add: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9160ae7: cmp    %r11,%rax
  0x00007f8ab9160aea: jb     0x00007f8ab9160b8d
  0x00007f8ab9160af0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9160afa: cmp    %r11,%rax
  0x00007f8ab9160afd: jbe    0x00007f8ab9160b16
  0x00007f8ab9160b03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9160b0d: cmp    %r11,%rax
  0x00007f8ab9160b10: jb     0x00007f8ab9160b8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9160b16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9160b1b: sub    $0x80,%rsp
  0x00007f8ab9160b22: mov    %rax,0x78(%rsp)
  0x00007f8ab9160b27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9160b2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9160b31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9160b36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9160b3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9160b40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9160b45: mov    %r8,0x38(%rsp)
  0x00007f8ab9160b4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9160b4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9160b54: mov    %r11,0x20(%rsp)
  0x00007f8ab9160b59: mov    %r12,0x18(%rsp)
  0x00007f8ab9160b5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9160b63: mov    %r14,0x8(%rsp)
  0x00007f8ab9160b68: mov    %r15,(%rsp)
  0x00007f8ab9160b6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9160b76: movabs $0x7f8ab9160b16,%rsi
  0x00007f8ab9160b80: mov    %rsp,%rdx
  0x00007f8ab9160b83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160b87: callq  0x00007f8aceddb9fa
  0x00007f8ab9160b8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9160b8d: mov    %rsp,%r11
  0x00007f8ab9160b90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160b94: push   %rax
  0x00007f8ab9160b95: mov    %r11,%rax
  0x00007f8ab9160b98: mov    0x50(%rbx),%r11
  0x00007f8ab9160b9c: mov    0x18(%rax),%esi
  0x00007f8ab9160b9f: mov    0x8(%rax),%rdx
  0x00007f8ab9160ba3: mov    %rbx,0x258(%r15)
  0x00007f8ab9160baa: mov    %rbx,%rax
  0x00007f8ab9160bad: jmpq   *%r11
  0x00007f8ab9160bb0: mov    0x8(%rsi),%ebx
  0x00007f8ab9160bb3: shl    $0x3,%rbx
  0x00007f8ab9160bb7: cmp    0x10(%rax),%rbx
  0x00007f8ab9160bbb: mov    0x8(%rax),%rbx
  0x00007f8ab9160bbf: je     0x00007f8ab9160bca
  0x00007f8ab9160bc5: jmpq   0x00007f8ab9105c40
  0x00007f8ab9160bca: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9160bd2: je     0x00007f8ab9160ccd
  0x00007f8ab9160bd8: jmpq   0x00007f8ab9105c40
  0x00007f8ab9160bdd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9160be5: je     0x00007f8ab9160ccd
  0x00007f8ab9160beb: mov    %rsp,%r13
  0x00007f8ab9160bee: mov    (%rsp),%rax
  0x00007f8ab9160bf2: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160bf6: pushfq 
  0x00007f8ab9160bf7: sub    $0x8,%rsp
  0x00007f8ab9160bfb: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9160c00: sub    $0x80,%rsp
  0x00007f8ab9160c07: mov    %rax,0x78(%rsp)
  0x00007f8ab9160c0c: mov    %rcx,0x70(%rsp)
  0x00007f8ab9160c11: mov    %rdx,0x68(%rsp)
  0x00007f8ab9160c16: mov    %rbx,0x60(%rsp)
  0x00007f8ab9160c1b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9160c20: mov    %rsi,0x48(%rsp)
  0x00007f8ab9160c25: mov    %rdi,0x40(%rsp)
  0x00007f8ab9160c2a: mov    %r8,0x38(%rsp)
  0x00007f8ab9160c2f: mov    %r9,0x30(%rsp)
  0x00007f8ab9160c34: mov    %r10,0x28(%rsp)
  0x00007f8ab9160c39: mov    %r11,0x20(%rsp)
  0x00007f8ab9160c3e: mov    %r12,0x18(%rsp)
  0x00007f8ab9160c43: mov    %r13,0x10(%rsp)
  0x00007f8ab9160c48: mov    %r14,0x8(%rsp)
  0x00007f8ab9160c4d: mov    %r15,(%rsp)
  0x00007f8ab9160c51: sub    $0x200,%rsp
  0x00007f8ab9160c58: fxsave64 (%rsp)
  0x00007f8ab9160c5d: mov    %rbx,%rdi
  0x00007f8ab9160c60: mov    %rax,%rsi
  0x00007f8ab9160c63: callq  0x00007f8acef8bbca
  0x00007f8ab9160c68: fxrstor64 (%rsp)
  0x00007f8ab9160c6d: add    $0x200,%rsp
  0x00007f8ab9160c74: mov    (%rsp),%r15
  0x00007f8ab9160c78: mov    0x8(%rsp),%r14
  0x00007f8ab9160c7d: mov    0x10(%rsp),%r13
  0x00007f8ab9160c82: mov    0x18(%rsp),%r12
  0x00007f8ab9160c87: mov    0x20(%rsp),%r11
  0x00007f8ab9160c8c: mov    0x28(%rsp),%r10
  0x00007f8ab9160c91: mov    0x30(%rsp),%r9
  0x00007f8ab9160c96: mov    0x38(%rsp),%r8
  0x00007f8ab9160c9b: mov    0x40(%rsp),%rdi
  0x00007f8ab9160ca0: mov    0x48(%rsp),%rsi
  0x00007f8ab9160ca5: mov    0x50(%rsp),%rbp
  0x00007f8ab9160caa: mov    0x60(%rsp),%rbx
  0x00007f8ab9160caf: mov    0x68(%rsp),%rdx
  0x00007f8ab9160cb4: mov    0x70(%rsp),%rcx
  0x00007f8ab9160cb9: mov    0x78(%rsp),%rax
  0x00007f8ab9160cbe: add    $0x80,%rsp
  0x00007f8ab9160cc5: add    $0x8,%rsp
  0x00007f8ab9160cc9: popfq  
  0x00007f8ab9160cca: mov    %r13,%rsp
  0x00007f8ab9160ccd: pop    %rax
  0x00007f8ab9160cce: mov    %rsp,%r13
  0x00007f8ab9160cd1: sub    $0x20,%rsp
  0x00007f8ab9160cd5: mov    %rax,(%rsp)
  0x00007f8ab9160cd9: mov    %esi,0x18(%rsp)
  0x00007f8ab9160cdd: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9160ce7: mov    %rax,0x10(%rsp)
  0x00007f8ab9160cec: mov    %rdx,0x8(%rsp)
  0x00007f8ab9160cf1: mov    0x40(%rbx),%rcx
  0x00007f8ab9160cf5: jmpq   *%rcx

AHE@0x00007f8ac812ec38: 0xaabaa000 i2c: 0x00007f8ab9160da0 c2i: 0x00007f8ab9160ee8 c2iUV: 0x00007f8ab9160ebb
i2c argument handler #91 for: static (II[CII)I (609 bytes generated)
c2i argument handler starts at 0x7f8ab9160ee8
  0x00007f8ab9160da0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9160da4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9160dae: cmp    %r11,%rax
  0x00007f8ab9160db1: jbe    0x00007f8ab9160dca
  0x00007f8ab9160db7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9160dc1: cmp    %r11,%rax
  0x00007f8ab9160dc4: jb     0x00007f8ab9160e8d
  0x00007f8ab9160dca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9160dd4: cmp    %r11,%rax
  0x00007f8ab9160dd7: jbe    0x00007f8ab9160df0
  0x00007f8ab9160ddd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9160de7: cmp    %r11,%rax
  0x00007f8ab9160dea: jb     0x00007f8ab9160e8d
  0x00007f8ab9160df0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9160dfa: cmp    %r11,%rax
  0x00007f8ab9160dfd: jbe    0x00007f8ab9160e16
  0x00007f8ab9160e03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9160e0d: cmp    %r11,%rax
  0x00007f8ab9160e10: jb     0x00007f8ab9160e8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9160e16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9160e1b: sub    $0x80,%rsp
  0x00007f8ab9160e22: mov    %rax,0x78(%rsp)
  0x00007f8ab9160e27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9160e2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9160e31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9160e36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9160e3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9160e40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9160e45: mov    %r8,0x38(%rsp)
  0x00007f8ab9160e4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9160e4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9160e54: mov    %r11,0x20(%rsp)
  0x00007f8ab9160e59: mov    %r12,0x18(%rsp)
  0x00007f8ab9160e5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9160e63: mov    %r14,0x8(%rsp)
  0x00007f8ab9160e68: mov    %r15,(%rsp)
  0x00007f8ab9160e6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9160e76: movabs $0x7f8ab9160e16,%rsi
  0x00007f8ab9160e80: mov    %rsp,%rdx
  0x00007f8ab9160e83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160e87: callq  0x00007f8aceddb9fa
  0x00007f8ab9160e8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9160e8d: mov    %rsp,%r11
  0x00007f8ab9160e90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160e94: push   %rax
  0x00007f8ab9160e95: mov    %r11,%rax
  0x00007f8ab9160e98: mov    0x50(%rbx),%r11
  0x00007f8ab9160e9c: mov    0x28(%rax),%esi
  0x00007f8ab9160e9f: mov    0x20(%rax),%edx
  0x00007f8ab9160ea2: mov    0x18(%rax),%rcx
  0x00007f8ab9160ea6: mov    0x10(%rax),%r8d
  0x00007f8ab9160eaa: mov    0x8(%rax),%r9d
  0x00007f8ab9160eae: mov    %rbx,0x258(%r15)
  0x00007f8ab9160eb5: mov    %rbx,%rax
  0x00007f8ab9160eb8: jmpq   *%r11
  0x00007f8ab9160ebb: mov    0x8(%rsi),%ebx
  0x00007f8ab9160ebe: shl    $0x3,%rbx
  0x00007f8ab9160ec2: cmp    0x10(%rax),%rbx
  0x00007f8ab9160ec6: mov    0x8(%rax),%rbx
  0x00007f8ab9160eca: je     0x00007f8ab9160ed5
  0x00007f8ab9160ed0: jmpq   0x00007f8ab9105c40
  0x00007f8ab9160ed5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9160edd: je     0x00007f8ab9160fd8
  0x00007f8ab9160ee3: jmpq   0x00007f8ab9105c40
  0x00007f8ab9160ee8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9160ef0: je     0x00007f8ab9160fd8
  0x00007f8ab9160ef6: mov    %rsp,%r13
  0x00007f8ab9160ef9: mov    (%rsp),%rax
  0x00007f8ab9160efd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9160f01: pushfq 
  0x00007f8ab9160f02: sub    $0x8,%rsp
  0x00007f8ab9160f06: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9160f0b: sub    $0x80,%rsp
  0x00007f8ab9160f12: mov    %rax,0x78(%rsp)
  0x00007f8ab9160f17: mov    %rcx,0x70(%rsp)
  0x00007f8ab9160f1c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9160f21: mov    %rbx,0x60(%rsp)
  0x00007f8ab9160f26: mov    %rbp,0x50(%rsp)
  0x00007f8ab9160f2b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9160f30: mov    %rdi,0x40(%rsp)
  0x00007f8ab9160f35: mov    %r8,0x38(%rsp)
  0x00007f8ab9160f3a: mov    %r9,0x30(%rsp)
  0x00007f8ab9160f3f: mov    %r10,0x28(%rsp)
  0x00007f8ab9160f44: mov    %r11,0x20(%rsp)
  0x00007f8ab9160f49: mov    %r12,0x18(%rsp)
  0x00007f8ab9160f4e: mov    %r13,0x10(%rsp)
  0x00007f8ab9160f53: mov    %r14,0x8(%rsp)
  0x00007f8ab9160f58: mov    %r15,(%rsp)
  0x00007f8ab9160f5c: sub    $0x200,%rsp
  0x00007f8ab9160f63: fxsave64 (%rsp)
  0x00007f8ab9160f68: mov    %rbx,%rdi
  0x00007f8ab9160f6b: mov    %rax,%rsi
  0x00007f8ab9160f6e: callq  0x00007f8acef8bbca
  0x00007f8ab9160f73: fxrstor64 (%rsp)
  0x00007f8ab9160f78: add    $0x200,%rsp
  0x00007f8ab9160f7f: mov    (%rsp),%r15
  0x00007f8ab9160f83: mov    0x8(%rsp),%r14
  0x00007f8ab9160f88: mov    0x10(%rsp),%r13
  0x00007f8ab9160f8d: mov    0x18(%rsp),%r12
  0x00007f8ab9160f92: mov    0x20(%rsp),%r11
  0x00007f8ab9160f97: mov    0x28(%rsp),%r10
  0x00007f8ab9160f9c: mov    0x30(%rsp),%r9
  0x00007f8ab9160fa1: mov    0x38(%rsp),%r8
  0x00007f8ab9160fa6: mov    0x40(%rsp),%rdi
  0x00007f8ab9160fab: mov    0x48(%rsp),%rsi
  0x00007f8ab9160fb0: mov    0x50(%rsp),%rbp
  0x00007f8ab9160fb5: mov    0x60(%rsp),%rbx
  0x00007f8ab9160fba: mov    0x68(%rsp),%rdx
  0x00007f8ab9160fbf: mov    0x70(%rsp),%rcx
  0x00007f8ab9160fc4: mov    0x78(%rsp),%rax
  0x00007f8ab9160fc9: add    $0x80,%rsp
  0x00007f8ab9160fd0: add    $0x8,%rsp
  0x00007f8ab9160fd4: popfq  
  0x00007f8ab9160fd5: mov    %r13,%rsp
  0x00007f8ab9160fd8: pop    %rax
  0x00007f8ab9160fd9: mov    %rsp,%r13
  0x00007f8ab9160fdc: sub    $0x30,%rsp
  0x00007f8ab9160fe0: mov    %rax,(%rsp)
  0x00007f8ab9160fe4: mov    %esi,0x28(%rsp)
  0x00007f8ab9160fe8: mov    %edx,0x20(%rsp)
  0x00007f8ab9160fec: mov    %rcx,0x18(%rsp)
  0x00007f8ab9160ff1: mov    %r8d,0x10(%rsp)
  0x00007f8ab9160ff6: mov    %r9d,0x8(%rsp)
  0x00007f8ab9160ffb: mov    0x40(%rbx),%rcx
  0x00007f8ab9160fff: jmpq   *%rcx

AHE@0x00007f8ac812ec80: 0xaab00000 i2c: 0x00007f8ab91610e0 c2i: 0x00007f8ab9161220 c2iUV: 0x00007f8ab91611f3
i2c argument handler #92 for: static (II[C)V (591 bytes generated)
c2i argument handler starts at 0x7f8ab9161220
  0x00007f8ab91610e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91610e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91610ee: cmp    %r11,%rax
  0x00007f8ab91610f1: jbe    0x00007f8ab916110a
  0x00007f8ab91610f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9161101: cmp    %r11,%rax
  0x00007f8ab9161104: jb     0x00007f8ab91611cd
  0x00007f8ab916110a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9161114: cmp    %r11,%rax
  0x00007f8ab9161117: jbe    0x00007f8ab9161130
  0x00007f8ab916111d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9161127: cmp    %r11,%rax
  0x00007f8ab916112a: jb     0x00007f8ab91611cd
  0x00007f8ab9161130: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916113a: cmp    %r11,%rax
  0x00007f8ab916113d: jbe    0x00007f8ab9161156
  0x00007f8ab9161143: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916114d: cmp    %r11,%rax
  0x00007f8ab9161150: jb     0x00007f8ab91611cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9161156: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916115b: sub    $0x80,%rsp
  0x00007f8ab9161162: mov    %rax,0x78(%rsp)
  0x00007f8ab9161167: mov    %rcx,0x70(%rsp)
  0x00007f8ab916116c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161171: mov    %rbx,0x60(%rsp)
  0x00007f8ab9161176: mov    %rbp,0x50(%rsp)
  0x00007f8ab916117b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161180: mov    %rdi,0x40(%rsp)
  0x00007f8ab9161185: mov    %r8,0x38(%rsp)
  0x00007f8ab916118a: mov    %r9,0x30(%rsp)
  0x00007f8ab916118f: mov    %r10,0x28(%rsp)
  0x00007f8ab9161194: mov    %r11,0x20(%rsp)
  0x00007f8ab9161199: mov    %r12,0x18(%rsp)
  0x00007f8ab916119e: mov    %r13,0x10(%rsp)
  0x00007f8ab91611a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91611a8: mov    %r15,(%rsp)
  0x00007f8ab91611ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91611b6: movabs $0x7f8ab9161156,%rsi
  0x00007f8ab91611c0: mov    %rsp,%rdx
  0x00007f8ab91611c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91611c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91611cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91611cd: mov    %rsp,%r11
  0x00007f8ab91611d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91611d4: push   %rax
  0x00007f8ab91611d5: mov    %r11,%rax
  0x00007f8ab91611d8: mov    0x50(%rbx),%r11
  0x00007f8ab91611dc: mov    0x18(%rax),%esi
  0x00007f8ab91611df: mov    0x10(%rax),%edx
  0x00007f8ab91611e2: mov    0x8(%rax),%rcx
  0x00007f8ab91611e6: mov    %rbx,0x258(%r15)
  0x00007f8ab91611ed: mov    %rbx,%rax
  0x00007f8ab91611f0: jmpq   *%r11
  0x00007f8ab91611f3: mov    0x8(%rsi),%ebx
  0x00007f8ab91611f6: shl    $0x3,%rbx
  0x00007f8ab91611fa: cmp    0x10(%rax),%rbx
  0x00007f8ab91611fe: mov    0x8(%rax),%rbx
  0x00007f8ab9161202: je     0x00007f8ab916120d
  0x00007f8ab9161208: jmpq   0x00007f8ab9105c40
  0x00007f8ab916120d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161215: je     0x00007f8ab9161310
  0x00007f8ab916121b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9161220: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161228: je     0x00007f8ab9161310
  0x00007f8ab916122e: mov    %rsp,%r13
  0x00007f8ab9161231: mov    (%rsp),%rax
  0x00007f8ab9161235: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161239: pushfq 
  0x00007f8ab916123a: sub    $0x8,%rsp
  0x00007f8ab916123e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9161243: sub    $0x80,%rsp
  0x00007f8ab916124a: mov    %rax,0x78(%rsp)
  0x00007f8ab916124f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9161254: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161259: mov    %rbx,0x60(%rsp)
  0x00007f8ab916125e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9161263: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161268: mov    %rdi,0x40(%rsp)
  0x00007f8ab916126d: mov    %r8,0x38(%rsp)
  0x00007f8ab9161272: mov    %r9,0x30(%rsp)
  0x00007f8ab9161277: mov    %r10,0x28(%rsp)
  0x00007f8ab916127c: mov    %r11,0x20(%rsp)
  0x00007f8ab9161281: mov    %r12,0x18(%rsp)
  0x00007f8ab9161286: mov    %r13,0x10(%rsp)
  0x00007f8ab916128b: mov    %r14,0x8(%rsp)
  0x00007f8ab9161290: mov    %r15,(%rsp)
  0x00007f8ab9161294: sub    $0x200,%rsp
  0x00007f8ab916129b: fxsave64 (%rsp)
  0x00007f8ab91612a0: mov    %rbx,%rdi
  0x00007f8ab91612a3: mov    %rax,%rsi
  0x00007f8ab91612a6: callq  0x00007f8acef8bbca
  0x00007f8ab91612ab: fxrstor64 (%rsp)
  0x00007f8ab91612b0: add    $0x200,%rsp
  0x00007f8ab91612b7: mov    (%rsp),%r15
  0x00007f8ab91612bb: mov    0x8(%rsp),%r14
  0x00007f8ab91612c0: mov    0x10(%rsp),%r13
  0x00007f8ab91612c5: mov    0x18(%rsp),%r12
  0x00007f8ab91612ca: mov    0x20(%rsp),%r11
  0x00007f8ab91612cf: mov    0x28(%rsp),%r10
  0x00007f8ab91612d4: mov    0x30(%rsp),%r9
  0x00007f8ab91612d9: mov    0x38(%rsp),%r8
  0x00007f8ab91612de: mov    0x40(%rsp),%rdi
  0x00007f8ab91612e3: mov    0x48(%rsp),%rsi
  0x00007f8ab91612e8: mov    0x50(%rsp),%rbp
  0x00007f8ab91612ed: mov    0x60(%rsp),%rbx
  0x00007f8ab91612f2: mov    0x68(%rsp),%rdx
  0x00007f8ab91612f7: mov    0x70(%rsp),%rcx
  0x00007f8ab91612fc: mov    0x78(%rsp),%rax
  0x00007f8ab9161301: add    $0x80,%rsp
  0x00007f8ab9161308: add    $0x8,%rsp
  0x00007f8ab916130c: popfq  
  0x00007f8ab916130d: mov    %r13,%rsp
  0x00007f8ab9161310: pop    %rax
  0x00007f8ab9161311: mov    %rsp,%r13
  0x00007f8ab9161314: sub    $0x20,%rsp
  0x00007f8ab9161318: mov    %rax,(%rsp)
  0x00007f8ab916131c: mov    %esi,0x18(%rsp)
  0x00007f8ab9161320: mov    %edx,0x10(%rsp)
  0x00007f8ab9161324: mov    %rcx,0x8(%rsp)
  0x00007f8ab9161329: mov    0x40(%rbx),%rcx
  0x00007f8ab916132d: jmpq   *%rcx

AHE@0x00007f8ac812ecc8: 0xbbbaab00 i2c: 0x00007f8ab91613e0 c2i: 0x00007f8ab916152e c2iUV: 0x00007f8ab9161501
i2c argument handler #93 for: receiver (Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; (622 bytes generated)
c2i argument handler starts at 0x7f8ab916152e
  0x00007f8ab91613e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91613e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91613ee: cmp    %r11,%rax
  0x00007f8ab91613f1: jbe    0x00007f8ab916140a
  0x00007f8ab91613f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9161401: cmp    %r11,%rax
  0x00007f8ab9161404: jb     0x00007f8ab91614cd
  0x00007f8ab916140a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9161414: cmp    %r11,%rax
  0x00007f8ab9161417: jbe    0x00007f8ab9161430
  0x00007f8ab916141d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9161427: cmp    %r11,%rax
  0x00007f8ab916142a: jb     0x00007f8ab91614cd
  0x00007f8ab9161430: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916143a: cmp    %r11,%rax
  0x00007f8ab916143d: jbe    0x00007f8ab9161456
  0x00007f8ab9161443: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916144d: cmp    %r11,%rax
  0x00007f8ab9161450: jb     0x00007f8ab91614cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9161456: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916145b: sub    $0x80,%rsp
  0x00007f8ab9161462: mov    %rax,0x78(%rsp)
  0x00007f8ab9161467: mov    %rcx,0x70(%rsp)
  0x00007f8ab916146c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161471: mov    %rbx,0x60(%rsp)
  0x00007f8ab9161476: mov    %rbp,0x50(%rsp)
  0x00007f8ab916147b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161480: mov    %rdi,0x40(%rsp)
  0x00007f8ab9161485: mov    %r8,0x38(%rsp)
  0x00007f8ab916148a: mov    %r9,0x30(%rsp)
  0x00007f8ab916148f: mov    %r10,0x28(%rsp)
  0x00007f8ab9161494: mov    %r11,0x20(%rsp)
  0x00007f8ab9161499: mov    %r12,0x18(%rsp)
  0x00007f8ab916149e: mov    %r13,0x10(%rsp)
  0x00007f8ab91614a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91614a8: mov    %r15,(%rsp)
  0x00007f8ab91614ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91614b6: movabs $0x7f8ab9161456,%rsi
  0x00007f8ab91614c0: mov    %rsp,%rdx
  0x00007f8ab91614c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91614c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91614cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91614cd: mov    %rsp,%r11
  0x00007f8ab91614d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91614d4: push   %rax
  0x00007f8ab91614d5: mov    %r11,%rax
  0x00007f8ab91614d8: mov    0x50(%rbx),%r11
  0x00007f8ab91614dc: mov    0x30(%rax),%rsi
  0x00007f8ab91614e0: mov    0x28(%rax),%rdx
  0x00007f8ab91614e4: mov    0x20(%rax),%rcx
  0x00007f8ab91614e8: mov    0x18(%rax),%r8d
  0x00007f8ab91614ec: mov    0x10(%rax),%r9d
  0x00007f8ab91614f0: mov    0x8(%rax),%rdi
  0x00007f8ab91614f4: mov    %rbx,0x258(%r15)
  0x00007f8ab91614fb: mov    %rbx,%rax
  0x00007f8ab91614fe: jmpq   *%r11
  0x00007f8ab9161501: mov    0x8(%rsi),%ebx
  0x00007f8ab9161504: shl    $0x3,%rbx
  0x00007f8ab9161508: cmp    0x10(%rax),%rbx
  0x00007f8ab916150c: mov    0x8(%rax),%rbx
  0x00007f8ab9161510: je     0x00007f8ab916151b
  0x00007f8ab9161516: jmpq   0x00007f8ab9105c40
  0x00007f8ab916151b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161523: je     0x00007f8ab916161e
  0x00007f8ab9161529: jmpq   0x00007f8ab9105c40
  0x00007f8ab916152e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161536: je     0x00007f8ab916161e
  0x00007f8ab916153c: mov    %rsp,%r13
  0x00007f8ab916153f: mov    (%rsp),%rax
  0x00007f8ab9161543: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161547: pushfq 
  0x00007f8ab9161548: sub    $0x8,%rsp
  0x00007f8ab916154c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9161551: sub    $0x80,%rsp
  0x00007f8ab9161558: mov    %rax,0x78(%rsp)
  0x00007f8ab916155d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9161562: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161567: mov    %rbx,0x60(%rsp)
  0x00007f8ab916156c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9161571: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161576: mov    %rdi,0x40(%rsp)
  0x00007f8ab916157b: mov    %r8,0x38(%rsp)
  0x00007f8ab9161580: mov    %r9,0x30(%rsp)
  0x00007f8ab9161585: mov    %r10,0x28(%rsp)
  0x00007f8ab916158a: mov    %r11,0x20(%rsp)
  0x00007f8ab916158f: mov    %r12,0x18(%rsp)
  0x00007f8ab9161594: mov    %r13,0x10(%rsp)
  0x00007f8ab9161599: mov    %r14,0x8(%rsp)
  0x00007f8ab916159e: mov    %r15,(%rsp)
  0x00007f8ab91615a2: sub    $0x200,%rsp
  0x00007f8ab91615a9: fxsave64 (%rsp)
  0x00007f8ab91615ae: mov    %rbx,%rdi
  0x00007f8ab91615b1: mov    %rax,%rsi
  0x00007f8ab91615b4: callq  0x00007f8acef8bbca
  0x00007f8ab91615b9: fxrstor64 (%rsp)
  0x00007f8ab91615be: add    $0x200,%rsp
  0x00007f8ab91615c5: mov    (%rsp),%r15
  0x00007f8ab91615c9: mov    0x8(%rsp),%r14
  0x00007f8ab91615ce: mov    0x10(%rsp),%r13
  0x00007f8ab91615d3: mov    0x18(%rsp),%r12
  0x00007f8ab91615d8: mov    0x20(%rsp),%r11
  0x00007f8ab91615dd: mov    0x28(%rsp),%r10
  0x00007f8ab91615e2: mov    0x30(%rsp),%r9
  0x00007f8ab91615e7: mov    0x38(%rsp),%r8
  0x00007f8ab91615ec: mov    0x40(%rsp),%rdi
  0x00007f8ab91615f1: mov    0x48(%rsp),%rsi
  0x00007f8ab91615f6: mov    0x50(%rsp),%rbp
  0x00007f8ab91615fb: mov    0x60(%rsp),%rbx
  0x00007f8ab9161600: mov    0x68(%rsp),%rdx
  0x00007f8ab9161605: mov    0x70(%rsp),%rcx
  0x00007f8ab916160a: mov    0x78(%rsp),%rax
  0x00007f8ab916160f: add    $0x80,%rsp
  0x00007f8ab9161616: add    $0x8,%rsp
  0x00007f8ab916161a: popfq  
  0x00007f8ab916161b: mov    %r13,%rsp
  0x00007f8ab916161e: pop    %rax
  0x00007f8ab916161f: mov    %rsp,%r13
  0x00007f8ab9161622: sub    $0x40,%rsp
  0x00007f8ab9161626: mov    %rax,(%rsp)
  0x00007f8ab916162a: mov    %rsi,0x30(%rsp)
  0x00007f8ab916162f: mov    %rdx,0x28(%rsp)
  0x00007f8ab9161634: mov    %rcx,0x20(%rsp)
  0x00007f8ab9161639: mov    %r8d,0x18(%rsp)
  0x00007f8ab916163e: mov    %r9d,0x10(%rsp)
  0x00007f8ab9161643: mov    %rdi,0x8(%rsp)
  0x00007f8ab9161648: mov    0x40(%rbx),%rcx
  0x00007f8ab916164c: jmpq   *%rcx

AHE@0x00007f8ac812ed10: 0xaba00000 i2c: 0x00007f8ab9161720 c2i: 0x00007f8ab9161860 c2iUV: 0x00007f8ab9161833
i2c argument handler #94 for: static (I[CI)I (591 bytes generated)
c2i argument handler starts at 0x7f8ab9161860
  0x00007f8ab9161720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9161724: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916172e: cmp    %r11,%rax
  0x00007f8ab9161731: jbe    0x00007f8ab916174a
  0x00007f8ab9161737: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9161741: cmp    %r11,%rax
  0x00007f8ab9161744: jb     0x00007f8ab916180d
  0x00007f8ab916174a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9161754: cmp    %r11,%rax
  0x00007f8ab9161757: jbe    0x00007f8ab9161770
  0x00007f8ab916175d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9161767: cmp    %r11,%rax
  0x00007f8ab916176a: jb     0x00007f8ab916180d
  0x00007f8ab9161770: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916177a: cmp    %r11,%rax
  0x00007f8ab916177d: jbe    0x00007f8ab9161796
  0x00007f8ab9161783: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916178d: cmp    %r11,%rax
  0x00007f8ab9161790: jb     0x00007f8ab916180d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9161796: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916179b: sub    $0x80,%rsp
  0x00007f8ab91617a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91617a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91617ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91617b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91617b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91617bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91617c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91617c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91617ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91617cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91617d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91617d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91617de: mov    %r13,0x10(%rsp)
  0x00007f8ab91617e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91617e8: mov    %r15,(%rsp)
  0x00007f8ab91617ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91617f6: movabs $0x7f8ab9161796,%rsi
  0x00007f8ab9161800: mov    %rsp,%rdx
  0x00007f8ab9161803: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161807: callq  0x00007f8aceddb9fa
  0x00007f8ab916180c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916180d: mov    %rsp,%r11
  0x00007f8ab9161810: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161814: push   %rax
  0x00007f8ab9161815: mov    %r11,%rax
  0x00007f8ab9161818: mov    0x50(%rbx),%r11
  0x00007f8ab916181c: mov    0x18(%rax),%esi
  0x00007f8ab916181f: mov    0x10(%rax),%rdx
  0x00007f8ab9161823: mov    0x8(%rax),%ecx
  0x00007f8ab9161826: mov    %rbx,0x258(%r15)
  0x00007f8ab916182d: mov    %rbx,%rax
  0x00007f8ab9161830: jmpq   *%r11
  0x00007f8ab9161833: mov    0x8(%rsi),%ebx
  0x00007f8ab9161836: shl    $0x3,%rbx
  0x00007f8ab916183a: cmp    0x10(%rax),%rbx
  0x00007f8ab916183e: mov    0x8(%rax),%rbx
  0x00007f8ab9161842: je     0x00007f8ab916184d
  0x00007f8ab9161848: jmpq   0x00007f8ab9105c40
  0x00007f8ab916184d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161855: je     0x00007f8ab9161950
  0x00007f8ab916185b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9161860: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161868: je     0x00007f8ab9161950
  0x00007f8ab916186e: mov    %rsp,%r13
  0x00007f8ab9161871: mov    (%rsp),%rax
  0x00007f8ab9161875: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161879: pushfq 
  0x00007f8ab916187a: sub    $0x8,%rsp
  0x00007f8ab916187e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9161883: sub    $0x80,%rsp
  0x00007f8ab916188a: mov    %rax,0x78(%rsp)
  0x00007f8ab916188f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9161894: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161899: mov    %rbx,0x60(%rsp)
  0x00007f8ab916189e: mov    %rbp,0x50(%rsp)
  0x00007f8ab91618a3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91618a8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91618ad: mov    %r8,0x38(%rsp)
  0x00007f8ab91618b2: mov    %r9,0x30(%rsp)
  0x00007f8ab91618b7: mov    %r10,0x28(%rsp)
  0x00007f8ab91618bc: mov    %r11,0x20(%rsp)
  0x00007f8ab91618c1: mov    %r12,0x18(%rsp)
  0x00007f8ab91618c6: mov    %r13,0x10(%rsp)
  0x00007f8ab91618cb: mov    %r14,0x8(%rsp)
  0x00007f8ab91618d0: mov    %r15,(%rsp)
  0x00007f8ab91618d4: sub    $0x200,%rsp
  0x00007f8ab91618db: fxsave64 (%rsp)
  0x00007f8ab91618e0: mov    %rbx,%rdi
  0x00007f8ab91618e3: mov    %rax,%rsi
  0x00007f8ab91618e6: callq  0x00007f8acef8bbca
  0x00007f8ab91618eb: fxrstor64 (%rsp)
  0x00007f8ab91618f0: add    $0x200,%rsp
  0x00007f8ab91618f7: mov    (%rsp),%r15
  0x00007f8ab91618fb: mov    0x8(%rsp),%r14
  0x00007f8ab9161900: mov    0x10(%rsp),%r13
  0x00007f8ab9161905: mov    0x18(%rsp),%r12
  0x00007f8ab916190a: mov    0x20(%rsp),%r11
  0x00007f8ab916190f: mov    0x28(%rsp),%r10
  0x00007f8ab9161914: mov    0x30(%rsp),%r9
  0x00007f8ab9161919: mov    0x38(%rsp),%r8
  0x00007f8ab916191e: mov    0x40(%rsp),%rdi
  0x00007f8ab9161923: mov    0x48(%rsp),%rsi
  0x00007f8ab9161928: mov    0x50(%rsp),%rbp
  0x00007f8ab916192d: mov    0x60(%rsp),%rbx
  0x00007f8ab9161932: mov    0x68(%rsp),%rdx
  0x00007f8ab9161937: mov    0x70(%rsp),%rcx
  0x00007f8ab916193c: mov    0x78(%rsp),%rax
  0x00007f8ab9161941: add    $0x80,%rsp
  0x00007f8ab9161948: add    $0x8,%rsp
  0x00007f8ab916194c: popfq  
  0x00007f8ab916194d: mov    %r13,%rsp
  0x00007f8ab9161950: pop    %rax
  0x00007f8ab9161951: mov    %rsp,%r13
  0x00007f8ab9161954: sub    $0x20,%rsp
  0x00007f8ab9161958: mov    %rax,(%rsp)
  0x00007f8ab916195c: mov    %esi,0x18(%rsp)
  0x00007f8ab9161960: mov    %rdx,0x10(%rsp)
  0x00007f8ab9161965: mov    %ecx,0x8(%rsp)
  0x00007f8ab9161969: mov    0x40(%rbx),%rcx
  0x00007f8ab916196d: jmpq   *%rcx

AHE@0x00007f8ac812ed58: 0xabebe000 i2c: 0x00007f8ab9161a20 c2i: 0x00007f8ab9161b61 c2iUV: 0x00007f8ab9161b34
i2c argument handler #95 for: static (CJJ)Z (623 bytes generated)
c2i argument handler starts at 0x7f8ab9161b61
  0x00007f8ab9161a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9161a24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9161a2e: cmp    %r11,%rax
  0x00007f8ab9161a31: jbe    0x00007f8ab9161a4a
  0x00007f8ab9161a37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9161a41: cmp    %r11,%rax
  0x00007f8ab9161a44: jb     0x00007f8ab9161b0d
  0x00007f8ab9161a4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9161a54: cmp    %r11,%rax
  0x00007f8ab9161a57: jbe    0x00007f8ab9161a70
  0x00007f8ab9161a5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9161a67: cmp    %r11,%rax
  0x00007f8ab9161a6a: jb     0x00007f8ab9161b0d
  0x00007f8ab9161a70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9161a7a: cmp    %r11,%rax
  0x00007f8ab9161a7d: jbe    0x00007f8ab9161a96
  0x00007f8ab9161a83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9161a8d: cmp    %r11,%rax
  0x00007f8ab9161a90: jb     0x00007f8ab9161b0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9161a96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9161a9b: sub    $0x80,%rsp
  0x00007f8ab9161aa2: mov    %rax,0x78(%rsp)
  0x00007f8ab9161aa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9161aac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161ab1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9161ab6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9161abb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161ac0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9161ac5: mov    %r8,0x38(%rsp)
  0x00007f8ab9161aca: mov    %r9,0x30(%rsp)
  0x00007f8ab9161acf: mov    %r10,0x28(%rsp)
  0x00007f8ab9161ad4: mov    %r11,0x20(%rsp)
  0x00007f8ab9161ad9: mov    %r12,0x18(%rsp)
  0x00007f8ab9161ade: mov    %r13,0x10(%rsp)
  0x00007f8ab9161ae3: mov    %r14,0x8(%rsp)
  0x00007f8ab9161ae8: mov    %r15,(%rsp)
  0x00007f8ab9161aec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9161af6: movabs $0x7f8ab9161a96,%rsi
  0x00007f8ab9161b00: mov    %rsp,%rdx
  0x00007f8ab9161b03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161b07: callq  0x00007f8aceddb9fa
  0x00007f8ab9161b0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9161b0d: mov    %rsp,%r11
  0x00007f8ab9161b10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161b14: push   %rax
  0x00007f8ab9161b15: mov    %r11,%rax
  0x00007f8ab9161b18: mov    0x50(%rbx),%r11
  0x00007f8ab9161b1c: mov    0x28(%rax),%esi
  0x00007f8ab9161b1f: mov    0x18(%rax),%rdx
  0x00007f8ab9161b23: mov    0x8(%rax),%rcx
  0x00007f8ab9161b27: mov    %rbx,0x258(%r15)
  0x00007f8ab9161b2e: mov    %rbx,%rax
  0x00007f8ab9161b31: jmpq   *%r11
  0x00007f8ab9161b34: mov    0x8(%rsi),%ebx
  0x00007f8ab9161b37: shl    $0x3,%rbx
  0x00007f8ab9161b3b: cmp    0x10(%rax),%rbx
  0x00007f8ab9161b3f: mov    0x8(%rax),%rbx
  0x00007f8ab9161b43: je     0x00007f8ab9161b4e
  0x00007f8ab9161b49: jmpq   0x00007f8ab9105c40
  0x00007f8ab9161b4e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161b56: je     0x00007f8ab9161c51
  0x00007f8ab9161b5c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9161b61: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161b69: je     0x00007f8ab9161c51
  0x00007f8ab9161b6f: mov    %rsp,%r13
  0x00007f8ab9161b72: mov    (%rsp),%rax
  0x00007f8ab9161b76: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161b7a: pushfq 
  0x00007f8ab9161b7b: sub    $0x8,%rsp
  0x00007f8ab9161b7f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9161b84: sub    $0x80,%rsp
  0x00007f8ab9161b8b: mov    %rax,0x78(%rsp)
  0x00007f8ab9161b90: mov    %rcx,0x70(%rsp)
  0x00007f8ab9161b95: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161b9a: mov    %rbx,0x60(%rsp)
  0x00007f8ab9161b9f: mov    %rbp,0x50(%rsp)
  0x00007f8ab9161ba4: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161ba9: mov    %rdi,0x40(%rsp)
  0x00007f8ab9161bae: mov    %r8,0x38(%rsp)
  0x00007f8ab9161bb3: mov    %r9,0x30(%rsp)
  0x00007f8ab9161bb8: mov    %r10,0x28(%rsp)
  0x00007f8ab9161bbd: mov    %r11,0x20(%rsp)
  0x00007f8ab9161bc2: mov    %r12,0x18(%rsp)
  0x00007f8ab9161bc7: mov    %r13,0x10(%rsp)
  0x00007f8ab9161bcc: mov    %r14,0x8(%rsp)
  0x00007f8ab9161bd1: mov    %r15,(%rsp)
  0x00007f8ab9161bd5: sub    $0x200,%rsp
  0x00007f8ab9161bdc: fxsave64 (%rsp)
  0x00007f8ab9161be1: mov    %rbx,%rdi
  0x00007f8ab9161be4: mov    %rax,%rsi
  0x00007f8ab9161be7: callq  0x00007f8acef8bbca
  0x00007f8ab9161bec: fxrstor64 (%rsp)
  0x00007f8ab9161bf1: add    $0x200,%rsp
  0x00007f8ab9161bf8: mov    (%rsp),%r15
  0x00007f8ab9161bfc: mov    0x8(%rsp),%r14
  0x00007f8ab9161c01: mov    0x10(%rsp),%r13
  0x00007f8ab9161c06: mov    0x18(%rsp),%r12
  0x00007f8ab9161c0b: mov    0x20(%rsp),%r11
  0x00007f8ab9161c10: mov    0x28(%rsp),%r10
  0x00007f8ab9161c15: mov    0x30(%rsp),%r9
  0x00007f8ab9161c1a: mov    0x38(%rsp),%r8
  0x00007f8ab9161c1f: mov    0x40(%rsp),%rdi
  0x00007f8ab9161c24: mov    0x48(%rsp),%rsi
  0x00007f8ab9161c29: mov    0x50(%rsp),%rbp
  0x00007f8ab9161c2e: mov    0x60(%rsp),%rbx
  0x00007f8ab9161c33: mov    0x68(%rsp),%rdx
  0x00007f8ab9161c38: mov    0x70(%rsp),%rcx
  0x00007f8ab9161c3d: mov    0x78(%rsp),%rax
  0x00007f8ab9161c42: add    $0x80,%rsp
  0x00007f8ab9161c49: add    $0x8,%rsp
  0x00007f8ab9161c4d: popfq  
  0x00007f8ab9161c4e: mov    %r13,%rsp
  0x00007f8ab9161c51: pop    %rax
  0x00007f8ab9161c52: mov    %rsp,%r13
  0x00007f8ab9161c55: sub    $0x30,%rsp
  0x00007f8ab9161c59: mov    %rax,(%rsp)
  0x00007f8ab9161c5d: mov    %esi,0x28(%rsp)
  0x00007f8ab9161c61: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9161c6b: mov    %rax,0x20(%rsp)
  0x00007f8ab9161c70: mov    %rdx,0x18(%rsp)
  0x00007f8ab9161c75: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9161c7f: mov    %rax,0x10(%rsp)
  0x00007f8ab9161c84: mov    %rcx,0x8(%rsp)
  0x00007f8ab9161c89: mov    0x40(%rbx),%rcx
  0x00007f8ab9161c8d: jmpq   *%rcx

AHE@0x00007f8ac812eda0: 0xbbbbbabbb0000000 i2c: 0x00007f8ab9161d60 c2i: 0x00007f8ab9161ecc c2iUV: 0x00007f8ab9161e9f
i2c argument handler #96 for: static (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (681 bytes generated)
c2i argument handler starts at 0x7f8ab9161ecc
  0x00007f8ab9161d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9161d64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9161d6e: cmp    %r11,%rax
  0x00007f8ab9161d71: jbe    0x00007f8ab9161d8a
  0x00007f8ab9161d77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9161d81: cmp    %r11,%rax
  0x00007f8ab9161d84: jb     0x00007f8ab9161e4d
  0x00007f8ab9161d8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9161d94: cmp    %r11,%rax
  0x00007f8ab9161d97: jbe    0x00007f8ab9161db0
  0x00007f8ab9161d9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9161da7: cmp    %r11,%rax
  0x00007f8ab9161daa: jb     0x00007f8ab9161e4d
  0x00007f8ab9161db0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9161dba: cmp    %r11,%rax
  0x00007f8ab9161dbd: jbe    0x00007f8ab9161dd6
  0x00007f8ab9161dc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9161dcd: cmp    %r11,%rax
  0x00007f8ab9161dd0: jb     0x00007f8ab9161e4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9161dd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9161ddb: sub    $0x80,%rsp
  0x00007f8ab9161de2: mov    %rax,0x78(%rsp)
  0x00007f8ab9161de7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9161dec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161df1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9161df6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9161dfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161e00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9161e05: mov    %r8,0x38(%rsp)
  0x00007f8ab9161e0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9161e0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9161e14: mov    %r11,0x20(%rsp)
  0x00007f8ab9161e19: mov    %r12,0x18(%rsp)
  0x00007f8ab9161e1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9161e23: mov    %r14,0x8(%rsp)
  0x00007f8ab9161e28: mov    %r15,(%rsp)
  0x00007f8ab9161e2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9161e36: movabs $0x7f8ab9161dd6,%rsi
  0x00007f8ab9161e40: mov    %rsp,%rdx
  0x00007f8ab9161e43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161e47: callq  0x00007f8aceddb9fa
  0x00007f8ab9161e4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9161e4d: mov    %rsp,%r11
  0x00007f8ab9161e50: sub    $0x20,%rsp
  0x00007f8ab9161e54: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161e58: push   %rax
  0x00007f8ab9161e59: mov    %r11,%rax
  0x00007f8ab9161e5c: mov    0x50(%rbx),%r11
  0x00007f8ab9161e60: mov    0x48(%rax),%rsi
  0x00007f8ab9161e64: mov    0x40(%rax),%rdx
  0x00007f8ab9161e68: mov    0x38(%rax),%rcx
  0x00007f8ab9161e6c: mov    0x30(%rax),%r8
  0x00007f8ab9161e70: mov    0x28(%rax),%r9
  0x00007f8ab9161e74: mov    0x20(%rax),%edi
  0x00007f8ab9161e77: mov    0x18(%rax),%r13
  0x00007f8ab9161e7b: mov    %r13,0x8(%rsp)
  0x00007f8ab9161e80: mov    0x10(%rax),%r13
  0x00007f8ab9161e84: mov    %r13,0x10(%rsp)
  0x00007f8ab9161e89: mov    0x8(%rax),%r13
  0x00007f8ab9161e8d: mov    %r13,0x18(%rsp)
  0x00007f8ab9161e92: mov    %rbx,0x258(%r15)
  0x00007f8ab9161e99: mov    %rbx,%rax
  0x00007f8ab9161e9c: jmpq   *%r11
  0x00007f8ab9161e9f: mov    0x8(%rsi),%ebx
  0x00007f8ab9161ea2: shl    $0x3,%rbx
  0x00007f8ab9161ea6: cmp    0x10(%rax),%rbx
  0x00007f8ab9161eaa: mov    0x8(%rax),%rbx
  0x00007f8ab9161eae: je     0x00007f8ab9161eb9
  0x00007f8ab9161eb4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9161eb9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161ec1: je     0x00007f8ab9161fbc
  0x00007f8ab9161ec7: jmpq   0x00007f8ab9105c40
  0x00007f8ab9161ecc: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9161ed4: je     0x00007f8ab9161fbc
  0x00007f8ab9161eda: mov    %rsp,%r13
  0x00007f8ab9161edd: mov    (%rsp),%rax
  0x00007f8ab9161ee1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9161ee5: pushfq 
  0x00007f8ab9161ee6: sub    $0x8,%rsp
  0x00007f8ab9161eea: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9161eef: sub    $0x80,%rsp
  0x00007f8ab9161ef6: mov    %rax,0x78(%rsp)
  0x00007f8ab9161efb: mov    %rcx,0x70(%rsp)
  0x00007f8ab9161f00: mov    %rdx,0x68(%rsp)
  0x00007f8ab9161f05: mov    %rbx,0x60(%rsp)
  0x00007f8ab9161f0a: mov    %rbp,0x50(%rsp)
  0x00007f8ab9161f0f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161f14: mov    %rdi,0x40(%rsp)
  0x00007f8ab9161f19: mov    %r8,0x38(%rsp)
  0x00007f8ab9161f1e: mov    %r9,0x30(%rsp)
  0x00007f8ab9161f23: mov    %r10,0x28(%rsp)
  0x00007f8ab9161f28: mov    %r11,0x20(%rsp)
  0x00007f8ab9161f2d: mov    %r12,0x18(%rsp)
  0x00007f8ab9161f32: mov    %r13,0x10(%rsp)
  0x00007f8ab9161f37: mov    %r14,0x8(%rsp)
  0x00007f8ab9161f3c: mov    %r15,(%rsp)
  0x00007f8ab9161f40: sub    $0x200,%rsp
  0x00007f8ab9161f47: fxsave64 (%rsp)
  0x00007f8ab9161f4c: mov    %rbx,%rdi
  0x00007f8ab9161f4f: mov    %rax,%rsi
  0x00007f8ab9161f52: callq  0x00007f8acef8bbca
  0x00007f8ab9161f57: fxrstor64 (%rsp)
  0x00007f8ab9161f5c: add    $0x200,%rsp
  0x00007f8ab9161f63: mov    (%rsp),%r15
  0x00007f8ab9161f67: mov    0x8(%rsp),%r14
  0x00007f8ab9161f6c: mov    0x10(%rsp),%r13
  0x00007f8ab9161f71: mov    0x18(%rsp),%r12
  0x00007f8ab9161f76: mov    0x20(%rsp),%r11
  0x00007f8ab9161f7b: mov    0x28(%rsp),%r10
  0x00007f8ab9161f80: mov    0x30(%rsp),%r9
  0x00007f8ab9161f85: mov    0x38(%rsp),%r8
  0x00007f8ab9161f8a: mov    0x40(%rsp),%rdi
  0x00007f8ab9161f8f: mov    0x48(%rsp),%rsi
  0x00007f8ab9161f94: mov    0x50(%rsp),%rbp
  0x00007f8ab9161f99: mov    0x60(%rsp),%rbx
  0x00007f8ab9161f9e: mov    0x68(%rsp),%rdx
  0x00007f8ab9161fa3: mov    0x70(%rsp),%rcx
  0x00007f8ab9161fa8: mov    0x78(%rsp),%rax
  0x00007f8ab9161fad: add    $0x80,%rsp
  0x00007f8ab9161fb4: add    $0x8,%rsp
  0x00007f8ab9161fb8: popfq  
  0x00007f8ab9161fb9: mov    %r13,%rsp
  0x00007f8ab9161fbc: pop    %rax
  0x00007f8ab9161fbd: mov    %rsp,%r13
  0x00007f8ab9161fc0: sub    $0x50,%rsp
  0x00007f8ab9161fc4: mov    %rax,(%rsp)
  0x00007f8ab9161fc8: mov    %rsi,0x48(%rsp)
  0x00007f8ab9161fcd: mov    %rdx,0x40(%rsp)
  0x00007f8ab9161fd2: mov    %rcx,0x38(%rsp)
  0x00007f8ab9161fd7: mov    %r8,0x30(%rsp)
  0x00007f8ab9161fdc: mov    %r9,0x28(%rsp)
  0x00007f8ab9161fe1: mov    %edi,0x20(%rsp)
  0x00007f8ab9161fe5: mov    0x50(%rsp),%rax
  0x00007f8ab9161fea: mov    %rax,0x18(%rsp)
  0x00007f8ab9161fef: mov    0x58(%rsp),%rax
  0x00007f8ab9161ff4: mov    %rax,0x10(%rsp)
  0x00007f8ab9161ff9: mov    0x60(%rsp),%rax
  0x00007f8ab9161ffe: mov    %rax,0x8(%rsp)
  0x00007f8ab9162003: mov    0x40(%rbx),%rcx
  0x00007f8ab9162007: jmpq   *%rcx

AHE@0x00007f8ac812ede8: 0xbbbbbabb i2c: 0x00007f8ab91620e0 c2i: 0x00007f8ab9162243 c2iUV: 0x00007f8ab9162216
i2c argument handler #97 for: static (Ljava/lang/StringBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (662 bytes generated)
c2i argument handler starts at 0x7f8ab9162243
  0x00007f8ab91620e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91620e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91620ee: cmp    %r11,%rax
  0x00007f8ab91620f1: jbe    0x00007f8ab916210a
  0x00007f8ab91620f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9162101: cmp    %r11,%rax
  0x00007f8ab9162104: jb     0x00007f8ab91621cd
  0x00007f8ab916210a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9162114: cmp    %r11,%rax
  0x00007f8ab9162117: jbe    0x00007f8ab9162130
  0x00007f8ab916211d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9162127: cmp    %r11,%rax
  0x00007f8ab916212a: jb     0x00007f8ab91621cd
  0x00007f8ab9162130: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916213a: cmp    %r11,%rax
  0x00007f8ab916213d: jbe    0x00007f8ab9162156
  0x00007f8ab9162143: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916214d: cmp    %r11,%rax
  0x00007f8ab9162150: jb     0x00007f8ab91621cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9162156: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916215b: sub    $0x80,%rsp
  0x00007f8ab9162162: mov    %rax,0x78(%rsp)
  0x00007f8ab9162167: mov    %rcx,0x70(%rsp)
  0x00007f8ab916216c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9162171: mov    %rbx,0x60(%rsp)
  0x00007f8ab9162176: mov    %rbp,0x50(%rsp)
  0x00007f8ab916217b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9162180: mov    %rdi,0x40(%rsp)
  0x00007f8ab9162185: mov    %r8,0x38(%rsp)
  0x00007f8ab916218a: mov    %r9,0x30(%rsp)
  0x00007f8ab916218f: mov    %r10,0x28(%rsp)
  0x00007f8ab9162194: mov    %r11,0x20(%rsp)
  0x00007f8ab9162199: mov    %r12,0x18(%rsp)
  0x00007f8ab916219e: mov    %r13,0x10(%rsp)
  0x00007f8ab91621a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91621a8: mov    %r15,(%rsp)
  0x00007f8ab91621ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91621b6: movabs $0x7f8ab9162156,%rsi
  0x00007f8ab91621c0: mov    %rsp,%rdx
  0x00007f8ab91621c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91621c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91621cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91621cd: mov    %rsp,%r11
  0x00007f8ab91621d0: sub    $0x10,%rsp
  0x00007f8ab91621d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91621d8: push   %rax
  0x00007f8ab91621d9: mov    %r11,%rax
  0x00007f8ab91621dc: mov    0x50(%rbx),%r11
  0x00007f8ab91621e0: mov    0x40(%rax),%rsi
  0x00007f8ab91621e4: mov    0x38(%rax),%rdx
  0x00007f8ab91621e8: mov    0x30(%rax),%rcx
  0x00007f8ab91621ec: mov    0x28(%rax),%r8
  0x00007f8ab91621f0: mov    0x20(%rax),%r9
  0x00007f8ab91621f4: mov    0x18(%rax),%edi
  0x00007f8ab91621f7: mov    0x10(%rax),%r13
  0x00007f8ab91621fb: mov    %r13,0x8(%rsp)
  0x00007f8ab9162200: mov    0x8(%rax),%r13
  0x00007f8ab9162204: mov    %r13,0x10(%rsp)
  0x00007f8ab9162209: mov    %rbx,0x258(%r15)
  0x00007f8ab9162210: mov    %rbx,%rax
  0x00007f8ab9162213: jmpq   *%r11
  0x00007f8ab9162216: mov    0x8(%rsi),%ebx
  0x00007f8ab9162219: shl    $0x3,%rbx
  0x00007f8ab916221d: cmp    0x10(%rax),%rbx
  0x00007f8ab9162221: mov    0x8(%rax),%rbx
  0x00007f8ab9162225: je     0x00007f8ab9162230
  0x00007f8ab916222b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162230: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9162238: je     0x00007f8ab9162333
  0x00007f8ab916223e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162243: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916224b: je     0x00007f8ab9162333
  0x00007f8ab9162251: mov    %rsp,%r13
  0x00007f8ab9162254: mov    (%rsp),%rax
  0x00007f8ab9162258: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916225c: pushfq 
  0x00007f8ab916225d: sub    $0x8,%rsp
  0x00007f8ab9162261: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9162266: sub    $0x80,%rsp
  0x00007f8ab916226d: mov    %rax,0x78(%rsp)
  0x00007f8ab9162272: mov    %rcx,0x70(%rsp)
  0x00007f8ab9162277: mov    %rdx,0x68(%rsp)
  0x00007f8ab916227c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9162281: mov    %rbp,0x50(%rsp)
  0x00007f8ab9162286: mov    %rsi,0x48(%rsp)
  0x00007f8ab916228b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9162290: mov    %r8,0x38(%rsp)
  0x00007f8ab9162295: mov    %r9,0x30(%rsp)
  0x00007f8ab916229a: mov    %r10,0x28(%rsp)
  0x00007f8ab916229f: mov    %r11,0x20(%rsp)
  0x00007f8ab91622a4: mov    %r12,0x18(%rsp)
  0x00007f8ab91622a9: mov    %r13,0x10(%rsp)
  0x00007f8ab91622ae: mov    %r14,0x8(%rsp)
  0x00007f8ab91622b3: mov    %r15,(%rsp)
  0x00007f8ab91622b7: sub    $0x200,%rsp
  0x00007f8ab91622be: fxsave64 (%rsp)
  0x00007f8ab91622c3: mov    %rbx,%rdi
  0x00007f8ab91622c6: mov    %rax,%rsi
  0x00007f8ab91622c9: callq  0x00007f8acef8bbca
  0x00007f8ab91622ce: fxrstor64 (%rsp)
  0x00007f8ab91622d3: add    $0x200,%rsp
  0x00007f8ab91622da: mov    (%rsp),%r15
  0x00007f8ab91622de: mov    0x8(%rsp),%r14
  0x00007f8ab91622e3: mov    0x10(%rsp),%r13
  0x00007f8ab91622e8: mov    0x18(%rsp),%r12
  0x00007f8ab91622ed: mov    0x20(%rsp),%r11
  0x00007f8ab91622f2: mov    0x28(%rsp),%r10
  0x00007f8ab91622f7: mov    0x30(%rsp),%r9
  0x00007f8ab91622fc: mov    0x38(%rsp),%r8
  0x00007f8ab9162301: mov    0x40(%rsp),%rdi
  0x00007f8ab9162306: mov    0x48(%rsp),%rsi
  0x00007f8ab916230b: mov    0x50(%rsp),%rbp
  0x00007f8ab9162310: mov    0x60(%rsp),%rbx
  0x00007f8ab9162315: mov    0x68(%rsp),%rdx
  0x00007f8ab916231a: mov    0x70(%rsp),%rcx
  0x00007f8ab916231f: mov    0x78(%rsp),%rax
  0x00007f8ab9162324: add    $0x80,%rsp
  0x00007f8ab916232b: add    $0x8,%rsp
  0x00007f8ab916232f: popfq  
  0x00007f8ab9162330: mov    %r13,%rsp
  0x00007f8ab9162333: pop    %rax
  0x00007f8ab9162334: mov    %rsp,%r13
  0x00007f8ab9162337: sub    $0x50,%rsp
  0x00007f8ab916233b: mov    %rax,(%rsp)
  0x00007f8ab916233f: mov    %rsi,0x40(%rsp)
  0x00007f8ab9162344: mov    %rdx,0x38(%rsp)
  0x00007f8ab9162349: mov    %rcx,0x30(%rsp)
  0x00007f8ab916234e: mov    %r8,0x28(%rsp)
  0x00007f8ab9162353: mov    %r9,0x20(%rsp)
  0x00007f8ab9162358: mov    %edi,0x18(%rsp)
  0x00007f8ab916235c: mov    0x50(%rsp),%rax
  0x00007f8ab9162361: mov    %rax,0x10(%rsp)
  0x00007f8ab9162366: mov    0x58(%rsp),%rax
  0x00007f8ab916236b: mov    %rax,0x8(%rsp)
  0x00007f8ab9162370: mov    0x40(%rbx),%rcx
  0x00007f8ab9162374: jmpq   *%rcx

AHE@0x00007f8ac812ee30: 0xbeabaa00 i2c: 0x00007f8ab9162420 c2i: 0x00007f8ab9162569 c2iUV: 0x00007f8ab916253c
i2c argument handler #98 for: static (JI[CII)I (626 bytes generated)
c2i argument handler starts at 0x7f8ab9162569
  0x00007f8ab9162420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9162424: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916242e: cmp    %r11,%rax
  0x00007f8ab9162431: jbe    0x00007f8ab916244a
  0x00007f8ab9162437: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9162441: cmp    %r11,%rax
  0x00007f8ab9162444: jb     0x00007f8ab916250d
  0x00007f8ab916244a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9162454: cmp    %r11,%rax
  0x00007f8ab9162457: jbe    0x00007f8ab9162470
  0x00007f8ab916245d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9162467: cmp    %r11,%rax
  0x00007f8ab916246a: jb     0x00007f8ab916250d
  0x00007f8ab9162470: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916247a: cmp    %r11,%rax
  0x00007f8ab916247d: jbe    0x00007f8ab9162496
  0x00007f8ab9162483: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916248d: cmp    %r11,%rax
  0x00007f8ab9162490: jb     0x00007f8ab916250d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9162496: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916249b: sub    $0x80,%rsp
  0x00007f8ab91624a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91624a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91624ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91624b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91624b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91624bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91624c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91624c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91624ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91624cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91624d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91624d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91624de: mov    %r13,0x10(%rsp)
  0x00007f8ab91624e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91624e8: mov    %r15,(%rsp)
  0x00007f8ab91624ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91624f6: movabs $0x7f8ab9162496,%rsi
  0x00007f8ab9162500: mov    %rsp,%rdx
  0x00007f8ab9162503: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162507: callq  0x00007f8aceddb9fa
  0x00007f8ab916250c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916250d: mov    %rsp,%r11
  0x00007f8ab9162510: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162514: push   %rax
  0x00007f8ab9162515: mov    %r11,%rax
  0x00007f8ab9162518: mov    0x50(%rbx),%r11
  0x00007f8ab916251c: mov    0x28(%rax),%rsi
  0x00007f8ab9162520: mov    0x20(%rax),%edx
  0x00007f8ab9162523: mov    0x18(%rax),%rcx
  0x00007f8ab9162527: mov    0x10(%rax),%r8d
  0x00007f8ab916252b: mov    0x8(%rax),%r9d
  0x00007f8ab916252f: mov    %rbx,0x258(%r15)
  0x00007f8ab9162536: mov    %rbx,%rax
  0x00007f8ab9162539: jmpq   *%r11
  0x00007f8ab916253c: mov    0x8(%rsi),%ebx
  0x00007f8ab916253f: shl    $0x3,%rbx
  0x00007f8ab9162543: cmp    0x10(%rax),%rbx
  0x00007f8ab9162547: mov    0x8(%rax),%rbx
  0x00007f8ab916254b: je     0x00007f8ab9162556
  0x00007f8ab9162551: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162556: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916255e: je     0x00007f8ab9162659
  0x00007f8ab9162564: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162569: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9162571: je     0x00007f8ab9162659
  0x00007f8ab9162577: mov    %rsp,%r13
  0x00007f8ab916257a: mov    (%rsp),%rax
  0x00007f8ab916257e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162582: pushfq 
  0x00007f8ab9162583: sub    $0x8,%rsp
  0x00007f8ab9162587: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916258c: sub    $0x80,%rsp
  0x00007f8ab9162593: mov    %rax,0x78(%rsp)
  0x00007f8ab9162598: mov    %rcx,0x70(%rsp)
  0x00007f8ab916259d: mov    %rdx,0x68(%rsp)
  0x00007f8ab91625a2: mov    %rbx,0x60(%rsp)
  0x00007f8ab91625a7: mov    %rbp,0x50(%rsp)
  0x00007f8ab91625ac: mov    %rsi,0x48(%rsp)
  0x00007f8ab91625b1: mov    %rdi,0x40(%rsp)
  0x00007f8ab91625b6: mov    %r8,0x38(%rsp)
  0x00007f8ab91625bb: mov    %r9,0x30(%rsp)
  0x00007f8ab91625c0: mov    %r10,0x28(%rsp)
  0x00007f8ab91625c5: mov    %r11,0x20(%rsp)
  0x00007f8ab91625ca: mov    %r12,0x18(%rsp)
  0x00007f8ab91625cf: mov    %r13,0x10(%rsp)
  0x00007f8ab91625d4: mov    %r14,0x8(%rsp)
  0x00007f8ab91625d9: mov    %r15,(%rsp)
  0x00007f8ab91625dd: sub    $0x200,%rsp
  0x00007f8ab91625e4: fxsave64 (%rsp)
  0x00007f8ab91625e9: mov    %rbx,%rdi
  0x00007f8ab91625ec: mov    %rax,%rsi
  0x00007f8ab91625ef: callq  0x00007f8acef8bbca
  0x00007f8ab91625f4: fxrstor64 (%rsp)
  0x00007f8ab91625f9: add    $0x200,%rsp
  0x00007f8ab9162600: mov    (%rsp),%r15
  0x00007f8ab9162604: mov    0x8(%rsp),%r14
  0x00007f8ab9162609: mov    0x10(%rsp),%r13
  0x00007f8ab916260e: mov    0x18(%rsp),%r12
  0x00007f8ab9162613: mov    0x20(%rsp),%r11
  0x00007f8ab9162618: mov    0x28(%rsp),%r10
  0x00007f8ab916261d: mov    0x30(%rsp),%r9
  0x00007f8ab9162622: mov    0x38(%rsp),%r8
  0x00007f8ab9162627: mov    0x40(%rsp),%rdi
  0x00007f8ab916262c: mov    0x48(%rsp),%rsi
  0x00007f8ab9162631: mov    0x50(%rsp),%rbp
  0x00007f8ab9162636: mov    0x60(%rsp),%rbx
  0x00007f8ab916263b: mov    0x68(%rsp),%rdx
  0x00007f8ab9162640: mov    0x70(%rsp),%rcx
  0x00007f8ab9162645: mov    0x78(%rsp),%rax
  0x00007f8ab916264a: add    $0x80,%rsp
  0x00007f8ab9162651: add    $0x8,%rsp
  0x00007f8ab9162655: popfq  
  0x00007f8ab9162656: mov    %r13,%rsp
  0x00007f8ab9162659: pop    %rax
  0x00007f8ab916265a: mov    %rsp,%r13
  0x00007f8ab916265d: sub    $0x40,%rsp
  0x00007f8ab9162661: mov    %rax,(%rsp)
  0x00007f8ab9162665: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab916266f: mov    %rax,0x30(%rsp)
  0x00007f8ab9162674: mov    %rsi,0x28(%rsp)
  0x00007f8ab9162679: mov    %edx,0x20(%rsp)
  0x00007f8ab916267d: mov    %rcx,0x18(%rsp)
  0x00007f8ab9162682: mov    %r8d,0x10(%rsp)
  0x00007f8ab9162687: mov    %r9d,0x8(%rsp)
  0x00007f8ab916268c: mov    0x40(%rbx),%rcx
  0x00007f8ab9162690: jmpq   *%rcx

AHE@0x00007f8ac812ee78: 0xbeab0000 i2c: 0x00007f8ab9162760 c2i: 0x00007f8ab91628a1 c2iUV: 0x00007f8ab9162874
i2c argument handler #99 for: static (JI[C)V (608 bytes generated)
c2i argument handler starts at 0x7f8ab91628a1
  0x00007f8ab9162760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9162764: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916276e: cmp    %r11,%rax
  0x00007f8ab9162771: jbe    0x00007f8ab916278a
  0x00007f8ab9162777: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9162781: cmp    %r11,%rax
  0x00007f8ab9162784: jb     0x00007f8ab916284d
  0x00007f8ab916278a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9162794: cmp    %r11,%rax
  0x00007f8ab9162797: jbe    0x00007f8ab91627b0
  0x00007f8ab916279d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91627a7: cmp    %r11,%rax
  0x00007f8ab91627aa: jb     0x00007f8ab916284d
  0x00007f8ab91627b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91627ba: cmp    %r11,%rax
  0x00007f8ab91627bd: jbe    0x00007f8ab91627d6
  0x00007f8ab91627c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91627cd: cmp    %r11,%rax
  0x00007f8ab91627d0: jb     0x00007f8ab916284d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91627d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91627db: sub    $0x80,%rsp
  0x00007f8ab91627e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91627e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91627ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91627f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91627f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91627fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9162800: mov    %rdi,0x40(%rsp)
  0x00007f8ab9162805: mov    %r8,0x38(%rsp)
  0x00007f8ab916280a: mov    %r9,0x30(%rsp)
  0x00007f8ab916280f: mov    %r10,0x28(%rsp)
  0x00007f8ab9162814: mov    %r11,0x20(%rsp)
  0x00007f8ab9162819: mov    %r12,0x18(%rsp)
  0x00007f8ab916281e: mov    %r13,0x10(%rsp)
  0x00007f8ab9162823: mov    %r14,0x8(%rsp)
  0x00007f8ab9162828: mov    %r15,(%rsp)
  0x00007f8ab916282c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9162836: movabs $0x7f8ab91627d6,%rsi
  0x00007f8ab9162840: mov    %rsp,%rdx
  0x00007f8ab9162843: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162847: callq  0x00007f8aceddb9fa
  0x00007f8ab916284c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916284d: mov    %rsp,%r11
  0x00007f8ab9162850: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162854: push   %rax
  0x00007f8ab9162855: mov    %r11,%rax
  0x00007f8ab9162858: mov    0x50(%rbx),%r11
  0x00007f8ab916285c: mov    0x18(%rax),%rsi
  0x00007f8ab9162860: mov    0x10(%rax),%edx
  0x00007f8ab9162863: mov    0x8(%rax),%rcx
  0x00007f8ab9162867: mov    %rbx,0x258(%r15)
  0x00007f8ab916286e: mov    %rbx,%rax
  0x00007f8ab9162871: jmpq   *%r11
  0x00007f8ab9162874: mov    0x8(%rsi),%ebx
  0x00007f8ab9162877: shl    $0x3,%rbx
  0x00007f8ab916287b: cmp    0x10(%rax),%rbx
  0x00007f8ab916287f: mov    0x8(%rax),%rbx
  0x00007f8ab9162883: je     0x00007f8ab916288e
  0x00007f8ab9162889: jmpq   0x00007f8ab9105c40
  0x00007f8ab916288e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9162896: je     0x00007f8ab9162991
  0x00007f8ab916289c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91628a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91628a9: je     0x00007f8ab9162991
  0x00007f8ab91628af: mov    %rsp,%r13
  0x00007f8ab91628b2: mov    (%rsp),%rax
  0x00007f8ab91628b6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91628ba: pushfq 
  0x00007f8ab91628bb: sub    $0x8,%rsp
  0x00007f8ab91628bf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91628c4: sub    $0x80,%rsp
  0x00007f8ab91628cb: mov    %rax,0x78(%rsp)
  0x00007f8ab91628d0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91628d5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91628da: mov    %rbx,0x60(%rsp)
  0x00007f8ab91628df: mov    %rbp,0x50(%rsp)
  0x00007f8ab91628e4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91628e9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91628ee: mov    %r8,0x38(%rsp)
  0x00007f8ab91628f3: mov    %r9,0x30(%rsp)
  0x00007f8ab91628f8: mov    %r10,0x28(%rsp)
  0x00007f8ab91628fd: mov    %r11,0x20(%rsp)
  0x00007f8ab9162902: mov    %r12,0x18(%rsp)
  0x00007f8ab9162907: mov    %r13,0x10(%rsp)
  0x00007f8ab916290c: mov    %r14,0x8(%rsp)
  0x00007f8ab9162911: mov    %r15,(%rsp)
  0x00007f8ab9162915: sub    $0x200,%rsp
  0x00007f8ab916291c: fxsave64 (%rsp)
  0x00007f8ab9162921: mov    %rbx,%rdi
  0x00007f8ab9162924: mov    %rax,%rsi
  0x00007f8ab9162927: callq  0x00007f8acef8bbca
  0x00007f8ab916292c: fxrstor64 (%rsp)
  0x00007f8ab9162931: add    $0x200,%rsp
  0x00007f8ab9162938: mov    (%rsp),%r15
  0x00007f8ab916293c: mov    0x8(%rsp),%r14
  0x00007f8ab9162941: mov    0x10(%rsp),%r13
  0x00007f8ab9162946: mov    0x18(%rsp),%r12
  0x00007f8ab916294b: mov    0x20(%rsp),%r11
  0x00007f8ab9162950: mov    0x28(%rsp),%r10
  0x00007f8ab9162955: mov    0x30(%rsp),%r9
  0x00007f8ab916295a: mov    0x38(%rsp),%r8
  0x00007f8ab916295f: mov    0x40(%rsp),%rdi
  0x00007f8ab9162964: mov    0x48(%rsp),%rsi
  0x00007f8ab9162969: mov    0x50(%rsp),%rbp
  0x00007f8ab916296e: mov    0x60(%rsp),%rbx
  0x00007f8ab9162973: mov    0x68(%rsp),%rdx
  0x00007f8ab9162978: mov    0x70(%rsp),%rcx
  0x00007f8ab916297d: mov    0x78(%rsp),%rax
  0x00007f8ab9162982: add    $0x80,%rsp
  0x00007f8ab9162989: add    $0x8,%rsp
  0x00007f8ab916298d: popfq  
  0x00007f8ab916298e: mov    %r13,%rsp
  0x00007f8ab9162991: pop    %rax
  0x00007f8ab9162992: mov    %rsp,%r13
  0x00007f8ab9162995: sub    $0x30,%rsp
  0x00007f8ab9162999: mov    %rax,(%rsp)
  0x00007f8ab916299d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91629a7: mov    %rax,0x20(%rsp)
  0x00007f8ab91629ac: mov    %rsi,0x18(%rsp)
  0x00007f8ab91629b1: mov    %edx,0x10(%rsp)
  0x00007f8ab91629b5: mov    %rcx,0x8(%rsp)
  0x00007f8ab91629ba: mov    0x40(%rbx),%rcx
  0x00007f8ab91629be: jmpq   *%rcx

AHE@0x00007f8ac812eec0: 0xbbbabbbbb0000000 i2c: 0x00007f8ab9162a60 c2i: 0x00007f8ab9162bcd c2iUV: 0x00007f8ab9162ba0
i2c argument handler #100 for: receiver (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V (683 bytes generated)
c2i argument handler starts at 0x7f8ab9162bcd
  0x00007f8ab9162a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9162a64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9162a6e: cmp    %r11,%rax
  0x00007f8ab9162a71: jbe    0x00007f8ab9162a8a
  0x00007f8ab9162a77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9162a81: cmp    %r11,%rax
  0x00007f8ab9162a84: jb     0x00007f8ab9162b4d
  0x00007f8ab9162a8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9162a94: cmp    %r11,%rax
  0x00007f8ab9162a97: jbe    0x00007f8ab9162ab0
  0x00007f8ab9162a9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9162aa7: cmp    %r11,%rax
  0x00007f8ab9162aaa: jb     0x00007f8ab9162b4d
  0x00007f8ab9162ab0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9162aba: cmp    %r11,%rax
  0x00007f8ab9162abd: jbe    0x00007f8ab9162ad6
  0x00007f8ab9162ac3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9162acd: cmp    %r11,%rax
  0x00007f8ab9162ad0: jb     0x00007f8ab9162b4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9162ad6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9162adb: sub    $0x80,%rsp
  0x00007f8ab9162ae2: mov    %rax,0x78(%rsp)
  0x00007f8ab9162ae7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9162aec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9162af1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9162af6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9162afb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9162b00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9162b05: mov    %r8,0x38(%rsp)
  0x00007f8ab9162b0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9162b0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9162b14: mov    %r11,0x20(%rsp)
  0x00007f8ab9162b19: mov    %r12,0x18(%rsp)
  0x00007f8ab9162b1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9162b23: mov    %r14,0x8(%rsp)
  0x00007f8ab9162b28: mov    %r15,(%rsp)
  0x00007f8ab9162b2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9162b36: movabs $0x7f8ab9162ad6,%rsi
  0x00007f8ab9162b40: mov    %rsp,%rdx
  0x00007f8ab9162b43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162b47: callq  0x00007f8aceddb9fa
  0x00007f8ab9162b4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9162b4d: mov    %rsp,%r11
  0x00007f8ab9162b50: sub    $0x20,%rsp
  0x00007f8ab9162b54: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162b58: push   %rax
  0x00007f8ab9162b59: mov    %r11,%rax
  0x00007f8ab9162b5c: mov    0x50(%rbx),%r11
  0x00007f8ab9162b60: mov    0x48(%rax),%rsi
  0x00007f8ab9162b64: mov    0x40(%rax),%rdx
  0x00007f8ab9162b68: mov    0x38(%rax),%rcx
  0x00007f8ab9162b6c: mov    0x30(%rax),%r8d
  0x00007f8ab9162b70: mov    0x28(%rax),%r9
  0x00007f8ab9162b74: mov    0x20(%rax),%rdi
  0x00007f8ab9162b78: mov    0x18(%rax),%r13
  0x00007f8ab9162b7c: mov    %r13,0x8(%rsp)
  0x00007f8ab9162b81: mov    0x10(%rax),%r13
  0x00007f8ab9162b85: mov    %r13,0x10(%rsp)
  0x00007f8ab9162b8a: mov    0x8(%rax),%r13
  0x00007f8ab9162b8e: mov    %r13,0x18(%rsp)
  0x00007f8ab9162b93: mov    %rbx,0x258(%r15)
  0x00007f8ab9162b9a: mov    %rbx,%rax
  0x00007f8ab9162b9d: jmpq   *%r11
  0x00007f8ab9162ba0: mov    0x8(%rsi),%ebx
  0x00007f8ab9162ba3: shl    $0x3,%rbx
  0x00007f8ab9162ba7: cmp    0x10(%rax),%rbx
  0x00007f8ab9162bab: mov    0x8(%rax),%rbx
  0x00007f8ab9162baf: je     0x00007f8ab9162bba
  0x00007f8ab9162bb5: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162bba: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9162bc2: je     0x00007f8ab9162cbd
  0x00007f8ab9162bc8: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162bcd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9162bd5: je     0x00007f8ab9162cbd
  0x00007f8ab9162bdb: mov    %rsp,%r13
  0x00007f8ab9162bde: mov    (%rsp),%rax
  0x00007f8ab9162be2: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162be6: pushfq 
  0x00007f8ab9162be7: sub    $0x8,%rsp
  0x00007f8ab9162beb: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9162bf0: sub    $0x80,%rsp
  0x00007f8ab9162bf7: mov    %rax,0x78(%rsp)
  0x00007f8ab9162bfc: mov    %rcx,0x70(%rsp)
  0x00007f8ab9162c01: mov    %rdx,0x68(%rsp)
  0x00007f8ab9162c06: mov    %rbx,0x60(%rsp)
  0x00007f8ab9162c0b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9162c10: mov    %rsi,0x48(%rsp)
  0x00007f8ab9162c15: mov    %rdi,0x40(%rsp)
  0x00007f8ab9162c1a: mov    %r8,0x38(%rsp)
  0x00007f8ab9162c1f: mov    %r9,0x30(%rsp)
  0x00007f8ab9162c24: mov    %r10,0x28(%rsp)
  0x00007f8ab9162c29: mov    %r11,0x20(%rsp)
  0x00007f8ab9162c2e: mov    %r12,0x18(%rsp)
  0x00007f8ab9162c33: mov    %r13,0x10(%rsp)
  0x00007f8ab9162c38: mov    %r14,0x8(%rsp)
  0x00007f8ab9162c3d: mov    %r15,(%rsp)
  0x00007f8ab9162c41: sub    $0x200,%rsp
  0x00007f8ab9162c48: fxsave64 (%rsp)
  0x00007f8ab9162c4d: mov    %rbx,%rdi
  0x00007f8ab9162c50: mov    %rax,%rsi
  0x00007f8ab9162c53: callq  0x00007f8acef8bbca
  0x00007f8ab9162c58: fxrstor64 (%rsp)
  0x00007f8ab9162c5d: add    $0x200,%rsp
  0x00007f8ab9162c64: mov    (%rsp),%r15
  0x00007f8ab9162c68: mov    0x8(%rsp),%r14
  0x00007f8ab9162c6d: mov    0x10(%rsp),%r13
  0x00007f8ab9162c72: mov    0x18(%rsp),%r12
  0x00007f8ab9162c77: mov    0x20(%rsp),%r11
  0x00007f8ab9162c7c: mov    0x28(%rsp),%r10
  0x00007f8ab9162c81: mov    0x30(%rsp),%r9
  0x00007f8ab9162c86: mov    0x38(%rsp),%r8
  0x00007f8ab9162c8b: mov    0x40(%rsp),%rdi
  0x00007f8ab9162c90: mov    0x48(%rsp),%rsi
  0x00007f8ab9162c95: mov    0x50(%rsp),%rbp
  0x00007f8ab9162c9a: mov    0x60(%rsp),%rbx
  0x00007f8ab9162c9f: mov    0x68(%rsp),%rdx
  0x00007f8ab9162ca4: mov    0x70(%rsp),%rcx
  0x00007f8ab9162ca9: mov    0x78(%rsp),%rax
  0x00007f8ab9162cae: add    $0x80,%rsp
  0x00007f8ab9162cb5: add    $0x8,%rsp
  0x00007f8ab9162cb9: popfq  
  0x00007f8ab9162cba: mov    %r13,%rsp
  0x00007f8ab9162cbd: pop    %rax
  0x00007f8ab9162cbe: mov    %rsp,%r13
  0x00007f8ab9162cc1: sub    $0x50,%rsp
  0x00007f8ab9162cc5: mov    %rax,(%rsp)
  0x00007f8ab9162cc9: mov    %rsi,0x48(%rsp)
  0x00007f8ab9162cce: mov    %rdx,0x40(%rsp)
  0x00007f8ab9162cd3: mov    %rcx,0x38(%rsp)
  0x00007f8ab9162cd8: mov    %r8d,0x30(%rsp)
  0x00007f8ab9162cdd: mov    %r9,0x28(%rsp)
  0x00007f8ab9162ce2: mov    %rdi,0x20(%rsp)
  0x00007f8ab9162ce7: mov    0x50(%rsp),%rax
  0x00007f8ab9162cec: mov    %rax,0x18(%rsp)
  0x00007f8ab9162cf1: mov    0x58(%rsp),%rax
  0x00007f8ab9162cf6: mov    %rax,0x10(%rsp)
  0x00007f8ab9162cfb: mov    0x60(%rsp),%rax
  0x00007f8ab9162d00: mov    %rax,0x8(%rsp)
  0x00007f8ab9162d05: mov    0x40(%rbx),%rcx
  0x00007f8ab9162d09: jmpq   *%rcx

AHE@0x00007f8ac812ef08: 0xbbbabb00 i2c: 0x00007f8ab9162de0 c2i: 0x00007f8ab9162f2e c2iUV: 0x00007f8ab9162f01
i2c argument handler #101 for: receiver (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (622 bytes generated)
c2i argument handler starts at 0x7f8ab9162f2e
  0x00007f8ab9162de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9162de4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9162dee: cmp    %r11,%rax
  0x00007f8ab9162df1: jbe    0x00007f8ab9162e0a
  0x00007f8ab9162df7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9162e01: cmp    %r11,%rax
  0x00007f8ab9162e04: jb     0x00007f8ab9162ecd
  0x00007f8ab9162e0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9162e14: cmp    %r11,%rax
  0x00007f8ab9162e17: jbe    0x00007f8ab9162e30
  0x00007f8ab9162e1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9162e27: cmp    %r11,%rax
  0x00007f8ab9162e2a: jb     0x00007f8ab9162ecd
  0x00007f8ab9162e30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9162e3a: cmp    %r11,%rax
  0x00007f8ab9162e3d: jbe    0x00007f8ab9162e56
  0x00007f8ab9162e43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9162e4d: cmp    %r11,%rax
  0x00007f8ab9162e50: jb     0x00007f8ab9162ecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9162e56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9162e5b: sub    $0x80,%rsp
  0x00007f8ab9162e62: mov    %rax,0x78(%rsp)
  0x00007f8ab9162e67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9162e6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9162e71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9162e76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9162e7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9162e80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9162e85: mov    %r8,0x38(%rsp)
  0x00007f8ab9162e8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9162e8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9162e94: mov    %r11,0x20(%rsp)
  0x00007f8ab9162e99: mov    %r12,0x18(%rsp)
  0x00007f8ab9162e9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9162ea3: mov    %r14,0x8(%rsp)
  0x00007f8ab9162ea8: mov    %r15,(%rsp)
  0x00007f8ab9162eac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9162eb6: movabs $0x7f8ab9162e56,%rsi
  0x00007f8ab9162ec0: mov    %rsp,%rdx
  0x00007f8ab9162ec3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162ec7: callq  0x00007f8aceddb9fa
  0x00007f8ab9162ecc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9162ecd: mov    %rsp,%r11
  0x00007f8ab9162ed0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162ed4: push   %rax
  0x00007f8ab9162ed5: mov    %r11,%rax
  0x00007f8ab9162ed8: mov    0x50(%rbx),%r11
  0x00007f8ab9162edc: mov    0x30(%rax),%rsi
  0x00007f8ab9162ee0: mov    0x28(%rax),%rdx
  0x00007f8ab9162ee4: mov    0x20(%rax),%rcx
  0x00007f8ab9162ee8: mov    0x18(%rax),%r8d
  0x00007f8ab9162eec: mov    0x10(%rax),%r9
  0x00007f8ab9162ef0: mov    0x8(%rax),%rdi
  0x00007f8ab9162ef4: mov    %rbx,0x258(%r15)
  0x00007f8ab9162efb: mov    %rbx,%rax
  0x00007f8ab9162efe: jmpq   *%r11
  0x00007f8ab9162f01: mov    0x8(%rsi),%ebx
  0x00007f8ab9162f04: shl    $0x3,%rbx
  0x00007f8ab9162f08: cmp    0x10(%rax),%rbx
  0x00007f8ab9162f0c: mov    0x8(%rax),%rbx
  0x00007f8ab9162f10: je     0x00007f8ab9162f1b
  0x00007f8ab9162f16: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162f1b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9162f23: je     0x00007f8ab916301e
  0x00007f8ab9162f29: jmpq   0x00007f8ab9105c40
  0x00007f8ab9162f2e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9162f36: je     0x00007f8ab916301e
  0x00007f8ab9162f3c: mov    %rsp,%r13
  0x00007f8ab9162f3f: mov    (%rsp),%rax
  0x00007f8ab9162f43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9162f47: pushfq 
  0x00007f8ab9162f48: sub    $0x8,%rsp
  0x00007f8ab9162f4c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9162f51: sub    $0x80,%rsp
  0x00007f8ab9162f58: mov    %rax,0x78(%rsp)
  0x00007f8ab9162f5d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9162f62: mov    %rdx,0x68(%rsp)
  0x00007f8ab9162f67: mov    %rbx,0x60(%rsp)
  0x00007f8ab9162f6c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9162f71: mov    %rsi,0x48(%rsp)
  0x00007f8ab9162f76: mov    %rdi,0x40(%rsp)
  0x00007f8ab9162f7b: mov    %r8,0x38(%rsp)
  0x00007f8ab9162f80: mov    %r9,0x30(%rsp)
  0x00007f8ab9162f85: mov    %r10,0x28(%rsp)
  0x00007f8ab9162f8a: mov    %r11,0x20(%rsp)
  0x00007f8ab9162f8f: mov    %r12,0x18(%rsp)
  0x00007f8ab9162f94: mov    %r13,0x10(%rsp)
  0x00007f8ab9162f99: mov    %r14,0x8(%rsp)
  0x00007f8ab9162f9e: mov    %r15,(%rsp)
  0x00007f8ab9162fa2: sub    $0x200,%rsp
  0x00007f8ab9162fa9: fxsave64 (%rsp)
  0x00007f8ab9162fae: mov    %rbx,%rdi
  0x00007f8ab9162fb1: mov    %rax,%rsi
  0x00007f8ab9162fb4: callq  0x00007f8acef8bbca
  0x00007f8ab9162fb9: fxrstor64 (%rsp)
  0x00007f8ab9162fbe: add    $0x200,%rsp
  0x00007f8ab9162fc5: mov    (%rsp),%r15
  0x00007f8ab9162fc9: mov    0x8(%rsp),%r14
  0x00007f8ab9162fce: mov    0x10(%rsp),%r13
  0x00007f8ab9162fd3: mov    0x18(%rsp),%r12
  0x00007f8ab9162fd8: mov    0x20(%rsp),%r11
  0x00007f8ab9162fdd: mov    0x28(%rsp),%r10
  0x00007f8ab9162fe2: mov    0x30(%rsp),%r9
  0x00007f8ab9162fe7: mov    0x38(%rsp),%r8
  0x00007f8ab9162fec: mov    0x40(%rsp),%rdi
  0x00007f8ab9162ff1: mov    0x48(%rsp),%rsi
  0x00007f8ab9162ff6: mov    0x50(%rsp),%rbp
  0x00007f8ab9162ffb: mov    0x60(%rsp),%rbx
  0x00007f8ab9163000: mov    0x68(%rsp),%rdx
  0x00007f8ab9163005: mov    0x70(%rsp),%rcx
  0x00007f8ab916300a: mov    0x78(%rsp),%rax
  0x00007f8ab916300f: add    $0x80,%rsp
  0x00007f8ab9163016: add    $0x8,%rsp
  0x00007f8ab916301a: popfq  
  0x00007f8ab916301b: mov    %r13,%rsp
  0x00007f8ab916301e: pop    %rax
  0x00007f8ab916301f: mov    %rsp,%r13
  0x00007f8ab9163022: sub    $0x40,%rsp
  0x00007f8ab9163026: mov    %rax,(%rsp)
  0x00007f8ab916302a: mov    %rsi,0x30(%rsp)
  0x00007f8ab916302f: mov    %rdx,0x28(%rsp)
  0x00007f8ab9163034: mov    %rcx,0x20(%rsp)
  0x00007f8ab9163039: mov    %r8d,0x18(%rsp)
  0x00007f8ab916303e: mov    %r9,0x10(%rsp)
  0x00007f8ab9163043: mov    %rdi,0x8(%rsp)
  0x00007f8ab9163048: mov    0x40(%rbx),%rcx
  0x00007f8ab916304c: jmpq   *%rcx

AHE@0x00007f8ac812ef50: 0xbbebb000 i2c: 0x00007f8ab9163120 c2i: 0x00007f8ab9163266 c2iUV: 0x00007f8ab9163239
i2c argument handler #102 for: receiver (JLjava/util/function/BiFunction;Ljava/util/function/Consumer;)V (619 bytes generated)
c2i argument handler starts at 0x7f8ab9163266
  0x00007f8ab9163120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9163124: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916312e: cmp    %r11,%rax
  0x00007f8ab9163131: jbe    0x00007f8ab916314a
  0x00007f8ab9163137: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9163141: cmp    %r11,%rax
  0x00007f8ab9163144: jb     0x00007f8ab916320d
  0x00007f8ab916314a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9163154: cmp    %r11,%rax
  0x00007f8ab9163157: jbe    0x00007f8ab9163170
  0x00007f8ab916315d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9163167: cmp    %r11,%rax
  0x00007f8ab916316a: jb     0x00007f8ab916320d
  0x00007f8ab9163170: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916317a: cmp    %r11,%rax
  0x00007f8ab916317d: jbe    0x00007f8ab9163196
  0x00007f8ab9163183: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916318d: cmp    %r11,%rax
  0x00007f8ab9163190: jb     0x00007f8ab916320d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9163196: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916319b: sub    $0x80,%rsp
  0x00007f8ab91631a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91631a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91631ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91631b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91631b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91631bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91631c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91631c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91631ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91631cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91631d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91631d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91631de: mov    %r13,0x10(%rsp)
  0x00007f8ab91631e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91631e8: mov    %r15,(%rsp)
  0x00007f8ab91631ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91631f6: movabs $0x7f8ab9163196,%rsi
  0x00007f8ab9163200: mov    %rsp,%rdx
  0x00007f8ab9163203: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163207: callq  0x00007f8aceddb9fa
  0x00007f8ab916320c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916320d: mov    %rsp,%r11
  0x00007f8ab9163210: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163214: push   %rax
  0x00007f8ab9163215: mov    %r11,%rax
  0x00007f8ab9163218: mov    0x50(%rbx),%r11
  0x00007f8ab916321c: mov    0x28(%rax),%rsi
  0x00007f8ab9163220: mov    0x18(%rax),%rdx
  0x00007f8ab9163224: mov    0x10(%rax),%rcx
  0x00007f8ab9163228: mov    0x8(%rax),%r8
  0x00007f8ab916322c: mov    %rbx,0x258(%r15)
  0x00007f8ab9163233: mov    %rbx,%rax
  0x00007f8ab9163236: jmpq   *%r11
  0x00007f8ab9163239: mov    0x8(%rsi),%ebx
  0x00007f8ab916323c: shl    $0x3,%rbx
  0x00007f8ab9163240: cmp    0x10(%rax),%rbx
  0x00007f8ab9163244: mov    0x8(%rax),%rbx
  0x00007f8ab9163248: je     0x00007f8ab9163253
  0x00007f8ab916324e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9163253: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916325b: je     0x00007f8ab9163356
  0x00007f8ab9163261: jmpq   0x00007f8ab9105c40
  0x00007f8ab9163266: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916326e: je     0x00007f8ab9163356
  0x00007f8ab9163274: mov    %rsp,%r13
  0x00007f8ab9163277: mov    (%rsp),%rax
  0x00007f8ab916327b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916327f: pushfq 
  0x00007f8ab9163280: sub    $0x8,%rsp
  0x00007f8ab9163284: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9163289: sub    $0x80,%rsp
  0x00007f8ab9163290: mov    %rax,0x78(%rsp)
  0x00007f8ab9163295: mov    %rcx,0x70(%rsp)
  0x00007f8ab916329a: mov    %rdx,0x68(%rsp)
  0x00007f8ab916329f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91632a4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91632a9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91632ae: mov    %rdi,0x40(%rsp)
  0x00007f8ab91632b3: mov    %r8,0x38(%rsp)
  0x00007f8ab91632b8: mov    %r9,0x30(%rsp)
  0x00007f8ab91632bd: mov    %r10,0x28(%rsp)
  0x00007f8ab91632c2: mov    %r11,0x20(%rsp)
  0x00007f8ab91632c7: mov    %r12,0x18(%rsp)
  0x00007f8ab91632cc: mov    %r13,0x10(%rsp)
  0x00007f8ab91632d1: mov    %r14,0x8(%rsp)
  0x00007f8ab91632d6: mov    %r15,(%rsp)
  0x00007f8ab91632da: sub    $0x200,%rsp
  0x00007f8ab91632e1: fxsave64 (%rsp)
  0x00007f8ab91632e6: mov    %rbx,%rdi
  0x00007f8ab91632e9: mov    %rax,%rsi
  0x00007f8ab91632ec: callq  0x00007f8acef8bbca
  0x00007f8ab91632f1: fxrstor64 (%rsp)
  0x00007f8ab91632f6: add    $0x200,%rsp
  0x00007f8ab91632fd: mov    (%rsp),%r15
  0x00007f8ab9163301: mov    0x8(%rsp),%r14
  0x00007f8ab9163306: mov    0x10(%rsp),%r13
  0x00007f8ab916330b: mov    0x18(%rsp),%r12
  0x00007f8ab9163310: mov    0x20(%rsp),%r11
  0x00007f8ab9163315: mov    0x28(%rsp),%r10
  0x00007f8ab916331a: mov    0x30(%rsp),%r9
  0x00007f8ab916331f: mov    0x38(%rsp),%r8
  0x00007f8ab9163324: mov    0x40(%rsp),%rdi
  0x00007f8ab9163329: mov    0x48(%rsp),%rsi
  0x00007f8ab916332e: mov    0x50(%rsp),%rbp
  0x00007f8ab9163333: mov    0x60(%rsp),%rbx
  0x00007f8ab9163338: mov    0x68(%rsp),%rdx
  0x00007f8ab916333d: mov    0x70(%rsp),%rcx
  0x00007f8ab9163342: mov    0x78(%rsp),%rax
  0x00007f8ab9163347: add    $0x80,%rsp
  0x00007f8ab916334e: add    $0x8,%rsp
  0x00007f8ab9163352: popfq  
  0x00007f8ab9163353: mov    %r13,%rsp
  0x00007f8ab9163356: pop    %rax
  0x00007f8ab9163357: mov    %rsp,%r13
  0x00007f8ab916335a: sub    $0x30,%rsp
  0x00007f8ab916335e: mov    %rax,(%rsp)
  0x00007f8ab9163362: mov    %rsi,0x28(%rsp)
  0x00007f8ab9163367: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9163371: mov    %rax,0x20(%rsp)
  0x00007f8ab9163376: mov    %rdx,0x18(%rsp)
  0x00007f8ab916337b: mov    %rcx,0x10(%rsp)
  0x00007f8ab9163380: mov    %r8,0x8(%rsp)
  0x00007f8ab9163385: mov    0x40(%rbx),%rcx
  0x00007f8ab9163389: jmpq   *%rcx

AHE@0x00007f8ac812ef98: 0xbbebab00 i2c: 0x00007f8ab9163460 c2i: 0x00007f8ab91635aa c2iUV: 0x00007f8ab916357d
i2c argument handler #103 for: receiver (JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I (628 bytes generated)
c2i argument handler starts at 0x7f8ab91635aa
  0x00007f8ab9163460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9163464: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916346e: cmp    %r11,%rax
  0x00007f8ab9163471: jbe    0x00007f8ab916348a
  0x00007f8ab9163477: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9163481: cmp    %r11,%rax
  0x00007f8ab9163484: jb     0x00007f8ab916354d
  0x00007f8ab916348a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9163494: cmp    %r11,%rax
  0x00007f8ab9163497: jbe    0x00007f8ab91634b0
  0x00007f8ab916349d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91634a7: cmp    %r11,%rax
  0x00007f8ab91634aa: jb     0x00007f8ab916354d
  0x00007f8ab91634b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91634ba: cmp    %r11,%rax
  0x00007f8ab91634bd: jbe    0x00007f8ab91634d6
  0x00007f8ab91634c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91634cd: cmp    %r11,%rax
  0x00007f8ab91634d0: jb     0x00007f8ab916354d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91634d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91634db: sub    $0x80,%rsp
  0x00007f8ab91634e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91634e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91634ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91634f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91634f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91634fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9163500: mov    %rdi,0x40(%rsp)
  0x00007f8ab9163505: mov    %r8,0x38(%rsp)
  0x00007f8ab916350a: mov    %r9,0x30(%rsp)
  0x00007f8ab916350f: mov    %r10,0x28(%rsp)
  0x00007f8ab9163514: mov    %r11,0x20(%rsp)
  0x00007f8ab9163519: mov    %r12,0x18(%rsp)
  0x00007f8ab916351e: mov    %r13,0x10(%rsp)
  0x00007f8ab9163523: mov    %r14,0x8(%rsp)
  0x00007f8ab9163528: mov    %r15,(%rsp)
  0x00007f8ab916352c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9163536: movabs $0x7f8ab91634d6,%rsi
  0x00007f8ab9163540: mov    %rsp,%rdx
  0x00007f8ab9163543: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163547: callq  0x00007f8aceddb9fa
  0x00007f8ab916354c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916354d: mov    %rsp,%r11
  0x00007f8ab9163550: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163554: push   %rax
  0x00007f8ab9163555: mov    %r11,%rax
  0x00007f8ab9163558: mov    0x50(%rbx),%r11
  0x00007f8ab916355c: mov    0x30(%rax),%rsi
  0x00007f8ab9163560: mov    0x20(%rax),%rdx
  0x00007f8ab9163564: mov    0x18(%rax),%rcx
  0x00007f8ab9163568: mov    0x10(%rax),%r8d
  0x00007f8ab916356c: mov    0x8(%rax),%r9
  0x00007f8ab9163570: mov    %rbx,0x258(%r15)
  0x00007f8ab9163577: mov    %rbx,%rax
  0x00007f8ab916357a: jmpq   *%r11
  0x00007f8ab916357d: mov    0x8(%rsi),%ebx
  0x00007f8ab9163580: shl    $0x3,%rbx
  0x00007f8ab9163584: cmp    0x10(%rax),%rbx
  0x00007f8ab9163588: mov    0x8(%rax),%rbx
  0x00007f8ab916358c: je     0x00007f8ab9163597
  0x00007f8ab9163592: jmpq   0x00007f8ab9105c40
  0x00007f8ab9163597: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916359f: je     0x00007f8ab916369a
  0x00007f8ab91635a5: jmpq   0x00007f8ab9105c40
  0x00007f8ab91635aa: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91635b2: je     0x00007f8ab916369a
  0x00007f8ab91635b8: mov    %rsp,%r13
  0x00007f8ab91635bb: mov    (%rsp),%rax
  0x00007f8ab91635bf: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91635c3: pushfq 
  0x00007f8ab91635c4: sub    $0x8,%rsp
  0x00007f8ab91635c8: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91635cd: sub    $0x80,%rsp
  0x00007f8ab91635d4: mov    %rax,0x78(%rsp)
  0x00007f8ab91635d9: mov    %rcx,0x70(%rsp)
  0x00007f8ab91635de: mov    %rdx,0x68(%rsp)
  0x00007f8ab91635e3: mov    %rbx,0x60(%rsp)
  0x00007f8ab91635e8: mov    %rbp,0x50(%rsp)
  0x00007f8ab91635ed: mov    %rsi,0x48(%rsp)
  0x00007f8ab91635f2: mov    %rdi,0x40(%rsp)
  0x00007f8ab91635f7: mov    %r8,0x38(%rsp)
  0x00007f8ab91635fc: mov    %r9,0x30(%rsp)
  0x00007f8ab9163601: mov    %r10,0x28(%rsp)
  0x00007f8ab9163606: mov    %r11,0x20(%rsp)
  0x00007f8ab916360b: mov    %r12,0x18(%rsp)
  0x00007f8ab9163610: mov    %r13,0x10(%rsp)
  0x00007f8ab9163615: mov    %r14,0x8(%rsp)
  0x00007f8ab916361a: mov    %r15,(%rsp)
  0x00007f8ab916361e: sub    $0x200,%rsp
  0x00007f8ab9163625: fxsave64 (%rsp)
  0x00007f8ab916362a: mov    %rbx,%rdi
  0x00007f8ab916362d: mov    %rax,%rsi
  0x00007f8ab9163630: callq  0x00007f8acef8bbca
  0x00007f8ab9163635: fxrstor64 (%rsp)
  0x00007f8ab916363a: add    $0x200,%rsp
  0x00007f8ab9163641: mov    (%rsp),%r15
  0x00007f8ab9163645: mov    0x8(%rsp),%r14
  0x00007f8ab916364a: mov    0x10(%rsp),%r13
  0x00007f8ab916364f: mov    0x18(%rsp),%r12
  0x00007f8ab9163654: mov    0x20(%rsp),%r11
  0x00007f8ab9163659: mov    0x28(%rsp),%r10
  0x00007f8ab916365e: mov    0x30(%rsp),%r9
  0x00007f8ab9163663: mov    0x38(%rsp),%r8
  0x00007f8ab9163668: mov    0x40(%rsp),%rdi
  0x00007f8ab916366d: mov    0x48(%rsp),%rsi
  0x00007f8ab9163672: mov    0x50(%rsp),%rbp
  0x00007f8ab9163677: mov    0x60(%rsp),%rbx
  0x00007f8ab916367c: mov    0x68(%rsp),%rdx
  0x00007f8ab9163681: mov    0x70(%rsp),%rcx
  0x00007f8ab9163686: mov    0x78(%rsp),%rax
  0x00007f8ab916368b: add    $0x80,%rsp
  0x00007f8ab9163692: add    $0x8,%rsp
  0x00007f8ab9163696: popfq  
  0x00007f8ab9163697: mov    %r13,%rsp
  0x00007f8ab916369a: pop    %rax
  0x00007f8ab916369b: mov    %rsp,%r13
  0x00007f8ab916369e: sub    $0x40,%rsp
  0x00007f8ab91636a2: mov    %rax,(%rsp)
  0x00007f8ab91636a6: mov    %rsi,0x30(%rsp)
  0x00007f8ab91636ab: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91636b5: mov    %rax,0x28(%rsp)
  0x00007f8ab91636ba: mov    %rdx,0x20(%rsp)
  0x00007f8ab91636bf: mov    %rcx,0x18(%rsp)
  0x00007f8ab91636c4: mov    %r8d,0x10(%rsp)
  0x00007f8ab91636c9: mov    %r9,0x8(%rsp)
  0x00007f8ab91636ce: mov    0x40(%rbx),%rcx
  0x00007f8ab91636d2: jmpq   *%rcx

AHE@0x00007f8ac812efe0: 0xbbebbeb0 i2c: 0x00007f8ab91637a0 c2i: 0x00007f8ab91638ea c2iUV: 0x00007f8ab91638bd
i2c argument handler #104 for: receiver (JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J (643 bytes generated)
c2i argument handler starts at 0x7f8ab91638ea
  0x00007f8ab91637a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91637a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91637ae: cmp    %r11,%rax
  0x00007f8ab91637b1: jbe    0x00007f8ab91637ca
  0x00007f8ab91637b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91637c1: cmp    %r11,%rax
  0x00007f8ab91637c4: jb     0x00007f8ab916388d
  0x00007f8ab91637ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91637d4: cmp    %r11,%rax
  0x00007f8ab91637d7: jbe    0x00007f8ab91637f0
  0x00007f8ab91637dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91637e7: cmp    %r11,%rax
  0x00007f8ab91637ea: jb     0x00007f8ab916388d
  0x00007f8ab91637f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91637fa: cmp    %r11,%rax
  0x00007f8ab91637fd: jbe    0x00007f8ab9163816
  0x00007f8ab9163803: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916380d: cmp    %r11,%rax
  0x00007f8ab9163810: jb     0x00007f8ab916388d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9163816: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916381b: sub    $0x80,%rsp
  0x00007f8ab9163822: mov    %rax,0x78(%rsp)
  0x00007f8ab9163827: mov    %rcx,0x70(%rsp)
  0x00007f8ab916382c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9163831: mov    %rbx,0x60(%rsp)
  0x00007f8ab9163836: mov    %rbp,0x50(%rsp)
  0x00007f8ab916383b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9163840: mov    %rdi,0x40(%rsp)
  0x00007f8ab9163845: mov    %r8,0x38(%rsp)
  0x00007f8ab916384a: mov    %r9,0x30(%rsp)
  0x00007f8ab916384f: mov    %r10,0x28(%rsp)
  0x00007f8ab9163854: mov    %r11,0x20(%rsp)
  0x00007f8ab9163859: mov    %r12,0x18(%rsp)
  0x00007f8ab916385e: mov    %r13,0x10(%rsp)
  0x00007f8ab9163863: mov    %r14,0x8(%rsp)
  0x00007f8ab9163868: mov    %r15,(%rsp)
  0x00007f8ab916386c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9163876: movabs $0x7f8ab9163816,%rsi
  0x00007f8ab9163880: mov    %rsp,%rdx
  0x00007f8ab9163883: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163887: callq  0x00007f8aceddb9fa
  0x00007f8ab916388c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916388d: mov    %rsp,%r11
  0x00007f8ab9163890: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163894: push   %rax
  0x00007f8ab9163895: mov    %r11,%rax
  0x00007f8ab9163898: mov    0x50(%rbx),%r11
  0x00007f8ab916389c: mov    0x38(%rax),%rsi
  0x00007f8ab91638a0: mov    0x28(%rax),%rdx
  0x00007f8ab91638a4: mov    0x20(%rax),%rcx
  0x00007f8ab91638a8: mov    0x10(%rax),%r8
  0x00007f8ab91638ac: mov    0x8(%rax),%r9
  0x00007f8ab91638b0: mov    %rbx,0x258(%r15)
  0x00007f8ab91638b7: mov    %rbx,%rax
  0x00007f8ab91638ba: jmpq   *%r11
  0x00007f8ab91638bd: mov    0x8(%rsi),%ebx
  0x00007f8ab91638c0: shl    $0x3,%rbx
  0x00007f8ab91638c4: cmp    0x10(%rax),%rbx
  0x00007f8ab91638c8: mov    0x8(%rax),%rbx
  0x00007f8ab91638cc: je     0x00007f8ab91638d7
  0x00007f8ab91638d2: jmpq   0x00007f8ab9105c40
  0x00007f8ab91638d7: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91638df: je     0x00007f8ab91639da
  0x00007f8ab91638e5: jmpq   0x00007f8ab9105c40
  0x00007f8ab91638ea: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91638f2: je     0x00007f8ab91639da
  0x00007f8ab91638f8: mov    %rsp,%r13
  0x00007f8ab91638fb: mov    (%rsp),%rax
  0x00007f8ab91638ff: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163903: pushfq 
  0x00007f8ab9163904: sub    $0x8,%rsp
  0x00007f8ab9163908: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916390d: sub    $0x80,%rsp
  0x00007f8ab9163914: mov    %rax,0x78(%rsp)
  0x00007f8ab9163919: mov    %rcx,0x70(%rsp)
  0x00007f8ab916391e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9163923: mov    %rbx,0x60(%rsp)
  0x00007f8ab9163928: mov    %rbp,0x50(%rsp)
  0x00007f8ab916392d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9163932: mov    %rdi,0x40(%rsp)
  0x00007f8ab9163937: mov    %r8,0x38(%rsp)
  0x00007f8ab916393c: mov    %r9,0x30(%rsp)
  0x00007f8ab9163941: mov    %r10,0x28(%rsp)
  0x00007f8ab9163946: mov    %r11,0x20(%rsp)
  0x00007f8ab916394b: mov    %r12,0x18(%rsp)
  0x00007f8ab9163950: mov    %r13,0x10(%rsp)
  0x00007f8ab9163955: mov    %r14,0x8(%rsp)
  0x00007f8ab916395a: mov    %r15,(%rsp)
  0x00007f8ab916395e: sub    $0x200,%rsp
  0x00007f8ab9163965: fxsave64 (%rsp)
  0x00007f8ab916396a: mov    %rbx,%rdi
  0x00007f8ab916396d: mov    %rax,%rsi
  0x00007f8ab9163970: callq  0x00007f8acef8bbca
  0x00007f8ab9163975: fxrstor64 (%rsp)
  0x00007f8ab916397a: add    $0x200,%rsp
  0x00007f8ab9163981: mov    (%rsp),%r15
  0x00007f8ab9163985: mov    0x8(%rsp),%r14
  0x00007f8ab916398a: mov    0x10(%rsp),%r13
  0x00007f8ab916398f: mov    0x18(%rsp),%r12
  0x00007f8ab9163994: mov    0x20(%rsp),%r11
  0x00007f8ab9163999: mov    0x28(%rsp),%r10
  0x00007f8ab916399e: mov    0x30(%rsp),%r9
  0x00007f8ab91639a3: mov    0x38(%rsp),%r8
  0x00007f8ab91639a8: mov    0x40(%rsp),%rdi
  0x00007f8ab91639ad: mov    0x48(%rsp),%rsi
  0x00007f8ab91639b2: mov    0x50(%rsp),%rbp
  0x00007f8ab91639b7: mov    0x60(%rsp),%rbx
  0x00007f8ab91639bc: mov    0x68(%rsp),%rdx
  0x00007f8ab91639c1: mov    0x70(%rsp),%rcx
  0x00007f8ab91639c6: mov    0x78(%rsp),%rax
  0x00007f8ab91639cb: add    $0x80,%rsp
  0x00007f8ab91639d2: add    $0x8,%rsp
  0x00007f8ab91639d6: popfq  
  0x00007f8ab91639d7: mov    %r13,%rsp
  0x00007f8ab91639da: pop    %rax
  0x00007f8ab91639db: mov    %rsp,%r13
  0x00007f8ab91639de: sub    $0x40,%rsp
  0x00007f8ab91639e2: mov    %rax,(%rsp)
  0x00007f8ab91639e6: mov    %rsi,0x38(%rsp)
  0x00007f8ab91639eb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab91639f5: mov    %rax,0x30(%rsp)
  0x00007f8ab91639fa: mov    %rdx,0x28(%rsp)
  0x00007f8ab91639ff: mov    %rcx,0x20(%rsp)
  0x00007f8ab9163a04: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9163a0e: mov    %rax,0x18(%rsp)
  0x00007f8ab9163a13: mov    %r8,0x10(%rsp)
  0x00007f8ab9163a18: mov    %r9,0x8(%rsp)
  0x00007f8ab9163a1d: mov    0x40(%rbx),%rcx
  0x00007f8ab9163a21: jmpq   *%rcx

AHE@0x00007f8ac812f028: 0xbbeb7eb0 i2c: 0x00007f8ab9163ae0 c2i: 0x00007f8ab9163c2b c2iUV: 0x00007f8ab9163bfe
i2c argument handler #105 for: receiver (JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D (645 bytes generated)
c2i argument handler starts at 0x7f8ab9163c2b
  0x00007f8ab9163ae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9163ae4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9163aee: cmp    %r11,%rax
  0x00007f8ab9163af1: jbe    0x00007f8ab9163b0a
  0x00007f8ab9163af7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9163b01: cmp    %r11,%rax
  0x00007f8ab9163b04: jb     0x00007f8ab9163bcd
  0x00007f8ab9163b0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9163b14: cmp    %r11,%rax
  0x00007f8ab9163b17: jbe    0x00007f8ab9163b30
  0x00007f8ab9163b1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9163b27: cmp    %r11,%rax
  0x00007f8ab9163b2a: jb     0x00007f8ab9163bcd
  0x00007f8ab9163b30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9163b3a: cmp    %r11,%rax
  0x00007f8ab9163b3d: jbe    0x00007f8ab9163b56
  0x00007f8ab9163b43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9163b4d: cmp    %r11,%rax
  0x00007f8ab9163b50: jb     0x00007f8ab9163bcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9163b56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9163b5b: sub    $0x80,%rsp
  0x00007f8ab9163b62: mov    %rax,0x78(%rsp)
  0x00007f8ab9163b67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9163b6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9163b71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9163b76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9163b7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9163b80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9163b85: mov    %r8,0x38(%rsp)
  0x00007f8ab9163b8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9163b8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9163b94: mov    %r11,0x20(%rsp)
  0x00007f8ab9163b99: mov    %r12,0x18(%rsp)
  0x00007f8ab9163b9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9163ba3: mov    %r14,0x8(%rsp)
  0x00007f8ab9163ba8: mov    %r15,(%rsp)
  0x00007f8ab9163bac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9163bb6: movabs $0x7f8ab9163b56,%rsi
  0x00007f8ab9163bc0: mov    %rsp,%rdx
  0x00007f8ab9163bc3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163bc7: callq  0x00007f8aceddb9fa
  0x00007f8ab9163bcc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9163bcd: mov    %rsp,%r11
  0x00007f8ab9163bd0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163bd4: push   %rax
  0x00007f8ab9163bd5: mov    %r11,%rax
  0x00007f8ab9163bd8: mov    0x50(%rbx),%r11
  0x00007f8ab9163bdc: mov    0x38(%rax),%rsi
  0x00007f8ab9163be0: mov    0x28(%rax),%rdx
  0x00007f8ab9163be4: mov    0x20(%rax),%rcx
  0x00007f8ab9163be8: vmovsd 0x10(%rax),%xmm0
  0x00007f8ab9163bed: mov    0x8(%rax),%r8
  0x00007f8ab9163bf1: mov    %rbx,0x258(%r15)
  0x00007f8ab9163bf8: mov    %rbx,%rax
  0x00007f8ab9163bfb: jmpq   *%r11
  0x00007f8ab9163bfe: mov    0x8(%rsi),%ebx
  0x00007f8ab9163c01: shl    $0x3,%rbx
  0x00007f8ab9163c05: cmp    0x10(%rax),%rbx
  0x00007f8ab9163c09: mov    0x8(%rax),%rbx
  0x00007f8ab9163c0d: je     0x00007f8ab9163c18
  0x00007f8ab9163c13: jmpq   0x00007f8ab9105c40
  0x00007f8ab9163c18: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9163c20: je     0x00007f8ab9163d1b
  0x00007f8ab9163c26: jmpq   0x00007f8ab9105c40
  0x00007f8ab9163c2b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9163c33: je     0x00007f8ab9163d1b
  0x00007f8ab9163c39: mov    %rsp,%r13
  0x00007f8ab9163c3c: mov    (%rsp),%rax
  0x00007f8ab9163c40: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163c44: pushfq 
  0x00007f8ab9163c45: sub    $0x8,%rsp
  0x00007f8ab9163c49: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9163c4e: sub    $0x80,%rsp
  0x00007f8ab9163c55: mov    %rax,0x78(%rsp)
  0x00007f8ab9163c5a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9163c5f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9163c64: mov    %rbx,0x60(%rsp)
  0x00007f8ab9163c69: mov    %rbp,0x50(%rsp)
  0x00007f8ab9163c6e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9163c73: mov    %rdi,0x40(%rsp)
  0x00007f8ab9163c78: mov    %r8,0x38(%rsp)
  0x00007f8ab9163c7d: mov    %r9,0x30(%rsp)
  0x00007f8ab9163c82: mov    %r10,0x28(%rsp)
  0x00007f8ab9163c87: mov    %r11,0x20(%rsp)
  0x00007f8ab9163c8c: mov    %r12,0x18(%rsp)
  0x00007f8ab9163c91: mov    %r13,0x10(%rsp)
  0x00007f8ab9163c96: mov    %r14,0x8(%rsp)
  0x00007f8ab9163c9b: mov    %r15,(%rsp)
  0x00007f8ab9163c9f: sub    $0x200,%rsp
  0x00007f8ab9163ca6: fxsave64 (%rsp)
  0x00007f8ab9163cab: mov    %rbx,%rdi
  0x00007f8ab9163cae: mov    %rax,%rsi
  0x00007f8ab9163cb1: callq  0x00007f8acef8bbca
  0x00007f8ab9163cb6: fxrstor64 (%rsp)
  0x00007f8ab9163cbb: add    $0x200,%rsp
  0x00007f8ab9163cc2: mov    (%rsp),%r15
  0x00007f8ab9163cc6: mov    0x8(%rsp),%r14
  0x00007f8ab9163ccb: mov    0x10(%rsp),%r13
  0x00007f8ab9163cd0: mov    0x18(%rsp),%r12
  0x00007f8ab9163cd5: mov    0x20(%rsp),%r11
  0x00007f8ab9163cda: mov    0x28(%rsp),%r10
  0x00007f8ab9163cdf: mov    0x30(%rsp),%r9
  0x00007f8ab9163ce4: mov    0x38(%rsp),%r8
  0x00007f8ab9163ce9: mov    0x40(%rsp),%rdi
  0x00007f8ab9163cee: mov    0x48(%rsp),%rsi
  0x00007f8ab9163cf3: mov    0x50(%rsp),%rbp
  0x00007f8ab9163cf8: mov    0x60(%rsp),%rbx
  0x00007f8ab9163cfd: mov    0x68(%rsp),%rdx
  0x00007f8ab9163d02: mov    0x70(%rsp),%rcx
  0x00007f8ab9163d07: mov    0x78(%rsp),%rax
  0x00007f8ab9163d0c: add    $0x80,%rsp
  0x00007f8ab9163d13: add    $0x8,%rsp
  0x00007f8ab9163d17: popfq  
  0x00007f8ab9163d18: mov    %r13,%rsp
  0x00007f8ab9163d1b: pop    %rax
  0x00007f8ab9163d1c: mov    %rsp,%r13
  0x00007f8ab9163d1f: sub    $0x40,%rsp
  0x00007f8ab9163d23: mov    %rax,(%rsp)
  0x00007f8ab9163d27: mov    %rsi,0x38(%rsp)
  0x00007f8ab9163d2c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9163d36: mov    %rax,0x30(%rsp)
  0x00007f8ab9163d3b: mov    %rdx,0x28(%rsp)
  0x00007f8ab9163d40: mov    %rcx,0x20(%rsp)
  0x00007f8ab9163d45: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9163d4f: mov    %rax,0x18(%rsp)
  0x00007f8ab9163d54: vmovsd %xmm0,0x10(%rsp)
  0x00007f8ab9163d5a: mov    %r8,0x8(%rsp)
  0x00007f8ab9163d5f: mov    0x40(%rbx),%rcx
  0x00007f8ab9163d63: jmpq   *%rcx

AHE@0x00007f8ac812f070: 0xbbbbba00 i2c: 0x00007f8ab9163e20 c2i: 0x00007f8ab9163f6d c2iUV: 0x00007f8ab9163f40
i2c argument handler #106 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V (620 bytes generated)
c2i argument handler starts at 0x7f8ab9163f6d
  0x00007f8ab9163e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9163e24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9163e2e: cmp    %r11,%rax
  0x00007f8ab9163e31: jbe    0x00007f8ab9163e4a
  0x00007f8ab9163e37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9163e41: cmp    %r11,%rax
  0x00007f8ab9163e44: jb     0x00007f8ab9163f0d
  0x00007f8ab9163e4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9163e54: cmp    %r11,%rax
  0x00007f8ab9163e57: jbe    0x00007f8ab9163e70
  0x00007f8ab9163e5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9163e67: cmp    %r11,%rax
  0x00007f8ab9163e6a: jb     0x00007f8ab9163f0d
  0x00007f8ab9163e70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9163e7a: cmp    %r11,%rax
  0x00007f8ab9163e7d: jbe    0x00007f8ab9163e96
  0x00007f8ab9163e83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9163e8d: cmp    %r11,%rax
  0x00007f8ab9163e90: jb     0x00007f8ab9163f0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9163e96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9163e9b: sub    $0x80,%rsp
  0x00007f8ab9163ea2: mov    %rax,0x78(%rsp)
  0x00007f8ab9163ea7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9163eac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9163eb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9163eb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9163ebb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9163ec0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9163ec5: mov    %r8,0x38(%rsp)
  0x00007f8ab9163eca: mov    %r9,0x30(%rsp)
  0x00007f8ab9163ecf: mov    %r10,0x28(%rsp)
  0x00007f8ab9163ed4: mov    %r11,0x20(%rsp)
  0x00007f8ab9163ed9: mov    %r12,0x18(%rsp)
  0x00007f8ab9163ede: mov    %r13,0x10(%rsp)
  0x00007f8ab9163ee3: mov    %r14,0x8(%rsp)
  0x00007f8ab9163ee8: mov    %r15,(%rsp)
  0x00007f8ab9163eec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9163ef6: movabs $0x7f8ab9163e96,%rsi
  0x00007f8ab9163f00: mov    %rsp,%rdx
  0x00007f8ab9163f03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163f07: callq  0x00007f8aceddb9fa
  0x00007f8ab9163f0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9163f0d: mov    %rsp,%r11
  0x00007f8ab9163f10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163f14: push   %rax
  0x00007f8ab9163f15: mov    %r11,%rax
  0x00007f8ab9163f18: mov    0x50(%rbx),%r11
  0x00007f8ab9163f1c: mov    0x30(%rax),%rsi
  0x00007f8ab9163f20: mov    0x28(%rax),%rdx
  0x00007f8ab9163f24: mov    0x20(%rax),%rcx
  0x00007f8ab9163f28: mov    0x18(%rax),%r8
  0x00007f8ab9163f2c: mov    0x10(%rax),%r9
  0x00007f8ab9163f30: mov    0x8(%rax),%edi
  0x00007f8ab9163f33: mov    %rbx,0x258(%r15)
  0x00007f8ab9163f3a: mov    %rbx,%rax
  0x00007f8ab9163f3d: jmpq   *%r11
  0x00007f8ab9163f40: mov    0x8(%rsi),%ebx
  0x00007f8ab9163f43: shl    $0x3,%rbx
  0x00007f8ab9163f47: cmp    0x10(%rax),%rbx
  0x00007f8ab9163f4b: mov    0x8(%rax),%rbx
  0x00007f8ab9163f4f: je     0x00007f8ab9163f5a
  0x00007f8ab9163f55: jmpq   0x00007f8ab9105c40
  0x00007f8ab9163f5a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9163f62: je     0x00007f8ab916405d
  0x00007f8ab9163f68: jmpq   0x00007f8ab9105c40
  0x00007f8ab9163f6d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9163f75: je     0x00007f8ab916405d
  0x00007f8ab9163f7b: mov    %rsp,%r13
  0x00007f8ab9163f7e: mov    (%rsp),%rax
  0x00007f8ab9163f82: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9163f86: pushfq 
  0x00007f8ab9163f87: sub    $0x8,%rsp
  0x00007f8ab9163f8b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9163f90: sub    $0x80,%rsp
  0x00007f8ab9163f97: mov    %rax,0x78(%rsp)
  0x00007f8ab9163f9c: mov    %rcx,0x70(%rsp)
  0x00007f8ab9163fa1: mov    %rdx,0x68(%rsp)
  0x00007f8ab9163fa6: mov    %rbx,0x60(%rsp)
  0x00007f8ab9163fab: mov    %rbp,0x50(%rsp)
  0x00007f8ab9163fb0: mov    %rsi,0x48(%rsp)
  0x00007f8ab9163fb5: mov    %rdi,0x40(%rsp)
  0x00007f8ab9163fba: mov    %r8,0x38(%rsp)
  0x00007f8ab9163fbf: mov    %r9,0x30(%rsp)
  0x00007f8ab9163fc4: mov    %r10,0x28(%rsp)
  0x00007f8ab9163fc9: mov    %r11,0x20(%rsp)
  0x00007f8ab9163fce: mov    %r12,0x18(%rsp)
  0x00007f8ab9163fd3: mov    %r13,0x10(%rsp)
  0x00007f8ab9163fd8: mov    %r14,0x8(%rsp)
  0x00007f8ab9163fdd: mov    %r15,(%rsp)
  0x00007f8ab9163fe1: sub    $0x200,%rsp
  0x00007f8ab9163fe8: fxsave64 (%rsp)
  0x00007f8ab9163fed: mov    %rbx,%rdi
  0x00007f8ab9163ff0: mov    %rax,%rsi
  0x00007f8ab9163ff3: callq  0x00007f8acef8bbca
  0x00007f8ab9163ff8: fxrstor64 (%rsp)
  0x00007f8ab9163ffd: add    $0x200,%rsp
  0x00007f8ab9164004: mov    (%rsp),%r15
  0x00007f8ab9164008: mov    0x8(%rsp),%r14
  0x00007f8ab916400d: mov    0x10(%rsp),%r13
  0x00007f8ab9164012: mov    0x18(%rsp),%r12
  0x00007f8ab9164017: mov    0x20(%rsp),%r11
  0x00007f8ab916401c: mov    0x28(%rsp),%r10
  0x00007f8ab9164021: mov    0x30(%rsp),%r9
  0x00007f8ab9164026: mov    0x38(%rsp),%r8
  0x00007f8ab916402b: mov    0x40(%rsp),%rdi
  0x00007f8ab9164030: mov    0x48(%rsp),%rsi
  0x00007f8ab9164035: mov    0x50(%rsp),%rbp
  0x00007f8ab916403a: mov    0x60(%rsp),%rbx
  0x00007f8ab916403f: mov    0x68(%rsp),%rdx
  0x00007f8ab9164044: mov    0x70(%rsp),%rcx
  0x00007f8ab9164049: mov    0x78(%rsp),%rax
  0x00007f8ab916404e: add    $0x80,%rsp
  0x00007f8ab9164055: add    $0x8,%rsp
  0x00007f8ab9164059: popfq  
  0x00007f8ab916405a: mov    %r13,%rsp
  0x00007f8ab916405d: pop    %rax
  0x00007f8ab916405e: mov    %rsp,%r13
  0x00007f8ab9164061: sub    $0x40,%rsp
  0x00007f8ab9164065: mov    %rax,(%rsp)
  0x00007f8ab9164069: mov    %rsi,0x30(%rsp)
  0x00007f8ab916406e: mov    %rdx,0x28(%rsp)
  0x00007f8ab9164073: mov    %rcx,0x20(%rsp)
  0x00007f8ab9164078: mov    %r8,0x18(%rsp)
  0x00007f8ab916407d: mov    %r9,0x10(%rsp)
  0x00007f8ab9164082: mov    %edi,0x8(%rsp)
  0x00007f8ab9164086: mov    0x40(%rbx),%rcx
  0x00007f8ab916408a: jmpq   *%rcx

AHE@0x00007f8ac812f0b8: 0xbbbbabbbbb000000 i2c: 0x00007f8ab9164160 c2i: 0x00007f8ab91642d6 c2iUV: 0x00007f8ab91642a9
i2c argument handler #107 for: receiver (Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V (702 bytes generated)
c2i argument handler starts at 0x7f8ab91642d6
  0x00007f8ab9164160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9164164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916416e: cmp    %r11,%rax
  0x00007f8ab9164171: jbe    0x00007f8ab916418a
  0x00007f8ab9164177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9164181: cmp    %r11,%rax
  0x00007f8ab9164184: jb     0x00007f8ab916424d
  0x00007f8ab916418a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9164194: cmp    %r11,%rax
  0x00007f8ab9164197: jbe    0x00007f8ab91641b0
  0x00007f8ab916419d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91641a7: cmp    %r11,%rax
  0x00007f8ab91641aa: jb     0x00007f8ab916424d
  0x00007f8ab91641b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91641ba: cmp    %r11,%rax
  0x00007f8ab91641bd: jbe    0x00007f8ab91641d6
  0x00007f8ab91641c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91641cd: cmp    %r11,%rax
  0x00007f8ab91641d0: jb     0x00007f8ab916424d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91641d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91641db: sub    $0x80,%rsp
  0x00007f8ab91641e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91641e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91641ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91641f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91641f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91641fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164200: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164205: mov    %r8,0x38(%rsp)
  0x00007f8ab916420a: mov    %r9,0x30(%rsp)
  0x00007f8ab916420f: mov    %r10,0x28(%rsp)
  0x00007f8ab9164214: mov    %r11,0x20(%rsp)
  0x00007f8ab9164219: mov    %r12,0x18(%rsp)
  0x00007f8ab916421e: mov    %r13,0x10(%rsp)
  0x00007f8ab9164223: mov    %r14,0x8(%rsp)
  0x00007f8ab9164228: mov    %r15,(%rsp)
  0x00007f8ab916422c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9164236: movabs $0x7f8ab91641d6,%rsi
  0x00007f8ab9164240: mov    %rsp,%rdx
  0x00007f8ab9164243: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164247: callq  0x00007f8aceddb9fa
  0x00007f8ab916424c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916424d: mov    %rsp,%r11
  0x00007f8ab9164250: sub    $0x20,%rsp
  0x00007f8ab9164254: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164258: push   %rax
  0x00007f8ab9164259: mov    %r11,%rax
  0x00007f8ab916425c: mov    0x50(%rbx),%r11
  0x00007f8ab9164260: mov    0x50(%rax),%rsi
  0x00007f8ab9164264: mov    0x48(%rax),%rdx
  0x00007f8ab9164268: mov    0x40(%rax),%rcx
  0x00007f8ab916426c: mov    0x38(%rax),%r8
  0x00007f8ab9164270: mov    0x30(%rax),%r9d
  0x00007f8ab9164274: mov    0x28(%rax),%rdi
  0x00007f8ab9164278: mov    0x20(%rax),%r13
  0x00007f8ab916427c: mov    %r13,0x8(%rsp)
  0x00007f8ab9164281: mov    0x18(%rax),%r13
  0x00007f8ab9164285: mov    %r13,0x10(%rsp)
  0x00007f8ab916428a: mov    0x10(%rax),%r13
  0x00007f8ab916428e: mov    %r13,0x18(%rsp)
  0x00007f8ab9164293: mov    0x8(%rax),%r13
  0x00007f8ab9164297: mov    %r13,0x20(%rsp)
  0x00007f8ab916429c: mov    %rbx,0x258(%r15)
  0x00007f8ab91642a3: mov    %rbx,%rax
  0x00007f8ab91642a6: jmpq   *%r11
  0x00007f8ab91642a9: mov    0x8(%rsi),%ebx
  0x00007f8ab91642ac: shl    $0x3,%rbx
  0x00007f8ab91642b0: cmp    0x10(%rax),%rbx
  0x00007f8ab91642b4: mov    0x8(%rax),%rbx
  0x00007f8ab91642b8: je     0x00007f8ab91642c3
  0x00007f8ab91642be: jmpq   0x00007f8ab9105c40
  0x00007f8ab91642c3: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91642cb: je     0x00007f8ab91643c6
  0x00007f8ab91642d1: jmpq   0x00007f8ab9105c40
  0x00007f8ab91642d6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91642de: je     0x00007f8ab91643c6
  0x00007f8ab91642e4: mov    %rsp,%r13
  0x00007f8ab91642e7: mov    (%rsp),%rax
  0x00007f8ab91642eb: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91642ef: pushfq 
  0x00007f8ab91642f0: sub    $0x8,%rsp
  0x00007f8ab91642f4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91642f9: sub    $0x80,%rsp
  0x00007f8ab9164300: mov    %rax,0x78(%rsp)
  0x00007f8ab9164305: mov    %rcx,0x70(%rsp)
  0x00007f8ab916430a: mov    %rdx,0x68(%rsp)
  0x00007f8ab916430f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164314: mov    %rbp,0x50(%rsp)
  0x00007f8ab9164319: mov    %rsi,0x48(%rsp)
  0x00007f8ab916431e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164323: mov    %r8,0x38(%rsp)
  0x00007f8ab9164328: mov    %r9,0x30(%rsp)
  0x00007f8ab916432d: mov    %r10,0x28(%rsp)
  0x00007f8ab9164332: mov    %r11,0x20(%rsp)
  0x00007f8ab9164337: mov    %r12,0x18(%rsp)
  0x00007f8ab916433c: mov    %r13,0x10(%rsp)
  0x00007f8ab9164341: mov    %r14,0x8(%rsp)
  0x00007f8ab9164346: mov    %r15,(%rsp)
  0x00007f8ab916434a: sub    $0x200,%rsp
  0x00007f8ab9164351: fxsave64 (%rsp)
  0x00007f8ab9164356: mov    %rbx,%rdi
  0x00007f8ab9164359: mov    %rax,%rsi
  0x00007f8ab916435c: callq  0x00007f8acef8bbca
  0x00007f8ab9164361: fxrstor64 (%rsp)
  0x00007f8ab9164366: add    $0x200,%rsp
  0x00007f8ab916436d: mov    (%rsp),%r15
  0x00007f8ab9164371: mov    0x8(%rsp),%r14
  0x00007f8ab9164376: mov    0x10(%rsp),%r13
  0x00007f8ab916437b: mov    0x18(%rsp),%r12
  0x00007f8ab9164380: mov    0x20(%rsp),%r11
  0x00007f8ab9164385: mov    0x28(%rsp),%r10
  0x00007f8ab916438a: mov    0x30(%rsp),%r9
  0x00007f8ab916438f: mov    0x38(%rsp),%r8
  0x00007f8ab9164394: mov    0x40(%rsp),%rdi
  0x00007f8ab9164399: mov    0x48(%rsp),%rsi
  0x00007f8ab916439e: mov    0x50(%rsp),%rbp
  0x00007f8ab91643a3: mov    0x60(%rsp),%rbx
  0x00007f8ab91643a8: mov    0x68(%rsp),%rdx
  0x00007f8ab91643ad: mov    0x70(%rsp),%rcx
  0x00007f8ab91643b2: mov    0x78(%rsp),%rax
  0x00007f8ab91643b7: add    $0x80,%rsp
  0x00007f8ab91643be: add    $0x8,%rsp
  0x00007f8ab91643c2: popfq  
  0x00007f8ab91643c3: mov    %r13,%rsp
  0x00007f8ab91643c6: pop    %rax
  0x00007f8ab91643c7: mov    %rsp,%r13
  0x00007f8ab91643ca: sub    $0x60,%rsp
  0x00007f8ab91643ce: mov    %rax,(%rsp)
  0x00007f8ab91643d2: mov    %rsi,0x50(%rsp)
  0x00007f8ab91643d7: mov    %rdx,0x48(%rsp)
  0x00007f8ab91643dc: mov    %rcx,0x40(%rsp)
  0x00007f8ab91643e1: mov    %r8,0x38(%rsp)
  0x00007f8ab91643e6: mov    %r9d,0x30(%rsp)
  0x00007f8ab91643eb: mov    %rdi,0x28(%rsp)
  0x00007f8ab91643f0: mov    0x60(%rsp),%rax
  0x00007f8ab91643f5: mov    %rax,0x20(%rsp)
  0x00007f8ab91643fa: mov    0x68(%rsp),%rax
  0x00007f8ab91643ff: mov    %rax,0x18(%rsp)
  0x00007f8ab9164404: mov    0x70(%rsp),%rax
  0x00007f8ab9164409: mov    %rax,0x10(%rsp)
  0x00007f8ab916440e: mov    0x78(%rsp),%rax
  0x00007f8ab9164413: mov    %rax,0x8(%rsp)
  0x00007f8ab9164418: mov    0x40(%rbx),%rcx
  0x00007f8ab916441c: jmpq   *%rcx

AHE@0x00007f8ac812f100: 0xbbbbabb0 i2c: 0x00007f8ab91644e0 c2i: 0x00007f8ab916463b c2iUV: 0x00007f8ab916460e
i2c argument handler #108 for: receiver (Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (645 bytes generated)
c2i argument handler starts at 0x7f8ab916463b
  0x00007f8ab91644e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91644e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91644ee: cmp    %r11,%rax
  0x00007f8ab91644f1: jbe    0x00007f8ab916450a
  0x00007f8ab91644f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9164501: cmp    %r11,%rax
  0x00007f8ab9164504: jb     0x00007f8ab91645cd
  0x00007f8ab916450a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9164514: cmp    %r11,%rax
  0x00007f8ab9164517: jbe    0x00007f8ab9164530
  0x00007f8ab916451d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9164527: cmp    %r11,%rax
  0x00007f8ab916452a: jb     0x00007f8ab91645cd
  0x00007f8ab9164530: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916453a: cmp    %r11,%rax
  0x00007f8ab916453d: jbe    0x00007f8ab9164556
  0x00007f8ab9164543: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916454d: cmp    %r11,%rax
  0x00007f8ab9164550: jb     0x00007f8ab91645cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9164556: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916455b: sub    $0x80,%rsp
  0x00007f8ab9164562: mov    %rax,0x78(%rsp)
  0x00007f8ab9164567: mov    %rcx,0x70(%rsp)
  0x00007f8ab916456c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9164571: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164576: mov    %rbp,0x50(%rsp)
  0x00007f8ab916457b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164580: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164585: mov    %r8,0x38(%rsp)
  0x00007f8ab916458a: mov    %r9,0x30(%rsp)
  0x00007f8ab916458f: mov    %r10,0x28(%rsp)
  0x00007f8ab9164594: mov    %r11,0x20(%rsp)
  0x00007f8ab9164599: mov    %r12,0x18(%rsp)
  0x00007f8ab916459e: mov    %r13,0x10(%rsp)
  0x00007f8ab91645a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91645a8: mov    %r15,(%rsp)
  0x00007f8ab91645ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91645b6: movabs $0x7f8ab9164556,%rsi
  0x00007f8ab91645c0: mov    %rsp,%rdx
  0x00007f8ab91645c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91645c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91645cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91645cd: mov    %rsp,%r11
  0x00007f8ab91645d0: sub    $0x10,%rsp
  0x00007f8ab91645d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91645d8: push   %rax
  0x00007f8ab91645d9: mov    %r11,%rax
  0x00007f8ab91645dc: mov    0x50(%rbx),%r11
  0x00007f8ab91645e0: mov    0x38(%rax),%rsi
  0x00007f8ab91645e4: mov    0x30(%rax),%rdx
  0x00007f8ab91645e8: mov    0x28(%rax),%rcx
  0x00007f8ab91645ec: mov    0x20(%rax),%r8
  0x00007f8ab91645f0: mov    0x18(%rax),%r9d
  0x00007f8ab91645f4: mov    0x10(%rax),%rdi
  0x00007f8ab91645f8: mov    0x8(%rax),%r13
  0x00007f8ab91645fc: mov    %r13,0x8(%rsp)
  0x00007f8ab9164601: mov    %rbx,0x258(%r15)
  0x00007f8ab9164608: mov    %rbx,%rax
  0x00007f8ab916460b: jmpq   *%r11
  0x00007f8ab916460e: mov    0x8(%rsi),%ebx
  0x00007f8ab9164611: shl    $0x3,%rbx
  0x00007f8ab9164615: cmp    0x10(%rax),%rbx
  0x00007f8ab9164619: mov    0x8(%rax),%rbx
  0x00007f8ab916461d: je     0x00007f8ab9164628
  0x00007f8ab9164623: jmpq   0x00007f8ab9105c40
  0x00007f8ab9164628: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9164630: je     0x00007f8ab916472b
  0x00007f8ab9164636: jmpq   0x00007f8ab9105c40
  0x00007f8ab916463b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9164643: je     0x00007f8ab916472b
  0x00007f8ab9164649: mov    %rsp,%r13
  0x00007f8ab916464c: mov    (%rsp),%rax
  0x00007f8ab9164650: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164654: pushfq 
  0x00007f8ab9164655: sub    $0x8,%rsp
  0x00007f8ab9164659: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916465e: sub    $0x80,%rsp
  0x00007f8ab9164665: mov    %rax,0x78(%rsp)
  0x00007f8ab916466a: mov    %rcx,0x70(%rsp)
  0x00007f8ab916466f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9164674: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164679: mov    %rbp,0x50(%rsp)
  0x00007f8ab916467e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164683: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164688: mov    %r8,0x38(%rsp)
  0x00007f8ab916468d: mov    %r9,0x30(%rsp)
  0x00007f8ab9164692: mov    %r10,0x28(%rsp)
  0x00007f8ab9164697: mov    %r11,0x20(%rsp)
  0x00007f8ab916469c: mov    %r12,0x18(%rsp)
  0x00007f8ab91646a1: mov    %r13,0x10(%rsp)
  0x00007f8ab91646a6: mov    %r14,0x8(%rsp)
  0x00007f8ab91646ab: mov    %r15,(%rsp)
  0x00007f8ab91646af: sub    $0x200,%rsp
  0x00007f8ab91646b6: fxsave64 (%rsp)
  0x00007f8ab91646bb: mov    %rbx,%rdi
  0x00007f8ab91646be: mov    %rax,%rsi
  0x00007f8ab91646c1: callq  0x00007f8acef8bbca
  0x00007f8ab91646c6: fxrstor64 (%rsp)
  0x00007f8ab91646cb: add    $0x200,%rsp
  0x00007f8ab91646d2: mov    (%rsp),%r15
  0x00007f8ab91646d6: mov    0x8(%rsp),%r14
  0x00007f8ab91646db: mov    0x10(%rsp),%r13
  0x00007f8ab91646e0: mov    0x18(%rsp),%r12
  0x00007f8ab91646e5: mov    0x20(%rsp),%r11
  0x00007f8ab91646ea: mov    0x28(%rsp),%r10
  0x00007f8ab91646ef: mov    0x30(%rsp),%r9
  0x00007f8ab91646f4: mov    0x38(%rsp),%r8
  0x00007f8ab91646f9: mov    0x40(%rsp),%rdi
  0x00007f8ab91646fe: mov    0x48(%rsp),%rsi
  0x00007f8ab9164703: mov    0x50(%rsp),%rbp
  0x00007f8ab9164708: mov    0x60(%rsp),%rbx
  0x00007f8ab916470d: mov    0x68(%rsp),%rdx
  0x00007f8ab9164712: mov    0x70(%rsp),%rcx
  0x00007f8ab9164717: mov    0x78(%rsp),%rax
  0x00007f8ab916471c: add    $0x80,%rsp
  0x00007f8ab9164723: add    $0x8,%rsp
  0x00007f8ab9164727: popfq  
  0x00007f8ab9164728: mov    %r13,%rsp
  0x00007f8ab916472b: pop    %rax
  0x00007f8ab916472c: mov    %rsp,%r13
  0x00007f8ab916472f: sub    $0x40,%rsp
  0x00007f8ab9164733: mov    %rax,(%rsp)
  0x00007f8ab9164737: mov    %rsi,0x38(%rsp)
  0x00007f8ab916473c: mov    %rdx,0x30(%rsp)
  0x00007f8ab9164741: mov    %rcx,0x28(%rsp)
  0x00007f8ab9164746: mov    %r8,0x20(%rsp)
  0x00007f8ab916474b: mov    %r9d,0x18(%rsp)
  0x00007f8ab9164750: mov    %rdi,0x10(%rsp)
  0x00007f8ab9164755: mov    0x40(%rsp),%rax
  0x00007f8ab916475a: mov    %rax,0x8(%rsp)
  0x00007f8ab916475f: mov    0x40(%rbx),%rcx
  0x00007f8ab9164763: jmpq   *%rcx

AHE@0x00007f8ac812f148: 0xbbebeb00 i2c: 0x00007f8ab9164820 c2i: 0x00007f8ab9164966 c2iUV: 0x00007f8ab9164939
i2c argument handler #109 for: static (Ljava/lang/String;JJ[C)I (634 bytes generated)
c2i argument handler starts at 0x7f8ab9164966
  0x00007f8ab9164820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9164824: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916482e: cmp    %r11,%rax
  0x00007f8ab9164831: jbe    0x00007f8ab916484a
  0x00007f8ab9164837: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9164841: cmp    %r11,%rax
  0x00007f8ab9164844: jb     0x00007f8ab916490d
  0x00007f8ab916484a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9164854: cmp    %r11,%rax
  0x00007f8ab9164857: jbe    0x00007f8ab9164870
  0x00007f8ab916485d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9164867: cmp    %r11,%rax
  0x00007f8ab916486a: jb     0x00007f8ab916490d
  0x00007f8ab9164870: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916487a: cmp    %r11,%rax
  0x00007f8ab916487d: jbe    0x00007f8ab9164896
  0x00007f8ab9164883: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916488d: cmp    %r11,%rax
  0x00007f8ab9164890: jb     0x00007f8ab916490d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9164896: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916489b: sub    $0x80,%rsp
  0x00007f8ab91648a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91648a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91648ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91648b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91648b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91648bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91648c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91648c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91648ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91648cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91648d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91648d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91648de: mov    %r13,0x10(%rsp)
  0x00007f8ab91648e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91648e8: mov    %r15,(%rsp)
  0x00007f8ab91648ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91648f6: movabs $0x7f8ab9164896,%rsi
  0x00007f8ab9164900: mov    %rsp,%rdx
  0x00007f8ab9164903: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164907: callq  0x00007f8aceddb9fa
  0x00007f8ab916490c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916490d: mov    %rsp,%r11
  0x00007f8ab9164910: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164914: push   %rax
  0x00007f8ab9164915: mov    %r11,%rax
  0x00007f8ab9164918: mov    0x50(%rbx),%r11
  0x00007f8ab916491c: mov    0x30(%rax),%rsi
  0x00007f8ab9164920: mov    0x20(%rax),%rdx
  0x00007f8ab9164924: mov    0x10(%rax),%rcx
  0x00007f8ab9164928: mov    0x8(%rax),%r8
  0x00007f8ab916492c: mov    %rbx,0x258(%r15)
  0x00007f8ab9164933: mov    %rbx,%rax
  0x00007f8ab9164936: jmpq   *%r11
  0x00007f8ab9164939: mov    0x8(%rsi),%ebx
  0x00007f8ab916493c: shl    $0x3,%rbx
  0x00007f8ab9164940: cmp    0x10(%rax),%rbx
  0x00007f8ab9164944: mov    0x8(%rax),%rbx
  0x00007f8ab9164948: je     0x00007f8ab9164953
  0x00007f8ab916494e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9164953: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916495b: je     0x00007f8ab9164a56
  0x00007f8ab9164961: jmpq   0x00007f8ab9105c40
  0x00007f8ab9164966: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916496e: je     0x00007f8ab9164a56
  0x00007f8ab9164974: mov    %rsp,%r13
  0x00007f8ab9164977: mov    (%rsp),%rax
  0x00007f8ab916497b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916497f: pushfq 
  0x00007f8ab9164980: sub    $0x8,%rsp
  0x00007f8ab9164984: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9164989: sub    $0x80,%rsp
  0x00007f8ab9164990: mov    %rax,0x78(%rsp)
  0x00007f8ab9164995: mov    %rcx,0x70(%rsp)
  0x00007f8ab916499a: mov    %rdx,0x68(%rsp)
  0x00007f8ab916499f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91649a4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91649a9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91649ae: mov    %rdi,0x40(%rsp)
  0x00007f8ab91649b3: mov    %r8,0x38(%rsp)
  0x00007f8ab91649b8: mov    %r9,0x30(%rsp)
  0x00007f8ab91649bd: mov    %r10,0x28(%rsp)
  0x00007f8ab91649c2: mov    %r11,0x20(%rsp)
  0x00007f8ab91649c7: mov    %r12,0x18(%rsp)
  0x00007f8ab91649cc: mov    %r13,0x10(%rsp)
  0x00007f8ab91649d1: mov    %r14,0x8(%rsp)
  0x00007f8ab91649d6: mov    %r15,(%rsp)
  0x00007f8ab91649da: sub    $0x200,%rsp
  0x00007f8ab91649e1: fxsave64 (%rsp)
  0x00007f8ab91649e6: mov    %rbx,%rdi
  0x00007f8ab91649e9: mov    %rax,%rsi
  0x00007f8ab91649ec: callq  0x00007f8acef8bbca
  0x00007f8ab91649f1: fxrstor64 (%rsp)
  0x00007f8ab91649f6: add    $0x200,%rsp
  0x00007f8ab91649fd: mov    (%rsp),%r15
  0x00007f8ab9164a01: mov    0x8(%rsp),%r14
  0x00007f8ab9164a06: mov    0x10(%rsp),%r13
  0x00007f8ab9164a0b: mov    0x18(%rsp),%r12
  0x00007f8ab9164a10: mov    0x20(%rsp),%r11
  0x00007f8ab9164a15: mov    0x28(%rsp),%r10
  0x00007f8ab9164a1a: mov    0x30(%rsp),%r9
  0x00007f8ab9164a1f: mov    0x38(%rsp),%r8
  0x00007f8ab9164a24: mov    0x40(%rsp),%rdi
  0x00007f8ab9164a29: mov    0x48(%rsp),%rsi
  0x00007f8ab9164a2e: mov    0x50(%rsp),%rbp
  0x00007f8ab9164a33: mov    0x60(%rsp),%rbx
  0x00007f8ab9164a38: mov    0x68(%rsp),%rdx
  0x00007f8ab9164a3d: mov    0x70(%rsp),%rcx
  0x00007f8ab9164a42: mov    0x78(%rsp),%rax
  0x00007f8ab9164a47: add    $0x80,%rsp
  0x00007f8ab9164a4e: add    $0x8,%rsp
  0x00007f8ab9164a52: popfq  
  0x00007f8ab9164a53: mov    %r13,%rsp
  0x00007f8ab9164a56: pop    %rax
  0x00007f8ab9164a57: mov    %rsp,%r13
  0x00007f8ab9164a5a: sub    $0x40,%rsp
  0x00007f8ab9164a5e: mov    %rax,(%rsp)
  0x00007f8ab9164a62: mov    %rsi,0x30(%rsp)
  0x00007f8ab9164a67: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9164a71: mov    %rax,0x28(%rsp)
  0x00007f8ab9164a76: mov    %rdx,0x20(%rsp)
  0x00007f8ab9164a7b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9164a85: mov    %rax,0x18(%rsp)
  0x00007f8ab9164a8a: mov    %rcx,0x10(%rsp)
  0x00007f8ab9164a8f: mov    %r8,0x8(%rsp)
  0x00007f8ab9164a94: mov    0x40(%rbx),%rcx
  0x00007f8ab9164a98: jmpq   *%rcx

Decoding ExceptionBlob 0x00007f8ab9004e90
  0x00007f8ab9004ee0: push   %rdx
  0x00007f8ab9004ee1: sub    $0x8,%rsp
  0x00007f8ab9004ee5: mov    %rbp,(%rsp)
  0x00007f8ab9004ee9: mov    %rax,0x2d0(%r15)
  0x00007f8ab9004ef0: mov    %rdx,0x2d8(%r15)
  0x00007f8ab9004ef7: movabs $0x7f8ab9004ef7,%r10
  0x00007f8ab9004f01: mov    %r10,0x208(%r15)
  0x00007f8ab9004f08: mov    %rsp,0x200(%r15)
  0x00007f8ab9004f0f: mov    %r15,%rdi
  0x00007f8ab9004f12: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9004f16: callq  0x00007f8acef7b65e
  0x00007f8ab9004f1b: movabs $0x0,%r10
  0x00007f8ab9004f25: mov    %r10,0x200(%r15)
  0x00007f8ab9004f2c: movabs $0x0,%r10
  0x00007f8ab9004f36: mov    %r10,0x208(%r15)
  0x00007f8ab9004f3d: mov    (%rsp),%rbp
  0x00007f8ab9004f41: add    $0x8,%rsp
  0x00007f8ab9004f45: pop    %rdx
  0x00007f8ab9004f46: mov    %rax,%r8
  0x00007f8ab9004f49: mov    0x2d0(%r15),%rax
  0x00007f8ab9004f50: mov    0x2d8(%r15),%rdx
  0x00007f8ab9004f57: movq   $0x0,0x2e0(%r15)
  0x00007f8ab9004f62: movq   $0x0,0x2d8(%r15)
  0x00007f8ab9004f6d: movq   $0x0,0x2d0(%r15)
  0x00007f8ab9004f78: jmpq   *%r8
  0x00007f8ab9004f7b: hlt    
  0x00007f8ab9004f7c: hlt    
  0x00007f8ab9004f7d: hlt    
  0x00007f8ab9004f7e: hlt    
  0x00007f8ab9004f7f: hlt    

Decoding RuntimeStub - _new_instance_Java 0x00007f8ab91064d0
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab9106520: sub    $0x8,%rsp
  0x00007f8ab9106527: mov    %rbp,(%rsp)
  0x00007f8ab910652b: mov    %rsp,0x200(%r15)
  0x00007f8ab9106532: mov    %rsi,%rdi
  0x00007f8ab9106535: mov    %r15,%rsi
  0x00007f8ab9106538: movabs $0x7f8acef776a2,%r10
  0x00007f8ab9106542: callq  *%r10
  0x00007f8ab9106545: mov    %r12,0x200(%r15)
  0x00007f8ab910654c: mov    %r12,0x208(%r15)
  0x00007f8ab9106553: mov    0x260(%r15),%rax
  0x00007f8ab910655a: mov    %r12,0x260(%r15)
  0x00007f8ab9106561: cmp    0x8(%r15),%r12
  0x00007f8ab9106565: jne    0x00007f8ab9106569
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab9106567: pop    %rbp
  0x00007f8ab9106568: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab9106569: movabs $0x7f8ab9000420,%r10
  0x00007f8ab9106573: xor    %ebx,%ebx
  0x00007f8ab9106575: pop    %rbp
  0x00007f8ab9106576: jmpq   *%r10
  0x00007f8ab9106579: hlt    
  0x00007f8ab910657a: hlt    
  0x00007f8ab910657b: hlt    
  0x00007f8ab910657c: hlt    
  0x00007f8ab910657d: hlt    
  0x00007f8ab910657e: hlt    
  0x00007f8ab910657f: hlt    

Decoding RuntimeStub - _new_array_Java 0x00007f8ab9165390
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91653e0: sub    $0x8,%rsp
  0x00007f8ab91653e7: mov    %rbp,(%rsp)
  0x00007f8ab91653eb: mov    %rsp,0x200(%r15)
  0x00007f8ab91653f2: mov    %rsi,%rdi
  0x00007f8ab91653f5: mov    %edx,%esi
  0x00007f8ab91653f7: mov    %r15,%rdx
  0x00007f8ab91653fa: movabs $0x7f8acef779b4,%r10
  0x00007f8ab9165404: callq  *%r10
  0x00007f8ab9165407: mov    %r12,0x200(%r15)
  0x00007f8ab916540e: mov    %r12,0x208(%r15)
  0x00007f8ab9165415: mov    0x260(%r15),%rax
  0x00007f8ab916541c: mov    %r12,0x260(%r15)
  0x00007f8ab9165423: cmp    0x8(%r15),%r12
  0x00007f8ab9165427: jne    0x00007f8ab916542b
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab9165429: pop    %rbp
  0x00007f8ab916542a: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab916542b: movabs $0x7f8ab9000420,%r10
  0x00007f8ab9165435: xor    %ebx,%ebx
  0x00007f8ab9165437: pop    %rbp
  0x00007f8ab9165438: jmpq   *%r10
  0x00007f8ab916543b: hlt    
  0x00007f8ab916543c: hlt    
  0x00007f8ab916543d: hlt    
  0x00007f8ab916543e: hlt    
  0x00007f8ab916543f: hlt    

Decoding RuntimeStub - dtrace_object_alloc Runtime1 stub 0x00007f8ab91650d0
  0x00007f8ab9165140: push   %rbp
  0x00007f8ab9165141: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab9165144: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9165149: sub    $0x80,%rsp
  0x00007f8ab9165150: mov    %rax,0x78(%rsp)
  0x00007f8ab9165155: mov    %rcx,0x70(%rsp)
  0x00007f8ab916515a: mov    %rdx,0x68(%rsp)
  0x00007f8ab916515f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165164: mov    %rbp,0x50(%rsp)
  0x00007f8ab9165169: mov    %rsi,0x48(%rsp)
  0x00007f8ab916516e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9165173: mov    %r8,0x38(%rsp)
  0x00007f8ab9165178: mov    %r9,0x30(%rsp)
  0x00007f8ab916517d: mov    %r10,0x28(%rsp)
  0x00007f8ab9165182: mov    %r11,0x20(%rsp)
  0x00007f8ab9165187: mov    %r12,0x18(%rsp)
  0x00007f8ab916518c: mov    %r13,0x10(%rsp)
  0x00007f8ab9165191: mov    %r14,0x8(%rsp)
  0x00007f8ab9165196: mov    %r15,(%rsp)
  0x00007f8ab916519a: sub    $0x150,%rsp
  0x00007f8ab91651a1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91651ad: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91651b3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91651b9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91651bf: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91651c5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91651cb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91651d1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91651d7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91651dd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91651e3: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91651e9: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91651ef: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91651f5: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91651fb: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9165201: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9165207: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9165210: mov    %rax,%rdi
  0x00007f8ab9165213: callq  0x00007f8acef87ff6
  ;; restore_live_registers
  0x00007f8ab9165218: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab916521e: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9165224: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab916522a: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9165230: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9165236: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab916523c: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9165242: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9165248: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab916524e: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9165254: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab916525a: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9165260: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9165266: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab916526c: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9165272: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab916527b: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9165287: je     0x00007f8ab9165304
  0x00007f8ab916528d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9165292: sub    $0x80,%rsp
  0x00007f8ab9165299: mov    %rax,0x78(%rsp)
  0x00007f8ab916529e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91652a3: mov    %rdx,0x68(%rsp)
  0x00007f8ab91652a8: mov    %rbx,0x60(%rsp)
  0x00007f8ab91652ad: mov    %rbp,0x50(%rsp)
  0x00007f8ab91652b2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91652b7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91652bc: mov    %r8,0x38(%rsp)
  0x00007f8ab91652c1: mov    %r9,0x30(%rsp)
  0x00007f8ab91652c6: mov    %r10,0x28(%rsp)
  0x00007f8ab91652cb: mov    %r11,0x20(%rsp)
  0x00007f8ab91652d0: mov    %r12,0x18(%rsp)
  0x00007f8ab91652d5: mov    %r13,0x10(%rsp)
  0x00007f8ab91652da: mov    %r14,0x8(%rsp)
  0x00007f8ab91652df: mov    %r15,(%rsp)
  0x00007f8ab91652e3: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91652ed: movabs $0x7f8ab916528d,%rsi
  0x00007f8ab91652f7: mov    %rsp,%rdx
  0x00007f8ab91652fa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91652fe: callq  0x00007f8aceddb9fa
  0x00007f8ab9165303: hlt    
  0x00007f8ab9165304: add    $0x150,%rsp
  0x00007f8ab916530b: mov    (%rsp),%r15
  0x00007f8ab916530f: mov    0x8(%rsp),%r14
  0x00007f8ab9165314: mov    0x10(%rsp),%r13
  0x00007f8ab9165319: mov    0x18(%rsp),%r12
  0x00007f8ab916531e: mov    0x20(%rsp),%r11
  0x00007f8ab9165323: mov    0x28(%rsp),%r10
  0x00007f8ab9165328: mov    0x30(%rsp),%r9
  0x00007f8ab916532d: mov    0x38(%rsp),%r8
  0x00007f8ab9165332: mov    0x40(%rsp),%rdi
  0x00007f8ab9165337: mov    0x48(%rsp),%rsi
  0x00007f8ab916533c: mov    0x50(%rsp),%rbp
  0x00007f8ab9165341: mov    0x60(%rsp),%rbx
  0x00007f8ab9165346: mov    0x68(%rsp),%rdx
  0x00007f8ab916534b: mov    0x70(%rsp),%rcx
  0x00007f8ab9165350: mov    0x78(%rsp),%rax
  0x00007f8ab9165355: add    $0x80,%rsp
  0x00007f8ab916535c: leaveq 
  0x00007f8ab916535d: retq   
  0x00007f8ab916535e: nop
  0x00007f8ab916535f: nop

Decoding RuntimeStub - unwind_exception Runtime1 stub 0x00007f8ab9164e50
  0x00007f8ab9164ee0: movabs $0xdead,%rbx
  0x00007f8ab9164eea: movabs $0xdead,%rcx
  0x00007f8ab9164ef4: movabs $0xdead,%rdx
  0x00007f8ab9164efe: movabs $0xdead,%rsi
  0x00007f8ab9164f08: movabs $0xdead,%rdi
  0x00007f8ab9164f12: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab9164f1d: je     0x00007f8ab9164f9a
  0x00007f8ab9164f23: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9164f28: sub    $0x80,%rsp
  0x00007f8ab9164f2f: mov    %rax,0x78(%rsp)
  0x00007f8ab9164f34: mov    %rcx,0x70(%rsp)
  0x00007f8ab9164f39: mov    %rdx,0x68(%rsp)
  0x00007f8ab9164f3e: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164f43: mov    %rbp,0x50(%rsp)
  0x00007f8ab9164f48: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164f4d: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164f52: mov    %r8,0x38(%rsp)
  0x00007f8ab9164f57: mov    %r9,0x30(%rsp)
  0x00007f8ab9164f5c: mov    %r10,0x28(%rsp)
  0x00007f8ab9164f61: mov    %r11,0x20(%rsp)
  0x00007f8ab9164f66: mov    %r12,0x18(%rsp)
  0x00007f8ab9164f6b: mov    %r13,0x10(%rsp)
  0x00007f8ab9164f70: mov    %r14,0x8(%rsp)
  0x00007f8ab9164f75: mov    %r15,(%rsp)
  0x00007f8ab9164f79: movabs $0x7f8acf15ca37,%rdi
  0x00007f8ab9164f83: movabs $0x7f8ab9164f23,%rsi
  0x00007f8ab9164f8d: mov    %rsp,%rdx
  0x00007f8ab9164f90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164f94: callq  0x00007f8aceddb9fa
  0x00007f8ab9164f99: hlt    
  0x00007f8ab9164f9a: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab9164fa5: je     0x00007f8ab9165022
  0x00007f8ab9164fab: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9164fb0: sub    $0x80,%rsp
  0x00007f8ab9164fb7: mov    %rax,0x78(%rsp)
  0x00007f8ab9164fbc: mov    %rcx,0x70(%rsp)
  0x00007f8ab9164fc1: mov    %rdx,0x68(%rsp)
  0x00007f8ab9164fc6: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164fcb: mov    %rbp,0x50(%rsp)
  0x00007f8ab9164fd0: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164fd5: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164fda: mov    %r8,0x38(%rsp)
  0x00007f8ab9164fdf: mov    %r9,0x30(%rsp)
  0x00007f8ab9164fe4: mov    %r10,0x28(%rsp)
  0x00007f8ab9164fe9: mov    %r11,0x20(%rsp)
  0x00007f8ab9164fee: mov    %r12,0x18(%rsp)
  0x00007f8ab9164ff3: mov    %r13,0x10(%rsp)
  0x00007f8ab9164ff8: mov    %r14,0x8(%rsp)
  0x00007f8ab9164ffd: mov    %r15,(%rsp)
  0x00007f8ab9165001: movabs $0x7f8acf15ca53,%rdi
  0x00007f8ab916500b: movabs $0x7f8ab9164fab,%rsi
  0x00007f8ab9165015: mov    %rsp,%rdx
  0x00007f8ab9165018: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916501c: callq  0x00007f8aceddb9fa
  0x00007f8ab9165021: hlt    
  0x00007f8ab9165022: emms   
  0x00007f8ab9165024: mov    %rax,%r14
  0x00007f8ab9165027: mov    (%rsp),%rdx
  0x00007f8ab916502b: mov    %rdx,%rsi
  0x00007f8ab916502e: mov    %r15,%rdi
  0x00007f8ab9165031: test   $0xf,%esp
  0x00007f8ab9165037: je     0x00007f8ab916504f
  0x00007f8ab916503d: sub    $0x8,%rsp
  0x00007f8ab9165041: callq  0x00007f8acef859be
  0x00007f8ab9165046: add    $0x8,%rsp
  0x00007f8ab916504a: jmpq   0x00007f8ab9165054
  0x00007f8ab916504f: callq  0x00007f8acef859be
  0x00007f8ab9165054: movabs $0xdead,%rbx
  0x00007f8ab916505e: movabs $0xdead,%rcx
  0x00007f8ab9165068: movabs $0xdead,%rdx
  0x00007f8ab9165072: movabs $0xdead,%rdi
  0x00007f8ab916507c: mov    %rax,%rbx
  0x00007f8ab916507f: mov    %r14,%rax
  0x00007f8ab9165082: pop    %rdx
  0x00007f8ab9165083: jmpq   *%rbx
  0x00007f8ab9165085: nop
  0x00007f8ab9165086: nop
  0x00007f8ab9165087: nop

Decoding RuntimeStub - forward_exception Runtime1 stub 0x00007f8ab9167b50
  ;; generate_handle_exception
  0x00007f8ab9167c00: mov    0x8(%r15),%rax
  0x00007f8ab9167c04: movabs $0x0,%r10
  0x00007f8ab9167c0e: mov    %r10,0x8(%r15)
  0x00007f8ab9167c12: mov    0x8(%rbp),%rdx
  0x00007f8ab9167c16: movabs $0x0,%r10
  0x00007f8ab9167c20: mov    %r10,0x260(%r15)
  0x00007f8ab9167c27: movabs $0x0,%r10
  0x00007f8ab9167c31: mov    %r10,0x268(%r15)
  0x00007f8ab9167c38: movabs $0xdead,%rbx
  0x00007f8ab9167c42: movabs $0xdead,%rcx
  0x00007f8ab9167c4c: movabs $0xdead,%rsi
  0x00007f8ab9167c56: movabs $0xdead,%rdi
  0x00007f8ab9167c60: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab9167c6b: je     0x00007f8ab9167ce8
  0x00007f8ab9167c71: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167c76: sub    $0x80,%rsp
  0x00007f8ab9167c7d: mov    %rax,0x78(%rsp)
  0x00007f8ab9167c82: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167c87: mov    %rdx,0x68(%rsp)
  0x00007f8ab9167c8c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9167c91: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167c96: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167c9b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167ca0: mov    %r8,0x38(%rsp)
  0x00007f8ab9167ca5: mov    %r9,0x30(%rsp)
  0x00007f8ab9167caa: mov    %r10,0x28(%rsp)
  0x00007f8ab9167caf: mov    %r11,0x20(%rsp)
  0x00007f8ab9167cb4: mov    %r12,0x18(%rsp)
  0x00007f8ab9167cb9: mov    %r13,0x10(%rsp)
  0x00007f8ab9167cbe: mov    %r14,0x8(%rsp)
  0x00007f8ab9167cc3: mov    %r15,(%rsp)
  0x00007f8ab9167cc7: movabs $0x7f8acf15ca04,%rdi
  0x00007f8ab9167cd1: movabs $0x7f8ab9167c71,%rsi
  0x00007f8ab9167cdb: mov    %rsp,%rdx
  0x00007f8ab9167cde: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167ce2: callq  0x00007f8aceddb9fa
  0x00007f8ab9167ce7: hlt    
  0x00007f8ab9167ce8: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab9167cf3: je     0x00007f8ab9167d70
  0x00007f8ab9167cf9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167cfe: sub    $0x80,%rsp
  0x00007f8ab9167d05: mov    %rax,0x78(%rsp)
  0x00007f8ab9167d0a: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167d0f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9167d14: mov    %rbx,0x60(%rsp)
  0x00007f8ab9167d19: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167d1e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167d23: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167d28: mov    %r8,0x38(%rsp)
  0x00007f8ab9167d2d: mov    %r9,0x30(%rsp)
  0x00007f8ab9167d32: mov    %r10,0x28(%rsp)
  0x00007f8ab9167d37: mov    %r11,0x20(%rsp)
  0x00007f8ab9167d3c: mov    %r12,0x18(%rsp)
  0x00007f8ab9167d41: mov    %r13,0x10(%rsp)
  0x00007f8ab9167d46: mov    %r14,0x8(%rsp)
  0x00007f8ab9167d4b: mov    %r15,(%rsp)
  0x00007f8ab9167d4f: movabs $0x7f8acf15ca1e,%rdi
  0x00007f8ab9167d59: movabs $0x7f8ab9167cf9,%rsi
  0x00007f8ab9167d63: mov    %rsp,%rdx
  0x00007f8ab9167d66: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167d6a: callq  0x00007f8aceddb9fa
  0x00007f8ab9167d6f: hlt    
  0x00007f8ab9167d70: mov    %rax,0x2d0(%r15)
  0x00007f8ab9167d77: mov    %rdx,0x2d8(%r15)
  0x00007f8ab9167d7e: mov    %rdx,0x8(%rbp)
  0x00007f8ab9167d82: mov    %r15,%rdi
  0x00007f8ab9167d85: mov    %rbp,0x210(%r15)
  0x00007f8ab9167d8c: mov    %rsp,0x200(%r15)
  0x00007f8ab9167d93: callq  0x00007f8ace8bbb8c
  0x00007f8ab9167d98: push   %rax
  0x00007f8ab9167d99: push   %rdi
  0x00007f8ab9167d9a: push   %rsi
  0x00007f8ab9167d9b: push   %rdx
  0x00007f8ab9167d9c: push   %rcx
  0x00007f8ab9167d9d: push   %r8
  0x00007f8ab9167d9f: push   %r9
  0x00007f8ab9167da1: push   %r10
  0x00007f8ab9167da3: mov    %rsp,%r10
  0x00007f8ab9167da6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167daa: push   %r10
  0x00007f8ab9167dac: push   %r11
  0x00007f8ab9167dae: mov    $0x1,%edi
  0x00007f8ab9167db3: callq  0x00007f8acf9c32d0
  0x00007f8ab9167db8: pop    %r11
  0x00007f8ab9167dba: pop    %rsp
  0x00007f8ab9167dbb: pop    %r10
  0x00007f8ab9167dbd: pop    %r9
  0x00007f8ab9167dbf: pop    %r8
  0x00007f8ab9167dc1: pop    %rcx
  0x00007f8ab9167dc2: pop    %rdx
  0x00007f8ab9167dc3: pop    %rsi
  0x00007f8ab9167dc4: pop    %rdi
  0x00007f8ab9167dc5: cmp    %rax,%r15
  0x00007f8ab9167dc8: je     0x00007f8ab9167e4a
  0x00007f8ab9167dce: callq  0x00007f8aceec2a22
  0x00007f8ab9167dd3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167dd8: sub    $0x80,%rsp
  0x00007f8ab9167ddf: mov    %rax,0x78(%rsp)
  0x00007f8ab9167de4: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167de9: mov    %rdx,0x68(%rsp)
  0x00007f8ab9167dee: mov    %rbx,0x60(%rsp)
  0x00007f8ab9167df3: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167df8: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167dfd: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167e02: mov    %r8,0x38(%rsp)
  0x00007f8ab9167e07: mov    %r9,0x30(%rsp)
  0x00007f8ab9167e0c: mov    %r10,0x28(%rsp)
  0x00007f8ab9167e11: mov    %r11,0x20(%rsp)
  0x00007f8ab9167e16: mov    %r12,0x18(%rsp)
  0x00007f8ab9167e1b: mov    %r13,0x10(%rsp)
  0x00007f8ab9167e20: mov    %r14,0x8(%rsp)
  0x00007f8ab9167e25: mov    %r15,(%rsp)
  0x00007f8ab9167e29: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9167e33: movabs $0x7f8ab9167dd3,%rsi
  0x00007f8ab9167e3d: mov    %rsp,%rdx
  0x00007f8ab9167e40: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167e44: callq  0x00007f8aceddb9fa
  0x00007f8ab9167e49: hlt    
  0x00007f8ab9167e4a: pop    %rax
  0x00007f8ab9167e4b: movabs $0x0,%r10
  0x00007f8ab9167e55: mov    %r10,0x200(%r15)
  0x00007f8ab9167e5c: movabs $0x0,%r10
  0x00007f8ab9167e66: mov    %r10,0x210(%r15)
  0x00007f8ab9167e6d: movabs $0x0,%r10
  0x00007f8ab9167e77: mov    %r10,0x208(%r15)
  0x00007f8ab9167e7e: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9167e86: je     0x00007f8ab9167f07
  0x00007f8ab9167e8c: mov    0x8(%r15),%rax
  0x00007f8ab9167e90: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167e95: sub    $0x80,%rsp
  0x00007f8ab9167e9c: mov    %rax,0x78(%rsp)
  0x00007f8ab9167ea1: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167ea6: mov    %rdx,0x68(%rsp)
  0x00007f8ab9167eab: mov    %rbx,0x60(%rsp)
  0x00007f8ab9167eb0: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167eb5: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167eba: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167ebf: mov    %r8,0x38(%rsp)
  0x00007f8ab9167ec4: mov    %r9,0x30(%rsp)
  0x00007f8ab9167ec9: mov    %r10,0x28(%rsp)
  0x00007f8ab9167ece: mov    %r11,0x20(%rsp)
  0x00007f8ab9167ed3: mov    %r12,0x18(%rsp)
  0x00007f8ab9167ed8: mov    %r13,0x10(%rsp)
  0x00007f8ab9167edd: mov    %r14,0x8(%rsp)
  0x00007f8ab9167ee2: mov    %r15,(%rsp)
  0x00007f8ab9167ee6: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab9167ef0: movabs $0x7f8ab9167e90,%rsi
  0x00007f8ab9167efa: mov    %rsp,%rdx
  0x00007f8ab9167efd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167f01: callq  0x00007f8aceddb9fa
  0x00007f8ab9167f06: hlt    
  0x00007f8ab9167f07: movabs $0xdead,%rbx
  0x00007f8ab9167f11: movabs $0xdead,%rcx
  0x00007f8ab9167f1b: movabs $0xdead,%rdx
  0x00007f8ab9167f25: movabs $0xdead,%rsi
  0x00007f8ab9167f2f: movabs $0xdead,%rdi
  0x00007f8ab9167f39: mov    %rax,0x8(%rbp)
  ;; restore_live_registers
  0x00007f8ab9167f3d: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9167f43: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9167f49: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9167f4f: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9167f55: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9167f5b: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9167f61: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9167f67: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9167f6d: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9167f73: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9167f79: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9167f7f: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9167f85: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9167f8b: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9167f91: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9167f97: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9167fa0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9167fac: je     0x00007f8ab9168029
  0x00007f8ab9167fb2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167fb7: sub    $0x80,%rsp
  0x00007f8ab9167fbe: mov    %rax,0x78(%rsp)
  0x00007f8ab9167fc3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167fc8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9167fcd: mov    %rbx,0x60(%rsp)
  0x00007f8ab9167fd2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167fd7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167fdc: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167fe1: mov    %r8,0x38(%rsp)
  0x00007f8ab9167fe6: mov    %r9,0x30(%rsp)
  0x00007f8ab9167feb: mov    %r10,0x28(%rsp)
  0x00007f8ab9167ff0: mov    %r11,0x20(%rsp)
  0x00007f8ab9167ff5: mov    %r12,0x18(%rsp)
  0x00007f8ab9167ffa: mov    %r13,0x10(%rsp)
  0x00007f8ab9167fff: mov    %r14,0x8(%rsp)
  0x00007f8ab9168004: mov    %r15,(%rsp)
  0x00007f8ab9168008: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9168012: movabs $0x7f8ab9167fb2,%rsi
  0x00007f8ab916801c: mov    %rsp,%rdx
  0x00007f8ab916801f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9168023: callq  0x00007f8aceddb9fa
  0x00007f8ab9168028: hlt    
  0x00007f8ab9168029: add    $0x150,%rsp
  0x00007f8ab9168030: mov    (%rsp),%r15
  0x00007f8ab9168034: mov    0x8(%rsp),%r14
  0x00007f8ab9168039: mov    0x10(%rsp),%r13
  0x00007f8ab916803e: mov    0x18(%rsp),%r12
  0x00007f8ab9168043: mov    0x20(%rsp),%r11
  0x00007f8ab9168048: mov    0x28(%rsp),%r10
  0x00007f8ab916804d: mov    0x30(%rsp),%r9
  0x00007f8ab9168052: mov    0x38(%rsp),%r8
  0x00007f8ab9168057: mov    0x40(%rsp),%rdi
  0x00007f8ab916805c: mov    0x48(%rsp),%rsi
  0x00007f8ab9168061: mov    0x50(%rsp),%rbp
  0x00007f8ab9168066: mov    0x60(%rsp),%rbx
  0x00007f8ab916806b: mov    0x68(%rsp),%rdx
  0x00007f8ab9168070: mov    0x70(%rsp),%rcx
  0x00007f8ab9168075: mov    0x78(%rsp),%rax
  0x00007f8ab916807a: add    $0x80,%rsp
  0x00007f8ab9168081: leaveq 
  0x00007f8ab9168082: retq   
  0x00007f8ab9168083: nop
  0x00007f8ab9168084: nop
  0x00007f8ab9168085: nop
  0x00007f8ab9168086: nop
  0x00007f8ab9168087: nop

Decoding RuntimeStub - throw_range_check_failed Runtime1 stub 0x00007f8ab9164ad0
  0x00007f8ab9164b60: push   %rbp
  0x00007f8ab9164b61: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab9164b64: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9164b69: sub    $0x80,%rsp
  0x00007f8ab9164b70: mov    %rax,0x78(%rsp)
  0x00007f8ab9164b75: mov    %rcx,0x70(%rsp)
  0x00007f8ab9164b7a: mov    %rdx,0x68(%rsp)
  0x00007f8ab9164b7f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164b84: mov    %rbp,0x50(%rsp)
  0x00007f8ab9164b89: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164b8e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164b93: mov    %r8,0x38(%rsp)
  0x00007f8ab9164b98: mov    %r9,0x30(%rsp)
  0x00007f8ab9164b9d: mov    %r10,0x28(%rsp)
  0x00007f8ab9164ba2: mov    %r11,0x20(%rsp)
  0x00007f8ab9164ba7: mov    %r12,0x18(%rsp)
  0x00007f8ab9164bac: mov    %r13,0x10(%rsp)
  0x00007f8ab9164bb1: mov    %r14,0x8(%rsp)
  0x00007f8ab9164bb6: mov    %r15,(%rsp)
  0x00007f8ab9164bba: sub    $0x150,%rsp
  0x00007f8ab9164bc1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9164bcd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9164bd3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9164bd9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab9164bdf: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9164be5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab9164beb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9164bf1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9164bf7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab9164bfd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9164c03: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9164c09: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab9164c0f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9164c15: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab9164c1b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9164c21: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9164c27: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9164c30: movabs $0xdead,%rax
  0x00007f8ab9164c3a: movabs $0xdead,%rbx
  0x00007f8ab9164c44: movabs $0xdead,%rcx
  0x00007f8ab9164c4e: movabs $0xdead,%rdx
  0x00007f8ab9164c58: movabs $0xdead,%rsi
  0x00007f8ab9164c62: movabs $0xdead,%rdi
  0x00007f8ab9164c6c: mov    0x10(%rbp),%rsi
  0x00007f8ab9164c70: mov    %r15,%rdi
  0x00007f8ab9164c73: mov    %rbp,0x210(%r15)
  0x00007f8ab9164c7a: mov    %rsp,0x200(%r15)
  0x00007f8ab9164c81: callq  0x00007f8ace8bbc82
  0x00007f8ab9164c86: push   %rax
  0x00007f8ab9164c87: push   %rdi
  0x00007f8ab9164c88: push   %rsi
  0x00007f8ab9164c89: push   %rdx
  0x00007f8ab9164c8a: push   %rcx
  0x00007f8ab9164c8b: push   %r8
  0x00007f8ab9164c8d: push   %r9
  0x00007f8ab9164c8f: push   %r10
  0x00007f8ab9164c91: mov    %rsp,%r10
  0x00007f8ab9164c94: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164c98: push   %r10
  0x00007f8ab9164c9a: push   %r11
  0x00007f8ab9164c9c: mov    $0x1,%edi
  0x00007f8ab9164ca1: callq  0x00007f8acf9c32d0
  0x00007f8ab9164ca6: pop    %r11
  0x00007f8ab9164ca8: pop    %rsp
  0x00007f8ab9164ca9: pop    %r10
  0x00007f8ab9164cab: pop    %r9
  0x00007f8ab9164cad: pop    %r8
  0x00007f8ab9164caf: pop    %rcx
  0x00007f8ab9164cb0: pop    %rdx
  0x00007f8ab9164cb1: pop    %rsi
  0x00007f8ab9164cb2: pop    %rdi
  0x00007f8ab9164cb3: cmp    %rax,%r15
  0x00007f8ab9164cb6: je     0x00007f8ab9164d38
  0x00007f8ab9164cbc: callq  0x00007f8aceec2a22
  0x00007f8ab9164cc1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9164cc6: sub    $0x80,%rsp
  0x00007f8ab9164ccd: mov    %rax,0x78(%rsp)
  0x00007f8ab9164cd2: mov    %rcx,0x70(%rsp)
  0x00007f8ab9164cd7: mov    %rdx,0x68(%rsp)
  0x00007f8ab9164cdc: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164ce1: mov    %rbp,0x50(%rsp)
  0x00007f8ab9164ce6: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164ceb: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164cf0: mov    %r8,0x38(%rsp)
  0x00007f8ab9164cf5: mov    %r9,0x30(%rsp)
  0x00007f8ab9164cfa: mov    %r10,0x28(%rsp)
  0x00007f8ab9164cff: mov    %r11,0x20(%rsp)
  0x00007f8ab9164d04: mov    %r12,0x18(%rsp)
  0x00007f8ab9164d09: mov    %r13,0x10(%rsp)
  0x00007f8ab9164d0e: mov    %r14,0x8(%rsp)
  0x00007f8ab9164d13: mov    %r15,(%rsp)
  0x00007f8ab9164d17: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9164d21: movabs $0x7f8ab9164cc1,%rsi
  0x00007f8ab9164d2b: mov    %rsp,%rdx
  0x00007f8ab9164d2e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164d32: callq  0x00007f8aceddb9fa
  0x00007f8ab9164d37: hlt    
  0x00007f8ab9164d38: pop    %rax
  0x00007f8ab9164d39: movabs $0x0,%r10
  0x00007f8ab9164d43: mov    %r10,0x200(%r15)
  0x00007f8ab9164d4a: movabs $0x0,%r10
  0x00007f8ab9164d54: mov    %r10,0x210(%r15)
  0x00007f8ab9164d5b: movabs $0x0,%r10
  0x00007f8ab9164d65: mov    %r10,0x208(%r15)
  0x00007f8ab9164d6c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9164d74: je     0x00007f8ab9164d83
  0x00007f8ab9164d7a: mov    0x8(%r15),%rax
  0x00007f8ab9164d7e: jmpq   0x00007f8ab9167c00
  0x00007f8ab9164d83: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9164d88: sub    $0x80,%rsp
  0x00007f8ab9164d8f: mov    %rax,0x78(%rsp)
  0x00007f8ab9164d94: mov    %rcx,0x70(%rsp)
  0x00007f8ab9164d99: mov    %rdx,0x68(%rsp)
  0x00007f8ab9164d9e: mov    %rbx,0x60(%rsp)
  0x00007f8ab9164da3: mov    %rbp,0x50(%rsp)
  0x00007f8ab9164da8: mov    %rsi,0x48(%rsp)
  0x00007f8ab9164dad: mov    %rdi,0x40(%rsp)
  0x00007f8ab9164db2: mov    %r8,0x38(%rsp)
  0x00007f8ab9164db7: mov    %r9,0x30(%rsp)
  0x00007f8ab9164dbc: mov    %r10,0x28(%rsp)
  0x00007f8ab9164dc1: mov    %r11,0x20(%rsp)
  0x00007f8ab9164dc6: mov    %r12,0x18(%rsp)
  0x00007f8ab9164dcb: mov    %r13,0x10(%rsp)
  0x00007f8ab9164dd0: mov    %r14,0x8(%rsp)
  0x00007f8ab9164dd5: mov    %r15,(%rsp)
  0x00007f8ab9164dd9: movabs $0x7f8acf15c678,%rdi
  0x00007f8ab9164de3: movabs $0x7f8ab9164d83,%rsi
  0x00007f8ab9164ded: mov    %rsp,%rdx
  0x00007f8ab9164df0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9164df4: callq  0x00007f8aceddb9fa
  0x00007f8ab9164df9: hlt    
  0x00007f8ab9164dfa: leaveq 
  0x00007f8ab9164dfb: retq   
  0x00007f8ab9164dfc: nop
  0x00007f8ab9164dfd: nop
  0x00007f8ab9164dfe: nop
  0x00007f8ab9164dff: nop

Decoding RuntimeStub - _new_array_nozero_Java 0x00007f8ab9166210
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab9166260: sub    $0x8,%rsp
  0x00007f8ab9166267: mov    %rbp,(%rsp)
  0x00007f8ab916626b: mov    %rsp,0x200(%r15)
  0x00007f8ab9166272: mov    %rsi,%rdi
  0x00007f8ab9166275: mov    %edx,%esi
  0x00007f8ab9166277: mov    %r15,%rdx
  0x00007f8ab916627a: movabs $0x7f8acef77c32,%r10
  0x00007f8ab9166284: callq  *%r10
  0x00007f8ab9166287: mov    %r12,0x200(%r15)
  0x00007f8ab916628e: mov    %r12,0x208(%r15)
  0x00007f8ab9166295: mov    0x260(%r15),%rax
  0x00007f8ab916629c: mov    %r12,0x260(%r15)
  0x00007f8ab91662a3: cmp    0x8(%r15),%r12
  0x00007f8ab91662a7: jne    0x00007f8ab91662ab
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91662a9: pop    %rbp
  0x00007f8ab91662aa: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91662ab: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91662b5: xor    %ebx,%ebx
  0x00007f8ab91662b7: pop    %rbp
  0x00007f8ab91662b8: jmpq   *%r10
  0x00007f8ab91662bb: hlt    
  0x00007f8ab91662bc: hlt    
  0x00007f8ab91662bd: hlt    
  0x00007f8ab91662be: hlt    
  0x00007f8ab91662bf: hlt    

AHE@0x00007f8ac812f190: 0xbbbbbbbbb0000000 i2c: 0x00007f8ab9167860 c2i: 0x00007f8ab91679cd c2iUV: 0x00007f8ab91679a0
i2c argument handler #110 for: static (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (683 bytes generated)
c2i argument handler starts at 0x7f8ab91679cd
  0x00007f8ab9167860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9167864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab916786e: cmp    %r11,%rax
  0x00007f8ab9167871: jbe    0x00007f8ab916788a
  0x00007f8ab9167877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9167881: cmp    %r11,%rax
  0x00007f8ab9167884: jb     0x00007f8ab916794d
  0x00007f8ab916788a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9167894: cmp    %r11,%rax
  0x00007f8ab9167897: jbe    0x00007f8ab91678b0
  0x00007f8ab916789d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91678a7: cmp    %r11,%rax
  0x00007f8ab91678aa: jb     0x00007f8ab916794d
  0x00007f8ab91678b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91678ba: cmp    %r11,%rax
  0x00007f8ab91678bd: jbe    0x00007f8ab91678d6
  0x00007f8ab91678c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91678cd: cmp    %r11,%rax
  0x00007f8ab91678d0: jb     0x00007f8ab916794d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91678d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91678db: sub    $0x80,%rsp
  0x00007f8ab91678e2: mov    %rax,0x78(%rsp)
  0x00007f8ab91678e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91678ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91678f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91678f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91678fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167900: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167905: mov    %r8,0x38(%rsp)
  0x00007f8ab916790a: mov    %r9,0x30(%rsp)
  0x00007f8ab916790f: mov    %r10,0x28(%rsp)
  0x00007f8ab9167914: mov    %r11,0x20(%rsp)
  0x00007f8ab9167919: mov    %r12,0x18(%rsp)
  0x00007f8ab916791e: mov    %r13,0x10(%rsp)
  0x00007f8ab9167923: mov    %r14,0x8(%rsp)
  0x00007f8ab9167928: mov    %r15,(%rsp)
  0x00007f8ab916792c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9167936: movabs $0x7f8ab91678d6,%rsi
  0x00007f8ab9167940: mov    %rsp,%rdx
  0x00007f8ab9167943: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167947: callq  0x00007f8aceddb9fa
  0x00007f8ab916794c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab916794d: mov    %rsp,%r11
  0x00007f8ab9167950: sub    $0x20,%rsp
  0x00007f8ab9167954: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167958: push   %rax
  0x00007f8ab9167959: mov    %r11,%rax
  0x00007f8ab916795c: mov    0x50(%rbx),%r11
  0x00007f8ab9167960: mov    0x48(%rax),%rsi
  0x00007f8ab9167964: mov    0x40(%rax),%rdx
  0x00007f8ab9167968: mov    0x38(%rax),%rcx
  0x00007f8ab916796c: mov    0x30(%rax),%r8
  0x00007f8ab9167970: mov    0x28(%rax),%r9
  0x00007f8ab9167974: mov    0x20(%rax),%rdi
  0x00007f8ab9167978: mov    0x18(%rax),%r13
  0x00007f8ab916797c: mov    %r13,0x8(%rsp)
  0x00007f8ab9167981: mov    0x10(%rax),%r13
  0x00007f8ab9167985: mov    %r13,0x10(%rsp)
  0x00007f8ab916798a: mov    0x8(%rax),%r13
  0x00007f8ab916798e: mov    %r13,0x18(%rsp)
  0x00007f8ab9167993: mov    %rbx,0x258(%r15)
  0x00007f8ab916799a: mov    %rbx,%rax
  0x00007f8ab916799d: jmpq   *%r11
  0x00007f8ab91679a0: mov    0x8(%rsi),%ebx
  0x00007f8ab91679a3: shl    $0x3,%rbx
  0x00007f8ab91679a7: cmp    0x10(%rax),%rbx
  0x00007f8ab91679ab: mov    0x8(%rax),%rbx
  0x00007f8ab91679af: je     0x00007f8ab91679ba
  0x00007f8ab91679b5: jmpq   0x00007f8ab9105c40
  0x00007f8ab91679ba: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91679c2: je     0x00007f8ab9167abd
  0x00007f8ab91679c8: jmpq   0x00007f8ab9105c40
  0x00007f8ab91679cd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91679d5: je     0x00007f8ab9167abd
  0x00007f8ab91679db: mov    %rsp,%r13
  0x00007f8ab91679de: mov    (%rsp),%rax
  0x00007f8ab91679e2: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91679e6: pushfq 
  0x00007f8ab91679e7: sub    $0x8,%rsp
  0x00007f8ab91679eb: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91679f0: sub    $0x80,%rsp
  0x00007f8ab91679f7: mov    %rax,0x78(%rsp)
  0x00007f8ab91679fc: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167a01: mov    %rdx,0x68(%rsp)
  0x00007f8ab9167a06: mov    %rbx,0x60(%rsp)
  0x00007f8ab9167a0b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167a10: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167a15: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167a1a: mov    %r8,0x38(%rsp)
  0x00007f8ab9167a1f: mov    %r9,0x30(%rsp)
  0x00007f8ab9167a24: mov    %r10,0x28(%rsp)
  0x00007f8ab9167a29: mov    %r11,0x20(%rsp)
  0x00007f8ab9167a2e: mov    %r12,0x18(%rsp)
  0x00007f8ab9167a33: mov    %r13,0x10(%rsp)
  0x00007f8ab9167a38: mov    %r14,0x8(%rsp)
  0x00007f8ab9167a3d: mov    %r15,(%rsp)
  0x00007f8ab9167a41: sub    $0x200,%rsp
  0x00007f8ab9167a48: fxsave64 (%rsp)
  0x00007f8ab9167a4d: mov    %rbx,%rdi
  0x00007f8ab9167a50: mov    %rax,%rsi
  0x00007f8ab9167a53: callq  0x00007f8acef8bbca
  0x00007f8ab9167a58: fxrstor64 (%rsp)
  0x00007f8ab9167a5d: add    $0x200,%rsp
  0x00007f8ab9167a64: mov    (%rsp),%r15
  0x00007f8ab9167a68: mov    0x8(%rsp),%r14
  0x00007f8ab9167a6d: mov    0x10(%rsp),%r13
  0x00007f8ab9167a72: mov    0x18(%rsp),%r12
  0x00007f8ab9167a77: mov    0x20(%rsp),%r11
  0x00007f8ab9167a7c: mov    0x28(%rsp),%r10
  0x00007f8ab9167a81: mov    0x30(%rsp),%r9
  0x00007f8ab9167a86: mov    0x38(%rsp),%r8
  0x00007f8ab9167a8b: mov    0x40(%rsp),%rdi
  0x00007f8ab9167a90: mov    0x48(%rsp),%rsi
  0x00007f8ab9167a95: mov    0x50(%rsp),%rbp
  0x00007f8ab9167a9a: mov    0x60(%rsp),%rbx
  0x00007f8ab9167a9f: mov    0x68(%rsp),%rdx
  0x00007f8ab9167aa4: mov    0x70(%rsp),%rcx
  0x00007f8ab9167aa9: mov    0x78(%rsp),%rax
  0x00007f8ab9167aae: add    $0x80,%rsp
  0x00007f8ab9167ab5: add    $0x8,%rsp
  0x00007f8ab9167ab9: popfq  
  0x00007f8ab9167aba: mov    %r13,%rsp
  0x00007f8ab9167abd: pop    %rax
  0x00007f8ab9167abe: mov    %rsp,%r13
  0x00007f8ab9167ac1: sub    $0x50,%rsp
  0x00007f8ab9167ac5: mov    %rax,(%rsp)
  0x00007f8ab9167ac9: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167ace: mov    %rdx,0x40(%rsp)
  0x00007f8ab9167ad3: mov    %rcx,0x38(%rsp)
  0x00007f8ab9167ad8: mov    %r8,0x30(%rsp)
  0x00007f8ab9167add: mov    %r9,0x28(%rsp)
  0x00007f8ab9167ae2: mov    %rdi,0x20(%rsp)
  0x00007f8ab9167ae7: mov    0x50(%rsp),%rax
  0x00007f8ab9167aec: mov    %rax,0x18(%rsp)
  0x00007f8ab9167af1: mov    0x58(%rsp),%rax
  0x00007f8ab9167af6: mov    %rax,0x10(%rsp)
  0x00007f8ab9167afb: mov    0x60(%rsp),%rax
  0x00007f8ab9167b00: mov    %rax,0x8(%rsp)
  0x00007f8ab9167b05: mov    0x40(%rbx),%rcx
  0x00007f8ab9167b09: jmpq   *%rcx

AHE@0x00007f8ac812f1d8: 0xbbbbbbb0 i2c: 0x00007f8ab9165c20 c2i: 0x00007f8ab9165d7b c2iUV: 0x00007f8ab9165d4e
i2c argument handler #111 for: static (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (645 bytes generated)
c2i argument handler starts at 0x7f8ab9165d7b
  0x00007f8ab9165c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9165c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9165c2e: cmp    %r11,%rax
  0x00007f8ab9165c31: jbe    0x00007f8ab9165c4a
  0x00007f8ab9165c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9165c41: cmp    %r11,%rax
  0x00007f8ab9165c44: jb     0x00007f8ab9165d0d
  0x00007f8ab9165c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9165c54: cmp    %r11,%rax
  0x00007f8ab9165c57: jbe    0x00007f8ab9165c70
  0x00007f8ab9165c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9165c67: cmp    %r11,%rax
  0x00007f8ab9165c6a: jb     0x00007f8ab9165d0d
  0x00007f8ab9165c70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9165c7a: cmp    %r11,%rax
  0x00007f8ab9165c7d: jbe    0x00007f8ab9165c96
  0x00007f8ab9165c83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9165c8d: cmp    %r11,%rax
  0x00007f8ab9165c90: jb     0x00007f8ab9165d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9165c96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9165c9b: sub    $0x80,%rsp
  0x00007f8ab9165ca2: mov    %rax,0x78(%rsp)
  0x00007f8ab9165ca7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9165cac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9165cb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165cb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9165cbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9165cc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9165cc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9165cca: mov    %r9,0x30(%rsp)
  0x00007f8ab9165ccf: mov    %r10,0x28(%rsp)
  0x00007f8ab9165cd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9165cd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9165cde: mov    %r13,0x10(%rsp)
  0x00007f8ab9165ce3: mov    %r14,0x8(%rsp)
  0x00007f8ab9165ce8: mov    %r15,(%rsp)
  0x00007f8ab9165cec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9165cf6: movabs $0x7f8ab9165c96,%rsi
  0x00007f8ab9165d00: mov    %rsp,%rdx
  0x00007f8ab9165d03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9165d07: callq  0x00007f8aceddb9fa
  0x00007f8ab9165d0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9165d0d: mov    %rsp,%r11
  0x00007f8ab9165d10: sub    $0x10,%rsp
  0x00007f8ab9165d14: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9165d18: push   %rax
  0x00007f8ab9165d19: mov    %r11,%rax
  0x00007f8ab9165d1c: mov    0x50(%rbx),%r11
  0x00007f8ab9165d20: mov    0x38(%rax),%rsi
  0x00007f8ab9165d24: mov    0x30(%rax),%rdx
  0x00007f8ab9165d28: mov    0x28(%rax),%rcx
  0x00007f8ab9165d2c: mov    0x20(%rax),%r8
  0x00007f8ab9165d30: mov    0x18(%rax),%r9
  0x00007f8ab9165d34: mov    0x10(%rax),%rdi
  0x00007f8ab9165d38: mov    0x8(%rax),%r13
  0x00007f8ab9165d3c: mov    %r13,0x8(%rsp)
  0x00007f8ab9165d41: mov    %rbx,0x258(%r15)
  0x00007f8ab9165d48: mov    %rbx,%rax
  0x00007f8ab9165d4b: jmpq   *%r11
  0x00007f8ab9165d4e: mov    0x8(%rsi),%ebx
  0x00007f8ab9165d51: shl    $0x3,%rbx
  0x00007f8ab9165d55: cmp    0x10(%rax),%rbx
  0x00007f8ab9165d59: mov    0x8(%rax),%rbx
  0x00007f8ab9165d5d: je     0x00007f8ab9165d68
  0x00007f8ab9165d63: jmpq   0x00007f8ab9105c40
  0x00007f8ab9165d68: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9165d70: je     0x00007f8ab9165e6b
  0x00007f8ab9165d76: jmpq   0x00007f8ab9105c40
  0x00007f8ab9165d7b: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9165d83: je     0x00007f8ab9165e6b
  0x00007f8ab9165d89: mov    %rsp,%r13
  0x00007f8ab9165d8c: mov    (%rsp),%rax
  0x00007f8ab9165d90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9165d94: pushfq 
  0x00007f8ab9165d95: sub    $0x8,%rsp
  0x00007f8ab9165d99: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9165d9e: sub    $0x80,%rsp
  0x00007f8ab9165da5: mov    %rax,0x78(%rsp)
  0x00007f8ab9165daa: mov    %rcx,0x70(%rsp)
  0x00007f8ab9165daf: mov    %rdx,0x68(%rsp)
  0x00007f8ab9165db4: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165db9: mov    %rbp,0x50(%rsp)
  0x00007f8ab9165dbe: mov    %rsi,0x48(%rsp)
  0x00007f8ab9165dc3: mov    %rdi,0x40(%rsp)
  0x00007f8ab9165dc8: mov    %r8,0x38(%rsp)
  0x00007f8ab9165dcd: mov    %r9,0x30(%rsp)
  0x00007f8ab9165dd2: mov    %r10,0x28(%rsp)
  0x00007f8ab9165dd7: mov    %r11,0x20(%rsp)
  0x00007f8ab9165ddc: mov    %r12,0x18(%rsp)
  0x00007f8ab9165de1: mov    %r13,0x10(%rsp)
  0x00007f8ab9165de6: mov    %r14,0x8(%rsp)
  0x00007f8ab9165deb: mov    %r15,(%rsp)
  0x00007f8ab9165def: sub    $0x200,%rsp
  0x00007f8ab9165df6: fxsave64 (%rsp)
  0x00007f8ab9165dfb: mov    %rbx,%rdi
  0x00007f8ab9165dfe: mov    %rax,%rsi
  0x00007f8ab9165e01: callq  0x00007f8acef8bbca
  0x00007f8ab9165e06: fxrstor64 (%rsp)
  0x00007f8ab9165e0b: add    $0x200,%rsp
  0x00007f8ab9165e12: mov    (%rsp),%r15
  0x00007f8ab9165e16: mov    0x8(%rsp),%r14
  0x00007f8ab9165e1b: mov    0x10(%rsp),%r13
  0x00007f8ab9165e20: mov    0x18(%rsp),%r12
  0x00007f8ab9165e25: mov    0x20(%rsp),%r11
  0x00007f8ab9165e2a: mov    0x28(%rsp),%r10
  0x00007f8ab9165e2f: mov    0x30(%rsp),%r9
  0x00007f8ab9165e34: mov    0x38(%rsp),%r8
  0x00007f8ab9165e39: mov    0x40(%rsp),%rdi
  0x00007f8ab9165e3e: mov    0x48(%rsp),%rsi
  0x00007f8ab9165e43: mov    0x50(%rsp),%rbp
  0x00007f8ab9165e48: mov    0x60(%rsp),%rbx
  0x00007f8ab9165e4d: mov    0x68(%rsp),%rdx
  0x00007f8ab9165e52: mov    0x70(%rsp),%rcx
  0x00007f8ab9165e57: mov    0x78(%rsp),%rax
  0x00007f8ab9165e5c: add    $0x80,%rsp
  0x00007f8ab9165e63: add    $0x8,%rsp
  0x00007f8ab9165e67: popfq  
  0x00007f8ab9165e68: mov    %r13,%rsp
  0x00007f8ab9165e6b: pop    %rax
  0x00007f8ab9165e6c: mov    %rsp,%r13
  0x00007f8ab9165e6f: sub    $0x40,%rsp
  0x00007f8ab9165e73: mov    %rax,(%rsp)
  0x00007f8ab9165e77: mov    %rsi,0x38(%rsp)
  0x00007f8ab9165e7c: mov    %rdx,0x30(%rsp)
  0x00007f8ab9165e81: mov    %rcx,0x28(%rsp)
  0x00007f8ab9165e86: mov    %r8,0x20(%rsp)
  0x00007f8ab9165e8b: mov    %r9,0x18(%rsp)
  0x00007f8ab9165e90: mov    %rdi,0x10(%rsp)
  0x00007f8ab9165e95: mov    0x40(%rsp),%rax
  0x00007f8ab9165e9a: mov    %rax,0x8(%rsp)
  0x00007f8ab9165e9f: mov    0x40(%rbx),%rcx
  0x00007f8ab9165ea3: jmpq   *%rcx

AHE@0x00007f8ac812f220: 0xbbbbbbbb i2c: 0x00007f8ab91658e0 c2i: 0x00007f8ab9165a44 c2iUV: 0x00007f8ab9165a17
i2c argument handler #112 for: static (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (664 bytes generated)
c2i argument handler starts at 0x7f8ab9165a44
  0x00007f8ab91658e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91658e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91658ee: cmp    %r11,%rax
  0x00007f8ab91658f1: jbe    0x00007f8ab916590a
  0x00007f8ab91658f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9165901: cmp    %r11,%rax
  0x00007f8ab9165904: jb     0x00007f8ab91659cd
  0x00007f8ab916590a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9165914: cmp    %r11,%rax
  0x00007f8ab9165917: jbe    0x00007f8ab9165930
  0x00007f8ab916591d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9165927: cmp    %r11,%rax
  0x00007f8ab916592a: jb     0x00007f8ab91659cd
  0x00007f8ab9165930: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916593a: cmp    %r11,%rax
  0x00007f8ab916593d: jbe    0x00007f8ab9165956
  0x00007f8ab9165943: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916594d: cmp    %r11,%rax
  0x00007f8ab9165950: jb     0x00007f8ab91659cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9165956: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916595b: sub    $0x80,%rsp
  0x00007f8ab9165962: mov    %rax,0x78(%rsp)
  0x00007f8ab9165967: mov    %rcx,0x70(%rsp)
  0x00007f8ab916596c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9165971: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165976: mov    %rbp,0x50(%rsp)
  0x00007f8ab916597b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9165980: mov    %rdi,0x40(%rsp)
  0x00007f8ab9165985: mov    %r8,0x38(%rsp)
  0x00007f8ab916598a: mov    %r9,0x30(%rsp)
  0x00007f8ab916598f: mov    %r10,0x28(%rsp)
  0x00007f8ab9165994: mov    %r11,0x20(%rsp)
  0x00007f8ab9165999: mov    %r12,0x18(%rsp)
  0x00007f8ab916599e: mov    %r13,0x10(%rsp)
  0x00007f8ab91659a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91659a8: mov    %r15,(%rsp)
  0x00007f8ab91659ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91659b6: movabs $0x7f8ab9165956,%rsi
  0x00007f8ab91659c0: mov    %rsp,%rdx
  0x00007f8ab91659c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91659c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91659cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91659cd: mov    %rsp,%r11
  0x00007f8ab91659d0: sub    $0x10,%rsp
  0x00007f8ab91659d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91659d8: push   %rax
  0x00007f8ab91659d9: mov    %r11,%rax
  0x00007f8ab91659dc: mov    0x50(%rbx),%r11
  0x00007f8ab91659e0: mov    0x40(%rax),%rsi
  0x00007f8ab91659e4: mov    0x38(%rax),%rdx
  0x00007f8ab91659e8: mov    0x30(%rax),%rcx
  0x00007f8ab91659ec: mov    0x28(%rax),%r8
  0x00007f8ab91659f0: mov    0x20(%rax),%r9
  0x00007f8ab91659f4: mov    0x18(%rax),%rdi
  0x00007f8ab91659f8: mov    0x10(%rax),%r13
  0x00007f8ab91659fc: mov    %r13,0x8(%rsp)
  0x00007f8ab9165a01: mov    0x8(%rax),%r13
  0x00007f8ab9165a05: mov    %r13,0x10(%rsp)
  0x00007f8ab9165a0a: mov    %rbx,0x258(%r15)
  0x00007f8ab9165a11: mov    %rbx,%rax
  0x00007f8ab9165a14: jmpq   *%r11
  0x00007f8ab9165a17: mov    0x8(%rsi),%ebx
  0x00007f8ab9165a1a: shl    $0x3,%rbx
  0x00007f8ab9165a1e: cmp    0x10(%rax),%rbx
  0x00007f8ab9165a22: mov    0x8(%rax),%rbx
  0x00007f8ab9165a26: je     0x00007f8ab9165a31
  0x00007f8ab9165a2c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9165a31: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9165a39: je     0x00007f8ab9165b34
  0x00007f8ab9165a3f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9165a44: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9165a4c: je     0x00007f8ab9165b34
  0x00007f8ab9165a52: mov    %rsp,%r13
  0x00007f8ab9165a55: mov    (%rsp),%rax
  0x00007f8ab9165a59: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9165a5d: pushfq 
  0x00007f8ab9165a5e: sub    $0x8,%rsp
  0x00007f8ab9165a62: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9165a67: sub    $0x80,%rsp
  0x00007f8ab9165a6e: mov    %rax,0x78(%rsp)
  0x00007f8ab9165a73: mov    %rcx,0x70(%rsp)
  0x00007f8ab9165a78: mov    %rdx,0x68(%rsp)
  0x00007f8ab9165a7d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165a82: mov    %rbp,0x50(%rsp)
  0x00007f8ab9165a87: mov    %rsi,0x48(%rsp)
  0x00007f8ab9165a8c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9165a91: mov    %r8,0x38(%rsp)
  0x00007f8ab9165a96: mov    %r9,0x30(%rsp)
  0x00007f8ab9165a9b: mov    %r10,0x28(%rsp)
  0x00007f8ab9165aa0: mov    %r11,0x20(%rsp)
  0x00007f8ab9165aa5: mov    %r12,0x18(%rsp)
  0x00007f8ab9165aaa: mov    %r13,0x10(%rsp)
  0x00007f8ab9165aaf: mov    %r14,0x8(%rsp)
  0x00007f8ab9165ab4: mov    %r15,(%rsp)
  0x00007f8ab9165ab8: sub    $0x200,%rsp
  0x00007f8ab9165abf: fxsave64 (%rsp)
  0x00007f8ab9165ac4: mov    %rbx,%rdi
  0x00007f8ab9165ac7: mov    %rax,%rsi
  0x00007f8ab9165aca: callq  0x00007f8acef8bbca
  0x00007f8ab9165acf: fxrstor64 (%rsp)
  0x00007f8ab9165ad4: add    $0x200,%rsp
  0x00007f8ab9165adb: mov    (%rsp),%r15
  0x00007f8ab9165adf: mov    0x8(%rsp),%r14
  0x00007f8ab9165ae4: mov    0x10(%rsp),%r13
  0x00007f8ab9165ae9: mov    0x18(%rsp),%r12
  0x00007f8ab9165aee: mov    0x20(%rsp),%r11
  0x00007f8ab9165af3: mov    0x28(%rsp),%r10
  0x00007f8ab9165af8: mov    0x30(%rsp),%r9
  0x00007f8ab9165afd: mov    0x38(%rsp),%r8
  0x00007f8ab9165b02: mov    0x40(%rsp),%rdi
  0x00007f8ab9165b07: mov    0x48(%rsp),%rsi
  0x00007f8ab9165b0c: mov    0x50(%rsp),%rbp
  0x00007f8ab9165b11: mov    0x60(%rsp),%rbx
  0x00007f8ab9165b16: mov    0x68(%rsp),%rdx
  0x00007f8ab9165b1b: mov    0x70(%rsp),%rcx
  0x00007f8ab9165b20: mov    0x78(%rsp),%rax
  0x00007f8ab9165b25: add    $0x80,%rsp
  0x00007f8ab9165b2c: add    $0x8,%rsp
  0x00007f8ab9165b30: popfq  
  0x00007f8ab9165b31: mov    %r13,%rsp
  0x00007f8ab9165b34: pop    %rax
  0x00007f8ab9165b35: mov    %rsp,%r13
  0x00007f8ab9165b38: sub    $0x50,%rsp
  0x00007f8ab9165b3c: mov    %rax,(%rsp)
  0x00007f8ab9165b40: mov    %rsi,0x40(%rsp)
  0x00007f8ab9165b45: mov    %rdx,0x38(%rsp)
  0x00007f8ab9165b4a: mov    %rcx,0x30(%rsp)
  0x00007f8ab9165b4f: mov    %r8,0x28(%rsp)
  0x00007f8ab9165b54: mov    %r9,0x20(%rsp)
  0x00007f8ab9165b59: mov    %rdi,0x18(%rsp)
  0x00007f8ab9165b5e: mov    0x50(%rsp),%rax
  0x00007f8ab9165b63: mov    %rax,0x10(%rsp)
  0x00007f8ab9165b68: mov    0x58(%rsp),%rax
  0x00007f8ab9165b6d: mov    %rax,0x8(%rsp)
  0x00007f8ab9165b72: mov    0x40(%rbx),%rcx
  0x00007f8ab9165b76: jmpq   *%rcx

AHE@0x00007f8ac812f268: 0xbbbbbbbbbb000000 i2c: 0x00007f8ab91654e0 c2i: 0x00007f8ab9165656 c2iUV: 0x00007f8ab9165629
i2c argument handler #113 for: static (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (702 bytes generated)
c2i argument handler starts at 0x7f8ab9165656
  0x00007f8ab91654e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91654e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91654ee: cmp    %r11,%rax
  0x00007f8ab91654f1: jbe    0x00007f8ab916550a
  0x00007f8ab91654f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9165501: cmp    %r11,%rax
  0x00007f8ab9165504: jb     0x00007f8ab91655cd
  0x00007f8ab916550a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9165514: cmp    %r11,%rax
  0x00007f8ab9165517: jbe    0x00007f8ab9165530
  0x00007f8ab916551d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9165527: cmp    %r11,%rax
  0x00007f8ab916552a: jb     0x00007f8ab91655cd
  0x00007f8ab9165530: movabs $0x7f8ab9140820,%r11
  0x00007f8ab916553a: cmp    %r11,%rax
  0x00007f8ab916553d: jbe    0x00007f8ab9165556
  0x00007f8ab9165543: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab916554d: cmp    %r11,%rax
  0x00007f8ab9165550: jb     0x00007f8ab91655cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9165556: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916555b: sub    $0x80,%rsp
  0x00007f8ab9165562: mov    %rax,0x78(%rsp)
  0x00007f8ab9165567: mov    %rcx,0x70(%rsp)
  0x00007f8ab916556c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9165571: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165576: mov    %rbp,0x50(%rsp)
  0x00007f8ab916557b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9165580: mov    %rdi,0x40(%rsp)
  0x00007f8ab9165585: mov    %r8,0x38(%rsp)
  0x00007f8ab916558a: mov    %r9,0x30(%rsp)
  0x00007f8ab916558f: mov    %r10,0x28(%rsp)
  0x00007f8ab9165594: mov    %r11,0x20(%rsp)
  0x00007f8ab9165599: mov    %r12,0x18(%rsp)
  0x00007f8ab916559e: mov    %r13,0x10(%rsp)
  0x00007f8ab91655a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91655a8: mov    %r15,(%rsp)
  0x00007f8ab91655ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91655b6: movabs $0x7f8ab9165556,%rsi
  0x00007f8ab91655c0: mov    %rsp,%rdx
  0x00007f8ab91655c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91655c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91655cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91655cd: mov    %rsp,%r11
  0x00007f8ab91655d0: sub    $0x20,%rsp
  0x00007f8ab91655d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91655d8: push   %rax
  0x00007f8ab91655d9: mov    %r11,%rax
  0x00007f8ab91655dc: mov    0x50(%rbx),%r11
  0x00007f8ab91655e0: mov    0x50(%rax),%rsi
  0x00007f8ab91655e4: mov    0x48(%rax),%rdx
  0x00007f8ab91655e8: mov    0x40(%rax),%rcx
  0x00007f8ab91655ec: mov    0x38(%rax),%r8
  0x00007f8ab91655f0: mov    0x30(%rax),%r9
  0x00007f8ab91655f4: mov    0x28(%rax),%rdi
  0x00007f8ab91655f8: mov    0x20(%rax),%r13
  0x00007f8ab91655fc: mov    %r13,0x8(%rsp)
  0x00007f8ab9165601: mov    0x18(%rax),%r13
  0x00007f8ab9165605: mov    %r13,0x10(%rsp)
  0x00007f8ab916560a: mov    0x10(%rax),%r13
  0x00007f8ab916560e: mov    %r13,0x18(%rsp)
  0x00007f8ab9165613: mov    0x8(%rax),%r13
  0x00007f8ab9165617: mov    %r13,0x20(%rsp)
  0x00007f8ab916561c: mov    %rbx,0x258(%r15)
  0x00007f8ab9165623: mov    %rbx,%rax
  0x00007f8ab9165626: jmpq   *%r11
  0x00007f8ab9165629: mov    0x8(%rsi),%ebx
  0x00007f8ab916562c: shl    $0x3,%rbx
  0x00007f8ab9165630: cmp    0x10(%rax),%rbx
  0x00007f8ab9165634: mov    0x8(%rax),%rbx
  0x00007f8ab9165638: je     0x00007f8ab9165643
  0x00007f8ab916563e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9165643: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916564b: je     0x00007f8ab9165746
  0x00007f8ab9165651: jmpq   0x00007f8ab9105c40
  0x00007f8ab9165656: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab916565e: je     0x00007f8ab9165746
  0x00007f8ab9165664: mov    %rsp,%r13
  0x00007f8ab9165667: mov    (%rsp),%rax
  0x00007f8ab916566b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916566f: pushfq 
  0x00007f8ab9165670: sub    $0x8,%rsp
  0x00007f8ab9165674: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9165679: sub    $0x80,%rsp
  0x00007f8ab9165680: mov    %rax,0x78(%rsp)
  0x00007f8ab9165685: mov    %rcx,0x70(%rsp)
  0x00007f8ab916568a: mov    %rdx,0x68(%rsp)
  0x00007f8ab916568f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165694: mov    %rbp,0x50(%rsp)
  0x00007f8ab9165699: mov    %rsi,0x48(%rsp)
  0x00007f8ab916569e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91656a3: mov    %r8,0x38(%rsp)
  0x00007f8ab91656a8: mov    %r9,0x30(%rsp)
  0x00007f8ab91656ad: mov    %r10,0x28(%rsp)
  0x00007f8ab91656b2: mov    %r11,0x20(%rsp)
  0x00007f8ab91656b7: mov    %r12,0x18(%rsp)
  0x00007f8ab91656bc: mov    %r13,0x10(%rsp)
  0x00007f8ab91656c1: mov    %r14,0x8(%rsp)
  0x00007f8ab91656c6: mov    %r15,(%rsp)
  0x00007f8ab91656ca: sub    $0x200,%rsp
  0x00007f8ab91656d1: fxsave64 (%rsp)
  0x00007f8ab91656d6: mov    %rbx,%rdi
  0x00007f8ab91656d9: mov    %rax,%rsi
  0x00007f8ab91656dc: callq  0x00007f8acef8bbca
  0x00007f8ab91656e1: fxrstor64 (%rsp)
  0x00007f8ab91656e6: add    $0x200,%rsp
  0x00007f8ab91656ed: mov    (%rsp),%r15
  0x00007f8ab91656f1: mov    0x8(%rsp),%r14
  0x00007f8ab91656f6: mov    0x10(%rsp),%r13
  0x00007f8ab91656fb: mov    0x18(%rsp),%r12
  0x00007f8ab9165700: mov    0x20(%rsp),%r11
  0x00007f8ab9165705: mov    0x28(%rsp),%r10
  0x00007f8ab916570a: mov    0x30(%rsp),%r9
  0x00007f8ab916570f: mov    0x38(%rsp),%r8
  0x00007f8ab9165714: mov    0x40(%rsp),%rdi
  0x00007f8ab9165719: mov    0x48(%rsp),%rsi
  0x00007f8ab916571e: mov    0x50(%rsp),%rbp
  0x00007f8ab9165723: mov    0x60(%rsp),%rbx
  0x00007f8ab9165728: mov    0x68(%rsp),%rdx
  0x00007f8ab916572d: mov    0x70(%rsp),%rcx
  0x00007f8ab9165732: mov    0x78(%rsp),%rax
  0x00007f8ab9165737: add    $0x80,%rsp
  0x00007f8ab916573e: add    $0x8,%rsp
  0x00007f8ab9165742: popfq  
  0x00007f8ab9165743: mov    %r13,%rsp
  0x00007f8ab9165746: pop    %rax
  0x00007f8ab9165747: mov    %rsp,%r13
  0x00007f8ab916574a: sub    $0x60,%rsp
  0x00007f8ab916574e: mov    %rax,(%rsp)
  0x00007f8ab9165752: mov    %rsi,0x50(%rsp)
  0x00007f8ab9165757: mov    %rdx,0x48(%rsp)
  0x00007f8ab916575c: mov    %rcx,0x40(%rsp)
  0x00007f8ab9165761: mov    %r8,0x38(%rsp)
  0x00007f8ab9165766: mov    %r9,0x30(%rsp)
  0x00007f8ab916576b: mov    %rdi,0x28(%rsp)
  0x00007f8ab9165770: mov    0x60(%rsp),%rax
  0x00007f8ab9165775: mov    %rax,0x20(%rsp)
  0x00007f8ab916577a: mov    0x68(%rsp),%rax
  0x00007f8ab916577f: mov    %rax,0x18(%rsp)
  0x00007f8ab9165784: mov    0x70(%rsp),%rax
  0x00007f8ab9165789: mov    %rax,0x10(%rsp)
  0x00007f8ab916578e: mov    0x78(%rsp),%rax
  0x00007f8ab9165793: mov    %rax,0x8(%rsp)
  0x00007f8ab9165798: mov    0x40(%rbx),%rcx
  0x00007f8ab916579c: jmpq   *%rcx

AHE@0x00007f8ac812f2b0: 0xbbbbbbbbbbbb0000 i2c: 0x00007f8ab91f6620 c2i: 0x00007f8ab91f67a8 c2iUV: 0x00007f8ab91f677b
i2c argument handler #114 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (752 bytes generated)
c2i argument handler starts at 0x7f8ab91f67a8
  0x00007f8ab91f6620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91f6624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91f662e: cmp    %r11,%rax
  0x00007f8ab91f6631: jbe    0x00007f8ab91f664a
  0x00007f8ab91f6637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91f6641: cmp    %r11,%rax
  0x00007f8ab91f6644: jb     0x00007f8ab91f670d
  0x00007f8ab91f664a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91f6654: cmp    %r11,%rax
  0x00007f8ab91f6657: jbe    0x00007f8ab91f6670
  0x00007f8ab91f665d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91f6667: cmp    %r11,%rax
  0x00007f8ab91f666a: jb     0x00007f8ab91f670d
  0x00007f8ab91f6670: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91f667a: cmp    %r11,%rax
  0x00007f8ab91f667d: jbe    0x00007f8ab91f6696
  0x00007f8ab91f6683: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91f668d: cmp    %r11,%rax
  0x00007f8ab91f6690: jb     0x00007f8ab91f670d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91f6696: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f669b: sub    $0x80,%rsp
  0x00007f8ab91f66a2: mov    %rax,0x78(%rsp)
  0x00007f8ab91f66a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f66ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f66b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f66b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f66bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f66c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f66c5: mov    %r8,0x38(%rsp)
  0x00007f8ab91f66ca: mov    %r9,0x30(%rsp)
  0x00007f8ab91f66cf: mov    %r10,0x28(%rsp)
  0x00007f8ab91f66d4: mov    %r11,0x20(%rsp)
  0x00007f8ab91f66d9: mov    %r12,0x18(%rsp)
  0x00007f8ab91f66de: mov    %r13,0x10(%rsp)
  0x00007f8ab91f66e3: mov    %r14,0x8(%rsp)
  0x00007f8ab91f66e8: mov    %r15,(%rsp)
  0x00007f8ab91f66ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91f66f6: movabs $0x7f8ab91f6696,%rsi
  0x00007f8ab91f6700: mov    %rsp,%rdx
  0x00007f8ab91f6703: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6707: callq  0x00007f8aceddb9fa
  0x00007f8ab91f670c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91f670d: mov    %rsp,%r11
  0x00007f8ab91f6710: sub    $0x30,%rsp
  0x00007f8ab91f6714: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6718: push   %rax
  0x00007f8ab91f6719: mov    %r11,%rax
  0x00007f8ab91f671c: mov    0x50(%rbx),%r11
  0x00007f8ab91f6720: mov    0x60(%rax),%rsi
  0x00007f8ab91f6724: mov    0x58(%rax),%rdx
  0x00007f8ab91f6728: mov    0x50(%rax),%rcx
  0x00007f8ab91f672c: mov    0x48(%rax),%r8
  0x00007f8ab91f6730: mov    0x40(%rax),%r9
  0x00007f8ab91f6734: mov    0x38(%rax),%rdi
  0x00007f8ab91f6738: mov    0x30(%rax),%r13
  0x00007f8ab91f673c: mov    %r13,0x8(%rsp)
  0x00007f8ab91f6741: mov    0x28(%rax),%r13
  0x00007f8ab91f6745: mov    %r13,0x10(%rsp)
  0x00007f8ab91f674a: mov    0x20(%rax),%r13
  0x00007f8ab91f674e: mov    %r13,0x18(%rsp)
  0x00007f8ab91f6753: mov    0x18(%rax),%r13
  0x00007f8ab91f6757: mov    %r13,0x20(%rsp)
  0x00007f8ab91f675c: mov    0x10(%rax),%r13
  0x00007f8ab91f6760: mov    %r13,0x28(%rsp)
  0x00007f8ab91f6765: mov    0x8(%rax),%r13
  0x00007f8ab91f6769: mov    %r13,0x30(%rsp)
  0x00007f8ab91f676e: mov    %rbx,0x258(%r15)
  0x00007f8ab91f6775: mov    %rbx,%rax
  0x00007f8ab91f6778: jmpq   *%r11
  0x00007f8ab91f677b: mov    0x8(%rsi),%ebx
  0x00007f8ab91f677e: shl    $0x3,%rbx
  0x00007f8ab91f6782: cmp    0x10(%rax),%rbx
  0x00007f8ab91f6786: mov    0x8(%rax),%rbx
  0x00007f8ab91f678a: je     0x00007f8ab91f6795
  0x00007f8ab91f6790: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f6795: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f679d: je     0x00007f8ab91f6898
  0x00007f8ab91f67a3: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f67a8: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f67b0: je     0x00007f8ab91f6898
  0x00007f8ab91f67b6: mov    %rsp,%r13
  0x00007f8ab91f67b9: mov    (%rsp),%rax
  0x00007f8ab91f67bd: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f67c1: pushfq 
  0x00007f8ab91f67c2: sub    $0x8,%rsp
  0x00007f8ab91f67c6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f67cb: sub    $0x80,%rsp
  0x00007f8ab91f67d2: mov    %rax,0x78(%rsp)
  0x00007f8ab91f67d7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f67dc: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f67e1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f67e6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f67eb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f67f0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f67f5: mov    %r8,0x38(%rsp)
  0x00007f8ab91f67fa: mov    %r9,0x30(%rsp)
  0x00007f8ab91f67ff: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6804: mov    %r11,0x20(%rsp)
  0x00007f8ab91f6809: mov    %r12,0x18(%rsp)
  0x00007f8ab91f680e: mov    %r13,0x10(%rsp)
  0x00007f8ab91f6813: mov    %r14,0x8(%rsp)
  0x00007f8ab91f6818: mov    %r15,(%rsp)
  0x00007f8ab91f681c: sub    $0x200,%rsp
  0x00007f8ab91f6823: fxsave64 (%rsp)
  0x00007f8ab91f6828: mov    %rbx,%rdi
  0x00007f8ab91f682b: mov    %rax,%rsi
  0x00007f8ab91f682e: callq  0x00007f8acef8bbca
  0x00007f8ab91f6833: fxrstor64 (%rsp)
  0x00007f8ab91f6838: add    $0x200,%rsp
  0x00007f8ab91f683f: mov    (%rsp),%r15
  0x00007f8ab91f6843: mov    0x8(%rsp),%r14
  0x00007f8ab91f6848: mov    0x10(%rsp),%r13
  0x00007f8ab91f684d: mov    0x18(%rsp),%r12
  0x00007f8ab91f6852: mov    0x20(%rsp),%r11
  0x00007f8ab91f6857: mov    0x28(%rsp),%r10
  0x00007f8ab91f685c: mov    0x30(%rsp),%r9
  0x00007f8ab91f6861: mov    0x38(%rsp),%r8
  0x00007f8ab91f6866: mov    0x40(%rsp),%rdi
  0x00007f8ab91f686b: mov    0x48(%rsp),%rsi
  0x00007f8ab91f6870: mov    0x50(%rsp),%rbp
  0x00007f8ab91f6875: mov    0x60(%rsp),%rbx
  0x00007f8ab91f687a: mov    0x68(%rsp),%rdx
  0x00007f8ab91f687f: mov    0x70(%rsp),%rcx
  0x00007f8ab91f6884: mov    0x78(%rsp),%rax
  0x00007f8ab91f6889: add    $0x80,%rsp
  0x00007f8ab91f6890: add    $0x8,%rsp
  0x00007f8ab91f6894: popfq  
  0x00007f8ab91f6895: mov    %r13,%rsp
  0x00007f8ab91f6898: pop    %rax
  0x00007f8ab91f6899: mov    %rsp,%r13
  0x00007f8ab91f689c: sub    $0x70,%rsp
  0x00007f8ab91f68a0: mov    %rax,(%rsp)
  0x00007f8ab91f68a4: mov    %rsi,0x60(%rsp)
  0x00007f8ab91f68a9: mov    %rdx,0x58(%rsp)
  0x00007f8ab91f68ae: mov    %rcx,0x50(%rsp)
  0x00007f8ab91f68b3: mov    %r8,0x48(%rsp)
  0x00007f8ab91f68b8: mov    %r9,0x40(%rsp)
  0x00007f8ab91f68bd: mov    %rdi,0x38(%rsp)
  0x00007f8ab91f68c2: mov    0x70(%rsp),%rax
  0x00007f8ab91f68c7: mov    %rax,0x30(%rsp)
  0x00007f8ab91f68cc: mov    0x78(%rsp),%rax
  0x00007f8ab91f68d1: mov    %rax,0x28(%rsp)
  0x00007f8ab91f68d6: mov    0x80(%rsp),%rax
  0x00007f8ab91f68de: mov    %rax,0x20(%rsp)
  0x00007f8ab91f68e3: mov    0x88(%rsp),%rax
  0x00007f8ab91f68eb: mov    %rax,0x18(%rsp)
  0x00007f8ab91f68f0: mov    0x90(%rsp),%rax
  0x00007f8ab91f68f8: mov    %rax,0x10(%rsp)
  0x00007f8ab91f68fd: mov    0x98(%rsp),%rax
  0x00007f8ab91f6905: mov    %rax,0x8(%rsp)
  0x00007f8ab91f690a: mov    0x40(%rbx),%rcx
  0x00007f8ab91f690e: jmpq   *%rcx

AHE@0x00007f8ac812f2f8: 0xbbbbbbbbbbb00000 i2c: 0x00007f8ab91f69e0 c2i: 0x00007f8ab91f6b5f c2iUV: 0x00007f8ab91f6b32
i2c argument handler #115 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (724 bytes generated)
c2i argument handler starts at 0x7f8ab91f6b5f
  0x00007f8ab91f69e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91f69e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91f69ee: cmp    %r11,%rax
  0x00007f8ab91f69f1: jbe    0x00007f8ab91f6a0a
  0x00007f8ab91f69f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91f6a01: cmp    %r11,%rax
  0x00007f8ab91f6a04: jb     0x00007f8ab91f6acd
  0x00007f8ab91f6a0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91f6a14: cmp    %r11,%rax
  0x00007f8ab91f6a17: jbe    0x00007f8ab91f6a30
  0x00007f8ab91f6a1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91f6a27: cmp    %r11,%rax
  0x00007f8ab91f6a2a: jb     0x00007f8ab91f6acd
  0x00007f8ab91f6a30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91f6a3a: cmp    %r11,%rax
  0x00007f8ab91f6a3d: jbe    0x00007f8ab91f6a56
  0x00007f8ab91f6a43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91f6a4d: cmp    %r11,%rax
  0x00007f8ab91f6a50: jb     0x00007f8ab91f6acd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91f6a56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f6a5b: sub    $0x80,%rsp
  0x00007f8ab91f6a62: mov    %rax,0x78(%rsp)
  0x00007f8ab91f6a67: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f6a6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f6a71: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f6a76: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f6a7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f6a80: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f6a85: mov    %r8,0x38(%rsp)
  0x00007f8ab91f6a8a: mov    %r9,0x30(%rsp)
  0x00007f8ab91f6a8f: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6a94: mov    %r11,0x20(%rsp)
  0x00007f8ab91f6a99: mov    %r12,0x18(%rsp)
  0x00007f8ab91f6a9e: mov    %r13,0x10(%rsp)
  0x00007f8ab91f6aa3: mov    %r14,0x8(%rsp)
  0x00007f8ab91f6aa8: mov    %r15,(%rsp)
  0x00007f8ab91f6aac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91f6ab6: movabs $0x7f8ab91f6a56,%rsi
  0x00007f8ab91f6ac0: mov    %rsp,%rdx
  0x00007f8ab91f6ac3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6ac7: callq  0x00007f8aceddb9fa
  0x00007f8ab91f6acc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91f6acd: mov    %rsp,%r11
  0x00007f8ab91f6ad0: sub    $0x30,%rsp
  0x00007f8ab91f6ad4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6ad8: push   %rax
  0x00007f8ab91f6ad9: mov    %r11,%rax
  0x00007f8ab91f6adc: mov    0x50(%rbx),%r11
  0x00007f8ab91f6ae0: mov    0x58(%rax),%rsi
  0x00007f8ab91f6ae4: mov    0x50(%rax),%rdx
  0x00007f8ab91f6ae8: mov    0x48(%rax),%rcx
  0x00007f8ab91f6aec: mov    0x40(%rax),%r8
  0x00007f8ab91f6af0: mov    0x38(%rax),%r9
  0x00007f8ab91f6af4: mov    0x30(%rax),%rdi
  0x00007f8ab91f6af8: mov    0x28(%rax),%r13
  0x00007f8ab91f6afc: mov    %r13,0x8(%rsp)
  0x00007f8ab91f6b01: mov    0x20(%rax),%r13
  0x00007f8ab91f6b05: mov    %r13,0x10(%rsp)
  0x00007f8ab91f6b0a: mov    0x18(%rax),%r13
  0x00007f8ab91f6b0e: mov    %r13,0x18(%rsp)
  0x00007f8ab91f6b13: mov    0x10(%rax),%r13
  0x00007f8ab91f6b17: mov    %r13,0x20(%rsp)
  0x00007f8ab91f6b1c: mov    0x8(%rax),%r13
  0x00007f8ab91f6b20: mov    %r13,0x28(%rsp)
  0x00007f8ab91f6b25: mov    %rbx,0x258(%r15)
  0x00007f8ab91f6b2c: mov    %rbx,%rax
  0x00007f8ab91f6b2f: jmpq   *%r11
  0x00007f8ab91f6b32: mov    0x8(%rsi),%ebx
  0x00007f8ab91f6b35: shl    $0x3,%rbx
  0x00007f8ab91f6b39: cmp    0x10(%rax),%rbx
  0x00007f8ab91f6b3d: mov    0x8(%rax),%rbx
  0x00007f8ab91f6b41: je     0x00007f8ab91f6b4c
  0x00007f8ab91f6b47: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f6b4c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f6b54: je     0x00007f8ab91f6c4f
  0x00007f8ab91f6b5a: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f6b5f: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f6b67: je     0x00007f8ab91f6c4f
  0x00007f8ab91f6b6d: mov    %rsp,%r13
  0x00007f8ab91f6b70: mov    (%rsp),%rax
  0x00007f8ab91f6b74: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6b78: pushfq 
  0x00007f8ab91f6b79: sub    $0x8,%rsp
  0x00007f8ab91f6b7d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f6b82: sub    $0x80,%rsp
  0x00007f8ab91f6b89: mov    %rax,0x78(%rsp)
  0x00007f8ab91f6b8e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f6b93: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f6b98: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f6b9d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f6ba2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f6ba7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f6bac: mov    %r8,0x38(%rsp)
  0x00007f8ab91f6bb1: mov    %r9,0x30(%rsp)
  0x00007f8ab91f6bb6: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6bbb: mov    %r11,0x20(%rsp)
  0x00007f8ab91f6bc0: mov    %r12,0x18(%rsp)
  0x00007f8ab91f6bc5: mov    %r13,0x10(%rsp)
  0x00007f8ab91f6bca: mov    %r14,0x8(%rsp)
  0x00007f8ab91f6bcf: mov    %r15,(%rsp)
  0x00007f8ab91f6bd3: sub    $0x200,%rsp
  0x00007f8ab91f6bda: fxsave64 (%rsp)
  0x00007f8ab91f6bdf: mov    %rbx,%rdi
  0x00007f8ab91f6be2: mov    %rax,%rsi
  0x00007f8ab91f6be5: callq  0x00007f8acef8bbca
  0x00007f8ab91f6bea: fxrstor64 (%rsp)
  0x00007f8ab91f6bef: add    $0x200,%rsp
  0x00007f8ab91f6bf6: mov    (%rsp),%r15
  0x00007f8ab91f6bfa: mov    0x8(%rsp),%r14
  0x00007f8ab91f6bff: mov    0x10(%rsp),%r13
  0x00007f8ab91f6c04: mov    0x18(%rsp),%r12
  0x00007f8ab91f6c09: mov    0x20(%rsp),%r11
  0x00007f8ab91f6c0e: mov    0x28(%rsp),%r10
  0x00007f8ab91f6c13: mov    0x30(%rsp),%r9
  0x00007f8ab91f6c18: mov    0x38(%rsp),%r8
  0x00007f8ab91f6c1d: mov    0x40(%rsp),%rdi
  0x00007f8ab91f6c22: mov    0x48(%rsp),%rsi
  0x00007f8ab91f6c27: mov    0x50(%rsp),%rbp
  0x00007f8ab91f6c2c: mov    0x60(%rsp),%rbx
  0x00007f8ab91f6c31: mov    0x68(%rsp),%rdx
  0x00007f8ab91f6c36: mov    0x70(%rsp),%rcx
  0x00007f8ab91f6c3b: mov    0x78(%rsp),%rax
  0x00007f8ab91f6c40: add    $0x80,%rsp
  0x00007f8ab91f6c47: add    $0x8,%rsp
  0x00007f8ab91f6c4b: popfq  
  0x00007f8ab91f6c4c: mov    %r13,%rsp
  0x00007f8ab91f6c4f: pop    %rax
  0x00007f8ab91f6c50: mov    %rsp,%r13
  0x00007f8ab91f6c53: sub    $0x60,%rsp
  0x00007f8ab91f6c57: mov    %rax,(%rsp)
  0x00007f8ab91f6c5b: mov    %rsi,0x58(%rsp)
  0x00007f8ab91f6c60: mov    %rdx,0x50(%rsp)
  0x00007f8ab91f6c65: mov    %rcx,0x48(%rsp)
  0x00007f8ab91f6c6a: mov    %r8,0x40(%rsp)
  0x00007f8ab91f6c6f: mov    %r9,0x38(%rsp)
  0x00007f8ab91f6c74: mov    %rdi,0x30(%rsp)
  0x00007f8ab91f6c79: mov    0x60(%rsp),%rax
  0x00007f8ab91f6c7e: mov    %rax,0x28(%rsp)
  0x00007f8ab91f6c83: mov    0x68(%rsp),%rax
  0x00007f8ab91f6c88: mov    %rax,0x20(%rsp)
  0x00007f8ab91f6c8d: mov    0x70(%rsp),%rax
  0x00007f8ab91f6c92: mov    %rax,0x18(%rsp)
  0x00007f8ab91f6c97: mov    0x78(%rsp),%rax
  0x00007f8ab91f6c9c: mov    %rax,0x10(%rsp)
  0x00007f8ab91f6ca1: mov    0x80(%rsp),%rax
  0x00007f8ab91f6ca9: mov    %rax,0x8(%rsp)
  0x00007f8ab91f6cae: mov    0x40(%rbx),%rcx
  0x00007f8ab91f6cb2: jmpq   *%rcx

AHE@0x00007f8ac812f340: 0xabb00000 i2c: 0x00007f8ab91f6d60 c2i: 0x00007f8ab91f6ea1 c2iUV: 0x00007f8ab91f6e74
i2c argument handler #116 for: static (ZLjava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle; (593 bytes generated)
c2i argument handler starts at 0x7f8ab91f6ea1
  0x00007f8ab91f6d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91f6d64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91f6d6e: cmp    %r11,%rax
  0x00007f8ab91f6d71: jbe    0x00007f8ab91f6d8a
  0x00007f8ab91f6d77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91f6d81: cmp    %r11,%rax
  0x00007f8ab91f6d84: jb     0x00007f8ab91f6e4d
  0x00007f8ab91f6d8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91f6d94: cmp    %r11,%rax
  0x00007f8ab91f6d97: jbe    0x00007f8ab91f6db0
  0x00007f8ab91f6d9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91f6da7: cmp    %r11,%rax
  0x00007f8ab91f6daa: jb     0x00007f8ab91f6e4d
  0x00007f8ab91f6db0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91f6dba: cmp    %r11,%rax
  0x00007f8ab91f6dbd: jbe    0x00007f8ab91f6dd6
  0x00007f8ab91f6dc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91f6dcd: cmp    %r11,%rax
  0x00007f8ab91f6dd0: jb     0x00007f8ab91f6e4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91f6dd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f6ddb: sub    $0x80,%rsp
  0x00007f8ab91f6de2: mov    %rax,0x78(%rsp)
  0x00007f8ab91f6de7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f6dec: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f6df1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f6df6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f6dfb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f6e00: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f6e05: mov    %r8,0x38(%rsp)
  0x00007f8ab91f6e0a: mov    %r9,0x30(%rsp)
  0x00007f8ab91f6e0f: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6e14: mov    %r11,0x20(%rsp)
  0x00007f8ab91f6e19: mov    %r12,0x18(%rsp)
  0x00007f8ab91f6e1e: mov    %r13,0x10(%rsp)
  0x00007f8ab91f6e23: mov    %r14,0x8(%rsp)
  0x00007f8ab91f6e28: mov    %r15,(%rsp)
  0x00007f8ab91f6e2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91f6e36: movabs $0x7f8ab91f6dd6,%rsi
  0x00007f8ab91f6e40: mov    %rsp,%rdx
  0x00007f8ab91f6e43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6e47: callq  0x00007f8aceddb9fa
  0x00007f8ab91f6e4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91f6e4d: mov    %rsp,%r11
  0x00007f8ab91f6e50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6e54: push   %rax
  0x00007f8ab91f6e55: mov    %r11,%rax
  0x00007f8ab91f6e58: mov    0x50(%rbx),%r11
  0x00007f8ab91f6e5c: mov    0x18(%rax),%esi
  0x00007f8ab91f6e5f: mov    0x10(%rax),%rdx
  0x00007f8ab91f6e63: mov    0x8(%rax),%rcx
  0x00007f8ab91f6e67: mov    %rbx,0x258(%r15)
  0x00007f8ab91f6e6e: mov    %rbx,%rax
  0x00007f8ab91f6e71: jmpq   *%r11
  0x00007f8ab91f6e74: mov    0x8(%rsi),%ebx
  0x00007f8ab91f6e77: shl    $0x3,%rbx
  0x00007f8ab91f6e7b: cmp    0x10(%rax),%rbx
  0x00007f8ab91f6e7f: mov    0x8(%rax),%rbx
  0x00007f8ab91f6e83: je     0x00007f8ab91f6e8e
  0x00007f8ab91f6e89: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f6e8e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f6e96: je     0x00007f8ab91f6f91
  0x00007f8ab91f6e9c: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f6ea1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f6ea9: je     0x00007f8ab91f6f91
  0x00007f8ab91f6eaf: mov    %rsp,%r13
  0x00007f8ab91f6eb2: mov    (%rsp),%rax
  0x00007f8ab91f6eb6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6eba: pushfq 
  0x00007f8ab91f6ebb: sub    $0x8,%rsp
  0x00007f8ab91f6ebf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f6ec4: sub    $0x80,%rsp
  0x00007f8ab91f6ecb: mov    %rax,0x78(%rsp)
  0x00007f8ab91f6ed0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f6ed5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f6eda: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f6edf: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f6ee4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f6ee9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f6eee: mov    %r8,0x38(%rsp)
  0x00007f8ab91f6ef3: mov    %r9,0x30(%rsp)
  0x00007f8ab91f6ef8: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6efd: mov    %r11,0x20(%rsp)
  0x00007f8ab91f6f02: mov    %r12,0x18(%rsp)
  0x00007f8ab91f6f07: mov    %r13,0x10(%rsp)
  0x00007f8ab91f6f0c: mov    %r14,0x8(%rsp)
  0x00007f8ab91f6f11: mov    %r15,(%rsp)
  0x00007f8ab91f6f15: sub    $0x200,%rsp
  0x00007f8ab91f6f1c: fxsave64 (%rsp)
  0x00007f8ab91f6f21: mov    %rbx,%rdi
  0x00007f8ab91f6f24: mov    %rax,%rsi
  0x00007f8ab91f6f27: callq  0x00007f8acef8bbca
  0x00007f8ab91f6f2c: fxrstor64 (%rsp)
  0x00007f8ab91f6f31: add    $0x200,%rsp
  0x00007f8ab91f6f38: mov    (%rsp),%r15
  0x00007f8ab91f6f3c: mov    0x8(%rsp),%r14
  0x00007f8ab91f6f41: mov    0x10(%rsp),%r13
  0x00007f8ab91f6f46: mov    0x18(%rsp),%r12
  0x00007f8ab91f6f4b: mov    0x20(%rsp),%r11
  0x00007f8ab91f6f50: mov    0x28(%rsp),%r10
  0x00007f8ab91f6f55: mov    0x30(%rsp),%r9
  0x00007f8ab91f6f5a: mov    0x38(%rsp),%r8
  0x00007f8ab91f6f5f: mov    0x40(%rsp),%rdi
  0x00007f8ab91f6f64: mov    0x48(%rsp),%rsi
  0x00007f8ab91f6f69: mov    0x50(%rsp),%rbp
  0x00007f8ab91f6f6e: mov    0x60(%rsp),%rbx
  0x00007f8ab91f6f73: mov    0x68(%rsp),%rdx
  0x00007f8ab91f6f78: mov    0x70(%rsp),%rcx
  0x00007f8ab91f6f7d: mov    0x78(%rsp),%rax
  0x00007f8ab91f6f82: add    $0x80,%rsp
  0x00007f8ab91f6f89: add    $0x8,%rsp
  0x00007f8ab91f6f8d: popfq  
  0x00007f8ab91f6f8e: mov    %r13,%rsp
  0x00007f8ab91f6f91: pop    %rax
  0x00007f8ab91f6f92: mov    %rsp,%r13
  0x00007f8ab91f6f95: sub    $0x20,%rsp
  0x00007f8ab91f6f99: mov    %rax,(%rsp)
  0x00007f8ab91f6f9d: mov    %esi,0x18(%rsp)
  0x00007f8ab91f6fa1: mov    %rdx,0x10(%rsp)
  0x00007f8ab91f6fa6: mov    %rcx,0x8(%rsp)
  0x00007f8ab91f6fab: mov    0x40(%rbx),%rcx
  0x00007f8ab91f6faf: jmpq   *%rcx

Decoding RuntimeStub - throw_index_exception Runtime1 stub 0x00007f8ab9165ed0
  0x00007f8ab9165f60: push   %rbp
  0x00007f8ab9165f61: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab9165f64: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9165f69: sub    $0x80,%rsp
  0x00007f8ab9165f70: mov    %rax,0x78(%rsp)
  0x00007f8ab9165f75: mov    %rcx,0x70(%rsp)
  0x00007f8ab9165f7a: mov    %rdx,0x68(%rsp)
  0x00007f8ab9165f7f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9165f84: mov    %rbp,0x50(%rsp)
  0x00007f8ab9165f89: mov    %rsi,0x48(%rsp)
  0x00007f8ab9165f8e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9165f93: mov    %r8,0x38(%rsp)
  0x00007f8ab9165f98: mov    %r9,0x30(%rsp)
  0x00007f8ab9165f9d: mov    %r10,0x28(%rsp)
  0x00007f8ab9165fa2: mov    %r11,0x20(%rsp)
  0x00007f8ab9165fa7: mov    %r12,0x18(%rsp)
  0x00007f8ab9165fac: mov    %r13,0x10(%rsp)
  0x00007f8ab9165fb1: mov    %r14,0x8(%rsp)
  0x00007f8ab9165fb6: mov    %r15,(%rsp)
  0x00007f8ab9165fba: sub    $0x150,%rsp
  0x00007f8ab9165fc1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9165fcd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9165fd3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9165fd9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab9165fdf: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9165fe5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab9165feb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9165ff1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9165ff7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab9165ffd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9166003: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9166009: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab916600f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9166015: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab916601b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9166021: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9166027: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9166030: movabs $0xdead,%rax
  0x00007f8ab916603a: movabs $0xdead,%rbx
  0x00007f8ab9166044: movabs $0xdead,%rcx
  0x00007f8ab916604e: movabs $0xdead,%rdx
  0x00007f8ab9166058: movabs $0xdead,%rsi
  0x00007f8ab9166062: movabs $0xdead,%rdi
  0x00007f8ab916606c: mov    0x10(%rbp),%rsi
  0x00007f8ab9166070: mov    %r15,%rdi
  0x00007f8ab9166073: mov    %rbp,0x210(%r15)
  0x00007f8ab916607a: mov    %rsp,0x200(%r15)
  0x00007f8ab9166081: callq  0x00007f8ace8bbe38
  0x00007f8ab9166086: push   %rax
  0x00007f8ab9166087: push   %rdi
  0x00007f8ab9166088: push   %rsi
  0x00007f8ab9166089: push   %rdx
  0x00007f8ab916608a: push   %rcx
  0x00007f8ab916608b: push   %r8
  0x00007f8ab916608d: push   %r9
  0x00007f8ab916608f: push   %r10
  0x00007f8ab9166091: mov    %rsp,%r10
  0x00007f8ab9166094: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9166098: push   %r10
  0x00007f8ab916609a: push   %r11
  0x00007f8ab916609c: mov    $0x1,%edi
  0x00007f8ab91660a1: callq  0x00007f8acf9c32d0
  0x00007f8ab91660a6: pop    %r11
  0x00007f8ab91660a8: pop    %rsp
  0x00007f8ab91660a9: pop    %r10
  0x00007f8ab91660ab: pop    %r9
  0x00007f8ab91660ad: pop    %r8
  0x00007f8ab91660af: pop    %rcx
  0x00007f8ab91660b0: pop    %rdx
  0x00007f8ab91660b1: pop    %rsi
  0x00007f8ab91660b2: pop    %rdi
  0x00007f8ab91660b3: cmp    %rax,%r15
  0x00007f8ab91660b6: je     0x00007f8ab9166138
  0x00007f8ab91660bc: callq  0x00007f8aceec2a22
  0x00007f8ab91660c1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91660c6: sub    $0x80,%rsp
  0x00007f8ab91660cd: mov    %rax,0x78(%rsp)
  0x00007f8ab91660d2: mov    %rcx,0x70(%rsp)
  0x00007f8ab91660d7: mov    %rdx,0x68(%rsp)
  0x00007f8ab91660dc: mov    %rbx,0x60(%rsp)
  0x00007f8ab91660e1: mov    %rbp,0x50(%rsp)
  0x00007f8ab91660e6: mov    %rsi,0x48(%rsp)
  0x00007f8ab91660eb: mov    %rdi,0x40(%rsp)
  0x00007f8ab91660f0: mov    %r8,0x38(%rsp)
  0x00007f8ab91660f5: mov    %r9,0x30(%rsp)
  0x00007f8ab91660fa: mov    %r10,0x28(%rsp)
  0x00007f8ab91660ff: mov    %r11,0x20(%rsp)
  0x00007f8ab9166104: mov    %r12,0x18(%rsp)
  0x00007f8ab9166109: mov    %r13,0x10(%rsp)
  0x00007f8ab916610e: mov    %r14,0x8(%rsp)
  0x00007f8ab9166113: mov    %r15,(%rsp)
  0x00007f8ab9166117: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9166121: movabs $0x7f8ab91660c1,%rsi
  0x00007f8ab916612b: mov    %rsp,%rdx
  0x00007f8ab916612e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9166132: callq  0x00007f8aceddb9fa
  0x00007f8ab9166137: hlt    
  0x00007f8ab9166138: pop    %rax
  0x00007f8ab9166139: movabs $0x0,%r10
  0x00007f8ab9166143: mov    %r10,0x200(%r15)
  0x00007f8ab916614a: movabs $0x0,%r10
  0x00007f8ab9166154: mov    %r10,0x210(%r15)
  0x00007f8ab916615b: movabs $0x0,%r10
  0x00007f8ab9166165: mov    %r10,0x208(%r15)
  0x00007f8ab916616c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9166174: je     0x00007f8ab9166183
  0x00007f8ab916617a: mov    0x8(%r15),%rax
  0x00007f8ab916617e: jmpq   0x00007f8ab9167c00
  0x00007f8ab9166183: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9166188: sub    $0x80,%rsp
  0x00007f8ab916618f: mov    %rax,0x78(%rsp)
  0x00007f8ab9166194: mov    %rcx,0x70(%rsp)
  0x00007f8ab9166199: mov    %rdx,0x68(%rsp)
  0x00007f8ab916619e: mov    %rbx,0x60(%rsp)
  0x00007f8ab91661a3: mov    %rbp,0x50(%rsp)
  0x00007f8ab91661a8: mov    %rsi,0x48(%rsp)
  0x00007f8ab91661ad: mov    %rdi,0x40(%rsp)
  0x00007f8ab91661b2: mov    %r8,0x38(%rsp)
  0x00007f8ab91661b7: mov    %r9,0x30(%rsp)
  0x00007f8ab91661bc: mov    %r10,0x28(%rsp)
  0x00007f8ab91661c1: mov    %r11,0x20(%rsp)
  0x00007f8ab91661c6: mov    %r12,0x18(%rsp)
  0x00007f8ab91661cb: mov    %r13,0x10(%rsp)
  0x00007f8ab91661d0: mov    %r14,0x8(%rsp)
  0x00007f8ab91661d5: mov    %r15,(%rsp)
  0x00007f8ab91661d9: movabs $0x7f8acf15c678,%rdi
  0x00007f8ab91661e3: movabs $0x7f8ab9166183,%rsi
  0x00007f8ab91661ed: mov    %rsp,%rdx
  0x00007f8ab91661f0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91661f4: callq  0x00007f8aceddb9fa
  0x00007f8ab91661f9: hlt    
  0x00007f8ab91661fa: leaveq 
  0x00007f8ab91661fb: retq   
  0x00007f8ab91661fc: nop
  0x00007f8ab91661fd: nop
  0x00007f8ab91661fe: nop
  0x00007f8ab91661ff: nop

Decoding RuntimeStub - throw_div0_exception Runtime1 stub 0x00007f8ab91f6fd0
  0x00007f8ab91f7060: push   %rbp
  0x00007f8ab91f7061: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f7064: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7069: sub    $0x80,%rsp
  0x00007f8ab91f7070: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7075: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f707a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f707f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f7084: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f7089: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f708e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f7093: mov    %r8,0x38(%rsp)
  0x00007f8ab91f7098: mov    %r9,0x30(%rsp)
  0x00007f8ab91f709d: mov    %r10,0x28(%rsp)
  0x00007f8ab91f70a2: mov    %r11,0x20(%rsp)
  0x00007f8ab91f70a7: mov    %r12,0x18(%rsp)
  0x00007f8ab91f70ac: mov    %r13,0x10(%rsp)
  0x00007f8ab91f70b1: mov    %r14,0x8(%rsp)
  0x00007f8ab91f70b6: mov    %r15,(%rsp)
  0x00007f8ab91f70ba: sub    $0x150,%rsp
  0x00007f8ab91f70c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f70cd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f70d3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f70d9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f70df: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f70e5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f70eb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f70f1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f70f7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f70fd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f7103: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f7109: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f710f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f7115: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f711b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f7121: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f7127: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f7130: movabs $0xdead,%rax
  0x00007f8ab91f713a: movabs $0xdead,%rbx
  0x00007f8ab91f7144: movabs $0xdead,%rcx
  0x00007f8ab91f714e: movabs $0xdead,%rdx
  0x00007f8ab91f7158: movabs $0xdead,%rsi
  0x00007f8ab91f7162: movabs $0xdead,%rdi
  0x00007f8ab91f716c: mov    %r15,%rdi
  0x00007f8ab91f716f: mov    %rbp,0x210(%r15)
  0x00007f8ab91f7176: mov    %rsp,0x200(%r15)
  0x00007f8ab91f717d: callq  0x00007f8ace8bbfee
  0x00007f8ab91f7182: push   %rax
  0x00007f8ab91f7183: push   %rdi
  0x00007f8ab91f7184: push   %rsi
  0x00007f8ab91f7185: push   %rdx
  0x00007f8ab91f7186: push   %rcx
  0x00007f8ab91f7187: push   %r8
  0x00007f8ab91f7189: push   %r9
  0x00007f8ab91f718b: push   %r10
  0x00007f8ab91f718d: mov    %rsp,%r10
  0x00007f8ab91f7190: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f7194: push   %r10
  0x00007f8ab91f7196: push   %r11
  0x00007f8ab91f7198: mov    $0x1,%edi
  0x00007f8ab91f719d: callq  0x00007f8acf9c32d0
  0x00007f8ab91f71a2: pop    %r11
  0x00007f8ab91f71a4: pop    %rsp
  0x00007f8ab91f71a5: pop    %r10
  0x00007f8ab91f71a7: pop    %r9
  0x00007f8ab91f71a9: pop    %r8
  0x00007f8ab91f71ab: pop    %rcx
  0x00007f8ab91f71ac: pop    %rdx
  0x00007f8ab91f71ad: pop    %rsi
  0x00007f8ab91f71ae: pop    %rdi
  0x00007f8ab91f71af: cmp    %rax,%r15
  0x00007f8ab91f71b2: je     0x00007f8ab91f7234
  0x00007f8ab91f71b8: callq  0x00007f8aceec2a22
  0x00007f8ab91f71bd: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f71c2: sub    $0x80,%rsp
  0x00007f8ab91f71c9: mov    %rax,0x78(%rsp)
  0x00007f8ab91f71ce: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f71d3: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f71d8: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f71dd: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f71e2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f71e7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f71ec: mov    %r8,0x38(%rsp)
  0x00007f8ab91f71f1: mov    %r9,0x30(%rsp)
  0x00007f8ab91f71f6: mov    %r10,0x28(%rsp)
  0x00007f8ab91f71fb: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7200: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7205: mov    %r13,0x10(%rsp)
  0x00007f8ab91f720a: mov    %r14,0x8(%rsp)
  0x00007f8ab91f720f: mov    %r15,(%rsp)
  0x00007f8ab91f7213: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f721d: movabs $0x7f8ab91f71bd,%rsi
  0x00007f8ab91f7227: mov    %rsp,%rdx
  0x00007f8ab91f722a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f722e: callq  0x00007f8aceddb9fa
  0x00007f8ab91f7233: hlt    
  0x00007f8ab91f7234: pop    %rax
  0x00007f8ab91f7235: movabs $0x0,%r10
  0x00007f8ab91f723f: mov    %r10,0x200(%r15)
  0x00007f8ab91f7246: movabs $0x0,%r10
  0x00007f8ab91f7250: mov    %r10,0x210(%r15)
  0x00007f8ab91f7257: movabs $0x0,%r10
  0x00007f8ab91f7261: mov    %r10,0x208(%r15)
  0x00007f8ab91f7268: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f7270: je     0x00007f8ab91f727f
  0x00007f8ab91f7276: mov    0x8(%r15),%rax
  0x00007f8ab91f727a: jmpq   0x00007f8ab9167c00
  0x00007f8ab91f727f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7284: sub    $0x80,%rsp
  0x00007f8ab91f728b: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7290: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f7295: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f729a: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f729f: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f72a4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f72a9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f72ae: mov    %r8,0x38(%rsp)
  0x00007f8ab91f72b3: mov    %r9,0x30(%rsp)
  0x00007f8ab91f72b8: mov    %r10,0x28(%rsp)
  0x00007f8ab91f72bd: mov    %r11,0x20(%rsp)
  0x00007f8ab91f72c2: mov    %r12,0x18(%rsp)
  0x00007f8ab91f72c7: mov    %r13,0x10(%rsp)
  0x00007f8ab91f72cc: mov    %r14,0x8(%rsp)
  0x00007f8ab91f72d1: mov    %r15,(%rsp)
  0x00007f8ab91f72d5: movabs $0x7f8acf15c678,%rdi
  0x00007f8ab91f72df: movabs $0x7f8ab91f727f,%rsi
  0x00007f8ab91f72e9: mov    %rsp,%rdx
  0x00007f8ab91f72ec: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f72f0: callq  0x00007f8aceddb9fa
  0x00007f8ab91f72f5: hlt    
  0x00007f8ab91f72f6: leaveq 
  0x00007f8ab91f72f7: retq   

Decoding RuntimeStub - throw_null_pointer_exception Runtime1 stub 0x00007f8ab91f7310
  0x00007f8ab91f73a0: push   %rbp
  0x00007f8ab91f73a1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f73a4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f73a9: sub    $0x80,%rsp
  0x00007f8ab91f73b0: mov    %rax,0x78(%rsp)
  0x00007f8ab91f73b5: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f73ba: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f73bf: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f73c4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f73c9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f73ce: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f73d3: mov    %r8,0x38(%rsp)
  0x00007f8ab91f73d8: mov    %r9,0x30(%rsp)
  0x00007f8ab91f73dd: mov    %r10,0x28(%rsp)
  0x00007f8ab91f73e2: mov    %r11,0x20(%rsp)
  0x00007f8ab91f73e7: mov    %r12,0x18(%rsp)
  0x00007f8ab91f73ec: mov    %r13,0x10(%rsp)
  0x00007f8ab91f73f1: mov    %r14,0x8(%rsp)
  0x00007f8ab91f73f6: mov    %r15,(%rsp)
  0x00007f8ab91f73fa: sub    $0x150,%rsp
  0x00007f8ab91f7401: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f740d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f7413: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f7419: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f741f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f7425: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f742b: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f7431: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f7437: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f743d: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f7443: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f7449: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f744f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f7455: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f745b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f7461: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f7467: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f7470: movabs $0xdead,%rax
  0x00007f8ab91f747a: movabs $0xdead,%rbx
  0x00007f8ab91f7484: movabs $0xdead,%rcx
  0x00007f8ab91f748e: movabs $0xdead,%rdx
  0x00007f8ab91f7498: movabs $0xdead,%rsi
  0x00007f8ab91f74a2: movabs $0xdead,%rdi
  0x00007f8ab91f74ac: mov    %r15,%rdi
  0x00007f8ab91f74af: mov    %rbp,0x210(%r15)
  0x00007f8ab91f74b6: mov    %rsp,0x200(%r15)
  0x00007f8ab91f74bd: callq  0x00007f8ace8bc166
  0x00007f8ab91f74c2: push   %rax
  0x00007f8ab91f74c3: push   %rdi
  0x00007f8ab91f74c4: push   %rsi
  0x00007f8ab91f74c5: push   %rdx
  0x00007f8ab91f74c6: push   %rcx
  0x00007f8ab91f74c7: push   %r8
  0x00007f8ab91f74c9: push   %r9
  0x00007f8ab91f74cb: push   %r10
  0x00007f8ab91f74cd: mov    %rsp,%r10
  0x00007f8ab91f74d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f74d4: push   %r10
  0x00007f8ab91f74d6: push   %r11
  0x00007f8ab91f74d8: mov    $0x1,%edi
  0x00007f8ab91f74dd: callq  0x00007f8acf9c32d0
  0x00007f8ab91f74e2: pop    %r11
  0x00007f8ab91f74e4: pop    %rsp
  0x00007f8ab91f74e5: pop    %r10
  0x00007f8ab91f74e7: pop    %r9
  0x00007f8ab91f74e9: pop    %r8
  0x00007f8ab91f74eb: pop    %rcx
  0x00007f8ab91f74ec: pop    %rdx
  0x00007f8ab91f74ed: pop    %rsi
  0x00007f8ab91f74ee: pop    %rdi
  0x00007f8ab91f74ef: cmp    %rax,%r15
  0x00007f8ab91f74f2: je     0x00007f8ab91f7574
  0x00007f8ab91f74f8: callq  0x00007f8aceec2a22
  0x00007f8ab91f74fd: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7502: sub    $0x80,%rsp
  0x00007f8ab91f7509: mov    %rax,0x78(%rsp)
  0x00007f8ab91f750e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f7513: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f7518: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f751d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f7522: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f7527: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f752c: mov    %r8,0x38(%rsp)
  0x00007f8ab91f7531: mov    %r9,0x30(%rsp)
  0x00007f8ab91f7536: mov    %r10,0x28(%rsp)
  0x00007f8ab91f753b: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7540: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7545: mov    %r13,0x10(%rsp)
  0x00007f8ab91f754a: mov    %r14,0x8(%rsp)
  0x00007f8ab91f754f: mov    %r15,(%rsp)
  0x00007f8ab91f7553: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f755d: movabs $0x7f8ab91f74fd,%rsi
  0x00007f8ab91f7567: mov    %rsp,%rdx
  0x00007f8ab91f756a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f756e: callq  0x00007f8aceddb9fa
  0x00007f8ab91f7573: hlt    
  0x00007f8ab91f7574: pop    %rax
  0x00007f8ab91f7575: movabs $0x0,%r10
  0x00007f8ab91f757f: mov    %r10,0x200(%r15)
  0x00007f8ab91f7586: movabs $0x0,%r10
  0x00007f8ab91f7590: mov    %r10,0x210(%r15)
  0x00007f8ab91f7597: movabs $0x0,%r10
  0x00007f8ab91f75a1: mov    %r10,0x208(%r15)
  0x00007f8ab91f75a8: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f75b0: je     0x00007f8ab91f75bf
  0x00007f8ab91f75b6: mov    0x8(%r15),%rax
  0x00007f8ab91f75ba: jmpq   0x00007f8ab9167c00
  0x00007f8ab91f75bf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f75c4: sub    $0x80,%rsp
  0x00007f8ab91f75cb: mov    %rax,0x78(%rsp)
  0x00007f8ab91f75d0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f75d5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f75da: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f75df: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f75e4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f75e9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f75ee: mov    %r8,0x38(%rsp)
  0x00007f8ab91f75f3: mov    %r9,0x30(%rsp)
  0x00007f8ab91f75f8: mov    %r10,0x28(%rsp)
  0x00007f8ab91f75fd: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7602: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7607: mov    %r13,0x10(%rsp)
  0x00007f8ab91f760c: mov    %r14,0x8(%rsp)
  0x00007f8ab91f7611: mov    %r15,(%rsp)
  0x00007f8ab91f7615: movabs $0x7f8acf15c678,%rdi
  0x00007f8ab91f761f: movabs $0x7f8ab91f75bf,%rsi
  0x00007f8ab91f7629: mov    %rsp,%rdx
  0x00007f8ab91f762c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f7630: callq  0x00007f8aceddb9fa
  0x00007f8ab91f7635: hlt    
  0x00007f8ab91f7636: leaveq 
  0x00007f8ab91f7637: retq   

Decoding RuntimeStub - register_finalizer Runtime1 stub 0x00007f8ab91f7650
  0x00007f8ab91f76e0: mov    %rdi,%rax
  0x00007f8ab91f76e3: mov    0x8(%rax),%esi
  0x00007f8ab91f76e6: shl    $0x3,%rsi
  0x00007f8ab91f76ea: mov    0xa4(%rsi),%esi
  0x00007f8ab91f76f0: test   $0x40000000,%esi
  0x00007f8ab91f76f6: jne    0x00007f8ab91f76fd
  0x00007f8ab91f76fc: retq   
  0x00007f8ab91f76fd: push   %rbp
  0x00007f8ab91f76fe: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f7701: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7706: sub    $0x80,%rsp
  0x00007f8ab91f770d: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7712: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f7717: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f771c: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f7721: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f7726: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f772b: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f7730: mov    %r8,0x38(%rsp)
  0x00007f8ab91f7735: mov    %r9,0x30(%rsp)
  0x00007f8ab91f773a: mov    %r10,0x28(%rsp)
  0x00007f8ab91f773f: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7744: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7749: mov    %r13,0x10(%rsp)
  0x00007f8ab91f774e: mov    %r14,0x8(%rsp)
  0x00007f8ab91f7753: mov    %r15,(%rsp)
  0x00007f8ab91f7757: sub    $0x150,%rsp
  0x00007f8ab91f775e: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f776a: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f7770: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f7776: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f777c: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f7782: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f7788: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f778e: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f7794: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f779a: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f77a0: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f77a6: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f77ac: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f77b2: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f77b8: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f77be: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f77c4: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f77cd: mov    %rax,%rsi
  0x00007f8ab91f77d0: mov    %r15,%rdi
  0x00007f8ab91f77d3: mov    %rbp,0x210(%r15)
  0x00007f8ab91f77da: mov    %rsp,0x200(%r15)
  0x00007f8ab91f77e1: callq  0x00007f8acef87d74
  0x00007f8ab91f77e6: push   %rax
  0x00007f8ab91f77e7: push   %rdi
  0x00007f8ab91f77e8: push   %rsi
  0x00007f8ab91f77e9: push   %rdx
  0x00007f8ab91f77ea: push   %rcx
  0x00007f8ab91f77eb: push   %r8
  0x00007f8ab91f77ed: push   %r9
  0x00007f8ab91f77ef: push   %r10
  0x00007f8ab91f77f1: mov    %rsp,%r10
  0x00007f8ab91f77f4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f77f8: push   %r10
  0x00007f8ab91f77fa: push   %r11
  0x00007f8ab91f77fc: mov    $0x1,%edi
  0x00007f8ab91f7801: callq  0x00007f8acf9c32d0
  0x00007f8ab91f7806: pop    %r11
  0x00007f8ab91f7808: pop    %rsp
  0x00007f8ab91f7809: pop    %r10
  0x00007f8ab91f780b: pop    %r9
  0x00007f8ab91f780d: pop    %r8
  0x00007f8ab91f780f: pop    %rcx
  0x00007f8ab91f7810: pop    %rdx
  0x00007f8ab91f7811: pop    %rsi
  0x00007f8ab91f7812: pop    %rdi
  0x00007f8ab91f7813: cmp    %rax,%r15
  0x00007f8ab91f7816: je     0x00007f8ab91f7898
  0x00007f8ab91f781c: callq  0x00007f8aceec2a22
  0x00007f8ab91f7821: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7826: sub    $0x80,%rsp
  0x00007f8ab91f782d: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7832: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f7837: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f783c: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f7841: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f7846: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f784b: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f7850: mov    %r8,0x38(%rsp)
  0x00007f8ab91f7855: mov    %r9,0x30(%rsp)
  0x00007f8ab91f785a: mov    %r10,0x28(%rsp)
  0x00007f8ab91f785f: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7864: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7869: mov    %r13,0x10(%rsp)
  0x00007f8ab91f786e: mov    %r14,0x8(%rsp)
  0x00007f8ab91f7873: mov    %r15,(%rsp)
  0x00007f8ab91f7877: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f7881: movabs $0x7f8ab91f7821,%rsi
  0x00007f8ab91f788b: mov    %rsp,%rdx
  0x00007f8ab91f788e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f7892: callq  0x00007f8aceddb9fa
  0x00007f8ab91f7897: hlt    
  0x00007f8ab91f7898: pop    %rax
  0x00007f8ab91f7899: movabs $0x0,%r10
  0x00007f8ab91f78a3: mov    %r10,0x200(%r15)
  0x00007f8ab91f78aa: movabs $0x0,%r10
  0x00007f8ab91f78b4: mov    %r10,0x210(%r15)
  0x00007f8ab91f78bb: movabs $0x0,%r10
  0x00007f8ab91f78c5: mov    %r10,0x208(%r15)
  0x00007f8ab91f78cc: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f78d4: je     0x00007f8ab91f78e3
  0x00007f8ab91f78da: mov    0x8(%r15),%rax
  0x00007f8ab91f78de: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab91f78e3: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91f78e9: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91f78ef: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91f78f5: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91f78fb: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91f7901: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91f7907: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91f790d: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91f7913: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91f7919: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91f791f: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91f7925: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91f792b: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91f7931: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91f7937: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91f793d: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91f7946: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f7952: je     0x00007f8ab91f79cf
  0x00007f8ab91f7958: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f795d: sub    $0x80,%rsp
  0x00007f8ab91f7964: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7969: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f796e: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f7973: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f7978: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f797d: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f7982: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f7987: mov    %r8,0x38(%rsp)
  0x00007f8ab91f798c: mov    %r9,0x30(%rsp)
  0x00007f8ab91f7991: mov    %r10,0x28(%rsp)
  0x00007f8ab91f7996: mov    %r11,0x20(%rsp)
  0x00007f8ab91f799b: mov    %r12,0x18(%rsp)
  0x00007f8ab91f79a0: mov    %r13,0x10(%rsp)
  0x00007f8ab91f79a5: mov    %r14,0x8(%rsp)
  0x00007f8ab91f79aa: mov    %r15,(%rsp)
  0x00007f8ab91f79ae: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91f79b8: movabs $0x7f8ab91f7958,%rsi
  0x00007f8ab91f79c2: mov    %rsp,%rdx
  0x00007f8ab91f79c5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f79c9: callq  0x00007f8aceddb9fa
  0x00007f8ab91f79ce: hlt    
  0x00007f8ab91f79cf: add    $0x150,%rsp
  0x00007f8ab91f79d6: mov    (%rsp),%r15
  0x00007f8ab91f79da: mov    0x8(%rsp),%r14
  0x00007f8ab91f79df: mov    0x10(%rsp),%r13
  0x00007f8ab91f79e4: mov    0x18(%rsp),%r12
  0x00007f8ab91f79e9: mov    0x20(%rsp),%r11
  0x00007f8ab91f79ee: mov    0x28(%rsp),%r10
  0x00007f8ab91f79f3: mov    0x30(%rsp),%r9
  0x00007f8ab91f79f8: mov    0x38(%rsp),%r8
  0x00007f8ab91f79fd: mov    0x40(%rsp),%rdi
  0x00007f8ab91f7a02: mov    0x48(%rsp),%rsi
  0x00007f8ab91f7a07: mov    0x50(%rsp),%rbp
  0x00007f8ab91f7a0c: mov    0x60(%rsp),%rbx
  0x00007f8ab91f7a11: mov    0x68(%rsp),%rdx
  0x00007f8ab91f7a16: mov    0x70(%rsp),%rcx
  0x00007f8ab91f7a1b: mov    0x78(%rsp),%rax
  0x00007f8ab91f7a20: add    $0x80,%rsp
  0x00007f8ab91f7a27: leaveq 
  0x00007f8ab91f7a28: retq   
  0x00007f8ab91f7a29: nop
  0x00007f8ab91f7a2a: nop
  0x00007f8ab91f7a2b: nop
  0x00007f8ab91f7a2c: nop
  0x00007f8ab91f7a2d: nop
  0x00007f8ab91f7a2e: nop
  0x00007f8ab91f7a2f: nop

Decoding RuntimeStub - _multianewarray2_Java 0x00007f8ab91f7d90
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91f7de0: sub    $0x8,%rsp
  0x00007f8ab91f7de7: mov    %rbp,(%rsp)
  0x00007f8ab91f7deb: mov    %rsp,0x200(%r15)
  0x00007f8ab91f7df2: mov    %rsi,%rdi
  0x00007f8ab91f7df5: mov    %edx,%esi
  0x00007f8ab91f7df7: mov    %ecx,%edx
  0x00007f8ab91f7df9: mov    %r15,%rcx
  0x00007f8ab91f7dfc: movabs $0x7f8acef77f84,%r10
  0x00007f8ab91f7e06: callq  *%r10
  0x00007f8ab91f7e09: mov    %r12,0x200(%r15)
  0x00007f8ab91f7e10: mov    %r12,0x208(%r15)
  0x00007f8ab91f7e17: mov    0x260(%r15),%rax
  0x00007f8ab91f7e1e: mov    %r12,0x260(%r15)
  0x00007f8ab91f7e25: cmp    0x8(%r15),%r12
  0x00007f8ab91f7e29: jne    0x00007f8ab91f7e2d
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91f7e2b: pop    %rbp
  0x00007f8ab91f7e2c: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91f7e2d: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91f7e37: xor    %ebx,%ebx
  0x00007f8ab91f7e39: pop    %rbp
  0x00007f8ab91f7e3a: jmpq   *%r10
  0x00007f8ab91f7e3d: hlt    
  0x00007f8ab91f7e3e: hlt    
  0x00007f8ab91f7e3f: hlt    

Decoding RuntimeStub - new_instance Runtime1 stub 0x00007f8ab91f7e90
  0x00007f8ab91f7f20: push   %rbp
  0x00007f8ab91f7f21: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f7f24: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7f29: sub    $0x80,%rsp
  0x00007f8ab91f7f30: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7f35: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f7f3a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f7f3f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f7f44: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f7f49: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f7f4e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f7f53: mov    %r8,0x38(%rsp)
  0x00007f8ab91f7f58: mov    %r9,0x30(%rsp)
  0x00007f8ab91f7f5d: mov    %r10,0x28(%rsp)
  0x00007f8ab91f7f62: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7f67: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7f6c: mov    %r13,0x10(%rsp)
  0x00007f8ab91f7f71: mov    %r14,0x8(%rsp)
  0x00007f8ab91f7f76: mov    %r15,(%rsp)
  0x00007f8ab91f7f7a: sub    $0x150,%rsp
  0x00007f8ab91f7f81: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f7f8d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f7f93: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f7f99: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f7f9f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f7fa5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f7fab: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f7fb1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f7fb7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f7fbd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f7fc3: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f7fc9: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f7fcf: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f7fd5: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f7fdb: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f7fe1: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f7fe7: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f7ff0: mov    %rdx,%rsi
  0x00007f8ab91f7ff3: mov    %r15,%rdi
  0x00007f8ab91f7ff6: mov    %rbp,0x210(%r15)
  0x00007f8ab91f7ffd: mov    %rsp,0x200(%r15)
  0x00007f8ab91f8004: callq  0x00007f8ace8ba06c
  0x00007f8ab91f8009: push   %rax
  0x00007f8ab91f800a: push   %rdi
  0x00007f8ab91f800b: push   %rsi
  0x00007f8ab91f800c: push   %rdx
  0x00007f8ab91f800d: push   %rcx
  0x00007f8ab91f800e: push   %r8
  0x00007f8ab91f8010: push   %r9
  0x00007f8ab91f8012: push   %r10
  0x00007f8ab91f8014: mov    %rsp,%r10
  0x00007f8ab91f8017: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f801b: push   %r10
  0x00007f8ab91f801d: push   %r11
  0x00007f8ab91f801f: mov    $0x1,%edi
  0x00007f8ab91f8024: callq  0x00007f8acf9c32d0
  0x00007f8ab91f8029: pop    %r11
  0x00007f8ab91f802b: pop    %rsp
  0x00007f8ab91f802c: pop    %r10
  0x00007f8ab91f802e: pop    %r9
  0x00007f8ab91f8030: pop    %r8
  0x00007f8ab91f8032: pop    %rcx
  0x00007f8ab91f8033: pop    %rdx
  0x00007f8ab91f8034: pop    %rsi
  0x00007f8ab91f8035: pop    %rdi
  0x00007f8ab91f8036: cmp    %rax,%r15
  0x00007f8ab91f8039: je     0x00007f8ab91f80bb
  0x00007f8ab91f803f: callq  0x00007f8aceec2a22
  0x00007f8ab91f8044: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f8049: sub    $0x80,%rsp
  0x00007f8ab91f8050: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8055: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f805a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f805f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f8064: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f8069: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f806e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f8073: mov    %r8,0x38(%rsp)
  0x00007f8ab91f8078: mov    %r9,0x30(%rsp)
  0x00007f8ab91f807d: mov    %r10,0x28(%rsp)
  0x00007f8ab91f8082: mov    %r11,0x20(%rsp)
  0x00007f8ab91f8087: mov    %r12,0x18(%rsp)
  0x00007f8ab91f808c: mov    %r13,0x10(%rsp)
  0x00007f8ab91f8091: mov    %r14,0x8(%rsp)
  0x00007f8ab91f8096: mov    %r15,(%rsp)
  0x00007f8ab91f809a: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f80a4: movabs $0x7f8ab91f8044,%rsi
  0x00007f8ab91f80ae: mov    %rsp,%rdx
  0x00007f8ab91f80b1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f80b5: callq  0x00007f8aceddb9fa
  0x00007f8ab91f80ba: hlt    
  0x00007f8ab91f80bb: pop    %rax
  0x00007f8ab91f80bc: movabs $0x0,%r10
  0x00007f8ab91f80c6: mov    %r10,0x200(%r15)
  0x00007f8ab91f80cd: movabs $0x0,%r10
  0x00007f8ab91f80d7: mov    %r10,0x210(%r15)
  0x00007f8ab91f80de: movabs $0x0,%r10
  0x00007f8ab91f80e8: mov    %r10,0x208(%r15)
  0x00007f8ab91f80ef: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f80f7: je     0x00007f8ab91f8117
  0x00007f8ab91f80fd: mov    0x8(%r15),%rax
  0x00007f8ab91f8101: movabs $0x0,%r10
  0x00007f8ab91f810b: mov    %r10,0x260(%r15)
  0x00007f8ab91f8112: jmpq   0x00007f8ab9167c00
  0x00007f8ab91f8117: mov    0x260(%r15),%rax
  0x00007f8ab91f811e: movabs $0x0,%r10
  0x00007f8ab91f8128: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f8ab91f812f: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91f8135: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91f813b: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91f8141: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91f8147: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91f814d: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91f8153: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91f8159: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91f815f: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91f8165: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91f816b: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91f8171: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91f8177: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91f817d: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91f8183: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91f8189: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91f8192: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f819e: je     0x00007f8ab91f821b
  0x00007f8ab91f81a4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f81a9: sub    $0x80,%rsp
  0x00007f8ab91f81b0: mov    %rax,0x78(%rsp)
  0x00007f8ab91f81b5: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f81ba: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f81bf: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f81c4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f81c9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f81ce: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f81d3: mov    %r8,0x38(%rsp)
  0x00007f8ab91f81d8: mov    %r9,0x30(%rsp)
  0x00007f8ab91f81dd: mov    %r10,0x28(%rsp)
  0x00007f8ab91f81e2: mov    %r11,0x20(%rsp)
  0x00007f8ab91f81e7: mov    %r12,0x18(%rsp)
  0x00007f8ab91f81ec: mov    %r13,0x10(%rsp)
  0x00007f8ab91f81f1: mov    %r14,0x8(%rsp)
  0x00007f8ab91f81f6: mov    %r15,(%rsp)
  0x00007f8ab91f81fa: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91f8204: movabs $0x7f8ab91f81a4,%rsi
  0x00007f8ab91f820e: mov    %rsp,%rdx
  0x00007f8ab91f8211: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8215: callq  0x00007f8aceddb9fa
  0x00007f8ab91f821a: hlt    
  0x00007f8ab91f821b: add    $0x150,%rsp
  0x00007f8ab91f8222: mov    (%rsp),%r15
  0x00007f8ab91f8226: mov    0x8(%rsp),%r14
  0x00007f8ab91f822b: mov    0x10(%rsp),%r13
  0x00007f8ab91f8230: mov    0x18(%rsp),%r12
  0x00007f8ab91f8235: mov    0x20(%rsp),%r11
  0x00007f8ab91f823a: mov    0x28(%rsp),%r10
  0x00007f8ab91f823f: mov    0x30(%rsp),%r9
  0x00007f8ab91f8244: mov    0x38(%rsp),%r8
  0x00007f8ab91f8249: mov    0x40(%rsp),%rdi
  0x00007f8ab91f824e: mov    0x48(%rsp),%rsi
  0x00007f8ab91f8253: mov    0x50(%rsp),%rbp
  0x00007f8ab91f8258: mov    0x60(%rsp),%rbx
  0x00007f8ab91f825d: mov    0x68(%rsp),%rdx
  0x00007f8ab91f8262: mov    0x70(%rsp),%rcx
  0x00007f8ab91f8267: add    $0x80,%rsp
  0x00007f8ab91f826e: leaveq 
  0x00007f8ab91f826f: retq   

AHE@0x00007f8ac812f388: 0xbbabbb00 i2c: 0x00007f8ab91f7ae0 c2i: 0x00007f8ab91f7c2d c2iUV: 0x00007f8ab91f7c00
i2c argument handler #117 for: receiver (Ljava/lang/Class;ZLjava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Class;)Ljava/util/List; (620 bytes generated)
c2i argument handler starts at 0x7f8ab91f7c2d
  0x00007f8ab91f7ae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91f7ae4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91f7aee: cmp    %r11,%rax
  0x00007f8ab91f7af1: jbe    0x00007f8ab91f7b0a
  0x00007f8ab91f7af7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91f7b01: cmp    %r11,%rax
  0x00007f8ab91f7b04: jb     0x00007f8ab91f7bcd
  0x00007f8ab91f7b0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91f7b14: cmp    %r11,%rax
  0x00007f8ab91f7b17: jbe    0x00007f8ab91f7b30
  0x00007f8ab91f7b1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91f7b27: cmp    %r11,%rax
  0x00007f8ab91f7b2a: jb     0x00007f8ab91f7bcd
  0x00007f8ab91f7b30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91f7b3a: cmp    %r11,%rax
  0x00007f8ab91f7b3d: jbe    0x00007f8ab91f7b56
  0x00007f8ab91f7b43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91f7b4d: cmp    %r11,%rax
  0x00007f8ab91f7b50: jb     0x00007f8ab91f7bcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91f7b56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7b5b: sub    $0x80,%rsp
  0x00007f8ab91f7b62: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7b67: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f7b6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f7b71: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f7b76: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f7b7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f7b80: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f7b85: mov    %r8,0x38(%rsp)
  0x00007f8ab91f7b8a: mov    %r9,0x30(%rsp)
  0x00007f8ab91f7b8f: mov    %r10,0x28(%rsp)
  0x00007f8ab91f7b94: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7b99: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7b9e: mov    %r13,0x10(%rsp)
  0x00007f8ab91f7ba3: mov    %r14,0x8(%rsp)
  0x00007f8ab91f7ba8: mov    %r15,(%rsp)
  0x00007f8ab91f7bac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91f7bb6: movabs $0x7f8ab91f7b56,%rsi
  0x00007f8ab91f7bc0: mov    %rsp,%rdx
  0x00007f8ab91f7bc3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f7bc7: callq  0x00007f8aceddb9fa
  0x00007f8ab91f7bcc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91f7bcd: mov    %rsp,%r11
  0x00007f8ab91f7bd0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f7bd4: push   %rax
  0x00007f8ab91f7bd5: mov    %r11,%rax
  0x00007f8ab91f7bd8: mov    0x50(%rbx),%r11
  0x00007f8ab91f7bdc: mov    0x30(%rax),%rsi
  0x00007f8ab91f7be0: mov    0x28(%rax),%rdx
  0x00007f8ab91f7be4: mov    0x20(%rax),%ecx
  0x00007f8ab91f7be7: mov    0x18(%rax),%r8
  0x00007f8ab91f7beb: mov    0x10(%rax),%r9
  0x00007f8ab91f7bef: mov    0x8(%rax),%rdi
  0x00007f8ab91f7bf3: mov    %rbx,0x258(%r15)
  0x00007f8ab91f7bfa: mov    %rbx,%rax
  0x00007f8ab91f7bfd: jmpq   *%r11
  0x00007f8ab91f7c00: mov    0x8(%rsi),%ebx
  0x00007f8ab91f7c03: shl    $0x3,%rbx
  0x00007f8ab91f7c07: cmp    0x10(%rax),%rbx
  0x00007f8ab91f7c0b: mov    0x8(%rax),%rbx
  0x00007f8ab91f7c0f: je     0x00007f8ab91f7c1a
  0x00007f8ab91f7c15: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f7c1a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f7c22: je     0x00007f8ab91f7d1d
  0x00007f8ab91f7c28: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f7c2d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f7c35: je     0x00007f8ab91f7d1d
  0x00007f8ab91f7c3b: mov    %rsp,%r13
  0x00007f8ab91f7c3e: mov    (%rsp),%rax
  0x00007f8ab91f7c42: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f7c46: pushfq 
  0x00007f8ab91f7c47: sub    $0x8,%rsp
  0x00007f8ab91f7c4b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f7c50: sub    $0x80,%rsp
  0x00007f8ab91f7c57: mov    %rax,0x78(%rsp)
  0x00007f8ab91f7c5c: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f7c61: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f7c66: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f7c6b: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f7c70: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f7c75: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f7c7a: mov    %r8,0x38(%rsp)
  0x00007f8ab91f7c7f: mov    %r9,0x30(%rsp)
  0x00007f8ab91f7c84: mov    %r10,0x28(%rsp)
  0x00007f8ab91f7c89: mov    %r11,0x20(%rsp)
  0x00007f8ab91f7c8e: mov    %r12,0x18(%rsp)
  0x00007f8ab91f7c93: mov    %r13,0x10(%rsp)
  0x00007f8ab91f7c98: mov    %r14,0x8(%rsp)
  0x00007f8ab91f7c9d: mov    %r15,(%rsp)
  0x00007f8ab91f7ca1: sub    $0x200,%rsp
  0x00007f8ab91f7ca8: fxsave64 (%rsp)
  0x00007f8ab91f7cad: mov    %rbx,%rdi
  0x00007f8ab91f7cb0: mov    %rax,%rsi
  0x00007f8ab91f7cb3: callq  0x00007f8acef8bbca
  0x00007f8ab91f7cb8: fxrstor64 (%rsp)
  0x00007f8ab91f7cbd: add    $0x200,%rsp
  0x00007f8ab91f7cc4: mov    (%rsp),%r15
  0x00007f8ab91f7cc8: mov    0x8(%rsp),%r14
  0x00007f8ab91f7ccd: mov    0x10(%rsp),%r13
  0x00007f8ab91f7cd2: mov    0x18(%rsp),%r12
  0x00007f8ab91f7cd7: mov    0x20(%rsp),%r11
  0x00007f8ab91f7cdc: mov    0x28(%rsp),%r10
  0x00007f8ab91f7ce1: mov    0x30(%rsp),%r9
  0x00007f8ab91f7ce6: mov    0x38(%rsp),%r8
  0x00007f8ab91f7ceb: mov    0x40(%rsp),%rdi
  0x00007f8ab91f7cf0: mov    0x48(%rsp),%rsi
  0x00007f8ab91f7cf5: mov    0x50(%rsp),%rbp
  0x00007f8ab91f7cfa: mov    0x60(%rsp),%rbx
  0x00007f8ab91f7cff: mov    0x68(%rsp),%rdx
  0x00007f8ab91f7d04: mov    0x70(%rsp),%rcx
  0x00007f8ab91f7d09: mov    0x78(%rsp),%rax
  0x00007f8ab91f7d0e: add    $0x80,%rsp
  0x00007f8ab91f7d15: add    $0x8,%rsp
  0x00007f8ab91f7d19: popfq  
  0x00007f8ab91f7d1a: mov    %r13,%rsp
  0x00007f8ab91f7d1d: pop    %rax
  0x00007f8ab91f7d1e: mov    %rsp,%r13
  0x00007f8ab91f7d21: sub    $0x40,%rsp
  0x00007f8ab91f7d25: mov    %rax,(%rsp)
  0x00007f8ab91f7d29: mov    %rsi,0x30(%rsp)
  0x00007f8ab91f7d2e: mov    %rdx,0x28(%rsp)
  0x00007f8ab91f7d33: mov    %ecx,0x20(%rsp)
  0x00007f8ab91f7d37: mov    %r8,0x18(%rsp)
  0x00007f8ab91f7d3c: mov    %r9,0x10(%rsp)
  0x00007f8ab91f7d41: mov    %rdi,0x8(%rsp)
  0x00007f8ab91f7d46: mov    0x40(%rbx),%rcx
  0x00007f8ab91f7d4a: jmpq   *%rcx

Decoding RuntimeStub - _multianewarray3_Java 0x00007f8ab91f8c10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91f8c60: sub    $0x8,%rsp
  0x00007f8ab91f8c67: mov    %rbp,(%rsp)
  0x00007f8ab91f8c6b: mov    %rsp,0x200(%r15)
  0x00007f8ab91f8c72: mov    %rsi,%rdi
  0x00007f8ab91f8c75: mov    %edx,%esi
  0x00007f8ab91f8c77: mov    %ecx,%edx
  0x00007f8ab91f8c79: mov    %r8d,%ecx
  0x00007f8ab91f8c7c: mov    %r15,%r8
  0x00007f8ab91f8c7f: movabs $0x7f8acef7821e,%r10
  0x00007f8ab91f8c89: callq  *%r10
  0x00007f8ab91f8c8c: mov    %r12,0x200(%r15)
  0x00007f8ab91f8c93: mov    %r12,0x208(%r15)
  0x00007f8ab91f8c9a: mov    0x260(%r15),%rax
  0x00007f8ab91f8ca1: mov    %r12,0x260(%r15)
  0x00007f8ab91f8ca8: cmp    0x8(%r15),%r12
  0x00007f8ab91f8cac: jne    0x00007f8ab91f8cb0
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91f8cae: pop    %rbp
  0x00007f8ab91f8caf: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91f8cb0: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91f8cba: xor    %ebx,%ebx
  0x00007f8ab91f8cbc: pop    %rbp
  0x00007f8ab91f8cbd: jmpq   *%r10

Decoding RuntimeStub - fast_new_instance Runtime1 stub 0x00007f8ab91f8290
  0x00007f8ab91f83c0: push   %rdi
  0x00007f8ab91f83c1: push   %rbx
  0x00007f8ab91f83c2: mov    0xc(%rdx),%ecx
  0x00007f8ab91f83c5: cmp    $0x0,%ecx
  0x00007f8ab91f83c8: jle    0x00007f8ab91f83da
  0x00007f8ab91f83ce: test   $0x1,%ecx
  0x00007f8ab91f83d4: je     0x00007f8ab91f84c8
  0x00007f8ab91f83da: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f83df: sub    $0x80,%rsp
  0x00007f8ab91f83e6: mov    %rax,0x78(%rsp)
  0x00007f8ab91f83eb: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f83f0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f83f5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f83fa: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f83ff: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f8404: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f8409: mov    %r8,0x38(%rsp)
  0x00007f8ab91f840e: mov    %r9,0x30(%rsp)
  0x00007f8ab91f8413: mov    %r10,0x28(%rsp)
  0x00007f8ab91f8418: mov    %r11,0x20(%rsp)
  0x00007f8ab91f841d: mov    %r12,0x18(%rsp)
  0x00007f8ab91f8422: mov    %r13,0x10(%rsp)
  0x00007f8ab91f8427: mov    %r14,0x8(%rsp)
  0x00007f8ab91f842c: mov    %r15,(%rsp)
  0x00007f8ab91f8430: movabs $0x7f8acf15cb80,%rdi
  0x00007f8ab91f843a: movabs $0x7f8ab91f83da,%rsi
  0x00007f8ab91f8444: mov    %rsp,%rdx
  0x00007f8ab91f8447: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f844b: callq  0x00007f8aceddb9fa
  0x00007f8ab91f8450: hlt    
  0x00007f8ab91f8451: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f8456: sub    $0x80,%rsp
  0x00007f8ab91f845d: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8462: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f8467: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f846c: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f8471: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f8476: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f847b: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f8480: mov    %r8,0x38(%rsp)
  0x00007f8ab91f8485: mov    %r9,0x30(%rsp)
  0x00007f8ab91f848a: mov    %r10,0x28(%rsp)
  0x00007f8ab91f848f: mov    %r11,0x20(%rsp)
  0x00007f8ab91f8494: mov    %r12,0x18(%rsp)
  0x00007f8ab91f8499: mov    %r13,0x10(%rsp)
  0x00007f8ab91f849e: mov    %r14,0x8(%rsp)
  0x00007f8ab91f84a3: mov    %r15,(%rsp)
  0x00007f8ab91f84a7: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab91f84b1: movabs $0x7f8ab91f8451,%rsi
  0x00007f8ab91f84bb: mov    %rsp,%rdx
  0x00007f8ab91f84be: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f84c2: callq  0x00007f8aceddb9fa
  0x00007f8ab91f84c7: hlt    
  0x00007f8ab91f84c8: mov    0x70(%r15),%rax
  0x00007f8ab91f84cc: mov    0x80(%r15),%rcx
  0x00007f8ab91f84d3: sub    %rax,%rcx
  0x00007f8ab91f84d6: shr    $0x3,%rcx
  0x00007f8ab91f84da: cmp    0x90(%r15),%rcx
  0x00007f8ab91f84e1: jle    0x00007f8ab91f8505
  0x00007f8ab91f84e7: movabs $0x4,%rsi
  0x00007f8ab91f84f1: add    %rsi,0x90(%r15)
  0x00007f8ab91f84f8: addl   $0x1,0xb0(%r15)
  0x00007f8ab91f8500: jmpq   0x00007f8ab91f8785
  0x00007f8ab91f8505: addl   $0x1,0xa0(%r15)
  0x00007f8ab91f850d: add    %ecx,0xa4(%r15)
  0x00007f8ab91f8514: test   %rax,%rax
  0x00007f8ab91f8517: je     0x00007f8ab91f8554
  0x00007f8ab91f851d: movabs $0x201,%r10
  0x00007f8ab91f8527: mov    %r10,(%rax)
  0x00007f8ab91f852a: sub    $0x2,%rcx
  0x00007f8ab91f852e: add    $0x2,%rcx
  0x00007f8ab91f8532: shl    %rcx
  0x00007f8ab91f8535: mov    %ecx,0xc(%rax)
  0x00007f8ab91f8538: mov    0x167b5a19(%rip),%rcx        # 0x00007f8acf9adf58
  0x00007f8ab91f853f: shr    $0x3,%rcx
  0x00007f8ab91f8543: mov    %ecx,0x8(%rax)
  0x00007f8ab91f8546: mov    %rax,%rcx
  0x00007f8ab91f8549: sub    0x68(%r15),%rcx
  0x00007f8ab91f854d: add    %rcx,0xd8(%r15)
  0x00007f8ab91f8554: mov    0x88(%r15),%rcx
  0x00007f8ab91f855b: shl    $0x3,%rcx
  0x00007f8ab91f855f: mov    0xee2c072(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab91f8566: lea    (%rax,%rcx,1),%rsi
  0x00007f8ab91f856a: cmp    %rax,%rsi
  0x00007f8ab91f856d: jb     0x00007f8ab91f887a
  0x00007f8ab91f8573: cmp    0xee2c036(%rip),%rsi        # 0x00007f8ac80245b0
  0x00007f8ab91f857a: ja     0x00007f8ab91f887a
  0x00007f8ab91f8580: lock cmpxchg %rsi,0xee2c04f(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab91f8589: jne    0x00007f8ab91f855f
  0x00007f8ab91f858b: push   %rsi
  0x00007f8ab91f858c: mov    0x88(%r15),%rsi
  0x00007f8ab91f8593: shl    $0x3,%rsi
  0x00007f8ab91f8597: cmp    %rsi,%rcx
  0x00007f8ab91f859a: je     0x00007f8ab91f868e
  ;; assert(t1 != tlab size)
  0x00007f8ab91f85a0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f85a5: sub    $0x80,%rsp
  0x00007f8ab91f85ac: mov    %rax,0x78(%rsp)
  0x00007f8ab91f85b1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f85b6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f85bb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f85c0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f85c5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f85ca: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f85cf: mov    %r8,0x38(%rsp)
  0x00007f8ab91f85d4: mov    %r9,0x30(%rsp)
  0x00007f8ab91f85d9: mov    %r10,0x28(%rsp)
  0x00007f8ab91f85de: mov    %r11,0x20(%rsp)
  0x00007f8ab91f85e3: mov    %r12,0x18(%rsp)
  0x00007f8ab91f85e8: mov    %r13,0x10(%rsp)
  0x00007f8ab91f85ed: mov    %r14,0x8(%rsp)
  0x00007f8ab91f85f2: mov    %r15,(%rsp)
  0x00007f8ab91f85f6: movabs $0x7f8acf2f1619,%rdi
  0x00007f8ab91f8600: movabs $0x7f8ab91f85a0,%rsi
  0x00007f8ab91f860a: mov    %rsp,%rdx
  0x00007f8ab91f860d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8611: callq  0x00007f8aceddb9fa
  0x00007f8ab91f8616: hlt    
  0x00007f8ab91f8617: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f861c: sub    $0x80,%rsp
  0x00007f8ab91f8623: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8628: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f862d: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f8632: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f8637: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f863c: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f8641: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f8646: mov    %r8,0x38(%rsp)
  0x00007f8ab91f864b: mov    %r9,0x30(%rsp)
  0x00007f8ab91f8650: mov    %r10,0x28(%rsp)
  0x00007f8ab91f8655: mov    %r11,0x20(%rsp)
  0x00007f8ab91f865a: mov    %r12,0x18(%rsp)
  0x00007f8ab91f865f: mov    %r13,0x10(%rsp)
  0x00007f8ab91f8664: mov    %r14,0x8(%rsp)
  0x00007f8ab91f8669: mov    %r15,(%rsp)
  0x00007f8ab91f866d: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab91f8677: movabs $0x7f8ab91f8617,%rsi
  0x00007f8ab91f8681: mov    %rsp,%rdx
  0x00007f8ab91f8684: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8688: callq  0x00007f8aceddb9fa
  0x00007f8ab91f868d: hlt    
  0x00007f8ab91f868e: pop    %rsi
  0x00007f8ab91f868f: mov    %rax,0x68(%r15)
  0x00007f8ab91f8693: mov    %rax,0x70(%r15)
  0x00007f8ab91f8697: add    %rcx,%rax
  0x00007f8ab91f869a: sub    $0x10,%rax
  0x00007f8ab91f869e: mov    %rax,0x80(%r15)
  0x00007f8ab91f86a5: jmpq   0x00007f8ab91f86aa
  0x00007f8ab91f86aa: mov    0xc(%rdx),%ecx
  0x00007f8ab91f86ad: mov    0x70(%r15),%rax
  0x00007f8ab91f86b1: lea    (%rax,%rcx,1),%rsi
  0x00007f8ab91f86b5: cmp    0x80(%r15),%rsi
  0x00007f8ab91f86bc: ja     0x00007f8ab91f887a
  0x00007f8ab91f86c2: mov    %rsi,0x70(%r15)
  0x00007f8ab91f86c6: mov    0xb0(%rdx),%rbx
  0x00007f8ab91f86cd: mov    %rbx,(%rax)
  0x00007f8ab91f86d0: mov    %rdx,%rbx
  0x00007f8ab91f86d3: shr    $0x3,%rbx
  0x00007f8ab91f86d7: mov    %ebx,0x8(%rax)
  0x00007f8ab91f86da: xor    %rbx,%rbx
  0x00007f8ab91f86dd: mov    %ebx,0xc(%rax)
  0x00007f8ab91f86e0: mov    %rcx,%rsi
  0x00007f8ab91f86e3: sub    $0x10,%rsi
  0x00007f8ab91f86e7: je     0x00007f8ab91f8782
  0x00007f8ab91f86ed: test   $0x7,%rsi
  0x00007f8ab91f86f4: je     0x00007f8ab91f8771
  0x00007f8ab91f86fa: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f86ff: sub    $0x80,%rsp
  0x00007f8ab91f8706: mov    %rax,0x78(%rsp)
  0x00007f8ab91f870b: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f8710: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f8715: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f871a: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f871f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f8724: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f8729: mov    %r8,0x38(%rsp)
  0x00007f8ab91f872e: mov    %r9,0x30(%rsp)
  0x00007f8ab91f8733: mov    %r10,0x28(%rsp)
  0x00007f8ab91f8738: mov    %r11,0x20(%rsp)
  0x00007f8ab91f873d: mov    %r12,0x18(%rsp)
  0x00007f8ab91f8742: mov    %r13,0x10(%rsp)
  0x00007f8ab91f8747: mov    %r14,0x8(%rsp)
  0x00007f8ab91f874c: mov    %r15,(%rsp)
  0x00007f8ab91f8750: movabs $0x7f8acf153568,%rdi
  0x00007f8ab91f875a: movabs $0x7f8ab91f86fa,%rsi
  0x00007f8ab91f8764: mov    %rsp,%rdx
  0x00007f8ab91f8767: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f876b: callq  0x00007f8aceddb9fa
  0x00007f8ab91f8770: hlt    
  0x00007f8ab91f8771: xor    %rbx,%rbx
  0x00007f8ab91f8774: shr    $0x3,%rsi
  0x00007f8ab91f8778: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f8ab91f877d: dec    %rsi
  0x00007f8ab91f8780: jne    0x00007f8ab91f8778
  0x00007f8ab91f8782: pop    %rbx
  0x00007f8ab91f8783: pop    %rdi
  0x00007f8ab91f8784: retq   
  0x00007f8ab91f8785: mov    0xc(%rdx),%ecx
  0x00007f8ab91f8788: mov    0xee2be49(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab91f878f: lea    (%rax,%rcx,1),%rbx
  0x00007f8ab91f8793: cmp    %rax,%rbx
  0x00007f8ab91f8796: jb     0x00007f8ab91f887a
  0x00007f8ab91f879c: cmp    0xee2be0d(%rip),%rbx        # 0x00007f8ac80245b0
  0x00007f8ab91f87a3: ja     0x00007f8ab91f887a
  0x00007f8ab91f87a9: lock cmpxchg %rbx,0xee2be26(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab91f87b2: jne    0x00007f8ab91f8788
  0x00007f8ab91f87b4: add    %rcx,0xd8(%r15)
  0x00007f8ab91f87bb: mov    0xb0(%rdx),%rbx
  0x00007f8ab91f87c2: mov    %rbx,(%rax)
  0x00007f8ab91f87c5: mov    %rdx,%rbx
  0x00007f8ab91f87c8: shr    $0x3,%rbx
  0x00007f8ab91f87cc: mov    %ebx,0x8(%rax)
  0x00007f8ab91f87cf: xor    %rbx,%rbx
  0x00007f8ab91f87d2: mov    %ebx,0xc(%rax)
  0x00007f8ab91f87d5: mov    %rcx,%rsi
  0x00007f8ab91f87d8: sub    $0x10,%rsi
  0x00007f8ab91f87dc: je     0x00007f8ab91f8877
  0x00007f8ab91f87e2: test   $0x7,%rsi
  0x00007f8ab91f87e9: je     0x00007f8ab91f8866
  0x00007f8ab91f87ef: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f87f4: sub    $0x80,%rsp
  0x00007f8ab91f87fb: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8800: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f8805: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f880a: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f880f: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f8814: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f8819: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f881e: mov    %r8,0x38(%rsp)
  0x00007f8ab91f8823: mov    %r9,0x30(%rsp)
  0x00007f8ab91f8828: mov    %r10,0x28(%rsp)
  0x00007f8ab91f882d: mov    %r11,0x20(%rsp)
  0x00007f8ab91f8832: mov    %r12,0x18(%rsp)
  0x00007f8ab91f8837: mov    %r13,0x10(%rsp)
  0x00007f8ab91f883c: mov    %r14,0x8(%rsp)
  0x00007f8ab91f8841: mov    %r15,(%rsp)
  0x00007f8ab91f8845: movabs $0x7f8acf153568,%rdi
  0x00007f8ab91f884f: movabs $0x7f8ab91f87ef,%rsi
  0x00007f8ab91f8859: mov    %rsp,%rdx
  0x00007f8ab91f885c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8860: callq  0x00007f8aceddb9fa
  0x00007f8ab91f8865: hlt    
  0x00007f8ab91f8866: xor    %rbx,%rbx
  0x00007f8ab91f8869: shr    $0x3,%rsi
  0x00007f8ab91f886d: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f8ab91f8872: dec    %rsi
  0x00007f8ab91f8875: jne    0x00007f8ab91f886d
  0x00007f8ab91f8877: pop    %rbx
  0x00007f8ab91f8878: pop    %rdi
  0x00007f8ab91f8879: retq   
  0x00007f8ab91f887a: pop    %rbx
  0x00007f8ab91f887b: pop    %rdi
  0x00007f8ab91f887c: push   %rbp
  0x00007f8ab91f887d: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f8880: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f8885: sub    $0x80,%rsp
  0x00007f8ab91f888c: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8891: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f8896: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f889b: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f88a0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f88a5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f88aa: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f88af: mov    %r8,0x38(%rsp)
  0x00007f8ab91f88b4: mov    %r9,0x30(%rsp)
  0x00007f8ab91f88b9: mov    %r10,0x28(%rsp)
  0x00007f8ab91f88be: mov    %r11,0x20(%rsp)
  0x00007f8ab91f88c3: mov    %r12,0x18(%rsp)
  0x00007f8ab91f88c8: mov    %r13,0x10(%rsp)
  0x00007f8ab91f88cd: mov    %r14,0x8(%rsp)
  0x00007f8ab91f88d2: mov    %r15,(%rsp)
  0x00007f8ab91f88d6: sub    $0x150,%rsp
  0x00007f8ab91f88dd: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f88e9: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f88ef: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f88f5: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f88fb: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f8901: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f8907: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f890d: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f8913: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f8919: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f891f: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f8925: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f892b: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f8931: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f8937: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f893d: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f8943: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f894c: mov    %rdx,%rsi
  0x00007f8ab91f894f: mov    %r15,%rdi
  0x00007f8ab91f8952: mov    %rbp,0x210(%r15)
  0x00007f8ab91f8959: mov    %rsp,0x200(%r15)
  0x00007f8ab91f8960: callq  0x00007f8ace8ba06c
  0x00007f8ab91f8965: push   %rax
  0x00007f8ab91f8966: push   %rdi
  0x00007f8ab91f8967: push   %rsi
  0x00007f8ab91f8968: push   %rdx
  0x00007f8ab91f8969: push   %rcx
  0x00007f8ab91f896a: push   %r8
  0x00007f8ab91f896c: push   %r9
  0x00007f8ab91f896e: push   %r10
  0x00007f8ab91f8970: mov    %rsp,%r10
  0x00007f8ab91f8973: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8977: push   %r10
  0x00007f8ab91f8979: push   %r11
  0x00007f8ab91f897b: mov    $0x1,%edi
  0x00007f8ab91f8980: callq  0x00007f8acf9c32d0
  0x00007f8ab91f8985: pop    %r11
  0x00007f8ab91f8987: pop    %rsp
  0x00007f8ab91f8988: pop    %r10
  0x00007f8ab91f898a: pop    %r9
  0x00007f8ab91f898c: pop    %r8
  0x00007f8ab91f898e: pop    %rcx
  0x00007f8ab91f898f: pop    %rdx
  0x00007f8ab91f8990: pop    %rsi
  0x00007f8ab91f8991: pop    %rdi
  0x00007f8ab91f8992: cmp    %rax,%r15
  0x00007f8ab91f8995: je     0x00007f8ab91f8a17
  0x00007f8ab91f899b: callq  0x00007f8aceec2a22
  0x00007f8ab91f89a0: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f89a5: sub    $0x80,%rsp
  0x00007f8ab91f89ac: mov    %rax,0x78(%rsp)
  0x00007f8ab91f89b1: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f89b6: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f89bb: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f89c0: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f89c5: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f89ca: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f89cf: mov    %r8,0x38(%rsp)
  0x00007f8ab91f89d4: mov    %r9,0x30(%rsp)
  0x00007f8ab91f89d9: mov    %r10,0x28(%rsp)
  0x00007f8ab91f89de: mov    %r11,0x20(%rsp)
  0x00007f8ab91f89e3: mov    %r12,0x18(%rsp)
  0x00007f8ab91f89e8: mov    %r13,0x10(%rsp)
  0x00007f8ab91f89ed: mov    %r14,0x8(%rsp)
  0x00007f8ab91f89f2: mov    %r15,(%rsp)
  0x00007f8ab91f89f6: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f8a00: movabs $0x7f8ab91f89a0,%rsi
  0x00007f8ab91f8a0a: mov    %rsp,%rdx
  0x00007f8ab91f8a0d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8a11: callq  0x00007f8aceddb9fa
  0x00007f8ab91f8a16: hlt    
  0x00007f8ab91f8a17: pop    %rax
  0x00007f8ab91f8a18: movabs $0x0,%r10
  0x00007f8ab91f8a22: mov    %r10,0x200(%r15)
  0x00007f8ab91f8a29: movabs $0x0,%r10
  0x00007f8ab91f8a33: mov    %r10,0x210(%r15)
  0x00007f8ab91f8a3a: movabs $0x0,%r10
  0x00007f8ab91f8a44: mov    %r10,0x208(%r15)
  0x00007f8ab91f8a4b: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f8a53: je     0x00007f8ab91f8a73
  0x00007f8ab91f8a59: mov    0x8(%r15),%rax
  0x00007f8ab91f8a5d: movabs $0x0,%r10
  0x00007f8ab91f8a67: mov    %r10,0x260(%r15)
  0x00007f8ab91f8a6e: jmpq   0x00007f8ab9167c00
  0x00007f8ab91f8a73: mov    0x260(%r15),%rax
  0x00007f8ab91f8a7a: movabs $0x0,%r10
  0x00007f8ab91f8a84: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f8ab91f8a8b: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91f8a91: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91f8a97: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91f8a9d: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91f8aa3: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91f8aa9: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91f8aaf: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91f8ab5: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91f8abb: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91f8ac1: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91f8ac7: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91f8acd: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91f8ad3: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91f8ad9: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91f8adf: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91f8ae5: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91f8aee: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f8afa: je     0x00007f8ab91f8b77
  0x00007f8ab91f8b00: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f8b05: sub    $0x80,%rsp
  0x00007f8ab91f8b0c: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8b11: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f8b16: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f8b1b: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f8b20: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f8b25: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f8b2a: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f8b2f: mov    %r8,0x38(%rsp)
  0x00007f8ab91f8b34: mov    %r9,0x30(%rsp)
  0x00007f8ab91f8b39: mov    %r10,0x28(%rsp)
  0x00007f8ab91f8b3e: mov    %r11,0x20(%rsp)
  0x00007f8ab91f8b43: mov    %r12,0x18(%rsp)
  0x00007f8ab91f8b48: mov    %r13,0x10(%rsp)
  0x00007f8ab91f8b4d: mov    %r14,0x8(%rsp)
  0x00007f8ab91f8b52: mov    %r15,(%rsp)
  0x00007f8ab91f8b56: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91f8b60: movabs $0x7f8ab91f8b00,%rsi
  0x00007f8ab91f8b6a: mov    %rsp,%rdx
  0x00007f8ab91f8b6d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8b71: callq  0x00007f8aceddb9fa
  0x00007f8ab91f8b76: hlt    
  0x00007f8ab91f8b77: add    $0x150,%rsp
  0x00007f8ab91f8b7e: mov    (%rsp),%r15
  0x00007f8ab91f8b82: mov    0x8(%rsp),%r14
  0x00007f8ab91f8b87: mov    0x10(%rsp),%r13
  0x00007f8ab91f8b8c: mov    0x18(%rsp),%r12
  0x00007f8ab91f8b91: mov    0x20(%rsp),%r11
  0x00007f8ab91f8b96: mov    0x28(%rsp),%r10
  0x00007f8ab91f8b9b: mov    0x30(%rsp),%r9
  0x00007f8ab91f8ba0: mov    0x38(%rsp),%r8
  0x00007f8ab91f8ba5: mov    0x40(%rsp),%rdi
  0x00007f8ab91f8baa: mov    0x48(%rsp),%rsi
  0x00007f8ab91f8baf: mov    0x50(%rsp),%rbp
  0x00007f8ab91f8bb4: mov    0x60(%rsp),%rbx
  0x00007f8ab91f8bb9: mov    0x68(%rsp),%rdx
  0x00007f8ab91f8bbe: mov    0x70(%rsp),%rcx
  0x00007f8ab91f8bc3: add    $0x80,%rsp
  0x00007f8ab91f8bca: leaveq 
  0x00007f8ab91f8bcb: retq   
  0x00007f8ab91f8bcc: nop
  0x00007f8ab91f8bcd: nop
  0x00007f8ab91f8bce: nop
  0x00007f8ab91f8bcf: nop

Decoding RuntimeStub - _multianewarray4_Java 0x00007f8ab91f8d10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91f8d60: sub    $0x8,%rsp
  0x00007f8ab91f8d67: mov    %rbp,(%rsp)
  0x00007f8ab91f8d6b: mov    %rsp,0x200(%r15)
  0x00007f8ab91f8d72: mov    %rsi,%rdi
  0x00007f8ab91f8d75: mov    %edx,%esi
  0x00007f8ab91f8d77: mov    %ecx,%edx
  0x00007f8ab91f8d79: mov    %r8d,%ecx
  0x00007f8ab91f8d7c: mov    %r9d,%r8d
  0x00007f8ab91f8d7f: mov    %r15,%r9
  0x00007f8ab91f8d82: movabs $0x7f8acef784c6,%r10
  0x00007f8ab91f8d8c: callq  *%r10
  0x00007f8ab91f8d8f: mov    %r12,0x200(%r15)
  0x00007f8ab91f8d96: mov    %r12,0x208(%r15)
  0x00007f8ab91f8d9d: mov    0x260(%r15),%rax
  0x00007f8ab91f8da4: mov    %r12,0x260(%r15)
  0x00007f8ab91f8dab: cmp    0x8(%r15),%r12
  0x00007f8ab91f8daf: jne    0x00007f8ab91f8db3
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91f8db1: pop    %rbp
  0x00007f8ab91f8db2: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91f8db3: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91f8dbd: xor    %ebx,%ebx
  0x00007f8ab91f8dbf: pop    %rbp
  0x00007f8ab91f8dc0: jmpq   *%r10
  0x00007f8ab91f8dc3: hlt    
  0x00007f8ab91f8dc4: hlt    
  0x00007f8ab91f8dc5: hlt    
  0x00007f8ab91f8dc6: hlt    
  0x00007f8ab91f8dc7: hlt    

Decoding RuntimeStub - fast_new_instance_init_check Runtime1 stub 0x00007f8ab91f8e10
  0x00007f8ab91f8f40: push   %rdi
  0x00007f8ab91f8f41: push   %rbx
  0x00007f8ab91f8f42: cmpb   $0x4,0x16a(%rdx)
  0x00007f8ab91f8f49: jne    0x00007f8ab91f9407
  0x00007f8ab91f8f4f: mov    0xc(%rdx),%ecx
  0x00007f8ab91f8f52: cmp    $0x0,%ecx
  0x00007f8ab91f8f55: jle    0x00007f8ab91f8f67
  0x00007f8ab91f8f5b: test   $0x1,%ecx
  0x00007f8ab91f8f61: je     0x00007f8ab91f9055
  0x00007f8ab91f8f67: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f8f6c: sub    $0x80,%rsp
  0x00007f8ab91f8f73: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8f78: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f8f7d: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f8f82: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f8f87: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f8f8c: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f8f91: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f8f96: mov    %r8,0x38(%rsp)
  0x00007f8ab91f8f9b: mov    %r9,0x30(%rsp)
  0x00007f8ab91f8fa0: mov    %r10,0x28(%rsp)
  0x00007f8ab91f8fa5: mov    %r11,0x20(%rsp)
  0x00007f8ab91f8faa: mov    %r12,0x18(%rsp)
  0x00007f8ab91f8faf: mov    %r13,0x10(%rsp)
  0x00007f8ab91f8fb4: mov    %r14,0x8(%rsp)
  0x00007f8ab91f8fb9: mov    %r15,(%rsp)
  0x00007f8ab91f8fbd: movabs $0x7f8acf15cb80,%rdi
  0x00007f8ab91f8fc7: movabs $0x7f8ab91f8f67,%rsi
  0x00007f8ab91f8fd1: mov    %rsp,%rdx
  0x00007f8ab91f8fd4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f8fd8: callq  0x00007f8aceddb9fa
  0x00007f8ab91f8fdd: hlt    
  0x00007f8ab91f8fde: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f8fe3: sub    $0x80,%rsp
  0x00007f8ab91f8fea: mov    %rax,0x78(%rsp)
  0x00007f8ab91f8fef: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f8ff4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f8ff9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f8ffe: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9003: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9008: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f900d: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9012: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9017: mov    %r10,0x28(%rsp)
  0x00007f8ab91f901c: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9021: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9026: mov    %r13,0x10(%rsp)
  0x00007f8ab91f902b: mov    %r14,0x8(%rsp)
  0x00007f8ab91f9030: mov    %r15,(%rsp)
  0x00007f8ab91f9034: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab91f903e: movabs $0x7f8ab91f8fde,%rsi
  0x00007f8ab91f9048: mov    %rsp,%rdx
  0x00007f8ab91f904b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f904f: callq  0x00007f8aceddb9fa
  0x00007f8ab91f9054: hlt    
  0x00007f8ab91f9055: mov    0x70(%r15),%rax
  0x00007f8ab91f9059: mov    0x80(%r15),%rcx
  0x00007f8ab91f9060: sub    %rax,%rcx
  0x00007f8ab91f9063: shr    $0x3,%rcx
  0x00007f8ab91f9067: cmp    0x90(%r15),%rcx
  0x00007f8ab91f906e: jle    0x00007f8ab91f9092
  0x00007f8ab91f9074: movabs $0x4,%rsi
  0x00007f8ab91f907e: add    %rsi,0x90(%r15)
  0x00007f8ab91f9085: addl   $0x1,0xb0(%r15)
  0x00007f8ab91f908d: jmpq   0x00007f8ab91f9312
  0x00007f8ab91f9092: addl   $0x1,0xa0(%r15)
  0x00007f8ab91f909a: add    %ecx,0xa4(%r15)
  0x00007f8ab91f90a1: test   %rax,%rax
  0x00007f8ab91f90a4: je     0x00007f8ab91f90e1
  0x00007f8ab91f90aa: movabs $0x201,%r10
  0x00007f8ab91f90b4: mov    %r10,(%rax)
  0x00007f8ab91f90b7: sub    $0x2,%rcx
  0x00007f8ab91f90bb: add    $0x2,%rcx
  0x00007f8ab91f90bf: shl    %rcx
  0x00007f8ab91f90c2: mov    %ecx,0xc(%rax)
  0x00007f8ab91f90c5: mov    0x167b4e8c(%rip),%rcx        # 0x00007f8acf9adf58
  0x00007f8ab91f90cc: shr    $0x3,%rcx
  0x00007f8ab91f90d0: mov    %ecx,0x8(%rax)
  0x00007f8ab91f90d3: mov    %rax,%rcx
  0x00007f8ab91f90d6: sub    0x68(%r15),%rcx
  0x00007f8ab91f90da: add    %rcx,0xd8(%r15)
  0x00007f8ab91f90e1: mov    0x88(%r15),%rcx
  0x00007f8ab91f90e8: shl    $0x3,%rcx
  0x00007f8ab91f90ec: mov    0xee2b4e5(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab91f90f3: lea    (%rax,%rcx,1),%rsi
  0x00007f8ab91f90f7: cmp    %rax,%rsi
  0x00007f8ab91f90fa: jb     0x00007f8ab91f9407
  0x00007f8ab91f9100: cmp    0xee2b4a9(%rip),%rsi        # 0x00007f8ac80245b0
  0x00007f8ab91f9107: ja     0x00007f8ab91f9407
  0x00007f8ab91f910d: lock cmpxchg %rsi,0xee2b4c2(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab91f9116: jne    0x00007f8ab91f90ec
  0x00007f8ab91f9118: push   %rsi
  0x00007f8ab91f9119: mov    0x88(%r15),%rsi
  0x00007f8ab91f9120: shl    $0x3,%rsi
  0x00007f8ab91f9124: cmp    %rsi,%rcx
  0x00007f8ab91f9127: je     0x00007f8ab91f921b
  ;; assert(t1 != tlab size)
  0x00007f8ab91f912d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9132: sub    $0x80,%rsp
  0x00007f8ab91f9139: mov    %rax,0x78(%rsp)
  0x00007f8ab91f913e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f9143: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9148: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f914d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9152: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9157: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f915c: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9161: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9166: mov    %r10,0x28(%rsp)
  0x00007f8ab91f916b: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9170: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9175: mov    %r13,0x10(%rsp)
  0x00007f8ab91f917a: mov    %r14,0x8(%rsp)
  0x00007f8ab91f917f: mov    %r15,(%rsp)
  0x00007f8ab91f9183: movabs $0x7f8acf2f1619,%rdi
  0x00007f8ab91f918d: movabs $0x7f8ab91f912d,%rsi
  0x00007f8ab91f9197: mov    %rsp,%rdx
  0x00007f8ab91f919a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f919e: callq  0x00007f8aceddb9fa
  0x00007f8ab91f91a3: hlt    
  0x00007f8ab91f91a4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f91a9: sub    $0x80,%rsp
  0x00007f8ab91f91b0: mov    %rax,0x78(%rsp)
  0x00007f8ab91f91b5: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f91ba: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f91bf: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f91c4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f91c9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f91ce: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f91d3: mov    %r8,0x38(%rsp)
  0x00007f8ab91f91d8: mov    %r9,0x30(%rsp)
  0x00007f8ab91f91dd: mov    %r10,0x28(%rsp)
  0x00007f8ab91f91e2: mov    %r11,0x20(%rsp)
  0x00007f8ab91f91e7: mov    %r12,0x18(%rsp)
  0x00007f8ab91f91ec: mov    %r13,0x10(%rsp)
  0x00007f8ab91f91f1: mov    %r14,0x8(%rsp)
  0x00007f8ab91f91f6: mov    %r15,(%rsp)
  0x00007f8ab91f91fa: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab91f9204: movabs $0x7f8ab91f91a4,%rsi
  0x00007f8ab91f920e: mov    %rsp,%rdx
  0x00007f8ab91f9211: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f9215: callq  0x00007f8aceddb9fa
  0x00007f8ab91f921a: hlt    
  0x00007f8ab91f921b: pop    %rsi
  0x00007f8ab91f921c: mov    %rax,0x68(%r15)
  0x00007f8ab91f9220: mov    %rax,0x70(%r15)
  0x00007f8ab91f9224: add    %rcx,%rax
  0x00007f8ab91f9227: sub    $0x10,%rax
  0x00007f8ab91f922b: mov    %rax,0x80(%r15)
  0x00007f8ab91f9232: jmpq   0x00007f8ab91f9237
  0x00007f8ab91f9237: mov    0xc(%rdx),%ecx
  0x00007f8ab91f923a: mov    0x70(%r15),%rax
  0x00007f8ab91f923e: lea    (%rax,%rcx,1),%rsi
  0x00007f8ab91f9242: cmp    0x80(%r15),%rsi
  0x00007f8ab91f9249: ja     0x00007f8ab91f9407
  0x00007f8ab91f924f: mov    %rsi,0x70(%r15)
  0x00007f8ab91f9253: mov    0xb0(%rdx),%rbx
  0x00007f8ab91f925a: mov    %rbx,(%rax)
  0x00007f8ab91f925d: mov    %rdx,%rbx
  0x00007f8ab91f9260: shr    $0x3,%rbx
  0x00007f8ab91f9264: mov    %ebx,0x8(%rax)
  0x00007f8ab91f9267: xor    %rbx,%rbx
  0x00007f8ab91f926a: mov    %ebx,0xc(%rax)
  0x00007f8ab91f926d: mov    %rcx,%rsi
  0x00007f8ab91f9270: sub    $0x10,%rsi
  0x00007f8ab91f9274: je     0x00007f8ab91f930f
  0x00007f8ab91f927a: test   $0x7,%rsi
  0x00007f8ab91f9281: je     0x00007f8ab91f92fe
  0x00007f8ab91f9287: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f928c: sub    $0x80,%rsp
  0x00007f8ab91f9293: mov    %rax,0x78(%rsp)
  0x00007f8ab91f9298: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f929d: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f92a2: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f92a7: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f92ac: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f92b1: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f92b6: mov    %r8,0x38(%rsp)
  0x00007f8ab91f92bb: mov    %r9,0x30(%rsp)
  0x00007f8ab91f92c0: mov    %r10,0x28(%rsp)
  0x00007f8ab91f92c5: mov    %r11,0x20(%rsp)
  0x00007f8ab91f92ca: mov    %r12,0x18(%rsp)
  0x00007f8ab91f92cf: mov    %r13,0x10(%rsp)
  0x00007f8ab91f92d4: mov    %r14,0x8(%rsp)
  0x00007f8ab91f92d9: mov    %r15,(%rsp)
  0x00007f8ab91f92dd: movabs $0x7f8acf153568,%rdi
  0x00007f8ab91f92e7: movabs $0x7f8ab91f9287,%rsi
  0x00007f8ab91f92f1: mov    %rsp,%rdx
  0x00007f8ab91f92f4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f92f8: callq  0x00007f8aceddb9fa
  0x00007f8ab91f92fd: hlt    
  0x00007f8ab91f92fe: xor    %rbx,%rbx
  0x00007f8ab91f9301: shr    $0x3,%rsi
  0x00007f8ab91f9305: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f8ab91f930a: dec    %rsi
  0x00007f8ab91f930d: jne    0x00007f8ab91f9305
  0x00007f8ab91f930f: pop    %rbx
  0x00007f8ab91f9310: pop    %rdi
  0x00007f8ab91f9311: retq   
  0x00007f8ab91f9312: mov    0xc(%rdx),%ecx
  0x00007f8ab91f9315: mov    0xee2b2bc(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab91f931c: lea    (%rax,%rcx,1),%rbx
  0x00007f8ab91f9320: cmp    %rax,%rbx
  0x00007f8ab91f9323: jb     0x00007f8ab91f9407
  0x00007f8ab91f9329: cmp    0xee2b280(%rip),%rbx        # 0x00007f8ac80245b0
  0x00007f8ab91f9330: ja     0x00007f8ab91f9407
  0x00007f8ab91f9336: lock cmpxchg %rbx,0xee2b299(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab91f933f: jne    0x00007f8ab91f9315
  0x00007f8ab91f9341: add    %rcx,0xd8(%r15)
  0x00007f8ab91f9348: mov    0xb0(%rdx),%rbx
  0x00007f8ab91f934f: mov    %rbx,(%rax)
  0x00007f8ab91f9352: mov    %rdx,%rbx
  0x00007f8ab91f9355: shr    $0x3,%rbx
  0x00007f8ab91f9359: mov    %ebx,0x8(%rax)
  0x00007f8ab91f935c: xor    %rbx,%rbx
  0x00007f8ab91f935f: mov    %ebx,0xc(%rax)
  0x00007f8ab91f9362: mov    %rcx,%rsi
  0x00007f8ab91f9365: sub    $0x10,%rsi
  0x00007f8ab91f9369: je     0x00007f8ab91f9404
  0x00007f8ab91f936f: test   $0x7,%rsi
  0x00007f8ab91f9376: je     0x00007f8ab91f93f3
  0x00007f8ab91f937c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9381: sub    $0x80,%rsp
  0x00007f8ab91f9388: mov    %rax,0x78(%rsp)
  0x00007f8ab91f938d: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f9392: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9397: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f939c: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f93a1: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f93a6: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f93ab: mov    %r8,0x38(%rsp)
  0x00007f8ab91f93b0: mov    %r9,0x30(%rsp)
  0x00007f8ab91f93b5: mov    %r10,0x28(%rsp)
  0x00007f8ab91f93ba: mov    %r11,0x20(%rsp)
  0x00007f8ab91f93bf: mov    %r12,0x18(%rsp)
  0x00007f8ab91f93c4: mov    %r13,0x10(%rsp)
  0x00007f8ab91f93c9: mov    %r14,0x8(%rsp)
  0x00007f8ab91f93ce: mov    %r15,(%rsp)
  0x00007f8ab91f93d2: movabs $0x7f8acf153568,%rdi
  0x00007f8ab91f93dc: movabs $0x7f8ab91f937c,%rsi
  0x00007f8ab91f93e6: mov    %rsp,%rdx
  0x00007f8ab91f93e9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f93ed: callq  0x00007f8aceddb9fa
  0x00007f8ab91f93f2: hlt    
  0x00007f8ab91f93f3: xor    %rbx,%rbx
  0x00007f8ab91f93f6: shr    $0x3,%rsi
  0x00007f8ab91f93fa: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f8ab91f93ff: dec    %rsi
  0x00007f8ab91f9402: jne    0x00007f8ab91f93fa
  0x00007f8ab91f9404: pop    %rbx
  0x00007f8ab91f9405: pop    %rdi
  0x00007f8ab91f9406: retq   
  0x00007f8ab91f9407: pop    %rbx
  0x00007f8ab91f9408: pop    %rdi
  0x00007f8ab91f9409: push   %rbp
  0x00007f8ab91f940a: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f940d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9412: sub    $0x80,%rsp
  0x00007f8ab91f9419: mov    %rax,0x78(%rsp)
  0x00007f8ab91f941e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f9423: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9428: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f942d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9432: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9437: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f943c: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9441: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9446: mov    %r10,0x28(%rsp)
  0x00007f8ab91f944b: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9450: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9455: mov    %r13,0x10(%rsp)
  0x00007f8ab91f945a: mov    %r14,0x8(%rsp)
  0x00007f8ab91f945f: mov    %r15,(%rsp)
  0x00007f8ab91f9463: sub    $0x150,%rsp
  0x00007f8ab91f946a: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f9476: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f947c: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f9482: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f9488: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f948e: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f9494: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f949a: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f94a0: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f94a6: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f94ac: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f94b2: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f94b8: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f94be: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f94c4: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f94ca: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f94d0: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f94d9: mov    %rdx,%rsi
  0x00007f8ab91f94dc: mov    %r15,%rdi
  0x00007f8ab91f94df: mov    %rbp,0x210(%r15)
  0x00007f8ab91f94e6: mov    %rsp,0x200(%r15)
  0x00007f8ab91f94ed: callq  0x00007f8ace8ba06c
  0x00007f8ab91f94f2: push   %rax
  0x00007f8ab91f94f3: push   %rdi
  0x00007f8ab91f94f4: push   %rsi
  0x00007f8ab91f94f5: push   %rdx
  0x00007f8ab91f94f6: push   %rcx
  0x00007f8ab91f94f7: push   %r8
  0x00007f8ab91f94f9: push   %r9
  0x00007f8ab91f94fb: push   %r10
  0x00007f8ab91f94fd: mov    %rsp,%r10
  0x00007f8ab91f9500: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f9504: push   %r10
  0x00007f8ab91f9506: push   %r11
  0x00007f8ab91f9508: mov    $0x1,%edi
  0x00007f8ab91f950d: callq  0x00007f8acf9c32d0
  0x00007f8ab91f9512: pop    %r11
  0x00007f8ab91f9514: pop    %rsp
  0x00007f8ab91f9515: pop    %r10
  0x00007f8ab91f9517: pop    %r9
  0x00007f8ab91f9519: pop    %r8
  0x00007f8ab91f951b: pop    %rcx
  0x00007f8ab91f951c: pop    %rdx
  0x00007f8ab91f951d: pop    %rsi
  0x00007f8ab91f951e: pop    %rdi
  0x00007f8ab91f951f: cmp    %rax,%r15
  0x00007f8ab91f9522: je     0x00007f8ab91f95a4
  0x00007f8ab91f9528: callq  0x00007f8aceec2a22
  0x00007f8ab91f952d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9532: sub    $0x80,%rsp
  0x00007f8ab91f9539: mov    %rax,0x78(%rsp)
  0x00007f8ab91f953e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f9543: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9548: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f954d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9552: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9557: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f955c: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9561: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9566: mov    %r10,0x28(%rsp)
  0x00007f8ab91f956b: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9570: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9575: mov    %r13,0x10(%rsp)
  0x00007f8ab91f957a: mov    %r14,0x8(%rsp)
  0x00007f8ab91f957f: mov    %r15,(%rsp)
  0x00007f8ab91f9583: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f958d: movabs $0x7f8ab91f952d,%rsi
  0x00007f8ab91f9597: mov    %rsp,%rdx
  0x00007f8ab91f959a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f959e: callq  0x00007f8aceddb9fa
  0x00007f8ab91f95a3: hlt    
  0x00007f8ab91f95a4: pop    %rax
  0x00007f8ab91f95a5: movabs $0x0,%r10
  0x00007f8ab91f95af: mov    %r10,0x200(%r15)
  0x00007f8ab91f95b6: movabs $0x0,%r10
  0x00007f8ab91f95c0: mov    %r10,0x210(%r15)
  0x00007f8ab91f95c7: movabs $0x0,%r10
  0x00007f8ab91f95d1: mov    %r10,0x208(%r15)
  0x00007f8ab91f95d8: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f95e0: je     0x00007f8ab91f9600
  0x00007f8ab91f95e6: mov    0x8(%r15),%rax
  0x00007f8ab91f95ea: movabs $0x0,%r10
  0x00007f8ab91f95f4: mov    %r10,0x260(%r15)
  0x00007f8ab91f95fb: jmpq   0x00007f8ab9167c00
  0x00007f8ab91f9600: mov    0x260(%r15),%rax
  0x00007f8ab91f9607: movabs $0x0,%r10
  0x00007f8ab91f9611: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f8ab91f9618: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91f961e: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91f9624: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91f962a: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91f9630: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91f9636: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91f963c: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91f9642: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91f9648: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91f964e: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91f9654: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91f965a: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91f9660: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91f9666: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91f966c: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91f9672: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91f967b: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f9687: je     0x00007f8ab91f9704
  0x00007f8ab91f968d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9692: sub    $0x80,%rsp
  0x00007f8ab91f9699: mov    %rax,0x78(%rsp)
  0x00007f8ab91f969e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f96a3: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f96a8: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f96ad: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f96b2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f96b7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f96bc: mov    %r8,0x38(%rsp)
  0x00007f8ab91f96c1: mov    %r9,0x30(%rsp)
  0x00007f8ab91f96c6: mov    %r10,0x28(%rsp)
  0x00007f8ab91f96cb: mov    %r11,0x20(%rsp)
  0x00007f8ab91f96d0: mov    %r12,0x18(%rsp)
  0x00007f8ab91f96d5: mov    %r13,0x10(%rsp)
  0x00007f8ab91f96da: mov    %r14,0x8(%rsp)
  0x00007f8ab91f96df: mov    %r15,(%rsp)
  0x00007f8ab91f96e3: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91f96ed: movabs $0x7f8ab91f968d,%rsi
  0x00007f8ab91f96f7: mov    %rsp,%rdx
  0x00007f8ab91f96fa: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f96fe: callq  0x00007f8aceddb9fa
  0x00007f8ab91f9703: hlt    
  0x00007f8ab91f9704: add    $0x150,%rsp
  0x00007f8ab91f970b: mov    (%rsp),%r15
  0x00007f8ab91f970f: mov    0x8(%rsp),%r14
  0x00007f8ab91f9714: mov    0x10(%rsp),%r13
  0x00007f8ab91f9719: mov    0x18(%rsp),%r12
  0x00007f8ab91f971e: mov    0x20(%rsp),%r11
  0x00007f8ab91f9723: mov    0x28(%rsp),%r10
  0x00007f8ab91f9728: mov    0x30(%rsp),%r9
  0x00007f8ab91f972d: mov    0x38(%rsp),%r8
  0x00007f8ab91f9732: mov    0x40(%rsp),%rdi
  0x00007f8ab91f9737: mov    0x48(%rsp),%rsi
  0x00007f8ab91f973c: mov    0x50(%rsp),%rbp
  0x00007f8ab91f9741: mov    0x60(%rsp),%rbx
  0x00007f8ab91f9746: mov    0x68(%rsp),%rdx
  0x00007f8ab91f974b: mov    0x70(%rsp),%rcx
  0x00007f8ab91f9750: add    $0x80,%rsp
  0x00007f8ab91f9757: leaveq 
  0x00007f8ab91f9758: retq   
  0x00007f8ab91f9759: nop
  0x00007f8ab91f975a: nop
  0x00007f8ab91f975b: nop
  0x00007f8ab91f975c: nop
  0x00007f8ab91f975d: nop
  0x00007f8ab91f975e: nop
  0x00007f8ab91f975f: nop

Decoding RuntimeStub - _multianewarray5_Java 0x00007f8ab91f6150
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91f61a0: sub    $0x18,%rsp
  0x00007f8ab91f61a7: mov    %rbp,0x10(%rsp)
  0x00007f8ab91f61ac: mov    %edi,%r10d
  0x00007f8ab91f61af: mov    %rsp,0x200(%r15)
  0x00007f8ab91f61b6: mov    %rsi,%rdi
  0x00007f8ab91f61b9: mov    %edx,%esi
  0x00007f8ab91f61bb: mov    %ecx,%edx
  0x00007f8ab91f61bd: mov    %r8d,%ecx
  0x00007f8ab91f61c0: mov    %r9d,%r8d
  0x00007f8ab91f61c3: mov    %r10d,%r9d
  0x00007f8ab91f61c6: mov    %r15,(%rsp)
  0x00007f8ab91f61ca: movabs $0x7f8acef7877e,%r10
  0x00007f8ab91f61d4: callq  *%r10
  0x00007f8ab91f61d7: mov    %r12,0x200(%r15)
  0x00007f8ab91f61de: mov    %r12,0x208(%r15)
  0x00007f8ab91f61e5: mov    0x260(%r15),%rax
  0x00007f8ab91f61ec: mov    %r12,0x260(%r15)
  0x00007f8ab91f61f3: cmp    0x8(%r15),%r12
  0x00007f8ab91f61f7: jne    0x00007f8ab91f61ff
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91f61f9: add    $0x10,%rsp
  0x00007f8ab91f61fd: pop    %rbp
  0x00007f8ab91f61fe: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91f61ff: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91f6209: xor    %ebx,%ebx
  0x00007f8ab91f620b: add    $0x10,%rsp
  0x00007f8ab91f620f: pop    %rbp
  0x00007f8ab91f6210: jmpq   *%r10
  0x00007f8ab91f6213: hlt    
  0x00007f8ab91f6214: hlt    
  0x00007f8ab91f6215: hlt    
  0x00007f8ab91f6216: hlt    
  0x00007f8ab91f6217: hlt    

AHE@0x00007f8ac812f3d0: 0xbabbbb00 i2c: 0x00007f8ab91f62e0 c2i: 0x00007f8ab91f642d c2iUV: 0x00007f8ab91f6400
i2c argument handler #118 for: static (Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName; (620 bytes generated)
c2i argument handler starts at 0x7f8ab91f642d
  0x00007f8ab91f62e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91f62e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91f62ee: cmp    %r11,%rax
  0x00007f8ab91f62f1: jbe    0x00007f8ab91f630a
  0x00007f8ab91f62f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91f6301: cmp    %r11,%rax
  0x00007f8ab91f6304: jb     0x00007f8ab91f63cd
  0x00007f8ab91f630a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91f6314: cmp    %r11,%rax
  0x00007f8ab91f6317: jbe    0x00007f8ab91f6330
  0x00007f8ab91f631d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91f6327: cmp    %r11,%rax
  0x00007f8ab91f632a: jb     0x00007f8ab91f63cd
  0x00007f8ab91f6330: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91f633a: cmp    %r11,%rax
  0x00007f8ab91f633d: jbe    0x00007f8ab91f6356
  0x00007f8ab91f6343: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91f634d: cmp    %r11,%rax
  0x00007f8ab91f6350: jb     0x00007f8ab91f63cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91f6356: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f635b: sub    $0x80,%rsp
  0x00007f8ab91f6362: mov    %rax,0x78(%rsp)
  0x00007f8ab91f6367: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f636c: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f6371: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f6376: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f637b: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f6380: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f6385: mov    %r8,0x38(%rsp)
  0x00007f8ab91f638a: mov    %r9,0x30(%rsp)
  0x00007f8ab91f638f: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6394: mov    %r11,0x20(%rsp)
  0x00007f8ab91f6399: mov    %r12,0x18(%rsp)
  0x00007f8ab91f639e: mov    %r13,0x10(%rsp)
  0x00007f8ab91f63a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91f63a8: mov    %r15,(%rsp)
  0x00007f8ab91f63ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91f63b6: movabs $0x7f8ab91f6356,%rsi
  0x00007f8ab91f63c0: mov    %rsp,%rdx
  0x00007f8ab91f63c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f63c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91f63cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91f63cd: mov    %rsp,%r11
  0x00007f8ab91f63d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f63d4: push   %rax
  0x00007f8ab91f63d5: mov    %r11,%rax
  0x00007f8ab91f63d8: mov    0x50(%rbx),%r11
  0x00007f8ab91f63dc: mov    0x30(%rax),%rsi
  0x00007f8ab91f63e0: mov    0x28(%rax),%edx
  0x00007f8ab91f63e3: mov    0x20(%rax),%rcx
  0x00007f8ab91f63e7: mov    0x18(%rax),%r8
  0x00007f8ab91f63eb: mov    0x10(%rax),%r9
  0x00007f8ab91f63ef: mov    0x8(%rax),%rdi
  0x00007f8ab91f63f3: mov    %rbx,0x258(%r15)
  0x00007f8ab91f63fa: mov    %rbx,%rax
  0x00007f8ab91f63fd: jmpq   *%r11
  0x00007f8ab91f6400: mov    0x8(%rsi),%ebx
  0x00007f8ab91f6403: shl    $0x3,%rbx
  0x00007f8ab91f6407: cmp    0x10(%rax),%rbx
  0x00007f8ab91f640b: mov    0x8(%rax),%rbx
  0x00007f8ab91f640f: je     0x00007f8ab91f641a
  0x00007f8ab91f6415: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f641a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f6422: je     0x00007f8ab91f651d
  0x00007f8ab91f6428: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f642d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f6435: je     0x00007f8ab91f651d
  0x00007f8ab91f643b: mov    %rsp,%r13
  0x00007f8ab91f643e: mov    (%rsp),%rax
  0x00007f8ab91f6442: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f6446: pushfq 
  0x00007f8ab91f6447: sub    $0x8,%rsp
  0x00007f8ab91f644b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f6450: sub    $0x80,%rsp
  0x00007f8ab91f6457: mov    %rax,0x78(%rsp)
  0x00007f8ab91f645c: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f6461: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f6466: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f646b: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f6470: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f6475: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f647a: mov    %r8,0x38(%rsp)
  0x00007f8ab91f647f: mov    %r9,0x30(%rsp)
  0x00007f8ab91f6484: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6489: mov    %r11,0x20(%rsp)
  0x00007f8ab91f648e: mov    %r12,0x18(%rsp)
  0x00007f8ab91f6493: mov    %r13,0x10(%rsp)
  0x00007f8ab91f6498: mov    %r14,0x8(%rsp)
  0x00007f8ab91f649d: mov    %r15,(%rsp)
  0x00007f8ab91f64a1: sub    $0x200,%rsp
  0x00007f8ab91f64a8: fxsave64 (%rsp)
  0x00007f8ab91f64ad: mov    %rbx,%rdi
  0x00007f8ab91f64b0: mov    %rax,%rsi
  0x00007f8ab91f64b3: callq  0x00007f8acef8bbca
  0x00007f8ab91f64b8: fxrstor64 (%rsp)
  0x00007f8ab91f64bd: add    $0x200,%rsp
  0x00007f8ab91f64c4: mov    (%rsp),%r15
  0x00007f8ab91f64c8: mov    0x8(%rsp),%r14
  0x00007f8ab91f64cd: mov    0x10(%rsp),%r13
  0x00007f8ab91f64d2: mov    0x18(%rsp),%r12
  0x00007f8ab91f64d7: mov    0x20(%rsp),%r11
  0x00007f8ab91f64dc: mov    0x28(%rsp),%r10
  0x00007f8ab91f64e1: mov    0x30(%rsp),%r9
  0x00007f8ab91f64e6: mov    0x38(%rsp),%r8
  0x00007f8ab91f64eb: mov    0x40(%rsp),%rdi
  0x00007f8ab91f64f0: mov    0x48(%rsp),%rsi
  0x00007f8ab91f64f5: mov    0x50(%rsp),%rbp
  0x00007f8ab91f64fa: mov    0x60(%rsp),%rbx
  0x00007f8ab91f64ff: mov    0x68(%rsp),%rdx
  0x00007f8ab91f6504: mov    0x70(%rsp),%rcx
  0x00007f8ab91f6509: mov    0x78(%rsp),%rax
  0x00007f8ab91f650e: add    $0x80,%rsp
  0x00007f8ab91f6515: add    $0x8,%rsp
  0x00007f8ab91f6519: popfq  
  0x00007f8ab91f651a: mov    %r13,%rsp
  0x00007f8ab91f651d: pop    %rax
  0x00007f8ab91f651e: mov    %rsp,%r13
  0x00007f8ab91f6521: sub    $0x40,%rsp
  0x00007f8ab91f6525: mov    %rax,(%rsp)
  0x00007f8ab91f6529: mov    %rsi,0x30(%rsp)
  0x00007f8ab91f652e: mov    %edx,0x28(%rsp)
  0x00007f8ab91f6532: mov    %rcx,0x20(%rsp)
  0x00007f8ab91f6537: mov    %r8,0x18(%rsp)
  0x00007f8ab91f653c: mov    %r9,0x10(%rsp)
  0x00007f8ab91f6541: mov    %rdi,0x8(%rsp)
  0x00007f8ab91f6546: mov    0x40(%rbx),%rcx
  0x00007f8ab91f654a: jmpq   *%rcx

AHE@0x00007f8ac812f418: 0xbbbabab0 i2c: 0x00007f8ab91f54e0 c2i: 0x00007f8ab91f563a c2iUV: 0x00007f8ab91f560d
i2c argument handler #119 for: static (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Class;I[Ljava/lang/invoke/MemberName;)I (643 bytes generated)
c2i argument handler starts at 0x7f8ab91f563a
  0x00007f8ab91f54e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab91f54e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab91f54ee: cmp    %r11,%rax
  0x00007f8ab91f54f1: jbe    0x00007f8ab91f550a
  0x00007f8ab91f54f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab91f5501: cmp    %r11,%rax
  0x00007f8ab91f5504: jb     0x00007f8ab91f55cd
  0x00007f8ab91f550a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab91f5514: cmp    %r11,%rax
  0x00007f8ab91f5517: jbe    0x00007f8ab91f5530
  0x00007f8ab91f551d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab91f5527: cmp    %r11,%rax
  0x00007f8ab91f552a: jb     0x00007f8ab91f55cd
  0x00007f8ab91f5530: movabs $0x7f8ab9140820,%r11
  0x00007f8ab91f553a: cmp    %r11,%rax
  0x00007f8ab91f553d: jbe    0x00007f8ab91f5556
  0x00007f8ab91f5543: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab91f554d: cmp    %r11,%rax
  0x00007f8ab91f5550: jb     0x00007f8ab91f55cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab91f5556: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f555b: sub    $0x80,%rsp
  0x00007f8ab91f5562: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5567: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f556c: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5571: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5576: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f557b: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5580: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5585: mov    %r8,0x38(%rsp)
  0x00007f8ab91f558a: mov    %r9,0x30(%rsp)
  0x00007f8ab91f558f: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5594: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5599: mov    %r12,0x18(%rsp)
  0x00007f8ab91f559e: mov    %r13,0x10(%rsp)
  0x00007f8ab91f55a3: mov    %r14,0x8(%rsp)
  0x00007f8ab91f55a8: mov    %r15,(%rsp)
  0x00007f8ab91f55ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab91f55b6: movabs $0x7f8ab91f5556,%rsi
  0x00007f8ab91f55c0: mov    %rsp,%rdx
  0x00007f8ab91f55c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f55c7: callq  0x00007f8aceddb9fa
  0x00007f8ab91f55cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab91f55cd: mov    %rsp,%r11
  0x00007f8ab91f55d0: sub    $0x10,%rsp
  0x00007f8ab91f55d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f55d8: push   %rax
  0x00007f8ab91f55d9: mov    %r11,%rax
  0x00007f8ab91f55dc: mov    0x50(%rbx),%r11
  0x00007f8ab91f55e0: mov    0x38(%rax),%rsi
  0x00007f8ab91f55e4: mov    0x30(%rax),%rdx
  0x00007f8ab91f55e8: mov    0x28(%rax),%rcx
  0x00007f8ab91f55ec: mov    0x20(%rax),%r8d
  0x00007f8ab91f55f0: mov    0x18(%rax),%r9
  0x00007f8ab91f55f4: mov    0x10(%rax),%edi
  0x00007f8ab91f55f7: mov    0x8(%rax),%r13
  0x00007f8ab91f55fb: mov    %r13,0x8(%rsp)
  0x00007f8ab91f5600: mov    %rbx,0x258(%r15)
  0x00007f8ab91f5607: mov    %rbx,%rax
  0x00007f8ab91f560a: jmpq   *%r11
  0x00007f8ab91f560d: mov    0x8(%rsi),%ebx
  0x00007f8ab91f5610: shl    $0x3,%rbx
  0x00007f8ab91f5614: cmp    0x10(%rax),%rbx
  0x00007f8ab91f5618: mov    0x8(%rax),%rbx
  0x00007f8ab91f561c: je     0x00007f8ab91f5627
  0x00007f8ab91f5622: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f5627: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f562f: je     0x00007f8ab91f572a
  0x00007f8ab91f5635: jmpq   0x00007f8ab9105c40
  0x00007f8ab91f563a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab91f5642: je     0x00007f8ab91f572a
  0x00007f8ab91f5648: mov    %rsp,%r13
  0x00007f8ab91f564b: mov    (%rsp),%rax
  0x00007f8ab91f564f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5653: pushfq 
  0x00007f8ab91f5654: sub    $0x8,%rsp
  0x00007f8ab91f5658: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f565d: sub    $0x80,%rsp
  0x00007f8ab91f5664: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5669: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f566e: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5673: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5678: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f567d: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5682: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5687: mov    %r8,0x38(%rsp)
  0x00007f8ab91f568c: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5691: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5696: mov    %r11,0x20(%rsp)
  0x00007f8ab91f569b: mov    %r12,0x18(%rsp)
  0x00007f8ab91f56a0: mov    %r13,0x10(%rsp)
  0x00007f8ab91f56a5: mov    %r14,0x8(%rsp)
  0x00007f8ab91f56aa: mov    %r15,(%rsp)
  0x00007f8ab91f56ae: sub    $0x200,%rsp
  0x00007f8ab91f56b5: fxsave64 (%rsp)
  0x00007f8ab91f56ba: mov    %rbx,%rdi
  0x00007f8ab91f56bd: mov    %rax,%rsi
  0x00007f8ab91f56c0: callq  0x00007f8acef8bbca
  0x00007f8ab91f56c5: fxrstor64 (%rsp)
  0x00007f8ab91f56ca: add    $0x200,%rsp
  0x00007f8ab91f56d1: mov    (%rsp),%r15
  0x00007f8ab91f56d5: mov    0x8(%rsp),%r14
  0x00007f8ab91f56da: mov    0x10(%rsp),%r13
  0x00007f8ab91f56df: mov    0x18(%rsp),%r12
  0x00007f8ab91f56e4: mov    0x20(%rsp),%r11
  0x00007f8ab91f56e9: mov    0x28(%rsp),%r10
  0x00007f8ab91f56ee: mov    0x30(%rsp),%r9
  0x00007f8ab91f56f3: mov    0x38(%rsp),%r8
  0x00007f8ab91f56f8: mov    0x40(%rsp),%rdi
  0x00007f8ab91f56fd: mov    0x48(%rsp),%rsi
  0x00007f8ab91f5702: mov    0x50(%rsp),%rbp
  0x00007f8ab91f5707: mov    0x60(%rsp),%rbx
  0x00007f8ab91f570c: mov    0x68(%rsp),%rdx
  0x00007f8ab91f5711: mov    0x70(%rsp),%rcx
  0x00007f8ab91f5716: mov    0x78(%rsp),%rax
  0x00007f8ab91f571b: add    $0x80,%rsp
  0x00007f8ab91f5722: add    $0x8,%rsp
  0x00007f8ab91f5726: popfq  
  0x00007f8ab91f5727: mov    %r13,%rsp
  0x00007f8ab91f572a: pop    %rax
  0x00007f8ab91f572b: mov    %rsp,%r13
  0x00007f8ab91f572e: sub    $0x40,%rsp
  0x00007f8ab91f5732: mov    %rax,(%rsp)
  0x00007f8ab91f5736: mov    %rsi,0x38(%rsp)
  0x00007f8ab91f573b: mov    %rdx,0x30(%rsp)
  0x00007f8ab91f5740: mov    %rcx,0x28(%rsp)
  0x00007f8ab91f5745: mov    %r8d,0x20(%rsp)
  0x00007f8ab91f574a: mov    %r9,0x18(%rsp)
  0x00007f8ab91f574f: mov    %edi,0x10(%rsp)
  0x00007f8ab91f5753: mov    0x40(%rsp),%rax
  0x00007f8ab91f5758: mov    %rax,0x8(%rsp)
  0x00007f8ab91f575d: mov    0x40(%rbx),%rcx
  0x00007f8ab91f5761: jmpq   *%rcx

Decoding RuntimeStub - new_type_array Runtime1 stub 0x00007f8ab91f5790
  0x00007f8ab91f58c0: mov    0xc(%rdx),%eax
  0x00007f8ab91f58c3: sar    $0x1e,%eax
  0x00007f8ab91f58c6: cmp    $0xffffffff,%eax
  0x00007f8ab91f58c9: je     0x00007f8ab91f59bd
  0x00007f8ab91f58cf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f58d4: sub    $0x80,%rsp
  0x00007f8ab91f58db: mov    %rax,0x78(%rsp)
  0x00007f8ab91f58e0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f58e5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f58ea: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f58ef: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f58f4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f58f9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f58fe: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5903: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5908: mov    %r10,0x28(%rsp)
  0x00007f8ab91f590d: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5912: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5917: mov    %r13,0x10(%rsp)
  0x00007f8ab91f591c: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5921: mov    %r15,(%rsp)
  0x00007f8ab91f5925: movabs $0x7f8acf15cbce,%rdi
  0x00007f8ab91f592f: movabs $0x7f8ab91f58cf,%rsi
  0x00007f8ab91f5939: mov    %rsp,%rdx
  0x00007f8ab91f593c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5940: callq  0x00007f8aceddb9fa
  0x00007f8ab91f5945: hlt    
  0x00007f8ab91f5946: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f594b: sub    $0x80,%rsp
  0x00007f8ab91f5952: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5957: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f595c: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5961: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5966: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f596b: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5970: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5975: mov    %r8,0x38(%rsp)
  0x00007f8ab91f597a: mov    %r9,0x30(%rsp)
  0x00007f8ab91f597f: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5984: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5989: mov    %r12,0x18(%rsp)
  0x00007f8ab91f598e: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5993: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5998: mov    %r15,(%rsp)
  0x00007f8ab91f599c: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab91f59a6: movabs $0x7f8ab91f5946,%rsi
  0x00007f8ab91f59b0: mov    %rsp,%rdx
  0x00007f8ab91f59b3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f59b7: callq  0x00007f8aceddb9fa
  0x00007f8ab91f59bc: hlt    
  0x00007f8ab91f59bd: cmp    $0xffffff,%ebx
  0x00007f8ab91f59c3: ja     0x00007f8ab91f5dbb
  0x00007f8ab91f59c9: mov    0x70(%r15),%rax
  0x00007f8ab91f59cd: mov    0x80(%r15),%rcx
  0x00007f8ab91f59d4: sub    %rax,%rcx
  0x00007f8ab91f59d7: shr    $0x3,%rcx
  0x00007f8ab91f59db: cmp    0x90(%r15),%rcx
  0x00007f8ab91f59e2: jle    0x00007f8ab91f5a06
  0x00007f8ab91f59e8: movabs $0x4,%rsi
  0x00007f8ab91f59f2: add    %rsi,0x90(%r15)
  0x00007f8ab91f59f9: addl   $0x1,0xb0(%r15)
  0x00007f8ab91f5a01: jmpq   0x00007f8ab91f5ca6
  0x00007f8ab91f5a06: addl   $0x1,0xa0(%r15)
  0x00007f8ab91f5a0e: add    %ecx,0xa4(%r15)
  0x00007f8ab91f5a15: test   %rax,%rax
  0x00007f8ab91f5a18: je     0x00007f8ab91f5a55
  0x00007f8ab91f5a1e: movabs $0x201,%r10
  0x00007f8ab91f5a28: mov    %r10,(%rax)
  0x00007f8ab91f5a2b: sub    $0x2,%rcx
  0x00007f8ab91f5a2f: add    $0x2,%rcx
  0x00007f8ab91f5a33: shl    %rcx
  0x00007f8ab91f5a36: mov    %ecx,0xc(%rax)
  0x00007f8ab91f5a39: mov    0x167b8518(%rip),%rcx        # 0x00007f8acf9adf58
  0x00007f8ab91f5a40: shr    $0x3,%rcx
  0x00007f8ab91f5a44: mov    %ecx,0x8(%rax)
  0x00007f8ab91f5a47: mov    %rax,%rcx
  0x00007f8ab91f5a4a: sub    0x68(%r15),%rcx
  0x00007f8ab91f5a4e: add    %rcx,0xd8(%r15)
  0x00007f8ab91f5a55: mov    0x88(%r15),%rcx
  0x00007f8ab91f5a5c: shl    $0x3,%rcx
  0x00007f8ab91f5a60: mov    0xee2eb71(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab91f5a67: lea    (%rax,%rcx,1),%rsi
  0x00007f8ab91f5a6b: cmp    %rax,%rsi
  0x00007f8ab91f5a6e: jb     0x00007f8ab91f5dbb
  0x00007f8ab91f5a74: cmp    0xee2eb35(%rip),%rsi        # 0x00007f8ac80245b0
  0x00007f8ab91f5a7b: ja     0x00007f8ab91f5dbb
  0x00007f8ab91f5a81: lock cmpxchg %rsi,0xee2eb4e(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab91f5a8a: jne    0x00007f8ab91f5a60
  0x00007f8ab91f5a8c: push   %rsi
  0x00007f8ab91f5a8d: mov    0x88(%r15),%rsi
  0x00007f8ab91f5a94: shl    $0x3,%rsi
  0x00007f8ab91f5a98: cmp    %rsi,%rcx
  0x00007f8ab91f5a9b: je     0x00007f8ab91f5b8f
  ;; assert(t1 != tlab size)
  0x00007f8ab91f5aa1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f5aa6: sub    $0x80,%rsp
  0x00007f8ab91f5aad: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5ab2: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f5ab7: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5abc: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5ac1: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f5ac6: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5acb: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5ad0: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5ad5: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5ada: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5adf: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5ae4: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5ae9: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5aee: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5af3: mov    %r15,(%rsp)
  0x00007f8ab91f5af7: movabs $0x7f8acf2f1619,%rdi
  0x00007f8ab91f5b01: movabs $0x7f8ab91f5aa1,%rsi
  0x00007f8ab91f5b0b: mov    %rsp,%rdx
  0x00007f8ab91f5b0e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5b12: callq  0x00007f8aceddb9fa
  0x00007f8ab91f5b17: hlt    
  0x00007f8ab91f5b18: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f5b1d: sub    $0x80,%rsp
  0x00007f8ab91f5b24: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5b29: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f5b2e: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5b33: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5b38: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f5b3d: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5b42: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5b47: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5b4c: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5b51: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5b56: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5b5b: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5b60: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5b65: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5b6a: mov    %r15,(%rsp)
  0x00007f8ab91f5b6e: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab91f5b78: movabs $0x7f8ab91f5b18,%rsi
  0x00007f8ab91f5b82: mov    %rsp,%rdx
  0x00007f8ab91f5b85: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5b89: callq  0x00007f8aceddb9fa
  0x00007f8ab91f5b8e: hlt    
  0x00007f8ab91f5b8f: pop    %rsi
  0x00007f8ab91f5b90: mov    %rax,0x68(%r15)
  0x00007f8ab91f5b94: mov    %rax,0x70(%r15)
  0x00007f8ab91f5b98: add    %rcx,%rax
  0x00007f8ab91f5b9b: sub    $0x10,%rax
  0x00007f8ab91f5b9f: mov    %rax,0x80(%r15)
  0x00007f8ab91f5ba6: jmpq   0x00007f8ab91f5bab
  0x00007f8ab91f5bab: mov    0xc(%rdx),%ecx
  0x00007f8ab91f5bae: mov    %ebx,%esi
  0x00007f8ab91f5bb0: shl    %cl,%rsi
  0x00007f8ab91f5bb3: shr    $0x10,%rcx
  0x00007f8ab91f5bb7: and    $0xff,%rcx
  0x00007f8ab91f5bbe: add    %rcx,%rsi
  0x00007f8ab91f5bc1: add    $0x7,%rsi
  0x00007f8ab91f5bc5: and    $0xfffffffffffffff8,%rsi
  0x00007f8ab91f5bc9: mov    0x70(%r15),%rax
  0x00007f8ab91f5bcd: lea    (%rax,%rsi,1),%rdi
  0x00007f8ab91f5bd1: cmp    0x80(%r15),%rdi
  0x00007f8ab91f5bd8: ja     0x00007f8ab91f5dbb
  0x00007f8ab91f5bde: mov    %rdi,0x70(%r15)
  0x00007f8ab91f5be2: movq   $0x1,(%rax)
  0x00007f8ab91f5be9: mov    %rdx,%rcx
  0x00007f8ab91f5bec: shr    $0x3,%rcx
  0x00007f8ab91f5bf0: mov    %ecx,0x8(%rax)
  0x00007f8ab91f5bf3: mov    %ebx,0xc(%rax)
  0x00007f8ab91f5bf6: mov    0xe(%rdx),%cl
  0x00007f8ab91f5bf9: and    $0xff,%rcx
  0x00007f8ab91f5c00: sub    %rcx,%rsi
  0x00007f8ab91f5c03: add    %rax,%rcx
  0x00007f8ab91f5c06: sub    $0x0,%rsi
  0x00007f8ab91f5c0a: je     0x00007f8ab91f5ca5
  0x00007f8ab91f5c10: test   $0x7,%rsi
  0x00007f8ab91f5c17: je     0x00007f8ab91f5c94
  0x00007f8ab91f5c1d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f5c22: sub    $0x80,%rsp
  0x00007f8ab91f5c29: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5c2e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f5c33: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5c38: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5c3d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f5c42: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5c47: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5c4c: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5c51: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5c56: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5c5b: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5c60: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5c65: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5c6a: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5c6f: mov    %r15,(%rsp)
  0x00007f8ab91f5c73: movabs $0x7f8acf153568,%rdi
  0x00007f8ab91f5c7d: movabs $0x7f8ab91f5c1d,%rsi
  0x00007f8ab91f5c87: mov    %rsp,%rdx
  0x00007f8ab91f5c8a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5c8e: callq  0x00007f8aceddb9fa
  0x00007f8ab91f5c93: hlt    
  0x00007f8ab91f5c94: xor    %rdi,%rdi
  0x00007f8ab91f5c97: shr    $0x3,%rsi
  0x00007f8ab91f5c9b: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f8ab91f5ca0: dec    %rsi
  0x00007f8ab91f5ca3: jne    0x00007f8ab91f5c9b
  0x00007f8ab91f5ca5: retq   
  0x00007f8ab91f5ca6: mov    0xc(%rdx),%ecx
  0x00007f8ab91f5ca9: mov    %ebx,%esi
  0x00007f8ab91f5cab: shl    %cl,%rsi
  0x00007f8ab91f5cae: shr    $0x10,%rcx
  0x00007f8ab91f5cb2: and    $0xff,%rcx
  0x00007f8ab91f5cb9: add    %rcx,%rsi
  0x00007f8ab91f5cbc: add    $0x7,%rsi
  0x00007f8ab91f5cc0: and    $0xfffffffffffffff8,%rsi
  0x00007f8ab91f5cc4: mov    0xee2e90d(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab91f5ccb: lea    (%rax,%rsi,1),%rcx
  0x00007f8ab91f5ccf: cmp    %rax,%rcx
  0x00007f8ab91f5cd2: jb     0x00007f8ab91f5dbb
  0x00007f8ab91f5cd8: cmp    0xee2e8d1(%rip),%rcx        # 0x00007f8ac80245b0
  0x00007f8ab91f5cdf: ja     0x00007f8ab91f5dbb
  0x00007f8ab91f5ce5: lock cmpxchg %rcx,0xee2e8ea(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab91f5cee: jne    0x00007f8ab91f5cc4
  0x00007f8ab91f5cf0: add    %rsi,0xd8(%r15)
  0x00007f8ab91f5cf7: movq   $0x1,(%rax)
  0x00007f8ab91f5cfe: mov    %rdx,%rcx
  0x00007f8ab91f5d01: shr    $0x3,%rcx
  0x00007f8ab91f5d05: mov    %ecx,0x8(%rax)
  0x00007f8ab91f5d08: mov    %ebx,0xc(%rax)
  0x00007f8ab91f5d0b: mov    0xe(%rdx),%cl
  0x00007f8ab91f5d0e: and    $0xff,%rcx
  0x00007f8ab91f5d15: sub    %rcx,%rsi
  0x00007f8ab91f5d18: add    %rax,%rcx
  0x00007f8ab91f5d1b: sub    $0x0,%rsi
  0x00007f8ab91f5d1f: je     0x00007f8ab91f5dba
  0x00007f8ab91f5d25: test   $0x7,%rsi
  0x00007f8ab91f5d2c: je     0x00007f8ab91f5da9
  0x00007f8ab91f5d32: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f5d37: sub    $0x80,%rsp
  0x00007f8ab91f5d3e: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5d43: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f5d48: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5d4d: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5d52: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f5d57: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5d5c: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5d61: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5d66: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5d6b: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5d70: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5d75: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5d7a: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5d7f: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5d84: mov    %r15,(%rsp)
  0x00007f8ab91f5d88: movabs $0x7f8acf153568,%rdi
  0x00007f8ab91f5d92: movabs $0x7f8ab91f5d32,%rsi
  0x00007f8ab91f5d9c: mov    %rsp,%rdx
  0x00007f8ab91f5d9f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5da3: callq  0x00007f8aceddb9fa
  0x00007f8ab91f5da8: hlt    
  0x00007f8ab91f5da9: xor    %rdi,%rdi
  0x00007f8ab91f5dac: shr    $0x3,%rsi
  0x00007f8ab91f5db0: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f8ab91f5db5: dec    %rsi
  0x00007f8ab91f5db8: jne    0x00007f8ab91f5db0
  0x00007f8ab91f5dba: retq   
  0x00007f8ab91f5dbb: push   %rbp
  0x00007f8ab91f5dbc: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f5dbf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f5dc4: sub    $0x80,%rsp
  0x00007f8ab91f5dcb: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5dd0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f5dd5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5dda: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5ddf: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f5de4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5de9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5dee: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5df3: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5df8: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5dfd: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5e02: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5e07: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5e0c: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5e11: mov    %r15,(%rsp)
  0x00007f8ab91f5e15: sub    $0x150,%rsp
  0x00007f8ab91f5e1c: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f5e28: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f5e2e: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f5e34: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f5e3a: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f5e40: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f5e46: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f5e4c: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f5e52: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f5e58: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f5e5e: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f5e64: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f5e6a: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f5e70: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f5e76: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f5e7c: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f5e82: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f5e8b: mov    %rdx,%rsi
  0x00007f8ab91f5e8e: mov    %rbx,%rdx
  0x00007f8ab91f5e91: mov    %r15,%rdi
  0x00007f8ab91f5e94: mov    %rbp,0x210(%r15)
  0x00007f8ab91f5e9b: mov    %rsp,0x200(%r15)
  0x00007f8ab91f5ea2: callq  0x00007f8ace8ba344
  0x00007f8ab91f5ea7: push   %rax
  0x00007f8ab91f5ea8: push   %rdi
  0x00007f8ab91f5ea9: push   %rsi
  0x00007f8ab91f5eaa: push   %rdx
  0x00007f8ab91f5eab: push   %rcx
  0x00007f8ab91f5eac: push   %r8
  0x00007f8ab91f5eae: push   %r9
  0x00007f8ab91f5eb0: push   %r10
  0x00007f8ab91f5eb2: mov    %rsp,%r10
  0x00007f8ab91f5eb5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5eb9: push   %r10
  0x00007f8ab91f5ebb: push   %r11
  0x00007f8ab91f5ebd: mov    $0x1,%edi
  0x00007f8ab91f5ec2: callq  0x00007f8acf9c32d0
  0x00007f8ab91f5ec7: pop    %r11
  0x00007f8ab91f5ec9: pop    %rsp
  0x00007f8ab91f5eca: pop    %r10
  0x00007f8ab91f5ecc: pop    %r9
  0x00007f8ab91f5ece: pop    %r8
  0x00007f8ab91f5ed0: pop    %rcx
  0x00007f8ab91f5ed1: pop    %rdx
  0x00007f8ab91f5ed2: pop    %rsi
  0x00007f8ab91f5ed3: pop    %rdi
  0x00007f8ab91f5ed4: cmp    %rax,%r15
  0x00007f8ab91f5ed7: je     0x00007f8ab91f5f59
  0x00007f8ab91f5edd: callq  0x00007f8aceec2a22
  0x00007f8ab91f5ee2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f5ee7: sub    $0x80,%rsp
  0x00007f8ab91f5eee: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5ef3: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f5ef8: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5efd: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5f02: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f5f07: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5f0c: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5f11: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5f16: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5f1b: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5f20: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5f25: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5f2a: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5f2f: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5f34: mov    %r15,(%rsp)
  0x00007f8ab91f5f38: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f5f42: movabs $0x7f8ab91f5ee2,%rsi
  0x00007f8ab91f5f4c: mov    %rsp,%rdx
  0x00007f8ab91f5f4f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5f53: callq  0x00007f8aceddb9fa
  0x00007f8ab91f5f58: hlt    
  0x00007f8ab91f5f59: pop    %rax
  0x00007f8ab91f5f5a: movabs $0x0,%r10
  0x00007f8ab91f5f64: mov    %r10,0x200(%r15)
  0x00007f8ab91f5f6b: movabs $0x0,%r10
  0x00007f8ab91f5f75: mov    %r10,0x210(%r15)
  0x00007f8ab91f5f7c: movabs $0x0,%r10
  0x00007f8ab91f5f86: mov    %r10,0x208(%r15)
  0x00007f8ab91f5f8d: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f5f95: je     0x00007f8ab91f5fb5
  0x00007f8ab91f5f9b: mov    0x8(%r15),%rax
  0x00007f8ab91f5f9f: movabs $0x0,%r10
  0x00007f8ab91f5fa9: mov    %r10,0x260(%r15)
  0x00007f8ab91f5fb0: jmpq   0x00007f8ab9167c00
  0x00007f8ab91f5fb5: mov    0x260(%r15),%rax
  0x00007f8ab91f5fbc: movabs $0x0,%r10
  0x00007f8ab91f5fc6: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f8ab91f5fcd: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91f5fd3: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91f5fd9: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91f5fdf: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91f5fe5: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91f5feb: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91f5ff1: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91f5ff7: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91f5ffd: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91f6003: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91f6009: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91f600f: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91f6015: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91f601b: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91f6021: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91f6027: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91f6030: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f603c: je     0x00007f8ab91f60b9
  0x00007f8ab91f6042: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f6047: sub    $0x80,%rsp
  0x00007f8ab91f604e: mov    %rax,0x78(%rsp)
  0x00007f8ab91f6053: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f6058: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f605d: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f6062: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f6067: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f606c: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f6071: mov    %r8,0x38(%rsp)
  0x00007f8ab91f6076: mov    %r9,0x30(%rsp)
  0x00007f8ab91f607b: mov    %r10,0x28(%rsp)
  0x00007f8ab91f6080: mov    %r11,0x20(%rsp)
  0x00007f8ab91f6085: mov    %r12,0x18(%rsp)
  0x00007f8ab91f608a: mov    %r13,0x10(%rsp)
  0x00007f8ab91f608f: mov    %r14,0x8(%rsp)
  0x00007f8ab91f6094: mov    %r15,(%rsp)
  0x00007f8ab91f6098: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91f60a2: movabs $0x7f8ab91f6042,%rsi
  0x00007f8ab91f60ac: mov    %rsp,%rdx
  0x00007f8ab91f60af: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f60b3: callq  0x00007f8aceddb9fa
  0x00007f8ab91f60b8: hlt    
  0x00007f8ab91f60b9: add    $0x150,%rsp
  0x00007f8ab91f60c0: mov    (%rsp),%r15
  0x00007f8ab91f60c4: mov    0x8(%rsp),%r14
  0x00007f8ab91f60c9: mov    0x10(%rsp),%r13
  0x00007f8ab91f60ce: mov    0x18(%rsp),%r12
  0x00007f8ab91f60d3: mov    0x20(%rsp),%r11
  0x00007f8ab91f60d8: mov    0x28(%rsp),%r10
  0x00007f8ab91f60dd: mov    0x30(%rsp),%r9
  0x00007f8ab91f60e2: mov    0x38(%rsp),%r8
  0x00007f8ab91f60e7: mov    0x40(%rsp),%rdi
  0x00007f8ab91f60ec: mov    0x48(%rsp),%rsi
  0x00007f8ab91f60f1: mov    0x50(%rsp),%rbp
  0x00007f8ab91f60f6: mov    0x60(%rsp),%rbx
  0x00007f8ab91f60fb: mov    0x68(%rsp),%rdx
  0x00007f8ab91f6100: mov    0x70(%rsp),%rcx
  0x00007f8ab91f6105: add    $0x80,%rsp
  0x00007f8ab91f610c: leaveq 
  0x00007f8ab91f610d: retq   
  0x00007f8ab91f610e: nop
  0x00007f8ab91f610f: nop

MethodHandle::interpreter_entry::_invokeGeneric [0x00007f8ab91faf60, 0x00007f8ab91faf61[ (1 bytes)
  0x00007f8ab91faf60: hlt    

MethodHandle::interpreter_entry::_invokeBasic [0x00007f8ab91faf61, 0x00007f8ab91fb1c6[ (613 bytes)
  0x00007f8ab91faf61: nop
  0x00007f8ab91faf62: nop
  0x00007f8ab91faf63: nop
  0x00007f8ab91faf64: nop
  0x00007f8ab91faf65: nop
  0x00007f8ab91faf66: nop
  0x00007f8ab91faf67: nop
  0x00007f8ab91faf68: nop
  0x00007f8ab91faf69: nop
  0x00007f8ab91faf6a: nop
  0x00007f8ab91faf6b: nop
  0x00007f8ab91faf6c: nop
  0x00007f8ab91faf6d: nop
  0x00007f8ab91faf6e: nop
  0x00007f8ab91faf6f: nop
  0x00007f8ab91faf70: nop
  0x00007f8ab91faf71: nop
  0x00007f8ab91faf72: nop
  0x00007f8ab91faf73: nop
  0x00007f8ab91faf74: nop
  0x00007f8ab91faf75: nop
  0x00007f8ab91faf76: nop
  0x00007f8ab91faf77: nop
  0x00007f8ab91faf78: nop
  0x00007f8ab91faf79: nop
  0x00007f8ab91faf7a: nop
  0x00007f8ab91faf7b: nop
  0x00007f8ab91faf7c: nop
  0x00007f8ab91faf7d: nop
  0x00007f8ab91faf7e: nop
  0x00007f8ab91faf7f: nop
  ;; verify_intrinsic_id {
  0x00007f8ab91faf80: cmpb   $0xb6,0x32(%rbx)
  0x00007f8ab91faf84: je     0x00007f8ab91fb001
Decoding RuntimeStub - new_object_array Runtime1 stub 0x00007f8ab9227690
  0x00007f8ab92277c0: mov    0xc(%rdx),%eax
  0x00007f8ab92277c3: sar    $0x1e,%eax
  0x00007f8ab92277c6: cmp    $0xfffffffe,%eax
  0x00007f8ab92277c9: je     0x00007f8ab92278bd
  0x00007f8ab92277cf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92277d4: sub    $0x80,%rsp
  0x00007f8ab92277db: mov    %rax,0x78(%rsp)
  0x00007f8ab92277e0: mov    %rcx,0x70(%rsp)
  0x00007f8ab92277e5: mov    %rdx,0x68(%rsp)
  0x00007f8ab92277ea: mov    %rbx,0x60(%rsp)
  0x00007f8ab92277ef: mov    %rbp,0x50(%rsp)
  0x00007f8ab92277f4: mov    %rsi,0x48(%rsp)
  0x00007f8ab92277f9: mov    %rdi,0x40(%rsp)
  0x00007f8ab92277fe: mov    %r8,0x38(%rsp)
  0x00007f8ab9227803: mov    %r9,0x30(%rsp)
  0x00007f8ab9227808: mov    %r10,0x28(%rsp)
  0x00007f8ab922780d: mov    %r11,0x20(%rsp)
  0x00007f8ab9227812: mov    %r12,0x18(%rsp)
  0x00007f8ab9227817: mov    %r13,0x10(%rsp)
  0x00007f8ab922781c: mov    %r14,0x8(%rsp)
  0x00007f8ab9227821: mov    %r15,(%rsp)
  0x00007f8ab9227825: movabs $0x7f8acf15cbce,%rdi
  0x00007f8ab922782f: movabs $0x7f8ab92277cf,%rsi
  0x00007f8ab9227839: mov    %rsp,%rdx
  0x00007f8ab922783c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227840: callq  0x00007f8aceddb9fa
  0x00007f8ab9227845: hlt    
  0x00007f8ab9227846: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922784b: sub    $0x80,%rsp
  0x00007f8ab9227852: mov    %rax,0x78(%rsp)
  0x00007f8ab9227857: mov    %rcx,0x70(%rsp)
  0x00007f8ab922785c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9227861: mov    %rbx,0x60(%rsp)
  0x00007f8ab9227866: mov    %rbp,0x50(%rsp)
  0x00007f8ab922786b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9227870: mov    %rdi,0x40(%rsp)
  0x00007f8ab9227875: mov    %r8,0x38(%rsp)
  0x00007f8ab922787a: mov    %r9,0x30(%rsp)
  0x00007f8ab922787f: mov    %r10,0x28(%rsp)
  0x00007f8ab9227884: mov    %r11,0x20(%rsp)
  0x00007f8ab9227889: mov    %r12,0x18(%rsp)
  0x00007f8ab922788e: mov    %r13,0x10(%rsp)
  0x00007f8ab9227893: mov    %r14,0x8(%rsp)
  0x00007f8ab9227898: mov    %r15,(%rsp)
  0x00007f8ab922789c: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab92278a6: movabs $0x7f8ab9227846,%rsi
  0x00007f8ab92278b0: mov    %rsp,%rdx
  0x00007f8ab92278b3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92278b7: callq  0x00007f8aceddb9fa
  0x00007f8ab92278bc: hlt    
  0x00007f8ab92278bd: cmp    $0xffffff,%ebx
  0x00007f8ab92278c3: ja     0x00007f8ab9227cbb
  0x00007f8ab92278c9: mov    0x70(%r15),%rax
  0x00007f8ab92278cd: mov    0x80(%r15),%rcx
  0x00007f8ab92278d4: sub    %rax,%rcx
  0x00007f8ab92278d7: shr    $0x3,%rcx
  0x00007f8ab92278db: cmp    0x90(%r15),%rcx
  0x00007f8ab92278e2: jle    0x00007f8ab9227906
  0x00007f8ab92278e8: movabs $0x4,%rsi
  0x00007f8ab92278f2: add    %rsi,0x90(%r15)
  0x00007f8ab92278f9: addl   $0x1,0xb0(%r15)
  0x00007f8ab9227901: jmpq   0x00007f8ab9227ba6
  0x00007f8ab9227906: addl   $0x1,0xa0(%r15)
  0x00007f8ab922790e: add    %ecx,0xa4(%r15)
  0x00007f8ab9227915: test   %rax,%rax
  0x00007f8ab9227918: je     0x00007f8ab9227955
  0x00007f8ab922791e: movabs $0x201,%r10
  0x00007f8ab9227928: mov    %r10,(%rax)
  0x00007f8ab922792b: sub    $0x2,%rcx
  0x00007f8ab922792f: add    $0x2,%rcx
  0x00007f8ab9227933: shl    %rcx
  0x00007f8ab9227936: mov    %ecx,0xc(%rax)
  0x00007f8ab9227939: mov    0x16786618(%rip),%rcx        # 0x00007f8acf9adf58
  0x00007f8ab9227940: shr    $0x3,%rcx
  0x00007f8ab9227944: mov    %ecx,0x8(%rax)
  0x00007f8ab9227947: mov    %rax,%rcx
  0x00007f8ab922794a: sub    0x68(%r15),%rcx
  0x00007f8ab922794e: add    %rcx,0xd8(%r15)
  0x00007f8ab9227955: mov    0x88(%r15),%rcx
  0x00007f8ab922795c: shl    $0x3,%rcx
  0x00007f8ab9227960: mov    0xedfcc71(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab9227967: lea    (%rax,%rcx,1),%rsi
  0x00007f8ab922796b: cmp    %rax,%rsi
  0x00007f8ab922796e: jb     0x00007f8ab9227cbb
  0x00007f8ab9227974: cmp    0xedfcc35(%rip),%rsi        # 0x00007f8ac80245b0
  0x00007f8ab922797b: ja     0x00007f8ab9227cbb
  0x00007f8ab9227981: lock cmpxchg %rsi,0xedfcc4e(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab922798a: jne    0x00007f8ab9227960
  0x00007f8ab922798c: push   %rsi
  0x00007f8ab922798d: mov    0x88(%r15),%rsi
  0x00007f8ab9227994: shl    $0x3,%rsi
  0x00007f8ab9227998: cmp    %rsi,%rcx
  0x00007f8ab922799b: je     0x00007f8ab9227a8f
  ;; assert(t1 != tlab size)
  0x00007f8ab92279a1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92279a6: sub    $0x80,%rsp
  0x00007f8ab92279ad: mov    %rax,0x78(%rsp)
  0x00007f8ab92279b2: mov    %rcx,0x70(%rsp)
  0x00007f8ab92279b7: mov    %rdx,0x68(%rsp)
  0x00007f8ab92279bc: mov    %rbx,0x60(%rsp)
  0x00007f8ab92279c1: mov    %rbp,0x50(%rsp)
  0x00007f8ab92279c6: mov    %rsi,0x48(%rsp)
  0x00007f8ab92279cb: mov    %rdi,0x40(%rsp)
  0x00007f8ab92279d0: mov    %r8,0x38(%rsp)
  0x00007f8ab92279d5: mov    %r9,0x30(%rsp)
  0x00007f8ab92279da: mov    %r10,0x28(%rsp)
  0x00007f8ab92279df: mov    %r11,0x20(%rsp)
  0x00007f8ab92279e4: mov    %r12,0x18(%rsp)
  0x00007f8ab92279e9: mov    %r13,0x10(%rsp)
  0x00007f8ab92279ee: mov    %r14,0x8(%rsp)
  0x00007f8ab92279f3: mov    %r15,(%rsp)
  0x00007f8ab92279f7: movabs $0x7f8acf2f1619,%rdi
  0x00007f8ab9227a01: movabs $0x7f8ab92279a1,%rsi
  0x00007f8ab9227a0b: mov    %rsp,%rdx
  0x00007f8ab9227a0e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227a12: callq  0x00007f8aceddb9fa
  0x00007f8ab9227a17: hlt    
  0x00007f8ab9227a18: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9227a1d: sub    $0x80,%rsp
  0x00007f8ab9227a24: mov    %rax,0x78(%rsp)
  0x00007f8ab9227a29: mov    %rcx,0x70(%rsp)
  0x00007f8ab9227a2e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9227a33: mov    %rbx,0x60(%rsp)
  0x00007f8ab9227a38: mov    %rbp,0x50(%rsp)
  0x00007f8ab9227a3d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9227a42: mov    %rdi,0x40(%rsp)
  0x00007f8ab9227a47: mov    %r8,0x38(%rsp)
  0x00007f8ab9227a4c: mov    %r9,0x30(%rsp)
  0x00007f8ab9227a51: mov    %r10,0x28(%rsp)
  0x00007f8ab9227a56: mov    %r11,0x20(%rsp)
  0x00007f8ab9227a5b: mov    %r12,0x18(%rsp)
  0x00007f8ab9227a60: mov    %r13,0x10(%rsp)
  0x00007f8ab9227a65: mov    %r14,0x8(%rsp)
  0x00007f8ab9227a6a: mov    %r15,(%rsp)
  0x00007f8ab9227a6e: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab9227a78: movabs $0x7f8ab9227a18,%rsi
  0x00007f8ab9227a82: mov    %rsp,%rdx
  0x00007f8ab9227a85: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227a89: callq  0x00007f8aceddb9fa
  0x00007f8ab9227a8e: hlt    
  0x00007f8ab9227a8f: pop    %rsi
  0x00007f8ab9227a90: mov    %rax,0x68(%r15)
  0x00007f8ab9227a94: mov    %rax,0x70(%r15)
  0x00007f8ab9227a98: add    %rcx,%rax
  0x00007f8ab9227a9b: sub    $0x10,%rax
  0x00007f8ab9227a9f: mov    %rax,0x80(%r15)
  0x00007f8ab9227aa6: jmpq   0x00007f8ab9227aab
  0x00007f8ab9227aab: mov    0xc(%rdx),%ecx
  0x00007f8ab9227aae: mov    %ebx,%esi
  0x00007f8ab9227ab0: shl    %cl,%rsi
  0x00007f8ab9227ab3: shr    $0x10,%rcx
  0x00007f8ab9227ab7: and    $0xff,%rcx
  0x00007f8ab9227abe: add    %rcx,%rsi
  0x00007f8ab9227ac1: add    $0x7,%rsi
  0x00007f8ab9227ac5: and    $0xfffffffffffffff8,%rsi
  0x00007f8ab9227ac9: mov    0x70(%r15),%rax
  0x00007f8ab9227acd: lea    (%rax,%rsi,1),%rdi
  0x00007f8ab9227ad1: cmp    0x80(%r15),%rdi
  0x00007f8ab9227ad8: ja     0x00007f8ab9227cbb
  0x00007f8ab9227ade: mov    %rdi,0x70(%r15)
  0x00007f8ab9227ae2: movq   $0x1,(%rax)
  0x00007f8ab9227ae9: mov    %rdx,%rcx
  0x00007f8ab9227aec: shr    $0x3,%rcx
  0x00007f8ab9227af0: mov    %ecx,0x8(%rax)
  0x00007f8ab9227af3: mov    %ebx,0xc(%rax)
  0x00007f8ab9227af6: mov    0xe(%rdx),%cl
  0x00007f8ab9227af9: and    $0xff,%rcx
  0x00007f8ab9227b00: sub    %rcx,%rsi
  0x00007f8ab9227b03: add    %rax,%rcx
  0x00007f8ab9227b06: sub    $0x0,%rsi
  0x00007f8ab9227b0a: je     0x00007f8ab9227ba5
  0x00007f8ab9227b10: test   $0x7,%rsi
  0x00007f8ab9227b17: je     0x00007f8ab9227b94
  0x00007f8ab9227b1d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9227b22: sub    $0x80,%rsp
  0x00007f8ab9227b29: mov    %rax,0x78(%rsp)
  0x00007f8ab9227b2e: mov    %rcx,0x70(%rsp)
  0x00007f8ab9227b33: mov    %rdx,0x68(%rsp)
  0x00007f8ab9227b38: mov    %rbx,0x60(%rsp)
  0x00007f8ab9227b3d: mov    %rbp,0x50(%rsp)
  0x00007f8ab9227b42: mov    %rsi,0x48(%rsp)
  0x00007f8ab9227b47: mov    %rdi,0x40(%rsp)
  0x00007f8ab9227b4c: mov    %r8,0x38(%rsp)
  0x00007f8ab9227b51: mov    %r9,0x30(%rsp)
  0x00007f8ab9227b56: mov    %r10,0x28(%rsp)
  0x00007f8ab9227b5b: mov    %r11,0x20(%rsp)
  0x00007f8ab9227b60: mov    %r12,0x18(%rsp)
  0x00007f8ab9227b65: mov    %r13,0x10(%rsp)
  0x00007f8ab9227b6a: mov    %r14,0x8(%rsp)
  0x00007f8ab9227b6f: mov    %r15,(%rsp)
  0x00007f8ab9227b73: movabs $0x7f8acf153568,%rdi
  0x00007f8ab9227b7d: movabs $0x7f8ab9227b1d,%rsi
  0x00007f8ab9227b87: mov    %rsp,%rdx
  0x00007f8ab9227b8a: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227b8e: callq  0x00007f8aceddb9fa
  0x00007f8ab9227b93: hlt    
  0x00007f8ab9227b94: xor    %rdi,%rdi
  0x00007f8ab9227b97: shr    $0x3,%rsi
  0x00007f8ab9227b9b: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f8ab9227ba0: dec    %rsi
  0x00007f8ab9227ba3: jne    0x00007f8ab9227b9b
  0x00007f8ab9227ba5: retq   
  0x00007f8ab9227ba6: mov    0xc(%rdx),%ecx
  0x00007f8ab9227ba9: mov    %ebx,%esi
  0x00007f8ab9227bab: shl    %cl,%rsi
  0x00007f8ab9227bae: shr    $0x10,%rcx
  0x00007f8ab9227bb2: and    $0xff,%rcx
  0x00007f8ab9227bb9: add    %rcx,%rsi
  0x00007f8ab9227bbc: add    $0x7,%rsi
  0x00007f8ab9227bc0: and    $0xfffffffffffffff8,%rsi
  0x00007f8ab9227bc4: mov    0xedfca0d(%rip),%rax        # 0x00007f8ac80245d8
  0x00007f8ab9227bcb: lea    (%rax,%rsi,1),%rcx
  0x00007f8ab9227bcf: cmp    %rax,%rcx
  0x00007f8ab9227bd2: jb     0x00007f8ab9227cbb
  0x00007f8ab9227bd8: cmp    0xedfc9d1(%rip),%rcx        # 0x00007f8ac80245b0
  0x00007f8ab9227bdf: ja     0x00007f8ab9227cbb
  0x00007f8ab9227be5: lock cmpxchg %rcx,0xedfc9ea(%rip)        # 0x00007f8ac80245d8
  0x00007f8ab9227bee: jne    0x00007f8ab9227bc4
  0x00007f8ab9227bf0: add    %rsi,0xd8(%r15)
  0x00007f8ab9227bf7: movq   $0x1,(%rax)
  0x00007f8ab9227bfe: mov    %rdx,%rcx
  0x00007f8ab9227c01: shr    $0x3,%rcx
  0x00007f8ab9227c05: mov    %ecx,0x8(%rax)
  0x00007f8ab9227c08: mov    %ebx,0xc(%rax)
  0x00007f8ab9227c0b: mov    0xe(%rdx),%cl
  0x00007f8ab9227c0e: and    $0xff,%rcx
  0x00007f8ab9227c15: sub    %rcx,%rsi
  0x00007f8ab9227c18: add    %rax,%rcx
  0x00007f8ab9227c1b: sub    $0x0,%rsi
  0x00007f8ab9227c1f: je     0x00007f8ab9227cba
  0x00007f8ab9227c25: test   $0x7,%rsi
  0x00007f8ab9227c2c: je     0x00007f8ab9227ca9
  0x00007f8ab9227c32: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9227c37: sub    $0x80,%rsp
  0x00007f8ab9227c3e: mov    %rax,0x78(%rsp)
  0x00007f8ab9227c43: mov    %rcx,0x70(%rsp)
  0x00007f8ab9227c48: mov    %rdx,0x68(%rsp)
  0x00007f8ab9227c4d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9227c52: mov    %rbp,0x50(%rsp)
  0x00007f8ab9227c57: mov    %rsi,0x48(%rsp)
  0x00007f8ab9227c5c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9227c61: mov    %r8,0x38(%rsp)
  0x00007f8ab9227c66: mov    %r9,0x30(%rsp)
  0x00007f8ab9227c6b: mov    %r10,0x28(%rsp)
  0x00007f8ab9227c70: mov    %r11,0x20(%rsp)
  0x00007f8ab9227c75: mov    %r12,0x18(%rsp)
  0x00007f8ab9227c7a: mov    %r13,0x10(%rsp)
  0x00007f8ab9227c7f: mov    %r14,0x8(%rsp)
  0x00007f8ab9227c84: mov    %r15,(%rsp)
  0x00007f8ab9227c88: movabs $0x7f8acf153568,%rdi
  0x00007f8ab9227c92: movabs $0x7f8ab9227c32,%rsi
  0x00007f8ab9227c9c: mov    %rsp,%rdx
  0x00007f8ab9227c9f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227ca3: callq  0x00007f8aceddb9fa
  0x00007f8ab9227ca8: hlt    
  0x00007f8ab9227ca9: xor    %rdi,%rdi
  0x00007f8ab9227cac: shr    $0x3,%rsi
  0x00007f8ab9227cb0: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f8ab9227cb5: dec    %rsi
  0x00007f8ab9227cb8: jne    0x00007f8ab9227cb0
  0x00007f8ab9227cba: retq   
  0x00007f8ab9227cbb: push   %rbp
  0x00007f8ab9227cbc: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab9227cbf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9227cc4: sub    $0x80,%rsp
  0x00007f8ab9227ccb: mov    %rax,0x78(%rsp)
  0x00007f8ab9227cd0: mov    %rcx,0x70(%rsp)
  0x00007f8ab9227cd5: mov    %rdx,0x68(%rsp)
  0x00007f8ab9227cda: mov    %rbx,0x60(%rsp)
  0x00007f8ab9227cdf: mov    %rbp,0x50(%rsp)
  0x00007f8ab9227ce4: mov    %rsi,0x48(%rsp)
  0x00007f8ab9227ce9: mov    %rdi,0x40(%rsp)
  0x00007f8ab9227cee: mov    %r8,0x38(%rsp)
  0x00007f8ab9227cf3: mov    %r9,0x30(%rsp)
  0x00007f8ab9227cf8: mov    %r10,0x28(%rsp)
  0x00007f8ab9227cfd: mov    %r11,0x20(%rsp)
  0x00007f8ab9227d02: mov    %r12,0x18(%rsp)
  0x00007f8ab9227d07: mov    %r13,0x10(%rsp)
  0x00007f8ab9227d0c: mov    %r14,0x8(%rsp)
  0x00007f8ab9227d11: mov    %r15,(%rsp)
  0x00007f8ab9227d15: sub    $0x150,%rsp
  0x00007f8ab9227d1c: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9227d28: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9227d2e: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9227d34: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab9227d3a: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9227d40: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab9227d46: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9227d4c: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9227d52: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab9227d58: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9227d5e: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9227d64: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab9227d6a: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9227d70: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab9227d76: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9227d7c: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9227d82: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9227d8b: mov    %rdx,%rsi
  0x00007f8ab9227d8e: mov    %rbx,%rdx
  0x00007f8ab9227d91: mov    %r15,%rdi
  0x00007f8ab9227d94: mov    %rbp,0x210(%r15)
  0x00007f8ab9227d9b: mov    %rsp,0x200(%r15)
  0x00007f8ab9227da2: callq  0x00007f8ace8ba57e
  0x00007f8ab9227da7: push   %rax
  0x00007f8ab9227da8: push   %rdi
  0x00007f8ab9227da9: push   %rsi
  0x00007f8ab9227daa: push   %rdx
  0x00007f8ab9227dab: push   %rcx
  0x00007f8ab9227dac: push   %r8
  0x00007f8ab9227dae: push   %r9
  0x00007f8ab9227db0: push   %r10
  0x00007f8ab9227db2: mov    %rsp,%r10
  0x00007f8ab9227db5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227db9: push   %r10
  0x00007f8ab9227dbb: push   %r11
  0x00007f8ab9227dbd: mov    $0x1,%edi
  0x00007f8ab9227dc2: callq  0x00007f8acf9c32d0
  0x00007f8ab9227dc7: pop    %r11
  0x00007f8ab9227dc9: pop    %rsp
  0x00007f8ab9227dca: pop    %r10
  0x00007f8ab9227dcc: pop    %r9
  0x00007f8ab9227dce: pop    %r8
  0x00007f8ab9227dd0: pop    %rcx
  0x00007f8ab9227dd1: pop    %rdx
  0x00007f8ab9227dd2: pop    %rsi
  0x00007f8ab9227dd3: pop    %rdi
  0x00007f8ab9227dd4: cmp    %rax,%r15
  0x00007f8ab9227dd7: je     0x00007f8ab9227e59
  0x00007f8ab9227ddd: callq  0x00007f8aceec2a22
  0x00007f8ab9227de2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9227de7: sub    $0x80,%rsp
  0x00007f8ab9227dee: mov    %rax,0x78(%rsp)
  0x00007f8ab9227df3: mov    %rcx,0x70(%rsp)
  0x00007f8ab9227df8: mov    %rdx,0x68(%rsp)
  0x00007f8ab9227dfd: mov    %rbx,0x60(%rsp)
  0x00007f8ab9227e02: mov    %rbp,0x50(%rsp)
  0x00007f8ab9227e07: mov    %rsi,0x48(%rsp)
  0x00007f8ab9227e0c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9227e11: mov    %r8,0x38(%rsp)
  0x00007f8ab9227e16: mov    %r9,0x30(%rsp)
  0x00007f8ab9227e1b: mov    %r10,0x28(%rsp)
  0x00007f8ab9227e20: mov    %r11,0x20(%rsp)
  0x00007f8ab9227e25: mov    %r12,0x18(%rsp)
  0x00007f8ab9227e2a: mov    %r13,0x10(%rsp)
  0x00007f8ab9227e2f: mov    %r14,0x8(%rsp)
  0x00007f8ab9227e34: mov    %r15,(%rsp)
  0x00007f8ab9227e38: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9227e42: movabs $0x7f8ab9227de2,%rsi
  0x00007f8ab9227e4c: mov    %rsp,%rdx
  0x00007f8ab9227e4f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227e53: callq  0x00007f8aceddb9fa
  0x00007f8ab9227e58: hlt    
  0x00007f8ab9227e59: pop    %rax
  0x00007f8ab9227e5a: movabs $0x0,%r10
  0x00007f8ab9227e64: mov    %r10,0x200(%r15)
  0x00007f8ab9227e6b: movabs $0x0,%r10
  0x00007f8ab9227e75: mov    %r10,0x210(%r15)
  0x00007f8ab9227e7c: movabs $0x0,%r10
  0x00007f8ab9227e86: mov    %r10,0x208(%r15)
  0x00007f8ab9227e8d: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9227e95: je     0x00007f8ab9227eb5
  0x00007f8ab9227e9b: mov    0x8(%r15),%rax
  0x00007f8ab9227e9f: movabs $0x0,%r10
  0x00007f8ab9227ea9: mov    %r10,0x260(%r15)
  0x00007f8ab9227eb0: jmpq   0x00007f8ab9167c00
  0x00007f8ab9227eb5: mov    0x260(%r15),%rax
  0x00007f8ab9227ebc: movabs $0x0,%r10
  0x00007f8ab9227ec6: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f8ab9227ecd: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9227ed3: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9227ed9: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9227edf: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9227ee5: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9227eeb: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9227ef1: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9227ef7: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9227efd: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9227f03: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9227f09: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9227f0f: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9227f15: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9227f1b: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9227f21: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9227f27: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9227f30: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9227f3c: je     0x00007f8ab9227fb9
  0x00007f8ab9227f42: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9227f47: sub    $0x80,%rsp
  0x00007f8ab9227f4e: mov    %rax,0x78(%rsp)
  0x00007f8ab9227f53: mov    %rcx,0x70(%rsp)
  0x00007f8ab9227f58: mov    %rdx,0x68(%rsp)
  0x00007f8ab9227f5d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9227f62: mov    %rbp,0x50(%rsp)
  0x00007f8ab9227f67: mov    %rsi,0x48(%rsp)
  0x00007f8ab9227f6c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9227f71: mov    %r8,0x38(%rsp)
  0x00007f8ab9227f76: mov    %r9,0x30(%rsp)
  0x00007f8ab9227f7b: mov    %r10,0x28(%rsp)
  0x00007f8ab9227f80: mov    %r11,0x20(%rsp)
  0x00007f8ab9227f85: mov    %r12,0x18(%rsp)
  0x00007f8ab9227f8a: mov    %r13,0x10(%rsp)
  0x00007f8ab9227f8f: mov    %r14,0x8(%rsp)
  0x00007f8ab9227f94: mov    %r15,(%rsp)
  0x00007f8ab9227f98: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9227fa2: movabs $0x7f8ab9227f42,%rsi
  0x00007f8ab9227fac: mov    %rsp,%rdx
  0x00007f8ab9227faf: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9227fb3: callq  0x00007f8aceddb9fa
  0x00007f8ab9227fb8: hlt    
  0x00007f8ab9227fb9: add    $0x150,%rsp
  0x00007f8ab9227fc0: mov    (%rsp),%r15
  0x00007f8ab9227fc4: mov    0x8(%rsp),%r14
  0x00007f8ab9227fc9: mov    0x10(%rsp),%r13
  0x00007f8ab9227fce: mov    0x18(%rsp),%r12
  0x00007f8ab9227fd3: mov    0x20(%rsp),%r11
  0x00007f8ab9227fd8: mov    0x28(%rsp),%r10
  0x00007f8ab9227fdd: mov    0x30(%rsp),%r9
  0x00007f8ab9227fe2: mov    0x38(%rsp),%r8
  0x00007f8ab9227fe7: mov    0x40(%rsp),%rdi
  0x00007f8ab9227fec: mov    0x48(%rsp),%rsi
  0x00007f8ab9227ff1: mov    0x50(%rsp),%rbp
  0x00007f8ab9227ff6: mov    0x60(%rsp),%rbx
  0x00007f8ab9227ffb: mov    0x68(%rsp),%rdx
  0x00007f8ab9228000: mov    0x70(%rsp),%rcx
  0x00007f8ab9228005: add    $0x80,%rsp
  0x00007f8ab922800c: leaveq 
  0x00007f8ab922800d: retq   
  0x00007f8ab922800e: nop
  0x00007f8ab922800f: nop

Decoding RuntimeStub - new_multi_array Runtime1 stub 0x00007f8ab91f4f90
  0x00007f8ab91f5020: push   %rbp
  0x00007f8ab91f5021: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f5024: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f5029: sub    $0x80,%rsp
  0x00007f8ab91f5030: mov    %rax,0x78(%rsp)
  0x00007f8ab91f5035: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f503a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f503f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f5044: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f5049: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f504e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5053: mov    %r8,0x38(%rsp)
  0x00007f8ab91f5058: mov    %r9,0x30(%rsp)
  0x00007f8ab91f505d: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5062: mov    %r11,0x20(%rsp)
  0x00007f8ab91f5067: mov    %r12,0x18(%rsp)
  0x00007f8ab91f506c: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5071: mov    %r14,0x8(%rsp)
  0x00007f8ab91f5076: mov    %r15,(%rsp)
  0x00007f8ab91f507a: sub    $0x150,%rsp
  0x00007f8ab91f5081: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f508d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f5093: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f5099: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f509f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f50a5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f50ab: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f50b1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f50b7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f50bd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f50c3: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f50c9: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f50cf: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f50d5: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f50db: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f50e1: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f50e7: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f50f0: mov    %rax,%rsi
  0x00007f8ab91f50f3: mov    %rbx,%rdx
  0x00007f8ab91f50f6: mov    %rcx,%rcx
  0x00007f8ab91f50f9: mov    %r15,%rdi
  0x00007f8ab91f50fc: mov    %rbp,0x210(%r15)
  0x00007f8ab91f5103: mov    %rsp,0x200(%r15)
  0x00007f8ab91f510a: callq  0x00007f8ace8ba7ea
  0x00007f8ab91f510f: push   %rax
  0x00007f8ab91f5110: push   %rdi
  0x00007f8ab91f5111: push   %rsi
  0x00007f8ab91f5112: push   %rdx
  0x00007f8ab91f5113: push   %rcx
  0x00007f8ab91f5114: push   %r8
  0x00007f8ab91f5116: push   %r9
  0x00007f8ab91f5118: push   %r10
  0x00007f8ab91f511a: mov    %rsp,%r10
  0x00007f8ab91f511d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f5121: push   %r10
  0x00007f8ab91f5123: push   %r11
  0x00007f8ab91f5125: mov    $0x1,%edi
  0x00007f8ab91f512a: callq  0x00007f8acf9c32d0
  0x00007f8ab91f512f: pop    %r11
  0x00007f8ab91f5131: pop    %rsp
  0x00007f8ab91f5132: pop    %r10
  0x00007f8ab91f5134: pop    %r9
  0x00007f8ab91f5136: pop    %r8
  0x00007f8ab91f5138: pop    %rcx
  0x00007f8ab91f5139: pop    %rdx
  0x00007f8ab91f513a: pop    %rsi
  0x00007f8ab91f513b: pop    %rdi
  0x00007f8ab91f513c: cmp    %rax,%r15
  0x00007f8ab91f513f: je     0x00007f8ab91f51c1
  0x00007f8ab91f5145: callq  0x00007f8aceec2a22
  0x00007f8ab91f514a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f514f: sub    $0x80,%rsp
  0x00007f8ab91f5156: mov    %rax,0x78(%rsp)
  0x00007f8ab91f515b: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f5160: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f5165: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f516a: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f516f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f5174: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f5179: mov    %r8,0x38(%rsp)
  0x00007f8ab91f517e: mov    %r9,0x30(%rsp)
  0x00007f8ab91f5183: mov    %r10,0x28(%rsp)
  0x00007f8ab91f5188: mov    %r11,0x20(%rsp)
  0x00007f8ab91f518d: mov    %r12,0x18(%rsp)
  0x00007f8ab91f5192: mov    %r13,0x10(%rsp)
  0x00007f8ab91f5197: mov    %r14,0x8(%rsp)
  0x00007f8ab91f519c: mov    %r15,(%rsp)
  0x00007f8ab91f51a0: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f51aa: movabs $0x7f8ab91f514a,%rsi
  0x00007f8ab91f51b4: mov    %rsp,%rdx
  0x00007f8ab91f51b7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f51bb: callq  0x00007f8aceddb9fa
  0x00007f8ab91f51c0: hlt    
  0x00007f8ab91f51c1: pop    %rax
  0x00007f8ab91f51c2: movabs $0x0,%r10
  0x00007f8ab91f51cc: mov    %r10,0x200(%r15)
  0x00007f8ab91f51d3: movabs $0x0,%r10
  0x00007f8ab91f51dd: mov    %r10,0x210(%r15)
  0x00007f8ab91f51e4: movabs $0x0,%r10
  0x00007f8ab91f51ee: mov    %r10,0x208(%r15)
  0x00007f8ab91f51f5: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f51fd: je     0x00007f8ab91f521d
  0x00007f8ab91f5203: mov    0x8(%r15),%rax
  0x00007f8ab91f5207: movabs $0x0,%r10
  0x00007f8ab91f5211: mov    %r10,0x260(%r15)
  0x00007f8ab91f5218: jmpq   0x00007f8ab9167c00
  0x00007f8ab91f521d: mov    0x260(%r15),%rax
  0x00007f8ab91f5224: movabs $0x0,%r10
  0x00007f8ab91f522e: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f8ab91f5235: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91f523b: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91f5241: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91f5247: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91f524d: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91f5253: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91f5259: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91f525f: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91f5265: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91f526b: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91f5271: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91f5277: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91f527d: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91f5283: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91f5289: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91f528f: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91f5298: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f52a4: je     0x00007f8ab91f5321
  0x00007f8ab91f52aa: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f52af: sub    $0x80,%rsp
  0x00007f8ab91f52b6: mov    %rax,0x78(%rsp)
  0x00007f8ab91f52bb: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f52c0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f52c5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f52ca: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f52cf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f52d4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f52d9: mov    %r8,0x38(%rsp)
  0x00007f8ab91f52de: mov    %r9,0x30(%rsp)
  0x00007f8ab91f52e3: mov    %r10,0x28(%rsp)
  0x00007f8ab91f52e8: mov    %r11,0x20(%rsp)
  0x00007f8ab91f52ed: mov    %r12,0x18(%rsp)
  0x00007f8ab91f52f2: mov    %r13,0x10(%rsp)
  0x00007f8ab91f52f7: mov    %r14,0x8(%rsp)
  0x00007f8ab91f52fc: mov    %r15,(%rsp)
  0x00007f8ab91f5300: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91f530a: movabs $0x7f8ab91f52aa,%rsi
  0x00007f8ab91f5314: mov    %rsp,%rdx
  0x00007f8ab91f5317: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f531b: callq  0x00007f8aceddb9fa
  0x00007f8ab91f5320: hlt    
  0x00007f8ab91f5321: add    $0x150,%rsp
  0x00007f8ab91f5328: mov    (%rsp),%r15
  0x00007f8ab91f532c: mov    0x8(%rsp),%r14
  0x00007f8ab91f5331: mov    0x10(%rsp),%r13
  0x00007f8ab91f5336: mov    0x18(%rsp),%r12
  0x00007f8ab91f533b: mov    0x20(%rsp),%r11
  0x00007f8ab91f5340: mov    0x28(%rsp),%r10
  0x00007f8ab91f5345: mov    0x30(%rsp),%r9
  0x00007f8ab91f534a: mov    0x38(%rsp),%r8
  0x00007f8ab91f534f: mov    0x40(%rsp),%rdi
  0x00007f8ab91f5354: mov    0x48(%rsp),%rsi
  0x00007f8ab91f5359: mov    0x50(%rsp),%rbp
  0x00007f8ab91f535e: mov    0x60(%rsp),%rbx
  0x00007f8ab91f5363: mov    0x68(%rsp),%rdx
  0x00007f8ab91f5368: mov    0x70(%rsp),%rcx
  0x00007f8ab91f536d: add    $0x80,%rsp
  0x00007f8ab91f5374: leaveq 
  0x00007f8ab91f5375: retq   
  0x00007f8ab91f5376: nop
  0x00007f8ab91f5377: nop

Decoding RuntimeStub - handle_exception_nofpu Runtime1 stub 0x00007f8ab9228050
  0x00007f8ab9228100: push   %rbp
  0x00007f8ab9228101: mov    %rsp,%rbp
  ;; generate_handle_exception
  ;; save_live_registers
  0x00007f8ab9228104: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228109: sub    $0x80,%rsp
  0x00007f8ab9228110: mov    %rax,0x78(%rsp)
  0x00007f8ab9228115: mov    %rcx,0x70(%rsp)
  0x00007f8ab922811a: mov    %rdx,0x68(%rsp)
  0x00007f8ab922811f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228124: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228129: mov    %rsi,0x48(%rsp)
  0x00007f8ab922812e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228133: mov    %r8,0x38(%rsp)
  0x00007f8ab9228138: mov    %r9,0x30(%rsp)
  0x00007f8ab922813d: mov    %r10,0x28(%rsp)
  0x00007f8ab9228142: mov    %r11,0x20(%rsp)
  0x00007f8ab9228147: mov    %r12,0x18(%rsp)
  0x00007f8ab922814c: mov    %r13,0x10(%rsp)
  0x00007f8ab9228151: mov    %r14,0x8(%rsp)
  0x00007f8ab9228156: mov    %r15,(%rsp)
  0x00007f8ab922815a: sub    $0x150,%rsp
  0x00007f8ab9228161: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922816d: movabs $0xdead,%rbx
  0x00007f8ab9228177: movabs $0xdead,%rcx
  0x00007f8ab9228181: movabs $0xdead,%rsi
  0x00007f8ab922818b: movabs $0xdead,%rdi
  0x00007f8ab9228195: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab92281a0: je     0x00007f8ab922821d
  0x00007f8ab92281a6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92281ab: sub    $0x80,%rsp
  0x00007f8ab92281b2: mov    %rax,0x78(%rsp)
  0x00007f8ab92281b7: mov    %rcx,0x70(%rsp)
  0x00007f8ab92281bc: mov    %rdx,0x68(%rsp)
  0x00007f8ab92281c1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92281c6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92281cb: mov    %rsi,0x48(%rsp)
  0x00007f8ab92281d0: mov    %rdi,0x40(%rsp)
  0x00007f8ab92281d5: mov    %r8,0x38(%rsp)
  0x00007f8ab92281da: mov    %r9,0x30(%rsp)
  0x00007f8ab92281df: mov    %r10,0x28(%rsp)
  0x00007f8ab92281e4: mov    %r11,0x20(%rsp)
  0x00007f8ab92281e9: mov    %r12,0x18(%rsp)
  0x00007f8ab92281ee: mov    %r13,0x10(%rsp)
  0x00007f8ab92281f3: mov    %r14,0x8(%rsp)
  0x00007f8ab92281f8: mov    %r15,(%rsp)
  0x00007f8ab92281fc: movabs $0x7f8acf15ca04,%rdi
  0x00007f8ab9228206: movabs $0x7f8ab92281a6,%rsi
  0x00007f8ab9228210: mov    %rsp,%rdx
  0x00007f8ab9228213: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228217: callq  0x00007f8aceddb9fa
  0x00007f8ab922821c: hlt    
  0x00007f8ab922821d: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab9228228: je     0x00007f8ab92282a5
  0x00007f8ab922822e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228233: sub    $0x80,%rsp
  0x00007f8ab922823a: mov    %rax,0x78(%rsp)
  0x00007f8ab922823f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228244: mov    %rdx,0x68(%rsp)
  0x00007f8ab9228249: mov    %rbx,0x60(%rsp)
  0x00007f8ab922824e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228253: mov    %rsi,0x48(%rsp)
  0x00007f8ab9228258: mov    %rdi,0x40(%rsp)
  0x00007f8ab922825d: mov    %r8,0x38(%rsp)
  0x00007f8ab9228262: mov    %r9,0x30(%rsp)
  0x00007f8ab9228267: mov    %r10,0x28(%rsp)
  0x00007f8ab922826c: mov    %r11,0x20(%rsp)
  0x00007f8ab9228271: mov    %r12,0x18(%rsp)
  0x00007f8ab9228276: mov    %r13,0x10(%rsp)
  0x00007f8ab922827b: mov    %r14,0x8(%rsp)
  0x00007f8ab9228280: mov    %r15,(%rsp)
  0x00007f8ab9228284: movabs $0x7f8acf15ca1e,%rdi
  0x00007f8ab922828e: movabs $0x7f8ab922822e,%rsi
  0x00007f8ab9228298: mov    %rsp,%rdx
  0x00007f8ab922829b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922829f: callq  0x00007f8aceddb9fa
  0x00007f8ab92282a4: hlt    
  0x00007f8ab92282a5: mov    %rax,0x2d0(%r15)
  0x00007f8ab92282ac: mov    %rdx,0x2d8(%r15)
  0x00007f8ab92282b3: mov    %rdx,0x8(%rbp)
  0x00007f8ab92282b7: mov    %r15,%rdi
  0x00007f8ab92282ba: mov    %rbp,0x210(%r15)
  0x00007f8ab92282c1: mov    %rsp,0x200(%r15)
  0x00007f8ab92282c8: callq  0x00007f8ace8bbb8c
  0x00007f8ab92282cd: push   %rax
  0x00007f8ab92282ce: push   %rdi
  0x00007f8ab92282cf: push   %rsi
  0x00007f8ab92282d0: push   %rdx
  0x00007f8ab92282d1: push   %rcx
  0x00007f8ab92282d2: push   %r8
  0x00007f8ab92282d4: push   %r9
  0x00007f8ab92282d6: push   %r10
  0x00007f8ab92282d8: mov    %rsp,%r10
  0x00007f8ab92282db: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92282df: push   %r10
  0x00007f8ab92282e1: push   %r11
  0x00007f8ab92282e3: mov    $0x1,%edi
  0x00007f8ab92282e8: callq  0x00007f8acf9c32d0
  0x00007f8ab92282ed: pop    %r11
  0x00007f8ab92282ef: pop    %rsp
  0x00007f8ab92282f0: pop    %r10
  0x00007f8ab92282f2: pop    %r9
  0x00007f8ab92282f4: pop    %r8
  0x00007f8ab92282f6: pop    %rcx
  0x00007f8ab92282f7: pop    %rdx
  0x00007f8ab92282f8: pop    %rsi
  0x00007f8ab92282f9: pop    %rdi
  0x00007f8ab92282fa: cmp    %rax,%r15
  0x00007f8ab92282fd: je     0x00007f8ab922837f
  0x00007f8ab9228303: callq  0x00007f8aceec2a22
  0x00007f8ab9228308: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922830d: sub    $0x80,%rsp
  0x00007f8ab9228314: mov    %rax,0x78(%rsp)
  0x00007f8ab9228319: mov    %rcx,0x70(%rsp)
  0x00007f8ab922831e: mov    %rdx,0x68(%rsp)
  0x00007f8ab9228323: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228328: mov    %rbp,0x50(%rsp)
  0x00007f8ab922832d: mov    %rsi,0x48(%rsp)
  0x00007f8ab9228332: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228337: mov    %r8,0x38(%rsp)
  0x00007f8ab922833c: mov    %r9,0x30(%rsp)
  0x00007f8ab9228341: mov    %r10,0x28(%rsp)
  0x00007f8ab9228346: mov    %r11,0x20(%rsp)
  0x00007f8ab922834b: mov    %r12,0x18(%rsp)
  0x00007f8ab9228350: mov    %r13,0x10(%rsp)
  0x00007f8ab9228355: mov    %r14,0x8(%rsp)
  0x00007f8ab922835a: mov    %r15,(%rsp)
  0x00007f8ab922835e: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9228368: movabs $0x7f8ab9228308,%rsi
  0x00007f8ab9228372: mov    %rsp,%rdx
  0x00007f8ab9228375: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228379: callq  0x00007f8aceddb9fa
  0x00007f8ab922837e: hlt    
  0x00007f8ab922837f: pop    %rax
  0x00007f8ab9228380: movabs $0x0,%r10
  0x00007f8ab922838a: mov    %r10,0x200(%r15)
  0x00007f8ab9228391: movabs $0x0,%r10
  0x00007f8ab922839b: mov    %r10,0x210(%r15)
  0x00007f8ab92283a2: movabs $0x0,%r10
  0x00007f8ab92283ac: mov    %r10,0x208(%r15)
  0x00007f8ab92283b3: cmpq   $0x0,0x8(%r15)
  0x00007f8ab92283bb: je     0x00007f8ab92283ca
  0x00007f8ab92283c1: mov    0x8(%r15),%rax
  0x00007f8ab92283c5: jmpq   0x00007f8ab9167c00
  0x00007f8ab92283ca: movabs $0xdead,%rbx
  0x00007f8ab92283d4: movabs $0xdead,%rcx
  0x00007f8ab92283de: movabs $0xdead,%rdx
  0x00007f8ab92283e8: movabs $0xdead,%rsi
  0x00007f8ab92283f2: movabs $0xdead,%rdi
  0x00007f8ab92283fc: mov    %rax,0x8(%rbp)
  ;; restore_live_registers
  0x00007f8ab9228400: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922840c: je     0x00007f8ab9228489
  0x00007f8ab9228412: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228417: sub    $0x80,%rsp
  0x00007f8ab922841e: mov    %rax,0x78(%rsp)
  0x00007f8ab9228423: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228428: mov    %rdx,0x68(%rsp)
  0x00007f8ab922842d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228432: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228437: mov    %rsi,0x48(%rsp)
  0x00007f8ab922843c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228441: mov    %r8,0x38(%rsp)
  0x00007f8ab9228446: mov    %r9,0x30(%rsp)
  0x00007f8ab922844b: mov    %r10,0x28(%rsp)
  0x00007f8ab9228450: mov    %r11,0x20(%rsp)
  0x00007f8ab9228455: mov    %r12,0x18(%rsp)
  0x00007f8ab922845a: mov    %r13,0x10(%rsp)
  0x00007f8ab922845f: mov    %r14,0x8(%rsp)
  0x00007f8ab9228464: mov    %r15,(%rsp)
  0x00007f8ab9228468: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9228472: movabs $0x7f8ab9228412,%rsi
  0x00007f8ab922847c: mov    %rsp,%rdx
  0x00007f8ab922847f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228483: callq  0x00007f8aceddb9fa
  0x00007f8ab9228488: hlt    
  0x00007f8ab9228489: add    $0x150,%rsp
  0x00007f8ab9228490: mov    (%rsp),%r15
  0x00007f8ab9228494: mov    0x8(%rsp),%r14
  0x00007f8ab9228499: mov    0x10(%rsp),%r13
  0x00007f8ab922849e: mov    0x18(%rsp),%r12
  0x00007f8ab92284a3: mov    0x20(%rsp),%r11
  0x00007f8ab92284a8: mov    0x28(%rsp),%r10
  0x00007f8ab92284ad: mov    0x30(%rsp),%r9
  0x00007f8ab92284b2: mov    0x38(%rsp),%r8
  0x00007f8ab92284b7: mov    0x40(%rsp),%rdi
  0x00007f8ab92284bc: mov    0x48(%rsp),%rsi
  0x00007f8ab92284c1: mov    0x50(%rsp),%rbp
  0x00007f8ab92284c6: mov    0x60(%rsp),%rbx
  0x00007f8ab92284cb: mov    0x68(%rsp),%rdx
  0x00007f8ab92284d0: mov    0x70(%rsp),%rcx
  0x00007f8ab92284d5: mov    0x78(%rsp),%rax
  0x00007f8ab92284da: add    $0x80,%rsp
  0x00007f8ab92284e1: leaveq 
  0x00007f8ab92284e2: retq   
  0x00007f8ab92284e3: nop
  0x00007f8ab92284e4: nop
  0x00007f8ab92284e5: nop
  0x00007f8ab92284e6: nop
  0x00007f8ab92284e7: nop

Decoding RuntimeStub - handle_exception Runtime1 stub 0x00007f8ab9228510
  0x00007f8ab92285c0: push   %rbp
  0x00007f8ab92285c1: mov    %rsp,%rbp
  ;; generate_handle_exception
  ;; save_live_registers
  0x00007f8ab92285c4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92285c9: sub    $0x80,%rsp
  0x00007f8ab92285d0: mov    %rax,0x78(%rsp)
  0x00007f8ab92285d5: mov    %rcx,0x70(%rsp)
  0x00007f8ab92285da: mov    %rdx,0x68(%rsp)
  0x00007f8ab92285df: mov    %rbx,0x60(%rsp)
  0x00007f8ab92285e4: mov    %rbp,0x50(%rsp)
  0x00007f8ab92285e9: mov    %rsi,0x48(%rsp)
  0x00007f8ab92285ee: mov    %rdi,0x40(%rsp)
  0x00007f8ab92285f3: mov    %r8,0x38(%rsp)
  0x00007f8ab92285f8: mov    %r9,0x30(%rsp)
  0x00007f8ab92285fd: mov    %r10,0x28(%rsp)
  0x00007f8ab9228602: mov    %r11,0x20(%rsp)
  0x00007f8ab9228607: mov    %r12,0x18(%rsp)
  0x00007f8ab922860c: mov    %r13,0x10(%rsp)
  0x00007f8ab9228611: mov    %r14,0x8(%rsp)
  0x00007f8ab9228616: mov    %r15,(%rsp)
  0x00007f8ab922861a: sub    $0x150,%rsp
  0x00007f8ab9228621: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922862d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9228633: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9228639: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab922863f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9228645: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab922864b: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9228651: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9228657: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab922865d: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9228663: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9228669: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab922866f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9228675: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab922867b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9228681: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9228687: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9228690: movabs $0xdead,%rbx
  0x00007f8ab922869a: movabs $0xdead,%rcx
  0x00007f8ab92286a4: movabs $0xdead,%rsi
  0x00007f8ab92286ae: movabs $0xdead,%rdi
  0x00007f8ab92286b8: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab92286c3: je     0x00007f8ab9228740
  0x00007f8ab92286c9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92286ce: sub    $0x80,%rsp
  0x00007f8ab92286d5: mov    %rax,0x78(%rsp)
  0x00007f8ab92286da: mov    %rcx,0x70(%rsp)
  0x00007f8ab92286df: mov    %rdx,0x68(%rsp)
  0x00007f8ab92286e4: mov    %rbx,0x60(%rsp)
  0x00007f8ab92286e9: mov    %rbp,0x50(%rsp)
  0x00007f8ab92286ee: mov    %rsi,0x48(%rsp)
  0x00007f8ab92286f3: mov    %rdi,0x40(%rsp)
  0x00007f8ab92286f8: mov    %r8,0x38(%rsp)
  0x00007f8ab92286fd: mov    %r9,0x30(%rsp)
  0x00007f8ab9228702: mov    %r10,0x28(%rsp)
  0x00007f8ab9228707: mov    %r11,0x20(%rsp)
  0x00007f8ab922870c: mov    %r12,0x18(%rsp)
  0x00007f8ab9228711: mov    %r13,0x10(%rsp)
  0x00007f8ab9228716: mov    %r14,0x8(%rsp)
  0x00007f8ab922871b: mov    %r15,(%rsp)
  0x00007f8ab922871f: movabs $0x7f8acf15ca04,%rdi
  0x00007f8ab9228729: movabs $0x7f8ab92286c9,%rsi
  0x00007f8ab9228733: mov    %rsp,%rdx
  0x00007f8ab9228736: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922873a: callq  0x00007f8aceddb9fa
  0x00007f8ab922873f: hlt    
  0x00007f8ab9228740: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab922874b: je     0x00007f8ab92287c8
  0x00007f8ab9228751: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228756: sub    $0x80,%rsp
  0x00007f8ab922875d: mov    %rax,0x78(%rsp)
  0x00007f8ab9228762: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228767: mov    %rdx,0x68(%rsp)
  0x00007f8ab922876c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228771: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228776: mov    %rsi,0x48(%rsp)
  0x00007f8ab922877b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228780: mov    %r8,0x38(%rsp)
  0x00007f8ab9228785: mov    %r9,0x30(%rsp)
  0x00007f8ab922878a: mov    %r10,0x28(%rsp)
  0x00007f8ab922878f: mov    %r11,0x20(%rsp)
  0x00007f8ab9228794: mov    %r12,0x18(%rsp)
  0x00007f8ab9228799: mov    %r13,0x10(%rsp)
  0x00007f8ab922879e: mov    %r14,0x8(%rsp)
  0x00007f8ab92287a3: mov    %r15,(%rsp)
  0x00007f8ab92287a7: movabs $0x7f8acf15ca1e,%rdi
  0x00007f8ab92287b1: movabs $0x7f8ab9228751,%rsi
  0x00007f8ab92287bb: mov    %rsp,%rdx
  0x00007f8ab92287be: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92287c2: callq  0x00007f8aceddb9fa
  0x00007f8ab92287c7: hlt    
  0x00007f8ab92287c8: mov    %rax,0x2d0(%r15)
  0x00007f8ab92287cf: mov    %rdx,0x2d8(%r15)
  0x00007f8ab92287d6: mov    %rdx,0x8(%rbp)
  0x00007f8ab92287da: mov    %r15,%rdi
  0x00007f8ab92287dd: mov    %rbp,0x210(%r15)
  0x00007f8ab92287e4: mov    %rsp,0x200(%r15)
  0x00007f8ab92287eb: callq  0x00007f8ace8bbb8c
  0x00007f8ab92287f0: push   %rax
  0x00007f8ab92287f1: push   %rdi
  0x00007f8ab92287f2: push   %rsi
  0x00007f8ab92287f3: push   %rdx
  0x00007f8ab92287f4: push   %rcx
  0x00007f8ab92287f5: push   %r8
  0x00007f8ab92287f7: push   %r9
  0x00007f8ab92287f9: push   %r10
  0x00007f8ab92287fb: mov    %rsp,%r10
  0x00007f8ab92287fe: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228802: push   %r10
  0x00007f8ab9228804: push   %r11
  0x00007f8ab9228806: mov    $0x1,%edi
  0x00007f8ab922880b: callq  0x00007f8acf9c32d0
  0x00007f8ab9228810: pop    %r11
  0x00007f8ab9228812: pop    %rsp
  0x00007f8ab9228813: pop    %r10
  0x00007f8ab9228815: pop    %r9
  0x00007f8ab9228817: pop    %r8
  0x00007f8ab9228819: pop    %rcx
  0x00007f8ab922881a: pop    %rdx
  0x00007f8ab922881b: pop    %rsi
  0x00007f8ab922881c: pop    %rdi
  0x00007f8ab922881d: cmp    %rax,%r15
  0x00007f8ab9228820: je     0x00007f8ab92288a2
  0x00007f8ab9228826: callq  0x00007f8aceec2a22
  0x00007f8ab922882b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228830: sub    $0x80,%rsp
  0x00007f8ab9228837: mov    %rax,0x78(%rsp)
  0x00007f8ab922883c: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228841: mov    %rdx,0x68(%rsp)
  0x00007f8ab9228846: mov    %rbx,0x60(%rsp)
  0x00007f8ab922884b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228850: mov    %rsi,0x48(%rsp)
  0x00007f8ab9228855: mov    %rdi,0x40(%rsp)
  0x00007f8ab922885a: mov    %r8,0x38(%rsp)
  0x00007f8ab922885f: mov    %r9,0x30(%rsp)
  0x00007f8ab9228864: mov    %r10,0x28(%rsp)
  0x00007f8ab9228869: mov    %r11,0x20(%rsp)
  0x00007f8ab922886e: mov    %r12,0x18(%rsp)
  0x00007f8ab9228873: mov    %r13,0x10(%rsp)
  0x00007f8ab9228878: mov    %r14,0x8(%rsp)
  0x00007f8ab922887d: mov    %r15,(%rsp)
  0x00007f8ab9228881: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab922888b: movabs $0x7f8ab922882b,%rsi
  0x00007f8ab9228895: mov    %rsp,%rdx
  0x00007f8ab9228898: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922889c: callq  0x00007f8aceddb9fa
  0x00007f8ab92288a1: hlt    
  0x00007f8ab92288a2: pop    %rax
  0x00007f8ab92288a3: movabs $0x0,%r10
  0x00007f8ab92288ad: mov    %r10,0x200(%r15)
  0x00007f8ab92288b4: movabs $0x0,%r10
  0x00007f8ab92288be: mov    %r10,0x210(%r15)
  0x00007f8ab92288c5: movabs $0x0,%r10
  0x00007f8ab92288cf: mov    %r10,0x208(%r15)
  0x00007f8ab92288d6: cmpq   $0x0,0x8(%r15)
  0x00007f8ab92288de: je     0x00007f8ab92288ed
  0x00007f8ab92288e4: mov    0x8(%r15),%rax
  0x00007f8ab92288e8: jmpq   0x00007f8ab9167c00
  0x00007f8ab92288ed: movabs $0xdead,%rbx
  0x00007f8ab92288f7: movabs $0xdead,%rcx
  0x00007f8ab9228901: movabs $0xdead,%rdx
  0x00007f8ab922890b: movabs $0xdead,%rsi
  0x00007f8ab9228915: movabs $0xdead,%rdi
  0x00007f8ab922891f: mov    %rax,0x8(%rbp)
  ;; restore_live_registers
  0x00007f8ab9228923: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9228929: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922892f: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9228935: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922893b: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9228941: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9228947: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922894d: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9228953: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9228959: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922895f: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9228965: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922896b: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9228971: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9228977: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922897d: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9228986: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9228992: je     0x00007f8ab9228a0f
  0x00007f8ab9228998: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922899d: sub    $0x80,%rsp
  0x00007f8ab92289a4: mov    %rax,0x78(%rsp)
  0x00007f8ab92289a9: mov    %rcx,0x70(%rsp)
  0x00007f8ab92289ae: mov    %rdx,0x68(%rsp)
  0x00007f8ab92289b3: mov    %rbx,0x60(%rsp)
  0x00007f8ab92289b8: mov    %rbp,0x50(%rsp)
  0x00007f8ab92289bd: mov    %rsi,0x48(%rsp)
  0x00007f8ab92289c2: mov    %rdi,0x40(%rsp)
  0x00007f8ab92289c7: mov    %r8,0x38(%rsp)
  0x00007f8ab92289cc: mov    %r9,0x30(%rsp)
  0x00007f8ab92289d1: mov    %r10,0x28(%rsp)
  0x00007f8ab92289d6: mov    %r11,0x20(%rsp)
  0x00007f8ab92289db: mov    %r12,0x18(%rsp)
  0x00007f8ab92289e0: mov    %r13,0x10(%rsp)
  0x00007f8ab92289e5: mov    %r14,0x8(%rsp)
  0x00007f8ab92289ea: mov    %r15,(%rsp)
  0x00007f8ab92289ee: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab92289f8: movabs $0x7f8ab9228998,%rsi
  0x00007f8ab9228a02: mov    %rsp,%rdx
  0x00007f8ab9228a05: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228a09: callq  0x00007f8aceddb9fa
  0x00007f8ab9228a0e: hlt    
  0x00007f8ab9228a0f: add    $0x150,%rsp
  0x00007f8ab9228a16: mov    (%rsp),%r15
  0x00007f8ab9228a1a: mov    0x8(%rsp),%r14
  0x00007f8ab9228a1f: mov    0x10(%rsp),%r13
  0x00007f8ab9228a24: mov    0x18(%rsp),%r12
  0x00007f8ab9228a29: mov    0x20(%rsp),%r11
  0x00007f8ab9228a2e: mov    0x28(%rsp),%r10
  0x00007f8ab9228a33: mov    0x30(%rsp),%r9
  0x00007f8ab9228a38: mov    0x38(%rsp),%r8
  0x00007f8ab9228a3d: mov    0x40(%rsp),%rdi
  0x00007f8ab9228a42: mov    0x48(%rsp),%rsi
  0x00007f8ab9228a47: mov    0x50(%rsp),%rbp
  0x00007f8ab9228a4c: mov    0x60(%rsp),%rbx
  0x00007f8ab9228a51: mov    0x68(%rsp),%rdx
  0x00007f8ab9228a56: mov    0x70(%rsp),%rcx
  0x00007f8ab9228a5b: mov    0x78(%rsp),%rax
  0x00007f8ab9228a60: add    $0x80,%rsp
  0x00007f8ab9228a67: leaveq 
  0x00007f8ab9228a68: retq   
  0x00007f8ab9228a69: nop
  0x00007f8ab9228a6a: nop
  0x00007f8ab9228a6b: nop
  0x00007f8ab9228a6c: nop
  0x00007f8ab9228a6d: nop
  0x00007f8ab9228a6e: nop
  0x00007f8ab9228a6f: nop

Decoding RuntimeStub - _multianewarrayN_Java 0x00007f8ab91f5390
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91f53e0: sub    $0x8,%rsp
  0x00007f8ab91f53e7: mov    %rbp,(%rsp)
  0x00007f8ab91f53eb: mov    %rsp,0x200(%r15)
  0x00007f8ab91f53f2: mov    %rsi,%rdi
  0x00007f8ab91f53f5: mov    %rdx,%rsi
  0x00007f8ab91f53f8: mov    %r15,%rdx
  0x00007f8ab91f53fb: movabs $0x7f8acef78a3c,%r10
  0x00007f8ab91f5405: callq  *%r10
  0x00007f8ab91f5408: mov    %r12,0x200(%r15)
  0x00007f8ab91f540f: mov    %r12,0x208(%r15)
  0x00007f8ab91f5416: mov    0x260(%r15),%rax
  0x00007f8ab91f541d: mov    %r12,0x260(%r15)
  0x00007f8ab91f5424: cmp    0x8(%r15),%r12
  0x00007f8ab91f5428: jne    0x00007f8ab91f542c
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91f542a: pop    %rbp
  0x00007f8ab91f542b: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91f542c: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91f5436: xor    %ebx,%ebx
  0x00007f8ab91f5438: pop    %rbp
  0x00007f8ab91f5439: jmpq   *%r10
  0x00007f8ab91f543c: hlt    
  0x00007f8ab91f543d: hlt    
  0x00007f8ab91f543e: hlt    
  0x00007f8ab91f543f: hlt    

  ;; bad Method*::intrinsic_id
  0x00007f8ab91faf8a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91faf8f: sub    $0x80,%rsp
  0x00007f8ab91faf96: mov    %rax,0x78(%rsp)
  0x00007f8ab91faf9b: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fafa0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fafa5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fafaa: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fafaf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fafb4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fafb9: mov    %r8,0x38(%rsp)
  0x00007f8ab91fafbe: mov    %r9,0x30(%rsp)
  0x00007f8ab91fafc3: mov    %r10,0x28(%rsp)
  0x00007f8ab91fafc8: mov    %r11,0x20(%rsp)
  0x00007f8ab91fafcd: mov    %r12,0x18(%rsp)
  0x00007f8ab91fafd2: mov    %r13,0x10(%rsp)
  0x00007f8ab91fafd7: mov    %r14,0x8(%rsp)
  0x00007f8ab91fafdc: mov    %r15,(%rsp)
  0x00007f8ab91fafe0: movabs $0x7f8acf318ce9,%rdi
  0x00007f8ab91fafea: movabs $0x7f8ab91faf8a,%rsi
  0x00007f8ab91faff4: mov    %rsp,%rdx
  0x00007f8ab91faff7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91faffb: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb000: hlt    
  ;; } verify_intrinsic_id
  0x00007f8ab91fb001: mov    0x10(%rbx),%rdx
  0x00007f8ab91fb005: movzwl 0x2c(%rdx),%edx
  0x00007f8ab91fb009: mov    (%rsp,%rdx,8),%rcx
  ;; jump_to_lambda_form {
  0x00007f8ab91fb00d: mov    0x14(%rcx),%ebx
  0x00007f8ab91fb010: push   %r10
  0x00007f8ab91fb012: cmp    0x167b31c7(%rip),%r12        # 0x00007f8acf9ae1e0
  0x00007f8ab91fb019: je     0x00007f8ab91fb096
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f8ab91fb01f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb024: sub    $0x80,%rsp
  0x00007f8ab91fb02b: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb030: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb035: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb03a: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb03f: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb044: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb049: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb04e: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb053: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb058: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb05d: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb062: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb067: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb06c: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb071: mov    %r15,(%rsp)
  0x00007f8ab91fb075: movabs $0x7f8acf2f2068,%rdi
  0x00007f8ab91fb07f: movabs $0x7f8ab91fb01f,%rsi
  0x00007f8ab91fb089: mov    %rsp,%rdx
  0x00007f8ab91fb08c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fb090: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb095: hlt    
  0x00007f8ab91fb096: pop    %r10
  0x00007f8ab91fb098: mov    0x28(%rbx),%ebx
  0x00007f8ab91fb09b: push   %r10
  0x00007f8ab91fb09d: cmp    0x167b313c(%rip),%r12        # 0x00007f8acf9ae1e0
  0x00007f8ab91fb0a4: je     0x00007f8ab91fb121
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f8ab91fb0aa: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb0af: sub    $0x80,%rsp
  0x00007f8ab91fb0b6: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb0bb: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb0c0: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb0c5: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb0ca: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb0cf: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb0d4: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb0d9: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb0de: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb0e3: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb0e8: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb0ed: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb0f2: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb0f7: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb0fc: mov    %r15,(%rsp)
  0x00007f8ab91fb100: movabs $0x7f8acf2f2068,%rdi
  0x00007f8ab91fb10a: movabs $0x7f8ab91fb0aa,%rsi
  0x00007f8ab91fb114: mov    %rsp,%rdx
  0x00007f8ab91fb117: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fb11b: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb120: hlt    
  0x00007f8ab91fb121: pop    %r10
  0x00007f8ab91fb123: mov    0x18(%rbx),%rbx
  0x00007f8ab91fb127: mov    0x10(%rbx),%r10
  0x00007f8ab91fb12b: movzwl 0x2c(%r10),%r10d
  0x00007f8ab91fb130: cmp    (%rsp,%r10,8),%rcx
  0x00007f8ab91fb134: je     0x00007f8ab91fb1b5
  0x00007f8ab91fb13a: mov    (%rsp,%r10,8),%rax
  ;; receiver not on stack
  0x00007f8ab91fb13e: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb143: sub    $0x80,%rsp
  0x00007f8ab91fb14a: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb14f: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb154: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb159: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb15e: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb163: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb168: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb16d: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb172: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb177: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb17c: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb181: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb186: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb18b: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb190: mov    %r15,(%rsp)
  0x00007f8ab91fb194: movabs $0x7f8acf318c90,%rdi
  0x00007f8ab91fb19e: movabs $0x7f8ab91fb13e,%rsi
  0x00007f8ab91fb1a8: mov    %rsp,%rdx
  0x00007f8ab91fb1ab: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fb1af: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb1b4: hlt    
  ;; L:
  0x00007f8ab91fb1b5: test   %rbx,%rbx
  0x00007f8ab91fb1b8: je     0x00007f8ab91fb1c1
  0x00007f8ab91fb1be: jmpq   *0x60(%rbx)
  0x00007f8ab91fb1c1: jmpq   0x00007f8ab9105480

MethodHandle::interpreter_entry::_linkToVirtual [0x00007f8ab91fb1c6, 0x00007f8ab91fb651[ (1163 bytes)
  ;; } jump_to_lambda_form
  0x00007f8ab91fb1c6: nop
  0x00007f8ab91fb1c7: nop
  0x00007f8ab91fb1c8: nop
  0x00007f8ab91fb1c9: nop
  0x00007f8ab91fb1ca: nop
  0x00007f8ab91fb1cb: nop
  0x00007f8ab91fb1cc: nop
  0x00007f8ab91fb1cd: nop
  0x00007f8ab91fb1ce: nop
  0x00007f8ab91fb1cf: nop
  0x00007f8ab91fb1d0: nop
  0x00007f8ab91fb1d1: Decoding RuntimeStub - _g1_wb_pre_Java 0x00007f8ab91f4e10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91f4e60: sub    $0x8,%rsp
  0x00007f8ab91f4e67: mov    %rbp,(%rsp)
  0x00007f8ab91f4e6b: mov    %rsp,0x200(%r15)
  0x00007f8ab91f4e72: mov    %rsi,%rdi
  0x00007f8ab91f4e75: mov    %rdx,%rsi
  0x00007f8ab91f4e78: mov    %r15,%rdx
  0x00007f8ab91f4e7b: movabs $0x7f8acef842b6,%r10
  0x00007f8ab91f4e85: callq  *%r10
  0x00007f8ab91f4e88: mov    %r12,0x200(%r15)
  0x00007f8ab91f4e8f: mov    %r12,0x208(%r15)
  0x00007f8ab91f4e96: cmp    0x8(%r15),%r12
  0x00007f8ab91f4e9a: jne    0x00007f8ab91f4e9e
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91f4e9c: pop    %rbp
  0x00007f8ab91f4e9d: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91f4e9e: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91f4ea8: xor    %ebx,%ebx
  0x00007f8ab91f4eaa: pop    %rbp
  0x00007f8ab91f4eab: jmpq   *%r10
  0x00007f8ab91f4eae: hlt    
  0x00007f8ab91f4eaf: hlt    

Decoding RuntimeStub - handle_exception_from_callee Runtime1 stub 0x00007f8ab9228a90
  0x00007f8ab9228b20: push   %rbp
  0x00007f8ab9228b21: mov    %rsp,%rbp
  ;; generate_handle_exception
  0x00007f8ab9228b24: movabs $0xdead,%rbx
  0x00007f8ab9228b2e: movabs $0xdead,%rcx
  0x00007f8ab9228b38: movabs $0xdead,%rsi
  0x00007f8ab9228b42: movabs $0xdead,%rdi
  0x00007f8ab9228b4c: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab9228b57: je     0x00007f8ab9228bd4
  0x00007f8ab9228b5d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228b62: sub    $0x80,%rsp
  0x00007f8ab9228b69: mov    %rax,0x78(%rsp)
  0x00007f8ab9228b6e: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228b73: mov    %rdx,0x68(%rsp)
  0x00007f8ab9228b78: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228b7d: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228b82: mov    %rsi,0x48(%rsp)
  0x00007f8ab9228b87: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228b8c: mov    %r8,0x38(%rsp)
  0x00007f8ab9228b91: mov    %r9,0x30(%rsp)
  0x00007f8ab9228b96: mov    %r10,0x28(%rsp)
  0x00007f8ab9228b9b: mov    %r11,0x20(%rsp)
  0x00007f8ab9228ba0: mov    %r12,0x18(%rsp)
  0x00007f8ab9228ba5: mov    %r13,0x10(%rsp)
  0x00007f8ab9228baa: mov    %r14,0x8(%rsp)
  0x00007f8ab9228baf: mov    %r15,(%rsp)
  0x00007f8ab9228bb3: movabs $0x7f8acf15ca04,%rdi
  0x00007f8ab9228bbd: movabs $0x7f8ab9228b5d,%rsi
  0x00007f8ab9228bc7: mov    %rsp,%rdx
  0x00007f8ab9228bca: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228bce: callq  0x00007f8aceddb9fa
  0x00007f8ab9228bd3: hlt    
  0x00007f8ab9228bd4: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab9228bdf: je     0x00007f8ab9228c5c
  0x00007f8ab9228be5: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228bea: sub    $0x80,%rsp
  0x00007f8ab9228bf1: mov    %rax,0x78(%rsp)
  0x00007f8ab9228bf6: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228bfb: mov    %rdx,0x68(%rsp)
  0x00007f8ab9228c00: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228c05: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228c0a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9228c0f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228c14: mov    %r8,0x38(%rsp)
  0x00007f8ab9228c19: mov    %r9,0x30(%rsp)
  0x00007f8ab9228c1e: mov    %r10,0x28(%rsp)
  0x00007f8ab9228c23: mov    %r11,0x20(%rsp)
  0x00007f8ab9228c28: mov    %r12,0x18(%rsp)
  0x00007f8ab9228c2d: mov    %r13,0x10(%rsp)
  0x00007f8ab9228c32: mov    %r14,0x8(%rsp)
  0x00007f8ab9228c37: mov    %r15,(%rsp)
  0x00007f8ab9228c3b: movabs $0x7f8acf15ca1e,%rdi
  0x00007f8ab9228c45: movabs $0x7f8ab9228be5,%rsi
  0x00007f8ab9228c4f: mov    %rsp,%rdx
  0x00007f8ab9228c52: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228c56: callq  0x00007f8aceddb9fa
  0x00007f8ab9228c5b: hlt    
  0x00007f8ab9228c5c: mov    %rax,0x2d0(%r15)
  0x00007f8ab9228c63: mov    %rdx,0x2d8(%r15)
  0x00007f8ab9228c6a: mov    %rdx,0x8(%rbp)
  0x00007f8ab9228c6e: mov    %r15,%rdi
  0x00007f8ab9228c71: mov    %rbp,0x210(%r15)
  0x00007f8ab9228c78: movabs $0x7f8ab9228c71,%r10
  0x00007f8ab9228c82: mov    %r10,0x208(%r15)
  0x00007f8ab9228c89: mov    %rsp,0x200(%r15)
  0x00007f8ab9228c90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228c94: callq  0x00007f8ace8bbb8c
  0x00007f8ab9228c99: push   %rax
  0x00007f8ab9228c9a: push   %rdi
  0x00007f8ab9228c9b: push   %rsi
  0x00007f8ab9228c9c: push   %rdx
  0x00007f8ab9228c9d: push   %rcx
  0x00007f8ab9228c9e: push   %r8
  0x00007f8ab9228ca0: push   %r9
  0x00007f8ab9228ca2: push   %r10
  0x00007f8ab9228ca4: mov    %rsp,%r10
  0x00007f8ab9228ca7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228cab: push   %r10
  0x00007f8ab9228cad: push   %r11
  0x00007f8ab9228caf: mov    $0x1,%edi
  0x00007f8ab9228cb4: callq  0x00007f8acf9c32d0
  0x00007f8ab9228cb9: pop    %r11
  0x00007f8ab9228cbb: pop    %rsp
  0x00007f8ab9228cbc: pop    %r10
  0x00007f8ab9228cbe: pop    %r9
  0x00007f8ab9228cc0: pop    %r8
  0x00007f8ab9228cc2: pop    %rcx
  0x00007f8ab9228cc3: pop    %rdx
  0x00007f8ab9228cc4: pop    %rsi
  0x00007f8ab9228cc5: pop    %rdi
  0x00007f8ab9228cc6: cmp    %rax,%r15
  0x00007f8ab9228cc9: je     0x00007f8ab9228d4b
  0x00007f8ab9228ccf: callq  0x00007f8aceec2a22
  0x00007f8ab9228cd4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228cd9: sub    $0x80,%rsp
  0x00007f8ab9228ce0: mov    %rax,0x78(%rsp)
  0x00007f8ab9228ce5: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228cea: mov    %rdx,0x68(%rsp)
  0x00007f8ab9228cef: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228cf4: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228cf9: mov    %rsi,0x48(%rsp)
  0x00007f8ab9228cfe: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228d03: mov    %r8,0x38(%rsp)
  0x00007f8ab9228d08: mov    %r9,0x30(%rsp)
  0x00007f8ab9228d0d: mov    %r10,0x28(%rsp)
  0x00007f8ab9228d12: mov    %r11,0x20(%rsp)
  0x00007f8ab9228d17: mov    %r12,0x18(%rsp)
  0x00007f8ab9228d1c: mov    %r13,0x10(%rsp)
  0x00007f8ab9228d21: mov    %r14,0x8(%rsp)
  0x00007f8ab9228d26: mov    %r15,(%rsp)
  0x00007f8ab9228d2a: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9228d34: movabs $0x7f8ab9228cd4,%rsi
  0x00007f8ab9228d3e: mov    %rsp,%rdx
  0x00007f8ab9228d41: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9228d45: callq  0x00007f8aceddb9fa
  0x00007f8ab9228d4a: hlt    
  0x00007f8ab9228d4b: pop    %rax
  0x00007f8ab9228d4c: movabs $0x0,%r10
  0x00007f8ab9228d56: mov    %r10,0x200(%r15)
  0x00007f8ab9228d5d: movabs $0x0,%r10
  0x00007f8ab9228d67: mov    %r10,0x210(%r15)
  0x00007f8ab9228d6e: movabs $0x0,%r10
  0x00007f8ab9228d78: mov    %r10,0x208(%r15)
  0x00007f8ab9228d7f: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9228d87: je     0x00007f8ab9228d96
  0x00007f8ab9228d8d: mov    0x8(%r15),%rax
  0x00007f8ab9228d91: jmpq   0x00007f8ab9167c00
  0x00007f8ab9228d96: movabs $0xdead,%rbx
  0x00007f8ab9228da0: movabs $0xdead,%rcx
  0x00007f8ab9228daa: movabs $0xdead,%rdx
  0x00007f8ab9228db4: movabs $0xdead,%rsi
  0x00007f8ab9228dbe: movabs $0xdead,%rdi
  0x00007f8ab9228dc8: mov    %rax,0x8(%rbp)
  0x00007f8ab9228dcc: leaveq 
  0x00007f8ab9228dcd: pop    %rcx
  0x00007f8ab9228dce: jmpq   *%rcx
  0x00007f8ab9228dd0: leaveq 
  0x00007f8ab9228dd1: retq   
  0x00007f8ab9228dd2: nop
  0x00007f8ab9228dd3: nop
  0x00007f8ab9228dd4: nop
  0x00007f8ab9228dd5: nop
  0x00007f8ab9228dd6: nop
  0x00007f8ab9228dd7: nop

Decoding RuntimeStub - _g1_wb_post_Java 0x00007f8ab9228e10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab9228e60: sub    $0x8,%rsp
  0x00007f8ab9228e67: mov    %rbp,(%rsp)
  0x00007f8ab9228e6b: mov    %rsp,0x200(%r15)
  0x00007f8ab9228e72: mov    %rsi,%rdi
  0x00007f8ab9228e75: mov    %rdx,%rsi
  0x00007f8ab9228e78: mov    %r15,%rdx
  0x00007f8ab9228e7b: movabs $0x7f8acef8447e,%r10
  0x00007f8ab9228e85: callq  *%r10
  0x00007f8ab9228e88: mov    %r12,0x200(%r15)
  0x00007f8ab9228e8f: mov    %r12,0x208(%r15)
  0x00007f8ab9228e96: cmp    0x8(%r15),%r12
  0x00007f8ab9228e9a: jne    0x00007f8ab9228e9e
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab9228e9c: pop    %rbp
  0x00007f8ab9228e9d: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab9228e9e: movabs $0x7f8ab9000420,%r10
  0x00007f8ab9228ea8: xor    %ebx,%ebx
  0x00007f8ab9228eaa: pop    %rbp
  0x00007f8ab9228eab: jmpq   *%r10
  0x00007f8ab9228eae: hlt    
  0x00007f8ab9228eaf: hlt    

hlt
MethodHandle::interpreter_entry::_linkToStatic [0x00007f8ab91fb651, 0x00007f8ab91fb830[ (479 bytes)
  0x00007f8ab91fb651: nop
  0x00007f8ab91fb652: nop
  0x00007f8ab91fb653: nop
  0x00007f8ab91fb654: nop
  0x00007f8ab91fb655: nop
  0x00007f8ab91fb656: nop
  0x00007f8ab91fb657: nop
  0x00007f8ab91fb658: nop
  0x00007f8ab91fb659: nop
  0x00007f8ab91fb65a: nop
  0x00007f8ab91fb65b: nop
  0x00007f8ab91fb65c: nop
  0x00007f8ab91fb65d: nop
  0x00007f8ab91fb65e: nop
  0x00007f8ab91fb65f: nop
  ;; verify_intrinsic_id {
  0x00007f8ab91fb660: cmpb   $0xb8,0x32(%rbx)
  0x00007f8ab91fb664: je     0x00007f8ab91fb6e1
  ;; bad Method*::intrinsic_id
  0x00007f8ab91fb66a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb66f: sub    $0x80,%rsp
  0x00007f8ab91fb676: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb67b: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb680: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb685: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb68a: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb68f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb694: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb699: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb69e: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb6a3: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb6a8: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb6ad: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb6b2: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb6b7: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb6bc: mov    %r15,(%rsp)
  0x00007f8ab91fb6c0: movabs $0x7f8acf318ce9,%rdi
  0x00007f8ab91fb6ca: movabs $0x7f8ab91fb66a,%rsi
  0x00007f8ab91fb6d4: mov    %rsp,%rdx
  0x00007f8ab91fb6d7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fb6db: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb6e0: hlt    
  ;; } verify_intrinsic_id
  0x00007f8ab91fb6e1: pop    %rax
  0x00007f8ab91fb6e2: pop    %rbx
  0x00007f8ab91fb6e3: push   %rax
  ;; verify_klass {
  0x00007f8ab91fb6e4: test   %rbx,%rbx
  0x00007f8ab91fb6e7: je     0x00007f8ab91fb718
  0x00007f8ab91fb6ed: push   %rdi
  0x00007f8ab91fb6ee: push   %r10
  0x00007f8ab91fb6f0: mov    0x8(%rbx),%edi
  0x00007f8ab91fb6f3: shl    $0x3,%rdi
  0x00007f8ab91fb6f7: cmp    0x1679403a(%rip),%rdi        # 0x00007f8acf98f738
  0x00007f8ab91fb6fe: je     0x00007f8ab91fb78f
  0x00007f8ab91fb704: mov    0x38(%rdi),%rdi
  0x00007f8ab91fb708: cmp    0x16794029(%rip),%rdi        # 0x00007f8acf98f738
  0x00007f8ab91fb70f: je     0x00007f8ab91fb78f
  0x00007f8ab91fb715: pop    %r10
  0x00007f8ab91fb717: pop    %rdi
  ;; MemberName required for invokeVirtual etc.
  0x00007f8ab91fb718: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb71d: sub    $0x80,%rsp
  0x00007f8ab91fb724: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb729: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb72e: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb733: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb738: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb73d: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb742: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb747: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb74c: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb751: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb756: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb75b: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb760: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb765: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb76a: mov    %r15,(%rsp)
  0x00007f8ab91fb76e: movabs $0x7f8acf318e00,%rdi
  0x00007f8ab91fb778: movabs $0x7f8ab91fb718,%rsi
  0x00007f8ab91fb782: mov    %rsp,%rdx
  0x00007f8ab91fb785: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fb789: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb78e: hlt    
  ;; L_ok:
  0x00007f8ab91fb78f: pop    %r10
  0x00007f8ab91fb791: pop    %rdi
  ;; } verify_klass
  ;; verify_ref_kind {
  0x00007f8ab91fb792: mov    0xc(%rbx),%eax
  0x00007f8ab91fb795: shr    $0x18,%eax
  0x00007f8ab91fb798: and    $0xf,%eax
  0x00007f8ab91fb79b: cmp    $0x6,%eax
  0x00007f8ab91fb79e: je     0x00007f8ab91fb81b
  ;; verify_ref_kind expected 6
  0x00007f8ab91fb7a4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb7a9: sub    $0x80,%rsp
  0x00007f8ab91fb7b0: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb7b5: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb7ba: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb7bf: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb7c4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb7c9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb7ce: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb7d3: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb7d8: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb7dd: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb7e2: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb7e7: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb7ec: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb7f1: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb7f6: mov    %r15,(%rsp)
  0x00007f8ab91fb7fa: Decoding RuntimeStub - _complete_monitor_locking_Java 0x00007f8ab9229250
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab92292a0: sub    $0x8,%rsp
  0x00007f8ab92292a7: mov    %rbp,(%rsp)
  0x00007f8ab92292ab: mov    %rsp,0x200(%r15)
  0x00007f8ab92292b2: mov    %rsi,%rdi
  0x00007f8ab92292b5: mov    %rdx,%rsi
  0x00007f8ab92292b8: mov    %r15,%rdx
  0x00007f8ab92292bb: movabs $0x7f8acef8c6be,%r10
  0x00007f8ab92292c5: callq  *%r10
  0x00007f8ab92292c8: mov    %r12,0x200(%r15)
  0x00007f8ab92292cf: mov    %r12,0x208(%r15)
  0x00007f8ab92292d6: cmp    0x8(%r15),%r12
  0x00007f8ab92292da: jne    0x00007f8ab92292de
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab92292dc: pop    %rbp
  0x00007f8ab92292dd: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab92292de: movabs $0x7f8ab9000420,%r10
  0x00007f8ab92292e8: xor    %ebx,%ebx
  0x00007f8ab92292ea: pop    %rbp
  0x00007f8ab92292eb: jmpq   *%r10
  0x00007f8ab92292ee: hlt    
  0x00007f8ab92292ef: hlt    

Decoding RuntimeStub - throw_array_store_exception Runtime1 stub 0x00007f8ab9228f10
  0x00007f8ab9228fa0: push   %rbp
  0x00007f8ab9228fa1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab9228fa4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9228fa9: sub    $0x80,%rsp
  0x00007f8ab9228fb0: mov    %rax,0x78(%rsp)
  0x00007f8ab9228fb5: mov    %rcx,0x70(%rsp)
  0x00007f8ab9228fba: mov    %rdx,0x68(%rsp)
  0x00007f8ab9228fbf: mov    %rbx,0x60(%rsp)
  0x00007f8ab9228fc4: mov    %rbp,0x50(%rsp)
  0x00007f8ab9228fc9: mov    %rsi,0x48(%rsp)
  0x00007f8ab9228fce: mov    %rdi,0x40(%rsp)
  0x00007f8ab9228fd3: mov    %r8,0x38(%rsp)
  0x00007f8ab9228fd8: mov    %r9,0x30(%rsp)
  0x00007f8ab9228fdd: mov    %r10,0x28(%rsp)
  0x00007f8ab9228fe2: mov    %r11,0x20(%rsp)
  0x00007f8ab9228fe7: mov    %r12,0x18(%rsp)
  0x00007f8ab9228fec: mov    %r13,0x10(%rsp)
  0x00007f8ab9228ff1: mov    %r14,0x8(%rsp)
  0x00007f8ab9228ff6: mov    %r15,(%rsp)
  0x00007f8ab9228ffa: sub    $0x150,%rsp
  0x00007f8ab9229001: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922900d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9229013: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9229019: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab922901f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9229025: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab922902b: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9229031: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9229037: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab922903d: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9229043: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9229049: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab922904f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9229055: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab922905b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9229061: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9229067: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9229070: movabs $0xdead,%rax
  0x00007f8ab922907a: movabs $0xdead,%rbx
  0x00007f8ab9229084: movabs $0xdead,%rcx
  0x00007f8ab922908e: movabs $0xdead,%rdx
  0x00007f8ab9229098: movabs $0xdead,%rsi
  0x00007f8ab92290a2: movabs $0xdead,%rdi
  0x00007f8ab92290ac: mov    0x10(%rbp),%rsi
  0x00007f8ab92290b0: mov    %r15,%rdi
  0x00007f8ab92290b3: mov    %rbp,0x210(%r15)
  0x00007f8ab92290ba: mov    %rsp,0x200(%r15)
  0x00007f8ab92290c1: callq  0x00007f8ace8babde
  0x00007f8ab92290c6: push   %rax
  0x00007f8ab92290c7: push   %rdi
  0x00007f8ab92290c8: push   %rsi
  0x00007f8ab92290c9: push   %rdx
  0x00007f8ab92290ca: push   %rcx
  0x00007f8ab92290cb: push   %r8
  0x00007f8ab92290cd: push   %r9
  0x00007f8ab92290cf: push   %r10
  0x00007f8ab92290d1: mov    %rsp,%r10
  0x00007f8ab92290d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92290d8: push   %r10
  0x00007f8ab92290da: push   %r11
  0x00007f8ab92290dc: mov    $0x1,%edi
  0x00007f8ab92290e1: callq  0x00007f8acf9c32d0
  0x00007f8ab92290e6: pop    %r11
  0x00007f8ab92290e8: pop    %rsp
  0x00007f8ab92290e9: pop    %r10
  0x00007f8ab92290eb: pop    %r9
  0x00007f8ab92290ed: pop    %r8
  0x00007f8ab92290ef: pop    %rcx
  0x00007f8ab92290f0: pop    %rdx
  0x00007f8ab92290f1: pop    %rsi
  0x00007f8ab92290f2: pop    %rdi
  0x00007f8ab92290f3: cmp    %rax,%r15
  0x00007f8ab92290f6: je     0x00007f8ab9229178
  0x00007f8ab92290fc: callq  0x00007f8aceec2a22
  0x00007f8ab9229101: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9229106: sub    $0x80,%rsp
  0x00007f8ab922910d: mov    %rax,0x78(%rsp)
  0x00007f8ab9229112: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229117: mov    %rdx,0x68(%rsp)
  0x00007f8ab922911c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229121: mov    %rbp,0x50(%rsp)
  0x00007f8ab9229126: mov    %rsi,0x48(%rsp)
  0x00007f8ab922912b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229130: mov    %r8,0x38(%rsp)
  0x00007f8ab9229135: mov    %r9,0x30(%rsp)
  0x00007f8ab922913a: mov    %r10,0x28(%rsp)
  0x00007f8ab922913f: mov    %r11,0x20(%rsp)
  0x00007f8ab9229144: mov    %r12,0x18(%rsp)
  0x00007f8ab9229149: mov    %r13,0x10(%rsp)
  0x00007f8ab922914e: mov    %r14,0x8(%rsp)
  0x00007f8ab9229153: mov    %r15,(%rsp)
  0x00007f8ab9229157: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9229161: movabs $0x7f8ab9229101,%rsi
  0x00007f8ab922916b: mov    %rsp,%rdx
  0x00007f8ab922916e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229172: callq  0x00007f8aceddb9fa
  0x00007f8ab9229177: hlt    
  0x00007f8ab9229178: pop    %rax
  0x00007f8ab9229179: movabs $0x0,%r10
  0x00007f8ab9229183: mov    %r10,0x200(%r15)
  0x00007f8ab922918a: movabs $0x0,%r10
  0x00007f8ab9229194: mov    %r10,0x210(%r15)
  0x00007f8ab922919b: movabs $0x0,%r10
  0x00007f8ab92291a5: mov    %r10,0x208(%r15)
  0x00007f8ab92291ac: cmpq   $0x0,0x8(%r15)
  0x00007f8ab92291b4: je     0x00007f8ab92291c3
  0x00007f8ab92291ba: mov    0x8(%r15),%rax
  0x00007f8ab92291be: jmpq   0x00007f8ab9167c00
  0x00007f8ab92291c3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92291c8: sub    $0x80,%rsp
  0x00007f8ab92291cf: mov    %rax,0x78(%rsp)
  0x00007f8ab92291d4: mov    %rcx,0x70(%rsp)
  0x00007f8ab92291d9: mov    %rdx,0x68(%rsp)
  0x00007f8ab92291de: mov    %rbx,0x60(%rsp)
  0x00007f8ab92291e3: mov    %rbp,0x50(%rsp)
  0x00007f8ab92291e8: mov    %rsi,0x48(%rsp)
  0x00007f8ab92291ed: mov    %rdi,0x40(%rsp)
  0x00007f8ab92291f2: mov    %r8,0x38(%rsp)
  0x00007f8ab92291f7: mov    %r9,0x30(%rsp)
  0x00007f8ab92291fc: mov    %r10,0x28(%rsp)
  0x00007f8ab9229201: mov    %r11,0x20(%rsp)
  0x00007f8ab9229206: mov    %r12,0x18(%rsp)
  0x00007f8ab922920b: mov    %r13,0x10(%rsp)
  0x00007f8ab9229210: mov    %r14,0x8(%rsp)
  0x00007f8ab9229215: mov    %r15,(%rsp)
  0x00007f8ab9229219: movabs $0x7f8acf15c678,%rdi
  0x00007f8ab9229223: movabs $0x7f8ab92291c3,%rsi
  0x00007f8ab922922d: mov    %rsp,%rdx
  0x00007f8ab9229230: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229234: callq  0x00007f8aceddb9fa
  0x00007f8ab9229239: hlt    
  0x00007f8ab922923a: leaveq 
  0x00007f8ab922923b: retq   
  0x00007f8ab922923c: nop
  0x00007f8ab922923d: nop
  0x00007f8ab922923e: nop
  0x00007f8ab922923f: nop

nop
MethodHandle::interpreter_entry::_linkToSpecialDecoding RuntimeStub - throw_class_cast_exception Runtime1 stub 0x00007f8ab91fabd0
  0x00007f8ab91fac60: push   %rbp
  0x00007f8ab91fac61: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91fac64: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fac69: sub    $0x80,%rsp
  0x00007f8ab91fac70: mov    %rax,0x78(%rsp)
  0x00007f8ab91fac75: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fac7a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fac7f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fac84: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fac89: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fac8e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fac93: mov    %r8,0x38(%rsp)
  0x00007f8ab91fac98: mov    %r9,0x30(%rsp)
  0x00007f8ab91fac9d: mov    %r10,0x28(%rsp)
  0x00007f8ab91faca2: mov    %r11,0x20(%rsp)
  0x00007f8ab91faca7: mov    %r12,0x18(%rsp)
  0x00007f8ab91facac: mov    %r13,0x10(%rsp)
  0x00007f8ab91facb1: mov    %r14,0x8(%rsp)
  0x00007f8ab91facb6: mov    %r15,(%rsp)
  0x00007f8ab91facba: sub    $0x150,%rsp
  0x00007f8ab91facc1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91faccd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91facd3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91facd9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91facdf: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91face5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91faceb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91facf1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91facf7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91facfd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91fad03: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91fad09: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91fad0f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91fad15: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91fad1b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91fad21: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91fad27: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91fad30: movabs $0xdead,%rax
  0x00007f8ab91fad3a: movabs $0xdead,%rbx
  0x00007f8ab91fad44: movabs $0xdead,%rcx
  0x00007f8ab91fad4e: movabs $0xdead,%rdx
  0x00007f8ab91fad58: movabs $0xdead,%rsi
  0x00007f8ab91fad62: movabs $0xdead,%rdi
  0x00007f8ab91fad6c: mov    0x10(%rbp),%rsi
  0x00007f8ab91fad70: mov    %r15,%rdi
  0x00007f8ab91fad73: mov    %rbp,0x210(%r15)
  0x00007f8ab91fad7a: mov    %rsp,0x200(%r15)
  0x00007f8ab91fad81: callq  0x00007f8ace8bc2dc
  0x00007f8ab91fad86: push   %rax
  0x00007f8ab91fad87: push   %rdi
  0x00007f8ab91fad88: push   %rsi
  0x00007f8ab91fad89: push   %rdx
  0x00007f8ab91fad8a: push   %rcx
  0x00007f8ab91fad8b: push   %r8
  0x00007f8ab91fad8d: push   %r9
  0x00007f8ab91fad8f: push   %r10
  0x00007f8ab91fad91: mov    %rsp,%r10
  0x00007f8ab91fad94: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fad98: push   %r10
  0x00007f8ab91fad9a: push   %r11
  0x00007f8ab91fad9c: mov    $0x1,%edi
  0x00007f8ab91fada1: callq  0x00007f8acf9c32d0
  0x00007f8ab91fada6: pop    %r11
  0x00007f8ab91fada8: pop    %rsp
  0x00007f8ab91fada9: pop    %r10
  0x00007f8ab91fadab: pop    %r9
  0x00007f8ab91fadad: pop    %r8
  0x00007f8ab91fadaf: pop    %rcx
  0x00007f8ab91fadb0: pop    %rdx
  0x00007f8ab91fadb1: pop    %rsi
  0x00007f8ab91fadb2: pop    %rdi
  0x00007f8ab91fadb3: cmp    %rax,%r15
  0x00007f8ab91fadb6: je     0x00007f8ab91fae38
  0x00007f8ab91fadbc: callq  0x00007f8aceec2a22
  0x00007f8ab91fadc1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fadc6: sub    $0x80,%rsp
  0x00007f8ab91fadcd: mov    %rax,0x78(%rsp)
  0x00007f8ab91fadd2: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fadd7: mov    %rdx,0x68(%rsp)
  0x00007f8ab91faddc: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fade1: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fade6: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fadeb: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fadf0: mov    %r8,0x38(%rsp)
  0x00007f8ab91fadf5: mov    %r9,0x30(%rsp)
  0x00007f8ab91fadfa: mov    %r10,0x28(%rsp)
  0x00007f8ab91fadff: mov    %r11,0x20(%rsp)
  0x00007f8ab91fae04: mov    %r12,0x18(%rsp)
  0x00007f8ab91fae09: mov    %r13,0x10(%rsp)
  0x00007f8ab91fae0e: mov    %r14,0x8(%rsp)
  0x00007f8ab91fae13: mov    %r15,(%rsp)
  0x00007f8ab91fae17: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91fae21: movabs $0x7f8ab91fadc1,%rsi
  0x00007f8ab91fae2b: mov    %rsp,%rdx
  0x00007f8ab91fae2e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fae32: callq  0x00007f8aceddb9fa
  0x00007f8ab91fae37: hlt    
  0x00007f8ab91fae38: pop    %rax
  0x00007f8ab91fae39: movabs $0x0,%r10
  0x00007f8ab91fae43: mov    %r10,0x200(%r15)
  0x00007f8ab91fae4a: movabs $0x0,%r10
  0x00007f8ab91fae54: mov    %r10,0x210(%r15)
  0x00007f8ab91fae5b: movabs $0x0,%r10
  0x00007f8ab91fae65: mov    %r10,0x208(%r15)
  0x00007f8ab91fae6c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91fae74: je     0x00007f8ab91fae83
  0x00007f8ab91fae7a: mov    0x8(%r15),%rax
  0x00007f8ab91fae7e: jmpq   0x00007f8ab9167c00
  0x00007f8ab91fae83: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fae88: sub    $0x80,%rsp
  0x00007f8ab91fae8f: mov    %rax,0x78(%rsp)
  0x00007f8ab91fae94: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fae99: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fae9e: mov    %rbx,0x60(%rsp)
  0x00007f8ab91faea3: mov    %rbp,0x50(%rsp)
  0x00007f8ab91faea8: mov    %rsi,0x48(%rsp)
  0x00007f8ab91faead: mov    %rdi,0x40(%rsp)
  0x00007f8ab91faeb2: mov    %r8,0x38(%rsp)
  0x00007f8ab91faeb7: mov    %r9,0x30(%rsp)
  0x00007f8ab91faebc: mov    %r10,0x28(%rsp)
  0x00007f8ab91faec1: mov    %r11,0x20(%rsp)
  0x00007f8ab91faec6: mov    %r12,0x18(%rsp)
  0x00007f8ab91faecb: mov    %r13,0x10(%rsp)
  0x00007f8ab91faed0: mov    %r14,0x8(%rsp)
  0x00007f8ab91faed5: mov    %r15,(%rsp)
  0x00007f8ab91faed9: movabs $0x7f8acf15c678,%rdi
  0x00007f8ab91faee3: movabs $0x7f8ab91fae83,%rsi
  0x00007f8ab91faeed: mov    %rsp,%rdx
  0x00007f8ab91faef0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91faef4: callq  0x00007f8aceddb9fa
  0x00007f8ab91faef9: hlt    
  0x00007f8ab91faefa: leaveq 
  0x00007f8ab91faefb: retq   
  0x00007f8ab91faefc: nop
  0x00007f8ab91faefd: nop
  0x00007f8ab91faefe: nop
  0x00007f8ab91faeff: nop

 [0x00007f8ab91fb830, 0x00007f8ab91fbc2b[ (1019 bytes)Decoding RuntimeStub - _rethrow_Java 0x00007f8ab91faad0
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91fab20: sub    $0x18,%rsp
  0x00007f8ab91fab27: mov    %rbp,0x10(%rsp)
  0x00007f8ab91fab2c: rex.W pushq 0x18(%rsp)
  0x00007f8ab91fab31: rex.W popq (%rsp)
  0x00007f8ab91fab35: mov    %rsp,0x200(%r15)
  0x00007f8ab91fab3c: mov    %rsi,%rdi
  0x00007f8ab91fab3f: mov    %r15,%rsi
  0x00007f8ab91fab42: mov    (%rsp),%rdx
  0x00007f8ab91fab46: movabs $0x7f8acef7b7d4,%r10
  0x00007f8ab91fab50: callq  *%r10
  0x00007f8ab91fab53: mov    %rax,%r10
  0x00007f8ab91fab56: mov    %r12,0x200(%r15)
  0x00007f8ab91fab5d: mov    %r12,0x208(%r15)
  0x00007f8ab91fab64: mov    0x260(%r15),%rax
  0x00007f8ab91fab6b: mov    %r12,0x260(%r15)
  0x00007f8ab91fab72: cmp    0x8(%r15),%r12
  0x00007f8ab91fab76: jne    0x00007f8ab91fab81
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91fab78: add    $0x10,%rsp
  0x00007f8ab91fab7c: pop    %rbp
  0x00007f8ab91fab7d: pop    %rdx
  0x00007f8ab91fab7e: jmpq   *%r10
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91fab81: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91fab8b: xor    %ebx,%ebx
  0x00007f8ab91fab8d: add    $0x10,%rsp
  0x00007f8ab91fab91: pop    %rbp
  0x00007f8ab91fab92: jmpq   *%r10
  0x00007f8ab91fab95: hlt    
  0x00007f8ab91fab96: hlt    
  0x00007f8ab91fab97: hlt    

Decoding RuntimeStub - throw_incompatible_class_change_error Runtime1 stub 0x00007f8ab91fa790
  0x00007f8ab91fa820: push   %rbp
  0x00007f8ab91fa821: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91fa824: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fa829: sub    $0x80,%rsp
  0x00007f8ab91fa830: mov    %rax,0x78(%rsp)
  0x00007f8ab91fa835: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fa83a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fa83f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fa844: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fa849: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fa84e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fa853: mov    %r8,0x38(%rsp)
  0x00007f8ab91fa858: mov    %r9,0x30(%rsp)
  0x00007f8ab91fa85d: mov    %r10,0x28(%rsp)
  0x00007f8ab91fa862: mov    %r11,0x20(%rsp)
  0x00007f8ab91fa867: mov    %r12,0x18(%rsp)
  0x00007f8ab91fa86c: mov    %r13,0x10(%rsp)
  0x00007f8ab91fa871: mov    %r14,0x8(%rsp)
  0x00007f8ab91fa876: mov    %r15,(%rsp)
  0x00007f8ab91fa87a: sub    $0x150,%rsp
  0x00007f8ab91fa881: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91fa88d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91fa893: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91fa899: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91fa89f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91fa8a5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91fa8ab: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91fa8b1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91fa8b7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91fa8bd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91fa8c3: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91fa8c9: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91fa8cf: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91fa8d5: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91fa8db: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91fa8e1: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91fa8e7: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91fa8f0: movabs $0xdead,%rax
  0x00007f8ab91fa8fa: movabs $0xdead,%rbx
  0x00007f8ab91fa904: movabs $0xdead,%rcx
  0x00007f8ab91fa90e: movabs $0xdead,%rdx
  0x00007f8ab91fa918: movabs $0xdead,%rsi
  0x00007f8ab91fa922: movabs $0xdead,%rdi
  0x00007f8ab91fa92c: mov    %r15,%rdi
  0x00007f8ab91fa92f: mov    %rbp,0x210(%r15)
  0x00007f8ab91fa936: mov    %rsp,0x200(%r15)
  0x00007f8ab91fa93d: callq  0x00007f8ace8bc4c6
  0x00007f8ab91fa942: push   %rax
  0x00007f8ab91fa943: push   %rdi
  0x00007f8ab91fa944: push   %rsi
  0x00007f8ab91fa945: push   %rdx
  0x00007f8ab91fa946: push   %rcx
  0x00007f8ab91fa947: push   %r8
  0x00007f8ab91fa949: push   %r9
  0x00007f8ab91fa94b: push   %r10
  0x00007f8ab91fa94d: mov    %rsp,%r10
  0x00007f8ab91fa950: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fa954: push   %r10
  0x00007f8ab91fa956: push   %r11
  0x00007f8ab91fa958: mov    $0x1,%edi
  0x00007f8ab91fa95d: callq  0x00007f8acf9c32d0
  0x00007f8ab91fa962: pop    %r11
  0x00007f8ab91fa964: pop    %rsp
  0x00007f8ab91fa965: pop    %r10
  0x00007f8ab91fa967: pop    %r9
  0x00007f8ab91fa969: pop    %r8
  0x00007f8ab91fa96b: pop    %rcx
  0x00007f8ab91fa96c: pop    %rdx
  0x00007f8ab91fa96d: pop    %rsi
  0x00007f8ab91fa96e: pop    %rdi
  0x00007f8ab91fa96f: cmp    %rax,%r15
  0x00007f8ab91fa972: je     0x00007f8ab91fa9f4
  0x00007f8ab91fa978: callq  0x00007f8aceec2a22
  0x00007f8ab91fa97d: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fa982: sub    $0x80,%rsp
  0x00007f8ab91fa989: mov    %rax,0x78(%rsp)
  0x00007f8ab91fa98e: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fa993: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fa998: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fa99d: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fa9a2: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fa9a7: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fa9ac: mov    %r8,0x38(%rsp)
  0x00007f8ab91fa9b1: mov    %r9,0x30(%rsp)
  0x00007f8ab91fa9b6: mov    %r10,0x28(%rsp)
  0x00007f8ab91fa9bb: mov    %r11,0x20(%rsp)
  0x00007f8ab91fa9c0: mov    %r12,0x18(%rsp)
  0x00007f8ab91fa9c5: mov    %r13,0x10(%rsp)
  0x00007f8ab91fa9ca: mov    %r14,0x8(%rsp)
  0x00007f8ab91fa9cf: mov    %r15,(%rsp)
  0x00007f8ab91fa9d3: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91fa9dd: movabs $0x7f8ab91fa97d,%rsi
  0x00007f8ab91fa9e7: mov    %rsp,%rdx
  0x00007f8ab91fa9ea: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fa9ee: callq  0x00007f8aceddb9fa
  0x00007f8ab91fa9f3: hlt    
  0x00007f8ab91fa9f4: pop    %rax
  0x00007f8ab91fa9f5: movabs $0x0,%r10
  0x00007f8ab91fa9ff: mov    %r10,0x200(%r15)
  0x00007f8ab91faa06: movabs $0x0,%r10
  0x00007f8ab91faa10: mov    %r10,0x210(%r15)
  0x00007f8ab91faa17: movabs $0x0,%r10
  0x00007f8ab91faa21: mov    %r10,0x208(%r15)
  0x00007f8ab91faa28: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91faa30: je     0x00007f8ab91faa3f
  0x00007f8ab91faa36: mov    0x8(%r15),%rax
  0x00007f8ab91faa3a: jmpq   0x00007f8ab9167c00
  0x00007f8ab91faa3f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91faa44: sub    $0x80,%rsp
  0x00007f8ab91faa4b: mov    %rax,0x78(%rsp)
  0x00007f8ab91faa50: mov    %rcx,0x70(%rsp)
  0x00007f8ab91faa55: mov    %rdx,0x68(%rsp)
  0x00007f8ab91faa5a: mov    %rbx,0x60(%rsp)
  0x00007f8ab91faa5f: mov    %rbp,0x50(%rsp)
  0x00007f8ab91faa64: mov    %rsi,0x48(%rsp)
  0x00007f8ab91faa69: mov    %rdi,0x40(%rsp)
  0x00007f8ab91faa6e: mov    %r8,0x38(%rsp)
  0x00007f8ab91faa73: mov    %r9,0x30(%rsp)
  0x00007f8ab91faa78: mov    %r10,0x28(%rsp)
  0x00007f8ab91faa7d: mov    %r11,0x20(%rsp)
  0x00007f8ab91faa82: mov    %r12,0x18(%rsp)
  0x00007f8ab91faa87: mov    %r13,0x10(%rsp)
  0x00007f8ab91faa8c: mov    %r14,0x8(%rsp)
  0x00007f8ab91faa91: mov    %r15,(%rsp)
  0x00007f8ab91faa95: movabs $0x7f8acf15c678,%rdi
  0x00007f8ab91faa9f: movabs $0x7f8ab91faa3f,%rsi
  0x00007f8ab91faaa9: mov    %rsp,%rdx
  0x00007f8ab91faaac: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91faab0: callq  0x00007f8aceddb9fa
  0x00007f8ab91faab5: hlt    
  0x00007f8ab91faab6: leaveq 
  0x00007f8ab91faab7: retq   

Decoding RuntimeStub - slow_subtype_check Runtime1 stub 0x00007f8ab91fa690
  0x00007f8ab91fa700: push   %rdi
  0x00007f8ab91fa701: push   %rsi
  0x00007f8ab91fa702: push   %rcx
  0x00007f8ab91fa703: push   %rax
  0x00007f8ab91fa704: mov    0x30(%rsp),%rsi
  0x00007f8ab91fa709: mov    0x28(%rsp),%rax
  0x00007f8ab91fa70e: push   %rax
  0x00007f8ab91fa70f: mov    %rax,%rax
  0x00007f8ab91fa712: movabs $0x7f8acf98d470,%rcx
  0x00007f8ab91fa71c: incl   (%rcx)
  0x00007f8ab91fa71e: mov    0x28(%rsi),%rdi
  0x00007f8ab91fa722: mov    (%rdi),%ecx
  0x00007f8ab91fa724: add    $0x8,%rdi
  0x00007f8ab91fa728: test   %rax,%rax
  0x00007f8ab91fa72b: repnz scas %es:(%rdi),%rax
  0x00007f8ab91fa72e: pop    %rax
  0x00007f8ab91fa72f: jne    0x00007f8ab91fa747
  0x00007f8ab91fa735: mov    %rax,0x20(%rsi)
  0x00007f8ab91fa739: movq   $0x1,0x30(%rsp)
  0x00007f8ab91fa742: pop    %rax
  0x00007f8ab91fa743: pop    %rcx
  0x00007f8ab91fa744: pop    %rsi
  0x00007f8ab91fa745: pop    %rdi
  0x00007f8ab91fa746: retq   
  0x00007f8ab91fa747: movabs $0x0,%r10
  0x00007f8ab91fa751: mov    %r10,0x30(%rsp)
  0x00007f8ab91fa756: pop    %rax
  0x00007f8ab91fa757: pop    %rcx
  0x00007f8ab91fa758: pop    %rsi
  0x00007f8ab91fa759: pop    %rdi
  0x00007f8ab91fa75a: retq   
  0x00007f8ab91fa75b: nop
  0x00007f8ab91fa75c: nop
  0x00007f8ab91fa75d: nop
  0x00007f8ab91fa75e: nop
  0x00007f8ab91fa75f: nop

Decoding RuntimeStub - _slow_arraycopy_Java 0x00007f8ab91fa5d0
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91fa620: sub    $0x8,%rsp
  0x00007f8ab91fa627: mov    %rbp,(%rsp)
  0x00007f8ab91fa62b: mov    %rsp,0x200(%r15)
  0x00007f8ab91fa632: mov    %rsi,%rdi
  0x00007f8ab91fa635: mov    %edx,%esi
  0x00007f8ab91fa637: mov    %rcx,%rdx
  0x00007f8ab91fa63a: mov    %r8d,%ecx
  0x00007f8ab91fa63d: mov    %r9d,%r8d
  0x00007f8ab91fa640: mov    %r15,%r9
  0x00007f8ab91fa643: movabs $0x7f8acef8c19a,%r10
  0x00007f8ab91fa64d: callq  *%r10
  0x00007f8ab91fa650: mov    %r12,0x200(%r15)
  0x00007f8ab91fa657: mov    %r12,0x208(%r15)
  0x00007f8ab91fa65e: cmp    0x8(%r15),%r12
  0x00007f8ab91fa662: jne    0x00007f8ab91fa666
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91fa664: pop    %rbp
  0x00007f8ab91fa665: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91fa666: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91fa670: xor    %ebx,%ebx
  0x00007f8ab91fa672: pop    %rbp
  0x00007f8ab91fa673: jmpq   *%r10
  0x00007f8ab91fa676: hlt    
  0x00007f8ab91fa677: hlt    


  0x00007f8ab91fb830: nop
Decoding RuntimeStub - monitorenter Runtime1 stub 0x00007f8ab91fa1d0
  0x00007f8ab91fa260: push   %rbp
  0x00007f8ab91fa261: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91fa264: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fa269: sub    $0x80,%rsp
  0x00007f8ab91fa270: mov    %rax,0x78(%rsp)
  0x00007f8ab91fa275: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fa27a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fa27f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fa284: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fa289: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fa28e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fa293: mov    %r8,0x38(%rsp)
  0x00007f8ab91fa298: mov    %r9,0x30(%rsp)
  0x00007f8ab91fa29d: mov    %r10,0x28(%rsp)
  0x00007f8ab91fa2a2: mov    %r11,0x20(%rsp)
  0x00007f8ab91fa2a7: mov    %r12,0x18(%rsp)
  0x00007f8ab91fa2ac: mov    %r13,0x10(%rsp)
  0x00007f8ab91fa2b1: mov    %r14,0x8(%rsp)
  0x00007f8ab91fa2b6: mov    %r15,(%rsp)
  0x00007f8ab91fa2ba: sub    $0x150,%rsp
  0x00007f8ab91fa2c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91fa2cd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91fa2d3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91fa2d9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91fa2df: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91fa2e5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91fa2eb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91fa2f1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91fa2f7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91fa2fd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91fa303: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91fa309: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91fa30f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91fa315: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91fa31b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91fa321: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91fa327: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91fa330: mov    0x18(%rbp),%rax
  0x00007f8ab91fa334: mov    0x10(%rbp),%rbx
  0x00007f8ab91fa338: mov    %rax,%rsi
  0x00007f8ab91fa33b: mov    %rbx,%rdx
  0x00007f8ab91fa33e: mov    %r15,%rdi
  0x00007f8ab91fa341: mov    %rbp,0x210(%r15)
  0x00007f8ab91fa348: mov    %rsp,0x200(%r15)
  0x00007f8ab91fa34f: callq  0x00007f8ace8bc674
  0x00007f8ab91fa354: push   %rax
  0x00007f8ab91fa355: push   %rdi
  0x00007f8ab91fa356: push   %rsi
  0x00007f8ab91fa357: push   %rdx
  0x00007f8ab91fa358: push   %rcx
  0x00007f8ab91fa359: push   %r8
  0x00007f8ab91fa35b: push   %r9
  0x00007f8ab91fa35d: push   %r10
  0x00007f8ab91fa35f: mov    %rsp,%r10
  0x00007f8ab91fa362: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fa366: push   %r10
  0x00007f8ab91fa368: push   %r11
  0x00007f8ab91fa36a: mov    $0x1,%edi
  0x00007f8ab91fa36f: callq  0x00007f8acf9c32d0
  0x00007f8ab91fa374: pop    %r11
  0x00007f8ab91fa376: pop    %rsp
  0x00007f8ab91fa377: pop    %r10
  0x00007f8ab91fa379: pop    %r9
  0x00007f8ab91fa37b: pop    %r8
  0x00007f8ab91fa37d: pop    %rcx
  0x00007f8ab91fa37e: pop    %rdx
  0x00007f8ab91fa37f: pop    %rsi
  0x00007f8ab91fa380: pop    %rdi
  0x00007f8ab91fa381: cmp    %rax,%r15
  0x00007f8ab91fa384: je     0x00007f8ab91fa406
  0x00007f8ab91fa38a: callq  0x00007f8aceec2a22
  0x00007f8ab91fa38f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fa394: sub    $0x80,%rsp
  0x00007f8ab91fa39b: mov    %rax,0x78(%rsp)
  0x00007f8ab91fa3a0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fa3a5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fa3aa: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fa3af: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fa3b4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fa3b9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fa3be: mov    %r8,0x38(%rsp)
  0x00007f8ab91fa3c3: mov    %r9,0x30(%rsp)
  0x00007f8ab91fa3c8: mov    %r10,0x28(%rsp)
  0x00007f8ab91fa3cd: mov    %r11,0x20(%rsp)
  0x00007f8ab91fa3d2: mov    %r12,0x18(%rsp)
  0x00007f8ab91fa3d7: mov    %r13,0x10(%rsp)
  0x00007f8ab91fa3dc: mov    %r14,0x8(%rsp)
  0x00007f8ab91fa3e1: mov    %r15,(%rsp)
  0x00007f8ab91fa3e5: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91fa3ef: movabs $0x7f8ab91fa38f,%rsi
  0x00007f8ab91fa3f9: mov    %rsp,%rdx
  0x00007f8ab91fa3fc: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fa400: callq  0x00007f8aceddb9fa
  0x00007f8ab91fa405: hlt    
  0x00007f8ab91fa406: pop    %rax
  0x00007f8ab91fa407: movabs $0x0,%r10
  0x00007f8ab91fa411: mov    %r10,0x200(%r15)
  0x00007f8ab91fa418: movabs $0x0,%r10
  0x00007f8ab91fa422: mov    %r10,0x210(%r15)
  0x00007f8ab91fa429: movabs $0x0,%r10
  0x00007f8ab91fa433: mov    %r10,0x208(%r15)
  0x00007f8ab91fa43a: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91fa442: je     0x00007f8ab91fa451
  0x00007f8ab91fa448: mov    0x8(%r15),%rax
  0x00007f8ab91fa44c: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab91fa451: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91fa457: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91fa45d: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91fa463: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91fa469: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91fa46f: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91fa475: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91fa47b: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91fa481: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91fa487: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91fa48d: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91fa493: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91fa499: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91fa49f: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91fa4a5: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91fa4ab: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91fa4b4: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91fa4c0: je     0x00007f8ab91fa53d
  0x00007f8ab91fa4c6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fa4cb: sub    $0x80,%rsp
  0x00007f8ab91fa4d2: mov    %rax,0x78(%rsp)
  0x00007f8ab91fa4d7: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fa4dc: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fa4e1: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fa4e6: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fa4eb: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fa4f0: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fa4f5: mov    %r8,0x38(%rsp)
  0x00007f8ab91fa4fa: mov    %r9,0x30(%rsp)
  0x00007f8ab91fa4ff: mov    %r10,0x28(%rsp)
  0x00007f8ab91fa504: mov    %r11,0x20(%rsp)
  0x00007f8ab91fa509: mov    %r12,0x18(%rsp)
  0x00007f8ab91fa50e: mov    %r13,0x10(%rsp)
  0x00007f8ab91fa513: mov    %r14,0x8(%rsp)
  0x00007f8ab91fa518: mov    %r15,(%rsp)
  0x00007f8ab91fa51c: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91fa526: movabs $0x7f8ab91fa4c6,%rsi
  0x00007f8ab91fa530: mov    %rsp,%rdx
  0x00007f8ab91fa533: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fa537: callq  0x00007f8aceddb9fa
  0x00007f8ab91fa53c: hlt    
  0x00007f8ab91fa53d: add    $0x150,%rsp
  0x00007f8ab91fa544: mov    (%rsp),%r15
  0x00007f8ab91fa548: mov    0x8(%rsp),%r14
  0x00007f8ab91fa54d: mov    0x10(%rsp),%r13
  0x00007f8ab91fa552: mov    0x18(%rsp),%r12
  0x00007f8ab91fa557: mov    0x20(%rsp),%r11
  0x00007f8ab91fa55c: mov    0x28(%rsp),%r10
  0x00007f8ab91fa561: mov    0x30(%rsp),%r9
  0x00007f8ab91fa566: mov    0x38(%rsp),%r8
  0x00007f8ab91fa56b: mov    0x40(%rsp),%rdi
  0x00007f8ab91fa570: mov    0x48(%rsp),%rsi
  0x00007f8ab91fa575: mov    0x50(%rsp),%rbp
  0x00007f8ab91fa57a: mov    0x60(%rsp),%rbx
  0x00007f8ab91fa57f: mov    0x68(%rsp),%rdx
  0x00007f8ab91fa584: mov    0x70(%rsp),%rcx
  0x00007f8ab91fa589: mov    0x78(%rsp),%rax
  0x00007f8ab91fa58e: add    $0x80,%rsp
  0x00007f8ab91fa595: leaveq 
  0x00007f8ab91fa596: retq   
  0x00007f8ab91fa597: nop

Decoding RuntimeStub - _register_finalizer_Java 0x00007f8ab91fa110
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91fa160: sub    $0x8,%rsp
  0x00007f8ab91fa167: mov    %rbp,(%rsp)
  0x00007f8ab91fa16b: mov    %rsp,0x200(%r15)
  0x00007f8ab91fa172: mov    %rsi,%rdi
  0x00007f8ab91fa175: mov    %r15,%rsi
  0x00007f8ab91fa178: movabs $0x7f8acef7bce0,%r10
  0x00007f8ab91fa182: callq  *%r10
  0x00007f8ab91fa185: mov    %r12,0x200(%r15)
  0x00007f8ab91fa18c: mov    %r12,0x208(%r15)
  0x00007f8ab91fa193: cmp    0x8(%r15),%r12
  0x00007f8ab91fa197: jne    0x00007f8ab91fa19b
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91fa199: pop    %rbp
  0x00007f8ab91fa19a: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91fa19b: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91fa1a5: xor    %ebx,%ebx
  0x00007f8ab91fa1a7: pop    %rbp
  0x00007f8ab91fa1a8: jmpq   *%r10
  0x00007f8ab91fa1ab: hlt    
  0x00007f8ab91fa1ac: hlt    
  0x00007f8ab91fa1ad: hlt    
  0x00007f8ab91fa1ae: hlt    
  0x00007f8ab91fa1af: hlt    

  0x00007f8ab91fb831: nop
  0x00007f8ab91fb832: nop
  0x00007f8ab91fb833: nop
  0x00007f8ab91fb834: nop
  0x00007f8ab91fb835: nop
  0x00007f8ab91fb836: nop
  0x00007f8ab91fb837: nop
  0x00007f8ab91fb838: nop
  0x00007f8ab91fb839: nop
  0x00007f8ab91fb83a: nop
  0x00007f8ab91fb83b: nop
  0x00007f8ab91fb83c: nop
  0x00007f8ab91fb83d: nop
  0x00007f8ab91fb83e: nop
  0x00007f8ab91fb83f: nop
  ;; verify_intrinsic_id {
  0x00007f8ab91fb840: cmpb   $0xb9,0x32(%rbx)
  0x00007f8ab91fb844: je     0x00007f8ab91fb8c1
  ;; bad Method*::intrinsic_id
  0x00007f8ab91fb84a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb84f: sub    $0x80,%rsp
  0x00007f8ab91fb856: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb85b: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb860: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb865: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb86a: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb86f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb874: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb879: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb87e: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb883: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb888: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb88d: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb892: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb897: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb89c: mov    %r15,(%rsp)
  0x00007f8ab91fb8a0: movabs $0x7f8acf318ce9,%rdi
  0x00007f8ab91fb8aa: movabs $0x7f8ab91fb84a,%rsi
  0x00007f8ab91fb8b4: mov    %rsp,%rdx
  0x00007f8ab91fb8b7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fb8bb: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb8c0: hlt    
  ;; } verify_intrinsic_id
  0x00007f8ab91fb8c1: mov    0x10(%rbx),%rdx
  0x00007f8ab91fb8c5: movzwl 0x2c(%rdx),%edx
  0x00007f8ab91fb8c9: mov    (%rsp,%rdx,8),%rcx
  0x00007f8ab91fb8cd: pop    %rax
  0x00007f8ab91fb8ce: pop    %rbx
  0x00007f8ab91fb8cf: push   %rax
  ;; verify_klass {
  0x00007f8ab91fb8d0: test   %rbx,%rbx
  0x00007f8ab91fb8d3: je     0x00007f8ab91fb904
  0x00007f8ab91fb8d9: push   %rdi
  0x00007f8ab91fb8da: push   %r10
  0x00007f8ab91fb8dc: mov    0x8(%rbx),%edi
  0x00007f8ab91fb8df: shl    $0x3,%rdi
  0x00007f8ab91fb8e3: cmp    0x16793e4e(%rip),%rdi        # 0x00007f8acf98f738
  0x00007f8ab91fb8ea: je     0x00007f8ab91fb97b
  0x00007f8ab91fb8f0: mov    0x38(%rdi),%rdi
  0x00007f8ab91fb8f4: cmp    0x16793e3d(%rip),%rdi        # 0x00007f8acf98f738
  0x00007f8ab91fb8fb: je     0x00007f8ab91fb97b
  0x00007f8ab91fb901: pop    %r10
  0x00007f8ab91fb903: pop    %rdi
  ;; MemberName required for invokeVirtual etc.
  0x00007f8ab91fb904: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb909: sub    $0x80,%rsp
  0x00007f8ab91fb910: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb915: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb91a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb91f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb924: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb929: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb92e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb933: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb938: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb93d: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb942: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb947: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb94c: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb951: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb956: mov    %r15,(%rsp)
  0x00007f8ab91fb95a: movabs $0x7f8acf318e00,%rdi
  0x00007f8ab91fb964: movabs $0x7f8ab91fb904,%rsi
  0x00007f8ab91fb96e: mov    %rsp,%rdx
  0x00007f8ab91fb971: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fb975: callq  0x00007f8aceddb9fa
  0x00007f8ab91fb97a: hlt    
  ;; L_ok:
  0x00007f8ab91fb97b: pop    %r10
  0x00007f8ab91fb97d: pop    %rdi
  ;; } verify_klass
  0x00007f8ab91fb97e: cmp    (%rcx),%rax
  ;; check_receiver {
  0x00007f8ab91fb981: mov    0x8(%rcx),%r10d
  0x00007f8ab91fb985: shl    $0x3,%r10
  0x00007f8ab91fb989: mov    0x20(%rbx),%r11d
  0x00007f8ab91fb98d: push   %r10
  0x00007f8ab91fb98f: cmp    0x167b284a(%rip),%r12        # 0x00007f8acf9ae1e0
  0x00007f8ab91fb996: je     0x00007f8ab91fba13
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f8ab91fb99c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fb9a1: sub    $0x80,%rsp
  0x00007f8ab91fb9a8: mov    %rax,0x78(%rsp)
  0x00007f8ab91fb9ad: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fb9b2: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fb9b7: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fb9bc: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fb9c1: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fb9c6: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fb9cb: mov    %r8,0x38(%rsp)
  0x00007f8ab91fb9d0: mov    %r9,0x30(%rsp)
  0x00007f8ab91fb9d5: mov    %r10,0x28(%rsp)
  0x00007f8ab91fb9da: mov    %r11,0x20(%rsp)
  0x00007f8ab91fb9df: mov    %r12,0x18(%rsp)
  0x00007f8ab91fb9e4: mov    %r13,0x10(%rsp)
  0x00007f8ab91fb9e9: mov    %r14,0x8(%rsp)
  0x00007f8ab91fb9ee: mov    %r15,(%rsp)
  0x00007f8ab91fb9f2: movabs $0x7f8acf2f2068,%rdi
  0x00007f8ab91fb9fc: movabs $0x7f8ab91fb99c,%rsi
  0x00007f8ab91fba06: mov    %rsp,%rdx
  0x00007f8ab91fba09: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fba0d: callq  0x00007f8aceddb9fa
  0x00007f8ab91fba12: hlt    
  0x00007f8ab91fba13: pop    %r10
  ;; verify_klass {
  0x00007f8ab91fba15: test   %r11,%r11
  0x00007f8ab91fba18: je     0x00007f8ab91fba4a
  0x00007f8ab91fba1e: push   %rdi
  0x00007f8ab91fba1f: push   %r10
  0x00007f8ab91fba21: mov    0x8(%r11),%edi
  0x00007f8ab91fba25: shl    $0x3,%rdi
  0x00007f8ab91fba29: cmp    0x16793b88(%rip),%rdi        # 0x00007f8acf98f5b8
  0x00007f8ab91fba30: je     0x00007f8ab91fbac1
  0x00007f8ab91fba36: mov    0x38(%rdi),%rdi
  0x00007f8ab91fba3a: cmp    0x16793b77(%rip),%rdi        # 0x00007f8acf98f5b8
  0x00007f8ab91fba41: je     0x00007f8ab91fbac1
  0x00007f8ab91fba47: pop    %r10
  0x00007f8ab91fba49: pop    %rdi
  ;; MH argument is a Class
  0x00007f8ab91fba4a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fba4f: sub    $0x80,%rsp
  0x00007f8ab91fba56: mov    %rax,0x78(%rsp)
  0x00007f8ab91fba5b: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fba60: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fba65: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fba6a: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fba6f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fba74: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fba79: mov    %r8,0x38(%rsp)
  0x00007f8ab91fba7e: mov    %r9,0x30(%rsp)
  0x00007f8ab91fba83: mov    %r10,0x28(%rsp)
  0x00007f8ab91fba88: mov    %r11,0x20(%rsp)
  0x00007f8ab91fba8d: mov    %r12,0x18(%rsp)
  0x00007f8ab91fba92: mov    %r13,0x10(%rsp)
  0x00007f8ab91fba97: mov    %r14,0x8(%rsp)
  0x00007f8ab91fba9c: mov    %r15,(%rsp)
  0x00007f8ab91fbaa0: movabs $0x7f8acf3189a8,%rdi
  0x00007f8ab91fbaaa: movabs $0x7f8ab91fba4a,%rsi
  0x00007f8ab91fbab4: mov    %rsp,%rdx
  0x00007f8ab91fbab7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fbabb: callq  0x00007f8aceddb9fa
  0x00007f8ab91fbac0: hlt    
  ;; L_ok:
  0x00007f8ab91fbac1: pop    %r10
  0x00007f8ab91fbac3: pop    %rdi
  ;; } verify_klass
  0x00007f8ab91fbac4: mov    0x48(%r11),%r11
  0x00007f8ab91fbac8: cmp    %r11,%r10
  0x00007f8ab91fbacb: je     0x00007f8ab91fbb8d
  0x00007f8ab91fbad1: mov    0x10(%r11),%eax
  0x00007f8ab91fbad5: cmp    (%r10,%rax,1),%r11
  0x00007f8ab91fbad9: je     0x00007f8ab91fbb8d
  0x00007f8ab91fbadf: cmp    $0x20,%eax
  0x00007f8ab91fbae2: jne    0x00007f8ab91fbb16
  0x00007f8ab91fbae8: mov    %r11,%rax
  0x00007f8ab91fbaeb: push   %rcx
  0x00007f8ab91fbaec: push   %rdi
  0x00007f8ab91fbaed: movabs $0x7f8acf98d470,%rcx
  0x00007f8ab91fbaf7: incl   (%rcx)
  0x00007f8ab91fbaf9: mov    0x28(%r10),%rdi
  0x00007f8ab91fbafd: mov    (%rdi),%ecx
  0x00007f8ab91fbaff: add    $0x8,%rdi
  0x00007f8ab91fbb03: test   %rax,%rax
  0x00007f8ab91fbb06: repnz scas %es:(%rdi),%rax
  0x00007f8ab91fbb09: pop    %rdi
  0x00007f8ab91fbb0a: pop    %rcx
  0x00007f8ab91fbb0b: jne    0x00007f8ab91fbb16
  0x00007f8ab91fbb0d: mov    %r11,0x20(%r10)
  0x00007f8ab91fbb11: jmpq   0x00007f8ab91fbb8d
  ;; receiver class disagrees with MemberName.clazz
  0x00007f8ab91fbb16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fbb1b: sub    $0x80,%rsp
  0x00007f8ab91fbb22: mov    %rax,0x78(%rsp)
  0x00007f8ab91fbb27: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fbb2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fbb31: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fbb36: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fbb3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fbb40: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fbb45: mov    %r8,0x38(%rsp)
  0x00007f8ab91fbb4a: mov    %r9,0x30(%rsp)
  0x00007f8ab91fbb4f: mov    %r10,0x28(%rsp)
  0x00007f8ab91fbb54: mov    %r11,0x20(%rsp)
  0x00007f8ab91fbb59: mov    %r12,0x18(%rsp)
  0x00007f8ab91fbb5e: mov    %r13,0x10(%rsp)
  0x00007f8ab91fbb63: mov    %r14,0x8(%rsp)
  0x00007f8ab91fbb68: mov    %r15,(%rsp)
  0x00007f8ab91fbb6c: movabs $0x7f8acf318ee8,%rdi
  0x00007f8ab91fbb76: movabs $0x7f8ab91fbb16,%rsi
  0x00007f8ab91fbb80: mov    %rsp,%rdx
  0x00007f8ab91fbb83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fbb87: callq  0x00007f8aceddb9fa
  0x00007f8ab91fbb8c: hlt    
  ;; } check_receiver
  ;; verify_ref_kind {
  0x00007f8ab91fbb8d: mov    0xc(%rbx),%eax
  0x00007f8ab91fbb90: shr    $0x18,%eax
  0x00007f8ab91fbb93: and    $0xf,%eax
  0x00007f8ab91fbb96: cmp    $0x7,%eax
  0x00007f8ab91fbb99: je     0x00007f8ab91fbc16
  ;; verify_ref_kind expected 7
  0x00007f8ab91fbb9f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fbba4: sub    $0x80,%rsp
  0x00007f8ab91fbbab: mov    %rax,0x78(%rsp)
  0x00007f8ab91fbbb0: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fbbb5: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fbbba: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fbbbf: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fbbc4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fbbc9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fbbce: mov    %r8,0x38(%rsp)
  0x00007f8ab91fbbd3: mov    %r9,0x30(%rsp)
  0x00007f8ab91fbbd8: mov    %r10,0x28(%rsp)
  0x00007f8ab91fbbdd: mov    %r11,0x20(%rsp)
  0x00007f8ab91fbbe2: mov    %r12,0x18(%rsp)
  0x00007f8ab91fbbe7: mov    %r13,0x10(%rsp)
  0x00007f8ab91fbbec: mov    %r14,0x8(%rsp)
  0x00007f8ab91fbbf1: mov    %r15,(%rsp)
  0x00007f8ab91fbbf5: movabs $0x7f8ac819a320,%rdi
  0x00007f8ab91fbbff: movabs $0x7f8ab91fbb9f,%rsi
  0x00007f8ab91fbc09: mov    %rsp,%rdx
  0x00007f8ab91fbc0c: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fbc10: callq  0x00007f8aceddb9fa
  0x00007f8ab91fbc15: hlt    
  ;; } verify_ref_kind
  0x00007f8ab91fbc16: mov    0x18(%rbx),%rbx
  0x00007f8ab91fbc1a: test   %rbx,%rbx
  0x00007f8ab91fbc1d: je     0x00007f8ab91fbc26
  0x00007f8ab91fbc23: jmpq   *0x60(%rbx)
  0x00007f8ab91fbc26: jmpq   0x00007f8ab9105480

MethodHandle::interpreter_entry::_linkToInterface [0x00007f8ab91fbc2b, 0x00007f8ab91fc01e[ (1011 bytes)
  0x00007f8ab91fbc2b: nop
  0x00007f8ab91fbc2c: nop
  0x00007f8ab91fbc2d: nop
  0x00007f8ab91fbc2e: nop
  0x00007f8ab91fbc2f: nop
  0x00007f8ab91fbc30: nop
  0x00007f8ab91fbc31: nop
  0x00007f8ab91fbc32: nop
  0x00007f8ab91fbc33: nop
  0x00007f8ab91fbc34: nop
  0x00007f8ab91fbc35: nop
  0x00007f8ab91fbc36: nop
  0x00007f8ab91fbc37: nop
  0x00007f8ab91fbc38: nop
  0x00007f8ab91fbc39: nop
  0x00007f8ab91fbc3a: nop
  0x00007f8ab91fbc3b: nop
  0x00007f8ab91fbc3c: nop
  0x00007f8ab91fbc3d: nop
  0x00007f8ab91fbc3e: nop
  0x00007f8ab91fbc3f: nop
  ;; verify_intrinsic_id {
  0x00007f8ab91fbc40: cmpb   $0xba,0x32(%rbx)
  0x00007f8ab91fbc44: je     0x00007f8ab91fbcc1
  ;; bad Method*::intrinsic_id
  0x00007f8ab91fbc4a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fbc4f: sub    $0x80,%rsp
  0x00007f8ab91fbc56: mov    %rax,0x78(%rsp)
  0x00007f8ab91fbc5b: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fbc60: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fbc65: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fbc6a: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fbc6f: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fbc74: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fbc79: mov    %r8,0x38(%rsp)
  0x00007f8ab91fbc7e: mov    %r9,0x30(%rsp)
  0x00007f8ab91fbc83: mov    %r10,0x28(%rsp)
  0x00007f8ab91fbc88: mov    %r11,0x20(%rsp)
  0x00007f8ab91fbc8d: mov    %r12,0x18(%rsp)
  0x00007f8ab91fbc92: mov    %r13,0x10(%rsp)
  0x00007f8ab91fbc97: mov    %r14,0x8(%rsp)
  0x00007f8ab91fbc9c: mov    %r15,(%rsp)
  0x00007f8ab91fbca0: movabs $0x7f8acf318ce9,%rdi
  0x00007f8ab91fbcaa: movabs $0x7f8ab91fbc4a,%rsi
  0x00007f8ab91fbcb4: mov    %rsp,%rdx
  0x00007f8ab91fbcb7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fbcbb: callq  0x00007f8aceddb9fa
  0x00007f8ab91fbcc0: hlt    
  ;; } verify_intrinsic_id
  0x00007f8ab91fbcc1: mov    0x10(%rbx),%rdx
  0x00007f8ab91fbcc5: movzwl 0x2c(%rdx),%edx
  0x00007f8ab91fbcc9: mov    (%rsp,%rdx,8),%rcx
  0x00007f8ab91fbccd: pop    %rax
  0x00007f8ab91fbcce: pop    %rbx
  0x00007f8ab91fbccf: push   %rax
  ;; verify_klass {
  0x00007f8ab91fbcd0: test   %rbx,%rbx
  0x00007f8ab91fbcd3: je     0x00007f8ab91fbd04
  0x00007f8ab91fbcd9: push   %rdi
  0x00007f8ab91fbcda: push   %r10
  0x00007f8ab91fbcdc: mov    0x8(%rbx),%edi
  0x00007f8ab91fbcdf: shl    $0x3,%rdi
  0x00007f8ab91fbce3: cmp    0x16793a4e(%rip),%rdi        # 0x00007f8acf98f738
  0x00007f8ab91fbcea: je     0x00007f8ab91fbd7b
  0x00007f8ab91fbcf0: mov    0x38(%rdi),%rdi
  0x00007f8ab91fbcf4: cmp    0x16793a3d(%rip),%rdi        # 0x00007f8acf98f738
  0x00007f8ab91fbcfb: je     0x00007f8ab91fbd7b
  0x00007f8ab91fbd01: pop    %r10
  0x00007f8ab91fbd03: pop    %rdi
  ;; MemberName required for invokeVirtual etc.
  0x00007f8ab91fbd04: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fbd09: sub    $0x80,%rsp
  0x00007f8ab91fbd10: mov    %rax,0x78(%rsp)
  0x00007f8ab91fbd15: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fbd1a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fbd1f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fbd24: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fbd29: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fbd2e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fbd33: mov    %r8,0x38(%rsp)
  0x00007f8ab91fbd38: mov    %r9,0x30(%rsp)
  0x00007f8ab91fbd3d: mov    %r10,0x28(%rsp)
  0x00007f8ab91fbd42: mov    %r11,0x20(%rsp)
  0x00007f8ab91fbd47: mov    %r12,0x18(%rsp)
  0x00007f8ab91fbd4c: mov    %r13,0x10(%rsp)
  0x00007f8ab91fbd51: mov    %r14,0x8(%rsp)
  0x00007f8ab91fbd56: mov    %r15,(%rsp)
  0x00007f8ab91fbd5a: Decoding RuntimeStub - _zap_dead_Java_locals_Java 0x00007f8ab91f9c10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab91f9c60: sub    $0x88,%rsp
  0x00007f8ab91f9c67: mov    %rbp,0x80(%rsp)
  0x00007f8ab91f9c6f: vmovsd %xmm7,0x70(%rsp)
  0x00007f8ab91f9c75: vmovsd %xmm6,0x68(%rsp)
  0x00007f8ab91f9c7b: vmovsd %xmm5,0x60(%rsp)
  0x00007f8ab91f9c81: vmovsd %xmm4,0x58(%rsp)
  0x00007f8ab91f9c87: vmovsd %xmm3,0x50(%rsp)
  0x00007f8ab91f9c8d: vmovsd %xmm2,0x48(%rsp)
  0x00007f8ab91f9c93: vmovsd %xmm1,0x40(%rsp)
  0x00007f8ab91f9c99: vmovsd %xmm0,0x38(%rsp)
  0x00007f8ab91f9c9f: mov    %rsi,0x30(%rsp)
  0x00007f8ab91f9ca4: mov    %rdx,0x28(%rsp)
  0x00007f8ab91f9ca9: mov    %rdi,0x20(%rsp)
  0x00007f8ab91f9cae: mov    %rcx,0x18(%rsp)
  0x00007f8ab91f9cb3: mov    %r12,0x10(%rsp)
  0x00007f8ab91f9cb8: mov    %r9,0x8(%rsp)
  0x00007f8ab91f9cbd: mov    %r8,(%rsp)
  0x00007f8ab91f9cc1: mov    %rsp,0x200(%r15)
  0x00007f8ab91f9cc8: mov    %r15,%rdi
  0x00007f8ab91f9ccb: movabs $0x7f8acef7c822,%r10
  0x00007f8ab91f9cd5: callq  *%r10
  0x00007f8ab91f9cd8: mov    %r12,0x200(%r15)
  0x00007f8ab91f9cdf: mov    %r12,0x208(%r15)
  0x00007f8ab91f9ce6: cmp    0x8(%r15),%r12
  0x00007f8ab91f9cea: jne    0x00007f8ab91f9d47
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab91f9cec: mov    (%rsp),%r8
  0x00007f8ab91f9cf0: mov    0x8(%rsp),%r9
  0x00007f8ab91f9cf5: mov    0x10(%rsp),%r12
  0x00007f8ab91f9cfa: mov    0x18(%rsp),%rcx
  0x00007f8ab91f9cff: mov    0x20(%rsp),%rdi
  0x00007f8ab91f9d04: mov    0x28(%rsp),%rdx
  0x00007f8ab91f9d09: mov    0x30(%rsp),%rsi
  0x00007f8ab91f9d0e: vmovsd 0x38(%rsp),%xmm0
  0x00007f8ab91f9d14: vmovsd 0x40(%rsp),%xmm1
  0x00007f8ab91f9d1a: vmovsd 0x48(%rsp),%xmm2
  0x00007f8ab91f9d20: vmovsd 0x50(%rsp),%xmm3
  0x00007f8ab91f9d26: vmovsd 0x58(%rsp),%xmm4
  0x00007f8ab91f9d2c: vmovsd 0x60(%rsp),%xmm5
  0x00007f8ab91f9d32: vmovsd 0x68(%rsp),%xmm6
  0x00007f8ab91f9d38: vmovsd 0x70(%rsp),%xmm7
  0x00007f8ab91f9d3e: add    $0x80,%rsp
  0x00007f8ab91f9d45: pop    %rbp
  0x00007f8ab91f9d46: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab91f9d47: movabs $0x7f8ab9000420,%r10
  0x00007f8ab91f9d51: xor    %ebx,%ebx
  0x00007f8ab91f9d53: mov    (%rsp),%r8
  0x00007f8ab91f9d57: mov    0x8(%rsp),%r9
  0x00007f8ab91f9d5c: mov    0x10(%rsp),%r12
  0x00007f8ab91f9d61: mov    0x18(%rsp),%rcx
  0x00007f8ab91f9d66: mov    0x20(%rsp),%rdi
  0x00007f8ab91f9d6b: mov    0x28(%rsp),%rdx
  0x00007f8ab91f9d70: mov    0x30(%rsp),%rsi
  0x00007f8ab91f9d75: vmovsd 0x38(%rsp),%xmm0
  0x00007f8ab91f9d7b: vmovsd 0x40(%rsp),%xmm1
  0x00007f8ab91f9d81: vmovsd 0x48(%rsp),%xmm2
  0x00007f8ab91f9d87: vmovsd 0x50(%rsp),%xmm3
  0x00007f8ab91f9d8d: vmovsd 0x58(%rsp),%xmm4
  0x00007f8ab91f9d93: vmovsd 0x60(%rsp),%xmm5
  0x00007f8ab91f9d99: vmovsd 0x68(%rsp),%xmm6
  0x00007f8ab91f9d9f: vmovsd 0x70(%rsp),%xmm7
  0x00007f8ab91f9da5: add    $0x80,%rsp
  0x00007f8ab91f9dac: pop    %rbp
  0x00007f8ab91f9dad: jmpq   *%r10

Decoding RuntimeStub - monitorenter_nofpu Runtime1 stub 0x00007f8ab91f9dd0
  0x00007f8ab91f9e60: push   %rbp
  0x00007f8ab91f9e61: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f9e64: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9e69: sub    $0x80,%rsp
  0x00007f8ab91f9e70: mov    %rax,0x78(%rsp)
  0x00007f8ab91f9e75: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f9e7a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9e7f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f9e84: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9e89: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9e8e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f9e93: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9e98: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9e9d: mov    %r10,0x28(%rsp)
  0x00007f8ab91f9ea2: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9ea7: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9eac: mov    %r13,0x10(%rsp)
  0x00007f8ab91f9eb1: mov    %r14,0x8(%rsp)
  0x00007f8ab91f9eb6: mov    %r15,(%rsp)
  0x00007f8ab91f9eba: sub    $0x150,%rsp
  0x00007f8ab91f9ec1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f9ecd: mov    0x18(%rbp),%rax
  0x00007f8ab91f9ed1: mov    0x10(%rbp),%rbx
  0x00007f8ab91f9ed5: mov    %rax,%rsi
  0x00007f8ab91f9ed8: mov    %rbx,%rdx
  0x00007f8ab91f9edb: mov    %r15,%rdi
  0x00007f8ab91f9ede: mov    %rbp,0x210(%r15)
  0x00007f8ab91f9ee5: mov    %rsp,0x200(%r15)
  0x00007f8ab91f9eec: callq  0x00007f8ace8bc674
  0x00007f8ab91f9ef1: push   %rax
  0x00007f8ab91f9ef2: push   %rdi
  0x00007f8ab91f9ef3: push   %rsi
  0x00007f8ab91f9ef4: push   %rdx
  0x00007f8ab91f9ef5: push   %rcx
  0x00007f8ab91f9ef6: push   %r8
  0x00007f8ab91f9ef8: push   %r9
  0x00007f8ab91f9efa: push   %r10
  0x00007f8ab91f9efc: mov    %rsp,%r10
  0x00007f8ab91f9eff: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f9f03: push   %r10
  0x00007f8ab91f9f05: push   %r11
  0x00007f8ab91f9f07: mov    $0x1,%edi
  0x00007f8ab91f9f0c: callq  0x00007f8acf9c32d0
  0x00007f8ab91f9f11: pop    %r11
  0x00007f8ab91f9f13: pop    %rsp
  0x00007f8ab91f9f14: pop    %r10
  0x00007f8ab91f9f16: pop    %r9
  0x00007f8ab91f9f18: pop    %r8
  0x00007f8ab91f9f1a: pop    %rcx
  0x00007f8ab91f9f1b: pop    %rdx
  0x00007f8ab91f9f1c: pop    %rsi
  0x00007f8ab91f9f1d: pop    %rdi
  0x00007f8ab91f9f1e: cmp    %rax,%r15
  0x00007f8ab91f9f21: je     0x00007f8ab91f9fa3
  0x00007f8ab91f9f27: callq  0x00007f8aceec2a22
  0x00007f8ab91f9f2c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9f31: sub    $0x80,%rsp
  0x00007f8ab91f9f38: mov    %rax,0x78(%rsp)
  0x00007f8ab91f9f3d: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f9f42: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9f47: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f9f4c: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9f51: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9f56: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f9f5b: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9f60: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9f65: mov    %r10,0x28(%rsp)
  0x00007f8ab91f9f6a: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9f6f: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9f74: mov    %r13,0x10(%rsp)
  0x00007f8ab91f9f79: mov    %r14,0x8(%rsp)
  0x00007f8ab91f9f7e: mov    %r15,(%rsp)
  0x00007f8ab91f9f82: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f9f8c: movabs $0x7f8ab91f9f2c,%rsi
  0x00007f8ab91f9f96: mov    %rsp,%rdx
  0x00007f8ab91f9f99: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f9f9d: callq  0x00007f8aceddb9fa
  0x00007f8ab91f9fa2: hlt    
  0x00007f8ab91f9fa3: pop    %rax
  0x00007f8ab91f9fa4: movabs $0x0,%r10
  0x00007f8ab91f9fae: mov    %r10,0x200(%r15)
  0x00007f8ab91f9fb5: movabs $0x0,%r10
  0x00007f8ab91f9fbf: mov    %r10,0x210(%r15)
  0x00007f8ab91f9fc6: movabs $0x0,%r10
  0x00007f8ab91f9fd0: mov    %r10,0x208(%r15)
  0x00007f8ab91f9fd7: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f9fdf: je     0x00007f8ab91f9fee
  0x00007f8ab91f9fe5: mov    0x8(%r15),%rax
  0x00007f8ab91f9fe9: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab91f9fee: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f9ffa: je     0x00007f8ab91fa077
  0x00007f8ab91fa000: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91fa005: sub    $0x80,%rsp
  0x00007f8ab91fa00c: mov    %rax,0x78(%rsp)
  0x00007f8ab91fa011: mov    %rcx,0x70(%rsp)
  0x00007f8ab91fa016: mov    %rdx,0x68(%rsp)
  0x00007f8ab91fa01b: mov    %rbx,0x60(%rsp)
  0x00007f8ab91fa020: mov    %rbp,0x50(%rsp)
  0x00007f8ab91fa025: mov    %rsi,0x48(%rsp)
  0x00007f8ab91fa02a: mov    %rdi,0x40(%rsp)
  0x00007f8ab91fa02f: mov    %r8,0x38(%rsp)
  0x00007f8ab91fa034: mov    %r9,0x30(%rsp)
  0x00007f8ab91fa039: mov    %r10,0x28(%rsp)
  0x00007f8ab91fa03e: mov    %r11,0x20(%rsp)
  0x00007f8ab91fa043: mov    %r12,0x18(%rsp)
  0x00007f8ab91fa048: mov    %r13,0x10(%rsp)
  0x00007f8ab91fa04d: mov    %r14,0x8(%rsp)
  0x00007f8ab91fa052: mov    %r15,(%rsp)
  0x00007f8ab91fa056: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91fa060: movabs $0x7f8ab91fa000,%rsi
  0x00007f8ab91fa06a: mov    %rsp,%rdx
  0x00007f8ab91fa06d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91fa071: callq  0x00007f8aceddb9fa
  0x00007f8ab91fa076: hlt    
  0x00007f8ab91fa077: add    $0x150,%rsp
  0x00007f8ab91fa07e: mov    (%rsp),%r15
  0x00007f8ab91fa082: mov    0x8(%rsp),%r14
  0x00007f8ab91fa087: mov    0x10(%rsp),%r13
  0x00007f8ab91fa08c: mov    0x18(%rsp),%r12
  0x00007f8ab91fa091: mov    0x20(%rsp),%r11
  0x00007f8ab91fa096: mov    0x28(%rsp),%r10
  0x00007f8ab91fa09b: mov    0x30(%rsp),%r9
  0x00007f8ab91fa0a0: mov    0x38(%rsp),%r8
  0x00007f8ab91fa0a5: mov    0x40(%rsp),%rdi
  0x00007f8ab91fa0aa: mov    0x48(%rsp),%rsi
  0x00007f8ab91fa0af: mov    0x50(%rsp),%rbp
  0x00007f8ab91fa0b4: mov    0x60(%rsp),%rbx
  0x00007f8ab91fa0b9: mov    0x68(%rsp),%rdx
  0x00007f8ab91fa0be: mov    0x70(%rsp),%rcx
  0x00007f8ab91fa0c3: mov    0x78(%rsp),%rax
  0x00007f8ab91fa0c8: add    $0x80,%rsp
  0x00007f8ab91fa0cf: leaveq 
  0x00007f8ab91fa0d0: retq   
  0x00007f8ab91fa0d1: nop
  0x00007f8ab91fa0d2: nop
  0x00007f8ab91fa0d3: nop
  0x00007f8ab91fa0d4: nop
  0x00007f8ab91fa0d5: nop
  0x00007f8ab91fa0d6: nop
  0x00007f8ab91fa0d7: nop

nop
Decoding RuntimeStub - monitorexit Runtime1 stub 0x00007f8ab91f9790
  0x00007f8ab91f9820: push   %rbp
  0x00007f8ab91f9821: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91f9824: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9829: sub    $0x80,%rsp
  0x00007f8ab91f9830: mov    %rax,0x78(%rsp)
  0x00007f8ab91f9835: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f983a: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f983f: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f9844: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9849: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f984e: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f9853: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9858: mov    %r9,0x30(%rsp)
  0x00007f8ab91f985d: mov    %r10,0x28(%rsp)
  0x00007f8ab91f9862: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9867: mov    %r12,0x18(%rsp)
  0x00007f8ab91f986c: mov    %r13,0x10(%rsp)
  0x00007f8ab91f9871: mov    %r14,0x8(%rsp)
  0x00007f8ab91f9876: mov    %r15,(%rsp)
  0x00007f8ab91f987a: sub    $0x150,%rsp
  0x00007f8ab91f9881: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f988d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab91f9893: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab91f9899: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab91f989f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab91f98a5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab91f98ab: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab91f98b1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab91f98b7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab91f98bd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab91f98c3: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab91f98c9: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab91f98cf: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab91f98d5: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab91f98db: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab91f98e1: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab91f98e7: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab91f98f0: mov    0x10(%rbp),%rax
  0x00007f8ab91f98f4: mov    %rax,%rsi
  0x00007f8ab91f98f7: mov    %r15,%rdi
  0x00007f8ab91f98fa: mov    %rbp,0x210(%r15)
  0x00007f8ab91f9901: mov    %rsp,0x200(%r15)
  0x00007f8ab91f9908: callq  0x00007f8ace8bc972
  0x00007f8ab91f990d: push   %rax
  0x00007f8ab91f990e: push   %rdi
  0x00007f8ab91f990f: push   %rsi
  0x00007f8ab91f9910: push   %rdx
  0x00007f8ab91f9911: push   %rcx
  0x00007f8ab91f9912: push   %r8
  0x00007f8ab91f9914: push   %r9
  0x00007f8ab91f9916: push   %r10
  0x00007f8ab91f9918: mov    %rsp,%r10
  0x00007f8ab91f991b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f991f: push   %r10
  0x00007f8ab91f9921: push   %r11
  0x00007f8ab91f9923: mov    $0x1,%edi
  0x00007f8ab91f9928: callq  0x00007f8acf9c32d0
  0x00007f8ab91f992d: pop    %r11
  0x00007f8ab91f992f: pop    %rsp
  0x00007f8ab91f9930: pop    %r10
  0x00007f8ab91f9932: pop    %r9
  0x00007f8ab91f9934: pop    %r8
  0x00007f8ab91f9936: pop    %rcx
  0x00007f8ab91f9937: pop    %rdx
  0x00007f8ab91f9938: pop    %rsi
  0x00007f8ab91f9939: pop    %rdi
  0x00007f8ab91f993a: cmp    %rax,%r15
  0x00007f8ab91f993d: je     0x00007f8ab91f99bf
  0x00007f8ab91f9943: callq  0x00007f8aceec2a22
  0x00007f8ab91f9948: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f994d: sub    $0x80,%rsp
  0x00007f8ab91f9954: mov    %rax,0x78(%rsp)
  0x00007f8ab91f9959: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f995e: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9963: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f9968: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f996d: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9972: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f9977: mov    %r8,0x38(%rsp)
  0x00007f8ab91f997c: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9981: mov    %r10,0x28(%rsp)
  0x00007f8ab91f9986: mov    %r11,0x20(%rsp)
  0x00007f8ab91f998b: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9990: mov    %r13,0x10(%rsp)
  0x00007f8ab91f9995: mov    %r14,0x8(%rsp)
  0x00007f8ab91f999a: mov    %r15,(%rsp)
  0x00007f8ab91f999e: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab91f99a8: movabs $0x7f8ab91f9948,%rsi
  0x00007f8ab91f99b2: mov    %rsp,%rdx
  0x00007f8ab91f99b5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f99b9: callq  0x00007f8aceddb9fa
  0x00007f8ab91f99be: hlt    
  0x00007f8ab91f99bf: pop    %rax
  0x00007f8ab91f99c0: movabs $0x0,%r10
  0x00007f8ab91f99ca: mov    %r10,0x200(%r15)
  0x00007f8ab91f99d1: movabs $0x0,%r10
  0x00007f8ab91f99db: mov    %r10,0x210(%r15)
  0x00007f8ab91f99e2: movabs $0x0,%r10
  0x00007f8ab91f99ec: mov    %r10,0x208(%r15)
  0x00007f8ab91f99f3: cmpq   $0x0,0x8(%r15)
  0x00007f8ab91f99fb: je     0x00007f8ab91f9a0a
  0x00007f8ab91f9a01: mov    0x8(%r15),%rax
  0x00007f8ab91f9a05: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab91f9a0a: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91f9a10: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91f9a16: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91f9a1c: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91f9a22: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91f9a28: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91f9a2e: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91f9a34: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91f9a3a: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91f9a40: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91f9a46: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91f9a4c: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91f9a52: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91f9a58: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91f9a5e: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91f9a64: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91f9a6d: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91f9a79: je     0x00007f8ab91f9af6
  0x00007f8ab91f9a7f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91f9a84: sub    $0x80,%rsp
  0x00007f8ab91f9a8b: mov    %rax,0x78(%rsp)
  0x00007f8ab91f9a90: mov    %rcx,0x70(%rsp)
  0x00007f8ab91f9a95: mov    %rdx,0x68(%rsp)
  0x00007f8ab91f9a9a: mov    %rbx,0x60(%rsp)
  0x00007f8ab91f9a9f: mov    %rbp,0x50(%rsp)
  0x00007f8ab91f9aa4: mov    %rsi,0x48(%rsp)
  0x00007f8ab91f9aa9: mov    %rdi,0x40(%rsp)
  0x00007f8ab91f9aae: mov    %r8,0x38(%rsp)
  0x00007f8ab91f9ab3: mov    %r9,0x30(%rsp)
  0x00007f8ab91f9ab8: mov    %r10,0x28(%rsp)
  0x00007f8ab91f9abd: mov    %r11,0x20(%rsp)
  0x00007f8ab91f9ac2: mov    %r12,0x18(%rsp)
  0x00007f8ab91f9ac7: mov    %r13,0x10(%rsp)
  0x00007f8ab91f9acc: mov    %r14,0x8(%rsp)
  0x00007f8ab91f9ad1: mov    %r15,(%rsp)
  0x00007f8ab91f9ad5: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91f9adf: movabs $0x7f8ab91f9a7f,%rsi
  0x00007f8ab91f9ae9: mov    %rsp,%rdx
  0x00007f8ab91f9aec: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91f9af0: callq  0x00007f8aceddb9fa
  0x00007f8ab91f9af5: hlt    
  0x00007f8ab91f9af6: add    $0x150,%rsp
  0x00007f8ab91f9afd: mov    (%rsp),%r15
  0x00007f8ab91f9b01: mov    0x8(%rsp),%r14
  0x00007f8ab91f9b06: mov    0x10(%rsp),%r13
  0x00007f8ab91f9b0b: mov    0x18(%rsp),%r12
  0x00007f8ab91f9b10: mov    0x20(%rsp),%r11
  0x00007f8ab91f9b15: mov    0x28(%rsp),%r10
  0x00007f8ab91f9b1a: mov    0x30(%rsp),%r9
  0x00007f8ab91f9b1f: mov    0x38(%rsp),%r8
  0x00007f8ab91f9b24: mov    0x40(%rsp),%rdi
  0x00007f8ab91f9b29: mov    0x48(%rsp),%rsi
  0x00007f8ab91f9b2e: mov    0x50(%rsp),%rbp
  0x00007f8ab91f9b33: mov    0x60(%rsp),%rbx
  0x00007f8ab91f9b38: mov    0x68(%rsp),%rdx
  0x00007f8ab91f9b3d: mov    0x70(%rsp),%rcx
  0x00007f8ab91f9b42: mov    0x78(%rsp),%rax
  0x00007f8ab91f9b47: add    $0x80,%rsp
  0x00007f8ab91f9b4e: leaveq 
  0x00007f8ab91f9b4f: retq   

Decoding RuntimeStub - monitorexit_nofpu Runtime1 stub 0x00007f8ab922a5d0
  0x00007f8ab922a660: push   %rbp
  0x00007f8ab922a661: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab922a664: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922a669: sub    $0x80,%rsp
  0x00007f8ab922a670: mov    %rax,0x78(%rsp)
  0x00007f8ab922a675: mov    %rcx,0x70(%rsp)
  0x00007f8ab922a67a: mov    %rdx,0x68(%rsp)
  0x00007f8ab922a67f: mov    %rbx,0x60(%rsp)
  0x00007f8ab922a684: mov    %rbp,0x50(%rsp)
  0x00007f8ab922a689: mov    %rsi,0x48(%rsp)
  0x00007f8ab922a68e: mov    %rdi,0x40(%rsp)
  0x00007f8ab922a693: mov    %r8,0x38(%rsp)
  0x00007f8ab922a698: mov    %r9,0x30(%rsp)
  0x00007f8ab922a69d: mov    %r10,0x28(%rsp)
  0x00007f8ab922a6a2: mov    %r11,0x20(%rsp)
  0x00007f8ab922a6a7: mov    %r12,0x18(%rsp)
  0x00007f8ab922a6ac: mov    %r13,0x10(%rsp)
  0x00007f8ab922a6b1: mov    %r14,0x8(%rsp)
  0x00007f8ab922a6b6: mov    %r15,(%rsp)
  0x00007f8ab922a6ba: sub    $0x150,%rsp
  0x00007f8ab922a6c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922a6cd: mov    0x10(%rbp),%rax
  0x00007f8ab922a6d1: mov    %rax,%rsi
  0x00007f8ab922a6d4: mov    %r15,%rdi
  0x00007f8ab922a6d7: mov    %rbp,0x210(%r15)
  0x00007f8ab922a6de: mov    %rsp,0x200(%r15)
  0x00007f8ab922a6e5: callq  0x00007f8ace8bc972
  0x00007f8ab922a6ea: push   %rax
  0x00007f8ab922a6eb: push   %rdi
  0x00007f8ab922a6ec: push   %rsi
  0x00007f8ab922a6ed: push   %rdx
  0x00007f8ab922a6ee: push   %rcx
  0x00007f8ab922a6ef: push   %r8
  0x00007f8ab922a6f1: push   %r9
  0x00007f8ab922a6f3: push   %r10
  0x00007f8ab922a6f5: mov    %rsp,%r10
  0x00007f8ab922a6f8: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a6fc: push   %r10
  0x00007f8ab922a6fe: push   %r11
  0x00007f8ab922a700: mov    $0x1,%edi
  0x00007f8ab922a705: callq  0x00007f8acf9c32d0
  0x00007f8ab922a70a: pop    %r11
  0x00007f8ab922a70c: pop    %rsp
  0x00007f8ab922a70d: pop    %r10
  0x00007f8ab922a70f: pop    %r9
  0x00007f8ab922a711: pop    %r8
  0x00007f8ab922a713: pop    %rcx
  0x00007f8ab922a714: pop    %rdx
  0x00007f8ab922a715: pop    %rsi
  0x00007f8ab922a716: pop    %rdi
  0x00007f8ab922a717: cmp    %rax,%r15
  0x00007f8ab922a71a: je     0x00007f8ab922a79c
  0x00007f8ab922a720: callq  0x00007f8aceec2a22
  0x00007f8ab922a725: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922a72a: sub    $0x80,%rsp
  0x00007f8ab922a731: mov    %rax,0x78(%rsp)
  0x00007f8ab922a736: mov    %rcx,0x70(%rsp)
  0x00007f8ab922a73b: mov    %rdx,0x68(%rsp)
  0x00007f8ab922a740: mov    %rbx,0x60(%rsp)
  0x00007f8ab922a745: mov    %rbp,0x50(%rsp)
  0x00007f8ab922a74a: mov    %rsi,0x48(%rsp)
  0x00007f8ab922a74f: mov    %rdi,0x40(%rsp)
  0x00007f8ab922a754: mov    %r8,0x38(%rsp)
  0x00007f8ab922a759: mov    %r9,0x30(%rsp)
  0x00007f8ab922a75e: mov    %r10,0x28(%rsp)
  0x00007f8ab922a763: mov    %r11,0x20(%rsp)
  0x00007f8ab922a768: mov    %r12,0x18(%rsp)
  0x00007f8ab922a76d: mov    %r13,0x10(%rsp)
  0x00007f8ab922a772: mov    %r14,0x8(%rsp)
  0x00007f8ab922a777: mov    %r15,(%rsp)
  0x00007f8ab922a77b: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab922a785: movabs $0x7f8ab922a725,%rsi
  0x00007f8ab922a78f: mov    %rsp,%rdx
  0x00007f8ab922a792: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a796: callq  0x00007f8aceddb9fa
  0x00007f8ab922a79b: hlt    
  0x00007f8ab922a79c: pop    %rax
  0x00007f8ab922a79d: movabs $0x0,%r10
  0x00007f8ab922a7a7: mov    %r10,0x200(%r15)
  0x00007f8ab922a7ae: movabs $0x0,%r10
  0x00007f8ab922a7b8: mov    %r10,0x210(%r15)
  0x00007f8ab922a7bf: movabs $0x0,%r10
  0x00007f8ab922a7c9: mov    %r10,0x208(%r15)
  0x00007f8ab922a7d0: cmpq   $0x0,0x8(%r15)
  0x00007f8ab922a7d8: je     0x00007f8ab922a7e7
  0x00007f8ab922a7de: mov    0x8(%r15),%rax
  0x00007f8ab922a7e2: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab922a7e7: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922a7f3: je     0x00007f8ab922a870
  0x00007f8ab922a7f9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922a7fe: sub    $0x80,%rsp
  0x00007f8ab922a805: mov    %rax,0x78(%rsp)
  0x00007f8ab922a80a: mov    %rcx,0x70(%rsp)
  0x00007f8ab922a80f: mov    %rdx,0x68(%rsp)
  0x00007f8ab922a814: mov    %rbx,0x60(%rsp)
  0x00007f8ab922a819: mov    %rbp,0x50(%rsp)
  0x00007f8ab922a81e: mov    %rsi,0x48(%rsp)
  0x00007f8ab922a823: mov    %rdi,0x40(%rsp)
  0x00007f8ab922a828: mov    %r8,0x38(%rsp)
  0x00007f8ab922a82d: mov    %r9,0x30(%rsp)
  0x00007f8ab922a832: mov    %r10,0x28(%rsp)
  0x00007f8ab922a837: mov    %r11,0x20(%rsp)
  0x00007f8ab922a83c: mov    %r12,0x18(%rsp)
  0x00007f8ab922a841: mov    %r13,0x10(%rsp)
  0x00007f8ab922a846: mov    %r14,0x8(%rsp)
  0x00007f8ab922a84b: mov    %r15,(%rsp)
  0x00007f8ab922a84f: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922a859: movabs $0x7f8ab922a7f9,%rsi
  0x00007f8ab922a863: mov    %rsp,%rdx
  0x00007f8ab922a866: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a86a: callq  0x00007f8aceddb9fa
  0x00007f8ab922a86f: hlt    
  0x00007f8ab922a870: add    $0x150,%rsp
  0x00007f8ab922a877: mov    (%rsp),%r15
  0x00007f8ab922a87b: mov    0x8(%rsp),%r14
  0x00007f8ab922a880: mov    0x10(%rsp),%r13
  0x00007f8ab922a885: mov    0x18(%rsp),%r12
  0x00007f8ab922a88a: mov    0x20(%rsp),%r11
  0x00007f8ab922a88f: mov    0x28(%rsp),%r10
  0x00007f8ab922a894: mov    0x30(%rsp),%r9
  0x00007f8ab922a899: mov    0x38(%rsp),%r8
  0x00007f8ab922a89e: mov    0x40(%rsp),%rdi
  0x00007f8ab922a8a3: mov    0x48(%rsp),%rsi
  0x00007f8ab922a8a8: mov    0x50(%rsp),%rbp
  0x00007f8ab922a8ad: mov    0x60(%rsp),%rbx
  0x00007f8ab922a8b2: mov    0x68(%rsp),%rdx
  0x00007f8ab922a8b7: mov    0x70(%rsp),%rcx
  0x00007f8ab922a8bc: mov    0x78(%rsp),%rax
  0x00007f8ab922a8c1: add    $0x80,%rsp
  0x00007f8ab922a8c8: leaveq 
  0x00007f8ab922a8c9: retq   
  0x00007f8ab922a8ca: nop
  0x00007f8ab922a8cb: nop
  0x00007f8ab922a8cc: nop
  0x00007f8ab922a8cd: nop
  0x00007f8ab922a8ce: nop
  0x00007f8ab922a8cf: nop

Decoding RuntimeStub - deoptimize Runtime1 stub 0x00007f8ab922a1d0
  0x00007f8ab922a260: push   %rbp
  0x00007f8ab922a261: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab922a264: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922a269: sub    $0x80,%rsp
  0x00007f8ab922a270: mov    %rax,0x78(%rsp)
  0x00007f8ab922a275: mov    %rcx,0x70(%rsp)
  0x00007f8ab922a27a: mov    %rdx,0x68(%rsp)
  0x00007f8ab922a27f: mov    %rbx,0x60(%rsp)
  0x00007f8ab922a284: mov    %rbp,0x50(%rsp)
  0x00007f8ab922a289: mov    %rsi,0x48(%rsp)
  0x00007f8ab922a28e: mov    %rdi,0x40(%rsp)
  0x00007f8ab922a293: mov    %r8,0x38(%rsp)
  0x00007f8ab922a298: mov    %r9,0x30(%rsp)
  0x00007f8ab922a29d: mov    %r10,0x28(%rsp)
  0x00007f8ab922a2a2: mov    %r11,0x20(%rsp)
  0x00007f8ab922a2a7: mov    %r12,0x18(%rsp)
  0x00007f8ab922a2ac: mov    %r13,0x10(%rsp)
  0x00007f8ab922a2b1: mov    %r14,0x8(%rsp)
  0x00007f8ab922a2b6: mov    %r15,(%rsp)
  0x00007f8ab922a2ba: sub    $0x150,%rsp
  0x00007f8ab922a2c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922a2cd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab922a2d3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab922a2d9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab922a2df: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab922a2e5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab922a2eb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab922a2f1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab922a2f7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab922a2fd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab922a303: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab922a309: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab922a30f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab922a315: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab922a31b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab922a321: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab922a327: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab922a330: mov    %r15,%rdi
  0x00007f8ab922a333: mov    %rbp,0x210(%r15)
  0x00007f8ab922a33a: mov    %rsp,0x200(%r15)
  0x00007f8ab922a341: callq  0x00007f8ace8bcbde
  0x00007f8ab922a346: push   %rax
  0x00007f8ab922a347: push   %rdi
  0x00007f8ab922a348: push   %rsi
  0x00007f8ab922a349: push   %rdx
  0x00007f8ab922a34a: push   %rcx
  0x00007f8ab922a34b: push   %r8
  0x00007f8ab922a34d: push   %r9
  0x00007f8ab922a34f: push   %r10
  0x00007f8ab922a351: mov    %rsp,%r10
  0x00007f8ab922a354: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a358: push   %r10
  0x00007f8ab922a35a: push   %r11
  0x00007f8ab922a35c: mov    $0x1,%edi
  0x00007f8ab922a361: callq  0x00007f8acf9c32d0
  0x00007f8ab922a366: pop    %r11
  0x00007f8ab922a368: pop    %rsp
  0x00007f8ab922a369: pop    %r10
  0x00007f8ab922a36b: pop    %r9
  0x00007f8ab922a36d: pop    %r8
  0x00007f8ab922a36f: pop    %rcx
  0x00007f8ab922a370: pop    %rdx
  0x00007f8ab922a371: pop    %rsi
  0x00007f8ab922a372: pop    %rdi
  0x00007f8ab922a373: cmp    %rax,%r15
  0x00007f8ab922a376: je     0x00007f8ab922a3f8
  0x00007f8ab922a37c: callq  0x00007f8aceec2a22
  0x00007f8ab922a381: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922a386: sub    $0x80,%rsp
  0x00007f8ab922a38d: mov    %rax,0x78(%rsp)
  0x00007f8ab922a392: mov    %rcx,0x70(%rsp)
  0x00007f8ab922a397: mov    %rdx,0x68(%rsp)
  0x00007f8ab922a39c: mov    %rbx,0x60(%rsp)
  0x00007f8ab922a3a1: mov    %rbp,0x50(%rsp)
  0x00007f8ab922a3a6: mov    %rsi,0x48(%rsp)
  0x00007f8ab922a3ab: mov    %rdi,0x40(%rsp)
  0x00007f8ab922a3b0: mov    %r8,0x38(%rsp)
  0x00007f8ab922a3b5: mov    %r9,0x30(%rsp)
  0x00007f8ab922a3ba: mov    %r10,0x28(%rsp)
  0x00007f8ab922a3bf: mov    %r11,0x20(%rsp)
  0x00007f8ab922a3c4: mov    %r12,0x18(%rsp)
  0x00007f8ab922a3c9: mov    %r13,0x10(%rsp)
  0x00007f8ab922a3ce: mov    %r14,0x8(%rsp)
  0x00007f8ab922a3d3: mov    %r15,(%rsp)
  0x00007f8ab922a3d7: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab922a3e1: movabs $0x7f8ab922a381,%rsi
  0x00007f8ab922a3eb: mov    %rsp,%rdx
  0x00007f8ab922a3ee: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a3f2: callq  0x00007f8aceddb9fa
  0x00007f8ab922a3f7: hlt    
  0x00007f8ab922a3f8: pop    %rax
  0x00007f8ab922a3f9: movabs $0x0,%r10
  0x00007f8ab922a403: mov    %r10,0x200(%r15)
  0x00007f8ab922a40a: movabs $0x0,%r10
  0x00007f8ab922a414: mov    %r10,0x210(%r15)
  0x00007f8ab922a41b: movabs $0x0,%r10
  0x00007f8ab922a425: mov    %r10,0x208(%r15)
  0x00007f8ab922a42c: cmpq   $0x0,0x8(%r15)
  0x00007f8ab922a434: je     0x00007f8ab922a443
  0x00007f8ab922a43a: mov    0x8(%r15),%rax
  0x00007f8ab922a43e: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab922a443: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922a449: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922a44f: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922a455: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922a45b: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922a461: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922a467: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922a46d: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922a473: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922a479: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922a47f: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922a485: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922a48b: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922a491: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922a497: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922a49d: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922a4a6: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922a4b2: je     0x00007f8ab922a52f
  0x00007f8ab922a4b8: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922a4bd: sub    $0x80,%rsp
  0x00007f8ab922a4c4: mov    %rax,0x78(%rsp)
  0x00007f8ab922a4c9: mov    %rcx,0x70(%rsp)
  0x00007f8ab922a4ce: mov    %rdx,0x68(%rsp)
  0x00007f8ab922a4d3: mov    %rbx,0x60(%rsp)
  0x00007f8ab922a4d8: mov    %rbp,0x50(%rsp)
  0x00007f8ab922a4dd: mov    %rsi,0x48(%rsp)
  0x00007f8ab922a4e2: mov    %rdi,0x40(%rsp)
  0x00007f8ab922a4e7: mov    %r8,0x38(%rsp)
  0x00007f8ab922a4ec: mov    %r9,0x30(%rsp)
  0x00007f8ab922a4f1: mov    %r10,0x28(%rsp)
  0x00007f8ab922a4f6: mov    %r11,0x20(%rsp)
  0x00007f8ab922a4fb: mov    %r12,0x18(%rsp)
  0x00007f8ab922a500: mov    %r13,0x10(%rsp)
  0x00007f8ab922a505: mov    %r14,0x8(%rsp)
  0x00007f8ab922a50a: mov    %r15,(%rsp)
  0x00007f8ab922a50e: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922a518: movabs $0x7f8ab922a4b8,%rsi
  0x00007f8ab922a522: mov    %rsp,%rdx
  0x00007f8ab922a525: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a529: callq  0x00007f8aceddb9fa
  0x00007f8ab922a52e: hlt    
  0x00007f8ab922a52f: add    $0x150,%rsp
  0x00007f8ab922a536: mov    (%rsp),%r15
  0x00007f8ab922a53a: mov    0x8(%rsp),%r14
  0x00007f8ab922a53f: mov    0x10(%rsp),%r13
  0x00007f8ab922a544: mov    0x18(%rsp),%r12
  0x00007f8ab922a549: mov    0x20(%rsp),%r11
  0x00007f8ab922a54e: mov    0x28(%rsp),%r10
  0x00007f8ab922a553: mov    0x30(%rsp),%r9
  0x00007f8ab922a558: mov    0x38(%rsp),%r8
  0x00007f8ab922a55d: mov    0x40(%rsp),%rdi
  0x00007f8ab922a562: mov    0x48(%rsp),%rsi
  0x00007f8ab922a567: mov    0x50(%rsp),%rbp
  0x00007f8ab922a56c: mov    0x60(%rsp),%rbx
  0x00007f8ab922a571: mov    0x68(%rsp),%rdx
  0x00007f8ab922a576: mov    0x70(%rsp),%rcx
  0x00007f8ab922a57b: mov    0x78(%rsp),%rax
  0x00007f8ab922a580: add    $0x80,%rsp
  0x00007f8ab922a587: leaveq 
  0x00007f8ab922a588: jmpq   0x00007f8ab9107356
  0x00007f8ab922a58d: leaveq 
  0x00007f8ab922a58e: retq   
  0x00007f8ab922a58f: nop

Decoding RuntimeStub - access_field_patching Runtime1 stub 0x00007f8ab9229690
  0x00007f8ab9229760: push   %rbp
  0x00007f8ab9229761: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab9229764: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9229769: sub    $0x80,%rsp
  0x00007f8ab9229770: mov    %rax,0x78(%rsp)
  0x00007f8ab9229775: mov    %rcx,0x70(%rsp)
  0x00007f8ab922977a: mov    %rdx,0x68(%rsp)
  0x00007f8ab922977f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229784: mov    %rbp,0x50(%rsp)
  0x00007f8ab9229789: mov    %rsi,0x48(%rsp)
  0x00007f8ab922978e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229793: mov    %r8,0x38(%rsp)
  0x00007f8ab9229798: mov    %r9,0x30(%rsp)
  0x00007f8ab922979d: mov    %r10,0x28(%rsp)
  0x00007f8ab92297a2: mov    %r11,0x20(%rsp)
  0x00007f8ab92297a7: mov    %r12,0x18(%rsp)
  0x00007f8ab92297ac: mov    %r13,0x10(%rsp)
  0x00007f8ab92297b1: mov    %r14,0x8(%rsp)
  0x00007f8ab92297b6: mov    %r15,(%rsp)
  0x00007f8ab92297ba: sub    $0x150,%rsp
  0x00007f8ab92297c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab92297cd: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab92297d3: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab92297d9: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab92297df: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab92297e5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab92297eb: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab92297f1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab92297f7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab92297fd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9229803: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9229809: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab922980f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9229815: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab922981b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9229821: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9229827: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9229830: mov    %r15,%rdi
  0x00007f8ab9229833: mov    %rbp,0x210(%r15)
  0x00007f8ab922983a: mov    %rsp,0x200(%r15)
  0x00007f8ab9229841: callq  0x00007f8ace8beb90
  0x00007f8ab9229846: push   %rax
  0x00007f8ab9229847: push   %rdi
  0x00007f8ab9229848: push   %rsi
  0x00007f8ab9229849: push   %rdx
  0x00007f8ab922984a: push   %rcx
  0x00007f8ab922984b: push   %r8
  0x00007f8ab922984d: push   %r9
  0x00007f8ab922984f: push   %r10
  0x00007f8ab9229851: mov    %rsp,%r10
  0x00007f8ab9229854: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229858: push   %r10
  0x00007f8ab922985a: push   %r11
  0x00007f8ab922985c: mov    $0x1,%edi
  0x00007f8ab9229861: callq  0x00007f8acf9c32d0
  0x00007f8ab9229866: pop    %r11
  0x00007f8ab9229868: pop    %rsp
  0x00007f8ab9229869: pop    %r10
  0x00007f8ab922986b: pop    %r9
  0x00007f8ab922986d: pop    %r8
  0x00007f8ab922986f: pop    %rcx
  0x00007f8ab9229870: pop    %rdx
  0x00007f8ab9229871: pop    %rsi
  0x00007f8ab9229872: pop    %rdi
  0x00007f8ab9229873: cmp    %rax,%r15
  0x00007f8ab9229876: je     0x00007f8ab92298f3
  0x00007f8ab922987c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9229881: sub    $0x80,%rsp
  0x00007f8ab9229888: mov    %rax,0x78(%rsp)
  0x00007f8ab922988d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229892: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229897: mov    %rbx,0x60(%rsp)
  0x00007f8ab922989c: mov    %rbp,0x50(%rsp)
  0x00007f8ab92298a1: mov    %rsi,0x48(%rsp)
  0x00007f8ab92298a6: mov    %rdi,0x40(%rsp)
  0x00007f8ab92298ab: mov    %r8,0x38(%rsp)
  0x00007f8ab92298b0: mov    %r9,0x30(%rsp)
  0x00007f8ab92298b5: mov    %r10,0x28(%rsp)
  0x00007f8ab92298ba: mov    %r11,0x20(%rsp)
  0x00007f8ab92298bf: mov    %r12,0x18(%rsp)
  0x00007f8ab92298c4: mov    %r13,0x10(%rsp)
  0x00007f8ab92298c9: mov    %r14,0x8(%rsp)
  0x00007f8ab92298ce: mov    %r15,(%rsp)
  0x00007f8ab92298d2: movabs $0x7f8acf15cac8,%rdi
  0x00007f8ab92298dc: movabs $0x7f8ab922987c,%rsi
  0x00007f8ab92298e6: mov    %rsp,%rdx
  0x00007f8ab92298e9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92298ed: callq  0x00007f8aceddb9fa
  0x00007f8ab92298f2: hlt    
  0x00007f8ab92298f3: pop    %rax
  0x00007f8ab92298f4: movabs $0x0,%r10
  0x00007f8ab92298fe: mov    %r10,0x200(%r15)
  0x00007f8ab9229905: movabs $0x0,%r10
  0x00007f8ab922990f: mov    %r10,0x210(%r15)
  0x00007f8ab9229916: movabs $0x0,%r10
  0x00007f8ab9229920: mov    %r10,0x208(%r15)
  0x00007f8ab9229927: cmpq   $0x0,0x8(%r15)
  0x00007f8ab922992f: je     0x00007f8ab9229bc4
  0x00007f8ab9229935: test   %rax,%rax
  0x00007f8ab9229938: je     0x00007f8ab9167c00
  0x00007f8ab922993e: mov    0x8(%r15),%rax
  0x00007f8ab9229942: movabs $0x0,%r10
  0x00007f8ab922994c: mov    %r10,0x8(%r15)
  0x00007f8ab9229950: mov    0x1d8(%rsp),%rdx
  0x00007f8ab9229958: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab9229963: je     0x00007f8ab92299e0
  0x00007f8ab9229969: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922996e: sub    $0x80,%rsp
  0x00007f8ab9229975: mov    %rax,0x78(%rsp)
  0x00007f8ab922997a: mov    %rcx,0x70(%rsp)
  0x00007f8ab922997f: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229984: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229989: mov    %rbp,0x50(%rsp)
  0x00007f8ab922998e: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229993: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229998: mov    %r8,0x38(%rsp)
  0x00007f8ab922999d: mov    %r9,0x30(%rsp)
  0x00007f8ab92299a2: mov    %r10,0x28(%rsp)
  0x00007f8ab92299a7: mov    %r11,0x20(%rsp)
  0x00007f8ab92299ac: mov    %r12,0x18(%rsp)
  0x00007f8ab92299b1: mov    %r13,0x10(%rsp)
  0x00007f8ab92299b6: mov    %r14,0x8(%rsp)
  0x00007f8ab92299bb: mov    %r15,(%rsp)
  0x00007f8ab92299bf: movabs $0x7f8acf15ca37,%rdi
  0x00007f8ab92299c9: movabs $0x7f8ab9229969,%rsi
  0x00007f8ab92299d3: mov    %rsp,%rdx
  0x00007f8ab92299d6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92299da: callq  0x00007f8aceddb9fa
  0x00007f8ab92299df: hlt    
  0x00007f8ab92299e0: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab92299eb: je     0x00007f8ab9229a68
  0x00007f8ab92299f1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92299f6: sub    $0x80,%rsp
  0x00007f8ab92299fd: mov    %rax,0x78(%rsp)
  0x00007f8ab9229a02: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229a07: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229a0c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229a11: mov    %rbp,0x50(%rsp)
  0x00007f8ab9229a16: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229a1b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229a20: mov    %r8,0x38(%rsp)
  0x00007f8ab9229a25: mov    %r9,0x30(%rsp)
  0x00007f8ab9229a2a: mov    %r10,0x28(%rsp)
  0x00007f8ab9229a2f: mov    %r11,0x20(%rsp)
  0x00007f8ab9229a34: mov    %r12,0x18(%rsp)
  0x00007f8ab9229a39: mov    %r13,0x10(%rsp)
  0x00007f8ab9229a3e: mov    %r14,0x8(%rsp)
  0x00007f8ab9229a43: mov    %r15,(%rsp)
  0x00007f8ab9229a47: movabs $0x7f8acf15ca53,%rdi
  0x00007f8ab9229a51: movabs $0x7f8ab92299f1,%rsi
  0x00007f8ab9229a5b: mov    %rsp,%rdx
  0x00007f8ab9229a5e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229a62: callq  0x00007f8aceddb9fa
  0x00007f8ab9229a67: hlt    
  0x00007f8ab9229a68: mov    %rax,0x2d0(%r15)
  0x00007f8ab9229a6f: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f8ab9229a76: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9229a7c: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9229a82: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9229a88: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9229a8e: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9229a94: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9229a9a: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9229aa0: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9229aa6: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9229aac: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9229ab2: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9229ab8: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9229abe: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9229ac4: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9229aca: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9229ad0: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9229ad9: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9229ae5: je     0x00007f8ab9229b62
  0x00007f8ab9229aeb: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9229af0: sub    $0x80,%rsp
  0x00007f8ab9229af7: mov    %rax,0x78(%rsp)
  0x00007f8ab9229afc: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229b01: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229b06: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229b0b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9229b10: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229b15: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229b1a: mov    %r8,0x38(%rsp)
  0x00007f8ab9229b1f: mov    %r9,0x30(%rsp)
  0x00007f8ab9229b24: mov    %r10,0x28(%rsp)
  0x00007f8ab9229b29: mov    %r11,0x20(%rsp)
  0x00007f8ab9229b2e: mov    %r12,0x18(%rsp)
  0x00007f8ab9229b33: mov    %r13,0x10(%rsp)
  0x00007f8ab9229b38: mov    %r14,0x8(%rsp)
  0x00007f8ab9229b3d: mov    %r15,(%rsp)
  0x00007f8ab9229b41: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9229b4b: movabs $0x7f8ab9229aeb,%rsi
  0x00007f8ab9229b55: mov    %rsp,%rdx
  0x00007f8ab9229b58: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229b5c: callq  0x00007f8aceddb9fa
  0x00007f8ab9229b61: hlt    
  0x00007f8ab9229b62: add    $0x150,%rsp
  0x00007f8ab9229b69: mov    (%rsp),%r15
  0x00007f8ab9229b6d: mov    0x8(%rsp),%r14
  0x00007f8ab9229b72: mov    0x10(%rsp),%r13
  0x00007f8ab9229b77: mov    0x18(%rsp),%r12
  0x00007f8ab9229b7c: mov    0x20(%rsp),%r11
  0x00007f8ab9229b81: mov    0x28(%rsp),%r10
  0x00007f8ab9229b86: mov    0x30(%rsp),%r9
  0x00007f8ab9229b8b: mov    0x38(%rsp),%r8
  0x00007f8ab9229b90: mov    0x40(%rsp),%rdi
  0x00007f8ab9229b95: mov    0x48(%rsp),%rsi
  0x00007f8ab9229b9a: mov    0x50(%rsp),%rbp
  0x00007f8ab9229b9f: mov    0x60(%rsp),%rbx
  0x00007f8ab9229ba4: mov    0x68(%rsp),%rdx
  0x00007f8ab9229ba9: mov    0x70(%rsp),%rcx
  0x00007f8ab9229bae: mov    0x78(%rsp),%rax
  0x00007f8ab9229bb3: add    $0x80,%rsp
  0x00007f8ab9229bba: leaveq 
  0x00007f8ab9229bbb: add    $0x8,%rsp
  0x00007f8ab9229bbf: jmpq   0x00007f8ab91073da
  0x00007f8ab9229bc4: test   %rax,%rax
  0x00007f8ab9229bc7: je     0x00007f8ab9229d17
  ;; restore_live_registers
  0x00007f8ab9229bcd: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9229bd3: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9229bd9: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9229bdf: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9229be5: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9229beb: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9229bf1: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9229bf7: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9229bfd: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9229c03: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9229c09: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9229c0f: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9229c15: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9229c1b: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9229c21: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9229c27: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9229c30: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9229c3c: je     0x00007f8ab9229cb9
  0x00007f8ab9229c42: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9229c47: sub    $0x80,%rsp
  0x00007f8ab9229c4e: mov    %rax,0x78(%rsp)
  0x00007f8ab9229c53: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229c58: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229c5d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229c62: mov    %rbp,0x50(%rsp)
  0x00007f8ab9229c67: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229c6c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229c71: mov    %r8,0x38(%rsp)
  0x00007f8ab9229c76: mov    %r9,0x30(%rsp)
  0x00007f8ab9229c7b: mov    %r10,0x28(%rsp)
  0x00007f8ab9229c80: mov    %r11,0x20(%rsp)
  0x00007f8ab9229c85: mov    %r12,0x18(%rsp)
  0x00007f8ab9229c8a: mov    %r13,0x10(%rsp)
  0x00007f8ab9229c8f: mov    %r14,0x8(%rsp)
  0x00007f8ab9229c94: mov    %r15,(%rsp)
  0x00007f8ab9229c98: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9229ca2: movabs $0x7f8ab9229c42,%rsi
  0x00007f8ab9229cac: mov    %rsp,%rdx
  0x00007f8ab9229caf: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229cb3: callq  0x00007f8aceddb9fa
  0x00007f8ab9229cb8: hlt    
  0x00007f8ab9229cb9: add    $0x150,%rsp
  0x00007f8ab9229cc0: mov    (%rsp),%r15
  0x00007f8ab9229cc4: mov    0x8(%rsp),%r14
  0x00007f8ab9229cc9: mov    0x10(%rsp),%r13
  0x00007f8ab9229cce: mov    0x18(%rsp),%r12
  0x00007f8ab9229cd3: mov    0x20(%rsp),%r11
  0x00007f8ab9229cd8: mov    0x28(%rsp),%r10
  0x00007f8ab9229cdd: mov    0x30(%rsp),%r9
  0x00007f8ab9229ce2: mov    0x38(%rsp),%r8
  0x00007f8ab9229ce7: mov    0x40(%rsp),%rdi
  0x00007f8ab9229cec: mov    0x48(%rsp),%rsi
  0x00007f8ab9229cf1: mov    0x50(%rsp),%rbp
  0x00007f8ab9229cf6: mov    0x60(%rsp),%rbx
  0x00007f8ab9229cfb: mov    0x68(%rsp),%rdx
  0x00007f8ab9229d00: mov    0x70(%rsp),%rcx
  0x00007f8ab9229d05: mov    0x78(%rsp),%rax
  0x00007f8ab9229d0a: add    $0x80,%rsp
  0x00007f8ab9229d11: leaveq 
  0x00007f8ab9229d12: jmpq   0x00007f8ab9107356
  ;; restore_live_registers
  0x00007f8ab9229d17: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9229d1d: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9229d23: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9229d29: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9229d2f: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9229d35: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9229d3b: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9229d41: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9229d47: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9229d4d: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9229d53: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9229d59: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9229d5f: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9229d65: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9229d6b: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9229d71: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9229d7a: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9229d86: je     0x00007f8ab9229e03
  0x00007f8ab9229d8c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9229d91: sub    $0x80,%rsp
  0x00007f8ab9229d98: mov    %rax,0x78(%rsp)
  0x00007f8ab9229d9d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229da2: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229da7: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229dac: mov    %rbp,0x50(%rsp)
  0x00007f8ab9229db1: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229db6: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229dbb: mov    %r8,0x38(%rsp)
  0x00007f8ab9229dc0: mov    %r9,0x30(%rsp)
  0x00007f8ab9229dc5: mov    %r10,0x28(%rsp)
  0x00007f8ab9229dca: mov    %r11,0x20(%rsp)
  0x00007f8ab9229dcf: mov    %r12,0x18(%rsp)
  0x00007f8ab9229dd4: mov    %r13,0x10(%rsp)
  0x00007f8ab9229dd9: mov    %r14,0x8(%rsp)
  0x00007f8ab9229dde: mov    %r15,(%rsp)
  0x00007f8ab9229de2: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9229dec: movabs $0x7f8ab9229d8c,%rsi
  0x00007f8ab9229df6: mov    %rsp,%rdx
  0x00007f8ab9229df9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229dfd: callq  0x00007f8aceddb9fa
  0x00007f8ab9229e02: hlt    
  0x00007f8ab9229e03: add    $0x150,%rsp
  0x00007f8ab9229e0a: mov    (%rsp),%r15
  0x00007f8ab9229e0e: mov    0x8(%rsp),%r14
  0x00007f8ab9229e13: mov    0x10(%rsp),%r13
  0x00007f8ab9229e18: mov    0x18(%rsp),%r12
  0x00007f8ab9229e1d: mov    0x20(%rsp),%r11
  0x00007f8ab9229e22: mov    0x28(%rsp),%r10
  0x00007f8ab9229e27: mov    0x30(%rsp),%r9
  0x00007f8ab9229e2c: mov    0x38(%rsp),%r8
  0x00007f8ab9229e31: mov    0x40(%rsp),%rdi
  0x00007f8ab9229e36: mov    0x48(%rsp),%rsi
  0x00007f8ab9229e3b: mov    0x50(%rsp),%rbp
  0x00007f8ab9229e40: mov    0x60(%rsp),%rbx
  0x00007f8ab9229e45: mov    0x68(%rsp),%rdx
  0x00007f8ab9229e4a: mov    0x70(%rsp),%rcx
  0x00007f8ab9229e4f: mov    0x78(%rsp),%rax
  0x00007f8ab9229e54: add    $0x80,%rsp
  0x00007f8ab9229e5b: leaveq 
  0x00007f8ab9229e5c: retq   
  0x00007f8ab9229e5d: leaveq 
  0x00007f8ab9229e5e: retq   
  0x00007f8ab9229e5f: nop

Decoding RuntimeStub - load_klass_patching Runtime1 stub 0x00007f8ab922c350
  0x00007f8ab922c420: push   %rbp
  0x00007f8ab922c421: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab922c424: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c429: sub    $0x80,%rsp
  0x00007f8ab922c430: mov    %rax,0x78(%rsp)
  0x00007f8ab922c435: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c43a: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c43f: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c444: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c449: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c44e: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c453: mov    %r8,0x38(%rsp)
  0x00007f8ab922c458: mov    %r9,0x30(%rsp)
  0x00007f8ab922c45d: mov    %r10,0x28(%rsp)
  0x00007f8ab922c462: mov    %r11,0x20(%rsp)
  0x00007f8ab922c467: mov    %r12,0x18(%rsp)
  0x00007f8ab922c46c: mov    %r13,0x10(%rsp)
  0x00007f8ab922c471: mov    %r14,0x8(%rsp)
  0x00007f8ab922c476: mov    %r15,(%rsp)
  0x00007f8ab922c47a: sub    $0x150,%rsp
  0x00007f8ab922c481: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922c48d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab922c493: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab922c499: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab922c49f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab922c4a5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab922c4ab: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab922c4b1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab922c4b7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab922c4bd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab922c4c3: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab922c4c9: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab922c4cf: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab922c4d5: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab922c4db: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab922c4e1: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab922c4e7: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab922c4f0: mov    %r15,%rdi
  0x00007f8ab922c4f3: mov    %rbp,0x210(%r15)
  0x00007f8ab922c4fa: mov    %rsp,0x200(%r15)
  0x00007f8ab922c501: callq  0x00007f8ace8bea58
  0x00007f8ab922c506: push   %rax
  0x00007f8ab922c507: push   %rdi
  0x00007f8ab922c508: push   %rsi
  0x00007f8ab922c509: push   %rdx
  0x00007f8ab922c50a: push   %rcx
  0x00007f8ab922c50b: push   %r8
  0x00007f8ab922c50d: push   %r9
  0x00007f8ab922c50f: push   %r10
  0x00007f8ab922c511: mov    %rsp,%r10
  0x00007f8ab922c514: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c518: push   %r10
  0x00007f8ab922c51a: push   %r11
  0x00007f8ab922c51c: mov    $0x1,%edi
  0x00007f8ab922c521: callq  0x00007f8acf9c32d0
  0x00007f8ab922c526: pop    %r11
  0x00007f8ab922c528: pop    %rsp
  0x00007f8ab922c529: pop    %r10
  0x00007f8ab922c52b: pop    %r9
  0x00007f8ab922c52d: pop    %r8
  0x00007f8ab922c52f: pop    %rcx
  0x00007f8ab922c530: pop    %rdx
  0x00007f8ab922c531: pop    %rsi
  0x00007f8ab922c532: pop    %rdi
  0x00007f8ab922c533: cmp    %rax,%r15
  0x00007f8ab922c536: je     0x00007f8ab922c5b3
  0x00007f8ab922c53c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c541: sub    $0x80,%rsp
  0x00007f8ab922c548: mov    %rax,0x78(%rsp)
  0x00007f8ab922c54d: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c552: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c557: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c55c: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c561: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c566: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c56b: mov    %r8,0x38(%rsp)
  0x00007f8ab922c570: mov    %r9,0x30(%rsp)
  0x00007f8ab922c575: mov    %r10,0x28(%rsp)
  0x00007f8ab922c57a: mov    %r11,0x20(%rsp)
  0x00007f8ab922c57f: mov    %r12,0x18(%rsp)
  0x00007f8ab922c584: mov    %r13,0x10(%rsp)
  0x00007f8ab922c589: mov    %r14,0x8(%rsp)
  0x00007f8ab922c58e: mov    %r15,(%rsp)
  0x00007f8ab922c592: movabs $0x7f8acf15cac8,%rdi
  0x00007f8ab922c59c: movabs $0x7f8ab922c53c,%rsi
  0x00007f8ab922c5a6: mov    %rsp,%rdx
  0x00007f8ab922c5a9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c5ad: callq  0x00007f8aceddb9fa
  0x00007f8ab922c5b2: hlt    
  0x00007f8ab922c5b3: pop    %rax
  0x00007f8ab922c5b4: movabs $0x0,%r10
  0x00007f8ab922c5be: mov    %r10,0x200(%r15)
  0x00007f8ab922c5c5: movabs $0x0,%r10
  0x00007f8ab922c5cf: mov    %r10,0x210(%r15)
  0x00007f8ab922c5d6: movabs $0x0,%r10
  0x00007f8ab922c5e0: mov    %r10,0x208(%r15)
  0x00007f8ab922c5e7: cmpq   $0x0,0x8(%r15)
  0x00007f8ab922c5ef: je     0x00007f8ab922c884
  0x00007f8ab922c5f5: test   %rax,%rax
  0x00007f8ab922c5f8: je     0x00007f8ab9167c00
  0x00007f8ab922c5fe: mov    0x8(%r15),%rax
  0x00007f8ab922c602: movabs $0x0,%r10
  0x00007f8ab922c60c: mov    %r10,0x8(%r15)
  0x00007f8ab922c610: mov    0x1d8(%rsp),%rdx
  0x00007f8ab922c618: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab922c623: je     0x00007f8ab922c6a0
  0x00007f8ab922c629: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c62e: sub    $0x80,%rsp
  0x00007f8ab922c635: mov    %rax,0x78(%rsp)
  0x00007f8ab922c63a: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c63f: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c644: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c649: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c64e: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c653: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c658: mov    %r8,0x38(%rsp)
  0x00007f8ab922c65d: mov    %r9,0x30(%rsp)
  0x00007f8ab922c662: mov    %r10,0x28(%rsp)
  0x00007f8ab922c667: mov    %r11,0x20(%rsp)
  0x00007f8ab922c66c: mov    %r12,0x18(%rsp)
  0x00007f8ab922c671: mov    %r13,0x10(%rsp)
  0x00007f8ab922c676: mov    %r14,0x8(%rsp)
  0x00007f8ab922c67b: mov    %r15,(%rsp)
  0x00007f8ab922c67f: movabs $0x7f8acf15ca37,%rdi
  0x00007f8ab922c689: movabs $0x7f8ab922c629,%rsi
  0x00007f8ab922c693: mov    %rsp,%rdx
  0x00007f8ab922c696: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c69a: callq  0x00007f8aceddb9fa
  0x00007f8ab922c69f: hlt    
  0x00007f8ab922c6a0: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab922c6ab: je     0x00007f8ab922c728
  0x00007f8ab922c6b1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c6b6: sub    $0x80,%rsp
  0x00007f8ab922c6bd: mov    %rax,0x78(%rsp)
  0x00007f8ab922c6c2: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c6c7: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c6cc: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c6d1: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c6d6: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c6db: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c6e0: mov    %r8,0x38(%rsp)
  0x00007f8ab922c6e5: mov    %r9,0x30(%rsp)
  0x00007f8ab922c6ea: mov    %r10,0x28(%rsp)
  0x00007f8ab922c6ef: mov    %r11,0x20(%rsp)
  0x00007f8ab922c6f4: mov    %r12,0x18(%rsp)
  0x00007f8ab922c6f9: mov    %r13,0x10(%rsp)
  0x00007f8ab922c6fe: mov    %r14,0x8(%rsp)
  0x00007f8ab922c703: mov    %r15,(%rsp)
  0x00007f8ab922c707: movabs $0x7f8acf15ca53,%rdi
  0x00007f8ab922c711: movabs $0x7f8ab922c6b1,%rsi
  0x00007f8ab922c71b: mov    %rsp,%rdx
  0x00007f8ab922c71e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c722: callq  0x00007f8aceddb9fa
  0x00007f8ab922c727: hlt    
  0x00007f8ab922c728: mov    %rax,0x2d0(%r15)
  0x00007f8ab922c72f: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f8ab922c736: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922c73c: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922c742: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922c748: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922c74e: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922c754: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922c75a: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922c760: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922c766: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922c76c: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922c772: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922c778: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922c77e: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922c784: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922c78a: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922c790: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922c799: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922c7a5: je     0x00007f8ab922c822
  0x00007f8ab922c7ab: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c7b0: sub    $0x80,%rsp
  0x00007f8ab922c7b7: mov    %rax,0x78(%rsp)
  0x00007f8ab922c7bc: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c7c1: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c7c6: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c7cb: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c7d0: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c7d5: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c7da: mov    %r8,0x38(%rsp)
  0x00007f8ab922c7df: mov    %r9,0x30(%rsp)
  0x00007f8ab922c7e4: mov    %r10,0x28(%rsp)
  0x00007f8ab922c7e9: mov    %r11,0x20(%rsp)
  0x00007f8ab922c7ee: mov    %r12,0x18(%rsp)
  0x00007f8ab922c7f3: mov    %r13,0x10(%rsp)
  0x00007f8ab922c7f8: mov    %r14,0x8(%rsp)
  0x00007f8ab922c7fd: mov    %r15,(%rsp)
  0x00007f8ab922c801: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922c80b: movabs $0x7f8ab922c7ab,%rsi
  0x00007f8ab922c815: mov    %rsp,%rdx
  0x00007f8ab922c818: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c81c: callq  0x00007f8aceddb9fa
  0x00007f8ab922c821: hlt    
  0x00007f8ab922c822: add    $0x150,%rsp
  0x00007f8ab922c829: mov    (%rsp),%r15
  0x00007f8ab922c82d: mov    0x8(%rsp),%r14
  0x00007f8ab922c832: mov    0x10(%rsp),%r13
  0x00007f8ab922c837: mov    0x18(%rsp),%r12
  0x00007f8ab922c83c: mov    0x20(%rsp),%r11
  0x00007f8ab922c841: mov    0x28(%rsp),%r10
  0x00007f8ab922c846: mov    0x30(%rsp),%r9
  0x00007f8ab922c84b: mov    0x38(%rsp),%r8
  0x00007f8ab922c850: mov    0x40(%rsp),%rdi
  0x00007f8ab922c855: mov    0x48(%rsp),%rsi
  0x00007f8ab922c85a: mov    0x50(%rsp),%rbp
  0x00007f8ab922c85f: mov    0x60(%rsp),%rbx
  0x00007f8ab922c864: mov    0x68(%rsp),%rdx
  0x00007f8ab922c869: mov    0x70(%rsp),%rcx
  0x00007f8ab922c86e: mov    0x78(%rsp),%rax
  0x00007f8ab922c873: add    $0x80,%rsp
  0x00007f8ab922c87a: leaveq 
  0x00007f8ab922c87b: add    $0x8,%rsp
  0x00007f8ab922c87f: jmpq   0x00007f8ab91073da
  0x00007f8ab922c884: test   %rax,%rax
  0x00007f8ab922c887: je     0x00007f8ab922c9d7
  ;; restore_live_registers
  0x00007f8ab922c88d: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922c893: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922c899: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922c89f: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922c8a5: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922c8ab: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922c8b1: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922c8b7: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922c8bd: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922c8c3: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922c8c9: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922c8cf: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922c8d5: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922c8db: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922c8e1: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922c8e7: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922c8f0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922c8fc: je     0x00007f8ab922c979
  0x00007f8ab922c902: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c907: sub    $0x80,%rsp
  0x00007f8ab922c90e: mov    %rax,0x78(%rsp)
  0x00007f8ab922c913: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c918: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c91d: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c922: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c927: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c92c: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c931: mov    %r8,0x38(%rsp)
  0x00007f8ab922c936: mov    %r9,0x30(%rsp)
  0x00007f8ab922c93b: mov    %r10,0x28(%rsp)
  0x00007f8ab922c940: mov    %r11,0x20(%rsp)
  0x00007f8ab922c945: mov    %r12,0x18(%rsp)
  0x00007f8ab922c94a: mov    %r13,0x10(%rsp)
  0x00007f8ab922c94f: mov    %r14,0x8(%rsp)
  0x00007f8ab922c954: mov    %r15,(%rsp)
  0x00007f8ab922c958: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922c962: movabs $0x7f8ab922c902,%rsi
  0x00007f8ab922c96c: mov    %rsp,%rdx
  0x00007f8ab922c96f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c973: callq  0x00007f8aceddb9fa
  0x00007f8ab922c978: hlt    
  0x00007f8ab922c979: add    $0x150,%rsp
  0x00007f8ab922c980: mov    (%rsp),%r15
  0x00007f8ab922c984: mov    0x8(%rsp),%r14
  0x00007f8ab922c989: mov    0x10(%rsp),%r13
  0x00007f8ab922c98e: mov    0x18(%rsp),%r12
  0x00007f8ab922c993: mov    0x20(%rsp),%r11
  0x00007f8ab922c998: mov    0x28(%rsp),%r10
  0x00007f8ab922c99d: mov    0x30(%rsp),%r9
  0x00007f8ab922c9a2: mov    0x38(%rsp),%r8
  0x00007f8ab922c9a7: mov    0x40(%rsp),%rdi
  0x00007f8ab922c9ac: mov    0x48(%rsp),%rsi
  0x00007f8ab922c9b1: mov    0x50(%rsp),%rbp
  0x00007f8ab922c9b6: mov    0x60(%rsp),%rbx
  0x00007f8ab922c9bb: mov    0x68(%rsp),%rdx
  0x00007f8ab922c9c0: mov    0x70(%rsp),%rcx
  0x00007f8ab922c9c5: mov    0x78(%rsp),%rax
  0x00007f8ab922c9ca: add    $0x80,%rsp
  0x00007f8ab922c9d1: leaveq 
  0x00007f8ab922c9d2: jmpq   0x00007f8ab9107356
  ;; restore_live_registers
  0x00007f8ab922c9d7: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922c9dd: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922c9e3: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922c9e9: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922c9ef: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922c9f5: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922c9fb: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922ca01: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922ca07: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922ca0d: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922ca13: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922ca19: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922ca1f: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922ca25: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922ca2b: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922ca31: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922ca3a: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922ca46: je     0x00007f8ab922cac3
  0x00007f8ab922ca4c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922ca51: sub    $0x80,%rsp
  0x00007f8ab922ca58: mov    %rax,0x78(%rsp)
  0x00007f8ab922ca5d: mov    %rcx,0x70(%rsp)
  0x00007f8ab922ca62: mov    %rdx,0x68(%rsp)
  0x00007f8ab922ca67: mov    %rbx,0x60(%rsp)
  0x00007f8ab922ca6c: mov    %rbp,0x50(%rsp)
  0x00007f8ab922ca71: mov    %rsi,0x48(%rsp)
  0x00007f8ab922ca76: mov    %rdi,0x40(%rsp)
  0x00007f8ab922ca7b: mov    %r8,0x38(%rsp)
  0x00007f8ab922ca80: mov    %r9,0x30(%rsp)
  0x00007f8ab922ca85: mov    %r10,0x28(%rsp)
  0x00007f8ab922ca8a: mov    %r11,0x20(%rsp)
  0x00007f8ab922ca8f: mov    %r12,0x18(%rsp)
  0x00007f8ab922ca94: mov    %r13,0x10(%rsp)
  0x00007f8ab922ca99: mov    %r14,0x8(%rsp)
  0x00007f8ab922ca9e: mov    %r15,(%rsp)
  0x00007f8ab922caa2: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922caac: movabs $0x7f8ab922ca4c,%rsi
  0x00007f8ab922cab6: mov    %rsp,%rdx
  0x00007f8ab922cab9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922cabd: callq  0x00007f8aceddb9fa
  0x00007f8ab922cac2: hlt    
  0x00007f8ab922cac3: add    $0x150,%rsp
  0x00007f8ab922caca: mov    (%rsp),%r15
  0x00007f8ab922cace: mov    0x8(%rsp),%r14
  0x00007f8ab922cad3: mov    0x10(%rsp),%r13
  0x00007f8ab922cad8: mov    0x18(%rsp),%r12
  0x00007f8ab922cadd: mov    0x20(%rsp),%r11
  0x00007f8ab922cae2: mov    0x28(%rsp),%r10
  0x00007f8ab922cae7: mov    0x30(%rsp),%r9
  0x00007f8ab922caec: mov    0x38(%rsp),%r8
  0x00007f8ab922caf1: mov    0x40(%rsp),%rdi
  0x00007f8ab922caf6: mov    0x48(%rsp),%rsi
  0x00007f8ab922cafb: mov    0x50(%rsp),%rbp
  0x00007f8ab922cb00: mov    0x60(%rsp),%rbx
  0x00007f8ab922cb05: mov    0x68(%rsp),%rdx
  0x00007f8ab922cb0a: mov    0x70(%rsp),%rcx
  0x00007f8ab922cb0f: mov    0x78(%rsp),%rax
  0x00007f8ab922cb14: add    $0x80,%rsp
  0x00007f8ab922cb1b: leaveq 
  0x00007f8ab922cb1c: retq   
  0x00007f8ab922cb1d: leaveq 
  0x00007f8ab922cb1e: retq   
  0x00007f8ab922cb1f: nop

Decoding RuntimeStub - _zap_dead_native_locals_Java 0x00007f8ab922a910
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f8ab922a960: sub    $0x88,%rsp
  0x00007f8ab922a967: mov    %rbp,0x80(%rsp)
  0x00007f8ab922a96f: vmovsd %xmm7,0x70(%rsp)
  0x00007f8ab922a975: vmovsd %xmm6,0x68(%rsp)
  0x00007f8ab922a97b: vmovsd %xmm5,0x60(%rsp)
  0x00007f8ab922a981: vmovsd %xmm4,0x58(%rsp)
  0x00007f8ab922a987: vmovsd %xmm3,0x50(%rsp)
  0x00007f8ab922a98d: vmovsd %xmm2,0x48(%rsp)
  0x00007f8ab922a993: vmovsd %xmm1,0x40(%rsp)
  0x00007f8ab922a999: vmovsd %xmm0,0x38(%rsp)
  0x00007f8ab922a99f: mov    %rsi,0x30(%rsp)
  0x00007f8ab922a9a4: mov    %rdx,0x28(%rsp)
  0x00007f8ab922a9a9: mov    %rdi,0x20(%rsp)
  0x00007f8ab922a9ae: mov    %rcx,0x18(%rsp)
  0x00007f8ab922a9b3: mov    %r12,0x10(%rsp)
  0x00007f8ab922a9b8: mov    %r9,0x8(%rsp)
  0x00007f8ab922a9bd: mov    %r8,(%rsp)
  0x00007f8ab922a9c1: mov    %rsp,0x200(%r15)
  0x00007f8ab922a9c8: mov    %r15,%rdi
  0x00007f8ab922a9cb: movabs $0x7f8acef7c952,%r10
  0x00007f8ab922a9d5: callq  *%r10
  0x00007f8ab922a9d8: mov    %r12,0x200(%r15)
  0x00007f8ab922a9df: mov    %r12,0x208(%r15)
  0x00007f8ab922a9e6: cmp    0x8(%r15),%r12
  0x00007f8ab922a9ea: jne    0x00007f8ab922aa47
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f8ab922a9ec: mov    (%rsp),%r8
  0x00007f8ab922a9f0: mov    0x8(%rsp),%r9
  0x00007f8ab922a9f5: mov    0x10(%rsp),%r12
  0x00007f8ab922a9fa: mov    0x18(%rsp),%rcx
  0x00007f8ab922a9ff: mov    0x20(%rsp),%rdi
  0x00007f8ab922aa04: mov    0x28(%rsp),%rdx
  0x00007f8ab922aa09: mov    0x30(%rsp),%rsi
  0x00007f8ab922aa0e: vmovsd 0x38(%rsp),%xmm0
  0x00007f8ab922aa14: vmovsd 0x40(%rsp),%xmm1
  0x00007f8ab922aa1a: vmovsd 0x48(%rsp),%xmm2
  0x00007f8ab922aa20: vmovsd 0x50(%rsp),%xmm3
  0x00007f8ab922aa26: vmovsd 0x58(%rsp),%xmm4
  0x00007f8ab922aa2c: vmovsd 0x60(%rsp),%xmm5
  0x00007f8ab922aa32: vmovsd 0x68(%rsp),%xmm6
  0x00007f8ab922aa38: vmovsd 0x70(%rsp),%xmm7
  0x00007f8ab922aa3e: add    $0x80,%rsp
  0x00007f8ab922aa45: pop    %rbp
  0x00007f8ab922aa46: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f8ab922aa47: movabs $0x7f8ab9000420,%r10
  0x00007f8ab922aa51: xor    %ebx,%ebx
  0x00007f8ab922aa53: mov    (%rsp),%r8
  0x00007f8ab922aa57: mov    0x8(%rsp),%r9
  0x00007f8ab922aa5c: mov    0x10(%rsp),%r12
  0x00007f8ab922aa61: mov    0x18(%rsp),%rcx
  0x00007f8ab922aa66: mov    0x20(%rsp),%rdi
  0x00007f8ab922aa6b: mov    0x28(%rsp),%rdx
  0x00007f8ab922aa70: mov    0x30(%rsp),%rsi
  0x00007f8ab922aa75: vmovsd 0x38(%rsp),%xmm0
  0x00007f8ab922aa7b: vmovsd 0x40(%rsp),%xmm1
  0x00007f8ab922aa81: vmovsd 0x48(%rsp),%xmm2
  0x00007f8ab922aa87: vmovsd 0x50(%rsp),%xmm3
  0x00007f8ab922aa8d: vmovsd 0x58(%rsp),%xmm4
  0x00007f8ab922aa93: vmovsd 0x60(%rsp),%xmm5
  0x00007f8ab922aa99: vmovsd 0x68(%rsp),%xmm6
  0x00007f8ab922aa9f: vmovsd 0x70(%rsp),%xmm7
  0x00007f8ab922aaa5: add    $0x80,%rsp
  0x00007f8ab922aaac: pop    %rbp
  0x00007f8ab922aaad: jmpq   *%r10

Decoding RuntimeStub - load_mirror_patching Runtime1 stub 0x00007f8ab922cb50
  0x00007f8ab922cc20: push   %rbp
  0x00007f8ab922cc21: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab922cc24: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922cc29: sub    $0x80,%rsp
  0x00007f8ab922cc30: mov    %rax,0x78(%rsp)
  0x00007f8ab922cc35: mov    %rcx,0x70(%rsp)
  0x00007f8ab922cc3a: mov    %rdx,0x68(%rsp)
  0x00007f8ab922cc3f: mov    %rbx,0x60(%rsp)
  0x00007f8ab922cc44: mov    %rbp,0x50(%rsp)
  0x00007f8ab922cc49: mov    %rsi,0x48(%rsp)
  0x00007f8ab922cc4e: mov    %rdi,0x40(%rsp)
  0x00007f8ab922cc53: mov    %r8,0x38(%rsp)
  0x00007f8ab922cc58: mov    %r9,0x30(%rsp)
  0x00007f8ab922cc5d: mov    %r10,0x28(%rsp)
  0x00007f8ab922cc62: mov    %r11,0x20(%rsp)
  0x00007f8ab922cc67: mov    %r12,0x18(%rsp)
  0x00007f8ab922cc6c: mov    %r13,0x10(%rsp)
  0x00007f8ab922cc71: mov    %r14,0x8(%rsp)
  0x00007f8ab922cc76: mov    %r15,(%rsp)
  0x00007f8ab922cc7a: sub    $0x150,%rsp
  0x00007f8ab922cc81: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922cc8d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab922cc93: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab922cc99: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab922cc9f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab922cca5: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab922ccab: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab922ccb1: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab922ccb7: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab922ccbd: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab922ccc3: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab922ccc9: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab922cccf: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab922ccd5: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab922ccdb: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab922cce1: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab922cce7: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab922ccf0: mov    %r15,%rdi
  0x00007f8ab922ccf3: mov    %rbp,0x210(%r15)
  0x00007f8ab922ccfa: mov    %rsp,0x200(%r15)
  0x00007f8ab922cd01: callq  0x00007f8ace8beac0
  0x00007f8ab922cd06: push   %rax
  0x00007f8ab922cd07: push   %rdi
  0x00007f8ab922cd08: push   %rsi
  0x00007f8ab922cd09: push   %rdx
  0x00007f8ab922cd0a: push   %rcx
  0x00007f8ab922cd0b: push   %r8
  0x00007f8ab922cd0d: push   %r9
  0x00007f8ab922cd0f: push   %r10
  0x00007f8ab922cd11: mov    %rsp,%r10
  0x00007f8ab922cd14: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922cd18: push   %r10
  0x00007f8ab922cd1a: push   %r11
  0x00007f8ab922cd1c: mov    $0x1,%edi
  0x00007f8ab922cd21: callq  0x00007f8acf9c32d0
  0x00007f8ab922cd26: pop    %r11
  0x00007f8ab922cd28: pop    %rsp
  0x00007f8ab922cd29: pop    %r10
  0x00007f8ab922cd2b: pop    %r9
  0x00007f8ab922cd2d: pop    %r8
  0x00007f8ab922cd2f: pop    %rcx
  0x00007f8ab922cd30: pop    %rdx
  0x00007f8ab922cd31: pop    %rsi
  0x00007f8ab922cd32: pop    %rdi
  0x00007f8ab922cd33: cmp    %rax,%r15
  0x00007f8ab922cd36: je     0x00007f8ab922cdb3
  0x00007f8ab922cd3c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922cd41: sub    $0x80,%rsp
  0x00007f8ab922cd48: mov    %rax,0x78(%rsp)
  0x00007f8ab922cd4d: mov    %rcx,0x70(%rsp)
  0x00007f8ab922cd52: mov    %rdx,0x68(%rsp)
  0x00007f8ab922cd57: mov    %rbx,0x60(%rsp)
  0x00007f8ab922cd5c: mov    %rbp,0x50(%rsp)
  0x00007f8ab922cd61: mov    %rsi,0x48(%rsp)
  0x00007f8ab922cd66: mov    %rdi,0x40(%rsp)
  0x00007f8ab922cd6b: mov    %r8,0x38(%rsp)
  0x00007f8ab922cd70: mov    %r9,0x30(%rsp)
  0x00007f8ab922cd75: mov    %r10,0x28(%rsp)
  0x00007f8ab922cd7a: mov    %r11,0x20(%rsp)
  0x00007f8ab922cd7f: mov    %r12,0x18(%rsp)
  0x00007f8ab922cd84: mov    %r13,0x10(%rsp)
  0x00007f8ab922cd89: mov    %r14,0x8(%rsp)
  0x00007f8ab922cd8e: mov    %r15,(%rsp)
  0x00007f8ab922cd92: movabs $0x7f8acf15cac8,%rdi
  0x00007f8ab922cd9c: movabs $0x7f8ab922cd3c,%rsi
  0x00007f8ab922cda6: mov    %rsp,%rdx
  0x00007f8ab922cda9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922cdad: callq  0x00007f8aceddb9fa
  0x00007f8ab922cdb2: hlt    
  0x00007f8ab922cdb3: pop    %rax
  0x00007f8ab922cdb4: movabs $0x0,%r10
  0x00007f8ab922cdbe: mov    %r10,0x200(%r15)
  0x00007f8ab922cdc5: movabs $0x0,%r10
  0x00007f8ab922cdcf: mov    %r10,0x210(%r15)
  0x00007f8ab922cdd6: movabs $0x0,%r10
  0x00007f8ab922cde0: mov    %r10,0x208(%r15)
  0x00007f8ab922cde7: cmpq   $0x0,0x8(%r15)
  0x00007f8ab922cdef: je     0x00007f8ab922d084
  0x00007f8ab922cdf5: test   %rax,%rax
  0x00007f8ab922cdf8: je     0x00007f8ab9167c00
  0x00007f8ab922cdfe: mov    0x8(%r15),%rax
  0x00007f8ab922ce02: movabs $0x0,%r10
  0x00007f8ab922ce0c: mov    %r10,0x8(%r15)
  0x00007f8ab922ce10: mov    0x1d8(%rsp),%rdx
  0x00007f8ab922ce18: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab922ce23: je     0x00007f8ab922cea0
  0x00007f8ab922ce29: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922ce2e: sub    $0x80,%rsp
  0x00007f8ab922ce35: mov    %rax,0x78(%rsp)
  0x00007f8ab922ce3a: mov    %rcx,0x70(%rsp)
  0x00007f8ab922ce3f: mov    %rdx,0x68(%rsp)
  0x00007f8ab922ce44: mov    %rbx,0x60(%rsp)
  0x00007f8ab922ce49: mov    %rbp,0x50(%rsp)
  0x00007f8ab922ce4e: mov    %rsi,0x48(%rsp)
  0x00007f8ab922ce53: mov    %rdi,0x40(%rsp)
  0x00007f8ab922ce58: mov    %r8,0x38(%rsp)
  0x00007f8ab922ce5d: mov    %r9,0x30(%rsp)
  0x00007f8ab922ce62: mov    %r10,0x28(%rsp)
  0x00007f8ab922ce67: mov    %r11,0x20(%rsp)
  0x00007f8ab922ce6c: mov    %r12,0x18(%rsp)
  0x00007f8ab922ce71: mov    %r13,0x10(%rsp)
  0x00007f8ab922ce76: mov    %r14,0x8(%rsp)
  0x00007f8ab922ce7b: mov    %r15,(%rsp)
  0x00007f8ab922ce7f: movabs $0x7f8acf15ca37,%rdi
  0x00007f8ab922ce89: movabs $0x7f8ab922ce29,%rsi
  0x00007f8ab922ce93: mov    %rsp,%rdx
  0x00007f8ab922ce96: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ce9a: callq  0x00007f8aceddb9fa
  0x00007f8ab922ce9f: hlt    
  0x00007f8ab922cea0: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab922ceab: je     0x00007f8ab922cf28
  0x00007f8ab922ceb1: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922ceb6: sub    $0x80,%rsp
  0x00007f8ab922cebd: mov    %rax,0x78(%rsp)
  0x00007f8ab922cec2: mov    %rcx,0x70(%rsp)
  0x00007f8ab922cec7: mov    %rdx,0x68(%rsp)
  0x00007f8ab922cecc: mov    %rbx,0x60(%rsp)
  0x00007f8ab922ced1: mov    %rbp,0x50(%rsp)
  0x00007f8ab922ced6: mov    %rsi,0x48(%rsp)
  0x00007f8ab922cedb: mov    %rdi,0x40(%rsp)
  0x00007f8ab922cee0: mov    %r8,0x38(%rsp)
  0x00007f8ab922cee5: mov    %r9,0x30(%rsp)
  0x00007f8ab922ceea: mov    %r10,0x28(%rsp)
  0x00007f8ab922ceef: mov    %r11,0x20(%rsp)
  0x00007f8ab922cef4: mov    %r12,0x18(%rsp)
  0x00007f8ab922cef9: mov    %r13,0x10(%rsp)
  0x00007f8ab922cefe: mov    %r14,0x8(%rsp)
  0x00007f8ab922cf03: mov    %r15,(%rsp)
  0x00007f8ab922cf07: movabs $0x7f8acf15ca53,%rdi
  0x00007f8ab922cf11: movabs $0x7f8ab922ceb1,%rsi
  0x00007f8ab922cf1b: mov    %rsp,%rdx
  0x00007f8ab922cf1e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922cf22: callq  0x00007f8aceddb9fa
  0x00007f8ab922cf27: hlt    
  0x00007f8ab922cf28: mov    %rax,0x2d0(%r15)
  0x00007f8ab922cf2f: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f8ab922cf36: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922cf3c: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922cf42: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922cf48: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922cf4e: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922cf54: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922cf5a: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922cf60: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922cf66: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922cf6c: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922cf72: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922cf78: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922cf7e: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922cf84: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922cf8a: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922cf90: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922cf99: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922cfa5: je     0x00007f8ab922d022
  0x00007f8ab922cfab: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922cfb0: sub    $0x80,%rsp
  0x00007f8ab922cfb7: mov    %rax,0x78(%rsp)
  0x00007f8ab922cfbc: mov    %rcx,0x70(%rsp)
  0x00007f8ab922cfc1: mov    %rdx,0x68(%rsp)
  0x00007f8ab922cfc6: mov    %rbx,0x60(%rsp)
  0x00007f8ab922cfcb: mov    %rbp,0x50(%rsp)
  0x00007f8ab922cfd0: mov    %rsi,0x48(%rsp)
  0x00007f8ab922cfd5: mov    %rdi,0x40(%rsp)
  0x00007f8ab922cfda: mov    %r8,0x38(%rsp)
  0x00007f8ab922cfdf: mov    %r9,0x30(%rsp)
  0x00007f8ab922cfe4: mov    %r10,0x28(%rsp)
  0x00007f8ab922cfe9: mov    %r11,0x20(%rsp)
  0x00007f8ab922cfee: mov    %r12,0x18(%rsp)
  0x00007f8ab922cff3: mov    %r13,0x10(%rsp)
  0x00007f8ab922cff8: mov    %r14,0x8(%rsp)
  0x00007f8ab922cffd: mov    %r15,(%rsp)
  0x00007f8ab922d001: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922d00b: movabs $0x7f8ab922cfab,%rsi
  0x00007f8ab922d015: mov    %rsp,%rdx
  0x00007f8ab922d018: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922d01c: callq  0x00007f8aceddb9fa
  0x00007f8ab922d021: hlt    
  0x00007f8ab922d022: add    $0x150,%rsp
  0x00007f8ab922d029: mov    (%rsp),%r15
  0x00007f8ab922d02d: mov    0x8(%rsp),%r14
  0x00007f8ab922d032: mov    0x10(%rsp),%r13
  0x00007f8ab922d037: mov    0x18(%rsp),%r12
  0x00007f8ab922d03c: mov    0x20(%rsp),%r11
  0x00007f8ab922d041: mov    0x28(%rsp),%r10
  0x00007f8ab922d046: mov    0x30(%rsp),%r9
  0x00007f8ab922d04b: mov    0x38(%rsp),%r8
  0x00007f8ab922d050: mov    0x40(%rsp),%rdi
  0x00007f8ab922d055: mov    0x48(%rsp),%rsi
  0x00007f8ab922d05a: mov    0x50(%rsp),%rbp
  0x00007f8ab922d05f: mov    0x60(%rsp),%rbx
  0x00007f8ab922d064: mov    0x68(%rsp),%rdx
  0x00007f8ab922d069: mov    0x70(%rsp),%rcx
  0x00007f8ab922d06e: mov    0x78(%rsp),%rax
  0x00007f8ab922d073: add    $0x80,%rsp
  0x00007f8ab922d07a: leaveq 
  0x00007f8ab922d07b: add    $0x8,%rsp
  0x00007f8ab922d07f: jmpq   0x00007f8ab91073da
  0x00007f8ab922d084: test   %rax,%rax
  0x00007f8ab922d087: je     0x00007f8ab922d1d7
  ;; restore_live_registers
  0x00007f8ab922d08d: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922d093: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922d099: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922d09f: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922d0a5: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922d0ab: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922d0b1: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922d0b7: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922d0bd: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922d0c3: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922d0c9: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922d0cf: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922d0d5: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922d0db: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922d0e1: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922d0e7: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922d0f0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922d0fc: je     0x00007f8ab922d179
  0x00007f8ab922d102: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922d107: sub    $0x80,%rsp
  0x00007f8ab922d10e: mov    %rax,0x78(%rsp)
  0x00007f8ab922d113: mov    %rcx,0x70(%rsp)
  0x00007f8ab922d118: mov    %rdx,0x68(%rsp)
  0x00007f8ab922d11d: mov    %rbx,0x60(%rsp)
  0x00007f8ab922d122: mov    %rbp,0x50(%rsp)
  0x00007f8ab922d127: mov    %rsi,0x48(%rsp)
  0x00007f8ab922d12c: mov    %rdi,0x40(%rsp)
  0x00007f8ab922d131: mov    %r8,0x38(%rsp)
  0x00007f8ab922d136: mov    %r9,0x30(%rsp)
  0x00007f8ab922d13b: mov    %r10,0x28(%rsp)
  0x00007f8ab922d140: mov    %r11,0x20(%rsp)
  0x00007f8ab922d145: mov    %r12,0x18(%rsp)
  0x00007f8ab922d14a: mov    %r13,0x10(%rsp)
  0x00007f8ab922d14f: mov    %r14,0x8(%rsp)
  0x00007f8ab922d154: mov    %r15,(%rsp)
  0x00007f8ab922d158: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922d162: movabs $0x7f8ab922d102,%rsi
  0x00007f8ab922d16c: mov    %rsp,%rdx
  0x00007f8ab922d16f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922d173: callq  0x00007f8aceddb9fa
  0x00007f8ab922d178: hlt    
  0x00007f8ab922d179: add    $0x150,%rsp
  0x00007f8ab922d180: mov    (%rsp),%r15
  0x00007f8ab922d184: mov    0x8(%rsp),%r14
  0x00007f8ab922d189: mov    0x10(%rsp),%r13
  0x00007f8ab922d18e: mov    0x18(%rsp),%r12
  0x00007f8ab922d193: mov    0x20(%rsp),%r11
  0x00007f8ab922d198: mov    0x28(%rsp),%r10
  0x00007f8ab922d19d: mov    0x30(%rsp),%r9
  0x00007f8ab922d1a2: mov    0x38(%rsp),%r8
  0x00007f8ab922d1a7: mov    0x40(%rsp),%rdi
  0x00007f8ab922d1ac: mov    0x48(%rsp),%rsi
  0x00007f8ab922d1b1: mov    0x50(%rsp),%rbp
  0x00007f8ab922d1b6: mov    0x60(%rsp),%rbx
  0x00007f8ab922d1bb: mov    0x68(%rsp),%rdx
  0x00007f8ab922d1c0: mov    0x70(%rsp),%rcx
  0x00007f8ab922d1c5: mov    0x78(%rsp),%rax
  0x00007f8ab922d1ca: add    $0x80,%rsp
  0x00007f8ab922d1d1: leaveq 
  0x00007f8ab922d1d2: jmpq   0x00007f8ab9107356
  ;; restore_live_registers
  0x00007f8ab922d1d7: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922d1dd: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922d1e3: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922d1e9: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922d1ef: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922d1f5: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922d1fb: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922d201: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922d207: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922d20d: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922d213: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922d219: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922d21f: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922d225: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922d22b: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922d231: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922d23a: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922d246: je     0x00007f8ab922d2c3
  0x00007f8ab922d24c: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922d251: sub    $0x80,%rsp
  0x00007f8ab922d258: mov    %rax,0x78(%rsp)
  0x00007f8ab922d25d: mov    %rcx,0x70(%rsp)
  0x00007f8ab922d262: mov    %rdx,0x68(%rsp)
  0x00007f8ab922d267: mov    %rbx,0x60(%rsp)
  0x00007f8ab922d26c: mov    %rbp,0x50(%rsp)
  0x00007f8ab922d271: mov    %rsi,0x48(%rsp)
  0x00007f8ab922d276: mov    %rdi,0x40(%rsp)
  0x00007f8ab922d27b: mov    %r8,0x38(%rsp)
  0x00007f8ab922d280: mov    %r9,0x30(%rsp)
  0x00007f8ab922d285: mov    %r10,0x28(%rsp)
  0x00007f8ab922d28a: mov    %r11,0x20(%rsp)
  0x00007f8ab922d28f: mov    %r12,0x18(%rsp)
  0x00007f8ab922d294: mov    %r13,0x10(%rsp)
  0x00007f8ab922d299: mov    %r14,0x8(%rsp)
  0x00007f8ab922d29e: mov    %r15,(%rsp)
  0x00007f8ab922d2a2: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922d2ac: movabs $0x7f8ab922d24c,%rsi
  0x00007f8ab922d2b6: mov    %rsp,%rdx
  0x00007f8ab922d2b9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922d2bd: callq  0x00007f8aceddb9fa
  0x00007f8ab922d2c2: hlt    
  0x00007f8ab922d2c3: add    $0x150,%rsp
  0x00007f8ab922d2ca: mov    (%rsp),%r15
  0x00007f8ab922d2ce: mov    0x8(%rsp),%r14
  0x00007f8ab922d2d3: mov    0x10(%rsp),%r13
  0x00007f8ab922d2d8: mov    0x18(%rsp),%r12
  0x00007f8ab922d2dd: mov    0x20(%rsp),%r11
  0x00007f8ab922d2e2: mov    0x28(%rsp),%r10
  0x00007f8ab922d2e7: mov    0x30(%rsp),%r9
  0x00007f8ab922d2ec: mov    0x38(%rsp),%r8
  0x00007f8ab922d2f1: mov    0x40(%rsp),%rdi
  0x00007f8ab922d2f6: mov    0x48(%rsp),%rsi
  0x00007f8ab922d2fb: mov    0x50(%rsp),%rbp
  0x00007f8ab922d300: mov    0x60(%rsp),%rbx
  0x00007f8ab922d305: mov    0x68(%rsp),%rdx
  0x00007f8ab922d30a: mov    0x70(%rsp),%rcx
  0x00007f8ab922d30f: mov    0x78(%rsp),%rax
  0x00007f8ab922d314: add    $0x80,%rsp
  0x00007f8ab922d31b: leaveq 
  0x00007f8ab922d31c: retq   
  0x00007f8ab922d31d: leaveq 
  0x00007f8ab922d31e: retq   
  0x00007f8ab922d31f: nop

AHE@0x00007f8ac812f460: 0xbebebea0 i2c: 0x00007f8ab9229f20 c2i: 0x00007f8ab922a066 c2iUV: 0x00007f8ab922a039
i2c argument handler #120 for: static (JJJZ)V (649 bytes generated)
c2i argument handler starts at 0x7f8ab922a066
  0x00007f8ab9229f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9229f24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9229f2e: cmp    %r11,%rax
  0x00007f8ab9229f31: jbe    0x00007f8ab9229f4a
  0x00007f8ab9229f37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9229f41: cmp    %r11,%rax
  0x00007f8ab9229f44: jb     0x00007f8ab922a00d
  0x00007f8ab9229f4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9229f54: cmp    %r11,%rax
  0x00007f8ab9229f57: jbe    0x00007f8ab9229f70
  0x00007f8ab9229f5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9229f67: cmp    %r11,%rax
  0x00007f8ab9229f6a: jb     0x00007f8ab922a00d
  0x00007f8ab9229f70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9229f7a: cmp    %r11,%rax
  0x00007f8ab9229f7d: jbe    0x00007f8ab9229f96
  0x00007f8ab9229f83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9229f8d: cmp    %r11,%rax
  0x00007f8ab9229f90: jb     0x00007f8ab922a00d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9229f96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9229f9b: sub    $0x80,%rsp
  0x00007f8ab9229fa2: mov    %rax,0x78(%rsp)
  0x00007f8ab9229fa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229fac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229fb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229fb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9229fbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229fc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229fc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9229fca: mov    %r9,0x30(%rsp)
  0x00007f8ab9229fcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9229fd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9229fd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9229fde: mov    %r13,0x10(%rsp)
  0x00007f8ab9229fe3: mov    %r14,0x8(%rsp)
  0x00007f8ab9229fe8: mov    %r15,(%rsp)
  0x00007f8ab9229fec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9229ff6: movabs $0x7f8ab9229f96,%rsi
  0x00007f8ab922a000: mov    %rsp,%rdx
  0x00007f8ab922a003: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a007: callq  0x00007f8aceddb9fa
  0x00007f8ab922a00c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab922a00d: mov    %rsp,%r11
  0x00007f8ab922a010: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a014: push   %rax
  0x00007f8ab922a015: mov    %r11,%rax
  0x00007f8ab922a018: mov    0x50(%rbx),%r11
  0x00007f8ab922a01c: mov    0x30(%rax),%rsi
  0x00007f8ab922a020: mov    0x20(%rax),%rdx
  0x00007f8ab922a024: mov    0x10(%rax),%rcx
  0x00007f8ab922a028: mov    0x8(%rax),%r8d
  0x00007f8ab922a02c: mov    %rbx,0x258(%r15)
  0x00007f8ab922a033: mov    %rbx,%rax
  0x00007f8ab922a036: jmpq   *%r11
  0x00007f8ab922a039: mov    0x8(%rsi),%ebx
  0x00007f8ab922a03c: shl    $0x3,%rbx
  0x00007f8ab922a040: cmp    0x10(%rax),%rbx
  0x00007f8ab922a044: mov    0x8(%rax),%rbx
  0x00007f8ab922a048: je     0x00007f8ab922a053
  0x00007f8ab922a04e: jmpq   0x00007f8ab9105c40
  0x00007f8ab922a053: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922a05b: je     0x00007f8ab922a156
  0x00007f8ab922a061: jmpq   0x00007f8ab9105c40
  0x00007f8ab922a066: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922a06e: je     0x00007f8ab922a156
  0x00007f8ab922a074: mov    %rsp,%r13
  0x00007f8ab922a077: mov    (%rsp),%rax
  0x00007f8ab922a07b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922a07f: pushfq 
  0x00007f8ab922a080: sub    $0x8,%rsp
  0x00007f8ab922a084: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922a089: sub    $0x80,%rsp
  0x00007f8ab922a090: mov    %rax,0x78(%rsp)
  0x00007f8ab922a095: mov    %rcx,0x70(%rsp)
  0x00007f8ab922a09a: mov    %rdx,0x68(%rsp)
  0x00007f8ab922a09f: mov    %rbx,0x60(%rsp)
  0x00007f8ab922a0a4: mov    %rbp,0x50(%rsp)
  0x00007f8ab922a0a9: mov    %rsi,0x48(%rsp)
  0x00007f8ab922a0ae: mov    %rdi,0x40(%rsp)
  0x00007f8ab922a0b3: mov    %r8,0x38(%rsp)
  0x00007f8ab922a0b8: mov    %r9,0x30(%rsp)
  0x00007f8ab922a0bd: mov    %r10,0x28(%rsp)
  0x00007f8ab922a0c2: mov    %r11,0x20(%rsp)
  0x00007f8ab922a0c7: mov    %r12,0x18(%rsp)
  0x00007f8ab922a0cc: mov    %r13,0x10(%rsp)
  0x00007f8ab922a0d1: mov    %r14,0x8(%rsp)
  0x00007f8ab922a0d6: mov    %r15,(%rsp)
  0x00007f8ab922a0da: sub    $0x200,%rsp
  0x00007f8ab922a0e1: fxsave64 (%rsp)
  0x00007f8ab922a0e6: mov    %rbx,%rdi
  0x00007f8ab922a0e9: mov    %rax,%rsi
  0x00007f8ab922a0ec: callq  0x00007f8acef8bbca
  0x00007f8ab922a0f1: fxrstor64 (%rsp)
  0x00007f8ab922a0f6: add    $0x200,%rsp
  0x00007f8ab922a0fd: mov    (%rsp),%r15
  0x00007f8ab922a101: mov    0x8(%rsp),%r14
  0x00007f8ab922a106: mov    0x10(%rsp),%r13
  0x00007f8ab922a10b: mov    0x18(%rsp),%r12
  0x00007f8ab922a110: mov    0x20(%rsp),%r11
  0x00007f8ab922a115: mov    0x28(%rsp),%r10
  0x00007f8ab922a11a: mov    0x30(%rsp),%r9
  0x00007f8ab922a11f: mov    0x38(%rsp),%r8
  0x00007f8ab922a124: mov    0x40(%rsp),%rdi
  0x00007f8ab922a129: mov    0x48(%rsp),%rsi
  0x00007f8ab922a12e: mov    0x50(%rsp),%rbp
  0x00007f8ab922a133: mov    0x60(%rsp),%rbx
  0x00007f8ab922a138: mov    0x68(%rsp),%rdx
  0x00007f8ab922a13d: mov    0x70(%rsp),%rcx
  0x00007f8ab922a142: mov    0x78(%rsp),%rax
  0x00007f8ab922a147: add    $0x80,%rsp
  0x00007f8ab922a14e: add    $0x8,%rsp
  0x00007f8ab922a152: popfq  
  0x00007f8ab922a153: mov    %r13,%rsp
  0x00007f8ab922a156: pop    %rax
  0x00007f8ab922a157: mov    %rsp,%r13
  0x00007f8ab922a15a: sub    $0x40,%rsp
  0x00007f8ab922a15e: mov    %rax,(%rsp)
  0x00007f8ab922a162: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922a16c: mov    %rax,0x38(%rsp)
  0x00007f8ab922a171: mov    %rsi,0x30(%rsp)
  0x00007f8ab922a176: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922a180: mov    %rax,0x28(%rsp)
  0x00007f8ab922a185: mov    %rdx,0x20(%rsp)
  0x00007f8ab922a18a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922a194: mov    %rax,0x18(%rsp)
  0x00007f8ab922a199: mov    %rcx,0x10(%rsp)
  0x00007f8ab922a19e: mov    %r8d,0x8(%rsp)
  0x00007f8ab922a1a3: mov    0x40(%rbx),%rcx
  0x00007f8ab922a1a7: jmpq   *%rcx

Decoding RuntimeStub - load_appendix_patching Runtime1 stub 0x00007f8ab9166fd0
  0x00007f8ab91670a0: push   %rbp
  0x00007f8ab91670a1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91670a4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91670a9: sub    $0x80,%rsp
  0x00007f8ab91670b0: mov    %rax,0x78(%rsp)
  0x00007f8ab91670b5: mov    %rcx,0x70(%rsp)
  0x00007f8ab91670ba: mov    %rdx,0x68(%rsp)
  0x00007f8ab91670bf: mov    %rbx,0x60(%rsp)
  0x00007f8ab91670c4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91670c9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91670ce: mov    %rdi,0x40(%rsp)
  0x00007f8ab91670d3: mov    %r8,0x38(%rsp)
  0x00007f8ab91670d8: mov    %r9,0x30(%rsp)
  0x00007f8ab91670dd: mov    %r10,0x28(%rsp)
  0x00007f8ab91670e2: mov    %r11,0x20(%rsp)
  0x00007f8ab91670e7: mov    %r12,0x18(%rsp)
  0x00007f8ab91670ec: mov    %r13,0x10(%rsp)
  0x00007f8ab91670f1: mov    %r14,0x8(%rsp)
  0x00007f8ab91670f6: mov    %r15,(%rsp)
  0x00007f8ab91670fa: sub    $0x150,%rsp
  0x00007f8ab9167101: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab916710d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9167113: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9167119: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab916711f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9167125: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab916712b: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9167131: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9167137: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab916713d: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9167143: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9167149: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab916714f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9167155: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab916715b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9167161: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9167167: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9167170: mov    %r15,%rdi
  0x00007f8ab9167173: mov    %rbp,0x210(%r15)
  0x00007f8ab916717a: mov    %rsp,0x200(%r15)
  0x00007f8ab9167181: callq  0x00007f8ace8beb28
  0x00007f8ab9167186: push   %rax
  0x00007f8ab9167187: push   %rdi
  0x00007f8ab9167188: push   %rsi
  0x00007f8ab9167189: push   %rdx
  0x00007f8ab916718a: push   %rcx
  0x00007f8ab916718b: push   %r8
  0x00007f8ab916718d: push   %r9
  0x00007f8ab916718f: push   %r10
  0x00007f8ab9167191: mov    %rsp,%r10
  0x00007f8ab9167194: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9167198: push   %r10
  0x00007f8ab916719a: push   %r11
  0x00007f8ab916719c: mov    $0x1,%edi
  0x00007f8ab91671a1: callq  0x00007f8acf9c32d0
  0x00007f8ab91671a6: pop    %r11
  0x00007f8ab91671a8: pop    %rsp
  0x00007f8ab91671a9: pop    %r10
  0x00007f8ab91671ab: pop    %r9
  0x00007f8ab91671ad: pop    %r8
  0x00007f8ab91671af: pop    %rcx
  0x00007f8ab91671b0: pop    %rdx
  0x00007f8ab91671b1: pop    %rsi
  0x00007f8ab91671b2: pop    %rdi
  0x00007f8ab91671b3: cmp    %rax,%r15
  0x00007f8ab91671b6: je     0x00007f8ab9167233
  0x00007f8ab91671bc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91671c1: sub    $0x80,%rsp
  0x00007f8ab91671c8: mov    %rax,0x78(%rsp)
  0x00007f8ab91671cd: mov    %rcx,0x70(%rsp)
  0x00007f8ab91671d2: mov    %rdx,0x68(%rsp)
  0x00007f8ab91671d7: mov    %rbx,0x60(%rsp)
  0x00007f8ab91671dc: mov    %rbp,0x50(%rsp)
  0x00007f8ab91671e1: mov    %rsi,0x48(%rsp)
  0x00007f8ab91671e6: mov    %rdi,0x40(%rsp)
  0x00007f8ab91671eb: mov    %r8,0x38(%rsp)
  0x00007f8ab91671f0: mov    %r9,0x30(%rsp)
  0x00007f8ab91671f5: mov    %r10,0x28(%rsp)
  0x00007f8ab91671fa: mov    %r11,0x20(%rsp)
  0x00007f8ab91671ff: mov    %r12,0x18(%rsp)
  0x00007f8ab9167204: mov    %r13,0x10(%rsp)
  0x00007f8ab9167209: mov    %r14,0x8(%rsp)
  0x00007f8ab916720e: mov    %r15,(%rsp)
  0x00007f8ab9167212: movabs $0x7f8acf15cac8,%rdi
  0x00007f8ab916721c: movabs $0x7f8ab91671bc,%rsi
  0x00007f8ab9167226: mov    %rsp,%rdx
  0x00007f8ab9167229: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916722d: callq  0x00007f8aceddb9fa
  0x00007f8ab9167232: hlt    
  0x00007f8ab9167233: pop    %rax
  0x00007f8ab9167234: movabs $0x0,%r10
  0x00007f8ab916723e: mov    %r10,0x200(%r15)
  0x00007f8ab9167245: movabs $0x0,%r10
  0x00007f8ab916724f: mov    %r10,0x210(%r15)
  0x00007f8ab9167256: movabs $0x0,%r10
  0x00007f8ab9167260: mov    %r10,0x208(%r15)
  0x00007f8ab9167267: cmpq   $0x0,0x8(%r15)
  0x00007f8ab916726f: je     0x00007f8ab9167504
  0x00007f8ab9167275: test   %rax,%rax
  0x00007f8ab9167278: je     0x00007f8ab9167c00
  0x00007f8ab916727e: mov    0x8(%r15),%rax
  0x00007f8ab9167282: movabs $0x0,%r10
  0x00007f8ab916728c: mov    %r10,0x8(%r15)
  0x00007f8ab9167290: mov    0x1d8(%rsp),%rdx
  0x00007f8ab9167298: cmpq   $0x0,0x2d0(%r15)
  0x00007f8ab91672a3: je     0x00007f8ab9167320
  0x00007f8ab91672a9: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91672ae: sub    $0x80,%rsp
  0x00007f8ab91672b5: mov    %rax,0x78(%rsp)
  0x00007f8ab91672ba: mov    %rcx,0x70(%rsp)
  0x00007f8ab91672bf: mov    %rdx,0x68(%rsp)
  0x00007f8ab91672c4: mov    %rbx,0x60(%rsp)
  0x00007f8ab91672c9: mov    %rbp,0x50(%rsp)
  0x00007f8ab91672ce: mov    %rsi,0x48(%rsp)
  0x00007f8ab91672d3: mov    %rdi,0x40(%rsp)
  0x00007f8ab91672d8: mov    %r8,0x38(%rsp)
  0x00007f8ab91672dd: mov    %r9,0x30(%rsp)
  0x00007f8ab91672e2: mov    %r10,0x28(%rsp)
  0x00007f8ab91672e7: mov    %r11,0x20(%rsp)
  0x00007f8ab91672ec: mov    %r12,0x18(%rsp)
  0x00007f8ab91672f1: mov    %r13,0x10(%rsp)
  0x00007f8ab91672f6: mov    %r14,0x8(%rsp)
  0x00007f8ab91672fb: mov    %r15,(%rsp)
  0x00007f8ab91672ff: movabs $0x7f8acf15ca37,%rdi
  0x00007f8ab9167309: movabs $0x7f8ab91672a9,%rsi
  0x00007f8ab9167313: mov    %rsp,%rdx
  0x00007f8ab9167316: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916731a: callq  0x00007f8aceddb9fa
  0x00007f8ab916731f: hlt    
  0x00007f8ab9167320: cmpq   $0x0,0x2d8(%r15)
  0x00007f8ab916732b: je     0x00007f8ab91673a8
  0x00007f8ab9167331: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167336: sub    $0x80,%rsp
  0x00007f8ab916733d: mov    %rax,0x78(%rsp)
  0x00007f8ab9167342: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167347: mov    %rdx,0x68(%rsp)
  0x00007f8ab916734c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9167351: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167356: mov    %rsi,0x48(%rsp)
  0x00007f8ab916735b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9167360: mov    %r8,0x38(%rsp)
  0x00007f8ab9167365: mov    %r9,0x30(%rsp)
  0x00007f8ab916736a: mov    %r10,0x28(%rsp)
  0x00007f8ab916736f: mov    %r11,0x20(%rsp)
  0x00007f8ab9167374: mov    %r12,0x18(%rsp)
  0x00007f8ab9167379: mov    %r13,0x10(%rsp)
  0x00007f8ab916737e: mov    %r14,0x8(%rsp)
  0x00007f8ab9167383: mov    %r15,(%rsp)
  0x00007f8ab9167387: movabs $0x7f8acf15ca53,%rdi
  0x00007f8ab9167391: movabs $0x7f8ab9167331,%rsi
  0x00007f8ab916739b: mov    %rsp,%rdx
  0x00007f8ab916739e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91673a2: callq  0x00007f8aceddb9fa
  0x00007f8ab91673a7: hlt    
  0x00007f8ab91673a8: mov    %rax,0x2d0(%r15)
  0x00007f8ab91673af: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f8ab91673b6: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab91673bc: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab91673c2: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91673c8: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91673ce: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91673d4: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91673da: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91673e0: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91673e6: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91673ec: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91673f2: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91673f8: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91673fe: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9167404: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab916740a: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9167410: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9167419: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9167425: je     0x00007f8ab91674a2
  0x00007f8ab916742b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167430: sub    $0x80,%rsp
  0x00007f8ab9167437: mov    %rax,0x78(%rsp)
  0x00007f8ab916743c: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167441: mov    %rdx,0x68(%rsp)
  0x00007f8ab9167446: mov    %rbx,0x60(%rsp)
  0x00007f8ab916744b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9167450: mov    %rsi,0x48(%rsp)
  0x00007f8ab9167455: mov    %rdi,0x40(%rsp)
  0x00007f8ab916745a: mov    %r8,0x38(%rsp)
  0x00007f8ab916745f: mov    %r9,0x30(%rsp)
  0x00007f8ab9167464: mov    %r10,0x28(%rsp)
  0x00007f8ab9167469: mov    %r11,0x20(%rsp)
  0x00007f8ab916746e: mov    %r12,0x18(%rsp)
  0x00007f8ab9167473: mov    %r13,0x10(%rsp)
  0x00007f8ab9167478: mov    %r14,0x8(%rsp)
  0x00007f8ab916747d: mov    %r15,(%rsp)
  0x00007f8ab9167481: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab916748b: movabs $0x7f8ab916742b,%rsi
  0x00007f8ab9167495: mov    %rsp,%rdx
  0x00007f8ab9167498: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916749c: callq  0x00007f8aceddb9fa
  0x00007f8ab91674a1: hlt    
  0x00007f8ab91674a2: add    $0x150,%rsp
  0x00007f8ab91674a9: mov    (%rsp),%r15
  0x00007f8ab91674ad: mov    0x8(%rsp),%r14
  0x00007f8ab91674b2: mov    0x10(%rsp),%r13
  0x00007f8ab91674b7: mov    0x18(%rsp),%r12
  0x00007f8ab91674bc: mov    0x20(%rsp),%r11
  0x00007f8ab91674c1: mov    0x28(%rsp),%r10
  0x00007f8ab91674c6: mov    0x30(%rsp),%r9
  0x00007f8ab91674cb: mov    0x38(%rsp),%r8
  0x00007f8ab91674d0: mov    0x40(%rsp),%rdi
  0x00007f8ab91674d5: mov    0x48(%rsp),%rsi
  0x00007f8ab91674da: mov    0x50(%rsp),%rbp
  0x00007f8ab91674df: mov    0x60(%rsp),%rbx
  0x00007f8ab91674e4: mov    0x68(%rsp),%rdx
  0x00007f8ab91674e9: mov    0x70(%rsp),%rcx
  0x00007f8ab91674ee: mov    0x78(%rsp),%rax
  0x00007f8ab91674f3: add    $0x80,%rsp
  0x00007f8ab91674fa: leaveq 
  0x00007f8ab91674fb: add    $0x8,%rsp
  0x00007f8ab91674ff: jmpq   0x00007f8ab91073da
  0x00007f8ab9167504: test   %rax,%rax
  0x00007f8ab9167507: je     0x00007f8ab9167657
  ;; restore_live_registers
  0x00007f8ab916750d: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9167513: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9167519: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab916751f: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9167525: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab916752b: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9167531: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9167537: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab916753d: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9167543: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9167549: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab916754f: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9167555: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab916755b: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9167561: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9167567: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9167570: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab916757c: je     0x00007f8ab91675f9
  0x00007f8ab9167582: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9167587: sub    $0x80,%rsp
  0x00007f8ab916758e: mov    %rax,0x78(%rsp)
  0x00007f8ab9167593: mov    %rcx,0x70(%rsp)
  0x00007f8ab9167598: mov    %rdx,0x68(%rsp)
  0x00007f8ab916759d: mov    %rbx,0x60(%rsp)
  0x00007f8ab91675a2: mov    %rbp,0x50(%rsp)
  0x00007f8ab91675a7: mov    %rsi,0x48(%rsp)
  0x00007f8ab91675ac: mov    %rdi,0x40(%rsp)
  0x00007f8ab91675b1: mov    %r8,0x38(%rsp)
  0x00007f8ab91675b6: mov    %r9,0x30(%rsp)
  0x00007f8ab91675bb: mov    %r10,0x28(%rsp)
  0x00007f8ab91675c0: mov    %r11,0x20(%rsp)
  0x00007f8ab91675c5: mov    %r12,0x18(%rsp)
  0x00007f8ab91675ca: mov    %r13,0x10(%rsp)
  0x00007f8ab91675cf: mov    %r14,0x8(%rsp)
  0x00007f8ab91675d4: mov    %r15,(%rsp)
  0x00007f8ab91675d8: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab91675e2: movabs $0x7f8ab9167582,%rsi
  0x00007f8ab91675ec: mov    %rsp,%rdx
  0x00007f8ab91675ef: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91675f3: callq  0x00007f8aceddb9fa
  0x00007f8ab91675f8: hlt    
  0x00007f8ab91675f9: add    $0x150,%rsp
  0x00007f8ab9167600: mov    (%rsp),%r15
  0x00007f8ab9167604: mov    0x8(%rsp),%r14
  0x00007f8ab9167609: mov    0x10(%rsp),%r13
  0x00007f8ab916760e: mov    0x18(%rsp),%r12
  0x00007f8ab9167613: mov    0x20(%rsp),%r11
  0x00007f8ab9167618: mov    0x28(%rsp),%r10
  0x00007f8ab916761d: mov    0x30(%rsp),%r9
  0x00007f8ab9167622: mov    0x38(%rsp),%r8
  0x00007f8ab9167627: mov    0x40(%rsp),%rdi
  0x00007f8ab916762c: mov    0x48(%rsp),%rsi
  0x00007f8ab9167631: mov    0x50(%rsp),%rbp
  0x00007f8ab9167636: mov    0x60(%rsp),%rbx
  0x00007f8ab916763b: mov    0x68(%rsp),%rdx
  0x00007f8ab9167640: mov    0x70(%rsp),%rcx
  0x00007f8ab9167645: mov    0x78(%rsp),%rax
  0x00007f8ab916764a: add    $0x80,%rsp
  0x00007f8ab9167651: leaveq 
  0x00007f8ab9167652: jmpq   0x00007f8ab9107356
  ;; restore_live_registers
  0x00007f8ab9167657: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab916765d: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9167663: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9167669: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab916766f: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9167675: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab916767b: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9167681: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9167687: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab916768d: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9167693: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9167699: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab916769f: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91676a5: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91676ab: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91676b1: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91676ba: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91676c6: je     0x00007f8ab9167743
  0x00007f8ab91676cc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91676d1: sub    $0x80,%rsp
  0x00007f8ab91676d8: mov    %rax,0x78(%rsp)
  0x00007f8ab91676dd: mov    %rcx,0x70(%rsp)
  0x00007f8ab91676e2: mov    %rdx,0x68(%rsp)
  0x00007f8ab91676e7: mov    %rbx,0x60(%rsp)
  0x00007f8ab91676ec: mov    %rbp,0x50(%rsp)
  0x00007f8ab91676f1: mov    %rsi,0x48(%rsp)
  0x00007f8ab91676f6: mov    %rdi,0x40(%rsp)
  0x00007f8ab91676fb: mov    %r8,0x38(%rsp)
  0x00007f8ab9167700: mov    %r9,0x30(%rsp)
  0x00007f8ab9167705: mov    %r10,0x28(%rsp)
  0x00007f8ab916770a: mov    %r11,0x20(%rsp)
  0x00007f8ab916770f: mov    %r12,0x18(%rsp)
  0x00007f8ab9167714: mov    %r13,0x10(%rsp)
  0x00007f8ab9167719: mov    %r14,0x8(%rsp)
  0x00007f8ab916771e: mov    %r15,(%rsp)
  0x00007f8ab9167722: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab916772c: movabs $0x7f8ab91676cc,%rsi
  0x00007f8ab9167736: mov    %rsp,%rdx
  0x00007f8ab9167739: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916773d: callq  0x00007f8aceddb9fa
  0x00007f8ab9167742: hlt    
  0x00007f8ab9167743: add    $0x150,%rsp
  0x00007f8ab916774a: mov    (%rsp),%r15
  0x00007f8ab916774e: mov    0x8(%rsp),%r14
  0x00007f8ab9167753: mov    0x10(%rsp),%r13
  0x00007f8ab9167758: mov    0x18(%rsp),%r12
  0x00007f8ab916775d: mov    0x20(%rsp),%r11
  0x00007f8ab9167762: mov    0x28(%rsp),%r10
  0x00007f8ab9167767: mov    0x30(%rsp),%r9
  0x00007f8ab916776c: mov    0x38(%rsp),%r8
  0x00007f8ab9167771: mov    0x40(%rsp),%rdi
  0x00007f8ab9167776: mov    0x48(%rsp),%rsi
  0x00007f8ab916777b: mov    0x50(%rsp),%rbp
  0x00007f8ab9167780: mov    0x60(%rsp),%rbx
  0x00007f8ab9167785: mov    0x68(%rsp),%rdx
  0x00007f8ab916778a: mov    0x70(%rsp),%rcx
  0x00007f8ab916778f: mov    0x78(%rsp),%rax
  0x00007f8ab9167794: add    $0x80,%rsp
  0x00007f8ab916779b: leaveq 
  0x00007f8ab916779c: retq   
  0x00007f8ab916779d: leaveq 
  0x00007f8ab916779e: retq   
  0x00007f8ab916779f: nop

AHE@0x00007f8ac812f4a8: 0xabbebebea0000000 i2c: 0x00007f8ab92293e0 c2i: 0x00007f8ab922952c c2iUV: 0x00007f8ab92294ff
i2c argument handler #121 for: static (ZLjava/lang/String;JJJZ)V (663 bytes generated)
c2i argument handler starts at 0x7f8ab922952c
  0x00007f8ab92293e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92293e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92293ee: cmp    %r11,%rax
  0x00007f8ab92293f1: jbe    0x00007f8ab922940a
  0x00007f8ab92293f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9229401: cmp    %r11,%rax
  0x00007f8ab9229404: jb     0x00007f8ab92294cd
  0x00007f8ab922940a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9229414: cmp    %r11,%rax
  0x00007f8ab9229417: jbe    0x00007f8ab9229430
  0x00007f8ab922941d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9229427: cmp    %r11,%rax
  0x00007f8ab922942a: jb     0x00007f8ab92294cd
  0x00007f8ab9229430: movabs $0x7f8ab9140820,%r11
  0x00007f8ab922943a: cmp    %r11,%rax
  0x00007f8ab922943d: jbe    0x00007f8ab9229456
  0x00007f8ab9229443: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab922944d: cmp    %r11,%rax
  0x00007f8ab9229450: jb     0x00007f8ab92294cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9229456: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922945b: sub    $0x80,%rsp
  0x00007f8ab9229462: mov    %rax,0x78(%rsp)
  0x00007f8ab9229467: mov    %rcx,0x70(%rsp)
  0x00007f8ab922946c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229471: mov    %rbx,0x60(%rsp)
  0x00007f8ab9229476: mov    %rbp,0x50(%rsp)
  0x00007f8ab922947b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229480: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229485: mov    %r8,0x38(%rsp)
  0x00007f8ab922948a: mov    %r9,0x30(%rsp)
  0x00007f8ab922948f: mov    %r10,0x28(%rsp)
  0x00007f8ab9229494: mov    %r11,0x20(%rsp)
  0x00007f8ab9229499: mov    %r12,0x18(%rsp)
  0x00007f8ab922949e: mov    %r13,0x10(%rsp)
  0x00007f8ab92294a3: mov    %r14,0x8(%rsp)
  0x00007f8ab92294a8: mov    %r15,(%rsp)
  0x00007f8ab92294ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab92294b6: movabs $0x7f8ab9229456,%rsi
  0x00007f8ab92294c0: mov    %rsp,%rdx
  0x00007f8ab92294c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92294c7: callq  0x00007f8aceddb9fa
  0x00007f8ab92294cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab92294cd: mov    %rsp,%r11
  0x00007f8ab92294d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92294d4: push   %rax
  0x00007f8ab92294d5: mov    %r11,%rax
  0x00007f8ab92294d8: mov    0x50(%rbx),%r11
  0x00007f8ab92294dc: mov    0x48(%rax),%esi
  0x00007f8ab92294df: mov    0x40(%rax),%rdx
  0x00007f8ab92294e3: mov    0x30(%rax),%rcx
  0x00007f8ab92294e7: mov    0x20(%rax),%r8
  0x00007f8ab92294eb: mov    0x10(%rax),%r9
  0x00007f8ab92294ef: mov    0x8(%rax),%edi
  0x00007f8ab92294f2: mov    %rbx,0x258(%r15)
  0x00007f8ab92294f9: mov    %rbx,%rax
  0x00007f8ab92294fc: jmpq   *%r11
  0x00007f8ab92294ff: mov    0x8(%rsi),%ebx
  0x00007f8ab9229502: shl    $0x3,%rbx
  0x00007f8ab9229506: cmp    0x10(%rax),%rbx
  0x00007f8ab922950a: mov    0x8(%rax),%rbx
  0x00007f8ab922950e: je     0x00007f8ab9229519
  0x00007f8ab9229514: jmpq   0x00007f8ab9105c40
  0x00007f8ab9229519: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9229521: je     0x00007f8ab922961c
  0x00007f8ab9229527: jmpq   0x00007f8ab9105c40
  0x00007f8ab922952c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9229534: je     0x00007f8ab922961c
  0x00007f8ab922953a: mov    %rsp,%r13
  0x00007f8ab922953d: mov    (%rsp),%rax
  0x00007f8ab9229541: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9229545: pushfq 
  0x00007f8ab9229546: sub    $0x8,%rsp
  0x00007f8ab922954a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922954f: sub    $0x80,%rsp
  0x00007f8ab9229556: mov    %rax,0x78(%rsp)
  0x00007f8ab922955b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9229560: mov    %rdx,0x68(%rsp)
  0x00007f8ab9229565: mov    %rbx,0x60(%rsp)
  0x00007f8ab922956a: mov    %rbp,0x50(%rsp)
  0x00007f8ab922956f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9229574: mov    %rdi,0x40(%rsp)
  0x00007f8ab9229579: mov    %r8,0x38(%rsp)
  0x00007f8ab922957e: mov    %r9,0x30(%rsp)
  0x00007f8ab9229583: mov    %r10,0x28(%rsp)
  0x00007f8ab9229588: mov    %r11,0x20(%rsp)
  0x00007f8ab922958d: mov    %r12,0x18(%rsp)
  0x00007f8ab9229592: mov    %r13,0x10(%rsp)
  0x00007f8ab9229597: mov    %r14,0x8(%rsp)
  0x00007f8ab922959c: mov    %r15,(%rsp)
  0x00007f8ab92295a0: sub    $0x200,%rsp
  0x00007f8ab92295a7: fxsave64 (%rsp)
  0x00007f8ab92295ac: mov    %rbx,%rdi
  0x00007f8ab92295af: mov    %rax,%rsi
  0x00007f8ab92295b2: callq  0x00007f8acef8bbca
  0x00007f8ab92295b7: fxrstor64 (%rsp)
  0x00007f8ab92295bc: add    $0x200,%rsp
  0x00007f8ab92295c3: mov    (%rsp),%r15
  0x00007f8ab92295c7: mov    0x8(%rsp),%r14
  0x00007f8ab92295cc: mov    0x10(%rsp),%r13
  0x00007f8ab92295d1: mov    0x18(%rsp),%r12
  0x00007f8ab92295d6: mov    0x20(%rsp),%r11
  0x00007f8ab92295db: mov    0x28(%rsp),%r10
  0x00007f8ab92295e0: mov    0x30(%rsp),%r9
  0x00007f8ab92295e5: mov    0x38(%rsp),%r8
  0x00007f8ab92295ea: mov    0x40(%rsp),%rdi
  0x00007f8ab92295ef: mov    0x48(%rsp),%rsi
  0x00007f8ab92295f4: mov    0x50(%rsp),%rbp
  0x00007f8ab92295f9: mov    0x60(%rsp),%rbx
  0x00007f8ab92295fe: mov    0x68(%rsp),%rdx
  0x00007f8ab9229603: mov    0x70(%rsp),%rcx
  0x00007f8ab9229608: mov    0x78(%rsp),%rax
  0x00007f8ab922960d: add    $0x80,%rsp
  0x00007f8ab9229614: add    $0x8,%rsp
  0x00007f8ab9229618: popfq  
  0x00007f8ab9229619: mov    %r13,%rsp
  0x00007f8ab922961c: pop    %rax
  0x00007f8ab922961d: mov    %rsp,%r13
  0x00007f8ab9229620: sub    $0x50,%rsp
  0x00007f8ab9229624: mov    %rax,(%rsp)
  0x00007f8ab9229628: mov    %esi,0x48(%rsp)
  0x00007f8ab922962c: mov    %rdx,0x40(%rsp)
  0x00007f8ab9229631: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922963b: mov    %rax,0x38(%rsp)
  0x00007f8ab9229640: mov    %rcx,0x30(%rsp)
  0x00007f8ab9229645: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922964f: mov    %rax,0x28(%rsp)
  0x00007f8ab9229654: mov    %r8,0x20(%rsp)
  0x00007f8ab9229659: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9229663: mov    %rax,0x18(%rsp)
  0x00007f8ab9229668: mov    %r9,0x10(%rsp)
  0x00007f8ab922966d: mov    %edi,0x8(%rsp)
  0x00007f8ab9229671: mov    0x40(%rbx),%rcx
  0x00007f8ab9229675: jmpq   *%rcx

Decoding RuntimeStub - g1_pre_barrier_slow Runtime1 stub 0x00007f8ab9166d90
  0x00007f8ab9166e20: push   %rbp
  0x00007f8ab9166e21: mov    %rsp,%rbp
  0x00007f8ab9166e24: movabs $0x1e,%rax
  0x00007f8ab9166e2e: mov    %rax,%rsi
  0x00007f8ab9166e31: mov    %r15,%rdi
  0x00007f8ab9166e34: mov    %rbp,0x210(%r15)
  0x00007f8ab9166e3b: mov    %rsp,0x200(%r15)
  0x00007f8ab9166e42: callq  0x00007f8ace8baa6e
  0x00007f8ab9166e47: push   %rax
  0x00007f8ab9166e48: push   %rdi
  0x00007f8ab9166e49: push   %rsi
  0x00007f8ab9166e4a: push   %rdx
  0x00007f8ab9166e4b: push   %rcx
  0x00007f8ab9166e4c: push   %r8
  0x00007f8ab9166e4e: push   %r9
  0x00007f8ab9166e50: push   %r10
  0x00007f8ab9166e52: mov    %rsp,%r10
  0x00007f8ab9166e55: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9166e59: push   %r10
  0x00007f8ab9166e5b: push   %r11
  0x00007f8ab9166e5d: mov    $0x1,%edi
  0x00007f8ab9166e62: callq  0x00007f8acf9c32d0
  0x00007f8ab9166e67: pop    %r11
  0x00007f8ab9166e69: pop    %rsp
  0x00007f8ab9166e6a: pop    %r10
  0x00007f8ab9166e6c: pop    %r9
  0x00007f8ab9166e6e: pop    %r8
  0x00007f8ab9166e70: pop    %rcx
  0x00007f8ab9166e71: pop    %rdx
  0x00007f8ab9166e72: pop    %rsi
  0x00007f8ab9166e73: pop    %rdi
  0x00007f8ab9166e74: cmp    %rax,%r15
  0x00007f8ab9166e77: je     0x00007f8ab9166ef9
  0x00007f8ab9166e7d: callq  0x00007f8aceec2a22
  0x00007f8ab9166e82: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9166e87: sub    $0x80,%rsp
  0x00007f8ab9166e8e: mov    %rax,0x78(%rsp)
  0x00007f8ab9166e93: mov    %rcx,0x70(%rsp)
  0x00007f8ab9166e98: mov    %rdx,0x68(%rsp)
  0x00007f8ab9166e9d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9166ea2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9166ea7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9166eac: mov    %rdi,0x40(%rsp)
  0x00007f8ab9166eb1: mov    %r8,0x38(%rsp)
  0x00007f8ab9166eb6: mov    %r9,0x30(%rsp)
  0x00007f8ab9166ebb: mov    %r10,0x28(%rsp)
  0x00007f8ab9166ec0: mov    %r11,0x20(%rsp)
  0x00007f8ab9166ec5: mov    %r12,0x18(%rsp)
  0x00007f8ab9166eca: mov    %r13,0x10(%rsp)
  0x00007f8ab9166ecf: mov    %r14,0x8(%rsp)
  0x00007f8ab9166ed4: mov    %r15,(%rsp)
  0x00007f8ab9166ed8: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab9166ee2: movabs $0x7f8ab9166e82,%rsi
  0x00007f8ab9166eec: mov    %rsp,%rdx
  0x00007f8ab9166eef: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9166ef3: callq  0x00007f8aceddb9fa
  0x00007f8ab9166ef8: hlt    
  0x00007f8ab9166ef9: pop    %rax
  0x00007f8ab9166efa: movabs $0x0,%r10
  0x00007f8ab9166f04: mov    %r10,0x200(%r15)
  0x00007f8ab9166f0b: movabs $0x0,%r10
  0x00007f8ab9166f15: mov    %r10,0x210(%r15)
  0x00007f8ab9166f1c: movabs $0x0,%r10
  0x00007f8ab9166f26: mov    %r10,0x208(%r15)
  0x00007f8ab9166f2d: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9166f35: je     0x00007f8ab9166f45
  0x00007f8ab9166f3b: mov    0x8(%r15),%rax
  0x00007f8ab9166f3f: leaveq 
  0x00007f8ab9166f40: jmpq   Stub::forward exception
  0x00007f8ab9166f45: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9166f4a: sub    $0x80,%rsp
  0x00007f8ab9166f51: mov    %rax,0x78(%rsp)
  0x00007f8ab9166f56: mov    %rcx,0x70(%rsp)
  0x00007f8ab9166f5b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9166f60: mov    %rbx,0x60(%rsp)
  0x00007f8ab9166f65: mov    %rbp,0x50(%rsp)
  0x00007f8ab9166f6a: mov    %rsi,0x48(%rsp)
  0x00007f8ab9166f6f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9166f74: mov    %r8,0x38(%rsp)
  0x00007f8ab9166f79: mov    %r9,0x30(%rsp)
  0x00007f8ab9166f7e: mov    %r10,0x28(%rsp)
  0x00007f8ab9166f83: mov    %r11,0x20(%rsp)
  0x00007f8ab9166f88: mov    %r12,0x18(%rsp)
  0x00007f8ab9166f8d: mov    %r13,0x10(%rsp)
  0x00007f8ab9166f92: mov    %r14,0x8(%rsp)
  0x00007f8ab9166f97: mov    %r15,(%rsp)
  0x00007f8ab9166f9b: movabs $0x7f8acf127fcb,%rdi
  0x00007f8ab9166fa5: movabs $0x7f8ab9166f45,%rsi
  0x00007f8ab9166faf: mov    %rsp,%rdx
  0x00007f8ab9166fb2: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9166fb6: callq  0x00007f8aceddb9fa
  0x00007f8ab9166fbb: hlt    
  0x00007f8ab9166fbc: leaveq 
  0x00007f8ab9166fbd: retq   
  0x00007f8ab9166fbe: nop
  0x00007f8ab9166fbf: nop

Decoding RuntimeStub - g1_post_barrier_slow Runtime1 stub 0x00007f8ab9166a50
  0x00007f8ab9166ac0: push   %rbp
  0x00007f8ab9166ac1: mov    %rsp,%rbp
  0x00007f8ab9166ac4: push   %rax
  0x00007f8ab9166ac5: push   %rcx
  0x00007f8ab9166ac6: mov    0x10(%rbp),%rcx
  0x00007f8ab9166aca: shr    $0x9,%rcx
  0x00007f8ab9166ace: movabs $0x7f8acbf27000,%rax
  0x00007f8ab9166ad8: add    %rax,%rcx
  0x00007f8ab9166adb: cmpb   $0x20,(%rcx)
  0x00007f8ab9166ade: je     0x00007f8ab9166d64
  0x00007f8ab9166ae4: lock addl $0x0,(%rsp)
  0x00007f8ab9166ae9: cmpb   $0x0,(%rcx)
  0x00007f8ab9166aec: je     0x00007f8ab9166d64
  0x00007f8ab9166af2: movb   $0x0,(%rcx)
  0x00007f8ab9166af5: cmpl   $0x0,0x568(%r15)
  0x00007f8ab9166b00: je     0x00007f8ab9166b29
  0x00007f8ab9166b06: subl   $0x8,0x568(%r15)
  0x00007f8ab9166b0e: push   %rbx
  0x00007f8ab9166b0f: mov    0x560(%r15),%rbx
  0x00007f8ab9166b16: movslq 0x568(%r15),%r10
  0x00007f8ab9166b1d: add    %r10,%rbx
  0x00007f8ab9166b20: mov    %rcx,(%rbx)
  0x00007f8ab9166b23: pop    %rbx
  0x00007f8ab9166b24: jmpq   0x00007f8ab9166d64
  0x00007f8ab9166b29: push   %rdx
  ;; save_live_registers
  0x00007f8ab9166b2a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9166b2f: sub    $0x80,%rsp
  0x00007f8ab9166b36: mov    %rax,0x78(%rsp)
  0x00007f8ab9166b3b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9166b40: mov    %rdx,0x68(%rsp)
  0x00007f8ab9166b45: mov    %rbx,0x60(%rsp)
  0x00007f8ab9166b4a: mov    %rbp,0x50(%rsp)
  0x00007f8ab9166b4f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9166b54: mov    %rdi,0x40(%rsp)
  0x00007f8ab9166b59: mov    %r8,0x38(%rsp)
  0x00007f8ab9166b5e: mov    %r9,0x30(%rsp)
  0x00007f8ab9166b63: mov    %r10,0x28(%rsp)
  0x00007f8ab9166b68: mov    %r11,0x20(%rsp)
  0x00007f8ab9166b6d: mov    %r12,0x18(%rsp)
  0x00007f8ab9166b72: mov    %r13,0x10(%rsp)
  0x00007f8ab9166b77: mov    %r14,0x8(%rsp)
  0x00007f8ab9166b7c: mov    %r15,(%rsp)
  0x00007f8ab9166b80: sub    $0x150,%rsp
  0x00007f8ab9166b87: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9166b93: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9166b99: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9166b9f: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab9166ba5: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9166bab: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab9166bb1: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9166bb7: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9166bbd: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab9166bc3: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9166bc9: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9166bcf: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab9166bd5: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9166bdb: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab9166be1: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9166be7: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9166bed: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9166bf6: mov    %r15,%rsi
  0x00007f8ab9166bf9: mov    %rcx,%rdi
  0x00007f8ab9166bfc: test   $0xf,%esp
  0x00007f8ab9166c02: je     0x00007f8ab9166c1a
  0x00007f8ab9166c08: sub    $0x8,%rsp
  0x00007f8ab9166c0c: callq  0x00007f8acef8447e
  0x00007f8ab9166c11: add    $0x8,%rsp
  0x00007f8ab9166c15: jmpq   0x00007f8ab9166c1f
  0x00007f8ab9166c1a: callq  0x00007f8acef8447e
  ;; restore_live_registers
  0x00007f8ab9166c1f: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9166c25: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab9166c2b: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab9166c31: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab9166c37: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab9166c3d: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab9166c43: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab9166c49: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab9166c4f: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab9166c55: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab9166c5b: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab9166c61: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab9166c67: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab9166c6d: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab9166c73: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab9166c79: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab9166c82: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab9166c8e: je     0x00007f8ab9166d0b
  0x00007f8ab9166c94: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9166c99: sub    $0x80,%rsp
  0x00007f8ab9166ca0: mov    %rax,0x78(%rsp)
  0x00007f8ab9166ca5: mov    %rcx,0x70(%rsp)
  0x00007f8ab9166caa: mov    %rdx,0x68(%rsp)
  0x00007f8ab9166caf: mov    %rbx,0x60(%rsp)
  0x00007f8ab9166cb4: mov    %rbp,0x50(%rsp)
  0x00007f8ab9166cb9: mov    %rsi,0x48(%rsp)
  0x00007f8ab9166cbe: mov    %rdi,0x40(%rsp)
  0x00007f8ab9166cc3: mov    %r8,0x38(%rsp)
  0x00007f8ab9166cc8: mov    %r9,0x30(%rsp)
  0x00007f8ab9166ccd: mov    %r10,0x28(%rsp)
  0x00007f8ab9166cd2: mov    %r11,0x20(%rsp)
  0x00007f8ab9166cd7: mov    %r12,0x18(%rsp)
  0x00007f8ab9166cdc: mov    %r13,0x10(%rsp)
  0x00007f8ab9166ce1: mov    %r14,0x8(%rsp)
  0x00007f8ab9166ce6: mov    %r15,(%rsp)
  0x00007f8ab9166cea: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9166cf4: movabs $0x7f8ab9166c94,%rsi
  0x00007f8ab9166cfe: mov    %rsp,%rdx
  0x00007f8ab9166d01: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9166d05: callq  0x00007f8aceddb9fa
  0x00007f8ab9166d0a: hlt    
  0x00007f8ab9166d0b: add    $0x150,%rsp
  0x00007f8ab9166d12: mov    (%rsp),%r15
  0x00007f8ab9166d16: mov    0x8(%rsp),%r14
  0x00007f8ab9166d1b: mov    0x10(%rsp),%r13
  0x00007f8ab9166d20: mov    0x18(%rsp),%r12
  0x00007f8ab9166d25: mov    0x20(%rsp),%r11
  0x00007f8ab9166d2a: mov    0x28(%rsp),%r10
  0x00007f8ab9166d2f: mov    0x30(%rsp),%r9
  0x00007f8ab9166d34: mov    0x38(%rsp),%r8
  0x00007f8ab9166d39: mov    0x40(%rsp),%rdi
  0x00007f8ab9166d3e: mov    0x48(%rsp),%rsi
  0x00007f8ab9166d43: mov    0x50(%rsp),%rbp
  0x00007f8ab9166d48: mov    0x60(%rsp),%rbx
  0x00007f8ab9166d4d: mov    0x68(%rsp),%rdx
  0x00007f8ab9166d52: mov    0x70(%rsp),%rcx
  0x00007f8ab9166d57: mov    0x78(%rsp),%rax
  0x00007f8ab9166d5c: add    $0x80,%rsp
  0x00007f8ab9166d63: pop    %rdx
  0x00007f8ab9166d64: pop    %rcx
  0x00007f8ab9166d65: pop    %rax
  0x00007f8ab9166d66: leaveq 
  0x00007f8ab9166d67: retq   

Decoding RuntimeStub - fpu2long_stub Runtime1 stub 0x00007f8ab9166910
  0x00007f8ab9166960: push   %rsi
  0x00007f8ab9166961: push   %rcx
  0x00007f8ab9166962: push   %rdx
  0x00007f8ab9166963: sub    $0x20,%rsp
  0x00007f8ab9166967: fstl   0x8(%rsp)
  0x00007f8ab916696b: mov    0xc(%rsp),%eax
  0x00007f8ab916696f: and    $0x7ff00000,%eax
  0x00007f8ab9166975: cmp    $0x7ff00000,%eax
  0x00007f8ab916697b: jne    0x00007f8ab9166995
  0x00007f8ab9166981: mov    0xc(%rsp),%eax
  0x00007f8ab9166985: and    $0xfffff,%eax
  0x00007f8ab916698b: or     0x8(%rsp),%eax
  0x00007f8ab916698f: jne    0x00007f8ab9166a04
  0x00007f8ab9166995: fstcw  (%rsp)
  0x00007f8ab9166999: movzwl (%rsp),%eax
  0x00007f8ab916699d: or     $0xc00,%eax
  0x00007f8ab91669a3: mov    %ax,0x2(%rsp)
  0x00007f8ab91669a8: fldcw  0x2(%rsp)
  0x00007f8ab91669ac: fistpll 0x18(%rsp)
  0x00007f8ab91669b1: fldcw  (%rsp)
  0x00007f8ab91669b4: fwait
  0x00007f8ab91669b5: mov    0x18(%rsp),%rax
  0x00007f8ab91669ba: mov    0x1c(%rsp),%edx
  0x00007f8ab91669be: mov    %rax,%rcx
  0x00007f8ab91669c1: xor    $0x0,%ecx
  0x00007f8ab91669c4: mov    $0x80000000,%esi
  0x00007f8ab91669c9: xor    %edx,%esi
  0x00007f8ab91669cb: or     %esi,%ecx
  0x00007f8ab91669cd: jne    0x00007f8ab9166a0b
  0x00007f8ab91669d3: fldz   
  0x00007f8ab91669d5: fcompl 0x8(%rsp)
  0x00007f8ab91669d9: fnstsw %ax
  0x00007f8ab91669db: test   $0x4100,%eax
  0x00007f8ab91669e0: je     0x00007f8ab91669f5
  0x00007f8ab91669e6: movabs $0x7fffffffffffffff,%rax
  0x00007f8ab91669f0: jmpq   0x00007f8ab9166a0b
  0x00007f8ab91669f5: movabs $0x8000000000000000,%rax
  0x00007f8ab91669ff: jmpq   0x00007f8ab9166a0b
  0x00007f8ab9166a04: ffree  %st(0)
  0x00007f8ab9166a06: fincstp 
  0x00007f8ab9166a08: xor    %rax,%rax
  0x00007f8ab9166a0b: add    $0x20,%rsp
  0x00007f8ab9166a0f: pop    %rdx
  0x00007f8ab9166a10: pop    %rcx
  0x00007f8ab9166a11: pop    %rsi
  0x00007f8ab9166a12: retq   
  0x00007f8ab9166a13: nop
  0x00007f8ab9166a14: nop
  0x00007f8ab9166a15: nop
  0x00007f8ab9166a16: nop
  0x00007f8ab9166a17: nop

Decoding RuntimeStub - counter_overflow Runtime1 stub 0x00007f8ab9166510
  0x00007f8ab91665a0: push   %rbp
  0x00007f8ab91665a1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab91665a4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91665a9: sub    $0x80,%rsp
  0x00007f8ab91665b0: mov    %rax,0x78(%rsp)
  0x00007f8ab91665b5: mov    %rcx,0x70(%rsp)
  0x00007f8ab91665ba: mov    %rdx,0x68(%rsp)
  0x00007f8ab91665bf: mov    %rbx,0x60(%rsp)
  0x00007f8ab91665c4: mov    %rbp,0x50(%rsp)
  0x00007f8ab91665c9: mov    %rsi,0x48(%rsp)
  0x00007f8ab91665ce: mov    %rdi,0x40(%rsp)
  0x00007f8ab91665d3: mov    %r8,0x38(%rsp)
  0x00007f8ab91665d8: mov    %r9,0x30(%rsp)
  0x00007f8ab91665dd: mov    %r10,0x28(%rsp)
  0x00007f8ab91665e2: mov    %r11,0x20(%rsp)
  0x00007f8ab91665e7: mov    %r12,0x18(%rsp)
  0x00007f8ab91665ec: mov    %r13,0x10(%rsp)
  0x00007f8ab91665f1: mov    %r14,0x8(%rsp)
  0x00007f8ab91665f6: mov    %r15,(%rsp)
  0x00007f8ab91665fa: sub    $0x150,%rsp
  0x00007f8ab9166601: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab916660d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9166613: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab9166619: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab916661f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab9166625: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab916662b: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab9166631: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab9166637: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab916663d: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab9166643: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab9166649: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab916664f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab9166655: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab916665b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab9166661: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab9166667: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab9166670: mov    0x10(%rbp),%eax
  0x00007f8ab9166673: mov    0x18(%rbp),%rbx
  0x00007f8ab9166677: mov    %rax,%rsi
  0x00007f8ab916667a: mov    %rbx,%rdx
  0x00007f8ab916667d: mov    %r15,%rdi
  0x00007f8ab9166680: mov    %rbp,0x210(%r15)
  0x00007f8ab9166687: mov    %rsp,0x200(%r15)
  0x00007f8ab916668e: callq  0x00007f8ace8bb13a
  0x00007f8ab9166693: push   %rax
  0x00007f8ab9166694: push   %rdi
  0x00007f8ab9166695: push   %rsi
  0x00007f8ab9166696: push   %rdx
  0x00007f8ab9166697: push   %rcx
  0x00007f8ab9166698: push   %r8
  0x00007f8ab916669a: push   %r9
  0x00007f8ab916669c: push   %r10
  0x00007f8ab916669e: mov    %rsp,%r10
  0x00007f8ab91666a1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab91666a5: push   %r10
  0x00007f8ab91666a7: push   %r11
  0x00007f8ab91666a9: mov    $0x1,%edi
  0x00007f8ab91666ae: callq  0x00007f8acf9c32d0
  0x00007f8ab91666b3: pop    %r11
  0x00007f8ab91666b5: pop    %rsp
  0x00007f8ab91666b6: pop    %r10
  0x00007f8ab91666b8: pop    %r9
  0x00007f8ab91666ba: pop    %r8
  0x00007f8ab91666bc: pop    %rcx
  0x00007f8ab91666bd: pop    %rdx
  0x00007f8ab91666be: pop    %rsi
  0x00007f8ab91666bf: pop    %rdi
  0x00007f8ab91666c0: cmp    %rax,%r15
  0x00007f8ab91666c3: je     0x00007f8ab9166745
  0x00007f8ab91666c9: callq  0x00007f8aceec2a22
  0x00007f8ab91666ce: mov    %rsp,-0x28(%rsp)
  0x00007f8ab91666d3: sub    $0x80,%rsp
  0x00007f8ab91666da: mov    %rax,0x78(%rsp)
  0x00007f8ab91666df: mov    %rcx,0x70(%rsp)
  0x00007f8ab91666e4: mov    %rdx,0x68(%rsp)
  0x00007f8ab91666e9: mov    %rbx,0x60(%rsp)
  0x00007f8ab91666ee: mov    %rbp,0x50(%rsp)
  0x00007f8ab91666f3: mov    %rsi,0x48(%rsp)
  0x00007f8ab91666f8: mov    %rdi,0x40(%rsp)
  0x00007f8ab91666fd: mov    %r8,0x38(%rsp)
  0x00007f8ab9166702: mov    %r9,0x30(%rsp)
  0x00007f8ab9166707: mov    %r10,0x28(%rsp)
  0x00007f8ab916670c: mov    %r11,0x20(%rsp)
  0x00007f8ab9166711: mov    %r12,0x18(%rsp)
  0x00007f8ab9166716: mov    %r13,0x10(%rsp)
  0x00007f8ab916671b: mov    %r14,0x8(%rsp)
  0x00007f8ab9166720: mov    %r15,(%rsp)
  0x00007f8ab9166724: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab916672e: movabs $0x7f8ab91666ce,%rsi
  0x00007f8ab9166738: mov    %rsp,%rdx
  0x00007f8ab916673b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab916673f: callq  0x00007f8aceddb9fa
  0x00007f8ab9166744: hlt    
  0x00007f8ab9166745: pop    %rax
  0x00007f8ab9166746: movabs $0x0,%r10
  0x00007f8ab9166750: mov    %r10,0x200(%r15)
  0x00007f8ab9166757: movabs $0x0,%r10
  0x00007f8ab9166761: mov    %r10,0x210(%r15)
  0x00007f8ab9166768: movabs $0x0,%r10
  0x00007f8ab9166772: mov    %r10,0x208(%r15)
  0x00007f8ab9166779: cmpq   $0x0,0x8(%r15)
  0x00007f8ab9166781: je     0x00007f8ab9166790
  0x00007f8ab9166787: mov    0x8(%r15),%rax
  0x00007f8ab916678b: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab9166790: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab9166796: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab916679c: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab91667a2: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab91667a8: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab91667ae: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab91667b4: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab91667ba: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab91667c0: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab91667c6: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab91667cc: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab91667d2: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab91667d8: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab91667de: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab91667e4: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab91667ea: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab91667f3: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab91667ff: je     0x00007f8ab916687c
  0x00007f8ab9166805: mov    %rsp,-0x28(%rsp)
  0x00007f8ab916680a: sub    $0x80,%rsp
  0x00007f8ab9166811: mov    %rax,0x78(%rsp)
  0x00007f8ab9166816: mov    %rcx,0x70(%rsp)
  0x00007f8ab916681b: mov    %rdx,0x68(%rsp)
  0x00007f8ab9166820: mov    %rbx,0x60(%rsp)
  0x00007f8ab9166825: mov    %rbp,0x50(%rsp)
  0x00007f8ab916682a: mov    %rsi,0x48(%rsp)
  0x00007f8ab916682f: mov    %rdi,0x40(%rsp)
  0x00007f8ab9166834: mov    %r8,0x38(%rsp)
  0x00007f8ab9166839: mov    %r9,0x30(%rsp)
  0x00007f8ab916683e: mov    %r10,0x28(%rsp)
  0x00007f8ab9166843: mov    %r11,0x20(%rsp)
  0x00007f8ab9166848: mov    %r12,0x18(%rsp)
  0x00007f8ab916684d: mov    %r13,0x10(%rsp)
  0x00007f8ab9166852: mov    %r14,0x8(%rsp)
  0x00007f8ab9166857: mov    %r15,(%rsp)
  0x00007f8ab916685b: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab9166865: movabs $0x7f8ab9166805,%rsi
  0x00007f8ab916686f: mov    %rsp,%rdx
  0x00007f8ab9166872: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9166876: callq  0x00007f8aceddb9fa
  0x00007f8ab916687b: hlt    
  0x00007f8ab916687c: add    $0x150,%rsp
  0x00007f8ab9166883: mov    (%rsp),%r15
  0x00007f8ab9166887: mov    0x8(%rsp),%r14
  0x00007f8ab916688c: mov    0x10(%rsp),%r13
  0x00007f8ab9166891: mov    0x18(%rsp),%r12
  0x00007f8ab9166896: mov    0x20(%rsp),%r11
  0x00007f8ab916689b: mov    0x28(%rsp),%r10
  0x00007f8ab91668a0: mov    0x30(%rsp),%r9
  0x00007f8ab91668a5: mov    0x38(%rsp),%r8
  0x00007f8ab91668aa: mov    0x40(%rsp),%rdi
  0x00007f8ab91668af: mov    0x48(%rsp),%rsi
  0x00007f8ab91668b4: mov    0x50(%rsp),%rbp
  0x00007f8ab91668b9: mov    0x60(%rsp),%rbx
  0x00007f8ab91668be: mov    0x68(%rsp),%rdx
  0x00007f8ab91668c3: mov    0x70(%rsp),%rcx
  0x00007f8ab91668c8: mov    0x78(%rsp),%rax
  0x00007f8ab91668cd: add    $0x80,%rsp
  0x00007f8ab91668d4: leaveq 
  0x00007f8ab91668d5: retq   
  0x00007f8ab91668d6: nop
  0x00007f8ab91668d7: nop

Decoding RuntimeStub - predicate_failed_trap Runtime1 stub 0x00007f8ab922bf50
  0x00007f8ab922bfe0: push   %rbp
  0x00007f8ab922bfe1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f8ab922bfe4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922bfe9: sub    $0x80,%rsp
  0x00007f8ab922bff0: mov    %rax,0x78(%rsp)
  0x00007f8ab922bff5: mov    %rcx,0x70(%rsp)
  0x00007f8ab922bffa: mov    %rdx,0x68(%rsp)
  0x00007f8ab922bfff: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c004: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c009: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c00e: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c013: mov    %r8,0x38(%rsp)
  0x00007f8ab922c018: mov    %r9,0x30(%rsp)
  0x00007f8ab922c01d: mov    %r10,0x28(%rsp)
  0x00007f8ab922c022: mov    %r11,0x20(%rsp)
  0x00007f8ab922c027: mov    %r12,0x18(%rsp)
  0x00007f8ab922c02c: mov    %r13,0x10(%rsp)
  0x00007f8ab922c031: mov    %r14,0x8(%rsp)
  0x00007f8ab922c036: mov    %r15,(%rsp)
  0x00007f8ab922c03a: sub    $0x150,%rsp
  0x00007f8ab922c041: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922c04d: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab922c053: vmovsd %xmm1,0x10(%rsp)
  0x00007f8ab922c059: vmovsd %xmm2,0x18(%rsp)
  0x00007f8ab922c05f: vmovsd %xmm3,0x20(%rsp)
  0x00007f8ab922c065: vmovsd %xmm4,0x28(%rsp)
  0x00007f8ab922c06b: vmovsd %xmm5,0x30(%rsp)
  0x00007f8ab922c071: vmovsd %xmm6,0x38(%rsp)
  0x00007f8ab922c077: vmovsd %xmm7,0x40(%rsp)
  0x00007f8ab922c07d: vmovsd %xmm8,0x48(%rsp)
  0x00007f8ab922c083: vmovsd %xmm9,0x50(%rsp)
  0x00007f8ab922c089: vmovsd %xmm10,0x58(%rsp)
  0x00007f8ab922c08f: vmovsd %xmm11,0x60(%rsp)
  0x00007f8ab922c095: vmovsd %xmm12,0x68(%rsp)
  0x00007f8ab922c09b: vmovsd %xmm13,0x70(%rsp)
  0x00007f8ab922c0a1: vmovsd %xmm14,0x78(%rsp)
  0x00007f8ab922c0a7: vmovsd %xmm15,0x80(%rsp)
  0x00007f8ab922c0b0: mov    %r15,%rdi
  0x00007f8ab922c0b3: mov    %rbp,0x210(%r15)
  0x00007f8ab922c0ba: mov    %rsp,0x200(%r15)
  0x00007f8ab922c0c1: callq  0x00007f8ace8bf74e
  0x00007f8ab922c0c6: push   %rax
  0x00007f8ab922c0c7: push   %rdi
  0x00007f8ab922c0c8: push   %rsi
  0x00007f8ab922c0c9: push   %rdx
  0x00007f8ab922c0ca: push   %rcx
  0x00007f8ab922c0cb: push   %r8
  0x00007f8ab922c0cd: push   %r9
  0x00007f8ab922c0cf: push   %r10
  0x00007f8ab922c0d1: mov    %rsp,%r10
  0x00007f8ab922c0d4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c0d8: push   %r10
  0x00007f8ab922c0da: push   %r11
  0x00007f8ab922c0dc: mov    $0x1,%edi
  0x00007f8ab922c0e1: callq  0x00007f8acf9c32d0
  0x00007f8ab922c0e6: pop    %r11
  0x00007f8ab922c0e8: pop    %rsp
  0x00007f8ab922c0e9: pop    %r10
  0x00007f8ab922c0eb: pop    %r9
  0x00007f8ab922c0ed: pop    %r8
  0x00007f8ab922c0ef: pop    %rcx
  0x00007f8ab922c0f0: pop    %rdx
  0x00007f8ab922c0f1: pop    %rsi
  0x00007f8ab922c0f2: pop    %rdi
  0x00007f8ab922c0f3: cmp    %rax,%r15
  0x00007f8ab922c0f6: je     0x00007f8ab922c178
  0x00007f8ab922c0fc: callq  0x00007f8aceec2a22
  0x00007f8ab922c101: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c106: sub    $0x80,%rsp
  0x00007f8ab922c10d: mov    %rax,0x78(%rsp)
  0x00007f8ab922c112: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c117: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c11c: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c121: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c126: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c12b: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c130: mov    %r8,0x38(%rsp)
  0x00007f8ab922c135: mov    %r9,0x30(%rsp)
  0x00007f8ab922c13a: mov    %r10,0x28(%rsp)
  0x00007f8ab922c13f: mov    %r11,0x20(%rsp)
  0x00007f8ab922c144: mov    %r12,0x18(%rsp)
  0x00007f8ab922c149: mov    %r13,0x10(%rsp)
  0x00007f8ab922c14e: mov    %r14,0x8(%rsp)
  0x00007f8ab922c153: mov    %r15,(%rsp)
  0x00007f8ab922c157: movabs $0x7f8acf15c818,%rdi
  0x00007f8ab922c161: movabs $0x7f8ab922c101,%rsi
  0x00007f8ab922c16b: mov    %rsp,%rdx
  0x00007f8ab922c16e: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c172: callq  0x00007f8aceddb9fa
  0x00007f8ab922c177: hlt    
  0x00007f8ab922c178: pop    %rax
  0x00007f8ab922c179: movabs $0x0,%r10
  0x00007f8ab922c183: mov    %r10,0x200(%r15)
  0x00007f8ab922c18a: movabs $0x0,%r10
  0x00007f8ab922c194: mov    %r10,0x210(%r15)
  0x00007f8ab922c19b: movabs $0x0,%r10
  0x00007f8ab922c1a5: mov    %r10,0x208(%r15)
  0x00007f8ab922c1ac: cmpq   $0x0,0x8(%r15)
  0x00007f8ab922c1b4: je     0x00007f8ab922c1c3
  0x00007f8ab922c1ba: mov    0x8(%r15),%rax
  0x00007f8ab922c1be: jmpq   0x00007f8ab9167c00
  ;; restore_live_registers
  0x00007f8ab922c1c3: vmovsd 0x8(%rsp),%xmm0
  0x00007f8ab922c1c9: vmovsd 0x10(%rsp),%xmm1
  0x00007f8ab922c1cf: vmovsd 0x18(%rsp),%xmm2
  0x00007f8ab922c1d5: vmovsd 0x20(%rsp),%xmm3
  0x00007f8ab922c1db: vmovsd 0x28(%rsp),%xmm4
  0x00007f8ab922c1e1: vmovsd 0x30(%rsp),%xmm5
  0x00007f8ab922c1e7: vmovsd 0x38(%rsp),%xmm6
  0x00007f8ab922c1ed: vmovsd 0x40(%rsp),%xmm7
  0x00007f8ab922c1f3: vmovsd 0x48(%rsp),%xmm8
  0x00007f8ab922c1f9: vmovsd 0x50(%rsp),%xmm9
  0x00007f8ab922c1ff: vmovsd 0x58(%rsp),%xmm10
  0x00007f8ab922c205: vmovsd 0x60(%rsp),%xmm11
  0x00007f8ab922c20b: vmovsd 0x68(%rsp),%xmm12
  0x00007f8ab922c211: vmovsd 0x70(%rsp),%xmm13
  0x00007f8ab922c217: vmovsd 0x78(%rsp),%xmm14
  0x00007f8ab922c21d: vmovsd 0x80(%rsp),%xmm15
  0x00007f8ab922c226: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f8ab922c232: je     0x00007f8ab922c2af
  0x00007f8ab922c238: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922c23d: sub    $0x80,%rsp
  0x00007f8ab922c244: mov    %rax,0x78(%rsp)
  0x00007f8ab922c249: mov    %rcx,0x70(%rsp)
  0x00007f8ab922c24e: mov    %rdx,0x68(%rsp)
  0x00007f8ab922c253: mov    %rbx,0x60(%rsp)
  0x00007f8ab922c258: mov    %rbp,0x50(%rsp)
  0x00007f8ab922c25d: mov    %rsi,0x48(%rsp)
  0x00007f8ab922c262: mov    %rdi,0x40(%rsp)
  0x00007f8ab922c267: mov    %r8,0x38(%rsp)
  0x00007f8ab922c26c: mov    %r9,0x30(%rsp)
  0x00007f8ab922c271: mov    %r10,0x28(%rsp)
  0x00007f8ab922c276: mov    %r11,0x20(%rsp)
  0x00007f8ab922c27b: mov    %r12,0x18(%rsp)
  0x00007f8ab922c280: mov    %r13,0x10(%rsp)
  0x00007f8ab922c285: mov    %r14,0x8(%rsp)
  0x00007f8ab922c28a: mov    %r15,(%rsp)
  0x00007f8ab922c28e: movabs $0x7f8acf15c9af,%rdi
  0x00007f8ab922c298: movabs $0x7f8ab922c238,%rsi
  0x00007f8ab922c2a2: mov    %rsp,%rdx
  0x00007f8ab922c2a5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922c2a9: callq  0x00007f8aceddb9fa
  0x00007f8ab922c2ae: hlt    
  0x00007f8ab922c2af: add    $0x150,%rsp
  0x00007f8ab922c2b6: mov    (%rsp),%r15
  0x00007f8ab922c2ba: mov    0x8(%rsp),%r14
  0x00007f8ab922c2bf: mov    0x10(%rsp),%r13
  0x00007f8ab922c2c4: mov    0x18(%rsp),%r12
  0x00007f8ab922c2c9: mov    0x20(%rsp),%r11
  0x00007f8ab922c2ce: mov    0x28(%rsp),%r10
  0x00007f8ab922c2d3: mov    0x30(%rsp),%r9
  0x00007f8ab922c2d8: mov    0x38(%rsp),%r8
  0x00007f8ab922c2dd: mov    0x40(%rsp),%rdi
  0x00007f8ab922c2e2: mov    0x48(%rsp),%rsi
  0x00007f8ab922c2e7: mov    0x50(%rsp),%rbp
  0x00007f8ab922c2ec: mov    0x60(%rsp),%rbx
  0x00007f8ab922c2f1: mov    0x68(%rsp),%rdx
  0x00007f8ab922c2f6: mov    0x70(%rsp),%rcx
  0x00007f8ab922c2fb: mov    0x78(%rsp),%rax
  0x00007f8ab922c300: add    $0x80,%rsp
  0x00007f8ab922c307: leaveq 
  0x00007f8ab922c308: jmpq   0x00007f8ab9107356
  0x00007f8ab922c30d: leaveq 
  0x00007f8ab922c30e: retq   
  0x00007f8ab922c30f: nop

AHE@0x00007f8ac812f4f0: 0xbeba0000 i2c: 0x00007f8ab922bce0 c2i: 0x00007f8ab922be21 c2iUV: 0x00007f8ab922bdf4
i2c argument handler #122 for: static (J[BZ)J (608 bytes generated)
c2i argument handler starts at 0x7f8ab922be21
  0x00007f8ab922bce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab922bce4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab922bcee: cmp    %r11,%rax
  0x00007f8ab922bcf1: jbe    0x00007f8ab922bd0a
  0x00007f8ab922bcf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab922bd01: cmp    %r11,%rax
  0x00007f8ab922bd04: jb     0x00007f8ab922bdcd
  0x00007f8ab922bd0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab922bd14: cmp    %r11,%rax
  0x00007f8ab922bd17: jbe    0x00007f8ab922bd30
  0x00007f8ab922bd1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab922bd27: cmp    %r11,%rax
  0x00007f8ab922bd2a: jb     0x00007f8ab922bdcd
  0x00007f8ab922bd30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab922bd3a: cmp    %r11,%rax
  0x00007f8ab922bd3d: jbe    0x00007f8ab922bd56
  0x00007f8ab922bd43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab922bd4d: cmp    %r11,%rax
  0x00007f8ab922bd50: jb     0x00007f8ab922bdcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab922bd56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922bd5b: sub    $0x80,%rsp
  0x00007f8ab922bd62: mov    %rax,0x78(%rsp)
  0x00007f8ab922bd67: mov    %rcx,0x70(%rsp)
  0x00007f8ab922bd6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab922bd71: mov    %rbx,0x60(%rsp)
  0x00007f8ab922bd76: mov    %rbp,0x50(%rsp)
  0x00007f8ab922bd7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab922bd80: mov    %rdi,0x40(%rsp)
  0x00007f8ab922bd85: mov    %r8,0x38(%rsp)
  0x00007f8ab922bd8a: mov    %r9,0x30(%rsp)
  0x00007f8ab922bd8f: mov    %r10,0x28(%rsp)
  0x00007f8ab922bd94: mov    %r11,0x20(%rsp)
  0x00007f8ab922bd99: mov    %r12,0x18(%rsp)
  0x00007f8ab922bd9e: mov    %r13,0x10(%rsp)
  0x00007f8ab922bda3: mov    %r14,0x8(%rsp)
  0x00007f8ab922bda8: mov    %r15,(%rsp)
  0x00007f8ab922bdac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab922bdb6: movabs $0x7f8ab922bd56,%rsi
  0x00007f8ab922bdc0: mov    %rsp,%rdx
  0x00007f8ab922bdc3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922bdc7: callq  0x00007f8aceddb9fa
  0x00007f8ab922bdcc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab922bdcd: mov    %rsp,%r11
  0x00007f8ab922bdd0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922bdd4: push   %rax
  0x00007f8ab922bdd5: mov    %r11,%rax
  0x00007f8ab922bdd8: mov    0x50(%rbx),%r11
  0x00007f8ab922bddc: mov    0x18(%rax),%rsi
  0x00007f8ab922bde0: mov    0x10(%rax),%rdx
  0x00007f8ab922bde4: mov    0x8(%rax),%ecx
  0x00007f8ab922bde7: mov    %rbx,0x258(%r15)
  0x00007f8ab922bdee: mov    %rbx,%rax
  0x00007f8ab922bdf1: jmpq   *%r11
  0x00007f8ab922bdf4: mov    0x8(%rsi),%ebx
  0x00007f8ab922bdf7: shl    $0x3,%rbx
  0x00007f8ab922bdfb: cmp    0x10(%rax),%rbx
  0x00007f8ab922bdff: mov    0x8(%rax),%rbx
  0x00007f8ab922be03: je     0x00007f8ab922be0e
  0x00007f8ab922be09: jmpq   0x00007f8ab9105c40
  0x00007f8ab922be0e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922be16: je     0x00007f8ab922bf11
  0x00007f8ab922be1c: jmpq   0x00007f8ab9105c40
  0x00007f8ab922be21: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922be29: je     0x00007f8ab922bf11
  0x00007f8ab922be2f: mov    %rsp,%r13
  0x00007f8ab922be32: mov    (%rsp),%rax
  0x00007f8ab922be36: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922be3a: pushfq 
  0x00007f8ab922be3b: sub    $0x8,%rsp
  0x00007f8ab922be3f: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922be44: sub    $0x80,%rsp
  0x00007f8ab922be4b: mov    %rax,0x78(%rsp)
  0x00007f8ab922be50: mov    %rcx,0x70(%rsp)
  0x00007f8ab922be55: mov    %rdx,0x68(%rsp)
  0x00007f8ab922be5a: mov    %rbx,0x60(%rsp)
  0x00007f8ab922be5f: mov    %rbp,0x50(%rsp)
  0x00007f8ab922be64: mov    %rsi,0x48(%rsp)
  0x00007f8ab922be69: mov    %rdi,0x40(%rsp)
  0x00007f8ab922be6e: mov    %r8,0x38(%rsp)
  0x00007f8ab922be73: mov    %r9,0x30(%rsp)
  0x00007f8ab922be78: mov    %r10,0x28(%rsp)
  0x00007f8ab922be7d: mov    %r11,0x20(%rsp)
  0x00007f8ab922be82: mov    %r12,0x18(%rsp)
  0x00007f8ab922be87: mov    %r13,0x10(%rsp)
  0x00007f8ab922be8c: mov    %r14,0x8(%rsp)
  0x00007f8ab922be91: mov    %r15,(%rsp)
  0x00007f8ab922be95: sub    $0x200,%rsp
  0x00007f8ab922be9c: fxsave64 (%rsp)
  0x00007f8ab922bea1: mov    %rbx,%rdi
  0x00007f8ab922bea4: mov    %rax,%rsi
  0x00007f8ab922bea7: callq  0x00007f8acef8bbca
  0x00007f8ab922beac: fxrstor64 (%rsp)
  0x00007f8ab922beb1: add    $0x200,%rsp
  0x00007f8ab922beb8: mov    (%rsp),%r15
  0x00007f8ab922bebc: mov    0x8(%rsp),%r14
  0x00007f8ab922bec1: mov    0x10(%rsp),%r13
  0x00007f8ab922bec6: mov    0x18(%rsp),%r12
  0x00007f8ab922becb: mov    0x20(%rsp),%r11
  0x00007f8ab922bed0: mov    0x28(%rsp),%r10
  0x00007f8ab922bed5: mov    0x30(%rsp),%r9
  0x00007f8ab922beda: mov    0x38(%rsp),%r8
  0x00007f8ab922bedf: mov    0x40(%rsp),%rdi
  0x00007f8ab922bee4: mov    0x48(%rsp),%rsi
  0x00007f8ab922bee9: mov    0x50(%rsp),%rbp
  0x00007f8ab922beee: mov    0x60(%rsp),%rbx
  0x00007f8ab922bef3: mov    0x68(%rsp),%rdx
  0x00007f8ab922bef8: mov    0x70(%rsp),%rcx
  0x00007f8ab922befd: mov    0x78(%rsp),%rax
  0x00007f8ab922bf02: add    $0x80,%rsp
  0x00007f8ab922bf09: add    $0x8,%rsp
  0x00007f8ab922bf0d: popfq  
  0x00007f8ab922bf0e: mov    %r13,%rsp
  0x00007f8ab922bf11: pop    %rax
  0x00007f8ab922bf12: mov    %rsp,%r13
  0x00007f8ab922bf15: sub    $0x30,%rsp
  0x00007f8ab922bf19: mov    %rax,(%rsp)
  0x00007f8ab922bf1d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922bf27: mov    %rax,0x20(%rsp)
  0x00007f8ab922bf2c: mov    %rsi,0x18(%rsp)
  0x00007f8ab922bf31: mov    %rdx,0x10(%rsp)
  0x00007f8ab922bf36: mov    %ecx,0x8(%rsp)
  0x00007f8ab922bf3a: mov    0x40(%rbx),%rcx
  0x00007f8ab922bf3e: jmpq   *%rcx

AHE@0x00007f8ac812f538: 0xbebebebaa0000000 i2c: 0x00007f8ab922b9a0 c2i: 0x00007f8ab922baed c2iUV: 0x00007f8ab922bac0
i2c argument handler #123 for: static (JJJ[BII)I (665 bytes generated)
c2i argument handler starts at 0x7f8ab922baed
  0x00007f8ab922b9a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab922b9a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab922b9ae: cmp    %r11,%rax
  0x00007f8ab922b9b1: jbe    0x00007f8ab922b9ca
  0x00007f8ab922b9b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab922b9c1: cmp    %r11,%rax
  0x00007f8ab922b9c4: jb     0x00007f8ab922ba8d
  0x00007f8ab922b9ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab922b9d4: cmp    %r11,%rax
  0x00007f8ab922b9d7: jbe    0x00007f8ab922b9f0
  0x00007f8ab922b9dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab922b9e7: cmp    %r11,%rax
  0x00007f8ab922b9ea: jb     0x00007f8ab922ba8d
  0x00007f8ab922b9f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab922b9fa: cmp    %r11,%rax
  0x00007f8ab922b9fd: jbe    0x00007f8ab922ba16
  0x00007f8ab922ba03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab922ba0d: cmp    %r11,%rax
  0x00007f8ab922ba10: jb     0x00007f8ab922ba8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab922ba16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922ba1b: sub    $0x80,%rsp
  0x00007f8ab922ba22: mov    %rax,0x78(%rsp)
  0x00007f8ab922ba27: mov    %rcx,0x70(%rsp)
  0x00007f8ab922ba2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab922ba31: mov    %rbx,0x60(%rsp)
  0x00007f8ab922ba36: mov    %rbp,0x50(%rsp)
  0x00007f8ab922ba3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab922ba40: mov    %rdi,0x40(%rsp)
  0x00007f8ab922ba45: mov    %r8,0x38(%rsp)
  0x00007f8ab922ba4a: mov    %r9,0x30(%rsp)
  0x00007f8ab922ba4f: mov    %r10,0x28(%rsp)
  0x00007f8ab922ba54: mov    %r11,0x20(%rsp)
  0x00007f8ab922ba59: mov    %r12,0x18(%rsp)
  0x00007f8ab922ba5e: mov    %r13,0x10(%rsp)
  0x00007f8ab922ba63: mov    %r14,0x8(%rsp)
  0x00007f8ab922ba68: mov    %r15,(%rsp)
  0x00007f8ab922ba6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab922ba76: movabs $0x7f8ab922ba16,%rsi
  0x00007f8ab922ba80: mov    %rsp,%rdx
  0x00007f8ab922ba83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ba87: callq  0x00007f8aceddb9fa
  0x00007f8ab922ba8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab922ba8d: mov    %rsp,%r11
  0x00007f8ab922ba90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ba94: push   %rax
  0x00007f8ab922ba95: mov    %r11,%rax
  0x00007f8ab922ba98: mov    0x50(%rbx),%r11
  0x00007f8ab922ba9c: mov    0x40(%rax),%rsi
  0x00007f8ab922baa0: mov    0x30(%rax),%rdx
  0x00007f8ab922baa4: mov    0x20(%rax),%rcx
  0x00007f8ab922baa8: mov    0x18(%rax),%r8
  0x00007f8ab922baac: mov    0x10(%rax),%r9d
  0x00007f8ab922bab0: mov    0x8(%rax),%edi
  0x00007f8ab922bab3: mov    %rbx,0x258(%r15)
  0x00007f8ab922baba: mov    %rbx,%rax
  0x00007f8ab922babd: jmpq   *%r11
  0x00007f8ab922bac0: mov    0x8(%rsi),%ebx
  0x00007f8ab922bac3: shl    $0x3,%rbx
  0x00007f8ab922bac7: cmp    0x10(%rax),%rbx
  0x00007f8ab922bacb: mov    0x8(%rax),%rbx
  0x00007f8ab922bacf: je     0x00007f8ab922bada
  0x00007f8ab922bad5: jmpq   0x00007f8ab9105c40
  0x00007f8ab922bada: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922bae2: je     0x00007f8ab922bbdd
  0x00007f8ab922bae8: jmpq   0x00007f8ab9105c40
  0x00007f8ab922baed: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922baf5: je     0x00007f8ab922bbdd
  0x00007f8ab922bafb: mov    %rsp,%r13
  0x00007f8ab922bafe: mov    (%rsp),%rax
  0x00007f8ab922bb02: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922bb06: pushfq 
  0x00007f8ab922bb07: sub    $0x8,%rsp
  0x00007f8ab922bb0b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922bb10: sub    $0x80,%rsp
  0x00007f8ab922bb17: mov    %rax,0x78(%rsp)
  0x00007f8ab922bb1c: mov    %rcx,0x70(%rsp)
  0x00007f8ab922bb21: mov    %rdx,0x68(%rsp)
  0x00007f8ab922bb26: mov    %rbx,0x60(%rsp)
  0x00007f8ab922bb2b: mov    %rbp,0x50(%rsp)
  0x00007f8ab922bb30: mov    %rsi,0x48(%rsp)
  0x00007f8ab922bb35: mov    %rdi,0x40(%rsp)
  0x00007f8ab922bb3a: mov    %r8,0x38(%rsp)
  0x00007f8ab922bb3f: mov    %r9,0x30(%rsp)
  0x00007f8ab922bb44: mov    %r10,0x28(%rsp)
  0x00007f8ab922bb49: mov    %r11,0x20(%rsp)
  0x00007f8ab922bb4e: mov    %r12,0x18(%rsp)
  0x00007f8ab922bb53: mov    %r13,0x10(%rsp)
  0x00007f8ab922bb58: mov    %r14,0x8(%rsp)
  0x00007f8ab922bb5d: mov    %r15,(%rsp)
  0x00007f8ab922bb61: sub    $0x200,%rsp
  0x00007f8ab922bb68: fxsave64 (%rsp)
  0x00007f8ab922bb6d: mov    %rbx,%rdi
  0x00007f8ab922bb70: mov    %rax,%rsi
  0x00007f8ab922bb73: callq  0x00007f8acef8bbca
  0x00007f8ab922bb78: fxrstor64 (%rsp)
  0x00007f8ab922bb7d: add    $0x200,%rsp
  0x00007f8ab922bb84: mov    (%rsp),%r15
  0x00007f8ab922bb88: mov    0x8(%rsp),%r14
  0x00007f8ab922bb8d: mov    0x10(%rsp),%r13
  0x00007f8ab922bb92: mov    0x18(%rsp),%r12
  0x00007f8ab922bb97: mov    0x20(%rsp),%r11
  0x00007f8ab922bb9c: mov    0x28(%rsp),%r10
  0x00007f8ab922bba1: mov    0x30(%rsp),%r9
  0x00007f8ab922bba6: mov    0x38(%rsp),%r8
  0x00007f8ab922bbab: mov    0x40(%rsp),%rdi
  0x00007f8ab922bbb0: mov    0x48(%rsp),%rsi
  0x00007f8ab922bbb5: mov    0x50(%rsp),%rbp
  0x00007f8ab922bbba: mov    0x60(%rsp),%rbx
  0x00007f8ab922bbbf: mov    0x68(%rsp),%rdx
  0x00007f8ab922bbc4: mov    0x70(%rsp),%rcx
  0x00007f8ab922bbc9: mov    0x78(%rsp),%rax
  0x00007f8ab922bbce: add    $0x80,%rsp
  0x00007f8ab922bbd5: add    $0x8,%rsp
  0x00007f8ab922bbd9: popfq  
  0x00007f8ab922bbda: mov    %r13,%rsp
  0x00007f8ab922bbdd: pop    %rax
  0x00007f8ab922bbde: mov    %rsp,%r13
  0x00007f8ab922bbe1: sub    $0x50,%rsp
  0x00007f8ab922bbe5: mov    %rax,(%rsp)
  0x00007f8ab922bbe9: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922bbf3: mov    %rax,0x48(%rsp)
  0x00007f8ab922bbf8: mov    %rsi,0x40(%rsp)
  0x00007f8ab922bbfd: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922bc07: mov    %rax,0x38(%rsp)
  0x00007f8ab922bc0c: mov    %rdx,0x30(%rsp)
  0x00007f8ab922bc11: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922bc1b: mov    %rax,0x28(%rsp)
  0x00007f8ab922bc20: mov    %rcx,0x20(%rsp)
  0x00007f8ab922bc25: mov    %r8,0x18(%rsp)
  0x00007f8ab922bc2a: mov    %r9d,0x10(%rsp)
  0x00007f8ab922bc2f: mov    %edi,0x8(%rsp)
  0x00007f8ab922bc33: mov    0x40(%rbx),%rcx
  0x00007f8ab922bc37: jmpq   *%rcx

AHE@0x00007f8ac812f580: 0xbbaaba00 i2c: 0x00007f8ab922ee60 c2i: 0x00007f8ab922efac c2iUV: 0x00007f8ab922ef7f
i2c argument handler #124 for: receiver (Ljava/lang/String;II[BI)Ljava/nio/ByteBuffer; (618 bytes generated)
c2i argument handler starts at 0x7f8ab922efac
  0x00007f8ab922ee60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab922ee64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab922ee6e: cmp    %r11,%rax
  0x00007f8ab922ee71: jbe    0x00007f8ab922ee8a
  0x00007f8ab922ee77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab922ee81: cmp    %r11,%rax
  0x00007f8ab922ee84: jb     0x00007f8ab922ef4d
  0x00007f8ab922ee8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab922ee94: cmp    %r11,%rax
  0x00007f8ab922ee97: jbe    0x00007f8ab922eeb0
  0x00007f8ab922ee9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab922eea7: cmp    %r11,%rax
  0x00007f8ab922eeaa: jb     0x00007f8ab922ef4d
  0x00007f8ab922eeb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab922eeba: cmp    %r11,%rax
  0x00007f8ab922eebd: jbe    0x00007f8ab922eed6
  0x00007f8ab922eec3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab922eecd: cmp    %r11,%rax
  0x00007f8ab922eed0: jb     0x00007f8ab922ef4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab922eed6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922eedb: sub    $0x80,%rsp
  0x00007f8ab922eee2: mov    %rax,0x78(%rsp)
  0x00007f8ab922eee7: mov    %rcx,0x70(%rsp)
  0x00007f8ab922eeec: mov    %rdx,0x68(%rsp)
  0x00007f8ab922eef1: mov    %rbx,0x60(%rsp)
  0x00007f8ab922eef6: mov    %rbp,0x50(%rsp)
  0x00007f8ab922eefb: mov    %rsi,0x48(%rsp)
  0x00007f8ab922ef00: mov    %rdi,0x40(%rsp)
  0x00007f8ab922ef05: mov    %r8,0x38(%rsp)
  0x00007f8ab922ef0a: mov    %r9,0x30(%rsp)
  0x00007f8ab922ef0f: mov    %r10,0x28(%rsp)
  0x00007f8ab922ef14: mov    %r11,0x20(%rsp)
  0x00007f8ab922ef19: mov    %r12,0x18(%rsp)
  0x00007f8ab922ef1e: mov    %r13,0x10(%rsp)
  0x00007f8ab922ef23: mov    %r14,0x8(%rsp)
  0x00007f8ab922ef28: mov    %r15,(%rsp)
  0x00007f8ab922ef2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab922ef36: movabs $0x7f8ab922eed6,%rsi
  0x00007f8ab922ef40: mov    %rsp,%rdx
  0x00007f8ab922ef43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ef47: callq  0x00007f8aceddb9fa
  0x00007f8ab922ef4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab922ef4d: mov    %rsp,%r11
  0x00007f8ab922ef50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ef54: push   %rax
  0x00007f8ab922ef55: mov    %r11,%rax
  0x00007f8ab922ef58: mov    0x50(%rbx),%r11
  0x00007f8ab922ef5c: mov    0x30(%rax),%rsi
  0x00007f8ab922ef60: mov    0x28(%rax),%rdx
  0x00007f8ab922ef64: mov    0x20(%rax),%ecx
  0x00007f8ab922ef67: mov    0x18(%rax),%r8d
  0x00007f8ab922ef6b: mov    0x10(%rax),%r9
  0x00007f8ab922ef6f: mov    0x8(%rax),%edi
  0x00007f8ab922ef72: mov    %rbx,0x258(%r15)
  0x00007f8ab922ef79: mov    %rbx,%rax
  0x00007f8ab922ef7c: jmpq   *%r11
  0x00007f8ab922ef7f: mov    0x8(%rsi),%ebx
  0x00007f8ab922ef82: shl    $0x3,%rbx
  0x00007f8ab922ef86: cmp    0x10(%rax),%rbx
  0x00007f8ab922ef8a: mov    0x8(%rax),%rbx
  0x00007f8ab922ef8e: je     0x00007f8ab922ef99
  0x00007f8ab922ef94: jmpq   0x00007f8ab9105c40
  0x00007f8ab922ef99: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922efa1: je     0x00007f8ab922f09c
  0x00007f8ab922efa7: jmpq   0x00007f8ab9105c40
  0x00007f8ab922efac: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922efb4: je     0x00007f8ab922f09c
  0x00007f8ab922efba: mov    %rsp,%r13
  0x00007f8ab922efbd: mov    (%rsp),%rax
  0x00007f8ab922efc1: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922efc5: pushfq 
  0x00007f8ab922efc6: sub    $0x8,%rsp
  0x00007f8ab922efca: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922efcf: sub    $0x80,%rsp
  0x00007f8ab922efd6: mov    %rax,0x78(%rsp)
  0x00007f8ab922efdb: mov    %rcx,0x70(%rsp)
  0x00007f8ab922efe0: mov    %rdx,0x68(%rsp)
  0x00007f8ab922efe5: mov    %rbx,0x60(%rsp)
  0x00007f8ab922efea: mov    %rbp,0x50(%rsp)
  0x00007f8ab922efef: mov    %rsi,0x48(%rsp)
  0x00007f8ab922eff4: mov    %rdi,0x40(%rsp)
  0x00007f8ab922eff9: mov    %r8,0x38(%rsp)
  0x00007f8ab922effe: mov    %r9,0x30(%rsp)
  0x00007f8ab922f003: mov    %r10,0x28(%rsp)
  0x00007f8ab922f008: mov    %r11,0x20(%rsp)
  0x00007f8ab922f00d: mov    %r12,0x18(%rsp)
  0x00007f8ab922f012: mov    %r13,0x10(%rsp)
  0x00007f8ab922f017: mov    %r14,0x8(%rsp)
  0x00007f8ab922f01c: mov    %r15,(%rsp)
  0x00007f8ab922f020: sub    $0x200,%rsp
  0x00007f8ab922f027: fxsave64 (%rsp)
  0x00007f8ab922f02c: mov    %rbx,%rdi
  0x00007f8ab922f02f: mov    %rax,%rsi
  0x00007f8ab922f032: callq  0x00007f8acef8bbca
  0x00007f8ab922f037: fxrstor64 (%rsp)
  0x00007f8ab922f03c: add    $0x200,%rsp
  0x00007f8ab922f043: mov    (%rsp),%r15
  0x00007f8ab922f047: mov    0x8(%rsp),%r14
  0x00007f8ab922f04c: mov    0x10(%rsp),%r13
  0x00007f8ab922f051: mov    0x18(%rsp),%r12
  0x00007f8ab922f056: mov    0x20(%rsp),%r11
  0x00007f8ab922f05b: mov    0x28(%rsp),%r10
  0x00007f8ab922f060: mov    0x30(%rsp),%r9
  0x00007f8ab922f065: mov    0x38(%rsp),%r8
  0x00007f8ab922f06a: mov    0x40(%rsp),%rdi
  0x00007f8ab922f06f: mov    0x48(%rsp),%rsi
  0x00007f8ab922f074: mov    0x50(%rsp),%rbp
  0x00007f8ab922f079: mov    0x60(%rsp),%rbx
  0x00007f8ab922f07e: mov    0x68(%rsp),%rdx
  0x00007f8ab922f083: mov    0x70(%rsp),%rcx
  0x00007f8ab922f088: mov    0x78(%rsp),%rax
  0x00007f8ab922f08d: add    $0x80,%rsp
  0x00007f8ab922f094: add    $0x8,%rsp
  0x00007f8ab922f098: popfq  
  0x00007f8ab922f099: mov    %r13,%rsp
  0x00007f8ab922f09c: pop    %rax
  0x00007f8ab922f09d: mov    %rsp,%r13
  0x00007f8ab922f0a0: sub    $0x40,%rsp
  0x00007f8ab922f0a4: mov    %rax,(%rsp)
  0x00007f8ab922f0a8: mov    %rsi,0x30(%rsp)
  0x00007f8ab922f0ad: mov    %rdx,0x28(%rsp)
  0x00007f8ab922f0b2: mov    %ecx,0x20(%rsp)
  0x00007f8ab922f0b6: mov    %r8d,0x18(%rsp)
  0x00007f8ab922f0bb: mov    %r9,0x10(%rsp)
  0x00007f8ab922f0c0: mov    %edi,0x8(%rsp)
  0x00007f8ab922f0c4: mov    0x40(%rbx),%rcx
  0x00007f8ab922f0c8: jmpq   *%rcx

AHE@0x00007f8ac812f5c8: 0xbbaabe00 i2c: 0x00007f8ab922f1a0 c2i: 0x00007f8ab922f2e9 c2iUV: 0x00007f8ab922f2bc
i2c argument handler #125 for: receiver (Ljava/lang/String;IIJ)Ljava/nio/ByteBuffer; (626 bytes generated)
c2i argument handler starts at 0x7f8ab922f2e9
  0x00007f8ab922f1a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab922f1a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab922f1ae: cmp    %r11,%rax
  0x00007f8ab922f1b1: jbe    0x00007f8ab922f1ca
  0x00007f8ab922f1b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab922f1c1: cmp    %r11,%rax
  0x00007f8ab922f1c4: jb     0x00007f8ab922f28d
  0x00007f8ab922f1ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab922f1d4: cmp    %r11,%rax
  0x00007f8ab922f1d7: jbe    0x00007f8ab922f1f0
  0x00007f8ab922f1dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab922f1e7: cmp    %r11,%rax
  0x00007f8ab922f1ea: jb     0x00007f8ab922f28d
  0x00007f8ab922f1f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab922f1fa: cmp    %r11,%rax
  0x00007f8ab922f1fd: jbe    0x00007f8ab922f216
  0x00007f8ab922f203: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab922f20d: cmp    %r11,%rax
  0x00007f8ab922f210: jb     0x00007f8ab922f28d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab922f216: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922f21b: sub    $0x80,%rsp
  0x00007f8ab922f222: mov    %rax,0x78(%rsp)
  0x00007f8ab922f227: mov    %rcx,0x70(%rsp)
  0x00007f8ab922f22c: mov    %rdx,0x68(%rsp)
  0x00007f8ab922f231: mov    %rbx,0x60(%rsp)
  0x00007f8ab922f236: mov    %rbp,0x50(%rsp)
  0x00007f8ab922f23b: mov    %rsi,0x48(%rsp)
  0x00007f8ab922f240: mov    %rdi,0x40(%rsp)
  0x00007f8ab922f245: mov    %r8,0x38(%rsp)
  0x00007f8ab922f24a: mov    %r9,0x30(%rsp)
  0x00007f8ab922f24f: mov    %r10,0x28(%rsp)
  0x00007f8ab922f254: mov    %r11,0x20(%rsp)
  0x00007f8ab922f259: mov    %r12,0x18(%rsp)
  0x00007f8ab922f25e: mov    %r13,0x10(%rsp)
  0x00007f8ab922f263: mov    %r14,0x8(%rsp)
  0x00007f8ab922f268: mov    %r15,(%rsp)
  0x00007f8ab922f26c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab922f276: movabs $0x7f8ab922f216,%rsi
  0x00007f8ab922f280: mov    %rsp,%rdx
  0x00007f8ab922f283: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922f287: callq  0x00007f8aceddb9fa
  0x00007f8ab922f28c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab922f28d: mov    %rsp,%r11
  0x00007f8ab922f290: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922f294: push   %rax
  0x00007f8ab922f295: mov    %r11,%rax
  0x00007f8ab922f298: mov    0x50(%rbx),%r11
  0x00007f8ab922f29c: mov    0x30(%rax),%rsi
  0x00007f8ab922f2a0: mov    0x28(%rax),%rdx
  0x00007f8ab922f2a4: mov    0x20(%rax),%ecx
  0x00007f8ab922f2a7: mov    0x18(%rax),%r8d
  0x00007f8ab922f2ab: mov    0x8(%rax),%r9
  0x00007f8ab922f2af: mov    %rbx,0x258(%r15)
  0x00007f8ab922f2b6: mov    %rbx,%rax
  0x00007f8ab922f2b9: jmpq   *%r11
  0x00007f8ab922f2bc: mov    0x8(%rsi),%ebx
  0x00007f8ab922f2bf: shl    $0x3,%rbx
  0x00007f8ab922f2c3: cmp    0x10(%rax),%rbx
  0x00007f8ab922f2c7: mov    0x8(%rax),%rbx
  0x00007f8ab922f2cb: je     0x00007f8ab922f2d6
  0x00007f8ab922f2d1: jmpq   0x00007f8ab9105c40
  0x00007f8ab922f2d6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922f2de: je     0x00007f8ab922f3d9
  0x00007f8ab922f2e4: jmpq   0x00007f8ab9105c40
  0x00007f8ab922f2e9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922f2f1: je     0x00007f8ab922f3d9
  0x00007f8ab922f2f7: mov    %rsp,%r13
  0x00007f8ab922f2fa: mov    (%rsp),%rax
  0x00007f8ab922f2fe: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922f302: pushfq 
  0x00007f8ab922f303: sub    $0x8,%rsp
  0x00007f8ab922f307: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922f30c: sub    $0x80,%rsp
  0x00007f8ab922f313: mov    %rax,0x78(%rsp)
  0x00007f8ab922f318: mov    %rcx,0x70(%rsp)
  0x00007f8ab922f31d: mov    %rdx,0x68(%rsp)
  0x00007f8ab922f322: mov    %rbx,0x60(%rsp)
  0x00007f8ab922f327: mov    %rbp,0x50(%rsp)
  0x00007f8ab922f32c: mov    %rsi,0x48(%rsp)
  0x00007f8ab922f331: mov    %rdi,0x40(%rsp)
  0x00007f8ab922f336: mov    %r8,0x38(%rsp)
  0x00007f8ab922f33b: mov    %r9,0x30(%rsp)
  0x00007f8ab922f340: mov    %r10,0x28(%rsp)
  0x00007f8ab922f345: mov    %r11,0x20(%rsp)
  0x00007f8ab922f34a: mov    %r12,0x18(%rsp)
  0x00007f8ab922f34f: mov    %r13,0x10(%rsp)
  0x00007f8ab922f354: mov    %r14,0x8(%rsp)
  0x00007f8ab922f359: mov    %r15,(%rsp)
  0x00007f8ab922f35d: sub    $0x200,%rsp
  0x00007f8ab922f364: fxsave64 (%rsp)
  0x00007f8ab922f369: mov    %rbx,%rdi
  0x00007f8ab922f36c: mov    %rax,%rsi
  0x00007f8ab922f36f: callq  0x00007f8acef8bbca
  0x00007f8ab922f374: fxrstor64 (%rsp)
  0x00007f8ab922f379: add    $0x200,%rsp
  0x00007f8ab922f380: mov    (%rsp),%r15
  0x00007f8ab922f384: mov    0x8(%rsp),%r14
  0x00007f8ab922f389: mov    0x10(%rsp),%r13
  0x00007f8ab922f38e: mov    0x18(%rsp),%r12
  0x00007f8ab922f393: mov    0x20(%rsp),%r11
  0x00007f8ab922f398: mov    0x28(%rsp),%r10
  0x00007f8ab922f39d: mov    0x30(%rsp),%r9
  0x00007f8ab922f3a2: mov    0x38(%rsp),%r8
  0x00007f8ab922f3a7: mov    0x40(%rsp),%rdi
  0x00007f8ab922f3ac: mov    0x48(%rsp),%rsi
  0x00007f8ab922f3b1: mov    0x50(%rsp),%rbp
  0x00007f8ab922f3b6: mov    0x60(%rsp),%rbx
  0x00007f8ab922f3bb: mov    0x68(%rsp),%rdx
  0x00007f8ab922f3c0: mov    0x70(%rsp),%rcx
  0x00007f8ab922f3c5: mov    0x78(%rsp),%rax
  0x00007f8ab922f3ca: add    $0x80,%rsp
  0x00007f8ab922f3d1: add    $0x8,%rsp
  0x00007f8ab922f3d5: popfq  
  0x00007f8ab922f3d6: mov    %r13,%rsp
  0x00007f8ab922f3d9: pop    %rax
  0x00007f8ab922f3da: mov    %rsp,%r13
  0x00007f8ab922f3dd: sub    $0x40,%rsp
  0x00007f8ab922f3e1: mov    %rax,(%rsp)
  0x00007f8ab922f3e5: mov    %rsi,0x30(%rsp)
  0x00007f8ab922f3ea: mov    %rdx,0x28(%rsp)
  0x00007f8ab922f3ef: mov    %ecx,0x20(%rsp)
  0x00007f8ab922f3f3: mov    %r8d,0x18(%rsp)
  0x00007f8ab922f3f8: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab922f402: mov    %rax,0x10(%rsp)
  0x00007f8ab922f407: mov    %r9,0x8(%rsp)
  0x00007f8ab922f40c: mov    0x40(%rbx),%rcx
  0x00007f8ab922f410: jmpq   *%rcx

AHE@0x00007f8ac812f610: 0xbaaaab00 i2c: 0x00007f8ab922fe20 c2i: 0x00007f8ab922ff6c c2iUV: 0x00007f8ab922ff3f
i2c argument handler #126 for: receiver (IIIILjava/io/FileDescriptor;)V (618 bytes generated)
c2i argument handler starts at 0x7f8ab922ff6c
  0x00007f8ab922fe20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab922fe24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab922fe2e: cmp    %r11,%rax
  0x00007f8ab922fe31: jbe    0x00007f8ab922fe4a
  0x00007f8ab922fe37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab922fe41: cmp    %r11,%rax
  0x00007f8ab922fe44: jb     0x00007f8ab922ff0d
  0x00007f8ab922fe4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab922fe54: cmp    %r11,%rax
  0x00007f8ab922fe57: jbe    0x00007f8ab922fe70
  0x00007f8ab922fe5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab922fe67: cmp    %r11,%rax
  0x00007f8ab922fe6a: jb     0x00007f8ab922ff0d
  0x00007f8ab922fe70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab922fe7a: cmp    %r11,%rax
  0x00007f8ab922fe7d: jbe    0x00007f8ab922fe96
  0x00007f8ab922fe83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab922fe8d: cmp    %r11,%rax
  0x00007f8ab922fe90: jb     0x00007f8ab922ff0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab922fe96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922fe9b: sub    $0x80,%rsp
  0x00007f8ab922fea2: mov    %rax,0x78(%rsp)
  0x00007f8ab922fea7: mov    %rcx,0x70(%rsp)
  0x00007f8ab922feac: mov    %rdx,0x68(%rsp)
  0x00007f8ab922feb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab922feb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab922febb: mov    %rsi,0x48(%rsp)
  0x00007f8ab922fec0: mov    %rdi,0x40(%rsp)
  0x00007f8ab922fec5: mov    %r8,0x38(%rsp)
  0x00007f8ab922feca: mov    %r9,0x30(%rsp)
  0x00007f8ab922fecf: mov    %r10,0x28(%rsp)
  0x00007f8ab922fed4: mov    %r11,0x20(%rsp)
  0x00007f8ab922fed9: mov    %r12,0x18(%rsp)
  0x00007f8ab922fede: mov    %r13,0x10(%rsp)
  0x00007f8ab922fee3: mov    %r14,0x8(%rsp)
  0x00007f8ab922fee8: mov    %r15,(%rsp)
  0x00007f8ab922feec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab922fef6: movabs $0x7f8ab922fe96,%rsi
  0x00007f8ab922ff00: mov    %rsp,%rdx
  0x00007f8ab922ff03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ff07: callq  0x00007f8aceddb9fa
  0x00007f8ab922ff0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab922ff0d: mov    %rsp,%r11
  0x00007f8ab922ff10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ff14: push   %rax
  0x00007f8ab922ff15: mov    %r11,%rax
  0x00007f8ab922ff18: mov    0x50(%rbx),%r11
  0x00007f8ab922ff1c: mov    0x30(%rax),%rsi
  0x00007f8ab922ff20: mov    0x28(%rax),%edx
  0x00007f8ab922ff23: mov    0x20(%rax),%ecx
  0x00007f8ab922ff26: mov    0x18(%rax),%r8d
  0x00007f8ab922ff2a: mov    0x10(%rax),%r9d
  0x00007f8ab922ff2e: mov    0x8(%rax),%rdi
  0x00007f8ab922ff32: mov    %rbx,0x258(%r15)
  0x00007f8ab922ff39: mov    %rbx,%rax
  0x00007f8ab922ff3c: jmpq   *%r11
  0x00007f8ab922ff3f: mov    0x8(%rsi),%ebx
  0x00007f8ab922ff42: shl    $0x3,%rbx
  0x00007f8ab922ff46: cmp    0x10(%rax),%rbx
  0x00007f8ab922ff4a: mov    0x8(%rax),%rbx
  0x00007f8ab922ff4e: je     0x00007f8ab922ff59
  0x00007f8ab922ff54: jmpq   0x00007f8ab9105c40
  0x00007f8ab922ff59: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922ff61: je     0x00007f8ab923005c
  0x00007f8ab922ff67: jmpq   0x00007f8ab9105c40
  0x00007f8ab922ff6c: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab922ff74: je     0x00007f8ab923005c
  0x00007f8ab922ff7a: mov    %rsp,%r13
  0x00007f8ab922ff7d: mov    (%rsp),%rax
  0x00007f8ab922ff81: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab922ff85: pushfq 
  0x00007f8ab922ff86: sub    $0x8,%rsp
  0x00007f8ab922ff8a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab922ff8f: sub    $0x80,%rsp
  0x00007f8ab922ff96: mov    %rax,0x78(%rsp)
  0x00007f8ab922ff9b: mov    %rcx,0x70(%rsp)
  0x00007f8ab922ffa0: mov    %rdx,0x68(%rsp)
  0x00007f8ab922ffa5: mov    %rbx,0x60(%rsp)
  0x00007f8ab922ffaa: mov    %rbp,0x50(%rsp)
  0x00007f8ab922ffaf: mov    %rsi,0x48(%rsp)
  0x00007f8ab922ffb4: mov    %rdi,0x40(%rsp)
  0x00007f8ab922ffb9: mov    %r8,0x38(%rsp)
  0x00007f8ab922ffbe: mov    %r9,0x30(%rsp)
  0x00007f8ab922ffc3: mov    %r10,0x28(%rsp)
  0x00007f8ab922ffc8: mov    %r11,0x20(%rsp)
  0x00007f8ab922ffcd: mov    %r12,0x18(%rsp)
  0x00007f8ab922ffd2: mov    %r13,0x10(%rsp)
  0x00007f8ab922ffd7: mov    %r14,0x8(%rsp)
  0x00007f8ab922ffdc: mov    %r15,(%rsp)
  0x00007f8ab922ffe0: sub    $0x200,%rsp
  0x00007f8ab922ffe7: fxsave64 (%rsp)
  0x00007f8ab922ffec: mov    %rbx,%rdi
  0x00007f8ab922ffef: mov    %rax,%rsi
  0x00007f8ab922fff2: callq  0x00007f8acef8bbca
  0x00007f8ab922fff7: fxrstor64 (%rsp)
  0x00007f8ab922fffc: add    $0x200,%rsp
  0x00007f8ab9230003: mov    (%rsp),%r15
  0x00007f8ab9230007: mov    0x8(%rsp),%r14
  0x00007f8ab923000c: mov    0x10(%rsp),%r13
  0x00007f8ab9230011: mov    0x18(%rsp),%r12
  0x00007f8ab9230016: mov    0x20(%rsp),%r11
  0x00007f8ab923001b: mov    0x28(%rsp),%r10
  0x00007f8ab9230020: mov    0x30(%rsp),%r9
  0x00007f8ab9230025: mov    0x38(%rsp),%r8
  0x00007f8ab923002a: mov    0x40(%rsp),%rdi
  0x00007f8ab923002f: mov    0x48(%rsp),%rsi
  0x00007f8ab9230034: mov    0x50(%rsp),%rbp
  0x00007f8ab9230039: mov    0x60(%rsp),%rbx
  0x00007f8ab923003e: mov    0x68(%rsp),%rdx
  0x00007f8ab9230043: mov    0x70(%rsp),%rcx
  0x00007f8ab9230048: mov    0x78(%rsp),%rax
  0x00007f8ab923004d: add    $0x80,%rsp
  0x00007f8ab9230054: add    $0x8,%rsp
  0x00007f8ab9230058: popfq  
  0x00007f8ab9230059: mov    %r13,%rsp
  0x00007f8ab923005c: pop    %rax
  0x00007f8ab923005d: mov    %rsp,%r13
  0x00007f8ab9230060: sub    $0x40,%rsp
  0x00007f8ab9230064: mov    %rax,(%rsp)
  0x00007f8ab9230068: mov    %rsi,0x30(%rsp)
  0x00007f8ab923006d: mov    %edx,0x28(%rsp)
  0x00007f8ab9230071: mov    %ecx,0x20(%rsp)
  0x00007f8ab9230075: mov    %r8d,0x18(%rsp)
  0x00007f8ab923007a: mov    %r9d,0x10(%rsp)
  0x00007f8ab923007f: mov    %rdi,0x8(%rsp)
  0x00007f8ab9230084: mov    0x40(%rbx),%rcx
  0x00007f8ab9230088: jmpq   *%rcx

AHE@0x00007f8ac812f658: 0xbbbebe00 i2c: 0x00007f8ab9230160 c2i: 0x00007f8ab92302a6 c2iUV: 0x00007f8ab9230279
i2c argument handler #127 for: receiver (Ljava/io/FileDescriptor;JJ)V (634 bytes generated)
c2i argument handler starts at 0x7f8ab92302a6
  0x00007f8ab9230160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9230164: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab923016e: cmp    %r11,%rax
  0x00007f8ab9230171: jbe    0x00007f8ab923018a
  0x00007f8ab9230177: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9230181: cmp    %r11,%rax
  0x00007f8ab9230184: jb     0x00007f8ab923024d
  0x00007f8ab923018a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9230194: cmp    %r11,%rax
  0x00007f8ab9230197: jbe    0x00007f8ab92301b0
  0x00007f8ab923019d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92301a7: cmp    %r11,%rax
  0x00007f8ab92301aa: jb     0x00007f8ab923024d
  0x00007f8ab92301b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92301ba: cmp    %r11,%rax
  0x00007f8ab92301bd: jbe    0x00007f8ab92301d6
  0x00007f8ab92301c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab92301cd: cmp    %r11,%rax
  0x00007f8ab92301d0: jb     0x00007f8ab923024d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab92301d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92301db: sub    $0x80,%rsp
  0x00007f8ab92301e2: mov    %rax,0x78(%rsp)
  0x00007f8ab92301e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab92301ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab92301f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92301f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92301fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9230200: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230205: mov    %r8,0x38(%rsp)
  0x00007f8ab923020a: mov    %r9,0x30(%rsp)
  0x00007f8ab923020f: mov    %r10,0x28(%rsp)
  0x00007f8ab9230214: mov    %r11,0x20(%rsp)
  0x00007f8ab9230219: mov    %r12,0x18(%rsp)
  0x00007f8ab923021e: mov    %r13,0x10(%rsp)
  0x00007f8ab9230223: mov    %r14,0x8(%rsp)
  0x00007f8ab9230228: mov    %r15,(%rsp)
  0x00007f8ab923022c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9230236: movabs $0x7f8ab92301d6,%rsi
  0x00007f8ab9230240: mov    %rsp,%rdx
  0x00007f8ab9230243: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230247: callq  0x00007f8aceddb9fa
  0x00007f8ab923024c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923024d: mov    %rsp,%r11
  0x00007f8ab9230250: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230254: push   %rax
  0x00007f8ab9230255: mov    %r11,%rax
  0x00007f8ab9230258: mov    0x50(%rbx),%r11
  0x00007f8ab923025c: mov    0x30(%rax),%rsi
  0x00007f8ab9230260: mov    0x28(%rax),%rdx
  0x00007f8ab9230264: mov    0x18(%rax),%rcx
  0x00007f8ab9230268: mov    0x8(%rax),%r8
  0x00007f8ab923026c: mov    %rbx,0x258(%r15)
  0x00007f8ab9230273: mov    %rbx,%rax
  0x00007f8ab9230276: jmpq   *%r11
  0x00007f8ab9230279: mov    0x8(%rsi),%ebx
  0x00007f8ab923027c: shl    $0x3,%rbx
  0x00007f8ab9230280: cmp    0x10(%rax),%rbx
  0x00007f8ab9230284: mov    0x8(%rax),%rbx
  0x00007f8ab9230288: je     0x00007f8ab9230293
  0x00007f8ab923028e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9230293: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab923029b: je     0x00007f8ab9230396
  0x00007f8ab92302a1: jmpq   0x00007f8ab9105c40
  0x00007f8ab92302a6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92302ae: je     0x00007f8ab9230396
  0x00007f8ab92302b4: mov    %rsp,%r13
  0x00007f8ab92302b7: mov    (%rsp),%rax
  0x00007f8ab92302bb: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92302bf: pushfq 
  0x00007f8ab92302c0: sub    $0x8,%rsp
  0x00007f8ab92302c4: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92302c9: sub    $0x80,%rsp
  0x00007f8ab92302d0: mov    %rax,0x78(%rsp)
  0x00007f8ab92302d5: mov    %rcx,0x70(%rsp)
  0x00007f8ab92302da: mov    %rdx,0x68(%rsp)
  0x00007f8ab92302df: mov    %rbx,0x60(%rsp)
  0x00007f8ab92302e4: mov    %rbp,0x50(%rsp)
  0x00007f8ab92302e9: mov    %rsi,0x48(%rsp)
  0x00007f8ab92302ee: mov    %rdi,0x40(%rsp)
  0x00007f8ab92302f3: mov    %r8,0x38(%rsp)
  0x00007f8ab92302f8: mov    %r9,0x30(%rsp)
  0x00007f8ab92302fd: mov    %r10,0x28(%rsp)
  0x00007f8ab9230302: mov    %r11,0x20(%rsp)
  0x00007f8ab9230307: mov    %r12,0x18(%rsp)
  0x00007f8ab923030c: mov    %r13,0x10(%rsp)
  0x00007f8ab9230311: mov    %r14,0x8(%rsp)
  0x00007f8ab9230316: mov    %r15,(%rsp)
  0x00007f8ab923031a: sub    $0x200,%rsp
  0x00007f8ab9230321: fxsave64 (%rsp)
  0x00007f8ab9230326: mov    %rbx,%rdi
  0x00007f8ab9230329: mov    %rax,%rsi
  0x00007f8ab923032c: callq  0x00007f8acef8bbca
  0x00007f8ab9230331: fxrstor64 (%rsp)
  0x00007f8ab9230336: add    $0x200,%rsp
  0x00007f8ab923033d: mov    (%rsp),%r15
  0x00007f8ab9230341: mov    0x8(%rsp),%r14
  0x00007f8ab9230346: mov    0x10(%rsp),%r13
  0x00007f8ab923034b: mov    0x18(%rsp),%r12
  0x00007f8ab9230350: mov    0x20(%rsp),%r11
  0x00007f8ab9230355: mov    0x28(%rsp),%r10
  0x00007f8ab923035a: mov    0x30(%rsp),%r9
  0x00007f8ab923035f: mov    0x38(%rsp),%r8
  0x00007f8ab9230364: mov    0x40(%rsp),%rdi
  0x00007f8ab9230369: mov    0x48(%rsp),%rsi
  0x00007f8ab923036e: mov    0x50(%rsp),%rbp
  0x00007f8ab9230373: mov    0x60(%rsp),%rbx
  0x00007f8ab9230378: mov    0x68(%rsp),%rdx
  0x00007f8ab923037d: mov    0x70(%rsp),%rcx
  0x00007f8ab9230382: mov    0x78(%rsp),%rax
  0x00007f8ab9230387: add    $0x80,%rsp
  0x00007f8ab923038e: add    $0x8,%rsp
  0x00007f8ab9230392: popfq  
  0x00007f8ab9230393: mov    %r13,%rsp
  0x00007f8ab9230396: pop    %rax
  0x00007f8ab9230397: mov    %rsp,%r13
  0x00007f8ab923039a: sub    $0x40,%rsp
  0x00007f8ab923039e: mov    %rax,(%rsp)
  0x00007f8ab92303a2: mov    %rsi,0x30(%rsp)
  0x00007f8ab92303a7: mov    %rdx,0x28(%rsp)
  0x00007f8ab92303ac: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92303b6: mov    %rax,0x20(%rsp)
  0x00007f8ab92303bb: mov    %rcx,0x18(%rsp)
  0x00007f8ab92303c0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92303ca: mov    %rax,0x10(%rsp)
  0x00007f8ab92303cf: mov    %r8,0x8(%rsp)
  0x00007f8ab92303d4: mov    0x40(%rbx),%rcx
  0x00007f8ab92303d8: jmpq   *%rcx

AHE@0x00007f8ac812f6a0: 0xbbebea00 i2c: 0x00007f8ab92304a0 c2i: 0x00007f8ab92305e6 c2iUV: 0x00007f8ab92305b9
i2c argument handler #128 for: receiver (JJI)Z (634 bytes generated)
c2i argument handler starts at 0x7f8ab92305e6
  0x00007f8ab92304a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92304a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92304ae: cmp    %r11,%rax
  0x00007f8ab92304b1: jbe    0x00007f8ab92304ca
  0x00007f8ab92304b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab92304c1: cmp    %r11,%rax
  0x00007f8ab92304c4: jb     0x00007f8ab923058d
  0x00007f8ab92304ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab92304d4: cmp    %r11,%rax
  0x00007f8ab92304d7: jbe    0x00007f8ab92304f0
  0x00007f8ab92304dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92304e7: cmp    %r11,%rax
  0x00007f8ab92304ea: jb     0x00007f8ab923058d
  0x00007f8ab92304f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92304fa: cmp    %r11,%rax
  0x00007f8ab92304fd: jbe    0x00007f8ab9230516
  0x00007f8ab9230503: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923050d: cmp    %r11,%rax
  0x00007f8ab9230510: jb     0x00007f8ab923058d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9230516: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923051b: sub    $0x80,%rsp
  0x00007f8ab9230522: mov    %rax,0x78(%rsp)
  0x00007f8ab9230527: mov    %rcx,0x70(%rsp)
  0x00007f8ab923052c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9230531: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230536: mov    %rbp,0x50(%rsp)
  0x00007f8ab923053b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9230540: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230545: mov    %r8,0x38(%rsp)
  0x00007f8ab923054a: mov    %r9,0x30(%rsp)
  0x00007f8ab923054f: mov    %r10,0x28(%rsp)
  0x00007f8ab9230554: mov    %r11,0x20(%rsp)
  0x00007f8ab9230559: mov    %r12,0x18(%rsp)
  0x00007f8ab923055e: mov    %r13,0x10(%rsp)
  0x00007f8ab9230563: mov    %r14,0x8(%rsp)
  0x00007f8ab9230568: mov    %r15,(%rsp)
  0x00007f8ab923056c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9230576: movabs $0x7f8ab9230516,%rsi
  0x00007f8ab9230580: mov    %rsp,%rdx
  0x00007f8ab9230583: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230587: callq  0x00007f8aceddb9fa
  0x00007f8ab923058c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923058d: mov    %rsp,%r11
  0x00007f8ab9230590: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230594: push   %rax
  0x00007f8ab9230595: mov    %r11,%rax
  0x00007f8ab9230598: mov    0x50(%rbx),%r11
  0x00007f8ab923059c: mov    0x30(%rax),%rsi
  0x00007f8ab92305a0: mov    0x20(%rax),%rdx
  0x00007f8ab92305a4: mov    0x10(%rax),%rcx
  0x00007f8ab92305a8: mov    0x8(%rax),%r8d
  0x00007f8ab92305ac: mov    %rbx,0x258(%r15)
  0x00007f8ab92305b3: mov    %rbx,%rax
  0x00007f8ab92305b6: jmpq   *%r11
  0x00007f8ab92305b9: mov    0x8(%rsi),%ebx
  0x00007f8ab92305bc: shl    $0x3,%rbx
  0x00007f8ab92305c0: cmp    0x10(%rax),%rbx
  0x00007f8ab92305c4: mov    0x8(%rax),%rbx
  0x00007f8ab92305c8: je     0x00007f8ab92305d3
  0x00007f8ab92305ce: jmpq   0x00007f8ab9105c40
  0x00007f8ab92305d3: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92305db: je     0x00007f8ab92306d6
  0x00007f8ab92305e1: jmpq   0x00007f8ab9105c40
  0x00007f8ab92305e6: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92305ee: je     0x00007f8ab92306d6
  0x00007f8ab92305f4: mov    %rsp,%r13
  0x00007f8ab92305f7: mov    (%rsp),%rax
  0x00007f8ab92305fb: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92305ff: pushfq 
  0x00007f8ab9230600: sub    $0x8,%rsp
  0x00007f8ab9230604: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9230609: sub    $0x80,%rsp
  0x00007f8ab9230610: mov    %rax,0x78(%rsp)
  0x00007f8ab9230615: mov    %rcx,0x70(%rsp)
  0x00007f8ab923061a: mov    %rdx,0x68(%rsp)
  0x00007f8ab923061f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230624: mov    %rbp,0x50(%rsp)
  0x00007f8ab9230629: mov    %rsi,0x48(%rsp)
  0x00007f8ab923062e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230633: mov    %r8,0x38(%rsp)
  0x00007f8ab9230638: mov    %r9,0x30(%rsp)
  0x00007f8ab923063d: mov    %r10,0x28(%rsp)
  0x00007f8ab9230642: mov    %r11,0x20(%rsp)
  0x00007f8ab9230647: mov    %r12,0x18(%rsp)
  0x00007f8ab923064c: mov    %r13,0x10(%rsp)
  0x00007f8ab9230651: mov    %r14,0x8(%rsp)
  0x00007f8ab9230656: mov    %r15,(%rsp)
  0x00007f8ab923065a: sub    $0x200,%rsp
  0x00007f8ab9230661: fxsave64 (%rsp)
  0x00007f8ab9230666: mov    %rbx,%rdi
  0x00007f8ab9230669: mov    %rax,%rsi
  0x00007f8ab923066c: callq  0x00007f8acef8bbca
  0x00007f8ab9230671: fxrstor64 (%rsp)
  0x00007f8ab9230676: add    $0x200,%rsp
  0x00007f8ab923067d: mov    (%rsp),%r15
  0x00007f8ab9230681: mov    0x8(%rsp),%r14
  0x00007f8ab9230686: mov    0x10(%rsp),%r13
  0x00007f8ab923068b: mov    0x18(%rsp),%r12
  0x00007f8ab9230690: mov    0x20(%rsp),%r11
  0x00007f8ab9230695: mov    0x28(%rsp),%r10
  0x00007f8ab923069a: mov    0x30(%rsp),%r9
  0x00007f8ab923069f: mov    0x38(%rsp),%r8
  0x00007f8ab92306a4: mov    0x40(%rsp),%rdi
  0x00007f8ab92306a9: mov    0x48(%rsp),%rsi
  0x00007f8ab92306ae: mov    0x50(%rsp),%rbp
  0x00007f8ab92306b3: mov    0x60(%rsp),%rbx
  0x00007f8ab92306b8: mov    0x68(%rsp),%rdx
  0x00007f8ab92306bd: mov    0x70(%rsp),%rcx
  0x00007f8ab92306c2: mov    0x78(%rsp),%rax
  0x00007f8ab92306c7: add    $0x80,%rsp
  0x00007f8ab92306ce: add    $0x8,%rsp
  0x00007f8ab92306d2: popfq  
  0x00007f8ab92306d3: mov    %r13,%rsp
  0x00007f8ab92306d6: pop    %rax
  0x00007f8ab92306d7: mov    %rsp,%r13
  0x00007f8ab92306da: sub    $0x40,%rsp
  0x00007f8ab92306de: mov    %rax,(%rsp)
  0x00007f8ab92306e2: mov    %rsi,0x30(%rsp)
  0x00007f8ab92306e7: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92306f1: mov    %rax,0x28(%rsp)
  0x00007f8ab92306f6: mov    %rdx,0x20(%rsp)
  0x00007f8ab92306fb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9230705: mov    %rax,0x18(%rsp)
  0x00007f8ab923070a: mov    %rcx,0x10(%rsp)
  0x00007f8ab923070f: mov    %r8d,0x8(%rsp)
  0x00007f8ab9230714: mov    0x40(%rbx),%rcx
  0x00007f8ab9230718: jmpq   *%rcx

AHE@0x00007f8ac812f6e8: 0xbbe7e000 i2c: 0x00007f8ab92307e0 c2i: 0x00007f8ab9230923 c2iUV: 0x00007f8ab92308f6
i2c argument handler #129 for: receiver (JD)Ljava/nio/ByteBuffer; (627 bytes generated)
c2i argument handler starts at 0x7f8ab9230923
  0x00007f8ab92307e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92307e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92307ee: cmp    %r11,%rax
  0x00007f8ab92307f1: jbe    0x00007f8ab923080a
  0x00007f8ab92307f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9230801: cmp    %r11,%rax
  0x00007f8ab9230804: jb     0x00007f8ab92308cd
  0x00007f8ab923080a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9230814: cmp    %r11,%rax
  0x00007f8ab9230817: jbe    0x00007f8ab9230830
  0x00007f8ab923081d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9230827: cmp    %r11,%rax
  0x00007f8ab923082a: jb     0x00007f8ab92308cd
  0x00007f8ab9230830: movabs $0x7f8ab9140820,%r11
  0x00007f8ab923083a: cmp    %r11,%rax
  0x00007f8ab923083d: jbe    0x00007f8ab9230856
  0x00007f8ab9230843: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923084d: cmp    %r11,%rax
  0x00007f8ab9230850: jb     0x00007f8ab92308cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9230856: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923085b: sub    $0x80,%rsp
  0x00007f8ab9230862: mov    %rax,0x78(%rsp)
  0x00007f8ab9230867: mov    %rcx,0x70(%rsp)
  0x00007f8ab923086c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9230871: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230876: mov    %rbp,0x50(%rsp)
  0x00007f8ab923087b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9230880: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230885: mov    %r8,0x38(%rsp)
  0x00007f8ab923088a: mov    %r9,0x30(%rsp)
  0x00007f8ab923088f: mov    %r10,0x28(%rsp)
  0x00007f8ab9230894: mov    %r11,0x20(%rsp)
  0x00007f8ab9230899: mov    %r12,0x18(%rsp)
  0x00007f8ab923089e: mov    %r13,0x10(%rsp)
  0x00007f8ab92308a3: mov    %r14,0x8(%rsp)
  0x00007f8ab92308a8: mov    %r15,(%rsp)
  0x00007f8ab92308ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab92308b6: movabs $0x7f8ab9230856,%rsi
  0x00007f8ab92308c0: mov    %rsp,%rdx
  0x00007f8ab92308c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92308c7: callq  0x00007f8aceddb9fa
  0x00007f8ab92308cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab92308cd: mov    %rsp,%r11
  0x00007f8ab92308d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92308d4: push   %rax
  0x00007f8ab92308d5: mov    %r11,%rax
  0x00007f8ab92308d8: mov    0x50(%rbx),%r11
  0x00007f8ab92308dc: mov    0x28(%rax),%rsi
  0x00007f8ab92308e0: mov    0x18(%rax),%rdx
  0x00007f8ab92308e4: vmovsd 0x8(%rax),%xmm0
  0x00007f8ab92308e9: mov    %rbx,0x258(%r15)
  0x00007f8ab92308f0: mov    %rbx,%rax
  0x00007f8ab92308f3: jmpq   *%r11
  0x00007f8ab92308f6: mov    0x8(%rsi),%ebx
  0x00007f8ab92308f9: shl    $0x3,%rbx
  0x00007f8ab92308fd: cmp    0x10(%rax),%rbx
  0x00007f8ab9230901: mov    0x8(%rax),%rbx
  0x00007f8ab9230905: je     0x00007f8ab9230910
  0x00007f8ab923090b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9230910: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9230918: je     0x00007f8ab9230a13
  0x00007f8ab923091e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9230923: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab923092b: je     0x00007f8ab9230a13
  0x00007f8ab9230931: mov    %rsp,%r13
  0x00007f8ab9230934: mov    (%rsp),%rax
  0x00007f8ab9230938: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab923093c: pushfq 
  0x00007f8ab923093d: sub    $0x8,%rsp
  0x00007f8ab9230941: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9230946: sub    $0x80,%rsp
  0x00007f8ab923094d: mov    %rax,0x78(%rsp)
  0x00007f8ab9230952: mov    %rcx,0x70(%rsp)
  0x00007f8ab9230957: mov    %rdx,0x68(%rsp)
  0x00007f8ab923095c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230961: mov    %rbp,0x50(%rsp)
  0x00007f8ab9230966: mov    %rsi,0x48(%rsp)
  0x00007f8ab923096b: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230970: mov    %r8,0x38(%rsp)
  0x00007f8ab9230975: mov    %r9,0x30(%rsp)
  0x00007f8ab923097a: mov    %r10,0x28(%rsp)
  0x00007f8ab923097f: mov    %r11,0x20(%rsp)
  0x00007f8ab9230984: mov    %r12,0x18(%rsp)
  0x00007f8ab9230989: mov    %r13,0x10(%rsp)
  0x00007f8ab923098e: mov    %r14,0x8(%rsp)
  0x00007f8ab9230993: mov    %r15,(%rsp)
  0x00007f8ab9230997: sub    $0x200,%rsp
  0x00007f8ab923099e: fxsave64 (%rsp)
  0x00007f8ab92309a3: mov    %rbx,%rdi
  0x00007f8ab92309a6: mov    %rax,%rsi
  0x00007f8ab92309a9: callq  0x00007f8acef8bbca
  0x00007f8ab92309ae: fxrstor64 (%rsp)
  0x00007f8ab92309b3: add    $0x200,%rsp
  0x00007f8ab92309ba: mov    (%rsp),%r15
  0x00007f8ab92309be: mov    0x8(%rsp),%r14
  0x00007f8ab92309c3: mov    0x10(%rsp),%r13
  0x00007f8ab92309c8: mov    0x18(%rsp),%r12
  0x00007f8ab92309cd: mov    0x20(%rsp),%r11
  0x00007f8ab92309d2: mov    0x28(%rsp),%r10
  0x00007f8ab92309d7: mov    0x30(%rsp),%r9
  0x00007f8ab92309dc: mov    0x38(%rsp),%r8
  0x00007f8ab92309e1: mov    0x40(%rsp),%rdi
  0x00007f8ab92309e6: mov    0x48(%rsp),%rsi
  0x00007f8ab92309eb: mov    0x50(%rsp),%rbp
  0x00007f8ab92309f0: mov    0x60(%rsp),%rbx
  0x00007f8ab92309f5: mov    0x68(%rsp),%rdx
  0x00007f8ab92309fa: mov    0x70(%rsp),%rcx
  0x00007f8ab92309ff: mov    0x78(%rsp),%rax
  0x00007f8ab9230a04: add    $0x80,%rsp
  0x00007f8ab9230a0b: add    $0x8,%rsp
  0x00007f8ab9230a0f: popfq  
  0x00007f8ab9230a10: mov    %r13,%rsp
  0x00007f8ab9230a13: pop    %rax
  0x00007f8ab9230a14: mov    %rsp,%r13
  0x00007f8ab9230a17: sub    $0x30,%rsp
  0x00007f8ab9230a1b: mov    %rax,(%rsp)
  0x00007f8ab9230a1f: mov    %rsi,0x28(%rsp)
  0x00007f8ab9230a24: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9230a2e: mov    %rax,0x20(%rsp)
  0x00007f8ab9230a33: mov    %rdx,0x18(%rsp)
  0x00007f8ab9230a38: movabs $0xdeadffffdeadaaac,%rax
  0x00007f8ab9230a42: mov    %rax,0x10(%rsp)
  0x00007f8ab9230a47: vmovsd %xmm0,0x8(%rsp)
  0x00007f8ab9230a4d: mov    0x40(%rbx),%rcx
  0x00007f8ab9230a51: jmpq   *%rcx

AHE@0x00007f8ac812f730: 0xbbe60000 i2c: 0x00007f8ab9230b20 c2i: 0x00007f8ab9230c63 c2iUV: 0x00007f8ab9230c36
i2c argument handler #130 for: receiver (JF)Ljava/nio/ByteBuffer; (612 bytes generated)
c2i argument handler starts at 0x7f8ab9230c63
  0x00007f8ab9230b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9230b24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9230b2e: cmp    %r11,%rax
  0x00007f8ab9230b31: jbe    0x00007f8ab9230b4a
  0x00007f8ab9230b37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9230b41: cmp    %r11,%rax
  0x00007f8ab9230b44: jb     0x00007f8ab9230c0d
  0x00007f8ab9230b4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9230b54: cmp    %r11,%rax
  0x00007f8ab9230b57: jbe    0x00007f8ab9230b70
  0x00007f8ab9230b5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9230b67: cmp    %r11,%rax
  0x00007f8ab9230b6a: jb     0x00007f8ab9230c0d
  0x00007f8ab9230b70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9230b7a: cmp    %r11,%rax
  0x00007f8ab9230b7d: jbe    0x00007f8ab9230b96
  0x00007f8ab9230b83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9230b8d: cmp    %r11,%rax
  0x00007f8ab9230b90: jb     0x00007f8ab9230c0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9230b96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9230b9b: sub    $0x80,%rsp
  0x00007f8ab9230ba2: mov    %rax,0x78(%rsp)
  0x00007f8ab9230ba7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9230bac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9230bb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230bb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9230bbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9230bc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230bc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9230bca: mov    %r9,0x30(%rsp)
  0x00007f8ab9230bcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9230bd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9230bd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9230bde: mov    %r13,0x10(%rsp)
  0x00007f8ab9230be3: mov    %r14,0x8(%rsp)
  0x00007f8ab9230be8: mov    %r15,(%rsp)
  0x00007f8ab9230bec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9230bf6: movabs $0x7f8ab9230b96,%rsi
  0x00007f8ab9230c00: mov    %rsp,%rdx
  0x00007f8ab9230c03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230c07: callq  0x00007f8aceddb9fa
  0x00007f8ab9230c0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9230c0d: mov    %rsp,%r11
  0x00007f8ab9230c10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230c14: push   %rax
  0x00007f8ab9230c15: mov    %r11,%rax
  0x00007f8ab9230c18: mov    0x50(%rbx),%r11
  0x00007f8ab9230c1c: mov    0x20(%rax),%rsi
  0x00007f8ab9230c20: mov    0x10(%rax),%rdx
  0x00007f8ab9230c24: vmovss 0x8(%rax),%xmm0
  0x00007f8ab9230c29: mov    %rbx,0x258(%r15)
  0x00007f8ab9230c30: mov    %rbx,%rax
  0x00007f8ab9230c33: jmpq   *%r11
  0x00007f8ab9230c36: mov    0x8(%rsi),%ebx
  0x00007f8ab9230c39: shl    $0x3,%rbx
  0x00007f8ab9230c3d: cmp    0x10(%rax),%rbx
  0x00007f8ab9230c41: mov    0x8(%rax),%rbx
  0x00007f8ab9230c45: je     0x00007f8ab9230c50
  0x00007f8ab9230c4b: jmpq   0x00007f8ab9105c40
  0x00007f8ab9230c50: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9230c58: je     0x00007f8ab9230d53
  0x00007f8ab9230c5e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9230c63: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9230c6b: je     0x00007f8ab9230d53
  0x00007f8ab9230c71: mov    %rsp,%r13
  0x00007f8ab9230c74: mov    (%rsp),%rax
  0x00007f8ab9230c78: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230c7c: pushfq 
  0x00007f8ab9230c7d: sub    $0x8,%rsp
  0x00007f8ab9230c81: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9230c86: sub    $0x80,%rsp
  0x00007f8ab9230c8d: mov    %rax,0x78(%rsp)
  0x00007f8ab9230c92: mov    %rcx,0x70(%rsp)
  0x00007f8ab9230c97: mov    %rdx,0x68(%rsp)
  0x00007f8ab9230c9c: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230ca1: mov    %rbp,0x50(%rsp)
  0x00007f8ab9230ca6: mov    %rsi,0x48(%rsp)
  0x00007f8ab9230cab: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230cb0: mov    %r8,0x38(%rsp)
  0x00007f8ab9230cb5: mov    %r9,0x30(%rsp)
  0x00007f8ab9230cba: mov    %r10,0x28(%rsp)
  0x00007f8ab9230cbf: mov    %r11,0x20(%rsp)
  0x00007f8ab9230cc4: mov    %r12,0x18(%rsp)
  0x00007f8ab9230cc9: mov    %r13,0x10(%rsp)
  0x00007f8ab9230cce: mov    %r14,0x8(%rsp)
  0x00007f8ab9230cd3: mov    %r15,(%rsp)
  0x00007f8ab9230cd7: sub    $0x200,%rsp
  0x00007f8ab9230cde: fxsave64 (%rsp)
  0x00007f8ab9230ce3: mov    %rbx,%rdi
  0x00007f8ab9230ce6: mov    %rax,%rsi
  0x00007f8ab9230ce9: callq  0x00007f8acef8bbca
  0x00007f8ab9230cee: fxrstor64 (%rsp)
  0x00007f8ab9230cf3: add    $0x200,%rsp
  0x00007f8ab9230cfa: mov    (%rsp),%r15
  0x00007f8ab9230cfe: mov    0x8(%rsp),%r14
  0x00007f8ab9230d03: mov    0x10(%rsp),%r13
  0x00007f8ab9230d08: mov    0x18(%rsp),%r12
  0x00007f8ab9230d0d: mov    0x20(%rsp),%r11
  0x00007f8ab9230d12: mov    0x28(%rsp),%r10
  0x00007f8ab9230d17: mov    0x30(%rsp),%r9
  0x00007f8ab9230d1c: mov    0x38(%rsp),%r8
  0x00007f8ab9230d21: mov    0x40(%rsp),%rdi
  0x00007f8ab9230d26: mov    0x48(%rsp),%rsi
  0x00007f8ab9230d2b: mov    0x50(%rsp),%rbp
  0x00007f8ab9230d30: mov    0x60(%rsp),%rbx
  0x00007f8ab9230d35: mov    0x68(%rsp),%rdx
  0x00007f8ab9230d3a: mov    0x70(%rsp),%rcx
  0x00007f8ab9230d3f: mov    0x78(%rsp),%rax
  0x00007f8ab9230d44: add    $0x80,%rsp
  0x00007f8ab9230d4b: add    $0x8,%rsp
  0x00007f8ab9230d4f: popfq  
  0x00007f8ab9230d50: mov    %r13,%rsp
  0x00007f8ab9230d53: pop    %rax
  0x00007f8ab9230d54: mov    %rsp,%r13
  0x00007f8ab9230d57: sub    $0x30,%rsp
  0x00007f8ab9230d5b: mov    %rax,(%rsp)
  0x00007f8ab9230d5f: mov    %rsi,0x20(%rsp)
  0x00007f8ab9230d64: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9230d6e: mov    %rax,0x18(%rsp)
  0x00007f8ab9230d73: mov    %rdx,0x10(%rsp)
  0x00007f8ab9230d78: vmovss %xmm0,0x8(%rsp)
  0x00007f8ab9230d7e: mov    0x40(%rbx),%rcx
  0x00007f8ab9230d82: jmpq   *%rcx

AHE@0x00007f8ac812f778: 0xbabebb00 i2c: 0x00007f8ab9230e60 c2i: 0x00007f8ab9230fa9 c2iUV: 0x00007f8ab9230f7c
i2c argument handler #131 for: receiver (IJLjava/io/FileDescriptor;Ljava/lang/Runnable;)V (626 bytes generated)
c2i argument handler starts at 0x7f8ab9230fa9
  0x00007f8ab9230e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9230e64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9230e6e: cmp    %r11,%rax
  0x00007f8ab9230e71: jbe    0x00007f8ab9230e8a
  0x00007f8ab9230e77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9230e81: cmp    %r11,%rax
  0x00007f8ab9230e84: jb     0x00007f8ab9230f4d
  0x00007f8ab9230e8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9230e94: cmp    %r11,%rax
  0x00007f8ab9230e97: jbe    0x00007f8ab9230eb0
  0x00007f8ab9230e9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9230ea7: cmp    %r11,%rax
  0x00007f8ab9230eaa: jb     0x00007f8ab9230f4d
  0x00007f8ab9230eb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9230eba: cmp    %r11,%rax
  0x00007f8ab9230ebd: jbe    0x00007f8ab9230ed6
  0x00007f8ab9230ec3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9230ecd: cmp    %r11,%rax
  0x00007f8ab9230ed0: jb     0x00007f8ab9230f4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9230ed6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9230edb: sub    $0x80,%rsp
  0x00007f8ab9230ee2: mov    %rax,0x78(%rsp)
  0x00007f8ab9230ee7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9230eec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9230ef1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230ef6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9230efb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9230f00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230f05: mov    %r8,0x38(%rsp)
  0x00007f8ab9230f0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9230f0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9230f14: mov    %r11,0x20(%rsp)
  0x00007f8ab9230f19: mov    %r12,0x18(%rsp)
  0x00007f8ab9230f1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9230f23: mov    %r14,0x8(%rsp)
  0x00007f8ab9230f28: mov    %r15,(%rsp)
  0x00007f8ab9230f2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9230f36: movabs $0x7f8ab9230ed6,%rsi
  0x00007f8ab9230f40: mov    %rsp,%rdx
  0x00007f8ab9230f43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230f47: callq  0x00007f8aceddb9fa
  0x00007f8ab9230f4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9230f4d: mov    %rsp,%r11
  0x00007f8ab9230f50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230f54: push   %rax
  0x00007f8ab9230f55: mov    %r11,%rax
  0x00007f8ab9230f58: mov    0x50(%rbx),%r11
  0x00007f8ab9230f5c: mov    0x30(%rax),%rsi
  0x00007f8ab9230f60: mov    0x28(%rax),%edx
  0x00007f8ab9230f63: mov    0x18(%rax),%rcx
  0x00007f8ab9230f67: mov    0x10(%rax),%r8
  0x00007f8ab9230f6b: mov    0x8(%rax),%r9
  0x00007f8ab9230f6f: mov    %rbx,0x258(%r15)
  0x00007f8ab9230f76: mov    %rbx,%rax
  0x00007f8ab9230f79: jmpq   *%r11
  0x00007f8ab9230f7c: mov    0x8(%rsi),%ebx
  0x00007f8ab9230f7f: shl    $0x3,%rbx
  0x00007f8ab9230f83: cmp    0x10(%rax),%rbx
  0x00007f8ab9230f87: mov    0x8(%rax),%rbx
  0x00007f8ab9230f8b: je     0x00007f8ab9230f96
  0x00007f8ab9230f91: jmpq   0x00007f8ab9105c40
  0x00007f8ab9230f96: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9230f9e: je     0x00007f8ab9231099
  0x00007f8ab9230fa4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9230fa9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9230fb1: je     0x00007f8ab9231099
  0x00007f8ab9230fb7: mov    %rsp,%r13
  0x00007f8ab9230fba: mov    (%rsp),%rax
  0x00007f8ab9230fbe: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9230fc2: pushfq 
  0x00007f8ab9230fc3: sub    $0x8,%rsp
  0x00007f8ab9230fc7: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9230fcc: sub    $0x80,%rsp
  0x00007f8ab9230fd3: mov    %rax,0x78(%rsp)
  0x00007f8ab9230fd8: mov    %rcx,0x70(%rsp)
  0x00007f8ab9230fdd: mov    %rdx,0x68(%rsp)
  0x00007f8ab9230fe2: mov    %rbx,0x60(%rsp)
  0x00007f8ab9230fe7: mov    %rbp,0x50(%rsp)
  0x00007f8ab9230fec: mov    %rsi,0x48(%rsp)
  0x00007f8ab9230ff1: mov    %rdi,0x40(%rsp)
  0x00007f8ab9230ff6: mov    %r8,0x38(%rsp)
  0x00007f8ab9230ffb: mov    %r9,0x30(%rsp)
  0x00007f8ab9231000: mov    %r10,0x28(%rsp)
  0x00007f8ab9231005: mov    %r11,0x20(%rsp)
  0x00007f8ab923100a: mov    %r12,0x18(%rsp)
  0x00007f8ab923100f: mov    %r13,0x10(%rsp)
  0x00007f8ab9231014: mov    %r14,0x8(%rsp)
  0x00007f8ab9231019: mov    %r15,(%rsp)
  0x00007f8ab923101d: sub    $0x200,%rsp
  0x00007f8ab9231024: fxsave64 (%rsp)
  0x00007f8ab9231029: mov    %rbx,%rdi
  0x00007f8ab923102c: mov    %rax,%rsi
  0x00007f8ab923102f: callq  0x00007f8acef8bbca
  0x00007f8ab9231034: fxrstor64 (%rsp)
  0x00007f8ab9231039: add    $0x200,%rsp
  0x00007f8ab9231040: mov    (%rsp),%r15
  0x00007f8ab9231044: mov    0x8(%rsp),%r14
  0x00007f8ab9231049: mov    0x10(%rsp),%r13
  0x00007f8ab923104e: mov    0x18(%rsp),%r12
  0x00007f8ab9231053: mov    0x20(%rsp),%r11
  0x00007f8ab9231058: mov    0x28(%rsp),%r10
  0x00007f8ab923105d: mov    0x30(%rsp),%r9
  0x00007f8ab9231062: mov    0x38(%rsp),%r8
  0x00007f8ab9231067: mov    0x40(%rsp),%rdi
  0x00007f8ab923106c: mov    0x48(%rsp),%rsi
  0x00007f8ab9231071: mov    0x50(%rsp),%rbp
  0x00007f8ab9231076: mov    0x60(%rsp),%rbx
  0x00007f8ab923107b: mov    0x68(%rsp),%rdx
  0x00007f8ab9231080: mov    0x70(%rsp),%rcx
  0x00007f8ab9231085: mov    0x78(%rsp),%rax
  0x00007f8ab923108a: add    $0x80,%rsp
  0x00007f8ab9231091: add    $0x8,%rsp
  0x00007f8ab9231095: popfq  
  0x00007f8ab9231096: mov    %r13,%rsp
  0x00007f8ab9231099: pop    %rax
  0x00007f8ab923109a: mov    %rsp,%r13
  0x00007f8ab923109d: sub    $0x40,%rsp
  0x00007f8ab92310a1: mov    %rax,(%rsp)
  0x00007f8ab92310a5: mov    %rsi,0x30(%rsp)
  0x00007f8ab92310aa: mov    %edx,0x28(%rsp)
  0x00007f8ab92310ae: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92310b8: mov    %rax,0x20(%rsp)
  0x00007f8ab92310bd: mov    %rcx,0x18(%rsp)
  0x00007f8ab92310c2: mov    %r8,0x10(%rsp)
  0x00007f8ab92310c7: mov    %r9,0x8(%rsp)
  0x00007f8ab92310cc: mov    0x40(%rbx),%rcx
  0x00007f8ab92310d0: jmpq   *%rcx

AHE@0x00007f8ac812f7c0: 0xbbebaa00 i2c: 0x00007f8ab9231520 c2i: 0x00007f8ab923166a c2iUV: 0x00007f8ab923163d
i2c argument handler #132 for: receiver (J[BII)I (628 bytes generated)
c2i argument handler starts at 0x7f8ab923166a
  0x00007f8ab9231520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9231524: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab923152e: cmp    %r11,%rax
  0x00007f8ab9231531: jbe    0x00007f8ab923154a
  0x00007f8ab9231537: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9231541: cmp    %r11,%rax
  0x00007f8ab9231544: jb     0x00007f8ab923160d
  0x00007f8ab923154a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9231554: cmp    %r11,%rax
  0x00007f8ab9231557: jbe    0x00007f8ab9231570
  0x00007f8ab923155d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9231567: cmp    %r11,%rax
  0x00007f8ab923156a: jb     0x00007f8ab923160d
  0x00007f8ab9231570: movabs $0x7f8ab9140820,%r11
  0x00007f8ab923157a: cmp    %r11,%rax
  0x00007f8ab923157d: jbe    0x00007f8ab9231596
  0x00007f8ab9231583: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923158d: cmp    %r11,%rax
  0x00007f8ab9231590: jb     0x00007f8ab923160d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9231596: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923159b: sub    $0x80,%rsp
  0x00007f8ab92315a2: mov    %rax,0x78(%rsp)
  0x00007f8ab92315a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab92315ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab92315b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92315b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92315bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab92315c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab92315c5: mov    %r8,0x38(%rsp)
  0x00007f8ab92315ca: mov    %r9,0x30(%rsp)
  0x00007f8ab92315cf: mov    %r10,0x28(%rsp)
  0x00007f8ab92315d4: mov    %r11,0x20(%rsp)
  0x00007f8ab92315d9: mov    %r12,0x18(%rsp)
  0x00007f8ab92315de: mov    %r13,0x10(%rsp)
  0x00007f8ab92315e3: mov    %r14,0x8(%rsp)
  0x00007f8ab92315e8: mov    %r15,(%rsp)
  0x00007f8ab92315ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab92315f6: movabs $0x7f8ab9231596,%rsi
  0x00007f8ab9231600: mov    %rsp,%rdx
  0x00007f8ab9231603: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9231607: callq  0x00007f8aceddb9fa
  0x00007f8ab923160c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923160d: mov    %rsp,%r11
  0x00007f8ab9231610: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9231614: push   %rax
  0x00007f8ab9231615: mov    %r11,%rax
  0x00007f8ab9231618: mov    0x50(%rbx),%r11
  0x00007f8ab923161c: mov    0x30(%rax),%rsi
  0x00007f8ab9231620: mov    0x20(%rax),%rdx
  0x00007f8ab9231624: mov    0x18(%rax),%rcx
  0x00007f8ab9231628: mov    0x10(%rax),%r8d
  0x00007f8ab923162c: mov    0x8(%rax),%r9d
  0x00007f8ab9231630: mov    %rbx,0x258(%r15)
  0x00007f8ab9231637: mov    %rbx,%rax
  0x00007f8ab923163a: jmpq   *%r11
  0x00007f8ab923163d: mov    0x8(%rsi),%ebx
  0x00007f8ab9231640: shl    $0x3,%rbx
  0x00007f8ab9231644: cmp    0x10(%rax),%rbx
  0x00007f8ab9231648: mov    0x8(%rax),%rbx
  0x00007f8ab923164c: je     0x00007f8ab9231657
  0x00007f8ab9231652: jmpq   0x00007f8ab9105c40
  0x00007f8ab9231657: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab923165f: je     0x00007f8ab923175a
  0x00007f8ab9231665: jmpq   0x00007f8ab9105c40
  0x00007f8ab923166a: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9231672: je     0x00007f8ab923175a
  0x00007f8ab9231678: mov    %rsp,%r13
  0x00007f8ab923167b: mov    (%rsp),%rax
  0x00007f8ab923167f: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9231683: pushfq 
  0x00007f8ab9231684: sub    $0x8,%rsp
  0x00007f8ab9231688: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923168d: sub    $0x80,%rsp
  0x00007f8ab9231694: mov    %rax,0x78(%rsp)
  0x00007f8ab9231699: mov    %rcx,0x70(%rsp)
  0x00007f8ab923169e: mov    %rdx,0x68(%rsp)
  0x00007f8ab92316a3: mov    %rbx,0x60(%rsp)
  0x00007f8ab92316a8: mov    %rbp,0x50(%rsp)
  0x00007f8ab92316ad: mov    %rsi,0x48(%rsp)
  0x00007f8ab92316b2: mov    %rdi,0x40(%rsp)
  0x00007f8ab92316b7: mov    %r8,0x38(%rsp)
  0x00007f8ab92316bc: mov    %r9,0x30(%rsp)
  0x00007f8ab92316c1: mov    %r10,0x28(%rsp)
  0x00007f8ab92316c6: mov    %r11,0x20(%rsp)
  0x00007f8ab92316cb: mov    %r12,0x18(%rsp)
  0x00007f8ab92316d0: mov    %r13,0x10(%rsp)
  0x00007f8ab92316d5: mov    %r14,0x8(%rsp)
  0x00007f8ab92316da: mov    %r15,(%rsp)
  0x00007f8ab92316de: sub    $0x200,%rsp
  0x00007f8ab92316e5: fxsave64 (%rsp)
  0x00007f8ab92316ea: mov    %rbx,%rdi
  0x00007f8ab92316ed: mov    %rax,%rsi
  0x00007f8ab92316f0: callq  0x00007f8acef8bbca
  0x00007f8ab92316f5: fxrstor64 (%rsp)
  0x00007f8ab92316fa: add    $0x200,%rsp
  0x00007f8ab9231701: mov    (%rsp),%r15
  0x00007f8ab9231705: mov    0x8(%rsp),%r14
  0x00007f8ab923170a: mov    0x10(%rsp),%r13
  0x00007f8ab923170f: mov    0x18(%rsp),%r12
  0x00007f8ab9231714: mov    0x20(%rsp),%r11
  0x00007f8ab9231719: mov    0x28(%rsp),%r10
  0x00007f8ab923171e: mov    0x30(%rsp),%r9
  0x00007f8ab9231723: mov    0x38(%rsp),%r8
  0x00007f8ab9231728: mov    0x40(%rsp),%rdi
  0x00007f8ab923172d: mov    0x48(%rsp),%rsi
  0x00007f8ab9231732: mov    0x50(%rsp),%rbp
  0x00007f8ab9231737: mov    0x60(%rsp),%rbx
  0x00007f8ab923173c: mov    0x68(%rsp),%rdx
  0x00007f8ab9231741: mov    0x70(%rsp),%rcx
  0x00007f8ab9231746: mov    0x78(%rsp),%rax
  0x00007f8ab923174b: add    $0x80,%rsp
  0x00007f8ab9231752: add    $0x8,%rsp
  0x00007f8ab9231756: popfq  
  0x00007f8ab9231757: mov    %r13,%rsp
  0x00007f8ab923175a: pop    %rax
  0x00007f8ab923175b: mov    %rsp,%r13
  0x00007f8ab923175e: sub    $0x40,%rsp
  0x00007f8ab9231762: mov    %rax,(%rsp)
  0x00007f8ab9231766: mov    %rsi,0x30(%rsp)
  0x00007f8ab923176b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9231775: mov    %rax,0x28(%rsp)
  0x00007f8ab923177a: mov    %rdx,0x20(%rsp)
  0x00007f8ab923177f: mov    %rcx,0x18(%rsp)
  0x00007f8ab9231784: mov    %r8d,0x10(%rsp)
  0x00007f8ab9231789: mov    %r9d,0x8(%rsp)
  0x00007f8ab923178e: mov    0x40(%rbx),%rcx
  0x00007f8ab9231792: jmpq   *%rcx

AHE@0x00007f8ac812f808: 0xbebaa000 i2c: 0x00007f8ab9231860 c2i: 0x00007f8ab92319a5 c2iUV: 0x00007f8ab9231978
i2c argument handler #133 for: static (J[BII)V (617 bytes generated)
c2i argument handler starts at 0x7f8ab92319a5
  0x00007f8ab9231860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9231864: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab923186e: cmp    %r11,%rax
  0x00007f8ab9231871: jbe    0x00007f8ab923188a
  0x00007f8ab9231877: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9231881: cmp    %r11,%rax
  0x00007f8ab9231884: jb     0x00007f8ab923194d
  0x00007f8ab923188a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9231894: cmp    %r11,%rax
  0x00007f8ab9231897: jbe    0x00007f8ab92318b0
  0x00007f8ab923189d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92318a7: cmp    %r11,%rax
  0x00007f8ab92318aa: jb     0x00007f8ab923194d
  0x00007f8ab92318b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92318ba: cmp    %r11,%rax
  0x00007f8ab92318bd: jbe    0x00007f8ab92318d6
  0x00007f8ab92318c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab92318cd: cmp    %r11,%rax
  0x00007f8ab92318d0: jb     0x00007f8ab923194d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab92318d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92318db: sub    $0x80,%rsp
  0x00007f8ab92318e2: mov    %rax,0x78(%rsp)
  0x00007f8ab92318e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab92318ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab92318f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92318f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92318fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9231900: mov    %rdi,0x40(%rsp)
  0x00007f8ab9231905: mov    %r8,0x38(%rsp)
  0x00007f8ab923190a: mov    %r9,0x30(%rsp)
  0x00007f8ab923190f: mov    %r10,0x28(%rsp)
  0x00007f8ab9231914: mov    %r11,0x20(%rsp)
  0x00007f8ab9231919: mov    %r12,0x18(%rsp)
  0x00007f8ab923191e: mov    %r13,0x10(%rsp)
  0x00007f8ab9231923: mov    %r14,0x8(%rsp)
  0x00007f8ab9231928: mov    %r15,(%rsp)
  0x00007f8ab923192c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9231936: movabs $0x7f8ab92318d6,%rsi
  0x00007f8ab9231940: mov    %rsp,%rdx
  0x00007f8ab9231943: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9231947: callq  0x00007f8aceddb9fa
  0x00007f8ab923194c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923194d: mov    %rsp,%r11
  0x00007f8ab9231950: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9231954: push   %rax
  0x00007f8ab9231955: mov    %r11,%rax
  0x00007f8ab9231958: mov    0x50(%rbx),%r11
  0x00007f8ab923195c: mov    0x20(%rax),%rsi
  0x00007f8ab9231960: mov    0x18(%rax),%rdx
  0x00007f8ab9231964: mov    0x10(%rax),%ecx
  0x00007f8ab9231967: mov    0x8(%rax),%r8d
  0x00007f8ab923196b: mov    %rbx,0x258(%r15)
  0x00007f8ab9231972: mov    %rbx,%rax
  0x00007f8ab9231975: jmpq   *%r11
  0x00007f8ab9231978: mov    0x8(%rsi),%ebx
  0x00007f8ab923197b: shl    $0x3,%rbx
  0x00007f8ab923197f: cmp    0x10(%rax),%rbx
  0x00007f8ab9231983: mov    0x8(%rax),%rbx
  0x00007f8ab9231987: je     0x00007f8ab9231992
  0x00007f8ab923198d: jmpq   0x00007f8ab9105c40
  0x00007f8ab9231992: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab923199a: je     0x00007f8ab9231a95
  0x00007f8ab92319a0: jmpq   0x00007f8ab9105c40
  0x00007f8ab92319a5: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92319ad: je     0x00007f8ab9231a95
  0x00007f8ab92319b3: mov    %rsp,%r13
  0x00007f8ab92319b6: mov    (%rsp),%rax
  0x00007f8ab92319ba: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92319be: pushfq 
  0x00007f8ab92319bf: sub    $0x8,%rsp
  0x00007f8ab92319c3: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92319c8: sub    $0x80,%rsp
  0x00007f8ab92319cf: mov    %rax,0x78(%rsp)
  0x00007f8ab92319d4: mov    %rcx,0x70(%rsp)
  0x00007f8ab92319d9: mov    %rdx,0x68(%rsp)
  0x00007f8ab92319de: mov    %rbx,0x60(%rsp)
  0x00007f8ab92319e3: mov    %rbp,0x50(%rsp)
  0x00007f8ab92319e8: mov    %rsi,0x48(%rsp)
  0x00007f8ab92319ed: mov    %rdi,0x40(%rsp)
  0x00007f8ab92319f2: mov    %r8,0x38(%rsp)
  0x00007f8ab92319f7: mov    %r9,0x30(%rsp)
  0x00007f8ab92319fc: mov    %r10,0x28(%rsp)
  0x00007f8ab9231a01: mov    %r11,0x20(%rsp)
  0x00007f8ab9231a06: mov    %r12,0x18(%rsp)
  0x00007f8ab9231a0b: mov    %r13,0x10(%rsp)
  0x00007f8ab9231a10: mov    %r14,0x8(%rsp)
  0x00007f8ab9231a15: mov    %r15,(%rsp)
  0x00007f8ab9231a19: sub    $0x200,%rsp
  0x00007f8ab9231a20: fxsave64 (%rsp)
  0x00007f8ab9231a25: mov    %rbx,%rdi
  0x00007f8ab9231a28: mov    %rax,%rsi
  0x00007f8ab9231a2b: callq  0x00007f8acef8bbca
  0x00007f8ab9231a30: fxrstor64 (%rsp)
  0x00007f8ab9231a35: add    $0x200,%rsp
  0x00007f8ab9231a3c: mov    (%rsp),%r15
  0x00007f8ab9231a40: mov    0x8(%rsp),%r14
  0x00007f8ab9231a45: mov    0x10(%rsp),%r13
  0x00007f8ab9231a4a: mov    0x18(%rsp),%r12
  0x00007f8ab9231a4f: mov    0x20(%rsp),%r11
  0x00007f8ab9231a54: mov    0x28(%rsp),%r10
  0x00007f8ab9231a59: mov    0x30(%rsp),%r9
  0x00007f8ab9231a5e: mov    0x38(%rsp),%r8
  0x00007f8ab9231a63: mov    0x40(%rsp),%rdi
  0x00007f8ab9231a68: mov    0x48(%rsp),%rsi
  0x00007f8ab9231a6d: mov    0x50(%rsp),%rbp
  0x00007f8ab9231a72: mov    0x60(%rsp),%rbx
  0x00007f8ab9231a77: mov    0x68(%rsp),%rdx
  0x00007f8ab9231a7c: mov    0x70(%rsp),%rcx
  0x00007f8ab9231a81: mov    0x78(%rsp),%rax
  0x00007f8ab9231a86: add    $0x80,%rsp
  0x00007f8ab9231a8d: add    $0x8,%rsp
  0x00007f8ab9231a91: popfq  
  0x00007f8ab9231a92: mov    %r13,%rsp
  0x00007f8ab9231a95: pop    %rax
  0x00007f8ab9231a96: mov    %rsp,%r13
  0x00007f8ab9231a99: sub    $0x30,%rsp
  0x00007f8ab9231a9d: mov    %rax,(%rsp)
  0x00007f8ab9231aa1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9231aab: mov    %rax,0x28(%rsp)
  0x00007f8ab9231ab0: mov    %rsi,0x20(%rsp)
  0x00007f8ab9231ab5: mov    %rdx,0x18(%rsp)
  0x00007f8ab9231aba: mov    %ecx,0x10(%rsp)
  0x00007f8ab9231abe: mov    %r8d,0x8(%rsp)
  0x00007f8ab9231ac3: mov    0x40(%rbx),%rcx
  0x00007f8ab9231ac7: jmpq   *%rcx

AHE@0x00007f8ac812f850: 0xabea0000 i2c: 0x00007f8ab9231fa0 c2i: 0x00007f8ab92320e0 c2iUV: 0x00007f8ab92320b3
i2c argument handler #134 for: static (IJI)I (606 bytes generated)
c2i argument handler starts at 0x7f8ab92320e0
  0x00007f8ab9231fa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9231fa4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9231fae: cmp    %r11,%rax
  0x00007f8ab9231fb1: jbe    0x00007f8ab9231fca
  0x00007f8ab9231fb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9231fc1: cmp    %r11,%rax
  0x00007f8ab9231fc4: jb     0x00007f8ab923208d
  0x00007f8ab9231fca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9231fd4: cmp    %r11,%rax
  0x00007f8ab9231fd7: jbe    0x00007f8ab9231ff0
  0x00007f8ab9231fdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9231fe7: cmp    %r11,%rax
  0x00007f8ab9231fea: jb     0x00007f8ab923208d
  0x00007f8ab9231ff0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9231ffa: cmp    %r11,%rax
  0x00007f8ab9231ffd: jbe    0x00007f8ab9232016
  0x00007f8ab9232003: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923200d: cmp    %r11,%rax
  0x00007f8ab9232010: jb     0x00007f8ab923208d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9232016: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923201b: sub    $0x80,%rsp
  0x00007f8ab9232022: mov    %rax,0x78(%rsp)
  0x00007f8ab9232027: mov    %rcx,0x70(%rsp)
  0x00007f8ab923202c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232031: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232036: mov    %rbp,0x50(%rsp)
  0x00007f8ab923203b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232040: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232045: mov    %r8,0x38(%rsp)
  0x00007f8ab923204a: mov    %r9,0x30(%rsp)
  0x00007f8ab923204f: mov    %r10,0x28(%rsp)
  0x00007f8ab9232054: mov    %r11,0x20(%rsp)
  0x00007f8ab9232059: mov    %r12,0x18(%rsp)
  0x00007f8ab923205e: mov    %r13,0x10(%rsp)
  0x00007f8ab9232063: mov    %r14,0x8(%rsp)
  0x00007f8ab9232068: mov    %r15,(%rsp)
  0x00007f8ab923206c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9232076: movabs $0x7f8ab9232016,%rsi
  0x00007f8ab9232080: mov    %rsp,%rdx
  0x00007f8ab9232083: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232087: callq  0x00007f8aceddb9fa
  0x00007f8ab923208c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923208d: mov    %rsp,%r11
  0x00007f8ab9232090: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232094: push   %rax
  0x00007f8ab9232095: mov    %r11,%rax
  0x00007f8ab9232098: mov    0x50(%rbx),%r11
  0x00007f8ab923209c: mov    0x20(%rax),%esi
  0x00007f8ab923209f: mov    0x10(%rax),%rdx
  0x00007f8ab92320a3: mov    0x8(%rax),%ecx
  0x00007f8ab92320a6: mov    %rbx,0x258(%r15)
  0x00007f8ab92320ad: mov    %rbx,%rax
  0x00007f8ab92320b0: jmpq   *%r11
  0x00007f8ab92320b3: mov    0x8(%rsi),%ebx
  0x00007f8ab92320b6: shl    $0x3,%rbx
  0x00007f8ab92320ba: cmp    0x10(%rax),%rbx
  0x00007f8ab92320be: mov    0x8(%rax),%rbx
  0x00007f8ab92320c2: je     0x00007f8ab92320cd
  0x00007f8ab92320c8: jmpq   0x00007f8ab9105c40
  0x00007f8ab92320cd: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92320d5: je     0x00007f8ab92321d0
  0x00007f8ab92320db: jmpq   0x00007f8ab9105c40
  0x00007f8ab92320e0: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92320e8: je     0x00007f8ab92321d0
  0x00007f8ab92320ee: mov    %rsp,%r13
  0x00007f8ab92320f1: mov    (%rsp),%rax
  0x00007f8ab92320f5: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92320f9: pushfq 
  0x00007f8ab92320fa: sub    $0x8,%rsp
  0x00007f8ab92320fe: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9232103: sub    $0x80,%rsp
  0x00007f8ab923210a: mov    %rax,0x78(%rsp)
  0x00007f8ab923210f: mov    %rcx,0x70(%rsp)
  0x00007f8ab9232114: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232119: mov    %rbx,0x60(%rsp)
  0x00007f8ab923211e: mov    %rbp,0x50(%rsp)
  0x00007f8ab9232123: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232128: mov    %rdi,0x40(%rsp)
  0x00007f8ab923212d: mov    %r8,0x38(%rsp)
  0x00007f8ab9232132: mov    %r9,0x30(%rsp)
  0x00007f8ab9232137: mov    %r10,0x28(%rsp)
  0x00007f8ab923213c: mov    %r11,0x20(%rsp)
  0x00007f8ab9232141: mov    %r12,0x18(%rsp)
  0x00007f8ab9232146: mov    %r13,0x10(%rsp)
  0x00007f8ab923214b: mov    %r14,0x8(%rsp)
  0x00007f8ab9232150: mov    %r15,(%rsp)
  0x00007f8ab9232154: sub    $0x200,%rsp
  0x00007f8ab923215b: fxsave64 (%rsp)
  0x00007f8ab9232160: mov    %rbx,%rdi
  0x00007f8ab9232163: mov    %rax,%rsi
  0x00007f8ab9232166: callq  0x00007f8acef8bbca
  0x00007f8ab923216b: fxrstor64 (%rsp)
  0x00007f8ab9232170: add    $0x200,%rsp
  0x00007f8ab9232177: mov    (%rsp),%r15
  0x00007f8ab923217b: mov    0x8(%rsp),%r14
  0x00007f8ab9232180: mov    0x10(%rsp),%r13
  0x00007f8ab9232185: mov    0x18(%rsp),%r12
  0x00007f8ab923218a: mov    0x20(%rsp),%r11
  0x00007f8ab923218f: mov    0x28(%rsp),%r10
  0x00007f8ab9232194: mov    0x30(%rsp),%r9
  0x00007f8ab9232199: mov    0x38(%rsp),%r8
  0x00007f8ab923219e: mov    0x40(%rsp),%rdi
  0x00007f8ab92321a3: mov    0x48(%rsp),%rsi
  0x00007f8ab92321a8: mov    0x50(%rsp),%rbp
  0x00007f8ab92321ad: mov    0x60(%rsp),%rbx
  0x00007f8ab92321b2: mov    0x68(%rsp),%rdx
  0x00007f8ab92321b7: mov    0x70(%rsp),%rcx
  0x00007f8ab92321bc: mov    0x78(%rsp),%rax
  0x00007f8ab92321c1: add    $0x80,%rsp
  0x00007f8ab92321c8: add    $0x8,%rsp
  0x00007f8ab92321cc: popfq  
  0x00007f8ab92321cd: mov    %r13,%rsp
  0x00007f8ab92321d0: pop    %rax
  0x00007f8ab92321d1: mov    %rsp,%r13
  0x00007f8ab92321d4: sub    $0x30,%rsp
  0x00007f8ab92321d8: mov    %rax,(%rsp)
  0x00007f8ab92321dc: mov    %esi,0x20(%rsp)
  0x00007f8ab92321e0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92321ea: mov    %rax,0x18(%rsp)
  0x00007f8ab92321ef: mov    %rdx,0x10(%rsp)
  0x00007f8ab92321f4: mov    %ecx,0x8(%rsp)
  0x00007f8ab92321f8: mov    0x40(%rbx),%rcx
  0x00007f8ab92321fc: jmpq   *%rcx

AHE@0x00007f8ac812f898: 0xbeb00000 i2c: 0x00007f8ab92322a0 c2i: 0x00007f8ab92323de c2iUV: 0x00007f8ab92323b1
i2c argument handler #135 for: static (JLsun/nio/fs/UnixFileStoreAttributes;)V (601 bytes generated)
c2i argument handler starts at 0x7f8ab92323de
  0x00007f8ab92322a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92322a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92322ae: cmp    %r11,%rax
  0x00007f8ab92322b1: jbe    0x00007f8ab92322ca
  0x00007f8ab92322b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab92322c1: cmp    %r11,%rax
  0x00007f8ab92322c4: jb     0x00007f8ab923238d
  0x00007f8ab92322ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab92322d4: cmp    %r11,%rax
  0x00007f8ab92322d7: jbe    0x00007f8ab92322f0
  0x00007f8ab92322dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92322e7: cmp    %r11,%rax
  0x00007f8ab92322ea: jb     0x00007f8ab923238d
  0x00007f8ab92322f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92322fa: cmp    %r11,%rax
  0x00007f8ab92322fd: jbe    0x00007f8ab9232316
  0x00007f8ab9232303: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923230d: cmp    %r11,%rax
  0x00007f8ab9232310: jb     0x00007f8ab923238d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9232316: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923231b: sub    $0x80,%rsp
  0x00007f8ab9232322: mov    %rax,0x78(%rsp)
  0x00007f8ab9232327: mov    %rcx,0x70(%rsp)
  0x00007f8ab923232c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232331: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232336: mov    %rbp,0x50(%rsp)
  0x00007f8ab923233b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232340: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232345: mov    %r8,0x38(%rsp)
  0x00007f8ab923234a: mov    %r9,0x30(%rsp)
  0x00007f8ab923234f: mov    %r10,0x28(%rsp)
  0x00007f8ab9232354: mov    %r11,0x20(%rsp)
  0x00007f8ab9232359: mov    %r12,0x18(%rsp)
  0x00007f8ab923235e: mov    %r13,0x10(%rsp)
  0x00007f8ab9232363: mov    %r14,0x8(%rsp)
  0x00007f8ab9232368: mov    %r15,(%rsp)
  0x00007f8ab923236c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9232376: movabs $0x7f8ab9232316,%rsi
  0x00007f8ab9232380: mov    %rsp,%rdx
  0x00007f8ab9232383: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232387: callq  0x00007f8aceddb9fa
  0x00007f8ab923238c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923238d: mov    %rsp,%r11
  0x00007f8ab9232390: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232394: push   %rax
  0x00007f8ab9232395: mov    %r11,%rax
  0x00007f8ab9232398: mov    0x50(%rbx),%r11
  0x00007f8ab923239c: mov    0x10(%rax),%rsi
  0x00007f8ab92323a0: mov    0x8(%rax),%rdx
  0x00007f8ab92323a4: mov    %rbx,0x258(%r15)
  0x00007f8ab92323ab: mov    %rbx,%rax
  0x00007f8ab92323ae: jmpq   *%r11
  0x00007f8ab92323b1: mov    0x8(%rsi),%ebx
  0x00007f8ab92323b4: shl    $0x3,%rbx
  0x00007f8ab92323b8: cmp    0x10(%rax),%rbx
  0x00007f8ab92323bc: mov    0x8(%rax),%rbx
  0x00007f8ab92323c0: je     0x00007f8ab92323cb
  0x00007f8ab92323c6: jmpq   0x00007f8ab9105c40
  0x00007f8ab92323cb: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92323d3: je     0x00007f8ab92324ce
  0x00007f8ab92323d9: jmpq   0x00007f8ab9105c40
  0x00007f8ab92323de: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92323e6: je     0x00007f8ab92324ce
  0x00007f8ab92323ec: mov    %rsp,%r13
  0x00007f8ab92323ef: mov    (%rsp),%rax
  0x00007f8ab92323f3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92323f7: pushfq 
  0x00007f8ab92323f8: sub    $0x8,%rsp
  0x00007f8ab92323fc: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9232401: sub    $0x80,%rsp
  0x00007f8ab9232408: mov    %rax,0x78(%rsp)
  0x00007f8ab923240d: mov    %rcx,0x70(%rsp)
  0x00007f8ab9232412: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232417: mov    %rbx,0x60(%rsp)
  0x00007f8ab923241c: mov    %rbp,0x50(%rsp)
  0x00007f8ab9232421: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232426: mov    %rdi,0x40(%rsp)
  0x00007f8ab923242b: mov    %r8,0x38(%rsp)
  0x00007f8ab9232430: mov    %r9,0x30(%rsp)
  0x00007f8ab9232435: mov    %r10,0x28(%rsp)
  0x00007f8ab923243a: mov    %r11,0x20(%rsp)
  0x00007f8ab923243f: mov    %r12,0x18(%rsp)
  0x00007f8ab9232444: mov    %r13,0x10(%rsp)
  0x00007f8ab9232449: mov    %r14,0x8(%rsp)
  0x00007f8ab923244e: mov    %r15,(%rsp)
  0x00007f8ab9232452: sub    $0x200,%rsp
  0x00007f8ab9232459: fxsave64 (%rsp)
  0x00007f8ab923245e: mov    %rbx,%rdi
  0x00007f8ab9232461: mov    %rax,%rsi
  0x00007f8ab9232464: callq  0x00007f8acef8bbca
  0x00007f8ab9232469: fxrstor64 (%rsp)
  0x00007f8ab923246e: add    $0x200,%rsp
  0x00007f8ab9232475: mov    (%rsp),%r15
  0x00007f8ab9232479: mov    0x8(%rsp),%r14
  0x00007f8ab923247e: mov    0x10(%rsp),%r13
  0x00007f8ab9232483: mov    0x18(%rsp),%r12
  0x00007f8ab9232488: mov    0x20(%rsp),%r11
  0x00007f8ab923248d: mov    0x28(%rsp),%r10
  0x00007f8ab9232492: mov    0x30(%rsp),%r9
  0x00007f8ab9232497: mov    0x38(%rsp),%r8
  0x00007f8ab923249c: mov    0x40(%rsp),%rdi
  0x00007f8ab92324a1: mov    0x48(%rsp),%rsi
  0x00007f8ab92324a6: mov    0x50(%rsp),%rbp
  0x00007f8ab92324ab: mov    0x60(%rsp),%rbx
  0x00007f8ab92324b0: mov    0x68(%rsp),%rdx
  0x00007f8ab92324b5: mov    0x70(%rsp),%rcx
  0x00007f8ab92324ba: mov    0x78(%rsp),%rax
  0x00007f8ab92324bf: add    $0x80,%rsp
  0x00007f8ab92324c6: add    $0x8,%rsp
  0x00007f8ab92324ca: popfq  
  0x00007f8ab92324cb: mov    %r13,%rsp
  0x00007f8ab92324ce: pop    %rax
  0x00007f8ab92324cf: mov    %rsp,%r13
  0x00007f8ab92324d2: sub    $0x20,%rsp
  0x00007f8ab92324d6: mov    %rax,(%rsp)
  0x00007f8ab92324da: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92324e4: mov    %rax,0x18(%rsp)
  0x00007f8ab92324e9: mov    %rsi,0x10(%rsp)
  0x00007f8ab92324ee: mov    %rdx,0x8(%rsp)
  0x00007f8ab92324f3: mov    0x40(%rbx),%rcx
  0x00007f8ab92324f7: jmpq   *%rcx

AHE@0x00007f8ac812f8e0: 0xbebebe00 i2c: 0x00007f8ab92325a0 c2i: 0x00007f8ab92326e2 c2iUV: 0x00007f8ab92326b5
i2c argument handler #136 for: static (JJJ)V (640 bytes generated)
c2i argument handler starts at 0x7f8ab92326e2
  0x00007f8ab92325a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92325a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92325ae: cmp    %r11,%rax
  0x00007f8ab92325b1: jbe    0x00007f8ab92325ca
  0x00007f8ab92325b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab92325c1: cmp    %r11,%rax
  0x00007f8ab92325c4: jb     0x00007f8ab923268d
  0x00007f8ab92325ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab92325d4: cmp    %r11,%rax
  0x00007f8ab92325d7: jbe    0x00007f8ab92325f0
  0x00007f8ab92325dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92325e7: cmp    %r11,%rax
  0x00007f8ab92325ea: jb     0x00007f8ab923268d
  0x00007f8ab92325f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92325fa: cmp    %r11,%rax
  0x00007f8ab92325fd: jbe    0x00007f8ab9232616
  0x00007f8ab9232603: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923260d: cmp    %r11,%rax
  0x00007f8ab9232610: jb     0x00007f8ab923268d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9232616: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923261b: sub    $0x80,%rsp
  0x00007f8ab9232622: mov    %rax,0x78(%rsp)
  0x00007f8ab9232627: mov    %rcx,0x70(%rsp)
  0x00007f8ab923262c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232631: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232636: mov    %rbp,0x50(%rsp)
  0x00007f8ab923263b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232640: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232645: mov    %r8,0x38(%rsp)
  0x00007f8ab923264a: mov    %r9,0x30(%rsp)
  0x00007f8ab923264f: mov    %r10,0x28(%rsp)
  0x00007f8ab9232654: mov    %r11,0x20(%rsp)
  0x00007f8ab9232659: mov    %r12,0x18(%rsp)
  0x00007f8ab923265e: mov    %r13,0x10(%rsp)
  0x00007f8ab9232663: mov    %r14,0x8(%rsp)
  0x00007f8ab9232668: mov    %r15,(%rsp)
  0x00007f8ab923266c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9232676: movabs $0x7f8ab9232616,%rsi
  0x00007f8ab9232680: mov    %rsp,%rdx
  0x00007f8ab9232683: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232687: callq  0x00007f8aceddb9fa
  0x00007f8ab923268c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923268d: mov    %rsp,%r11
  0x00007f8ab9232690: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232694: push   %rax
  0x00007f8ab9232695: mov    %r11,%rax
  0x00007f8ab9232698: mov    0x50(%rbx),%r11
  0x00007f8ab923269c: mov    0x28(%rax),%rsi
  0x00007f8ab92326a0: mov    0x18(%rax),%rdx
  0x00007f8ab92326a4: mov    0x8(%rax),%rcx
  0x00007f8ab92326a8: mov    %rbx,0x258(%r15)
  0x00007f8ab92326af: mov    %rbx,%rax
  0x00007f8ab92326b2: jmpq   *%r11
  0x00007f8ab92326b5: mov    0x8(%rsi),%ebx
  0x00007f8ab92326b8: shl    $0x3,%rbx
  0x00007f8ab92326bc: cmp    0x10(%rax),%rbx
  0x00007f8ab92326c0: mov    0x8(%rax),%rbx
  0x00007f8ab92326c4: je     0x00007f8ab92326cf
  0x00007f8ab92326ca: jmpq   0x00007f8ab9105c40
  0x00007f8ab92326cf: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92326d7: je     0x00007f8ab92327d2
  0x00007f8ab92326dd: jmpq   0x00007f8ab9105c40
  0x00007f8ab92326e2: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92326ea: je     0x00007f8ab92327d2
  0x00007f8ab92326f0: mov    %rsp,%r13
  0x00007f8ab92326f3: mov    (%rsp),%rax
  0x00007f8ab92326f7: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92326fb: pushfq 
  0x00007f8ab92326fc: sub    $0x8,%rsp
  0x00007f8ab9232700: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9232705: sub    $0x80,%rsp
  0x00007f8ab923270c: mov    %rax,0x78(%rsp)
  0x00007f8ab9232711: mov    %rcx,0x70(%rsp)
  0x00007f8ab9232716: mov    %rdx,0x68(%rsp)
  0x00007f8ab923271b: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232720: mov    %rbp,0x50(%rsp)
  0x00007f8ab9232725: mov    %rsi,0x48(%rsp)
  0x00007f8ab923272a: mov    %rdi,0x40(%rsp)
  0x00007f8ab923272f: mov    %r8,0x38(%rsp)
  0x00007f8ab9232734: mov    %r9,0x30(%rsp)
  0x00007f8ab9232739: mov    %r10,0x28(%rsp)
  0x00007f8ab923273e: mov    %r11,0x20(%rsp)
  0x00007f8ab9232743: mov    %r12,0x18(%rsp)
  0x00007f8ab9232748: mov    %r13,0x10(%rsp)
  0x00007f8ab923274d: mov    %r14,0x8(%rsp)
  0x00007f8ab9232752: mov    %r15,(%rsp)
  0x00007f8ab9232756: sub    $0x200,%rsp
  0x00007f8ab923275d: fxsave64 (%rsp)
  0x00007f8ab9232762: mov    %rbx,%rdi
  0x00007f8ab9232765: mov    %rax,%rsi
  0x00007f8ab9232768: callq  0x00007f8acef8bbca
  0x00007f8ab923276d: fxrstor64 (%rsp)
  0x00007f8ab9232772: add    $0x200,%rsp
  0x00007f8ab9232779: mov    (%rsp),%r15
  0x00007f8ab923277d: mov    0x8(%rsp),%r14
  0x00007f8ab9232782: mov    0x10(%rsp),%r13
  0x00007f8ab9232787: mov    0x18(%rsp),%r12
  0x00007f8ab923278c: mov    0x20(%rsp),%r11
  0x00007f8ab9232791: mov    0x28(%rsp),%r10
  0x00007f8ab9232796: mov    0x30(%rsp),%r9
  0x00007f8ab923279b: mov    0x38(%rsp),%r8
  0x00007f8ab92327a0: mov    0x40(%rsp),%rdi
  0x00007f8ab92327a5: mov    0x48(%rsp),%rsi
  0x00007f8ab92327aa: mov    0x50(%rsp),%rbp
  0x00007f8ab92327af: mov    0x60(%rsp),%rbx
  0x00007f8ab92327b4: mov    0x68(%rsp),%rdx
  0x00007f8ab92327b9: mov    0x70(%rsp),%rcx
  0x00007f8ab92327be: mov    0x78(%rsp),%rax
  0x00007f8ab92327c3: add    $0x80,%rsp
  0x00007f8ab92327ca: add    $0x8,%rsp
  0x00007f8ab92327ce: popfq  
  0x00007f8ab92327cf: mov    %r13,%rsp
  0x00007f8ab92327d2: pop    %rax
  0x00007f8ab92327d3: mov    %rsp,%r13
  0x00007f8ab92327d6: sub    $0x40,%rsp
  0x00007f8ab92327da: mov    %rax,(%rsp)
  0x00007f8ab92327de: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92327e8: mov    %rax,0x30(%rsp)
  0x00007f8ab92327ed: mov    %rsi,0x28(%rsp)
  0x00007f8ab92327f2: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92327fc: mov    %rax,0x20(%rsp)
  0x00007f8ab9232801: mov    %rdx,0x18(%rsp)
  0x00007f8ab9232806: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9232810: mov    %rax,0x10(%rsp)
  0x00007f8ab9232815: mov    %rcx,0x8(%rsp)
  0x00007f8ab923281a: mov    0x40(%rbx),%rcx
  0x00007f8ab923281e: jmpq   *%rcx

AHE@0x00007f8ac812f928: 0xabeab000 i2c: 0x00007f8ab92328e0 c2i: 0x00007f8ab9232a24 c2iUV: 0x00007f8ab92329f7
i2c argument handler #137 for: static (IJILsun/nio/fs/UnixFileAttributes;)V (615 bytes generated)
c2i argument handler starts at 0x7f8ab9232a24
  0x00007f8ab92328e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92328e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92328ee: cmp    %r11,%rax
  0x00007f8ab92328f1: jbe    0x00007f8ab923290a
  0x00007f8ab92328f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9232901: cmp    %r11,%rax
  0x00007f8ab9232904: jb     0x00007f8ab92329cd
  0x00007f8ab923290a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9232914: cmp    %r11,%rax
  0x00007f8ab9232917: jbe    0x00007f8ab9232930
  0x00007f8ab923291d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9232927: cmp    %r11,%rax
  0x00007f8ab923292a: jb     0x00007f8ab92329cd
  0x00007f8ab9232930: movabs $0x7f8ab9140820,%r11
  0x00007f8ab923293a: cmp    %r11,%rax
  0x00007f8ab923293d: jbe    0x00007f8ab9232956
  0x00007f8ab9232943: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923294d: cmp    %r11,%rax
  0x00007f8ab9232950: jb     0x00007f8ab92329cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9232956: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923295b: sub    $0x80,%rsp
  0x00007f8ab9232962: mov    %rax,0x78(%rsp)
  0x00007f8ab9232967: mov    %rcx,0x70(%rsp)
  0x00007f8ab923296c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232971: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232976: mov    %rbp,0x50(%rsp)
  0x00007f8ab923297b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232980: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232985: mov    %r8,0x38(%rsp)
  0x00007f8ab923298a: mov    %r9,0x30(%rsp)
  0x00007f8ab923298f: mov    %r10,0x28(%rsp)
  0x00007f8ab9232994: mov    %r11,0x20(%rsp)
  0x00007f8ab9232999: mov    %r12,0x18(%rsp)
  0x00007f8ab923299e: mov    %r13,0x10(%rsp)
  0x00007f8ab92329a3: mov    %r14,0x8(%rsp)
  0x00007f8ab92329a8: mov    %r15,(%rsp)
  0x00007f8ab92329ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab92329b6: movabs $0x7f8ab9232956,%rsi
  0x00007f8ab92329c0: mov    %rsp,%rdx
  0x00007f8ab92329c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92329c7: callq  0x00007f8aceddb9fa
  0x00007f8ab92329cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab92329cd: mov    %rsp,%r11
  0x00007f8ab92329d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92329d4: push   %rax
  0x00007f8ab92329d5: mov    %r11,%rax
  0x00007f8ab92329d8: mov    0x50(%rbx),%r11
  0x00007f8ab92329dc: mov    0x28(%rax),%esi
  0x00007f8ab92329df: mov    0x18(%rax),%rdx
  0x00007f8ab92329e3: mov    0x10(%rax),%ecx
  0x00007f8ab92329e6: mov    0x8(%rax),%r8
  0x00007f8ab92329ea: mov    %rbx,0x258(%r15)
  0x00007f8ab92329f1: mov    %rbx,%rax
  0x00007f8ab92329f4: jmpq   *%r11
  0x00007f8ab92329f7: mov    0x8(%rsi),%ebx
  0x00007f8ab92329fa: shl    $0x3,%rbx
  0x00007f8ab92329fe: cmp    0x10(%rax),%rbx
  0x00007f8ab9232a02: mov    0x8(%rax),%rbx
  0x00007f8ab9232a06: je     0x00007f8ab9232a11
  0x00007f8ab9232a0c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9232a11: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9232a19: je     0x00007f8ab9232b14
  0x00007f8ab9232a1f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9232a24: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9232a2c: je     0x00007f8ab9232b14
  0x00007f8ab9232a32: mov    %rsp,%r13
  0x00007f8ab9232a35: mov    (%rsp),%rax
  0x00007f8ab9232a39: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232a3d: pushfq 
  0x00007f8ab9232a3e: sub    $0x8,%rsp
  0x00007f8ab9232a42: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9232a47: sub    $0x80,%rsp
  0x00007f8ab9232a4e: mov    %rax,0x78(%rsp)
  0x00007f8ab9232a53: mov    %rcx,0x70(%rsp)
  0x00007f8ab9232a58: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232a5d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232a62: mov    %rbp,0x50(%rsp)
  0x00007f8ab9232a67: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232a6c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232a71: mov    %r8,0x38(%rsp)
  0x00007f8ab9232a76: mov    %r9,0x30(%rsp)
  0x00007f8ab9232a7b: mov    %r10,0x28(%rsp)
  0x00007f8ab9232a80: mov    %r11,0x20(%rsp)
  0x00007f8ab9232a85: mov    %r12,0x18(%rsp)
  0x00007f8ab9232a8a: mov    %r13,0x10(%rsp)
  0x00007f8ab9232a8f: mov    %r14,0x8(%rsp)
  0x00007f8ab9232a94: mov    %r15,(%rsp)
  0x00007f8ab9232a98: sub    $0x200,%rsp
  0x00007f8ab9232a9f: fxsave64 (%rsp)
  0x00007f8ab9232aa4: mov    %rbx,%rdi
  0x00007f8ab9232aa7: mov    %rax,%rsi
  0x00007f8ab9232aaa: callq  0x00007f8acef8bbca
  0x00007f8ab9232aaf: fxrstor64 (%rsp)
  0x00007f8ab9232ab4: add    $0x200,%rsp
  0x00007f8ab9232abb: mov    (%rsp),%r15
  0x00007f8ab9232abf: mov    0x8(%rsp),%r14
  0x00007f8ab9232ac4: mov    0x10(%rsp),%r13
  0x00007f8ab9232ac9: mov    0x18(%rsp),%r12
  0x00007f8ab9232ace: mov    0x20(%rsp),%r11
  0x00007f8ab9232ad3: mov    0x28(%rsp),%r10
  0x00007f8ab9232ad8: mov    0x30(%rsp),%r9
  0x00007f8ab9232add: mov    0x38(%rsp),%r8
  0x00007f8ab9232ae2: mov    0x40(%rsp),%rdi
  0x00007f8ab9232ae7: mov    0x48(%rsp),%rsi
  0x00007f8ab9232aec: mov    0x50(%rsp),%rbp
  0x00007f8ab9232af1: mov    0x60(%rsp),%rbx
  0x00007f8ab9232af6: mov    0x68(%rsp),%rdx
  0x00007f8ab9232afb: mov    0x70(%rsp),%rcx
  0x00007f8ab9232b00: mov    0x78(%rsp),%rax
  0x00007f8ab9232b05: add    $0x80,%rsp
  0x00007f8ab9232b0c: add    $0x8,%rsp
  0x00007f8ab9232b10: popfq  
  0x00007f8ab9232b11: mov    %r13,%rsp
  0x00007f8ab9232b14: pop    %rax
  0x00007f8ab9232b15: mov    %rsp,%r13
  0x00007f8ab9232b18: sub    $0x30,%rsp
  0x00007f8ab9232b1c: mov    %rax,(%rsp)
  0x00007f8ab9232b20: mov    %esi,0x28(%rsp)
  0x00007f8ab9232b24: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9232b2e: mov    %rax,0x20(%rsp)
  0x00007f8ab9232b33: mov    %rdx,0x18(%rsp)
  0x00007f8ab9232b38: mov    %ecx,0x10(%rsp)
  0x00007f8ab9232b3c: mov    %r8,0x8(%rsp)
  0x00007f8ab9232b41: mov    0x40(%rbx),%rcx
  0x00007f8ab9232b45: jmpq   *%rcx

AHE@0x00007f8ac812f970: 0xabab0000 i2c: 0x00007f8ab9232c20 c2i: 0x00007f8ab9232d64 c2iUV: 0x00007f8ab9232d37
i2c argument handler #138 for: static (I[BILsun/nio/fs/UnixFileAttributes;)V (600 bytes generated)
c2i argument handler starts at 0x7f8ab9232d64
  0x00007f8ab9232c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9232c24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9232c2e: cmp    %r11,%rax
  0x00007f8ab9232c31: jbe    0x00007f8ab9232c4a
  0x00007f8ab9232c37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9232c41: cmp    %r11,%rax
  0x00007f8ab9232c44: jb     0x00007f8ab9232d0d
  0x00007f8ab9232c4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9232c54: cmp    %r11,%rax
  0x00007f8ab9232c57: jbe    0x00007f8ab9232c70
  0x00007f8ab9232c5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9232c67: cmp    %r11,%rax
  0x00007f8ab9232c6a: jb     0x00007f8ab9232d0d
  0x00007f8ab9232c70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9232c7a: cmp    %r11,%rax
  0x00007f8ab9232c7d: jbe    0x00007f8ab9232c96
  0x00007f8ab9232c83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9232c8d: cmp    %r11,%rax
  0x00007f8ab9232c90: jb     0x00007f8ab9232d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9232c96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9232c9b: sub    $0x80,%rsp
  0x00007f8ab9232ca2: mov    %rax,0x78(%rsp)
  0x00007f8ab9232ca7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9232cac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232cb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232cb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9232cbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232cc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232cc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9232cca: mov    %r9,0x30(%rsp)
  0x00007f8ab9232ccf: mov    %r10,0x28(%rsp)
  0x00007f8ab9232cd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9232cd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9232cde: mov    %r13,0x10(%rsp)
  0x00007f8ab9232ce3: mov    %r14,0x8(%rsp)
  0x00007f8ab9232ce8: mov    %r15,(%rsp)
  0x00007f8ab9232cec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9232cf6: movabs $0x7f8ab9232c96,%rsi
  0x00007f8ab9232d00: mov    %rsp,%rdx
  0x00007f8ab9232d03: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232d07: callq  0x00007f8aceddb9fa
  0x00007f8ab9232d0c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9232d0d: mov    %rsp,%r11
  0x00007f8ab9232d10: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232d14: push   %rax
  0x00007f8ab9232d15: mov    %r11,%rax
  0x00007f8ab9232d18: mov    0x50(%rbx),%r11
  0x00007f8ab9232d1c: mov    0x20(%rax),%esi
  0x00007f8ab9232d1f: mov    0x18(%rax),%rdx
  0x00007f8ab9232d23: mov    0x10(%rax),%ecx
  0x00007f8ab9232d26: mov    0x8(%rax),%r8
  0x00007f8ab9232d2a: mov    %rbx,0x258(%r15)
  0x00007f8ab9232d31: mov    %rbx,%rax
  0x00007f8ab9232d34: jmpq   *%r11
  0x00007f8ab9232d37: mov    0x8(%rsi),%ebx
  0x00007f8ab9232d3a: shl    $0x3,%rbx
  0x00007f8ab9232d3e: cmp    0x10(%rax),%rbx
  0x00007f8ab9232d42: mov    0x8(%rax),%rbx
  0x00007f8ab9232d46: je     0x00007f8ab9232d51
  0x00007f8ab9232d4c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9232d51: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9232d59: je     0x00007f8ab9232e54
  0x00007f8ab9232d5f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9232d64: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9232d6c: je     0x00007f8ab9232e54
  0x00007f8ab9232d72: mov    %rsp,%r13
  0x00007f8ab9232d75: mov    (%rsp),%rax
  0x00007f8ab9232d79: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9232d7d: pushfq 
  0x00007f8ab9232d7e: sub    $0x8,%rsp
  0x00007f8ab9232d82: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9232d87: sub    $0x80,%rsp
  0x00007f8ab9232d8e: mov    %rax,0x78(%rsp)
  0x00007f8ab9232d93: mov    %rcx,0x70(%rsp)
  0x00007f8ab9232d98: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232d9d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232da2: mov    %rbp,0x50(%rsp)
  0x00007f8ab9232da7: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232dac: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232db1: mov    %r8,0x38(%rsp)
  0x00007f8ab9232db6: mov    %r9,0x30(%rsp)
  0x00007f8ab9232dbb: mov    %r10,0x28(%rsp)
  0x00007f8ab9232dc0: mov    %r11,0x20(%rsp)
  0x00007f8ab9232dc5: mov    %r12,0x18(%rsp)
  0x00007f8ab9232dca: mov    %r13,0x10(%rsp)
  0x00007f8ab9232dcf: mov    %r14,0x8(%rsp)
  0x00007f8ab9232dd4: mov    %r15,(%rsp)
  0x00007f8ab9232dd8: sub    $0x200,%rsp
  0x00007f8ab9232ddf: fxsave64 (%rsp)
  0x00007f8ab9232de4: mov    %rbx,%rdi
  0x00007f8ab9232de7: mov    %rax,%rsi
  0x00007f8ab9232dea: callq  0x00007f8acef8bbca
  0x00007f8ab9232def: fxrstor64 (%rsp)
  0x00007f8ab9232df4: add    $0x200,%rsp
  0x00007f8ab9232dfb: mov    (%rsp),%r15
  0x00007f8ab9232dff: mov    0x8(%rsp),%r14
  0x00007f8ab9232e04: mov    0x10(%rsp),%r13
  0x00007f8ab9232e09: mov    0x18(%rsp),%r12
  0x00007f8ab9232e0e: mov    0x20(%rsp),%r11
  0x00007f8ab9232e13: mov    0x28(%rsp),%r10
  0x00007f8ab9232e18: mov    0x30(%rsp),%r9
  0x00007f8ab9232e1d: mov    0x38(%rsp),%r8
  0x00007f8ab9232e22: mov    0x40(%rsp),%rdi
  0x00007f8ab9232e27: mov    0x48(%rsp),%rsi
  0x00007f8ab9232e2c: mov    0x50(%rsp),%rbp
  0x00007f8ab9232e31: mov    0x60(%rsp),%rbx
  0x00007f8ab9232e36: mov    0x68(%rsp),%rdx
  0x00007f8ab9232e3b: mov    0x70(%rsp),%rcx
  0x00007f8ab9232e40: mov    0x78(%rsp),%rax
  0x00007f8ab9232e45: add    $0x80,%rsp
  0x00007f8ab9232e4c: add    $0x8,%rsp
  0x00007f8ab9232e50: popfq  
  0x00007f8ab9232e51: mov    %r13,%rsp
  0x00007f8ab9232e54: pop    %rax
  0x00007f8ab9232e55: mov    %rsp,%r13
  0x00007f8ab9232e58: sub    $0x30,%rsp
  0x00007f8ab9232e5c: mov    %rax,(%rsp)
  0x00007f8ab9232e60: mov    %esi,0x20(%rsp)
  0x00007f8ab9232e64: mov    %rdx,0x18(%rsp)
  0x00007f8ab9232e69: mov    %ecx,0x10(%rsp)
  0x00007f8ab9232e6d: mov    %r8,0x8(%rsp)
  0x00007f8ab9232e72: mov    0x40(%rbx),%rcx
  0x00007f8ab9232e76: jmpq   *%rcx

AHE@0x00007f8ac812f9b8: 0xabeabe00 i2c: 0x00007f8ab9232f20 c2i: 0x00007f8ab9233064 c2iUV: 0x00007f8ab9233037
i2c argument handler #139 for: static (IJIJ)V (630 bytes generated)
c2i argument handler starts at 0x7f8ab9233064
  0x00007f8ab9232f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9232f24: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9232f2e: cmp    %r11,%rax
  0x00007f8ab9232f31: jbe    0x00007f8ab9232f4a
  0x00007f8ab9232f37: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9232f41: cmp    %r11,%rax
  0x00007f8ab9232f44: jb     0x00007f8ab923300d
  0x00007f8ab9232f4a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9232f54: cmp    %r11,%rax
  0x00007f8ab9232f57: jbe    0x00007f8ab9232f70
  0x00007f8ab9232f5d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9232f67: cmp    %r11,%rax
  0x00007f8ab9232f6a: jb     0x00007f8ab923300d
  0x00007f8ab9232f70: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9232f7a: cmp    %r11,%rax
  0x00007f8ab9232f7d: jbe    0x00007f8ab9232f96
  0x00007f8ab9232f83: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9232f8d: cmp    %r11,%rax
  0x00007f8ab9232f90: jb     0x00007f8ab923300d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9232f96: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9232f9b: sub    $0x80,%rsp
  0x00007f8ab9232fa2: mov    %rax,0x78(%rsp)
  0x00007f8ab9232fa7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9232fac: mov    %rdx,0x68(%rsp)
  0x00007f8ab9232fb1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9232fb6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9232fbb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9232fc0: mov    %rdi,0x40(%rsp)
  0x00007f8ab9232fc5: mov    %r8,0x38(%rsp)
  0x00007f8ab9232fca: mov    %r9,0x30(%rsp)
  0x00007f8ab9232fcf: mov    %r10,0x28(%rsp)
  0x00007f8ab9232fd4: mov    %r11,0x20(%rsp)
  0x00007f8ab9232fd9: mov    %r12,0x18(%rsp)
  0x00007f8ab9232fde: mov    %r13,0x10(%rsp)
  0x00007f8ab9232fe3: mov    %r14,0x8(%rsp)
  0x00007f8ab9232fe8: mov    %r15,(%rsp)
  0x00007f8ab9232fec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9232ff6: movabs $0x7f8ab9232f96,%rsi
  0x00007f8ab9233000: mov    %rsp,%rdx
  0x00007f8ab9233003: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233007: callq  0x00007f8aceddb9fa
  0x00007f8ab923300c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923300d: mov    %rsp,%r11
  0x00007f8ab9233010: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233014: push   %rax
  0x00007f8ab9233015: mov    %r11,%rax
  0x00007f8ab9233018: mov    0x50(%rbx),%r11
  0x00007f8ab923301c: mov    0x30(%rax),%esi
  0x00007f8ab923301f: mov    0x20(%rax),%rdx
  0x00007f8ab9233023: mov    0x18(%rax),%ecx
  0x00007f8ab9233026: mov    0x8(%rax),%r8
  0x00007f8ab923302a: mov    %rbx,0x258(%r15)
  0x00007f8ab9233031: mov    %rbx,%rax
  0x00007f8ab9233034: jmpq   *%r11
  0x00007f8ab9233037: mov    0x8(%rsi),%ebx
  0x00007f8ab923303a: shl    $0x3,%rbx
  0x00007f8ab923303e: cmp    0x10(%rax),%rbx
  0x00007f8ab9233042: mov    0x8(%rax),%rbx
  0x00007f8ab9233046: je     0x00007f8ab9233051
  0x00007f8ab923304c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9233051: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9233059: je     0x00007f8ab9233154
  0x00007f8ab923305f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9233064: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab923306c: je     0x00007f8ab9233154
  0x00007f8ab9233072: mov    %rsp,%r13
  0x00007f8ab9233075: mov    (%rsp),%rax
  0x00007f8ab9233079: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab923307d: pushfq 
  0x00007f8ab923307e: sub    $0x8,%rsp
  0x00007f8ab9233082: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9233087: sub    $0x80,%rsp
  0x00007f8ab923308e: mov    %rax,0x78(%rsp)
  0x00007f8ab9233093: mov    %rcx,0x70(%rsp)
  0x00007f8ab9233098: mov    %rdx,0x68(%rsp)
  0x00007f8ab923309d: mov    %rbx,0x60(%rsp)
  0x00007f8ab92330a2: mov    %rbp,0x50(%rsp)
  0x00007f8ab92330a7: mov    %rsi,0x48(%rsp)
  0x00007f8ab92330ac: mov    %rdi,0x40(%rsp)
  0x00007f8ab92330b1: mov    %r8,0x38(%rsp)
  0x00007f8ab92330b6: mov    %r9,0x30(%rsp)
  0x00007f8ab92330bb: mov    %r10,0x28(%rsp)
  0x00007f8ab92330c0: mov    %r11,0x20(%rsp)
  0x00007f8ab92330c5: mov    %r12,0x18(%rsp)
  0x00007f8ab92330ca: mov    %r13,0x10(%rsp)
  0x00007f8ab92330cf: mov    %r14,0x8(%rsp)
  0x00007f8ab92330d4: mov    %r15,(%rsp)
  0x00007f8ab92330d8: sub    $0x200,%rsp
  0x00007f8ab92330df: fxsave64 (%rsp)
  0x00007f8ab92330e4: mov    %rbx,%rdi
  0x00007f8ab92330e7: mov    %rax,%rsi
  0x00007f8ab92330ea: callq  0x00007f8acef8bbca
  0x00007f8ab92330ef: fxrstor64 (%rsp)
  0x00007f8ab92330f4: add    $0x200,%rsp
  0x00007f8ab92330fb: mov    (%rsp),%r15
  0x00007f8ab92330ff: mov    0x8(%rsp),%r14
  0x00007f8ab9233104: mov    0x10(%rsp),%r13
  0x00007f8ab9233109: mov    0x18(%rsp),%r12
  0x00007f8ab923310e: mov    0x20(%rsp),%r11
  0x00007f8ab9233113: mov    0x28(%rsp),%r10
  0x00007f8ab9233118: mov    0x30(%rsp),%r9
  0x00007f8ab923311d: mov    0x38(%rsp),%r8
  0x00007f8ab9233122: mov    0x40(%rsp),%rdi
  0x00007f8ab9233127: mov    0x48(%rsp),%rsi
  0x00007f8ab923312c: mov    0x50(%rsp),%rbp
  0x00007f8ab9233131: mov    0x60(%rsp),%rbx
  0x00007f8ab9233136: mov    0x68(%rsp),%rdx
  0x00007f8ab923313b: mov    0x70(%rsp),%rcx
  0x00007f8ab9233140: mov    0x78(%rsp),%rax
  0x00007f8ab9233145: add    $0x80,%rsp
  0x00007f8ab923314c: add    $0x8,%rsp
  0x00007f8ab9233150: popfq  
  0x00007f8ab9233151: mov    %r13,%rsp
  0x00007f8ab9233154: pop    %rax
  0x00007f8ab9233155: mov    %rsp,%r13
  0x00007f8ab9233158: sub    $0x40,%rsp
  0x00007f8ab923315c: mov    %rax,(%rsp)
  0x00007f8ab9233160: mov    %esi,0x30(%rsp)
  0x00007f8ab9233164: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab923316e: mov    %rax,0x28(%rsp)
  0x00007f8ab9233173: mov    %rdx,0x20(%rsp)
  0x00007f8ab9233178: mov    %ecx,0x18(%rsp)
  0x00007f8ab923317c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9233186: mov    %rax,0x10(%rsp)
  0x00007f8ab923318b: mov    %r8,0x8(%rsp)
  0x00007f8ab9233190: mov    0x40(%rbx),%rcx
  0x00007f8ab9233194: jmpq   *%rcx

AHE@0x00007f8ac812fa00: 0xbeabe000 i2c: 0x00007f8ab9233260 c2i: 0x00007f8ab92333a1 c2iUV: 0x00007f8ab9233374
i2c argument handler #140 for: static (JIJ)V (623 bytes generated)
c2i argument handler starts at 0x7f8ab92333a1
  0x00007f8ab9233260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9233264: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab923326e: cmp    %r11,%rax
  0x00007f8ab9233271: jbe    0x00007f8ab923328a
  0x00007f8ab9233277: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9233281: cmp    %r11,%rax
  0x00007f8ab9233284: jb     0x00007f8ab923334d
  0x00007f8ab923328a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9233294: cmp    %r11,%rax
  0x00007f8ab9233297: jbe    0x00007f8ab92332b0
  0x00007f8ab923329d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92332a7: cmp    %r11,%rax
  0x00007f8ab92332aa: jb     0x00007f8ab923334d
  0x00007f8ab92332b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92332ba: cmp    %r11,%rax
  0x00007f8ab92332bd: jbe    0x00007f8ab92332d6
  0x00007f8ab92332c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab92332cd: cmp    %r11,%rax
  0x00007f8ab92332d0: jb     0x00007f8ab923334d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab92332d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92332db: sub    $0x80,%rsp
  0x00007f8ab92332e2: mov    %rax,0x78(%rsp)
  0x00007f8ab92332e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab92332ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab92332f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92332f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92332fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9233300: mov    %rdi,0x40(%rsp)
  0x00007f8ab9233305: mov    %r8,0x38(%rsp)
  0x00007f8ab923330a: mov    %r9,0x30(%rsp)
  0x00007f8ab923330f: mov    %r10,0x28(%rsp)
  0x00007f8ab9233314: mov    %r11,0x20(%rsp)
  0x00007f8ab9233319: mov    %r12,0x18(%rsp)
  0x00007f8ab923331e: mov    %r13,0x10(%rsp)
  0x00007f8ab9233323: mov    %r14,0x8(%rsp)
  0x00007f8ab9233328: mov    %r15,(%rsp)
  0x00007f8ab923332c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9233336: movabs $0x7f8ab92332d6,%rsi
  0x00007f8ab9233340: mov    %rsp,%rdx
  0x00007f8ab9233343: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233347: callq  0x00007f8aceddb9fa
  0x00007f8ab923334c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923334d: mov    %rsp,%r11
  0x00007f8ab9233350: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233354: push   %rax
  0x00007f8ab9233355: mov    %r11,%rax
  0x00007f8ab9233358: mov    0x50(%rbx),%r11
  0x00007f8ab923335c: mov    0x20(%rax),%rsi
  0x00007f8ab9233360: mov    0x18(%rax),%edx
  0x00007f8ab9233363: mov    0x8(%rax),%rcx
  0x00007f8ab9233367: mov    %rbx,0x258(%r15)
  0x00007f8ab923336e: mov    %rbx,%rax
  0x00007f8ab9233371: jmpq   *%r11
  0x00007f8ab9233374: mov    0x8(%rsi),%ebx
  0x00007f8ab9233377: shl    $0x3,%rbx
  0x00007f8ab923337b: cmp    0x10(%rax),%rbx
  0x00007f8ab923337f: mov    0x8(%rax),%rbx
  0x00007f8ab9233383: je     0x00007f8ab923338e
  0x00007f8ab9233389: jmpq   0x00007f8ab9105c40
  0x00007f8ab923338e: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9233396: je     0x00007f8ab9233491
  0x00007f8ab923339c: jmpq   0x00007f8ab9105c40
  0x00007f8ab92333a1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92333a9: je     0x00007f8ab9233491
  0x00007f8ab92333af: mov    %rsp,%r13
  0x00007f8ab92333b2: mov    (%rsp),%rax
  0x00007f8ab92333b6: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92333ba: pushfq 
  0x00007f8ab92333bb: sub    $0x8,%rsp
  0x00007f8ab92333bf: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92333c4: sub    $0x80,%rsp
  0x00007f8ab92333cb: mov    %rax,0x78(%rsp)
  0x00007f8ab92333d0: mov    %rcx,0x70(%rsp)
  0x00007f8ab92333d5: mov    %rdx,0x68(%rsp)
  0x00007f8ab92333da: mov    %rbx,0x60(%rsp)
  0x00007f8ab92333df: mov    %rbp,0x50(%rsp)
  0x00007f8ab92333e4: mov    %rsi,0x48(%rsp)
  0x00007f8ab92333e9: mov    %rdi,0x40(%rsp)
  0x00007f8ab92333ee: mov    %r8,0x38(%rsp)
  0x00007f8ab92333f3: mov    %r9,0x30(%rsp)
  0x00007f8ab92333f8: mov    %r10,0x28(%rsp)
  0x00007f8ab92333fd: mov    %r11,0x20(%rsp)
  0x00007f8ab9233402: mov    %r12,0x18(%rsp)
  0x00007f8ab9233407: mov    %r13,0x10(%rsp)
  0x00007f8ab923340c: mov    %r14,0x8(%rsp)
  0x00007f8ab9233411: mov    %r15,(%rsp)
  0x00007f8ab9233415: sub    $0x200,%rsp
  0x00007f8ab923341c: fxsave64 (%rsp)
  0x00007f8ab9233421: mov    %rbx,%rdi
  0x00007f8ab9233424: mov    %rax,%rsi
  0x00007f8ab9233427: callq  0x00007f8acef8bbca
  0x00007f8ab923342c: fxrstor64 (%rsp)
  0x00007f8ab9233431: add    $0x200,%rsp
  0x00007f8ab9233438: mov    (%rsp),%r15
  0x00007f8ab923343c: mov    0x8(%rsp),%r14
  0x00007f8ab9233441: mov    0x10(%rsp),%r13
  0x00007f8ab9233446: mov    0x18(%rsp),%r12
  0x00007f8ab923344b: mov    0x20(%rsp),%r11
  0x00007f8ab9233450: mov    0x28(%rsp),%r10
  0x00007f8ab9233455: mov    0x30(%rsp),%r9
  0x00007f8ab923345a: mov    0x38(%rsp),%r8
  0x00007f8ab923345f: mov    0x40(%rsp),%rdi
  0x00007f8ab9233464: mov    0x48(%rsp),%rsi
  0x00007f8ab9233469: mov    0x50(%rsp),%rbp
  0x00007f8ab923346e: mov    0x60(%rsp),%rbx
  0x00007f8ab9233473: mov    0x68(%rsp),%rdx
  0x00007f8ab9233478: mov    0x70(%rsp),%rcx
  0x00007f8ab923347d: mov    0x78(%rsp),%rax
  0x00007f8ab9233482: add    $0x80,%rsp
  0x00007f8ab9233489: add    $0x8,%rsp
  0x00007f8ab923348d: popfq  
  0x00007f8ab923348e: mov    %r13,%rsp
  0x00007f8ab9233491: pop    %rax
  0x00007f8ab9233492: mov    %rsp,%r13
  0x00007f8ab9233495: sub    $0x30,%rsp
  0x00007f8ab9233499: mov    %rax,(%rsp)
  0x00007f8ab923349d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92334a7: mov    %rax,0x28(%rsp)
  0x00007f8ab92334ac: mov    %rsi,0x20(%rsp)
  0x00007f8ab92334b1: mov    %edx,0x18(%rsp)
  0x00007f8ab92334b5: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92334bf: mov    %rax,0x10(%rsp)
  0x00007f8ab92334c4: mov    %rcx,0x8(%rsp)
  0x00007f8ab92334c9: mov    0x40(%rbx),%rcx
  0x00007f8ab92334cd: jmpq   *%rcx

AHE@0x00007f8ac812fa48: 0xabeaa000 i2c: 0x00007f8ab92335a0 c2i: 0x00007f8ab92336e4 c2iUV: 0x00007f8ab92336b7
i2c argument handler #141 for: static (IJII)I (615 bytes generated)
c2i argument handler starts at 0x7f8ab92336e4
  0x00007f8ab92335a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92335a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92335ae: cmp    %r11,%rax
  0x00007f8ab92335b1: jbe    0x00007f8ab92335ca
  0x00007f8ab92335b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab92335c1: cmp    %r11,%rax
  0x00007f8ab92335c4: jb     0x00007f8ab923368d
  0x00007f8ab92335ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab92335d4: cmp    %r11,%rax
  0x00007f8ab92335d7: jbe    0x00007f8ab92335f0
  0x00007f8ab92335dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92335e7: cmp    %r11,%rax
  0x00007f8ab92335ea: jb     0x00007f8ab923368d
  0x00007f8ab92335f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92335fa: cmp    %r11,%rax
  0x00007f8ab92335fd: jbe    0x00007f8ab9233616
  0x00007f8ab9233603: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923360d: cmp    %r11,%rax
  0x00007f8ab9233610: jb     0x00007f8ab923368d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9233616: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923361b: sub    $0x80,%rsp
  0x00007f8ab9233622: mov    %rax,0x78(%rsp)
  0x00007f8ab9233627: mov    %rcx,0x70(%rsp)
  0x00007f8ab923362c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9233631: mov    %rbx,0x60(%rsp)
  0x00007f8ab9233636: mov    %rbp,0x50(%rsp)
  0x00007f8ab923363b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9233640: mov    %rdi,0x40(%rsp)
  0x00007f8ab9233645: mov    %r8,0x38(%rsp)
  0x00007f8ab923364a: mov    %r9,0x30(%rsp)
  0x00007f8ab923364f: mov    %r10,0x28(%rsp)
  0x00007f8ab9233654: mov    %r11,0x20(%rsp)
  0x00007f8ab9233659: mov    %r12,0x18(%rsp)
  0x00007f8ab923365e: mov    %r13,0x10(%rsp)
  0x00007f8ab9233663: mov    %r14,0x8(%rsp)
  0x00007f8ab9233668: mov    %r15,(%rsp)
  0x00007f8ab923366c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9233676: movabs $0x7f8ab9233616,%rsi
  0x00007f8ab9233680: mov    %rsp,%rdx
  0x00007f8ab9233683: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233687: callq  0x00007f8aceddb9fa
  0x00007f8ab923368c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923368d: mov    %rsp,%r11
  0x00007f8ab9233690: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233694: push   %rax
  0x00007f8ab9233695: mov    %r11,%rax
  0x00007f8ab9233698: mov    0x50(%rbx),%r11
  0x00007f8ab923369c: mov    0x28(%rax),%esi
  0x00007f8ab923369f: mov    0x18(%rax),%rdx
  0x00007f8ab92336a3: mov    0x10(%rax),%ecx
  0x00007f8ab92336a6: mov    0x8(%rax),%r8d
  0x00007f8ab92336aa: mov    %rbx,0x258(%r15)
  0x00007f8ab92336b1: mov    %rbx,%rax
  0x00007f8ab92336b4: jmpq   *%r11
  0x00007f8ab92336b7: mov    0x8(%rsi),%ebx
  0x00007f8ab92336ba: shl    $0x3,%rbx
  0x00007f8ab92336be: cmp    0x10(%rax),%rbx
  0x00007f8ab92336c2: mov    0x8(%rax),%rbx
  0x00007f8ab92336c6: je     0x00007f8ab92336d1
  0x00007f8ab92336cc: jmpq   0x00007f8ab9105c40
  0x00007f8ab92336d1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92336d9: je     0x00007f8ab92337d4
  0x00007f8ab92336df: jmpq   0x00007f8ab9105c40
  0x00007f8ab92336e4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92336ec: je     0x00007f8ab92337d4
  0x00007f8ab92336f2: mov    %rsp,%r13
  0x00007f8ab92336f5: mov    (%rsp),%rax
  0x00007f8ab92336f9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92336fd: pushfq 
  0x00007f8ab92336fe: sub    $0x8,%rsp
  0x00007f8ab9233702: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9233707: sub    $0x80,%rsp
  0x00007f8ab923370e: mov    %rax,0x78(%rsp)
  0x00007f8ab9233713: mov    %rcx,0x70(%rsp)
  0x00007f8ab9233718: mov    %rdx,0x68(%rsp)
  0x00007f8ab923371d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9233722: mov    %rbp,0x50(%rsp)
  0x00007f8ab9233727: mov    %rsi,0x48(%rsp)
  0x00007f8ab923372c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9233731: mov    %r8,0x38(%rsp)
  0x00007f8ab9233736: mov    %r9,0x30(%rsp)
  0x00007f8ab923373b: mov    %r10,0x28(%rsp)
  0x00007f8ab9233740: mov    %r11,0x20(%rsp)
  0x00007f8ab9233745: mov    %r12,0x18(%rsp)
  0x00007f8ab923374a: mov    %r13,0x10(%rsp)
  0x00007f8ab923374f: mov    %r14,0x8(%rsp)
  0x00007f8ab9233754: mov    %r15,(%rsp)
  0x00007f8ab9233758: sub    $0x200,%rsp
  0x00007f8ab923375f: fxsave64 (%rsp)
  0x00007f8ab9233764: mov    %rbx,%rdi
  0x00007f8ab9233767: mov    %rax,%rsi
  0x00007f8ab923376a: callq  0x00007f8acef8bbca
  0x00007f8ab923376f: fxrstor64 (%rsp)
  0x00007f8ab9233774: add    $0x200,%rsp
  0x00007f8ab923377b: mov    (%rsp),%r15
  0x00007f8ab923377f: mov    0x8(%rsp),%r14
  0x00007f8ab9233784: mov    0x10(%rsp),%r13
  0x00007f8ab9233789: mov    0x18(%rsp),%r12
  0x00007f8ab923378e: mov    0x20(%rsp),%r11
  0x00007f8ab9233793: mov    0x28(%rsp),%r10
  0x00007f8ab9233798: mov    0x30(%rsp),%r9
  0x00007f8ab923379d: mov    0x38(%rsp),%r8
  0x00007f8ab92337a2: mov    0x40(%rsp),%rdi
  0x00007f8ab92337a7: mov    0x48(%rsp),%rsi
  0x00007f8ab92337ac: mov    0x50(%rsp),%rbp
  0x00007f8ab92337b1: mov    0x60(%rsp),%rbx
  0x00007f8ab92337b6: mov    0x68(%rsp),%rdx
  0x00007f8ab92337bb: mov    0x70(%rsp),%rcx
  0x00007f8ab92337c0: mov    0x78(%rsp),%rax
  0x00007f8ab92337c5: add    $0x80,%rsp
  0x00007f8ab92337cc: add    $0x8,%rsp
  0x00007f8ab92337d0: popfq  
  0x00007f8ab92337d1: mov    %r13,%rsp
  0x00007f8ab92337d4: pop    %rax
  0x00007f8ab92337d5: mov    %rsp,%r13
  0x00007f8ab92337d8: sub    $0x30,%rsp
  0x00007f8ab92337dc: mov    %rax,(%rsp)
  0x00007f8ab92337e0: mov    %esi,0x28(%rsp)
  0x00007f8ab92337e4: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab92337ee: mov    %rax,0x20(%rsp)
  0x00007f8ab92337f3: mov    %rdx,0x18(%rsp)
  0x00007f8ab92337f8: mov    %ecx,0x10(%rsp)
  0x00007f8ab92337fc: mov    %r8d,0x8(%rsp)
  0x00007f8ab9233801: mov    0x40(%rbx),%rcx
  0x00007f8ab9233805: jmpq   *%rcx

AHE@0x00007f8ac812fa90: 0xabaa0000 i2c: 0x00007f8ab92338e0 c2i: 0x00007f8ab9233a24 c2iUV: 0x00007f8ab92339f7
i2c argument handler #142 for: static (I[BII)I (600 bytes generated)
c2i argument handler starts at 0x7f8ab9233a24
  0x00007f8ab92338e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92338e4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92338ee: cmp    %r11,%rax
  0x00007f8ab92338f1: jbe    0x00007f8ab923390a
  0x00007f8ab92338f7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9233901: cmp    %r11,%rax
  0x00007f8ab9233904: jb     0x00007f8ab92339cd
  0x00007f8ab923390a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9233914: cmp    %r11,%rax
  0x00007f8ab9233917: jbe    0x00007f8ab9233930
  0x00007f8ab923391d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9233927: cmp    %r11,%rax
  0x00007f8ab923392a: jb     0x00007f8ab92339cd
  0x00007f8ab9233930: movabs $0x7f8ab9140820,%r11
  0x00007f8ab923393a: cmp    %r11,%rax
  0x00007f8ab923393d: jbe    0x00007f8ab9233956
  0x00007f8ab9233943: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923394d: cmp    %r11,%rax
  0x00007f8ab9233950: jb     0x00007f8ab92339cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9233956: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923395b: sub    $0x80,%rsp
  0x00007f8ab9233962: mov    %rax,0x78(%rsp)
  0x00007f8ab9233967: mov    %rcx,0x70(%rsp)
  0x00007f8ab923396c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9233971: mov    %rbx,0x60(%rsp)
  0x00007f8ab9233976: mov    %rbp,0x50(%rsp)
  0x00007f8ab923397b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9233980: mov    %rdi,0x40(%rsp)
  0x00007f8ab9233985: mov    %r8,0x38(%rsp)
  0x00007f8ab923398a: mov    %r9,0x30(%rsp)
  0x00007f8ab923398f: mov    %r10,0x28(%rsp)
  0x00007f8ab9233994: mov    %r11,0x20(%rsp)
  0x00007f8ab9233999: mov    %r12,0x18(%rsp)
  0x00007f8ab923399e: mov    %r13,0x10(%rsp)
  0x00007f8ab92339a3: mov    %r14,0x8(%rsp)
  0x00007f8ab92339a8: mov    %r15,(%rsp)
  0x00007f8ab92339ac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab92339b6: movabs $0x7f8ab9233956,%rsi
  0x00007f8ab92339c0: mov    %rsp,%rdx
  0x00007f8ab92339c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92339c7: callq  0x00007f8aceddb9fa
  0x00007f8ab92339cc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab92339cd: mov    %rsp,%r11
  0x00007f8ab92339d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92339d4: push   %rax
  0x00007f8ab92339d5: mov    %r11,%rax
  0x00007f8ab92339d8: mov    0x50(%rbx),%r11
  0x00007f8ab92339dc: mov    0x20(%rax),%esi
  0x00007f8ab92339df: mov    0x18(%rax),%rdx
  0x00007f8ab92339e3: mov    0x10(%rax),%ecx
  0x00007f8ab92339e6: mov    0x8(%rax),%r8d
  0x00007f8ab92339ea: mov    %rbx,0x258(%r15)
  0x00007f8ab92339f1: mov    %rbx,%rax
  0x00007f8ab92339f4: jmpq   *%r11
  0x00007f8ab92339f7: mov    0x8(%rsi),%ebx
  0x00007f8ab92339fa: shl    $0x3,%rbx
  0x00007f8ab92339fe: cmp    0x10(%rax),%rbx
  0x00007f8ab9233a02: mov    0x8(%rax),%rbx
  0x00007f8ab9233a06: je     0x00007f8ab9233a11
  0x00007f8ab9233a0c: jmpq   0x00007f8ab9105c40
  0x00007f8ab9233a11: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9233a19: je     0x00007f8ab9233b14
  0x00007f8ab9233a1f: jmpq   0x00007f8ab9105c40
  0x00007f8ab9233a24: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9233a2c: je     0x00007f8ab9233b14
  0x00007f8ab9233a32: mov    %rsp,%r13
  0x00007f8ab9233a35: mov    (%rsp),%rax
  0x00007f8ab9233a39: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233a3d: pushfq 
  0x00007f8ab9233a3e: sub    $0x8,%rsp
  0x00007f8ab9233a42: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9233a47: sub    $0x80,%rsp
  0x00007f8ab9233a4e: mov    %rax,0x78(%rsp)
  0x00007f8ab9233a53: mov    %rcx,0x70(%rsp)
  0x00007f8ab9233a58: mov    %rdx,0x68(%rsp)
  0x00007f8ab9233a5d: mov    %rbx,0x60(%rsp)
  0x00007f8ab9233a62: mov    %rbp,0x50(%rsp)
  0x00007f8ab9233a67: mov    %rsi,0x48(%rsp)
  0x00007f8ab9233a6c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9233a71: mov    %r8,0x38(%rsp)
  0x00007f8ab9233a76: mov    %r9,0x30(%rsp)
  0x00007f8ab9233a7b: mov    %r10,0x28(%rsp)
  0x00007f8ab9233a80: mov    %r11,0x20(%rsp)
  0x00007f8ab9233a85: mov    %r12,0x18(%rsp)
  0x00007f8ab9233a8a: mov    %r13,0x10(%rsp)
  0x00007f8ab9233a8f: mov    %r14,0x8(%rsp)
  0x00007f8ab9233a94: mov    %r15,(%rsp)
  0x00007f8ab9233a98: sub    $0x200,%rsp
  0x00007f8ab9233a9f: fxsave64 (%rsp)
  0x00007f8ab9233aa4: mov    %rbx,%rdi
  0x00007f8ab9233aa7: mov    %rax,%rsi
  0x00007f8ab9233aaa: callq  0x00007f8acef8bbca
  0x00007f8ab9233aaf: fxrstor64 (%rsp)
  0x00007f8ab9233ab4: add    $0x200,%rsp
  0x00007f8ab9233abb: mov    (%rsp),%r15
  0x00007f8ab9233abf: mov    0x8(%rsp),%r14
  0x00007f8ab9233ac4: mov    0x10(%rsp),%r13
  0x00007f8ab9233ac9: mov    0x18(%rsp),%r12
  0x00007f8ab9233ace: mov    0x20(%rsp),%r11
  0x00007f8ab9233ad3: mov    0x28(%rsp),%r10
  0x00007f8ab9233ad8: mov    0x30(%rsp),%r9
  0x00007f8ab9233add: mov    0x38(%rsp),%r8
  0x00007f8ab9233ae2: mov    0x40(%rsp),%rdi
  0x00007f8ab9233ae7: mov    0x48(%rsp),%rsi
  0x00007f8ab9233aec: mov    0x50(%rsp),%rbp
  0x00007f8ab9233af1: mov    0x60(%rsp),%rbx
  0x00007f8ab9233af6: mov    0x68(%rsp),%rdx
  0x00007f8ab9233afb: mov    0x70(%rsp),%rcx
  0x00007f8ab9233b00: mov    0x78(%rsp),%rax
  0x00007f8ab9233b05: add    $0x80,%rsp
  0x00007f8ab9233b0c: add    $0x8,%rsp
  0x00007f8ab9233b10: popfq  
  0x00007f8ab9233b11: mov    %r13,%rsp
  0x00007f8ab9233b14: pop    %rax
  0x00007f8ab9233b15: mov    %rsp,%r13
  0x00007f8ab9233b18: sub    $0x30,%rsp
  0x00007f8ab9233b1c: mov    %rax,(%rsp)
  0x00007f8ab9233b20: mov    %esi,0x20(%rsp)
  0x00007f8ab9233b24: mov    %rdx,0x18(%rsp)
  0x00007f8ab9233b29: mov    %ecx,0x10(%rsp)
  0x00007f8ab9233b2d: mov    %r8d,0x8(%rsp)
  0x00007f8ab9233b32: mov    0x40(%rbx),%rcx
  0x00007f8ab9233b36: jmpq   *%rcx

AHE@0x00007f8ac812fad8: 0xbbbbbbabbb000000 i2c: 0x00007f8ab9233be0 c2i: 0x00007f8ab9233d56 c2iUV: 0x00007f8ab9233d29
i2c argument handler #143 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (701 bytes generated)
c2i argument handler starts at 0x7f8ab9233d56
  0x00007f8ab9233be0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9233be4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9233bee: cmp    %r11,%rax
  0x00007f8ab9233bf1: jbe    0x00007f8ab9233c0a
  0x00007f8ab9233bf7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9233c01: cmp    %r11,%rax
  0x00007f8ab9233c04: jb     0x00007f8ab9233ccd
  0x00007f8ab9233c0a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9233c14: cmp    %r11,%rax
  0x00007f8ab9233c17: jbe    0x00007f8ab9233c30
  0x00007f8ab9233c1d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9233c27: cmp    %r11,%rax
  0x00007f8ab9233c2a: jb     0x00007f8ab9233ccd
  0x00007f8ab9233c30: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9233c3a: cmp    %r11,%rax
  0x00007f8ab9233c3d: jbe    0x00007f8ab9233c56
  0x00007f8ab9233c43: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9233c4d: cmp    %r11,%rax
  0x00007f8ab9233c50: jb     0x00007f8ab9233ccd
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9233c56: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9233c5b: sub    $0x80,%rsp
  0x00007f8ab9233c62: mov    %rax,0x78(%rsp)
  0x00007f8ab9233c67: mov    %rcx,0x70(%rsp)
  0x00007f8ab9233c6c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9233c71: mov    %rbx,0x60(%rsp)
  0x00007f8ab9233c76: mov    %rbp,0x50(%rsp)
  0x00007f8ab9233c7b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9233c80: mov    %rdi,0x40(%rsp)
  0x00007f8ab9233c85: mov    %r8,0x38(%rsp)
  0x00007f8ab9233c8a: mov    %r9,0x30(%rsp)
  0x00007f8ab9233c8f: mov    %r10,0x28(%rsp)
  0x00007f8ab9233c94: mov    %r11,0x20(%rsp)
  0x00007f8ab9233c99: mov    %r12,0x18(%rsp)
  0x00007f8ab9233c9e: mov    %r13,0x10(%rsp)
  0x00007f8ab9233ca3: mov    %r14,0x8(%rsp)
  0x00007f8ab9233ca8: mov    %r15,(%rsp)
  0x00007f8ab9233cac: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9233cb6: movabs $0x7f8ab9233c56,%rsi
  0x00007f8ab9233cc0: mov    %rsp,%rdx
  0x00007f8ab9233cc3: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233cc7: callq  0x00007f8aceddb9fa
  0x00007f8ab9233ccc: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9233ccd: mov    %rsp,%r11
  0x00007f8ab9233cd0: sub    $0x20,%rsp
  0x00007f8ab9233cd4: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233cd8: push   %rax
  0x00007f8ab9233cd9: mov    %r11,%rax
  0x00007f8ab9233cdc: mov    0x50(%rbx),%r11
  0x00007f8ab9233ce0: mov    0x50(%rax),%rsi
  0x00007f8ab9233ce4: mov    0x48(%rax),%rdx
  0x00007f8ab9233ce8: mov    0x40(%rax),%rcx
  0x00007f8ab9233cec: mov    0x38(%rax),%r8
  0x00007f8ab9233cf0: mov    0x30(%rax),%r9
  0x00007f8ab9233cf4: mov    0x28(%rax),%rdi
  0x00007f8ab9233cf8: mov    0x20(%rax),%r13d
  0x00007f8ab9233cfc: mov    %r13,0x8(%rsp)
  0x00007f8ab9233d01: mov    0x18(%rax),%r13
  0x00007f8ab9233d05: mov    %r13,0x10(%rsp)
  0x00007f8ab9233d0a: mov    0x10(%rax),%r13
  0x00007f8ab9233d0e: mov    %r13,0x18(%rsp)
  0x00007f8ab9233d13: mov    0x8(%rax),%r13
  0x00007f8ab9233d17: mov    %r13,0x20(%rsp)
  0x00007f8ab9233d1c: mov    %rbx,0x258(%r15)
  0x00007f8ab9233d23: mov    %rbx,%rax
  0x00007f8ab9233d26: jmpq   *%r11
  0x00007f8ab9233d29: mov    0x8(%rsi),%ebx
  0x00007f8ab9233d2c: shl    $0x3,%rbx
  0x00007f8ab9233d30: cmp    0x10(%rax),%rbx
  0x00007f8ab9233d34: mov    0x8(%rax),%rbx
  0x00007f8ab9233d38: je     0x00007f8ab9233d43
  0x00007f8ab9233d3e: jmpq   0x00007f8ab9105c40
  0x00007f8ab9233d43: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9233d4b: je     0x00007f8ab9233e46
  0x00007f8ab9233d51: jmpq   0x00007f8ab9105c40
  0x00007f8ab9233d56: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9233d5e: je     0x00007f8ab9233e46
  0x00007f8ab9233d64: mov    %rsp,%r13
  0x00007f8ab9233d67: mov    (%rsp),%rax
  0x00007f8ab9233d6b: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9233d6f: pushfq 
  0x00007f8ab9233d70: sub    $0x8,%rsp
  0x00007f8ab9233d74: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9233d79: sub    $0x80,%rsp
  0x00007f8ab9233d80: mov    %rax,0x78(%rsp)
  0x00007f8ab9233d85: mov    %rcx,0x70(%rsp)
  0x00007f8ab9233d8a: mov    %rdx,0x68(%rsp)
  0x00007f8ab9233d8f: mov    %rbx,0x60(%rsp)
  0x00007f8ab9233d94: mov    %rbp,0x50(%rsp)
  0x00007f8ab9233d99: mov    %rsi,0x48(%rsp)
  0x00007f8ab9233d9e: mov    %rdi,0x40(%rsp)
  0x00007f8ab9233da3: mov    %r8,0x38(%rsp)
  0x00007f8ab9233da8: mov    %r9,0x30(%rsp)
  0x00007f8ab9233dad: mov    %r10,0x28(%rsp)
  0x00007f8ab9233db2: mov    %r11,0x20(%rsp)
  0x00007f8ab9233db7: mov    %r12,0x18(%rsp)
  0x00007f8ab9233dbc: mov    %r13,0x10(%rsp)
  0x00007f8ab9233dc1: mov    %r14,0x8(%rsp)
  0x00007f8ab9233dc6: mov    %r15,(%rsp)
  0x00007f8ab9233dca: sub    $0x200,%rsp
  0x00007f8ab9233dd1: fxsave64 (%rsp)
  0x00007f8ab9233dd6: mov    %rbx,%rdi
  0x00007f8ab9233dd9: mov    %rax,%rsi
  0x00007f8ab9233ddc: callq  0x00007f8acef8bbca
  0x00007f8ab9233de1: fxrstor64 (%rsp)
  0x00007f8ab9233de6: add    $0x200,%rsp
  0x00007f8ab9233ded: mov    (%rsp),%r15
  0x00007f8ab9233df1: mov    0x8(%rsp),%r14
  0x00007f8ab9233df6: mov    0x10(%rsp),%r13
  0x00007f8ab9233dfb: mov    0x18(%rsp),%r12
  0x00007f8ab9233e00: mov    0x20(%rsp),%r11
  0x00007f8ab9233e05: mov    0x28(%rsp),%r10
  0x00007f8ab9233e0a: mov    0x30(%rsp),%r9
  0x00007f8ab9233e0f: mov    0x38(%rsp),%r8
  0x00007f8ab9233e14: mov    0x40(%rsp),%rdi
  0x00007f8ab9233e19: mov    0x48(%rsp),%rsi
  0x00007f8ab9233e1e: mov    0x50(%rsp),%rbp
  0x00007f8ab9233e23: mov    0x60(%rsp),%rbx
  0x00007f8ab9233e28: mov    0x68(%rsp),%rdx
  0x00007f8ab9233e2d: mov    0x70(%rsp),%rcx
  0x00007f8ab9233e32: mov    0x78(%rsp),%rax
  0x00007f8ab9233e37: add    $0x80,%rsp
  0x00007f8ab9233e3e: add    $0x8,%rsp
  0x00007f8ab9233e42: popfq  
  0x00007f8ab9233e43: mov    %r13,%rsp
  0x00007f8ab9233e46: pop    %rax
  0x00007f8ab9233e47: mov    %rsp,%r13
  0x00007f8ab9233e4a: sub    $0x60,%rsp
  0x00007f8ab9233e4e: mov    %rax,(%rsp)
  0x00007f8ab9233e52: mov    %rsi,0x50(%rsp)
  0x00007f8ab9233e57: mov    %rdx,0x48(%rsp)
  0x00007f8ab9233e5c: mov    %rcx,0x40(%rsp)
  0x00007f8ab9233e61: mov    %r8,0x38(%rsp)
  0x00007f8ab9233e66: mov    %r9,0x30(%rsp)
  0x00007f8ab9233e6b: mov    %rdi,0x28(%rsp)
  0x00007f8ab9233e70: mov    0x60(%rsp),%eax
  0x00007f8ab9233e74: mov    %rax,0x20(%rsp)
  0x00007f8ab9233e79: mov    0x68(%rsp),%rax
  0x00007f8ab9233e7e: mov    %rax,0x18(%rsp)
  0x00007f8ab9233e83: mov    0x70(%rsp),%rax
  0x00007f8ab9233e88: mov    %rax,0x10(%rsp)
  0x00007f8ab9233e8d: mov    0x78(%rsp),%rax
  0x00007f8ab9233e92: mov    %rax,0x8(%rsp)
  0x00007f8ab9233e97: mov    0x40(%rbx),%rcx
  0x00007f8ab9233e9b: jmpq   *%rcx

AHE@0x00007f8ac812fb20: 0xbbbbabbb i2c: 0x00007f8ab9233f60 c2i: 0x00007f8ab92340c4 c2iUV: 0x00007f8ab9234097
i2c argument handler #144 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V (664 bytes generated)
c2i argument handler starts at 0x7f8ab92340c4
  0x00007f8ab9233f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9233f64: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9233f6e: cmp    %r11,%rax
  0x00007f8ab9233f71: jbe    0x00007f8ab9233f8a
  0x00007f8ab9233f77: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9233f81: cmp    %r11,%rax
  0x00007f8ab9233f84: jb     0x00007f8ab923404d
  0x00007f8ab9233f8a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9233f94: cmp    %r11,%rax
  0x00007f8ab9233f97: jbe    0x00007f8ab9233fb0
  0x00007f8ab9233f9d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9233fa7: cmp    %r11,%rax
  0x00007f8ab9233faa: jb     0x00007f8ab923404d
  0x00007f8ab9233fb0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9233fba: cmp    %r11,%rax
  0x00007f8ab9233fbd: jbe    0x00007f8ab9233fd6
  0x00007f8ab9233fc3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9233fcd: cmp    %r11,%rax
  0x00007f8ab9233fd0: jb     0x00007f8ab923404d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9233fd6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9233fdb: sub    $0x80,%rsp
  0x00007f8ab9233fe2: mov    %rax,0x78(%rsp)
  0x00007f8ab9233fe7: mov    %rcx,0x70(%rsp)
  0x00007f8ab9233fec: mov    %rdx,0x68(%rsp)
  0x00007f8ab9233ff1: mov    %rbx,0x60(%rsp)
  0x00007f8ab9233ff6: mov    %rbp,0x50(%rsp)
  0x00007f8ab9233ffb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9234000: mov    %rdi,0x40(%rsp)
  0x00007f8ab9234005: mov    %r8,0x38(%rsp)
  0x00007f8ab923400a: mov    %r9,0x30(%rsp)
  0x00007f8ab923400f: mov    %r10,0x28(%rsp)
  0x00007f8ab9234014: mov    %r11,0x20(%rsp)
  0x00007f8ab9234019: mov    %r12,0x18(%rsp)
  0x00007f8ab923401e: mov    %r13,0x10(%rsp)
  0x00007f8ab9234023: mov    %r14,0x8(%rsp)
  0x00007f8ab9234028: mov    %r15,(%rsp)
  0x00007f8ab923402c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9234036: movabs $0x7f8ab9233fd6,%rsi
  0x00007f8ab9234040: mov    %rsp,%rdx
  0x00007f8ab9234043: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234047: callq  0x00007f8aceddb9fa
  0x00007f8ab923404c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923404d: mov    %rsp,%r11
  0x00007f8ab9234050: sub    $0x10,%rsp
  0x00007f8ab9234054: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234058: push   %rax
  0x00007f8ab9234059: mov    %r11,%rax
  0x00007f8ab923405c: mov    0x50(%rbx),%r11
  0x00007f8ab9234060: mov    0x40(%rax),%rsi
  0x00007f8ab9234064: mov    0x38(%rax),%rdx
  0x00007f8ab9234068: mov    0x30(%rax),%rcx
  0x00007f8ab923406c: mov    0x28(%rax),%r8
  0x00007f8ab9234070: mov    0x20(%rax),%r9d
  0x00007f8ab9234074: mov    0x18(%rax),%rdi
  0x00007f8ab9234078: mov    0x10(%rax),%r13
  0x00007f8ab923407c: mov    %r13,0x8(%rsp)
  0x00007f8ab9234081: mov    0x8(%rax),%r13
  0x00007f8ab9234085: mov    %r13,0x10(%rsp)
  0x00007f8ab923408a: mov    %rbx,0x258(%r15)
  0x00007f8ab9234091: mov    %rbx,%rax
  0x00007f8ab9234094: jmpq   *%r11
  0x00007f8ab9234097: mov    0x8(%rsi),%ebx
  0x00007f8ab923409a: shl    $0x3,%rbx
  0x00007f8ab923409e: cmp    0x10(%rax),%rbx
  0x00007f8ab92340a2: mov    0x8(%rax),%rbx
  0x00007f8ab92340a6: je     0x00007f8ab92340b1
  0x00007f8ab92340ac: jmpq   0x00007f8ab9105c40
  0x00007f8ab92340b1: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92340b9: je     0x00007f8ab92341b4
  0x00007f8ab92340bf: jmpq   0x00007f8ab9105c40
  0x00007f8ab92340c4: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab92340cc: je     0x00007f8ab92341b4
  0x00007f8ab92340d2: mov    %rsp,%r13
  0x00007f8ab92340d5: mov    (%rsp),%rax
  0x00007f8ab92340d9: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab92340dd: pushfq 
  0x00007f8ab92340de: sub    $0x8,%rsp
  0x00007f8ab92340e2: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92340e7: sub    $0x80,%rsp
  0x00007f8ab92340ee: mov    %rax,0x78(%rsp)
  0x00007f8ab92340f3: mov    %rcx,0x70(%rsp)
  0x00007f8ab92340f8: mov    %rdx,0x68(%rsp)
  0x00007f8ab92340fd: mov    %rbx,0x60(%rsp)
  0x00007f8ab9234102: mov    %rbp,0x50(%rsp)
  0x00007f8ab9234107: mov    %rsi,0x48(%rsp)
  0x00007f8ab923410c: mov    %rdi,0x40(%rsp)
  0x00007f8ab9234111: mov    %r8,0x38(%rsp)
  0x00007f8ab9234116: mov    %r9,0x30(%rsp)
  0x00007f8ab923411b: mov    %r10,0x28(%rsp)
  0x00007f8ab9234120: mov    %r11,0x20(%rsp)
  0x00007f8ab9234125: mov    %r12,0x18(%rsp)
  0x00007f8ab923412a: mov    %r13,0x10(%rsp)
  0x00007f8ab923412f: mov    %r14,0x8(%rsp)
  0x00007f8ab9234134: mov    %r15,(%rsp)
  0x00007f8ab9234138: sub    $0x200,%rsp
  0x00007f8ab923413f: fxsave64 (%rsp)
  0x00007f8ab9234144: mov    %rbx,%rdi
  0x00007f8ab9234147: mov    %rax,%rsi
  0x00007f8ab923414a: callq  0x00007f8acef8bbca
  0x00007f8ab923414f: fxrstor64 (%rsp)
  0x00007f8ab9234154: add    $0x200,%rsp
  0x00007f8ab923415b: mov    (%rsp),%r15
  0x00007f8ab923415f: mov    0x8(%rsp),%r14
  0x00007f8ab9234164: mov    0x10(%rsp),%r13
  0x00007f8ab9234169: mov    0x18(%rsp),%r12
  0x00007f8ab923416e: mov    0x20(%rsp),%r11
  0x00007f8ab9234173: mov    0x28(%rsp),%r10
  0x00007f8ab9234178: mov    0x30(%rsp),%r9
  0x00007f8ab923417d: mov    0x38(%rsp),%r8
  0x00007f8ab9234182: mov    0x40(%rsp),%rdi
  0x00007f8ab9234187: mov    0x48(%rsp),%rsi
  0x00007f8ab923418c: mov    0x50(%rsp),%rbp
  0x00007f8ab9234191: mov    0x60(%rsp),%rbx
  0x00007f8ab9234196: mov    0x68(%rsp),%rdx
  0x00007f8ab923419b: mov    0x70(%rsp),%rcx
  0x00007f8ab92341a0: mov    0x78(%rsp),%rax
  0x00007f8ab92341a5: add    $0x80,%rsp
  0x00007f8ab92341ac: add    $0x8,%rsp
  0x00007f8ab92341b0: popfq  
  0x00007f8ab92341b1: mov    %r13,%rsp
  0x00007f8ab92341b4: pop    %rax
  0x00007f8ab92341b5: mov    %rsp,%r13
  0x00007f8ab92341b8: sub    $0x50,%rsp
  0x00007f8ab92341bc: mov    %rax,(%rsp)
  0x00007f8ab92341c0: mov    %rsi,0x40(%rsp)
  0x00007f8ab92341c5: mov    %rdx,0x38(%rsp)
  0x00007f8ab92341ca: mov    %rcx,0x30(%rsp)
  0x00007f8ab92341cf: mov    %r8,0x28(%rsp)
  0x00007f8ab92341d4: mov    %r9d,0x20(%rsp)
  0x00007f8ab92341d9: mov    %rdi,0x18(%rsp)
  0x00007f8ab92341de: mov    0x50(%rsp),%rax
  0x00007f8ab92341e3: mov    %rax,0x10(%rsp)
  0x00007f8ab92341e8: mov    0x58(%rsp),%rax
  0x00007f8ab92341ed: mov    %rax,0x8(%rsp)
  0x00007f8ab92341f2: mov    0x40(%rbx),%rcx
  0x00007f8ab92341f6: jmpq   *%rcx

AHE@0x00007f8ac812fb68: 0xbbbbbbabb0000000 i2c: 0x00007f8ab92342a0 c2i: 0x00007f8ab923440d c2iUV: 0x00007f8ab92343e0
i2c argument handler #145 for: receiver (Ljava/lang/StringBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (682 bytes generated)
c2i argument handler starts at 0x7f8ab923440d
  0x00007f8ab92342a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab92342a4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab92342ae: cmp    %r11,%rax
  0x00007f8ab92342b1: jbe    0x00007f8ab92342ca
  0x00007f8ab92342b7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab92342c1: cmp    %r11,%rax
  0x00007f8ab92342c4: jb     0x00007f8ab923438d
  0x00007f8ab92342ca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab92342d4: cmp    %r11,%rax
  0x00007f8ab92342d7: jbe    0x00007f8ab92342f0
  0x00007f8ab92342dd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92342e7: cmp    %r11,%rax
  0x00007f8ab92342ea: jb     0x00007f8ab923438d
  0x00007f8ab92342f0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92342fa: cmp    %r11,%rax
  0x00007f8ab92342fd: jbe    0x00007f8ab9234316
  0x00007f8ab9234303: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923430d: cmp    %r11,%rax
  0x00007f8ab9234310: jb     0x00007f8ab923438d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9234316: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923431b: sub    $0x80,%rsp
  0x00007f8ab9234322: mov    %rax,0x78(%rsp)
  0x00007f8ab9234327: mov    %rcx,0x70(%rsp)
  0x00007f8ab923432c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9234331: mov    %rbx,0x60(%rsp)
  0x00007f8ab9234336: mov    %rbp,0x50(%rsp)
  0x00007f8ab923433b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9234340: mov    %rdi,0x40(%rsp)
  0x00007f8ab9234345: mov    %r8,0x38(%rsp)
  0x00007f8ab923434a: mov    %r9,0x30(%rsp)
  0x00007f8ab923434f: mov    %r10,0x28(%rsp)
  0x00007f8ab9234354: mov    %r11,0x20(%rsp)
  0x00007f8ab9234359: mov    %r12,0x18(%rsp)
  0x00007f8ab923435e: mov    %r13,0x10(%rsp)
  0x00007f8ab9234363: mov    %r14,0x8(%rsp)
  0x00007f8ab9234368: mov    %r15,(%rsp)
  0x00007f8ab923436c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9234376: movabs $0x7f8ab9234316,%rsi
  0x00007f8ab9234380: mov    %rsp,%rdx
  0x00007f8ab9234383: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234387: callq  0x00007f8aceddb9fa
  0x00007f8ab923438c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923438d: mov    %rsp,%r11
  0x00007f8ab9234390: sub    $0x20,%rsp
  0x00007f8ab9234394: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234398: push   %rax
  0x00007f8ab9234399: mov    %r11,%rax
  0x00007f8ab923439c: mov    0x50(%rbx),%r11
  0x00007f8ab92343a0: mov    0x48(%rax),%rsi
  0x00007f8ab92343a4: mov    0x40(%rax),%rdx
  0x00007f8ab92343a8: mov    0x38(%rax),%rcx
  0x00007f8ab92343ac: mov    0x30(%rax),%r8
  0x00007f8ab92343b0: mov    0x28(%rax),%r9
  0x00007f8ab92343b4: mov    0x20(%rax),%rdi
  0x00007f8ab92343b8: mov    0x18(%rax),%r13d
  0x00007f8ab92343bc: mov    %r13,0x8(%rsp)
  0x00007f8ab92343c1: mov    0x10(%rax),%r13
  0x00007f8ab92343c5: mov    %r13,0x10(%rsp)
  0x00007f8ab92343ca: mov    0x8(%rax),%r13
  0x00007f8ab92343ce: mov    %r13,0x18(%rsp)
  0x00007f8ab92343d3: mov    %rbx,0x258(%r15)
  0x00007f8ab92343da: mov    %rbx,%rax
  0x00007f8ab92343dd: jmpq   *%r11
  0x00007f8ab92343e0: mov    0x8(%rsi),%ebx
  0x00007f8ab92343e3: shl    $0x3,%rbx
  0x00007f8ab92343e7: cmp    0x10(%rax),%rbx
  0x00007f8ab92343eb: mov    0x8(%rax),%rbx
  0x00007f8ab92343ef: je     0x00007f8ab92343fa
  0x00007f8ab92343f5: jmpq   0x00007f8ab9105c40
  0x00007f8ab92343fa: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9234402: je     0x00007f8ab92344fd
  0x00007f8ab9234408: jmpq   0x00007f8ab9105c40
  0x00007f8ab923440d: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9234415: je     0x00007f8ab92344fd
  0x00007f8ab923441b: mov    %rsp,%r13
  0x00007f8ab923441e: mov    (%rsp),%rax
  0x00007f8ab9234422: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234426: pushfq 
  0x00007f8ab9234427: sub    $0x8,%rsp
  0x00007f8ab923442b: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9234430: sub    $0x80,%rsp
  0x00007f8ab9234437: mov    %rax,0x78(%rsp)
  0x00007f8ab923443c: mov    %rcx,0x70(%rsp)
  0x00007f8ab9234441: mov    %rdx,0x68(%rsp)
  0x00007f8ab9234446: mov    %rbx,0x60(%rsp)
  0x00007f8ab923444b: mov    %rbp,0x50(%rsp)
  0x00007f8ab9234450: mov    %rsi,0x48(%rsp)
  0x00007f8ab9234455: mov    %rdi,0x40(%rsp)
  0x00007f8ab923445a: mov    %r8,0x38(%rsp)
  0x00007f8ab923445f: mov    %r9,0x30(%rsp)
  0x00007f8ab9234464: mov    %r10,0x28(%rsp)
  0x00007f8ab9234469: mov    %r11,0x20(%rsp)
  0x00007f8ab923446e: mov    %r12,0x18(%rsp)
  0x00007f8ab9234473: mov    %r13,0x10(%rsp)
  0x00007f8ab9234478: mov    %r14,0x8(%rsp)
  0x00007f8ab923447d: mov    %r15,(%rsp)
  0x00007f8ab9234481: sub    $0x200,%rsp
  0x00007f8ab9234488: fxsave64 (%rsp)
  0x00007f8ab923448d: mov    %rbx,%rdi
  0x00007f8ab9234490: mov    %rax,%rsi
  0x00007f8ab9234493: callq  0x00007f8acef8bbca
  0x00007f8ab9234498: fxrstor64 (%rsp)
  0x00007f8ab923449d: add    $0x200,%rsp
  0x00007f8ab92344a4: mov    (%rsp),%r15
  0x00007f8ab92344a8: mov    0x8(%rsp),%r14
  0x00007f8ab92344ad: mov    0x10(%rsp),%r13
  0x00007f8ab92344b2: mov    0x18(%rsp),%r12
  0x00007f8ab92344b7: mov    0x20(%rsp),%r11
  0x00007f8ab92344bc: mov    0x28(%rsp),%r10
  0x00007f8ab92344c1: mov    0x30(%rsp),%r9
  0x00007f8ab92344c6: mov    0x38(%rsp),%r8
  0x00007f8ab92344cb: mov    0x40(%rsp),%rdi
  0x00007f8ab92344d0: mov    0x48(%rsp),%rsi
  0x00007f8ab92344d5: mov    0x50(%rsp),%rbp
  0x00007f8ab92344da: mov    0x60(%rsp),%rbx
  0x00007f8ab92344df: mov    0x68(%rsp),%rdx
  0x00007f8ab92344e4: mov    0x70(%rsp),%rcx
  0x00007f8ab92344e9: mov    0x78(%rsp),%rax
  0x00007f8ab92344ee: add    $0x80,%rsp
  0x00007f8ab92344f5: add    $0x8,%rsp
  0x00007f8ab92344f9: popfq  
  0x00007f8ab92344fa: mov    %r13,%rsp
  0x00007f8ab92344fd: pop    %rax
  0x00007f8ab92344fe: mov    %rsp,%r13
  0x00007f8ab9234501: sub    $0x50,%rsp
  0x00007f8ab9234505: mov    %rax,(%rsp)
  0x00007f8ab9234509: mov    %rsi,0x48(%rsp)
  0x00007f8ab923450e: mov    %rdx,0x40(%rsp)
  0x00007f8ab9234513: mov    %rcx,0x38(%rsp)
  0x00007f8ab9234518: mov    %r8,0x30(%rsp)
  0x00007f8ab923451d: mov    %r9,0x28(%rsp)
  0x00007f8ab9234522: mov    %rdi,0x20(%rsp)
  0x00007f8ab9234527: mov    0x50(%rsp),%eax
  0x00007f8ab923452b: mov    %rax,0x18(%rsp)
  0x00007f8ab9234530: mov    0x58(%rsp),%rax
  0x00007f8ab9234535: mov    %rax,0x10(%rsp)
  0x00007f8ab923453a: mov    0x60(%rsp),%rax
  0x00007f8ab923453f: mov    %rax,0x8(%rsp)
  0x00007f8ab9234544: mov    0x40(%rbx),%rcx
  0x00007f8ab9234548: jmpq   *%rcx

AHE@0x00007f8ac812fbb0: 0xbaabebe0 i2c: 0x00007f8ab9234620 c2i: 0x00007f8ab9234768 c2iUV: 0x00007f8ab923473b
i2c argument handler #146 for: receiver (IIJJ)I (639 bytes generated)
c2i argument handler starts at 0x7f8ab9234768
  0x00007f8ab9234620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9234624: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab923462e: cmp    %r11,%rax
  0x00007f8ab9234631: jbe    0x00007f8ab923464a
  0x00007f8ab9234637: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9234641: cmp    %r11,%rax
  0x00007f8ab9234644: jb     0x00007f8ab923470d
  0x00007f8ab923464a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9234654: cmp    %r11,%rax
  0x00007f8ab9234657: jbe    0x00007f8ab9234670
  0x00007f8ab923465d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9234667: cmp    %r11,%rax
  0x00007f8ab923466a: jb     0x00007f8ab923470d
  0x00007f8ab9234670: movabs $0x7f8ab9140820,%r11
  0x00007f8ab923467a: cmp    %r11,%rax
  0x00007f8ab923467d: jbe    0x00007f8ab9234696
  0x00007f8ab9234683: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab923468d: cmp    %r11,%rax
  0x00007f8ab9234690: jb     0x00007f8ab923470d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9234696: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923469b: sub    $0x80,%rsp
  0x00007f8ab92346a2: mov    %rax,0x78(%rsp)
  0x00007f8ab92346a7: mov    %rcx,0x70(%rsp)
  0x00007f8ab92346ac: mov    %rdx,0x68(%rsp)
  0x00007f8ab92346b1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92346b6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92346bb: mov    %rsi,0x48(%rsp)
  0x00007f8ab92346c0: mov    %rdi,0x40(%rsp)
  0x00007f8ab92346c5: mov    %r8,0x38(%rsp)
  0x00007f8ab92346ca: mov    %r9,0x30(%rsp)
  0x00007f8ab92346cf: mov    %r10,0x28(%rsp)
  0x00007f8ab92346d4: mov    %r11,0x20(%rsp)
  0x00007f8ab92346d9: mov    %r12,0x18(%rsp)
  0x00007f8ab92346de: mov    %r13,0x10(%rsp)
  0x00007f8ab92346e3: mov    %r14,0x8(%rsp)
  0x00007f8ab92346e8: mov    %r15,(%rsp)
  0x00007f8ab92346ec: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab92346f6: movabs $0x7f8ab9234696,%rsi
  0x00007f8ab9234700: mov    %rsp,%rdx
  0x00007f8ab9234703: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234707: callq  0x00007f8aceddb9fa
  0x00007f8ab923470c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab923470d: mov    %rsp,%r11
  0x00007f8ab9234710: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234714: push   %rax
  0x00007f8ab9234715: mov    %r11,%rax
  0x00007f8ab9234718: mov    0x50(%rbx),%r11
  0x00007f8ab923471c: mov    0x38(%rax),%rsi
  0x00007f8ab9234720: mov    0x30(%rax),%edx
  0x00007f8ab9234723: mov    0x28(%rax),%ecx
  0x00007f8ab9234726: mov    0x18(%rax),%r8
  0x00007f8ab923472a: mov    0x8(%rax),%r9
  0x00007f8ab923472e: mov    %rbx,0x258(%r15)
  0x00007f8ab9234735: mov    %rbx,%rax
  0x00007f8ab9234738: jmpq   *%r11
  0x00007f8ab923473b: mov    0x8(%rsi),%ebx
  0x00007f8ab923473e: shl    $0x3,%rbx
  0x00007f8ab9234742: cmp    0x10(%rax),%rbx
  0x00007f8ab9234746: mov    0x8(%rax),%rbx
  0x00007f8ab923474a: je     0x00007f8ab9234755
  0x00007f8ab9234750: jmpq   0x00007f8ab9105c40
  0x00007f8ab9234755: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab923475d: je     0x00007f8ab9234858
  0x00007f8ab9234763: jmpq   0x00007f8ab9105c40
  0x00007f8ab9234768: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9234770: je     0x00007f8ab9234858
  0x00007f8ab9234776: mov    %rsp,%r13
  0x00007f8ab9234779: mov    (%rsp),%rax
  0x00007f8ab923477d: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234781: pushfq 
  0x00007f8ab9234782: sub    $0x8,%rsp
  0x00007f8ab9234786: mov    %rsp,-0x28(%rsp)
  0x00007f8ab923478b: sub    $0x80,%rsp
  0x00007f8ab9234792: mov    %rax,0x78(%rsp)
  0x00007f8ab9234797: mov    %rcx,0x70(%rsp)
  0x00007f8ab923479c: mov    %rdx,0x68(%rsp)
  0x00007f8ab92347a1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92347a6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92347ab: mov    %rsi,0x48(%rsp)
  0x00007f8ab92347b0: mov    %rdi,0x40(%rsp)
  0x00007f8ab92347b5: mov    %r8,0x38(%rsp)
  0x00007f8ab92347ba: mov    %r9,0x30(%rsp)
  0x00007f8ab92347bf: mov    %r10,0x28(%rsp)
  0x00007f8ab92347c4: mov    %r11,0x20(%rsp)
  0x00007f8ab92347c9: mov    %r12,0x18(%rsp)
  0x00007f8ab92347ce: mov    %r13,0x10(%rsp)
  0x00007f8ab92347d3: mov    %r14,0x8(%rsp)
  0x00007f8ab92347d8: mov    %r15,(%rsp)
  0x00007f8ab92347dc: sub    $0x200,%rsp
  0x00007f8ab92347e3: fxsave64 (%rsp)
  0x00007f8ab92347e8: mov    %rbx,%rdi
  0x00007f8ab92347eb: mov    %rax,%rsi
  0x00007f8ab92347ee: callq  0x00007f8acef8bbca
  0x00007f8ab92347f3: fxrstor64 (%rsp)
  0x00007f8ab92347f8: add    $0x200,%rsp
  0x00007f8ab92347ff: mov    (%rsp),%r15
  0x00007f8ab9234803: mov    0x8(%rsp),%r14
  0x00007f8ab9234808: mov    0x10(%rsp),%r13
  0x00007f8ab923480d: mov    0x18(%rsp),%r12
  0x00007f8ab9234812: mov    0x20(%rsp),%r11
  0x00007f8ab9234817: mov    0x28(%rsp),%r10
  0x00007f8ab923481c: mov    0x30(%rsp),%r9
  0x00007f8ab9234821: mov    0x38(%rsp),%r8
  0x00007f8ab9234826: mov    0x40(%rsp),%rdi
  0x00007f8ab923482b: mov    0x48(%rsp),%rsi
  0x00007f8ab9234830: mov    0x50(%rsp),%rbp
  0x00007f8ab9234835: mov    0x60(%rsp),%rbx
  0x00007f8ab923483a: mov    0x68(%rsp),%rdx
  0x00007f8ab923483f: mov    0x70(%rsp),%rcx
  0x00007f8ab9234844: mov    0x78(%rsp),%rax
  0x00007f8ab9234849: add    $0x80,%rsp
  0x00007f8ab9234850: add    $0x8,%rsp
  0x00007f8ab9234854: popfq  
  0x00007f8ab9234855: mov    %r13,%rsp
  0x00007f8ab9234858: pop    %rax
  0x00007f8ab9234859: mov    %rsp,%r13
  0x00007f8ab923485c: sub    $0x40,%rsp
  0x00007f8ab9234860: mov    %rax,(%rsp)
  0x00007f8ab9234864: mov    %rsi,0x38(%rsp)
  0x00007f8ab9234869: mov    %edx,0x30(%rsp)
  0x00007f8ab923486d: mov    %ecx,0x28(%rsp)
  0x00007f8ab9234871: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab923487b: mov    %rax,0x20(%rsp)
  0x00007f8ab9234880: mov    %r8,0x18(%rsp)
  0x00007f8ab9234885: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab923488f: mov    %rax,0x10(%rsp)
  0x00007f8ab9234894: mov    %r9,0x8(%rsp)
  0x00007f8ab9234899: mov    0x40(%rbx),%rcx
  0x00007f8ab923489d: jmpq   *%rcx

AHE@0x00007f8ac812fbf8: 0xbabebeb0 i2c: 0x00007f8ab9234960 c2i: 0x00007f8ab9234aa9 c2iUV: 0x00007f8ab9234a7c
i2c argument handler #147 for: receiver (IJJLjava/lang/String;)V (641 bytes generated)
c2i argument handler starts at 0x7f8ab9234aa9
  0x00007f8ab9234960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9234964: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab923496e: cmp    %r11,%rax
  0x00007f8ab9234971: jbe    0x00007f8ab923498a
  0x00007f8ab9234977: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9234981: cmp    %r11,%rax
  0x00007f8ab9234984: jb     0x00007f8ab9234a4d
  0x00007f8ab923498a: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9234994: cmp    %r11,%rax
  0x00007f8ab9234997: jbe    0x00007f8ab92349b0
  0x00007f8ab923499d: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab92349a7: cmp    %r11,%rax
  0x00007f8ab92349aa: jb     0x00007f8ab9234a4d
  0x00007f8ab92349b0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab92349ba: cmp    %r11,%rax
  0x00007f8ab92349bd: jbe    0x00007f8ab92349d6
  0x00007f8ab92349c3: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab92349cd: cmp    %r11,%rax
  0x00007f8ab92349d0: jb     0x00007f8ab9234a4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab92349d6: mov    %rsp,-0x28(%rsp)
  0x00007f8ab92349db: sub    $0x80,%rsp
  0x00007f8ab92349e2: mov    %rax,0x78(%rsp)
  0x00007f8ab92349e7: mov    %rcx,0x70(%rsp)
  0x00007f8ab92349ec: mov    %rdx,0x68(%rsp)
  0x00007f8ab92349f1: mov    %rbx,0x60(%rsp)
  0x00007f8ab92349f6: mov    %rbp,0x50(%rsp)
  0x00007f8ab92349fb: mov    %rsi,0x48(%rsp)
  0x00007f8ab9234a00: mov    %rdi,0x40(%rsp)
  0x00007f8ab9234a05: mov    %r8,0x38(%rsp)
  0x00007f8ab9234a0a: mov    %r9,0x30(%rsp)
  0x00007f8ab9234a0f: mov    %r10,0x28(%rsp)
  0x00007f8ab9234a14: mov    %r11,0x20(%rsp)
  0x00007f8ab9234a19: mov    %r12,0x18(%rsp)
  0x00007f8ab9234a1e: mov    %r13,0x10(%rsp)
  0x00007f8ab9234a23: mov    %r14,0x8(%rsp)
  0x00007f8ab9234a28: mov    %r15,(%rsp)
  0x00007f8ab9234a2c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9234a36: movabs $0x7f8ab92349d6,%rsi
  0x00007f8ab9234a40: mov    %rsp,%rdx
  0x00007f8ab9234a43: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234a47: callq  0x00007f8aceddb9fa
  0x00007f8ab9234a4c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9234a4d: mov    %rsp,%r11
  0x00007f8ab9234a50: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234a54: push   %rax
  0x00007f8ab9234a55: mov    %r11,%rax
  0x00007f8ab9234a58: mov    0x50(%rbx),%r11
  0x00007f8ab9234a5c: mov    0x38(%rax),%rsi
  0x00007f8ab9234a60: mov    0x30(%rax),%edx
  0x00007f8ab9234a63: mov    0x20(%rax),%rcx
  0x00007f8ab9234a67: mov    0x10(%rax),%r8
  0x00007f8ab9234a6b: mov    0x8(%rax),%r9
  0x00007f8ab9234a6f: mov    %rbx,0x258(%r15)
  0x00007f8ab9234a76: mov    %rbx,%rax
  0x00007f8ab9234a79: jmpq   *%r11
  0x00007f8ab9234a7c: mov    0x8(%rsi),%ebx
  0x00007f8ab9234a7f: shl    $0x3,%rbx
  0x00007f8ab9234a83: cmp    0x10(%rax),%rbx
  0x00007f8ab9234a87: mov    0x8(%rax),%rbx
  0x00007f8ab9234a8b: je     0x00007f8ab9234a96
  0x00007f8ab9234a91: jmpq   0x00007f8ab9105c40
  0x00007f8ab9234a96: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9234a9e: je     0x00007f8ab9234b99
  0x00007f8ab9234aa4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9234aa9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9234ab1: je     0x00007f8ab9234b99
  0x00007f8ab9234ab7: mov    %rsp,%r13
  0x00007f8ab9234aba: mov    (%rsp),%rax
  0x00007f8ab9234abe: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234ac2: pushfq 
  0x00007f8ab9234ac3: sub    $0x8,%rsp
  0x00007f8ab9234ac7: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9234acc: sub    $0x80,%rsp
  0x00007f8ab9234ad3: mov    %rax,0x78(%rsp)
  0x00007f8ab9234ad8: mov    %rcx,0x70(%rsp)
  0x00007f8ab9234add: mov    %rdx,0x68(%rsp)
  0x00007f8ab9234ae2: mov    %rbx,0x60(%rsp)
  0x00007f8ab9234ae7: mov    %rbp,0x50(%rsp)
  0x00007f8ab9234aec: mov    %rsi,0x48(%rsp)
  0x00007f8ab9234af1: mov    %rdi,0x40(%rsp)
  0x00007f8ab9234af6: mov    %r8,0x38(%rsp)
  0x00007f8ab9234afb: mov    %r9,0x30(%rsp)
  0x00007f8ab9234b00: mov    %r10,0x28(%rsp)
  0x00007f8ab9234b05: mov    %r11,0x20(%rsp)
  0x00007f8ab9234b0a: mov    %r12,0x18(%rsp)
  0x00007f8ab9234b0f: mov    %r13,0x10(%rsp)
  0x00007f8ab9234b14: mov    %r14,0x8(%rsp)
  0x00007f8ab9234b19: mov    %r15,(%rsp)
  0x00007f8ab9234b1d: sub    $0x200,%rsp
  0x00007f8ab9234b24: fxsave64 (%rsp)
  0x00007f8ab9234b29: mov    %rbx,%rdi
  0x00007f8ab9234b2c: mov    %rax,%rsi
  0x00007f8ab9234b2f: callq  0x00007f8acef8bbca
  0x00007f8ab9234b34: fxrstor64 (%rsp)
  0x00007f8ab9234b39: add    $0x200,%rsp
  0x00007f8ab9234b40: mov    (%rsp),%r15
  0x00007f8ab9234b44: mov    0x8(%rsp),%r14
  0x00007f8ab9234b49: mov    0x10(%rsp),%r13
  0x00007f8ab9234b4e: mov    0x18(%rsp),%r12
  0x00007f8ab9234b53: mov    0x20(%rsp),%r11
  0x00007f8ab9234b58: mov    0x28(%rsp),%r10
  0x00007f8ab9234b5d: mov    0x30(%rsp),%r9
  0x00007f8ab9234b62: mov    0x38(%rsp),%r8
  0x00007f8ab9234b67: mov    0x40(%rsp),%rdi
  0x00007f8ab9234b6c: mov    0x48(%rsp),%rsi
  0x00007f8ab9234b71: mov    0x50(%rsp),%rbp
  0x00007f8ab9234b76: mov    0x60(%rsp),%rbx
  0x00007f8ab9234b7b: mov    0x68(%rsp),%rdx
  0x00007f8ab9234b80: mov    0x70(%rsp),%rcx
  0x00007f8ab9234b85: mov    0x78(%rsp),%rax
  0x00007f8ab9234b8a: add    $0x80,%rsp
  0x00007f8ab9234b91: add    $0x8,%rsp
  0x00007f8ab9234b95: popfq  
  0x00007f8ab9234b96: mov    %r13,%rsp
  0x00007f8ab9234b99: pop    %rax
  0x00007f8ab9234b9a: mov    %rsp,%r13
  0x00007f8ab9234b9d: sub    $0x40,%rsp
  0x00007f8ab9234ba1: mov    %rax,(%rsp)
  0x00007f8ab9234ba5: mov    %rsi,0x38(%rsp)
  0x00007f8ab9234baa: mov    %edx,0x30(%rsp)
  0x00007f8ab9234bae: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9234bb8: mov    %rax,0x28(%rsp)
  0x00007f8ab9234bbd: mov    %rcx,0x20(%rsp)
  0x00007f8ab9234bc2: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9234bcc: mov    %rax,0x18(%rsp)
  0x00007f8ab9234bd1: mov    %r8,0x10(%rsp)
  0x00007f8ab9234bd6: mov    %r9,0x8(%rsp)
  0x00007f8ab9234bdb: mov    0x40(%rbx),%rcx
  0x00007f8ab9234bdf: jmpq   *%rcx

AHE@0x00007f8ac812fc40: 0xbaabebeb i2c: 0x00007f8ab9234ca0 c2i: 0x00007f8ab9234dec c2iUV: 0x00007f8ab9234dbf
i2c argument handler #148 for: receiver (IIJJLjava/lang/String;)V (648 bytes generated)
c2i argument handler starts at 0x7f8ab9234dec
  0x00007f8ab9234ca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f8ab9234ca4: movabs $0x7f8ab90053e0,%r11
  0x00007f8ab9234cae: cmp    %r11,%rax
  0x00007f8ab9234cb1: jbe    0x00007f8ab9234cca
  0x00007f8ab9234cb7: movabs $0x7f8ab91053e0,%r11
  0x00007f8ab9234cc1: cmp    %r11,%rax
  0x00007f8ab9234cc4: jb     0x00007f8ab9234d8d
  0x00007f8ab9234cca: movabs $0x7f8ab9000420,%r11
  0x00007f8ab9234cd4: cmp    %r11,%rax
  0x00007f8ab9234cd7: jbe    0x00007f8ab9234cf0
  0x00007f8ab9234cdd: movabs $0x7f8ab9004e58,%r11
  0x00007f8ab9234ce7: cmp    %r11,%rax
  0x00007f8ab9234cea: jb     0x00007f8ab9234d8d
  0x00007f8ab9234cf0: movabs $0x7f8ab9140820,%r11
  0x00007f8ab9234cfa: cmp    %r11,%rax
  0x00007f8ab9234cfd: jbe    0x00007f8ab9234d16
  0x00007f8ab9234d03: movabs $0x7f8ab91465e0,%r11
  0x00007f8ab9234d0d: cmp    %r11,%rax
  0x00007f8ab9234d10: jb     0x00007f8ab9234d8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f8ab9234d16: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9234d1b: sub    $0x80,%rsp
  0x00007f8ab9234d22: mov    %rax,0x78(%rsp)
  0x00007f8ab9234d27: mov    %rcx,0x70(%rsp)
  0x00007f8ab9234d2c: mov    %rdx,0x68(%rsp)
  0x00007f8ab9234d31: mov    %rbx,0x60(%rsp)
  0x00007f8ab9234d36: mov    %rbp,0x50(%rsp)
  0x00007f8ab9234d3b: mov    %rsi,0x48(%rsp)
  0x00007f8ab9234d40: mov    %rdi,0x40(%rsp)
  0x00007f8ab9234d45: mov    %r8,0x38(%rsp)
  0x00007f8ab9234d4a: mov    %r9,0x30(%rsp)
  0x00007f8ab9234d4f: mov    %r10,0x28(%rsp)
  0x00007f8ab9234d54: mov    %r11,0x20(%rsp)
  0x00007f8ab9234d59: mov    %r12,0x18(%rsp)
  0x00007f8ab9234d5e: mov    %r13,0x10(%rsp)
  0x00007f8ab9234d63: mov    %r14,0x8(%rsp)
  0x00007f8ab9234d68: mov    %r15,(%rsp)
  0x00007f8ab9234d6c: movabs $0x7f8acf398a10,%rdi
  0x00007f8ab9234d76: movabs $0x7f8ab9234d16,%rsi
  0x00007f8ab9234d80: mov    %rsp,%rdx
  0x00007f8ab9234d83: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234d87: callq  0x00007f8aceddb9fa
  0x00007f8ab9234d8c: hlt    
  ;; } verify_i2ce 
  0x00007f8ab9234d8d: mov    %rsp,%r11
  0x00007f8ab9234d90: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234d94: push   %rax
  0x00007f8ab9234d95: mov    %r11,%rax
  0x00007f8ab9234d98: mov    0x50(%rbx),%r11
  0x00007f8ab9234d9c: mov    0x40(%rax),%rsi
  0x00007f8ab9234da0: mov    0x38(%rax),%edx
  0x00007f8ab9234da3: mov    0x30(%rax),%ecx
  0x00007f8ab9234da6: mov    0x20(%rax),%r8
  0x00007f8ab9234daa: mov    0x10(%rax),%r9
  0x00007f8ab9234dae: mov    0x8(%rax),%rdi
  0x00007f8ab9234db2: mov    %rbx,0x258(%r15)
  0x00007f8ab9234db9: mov    %rbx,%rax
  0x00007f8ab9234dbc: jmpq   *%r11
  0x00007f8ab9234dbf: mov    0x8(%rsi),%ebx
  0x00007f8ab9234dc2: shl    $0x3,%rbx
  0x00007f8ab9234dc6: cmp    0x10(%rax),%rbx
  0x00007f8ab9234dca: mov    0x8(%rax),%rbx
  0x00007f8ab9234dce: je     0x00007f8ab9234dd9
  0x00007f8ab9234dd4: jmpq   0x00007f8ab9105c40
  0x00007f8ab9234dd9: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9234de1: je     0x00007f8ab9234edc
  0x00007f8ab9234de7: jmpq   0x00007f8ab9105c40
  0x00007f8ab9234dec: cmpq   $0x0,0x58(%rbx)
  0x00007f8ab9234df4: je     0x00007f8ab9234edc
  0x00007f8ab9234dfa: mov    %rsp,%r13
  0x00007f8ab9234dfd: mov    (%rsp),%rax
  0x00007f8ab9234e01: and    $0xfffffffffffffff0,%rsp
  0x00007f8ab9234e05: pushfq 
  0x00007f8ab9234e06: sub    $0x8,%rsp
  0x00007f8ab9234e0a: mov    %rsp,-0x28(%rsp)
  0x00007f8ab9234e0f: sub    $0x80,%rsp
  0x00007f8ab9234e16: mov    %rax,0x78(%rsp)
  0x00007f8ab9234e1b: mov    %rcx,0x70(%rsp)
  0x00007f8ab9234e20: mov    %rdx,0x68(%rsp)
  0x00007f8ab9234e25: mov    %rbx,0x60(%rsp)
  0x00007f8ab9234e2a: mov    %rbp,0x50(%rsp)
  0x00007f8ab9234e2f: mov    %rsi,0x48(%rsp)
  0x00007f8ab9234e34: mov    %rdi,0x40(%rsp)
  0x00007f8ab9234e39: mov    %r8,0x38(%rsp)
  0x00007f8ab9234e3e: mov    %r9,0x30(%rsp)
  0x00007f8ab9234e43: mov    %r10,0x28(%rsp)
  0x00007f8ab9234e48: mov    %r11,0x20(%rsp)
  0x00007f8ab9234e4d: mov    %r12,0x18(%rsp)
  0x00007f8ab9234e52: mov    %r13,0x10(%rsp)
  0x00007f8ab9234e57: mov    %r14,0x8(%rsp)
  0x00007f8ab9234e5c: mov    %r15,(%rsp)
  0x00007f8ab9234e60: sub    $0x200,%rsp
  0x00007f8ab9234e67: fxsave64 (%rsp)
  0x00007f8ab9234e6c: mov    %rbx,%rdi
  0x00007f8ab9234e6f: mov    %rax,%rsi
  0x00007f8ab9234e72: callq  0x00007f8acef8bbca
  0x00007f8ab9234e77: fxrstor64 (%rsp)
  0x00007f8ab9234e7c: add    $0x200,%rsp
  0x00007f8ab9234e83: mov    (%rsp),%r15
  0x00007f8ab9234e87: mov    0x8(%rsp),%r14
  0x00007f8ab9234e8c: mov    0x10(%rsp),%r13
  0x00007f8ab9234e91: mov    0x18(%rsp),%r12
  0x00007f8ab9234e96: mov    0x20(%rsp),%r11
  0x00007f8ab9234e9b: mov    0x28(%rsp),%r10
  0x00007f8ab9234ea0: mov    0x30(%rsp),%r9
  0x00007f8ab9234ea5: mov    0x38(%rsp),%r8
  0x00007f8ab9234eaa: mov    0x40(%rsp),%rdi
  0x00007f8ab9234eaf: mov    0x48(%rsp),%rsi
  0x00007f8ab9234eb4: mov    0x50(%rsp),%rbp
  0x00007f8ab9234eb9: mov    0x60(%rsp),%rbx
  0x00007f8ab9234ebe: mov    0x68(%rsp),%rdx
  0x00007f8ab9234ec3: mov    0x70(%rsp),%rcx
  0x00007f8ab9234ec8: mov    0x78(%rsp),%rax
  0x00007f8ab9234ecd: add    $0x80,%rsp
  0x00007f8ab9234ed4: add    $0x8,%rsp
  0x00007f8ab9234ed8: popfq  
  0x00007f8ab9234ed9: mov    %r13,%rsp
  0x00007f8ab9234edc: pop    %rax
  0x00007f8ab9234edd: mov    %rsp,%r13
  0x00007f8ab9234ee0: sub    $0x50,%rsp
  0x00007f8ab9234ee4: mov    %rax,(%rsp)
  0x00007f8ab9234ee8: mov    %rsi,0x40(%rsp)
  0x00007f8ab9234eed: mov    %edx,0x38(%rsp)
  0x00007f8ab9234ef1: mov    %ecx,0x30(%rsp)
  0x00007f8ab9234ef5: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9234eff: mov    %rax,0x28(%rsp)
  0x00007f8ab9234f04: mov    %r8,0x20(%rsp)
  0x00007f8ab9234f09: movabs $0xdeadffffdeadaaab,%rax
  0x00007f8ab9234f13: mov    %rax,0x18(%rsp)
  0x00007f8ab9234f18: mov    %r9,0x10(%rsp)
  0x00007f8ab9234f1d: mov    %rdi,0x8(%rsp)
  0x00007f8ab9234f22: mov    0x40(%rbx),%rcx
  0x00007f8ab9234f26: jmpq   *%rcx

hello world!

RUN FINISHED; exit value 0; real time: 3s; user: 250ms; system: 650ms
