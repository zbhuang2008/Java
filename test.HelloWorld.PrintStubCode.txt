"${OUTPUT_PATH}" -cp "/home/zbhuang/OpenJDK/javaapps/" -XX:+UnlockDiagnosticVMOptions -XX:+PrintStubCode Hello

ICache::flush_icache_stub [0x00007f7570369060, 0x00007f757036907d[ (29 bytes)
Loaded disassembler from /home/zbhuang/OpenJDK/jdk8u/build/linux-x86_64-normal-server-slowdebug/jdk/lib/amd64/hsdis-amd64.so
[Disassembling for mach='i386:x86-64']
  0x00007f7570369060: test   %esi,%esi
  0x00007f7570369062: je     0x00007f7570369079
  0x00007f7570369068: mfence 
  0x00007f757036906b: clflush (%rdi)
  0x00007f757036906e: add    $0x40,%rdi
  0x00007f7570369072: dec    %esi
  0x00007f7570369074: jne    0x00007f757036906b
  0x00007f7570369076: mfence 
  0x00007f7570369079: mov    %rdx,%rax
  0x00007f757036907c: retq   

VM_Version::get_cpu_info_stub [0x00007f7570369160, 0x00007f757036937b[ (539 bytes)
  0x00007f7570369160: push   %rbp
  0x00007f7570369161: mov    %rdi,%rbp
  0x00007f7570369164: push   %rbx
  0x00007f7570369165: push   %rsi
  0x00007f7570369166: pushfq 
  0x00007f7570369167: pop    %rax
  0x00007f7570369168: push   %rax
  0x00007f7570369169: mov    %rax,%rcx
  0x00007f757036916c: xor    $0x40000,%eax
  0x00007f7570369172: push   %rax
  0x00007f7570369173: popfq  
  0x00007f7570369174: pushfq 
  0x00007f7570369175: pop    %rax
  0x00007f7570369176: cmp    %rcx,%rax
  0x00007f7570369179: jne    0x00007f7570369188
  0x00007f757036917b: mov    $0x300,%eax
  0x00007f7570369180: mov    %eax,0x10(%rbp)
  0x00007f7570369183: jmpq   0x00007f7570369376
  0x00007f7570369188: mov    %rcx,%rax
  0x00007f757036918b: xor    $0x200000,%eax
  0x00007f7570369191: push   %rax
  0x00007f7570369192: popfq  
  0x00007f7570369193: pushfq 
  0x00007f7570369194: pop    %rax
  0x00007f7570369195: cmp    %rax,%rcx
  0x00007f7570369198: jne    0x00007f75703691a7
  0x00007f757036919a: mov    $0x400,%eax
  0x00007f757036919f: mov    %eax,0x10(%rbp)
  0x00007f75703691a2: jmpq   0x00007f7570369376
  0x00007f75703691a7: xor    %eax,%eax
  0x00007f75703691a9: cpuid  
  0x00007f75703691ab: or     %eax,%eax
  0x00007f75703691ad: je     0x00007f757036919a
  0x00007f75703691af: lea    0x0(%rbp),%rsi
  0x00007f75703691b3: mov    %eax,(%rsi)
  0x00007f75703691b5: mov    %ebx,0x4(%rsi)
  0x00007f75703691b8: mov    %ecx,0x8(%rsi)
  0x00007f75703691bb: mov    %edx,0xc(%rsi)
  0x00007f75703691be: cmp    $0xa,%eax
  0x00007f75703691c1: jbe    0x00007f757036922f
  0x00007f75703691c3: mov    $0xb,%eax
  0x00007f75703691c8: xor    %ecx,%ecx
  0x00007f75703691ca: cpuid  
  0x00007f75703691cc: lea    0x40(%rbp),%rsi
  0x00007f75703691d0: mov    %eax,(%rsi)
  0x00007f75703691d2: mov    %ebx,0x4(%rsi)
  0x00007f75703691d5: mov    %ecx,0x8(%rsi)
  0x00007f75703691d8: mov    %edx,0xc(%rsi)
  0x00007f75703691db: mov    $0xb,%eax
  0x00007f75703691e0: mov    $0x1,%ecx
  0x00007f75703691e5: cpuid  
  0x00007f75703691e7: push   %rax
  0x00007f75703691e8: and    $0x1f,%eax
  0x00007f75703691eb: or     %ebx,%eax
  0x00007f75703691ed: and    $0xffff,%eax
  0x00007f75703691f3: pop    %rax
  0x00007f75703691f4: je     0x00007f757036922f
  0x00007f75703691f6: lea    0x50(%rbp),%rsi
  0x00007f75703691fa: mov    %eax,(%rsi)
  0x00007f75703691fc: mov    %ebx,0x4(%rsi)
  0x00007f75703691ff: mov    %ecx,0x8(%rsi)
  0x00007f7570369202: mov    %edx,0xc(%rsi)
  0x00007f7570369205: mov    $0xb,%eax
  0x00007f757036920a: mov    $0x2,%ecx
  0x00007f757036920f: cpuid  
  0x00007f7570369211: push   %rax
  0x00007f7570369212: and    $0x1f,%eax
  0x00007f7570369215: or     %ebx,%eax
  0x00007f7570369217: and    $0xffff,%eax
  0x00007f757036921d: pop    %rax
  0x00007f757036921e: je     0x00007f757036922f
  0x00007f7570369220: lea    0x60(%rbp),%rsi
  0x00007f7570369224: mov    %eax,(%rsi)
  0x00007f7570369226: mov    %ebx,0x4(%rsi)
  0x00007f7570369229: mov    %ecx,0x8(%rsi)
  0x00007f757036922c: mov    %edx,0xc(%rsi)
  0x00007f757036922f: mov    $0x4,%eax
  0x00007f7570369234: cmp    0x0(%rbp),%eax
  0x00007f7570369237: jg     0x00007f7570369255
  0x00007f7570369239: xor    %ecx,%ecx
  0x00007f757036923b: cpuid  
  0x00007f757036923d: push   %rax
  0x00007f757036923e: and    $0x1f,%eax
  0x00007f7570369241: or     %eax,%eax
  0x00007f7570369243: pop    %rax
  0x00007f7570369244: je     0x00007f7570369255
  0x00007f7570369246: lea    0x20(%rbp),%rsi
  0x00007f757036924a: mov    %eax,(%rsi)
  0x00007f757036924c: mov    %ebx,0x4(%rsi)
  0x00007f757036924f: mov    %ecx,0x8(%rsi)
  0x00007f7570369252: mov    %edx,0xc(%rsi)
  0x00007f7570369255: mov    $0x1,%eax
  0x00007f757036925a: cpuid  
  0x00007f757036925c: lea    0x10(%rbp),%rsi
  0x00007f7570369260: mov    %eax,(%rsi)
  0x00007f7570369262: mov    %ebx,0x4(%rsi)
  0x00007f7570369265: mov    %ecx,0x8(%rsi)
  0x00007f7570369268: mov    %edx,0xc(%rsi)
  0x00007f757036926b: and    $0x18000000,%ecx
  0x00007f7570369271: cmp    $0x18000000,%ecx
  0x00007f7570369277: jne    0x00007f75703692d0
  0x00007f7570369279: xor    %ecx,%ecx
  0x00007f757036927b: xgetbv 
  0x00007f757036927e: lea    0xf0(%rbp),%rsi
  0x00007f7570369285: mov    %eax,(%rsi)
  0x00007f7570369287: mov    %edx,0x4(%rsi)
  0x00007f757036928a: and    $0x6,%eax
  0x00007f757036928d: cmp    $0x6,%eax
  0x00007f7570369290: jne    0x00007f75703692d0
  0x00007f7570369292: mov    $0xcafebabe,%ecx
  0x00007f7570369297: vmovd  %ecx,%xmm0
  0x00007f757036929b: vpshufd $0x0,%xmm0,%xmm0
  0x00007f75703692a0: vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0x00007f75703692a6: vmovdqu %ymm0,%ymm7
  0x00007f75703692aa: vmovdqu %ymm0,%ymm8
  0x00007f75703692ae: vmovdqu %ymm0,%ymm15
  0x00007f75703692b2: xor    %esi,%esi
  0x00007f75703692b4: mov    (%rsi),%eax
  0x00007f75703692b6: lea    0xf8(%rbp),%rsi
  0x00007f75703692bd: vmovdqu %ymm0,(%rsi)
  0x00007f75703692c1: vmovdqu %ymm7,0x20(%rsi)
  0x00007f75703692c6: vmovdqu %ymm8,0x40(%rsi)
  0x00007f75703692cb: vmovdqu %ymm15,0x60(%rsi)
  0x00007f75703692d0: mov    $0x7,%eax
  0x00007f75703692d5: cmp    0x0(%rbp),%eax
  0x00007f75703692d8: jg     0x00007f75703692e7
  0x00007f75703692da: xor    %ecx,%ecx
  0x00007f75703692dc: cpuid  
  0x00007f75703692de: lea    0x30(%rbp),%rsi
  0x00007f75703692e2: mov    %eax,(%rsi)
  0x00007f75703692e4: mov    %ebx,0x4(%rsi)
  0x00007f75703692e7: mov    $0x80000000,%eax
  0x00007f75703692ec: cpuid  
  0x00007f75703692ee: cmp    $0x80000000,%eax
  0x00007f75703692f4: jbe    0x00007f7570369376
  0x00007f75703692fa: cmp    $0x80000004,%eax
  0x00007f7570369300: jbe    0x00007f757036935d
  0x00007f7570369302: cmp    $0x80000006,%eax
  0x00007f7570369308: jbe    0x00007f7570369344
  0x00007f757036930a: cmp    $0x80000007,%eax
  0x00007f7570369310: jbe    0x00007f757036932b
  0x00007f7570369312: mov    $0x80000008,%eax
  0x00007f7570369317: cpuid  
  0x00007f7570369319: lea    0xe0(%rbp),%rsi
  0x00007f7570369320: mov    %eax,(%rsi)
  0x00007f7570369322: mov    %ebx,0x4(%rsi)
  0x00007f7570369325: mov    %ecx,0x8(%rsi)
  0x00007f7570369328: mov    %edx,0xc(%rsi)
  0x00007f757036932b: mov    $0x80000007,%eax
  0x00007f7570369330: cpuid  
  0x00007f7570369332: lea    0xd0(%rbp),%rsi
  0x00007f7570369339: mov    %eax,(%rsi)
  0x00007f757036933b: mov    %ebx,0x4(%rsi)
  0x00007f757036933e: mov    %ecx,0x8(%rsi)
  0x00007f7570369341: mov    %edx,0xc(%rsi)
  0x00007f7570369344: mov    $0x80000005,%eax
  0x00007f7570369349: cpuid  
  0x00007f757036934b: lea    0xc0(%rbp),%rsi
  0x00007f7570369352: mov    %eax,(%rsi)
  0x00007f7570369354: mov    %ebx,0x4(%rsi)
  0x00007f7570369357: mov    %ecx,0x8(%rsi)
  0x00007f757036935a: mov    %edx,0xc(%rsi)
  0x00007f757036935d: mov    $0x80000001,%eax
  0x00007f7570369362: cpuid  
  0x00007f7570369364: lea    0x80(%rbp),%rsi
  0x00007f757036936b: mov    %eax,(%rsi)
  0x00007f757036936d: mov    %ebx,0x4(%rsi)
  0x00007f7570369370: mov    %ecx,0x8(%rsi)
  0x00007f7570369373: mov    %edx,0xc(%rsi)
  0x00007f7570369376: popfq  
  0x00007f7570369377: pop    %rsi
  0x00007f7570369378: pop    %rbx
  0x00007f7570369379: pop    %rbp
  0x00007f757036937a: retq   

Decoding RuntimeStub - StackOverflowError throw_exception 0x00007f757036e210
  0x00007f757036e280: push   %rbp
  0x00007f757036e281: mov    %rsp,%rbp
  0x00007f757036e284: sub    $0x0,%rsp
  0x00007f757036e288: mov    %rbp,0x210(%r15)
  0x00007f757036e28f: movabs $0x7f757036e288,%r10
  0x00007f757036e299: mov    %r10,0x208(%r15)
  0x00007f757036e2a0: mov    %rsp,0x200(%r15)
  0x00007f757036e2a7: and    $0xfffffffffffffff0,%rsp
  0x00007f757036e2ab: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f757036e2ae: callq  0x00007f758551df40
  0x00007f757036e2b3: movabs $0x0,%r10
  0x00007f757036e2bd: mov    %r10,0x200(%r15)
  0x00007f757036e2c4: movabs $0x0,%r10
  0x00007f757036e2ce: mov    %r10,0x210(%r15)
  0x00007f757036e2d5: movabs $0x0,%r10
  0x00007f757036e2df: mov    %r10,0x208(%r15)
  0x00007f757036e2e6: leaveq 
  0x00007f757036e2e7: cmpq   $0x0,0x8(%r15)
  0x00007f757036e2ef: jne    0x00007f757036e36c
  0x00007f757036e2f5: mov    %rsp,-0x28(%rsp)
  0x00007f757036e2fa: sub    $0x80,%rsp
  0x00007f757036e301: mov    %rax,0x78(%rsp)
  0x00007f757036e306: mov    %rcx,0x70(%rsp)
  0x00007f757036e30b: mov    %rdx,0x68(%rsp)
  0x00007f757036e310: mov    %rbx,0x60(%rsp)
  0x00007f757036e315: mov    %rbp,0x50(%rsp)
  0x00007f757036e31a: mov    %rsi,0x48(%rsp)
  0x00007f757036e31f: mov    %rdi,0x40(%rsp)
  0x00007f757036e324: mov    %r8,0x38(%rsp)
  0x00007f757036e329: mov    %r9,0x30(%rsp)
  0x00007f757036e32e: mov    %r10,0x28(%rsp)
  0x00007f757036e333: mov    %r11,0x20(%rsp)
  0x00007f757036e338: mov    %r12,0x18(%rsp)
  0x00007f757036e33d: mov    %r13,0x10(%rsp)
  0x00007f757036e342: mov    %r14,0x8(%rsp)
  0x00007f757036e347: mov    %r15,(%rsp)
  0x00007f757036e34b: movabs $0x7f75856bea2b,%rdi
  0x00007f757036e355: movabs $0x7f757036e2f5,%rsi
  0x00007f757036e35f: mov    %rsp,%rdx
  0x00007f757036e362: and    $0xfffffffffffffff0,%rsp
  0x00007f757036e366: callq  0x00007f75853729fa
  0x00007f757036e36b: hlt    
  0x00007f757036e36c: jmpq   0x00007f7570369420
  0x00007f757036e371: hlt    
  0x00007f757036e372: hlt    
  0x00007f757036e373: hlt    
  0x00007f757036e374: hlt    
  0x00007f757036e375: hlt    
  0x00007f757036e376: hlt    
  0x00007f757036e377: hlt    

StubRoutines::forward exception [0x00007f7570369420, 0x00007f7570369564[ (324 bytes)
  0x00007f7570369420: cmpq   $0x0,0x8(%r15)
  0x00007f7570369428: jne    0x00007f75703694a5
  0x00007f757036942e: mov    %rsp,-0x28(%rsp)
  0x00007f7570369433: sub    $0x80,%rsp
  0x00007f757036943a: mov    %rax,0x78(%rsp)
  0x00007f757036943f: mov    %rcx,0x70(%rsp)
  0x00007f7570369444: mov    %rdx,0x68(%rsp)
  0x00007f7570369449: mov    %rbx,0x60(%rsp)
  0x00007f757036944e: mov    %rbp,0x50(%rsp)
  0x00007f7570369453: mov    %rsi,0x48(%rsp)
  0x00007f7570369458: mov    %rdi,0x40(%rsp)
  0x00007f757036945d: mov    %r8,0x38(%rsp)
  0x00007f7570369462: mov    %r9,0x30(%rsp)
  0x00007f7570369467: mov    %r10,0x28(%rsp)
  0x00007f757036946c: mov    %r11,0x20(%rsp)
  0x00007f7570369471: mov    %r12,0x18(%rsp)
  0x00007f7570369476: mov    %r13,0x10(%rsp)
  0x00007f757036947b: mov    %r14,0x8(%rsp)
  0x00007f7570369480: mov    %r15,(%rsp)
  0x00007f7570369484: movabs $0x7f758593cd68,%rdi
  0x00007f757036948e: movabs $0x7f757036942e,%rsi
  0x00007f7570369498: mov    %rsp,%rdx
  0x00007f757036949b: and    $0xfffffffffffffff0,%rsp
  0x00007f757036949f: callq  0x00007f75853729fa
  0x00007f75703694a4: hlt    
  0x00007f75703694a5: mov    (%rsp),%rdi
  ;; call exception_handler_for_return_address
  0x00007f75703694a9: mov    %rdi,%rsi
  0x00007f75703694ac: mov    %r15,%rdi
  0x00007f75703694af: test   $0xf,%esp
  0x00007f75703694b5: je     0x00007f75703694cd
  0x00007f75703694bb: sub    $0x8,%rsp
  0x00007f75703694bf: callq  0x00007f758551c9be
  0x00007f75703694c4: add    $0x8,%rsp
  0x00007f75703694c8: jmpq   0x00007f75703694d2
  0x00007f75703694cd: callq  0x00007f758551c9be
  0x00007f75703694d2: mov    %rax,%rbx
  0x00007f75703694d5: pop    %rdx
  0x00007f75703694d6: mov    0x8(%r15),%rax
  0x00007f75703694da: movq   $0x0,0x8(%r15)
  0x00007f75703694e2: test   %rax,%rax
  0x00007f75703694e5: jne    0x00007f7570369562
  0x00007f75703694eb: mov    %rsp,-0x28(%rsp)
  0x00007f75703694f0: sub    $0x80,%rsp
  0x00007f75703694f7: mov    %rax,0x78(%rsp)
  0x00007f75703694fc: mov    %rcx,0x70(%rsp)
  0x00007f7570369501: mov    %rdx,0x68(%rsp)
  0x00007f7570369506: mov    %rbx,0x60(%rsp)
  0x00007f757036950b: mov    %rbp,0x50(%rsp)
  0x00007f7570369510: mov    %rsi,0x48(%rsp)
  0x00007f7570369515: mov    %rdi,0x40(%rsp)
  0x00007f757036951a: mov    %r8,0x38(%rsp)
  0x00007f757036951f: mov    %r9,0x30(%rsp)
  0x00007f7570369524: mov    %r10,0x28(%rsp)
  0x00007f7570369529: mov    %r11,0x20(%rsp)
  0x00007f757036952e: mov    %r12,0x18(%rsp)
  0x00007f7570369533: mov    %r13,0x10(%rsp)
  0x00007f7570369538: mov    %r14,0x8(%rsp)
  0x00007f757036953d: mov    %r15,(%rsp)
  0x00007f7570369541: movabs $0x7f758593cdd8,%rdi
  0x00007f757036954b: movabs $0x7f75703694eb,%rsi
  0x00007f7570369555: mov    %rsp,%rdx
  0x00007f7570369558: and    $0xfffffffffffffff0,%rsp
  0x00007f757036955c: callq  0x00007f75853729fa
  0x00007f7570369561: hlt    
  0x00007f7570369562: jmpq   *%rbx

StubRoutines::call_stub [0x00007f7570369564, 0x00007f757036979b[ (567 bytes)
  0x00007f7570369564: push   %rbp
  0x00007f7570369565: mov    %rsp,%rbp
  0x00007f7570369568: sub    $0x60,%rsp
  0x00007f757036956c: mov    %r9,-0x8(%rbp)
  0x00007f7570369570: mov    %r8,-0x10(%rbp)
  0x00007f7570369574: mov    %rcx,-0x18(%rbp)
  0x00007f7570369578: mov    %edx,-0x20(%rbp)
  0x00007f757036957b: mov    %rsi,-0x28(%rbp)
  0x00007f757036957f: mov    %rdi,-0x30(%rbp)
  0x00007f7570369583: mov    %rbx,-0x38(%rbp)
  0x00007f7570369587: mov    %r12,-0x40(%rbp)
  0x00007f757036958b: mov    %r13,-0x48(%rbp)
  0x00007f757036958f: mov    %r14,-0x50(%rbp)
  0x00007f7570369593: mov    %r15,-0x58(%rbp)
  0x00007f7570369597: stmxcsr -0x60(%rbp)
  0x00007f757036959b: mov    -0x60(%rbp),%eax
  0x00007f757036959e: and    $0xffc0,%eax
  0x00007f75703695a4: cmp    0x15bbc19e(%rip),%eax        # 0x00007f7585f25748
  0x00007f75703695aa: je     0x00007f75703695b7
  0x00007f75703695b0: ldmxcsr 0x15bbc191(%rip)        # 0x00007f7585f25748
  0x00007f75703695b7: mov    0x18(%rbp),%r15
  0x00007f75703695bb: mov    0x15bdbc1e(%rip),%r12        # 0x00007f7585f451e0
  0x00007f75703695c2: cmpq   $0x0,0x8(%r15)
  0x00007f75703695ca: je     0x00007f7570369647
  0x00007f75703695d0: mov    %rsp,-0x28(%rsp)
  0x00007f75703695d5: sub    $0x80,%rsp
  0x00007f75703695dc: mov    %rax,0x78(%rsp)
  0x00007f75703695e1: mov    %rcx,0x70(%rsp)
  0x00007f75703695e6: mov    %rdx,0x68(%rsp)
  0x00007f75703695eb: mov    %rbx,0x60(%rsp)
  0x00007f75703695f0: mov    %rbp,0x50(%rsp)
  0x00007f75703695f5: mov    %rsi,0x48(%rsp)
  0x00007f75703695fa: mov    %rdi,0x40(%rsp)
  0x00007f75703695ff: mov    %r8,0x38(%rsp)
  0x00007f7570369604: mov    %r9,0x30(%rsp)
  0x00007f7570369609: mov    %r10,0x28(%rsp)
  0x00007f757036960e: mov    %r11,0x20(%rsp)
  0x00007f7570369613: mov    %r12,0x18(%rsp)
  0x00007f7570369618: mov    %r13,0x10(%rsp)
  0x00007f757036961d: mov    %r14,0x8(%rsp)
  0x00007f7570369622: mov    %r15,(%rsp)
  0x00007f7570369626: movabs $0x7f758593cb38,%rdi
  0x00007f7570369630: movabs $0x7f75703695d0,%rsi
  0x00007f757036963a: mov    %rsp,%rdx
  0x00007f757036963d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570369641: callq  0x00007f75853729fa
  0x00007f7570369646: hlt    
  ;; pass parameters if any
  0x00007f7570369647: mov    0x10(%rbp),%ecx
  0x00007f757036964a: test   %ecx,%ecx
  0x00007f757036964c: je     0x00007f7570369664
  0x00007f7570369652: mov    -0x8(%rbp),%rdx
  0x00007f7570369656: mov    %ecx,%esi
  ;; loop:
  0x00007f7570369658: mov    (%rdx),%rax
  0x00007f757036965b: add    $0x8,%rdx
  0x00007f757036965f: dec    %esi
  0x00007f7570369661: push   %rax
  0x00007f7570369662: jne    0x00007f7570369658
  ;; parameters_done:
  0x00007f7570369664: mov    -0x18(%rbp),%rbx
  0x00007f7570369668: mov    -0x10(%rbp),%rsi
  0x00007f757036966c: mov    %rsp,%r13
  ;; call Java function
  0x00007f757036966f: callq  *%rsi
  ;; call_stub_return_address:
  0x00007f7570369671: mov    -0x28(%rbp),%rdi
  0x00007f7570369675: mov    -0x20(%rbp),%esi
  0x00007f7570369678: cmp    $0xc,%esi
  0x00007f757036967b: je     0x00007f7570369781
  0x00007f7570369681: cmp    $0xb,%esi
  0x00007f7570369684: je     0x00007f7570369781
  0x00007f757036968a: cmp    $0x6,%esi
  0x00007f757036968d: je     0x00007f7570369789
  0x00007f7570369693: cmp    $0x7,%esi
  0x00007f7570369696: je     0x00007f7570369792
  0x00007f757036969c: mov    %eax,(%rdi)
  ;; exit:
  0x00007f757036969e: lea    -0x60(%rbp),%rsp
  0x00007f75703696a2: cmp    0x18(%rbp),%r15
  0x00007f75703696a6: jne    0x00007f75703696e6
  0x00007f75703696ac: push   %rax
  0x00007f75703696ad: push   %rdi
  0x00007f75703696ae: push   %rsi
  0x00007f75703696af: push   %rdx
  0x00007f75703696b0: push   %rcx
  0x00007f75703696b1: push   %r8
  0x00007f75703696b3: push   %r9
  0x00007f75703696b5: push   %r10
  0x00007f75703696b7: mov    %rsp,%r10
  0x00007f75703696ba: and    $0xfffffffffffffff0,%rsp
  0x00007f75703696be: push   %r10
  0x00007f75703696c0: push   %r11
  0x00007f75703696c2: mov    $0x1,%edi
  0x00007f75703696c7: callq  0x00007f7585f5a2d0
  0x00007f75703696cc: pop    %r11
  0x00007f75703696ce: pop    %rsp
  0x00007f75703696cf: pop    %r10
  0x00007f75703696d1: pop    %r9
  0x00007f75703696d3: pop    %r8
  0x00007f75703696d5: pop    %rcx
  0x00007f75703696d6: pop    %rdx
  0x00007f75703696d7: pop    %rsi
  0x00007f75703696d8: pop    %rdi
  0x00007f75703696d9: mov    %rax,%rbx
  0x00007f75703696dc: pop    %rax
  0x00007f75703696dd: cmp    %rbx,%r15
  0x00007f75703696e0: je     0x00007f7570369763
  0x00007f75703696e6: je     0x00007f7570369763
  0x00007f75703696ec: mov    %rsp,-0x28(%rsp)
  0x00007f75703696f1: sub    $0x80,%rsp
  0x00007f75703696f8: mov    %rax,0x78(%rsp)
  0x00007f75703696fd: mov    %rcx,0x70(%rsp)
  0x00007f7570369702: mov    %rdx,0x68(%rsp)
  0x00007f7570369707: mov    %rbx,0x60(%rsp)
  0x00007f757036970c: mov    %rbp,0x50(%rsp)
  0x00007f7570369711: mov    %rsi,0x48(%rsp)
  0x00007f7570369716: mov    %rdi,0x40(%rsp)
  0x00007f757036971b: mov    %r8,0x38(%rsp)
  0x00007f7570369720: mov    %r9,0x30(%rsp)
  0x00007f7570369725: mov    %r10,0x28(%rsp)
  0x00007f757036972a: mov    %r11,0x20(%rsp)
  0x00007f757036972f: mov    %r12,0x18(%rsp)
  0x00007f7570369734: mov    %r13,0x10(%rsp)
  0x00007f7570369739: mov    %r14,0x8(%rsp)
  0x00007f757036973e: mov    %r15,(%rsp)
  0x00007f7570369742: movabs $0x7f758593cbd8,%rdi
  0x00007f757036974c: movabs $0x7f75703696ec,%rsi
  0x00007f7570369756: mov    %rsp,%rdx
  0x00007f7570369759: and    $0xfffffffffffffff0,%rsp
  0x00007f757036975d: callq  0x00007f75853729fa
  0x00007f7570369762: hlt    
  0x00007f7570369763: mov    -0x58(%rbp),%r15
  0x00007f7570369767: mov    -0x50(%rbp),%r14
  0x00007f757036976b: mov    -0x48(%rbp),%r13
  0x00007f757036976f: mov    -0x40(%rbp),%r12
  0x00007f7570369773: mov    -0x38(%rbp),%rbx
  0x00007f7570369777: ldmxcsr -0x60(%rbp)
  0x00007f757036977b: add    $0x60,%rsp
  0x00007f757036977f: pop    %rbp
  0x00007f7570369780: retq   
  ;; is_long:
  0x00007f7570369781: mov    %rax,(%rdi)
  0x00007f7570369784: jmpq   0x00007f757036969e
  ;; is_float:
  0x00007f7570369789: vmovss %xmm0,(%rdi)
  0x00007f757036978d: jmpq   0x00007f757036969e
  ;; is_double:
  0x00007f7570369792: vmovsd %xmm0,(%rdi)
  0x00007f7570369796: jmpq   0x00007f757036969e

StubRoutines::catch_exception [0x00007f757036979b, 0x00007f7570369875[ (218 bytes)
  0x00007f757036979b: cmp    0x18(%rbp),%r15
  0x00007f757036979f: jne    0x00007f75703697df
  0x00007f75703697a5: push   %rax
  0x00007f75703697a6: push   %rdi
  0x00007f75703697a7: push   %rsi
  0x00007f75703697a8: push   %rdx
  0x00007f75703697a9: push   %rcx
  0x00007f75703697aa: push   %r8
  0x00007f75703697ac: push   %r9
  0x00007f75703697ae: push   %r10
  0x00007f75703697b0: mov    %rsp,%r10
  0x00007f75703697b3: and    $0xfffffffffffffff0,%rsp
  0x00007f75703697b7: push   %r10
  0x00007f75703697b9: push   %r11
  0x00007f75703697bb: mov    $0x1,%edi
  0x00007f75703697c0: callq  0x00007f7585f5a2d0
  0x00007f75703697c5: pop    %r11
  0x00007f75703697c7: pop    %rsp
  0x00007f75703697c8: pop    %r10
  0x00007f75703697ca: pop    %r9
  0x00007f75703697cc: pop    %r8
  0x00007f75703697ce: pop    %rcx
  0x00007f75703697cf: pop    %rdx
  0x00007f75703697d0: pop    %rsi
  0x00007f75703697d1: pop    %rdi
  0x00007f75703697d2: mov    %rax,%rbx
  0x00007f75703697d5: pop    %rax
  0x00007f75703697d6: cmp    %rbx,%r15
  0x00007f75703697d9: je     0x00007f7570369856
  0x00007f75703697df: mov    %rsp,-0x28(%rsp)
  0x00007f75703697e4: sub    $0x80,%rsp
  0x00007f75703697eb: mov    %rax,0x78(%rsp)
  0x00007f75703697f0: mov    %rcx,0x70(%rsp)
  0x00007f75703697f5: mov    %rdx,0x68(%rsp)
  0x00007f75703697fa: mov    %rbx,0x60(%rsp)
  0x00007f75703697ff: mov    %rbp,0x50(%rsp)
  0x00007f7570369804: mov    %rsi,0x48(%rsp)
  0x00007f7570369809: mov    %rdi,0x40(%rsp)
  0x00007f757036980e: mov    %r8,0x38(%rsp)
  0x00007f7570369813: mov    %r9,0x30(%rsp)
  0x00007f7570369818: mov    %r10,0x28(%rsp)
  0x00007f757036981d: mov    %r11,0x20(%rsp)
  0x00007f7570369822: mov    %r12,0x18(%rsp)
  0x00007f7570369827: mov    %r13,0x10(%rsp)
  0x00007f757036982c: mov    %r14,0x8(%rsp)
  0x00007f7570369831: mov    %r15,(%rsp)
  0x00007f7570369835: movabs $0x7f758593cc38,%rdi
  0x00007f757036983f: movabs $0x7f75703697df,%rsi
  0x00007f7570369849: mov    %rsp,%rdx
  0x00007f757036984c: and    $0xfffffffffffffff0,%rsp
  0x00007f7570369850: callq  0x00007f75853729fa
  0x00007f7570369855: hlt    
  0x00007f7570369856: mov    %rax,0x8(%r15)
  0x00007f757036985a: movabs $0x7f758593cc80,%r10
  0x00007f7570369864: mov    %r10,0x10(%r15)
  0x00007f7570369868: movl   $0x1c6,0x18(%r15)
  0x00007f7570369870: jmpq   0x00007f7570369671

StubRoutines::atomic_xchg [0x00007f7570369875, 0x00007f757036987a[ (5 bytes)
  0x00007f7570369875: mov    %edi,%eax
  0x00007f7570369877: xchg   %eax,(%rsi)
  0x00007f7570369879: retq   

StubRoutines::atomic_xchg_ptr [0x00007f757036987a, 0x00007f7570369881[ (7 bytes)
  0x00007f757036987a: mov    %rdi,%rax
  0x00007f757036987d: xchg   %rax,(%rsi)
  0x00007f7570369880: retq   

StubRoutines::atomic_cmpxchg [0x00007f7570369881, 0x00007f7570369888[ (7 bytes)
  0x00007f7570369881: mov    %edx,%eax
  0x00007f7570369883: lock cmpxchg %edi,(%rsi)
  0x00007f7570369887: retq   

StubRoutines::atomic_cmpxchg_long [0x00007f7570369888, 0x00007f7570369891[ (9 bytes)
  0x00007f7570369888: mov    %rdx,%rax
  0x00007f757036988b: lock cmpxchg %rdi,(%rsi)
  0x00007f7570369890: retq   

StubRoutines::atomic_add [0x00007f7570369891, 0x00007f757036989a[ (9 bytes)
  0x00007f7570369891: mov    %edi,%eax
  0x00007f7570369893: lock xadd %edi,(%rsi)
  0x00007f7570369897: add    %edi,%eax
  0x00007f7570369899: retq   

StubRoutines::atomic_add_ptr [0x00007f757036989a, 0x00007f75703698a6[ (12 bytes)
  0x00007f757036989a: mov    %rdi,%rax
  0x00007f757036989d: lock xadd %rdi,(%rsi)
  0x00007f75703698a2: add    %rdi,%rax
  0x00007f75703698a5: retq   

StubRoutines::orderaccess_fence [0x00007f75703698a6, 0x00007f75703698ac[ (6 bytes)
  0x00007f75703698a6: lock addl $0x0,(%rsp)
  0x00007f75703698ab: retq   

StubRoutines::handler_for_unsafe_access [0x00007f75703698ac, 0x00007f757036996e[ (194 bytes)
  0x00007f75703698ac: pushq  $0x0
  0x00007f75703698b1: mov    %rsp,-0x28(%rsp)
  0x00007f75703698b6: sub    $0x80,%rsp
  0x00007f75703698bd: mov    %rax,0x78(%rsp)
  0x00007f75703698c2: mov    %rcx,0x70(%rsp)
  0x00007f75703698c7: mov    %rdx,0x68(%rsp)
  0x00007f75703698cc: mov    %rbx,0x60(%rsp)
  0x00007f75703698d1: mov    %rbp,0x50(%rsp)
  0x00007f75703698d6: mov    %rsi,0x48(%rsp)
  0x00007f75703698db: mov    %rdi,0x40(%rsp)
  0x00007f75703698e0: mov    %r8,0x38(%rsp)
  0x00007f75703698e5: mov    %r9,0x30(%rsp)
  0x00007f75703698ea: mov    %r10,0x28(%rsp)
  0x00007f75703698ef: mov    %r11,0x20(%rsp)
  0x00007f75703698f4: mov    %r12,0x18(%rsp)
  0x00007f75703698f9: mov    %r13,0x10(%rsp)
  0x00007f75703698fe: mov    %r14,0x8(%rsp)
  0x00007f7570369903: mov    %r15,(%rsp)
  0x00007f7570369907: sub    $0x0,%rsp
  ;; call handle_unsafe_access
  0x00007f757036990b: callq  0x00007f7585558d54
  0x00007f7570369910: add    $0x0,%rsp
  0x00007f7570369914: mov    %rax,0x80(%rsp)
  0x00007f757036991c: mov    (%rsp),%r15
  0x00007f7570369920: mov    0x8(%rsp),%r14
  0x00007f7570369925: mov    0x10(%rsp),%r13
  0x00007f757036992a: mov    0x18(%rsp),%r12
  0x00007f757036992f: mov    0x20(%rsp),%r11
  0x00007f7570369934: mov    0x28(%rsp),%r10
  0x00007f7570369939: mov    0x30(%rsp),%r9
  0x00007f757036993e: mov    0x38(%rsp),%r8
  0x00007f7570369943: mov    0x40(%rsp),%rdi
  0x00007f7570369948: mov    0x48(%rsp),%rsi
  0x00007f757036994d: mov    0x50(%rsp),%rbp
  0x00007f7570369952: mov    0x60(%rsp),%rbx
  0x00007f7570369957: mov    0x68(%rsp),%rdx
  0x00007f757036995c: mov    0x70(%rsp),%rcx
  0x00007f7570369961: mov    0x78(%rsp),%rax
  0x00007f7570369966: add    $0x80,%rsp
  0x00007f757036996d: retq   

StubRoutines::get_previous_fp [0x00007f757036996e, 0x00007f757036997b[ (13 bytes)
  0x00007f757036996e: push   %rbp
  0x00007f757036996f: mov    %rsp,%rbp
  0x00007f7570369972: mov    0x0(%rbp),%rax
  0x00007f7570369976: mov    (%rax),%rax
  0x00007f7570369979: pop    %rbp
  0x00007f757036997a: retq   

StubRoutines::get_previous_sp [0x00007f757036997b, 0x00007f7570369983[ (8 bytes)
  0x00007f757036997b: mov    %rsp,%rax
  0x00007f757036997e: add    $0x8,%rax
  0x00007f7570369982: retq   

StubRoutines::verify_mxcsr [0x00007f7570369983, 0x00007f7570369984[ (1 bytes)
  0x00007f7570369983: retq   

StubRoutines::updateBytesCRC32 [0x00007f75703699a0, 0x00007f7570369bf6[ (598 bytes)
  ;; Entry:
  0x00007f75703699a0: push   %rbp
  0x00007f75703699a1: mov    %rsp,%rbp
  0x00007f75703699a4: movabs $0x7f7585eb0d40,%rcx
  0x00007f75703699ae: not    %edi
  0x00007f75703699b0: cmp    $0x10,%edx
  0x00007f75703699b3: jl     0x00007f7570369bd2
  0x00007f75703699b9: mov    %esi,%r11d
  0x00007f75703699bc: and    $0xf,%r11d
  0x00007f75703699c0: je     0x00007f75703699e5
  0x00007f75703699c2: sub    $0x10,%r11d
  0x00007f75703699c6: add    %r11d,%edx
  0x00007f75703699c9: nop
  0x00007f75703699ca: nop
  0x00007f75703699cb: nop
  ;; L_align_loop:
  0x00007f75703699cc: movsbl (%rsi),%eax
  0x00007f75703699cf: xor    %edi,%eax
  0x00007f75703699d1: and    $0xff,%eax
  0x00007f75703699d7: shr    $0x8,%edi
  0x00007f75703699da: xor    (%rcx,%rax,4),%edi
  0x00007f75703699dd: inc    %rsi
  0x00007f75703699e0: inc    %r11d
  0x00007f75703699e3: jl     0x00007f75703699cc
  ;; L_aligned:
  0x00007f75703699e5: mov    %edx,%r11d
  0x00007f75703699e8: shr    $0x4,%edx
  0x00007f75703699eb: je     0x00007f7570369bcf
  0x00007f75703699f1: vmovdqa (%rsi),%xmm1
  0x00007f75703699f5: vmovd  %xmm1,%eax
  0x00007f75703699f9: xor    %eax,%edi
  0x00007f75703699fb: vpinsrd $0x0,%edi,%xmm1,%xmm1
  0x00007f7570369a01: add    $0x10,%rsi
  0x00007f7570369a05: sub    $0x4,%edx
  0x00007f7570369a08: jl     0x00007f7570369ae0
  0x00007f7570369a0e: vmovdqa (%rsi),%xmm2
  0x00007f7570369a12: vmovdqa 0x10(%rsi),%xmm3
  0x00007f7570369a17: vmovdqa 0x20(%rsi),%xmm4
  0x00007f7570369a1c: add    $0x30,%rsi
  0x00007f7570369a20: sub    $0x3,%edx
  0x00007f7570369a23: jle    0x00007f7570369a9c
  0x00007f7570369a29: vmovdqu 0x15b472ef(%rip),%xmm0        # 0x00007f7585eb0d20
  0x00007f7570369a31: nop
  0x00007f7570369a32: nop
  0x00007f7570369a33: nop
  0x00007f7570369a34: nop
  0x00007f7570369a35: nop
  0x00007f7570369a36: nop
  0x00007f7570369a37: nop
  0x00007f7570369a38: nop
  0x00007f7570369a39: nop
  0x00007f7570369a3a: nop
  0x00007f7570369a3b: nop
  0x00007f7570369a3c: nop
  0x00007f7570369a3d: nop
  0x00007f7570369a3e: nop
  0x00007f7570369a3f: nop
  ;; L_fold_512b_loop:
  0x00007f7570369a40: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7570369a46: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7570369a4c: vpxor  (%rsi),%xmm1,%xmm1
  0x00007f7570369a50: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7570369a54: vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0x00007f7570369a5a: vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0x00007f7570369a60: vpxor  0x10(%rsi),%xmm2,%xmm2
  0x00007f7570369a65: vpxor  %xmm5,%xmm2,%xmm2
  0x00007f7570369a69: vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0x00007f7570369a6f: vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0x00007f7570369a75: vpxor  0x20(%rsi),%xmm3,%xmm3
  0x00007f7570369a7a: vpxor  %xmm5,%xmm3,%xmm3
  0x00007f7570369a7e: vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0x00007f7570369a84: vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0x00007f7570369a8a: vpxor  0x30(%rsi),%xmm4,%xmm4
  0x00007f7570369a8f: vpxor  %xmm5,%xmm4,%xmm4
  0x00007f7570369a93: add    $0x40,%rsi
  0x00007f7570369a97: sub    $0x4,%edx
  0x00007f7570369a9a: jg     0x00007f7570369a40
  ;; L_fold_512b:
  0x00007f7570369a9c: vmovdqu 0x15b4726c(%rip),%xmm0        # 0x00007f7585eb0d10
  0x00007f7570369aa4: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7570369aaa: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7570369ab0: vpxor  %xmm2,%xmm1,%xmm1
  0x00007f7570369ab4: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7570369ab8: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7570369abe: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7570369ac4: vpxor  %xmm3,%xmm1,%xmm1
  0x00007f7570369ac8: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7570369acc: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7570369ad2: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7570369ad8: vpxor  %xmm4,%xmm1,%xmm1
  0x00007f7570369adc: vpxor  %xmm5,%xmm1,%xmm1
  ;; L_fold_tail:
  0x00007f7570369ae0: add    $0x3,%edx
  0x00007f7570369ae3: jle    0x00007f7570369b09
  0x00007f7570369ae5: vmovdqu 0x15b47223(%rip),%xmm0        # 0x00007f7585eb0d10
  ;; L_fold_tail_loop:
  0x00007f7570369aed: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0x00007f7570369af3: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0x00007f7570369af9: vpxor  (%rsi),%xmm1,%xmm1
  0x00007f7570369afd: vpxor  %xmm5,%xmm1,%xmm1
  0x00007f7570369b01: add    $0x10,%rsi
  0x00007f7570369b05: dec    %edx
  0x00007f7570369b07: jg     0x00007f7570369aed
  ;; L_fold_128b:
  0x00007f7570369b09: vmovdqu 0x15b471ef(%rip),%xmm0        # 0x00007f7585eb0d00
  0x00007f7570369b11: vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0x00007f7570369b17: vpand  %xmm2,%xmm0,%xmm3
  0x00007f7570369b1b: vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0x00007f7570369b21: vpsrldq $0x8,%xmm1,%xmm1
  0x00007f7570369b26: vpsrldq $0x4,%xmm2,%xmm2
  0x00007f7570369b2b: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7570369b2f: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f7570369b33: vmovd  %xmm0,%eax
  0x00007f7570369b37: and    $0xff,%eax
  0x00007f7570369b3d: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7570369b42: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7570369b47: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7570369b4b: vmovd  %xmm0,%eax
  0x00007f7570369b4f: and    $0xff,%eax
  0x00007f7570369b55: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7570369b5a: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7570369b5f: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7570369b63: vmovd  %xmm0,%eax
  0x00007f7570369b67: and    $0xff,%eax
  0x00007f7570369b6d: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7570369b72: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7570369b77: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7570369b7b: vmovd  %xmm0,%eax
  0x00007f7570369b7f: and    $0xff,%eax
  0x00007f7570369b85: vmovd  (%rcx,%rax,4),%xmm1
  0x00007f7570369b8a: vpsrldq $0x1,%xmm0,%xmm0
  0x00007f7570369b8f: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f7570369b93: vmovd  %xmm0,%edi
  0x00007f7570369b97: mov    %edi,%eax
  0x00007f7570369b99: and    $0xff,%eax
  0x00007f7570369b9f: shr    $0x8,%edi
  0x00007f7570369ba2: xor    (%rcx,%rax,4),%edi
  0x00007f7570369ba5: mov    %edi,%eax
  0x00007f7570369ba7: and    $0xff,%eax
  0x00007f7570369bad: shr    $0x8,%edi
  0x00007f7570369bb0: xor    (%rcx,%rax,4),%edi
  0x00007f7570369bb3: mov    %edi,%eax
  0x00007f7570369bb5: and    $0xff,%eax
  0x00007f7570369bbb: shr    $0x8,%edi
  0x00007f7570369bbe: xor    (%rcx,%rax,4),%edi
  0x00007f7570369bc1: mov    %edi,%eax
  0x00007f7570369bc3: and    $0xff,%eax
  0x00007f7570369bc9: shr    $0x8,%edi
  0x00007f7570369bcc: xor    (%rcx,%rax,4),%edi
  ;; L_tail_restore:
  0x00007f7570369bcf: mov    %r11d,%edx
  ;; L_tail:
  0x00007f7570369bd2: and    $0xf,%edx
  0x00007f7570369bd5: je     0x00007f7570369bf0
  0x00007f7570369bd7: nop
  ;; L_tail_loop:
  0x00007f7570369bd8: movsbl (%rsi),%eax
  0x00007f7570369bdb: xor    %edi,%eax
  0x00007f7570369bdd: and    $0xff,%eax
  0x00007f7570369be3: shr    $0x8,%edi
  0x00007f7570369be6: xor    (%rcx,%rax,4),%edi
  0x00007f7570369be9: inc    %rsi
  0x00007f7570369bec: dec    %edx
  0x00007f7570369bee: jg     0x00007f7570369bd8
  ;; L_exit:
  0x00007f7570369bf0: not    %edi
  0x00007f7570369bf2: mov    %edi,%eax
  0x00007f7570369bf4: leaveq 
  0x00007f7570369bf5: retq   

Decoding RuntimeStub - wrong_method_stub 0x00007f757036dfd0
  0x00007f757036e040: push   %rbp
  0x00007f757036e041: mov    %rsp,%rbp
  0x00007f757036e044: pushfq 
  0x00007f757036e045: sub    $0x8,%rsp
  0x00007f757036e049: mov    %rsp,-0x28(%rsp)
  0x00007f757036e04e: sub    $0x80,%rsp
  0x00007f757036e055: mov    %rax,0x78(%rsp)
  0x00007f757036e05a: mov    %rcx,0x70(%rsp)
  0x00007f757036e05f: mov    %rdx,0x68(%rsp)
  0x00007f757036e064: mov    %rbx,0x60(%rsp)
  0x00007f757036e069: mov    %rbp,0x50(%rsp)
  0x00007f757036e06e: mov    %rsi,0x48(%rsp)
  0x00007f757036e073: mov    %rdi,0x40(%rsp)
  0x00007f757036e078: mov    %r8,0x38(%rsp)
  0x00007f757036e07d: mov    %r9,0x30(%rsp)
  0x00007f757036e082: mov    %r10,0x28(%rsp)
  0x00007f757036e087: mov    %r11,0x20(%rsp)
  0x00007f757036e08c: mov    %r12,0x18(%rsp)
  0x00007f757036e091: mov    %r13,0x10(%rsp)
  0x00007f757036e096: mov    %r14,0x8(%rsp)
  0x00007f757036e09b: mov    %r15,(%rsp)
  0x00007f757036e09f: sub    $0x200,%rsp
  0x00007f757036e0a6: fxsave64 (%rsp)
  0x00007f757036e0ab: mov    %rsp,0x200(%r15)
  0x00007f757036e0b2: mov    %r15,%rdi
  0x00007f757036e0b5: callq  0x00007f7585520de8
  0x00007f757036e0ba: movabs $0x0,%r10
  0x00007f757036e0c4: mov    %r10,0x200(%r15)
  0x00007f757036e0cb: movabs $0x0,%r10
  0x00007f757036e0d5: mov    %r10,0x208(%r15)
  0x00007f757036e0dc: cmpq   $0x0,0x8(%r15)
  0x00007f757036e0e4: jne    0x00007f757036e177
  0x00007f757036e0ea: mov    0x268(%r15),%rbx
  0x00007f757036e0f1: movabs $0x0,%r10
  0x00007f757036e0fb: mov    %r10,0x268(%r15)
  0x00007f757036e102: mov    %rbx,0x260(%rsp)
  0x00007f757036e10a: mov    %rax,0x278(%rsp)
  0x00007f757036e112: fxrstor64 (%rsp)
  0x00007f757036e117: add    $0x200,%rsp
  0x00007f757036e11e: mov    (%rsp),%r15
  0x00007f757036e122: mov    0x8(%rsp),%r14
  0x00007f757036e127: mov    0x10(%rsp),%r13
  0x00007f757036e12c: mov    0x18(%rsp),%r12
  0x00007f757036e131: mov    0x20(%rsp),%r11
  0x00007f757036e136: mov    0x28(%rsp),%r10
  0x00007f757036e13b: mov    0x30(%rsp),%r9
  0x00007f757036e140: mov    0x38(%rsp),%r8
  0x00007f757036e145: mov    0x40(%rsp),%rdi
  0x00007f757036e14a: mov    0x48(%rsp),%rsi
  0x00007f757036e14f: mov    0x50(%rsp),%rbp
  0x00007f757036e154: mov    0x60(%rsp),%rbx
  0x00007f757036e159: mov    0x68(%rsp),%rdx
  0x00007f757036e15e: mov    0x70(%rsp),%rcx
  0x00007f757036e163: mov    0x78(%rsp),%rax
  0x00007f757036e168: add    $0x80,%rsp
  0x00007f757036e16f: add    $0x8,%rsp
  0x00007f757036e173: popfq  
  0x00007f757036e174: pop    %rbp
  0x00007f757036e175: jmpq   *%rax
  0x00007f757036e177: fxrstor64 (%rsp)
  0x00007f757036e17c: add    $0x200,%rsp
  0x00007f757036e183: mov    (%rsp),%r15
  0x00007f757036e187: mov    0x8(%rsp),%r14
  0x00007f757036e18c: mov    0x10(%rsp),%r13
  0x00007f757036e191: mov    0x18(%rsp),%r12
  0x00007f757036e196: mov    0x20(%rsp),%r11
  0x00007f757036e19b: mov    0x28(%rsp),%r10
  0x00007f757036e1a0: mov    0x30(%rsp),%r9
  0x00007f757036e1a5: mov    0x38(%rsp),%r8
  0x00007f757036e1aa: mov    0x40(%rsp),%rdi
  0x00007f757036e1af: mov    0x48(%rsp),%rsi
  0x00007f757036e1b4: mov    0x50(%rsp),%rbp
  0x00007f757036e1b9: mov    0x60(%rsp),%rbx
  0x00007f757036e1be: mov    0x68(%rsp),%rdx
  0x00007f757036e1c3: mov    0x70(%rsp),%rcx
  0x00007f757036e1c8: mov    0x78(%rsp),%rax
  0x00007f757036e1cd: add    $0x80,%rsp
  0x00007f757036e1d4: add    $0x8,%rsp
  0x00007f757036e1d8: popfq  
  0x00007f757036e1d9: pop    %rbp
  0x00007f757036e1da: movq   $0x0,0x260(%r15)
  0x00007f757036e1e5: mov    0x8(%r15),%rax
  0x00007f757036e1e9: jmpq   0x00007f7570369420
  0x00007f757036e1ee: hlt    
  0x00007f757036e1ef: hlt    

Decoding RuntimeStub - wrong_method_abstract_stub 0x00007f757046e990
  0x00007f757046ea00: push   %rbp
  0x00007f757046ea01: mov    %rsp,%rbp
  0x00007f757046ea04: pushfq 
  0x00007f757046ea05: sub    $0x8,%rsp
  0x00007f757046ea09: mov    %rsp,-0x28(%rsp)
  0x00007f757046ea0e: sub    $0x80,%rsp
  0x00007f757046ea15: mov    %rax,0x78(%rsp)
  0x00007f757046ea1a: mov    %rcx,0x70(%rsp)
  0x00007f757046ea1f: mov    %rdx,0x68(%rsp)
  0x00007f757046ea24: mov    %rbx,0x60(%rsp)
  0x00007f757046ea29: mov    %rbp,0x50(%rsp)
  0x00007f757046ea2e: mov    %rsi,0x48(%rsp)
  0x00007f757046ea33: mov    %rdi,0x40(%rsp)
  0x00007f757046ea38: mov    %r8,0x38(%rsp)
  0x00007f757046ea3d: mov    %r9,0x30(%rsp)
  0x00007f757046ea42: mov    %r10,0x28(%rsp)
  0x00007f757046ea47: mov    %r11,0x20(%rsp)
  0x00007f757046ea4c: mov    %r12,0x18(%rsp)
  0x00007f757046ea51: mov    %r13,0x10(%rsp)
  0x00007f757046ea56: mov    %r14,0x8(%rsp)
  0x00007f757046ea5b: mov    %r15,(%rsp)
  0x00007f757046ea5f: sub    $0x200,%rsp
  0x00007f757046ea66: fxsave64 (%rsp)
  0x00007f757046ea6b: mov    %rsp,0x200(%r15)
  0x00007f757046ea72: mov    %r15,%rdi
  0x00007f757046ea75: callq  0x00007f7585521208
  0x00007f757046ea7a: movabs $0x0,%r10
  0x00007f757046ea84: mov    %r10,0x200(%r15)
  0x00007f757046ea8b: movabs $0x0,%r10
  0x00007f757046ea95: mov    %r10,0x208(%r15)
  0x00007f757046ea9c: cmpq   $0x0,0x8(%r15)
  0x00007f757046eaa4: jne    0x00007f757046eb37
  0x00007f757046eaaa: mov    0x268(%r15),%rbx
  0x00007f757046eab1: movabs $0x0,%r10
  0x00007f757046eabb: mov    %r10,0x268(%r15)
  0x00007f757046eac2: mov    %rbx,0x260(%rsp)
  0x00007f757046eaca: mov    %rax,0x278(%rsp)
  0x00007f757046ead2: fxrstor64 (%rsp)
  0x00007f757046ead7: add    $0x200,%rsp
  0x00007f757046eade: mov    (%rsp),%r15
  0x00007f757046eae2: mov    0x8(%rsp),%r14
  0x00007f757046eae7: mov    0x10(%rsp),%r13
  0x00007f757046eaec: mov    0x18(%rsp),%r12
  0x00007f757046eaf1: mov    0x20(%rsp),%r11
  0x00007f757046eaf6: mov    0x28(%rsp),%r10
  0x00007f757046eafb: mov    0x30(%rsp),%r9
  0x00007f757046eb00: mov    0x38(%rsp),%r8
  0x00007f757046eb05: mov    0x40(%rsp),%rdi
  0x00007f757046eb0a: mov    0x48(%rsp),%rsi
  0x00007f757046eb0f: mov    0x50(%rsp),%rbp
  0x00007f757046eb14: mov    0x60(%rsp),%rbx
  0x00007f757046eb19: mov    0x68(%rsp),%rdx
  0x00007f757046eb1e: mov    0x70(%rsp),%rcx
  0x00007f757046eb23: mov    0x78(%rsp),%rax
  0x00007f757046eb28: add    $0x80,%rsp
  0x00007f757046eb2f: add    $0x8,%rsp
  0x00007f757046eb33: popfq  
  0x00007f757046eb34: pop    %rbp
  0x00007f757046eb35: jmpq   *%rax
  0x00007f757046eb37: fxrstor64 (%rsp)
  0x00007f757046eb3c: add    $0x200,%rsp
  0x00007f757046eb43: mov    (%rsp),%r15
  0x00007f757046eb47: mov    0x8(%rsp),%r14
  0x00007f757046eb4c: mov    0x10(%rsp),%r13
  0x00007f757046eb51: mov    0x18(%rsp),%r12
  0x00007f757046eb56: mov    0x20(%rsp),%r11
  0x00007f757046eb5b: mov    0x28(%rsp),%r10
  0x00007f757046eb60: mov    0x30(%rsp),%r9
  0x00007f757046eb65: mov    0x38(%rsp),%r8
  0x00007f757046eb6a: mov    0x40(%rsp),%rdi
  0x00007f757046eb6f: mov    0x48(%rsp),%rsi
  0x00007f757046eb74: mov    0x50(%rsp),%rbp
  0x00007f757046eb79: mov    0x60(%rsp),%rbx
  0x00007f757046eb7e: mov    0x68(%rsp),%rdx
  0x00007f757046eb83: mov    0x70(%rsp),%rcx
  0x00007f757046eb88: mov    0x78(%rsp),%rax
  0x00007f757046eb8d: add    $0x80,%rsp
  0x00007f757046eb94: add    $0x8,%rsp
  0x00007f757046eb98: popfq  
  0x00007f757046eb99: pop    %rbp
  0x00007f757046eb9a: movq   $0x0,0x260(%r15)
  0x00007f757046eba5: mov    0x8(%r15),%rax
  0x00007f757046eba9: jmpq   0x00007f7570369420
  0x00007f757046ebae: hlt    
  0x00007f757046ebaf: hlt    

Decoding RuntimeStub - ic_miss_stub 0x00007f757046ebd0
  0x00007f757046ec40: push   %rbp
  0x00007f757046ec41: mov    %rsp,%rbp
  0x00007f757046ec44: pushfq 
  0x00007f757046ec45: sub    $0x8,%rsp
  0x00007f757046ec49: mov    %rsp,-0x28(%rsp)
  0x00007f757046ec4e: sub    $0x80,%rsp
  0x00007f757046ec55: mov    %rax,0x78(%rsp)
  0x00007f757046ec5a: mov    %rcx,0x70(%rsp)
  0x00007f757046ec5f: mov    %rdx,0x68(%rsp)
  0x00007f757046ec64: mov    %rbx,0x60(%rsp)
  0x00007f757046ec69: mov    %rbp,0x50(%rsp)
  0x00007f757046ec6e: mov    %rsi,0x48(%rsp)
  0x00007f757046ec73: mov    %rdi,0x40(%rsp)
  0x00007f757046ec78: mov    %r8,0x38(%rsp)
  0x00007f757046ec7d: mov    %r9,0x30(%rsp)
  0x00007f757046ec82: mov    %r10,0x28(%rsp)
  0x00007f757046ec87: mov    %r11,0x20(%rsp)
  0x00007f757046ec8c: mov    %r12,0x18(%rsp)
  0x00007f757046ec91: mov    %r13,0x10(%rsp)
  0x00007f757046ec96: mov    %r14,0x8(%rsp)
  0x00007f757046ec9b: mov    %r15,(%rsp)
  0x00007f757046ec9f: sub    $0x200,%rsp
  0x00007f757046eca6: fxsave64 (%rsp)
  0x00007f757046ecab: mov    %rsp,0x200(%r15)
  0x00007f757046ecb2: mov    %r15,%rdi
  0x00007f757046ecb5: callq  0x00007f7585520a64
  0x00007f757046ecba: movabs $0x0,%r10
  0x00007f757046ecc4: mov    %r10,0x200(%r15)
  0x00007f757046eccb: movabs $0x0,%r10
  0x00007f757046ecd5: mov    %r10,0x208(%r15)
  0x00007f757046ecdc: cmpq   $0x0,0x8(%r15)
  0x00007f757046ece4: jne    0x00007f757046ed77
  0x00007f757046ecea: mov    0x268(%r15),%rbx
  0x00007f757046ecf1: movabs $0x0,%r10
  0x00007f757046ecfb: mov    %r10,0x268(%r15)
  0x00007f757046ed02: mov    %rbx,0x260(%rsp)
  0x00007f757046ed0a: mov    %rax,0x278(%rsp)
  0x00007f757046ed12: fxrstor64 (%rsp)
  0x00007f757046ed17: add    $0x200,%rsp
  0x00007f757046ed1e: mov    (%rsp),%r15
  0x00007f757046ed22: mov    0x8(%rsp),%r14
  0x00007f757046ed27: mov    0x10(%rsp),%r13
  0x00007f757046ed2c: mov    0x18(%rsp),%r12
  0x00007f757046ed31: mov    0x20(%rsp),%r11
  0x00007f757046ed36: mov    0x28(%rsp),%r10
  0x00007f757046ed3b: mov    0x30(%rsp),%r9
  0x00007f757046ed40: mov    0x38(%rsp),%r8
  0x00007f757046ed45: mov    0x40(%rsp),%rdi
  0x00007f757046ed4a: mov    0x48(%rsp),%rsi
  0x00007f757046ed4f: mov    0x50(%rsp),%rbp
  0x00007f757046ed54: mov    0x60(%rsp),%rbx
  0x00007f757046ed59: mov    0x68(%rsp),%rdx
  0x00007f757046ed5e: mov    0x70(%rsp),%rcx
  0x00007f757046ed63: mov    0x78(%rsp),%rax
  0x00007f757046ed68: add    $0x80,%rsp
  0x00007f757046ed6f: add    $0x8,%rsp
  0x00007f757046ed73: popfq  
  0x00007f757046ed74: pop    %rbp
  0x00007f757046ed75: jmpq   *%rax
  0x00007f757046ed77: fxrstor64 (%rsp)
  0x00007f757046ed7c: add    $0x200,%rsp
  0x00007f757046ed83: mov    (%rsp),%r15
  0x00007f757046ed87: mov    0x8(%rsp),%r14
  0x00007f757046ed8c: mov    0x10(%rsp),%r13
  0x00007f757046ed91: mov    0x18(%rsp),%r12
  0x00007f757046ed96: mov    0x20(%rsp),%r11
  0x00007f757046ed9b: mov    0x28(%rsp),%r10
  0x00007f757046eda0: mov    0x30(%rsp),%r9
  0x00007f757046eda5: mov    0x38(%rsp),%r8
  0x00007f757046edaa: mov    0x40(%rsp),%rdi
  0x00007f757046edaf: mov    0x48(%rsp),%rsi
  0x00007f757046edb4: mov    0x50(%rsp),%rbp
  0x00007f757046edb9: mov    0x60(%rsp),%rbx
  0x00007f757046edbe: mov    0x68(%rsp),%rdx
  0x00007f757046edc3: mov    0x70(%rsp),%rcx
  0x00007f757046edc8: mov    0x78(%rsp),%rax
  0x00007f757046edcd: add    $0x80,%rsp
  0x00007f757046edd4: add    $0x8,%rsp
  0x00007f757046edd8: popfq  
  0x00007f757046edd9: pop    %rbp
  0x00007f757046edda: movq   $0x0,0x260(%r15)
  0x00007f757046ede5: mov    0x8(%r15),%rax
  0x00007f757046ede9: jmpq   0x00007f7570369420
  0x00007f757046edee: hlt    
  0x00007f757046edef: hlt    

Decoding RuntimeStub - resolve_opt_virtual_call 0x00007f757046ee10
  0x00007f757046ee80: push   %rbp
  0x00007f757046ee81: mov    %rsp,%rbp
  0x00007f757046ee84: pushfq 
  0x00007f757046ee85: sub    $0x8,%rsp
  0x00007f757046ee89: mov    %rsp,-0x28(%rsp)
  0x00007f757046ee8e: sub    $0x80,%rsp
  0x00007f757046ee95: mov    %rax,0x78(%rsp)
  0x00007f757046ee9a: mov    %rcx,0x70(%rsp)
  0x00007f757046ee9f: mov    %rdx,0x68(%rsp)
  0x00007f757046eea4: mov    %rbx,0x60(%rsp)
  0x00007f757046eea9: mov    %rbp,0x50(%rsp)
  0x00007f757046eeae: mov    %rsi,0x48(%rsp)
  0x00007f757046eeb3: mov    %rdi,0x40(%rsp)
  0x00007f757046eeb8: mov    %r8,0x38(%rsp)
  0x00007f757046eebd: mov    %r9,0x30(%rsp)
  0x00007f757046eec2: mov    %r10,0x28(%rsp)
  0x00007f757046eec7: mov    %r11,0x20(%rsp)
  0x00007f757046eecc: mov    %r12,0x18(%rsp)
  0x00007f757046eed1: mov    %r13,0x10(%rsp)
  0x00007f757046eed6: mov    %r14,0x8(%rsp)
  0x00007f757046eedb: mov    %r15,(%rsp)
  0x00007f757046eedf: sub    $0x200,%rsp
  0x00007f757046eee6: fxsave64 (%rsp)
  0x00007f757046eeeb: mov    %rsp,0x200(%r15)
  0x00007f757046eef2: mov    %r15,%rdi
  0x00007f757046eef5: callq  0x00007f75855217ea
  0x00007f757046eefa: movabs $0x0,%r10
  0x00007f757046ef04: mov    %r10,0x200(%r15)
  0x00007f757046ef0b: movabs $0x0,%r10
  0x00007f757046ef15: mov    %r10,0x208(%r15)
  0x00007f757046ef1c: cmpq   $0x0,0x8(%r15)
  0x00007f757046ef24: jne    0x00007f757046efb7
  0x00007f757046ef2a: mov    0x268(%r15),%rbx
  0x00007f757046ef31: movabs $0x0,%r10
  0x00007f757046ef3b: mov    %r10,0x268(%r15)
  0x00007f757046ef42: mov    %rbx,0x260(%rsp)
  0x00007f757046ef4a: mov    %rax,0x278(%rsp)
  0x00007f757046ef52: fxrstor64 (%rsp)
  0x00007f757046ef57: add    $0x200,%rsp
  0x00007f757046ef5e: mov    (%rsp),%r15
  0x00007f757046ef62: mov    0x8(%rsp),%r14
  0x00007f757046ef67: mov    0x10(%rsp),%r13
  0x00007f757046ef6c: mov    0x18(%rsp),%r12
  0x00007f757046ef71: mov    0x20(%rsp),%r11
  0x00007f757046ef76: mov    0x28(%rsp),%r10
  0x00007f757046ef7b: mov    0x30(%rsp),%r9
  0x00007f757046ef80: mov    0x38(%rsp),%r8
  0x00007f757046ef85: mov    0x40(%rsp),%rdi
  0x00007f757046ef8a: mov    0x48(%rsp),%rsi
  0x00007f757046ef8f: mov    0x50(%rsp),%rbp
  0x00007f757046ef94: mov    0x60(%rsp),%rbx
  0x00007f757046ef99: mov    0x68(%rsp),%rdx
  0x00007f757046ef9e: mov    0x70(%rsp),%rcx
  0x00007f757046efa3: mov    0x78(%rsp),%rax
  0x00007f757046efa8: add    $0x80,%rsp
  0x00007f757046efaf: add    $0x8,%rsp
  0x00007f757046efb3: popfq  
  0x00007f757046efb4: pop    %rbp
  0x00007f757046efb5: jmpq   *%rax
  0x00007f757046efb7: fxrstor64 (%rsp)
  0x00007f757046efbc: add    $0x200,%rsp
  0x00007f757046efc3: mov    (%rsp),%r15
  0x00007f757046efc7: mov    0x8(%rsp),%r14
  0x00007f757046efcc: mov    0x10(%rsp),%r13
  0x00007f757046efd1: mov    0x18(%rsp),%r12
  0x00007f757046efd6: mov    0x20(%rsp),%r11
  0x00007f757046efdb: mov    0x28(%rsp),%r10
  0x00007f757046efe0: mov    0x30(%rsp),%r9
  0x00007f757046efe5: mov    0x38(%rsp),%r8
  0x00007f757046efea: mov    0x40(%rsp),%rdi
  0x00007f757046efef: mov    0x48(%rsp),%rsi
  0x00007f757046eff4: mov    0x50(%rsp),%rbp
  0x00007f757046eff9: mov    0x60(%rsp),%rbx
  0x00007f757046effe: mov    0x68(%rsp),%rdx
  0x00007f757046f003: mov    0x70(%rsp),%rcx
  0x00007f757046f008: mov    0x78(%rsp),%rax
  0x00007f757046f00d: add    $0x80,%rsp
  0x00007f757046f014: add    $0x8,%rsp
  0x00007f757046f018: popfq  
  0x00007f757046f019: pop    %rbp
  0x00007f757046f01a: movq   $0x0,0x260(%r15)
  0x00007f757046f025: mov    0x8(%r15),%rax
  0x00007f757046f029: jmpq   0x00007f7570369420
  0x00007f757046f02e: hlt    
  0x00007f757046f02f: hlt    

Decoding RuntimeStub - resolve_virtual_call 0x00007f757046f050
  0x00007f757046f0c0: push   %rbp
  0x00007f757046f0c1: mov    %rsp,%rbp
  0x00007f757046f0c4: pushfq 
  0x00007f757046f0c5: sub    $0x8,%rsp
  0x00007f757046f0c9: mov    %rsp,-0x28(%rsp)
  0x00007f757046f0ce: sub    $0x80,%rsp
  0x00007f757046f0d5: mov    %rax,0x78(%rsp)
  0x00007f757046f0da: mov    %rcx,0x70(%rsp)
  0x00007f757046f0df: mov    %rdx,0x68(%rsp)
  0x00007f757046f0e4: mov    %rbx,0x60(%rsp)
  0x00007f757046f0e9: mov    %rbp,0x50(%rsp)
  0x00007f757046f0ee: mov    %rsi,0x48(%rsp)
  0x00007f757046f0f3: mov    %rdi,0x40(%rsp)
  0x00007f757046f0f8: mov    %r8,0x38(%rsp)
  0x00007f757046f0fd: mov    %r9,0x30(%rsp)
  0x00007f757046f102: mov    %r10,0x28(%rsp)
  0x00007f757046f107: mov    %r11,0x20(%rsp)
  0x00007f757046f10c: mov    %r12,0x18(%rsp)
  0x00007f757046f111: mov    %r13,0x10(%rsp)
  0x00007f757046f116: mov    %r14,0x8(%rsp)
  0x00007f757046f11b: mov    %r15,(%rsp)
  0x00007f757046f11f: sub    $0x200,%rsp
  0x00007f757046f126: fxsave64 (%rsp)
  0x00007f757046f12b: mov    %rsp,0x200(%r15)
  0x00007f757046f132: mov    %r15,%rdi
  0x00007f757046f135: callq  0x00007f7585521582
  0x00007f757046f13a: movabs $0x0,%r10
  0x00007f757046f144: mov    %r10,0x200(%r15)
  0x00007f757046f14b: movabs $0x0,%r10
  0x00007f757046f155: mov    %r10,0x208(%r15)
  0x00007f757046f15c: cmpq   $0x0,0x8(%r15)
  0x00007f757046f164: jne    0x00007f757046f1f7
  0x00007f757046f16a: mov    0x268(%r15),%rbx
  0x00007f757046f171: movabs $0x0,%r10
  0x00007f757046f17b: mov    %r10,0x268(%r15)
  0x00007f757046f182: mov    %rbx,0x260(%rsp)
  0x00007f757046f18a: mov    %rax,0x278(%rsp)
  0x00007f757046f192: fxrstor64 (%rsp)
  0x00007f757046f197: add    $0x200,%rsp
  0x00007f757046f19e: mov    (%rsp),%r15
  0x00007f757046f1a2: mov    0x8(%rsp),%r14
  0x00007f757046f1a7: mov    0x10(%rsp),%r13
  0x00007f757046f1ac: mov    0x18(%rsp),%r12
  0x00007f757046f1b1: mov    0x20(%rsp),%r11
  0x00007f757046f1b6: mov    0x28(%rsp),%r10
  0x00007f757046f1bb: mov    0x30(%rsp),%r9
  0x00007f757046f1c0: mov    0x38(%rsp),%r8
  0x00007f757046f1c5: mov    0x40(%rsp),%rdi
  0x00007f757046f1ca: mov    0x48(%rsp),%rsi
  0x00007f757046f1cf: mov    0x50(%rsp),%rbp
  0x00007f757046f1d4: mov    0x60(%rsp),%rbx
  0x00007f757046f1d9: mov    0x68(%rsp),%rdx
  0x00007f757046f1de: mov    0x70(%rsp),%rcx
  0x00007f757046f1e3: mov    0x78(%rsp),%rax
  0x00007f757046f1e8: add    $0x80,%rsp
  0x00007f757046f1ef: add    $0x8,%rsp
  0x00007f757046f1f3: popfq  
  0x00007f757046f1f4: pop    %rbp
  0x00007f757046f1f5: jmpq   *%rax
  0x00007f757046f1f7: fxrstor64 (%rsp)
  0x00007f757046f1fc: add    $0x200,%rsp
  0x00007f757046f203: mov    (%rsp),%r15
  0x00007f757046f207: mov    0x8(%rsp),%r14
  0x00007f757046f20c: mov    0x10(%rsp),%r13
  0x00007f757046f211: mov    0x18(%rsp),%r12
  0x00007f757046f216: mov    0x20(%rsp),%r11
  0x00007f757046f21b: mov    0x28(%rsp),%r10
  0x00007f757046f220: mov    0x30(%rsp),%r9
  0x00007f757046f225: mov    0x38(%rsp),%r8
  0x00007f757046f22a: mov    0x40(%rsp),%rdi
  0x00007f757046f22f: mov    0x48(%rsp),%rsi
  0x00007f757046f234: mov    0x50(%rsp),%rbp
  0x00007f757046f239: mov    0x60(%rsp),%rbx
  0x00007f757046f23e: mov    0x68(%rsp),%rdx
  0x00007f757046f243: mov    0x70(%rsp),%rcx
  0x00007f757046f248: mov    0x78(%rsp),%rax
  0x00007f757046f24d: add    $0x80,%rsp
  0x00007f757046f254: add    $0x8,%rsp
  0x00007f757046f258: popfq  
  0x00007f757046f259: pop    %rbp
  0x00007f757046f25a: movq   $0x0,0x260(%r15)
  0x00007f757046f265: mov    0x8(%r15),%rax
  0x00007f757046f269: jmpq   0x00007f7570369420
  0x00007f757046f26e: hlt    
  0x00007f757046f26f: hlt    

Decoding RuntimeStub - resolve_static_call 0x00007f757046f290
  0x00007f757046f300: push   %rbp
  0x00007f757046f301: mov    %rsp,%rbp
  0x00007f757046f304: pushfq 
  0x00007f757046f305: sub    $0x8,%rsp
  0x00007f757046f309: mov    %rsp,-0x28(%rsp)
  0x00007f757046f30e: sub    $0x80,%rsp
  0x00007f757046f315: mov    %rax,0x78(%rsp)
  0x00007f757046f31a: mov    %rcx,0x70(%rsp)
  0x00007f757046f31f: mov    %rdx,0x68(%rsp)
  0x00007f757046f324: mov    %rbx,0x60(%rsp)
  0x00007f757046f329: mov    %rbp,0x50(%rsp)
  0x00007f757046f32e: mov    %rsi,0x48(%rsp)
  0x00007f757046f333: mov    %rdi,0x40(%rsp)
  0x00007f757046f338: mov    %r8,0x38(%rsp)
  0x00007f757046f33d: mov    %r9,0x30(%rsp)
  0x00007f757046f342: mov    %r10,0x28(%rsp)
  0x00007f757046f347: mov    %r11,0x20(%rsp)
  0x00007f757046f34c: mov    %r12,0x18(%rsp)
  0x00007f757046f351: mov    %r13,0x10(%rsp)
  0x00007f757046f356: mov    %r14,0x8(%rsp)
  0x00007f757046f35b: mov    %r15,(%rsp)
  0x00007f757046f35f: sub    $0x200,%rsp
  0x00007f757046f366: fxsave64 (%rsp)
  0x00007f757046f36b: mov    %rsp,0x200(%r15)
  0x00007f757046f372: mov    %r15,%rdi
  0x00007f757046f375: callq  0x00007f758552131a
  0x00007f757046f37a: movabs $0x0,%r10
  0x00007f757046f384: mov    %r10,0x200(%r15)
  0x00007f757046f38b: movabs $0x0,%r10
  0x00007f757046f395: mov    %r10,0x208(%r15)
  0x00007f757046f39c: cmpq   $0x0,0x8(%r15)
  0x00007f757046f3a4: jne    0x00007f757046f437
  0x00007f757046f3aa: mov    0x268(%r15),%rbx
  0x00007f757046f3b1: movabs $0x0,%r10
  0x00007f757046f3bb: mov    %r10,0x268(%r15)
  0x00007f757046f3c2: mov    %rbx,0x260(%rsp)
  0x00007f757046f3ca: mov    %rax,0x278(%rsp)
  0x00007f757046f3d2: fxrstor64 (%rsp)
  0x00007f757046f3d7: add    $0x200,%rsp
  0x00007f757046f3de: mov    (%rsp),%r15
  0x00007f757046f3e2: mov    0x8(%rsp),%r14
  0x00007f757046f3e7: mov    0x10(%rsp),%r13
  0x00007f757046f3ec: mov    0x18(%rsp),%r12
  0x00007f757046f3f1: mov    0x20(%rsp),%r11
  0x00007f757046f3f6: mov    0x28(%rsp),%r10
  0x00007f757046f3fb: mov    0x30(%rsp),%r9
  0x00007f757046f400: mov    0x38(%rsp),%r8
  0x00007f757046f405: mov    0x40(%rsp),%rdi
  0x00007f757046f40a: mov    0x48(%rsp),%rsi
  0x00007f757046f40f: mov    0x50(%rsp),%rbp
  0x00007f757046f414: mov    0x60(%rsp),%rbx
  0x00007f757046f419: mov    0x68(%rsp),%rdx
  0x00007f757046f41e: mov    0x70(%rsp),%rcx
  0x00007f757046f423: mov    0x78(%rsp),%rax
  0x00007f757046f428: add    $0x80,%rsp
  0x00007f757046f42f: add    $0x8,%rsp
  0x00007f757046f433: popfq  
  0x00007f757046f434: pop    %rbp
  0x00007f757046f435: jmpq   *%rax
  0x00007f757046f437: fxrstor64 (%rsp)
  0x00007f757046f43c: add    $0x200,%rsp
  0x00007f757046f443: mov    (%rsp),%r15
  0x00007f757046f447: mov    0x8(%rsp),%r14
  0x00007f757046f44c: mov    0x10(%rsp),%r13
  0x00007f757046f451: mov    0x18(%rsp),%r12
  0x00007f757046f456: mov    0x20(%rsp),%r11
  0x00007f757046f45b: mov    0x28(%rsp),%r10
  0x00007f757046f460: mov    0x30(%rsp),%r9
  0x00007f757046f465: mov    0x38(%rsp),%r8
  0x00007f757046f46a: mov    0x40(%rsp),%rdi
  0x00007f757046f46f: mov    0x48(%rsp),%rsi
  0x00007f757046f474: mov    0x50(%rsp),%rbp
  0x00007f757046f479: mov    0x60(%rsp),%rbx
  0x00007f757046f47e: mov    0x68(%rsp),%rdx
  0x00007f757046f483: mov    0x70(%rsp),%rcx
  0x00007f757046f488: mov    0x78(%rsp),%rax
  0x00007f757046f48d: add    $0x80,%rsp
  0x00007f757046f494: add    $0x8,%rsp
  0x00007f757046f498: popfq  
  0x00007f757046f499: pop    %rbp
  0x00007f757046f49a: movq   $0x0,0x260(%r15)
  0x00007f757046f4a5: mov    0x8(%r15),%rax
  0x00007f757046f4a9: jmpq   0x00007f7570369420
  0x00007f757046f4ae: hlt    
  0x00007f757046f4af: hlt    

Decoding SafepointBlob 0x00007f757046e5d0
  0x00007f757046e620: push   %rbx
  0x00007f757046e621: push   %rbp
  0x00007f757046e622: mov    %rsp,%rbp
  0x00007f757046e625: pushfq 
  0x00007f757046e626: sub    $0x8,%rsp
  0x00007f757046e62a: mov    %rsp,-0x28(%rsp)
  0x00007f757046e62f: sub    $0x80,%rsp
  0x00007f757046e636: mov    %rax,0x78(%rsp)
  0x00007f757046e63b: mov    %rcx,0x70(%rsp)
  0x00007f757046e640: mov    %rdx,0x68(%rsp)
  0x00007f757046e645: mov    %rbx,0x60(%rsp)
  0x00007f757046e64a: mov    %rbp,0x50(%rsp)
  0x00007f757046e64f: mov    %rsi,0x48(%rsp)
  0x00007f757046e654: mov    %rdi,0x40(%rsp)
  0x00007f757046e659: mov    %r8,0x38(%rsp)
  0x00007f757046e65e: mov    %r9,0x30(%rsp)
  0x00007f757046e663: mov    %r10,0x28(%rsp)
  0x00007f757046e668: mov    %r11,0x20(%rsp)
  0x00007f757046e66d: mov    %r12,0x18(%rsp)
  0x00007f757046e672: mov    %r13,0x10(%rsp)
  0x00007f757046e677: mov    %r14,0x8(%rsp)
  0x00007f757046e67c: mov    %r15,(%rsp)
  0x00007f757046e680: sub    $0x200,%rsp
  0x00007f757046e687: fxsave64 (%rsp)
  0x00007f757046e68c: sub    $0x100,%rsp
  0x00007f757046e693: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f757046e69a: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f757046e6a2: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f757046e6aa: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f757046e6b2: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f757046e6ba: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f757046e6c2: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f757046e6ca: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f757046e6d2: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f757046e6dd: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f757046e6e8: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f757046e6f3: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f757046e6fe: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f757046e709: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f757046e714: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f757046e71f: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f757046e72a: mov    %rsp,0x200(%r15)
  0x00007f757046e731: mov    0x2a8(%r15),%rdi
  0x00007f757046e738: mov    %rdi,0x8(%rbp)
  0x00007f757046e73c: mov    %r15,%rdi
  0x00007f757046e73f: callq  0x00007f7585515892
  0x00007f757046e744: movabs $0x0,%r10
  0x00007f757046e74e: mov    %r10,0x200(%r15)
  0x00007f757046e755: movabs $0x0,%r10
  0x00007f757046e75f: mov    %r10,0x208(%r15)
  0x00007f757046e766: cmpq   $0x0,0x8(%r15)
  0x00007f757046e76e: je     0x00007f757046e87a
  0x00007f757046e774: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f757046e77b: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f757046e783: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f757046e78b: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f757046e793: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f757046e79b: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f757046e7a3: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f757046e7ab: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f757046e7b3: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f757046e7be: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f757046e7c9: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f757046e7d4: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f757046e7df: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f757046e7ea: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f757046e7f5: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f757046e800: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f757046e80b: add    $0x100,%rsp
  0x00007f757046e812: fxrstor64 (%rsp)
  0x00007f757046e817: add    $0x200,%rsp
  0x00007f757046e81e: mov    (%rsp),%r15
  0x00007f757046e822: mov    0x8(%rsp),%r14
  0x00007f757046e827: mov    0x10(%rsp),%r13
  0x00007f757046e82c: mov    0x18(%rsp),%r12
  0x00007f757046e831: mov    0x20(%rsp),%r11
  0x00007f757046e836: mov    0x28(%rsp),%r10
  0x00007f757046e83b: mov    0x30(%rsp),%r9
  0x00007f757046e840: mov    0x38(%rsp),%r8
  0x00007f757046e845: mov    0x40(%rsp),%rdi
  0x00007f757046e84a: mov    0x48(%rsp),%rsi
  0x00007f757046e84f: mov    0x50(%rsp),%rbp
  0x00007f757046e854: mov    0x60(%rsp),%rbx
  0x00007f757046e859: mov    0x68(%rsp),%rdx
  0x00007f757046e85e: mov    0x70(%rsp),%rcx
  0x00007f757046e863: mov    0x78(%rsp),%rax
  0x00007f757046e868: add    $0x80,%rsp
  0x00007f757046e86f: add    $0x8,%rsp
  0x00007f757046e873: popfq  
  0x00007f757046e874: pop    %rbp
  0x00007f757046e875: jmpq   0x00007f7570369420
  0x00007f757046e87a: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f757046e881: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f757046e889: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f757046e891: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f757046e899: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f757046e8a1: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f757046e8a9: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f757046e8b1: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f757046e8b9: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f757046e8c4: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f757046e8cf: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f757046e8da: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f757046e8e5: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f757046e8f0: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f757046e8fb: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f757046e906: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f757046e911: add    $0x100,%rsp
  0x00007f757046e918: fxrstor64 (%rsp)
  0x00007f757046e91d: add    $0x200,%rsp
  0x00007f757046e924: mov    (%rsp),%r15
  0x00007f757046e928: mov    0x8(%rsp),%r14
  0x00007f757046e92d: mov    0x10(%rsp),%r13
  0x00007f757046e932: mov    0x18(%rsp),%r12
  0x00007f757046e937: mov    0x20(%rsp),%r11
  0x00007f757046e93c: mov    0x28(%rsp),%r10
  0x00007f757046e941: mov    0x30(%rsp),%r9
  0x00007f757046e946: mov    0x38(%rsp),%r8
  0x00007f757046e94b: mov    0x40(%rsp),%rdi
  0x00007f757046e950: mov    0x48(%rsp),%rsi
  0x00007f757046e955: mov    0x50(%rsp),%rbp
  0x00007f757046e95a: mov    0x60(%rsp),%rbx
  0x00007f757046e95f: mov    0x68(%rsp),%rdx
  0x00007f757046e964: mov    0x70(%rsp),%rcx
  0x00007f757046e969: mov    0x78(%rsp),%rax
  0x00007f757046e96e: add    $0x80,%rsp
  0x00007f757046e975: add    $0x8,%rsp
  0x00007f757046e979: popfq  
  0x00007f757046e97a: pop    %rbp
  0x00007f757046e97b: retq   
  0x00007f757046e97c: hlt    
  0x00007f757046e97d: hlt    
  0x00007f757046e97e: hlt    
  0x00007f757046e97f: hlt    

Decoding SafepointBlob 0x00007f757046fe50
  0x00007f757046fea0: push   %rbx
  0x00007f757046fea1: push   %rbp
  0x00007f757046fea2: mov    %rsp,%rbp
  0x00007f757046fea5: pushfq 
  0x00007f757046fea6: sub    $0x8,%rsp
  0x00007f757046feaa: mov    %rsp,-0x28(%rsp)
  0x00007f757046feaf: sub    $0x80,%rsp
  0x00007f757046feb6: mov    %rax,0x78(%rsp)
  0x00007f757046febb: mov    %rcx,0x70(%rsp)
  0x00007f757046fec0: mov    %rdx,0x68(%rsp)
  0x00007f757046fec5: mov    %rbx,0x60(%rsp)
  0x00007f757046feca: mov    %rbp,0x50(%rsp)
  0x00007f757046fecf: mov    %rsi,0x48(%rsp)
  0x00007f757046fed4: mov    %rdi,0x40(%rsp)
  0x00007f757046fed9: mov    %r8,0x38(%rsp)
  0x00007f757046fede: mov    %r9,0x30(%rsp)
  0x00007f757046fee3: mov    %r10,0x28(%rsp)
  0x00007f757046fee8: mov    %r11,0x20(%rsp)
  0x00007f757046feed: mov    %r12,0x18(%rsp)
  0x00007f757046fef2: mov    %r13,0x10(%rsp)
  0x00007f757046fef7: mov    %r14,0x8(%rsp)
  0x00007f757046fefc: mov    %r15,(%rsp)
  0x00007f757046ff00: sub    $0x200,%rsp
  0x00007f757046ff07: fxsave64 (%rsp)
  0x00007f757046ff0c: mov    %rsp,0x200(%r15)
  0x00007f757046ff13: mov    0x2a8(%r15),%rdi
  0x00007f757046ff1a: mov    %rdi,0x8(%rbp)
  0x00007f757046ff1e: mov    %r15,%rdi
  0x00007f757046ff21: callq  0x00007f7585515892
  0x00007f757046ff26: movabs $0x0,%r10
  0x00007f757046ff30: mov    %r10,0x200(%r15)
  0x00007f757046ff37: movabs $0x0,%r10
  0x00007f757046ff41: mov    %r10,0x208(%r15)
  0x00007f757046ff48: cmpq   $0x0,0x8(%r15)
  0x00007f757046ff50: je     0x00007f757046ffbe
  0x00007f757046ff56: fxrstor64 (%rsp)
  0x00007f757046ff5b: add    $0x200,%rsp
  0x00007f757046ff62: mov    (%rsp),%r15
  0x00007f757046ff66: mov    0x8(%rsp),%r14
  0x00007f757046ff6b: mov    0x10(%rsp),%r13
  0x00007f757046ff70: mov    0x18(%rsp),%r12
  0x00007f757046ff75: mov    0x20(%rsp),%r11
  0x00007f757046ff7a: mov    0x28(%rsp),%r10
  0x00007f757046ff7f: mov    0x30(%rsp),%r9
  0x00007f757046ff84: mov    0x38(%rsp),%r8
  0x00007f757046ff89: mov    0x40(%rsp),%rdi
  0x00007f757046ff8e: mov    0x48(%rsp),%rsi
  0x00007f757046ff93: mov    0x50(%rsp),%rbp
  0x00007f757046ff98: mov    0x60(%rsp),%rbx
  0x00007f757046ff9d: mov    0x68(%rsp),%rdx
  0x00007f757046ffa2: mov    0x70(%rsp),%rcx
  0x00007f757046ffa7: mov    0x78(%rsp),%rax
  0x00007f757046ffac: add    $0x80,%rsp
  0x00007f757046ffb3: add    $0x8,%rsp
  0x00007f757046ffb7: popfq  
  0x00007f757046ffb8: pop    %rbp
  0x00007f757046ffb9: jmpq   0x00007f7570369420
  0x00007f757046ffbe: fxrstor64 (%rsp)
  0x00007f757046ffc3: add    $0x200,%rsp
  0x00007f757046ffca: mov    (%rsp),%r15
  0x00007f757046ffce: mov    0x8(%rsp),%r14
  0x00007f757046ffd3: mov    0x10(%rsp),%r13
  0x00007f757046ffd8: mov    0x18(%rsp),%r12
  0x00007f757046ffdd: mov    0x20(%rsp),%r11
  0x00007f757046ffe2: mov    0x28(%rsp),%r10
  0x00007f757046ffe7: mov    0x30(%rsp),%r9
  0x00007f757046ffec: mov    0x38(%rsp),%r8
  0x00007f757046fff1: mov    0x40(%rsp),%rdi
  0x00007f757046fff6: mov    0x48(%rsp),%rsi
  0x00007f757046fffb: mov    0x50(%rsp),%rbp
  0x00007f7570470000: mov    0x60(%rsp),%rbx
  0x00007f7570470005: mov    0x68(%rsp),%rdx
  0x00007f757047000a: mov    0x70(%rsp),%rcx
  0x00007f757047000f: mov    0x78(%rsp),%rax
  0x00007f7570470014: add    $0x80,%rsp
  0x00007f757047001b: add    $0x8,%rsp
  0x00007f757047001f: popfq  
  0x00007f7570470020: pop    %rbp
  0x00007f7570470021: retq   
  0x00007f7570470022: hlt    
  0x00007f7570470023: hlt    
  0x00007f7570470024: hlt    
  0x00007f7570470025: hlt    
  0x00007f7570470026: hlt    
  0x00007f7570470027: hlt    

Decoding SafepointBlob 0x00007f7570470050
  0x00007f75704700a0: push   %rbp
  0x00007f75704700a1: mov    %rsp,%rbp
  0x00007f75704700a4: pushfq 
  0x00007f75704700a5: sub    $0x8,%rsp
  0x00007f75704700a9: mov    %rsp,-0x28(%rsp)
  0x00007f75704700ae: sub    $0x80,%rsp
  0x00007f75704700b5: mov    %rax,0x78(%rsp)
  0x00007f75704700ba: mov    %rcx,0x70(%rsp)
  0x00007f75704700bf: mov    %rdx,0x68(%rsp)
  0x00007f75704700c4: mov    %rbx,0x60(%rsp)
  0x00007f75704700c9: mov    %rbp,0x50(%rsp)
  0x00007f75704700ce: mov    %rsi,0x48(%rsp)
  0x00007f75704700d3: mov    %rdi,0x40(%rsp)
  0x00007f75704700d8: mov    %r8,0x38(%rsp)
  0x00007f75704700dd: mov    %r9,0x30(%rsp)
  0x00007f75704700e2: mov    %r10,0x28(%rsp)
  0x00007f75704700e7: mov    %r11,0x20(%rsp)
  0x00007f75704700ec: mov    %r12,0x18(%rsp)
  0x00007f75704700f1: mov    %r13,0x10(%rsp)
  0x00007f75704700f6: mov    %r14,0x8(%rsp)
  0x00007f75704700fb: mov    %r15,(%rsp)
  0x00007f75704700ff: sub    $0x200,%rsp
  0x00007f7570470106: fxsave64 (%rsp)
  0x00007f757047010b: mov    %rsp,0x200(%r15)
  0x00007f7570470112: mov    %r15,%rdi
  0x00007f7570470115: callq  0x00007f7585515892
  0x00007f757047011a: movabs $0x0,%r10
  0x00007f7570470124: mov    %r10,0x200(%r15)
  0x00007f757047012b: movabs $0x0,%r10
  0x00007f7570470135: mov    %r10,0x208(%r15)
  0x00007f757047013c: cmpq   $0x0,0x8(%r15)
  0x00007f7570470144: je     0x00007f75704701b2
  0x00007f757047014a: fxrstor64 (%rsp)
  0x00007f757047014f: add    $0x200,%rsp
  0x00007f7570470156: mov    (%rsp),%r15
  0x00007f757047015a: mov    0x8(%rsp),%r14
  0x00007f757047015f: mov    0x10(%rsp),%r13
  0x00007f7570470164: mov    0x18(%rsp),%r12
  0x00007f7570470169: mov    0x20(%rsp),%r11
  0x00007f757047016e: mov    0x28(%rsp),%r10
  0x00007f7570470173: mov    0x30(%rsp),%r9
  0x00007f7570470178: mov    0x38(%rsp),%r8
  0x00007f757047017d: mov    0x40(%rsp),%rdi
  0x00007f7570470182: mov    0x48(%rsp),%rsi
  0x00007f7570470187: mov    0x50(%rsp),%rbp
  0x00007f757047018c: mov    0x60(%rsp),%rbx
  0x00007f7570470191: mov    0x68(%rsp),%rdx
  0x00007f7570470196: mov    0x70(%rsp),%rcx
  0x00007f757047019b: mov    0x78(%rsp),%rax
  0x00007f75704701a0: add    $0x80,%rsp
  0x00007f75704701a7: add    $0x8,%rsp
  0x00007f75704701ab: popfq  
  0x00007f75704701ac: pop    %rbp
  0x00007f75704701ad: jmpq   0x00007f7570369420
  0x00007f75704701b2: fxrstor64 (%rsp)
  0x00007f75704701b7: add    $0x200,%rsp
  0x00007f75704701be: mov    (%rsp),%r15
  0x00007f75704701c2: mov    0x8(%rsp),%r14
  0x00007f75704701c7: mov    0x10(%rsp),%r13
  0x00007f75704701cc: mov    0x18(%rsp),%r12
  0x00007f75704701d1: mov    0x20(%rsp),%r11
  0x00007f75704701d6: mov    0x28(%rsp),%r10
  0x00007f75704701db: mov    0x30(%rsp),%r9
  0x00007f75704701e0: mov    0x38(%rsp),%r8
  0x00007f75704701e5: mov    0x40(%rsp),%rdi
  0x00007f75704701ea: mov    0x48(%rsp),%rsi
  0x00007f75704701ef: mov    0x50(%rsp),%rbp
  0x00007f75704701f4: mov    0x60(%rsp),%rbx
  0x00007f75704701f9: mov    0x68(%rsp),%rdx
  0x00007f75704701fe: mov    0x70(%rsp),%rcx
  0x00007f7570470203: mov    0x78(%rsp),%rax
  0x00007f7570470208: add    $0x80,%rsp
  0x00007f757047020f: add    $0x8,%rsp
  0x00007f7570470213: popfq  
  0x00007f7570470214: pop    %rbp
  0x00007f7570470215: retq   
  0x00007f7570470216: hlt    
  0x00007f7570470217: hlt    

Decoding DeoptimizationBlob 0x00007f7570470250
  0x00007f75704702e0: push   %rbp
  0x00007f75704702e1: mov    %rsp,%rbp
  0x00007f75704702e4: pushfq 
  0x00007f75704702e5: sub    $0x8,%rsp
  0x00007f75704702e9: mov    %rsp,-0x28(%rsp)
  0x00007f75704702ee: sub    $0x80,%rsp
  0x00007f75704702f5: mov    %rax,0x78(%rsp)
  0x00007f75704702fa: mov    %rcx,0x70(%rsp)
  0x00007f75704702ff: mov    %rdx,0x68(%rsp)
  0x00007f7570470304: mov    %rbx,0x60(%rsp)
  0x00007f7570470309: mov    %rbp,0x50(%rsp)
  0x00007f757047030e: mov    %rsi,0x48(%rsp)
  0x00007f7570470313: mov    %rdi,0x40(%rsp)
  0x00007f7570470318: mov    %r8,0x38(%rsp)
  0x00007f757047031d: mov    %r9,0x30(%rsp)
  0x00007f7570470322: mov    %r10,0x28(%rsp)
  0x00007f7570470327: mov    %r11,0x20(%rsp)
  0x00007f757047032c: mov    %r12,0x18(%rsp)
  0x00007f7570470331: mov    %r13,0x10(%rsp)
  0x00007f7570470336: mov    %r14,0x8(%rsp)
  0x00007f757047033b: mov    %r15,(%rsp)
  0x00007f757047033f: sub    $0x200,%rsp
  0x00007f7570470346: fxsave64 (%rsp)
  0x00007f757047034b: mov    $0x0,%r14d
  0x00007f7570470351: jmpq   0x00007f75704704f1
  0x00007f7570470356: push   %rbp
  0x00007f7570470357: mov    %rsp,%rbp
  0x00007f757047035a: pushfq 
  0x00007f757047035b: sub    $0x8,%rsp
  0x00007f757047035f: mov    %rsp,-0x28(%rsp)
  0x00007f7570470364: sub    $0x80,%rsp
  0x00007f757047036b: mov    %rax,0x78(%rsp)
  0x00007f7570470370: mov    %rcx,0x70(%rsp)
  0x00007f7570470375: mov    %rdx,0x68(%rsp)
  0x00007f757047037a: mov    %rbx,0x60(%rsp)
  0x00007f757047037f: mov    %rbp,0x50(%rsp)
  0x00007f7570470384: mov    %rsi,0x48(%rsp)
  0x00007f7570470389: mov    %rdi,0x40(%rsp)
  0x00007f757047038e: mov    %r8,0x38(%rsp)
  0x00007f7570470393: mov    %r9,0x30(%rsp)
  0x00007f7570470398: mov    %r10,0x28(%rsp)
  0x00007f757047039d: mov    %r11,0x20(%rsp)
  0x00007f75704703a2: mov    %r12,0x18(%rsp)
  0x00007f75704703a7: mov    %r13,0x10(%rsp)
  0x00007f75704703ac: mov    %r14,0x8(%rsp)
  0x00007f75704703b1: mov    %r15,(%rsp)
  0x00007f75704703b5: sub    $0x200,%rsp
  0x00007f75704703bc: fxsave64 (%rsp)
  0x00007f75704703c1: mov    $0x3,%r14d
  0x00007f75704703c7: jmpq   0x00007f75704704f1
  0x00007f75704703cc: mov    %rdx,0x2d8(%r15)
  0x00007f75704703d3: mov    %rax,0x2d0(%r15)
  0x00007f75704703da: pushq  $0x0
  0x00007f75704703df: push   %rbp
  0x00007f75704703e0: mov    %rsp,%rbp
  0x00007f75704703e3: pushfq 
  0x00007f75704703e4: sub    $0x8,%rsp
  0x00007f75704703e8: mov    %rsp,-0x28(%rsp)
  0x00007f75704703ed: sub    $0x80,%rsp
  0x00007f75704703f4: mov    %rax,0x78(%rsp)
  0x00007f75704703f9: mov    %rcx,0x70(%rsp)
  0x00007f75704703fe: mov    %rdx,0x68(%rsp)
  0x00007f7570470403: mov    %rbx,0x60(%rsp)
  0x00007f7570470408: mov    %rbp,0x50(%rsp)
  0x00007f757047040d: mov    %rsi,0x48(%rsp)
  0x00007f7570470412: mov    %rdi,0x40(%rsp)
  0x00007f7570470417: mov    %r8,0x38(%rsp)
  0x00007f757047041c: mov    %r9,0x30(%rsp)
  0x00007f7570470421: mov    %r10,0x28(%rsp)
  0x00007f7570470426: mov    %r11,0x20(%rsp)
  0x00007f757047042b: mov    %r12,0x18(%rsp)
  0x00007f7570470430: mov    %r13,0x10(%rsp)
  0x00007f7570470435: mov    %r14,0x8(%rsp)
  0x00007f757047043a: mov    %r15,(%rsp)
  0x00007f757047043e: sub    $0x200,%rsp
  0x00007f7570470445: fxsave64 (%rsp)
  0x00007f757047044a: mov    $0x1,%r14d
  0x00007f7570470450: mov    0x2d8(%r15),%rdx
  0x00007f7570470457: mov    %rdx,0x8(%rbp)
  0x00007f757047045b: movq   $0x0,0x2d8(%r15)
  0x00007f7570470466: mov    0x2d0(%r15),%rax
  0x00007f757047046d: mov    0x8(%r15),%rax
  0x00007f7570470471: test   %rax,%rax
  0x00007f7570470474: je     0x00007f75704704f1
  0x00007f757047047a: mov    %rsp,-0x28(%rsp)
  0x00007f757047047f: sub    $0x80,%rsp
  0x00007f7570470486: mov    %rax,0x78(%rsp)
  0x00007f757047048b: mov    %rcx,0x70(%rsp)
  0x00007f7570470490: mov    %rdx,0x68(%rsp)
  0x00007f7570470495: mov    %rbx,0x60(%rsp)
  0x00007f757047049a: mov    %rbp,0x50(%rsp)
  0x00007f757047049f: mov    %rsi,0x48(%rsp)
  0x00007f75704704a4: mov    %rdi,0x40(%rsp)
  0x00007f75704704a9: mov    %r8,0x38(%rsp)
  0x00007f75704704ae: mov    %r9,0x30(%rsp)
  0x00007f75704704b3: mov    %r10,0x28(%rsp)
  0x00007f75704704b8: mov    %r11,0x20(%rsp)
  0x00007f75704704bd: mov    %r12,0x18(%rsp)
  0x00007f75704704c2: mov    %r13,0x10(%rsp)
  0x00007f75704704c7: mov    %r14,0x8(%rsp)
  0x00007f75704704cc: mov    %r15,(%rsp)
  0x00007f75704704d0: movabs $0x7f758592ff90,%rdi
  0x00007f75704704da: movabs $0x7f757047047a,%rsi
  0x00007f75704704e4: mov    %rsp,%rdx
  0x00007f75704704e7: and    $0xfffffffffffffff0,%rsp
  0x00007f75704704eb: callq  0x00007f75853729fa
  0x00007f75704704f0: hlt    
  0x00007f75704704f1: mov    %rsp,0x200(%r15)
  0x00007f75704704f8: cmpq   $0x0,0x210(%r15)
  0x00007f7570470503: je     0x00007f7570470580
  0x00007f7570470509: mov    %rsp,-0x28(%rsp)
  0x00007f757047050e: sub    $0x80,%rsp
  0x00007f7570470515: mov    %rax,0x78(%rsp)
  0x00007f757047051a: mov    %rcx,0x70(%rsp)
  0x00007f757047051f: mov    %rdx,0x68(%rsp)
  0x00007f7570470524: mov    %rbx,0x60(%rsp)
  0x00007f7570470529: mov    %rbp,0x50(%rsp)
  0x00007f757047052e: mov    %rsi,0x48(%rsp)
  0x00007f7570470533: mov    %rdi,0x40(%rsp)
  0x00007f7570470538: mov    %r8,0x38(%rsp)
  0x00007f757047053d: mov    %r9,0x30(%rsp)
  0x00007f7570470542: mov    %r10,0x28(%rsp)
  0x00007f7570470547: mov    %r11,0x20(%rsp)
  0x00007f757047054c: mov    %r12,0x18(%rsp)
  0x00007f7570470551: mov    %r13,0x10(%rsp)
  0x00007f7570470556: mov    %r14,0x8(%rsp)
  0x00007f757047055b: mov    %r15,(%rsp)
  0x00007f757047055f: movabs $0x7f758592ffb8,%rdi
  0x00007f7570470569: movabs $0x7f7570470509,%rsi
  0x00007f7570470573: mov    %rsp,%rdx
  0x00007f7570470576: and    $0xfffffffffffffff0,%rsp
  0x00007f757047057a: callq  0x00007f75853729fa
  0x00007f757047057f: hlt    
  0x00007f7570470580: mov    %r15,%rdi
  0x00007f7570470583: callq  0x00007f7584fc77e0
  0x00007f7570470588: movabs $0x0,%r10
  0x00007f7570470592: mov    %r10,0x200(%r15)
  0x00007f7570470599: movabs $0x0,%r10
  0x00007f75704705a3: mov    %r10,0x208(%r15)
  0x00007f75704705aa: mov    %rax,%rdi
  0x00007f75704705ad: cmp    $0x1,%r14d
  0x00007f75704705b1: jne    0x00007f75704705eb
  0x00007f75704705b7: mov    0x2d0(%r15),%rax
  0x00007f75704705be: mov    0x2d8(%r15),%rdx
  0x00007f75704705c5: movq   $0x0,0x2d0(%r15)
  0x00007f75704705d0: movq   $0x0,0x2d8(%r15)
  0x00007f75704705db: mov    %rax,0x278(%rsp)
  0x00007f75704705e3: mov    %rdx,0x268(%rsp)
  0x00007f75704705eb: vmovsd 0xa0(%rsp),%xmm0
  0x00007f75704705f4: mov    0x278(%rsp),%rax
  0x00007f75704705fc: mov    0x268(%rsp),%rdx
  0x00007f7570470604: add    $0x298,%rsp
  0x00007f757047060b: mov    0x8(%rdi),%ecx
  0x00007f757047060e: add    %rcx,%rsp
  0x00007f7570470611: mov    0x38(%rdi),%rbp
  0x00007f7570470615: mov    0x14(%rdi),%ebx
  0x00007f7570470618: mov    %rsp,%rcx
  0x00007f757047061b: mov    %ebx,-0x1000(%rcx)
  0x00007f7570470621: sub    $0x1000,%rcx
  0x00007f7570470628: sub    $0x1000,%ebx
  0x00007f757047062e: jg     0x00007f757047061b
  0x00007f7570470630: mov    %rbx,-0x1000(%rcx)
  0x00007f7570470637: mov    %rbx,-0x2000(%rcx)
  0x00007f757047063e: mov    %rbx,-0x3000(%rcx)
  0x00007f7570470645: mov    %rbx,-0x4000(%rcx)
  0x00007f757047064c: mov    %rbx,-0x5000(%rcx)
  0x00007f7570470653: mov    %rbx,-0x6000(%rcx)
  0x00007f757047065a: mov    %rbx,-0x7000(%rcx)
  0x00007f7570470661: mov    %rbx,-0x8000(%rcx)
  0x00007f7570470668: mov    %rbx,-0x9000(%rcx)
  0x00007f757047066f: mov    %rbx,-0xa000(%rcx)
  0x00007f7570470676: mov    %rbx,-0xb000(%rcx)
  0x00007f757047067d: mov    %rbx,-0xc000(%rcx)
  0x00007f7570470684: mov    %rbx,-0xd000(%rcx)
  0x00007f757047068b: mov    %rbx,-0xe000(%rcx)
  0x00007f7570470692: mov    %rbx,-0xf000(%rcx)
  0x00007f7570470699: mov    %rbx,-0x10000(%rcx)
  0x00007f75704706a0: mov    %rbx,-0x11000(%rcx)
  0x00007f75704706a7: mov    %rbx,-0x12000(%rcx)
  0x00007f75704706ae: mov    %rbx,-0x13000(%rcx)
  0x00007f75704706b5: mov    %rbx,-0x14000(%rcx)
  0x00007f75704706bc: mov    %rbx,-0x15000(%rcx)
  0x00007f75704706c3: mov    0x20(%rdi),%rcx
  0x00007f75704706c7: add    $0x8,%rsp
  0x00007f75704706cb: mov    0x18(%rdi),%rsi
  0x00007f75704706cf: mov    0x10(%rdi),%edx
  0x00007f75704706d2: mov    %rsp,%r8
  0x00007f75704706d5: mov    0xc(%rdi),%ebx
  0x00007f75704706d8: sub    %rbx,%rsp
  0x00007f75704706db: mov    (%rsi),%rbx
  0x00007f75704706de: sub    $0x10,%rbx
  0x00007f75704706e2: rex.W pushq (%rcx)
  0x00007f75704706e5: push   %rbp
  0x00007f75704706e6: mov    %rsp,%rbp
  0x00007f75704706e9: sub    %rbx,%rsp
  0x00007f75704706ec: movq   $0x0,-0x10(%rbp)
  0x00007f75704706f4: mov    %r8,-0x8(%rbp)
  0x00007f75704706f8: mov    %rsp,%r8
  0x00007f75704706fb: add    $0x8,%rsi
  0x00007f75704706ff: add    $0x8,%rcx
  0x00007f7570470703: dec    %edx
  0x00007f7570470705: jne    0x00007f75704706db
  0x00007f7570470707: rex.W pushq (%rcx)
  0x00007f757047070a: push   %rbp
  0x00007f757047070b: mov    %rsp,%rbp
  0x00007f757047070e: sub    $0x290,%rsp
  0x00007f7570470715: vmovsd %xmm0,0xa0(%rsp)
  0x00007f757047071e: mov    %rax,0x278(%rsp)
  0x00007f7570470726: mov    %rbp,0x210(%r15)
  0x00007f757047072d: movabs $0x7f7570470726,%r10
  0x00007f7570470737: mov    %r10,0x208(%r15)
  0x00007f757047073e: mov    %rsp,0x200(%r15)
  0x00007f7570470745: and    $0xfffffffffffffff0,%rsp
  0x00007f7570470749: mov    %r15,%rdi
  0x00007f757047074c: mov    %r14d,%esi
  0x00007f757047074f: callq  0x00007f7584fc8f9e
  0x00007f7570470754: mov    0x200(%r15),%rsp
  0x00007f757047075b: movabs $0x0,%r10
  0x00007f7570470765: mov    %r10,0x200(%r15)
  0x00007f757047076c: movabs $0x0,%r10
  0x00007f7570470776: mov    %r10,0x210(%r15)
  0x00007f757047077d: movabs $0x0,%r10
  0x00007f7570470787: mov    %r10,0x208(%r15)
  0x00007f757047078e: vmovsd 0xa0(%rsp),%xmm0
  0x00007f7570470797: mov    0x278(%rsp),%rax
  0x00007f757047079f: mov    0x268(%rsp),%rdx
  0x00007f75704707a7: leaveq 
  0x00007f75704707a8: retq   
  0x00007f75704707a9: hlt    
  0x00007f75704707aa: hlt    
  0x00007f75704707ab: hlt    
  0x00007f75704707ac: hlt    
  0x00007f75704707ad: hlt    
  0x00007f75704707ae: hlt    
  0x00007f75704707af: hlt    

Decoding UncommonTrapBlob 0x00007f75704707d0
  0x00007f7570470820: sub    $0x8,%rsp
  0x00007f7570470824: mov    %rbp,(%rsp)
  0x00007f7570470828: mov    %esi,%esi
  0x00007f757047082a: mov    %rsp,0x200(%r15)
  0x00007f7570470831: mov    %r15,%rdi
  0x00007f7570470834: callq  0x00007f7584fcd592
  0x00007f7570470839: movabs $0x0,%r10
  0x00007f7570470843: mov    %r10,0x200(%r15)
  0x00007f757047084a: movabs $0x0,%r10
  0x00007f7570470854: mov    %r10,0x208(%r15)
  0x00007f757047085b: mov    %rax,%rdi
  0x00007f757047085e: add    $0x8,%rsp
  0x00007f7570470862: mov    0x8(%rdi),%ecx
  0x00007f7570470865: add    %rcx,%rsp
  0x00007f7570470868: mov    0x38(%rdi),%rbp
  0x00007f757047086c: mov    0x14(%rdi),%ebx
  0x00007f757047086f: mov    %rsp,%rcx
  0x00007f7570470872: mov    %ebx,-0x1000(%rcx)
  0x00007f7570470878: sub    $0x1000,%rcx
  0x00007f757047087f: sub    $0x1000,%ebx
  0x00007f7570470885: jg     0x00007f7570470872
  0x00007f7570470887: mov    %rbx,-0x1000(%rcx)
  0x00007f757047088e: mov    %rbx,-0x2000(%rcx)
  0x00007f7570470895: mov    %rbx,-0x3000(%rcx)
  0x00007f757047089c: mov    %rbx,-0x4000(%rcx)
  0x00007f75704708a3: mov    %rbx,-0x5000(%rcx)
  0x00007f75704708aa: mov    %rbx,-0x6000(%rcx)
  0x00007f75704708b1: mov    %rbx,-0x7000(%rcx)
  0x00007f75704708b8: mov    %rbx,-0x8000(%rcx)
  0x00007f75704708bf: mov    %rbx,-0x9000(%rcx)
  0x00007f75704708c6: mov    %rbx,-0xa000(%rcx)
  0x00007f75704708cd: mov    %rbx,-0xb000(%rcx)
  0x00007f75704708d4: mov    %rbx,-0xc000(%rcx)
  0x00007f75704708db: mov    %rbx,-0xd000(%rcx)
  0x00007f75704708e2: mov    %rbx,-0xe000(%rcx)
  0x00007f75704708e9: mov    %rbx,-0xf000(%rcx)
  0x00007f75704708f0: mov    %rbx,-0x10000(%rcx)
  0x00007f75704708f7: mov    %rbx,-0x11000(%rcx)
  0x00007f75704708fe: mov    %rbx,-0x12000(%rcx)
  0x00007f7570470905: mov    %rbx,-0x13000(%rcx)
  0x00007f757047090c: mov    %rbx,-0x14000(%rcx)
  0x00007f7570470913: mov    %rbx,-0x15000(%rcx)
  0x00007f757047091a: mov    0x20(%rdi),%rcx
  0x00007f757047091e: add    $0x8,%rsp
  0x00007f7570470922: mov    0x18(%rdi),%rsi
  0x00007f7570470926: mov    0x10(%rdi),%edx
  0x00007f7570470929: mov    %rsp,%r8
  0x00007f757047092c: mov    0xc(%rdi),%ebx
  0x00007f757047092f: sub    %rbx,%rsp
  0x00007f7570470932: mov    (%rsi),%rbx
  0x00007f7570470935: sub    $0x10,%rbx
  0x00007f7570470939: rex.W pushq (%rcx)
  0x00007f757047093c: push   %rbp
  0x00007f757047093d: mov    %rsp,%rbp
  0x00007f7570470940: sub    %rbx,%rsp
  0x00007f7570470943: mov    %r8,-0x8(%rbp)
  0x00007f7570470947: movq   $0x0,-0x10(%rbp)
  0x00007f757047094f: mov    %rsp,%r8
  0x00007f7570470952: add    $0x8,%rsi
  0x00007f7570470956: add    $0x8,%rcx
  0x00007f757047095a: dec    %edx
  0x00007f757047095c: jne    0x00007f7570470932
  0x00007f757047095e: rex.W pushq (%rcx)
  0x00007f7570470961: push   %rbp
  0x00007f7570470962: mov    %rsp,%rbp
  0x00007f7570470965: sub    $0x0,%rsp
  0x00007f7570470969: mov    %rbp,0x210(%r15)
  0x00007f7570470970: movabs $0x7f7570470969,%r10
  0x00007f757047097a: mov    %r10,0x208(%r15)
  0x00007f7570470981: mov    %rsp,0x200(%r15)
  0x00007f7570470988: and    $0xfffffffffffffff0,%rsp
  0x00007f757047098c: mov    %r15,%rdi
  0x00007f757047098f: mov    $0x2,%esi
  0x00007f7570470994: callq  0x00007f7584fc8f9e
  0x00007f7570470999: movabs $0x0,%r10
  0x00007f75704709a3: mov    %r10,0x200(%r15)
  0x00007f75704709aa: movabs $0x0,%r10
  0x00007f75704709b4: mov    %r10,0x210(%r15)
  0x00007f75704709bb: movabs $0x0,%r10
  0x00007f75704709c5: mov    %r10,0x208(%r15)
  0x00007f75704709cc: leaveq 
  0x00007f75704709cd: retq   
  0x00007f75704709ce: hlt    
  0x00007f75704709cf: hlt    

AHE@0x00007f75800c14d8: 0xb0000000 i2c: 0x00007f757046fc20 c2i: 0x00007f757046fd34 c2iUV: 0x00007f757046fd07
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757046fd34
  0x00007f757046fc20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757046fc24: movabs $0x7f757036e3e0,%r11
  0x00007f757046fc2e: cmp    %r11,%rax
  0x00007f757046fc31: jbe    0x00007f757046fc4a
  0x00007f757046fc37: movabs $0x7f757046e3e0,%r11
  0x00007f757046fc41: cmp    %r11,%rax
  0x00007f757046fc44: jb     0x00007f757046fce7
  0x00007f757046fc4a: movabs $0x7f7570369420,%r11
  0x00007f757046fc54: cmp    %r11,%rax
  0x00007f757046fc57: jbe    0x00007f757046fc70
  0x00007f757046fc5d: movabs $0x7f757036de58,%r11
  0x00007f757046fc67: cmp    %r11,%rax
  0x00007f757046fc6a: jb     0x00007f757046fce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757046fc70: mov    %rsp,-0x28(%rsp)
  0x00007f757046fc75: sub    $0x80,%rsp
  0x00007f757046fc7c: mov    %rax,0x78(%rsp)
  0x00007f757046fc81: mov    %rcx,0x70(%rsp)
  0x00007f757046fc86: mov    %rdx,0x68(%rsp)
  0x00007f757046fc8b: mov    %rbx,0x60(%rsp)
  0x00007f757046fc90: mov    %rbp,0x50(%rsp)
  0x00007f757046fc95: mov    %rsi,0x48(%rsp)
  0x00007f757046fc9a: mov    %rdi,0x40(%rsp)
  0x00007f757046fc9f: mov    %r8,0x38(%rsp)
  0x00007f757046fca4: mov    %r9,0x30(%rsp)
  0x00007f757046fca9: mov    %r10,0x28(%rsp)
  0x00007f757046fcae: mov    %r11,0x20(%rsp)
  0x00007f757046fcb3: mov    %r12,0x18(%rsp)
  0x00007f757046fcb8: mov    %r13,0x10(%rsp)
  0x00007f757046fcbd: mov    %r14,0x8(%rsp)
  0x00007f757046fcc2: mov    %r15,(%rsp)
  0x00007f757046fcc6: movabs $0x7f758592f470,%rdi
  0x00007f757046fcd0: movabs $0x7f757046fc70,%rsi
  0x00007f757046fcda: mov    %rsp,%rdx
  0x00007f757046fcdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757046fce1: callq  0x00007f75853729fa
  0x00007f757046fce6: hlt    
  ;; } verify_i2ce 
  0x00007f757046fce7: mov    %rsp,%r11
  0x00007f757046fcea: and    $0xfffffffffffffff0,%rsp
  0x00007f757046fcee: push   %rax
  0x00007f757046fcef: mov    %r11,%rax
  0x00007f757046fcf2: mov    0x50(%rbx),%r11
  0x00007f757046fcf6: mov    0x8(%rax),%rsi
  0x00007f757046fcfa: mov    %rbx,0x258(%r15)
  0x00007f757046fd01: mov    %rbx,%rax
  0x00007f757046fd04: jmpq   *%r11
  0x00007f757046fd07: mov    0x8(%rsi),%ebx
  0x00007f757046fd0a: shl    $0x3,%rbx
  0x00007f757046fd0e: cmp    0x10(%rax),%rbx
  0x00007f757046fd12: mov    0x8(%rax),%rbx
  0x00007f757046fd16: je     0x00007f757046fd21
  0x00007f757046fd1c: jmpq   0x00007f757046ec40
  0x00007f757046fd21: cmpq   $0x0,0x58(%rbx)
  0x00007f757046fd29: je     0x00007f757046fe24
  0x00007f757046fd2f: jmpq   0x00007f757046ec40
  0x00007f757046fd34: cmpq   $0x0,0x58(%rbx)
  0x00007f757046fd3c: je     0x00007f757046fe24
  0x00007f757046fd42: mov    %rsp,%r13
  0x00007f757046fd45: mov    (%rsp),%rax
  0x00007f757046fd49: and    $0xfffffffffffffff0,%rsp
  0x00007f757046fd4d: pushfq 
  0x00007f757046fd4e: sub    $0x8,%rsp
  0x00007f757046fd52: mov    %rsp,-0x28(%rsp)
  0x00007f757046fd57: sub    $0x80,%rsp
  0x00007f757046fd5e: mov    %rax,0x78(%rsp)
  0x00007f757046fd63: mov    %rcx,0x70(%rsp)
  0x00007f757046fd68: mov    %rdx,0x68(%rsp)
  0x00007f757046fd6d: mov    %rbx,0x60(%rsp)
  0x00007f757046fd72: mov    %rbp,0x50(%rsp)
  0x00007f757046fd77: mov    %rsi,0x48(%rsp)
  0x00007f757046fd7c: mov    %rdi,0x40(%rsp)
  0x00007f757046fd81: mov    %r8,0x38(%rsp)
  0x00007f757046fd86: mov    %r9,0x30(%rsp)
  0x00007f757046fd8b: mov    %r10,0x28(%rsp)
  0x00007f757046fd90: mov    %r11,0x20(%rsp)
  0x00007f757046fd95: mov    %r12,0x18(%rsp)
  0x00007f757046fd9a: mov    %r13,0x10(%rsp)
  0x00007f757046fd9f: mov    %r14,0x8(%rsp)
  0x00007f757046fda4: mov    %r15,(%rsp)
  0x00007f757046fda8: sub    $0x200,%rsp
  0x00007f757046fdaf: fxsave64 (%rsp)
  0x00007f757046fdb4: mov    %rbx,%rdi
  0x00007f757046fdb7: mov    %rax,%rsi
  0x00007f757046fdba: callq  0x00007f7585522bca
  0x00007f757046fdbf: fxrstor64 (%rsp)
  0x00007f757046fdc4: add    $0x200,%rsp
  0x00007f757046fdcb: mov    (%rsp),%r15
  0x00007f757046fdcf: mov    0x8(%rsp),%r14
  0x00007f757046fdd4: mov    0x10(%rsp),%r13
  0x00007f757046fdd9: mov    0x18(%rsp),%r12
  0x00007f757046fdde: mov    0x20(%rsp),%r11
  0x00007f757046fde3: mov    0x28(%rsp),%r10
  0x00007f757046fde8: mov    0x30(%rsp),%r9
  0x00007f757046fded: mov    0x38(%rsp),%r8
  0x00007f757046fdf2: mov    0x40(%rsp),%rdi
  0x00007f757046fdf7: mov    0x48(%rsp),%rsi
  0x00007f757046fdfc: mov    0x50(%rsp),%rbp
  0x00007f757046fe01: mov    0x60(%rsp),%rbx
  0x00007f757046fe06: mov    0x68(%rsp),%rdx
  0x00007f757046fe0b: mov    0x70(%rsp),%rcx
  0x00007f757046fe10: mov    0x78(%rsp),%rax
  0x00007f757046fe15: add    $0x80,%rsp
  0x00007f757046fe1c: add    $0x8,%rsp
  0x00007f757046fe20: popfq  
  0x00007f757046fe21: mov    %r13,%rsp
  0x00007f757046fe24: pop    %rax
  0x00007f757046fe25: mov    %rsp,%r13
  0x00007f757046fe28: sub    $0x10,%rsp
  0x00007f757046fe2c: mov    %rax,(%rsp)
  0x00007f757046fe30: mov    %rsi,0x8(%rsp)
  0x00007f757046fe35: mov    0x40(%rbx),%rcx
  0x00007f757046fe39: jmpq   *%rcx

AHE@0x00007f75800c1520: 0xb0000000 i2c: 0x00007f757046f960 c2i: 0x00007f757046fa74 c2iUV: 0x00007f757046fa47
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757046fa74
  0x00007f757046f960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757046f964: movabs $0x7f757036e3e0,%r11
  0x00007f757046f96e: cmp    %r11,%rax
  0x00007f757046f971: jbe    0x00007f757046f98a
  0x00007f757046f977: movabs $0x7f757046e3e0,%r11
  0x00007f757046f981: cmp    %r11,%rax
  0x00007f757046f984: jb     0x00007f757046fa27
  0x00007f757046f98a: movabs $0x7f7570369420,%r11
  0x00007f757046f994: cmp    %r11,%rax
  0x00007f757046f997: jbe    0x00007f757046f9b0
  0x00007f757046f99d: movabs $0x7f757036de58,%r11
  0x00007f757046f9a7: cmp    %r11,%rax
  0x00007f757046f9aa: jb     0x00007f757046fa27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757046f9b0: mov    %rsp,-0x28(%rsp)
  0x00007f757046f9b5: sub    $0x80,%rsp
  0x00007f757046f9bc: mov    %rax,0x78(%rsp)
  0x00007f757046f9c1: mov    %rcx,0x70(%rsp)
  0x00007f757046f9c6: mov    %rdx,0x68(%rsp)
  0x00007f757046f9cb: mov    %rbx,0x60(%rsp)
  0x00007f757046f9d0: mov    %rbp,0x50(%rsp)
  0x00007f757046f9d5: mov    %rsi,0x48(%rsp)
  0x00007f757046f9da: mov    %rdi,0x40(%rsp)
  0x00007f757046f9df: mov    %r8,0x38(%rsp)
  0x00007f757046f9e4: mov    %r9,0x30(%rsp)
  0x00007f757046f9e9: mov    %r10,0x28(%rsp)
  0x00007f757046f9ee: mov    %r11,0x20(%rsp)
  0x00007f757046f9f3: mov    %r12,0x18(%rsp)
  0x00007f757046f9f8: mov    %r13,0x10(%rsp)
  0x00007f757046f9fd: mov    %r14,0x8(%rsp)
  0x00007f757046fa02: mov    %r15,(%rsp)
  0x00007f757046fa06: movabs $0x7f758592f470,%rdi
  0x00007f757046fa10: movabs $0x7f757046f9b0,%rsi
  0x00007f757046fa1a: mov    %rsp,%rdx
  0x00007f757046fa1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757046fa21: callq  0x00007f75853729fa
  0x00007f757046fa26: hlt    
  ;; } verify_i2ce 
  0x00007f757046fa27: mov    %rsp,%r11
  0x00007f757046fa2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757046fa2e: push   %rax
  0x00007f757046fa2f: mov    %r11,%rax
  0x00007f757046fa32: mov    0x50(%rbx),%r11
  0x00007f757046fa36: mov    0x8(%rax),%rsi
  0x00007f757046fa3a: mov    %rbx,0x258(%r15)
  0x00007f757046fa41: mov    %rbx,%rax
  0x00007f757046fa44: jmpq   *%r11
  0x00007f757046fa47: mov    0x8(%rsi),%ebx
  0x00007f757046fa4a: shl    $0x3,%rbx
  0x00007f757046fa4e: cmp    0x10(%rax),%rbx
  0x00007f757046fa52: mov    0x8(%rax),%rbx
  0x00007f757046fa56: je     0x00007f757046fa61
  0x00007f757046fa5c: jmpq   0x00007f757046ec40
  0x00007f757046fa61: cmpq   $0x0,0x58(%rbx)
  0x00007f757046fa69: je     0x00007f757046fb64
  0x00007f757046fa6f: jmpq   0x00007f757046ec40
  0x00007f757046fa74: cmpq   $0x0,0x58(%rbx)
  0x00007f757046fa7c: je     0x00007f757046fb64
  0x00007f757046fa82: mov    %rsp,%r13
  0x00007f757046fa85: mov    (%rsp),%rax
  0x00007f757046fa89: and    $0xfffffffffffffff0,%rsp
  0x00007f757046fa8d: pushfq 
  0x00007f757046fa8e: sub    $0x8,%rsp
  0x00007f757046fa92: mov    %rsp,-0x28(%rsp)
  0x00007f757046fa97: sub    $0x80,%rsp
  0x00007f757046fa9e: mov    %rax,0x78(%rsp)
  0x00007f757046faa3: mov    %rcx,0x70(%rsp)
  0x00007f757046faa8: mov    %rdx,0x68(%rsp)
  0x00007f757046faad: mov    %rbx,0x60(%rsp)
  0x00007f757046fab2: mov    %rbp,0x50(%rsp)
  0x00007f757046fab7: mov    %rsi,0x48(%rsp)
  0x00007f757046fabc: mov    %rdi,0x40(%rsp)
  0x00007f757046fac1: mov    %r8,0x38(%rsp)
  0x00007f757046fac6: mov    %r9,0x30(%rsp)
  0x00007f757046facb: mov    %r10,0x28(%rsp)
  0x00007f757046fad0: mov    %r11,0x20(%rsp)
  0x00007f757046fad5: mov    %r12,0x18(%rsp)
  0x00007f757046fada: mov    %r13,0x10(%rsp)
  0x00007f757046fadf: mov    %r14,0x8(%rsp)
  0x00007f757046fae4: mov    %r15,(%rsp)
  0x00007f757046fae8: sub    $0x200,%rsp
  0x00007f757046faef: fxsave64 (%rsp)
  0x00007f757046faf4: mov    %rbx,%rdi
  0x00007f757046faf7: mov    %rax,%rsi
  0x00007f757046fafa: callq  0x00007f7585522bca
  0x00007f757046faff: fxrstor64 (%rsp)
  0x00007f757046fb04: add    $0x200,%rsp
  0x00007f757046fb0b: mov    (%rsp),%r15
  0x00007f757046fb0f: mov    0x8(%rsp),%r14
  0x00007f757046fb14: mov    0x10(%rsp),%r13
  0x00007f757046fb19: mov    0x18(%rsp),%r12
  0x00007f757046fb1e: mov    0x20(%rsp),%r11
  0x00007f757046fb23: mov    0x28(%rsp),%r10
  0x00007f757046fb28: mov    0x30(%rsp),%r9
  0x00007f757046fb2d: mov    0x38(%rsp),%r8
  0x00007f757046fb32: mov    0x40(%rsp),%rdi
  0x00007f757046fb37: mov    0x48(%rsp),%rsi
  0x00007f757046fb3c: mov    0x50(%rsp),%rbp
  0x00007f757046fb41: mov    0x60(%rsp),%rbx
  0x00007f757046fb46: mov    0x68(%rsp),%rdx
  0x00007f757046fb4b: mov    0x70(%rsp),%rcx
  0x00007f757046fb50: mov    0x78(%rsp),%rax
  0x00007f757046fb55: add    $0x80,%rsp
  0x00007f757046fb5c: add    $0x8,%rsp
  0x00007f757046fb60: popfq  
  0x00007f757046fb61: mov    %r13,%rsp
  0x00007f757046fb64: pop    %rax
  0x00007f757046fb65: mov    %rsp,%r13
  0x00007f757046fb68: sub    $0x10,%rsp
  0x00007f757046fb6c: mov    %rax,(%rsp)
  0x00007f757046fb70: mov    %rsi,0x8(%rsp)
  0x00007f757046fb75: mov    0x40(%rbx),%rcx
  0x00007f757046fb79: jmpq   *%rcx

AHE@0x00007f75800c1568: 0x i2c: 0x00007f757046f6a0 c2i: 0x00007f757046f7b0 c2iUV: 0x00007f757046f783
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f757046f7b0
  0x00007f757046f6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757046f6a4: movabs $0x7f757036e3e0,%r11
  0x00007f757046f6ae: cmp    %r11,%rax
  0x00007f757046f6b1: jbe    0x00007f757046f6ca
  0x00007f757046f6b7: movabs $0x7f757046e3e0,%r11
  0x00007f757046f6c1: cmp    %r11,%rax
  0x00007f757046f6c4: jb     0x00007f757046f767
  0x00007f757046f6ca: movabs $0x7f7570369420,%r11
  0x00007f757046f6d4: cmp    %r11,%rax
  0x00007f757046f6d7: jbe    0x00007f757046f6f0
  0x00007f757046f6dd: movabs $0x7f757036de58,%r11
  0x00007f757046f6e7: cmp    %r11,%rax
  0x00007f757046f6ea: jb     0x00007f757046f767
  ;; i2c adapter must return to an interpreter frame
  0x00007f757046f6f0: mov    %rsp,-0x28(%rsp)
  0x00007f757046f6f5: sub    $0x80,%rsp
  0x00007f757046f6fc: mov    %rax,0x78(%rsp)
  0x00007f757046f701: mov    %rcx,0x70(%rsp)
  0x00007f757046f706: mov    %rdx,0x68(%rsp)
  0x00007f757046f70b: mov    %rbx,0x60(%rsp)
  0x00007f757046f710: mov    %rbp,0x50(%rsp)
  0x00007f757046f715: mov    %rsi,0x48(%rsp)
  0x00007f757046f71a: mov    %rdi,0x40(%rsp)
  0x00007f757046f71f: mov    %r8,0x38(%rsp)
  0x00007f757046f724: mov    %r9,0x30(%rsp)
  0x00007f757046f729: mov    %r10,0x28(%rsp)
  0x00007f757046f72e: mov    %r11,0x20(%rsp)
  0x00007f757046f733: mov    %r12,0x18(%rsp)
  0x00007f757046f738: mov    %r13,0x10(%rsp)
  0x00007f757046f73d: mov    %r14,0x8(%rsp)
  0x00007f757046f742: mov    %r15,(%rsp)
  0x00007f757046f746: movabs $0x7f758592f470,%rdi
  0x00007f757046f750: movabs $0x7f757046f6f0,%rsi
  0x00007f757046f75a: mov    %rsp,%rdx
  0x00007f757046f75d: and    $0xfffffffffffffff0,%rsp
  0x00007f757046f761: callq  0x00007f75853729fa
  0x00007f757046f766: hlt    
  ;; } verify_i2ce 
  0x00007f757046f767: mov    %rsp,%r11
  0x00007f757046f76a: and    $0xfffffffffffffff0,%rsp
  0x00007f757046f76e: push   %rax
  0x00007f757046f76f: mov    %r11,%rax
  0x00007f757046f772: mov    0x50(%rbx),%r11
  0x00007f757046f776: mov    %rbx,0x258(%r15)
  0x00007f757046f77d: mov    %rbx,%rax
  0x00007f757046f780: jmpq   *%r11
  0x00007f757046f783: mov    0x8(%rsi),%ebx
  0x00007f757046f786: shl    $0x3,%rbx
  0x00007f757046f78a: cmp    0x10(%rax),%rbx
  0x00007f757046f78e: mov    0x8(%rax),%rbx
  0x00007f757046f792: je     0x00007f757046f79d
  0x00007f757046f798: jmpq   0x00007f757046ec40
  0x00007f757046f79d: cmpq   $0x0,0x58(%rbx)
  0x00007f757046f7a5: je     0x00007f757046f8a0
  0x00007f757046f7ab: jmpq   0x00007f757046ec40
  0x00007f757046f7b0: cmpq   $0x0,0x58(%rbx)
  0x00007f757046f7b8: je     0x00007f757046f8a0
  0x00007f757046f7be: mov    %rsp,%r13
  0x00007f757046f7c1: mov    (%rsp),%rax
  0x00007f757046f7c5: and    $0xfffffffffffffff0,%rsp
  0x00007f757046f7c9: pushfq 
  0x00007f757046f7ca: sub    $0x8,%rsp
  0x00007f757046f7ce: mov    %rsp,-0x28(%rsp)
  0x00007f757046f7d3: sub    $0x80,%rsp
  0x00007f757046f7da: mov    %rax,0x78(%rsp)
  0x00007f757046f7df: mov    %rcx,0x70(%rsp)
  0x00007f757046f7e4: mov    %rdx,0x68(%rsp)
  0x00007f757046f7e9: mov    %rbx,0x60(%rsp)
  0x00007f757046f7ee: mov    %rbp,0x50(%rsp)
  0x00007f757046f7f3: mov    %rsi,0x48(%rsp)
  0x00007f757046f7f8: mov    %rdi,0x40(%rsp)
  0x00007f757046f7fd: mov    %r8,0x38(%rsp)
  0x00007f757046f802: mov    %r9,0x30(%rsp)
  0x00007f757046f807: mov    %r10,0x28(%rsp)
  0x00007f757046f80c: mov    %r11,0x20(%rsp)
  0x00007f757046f811: mov    %r12,0x18(%rsp)
  0x00007f757046f816: mov    %r13,0x10(%rsp)
  0x00007f757046f81b: mov    %r14,0x8(%rsp)
  0x00007f757046f820: mov    %r15,(%rsp)
  0x00007f757046f824: sub    $0x200,%rsp
  0x00007f757046f82b: fxsave64 (%rsp)
  0x00007f757046f830: mov    %rbx,%rdi
  0x00007f757046f833: mov    %rax,%rsi
  0x00007f757046f836: callq  0x00007f7585522bca
  0x00007f757046f83b: fxrstor64 (%rsp)
  0x00007f757046f840: add    $0x200,%rsp
  0x00007f757046f847: mov    (%rsp),%r15
  0x00007f757046f84b: mov    0x8(%rsp),%r14
  0x00007f757046f850: mov    0x10(%rsp),%r13
  0x00007f757046f855: mov    0x18(%rsp),%r12
  0x00007f757046f85a: mov    0x20(%rsp),%r11
  0x00007f757046f85f: mov    0x28(%rsp),%r10
  0x00007f757046f864: mov    0x30(%rsp),%r9
  0x00007f757046f869: mov    0x38(%rsp),%r8
  0x00007f757046f86e: mov    0x40(%rsp),%rdi
  0x00007f757046f873: mov    0x48(%rsp),%rsi
  0x00007f757046f878: mov    0x50(%rsp),%rbp
  0x00007f757046f87d: mov    0x60(%rsp),%rbx
  0x00007f757046f882: mov    0x68(%rsp),%rdx
  0x00007f757046f887: mov    0x70(%rsp),%rcx
  0x00007f757046f88c: mov    0x78(%rsp),%rax
  0x00007f757046f891: add    $0x80,%rsp
  0x00007f757046f898: add    $0x8,%rsp
  0x00007f757046f89c: popfq  
  0x00007f757046f89d: mov    %r13,%rsp
  0x00007f757046f8a0: pop    %rax
  0x00007f757046f8a1: mov    %rsp,%r13
  0x00007f757046f8a4: sub    $0x10,%rsp
  0x00007f757046f8a8: mov    %rax,(%rsp)
  0x00007f757046f8ac: mov    0x40(%rbx),%rcx
  0x00007f757046f8b0: jmpq   *%rcx

AHE@0x00007f75800c15b0: 0xb0000000 i2c: 0x00007f75704773a0 c2i: 0x00007f75704774b4 c2iUV: 0x00007f7570477487
i2c argument handler #0 for: receiver ()Ljava/lang/Object; (539 bytes generated)
c2i argument handler starts at 0x7f75704774b4
  0x00007f75704773a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704773a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704773ae: cmp    %r11,%rax
  0x00007f75704773b1: jbe    0x00007f75704773ca
  0x00007f75704773b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704773c1: cmp    %r11,%rax
  0x00007f75704773c4: jb     0x00007f7570477467
  0x00007f75704773ca: movabs $0x7f7570369420,%r11
  0x00007f75704773d4: cmp    %r11,%rax
  0x00007f75704773d7: jbe    0x00007f75704773f0
  0x00007f75704773dd: movabs $0x7f757036de58,%r11
  0x00007f75704773e7: cmp    %r11,%rax
  0x00007f75704773ea: jb     0x00007f7570477467
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704773f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704773f5: sub    $0x80,%rsp
  0x00007f75704773fc: mov    %rax,0x78(%rsp)
  0x00007f7570477401: mov    %rcx,0x70(%rsp)
  0x00007f7570477406: mov    %rdx,0x68(%rsp)
  0x00007f757047740b: mov    %rbx,0x60(%rsp)
  0x00007f7570477410: mov    %rbp,0x50(%rsp)
  0x00007f7570477415: mov    %rsi,0x48(%rsp)
  0x00007f757047741a: mov    %rdi,0x40(%rsp)
  0x00007f757047741f: mov    %r8,0x38(%rsp)
  0x00007f7570477424: mov    %r9,0x30(%rsp)
  0x00007f7570477429: mov    %r10,0x28(%rsp)
  0x00007f757047742e: mov    %r11,0x20(%rsp)
  0x00007f7570477433: mov    %r12,0x18(%rsp)
  0x00007f7570477438: mov    %r13,0x10(%rsp)
  0x00007f757047743d: mov    %r14,0x8(%rsp)
  0x00007f7570477442: mov    %r15,(%rsp)
  0x00007f7570477446: movabs $0x7f758592f470,%rdi
  0x00007f7570477450: movabs $0x7f75704773f0,%rsi
  0x00007f757047745a: mov    %rsp,%rdx
  0x00007f757047745d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477461: callq  0x00007f75853729fa
  0x00007f7570477466: hlt    
  ;; } verify_i2ce 
  0x00007f7570477467: mov    %rsp,%r11
  0x00007f757047746a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047746e: push   %rax
  0x00007f757047746f: mov    %r11,%rax
  0x00007f7570477472: mov    0x50(%rbx),%r11
  0x00007f7570477476: mov    0x8(%rax),%rsi
  0x00007f757047747a: mov    %rbx,0x258(%r15)
  0x00007f7570477481: mov    %rbx,%rax
  0x00007f7570477484: jmpq   *%r11
  0x00007f7570477487: mov    0x8(%rsi),%ebx
  0x00007f757047748a: shl    $0x3,%rbx
  0x00007f757047748e: cmp    0x10(%rax),%rbx
  0x00007f7570477492: mov    0x8(%rax),%rbx
  0x00007f7570477496: je     0x00007f75704774a1
  0x00007f757047749c: jmpq   0x00007f757046ec40
  0x00007f75704774a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704774a9: je     0x00007f75704775a4
  0x00007f75704774af: jmpq   0x00007f757046ec40
  0x00007f75704774b4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704774bc: je     0x00007f75704775a4
  0x00007f75704774c2: mov    %rsp,%r13
  0x00007f75704774c5: mov    (%rsp),%rax
  0x00007f75704774c9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704774cd: pushfq 
  0x00007f75704774ce: sub    $0x8,%rsp
  0x00007f75704774d2: mov    %rsp,-0x28(%rsp)
  0x00007f75704774d7: sub    $0x80,%rsp
  0x00007f75704774de: mov    %rax,0x78(%rsp)
  0x00007f75704774e3: mov    %rcx,0x70(%rsp)
  0x00007f75704774e8: mov    %rdx,0x68(%rsp)
  0x00007f75704774ed: mov    %rbx,0x60(%rsp)
  0x00007f75704774f2: mov    %rbp,0x50(%rsp)
  0x00007f75704774f7: mov    %rsi,0x48(%rsp)
  0x00007f75704774fc: mov    %rdi,0x40(%rsp)
  0x00007f7570477501: mov    %r8,0x38(%rsp)
  0x00007f7570477506: mov    %r9,0x30(%rsp)
  0x00007f757047750b: mov    %r10,0x28(%rsp)
  0x00007f7570477510: mov    %r11,0x20(%rsp)
  0x00007f7570477515: mov    %r12,0x18(%rsp)
  0x00007f757047751a: mov    %r13,0x10(%rsp)
  0x00007f757047751f: mov    %r14,0x8(%rsp)
  0x00007f7570477524: mov    %r15,(%rsp)
  0x00007f7570477528: sub    $0x200,%rsp
  0x00007f757047752f: fxsave64 (%rsp)
  0x00007f7570477534: mov    %rbx,%rdi
  0x00007f7570477537: mov    %rax,%rsi
  0x00007f757047753a: callq  0x00007f7585522bca
  0x00007f757047753f: fxrstor64 (%rsp)
  0x00007f7570477544: add    $0x200,%rsp
  0x00007f757047754b: mov    (%rsp),%r15
  0x00007f757047754f: mov    0x8(%rsp),%r14
  0x00007f7570477554: mov    0x10(%rsp),%r13
  0x00007f7570477559: mov    0x18(%rsp),%r12
  0x00007f757047755e: mov    0x20(%rsp),%r11
  0x00007f7570477563: mov    0x28(%rsp),%r10
  0x00007f7570477568: mov    0x30(%rsp),%r9
  0x00007f757047756d: mov    0x38(%rsp),%r8
  0x00007f7570477572: mov    0x40(%rsp),%rdi
  0x00007f7570477577: mov    0x48(%rsp),%rsi
  0x00007f757047757c: mov    0x50(%rsp),%rbp
  0x00007f7570477581: mov    0x60(%rsp),%rbx
  0x00007f7570477586: mov    0x68(%rsp),%rdx
  0x00007f757047758b: mov    0x70(%rsp),%rcx
  0x00007f7570477590: mov    0x78(%rsp),%rax
  0x00007f7570477595: add    $0x80,%rsp
  0x00007f757047759c: add    $0x8,%rsp
  0x00007f75704775a0: popfq  
  0x00007f75704775a1: mov    %r13,%rsp
  0x00007f75704775a4: pop    %rax
  0x00007f75704775a5: mov    %rsp,%r13
  0x00007f75704775a8: sub    $0x10,%rsp
  0x00007f75704775ac: mov    %rax,(%rsp)
  0x00007f75704775b0: mov    %rsi,0x8(%rsp)
  0x00007f75704775b5: mov    0x40(%rbx),%rcx
  0x00007f75704775b9: jmpq   *%rcx

AHE@0x00007f75800c15f8: 0xb0000000 i2c: 0x00007f7570477660 c2i: 0x00007f7570477774 c2iUV: 0x00007f7570477747
i2c argument handler #0 for: receiver ()Ljava/lang/Class; (539 bytes generated)
c2i argument handler starts at 0x7f7570477774
  0x00007f7570477660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570477664: movabs $0x7f757036e3e0,%r11
  0x00007f757047766e: cmp    %r11,%rax
  0x00007f7570477671: jbe    0x00007f757047768a
  0x00007f7570477677: movabs $0x7f757046e3e0,%r11
  0x00007f7570477681: cmp    %r11,%rax
  0x00007f7570477684: jb     0x00007f7570477727
  0x00007f757047768a: movabs $0x7f7570369420,%r11
  0x00007f7570477694: cmp    %r11,%rax
  0x00007f7570477697: jbe    0x00007f75704776b0
  0x00007f757047769d: movabs $0x7f757036de58,%r11
  0x00007f75704776a7: cmp    %r11,%rax
  0x00007f75704776aa: jb     0x00007f7570477727
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704776b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704776b5: sub    $0x80,%rsp
  0x00007f75704776bc: mov    %rax,0x78(%rsp)
  0x00007f75704776c1: mov    %rcx,0x70(%rsp)
  0x00007f75704776c6: mov    %rdx,0x68(%rsp)
  0x00007f75704776cb: mov    %rbx,0x60(%rsp)
  0x00007f75704776d0: mov    %rbp,0x50(%rsp)
  0x00007f75704776d5: mov    %rsi,0x48(%rsp)
  0x00007f75704776da: mov    %rdi,0x40(%rsp)
  0x00007f75704776df: mov    %r8,0x38(%rsp)
  0x00007f75704776e4: mov    %r9,0x30(%rsp)
  0x00007f75704776e9: mov    %r10,0x28(%rsp)
  0x00007f75704776ee: mov    %r11,0x20(%rsp)
  0x00007f75704776f3: mov    %r12,0x18(%rsp)
  0x00007f75704776f8: mov    %r13,0x10(%rsp)
  0x00007f75704776fd: mov    %r14,0x8(%rsp)
  0x00007f7570477702: mov    %r15,(%rsp)
  0x00007f7570477706: movabs $0x7f758592f470,%rdi
  0x00007f7570477710: movabs $0x7f75704776b0,%rsi
  0x00007f757047771a: mov    %rsp,%rdx
  0x00007f757047771d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477721: callq  0x00007f75853729fa
  0x00007f7570477726: hlt    
  ;; } verify_i2ce 
  0x00007f7570477727: mov    %rsp,%r11
  0x00007f757047772a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047772e: push   %rax
  0x00007f757047772f: mov    %r11,%rax
  0x00007f7570477732: mov    0x50(%rbx),%r11
  0x00007f7570477736: mov    0x8(%rax),%rsi
  0x00007f757047773a: mov    %rbx,0x258(%r15)
  0x00007f7570477741: mov    %rbx,%rax
  0x00007f7570477744: jmpq   *%r11
  0x00007f7570477747: mov    0x8(%rsi),%ebx
  0x00007f757047774a: shl    $0x3,%rbx
  0x00007f757047774e: cmp    0x10(%rax),%rbx
  0x00007f7570477752: mov    0x8(%rax),%rbx
  0x00007f7570477756: je     0x00007f7570477761
  0x00007f757047775c: jmpq   0x00007f757046ec40
  0x00007f7570477761: cmpq   $0x0,0x58(%rbx)
  0x00007f7570477769: je     0x00007f7570477864
  0x00007f757047776f: jmpq   0x00007f757046ec40
  0x00007f7570477774: cmpq   $0x0,0x58(%rbx)
  0x00007f757047777c: je     0x00007f7570477864
  0x00007f7570477782: mov    %rsp,%r13
  0x00007f7570477785: mov    (%rsp),%rax
  0x00007f7570477789: and    $0xfffffffffffffff0,%rsp
  0x00007f757047778d: pushfq 
  0x00007f757047778e: sub    $0x8,%rsp
  0x00007f7570477792: mov    %rsp,-0x28(%rsp)
  0x00007f7570477797: sub    $0x80,%rsp
  0x00007f757047779e: mov    %rax,0x78(%rsp)
  0x00007f75704777a3: mov    %rcx,0x70(%rsp)
  0x00007f75704777a8: mov    %rdx,0x68(%rsp)
  0x00007f75704777ad: mov    %rbx,0x60(%rsp)
  0x00007f75704777b2: mov    %rbp,0x50(%rsp)
  0x00007f75704777b7: mov    %rsi,0x48(%rsp)
  0x00007f75704777bc: mov    %rdi,0x40(%rsp)
  0x00007f75704777c1: mov    %r8,0x38(%rsp)
  0x00007f75704777c6: mov    %r9,0x30(%rsp)
  0x00007f75704777cb: mov    %r10,0x28(%rsp)
  0x00007f75704777d0: mov    %r11,0x20(%rsp)
  0x00007f75704777d5: mov    %r12,0x18(%rsp)
  0x00007f75704777da: mov    %r13,0x10(%rsp)
  0x00007f75704777df: mov    %r14,0x8(%rsp)
  0x00007f75704777e4: mov    %r15,(%rsp)
  0x00007f75704777e8: sub    $0x200,%rsp
  0x00007f75704777ef: fxsave64 (%rsp)
  0x00007f75704777f4: mov    %rbx,%rdi
  0x00007f75704777f7: mov    %rax,%rsi
  0x00007f75704777fa: callq  0x00007f7585522bca
  0x00007f75704777ff: fxrstor64 (%rsp)
  0x00007f7570477804: add    $0x200,%rsp
  0x00007f757047780b: mov    (%rsp),%r15
  0x00007f757047780f: mov    0x8(%rsp),%r14
  0x00007f7570477814: mov    0x10(%rsp),%r13
  0x00007f7570477819: mov    0x18(%rsp),%r12
  0x00007f757047781e: mov    0x20(%rsp),%r11
  0x00007f7570477823: mov    0x28(%rsp),%r10
  0x00007f7570477828: mov    0x30(%rsp),%r9
  0x00007f757047782d: mov    0x38(%rsp),%r8
  0x00007f7570477832: mov    0x40(%rsp),%rdi
  0x00007f7570477837: mov    0x48(%rsp),%rsi
  0x00007f757047783c: mov    0x50(%rsp),%rbp
  0x00007f7570477841: mov    0x60(%rsp),%rbx
  0x00007f7570477846: mov    0x68(%rsp),%rdx
  0x00007f757047784b: mov    0x70(%rsp),%rcx
  0x00007f7570477850: mov    0x78(%rsp),%rax
  0x00007f7570477855: add    $0x80,%rsp
  0x00007f757047785c: add    $0x8,%rsp
  0x00007f7570477860: popfq  
  0x00007f7570477861: mov    %r13,%rsp
  0x00007f7570477864: pop    %rax
  0x00007f7570477865: mov    %rsp,%r13
  0x00007f7570477868: sub    $0x10,%rsp
  0x00007f757047786c: mov    %rax,(%rsp)
  0x00007f7570477870: mov    %rsi,0x8(%rsp)
  0x00007f7570477875: mov    0x40(%rbx),%rcx
  0x00007f7570477879: jmpq   *%rcx

AHE@0x00007f75800c1640: 0xb0000000 i2c: 0x00007f7570477920 c2i: 0x00007f7570477a34 c2iUV: 0x00007f7570477a07
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f7570477a34
  0x00007f7570477920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570477924: movabs $0x7f757036e3e0,%r11
  0x00007f757047792e: cmp    %r11,%rax
  0x00007f7570477931: jbe    0x00007f757047794a
  0x00007f7570477937: movabs $0x7f757046e3e0,%r11
  0x00007f7570477941: cmp    %r11,%rax
  0x00007f7570477944: jb     0x00007f75704779e7
  0x00007f757047794a: movabs $0x7f7570369420,%r11
  0x00007f7570477954: cmp    %r11,%rax
  0x00007f7570477957: jbe    0x00007f7570477970
  0x00007f757047795d: movabs $0x7f757036de58,%r11
  0x00007f7570477967: cmp    %r11,%rax
  0x00007f757047796a: jb     0x00007f75704779e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570477970: mov    %rsp,-0x28(%rsp)
  0x00007f7570477975: sub    $0x80,%rsp
  0x00007f757047797c: mov    %rax,0x78(%rsp)
  0x00007f7570477981: mov    %rcx,0x70(%rsp)
  0x00007f7570477986: mov    %rdx,0x68(%rsp)
  0x00007f757047798b: mov    %rbx,0x60(%rsp)
  0x00007f7570477990: mov    %rbp,0x50(%rsp)
  0x00007f7570477995: mov    %rsi,0x48(%rsp)
  0x00007f757047799a: mov    %rdi,0x40(%rsp)
  0x00007f757047799f: mov    %r8,0x38(%rsp)
  0x00007f75704779a4: mov    %r9,0x30(%rsp)
  0x00007f75704779a9: mov    %r10,0x28(%rsp)
  0x00007f75704779ae: mov    %r11,0x20(%rsp)
  0x00007f75704779b3: mov    %r12,0x18(%rsp)
  0x00007f75704779b8: mov    %r13,0x10(%rsp)
  0x00007f75704779bd: mov    %r14,0x8(%rsp)
  0x00007f75704779c2: mov    %r15,(%rsp)
  0x00007f75704779c6: movabs $0x7f758592f470,%rdi
  0x00007f75704779d0: movabs $0x7f7570477970,%rsi
  0x00007f75704779da: mov    %rsp,%rdx
  0x00007f75704779dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704779e1: callq  0x00007f75853729fa
  0x00007f75704779e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704779e7: mov    %rsp,%r11
  0x00007f75704779ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704779ee: push   %rax
  0x00007f75704779ef: mov    %r11,%rax
  0x00007f75704779f2: mov    0x50(%rbx),%r11
  0x00007f75704779f6: mov    0x8(%rax),%rsi
  0x00007f75704779fa: mov    %rbx,0x258(%r15)
  0x00007f7570477a01: mov    %rbx,%rax
  0x00007f7570477a04: jmpq   *%r11
  0x00007f7570477a07: mov    0x8(%rsi),%ebx
  0x00007f7570477a0a: shl    $0x3,%rbx
  0x00007f7570477a0e: cmp    0x10(%rax),%rbx
  0x00007f7570477a12: mov    0x8(%rax),%rbx
  0x00007f7570477a16: je     0x00007f7570477a21
  0x00007f7570477a1c: jmpq   0x00007f757046ec40
  0x00007f7570477a21: cmpq   $0x0,0x58(%rbx)
  0x00007f7570477a29: je     0x00007f7570477b24
  0x00007f7570477a2f: jmpq   0x00007f757046ec40
  0x00007f7570477a34: cmpq   $0x0,0x58(%rbx)
  0x00007f7570477a3c: je     0x00007f7570477b24
  0x00007f7570477a42: mov    %rsp,%r13
  0x00007f7570477a45: mov    (%rsp),%rax
  0x00007f7570477a49: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477a4d: pushfq 
  0x00007f7570477a4e: sub    $0x8,%rsp
  0x00007f7570477a52: mov    %rsp,-0x28(%rsp)
  0x00007f7570477a57: sub    $0x80,%rsp
  0x00007f7570477a5e: mov    %rax,0x78(%rsp)
  0x00007f7570477a63: mov    %rcx,0x70(%rsp)
  0x00007f7570477a68: mov    %rdx,0x68(%rsp)
  0x00007f7570477a6d: mov    %rbx,0x60(%rsp)
  0x00007f7570477a72: mov    %rbp,0x50(%rsp)
  0x00007f7570477a77: mov    %rsi,0x48(%rsp)
  0x00007f7570477a7c: mov    %rdi,0x40(%rsp)
  0x00007f7570477a81: mov    %r8,0x38(%rsp)
  0x00007f7570477a86: mov    %r9,0x30(%rsp)
  0x00007f7570477a8b: mov    %r10,0x28(%rsp)
  0x00007f7570477a90: mov    %r11,0x20(%rsp)
  0x00007f7570477a95: mov    %r12,0x18(%rsp)
  0x00007f7570477a9a: mov    %r13,0x10(%rsp)
  0x00007f7570477a9f: mov    %r14,0x8(%rsp)
  0x00007f7570477aa4: mov    %r15,(%rsp)
  0x00007f7570477aa8: sub    $0x200,%rsp
  0x00007f7570477aaf: fxsave64 (%rsp)
  0x00007f7570477ab4: mov    %rbx,%rdi
  0x00007f7570477ab7: mov    %rax,%rsi
  0x00007f7570477aba: callq  0x00007f7585522bca
  0x00007f7570477abf: fxrstor64 (%rsp)
  0x00007f7570477ac4: add    $0x200,%rsp
  0x00007f7570477acb: mov    (%rsp),%r15
  0x00007f7570477acf: mov    0x8(%rsp),%r14
  0x00007f7570477ad4: mov    0x10(%rsp),%r13
  0x00007f7570477ad9: mov    0x18(%rsp),%r12
  0x00007f7570477ade: mov    0x20(%rsp),%r11
  0x00007f7570477ae3: mov    0x28(%rsp),%r10
  0x00007f7570477ae8: mov    0x30(%rsp),%r9
  0x00007f7570477aed: mov    0x38(%rsp),%r8
  0x00007f7570477af2: mov    0x40(%rsp),%rdi
  0x00007f7570477af7: mov    0x48(%rsp),%rsi
  0x00007f7570477afc: mov    0x50(%rsp),%rbp
  0x00007f7570477b01: mov    0x60(%rsp),%rbx
  0x00007f7570477b06: mov    0x68(%rsp),%rdx
  0x00007f7570477b0b: mov    0x70(%rsp),%rcx
  0x00007f7570477b10: mov    0x78(%rsp),%rax
  0x00007f7570477b15: add    $0x80,%rsp
  0x00007f7570477b1c: add    $0x8,%rsp
  0x00007f7570477b20: popfq  
  0x00007f7570477b21: mov    %r13,%rsp
  0x00007f7570477b24: pop    %rax
  0x00007f7570477b25: mov    %rsp,%r13
  0x00007f7570477b28: sub    $0x10,%rsp
  0x00007f7570477b2c: mov    %rax,(%rsp)
  0x00007f7570477b30: mov    %rsi,0x8(%rsp)
  0x00007f7570477b35: mov    0x40(%rbx),%rcx
  0x00007f7570477b39: jmpq   *%rcx

AHE@0x00007f75800c1688: 0xb0000000 i2c: 0x00007f7570477be0 c2i: 0x00007f7570477cf4 c2iUV: 0x00007f7570477cc7
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f7570477cf4
  0x00007f7570477be0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570477be4: movabs $0x7f757036e3e0,%r11
  0x00007f7570477bee: cmp    %r11,%rax
  0x00007f7570477bf1: jbe    0x00007f7570477c0a
  0x00007f7570477bf7: movabs $0x7f757046e3e0,%r11
  0x00007f7570477c01: cmp    %r11,%rax
  0x00007f7570477c04: jb     0x00007f7570477ca7
  0x00007f7570477c0a: movabs $0x7f7570369420,%r11
  0x00007f7570477c14: cmp    %r11,%rax
  0x00007f7570477c17: jbe    0x00007f7570477c30
  0x00007f7570477c1d: movabs $0x7f757036de58,%r11
  0x00007f7570477c27: cmp    %r11,%rax
  0x00007f7570477c2a: jb     0x00007f7570477ca7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570477c30: mov    %rsp,-0x28(%rsp)
  0x00007f7570477c35: sub    $0x80,%rsp
  0x00007f7570477c3c: mov    %rax,0x78(%rsp)
  0x00007f7570477c41: mov    %rcx,0x70(%rsp)
  0x00007f7570477c46: mov    %rdx,0x68(%rsp)
  0x00007f7570477c4b: mov    %rbx,0x60(%rsp)
  0x00007f7570477c50: mov    %rbp,0x50(%rsp)
  0x00007f7570477c55: mov    %rsi,0x48(%rsp)
  0x00007f7570477c5a: mov    %rdi,0x40(%rsp)
  0x00007f7570477c5f: mov    %r8,0x38(%rsp)
  0x00007f7570477c64: mov    %r9,0x30(%rsp)
  0x00007f7570477c69: mov    %r10,0x28(%rsp)
  0x00007f7570477c6e: mov    %r11,0x20(%rsp)
  0x00007f7570477c73: mov    %r12,0x18(%rsp)
  0x00007f7570477c78: mov    %r13,0x10(%rsp)
  0x00007f7570477c7d: mov    %r14,0x8(%rsp)
  0x00007f7570477c82: mov    %r15,(%rsp)
  0x00007f7570477c86: movabs $0x7f758592f470,%rdi
  0x00007f7570477c90: movabs $0x7f7570477c30,%rsi
  0x00007f7570477c9a: mov    %rsp,%rdx
  0x00007f7570477c9d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477ca1: callq  0x00007f75853729fa
  0x00007f7570477ca6: hlt    
  ;; } verify_i2ce 
  0x00007f7570477ca7: mov    %rsp,%r11
  0x00007f7570477caa: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477cae: push   %rax
  0x00007f7570477caf: mov    %r11,%rax
  0x00007f7570477cb2: mov    0x50(%rbx),%r11
  0x00007f7570477cb6: mov    0x8(%rax),%rsi
  0x00007f7570477cba: mov    %rbx,0x258(%r15)
  0x00007f7570477cc1: mov    %rbx,%rax
  0x00007f7570477cc4: jmpq   *%r11
  0x00007f7570477cc7: mov    0x8(%rsi),%ebx
  0x00007f7570477cca: shl    $0x3,%rbx
  0x00007f7570477cce: cmp    0x10(%rax),%rbx
  0x00007f7570477cd2: mov    0x8(%rax),%rbx
  0x00007f7570477cd6: je     0x00007f7570477ce1
  0x00007f7570477cdc: jmpq   0x00007f757046ec40
  0x00007f7570477ce1: cmpq   $0x0,0x58(%rbx)
  0x00007f7570477ce9: je     0x00007f7570477de4
  0x00007f7570477cef: jmpq   0x00007f757046ec40
  0x00007f7570477cf4: cmpq   $0x0,0x58(%rbx)
  0x00007f7570477cfc: je     0x00007f7570477de4
  0x00007f7570477d02: mov    %rsp,%r13
  0x00007f7570477d05: mov    (%rsp),%rax
  0x00007f7570477d09: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477d0d: pushfq 
  0x00007f7570477d0e: sub    $0x8,%rsp
  0x00007f7570477d12: mov    %rsp,-0x28(%rsp)
  0x00007f7570477d17: sub    $0x80,%rsp
  0x00007f7570477d1e: mov    %rax,0x78(%rsp)
  0x00007f7570477d23: mov    %rcx,0x70(%rsp)
  0x00007f7570477d28: mov    %rdx,0x68(%rsp)
  0x00007f7570477d2d: mov    %rbx,0x60(%rsp)
  0x00007f7570477d32: mov    %rbp,0x50(%rsp)
  0x00007f7570477d37: mov    %rsi,0x48(%rsp)
  0x00007f7570477d3c: mov    %rdi,0x40(%rsp)
  0x00007f7570477d41: mov    %r8,0x38(%rsp)
  0x00007f7570477d46: mov    %r9,0x30(%rsp)
  0x00007f7570477d4b: mov    %r10,0x28(%rsp)
  0x00007f7570477d50: mov    %r11,0x20(%rsp)
  0x00007f7570477d55: mov    %r12,0x18(%rsp)
  0x00007f7570477d5a: mov    %r13,0x10(%rsp)
  0x00007f7570477d5f: mov    %r14,0x8(%rsp)
  0x00007f7570477d64: mov    %r15,(%rsp)
  0x00007f7570477d68: sub    $0x200,%rsp
  0x00007f7570477d6f: fxsave64 (%rsp)
  0x00007f7570477d74: mov    %rbx,%rdi
  0x00007f7570477d77: mov    %rax,%rsi
  0x00007f7570477d7a: callq  0x00007f7585522bca
  0x00007f7570477d7f: fxrstor64 (%rsp)
  0x00007f7570477d84: add    $0x200,%rsp
  0x00007f7570477d8b: mov    (%rsp),%r15
  0x00007f7570477d8f: mov    0x8(%rsp),%r14
  0x00007f7570477d94: mov    0x10(%rsp),%r13
  0x00007f7570477d99: mov    0x18(%rsp),%r12
  0x00007f7570477d9e: mov    0x20(%rsp),%r11
  0x00007f7570477da3: mov    0x28(%rsp),%r10
  0x00007f7570477da8: mov    0x30(%rsp),%r9
  0x00007f7570477dad: mov    0x38(%rsp),%r8
  0x00007f7570477db2: mov    0x40(%rsp),%rdi
  0x00007f7570477db7: mov    0x48(%rsp),%rsi
  0x00007f7570477dbc: mov    0x50(%rsp),%rbp
  0x00007f7570477dc1: mov    0x60(%rsp),%rbx
  0x00007f7570477dc6: mov    0x68(%rsp),%rdx
  0x00007f7570477dcb: mov    0x70(%rsp),%rcx
  0x00007f7570477dd0: mov    0x78(%rsp),%rax
  0x00007f7570477dd5: add    $0x80,%rsp
  0x00007f7570477ddc: add    $0x8,%rsp
  0x00007f7570477de0: popfq  
  0x00007f7570477de1: mov    %r13,%rsp
  0x00007f7570477de4: pop    %rax
  0x00007f7570477de5: mov    %rsp,%r13
  0x00007f7570477de8: sub    $0x10,%rsp
  0x00007f7570477dec: mov    %rax,(%rsp)
  0x00007f7570477df0: mov    %rsi,0x8(%rsp)
  0x00007f7570477df5: mov    0x40(%rbx),%rcx
  0x00007f7570477df9: jmpq   *%rcx

AHE@0x00007f75800c16d0: 0xbb000000 i2c: 0x00007f7570477ea0 c2i: 0x00007f7570477fb8 c2iUV: 0x00007f7570477f8b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)Z (548 bytes generated)
c2i argument handler starts at 0x7f7570477fb8
  0x00007f7570477ea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570477ea4: movabs $0x7f757036e3e0,%r11
  0x00007f7570477eae: cmp    %r11,%rax
  0x00007f7570477eb1: jbe    0x00007f7570477eca
  0x00007f7570477eb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570477ec1: cmp    %r11,%rax
  0x00007f7570477ec4: jb     0x00007f7570477f67
  0x00007f7570477eca: movabs $0x7f7570369420,%r11
  0x00007f7570477ed4: cmp    %r11,%rax
  0x00007f7570477ed7: jbe    0x00007f7570477ef0
  0x00007f7570477edd: movabs $0x7f757036de58,%r11
  0x00007f7570477ee7: cmp    %r11,%rax
  0x00007f7570477eea: jb     0x00007f7570477f67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570477ef0: mov    %rsp,-0x28(%rsp)
  0x00007f7570477ef5: sub    $0x80,%rsp
  0x00007f7570477efc: mov    %rax,0x78(%rsp)
  0x00007f7570477f01: mov    %rcx,0x70(%rsp)
  0x00007f7570477f06: mov    %rdx,0x68(%rsp)
  0x00007f7570477f0b: mov    %rbx,0x60(%rsp)
  0x00007f7570477f10: mov    %rbp,0x50(%rsp)
  0x00007f7570477f15: mov    %rsi,0x48(%rsp)
  0x00007f7570477f1a: mov    %rdi,0x40(%rsp)
  0x00007f7570477f1f: mov    %r8,0x38(%rsp)
  0x00007f7570477f24: mov    %r9,0x30(%rsp)
  0x00007f7570477f29: mov    %r10,0x28(%rsp)
  0x00007f7570477f2e: mov    %r11,0x20(%rsp)
  0x00007f7570477f33: mov    %r12,0x18(%rsp)
  0x00007f7570477f38: mov    %r13,0x10(%rsp)
  0x00007f7570477f3d: mov    %r14,0x8(%rsp)
  0x00007f7570477f42: mov    %r15,(%rsp)
  0x00007f7570477f46: movabs $0x7f758592f470,%rdi
  0x00007f7570477f50: movabs $0x7f7570477ef0,%rsi
  0x00007f7570477f5a: mov    %rsp,%rdx
  0x00007f7570477f5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477f61: callq  0x00007f75853729fa
  0x00007f7570477f66: hlt    
  ;; } verify_i2ce 
  0x00007f7570477f67: mov    %rsp,%r11
  0x00007f7570477f6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477f6e: push   %rax
  0x00007f7570477f6f: mov    %r11,%rax
  0x00007f7570477f72: mov    0x50(%rbx),%r11
  0x00007f7570477f76: mov    0x10(%rax),%rsi
  0x00007f7570477f7a: mov    0x8(%rax),%rdx
  0x00007f7570477f7e: mov    %rbx,0x258(%r15)
  0x00007f7570477f85: mov    %rbx,%rax
  0x00007f7570477f88: jmpq   *%r11
  0x00007f7570477f8b: mov    0x8(%rsi),%ebx
  0x00007f7570477f8e: shl    $0x3,%rbx
  0x00007f7570477f92: cmp    0x10(%rax),%rbx
  0x00007f7570477f96: mov    0x8(%rax),%rbx
  0x00007f7570477f9a: je     0x00007f7570477fa5
  0x00007f7570477fa0: jmpq   0x00007f757046ec40
  0x00007f7570477fa5: cmpq   $0x0,0x58(%rbx)
  0x00007f7570477fad: je     0x00007f75704780a8
  0x00007f7570477fb3: jmpq   0x00007f757046ec40
  0x00007f7570477fb8: cmpq   $0x0,0x58(%rbx)
  0x00007f7570477fc0: je     0x00007f75704780a8
  0x00007f7570477fc6: mov    %rsp,%r13
  0x00007f7570477fc9: mov    (%rsp),%rax
  0x00007f7570477fcd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570477fd1: pushfq 
  0x00007f7570477fd2: sub    $0x8,%rsp
  0x00007f7570477fd6: mov    %rsp,-0x28(%rsp)
  0x00007f7570477fdb: sub    $0x80,%rsp
  0x00007f7570477fe2: mov    %rax,0x78(%rsp)
  0x00007f7570477fe7: mov    %rcx,0x70(%rsp)
  0x00007f7570477fec: mov    %rdx,0x68(%rsp)
  0x00007f7570477ff1: mov    %rbx,0x60(%rsp)
  0x00007f7570477ff6: mov    %rbp,0x50(%rsp)
  0x00007f7570477ffb: mov    %rsi,0x48(%rsp)
  0x00007f7570478000: mov    %rdi,0x40(%rsp)
  0x00007f7570478005: mov    %r8,0x38(%rsp)
  0x00007f757047800a: mov    %r9,0x30(%rsp)
  0x00007f757047800f: mov    %r10,0x28(%rsp)
  0x00007f7570478014: mov    %r11,0x20(%rsp)
  0x00007f7570478019: mov    %r12,0x18(%rsp)
  0x00007f757047801e: mov    %r13,0x10(%rsp)
  0x00007f7570478023: mov    %r14,0x8(%rsp)
  0x00007f7570478028: mov    %r15,(%rsp)
  0x00007f757047802c: sub    $0x200,%rsp
  0x00007f7570478033: fxsave64 (%rsp)
  0x00007f7570478038: mov    %rbx,%rdi
  0x00007f757047803b: mov    %rax,%rsi
  0x00007f757047803e: callq  0x00007f7585522bca
  0x00007f7570478043: fxrstor64 (%rsp)
  0x00007f7570478048: add    $0x200,%rsp
  0x00007f757047804f: mov    (%rsp),%r15
  0x00007f7570478053: mov    0x8(%rsp),%r14
  0x00007f7570478058: mov    0x10(%rsp),%r13
  0x00007f757047805d: mov    0x18(%rsp),%r12
  0x00007f7570478062: mov    0x20(%rsp),%r11
  0x00007f7570478067: mov    0x28(%rsp),%r10
  0x00007f757047806c: mov    0x30(%rsp),%r9
  0x00007f7570478071: mov    0x38(%rsp),%r8
  0x00007f7570478076: mov    0x40(%rsp),%rdi
  0x00007f757047807b: mov    0x48(%rsp),%rsi
  0x00007f7570478080: mov    0x50(%rsp),%rbp
  0x00007f7570478085: mov    0x60(%rsp),%rbx
  0x00007f757047808a: mov    0x68(%rsp),%rdx
  0x00007f757047808f: mov    0x70(%rsp),%rcx
  0x00007f7570478094: mov    0x78(%rsp),%rax
  0x00007f7570478099: add    $0x80,%rsp
  0x00007f75704780a0: add    $0x8,%rsp
  0x00007f75704780a4: popfq  
  0x00007f75704780a5: mov    %r13,%rsp
  0x00007f75704780a8: pop    %rax
  0x00007f75704780a9: mov    %rsp,%r13
  0x00007f75704780ac: sub    $0x20,%rsp
  0x00007f75704780b0: mov    %rax,(%rsp)
  0x00007f75704780b4: mov    %rsi,0x10(%rsp)
  0x00007f75704780b9: mov    %rdx,0x8(%rsp)
  0x00007f75704780be: mov    0x40(%rbx),%rcx
  0x00007f75704780c2: jmpq   *%rcx

AHE@0x00007f75800c1718: 0xb0000000 i2c: 0x00007f75704781a0 c2i: 0x00007f75704782b4 c2iUV: 0x00007f7570478287
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f75704782b4
  0x00007f75704781a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704781a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704781ae: cmp    %r11,%rax
  0x00007f75704781b1: jbe    0x00007f75704781ca
  0x00007f75704781b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704781c1: cmp    %r11,%rax
  0x00007f75704781c4: jb     0x00007f7570478267
  0x00007f75704781ca: movabs $0x7f7570369420,%r11
  0x00007f75704781d4: cmp    %r11,%rax
  0x00007f75704781d7: jbe    0x00007f75704781f0
  0x00007f75704781dd: movabs $0x7f757036de58,%r11
  0x00007f75704781e7: cmp    %r11,%rax
  0x00007f75704781ea: jb     0x00007f7570478267
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704781f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704781f5: sub    $0x80,%rsp
  0x00007f75704781fc: mov    %rax,0x78(%rsp)
  0x00007f7570478201: mov    %rcx,0x70(%rsp)
  0x00007f7570478206: mov    %rdx,0x68(%rsp)
  0x00007f757047820b: mov    %rbx,0x60(%rsp)
  0x00007f7570478210: mov    %rbp,0x50(%rsp)
  0x00007f7570478215: mov    %rsi,0x48(%rsp)
  0x00007f757047821a: mov    %rdi,0x40(%rsp)
  0x00007f757047821f: mov    %r8,0x38(%rsp)
  0x00007f7570478224: mov    %r9,0x30(%rsp)
  0x00007f7570478229: mov    %r10,0x28(%rsp)
  0x00007f757047822e: mov    %r11,0x20(%rsp)
  0x00007f7570478233: mov    %r12,0x18(%rsp)
  0x00007f7570478238: mov    %r13,0x10(%rsp)
  0x00007f757047823d: mov    %r14,0x8(%rsp)
  0x00007f7570478242: mov    %r15,(%rsp)
  0x00007f7570478246: movabs $0x7f758592f470,%rdi
  0x00007f7570478250: movabs $0x7f75704781f0,%rsi
  0x00007f757047825a: mov    %rsp,%rdx
  0x00007f757047825d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478261: callq  0x00007f75853729fa
  0x00007f7570478266: hlt    
  ;; } verify_i2ce 
  0x00007f7570478267: mov    %rsp,%r11
  0x00007f757047826a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047826e: push   %rax
  0x00007f757047826f: mov    %r11,%rax
  0x00007f7570478272: mov    0x50(%rbx),%r11
  0x00007f7570478276: mov    0x8(%rax),%rsi
  0x00007f757047827a: mov    %rbx,0x258(%r15)
  0x00007f7570478281: mov    %rbx,%rax
  0x00007f7570478284: jmpq   *%r11
  0x00007f7570478287: mov    0x8(%rsi),%ebx
  0x00007f757047828a: shl    $0x3,%rbx
  0x00007f757047828e: cmp    0x10(%rax),%rbx
  0x00007f7570478292: mov    0x8(%rax),%rbx
  0x00007f7570478296: je     0x00007f75704782a1
  0x00007f757047829c: jmpq   0x00007f757046ec40
  0x00007f75704782a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704782a9: je     0x00007f75704783a4
  0x00007f75704782af: jmpq   0x00007f757046ec40
  0x00007f75704782b4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704782bc: je     0x00007f75704783a4
  0x00007f75704782c2: mov    %rsp,%r13
  0x00007f75704782c5: mov    (%rsp),%rax
  0x00007f75704782c9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704782cd: pushfq 
  0x00007f75704782ce: sub    $0x8,%rsp
  0x00007f75704782d2: mov    %rsp,-0x28(%rsp)
  0x00007f75704782d7: sub    $0x80,%rsp
  0x00007f75704782de: mov    %rax,0x78(%rsp)
  0x00007f75704782e3: mov    %rcx,0x70(%rsp)
  0x00007f75704782e8: mov    %rdx,0x68(%rsp)
  0x00007f75704782ed: mov    %rbx,0x60(%rsp)
  0x00007f75704782f2: mov    %rbp,0x50(%rsp)
  0x00007f75704782f7: mov    %rsi,0x48(%rsp)
  0x00007f75704782fc: mov    %rdi,0x40(%rsp)
  0x00007f7570478301: mov    %r8,0x38(%rsp)
  0x00007f7570478306: mov    %r9,0x30(%rsp)
  0x00007f757047830b: mov    %r10,0x28(%rsp)
  0x00007f7570478310: mov    %r11,0x20(%rsp)
  0x00007f7570478315: mov    %r12,0x18(%rsp)
  0x00007f757047831a: mov    %r13,0x10(%rsp)
  0x00007f757047831f: mov    %r14,0x8(%rsp)
  0x00007f7570478324: mov    %r15,(%rsp)
  0x00007f7570478328: sub    $0x200,%rsp
  0x00007f757047832f: fxsave64 (%rsp)
  0x00007f7570478334: mov    %rbx,%rdi
  0x00007f7570478337: mov    %rax,%rsi
  0x00007f757047833a: callq  0x00007f7585522bca
  0x00007f757047833f: fxrstor64 (%rsp)
  0x00007f7570478344: add    $0x200,%rsp
  0x00007f757047834b: mov    (%rsp),%r15
  0x00007f757047834f: mov    0x8(%rsp),%r14
  0x00007f7570478354: mov    0x10(%rsp),%r13
  0x00007f7570478359: mov    0x18(%rsp),%r12
  0x00007f757047835e: mov    0x20(%rsp),%r11
  0x00007f7570478363: mov    0x28(%rsp),%r10
  0x00007f7570478368: mov    0x30(%rsp),%r9
  0x00007f757047836d: mov    0x38(%rsp),%r8
  0x00007f7570478372: mov    0x40(%rsp),%rdi
  0x00007f7570478377: mov    0x48(%rsp),%rsi
  0x00007f757047837c: mov    0x50(%rsp),%rbp
  0x00007f7570478381: mov    0x60(%rsp),%rbx
  0x00007f7570478386: mov    0x68(%rsp),%rdx
  0x00007f757047838b: mov    0x70(%rsp),%rcx
  0x00007f7570478390: mov    0x78(%rsp),%rax
  0x00007f7570478395: add    $0x80,%rsp
  0x00007f757047839c: add    $0x8,%rsp
  0x00007f75704783a0: popfq  
  0x00007f75704783a1: mov    %r13,%rsp
  0x00007f75704783a4: pop    %rax
  0x00007f75704783a5: mov    %rsp,%r13
  0x00007f75704783a8: sub    $0x10,%rsp
  0x00007f75704783ac: mov    %rax,(%rsp)
  0x00007f75704783b0: mov    %rsi,0x8(%rsp)
  0x00007f75704783b5: mov    0x40(%rbx),%rcx
  0x00007f75704783b9: jmpq   *%rcx

AHE@0x00007f75800c1760: 0xbbe00000 i2c: 0x00007f7570478460 c2i: 0x00007f7570478578 c2iUV: 0x00007f757047854b
i2c argument handler #0 for: receiver (J)V (563 bytes generated)
c2i argument handler starts at 0x7f7570478578
  0x00007f7570478460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570478464: movabs $0x7f757036e3e0,%r11
  0x00007f757047846e: cmp    %r11,%rax
  0x00007f7570478471: jbe    0x00007f757047848a
  0x00007f7570478477: movabs $0x7f757046e3e0,%r11
  0x00007f7570478481: cmp    %r11,%rax
  0x00007f7570478484: jb     0x00007f7570478527
  0x00007f757047848a: movabs $0x7f7570369420,%r11
  0x00007f7570478494: cmp    %r11,%rax
  0x00007f7570478497: jbe    0x00007f75704784b0
  0x00007f757047849d: movabs $0x7f757036de58,%r11
  0x00007f75704784a7: cmp    %r11,%rax
  0x00007f75704784aa: jb     0x00007f7570478527
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704784b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704784b5: sub    $0x80,%rsp
  0x00007f75704784bc: mov    %rax,0x78(%rsp)
  0x00007f75704784c1: mov    %rcx,0x70(%rsp)
  0x00007f75704784c6: mov    %rdx,0x68(%rsp)
  0x00007f75704784cb: mov    %rbx,0x60(%rsp)
  0x00007f75704784d0: mov    %rbp,0x50(%rsp)
  0x00007f75704784d5: mov    %rsi,0x48(%rsp)
  0x00007f75704784da: mov    %rdi,0x40(%rsp)
  0x00007f75704784df: mov    %r8,0x38(%rsp)
  0x00007f75704784e4: mov    %r9,0x30(%rsp)
  0x00007f75704784e9: mov    %r10,0x28(%rsp)
  0x00007f75704784ee: mov    %r11,0x20(%rsp)
  0x00007f75704784f3: mov    %r12,0x18(%rsp)
  0x00007f75704784f8: mov    %r13,0x10(%rsp)
  0x00007f75704784fd: mov    %r14,0x8(%rsp)
  0x00007f7570478502: mov    %r15,(%rsp)
  0x00007f7570478506: movabs $0x7f758592f470,%rdi
  0x00007f7570478510: movabs $0x7f75704784b0,%rsi
  0x00007f757047851a: mov    %rsp,%rdx
  0x00007f757047851d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478521: callq  0x00007f75853729fa
  0x00007f7570478526: hlt    
  ;; } verify_i2ce 
  0x00007f7570478527: mov    %rsp,%r11
  0x00007f757047852a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047852e: push   %rax
  0x00007f757047852f: mov    %r11,%rax
  0x00007f7570478532: mov    0x50(%rbx),%r11
  0x00007f7570478536: mov    0x18(%rax),%rsi
  0x00007f757047853a: mov    0x8(%rax),%rdx
  0x00007f757047853e: mov    %rbx,0x258(%r15)
  0x00007f7570478545: mov    %rbx,%rax
  0x00007f7570478548: jmpq   *%r11
  0x00007f757047854b: mov    0x8(%rsi),%ebx
  0x00007f757047854e: shl    $0x3,%rbx
  0x00007f7570478552: cmp    0x10(%rax),%rbx
  0x00007f7570478556: mov    0x8(%rax),%rbx
  0x00007f757047855a: je     0x00007f7570478565
  0x00007f7570478560: jmpq   0x00007f757046ec40
  0x00007f7570478565: cmpq   $0x0,0x58(%rbx)
  0x00007f757047856d: je     0x00007f7570478668
  0x00007f7570478573: jmpq   0x00007f757046ec40
  0x00007f7570478578: cmpq   $0x0,0x58(%rbx)
  0x00007f7570478580: je     0x00007f7570478668
  0x00007f7570478586: mov    %rsp,%r13
  0x00007f7570478589: mov    (%rsp),%rax
  0x00007f757047858d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478591: pushfq 
  0x00007f7570478592: sub    $0x8,%rsp
  0x00007f7570478596: mov    %rsp,-0x28(%rsp)
  0x00007f757047859b: sub    $0x80,%rsp
  0x00007f75704785a2: mov    %rax,0x78(%rsp)
  0x00007f75704785a7: mov    %rcx,0x70(%rsp)
  0x00007f75704785ac: mov    %rdx,0x68(%rsp)
  0x00007f75704785b1: mov    %rbx,0x60(%rsp)
  0x00007f75704785b6: mov    %rbp,0x50(%rsp)
  0x00007f75704785bb: mov    %rsi,0x48(%rsp)
  0x00007f75704785c0: mov    %rdi,0x40(%rsp)
  0x00007f75704785c5: mov    %r8,0x38(%rsp)
  0x00007f75704785ca: mov    %r9,0x30(%rsp)
  0x00007f75704785cf: mov    %r10,0x28(%rsp)
  0x00007f75704785d4: mov    %r11,0x20(%rsp)
  0x00007f75704785d9: mov    %r12,0x18(%rsp)
  0x00007f75704785de: mov    %r13,0x10(%rsp)
  0x00007f75704785e3: mov    %r14,0x8(%rsp)
  0x00007f75704785e8: mov    %r15,(%rsp)
  0x00007f75704785ec: sub    $0x200,%rsp
  0x00007f75704785f3: fxsave64 (%rsp)
  0x00007f75704785f8: mov    %rbx,%rdi
  0x00007f75704785fb: mov    %rax,%rsi
  0x00007f75704785fe: callq  0x00007f7585522bca
  0x00007f7570478603: fxrstor64 (%rsp)
  0x00007f7570478608: add    $0x200,%rsp
  0x00007f757047860f: mov    (%rsp),%r15
  0x00007f7570478613: mov    0x8(%rsp),%r14
  0x00007f7570478618: mov    0x10(%rsp),%r13
  0x00007f757047861d: mov    0x18(%rsp),%r12
  0x00007f7570478622: mov    0x20(%rsp),%r11
  0x00007f7570478627: mov    0x28(%rsp),%r10
  0x00007f757047862c: mov    0x30(%rsp),%r9
  0x00007f7570478631: mov    0x38(%rsp),%r8
  0x00007f7570478636: mov    0x40(%rsp),%rdi
  0x00007f757047863b: mov    0x48(%rsp),%rsi
  0x00007f7570478640: mov    0x50(%rsp),%rbp
  0x00007f7570478645: mov    0x60(%rsp),%rbx
  0x00007f757047864a: mov    0x68(%rsp),%rdx
  0x00007f757047864f: mov    0x70(%rsp),%rcx
  0x00007f7570478654: mov    0x78(%rsp),%rax
  0x00007f7570478659: add    $0x80,%rsp
  0x00007f7570478660: add    $0x8,%rsp
  0x00007f7570478664: popfq  
  0x00007f7570478665: mov    %r13,%rsp
  0x00007f7570478668: pop    %rax
  0x00007f7570478669: mov    %rsp,%r13
  0x00007f757047866c: sub    $0x20,%rsp
  0x00007f7570478670: mov    %rax,(%rsp)
  0x00007f7570478674: mov    %rsi,0x18(%rsp)
  0x00007f7570478679: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570478683: mov    %rax,0x10(%rsp)
  0x00007f7570478688: mov    %rdx,0x8(%rsp)
  0x00007f757047868d: mov    0x40(%rbx),%rcx
  0x00007f7570478691: jmpq   *%rcx

AHE@0x00007f75800c17a8: 0xbbea0000 i2c: 0x00007f7570478760 c2i: 0x00007f757047887b c2iUV: 0x00007f757047884e
i2c argument handler #0 for: receiver (JI)V (570 bytes generated)
c2i argument handler starts at 0x7f757047887b
  0x00007f7570478760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570478764: movabs $0x7f757036e3e0,%r11
  0x00007f757047876e: cmp    %r11,%rax
  0x00007f7570478771: jbe    0x00007f757047878a
  0x00007f7570478777: movabs $0x7f757046e3e0,%r11
  0x00007f7570478781: cmp    %r11,%rax
  0x00007f7570478784: jb     0x00007f7570478827
  0x00007f757047878a: movabs $0x7f7570369420,%r11
  0x00007f7570478794: cmp    %r11,%rax
  0x00007f7570478797: jbe    0x00007f75704787b0
  0x00007f757047879d: movabs $0x7f757036de58,%r11
  0x00007f75704787a7: cmp    %r11,%rax
  0x00007f75704787aa: jb     0x00007f7570478827
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704787b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704787b5: sub    $0x80,%rsp
  0x00007f75704787bc: mov    %rax,0x78(%rsp)
  0x00007f75704787c1: mov    %rcx,0x70(%rsp)
  0x00007f75704787c6: mov    %rdx,0x68(%rsp)
  0x00007f75704787cb: mov    %rbx,0x60(%rsp)
  0x00007f75704787d0: mov    %rbp,0x50(%rsp)
  0x00007f75704787d5: mov    %rsi,0x48(%rsp)
  0x00007f75704787da: mov    %rdi,0x40(%rsp)
  0x00007f75704787df: mov    %r8,0x38(%rsp)
  0x00007f75704787e4: mov    %r9,0x30(%rsp)
  0x00007f75704787e9: mov    %r10,0x28(%rsp)
  0x00007f75704787ee: mov    %r11,0x20(%rsp)
  0x00007f75704787f3: mov    %r12,0x18(%rsp)
  0x00007f75704787f8: mov    %r13,0x10(%rsp)
  0x00007f75704787fd: mov    %r14,0x8(%rsp)
  0x00007f7570478802: mov    %r15,(%rsp)
  0x00007f7570478806: movabs $0x7f758592f470,%rdi
  0x00007f7570478810: movabs $0x7f75704787b0,%rsi
  0x00007f757047881a: mov    %rsp,%rdx
  0x00007f757047881d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478821: callq  0x00007f75853729fa
  0x00007f7570478826: hlt    
  ;; } verify_i2ce 
  0x00007f7570478827: mov    %rsp,%r11
  0x00007f757047882a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047882e: push   %rax
  0x00007f757047882f: mov    %r11,%rax
  0x00007f7570478832: mov    0x50(%rbx),%r11
  0x00007f7570478836: mov    0x20(%rax),%rsi
  0x00007f757047883a: mov    0x10(%rax),%rdx
  0x00007f757047883e: mov    0x8(%rax),%ecx
  0x00007f7570478841: mov    %rbx,0x258(%r15)
  0x00007f7570478848: mov    %rbx,%rax
  0x00007f757047884b: jmpq   *%r11
  0x00007f757047884e: mov    0x8(%rsi),%ebx
  0x00007f7570478851: shl    $0x3,%rbx
  0x00007f7570478855: cmp    0x10(%rax),%rbx
  0x00007f7570478859: mov    0x8(%rax),%rbx
  0x00007f757047885d: je     0x00007f7570478868
  0x00007f7570478863: jmpq   0x00007f757046ec40
  0x00007f7570478868: cmpq   $0x0,0x58(%rbx)
  0x00007f7570478870: je     0x00007f757047896b
  0x00007f7570478876: jmpq   0x00007f757046ec40
  0x00007f757047887b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570478883: je     0x00007f757047896b
  0x00007f7570478889: mov    %rsp,%r13
  0x00007f757047888c: mov    (%rsp),%rax
  0x00007f7570478890: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478894: pushfq 
  0x00007f7570478895: sub    $0x8,%rsp
  0x00007f7570478899: mov    %rsp,-0x28(%rsp)
  0x00007f757047889e: sub    $0x80,%rsp
  0x00007f75704788a5: mov    %rax,0x78(%rsp)
  0x00007f75704788aa: mov    %rcx,0x70(%rsp)
  0x00007f75704788af: mov    %rdx,0x68(%rsp)
  0x00007f75704788b4: mov    %rbx,0x60(%rsp)
  0x00007f75704788b9: mov    %rbp,0x50(%rsp)
  0x00007f75704788be: mov    %rsi,0x48(%rsp)
  0x00007f75704788c3: mov    %rdi,0x40(%rsp)
  0x00007f75704788c8: mov    %r8,0x38(%rsp)
  0x00007f75704788cd: mov    %r9,0x30(%rsp)
  0x00007f75704788d2: mov    %r10,0x28(%rsp)
  0x00007f75704788d7: mov    %r11,0x20(%rsp)
  0x00007f75704788dc: mov    %r12,0x18(%rsp)
  0x00007f75704788e1: mov    %r13,0x10(%rsp)
  0x00007f75704788e6: mov    %r14,0x8(%rsp)
  0x00007f75704788eb: mov    %r15,(%rsp)
  0x00007f75704788ef: sub    $0x200,%rsp
  0x00007f75704788f6: fxsave64 (%rsp)
  0x00007f75704788fb: mov    %rbx,%rdi
  0x00007f75704788fe: mov    %rax,%rsi
  0x00007f7570478901: callq  0x00007f7585522bca
  0x00007f7570478906: fxrstor64 (%rsp)
  0x00007f757047890b: add    $0x200,%rsp
  0x00007f7570478912: mov    (%rsp),%r15
  0x00007f7570478916: mov    0x8(%rsp),%r14
  0x00007f757047891b: mov    0x10(%rsp),%r13
  0x00007f7570478920: mov    0x18(%rsp),%r12
  0x00007f7570478925: mov    0x20(%rsp),%r11
  0x00007f757047892a: mov    0x28(%rsp),%r10
  0x00007f757047892f: mov    0x30(%rsp),%r9
  0x00007f7570478934: mov    0x38(%rsp),%r8
  0x00007f7570478939: mov    0x40(%rsp),%rdi
  0x00007f757047893e: mov    0x48(%rsp),%rsi
  0x00007f7570478943: mov    0x50(%rsp),%rbp
  0x00007f7570478948: mov    0x60(%rsp),%rbx
  0x00007f757047894d: mov    0x68(%rsp),%rdx
  0x00007f7570478952: mov    0x70(%rsp),%rcx
  0x00007f7570478957: mov    0x78(%rsp),%rax
  0x00007f757047895c: add    $0x80,%rsp
  0x00007f7570478963: add    $0x8,%rsp
  0x00007f7570478967: popfq  
  0x00007f7570478968: mov    %r13,%rsp
  0x00007f757047896b: pop    %rax
  0x00007f757047896c: mov    %rsp,%r13
  0x00007f757047896f: sub    $0x30,%rsp
  0x00007f7570478973: mov    %rax,(%rsp)
  0x00007f7570478977: mov    %rsi,0x20(%rsp)
  0x00007f757047897c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570478986: mov    %rax,0x18(%rsp)
  0x00007f757047898b: mov    %rdx,0x10(%rsp)
  0x00007f7570478990: mov    %ecx,0x8(%rsp)
  0x00007f7570478994: mov    0x40(%rbx),%rcx
  0x00007f7570478998: jmpq   *%rcx

AHE@0x00007f75800c17f0: 0xb0000000 i2c: 0x00007f7570478a60 c2i: 0x00007f7570478b74 c2iUV: 0x00007f7570478b47
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f7570478b74
  0x00007f7570478a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570478a64: movabs $0x7f757036e3e0,%r11
  0x00007f7570478a6e: cmp    %r11,%rax
  0x00007f7570478a71: jbe    0x00007f7570478a8a
  0x00007f7570478a77: movabs $0x7f757046e3e0,%r11
  0x00007f7570478a81: cmp    %r11,%rax
  0x00007f7570478a84: jb     0x00007f7570478b27
  0x00007f7570478a8a: movabs $0x7f7570369420,%r11
  0x00007f7570478a94: cmp    %r11,%rax
  0x00007f7570478a97: jbe    0x00007f7570478ab0
  0x00007f7570478a9d: movabs $0x7f757036de58,%r11
  0x00007f7570478aa7: cmp    %r11,%rax
  0x00007f7570478aaa: jb     0x00007f7570478b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570478ab0: mov    %rsp,-0x28(%rsp)
  0x00007f7570478ab5: sub    $0x80,%rsp
  0x00007f7570478abc: mov    %rax,0x78(%rsp)
  0x00007f7570478ac1: mov    %rcx,0x70(%rsp)
  0x00007f7570478ac6: mov    %rdx,0x68(%rsp)
  0x00007f7570478acb: mov    %rbx,0x60(%rsp)
  0x00007f7570478ad0: mov    %rbp,0x50(%rsp)
  0x00007f7570478ad5: mov    %rsi,0x48(%rsp)
  0x00007f7570478ada: mov    %rdi,0x40(%rsp)
  0x00007f7570478adf: mov    %r8,0x38(%rsp)
  0x00007f7570478ae4: mov    %r9,0x30(%rsp)
  0x00007f7570478ae9: mov    %r10,0x28(%rsp)
  0x00007f7570478aee: mov    %r11,0x20(%rsp)
  0x00007f7570478af3: mov    %r12,0x18(%rsp)
  0x00007f7570478af8: mov    %r13,0x10(%rsp)
  0x00007f7570478afd: mov    %r14,0x8(%rsp)
  0x00007f7570478b02: mov    %r15,(%rsp)
  0x00007f7570478b06: movabs $0x7f758592f470,%rdi
  0x00007f7570478b10: movabs $0x7f7570478ab0,%rsi
  0x00007f7570478b1a: mov    %rsp,%rdx
  0x00007f7570478b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478b21: callq  0x00007f75853729fa
  0x00007f7570478b26: hlt    
  ;; } verify_i2ce 
  0x00007f7570478b27: mov    %rsp,%r11
  0x00007f7570478b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478b2e: push   %rax
  0x00007f7570478b2f: mov    %r11,%rax
  0x00007f7570478b32: mov    0x50(%rbx),%r11
  0x00007f7570478b36: mov    0x8(%rax),%rsi
  0x00007f7570478b3a: mov    %rbx,0x258(%r15)
  0x00007f7570478b41: mov    %rbx,%rax
  0x00007f7570478b44: jmpq   *%r11
  0x00007f7570478b47: mov    0x8(%rsi),%ebx
  0x00007f7570478b4a: shl    $0x3,%rbx
  0x00007f7570478b4e: cmp    0x10(%rax),%rbx
  0x00007f7570478b52: mov    0x8(%rax),%rbx
  0x00007f7570478b56: je     0x00007f7570478b61
  0x00007f7570478b5c: jmpq   0x00007f757046ec40
  0x00007f7570478b61: cmpq   $0x0,0x58(%rbx)
  0x00007f7570478b69: je     0x00007f7570478c64
  0x00007f7570478b6f: jmpq   0x00007f757046ec40
  0x00007f7570478b74: cmpq   $0x0,0x58(%rbx)
  0x00007f7570478b7c: je     0x00007f7570478c64
  0x00007f7570478b82: mov    %rsp,%r13
  0x00007f7570478b85: mov    (%rsp),%rax
  0x00007f7570478b89: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478b8d: pushfq 
  0x00007f7570478b8e: sub    $0x8,%rsp
  0x00007f7570478b92: mov    %rsp,-0x28(%rsp)
  0x00007f7570478b97: sub    $0x80,%rsp
  0x00007f7570478b9e: mov    %rax,0x78(%rsp)
  0x00007f7570478ba3: mov    %rcx,0x70(%rsp)
  0x00007f7570478ba8: mov    %rdx,0x68(%rsp)
  0x00007f7570478bad: mov    %rbx,0x60(%rsp)
  0x00007f7570478bb2: mov    %rbp,0x50(%rsp)
  0x00007f7570478bb7: mov    %rsi,0x48(%rsp)
  0x00007f7570478bbc: mov    %rdi,0x40(%rsp)
  0x00007f7570478bc1: mov    %r8,0x38(%rsp)
  0x00007f7570478bc6: mov    %r9,0x30(%rsp)
  0x00007f7570478bcb: mov    %r10,0x28(%rsp)
  0x00007f7570478bd0: mov    %r11,0x20(%rsp)
  0x00007f7570478bd5: mov    %r12,0x18(%rsp)
  0x00007f7570478bda: mov    %r13,0x10(%rsp)
  0x00007f7570478bdf: mov    %r14,0x8(%rsp)
  0x00007f7570478be4: mov    %r15,(%rsp)
  0x00007f7570478be8: sub    $0x200,%rsp
  0x00007f7570478bef: fxsave64 (%rsp)
  0x00007f7570478bf4: mov    %rbx,%rdi
  0x00007f7570478bf7: mov    %rax,%rsi
  0x00007f7570478bfa: callq  0x00007f7585522bca
  0x00007f7570478bff: fxrstor64 (%rsp)
  0x00007f7570478c04: add    $0x200,%rsp
  0x00007f7570478c0b: mov    (%rsp),%r15
  0x00007f7570478c0f: mov    0x8(%rsp),%r14
  0x00007f7570478c14: mov    0x10(%rsp),%r13
  0x00007f7570478c19: mov    0x18(%rsp),%r12
  0x00007f7570478c1e: mov    0x20(%rsp),%r11
  0x00007f7570478c23: mov    0x28(%rsp),%r10
  0x00007f7570478c28: mov    0x30(%rsp),%r9
  0x00007f7570478c2d: mov    0x38(%rsp),%r8
  0x00007f7570478c32: mov    0x40(%rsp),%rdi
  0x00007f7570478c37: mov    0x48(%rsp),%rsi
  0x00007f7570478c3c: mov    0x50(%rsp),%rbp
  0x00007f7570478c41: mov    0x60(%rsp),%rbx
  0x00007f7570478c46: mov    0x68(%rsp),%rdx
  0x00007f7570478c4b: mov    0x70(%rsp),%rcx
  0x00007f7570478c50: mov    0x78(%rsp),%rax
  0x00007f7570478c55: add    $0x80,%rsp
  0x00007f7570478c5c: add    $0x8,%rsp
  0x00007f7570478c60: popfq  
  0x00007f7570478c61: mov    %r13,%rsp
  0x00007f7570478c64: pop    %rax
  0x00007f7570478c65: mov    %rsp,%r13
  0x00007f7570478c68: sub    $0x10,%rsp
  0x00007f7570478c6c: mov    %rax,(%rsp)
  0x00007f7570478c70: mov    %rsi,0x8(%rsp)
  0x00007f7570478c75: mov    0x40(%rbx),%rcx
  0x00007f7570478c79: jmpq   *%rcx

AHE@0x00007f75800c1838: 0x i2c: 0x00007f7570478d20 c2i: 0x00007f7570478e30 c2iUV: 0x00007f7570478e03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570478e30
  0x00007f7570478d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570478d24: movabs $0x7f757036e3e0,%r11
  0x00007f7570478d2e: cmp    %r11,%rax
  0x00007f7570478d31: jbe    0x00007f7570478d4a
  0x00007f7570478d37: movabs $0x7f757046e3e0,%r11
  0x00007f7570478d41: cmp    %r11,%rax
  0x00007f7570478d44: jb     0x00007f7570478de7
  0x00007f7570478d4a: movabs $0x7f7570369420,%r11
  0x00007f7570478d54: cmp    %r11,%rax
  0x00007f7570478d57: jbe    0x00007f7570478d70
  0x00007f7570478d5d: movabs $0x7f757036de58,%r11
  0x00007f7570478d67: cmp    %r11,%rax
  0x00007f7570478d6a: jb     0x00007f7570478de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570478d70: mov    %rsp,-0x28(%rsp)
  0x00007f7570478d75: sub    $0x80,%rsp
  0x00007f7570478d7c: mov    %rax,0x78(%rsp)
  0x00007f7570478d81: mov    %rcx,0x70(%rsp)
  0x00007f7570478d86: mov    %rdx,0x68(%rsp)
  0x00007f7570478d8b: mov    %rbx,0x60(%rsp)
  0x00007f7570478d90: mov    %rbp,0x50(%rsp)
  0x00007f7570478d95: mov    %rsi,0x48(%rsp)
  0x00007f7570478d9a: mov    %rdi,0x40(%rsp)
  0x00007f7570478d9f: mov    %r8,0x38(%rsp)
  0x00007f7570478da4: mov    %r9,0x30(%rsp)
  0x00007f7570478da9: mov    %r10,0x28(%rsp)
  0x00007f7570478dae: mov    %r11,0x20(%rsp)
  0x00007f7570478db3: mov    %r12,0x18(%rsp)
  0x00007f7570478db8: mov    %r13,0x10(%rsp)
  0x00007f7570478dbd: mov    %r14,0x8(%rsp)
  0x00007f7570478dc2: mov    %r15,(%rsp)
  0x00007f7570478dc6: movabs $0x7f758592f470,%rdi
  0x00007f7570478dd0: movabs $0x7f7570478d70,%rsi
  0x00007f7570478dda: mov    %rsp,%rdx
  0x00007f7570478ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478de1: callq  0x00007f75853729fa
  0x00007f7570478de6: hlt    
  ;; } verify_i2ce 
  0x00007f7570478de7: mov    %rsp,%r11
  0x00007f7570478dea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478dee: push   %rax
  0x00007f7570478def: mov    %r11,%rax
  0x00007f7570478df2: mov    0x50(%rbx),%r11
  0x00007f7570478df6: mov    %rbx,0x258(%r15)
  0x00007f7570478dfd: mov    %rbx,%rax
  0x00007f7570478e00: jmpq   *%r11
  0x00007f7570478e03: mov    0x8(%rsi),%ebx
  0x00007f7570478e06: shl    $0x3,%rbx
  0x00007f7570478e0a: cmp    0x10(%rax),%rbx
  0x00007f7570478e0e: mov    0x8(%rax),%rbx
  0x00007f7570478e12: je     0x00007f7570478e1d
  0x00007f7570478e18: jmpq   0x00007f757046ec40
  0x00007f7570478e1d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570478e25: je     0x00007f7570478f20
  0x00007f7570478e2b: jmpq   0x00007f757046ec40
  0x00007f7570478e30: cmpq   $0x0,0x58(%rbx)
  0x00007f7570478e38: je     0x00007f7570478f20
  0x00007f7570478e3e: mov    %rsp,%r13
  0x00007f7570478e41: mov    (%rsp),%rax
  0x00007f7570478e45: and    $0xfffffffffffffff0,%rsp
  0x00007f7570478e49: pushfq 
  0x00007f7570478e4a: sub    $0x8,%rsp
  0x00007f7570478e4e: mov    %rsp,-0x28(%rsp)
  0x00007f7570478e53: sub    $0x80,%rsp
  0x00007f7570478e5a: mov    %rax,0x78(%rsp)
  0x00007f7570478e5f: mov    %rcx,0x70(%rsp)
  0x00007f7570478e64: mov    %rdx,0x68(%rsp)
  0x00007f7570478e69: mov    %rbx,0x60(%rsp)
  0x00007f7570478e6e: mov    %rbp,0x50(%rsp)
  0x00007f7570478e73: mov    %rsi,0x48(%rsp)
  0x00007f7570478e78: mov    %rdi,0x40(%rsp)
  0x00007f7570478e7d: mov    %r8,0x38(%rsp)
  0x00007f7570478e82: mov    %r9,0x30(%rsp)
  0x00007f7570478e87: mov    %r10,0x28(%rsp)
  0x00007f7570478e8c: mov    %r11,0x20(%rsp)
  0x00007f7570478e91: mov    %r12,0x18(%rsp)
  0x00007f7570478e96: mov    %r13,0x10(%rsp)
  0x00007f7570478e9b: mov    %r14,0x8(%rsp)
  0x00007f7570478ea0: mov    %r15,(%rsp)
  0x00007f7570478ea4: sub    $0x200,%rsp
  0x00007f7570478eab: fxsave64 (%rsp)
  0x00007f7570478eb0: mov    %rbx,%rdi
  0x00007f7570478eb3: mov    %rax,%rsi
  0x00007f7570478eb6: callq  0x00007f7585522bca
  0x00007f7570478ebb: fxrstor64 (%rsp)
  0x00007f7570478ec0: add    $0x200,%rsp
  0x00007f7570478ec7: mov    (%rsp),%r15
  0x00007f7570478ecb: mov    0x8(%rsp),%r14
  0x00007f7570478ed0: mov    0x10(%rsp),%r13
  0x00007f7570478ed5: mov    0x18(%rsp),%r12
  0x00007f7570478eda: mov    0x20(%rsp),%r11
  0x00007f7570478edf: mov    0x28(%rsp),%r10
  0x00007f7570478ee4: mov    0x30(%rsp),%r9
  0x00007f7570478ee9: mov    0x38(%rsp),%r8
  0x00007f7570478eee: mov    0x40(%rsp),%rdi
  0x00007f7570478ef3: mov    0x48(%rsp),%rsi
  0x00007f7570478ef8: mov    0x50(%rsp),%rbp
  0x00007f7570478efd: mov    0x60(%rsp),%rbx
  0x00007f7570478f02: mov    0x68(%rsp),%rdx
  0x00007f7570478f07: mov    0x70(%rsp),%rcx
  0x00007f7570478f0c: mov    0x78(%rsp),%rax
  0x00007f7570478f11: add    $0x80,%rsp
  0x00007f7570478f18: add    $0x8,%rsp
  0x00007f7570478f1c: popfq  
  0x00007f7570478f1d: mov    %r13,%rsp
  0x00007f7570478f20: pop    %rax
  0x00007f7570478f21: mov    %rsp,%r13
  0x00007f7570478f24: sub    $0x10,%rsp
  0x00007f7570478f28: mov    %rax,(%rsp)
  0x00007f7570478f2c: mov    0x40(%rbx),%rcx
  0x00007f7570478f30: jmpq   *%rcx

AHE@0x00007f75800c1880: 0xb0000000 i2c: 0x00007f7570478fe0 c2i: 0x00007f75704790f4 c2iUV: 0x00007f75704790c7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f75704790f4
  0x00007f7570478fe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570478fe4: movabs $0x7f757036e3e0,%r11
  0x00007f7570478fee: cmp    %r11,%rax
  0x00007f7570478ff1: jbe    0x00007f757047900a
  0x00007f7570478ff7: movabs $0x7f757046e3e0,%r11
  0x00007f7570479001: cmp    %r11,%rax
  0x00007f7570479004: jb     0x00007f75704790a7
  0x00007f757047900a: movabs $0x7f7570369420,%r11
  0x00007f7570479014: cmp    %r11,%rax
  0x00007f7570479017: jbe    0x00007f7570479030
  0x00007f757047901d: movabs $0x7f757036de58,%r11
  0x00007f7570479027: cmp    %r11,%rax
  0x00007f757047902a: jb     0x00007f75704790a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570479030: mov    %rsp,-0x28(%rsp)
  0x00007f7570479035: sub    $0x80,%rsp
  0x00007f757047903c: mov    %rax,0x78(%rsp)
  0x00007f7570479041: mov    %rcx,0x70(%rsp)
  0x00007f7570479046: mov    %rdx,0x68(%rsp)
  0x00007f757047904b: mov    %rbx,0x60(%rsp)
  0x00007f7570479050: mov    %rbp,0x50(%rsp)
  0x00007f7570479055: mov    %rsi,0x48(%rsp)
  0x00007f757047905a: mov    %rdi,0x40(%rsp)
  0x00007f757047905f: mov    %r8,0x38(%rsp)
  0x00007f7570479064: mov    %r9,0x30(%rsp)
  0x00007f7570479069: mov    %r10,0x28(%rsp)
  0x00007f757047906e: mov    %r11,0x20(%rsp)
  0x00007f7570479073: mov    %r12,0x18(%rsp)
  0x00007f7570479078: mov    %r13,0x10(%rsp)
  0x00007f757047907d: mov    %r14,0x8(%rsp)
  0x00007f7570479082: mov    %r15,(%rsp)
  0x00007f7570479086: movabs $0x7f758592f470,%rdi
  0x00007f7570479090: movabs $0x7f7570479030,%rsi
  0x00007f757047909a: mov    %rsp,%rdx
  0x00007f757047909d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704790a1: callq  0x00007f75853729fa
  0x00007f75704790a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704790a7: mov    %rsp,%r11
  0x00007f75704790aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704790ae: push   %rax
  0x00007f75704790af: mov    %r11,%rax
  0x00007f75704790b2: mov    0x50(%rbx),%r11
  0x00007f75704790b6: mov    0x8(%rax),%rsi
  0x00007f75704790ba: mov    %rbx,0x258(%r15)
  0x00007f75704790c1: mov    %rbx,%rax
  0x00007f75704790c4: jmpq   *%r11
  0x00007f75704790c7: mov    0x8(%rsi),%ebx
  0x00007f75704790ca: shl    $0x3,%rbx
  0x00007f75704790ce: cmp    0x10(%rax),%rbx
  0x00007f75704790d2: mov    0x8(%rax),%rbx
  0x00007f75704790d6: je     0x00007f75704790e1
  0x00007f75704790dc: jmpq   0x00007f757046ec40
  0x00007f75704790e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704790e9: je     0x00007f75704791e4
  0x00007f75704790ef: jmpq   0x00007f757046ec40
  0x00007f75704790f4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704790fc: je     0x00007f75704791e4
  0x00007f7570479102: mov    %rsp,%r13
  0x00007f7570479105: mov    (%rsp),%rax
  0x00007f7570479109: and    $0xfffffffffffffff0,%rsp
  0x00007f757047910d: pushfq 
  0x00007f757047910e: sub    $0x8,%rsp
  0x00007f7570479112: mov    %rsp,-0x28(%rsp)
  0x00007f7570479117: sub    $0x80,%rsp
  0x00007f757047911e: mov    %rax,0x78(%rsp)
  0x00007f7570479123: mov    %rcx,0x70(%rsp)
  0x00007f7570479128: mov    %rdx,0x68(%rsp)
  0x00007f757047912d: mov    %rbx,0x60(%rsp)
  0x00007f7570479132: mov    %rbp,0x50(%rsp)
  0x00007f7570479137: mov    %rsi,0x48(%rsp)
  0x00007f757047913c: mov    %rdi,0x40(%rsp)
  0x00007f7570479141: mov    %r8,0x38(%rsp)
  0x00007f7570479146: mov    %r9,0x30(%rsp)
  0x00007f757047914b: mov    %r10,0x28(%rsp)
  0x00007f7570479150: mov    %r11,0x20(%rsp)
  0x00007f7570479155: mov    %r12,0x18(%rsp)
  0x00007f757047915a: mov    %r13,0x10(%rsp)
  0x00007f757047915f: mov    %r14,0x8(%rsp)
  0x00007f7570479164: mov    %r15,(%rsp)
  0x00007f7570479168: sub    $0x200,%rsp
  0x00007f757047916f: fxsave64 (%rsp)
  0x00007f7570479174: mov    %rbx,%rdi
  0x00007f7570479177: mov    %rax,%rsi
  0x00007f757047917a: callq  0x00007f7585522bca
  0x00007f757047917f: fxrstor64 (%rsp)
  0x00007f7570479184: add    $0x200,%rsp
  0x00007f757047918b: mov    (%rsp),%r15
  0x00007f757047918f: mov    0x8(%rsp),%r14
  0x00007f7570479194: mov    0x10(%rsp),%r13
  0x00007f7570479199: mov    0x18(%rsp),%r12
  0x00007f757047919e: mov    0x20(%rsp),%r11
  0x00007f75704791a3: mov    0x28(%rsp),%r10
  0x00007f75704791a8: mov    0x30(%rsp),%r9
  0x00007f75704791ad: mov    0x38(%rsp),%r8
  0x00007f75704791b2: mov    0x40(%rsp),%rdi
  0x00007f75704791b7: mov    0x48(%rsp),%rsi
  0x00007f75704791bc: mov    0x50(%rsp),%rbp
  0x00007f75704791c1: mov    0x60(%rsp),%rbx
  0x00007f75704791c6: mov    0x68(%rsp),%rdx
  0x00007f75704791cb: mov    0x70(%rsp),%rcx
  0x00007f75704791d0: mov    0x78(%rsp),%rax
  0x00007f75704791d5: add    $0x80,%rsp
  0x00007f75704791dc: add    $0x8,%rsp
  0x00007f75704791e0: popfq  
  0x00007f75704791e1: mov    %r13,%rsp
  0x00007f75704791e4: pop    %rax
  0x00007f75704791e5: mov    %rsp,%r13
  0x00007f75704791e8: sub    $0x10,%rsp
  0x00007f75704791ec: mov    %rax,(%rsp)
  0x00007f75704791f0: mov    %rsi,0x8(%rsp)
  0x00007f75704791f5: mov    0x40(%rbx),%rcx
  0x00007f75704791f9: jmpq   *%rcx

AHE@0x00007f75800c18c8: 0xb0000000 i2c: 0x00007f75704792a0 c2i: 0x00007f75704793b4 c2iUV: 0x00007f7570479387
i2c argument handler #0 for: receiver ()[Ljava/lang/Throwable; (539 bytes generated)
c2i argument handler starts at 0x7f75704793b4
  0x00007f75704792a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704792a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704792ae: cmp    %r11,%rax
  0x00007f75704792b1: jbe    0x00007f75704792ca
  0x00007f75704792b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704792c1: cmp    %r11,%rax
  0x00007f75704792c4: jb     0x00007f7570479367
  0x00007f75704792ca: movabs $0x7f7570369420,%r11
  0x00007f75704792d4: cmp    %r11,%rax
  0x00007f75704792d7: jbe    0x00007f75704792f0
  0x00007f75704792dd: movabs $0x7f757036de58,%r11
  0x00007f75704792e7: cmp    %r11,%rax
  0x00007f75704792ea: jb     0x00007f7570479367
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704792f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704792f5: sub    $0x80,%rsp
  0x00007f75704792fc: mov    %rax,0x78(%rsp)
  0x00007f7570479301: mov    %rcx,0x70(%rsp)
  0x00007f7570479306: mov    %rdx,0x68(%rsp)
  0x00007f757047930b: mov    %rbx,0x60(%rsp)
  0x00007f7570479310: mov    %rbp,0x50(%rsp)
  0x00007f7570479315: mov    %rsi,0x48(%rsp)
  0x00007f757047931a: mov    %rdi,0x40(%rsp)
  0x00007f757047931f: mov    %r8,0x38(%rsp)
  0x00007f7570479324: mov    %r9,0x30(%rsp)
  0x00007f7570479329: mov    %r10,0x28(%rsp)
  0x00007f757047932e: mov    %r11,0x20(%rsp)
  0x00007f7570479333: mov    %r12,0x18(%rsp)
  0x00007f7570479338: mov    %r13,0x10(%rsp)
  0x00007f757047933d: mov    %r14,0x8(%rsp)
  0x00007f7570479342: mov    %r15,(%rsp)
  0x00007f7570479346: movabs $0x7f758592f470,%rdi
  0x00007f7570479350: movabs $0x7f75704792f0,%rsi
  0x00007f757047935a: mov    %rsp,%rdx
  0x00007f757047935d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479361: callq  0x00007f75853729fa
  0x00007f7570479366: hlt    
  ;; } verify_i2ce 
  0x00007f7570479367: mov    %rsp,%r11
  0x00007f757047936a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047936e: push   %rax
  0x00007f757047936f: mov    %r11,%rax
  0x00007f7570479372: mov    0x50(%rbx),%r11
  0x00007f7570479376: mov    0x8(%rax),%rsi
  0x00007f757047937a: mov    %rbx,0x258(%r15)
  0x00007f7570479381: mov    %rbx,%rax
  0x00007f7570479384: jmpq   *%r11
  0x00007f7570479387: mov    0x8(%rsi),%ebx
  0x00007f757047938a: shl    $0x3,%rbx
  0x00007f757047938e: cmp    0x10(%rax),%rbx
  0x00007f7570479392: mov    0x8(%rax),%rbx
  0x00007f7570479396: je     0x00007f75704793a1
  0x00007f757047939c: jmpq   0x00007f757046ec40
  0x00007f75704793a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704793a9: je     0x00007f75704794a4
  0x00007f75704793af: jmpq   0x00007f757046ec40
  0x00007f75704793b4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704793bc: je     0x00007f75704794a4
  0x00007f75704793c2: mov    %rsp,%r13
  0x00007f75704793c5: mov    (%rsp),%rax
  0x00007f75704793c9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704793cd: pushfq 
  0x00007f75704793ce: sub    $0x8,%rsp
  0x00007f75704793d2: mov    %rsp,-0x28(%rsp)
  0x00007f75704793d7: sub    $0x80,%rsp
  0x00007f75704793de: mov    %rax,0x78(%rsp)
  0x00007f75704793e3: mov    %rcx,0x70(%rsp)
  0x00007f75704793e8: mov    %rdx,0x68(%rsp)
  0x00007f75704793ed: mov    %rbx,0x60(%rsp)
  0x00007f75704793f2: mov    %rbp,0x50(%rsp)
  0x00007f75704793f7: mov    %rsi,0x48(%rsp)
  0x00007f75704793fc: mov    %rdi,0x40(%rsp)
  0x00007f7570479401: mov    %r8,0x38(%rsp)
  0x00007f7570479406: mov    %r9,0x30(%rsp)
  0x00007f757047940b: mov    %r10,0x28(%rsp)
  0x00007f7570479410: mov    %r11,0x20(%rsp)
  0x00007f7570479415: mov    %r12,0x18(%rsp)
  0x00007f757047941a: mov    %r13,0x10(%rsp)
  0x00007f757047941f: mov    %r14,0x8(%rsp)
  0x00007f7570479424: mov    %r15,(%rsp)
  0x00007f7570479428: sub    $0x200,%rsp
  0x00007f757047942f: fxsave64 (%rsp)
  0x00007f7570479434: mov    %rbx,%rdi
  0x00007f7570479437: mov    %rax,%rsi
  0x00007f757047943a: callq  0x00007f7585522bca
  0x00007f757047943f: fxrstor64 (%rsp)
  0x00007f7570479444: add    $0x200,%rsp
  0x00007f757047944b: mov    (%rsp),%r15
  0x00007f757047944f: mov    0x8(%rsp),%r14
  0x00007f7570479454: mov    0x10(%rsp),%r13
  0x00007f7570479459: mov    0x18(%rsp),%r12
  0x00007f757047945e: mov    0x20(%rsp),%r11
  0x00007f7570479463: mov    0x28(%rsp),%r10
  0x00007f7570479468: mov    0x30(%rsp),%r9
  0x00007f757047946d: mov    0x38(%rsp),%r8
  0x00007f7570479472: mov    0x40(%rsp),%rdi
  0x00007f7570479477: mov    0x48(%rsp),%rsi
  0x00007f757047947c: mov    0x50(%rsp),%rbp
  0x00007f7570479481: mov    0x60(%rsp),%rbx
  0x00007f7570479486: mov    0x68(%rsp),%rdx
  0x00007f757047948b: mov    0x70(%rsp),%rcx
  0x00007f7570479490: mov    0x78(%rsp),%rax
  0x00007f7570479495: add    $0x80,%rsp
  0x00007f757047949c: add    $0x8,%rsp
  0x00007f75704794a0: popfq  
  0x00007f75704794a1: mov    %r13,%rsp
  0x00007f75704794a4: pop    %rax
  0x00007f75704794a5: mov    %rsp,%r13
  0x00007f75704794a8: sub    $0x10,%rsp
  0x00007f75704794ac: mov    %rax,(%rsp)
  0x00007f75704794b0: mov    %rsi,0x8(%rsp)
  0x00007f75704794b5: mov    0x40(%rbx),%rcx
  0x00007f75704794b9: jmpq   *%rcx

AHE@0x00007f75800c1910: 0xbb000000 i2c: 0x00007f7570479560 c2i: 0x00007f7570479678 c2iUV: 0x00007f757047964b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570479678
  0x00007f7570479560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570479564: movabs $0x7f757036e3e0,%r11
  0x00007f757047956e: cmp    %r11,%rax
  0x00007f7570479571: jbe    0x00007f757047958a
  0x00007f7570479577: movabs $0x7f757046e3e0,%r11
  0x00007f7570479581: cmp    %r11,%rax
  0x00007f7570479584: jb     0x00007f7570479627
  0x00007f757047958a: movabs $0x7f7570369420,%r11
  0x00007f7570479594: cmp    %r11,%rax
  0x00007f7570479597: jbe    0x00007f75704795b0
  0x00007f757047959d: movabs $0x7f757036de58,%r11
  0x00007f75704795a7: cmp    %r11,%rax
  0x00007f75704795aa: jb     0x00007f7570479627
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704795b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704795b5: sub    $0x80,%rsp
  0x00007f75704795bc: mov    %rax,0x78(%rsp)
  0x00007f75704795c1: mov    %rcx,0x70(%rsp)
  0x00007f75704795c6: mov    %rdx,0x68(%rsp)
  0x00007f75704795cb: mov    %rbx,0x60(%rsp)
  0x00007f75704795d0: mov    %rbp,0x50(%rsp)
  0x00007f75704795d5: mov    %rsi,0x48(%rsp)
  0x00007f75704795da: mov    %rdi,0x40(%rsp)
  0x00007f75704795df: mov    %r8,0x38(%rsp)
  0x00007f75704795e4: mov    %r9,0x30(%rsp)
  0x00007f75704795e9: mov    %r10,0x28(%rsp)
  0x00007f75704795ee: mov    %r11,0x20(%rsp)
  0x00007f75704795f3: mov    %r12,0x18(%rsp)
  0x00007f75704795f8: mov    %r13,0x10(%rsp)
  0x00007f75704795fd: mov    %r14,0x8(%rsp)
  0x00007f7570479602: mov    %r15,(%rsp)
  0x00007f7570479606: movabs $0x7f758592f470,%rdi
  0x00007f7570479610: movabs $0x7f75704795b0,%rsi
  0x00007f757047961a: mov    %rsp,%rdx
  0x00007f757047961d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479621: callq  0x00007f75853729fa
  0x00007f7570479626: hlt    
  ;; } verify_i2ce 
  0x00007f7570479627: mov    %rsp,%r11
  0x00007f757047962a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047962e: push   %rax
  0x00007f757047962f: mov    %r11,%rax
  0x00007f7570479632: mov    0x50(%rbx),%r11
  0x00007f7570479636: mov    0x10(%rax),%rsi
  0x00007f757047963a: mov    0x8(%rax),%rdx
  0x00007f757047963e: mov    %rbx,0x258(%r15)
  0x00007f7570479645: mov    %rbx,%rax
  0x00007f7570479648: jmpq   *%r11
  0x00007f757047964b: mov    0x8(%rsi),%ebx
  0x00007f757047964e: shl    $0x3,%rbx
  0x00007f7570479652: cmp    0x10(%rax),%rbx
  0x00007f7570479656: mov    0x8(%rax),%rbx
  0x00007f757047965a: je     0x00007f7570479665
  0x00007f7570479660: jmpq   0x00007f757046ec40
  0x00007f7570479665: cmpq   $0x0,0x58(%rbx)
  0x00007f757047966d: je     0x00007f7570479768
  0x00007f7570479673: jmpq   0x00007f757046ec40
  0x00007f7570479678: cmpq   $0x0,0x58(%rbx)
  0x00007f7570479680: je     0x00007f7570479768
  0x00007f7570479686: mov    %rsp,%r13
  0x00007f7570479689: mov    (%rsp),%rax
  0x00007f757047968d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479691: pushfq 
  0x00007f7570479692: sub    $0x8,%rsp
  0x00007f7570479696: mov    %rsp,-0x28(%rsp)
  0x00007f757047969b: sub    $0x80,%rsp
  0x00007f75704796a2: mov    %rax,0x78(%rsp)
  0x00007f75704796a7: mov    %rcx,0x70(%rsp)
  0x00007f75704796ac: mov    %rdx,0x68(%rsp)
  0x00007f75704796b1: mov    %rbx,0x60(%rsp)
  0x00007f75704796b6: mov    %rbp,0x50(%rsp)
  0x00007f75704796bb: mov    %rsi,0x48(%rsp)
  0x00007f75704796c0: mov    %rdi,0x40(%rsp)
  0x00007f75704796c5: mov    %r8,0x38(%rsp)
  0x00007f75704796ca: mov    %r9,0x30(%rsp)
  0x00007f75704796cf: mov    %r10,0x28(%rsp)
  0x00007f75704796d4: mov    %r11,0x20(%rsp)
  0x00007f75704796d9: mov    %r12,0x18(%rsp)
  0x00007f75704796de: mov    %r13,0x10(%rsp)
  0x00007f75704796e3: mov    %r14,0x8(%rsp)
  0x00007f75704796e8: mov    %r15,(%rsp)
  0x00007f75704796ec: sub    $0x200,%rsp
  0x00007f75704796f3: fxsave64 (%rsp)
  0x00007f75704796f8: mov    %rbx,%rdi
  0x00007f75704796fb: mov    %rax,%rsi
  0x00007f75704796fe: callq  0x00007f7585522bca
  0x00007f7570479703: fxrstor64 (%rsp)
  0x00007f7570479708: add    $0x200,%rsp
  0x00007f757047970f: mov    (%rsp),%r15
  0x00007f7570479713: mov    0x8(%rsp),%r14
  0x00007f7570479718: mov    0x10(%rsp),%r13
  0x00007f757047971d: mov    0x18(%rsp),%r12
  0x00007f7570479722: mov    0x20(%rsp),%r11
  0x00007f7570479727: mov    0x28(%rsp),%r10
  0x00007f757047972c: mov    0x30(%rsp),%r9
  0x00007f7570479731: mov    0x38(%rsp),%r8
  0x00007f7570479736: mov    0x40(%rsp),%rdi
  0x00007f757047973b: mov    0x48(%rsp),%rsi
  0x00007f7570479740: mov    0x50(%rsp),%rbp
  0x00007f7570479745: mov    0x60(%rsp),%rbx
  0x00007f757047974a: mov    0x68(%rsp),%rdx
  0x00007f757047974f: mov    0x70(%rsp),%rcx
  0x00007f7570479754: mov    0x78(%rsp),%rax
  0x00007f7570479759: add    $0x80,%rsp
  0x00007f7570479760: add    $0x8,%rsp
  0x00007f7570479764: popfq  
  0x00007f7570479765: mov    %r13,%rsp
  0x00007f7570479768: pop    %rax
  0x00007f7570479769: mov    %rsp,%r13
  0x00007f757047976c: sub    $0x20,%rsp
  0x00007f7570479770: mov    %rax,(%rsp)
  0x00007f7570479774: mov    %rsi,0x10(%rsp)
  0x00007f7570479779: mov    %rdx,0x8(%rsp)
  0x00007f757047977e: mov    0x40(%rbx),%rcx
  0x00007f7570479782: jmpq   *%rcx

AHE@0x00007f75800c1958: 0xbb000000 i2c: 0x00007f7570479860 c2i: 0x00007f7570479978 c2iUV: 0x00007f757047994b
i2c argument handler #0 for: receiver (Ljava/io/ObjectOutputStream;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570479978
  0x00007f7570479860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570479864: movabs $0x7f757036e3e0,%r11
  0x00007f757047986e: cmp    %r11,%rax
  0x00007f7570479871: jbe    0x00007f757047988a
  0x00007f7570479877: movabs $0x7f757046e3e0,%r11
  0x00007f7570479881: cmp    %r11,%rax
  0x00007f7570479884: jb     0x00007f7570479927
  0x00007f757047988a: movabs $0x7f7570369420,%r11
  0x00007f7570479894: cmp    %r11,%rax
  0x00007f7570479897: jbe    0x00007f75704798b0
  0x00007f757047989d: movabs $0x7f757036de58,%r11
  0x00007f75704798a7: cmp    %r11,%rax
  0x00007f75704798aa: jb     0x00007f7570479927
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704798b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704798b5: sub    $0x80,%rsp
  0x00007f75704798bc: mov    %rax,0x78(%rsp)
  0x00007f75704798c1: mov    %rcx,0x70(%rsp)
  0x00007f75704798c6: mov    %rdx,0x68(%rsp)
  0x00007f75704798cb: mov    %rbx,0x60(%rsp)
  0x00007f75704798d0: mov    %rbp,0x50(%rsp)
  0x00007f75704798d5: mov    %rsi,0x48(%rsp)
  0x00007f75704798da: mov    %rdi,0x40(%rsp)
  0x00007f75704798df: mov    %r8,0x38(%rsp)
  0x00007f75704798e4: mov    %r9,0x30(%rsp)
  0x00007f75704798e9: mov    %r10,0x28(%rsp)
  0x00007f75704798ee: mov    %r11,0x20(%rsp)
  0x00007f75704798f3: mov    %r12,0x18(%rsp)
  0x00007f75704798f8: mov    %r13,0x10(%rsp)
  0x00007f75704798fd: mov    %r14,0x8(%rsp)
  0x00007f7570479902: mov    %r15,(%rsp)
  0x00007f7570479906: movabs $0x7f758592f470,%rdi
  0x00007f7570479910: movabs $0x7f75704798b0,%rsi
  0x00007f757047991a: mov    %rsp,%rdx
  0x00007f757047991d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479921: callq  0x00007f75853729fa
  0x00007f7570479926: hlt    
  ;; } verify_i2ce 
  0x00007f7570479927: mov    %rsp,%r11
  0x00007f757047992a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047992e: push   %rax
  0x00007f757047992f: mov    %r11,%rax
  0x00007f7570479932: mov    0x50(%rbx),%r11
  0x00007f7570479936: mov    0x10(%rax),%rsi
  0x00007f757047993a: mov    0x8(%rax),%rdx
  0x00007f757047993e: mov    %rbx,0x258(%r15)
  0x00007f7570479945: mov    %rbx,%rax
  0x00007f7570479948: jmpq   *%r11
  0x00007f757047994b: mov    0x8(%rsi),%ebx
  0x00007f757047994e: shl    $0x3,%rbx
  0x00007f7570479952: cmp    0x10(%rax),%rbx
  0x00007f7570479956: mov    0x8(%rax),%rbx
  0x00007f757047995a: je     0x00007f7570479965
  0x00007f7570479960: jmpq   0x00007f757046ec40
  0x00007f7570479965: cmpq   $0x0,0x58(%rbx)
  0x00007f757047996d: je     0x00007f7570479a68
  0x00007f7570479973: jmpq   0x00007f757046ec40
  0x00007f7570479978: cmpq   $0x0,0x58(%rbx)
  0x00007f7570479980: je     0x00007f7570479a68
  0x00007f7570479986: mov    %rsp,%r13
  0x00007f7570479989: mov    (%rsp),%rax
  0x00007f757047998d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479991: pushfq 
  0x00007f7570479992: sub    $0x8,%rsp
  0x00007f7570479996: mov    %rsp,-0x28(%rsp)
  0x00007f757047999b: sub    $0x80,%rsp
  0x00007f75704799a2: mov    %rax,0x78(%rsp)
  0x00007f75704799a7: mov    %rcx,0x70(%rsp)
  0x00007f75704799ac: mov    %rdx,0x68(%rsp)
  0x00007f75704799b1: mov    %rbx,0x60(%rsp)
  0x00007f75704799b6: mov    %rbp,0x50(%rsp)
  0x00007f75704799bb: mov    %rsi,0x48(%rsp)
  0x00007f75704799c0: mov    %rdi,0x40(%rsp)
  0x00007f75704799c5: mov    %r8,0x38(%rsp)
  0x00007f75704799ca: mov    %r9,0x30(%rsp)
  0x00007f75704799cf: mov    %r10,0x28(%rsp)
  0x00007f75704799d4: mov    %r11,0x20(%rsp)
  0x00007f75704799d9: mov    %r12,0x18(%rsp)
  0x00007f75704799de: mov    %r13,0x10(%rsp)
  0x00007f75704799e3: mov    %r14,0x8(%rsp)
  0x00007f75704799e8: mov    %r15,(%rsp)
  0x00007f75704799ec: sub    $0x200,%rsp
  0x00007f75704799f3: fxsave64 (%rsp)
  0x00007f75704799f8: mov    %rbx,%rdi
  0x00007f75704799fb: mov    %rax,%rsi
  0x00007f75704799fe: callq  0x00007f7585522bca
  0x00007f7570479a03: fxrstor64 (%rsp)
  0x00007f7570479a08: add    $0x200,%rsp
  0x00007f7570479a0f: mov    (%rsp),%r15
  0x00007f7570479a13: mov    0x8(%rsp),%r14
  0x00007f7570479a18: mov    0x10(%rsp),%r13
  0x00007f7570479a1d: mov    0x18(%rsp),%r12
  0x00007f7570479a22: mov    0x20(%rsp),%r11
  0x00007f7570479a27: mov    0x28(%rsp),%r10
  0x00007f7570479a2c: mov    0x30(%rsp),%r9
  0x00007f7570479a31: mov    0x38(%rsp),%r8
  0x00007f7570479a36: mov    0x40(%rsp),%rdi
  0x00007f7570479a3b: mov    0x48(%rsp),%rsi
  0x00007f7570479a40: mov    0x50(%rsp),%rbp
  0x00007f7570479a45: mov    0x60(%rsp),%rbx
  0x00007f7570479a4a: mov    0x68(%rsp),%rdx
  0x00007f7570479a4f: mov    0x70(%rsp),%rcx
  0x00007f7570479a54: mov    0x78(%rsp),%rax
  0x00007f7570479a59: add    $0x80,%rsp
  0x00007f7570479a60: add    $0x8,%rsp
  0x00007f7570479a64: popfq  
  0x00007f7570479a65: mov    %r13,%rsp
  0x00007f7570479a68: pop    %rax
  0x00007f7570479a69: mov    %rsp,%r13
  0x00007f7570479a6c: sub    $0x20,%rsp
  0x00007f7570479a70: mov    %rax,(%rsp)
  0x00007f7570479a74: mov    %rsi,0x10(%rsp)
  0x00007f7570479a79: mov    %rdx,0x8(%rsp)
  0x00007f7570479a7e: mov    0x40(%rbx),%rcx
  0x00007f7570479a82: jmpq   *%rcx

AHE@0x00007f75800c19a0: 0xbb000000 i2c: 0x00007f7570479b60 c2i: 0x00007f7570479c78 c2iUV: 0x00007f7570479c4b
i2c argument handler #0 for: receiver (Ljava/util/List;)I (548 bytes generated)
c2i argument handler starts at 0x7f7570479c78
  0x00007f7570479b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570479b64: movabs $0x7f757036e3e0,%r11
  0x00007f7570479b6e: cmp    %r11,%rax
  0x00007f7570479b71: jbe    0x00007f7570479b8a
  0x00007f7570479b77: movabs $0x7f757046e3e0,%r11
  0x00007f7570479b81: cmp    %r11,%rax
  0x00007f7570479b84: jb     0x00007f7570479c27
  0x00007f7570479b8a: movabs $0x7f7570369420,%r11
  0x00007f7570479b94: cmp    %r11,%rax
  0x00007f7570479b97: jbe    0x00007f7570479bb0
  0x00007f7570479b9d: movabs $0x7f757036de58,%r11
  0x00007f7570479ba7: cmp    %r11,%rax
  0x00007f7570479baa: jb     0x00007f7570479c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570479bb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570479bb5: sub    $0x80,%rsp
  0x00007f7570479bbc: mov    %rax,0x78(%rsp)
  0x00007f7570479bc1: mov    %rcx,0x70(%rsp)
  0x00007f7570479bc6: mov    %rdx,0x68(%rsp)
  0x00007f7570479bcb: mov    %rbx,0x60(%rsp)
  0x00007f7570479bd0: mov    %rbp,0x50(%rsp)
  0x00007f7570479bd5: mov    %rsi,0x48(%rsp)
  0x00007f7570479bda: mov    %rdi,0x40(%rsp)
  0x00007f7570479bdf: mov    %r8,0x38(%rsp)
  0x00007f7570479be4: mov    %r9,0x30(%rsp)
  0x00007f7570479be9: mov    %r10,0x28(%rsp)
  0x00007f7570479bee: mov    %r11,0x20(%rsp)
  0x00007f7570479bf3: mov    %r12,0x18(%rsp)
  0x00007f7570479bf8: mov    %r13,0x10(%rsp)
  0x00007f7570479bfd: mov    %r14,0x8(%rsp)
  0x00007f7570479c02: mov    %r15,(%rsp)
  0x00007f7570479c06: movabs $0x7f758592f470,%rdi
  0x00007f7570479c10: movabs $0x7f7570479bb0,%rsi
  0x00007f7570479c1a: mov    %rsp,%rdx
  0x00007f7570479c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479c21: callq  0x00007f75853729fa
  0x00007f7570479c26: hlt    
  ;; } verify_i2ce 
  0x00007f7570479c27: mov    %rsp,%r11
  0x00007f7570479c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479c2e: push   %rax
  0x00007f7570479c2f: mov    %r11,%rax
  0x00007f7570479c32: mov    0x50(%rbx),%r11
  0x00007f7570479c36: mov    0x10(%rax),%rsi
  0x00007f7570479c3a: mov    0x8(%rax),%rdx
  0x00007f7570479c3e: mov    %rbx,0x258(%r15)
  0x00007f7570479c45: mov    %rbx,%rax
  0x00007f7570479c48: jmpq   *%r11
  0x00007f7570479c4b: mov    0x8(%rsi),%ebx
  0x00007f7570479c4e: shl    $0x3,%rbx
  0x00007f7570479c52: cmp    0x10(%rax),%rbx
  0x00007f7570479c56: mov    0x8(%rax),%rbx
  0x00007f7570479c5a: je     0x00007f7570479c65
  0x00007f7570479c60: jmpq   0x00007f757046ec40
  0x00007f7570479c65: cmpq   $0x0,0x58(%rbx)
  0x00007f7570479c6d: je     0x00007f7570479d68
  0x00007f7570479c73: jmpq   0x00007f757046ec40
  0x00007f7570479c78: cmpq   $0x0,0x58(%rbx)
  0x00007f7570479c80: je     0x00007f7570479d68
  0x00007f7570479c86: mov    %rsp,%r13
  0x00007f7570479c89: mov    (%rsp),%rax
  0x00007f7570479c8d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479c91: pushfq 
  0x00007f7570479c92: sub    $0x8,%rsp
  0x00007f7570479c96: mov    %rsp,-0x28(%rsp)
  0x00007f7570479c9b: sub    $0x80,%rsp
  0x00007f7570479ca2: mov    %rax,0x78(%rsp)
  0x00007f7570479ca7: mov    %rcx,0x70(%rsp)
  0x00007f7570479cac: mov    %rdx,0x68(%rsp)
  0x00007f7570479cb1: mov    %rbx,0x60(%rsp)
  0x00007f7570479cb6: mov    %rbp,0x50(%rsp)
  0x00007f7570479cbb: mov    %rsi,0x48(%rsp)
  0x00007f7570479cc0: mov    %rdi,0x40(%rsp)
  0x00007f7570479cc5: mov    %r8,0x38(%rsp)
  0x00007f7570479cca: mov    %r9,0x30(%rsp)
  0x00007f7570479ccf: mov    %r10,0x28(%rsp)
  0x00007f7570479cd4: mov    %r11,0x20(%rsp)
  0x00007f7570479cd9: mov    %r12,0x18(%rsp)
  0x00007f7570479cde: mov    %r13,0x10(%rsp)
  0x00007f7570479ce3: mov    %r14,0x8(%rsp)
  0x00007f7570479ce8: mov    %r15,(%rsp)
  0x00007f7570479cec: sub    $0x200,%rsp
  0x00007f7570479cf3: fxsave64 (%rsp)
  0x00007f7570479cf8: mov    %rbx,%rdi
  0x00007f7570479cfb: mov    %rax,%rsi
  0x00007f7570479cfe: callq  0x00007f7585522bca
  0x00007f7570479d03: fxrstor64 (%rsp)
  0x00007f7570479d08: add    $0x200,%rsp
  0x00007f7570479d0f: mov    (%rsp),%r15
  0x00007f7570479d13: mov    0x8(%rsp),%r14
  0x00007f7570479d18: mov    0x10(%rsp),%r13
  0x00007f7570479d1d: mov    0x18(%rsp),%r12
  0x00007f7570479d22: mov    0x20(%rsp),%r11
  0x00007f7570479d27: mov    0x28(%rsp),%r10
  0x00007f7570479d2c: mov    0x30(%rsp),%r9
  0x00007f7570479d31: mov    0x38(%rsp),%r8
  0x00007f7570479d36: mov    0x40(%rsp),%rdi
  0x00007f7570479d3b: mov    0x48(%rsp),%rsi
  0x00007f7570479d40: mov    0x50(%rsp),%rbp
  0x00007f7570479d45: mov    0x60(%rsp),%rbx
  0x00007f7570479d4a: mov    0x68(%rsp),%rdx
  0x00007f7570479d4f: mov    0x70(%rsp),%rcx
  0x00007f7570479d54: mov    0x78(%rsp),%rax
  0x00007f7570479d59: add    $0x80,%rsp
  0x00007f7570479d60: add    $0x8,%rsp
  0x00007f7570479d64: popfq  
  0x00007f7570479d65: mov    %r13,%rsp
  0x00007f7570479d68: pop    %rax
  0x00007f7570479d69: mov    %rsp,%r13
  0x00007f7570479d6c: sub    $0x20,%rsp
  0x00007f7570479d70: mov    %rax,(%rsp)
  0x00007f7570479d74: mov    %rsi,0x10(%rsp)
  0x00007f7570479d79: mov    %rdx,0x8(%rsp)
  0x00007f7570479d7e: mov    0x40(%rbx),%rcx
  0x00007f7570479d82: jmpq   *%rcx

AHE@0x00007f75800c19e8: 0xbb000000 i2c: 0x00007f7570479e60 c2i: 0x00007f7570479f78 c2iUV: 0x00007f7570479f4b
i2c argument handler #0 for: receiver (Ljava/io/ObjectInputStream;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570479f78
  0x00007f7570479e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570479e64: movabs $0x7f757036e3e0,%r11
  0x00007f7570479e6e: cmp    %r11,%rax
  0x00007f7570479e71: jbe    0x00007f7570479e8a
  0x00007f7570479e77: movabs $0x7f757046e3e0,%r11
  0x00007f7570479e81: cmp    %r11,%rax
  0x00007f7570479e84: jb     0x00007f7570479f27
  0x00007f7570479e8a: movabs $0x7f7570369420,%r11
  0x00007f7570479e94: cmp    %r11,%rax
  0x00007f7570479e97: jbe    0x00007f7570479eb0
  0x00007f7570479e9d: movabs $0x7f757036de58,%r11
  0x00007f7570479ea7: cmp    %r11,%rax
  0x00007f7570479eaa: jb     0x00007f7570479f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570479eb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570479eb5: sub    $0x80,%rsp
  0x00007f7570479ebc: mov    %rax,0x78(%rsp)
  0x00007f7570479ec1: mov    %rcx,0x70(%rsp)
  0x00007f7570479ec6: mov    %rdx,0x68(%rsp)
  0x00007f7570479ecb: mov    %rbx,0x60(%rsp)
  0x00007f7570479ed0: mov    %rbp,0x50(%rsp)
  0x00007f7570479ed5: mov    %rsi,0x48(%rsp)
  0x00007f7570479eda: mov    %rdi,0x40(%rsp)
  0x00007f7570479edf: mov    %r8,0x38(%rsp)
  0x00007f7570479ee4: mov    %r9,0x30(%rsp)
  0x00007f7570479ee9: mov    %r10,0x28(%rsp)
  0x00007f7570479eee: mov    %r11,0x20(%rsp)
  0x00007f7570479ef3: mov    %r12,0x18(%rsp)
  0x00007f7570479ef8: mov    %r13,0x10(%rsp)
  0x00007f7570479efd: mov    %r14,0x8(%rsp)
  0x00007f7570479f02: mov    %r15,(%rsp)
  0x00007f7570479f06: movabs $0x7f758592f470,%rdi
  0x00007f7570479f10: movabs $0x7f7570479eb0,%rsi
  0x00007f7570479f1a: mov    %rsp,%rdx
  0x00007f7570479f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479f21: callq  0x00007f75853729fa
  0x00007f7570479f26: hlt    
  ;; } verify_i2ce 
  0x00007f7570479f27: mov    %rsp,%r11
  0x00007f7570479f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479f2e: push   %rax
  0x00007f7570479f2f: mov    %r11,%rax
  0x00007f7570479f32: mov    0x50(%rbx),%r11
  0x00007f7570479f36: mov    0x10(%rax),%rsi
  0x00007f7570479f3a: mov    0x8(%rax),%rdx
  0x00007f7570479f3e: mov    %rbx,0x258(%r15)
  0x00007f7570479f45: mov    %rbx,%rax
  0x00007f7570479f48: jmpq   *%r11
  0x00007f7570479f4b: mov    0x8(%rsi),%ebx
  0x00007f7570479f4e: shl    $0x3,%rbx
  0x00007f7570479f52: cmp    0x10(%rax),%rbx
  0x00007f7570479f56: mov    0x8(%rax),%rbx
  0x00007f7570479f5a: je     0x00007f7570479f65
  0x00007f7570479f60: jmpq   0x00007f757046ec40
  0x00007f7570479f65: cmpq   $0x0,0x58(%rbx)
  0x00007f7570479f6d: je     0x00007f757047a068
  0x00007f7570479f73: jmpq   0x00007f757046ec40
  0x00007f7570479f78: cmpq   $0x0,0x58(%rbx)
  0x00007f7570479f80: je     0x00007f757047a068
  0x00007f7570479f86: mov    %rsp,%r13
  0x00007f7570479f89: mov    (%rsp),%rax
  0x00007f7570479f8d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570479f91: pushfq 
  0x00007f7570479f92: sub    $0x8,%rsp
  0x00007f7570479f96: mov    %rsp,-0x28(%rsp)
  0x00007f7570479f9b: sub    $0x80,%rsp
  0x00007f7570479fa2: mov    %rax,0x78(%rsp)
  0x00007f7570479fa7: mov    %rcx,0x70(%rsp)
  0x00007f7570479fac: mov    %rdx,0x68(%rsp)
  0x00007f7570479fb1: mov    %rbx,0x60(%rsp)
  0x00007f7570479fb6: mov    %rbp,0x50(%rsp)
  0x00007f7570479fbb: mov    %rsi,0x48(%rsp)
  0x00007f7570479fc0: mov    %rdi,0x40(%rsp)
  0x00007f7570479fc5: mov    %r8,0x38(%rsp)
  0x00007f7570479fca: mov    %r9,0x30(%rsp)
  0x00007f7570479fcf: mov    %r10,0x28(%rsp)
  0x00007f7570479fd4: mov    %r11,0x20(%rsp)
  0x00007f7570479fd9: mov    %r12,0x18(%rsp)
  0x00007f7570479fde: mov    %r13,0x10(%rsp)
  0x00007f7570479fe3: mov    %r14,0x8(%rsp)
  0x00007f7570479fe8: mov    %r15,(%rsp)
  0x00007f7570479fec: sub    $0x200,%rsp
  0x00007f7570479ff3: fxsave64 (%rsp)
  0x00007f7570479ff8: mov    %rbx,%rdi
  0x00007f7570479ffb: mov    %rax,%rsi
  0x00007f7570479ffe: callq  0x00007f7585522bca
  0x00007f757047a003: fxrstor64 (%rsp)
  0x00007f757047a008: add    $0x200,%rsp
  0x00007f757047a00f: mov    (%rsp),%r15
  0x00007f757047a013: mov    0x8(%rsp),%r14
  0x00007f757047a018: mov    0x10(%rsp),%r13
  0x00007f757047a01d: mov    0x18(%rsp),%r12
  0x00007f757047a022: mov    0x20(%rsp),%r11
  0x00007f757047a027: mov    0x28(%rsp),%r10
  0x00007f757047a02c: mov    0x30(%rsp),%r9
  0x00007f757047a031: mov    0x38(%rsp),%r8
  0x00007f757047a036: mov    0x40(%rsp),%rdi
  0x00007f757047a03b: mov    0x48(%rsp),%rsi
  0x00007f757047a040: mov    0x50(%rsp),%rbp
  0x00007f757047a045: mov    0x60(%rsp),%rbx
  0x00007f757047a04a: mov    0x68(%rsp),%rdx
  0x00007f757047a04f: mov    0x70(%rsp),%rcx
  0x00007f757047a054: mov    0x78(%rsp),%rax
  0x00007f757047a059: add    $0x80,%rsp
  0x00007f757047a060: add    $0x8,%rsp
  0x00007f757047a064: popfq  
  0x00007f757047a065: mov    %r13,%rsp
  0x00007f757047a068: pop    %rax
  0x00007f757047a069: mov    %rsp,%r13
  0x00007f757047a06c: sub    $0x20,%rsp
  0x00007f757047a070: mov    %rax,(%rsp)
  0x00007f757047a074: mov    %rsi,0x10(%rsp)
  0x00007f757047a079: mov    %rdx,0x8(%rsp)
  0x00007f757047a07e: mov    0x40(%rbx),%rcx
  0x00007f757047a082: jmpq   *%rcx

AHE@0x00007f75800c1a30: 0xba000000 i2c: 0x00007f757047a160 c2i: 0x00007f757047a277 c2iUV: 0x00007f757047a24a
i2c argument handler #0 for: receiver (I)Ljava/lang/StackTraceElement; (546 bytes generated)
c2i argument handler starts at 0x7f757047a277
  0x00007f757047a160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047a164: movabs $0x7f757036e3e0,%r11
  0x00007f757047a16e: cmp    %r11,%rax
  0x00007f757047a171: jbe    0x00007f757047a18a
  0x00007f757047a177: movabs $0x7f757046e3e0,%r11
  0x00007f757047a181: cmp    %r11,%rax
  0x00007f757047a184: jb     0x00007f757047a227
  0x00007f757047a18a: movabs $0x7f7570369420,%r11
  0x00007f757047a194: cmp    %r11,%rax
  0x00007f757047a197: jbe    0x00007f757047a1b0
  0x00007f757047a19d: movabs $0x7f757036de58,%r11
  0x00007f757047a1a7: cmp    %r11,%rax
  0x00007f757047a1aa: jb     0x00007f757047a227
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047a1b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047a1b5: sub    $0x80,%rsp
  0x00007f757047a1bc: mov    %rax,0x78(%rsp)
  0x00007f757047a1c1: mov    %rcx,0x70(%rsp)
  0x00007f757047a1c6: mov    %rdx,0x68(%rsp)
  0x00007f757047a1cb: mov    %rbx,0x60(%rsp)
  0x00007f757047a1d0: mov    %rbp,0x50(%rsp)
  0x00007f757047a1d5: mov    %rsi,0x48(%rsp)
  0x00007f757047a1da: mov    %rdi,0x40(%rsp)
  0x00007f757047a1df: mov    %r8,0x38(%rsp)
  0x00007f757047a1e4: mov    %r9,0x30(%rsp)
  0x00007f757047a1e9: mov    %r10,0x28(%rsp)
  0x00007f757047a1ee: mov    %r11,0x20(%rsp)
  0x00007f757047a1f3: mov    %r12,0x18(%rsp)
  0x00007f757047a1f8: mov    %r13,0x10(%rsp)
  0x00007f757047a1fd: mov    %r14,0x8(%rsp)
  0x00007f757047a202: mov    %r15,(%rsp)
  0x00007f757047a206: movabs $0x7f758592f470,%rdi
  0x00007f757047a210: movabs $0x7f757047a1b0,%rsi
  0x00007f757047a21a: mov    %rsp,%rdx
  0x00007f757047a21d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a221: callq  0x00007f75853729fa
  0x00007f757047a226: hlt    
  ;; } verify_i2ce 
  0x00007f757047a227: mov    %rsp,%r11
  0x00007f757047a22a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a22e: push   %rax
  0x00007f757047a22f: mov    %r11,%rax
  0x00007f757047a232: mov    0x50(%rbx),%r11
  0x00007f757047a236: mov    0x10(%rax),%rsi
  0x00007f757047a23a: mov    0x8(%rax),%edx
  0x00007f757047a23d: mov    %rbx,0x258(%r15)
  0x00007f757047a244: mov    %rbx,%rax
  0x00007f757047a247: jmpq   *%r11
  0x00007f757047a24a: mov    0x8(%rsi),%ebx
  0x00007f757047a24d: shl    $0x3,%rbx
  0x00007f757047a251: cmp    0x10(%rax),%rbx
  0x00007f757047a255: mov    0x8(%rax),%rbx
  0x00007f757047a259: je     0x00007f757047a264
  0x00007f757047a25f: jmpq   0x00007f757046ec40
  0x00007f757047a264: cmpq   $0x0,0x58(%rbx)
  0x00007f757047a26c: je     0x00007f757047a367
  0x00007f757047a272: jmpq   0x00007f757046ec40
  0x00007f757047a277: cmpq   $0x0,0x58(%rbx)
  0x00007f757047a27f: je     0x00007f757047a367
  0x00007f757047a285: mov    %rsp,%r13
  0x00007f757047a288: mov    (%rsp),%rax
  0x00007f757047a28c: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a290: pushfq 
  0x00007f757047a291: sub    $0x8,%rsp
  0x00007f757047a295: mov    %rsp,-0x28(%rsp)
  0x00007f757047a29a: sub    $0x80,%rsp
  0x00007f757047a2a1: mov    %rax,0x78(%rsp)
  0x00007f757047a2a6: mov    %rcx,0x70(%rsp)
  0x00007f757047a2ab: mov    %rdx,0x68(%rsp)
  0x00007f757047a2b0: mov    %rbx,0x60(%rsp)
  0x00007f757047a2b5: mov    %rbp,0x50(%rsp)
  0x00007f757047a2ba: mov    %rsi,0x48(%rsp)
  0x00007f757047a2bf: mov    %rdi,0x40(%rsp)
  0x00007f757047a2c4: mov    %r8,0x38(%rsp)
  0x00007f757047a2c9: mov    %r9,0x30(%rsp)
  0x00007f757047a2ce: mov    %r10,0x28(%rsp)
  0x00007f757047a2d3: mov    %r11,0x20(%rsp)
  0x00007f757047a2d8: mov    %r12,0x18(%rsp)
  0x00007f757047a2dd: mov    %r13,0x10(%rsp)
  0x00007f757047a2e2: mov    %r14,0x8(%rsp)
  0x00007f757047a2e7: mov    %r15,(%rsp)
  0x00007f757047a2eb: sub    $0x200,%rsp
  0x00007f757047a2f2: fxsave64 (%rsp)
  0x00007f757047a2f7: mov    %rbx,%rdi
  0x00007f757047a2fa: mov    %rax,%rsi
  0x00007f757047a2fd: callq  0x00007f7585522bca
  0x00007f757047a302: fxrstor64 (%rsp)
  0x00007f757047a307: add    $0x200,%rsp
  0x00007f757047a30e: mov    (%rsp),%r15
  0x00007f757047a312: mov    0x8(%rsp),%r14
  0x00007f757047a317: mov    0x10(%rsp),%r13
  0x00007f757047a31c: mov    0x18(%rsp),%r12
  0x00007f757047a321: mov    0x20(%rsp),%r11
  0x00007f757047a326: mov    0x28(%rsp),%r10
  0x00007f757047a32b: mov    0x30(%rsp),%r9
  0x00007f757047a330: mov    0x38(%rsp),%r8
  0x00007f757047a335: mov    0x40(%rsp),%rdi
  0x00007f757047a33a: mov    0x48(%rsp),%rsi
  0x00007f757047a33f: mov    0x50(%rsp),%rbp
  0x00007f757047a344: mov    0x60(%rsp),%rbx
  0x00007f757047a349: mov    0x68(%rsp),%rdx
  0x00007f757047a34e: mov    0x70(%rsp),%rcx
  0x00007f757047a353: mov    0x78(%rsp),%rax
  0x00007f757047a358: add    $0x80,%rsp
  0x00007f757047a35f: add    $0x8,%rsp
  0x00007f757047a363: popfq  
  0x00007f757047a364: mov    %r13,%rsp
  0x00007f757047a367: pop    %rax
  0x00007f757047a368: mov    %rsp,%r13
  0x00007f757047a36b: sub    $0x20,%rsp
  0x00007f757047a36f: mov    %rax,(%rsp)
  0x00007f757047a373: mov    %rsi,0x10(%rsp)
  0x00007f757047a378: mov    %edx,0x8(%rsp)
  0x00007f757047a37c: mov    0x40(%rbx),%rcx
  0x00007f757047a380: jmpq   *%rcx

AHE@0x00007f75800c1a78: 0xb0000000 i2c: 0x00007f757047a460 c2i: 0x00007f757047a574 c2iUV: 0x00007f757047a547
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f757047a574
  0x00007f757047a460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047a464: movabs $0x7f757036e3e0,%r11
  0x00007f757047a46e: cmp    %r11,%rax
  0x00007f757047a471: jbe    0x00007f757047a48a
  0x00007f757047a477: movabs $0x7f757046e3e0,%r11
  0x00007f757047a481: cmp    %r11,%rax
  0x00007f757047a484: jb     0x00007f757047a527
  0x00007f757047a48a: movabs $0x7f7570369420,%r11
  0x00007f757047a494: cmp    %r11,%rax
  0x00007f757047a497: jbe    0x00007f757047a4b0
  0x00007f757047a49d: movabs $0x7f757036de58,%r11
  0x00007f757047a4a7: cmp    %r11,%rax
  0x00007f757047a4aa: jb     0x00007f757047a527
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047a4b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047a4b5: sub    $0x80,%rsp
  0x00007f757047a4bc: mov    %rax,0x78(%rsp)
  0x00007f757047a4c1: mov    %rcx,0x70(%rsp)
  0x00007f757047a4c6: mov    %rdx,0x68(%rsp)
  0x00007f757047a4cb: mov    %rbx,0x60(%rsp)
  0x00007f757047a4d0: mov    %rbp,0x50(%rsp)
  0x00007f757047a4d5: mov    %rsi,0x48(%rsp)
  0x00007f757047a4da: mov    %rdi,0x40(%rsp)
  0x00007f757047a4df: mov    %r8,0x38(%rsp)
  0x00007f757047a4e4: mov    %r9,0x30(%rsp)
  0x00007f757047a4e9: mov    %r10,0x28(%rsp)
  0x00007f757047a4ee: mov    %r11,0x20(%rsp)
  0x00007f757047a4f3: mov    %r12,0x18(%rsp)
  0x00007f757047a4f8: mov    %r13,0x10(%rsp)
  0x00007f757047a4fd: mov    %r14,0x8(%rsp)
  0x00007f757047a502: mov    %r15,(%rsp)
  0x00007f757047a506: movabs $0x7f758592f470,%rdi
  0x00007f757047a510: movabs $0x7f757047a4b0,%rsi
  0x00007f757047a51a: mov    %rsp,%rdx
  0x00007f757047a51d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a521: callq  0x00007f75853729fa
  0x00007f757047a526: hlt    
  ;; } verify_i2ce 
  0x00007f757047a527: mov    %rsp,%r11
  0x00007f757047a52a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a52e: push   %rax
  0x00007f757047a52f: mov    %r11,%rax
  0x00007f757047a532: mov    0x50(%rbx),%r11
  0x00007f757047a536: mov    0x8(%rax),%rsi
  0x00007f757047a53a: mov    %rbx,0x258(%r15)
  0x00007f757047a541: mov    %rbx,%rax
  0x00007f757047a544: jmpq   *%r11
  0x00007f757047a547: mov    0x8(%rsi),%ebx
  0x00007f757047a54a: shl    $0x3,%rbx
  0x00007f757047a54e: cmp    0x10(%rax),%rbx
  0x00007f757047a552: mov    0x8(%rax),%rbx
  0x00007f757047a556: je     0x00007f757047a561
  0x00007f757047a55c: jmpq   0x00007f757046ec40
  0x00007f757047a561: cmpq   $0x0,0x58(%rbx)
  0x00007f757047a569: je     0x00007f757047a664
  0x00007f757047a56f: jmpq   0x00007f757046ec40
  0x00007f757047a574: cmpq   $0x0,0x58(%rbx)
  0x00007f757047a57c: je     0x00007f757047a664
  0x00007f757047a582: mov    %rsp,%r13
  0x00007f757047a585: mov    (%rsp),%rax
  0x00007f757047a589: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a58d: pushfq 
  0x00007f757047a58e: sub    $0x8,%rsp
  0x00007f757047a592: mov    %rsp,-0x28(%rsp)
  0x00007f757047a597: sub    $0x80,%rsp
  0x00007f757047a59e: mov    %rax,0x78(%rsp)
  0x00007f757047a5a3: mov    %rcx,0x70(%rsp)
  0x00007f757047a5a8: mov    %rdx,0x68(%rsp)
  0x00007f757047a5ad: mov    %rbx,0x60(%rsp)
  0x00007f757047a5b2: mov    %rbp,0x50(%rsp)
  0x00007f757047a5b7: mov    %rsi,0x48(%rsp)
  0x00007f757047a5bc: mov    %rdi,0x40(%rsp)
  0x00007f757047a5c1: mov    %r8,0x38(%rsp)
  0x00007f757047a5c6: mov    %r9,0x30(%rsp)
  0x00007f757047a5cb: mov    %r10,0x28(%rsp)
  0x00007f757047a5d0: mov    %r11,0x20(%rsp)
  0x00007f757047a5d5: mov    %r12,0x18(%rsp)
  0x00007f757047a5da: mov    %r13,0x10(%rsp)
  0x00007f757047a5df: mov    %r14,0x8(%rsp)
  0x00007f757047a5e4: mov    %r15,(%rsp)
  0x00007f757047a5e8: sub    $0x200,%rsp
  0x00007f757047a5ef: fxsave64 (%rsp)
  0x00007f757047a5f4: mov    %rbx,%rdi
  0x00007f757047a5f7: mov    %rax,%rsi
  0x00007f757047a5fa: callq  0x00007f7585522bca
  0x00007f757047a5ff: fxrstor64 (%rsp)
  0x00007f757047a604: add    $0x200,%rsp
  0x00007f757047a60b: mov    (%rsp),%r15
  0x00007f757047a60f: mov    0x8(%rsp),%r14
  0x00007f757047a614: mov    0x10(%rsp),%r13
  0x00007f757047a619: mov    0x18(%rsp),%r12
  0x00007f757047a61e: mov    0x20(%rsp),%r11
  0x00007f757047a623: mov    0x28(%rsp),%r10
  0x00007f757047a628: mov    0x30(%rsp),%r9
  0x00007f757047a62d: mov    0x38(%rsp),%r8
  0x00007f757047a632: mov    0x40(%rsp),%rdi
  0x00007f757047a637: mov    0x48(%rsp),%rsi
  0x00007f757047a63c: mov    0x50(%rsp),%rbp
  0x00007f757047a641: mov    0x60(%rsp),%rbx
  0x00007f757047a646: mov    0x68(%rsp),%rdx
  0x00007f757047a64b: mov    0x70(%rsp),%rcx
  0x00007f757047a650: mov    0x78(%rsp),%rax
  0x00007f757047a655: add    $0x80,%rsp
  0x00007f757047a65c: add    $0x8,%rsp
  0x00007f757047a660: popfq  
  0x00007f757047a661: mov    %r13,%rsp
  0x00007f757047a664: pop    %rax
  0x00007f757047a665: mov    %rsp,%r13
  0x00007f757047a668: sub    $0x10,%rsp
  0x00007f757047a66c: mov    %rax,(%rsp)
  0x00007f757047a670: mov    %rsi,0x8(%rsp)
  0x00007f757047a675: mov    0x40(%rbx),%rcx
  0x00007f757047a679: jmpq   *%rcx

AHE@0x00007f75800c1ac0: 0xbb000000 i2c: 0x00007f757047a720 c2i: 0x00007f757047a838 c2iUV: 0x00007f757047a80b
i2c argument handler #0 for: receiver ([Ljava/lang/StackTraceElement;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047a838
  0x00007f757047a720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047a724: movabs $0x7f757036e3e0,%r11
  0x00007f757047a72e: cmp    %r11,%rax
  0x00007f757047a731: jbe    0x00007f757047a74a
  0x00007f757047a737: movabs $0x7f757046e3e0,%r11
  0x00007f757047a741: cmp    %r11,%rax
  0x00007f757047a744: jb     0x00007f757047a7e7
  0x00007f757047a74a: movabs $0x7f7570369420,%r11
  0x00007f757047a754: cmp    %r11,%rax
  0x00007f757047a757: jbe    0x00007f757047a770
  0x00007f757047a75d: movabs $0x7f757036de58,%r11
  0x00007f757047a767: cmp    %r11,%rax
  0x00007f757047a76a: jb     0x00007f757047a7e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047a770: mov    %rsp,-0x28(%rsp)
  0x00007f757047a775: sub    $0x80,%rsp
  0x00007f757047a77c: mov    %rax,0x78(%rsp)
  0x00007f757047a781: mov    %rcx,0x70(%rsp)
  0x00007f757047a786: mov    %rdx,0x68(%rsp)
  0x00007f757047a78b: mov    %rbx,0x60(%rsp)
  0x00007f757047a790: mov    %rbp,0x50(%rsp)
  0x00007f757047a795: mov    %rsi,0x48(%rsp)
  0x00007f757047a79a: mov    %rdi,0x40(%rsp)
  0x00007f757047a79f: mov    %r8,0x38(%rsp)
  0x00007f757047a7a4: mov    %r9,0x30(%rsp)
  0x00007f757047a7a9: mov    %r10,0x28(%rsp)
  0x00007f757047a7ae: mov    %r11,0x20(%rsp)
  0x00007f757047a7b3: mov    %r12,0x18(%rsp)
  0x00007f757047a7b8: mov    %r13,0x10(%rsp)
  0x00007f757047a7bd: mov    %r14,0x8(%rsp)
  0x00007f757047a7c2: mov    %r15,(%rsp)
  0x00007f757047a7c6: movabs $0x7f758592f470,%rdi
  0x00007f757047a7d0: movabs $0x7f757047a770,%rsi
  0x00007f757047a7da: mov    %rsp,%rdx
  0x00007f757047a7dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a7e1: callq  0x00007f75853729fa
  0x00007f757047a7e6: hlt    
  ;; } verify_i2ce 
  0x00007f757047a7e7: mov    %rsp,%r11
  0x00007f757047a7ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a7ee: push   %rax
  0x00007f757047a7ef: mov    %r11,%rax
  0x00007f757047a7f2: mov    0x50(%rbx),%r11
  0x00007f757047a7f6: mov    0x10(%rax),%rsi
  0x00007f757047a7fa: mov    0x8(%rax),%rdx
  0x00007f757047a7fe: mov    %rbx,0x258(%r15)
  0x00007f757047a805: mov    %rbx,%rax
  0x00007f757047a808: jmpq   *%r11
  0x00007f757047a80b: mov    0x8(%rsi),%ebx
  0x00007f757047a80e: shl    $0x3,%rbx
  0x00007f757047a812: cmp    0x10(%rax),%rbx
  0x00007f757047a816: mov    0x8(%rax),%rbx
  0x00007f757047a81a: je     0x00007f757047a825
  0x00007f757047a820: jmpq   0x00007f757046ec40
  0x00007f757047a825: cmpq   $0x0,0x58(%rbx)
  0x00007f757047a82d: je     0x00007f757047a928
  0x00007f757047a833: jmpq   0x00007f757046ec40
  0x00007f757047a838: cmpq   $0x0,0x58(%rbx)
  0x00007f757047a840: je     0x00007f757047a928
  0x00007f757047a846: mov    %rsp,%r13
  0x00007f757047a849: mov    (%rsp),%rax
  0x00007f757047a84d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047a851: pushfq 
  0x00007f757047a852: sub    $0x8,%rsp
  0x00007f757047a856: mov    %rsp,-0x28(%rsp)
  0x00007f757047a85b: sub    $0x80,%rsp
  0x00007f757047a862: mov    %rax,0x78(%rsp)
  0x00007f757047a867: mov    %rcx,0x70(%rsp)
  0x00007f757047a86c: mov    %rdx,0x68(%rsp)
  0x00007f757047a871: mov    %rbx,0x60(%rsp)
  0x00007f757047a876: mov    %rbp,0x50(%rsp)
  0x00007f757047a87b: mov    %rsi,0x48(%rsp)
  0x00007f757047a880: mov    %rdi,0x40(%rsp)
  0x00007f757047a885: mov    %r8,0x38(%rsp)
  0x00007f757047a88a: mov    %r9,0x30(%rsp)
  0x00007f757047a88f: mov    %r10,0x28(%rsp)
  0x00007f757047a894: mov    %r11,0x20(%rsp)
  0x00007f757047a899: mov    %r12,0x18(%rsp)
  0x00007f757047a89e: mov    %r13,0x10(%rsp)
  0x00007f757047a8a3: mov    %r14,0x8(%rsp)
  0x00007f757047a8a8: mov    %r15,(%rsp)
  0x00007f757047a8ac: sub    $0x200,%rsp
  0x00007f757047a8b3: fxsave64 (%rsp)
  0x00007f757047a8b8: mov    %rbx,%rdi
  0x00007f757047a8bb: mov    %rax,%rsi
  0x00007f757047a8be: callq  0x00007f7585522bca
  0x00007f757047a8c3: fxrstor64 (%rsp)
  0x00007f757047a8c8: add    $0x200,%rsp
  0x00007f757047a8cf: mov    (%rsp),%r15
  0x00007f757047a8d3: mov    0x8(%rsp),%r14
  0x00007f757047a8d8: mov    0x10(%rsp),%r13
  0x00007f757047a8dd: mov    0x18(%rsp),%r12
  0x00007f757047a8e2: mov    0x20(%rsp),%r11
  0x00007f757047a8e7: mov    0x28(%rsp),%r10
  0x00007f757047a8ec: mov    0x30(%rsp),%r9
  0x00007f757047a8f1: mov    0x38(%rsp),%r8
  0x00007f757047a8f6: mov    0x40(%rsp),%rdi
  0x00007f757047a8fb: mov    0x48(%rsp),%rsi
  0x00007f757047a900: mov    0x50(%rsp),%rbp
  0x00007f757047a905: mov    0x60(%rsp),%rbx
  0x00007f757047a90a: mov    0x68(%rsp),%rdx
  0x00007f757047a90f: mov    0x70(%rsp),%rcx
  0x00007f757047a914: mov    0x78(%rsp),%rax
  0x00007f757047a919: add    $0x80,%rsp
  0x00007f757047a920: add    $0x8,%rsp
  0x00007f757047a924: popfq  
  0x00007f757047a925: mov    %r13,%rsp
  0x00007f757047a928: pop    %rax
  0x00007f757047a929: mov    %rsp,%r13
  0x00007f757047a92c: sub    $0x20,%rsp
  0x00007f757047a930: mov    %rax,(%rsp)
  0x00007f757047a934: mov    %rsi,0x10(%rsp)
  0x00007f757047a939: mov    %rdx,0x8(%rsp)
  0x00007f757047a93e: mov    0x40(%rbx),%rcx
  0x00007f757047a942: jmpq   *%rcx

AHE@0x00007f75800c1b08: 0xb0000000 i2c: 0x00007f757047aa20 c2i: 0x00007f757047ab34 c2iUV: 0x00007f757047ab07
i2c argument handler #0 for: receiver ()[Ljava/lang/StackTraceElement; (539 bytes generated)
c2i argument handler starts at 0x7f757047ab34
  0x00007f757047aa20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047aa24: movabs $0x7f757036e3e0,%r11
  0x00007f757047aa2e: cmp    %r11,%rax
  0x00007f757047aa31: jbe    0x00007f757047aa4a
  0x00007f757047aa37: movabs $0x7f757046e3e0,%r11
  0x00007f757047aa41: cmp    %r11,%rax
  0x00007f757047aa44: jb     0x00007f757047aae7
  0x00007f757047aa4a: movabs $0x7f7570369420,%r11
  0x00007f757047aa54: cmp    %r11,%rax
  0x00007f757047aa57: jbe    0x00007f757047aa70
  0x00007f757047aa5d: movabs $0x7f757036de58,%r11
  0x00007f757047aa67: cmp    %r11,%rax
  0x00007f757047aa6a: jb     0x00007f757047aae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047aa70: mov    %rsp,-0x28(%rsp)
  0x00007f757047aa75: sub    $0x80,%rsp
  0x00007f757047aa7c: mov    %rax,0x78(%rsp)
  0x00007f757047aa81: mov    %rcx,0x70(%rsp)
  0x00007f757047aa86: mov    %rdx,0x68(%rsp)
  0x00007f757047aa8b: mov    %rbx,0x60(%rsp)
  0x00007f757047aa90: mov    %rbp,0x50(%rsp)
  0x00007f757047aa95: mov    %rsi,0x48(%rsp)
  0x00007f757047aa9a: mov    %rdi,0x40(%rsp)
  0x00007f757047aa9f: mov    %r8,0x38(%rsp)
  0x00007f757047aaa4: mov    %r9,0x30(%rsp)
  0x00007f757047aaa9: mov    %r10,0x28(%rsp)
  0x00007f757047aaae: mov    %r11,0x20(%rsp)
  0x00007f757047aab3: mov    %r12,0x18(%rsp)
  0x00007f757047aab8: mov    %r13,0x10(%rsp)
  0x00007f757047aabd: mov    %r14,0x8(%rsp)
  0x00007f757047aac2: mov    %r15,(%rsp)
  0x00007f757047aac6: movabs $0x7f758592f470,%rdi
  0x00007f757047aad0: movabs $0x7f757047aa70,%rsi
  0x00007f757047aada: mov    %rsp,%rdx
  0x00007f757047aadd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047aae1: callq  0x00007f75853729fa
  0x00007f757047aae6: hlt    
  ;; } verify_i2ce 
  0x00007f757047aae7: mov    %rsp,%r11
  0x00007f757047aaea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047aaee: push   %rax
  0x00007f757047aaef: mov    %r11,%rax
  0x00007f757047aaf2: mov    0x50(%rbx),%r11
  0x00007f757047aaf6: mov    0x8(%rax),%rsi
  0x00007f757047aafa: mov    %rbx,0x258(%r15)
  0x00007f757047ab01: mov    %rbx,%rax
  0x00007f757047ab04: jmpq   *%r11
  0x00007f757047ab07: mov    0x8(%rsi),%ebx
  0x00007f757047ab0a: shl    $0x3,%rbx
  0x00007f757047ab0e: cmp    0x10(%rax),%rbx
  0x00007f757047ab12: mov    0x8(%rax),%rbx
  0x00007f757047ab16: je     0x00007f757047ab21
  0x00007f757047ab1c: jmpq   0x00007f757046ec40
  0x00007f757047ab21: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ab29: je     0x00007f757047ac24
  0x00007f757047ab2f: jmpq   0x00007f757046ec40
  0x00007f757047ab34: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ab3c: je     0x00007f757047ac24
  0x00007f757047ab42: mov    %rsp,%r13
  0x00007f757047ab45: mov    (%rsp),%rax
  0x00007f757047ab49: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ab4d: pushfq 
  0x00007f757047ab4e: sub    $0x8,%rsp
  0x00007f757047ab52: mov    %rsp,-0x28(%rsp)
  0x00007f757047ab57: sub    $0x80,%rsp
  0x00007f757047ab5e: mov    %rax,0x78(%rsp)
  0x00007f757047ab63: mov    %rcx,0x70(%rsp)
  0x00007f757047ab68: mov    %rdx,0x68(%rsp)
  0x00007f757047ab6d: mov    %rbx,0x60(%rsp)
  0x00007f757047ab72: mov    %rbp,0x50(%rsp)
  0x00007f757047ab77: mov    %rsi,0x48(%rsp)
  0x00007f757047ab7c: mov    %rdi,0x40(%rsp)
  0x00007f757047ab81: mov    %r8,0x38(%rsp)
  0x00007f757047ab86: mov    %r9,0x30(%rsp)
  0x00007f757047ab8b: mov    %r10,0x28(%rsp)
  0x00007f757047ab90: mov    %r11,0x20(%rsp)
  0x00007f757047ab95: mov    %r12,0x18(%rsp)
  0x00007f757047ab9a: mov    %r13,0x10(%rsp)
  0x00007f757047ab9f: mov    %r14,0x8(%rsp)
  0x00007f757047aba4: mov    %r15,(%rsp)
  0x00007f757047aba8: sub    $0x200,%rsp
  0x00007f757047abaf: fxsave64 (%rsp)
  0x00007f757047abb4: mov    %rbx,%rdi
  0x00007f757047abb7: mov    %rax,%rsi
  0x00007f757047abba: callq  0x00007f7585522bca
  0x00007f757047abbf: fxrstor64 (%rsp)
  0x00007f757047abc4: add    $0x200,%rsp
  0x00007f757047abcb: mov    (%rsp),%r15
  0x00007f757047abcf: mov    0x8(%rsp),%r14
  0x00007f757047abd4: mov    0x10(%rsp),%r13
  0x00007f757047abd9: mov    0x18(%rsp),%r12
  0x00007f757047abde: mov    0x20(%rsp),%r11
  0x00007f757047abe3: mov    0x28(%rsp),%r10
  0x00007f757047abe8: mov    0x30(%rsp),%r9
  0x00007f757047abed: mov    0x38(%rsp),%r8
  0x00007f757047abf2: mov    0x40(%rsp),%rdi
  0x00007f757047abf7: mov    0x48(%rsp),%rsi
  0x00007f757047abfc: mov    0x50(%rsp),%rbp
  0x00007f757047ac01: mov    0x60(%rsp),%rbx
  0x00007f757047ac06: mov    0x68(%rsp),%rdx
  0x00007f757047ac0b: mov    0x70(%rsp),%rcx
  0x00007f757047ac10: mov    0x78(%rsp),%rax
  0x00007f757047ac15: add    $0x80,%rsp
  0x00007f757047ac1c: add    $0x8,%rsp
  0x00007f757047ac20: popfq  
  0x00007f757047ac21: mov    %r13,%rsp
  0x00007f757047ac24: pop    %rax
  0x00007f757047ac25: mov    %rsp,%r13
  0x00007f757047ac28: sub    $0x10,%rsp
  0x00007f757047ac2c: mov    %rax,(%rsp)
  0x00007f757047ac30: mov    %rsi,0x8(%rsp)
  0x00007f757047ac35: mov    0x40(%rbx),%rcx
  0x00007f757047ac39: jmpq   *%rcx

AHE@0x00007f75800c1b50: 0xb0000000 i2c: 0x00007f757047ace0 c2i: 0x00007f757047adf4 c2iUV: 0x00007f757047adc7
i2c argument handler #0 for: receiver ()[Ljava/lang/StackTraceElement; (539 bytes generated)
c2i argument handler starts at 0x7f757047adf4
  0x00007f757047ace0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047ace4: movabs $0x7f757036e3e0,%r11
  0x00007f757047acee: cmp    %r11,%rax
  0x00007f757047acf1: jbe    0x00007f757047ad0a
  0x00007f757047acf7: movabs $0x7f757046e3e0,%r11
  0x00007f757047ad01: cmp    %r11,%rax
  0x00007f757047ad04: jb     0x00007f757047ada7
  0x00007f757047ad0a: movabs $0x7f7570369420,%r11
  0x00007f757047ad14: cmp    %r11,%rax
  0x00007f757047ad17: jbe    0x00007f757047ad30
  0x00007f757047ad1d: movabs $0x7f757036de58,%r11
  0x00007f757047ad27: cmp    %r11,%rax
  0x00007f757047ad2a: jb     0x00007f757047ada7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047ad30: mov    %rsp,-0x28(%rsp)
  0x00007f757047ad35: sub    $0x80,%rsp
  0x00007f757047ad3c: mov    %rax,0x78(%rsp)
  0x00007f757047ad41: mov    %rcx,0x70(%rsp)
  0x00007f757047ad46: mov    %rdx,0x68(%rsp)
  0x00007f757047ad4b: mov    %rbx,0x60(%rsp)
  0x00007f757047ad50: mov    %rbp,0x50(%rsp)
  0x00007f757047ad55: mov    %rsi,0x48(%rsp)
  0x00007f757047ad5a: mov    %rdi,0x40(%rsp)
  0x00007f757047ad5f: mov    %r8,0x38(%rsp)
  0x00007f757047ad64: mov    %r9,0x30(%rsp)
  0x00007f757047ad69: mov    %r10,0x28(%rsp)
  0x00007f757047ad6e: mov    %r11,0x20(%rsp)
  0x00007f757047ad73: mov    %r12,0x18(%rsp)
  0x00007f757047ad78: mov    %r13,0x10(%rsp)
  0x00007f757047ad7d: mov    %r14,0x8(%rsp)
  0x00007f757047ad82: mov    %r15,(%rsp)
  0x00007f757047ad86: movabs $0x7f758592f470,%rdi
  0x00007f757047ad90: movabs $0x7f757047ad30,%rsi
  0x00007f757047ad9a: mov    %rsp,%rdx
  0x00007f757047ad9d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ada1: callq  0x00007f75853729fa
  0x00007f757047ada6: hlt    
  ;; } verify_i2ce 
  0x00007f757047ada7: mov    %rsp,%r11
  0x00007f757047adaa: and    $0xfffffffffffffff0,%rsp
  0x00007f757047adae: push   %rax
  0x00007f757047adaf: mov    %r11,%rax
  0x00007f757047adb2: mov    0x50(%rbx),%r11
  0x00007f757047adb6: mov    0x8(%rax),%rsi
  0x00007f757047adba: mov    %rbx,0x258(%r15)
  0x00007f757047adc1: mov    %rbx,%rax
  0x00007f757047adc4: jmpq   *%r11
  0x00007f757047adc7: mov    0x8(%rsi),%ebx
  0x00007f757047adca: shl    $0x3,%rbx
  0x00007f757047adce: cmp    0x10(%rax),%rbx
  0x00007f757047add2: mov    0x8(%rax),%rbx
  0x00007f757047add6: je     0x00007f757047ade1
  0x00007f757047addc: jmpq   0x00007f757046ec40
  0x00007f757047ade1: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ade9: je     0x00007f757047aee4
  0x00007f757047adef: jmpq   0x00007f757046ec40
  0x00007f757047adf4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047adfc: je     0x00007f757047aee4
  0x00007f757047ae02: mov    %rsp,%r13
  0x00007f757047ae05: mov    (%rsp),%rax
  0x00007f757047ae09: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ae0d: pushfq 
  0x00007f757047ae0e: sub    $0x8,%rsp
  0x00007f757047ae12: mov    %rsp,-0x28(%rsp)
  0x00007f757047ae17: sub    $0x80,%rsp
  0x00007f757047ae1e: mov    %rax,0x78(%rsp)
  0x00007f757047ae23: mov    %rcx,0x70(%rsp)
  0x00007f757047ae28: mov    %rdx,0x68(%rsp)
  0x00007f757047ae2d: mov    %rbx,0x60(%rsp)
  0x00007f757047ae32: mov    %rbp,0x50(%rsp)
  0x00007f757047ae37: mov    %rsi,0x48(%rsp)
  0x00007f757047ae3c: mov    %rdi,0x40(%rsp)
  0x00007f757047ae41: mov    %r8,0x38(%rsp)
  0x00007f757047ae46: mov    %r9,0x30(%rsp)
  0x00007f757047ae4b: mov    %r10,0x28(%rsp)
  0x00007f757047ae50: mov    %r11,0x20(%rsp)
  0x00007f757047ae55: mov    %r12,0x18(%rsp)
  0x00007f757047ae5a: mov    %r13,0x10(%rsp)
  0x00007f757047ae5f: mov    %r14,0x8(%rsp)
  0x00007f757047ae64: mov    %r15,(%rsp)
  0x00007f757047ae68: sub    $0x200,%rsp
  0x00007f757047ae6f: fxsave64 (%rsp)
  0x00007f757047ae74: mov    %rbx,%rdi
  0x00007f757047ae77: mov    %rax,%rsi
  0x00007f757047ae7a: callq  0x00007f7585522bca
  0x00007f757047ae7f: fxrstor64 (%rsp)
  0x00007f757047ae84: add    $0x200,%rsp
  0x00007f757047ae8b: mov    (%rsp),%r15
  0x00007f757047ae8f: mov    0x8(%rsp),%r14
  0x00007f757047ae94: mov    0x10(%rsp),%r13
  0x00007f757047ae99: mov    0x18(%rsp),%r12
  0x00007f757047ae9e: mov    0x20(%rsp),%r11
  0x00007f757047aea3: mov    0x28(%rsp),%r10
  0x00007f757047aea8: mov    0x30(%rsp),%r9
  0x00007f757047aead: mov    0x38(%rsp),%r8
  0x00007f757047aeb2: mov    0x40(%rsp),%rdi
  0x00007f757047aeb7: mov    0x48(%rsp),%rsi
  0x00007f757047aebc: mov    0x50(%rsp),%rbp
  0x00007f757047aec1: mov    0x60(%rsp),%rbx
  0x00007f757047aec6: mov    0x68(%rsp),%rdx
  0x00007f757047aecb: mov    0x70(%rsp),%rcx
  0x00007f757047aed0: mov    0x78(%rsp),%rax
  0x00007f757047aed5: add    $0x80,%rsp
  0x00007f757047aedc: add    $0x8,%rsp
  0x00007f757047aee0: popfq  
  0x00007f757047aee1: mov    %r13,%rsp
  0x00007f757047aee4: pop    %rax
  0x00007f757047aee5: mov    %rsp,%r13
  0x00007f757047aee8: sub    $0x10,%rsp
  0x00007f757047aeec: mov    %rax,(%rsp)
  0x00007f757047aef0: mov    %rsi,0x8(%rsp)
  0x00007f757047aef5: mov    0x40(%rbx),%rcx
  0x00007f757047aef9: jmpq   *%rcx

AHE@0x00007f75800c1b98: 0xbbbbbb00 i2c: 0x00007f757047afa0 c2i: 0x00007f757047b0c8 c2iUV: 0x00007f757047b09b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V (584 bytes generated)
c2i argument handler starts at 0x7f757047b0c8
  0x00007f757047afa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047afa4: movabs $0x7f757036e3e0,%r11
  0x00007f757047afae: cmp    %r11,%rax
  0x00007f757047afb1: jbe    0x00007f757047afca
  0x00007f757047afb7: movabs $0x7f757046e3e0,%r11
  0x00007f757047afc1: cmp    %r11,%rax
  0x00007f757047afc4: jb     0x00007f757047b067
  0x00007f757047afca: movabs $0x7f7570369420,%r11
  0x00007f757047afd4: cmp    %r11,%rax
  0x00007f757047afd7: jbe    0x00007f757047aff0
  0x00007f757047afdd: movabs $0x7f757036de58,%r11
  0x00007f757047afe7: cmp    %r11,%rax
  0x00007f757047afea: jb     0x00007f757047b067
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047aff0: mov    %rsp,-0x28(%rsp)
  0x00007f757047aff5: sub    $0x80,%rsp
  0x00007f757047affc: mov    %rax,0x78(%rsp)
  0x00007f757047b001: mov    %rcx,0x70(%rsp)
  0x00007f757047b006: mov    %rdx,0x68(%rsp)
  0x00007f757047b00b: mov    %rbx,0x60(%rsp)
  0x00007f757047b010: mov    %rbp,0x50(%rsp)
  0x00007f757047b015: mov    %rsi,0x48(%rsp)
  0x00007f757047b01a: mov    %rdi,0x40(%rsp)
  0x00007f757047b01f: mov    %r8,0x38(%rsp)
  0x00007f757047b024: mov    %r9,0x30(%rsp)
  0x00007f757047b029: mov    %r10,0x28(%rsp)
  0x00007f757047b02e: mov    %r11,0x20(%rsp)
  0x00007f757047b033: mov    %r12,0x18(%rsp)
  0x00007f757047b038: mov    %r13,0x10(%rsp)
  0x00007f757047b03d: mov    %r14,0x8(%rsp)
  0x00007f757047b042: mov    %r15,(%rsp)
  0x00007f757047b046: movabs $0x7f758592f470,%rdi
  0x00007f757047b050: movabs $0x7f757047aff0,%rsi
  0x00007f757047b05a: mov    %rsp,%rdx
  0x00007f757047b05d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b061: callq  0x00007f75853729fa
  0x00007f757047b066: hlt    
  ;; } verify_i2ce 
  0x00007f757047b067: mov    %rsp,%r11
  0x00007f757047b06a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b06e: push   %rax
  0x00007f757047b06f: mov    %r11,%rax
  0x00007f757047b072: mov    0x50(%rbx),%r11
  0x00007f757047b076: mov    0x30(%rax),%rsi
  0x00007f757047b07a: mov    0x28(%rax),%rdx
  0x00007f757047b07e: mov    0x20(%rax),%rcx
  0x00007f757047b082: mov    0x18(%rax),%r8
  0x00007f757047b086: mov    0x10(%rax),%r9
  0x00007f757047b08a: mov    0x8(%rax),%rdi
  0x00007f757047b08e: mov    %rbx,0x258(%r15)
  0x00007f757047b095: mov    %rbx,%rax
  0x00007f757047b098: jmpq   *%r11
  0x00007f757047b09b: mov    0x8(%rsi),%ebx
  0x00007f757047b09e: shl    $0x3,%rbx
  0x00007f757047b0a2: cmp    0x10(%rax),%rbx
  0x00007f757047b0a6: mov    0x8(%rax),%rbx
  0x00007f757047b0aa: je     0x00007f757047b0b5
  0x00007f757047b0b0: jmpq   0x00007f757046ec40
  0x00007f757047b0b5: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b0bd: je     0x00007f757047b1b8
  0x00007f757047b0c3: jmpq   0x00007f757046ec40
  0x00007f757047b0c8: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b0d0: je     0x00007f757047b1b8
  0x00007f757047b0d6: mov    %rsp,%r13
  0x00007f757047b0d9: mov    (%rsp),%rax
  0x00007f757047b0dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b0e1: pushfq 
  0x00007f757047b0e2: sub    $0x8,%rsp
  0x00007f757047b0e6: mov    %rsp,-0x28(%rsp)
  0x00007f757047b0eb: sub    $0x80,%rsp
  0x00007f757047b0f2: mov    %rax,0x78(%rsp)
  0x00007f757047b0f7: mov    %rcx,0x70(%rsp)
  0x00007f757047b0fc: mov    %rdx,0x68(%rsp)
  0x00007f757047b101: mov    %rbx,0x60(%rsp)
  0x00007f757047b106: mov    %rbp,0x50(%rsp)
  0x00007f757047b10b: mov    %rsi,0x48(%rsp)
  0x00007f757047b110: mov    %rdi,0x40(%rsp)
  0x00007f757047b115: mov    %r8,0x38(%rsp)
  0x00007f757047b11a: mov    %r9,0x30(%rsp)
  0x00007f757047b11f: mov    %r10,0x28(%rsp)
  0x00007f757047b124: mov    %r11,0x20(%rsp)
  0x00007f757047b129: mov    %r12,0x18(%rsp)
  0x00007f757047b12e: mov    %r13,0x10(%rsp)
  0x00007f757047b133: mov    %r14,0x8(%rsp)
  0x00007f757047b138: mov    %r15,(%rsp)
  0x00007f757047b13c: sub    $0x200,%rsp
  0x00007f757047b143: fxsave64 (%rsp)
  0x00007f757047b148: mov    %rbx,%rdi
  0x00007f757047b14b: mov    %rax,%rsi
  0x00007f757047b14e: callq  0x00007f7585522bca
  0x00007f757047b153: fxrstor64 (%rsp)
  0x00007f757047b158: add    $0x200,%rsp
  0x00007f757047b15f: mov    (%rsp),%r15
  0x00007f757047b163: mov    0x8(%rsp),%r14
  0x00007f757047b168: mov    0x10(%rsp),%r13
  0x00007f757047b16d: mov    0x18(%rsp),%r12
  0x00007f757047b172: mov    0x20(%rsp),%r11
  0x00007f757047b177: mov    0x28(%rsp),%r10
  0x00007f757047b17c: mov    0x30(%rsp),%r9
  0x00007f757047b181: mov    0x38(%rsp),%r8
  0x00007f757047b186: mov    0x40(%rsp),%rdi
  0x00007f757047b18b: mov    0x48(%rsp),%rsi
  0x00007f757047b190: mov    0x50(%rsp),%rbp
  0x00007f757047b195: mov    0x60(%rsp),%rbx
  0x00007f757047b19a: mov    0x68(%rsp),%rdx
  0x00007f757047b19f: mov    0x70(%rsp),%rcx
  0x00007f757047b1a4: mov    0x78(%rsp),%rax
  0x00007f757047b1a9: add    $0x80,%rsp
  0x00007f757047b1b0: add    $0x8,%rsp
  0x00007f757047b1b4: popfq  
  0x00007f757047b1b5: mov    %r13,%rsp
  0x00007f757047b1b8: pop    %rax
  0x00007f757047b1b9: mov    %rsp,%r13
  0x00007f757047b1bc: sub    $0x40,%rsp
  0x00007f757047b1c0: mov    %rax,(%rsp)
  0x00007f757047b1c4: mov    %rsi,0x30(%rsp)
  0x00007f757047b1c9: mov    %rdx,0x28(%rsp)
  0x00007f757047b1ce: mov    %rcx,0x20(%rsp)
  0x00007f757047b1d3: mov    %r8,0x18(%rsp)
  0x00007f757047b1d8: mov    %r9,0x10(%rsp)
  0x00007f757047b1dd: mov    %rdi,0x8(%rsp)
  0x00007f757047b1e2: mov    0x40(%rbx),%rcx
  0x00007f757047b1e6: jmpq   *%rcx

AHE@0x00007f75800c1be0: 0xb0000000 i2c: 0x00007f757047b2a0 c2i: 0x00007f757047b3b4 c2iUV: 0x00007f757047b387
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f757047b3b4
  0x00007f757047b2a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047b2a4: movabs $0x7f757036e3e0,%r11
  0x00007f757047b2ae: cmp    %r11,%rax
  0x00007f757047b2b1: jbe    0x00007f757047b2ca
  0x00007f757047b2b7: movabs $0x7f757046e3e0,%r11
  0x00007f757047b2c1: cmp    %r11,%rax
  0x00007f757047b2c4: jb     0x00007f757047b367
  0x00007f757047b2ca: movabs $0x7f7570369420,%r11
  0x00007f757047b2d4: cmp    %r11,%rax
  0x00007f757047b2d7: jbe    0x00007f757047b2f0
  0x00007f757047b2dd: movabs $0x7f757036de58,%r11
  0x00007f757047b2e7: cmp    %r11,%rax
  0x00007f757047b2ea: jb     0x00007f757047b367
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047b2f0: mov    %rsp,-0x28(%rsp)
  0x00007f757047b2f5: sub    $0x80,%rsp
  0x00007f757047b2fc: mov    %rax,0x78(%rsp)
  0x00007f757047b301: mov    %rcx,0x70(%rsp)
  0x00007f757047b306: mov    %rdx,0x68(%rsp)
  0x00007f757047b30b: mov    %rbx,0x60(%rsp)
  0x00007f757047b310: mov    %rbp,0x50(%rsp)
  0x00007f757047b315: mov    %rsi,0x48(%rsp)
  0x00007f757047b31a: mov    %rdi,0x40(%rsp)
  0x00007f757047b31f: mov    %r8,0x38(%rsp)
  0x00007f757047b324: mov    %r9,0x30(%rsp)
  0x00007f757047b329: mov    %r10,0x28(%rsp)
  0x00007f757047b32e: mov    %r11,0x20(%rsp)
  0x00007f757047b333: mov    %r12,0x18(%rsp)
  0x00007f757047b338: mov    %r13,0x10(%rsp)
  0x00007f757047b33d: mov    %r14,0x8(%rsp)
  0x00007f757047b342: mov    %r15,(%rsp)
  0x00007f757047b346: movabs $0x7f758592f470,%rdi
  0x00007f757047b350: movabs $0x7f757047b2f0,%rsi
  0x00007f757047b35a: mov    %rsp,%rdx
  0x00007f757047b35d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b361: callq  0x00007f75853729fa
  0x00007f757047b366: hlt    
  ;; } verify_i2ce 
  0x00007f757047b367: mov    %rsp,%r11
  0x00007f757047b36a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b36e: push   %rax
  0x00007f757047b36f: mov    %r11,%rax
  0x00007f757047b372: mov    0x50(%rbx),%r11
  0x00007f757047b376: mov    0x8(%rax),%rsi
  0x00007f757047b37a: mov    %rbx,0x258(%r15)
  0x00007f757047b381: mov    %rbx,%rax
  0x00007f757047b384: jmpq   *%r11
  0x00007f757047b387: mov    0x8(%rsi),%ebx
  0x00007f757047b38a: shl    $0x3,%rbx
  0x00007f757047b38e: cmp    0x10(%rax),%rbx
  0x00007f757047b392: mov    0x8(%rax),%rbx
  0x00007f757047b396: je     0x00007f757047b3a1
  0x00007f757047b39c: jmpq   0x00007f757046ec40
  0x00007f757047b3a1: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b3a9: je     0x00007f757047b4a4
  0x00007f757047b3af: jmpq   0x00007f757046ec40
  0x00007f757047b3b4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b3bc: je     0x00007f757047b4a4
  0x00007f757047b3c2: mov    %rsp,%r13
  0x00007f757047b3c5: mov    (%rsp),%rax
  0x00007f757047b3c9: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b3cd: pushfq 
  0x00007f757047b3ce: sub    $0x8,%rsp
  0x00007f757047b3d2: mov    %rsp,-0x28(%rsp)
  0x00007f757047b3d7: sub    $0x80,%rsp
  0x00007f757047b3de: mov    %rax,0x78(%rsp)
  0x00007f757047b3e3: mov    %rcx,0x70(%rsp)
  0x00007f757047b3e8: mov    %rdx,0x68(%rsp)
  0x00007f757047b3ed: mov    %rbx,0x60(%rsp)
  0x00007f757047b3f2: mov    %rbp,0x50(%rsp)
  0x00007f757047b3f7: mov    %rsi,0x48(%rsp)
  0x00007f757047b3fc: mov    %rdi,0x40(%rsp)
  0x00007f757047b401: mov    %r8,0x38(%rsp)
  0x00007f757047b406: mov    %r9,0x30(%rsp)
  0x00007f757047b40b: mov    %r10,0x28(%rsp)
  0x00007f757047b410: mov    %r11,0x20(%rsp)
  0x00007f757047b415: mov    %r12,0x18(%rsp)
  0x00007f757047b41a: mov    %r13,0x10(%rsp)
  0x00007f757047b41f: mov    %r14,0x8(%rsp)
  0x00007f757047b424: mov    %r15,(%rsp)
  0x00007f757047b428: sub    $0x200,%rsp
  0x00007f757047b42f: fxsave64 (%rsp)
  0x00007f757047b434: mov    %rbx,%rdi
  0x00007f757047b437: mov    %rax,%rsi
  0x00007f757047b43a: callq  0x00007f7585522bca
  0x00007f757047b43f: fxrstor64 (%rsp)
  0x00007f757047b444: add    $0x200,%rsp
  0x00007f757047b44b: mov    (%rsp),%r15
  0x00007f757047b44f: mov    0x8(%rsp),%r14
  0x00007f757047b454: mov    0x10(%rsp),%r13
  0x00007f757047b459: mov    0x18(%rsp),%r12
  0x00007f757047b45e: mov    0x20(%rsp),%r11
  0x00007f757047b463: mov    0x28(%rsp),%r10
  0x00007f757047b468: mov    0x30(%rsp),%r9
  0x00007f757047b46d: mov    0x38(%rsp),%r8
  0x00007f757047b472: mov    0x40(%rsp),%rdi
  0x00007f757047b477: mov    0x48(%rsp),%rsi
  0x00007f757047b47c: mov    0x50(%rsp),%rbp
  0x00007f757047b481: mov    0x60(%rsp),%rbx
  0x00007f757047b486: mov    0x68(%rsp),%rdx
  0x00007f757047b48b: mov    0x70(%rsp),%rcx
  0x00007f757047b490: mov    0x78(%rsp),%rax
  0x00007f757047b495: add    $0x80,%rsp
  0x00007f757047b49c: add    $0x8,%rsp
  0x00007f757047b4a0: popfq  
  0x00007f757047b4a1: mov    %r13,%rsp
  0x00007f757047b4a4: pop    %rax
  0x00007f757047b4a5: mov    %rsp,%r13
  0x00007f757047b4a8: sub    $0x10,%rsp
  0x00007f757047b4ac: mov    %rax,(%rsp)
  0x00007f757047b4b0: mov    %rsi,0x8(%rsp)
  0x00007f757047b4b5: mov    0x40(%rbx),%rcx
  0x00007f757047b4b9: jmpq   *%rcx

AHE@0x00007f75800c1c28: 0xb0000000 i2c: 0x00007f757047b560 c2i: 0x00007f757047b674 c2iUV: 0x00007f757047b647
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f757047b674
  0x00007f757047b560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047b564: movabs $0x7f757036e3e0,%r11
  0x00007f757047b56e: cmp    %r11,%rax
  0x00007f757047b571: jbe    0x00007f757047b58a
  0x00007f757047b577: movabs $0x7f757046e3e0,%r11
  0x00007f757047b581: cmp    %r11,%rax
  0x00007f757047b584: jb     0x00007f757047b627
  0x00007f757047b58a: movabs $0x7f7570369420,%r11
  0x00007f757047b594: cmp    %r11,%rax
  0x00007f757047b597: jbe    0x00007f757047b5b0
  0x00007f757047b59d: movabs $0x7f757036de58,%r11
  0x00007f757047b5a7: cmp    %r11,%rax
  0x00007f757047b5aa: jb     0x00007f757047b627
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047b5b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047b5b5: sub    $0x80,%rsp
  0x00007f757047b5bc: mov    %rax,0x78(%rsp)
  0x00007f757047b5c1: mov    %rcx,0x70(%rsp)
  0x00007f757047b5c6: mov    %rdx,0x68(%rsp)
  0x00007f757047b5cb: mov    %rbx,0x60(%rsp)
  0x00007f757047b5d0: mov    %rbp,0x50(%rsp)
  0x00007f757047b5d5: mov    %rsi,0x48(%rsp)
  0x00007f757047b5da: mov    %rdi,0x40(%rsp)
  0x00007f757047b5df: mov    %r8,0x38(%rsp)
  0x00007f757047b5e4: mov    %r9,0x30(%rsp)
  0x00007f757047b5e9: mov    %r10,0x28(%rsp)
  0x00007f757047b5ee: mov    %r11,0x20(%rsp)
  0x00007f757047b5f3: mov    %r12,0x18(%rsp)
  0x00007f757047b5f8: mov    %r13,0x10(%rsp)
  0x00007f757047b5fd: mov    %r14,0x8(%rsp)
  0x00007f757047b602: mov    %r15,(%rsp)
  0x00007f757047b606: movabs $0x7f758592f470,%rdi
  0x00007f757047b610: movabs $0x7f757047b5b0,%rsi
  0x00007f757047b61a: mov    %rsp,%rdx
  0x00007f757047b61d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b621: callq  0x00007f75853729fa
  0x00007f757047b626: hlt    
  ;; } verify_i2ce 
  0x00007f757047b627: mov    %rsp,%r11
  0x00007f757047b62a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b62e: push   %rax
  0x00007f757047b62f: mov    %r11,%rax
  0x00007f757047b632: mov    0x50(%rbx),%r11
  0x00007f757047b636: mov    0x8(%rax),%rsi
  0x00007f757047b63a: mov    %rbx,0x258(%r15)
  0x00007f757047b641: mov    %rbx,%rax
  0x00007f757047b644: jmpq   *%r11
  0x00007f757047b647: mov    0x8(%rsi),%ebx
  0x00007f757047b64a: shl    $0x3,%rbx
  0x00007f757047b64e: cmp    0x10(%rax),%rbx
  0x00007f757047b652: mov    0x8(%rax),%rbx
  0x00007f757047b656: je     0x00007f757047b661
  0x00007f757047b65c: jmpq   0x00007f757046ec40
  0x00007f757047b661: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b669: je     0x00007f757047b764
  0x00007f757047b66f: jmpq   0x00007f757046ec40
  0x00007f757047b674: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b67c: je     0x00007f757047b764
  0x00007f757047b682: mov    %rsp,%r13
  0x00007f757047b685: mov    (%rsp),%rax
  0x00007f757047b689: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b68d: pushfq 
  0x00007f757047b68e: sub    $0x8,%rsp
  0x00007f757047b692: mov    %rsp,-0x28(%rsp)
  0x00007f757047b697: sub    $0x80,%rsp
  0x00007f757047b69e: mov    %rax,0x78(%rsp)
  0x00007f757047b6a3: mov    %rcx,0x70(%rsp)
  0x00007f757047b6a8: mov    %rdx,0x68(%rsp)
  0x00007f757047b6ad: mov    %rbx,0x60(%rsp)
  0x00007f757047b6b2: mov    %rbp,0x50(%rsp)
  0x00007f757047b6b7: mov    %rsi,0x48(%rsp)
  0x00007f757047b6bc: mov    %rdi,0x40(%rsp)
  0x00007f757047b6c1: mov    %r8,0x38(%rsp)
  0x00007f757047b6c6: mov    %r9,0x30(%rsp)
  0x00007f757047b6cb: mov    %r10,0x28(%rsp)
  0x00007f757047b6d0: mov    %r11,0x20(%rsp)
  0x00007f757047b6d5: mov    %r12,0x18(%rsp)
  0x00007f757047b6da: mov    %r13,0x10(%rsp)
  0x00007f757047b6df: mov    %r14,0x8(%rsp)
  0x00007f757047b6e4: mov    %r15,(%rsp)
  0x00007f757047b6e8: sub    $0x200,%rsp
  0x00007f757047b6ef: fxsave64 (%rsp)
  0x00007f757047b6f4: mov    %rbx,%rdi
  0x00007f757047b6f7: mov    %rax,%rsi
  0x00007f757047b6fa: callq  0x00007f7585522bca
  0x00007f757047b6ff: fxrstor64 (%rsp)
  0x00007f757047b704: add    $0x200,%rsp
  0x00007f757047b70b: mov    (%rsp),%r15
  0x00007f757047b70f: mov    0x8(%rsp),%r14
  0x00007f757047b714: mov    0x10(%rsp),%r13
  0x00007f757047b719: mov    0x18(%rsp),%r12
  0x00007f757047b71e: mov    0x20(%rsp),%r11
  0x00007f757047b723: mov    0x28(%rsp),%r10
  0x00007f757047b728: mov    0x30(%rsp),%r9
  0x00007f757047b72d: mov    0x38(%rsp),%r8
  0x00007f757047b732: mov    0x40(%rsp),%rdi
  0x00007f757047b737: mov    0x48(%rsp),%rsi
  0x00007f757047b73c: mov    0x50(%rsp),%rbp
  0x00007f757047b741: mov    0x60(%rsp),%rbx
  0x00007f757047b746: mov    0x68(%rsp),%rdx
  0x00007f757047b74b: mov    0x70(%rsp),%rcx
  0x00007f757047b750: mov    0x78(%rsp),%rax
  0x00007f757047b755: add    $0x80,%rsp
  0x00007f757047b75c: add    $0x8,%rsp
  0x00007f757047b760: popfq  
  0x00007f757047b761: mov    %r13,%rsp
  0x00007f757047b764: pop    %rax
  0x00007f757047b765: mov    %rsp,%r13
  0x00007f757047b768: sub    $0x10,%rsp
  0x00007f757047b76c: mov    %rax,(%rsp)
  0x00007f757047b770: mov    %rsi,0x8(%rsp)
  0x00007f757047b775: mov    0x40(%rbx),%rcx
  0x00007f757047b779: jmpq   *%rcx

AHE@0x00007f75800c1c70: 0xb0000000 i2c: 0x00007f757047b820 c2i: 0x00007f757047b934 c2iUV: 0x00007f757047b907
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f757047b934
  0x00007f757047b820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047b824: movabs $0x7f757036e3e0,%r11
  0x00007f757047b82e: cmp    %r11,%rax
  0x00007f757047b831: jbe    0x00007f757047b84a
  0x00007f757047b837: movabs $0x7f757046e3e0,%r11
  0x00007f757047b841: cmp    %r11,%rax
  0x00007f757047b844: jb     0x00007f757047b8e7
  0x00007f757047b84a: movabs $0x7f7570369420,%r11
  0x00007f757047b854: cmp    %r11,%rax
  0x00007f757047b857: jbe    0x00007f757047b870
  0x00007f757047b85d: movabs $0x7f757036de58,%r11
  0x00007f757047b867: cmp    %r11,%rax
  0x00007f757047b86a: jb     0x00007f757047b8e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047b870: mov    %rsp,-0x28(%rsp)
  0x00007f757047b875: sub    $0x80,%rsp
  0x00007f757047b87c: mov    %rax,0x78(%rsp)
  0x00007f757047b881: mov    %rcx,0x70(%rsp)
  0x00007f757047b886: mov    %rdx,0x68(%rsp)
  0x00007f757047b88b: mov    %rbx,0x60(%rsp)
  0x00007f757047b890: mov    %rbp,0x50(%rsp)
  0x00007f757047b895: mov    %rsi,0x48(%rsp)
  0x00007f757047b89a: mov    %rdi,0x40(%rsp)
  0x00007f757047b89f: mov    %r8,0x38(%rsp)
  0x00007f757047b8a4: mov    %r9,0x30(%rsp)
  0x00007f757047b8a9: mov    %r10,0x28(%rsp)
  0x00007f757047b8ae: mov    %r11,0x20(%rsp)
  0x00007f757047b8b3: mov    %r12,0x18(%rsp)
  0x00007f757047b8b8: mov    %r13,0x10(%rsp)
  0x00007f757047b8bd: mov    %r14,0x8(%rsp)
  0x00007f757047b8c2: mov    %r15,(%rsp)
  0x00007f757047b8c6: movabs $0x7f758592f470,%rdi
  0x00007f757047b8d0: movabs $0x7f757047b870,%rsi
  0x00007f757047b8da: mov    %rsp,%rdx
  0x00007f757047b8dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b8e1: callq  0x00007f75853729fa
  0x00007f757047b8e6: hlt    
  ;; } verify_i2ce 
  0x00007f757047b8e7: mov    %rsp,%r11
  0x00007f757047b8ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b8ee: push   %rax
  0x00007f757047b8ef: mov    %r11,%rax
  0x00007f757047b8f2: mov    0x50(%rbx),%r11
  0x00007f757047b8f6: mov    0x8(%rax),%rsi
  0x00007f757047b8fa: mov    %rbx,0x258(%r15)
  0x00007f757047b901: mov    %rbx,%rax
  0x00007f757047b904: jmpq   *%r11
  0x00007f757047b907: mov    0x8(%rsi),%ebx
  0x00007f757047b90a: shl    $0x3,%rbx
  0x00007f757047b90e: cmp    0x10(%rax),%rbx
  0x00007f757047b912: mov    0x8(%rax),%rbx
  0x00007f757047b916: je     0x00007f757047b921
  0x00007f757047b91c: jmpq   0x00007f757046ec40
  0x00007f757047b921: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b929: je     0x00007f757047ba24
  0x00007f757047b92f: jmpq   0x00007f757046ec40
  0x00007f757047b934: cmpq   $0x0,0x58(%rbx)
  0x00007f757047b93c: je     0x00007f757047ba24
  0x00007f757047b942: mov    %rsp,%r13
  0x00007f757047b945: mov    (%rsp),%rax
  0x00007f757047b949: and    $0xfffffffffffffff0,%rsp
  0x00007f757047b94d: pushfq 
  0x00007f757047b94e: sub    $0x8,%rsp
  0x00007f757047b952: mov    %rsp,-0x28(%rsp)
  0x00007f757047b957: sub    $0x80,%rsp
  0x00007f757047b95e: mov    %rax,0x78(%rsp)
  0x00007f757047b963: mov    %rcx,0x70(%rsp)
  0x00007f757047b968: mov    %rdx,0x68(%rsp)
  0x00007f757047b96d: mov    %rbx,0x60(%rsp)
  0x00007f757047b972: mov    %rbp,0x50(%rsp)
  0x00007f757047b977: mov    %rsi,0x48(%rsp)
  0x00007f757047b97c: mov    %rdi,0x40(%rsp)
  0x00007f757047b981: mov    %r8,0x38(%rsp)
  0x00007f757047b986: mov    %r9,0x30(%rsp)
  0x00007f757047b98b: mov    %r10,0x28(%rsp)
  0x00007f757047b990: mov    %r11,0x20(%rsp)
  0x00007f757047b995: mov    %r12,0x18(%rsp)
  0x00007f757047b99a: mov    %r13,0x10(%rsp)
  0x00007f757047b99f: mov    %r14,0x8(%rsp)
  0x00007f757047b9a4: mov    %r15,(%rsp)
  0x00007f757047b9a8: sub    $0x200,%rsp
  0x00007f757047b9af: fxsave64 (%rsp)
  0x00007f757047b9b4: mov    %rbx,%rdi
  0x00007f757047b9b7: mov    %rax,%rsi
  0x00007f757047b9ba: callq  0x00007f7585522bca
  0x00007f757047b9bf: fxrstor64 (%rsp)
  0x00007f757047b9c4: add    $0x200,%rsp
  0x00007f757047b9cb: mov    (%rsp),%r15
  0x00007f757047b9cf: mov    0x8(%rsp),%r14
  0x00007f757047b9d4: mov    0x10(%rsp),%r13
  0x00007f757047b9d9: mov    0x18(%rsp),%r12
  0x00007f757047b9de: mov    0x20(%rsp),%r11
  0x00007f757047b9e3: mov    0x28(%rsp),%r10
  0x00007f757047b9e8: mov    0x30(%rsp),%r9
  0x00007f757047b9ed: mov    0x38(%rsp),%r8
  0x00007f757047b9f2: mov    0x40(%rsp),%rdi
  0x00007f757047b9f7: mov    0x48(%rsp),%rsi
  0x00007f757047b9fc: mov    0x50(%rsp),%rbp
  0x00007f757047ba01: mov    0x60(%rsp),%rbx
  0x00007f757047ba06: mov    0x68(%rsp),%rdx
  0x00007f757047ba0b: mov    0x70(%rsp),%rcx
  0x00007f757047ba10: mov    0x78(%rsp),%rax
  0x00007f757047ba15: add    $0x80,%rsp
  0x00007f757047ba1c: add    $0x8,%rsp
  0x00007f757047ba20: popfq  
  0x00007f757047ba21: mov    %r13,%rsp
  0x00007f757047ba24: pop    %rax
  0x00007f757047ba25: mov    %rsp,%r13
  0x00007f757047ba28: sub    $0x10,%rsp
  0x00007f757047ba2c: mov    %rax,(%rsp)
  0x00007f757047ba30: mov    %rsi,0x8(%rsp)
  0x00007f757047ba35: mov    0x40(%rbx),%rcx
  0x00007f757047ba39: jmpq   *%rcx

AHE@0x00007f75800c1cb8: 0xbb000000 i2c: 0x00007f757047bae0 c2i: 0x00007f757047bbf8 c2iUV: 0x00007f757047bbcb
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)Ljava/lang/Throwable; (548 bytes generated)
c2i argument handler starts at 0x7f757047bbf8
  0x00007f757047bae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047bae4: movabs $0x7f757036e3e0,%r11
  0x00007f757047baee: cmp    %r11,%rax
  0x00007f757047baf1: jbe    0x00007f757047bb0a
  0x00007f757047baf7: movabs $0x7f757046e3e0,%r11
  0x00007f757047bb01: cmp    %r11,%rax
  0x00007f757047bb04: jb     0x00007f757047bba7
  0x00007f757047bb0a: movabs $0x7f7570369420,%r11
  0x00007f757047bb14: cmp    %r11,%rax
  0x00007f757047bb17: jbe    0x00007f757047bb30
  0x00007f757047bb1d: movabs $0x7f757036de58,%r11
  0x00007f757047bb27: cmp    %r11,%rax
  0x00007f757047bb2a: jb     0x00007f757047bba7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047bb30: mov    %rsp,-0x28(%rsp)
  0x00007f757047bb35: sub    $0x80,%rsp
  0x00007f757047bb3c: mov    %rax,0x78(%rsp)
  0x00007f757047bb41: mov    %rcx,0x70(%rsp)
  0x00007f757047bb46: mov    %rdx,0x68(%rsp)
  0x00007f757047bb4b: mov    %rbx,0x60(%rsp)
  0x00007f757047bb50: mov    %rbp,0x50(%rsp)
  0x00007f757047bb55: mov    %rsi,0x48(%rsp)
  0x00007f757047bb5a: mov    %rdi,0x40(%rsp)
  0x00007f757047bb5f: mov    %r8,0x38(%rsp)
  0x00007f757047bb64: mov    %r9,0x30(%rsp)
  0x00007f757047bb69: mov    %r10,0x28(%rsp)
  0x00007f757047bb6e: mov    %r11,0x20(%rsp)
  0x00007f757047bb73: mov    %r12,0x18(%rsp)
  0x00007f757047bb78: mov    %r13,0x10(%rsp)
  0x00007f757047bb7d: mov    %r14,0x8(%rsp)
  0x00007f757047bb82: mov    %r15,(%rsp)
  0x00007f757047bb86: movabs $0x7f758592f470,%rdi
  0x00007f757047bb90: movabs $0x7f757047bb30,%rsi
  0x00007f757047bb9a: mov    %rsp,%rdx
  0x00007f757047bb9d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047bba1: callq  0x00007f75853729fa
  0x00007f757047bba6: hlt    
  ;; } verify_i2ce 
  0x00007f757047bba7: mov    %rsp,%r11
  0x00007f757047bbaa: and    $0xfffffffffffffff0,%rsp
  0x00007f757047bbae: push   %rax
  0x00007f757047bbaf: mov    %r11,%rax
  0x00007f757047bbb2: mov    0x50(%rbx),%r11
  0x00007f757047bbb6: mov    0x10(%rax),%rsi
  0x00007f757047bbba: mov    0x8(%rax),%rdx
  0x00007f757047bbbe: mov    %rbx,0x258(%r15)
  0x00007f757047bbc5: mov    %rbx,%rax
  0x00007f757047bbc8: jmpq   *%r11
  0x00007f757047bbcb: mov    0x8(%rsi),%ebx
  0x00007f757047bbce: shl    $0x3,%rbx
  0x00007f757047bbd2: cmp    0x10(%rax),%rbx
  0x00007f757047bbd6: mov    0x8(%rax),%rbx
  0x00007f757047bbda: je     0x00007f757047bbe5
  0x00007f757047bbe0: jmpq   0x00007f757046ec40
  0x00007f757047bbe5: cmpq   $0x0,0x58(%rbx)
  0x00007f757047bbed: je     0x00007f757047bce8
  0x00007f757047bbf3: jmpq   0x00007f757046ec40
  0x00007f757047bbf8: cmpq   $0x0,0x58(%rbx)
  0x00007f757047bc00: je     0x00007f757047bce8
  0x00007f757047bc06: mov    %rsp,%r13
  0x00007f757047bc09: mov    (%rsp),%rax
  0x00007f757047bc0d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047bc11: pushfq 
  0x00007f757047bc12: sub    $0x8,%rsp
  0x00007f757047bc16: mov    %rsp,-0x28(%rsp)
  0x00007f757047bc1b: sub    $0x80,%rsp
  0x00007f757047bc22: mov    %rax,0x78(%rsp)
  0x00007f757047bc27: mov    %rcx,0x70(%rsp)
  0x00007f757047bc2c: mov    %rdx,0x68(%rsp)
  0x00007f757047bc31: mov    %rbx,0x60(%rsp)
  0x00007f757047bc36: mov    %rbp,0x50(%rsp)
  0x00007f757047bc3b: mov    %rsi,0x48(%rsp)
  0x00007f757047bc40: mov    %rdi,0x40(%rsp)
  0x00007f757047bc45: mov    %r8,0x38(%rsp)
  0x00007f757047bc4a: mov    %r9,0x30(%rsp)
  0x00007f757047bc4f: mov    %r10,0x28(%rsp)
  0x00007f757047bc54: mov    %r11,0x20(%rsp)
  0x00007f757047bc59: mov    %r12,0x18(%rsp)
  0x00007f757047bc5e: mov    %r13,0x10(%rsp)
  0x00007f757047bc63: mov    %r14,0x8(%rsp)
  0x00007f757047bc68: mov    %r15,(%rsp)
  0x00007f757047bc6c: sub    $0x200,%rsp
  0x00007f757047bc73: fxsave64 (%rsp)
  0x00007f757047bc78: mov    %rbx,%rdi
  0x00007f757047bc7b: mov    %rax,%rsi
  0x00007f757047bc7e: callq  0x00007f7585522bca
  0x00007f757047bc83: fxrstor64 (%rsp)
  0x00007f757047bc88: add    $0x200,%rsp
  0x00007f757047bc8f: mov    (%rsp),%r15
  0x00007f757047bc93: mov    0x8(%rsp),%r14
  0x00007f757047bc98: mov    0x10(%rsp),%r13
  0x00007f757047bc9d: mov    0x18(%rsp),%r12
  0x00007f757047bca2: mov    0x20(%rsp),%r11
  0x00007f757047bca7: mov    0x28(%rsp),%r10
  0x00007f757047bcac: mov    0x30(%rsp),%r9
  0x00007f757047bcb1: mov    0x38(%rsp),%r8
  0x00007f757047bcb6: mov    0x40(%rsp),%rdi
  0x00007f757047bcbb: mov    0x48(%rsp),%rsi
  0x00007f757047bcc0: mov    0x50(%rsp),%rbp
  0x00007f757047bcc5: mov    0x60(%rsp),%rbx
  0x00007f757047bcca: mov    0x68(%rsp),%rdx
  0x00007f757047bccf: mov    0x70(%rsp),%rcx
  0x00007f757047bcd4: mov    0x78(%rsp),%rax
  0x00007f757047bcd9: add    $0x80,%rsp
  0x00007f757047bce0: add    $0x8,%rsp
  0x00007f757047bce4: popfq  
  0x00007f757047bce5: mov    %r13,%rsp
  0x00007f757047bce8: pop    %rax
  0x00007f757047bce9: mov    %rsp,%r13
  0x00007f757047bcec: sub    $0x20,%rsp
  0x00007f757047bcf0: mov    %rax,(%rsp)
  0x00007f757047bcf4: mov    %rsi,0x10(%rsp)
  0x00007f757047bcf9: mov    %rdx,0x8(%rsp)
  0x00007f757047bcfe: mov    0x40(%rbx),%rcx
  0x00007f757047bd02: jmpq   *%rcx

AHE@0x00007f75800c1d00: 0xb0000000 i2c: 0x00007f757047bde0 c2i: 0x00007f757047bef4 c2iUV: 0x00007f757047bec7
i2c argument handler #0 for: receiver ()Ljava/lang/Throwable; (539 bytes generated)
c2i argument handler starts at 0x7f757047bef4
  0x00007f757047bde0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047bde4: movabs $0x7f757036e3e0,%r11
  0x00007f757047bdee: cmp    %r11,%rax
  0x00007f757047bdf1: jbe    0x00007f757047be0a
  0x00007f757047bdf7: movabs $0x7f757046e3e0,%r11
  0x00007f757047be01: cmp    %r11,%rax
  0x00007f757047be04: jb     0x00007f757047bea7
  0x00007f757047be0a: movabs $0x7f7570369420,%r11
  0x00007f757047be14: cmp    %r11,%rax
  0x00007f757047be17: jbe    0x00007f757047be30
  0x00007f757047be1d: movabs $0x7f757036de58,%r11
  0x00007f757047be27: cmp    %r11,%rax
  0x00007f757047be2a: jb     0x00007f757047bea7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047be30: mov    %rsp,-0x28(%rsp)
  0x00007f757047be35: sub    $0x80,%rsp
  0x00007f757047be3c: mov    %rax,0x78(%rsp)
  0x00007f757047be41: mov    %rcx,0x70(%rsp)
  0x00007f757047be46: mov    %rdx,0x68(%rsp)
  0x00007f757047be4b: mov    %rbx,0x60(%rsp)
  0x00007f757047be50: mov    %rbp,0x50(%rsp)
  0x00007f757047be55: mov    %rsi,0x48(%rsp)
  0x00007f757047be5a: mov    %rdi,0x40(%rsp)
  0x00007f757047be5f: mov    %r8,0x38(%rsp)
  0x00007f757047be64: mov    %r9,0x30(%rsp)
  0x00007f757047be69: mov    %r10,0x28(%rsp)
  0x00007f757047be6e: mov    %r11,0x20(%rsp)
  0x00007f757047be73: mov    %r12,0x18(%rsp)
  0x00007f757047be78: mov    %r13,0x10(%rsp)
  0x00007f757047be7d: mov    %r14,0x8(%rsp)
  0x00007f757047be82: mov    %r15,(%rsp)
  0x00007f757047be86: movabs $0x7f758592f470,%rdi
  0x00007f757047be90: movabs $0x7f757047be30,%rsi
  0x00007f757047be9a: mov    %rsp,%rdx
  0x00007f757047be9d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047bea1: callq  0x00007f75853729fa
  0x00007f757047bea6: hlt    
  ;; } verify_i2ce 
  0x00007f757047bea7: mov    %rsp,%r11
  0x00007f757047beaa: and    $0xfffffffffffffff0,%rsp
  0x00007f757047beae: push   %rax
  0x00007f757047beaf: mov    %r11,%rax
  0x00007f757047beb2: mov    0x50(%rbx),%r11
  0x00007f757047beb6: mov    0x8(%rax),%rsi
  0x00007f757047beba: mov    %rbx,0x258(%r15)
  0x00007f757047bec1: mov    %rbx,%rax
  0x00007f757047bec4: jmpq   *%r11
  0x00007f757047bec7: mov    0x8(%rsi),%ebx
  0x00007f757047beca: shl    $0x3,%rbx
  0x00007f757047bece: cmp    0x10(%rax),%rbx
  0x00007f757047bed2: mov    0x8(%rax),%rbx
  0x00007f757047bed6: je     0x00007f757047bee1
  0x00007f757047bedc: jmpq   0x00007f757046ec40
  0x00007f757047bee1: cmpq   $0x0,0x58(%rbx)
  0x00007f757047bee9: je     0x00007f757047bfe4
  0x00007f757047beef: jmpq   0x00007f757046ec40
  0x00007f757047bef4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047befc: je     0x00007f757047bfe4
  0x00007f757047bf02: mov    %rsp,%r13
  0x00007f757047bf05: mov    (%rsp),%rax
  0x00007f757047bf09: and    $0xfffffffffffffff0,%rsp
  0x00007f757047bf0d: pushfq 
  0x00007f757047bf0e: sub    $0x8,%rsp
  0x00007f757047bf12: mov    %rsp,-0x28(%rsp)
  0x00007f757047bf17: sub    $0x80,%rsp
  0x00007f757047bf1e: mov    %rax,0x78(%rsp)
  0x00007f757047bf23: mov    %rcx,0x70(%rsp)
  0x00007f757047bf28: mov    %rdx,0x68(%rsp)
  0x00007f757047bf2d: mov    %rbx,0x60(%rsp)
  0x00007f757047bf32: mov    %rbp,0x50(%rsp)
  0x00007f757047bf37: mov    %rsi,0x48(%rsp)
  0x00007f757047bf3c: mov    %rdi,0x40(%rsp)
  0x00007f757047bf41: mov    %r8,0x38(%rsp)
  0x00007f757047bf46: mov    %r9,0x30(%rsp)
  0x00007f757047bf4b: mov    %r10,0x28(%rsp)
  0x00007f757047bf50: mov    %r11,0x20(%rsp)
  0x00007f757047bf55: mov    %r12,0x18(%rsp)
  0x00007f757047bf5a: mov    %r13,0x10(%rsp)
  0x00007f757047bf5f: mov    %r14,0x8(%rsp)
  0x00007f757047bf64: mov    %r15,(%rsp)
  0x00007f757047bf68: sub    $0x200,%rsp
  0x00007f757047bf6f: fxsave64 (%rsp)
  0x00007f757047bf74: mov    %rbx,%rdi
  0x00007f757047bf77: mov    %rax,%rsi
  0x00007f757047bf7a: callq  0x00007f7585522bca
  0x00007f757047bf7f: fxrstor64 (%rsp)
  0x00007f757047bf84: add    $0x200,%rsp
  0x00007f757047bf8b: mov    (%rsp),%r15
  0x00007f757047bf8f: mov    0x8(%rsp),%r14
  0x00007f757047bf94: mov    0x10(%rsp),%r13
  0x00007f757047bf99: mov    0x18(%rsp),%r12
  0x00007f757047bf9e: mov    0x20(%rsp),%r11
  0x00007f757047bfa3: mov    0x28(%rsp),%r10
  0x00007f757047bfa8: mov    0x30(%rsp),%r9
  0x00007f757047bfad: mov    0x38(%rsp),%r8
  0x00007f757047bfb2: mov    0x40(%rsp),%rdi
  0x00007f757047bfb7: mov    0x48(%rsp),%rsi
  0x00007f757047bfbc: mov    0x50(%rsp),%rbp
  0x00007f757047bfc1: mov    0x60(%rsp),%rbx
  0x00007f757047bfc6: mov    0x68(%rsp),%rdx
  0x00007f757047bfcb: mov    0x70(%rsp),%rcx
  0x00007f757047bfd0: mov    0x78(%rsp),%rax
  0x00007f757047bfd5: add    $0x80,%rsp
  0x00007f757047bfdc: add    $0x8,%rsp
  0x00007f757047bfe0: popfq  
  0x00007f757047bfe1: mov    %r13,%rsp
  0x00007f757047bfe4: pop    %rax
  0x00007f757047bfe5: mov    %rsp,%r13
  0x00007f757047bfe8: sub    $0x10,%rsp
  0x00007f757047bfec: mov    %rax,(%rsp)
  0x00007f757047bff0: mov    %rsi,0x8(%rsp)
  0x00007f757047bff5: mov    0x40(%rbx),%rcx
  0x00007f757047bff9: jmpq   *%rcx

AHE@0x00007f75800c1d48: 0xba000000 i2c: 0x00007f757047c0a0 c2i: 0x00007f757047c1b7 c2iUV: 0x00007f757047c18a
i2c argument handler #0 for: receiver (I)Ljava/lang/Throwable; (546 bytes generated)
c2i argument handler starts at 0x7f757047c1b7
  0x00007f757047c0a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047c0a4: movabs $0x7f757036e3e0,%r11
  0x00007f757047c0ae: cmp    %r11,%rax
  0x00007f757047c0b1: jbe    0x00007f757047c0ca
  0x00007f757047c0b7: movabs $0x7f757046e3e0,%r11
  0x00007f757047c0c1: cmp    %r11,%rax
  0x00007f757047c0c4: jb     0x00007f757047c167
  0x00007f757047c0ca: movabs $0x7f7570369420,%r11
  0x00007f757047c0d4: cmp    %r11,%rax
  0x00007f757047c0d7: jbe    0x00007f757047c0f0
  0x00007f757047c0dd: movabs $0x7f757036de58,%r11
  0x00007f757047c0e7: cmp    %r11,%rax
  0x00007f757047c0ea: jb     0x00007f757047c167
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047c0f0: mov    %rsp,-0x28(%rsp)
  0x00007f757047c0f5: sub    $0x80,%rsp
  0x00007f757047c0fc: mov    %rax,0x78(%rsp)
  0x00007f757047c101: mov    %rcx,0x70(%rsp)
  0x00007f757047c106: mov    %rdx,0x68(%rsp)
  0x00007f757047c10b: mov    %rbx,0x60(%rsp)
  0x00007f757047c110: mov    %rbp,0x50(%rsp)
  0x00007f757047c115: mov    %rsi,0x48(%rsp)
  0x00007f757047c11a: mov    %rdi,0x40(%rsp)
  0x00007f757047c11f: mov    %r8,0x38(%rsp)
  0x00007f757047c124: mov    %r9,0x30(%rsp)
  0x00007f757047c129: mov    %r10,0x28(%rsp)
  0x00007f757047c12e: mov    %r11,0x20(%rsp)
  0x00007f757047c133: mov    %r12,0x18(%rsp)
  0x00007f757047c138: mov    %r13,0x10(%rsp)
  0x00007f757047c13d: mov    %r14,0x8(%rsp)
  0x00007f757047c142: mov    %r15,(%rsp)
  0x00007f757047c146: movabs $0x7f758592f470,%rdi
  0x00007f757047c150: movabs $0x7f757047c0f0,%rsi
  0x00007f757047c15a: mov    %rsp,%rdx
  0x00007f757047c15d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c161: callq  0x00007f75853729fa
  0x00007f757047c166: hlt    
  ;; } verify_i2ce 
  0x00007f757047c167: mov    %rsp,%r11
  0x00007f757047c16a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c16e: push   %rax
  0x00007f757047c16f: mov    %r11,%rax
  0x00007f757047c172: mov    0x50(%rbx),%r11
  0x00007f757047c176: mov    0x10(%rax),%rsi
  0x00007f757047c17a: mov    0x8(%rax),%edx
  0x00007f757047c17d: mov    %rbx,0x258(%r15)
  0x00007f757047c184: mov    %rbx,%rax
  0x00007f757047c187: jmpq   *%r11
  0x00007f757047c18a: mov    0x8(%rsi),%ebx
  0x00007f757047c18d: shl    $0x3,%rbx
  0x00007f757047c191: cmp    0x10(%rax),%rbx
  0x00007f757047c195: mov    0x8(%rax),%rbx
  0x00007f757047c199: je     0x00007f757047c1a4
  0x00007f757047c19f: jmpq   0x00007f757046ec40
  0x00007f757047c1a4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047c1ac: je     0x00007f757047c2a7
  0x00007f757047c1b2: jmpq   0x00007f757046ec40
  0x00007f757047c1b7: cmpq   $0x0,0x58(%rbx)
  0x00007f757047c1bf: je     0x00007f757047c2a7
  0x00007f757047c1c5: mov    %rsp,%r13
  0x00007f757047c1c8: mov    (%rsp),%rax
  0x00007f757047c1cc: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c1d0: pushfq 
  0x00007f757047c1d1: sub    $0x8,%rsp
  0x00007f757047c1d5: mov    %rsp,-0x28(%rsp)
  0x00007f757047c1da: sub    $0x80,%rsp
  0x00007f757047c1e1: mov    %rax,0x78(%rsp)
  0x00007f757047c1e6: mov    %rcx,0x70(%rsp)
  0x00007f757047c1eb: mov    %rdx,0x68(%rsp)
  0x00007f757047c1f0: mov    %rbx,0x60(%rsp)
  0x00007f757047c1f5: mov    %rbp,0x50(%rsp)
  0x00007f757047c1fa: mov    %rsi,0x48(%rsp)
  0x00007f757047c1ff: mov    %rdi,0x40(%rsp)
  0x00007f757047c204: mov    %r8,0x38(%rsp)
  0x00007f757047c209: mov    %r9,0x30(%rsp)
  0x00007f757047c20e: mov    %r10,0x28(%rsp)
  0x00007f757047c213: mov    %r11,0x20(%rsp)
  0x00007f757047c218: mov    %r12,0x18(%rsp)
  0x00007f757047c21d: mov    %r13,0x10(%rsp)
  0x00007f757047c222: mov    %r14,0x8(%rsp)
  0x00007f757047c227: mov    %r15,(%rsp)
  0x00007f757047c22b: sub    $0x200,%rsp
  0x00007f757047c232: fxsave64 (%rsp)
  0x00007f757047c237: mov    %rbx,%rdi
  0x00007f757047c23a: mov    %rax,%rsi
  0x00007f757047c23d: callq  0x00007f7585522bca
  0x00007f757047c242: fxrstor64 (%rsp)
  0x00007f757047c247: add    $0x200,%rsp
  0x00007f757047c24e: mov    (%rsp),%r15
  0x00007f757047c252: mov    0x8(%rsp),%r14
  0x00007f757047c257: mov    0x10(%rsp),%r13
  0x00007f757047c25c: mov    0x18(%rsp),%r12
  0x00007f757047c261: mov    0x20(%rsp),%r11
  0x00007f757047c266: mov    0x28(%rsp),%r10
  0x00007f757047c26b: mov    0x30(%rsp),%r9
  0x00007f757047c270: mov    0x38(%rsp),%r8
  0x00007f757047c275: mov    0x40(%rsp),%rdi
  0x00007f757047c27a: mov    0x48(%rsp),%rsi
  0x00007f757047c27f: mov    0x50(%rsp),%rbp
  0x00007f757047c284: mov    0x60(%rsp),%rbx
  0x00007f757047c289: mov    0x68(%rsp),%rdx
  0x00007f757047c28e: mov    0x70(%rsp),%rcx
  0x00007f757047c293: mov    0x78(%rsp),%rax
  0x00007f757047c298: add    $0x80,%rsp
  0x00007f757047c29f: add    $0x8,%rsp
  0x00007f757047c2a3: popfq  
  0x00007f757047c2a4: mov    %r13,%rsp
  0x00007f757047c2a7: pop    %rax
  0x00007f757047c2a8: mov    %rsp,%r13
  0x00007f757047c2ab: sub    $0x20,%rsp
  0x00007f757047c2af: mov    %rax,(%rsp)
  0x00007f757047c2b3: mov    %rsi,0x10(%rsp)
  0x00007f757047c2b8: mov    %edx,0x8(%rsp)
  0x00007f757047c2bc: mov    0x40(%rbx),%rcx
  0x00007f757047c2c0: jmpq   *%rcx

AHE@0x00007f75800c1d90: 0xb0000000 i2c: 0x00007f757047c3a0 c2i: 0x00007f757047c4b4 c2iUV: 0x00007f757047c487
i2c argument handler #0 for: receiver ()Ljava/lang/Throwable; (539 bytes generated)
c2i argument handler starts at 0x7f757047c4b4
  0x00007f757047c3a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047c3a4: movabs $0x7f757036e3e0,%r11
  0x00007f757047c3ae: cmp    %r11,%rax
  0x00007f757047c3b1: jbe    0x00007f757047c3ca
  0x00007f757047c3b7: movabs $0x7f757046e3e0,%r11
  0x00007f757047c3c1: cmp    %r11,%rax
  0x00007f757047c3c4: jb     0x00007f757047c467
  0x00007f757047c3ca: movabs $0x7f7570369420,%r11
  0x00007f757047c3d4: cmp    %r11,%rax
  0x00007f757047c3d7: jbe    0x00007f757047c3f0
  0x00007f757047c3dd: movabs $0x7f757036de58,%r11
  0x00007f757047c3e7: cmp    %r11,%rax
  0x00007f757047c3ea: jb     0x00007f757047c467
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047c3f0: mov    %rsp,-0x28(%rsp)
  0x00007f757047c3f5: sub    $0x80,%rsp
  0x00007f757047c3fc: mov    %rax,0x78(%rsp)
  0x00007f757047c401: mov    %rcx,0x70(%rsp)
  0x00007f757047c406: mov    %rdx,0x68(%rsp)
  0x00007f757047c40b: mov    %rbx,0x60(%rsp)
  0x00007f757047c410: mov    %rbp,0x50(%rsp)
  0x00007f757047c415: mov    %rsi,0x48(%rsp)
  0x00007f757047c41a: mov    %rdi,0x40(%rsp)
  0x00007f757047c41f: mov    %r8,0x38(%rsp)
  0x00007f757047c424: mov    %r9,0x30(%rsp)
  0x00007f757047c429: mov    %r10,0x28(%rsp)
  0x00007f757047c42e: mov    %r11,0x20(%rsp)
  0x00007f757047c433: mov    %r12,0x18(%rsp)
  0x00007f757047c438: mov    %r13,0x10(%rsp)
  0x00007f757047c43d: mov    %r14,0x8(%rsp)
  0x00007f757047c442: mov    %r15,(%rsp)
  0x00007f757047c446: movabs $0x7f758592f470,%rdi
  0x00007f757047c450: movabs $0x7f757047c3f0,%rsi
  0x00007f757047c45a: mov    %rsp,%rdx
  0x00007f757047c45d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c461: callq  0x00007f75853729fa
  0x00007f757047c466: hlt    
  ;; } verify_i2ce 
  0x00007f757047c467: mov    %rsp,%r11
  0x00007f757047c46a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c46e: push   %rax
  0x00007f757047c46f: mov    %r11,%rax
  0x00007f757047c472: mov    0x50(%rbx),%r11
  0x00007f757047c476: mov    0x8(%rax),%rsi
  0x00007f757047c47a: mov    %rbx,0x258(%r15)
  0x00007f757047c481: mov    %rbx,%rax
  0x00007f757047c484: jmpq   *%r11
  0x00007f757047c487: mov    0x8(%rsi),%ebx
  0x00007f757047c48a: shl    $0x3,%rbx
  0x00007f757047c48e: cmp    0x10(%rax),%rbx
  0x00007f757047c492: mov    0x8(%rax),%rbx
  0x00007f757047c496: je     0x00007f757047c4a1
  0x00007f757047c49c: jmpq   0x00007f757046ec40
  0x00007f757047c4a1: cmpq   $0x0,0x58(%rbx)
  0x00007f757047c4a9: je     0x00007f757047c5a4
  0x00007f757047c4af: jmpq   0x00007f757046ec40
  0x00007f757047c4b4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047c4bc: je     0x00007f757047c5a4
  0x00007f757047c4c2: mov    %rsp,%r13
  0x00007f757047c4c5: mov    (%rsp),%rax
  0x00007f757047c4c9: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c4cd: pushfq 
  0x00007f757047c4ce: sub    $0x8,%rsp
  0x00007f757047c4d2: mov    %rsp,-0x28(%rsp)
  0x00007f757047c4d7: sub    $0x80,%rsp
  0x00007f757047c4de: mov    %rax,0x78(%rsp)
  0x00007f757047c4e3: mov    %rcx,0x70(%rsp)
  0x00007f757047c4e8: mov    %rdx,0x68(%rsp)
  0x00007f757047c4ed: mov    %rbx,0x60(%rsp)
  0x00007f757047c4f2: mov    %rbp,0x50(%rsp)
  0x00007f757047c4f7: mov    %rsi,0x48(%rsp)
  0x00007f757047c4fc: mov    %rdi,0x40(%rsp)
  0x00007f757047c501: mov    %r8,0x38(%rsp)
  0x00007f757047c506: mov    %r9,0x30(%rsp)
  0x00007f757047c50b: mov    %r10,0x28(%rsp)
  0x00007f757047c510: mov    %r11,0x20(%rsp)
  0x00007f757047c515: mov    %r12,0x18(%rsp)
  0x00007f757047c51a: mov    %r13,0x10(%rsp)
  0x00007f757047c51f: mov    %r14,0x8(%rsp)
  0x00007f757047c524: mov    %r15,(%rsp)
  0x00007f757047c528: sub    $0x200,%rsp
  0x00007f757047c52f: fxsave64 (%rsp)
  0x00007f757047c534: mov    %rbx,%rdi
  0x00007f757047c537: mov    %rax,%rsi
  0x00007f757047c53a: callq  0x00007f7585522bca
  0x00007f757047c53f: fxrstor64 (%rsp)
  0x00007f757047c544: add    $0x200,%rsp
  0x00007f757047c54b: mov    (%rsp),%r15
  0x00007f757047c54f: mov    0x8(%rsp),%r14
  0x00007f757047c554: mov    0x10(%rsp),%r13
  0x00007f757047c559: mov    0x18(%rsp),%r12
  0x00007f757047c55e: mov    0x20(%rsp),%r11
  0x00007f757047c563: mov    0x28(%rsp),%r10
  0x00007f757047c568: mov    0x30(%rsp),%r9
  0x00007f757047c56d: mov    0x38(%rsp),%r8
  0x00007f757047c572: mov    0x40(%rsp),%rdi
  0x00007f757047c577: mov    0x48(%rsp),%rsi
  0x00007f757047c57c: mov    0x50(%rsp),%rbp
  0x00007f757047c581: mov    0x60(%rsp),%rbx
  0x00007f757047c586: mov    0x68(%rsp),%rdx
  0x00007f757047c58b: mov    0x70(%rsp),%rcx
  0x00007f757047c590: mov    0x78(%rsp),%rax
  0x00007f757047c595: add    $0x80,%rsp
  0x00007f757047c59c: add    $0x8,%rsp
  0x00007f757047c5a0: popfq  
  0x00007f757047c5a1: mov    %r13,%rsp
  0x00007f757047c5a4: pop    %rax
  0x00007f757047c5a5: mov    %rsp,%r13
  0x00007f757047c5a8: sub    $0x10,%rsp
  0x00007f757047c5ac: mov    %rax,(%rsp)
  0x00007f757047c5b0: mov    %rsi,0x8(%rsp)
  0x00007f757047c5b5: mov    0x40(%rbx),%rcx
  0x00007f757047c5b9: jmpq   *%rcx

AHE@0x00007f75800c1dd8: 0xbb000000 i2c: 0x00007f757047c660 c2i: 0x00007f757047c778 c2iUV: 0x00007f757047c74b
i2c argument handler #0 for: receiver (Ljava/io/PrintWriter;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047c778
  0x00007f757047c660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047c664: movabs $0x7f757036e3e0,%r11
  0x00007f757047c66e: cmp    %r11,%rax
  0x00007f757047c671: jbe    0x00007f757047c68a
  0x00007f757047c677: movabs $0x7f757046e3e0,%r11
  0x00007f757047c681: cmp    %r11,%rax
  0x00007f757047c684: jb     0x00007f757047c727
  0x00007f757047c68a: movabs $0x7f7570369420,%r11
  0x00007f757047c694: cmp    %r11,%rax
  0x00007f757047c697: jbe    0x00007f757047c6b0
  0x00007f757047c69d: movabs $0x7f757036de58,%r11
  0x00007f757047c6a7: cmp    %r11,%rax
  0x00007f757047c6aa: jb     0x00007f757047c727
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047c6b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047c6b5: sub    $0x80,%rsp
  0x00007f757047c6bc: mov    %rax,0x78(%rsp)
  0x00007f757047c6c1: mov    %rcx,0x70(%rsp)
  0x00007f757047c6c6: mov    %rdx,0x68(%rsp)
  0x00007f757047c6cb: mov    %rbx,0x60(%rsp)
  0x00007f757047c6d0: mov    %rbp,0x50(%rsp)
  0x00007f757047c6d5: mov    %rsi,0x48(%rsp)
  0x00007f757047c6da: mov    %rdi,0x40(%rsp)
  0x00007f757047c6df: mov    %r8,0x38(%rsp)
  0x00007f757047c6e4: mov    %r9,0x30(%rsp)
  0x00007f757047c6e9: mov    %r10,0x28(%rsp)
  0x00007f757047c6ee: mov    %r11,0x20(%rsp)
  0x00007f757047c6f3: mov    %r12,0x18(%rsp)
  0x00007f757047c6f8: mov    %r13,0x10(%rsp)
  0x00007f757047c6fd: mov    %r14,0x8(%rsp)
  0x00007f757047c702: mov    %r15,(%rsp)
  0x00007f757047c706: movabs $0x7f758592f470,%rdi
  0x00007f757047c710: movabs $0x7f757047c6b0,%rsi
  0x00007f757047c71a: mov    %rsp,%rdx
  0x00007f757047c71d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c721: callq  0x00007f75853729fa
  0x00007f757047c726: hlt    
  ;; } verify_i2ce 
  0x00007f757047c727: mov    %rsp,%r11
  0x00007f757047c72a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c72e: push   %rax
  0x00007f757047c72f: mov    %r11,%rax
  0x00007f757047c732: mov    0x50(%rbx),%r11
  0x00007f757047c736: mov    0x10(%rax),%rsi
  0x00007f757047c73a: mov    0x8(%rax),%rdx
  0x00007f757047c73e: mov    %rbx,0x258(%r15)
  0x00007f757047c745: mov    %rbx,%rax
  0x00007f757047c748: jmpq   *%r11
  0x00007f757047c74b: mov    0x8(%rsi),%ebx
  0x00007f757047c74e: shl    $0x3,%rbx
  0x00007f757047c752: cmp    0x10(%rax),%rbx
  0x00007f757047c756: mov    0x8(%rax),%rbx
  0x00007f757047c75a: je     0x00007f757047c765
  0x00007f757047c760: jmpq   0x00007f757046ec40
  0x00007f757047c765: cmpq   $0x0,0x58(%rbx)
  0x00007f757047c76d: je     0x00007f757047c868
  0x00007f757047c773: jmpq   0x00007f757046ec40
  0x00007f757047c778: cmpq   $0x0,0x58(%rbx)
  0x00007f757047c780: je     0x00007f757047c868
  0x00007f757047c786: mov    %rsp,%r13
  0x00007f757047c789: mov    (%rsp),%rax
  0x00007f757047c78d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047c791: pushfq 
  0x00007f757047c792: sub    $0x8,%rsp
  0x00007f757047c796: mov    %rsp,-0x28(%rsp)
  0x00007f757047c79b: sub    $0x80,%rsp
  0x00007f757047c7a2: mov    %rax,0x78(%rsp)
  0x00007f757047c7a7: mov    %rcx,0x70(%rsp)
  0x00007f757047c7ac: mov    %rdx,0x68(%rsp)
  0x00007f757047c7b1: mov    %rbx,0x60(%rsp)
  0x00007f757047c7b6: mov    %rbp,0x50(%rsp)
  0x00007f757047c7bb: mov    %rsi,0x48(%rsp)
  0x00007f757047c7c0: mov    %rdi,0x40(%rsp)
  0x00007f757047c7c5: mov    %r8,0x38(%rsp)
  0x00007f757047c7ca: mov    %r9,0x30(%rsp)
  0x00007f757047c7cf: mov    %r10,0x28(%rsp)
  0x00007f757047c7d4: mov    %r11,0x20(%rsp)
  0x00007f757047c7d9: mov    %r12,0x18(%rsp)
  0x00007f757047c7de: mov    %r13,0x10(%rsp)
  0x00007f757047c7e3: mov    %r14,0x8(%rsp)
  0x00007f757047c7e8: mov    %r15,(%rsp)
  0x00007f757047c7ec: sub    $0x200,%rsp
  0x00007f757047c7f3: fxsave64 (%rsp)
  0x00007f757047c7f8: mov    %rbx,%rdi
  0x00007f757047c7fb: mov    %rax,%rsi
  0x00007f757047c7fe: callq  0x00007f7585522bca
  0x00007f757047c803: fxrstor64 (%rsp)
  0x00007f757047c808: add    $0x200,%rsp
  0x00007f757047c80f: mov    (%rsp),%r15
  0x00007f757047c813: mov    0x8(%rsp),%r14
  0x00007f757047c818: mov    0x10(%rsp),%r13
  0x00007f757047c81d: mov    0x18(%rsp),%r12
  0x00007f757047c822: mov    0x20(%rsp),%r11
  0x00007f757047c827: mov    0x28(%rsp),%r10
  0x00007f757047c82c: mov    0x30(%rsp),%r9
  0x00007f757047c831: mov    0x38(%rsp),%r8
  0x00007f757047c836: mov    0x40(%rsp),%rdi
  0x00007f757047c83b: mov    0x48(%rsp),%rsi
  0x00007f757047c840: mov    0x50(%rsp),%rbp
  0x00007f757047c845: mov    0x60(%rsp),%rbx
  0x00007f757047c84a: mov    0x68(%rsp),%rdx
  0x00007f757047c84f: mov    0x70(%rsp),%rcx
  0x00007f757047c854: mov    0x78(%rsp),%rax
  0x00007f757047c859: add    $0x80,%rsp
  0x00007f757047c860: add    $0x8,%rsp
  0x00007f757047c864: popfq  
  0x00007f757047c865: mov    %r13,%rsp
  0x00007f757047c868: pop    %rax
  0x00007f757047c869: mov    %rsp,%r13
  0x00007f757047c86c: sub    $0x20,%rsp
  0x00007f757047c870: mov    %rax,(%rsp)
  0x00007f757047c874: mov    %rsi,0x10(%rsp)
  0x00007f757047c879: mov    %rdx,0x8(%rsp)
  0x00007f757047c87e: mov    0x40(%rbx),%rcx
  0x00007f757047c882: jmpq   *%rcx

AHE@0x00007f75800c1e20: 0xb0000000 i2c: 0x00007f757047c960 c2i: 0x00007f757047ca74 c2iUV: 0x00007f757047ca47
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757047ca74
  0x00007f757047c960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047c964: movabs $0x7f757036e3e0,%r11
  0x00007f757047c96e: cmp    %r11,%rax
  0x00007f757047c971: jbe    0x00007f757047c98a
  0x00007f757047c977: movabs $0x7f757046e3e0,%r11
  0x00007f757047c981: cmp    %r11,%rax
  0x00007f757047c984: jb     0x00007f757047ca27
  0x00007f757047c98a: movabs $0x7f7570369420,%r11
  0x00007f757047c994: cmp    %r11,%rax
  0x00007f757047c997: jbe    0x00007f757047c9b0
  0x00007f757047c99d: movabs $0x7f757036de58,%r11
  0x00007f757047c9a7: cmp    %r11,%rax
  0x00007f757047c9aa: jb     0x00007f757047ca27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047c9b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047c9b5: sub    $0x80,%rsp
  0x00007f757047c9bc: mov    %rax,0x78(%rsp)
  0x00007f757047c9c1: mov    %rcx,0x70(%rsp)
  0x00007f757047c9c6: mov    %rdx,0x68(%rsp)
  0x00007f757047c9cb: mov    %rbx,0x60(%rsp)
  0x00007f757047c9d0: mov    %rbp,0x50(%rsp)
  0x00007f757047c9d5: mov    %rsi,0x48(%rsp)
  0x00007f757047c9da: mov    %rdi,0x40(%rsp)
  0x00007f757047c9df: mov    %r8,0x38(%rsp)
  0x00007f757047c9e4: mov    %r9,0x30(%rsp)
  0x00007f757047c9e9: mov    %r10,0x28(%rsp)
  0x00007f757047c9ee: mov    %r11,0x20(%rsp)
  0x00007f757047c9f3: mov    %r12,0x18(%rsp)
  0x00007f757047c9f8: mov    %r13,0x10(%rsp)
  0x00007f757047c9fd: mov    %r14,0x8(%rsp)
  0x00007f757047ca02: mov    %r15,(%rsp)
  0x00007f757047ca06: movabs $0x7f758592f470,%rdi
  0x00007f757047ca10: movabs $0x7f757047c9b0,%rsi
  0x00007f757047ca1a: mov    %rsp,%rdx
  0x00007f757047ca1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ca21: callq  0x00007f75853729fa
  0x00007f757047ca26: hlt    
  ;; } verify_i2ce 
  0x00007f757047ca27: mov    %rsp,%r11
  0x00007f757047ca2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ca2e: push   %rax
  0x00007f757047ca2f: mov    %r11,%rax
  0x00007f757047ca32: mov    0x50(%rbx),%r11
  0x00007f757047ca36: mov    0x8(%rax),%rsi
  0x00007f757047ca3a: mov    %rbx,0x258(%r15)
  0x00007f757047ca41: mov    %rbx,%rax
  0x00007f757047ca44: jmpq   *%r11
  0x00007f757047ca47: mov    0x8(%rsi),%ebx
  0x00007f757047ca4a: shl    $0x3,%rbx
  0x00007f757047ca4e: cmp    0x10(%rax),%rbx
  0x00007f757047ca52: mov    0x8(%rax),%rbx
  0x00007f757047ca56: je     0x00007f757047ca61
  0x00007f757047ca5c: jmpq   0x00007f757046ec40
  0x00007f757047ca61: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ca69: je     0x00007f757047cb64
  0x00007f757047ca6f: jmpq   0x00007f757046ec40
  0x00007f757047ca74: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ca7c: je     0x00007f757047cb64
  0x00007f757047ca82: mov    %rsp,%r13
  0x00007f757047ca85: mov    (%rsp),%rax
  0x00007f757047ca89: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ca8d: pushfq 
  0x00007f757047ca8e: sub    $0x8,%rsp
  0x00007f757047ca92: mov    %rsp,-0x28(%rsp)
  0x00007f757047ca97: sub    $0x80,%rsp
  0x00007f757047ca9e: mov    %rax,0x78(%rsp)
  0x00007f757047caa3: mov    %rcx,0x70(%rsp)
  0x00007f757047caa8: mov    %rdx,0x68(%rsp)
  0x00007f757047caad: mov    %rbx,0x60(%rsp)
  0x00007f757047cab2: mov    %rbp,0x50(%rsp)
  0x00007f757047cab7: mov    %rsi,0x48(%rsp)
  0x00007f757047cabc: mov    %rdi,0x40(%rsp)
  0x00007f757047cac1: mov    %r8,0x38(%rsp)
  0x00007f757047cac6: mov    %r9,0x30(%rsp)
  0x00007f757047cacb: mov    %r10,0x28(%rsp)
  0x00007f757047cad0: mov    %r11,0x20(%rsp)
  0x00007f757047cad5: mov    %r12,0x18(%rsp)
  0x00007f757047cada: mov    %r13,0x10(%rsp)
  0x00007f757047cadf: mov    %r14,0x8(%rsp)
  0x00007f757047cae4: mov    %r15,(%rsp)
  0x00007f757047cae8: sub    $0x200,%rsp
  0x00007f757047caef: fxsave64 (%rsp)
  0x00007f757047caf4: mov    %rbx,%rdi
  0x00007f757047caf7: mov    %rax,%rsi
  0x00007f757047cafa: callq  0x00007f7585522bca
  0x00007f757047caff: fxrstor64 (%rsp)
  0x00007f757047cb04: add    $0x200,%rsp
  0x00007f757047cb0b: mov    (%rsp),%r15
  0x00007f757047cb0f: mov    0x8(%rsp),%r14
  0x00007f757047cb14: mov    0x10(%rsp),%r13
  0x00007f757047cb19: mov    0x18(%rsp),%r12
  0x00007f757047cb1e: mov    0x20(%rsp),%r11
  0x00007f757047cb23: mov    0x28(%rsp),%r10
  0x00007f757047cb28: mov    0x30(%rsp),%r9
  0x00007f757047cb2d: mov    0x38(%rsp),%r8
  0x00007f757047cb32: mov    0x40(%rsp),%rdi
  0x00007f757047cb37: mov    0x48(%rsp),%rsi
  0x00007f757047cb3c: mov    0x50(%rsp),%rbp
  0x00007f757047cb41: mov    0x60(%rsp),%rbx
  0x00007f757047cb46: mov    0x68(%rsp),%rdx
  0x00007f757047cb4b: mov    0x70(%rsp),%rcx
  0x00007f757047cb50: mov    0x78(%rsp),%rax
  0x00007f757047cb55: add    $0x80,%rsp
  0x00007f757047cb5c: add    $0x8,%rsp
  0x00007f757047cb60: popfq  
  0x00007f757047cb61: mov    %r13,%rsp
  0x00007f757047cb64: pop    %rax
  0x00007f757047cb65: mov    %rsp,%r13
  0x00007f757047cb68: sub    $0x10,%rsp
  0x00007f757047cb6c: mov    %rax,(%rsp)
  0x00007f757047cb70: mov    %rsi,0x8(%rsp)
  0x00007f757047cb75: mov    0x40(%rbx),%rcx
  0x00007f757047cb79: jmpq   *%rcx

AHE@0x00007f75800c1e68: 0xbb000000 i2c: 0x00007f757047cc20 c2i: 0x00007f757047cd38 c2iUV: 0x00007f757047cd0b
i2c argument handler #0 for: receiver (Ljava/io/PrintStream;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047cd38
  0x00007f757047cc20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047cc24: movabs $0x7f757036e3e0,%r11
  0x00007f757047cc2e: cmp    %r11,%rax
  0x00007f757047cc31: jbe    0x00007f757047cc4a
  0x00007f757047cc37: movabs $0x7f757046e3e0,%r11
  0x00007f757047cc41: cmp    %r11,%rax
  0x00007f757047cc44: jb     0x00007f757047cce7
  0x00007f757047cc4a: movabs $0x7f7570369420,%r11
  0x00007f757047cc54: cmp    %r11,%rax
  0x00007f757047cc57: jbe    0x00007f757047cc70
  0x00007f757047cc5d: movabs $0x7f757036de58,%r11
  0x00007f757047cc67: cmp    %r11,%rax
  0x00007f757047cc6a: jb     0x00007f757047cce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047cc70: mov    %rsp,-0x28(%rsp)
  0x00007f757047cc75: sub    $0x80,%rsp
  0x00007f757047cc7c: mov    %rax,0x78(%rsp)
  0x00007f757047cc81: mov    %rcx,0x70(%rsp)
  0x00007f757047cc86: mov    %rdx,0x68(%rsp)
  0x00007f757047cc8b: mov    %rbx,0x60(%rsp)
  0x00007f757047cc90: mov    %rbp,0x50(%rsp)
  0x00007f757047cc95: mov    %rsi,0x48(%rsp)
  0x00007f757047cc9a: mov    %rdi,0x40(%rsp)
  0x00007f757047cc9f: mov    %r8,0x38(%rsp)
  0x00007f757047cca4: mov    %r9,0x30(%rsp)
  0x00007f757047cca9: mov    %r10,0x28(%rsp)
  0x00007f757047ccae: mov    %r11,0x20(%rsp)
  0x00007f757047ccb3: mov    %r12,0x18(%rsp)
  0x00007f757047ccb8: mov    %r13,0x10(%rsp)
  0x00007f757047ccbd: mov    %r14,0x8(%rsp)
  0x00007f757047ccc2: mov    %r15,(%rsp)
  0x00007f757047ccc6: movabs $0x7f758592f470,%rdi
  0x00007f757047ccd0: movabs $0x7f757047cc70,%rsi
  0x00007f757047ccda: mov    %rsp,%rdx
  0x00007f757047ccdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047cce1: callq  0x00007f75853729fa
  0x00007f757047cce6: hlt    
  ;; } verify_i2ce 
  0x00007f757047cce7: mov    %rsp,%r11
  0x00007f757047ccea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ccee: push   %rax
  0x00007f757047ccef: mov    %r11,%rax
  0x00007f757047ccf2: mov    0x50(%rbx),%r11
  0x00007f757047ccf6: mov    0x10(%rax),%rsi
  0x00007f757047ccfa: mov    0x8(%rax),%rdx
  0x00007f757047ccfe: mov    %rbx,0x258(%r15)
  0x00007f757047cd05: mov    %rbx,%rax
  0x00007f757047cd08: jmpq   *%r11
  0x00007f757047cd0b: mov    0x8(%rsi),%ebx
  0x00007f757047cd0e: shl    $0x3,%rbx
  0x00007f757047cd12: cmp    0x10(%rax),%rbx
  0x00007f757047cd16: mov    0x8(%rax),%rbx
  0x00007f757047cd1a: je     0x00007f757047cd25
  0x00007f757047cd20: jmpq   0x00007f757046ec40
  0x00007f757047cd25: cmpq   $0x0,0x58(%rbx)
  0x00007f757047cd2d: je     0x00007f757047ce28
  0x00007f757047cd33: jmpq   0x00007f757046ec40
  0x00007f757047cd38: cmpq   $0x0,0x58(%rbx)
  0x00007f757047cd40: je     0x00007f757047ce28
  0x00007f757047cd46: mov    %rsp,%r13
  0x00007f757047cd49: mov    (%rsp),%rax
  0x00007f757047cd4d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047cd51: pushfq 
  0x00007f757047cd52: sub    $0x8,%rsp
  0x00007f757047cd56: mov    %rsp,-0x28(%rsp)
  0x00007f757047cd5b: sub    $0x80,%rsp
  0x00007f757047cd62: mov    %rax,0x78(%rsp)
  0x00007f757047cd67: mov    %rcx,0x70(%rsp)
  0x00007f757047cd6c: mov    %rdx,0x68(%rsp)
  0x00007f757047cd71: mov    %rbx,0x60(%rsp)
  0x00007f757047cd76: mov    %rbp,0x50(%rsp)
  0x00007f757047cd7b: mov    %rsi,0x48(%rsp)
  0x00007f757047cd80: mov    %rdi,0x40(%rsp)
  0x00007f757047cd85: mov    %r8,0x38(%rsp)
  0x00007f757047cd8a: mov    %r9,0x30(%rsp)
  0x00007f757047cd8f: mov    %r10,0x28(%rsp)
  0x00007f757047cd94: mov    %r11,0x20(%rsp)
  0x00007f757047cd99: mov    %r12,0x18(%rsp)
  0x00007f757047cd9e: mov    %r13,0x10(%rsp)
  0x00007f757047cda3: mov    %r14,0x8(%rsp)
  0x00007f757047cda8: mov    %r15,(%rsp)
  0x00007f757047cdac: sub    $0x200,%rsp
  0x00007f757047cdb3: fxsave64 (%rsp)
  0x00007f757047cdb8: mov    %rbx,%rdi
  0x00007f757047cdbb: mov    %rax,%rsi
  0x00007f757047cdbe: callq  0x00007f7585522bca
  0x00007f757047cdc3: fxrstor64 (%rsp)
  0x00007f757047cdc8: add    $0x200,%rsp
  0x00007f757047cdcf: mov    (%rsp),%r15
  0x00007f757047cdd3: mov    0x8(%rsp),%r14
  0x00007f757047cdd8: mov    0x10(%rsp),%r13
  0x00007f757047cddd: mov    0x18(%rsp),%r12
  0x00007f757047cde2: mov    0x20(%rsp),%r11
  0x00007f757047cde7: mov    0x28(%rsp),%r10
  0x00007f757047cdec: mov    0x30(%rsp),%r9
  0x00007f757047cdf1: mov    0x38(%rsp),%r8
  0x00007f757047cdf6: mov    0x40(%rsp),%rdi
  0x00007f757047cdfb: mov    0x48(%rsp),%rsi
  0x00007f757047ce00: mov    0x50(%rsp),%rbp
  0x00007f757047ce05: mov    0x60(%rsp),%rbx
  0x00007f757047ce0a: mov    0x68(%rsp),%rdx
  0x00007f757047ce0f: mov    0x70(%rsp),%rcx
  0x00007f757047ce14: mov    0x78(%rsp),%rax
  0x00007f757047ce19: add    $0x80,%rsp
  0x00007f757047ce20: add    $0x8,%rsp
  0x00007f757047ce24: popfq  
  0x00007f757047ce25: mov    %r13,%rsp
  0x00007f757047ce28: pop    %rax
  0x00007f757047ce29: mov    %rsp,%r13
  0x00007f757047ce2c: sub    $0x20,%rsp
  0x00007f757047ce30: mov    %rax,(%rsp)
  0x00007f757047ce34: mov    %rsi,0x10(%rsp)
  0x00007f757047ce39: mov    %rdx,0x8(%rsp)
  0x00007f757047ce3e: mov    0x40(%rbx),%rcx
  0x00007f757047ce42: jmpq   *%rcx

AHE@0x00007f75800c1eb0: 0xbb000000 i2c: 0x00007f757047cf20 c2i: 0x00007f757047d038 c2iUV: 0x00007f757047d00b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable$PrintStreamOrWriter;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047d038
  0x00007f757047cf20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047cf24: movabs $0x7f757036e3e0,%r11
  0x00007f757047cf2e: cmp    %r11,%rax
  0x00007f757047cf31: jbe    0x00007f757047cf4a
  0x00007f757047cf37: movabs $0x7f757046e3e0,%r11
  0x00007f757047cf41: cmp    %r11,%rax
  0x00007f757047cf44: jb     0x00007f757047cfe7
  0x00007f757047cf4a: movabs $0x7f7570369420,%r11
  0x00007f757047cf54: cmp    %r11,%rax
  0x00007f757047cf57: jbe    0x00007f757047cf70
  0x00007f757047cf5d: movabs $0x7f757036de58,%r11
  0x00007f757047cf67: cmp    %r11,%rax
  0x00007f757047cf6a: jb     0x00007f757047cfe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047cf70: mov    %rsp,-0x28(%rsp)
  0x00007f757047cf75: sub    $0x80,%rsp
  0x00007f757047cf7c: mov    %rax,0x78(%rsp)
  0x00007f757047cf81: mov    %rcx,0x70(%rsp)
  0x00007f757047cf86: mov    %rdx,0x68(%rsp)
  0x00007f757047cf8b: mov    %rbx,0x60(%rsp)
  0x00007f757047cf90: mov    %rbp,0x50(%rsp)
  0x00007f757047cf95: mov    %rsi,0x48(%rsp)
  0x00007f757047cf9a: mov    %rdi,0x40(%rsp)
  0x00007f757047cf9f: mov    %r8,0x38(%rsp)
  0x00007f757047cfa4: mov    %r9,0x30(%rsp)
  0x00007f757047cfa9: mov    %r10,0x28(%rsp)
  0x00007f757047cfae: mov    %r11,0x20(%rsp)
  0x00007f757047cfb3: mov    %r12,0x18(%rsp)
  0x00007f757047cfb8: mov    %r13,0x10(%rsp)
  0x00007f757047cfbd: mov    %r14,0x8(%rsp)
  0x00007f757047cfc2: mov    %r15,(%rsp)
  0x00007f757047cfc6: movabs $0x7f758592f470,%rdi
  0x00007f757047cfd0: movabs $0x7f757047cf70,%rsi
  0x00007f757047cfda: mov    %rsp,%rdx
  0x00007f757047cfdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047cfe1: callq  0x00007f75853729fa
  0x00007f757047cfe6: hlt    
  ;; } verify_i2ce 
  0x00007f757047cfe7: mov    %rsp,%r11
  0x00007f757047cfea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047cfee: push   %rax
  0x00007f757047cfef: mov    %r11,%rax
  0x00007f757047cff2: mov    0x50(%rbx),%r11
  0x00007f757047cff6: mov    0x10(%rax),%rsi
  0x00007f757047cffa: mov    0x8(%rax),%rdx
  0x00007f757047cffe: mov    %rbx,0x258(%r15)
  0x00007f757047d005: mov    %rbx,%rax
  0x00007f757047d008: jmpq   *%r11
  0x00007f757047d00b: mov    0x8(%rsi),%ebx
  0x00007f757047d00e: shl    $0x3,%rbx
  0x00007f757047d012: cmp    0x10(%rax),%rbx
  0x00007f757047d016: mov    0x8(%rax),%rbx
  0x00007f757047d01a: je     0x00007f757047d025
  0x00007f757047d020: jmpq   0x00007f757046ec40
  0x00007f757047d025: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d02d: je     0x00007f757047d128
  0x00007f757047d033: jmpq   0x00007f757046ec40
  0x00007f757047d038: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d040: je     0x00007f757047d128
  0x00007f757047d046: mov    %rsp,%r13
  0x00007f757047d049: mov    (%rsp),%rax
  0x00007f757047d04d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d051: pushfq 
  0x00007f757047d052: sub    $0x8,%rsp
  0x00007f757047d056: mov    %rsp,-0x28(%rsp)
  0x00007f757047d05b: sub    $0x80,%rsp
  0x00007f757047d062: mov    %rax,0x78(%rsp)
  0x00007f757047d067: mov    %rcx,0x70(%rsp)
  0x00007f757047d06c: mov    %rdx,0x68(%rsp)
  0x00007f757047d071: mov    %rbx,0x60(%rsp)
  0x00007f757047d076: mov    %rbp,0x50(%rsp)
  0x00007f757047d07b: mov    %rsi,0x48(%rsp)
  0x00007f757047d080: mov    %rdi,0x40(%rsp)
  0x00007f757047d085: mov    %r8,0x38(%rsp)
  0x00007f757047d08a: mov    %r9,0x30(%rsp)
  0x00007f757047d08f: mov    %r10,0x28(%rsp)
  0x00007f757047d094: mov    %r11,0x20(%rsp)
  0x00007f757047d099: mov    %r12,0x18(%rsp)
  0x00007f757047d09e: mov    %r13,0x10(%rsp)
  0x00007f757047d0a3: mov    %r14,0x8(%rsp)
  0x00007f757047d0a8: mov    %r15,(%rsp)
  0x00007f757047d0ac: sub    $0x200,%rsp
  0x00007f757047d0b3: fxsave64 (%rsp)
  0x00007f757047d0b8: mov    %rbx,%rdi
  0x00007f757047d0bb: mov    %rax,%rsi
  0x00007f757047d0be: callq  0x00007f7585522bca
  0x00007f757047d0c3: fxrstor64 (%rsp)
  0x00007f757047d0c8: add    $0x200,%rsp
  0x00007f757047d0cf: mov    (%rsp),%r15
  0x00007f757047d0d3: mov    0x8(%rsp),%r14
  0x00007f757047d0d8: mov    0x10(%rsp),%r13
  0x00007f757047d0dd: mov    0x18(%rsp),%r12
  0x00007f757047d0e2: mov    0x20(%rsp),%r11
  0x00007f757047d0e7: mov    0x28(%rsp),%r10
  0x00007f757047d0ec: mov    0x30(%rsp),%r9
  0x00007f757047d0f1: mov    0x38(%rsp),%r8
  0x00007f757047d0f6: mov    0x40(%rsp),%rdi
  0x00007f757047d0fb: mov    0x48(%rsp),%rsi
  0x00007f757047d100: mov    0x50(%rsp),%rbp
  0x00007f757047d105: mov    0x60(%rsp),%rbx
  0x00007f757047d10a: mov    0x68(%rsp),%rdx
  0x00007f757047d10f: mov    0x70(%rsp),%rcx
  0x00007f757047d114: mov    0x78(%rsp),%rax
  0x00007f757047d119: add    $0x80,%rsp
  0x00007f757047d120: add    $0x8,%rsp
  0x00007f757047d124: popfq  
  0x00007f757047d125: mov    %r13,%rsp
  0x00007f757047d128: pop    %rax
  0x00007f757047d129: mov    %rsp,%r13
  0x00007f757047d12c: sub    $0x20,%rsp
  0x00007f757047d130: mov    %rax,(%rsp)
  0x00007f757047d134: mov    %rsi,0x10(%rsp)
  0x00007f757047d139: mov    %rdx,0x8(%rsp)
  0x00007f757047d13e: mov    0x40(%rbx),%rcx
  0x00007f757047d142: jmpq   *%rcx

AHE@0x00007f75800c1ef8: 0x i2c: 0x00007f757047d220 c2i: 0x00007f757047d330 c2iUV: 0x00007f757047d303
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f757047d330
  0x00007f757047d220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047d224: movabs $0x7f757036e3e0,%r11
  0x00007f757047d22e: cmp    %r11,%rax
  0x00007f757047d231: jbe    0x00007f757047d24a
  0x00007f757047d237: movabs $0x7f757046e3e0,%r11
  0x00007f757047d241: cmp    %r11,%rax
  0x00007f757047d244: jb     0x00007f757047d2e7
  0x00007f757047d24a: movabs $0x7f7570369420,%r11
  0x00007f757047d254: cmp    %r11,%rax
  0x00007f757047d257: jbe    0x00007f757047d270
  0x00007f757047d25d: movabs $0x7f757036de58,%r11
  0x00007f757047d267: cmp    %r11,%rax
  0x00007f757047d26a: jb     0x00007f757047d2e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047d270: mov    %rsp,-0x28(%rsp)
  0x00007f757047d275: sub    $0x80,%rsp
  0x00007f757047d27c: mov    %rax,0x78(%rsp)
  0x00007f757047d281: mov    %rcx,0x70(%rsp)
  0x00007f757047d286: mov    %rdx,0x68(%rsp)
  0x00007f757047d28b: mov    %rbx,0x60(%rsp)
  0x00007f757047d290: mov    %rbp,0x50(%rsp)
  0x00007f757047d295: mov    %rsi,0x48(%rsp)
  0x00007f757047d29a: mov    %rdi,0x40(%rsp)
  0x00007f757047d29f: mov    %r8,0x38(%rsp)
  0x00007f757047d2a4: mov    %r9,0x30(%rsp)
  0x00007f757047d2a9: mov    %r10,0x28(%rsp)
  0x00007f757047d2ae: mov    %r11,0x20(%rsp)
  0x00007f757047d2b3: mov    %r12,0x18(%rsp)
  0x00007f757047d2b8: mov    %r13,0x10(%rsp)
  0x00007f757047d2bd: mov    %r14,0x8(%rsp)
  0x00007f757047d2c2: mov    %r15,(%rsp)
  0x00007f757047d2c6: movabs $0x7f758592f470,%rdi
  0x00007f757047d2d0: movabs $0x7f757047d270,%rsi
  0x00007f757047d2da: mov    %rsp,%rdx
  0x00007f757047d2dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d2e1: callq  0x00007f75853729fa
  0x00007f757047d2e6: hlt    
  ;; } verify_i2ce 
  0x00007f757047d2e7: mov    %rsp,%r11
  0x00007f757047d2ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d2ee: push   %rax
  0x00007f757047d2ef: mov    %r11,%rax
  0x00007f757047d2f2: mov    0x50(%rbx),%r11
  0x00007f757047d2f6: mov    %rbx,0x258(%r15)
  0x00007f757047d2fd: mov    %rbx,%rax
  0x00007f757047d300: jmpq   *%r11
  0x00007f757047d303: mov    0x8(%rsi),%ebx
  0x00007f757047d306: shl    $0x3,%rbx
  0x00007f757047d30a: cmp    0x10(%rax),%rbx
  0x00007f757047d30e: mov    0x8(%rax),%rbx
  0x00007f757047d312: je     0x00007f757047d31d
  0x00007f757047d318: jmpq   0x00007f757046ec40
  0x00007f757047d31d: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d325: je     0x00007f757047d420
  0x00007f757047d32b: jmpq   0x00007f757046ec40
  0x00007f757047d330: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d338: je     0x00007f757047d420
  0x00007f757047d33e: mov    %rsp,%r13
  0x00007f757047d341: mov    (%rsp),%rax
  0x00007f757047d345: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d349: pushfq 
  0x00007f757047d34a: sub    $0x8,%rsp
  0x00007f757047d34e: mov    %rsp,-0x28(%rsp)
  0x00007f757047d353: sub    $0x80,%rsp
  0x00007f757047d35a: mov    %rax,0x78(%rsp)
  0x00007f757047d35f: mov    %rcx,0x70(%rsp)
  0x00007f757047d364: mov    %rdx,0x68(%rsp)
  0x00007f757047d369: mov    %rbx,0x60(%rsp)
  0x00007f757047d36e: mov    %rbp,0x50(%rsp)
  0x00007f757047d373: mov    %rsi,0x48(%rsp)
  0x00007f757047d378: mov    %rdi,0x40(%rsp)
  0x00007f757047d37d: mov    %r8,0x38(%rsp)
  0x00007f757047d382: mov    %r9,0x30(%rsp)
  0x00007f757047d387: mov    %r10,0x28(%rsp)
  0x00007f757047d38c: mov    %r11,0x20(%rsp)
  0x00007f757047d391: mov    %r12,0x18(%rsp)
  0x00007f757047d396: mov    %r13,0x10(%rsp)
  0x00007f757047d39b: mov    %r14,0x8(%rsp)
  0x00007f757047d3a0: mov    %r15,(%rsp)
  0x00007f757047d3a4: sub    $0x200,%rsp
  0x00007f757047d3ab: fxsave64 (%rsp)
  0x00007f757047d3b0: mov    %rbx,%rdi
  0x00007f757047d3b3: mov    %rax,%rsi
  0x00007f757047d3b6: callq  0x00007f7585522bca
  0x00007f757047d3bb: fxrstor64 (%rsp)
  0x00007f757047d3c0: add    $0x200,%rsp
  0x00007f757047d3c7: mov    (%rsp),%r15
  0x00007f757047d3cb: mov    0x8(%rsp),%r14
  0x00007f757047d3d0: mov    0x10(%rsp),%r13
  0x00007f757047d3d5: mov    0x18(%rsp),%r12
  0x00007f757047d3da: mov    0x20(%rsp),%r11
  0x00007f757047d3df: mov    0x28(%rsp),%r10
  0x00007f757047d3e4: mov    0x30(%rsp),%r9
  0x00007f757047d3e9: mov    0x38(%rsp),%r8
  0x00007f757047d3ee: mov    0x40(%rsp),%rdi
  0x00007f757047d3f3: mov    0x48(%rsp),%rsi
  0x00007f757047d3f8: mov    0x50(%rsp),%rbp
  0x00007f757047d3fd: mov    0x60(%rsp),%rbx
  0x00007f757047d402: mov    0x68(%rsp),%rdx
  0x00007f757047d407: mov    0x70(%rsp),%rcx
  0x00007f757047d40c: mov    0x78(%rsp),%rax
  0x00007f757047d411: add    $0x80,%rsp
  0x00007f757047d418: add    $0x8,%rsp
  0x00007f757047d41c: popfq  
  0x00007f757047d41d: mov    %r13,%rsp
  0x00007f757047d420: pop    %rax
  0x00007f757047d421: mov    %rsp,%r13
  0x00007f757047d424: sub    $0x10,%rsp
  0x00007f757047d428: mov    %rax,(%rsp)
  0x00007f757047d42c: mov    0x40(%rbx),%rcx
  0x00007f757047d430: jmpq   *%rcx

AHE@0x00007f75800c1f40: 0xb0000000 i2c: 0x00007f757047d4e0 c2i: 0x00007f757047d5f4 c2iUV: 0x00007f757047d5c7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757047d5f4
  0x00007f757047d4e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047d4e4: movabs $0x7f757036e3e0,%r11
  0x00007f757047d4ee: cmp    %r11,%rax
  0x00007f757047d4f1: jbe    0x00007f757047d50a
  0x00007f757047d4f7: movabs $0x7f757046e3e0,%r11
  0x00007f757047d501: cmp    %r11,%rax
  0x00007f757047d504: jb     0x00007f757047d5a7
  0x00007f757047d50a: movabs $0x7f7570369420,%r11
  0x00007f757047d514: cmp    %r11,%rax
  0x00007f757047d517: jbe    0x00007f757047d530
  0x00007f757047d51d: movabs $0x7f757036de58,%r11
  0x00007f757047d527: cmp    %r11,%rax
  0x00007f757047d52a: jb     0x00007f757047d5a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047d530: mov    %rsp,-0x28(%rsp)
  0x00007f757047d535: sub    $0x80,%rsp
  0x00007f757047d53c: mov    %rax,0x78(%rsp)
  0x00007f757047d541: mov    %rcx,0x70(%rsp)
  0x00007f757047d546: mov    %rdx,0x68(%rsp)
  0x00007f757047d54b: mov    %rbx,0x60(%rsp)
  0x00007f757047d550: mov    %rbp,0x50(%rsp)
  0x00007f757047d555: mov    %rsi,0x48(%rsp)
  0x00007f757047d55a: mov    %rdi,0x40(%rsp)
  0x00007f757047d55f: mov    %r8,0x38(%rsp)
  0x00007f757047d564: mov    %r9,0x30(%rsp)
  0x00007f757047d569: mov    %r10,0x28(%rsp)
  0x00007f757047d56e: mov    %r11,0x20(%rsp)
  0x00007f757047d573: mov    %r12,0x18(%rsp)
  0x00007f757047d578: mov    %r13,0x10(%rsp)
  0x00007f757047d57d: mov    %r14,0x8(%rsp)
  0x00007f757047d582: mov    %r15,(%rsp)
  0x00007f757047d586: movabs $0x7f758592f470,%rdi
  0x00007f757047d590: movabs $0x7f757047d530,%rsi
  0x00007f757047d59a: mov    %rsp,%rdx
  0x00007f757047d59d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d5a1: callq  0x00007f75853729fa
  0x00007f757047d5a6: hlt    
  ;; } verify_i2ce 
  0x00007f757047d5a7: mov    %rsp,%r11
  0x00007f757047d5aa: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d5ae: push   %rax
  0x00007f757047d5af: mov    %r11,%rax
  0x00007f757047d5b2: mov    0x50(%rbx),%r11
  0x00007f757047d5b6: mov    0x8(%rax),%rsi
  0x00007f757047d5ba: mov    %rbx,0x258(%r15)
  0x00007f757047d5c1: mov    %rbx,%rax
  0x00007f757047d5c4: jmpq   *%r11
  0x00007f757047d5c7: mov    0x8(%rsi),%ebx
  0x00007f757047d5ca: shl    $0x3,%rbx
  0x00007f757047d5ce: cmp    0x10(%rax),%rbx
  0x00007f757047d5d2: mov    0x8(%rax),%rbx
  0x00007f757047d5d6: je     0x00007f757047d5e1
  0x00007f757047d5dc: jmpq   0x00007f757046ec40
  0x00007f757047d5e1: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d5e9: je     0x00007f757047d6e4
  0x00007f757047d5ef: jmpq   0x00007f757046ec40
  0x00007f757047d5f4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d5fc: je     0x00007f757047d6e4
  0x00007f757047d602: mov    %rsp,%r13
  0x00007f757047d605: mov    (%rsp),%rax
  0x00007f757047d609: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d60d: pushfq 
  0x00007f757047d60e: sub    $0x8,%rsp
  0x00007f757047d612: mov    %rsp,-0x28(%rsp)
  0x00007f757047d617: sub    $0x80,%rsp
  0x00007f757047d61e: mov    %rax,0x78(%rsp)
  0x00007f757047d623: mov    %rcx,0x70(%rsp)
  0x00007f757047d628: mov    %rdx,0x68(%rsp)
  0x00007f757047d62d: mov    %rbx,0x60(%rsp)
  0x00007f757047d632: mov    %rbp,0x50(%rsp)
  0x00007f757047d637: mov    %rsi,0x48(%rsp)
  0x00007f757047d63c: mov    %rdi,0x40(%rsp)
  0x00007f757047d641: mov    %r8,0x38(%rsp)
  0x00007f757047d646: mov    %r9,0x30(%rsp)
  0x00007f757047d64b: mov    %r10,0x28(%rsp)
  0x00007f757047d650: mov    %r11,0x20(%rsp)
  0x00007f757047d655: mov    %r12,0x18(%rsp)
  0x00007f757047d65a: mov    %r13,0x10(%rsp)
  0x00007f757047d65f: mov    %r14,0x8(%rsp)
  0x00007f757047d664: mov    %r15,(%rsp)
  0x00007f757047d668: sub    $0x200,%rsp
  0x00007f757047d66f: fxsave64 (%rsp)
  0x00007f757047d674: mov    %rbx,%rdi
  0x00007f757047d677: mov    %rax,%rsi
  0x00007f757047d67a: callq  0x00007f7585522bca
  0x00007f757047d67f: fxrstor64 (%rsp)
  0x00007f757047d684: add    $0x200,%rsp
  0x00007f757047d68b: mov    (%rsp),%r15
  0x00007f757047d68f: mov    0x8(%rsp),%r14
  0x00007f757047d694: mov    0x10(%rsp),%r13
  0x00007f757047d699: mov    0x18(%rsp),%r12
  0x00007f757047d69e: mov    0x20(%rsp),%r11
  0x00007f757047d6a3: mov    0x28(%rsp),%r10
  0x00007f757047d6a8: mov    0x30(%rsp),%r9
  0x00007f757047d6ad: mov    0x38(%rsp),%r8
  0x00007f757047d6b2: mov    0x40(%rsp),%rdi
  0x00007f757047d6b7: mov    0x48(%rsp),%rsi
  0x00007f757047d6bc: mov    0x50(%rsp),%rbp
  0x00007f757047d6c1: mov    0x60(%rsp),%rbx
  0x00007f757047d6c6: mov    0x68(%rsp),%rdx
  0x00007f757047d6cb: mov    0x70(%rsp),%rcx
  0x00007f757047d6d0: mov    0x78(%rsp),%rax
  0x00007f757047d6d5: add    $0x80,%rsp
  0x00007f757047d6dc: add    $0x8,%rsp
  0x00007f757047d6e0: popfq  
  0x00007f757047d6e1: mov    %r13,%rsp
  0x00007f757047d6e4: pop    %rax
  0x00007f757047d6e5: mov    %rsp,%r13
  0x00007f757047d6e8: sub    $0x10,%rsp
  0x00007f757047d6ec: mov    %rax,(%rsp)
  0x00007f757047d6f0: mov    %rsi,0x8(%rsp)
  0x00007f757047d6f5: mov    0x40(%rbx),%rcx
  0x00007f757047d6f9: jmpq   *%rcx

AHE@0x00007f75800c1f88: 0xbb000000 i2c: 0x00007f757047d7a0 c2i: 0x00007f757047d8b8 c2iUV: 0x00007f757047d88b
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047d8b8
  0x00007f757047d7a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047d7a4: movabs $0x7f757036e3e0,%r11
  0x00007f757047d7ae: cmp    %r11,%rax
  0x00007f757047d7b1: jbe    0x00007f757047d7ca
  0x00007f757047d7b7: movabs $0x7f757046e3e0,%r11
  0x00007f757047d7c1: cmp    %r11,%rax
  0x00007f757047d7c4: jb     0x00007f757047d867
  0x00007f757047d7ca: movabs $0x7f7570369420,%r11
  0x00007f757047d7d4: cmp    %r11,%rax
  0x00007f757047d7d7: jbe    0x00007f757047d7f0
  0x00007f757047d7dd: movabs $0x7f757036de58,%r11
  0x00007f757047d7e7: cmp    %r11,%rax
  0x00007f757047d7ea: jb     0x00007f757047d867
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047d7f0: mov    %rsp,-0x28(%rsp)
  0x00007f757047d7f5: sub    $0x80,%rsp
  0x00007f757047d7fc: mov    %rax,0x78(%rsp)
  0x00007f757047d801: mov    %rcx,0x70(%rsp)
  0x00007f757047d806: mov    %rdx,0x68(%rsp)
  0x00007f757047d80b: mov    %rbx,0x60(%rsp)
  0x00007f757047d810: mov    %rbp,0x50(%rsp)
  0x00007f757047d815: mov    %rsi,0x48(%rsp)
  0x00007f757047d81a: mov    %rdi,0x40(%rsp)
  0x00007f757047d81f: mov    %r8,0x38(%rsp)
  0x00007f757047d824: mov    %r9,0x30(%rsp)
  0x00007f757047d829: mov    %r10,0x28(%rsp)
  0x00007f757047d82e: mov    %r11,0x20(%rsp)
  0x00007f757047d833: mov    %r12,0x18(%rsp)
  0x00007f757047d838: mov    %r13,0x10(%rsp)
  0x00007f757047d83d: mov    %r14,0x8(%rsp)
  0x00007f757047d842: mov    %r15,(%rsp)
  0x00007f757047d846: movabs $0x7f758592f470,%rdi
  0x00007f757047d850: movabs $0x7f757047d7f0,%rsi
  0x00007f757047d85a: mov    %rsp,%rdx
  0x00007f757047d85d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d861: callq  0x00007f75853729fa
  0x00007f757047d866: hlt    
  ;; } verify_i2ce 
  0x00007f757047d867: mov    %rsp,%r11
  0x00007f757047d86a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d86e: push   %rax
  0x00007f757047d86f: mov    %r11,%rax
  0x00007f757047d872: mov    0x50(%rbx),%r11
  0x00007f757047d876: mov    0x10(%rax),%rsi
  0x00007f757047d87a: mov    0x8(%rax),%rdx
  0x00007f757047d87e: mov    %rbx,0x258(%r15)
  0x00007f757047d885: mov    %rbx,%rax
  0x00007f757047d888: jmpq   *%r11
  0x00007f757047d88b: mov    0x8(%rsi),%ebx
  0x00007f757047d88e: shl    $0x3,%rbx
  0x00007f757047d892: cmp    0x10(%rax),%rbx
  0x00007f757047d896: mov    0x8(%rax),%rbx
  0x00007f757047d89a: je     0x00007f757047d8a5
  0x00007f757047d8a0: jmpq   0x00007f757046ec40
  0x00007f757047d8a5: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d8ad: je     0x00007f757047d9a8
  0x00007f757047d8b3: jmpq   0x00007f757046ec40
  0x00007f757047d8b8: cmpq   $0x0,0x58(%rbx)
  0x00007f757047d8c0: je     0x00007f757047d9a8
  0x00007f757047d8c6: mov    %rsp,%r13
  0x00007f757047d8c9: mov    (%rsp),%rax
  0x00007f757047d8cd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047d8d1: pushfq 
  0x00007f757047d8d2: sub    $0x8,%rsp
  0x00007f757047d8d6: mov    %rsp,-0x28(%rsp)
  0x00007f757047d8db: sub    $0x80,%rsp
  0x00007f757047d8e2: mov    %rax,0x78(%rsp)
  0x00007f757047d8e7: mov    %rcx,0x70(%rsp)
  0x00007f757047d8ec: mov    %rdx,0x68(%rsp)
  0x00007f757047d8f1: mov    %rbx,0x60(%rsp)
  0x00007f757047d8f6: mov    %rbp,0x50(%rsp)
  0x00007f757047d8fb: mov    %rsi,0x48(%rsp)
  0x00007f757047d900: mov    %rdi,0x40(%rsp)
  0x00007f757047d905: mov    %r8,0x38(%rsp)
  0x00007f757047d90a: mov    %r9,0x30(%rsp)
  0x00007f757047d90f: mov    %r10,0x28(%rsp)
  0x00007f757047d914: mov    %r11,0x20(%rsp)
  0x00007f757047d919: mov    %r12,0x18(%rsp)
  0x00007f757047d91e: mov    %r13,0x10(%rsp)
  0x00007f757047d923: mov    %r14,0x8(%rsp)
  0x00007f757047d928: mov    %r15,(%rsp)
  0x00007f757047d92c: sub    $0x200,%rsp
  0x00007f757047d933: fxsave64 (%rsp)
  0x00007f757047d938: mov    %rbx,%rdi
  0x00007f757047d93b: mov    %rax,%rsi
  0x00007f757047d93e: callq  0x00007f7585522bca
  0x00007f757047d943: fxrstor64 (%rsp)
  0x00007f757047d948: add    $0x200,%rsp
  0x00007f757047d94f: mov    (%rsp),%r15
  0x00007f757047d953: mov    0x8(%rsp),%r14
  0x00007f757047d958: mov    0x10(%rsp),%r13
  0x00007f757047d95d: mov    0x18(%rsp),%r12
  0x00007f757047d962: mov    0x20(%rsp),%r11
  0x00007f757047d967: mov    0x28(%rsp),%r10
  0x00007f757047d96c: mov    0x30(%rsp),%r9
  0x00007f757047d971: mov    0x38(%rsp),%r8
  0x00007f757047d976: mov    0x40(%rsp),%rdi
  0x00007f757047d97b: mov    0x48(%rsp),%rsi
  0x00007f757047d980: mov    0x50(%rsp),%rbp
  0x00007f757047d985: mov    0x60(%rsp),%rbx
  0x00007f757047d98a: mov    0x68(%rsp),%rdx
  0x00007f757047d98f: mov    0x70(%rsp),%rcx
  0x00007f757047d994: mov    0x78(%rsp),%rax
  0x00007f757047d999: add    $0x80,%rsp
  0x00007f757047d9a0: add    $0x8,%rsp
  0x00007f757047d9a4: popfq  
  0x00007f757047d9a5: mov    %r13,%rsp
  0x00007f757047d9a8: pop    %rax
  0x00007f757047d9a9: mov    %rsp,%r13
  0x00007f757047d9ac: sub    $0x20,%rsp
  0x00007f757047d9b0: mov    %rax,(%rsp)
  0x00007f757047d9b4: mov    %rsi,0x10(%rsp)
  0x00007f757047d9b9: mov    %rdx,0x8(%rsp)
  0x00007f757047d9be: mov    0x40(%rbx),%rcx
  0x00007f757047d9c2: jmpq   *%rcx

AHE@0x00007f75800c1fd0: 0xbbb00000 i2c: 0x00007f757047daa0 c2i: 0x00007f757047dbbc c2iUV: 0x00007f757047db8f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (557 bytes generated)
c2i argument handler starts at 0x7f757047dbbc
  0x00007f757047daa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047daa4: movabs $0x7f757036e3e0,%r11
  0x00007f757047daae: cmp    %r11,%rax
  0x00007f757047dab1: jbe    0x00007f757047daca
  0x00007f757047dab7: movabs $0x7f757046e3e0,%r11
  0x00007f757047dac1: cmp    %r11,%rax
  0x00007f757047dac4: jb     0x00007f757047db67
  0x00007f757047daca: movabs $0x7f7570369420,%r11
  0x00007f757047dad4: cmp    %r11,%rax
  0x00007f757047dad7: jbe    0x00007f757047daf0
  0x00007f757047dadd: movabs $0x7f757036de58,%r11
  0x00007f757047dae7: cmp    %r11,%rax
  0x00007f757047daea: jb     0x00007f757047db67
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047daf0: mov    %rsp,-0x28(%rsp)
  0x00007f757047daf5: sub    $0x80,%rsp
  0x00007f757047dafc: mov    %rax,0x78(%rsp)
  0x00007f757047db01: mov    %rcx,0x70(%rsp)
  0x00007f757047db06: mov    %rdx,0x68(%rsp)
  0x00007f757047db0b: mov    %rbx,0x60(%rsp)
  0x00007f757047db10: mov    %rbp,0x50(%rsp)
  0x00007f757047db15: mov    %rsi,0x48(%rsp)
  0x00007f757047db1a: mov    %rdi,0x40(%rsp)
  0x00007f757047db1f: mov    %r8,0x38(%rsp)
  0x00007f757047db24: mov    %r9,0x30(%rsp)
  0x00007f757047db29: mov    %r10,0x28(%rsp)
  0x00007f757047db2e: mov    %r11,0x20(%rsp)
  0x00007f757047db33: mov    %r12,0x18(%rsp)
  0x00007f757047db38: mov    %r13,0x10(%rsp)
  0x00007f757047db3d: mov    %r14,0x8(%rsp)
  0x00007f757047db42: mov    %r15,(%rsp)
  0x00007f757047db46: movabs $0x7f758592f470,%rdi
  0x00007f757047db50: movabs $0x7f757047daf0,%rsi
  0x00007f757047db5a: mov    %rsp,%rdx
  0x00007f757047db5d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047db61: callq  0x00007f75853729fa
  0x00007f757047db66: hlt    
  ;; } verify_i2ce 
  0x00007f757047db67: mov    %rsp,%r11
  0x00007f757047db6a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047db6e: push   %rax
  0x00007f757047db6f: mov    %r11,%rax
  0x00007f757047db72: mov    0x50(%rbx),%r11
  0x00007f757047db76: mov    0x18(%rax),%rsi
  0x00007f757047db7a: mov    0x10(%rax),%rdx
  0x00007f757047db7e: mov    0x8(%rax),%rcx
  0x00007f757047db82: mov    %rbx,0x258(%r15)
  0x00007f757047db89: mov    %rbx,%rax
  0x00007f757047db8c: jmpq   *%r11
  0x00007f757047db8f: mov    0x8(%rsi),%ebx
  0x00007f757047db92: shl    $0x3,%rbx
  0x00007f757047db96: cmp    0x10(%rax),%rbx
  0x00007f757047db9a: mov    0x8(%rax),%rbx
  0x00007f757047db9e: je     0x00007f757047dba9
  0x00007f757047dba4: jmpq   0x00007f757046ec40
  0x00007f757047dba9: cmpq   $0x0,0x58(%rbx)
  0x00007f757047dbb1: je     0x00007f757047dcac
  0x00007f757047dbb7: jmpq   0x00007f757046ec40
  0x00007f757047dbbc: cmpq   $0x0,0x58(%rbx)
  0x00007f757047dbc4: je     0x00007f757047dcac
  0x00007f757047dbca: mov    %rsp,%r13
  0x00007f757047dbcd: mov    (%rsp),%rax
  0x00007f757047dbd1: and    $0xfffffffffffffff0,%rsp
  0x00007f757047dbd5: pushfq 
  0x00007f757047dbd6: sub    $0x8,%rsp
  0x00007f757047dbda: mov    %rsp,-0x28(%rsp)
  0x00007f757047dbdf: sub    $0x80,%rsp
  0x00007f757047dbe6: mov    %rax,0x78(%rsp)
  0x00007f757047dbeb: mov    %rcx,0x70(%rsp)
  0x00007f757047dbf0: mov    %rdx,0x68(%rsp)
  0x00007f757047dbf5: mov    %rbx,0x60(%rsp)
  0x00007f757047dbfa: mov    %rbp,0x50(%rsp)
  0x00007f757047dbff: mov    %rsi,0x48(%rsp)
  0x00007f757047dc04: mov    %rdi,0x40(%rsp)
  0x00007f757047dc09: mov    %r8,0x38(%rsp)
  0x00007f757047dc0e: mov    %r9,0x30(%rsp)
  0x00007f757047dc13: mov    %r10,0x28(%rsp)
  0x00007f757047dc18: mov    %r11,0x20(%rsp)
  0x00007f757047dc1d: mov    %r12,0x18(%rsp)
  0x00007f757047dc22: mov    %r13,0x10(%rsp)
  0x00007f757047dc27: mov    %r14,0x8(%rsp)
  0x00007f757047dc2c: mov    %r15,(%rsp)
  0x00007f757047dc30: sub    $0x200,%rsp
  0x00007f757047dc37: fxsave64 (%rsp)
  0x00007f757047dc3c: mov    %rbx,%rdi
  0x00007f757047dc3f: mov    %rax,%rsi
  0x00007f757047dc42: callq  0x00007f7585522bca
  0x00007f757047dc47: fxrstor64 (%rsp)
  0x00007f757047dc4c: add    $0x200,%rsp
  0x00007f757047dc53: mov    (%rsp),%r15
  0x00007f757047dc57: mov    0x8(%rsp),%r14
  0x00007f757047dc5c: mov    0x10(%rsp),%r13
  0x00007f757047dc61: mov    0x18(%rsp),%r12
  0x00007f757047dc66: mov    0x20(%rsp),%r11
  0x00007f757047dc6b: mov    0x28(%rsp),%r10
  0x00007f757047dc70: mov    0x30(%rsp),%r9
  0x00007f757047dc75: mov    0x38(%rsp),%r8
  0x00007f757047dc7a: mov    0x40(%rsp),%rdi
  0x00007f757047dc7f: mov    0x48(%rsp),%rsi
  0x00007f757047dc84: mov    0x50(%rsp),%rbp
  0x00007f757047dc89: mov    0x60(%rsp),%rbx
  0x00007f757047dc8e: mov    0x68(%rsp),%rdx
  0x00007f757047dc93: mov    0x70(%rsp),%rcx
  0x00007f757047dc98: mov    0x78(%rsp),%rax
  0x00007f757047dc9d: add    $0x80,%rsp
  0x00007f757047dca4: add    $0x8,%rsp
  0x00007f757047dca8: popfq  
  0x00007f757047dca9: mov    %r13,%rsp
  0x00007f757047dcac: pop    %rax
  0x00007f757047dcad: mov    %rsp,%r13
  0x00007f757047dcb0: sub    $0x20,%rsp
  0x00007f757047dcb4: mov    %rax,(%rsp)
  0x00007f757047dcb8: mov    %rsi,0x18(%rsp)
  0x00007f757047dcbd: mov    %rdx,0x10(%rsp)
  0x00007f757047dcc2: mov    %rcx,0x8(%rsp)
  0x00007f757047dcc7: mov    0x40(%rbx),%rcx
  0x00007f757047dccb: jmpq   *%rcx

AHE@0x00007f75800c2018: 0xbb000000 i2c: 0x00007f757047dda0 c2i: 0x00007f757047deb8 c2iUV: 0x00007f757047de8b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047deb8
  0x00007f757047dda0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047dda4: movabs $0x7f757036e3e0,%r11
  0x00007f757047ddae: cmp    %r11,%rax
  0x00007f757047ddb1: jbe    0x00007f757047ddca
  0x00007f757047ddb7: movabs $0x7f757046e3e0,%r11
  0x00007f757047ddc1: cmp    %r11,%rax
  0x00007f757047ddc4: jb     0x00007f757047de67
  0x00007f757047ddca: movabs $0x7f7570369420,%r11
  0x00007f757047ddd4: cmp    %r11,%rax
  0x00007f757047ddd7: jbe    0x00007f757047ddf0
  0x00007f757047dddd: movabs $0x7f757036de58,%r11
  0x00007f757047dde7: cmp    %r11,%rax
  0x00007f757047ddea: jb     0x00007f757047de67
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047ddf0: mov    %rsp,-0x28(%rsp)
  0x00007f757047ddf5: sub    $0x80,%rsp
  0x00007f757047ddfc: mov    %rax,0x78(%rsp)
  0x00007f757047de01: mov    %rcx,0x70(%rsp)
  0x00007f757047de06: mov    %rdx,0x68(%rsp)
  0x00007f757047de0b: mov    %rbx,0x60(%rsp)
  0x00007f757047de10: mov    %rbp,0x50(%rsp)
  0x00007f757047de15: mov    %rsi,0x48(%rsp)
  0x00007f757047de1a: mov    %rdi,0x40(%rsp)
  0x00007f757047de1f: mov    %r8,0x38(%rsp)
  0x00007f757047de24: mov    %r9,0x30(%rsp)
  0x00007f757047de29: mov    %r10,0x28(%rsp)
  0x00007f757047de2e: mov    %r11,0x20(%rsp)
  0x00007f757047de33: mov    %r12,0x18(%rsp)
  0x00007f757047de38: mov    %r13,0x10(%rsp)
  0x00007f757047de3d: mov    %r14,0x8(%rsp)
  0x00007f757047de42: mov    %r15,(%rsp)
  0x00007f757047de46: movabs $0x7f758592f470,%rdi
  0x00007f757047de50: movabs $0x7f757047ddf0,%rsi
  0x00007f757047de5a: mov    %rsp,%rdx
  0x00007f757047de5d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047de61: callq  0x00007f75853729fa
  0x00007f757047de66: hlt    
  ;; } verify_i2ce 
  0x00007f757047de67: mov    %rsp,%r11
  0x00007f757047de6a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047de6e: push   %rax
  0x00007f757047de6f: mov    %r11,%rax
  0x00007f757047de72: mov    0x50(%rbx),%r11
  0x00007f757047de76: mov    0x10(%rax),%rsi
  0x00007f757047de7a: mov    0x8(%rax),%rdx
  0x00007f757047de7e: mov    %rbx,0x258(%r15)
  0x00007f757047de85: mov    %rbx,%rax
  0x00007f757047de88: jmpq   *%r11
  0x00007f757047de8b: mov    0x8(%rsi),%ebx
  0x00007f757047de8e: shl    $0x3,%rbx
  0x00007f757047de92: cmp    0x10(%rax),%rbx
  0x00007f757047de96: mov    0x8(%rax),%rbx
  0x00007f757047de9a: je     0x00007f757047dea5
  0x00007f757047dea0: jmpq   0x00007f757046ec40
  0x00007f757047dea5: cmpq   $0x0,0x58(%rbx)
  0x00007f757047dead: je     0x00007f757047dfa8
  0x00007f757047deb3: jmpq   0x00007f757046ec40
  0x00007f757047deb8: cmpq   $0x0,0x58(%rbx)
  0x00007f757047dec0: je     0x00007f757047dfa8
  0x00007f757047dec6: mov    %rsp,%r13
  0x00007f757047dec9: mov    (%rsp),%rax
  0x00007f757047decd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ded1: pushfq 
  0x00007f757047ded2: sub    $0x8,%rsp
  0x00007f757047ded6: mov    %rsp,-0x28(%rsp)
  0x00007f757047dedb: sub    $0x80,%rsp
  0x00007f757047dee2: mov    %rax,0x78(%rsp)
  0x00007f757047dee7: mov    %rcx,0x70(%rsp)
  0x00007f757047deec: mov    %rdx,0x68(%rsp)
  0x00007f757047def1: mov    %rbx,0x60(%rsp)
  0x00007f757047def6: mov    %rbp,0x50(%rsp)
  0x00007f757047defb: mov    %rsi,0x48(%rsp)
  0x00007f757047df00: mov    %rdi,0x40(%rsp)
  0x00007f757047df05: mov    %r8,0x38(%rsp)
  0x00007f757047df0a: mov    %r9,0x30(%rsp)
  0x00007f757047df0f: mov    %r10,0x28(%rsp)
  0x00007f757047df14: mov    %r11,0x20(%rsp)
  0x00007f757047df19: mov    %r12,0x18(%rsp)
  0x00007f757047df1e: mov    %r13,0x10(%rsp)
  0x00007f757047df23: mov    %r14,0x8(%rsp)
  0x00007f757047df28: mov    %r15,(%rsp)
  0x00007f757047df2c: sub    $0x200,%rsp
  0x00007f757047df33: fxsave64 (%rsp)
  0x00007f757047df38: mov    %rbx,%rdi
  0x00007f757047df3b: mov    %rax,%rsi
  0x00007f757047df3e: callq  0x00007f7585522bca
  0x00007f757047df43: fxrstor64 (%rsp)
  0x00007f757047df48: add    $0x200,%rsp
  0x00007f757047df4f: mov    (%rsp),%r15
  0x00007f757047df53: mov    0x8(%rsp),%r14
  0x00007f757047df58: mov    0x10(%rsp),%r13
  0x00007f757047df5d: mov    0x18(%rsp),%r12
  0x00007f757047df62: mov    0x20(%rsp),%r11
  0x00007f757047df67: mov    0x28(%rsp),%r10
  0x00007f757047df6c: mov    0x30(%rsp),%r9
  0x00007f757047df71: mov    0x38(%rsp),%r8
  0x00007f757047df76: mov    0x40(%rsp),%rdi
  0x00007f757047df7b: mov    0x48(%rsp),%rsi
  0x00007f757047df80: mov    0x50(%rsp),%rbp
  0x00007f757047df85: mov    0x60(%rsp),%rbx
  0x00007f757047df8a: mov    0x68(%rsp),%rdx
  0x00007f757047df8f: mov    0x70(%rsp),%rcx
  0x00007f757047df94: mov    0x78(%rsp),%rax
  0x00007f757047df99: add    $0x80,%rsp
  0x00007f757047dfa0: add    $0x8,%rsp
  0x00007f757047dfa4: popfq  
  0x00007f757047dfa5: mov    %r13,%rsp
  0x00007f757047dfa8: pop    %rax
  0x00007f757047dfa9: mov    %rsp,%r13
  0x00007f757047dfac: sub    $0x20,%rsp
  0x00007f757047dfb0: mov    %rax,(%rsp)
  0x00007f757047dfb4: mov    %rsi,0x10(%rsp)
  0x00007f757047dfb9: mov    %rdx,0x8(%rsp)
  0x00007f757047dfbe: mov    0x40(%rbx),%rcx
  0x00007f757047dfc2: jmpq   *%rcx

AHE@0x00007f75800c2060: 0xbbbaa000 i2c: 0x00007f757047e0a0 c2i: 0x00007f757047e1c4 c2iUV: 0x00007f757047e197
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (575 bytes generated)
c2i argument handler starts at 0x7f757047e1c4
  0x00007f757047e0a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047e0a4: movabs $0x7f757036e3e0,%r11
  0x00007f757047e0ae: cmp    %r11,%rax
  0x00007f757047e0b1: jbe    0x00007f757047e0ca
  0x00007f757047e0b7: movabs $0x7f757046e3e0,%r11
  0x00007f757047e0c1: cmp    %r11,%rax
  0x00007f757047e0c4: jb     0x00007f757047e167
  0x00007f757047e0ca: movabs $0x7f7570369420,%r11
  0x00007f757047e0d4: cmp    %r11,%rax
  0x00007f757047e0d7: jbe    0x00007f757047e0f0
  0x00007f757047e0dd: movabs $0x7f757036de58,%r11
  0x00007f757047e0e7: cmp    %r11,%rax
  0x00007f757047e0ea: jb     0x00007f757047e167
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047e0f0: mov    %rsp,-0x28(%rsp)
  0x00007f757047e0f5: sub    $0x80,%rsp
  0x00007f757047e0fc: mov    %rax,0x78(%rsp)
  0x00007f757047e101: mov    %rcx,0x70(%rsp)
  0x00007f757047e106: mov    %rdx,0x68(%rsp)
  0x00007f757047e10b: mov    %rbx,0x60(%rsp)
  0x00007f757047e110: mov    %rbp,0x50(%rsp)
  0x00007f757047e115: mov    %rsi,0x48(%rsp)
  0x00007f757047e11a: mov    %rdi,0x40(%rsp)
  0x00007f757047e11f: mov    %r8,0x38(%rsp)
  0x00007f757047e124: mov    %r9,0x30(%rsp)
  0x00007f757047e129: mov    %r10,0x28(%rsp)
  0x00007f757047e12e: mov    %r11,0x20(%rsp)
  0x00007f757047e133: mov    %r12,0x18(%rsp)
  0x00007f757047e138: mov    %r13,0x10(%rsp)
  0x00007f757047e13d: mov    %r14,0x8(%rsp)
  0x00007f757047e142: mov    %r15,(%rsp)
  0x00007f757047e146: movabs $0x7f758592f470,%rdi
  0x00007f757047e150: movabs $0x7f757047e0f0,%rsi
  0x00007f757047e15a: mov    %rsp,%rdx
  0x00007f757047e15d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e161: callq  0x00007f75853729fa
  0x00007f757047e166: hlt    
  ;; } verify_i2ce 
  0x00007f757047e167: mov    %rsp,%r11
  0x00007f757047e16a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e16e: push   %rax
  0x00007f757047e16f: mov    %r11,%rax
  0x00007f757047e172: mov    0x50(%rbx),%r11
  0x00007f757047e176: mov    0x28(%rax),%rsi
  0x00007f757047e17a: mov    0x20(%rax),%rdx
  0x00007f757047e17e: mov    0x18(%rax),%rcx
  0x00007f757047e182: mov    0x10(%rax),%r8d
  0x00007f757047e186: mov    0x8(%rax),%r9d
  0x00007f757047e18a: mov    %rbx,0x258(%r15)
  0x00007f757047e191: mov    %rbx,%rax
  0x00007f757047e194: jmpq   *%r11
  0x00007f757047e197: mov    0x8(%rsi),%ebx
  0x00007f757047e19a: shl    $0x3,%rbx
  0x00007f757047e19e: cmp    0x10(%rax),%rbx
  0x00007f757047e1a2: mov    0x8(%rax),%rbx
  0x00007f757047e1a6: je     0x00007f757047e1b1
  0x00007f757047e1ac: jmpq   0x00007f757046ec40
  0x00007f757047e1b1: cmpq   $0x0,0x58(%rbx)
  0x00007f757047e1b9: je     0x00007f757047e2b4
  0x00007f757047e1bf: jmpq   0x00007f757046ec40
  0x00007f757047e1c4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047e1cc: je     0x00007f757047e2b4
  0x00007f757047e1d2: mov    %rsp,%r13
  0x00007f757047e1d5: mov    (%rsp),%rax
  0x00007f757047e1d9: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e1dd: pushfq 
  0x00007f757047e1de: sub    $0x8,%rsp
  0x00007f757047e1e2: mov    %rsp,-0x28(%rsp)
  0x00007f757047e1e7: sub    $0x80,%rsp
  0x00007f757047e1ee: mov    %rax,0x78(%rsp)
  0x00007f757047e1f3: mov    %rcx,0x70(%rsp)
  0x00007f757047e1f8: mov    %rdx,0x68(%rsp)
  0x00007f757047e1fd: mov    %rbx,0x60(%rsp)
  0x00007f757047e202: mov    %rbp,0x50(%rsp)
  0x00007f757047e207: mov    %rsi,0x48(%rsp)
  0x00007f757047e20c: mov    %rdi,0x40(%rsp)
  0x00007f757047e211: mov    %r8,0x38(%rsp)
  0x00007f757047e216: mov    %r9,0x30(%rsp)
  0x00007f757047e21b: mov    %r10,0x28(%rsp)
  0x00007f757047e220: mov    %r11,0x20(%rsp)
  0x00007f757047e225: mov    %r12,0x18(%rsp)
  0x00007f757047e22a: mov    %r13,0x10(%rsp)
  0x00007f757047e22f: mov    %r14,0x8(%rsp)
  0x00007f757047e234: mov    %r15,(%rsp)
  0x00007f757047e238: sub    $0x200,%rsp
  0x00007f757047e23f: fxsave64 (%rsp)
  0x00007f757047e244: mov    %rbx,%rdi
  0x00007f757047e247: mov    %rax,%rsi
  0x00007f757047e24a: callq  0x00007f7585522bca
  0x00007f757047e24f: fxrstor64 (%rsp)
  0x00007f757047e254: add    $0x200,%rsp
  0x00007f757047e25b: mov    (%rsp),%r15
  0x00007f757047e25f: mov    0x8(%rsp),%r14
  0x00007f757047e264: mov    0x10(%rsp),%r13
  0x00007f757047e269: mov    0x18(%rsp),%r12
  0x00007f757047e26e: mov    0x20(%rsp),%r11
  0x00007f757047e273: mov    0x28(%rsp),%r10
  0x00007f757047e278: mov    0x30(%rsp),%r9
  0x00007f757047e27d: mov    0x38(%rsp),%r8
  0x00007f757047e282: mov    0x40(%rsp),%rdi
  0x00007f757047e287: mov    0x48(%rsp),%rsi
  0x00007f757047e28c: mov    0x50(%rsp),%rbp
  0x00007f757047e291: mov    0x60(%rsp),%rbx
  0x00007f757047e296: mov    0x68(%rsp),%rdx
  0x00007f757047e29b: mov    0x70(%rsp),%rcx
  0x00007f757047e2a0: mov    0x78(%rsp),%rax
  0x00007f757047e2a5: add    $0x80,%rsp
  0x00007f757047e2ac: add    $0x8,%rsp
  0x00007f757047e2b0: popfq  
  0x00007f757047e2b1: mov    %r13,%rsp
  0x00007f757047e2b4: pop    %rax
  0x00007f757047e2b5: mov    %rsp,%r13
  0x00007f757047e2b8: sub    $0x30,%rsp
  0x00007f757047e2bc: mov    %rax,(%rsp)
  0x00007f757047e2c0: mov    %rsi,0x28(%rsp)
  0x00007f757047e2c5: mov    %rdx,0x20(%rsp)
  0x00007f757047e2ca: mov    %rcx,0x18(%rsp)
  0x00007f757047e2cf: mov    %r8d,0x10(%rsp)
  0x00007f757047e2d4: mov    %r9d,0x8(%rsp)
  0x00007f757047e2d9: mov    0x40(%rbx),%rcx
  0x00007f757047e2dd: jmpq   *%rcx

AHE@0x00007f75800c20a8: 0xb0000000 i2c: 0x00007f757047e3a0 c2i: 0x00007f757047e4b4 c2iUV: 0x00007f757047e487
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757047e4b4
  0x00007f757047e3a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047e3a4: movabs $0x7f757036e3e0,%r11
  0x00007f757047e3ae: cmp    %r11,%rax
  0x00007f757047e3b1: jbe    0x00007f757047e3ca
  0x00007f757047e3b7: movabs $0x7f757046e3e0,%r11
  0x00007f757047e3c1: cmp    %r11,%rax
  0x00007f757047e3c4: jb     0x00007f757047e467
  0x00007f757047e3ca: movabs $0x7f7570369420,%r11
  0x00007f757047e3d4: cmp    %r11,%rax
  0x00007f757047e3d7: jbe    0x00007f757047e3f0
  0x00007f757047e3dd: movabs $0x7f757036de58,%r11
  0x00007f757047e3e7: cmp    %r11,%rax
  0x00007f757047e3ea: jb     0x00007f757047e467
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047e3f0: mov    %rsp,-0x28(%rsp)
  0x00007f757047e3f5: sub    $0x80,%rsp
  0x00007f757047e3fc: mov    %rax,0x78(%rsp)
  0x00007f757047e401: mov    %rcx,0x70(%rsp)
  0x00007f757047e406: mov    %rdx,0x68(%rsp)
  0x00007f757047e40b: mov    %rbx,0x60(%rsp)
  0x00007f757047e410: mov    %rbp,0x50(%rsp)
  0x00007f757047e415: mov    %rsi,0x48(%rsp)
  0x00007f757047e41a: mov    %rdi,0x40(%rsp)
  0x00007f757047e41f: mov    %r8,0x38(%rsp)
  0x00007f757047e424: mov    %r9,0x30(%rsp)
  0x00007f757047e429: mov    %r10,0x28(%rsp)
  0x00007f757047e42e: mov    %r11,0x20(%rsp)
  0x00007f757047e433: mov    %r12,0x18(%rsp)
  0x00007f757047e438: mov    %r13,0x10(%rsp)
  0x00007f757047e43d: mov    %r14,0x8(%rsp)
  0x00007f757047e442: mov    %r15,(%rsp)
  0x00007f757047e446: movabs $0x7f758592f470,%rdi
  0x00007f757047e450: movabs $0x7f757047e3f0,%rsi
  0x00007f757047e45a: mov    %rsp,%rdx
  0x00007f757047e45d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e461: callq  0x00007f75853729fa
  0x00007f757047e466: hlt    
  ;; } verify_i2ce 
  0x00007f757047e467: mov    %rsp,%r11
  0x00007f757047e46a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e46e: push   %rax
  0x00007f757047e46f: mov    %r11,%rax
  0x00007f757047e472: mov    0x50(%rbx),%r11
  0x00007f757047e476: mov    0x8(%rax),%rsi
  0x00007f757047e47a: mov    %rbx,0x258(%r15)
  0x00007f757047e481: mov    %rbx,%rax
  0x00007f757047e484: jmpq   *%r11
  0x00007f757047e487: mov    0x8(%rsi),%ebx
  0x00007f757047e48a: shl    $0x3,%rbx
  0x00007f757047e48e: cmp    0x10(%rax),%rbx
  0x00007f757047e492: mov    0x8(%rax),%rbx
  0x00007f757047e496: je     0x00007f757047e4a1
  0x00007f757047e49c: jmpq   0x00007f757046ec40
  0x00007f757047e4a1: cmpq   $0x0,0x58(%rbx)
  0x00007f757047e4a9: je     0x00007f757047e5a4
  0x00007f757047e4af: jmpq   0x00007f757046ec40
  0x00007f757047e4b4: cmpq   $0x0,0x58(%rbx)
  0x00007f757047e4bc: je     0x00007f757047e5a4
  0x00007f757047e4c2: mov    %rsp,%r13
  0x00007f757047e4c5: mov    (%rsp),%rax
  0x00007f757047e4c9: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e4cd: pushfq 
  0x00007f757047e4ce: sub    $0x8,%rsp
  0x00007f757047e4d2: mov    %rsp,-0x28(%rsp)
  0x00007f757047e4d7: sub    $0x80,%rsp
  0x00007f757047e4de: mov    %rax,0x78(%rsp)
  0x00007f757047e4e3: mov    %rcx,0x70(%rsp)
  0x00007f757047e4e8: mov    %rdx,0x68(%rsp)
  0x00007f757047e4ed: mov    %rbx,0x60(%rsp)
  0x00007f757047e4f2: mov    %rbp,0x50(%rsp)
  0x00007f757047e4f7: mov    %rsi,0x48(%rsp)
  0x00007f757047e4fc: mov    %rdi,0x40(%rsp)
  0x00007f757047e501: mov    %r8,0x38(%rsp)
  0x00007f757047e506: mov    %r9,0x30(%rsp)
  0x00007f757047e50b: mov    %r10,0x28(%rsp)
  0x00007f757047e510: mov    %r11,0x20(%rsp)
  0x00007f757047e515: mov    %r12,0x18(%rsp)
  0x00007f757047e51a: mov    %r13,0x10(%rsp)
  0x00007f757047e51f: mov    %r14,0x8(%rsp)
  0x00007f757047e524: mov    %r15,(%rsp)
  0x00007f757047e528: sub    $0x200,%rsp
  0x00007f757047e52f: fxsave64 (%rsp)
  0x00007f757047e534: mov    %rbx,%rdi
  0x00007f757047e537: mov    %rax,%rsi
  0x00007f757047e53a: callq  0x00007f7585522bca
  0x00007f757047e53f: fxrstor64 (%rsp)
  0x00007f757047e544: add    $0x200,%rsp
  0x00007f757047e54b: mov    (%rsp),%r15
  0x00007f757047e54f: mov    0x8(%rsp),%r14
  0x00007f757047e554: mov    0x10(%rsp),%r13
  0x00007f757047e559: mov    0x18(%rsp),%r12
  0x00007f757047e55e: mov    0x20(%rsp),%r11
  0x00007f757047e563: mov    0x28(%rsp),%r10
  0x00007f757047e568: mov    0x30(%rsp),%r9
  0x00007f757047e56d: mov    0x38(%rsp),%r8
  0x00007f757047e572: mov    0x40(%rsp),%rdi
  0x00007f757047e577: mov    0x48(%rsp),%rsi
  0x00007f757047e57c: mov    0x50(%rsp),%rbp
  0x00007f757047e581: mov    0x60(%rsp),%rbx
  0x00007f757047e586: mov    0x68(%rsp),%rdx
  0x00007f757047e58b: mov    0x70(%rsp),%rcx
  0x00007f757047e590: mov    0x78(%rsp),%rax
  0x00007f757047e595: add    $0x80,%rsp
  0x00007f757047e59c: add    $0x8,%rsp
  0x00007f757047e5a0: popfq  
  0x00007f757047e5a1: mov    %r13,%rsp
  0x00007f757047e5a4: pop    %rax
  0x00007f757047e5a5: mov    %rsp,%r13
  0x00007f757047e5a8: sub    $0x10,%rsp
  0x00007f757047e5ac: mov    %rax,(%rsp)
  0x00007f757047e5b0: mov    %rsi,0x8(%rsp)
  0x00007f757047e5b5: mov    0x40(%rbx),%rcx
  0x00007f757047e5b9: jmpq   *%rcx

AHE@0x00007f75800c20f0: 0xbb000000 i2c: 0x00007f757047e660 c2i: 0x00007f757047e778 c2iUV: 0x00007f757047e74b
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047e778
  0x00007f757047e660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047e664: movabs $0x7f757036e3e0,%r11
  0x00007f757047e66e: cmp    %r11,%rax
  0x00007f757047e671: jbe    0x00007f757047e68a
  0x00007f757047e677: movabs $0x7f757046e3e0,%r11
  0x00007f757047e681: cmp    %r11,%rax
  0x00007f757047e684: jb     0x00007f757047e727
  0x00007f757047e68a: movabs $0x7f7570369420,%r11
  0x00007f757047e694: cmp    %r11,%rax
  0x00007f757047e697: jbe    0x00007f757047e6b0
  0x00007f757047e69d: movabs $0x7f757036de58,%r11
  0x00007f757047e6a7: cmp    %r11,%rax
  0x00007f757047e6aa: jb     0x00007f757047e727
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047e6b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047e6b5: sub    $0x80,%rsp
  0x00007f757047e6bc: mov    %rax,0x78(%rsp)
  0x00007f757047e6c1: mov    %rcx,0x70(%rsp)
  0x00007f757047e6c6: mov    %rdx,0x68(%rsp)
  0x00007f757047e6cb: mov    %rbx,0x60(%rsp)
  0x00007f757047e6d0: mov    %rbp,0x50(%rsp)
  0x00007f757047e6d5: mov    %rsi,0x48(%rsp)
  0x00007f757047e6da: mov    %rdi,0x40(%rsp)
  0x00007f757047e6df: mov    %r8,0x38(%rsp)
  0x00007f757047e6e4: mov    %r9,0x30(%rsp)
  0x00007f757047e6e9: mov    %r10,0x28(%rsp)
  0x00007f757047e6ee: mov    %r11,0x20(%rsp)
  0x00007f757047e6f3: mov    %r12,0x18(%rsp)
  0x00007f757047e6f8: mov    %r13,0x10(%rsp)
  0x00007f757047e6fd: mov    %r14,0x8(%rsp)
  0x00007f757047e702: mov    %r15,(%rsp)
  0x00007f757047e706: movabs $0x7f758592f470,%rdi
  0x00007f757047e710: movabs $0x7f757047e6b0,%rsi
  0x00007f757047e71a: mov    %rsp,%rdx
  0x00007f757047e71d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e721: callq  0x00007f75853729fa
  0x00007f757047e726: hlt    
  ;; } verify_i2ce 
  0x00007f757047e727: mov    %rsp,%r11
  0x00007f757047e72a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e72e: push   %rax
  0x00007f757047e72f: mov    %r11,%rax
  0x00007f757047e732: mov    0x50(%rbx),%r11
  0x00007f757047e736: mov    0x10(%rax),%rsi
  0x00007f757047e73a: mov    0x8(%rax),%rdx
  0x00007f757047e73e: mov    %rbx,0x258(%r15)
  0x00007f757047e745: mov    %rbx,%rax
  0x00007f757047e748: jmpq   *%r11
  0x00007f757047e74b: mov    0x8(%rsi),%ebx
  0x00007f757047e74e: shl    $0x3,%rbx
  0x00007f757047e752: cmp    0x10(%rax),%rbx
  0x00007f757047e756: mov    0x8(%rax),%rbx
  0x00007f757047e75a: je     0x00007f757047e765
  0x00007f757047e760: jmpq   0x00007f757046ec40
  0x00007f757047e765: cmpq   $0x0,0x58(%rbx)
  0x00007f757047e76d: je     0x00007f757047e868
  0x00007f757047e773: jmpq   0x00007f757046ec40
  0x00007f757047e778: cmpq   $0x0,0x58(%rbx)
  0x00007f757047e780: je     0x00007f757047e868
  0x00007f757047e786: mov    %rsp,%r13
  0x00007f757047e789: mov    (%rsp),%rax
  0x00007f757047e78d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047e791: pushfq 
  0x00007f757047e792: sub    $0x8,%rsp
  0x00007f757047e796: mov    %rsp,-0x28(%rsp)
  0x00007f757047e79b: sub    $0x80,%rsp
  0x00007f757047e7a2: mov    %rax,0x78(%rsp)
  0x00007f757047e7a7: mov    %rcx,0x70(%rsp)
  0x00007f757047e7ac: mov    %rdx,0x68(%rsp)
  0x00007f757047e7b1: mov    %rbx,0x60(%rsp)
  0x00007f757047e7b6: mov    %rbp,0x50(%rsp)
  0x00007f757047e7bb: mov    %rsi,0x48(%rsp)
  0x00007f757047e7c0: mov    %rdi,0x40(%rsp)
  0x00007f757047e7c5: mov    %r8,0x38(%rsp)
  0x00007f757047e7ca: mov    %r9,0x30(%rsp)
  0x00007f757047e7cf: mov    %r10,0x28(%rsp)
  0x00007f757047e7d4: mov    %r11,0x20(%rsp)
  0x00007f757047e7d9: mov    %r12,0x18(%rsp)
  0x00007f757047e7de: mov    %r13,0x10(%rsp)
  0x00007f757047e7e3: mov    %r14,0x8(%rsp)
  0x00007f757047e7e8: mov    %r15,(%rsp)
  0x00007f757047e7ec: sub    $0x200,%rsp
  0x00007f757047e7f3: fxsave64 (%rsp)
  0x00007f757047e7f8: mov    %rbx,%rdi
  0x00007f757047e7fb: mov    %rax,%rsi
  0x00007f757047e7fe: callq  0x00007f7585522bca
  0x00007f757047e803: fxrstor64 (%rsp)
  0x00007f757047e808: add    $0x200,%rsp
  0x00007f757047e80f: mov    (%rsp),%r15
  0x00007f757047e813: mov    0x8(%rsp),%r14
  0x00007f757047e818: mov    0x10(%rsp),%r13
  0x00007f757047e81d: mov    0x18(%rsp),%r12
  0x00007f757047e822: mov    0x20(%rsp),%r11
  0x00007f757047e827: mov    0x28(%rsp),%r10
  0x00007f757047e82c: mov    0x30(%rsp),%r9
  0x00007f757047e831: mov    0x38(%rsp),%r8
  0x00007f757047e836: mov    0x40(%rsp),%rdi
  0x00007f757047e83b: mov    0x48(%rsp),%rsi
  0x00007f757047e840: mov    0x50(%rsp),%rbp
  0x00007f757047e845: mov    0x60(%rsp),%rbx
  0x00007f757047e84a: mov    0x68(%rsp),%rdx
  0x00007f757047e84f: mov    0x70(%rsp),%rcx
  0x00007f757047e854: mov    0x78(%rsp),%rax
  0x00007f757047e859: add    $0x80,%rsp
  0x00007f757047e860: add    $0x8,%rsp
  0x00007f757047e864: popfq  
  0x00007f757047e865: mov    %r13,%rsp
  0x00007f757047e868: pop    %rax
  0x00007f757047e869: mov    %rsp,%r13
  0x00007f757047e86c: sub    $0x20,%rsp
  0x00007f757047e870: mov    %rax,(%rsp)
  0x00007f757047e874: mov    %rsi,0x10(%rsp)
  0x00007f757047e879: mov    %rdx,0x8(%rsp)
  0x00007f757047e87e: mov    0x40(%rbx),%rcx
  0x00007f757047e882: jmpq   *%rcx

AHE@0x00007f75800c2138: 0xbbb00000 i2c: 0x00007f757047e960 c2i: 0x00007f757047ea7c c2iUV: 0x00007f757047ea4f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (557 bytes generated)
c2i argument handler starts at 0x7f757047ea7c
  0x00007f757047e960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047e964: movabs $0x7f757036e3e0,%r11
  0x00007f757047e96e: cmp    %r11,%rax
  0x00007f757047e971: jbe    0x00007f757047e98a
  0x00007f757047e977: movabs $0x7f757046e3e0,%r11
  0x00007f757047e981: cmp    %r11,%rax
  0x00007f757047e984: jb     0x00007f757047ea27
  0x00007f757047e98a: movabs $0x7f7570369420,%r11
  0x00007f757047e994: cmp    %r11,%rax
  0x00007f757047e997: jbe    0x00007f757047e9b0
  0x00007f757047e99d: movabs $0x7f757036de58,%r11
  0x00007f757047e9a7: cmp    %r11,%rax
  0x00007f757047e9aa: jb     0x00007f757047ea27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047e9b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047e9b5: sub    $0x80,%rsp
  0x00007f757047e9bc: mov    %rax,0x78(%rsp)
  0x00007f757047e9c1: mov    %rcx,0x70(%rsp)
  0x00007f757047e9c6: mov    %rdx,0x68(%rsp)
  0x00007f757047e9cb: mov    %rbx,0x60(%rsp)
  0x00007f757047e9d0: mov    %rbp,0x50(%rsp)
  0x00007f757047e9d5: mov    %rsi,0x48(%rsp)
  0x00007f757047e9da: mov    %rdi,0x40(%rsp)
  0x00007f757047e9df: mov    %r8,0x38(%rsp)
  0x00007f757047e9e4: mov    %r9,0x30(%rsp)
  0x00007f757047e9e9: mov    %r10,0x28(%rsp)
  0x00007f757047e9ee: mov    %r11,0x20(%rsp)
  0x00007f757047e9f3: mov    %r12,0x18(%rsp)
  0x00007f757047e9f8: mov    %r13,0x10(%rsp)
  0x00007f757047e9fd: mov    %r14,0x8(%rsp)
  0x00007f757047ea02: mov    %r15,(%rsp)
  0x00007f757047ea06: movabs $0x7f758592f470,%rdi
  0x00007f757047ea10: movabs $0x7f757047e9b0,%rsi
  0x00007f757047ea1a: mov    %rsp,%rdx
  0x00007f757047ea1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ea21: callq  0x00007f75853729fa
  0x00007f757047ea26: hlt    
  ;; } verify_i2ce 
  0x00007f757047ea27: mov    %rsp,%r11
  0x00007f757047ea2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ea2e: push   %rax
  0x00007f757047ea2f: mov    %r11,%rax
  0x00007f757047ea32: mov    0x50(%rbx),%r11
  0x00007f757047ea36: mov    0x18(%rax),%rsi
  0x00007f757047ea3a: mov    0x10(%rax),%rdx
  0x00007f757047ea3e: mov    0x8(%rax),%rcx
  0x00007f757047ea42: mov    %rbx,0x258(%r15)
  0x00007f757047ea49: mov    %rbx,%rax
  0x00007f757047ea4c: jmpq   *%r11
  0x00007f757047ea4f: mov    0x8(%rsi),%ebx
  0x00007f757047ea52: shl    $0x3,%rbx
  0x00007f757047ea56: cmp    0x10(%rax),%rbx
  0x00007f757047ea5a: mov    0x8(%rax),%rbx
  0x00007f757047ea5e: je     0x00007f757047ea69
  0x00007f757047ea64: jmpq   0x00007f757046ec40
  0x00007f757047ea69: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ea71: je     0x00007f757047eb6c
  0x00007f757047ea77: jmpq   0x00007f757046ec40
  0x00007f757047ea7c: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ea84: je     0x00007f757047eb6c
  0x00007f757047ea8a: mov    %rsp,%r13
  0x00007f757047ea8d: mov    (%rsp),%rax
  0x00007f757047ea91: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ea95: pushfq 
  0x00007f757047ea96: sub    $0x8,%rsp
  0x00007f757047ea9a: mov    %rsp,-0x28(%rsp)
  0x00007f757047ea9f: sub    $0x80,%rsp
  0x00007f757047eaa6: mov    %rax,0x78(%rsp)
  0x00007f757047eaab: mov    %rcx,0x70(%rsp)
  0x00007f757047eab0: mov    %rdx,0x68(%rsp)
  0x00007f757047eab5: mov    %rbx,0x60(%rsp)
  0x00007f757047eaba: mov    %rbp,0x50(%rsp)
  0x00007f757047eabf: mov    %rsi,0x48(%rsp)
  0x00007f757047eac4: mov    %rdi,0x40(%rsp)
  0x00007f757047eac9: mov    %r8,0x38(%rsp)
  0x00007f757047eace: mov    %r9,0x30(%rsp)
  0x00007f757047ead3: mov    %r10,0x28(%rsp)
  0x00007f757047ead8: mov    %r11,0x20(%rsp)
  0x00007f757047eadd: mov    %r12,0x18(%rsp)
  0x00007f757047eae2: mov    %r13,0x10(%rsp)
  0x00007f757047eae7: mov    %r14,0x8(%rsp)
  0x00007f757047eaec: mov    %r15,(%rsp)
  0x00007f757047eaf0: sub    $0x200,%rsp
  0x00007f757047eaf7: fxsave64 (%rsp)
  0x00007f757047eafc: mov    %rbx,%rdi
  0x00007f757047eaff: mov    %rax,%rsi
  0x00007f757047eb02: callq  0x00007f7585522bca
  0x00007f757047eb07: fxrstor64 (%rsp)
  0x00007f757047eb0c: add    $0x200,%rsp
  0x00007f757047eb13: mov    (%rsp),%r15
  0x00007f757047eb17: mov    0x8(%rsp),%r14
  0x00007f757047eb1c: mov    0x10(%rsp),%r13
  0x00007f757047eb21: mov    0x18(%rsp),%r12
  0x00007f757047eb26: mov    0x20(%rsp),%r11
  0x00007f757047eb2b: mov    0x28(%rsp),%r10
  0x00007f757047eb30: mov    0x30(%rsp),%r9
  0x00007f757047eb35: mov    0x38(%rsp),%r8
  0x00007f757047eb3a: mov    0x40(%rsp),%rdi
  0x00007f757047eb3f: mov    0x48(%rsp),%rsi
  0x00007f757047eb44: mov    0x50(%rsp),%rbp
  0x00007f757047eb49: mov    0x60(%rsp),%rbx
  0x00007f757047eb4e: mov    0x68(%rsp),%rdx
  0x00007f757047eb53: mov    0x70(%rsp),%rcx
  0x00007f757047eb58: mov    0x78(%rsp),%rax
  0x00007f757047eb5d: add    $0x80,%rsp
  0x00007f757047eb64: add    $0x8,%rsp
  0x00007f757047eb68: popfq  
  0x00007f757047eb69: mov    %r13,%rsp
  0x00007f757047eb6c: pop    %rax
  0x00007f757047eb6d: mov    %rsp,%r13
  0x00007f757047eb70: sub    $0x20,%rsp
  0x00007f757047eb74: mov    %rax,(%rsp)
  0x00007f757047eb78: mov    %rsi,0x18(%rsp)
  0x00007f757047eb7d: mov    %rdx,0x10(%rsp)
  0x00007f757047eb82: mov    %rcx,0x8(%rsp)
  0x00007f757047eb87: mov    0x40(%rbx),%rcx
  0x00007f757047eb8b: jmpq   *%rcx

AHE@0x00007f75800c2180: 0xbb000000 i2c: 0x00007f757047ec60 c2i: 0x00007f757047ed78 c2iUV: 0x00007f757047ed4b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047ed78
  0x00007f757047ec60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047ec64: movabs $0x7f757036e3e0,%r11
  0x00007f757047ec6e: cmp    %r11,%rax
  0x00007f757047ec71: jbe    0x00007f757047ec8a
  0x00007f757047ec77: movabs $0x7f757046e3e0,%r11
  0x00007f757047ec81: cmp    %r11,%rax
  0x00007f757047ec84: jb     0x00007f757047ed27
  0x00007f757047ec8a: movabs $0x7f7570369420,%r11
  0x00007f757047ec94: cmp    %r11,%rax
  0x00007f757047ec97: jbe    0x00007f757047ecb0
  0x00007f757047ec9d: movabs $0x7f757036de58,%r11
  0x00007f757047eca7: cmp    %r11,%rax
  0x00007f757047ecaa: jb     0x00007f757047ed27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047ecb0: mov    %rsp,-0x28(%rsp)
  0x00007f757047ecb5: sub    $0x80,%rsp
  0x00007f757047ecbc: mov    %rax,0x78(%rsp)
  0x00007f757047ecc1: mov    %rcx,0x70(%rsp)
  0x00007f757047ecc6: mov    %rdx,0x68(%rsp)
  0x00007f757047eccb: mov    %rbx,0x60(%rsp)
  0x00007f757047ecd0: mov    %rbp,0x50(%rsp)
  0x00007f757047ecd5: mov    %rsi,0x48(%rsp)
  0x00007f757047ecda: mov    %rdi,0x40(%rsp)
  0x00007f757047ecdf: mov    %r8,0x38(%rsp)
  0x00007f757047ece4: mov    %r9,0x30(%rsp)
  0x00007f757047ece9: mov    %r10,0x28(%rsp)
  0x00007f757047ecee: mov    %r11,0x20(%rsp)
  0x00007f757047ecf3: mov    %r12,0x18(%rsp)
  0x00007f757047ecf8: mov    %r13,0x10(%rsp)
  0x00007f757047ecfd: mov    %r14,0x8(%rsp)
  0x00007f757047ed02: mov    %r15,(%rsp)
  0x00007f757047ed06: movabs $0x7f758592f470,%rdi
  0x00007f757047ed10: movabs $0x7f757047ecb0,%rsi
  0x00007f757047ed1a: mov    %rsp,%rdx
  0x00007f757047ed1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ed21: callq  0x00007f75853729fa
  0x00007f757047ed26: hlt    
  ;; } verify_i2ce 
  0x00007f757047ed27: mov    %rsp,%r11
  0x00007f757047ed2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ed2e: push   %rax
  0x00007f757047ed2f: mov    %r11,%rax
  0x00007f757047ed32: mov    0x50(%rbx),%r11
  0x00007f757047ed36: mov    0x10(%rax),%rsi
  0x00007f757047ed3a: mov    0x8(%rax),%rdx
  0x00007f757047ed3e: mov    %rbx,0x258(%r15)
  0x00007f757047ed45: mov    %rbx,%rax
  0x00007f757047ed48: jmpq   *%r11
  0x00007f757047ed4b: mov    0x8(%rsi),%ebx
  0x00007f757047ed4e: shl    $0x3,%rbx
  0x00007f757047ed52: cmp    0x10(%rax),%rbx
  0x00007f757047ed56: mov    0x8(%rax),%rbx
  0x00007f757047ed5a: je     0x00007f757047ed65
  0x00007f757047ed60: jmpq   0x00007f757046ec40
  0x00007f757047ed65: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ed6d: je     0x00007f757047ee68
  0x00007f757047ed73: jmpq   0x00007f757046ec40
  0x00007f757047ed78: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ed80: je     0x00007f757047ee68
  0x00007f757047ed86: mov    %rsp,%r13
  0x00007f757047ed89: mov    (%rsp),%rax
  0x00007f757047ed8d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ed91: pushfq 
  0x00007f757047ed92: sub    $0x8,%rsp
  0x00007f757047ed96: mov    %rsp,-0x28(%rsp)
  0x00007f757047ed9b: sub    $0x80,%rsp
  0x00007f757047eda2: mov    %rax,0x78(%rsp)
  0x00007f757047eda7: mov    %rcx,0x70(%rsp)
  0x00007f757047edac: mov    %rdx,0x68(%rsp)
  0x00007f757047edb1: mov    %rbx,0x60(%rsp)
  0x00007f757047edb6: mov    %rbp,0x50(%rsp)
  0x00007f757047edbb: mov    %rsi,0x48(%rsp)
  0x00007f757047edc0: mov    %rdi,0x40(%rsp)
  0x00007f757047edc5: mov    %r8,0x38(%rsp)
  0x00007f757047edca: mov    %r9,0x30(%rsp)
  0x00007f757047edcf: mov    %r10,0x28(%rsp)
  0x00007f757047edd4: mov    %r11,0x20(%rsp)
  0x00007f757047edd9: mov    %r12,0x18(%rsp)
  0x00007f757047edde: mov    %r13,0x10(%rsp)
  0x00007f757047ede3: mov    %r14,0x8(%rsp)
  0x00007f757047ede8: mov    %r15,(%rsp)
  0x00007f757047edec: sub    $0x200,%rsp
  0x00007f757047edf3: fxsave64 (%rsp)
  0x00007f757047edf8: mov    %rbx,%rdi
  0x00007f757047edfb: mov    %rax,%rsi
  0x00007f757047edfe: callq  0x00007f7585522bca
  0x00007f757047ee03: fxrstor64 (%rsp)
  0x00007f757047ee08: add    $0x200,%rsp
  0x00007f757047ee0f: mov    (%rsp),%r15
  0x00007f757047ee13: mov    0x8(%rsp),%r14
  0x00007f757047ee18: mov    0x10(%rsp),%r13
  0x00007f757047ee1d: mov    0x18(%rsp),%r12
  0x00007f757047ee22: mov    0x20(%rsp),%r11
  0x00007f757047ee27: mov    0x28(%rsp),%r10
  0x00007f757047ee2c: mov    0x30(%rsp),%r9
  0x00007f757047ee31: mov    0x38(%rsp),%r8
  0x00007f757047ee36: mov    0x40(%rsp),%rdi
  0x00007f757047ee3b: mov    0x48(%rsp),%rsi
  0x00007f757047ee40: mov    0x50(%rsp),%rbp
  0x00007f757047ee45: mov    0x60(%rsp),%rbx
  0x00007f757047ee4a: mov    0x68(%rsp),%rdx
  0x00007f757047ee4f: mov    0x70(%rsp),%rcx
  0x00007f757047ee54: mov    0x78(%rsp),%rax
  0x00007f757047ee59: add    $0x80,%rsp
  0x00007f757047ee60: add    $0x8,%rsp
  0x00007f757047ee64: popfq  
  0x00007f757047ee65: mov    %r13,%rsp
  0x00007f757047ee68: pop    %rax
  0x00007f757047ee69: mov    %rsp,%r13
  0x00007f757047ee6c: sub    $0x20,%rsp
  0x00007f757047ee70: mov    %rax,(%rsp)
  0x00007f757047ee74: mov    %rsi,0x10(%rsp)
  0x00007f757047ee79: mov    %rdx,0x8(%rsp)
  0x00007f757047ee7e: mov    0x40(%rbx),%rcx
  0x00007f757047ee82: jmpq   *%rcx

AHE@0x00007f75800c21c8: 0xbbbaa000 i2c: 0x00007f757047ef60 c2i: 0x00007f757047f084 c2iUV: 0x00007f757047f057
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (575 bytes generated)
c2i argument handler starts at 0x7f757047f084
  0x00007f757047ef60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047ef64: movabs $0x7f757036e3e0,%r11
  0x00007f757047ef6e: cmp    %r11,%rax
  0x00007f757047ef71: jbe    0x00007f757047ef8a
  0x00007f757047ef77: movabs $0x7f757046e3e0,%r11
  0x00007f757047ef81: cmp    %r11,%rax
  0x00007f757047ef84: jb     0x00007f757047f027
  0x00007f757047ef8a: movabs $0x7f7570369420,%r11
  0x00007f757047ef94: cmp    %r11,%rax
  0x00007f757047ef97: jbe    0x00007f757047efb0
  0x00007f757047ef9d: movabs $0x7f757036de58,%r11
  0x00007f757047efa7: cmp    %r11,%rax
  0x00007f757047efaa: jb     0x00007f757047f027
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047efb0: mov    %rsp,-0x28(%rsp)
  0x00007f757047efb5: sub    $0x80,%rsp
  0x00007f757047efbc: mov    %rax,0x78(%rsp)
  0x00007f757047efc1: mov    %rcx,0x70(%rsp)
  0x00007f757047efc6: mov    %rdx,0x68(%rsp)
  0x00007f757047efcb: mov    %rbx,0x60(%rsp)
  0x00007f757047efd0: mov    %rbp,0x50(%rsp)
  0x00007f757047efd5: mov    %rsi,0x48(%rsp)
  0x00007f757047efda: mov    %rdi,0x40(%rsp)
  0x00007f757047efdf: mov    %r8,0x38(%rsp)
  0x00007f757047efe4: mov    %r9,0x30(%rsp)
  0x00007f757047efe9: mov    %r10,0x28(%rsp)
  0x00007f757047efee: mov    %r11,0x20(%rsp)
  0x00007f757047eff3: mov    %r12,0x18(%rsp)
  0x00007f757047eff8: mov    %r13,0x10(%rsp)
  0x00007f757047effd: mov    %r14,0x8(%rsp)
  0x00007f757047f002: mov    %r15,(%rsp)
  0x00007f757047f006: movabs $0x7f758592f470,%rdi
  0x00007f757047f010: movabs $0x7f757047efb0,%rsi
  0x00007f757047f01a: mov    %rsp,%rdx
  0x00007f757047f01d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f021: callq  0x00007f75853729fa
  0x00007f757047f026: hlt    
  ;; } verify_i2ce 
  0x00007f757047f027: mov    %rsp,%r11
  0x00007f757047f02a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f02e: push   %rax
  0x00007f757047f02f: mov    %r11,%rax
  0x00007f757047f032: mov    0x50(%rbx),%r11
  0x00007f757047f036: mov    0x28(%rax),%rsi
  0x00007f757047f03a: mov    0x20(%rax),%rdx
  0x00007f757047f03e: mov    0x18(%rax),%rcx
  0x00007f757047f042: mov    0x10(%rax),%r8d
  0x00007f757047f046: mov    0x8(%rax),%r9d
  0x00007f757047f04a: mov    %rbx,0x258(%r15)
  0x00007f757047f051: mov    %rbx,%rax
  0x00007f757047f054: jmpq   *%r11
  0x00007f757047f057: mov    0x8(%rsi),%ebx
  0x00007f757047f05a: shl    $0x3,%rbx
  0x00007f757047f05e: cmp    0x10(%rax),%rbx
  0x00007f757047f062: mov    0x8(%rax),%rbx
  0x00007f757047f066: je     0x00007f757047f071
  0x00007f757047f06c: jmpq   0x00007f757046ec40
  0x00007f757047f071: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f079: je     0x00007f757047f174
  0x00007f757047f07f: jmpq   0x00007f757046ec40
  0x00007f757047f084: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f08c: je     0x00007f757047f174
  0x00007f757047f092: mov    %rsp,%r13
  0x00007f757047f095: mov    (%rsp),%rax
  0x00007f757047f099: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f09d: pushfq 
  0x00007f757047f09e: sub    $0x8,%rsp
  0x00007f757047f0a2: mov    %rsp,-0x28(%rsp)
  0x00007f757047f0a7: sub    $0x80,%rsp
  0x00007f757047f0ae: mov    %rax,0x78(%rsp)
  0x00007f757047f0b3: mov    %rcx,0x70(%rsp)
  0x00007f757047f0b8: mov    %rdx,0x68(%rsp)
  0x00007f757047f0bd: mov    %rbx,0x60(%rsp)
  0x00007f757047f0c2: mov    %rbp,0x50(%rsp)
  0x00007f757047f0c7: mov    %rsi,0x48(%rsp)
  0x00007f757047f0cc: mov    %rdi,0x40(%rsp)
  0x00007f757047f0d1: mov    %r8,0x38(%rsp)
  0x00007f757047f0d6: mov    %r9,0x30(%rsp)
  0x00007f757047f0db: mov    %r10,0x28(%rsp)
  0x00007f757047f0e0: mov    %r11,0x20(%rsp)
  0x00007f757047f0e5: mov    %r12,0x18(%rsp)
  0x00007f757047f0ea: mov    %r13,0x10(%rsp)
  0x00007f757047f0ef: mov    %r14,0x8(%rsp)
  0x00007f757047f0f4: mov    %r15,(%rsp)
  0x00007f757047f0f8: sub    $0x200,%rsp
  0x00007f757047f0ff: fxsave64 (%rsp)
  0x00007f757047f104: mov    %rbx,%rdi
  0x00007f757047f107: mov    %rax,%rsi
  0x00007f757047f10a: callq  0x00007f7585522bca
  0x00007f757047f10f: fxrstor64 (%rsp)
  0x00007f757047f114: add    $0x200,%rsp
  0x00007f757047f11b: mov    (%rsp),%r15
  0x00007f757047f11f: mov    0x8(%rsp),%r14
  0x00007f757047f124: mov    0x10(%rsp),%r13
  0x00007f757047f129: mov    0x18(%rsp),%r12
  0x00007f757047f12e: mov    0x20(%rsp),%r11
  0x00007f757047f133: mov    0x28(%rsp),%r10
  0x00007f757047f138: mov    0x30(%rsp),%r9
  0x00007f757047f13d: mov    0x38(%rsp),%r8
  0x00007f757047f142: mov    0x40(%rsp),%rdi
  0x00007f757047f147: mov    0x48(%rsp),%rsi
  0x00007f757047f14c: mov    0x50(%rsp),%rbp
  0x00007f757047f151: mov    0x60(%rsp),%rbx
  0x00007f757047f156: mov    0x68(%rsp),%rdx
  0x00007f757047f15b: mov    0x70(%rsp),%rcx
  0x00007f757047f160: mov    0x78(%rsp),%rax
  0x00007f757047f165: add    $0x80,%rsp
  0x00007f757047f16c: add    $0x8,%rsp
  0x00007f757047f170: popfq  
  0x00007f757047f171: mov    %r13,%rsp
  0x00007f757047f174: pop    %rax
  0x00007f757047f175: mov    %rsp,%r13
  0x00007f757047f178: sub    $0x30,%rsp
  0x00007f757047f17c: mov    %rax,(%rsp)
  0x00007f757047f180: mov    %rsi,0x28(%rsp)
  0x00007f757047f185: mov    %rdx,0x20(%rsp)
  0x00007f757047f18a: mov    %rcx,0x18(%rsp)
  0x00007f757047f18f: mov    %r8d,0x10(%rsp)
  0x00007f757047f194: mov    %r9d,0x8(%rsp)
  0x00007f757047f199: mov    0x40(%rbx),%rcx
  0x00007f757047f19d: jmpq   *%rcx

AHE@0x00007f75800c2210: 0xb0000000 i2c: 0x00007f757047f260 c2i: 0x00007f757047f374 c2iUV: 0x00007f757047f347
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757047f374
  0x00007f757047f260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047f264: movabs $0x7f757036e3e0,%r11
  0x00007f757047f26e: cmp    %r11,%rax
  0x00007f757047f271: jbe    0x00007f757047f28a
  0x00007f757047f277: movabs $0x7f757046e3e0,%r11
  0x00007f757047f281: cmp    %r11,%rax
  0x00007f757047f284: jb     0x00007f757047f327
  0x00007f757047f28a: movabs $0x7f7570369420,%r11
  0x00007f757047f294: cmp    %r11,%rax
  0x00007f757047f297: jbe    0x00007f757047f2b0
  0x00007f757047f29d: movabs $0x7f757036de58,%r11
  0x00007f757047f2a7: cmp    %r11,%rax
  0x00007f757047f2aa: jb     0x00007f757047f327
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047f2b0: mov    %rsp,-0x28(%rsp)
  0x00007f757047f2b5: sub    $0x80,%rsp
  0x00007f757047f2bc: mov    %rax,0x78(%rsp)
  0x00007f757047f2c1: mov    %rcx,0x70(%rsp)
  0x00007f757047f2c6: mov    %rdx,0x68(%rsp)
  0x00007f757047f2cb: mov    %rbx,0x60(%rsp)
  0x00007f757047f2d0: mov    %rbp,0x50(%rsp)
  0x00007f757047f2d5: mov    %rsi,0x48(%rsp)
  0x00007f757047f2da: mov    %rdi,0x40(%rsp)
  0x00007f757047f2df: mov    %r8,0x38(%rsp)
  0x00007f757047f2e4: mov    %r9,0x30(%rsp)
  0x00007f757047f2e9: mov    %r10,0x28(%rsp)
  0x00007f757047f2ee: mov    %r11,0x20(%rsp)
  0x00007f757047f2f3: mov    %r12,0x18(%rsp)
  0x00007f757047f2f8: mov    %r13,0x10(%rsp)
  0x00007f757047f2fd: mov    %r14,0x8(%rsp)
  0x00007f757047f302: mov    %r15,(%rsp)
  0x00007f757047f306: movabs $0x7f758592f470,%rdi
  0x00007f757047f310: movabs $0x7f757047f2b0,%rsi
  0x00007f757047f31a: mov    %rsp,%rdx
  0x00007f757047f31d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f321: callq  0x00007f75853729fa
  0x00007f757047f326: hlt    
  ;; } verify_i2ce 
  0x00007f757047f327: mov    %rsp,%r11
  0x00007f757047f32a: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f32e: push   %rax
  0x00007f757047f32f: mov    %r11,%rax
  0x00007f757047f332: mov    0x50(%rbx),%r11
  0x00007f757047f336: mov    0x8(%rax),%rsi
  0x00007f757047f33a: mov    %rbx,0x258(%r15)
  0x00007f757047f341: mov    %rbx,%rax
  0x00007f757047f344: jmpq   *%r11
  0x00007f757047f347: mov    0x8(%rsi),%ebx
  0x00007f757047f34a: shl    $0x3,%rbx
  0x00007f757047f34e: cmp    0x10(%rax),%rbx
  0x00007f757047f352: mov    0x8(%rax),%rbx
  0x00007f757047f356: je     0x00007f757047f361
  0x00007f757047f35c: jmpq   0x00007f757046ec40
  0x00007f757047f361: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f369: je     0x00007f757047f464
  0x00007f757047f36f: jmpq   0x00007f757046ec40
  0x00007f757047f374: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f37c: je     0x00007f757047f464
  0x00007f757047f382: mov    %rsp,%r13
  0x00007f757047f385: mov    (%rsp),%rax
  0x00007f757047f389: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f38d: pushfq 
  0x00007f757047f38e: sub    $0x8,%rsp
  0x00007f757047f392: mov    %rsp,-0x28(%rsp)
  0x00007f757047f397: sub    $0x80,%rsp
  0x00007f757047f39e: mov    %rax,0x78(%rsp)
  0x00007f757047f3a3: mov    %rcx,0x70(%rsp)
  0x00007f757047f3a8: mov    %rdx,0x68(%rsp)
  0x00007f757047f3ad: mov    %rbx,0x60(%rsp)
  0x00007f757047f3b2: mov    %rbp,0x50(%rsp)
  0x00007f757047f3b7: mov    %rsi,0x48(%rsp)
  0x00007f757047f3bc: mov    %rdi,0x40(%rsp)
  0x00007f757047f3c1: mov    %r8,0x38(%rsp)
  0x00007f757047f3c6: mov    %r9,0x30(%rsp)
  0x00007f757047f3cb: mov    %r10,0x28(%rsp)
  0x00007f757047f3d0: mov    %r11,0x20(%rsp)
  0x00007f757047f3d5: mov    %r12,0x18(%rsp)
  0x00007f757047f3da: mov    %r13,0x10(%rsp)
  0x00007f757047f3df: mov    %r14,0x8(%rsp)
  0x00007f757047f3e4: mov    %r15,(%rsp)
  0x00007f757047f3e8: sub    $0x200,%rsp
  0x00007f757047f3ef: fxsave64 (%rsp)
  0x00007f757047f3f4: mov    %rbx,%rdi
  0x00007f757047f3f7: mov    %rax,%rsi
  0x00007f757047f3fa: callq  0x00007f7585522bca
  0x00007f757047f3ff: fxrstor64 (%rsp)
  0x00007f757047f404: add    $0x200,%rsp
  0x00007f757047f40b: mov    (%rsp),%r15
  0x00007f757047f40f: mov    0x8(%rsp),%r14
  0x00007f757047f414: mov    0x10(%rsp),%r13
  0x00007f757047f419: mov    0x18(%rsp),%r12
  0x00007f757047f41e: mov    0x20(%rsp),%r11
  0x00007f757047f423: mov    0x28(%rsp),%r10
  0x00007f757047f428: mov    0x30(%rsp),%r9
  0x00007f757047f42d: mov    0x38(%rsp),%r8
  0x00007f757047f432: mov    0x40(%rsp),%rdi
  0x00007f757047f437: mov    0x48(%rsp),%rsi
  0x00007f757047f43c: mov    0x50(%rsp),%rbp
  0x00007f757047f441: mov    0x60(%rsp),%rbx
  0x00007f757047f446: mov    0x68(%rsp),%rdx
  0x00007f757047f44b: mov    0x70(%rsp),%rcx
  0x00007f757047f450: mov    0x78(%rsp),%rax
  0x00007f757047f455: add    $0x80,%rsp
  0x00007f757047f45c: add    $0x8,%rsp
  0x00007f757047f460: popfq  
  0x00007f757047f461: mov    %r13,%rsp
  0x00007f757047f464: pop    %rax
  0x00007f757047f465: mov    %rsp,%r13
  0x00007f757047f468: sub    $0x10,%rsp
  0x00007f757047f46c: mov    %rax,(%rsp)
  0x00007f757047f470: mov    %rsi,0x8(%rsp)
  0x00007f757047f475: mov    0x40(%rbx),%rcx
  0x00007f757047f479: jmpq   *%rcx

AHE@0x00007f75800c2258: 0xbb000000 i2c: 0x00007f757047f520 c2i: 0x00007f757047f638 c2iUV: 0x00007f757047f60b
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047f638
  0x00007f757047f520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047f524: movabs $0x7f757036e3e0,%r11
  0x00007f757047f52e: cmp    %r11,%rax
  0x00007f757047f531: jbe    0x00007f757047f54a
  0x00007f757047f537: movabs $0x7f757046e3e0,%r11
  0x00007f757047f541: cmp    %r11,%rax
  0x00007f757047f544: jb     0x00007f757047f5e7
  0x00007f757047f54a: movabs $0x7f7570369420,%r11
  0x00007f757047f554: cmp    %r11,%rax
  0x00007f757047f557: jbe    0x00007f757047f570
  0x00007f757047f55d: movabs $0x7f757036de58,%r11
  0x00007f757047f567: cmp    %r11,%rax
  0x00007f757047f56a: jb     0x00007f757047f5e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047f570: mov    %rsp,-0x28(%rsp)
  0x00007f757047f575: sub    $0x80,%rsp
  0x00007f757047f57c: mov    %rax,0x78(%rsp)
  0x00007f757047f581: mov    %rcx,0x70(%rsp)
  0x00007f757047f586: mov    %rdx,0x68(%rsp)
  0x00007f757047f58b: mov    %rbx,0x60(%rsp)
  0x00007f757047f590: mov    %rbp,0x50(%rsp)
  0x00007f757047f595: mov    %rsi,0x48(%rsp)
  0x00007f757047f59a: mov    %rdi,0x40(%rsp)
  0x00007f757047f59f: mov    %r8,0x38(%rsp)
  0x00007f757047f5a4: mov    %r9,0x30(%rsp)
  0x00007f757047f5a9: mov    %r10,0x28(%rsp)
  0x00007f757047f5ae: mov    %r11,0x20(%rsp)
  0x00007f757047f5b3: mov    %r12,0x18(%rsp)
  0x00007f757047f5b8: mov    %r13,0x10(%rsp)
  0x00007f757047f5bd: mov    %r14,0x8(%rsp)
  0x00007f757047f5c2: mov    %r15,(%rsp)
  0x00007f757047f5c6: movabs $0x7f758592f470,%rdi
  0x00007f757047f5d0: movabs $0x7f757047f570,%rsi
  0x00007f757047f5da: mov    %rsp,%rdx
  0x00007f757047f5dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f5e1: callq  0x00007f75853729fa
  0x00007f757047f5e6: hlt    
  ;; } verify_i2ce 
  0x00007f757047f5e7: mov    %rsp,%r11
  0x00007f757047f5ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f5ee: push   %rax
  0x00007f757047f5ef: mov    %r11,%rax
  0x00007f757047f5f2: mov    0x50(%rbx),%r11
  0x00007f757047f5f6: mov    0x10(%rax),%rsi
  0x00007f757047f5fa: mov    0x8(%rax),%rdx
  0x00007f757047f5fe: mov    %rbx,0x258(%r15)
  0x00007f757047f605: mov    %rbx,%rax
  0x00007f757047f608: jmpq   *%r11
  0x00007f757047f60b: mov    0x8(%rsi),%ebx
  0x00007f757047f60e: shl    $0x3,%rbx
  0x00007f757047f612: cmp    0x10(%rax),%rbx
  0x00007f757047f616: mov    0x8(%rax),%rbx
  0x00007f757047f61a: je     0x00007f757047f625
  0x00007f757047f620: jmpq   0x00007f757046ec40
  0x00007f757047f625: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f62d: je     0x00007f757047f728
  0x00007f757047f633: jmpq   0x00007f757046ec40
  0x00007f757047f638: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f640: je     0x00007f757047f728
  0x00007f757047f646: mov    %rsp,%r13
  0x00007f757047f649: mov    (%rsp),%rax
  0x00007f757047f64d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f651: pushfq 
  0x00007f757047f652: sub    $0x8,%rsp
  0x00007f757047f656: mov    %rsp,-0x28(%rsp)
  0x00007f757047f65b: sub    $0x80,%rsp
  0x00007f757047f662: mov    %rax,0x78(%rsp)
  0x00007f757047f667: mov    %rcx,0x70(%rsp)
  0x00007f757047f66c: mov    %rdx,0x68(%rsp)
  0x00007f757047f671: mov    %rbx,0x60(%rsp)
  0x00007f757047f676: mov    %rbp,0x50(%rsp)
  0x00007f757047f67b: mov    %rsi,0x48(%rsp)
  0x00007f757047f680: mov    %rdi,0x40(%rsp)
  0x00007f757047f685: mov    %r8,0x38(%rsp)
  0x00007f757047f68a: mov    %r9,0x30(%rsp)
  0x00007f757047f68f: mov    %r10,0x28(%rsp)
  0x00007f757047f694: mov    %r11,0x20(%rsp)
  0x00007f757047f699: mov    %r12,0x18(%rsp)
  0x00007f757047f69e: mov    %r13,0x10(%rsp)
  0x00007f757047f6a3: mov    %r14,0x8(%rsp)
  0x00007f757047f6a8: mov    %r15,(%rsp)
  0x00007f757047f6ac: sub    $0x200,%rsp
  0x00007f757047f6b3: fxsave64 (%rsp)
  0x00007f757047f6b8: mov    %rbx,%rdi
  0x00007f757047f6bb: mov    %rax,%rsi
  0x00007f757047f6be: callq  0x00007f7585522bca
  0x00007f757047f6c3: fxrstor64 (%rsp)
  0x00007f757047f6c8: add    $0x200,%rsp
  0x00007f757047f6cf: mov    (%rsp),%r15
  0x00007f757047f6d3: mov    0x8(%rsp),%r14
  0x00007f757047f6d8: mov    0x10(%rsp),%r13
  0x00007f757047f6dd: mov    0x18(%rsp),%r12
  0x00007f757047f6e2: mov    0x20(%rsp),%r11
  0x00007f757047f6e7: mov    0x28(%rsp),%r10
  0x00007f757047f6ec: mov    0x30(%rsp),%r9
  0x00007f757047f6f1: mov    0x38(%rsp),%r8
  0x00007f757047f6f6: mov    0x40(%rsp),%rdi
  0x00007f757047f6fb: mov    0x48(%rsp),%rsi
  0x00007f757047f700: mov    0x50(%rsp),%rbp
  0x00007f757047f705: mov    0x60(%rsp),%rbx
  0x00007f757047f70a: mov    0x68(%rsp),%rdx
  0x00007f757047f70f: mov    0x70(%rsp),%rcx
  0x00007f757047f714: mov    0x78(%rsp),%rax
  0x00007f757047f719: add    $0x80,%rsp
  0x00007f757047f720: add    $0x8,%rsp
  0x00007f757047f724: popfq  
  0x00007f757047f725: mov    %r13,%rsp
  0x00007f757047f728: pop    %rax
  0x00007f757047f729: mov    %rsp,%r13
  0x00007f757047f72c: sub    $0x20,%rsp
  0x00007f757047f730: mov    %rax,(%rsp)
  0x00007f757047f734: mov    %rsi,0x10(%rsp)
  0x00007f757047f739: mov    %rdx,0x8(%rsp)
  0x00007f757047f73e: mov    0x40(%rbx),%rcx
  0x00007f757047f742: jmpq   *%rcx

AHE@0x00007f75800c22a0: 0xbbb00000 i2c: 0x00007f757047f820 c2i: 0x00007f757047f93c c2iUV: 0x00007f757047f90f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (557 bytes generated)
c2i argument handler starts at 0x7f757047f93c
  0x00007f757047f820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047f824: movabs $0x7f757036e3e0,%r11
  0x00007f757047f82e: cmp    %r11,%rax
  0x00007f757047f831: jbe    0x00007f757047f84a
  0x00007f757047f837: movabs $0x7f757046e3e0,%r11
  0x00007f757047f841: cmp    %r11,%rax
  0x00007f757047f844: jb     0x00007f757047f8e7
  0x00007f757047f84a: movabs $0x7f7570369420,%r11
  0x00007f757047f854: cmp    %r11,%rax
  0x00007f757047f857: jbe    0x00007f757047f870
  0x00007f757047f85d: movabs $0x7f757036de58,%r11
  0x00007f757047f867: cmp    %r11,%rax
  0x00007f757047f86a: jb     0x00007f757047f8e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047f870: mov    %rsp,-0x28(%rsp)
  0x00007f757047f875: sub    $0x80,%rsp
  0x00007f757047f87c: mov    %rax,0x78(%rsp)
  0x00007f757047f881: mov    %rcx,0x70(%rsp)
  0x00007f757047f886: mov    %rdx,0x68(%rsp)
  0x00007f757047f88b: mov    %rbx,0x60(%rsp)
  0x00007f757047f890: mov    %rbp,0x50(%rsp)
  0x00007f757047f895: mov    %rsi,0x48(%rsp)
  0x00007f757047f89a: mov    %rdi,0x40(%rsp)
  0x00007f757047f89f: mov    %r8,0x38(%rsp)
  0x00007f757047f8a4: mov    %r9,0x30(%rsp)
  0x00007f757047f8a9: mov    %r10,0x28(%rsp)
  0x00007f757047f8ae: mov    %r11,0x20(%rsp)
  0x00007f757047f8b3: mov    %r12,0x18(%rsp)
  0x00007f757047f8b8: mov    %r13,0x10(%rsp)
  0x00007f757047f8bd: mov    %r14,0x8(%rsp)
  0x00007f757047f8c2: mov    %r15,(%rsp)
  0x00007f757047f8c6: movabs $0x7f758592f470,%rdi
  0x00007f757047f8d0: movabs $0x7f757047f870,%rsi
  0x00007f757047f8da: mov    %rsp,%rdx
  0x00007f757047f8dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f8e1: callq  0x00007f75853729fa
  0x00007f757047f8e6: hlt    
  ;; } verify_i2ce 
  0x00007f757047f8e7: mov    %rsp,%r11
  0x00007f757047f8ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f8ee: push   %rax
  0x00007f757047f8ef: mov    %r11,%rax
  0x00007f757047f8f2: mov    0x50(%rbx),%r11
  0x00007f757047f8f6: mov    0x18(%rax),%rsi
  0x00007f757047f8fa: mov    0x10(%rax),%rdx
  0x00007f757047f8fe: mov    0x8(%rax),%rcx
  0x00007f757047f902: mov    %rbx,0x258(%r15)
  0x00007f757047f909: mov    %rbx,%rax
  0x00007f757047f90c: jmpq   *%r11
  0x00007f757047f90f: mov    0x8(%rsi),%ebx
  0x00007f757047f912: shl    $0x3,%rbx
  0x00007f757047f916: cmp    0x10(%rax),%rbx
  0x00007f757047f91a: mov    0x8(%rax),%rbx
  0x00007f757047f91e: je     0x00007f757047f929
  0x00007f757047f924: jmpq   0x00007f757046ec40
  0x00007f757047f929: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f931: je     0x00007f757047fa2c
  0x00007f757047f937: jmpq   0x00007f757046ec40
  0x00007f757047f93c: cmpq   $0x0,0x58(%rbx)
  0x00007f757047f944: je     0x00007f757047fa2c
  0x00007f757047f94a: mov    %rsp,%r13
  0x00007f757047f94d: mov    (%rsp),%rax
  0x00007f757047f951: and    $0xfffffffffffffff0,%rsp
  0x00007f757047f955: pushfq 
  0x00007f757047f956: sub    $0x8,%rsp
  0x00007f757047f95a: mov    %rsp,-0x28(%rsp)
  0x00007f757047f95f: sub    $0x80,%rsp
  0x00007f757047f966: mov    %rax,0x78(%rsp)
  0x00007f757047f96b: mov    %rcx,0x70(%rsp)
  0x00007f757047f970: mov    %rdx,0x68(%rsp)
  0x00007f757047f975: mov    %rbx,0x60(%rsp)
  0x00007f757047f97a: mov    %rbp,0x50(%rsp)
  0x00007f757047f97f: mov    %rsi,0x48(%rsp)
  0x00007f757047f984: mov    %rdi,0x40(%rsp)
  0x00007f757047f989: mov    %r8,0x38(%rsp)
  0x00007f757047f98e: mov    %r9,0x30(%rsp)
  0x00007f757047f993: mov    %r10,0x28(%rsp)
  0x00007f757047f998: mov    %r11,0x20(%rsp)
  0x00007f757047f99d: mov    %r12,0x18(%rsp)
  0x00007f757047f9a2: mov    %r13,0x10(%rsp)
  0x00007f757047f9a7: mov    %r14,0x8(%rsp)
  0x00007f757047f9ac: mov    %r15,(%rsp)
  0x00007f757047f9b0: sub    $0x200,%rsp
  0x00007f757047f9b7: fxsave64 (%rsp)
  0x00007f757047f9bc: mov    %rbx,%rdi
  0x00007f757047f9bf: mov    %rax,%rsi
  0x00007f757047f9c2: callq  0x00007f7585522bca
  0x00007f757047f9c7: fxrstor64 (%rsp)
  0x00007f757047f9cc: add    $0x200,%rsp
  0x00007f757047f9d3: mov    (%rsp),%r15
  0x00007f757047f9d7: mov    0x8(%rsp),%r14
  0x00007f757047f9dc: mov    0x10(%rsp),%r13
  0x00007f757047f9e1: mov    0x18(%rsp),%r12
  0x00007f757047f9e6: mov    0x20(%rsp),%r11
  0x00007f757047f9eb: mov    0x28(%rsp),%r10
  0x00007f757047f9f0: mov    0x30(%rsp),%r9
  0x00007f757047f9f5: mov    0x38(%rsp),%r8
  0x00007f757047f9fa: mov    0x40(%rsp),%rdi
  0x00007f757047f9ff: mov    0x48(%rsp),%rsi
  0x00007f757047fa04: mov    0x50(%rsp),%rbp
  0x00007f757047fa09: mov    0x60(%rsp),%rbx
  0x00007f757047fa0e: mov    0x68(%rsp),%rdx
  0x00007f757047fa13: mov    0x70(%rsp),%rcx
  0x00007f757047fa18: mov    0x78(%rsp),%rax
  0x00007f757047fa1d: add    $0x80,%rsp
  0x00007f757047fa24: add    $0x8,%rsp
  0x00007f757047fa28: popfq  
  0x00007f757047fa29: mov    %r13,%rsp
  0x00007f757047fa2c: pop    %rax
  0x00007f757047fa2d: mov    %rsp,%r13
  0x00007f757047fa30: sub    $0x20,%rsp
  0x00007f757047fa34: mov    %rax,(%rsp)
  0x00007f757047fa38: mov    %rsi,0x18(%rsp)
  0x00007f757047fa3d: mov    %rdx,0x10(%rsp)
  0x00007f757047fa42: mov    %rcx,0x8(%rsp)
  0x00007f757047fa47: mov    0x40(%rbx),%rcx
  0x00007f757047fa4b: jmpq   *%rcx

AHE@0x00007f75800c22e8: 0xbb000000 i2c: 0x00007f757047fb20 c2i: 0x00007f757047fc38 c2iUV: 0x00007f757047fc0b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f757047fc38
  0x00007f757047fb20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047fb24: movabs $0x7f757036e3e0,%r11
  0x00007f757047fb2e: cmp    %r11,%rax
  0x00007f757047fb31: jbe    0x00007f757047fb4a
  0x00007f757047fb37: movabs $0x7f757046e3e0,%r11
  0x00007f757047fb41: cmp    %r11,%rax
  0x00007f757047fb44: jb     0x00007f757047fbe7
  0x00007f757047fb4a: movabs $0x7f7570369420,%r11
  0x00007f757047fb54: cmp    %r11,%rax
  0x00007f757047fb57: jbe    0x00007f757047fb70
  0x00007f757047fb5d: movabs $0x7f757036de58,%r11
  0x00007f757047fb67: cmp    %r11,%rax
  0x00007f757047fb6a: jb     0x00007f757047fbe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047fb70: mov    %rsp,-0x28(%rsp)
  0x00007f757047fb75: sub    $0x80,%rsp
  0x00007f757047fb7c: mov    %rax,0x78(%rsp)
  0x00007f757047fb81: mov    %rcx,0x70(%rsp)
  0x00007f757047fb86: mov    %rdx,0x68(%rsp)
  0x00007f757047fb8b: mov    %rbx,0x60(%rsp)
  0x00007f757047fb90: mov    %rbp,0x50(%rsp)
  0x00007f757047fb95: mov    %rsi,0x48(%rsp)
  0x00007f757047fb9a: mov    %rdi,0x40(%rsp)
  0x00007f757047fb9f: mov    %r8,0x38(%rsp)
  0x00007f757047fba4: mov    %r9,0x30(%rsp)
  0x00007f757047fba9: mov    %r10,0x28(%rsp)
  0x00007f757047fbae: mov    %r11,0x20(%rsp)
  0x00007f757047fbb3: mov    %r12,0x18(%rsp)
  0x00007f757047fbb8: mov    %r13,0x10(%rsp)
  0x00007f757047fbbd: mov    %r14,0x8(%rsp)
  0x00007f757047fbc2: mov    %r15,(%rsp)
  0x00007f757047fbc6: movabs $0x7f758592f470,%rdi
  0x00007f757047fbd0: movabs $0x7f757047fb70,%rsi
  0x00007f757047fbda: mov    %rsp,%rdx
  0x00007f757047fbdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047fbe1: callq  0x00007f75853729fa
  0x00007f757047fbe6: hlt    
  ;; } verify_i2ce 
  0x00007f757047fbe7: mov    %rsp,%r11
  0x00007f757047fbea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047fbee: push   %rax
  0x00007f757047fbef: mov    %r11,%rax
  0x00007f757047fbf2: mov    0x50(%rbx),%r11
  0x00007f757047fbf6: mov    0x10(%rax),%rsi
  0x00007f757047fbfa: mov    0x8(%rax),%rdx
  0x00007f757047fbfe: mov    %rbx,0x258(%r15)
  0x00007f757047fc05: mov    %rbx,%rax
  0x00007f757047fc08: jmpq   *%r11
  0x00007f757047fc0b: mov    0x8(%rsi),%ebx
  0x00007f757047fc0e: shl    $0x3,%rbx
  0x00007f757047fc12: cmp    0x10(%rax),%rbx
  0x00007f757047fc16: mov    0x8(%rax),%rbx
  0x00007f757047fc1a: je     0x00007f757047fc25
  0x00007f757047fc20: jmpq   0x00007f757046ec40
  0x00007f757047fc25: cmpq   $0x0,0x58(%rbx)
  0x00007f757047fc2d: je     0x00007f757047fd28
  0x00007f757047fc33: jmpq   0x00007f757046ec40
  0x00007f757047fc38: cmpq   $0x0,0x58(%rbx)
  0x00007f757047fc40: je     0x00007f757047fd28
  0x00007f757047fc46: mov    %rsp,%r13
  0x00007f757047fc49: mov    (%rsp),%rax
  0x00007f757047fc4d: and    $0xfffffffffffffff0,%rsp
  0x00007f757047fc51: pushfq 
  0x00007f757047fc52: sub    $0x8,%rsp
  0x00007f757047fc56: mov    %rsp,-0x28(%rsp)
  0x00007f757047fc5b: sub    $0x80,%rsp
  0x00007f757047fc62: mov    %rax,0x78(%rsp)
  0x00007f757047fc67: mov    %rcx,0x70(%rsp)
  0x00007f757047fc6c: mov    %rdx,0x68(%rsp)
  0x00007f757047fc71: mov    %rbx,0x60(%rsp)
  0x00007f757047fc76: mov    %rbp,0x50(%rsp)
  0x00007f757047fc7b: mov    %rsi,0x48(%rsp)
  0x00007f757047fc80: mov    %rdi,0x40(%rsp)
  0x00007f757047fc85: mov    %r8,0x38(%rsp)
  0x00007f757047fc8a: mov    %r9,0x30(%rsp)
  0x00007f757047fc8f: mov    %r10,0x28(%rsp)
  0x00007f757047fc94: mov    %r11,0x20(%rsp)
  0x00007f757047fc99: mov    %r12,0x18(%rsp)
  0x00007f757047fc9e: mov    %r13,0x10(%rsp)
  0x00007f757047fca3: mov    %r14,0x8(%rsp)
  0x00007f757047fca8: mov    %r15,(%rsp)
  0x00007f757047fcac: sub    $0x200,%rsp
  0x00007f757047fcb3: fxsave64 (%rsp)
  0x00007f757047fcb8: mov    %rbx,%rdi
  0x00007f757047fcbb: mov    %rax,%rsi
  0x00007f757047fcbe: callq  0x00007f7585522bca
  0x00007f757047fcc3: fxrstor64 (%rsp)
  0x00007f757047fcc8: add    $0x200,%rsp
  0x00007f757047fccf: mov    (%rsp),%r15
  0x00007f757047fcd3: mov    0x8(%rsp),%r14
  0x00007f757047fcd8: mov    0x10(%rsp),%r13
  0x00007f757047fcdd: mov    0x18(%rsp),%r12
  0x00007f757047fce2: mov    0x20(%rsp),%r11
  0x00007f757047fce7: mov    0x28(%rsp),%r10
  0x00007f757047fcec: mov    0x30(%rsp),%r9
  0x00007f757047fcf1: mov    0x38(%rsp),%r8
  0x00007f757047fcf6: mov    0x40(%rsp),%rdi
  0x00007f757047fcfb: mov    0x48(%rsp),%rsi
  0x00007f757047fd00: mov    0x50(%rsp),%rbp
  0x00007f757047fd05: mov    0x60(%rsp),%rbx
  0x00007f757047fd0a: mov    0x68(%rsp),%rdx
  0x00007f757047fd0f: mov    0x70(%rsp),%rcx
  0x00007f757047fd14: mov    0x78(%rsp),%rax
  0x00007f757047fd19: add    $0x80,%rsp
  0x00007f757047fd20: add    $0x8,%rsp
  0x00007f757047fd24: popfq  
  0x00007f757047fd25: mov    %r13,%rsp
  0x00007f757047fd28: pop    %rax
  0x00007f757047fd29: mov    %rsp,%r13
  0x00007f757047fd2c: sub    $0x20,%rsp
  0x00007f757047fd30: mov    %rax,(%rsp)
  0x00007f757047fd34: mov    %rsi,0x10(%rsp)
  0x00007f757047fd39: mov    %rdx,0x8(%rsp)
  0x00007f757047fd3e: mov    0x40(%rbx),%rcx
  0x00007f757047fd42: jmpq   *%rcx

AHE@0x00007f75800c2330: 0xb0000000 i2c: 0x00007f757047fe20 c2i: 0x00007f757047ff34 c2iUV: 0x00007f757047ff07
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f757047ff34
  0x00007f757047fe20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757047fe24: movabs $0x7f757036e3e0,%r11
  0x00007f757047fe2e: cmp    %r11,%rax
  0x00007f757047fe31: jbe    0x00007f757047fe4a
  0x00007f757047fe37: movabs $0x7f757046e3e0,%r11
  0x00007f757047fe41: cmp    %r11,%rax
  0x00007f757047fe44: jb     0x00007f757047fee7
  0x00007f757047fe4a: movabs $0x7f7570369420,%r11
  0x00007f757047fe54: cmp    %r11,%rax
  0x00007f757047fe57: jbe    0x00007f757047fe70
  0x00007f757047fe5d: movabs $0x7f757036de58,%r11
  0x00007f757047fe67: cmp    %r11,%rax
  0x00007f757047fe6a: jb     0x00007f757047fee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757047fe70: mov    %rsp,-0x28(%rsp)
  0x00007f757047fe75: sub    $0x80,%rsp
  0x00007f757047fe7c: mov    %rax,0x78(%rsp)
  0x00007f757047fe81: mov    %rcx,0x70(%rsp)
  0x00007f757047fe86: mov    %rdx,0x68(%rsp)
  0x00007f757047fe8b: mov    %rbx,0x60(%rsp)
  0x00007f757047fe90: mov    %rbp,0x50(%rsp)
  0x00007f757047fe95: mov    %rsi,0x48(%rsp)
  0x00007f757047fe9a: mov    %rdi,0x40(%rsp)
  0x00007f757047fe9f: mov    %r8,0x38(%rsp)
  0x00007f757047fea4: mov    %r9,0x30(%rsp)
  0x00007f757047fea9: mov    %r10,0x28(%rsp)
  0x00007f757047feae: mov    %r11,0x20(%rsp)
  0x00007f757047feb3: mov    %r12,0x18(%rsp)
  0x00007f757047feb8: mov    %r13,0x10(%rsp)
  0x00007f757047febd: mov    %r14,0x8(%rsp)
  0x00007f757047fec2: mov    %r15,(%rsp)
  0x00007f757047fec6: movabs $0x7f758592f470,%rdi
  0x00007f757047fed0: movabs $0x7f757047fe70,%rsi
  0x00007f757047feda: mov    %rsp,%rdx
  0x00007f757047fedd: and    $0xfffffffffffffff0,%rsp
  0x00007f757047fee1: callq  0x00007f75853729fa
  0x00007f757047fee6: hlt    
  ;; } verify_i2ce 
  0x00007f757047fee7: mov    %rsp,%r11
  0x00007f757047feea: and    $0xfffffffffffffff0,%rsp
  0x00007f757047feee: push   %rax
  0x00007f757047feef: mov    %r11,%rax
  0x00007f757047fef2: mov    0x50(%rbx),%r11
  0x00007f757047fef6: mov    0x8(%rax),%rsi
  0x00007f757047fefa: mov    %rbx,0x258(%r15)
  0x00007f757047ff01: mov    %rbx,%rax
  0x00007f757047ff04: jmpq   *%r11
  0x00007f757047ff07: mov    0x8(%rsi),%ebx
  0x00007f757047ff0a: shl    $0x3,%rbx
  0x00007f757047ff0e: cmp    0x10(%rax),%rbx
  0x00007f757047ff12: mov    0x8(%rax),%rbx
  0x00007f757047ff16: je     0x00007f757047ff21
  0x00007f757047ff1c: jmpq   0x00007f757046ec40
  0x00007f757047ff21: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ff29: je     0x00007f7570480024
  0x00007f757047ff2f: jmpq   0x00007f757046ec40
  0x00007f757047ff34: cmpq   $0x0,0x58(%rbx)
  0x00007f757047ff3c: je     0x00007f7570480024
  0x00007f757047ff42: mov    %rsp,%r13
  0x00007f757047ff45: mov    (%rsp),%rax
  0x00007f757047ff49: and    $0xfffffffffffffff0,%rsp
  0x00007f757047ff4d: pushfq 
  0x00007f757047ff4e: sub    $0x8,%rsp
  0x00007f757047ff52: mov    %rsp,-0x28(%rsp)
  0x00007f757047ff57: sub    $0x80,%rsp
  0x00007f757047ff5e: mov    %rax,0x78(%rsp)
  0x00007f757047ff63: mov    %rcx,0x70(%rsp)
  0x00007f757047ff68: mov    %rdx,0x68(%rsp)
  0x00007f757047ff6d: mov    %rbx,0x60(%rsp)
  0x00007f757047ff72: mov    %rbp,0x50(%rsp)
  0x00007f757047ff77: mov    %rsi,0x48(%rsp)
  0x00007f757047ff7c: mov    %rdi,0x40(%rsp)
  0x00007f757047ff81: mov    %r8,0x38(%rsp)
  0x00007f757047ff86: mov    %r9,0x30(%rsp)
  0x00007f757047ff8b: mov    %r10,0x28(%rsp)
  0x00007f757047ff90: mov    %r11,0x20(%rsp)
  0x00007f757047ff95: mov    %r12,0x18(%rsp)
  0x00007f757047ff9a: mov    %r13,0x10(%rsp)
  0x00007f757047ff9f: mov    %r14,0x8(%rsp)
  0x00007f757047ffa4: mov    %r15,(%rsp)
  0x00007f757047ffa8: sub    $0x200,%rsp
  0x00007f757047ffaf: fxsave64 (%rsp)
  0x00007f757047ffb4: mov    %rbx,%rdi
  0x00007f757047ffb7: mov    %rax,%rsi
  0x00007f757047ffba: callq  0x00007f7585522bca
  0x00007f757047ffbf: fxrstor64 (%rsp)
  0x00007f757047ffc4: add    $0x200,%rsp
  0x00007f757047ffcb: mov    (%rsp),%r15
  0x00007f757047ffcf: mov    0x8(%rsp),%r14
  0x00007f757047ffd4: mov    0x10(%rsp),%r13
  0x00007f757047ffd9: mov    0x18(%rsp),%r12
  0x00007f757047ffde: mov    0x20(%rsp),%r11
  0x00007f757047ffe3: mov    0x28(%rsp),%r10
  0x00007f757047ffe8: mov    0x30(%rsp),%r9
  0x00007f757047ffed: mov    0x38(%rsp),%r8
  0x00007f757047fff2: mov    0x40(%rsp),%rdi
  0x00007f757047fff7: mov    0x48(%rsp),%rsi
  0x00007f757047fffc: mov    0x50(%rsp),%rbp
  0x00007f7570480001: mov    0x60(%rsp),%rbx
  0x00007f7570480006: mov    0x68(%rsp),%rdx
  0x00007f757048000b: mov    0x70(%rsp),%rcx
  0x00007f7570480010: mov    0x78(%rsp),%rax
  0x00007f7570480015: add    $0x80,%rsp
  0x00007f757048001c: add    $0x8,%rsp
  0x00007f7570480020: popfq  
  0x00007f7570480021: mov    %r13,%rsp
  0x00007f7570480024: pop    %rax
  0x00007f7570480025: mov    %rsp,%r13
  0x00007f7570480028: sub    $0x10,%rsp
  0x00007f757048002c: mov    %rax,(%rsp)
  0x00007f7570480030: mov    %rsi,0x8(%rsp)
  0x00007f7570480035: mov    0x40(%rbx),%rcx
  0x00007f7570480039: jmpq   *%rcx

AHE@0x00007f75800c2378: 0xb0000000 i2c: 0x00007f75704800e0 c2i: 0x00007f75704801f4 c2iUV: 0x00007f75704801c7
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f75704801f4
  0x00007f75704800e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704800e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704800ee: cmp    %r11,%rax
  0x00007f75704800f1: jbe    0x00007f757048010a
  0x00007f75704800f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570480101: cmp    %r11,%rax
  0x00007f7570480104: jb     0x00007f75704801a7
  0x00007f757048010a: movabs $0x7f7570369420,%r11
  0x00007f7570480114: cmp    %r11,%rax
  0x00007f7570480117: jbe    0x00007f7570480130
  0x00007f757048011d: movabs $0x7f757036de58,%r11
  0x00007f7570480127: cmp    %r11,%rax
  0x00007f757048012a: jb     0x00007f75704801a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570480130: mov    %rsp,-0x28(%rsp)
  0x00007f7570480135: sub    $0x80,%rsp
  0x00007f757048013c: mov    %rax,0x78(%rsp)
  0x00007f7570480141: mov    %rcx,0x70(%rsp)
  0x00007f7570480146: mov    %rdx,0x68(%rsp)
  0x00007f757048014b: mov    %rbx,0x60(%rsp)
  0x00007f7570480150: mov    %rbp,0x50(%rsp)
  0x00007f7570480155: mov    %rsi,0x48(%rsp)
  0x00007f757048015a: mov    %rdi,0x40(%rsp)
  0x00007f757048015f: mov    %r8,0x38(%rsp)
  0x00007f7570480164: mov    %r9,0x30(%rsp)
  0x00007f7570480169: mov    %r10,0x28(%rsp)
  0x00007f757048016e: mov    %r11,0x20(%rsp)
  0x00007f7570480173: mov    %r12,0x18(%rsp)
  0x00007f7570480178: mov    %r13,0x10(%rsp)
  0x00007f757048017d: mov    %r14,0x8(%rsp)
  0x00007f7570480182: mov    %r15,(%rsp)
  0x00007f7570480186: movabs $0x7f758592f470,%rdi
  0x00007f7570480190: movabs $0x7f7570480130,%rsi
  0x00007f757048019a: mov    %rsp,%rdx
  0x00007f757048019d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704801a1: callq  0x00007f75853729fa
  0x00007f75704801a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704801a7: mov    %rsp,%r11
  0x00007f75704801aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704801ae: push   %rax
  0x00007f75704801af: mov    %r11,%rax
  0x00007f75704801b2: mov    0x50(%rbx),%r11
  0x00007f75704801b6: mov    0x8(%rax),%rsi
  0x00007f75704801ba: mov    %rbx,0x258(%r15)
  0x00007f75704801c1: mov    %rbx,%rax
  0x00007f75704801c4: jmpq   *%r11
  0x00007f75704801c7: mov    0x8(%rsi),%ebx
  0x00007f75704801ca: shl    $0x3,%rbx
  0x00007f75704801ce: cmp    0x10(%rax),%rbx
  0x00007f75704801d2: mov    0x8(%rax),%rbx
  0x00007f75704801d6: je     0x00007f75704801e1
  0x00007f75704801dc: jmpq   0x00007f757046ec40
  0x00007f75704801e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704801e9: je     0x00007f75704802e4
  0x00007f75704801ef: jmpq   0x00007f757046ec40
  0x00007f75704801f4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704801fc: je     0x00007f75704802e4
  0x00007f7570480202: mov    %rsp,%r13
  0x00007f7570480205: mov    (%rsp),%rax
  0x00007f7570480209: and    $0xfffffffffffffff0,%rsp
  0x00007f757048020d: pushfq 
  0x00007f757048020e: sub    $0x8,%rsp
  0x00007f7570480212: mov    %rsp,-0x28(%rsp)
  0x00007f7570480217: sub    $0x80,%rsp
  0x00007f757048021e: mov    %rax,0x78(%rsp)
  0x00007f7570480223: mov    %rcx,0x70(%rsp)
  0x00007f7570480228: mov    %rdx,0x68(%rsp)
  0x00007f757048022d: mov    %rbx,0x60(%rsp)
  0x00007f7570480232: mov    %rbp,0x50(%rsp)
  0x00007f7570480237: mov    %rsi,0x48(%rsp)
  0x00007f757048023c: mov    %rdi,0x40(%rsp)
  0x00007f7570480241: mov    %r8,0x38(%rsp)
  0x00007f7570480246: mov    %r9,0x30(%rsp)
  0x00007f757048024b: mov    %r10,0x28(%rsp)
  0x00007f7570480250: mov    %r11,0x20(%rsp)
  0x00007f7570480255: mov    %r12,0x18(%rsp)
  0x00007f757048025a: mov    %r13,0x10(%rsp)
  0x00007f757048025f: mov    %r14,0x8(%rsp)
  0x00007f7570480264: mov    %r15,(%rsp)
  0x00007f7570480268: sub    $0x200,%rsp
  0x00007f757048026f: fxsave64 (%rsp)
  0x00007f7570480274: mov    %rbx,%rdi
  0x00007f7570480277: mov    %rax,%rsi
  0x00007f757048027a: callq  0x00007f7585522bca
  0x00007f757048027f: fxrstor64 (%rsp)
  0x00007f7570480284: add    $0x200,%rsp
  0x00007f757048028b: mov    (%rsp),%r15
  0x00007f757048028f: mov    0x8(%rsp),%r14
  0x00007f7570480294: mov    0x10(%rsp),%r13
  0x00007f7570480299: mov    0x18(%rsp),%r12
  0x00007f757048029e: mov    0x20(%rsp),%r11
  0x00007f75704802a3: mov    0x28(%rsp),%r10
  0x00007f75704802a8: mov    0x30(%rsp),%r9
  0x00007f75704802ad: mov    0x38(%rsp),%r8
  0x00007f75704802b2: mov    0x40(%rsp),%rdi
  0x00007f75704802b7: mov    0x48(%rsp),%rsi
  0x00007f75704802bc: mov    0x50(%rsp),%rbp
  0x00007f75704802c1: mov    0x60(%rsp),%rbx
  0x00007f75704802c6: mov    0x68(%rsp),%rdx
  0x00007f75704802cb: mov    0x70(%rsp),%rcx
  0x00007f75704802d0: mov    0x78(%rsp),%rax
  0x00007f75704802d5: add    $0x80,%rsp
  0x00007f75704802dc: add    $0x8,%rsp
  0x00007f75704802e0: popfq  
  0x00007f75704802e1: mov    %r13,%rsp
  0x00007f75704802e4: pop    %rax
  0x00007f75704802e5: mov    %rsp,%r13
  0x00007f75704802e8: sub    $0x10,%rsp
  0x00007f75704802ec: mov    %rax,(%rsp)
  0x00007f75704802f0: mov    %rsi,0x8(%rsp)
  0x00007f75704802f5: mov    0x40(%rbx),%rcx
  0x00007f75704802f9: jmpq   *%rcx

AHE@0x00007f75800c23c0: 0xa0000000 i2c: 0x00007f75704803a0 c2i: 0x00007f75704804b3 c2iUV: 0x00007f7570480486
i2c argument handler #0 for: static (Z)Z (537 bytes generated)
c2i argument handler starts at 0x7f75704804b3
  0x00007f75704803a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704803a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704803ae: cmp    %r11,%rax
  0x00007f75704803b1: jbe    0x00007f75704803ca
  0x00007f75704803b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704803c1: cmp    %r11,%rax
  0x00007f75704803c4: jb     0x00007f7570480467
  0x00007f75704803ca: movabs $0x7f7570369420,%r11
  0x00007f75704803d4: cmp    %r11,%rax
  0x00007f75704803d7: jbe    0x00007f75704803f0
  0x00007f75704803dd: movabs $0x7f757036de58,%r11
  0x00007f75704803e7: cmp    %r11,%rax
  0x00007f75704803ea: jb     0x00007f7570480467
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704803f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704803f5: sub    $0x80,%rsp
  0x00007f75704803fc: mov    %rax,0x78(%rsp)
  0x00007f7570480401: mov    %rcx,0x70(%rsp)
  0x00007f7570480406: mov    %rdx,0x68(%rsp)
  0x00007f757048040b: mov    %rbx,0x60(%rsp)
  0x00007f7570480410: mov    %rbp,0x50(%rsp)
  0x00007f7570480415: mov    %rsi,0x48(%rsp)
  0x00007f757048041a: mov    %rdi,0x40(%rsp)
  0x00007f757048041f: mov    %r8,0x38(%rsp)
  0x00007f7570480424: mov    %r9,0x30(%rsp)
  0x00007f7570480429: mov    %r10,0x28(%rsp)
  0x00007f757048042e: mov    %r11,0x20(%rsp)
  0x00007f7570480433: mov    %r12,0x18(%rsp)
  0x00007f7570480438: mov    %r13,0x10(%rsp)
  0x00007f757048043d: mov    %r14,0x8(%rsp)
  0x00007f7570480442: mov    %r15,(%rsp)
  0x00007f7570480446: movabs $0x7f758592f470,%rdi
  0x00007f7570480450: movabs $0x7f75704803f0,%rsi
  0x00007f757048045a: mov    %rsp,%rdx
  0x00007f757048045d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480461: callq  0x00007f75853729fa
  0x00007f7570480466: hlt    
  ;; } verify_i2ce 
  0x00007f7570480467: mov    %rsp,%r11
  0x00007f757048046a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048046e: push   %rax
  0x00007f757048046f: mov    %r11,%rax
  0x00007f7570480472: mov    0x50(%rbx),%r11
  0x00007f7570480476: mov    0x8(%rax),%esi
  0x00007f7570480479: mov    %rbx,0x258(%r15)
  0x00007f7570480480: mov    %rbx,%rax
  0x00007f7570480483: jmpq   *%r11
  0x00007f7570480486: mov    0x8(%rsi),%ebx
  0x00007f7570480489: shl    $0x3,%rbx
  0x00007f757048048d: cmp    0x10(%rax),%rbx
  0x00007f7570480491: mov    0x8(%rax),%rbx
  0x00007f7570480495: je     0x00007f75704804a0
  0x00007f757048049b: jmpq   0x00007f757046ec40
  0x00007f75704804a0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704804a8: je     0x00007f75704805a3
  0x00007f75704804ae: jmpq   0x00007f757046ec40
  0x00007f75704804b3: cmpq   $0x0,0x58(%rbx)
  0x00007f75704804bb: je     0x00007f75704805a3
  0x00007f75704804c1: mov    %rsp,%r13
  0x00007f75704804c4: mov    (%rsp),%rax
  0x00007f75704804c8: and    $0xfffffffffffffff0,%rsp
  0x00007f75704804cc: pushfq 
  0x00007f75704804cd: sub    $0x8,%rsp
  0x00007f75704804d1: mov    %rsp,-0x28(%rsp)
  0x00007f75704804d6: sub    $0x80,%rsp
  0x00007f75704804dd: mov    %rax,0x78(%rsp)
  0x00007f75704804e2: mov    %rcx,0x70(%rsp)
  0x00007f75704804e7: mov    %rdx,0x68(%rsp)
  0x00007f75704804ec: mov    %rbx,0x60(%rsp)
  0x00007f75704804f1: mov    %rbp,0x50(%rsp)
  0x00007f75704804f6: mov    %rsi,0x48(%rsp)
  0x00007f75704804fb: mov    %rdi,0x40(%rsp)
  0x00007f7570480500: mov    %r8,0x38(%rsp)
  0x00007f7570480505: mov    %r9,0x30(%rsp)
  0x00007f757048050a: mov    %r10,0x28(%rsp)
  0x00007f757048050f: mov    %r11,0x20(%rsp)
  0x00007f7570480514: mov    %r12,0x18(%rsp)
  0x00007f7570480519: mov    %r13,0x10(%rsp)
  0x00007f757048051e: mov    %r14,0x8(%rsp)
  0x00007f7570480523: mov    %r15,(%rsp)
  0x00007f7570480527: sub    $0x200,%rsp
  0x00007f757048052e: fxsave64 (%rsp)
  0x00007f7570480533: mov    %rbx,%rdi
  0x00007f7570480536: mov    %rax,%rsi
  0x00007f7570480539: callq  0x00007f7585522bca
  0x00007f757048053e: fxrstor64 (%rsp)
  0x00007f7570480543: add    $0x200,%rsp
  0x00007f757048054a: mov    (%rsp),%r15
  0x00007f757048054e: mov    0x8(%rsp),%r14
  0x00007f7570480553: mov    0x10(%rsp),%r13
  0x00007f7570480558: mov    0x18(%rsp),%r12
  0x00007f757048055d: mov    0x20(%rsp),%r11
  0x00007f7570480562: mov    0x28(%rsp),%r10
  0x00007f7570480567: mov    0x30(%rsp),%r9
  0x00007f757048056c: mov    0x38(%rsp),%r8
  0x00007f7570480571: mov    0x40(%rsp),%rdi
  0x00007f7570480576: mov    0x48(%rsp),%rsi
  0x00007f757048057b: mov    0x50(%rsp),%rbp
  0x00007f7570480580: mov    0x60(%rsp),%rbx
  0x00007f7570480585: mov    0x68(%rsp),%rdx
  0x00007f757048058a: mov    0x70(%rsp),%rcx
  0x00007f757048058f: mov    0x78(%rsp),%rax
  0x00007f7570480594: add    $0x80,%rsp
  0x00007f757048059b: add    $0x8,%rsp
  0x00007f757048059f: popfq  
  0x00007f75704805a0: mov    %r13,%rsp
  0x00007f75704805a3: pop    %rax
  0x00007f75704805a4: mov    %rsp,%r13
  0x00007f75704805a7: sub    $0x10,%rsp
  0x00007f75704805ab: mov    %rax,(%rsp)
  0x00007f75704805af: mov    %esi,0x8(%rsp)
  0x00007f75704805b3: mov    0x40(%rbx),%rcx
  0x00007f75704805b7: jmpq   *%rcx

AHE@0x00007f75800c2408: 0xb0000000 i2c: 0x00007f7570480660 c2i: 0x00007f7570480774 c2iUV: 0x00007f7570480747
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f7570480774
  0x00007f7570480660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570480664: movabs $0x7f757036e3e0,%r11
  0x00007f757048066e: cmp    %r11,%rax
  0x00007f7570480671: jbe    0x00007f757048068a
  0x00007f7570480677: movabs $0x7f757046e3e0,%r11
  0x00007f7570480681: cmp    %r11,%rax
  0x00007f7570480684: jb     0x00007f7570480727
  0x00007f757048068a: movabs $0x7f7570369420,%r11
  0x00007f7570480694: cmp    %r11,%rax
  0x00007f7570480697: jbe    0x00007f75704806b0
  0x00007f757048069d: movabs $0x7f757036de58,%r11
  0x00007f75704806a7: cmp    %r11,%rax
  0x00007f75704806aa: jb     0x00007f7570480727
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704806b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704806b5: sub    $0x80,%rsp
  0x00007f75704806bc: mov    %rax,0x78(%rsp)
  0x00007f75704806c1: mov    %rcx,0x70(%rsp)
  0x00007f75704806c6: mov    %rdx,0x68(%rsp)
  0x00007f75704806cb: mov    %rbx,0x60(%rsp)
  0x00007f75704806d0: mov    %rbp,0x50(%rsp)
  0x00007f75704806d5: mov    %rsi,0x48(%rsp)
  0x00007f75704806da: mov    %rdi,0x40(%rsp)
  0x00007f75704806df: mov    %r8,0x38(%rsp)
  0x00007f75704806e4: mov    %r9,0x30(%rsp)
  0x00007f75704806e9: mov    %r10,0x28(%rsp)
  0x00007f75704806ee: mov    %r11,0x20(%rsp)
  0x00007f75704806f3: mov    %r12,0x18(%rsp)
  0x00007f75704806f8: mov    %r13,0x10(%rsp)
  0x00007f75704806fd: mov    %r14,0x8(%rsp)
  0x00007f7570480702: mov    %r15,(%rsp)
  0x00007f7570480706: movabs $0x7f758592f470,%rdi
  0x00007f7570480710: movabs $0x7f75704806b0,%rsi
  0x00007f757048071a: mov    %rsp,%rdx
  0x00007f757048071d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480721: callq  0x00007f75853729fa
  0x00007f7570480726: hlt    
  ;; } verify_i2ce 
  0x00007f7570480727: mov    %rsp,%r11
  0x00007f757048072a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048072e: push   %rax
  0x00007f757048072f: mov    %r11,%rax
  0x00007f7570480732: mov    0x50(%rbx),%r11
  0x00007f7570480736: mov    0x8(%rax),%rsi
  0x00007f757048073a: mov    %rbx,0x258(%r15)
  0x00007f7570480741: mov    %rbx,%rax
  0x00007f7570480744: jmpq   *%r11
  0x00007f7570480747: mov    0x8(%rsi),%ebx
  0x00007f757048074a: shl    $0x3,%rbx
  0x00007f757048074e: cmp    0x10(%rax),%rbx
  0x00007f7570480752: mov    0x8(%rax),%rbx
  0x00007f7570480756: je     0x00007f7570480761
  0x00007f757048075c: jmpq   0x00007f757046ec40
  0x00007f7570480761: cmpq   $0x0,0x58(%rbx)
  0x00007f7570480769: je     0x00007f7570480864
  0x00007f757048076f: jmpq   0x00007f757046ec40
  0x00007f7570480774: cmpq   $0x0,0x58(%rbx)
  0x00007f757048077c: je     0x00007f7570480864
  0x00007f7570480782: mov    %rsp,%r13
  0x00007f7570480785: mov    (%rsp),%rax
  0x00007f7570480789: and    $0xfffffffffffffff0,%rsp
  0x00007f757048078d: pushfq 
  0x00007f757048078e: sub    $0x8,%rsp
  0x00007f7570480792: mov    %rsp,-0x28(%rsp)
  0x00007f7570480797: sub    $0x80,%rsp
  0x00007f757048079e: mov    %rax,0x78(%rsp)
  0x00007f75704807a3: mov    %rcx,0x70(%rsp)
  0x00007f75704807a8: mov    %rdx,0x68(%rsp)
  0x00007f75704807ad: mov    %rbx,0x60(%rsp)
  0x00007f75704807b2: mov    %rbp,0x50(%rsp)
  0x00007f75704807b7: mov    %rsi,0x48(%rsp)
  0x00007f75704807bc: mov    %rdi,0x40(%rsp)
  0x00007f75704807c1: mov    %r8,0x38(%rsp)
  0x00007f75704807c6: mov    %r9,0x30(%rsp)
  0x00007f75704807cb: mov    %r10,0x28(%rsp)
  0x00007f75704807d0: mov    %r11,0x20(%rsp)
  0x00007f75704807d5: mov    %r12,0x18(%rsp)
  0x00007f75704807da: mov    %r13,0x10(%rsp)
  0x00007f75704807df: mov    %r14,0x8(%rsp)
  0x00007f75704807e4: mov    %r15,(%rsp)
  0x00007f75704807e8: sub    $0x200,%rsp
  0x00007f75704807ef: fxsave64 (%rsp)
  0x00007f75704807f4: mov    %rbx,%rdi
  0x00007f75704807f7: mov    %rax,%rsi
  0x00007f75704807fa: callq  0x00007f7585522bca
  0x00007f75704807ff: fxrstor64 (%rsp)
  0x00007f7570480804: add    $0x200,%rsp
  0x00007f757048080b: mov    (%rsp),%r15
  0x00007f757048080f: mov    0x8(%rsp),%r14
  0x00007f7570480814: mov    0x10(%rsp),%r13
  0x00007f7570480819: mov    0x18(%rsp),%r12
  0x00007f757048081e: mov    0x20(%rsp),%r11
  0x00007f7570480823: mov    0x28(%rsp),%r10
  0x00007f7570480828: mov    0x30(%rsp),%r9
  0x00007f757048082d: mov    0x38(%rsp),%r8
  0x00007f7570480832: mov    0x40(%rsp),%rdi
  0x00007f7570480837: mov    0x48(%rsp),%rsi
  0x00007f757048083c: mov    0x50(%rsp),%rbp
  0x00007f7570480841: mov    0x60(%rsp),%rbx
  0x00007f7570480846: mov    0x68(%rsp),%rdx
  0x00007f757048084b: mov    0x70(%rsp),%rcx
  0x00007f7570480850: mov    0x78(%rsp),%rax
  0x00007f7570480855: add    $0x80,%rsp
  0x00007f757048085c: add    $0x8,%rsp
  0x00007f7570480860: popfq  
  0x00007f7570480861: mov    %r13,%rsp
  0x00007f7570480864: pop    %rax
  0x00007f7570480865: mov    %rsp,%r13
  0x00007f7570480868: sub    $0x10,%rsp
  0x00007f757048086c: mov    %rax,(%rsp)
  0x00007f7570480870: mov    %rsi,0x8(%rsp)
  0x00007f7570480875: mov    0x40(%rbx),%rcx
  0x00007f7570480879: jmpq   *%rcx

AHE@0x00007f75800c2450: 0xb0000000 i2c: 0x00007f7570480920 c2i: 0x00007f7570480a34 c2iUV: 0x00007f7570480a07
i2c argument handler #0 for: receiver ()Ljava/lang/Object; (539 bytes generated)
c2i argument handler starts at 0x7f7570480a34
  0x00007f7570480920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570480924: movabs $0x7f757036e3e0,%r11
  0x00007f757048092e: cmp    %r11,%rax
  0x00007f7570480931: jbe    0x00007f757048094a
  0x00007f7570480937: movabs $0x7f757046e3e0,%r11
  0x00007f7570480941: cmp    %r11,%rax
  0x00007f7570480944: jb     0x00007f75704809e7
  0x00007f757048094a: movabs $0x7f7570369420,%r11
  0x00007f7570480954: cmp    %r11,%rax
  0x00007f7570480957: jbe    0x00007f7570480970
  0x00007f757048095d: movabs $0x7f757036de58,%r11
  0x00007f7570480967: cmp    %r11,%rax
  0x00007f757048096a: jb     0x00007f75704809e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570480970: mov    %rsp,-0x28(%rsp)
  0x00007f7570480975: sub    $0x80,%rsp
  0x00007f757048097c: mov    %rax,0x78(%rsp)
  0x00007f7570480981: mov    %rcx,0x70(%rsp)
  0x00007f7570480986: mov    %rdx,0x68(%rsp)
  0x00007f757048098b: mov    %rbx,0x60(%rsp)
  0x00007f7570480990: mov    %rbp,0x50(%rsp)
  0x00007f7570480995: mov    %rsi,0x48(%rsp)
  0x00007f757048099a: mov    %rdi,0x40(%rsp)
  0x00007f757048099f: mov    %r8,0x38(%rsp)
  0x00007f75704809a4: mov    %r9,0x30(%rsp)
  0x00007f75704809a9: mov    %r10,0x28(%rsp)
  0x00007f75704809ae: mov    %r11,0x20(%rsp)
  0x00007f75704809b3: mov    %r12,0x18(%rsp)
  0x00007f75704809b8: mov    %r13,0x10(%rsp)
  0x00007f75704809bd: mov    %r14,0x8(%rsp)
  0x00007f75704809c2: mov    %r15,(%rsp)
  0x00007f75704809c6: movabs $0x7f758592f470,%rdi
  0x00007f75704809d0: movabs $0x7f7570480970,%rsi
  0x00007f75704809da: mov    %rsp,%rdx
  0x00007f75704809dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704809e1: callq  0x00007f75853729fa
  0x00007f75704809e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704809e7: mov    %rsp,%r11
  0x00007f75704809ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704809ee: push   %rax
  0x00007f75704809ef: mov    %r11,%rax
  0x00007f75704809f2: mov    0x50(%rbx),%r11
  0x00007f75704809f6: mov    0x8(%rax),%rsi
  0x00007f75704809fa: mov    %rbx,0x258(%r15)
  0x00007f7570480a01: mov    %rbx,%rax
  0x00007f7570480a04: jmpq   *%r11
  0x00007f7570480a07: mov    0x8(%rsi),%ebx
  0x00007f7570480a0a: shl    $0x3,%rbx
  0x00007f7570480a0e: cmp    0x10(%rax),%rbx
  0x00007f7570480a12: mov    0x8(%rax),%rbx
  0x00007f7570480a16: je     0x00007f7570480a21
  0x00007f7570480a1c: jmpq   0x00007f757046ec40
  0x00007f7570480a21: cmpq   $0x0,0x58(%rbx)
  0x00007f7570480a29: je     0x00007f7570480b24
  0x00007f7570480a2f: jmpq   0x00007f757046ec40
  0x00007f7570480a34: cmpq   $0x0,0x58(%rbx)
  0x00007f7570480a3c: je     0x00007f7570480b24
  0x00007f7570480a42: mov    %rsp,%r13
  0x00007f7570480a45: mov    (%rsp),%rax
  0x00007f7570480a49: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480a4d: pushfq 
  0x00007f7570480a4e: sub    $0x8,%rsp
  0x00007f7570480a52: mov    %rsp,-0x28(%rsp)
  0x00007f7570480a57: sub    $0x80,%rsp
  0x00007f7570480a5e: mov    %rax,0x78(%rsp)
  0x00007f7570480a63: mov    %rcx,0x70(%rsp)
  0x00007f7570480a68: mov    %rdx,0x68(%rsp)
  0x00007f7570480a6d: mov    %rbx,0x60(%rsp)
  0x00007f7570480a72: mov    %rbp,0x50(%rsp)
  0x00007f7570480a77: mov    %rsi,0x48(%rsp)
  0x00007f7570480a7c: mov    %rdi,0x40(%rsp)
  0x00007f7570480a81: mov    %r8,0x38(%rsp)
  0x00007f7570480a86: mov    %r9,0x30(%rsp)
  0x00007f7570480a8b: mov    %r10,0x28(%rsp)
  0x00007f7570480a90: mov    %r11,0x20(%rsp)
  0x00007f7570480a95: mov    %r12,0x18(%rsp)
  0x00007f7570480a9a: mov    %r13,0x10(%rsp)
  0x00007f7570480a9f: mov    %r14,0x8(%rsp)
  0x00007f7570480aa4: mov    %r15,(%rsp)
  0x00007f7570480aa8: sub    $0x200,%rsp
  0x00007f7570480aaf: fxsave64 (%rsp)
  0x00007f7570480ab4: mov    %rbx,%rdi
  0x00007f7570480ab7: mov    %rax,%rsi
  0x00007f7570480aba: callq  0x00007f7585522bca
  0x00007f7570480abf: fxrstor64 (%rsp)
  0x00007f7570480ac4: add    $0x200,%rsp
  0x00007f7570480acb: mov    (%rsp),%r15
  0x00007f7570480acf: mov    0x8(%rsp),%r14
  0x00007f7570480ad4: mov    0x10(%rsp),%r13
  0x00007f7570480ad9: mov    0x18(%rsp),%r12
  0x00007f7570480ade: mov    0x20(%rsp),%r11
  0x00007f7570480ae3: mov    0x28(%rsp),%r10
  0x00007f7570480ae8: mov    0x30(%rsp),%r9
  0x00007f7570480aed: mov    0x38(%rsp),%r8
  0x00007f7570480af2: mov    0x40(%rsp),%rdi
  0x00007f7570480af7: mov    0x48(%rsp),%rsi
  0x00007f7570480afc: mov    0x50(%rsp),%rbp
  0x00007f7570480b01: mov    0x60(%rsp),%rbx
  0x00007f7570480b06: mov    0x68(%rsp),%rdx
  0x00007f7570480b0b: mov    0x70(%rsp),%rcx
  0x00007f7570480b10: mov    0x78(%rsp),%rax
  0x00007f7570480b15: add    $0x80,%rsp
  0x00007f7570480b1c: add    $0x8,%rsp
  0x00007f7570480b20: popfq  
  0x00007f7570480b21: mov    %r13,%rsp
  0x00007f7570480b24: pop    %rax
  0x00007f7570480b25: mov    %rsp,%r13
  0x00007f7570480b28: sub    $0x10,%rsp
  0x00007f7570480b2c: mov    %rax,(%rsp)
  0x00007f7570480b30: mov    %rsi,0x8(%rsp)
  0x00007f7570480b35: mov    0x40(%rbx),%rcx
  0x00007f7570480b39: jmpq   *%rcx

AHE@0x00007f75800c2498: 0x i2c: 0x00007f7570480be0 c2i: 0x00007f7570480cf0 c2iUV: 0x00007f7570480cc3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570480cf0
  0x00007f7570480be0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570480be4: movabs $0x7f757036e3e0,%r11
  0x00007f7570480bee: cmp    %r11,%rax
  0x00007f7570480bf1: jbe    0x00007f7570480c0a
  0x00007f7570480bf7: movabs $0x7f757046e3e0,%r11
  0x00007f7570480c01: cmp    %r11,%rax
  0x00007f7570480c04: jb     0x00007f7570480ca7
  0x00007f7570480c0a: movabs $0x7f7570369420,%r11
  0x00007f7570480c14: cmp    %r11,%rax
  0x00007f7570480c17: jbe    0x00007f7570480c30
  0x00007f7570480c1d: movabs $0x7f757036de58,%r11
  0x00007f7570480c27: cmp    %r11,%rax
  0x00007f7570480c2a: jb     0x00007f7570480ca7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570480c30: mov    %rsp,-0x28(%rsp)
  0x00007f7570480c35: sub    $0x80,%rsp
  0x00007f7570480c3c: mov    %rax,0x78(%rsp)
  0x00007f7570480c41: mov    %rcx,0x70(%rsp)
  0x00007f7570480c46: mov    %rdx,0x68(%rsp)
  0x00007f7570480c4b: mov    %rbx,0x60(%rsp)
  0x00007f7570480c50: mov    %rbp,0x50(%rsp)
  0x00007f7570480c55: mov    %rsi,0x48(%rsp)
  0x00007f7570480c5a: mov    %rdi,0x40(%rsp)
  0x00007f7570480c5f: mov    %r8,0x38(%rsp)
  0x00007f7570480c64: mov    %r9,0x30(%rsp)
  0x00007f7570480c69: mov    %r10,0x28(%rsp)
  0x00007f7570480c6e: mov    %r11,0x20(%rsp)
  0x00007f7570480c73: mov    %r12,0x18(%rsp)
  0x00007f7570480c78: mov    %r13,0x10(%rsp)
  0x00007f7570480c7d: mov    %r14,0x8(%rsp)
  0x00007f7570480c82: mov    %r15,(%rsp)
  0x00007f7570480c86: movabs $0x7f758592f470,%rdi
  0x00007f7570480c90: movabs $0x7f7570480c30,%rsi
  0x00007f7570480c9a: mov    %rsp,%rdx
  0x00007f7570480c9d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480ca1: callq  0x00007f75853729fa
  0x00007f7570480ca6: hlt    
  ;; } verify_i2ce 
  0x00007f7570480ca7: mov    %rsp,%r11
  0x00007f7570480caa: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480cae: push   %rax
  0x00007f7570480caf: mov    %r11,%rax
  0x00007f7570480cb2: mov    0x50(%rbx),%r11
  0x00007f7570480cb6: mov    %rbx,0x258(%r15)
  0x00007f7570480cbd: mov    %rbx,%rax
  0x00007f7570480cc0: jmpq   *%r11
  0x00007f7570480cc3: mov    0x8(%rsi),%ebx
  0x00007f7570480cc6: shl    $0x3,%rbx
  0x00007f7570480cca: cmp    0x10(%rax),%rbx
  0x00007f7570480cce: mov    0x8(%rax),%rbx
  0x00007f7570480cd2: je     0x00007f7570480cdd
  0x00007f7570480cd8: jmpq   0x00007f757046ec40
  0x00007f7570480cdd: cmpq   $0x0,0x58(%rbx)
  0x00007f7570480ce5: je     0x00007f7570480de0
  0x00007f7570480ceb: jmpq   0x00007f757046ec40
  0x00007f7570480cf0: cmpq   $0x0,0x58(%rbx)
  0x00007f7570480cf8: je     0x00007f7570480de0
  0x00007f7570480cfe: mov    %rsp,%r13
  0x00007f7570480d01: mov    (%rsp),%rax
  0x00007f7570480d05: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480d09: pushfq 
  0x00007f7570480d0a: sub    $0x8,%rsp
  0x00007f7570480d0e: mov    %rsp,-0x28(%rsp)
  0x00007f7570480d13: sub    $0x80,%rsp
  0x00007f7570480d1a: mov    %rax,0x78(%rsp)
  0x00007f7570480d1f: mov    %rcx,0x70(%rsp)
  0x00007f7570480d24: mov    %rdx,0x68(%rsp)
  0x00007f7570480d29: mov    %rbx,0x60(%rsp)
  0x00007f7570480d2e: mov    %rbp,0x50(%rsp)
  0x00007f7570480d33: mov    %rsi,0x48(%rsp)
  0x00007f7570480d38: mov    %rdi,0x40(%rsp)
  0x00007f7570480d3d: mov    %r8,0x38(%rsp)
  0x00007f7570480d42: mov    %r9,0x30(%rsp)
  0x00007f7570480d47: mov    %r10,0x28(%rsp)
  0x00007f7570480d4c: mov    %r11,0x20(%rsp)
  0x00007f7570480d51: mov    %r12,0x18(%rsp)
  0x00007f7570480d56: mov    %r13,0x10(%rsp)
  0x00007f7570480d5b: mov    %r14,0x8(%rsp)
  0x00007f7570480d60: mov    %r15,(%rsp)
  0x00007f7570480d64: sub    $0x200,%rsp
  0x00007f7570480d6b: fxsave64 (%rsp)
  0x00007f7570480d70: mov    %rbx,%rdi
  0x00007f7570480d73: mov    %rax,%rsi
  0x00007f7570480d76: callq  0x00007f7585522bca
  0x00007f7570480d7b: fxrstor64 (%rsp)
  0x00007f7570480d80: add    $0x200,%rsp
  0x00007f7570480d87: mov    (%rsp),%r15
  0x00007f7570480d8b: mov    0x8(%rsp),%r14
  0x00007f7570480d90: mov    0x10(%rsp),%r13
  0x00007f7570480d95: mov    0x18(%rsp),%r12
  0x00007f7570480d9a: mov    0x20(%rsp),%r11
  0x00007f7570480d9f: mov    0x28(%rsp),%r10
  0x00007f7570480da4: mov    0x30(%rsp),%r9
  0x00007f7570480da9: mov    0x38(%rsp),%r8
  0x00007f7570480dae: mov    0x40(%rsp),%rdi
  0x00007f7570480db3: mov    0x48(%rsp),%rsi
  0x00007f7570480db8: mov    0x50(%rsp),%rbp
  0x00007f7570480dbd: mov    0x60(%rsp),%rbx
  0x00007f7570480dc2: mov    0x68(%rsp),%rdx
  0x00007f7570480dc7: mov    0x70(%rsp),%rcx
  0x00007f7570480dcc: mov    0x78(%rsp),%rax
  0x00007f7570480dd1: add    $0x80,%rsp
  0x00007f7570480dd8: add    $0x8,%rsp
  0x00007f7570480ddc: popfq  
  0x00007f7570480ddd: mov    %r13,%rsp
  0x00007f7570480de0: pop    %rax
  0x00007f7570480de1: mov    %rsp,%r13
  0x00007f7570480de4: sub    $0x10,%rsp
  0x00007f7570480de8: mov    %rax,(%rsp)
  0x00007f7570480dec: mov    0x40(%rbx),%rcx
  0x00007f7570480df0: jmpq   *%rcx

AHE@0x00007f75800c24e0: 0xbbb00000 i2c: 0x00007f7570480ea0 c2i: 0x00007f7570480fbc c2iUV: 0x00007f7570480f8f
i2c argument handler #0 for: receiver (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V (557 bytes generated)
c2i argument handler starts at 0x7f7570480fbc
  0x00007f7570480ea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570480ea4: movabs $0x7f757036e3e0,%r11
  0x00007f7570480eae: cmp    %r11,%rax
  0x00007f7570480eb1: jbe    0x00007f7570480eca
  0x00007f7570480eb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570480ec1: cmp    %r11,%rax
  0x00007f7570480ec4: jb     0x00007f7570480f67
  0x00007f7570480eca: movabs $0x7f7570369420,%r11
  0x00007f7570480ed4: cmp    %r11,%rax
  0x00007f7570480ed7: jbe    0x00007f7570480ef0
  0x00007f7570480edd: movabs $0x7f757036de58,%r11
  0x00007f7570480ee7: cmp    %r11,%rax
  0x00007f7570480eea: jb     0x00007f7570480f67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570480ef0: mov    %rsp,-0x28(%rsp)
  0x00007f7570480ef5: sub    $0x80,%rsp
  0x00007f7570480efc: mov    %rax,0x78(%rsp)
  0x00007f7570480f01: mov    %rcx,0x70(%rsp)
  0x00007f7570480f06: mov    %rdx,0x68(%rsp)
  0x00007f7570480f0b: mov    %rbx,0x60(%rsp)
  0x00007f7570480f10: mov    %rbp,0x50(%rsp)
  0x00007f7570480f15: mov    %rsi,0x48(%rsp)
  0x00007f7570480f1a: mov    %rdi,0x40(%rsp)
  0x00007f7570480f1f: mov    %r8,0x38(%rsp)
  0x00007f7570480f24: mov    %r9,0x30(%rsp)
  0x00007f7570480f29: mov    %r10,0x28(%rsp)
  0x00007f7570480f2e: mov    %r11,0x20(%rsp)
  0x00007f7570480f33: mov    %r12,0x18(%rsp)
  0x00007f7570480f38: mov    %r13,0x10(%rsp)
  0x00007f7570480f3d: mov    %r14,0x8(%rsp)
  0x00007f7570480f42: mov    %r15,(%rsp)
  0x00007f7570480f46: movabs $0x7f758592f470,%rdi
  0x00007f7570480f50: movabs $0x7f7570480ef0,%rsi
  0x00007f7570480f5a: mov    %rsp,%rdx
  0x00007f7570480f5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480f61: callq  0x00007f75853729fa
  0x00007f7570480f66: hlt    
  ;; } verify_i2ce 
  0x00007f7570480f67: mov    %rsp,%r11
  0x00007f7570480f6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480f6e: push   %rax
  0x00007f7570480f6f: mov    %r11,%rax
  0x00007f7570480f72: mov    0x50(%rbx),%r11
  0x00007f7570480f76: mov    0x18(%rax),%rsi
  0x00007f7570480f7a: mov    0x10(%rax),%rdx
  0x00007f7570480f7e: mov    0x8(%rax),%rcx
  0x00007f7570480f82: mov    %rbx,0x258(%r15)
  0x00007f7570480f89: mov    %rbx,%rax
  0x00007f7570480f8c: jmpq   *%r11
  0x00007f7570480f8f: mov    0x8(%rsi),%ebx
  0x00007f7570480f92: shl    $0x3,%rbx
  0x00007f7570480f96: cmp    0x10(%rax),%rbx
  0x00007f7570480f9a: mov    0x8(%rax),%rbx
  0x00007f7570480f9e: je     0x00007f7570480fa9
  0x00007f7570480fa4: jmpq   0x00007f757046ec40
  0x00007f7570480fa9: cmpq   $0x0,0x58(%rbx)
  0x00007f7570480fb1: je     0x00007f75704810ac
  0x00007f7570480fb7: jmpq   0x00007f757046ec40
  0x00007f7570480fbc: cmpq   $0x0,0x58(%rbx)
  0x00007f7570480fc4: je     0x00007f75704810ac
  0x00007f7570480fca: mov    %rsp,%r13
  0x00007f7570480fcd: mov    (%rsp),%rax
  0x00007f7570480fd1: and    $0xfffffffffffffff0,%rsp
  0x00007f7570480fd5: pushfq 
  0x00007f7570480fd6: sub    $0x8,%rsp
  0x00007f7570480fda: mov    %rsp,-0x28(%rsp)
  0x00007f7570480fdf: sub    $0x80,%rsp
  0x00007f7570480fe6: mov    %rax,0x78(%rsp)
  0x00007f7570480feb: mov    %rcx,0x70(%rsp)
  0x00007f7570480ff0: mov    %rdx,0x68(%rsp)
  0x00007f7570480ff5: mov    %rbx,0x60(%rsp)
  0x00007f7570480ffa: mov    %rbp,0x50(%rsp)
  0x00007f7570480fff: mov    %rsi,0x48(%rsp)
  0x00007f7570481004: mov    %rdi,0x40(%rsp)
  0x00007f7570481009: mov    %r8,0x38(%rsp)
  0x00007f757048100e: mov    %r9,0x30(%rsp)
  0x00007f7570481013: mov    %r10,0x28(%rsp)
  0x00007f7570481018: mov    %r11,0x20(%rsp)
  0x00007f757048101d: mov    %r12,0x18(%rsp)
  0x00007f7570481022: mov    %r13,0x10(%rsp)
  0x00007f7570481027: mov    %r14,0x8(%rsp)
  0x00007f757048102c: mov    %r15,(%rsp)
  0x00007f7570481030: sub    $0x200,%rsp
  0x00007f7570481037: fxsave64 (%rsp)
  0x00007f757048103c: mov    %rbx,%rdi
  0x00007f757048103f: mov    %rax,%rsi
  0x00007f7570481042: callq  0x00007f7585522bca
  0x00007f7570481047: fxrstor64 (%rsp)
  0x00007f757048104c: add    $0x200,%rsp
  0x00007f7570481053: mov    (%rsp),%r15
  0x00007f7570481057: mov    0x8(%rsp),%r14
  0x00007f757048105c: mov    0x10(%rsp),%r13
  0x00007f7570481061: mov    0x18(%rsp),%r12
  0x00007f7570481066: mov    0x20(%rsp),%r11
  0x00007f757048106b: mov    0x28(%rsp),%r10
  0x00007f7570481070: mov    0x30(%rsp),%r9
  0x00007f7570481075: mov    0x38(%rsp),%r8
  0x00007f757048107a: mov    0x40(%rsp),%rdi
  0x00007f757048107f: mov    0x48(%rsp),%rsi
  0x00007f7570481084: mov    0x50(%rsp),%rbp
  0x00007f7570481089: mov    0x60(%rsp),%rbx
  0x00007f757048108e: mov    0x68(%rsp),%rdx
  0x00007f7570481093: mov    0x70(%rsp),%rcx
  0x00007f7570481098: mov    0x78(%rsp),%rax
  0x00007f757048109d: add    $0x80,%rsp
  0x00007f75704810a4: add    $0x8,%rsp
  0x00007f75704810a8: popfq  
  0x00007f75704810a9: mov    %r13,%rsp
  0x00007f75704810ac: pop    %rax
  0x00007f75704810ad: mov    %rsp,%r13
  0x00007f75704810b0: sub    $0x20,%rsp
  0x00007f75704810b4: mov    %rax,(%rsp)
  0x00007f75704810b8: mov    %rsi,0x18(%rsp)
  0x00007f75704810bd: mov    %rdx,0x10(%rsp)
  0x00007f75704810c2: mov    %rcx,0x8(%rsp)
  0x00007f75704810c7: mov    0x40(%rbx),%rcx
  0x00007f75704810cb: jmpq   *%rcx

AHE@0x00007f75800c2528: 0xbb000000 i2c: 0x00007f75704811a0 c2i: 0x00007f75704812b8 c2iUV: 0x00007f757048128b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704812b8
  0x00007f75704811a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704811a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704811ae: cmp    %r11,%rax
  0x00007f75704811b1: jbe    0x00007f75704811ca
  0x00007f75704811b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704811c1: cmp    %r11,%rax
  0x00007f75704811c4: jb     0x00007f7570481267
  0x00007f75704811ca: movabs $0x7f7570369420,%r11
  0x00007f75704811d4: cmp    %r11,%rax
  0x00007f75704811d7: jbe    0x00007f75704811f0
  0x00007f75704811dd: movabs $0x7f757036de58,%r11
  0x00007f75704811e7: cmp    %r11,%rax
  0x00007f75704811ea: jb     0x00007f7570481267
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704811f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704811f5: sub    $0x80,%rsp
  0x00007f75704811fc: mov    %rax,0x78(%rsp)
  0x00007f7570481201: mov    %rcx,0x70(%rsp)
  0x00007f7570481206: mov    %rdx,0x68(%rsp)
  0x00007f757048120b: mov    %rbx,0x60(%rsp)
  0x00007f7570481210: mov    %rbp,0x50(%rsp)
  0x00007f7570481215: mov    %rsi,0x48(%rsp)
  0x00007f757048121a: mov    %rdi,0x40(%rsp)
  0x00007f757048121f: mov    %r8,0x38(%rsp)
  0x00007f7570481224: mov    %r9,0x30(%rsp)
  0x00007f7570481229: mov    %r10,0x28(%rsp)
  0x00007f757048122e: mov    %r11,0x20(%rsp)
  0x00007f7570481233: mov    %r12,0x18(%rsp)
  0x00007f7570481238: mov    %r13,0x10(%rsp)
  0x00007f757048123d: mov    %r14,0x8(%rsp)
  0x00007f7570481242: mov    %r15,(%rsp)
  0x00007f7570481246: movabs $0x7f758592f470,%rdi
  0x00007f7570481250: movabs $0x7f75704811f0,%rsi
  0x00007f757048125a: mov    %rsp,%rdx
  0x00007f757048125d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481261: callq  0x00007f75853729fa
  0x00007f7570481266: hlt    
  ;; } verify_i2ce 
  0x00007f7570481267: mov    %rsp,%r11
  0x00007f757048126a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048126e: push   %rax
  0x00007f757048126f: mov    %r11,%rax
  0x00007f7570481272: mov    0x50(%rbx),%r11
  0x00007f7570481276: mov    0x10(%rax),%rsi
  0x00007f757048127a: mov    0x8(%rax),%rdx
  0x00007f757048127e: mov    %rbx,0x258(%r15)
  0x00007f7570481285: mov    %rbx,%rax
  0x00007f7570481288: jmpq   *%r11
  0x00007f757048128b: mov    0x8(%rsi),%ebx
  0x00007f757048128e: shl    $0x3,%rbx
  0x00007f7570481292: cmp    0x10(%rax),%rbx
  0x00007f7570481296: mov    0x8(%rax),%rbx
  0x00007f757048129a: je     0x00007f75704812a5
  0x00007f75704812a0: jmpq   0x00007f757046ec40
  0x00007f75704812a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704812ad: je     0x00007f75704813a8
  0x00007f75704812b3: jmpq   0x00007f757046ec40
  0x00007f75704812b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704812c0: je     0x00007f75704813a8
  0x00007f75704812c6: mov    %rsp,%r13
  0x00007f75704812c9: mov    (%rsp),%rax
  0x00007f75704812cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704812d1: pushfq 
  0x00007f75704812d2: sub    $0x8,%rsp
  0x00007f75704812d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704812db: sub    $0x80,%rsp
  0x00007f75704812e2: mov    %rax,0x78(%rsp)
  0x00007f75704812e7: mov    %rcx,0x70(%rsp)
  0x00007f75704812ec: mov    %rdx,0x68(%rsp)
  0x00007f75704812f1: mov    %rbx,0x60(%rsp)
  0x00007f75704812f6: mov    %rbp,0x50(%rsp)
  0x00007f75704812fb: mov    %rsi,0x48(%rsp)
  0x00007f7570481300: mov    %rdi,0x40(%rsp)
  0x00007f7570481305: mov    %r8,0x38(%rsp)
  0x00007f757048130a: mov    %r9,0x30(%rsp)
  0x00007f757048130f: mov    %r10,0x28(%rsp)
  0x00007f7570481314: mov    %r11,0x20(%rsp)
  0x00007f7570481319: mov    %r12,0x18(%rsp)
  0x00007f757048131e: mov    %r13,0x10(%rsp)
  0x00007f7570481323: mov    %r14,0x8(%rsp)
  0x00007f7570481328: mov    %r15,(%rsp)
  0x00007f757048132c: sub    $0x200,%rsp
  0x00007f7570481333: fxsave64 (%rsp)
  0x00007f7570481338: mov    %rbx,%rdi
  0x00007f757048133b: mov    %rax,%rsi
  0x00007f757048133e: callq  0x00007f7585522bca
  0x00007f7570481343: fxrstor64 (%rsp)
  0x00007f7570481348: add    $0x200,%rsp
  0x00007f757048134f: mov    (%rsp),%r15
  0x00007f7570481353: mov    0x8(%rsp),%r14
  0x00007f7570481358: mov    0x10(%rsp),%r13
  0x00007f757048135d: mov    0x18(%rsp),%r12
  0x00007f7570481362: mov    0x20(%rsp),%r11
  0x00007f7570481367: mov    0x28(%rsp),%r10
  0x00007f757048136c: mov    0x30(%rsp),%r9
  0x00007f7570481371: mov    0x38(%rsp),%r8
  0x00007f7570481376: mov    0x40(%rsp),%rdi
  0x00007f757048137b: mov    0x48(%rsp),%rsi
  0x00007f7570481380: mov    0x50(%rsp),%rbp
  0x00007f7570481385: mov    0x60(%rsp),%rbx
  0x00007f757048138a: mov    0x68(%rsp),%rdx
  0x00007f757048138f: mov    0x70(%rsp),%rcx
  0x00007f7570481394: mov    0x78(%rsp),%rax
  0x00007f7570481399: add    $0x80,%rsp
  0x00007f75704813a0: add    $0x8,%rsp
  0x00007f75704813a4: popfq  
  0x00007f75704813a5: mov    %r13,%rsp
  0x00007f75704813a8: pop    %rax
  0x00007f75704813a9: mov    %rsp,%r13
  0x00007f75704813ac: sub    $0x20,%rsp
  0x00007f75704813b0: mov    %rax,(%rsp)
  0x00007f75704813b4: mov    %rsi,0x10(%rsp)
  0x00007f75704813b9: mov    %rdx,0x8(%rsp)
  0x00007f75704813be: mov    0x40(%rbx),%rcx
  0x00007f75704813c2: jmpq   *%rcx

AHE@0x00007f75800c2570: 0xbbb00000 i2c: 0x00007f75704814a0 c2i: 0x00007f75704815bc c2iUV: 0x00007f757048158f
i2c argument handler #0 for: receiver (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V (557 bytes generated)
c2i argument handler starts at 0x7f75704815bc
  0x00007f75704814a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704814a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704814ae: cmp    %r11,%rax
  0x00007f75704814b1: jbe    0x00007f75704814ca
  0x00007f75704814b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704814c1: cmp    %r11,%rax
  0x00007f75704814c4: jb     0x00007f7570481567
  0x00007f75704814ca: movabs $0x7f7570369420,%r11
  0x00007f75704814d4: cmp    %r11,%rax
  0x00007f75704814d7: jbe    0x00007f75704814f0
  0x00007f75704814dd: movabs $0x7f757036de58,%r11
  0x00007f75704814e7: cmp    %r11,%rax
  0x00007f75704814ea: jb     0x00007f7570481567
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704814f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704814f5: sub    $0x80,%rsp
  0x00007f75704814fc: mov    %rax,0x78(%rsp)
  0x00007f7570481501: mov    %rcx,0x70(%rsp)
  0x00007f7570481506: mov    %rdx,0x68(%rsp)
  0x00007f757048150b: mov    %rbx,0x60(%rsp)
  0x00007f7570481510: mov    %rbp,0x50(%rsp)
  0x00007f7570481515: mov    %rsi,0x48(%rsp)
  0x00007f757048151a: mov    %rdi,0x40(%rsp)
  0x00007f757048151f: mov    %r8,0x38(%rsp)
  0x00007f7570481524: mov    %r9,0x30(%rsp)
  0x00007f7570481529: mov    %r10,0x28(%rsp)
  0x00007f757048152e: mov    %r11,0x20(%rsp)
  0x00007f7570481533: mov    %r12,0x18(%rsp)
  0x00007f7570481538: mov    %r13,0x10(%rsp)
  0x00007f757048153d: mov    %r14,0x8(%rsp)
  0x00007f7570481542: mov    %r15,(%rsp)
  0x00007f7570481546: movabs $0x7f758592f470,%rdi
  0x00007f7570481550: movabs $0x7f75704814f0,%rsi
  0x00007f757048155a: mov    %rsp,%rdx
  0x00007f757048155d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481561: callq  0x00007f75853729fa
  0x00007f7570481566: hlt    
  ;; } verify_i2ce 
  0x00007f7570481567: mov    %rsp,%r11
  0x00007f757048156a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048156e: push   %rax
  0x00007f757048156f: mov    %r11,%rax
  0x00007f7570481572: mov    0x50(%rbx),%r11
  0x00007f7570481576: mov    0x18(%rax),%rsi
  0x00007f757048157a: mov    0x10(%rax),%rdx
  0x00007f757048157e: mov    0x8(%rax),%rcx
  0x00007f7570481582: mov    %rbx,0x258(%r15)
  0x00007f7570481589: mov    %rbx,%rax
  0x00007f757048158c: jmpq   *%r11
  0x00007f757048158f: mov    0x8(%rsi),%ebx
  0x00007f7570481592: shl    $0x3,%rbx
  0x00007f7570481596: cmp    0x10(%rax),%rbx
  0x00007f757048159a: mov    0x8(%rax),%rbx
  0x00007f757048159e: je     0x00007f75704815a9
  0x00007f75704815a4: jmpq   0x00007f757046ec40
  0x00007f75704815a9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704815b1: je     0x00007f75704816ac
  0x00007f75704815b7: jmpq   0x00007f757046ec40
  0x00007f75704815bc: cmpq   $0x0,0x58(%rbx)
  0x00007f75704815c4: je     0x00007f75704816ac
  0x00007f75704815ca: mov    %rsp,%r13
  0x00007f75704815cd: mov    (%rsp),%rax
  0x00007f75704815d1: and    $0xfffffffffffffff0,%rsp
  0x00007f75704815d5: pushfq 
  0x00007f75704815d6: sub    $0x8,%rsp
  0x00007f75704815da: mov    %rsp,-0x28(%rsp)
  0x00007f75704815df: sub    $0x80,%rsp
  0x00007f75704815e6: mov    %rax,0x78(%rsp)
  0x00007f75704815eb: mov    %rcx,0x70(%rsp)
  0x00007f75704815f0: mov    %rdx,0x68(%rsp)
  0x00007f75704815f5: mov    %rbx,0x60(%rsp)
  0x00007f75704815fa: mov    %rbp,0x50(%rsp)
  0x00007f75704815ff: mov    %rsi,0x48(%rsp)
  0x00007f7570481604: mov    %rdi,0x40(%rsp)
  0x00007f7570481609: mov    %r8,0x38(%rsp)
  0x00007f757048160e: mov    %r9,0x30(%rsp)
  0x00007f7570481613: mov    %r10,0x28(%rsp)
  0x00007f7570481618: mov    %r11,0x20(%rsp)
  0x00007f757048161d: mov    %r12,0x18(%rsp)
  0x00007f7570481622: mov    %r13,0x10(%rsp)
  0x00007f7570481627: mov    %r14,0x8(%rsp)
  0x00007f757048162c: mov    %r15,(%rsp)
  0x00007f7570481630: sub    $0x200,%rsp
  0x00007f7570481637: fxsave64 (%rsp)
  0x00007f757048163c: mov    %rbx,%rdi
  0x00007f757048163f: mov    %rax,%rsi
  0x00007f7570481642: callq  0x00007f7585522bca
  0x00007f7570481647: fxrstor64 (%rsp)
  0x00007f757048164c: add    $0x200,%rsp
  0x00007f7570481653: mov    (%rsp),%r15
  0x00007f7570481657: mov    0x8(%rsp),%r14
  0x00007f757048165c: mov    0x10(%rsp),%r13
  0x00007f7570481661: mov    0x18(%rsp),%r12
  0x00007f7570481666: mov    0x20(%rsp),%r11
  0x00007f757048166b: mov    0x28(%rsp),%r10
  0x00007f7570481670: mov    0x30(%rsp),%r9
  0x00007f7570481675: mov    0x38(%rsp),%r8
  0x00007f757048167a: mov    0x40(%rsp),%rdi
  0x00007f757048167f: mov    0x48(%rsp),%rsi
  0x00007f7570481684: mov    0x50(%rsp),%rbp
  0x00007f7570481689: mov    0x60(%rsp),%rbx
  0x00007f757048168e: mov    0x68(%rsp),%rdx
  0x00007f7570481693: mov    0x70(%rsp),%rcx
  0x00007f7570481698: mov    0x78(%rsp),%rax
  0x00007f757048169d: add    $0x80,%rsp
  0x00007f75704816a4: add    $0x8,%rsp
  0x00007f75704816a8: popfq  
  0x00007f75704816a9: mov    %r13,%rsp
  0x00007f75704816ac: pop    %rax
  0x00007f75704816ad: mov    %rsp,%r13
  0x00007f75704816b0: sub    $0x20,%rsp
  0x00007f75704816b4: mov    %rax,(%rsp)
  0x00007f75704816b8: mov    %rsi,0x18(%rsp)
  0x00007f75704816bd: mov    %rdx,0x10(%rsp)
  0x00007f75704816c2: mov    %rcx,0x8(%rsp)
  0x00007f75704816c7: mov    0x40(%rbx),%rcx
  0x00007f75704816cb: jmpq   *%rcx

AHE@0x00007f75800c25b8: 0xb0000000 i2c: 0x00007f75704817a0 c2i: 0x00007f75704818b4 c2iUV: 0x00007f7570481887
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;)Ljava/lang/ref/Finalizer; (539 bytes generated)
c2i argument handler starts at 0x7f75704818b4
  0x00007f75704817a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704817a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704817ae: cmp    %r11,%rax
  0x00007f75704817b1: jbe    0x00007f75704817ca
  0x00007f75704817b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704817c1: cmp    %r11,%rax
  0x00007f75704817c4: jb     0x00007f7570481867
  0x00007f75704817ca: movabs $0x7f7570369420,%r11
  0x00007f75704817d4: cmp    %r11,%rax
  0x00007f75704817d7: jbe    0x00007f75704817f0
  0x00007f75704817dd: movabs $0x7f757036de58,%r11
  0x00007f75704817e7: cmp    %r11,%rax
  0x00007f75704817ea: jb     0x00007f7570481867
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704817f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704817f5: sub    $0x80,%rsp
  0x00007f75704817fc: mov    %rax,0x78(%rsp)
  0x00007f7570481801: mov    %rcx,0x70(%rsp)
  0x00007f7570481806: mov    %rdx,0x68(%rsp)
  0x00007f757048180b: mov    %rbx,0x60(%rsp)
  0x00007f7570481810: mov    %rbp,0x50(%rsp)
  0x00007f7570481815: mov    %rsi,0x48(%rsp)
  0x00007f757048181a: mov    %rdi,0x40(%rsp)
  0x00007f757048181f: mov    %r8,0x38(%rsp)
  0x00007f7570481824: mov    %r9,0x30(%rsp)
  0x00007f7570481829: mov    %r10,0x28(%rsp)
  0x00007f757048182e: mov    %r11,0x20(%rsp)
  0x00007f7570481833: mov    %r12,0x18(%rsp)
  0x00007f7570481838: mov    %r13,0x10(%rsp)
  0x00007f757048183d: mov    %r14,0x8(%rsp)
  0x00007f7570481842: mov    %r15,(%rsp)
  0x00007f7570481846: movabs $0x7f758592f470,%rdi
  0x00007f7570481850: movabs $0x7f75704817f0,%rsi
  0x00007f757048185a: mov    %rsp,%rdx
  0x00007f757048185d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481861: callq  0x00007f75853729fa
  0x00007f7570481866: hlt    
  ;; } verify_i2ce 
  0x00007f7570481867: mov    %rsp,%r11
  0x00007f757048186a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048186e: push   %rax
  0x00007f757048186f: mov    %r11,%rax
  0x00007f7570481872: mov    0x50(%rbx),%r11
  0x00007f7570481876: mov    0x8(%rax),%rsi
  0x00007f757048187a: mov    %rbx,0x258(%r15)
  0x00007f7570481881: mov    %rbx,%rax
  0x00007f7570481884: jmpq   *%r11
  0x00007f7570481887: mov    0x8(%rsi),%ebx
  0x00007f757048188a: shl    $0x3,%rbx
  0x00007f757048188e: cmp    0x10(%rax),%rbx
  0x00007f7570481892: mov    0x8(%rax),%rbx
  0x00007f7570481896: je     0x00007f75704818a1
  0x00007f757048189c: jmpq   0x00007f757046ec40
  0x00007f75704818a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704818a9: je     0x00007f75704819a4
  0x00007f75704818af: jmpq   0x00007f757046ec40
  0x00007f75704818b4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704818bc: je     0x00007f75704819a4
  0x00007f75704818c2: mov    %rsp,%r13
  0x00007f75704818c5: mov    (%rsp),%rax
  0x00007f75704818c9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704818cd: pushfq 
  0x00007f75704818ce: sub    $0x8,%rsp
  0x00007f75704818d2: mov    %rsp,-0x28(%rsp)
  0x00007f75704818d7: sub    $0x80,%rsp
  0x00007f75704818de: mov    %rax,0x78(%rsp)
  0x00007f75704818e3: mov    %rcx,0x70(%rsp)
  0x00007f75704818e8: mov    %rdx,0x68(%rsp)
  0x00007f75704818ed: mov    %rbx,0x60(%rsp)
  0x00007f75704818f2: mov    %rbp,0x50(%rsp)
  0x00007f75704818f7: mov    %rsi,0x48(%rsp)
  0x00007f75704818fc: mov    %rdi,0x40(%rsp)
  0x00007f7570481901: mov    %r8,0x38(%rsp)
  0x00007f7570481906: mov    %r9,0x30(%rsp)
  0x00007f757048190b: mov    %r10,0x28(%rsp)
  0x00007f7570481910: mov    %r11,0x20(%rsp)
  0x00007f7570481915: mov    %r12,0x18(%rsp)
  0x00007f757048191a: mov    %r13,0x10(%rsp)
  0x00007f757048191f: mov    %r14,0x8(%rsp)
  0x00007f7570481924: mov    %r15,(%rsp)
  0x00007f7570481928: sub    $0x200,%rsp
  0x00007f757048192f: fxsave64 (%rsp)
  0x00007f7570481934: mov    %rbx,%rdi
  0x00007f7570481937: mov    %rax,%rsi
  0x00007f757048193a: callq  0x00007f7585522bca
  0x00007f757048193f: fxrstor64 (%rsp)
  0x00007f7570481944: add    $0x200,%rsp
  0x00007f757048194b: mov    (%rsp),%r15
  0x00007f757048194f: mov    0x8(%rsp),%r14
  0x00007f7570481954: mov    0x10(%rsp),%r13
  0x00007f7570481959: mov    0x18(%rsp),%r12
  0x00007f757048195e: mov    0x20(%rsp),%r11
  0x00007f7570481963: mov    0x28(%rsp),%r10
  0x00007f7570481968: mov    0x30(%rsp),%r9
  0x00007f757048196d: mov    0x38(%rsp),%r8
  0x00007f7570481972: mov    0x40(%rsp),%rdi
  0x00007f7570481977: mov    0x48(%rsp),%rsi
  0x00007f757048197c: mov    0x50(%rsp),%rbp
  0x00007f7570481981: mov    0x60(%rsp),%rbx
  0x00007f7570481986: mov    0x68(%rsp),%rdx
  0x00007f757048198b: mov    0x70(%rsp),%rcx
  0x00007f7570481990: mov    0x78(%rsp),%rax
  0x00007f7570481995: add    $0x80,%rsp
  0x00007f757048199c: add    $0x8,%rsp
  0x00007f75704819a0: popfq  
  0x00007f75704819a1: mov    %r13,%rsp
  0x00007f75704819a4: pop    %rax
  0x00007f75704819a5: mov    %rsp,%r13
  0x00007f75704819a8: sub    $0x10,%rsp
  0x00007f75704819ac: mov    %rax,(%rsp)
  0x00007f75704819b0: mov    %rsi,0x8(%rsp)
  0x00007f75704819b5: mov    0x40(%rbx),%rcx
  0x00007f75704819b9: jmpq   *%rcx

AHE@0x00007f75800c2600: 0xb0000000 i2c: 0x00007f7570481a60 c2i: 0x00007f7570481b74 c2iUV: 0x00007f7570481b47
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;)Ljava/lang/ref/Finalizer; (539 bytes generated)
c2i argument handler starts at 0x7f7570481b74
  0x00007f7570481a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570481a64: movabs $0x7f757036e3e0,%r11
  0x00007f7570481a6e: cmp    %r11,%rax
  0x00007f7570481a71: jbe    0x00007f7570481a8a
  0x00007f7570481a77: movabs $0x7f757046e3e0,%r11
  0x00007f7570481a81: cmp    %r11,%rax
  0x00007f7570481a84: jb     0x00007f7570481b27
  0x00007f7570481a8a: movabs $0x7f7570369420,%r11
  0x00007f7570481a94: cmp    %r11,%rax
  0x00007f7570481a97: jbe    0x00007f7570481ab0
  0x00007f7570481a9d: movabs $0x7f757036de58,%r11
  0x00007f7570481aa7: cmp    %r11,%rax
  0x00007f7570481aaa: jb     0x00007f7570481b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570481ab0: mov    %rsp,-0x28(%rsp)
  0x00007f7570481ab5: sub    $0x80,%rsp
  0x00007f7570481abc: mov    %rax,0x78(%rsp)
  0x00007f7570481ac1: mov    %rcx,0x70(%rsp)
  0x00007f7570481ac6: mov    %rdx,0x68(%rsp)
  0x00007f7570481acb: mov    %rbx,0x60(%rsp)
  0x00007f7570481ad0: mov    %rbp,0x50(%rsp)
  0x00007f7570481ad5: mov    %rsi,0x48(%rsp)
  0x00007f7570481ada: mov    %rdi,0x40(%rsp)
  0x00007f7570481adf: mov    %r8,0x38(%rsp)
  0x00007f7570481ae4: mov    %r9,0x30(%rsp)
  0x00007f7570481ae9: mov    %r10,0x28(%rsp)
  0x00007f7570481aee: mov    %r11,0x20(%rsp)
  0x00007f7570481af3: mov    %r12,0x18(%rsp)
  0x00007f7570481af8: mov    %r13,0x10(%rsp)
  0x00007f7570481afd: mov    %r14,0x8(%rsp)
  0x00007f7570481b02: mov    %r15,(%rsp)
  0x00007f7570481b06: movabs $0x7f758592f470,%rdi
  0x00007f7570481b10: movabs $0x7f7570481ab0,%rsi
  0x00007f7570481b1a: mov    %rsp,%rdx
  0x00007f7570481b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481b21: callq  0x00007f75853729fa
  0x00007f7570481b26: hlt    
  ;; } verify_i2ce 
  0x00007f7570481b27: mov    %rsp,%r11
  0x00007f7570481b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481b2e: push   %rax
  0x00007f7570481b2f: mov    %r11,%rax
  0x00007f7570481b32: mov    0x50(%rbx),%r11
  0x00007f7570481b36: mov    0x8(%rax),%rsi
  0x00007f7570481b3a: mov    %rbx,0x258(%r15)
  0x00007f7570481b41: mov    %rbx,%rax
  0x00007f7570481b44: jmpq   *%r11
  0x00007f7570481b47: mov    0x8(%rsi),%ebx
  0x00007f7570481b4a: shl    $0x3,%rbx
  0x00007f7570481b4e: cmp    0x10(%rax),%rbx
  0x00007f7570481b52: mov    0x8(%rax),%rbx
  0x00007f7570481b56: je     0x00007f7570481b61
  0x00007f7570481b5c: jmpq   0x00007f757046ec40
  0x00007f7570481b61: cmpq   $0x0,0x58(%rbx)
  0x00007f7570481b69: je     0x00007f7570481c64
  0x00007f7570481b6f: jmpq   0x00007f757046ec40
  0x00007f7570481b74: cmpq   $0x0,0x58(%rbx)
  0x00007f7570481b7c: je     0x00007f7570481c64
  0x00007f7570481b82: mov    %rsp,%r13
  0x00007f7570481b85: mov    (%rsp),%rax
  0x00007f7570481b89: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481b8d: pushfq 
  0x00007f7570481b8e: sub    $0x8,%rsp
  0x00007f7570481b92: mov    %rsp,-0x28(%rsp)
  0x00007f7570481b97: sub    $0x80,%rsp
  0x00007f7570481b9e: mov    %rax,0x78(%rsp)
  0x00007f7570481ba3: mov    %rcx,0x70(%rsp)
  0x00007f7570481ba8: mov    %rdx,0x68(%rsp)
  0x00007f7570481bad: mov    %rbx,0x60(%rsp)
  0x00007f7570481bb2: mov    %rbp,0x50(%rsp)
  0x00007f7570481bb7: mov    %rsi,0x48(%rsp)
  0x00007f7570481bbc: mov    %rdi,0x40(%rsp)
  0x00007f7570481bc1: mov    %r8,0x38(%rsp)
  0x00007f7570481bc6: mov    %r9,0x30(%rsp)
  0x00007f7570481bcb: mov    %r10,0x28(%rsp)
  0x00007f7570481bd0: mov    %r11,0x20(%rsp)
  0x00007f7570481bd5: mov    %r12,0x18(%rsp)
  0x00007f7570481bda: mov    %r13,0x10(%rsp)
  0x00007f7570481bdf: mov    %r14,0x8(%rsp)
  0x00007f7570481be4: mov    %r15,(%rsp)
  0x00007f7570481be8: sub    $0x200,%rsp
  0x00007f7570481bef: fxsave64 (%rsp)
  0x00007f7570481bf4: mov    %rbx,%rdi
  0x00007f7570481bf7: mov    %rax,%rsi
  0x00007f7570481bfa: callq  0x00007f7585522bca
  0x00007f7570481bff: fxrstor64 (%rsp)
  0x00007f7570481c04: add    $0x200,%rsp
  0x00007f7570481c0b: mov    (%rsp),%r15
  0x00007f7570481c0f: mov    0x8(%rsp),%r14
  0x00007f7570481c14: mov    0x10(%rsp),%r13
  0x00007f7570481c19: mov    0x18(%rsp),%r12
  0x00007f7570481c1e: mov    0x20(%rsp),%r11
  0x00007f7570481c23: mov    0x28(%rsp),%r10
  0x00007f7570481c28: mov    0x30(%rsp),%r9
  0x00007f7570481c2d: mov    0x38(%rsp),%r8
  0x00007f7570481c32: mov    0x40(%rsp),%rdi
  0x00007f7570481c37: mov    0x48(%rsp),%rsi
  0x00007f7570481c3c: mov    0x50(%rsp),%rbp
  0x00007f7570481c41: mov    0x60(%rsp),%rbx
  0x00007f7570481c46: mov    0x68(%rsp),%rdx
  0x00007f7570481c4b: mov    0x70(%rsp),%rcx
  0x00007f7570481c50: mov    0x78(%rsp),%rax
  0x00007f7570481c55: add    $0x80,%rsp
  0x00007f7570481c5c: add    $0x8,%rsp
  0x00007f7570481c60: popfq  
  0x00007f7570481c61: mov    %r13,%rsp
  0x00007f7570481c64: pop    %rax
  0x00007f7570481c65: mov    %rsp,%r13
  0x00007f7570481c68: sub    $0x10,%rsp
  0x00007f7570481c6c: mov    %rax,(%rsp)
  0x00007f7570481c70: mov    %rsi,0x8(%rsp)
  0x00007f7570481c75: mov    0x40(%rbx),%rcx
  0x00007f7570481c79: jmpq   *%rcx

AHE@0x00007f75800c2648: 0x i2c: 0x00007f7570481d20 c2i: 0x00007f7570481e30 c2iUV: 0x00007f7570481e03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570481e30
  0x00007f7570481d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570481d24: movabs $0x7f757036e3e0,%r11
  0x00007f7570481d2e: cmp    %r11,%rax
  0x00007f7570481d31: jbe    0x00007f7570481d4a
  0x00007f7570481d37: movabs $0x7f757046e3e0,%r11
  0x00007f7570481d41: cmp    %r11,%rax
  0x00007f7570481d44: jb     0x00007f7570481de7
  0x00007f7570481d4a: movabs $0x7f7570369420,%r11
  0x00007f7570481d54: cmp    %r11,%rax
  0x00007f7570481d57: jbe    0x00007f7570481d70
  0x00007f7570481d5d: movabs $0x7f757036de58,%r11
  0x00007f7570481d67: cmp    %r11,%rax
  0x00007f7570481d6a: jb     0x00007f7570481de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570481d70: mov    %rsp,-0x28(%rsp)
  0x00007f7570481d75: sub    $0x80,%rsp
  0x00007f7570481d7c: mov    %rax,0x78(%rsp)
  0x00007f7570481d81: mov    %rcx,0x70(%rsp)
  0x00007f7570481d86: mov    %rdx,0x68(%rsp)
  0x00007f7570481d8b: mov    %rbx,0x60(%rsp)
  0x00007f7570481d90: mov    %rbp,0x50(%rsp)
  0x00007f7570481d95: mov    %rsi,0x48(%rsp)
  0x00007f7570481d9a: mov    %rdi,0x40(%rsp)
  0x00007f7570481d9f: mov    %r8,0x38(%rsp)
  0x00007f7570481da4: mov    %r9,0x30(%rsp)
  0x00007f7570481da9: mov    %r10,0x28(%rsp)
  0x00007f7570481dae: mov    %r11,0x20(%rsp)
  0x00007f7570481db3: mov    %r12,0x18(%rsp)
  0x00007f7570481db8: mov    %r13,0x10(%rsp)
  0x00007f7570481dbd: mov    %r14,0x8(%rsp)
  0x00007f7570481dc2: mov    %r15,(%rsp)
  0x00007f7570481dc6: movabs $0x7f758592f470,%rdi
  0x00007f7570481dd0: movabs $0x7f7570481d70,%rsi
  0x00007f7570481dda: mov    %rsp,%rdx
  0x00007f7570481ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481de1: callq  0x00007f75853729fa
  0x00007f7570481de6: hlt    
  ;; } verify_i2ce 
  0x00007f7570481de7: mov    %rsp,%r11
  0x00007f7570481dea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481dee: push   %rax
  0x00007f7570481def: mov    %r11,%rax
  0x00007f7570481df2: mov    0x50(%rbx),%r11
  0x00007f7570481df6: mov    %rbx,0x258(%r15)
  0x00007f7570481dfd: mov    %rbx,%rax
  0x00007f7570481e00: jmpq   *%r11
  0x00007f7570481e03: mov    0x8(%rsi),%ebx
  0x00007f7570481e06: shl    $0x3,%rbx
  0x00007f7570481e0a: cmp    0x10(%rax),%rbx
  0x00007f7570481e0e: mov    0x8(%rax),%rbx
  0x00007f7570481e12: je     0x00007f7570481e1d
  0x00007f7570481e18: jmpq   0x00007f757046ec40
  0x00007f7570481e1d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570481e25: je     0x00007f7570481f20
  0x00007f7570481e2b: jmpq   0x00007f757046ec40
  0x00007f7570481e30: cmpq   $0x0,0x58(%rbx)
  0x00007f7570481e38: je     0x00007f7570481f20
  0x00007f7570481e3e: mov    %rsp,%r13
  0x00007f7570481e41: mov    (%rsp),%rax
  0x00007f7570481e45: and    $0xfffffffffffffff0,%rsp
  0x00007f7570481e49: pushfq 
  0x00007f7570481e4a: sub    $0x8,%rsp
  0x00007f7570481e4e: mov    %rsp,-0x28(%rsp)
  0x00007f7570481e53: sub    $0x80,%rsp
  0x00007f7570481e5a: mov    %rax,0x78(%rsp)
  0x00007f7570481e5f: mov    %rcx,0x70(%rsp)
  0x00007f7570481e64: mov    %rdx,0x68(%rsp)
  0x00007f7570481e69: mov    %rbx,0x60(%rsp)
  0x00007f7570481e6e: mov    %rbp,0x50(%rsp)
  0x00007f7570481e73: mov    %rsi,0x48(%rsp)
  0x00007f7570481e78: mov    %rdi,0x40(%rsp)
  0x00007f7570481e7d: mov    %r8,0x38(%rsp)
  0x00007f7570481e82: mov    %r9,0x30(%rsp)
  0x00007f7570481e87: mov    %r10,0x28(%rsp)
  0x00007f7570481e8c: mov    %r11,0x20(%rsp)
  0x00007f7570481e91: mov    %r12,0x18(%rsp)
  0x00007f7570481e96: mov    %r13,0x10(%rsp)
  0x00007f7570481e9b: mov    %r14,0x8(%rsp)
  0x00007f7570481ea0: mov    %r15,(%rsp)
  0x00007f7570481ea4: sub    $0x200,%rsp
  0x00007f7570481eab: fxsave64 (%rsp)
  0x00007f7570481eb0: mov    %rbx,%rdi
  0x00007f7570481eb3: mov    %rax,%rsi
  0x00007f7570481eb6: callq  0x00007f7585522bca
  0x00007f7570481ebb: fxrstor64 (%rsp)
  0x00007f7570481ec0: add    $0x200,%rsp
  0x00007f7570481ec7: mov    (%rsp),%r15
  0x00007f7570481ecb: mov    0x8(%rsp),%r14
  0x00007f7570481ed0: mov    0x10(%rsp),%r13
  0x00007f7570481ed5: mov    0x18(%rsp),%r12
  0x00007f7570481eda: mov    0x20(%rsp),%r11
  0x00007f7570481edf: mov    0x28(%rsp),%r10
  0x00007f7570481ee4: mov    0x30(%rsp),%r9
  0x00007f7570481ee9: mov    0x38(%rsp),%r8
  0x00007f7570481eee: mov    0x40(%rsp),%rdi
  0x00007f7570481ef3: mov    0x48(%rsp),%rsi
  0x00007f7570481ef8: mov    0x50(%rsp),%rbp
  0x00007f7570481efd: mov    0x60(%rsp),%rbx
  0x00007f7570481f02: mov    0x68(%rsp),%rdx
  0x00007f7570481f07: mov    0x70(%rsp),%rcx
  0x00007f7570481f0c: mov    0x78(%rsp),%rax
  0x00007f7570481f11: add    $0x80,%rsp
  0x00007f7570481f18: add    $0x8,%rsp
  0x00007f7570481f1c: popfq  
  0x00007f7570481f1d: mov    %r13,%rsp
  0x00007f7570481f20: pop    %rax
  0x00007f7570481f21: mov    %rsp,%r13
  0x00007f7570481f24: sub    $0x10,%rsp
  0x00007f7570481f28: mov    %rax,(%rsp)
  0x00007f7570481f2c: mov    0x40(%rbx),%rcx
  0x00007f7570481f30: jmpq   *%rcx

AHE@0x00007f75800c2690: 0xb0000000 i2c: 0x00007f7570481fe0 c2i: 0x00007f75704820f4 c2iUV: 0x00007f75704820c7
i2c argument handler #0 for: static (Ljava/lang/Runnable;)V (539 bytes generated)
c2i argument handler starts at 0x7f75704820f4
  0x00007f7570481fe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570481fe4: movabs $0x7f757036e3e0,%r11
  0x00007f7570481fee: cmp    %r11,%rax
  0x00007f7570481ff1: jbe    0x00007f757048200a
  0x00007f7570481ff7: movabs $0x7f757046e3e0,%r11
  0x00007f7570482001: cmp    %r11,%rax
  0x00007f7570482004: jb     0x00007f75704820a7
  0x00007f757048200a: movabs $0x7f7570369420,%r11
  0x00007f7570482014: cmp    %r11,%rax
  0x00007f7570482017: jbe    0x00007f7570482030
  0x00007f757048201d: movabs $0x7f757036de58,%r11
  0x00007f7570482027: cmp    %r11,%rax
  0x00007f757048202a: jb     0x00007f75704820a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570482030: mov    %rsp,-0x28(%rsp)
  0x00007f7570482035: sub    $0x80,%rsp
  0x00007f757048203c: mov    %rax,0x78(%rsp)
  0x00007f7570482041: mov    %rcx,0x70(%rsp)
  0x00007f7570482046: mov    %rdx,0x68(%rsp)
  0x00007f757048204b: mov    %rbx,0x60(%rsp)
  0x00007f7570482050: mov    %rbp,0x50(%rsp)
  0x00007f7570482055: mov    %rsi,0x48(%rsp)
  0x00007f757048205a: mov    %rdi,0x40(%rsp)
  0x00007f757048205f: mov    %r8,0x38(%rsp)
  0x00007f7570482064: mov    %r9,0x30(%rsp)
  0x00007f7570482069: mov    %r10,0x28(%rsp)
  0x00007f757048206e: mov    %r11,0x20(%rsp)
  0x00007f7570482073: mov    %r12,0x18(%rsp)
  0x00007f7570482078: mov    %r13,0x10(%rsp)
  0x00007f757048207d: mov    %r14,0x8(%rsp)
  0x00007f7570482082: mov    %r15,(%rsp)
  0x00007f7570482086: movabs $0x7f758592f470,%rdi
  0x00007f7570482090: movabs $0x7f7570482030,%rsi
  0x00007f757048209a: mov    %rsp,%rdx
  0x00007f757048209d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704820a1: callq  0x00007f75853729fa
  0x00007f75704820a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704820a7: mov    %rsp,%r11
  0x00007f75704820aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704820ae: push   %rax
  0x00007f75704820af: mov    %r11,%rax
  0x00007f75704820b2: mov    0x50(%rbx),%r11
  0x00007f75704820b6: mov    0x8(%rax),%rsi
  0x00007f75704820ba: mov    %rbx,0x258(%r15)
  0x00007f75704820c1: mov    %rbx,%rax
  0x00007f75704820c4: jmpq   *%r11
  0x00007f75704820c7: mov    0x8(%rsi),%ebx
  0x00007f75704820ca: shl    $0x3,%rbx
  0x00007f75704820ce: cmp    0x10(%rax),%rbx
  0x00007f75704820d2: mov    0x8(%rax),%rbx
  0x00007f75704820d6: je     0x00007f75704820e1
  0x00007f75704820dc: jmpq   0x00007f757046ec40
  0x00007f75704820e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704820e9: je     0x00007f75704821e4
  0x00007f75704820ef: jmpq   0x00007f757046ec40
  0x00007f75704820f4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704820fc: je     0x00007f75704821e4
  0x00007f7570482102: mov    %rsp,%r13
  0x00007f7570482105: mov    (%rsp),%rax
  0x00007f7570482109: and    $0xfffffffffffffff0,%rsp
  0x00007f757048210d: pushfq 
  0x00007f757048210e: sub    $0x8,%rsp
  0x00007f7570482112: mov    %rsp,-0x28(%rsp)
  0x00007f7570482117: sub    $0x80,%rsp
  0x00007f757048211e: mov    %rax,0x78(%rsp)
  0x00007f7570482123: mov    %rcx,0x70(%rsp)
  0x00007f7570482128: mov    %rdx,0x68(%rsp)
  0x00007f757048212d: mov    %rbx,0x60(%rsp)
  0x00007f7570482132: mov    %rbp,0x50(%rsp)
  0x00007f7570482137: mov    %rsi,0x48(%rsp)
  0x00007f757048213c: mov    %rdi,0x40(%rsp)
  0x00007f7570482141: mov    %r8,0x38(%rsp)
  0x00007f7570482146: mov    %r9,0x30(%rsp)
  0x00007f757048214b: mov    %r10,0x28(%rsp)
  0x00007f7570482150: mov    %r11,0x20(%rsp)
  0x00007f7570482155: mov    %r12,0x18(%rsp)
  0x00007f757048215a: mov    %r13,0x10(%rsp)
  0x00007f757048215f: mov    %r14,0x8(%rsp)
  0x00007f7570482164: mov    %r15,(%rsp)
  0x00007f7570482168: sub    $0x200,%rsp
  0x00007f757048216f: fxsave64 (%rsp)
  0x00007f7570482174: mov    %rbx,%rdi
  0x00007f7570482177: mov    %rax,%rsi
  0x00007f757048217a: callq  0x00007f7585522bca
  0x00007f757048217f: fxrstor64 (%rsp)
  0x00007f7570482184: add    $0x200,%rsp
  0x00007f757048218b: mov    (%rsp),%r15
  0x00007f757048218f: mov    0x8(%rsp),%r14
  0x00007f7570482194: mov    0x10(%rsp),%r13
  0x00007f7570482199: mov    0x18(%rsp),%r12
  0x00007f757048219e: mov    0x20(%rsp),%r11
  0x00007f75704821a3: mov    0x28(%rsp),%r10
  0x00007f75704821a8: mov    0x30(%rsp),%r9
  0x00007f75704821ad: mov    0x38(%rsp),%r8
  0x00007f75704821b2: mov    0x40(%rsp),%rdi
  0x00007f75704821b7: mov    0x48(%rsp),%rsi
  0x00007f75704821bc: mov    0x50(%rsp),%rbp
  0x00007f75704821c1: mov    0x60(%rsp),%rbx
  0x00007f75704821c6: mov    0x68(%rsp),%rdx
  0x00007f75704821cb: mov    0x70(%rsp),%rcx
  0x00007f75704821d0: mov    0x78(%rsp),%rax
  0x00007f75704821d5: add    $0x80,%rsp
  0x00007f75704821dc: add    $0x8,%rsp
  0x00007f75704821e0: popfq  
  0x00007f75704821e1: mov    %r13,%rsp
  0x00007f75704821e4: pop    %rax
  0x00007f75704821e5: mov    %rsp,%r13
  0x00007f75704821e8: sub    $0x10,%rsp
  0x00007f75704821ec: mov    %rax,(%rsp)
  0x00007f75704821f0: mov    %rsi,0x8(%rsp)
  0x00007f75704821f5: mov    0x40(%rbx),%rcx
  0x00007f75704821f9: jmpq   *%rcx

AHE@0x00007f75800c26d8: 0xbb000000 i2c: 0x00007f75704822a0 c2i: 0x00007f75704823b8 c2iUV: 0x00007f757048238b
i2c argument handler #0 for: receiver (Lsun/misc/JavaLangAccess;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704823b8
  0x00007f75704822a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704822a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704822ae: cmp    %r11,%rax
  0x00007f75704822b1: jbe    0x00007f75704822ca
  0x00007f75704822b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704822c1: cmp    %r11,%rax
  0x00007f75704822c4: jb     0x00007f7570482367
  0x00007f75704822ca: movabs $0x7f7570369420,%r11
  0x00007f75704822d4: cmp    %r11,%rax
  0x00007f75704822d7: jbe    0x00007f75704822f0
  0x00007f75704822dd: movabs $0x7f757036de58,%r11
  0x00007f75704822e7: cmp    %r11,%rax
  0x00007f75704822ea: jb     0x00007f7570482367
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704822f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704822f5: sub    $0x80,%rsp
  0x00007f75704822fc: mov    %rax,0x78(%rsp)
  0x00007f7570482301: mov    %rcx,0x70(%rsp)
  0x00007f7570482306: mov    %rdx,0x68(%rsp)
  0x00007f757048230b: mov    %rbx,0x60(%rsp)
  0x00007f7570482310: mov    %rbp,0x50(%rsp)
  0x00007f7570482315: mov    %rsi,0x48(%rsp)
  0x00007f757048231a: mov    %rdi,0x40(%rsp)
  0x00007f757048231f: mov    %r8,0x38(%rsp)
  0x00007f7570482324: mov    %r9,0x30(%rsp)
  0x00007f7570482329: mov    %r10,0x28(%rsp)
  0x00007f757048232e: mov    %r11,0x20(%rsp)
  0x00007f7570482333: mov    %r12,0x18(%rsp)
  0x00007f7570482338: mov    %r13,0x10(%rsp)
  0x00007f757048233d: mov    %r14,0x8(%rsp)
  0x00007f7570482342: mov    %r15,(%rsp)
  0x00007f7570482346: movabs $0x7f758592f470,%rdi
  0x00007f7570482350: movabs $0x7f75704822f0,%rsi
  0x00007f757048235a: mov    %rsp,%rdx
  0x00007f757048235d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482361: callq  0x00007f75853729fa
  0x00007f7570482366: hlt    
  ;; } verify_i2ce 
  0x00007f7570482367: mov    %rsp,%r11
  0x00007f757048236a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048236e: push   %rax
  0x00007f757048236f: mov    %r11,%rax
  0x00007f7570482372: mov    0x50(%rbx),%r11
  0x00007f7570482376: mov    0x10(%rax),%rsi
  0x00007f757048237a: mov    0x8(%rax),%rdx
  0x00007f757048237e: mov    %rbx,0x258(%r15)
  0x00007f7570482385: mov    %rbx,%rax
  0x00007f7570482388: jmpq   *%r11
  0x00007f757048238b: mov    0x8(%rsi),%ebx
  0x00007f757048238e: shl    $0x3,%rbx
  0x00007f7570482392: cmp    0x10(%rax),%rbx
  0x00007f7570482396: mov    0x8(%rax),%rbx
  0x00007f757048239a: je     0x00007f75704823a5
  0x00007f75704823a0: jmpq   0x00007f757046ec40
  0x00007f75704823a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704823ad: je     0x00007f75704824a8
  0x00007f75704823b3: jmpq   0x00007f757046ec40
  0x00007f75704823b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704823c0: je     0x00007f75704824a8
  0x00007f75704823c6: mov    %rsp,%r13
  0x00007f75704823c9: mov    (%rsp),%rax
  0x00007f75704823cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704823d1: pushfq 
  0x00007f75704823d2: sub    $0x8,%rsp
  0x00007f75704823d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704823db: sub    $0x80,%rsp
  0x00007f75704823e2: mov    %rax,0x78(%rsp)
  0x00007f75704823e7: mov    %rcx,0x70(%rsp)
  0x00007f75704823ec: mov    %rdx,0x68(%rsp)
  0x00007f75704823f1: mov    %rbx,0x60(%rsp)
  0x00007f75704823f6: mov    %rbp,0x50(%rsp)
  0x00007f75704823fb: mov    %rsi,0x48(%rsp)
  0x00007f7570482400: mov    %rdi,0x40(%rsp)
  0x00007f7570482405: mov    %r8,0x38(%rsp)
  0x00007f757048240a: mov    %r9,0x30(%rsp)
  0x00007f757048240f: mov    %r10,0x28(%rsp)
  0x00007f7570482414: mov    %r11,0x20(%rsp)
  0x00007f7570482419: mov    %r12,0x18(%rsp)
  0x00007f757048241e: mov    %r13,0x10(%rsp)
  0x00007f7570482423: mov    %r14,0x8(%rsp)
  0x00007f7570482428: mov    %r15,(%rsp)
  0x00007f757048242c: sub    $0x200,%rsp
  0x00007f7570482433: fxsave64 (%rsp)
  0x00007f7570482438: mov    %rbx,%rdi
  0x00007f757048243b: mov    %rax,%rsi
  0x00007f757048243e: callq  0x00007f7585522bca
  0x00007f7570482443: fxrstor64 (%rsp)
  0x00007f7570482448: add    $0x200,%rsp
  0x00007f757048244f: mov    (%rsp),%r15
  0x00007f7570482453: mov    0x8(%rsp),%r14
  0x00007f7570482458: mov    0x10(%rsp),%r13
  0x00007f757048245d: mov    0x18(%rsp),%r12
  0x00007f7570482462: mov    0x20(%rsp),%r11
  0x00007f7570482467: mov    0x28(%rsp),%r10
  0x00007f757048246c: mov    0x30(%rsp),%r9
  0x00007f7570482471: mov    0x38(%rsp),%r8
  0x00007f7570482476: mov    0x40(%rsp),%rdi
  0x00007f757048247b: mov    0x48(%rsp),%rsi
  0x00007f7570482480: mov    0x50(%rsp),%rbp
  0x00007f7570482485: mov    0x60(%rsp),%rbx
  0x00007f757048248a: mov    0x68(%rsp),%rdx
  0x00007f757048248f: mov    0x70(%rsp),%rcx
  0x00007f7570482494: mov    0x78(%rsp),%rax
  0x00007f7570482499: add    $0x80,%rsp
  0x00007f75704824a0: add    $0x8,%rsp
  0x00007f75704824a4: popfq  
  0x00007f75704824a5: mov    %r13,%rsp
  0x00007f75704824a8: pop    %rax
  0x00007f75704824a9: mov    %rsp,%r13
  0x00007f75704824ac: sub    $0x20,%rsp
  0x00007f75704824b0: mov    %rax,(%rsp)
  0x00007f75704824b4: mov    %rsi,0x10(%rsp)
  0x00007f75704824b9: mov    %rdx,0x8(%rsp)
  0x00007f75704824be: mov    0x40(%rbx),%rcx
  0x00007f75704824c2: jmpq   *%rcx

AHE@0x00007f75800c2720: 0x i2c: 0x00007f75704825a0 c2i: 0x00007f75704826b0 c2iUV: 0x00007f7570482683
i2c argument handler #0 for: static ()Ljava/lang/ref/ReferenceQueue; (530 bytes generated)
c2i argument handler starts at 0x7f75704826b0
  0x00007f75704825a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704825a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704825ae: cmp    %r11,%rax
  0x00007f75704825b1: jbe    0x00007f75704825ca
  0x00007f75704825b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704825c1: cmp    %r11,%rax
  0x00007f75704825c4: jb     0x00007f7570482667
  0x00007f75704825ca: movabs $0x7f7570369420,%r11
  0x00007f75704825d4: cmp    %r11,%rax
  0x00007f75704825d7: jbe    0x00007f75704825f0
  0x00007f75704825dd: movabs $0x7f757036de58,%r11
  0x00007f75704825e7: cmp    %r11,%rax
  0x00007f75704825ea: jb     0x00007f7570482667
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704825f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704825f5: sub    $0x80,%rsp
  0x00007f75704825fc: mov    %rax,0x78(%rsp)
  0x00007f7570482601: mov    %rcx,0x70(%rsp)
  0x00007f7570482606: mov    %rdx,0x68(%rsp)
  0x00007f757048260b: mov    %rbx,0x60(%rsp)
  0x00007f7570482610: mov    %rbp,0x50(%rsp)
  0x00007f7570482615: mov    %rsi,0x48(%rsp)
  0x00007f757048261a: mov    %rdi,0x40(%rsp)
  0x00007f757048261f: mov    %r8,0x38(%rsp)
  0x00007f7570482624: mov    %r9,0x30(%rsp)
  0x00007f7570482629: mov    %r10,0x28(%rsp)
  0x00007f757048262e: mov    %r11,0x20(%rsp)
  0x00007f7570482633: mov    %r12,0x18(%rsp)
  0x00007f7570482638: mov    %r13,0x10(%rsp)
  0x00007f757048263d: mov    %r14,0x8(%rsp)
  0x00007f7570482642: mov    %r15,(%rsp)
  0x00007f7570482646: movabs $0x7f758592f470,%rdi
  0x00007f7570482650: movabs $0x7f75704825f0,%rsi
  0x00007f757048265a: mov    %rsp,%rdx
  0x00007f757048265d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482661: callq  0x00007f75853729fa
  0x00007f7570482666: hlt    
  ;; } verify_i2ce 
  0x00007f7570482667: mov    %rsp,%r11
  0x00007f757048266a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048266e: push   %rax
  0x00007f757048266f: mov    %r11,%rax
  0x00007f7570482672: mov    0x50(%rbx),%r11
  0x00007f7570482676: mov    %rbx,0x258(%r15)
  0x00007f757048267d: mov    %rbx,%rax
  0x00007f7570482680: jmpq   *%r11
  0x00007f7570482683: mov    0x8(%rsi),%ebx
  0x00007f7570482686: shl    $0x3,%rbx
  0x00007f757048268a: cmp    0x10(%rax),%rbx
  0x00007f757048268e: mov    0x8(%rax),%rbx
  0x00007f7570482692: je     0x00007f757048269d
  0x00007f7570482698: jmpq   0x00007f757046ec40
  0x00007f757048269d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704826a5: je     0x00007f75704827a0
  0x00007f75704826ab: jmpq   0x00007f757046ec40
  0x00007f75704826b0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704826b8: je     0x00007f75704827a0
  0x00007f75704826be: mov    %rsp,%r13
  0x00007f75704826c1: mov    (%rsp),%rax
  0x00007f75704826c5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704826c9: pushfq 
  0x00007f75704826ca: sub    $0x8,%rsp
  0x00007f75704826ce: mov    %rsp,-0x28(%rsp)
  0x00007f75704826d3: sub    $0x80,%rsp
  0x00007f75704826da: mov    %rax,0x78(%rsp)
  0x00007f75704826df: mov    %rcx,0x70(%rsp)
  0x00007f75704826e4: mov    %rdx,0x68(%rsp)
  0x00007f75704826e9: mov    %rbx,0x60(%rsp)
  0x00007f75704826ee: mov    %rbp,0x50(%rsp)
  0x00007f75704826f3: mov    %rsi,0x48(%rsp)
  0x00007f75704826f8: mov    %rdi,0x40(%rsp)
  0x00007f75704826fd: mov    %r8,0x38(%rsp)
  0x00007f7570482702: mov    %r9,0x30(%rsp)
  0x00007f7570482707: mov    %r10,0x28(%rsp)
  0x00007f757048270c: mov    %r11,0x20(%rsp)
  0x00007f7570482711: mov    %r12,0x18(%rsp)
  0x00007f7570482716: mov    %r13,0x10(%rsp)
  0x00007f757048271b: mov    %r14,0x8(%rsp)
  0x00007f7570482720: mov    %r15,(%rsp)
  0x00007f7570482724: sub    $0x200,%rsp
  0x00007f757048272b: fxsave64 (%rsp)
  0x00007f7570482730: mov    %rbx,%rdi
  0x00007f7570482733: mov    %rax,%rsi
  0x00007f7570482736: callq  0x00007f7585522bca
  0x00007f757048273b: fxrstor64 (%rsp)
  0x00007f7570482740: add    $0x200,%rsp
  0x00007f7570482747: mov    (%rsp),%r15
  0x00007f757048274b: mov    0x8(%rsp),%r14
  0x00007f7570482750: mov    0x10(%rsp),%r13
  0x00007f7570482755: mov    0x18(%rsp),%r12
  0x00007f757048275a: mov    0x20(%rsp),%r11
  0x00007f757048275f: mov    0x28(%rsp),%r10
  0x00007f7570482764: mov    0x30(%rsp),%r9
  0x00007f7570482769: mov    0x38(%rsp),%r8
  0x00007f757048276e: mov    0x40(%rsp),%rdi
  0x00007f7570482773: mov    0x48(%rsp),%rsi
  0x00007f7570482778: mov    0x50(%rsp),%rbp
  0x00007f757048277d: mov    0x60(%rsp),%rbx
  0x00007f7570482782: mov    0x68(%rsp),%rdx
  0x00007f7570482787: mov    0x70(%rsp),%rcx
  0x00007f757048278c: mov    0x78(%rsp),%rax
  0x00007f7570482791: add    $0x80,%rsp
  0x00007f7570482798: add    $0x8,%rsp
  0x00007f757048279c: popfq  
  0x00007f757048279d: mov    %r13,%rsp
  0x00007f75704827a0: pop    %rax
  0x00007f75704827a1: mov    %rsp,%r13
  0x00007f75704827a4: sub    $0x10,%rsp
  0x00007f75704827a8: mov    %rax,(%rsp)
  0x00007f75704827ac: mov    0x40(%rbx),%rcx
  0x00007f75704827b0: jmpq   *%rcx

AHE@0x00007f75800c2768: 0xb0000000 i2c: 0x00007f7570482860 c2i: 0x00007f7570482974 c2iUV: 0x00007f7570482947
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f7570482974
  0x00007f7570482860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570482864: movabs $0x7f757036e3e0,%r11
  0x00007f757048286e: cmp    %r11,%rax
  0x00007f7570482871: jbe    0x00007f757048288a
  0x00007f7570482877: movabs $0x7f757046e3e0,%r11
  0x00007f7570482881: cmp    %r11,%rax
  0x00007f7570482884: jb     0x00007f7570482927
  0x00007f757048288a: movabs $0x7f7570369420,%r11
  0x00007f7570482894: cmp    %r11,%rax
  0x00007f7570482897: jbe    0x00007f75704828b0
  0x00007f757048289d: movabs $0x7f757036de58,%r11
  0x00007f75704828a7: cmp    %r11,%rax
  0x00007f75704828aa: jb     0x00007f7570482927
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704828b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704828b5: sub    $0x80,%rsp
  0x00007f75704828bc: mov    %rax,0x78(%rsp)
  0x00007f75704828c1: mov    %rcx,0x70(%rsp)
  0x00007f75704828c6: mov    %rdx,0x68(%rsp)
  0x00007f75704828cb: mov    %rbx,0x60(%rsp)
  0x00007f75704828d0: mov    %rbp,0x50(%rsp)
  0x00007f75704828d5: mov    %rsi,0x48(%rsp)
  0x00007f75704828da: mov    %rdi,0x40(%rsp)
  0x00007f75704828df: mov    %r8,0x38(%rsp)
  0x00007f75704828e4: mov    %r9,0x30(%rsp)
  0x00007f75704828e9: mov    %r10,0x28(%rsp)
  0x00007f75704828ee: mov    %r11,0x20(%rsp)
  0x00007f75704828f3: mov    %r12,0x18(%rsp)
  0x00007f75704828f8: mov    %r13,0x10(%rsp)
  0x00007f75704828fd: mov    %r14,0x8(%rsp)
  0x00007f7570482902: mov    %r15,(%rsp)
  0x00007f7570482906: movabs $0x7f758592f470,%rdi
  0x00007f7570482910: movabs $0x7f75704828b0,%rsi
  0x00007f757048291a: mov    %rsp,%rdx
  0x00007f757048291d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482921: callq  0x00007f75853729fa
  0x00007f7570482926: hlt    
  ;; } verify_i2ce 
  0x00007f7570482927: mov    %rsp,%r11
  0x00007f757048292a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048292e: push   %rax
  0x00007f757048292f: mov    %r11,%rax
  0x00007f7570482932: mov    0x50(%rbx),%r11
  0x00007f7570482936: mov    0x8(%rax),%rsi
  0x00007f757048293a: mov    %rbx,0x258(%r15)
  0x00007f7570482941: mov    %rbx,%rax
  0x00007f7570482944: jmpq   *%r11
  0x00007f7570482947: mov    0x8(%rsi),%ebx
  0x00007f757048294a: shl    $0x3,%rbx
  0x00007f757048294e: cmp    0x10(%rax),%rbx
  0x00007f7570482952: mov    0x8(%rax),%rbx
  0x00007f7570482956: je     0x00007f7570482961
  0x00007f757048295c: jmpq   0x00007f757046ec40
  0x00007f7570482961: cmpq   $0x0,0x58(%rbx)
  0x00007f7570482969: je     0x00007f7570482a64
  0x00007f757048296f: jmpq   0x00007f757046ec40
  0x00007f7570482974: cmpq   $0x0,0x58(%rbx)
  0x00007f757048297c: je     0x00007f7570482a64
  0x00007f7570482982: mov    %rsp,%r13
  0x00007f7570482985: mov    (%rsp),%rax
  0x00007f7570482989: and    $0xfffffffffffffff0,%rsp
  0x00007f757048298d: pushfq 
  0x00007f757048298e: sub    $0x8,%rsp
  0x00007f7570482992: mov    %rsp,-0x28(%rsp)
  0x00007f7570482997: sub    $0x80,%rsp
  0x00007f757048299e: mov    %rax,0x78(%rsp)
  0x00007f75704829a3: mov    %rcx,0x70(%rsp)
  0x00007f75704829a8: mov    %rdx,0x68(%rsp)
  0x00007f75704829ad: mov    %rbx,0x60(%rsp)
  0x00007f75704829b2: mov    %rbp,0x50(%rsp)
  0x00007f75704829b7: mov    %rsi,0x48(%rsp)
  0x00007f75704829bc: mov    %rdi,0x40(%rsp)
  0x00007f75704829c1: mov    %r8,0x38(%rsp)
  0x00007f75704829c6: mov    %r9,0x30(%rsp)
  0x00007f75704829cb: mov    %r10,0x28(%rsp)
  0x00007f75704829d0: mov    %r11,0x20(%rsp)
  0x00007f75704829d5: mov    %r12,0x18(%rsp)
  0x00007f75704829da: mov    %r13,0x10(%rsp)
  0x00007f75704829df: mov    %r14,0x8(%rsp)
  0x00007f75704829e4: mov    %r15,(%rsp)
  0x00007f75704829e8: sub    $0x200,%rsp
  0x00007f75704829ef: fxsave64 (%rsp)
  0x00007f75704829f4: mov    %rbx,%rdi
  0x00007f75704829f7: mov    %rax,%rsi
  0x00007f75704829fa: callq  0x00007f7585522bca
  0x00007f75704829ff: fxrstor64 (%rsp)
  0x00007f7570482a04: add    $0x200,%rsp
  0x00007f7570482a0b: mov    (%rsp),%r15
  0x00007f7570482a0f: mov    0x8(%rsp),%r14
  0x00007f7570482a14: mov    0x10(%rsp),%r13
  0x00007f7570482a19: mov    0x18(%rsp),%r12
  0x00007f7570482a1e: mov    0x20(%rsp),%r11
  0x00007f7570482a23: mov    0x28(%rsp),%r10
  0x00007f7570482a28: mov    0x30(%rsp),%r9
  0x00007f7570482a2d: mov    0x38(%rsp),%r8
  0x00007f7570482a32: mov    0x40(%rsp),%rdi
  0x00007f7570482a37: mov    0x48(%rsp),%rsi
  0x00007f7570482a3c: mov    0x50(%rsp),%rbp
  0x00007f7570482a41: mov    0x60(%rsp),%rbx
  0x00007f7570482a46: mov    0x68(%rsp),%rdx
  0x00007f7570482a4b: mov    0x70(%rsp),%rcx
  0x00007f7570482a50: mov    0x78(%rsp),%rax
  0x00007f7570482a55: add    $0x80,%rsp
  0x00007f7570482a5c: add    $0x8,%rsp
  0x00007f7570482a60: popfq  
  0x00007f7570482a61: mov    %r13,%rsp
  0x00007f7570482a64: pop    %rax
  0x00007f7570482a65: mov    %rsp,%r13
  0x00007f7570482a68: sub    $0x10,%rsp
  0x00007f7570482a6c: mov    %rax,(%rsp)
  0x00007f7570482a70: mov    %rsi,0x8(%rsp)
  0x00007f7570482a75: mov    0x40(%rbx),%rcx
  0x00007f7570482a79: jmpq   *%rcx

AHE@0x00007f75800c27b0: 0x i2c: 0x00007f7570482b20 c2i: 0x00007f7570482c30 c2iUV: 0x00007f7570482c03
i2c argument handler #0 for: static ()Ljava/lang/ref/ReferenceQueue; (530 bytes generated)
c2i argument handler starts at 0x7f7570482c30
  0x00007f7570482b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570482b24: movabs $0x7f757036e3e0,%r11
  0x00007f7570482b2e: cmp    %r11,%rax
  0x00007f7570482b31: jbe    0x00007f7570482b4a
  0x00007f7570482b37: movabs $0x7f757046e3e0,%r11
  0x00007f7570482b41: cmp    %r11,%rax
  0x00007f7570482b44: jb     0x00007f7570482be7
  0x00007f7570482b4a: movabs $0x7f7570369420,%r11
  0x00007f7570482b54: cmp    %r11,%rax
  0x00007f7570482b57: jbe    0x00007f7570482b70
  0x00007f7570482b5d: movabs $0x7f757036de58,%r11
  0x00007f7570482b67: cmp    %r11,%rax
  0x00007f7570482b6a: jb     0x00007f7570482be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570482b70: mov    %rsp,-0x28(%rsp)
  0x00007f7570482b75: sub    $0x80,%rsp
  0x00007f7570482b7c: mov    %rax,0x78(%rsp)
  0x00007f7570482b81: mov    %rcx,0x70(%rsp)
  0x00007f7570482b86: mov    %rdx,0x68(%rsp)
  0x00007f7570482b8b: mov    %rbx,0x60(%rsp)
  0x00007f7570482b90: mov    %rbp,0x50(%rsp)
  0x00007f7570482b95: mov    %rsi,0x48(%rsp)
  0x00007f7570482b9a: mov    %rdi,0x40(%rsp)
  0x00007f7570482b9f: mov    %r8,0x38(%rsp)
  0x00007f7570482ba4: mov    %r9,0x30(%rsp)
  0x00007f7570482ba9: mov    %r10,0x28(%rsp)
  0x00007f7570482bae: mov    %r11,0x20(%rsp)
  0x00007f7570482bb3: mov    %r12,0x18(%rsp)
  0x00007f7570482bb8: mov    %r13,0x10(%rsp)
  0x00007f7570482bbd: mov    %r14,0x8(%rsp)
  0x00007f7570482bc2: mov    %r15,(%rsp)
  0x00007f7570482bc6: movabs $0x7f758592f470,%rdi
  0x00007f7570482bd0: movabs $0x7f7570482b70,%rsi
  0x00007f7570482bda: mov    %rsp,%rdx
  0x00007f7570482bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482be1: callq  0x00007f75853729fa
  0x00007f7570482be6: hlt    
  ;; } verify_i2ce 
  0x00007f7570482be7: mov    %rsp,%r11
  0x00007f7570482bea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482bee: push   %rax
  0x00007f7570482bef: mov    %r11,%rax
  0x00007f7570482bf2: mov    0x50(%rbx),%r11
  0x00007f7570482bf6: mov    %rbx,0x258(%r15)
  0x00007f7570482bfd: mov    %rbx,%rax
  0x00007f7570482c00: jmpq   *%r11
  0x00007f7570482c03: mov    0x8(%rsi),%ebx
  0x00007f7570482c06: shl    $0x3,%rbx
  0x00007f7570482c0a: cmp    0x10(%rax),%rbx
  0x00007f7570482c0e: mov    0x8(%rax),%rbx
  0x00007f7570482c12: je     0x00007f7570482c1d
  0x00007f7570482c18: jmpq   0x00007f757046ec40
  0x00007f7570482c1d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570482c25: je     0x00007f7570482d20
  0x00007f7570482c2b: jmpq   0x00007f757046ec40
  0x00007f7570482c30: cmpq   $0x0,0x58(%rbx)
  0x00007f7570482c38: je     0x00007f7570482d20
  0x00007f7570482c3e: mov    %rsp,%r13
  0x00007f7570482c41: mov    (%rsp),%rax
  0x00007f7570482c45: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482c49: pushfq 
  0x00007f7570482c4a: sub    $0x8,%rsp
  0x00007f7570482c4e: mov    %rsp,-0x28(%rsp)
  0x00007f7570482c53: sub    $0x80,%rsp
  0x00007f7570482c5a: mov    %rax,0x78(%rsp)
  0x00007f7570482c5f: mov    %rcx,0x70(%rsp)
  0x00007f7570482c64: mov    %rdx,0x68(%rsp)
  0x00007f7570482c69: mov    %rbx,0x60(%rsp)
  0x00007f7570482c6e: mov    %rbp,0x50(%rsp)
  0x00007f7570482c73: mov    %rsi,0x48(%rsp)
  0x00007f7570482c78: mov    %rdi,0x40(%rsp)
  0x00007f7570482c7d: mov    %r8,0x38(%rsp)
  0x00007f7570482c82: mov    %r9,0x30(%rsp)
  0x00007f7570482c87: mov    %r10,0x28(%rsp)
  0x00007f7570482c8c: mov    %r11,0x20(%rsp)
  0x00007f7570482c91: mov    %r12,0x18(%rsp)
  0x00007f7570482c96: mov    %r13,0x10(%rsp)
  0x00007f7570482c9b: mov    %r14,0x8(%rsp)
  0x00007f7570482ca0: mov    %r15,(%rsp)
  0x00007f7570482ca4: sub    $0x200,%rsp
  0x00007f7570482cab: fxsave64 (%rsp)
  0x00007f7570482cb0: mov    %rbx,%rdi
  0x00007f7570482cb3: mov    %rax,%rsi
  0x00007f7570482cb6: callq  0x00007f7585522bca
  0x00007f7570482cbb: fxrstor64 (%rsp)
  0x00007f7570482cc0: add    $0x200,%rsp
  0x00007f7570482cc7: mov    (%rsp),%r15
  0x00007f7570482ccb: mov    0x8(%rsp),%r14
  0x00007f7570482cd0: mov    0x10(%rsp),%r13
  0x00007f7570482cd5: mov    0x18(%rsp),%r12
  0x00007f7570482cda: mov    0x20(%rsp),%r11
  0x00007f7570482cdf: mov    0x28(%rsp),%r10
  0x00007f7570482ce4: mov    0x30(%rsp),%r9
  0x00007f7570482ce9: mov    0x38(%rsp),%r8
  0x00007f7570482cee: mov    0x40(%rsp),%rdi
  0x00007f7570482cf3: mov    0x48(%rsp),%rsi
  0x00007f7570482cf8: mov    0x50(%rsp),%rbp
  0x00007f7570482cfd: mov    0x60(%rsp),%rbx
  0x00007f7570482d02: mov    0x68(%rsp),%rdx
  0x00007f7570482d07: mov    0x70(%rsp),%rcx
  0x00007f7570482d0c: mov    0x78(%rsp),%rax
  0x00007f7570482d11: add    $0x80,%rsp
  0x00007f7570482d18: add    $0x8,%rsp
  0x00007f7570482d1c: popfq  
  0x00007f7570482d1d: mov    %r13,%rsp
  0x00007f7570482d20: pop    %rax
  0x00007f7570482d21: mov    %rsp,%r13
  0x00007f7570482d24: sub    $0x10,%rsp
  0x00007f7570482d28: mov    %rax,(%rsp)
  0x00007f7570482d2c: mov    0x40(%rbx),%rcx
  0x00007f7570482d30: jmpq   *%rcx

AHE@0x00007f75800c27f8: 0x i2c: 0x00007f7570482de0 c2i: 0x00007f7570482ef0 c2iUV: 0x00007f7570482ec3
i2c argument handler #0 for: static ()Ljava/lang/ref/Finalizer; (530 bytes generated)
c2i argument handler starts at 0x7f7570482ef0
  0x00007f7570482de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570482de4: movabs $0x7f757036e3e0,%r11
  0x00007f7570482dee: cmp    %r11,%rax
  0x00007f7570482df1: jbe    0x00007f7570482e0a
  0x00007f7570482df7: movabs $0x7f757046e3e0,%r11
  0x00007f7570482e01: cmp    %r11,%rax
  0x00007f7570482e04: jb     0x00007f7570482ea7
  0x00007f7570482e0a: movabs $0x7f7570369420,%r11
  0x00007f7570482e14: cmp    %r11,%rax
  0x00007f7570482e17: jbe    0x00007f7570482e30
  0x00007f7570482e1d: movabs $0x7f757036de58,%r11
  0x00007f7570482e27: cmp    %r11,%rax
  0x00007f7570482e2a: jb     0x00007f7570482ea7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570482e30: mov    %rsp,-0x28(%rsp)
  0x00007f7570482e35: sub    $0x80,%rsp
  0x00007f7570482e3c: mov    %rax,0x78(%rsp)
  0x00007f7570482e41: mov    %rcx,0x70(%rsp)
  0x00007f7570482e46: mov    %rdx,0x68(%rsp)
  0x00007f7570482e4b: mov    %rbx,0x60(%rsp)
  0x00007f7570482e50: mov    %rbp,0x50(%rsp)
  0x00007f7570482e55: mov    %rsi,0x48(%rsp)
  0x00007f7570482e5a: mov    %rdi,0x40(%rsp)
  0x00007f7570482e5f: mov    %r8,0x38(%rsp)
  0x00007f7570482e64: mov    %r9,0x30(%rsp)
  0x00007f7570482e69: mov    %r10,0x28(%rsp)
  0x00007f7570482e6e: mov    %r11,0x20(%rsp)
  0x00007f7570482e73: mov    %r12,0x18(%rsp)
  0x00007f7570482e78: mov    %r13,0x10(%rsp)
  0x00007f7570482e7d: mov    %r14,0x8(%rsp)
  0x00007f7570482e82: mov    %r15,(%rsp)
  0x00007f7570482e86: movabs $0x7f758592f470,%rdi
  0x00007f7570482e90: movabs $0x7f7570482e30,%rsi
  0x00007f7570482e9a: mov    %rsp,%rdx
  0x00007f7570482e9d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482ea1: callq  0x00007f75853729fa
  0x00007f7570482ea6: hlt    
  ;; } verify_i2ce 
  0x00007f7570482ea7: mov    %rsp,%r11
  0x00007f7570482eaa: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482eae: push   %rax
  0x00007f7570482eaf: mov    %r11,%rax
  0x00007f7570482eb2: mov    0x50(%rbx),%r11
  0x00007f7570482eb6: mov    %rbx,0x258(%r15)
  0x00007f7570482ebd: mov    %rbx,%rax
  0x00007f7570482ec0: jmpq   *%r11
  0x00007f7570482ec3: mov    0x8(%rsi),%ebx
  0x00007f7570482ec6: shl    $0x3,%rbx
  0x00007f7570482eca: cmp    0x10(%rax),%rbx
  0x00007f7570482ece: mov    0x8(%rax),%rbx
  0x00007f7570482ed2: je     0x00007f7570482edd
  0x00007f7570482ed8: jmpq   0x00007f757046ec40
  0x00007f7570482edd: cmpq   $0x0,0x58(%rbx)
  0x00007f7570482ee5: je     0x00007f7570482fe0
  0x00007f7570482eeb: jmpq   0x00007f757046ec40
  0x00007f7570482ef0: cmpq   $0x0,0x58(%rbx)
  0x00007f7570482ef8: je     0x00007f7570482fe0
  0x00007f7570482efe: mov    %rsp,%r13
  0x00007f7570482f01: mov    (%rsp),%rax
  0x00007f7570482f05: and    $0xfffffffffffffff0,%rsp
  0x00007f7570482f09: pushfq 
  0x00007f7570482f0a: sub    $0x8,%rsp
  0x00007f7570482f0e: mov    %rsp,-0x28(%rsp)
  0x00007f7570482f13: sub    $0x80,%rsp
  0x00007f7570482f1a: mov    %rax,0x78(%rsp)
  0x00007f7570482f1f: mov    %rcx,0x70(%rsp)
  0x00007f7570482f24: mov    %rdx,0x68(%rsp)
  0x00007f7570482f29: mov    %rbx,0x60(%rsp)
  0x00007f7570482f2e: mov    %rbp,0x50(%rsp)
  0x00007f7570482f33: mov    %rsi,0x48(%rsp)
  0x00007f7570482f38: mov    %rdi,0x40(%rsp)
  0x00007f7570482f3d: mov    %r8,0x38(%rsp)
  0x00007f7570482f42: mov    %r9,0x30(%rsp)
  0x00007f7570482f47: mov    %r10,0x28(%rsp)
  0x00007f7570482f4c: mov    %r11,0x20(%rsp)
  0x00007f7570482f51: mov    %r12,0x18(%rsp)
  0x00007f7570482f56: mov    %r13,0x10(%rsp)
  0x00007f7570482f5b: mov    %r14,0x8(%rsp)
  0x00007f7570482f60: mov    %r15,(%rsp)
  0x00007f7570482f64: sub    $0x200,%rsp
  0x00007f7570482f6b: fxsave64 (%rsp)
  0x00007f7570482f70: mov    %rbx,%rdi
  0x00007f7570482f73: mov    %rax,%rsi
  0x00007f7570482f76: callq  0x00007f7585522bca
  0x00007f7570482f7b: fxrstor64 (%rsp)
  0x00007f7570482f80: add    $0x200,%rsp
  0x00007f7570482f87: mov    (%rsp),%r15
  0x00007f7570482f8b: mov    0x8(%rsp),%r14
  0x00007f7570482f90: mov    0x10(%rsp),%r13
  0x00007f7570482f95: mov    0x18(%rsp),%r12
  0x00007f7570482f9a: mov    0x20(%rsp),%r11
  0x00007f7570482f9f: mov    0x28(%rsp),%r10
  0x00007f7570482fa4: mov    0x30(%rsp),%r9
  0x00007f7570482fa9: mov    0x38(%rsp),%r8
  0x00007f7570482fae: mov    0x40(%rsp),%rdi
  0x00007f7570482fb3: mov    0x48(%rsp),%rsi
  0x00007f7570482fb8: mov    0x50(%rsp),%rbp
  0x00007f7570482fbd: mov    0x60(%rsp),%rbx
  0x00007f7570482fc2: mov    0x68(%rsp),%rdx
  0x00007f7570482fc7: mov    0x70(%rsp),%rcx
  0x00007f7570482fcc: mov    0x78(%rsp),%rax
  0x00007f7570482fd1: add    $0x80,%rsp
  0x00007f7570482fd8: add    $0x8,%rsp
  0x00007f7570482fdc: popfq  
  0x00007f7570482fdd: mov    %r13,%rsp
  0x00007f7570482fe0: pop    %rax
  0x00007f7570482fe1: mov    %rsp,%r13
  0x00007f7570482fe4: sub    $0x10,%rsp
  0x00007f7570482fe8: mov    %rax,(%rsp)
  0x00007f7570482fec: mov    0x40(%rbx),%rcx
  0x00007f7570482ff0: jmpq   *%rcx

AHE@0x00007f75800c2840: 0x i2c: 0x00007f75704830a0 c2i: 0x00007f75704831b0 c2iUV: 0x00007f7570483183
i2c argument handler #0 for: static ()Ljava/lang/Object; (530 bytes generated)
c2i argument handler starts at 0x7f75704831b0
  0x00007f75704830a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704830a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704830ae: cmp    %r11,%rax
  0x00007f75704830b1: jbe    0x00007f75704830ca
  0x00007f75704830b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704830c1: cmp    %r11,%rax
  0x00007f75704830c4: jb     0x00007f7570483167
  0x00007f75704830ca: movabs $0x7f7570369420,%r11
  0x00007f75704830d4: cmp    %r11,%rax
  0x00007f75704830d7: jbe    0x00007f75704830f0
  0x00007f75704830dd: movabs $0x7f757036de58,%r11
  0x00007f75704830e7: cmp    %r11,%rax
  0x00007f75704830ea: jb     0x00007f7570483167
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704830f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704830f5: sub    $0x80,%rsp
  0x00007f75704830fc: mov    %rax,0x78(%rsp)
  0x00007f7570483101: mov    %rcx,0x70(%rsp)
  0x00007f7570483106: mov    %rdx,0x68(%rsp)
  0x00007f757048310b: mov    %rbx,0x60(%rsp)
  0x00007f7570483110: mov    %rbp,0x50(%rsp)
  0x00007f7570483115: mov    %rsi,0x48(%rsp)
  0x00007f757048311a: mov    %rdi,0x40(%rsp)
  0x00007f757048311f: mov    %r8,0x38(%rsp)
  0x00007f7570483124: mov    %r9,0x30(%rsp)
  0x00007f7570483129: mov    %r10,0x28(%rsp)
  0x00007f757048312e: mov    %r11,0x20(%rsp)
  0x00007f7570483133: mov    %r12,0x18(%rsp)
  0x00007f7570483138: mov    %r13,0x10(%rsp)
  0x00007f757048313d: mov    %r14,0x8(%rsp)
  0x00007f7570483142: mov    %r15,(%rsp)
  0x00007f7570483146: movabs $0x7f758592f470,%rdi
  0x00007f7570483150: movabs $0x7f75704830f0,%rsi
  0x00007f757048315a: mov    %rsp,%rdx
  0x00007f757048315d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483161: callq  0x00007f75853729fa
  0x00007f7570483166: hlt    
  ;; } verify_i2ce 
  0x00007f7570483167: mov    %rsp,%r11
  0x00007f757048316a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048316e: push   %rax
  0x00007f757048316f: mov    %r11,%rax
  0x00007f7570483172: mov    0x50(%rbx),%r11
  0x00007f7570483176: mov    %rbx,0x258(%r15)
  0x00007f757048317d: mov    %rbx,%rax
  0x00007f7570483180: jmpq   *%r11
  0x00007f7570483183: mov    0x8(%rsi),%ebx
  0x00007f7570483186: shl    $0x3,%rbx
  0x00007f757048318a: cmp    0x10(%rax),%rbx
  0x00007f757048318e: mov    0x8(%rax),%rbx
  0x00007f7570483192: je     0x00007f757048319d
  0x00007f7570483198: jmpq   0x00007f757046ec40
  0x00007f757048319d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704831a5: je     0x00007f75704832a0
  0x00007f75704831ab: jmpq   0x00007f757046ec40
  0x00007f75704831b0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704831b8: je     0x00007f75704832a0
  0x00007f75704831be: mov    %rsp,%r13
  0x00007f75704831c1: mov    (%rsp),%rax
  0x00007f75704831c5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704831c9: pushfq 
  0x00007f75704831ca: sub    $0x8,%rsp
  0x00007f75704831ce: mov    %rsp,-0x28(%rsp)
  0x00007f75704831d3: sub    $0x80,%rsp
  0x00007f75704831da: mov    %rax,0x78(%rsp)
  0x00007f75704831df: mov    %rcx,0x70(%rsp)
  0x00007f75704831e4: mov    %rdx,0x68(%rsp)
  0x00007f75704831e9: mov    %rbx,0x60(%rsp)
  0x00007f75704831ee: mov    %rbp,0x50(%rsp)
  0x00007f75704831f3: mov    %rsi,0x48(%rsp)
  0x00007f75704831f8: mov    %rdi,0x40(%rsp)
  0x00007f75704831fd: mov    %r8,0x38(%rsp)
  0x00007f7570483202: mov    %r9,0x30(%rsp)
  0x00007f7570483207: mov    %r10,0x28(%rsp)
  0x00007f757048320c: mov    %r11,0x20(%rsp)
  0x00007f7570483211: mov    %r12,0x18(%rsp)
  0x00007f7570483216: mov    %r13,0x10(%rsp)
  0x00007f757048321b: mov    %r14,0x8(%rsp)
  0x00007f7570483220: mov    %r15,(%rsp)
  0x00007f7570483224: sub    $0x200,%rsp
  0x00007f757048322b: fxsave64 (%rsp)
  0x00007f7570483230: mov    %rbx,%rdi
  0x00007f7570483233: mov    %rax,%rsi
  0x00007f7570483236: callq  0x00007f7585522bca
  0x00007f757048323b: fxrstor64 (%rsp)
  0x00007f7570483240: add    $0x200,%rsp
  0x00007f7570483247: mov    (%rsp),%r15
  0x00007f757048324b: mov    0x8(%rsp),%r14
  0x00007f7570483250: mov    0x10(%rsp),%r13
  0x00007f7570483255: mov    0x18(%rsp),%r12
  0x00007f757048325a: mov    0x20(%rsp),%r11
  0x00007f757048325f: mov    0x28(%rsp),%r10
  0x00007f7570483264: mov    0x30(%rsp),%r9
  0x00007f7570483269: mov    0x38(%rsp),%r8
  0x00007f757048326e: mov    0x40(%rsp),%rdi
  0x00007f7570483273: mov    0x48(%rsp),%rsi
  0x00007f7570483278: mov    0x50(%rsp),%rbp
  0x00007f757048327d: mov    0x60(%rsp),%rbx
  0x00007f7570483282: mov    0x68(%rsp),%rdx
  0x00007f7570483287: mov    0x70(%rsp),%rcx
  0x00007f757048328c: mov    0x78(%rsp),%rax
  0x00007f7570483291: add    $0x80,%rsp
  0x00007f7570483298: add    $0x8,%rsp
  0x00007f757048329c: popfq  
  0x00007f757048329d: mov    %r13,%rsp
  0x00007f75704832a0: pop    %rax
  0x00007f75704832a1: mov    %rsp,%r13
  0x00007f75704832a4: sub    $0x10,%rsp
  0x00007f75704832a8: mov    %rax,(%rsp)
  0x00007f75704832ac: mov    0x40(%rbx),%rcx
  0x00007f75704832b0: jmpq   *%rcx

AHE@0x00007f75800c2888: 0xbb000000 i2c: 0x00007f7570483360 c2i: 0x00007f7570483478 c2iUV: 0x00007f757048344b
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;Lsun/misc/JavaLangAccess;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570483478
  0x00007f7570483360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570483364: movabs $0x7f757036e3e0,%r11
  0x00007f757048336e: cmp    %r11,%rax
  0x00007f7570483371: jbe    0x00007f757048338a
  0x00007f7570483377: movabs $0x7f757046e3e0,%r11
  0x00007f7570483381: cmp    %r11,%rax
  0x00007f7570483384: jb     0x00007f7570483427
  0x00007f757048338a: movabs $0x7f7570369420,%r11
  0x00007f7570483394: cmp    %r11,%rax
  0x00007f7570483397: jbe    0x00007f75704833b0
  0x00007f757048339d: movabs $0x7f757036de58,%r11
  0x00007f75704833a7: cmp    %r11,%rax
  0x00007f75704833aa: jb     0x00007f7570483427
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704833b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704833b5: sub    $0x80,%rsp
  0x00007f75704833bc: mov    %rax,0x78(%rsp)
  0x00007f75704833c1: mov    %rcx,0x70(%rsp)
  0x00007f75704833c6: mov    %rdx,0x68(%rsp)
  0x00007f75704833cb: mov    %rbx,0x60(%rsp)
  0x00007f75704833d0: mov    %rbp,0x50(%rsp)
  0x00007f75704833d5: mov    %rsi,0x48(%rsp)
  0x00007f75704833da: mov    %rdi,0x40(%rsp)
  0x00007f75704833df: mov    %r8,0x38(%rsp)
  0x00007f75704833e4: mov    %r9,0x30(%rsp)
  0x00007f75704833e9: mov    %r10,0x28(%rsp)
  0x00007f75704833ee: mov    %r11,0x20(%rsp)
  0x00007f75704833f3: mov    %r12,0x18(%rsp)
  0x00007f75704833f8: mov    %r13,0x10(%rsp)
  0x00007f75704833fd: mov    %r14,0x8(%rsp)
  0x00007f7570483402: mov    %r15,(%rsp)
  0x00007f7570483406: movabs $0x7f758592f470,%rdi
  0x00007f7570483410: movabs $0x7f75704833b0,%rsi
  0x00007f757048341a: mov    %rsp,%rdx
  0x00007f757048341d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483421: callq  0x00007f75853729fa
  0x00007f7570483426: hlt    
  ;; } verify_i2ce 
  0x00007f7570483427: mov    %rsp,%r11
  0x00007f757048342a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048342e: push   %rax
  0x00007f757048342f: mov    %r11,%rax
  0x00007f7570483432: mov    0x50(%rbx),%r11
  0x00007f7570483436: mov    0x10(%rax),%rsi
  0x00007f757048343a: mov    0x8(%rax),%rdx
  0x00007f757048343e: mov    %rbx,0x258(%r15)
  0x00007f7570483445: mov    %rbx,%rax
  0x00007f7570483448: jmpq   *%r11
  0x00007f757048344b: mov    0x8(%rsi),%ebx
  0x00007f757048344e: shl    $0x3,%rbx
  0x00007f7570483452: cmp    0x10(%rax),%rbx
  0x00007f7570483456: mov    0x8(%rax),%rbx
  0x00007f757048345a: je     0x00007f7570483465
  0x00007f7570483460: jmpq   0x00007f757046ec40
  0x00007f7570483465: cmpq   $0x0,0x58(%rbx)
  0x00007f757048346d: je     0x00007f7570483568
  0x00007f7570483473: jmpq   0x00007f757046ec40
  0x00007f7570483478: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483480: je     0x00007f7570483568
  0x00007f7570483486: mov    %rsp,%r13
  0x00007f7570483489: mov    (%rsp),%rax
  0x00007f757048348d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483491: pushfq 
  0x00007f7570483492: sub    $0x8,%rsp
  0x00007f7570483496: mov    %rsp,-0x28(%rsp)
  0x00007f757048349b: sub    $0x80,%rsp
  0x00007f75704834a2: mov    %rax,0x78(%rsp)
  0x00007f75704834a7: mov    %rcx,0x70(%rsp)
  0x00007f75704834ac: mov    %rdx,0x68(%rsp)
  0x00007f75704834b1: mov    %rbx,0x60(%rsp)
  0x00007f75704834b6: mov    %rbp,0x50(%rsp)
  0x00007f75704834bb: mov    %rsi,0x48(%rsp)
  0x00007f75704834c0: mov    %rdi,0x40(%rsp)
  0x00007f75704834c5: mov    %r8,0x38(%rsp)
  0x00007f75704834ca: mov    %r9,0x30(%rsp)
  0x00007f75704834cf: mov    %r10,0x28(%rsp)
  0x00007f75704834d4: mov    %r11,0x20(%rsp)
  0x00007f75704834d9: mov    %r12,0x18(%rsp)
  0x00007f75704834de: mov    %r13,0x10(%rsp)
  0x00007f75704834e3: mov    %r14,0x8(%rsp)
  0x00007f75704834e8: mov    %r15,(%rsp)
  0x00007f75704834ec: sub    $0x200,%rsp
  0x00007f75704834f3: fxsave64 (%rsp)
  0x00007f75704834f8: mov    %rbx,%rdi
  0x00007f75704834fb: mov    %rax,%rsi
  0x00007f75704834fe: callq  0x00007f7585522bca
  0x00007f7570483503: fxrstor64 (%rsp)
  0x00007f7570483508: add    $0x200,%rsp
  0x00007f757048350f: mov    (%rsp),%r15
  0x00007f7570483513: mov    0x8(%rsp),%r14
  0x00007f7570483518: mov    0x10(%rsp),%r13
  0x00007f757048351d: mov    0x18(%rsp),%r12
  0x00007f7570483522: mov    0x20(%rsp),%r11
  0x00007f7570483527: mov    0x28(%rsp),%r10
  0x00007f757048352c: mov    0x30(%rsp),%r9
  0x00007f7570483531: mov    0x38(%rsp),%r8
  0x00007f7570483536: mov    0x40(%rsp),%rdi
  0x00007f757048353b: mov    0x48(%rsp),%rsi
  0x00007f7570483540: mov    0x50(%rsp),%rbp
  0x00007f7570483545: mov    0x60(%rsp),%rbx
  0x00007f757048354a: mov    0x68(%rsp),%rdx
  0x00007f757048354f: mov    0x70(%rsp),%rcx
  0x00007f7570483554: mov    0x78(%rsp),%rax
  0x00007f7570483559: add    $0x80,%rsp
  0x00007f7570483560: add    $0x8,%rsp
  0x00007f7570483564: popfq  
  0x00007f7570483565: mov    %r13,%rsp
  0x00007f7570483568: pop    %rax
  0x00007f7570483569: mov    %rsp,%r13
  0x00007f757048356c: sub    $0x20,%rsp
  0x00007f7570483570: mov    %rax,(%rsp)
  0x00007f7570483574: mov    %rsi,0x10(%rsp)
  0x00007f7570483579: mov    %rdx,0x8(%rsp)
  0x00007f757048357e: mov    0x40(%rbx),%rcx
  0x00007f7570483582: jmpq   *%rcx

AHE@0x00007f75800c28d0: 0xb0000000 i2c: 0x00007f7570483660 c2i: 0x00007f7570483774 c2iUV: 0x00007f7570483747
i2c argument handler #0 for: static (Ljava/lang/Object;)V (539 bytes generated)
c2i argument handler starts at 0x7f7570483774
  0x00007f7570483660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570483664: movabs $0x7f757036e3e0,%r11
  0x00007f757048366e: cmp    %r11,%rax
  0x00007f7570483671: jbe    0x00007f757048368a
  0x00007f7570483677: movabs $0x7f757046e3e0,%r11
  0x00007f7570483681: cmp    %r11,%rax
  0x00007f7570483684: jb     0x00007f7570483727
  0x00007f757048368a: movabs $0x7f7570369420,%r11
  0x00007f7570483694: cmp    %r11,%rax
  0x00007f7570483697: jbe    0x00007f75704836b0
  0x00007f757048369d: movabs $0x7f757036de58,%r11
  0x00007f75704836a7: cmp    %r11,%rax
  0x00007f75704836aa: jb     0x00007f7570483727
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704836b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704836b5: sub    $0x80,%rsp
  0x00007f75704836bc: mov    %rax,0x78(%rsp)
  0x00007f75704836c1: mov    %rcx,0x70(%rsp)
  0x00007f75704836c6: mov    %rdx,0x68(%rsp)
  0x00007f75704836cb: mov    %rbx,0x60(%rsp)
  0x00007f75704836d0: mov    %rbp,0x50(%rsp)
  0x00007f75704836d5: mov    %rsi,0x48(%rsp)
  0x00007f75704836da: mov    %rdi,0x40(%rsp)
  0x00007f75704836df: mov    %r8,0x38(%rsp)
  0x00007f75704836e4: mov    %r9,0x30(%rsp)
  0x00007f75704836e9: mov    %r10,0x28(%rsp)
  0x00007f75704836ee: mov    %r11,0x20(%rsp)
  0x00007f75704836f3: mov    %r12,0x18(%rsp)
  0x00007f75704836f8: mov    %r13,0x10(%rsp)
  0x00007f75704836fd: mov    %r14,0x8(%rsp)
  0x00007f7570483702: mov    %r15,(%rsp)
  0x00007f7570483706: movabs $0x7f758592f470,%rdi
  0x00007f7570483710: movabs $0x7f75704836b0,%rsi
  0x00007f757048371a: mov    %rsp,%rdx
  0x00007f757048371d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483721: callq  0x00007f75853729fa
  0x00007f7570483726: hlt    
  ;; } verify_i2ce 
  0x00007f7570483727: mov    %rsp,%r11
  0x00007f757048372a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048372e: push   %rax
  0x00007f757048372f: mov    %r11,%rax
  0x00007f7570483732: mov    0x50(%rbx),%r11
  0x00007f7570483736: mov    0x8(%rax),%rsi
  0x00007f757048373a: mov    %rbx,0x258(%r15)
  0x00007f7570483741: mov    %rbx,%rax
  0x00007f7570483744: jmpq   *%r11
  0x00007f7570483747: mov    0x8(%rsi),%ebx
  0x00007f757048374a: shl    $0x3,%rbx
  0x00007f757048374e: cmp    0x10(%rax),%rbx
  0x00007f7570483752: mov    0x8(%rax),%rbx
  0x00007f7570483756: je     0x00007f7570483761
  0x00007f757048375c: jmpq   0x00007f757046ec40
  0x00007f7570483761: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483769: je     0x00007f7570483864
  0x00007f757048376f: jmpq   0x00007f757046ec40
  0x00007f7570483774: cmpq   $0x0,0x58(%rbx)
  0x00007f757048377c: je     0x00007f7570483864
  0x00007f7570483782: mov    %rsp,%r13
  0x00007f7570483785: mov    (%rsp),%rax
  0x00007f7570483789: and    $0xfffffffffffffff0,%rsp
  0x00007f757048378d: pushfq 
  0x00007f757048378e: sub    $0x8,%rsp
  0x00007f7570483792: mov    %rsp,-0x28(%rsp)
  0x00007f7570483797: sub    $0x80,%rsp
  0x00007f757048379e: mov    %rax,0x78(%rsp)
  0x00007f75704837a3: mov    %rcx,0x70(%rsp)
  0x00007f75704837a8: mov    %rdx,0x68(%rsp)
  0x00007f75704837ad: mov    %rbx,0x60(%rsp)
  0x00007f75704837b2: mov    %rbp,0x50(%rsp)
  0x00007f75704837b7: mov    %rsi,0x48(%rsp)
  0x00007f75704837bc: mov    %rdi,0x40(%rsp)
  0x00007f75704837c1: mov    %r8,0x38(%rsp)
  0x00007f75704837c6: mov    %r9,0x30(%rsp)
  0x00007f75704837cb: mov    %r10,0x28(%rsp)
  0x00007f75704837d0: mov    %r11,0x20(%rsp)
  0x00007f75704837d5: mov    %r12,0x18(%rsp)
  0x00007f75704837da: mov    %r13,0x10(%rsp)
  0x00007f75704837df: mov    %r14,0x8(%rsp)
  0x00007f75704837e4: mov    %r15,(%rsp)
  0x00007f75704837e8: sub    $0x200,%rsp
  0x00007f75704837ef: fxsave64 (%rsp)
  0x00007f75704837f4: mov    %rbx,%rdi
  0x00007f75704837f7: mov    %rax,%rsi
  0x00007f75704837fa: callq  0x00007f7585522bca
  0x00007f75704837ff: fxrstor64 (%rsp)
  0x00007f7570483804: add    $0x200,%rsp
  0x00007f757048380b: mov    (%rsp),%r15
  0x00007f757048380f: mov    0x8(%rsp),%r14
  0x00007f7570483814: mov    0x10(%rsp),%r13
  0x00007f7570483819: mov    0x18(%rsp),%r12
  0x00007f757048381e: mov    0x20(%rsp),%r11
  0x00007f7570483823: mov    0x28(%rsp),%r10
  0x00007f7570483828: mov    0x30(%rsp),%r9
  0x00007f757048382d: mov    0x38(%rsp),%r8
  0x00007f7570483832: mov    0x40(%rsp),%rdi
  0x00007f7570483837: mov    0x48(%rsp),%rsi
  0x00007f757048383c: mov    0x50(%rsp),%rbp
  0x00007f7570483841: mov    0x60(%rsp),%rbx
  0x00007f7570483846: mov    0x68(%rsp),%rdx
  0x00007f757048384b: mov    0x70(%rsp),%rcx
  0x00007f7570483850: mov    0x78(%rsp),%rax
  0x00007f7570483855: add    $0x80,%rsp
  0x00007f757048385c: add    $0x8,%rsp
  0x00007f7570483860: popfq  
  0x00007f7570483861: mov    %r13,%rsp
  0x00007f7570483864: pop    %rax
  0x00007f7570483865: mov    %rsp,%r13
  0x00007f7570483868: sub    $0x10,%rsp
  0x00007f757048386c: mov    %rax,(%rsp)
  0x00007f7570483870: mov    %rsi,0x8(%rsp)
  0x00007f7570483875: mov    0x40(%rbx),%rcx
  0x00007f7570483879: jmpq   *%rcx

AHE@0x00007f75800c2918: 0x i2c: 0x00007f7570483920 c2i: 0x00007f7570483a30 c2iUV: 0x00007f7570483a03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570483a30
  0x00007f7570483920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570483924: movabs $0x7f757036e3e0,%r11
  0x00007f757048392e: cmp    %r11,%rax
  0x00007f7570483931: jbe    0x00007f757048394a
  0x00007f7570483937: movabs $0x7f757046e3e0,%r11
  0x00007f7570483941: cmp    %r11,%rax
  0x00007f7570483944: jb     0x00007f75704839e7
  0x00007f757048394a: movabs $0x7f7570369420,%r11
  0x00007f7570483954: cmp    %r11,%rax
  0x00007f7570483957: jbe    0x00007f7570483970
  0x00007f757048395d: movabs $0x7f757036de58,%r11
  0x00007f7570483967: cmp    %r11,%rax
  0x00007f757048396a: jb     0x00007f75704839e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570483970: mov    %rsp,-0x28(%rsp)
  0x00007f7570483975: sub    $0x80,%rsp
  0x00007f757048397c: mov    %rax,0x78(%rsp)
  0x00007f7570483981: mov    %rcx,0x70(%rsp)
  0x00007f7570483986: mov    %rdx,0x68(%rsp)
  0x00007f757048398b: mov    %rbx,0x60(%rsp)
  0x00007f7570483990: mov    %rbp,0x50(%rsp)
  0x00007f7570483995: mov    %rsi,0x48(%rsp)
  0x00007f757048399a: mov    %rdi,0x40(%rsp)
  0x00007f757048399f: mov    %r8,0x38(%rsp)
  0x00007f75704839a4: mov    %r9,0x30(%rsp)
  0x00007f75704839a9: mov    %r10,0x28(%rsp)
  0x00007f75704839ae: mov    %r11,0x20(%rsp)
  0x00007f75704839b3: mov    %r12,0x18(%rsp)
  0x00007f75704839b8: mov    %r13,0x10(%rsp)
  0x00007f75704839bd: mov    %r14,0x8(%rsp)
  0x00007f75704839c2: mov    %r15,(%rsp)
  0x00007f75704839c6: movabs $0x7f758592f470,%rdi
  0x00007f75704839d0: movabs $0x7f7570483970,%rsi
  0x00007f75704839da: mov    %rsp,%rdx
  0x00007f75704839dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704839e1: callq  0x00007f75853729fa
  0x00007f75704839e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704839e7: mov    %rsp,%r11
  0x00007f75704839ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704839ee: push   %rax
  0x00007f75704839ef: mov    %r11,%rax
  0x00007f75704839f2: mov    0x50(%rbx),%r11
  0x00007f75704839f6: mov    %rbx,0x258(%r15)
  0x00007f75704839fd: mov    %rbx,%rax
  0x00007f7570483a00: jmpq   *%r11
  0x00007f7570483a03: mov    0x8(%rsi),%ebx
  0x00007f7570483a06: shl    $0x3,%rbx
  0x00007f7570483a0a: cmp    0x10(%rax),%rbx
  0x00007f7570483a0e: mov    0x8(%rax),%rbx
  0x00007f7570483a12: je     0x00007f7570483a1d
  0x00007f7570483a18: jmpq   0x00007f757046ec40
  0x00007f7570483a1d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483a25: je     0x00007f7570483b20
  0x00007f7570483a2b: jmpq   0x00007f757046ec40
  0x00007f7570483a30: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483a38: je     0x00007f7570483b20
  0x00007f7570483a3e: mov    %rsp,%r13
  0x00007f7570483a41: mov    (%rsp),%rax
  0x00007f7570483a45: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483a49: pushfq 
  0x00007f7570483a4a: sub    $0x8,%rsp
  0x00007f7570483a4e: mov    %rsp,-0x28(%rsp)
  0x00007f7570483a53: sub    $0x80,%rsp
  0x00007f7570483a5a: mov    %rax,0x78(%rsp)
  0x00007f7570483a5f: mov    %rcx,0x70(%rsp)
  0x00007f7570483a64: mov    %rdx,0x68(%rsp)
  0x00007f7570483a69: mov    %rbx,0x60(%rsp)
  0x00007f7570483a6e: mov    %rbp,0x50(%rsp)
  0x00007f7570483a73: mov    %rsi,0x48(%rsp)
  0x00007f7570483a78: mov    %rdi,0x40(%rsp)
  0x00007f7570483a7d: mov    %r8,0x38(%rsp)
  0x00007f7570483a82: mov    %r9,0x30(%rsp)
  0x00007f7570483a87: mov    %r10,0x28(%rsp)
  0x00007f7570483a8c: mov    %r11,0x20(%rsp)
  0x00007f7570483a91: mov    %r12,0x18(%rsp)
  0x00007f7570483a96: mov    %r13,0x10(%rsp)
  0x00007f7570483a9b: mov    %r14,0x8(%rsp)
  0x00007f7570483aa0: mov    %r15,(%rsp)
  0x00007f7570483aa4: sub    $0x200,%rsp
  0x00007f7570483aab: fxsave64 (%rsp)
  0x00007f7570483ab0: mov    %rbx,%rdi
  0x00007f7570483ab3: mov    %rax,%rsi
  0x00007f7570483ab6: callq  0x00007f7585522bca
  0x00007f7570483abb: fxrstor64 (%rsp)
  0x00007f7570483ac0: add    $0x200,%rsp
  0x00007f7570483ac7: mov    (%rsp),%r15
  0x00007f7570483acb: mov    0x8(%rsp),%r14
  0x00007f7570483ad0: mov    0x10(%rsp),%r13
  0x00007f7570483ad5: mov    0x18(%rsp),%r12
  0x00007f7570483ada: mov    0x20(%rsp),%r11
  0x00007f7570483adf: mov    0x28(%rsp),%r10
  0x00007f7570483ae4: mov    0x30(%rsp),%r9
  0x00007f7570483ae9: mov    0x38(%rsp),%r8
  0x00007f7570483aee: mov    0x40(%rsp),%rdi
  0x00007f7570483af3: mov    0x48(%rsp),%rsi
  0x00007f7570483af8: mov    0x50(%rsp),%rbp
  0x00007f7570483afd: mov    0x60(%rsp),%rbx
  0x00007f7570483b02: mov    0x68(%rsp),%rdx
  0x00007f7570483b07: mov    0x70(%rsp),%rcx
  0x00007f7570483b0c: mov    0x78(%rsp),%rax
  0x00007f7570483b11: add    $0x80,%rsp
  0x00007f7570483b18: add    $0x8,%rsp
  0x00007f7570483b1c: popfq  
  0x00007f7570483b1d: mov    %r13,%rsp
  0x00007f7570483b20: pop    %rax
  0x00007f7570483b21: mov    %rsp,%r13
  0x00007f7570483b24: sub    $0x10,%rsp
  0x00007f7570483b28: mov    %rax,(%rsp)
  0x00007f7570483b2c: mov    0x40(%rbx),%rcx
  0x00007f7570483b30: jmpq   *%rcx

AHE@0x00007f75800c2960: 0xb0000000 i2c: 0x00007f7570483be0 c2i: 0x00007f7570483cf4 c2iUV: 0x00007f7570483cc7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f7570483cf4
  0x00007f7570483be0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570483be4: movabs $0x7f757036e3e0,%r11
  0x00007f7570483bee: cmp    %r11,%rax
  0x00007f7570483bf1: jbe    0x00007f7570483c0a
  0x00007f7570483bf7: movabs $0x7f757046e3e0,%r11
  0x00007f7570483c01: cmp    %r11,%rax
  0x00007f7570483c04: jb     0x00007f7570483ca7
  0x00007f7570483c0a: movabs $0x7f7570369420,%r11
  0x00007f7570483c14: cmp    %r11,%rax
  0x00007f7570483c17: jbe    0x00007f7570483c30
  0x00007f7570483c1d: movabs $0x7f757036de58,%r11
  0x00007f7570483c27: cmp    %r11,%rax
  0x00007f7570483c2a: jb     0x00007f7570483ca7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570483c30: mov    %rsp,-0x28(%rsp)
  0x00007f7570483c35: sub    $0x80,%rsp
  0x00007f7570483c3c: mov    %rax,0x78(%rsp)
  0x00007f7570483c41: mov    %rcx,0x70(%rsp)
  0x00007f7570483c46: mov    %rdx,0x68(%rsp)
  0x00007f7570483c4b: mov    %rbx,0x60(%rsp)
  0x00007f7570483c50: mov    %rbp,0x50(%rsp)
  0x00007f7570483c55: mov    %rsi,0x48(%rsp)
  0x00007f7570483c5a: mov    %rdi,0x40(%rsp)
  0x00007f7570483c5f: mov    %r8,0x38(%rsp)
  0x00007f7570483c64: mov    %r9,0x30(%rsp)
  0x00007f7570483c69: mov    %r10,0x28(%rsp)
  0x00007f7570483c6e: mov    %r11,0x20(%rsp)
  0x00007f7570483c73: mov    %r12,0x18(%rsp)
  0x00007f7570483c78: mov    %r13,0x10(%rsp)
  0x00007f7570483c7d: mov    %r14,0x8(%rsp)
  0x00007f7570483c82: mov    %r15,(%rsp)
  0x00007f7570483c86: movabs $0x7f758592f470,%rdi
  0x00007f7570483c90: movabs $0x7f7570483c30,%rsi
  0x00007f7570483c9a: mov    %rsp,%rdx
  0x00007f7570483c9d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483ca1: callq  0x00007f75853729fa
  0x00007f7570483ca6: hlt    
  ;; } verify_i2ce 
  0x00007f7570483ca7: mov    %rsp,%r11
  0x00007f7570483caa: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483cae: push   %rax
  0x00007f7570483caf: mov    %r11,%rax
  0x00007f7570483cb2: mov    0x50(%rbx),%r11
  0x00007f7570483cb6: mov    0x8(%rax),%rsi
  0x00007f7570483cba: mov    %rbx,0x258(%r15)
  0x00007f7570483cc1: mov    %rbx,%rax
  0x00007f7570483cc4: jmpq   *%r11
  0x00007f7570483cc7: mov    0x8(%rsi),%ebx
  0x00007f7570483cca: shl    $0x3,%rbx
  0x00007f7570483cce: cmp    0x10(%rax),%rbx
  0x00007f7570483cd2: mov    0x8(%rax),%rbx
  0x00007f7570483cd6: je     0x00007f7570483ce1
  0x00007f7570483cdc: jmpq   0x00007f757046ec40
  0x00007f7570483ce1: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483ce9: je     0x00007f7570483de4
  0x00007f7570483cef: jmpq   0x00007f757046ec40
  0x00007f7570483cf4: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483cfc: je     0x00007f7570483de4
  0x00007f7570483d02: mov    %rsp,%r13
  0x00007f7570483d05: mov    (%rsp),%rax
  0x00007f7570483d09: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483d0d: pushfq 
  0x00007f7570483d0e: sub    $0x8,%rsp
  0x00007f7570483d12: mov    %rsp,-0x28(%rsp)
  0x00007f7570483d17: sub    $0x80,%rsp
  0x00007f7570483d1e: mov    %rax,0x78(%rsp)
  0x00007f7570483d23: mov    %rcx,0x70(%rsp)
  0x00007f7570483d28: mov    %rdx,0x68(%rsp)
  0x00007f7570483d2d: mov    %rbx,0x60(%rsp)
  0x00007f7570483d32: mov    %rbp,0x50(%rsp)
  0x00007f7570483d37: mov    %rsi,0x48(%rsp)
  0x00007f7570483d3c: mov    %rdi,0x40(%rsp)
  0x00007f7570483d41: mov    %r8,0x38(%rsp)
  0x00007f7570483d46: mov    %r9,0x30(%rsp)
  0x00007f7570483d4b: mov    %r10,0x28(%rsp)
  0x00007f7570483d50: mov    %r11,0x20(%rsp)
  0x00007f7570483d55: mov    %r12,0x18(%rsp)
  0x00007f7570483d5a: mov    %r13,0x10(%rsp)
  0x00007f7570483d5f: mov    %r14,0x8(%rsp)
  0x00007f7570483d64: mov    %r15,(%rsp)
  0x00007f7570483d68: sub    $0x200,%rsp
  0x00007f7570483d6f: fxsave64 (%rsp)
  0x00007f7570483d74: mov    %rbx,%rdi
  0x00007f7570483d77: mov    %rax,%rsi
  0x00007f7570483d7a: callq  0x00007f7585522bca
  0x00007f7570483d7f: fxrstor64 (%rsp)
  0x00007f7570483d84: add    $0x200,%rsp
  0x00007f7570483d8b: mov    (%rsp),%r15
  0x00007f7570483d8f: mov    0x8(%rsp),%r14
  0x00007f7570483d94: mov    0x10(%rsp),%r13
  0x00007f7570483d99: mov    0x18(%rsp),%r12
  0x00007f7570483d9e: mov    0x20(%rsp),%r11
  0x00007f7570483da3: mov    0x28(%rsp),%r10
  0x00007f7570483da8: mov    0x30(%rsp),%r9
  0x00007f7570483dad: mov    0x38(%rsp),%r8
  0x00007f7570483db2: mov    0x40(%rsp),%rdi
  0x00007f7570483db7: mov    0x48(%rsp),%rsi
  0x00007f7570483dbc: mov    0x50(%rsp),%rbp
  0x00007f7570483dc1: mov    0x60(%rsp),%rbx
  0x00007f7570483dc6: mov    0x68(%rsp),%rdx
  0x00007f7570483dcb: mov    0x70(%rsp),%rcx
  0x00007f7570483dd0: mov    0x78(%rsp),%rax
  0x00007f7570483dd5: add    $0x80,%rsp
  0x00007f7570483ddc: add    $0x8,%rsp
  0x00007f7570483de0: popfq  
  0x00007f7570483de1: mov    %r13,%rsp
  0x00007f7570483de4: pop    %rax
  0x00007f7570483de5: mov    %rsp,%r13
  0x00007f7570483de8: sub    $0x10,%rsp
  0x00007f7570483dec: mov    %rax,(%rsp)
  0x00007f7570483df0: mov    %rsi,0x8(%rsp)
  0x00007f7570483df5: mov    0x40(%rbx),%rcx
  0x00007f7570483df9: jmpq   *%rcx

AHE@0x00007f75800c29a8: 0xb0000000 i2c: 0x00007f7570483ea0 c2i: 0x00007f7570483fb4 c2iUV: 0x00007f7570483f87
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f7570483fb4
  0x00007f7570483ea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570483ea4: movabs $0x7f757036e3e0,%r11
  0x00007f7570483eae: cmp    %r11,%rax
  0x00007f7570483eb1: jbe    0x00007f7570483eca
  0x00007f7570483eb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570483ec1: cmp    %r11,%rax
  0x00007f7570483ec4: jb     0x00007f7570483f67
  0x00007f7570483eca: movabs $0x7f7570369420,%r11
  0x00007f7570483ed4: cmp    %r11,%rax
  0x00007f7570483ed7: jbe    0x00007f7570483ef0
  0x00007f7570483edd: movabs $0x7f757036de58,%r11
  0x00007f7570483ee7: cmp    %r11,%rax
  0x00007f7570483eea: jb     0x00007f7570483f67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570483ef0: mov    %rsp,-0x28(%rsp)
  0x00007f7570483ef5: sub    $0x80,%rsp
  0x00007f7570483efc: mov    %rax,0x78(%rsp)
  0x00007f7570483f01: mov    %rcx,0x70(%rsp)
  0x00007f7570483f06: mov    %rdx,0x68(%rsp)
  0x00007f7570483f0b: mov    %rbx,0x60(%rsp)
  0x00007f7570483f10: mov    %rbp,0x50(%rsp)
  0x00007f7570483f15: mov    %rsi,0x48(%rsp)
  0x00007f7570483f1a: mov    %rdi,0x40(%rsp)
  0x00007f7570483f1f: mov    %r8,0x38(%rsp)
  0x00007f7570483f24: mov    %r9,0x30(%rsp)
  0x00007f7570483f29: mov    %r10,0x28(%rsp)
  0x00007f7570483f2e: mov    %r11,0x20(%rsp)
  0x00007f7570483f33: mov    %r12,0x18(%rsp)
  0x00007f7570483f38: mov    %r13,0x10(%rsp)
  0x00007f7570483f3d: mov    %r14,0x8(%rsp)
  0x00007f7570483f42: mov    %r15,(%rsp)
  0x00007f7570483f46: movabs $0x7f758592f470,%rdi
  0x00007f7570483f50: movabs $0x7f7570483ef0,%rsi
  0x00007f7570483f5a: mov    %rsp,%rdx
  0x00007f7570483f5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483f61: callq  0x00007f75853729fa
  0x00007f7570483f66: hlt    
  ;; } verify_i2ce 
  0x00007f7570483f67: mov    %rsp,%r11
  0x00007f7570483f6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483f6e: push   %rax
  0x00007f7570483f6f: mov    %r11,%rax
  0x00007f7570483f72: mov    0x50(%rbx),%r11
  0x00007f7570483f76: mov    0x8(%rax),%rsi
  0x00007f7570483f7a: mov    %rbx,0x258(%r15)
  0x00007f7570483f81: mov    %rbx,%rax
  0x00007f7570483f84: jmpq   *%r11
  0x00007f7570483f87: mov    0x8(%rsi),%ebx
  0x00007f7570483f8a: shl    $0x3,%rbx
  0x00007f7570483f8e: cmp    0x10(%rax),%rbx
  0x00007f7570483f92: mov    0x8(%rax),%rbx
  0x00007f7570483f96: je     0x00007f7570483fa1
  0x00007f7570483f9c: jmpq   0x00007f757046ec40
  0x00007f7570483fa1: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483fa9: je     0x00007f75704840a4
  0x00007f7570483faf: jmpq   0x00007f757046ec40
  0x00007f7570483fb4: cmpq   $0x0,0x58(%rbx)
  0x00007f7570483fbc: je     0x00007f75704840a4
  0x00007f7570483fc2: mov    %rsp,%r13
  0x00007f7570483fc5: mov    (%rsp),%rax
  0x00007f7570483fc9: and    $0xfffffffffffffff0,%rsp
  0x00007f7570483fcd: pushfq 
  0x00007f7570483fce: sub    $0x8,%rsp
  0x00007f7570483fd2: mov    %rsp,-0x28(%rsp)
  0x00007f7570483fd7: sub    $0x80,%rsp
  0x00007f7570483fde: mov    %rax,0x78(%rsp)
  0x00007f7570483fe3: mov    %rcx,0x70(%rsp)
  0x00007f7570483fe8: mov    %rdx,0x68(%rsp)
  0x00007f7570483fed: mov    %rbx,0x60(%rsp)
  0x00007f7570483ff2: mov    %rbp,0x50(%rsp)
  0x00007f7570483ff7: mov    %rsi,0x48(%rsp)
  0x00007f7570483ffc: mov    %rdi,0x40(%rsp)
  0x00007f7570484001: mov    %r8,0x38(%rsp)
  0x00007f7570484006: mov    %r9,0x30(%rsp)
  0x00007f757048400b: mov    %r10,0x28(%rsp)
  0x00007f7570484010: mov    %r11,0x20(%rsp)
  0x00007f7570484015: mov    %r12,0x18(%rsp)
  0x00007f757048401a: mov    %r13,0x10(%rsp)
  0x00007f757048401f: mov    %r14,0x8(%rsp)
  0x00007f7570484024: mov    %r15,(%rsp)
  0x00007f7570484028: sub    $0x200,%rsp
  0x00007f757048402f: fxsave64 (%rsp)
  0x00007f7570484034: mov    %rbx,%rdi
  0x00007f7570484037: mov    %rax,%rsi
  0x00007f757048403a: callq  0x00007f7585522bca
  0x00007f757048403f: fxrstor64 (%rsp)
  0x00007f7570484044: add    $0x200,%rsp
  0x00007f757048404b: mov    (%rsp),%r15
  0x00007f757048404f: mov    0x8(%rsp),%r14
  0x00007f7570484054: mov    0x10(%rsp),%r13
  0x00007f7570484059: mov    0x18(%rsp),%r12
  0x00007f757048405e: mov    0x20(%rsp),%r11
  0x00007f7570484063: mov    0x28(%rsp),%r10
  0x00007f7570484068: mov    0x30(%rsp),%r9
  0x00007f757048406d: mov    0x38(%rsp),%r8
  0x00007f7570484072: mov    0x40(%rsp),%rdi
  0x00007f7570484077: mov    0x48(%rsp),%rsi
  0x00007f757048407c: mov    0x50(%rsp),%rbp
  0x00007f7570484081: mov    0x60(%rsp),%rbx
  0x00007f7570484086: mov    0x68(%rsp),%rdx
  0x00007f757048408b: mov    0x70(%rsp),%rcx
  0x00007f7570484090: mov    0x78(%rsp),%rax
  0x00007f7570484095: add    $0x80,%rsp
  0x00007f757048409c: add    $0x8,%rsp
  0x00007f75704840a0: popfq  
  0x00007f75704840a1: mov    %r13,%rsp
  0x00007f75704840a4: pop    %rax
  0x00007f75704840a5: mov    %rsp,%r13
  0x00007f75704840a8: sub    $0x10,%rsp
  0x00007f75704840ac: mov    %rax,(%rsp)
  0x00007f75704840b0: mov    %rsi,0x8(%rsp)
  0x00007f75704840b5: mov    0x40(%rbx),%rcx
  0x00007f75704840b9: jmpq   *%rcx

AHE@0x00007f75800c29f0: 0x i2c: 0x00007f7570484160 c2i: 0x00007f7570484270 c2iUV: 0x00007f7570484243
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570484270
  0x00007f7570484160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570484164: movabs $0x7f757036e3e0,%r11
  0x00007f757048416e: cmp    %r11,%rax
  0x00007f7570484171: jbe    0x00007f757048418a
  0x00007f7570484177: movabs $0x7f757046e3e0,%r11
  0x00007f7570484181: cmp    %r11,%rax
  0x00007f7570484184: jb     0x00007f7570484227
  0x00007f757048418a: movabs $0x7f7570369420,%r11
  0x00007f7570484194: cmp    %r11,%rax
  0x00007f7570484197: jbe    0x00007f75704841b0
  0x00007f757048419d: movabs $0x7f757036de58,%r11
  0x00007f75704841a7: cmp    %r11,%rax
  0x00007f75704841aa: jb     0x00007f7570484227
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704841b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704841b5: sub    $0x80,%rsp
  0x00007f75704841bc: mov    %rax,0x78(%rsp)
  0x00007f75704841c1: mov    %rcx,0x70(%rsp)
  0x00007f75704841c6: mov    %rdx,0x68(%rsp)
  0x00007f75704841cb: mov    %rbx,0x60(%rsp)
  0x00007f75704841d0: mov    %rbp,0x50(%rsp)
  0x00007f75704841d5: mov    %rsi,0x48(%rsp)
  0x00007f75704841da: mov    %rdi,0x40(%rsp)
  0x00007f75704841df: mov    %r8,0x38(%rsp)
  0x00007f75704841e4: mov    %r9,0x30(%rsp)
  0x00007f75704841e9: mov    %r10,0x28(%rsp)
  0x00007f75704841ee: mov    %r11,0x20(%rsp)
  0x00007f75704841f3: mov    %r12,0x18(%rsp)
  0x00007f75704841f8: mov    %r13,0x10(%rsp)
  0x00007f75704841fd: mov    %r14,0x8(%rsp)
  0x00007f7570484202: mov    %r15,(%rsp)
  0x00007f7570484206: movabs $0x7f758592f470,%rdi
  0x00007f7570484210: movabs $0x7f75704841b0,%rsi
  0x00007f757048421a: mov    %rsp,%rdx
  0x00007f757048421d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484221: callq  0x00007f75853729fa
  0x00007f7570484226: hlt    
  ;; } verify_i2ce 
  0x00007f7570484227: mov    %rsp,%r11
  0x00007f757048422a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048422e: push   %rax
  0x00007f757048422f: mov    %r11,%rax
  0x00007f7570484232: mov    0x50(%rbx),%r11
  0x00007f7570484236: mov    %rbx,0x258(%r15)
  0x00007f757048423d: mov    %rbx,%rax
  0x00007f7570484240: jmpq   *%r11
  0x00007f7570484243: mov    0x8(%rsi),%ebx
  0x00007f7570484246: shl    $0x3,%rbx
  0x00007f757048424a: cmp    0x10(%rax),%rbx
  0x00007f757048424e: mov    0x8(%rax),%rbx
  0x00007f7570484252: je     0x00007f757048425d
  0x00007f7570484258: jmpq   0x00007f757046ec40
  0x00007f757048425d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484265: je     0x00007f7570484360
  0x00007f757048426b: jmpq   0x00007f757046ec40
  0x00007f7570484270: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484278: je     0x00007f7570484360
  0x00007f757048427e: mov    %rsp,%r13
  0x00007f7570484281: mov    (%rsp),%rax
  0x00007f7570484285: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484289: pushfq 
  0x00007f757048428a: sub    $0x8,%rsp
  0x00007f757048428e: mov    %rsp,-0x28(%rsp)
  0x00007f7570484293: sub    $0x80,%rsp
  0x00007f757048429a: mov    %rax,0x78(%rsp)
  0x00007f757048429f: mov    %rcx,0x70(%rsp)
  0x00007f75704842a4: mov    %rdx,0x68(%rsp)
  0x00007f75704842a9: mov    %rbx,0x60(%rsp)
  0x00007f75704842ae: mov    %rbp,0x50(%rsp)
  0x00007f75704842b3: mov    %rsi,0x48(%rsp)
  0x00007f75704842b8: mov    %rdi,0x40(%rsp)
  0x00007f75704842bd: mov    %r8,0x38(%rsp)
  0x00007f75704842c2: mov    %r9,0x30(%rsp)
  0x00007f75704842c7: mov    %r10,0x28(%rsp)
  0x00007f75704842cc: mov    %r11,0x20(%rsp)
  0x00007f75704842d1: mov    %r12,0x18(%rsp)
  0x00007f75704842d6: mov    %r13,0x10(%rsp)
  0x00007f75704842db: mov    %r14,0x8(%rsp)
  0x00007f75704842e0: mov    %r15,(%rsp)
  0x00007f75704842e4: sub    $0x200,%rsp
  0x00007f75704842eb: fxsave64 (%rsp)
  0x00007f75704842f0: mov    %rbx,%rdi
  0x00007f75704842f3: mov    %rax,%rsi
  0x00007f75704842f6: callq  0x00007f7585522bca
  0x00007f75704842fb: fxrstor64 (%rsp)
  0x00007f7570484300: add    $0x200,%rsp
  0x00007f7570484307: mov    (%rsp),%r15
  0x00007f757048430b: mov    0x8(%rsp),%r14
  0x00007f7570484310: mov    0x10(%rsp),%r13
  0x00007f7570484315: mov    0x18(%rsp),%r12
  0x00007f757048431a: mov    0x20(%rsp),%r11
  0x00007f757048431f: mov    0x28(%rsp),%r10
  0x00007f7570484324: mov    0x30(%rsp),%r9
  0x00007f7570484329: mov    0x38(%rsp),%r8
  0x00007f757048432e: mov    0x40(%rsp),%rdi
  0x00007f7570484333: mov    0x48(%rsp),%rsi
  0x00007f7570484338: mov    0x50(%rsp),%rbp
  0x00007f757048433d: mov    0x60(%rsp),%rbx
  0x00007f7570484342: mov    0x68(%rsp),%rdx
  0x00007f7570484347: mov    0x70(%rsp),%rcx
  0x00007f757048434c: mov    0x78(%rsp),%rax
  0x00007f7570484351: add    $0x80,%rsp
  0x00007f7570484358: add    $0x8,%rsp
  0x00007f757048435c: popfq  
  0x00007f757048435d: mov    %r13,%rsp
  0x00007f7570484360: pop    %rax
  0x00007f7570484361: mov    %rsp,%r13
  0x00007f7570484364: sub    $0x10,%rsp
  0x00007f7570484368: mov    %rax,(%rsp)
  0x00007f757048436c: mov    0x40(%rbx),%rcx
  0x00007f7570484370: jmpq   *%rcx

AHE@0x00007f75800c2a38: 0xbb000000 i2c: 0x00007f7570484420 c2i: 0x00007f7570484538 c2iUV: 0x00007f757048450b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570484538
  0x00007f7570484420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570484424: movabs $0x7f757036e3e0,%r11
  0x00007f757048442e: cmp    %r11,%rax
  0x00007f7570484431: jbe    0x00007f757048444a
  0x00007f7570484437: movabs $0x7f757046e3e0,%r11
  0x00007f7570484441: cmp    %r11,%rax
  0x00007f7570484444: jb     0x00007f75704844e7
  0x00007f757048444a: movabs $0x7f7570369420,%r11
  0x00007f7570484454: cmp    %r11,%rax
  0x00007f7570484457: jbe    0x00007f7570484470
  0x00007f757048445d: movabs $0x7f757036de58,%r11
  0x00007f7570484467: cmp    %r11,%rax
  0x00007f757048446a: jb     0x00007f75704844e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570484470: mov    %rsp,-0x28(%rsp)
  0x00007f7570484475: sub    $0x80,%rsp
  0x00007f757048447c: mov    %rax,0x78(%rsp)
  0x00007f7570484481: mov    %rcx,0x70(%rsp)
  0x00007f7570484486: mov    %rdx,0x68(%rsp)
  0x00007f757048448b: mov    %rbx,0x60(%rsp)
  0x00007f7570484490: mov    %rbp,0x50(%rsp)
  0x00007f7570484495: mov    %rsi,0x48(%rsp)
  0x00007f757048449a: mov    %rdi,0x40(%rsp)
  0x00007f757048449f: mov    %r8,0x38(%rsp)
  0x00007f75704844a4: mov    %r9,0x30(%rsp)
  0x00007f75704844a9: mov    %r10,0x28(%rsp)
  0x00007f75704844ae: mov    %r11,0x20(%rsp)
  0x00007f75704844b3: mov    %r12,0x18(%rsp)
  0x00007f75704844b8: mov    %r13,0x10(%rsp)
  0x00007f75704844bd: mov    %r14,0x8(%rsp)
  0x00007f75704844c2: mov    %r15,(%rsp)
  0x00007f75704844c6: movabs $0x7f758592f470,%rdi
  0x00007f75704844d0: movabs $0x7f7570484470,%rsi
  0x00007f75704844da: mov    %rsp,%rdx
  0x00007f75704844dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704844e1: callq  0x00007f75853729fa
  0x00007f75704844e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704844e7: mov    %rsp,%r11
  0x00007f75704844ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704844ee: push   %rax
  0x00007f75704844ef: mov    %r11,%rax
  0x00007f75704844f2: mov    0x50(%rbx),%r11
  0x00007f75704844f6: mov    0x10(%rax),%rsi
  0x00007f75704844fa: mov    0x8(%rax),%rdx
  0x00007f75704844fe: mov    %rbx,0x258(%r15)
  0x00007f7570484505: mov    %rbx,%rax
  0x00007f7570484508: jmpq   *%r11
  0x00007f757048450b: mov    0x8(%rsi),%ebx
  0x00007f757048450e: shl    $0x3,%rbx
  0x00007f7570484512: cmp    0x10(%rax),%rbx
  0x00007f7570484516: mov    0x8(%rax),%rbx
  0x00007f757048451a: je     0x00007f7570484525
  0x00007f7570484520: jmpq   0x00007f757046ec40
  0x00007f7570484525: cmpq   $0x0,0x58(%rbx)
  0x00007f757048452d: je     0x00007f7570484628
  0x00007f7570484533: jmpq   0x00007f757046ec40
  0x00007f7570484538: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484540: je     0x00007f7570484628
  0x00007f7570484546: mov    %rsp,%r13
  0x00007f7570484549: mov    (%rsp),%rax
  0x00007f757048454d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484551: pushfq 
  0x00007f7570484552: sub    $0x8,%rsp
  0x00007f7570484556: mov    %rsp,-0x28(%rsp)
  0x00007f757048455b: sub    $0x80,%rsp
  0x00007f7570484562: mov    %rax,0x78(%rsp)
  0x00007f7570484567: mov    %rcx,0x70(%rsp)
  0x00007f757048456c: mov    %rdx,0x68(%rsp)
  0x00007f7570484571: mov    %rbx,0x60(%rsp)
  0x00007f7570484576: mov    %rbp,0x50(%rsp)
  0x00007f757048457b: mov    %rsi,0x48(%rsp)
  0x00007f7570484580: mov    %rdi,0x40(%rsp)
  0x00007f7570484585: mov    %r8,0x38(%rsp)
  0x00007f757048458a: mov    %r9,0x30(%rsp)
  0x00007f757048458f: mov    %r10,0x28(%rsp)
  0x00007f7570484594: mov    %r11,0x20(%rsp)
  0x00007f7570484599: mov    %r12,0x18(%rsp)
  0x00007f757048459e: mov    %r13,0x10(%rsp)
  0x00007f75704845a3: mov    %r14,0x8(%rsp)
  0x00007f75704845a8: mov    %r15,(%rsp)
  0x00007f75704845ac: sub    $0x200,%rsp
  0x00007f75704845b3: fxsave64 (%rsp)
  0x00007f75704845b8: mov    %rbx,%rdi
  0x00007f75704845bb: mov    %rax,%rsi
  0x00007f75704845be: callq  0x00007f7585522bca
  0x00007f75704845c3: fxrstor64 (%rsp)
  0x00007f75704845c8: add    $0x200,%rsp
  0x00007f75704845cf: mov    (%rsp),%r15
  0x00007f75704845d3: mov    0x8(%rsp),%r14
  0x00007f75704845d8: mov    0x10(%rsp),%r13
  0x00007f75704845dd: mov    0x18(%rsp),%r12
  0x00007f75704845e2: mov    0x20(%rsp),%r11
  0x00007f75704845e7: mov    0x28(%rsp),%r10
  0x00007f75704845ec: mov    0x30(%rsp),%r9
  0x00007f75704845f1: mov    0x38(%rsp),%r8
  0x00007f75704845f6: mov    0x40(%rsp),%rdi
  0x00007f75704845fb: mov    0x48(%rsp),%rsi
  0x00007f7570484600: mov    0x50(%rsp),%rbp
  0x00007f7570484605: mov    0x60(%rsp),%rbx
  0x00007f757048460a: mov    0x68(%rsp),%rdx
  0x00007f757048460f: mov    0x70(%rsp),%rcx
  0x00007f7570484614: mov    0x78(%rsp),%rax
  0x00007f7570484619: add    $0x80,%rsp
  0x00007f7570484620: add    $0x8,%rsp
  0x00007f7570484624: popfq  
  0x00007f7570484625: mov    %r13,%rsp
  0x00007f7570484628: pop    %rax
  0x00007f7570484629: mov    %rsp,%r13
  0x00007f757048462c: sub    $0x20,%rsp
  0x00007f7570484630: mov    %rax,(%rsp)
  0x00007f7570484634: mov    %rsi,0x10(%rsp)
  0x00007f7570484639: mov    %rdx,0x8(%rsp)
  0x00007f757048463e: mov    0x40(%rbx),%rcx
  0x00007f7570484642: jmpq   *%rcx

AHE@0x00007f75800c2a80: 0xbba00000 i2c: 0x00007f7570484720 c2i: 0x00007f757048483b c2iUV: 0x00007f757048480e
i2c argument handler #0 for: receiver ([DI)I (555 bytes generated)
c2i argument handler starts at 0x7f757048483b
  0x00007f7570484720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570484724: movabs $0x7f757036e3e0,%r11
  0x00007f757048472e: cmp    %r11,%rax
  0x00007f7570484731: jbe    0x00007f757048474a
  0x00007f7570484737: movabs $0x7f757046e3e0,%r11
  0x00007f7570484741: cmp    %r11,%rax
  0x00007f7570484744: jb     0x00007f75704847e7
  0x00007f757048474a: movabs $0x7f7570369420,%r11
  0x00007f7570484754: cmp    %r11,%rax
  0x00007f7570484757: jbe    0x00007f7570484770
  0x00007f757048475d: movabs $0x7f757036de58,%r11
  0x00007f7570484767: cmp    %r11,%rax
  0x00007f757048476a: jb     0x00007f75704847e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570484770: mov    %rsp,-0x28(%rsp)
  0x00007f7570484775: sub    $0x80,%rsp
  0x00007f757048477c: mov    %rax,0x78(%rsp)
  0x00007f7570484781: mov    %rcx,0x70(%rsp)
  0x00007f7570484786: mov    %rdx,0x68(%rsp)
  0x00007f757048478b: mov    %rbx,0x60(%rsp)
  0x00007f7570484790: mov    %rbp,0x50(%rsp)
  0x00007f7570484795: mov    %rsi,0x48(%rsp)
  0x00007f757048479a: mov    %rdi,0x40(%rsp)
  0x00007f757048479f: mov    %r8,0x38(%rsp)
  0x00007f75704847a4: mov    %r9,0x30(%rsp)
  0x00007f75704847a9: mov    %r10,0x28(%rsp)
  0x00007f75704847ae: mov    %r11,0x20(%rsp)
  0x00007f75704847b3: mov    %r12,0x18(%rsp)
  0x00007f75704847b8: mov    %r13,0x10(%rsp)
  0x00007f75704847bd: mov    %r14,0x8(%rsp)
  0x00007f75704847c2: mov    %r15,(%rsp)
  0x00007f75704847c6: movabs $0x7f758592f470,%rdi
  0x00007f75704847d0: movabs $0x7f7570484770,%rsi
  0x00007f75704847da: mov    %rsp,%rdx
  0x00007f75704847dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704847e1: callq  0x00007f75853729fa
  0x00007f75704847e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704847e7: mov    %rsp,%r11
  0x00007f75704847ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704847ee: push   %rax
  0x00007f75704847ef: mov    %r11,%rax
  0x00007f75704847f2: mov    0x50(%rbx),%r11
  0x00007f75704847f6: mov    0x18(%rax),%rsi
  0x00007f75704847fa: mov    0x10(%rax),%rdx
  0x00007f75704847fe: mov    0x8(%rax),%ecx
  0x00007f7570484801: mov    %rbx,0x258(%r15)
  0x00007f7570484808: mov    %rbx,%rax
  0x00007f757048480b: jmpq   *%r11
  0x00007f757048480e: mov    0x8(%rsi),%ebx
  0x00007f7570484811: shl    $0x3,%rbx
  0x00007f7570484815: cmp    0x10(%rax),%rbx
  0x00007f7570484819: mov    0x8(%rax),%rbx
  0x00007f757048481d: je     0x00007f7570484828
  0x00007f7570484823: jmpq   0x00007f757046ec40
  0x00007f7570484828: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484830: je     0x00007f757048492b
  0x00007f7570484836: jmpq   0x00007f757046ec40
  0x00007f757048483b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484843: je     0x00007f757048492b
  0x00007f7570484849: mov    %rsp,%r13
  0x00007f757048484c: mov    (%rsp),%rax
  0x00007f7570484850: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484854: pushfq 
  0x00007f7570484855: sub    $0x8,%rsp
  0x00007f7570484859: mov    %rsp,-0x28(%rsp)
  0x00007f757048485e: sub    $0x80,%rsp
  0x00007f7570484865: mov    %rax,0x78(%rsp)
  0x00007f757048486a: mov    %rcx,0x70(%rsp)
  0x00007f757048486f: mov    %rdx,0x68(%rsp)
  0x00007f7570484874: mov    %rbx,0x60(%rsp)
  0x00007f7570484879: mov    %rbp,0x50(%rsp)
  0x00007f757048487e: mov    %rsi,0x48(%rsp)
  0x00007f7570484883: mov    %rdi,0x40(%rsp)
  0x00007f7570484888: mov    %r8,0x38(%rsp)
  0x00007f757048488d: mov    %r9,0x30(%rsp)
  0x00007f7570484892: mov    %r10,0x28(%rsp)
  0x00007f7570484897: mov    %r11,0x20(%rsp)
  0x00007f757048489c: mov    %r12,0x18(%rsp)
  0x00007f75704848a1: mov    %r13,0x10(%rsp)
  0x00007f75704848a6: mov    %r14,0x8(%rsp)
  0x00007f75704848ab: mov    %r15,(%rsp)
  0x00007f75704848af: sub    $0x200,%rsp
  0x00007f75704848b6: fxsave64 (%rsp)
  0x00007f75704848bb: mov    %rbx,%rdi
  0x00007f75704848be: mov    %rax,%rsi
  0x00007f75704848c1: callq  0x00007f7585522bca
  0x00007f75704848c6: fxrstor64 (%rsp)
  0x00007f75704848cb: add    $0x200,%rsp
  0x00007f75704848d2: mov    (%rsp),%r15
  0x00007f75704848d6: mov    0x8(%rsp),%r14
  0x00007f75704848db: mov    0x10(%rsp),%r13
  0x00007f75704848e0: mov    0x18(%rsp),%r12
  0x00007f75704848e5: mov    0x20(%rsp),%r11
  0x00007f75704848ea: mov    0x28(%rsp),%r10
  0x00007f75704848ef: mov    0x30(%rsp),%r9
  0x00007f75704848f4: mov    0x38(%rsp),%r8
  0x00007f75704848f9: mov    0x40(%rsp),%rdi
  0x00007f75704848fe: mov    0x48(%rsp),%rsi
  0x00007f7570484903: mov    0x50(%rsp),%rbp
  0x00007f7570484908: mov    0x60(%rsp),%rbx
  0x00007f757048490d: mov    0x68(%rsp),%rdx
  0x00007f7570484912: mov    0x70(%rsp),%rcx
  0x00007f7570484917: mov    0x78(%rsp),%rax
  0x00007f757048491c: add    $0x80,%rsp
  0x00007f7570484923: add    $0x8,%rsp
  0x00007f7570484927: popfq  
  0x00007f7570484928: mov    %r13,%rsp
  0x00007f757048492b: pop    %rax
  0x00007f757048492c: mov    %rsp,%r13
  0x00007f757048492f: sub    $0x20,%rsp
  0x00007f7570484933: mov    %rax,(%rsp)
  0x00007f7570484937: mov    %rsi,0x18(%rsp)
  0x00007f757048493c: mov    %rdx,0x10(%rsp)
  0x00007f7570484941: mov    %ecx,0x8(%rsp)
  0x00007f7570484945: mov    0x40(%rbx),%rcx
  0x00007f7570484949: jmpq   *%rcx

AHE@0x00007f75800c2ac8: 0xbb000000 i2c: 0x00007f7570484a20 c2i: 0x00007f7570484b38 c2iUV: 0x00007f7570484b0b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)Z (548 bytes generated)
c2i argument handler starts at 0x7f7570484b38
  0x00007f7570484a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570484a24: movabs $0x7f757036e3e0,%r11
  0x00007f7570484a2e: cmp    %r11,%rax
  0x00007f7570484a31: jbe    0x00007f7570484a4a
  0x00007f7570484a37: movabs $0x7f757046e3e0,%r11
  0x00007f7570484a41: cmp    %r11,%rax
  0x00007f7570484a44: jb     0x00007f7570484ae7
  0x00007f7570484a4a: movabs $0x7f7570369420,%r11
  0x00007f7570484a54: cmp    %r11,%rax
  0x00007f7570484a57: jbe    0x00007f7570484a70
  0x00007f7570484a5d: movabs $0x7f757036de58,%r11
  0x00007f7570484a67: cmp    %r11,%rax
  0x00007f7570484a6a: jb     0x00007f7570484ae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570484a70: mov    %rsp,-0x28(%rsp)
  0x00007f7570484a75: sub    $0x80,%rsp
  0x00007f7570484a7c: mov    %rax,0x78(%rsp)
  0x00007f7570484a81: mov    %rcx,0x70(%rsp)
  0x00007f7570484a86: mov    %rdx,0x68(%rsp)
  0x00007f7570484a8b: mov    %rbx,0x60(%rsp)
  0x00007f7570484a90: mov    %rbp,0x50(%rsp)
  0x00007f7570484a95: mov    %rsi,0x48(%rsp)
  0x00007f7570484a9a: mov    %rdi,0x40(%rsp)
  0x00007f7570484a9f: mov    %r8,0x38(%rsp)
  0x00007f7570484aa4: mov    %r9,0x30(%rsp)
  0x00007f7570484aa9: mov    %r10,0x28(%rsp)
  0x00007f7570484aae: mov    %r11,0x20(%rsp)
  0x00007f7570484ab3: mov    %r12,0x18(%rsp)
  0x00007f7570484ab8: mov    %r13,0x10(%rsp)
  0x00007f7570484abd: mov    %r14,0x8(%rsp)
  0x00007f7570484ac2: mov    %r15,(%rsp)
  0x00007f7570484ac6: movabs $0x7f758592f470,%rdi
  0x00007f7570484ad0: movabs $0x7f7570484a70,%rsi
  0x00007f7570484ada: mov    %rsp,%rdx
  0x00007f7570484add: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484ae1: callq  0x00007f75853729fa
  0x00007f7570484ae6: hlt    
  ;; } verify_i2ce 
  0x00007f7570484ae7: mov    %rsp,%r11
  0x00007f7570484aea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484aee: push   %rax
  0x00007f7570484aef: mov    %r11,%rax
  0x00007f7570484af2: mov    0x50(%rbx),%r11
  0x00007f7570484af6: mov    0x10(%rax),%rsi
  0x00007f7570484afa: mov    0x8(%rax),%rdx
  0x00007f7570484afe: mov    %rbx,0x258(%r15)
  0x00007f7570484b05: mov    %rbx,%rax
  0x00007f7570484b08: jmpq   *%r11
  0x00007f7570484b0b: mov    0x8(%rsi),%ebx
  0x00007f7570484b0e: shl    $0x3,%rbx
  0x00007f7570484b12: cmp    0x10(%rax),%rbx
  0x00007f7570484b16: mov    0x8(%rax),%rbx
  0x00007f7570484b1a: je     0x00007f7570484b25
  0x00007f7570484b20: jmpq   0x00007f757046ec40
  0x00007f7570484b25: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484b2d: je     0x00007f7570484c28
  0x00007f7570484b33: jmpq   0x00007f757046ec40
  0x00007f7570484b38: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484b40: je     0x00007f7570484c28
  0x00007f7570484b46: mov    %rsp,%r13
  0x00007f7570484b49: mov    (%rsp),%rax
  0x00007f7570484b4d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484b51: pushfq 
  0x00007f7570484b52: sub    $0x8,%rsp
  0x00007f7570484b56: mov    %rsp,-0x28(%rsp)
  0x00007f7570484b5b: sub    $0x80,%rsp
  0x00007f7570484b62: mov    %rax,0x78(%rsp)
  0x00007f7570484b67: mov    %rcx,0x70(%rsp)
  0x00007f7570484b6c: mov    %rdx,0x68(%rsp)
  0x00007f7570484b71: mov    %rbx,0x60(%rsp)
  0x00007f7570484b76: mov    %rbp,0x50(%rsp)
  0x00007f7570484b7b: mov    %rsi,0x48(%rsp)
  0x00007f7570484b80: mov    %rdi,0x40(%rsp)
  0x00007f7570484b85: mov    %r8,0x38(%rsp)
  0x00007f7570484b8a: mov    %r9,0x30(%rsp)
  0x00007f7570484b8f: mov    %r10,0x28(%rsp)
  0x00007f7570484b94: mov    %r11,0x20(%rsp)
  0x00007f7570484b99: mov    %r12,0x18(%rsp)
  0x00007f7570484b9e: mov    %r13,0x10(%rsp)
  0x00007f7570484ba3: mov    %r14,0x8(%rsp)
  0x00007f7570484ba8: mov    %r15,(%rsp)
  0x00007f7570484bac: sub    $0x200,%rsp
  0x00007f7570484bb3: fxsave64 (%rsp)
  0x00007f7570484bb8: mov    %rbx,%rdi
  0x00007f7570484bbb: mov    %rax,%rsi
  0x00007f7570484bbe: callq  0x00007f7585522bca
  0x00007f7570484bc3: fxrstor64 (%rsp)
  0x00007f7570484bc8: add    $0x200,%rsp
  0x00007f7570484bcf: mov    (%rsp),%r15
  0x00007f7570484bd3: mov    0x8(%rsp),%r14
  0x00007f7570484bd8: mov    0x10(%rsp),%r13
  0x00007f7570484bdd: mov    0x18(%rsp),%r12
  0x00007f7570484be2: mov    0x20(%rsp),%r11
  0x00007f7570484be7: mov    0x28(%rsp),%r10
  0x00007f7570484bec: mov    0x30(%rsp),%r9
  0x00007f7570484bf1: mov    0x38(%rsp),%r8
  0x00007f7570484bf6: mov    0x40(%rsp),%rdi
  0x00007f7570484bfb: mov    0x48(%rsp),%rsi
  0x00007f7570484c00: mov    0x50(%rsp),%rbp
  0x00007f7570484c05: mov    0x60(%rsp),%rbx
  0x00007f7570484c0a: mov    0x68(%rsp),%rdx
  0x00007f7570484c0f: mov    0x70(%rsp),%rcx
  0x00007f7570484c14: mov    0x78(%rsp),%rax
  0x00007f7570484c19: add    $0x80,%rsp
  0x00007f7570484c20: add    $0x8,%rsp
  0x00007f7570484c24: popfq  
  0x00007f7570484c25: mov    %r13,%rsp
  0x00007f7570484c28: pop    %rax
  0x00007f7570484c29: mov    %rsp,%r13
  0x00007f7570484c2c: sub    $0x20,%rsp
  0x00007f7570484c30: mov    %rax,(%rsp)
  0x00007f7570484c34: mov    %rsi,0x10(%rsp)
  0x00007f7570484c39: mov    %rdx,0x8(%rsp)
  0x00007f7570484c3e: mov    0x40(%rbx),%rcx
  0x00007f7570484c42: jmpq   *%rcx

AHE@0x00007f75800c2b10: 0xbb000000 i2c: 0x00007f7570484d20 c2i: 0x00007f7570484e38 c2iUV: 0x00007f7570484e0b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570484e38
  0x00007f7570484d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570484d24: movabs $0x7f757036e3e0,%r11
  0x00007f7570484d2e: cmp    %r11,%rax
  0x00007f7570484d31: jbe    0x00007f7570484d4a
  0x00007f7570484d37: movabs $0x7f757046e3e0,%r11
  0x00007f7570484d41: cmp    %r11,%rax
  0x00007f7570484d44: jb     0x00007f7570484de7
  0x00007f7570484d4a: movabs $0x7f7570369420,%r11
  0x00007f7570484d54: cmp    %r11,%rax
  0x00007f7570484d57: jbe    0x00007f7570484d70
  0x00007f7570484d5d: movabs $0x7f757036de58,%r11
  0x00007f7570484d67: cmp    %r11,%rax
  0x00007f7570484d6a: jb     0x00007f7570484de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570484d70: mov    %rsp,-0x28(%rsp)
  0x00007f7570484d75: sub    $0x80,%rsp
  0x00007f7570484d7c: mov    %rax,0x78(%rsp)
  0x00007f7570484d81: mov    %rcx,0x70(%rsp)
  0x00007f7570484d86: mov    %rdx,0x68(%rsp)
  0x00007f7570484d8b: mov    %rbx,0x60(%rsp)
  0x00007f7570484d90: mov    %rbp,0x50(%rsp)
  0x00007f7570484d95: mov    %rsi,0x48(%rsp)
  0x00007f7570484d9a: mov    %rdi,0x40(%rsp)
  0x00007f7570484d9f: mov    %r8,0x38(%rsp)
  0x00007f7570484da4: mov    %r9,0x30(%rsp)
  0x00007f7570484da9: mov    %r10,0x28(%rsp)
  0x00007f7570484dae: mov    %r11,0x20(%rsp)
  0x00007f7570484db3: mov    %r12,0x18(%rsp)
  0x00007f7570484db8: mov    %r13,0x10(%rsp)
  0x00007f7570484dbd: mov    %r14,0x8(%rsp)
  0x00007f7570484dc2: mov    %r15,(%rsp)
  0x00007f7570484dc6: movabs $0x7f758592f470,%rdi
  0x00007f7570484dd0: movabs $0x7f7570484d70,%rsi
  0x00007f7570484dda: mov    %rsp,%rdx
  0x00007f7570484ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484de1: callq  0x00007f75853729fa
  0x00007f7570484de6: hlt    
  ;; } verify_i2ce 
  0x00007f7570484de7: mov    %rsp,%r11
  0x00007f7570484dea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484dee: push   %rax
  0x00007f7570484def: mov    %r11,%rax
  0x00007f7570484df2: mov    0x50(%rbx),%r11
  0x00007f7570484df6: mov    0x10(%rax),%rsi
  0x00007f7570484dfa: mov    0x8(%rax),%rdx
  0x00007f7570484dfe: mov    %rbx,0x258(%r15)
  0x00007f7570484e05: mov    %rbx,%rax
  0x00007f7570484e08: jmpq   *%r11
  0x00007f7570484e0b: mov    0x8(%rsi),%ebx
  0x00007f7570484e0e: shl    $0x3,%rbx
  0x00007f7570484e12: cmp    0x10(%rax),%rbx
  0x00007f7570484e16: mov    0x8(%rax),%rbx
  0x00007f7570484e1a: je     0x00007f7570484e25
  0x00007f7570484e20: jmpq   0x00007f757046ec40
  0x00007f7570484e25: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484e2d: je     0x00007f7570484f28
  0x00007f7570484e33: jmpq   0x00007f757046ec40
  0x00007f7570484e38: cmpq   $0x0,0x58(%rbx)
  0x00007f7570484e40: je     0x00007f7570484f28
  0x00007f7570484e46: mov    %rsp,%r13
  0x00007f7570484e49: mov    (%rsp),%rax
  0x00007f7570484e4d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570484e51: pushfq 
  0x00007f7570484e52: sub    $0x8,%rsp
  0x00007f7570484e56: mov    %rsp,-0x28(%rsp)
  0x00007f7570484e5b: sub    $0x80,%rsp
  0x00007f7570484e62: mov    %rax,0x78(%rsp)
  0x00007f7570484e67: mov    %rcx,0x70(%rsp)
  0x00007f7570484e6c: mov    %rdx,0x68(%rsp)
  0x00007f7570484e71: mov    %rbx,0x60(%rsp)
  0x00007f7570484e76: mov    %rbp,0x50(%rsp)
  0x00007f7570484e7b: mov    %rsi,0x48(%rsp)
  0x00007f7570484e80: mov    %rdi,0x40(%rsp)
  0x00007f7570484e85: mov    %r8,0x38(%rsp)
  0x00007f7570484e8a: mov    %r9,0x30(%rsp)
  0x00007f7570484e8f: mov    %r10,0x28(%rsp)
  0x00007f7570484e94: mov    %r11,0x20(%rsp)
  0x00007f7570484e99: mov    %r12,0x18(%rsp)
  0x00007f7570484e9e: mov    %r13,0x10(%rsp)
  0x00007f7570484ea3: mov    %r14,0x8(%rsp)
  0x00007f7570484ea8: mov    %r15,(%rsp)
  0x00007f7570484eac: sub    $0x200,%rsp
  0x00007f7570484eb3: fxsave64 (%rsp)
  0x00007f7570484eb8: mov    %rbx,%rdi
  0x00007f7570484ebb: mov    %rax,%rsi
  0x00007f7570484ebe: callq  0x00007f7585522bca
  0x00007f7570484ec3: fxrstor64 (%rsp)
  0x00007f7570484ec8: add    $0x200,%rsp
  0x00007f7570484ecf: mov    (%rsp),%r15
  0x00007f7570484ed3: mov    0x8(%rsp),%r14
  0x00007f7570484ed8: mov    0x10(%rsp),%r13
  0x00007f7570484edd: mov    0x18(%rsp),%r12
  0x00007f7570484ee2: mov    0x20(%rsp),%r11
  0x00007f7570484ee7: mov    0x28(%rsp),%r10
  0x00007f7570484eec: mov    0x30(%rsp),%r9
  0x00007f7570484ef1: mov    0x38(%rsp),%r8
  0x00007f7570484ef6: mov    0x40(%rsp),%rdi
  0x00007f7570484efb: mov    0x48(%rsp),%rsi
  0x00007f7570484f00: mov    0x50(%rsp),%rbp
  0x00007f7570484f05: mov    0x60(%rsp),%rbx
  0x00007f7570484f0a: mov    0x68(%rsp),%rdx
  0x00007f7570484f0f: mov    0x70(%rsp),%rcx
  0x00007f7570484f14: mov    0x78(%rsp),%rax
  0x00007f7570484f19: add    $0x80,%rsp
  0x00007f7570484f20: add    $0x8,%rsp
  0x00007f7570484f24: popfq  
  0x00007f7570484f25: mov    %r13,%rsp
  0x00007f7570484f28: pop    %rax
  0x00007f7570484f29: mov    %rsp,%r13
  0x00007f7570484f2c: sub    $0x20,%rsp
  0x00007f7570484f30: mov    %rax,(%rsp)
  0x00007f7570484f34: mov    %rsi,0x10(%rsp)
  0x00007f7570484f39: mov    %rdx,0x8(%rsp)
  0x00007f7570484f3e: mov    0x40(%rbx),%rcx
  0x00007f7570484f42: jmpq   *%rcx

AHE@0x00007f75800c2b58: 0xbb000000 i2c: 0x00007f7570485020 c2i: 0x00007f7570485138 c2iUV: 0x00007f757048510b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570485138
  0x00007f7570485020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570485024: movabs $0x7f757036e3e0,%r11
  0x00007f757048502e: cmp    %r11,%rax
  0x00007f7570485031: jbe    0x00007f757048504a
  0x00007f7570485037: movabs $0x7f757046e3e0,%r11
  0x00007f7570485041: cmp    %r11,%rax
  0x00007f7570485044: jb     0x00007f75704850e7
  0x00007f757048504a: movabs $0x7f7570369420,%r11
  0x00007f7570485054: cmp    %r11,%rax
  0x00007f7570485057: jbe    0x00007f7570485070
  0x00007f757048505d: movabs $0x7f757036de58,%r11
  0x00007f7570485067: cmp    %r11,%rax
  0x00007f757048506a: jb     0x00007f75704850e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570485070: mov    %rsp,-0x28(%rsp)
  0x00007f7570485075: sub    $0x80,%rsp
  0x00007f757048507c: mov    %rax,0x78(%rsp)
  0x00007f7570485081: mov    %rcx,0x70(%rsp)
  0x00007f7570485086: mov    %rdx,0x68(%rsp)
  0x00007f757048508b: mov    %rbx,0x60(%rsp)
  0x00007f7570485090: mov    %rbp,0x50(%rsp)
  0x00007f7570485095: mov    %rsi,0x48(%rsp)
  0x00007f757048509a: mov    %rdi,0x40(%rsp)
  0x00007f757048509f: mov    %r8,0x38(%rsp)
  0x00007f75704850a4: mov    %r9,0x30(%rsp)
  0x00007f75704850a9: mov    %r10,0x28(%rsp)
  0x00007f75704850ae: mov    %r11,0x20(%rsp)
  0x00007f75704850b3: mov    %r12,0x18(%rsp)
  0x00007f75704850b8: mov    %r13,0x10(%rsp)
  0x00007f75704850bd: mov    %r14,0x8(%rsp)
  0x00007f75704850c2: mov    %r15,(%rsp)
  0x00007f75704850c6: movabs $0x7f758592f470,%rdi
  0x00007f75704850d0: movabs $0x7f7570485070,%rsi
  0x00007f75704850da: mov    %rsp,%rdx
  0x00007f75704850dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704850e1: callq  0x00007f75853729fa
  0x00007f75704850e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704850e7: mov    %rsp,%r11
  0x00007f75704850ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704850ee: push   %rax
  0x00007f75704850ef: mov    %r11,%rax
  0x00007f75704850f2: mov    0x50(%rbx),%r11
  0x00007f75704850f6: mov    0x10(%rax),%rsi
  0x00007f75704850fa: mov    0x8(%rax),%rdx
  0x00007f75704850fe: mov    %rbx,0x258(%r15)
  0x00007f7570485105: mov    %rbx,%rax
  0x00007f7570485108: jmpq   *%r11
  0x00007f757048510b: mov    0x8(%rsi),%ebx
  0x00007f757048510e: shl    $0x3,%rbx
  0x00007f7570485112: cmp    0x10(%rax),%rbx
  0x00007f7570485116: mov    0x8(%rax),%rbx
  0x00007f757048511a: je     0x00007f7570485125
  0x00007f7570485120: jmpq   0x00007f757046ec40
  0x00007f7570485125: cmpq   $0x0,0x58(%rbx)
  0x00007f757048512d: je     0x00007f7570485228
  0x00007f7570485133: jmpq   0x00007f757046ec40
  0x00007f7570485138: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485140: je     0x00007f7570485228
  0x00007f7570485146: mov    %rsp,%r13
  0x00007f7570485149: mov    (%rsp),%rax
  0x00007f757048514d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485151: pushfq 
  0x00007f7570485152: sub    $0x8,%rsp
  0x00007f7570485156: mov    %rsp,-0x28(%rsp)
  0x00007f757048515b: sub    $0x80,%rsp
  0x00007f7570485162: mov    %rax,0x78(%rsp)
  0x00007f7570485167: mov    %rcx,0x70(%rsp)
  0x00007f757048516c: mov    %rdx,0x68(%rsp)
  0x00007f7570485171: mov    %rbx,0x60(%rsp)
  0x00007f7570485176: mov    %rbp,0x50(%rsp)
  0x00007f757048517b: mov    %rsi,0x48(%rsp)
  0x00007f7570485180: mov    %rdi,0x40(%rsp)
  0x00007f7570485185: mov    %r8,0x38(%rsp)
  0x00007f757048518a: mov    %r9,0x30(%rsp)
  0x00007f757048518f: mov    %r10,0x28(%rsp)
  0x00007f7570485194: mov    %r11,0x20(%rsp)
  0x00007f7570485199: mov    %r12,0x18(%rsp)
  0x00007f757048519e: mov    %r13,0x10(%rsp)
  0x00007f75704851a3: mov    %r14,0x8(%rsp)
  0x00007f75704851a8: mov    %r15,(%rsp)
  0x00007f75704851ac: sub    $0x200,%rsp
  0x00007f75704851b3: fxsave64 (%rsp)
  0x00007f75704851b8: mov    %rbx,%rdi
  0x00007f75704851bb: mov    %rax,%rsi
  0x00007f75704851be: callq  0x00007f7585522bca
  0x00007f75704851c3: fxrstor64 (%rsp)
  0x00007f75704851c8: add    $0x200,%rsp
  0x00007f75704851cf: mov    (%rsp),%r15
  0x00007f75704851d3: mov    0x8(%rsp),%r14
  0x00007f75704851d8: mov    0x10(%rsp),%r13
  0x00007f75704851dd: mov    0x18(%rsp),%r12
  0x00007f75704851e2: mov    0x20(%rsp),%r11
  0x00007f75704851e7: mov    0x28(%rsp),%r10
  0x00007f75704851ec: mov    0x30(%rsp),%r9
  0x00007f75704851f1: mov    0x38(%rsp),%r8
  0x00007f75704851f6: mov    0x40(%rsp),%rdi
  0x00007f75704851fb: mov    0x48(%rsp),%rsi
  0x00007f7570485200: mov    0x50(%rsp),%rbp
  0x00007f7570485205: mov    0x60(%rsp),%rbx
  0x00007f757048520a: mov    0x68(%rsp),%rdx
  0x00007f757048520f: mov    0x70(%rsp),%rcx
  0x00007f7570485214: mov    0x78(%rsp),%rax
  0x00007f7570485219: add    $0x80,%rsp
  0x00007f7570485220: add    $0x8,%rsp
  0x00007f7570485224: popfq  
  0x00007f7570485225: mov    %r13,%rsp
  0x00007f7570485228: pop    %rax
  0x00007f7570485229: mov    %rsp,%r13
  0x00007f757048522c: sub    $0x20,%rsp
  0x00007f7570485230: mov    %rax,(%rsp)
  0x00007f7570485234: mov    %rsi,0x10(%rsp)
  0x00007f7570485239: mov    %rdx,0x8(%rsp)
  0x00007f757048523e: mov    0x40(%rbx),%rcx
  0x00007f7570485242: jmpq   *%rcx

AHE@0x00007f75800c2ba0: 0xbbbb0000 i2c: 0x00007f7570485320 c2i: 0x00007f7570485440 c2iUV: 0x00007f7570485413
i2c argument handler #0 for: receiver (Ljava/lang/Class;[B[Ljava/lang/Object;)Ljava/lang/Class; (566 bytes generated)
c2i argument handler starts at 0x7f7570485440
  0x00007f7570485320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570485324: movabs $0x7f757036e3e0,%r11
  0x00007f757048532e: cmp    %r11,%rax
  0x00007f7570485331: jbe    0x00007f757048534a
  0x00007f7570485337: movabs $0x7f757046e3e0,%r11
  0x00007f7570485341: cmp    %r11,%rax
  0x00007f7570485344: jb     0x00007f75704853e7
  0x00007f757048534a: movabs $0x7f7570369420,%r11
  0x00007f7570485354: cmp    %r11,%rax
  0x00007f7570485357: jbe    0x00007f7570485370
  0x00007f757048535d: movabs $0x7f757036de58,%r11
  0x00007f7570485367: cmp    %r11,%rax
  0x00007f757048536a: jb     0x00007f75704853e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570485370: mov    %rsp,-0x28(%rsp)
  0x00007f7570485375: sub    $0x80,%rsp
  0x00007f757048537c: mov    %rax,0x78(%rsp)
  0x00007f7570485381: mov    %rcx,0x70(%rsp)
  0x00007f7570485386: mov    %rdx,0x68(%rsp)
  0x00007f757048538b: mov    %rbx,0x60(%rsp)
  0x00007f7570485390: mov    %rbp,0x50(%rsp)
  0x00007f7570485395: mov    %rsi,0x48(%rsp)
  0x00007f757048539a: mov    %rdi,0x40(%rsp)
  0x00007f757048539f: mov    %r8,0x38(%rsp)
  0x00007f75704853a4: mov    %r9,0x30(%rsp)
  0x00007f75704853a9: mov    %r10,0x28(%rsp)
  0x00007f75704853ae: mov    %r11,0x20(%rsp)
  0x00007f75704853b3: mov    %r12,0x18(%rsp)
  0x00007f75704853b8: mov    %r13,0x10(%rsp)
  0x00007f75704853bd: mov    %r14,0x8(%rsp)
  0x00007f75704853c2: mov    %r15,(%rsp)
  0x00007f75704853c6: movabs $0x7f758592f470,%rdi
  0x00007f75704853d0: movabs $0x7f7570485370,%rsi
  0x00007f75704853da: mov    %rsp,%rdx
  0x00007f75704853dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704853e1: callq  0x00007f75853729fa
  0x00007f75704853e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704853e7: mov    %rsp,%r11
  0x00007f75704853ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704853ee: push   %rax
  0x00007f75704853ef: mov    %r11,%rax
  0x00007f75704853f2: mov    0x50(%rbx),%r11
  0x00007f75704853f6: mov    0x20(%rax),%rsi
  0x00007f75704853fa: mov    0x18(%rax),%rdx
  0x00007f75704853fe: mov    0x10(%rax),%rcx
  0x00007f7570485402: mov    0x8(%rax),%r8
  0x00007f7570485406: mov    %rbx,0x258(%r15)
  0x00007f757048540d: mov    %rbx,%rax
  0x00007f7570485410: jmpq   *%r11
  0x00007f7570485413: mov    0x8(%rsi),%ebx
  0x00007f7570485416: shl    $0x3,%rbx
  0x00007f757048541a: cmp    0x10(%rax),%rbx
  0x00007f757048541e: mov    0x8(%rax),%rbx
  0x00007f7570485422: je     0x00007f757048542d
  0x00007f7570485428: jmpq   0x00007f757046ec40
  0x00007f757048542d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485435: je     0x00007f7570485530
  0x00007f757048543b: jmpq   0x00007f757046ec40
  0x00007f7570485440: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485448: je     0x00007f7570485530
  0x00007f757048544e: mov    %rsp,%r13
  0x00007f7570485451: mov    (%rsp),%rax
  0x00007f7570485455: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485459: pushfq 
  0x00007f757048545a: sub    $0x8,%rsp
  0x00007f757048545e: mov    %rsp,-0x28(%rsp)
  0x00007f7570485463: sub    $0x80,%rsp
  0x00007f757048546a: mov    %rax,0x78(%rsp)
  0x00007f757048546f: mov    %rcx,0x70(%rsp)
  0x00007f7570485474: mov    %rdx,0x68(%rsp)
  0x00007f7570485479: mov    %rbx,0x60(%rsp)
  0x00007f757048547e: mov    %rbp,0x50(%rsp)
  0x00007f7570485483: mov    %rsi,0x48(%rsp)
  0x00007f7570485488: mov    %rdi,0x40(%rsp)
  0x00007f757048548d: mov    %r8,0x38(%rsp)
  0x00007f7570485492: mov    %r9,0x30(%rsp)
  0x00007f7570485497: mov    %r10,0x28(%rsp)
  0x00007f757048549c: mov    %r11,0x20(%rsp)
  0x00007f75704854a1: mov    %r12,0x18(%rsp)
  0x00007f75704854a6: mov    %r13,0x10(%rsp)
  0x00007f75704854ab: mov    %r14,0x8(%rsp)
  0x00007f75704854b0: mov    %r15,(%rsp)
  0x00007f75704854b4: sub    $0x200,%rsp
  0x00007f75704854bb: fxsave64 (%rsp)
  0x00007f75704854c0: mov    %rbx,%rdi
  0x00007f75704854c3: mov    %rax,%rsi
  0x00007f75704854c6: callq  0x00007f7585522bca
  0x00007f75704854cb: fxrstor64 (%rsp)
  0x00007f75704854d0: add    $0x200,%rsp
  0x00007f75704854d7: mov    (%rsp),%r15
  0x00007f75704854db: mov    0x8(%rsp),%r14
  0x00007f75704854e0: mov    0x10(%rsp),%r13
  0x00007f75704854e5: mov    0x18(%rsp),%r12
  0x00007f75704854ea: mov    0x20(%rsp),%r11
  0x00007f75704854ef: mov    0x28(%rsp),%r10
  0x00007f75704854f4: mov    0x30(%rsp),%r9
  0x00007f75704854f9: mov    0x38(%rsp),%r8
  0x00007f75704854fe: mov    0x40(%rsp),%rdi
  0x00007f7570485503: mov    0x48(%rsp),%rsi
  0x00007f7570485508: mov    0x50(%rsp),%rbp
  0x00007f757048550d: mov    0x60(%rsp),%rbx
  0x00007f7570485512: mov    0x68(%rsp),%rdx
  0x00007f7570485517: mov    0x70(%rsp),%rcx
  0x00007f757048551c: mov    0x78(%rsp),%rax
  0x00007f7570485521: add    $0x80,%rsp
  0x00007f7570485528: add    $0x8,%rsp
  0x00007f757048552c: popfq  
  0x00007f757048552d: mov    %r13,%rsp
  0x00007f7570485530: pop    %rax
  0x00007f7570485531: mov    %rsp,%r13
  0x00007f7570485534: sub    $0x30,%rsp
  0x00007f7570485538: mov    %rax,(%rsp)
  0x00007f757048553c: mov    %rsi,0x20(%rsp)
  0x00007f7570485541: mov    %rdx,0x18(%rsp)
  0x00007f7570485546: mov    %rcx,0x10(%rsp)
  0x00007f757048554b: mov    %r8,0x8(%rsp)
  0x00007f7570485550: mov    0x40(%rbx),%rcx
  0x00007f7570485554: jmpq   *%rcx

AHE@0x00007f75800c2be8: 0xb0000000 i2c: 0x00007f7570485620 c2i: 0x00007f7570485734 c2iUV: 0x00007f7570485707
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f7570485734
  0x00007f7570485620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570485624: movabs $0x7f757036e3e0,%r11
  0x00007f757048562e: cmp    %r11,%rax
  0x00007f7570485631: jbe    0x00007f757048564a
  0x00007f7570485637: movabs $0x7f757046e3e0,%r11
  0x00007f7570485641: cmp    %r11,%rax
  0x00007f7570485644: jb     0x00007f75704856e7
  0x00007f757048564a: movabs $0x7f7570369420,%r11
  0x00007f7570485654: cmp    %r11,%rax
  0x00007f7570485657: jbe    0x00007f7570485670
  0x00007f757048565d: movabs $0x7f757036de58,%r11
  0x00007f7570485667: cmp    %r11,%rax
  0x00007f757048566a: jb     0x00007f75704856e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570485670: mov    %rsp,-0x28(%rsp)
  0x00007f7570485675: sub    $0x80,%rsp
  0x00007f757048567c: mov    %rax,0x78(%rsp)
  0x00007f7570485681: mov    %rcx,0x70(%rsp)
  0x00007f7570485686: mov    %rdx,0x68(%rsp)
  0x00007f757048568b: mov    %rbx,0x60(%rsp)
  0x00007f7570485690: mov    %rbp,0x50(%rsp)
  0x00007f7570485695: mov    %rsi,0x48(%rsp)
  0x00007f757048569a: mov    %rdi,0x40(%rsp)
  0x00007f757048569f: mov    %r8,0x38(%rsp)
  0x00007f75704856a4: mov    %r9,0x30(%rsp)
  0x00007f75704856a9: mov    %r10,0x28(%rsp)
  0x00007f75704856ae: mov    %r11,0x20(%rsp)
  0x00007f75704856b3: mov    %r12,0x18(%rsp)
  0x00007f75704856b8: mov    %r13,0x10(%rsp)
  0x00007f75704856bd: mov    %r14,0x8(%rsp)
  0x00007f75704856c2: mov    %r15,(%rsp)
  0x00007f75704856c6: movabs $0x7f758592f470,%rdi
  0x00007f75704856d0: movabs $0x7f7570485670,%rsi
  0x00007f75704856da: mov    %rsp,%rdx
  0x00007f75704856dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704856e1: callq  0x00007f75853729fa
  0x00007f75704856e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704856e7: mov    %rsp,%r11
  0x00007f75704856ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704856ee: push   %rax
  0x00007f75704856ef: mov    %r11,%rax
  0x00007f75704856f2: mov    0x50(%rbx),%r11
  0x00007f75704856f6: mov    0x8(%rax),%rsi
  0x00007f75704856fa: mov    %rbx,0x258(%r15)
  0x00007f7570485701: mov    %rbx,%rax
  0x00007f7570485704: jmpq   *%r11
  0x00007f7570485707: mov    0x8(%rsi),%ebx
  0x00007f757048570a: shl    $0x3,%rbx
  0x00007f757048570e: cmp    0x10(%rax),%rbx
  0x00007f7570485712: mov    0x8(%rax),%rbx
  0x00007f7570485716: je     0x00007f7570485721
  0x00007f757048571c: jmpq   0x00007f757046ec40
  0x00007f7570485721: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485729: je     0x00007f7570485824
  0x00007f757048572f: jmpq   0x00007f757046ec40
  0x00007f7570485734: cmpq   $0x0,0x58(%rbx)
  0x00007f757048573c: je     0x00007f7570485824
  0x00007f7570485742: mov    %rsp,%r13
  0x00007f7570485745: mov    (%rsp),%rax
  0x00007f7570485749: and    $0xfffffffffffffff0,%rsp
  0x00007f757048574d: pushfq 
  0x00007f757048574e: sub    $0x8,%rsp
  0x00007f7570485752: mov    %rsp,-0x28(%rsp)
  0x00007f7570485757: sub    $0x80,%rsp
  0x00007f757048575e: mov    %rax,0x78(%rsp)
  0x00007f7570485763: mov    %rcx,0x70(%rsp)
  0x00007f7570485768: mov    %rdx,0x68(%rsp)
  0x00007f757048576d: mov    %rbx,0x60(%rsp)
  0x00007f7570485772: mov    %rbp,0x50(%rsp)
  0x00007f7570485777: mov    %rsi,0x48(%rsp)
  0x00007f757048577c: mov    %rdi,0x40(%rsp)
  0x00007f7570485781: mov    %r8,0x38(%rsp)
  0x00007f7570485786: mov    %r9,0x30(%rsp)
  0x00007f757048578b: mov    %r10,0x28(%rsp)
  0x00007f7570485790: mov    %r11,0x20(%rsp)
  0x00007f7570485795: mov    %r12,0x18(%rsp)
  0x00007f757048579a: mov    %r13,0x10(%rsp)
  0x00007f757048579f: mov    %r14,0x8(%rsp)
  0x00007f75704857a4: mov    %r15,(%rsp)
  0x00007f75704857a8: sub    $0x200,%rsp
  0x00007f75704857af: fxsave64 (%rsp)
  0x00007f75704857b4: mov    %rbx,%rdi
  0x00007f75704857b7: mov    %rax,%rsi
  0x00007f75704857ba: callq  0x00007f7585522bca
  0x00007f75704857bf: fxrstor64 (%rsp)
  0x00007f75704857c4: add    $0x200,%rsp
  0x00007f75704857cb: mov    (%rsp),%r15
  0x00007f75704857cf: mov    0x8(%rsp),%r14
  0x00007f75704857d4: mov    0x10(%rsp),%r13
  0x00007f75704857d9: mov    0x18(%rsp),%r12
  0x00007f75704857de: mov    0x20(%rsp),%r11
  0x00007f75704857e3: mov    0x28(%rsp),%r10
  0x00007f75704857e8: mov    0x30(%rsp),%r9
  0x00007f75704857ed: mov    0x38(%rsp),%r8
  0x00007f75704857f2: mov    0x40(%rsp),%rdi
  0x00007f75704857f7: mov    0x48(%rsp),%rsi
  0x00007f75704857fc: mov    0x50(%rsp),%rbp
  0x00007f7570485801: mov    0x60(%rsp),%rbx
  0x00007f7570485806: mov    0x68(%rsp),%rdx
  0x00007f757048580b: mov    0x70(%rsp),%rcx
  0x00007f7570485810: mov    0x78(%rsp),%rax
  0x00007f7570485815: add    $0x80,%rsp
  0x00007f757048581c: add    $0x8,%rsp
  0x00007f7570485820: popfq  
  0x00007f7570485821: mov    %r13,%rsp
  0x00007f7570485824: pop    %rax
  0x00007f7570485825: mov    %rsp,%r13
  0x00007f7570485828: sub    $0x10,%rsp
  0x00007f757048582c: mov    %rax,(%rsp)
  0x00007f7570485830: mov    %rsi,0x8(%rsp)
  0x00007f7570485835: mov    0x40(%rbx),%rcx
  0x00007f7570485839: jmpq   *%rcx

AHE@0x00007f75800c2c30: 0xb0000000 i2c: 0x00007f75704858e0 c2i: 0x00007f75704859f4 c2iUV: 0x00007f75704859c7
i2c argument handler #0 for: receiver ()I (539 bytes generated)
c2i argument handler starts at 0x7f75704859f4
  0x00007f75704858e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704858e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704858ee: cmp    %r11,%rax
  0x00007f75704858f1: jbe    0x00007f757048590a
  0x00007f75704858f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570485901: cmp    %r11,%rax
  0x00007f7570485904: jb     0x00007f75704859a7
  0x00007f757048590a: movabs $0x7f7570369420,%r11
  0x00007f7570485914: cmp    %r11,%rax
  0x00007f7570485917: jbe    0x00007f7570485930
  0x00007f757048591d: movabs $0x7f757036de58,%r11
  0x00007f7570485927: cmp    %r11,%rax
  0x00007f757048592a: jb     0x00007f75704859a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570485930: mov    %rsp,-0x28(%rsp)
  0x00007f7570485935: sub    $0x80,%rsp
  0x00007f757048593c: mov    %rax,0x78(%rsp)
  0x00007f7570485941: mov    %rcx,0x70(%rsp)
  0x00007f7570485946: mov    %rdx,0x68(%rsp)
  0x00007f757048594b: mov    %rbx,0x60(%rsp)
  0x00007f7570485950: mov    %rbp,0x50(%rsp)
  0x00007f7570485955: mov    %rsi,0x48(%rsp)
  0x00007f757048595a: mov    %rdi,0x40(%rsp)
  0x00007f757048595f: mov    %r8,0x38(%rsp)
  0x00007f7570485964: mov    %r9,0x30(%rsp)
  0x00007f7570485969: mov    %r10,0x28(%rsp)
  0x00007f757048596e: mov    %r11,0x20(%rsp)
  0x00007f7570485973: mov    %r12,0x18(%rsp)
  0x00007f7570485978: mov    %r13,0x10(%rsp)
  0x00007f757048597d: mov    %r14,0x8(%rsp)
  0x00007f7570485982: mov    %r15,(%rsp)
  0x00007f7570485986: movabs $0x7f758592f470,%rdi
  0x00007f7570485990: movabs $0x7f7570485930,%rsi
  0x00007f757048599a: mov    %rsp,%rdx
  0x00007f757048599d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704859a1: callq  0x00007f75853729fa
  0x00007f75704859a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704859a7: mov    %rsp,%r11
  0x00007f75704859aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704859ae: push   %rax
  0x00007f75704859af: mov    %r11,%rax
  0x00007f75704859b2: mov    0x50(%rbx),%r11
  0x00007f75704859b6: mov    0x8(%rax),%rsi
  0x00007f75704859ba: mov    %rbx,0x258(%r15)
  0x00007f75704859c1: mov    %rbx,%rax
  0x00007f75704859c4: jmpq   *%r11
  0x00007f75704859c7: mov    0x8(%rsi),%ebx
  0x00007f75704859ca: shl    $0x3,%rbx
  0x00007f75704859ce: cmp    0x10(%rax),%rbx
  0x00007f75704859d2: mov    0x8(%rax),%rbx
  0x00007f75704859d6: je     0x00007f75704859e1
  0x00007f75704859dc: jmpq   0x00007f757046ec40
  0x00007f75704859e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704859e9: je     0x00007f7570485ae4
  0x00007f75704859ef: jmpq   0x00007f757046ec40
  0x00007f75704859f4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704859fc: je     0x00007f7570485ae4
  0x00007f7570485a02: mov    %rsp,%r13
  0x00007f7570485a05: mov    (%rsp),%rax
  0x00007f7570485a09: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485a0d: pushfq 
  0x00007f7570485a0e: sub    $0x8,%rsp
  0x00007f7570485a12: mov    %rsp,-0x28(%rsp)
  0x00007f7570485a17: sub    $0x80,%rsp
  0x00007f7570485a1e: mov    %rax,0x78(%rsp)
  0x00007f7570485a23: mov    %rcx,0x70(%rsp)
  0x00007f7570485a28: mov    %rdx,0x68(%rsp)
  0x00007f7570485a2d: mov    %rbx,0x60(%rsp)
  0x00007f7570485a32: mov    %rbp,0x50(%rsp)
  0x00007f7570485a37: mov    %rsi,0x48(%rsp)
  0x00007f7570485a3c: mov    %rdi,0x40(%rsp)
  0x00007f7570485a41: mov    %r8,0x38(%rsp)
  0x00007f7570485a46: mov    %r9,0x30(%rsp)
  0x00007f7570485a4b: mov    %r10,0x28(%rsp)
  0x00007f7570485a50: mov    %r11,0x20(%rsp)
  0x00007f7570485a55: mov    %r12,0x18(%rsp)
  0x00007f7570485a5a: mov    %r13,0x10(%rsp)
  0x00007f7570485a5f: mov    %r14,0x8(%rsp)
  0x00007f7570485a64: mov    %r15,(%rsp)
  0x00007f7570485a68: sub    $0x200,%rsp
  0x00007f7570485a6f: fxsave64 (%rsp)
  0x00007f7570485a74: mov    %rbx,%rdi
  0x00007f7570485a77: mov    %rax,%rsi
  0x00007f7570485a7a: callq  0x00007f7585522bca
  0x00007f7570485a7f: fxrstor64 (%rsp)
  0x00007f7570485a84: add    $0x200,%rsp
  0x00007f7570485a8b: mov    (%rsp),%r15
  0x00007f7570485a8f: mov    0x8(%rsp),%r14
  0x00007f7570485a94: mov    0x10(%rsp),%r13
  0x00007f7570485a99: mov    0x18(%rsp),%r12
  0x00007f7570485a9e: mov    0x20(%rsp),%r11
  0x00007f7570485aa3: mov    0x28(%rsp),%r10
  0x00007f7570485aa8: mov    0x30(%rsp),%r9
  0x00007f7570485aad: mov    0x38(%rsp),%r8
  0x00007f7570485ab2: mov    0x40(%rsp),%rdi
  0x00007f7570485ab7: mov    0x48(%rsp),%rsi
  0x00007f7570485abc: mov    0x50(%rsp),%rbp
  0x00007f7570485ac1: mov    0x60(%rsp),%rbx
  0x00007f7570485ac6: mov    0x68(%rsp),%rdx
  0x00007f7570485acb: mov    0x70(%rsp),%rcx
  0x00007f7570485ad0: mov    0x78(%rsp),%rax
  0x00007f7570485ad5: add    $0x80,%rsp
  0x00007f7570485adc: add    $0x8,%rsp
  0x00007f7570485ae0: popfq  
  0x00007f7570485ae1: mov    %r13,%rsp
  0x00007f7570485ae4: pop    %rax
  0x00007f7570485ae5: mov    %rsp,%r13
  0x00007f7570485ae8: sub    $0x10,%rsp
  0x00007f7570485aec: mov    %rax,(%rsp)
  0x00007f7570485af0: mov    %rsi,0x8(%rsp)
  0x00007f7570485af5: mov    0x40(%rbx),%rcx
  0x00007f7570485af9: jmpq   *%rcx

AHE@0x00007f75800c2c78: 0xbb000000 i2c: 0x00007f7570485ba0 c2i: 0x00007f7570485cb8 c2iUV: 0x00007f7570485c8b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)I (548 bytes generated)
c2i argument handler starts at 0x7f7570485cb8
  0x00007f7570485ba0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570485ba4: movabs $0x7f757036e3e0,%r11
  0x00007f7570485bae: cmp    %r11,%rax
  0x00007f7570485bb1: jbe    0x00007f7570485bca
  0x00007f7570485bb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570485bc1: cmp    %r11,%rax
  0x00007f7570485bc4: jb     0x00007f7570485c67
  0x00007f7570485bca: movabs $0x7f7570369420,%r11
  0x00007f7570485bd4: cmp    %r11,%rax
  0x00007f7570485bd7: jbe    0x00007f7570485bf0
  0x00007f7570485bdd: movabs $0x7f757036de58,%r11
  0x00007f7570485be7: cmp    %r11,%rax
  0x00007f7570485bea: jb     0x00007f7570485c67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570485bf0: mov    %rsp,-0x28(%rsp)
  0x00007f7570485bf5: sub    $0x80,%rsp
  0x00007f7570485bfc: mov    %rax,0x78(%rsp)
  0x00007f7570485c01: mov    %rcx,0x70(%rsp)
  0x00007f7570485c06: mov    %rdx,0x68(%rsp)
  0x00007f7570485c0b: mov    %rbx,0x60(%rsp)
  0x00007f7570485c10: mov    %rbp,0x50(%rsp)
  0x00007f7570485c15: mov    %rsi,0x48(%rsp)
  0x00007f7570485c1a: mov    %rdi,0x40(%rsp)
  0x00007f7570485c1f: mov    %r8,0x38(%rsp)
  0x00007f7570485c24: mov    %r9,0x30(%rsp)
  0x00007f7570485c29: mov    %r10,0x28(%rsp)
  0x00007f7570485c2e: mov    %r11,0x20(%rsp)
  0x00007f7570485c33: mov    %r12,0x18(%rsp)
  0x00007f7570485c38: mov    %r13,0x10(%rsp)
  0x00007f7570485c3d: mov    %r14,0x8(%rsp)
  0x00007f7570485c42: mov    %r15,(%rsp)
  0x00007f7570485c46: movabs $0x7f758592f470,%rdi
  0x00007f7570485c50: movabs $0x7f7570485bf0,%rsi
  0x00007f7570485c5a: mov    %rsp,%rdx
  0x00007f7570485c5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485c61: callq  0x00007f75853729fa
  0x00007f7570485c66: hlt    
  ;; } verify_i2ce 
  0x00007f7570485c67: mov    %rsp,%r11
  0x00007f7570485c6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485c6e: push   %rax
  0x00007f7570485c6f: mov    %r11,%rax
  0x00007f7570485c72: mov    0x50(%rbx),%r11
  0x00007f7570485c76: mov    0x10(%rax),%rsi
  0x00007f7570485c7a: mov    0x8(%rax),%rdx
  0x00007f7570485c7e: mov    %rbx,0x258(%r15)
  0x00007f7570485c85: mov    %rbx,%rax
  0x00007f7570485c88: jmpq   *%r11
  0x00007f7570485c8b: mov    0x8(%rsi),%ebx
  0x00007f7570485c8e: shl    $0x3,%rbx
  0x00007f7570485c92: cmp    0x10(%rax),%rbx
  0x00007f7570485c96: mov    0x8(%rax),%rbx
  0x00007f7570485c9a: je     0x00007f7570485ca5
  0x00007f7570485ca0: jmpq   0x00007f757046ec40
  0x00007f7570485ca5: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485cad: je     0x00007f7570485da8
  0x00007f7570485cb3: jmpq   0x00007f757046ec40
  0x00007f7570485cb8: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485cc0: je     0x00007f7570485da8
  0x00007f7570485cc6: mov    %rsp,%r13
  0x00007f7570485cc9: mov    (%rsp),%rax
  0x00007f7570485ccd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485cd1: pushfq 
  0x00007f7570485cd2: sub    $0x8,%rsp
  0x00007f7570485cd6: mov    %rsp,-0x28(%rsp)
  0x00007f7570485cdb: sub    $0x80,%rsp
  0x00007f7570485ce2: mov    %rax,0x78(%rsp)
  0x00007f7570485ce7: mov    %rcx,0x70(%rsp)
  0x00007f7570485cec: mov    %rdx,0x68(%rsp)
  0x00007f7570485cf1: mov    %rbx,0x60(%rsp)
  0x00007f7570485cf6: mov    %rbp,0x50(%rsp)
  0x00007f7570485cfb: mov    %rsi,0x48(%rsp)
  0x00007f7570485d00: mov    %rdi,0x40(%rsp)
  0x00007f7570485d05: mov    %r8,0x38(%rsp)
  0x00007f7570485d0a: mov    %r9,0x30(%rsp)
  0x00007f7570485d0f: mov    %r10,0x28(%rsp)
  0x00007f7570485d14: mov    %r11,0x20(%rsp)
  0x00007f7570485d19: mov    %r12,0x18(%rsp)
  0x00007f7570485d1e: mov    %r13,0x10(%rsp)
  0x00007f7570485d23: mov    %r14,0x8(%rsp)
  0x00007f7570485d28: mov    %r15,(%rsp)
  0x00007f7570485d2c: sub    $0x200,%rsp
  0x00007f7570485d33: fxsave64 (%rsp)
  0x00007f7570485d38: mov    %rbx,%rdi
  0x00007f7570485d3b: mov    %rax,%rsi
  0x00007f7570485d3e: callq  0x00007f7585522bca
  0x00007f7570485d43: fxrstor64 (%rsp)
  0x00007f7570485d48: add    $0x200,%rsp
  0x00007f7570485d4f: mov    (%rsp),%r15
  0x00007f7570485d53: mov    0x8(%rsp),%r14
  0x00007f7570485d58: mov    0x10(%rsp),%r13
  0x00007f7570485d5d: mov    0x18(%rsp),%r12
  0x00007f7570485d62: mov    0x20(%rsp),%r11
  0x00007f7570485d67: mov    0x28(%rsp),%r10
  0x00007f7570485d6c: mov    0x30(%rsp),%r9
  0x00007f7570485d71: mov    0x38(%rsp),%r8
  0x00007f7570485d76: mov    0x40(%rsp),%rdi
  0x00007f7570485d7b: mov    0x48(%rsp),%rsi
  0x00007f7570485d80: mov    0x50(%rsp),%rbp
  0x00007f7570485d85: mov    0x60(%rsp),%rbx
  0x00007f7570485d8a: mov    0x68(%rsp),%rdx
  0x00007f7570485d8f: mov    0x70(%rsp),%rcx
  0x00007f7570485d94: mov    0x78(%rsp),%rax
  0x00007f7570485d99: add    $0x80,%rsp
  0x00007f7570485da0: add    $0x8,%rsp
  0x00007f7570485da4: popfq  
  0x00007f7570485da5: mov    %r13,%rsp
  0x00007f7570485da8: pop    %rax
  0x00007f7570485da9: mov    %rsp,%r13
  0x00007f7570485dac: sub    $0x20,%rsp
  0x00007f7570485db0: mov    %rax,(%rsp)
  0x00007f7570485db4: mov    %rsi,0x10(%rsp)
  0x00007f7570485db9: mov    %rdx,0x8(%rsp)
  0x00007f7570485dbe: mov    0x40(%rbx),%rcx
  0x00007f7570485dc2: jmpq   *%rcx

AHE@0x00007f75800c2cc0: 0xbb000000 i2c: 0x00007f7570485ea0 c2i: 0x00007f7570485fb8 c2iUV: 0x00007f7570485f8b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)I (548 bytes generated)
c2i argument handler starts at 0x7f7570485fb8
  0x00007f7570485ea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570485ea4: movabs $0x7f757036e3e0,%r11
  0x00007f7570485eae: cmp    %r11,%rax
  0x00007f7570485eb1: jbe    0x00007f7570485eca
  0x00007f7570485eb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570485ec1: cmp    %r11,%rax
  0x00007f7570485ec4: jb     0x00007f7570485f67
  0x00007f7570485eca: movabs $0x7f7570369420,%r11
  0x00007f7570485ed4: cmp    %r11,%rax
  0x00007f7570485ed7: jbe    0x00007f7570485ef0
  0x00007f7570485edd: movabs $0x7f757036de58,%r11
  0x00007f7570485ee7: cmp    %r11,%rax
  0x00007f7570485eea: jb     0x00007f7570485f67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570485ef0: mov    %rsp,-0x28(%rsp)
  0x00007f7570485ef5: sub    $0x80,%rsp
  0x00007f7570485efc: mov    %rax,0x78(%rsp)
  0x00007f7570485f01: mov    %rcx,0x70(%rsp)
  0x00007f7570485f06: mov    %rdx,0x68(%rsp)
  0x00007f7570485f0b: mov    %rbx,0x60(%rsp)
  0x00007f7570485f10: mov    %rbp,0x50(%rsp)
  0x00007f7570485f15: mov    %rsi,0x48(%rsp)
  0x00007f7570485f1a: mov    %rdi,0x40(%rsp)
  0x00007f7570485f1f: mov    %r8,0x38(%rsp)
  0x00007f7570485f24: mov    %r9,0x30(%rsp)
  0x00007f7570485f29: mov    %r10,0x28(%rsp)
  0x00007f7570485f2e: mov    %r11,0x20(%rsp)
  0x00007f7570485f33: mov    %r12,0x18(%rsp)
  0x00007f7570485f38: mov    %r13,0x10(%rsp)
  0x00007f7570485f3d: mov    %r14,0x8(%rsp)
  0x00007f7570485f42: mov    %r15,(%rsp)
  0x00007f7570485f46: movabs $0x7f758592f470,%rdi
  0x00007f7570485f50: movabs $0x7f7570485ef0,%rsi
  0x00007f7570485f5a: mov    %rsp,%rdx
  0x00007f7570485f5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485f61: callq  0x00007f75853729fa
  0x00007f7570485f66: hlt    
  ;; } verify_i2ce 
  0x00007f7570485f67: mov    %rsp,%r11
  0x00007f7570485f6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485f6e: push   %rax
  0x00007f7570485f6f: mov    %r11,%rax
  0x00007f7570485f72: mov    0x50(%rbx),%r11
  0x00007f7570485f76: mov    0x10(%rax),%rsi
  0x00007f7570485f7a: mov    0x8(%rax),%rdx
  0x00007f7570485f7e: mov    %rbx,0x258(%r15)
  0x00007f7570485f85: mov    %rbx,%rax
  0x00007f7570485f88: jmpq   *%r11
  0x00007f7570485f8b: mov    0x8(%rsi),%ebx
  0x00007f7570485f8e: shl    $0x3,%rbx
  0x00007f7570485f92: cmp    0x10(%rax),%rbx
  0x00007f7570485f96: mov    0x8(%rax),%rbx
  0x00007f7570485f9a: je     0x00007f7570485fa5
  0x00007f7570485fa0: jmpq   0x00007f757046ec40
  0x00007f7570485fa5: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485fad: je     0x00007f75704860a8
  0x00007f7570485fb3: jmpq   0x00007f757046ec40
  0x00007f7570485fb8: cmpq   $0x0,0x58(%rbx)
  0x00007f7570485fc0: je     0x00007f75704860a8
  0x00007f7570485fc6: mov    %rsp,%r13
  0x00007f7570485fc9: mov    (%rsp),%rax
  0x00007f7570485fcd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570485fd1: pushfq 
  0x00007f7570485fd2: sub    $0x8,%rsp
  0x00007f7570485fd6: mov    %rsp,-0x28(%rsp)
  0x00007f7570485fdb: sub    $0x80,%rsp
  0x00007f7570485fe2: mov    %rax,0x78(%rsp)
  0x00007f7570485fe7: mov    %rcx,0x70(%rsp)
  0x00007f7570485fec: mov    %rdx,0x68(%rsp)
  0x00007f7570485ff1: mov    %rbx,0x60(%rsp)
  0x00007f7570485ff6: mov    %rbp,0x50(%rsp)
  0x00007f7570485ffb: mov    %rsi,0x48(%rsp)
  0x00007f7570486000: mov    %rdi,0x40(%rsp)
  0x00007f7570486005: mov    %r8,0x38(%rsp)
  0x00007f757048600a: mov    %r9,0x30(%rsp)
  0x00007f757048600f: mov    %r10,0x28(%rsp)
  0x00007f7570486014: mov    %r11,0x20(%rsp)
  0x00007f7570486019: mov    %r12,0x18(%rsp)
  0x00007f757048601e: mov    %r13,0x10(%rsp)
  0x00007f7570486023: mov    %r14,0x8(%rsp)
  0x00007f7570486028: mov    %r15,(%rsp)
  0x00007f757048602c: sub    $0x200,%rsp
  0x00007f7570486033: fxsave64 (%rsp)
  0x00007f7570486038: mov    %rbx,%rdi
  0x00007f757048603b: mov    %rax,%rsi
  0x00007f757048603e: callq  0x00007f7585522bca
  0x00007f7570486043: fxrstor64 (%rsp)
  0x00007f7570486048: add    $0x200,%rsp
  0x00007f757048604f: mov    (%rsp),%r15
  0x00007f7570486053: mov    0x8(%rsp),%r14
  0x00007f7570486058: mov    0x10(%rsp),%r13
  0x00007f757048605d: mov    0x18(%rsp),%r12
  0x00007f7570486062: mov    0x20(%rsp),%r11
  0x00007f7570486067: mov    0x28(%rsp),%r10
  0x00007f757048606c: mov    0x30(%rsp),%r9
  0x00007f7570486071: mov    0x38(%rsp),%r8
  0x00007f7570486076: mov    0x40(%rsp),%rdi
  0x00007f757048607b: mov    0x48(%rsp),%rsi
  0x00007f7570486080: mov    0x50(%rsp),%rbp
  0x00007f7570486085: mov    0x60(%rsp),%rbx
  0x00007f757048608a: mov    0x68(%rsp),%rdx
  0x00007f757048608f: mov    0x70(%rsp),%rcx
  0x00007f7570486094: mov    0x78(%rsp),%rax
  0x00007f7570486099: add    $0x80,%rsp
  0x00007f75704860a0: add    $0x8,%rsp
  0x00007f75704860a4: popfq  
  0x00007f75704860a5: mov    %r13,%rsp
  0x00007f75704860a8: pop    %rax
  0x00007f75704860a9: mov    %rsp,%r13
  0x00007f75704860ac: sub    $0x20,%rsp
  0x00007f75704860b0: mov    %rax,(%rsp)
  0x00007f75704860b4: mov    %rsi,0x10(%rsp)
  0x00007f75704860b9: mov    %rdx,0x8(%rsp)
  0x00007f75704860be: mov    0x40(%rbx),%rcx
  0x00007f75704860c2: jmpq   *%rcx

AHE@0x00007f75800c2d08: 0xbbe00000 i2c: 0x00007f75704861a0 c2i: 0x00007f75704862b8 c2iUV: 0x00007f757048628b
i2c argument handler #0 for: receiver (J)V (563 bytes generated)
c2i argument handler starts at 0x7f75704862b8
  0x00007f75704861a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704861a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704861ae: cmp    %r11,%rax
  0x00007f75704861b1: jbe    0x00007f75704861ca
  0x00007f75704861b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704861c1: cmp    %r11,%rax
  0x00007f75704861c4: jb     0x00007f7570486267
  0x00007f75704861ca: movabs $0x7f7570369420,%r11
  0x00007f75704861d4: cmp    %r11,%rax
  0x00007f75704861d7: jbe    0x00007f75704861f0
  0x00007f75704861dd: movabs $0x7f757036de58,%r11
  0x00007f75704861e7: cmp    %r11,%rax
  0x00007f75704861ea: jb     0x00007f7570486267
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704861f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704861f5: sub    $0x80,%rsp
  0x00007f75704861fc: mov    %rax,0x78(%rsp)
  0x00007f7570486201: mov    %rcx,0x70(%rsp)
  0x00007f7570486206: mov    %rdx,0x68(%rsp)
  0x00007f757048620b: mov    %rbx,0x60(%rsp)
  0x00007f7570486210: mov    %rbp,0x50(%rsp)
  0x00007f7570486215: mov    %rsi,0x48(%rsp)
  0x00007f757048621a: mov    %rdi,0x40(%rsp)
  0x00007f757048621f: mov    %r8,0x38(%rsp)
  0x00007f7570486224: mov    %r9,0x30(%rsp)
  0x00007f7570486229: mov    %r10,0x28(%rsp)
  0x00007f757048622e: mov    %r11,0x20(%rsp)
  0x00007f7570486233: mov    %r12,0x18(%rsp)
  0x00007f7570486238: mov    %r13,0x10(%rsp)
  0x00007f757048623d: mov    %r14,0x8(%rsp)
  0x00007f7570486242: mov    %r15,(%rsp)
  0x00007f7570486246: movabs $0x7f758592f470,%rdi
  0x00007f7570486250: movabs $0x7f75704861f0,%rsi
  0x00007f757048625a: mov    %rsp,%rdx
  0x00007f757048625d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486261: callq  0x00007f75853729fa
  0x00007f7570486266: hlt    
  ;; } verify_i2ce 
  0x00007f7570486267: mov    %rsp,%r11
  0x00007f757048626a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048626e: push   %rax
  0x00007f757048626f: mov    %r11,%rax
  0x00007f7570486272: mov    0x50(%rbx),%r11
  0x00007f7570486276: mov    0x18(%rax),%rsi
  0x00007f757048627a: mov    0x8(%rax),%rdx
  0x00007f757048627e: mov    %rbx,0x258(%r15)
  0x00007f7570486285: mov    %rbx,%rax
  0x00007f7570486288: jmpq   *%r11
  0x00007f757048628b: mov    0x8(%rsi),%ebx
  0x00007f757048628e: shl    $0x3,%rbx
  0x00007f7570486292: cmp    0x10(%rax),%rbx
  0x00007f7570486296: mov    0x8(%rax),%rbx
  0x00007f757048629a: je     0x00007f75704862a5
  0x00007f75704862a0: jmpq   0x00007f757046ec40
  0x00007f75704862a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704862ad: je     0x00007f75704863a8
  0x00007f75704862b3: jmpq   0x00007f757046ec40
  0x00007f75704862b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704862c0: je     0x00007f75704863a8
  0x00007f75704862c6: mov    %rsp,%r13
  0x00007f75704862c9: mov    (%rsp),%rax
  0x00007f75704862cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704862d1: pushfq 
  0x00007f75704862d2: sub    $0x8,%rsp
  0x00007f75704862d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704862db: sub    $0x80,%rsp
  0x00007f75704862e2: mov    %rax,0x78(%rsp)
  0x00007f75704862e7: mov    %rcx,0x70(%rsp)
  0x00007f75704862ec: mov    %rdx,0x68(%rsp)
  0x00007f75704862f1: mov    %rbx,0x60(%rsp)
  0x00007f75704862f6: mov    %rbp,0x50(%rsp)
  0x00007f75704862fb: mov    %rsi,0x48(%rsp)
  0x00007f7570486300: mov    %rdi,0x40(%rsp)
  0x00007f7570486305: mov    %r8,0x38(%rsp)
  0x00007f757048630a: mov    %r9,0x30(%rsp)
  0x00007f757048630f: mov    %r10,0x28(%rsp)
  0x00007f7570486314: mov    %r11,0x20(%rsp)
  0x00007f7570486319: mov    %r12,0x18(%rsp)
  0x00007f757048631e: mov    %r13,0x10(%rsp)
  0x00007f7570486323: mov    %r14,0x8(%rsp)
  0x00007f7570486328: mov    %r15,(%rsp)
  0x00007f757048632c: sub    $0x200,%rsp
  0x00007f7570486333: fxsave64 (%rsp)
  0x00007f7570486338: mov    %rbx,%rdi
  0x00007f757048633b: mov    %rax,%rsi
  0x00007f757048633e: callq  0x00007f7585522bca
  0x00007f7570486343: fxrstor64 (%rsp)
  0x00007f7570486348: add    $0x200,%rsp
  0x00007f757048634f: mov    (%rsp),%r15
  0x00007f7570486353: mov    0x8(%rsp),%r14
  0x00007f7570486358: mov    0x10(%rsp),%r13
  0x00007f757048635d: mov    0x18(%rsp),%r12
  0x00007f7570486362: mov    0x20(%rsp),%r11
  0x00007f7570486367: mov    0x28(%rsp),%r10
  0x00007f757048636c: mov    0x30(%rsp),%r9
  0x00007f7570486371: mov    0x38(%rsp),%r8
  0x00007f7570486376: mov    0x40(%rsp),%rdi
  0x00007f757048637b: mov    0x48(%rsp),%rsi
  0x00007f7570486380: mov    0x50(%rsp),%rbp
  0x00007f7570486385: mov    0x60(%rsp),%rbx
  0x00007f757048638a: mov    0x68(%rsp),%rdx
  0x00007f757048638f: mov    0x70(%rsp),%rcx
  0x00007f7570486394: mov    0x78(%rsp),%rax
  0x00007f7570486399: add    $0x80,%rsp
  0x00007f75704863a0: add    $0x8,%rsp
  0x00007f75704863a4: popfq  
  0x00007f75704863a5: mov    %r13,%rsp
  0x00007f75704863a8: pop    %rax
  0x00007f75704863a9: mov    %rsp,%r13
  0x00007f75704863ac: sub    $0x20,%rsp
  0x00007f75704863b0: mov    %rax,(%rsp)
  0x00007f75704863b4: mov    %rsi,0x18(%rsp)
  0x00007f75704863b9: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704863c3: mov    %rax,0x10(%rsp)
  0x00007f75704863c8: mov    %rdx,0x8(%rsp)
  0x00007f75704863cd: mov    0x40(%rbx),%rcx
  0x00007f75704863d1: jmpq   *%rcx

AHE@0x00007f75800c2d50: 0xbbbebea0 i2c: 0x00007f75704864a0 c2i: 0x00007f75704865c4 c2iUV: 0x00007f7570486597
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJB)V (605 bytes generated)
c2i argument handler starts at 0x7f75704865c4
  0x00007f75704864a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704864a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704864ae: cmp    %r11,%rax
  0x00007f75704864b1: jbe    0x00007f75704864ca
  0x00007f75704864b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704864c1: cmp    %r11,%rax
  0x00007f75704864c4: jb     0x00007f7570486567
  0x00007f75704864ca: movabs $0x7f7570369420,%r11
  0x00007f75704864d4: cmp    %r11,%rax
  0x00007f75704864d7: jbe    0x00007f75704864f0
  0x00007f75704864dd: movabs $0x7f757036de58,%r11
  0x00007f75704864e7: cmp    %r11,%rax
  0x00007f75704864ea: jb     0x00007f7570486567
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704864f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704864f5: sub    $0x80,%rsp
  0x00007f75704864fc: mov    %rax,0x78(%rsp)
  0x00007f7570486501: mov    %rcx,0x70(%rsp)
  0x00007f7570486506: mov    %rdx,0x68(%rsp)
  0x00007f757048650b: mov    %rbx,0x60(%rsp)
  0x00007f7570486510: mov    %rbp,0x50(%rsp)
  0x00007f7570486515: mov    %rsi,0x48(%rsp)
  0x00007f757048651a: mov    %rdi,0x40(%rsp)
  0x00007f757048651f: mov    %r8,0x38(%rsp)
  0x00007f7570486524: mov    %r9,0x30(%rsp)
  0x00007f7570486529: mov    %r10,0x28(%rsp)
  0x00007f757048652e: mov    %r11,0x20(%rsp)
  0x00007f7570486533: mov    %r12,0x18(%rsp)
  0x00007f7570486538: mov    %r13,0x10(%rsp)
  0x00007f757048653d: mov    %r14,0x8(%rsp)
  0x00007f7570486542: mov    %r15,(%rsp)
  0x00007f7570486546: movabs $0x7f758592f470,%rdi
  0x00007f7570486550: movabs $0x7f75704864f0,%rsi
  0x00007f757048655a: mov    %rsp,%rdx
  0x00007f757048655d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486561: callq  0x00007f75853729fa
  0x00007f7570486566: hlt    
  ;; } verify_i2ce 
  0x00007f7570486567: mov    %rsp,%r11
  0x00007f757048656a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048656e: push   %rax
  0x00007f757048656f: mov    %r11,%rax
  0x00007f7570486572: mov    0x50(%rbx),%r11
  0x00007f7570486576: mov    0x38(%rax),%rsi
  0x00007f757048657a: mov    0x30(%rax),%rdx
  0x00007f757048657e: mov    0x20(%rax),%rcx
  0x00007f7570486582: mov    0x10(%rax),%r8
  0x00007f7570486586: mov    0x8(%rax),%r9d
  0x00007f757048658a: mov    %rbx,0x258(%r15)
  0x00007f7570486591: mov    %rbx,%rax
  0x00007f7570486594: jmpq   *%r11
  0x00007f7570486597: mov    0x8(%rsi),%ebx
  0x00007f757048659a: shl    $0x3,%rbx
  0x00007f757048659e: cmp    0x10(%rax),%rbx
  0x00007f75704865a2: mov    0x8(%rax),%rbx
  0x00007f75704865a6: je     0x00007f75704865b1
  0x00007f75704865ac: jmpq   0x00007f757046ec40
  0x00007f75704865b1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704865b9: je     0x00007f75704866b4
  0x00007f75704865bf: jmpq   0x00007f757046ec40
  0x00007f75704865c4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704865cc: je     0x00007f75704866b4
  0x00007f75704865d2: mov    %rsp,%r13
  0x00007f75704865d5: mov    (%rsp),%rax
  0x00007f75704865d9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704865dd: pushfq 
  0x00007f75704865de: sub    $0x8,%rsp
  0x00007f75704865e2: mov    %rsp,-0x28(%rsp)
  0x00007f75704865e7: sub    $0x80,%rsp
  0x00007f75704865ee: mov    %rax,0x78(%rsp)
  0x00007f75704865f3: mov    %rcx,0x70(%rsp)
  0x00007f75704865f8: mov    %rdx,0x68(%rsp)
  0x00007f75704865fd: mov    %rbx,0x60(%rsp)
  0x00007f7570486602: mov    %rbp,0x50(%rsp)
  0x00007f7570486607: mov    %rsi,0x48(%rsp)
  0x00007f757048660c: mov    %rdi,0x40(%rsp)
  0x00007f7570486611: mov    %r8,0x38(%rsp)
  0x00007f7570486616: mov    %r9,0x30(%rsp)
  0x00007f757048661b: mov    %r10,0x28(%rsp)
  0x00007f7570486620: mov    %r11,0x20(%rsp)
  0x00007f7570486625: mov    %r12,0x18(%rsp)
  0x00007f757048662a: mov    %r13,0x10(%rsp)
  0x00007f757048662f: mov    %r14,0x8(%rsp)
  0x00007f7570486634: mov    %r15,(%rsp)
  0x00007f7570486638: sub    $0x200,%rsp
  0x00007f757048663f: fxsave64 (%rsp)
  0x00007f7570486644: mov    %rbx,%rdi
  0x00007f7570486647: mov    %rax,%rsi
  0x00007f757048664a: callq  0x00007f7585522bca
  0x00007f757048664f: fxrstor64 (%rsp)
  0x00007f7570486654: add    $0x200,%rsp
  0x00007f757048665b: mov    (%rsp),%r15
  0x00007f757048665f: mov    0x8(%rsp),%r14
  0x00007f7570486664: mov    0x10(%rsp),%r13
  0x00007f7570486669: mov    0x18(%rsp),%r12
  0x00007f757048666e: mov    0x20(%rsp),%r11
  0x00007f7570486673: mov    0x28(%rsp),%r10
  0x00007f7570486678: mov    0x30(%rsp),%r9
  0x00007f757048667d: mov    0x38(%rsp),%r8
  0x00007f7570486682: mov    0x40(%rsp),%rdi
  0x00007f7570486687: mov    0x48(%rsp),%rsi
  0x00007f757048668c: mov    0x50(%rsp),%rbp
  0x00007f7570486691: mov    0x60(%rsp),%rbx
  0x00007f7570486696: mov    0x68(%rsp),%rdx
  0x00007f757048669b: mov    0x70(%rsp),%rcx
  0x00007f75704866a0: mov    0x78(%rsp),%rax
  0x00007f75704866a5: add    $0x80,%rsp
  0x00007f75704866ac: add    $0x8,%rsp
  0x00007f75704866b0: popfq  
  0x00007f75704866b1: mov    %r13,%rsp
  0x00007f75704866b4: pop    %rax
  0x00007f75704866b5: mov    %rsp,%r13
  0x00007f75704866b8: sub    $0x40,%rsp
  0x00007f75704866bc: mov    %rax,(%rsp)
  0x00007f75704866c0: mov    %rsi,0x38(%rsp)
  0x00007f75704866c5: mov    %rdx,0x30(%rsp)
  0x00007f75704866ca: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704866d4: mov    %rax,0x28(%rsp)
  0x00007f75704866d9: mov    %rcx,0x20(%rsp)
  0x00007f75704866de: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704866e8: mov    %rax,0x18(%rsp)
  0x00007f75704866ed: mov    %r8,0x10(%rsp)
  0x00007f75704866f2: mov    %r9d,0x8(%rsp)
  0x00007f75704866f7: mov    0x40(%rbx),%rcx
  0x00007f75704866fb: jmpq   *%rcx

AHE@0x00007f75800c2d98: 0xbbebea00 i2c: 0x00007f75704867a0 c2i: 0x00007f75704868c0 c2iUV: 0x00007f7570486893
i2c argument handler #0 for: receiver (JJB)V (596 bytes generated)
c2i argument handler starts at 0x7f75704868c0
  0x00007f75704867a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704867a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704867ae: cmp    %r11,%rax
  0x00007f75704867b1: jbe    0x00007f75704867ca
  0x00007f75704867b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704867c1: cmp    %r11,%rax
  0x00007f75704867c4: jb     0x00007f7570486867
  0x00007f75704867ca: movabs $0x7f7570369420,%r11
  0x00007f75704867d4: cmp    %r11,%rax
  0x00007f75704867d7: jbe    0x00007f75704867f0
  0x00007f75704867dd: movabs $0x7f757036de58,%r11
  0x00007f75704867e7: cmp    %r11,%rax
  0x00007f75704867ea: jb     0x00007f7570486867
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704867f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704867f5: sub    $0x80,%rsp
  0x00007f75704867fc: mov    %rax,0x78(%rsp)
  0x00007f7570486801: mov    %rcx,0x70(%rsp)
  0x00007f7570486806: mov    %rdx,0x68(%rsp)
  0x00007f757048680b: mov    %rbx,0x60(%rsp)
  0x00007f7570486810: mov    %rbp,0x50(%rsp)
  0x00007f7570486815: mov    %rsi,0x48(%rsp)
  0x00007f757048681a: mov    %rdi,0x40(%rsp)
  0x00007f757048681f: mov    %r8,0x38(%rsp)
  0x00007f7570486824: mov    %r9,0x30(%rsp)
  0x00007f7570486829: mov    %r10,0x28(%rsp)
  0x00007f757048682e: mov    %r11,0x20(%rsp)
  0x00007f7570486833: mov    %r12,0x18(%rsp)
  0x00007f7570486838: mov    %r13,0x10(%rsp)
  0x00007f757048683d: mov    %r14,0x8(%rsp)
  0x00007f7570486842: mov    %r15,(%rsp)
  0x00007f7570486846: movabs $0x7f758592f470,%rdi
  0x00007f7570486850: movabs $0x7f75704867f0,%rsi
  0x00007f757048685a: mov    %rsp,%rdx
  0x00007f757048685d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486861: callq  0x00007f75853729fa
  0x00007f7570486866: hlt    
  ;; } verify_i2ce 
  0x00007f7570486867: mov    %rsp,%r11
  0x00007f757048686a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048686e: push   %rax
  0x00007f757048686f: mov    %r11,%rax
  0x00007f7570486872: mov    0x50(%rbx),%r11
  0x00007f7570486876: mov    0x30(%rax),%rsi
  0x00007f757048687a: mov    0x20(%rax),%rdx
  0x00007f757048687e: mov    0x10(%rax),%rcx
  0x00007f7570486882: mov    0x8(%rax),%r8d
  0x00007f7570486886: mov    %rbx,0x258(%r15)
  0x00007f757048688d: mov    %rbx,%rax
  0x00007f7570486890: jmpq   *%r11
  0x00007f7570486893: mov    0x8(%rsi),%ebx
  0x00007f7570486896: shl    $0x3,%rbx
  0x00007f757048689a: cmp    0x10(%rax),%rbx
  0x00007f757048689e: mov    0x8(%rax),%rbx
  0x00007f75704868a2: je     0x00007f75704868ad
  0x00007f75704868a8: jmpq   0x00007f757046ec40
  0x00007f75704868ad: cmpq   $0x0,0x58(%rbx)
  0x00007f75704868b5: je     0x00007f75704869b0
  0x00007f75704868bb: jmpq   0x00007f757046ec40
  0x00007f75704868c0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704868c8: je     0x00007f75704869b0
  0x00007f75704868ce: mov    %rsp,%r13
  0x00007f75704868d1: mov    (%rsp),%rax
  0x00007f75704868d5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704868d9: pushfq 
  0x00007f75704868da: sub    $0x8,%rsp
  0x00007f75704868de: mov    %rsp,-0x28(%rsp)
  0x00007f75704868e3: sub    $0x80,%rsp
  0x00007f75704868ea: mov    %rax,0x78(%rsp)
  0x00007f75704868ef: mov    %rcx,0x70(%rsp)
  0x00007f75704868f4: mov    %rdx,0x68(%rsp)
  0x00007f75704868f9: mov    %rbx,0x60(%rsp)
  0x00007f75704868fe: mov    %rbp,0x50(%rsp)
  0x00007f7570486903: mov    %rsi,0x48(%rsp)
  0x00007f7570486908: mov    %rdi,0x40(%rsp)
  0x00007f757048690d: mov    %r8,0x38(%rsp)
  0x00007f7570486912: mov    %r9,0x30(%rsp)
  0x00007f7570486917: mov    %r10,0x28(%rsp)
  0x00007f757048691c: mov    %r11,0x20(%rsp)
  0x00007f7570486921: mov    %r12,0x18(%rsp)
  0x00007f7570486926: mov    %r13,0x10(%rsp)
  0x00007f757048692b: mov    %r14,0x8(%rsp)
  0x00007f7570486930: mov    %r15,(%rsp)
  0x00007f7570486934: sub    $0x200,%rsp
  0x00007f757048693b: fxsave64 (%rsp)
  0x00007f7570486940: mov    %rbx,%rdi
  0x00007f7570486943: mov    %rax,%rsi
  0x00007f7570486946: callq  0x00007f7585522bca
  0x00007f757048694b: fxrstor64 (%rsp)
  0x00007f7570486950: add    $0x200,%rsp
  0x00007f7570486957: mov    (%rsp),%r15
  0x00007f757048695b: mov    0x8(%rsp),%r14
  0x00007f7570486960: mov    0x10(%rsp),%r13
  0x00007f7570486965: mov    0x18(%rsp),%r12
  0x00007f757048696a: mov    0x20(%rsp),%r11
  0x00007f757048696f: mov    0x28(%rsp),%r10
  0x00007f7570486974: mov    0x30(%rsp),%r9
  0x00007f7570486979: mov    0x38(%rsp),%r8
  0x00007f757048697e: mov    0x40(%rsp),%rdi
  0x00007f7570486983: mov    0x48(%rsp),%rsi
  0x00007f7570486988: mov    0x50(%rsp),%rbp
  0x00007f757048698d: mov    0x60(%rsp),%rbx
  0x00007f7570486992: mov    0x68(%rsp),%rdx
  0x00007f7570486997: mov    0x70(%rsp),%rcx
  0x00007f757048699c: mov    0x78(%rsp),%rax
  0x00007f75704869a1: add    $0x80,%rsp
  0x00007f75704869a8: add    $0x8,%rsp
  0x00007f75704869ac: popfq  
  0x00007f75704869ad: mov    %r13,%rsp
  0x00007f75704869b0: pop    %rax
  0x00007f75704869b1: mov    %rsp,%r13
  0x00007f75704869b4: sub    $0x40,%rsp
  0x00007f75704869b8: mov    %rax,(%rsp)
  0x00007f75704869bc: mov    %rsi,0x30(%rsp)
  0x00007f75704869c1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704869cb: mov    %rax,0x28(%rsp)
  0x00007f75704869d0: mov    %rdx,0x20(%rsp)
  0x00007f75704869d5: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704869df: mov    %rax,0x18(%rsp)
  0x00007f75704869e4: mov    %rcx,0x10(%rsp)
  0x00007f75704869e9: mov    %r8d,0x8(%rsp)
  0x00007f75704869ee: mov    0x40(%rbx),%rcx
  0x00007f75704869f2: jmpq   *%rcx

AHE@0x00007f75800c2de0: 0xbbebe000 i2c: 0x00007f7570486aa0 c2i: 0x00007f7570486bbc c2iUV: 0x00007f7570486b8f
i2c argument handler #0 for: receiver (JJ)J (587 bytes generated)
c2i argument handler starts at 0x7f7570486bbc
  0x00007f7570486aa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570486aa4: movabs $0x7f757036e3e0,%r11
  0x00007f7570486aae: cmp    %r11,%rax
  0x00007f7570486ab1: jbe    0x00007f7570486aca
  0x00007f7570486ab7: movabs $0x7f757046e3e0,%r11
  0x00007f7570486ac1: cmp    %r11,%rax
  0x00007f7570486ac4: jb     0x00007f7570486b67
  0x00007f7570486aca: movabs $0x7f7570369420,%r11
  0x00007f7570486ad4: cmp    %r11,%rax
  0x00007f7570486ad7: jbe    0x00007f7570486af0
  0x00007f7570486add: movabs $0x7f757036de58,%r11
  0x00007f7570486ae7: cmp    %r11,%rax
  0x00007f7570486aea: jb     0x00007f7570486b67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570486af0: mov    %rsp,-0x28(%rsp)
  0x00007f7570486af5: sub    $0x80,%rsp
  0x00007f7570486afc: mov    %rax,0x78(%rsp)
  0x00007f7570486b01: mov    %rcx,0x70(%rsp)
  0x00007f7570486b06: mov    %rdx,0x68(%rsp)
  0x00007f7570486b0b: mov    %rbx,0x60(%rsp)
  0x00007f7570486b10: mov    %rbp,0x50(%rsp)
  0x00007f7570486b15: mov    %rsi,0x48(%rsp)
  0x00007f7570486b1a: mov    %rdi,0x40(%rsp)
  0x00007f7570486b1f: mov    %r8,0x38(%rsp)
  0x00007f7570486b24: mov    %r9,0x30(%rsp)
  0x00007f7570486b29: mov    %r10,0x28(%rsp)
  0x00007f7570486b2e: mov    %r11,0x20(%rsp)
  0x00007f7570486b33: mov    %r12,0x18(%rsp)
  0x00007f7570486b38: mov    %r13,0x10(%rsp)
  0x00007f7570486b3d: mov    %r14,0x8(%rsp)
  0x00007f7570486b42: mov    %r15,(%rsp)
  0x00007f7570486b46: movabs $0x7f758592f470,%rdi
  0x00007f7570486b50: movabs $0x7f7570486af0,%rsi
  0x00007f7570486b5a: mov    %rsp,%rdx
  0x00007f7570486b5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486b61: callq  0x00007f75853729fa
  0x00007f7570486b66: hlt    
  ;; } verify_i2ce 
  0x00007f7570486b67: mov    %rsp,%r11
  0x00007f7570486b6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486b6e: push   %rax
  0x00007f7570486b6f: mov    %r11,%rax
  0x00007f7570486b72: mov    0x50(%rbx),%r11
  0x00007f7570486b76: mov    0x28(%rax),%rsi
  0x00007f7570486b7a: mov    0x18(%rax),%rdx
  0x00007f7570486b7e: mov    0x8(%rax),%rcx
  0x00007f7570486b82: mov    %rbx,0x258(%r15)
  0x00007f7570486b89: mov    %rbx,%rax
  0x00007f7570486b8c: jmpq   *%r11
  0x00007f7570486b8f: mov    0x8(%rsi),%ebx
  0x00007f7570486b92: shl    $0x3,%rbx
  0x00007f7570486b96: cmp    0x10(%rax),%rbx
  0x00007f7570486b9a: mov    0x8(%rax),%rbx
  0x00007f7570486b9e: je     0x00007f7570486ba9
  0x00007f7570486ba4: jmpq   0x00007f757046ec40
  0x00007f7570486ba9: cmpq   $0x0,0x58(%rbx)
  0x00007f7570486bb1: je     0x00007f7570486cac
  0x00007f7570486bb7: jmpq   0x00007f757046ec40
  0x00007f7570486bbc: cmpq   $0x0,0x58(%rbx)
  0x00007f7570486bc4: je     0x00007f7570486cac
  0x00007f7570486bca: mov    %rsp,%r13
  0x00007f7570486bcd: mov    (%rsp),%rax
  0x00007f7570486bd1: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486bd5: pushfq 
  0x00007f7570486bd6: sub    $0x8,%rsp
  0x00007f7570486bda: mov    %rsp,-0x28(%rsp)
  0x00007f7570486bdf: sub    $0x80,%rsp
  0x00007f7570486be6: mov    %rax,0x78(%rsp)
  0x00007f7570486beb: mov    %rcx,0x70(%rsp)
  0x00007f7570486bf0: mov    %rdx,0x68(%rsp)
  0x00007f7570486bf5: mov    %rbx,0x60(%rsp)
  0x00007f7570486bfa: mov    %rbp,0x50(%rsp)
  0x00007f7570486bff: mov    %rsi,0x48(%rsp)
  0x00007f7570486c04: mov    %rdi,0x40(%rsp)
  0x00007f7570486c09: mov    %r8,0x38(%rsp)
  0x00007f7570486c0e: mov    %r9,0x30(%rsp)
  0x00007f7570486c13: mov    %r10,0x28(%rsp)
  0x00007f7570486c18: mov    %r11,0x20(%rsp)
  0x00007f7570486c1d: mov    %r12,0x18(%rsp)
  0x00007f7570486c22: mov    %r13,0x10(%rsp)
  0x00007f7570486c27: mov    %r14,0x8(%rsp)
  0x00007f7570486c2c: mov    %r15,(%rsp)
  0x00007f7570486c30: sub    $0x200,%rsp
  0x00007f7570486c37: fxsave64 (%rsp)
  0x00007f7570486c3c: mov    %rbx,%rdi
  0x00007f7570486c3f: mov    %rax,%rsi
  0x00007f7570486c42: callq  0x00007f7585522bca
  0x00007f7570486c47: fxrstor64 (%rsp)
  0x00007f7570486c4c: add    $0x200,%rsp
  0x00007f7570486c53: mov    (%rsp),%r15
  0x00007f7570486c57: mov    0x8(%rsp),%r14
  0x00007f7570486c5c: mov    0x10(%rsp),%r13
  0x00007f7570486c61: mov    0x18(%rsp),%r12
  0x00007f7570486c66: mov    0x20(%rsp),%r11
  0x00007f7570486c6b: mov    0x28(%rsp),%r10
  0x00007f7570486c70: mov    0x30(%rsp),%r9
  0x00007f7570486c75: mov    0x38(%rsp),%r8
  0x00007f7570486c7a: mov    0x40(%rsp),%rdi
  0x00007f7570486c7f: mov    0x48(%rsp),%rsi
  0x00007f7570486c84: mov    0x50(%rsp),%rbp
  0x00007f7570486c89: mov    0x60(%rsp),%rbx
  0x00007f7570486c8e: mov    0x68(%rsp),%rdx
  0x00007f7570486c93: mov    0x70(%rsp),%rcx
  0x00007f7570486c98: mov    0x78(%rsp),%rax
  0x00007f7570486c9d: add    $0x80,%rsp
  0x00007f7570486ca4: add    $0x8,%rsp
  0x00007f7570486ca8: popfq  
  0x00007f7570486ca9: mov    %r13,%rsp
  0x00007f7570486cac: pop    %rax
  0x00007f7570486cad: mov    %rsp,%r13
  0x00007f7570486cb0: sub    $0x30,%rsp
  0x00007f7570486cb4: mov    %rax,(%rsp)
  0x00007f7570486cb8: mov    %rsi,0x28(%rsp)
  0x00007f7570486cbd: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570486cc7: mov    %rax,0x20(%rsp)
  0x00007f7570486ccc: mov    %rdx,0x18(%rsp)
  0x00007f7570486cd1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570486cdb: mov    %rax,0x10(%rsp)
  0x00007f7570486ce0: mov    %rcx,0x8(%rsp)
  0x00007f7570486ce5: mov    0x40(%rbx),%rcx
  0x00007f7570486ce9: jmpq   *%rcx

AHE@0x00007f75800c2e28: 0xbbe00000 i2c: 0x00007f7570486da0 c2i: 0x00007f7570486eb8 c2iUV: 0x00007f7570486e8b
i2c argument handler #0 for: receiver (J)J (563 bytes generated)
c2i argument handler starts at 0x7f7570486eb8
  0x00007f7570486da0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570486da4: movabs $0x7f757036e3e0,%r11
  0x00007f7570486dae: cmp    %r11,%rax
  0x00007f7570486db1: jbe    0x00007f7570486dca
  0x00007f7570486db7: movabs $0x7f757046e3e0,%r11
  0x00007f7570486dc1: cmp    %r11,%rax
  0x00007f7570486dc4: jb     0x00007f7570486e67
  0x00007f7570486dca: movabs $0x7f7570369420,%r11
  0x00007f7570486dd4: cmp    %r11,%rax
  0x00007f7570486dd7: jbe    0x00007f7570486df0
  0x00007f7570486ddd: movabs $0x7f757036de58,%r11
  0x00007f7570486de7: cmp    %r11,%rax
  0x00007f7570486dea: jb     0x00007f7570486e67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570486df0: mov    %rsp,-0x28(%rsp)
  0x00007f7570486df5: sub    $0x80,%rsp
  0x00007f7570486dfc: mov    %rax,0x78(%rsp)
  0x00007f7570486e01: mov    %rcx,0x70(%rsp)
  0x00007f7570486e06: mov    %rdx,0x68(%rsp)
  0x00007f7570486e0b: mov    %rbx,0x60(%rsp)
  0x00007f7570486e10: mov    %rbp,0x50(%rsp)
  0x00007f7570486e15: mov    %rsi,0x48(%rsp)
  0x00007f7570486e1a: mov    %rdi,0x40(%rsp)
  0x00007f7570486e1f: mov    %r8,0x38(%rsp)
  0x00007f7570486e24: mov    %r9,0x30(%rsp)
  0x00007f7570486e29: mov    %r10,0x28(%rsp)
  0x00007f7570486e2e: mov    %r11,0x20(%rsp)
  0x00007f7570486e33: mov    %r12,0x18(%rsp)
  0x00007f7570486e38: mov    %r13,0x10(%rsp)
  0x00007f7570486e3d: mov    %r14,0x8(%rsp)
  0x00007f7570486e42: mov    %r15,(%rsp)
  0x00007f7570486e46: movabs $0x7f758592f470,%rdi
  0x00007f7570486e50: movabs $0x7f7570486df0,%rsi
  0x00007f7570486e5a: mov    %rsp,%rdx
  0x00007f7570486e5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486e61: callq  0x00007f75853729fa
  0x00007f7570486e66: hlt    
  ;; } verify_i2ce 
  0x00007f7570486e67: mov    %rsp,%r11
  0x00007f7570486e6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486e6e: push   %rax
  0x00007f7570486e6f: mov    %r11,%rax
  0x00007f7570486e72: mov    0x50(%rbx),%r11
  0x00007f7570486e76: mov    0x18(%rax),%rsi
  0x00007f7570486e7a: mov    0x8(%rax),%rdx
  0x00007f7570486e7e: mov    %rbx,0x258(%r15)
  0x00007f7570486e85: mov    %rbx,%rax
  0x00007f7570486e88: jmpq   *%r11
  0x00007f7570486e8b: mov    0x8(%rsi),%ebx
  0x00007f7570486e8e: shl    $0x3,%rbx
  0x00007f7570486e92: cmp    0x10(%rax),%rbx
  0x00007f7570486e96: mov    0x8(%rax),%rbx
  0x00007f7570486e9a: je     0x00007f7570486ea5
  0x00007f7570486ea0: jmpq   0x00007f757046ec40
  0x00007f7570486ea5: cmpq   $0x0,0x58(%rbx)
  0x00007f7570486ead: je     0x00007f7570486fa8
  0x00007f7570486eb3: jmpq   0x00007f757046ec40
  0x00007f7570486eb8: cmpq   $0x0,0x58(%rbx)
  0x00007f7570486ec0: je     0x00007f7570486fa8
  0x00007f7570486ec6: mov    %rsp,%r13
  0x00007f7570486ec9: mov    (%rsp),%rax
  0x00007f7570486ecd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570486ed1: pushfq 
  0x00007f7570486ed2: sub    $0x8,%rsp
  0x00007f7570486ed6: mov    %rsp,-0x28(%rsp)
  0x00007f7570486edb: sub    $0x80,%rsp
  0x00007f7570486ee2: mov    %rax,0x78(%rsp)
  0x00007f7570486ee7: mov    %rcx,0x70(%rsp)
  0x00007f7570486eec: mov    %rdx,0x68(%rsp)
  0x00007f7570486ef1: mov    %rbx,0x60(%rsp)
  0x00007f7570486ef6: mov    %rbp,0x50(%rsp)
  0x00007f7570486efb: mov    %rsi,0x48(%rsp)
  0x00007f7570486f00: mov    %rdi,0x40(%rsp)
  0x00007f7570486f05: mov    %r8,0x38(%rsp)
  0x00007f7570486f0a: mov    %r9,0x30(%rsp)
  0x00007f7570486f0f: mov    %r10,0x28(%rsp)
  0x00007f7570486f14: mov    %r11,0x20(%rsp)
  0x00007f7570486f19: mov    %r12,0x18(%rsp)
  0x00007f7570486f1e: mov    %r13,0x10(%rsp)
  0x00007f7570486f23: mov    %r14,0x8(%rsp)
  0x00007f7570486f28: mov    %r15,(%rsp)
  0x00007f7570486f2c: sub    $0x200,%rsp
  0x00007f7570486f33: fxsave64 (%rsp)
  0x00007f7570486f38: mov    %rbx,%rdi
  0x00007f7570486f3b: mov    %rax,%rsi
  0x00007f7570486f3e: callq  0x00007f7585522bca
  0x00007f7570486f43: fxrstor64 (%rsp)
  0x00007f7570486f48: add    $0x200,%rsp
  0x00007f7570486f4f: mov    (%rsp),%r15
  0x00007f7570486f53: mov    0x8(%rsp),%r14
  0x00007f7570486f58: mov    0x10(%rsp),%r13
  0x00007f7570486f5d: mov    0x18(%rsp),%r12
  0x00007f7570486f62: mov    0x20(%rsp),%r11
  0x00007f7570486f67: mov    0x28(%rsp),%r10
  0x00007f7570486f6c: mov    0x30(%rsp),%r9
  0x00007f7570486f71: mov    0x38(%rsp),%r8
  0x00007f7570486f76: mov    0x40(%rsp),%rdi
  0x00007f7570486f7b: mov    0x48(%rsp),%rsi
  0x00007f7570486f80: mov    0x50(%rsp),%rbp
  0x00007f7570486f85: mov    0x60(%rsp),%rbx
  0x00007f7570486f8a: mov    0x68(%rsp),%rdx
  0x00007f7570486f8f: mov    0x70(%rsp),%rcx
  0x00007f7570486f94: mov    0x78(%rsp),%rax
  0x00007f7570486f99: add    $0x80,%rsp
  0x00007f7570486fa0: add    $0x8,%rsp
  0x00007f7570486fa4: popfq  
  0x00007f7570486fa5: mov    %r13,%rsp
  0x00007f7570486fa8: pop    %rax
  0x00007f7570486fa9: mov    %rsp,%r13
  0x00007f7570486fac: sub    $0x20,%rsp
  0x00007f7570486fb0: mov    %rax,(%rsp)
  0x00007f7570486fb4: mov    %rsi,0x18(%rsp)
  0x00007f7570486fb9: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570486fc3: mov    %rax,0x10(%rsp)
  0x00007f7570486fc8: mov    %rdx,0x8(%rsp)
  0x00007f7570486fcd: mov    0x40(%rbx),%rcx
  0x00007f7570486fd1: jmpq   *%rcx

AHE@0x00007f75800c2e70: 0xbb000000 i2c: 0x00007f75704870a0 c2i: 0x00007f75704871b8 c2iUV: 0x00007f757048718b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704871b8
  0x00007f75704870a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704870a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704870ae: cmp    %r11,%rax
  0x00007f75704870b1: jbe    0x00007f75704870ca
  0x00007f75704870b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704870c1: cmp    %r11,%rax
  0x00007f75704870c4: jb     0x00007f7570487167
  0x00007f75704870ca: movabs $0x7f7570369420,%r11
  0x00007f75704870d4: cmp    %r11,%rax
  0x00007f75704870d7: jbe    0x00007f75704870f0
  0x00007f75704870dd: movabs $0x7f757036de58,%r11
  0x00007f75704870e7: cmp    %r11,%rax
  0x00007f75704870ea: jb     0x00007f7570487167
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704870f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704870f5: sub    $0x80,%rsp
  0x00007f75704870fc: mov    %rax,0x78(%rsp)
  0x00007f7570487101: mov    %rcx,0x70(%rsp)
  0x00007f7570487106: mov    %rdx,0x68(%rsp)
  0x00007f757048710b: mov    %rbx,0x60(%rsp)
  0x00007f7570487110: mov    %rbp,0x50(%rsp)
  0x00007f7570487115: mov    %rsi,0x48(%rsp)
  0x00007f757048711a: mov    %rdi,0x40(%rsp)
  0x00007f757048711f: mov    %r8,0x38(%rsp)
  0x00007f7570487124: mov    %r9,0x30(%rsp)
  0x00007f7570487129: mov    %r10,0x28(%rsp)
  0x00007f757048712e: mov    %r11,0x20(%rsp)
  0x00007f7570487133: mov    %r12,0x18(%rsp)
  0x00007f7570487138: mov    %r13,0x10(%rsp)
  0x00007f757048713d: mov    %r14,0x8(%rsp)
  0x00007f7570487142: mov    %r15,(%rsp)
  0x00007f7570487146: movabs $0x7f758592f470,%rdi
  0x00007f7570487150: movabs $0x7f75704870f0,%rsi
  0x00007f757048715a: mov    %rsp,%rdx
  0x00007f757048715d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487161: callq  0x00007f75853729fa
  0x00007f7570487166: hlt    
  ;; } verify_i2ce 
  0x00007f7570487167: mov    %rsp,%r11
  0x00007f757048716a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048716e: push   %rax
  0x00007f757048716f: mov    %r11,%rax
  0x00007f7570487172: mov    0x50(%rbx),%r11
  0x00007f7570487176: mov    0x10(%rax),%rsi
  0x00007f757048717a: mov    0x8(%rax),%rdx
  0x00007f757048717e: mov    %rbx,0x258(%r15)
  0x00007f7570487185: mov    %rbx,%rax
  0x00007f7570487188: jmpq   *%r11
  0x00007f757048718b: mov    0x8(%rsi),%ebx
  0x00007f757048718e: shl    $0x3,%rbx
  0x00007f7570487192: cmp    0x10(%rax),%rbx
  0x00007f7570487196: mov    0x8(%rax),%rbx
  0x00007f757048719a: je     0x00007f75704871a5
  0x00007f75704871a0: jmpq   0x00007f757046ec40
  0x00007f75704871a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704871ad: je     0x00007f75704872a8
  0x00007f75704871b3: jmpq   0x00007f757046ec40
  0x00007f75704871b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704871c0: je     0x00007f75704872a8
  0x00007f75704871c6: mov    %rsp,%r13
  0x00007f75704871c9: mov    (%rsp),%rax
  0x00007f75704871cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704871d1: pushfq 
  0x00007f75704871d2: sub    $0x8,%rsp
  0x00007f75704871d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704871db: sub    $0x80,%rsp
  0x00007f75704871e2: mov    %rax,0x78(%rsp)
  0x00007f75704871e7: mov    %rcx,0x70(%rsp)
  0x00007f75704871ec: mov    %rdx,0x68(%rsp)
  0x00007f75704871f1: mov    %rbx,0x60(%rsp)
  0x00007f75704871f6: mov    %rbp,0x50(%rsp)
  0x00007f75704871fb: mov    %rsi,0x48(%rsp)
  0x00007f7570487200: mov    %rdi,0x40(%rsp)
  0x00007f7570487205: mov    %r8,0x38(%rsp)
  0x00007f757048720a: mov    %r9,0x30(%rsp)
  0x00007f757048720f: mov    %r10,0x28(%rsp)
  0x00007f7570487214: mov    %r11,0x20(%rsp)
  0x00007f7570487219: mov    %r12,0x18(%rsp)
  0x00007f757048721e: mov    %r13,0x10(%rsp)
  0x00007f7570487223: mov    %r14,0x8(%rsp)
  0x00007f7570487228: mov    %r15,(%rsp)
  0x00007f757048722c: sub    $0x200,%rsp
  0x00007f7570487233: fxsave64 (%rsp)
  0x00007f7570487238: mov    %rbx,%rdi
  0x00007f757048723b: mov    %rax,%rsi
  0x00007f757048723e: callq  0x00007f7585522bca
  0x00007f7570487243: fxrstor64 (%rsp)
  0x00007f7570487248: add    $0x200,%rsp
  0x00007f757048724f: mov    (%rsp),%r15
  0x00007f7570487253: mov    0x8(%rsp),%r14
  0x00007f7570487258: mov    0x10(%rsp),%r13
  0x00007f757048725d: mov    0x18(%rsp),%r12
  0x00007f7570487262: mov    0x20(%rsp),%r11
  0x00007f7570487267: mov    0x28(%rsp),%r10
  0x00007f757048726c: mov    0x30(%rsp),%r9
  0x00007f7570487271: mov    0x38(%rsp),%r8
  0x00007f7570487276: mov    0x40(%rsp),%rdi
  0x00007f757048727b: mov    0x48(%rsp),%rsi
  0x00007f7570487280: mov    0x50(%rsp),%rbp
  0x00007f7570487285: mov    0x60(%rsp),%rbx
  0x00007f757048728a: mov    0x68(%rsp),%rdx
  0x00007f757048728f: mov    0x70(%rsp),%rcx
  0x00007f7570487294: mov    0x78(%rsp),%rax
  0x00007f7570487299: add    $0x80,%rsp
  0x00007f75704872a0: add    $0x8,%rsp
  0x00007f75704872a4: popfq  
  0x00007f75704872a5: mov    %r13,%rsp
  0x00007f75704872a8: pop    %rax
  0x00007f75704872a9: mov    %rsp,%r13
  0x00007f75704872ac: sub    $0x20,%rsp
  0x00007f75704872b0: mov    %rax,(%rsp)
  0x00007f75704872b4: mov    %rsi,0x10(%rsp)
  0x00007f75704872b9: mov    %rdx,0x8(%rsp)
  0x00007f75704872be: mov    0x40(%rbx),%rcx
  0x00007f75704872c2: jmpq   *%rcx

AHE@0x00007f75800c2eb8: 0xbb000000 i2c: 0x00007f75704873a0 c2i: 0x00007f75704874b8 c2iUV: 0x00007f757048748b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Z (548 bytes generated)
c2i argument handler starts at 0x7f75704874b8
  0x00007f75704873a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704873a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704873ae: cmp    %r11,%rax
  0x00007f75704873b1: jbe    0x00007f75704873ca
  0x00007f75704873b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704873c1: cmp    %r11,%rax
  0x00007f75704873c4: jb     0x00007f7570487467
  0x00007f75704873ca: movabs $0x7f7570369420,%r11
  0x00007f75704873d4: cmp    %r11,%rax
  0x00007f75704873d7: jbe    0x00007f75704873f0
  0x00007f75704873dd: movabs $0x7f757036de58,%r11
  0x00007f75704873e7: cmp    %r11,%rax
  0x00007f75704873ea: jb     0x00007f7570487467
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704873f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704873f5: sub    $0x80,%rsp
  0x00007f75704873fc: mov    %rax,0x78(%rsp)
  0x00007f7570487401: mov    %rcx,0x70(%rsp)
  0x00007f7570487406: mov    %rdx,0x68(%rsp)
  0x00007f757048740b: mov    %rbx,0x60(%rsp)
  0x00007f7570487410: mov    %rbp,0x50(%rsp)
  0x00007f7570487415: mov    %rsi,0x48(%rsp)
  0x00007f757048741a: mov    %rdi,0x40(%rsp)
  0x00007f757048741f: mov    %r8,0x38(%rsp)
  0x00007f7570487424: mov    %r9,0x30(%rsp)
  0x00007f7570487429: mov    %r10,0x28(%rsp)
  0x00007f757048742e: mov    %r11,0x20(%rsp)
  0x00007f7570487433: mov    %r12,0x18(%rsp)
  0x00007f7570487438: mov    %r13,0x10(%rsp)
  0x00007f757048743d: mov    %r14,0x8(%rsp)
  0x00007f7570487442: mov    %r15,(%rsp)
  0x00007f7570487446: movabs $0x7f758592f470,%rdi
  0x00007f7570487450: movabs $0x7f75704873f0,%rsi
  0x00007f757048745a: mov    %rsp,%rdx
  0x00007f757048745d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487461: callq  0x00007f75853729fa
  0x00007f7570487466: hlt    
  ;; } verify_i2ce 
  0x00007f7570487467: mov    %rsp,%r11
  0x00007f757048746a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048746e: push   %rax
  0x00007f757048746f: mov    %r11,%rax
  0x00007f7570487472: mov    0x50(%rbx),%r11
  0x00007f7570487476: mov    0x10(%rax),%rsi
  0x00007f757048747a: mov    0x8(%rax),%rdx
  0x00007f757048747e: mov    %rbx,0x258(%r15)
  0x00007f7570487485: mov    %rbx,%rax
  0x00007f7570487488: jmpq   *%r11
  0x00007f757048748b: mov    0x8(%rsi),%ebx
  0x00007f757048748e: shl    $0x3,%rbx
  0x00007f7570487492: cmp    0x10(%rax),%rbx
  0x00007f7570487496: mov    0x8(%rax),%rbx
  0x00007f757048749a: je     0x00007f75704874a5
  0x00007f75704874a0: jmpq   0x00007f757046ec40
  0x00007f75704874a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704874ad: je     0x00007f75704875a8
  0x00007f75704874b3: jmpq   0x00007f757046ec40
  0x00007f75704874b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704874c0: je     0x00007f75704875a8
  0x00007f75704874c6: mov    %rsp,%r13
  0x00007f75704874c9: mov    (%rsp),%rax
  0x00007f75704874cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704874d1: pushfq 
  0x00007f75704874d2: sub    $0x8,%rsp
  0x00007f75704874d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704874db: sub    $0x80,%rsp
  0x00007f75704874e2: mov    %rax,0x78(%rsp)
  0x00007f75704874e7: mov    %rcx,0x70(%rsp)
  0x00007f75704874ec: mov    %rdx,0x68(%rsp)
  0x00007f75704874f1: mov    %rbx,0x60(%rsp)
  0x00007f75704874f6: mov    %rbp,0x50(%rsp)
  0x00007f75704874fb: mov    %rsi,0x48(%rsp)
  0x00007f7570487500: mov    %rdi,0x40(%rsp)
  0x00007f7570487505: mov    %r8,0x38(%rsp)
  0x00007f757048750a: mov    %r9,0x30(%rsp)
  0x00007f757048750f: mov    %r10,0x28(%rsp)
  0x00007f7570487514: mov    %r11,0x20(%rsp)
  0x00007f7570487519: mov    %r12,0x18(%rsp)
  0x00007f757048751e: mov    %r13,0x10(%rsp)
  0x00007f7570487523: mov    %r14,0x8(%rsp)
  0x00007f7570487528: mov    %r15,(%rsp)
  0x00007f757048752c: sub    $0x200,%rsp
  0x00007f7570487533: fxsave64 (%rsp)
  0x00007f7570487538: mov    %rbx,%rdi
  0x00007f757048753b: mov    %rax,%rsi
  0x00007f757048753e: callq  0x00007f7585522bca
  0x00007f7570487543: fxrstor64 (%rsp)
  0x00007f7570487548: add    $0x200,%rsp
  0x00007f757048754f: mov    (%rsp),%r15
  0x00007f7570487553: mov    0x8(%rsp),%r14
  0x00007f7570487558: mov    0x10(%rsp),%r13
  0x00007f757048755d: mov    0x18(%rsp),%r12
  0x00007f7570487562: mov    0x20(%rsp),%r11
  0x00007f7570487567: mov    0x28(%rsp),%r10
  0x00007f757048756c: mov    0x30(%rsp),%r9
  0x00007f7570487571: mov    0x38(%rsp),%r8
  0x00007f7570487576: mov    0x40(%rsp),%rdi
  0x00007f757048757b: mov    0x48(%rsp),%rsi
  0x00007f7570487580: mov    0x50(%rsp),%rbp
  0x00007f7570487585: mov    0x60(%rsp),%rbx
  0x00007f757048758a: mov    0x68(%rsp),%rdx
  0x00007f757048758f: mov    0x70(%rsp),%rcx
  0x00007f7570487594: mov    0x78(%rsp),%rax
  0x00007f7570487599: add    $0x80,%rsp
  0x00007f75704875a0: add    $0x8,%rsp
  0x00007f75704875a4: popfq  
  0x00007f75704875a5: mov    %r13,%rsp
  0x00007f75704875a8: pop    %rax
  0x00007f75704875a9: mov    %rsp,%r13
  0x00007f75704875ac: sub    $0x20,%rsp
  0x00007f75704875b0: mov    %rax,(%rsp)
  0x00007f75704875b4: mov    %rsi,0x10(%rsp)
  0x00007f75704875b9: mov    %rdx,0x8(%rsp)
  0x00007f75704875be: mov    0x40(%rbx),%rcx
  0x00007f75704875c2: jmpq   *%rcx

AHE@0x00007f75800c2f00: 0xbb000000 i2c: 0x00007f75704876a0 c2i: 0x00007f75704877b8 c2iUV: 0x00007f757048778b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)J (548 bytes generated)
c2i argument handler starts at 0x7f75704877b8
  0x00007f75704876a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704876a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704876ae: cmp    %r11,%rax
  0x00007f75704876b1: jbe    0x00007f75704876ca
  0x00007f75704876b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704876c1: cmp    %r11,%rax
  0x00007f75704876c4: jb     0x00007f7570487767
  0x00007f75704876ca: movabs $0x7f7570369420,%r11
  0x00007f75704876d4: cmp    %r11,%rax
  0x00007f75704876d7: jbe    0x00007f75704876f0
  0x00007f75704876dd: movabs $0x7f757036de58,%r11
  0x00007f75704876e7: cmp    %r11,%rax
  0x00007f75704876ea: jb     0x00007f7570487767
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704876f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704876f5: sub    $0x80,%rsp
  0x00007f75704876fc: mov    %rax,0x78(%rsp)
  0x00007f7570487701: mov    %rcx,0x70(%rsp)
  0x00007f7570487706: mov    %rdx,0x68(%rsp)
  0x00007f757048770b: mov    %rbx,0x60(%rsp)
  0x00007f7570487710: mov    %rbp,0x50(%rsp)
  0x00007f7570487715: mov    %rsi,0x48(%rsp)
  0x00007f757048771a: mov    %rdi,0x40(%rsp)
  0x00007f757048771f: mov    %r8,0x38(%rsp)
  0x00007f7570487724: mov    %r9,0x30(%rsp)
  0x00007f7570487729: mov    %r10,0x28(%rsp)
  0x00007f757048772e: mov    %r11,0x20(%rsp)
  0x00007f7570487733: mov    %r12,0x18(%rsp)
  0x00007f7570487738: mov    %r13,0x10(%rsp)
  0x00007f757048773d: mov    %r14,0x8(%rsp)
  0x00007f7570487742: mov    %r15,(%rsp)
  0x00007f7570487746: movabs $0x7f758592f470,%rdi
  0x00007f7570487750: movabs $0x7f75704876f0,%rsi
  0x00007f757048775a: mov    %rsp,%rdx
  0x00007f757048775d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487761: callq  0x00007f75853729fa
  0x00007f7570487766: hlt    
  ;; } verify_i2ce 
  0x00007f7570487767: mov    %rsp,%r11
  0x00007f757048776a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048776e: push   %rax
  0x00007f757048776f: mov    %r11,%rax
  0x00007f7570487772: mov    0x50(%rbx),%r11
  0x00007f7570487776: mov    0x10(%rax),%rsi
  0x00007f757048777a: mov    0x8(%rax),%rdx
  0x00007f757048777e: mov    %rbx,0x258(%r15)
  0x00007f7570487785: mov    %rbx,%rax
  0x00007f7570487788: jmpq   *%r11
  0x00007f757048778b: mov    0x8(%rsi),%ebx
  0x00007f757048778e: shl    $0x3,%rbx
  0x00007f7570487792: cmp    0x10(%rax),%rbx
  0x00007f7570487796: mov    0x8(%rax),%rbx
  0x00007f757048779a: je     0x00007f75704877a5
  0x00007f75704877a0: jmpq   0x00007f757046ec40
  0x00007f75704877a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704877ad: je     0x00007f75704878a8
  0x00007f75704877b3: jmpq   0x00007f757046ec40
  0x00007f75704877b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704877c0: je     0x00007f75704878a8
  0x00007f75704877c6: mov    %rsp,%r13
  0x00007f75704877c9: mov    (%rsp),%rax
  0x00007f75704877cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704877d1: pushfq 
  0x00007f75704877d2: sub    $0x8,%rsp
  0x00007f75704877d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704877db: sub    $0x80,%rsp
  0x00007f75704877e2: mov    %rax,0x78(%rsp)
  0x00007f75704877e7: mov    %rcx,0x70(%rsp)
  0x00007f75704877ec: mov    %rdx,0x68(%rsp)
  0x00007f75704877f1: mov    %rbx,0x60(%rsp)
  0x00007f75704877f6: mov    %rbp,0x50(%rsp)
  0x00007f75704877fb: mov    %rsi,0x48(%rsp)
  0x00007f7570487800: mov    %rdi,0x40(%rsp)
  0x00007f7570487805: mov    %r8,0x38(%rsp)
  0x00007f757048780a: mov    %r9,0x30(%rsp)
  0x00007f757048780f: mov    %r10,0x28(%rsp)
  0x00007f7570487814: mov    %r11,0x20(%rsp)
  0x00007f7570487819: mov    %r12,0x18(%rsp)
  0x00007f757048781e: mov    %r13,0x10(%rsp)
  0x00007f7570487823: mov    %r14,0x8(%rsp)
  0x00007f7570487828: mov    %r15,(%rsp)
  0x00007f757048782c: sub    $0x200,%rsp
  0x00007f7570487833: fxsave64 (%rsp)
  0x00007f7570487838: mov    %rbx,%rdi
  0x00007f757048783b: mov    %rax,%rsi
  0x00007f757048783e: callq  0x00007f7585522bca
  0x00007f7570487843: fxrstor64 (%rsp)
  0x00007f7570487848: add    $0x200,%rsp
  0x00007f757048784f: mov    (%rsp),%r15
  0x00007f7570487853: mov    0x8(%rsp),%r14
  0x00007f7570487858: mov    0x10(%rsp),%r13
  0x00007f757048785d: mov    0x18(%rsp),%r12
  0x00007f7570487862: mov    0x20(%rsp),%r11
  0x00007f7570487867: mov    0x28(%rsp),%r10
  0x00007f757048786c: mov    0x30(%rsp),%r9
  0x00007f7570487871: mov    0x38(%rsp),%r8
  0x00007f7570487876: mov    0x40(%rsp),%rdi
  0x00007f757048787b: mov    0x48(%rsp),%rsi
  0x00007f7570487880: mov    0x50(%rsp),%rbp
  0x00007f7570487885: mov    0x60(%rsp),%rbx
  0x00007f757048788a: mov    0x68(%rsp),%rdx
  0x00007f757048788f: mov    0x70(%rsp),%rcx
  0x00007f7570487894: mov    0x78(%rsp),%rax
  0x00007f7570487899: add    $0x80,%rsp
  0x00007f75704878a0: add    $0x8,%rsp
  0x00007f75704878a4: popfq  
  0x00007f75704878a5: mov    %r13,%rsp
  0x00007f75704878a8: pop    %rax
  0x00007f75704878a9: mov    %rsp,%r13
  0x00007f75704878ac: sub    $0x20,%rsp
  0x00007f75704878b0: mov    %rax,(%rsp)
  0x00007f75704878b4: mov    %rsi,0x10(%rsp)
  0x00007f75704878b9: mov    %rdx,0x8(%rsp)
  0x00007f75704878be: mov    0x40(%rbx),%rcx
  0x00007f75704878c2: jmpq   *%rcx

AHE@0x00007f75800c2f48: 0xbb000000 i2c: 0x00007f75704879a0 c2i: 0x00007f7570487ab8 c2iUV: 0x00007f7570487a8b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)J (548 bytes generated)
c2i argument handler starts at 0x7f7570487ab8
  0x00007f75704879a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704879a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704879ae: cmp    %r11,%rax
  0x00007f75704879b1: jbe    0x00007f75704879ca
  0x00007f75704879b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704879c1: cmp    %r11,%rax
  0x00007f75704879c4: jb     0x00007f7570487a67
  0x00007f75704879ca: movabs $0x7f7570369420,%r11
  0x00007f75704879d4: cmp    %r11,%rax
  0x00007f75704879d7: jbe    0x00007f75704879f0
  0x00007f75704879dd: movabs $0x7f757036de58,%r11
  0x00007f75704879e7: cmp    %r11,%rax
  0x00007f75704879ea: jb     0x00007f7570487a67
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704879f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704879f5: sub    $0x80,%rsp
  0x00007f75704879fc: mov    %rax,0x78(%rsp)
  0x00007f7570487a01: mov    %rcx,0x70(%rsp)
  0x00007f7570487a06: mov    %rdx,0x68(%rsp)
  0x00007f7570487a0b: mov    %rbx,0x60(%rsp)
  0x00007f7570487a10: mov    %rbp,0x50(%rsp)
  0x00007f7570487a15: mov    %rsi,0x48(%rsp)
  0x00007f7570487a1a: mov    %rdi,0x40(%rsp)
  0x00007f7570487a1f: mov    %r8,0x38(%rsp)
  0x00007f7570487a24: mov    %r9,0x30(%rsp)
  0x00007f7570487a29: mov    %r10,0x28(%rsp)
  0x00007f7570487a2e: mov    %r11,0x20(%rsp)
  0x00007f7570487a33: mov    %r12,0x18(%rsp)
  0x00007f7570487a38: mov    %r13,0x10(%rsp)
  0x00007f7570487a3d: mov    %r14,0x8(%rsp)
  0x00007f7570487a42: mov    %r15,(%rsp)
  0x00007f7570487a46: movabs $0x7f758592f470,%rdi
  0x00007f7570487a50: movabs $0x7f75704879f0,%rsi
  0x00007f7570487a5a: mov    %rsp,%rdx
  0x00007f7570487a5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487a61: callq  0x00007f75853729fa
  0x00007f7570487a66: hlt    
  ;; } verify_i2ce 
  0x00007f7570487a67: mov    %rsp,%r11
  0x00007f7570487a6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487a6e: push   %rax
  0x00007f7570487a6f: mov    %r11,%rax
  0x00007f7570487a72: mov    0x50(%rbx),%r11
  0x00007f7570487a76: mov    0x10(%rax),%rsi
  0x00007f7570487a7a: mov    0x8(%rax),%rdx
  0x00007f7570487a7e: mov    %rbx,0x258(%r15)
  0x00007f7570487a85: mov    %rbx,%rax
  0x00007f7570487a88: jmpq   *%r11
  0x00007f7570487a8b: mov    0x8(%rsi),%ebx
  0x00007f7570487a8e: shl    $0x3,%rbx
  0x00007f7570487a92: cmp    0x10(%rax),%rbx
  0x00007f7570487a96: mov    0x8(%rax),%rbx
  0x00007f7570487a9a: je     0x00007f7570487aa5
  0x00007f7570487aa0: jmpq   0x00007f757046ec40
  0x00007f7570487aa5: cmpq   $0x0,0x58(%rbx)
  0x00007f7570487aad: je     0x00007f7570487ba8
  0x00007f7570487ab3: jmpq   0x00007f757046ec40
  0x00007f7570487ab8: cmpq   $0x0,0x58(%rbx)
  0x00007f7570487ac0: je     0x00007f7570487ba8
  0x00007f7570487ac6: mov    %rsp,%r13
  0x00007f7570487ac9: mov    (%rsp),%rax
  0x00007f7570487acd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487ad1: pushfq 
  0x00007f7570487ad2: sub    $0x8,%rsp
  0x00007f7570487ad6: mov    %rsp,-0x28(%rsp)
  0x00007f7570487adb: sub    $0x80,%rsp
  0x00007f7570487ae2: mov    %rax,0x78(%rsp)
  0x00007f7570487ae7: mov    %rcx,0x70(%rsp)
  0x00007f7570487aec: mov    %rdx,0x68(%rsp)
  0x00007f7570487af1: mov    %rbx,0x60(%rsp)
  0x00007f7570487af6: mov    %rbp,0x50(%rsp)
  0x00007f7570487afb: mov    %rsi,0x48(%rsp)
  0x00007f7570487b00: mov    %rdi,0x40(%rsp)
  0x00007f7570487b05: mov    %r8,0x38(%rsp)
  0x00007f7570487b0a: mov    %r9,0x30(%rsp)
  0x00007f7570487b0f: mov    %r10,0x28(%rsp)
  0x00007f7570487b14: mov    %r11,0x20(%rsp)
  0x00007f7570487b19: mov    %r12,0x18(%rsp)
  0x00007f7570487b1e: mov    %r13,0x10(%rsp)
  0x00007f7570487b23: mov    %r14,0x8(%rsp)
  0x00007f7570487b28: mov    %r15,(%rsp)
  0x00007f7570487b2c: sub    $0x200,%rsp
  0x00007f7570487b33: fxsave64 (%rsp)
  0x00007f7570487b38: mov    %rbx,%rdi
  0x00007f7570487b3b: mov    %rax,%rsi
  0x00007f7570487b3e: callq  0x00007f7585522bca
  0x00007f7570487b43: fxrstor64 (%rsp)
  0x00007f7570487b48: add    $0x200,%rsp
  0x00007f7570487b4f: mov    (%rsp),%r15
  0x00007f7570487b53: mov    0x8(%rsp),%r14
  0x00007f7570487b58: mov    0x10(%rsp),%r13
  0x00007f7570487b5d: mov    0x18(%rsp),%r12
  0x00007f7570487b62: mov    0x20(%rsp),%r11
  0x00007f7570487b67: mov    0x28(%rsp),%r10
  0x00007f7570487b6c: mov    0x30(%rsp),%r9
  0x00007f7570487b71: mov    0x38(%rsp),%r8
  0x00007f7570487b76: mov    0x40(%rsp),%rdi
  0x00007f7570487b7b: mov    0x48(%rsp),%rsi
  0x00007f7570487b80: mov    0x50(%rsp),%rbp
  0x00007f7570487b85: mov    0x60(%rsp),%rbx
  0x00007f7570487b8a: mov    0x68(%rsp),%rdx
  0x00007f7570487b8f: mov    0x70(%rsp),%rcx
  0x00007f7570487b94: mov    0x78(%rsp),%rax
  0x00007f7570487b99: add    $0x80,%rsp
  0x00007f7570487ba0: add    $0x8,%rsp
  0x00007f7570487ba4: popfq  
  0x00007f7570487ba5: mov    %r13,%rsp
  0x00007f7570487ba8: pop    %rax
  0x00007f7570487ba9: mov    %rsp,%r13
  0x00007f7570487bac: sub    $0x20,%rsp
  0x00007f7570487bb0: mov    %rax,(%rsp)
  0x00007f7570487bb4: mov    %rsi,0x10(%rsp)
  0x00007f7570487bb9: mov    %rdx,0x8(%rsp)
  0x00007f7570487bbe: mov    0x40(%rbx),%rcx
  0x00007f7570487bc2: jmpq   *%rcx

AHE@0x00007f75800c2f90: 0xbb000000 i2c: 0x00007f7570487ca0 c2i: 0x00007f7570487db8 c2iUV: 0x00007f7570487d8b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)I (548 bytes generated)
c2i argument handler starts at 0x7f7570487db8
  0x00007f7570487ca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570487ca4: movabs $0x7f757036e3e0,%r11
  0x00007f7570487cae: cmp    %r11,%rax
  0x00007f7570487cb1: jbe    0x00007f7570487cca
  0x00007f7570487cb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570487cc1: cmp    %r11,%rax
  0x00007f7570487cc4: jb     0x00007f7570487d67
  0x00007f7570487cca: movabs $0x7f7570369420,%r11
  0x00007f7570487cd4: cmp    %r11,%rax
  0x00007f7570487cd7: jbe    0x00007f7570487cf0
  0x00007f7570487cdd: movabs $0x7f757036de58,%r11
  0x00007f7570487ce7: cmp    %r11,%rax
  0x00007f7570487cea: jb     0x00007f7570487d67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570487cf0: mov    %rsp,-0x28(%rsp)
  0x00007f7570487cf5: sub    $0x80,%rsp
  0x00007f7570487cfc: mov    %rax,0x78(%rsp)
  0x00007f7570487d01: mov    %rcx,0x70(%rsp)
  0x00007f7570487d06: mov    %rdx,0x68(%rsp)
  0x00007f7570487d0b: mov    %rbx,0x60(%rsp)
  0x00007f7570487d10: mov    %rbp,0x50(%rsp)
  0x00007f7570487d15: mov    %rsi,0x48(%rsp)
  0x00007f7570487d1a: mov    %rdi,0x40(%rsp)
  0x00007f7570487d1f: mov    %r8,0x38(%rsp)
  0x00007f7570487d24: mov    %r9,0x30(%rsp)
  0x00007f7570487d29: mov    %r10,0x28(%rsp)
  0x00007f7570487d2e: mov    %r11,0x20(%rsp)
  0x00007f7570487d33: mov    %r12,0x18(%rsp)
  0x00007f7570487d38: mov    %r13,0x10(%rsp)
  0x00007f7570487d3d: mov    %r14,0x8(%rsp)
  0x00007f7570487d42: mov    %r15,(%rsp)
  0x00007f7570487d46: movabs $0x7f758592f470,%rdi
  0x00007f7570487d50: movabs $0x7f7570487cf0,%rsi
  0x00007f7570487d5a: mov    %rsp,%rdx
  0x00007f7570487d5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487d61: callq  0x00007f75853729fa
  0x00007f7570487d66: hlt    
  ;; } verify_i2ce 
  0x00007f7570487d67: mov    %rsp,%r11
  0x00007f7570487d6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487d6e: push   %rax
  0x00007f7570487d6f: mov    %r11,%rax
  0x00007f7570487d72: mov    0x50(%rbx),%r11
  0x00007f7570487d76: mov    0x10(%rax),%rsi
  0x00007f7570487d7a: mov    0x8(%rax),%rdx
  0x00007f7570487d7e: mov    %rbx,0x258(%r15)
  0x00007f7570487d85: mov    %rbx,%rax
  0x00007f7570487d88: jmpq   *%r11
  0x00007f7570487d8b: mov    0x8(%rsi),%ebx
  0x00007f7570487d8e: shl    $0x3,%rbx
  0x00007f7570487d92: cmp    0x10(%rax),%rbx
  0x00007f7570487d96: mov    0x8(%rax),%rbx
  0x00007f7570487d9a: je     0x00007f7570487da5
  0x00007f7570487da0: jmpq   0x00007f757046ec40
  0x00007f7570487da5: cmpq   $0x0,0x58(%rbx)
  0x00007f7570487dad: je     0x00007f7570487ea8
  0x00007f7570487db3: jmpq   0x00007f757046ec40
  0x00007f7570487db8: cmpq   $0x0,0x58(%rbx)
  0x00007f7570487dc0: je     0x00007f7570487ea8
  0x00007f7570487dc6: mov    %rsp,%r13
  0x00007f7570487dc9: mov    (%rsp),%rax
  0x00007f7570487dcd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570487dd1: pushfq 
  0x00007f7570487dd2: sub    $0x8,%rsp
  0x00007f7570487dd6: mov    %rsp,-0x28(%rsp)
  0x00007f7570487ddb: sub    $0x80,%rsp
  0x00007f7570487de2: mov    %rax,0x78(%rsp)
  0x00007f7570487de7: mov    %rcx,0x70(%rsp)
  0x00007f7570487dec: mov    %rdx,0x68(%rsp)
  0x00007f7570487df1: mov    %rbx,0x60(%rsp)
  0x00007f7570487df6: mov    %rbp,0x50(%rsp)
  0x00007f7570487dfb: mov    %rsi,0x48(%rsp)
  0x00007f7570487e00: mov    %rdi,0x40(%rsp)
  0x00007f7570487e05: mov    %r8,0x38(%rsp)
  0x00007f7570487e0a: mov    %r9,0x30(%rsp)
  0x00007f7570487e0f: mov    %r10,0x28(%rsp)
  0x00007f7570487e14: mov    %r11,0x20(%rsp)
  0x00007f7570487e19: mov    %r12,0x18(%rsp)
  0x00007f7570487e1e: mov    %r13,0x10(%rsp)
  0x00007f7570487e23: mov    %r14,0x8(%rsp)
  0x00007f7570487e28: mov    %r15,(%rsp)
  0x00007f7570487e2c: sub    $0x200,%rsp
  0x00007f7570487e33: fxsave64 (%rsp)
  0x00007f7570487e38: mov    %rbx,%rdi
  0x00007f7570487e3b: mov    %rax,%rsi
  0x00007f7570487e3e: callq  0x00007f7585522bca
  0x00007f7570487e43: fxrstor64 (%rsp)
  0x00007f7570487e48: add    $0x200,%rsp
  0x00007f7570487e4f: mov    (%rsp),%r15
  0x00007f7570487e53: mov    0x8(%rsp),%r14
  0x00007f7570487e58: mov    0x10(%rsp),%r13
  0x00007f7570487e5d: mov    0x18(%rsp),%r12
  0x00007f7570487e62: mov    0x20(%rsp),%r11
  0x00007f7570487e67: mov    0x28(%rsp),%r10
  0x00007f7570487e6c: mov    0x30(%rsp),%r9
  0x00007f7570487e71: mov    0x38(%rsp),%r8
  0x00007f7570487e76: mov    0x40(%rsp),%rdi
  0x00007f7570487e7b: mov    0x48(%rsp),%rsi
  0x00007f7570487e80: mov    0x50(%rsp),%rbp
  0x00007f7570487e85: mov    0x60(%rsp),%rbx
  0x00007f7570487e8a: mov    0x68(%rsp),%rdx
  0x00007f7570487e8f: mov    0x70(%rsp),%rcx
  0x00007f7570487e94: mov    0x78(%rsp),%rax
  0x00007f7570487e99: add    $0x80,%rsp
  0x00007f7570487ea0: add    $0x8,%rsp
  0x00007f7570487ea4: popfq  
  0x00007f7570487ea5: mov    %r13,%rsp
  0x00007f7570487ea8: pop    %rax
  0x00007f7570487ea9: mov    %rsp,%r13
  0x00007f7570487eac: sub    $0x20,%rsp
  0x00007f7570487eb0: mov    %rax,(%rsp)
  0x00007f7570487eb4: mov    %rsi,0x10(%rsp)
  0x00007f7570487eb9: mov    %rdx,0x8(%rsp)
  0x00007f7570487ebe: mov    0x40(%rbx),%rcx
  0x00007f7570487ec2: jmpq   *%rcx

AHE@0x00007f75800c2fd8: 0xbb000000 i2c: 0x00007f7570487fa0 c2i: 0x00007f75704880b8 c2iUV: 0x00007f757048808b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f75704880b8
  0x00007f7570487fa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570487fa4: movabs $0x7f757036e3e0,%r11
  0x00007f7570487fae: cmp    %r11,%rax
  0x00007f7570487fb1: jbe    0x00007f7570487fca
  0x00007f7570487fb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570487fc1: cmp    %r11,%rax
  0x00007f7570487fc4: jb     0x00007f7570488067
  0x00007f7570487fca: movabs $0x7f7570369420,%r11
  0x00007f7570487fd4: cmp    %r11,%rax
  0x00007f7570487fd7: jbe    0x00007f7570487ff0
  0x00007f7570487fdd: movabs $0x7f757036de58,%r11
  0x00007f7570487fe7: cmp    %r11,%rax
  0x00007f7570487fea: jb     0x00007f7570488067
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570487ff0: mov    %rsp,-0x28(%rsp)
  0x00007f7570487ff5: sub    $0x80,%rsp
  0x00007f7570487ffc: mov    %rax,0x78(%rsp)
  0x00007f7570488001: mov    %rcx,0x70(%rsp)
  0x00007f7570488006: mov    %rdx,0x68(%rsp)
  0x00007f757048800b: mov    %rbx,0x60(%rsp)
  0x00007f7570488010: mov    %rbp,0x50(%rsp)
  0x00007f7570488015: mov    %rsi,0x48(%rsp)
  0x00007f757048801a: mov    %rdi,0x40(%rsp)
  0x00007f757048801f: mov    %r8,0x38(%rsp)
  0x00007f7570488024: mov    %r9,0x30(%rsp)
  0x00007f7570488029: mov    %r10,0x28(%rsp)
  0x00007f757048802e: mov    %r11,0x20(%rsp)
  0x00007f7570488033: mov    %r12,0x18(%rsp)
  0x00007f7570488038: mov    %r13,0x10(%rsp)
  0x00007f757048803d: mov    %r14,0x8(%rsp)
  0x00007f7570488042: mov    %r15,(%rsp)
  0x00007f7570488046: movabs $0x7f758592f470,%rdi
  0x00007f7570488050: movabs $0x7f7570487ff0,%rsi
  0x00007f757048805a: mov    %rsp,%rdx
  0x00007f757048805d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488061: callq  0x00007f75853729fa
  0x00007f7570488066: hlt    
  ;; } verify_i2ce 
  0x00007f7570488067: mov    %rsp,%r11
  0x00007f757048806a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048806e: push   %rax
  0x00007f757048806f: mov    %r11,%rax
  0x00007f7570488072: mov    0x50(%rbx),%r11
  0x00007f7570488076: mov    0x10(%rax),%rsi
  0x00007f757048807a: mov    0x8(%rax),%rdx
  0x00007f757048807e: mov    %rbx,0x258(%r15)
  0x00007f7570488085: mov    %rbx,%rax
  0x00007f7570488088: jmpq   *%r11
  0x00007f757048808b: mov    0x8(%rsi),%ebx
  0x00007f757048808e: shl    $0x3,%rbx
  0x00007f7570488092: cmp    0x10(%rax),%rbx
  0x00007f7570488096: mov    0x8(%rax),%rbx
  0x00007f757048809a: je     0x00007f75704880a5
  0x00007f75704880a0: jmpq   0x00007f757046ec40
  0x00007f75704880a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704880ad: je     0x00007f75704881a8
  0x00007f75704880b3: jmpq   0x00007f757046ec40
  0x00007f75704880b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704880c0: je     0x00007f75704881a8
  0x00007f75704880c6: mov    %rsp,%r13
  0x00007f75704880c9: mov    (%rsp),%rax
  0x00007f75704880cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704880d1: pushfq 
  0x00007f75704880d2: sub    $0x8,%rsp
  0x00007f75704880d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704880db: sub    $0x80,%rsp
  0x00007f75704880e2: mov    %rax,0x78(%rsp)
  0x00007f75704880e7: mov    %rcx,0x70(%rsp)
  0x00007f75704880ec: mov    %rdx,0x68(%rsp)
  0x00007f75704880f1: mov    %rbx,0x60(%rsp)
  0x00007f75704880f6: mov    %rbp,0x50(%rsp)
  0x00007f75704880fb: mov    %rsi,0x48(%rsp)
  0x00007f7570488100: mov    %rdi,0x40(%rsp)
  0x00007f7570488105: mov    %r8,0x38(%rsp)
  0x00007f757048810a: mov    %r9,0x30(%rsp)
  0x00007f757048810f: mov    %r10,0x28(%rsp)
  0x00007f7570488114: mov    %r11,0x20(%rsp)
  0x00007f7570488119: mov    %r12,0x18(%rsp)
  0x00007f757048811e: mov    %r13,0x10(%rsp)
  0x00007f7570488123: mov    %r14,0x8(%rsp)
  0x00007f7570488128: mov    %r15,(%rsp)
  0x00007f757048812c: sub    $0x200,%rsp
  0x00007f7570488133: fxsave64 (%rsp)
  0x00007f7570488138: mov    %rbx,%rdi
  0x00007f757048813b: mov    %rax,%rsi
  0x00007f757048813e: callq  0x00007f7585522bca
  0x00007f7570488143: fxrstor64 (%rsp)
  0x00007f7570488148: add    $0x200,%rsp
  0x00007f757048814f: mov    (%rsp),%r15
  0x00007f7570488153: mov    0x8(%rsp),%r14
  0x00007f7570488158: mov    0x10(%rsp),%r13
  0x00007f757048815d: mov    0x18(%rsp),%r12
  0x00007f7570488162: mov    0x20(%rsp),%r11
  0x00007f7570488167: mov    0x28(%rsp),%r10
  0x00007f757048816c: mov    0x30(%rsp),%r9
  0x00007f7570488171: mov    0x38(%rsp),%r8
  0x00007f7570488176: mov    0x40(%rsp),%rdi
  0x00007f757048817b: mov    0x48(%rsp),%rsi
  0x00007f7570488180: mov    0x50(%rsp),%rbp
  0x00007f7570488185: mov    0x60(%rsp),%rbx
  0x00007f757048818a: mov    0x68(%rsp),%rdx
  0x00007f757048818f: mov    0x70(%rsp),%rcx
  0x00007f7570488194: mov    0x78(%rsp),%rax
  0x00007f7570488199: add    $0x80,%rsp
  0x00007f75704881a0: add    $0x8,%rsp
  0x00007f75704881a4: popfq  
  0x00007f75704881a5: mov    %r13,%rsp
  0x00007f75704881a8: pop    %rax
  0x00007f75704881a9: mov    %rsp,%r13
  0x00007f75704881ac: sub    $0x20,%rsp
  0x00007f75704881b0: mov    %rax,(%rsp)
  0x00007f75704881b4: mov    %rsi,0x10(%rsp)
  0x00007f75704881b9: mov    %rdx,0x8(%rsp)
  0x00007f75704881be: mov    0x40(%rbx),%rcx
  0x00007f75704881c2: jmpq   *%rcx

AHE@0x00007f75800c3020: 0xbb000000 i2c: 0x00007f75704882a0 c2i: 0x00007f75704883b8 c2iUV: 0x00007f757048838b
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f75704883b8
  0x00007f75704882a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704882a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704882ae: cmp    %r11,%rax
  0x00007f75704882b1: jbe    0x00007f75704882ca
  0x00007f75704882b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704882c1: cmp    %r11,%rax
  0x00007f75704882c4: jb     0x00007f7570488367
  0x00007f75704882ca: movabs $0x7f7570369420,%r11
  0x00007f75704882d4: cmp    %r11,%rax
  0x00007f75704882d7: jbe    0x00007f75704882f0
  0x00007f75704882dd: movabs $0x7f757036de58,%r11
  0x00007f75704882e7: cmp    %r11,%rax
  0x00007f75704882ea: jb     0x00007f7570488367
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704882f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704882f5: sub    $0x80,%rsp
  0x00007f75704882fc: mov    %rax,0x78(%rsp)
  0x00007f7570488301: mov    %rcx,0x70(%rsp)
  0x00007f7570488306: mov    %rdx,0x68(%rsp)
  0x00007f757048830b: mov    %rbx,0x60(%rsp)
  0x00007f7570488310: mov    %rbp,0x50(%rsp)
  0x00007f7570488315: mov    %rsi,0x48(%rsp)
  0x00007f757048831a: mov    %rdi,0x40(%rsp)
  0x00007f757048831f: mov    %r8,0x38(%rsp)
  0x00007f7570488324: mov    %r9,0x30(%rsp)
  0x00007f7570488329: mov    %r10,0x28(%rsp)
  0x00007f757048832e: mov    %r11,0x20(%rsp)
  0x00007f7570488333: mov    %r12,0x18(%rsp)
  0x00007f7570488338: mov    %r13,0x10(%rsp)
  0x00007f757048833d: mov    %r14,0x8(%rsp)
  0x00007f7570488342: mov    %r15,(%rsp)
  0x00007f7570488346: movabs $0x7f758592f470,%rdi
  0x00007f7570488350: movabs $0x7f75704882f0,%rsi
  0x00007f757048835a: mov    %rsp,%rdx
  0x00007f757048835d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488361: callq  0x00007f75853729fa
  0x00007f7570488366: hlt    
  ;; } verify_i2ce 
  0x00007f7570488367: mov    %rsp,%r11
  0x00007f757048836a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048836e: push   %rax
  0x00007f757048836f: mov    %r11,%rax
  0x00007f7570488372: mov    0x50(%rbx),%r11
  0x00007f7570488376: mov    0x10(%rax),%rsi
  0x00007f757048837a: mov    0x8(%rax),%rdx
  0x00007f757048837e: mov    %rbx,0x258(%r15)
  0x00007f7570488385: mov    %rbx,%rax
  0x00007f7570488388: jmpq   *%r11
  0x00007f757048838b: mov    0x8(%rsi),%ebx
  0x00007f757048838e: shl    $0x3,%rbx
  0x00007f7570488392: cmp    0x10(%rax),%rbx
  0x00007f7570488396: mov    0x8(%rax),%rbx
  0x00007f757048839a: je     0x00007f75704883a5
  0x00007f75704883a0: jmpq   0x00007f757046ec40
  0x00007f75704883a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704883ad: je     0x00007f75704884a8
  0x00007f75704883b3: jmpq   0x00007f757046ec40
  0x00007f75704883b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704883c0: je     0x00007f75704884a8
  0x00007f75704883c6: mov    %rsp,%r13
  0x00007f75704883c9: mov    (%rsp),%rax
  0x00007f75704883cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704883d1: pushfq 
  0x00007f75704883d2: sub    $0x8,%rsp
  0x00007f75704883d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704883db: sub    $0x80,%rsp
  0x00007f75704883e2: mov    %rax,0x78(%rsp)
  0x00007f75704883e7: mov    %rcx,0x70(%rsp)
  0x00007f75704883ec: mov    %rdx,0x68(%rsp)
  0x00007f75704883f1: mov    %rbx,0x60(%rsp)
  0x00007f75704883f6: mov    %rbp,0x50(%rsp)
  0x00007f75704883fb: mov    %rsi,0x48(%rsp)
  0x00007f7570488400: mov    %rdi,0x40(%rsp)
  0x00007f7570488405: mov    %r8,0x38(%rsp)
  0x00007f757048840a: mov    %r9,0x30(%rsp)
  0x00007f757048840f: mov    %r10,0x28(%rsp)
  0x00007f7570488414: mov    %r11,0x20(%rsp)
  0x00007f7570488419: mov    %r12,0x18(%rsp)
  0x00007f757048841e: mov    %r13,0x10(%rsp)
  0x00007f7570488423: mov    %r14,0x8(%rsp)
  0x00007f7570488428: mov    %r15,(%rsp)
  0x00007f757048842c: sub    $0x200,%rsp
  0x00007f7570488433: fxsave64 (%rsp)
  0x00007f7570488438: mov    %rbx,%rdi
  0x00007f757048843b: mov    %rax,%rsi
  0x00007f757048843e: callq  0x00007f7585522bca
  0x00007f7570488443: fxrstor64 (%rsp)
  0x00007f7570488448: add    $0x200,%rsp
  0x00007f757048844f: mov    (%rsp),%r15
  0x00007f7570488453: mov    0x8(%rsp),%r14
  0x00007f7570488458: mov    0x10(%rsp),%r13
  0x00007f757048845d: mov    0x18(%rsp),%r12
  0x00007f7570488462: mov    0x20(%rsp),%r11
  0x00007f7570488467: mov    0x28(%rsp),%r10
  0x00007f757048846c: mov    0x30(%rsp),%r9
  0x00007f7570488471: mov    0x38(%rsp),%r8
  0x00007f7570488476: mov    0x40(%rsp),%rdi
  0x00007f757048847b: mov    0x48(%rsp),%rsi
  0x00007f7570488480: mov    0x50(%rsp),%rbp
  0x00007f7570488485: mov    0x60(%rsp),%rbx
  0x00007f757048848a: mov    0x68(%rsp),%rdx
  0x00007f757048848f: mov    0x70(%rsp),%rcx
  0x00007f7570488494: mov    0x78(%rsp),%rax
  0x00007f7570488499: add    $0x80,%rsp
  0x00007f75704884a0: add    $0x8,%rsp
  0x00007f75704884a4: popfq  
  0x00007f75704884a5: mov    %r13,%rsp
  0x00007f75704884a8: pop    %rax
  0x00007f75704884a9: mov    %rsp,%r13
  0x00007f75704884ac: sub    $0x20,%rsp
  0x00007f75704884b0: mov    %rax,(%rsp)
  0x00007f75704884b4: mov    %rsi,0x10(%rsp)
  0x00007f75704884b9: mov    %rdx,0x8(%rsp)
  0x00007f75704884be: mov    0x40(%rbx),%rcx
  0x00007f75704884c2: jmpq   *%rcx

AHE@0x00007f75800c3068: 0xbbbaabb0 i2c: 0x00007f75704885a0 c2i: 0x00007f75704886d5 c2iUV: 0x00007f75704886a8
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/lang/ClassLoader;Ljava/security/ProtectionDomain;)Ljava/lang/Class; (607 bytes generated)
c2i argument handler starts at 0x7f75704886d5
  0x00007f75704885a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704885a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704885ae: cmp    %r11,%rax
  0x00007f75704885b1: jbe    0x00007f75704885ca
  0x00007f75704885b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704885c1: cmp    %r11,%rax
  0x00007f75704885c4: jb     0x00007f7570488667
  0x00007f75704885ca: movabs $0x7f7570369420,%r11
  0x00007f75704885d4: cmp    %r11,%rax
  0x00007f75704885d7: jbe    0x00007f75704885f0
  0x00007f75704885dd: movabs $0x7f757036de58,%r11
  0x00007f75704885e7: cmp    %r11,%rax
  0x00007f75704885ea: jb     0x00007f7570488667
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704885f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704885f5: sub    $0x80,%rsp
  0x00007f75704885fc: mov    %rax,0x78(%rsp)
  0x00007f7570488601: mov    %rcx,0x70(%rsp)
  0x00007f7570488606: mov    %rdx,0x68(%rsp)
  0x00007f757048860b: mov    %rbx,0x60(%rsp)
  0x00007f7570488610: mov    %rbp,0x50(%rsp)
  0x00007f7570488615: mov    %rsi,0x48(%rsp)
  0x00007f757048861a: mov    %rdi,0x40(%rsp)
  0x00007f757048861f: mov    %r8,0x38(%rsp)
  0x00007f7570488624: mov    %r9,0x30(%rsp)
  0x00007f7570488629: mov    %r10,0x28(%rsp)
  0x00007f757048862e: mov    %r11,0x20(%rsp)
  0x00007f7570488633: mov    %r12,0x18(%rsp)
  0x00007f7570488638: mov    %r13,0x10(%rsp)
  0x00007f757048863d: mov    %r14,0x8(%rsp)
  0x00007f7570488642: mov    %r15,(%rsp)
  0x00007f7570488646: movabs $0x7f758592f470,%rdi
  0x00007f7570488650: movabs $0x7f75704885f0,%rsi
  0x00007f757048865a: mov    %rsp,%rdx
  0x00007f757048865d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488661: callq  0x00007f75853729fa
  0x00007f7570488666: hlt    
  ;; } verify_i2ce 
  0x00007f7570488667: mov    %rsp,%r11
  0x00007f757048866a: sub    $0x10,%rsp
  0x00007f757048866e: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488672: push   %rax
  0x00007f7570488673: mov    %r11,%rax
  0x00007f7570488676: mov    0x50(%rbx),%r11
  0x00007f757048867a: mov    0x38(%rax),%rsi
  0x00007f757048867e: mov    0x30(%rax),%rdx
  0x00007f7570488682: mov    0x28(%rax),%rcx
  0x00007f7570488686: mov    0x20(%rax),%r8d
  0x00007f757048868a: mov    0x18(%rax),%r9d
  0x00007f757048868e: mov    0x10(%rax),%rdi
  0x00007f7570488692: mov    0x8(%rax),%r13
  0x00007f7570488696: mov    %r13,0x8(%rsp)
  0x00007f757048869b: mov    %rbx,0x258(%r15)
  0x00007f75704886a2: mov    %rbx,%rax
  0x00007f75704886a5: jmpq   *%r11
  0x00007f75704886a8: mov    0x8(%rsi),%ebx
  0x00007f75704886ab: shl    $0x3,%rbx
  0x00007f75704886af: cmp    0x10(%rax),%rbx
  0x00007f75704886b3: mov    0x8(%rax),%rbx
  0x00007f75704886b7: je     0x00007f75704886c2
  0x00007f75704886bd: jmpq   0x00007f757046ec40
  0x00007f75704886c2: cmpq   $0x0,0x58(%rbx)
  0x00007f75704886ca: je     0x00007f75704887c5
  0x00007f75704886d0: jmpq   0x00007f757046ec40
  0x00007f75704886d5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704886dd: je     0x00007f75704887c5
  0x00007f75704886e3: mov    %rsp,%r13
  0x00007f75704886e6: mov    (%rsp),%rax
  0x00007f75704886ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704886ee: pushfq 
  0x00007f75704886ef: sub    $0x8,%rsp
  0x00007f75704886f3: mov    %rsp,-0x28(%rsp)
  0x00007f75704886f8: sub    $0x80,%rsp
  0x00007f75704886ff: mov    %rax,0x78(%rsp)
  0x00007f7570488704: mov    %rcx,0x70(%rsp)
  0x00007f7570488709: mov    %rdx,0x68(%rsp)
  0x00007f757048870e: mov    %rbx,0x60(%rsp)
  0x00007f7570488713: mov    %rbp,0x50(%rsp)
  0x00007f7570488718: mov    %rsi,0x48(%rsp)
  0x00007f757048871d: mov    %rdi,0x40(%rsp)
  0x00007f7570488722: mov    %r8,0x38(%rsp)
  0x00007f7570488727: mov    %r9,0x30(%rsp)
  0x00007f757048872c: mov    %r10,0x28(%rsp)
  0x00007f7570488731: mov    %r11,0x20(%rsp)
  0x00007f7570488736: mov    %r12,0x18(%rsp)
  0x00007f757048873b: mov    %r13,0x10(%rsp)
  0x00007f7570488740: mov    %r14,0x8(%rsp)
  0x00007f7570488745: mov    %r15,(%rsp)
  0x00007f7570488749: sub    $0x200,%rsp
  0x00007f7570488750: fxsave64 (%rsp)
  0x00007f7570488755: mov    %rbx,%rdi
  0x00007f7570488758: mov    %rax,%rsi
  0x00007f757048875b: callq  0x00007f7585522bca
  0x00007f7570488760: fxrstor64 (%rsp)
  0x00007f7570488765: add    $0x200,%rsp
  0x00007f757048876c: mov    (%rsp),%r15
  0x00007f7570488770: mov    0x8(%rsp),%r14
  0x00007f7570488775: mov    0x10(%rsp),%r13
  0x00007f757048877a: mov    0x18(%rsp),%r12
  0x00007f757048877f: mov    0x20(%rsp),%r11
  0x00007f7570488784: mov    0x28(%rsp),%r10
  0x00007f7570488789: mov    0x30(%rsp),%r9
  0x00007f757048878e: mov    0x38(%rsp),%r8
  0x00007f7570488793: mov    0x40(%rsp),%rdi
  0x00007f7570488798: mov    0x48(%rsp),%rsi
  0x00007f757048879d: mov    0x50(%rsp),%rbp
  0x00007f75704887a2: mov    0x60(%rsp),%rbx
  0x00007f75704887a7: mov    0x68(%rsp),%rdx
  0x00007f75704887ac: mov    0x70(%rsp),%rcx
  0x00007f75704887b1: mov    0x78(%rsp),%rax
  0x00007f75704887b6: add    $0x80,%rsp
  0x00007f75704887bd: add    $0x8,%rsp
  0x00007f75704887c1: popfq  
  0x00007f75704887c2: mov    %r13,%rsp
  0x00007f75704887c5: pop    %rax
  0x00007f75704887c6: mov    %rsp,%r13
  0x00007f75704887c9: sub    $0x40,%rsp
  0x00007f75704887cd: mov    %rax,(%rsp)
  0x00007f75704887d1: mov    %rsi,0x38(%rsp)
  0x00007f75704887d6: mov    %rdx,0x30(%rsp)
  0x00007f75704887db: mov    %rcx,0x28(%rsp)
  0x00007f75704887e0: mov    %r8d,0x20(%rsp)
  0x00007f75704887e5: mov    %r9d,0x18(%rsp)
  0x00007f75704887ea: mov    %rdi,0x10(%rsp)
  0x00007f75704887ef: mov    0x40(%rsp),%rax
  0x00007f75704887f4: mov    %rax,0x8(%rsp)
  0x00007f75704887f9: mov    0x40(%rbx),%rcx
  0x00007f75704887fd: jmpq   *%rcx

AHE@0x00007f75800c30b0: 0xbb000000 i2c: 0x00007f75704888a0 c2i: 0x00007f75704889b8 c2iUV: 0x00007f757048898b
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704889b8
  0x00007f75704888a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704888a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704888ae: cmp    %r11,%rax
  0x00007f75704888b1: jbe    0x00007f75704888ca
  0x00007f75704888b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704888c1: cmp    %r11,%rax
  0x00007f75704888c4: jb     0x00007f7570488967
  0x00007f75704888ca: movabs $0x7f7570369420,%r11
  0x00007f75704888d4: cmp    %r11,%rax
  0x00007f75704888d7: jbe    0x00007f75704888f0
  0x00007f75704888dd: movabs $0x7f757036de58,%r11
  0x00007f75704888e7: cmp    %r11,%rax
  0x00007f75704888ea: jb     0x00007f7570488967
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704888f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704888f5: sub    $0x80,%rsp
  0x00007f75704888fc: mov    %rax,0x78(%rsp)
  0x00007f7570488901: mov    %rcx,0x70(%rsp)
  0x00007f7570488906: mov    %rdx,0x68(%rsp)
  0x00007f757048890b: mov    %rbx,0x60(%rsp)
  0x00007f7570488910: mov    %rbp,0x50(%rsp)
  0x00007f7570488915: mov    %rsi,0x48(%rsp)
  0x00007f757048891a: mov    %rdi,0x40(%rsp)
  0x00007f757048891f: mov    %r8,0x38(%rsp)
  0x00007f7570488924: mov    %r9,0x30(%rsp)
  0x00007f7570488929: mov    %r10,0x28(%rsp)
  0x00007f757048892e: mov    %r11,0x20(%rsp)
  0x00007f7570488933: mov    %r12,0x18(%rsp)
  0x00007f7570488938: mov    %r13,0x10(%rsp)
  0x00007f757048893d: mov    %r14,0x8(%rsp)
  0x00007f7570488942: mov    %r15,(%rsp)
  0x00007f7570488946: movabs $0x7f758592f470,%rdi
  0x00007f7570488950: movabs $0x7f75704888f0,%rsi
  0x00007f757048895a: mov    %rsp,%rdx
  0x00007f757048895d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488961: callq  0x00007f75853729fa
  0x00007f7570488966: hlt    
  ;; } verify_i2ce 
  0x00007f7570488967: mov    %rsp,%r11
  0x00007f757048896a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048896e: push   %rax
  0x00007f757048896f: mov    %r11,%rax
  0x00007f7570488972: mov    0x50(%rbx),%r11
  0x00007f7570488976: mov    0x10(%rax),%rsi
  0x00007f757048897a: mov    0x8(%rax),%rdx
  0x00007f757048897e: mov    %rbx,0x258(%r15)
  0x00007f7570488985: mov    %rbx,%rax
  0x00007f7570488988: jmpq   *%r11
  0x00007f757048898b: mov    0x8(%rsi),%ebx
  0x00007f757048898e: shl    $0x3,%rbx
  0x00007f7570488992: cmp    0x10(%rax),%rbx
  0x00007f7570488996: mov    0x8(%rax),%rbx
  0x00007f757048899a: je     0x00007f75704889a5
  0x00007f75704889a0: jmpq   0x00007f757046ec40
  0x00007f75704889a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704889ad: je     0x00007f7570488aa8
  0x00007f75704889b3: jmpq   0x00007f757046ec40
  0x00007f75704889b8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704889c0: je     0x00007f7570488aa8
  0x00007f75704889c6: mov    %rsp,%r13
  0x00007f75704889c9: mov    (%rsp),%rax
  0x00007f75704889cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704889d1: pushfq 
  0x00007f75704889d2: sub    $0x8,%rsp
  0x00007f75704889d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704889db: sub    $0x80,%rsp
  0x00007f75704889e2: mov    %rax,0x78(%rsp)
  0x00007f75704889e7: mov    %rcx,0x70(%rsp)
  0x00007f75704889ec: mov    %rdx,0x68(%rsp)
  0x00007f75704889f1: mov    %rbx,0x60(%rsp)
  0x00007f75704889f6: mov    %rbp,0x50(%rsp)
  0x00007f75704889fb: mov    %rsi,0x48(%rsp)
  0x00007f7570488a00: mov    %rdi,0x40(%rsp)
  0x00007f7570488a05: mov    %r8,0x38(%rsp)
  0x00007f7570488a0a: mov    %r9,0x30(%rsp)
  0x00007f7570488a0f: mov    %r10,0x28(%rsp)
  0x00007f7570488a14: mov    %r11,0x20(%rsp)
  0x00007f7570488a19: mov    %r12,0x18(%rsp)
  0x00007f7570488a1e: mov    %r13,0x10(%rsp)
  0x00007f7570488a23: mov    %r14,0x8(%rsp)
  0x00007f7570488a28: mov    %r15,(%rsp)
  0x00007f7570488a2c: sub    $0x200,%rsp
  0x00007f7570488a33: fxsave64 (%rsp)
  0x00007f7570488a38: mov    %rbx,%rdi
  0x00007f7570488a3b: mov    %rax,%rsi
  0x00007f7570488a3e: callq  0x00007f7585522bca
  0x00007f7570488a43: fxrstor64 (%rsp)
  0x00007f7570488a48: add    $0x200,%rsp
  0x00007f7570488a4f: mov    (%rsp),%r15
  0x00007f7570488a53: mov    0x8(%rsp),%r14
  0x00007f7570488a58: mov    0x10(%rsp),%r13
  0x00007f7570488a5d: mov    0x18(%rsp),%r12
  0x00007f7570488a62: mov    0x20(%rsp),%r11
  0x00007f7570488a67: mov    0x28(%rsp),%r10
  0x00007f7570488a6c: mov    0x30(%rsp),%r9
  0x00007f7570488a71: mov    0x38(%rsp),%r8
  0x00007f7570488a76: mov    0x40(%rsp),%rdi
  0x00007f7570488a7b: mov    0x48(%rsp),%rsi
  0x00007f7570488a80: mov    0x50(%rsp),%rbp
  0x00007f7570488a85: mov    0x60(%rsp),%rbx
  0x00007f7570488a8a: mov    0x68(%rsp),%rdx
  0x00007f7570488a8f: mov    0x70(%rsp),%rcx
  0x00007f7570488a94: mov    0x78(%rsp),%rax
  0x00007f7570488a99: add    $0x80,%rsp
  0x00007f7570488aa0: add    $0x8,%rsp
  0x00007f7570488aa4: popfq  
  0x00007f7570488aa5: mov    %r13,%rsp
  0x00007f7570488aa8: pop    %rax
  0x00007f7570488aa9: mov    %rsp,%r13
  0x00007f7570488aac: sub    $0x20,%rsp
  0x00007f7570488ab0: mov    %rax,(%rsp)
  0x00007f7570488ab4: mov    %rsi,0x10(%rsp)
  0x00007f7570488ab9: mov    %rdx,0x8(%rsp)
  0x00007f7570488abe: mov    0x40(%rbx),%rcx
  0x00007f7570488ac2: jmpq   *%rcx

AHE@0x00007f75800c30f8: 0x i2c: 0x00007f7570488ba0 c2i: 0x00007f7570488cb0 c2iUV: 0x00007f7570488c83
i2c argument handler #0 for: static ()Lsun/misc/Unsafe; (530 bytes generated)
c2i argument handler starts at 0x7f7570488cb0
  0x00007f7570488ba0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570488ba4: movabs $0x7f757036e3e0,%r11
  0x00007f7570488bae: cmp    %r11,%rax
  0x00007f7570488bb1: jbe    0x00007f7570488bca
  0x00007f7570488bb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570488bc1: cmp    %r11,%rax
  0x00007f7570488bc4: jb     0x00007f7570488c67
  0x00007f7570488bca: movabs $0x7f7570369420,%r11
  0x00007f7570488bd4: cmp    %r11,%rax
  0x00007f7570488bd7: jbe    0x00007f7570488bf0
  0x00007f7570488bdd: movabs $0x7f757036de58,%r11
  0x00007f7570488be7: cmp    %r11,%rax
  0x00007f7570488bea: jb     0x00007f7570488c67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570488bf0: mov    %rsp,-0x28(%rsp)
  0x00007f7570488bf5: sub    $0x80,%rsp
  0x00007f7570488bfc: mov    %rax,0x78(%rsp)
  0x00007f7570488c01: mov    %rcx,0x70(%rsp)
  0x00007f7570488c06: mov    %rdx,0x68(%rsp)
  0x00007f7570488c0b: mov    %rbx,0x60(%rsp)
  0x00007f7570488c10: mov    %rbp,0x50(%rsp)
  0x00007f7570488c15: mov    %rsi,0x48(%rsp)
  0x00007f7570488c1a: mov    %rdi,0x40(%rsp)
  0x00007f7570488c1f: mov    %r8,0x38(%rsp)
  0x00007f7570488c24: mov    %r9,0x30(%rsp)
  0x00007f7570488c29: mov    %r10,0x28(%rsp)
  0x00007f7570488c2e: mov    %r11,0x20(%rsp)
  0x00007f7570488c33: mov    %r12,0x18(%rsp)
  0x00007f7570488c38: mov    %r13,0x10(%rsp)
  0x00007f7570488c3d: mov    %r14,0x8(%rsp)
  0x00007f7570488c42: mov    %r15,(%rsp)
  0x00007f7570488c46: movabs $0x7f758592f470,%rdi
  0x00007f7570488c50: movabs $0x7f7570488bf0,%rsi
  0x00007f7570488c5a: mov    %rsp,%rdx
  0x00007f7570488c5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488c61: callq  0x00007f75853729fa
  0x00007f7570488c66: hlt    
  ;; } verify_i2ce 
  0x00007f7570488c67: mov    %rsp,%r11
  0x00007f7570488c6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488c6e: push   %rax
  0x00007f7570488c6f: mov    %r11,%rax
  0x00007f7570488c72: mov    0x50(%rbx),%r11
  0x00007f7570488c76: mov    %rbx,0x258(%r15)
  0x00007f7570488c7d: mov    %rbx,%rax
  0x00007f7570488c80: jmpq   *%r11
  0x00007f7570488c83: mov    0x8(%rsi),%ebx
  0x00007f7570488c86: shl    $0x3,%rbx
  0x00007f7570488c8a: cmp    0x10(%rax),%rbx
  0x00007f7570488c8e: mov    0x8(%rax),%rbx
  0x00007f7570488c92: je     0x00007f7570488c9d
  0x00007f7570488c98: jmpq   0x00007f757046ec40
  0x00007f7570488c9d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570488ca5: je     0x00007f7570488da0
  0x00007f7570488cab: jmpq   0x00007f757046ec40
  0x00007f7570488cb0: cmpq   $0x0,0x58(%rbx)
  0x00007f7570488cb8: je     0x00007f7570488da0
  0x00007f7570488cbe: mov    %rsp,%r13
  0x00007f7570488cc1: mov    (%rsp),%rax
  0x00007f7570488cc5: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488cc9: pushfq 
  0x00007f7570488cca: sub    $0x8,%rsp
  0x00007f7570488cce: mov    %rsp,-0x28(%rsp)
  0x00007f7570488cd3: sub    $0x80,%rsp
  0x00007f7570488cda: mov    %rax,0x78(%rsp)
  0x00007f7570488cdf: mov    %rcx,0x70(%rsp)
  0x00007f7570488ce4: mov    %rdx,0x68(%rsp)
  0x00007f7570488ce9: mov    %rbx,0x60(%rsp)
  0x00007f7570488cee: mov    %rbp,0x50(%rsp)
  0x00007f7570488cf3: mov    %rsi,0x48(%rsp)
  0x00007f7570488cf8: mov    %rdi,0x40(%rsp)
  0x00007f7570488cfd: mov    %r8,0x38(%rsp)
  0x00007f7570488d02: mov    %r9,0x30(%rsp)
  0x00007f7570488d07: mov    %r10,0x28(%rsp)
  0x00007f7570488d0c: mov    %r11,0x20(%rsp)
  0x00007f7570488d11: mov    %r12,0x18(%rsp)
  0x00007f7570488d16: mov    %r13,0x10(%rsp)
  0x00007f7570488d1b: mov    %r14,0x8(%rsp)
  0x00007f7570488d20: mov    %r15,(%rsp)
  0x00007f7570488d24: sub    $0x200,%rsp
  0x00007f7570488d2b: fxsave64 (%rsp)
  0x00007f7570488d30: mov    %rbx,%rdi
  0x00007f7570488d33: mov    %rax,%rsi
  0x00007f7570488d36: callq  0x00007f7585522bca
  0x00007f7570488d3b: fxrstor64 (%rsp)
  0x00007f7570488d40: add    $0x200,%rsp
  0x00007f7570488d47: mov    (%rsp),%r15
  0x00007f7570488d4b: mov    0x8(%rsp),%r14
  0x00007f7570488d50: mov    0x10(%rsp),%r13
  0x00007f7570488d55: mov    0x18(%rsp),%r12
  0x00007f7570488d5a: mov    0x20(%rsp),%r11
  0x00007f7570488d5f: mov    0x28(%rsp),%r10
  0x00007f7570488d64: mov    0x30(%rsp),%r9
  0x00007f7570488d69: mov    0x38(%rsp),%r8
  0x00007f7570488d6e: mov    0x40(%rsp),%rdi
  0x00007f7570488d73: mov    0x48(%rsp),%rsi
  0x00007f7570488d78: mov    0x50(%rsp),%rbp
  0x00007f7570488d7d: mov    0x60(%rsp),%rbx
  0x00007f7570488d82: mov    0x68(%rsp),%rdx
  0x00007f7570488d87: mov    0x70(%rsp),%rcx
  0x00007f7570488d8c: mov    0x78(%rsp),%rax
  0x00007f7570488d91: add    $0x80,%rsp
  0x00007f7570488d98: add    $0x8,%rsp
  0x00007f7570488d9c: popfq  
  0x00007f7570488d9d: mov    %r13,%rsp
  0x00007f7570488da0: pop    %rax
  0x00007f7570488da1: mov    %rsp,%r13
  0x00007f7570488da4: sub    $0x10,%rsp
  0x00007f7570488da8: mov    %rax,(%rsp)
  0x00007f7570488dac: mov    0x40(%rbx),%rcx
  0x00007f7570488db0: jmpq   *%rcx

AHE@0x00007f75800c3140: 0x i2c: 0x00007f7570488e60 c2i: 0x00007f7570488f70 c2iUV: 0x00007f7570488f43
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570488f70
  0x00007f7570488e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570488e64: movabs $0x7f757036e3e0,%r11
  0x00007f7570488e6e: cmp    %r11,%rax
  0x00007f7570488e71: jbe    0x00007f7570488e8a
  0x00007f7570488e77: movabs $0x7f757046e3e0,%r11
  0x00007f7570488e81: cmp    %r11,%rax
  0x00007f7570488e84: jb     0x00007f7570488f27
  0x00007f7570488e8a: movabs $0x7f7570369420,%r11
  0x00007f7570488e94: cmp    %r11,%rax
  0x00007f7570488e97: jbe    0x00007f7570488eb0
  0x00007f7570488e9d: movabs $0x7f757036de58,%r11
  0x00007f7570488ea7: cmp    %r11,%rax
  0x00007f7570488eaa: jb     0x00007f7570488f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570488eb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570488eb5: sub    $0x80,%rsp
  0x00007f7570488ebc: mov    %rax,0x78(%rsp)
  0x00007f7570488ec1: mov    %rcx,0x70(%rsp)
  0x00007f7570488ec6: mov    %rdx,0x68(%rsp)
  0x00007f7570488ecb: mov    %rbx,0x60(%rsp)
  0x00007f7570488ed0: mov    %rbp,0x50(%rsp)
  0x00007f7570488ed5: mov    %rsi,0x48(%rsp)
  0x00007f7570488eda: mov    %rdi,0x40(%rsp)
  0x00007f7570488edf: mov    %r8,0x38(%rsp)
  0x00007f7570488ee4: mov    %r9,0x30(%rsp)
  0x00007f7570488ee9: mov    %r10,0x28(%rsp)
  0x00007f7570488eee: mov    %r11,0x20(%rsp)
  0x00007f7570488ef3: mov    %r12,0x18(%rsp)
  0x00007f7570488ef8: mov    %r13,0x10(%rsp)
  0x00007f7570488efd: mov    %r14,0x8(%rsp)
  0x00007f7570488f02: mov    %r15,(%rsp)
  0x00007f7570488f06: movabs $0x7f758592f470,%rdi
  0x00007f7570488f10: movabs $0x7f7570488eb0,%rsi
  0x00007f7570488f1a: mov    %rsp,%rdx
  0x00007f7570488f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488f21: callq  0x00007f75853729fa
  0x00007f7570488f26: hlt    
  ;; } verify_i2ce 
  0x00007f7570488f27: mov    %rsp,%r11
  0x00007f7570488f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488f2e: push   %rax
  0x00007f7570488f2f: mov    %r11,%rax
  0x00007f7570488f32: mov    0x50(%rbx),%r11
  0x00007f7570488f36: mov    %rbx,0x258(%r15)
  0x00007f7570488f3d: mov    %rbx,%rax
  0x00007f7570488f40: jmpq   *%r11
  0x00007f7570488f43: mov    0x8(%rsi),%ebx
  0x00007f7570488f46: shl    $0x3,%rbx
  0x00007f7570488f4a: cmp    0x10(%rax),%rbx
  0x00007f7570488f4e: mov    0x8(%rax),%rbx
  0x00007f7570488f52: je     0x00007f7570488f5d
  0x00007f7570488f58: jmpq   0x00007f757046ec40
  0x00007f7570488f5d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570488f65: je     0x00007f7570489060
  0x00007f7570488f6b: jmpq   0x00007f757046ec40
  0x00007f7570488f70: cmpq   $0x0,0x58(%rbx)
  0x00007f7570488f78: je     0x00007f7570489060
  0x00007f7570488f7e: mov    %rsp,%r13
  0x00007f7570488f81: mov    (%rsp),%rax
  0x00007f7570488f85: and    $0xfffffffffffffff0,%rsp
  0x00007f7570488f89: pushfq 
  0x00007f7570488f8a: sub    $0x8,%rsp
  0x00007f7570488f8e: mov    %rsp,-0x28(%rsp)
  0x00007f7570488f93: sub    $0x80,%rsp
  0x00007f7570488f9a: mov    %rax,0x78(%rsp)
  0x00007f7570488f9f: mov    %rcx,0x70(%rsp)
  0x00007f7570488fa4: mov    %rdx,0x68(%rsp)
  0x00007f7570488fa9: mov    %rbx,0x60(%rsp)
  0x00007f7570488fae: mov    %rbp,0x50(%rsp)
  0x00007f7570488fb3: mov    %rsi,0x48(%rsp)
  0x00007f7570488fb8: mov    %rdi,0x40(%rsp)
  0x00007f7570488fbd: mov    %r8,0x38(%rsp)
  0x00007f7570488fc2: mov    %r9,0x30(%rsp)
  0x00007f7570488fc7: mov    %r10,0x28(%rsp)
  0x00007f7570488fcc: mov    %r11,0x20(%rsp)
  0x00007f7570488fd1: mov    %r12,0x18(%rsp)
  0x00007f7570488fd6: mov    %r13,0x10(%rsp)
  0x00007f7570488fdb: mov    %r14,0x8(%rsp)
  0x00007f7570488fe0: mov    %r15,(%rsp)
  0x00007f7570488fe4: sub    $0x200,%rsp
  0x00007f7570488feb: fxsave64 (%rsp)
  0x00007f7570488ff0: mov    %rbx,%rdi
  0x00007f7570488ff3: mov    %rax,%rsi
  0x00007f7570488ff6: callq  0x00007f7585522bca
  0x00007f7570488ffb: fxrstor64 (%rsp)
  0x00007f7570489000: add    $0x200,%rsp
  0x00007f7570489007: mov    (%rsp),%r15
  0x00007f757048900b: mov    0x8(%rsp),%r14
  0x00007f7570489010: mov    0x10(%rsp),%r13
  0x00007f7570489015: mov    0x18(%rsp),%r12
  0x00007f757048901a: mov    0x20(%rsp),%r11
  0x00007f757048901f: mov    0x28(%rsp),%r10
  0x00007f7570489024: mov    0x30(%rsp),%r9
  0x00007f7570489029: mov    0x38(%rsp),%r8
  0x00007f757048902e: mov    0x40(%rsp),%rdi
  0x00007f7570489033: mov    0x48(%rsp),%rsi
  0x00007f7570489038: mov    0x50(%rsp),%rbp
  0x00007f757048903d: mov    0x60(%rsp),%rbx
  0x00007f7570489042: mov    0x68(%rsp),%rdx
  0x00007f7570489047: mov    0x70(%rsp),%rcx
  0x00007f757048904c: mov    0x78(%rsp),%rax
  0x00007f7570489051: add    $0x80,%rsp
  0x00007f7570489058: add    $0x8,%rsp
  0x00007f757048905c: popfq  
  0x00007f757048905d: mov    %r13,%rsp
  0x00007f7570489060: pop    %rax
  0x00007f7570489061: mov    %rsp,%r13
  0x00007f7570489064: sub    $0x10,%rsp
  0x00007f7570489068: mov    %rax,(%rsp)
  0x00007f757048906c: mov    0x40(%rbx),%rcx
  0x00007f7570489070: jmpq   *%rcx

AHE@0x00007f75800c3188: 0xbbbeb000 i2c: 0x00007f7570489120 c2i: 0x00007f7570489240 c2iUV: 0x00007f7570489213
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)Ljava/lang/Object; (581 bytes generated)
c2i argument handler starts at 0x7f7570489240
  0x00007f7570489120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570489124: movabs $0x7f757036e3e0,%r11
  0x00007f757048912e: cmp    %r11,%rax
  0x00007f7570489131: jbe    0x00007f757048914a
  0x00007f7570489137: movabs $0x7f757046e3e0,%r11
  0x00007f7570489141: cmp    %r11,%rax
  0x00007f7570489144: jb     0x00007f75704891e7
  0x00007f757048914a: movabs $0x7f7570369420,%r11
  0x00007f7570489154: cmp    %r11,%rax
  0x00007f7570489157: jbe    0x00007f7570489170
  0x00007f757048915d: movabs $0x7f757036de58,%r11
  0x00007f7570489167: cmp    %r11,%rax
  0x00007f757048916a: jb     0x00007f75704891e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570489170: mov    %rsp,-0x28(%rsp)
  0x00007f7570489175: sub    $0x80,%rsp
  0x00007f757048917c: mov    %rax,0x78(%rsp)
  0x00007f7570489181: mov    %rcx,0x70(%rsp)
  0x00007f7570489186: mov    %rdx,0x68(%rsp)
  0x00007f757048918b: mov    %rbx,0x60(%rsp)
  0x00007f7570489190: mov    %rbp,0x50(%rsp)
  0x00007f7570489195: mov    %rsi,0x48(%rsp)
  0x00007f757048919a: mov    %rdi,0x40(%rsp)
  0x00007f757048919f: mov    %r8,0x38(%rsp)
  0x00007f75704891a4: mov    %r9,0x30(%rsp)
  0x00007f75704891a9: mov    %r10,0x28(%rsp)
  0x00007f75704891ae: mov    %r11,0x20(%rsp)
  0x00007f75704891b3: mov    %r12,0x18(%rsp)
  0x00007f75704891b8: mov    %r13,0x10(%rsp)
  0x00007f75704891bd: mov    %r14,0x8(%rsp)
  0x00007f75704891c2: mov    %r15,(%rsp)
  0x00007f75704891c6: movabs $0x7f758592f470,%rdi
  0x00007f75704891d0: movabs $0x7f7570489170,%rsi
  0x00007f75704891da: mov    %rsp,%rdx
  0x00007f75704891dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704891e1: callq  0x00007f75853729fa
  0x00007f75704891e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704891e7: mov    %rsp,%r11
  0x00007f75704891ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704891ee: push   %rax
  0x00007f75704891ef: mov    %r11,%rax
  0x00007f75704891f2: mov    0x50(%rbx),%r11
  0x00007f75704891f6: mov    0x28(%rax),%rsi
  0x00007f75704891fa: mov    0x20(%rax),%rdx
  0x00007f75704891fe: mov    0x10(%rax),%rcx
  0x00007f7570489202: mov    0x8(%rax),%r8
  0x00007f7570489206: mov    %rbx,0x258(%r15)
  0x00007f757048920d: mov    %rbx,%rax
  0x00007f7570489210: jmpq   *%r11
  0x00007f7570489213: mov    0x8(%rsi),%ebx
  0x00007f7570489216: shl    $0x3,%rbx
  0x00007f757048921a: cmp    0x10(%rax),%rbx
  0x00007f757048921e: mov    0x8(%rax),%rbx
  0x00007f7570489222: je     0x00007f757048922d
  0x00007f7570489228: jmpq   0x00007f757046ec40
  0x00007f757048922d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489235: je     0x00007f7570489330
  0x00007f757048923b: jmpq   0x00007f757046ec40
  0x00007f7570489240: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489248: je     0x00007f7570489330
  0x00007f757048924e: mov    %rsp,%r13
  0x00007f7570489251: mov    (%rsp),%rax
  0x00007f7570489255: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489259: pushfq 
  0x00007f757048925a: sub    $0x8,%rsp
  0x00007f757048925e: mov    %rsp,-0x28(%rsp)
  0x00007f7570489263: sub    $0x80,%rsp
  0x00007f757048926a: mov    %rax,0x78(%rsp)
  0x00007f757048926f: mov    %rcx,0x70(%rsp)
  0x00007f7570489274: mov    %rdx,0x68(%rsp)
  0x00007f7570489279: mov    %rbx,0x60(%rsp)
  0x00007f757048927e: mov    %rbp,0x50(%rsp)
  0x00007f7570489283: mov    %rsi,0x48(%rsp)
  0x00007f7570489288: mov    %rdi,0x40(%rsp)
  0x00007f757048928d: mov    %r8,0x38(%rsp)
  0x00007f7570489292: mov    %r9,0x30(%rsp)
  0x00007f7570489297: mov    %r10,0x28(%rsp)
  0x00007f757048929c: mov    %r11,0x20(%rsp)
  0x00007f75704892a1: mov    %r12,0x18(%rsp)
  0x00007f75704892a6: mov    %r13,0x10(%rsp)
  0x00007f75704892ab: mov    %r14,0x8(%rsp)
  0x00007f75704892b0: mov    %r15,(%rsp)
  0x00007f75704892b4: sub    $0x200,%rsp
  0x00007f75704892bb: fxsave64 (%rsp)
  0x00007f75704892c0: mov    %rbx,%rdi
  0x00007f75704892c3: mov    %rax,%rsi
  0x00007f75704892c6: callq  0x00007f7585522bca
  0x00007f75704892cb: fxrstor64 (%rsp)
  0x00007f75704892d0: add    $0x200,%rsp
  0x00007f75704892d7: mov    (%rsp),%r15
  0x00007f75704892db: mov    0x8(%rsp),%r14
  0x00007f75704892e0: mov    0x10(%rsp),%r13
  0x00007f75704892e5: mov    0x18(%rsp),%r12
  0x00007f75704892ea: mov    0x20(%rsp),%r11
  0x00007f75704892ef: mov    0x28(%rsp),%r10
  0x00007f75704892f4: mov    0x30(%rsp),%r9
  0x00007f75704892f9: mov    0x38(%rsp),%r8
  0x00007f75704892fe: mov    0x40(%rsp),%rdi
  0x00007f7570489303: mov    0x48(%rsp),%rsi
  0x00007f7570489308: mov    0x50(%rsp),%rbp
  0x00007f757048930d: mov    0x60(%rsp),%rbx
  0x00007f7570489312: mov    0x68(%rsp),%rdx
  0x00007f7570489317: mov    0x70(%rsp),%rcx
  0x00007f757048931c: mov    0x78(%rsp),%rax
  0x00007f7570489321: add    $0x80,%rsp
  0x00007f7570489328: add    $0x8,%rsp
  0x00007f757048932c: popfq  
  0x00007f757048932d: mov    %r13,%rsp
  0x00007f7570489330: pop    %rax
  0x00007f7570489331: mov    %rsp,%r13
  0x00007f7570489334: sub    $0x30,%rsp
  0x00007f7570489338: mov    %rax,(%rsp)
  0x00007f757048933c: mov    %rsi,0x28(%rsp)
  0x00007f7570489341: mov    %rdx,0x20(%rsp)
  0x00007f7570489346: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570489350: mov    %rax,0x18(%rsp)
  0x00007f7570489355: mov    %rcx,0x10(%rsp)
  0x00007f757048935a: mov    %r8,0x8(%rsp)
  0x00007f757048935f: mov    0x40(%rbx),%rcx
  0x00007f7570489363: jmpq   *%rcx

AHE@0x00007f75800c31d0: 0xbbbebe00 i2c: 0x00007f7570489420 c2i: 0x00007f7570489540 c2iUV: 0x00007f7570489513
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)J (596 bytes generated)
c2i argument handler starts at 0x7f7570489540
  0x00007f7570489420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570489424: movabs $0x7f757036e3e0,%r11
  0x00007f757048942e: cmp    %r11,%rax
  0x00007f7570489431: jbe    0x00007f757048944a
  0x00007f7570489437: movabs $0x7f757046e3e0,%r11
  0x00007f7570489441: cmp    %r11,%rax
  0x00007f7570489444: jb     0x00007f75704894e7
  0x00007f757048944a: movabs $0x7f7570369420,%r11
  0x00007f7570489454: cmp    %r11,%rax
  0x00007f7570489457: jbe    0x00007f7570489470
  0x00007f757048945d: movabs $0x7f757036de58,%r11
  0x00007f7570489467: cmp    %r11,%rax
  0x00007f757048946a: jb     0x00007f75704894e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570489470: mov    %rsp,-0x28(%rsp)
  0x00007f7570489475: sub    $0x80,%rsp
  0x00007f757048947c: mov    %rax,0x78(%rsp)
  0x00007f7570489481: mov    %rcx,0x70(%rsp)
  0x00007f7570489486: mov    %rdx,0x68(%rsp)
  0x00007f757048948b: mov    %rbx,0x60(%rsp)
  0x00007f7570489490: mov    %rbp,0x50(%rsp)
  0x00007f7570489495: mov    %rsi,0x48(%rsp)
  0x00007f757048949a: mov    %rdi,0x40(%rsp)
  0x00007f757048949f: mov    %r8,0x38(%rsp)
  0x00007f75704894a4: mov    %r9,0x30(%rsp)
  0x00007f75704894a9: mov    %r10,0x28(%rsp)
  0x00007f75704894ae: mov    %r11,0x20(%rsp)
  0x00007f75704894b3: mov    %r12,0x18(%rsp)
  0x00007f75704894b8: mov    %r13,0x10(%rsp)
  0x00007f75704894bd: mov    %r14,0x8(%rsp)
  0x00007f75704894c2: mov    %r15,(%rsp)
  0x00007f75704894c6: movabs $0x7f758592f470,%rdi
  0x00007f75704894d0: movabs $0x7f7570489470,%rsi
  0x00007f75704894da: mov    %rsp,%rdx
  0x00007f75704894dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704894e1: callq  0x00007f75853729fa
  0x00007f75704894e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704894e7: mov    %rsp,%r11
  0x00007f75704894ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704894ee: push   %rax
  0x00007f75704894ef: mov    %r11,%rax
  0x00007f75704894f2: mov    0x50(%rbx),%r11
  0x00007f75704894f6: mov    0x30(%rax),%rsi
  0x00007f75704894fa: mov    0x28(%rax),%rdx
  0x00007f75704894fe: mov    0x18(%rax),%rcx
  0x00007f7570489502: mov    0x8(%rax),%r8
  0x00007f7570489506: mov    %rbx,0x258(%r15)
  0x00007f757048950d: mov    %rbx,%rax
  0x00007f7570489510: jmpq   *%r11
  0x00007f7570489513: mov    0x8(%rsi),%ebx
  0x00007f7570489516: shl    $0x3,%rbx
  0x00007f757048951a: cmp    0x10(%rax),%rbx
  0x00007f757048951e: mov    0x8(%rax),%rbx
  0x00007f7570489522: je     0x00007f757048952d
  0x00007f7570489528: jmpq   0x00007f757046ec40
  0x00007f757048952d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489535: je     0x00007f7570489630
  0x00007f757048953b: jmpq   0x00007f757046ec40
  0x00007f7570489540: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489548: je     0x00007f7570489630
  0x00007f757048954e: mov    %rsp,%r13
  0x00007f7570489551: mov    (%rsp),%rax
  0x00007f7570489555: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489559: pushfq 
  0x00007f757048955a: sub    $0x8,%rsp
  0x00007f757048955e: mov    %rsp,-0x28(%rsp)
  0x00007f7570489563: sub    $0x80,%rsp
  0x00007f757048956a: mov    %rax,0x78(%rsp)
  0x00007f757048956f: mov    %rcx,0x70(%rsp)
  0x00007f7570489574: mov    %rdx,0x68(%rsp)
  0x00007f7570489579: mov    %rbx,0x60(%rsp)
  0x00007f757048957e: mov    %rbp,0x50(%rsp)
  0x00007f7570489583: mov    %rsi,0x48(%rsp)
  0x00007f7570489588: mov    %rdi,0x40(%rsp)
  0x00007f757048958d: mov    %r8,0x38(%rsp)
  0x00007f7570489592: mov    %r9,0x30(%rsp)
  0x00007f7570489597: mov    %r10,0x28(%rsp)
  0x00007f757048959c: mov    %r11,0x20(%rsp)
  0x00007f75704895a1: mov    %r12,0x18(%rsp)
  0x00007f75704895a6: mov    %r13,0x10(%rsp)
  0x00007f75704895ab: mov    %r14,0x8(%rsp)
  0x00007f75704895b0: mov    %r15,(%rsp)
  0x00007f75704895b4: sub    $0x200,%rsp
  0x00007f75704895bb: fxsave64 (%rsp)
  0x00007f75704895c0: mov    %rbx,%rdi
  0x00007f75704895c3: mov    %rax,%rsi
  0x00007f75704895c6: callq  0x00007f7585522bca
  0x00007f75704895cb: fxrstor64 (%rsp)
  0x00007f75704895d0: add    $0x200,%rsp
  0x00007f75704895d7: mov    (%rsp),%r15
  0x00007f75704895db: mov    0x8(%rsp),%r14
  0x00007f75704895e0: mov    0x10(%rsp),%r13
  0x00007f75704895e5: mov    0x18(%rsp),%r12
  0x00007f75704895ea: mov    0x20(%rsp),%r11
  0x00007f75704895ef: mov    0x28(%rsp),%r10
  0x00007f75704895f4: mov    0x30(%rsp),%r9
  0x00007f75704895f9: mov    0x38(%rsp),%r8
  0x00007f75704895fe: mov    0x40(%rsp),%rdi
  0x00007f7570489603: mov    0x48(%rsp),%rsi
  0x00007f7570489608: mov    0x50(%rsp),%rbp
  0x00007f757048960d: mov    0x60(%rsp),%rbx
  0x00007f7570489612: mov    0x68(%rsp),%rdx
  0x00007f7570489617: mov    0x70(%rsp),%rcx
  0x00007f757048961c: mov    0x78(%rsp),%rax
  0x00007f7570489621: add    $0x80,%rsp
  0x00007f7570489628: add    $0x8,%rsp
  0x00007f757048962c: popfq  
  0x00007f757048962d: mov    %r13,%rsp
  0x00007f7570489630: pop    %rax
  0x00007f7570489631: mov    %rsp,%r13
  0x00007f7570489634: sub    $0x40,%rsp
  0x00007f7570489638: mov    %rax,(%rsp)
  0x00007f757048963c: mov    %rsi,0x30(%rsp)
  0x00007f7570489641: mov    %rdx,0x28(%rsp)
  0x00007f7570489646: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570489650: mov    %rax,0x20(%rsp)
  0x00007f7570489655: mov    %rcx,0x18(%rsp)
  0x00007f757048965a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570489664: mov    %rax,0x10(%rsp)
  0x00007f7570489669: mov    %r8,0x8(%rsp)
  0x00007f757048966e: mov    0x40(%rbx),%rcx
  0x00007f7570489672: jmpq   *%rcx

AHE@0x00007f75800c3218: 0xbbbea000 i2c: 0x00007f7570489720 c2i: 0x00007f7570489840 c2iUV: 0x00007f7570489813
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)I (581 bytes generated)
c2i argument handler starts at 0x7f7570489840
  0x00007f7570489720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570489724: movabs $0x7f757036e3e0,%r11
  0x00007f757048972e: cmp    %r11,%rax
  0x00007f7570489731: jbe    0x00007f757048974a
  0x00007f7570489737: movabs $0x7f757046e3e0,%r11
  0x00007f7570489741: cmp    %r11,%rax
  0x00007f7570489744: jb     0x00007f75704897e7
  0x00007f757048974a: movabs $0x7f7570369420,%r11
  0x00007f7570489754: cmp    %r11,%rax
  0x00007f7570489757: jbe    0x00007f7570489770
  0x00007f757048975d: movabs $0x7f757036de58,%r11
  0x00007f7570489767: cmp    %r11,%rax
  0x00007f757048976a: jb     0x00007f75704897e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570489770: mov    %rsp,-0x28(%rsp)
  0x00007f7570489775: sub    $0x80,%rsp
  0x00007f757048977c: mov    %rax,0x78(%rsp)
  0x00007f7570489781: mov    %rcx,0x70(%rsp)
  0x00007f7570489786: mov    %rdx,0x68(%rsp)
  0x00007f757048978b: mov    %rbx,0x60(%rsp)
  0x00007f7570489790: mov    %rbp,0x50(%rsp)
  0x00007f7570489795: mov    %rsi,0x48(%rsp)
  0x00007f757048979a: mov    %rdi,0x40(%rsp)
  0x00007f757048979f: mov    %r8,0x38(%rsp)
  0x00007f75704897a4: mov    %r9,0x30(%rsp)
  0x00007f75704897a9: mov    %r10,0x28(%rsp)
  0x00007f75704897ae: mov    %r11,0x20(%rsp)
  0x00007f75704897b3: mov    %r12,0x18(%rsp)
  0x00007f75704897b8: mov    %r13,0x10(%rsp)
  0x00007f75704897bd: mov    %r14,0x8(%rsp)
  0x00007f75704897c2: mov    %r15,(%rsp)
  0x00007f75704897c6: movabs $0x7f758592f470,%rdi
  0x00007f75704897d0: movabs $0x7f7570489770,%rsi
  0x00007f75704897da: mov    %rsp,%rdx
  0x00007f75704897dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704897e1: callq  0x00007f75853729fa
  0x00007f75704897e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704897e7: mov    %rsp,%r11
  0x00007f75704897ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704897ee: push   %rax
  0x00007f75704897ef: mov    %r11,%rax
  0x00007f75704897f2: mov    0x50(%rbx),%r11
  0x00007f75704897f6: mov    0x28(%rax),%rsi
  0x00007f75704897fa: mov    0x20(%rax),%rdx
  0x00007f75704897fe: mov    0x10(%rax),%rcx
  0x00007f7570489802: mov    0x8(%rax),%r8d
  0x00007f7570489806: mov    %rbx,0x258(%r15)
  0x00007f757048980d: mov    %rbx,%rax
  0x00007f7570489810: jmpq   *%r11
  0x00007f7570489813: mov    0x8(%rsi),%ebx
  0x00007f7570489816: shl    $0x3,%rbx
  0x00007f757048981a: cmp    0x10(%rax),%rbx
  0x00007f757048981e: mov    0x8(%rax),%rbx
  0x00007f7570489822: je     0x00007f757048982d
  0x00007f7570489828: jmpq   0x00007f757046ec40
  0x00007f757048982d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489835: je     0x00007f7570489930
  0x00007f757048983b: jmpq   0x00007f757046ec40
  0x00007f7570489840: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489848: je     0x00007f7570489930
  0x00007f757048984e: mov    %rsp,%r13
  0x00007f7570489851: mov    (%rsp),%rax
  0x00007f7570489855: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489859: pushfq 
  0x00007f757048985a: sub    $0x8,%rsp
  0x00007f757048985e: mov    %rsp,-0x28(%rsp)
  0x00007f7570489863: sub    $0x80,%rsp
  0x00007f757048986a: mov    %rax,0x78(%rsp)
  0x00007f757048986f: mov    %rcx,0x70(%rsp)
  0x00007f7570489874: mov    %rdx,0x68(%rsp)
  0x00007f7570489879: mov    %rbx,0x60(%rsp)
  0x00007f757048987e: mov    %rbp,0x50(%rsp)
  0x00007f7570489883: mov    %rsi,0x48(%rsp)
  0x00007f7570489888: mov    %rdi,0x40(%rsp)
  0x00007f757048988d: mov    %r8,0x38(%rsp)
  0x00007f7570489892: mov    %r9,0x30(%rsp)
  0x00007f7570489897: mov    %r10,0x28(%rsp)
  0x00007f757048989c: mov    %r11,0x20(%rsp)
  0x00007f75704898a1: mov    %r12,0x18(%rsp)
  0x00007f75704898a6: mov    %r13,0x10(%rsp)
  0x00007f75704898ab: mov    %r14,0x8(%rsp)
  0x00007f75704898b0: mov    %r15,(%rsp)
  0x00007f75704898b4: sub    $0x200,%rsp
  0x00007f75704898bb: fxsave64 (%rsp)
  0x00007f75704898c0: mov    %rbx,%rdi
  0x00007f75704898c3: mov    %rax,%rsi
  0x00007f75704898c6: callq  0x00007f7585522bca
  0x00007f75704898cb: fxrstor64 (%rsp)
  0x00007f75704898d0: add    $0x200,%rsp
  0x00007f75704898d7: mov    (%rsp),%r15
  0x00007f75704898db: mov    0x8(%rsp),%r14
  0x00007f75704898e0: mov    0x10(%rsp),%r13
  0x00007f75704898e5: mov    0x18(%rsp),%r12
  0x00007f75704898ea: mov    0x20(%rsp),%r11
  0x00007f75704898ef: mov    0x28(%rsp),%r10
  0x00007f75704898f4: mov    0x30(%rsp),%r9
  0x00007f75704898f9: mov    0x38(%rsp),%r8
  0x00007f75704898fe: mov    0x40(%rsp),%rdi
  0x00007f7570489903: mov    0x48(%rsp),%rsi
  0x00007f7570489908: mov    0x50(%rsp),%rbp
  0x00007f757048990d: mov    0x60(%rsp),%rbx
  0x00007f7570489912: mov    0x68(%rsp),%rdx
  0x00007f7570489917: mov    0x70(%rsp),%rcx
  0x00007f757048991c: mov    0x78(%rsp),%rax
  0x00007f7570489921: add    $0x80,%rsp
  0x00007f7570489928: add    $0x8,%rsp
  0x00007f757048992c: popfq  
  0x00007f757048992d: mov    %r13,%rsp
  0x00007f7570489930: pop    %rax
  0x00007f7570489931: mov    %rsp,%r13
  0x00007f7570489934: sub    $0x30,%rsp
  0x00007f7570489938: mov    %rax,(%rsp)
  0x00007f757048993c: mov    %rsi,0x28(%rsp)
  0x00007f7570489941: mov    %rdx,0x20(%rsp)
  0x00007f7570489946: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570489950: mov    %rax,0x18(%rsp)
  0x00007f7570489955: mov    %rcx,0x10(%rsp)
  0x00007f757048995a: mov    %r8d,0x8(%rsp)
  0x00007f757048995f: mov    0x40(%rbx),%rcx
  0x00007f7570489963: jmpq   *%rcx

AHE@0x00007f75800c3260: 0xbbbebe00 i2c: 0x00007f7570489a20 c2i: 0x00007f7570489b40 c2iUV: 0x00007f7570489b13
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)J (596 bytes generated)
c2i argument handler starts at 0x7f7570489b40
  0x00007f7570489a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570489a24: movabs $0x7f757036e3e0,%r11
  0x00007f7570489a2e: cmp    %r11,%rax
  0x00007f7570489a31: jbe    0x00007f7570489a4a
  0x00007f7570489a37: movabs $0x7f757046e3e0,%r11
  0x00007f7570489a41: cmp    %r11,%rax
  0x00007f7570489a44: jb     0x00007f7570489ae7
  0x00007f7570489a4a: movabs $0x7f7570369420,%r11
  0x00007f7570489a54: cmp    %r11,%rax
  0x00007f7570489a57: jbe    0x00007f7570489a70
  0x00007f7570489a5d: movabs $0x7f757036de58,%r11
  0x00007f7570489a67: cmp    %r11,%rax
  0x00007f7570489a6a: jb     0x00007f7570489ae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570489a70: mov    %rsp,-0x28(%rsp)
  0x00007f7570489a75: sub    $0x80,%rsp
  0x00007f7570489a7c: mov    %rax,0x78(%rsp)
  0x00007f7570489a81: mov    %rcx,0x70(%rsp)
  0x00007f7570489a86: mov    %rdx,0x68(%rsp)
  0x00007f7570489a8b: mov    %rbx,0x60(%rsp)
  0x00007f7570489a90: mov    %rbp,0x50(%rsp)
  0x00007f7570489a95: mov    %rsi,0x48(%rsp)
  0x00007f7570489a9a: mov    %rdi,0x40(%rsp)
  0x00007f7570489a9f: mov    %r8,0x38(%rsp)
  0x00007f7570489aa4: mov    %r9,0x30(%rsp)
  0x00007f7570489aa9: mov    %r10,0x28(%rsp)
  0x00007f7570489aae: mov    %r11,0x20(%rsp)
  0x00007f7570489ab3: mov    %r12,0x18(%rsp)
  0x00007f7570489ab8: mov    %r13,0x10(%rsp)
  0x00007f7570489abd: mov    %r14,0x8(%rsp)
  0x00007f7570489ac2: mov    %r15,(%rsp)
  0x00007f7570489ac6: movabs $0x7f758592f470,%rdi
  0x00007f7570489ad0: movabs $0x7f7570489a70,%rsi
  0x00007f7570489ada: mov    %rsp,%rdx
  0x00007f7570489add: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489ae1: callq  0x00007f75853729fa
  0x00007f7570489ae6: hlt    
  ;; } verify_i2ce 
  0x00007f7570489ae7: mov    %rsp,%r11
  0x00007f7570489aea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489aee: push   %rax
  0x00007f7570489aef: mov    %r11,%rax
  0x00007f7570489af2: mov    0x50(%rbx),%r11
  0x00007f7570489af6: mov    0x30(%rax),%rsi
  0x00007f7570489afa: mov    0x28(%rax),%rdx
  0x00007f7570489afe: mov    0x18(%rax),%rcx
  0x00007f7570489b02: mov    0x8(%rax),%r8
  0x00007f7570489b06: mov    %rbx,0x258(%r15)
  0x00007f7570489b0d: mov    %rbx,%rax
  0x00007f7570489b10: jmpq   *%r11
  0x00007f7570489b13: mov    0x8(%rsi),%ebx
  0x00007f7570489b16: shl    $0x3,%rbx
  0x00007f7570489b1a: cmp    0x10(%rax),%rbx
  0x00007f7570489b1e: mov    0x8(%rax),%rbx
  0x00007f7570489b22: je     0x00007f7570489b2d
  0x00007f7570489b28: jmpq   0x00007f757046ec40
  0x00007f7570489b2d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489b35: je     0x00007f7570489c30
  0x00007f7570489b3b: jmpq   0x00007f757046ec40
  0x00007f7570489b40: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489b48: je     0x00007f7570489c30
  0x00007f7570489b4e: mov    %rsp,%r13
  0x00007f7570489b51: mov    (%rsp),%rax
  0x00007f7570489b55: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489b59: pushfq 
  0x00007f7570489b5a: sub    $0x8,%rsp
  0x00007f7570489b5e: mov    %rsp,-0x28(%rsp)
  0x00007f7570489b63: sub    $0x80,%rsp
  0x00007f7570489b6a: mov    %rax,0x78(%rsp)
  0x00007f7570489b6f: mov    %rcx,0x70(%rsp)
  0x00007f7570489b74: mov    %rdx,0x68(%rsp)
  0x00007f7570489b79: mov    %rbx,0x60(%rsp)
  0x00007f7570489b7e: mov    %rbp,0x50(%rsp)
  0x00007f7570489b83: mov    %rsi,0x48(%rsp)
  0x00007f7570489b88: mov    %rdi,0x40(%rsp)
  0x00007f7570489b8d: mov    %r8,0x38(%rsp)
  0x00007f7570489b92: mov    %r9,0x30(%rsp)
  0x00007f7570489b97: mov    %r10,0x28(%rsp)
  0x00007f7570489b9c: mov    %r11,0x20(%rsp)
  0x00007f7570489ba1: mov    %r12,0x18(%rsp)
  0x00007f7570489ba6: mov    %r13,0x10(%rsp)
  0x00007f7570489bab: mov    %r14,0x8(%rsp)
  0x00007f7570489bb0: mov    %r15,(%rsp)
  0x00007f7570489bb4: sub    $0x200,%rsp
  0x00007f7570489bbb: fxsave64 (%rsp)
  0x00007f7570489bc0: mov    %rbx,%rdi
  0x00007f7570489bc3: mov    %rax,%rsi
  0x00007f7570489bc6: callq  0x00007f7585522bca
  0x00007f7570489bcb: fxrstor64 (%rsp)
  0x00007f7570489bd0: add    $0x200,%rsp
  0x00007f7570489bd7: mov    (%rsp),%r15
  0x00007f7570489bdb: mov    0x8(%rsp),%r14
  0x00007f7570489be0: mov    0x10(%rsp),%r13
  0x00007f7570489be5: mov    0x18(%rsp),%r12
  0x00007f7570489bea: mov    0x20(%rsp),%r11
  0x00007f7570489bef: mov    0x28(%rsp),%r10
  0x00007f7570489bf4: mov    0x30(%rsp),%r9
  0x00007f7570489bf9: mov    0x38(%rsp),%r8
  0x00007f7570489bfe: mov    0x40(%rsp),%rdi
  0x00007f7570489c03: mov    0x48(%rsp),%rsi
  0x00007f7570489c08: mov    0x50(%rsp),%rbp
  0x00007f7570489c0d: mov    0x60(%rsp),%rbx
  0x00007f7570489c12: mov    0x68(%rsp),%rdx
  0x00007f7570489c17: mov    0x70(%rsp),%rcx
  0x00007f7570489c1c: mov    0x78(%rsp),%rax
  0x00007f7570489c21: add    $0x80,%rsp
  0x00007f7570489c28: add    $0x8,%rsp
  0x00007f7570489c2c: popfq  
  0x00007f7570489c2d: mov    %r13,%rsp
  0x00007f7570489c30: pop    %rax
  0x00007f7570489c31: mov    %rsp,%r13
  0x00007f7570489c34: sub    $0x40,%rsp
  0x00007f7570489c38: mov    %rax,(%rsp)
  0x00007f7570489c3c: mov    %rsi,0x30(%rsp)
  0x00007f7570489c41: mov    %rdx,0x28(%rsp)
  0x00007f7570489c46: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570489c50: mov    %rax,0x20(%rsp)
  0x00007f7570489c55: mov    %rcx,0x18(%rsp)
  0x00007f7570489c5a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570489c64: mov    %rax,0x10(%rsp)
  0x00007f7570489c69: mov    %r8,0x8(%rsp)
  0x00007f7570489c6e: mov    0x40(%rbx),%rcx
  0x00007f7570489c72: jmpq   *%rcx

AHE@0x00007f75800c32a8: 0xbbbea000 i2c: 0x00007f7570489d20 c2i: 0x00007f7570489e40 c2iUV: 0x00007f7570489e13
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)I (581 bytes generated)
c2i argument handler starts at 0x7f7570489e40
  0x00007f7570489d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570489d24: movabs $0x7f757036e3e0,%r11
  0x00007f7570489d2e: cmp    %r11,%rax
  0x00007f7570489d31: jbe    0x00007f7570489d4a
  0x00007f7570489d37: movabs $0x7f757046e3e0,%r11
  0x00007f7570489d41: cmp    %r11,%rax
  0x00007f7570489d44: jb     0x00007f7570489de7
  0x00007f7570489d4a: movabs $0x7f7570369420,%r11
  0x00007f7570489d54: cmp    %r11,%rax
  0x00007f7570489d57: jbe    0x00007f7570489d70
  0x00007f7570489d5d: movabs $0x7f757036de58,%r11
  0x00007f7570489d67: cmp    %r11,%rax
  0x00007f7570489d6a: jb     0x00007f7570489de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570489d70: mov    %rsp,-0x28(%rsp)
  0x00007f7570489d75: sub    $0x80,%rsp
  0x00007f7570489d7c: mov    %rax,0x78(%rsp)
  0x00007f7570489d81: mov    %rcx,0x70(%rsp)
  0x00007f7570489d86: mov    %rdx,0x68(%rsp)
  0x00007f7570489d8b: mov    %rbx,0x60(%rsp)
  0x00007f7570489d90: mov    %rbp,0x50(%rsp)
  0x00007f7570489d95: mov    %rsi,0x48(%rsp)
  0x00007f7570489d9a: mov    %rdi,0x40(%rsp)
  0x00007f7570489d9f: mov    %r8,0x38(%rsp)
  0x00007f7570489da4: mov    %r9,0x30(%rsp)
  0x00007f7570489da9: mov    %r10,0x28(%rsp)
  0x00007f7570489dae: mov    %r11,0x20(%rsp)
  0x00007f7570489db3: mov    %r12,0x18(%rsp)
  0x00007f7570489db8: mov    %r13,0x10(%rsp)
  0x00007f7570489dbd: mov    %r14,0x8(%rsp)
  0x00007f7570489dc2: mov    %r15,(%rsp)
  0x00007f7570489dc6: movabs $0x7f758592f470,%rdi
  0x00007f7570489dd0: movabs $0x7f7570489d70,%rsi
  0x00007f7570489dda: mov    %rsp,%rdx
  0x00007f7570489ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489de1: callq  0x00007f75853729fa
  0x00007f7570489de6: hlt    
  ;; } verify_i2ce 
  0x00007f7570489de7: mov    %rsp,%r11
  0x00007f7570489dea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489dee: push   %rax
  0x00007f7570489def: mov    %r11,%rax
  0x00007f7570489df2: mov    0x50(%rbx),%r11
  0x00007f7570489df6: mov    0x28(%rax),%rsi
  0x00007f7570489dfa: mov    0x20(%rax),%rdx
  0x00007f7570489dfe: mov    0x10(%rax),%rcx
  0x00007f7570489e02: mov    0x8(%rax),%r8d
  0x00007f7570489e06: mov    %rbx,0x258(%r15)
  0x00007f7570489e0d: mov    %rbx,%rax
  0x00007f7570489e10: jmpq   *%r11
  0x00007f7570489e13: mov    0x8(%rsi),%ebx
  0x00007f7570489e16: shl    $0x3,%rbx
  0x00007f7570489e1a: cmp    0x10(%rax),%rbx
  0x00007f7570489e1e: mov    0x8(%rax),%rbx
  0x00007f7570489e22: je     0x00007f7570489e2d
  0x00007f7570489e28: jmpq   0x00007f757046ec40
  0x00007f7570489e2d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489e35: je     0x00007f7570489f30
  0x00007f7570489e3b: jmpq   0x00007f757046ec40
  0x00007f7570489e40: cmpq   $0x0,0x58(%rbx)
  0x00007f7570489e48: je     0x00007f7570489f30
  0x00007f7570489e4e: mov    %rsp,%r13
  0x00007f7570489e51: mov    (%rsp),%rax
  0x00007f7570489e55: and    $0xfffffffffffffff0,%rsp
  0x00007f7570489e59: pushfq 
  0x00007f7570489e5a: sub    $0x8,%rsp
  0x00007f7570489e5e: mov    %rsp,-0x28(%rsp)
  0x00007f7570489e63: sub    $0x80,%rsp
  0x00007f7570489e6a: mov    %rax,0x78(%rsp)
  0x00007f7570489e6f: mov    %rcx,0x70(%rsp)
  0x00007f7570489e74: mov    %rdx,0x68(%rsp)
  0x00007f7570489e79: mov    %rbx,0x60(%rsp)
  0x00007f7570489e7e: mov    %rbp,0x50(%rsp)
  0x00007f7570489e83: mov    %rsi,0x48(%rsp)
  0x00007f7570489e88: mov    %rdi,0x40(%rsp)
  0x00007f7570489e8d: mov    %r8,0x38(%rsp)
  0x00007f7570489e92: mov    %r9,0x30(%rsp)
  0x00007f7570489e97: mov    %r10,0x28(%rsp)
  0x00007f7570489e9c: mov    %r11,0x20(%rsp)
  0x00007f7570489ea1: mov    %r12,0x18(%rsp)
  0x00007f7570489ea6: mov    %r13,0x10(%rsp)
  0x00007f7570489eab: mov    %r14,0x8(%rsp)
  0x00007f7570489eb0: mov    %r15,(%rsp)
  0x00007f7570489eb4: sub    $0x200,%rsp
  0x00007f7570489ebb: fxsave64 (%rsp)
  0x00007f7570489ec0: mov    %rbx,%rdi
  0x00007f7570489ec3: mov    %rax,%rsi
  0x00007f7570489ec6: callq  0x00007f7585522bca
  0x00007f7570489ecb: fxrstor64 (%rsp)
  0x00007f7570489ed0: add    $0x200,%rsp
  0x00007f7570489ed7: mov    (%rsp),%r15
  0x00007f7570489edb: mov    0x8(%rsp),%r14
  0x00007f7570489ee0: mov    0x10(%rsp),%r13
  0x00007f7570489ee5: mov    0x18(%rsp),%r12
  0x00007f7570489eea: mov    0x20(%rsp),%r11
  0x00007f7570489eef: mov    0x28(%rsp),%r10
  0x00007f7570489ef4: mov    0x30(%rsp),%r9
  0x00007f7570489ef9: mov    0x38(%rsp),%r8
  0x00007f7570489efe: mov    0x40(%rsp),%rdi
  0x00007f7570489f03: mov    0x48(%rsp),%rsi
  0x00007f7570489f08: mov    0x50(%rsp),%rbp
  0x00007f7570489f0d: mov    0x60(%rsp),%rbx
  0x00007f7570489f12: mov    0x68(%rsp),%rdx
  0x00007f7570489f17: mov    0x70(%rsp),%rcx
  0x00007f7570489f1c: mov    0x78(%rsp),%rax
  0x00007f7570489f21: add    $0x80,%rsp
  0x00007f7570489f28: add    $0x8,%rsp
  0x00007f7570489f2c: popfq  
  0x00007f7570489f2d: mov    %r13,%rsp
  0x00007f7570489f30: pop    %rax
  0x00007f7570489f31: mov    %rsp,%r13
  0x00007f7570489f34: sub    $0x30,%rsp
  0x00007f7570489f38: mov    %rax,(%rsp)
  0x00007f7570489f3c: mov    %rsi,0x28(%rsp)
  0x00007f7570489f41: mov    %rdx,0x20(%rsp)
  0x00007f7570489f46: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570489f50: mov    %rax,0x18(%rsp)
  0x00007f7570489f55: mov    %rcx,0x10(%rsp)
  0x00007f7570489f5a: mov    %r8d,0x8(%rsp)
  0x00007f7570489f5f: mov    0x40(%rbx),%rcx
  0x00007f7570489f63: jmpq   *%rcx

AHE@0x00007f75800c32f0: 0xbbbea000 i2c: 0x00007f757048a020 c2i: 0x00007f757048a140 c2iUV: 0x00007f757048a113
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (581 bytes generated)
c2i argument handler starts at 0x7f757048a140
  0x00007f757048a020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048a024: movabs $0x7f757036e3e0,%r11
  0x00007f757048a02e: cmp    %r11,%rax
  0x00007f757048a031: jbe    0x00007f757048a04a
  0x00007f757048a037: movabs $0x7f757046e3e0,%r11
  0x00007f757048a041: cmp    %r11,%rax
  0x00007f757048a044: jb     0x00007f757048a0e7
  0x00007f757048a04a: movabs $0x7f7570369420,%r11
  0x00007f757048a054: cmp    %r11,%rax
  0x00007f757048a057: jbe    0x00007f757048a070
  0x00007f757048a05d: movabs $0x7f757036de58,%r11
  0x00007f757048a067: cmp    %r11,%rax
  0x00007f757048a06a: jb     0x00007f757048a0e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048a070: mov    %rsp,-0x28(%rsp)
  0x00007f757048a075: sub    $0x80,%rsp
  0x00007f757048a07c: mov    %rax,0x78(%rsp)
  0x00007f757048a081: mov    %rcx,0x70(%rsp)
  0x00007f757048a086: mov    %rdx,0x68(%rsp)
  0x00007f757048a08b: mov    %rbx,0x60(%rsp)
  0x00007f757048a090: mov    %rbp,0x50(%rsp)
  0x00007f757048a095: mov    %rsi,0x48(%rsp)
  0x00007f757048a09a: mov    %rdi,0x40(%rsp)
  0x00007f757048a09f: mov    %r8,0x38(%rsp)
  0x00007f757048a0a4: mov    %r9,0x30(%rsp)
  0x00007f757048a0a9: mov    %r10,0x28(%rsp)
  0x00007f757048a0ae: mov    %r11,0x20(%rsp)
  0x00007f757048a0b3: mov    %r12,0x18(%rsp)
  0x00007f757048a0b8: mov    %r13,0x10(%rsp)
  0x00007f757048a0bd: mov    %r14,0x8(%rsp)
  0x00007f757048a0c2: mov    %r15,(%rsp)
  0x00007f757048a0c6: movabs $0x7f758592f470,%rdi
  0x00007f757048a0d0: movabs $0x7f757048a070,%rsi
  0x00007f757048a0da: mov    %rsp,%rdx
  0x00007f757048a0dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a0e1: callq  0x00007f75853729fa
  0x00007f757048a0e6: hlt    
  ;; } verify_i2ce 
  0x00007f757048a0e7: mov    %rsp,%r11
  0x00007f757048a0ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a0ee: push   %rax
  0x00007f757048a0ef: mov    %r11,%rax
  0x00007f757048a0f2: mov    0x50(%rbx),%r11
  0x00007f757048a0f6: mov    0x28(%rax),%rsi
  0x00007f757048a0fa: mov    0x20(%rax),%rdx
  0x00007f757048a0fe: mov    0x10(%rax),%rcx
  0x00007f757048a102: mov    0x8(%rax),%r8d
  0x00007f757048a106: mov    %rbx,0x258(%r15)
  0x00007f757048a10d: mov    %rbx,%rax
  0x00007f757048a110: jmpq   *%r11
  0x00007f757048a113: mov    0x8(%rsi),%ebx
  0x00007f757048a116: shl    $0x3,%rbx
  0x00007f757048a11a: cmp    0x10(%rax),%rbx
  0x00007f757048a11e: mov    0x8(%rax),%rbx
  0x00007f757048a122: je     0x00007f757048a12d
  0x00007f757048a128: jmpq   0x00007f757046ec40
  0x00007f757048a12d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048a135: je     0x00007f757048a230
  0x00007f757048a13b: jmpq   0x00007f757046ec40
  0x00007f757048a140: cmpq   $0x0,0x58(%rbx)
  0x00007f757048a148: je     0x00007f757048a230
  0x00007f757048a14e: mov    %rsp,%r13
  0x00007f757048a151: mov    (%rsp),%rax
  0x00007f757048a155: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a159: pushfq 
  0x00007f757048a15a: sub    $0x8,%rsp
  0x00007f757048a15e: mov    %rsp,-0x28(%rsp)
  0x00007f757048a163: sub    $0x80,%rsp
  0x00007f757048a16a: mov    %rax,0x78(%rsp)
  0x00007f757048a16f: mov    %rcx,0x70(%rsp)
  0x00007f757048a174: mov    %rdx,0x68(%rsp)
  0x00007f757048a179: mov    %rbx,0x60(%rsp)
  0x00007f757048a17e: mov    %rbp,0x50(%rsp)
  0x00007f757048a183: mov    %rsi,0x48(%rsp)
  0x00007f757048a188: mov    %rdi,0x40(%rsp)
  0x00007f757048a18d: mov    %r8,0x38(%rsp)
  0x00007f757048a192: mov    %r9,0x30(%rsp)
  0x00007f757048a197: mov    %r10,0x28(%rsp)
  0x00007f757048a19c: mov    %r11,0x20(%rsp)
  0x00007f757048a1a1: mov    %r12,0x18(%rsp)
  0x00007f757048a1a6: mov    %r13,0x10(%rsp)
  0x00007f757048a1ab: mov    %r14,0x8(%rsp)
  0x00007f757048a1b0: mov    %r15,(%rsp)
  0x00007f757048a1b4: sub    $0x200,%rsp
  0x00007f757048a1bb: fxsave64 (%rsp)
  0x00007f757048a1c0: mov    %rbx,%rdi
  0x00007f757048a1c3: mov    %rax,%rsi
  0x00007f757048a1c6: callq  0x00007f7585522bca
  0x00007f757048a1cb: fxrstor64 (%rsp)
  0x00007f757048a1d0: add    $0x200,%rsp
  0x00007f757048a1d7: mov    (%rsp),%r15
  0x00007f757048a1db: mov    0x8(%rsp),%r14
  0x00007f757048a1e0: mov    0x10(%rsp),%r13
  0x00007f757048a1e5: mov    0x18(%rsp),%r12
  0x00007f757048a1ea: mov    0x20(%rsp),%r11
  0x00007f757048a1ef: mov    0x28(%rsp),%r10
  0x00007f757048a1f4: mov    0x30(%rsp),%r9
  0x00007f757048a1f9: mov    0x38(%rsp),%r8
  0x00007f757048a1fe: mov    0x40(%rsp),%rdi
  0x00007f757048a203: mov    0x48(%rsp),%rsi
  0x00007f757048a208: mov    0x50(%rsp),%rbp
  0x00007f757048a20d: mov    0x60(%rsp),%rbx
  0x00007f757048a212: mov    0x68(%rsp),%rdx
  0x00007f757048a217: mov    0x70(%rsp),%rcx
  0x00007f757048a21c: mov    0x78(%rsp),%rax
  0x00007f757048a221: add    $0x80,%rsp
  0x00007f757048a228: add    $0x8,%rsp
  0x00007f757048a22c: popfq  
  0x00007f757048a22d: mov    %r13,%rsp
  0x00007f757048a230: pop    %rax
  0x00007f757048a231: mov    %rsp,%r13
  0x00007f757048a234: sub    $0x30,%rsp
  0x00007f757048a238: mov    %rax,(%rsp)
  0x00007f757048a23c: mov    %rsi,0x28(%rsp)
  0x00007f757048a241: mov    %rdx,0x20(%rsp)
  0x00007f757048a246: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048a250: mov    %rax,0x18(%rsp)
  0x00007f757048a255: mov    %rcx,0x10(%rsp)
  0x00007f757048a25a: mov    %r8d,0x8(%rsp)
  0x00007f757048a25f: mov    0x40(%rbx),%rcx
  0x00007f757048a263: jmpq   *%rcx

AHE@0x00007f75800c3338: 0xbbbebe00 i2c: 0x00007f757048a320 c2i: 0x00007f757048a440 c2iUV: 0x00007f757048a413
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (596 bytes generated)
c2i argument handler starts at 0x7f757048a440
  0x00007f757048a320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048a324: movabs $0x7f757036e3e0,%r11
  0x00007f757048a32e: cmp    %r11,%rax
  0x00007f757048a331: jbe    0x00007f757048a34a
  0x00007f757048a337: movabs $0x7f757046e3e0,%r11
  0x00007f757048a341: cmp    %r11,%rax
  0x00007f757048a344: jb     0x00007f757048a3e7
  0x00007f757048a34a: movabs $0x7f7570369420,%r11
  0x00007f757048a354: cmp    %r11,%rax
  0x00007f757048a357: jbe    0x00007f757048a370
  0x00007f757048a35d: movabs $0x7f757036de58,%r11
  0x00007f757048a367: cmp    %r11,%rax
  0x00007f757048a36a: jb     0x00007f757048a3e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048a370: mov    %rsp,-0x28(%rsp)
  0x00007f757048a375: sub    $0x80,%rsp
  0x00007f757048a37c: mov    %rax,0x78(%rsp)
  0x00007f757048a381: mov    %rcx,0x70(%rsp)
  0x00007f757048a386: mov    %rdx,0x68(%rsp)
  0x00007f757048a38b: mov    %rbx,0x60(%rsp)
  0x00007f757048a390: mov    %rbp,0x50(%rsp)
  0x00007f757048a395: mov    %rsi,0x48(%rsp)
  0x00007f757048a39a: mov    %rdi,0x40(%rsp)
  0x00007f757048a39f: mov    %r8,0x38(%rsp)
  0x00007f757048a3a4: mov    %r9,0x30(%rsp)
  0x00007f757048a3a9: mov    %r10,0x28(%rsp)
  0x00007f757048a3ae: mov    %r11,0x20(%rsp)
  0x00007f757048a3b3: mov    %r12,0x18(%rsp)
  0x00007f757048a3b8: mov    %r13,0x10(%rsp)
  0x00007f757048a3bd: mov    %r14,0x8(%rsp)
  0x00007f757048a3c2: mov    %r15,(%rsp)
  0x00007f757048a3c6: movabs $0x7f758592f470,%rdi
  0x00007f757048a3d0: movabs $0x7f757048a370,%rsi
  0x00007f757048a3da: mov    %rsp,%rdx
  0x00007f757048a3dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a3e1: callq  0x00007f75853729fa
  0x00007f757048a3e6: hlt    
  ;; } verify_i2ce 
  0x00007f757048a3e7: mov    %rsp,%r11
  0x00007f757048a3ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a3ee: push   %rax
  0x00007f757048a3ef: mov    %r11,%rax
  0x00007f757048a3f2: mov    0x50(%rbx),%r11
  0x00007f757048a3f6: mov    0x30(%rax),%rsi
  0x00007f757048a3fa: mov    0x28(%rax),%rdx
  0x00007f757048a3fe: mov    0x18(%rax),%rcx
  0x00007f757048a402: mov    0x8(%rax),%r8
  0x00007f757048a406: mov    %rbx,0x258(%r15)
  0x00007f757048a40d: mov    %rbx,%rax
  0x00007f757048a410: jmpq   *%r11
  0x00007f757048a413: mov    0x8(%rsi),%ebx
  0x00007f757048a416: shl    $0x3,%rbx
  0x00007f757048a41a: cmp    0x10(%rax),%rbx
  0x00007f757048a41e: mov    0x8(%rax),%rbx
  0x00007f757048a422: je     0x00007f757048a42d
  0x00007f757048a428: jmpq   0x00007f757046ec40
  0x00007f757048a42d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048a435: je     0x00007f757048a530
  0x00007f757048a43b: jmpq   0x00007f757046ec40
  0x00007f757048a440: cmpq   $0x0,0x58(%rbx)
  0x00007f757048a448: je     0x00007f757048a530
  0x00007f757048a44e: mov    %rsp,%r13
  0x00007f757048a451: mov    (%rsp),%rax
  0x00007f757048a455: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a459: pushfq 
  0x00007f757048a45a: sub    $0x8,%rsp
  0x00007f757048a45e: mov    %rsp,-0x28(%rsp)
  0x00007f757048a463: sub    $0x80,%rsp
  0x00007f757048a46a: mov    %rax,0x78(%rsp)
  0x00007f757048a46f: mov    %rcx,0x70(%rsp)
  0x00007f757048a474: mov    %rdx,0x68(%rsp)
  0x00007f757048a479: mov    %rbx,0x60(%rsp)
  0x00007f757048a47e: mov    %rbp,0x50(%rsp)
  0x00007f757048a483: mov    %rsi,0x48(%rsp)
  0x00007f757048a488: mov    %rdi,0x40(%rsp)
  0x00007f757048a48d: mov    %r8,0x38(%rsp)
  0x00007f757048a492: mov    %r9,0x30(%rsp)
  0x00007f757048a497: mov    %r10,0x28(%rsp)
  0x00007f757048a49c: mov    %r11,0x20(%rsp)
  0x00007f757048a4a1: mov    %r12,0x18(%rsp)
  0x00007f757048a4a6: mov    %r13,0x10(%rsp)
  0x00007f757048a4ab: mov    %r14,0x8(%rsp)
  0x00007f757048a4b0: mov    %r15,(%rsp)
  0x00007f757048a4b4: sub    $0x200,%rsp
  0x00007f757048a4bb: fxsave64 (%rsp)
  0x00007f757048a4c0: mov    %rbx,%rdi
  0x00007f757048a4c3: mov    %rax,%rsi
  0x00007f757048a4c6: callq  0x00007f7585522bca
  0x00007f757048a4cb: fxrstor64 (%rsp)
  0x00007f757048a4d0: add    $0x200,%rsp
  0x00007f757048a4d7: mov    (%rsp),%r15
  0x00007f757048a4db: mov    0x8(%rsp),%r14
  0x00007f757048a4e0: mov    0x10(%rsp),%r13
  0x00007f757048a4e5: mov    0x18(%rsp),%r12
  0x00007f757048a4ea: mov    0x20(%rsp),%r11
  0x00007f757048a4ef: mov    0x28(%rsp),%r10
  0x00007f757048a4f4: mov    0x30(%rsp),%r9
  0x00007f757048a4f9: mov    0x38(%rsp),%r8
  0x00007f757048a4fe: mov    0x40(%rsp),%rdi
  0x00007f757048a503: mov    0x48(%rsp),%rsi
  0x00007f757048a508: mov    0x50(%rsp),%rbp
  0x00007f757048a50d: mov    0x60(%rsp),%rbx
  0x00007f757048a512: mov    0x68(%rsp),%rdx
  0x00007f757048a517: mov    0x70(%rsp),%rcx
  0x00007f757048a51c: mov    0x78(%rsp),%rax
  0x00007f757048a521: add    $0x80,%rsp
  0x00007f757048a528: add    $0x8,%rsp
  0x00007f757048a52c: popfq  
  0x00007f757048a52d: mov    %r13,%rsp
  0x00007f757048a530: pop    %rax
  0x00007f757048a531: mov    %rsp,%r13
  0x00007f757048a534: sub    $0x40,%rsp
  0x00007f757048a538: mov    %rax,(%rsp)
  0x00007f757048a53c: mov    %rsi,0x30(%rsp)
  0x00007f757048a541: mov    %rdx,0x28(%rsp)
  0x00007f757048a546: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048a550: mov    %rax,0x20(%rsp)
  0x00007f757048a555: mov    %rcx,0x18(%rsp)
  0x00007f757048a55a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048a564: mov    %rax,0x10(%rsp)
  0x00007f757048a569: mov    %r8,0x8(%rsp)
  0x00007f757048a56e: mov    0x40(%rbx),%rcx
  0x00007f757048a572: jmpq   *%rcx

AHE@0x00007f75800c3380: 0xbbbeb000 i2c: 0x00007f757048a620 c2i: 0x00007f757048a740 c2iUV: 0x00007f757048a713
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (581 bytes generated)
c2i argument handler starts at 0x7f757048a740
  0x00007f757048a620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048a624: movabs $0x7f757036e3e0,%r11
  0x00007f757048a62e: cmp    %r11,%rax
  0x00007f757048a631: jbe    0x00007f757048a64a
  0x00007f757048a637: movabs $0x7f757046e3e0,%r11
  0x00007f757048a641: cmp    %r11,%rax
  0x00007f757048a644: jb     0x00007f757048a6e7
  0x00007f757048a64a: movabs $0x7f7570369420,%r11
  0x00007f757048a654: cmp    %r11,%rax
  0x00007f757048a657: jbe    0x00007f757048a670
  0x00007f757048a65d: movabs $0x7f757036de58,%r11
  0x00007f757048a667: cmp    %r11,%rax
  0x00007f757048a66a: jb     0x00007f757048a6e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048a670: mov    %rsp,-0x28(%rsp)
  0x00007f757048a675: sub    $0x80,%rsp
  0x00007f757048a67c: mov    %rax,0x78(%rsp)
  0x00007f757048a681: mov    %rcx,0x70(%rsp)
  0x00007f757048a686: mov    %rdx,0x68(%rsp)
  0x00007f757048a68b: mov    %rbx,0x60(%rsp)
  0x00007f757048a690: mov    %rbp,0x50(%rsp)
  0x00007f757048a695: mov    %rsi,0x48(%rsp)
  0x00007f757048a69a: mov    %rdi,0x40(%rsp)
  0x00007f757048a69f: mov    %r8,0x38(%rsp)
  0x00007f757048a6a4: mov    %r9,0x30(%rsp)
  0x00007f757048a6a9: mov    %r10,0x28(%rsp)
  0x00007f757048a6ae: mov    %r11,0x20(%rsp)
  0x00007f757048a6b3: mov    %r12,0x18(%rsp)
  0x00007f757048a6b8: mov    %r13,0x10(%rsp)
  0x00007f757048a6bd: mov    %r14,0x8(%rsp)
  0x00007f757048a6c2: mov    %r15,(%rsp)
  0x00007f757048a6c6: movabs $0x7f758592f470,%rdi
  0x00007f757048a6d0: movabs $0x7f757048a670,%rsi
  0x00007f757048a6da: mov    %rsp,%rdx
  0x00007f757048a6dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a6e1: callq  0x00007f75853729fa
  0x00007f757048a6e6: hlt    
  ;; } verify_i2ce 
  0x00007f757048a6e7: mov    %rsp,%r11
  0x00007f757048a6ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a6ee: push   %rax
  0x00007f757048a6ef: mov    %r11,%rax
  0x00007f757048a6f2: mov    0x50(%rbx),%r11
  0x00007f757048a6f6: mov    0x28(%rax),%rsi
  0x00007f757048a6fa: mov    0x20(%rax),%rdx
  0x00007f757048a6fe: mov    0x10(%rax),%rcx
  0x00007f757048a702: mov    0x8(%rax),%r8
  0x00007f757048a706: mov    %rbx,0x258(%r15)
  0x00007f757048a70d: mov    %rbx,%rax
  0x00007f757048a710: jmpq   *%r11
  0x00007f757048a713: mov    0x8(%rsi),%ebx
  0x00007f757048a716: shl    $0x3,%rbx
  0x00007f757048a71a: cmp    0x10(%rax),%rbx
  0x00007f757048a71e: mov    0x8(%rax),%rbx
  0x00007f757048a722: je     0x00007f757048a72d
  0x00007f757048a728: jmpq   0x00007f757046ec40
  0x00007f757048a72d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048a735: je     0x00007f757048a830
  0x00007f757048a73b: jmpq   0x00007f757046ec40
  0x00007f757048a740: cmpq   $0x0,0x58(%rbx)
  0x00007f757048a748: je     0x00007f757048a830
  0x00007f757048a74e: mov    %rsp,%r13
  0x00007f757048a751: mov    (%rsp),%rax
  0x00007f757048a755: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a759: pushfq 
  0x00007f757048a75a: sub    $0x8,%rsp
  0x00007f757048a75e: mov    %rsp,-0x28(%rsp)
  0x00007f757048a763: sub    $0x80,%rsp
  0x00007f757048a76a: mov    %rax,0x78(%rsp)
  0x00007f757048a76f: mov    %rcx,0x70(%rsp)
  0x00007f757048a774: mov    %rdx,0x68(%rsp)
  0x00007f757048a779: mov    %rbx,0x60(%rsp)
  0x00007f757048a77e: mov    %rbp,0x50(%rsp)
  0x00007f757048a783: mov    %rsi,0x48(%rsp)
  0x00007f757048a788: mov    %rdi,0x40(%rsp)
  0x00007f757048a78d: mov    %r8,0x38(%rsp)
  0x00007f757048a792: mov    %r9,0x30(%rsp)
  0x00007f757048a797: mov    %r10,0x28(%rsp)
  0x00007f757048a79c: mov    %r11,0x20(%rsp)
  0x00007f757048a7a1: mov    %r12,0x18(%rsp)
  0x00007f757048a7a6: mov    %r13,0x10(%rsp)
  0x00007f757048a7ab: mov    %r14,0x8(%rsp)
  0x00007f757048a7b0: mov    %r15,(%rsp)
  0x00007f757048a7b4: sub    $0x200,%rsp
  0x00007f757048a7bb: fxsave64 (%rsp)
  0x00007f757048a7c0: mov    %rbx,%rdi
  0x00007f757048a7c3: mov    %rax,%rsi
  0x00007f757048a7c6: callq  0x00007f7585522bca
  0x00007f757048a7cb: fxrstor64 (%rsp)
  0x00007f757048a7d0: add    $0x200,%rsp
  0x00007f757048a7d7: mov    (%rsp),%r15
  0x00007f757048a7db: mov    0x8(%rsp),%r14
  0x00007f757048a7e0: mov    0x10(%rsp),%r13
  0x00007f757048a7e5: mov    0x18(%rsp),%r12
  0x00007f757048a7ea: mov    0x20(%rsp),%r11
  0x00007f757048a7ef: mov    0x28(%rsp),%r10
  0x00007f757048a7f4: mov    0x30(%rsp),%r9
  0x00007f757048a7f9: mov    0x38(%rsp),%r8
  0x00007f757048a7fe: mov    0x40(%rsp),%rdi
  0x00007f757048a803: mov    0x48(%rsp),%rsi
  0x00007f757048a808: mov    0x50(%rsp),%rbp
  0x00007f757048a80d: mov    0x60(%rsp),%rbx
  0x00007f757048a812: mov    0x68(%rsp),%rdx
  0x00007f757048a817: mov    0x70(%rsp),%rcx
  0x00007f757048a81c: mov    0x78(%rsp),%rax
  0x00007f757048a821: add    $0x80,%rsp
  0x00007f757048a828: add    $0x8,%rsp
  0x00007f757048a82c: popfq  
  0x00007f757048a82d: mov    %r13,%rsp
  0x00007f757048a830: pop    %rax
  0x00007f757048a831: mov    %rsp,%r13
  0x00007f757048a834: sub    $0x30,%rsp
  0x00007f757048a838: mov    %rax,(%rsp)
  0x00007f757048a83c: mov    %rsi,0x28(%rsp)
  0x00007f757048a841: mov    %rdx,0x20(%rsp)
  0x00007f757048a846: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048a850: mov    %rax,0x18(%rsp)
  0x00007f757048a855: mov    %rcx,0x10(%rsp)
  0x00007f757048a85a: mov    %r8,0x8(%rsp)
  0x00007f757048a85f: mov    0x40(%rbx),%rcx
  0x00007f757048a863: jmpq   *%rcx

AHE@0x00007f75800c33c8: 0xbbbeaa00 i2c: 0x00007f757048a920 c2i: 0x00007f757048aa44 c2iUV: 0x00007f757048aa17
i2c argument handler #0 for: receiver (Ljava/lang/Object;JII)Z (590 bytes generated)
c2i argument handler starts at 0x7f757048aa44
  0x00007f757048a920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048a924: movabs $0x7f757036e3e0,%r11
  0x00007f757048a92e: cmp    %r11,%rax
  0x00007f757048a931: jbe    0x00007f757048a94a
  0x00007f757048a937: movabs $0x7f757046e3e0,%r11
  0x00007f757048a941: cmp    %r11,%rax
  0x00007f757048a944: jb     0x00007f757048a9e7
  0x00007f757048a94a: movabs $0x7f7570369420,%r11
  0x00007f757048a954: cmp    %r11,%rax
  0x00007f757048a957: jbe    0x00007f757048a970
  0x00007f757048a95d: movabs $0x7f757036de58,%r11
  0x00007f757048a967: cmp    %r11,%rax
  0x00007f757048a96a: jb     0x00007f757048a9e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048a970: mov    %rsp,-0x28(%rsp)
  0x00007f757048a975: sub    $0x80,%rsp
  0x00007f757048a97c: mov    %rax,0x78(%rsp)
  0x00007f757048a981: mov    %rcx,0x70(%rsp)
  0x00007f757048a986: mov    %rdx,0x68(%rsp)
  0x00007f757048a98b: mov    %rbx,0x60(%rsp)
  0x00007f757048a990: mov    %rbp,0x50(%rsp)
  0x00007f757048a995: mov    %rsi,0x48(%rsp)
  0x00007f757048a99a: mov    %rdi,0x40(%rsp)
  0x00007f757048a99f: mov    %r8,0x38(%rsp)
  0x00007f757048a9a4: mov    %r9,0x30(%rsp)
  0x00007f757048a9a9: mov    %r10,0x28(%rsp)
  0x00007f757048a9ae: mov    %r11,0x20(%rsp)
  0x00007f757048a9b3: mov    %r12,0x18(%rsp)
  0x00007f757048a9b8: mov    %r13,0x10(%rsp)
  0x00007f757048a9bd: mov    %r14,0x8(%rsp)
  0x00007f757048a9c2: mov    %r15,(%rsp)
  0x00007f757048a9c6: movabs $0x7f758592f470,%rdi
  0x00007f757048a9d0: movabs $0x7f757048a970,%rsi
  0x00007f757048a9da: mov    %rsp,%rdx
  0x00007f757048a9dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a9e1: callq  0x00007f75853729fa
  0x00007f757048a9e6: hlt    
  ;; } verify_i2ce 
  0x00007f757048a9e7: mov    %rsp,%r11
  0x00007f757048a9ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757048a9ee: push   %rax
  0x00007f757048a9ef: mov    %r11,%rax
  0x00007f757048a9f2: mov    0x50(%rbx),%r11
  0x00007f757048a9f6: mov    0x30(%rax),%rsi
  0x00007f757048a9fa: mov    0x28(%rax),%rdx
  0x00007f757048a9fe: mov    0x18(%rax),%rcx
  0x00007f757048aa02: mov    0x10(%rax),%r8d
  0x00007f757048aa06: mov    0x8(%rax),%r9d
  0x00007f757048aa0a: mov    %rbx,0x258(%r15)
  0x00007f757048aa11: mov    %rbx,%rax
  0x00007f757048aa14: jmpq   *%r11
  0x00007f757048aa17: mov    0x8(%rsi),%ebx
  0x00007f757048aa1a: shl    $0x3,%rbx
  0x00007f757048aa1e: cmp    0x10(%rax),%rbx
  0x00007f757048aa22: mov    0x8(%rax),%rbx
  0x00007f757048aa26: je     0x00007f757048aa31
  0x00007f757048aa2c: jmpq   0x00007f757046ec40
  0x00007f757048aa31: cmpq   $0x0,0x58(%rbx)
  0x00007f757048aa39: je     0x00007f757048ab34
  0x00007f757048aa3f: jmpq   0x00007f757046ec40
  0x00007f757048aa44: cmpq   $0x0,0x58(%rbx)
  0x00007f757048aa4c: je     0x00007f757048ab34
  0x00007f757048aa52: mov    %rsp,%r13
  0x00007f757048aa55: mov    (%rsp),%rax
  0x00007f757048aa59: and    $0xfffffffffffffff0,%rsp
  0x00007f757048aa5d: pushfq 
  0x00007f757048aa5e: sub    $0x8,%rsp
  0x00007f757048aa62: mov    %rsp,-0x28(%rsp)
  0x00007f757048aa67: sub    $0x80,%rsp
  0x00007f757048aa6e: mov    %rax,0x78(%rsp)
  0x00007f757048aa73: mov    %rcx,0x70(%rsp)
  0x00007f757048aa78: mov    %rdx,0x68(%rsp)
  0x00007f757048aa7d: mov    %rbx,0x60(%rsp)
  0x00007f757048aa82: mov    %rbp,0x50(%rsp)
  0x00007f757048aa87: mov    %rsi,0x48(%rsp)
  0x00007f757048aa8c: mov    %rdi,0x40(%rsp)
  0x00007f757048aa91: mov    %r8,0x38(%rsp)
  0x00007f757048aa96: mov    %r9,0x30(%rsp)
  0x00007f757048aa9b: mov    %r10,0x28(%rsp)
  0x00007f757048aaa0: mov    %r11,0x20(%rsp)
  0x00007f757048aaa5: mov    %r12,0x18(%rsp)
  0x00007f757048aaaa: mov    %r13,0x10(%rsp)
  0x00007f757048aaaf: mov    %r14,0x8(%rsp)
  0x00007f757048aab4: mov    %r15,(%rsp)
  0x00007f757048aab8: sub    $0x200,%rsp
  0x00007f757048aabf: fxsave64 (%rsp)
  0x00007f757048aac4: mov    %rbx,%rdi
  0x00007f757048aac7: mov    %rax,%rsi
  0x00007f757048aaca: callq  0x00007f7585522bca
  0x00007f757048aacf: fxrstor64 (%rsp)
  0x00007f757048aad4: add    $0x200,%rsp
  0x00007f757048aadb: mov    (%rsp),%r15
  0x00007f757048aadf: mov    0x8(%rsp),%r14
  0x00007f757048aae4: mov    0x10(%rsp),%r13
  0x00007f757048aae9: mov    0x18(%rsp),%r12
  0x00007f757048aaee: mov    0x20(%rsp),%r11
  0x00007f757048aaf3: mov    0x28(%rsp),%r10
  0x00007f757048aaf8: mov    0x30(%rsp),%r9
  0x00007f757048aafd: mov    0x38(%rsp),%r8
  0x00007f757048ab02: mov    0x40(%rsp),%rdi
  0x00007f757048ab07: mov    0x48(%rsp),%rsi
  0x00007f757048ab0c: mov    0x50(%rsp),%rbp
  0x00007f757048ab11: mov    0x60(%rsp),%rbx
  0x00007f757048ab16: mov    0x68(%rsp),%rdx
  0x00007f757048ab1b: mov    0x70(%rsp),%rcx
  0x00007f757048ab20: mov    0x78(%rsp),%rax
  0x00007f757048ab25: add    $0x80,%rsp
  0x00007f757048ab2c: add    $0x8,%rsp
  0x00007f757048ab30: popfq  
  0x00007f757048ab31: mov    %r13,%rsp
  0x00007f757048ab34: pop    %rax
  0x00007f757048ab35: mov    %rsp,%r13
  0x00007f757048ab38: sub    $0x40,%rsp
  0x00007f757048ab3c: mov    %rax,(%rsp)
  0x00007f757048ab40: mov    %rsi,0x30(%rsp)
  0x00007f757048ab45: mov    %rdx,0x28(%rsp)
  0x00007f757048ab4a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ab54: mov    %rax,0x20(%rsp)
  0x00007f757048ab59: mov    %rcx,0x18(%rsp)
  0x00007f757048ab5e: mov    %r8d,0x10(%rsp)
  0x00007f757048ab63: mov    %r9d,0x8(%rsp)
  0x00007f757048ab68: mov    0x40(%rbx),%rcx
  0x00007f757048ab6c: jmpq   *%rcx

AHE@0x00007f75800c3410: 0xbbbebebe i2c: 0x00007f757048ac20 c2i: 0x00007f757048ad44 c2iUV: 0x00007f757048ad17
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJJ)Z (620 bytes generated)
c2i argument handler starts at 0x7f757048ad44
  0x00007f757048ac20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048ac24: movabs $0x7f757036e3e0,%r11
  0x00007f757048ac2e: cmp    %r11,%rax
  0x00007f757048ac31: jbe    0x00007f757048ac4a
  0x00007f757048ac37: movabs $0x7f757046e3e0,%r11
  0x00007f757048ac41: cmp    %r11,%rax
  0x00007f757048ac44: jb     0x00007f757048ace7
  0x00007f757048ac4a: movabs $0x7f7570369420,%r11
  0x00007f757048ac54: cmp    %r11,%rax
  0x00007f757048ac57: jbe    0x00007f757048ac70
  0x00007f757048ac5d: movabs $0x7f757036de58,%r11
  0x00007f757048ac67: cmp    %r11,%rax
  0x00007f757048ac6a: jb     0x00007f757048ace7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048ac70: mov    %rsp,-0x28(%rsp)
  0x00007f757048ac75: sub    $0x80,%rsp
  0x00007f757048ac7c: mov    %rax,0x78(%rsp)
  0x00007f757048ac81: mov    %rcx,0x70(%rsp)
  0x00007f757048ac86: mov    %rdx,0x68(%rsp)
  0x00007f757048ac8b: mov    %rbx,0x60(%rsp)
  0x00007f757048ac90: mov    %rbp,0x50(%rsp)
  0x00007f757048ac95: mov    %rsi,0x48(%rsp)
  0x00007f757048ac9a: mov    %rdi,0x40(%rsp)
  0x00007f757048ac9f: mov    %r8,0x38(%rsp)
  0x00007f757048aca4: mov    %r9,0x30(%rsp)
  0x00007f757048aca9: mov    %r10,0x28(%rsp)
  0x00007f757048acae: mov    %r11,0x20(%rsp)
  0x00007f757048acb3: mov    %r12,0x18(%rsp)
  0x00007f757048acb8: mov    %r13,0x10(%rsp)
  0x00007f757048acbd: mov    %r14,0x8(%rsp)
  0x00007f757048acc2: mov    %r15,(%rsp)
  0x00007f757048acc6: movabs $0x7f758592f470,%rdi
  0x00007f757048acd0: movabs $0x7f757048ac70,%rsi
  0x00007f757048acda: mov    %rsp,%rdx
  0x00007f757048acdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ace1: callq  0x00007f75853729fa
  0x00007f757048ace6: hlt    
  ;; } verify_i2ce 
  0x00007f757048ace7: mov    %rsp,%r11
  0x00007f757048acea: and    $0xfffffffffffffff0,%rsp
  0x00007f757048acee: push   %rax
  0x00007f757048acef: mov    %r11,%rax
  0x00007f757048acf2: mov    0x50(%rbx),%r11
  0x00007f757048acf6: mov    0x40(%rax),%rsi
  0x00007f757048acfa: mov    0x38(%rax),%rdx
  0x00007f757048acfe: mov    0x28(%rax),%rcx
  0x00007f757048ad02: mov    0x18(%rax),%r8
  0x00007f757048ad06: mov    0x8(%rax),%r9
  0x00007f757048ad0a: mov    %rbx,0x258(%r15)
  0x00007f757048ad11: mov    %rbx,%rax
  0x00007f757048ad14: jmpq   *%r11
  0x00007f757048ad17: mov    0x8(%rsi),%ebx
  0x00007f757048ad1a: shl    $0x3,%rbx
  0x00007f757048ad1e: cmp    0x10(%rax),%rbx
  0x00007f757048ad22: mov    0x8(%rax),%rbx
  0x00007f757048ad26: je     0x00007f757048ad31
  0x00007f757048ad2c: jmpq   0x00007f757046ec40
  0x00007f757048ad31: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ad39: je     0x00007f757048ae34
  0x00007f757048ad3f: jmpq   0x00007f757046ec40
  0x00007f757048ad44: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ad4c: je     0x00007f757048ae34
  0x00007f757048ad52: mov    %rsp,%r13
  0x00007f757048ad55: mov    (%rsp),%rax
  0x00007f757048ad59: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ad5d: pushfq 
  0x00007f757048ad5e: sub    $0x8,%rsp
  0x00007f757048ad62: mov    %rsp,-0x28(%rsp)
  0x00007f757048ad67: sub    $0x80,%rsp
  0x00007f757048ad6e: mov    %rax,0x78(%rsp)
  0x00007f757048ad73: mov    %rcx,0x70(%rsp)
  0x00007f757048ad78: mov    %rdx,0x68(%rsp)
  0x00007f757048ad7d: mov    %rbx,0x60(%rsp)
  0x00007f757048ad82: mov    %rbp,0x50(%rsp)
  0x00007f757048ad87: mov    %rsi,0x48(%rsp)
  0x00007f757048ad8c: mov    %rdi,0x40(%rsp)
  0x00007f757048ad91: mov    %r8,0x38(%rsp)
  0x00007f757048ad96: mov    %r9,0x30(%rsp)
  0x00007f757048ad9b: mov    %r10,0x28(%rsp)
  0x00007f757048ada0: mov    %r11,0x20(%rsp)
  0x00007f757048ada5: mov    %r12,0x18(%rsp)
  0x00007f757048adaa: mov    %r13,0x10(%rsp)
  0x00007f757048adaf: mov    %r14,0x8(%rsp)
  0x00007f757048adb4: mov    %r15,(%rsp)
  0x00007f757048adb8: sub    $0x200,%rsp
  0x00007f757048adbf: fxsave64 (%rsp)
  0x00007f757048adc4: mov    %rbx,%rdi
  0x00007f757048adc7: mov    %rax,%rsi
  0x00007f757048adca: callq  0x00007f7585522bca
  0x00007f757048adcf: fxrstor64 (%rsp)
  0x00007f757048add4: add    $0x200,%rsp
  0x00007f757048addb: mov    (%rsp),%r15
  0x00007f757048addf: mov    0x8(%rsp),%r14
  0x00007f757048ade4: mov    0x10(%rsp),%r13
  0x00007f757048ade9: mov    0x18(%rsp),%r12
  0x00007f757048adee: mov    0x20(%rsp),%r11
  0x00007f757048adf3: mov    0x28(%rsp),%r10
  0x00007f757048adf8: mov    0x30(%rsp),%r9
  0x00007f757048adfd: mov    0x38(%rsp),%r8
  0x00007f757048ae02: mov    0x40(%rsp),%rdi
  0x00007f757048ae07: mov    0x48(%rsp),%rsi
  0x00007f757048ae0c: mov    0x50(%rsp),%rbp
  0x00007f757048ae11: mov    0x60(%rsp),%rbx
  0x00007f757048ae16: mov    0x68(%rsp),%rdx
  0x00007f757048ae1b: mov    0x70(%rsp),%rcx
  0x00007f757048ae20: mov    0x78(%rsp),%rax
  0x00007f757048ae25: add    $0x80,%rsp
  0x00007f757048ae2c: add    $0x8,%rsp
  0x00007f757048ae30: popfq  
  0x00007f757048ae31: mov    %r13,%rsp
  0x00007f757048ae34: pop    %rax
  0x00007f757048ae35: mov    %rsp,%r13
  0x00007f757048ae38: sub    $0x50,%rsp
  0x00007f757048ae3c: mov    %rax,(%rsp)
  0x00007f757048ae40: mov    %rsi,0x40(%rsp)
  0x00007f757048ae45: mov    %rdx,0x38(%rsp)
  0x00007f757048ae4a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ae54: mov    %rax,0x30(%rsp)
  0x00007f757048ae59: mov    %rcx,0x28(%rsp)
  0x00007f757048ae5e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ae68: mov    %rax,0x20(%rsp)
  0x00007f757048ae6d: mov    %r8,0x18(%rsp)
  0x00007f757048ae72: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ae7c: mov    %rax,0x10(%rsp)
  0x00007f757048ae81: mov    %r9,0x8(%rsp)
  0x00007f757048ae86: mov    0x40(%rbx),%rcx
  0x00007f757048ae8a: jmpq   *%rcx

AHE@0x00007f75800d4650: 0xbbbebb00 i2c: 0x00007f757048af60 c2i: 0x00007f757048b084 c2iUV: 0x00007f757048b057
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z (590 bytes generated)
c2i argument handler starts at 0x7f757048b084
  0x00007f757048af60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048af64: movabs $0x7f757036e3e0,%r11
  0x00007f757048af6e: cmp    %r11,%rax
  0x00007f757048af71: jbe    0x00007f757048af8a
  0x00007f757048af77: movabs $0x7f757046e3e0,%r11
  0x00007f757048af81: cmp    %r11,%rax
  0x00007f757048af84: jb     0x00007f757048b027
  0x00007f757048af8a: movabs $0x7f7570369420,%r11
  0x00007f757048af94: cmp    %r11,%rax
  0x00007f757048af97: jbe    0x00007f757048afb0
  0x00007f757048af9d: movabs $0x7f757036de58,%r11
  0x00007f757048afa7: cmp    %r11,%rax
  0x00007f757048afaa: jb     0x00007f757048b027
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048afb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048afb5: sub    $0x80,%rsp
  0x00007f757048afbc: mov    %rax,0x78(%rsp)
  0x00007f757048afc1: mov    %rcx,0x70(%rsp)
  0x00007f757048afc6: mov    %rdx,0x68(%rsp)
  0x00007f757048afcb: mov    %rbx,0x60(%rsp)
  0x00007f757048afd0: mov    %rbp,0x50(%rsp)
  0x00007f757048afd5: mov    %rsi,0x48(%rsp)
  0x00007f757048afda: mov    %rdi,0x40(%rsp)
  0x00007f757048afdf: mov    %r8,0x38(%rsp)
  0x00007f757048afe4: mov    %r9,0x30(%rsp)
  0x00007f757048afe9: mov    %r10,0x28(%rsp)
  0x00007f757048afee: mov    %r11,0x20(%rsp)
  0x00007f757048aff3: mov    %r12,0x18(%rsp)
  0x00007f757048aff8: mov    %r13,0x10(%rsp)
  0x00007f757048affd: mov    %r14,0x8(%rsp)
  0x00007f757048b002: mov    %r15,(%rsp)
  0x00007f757048b006: movabs $0x7f758592f470,%rdi
  0x00007f757048b010: movabs $0x7f757048afb0,%rsi
  0x00007f757048b01a: mov    %rsp,%rdx
  0x00007f757048b01d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b021: callq  0x00007f75853729fa
  0x00007f757048b026: hlt    
  ;; } verify_i2ce 
  0x00007f757048b027: mov    %rsp,%r11
  0x00007f757048b02a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b02e: push   %rax
  0x00007f757048b02f: mov    %r11,%rax
  0x00007f757048b032: mov    0x50(%rbx),%r11
  0x00007f757048b036: mov    0x30(%rax),%rsi
  0x00007f757048b03a: mov    0x28(%rax),%rdx
  0x00007f757048b03e: mov    0x18(%rax),%rcx
  0x00007f757048b042: mov    0x10(%rax),%r8
  0x00007f757048b046: mov    0x8(%rax),%r9
  0x00007f757048b04a: mov    %rbx,0x258(%r15)
  0x00007f757048b051: mov    %rbx,%rax
  0x00007f757048b054: jmpq   *%r11
  0x00007f757048b057: mov    0x8(%rsi),%ebx
  0x00007f757048b05a: shl    $0x3,%rbx
  0x00007f757048b05e: cmp    0x10(%rax),%rbx
  0x00007f757048b062: mov    0x8(%rax),%rbx
  0x00007f757048b066: je     0x00007f757048b071
  0x00007f757048b06c: jmpq   0x00007f757046ec40
  0x00007f757048b071: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b079: je     0x00007f757048b174
  0x00007f757048b07f: jmpq   0x00007f757046ec40
  0x00007f757048b084: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b08c: je     0x00007f757048b174
  0x00007f757048b092: mov    %rsp,%r13
  0x00007f757048b095: mov    (%rsp),%rax
  0x00007f757048b099: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b09d: pushfq 
  0x00007f757048b09e: sub    $0x8,%rsp
  0x00007f757048b0a2: mov    %rsp,-0x28(%rsp)
  0x00007f757048b0a7: sub    $0x80,%rsp
  0x00007f757048b0ae: mov    %rax,0x78(%rsp)
  0x00007f757048b0b3: mov    %rcx,0x70(%rsp)
  0x00007f757048b0b8: mov    %rdx,0x68(%rsp)
  0x00007f757048b0bd: mov    %rbx,0x60(%rsp)
  0x00007f757048b0c2: mov    %rbp,0x50(%rsp)
  0x00007f757048b0c7: mov    %rsi,0x48(%rsp)
  0x00007f757048b0cc: mov    %rdi,0x40(%rsp)
  0x00007f757048b0d1: mov    %r8,0x38(%rsp)
  0x00007f757048b0d6: mov    %r9,0x30(%rsp)
  0x00007f757048b0db: mov    %r10,0x28(%rsp)
  0x00007f757048b0e0: mov    %r11,0x20(%rsp)
  0x00007f757048b0e5: mov    %r12,0x18(%rsp)
  0x00007f757048b0ea: mov    %r13,0x10(%rsp)
  0x00007f757048b0ef: mov    %r14,0x8(%rsp)
  0x00007f757048b0f4: mov    %r15,(%rsp)
  0x00007f757048b0f8: sub    $0x200,%rsp
  0x00007f757048b0ff: fxsave64 (%rsp)
  0x00007f757048b104: mov    %rbx,%rdi
  0x00007f757048b107: mov    %rax,%rsi
  0x00007f757048b10a: callq  0x00007f7585522bca
  0x00007f757048b10f: fxrstor64 (%rsp)
  0x00007f757048b114: add    $0x200,%rsp
  0x00007f757048b11b: mov    (%rsp),%r15
  0x00007f757048b11f: mov    0x8(%rsp),%r14
  0x00007f757048b124: mov    0x10(%rsp),%r13
  0x00007f757048b129: mov    0x18(%rsp),%r12
  0x00007f757048b12e: mov    0x20(%rsp),%r11
  0x00007f757048b133: mov    0x28(%rsp),%r10
  0x00007f757048b138: mov    0x30(%rsp),%r9
  0x00007f757048b13d: mov    0x38(%rsp),%r8
  0x00007f757048b142: mov    0x40(%rsp),%rdi
  0x00007f757048b147: mov    0x48(%rsp),%rsi
  0x00007f757048b14c: mov    0x50(%rsp),%rbp
  0x00007f757048b151: mov    0x60(%rsp),%rbx
  0x00007f757048b156: mov    0x68(%rsp),%rdx
  0x00007f757048b15b: mov    0x70(%rsp),%rcx
  0x00007f757048b160: mov    0x78(%rsp),%rax
  0x00007f757048b165: add    $0x80,%rsp
  0x00007f757048b16c: add    $0x8,%rsp
  0x00007f757048b170: popfq  
  0x00007f757048b171: mov    %r13,%rsp
  0x00007f757048b174: pop    %rax
  0x00007f757048b175: mov    %rsp,%r13
  0x00007f757048b178: sub    $0x40,%rsp
  0x00007f757048b17c: mov    %rax,(%rsp)
  0x00007f757048b180: mov    %rsi,0x30(%rsp)
  0x00007f757048b185: mov    %rdx,0x28(%rsp)
  0x00007f757048b18a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048b194: mov    %rax,0x20(%rsp)
  0x00007f757048b199: mov    %rcx,0x18(%rsp)
  0x00007f757048b19e: mov    %r8,0x10(%rsp)
  0x00007f757048b1a3: mov    %r9,0x8(%rsp)
  0x00007f757048b1a8: mov    0x40(%rbx),%rcx
  0x00007f757048b1ac: jmpq   *%rcx

AHE@0x00007f75800d4698: 0xbbebe000 i2c: 0x00007f757048b260 c2i: 0x00007f757048b37c c2iUV: 0x00007f757048b34f
i2c argument handler #0 for: receiver (JJ)V (587 bytes generated)
c2i argument handler starts at 0x7f757048b37c
  0x00007f757048b260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048b264: movabs $0x7f757036e3e0,%r11
  0x00007f757048b26e: cmp    %r11,%rax
  0x00007f757048b271: jbe    0x00007f757048b28a
  0x00007f757048b277: movabs $0x7f757046e3e0,%r11
  0x00007f757048b281: cmp    %r11,%rax
  0x00007f757048b284: jb     0x00007f757048b327
  0x00007f757048b28a: movabs $0x7f7570369420,%r11
  0x00007f757048b294: cmp    %r11,%rax
  0x00007f757048b297: jbe    0x00007f757048b2b0
  0x00007f757048b29d: movabs $0x7f757036de58,%r11
  0x00007f757048b2a7: cmp    %r11,%rax
  0x00007f757048b2aa: jb     0x00007f757048b327
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048b2b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048b2b5: sub    $0x80,%rsp
  0x00007f757048b2bc: mov    %rax,0x78(%rsp)
  0x00007f757048b2c1: mov    %rcx,0x70(%rsp)
  0x00007f757048b2c6: mov    %rdx,0x68(%rsp)
  0x00007f757048b2cb: mov    %rbx,0x60(%rsp)
  0x00007f757048b2d0: mov    %rbp,0x50(%rsp)
  0x00007f757048b2d5: mov    %rsi,0x48(%rsp)
  0x00007f757048b2da: mov    %rdi,0x40(%rsp)
  0x00007f757048b2df: mov    %r8,0x38(%rsp)
  0x00007f757048b2e4: mov    %r9,0x30(%rsp)
  0x00007f757048b2e9: mov    %r10,0x28(%rsp)
  0x00007f757048b2ee: mov    %r11,0x20(%rsp)
  0x00007f757048b2f3: mov    %r12,0x18(%rsp)
  0x00007f757048b2f8: mov    %r13,0x10(%rsp)
  0x00007f757048b2fd: mov    %r14,0x8(%rsp)
  0x00007f757048b302: mov    %r15,(%rsp)
  0x00007f757048b306: movabs $0x7f758592f470,%rdi
  0x00007f757048b310: movabs $0x7f757048b2b0,%rsi
  0x00007f757048b31a: mov    %rsp,%rdx
  0x00007f757048b31d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b321: callq  0x00007f75853729fa
  0x00007f757048b326: hlt    
  ;; } verify_i2ce 
  0x00007f757048b327: mov    %rsp,%r11
  0x00007f757048b32a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b32e: push   %rax
  0x00007f757048b32f: mov    %r11,%rax
  0x00007f757048b332: mov    0x50(%rbx),%r11
  0x00007f757048b336: mov    0x28(%rax),%rsi
  0x00007f757048b33a: mov    0x18(%rax),%rdx
  0x00007f757048b33e: mov    0x8(%rax),%rcx
  0x00007f757048b342: mov    %rbx,0x258(%r15)
  0x00007f757048b349: mov    %rbx,%rax
  0x00007f757048b34c: jmpq   *%r11
  0x00007f757048b34f: mov    0x8(%rsi),%ebx
  0x00007f757048b352: shl    $0x3,%rbx
  0x00007f757048b356: cmp    0x10(%rax),%rbx
  0x00007f757048b35a: mov    0x8(%rax),%rbx
  0x00007f757048b35e: je     0x00007f757048b369
  0x00007f757048b364: jmpq   0x00007f757046ec40
  0x00007f757048b369: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b371: je     0x00007f757048b46c
  0x00007f757048b377: jmpq   0x00007f757046ec40
  0x00007f757048b37c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b384: je     0x00007f757048b46c
  0x00007f757048b38a: mov    %rsp,%r13
  0x00007f757048b38d: mov    (%rsp),%rax
  0x00007f757048b391: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b395: pushfq 
  0x00007f757048b396: sub    $0x8,%rsp
  0x00007f757048b39a: mov    %rsp,-0x28(%rsp)
  0x00007f757048b39f: sub    $0x80,%rsp
  0x00007f757048b3a6: mov    %rax,0x78(%rsp)
  0x00007f757048b3ab: mov    %rcx,0x70(%rsp)
  0x00007f757048b3b0: mov    %rdx,0x68(%rsp)
  0x00007f757048b3b5: mov    %rbx,0x60(%rsp)
  0x00007f757048b3ba: mov    %rbp,0x50(%rsp)
  0x00007f757048b3bf: mov    %rsi,0x48(%rsp)
  0x00007f757048b3c4: mov    %rdi,0x40(%rsp)
  0x00007f757048b3c9: mov    %r8,0x38(%rsp)
  0x00007f757048b3ce: mov    %r9,0x30(%rsp)
  0x00007f757048b3d3: mov    %r10,0x28(%rsp)
  0x00007f757048b3d8: mov    %r11,0x20(%rsp)
  0x00007f757048b3dd: mov    %r12,0x18(%rsp)
  0x00007f757048b3e2: mov    %r13,0x10(%rsp)
  0x00007f757048b3e7: mov    %r14,0x8(%rsp)
  0x00007f757048b3ec: mov    %r15,(%rsp)
  0x00007f757048b3f0: sub    $0x200,%rsp
  0x00007f757048b3f7: fxsave64 (%rsp)
  0x00007f757048b3fc: mov    %rbx,%rdi
  0x00007f757048b3ff: mov    %rax,%rsi
  0x00007f757048b402: callq  0x00007f7585522bca
  0x00007f757048b407: fxrstor64 (%rsp)
  0x00007f757048b40c: add    $0x200,%rsp
  0x00007f757048b413: mov    (%rsp),%r15
  0x00007f757048b417: mov    0x8(%rsp),%r14
  0x00007f757048b41c: mov    0x10(%rsp),%r13
  0x00007f757048b421: mov    0x18(%rsp),%r12
  0x00007f757048b426: mov    0x20(%rsp),%r11
  0x00007f757048b42b: mov    0x28(%rsp),%r10
  0x00007f757048b430: mov    0x30(%rsp),%r9
  0x00007f757048b435: mov    0x38(%rsp),%r8
  0x00007f757048b43a: mov    0x40(%rsp),%rdi
  0x00007f757048b43f: mov    0x48(%rsp),%rsi
  0x00007f757048b444: mov    0x50(%rsp),%rbp
  0x00007f757048b449: mov    0x60(%rsp),%rbx
  0x00007f757048b44e: mov    0x68(%rsp),%rdx
  0x00007f757048b453: mov    0x70(%rsp),%rcx
  0x00007f757048b458: mov    0x78(%rsp),%rax
  0x00007f757048b45d: add    $0x80,%rsp
  0x00007f757048b464: add    $0x8,%rsp
  0x00007f757048b468: popfq  
  0x00007f757048b469: mov    %r13,%rsp
  0x00007f757048b46c: pop    %rax
  0x00007f757048b46d: mov    %rsp,%r13
  0x00007f757048b470: sub    $0x30,%rsp
  0x00007f757048b474: mov    %rax,(%rsp)
  0x00007f757048b478: mov    %rsi,0x28(%rsp)
  0x00007f757048b47d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048b487: mov    %rax,0x20(%rsp)
  0x00007f757048b48c: mov    %rdx,0x18(%rsp)
  0x00007f757048b491: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048b49b: mov    %rax,0x10(%rsp)
  0x00007f757048b4a0: mov    %rcx,0x8(%rsp)
  0x00007f757048b4a5: mov    0x40(%rbx),%rcx
  0x00007f757048b4a9: jmpq   *%rcx

AHE@0x00007f75800d46e0: 0xbbe00000 i2c: 0x00007f757048b560 c2i: 0x00007f757048b678 c2iUV: 0x00007f757048b64b
i2c argument handler #0 for: receiver (J)J (563 bytes generated)
c2i argument handler starts at 0x7f757048b678
  0x00007f757048b560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048b564: movabs $0x7f757036e3e0,%r11
  0x00007f757048b56e: cmp    %r11,%rax
  0x00007f757048b571: jbe    0x00007f757048b58a
  0x00007f757048b577: movabs $0x7f757046e3e0,%r11
  0x00007f757048b581: cmp    %r11,%rax
  0x00007f757048b584: jb     0x00007f757048b627
  0x00007f757048b58a: movabs $0x7f7570369420,%r11
  0x00007f757048b594: cmp    %r11,%rax
  0x00007f757048b597: jbe    0x00007f757048b5b0
  0x00007f757048b59d: movabs $0x7f757036de58,%r11
  0x00007f757048b5a7: cmp    %r11,%rax
  0x00007f757048b5aa: jb     0x00007f757048b627
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048b5b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048b5b5: sub    $0x80,%rsp
  0x00007f757048b5bc: mov    %rax,0x78(%rsp)
  0x00007f757048b5c1: mov    %rcx,0x70(%rsp)
  0x00007f757048b5c6: mov    %rdx,0x68(%rsp)
  0x00007f757048b5cb: mov    %rbx,0x60(%rsp)
  0x00007f757048b5d0: mov    %rbp,0x50(%rsp)
  0x00007f757048b5d5: mov    %rsi,0x48(%rsp)
  0x00007f757048b5da: mov    %rdi,0x40(%rsp)
  0x00007f757048b5df: mov    %r8,0x38(%rsp)
  0x00007f757048b5e4: mov    %r9,0x30(%rsp)
  0x00007f757048b5e9: mov    %r10,0x28(%rsp)
  0x00007f757048b5ee: mov    %r11,0x20(%rsp)
  0x00007f757048b5f3: mov    %r12,0x18(%rsp)
  0x00007f757048b5f8: mov    %r13,0x10(%rsp)
  0x00007f757048b5fd: mov    %r14,0x8(%rsp)
  0x00007f757048b602: mov    %r15,(%rsp)
  0x00007f757048b606: movabs $0x7f758592f470,%rdi
  0x00007f757048b610: movabs $0x7f757048b5b0,%rsi
  0x00007f757048b61a: mov    %rsp,%rdx
  0x00007f757048b61d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b621: callq  0x00007f75853729fa
  0x00007f757048b626: hlt    
  ;; } verify_i2ce 
  0x00007f757048b627: mov    %rsp,%r11
  0x00007f757048b62a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b62e: push   %rax
  0x00007f757048b62f: mov    %r11,%rax
  0x00007f757048b632: mov    0x50(%rbx),%r11
  0x00007f757048b636: mov    0x18(%rax),%rsi
  0x00007f757048b63a: mov    0x8(%rax),%rdx
  0x00007f757048b63e: mov    %rbx,0x258(%r15)
  0x00007f757048b645: mov    %rbx,%rax
  0x00007f757048b648: jmpq   *%r11
  0x00007f757048b64b: mov    0x8(%rsi),%ebx
  0x00007f757048b64e: shl    $0x3,%rbx
  0x00007f757048b652: cmp    0x10(%rax),%rbx
  0x00007f757048b656: mov    0x8(%rax),%rbx
  0x00007f757048b65a: je     0x00007f757048b665
  0x00007f757048b660: jmpq   0x00007f757046ec40
  0x00007f757048b665: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b66d: je     0x00007f757048b768
  0x00007f757048b673: jmpq   0x00007f757046ec40
  0x00007f757048b678: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b680: je     0x00007f757048b768
  0x00007f757048b686: mov    %rsp,%r13
  0x00007f757048b689: mov    (%rsp),%rax
  0x00007f757048b68d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b691: pushfq 
  0x00007f757048b692: sub    $0x8,%rsp
  0x00007f757048b696: mov    %rsp,-0x28(%rsp)
  0x00007f757048b69b: sub    $0x80,%rsp
  0x00007f757048b6a2: mov    %rax,0x78(%rsp)
  0x00007f757048b6a7: mov    %rcx,0x70(%rsp)
  0x00007f757048b6ac: mov    %rdx,0x68(%rsp)
  0x00007f757048b6b1: mov    %rbx,0x60(%rsp)
  0x00007f757048b6b6: mov    %rbp,0x50(%rsp)
  0x00007f757048b6bb: mov    %rsi,0x48(%rsp)
  0x00007f757048b6c0: mov    %rdi,0x40(%rsp)
  0x00007f757048b6c5: mov    %r8,0x38(%rsp)
  0x00007f757048b6ca: mov    %r9,0x30(%rsp)
  0x00007f757048b6cf: mov    %r10,0x28(%rsp)
  0x00007f757048b6d4: mov    %r11,0x20(%rsp)
  0x00007f757048b6d9: mov    %r12,0x18(%rsp)
  0x00007f757048b6de: mov    %r13,0x10(%rsp)
  0x00007f757048b6e3: mov    %r14,0x8(%rsp)
  0x00007f757048b6e8: mov    %r15,(%rsp)
  0x00007f757048b6ec: sub    $0x200,%rsp
  0x00007f757048b6f3: fxsave64 (%rsp)
  0x00007f757048b6f8: mov    %rbx,%rdi
  0x00007f757048b6fb: mov    %rax,%rsi
  0x00007f757048b6fe: callq  0x00007f7585522bca
  0x00007f757048b703: fxrstor64 (%rsp)
  0x00007f757048b708: add    $0x200,%rsp
  0x00007f757048b70f: mov    (%rsp),%r15
  0x00007f757048b713: mov    0x8(%rsp),%r14
  0x00007f757048b718: mov    0x10(%rsp),%r13
  0x00007f757048b71d: mov    0x18(%rsp),%r12
  0x00007f757048b722: mov    0x20(%rsp),%r11
  0x00007f757048b727: mov    0x28(%rsp),%r10
  0x00007f757048b72c: mov    0x30(%rsp),%r9
  0x00007f757048b731: mov    0x38(%rsp),%r8
  0x00007f757048b736: mov    0x40(%rsp),%rdi
  0x00007f757048b73b: mov    0x48(%rsp),%rsi
  0x00007f757048b740: mov    0x50(%rsp),%rbp
  0x00007f757048b745: mov    0x60(%rsp),%rbx
  0x00007f757048b74a: mov    0x68(%rsp),%rdx
  0x00007f757048b74f: mov    0x70(%rsp),%rcx
  0x00007f757048b754: mov    0x78(%rsp),%rax
  0x00007f757048b759: add    $0x80,%rsp
  0x00007f757048b760: add    $0x8,%rsp
  0x00007f757048b764: popfq  
  0x00007f757048b765: mov    %r13,%rsp
  0x00007f757048b768: pop    %rax
  0x00007f757048b769: mov    %rsp,%r13
  0x00007f757048b76c: sub    $0x20,%rsp
  0x00007f757048b770: mov    %rax,(%rsp)
  0x00007f757048b774: mov    %rsi,0x18(%rsp)
  0x00007f757048b779: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048b783: mov    %rax,0x10(%rsp)
  0x00007f757048b788: mov    %rdx,0x8(%rsp)
  0x00007f757048b78d: mov    0x40(%rbx),%rcx
  0x00007f757048b791: jmpq   *%rcx

AHE@0x00007f75800d4728: 0xbbbe7e00 i2c: 0x00007f757048b860 c2i: 0x00007f757048b981 c2iUV: 0x00007f757048b954
i2c argument handler #0 for: receiver (Ljava/lang/Object;JD)V (598 bytes generated)
c2i argument handler starts at 0x7f757048b981
  0x00007f757048b860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048b864: movabs $0x7f757036e3e0,%r11
  0x00007f757048b86e: cmp    %r11,%rax
  0x00007f757048b871: jbe    0x00007f757048b88a
  0x00007f757048b877: movabs $0x7f757046e3e0,%r11
  0x00007f757048b881: cmp    %r11,%rax
  0x00007f757048b884: jb     0x00007f757048b927
  0x00007f757048b88a: movabs $0x7f7570369420,%r11
  0x00007f757048b894: cmp    %r11,%rax
  0x00007f757048b897: jbe    0x00007f757048b8b0
  0x00007f757048b89d: movabs $0x7f757036de58,%r11
  0x00007f757048b8a7: cmp    %r11,%rax
  0x00007f757048b8aa: jb     0x00007f757048b927
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048b8b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048b8b5: sub    $0x80,%rsp
  0x00007f757048b8bc: mov    %rax,0x78(%rsp)
  0x00007f757048b8c1: mov    %rcx,0x70(%rsp)
  0x00007f757048b8c6: mov    %rdx,0x68(%rsp)
  0x00007f757048b8cb: mov    %rbx,0x60(%rsp)
  0x00007f757048b8d0: mov    %rbp,0x50(%rsp)
  0x00007f757048b8d5: mov    %rsi,0x48(%rsp)
  0x00007f757048b8da: mov    %rdi,0x40(%rsp)
  0x00007f757048b8df: mov    %r8,0x38(%rsp)
  0x00007f757048b8e4: mov    %r9,0x30(%rsp)
  0x00007f757048b8e9: mov    %r10,0x28(%rsp)
  0x00007f757048b8ee: mov    %r11,0x20(%rsp)
  0x00007f757048b8f3: mov    %r12,0x18(%rsp)
  0x00007f757048b8f8: mov    %r13,0x10(%rsp)
  0x00007f757048b8fd: mov    %r14,0x8(%rsp)
  0x00007f757048b902: mov    %r15,(%rsp)
  0x00007f757048b906: movabs $0x7f758592f470,%rdi
  0x00007f757048b910: movabs $0x7f757048b8b0,%rsi
  0x00007f757048b91a: mov    %rsp,%rdx
  0x00007f757048b91d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b921: callq  0x00007f75853729fa
  0x00007f757048b926: hlt    
  ;; } verify_i2ce 
  0x00007f757048b927: mov    %rsp,%r11
  0x00007f757048b92a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b92e: push   %rax
  0x00007f757048b92f: mov    %r11,%rax
  0x00007f757048b932: mov    0x50(%rbx),%r11
  0x00007f757048b936: mov    0x30(%rax),%rsi
  0x00007f757048b93a: mov    0x28(%rax),%rdx
  0x00007f757048b93e: mov    0x18(%rax),%rcx
  0x00007f757048b942: vmovsd 0x8(%rax),%xmm0
  0x00007f757048b947: mov    %rbx,0x258(%r15)
  0x00007f757048b94e: mov    %rbx,%rax
  0x00007f757048b951: jmpq   *%r11
  0x00007f757048b954: mov    0x8(%rsi),%ebx
  0x00007f757048b957: shl    $0x3,%rbx
  0x00007f757048b95b: cmp    0x10(%rax),%rbx
  0x00007f757048b95f: mov    0x8(%rax),%rbx
  0x00007f757048b963: je     0x00007f757048b96e
  0x00007f757048b969: jmpq   0x00007f757046ec40
  0x00007f757048b96e: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b976: je     0x00007f757048ba71
  0x00007f757048b97c: jmpq   0x00007f757046ec40
  0x00007f757048b981: cmpq   $0x0,0x58(%rbx)
  0x00007f757048b989: je     0x00007f757048ba71
  0x00007f757048b98f: mov    %rsp,%r13
  0x00007f757048b992: mov    (%rsp),%rax
  0x00007f757048b996: and    $0xfffffffffffffff0,%rsp
  0x00007f757048b99a: pushfq 
  0x00007f757048b99b: sub    $0x8,%rsp
  0x00007f757048b99f: mov    %rsp,-0x28(%rsp)
  0x00007f757048b9a4: sub    $0x80,%rsp
  0x00007f757048b9ab: mov    %rax,0x78(%rsp)
  0x00007f757048b9b0: mov    %rcx,0x70(%rsp)
  0x00007f757048b9b5: mov    %rdx,0x68(%rsp)
  0x00007f757048b9ba: mov    %rbx,0x60(%rsp)
  0x00007f757048b9bf: mov    %rbp,0x50(%rsp)
  0x00007f757048b9c4: mov    %rsi,0x48(%rsp)
  0x00007f757048b9c9: mov    %rdi,0x40(%rsp)
  0x00007f757048b9ce: mov    %r8,0x38(%rsp)
  0x00007f757048b9d3: mov    %r9,0x30(%rsp)
  0x00007f757048b9d8: mov    %r10,0x28(%rsp)
  0x00007f757048b9dd: mov    %r11,0x20(%rsp)
  0x00007f757048b9e2: mov    %r12,0x18(%rsp)
  0x00007f757048b9e7: mov    %r13,0x10(%rsp)
  0x00007f757048b9ec: mov    %r14,0x8(%rsp)
  0x00007f757048b9f1: mov    %r15,(%rsp)
  0x00007f757048b9f5: sub    $0x200,%rsp
  0x00007f757048b9fc: fxsave64 (%rsp)
  0x00007f757048ba01: mov    %rbx,%rdi
  0x00007f757048ba04: mov    %rax,%rsi
  0x00007f757048ba07: callq  0x00007f7585522bca
  0x00007f757048ba0c: fxrstor64 (%rsp)
  0x00007f757048ba11: add    $0x200,%rsp
  0x00007f757048ba18: mov    (%rsp),%r15
  0x00007f757048ba1c: mov    0x8(%rsp),%r14
  0x00007f757048ba21: mov    0x10(%rsp),%r13
  0x00007f757048ba26: mov    0x18(%rsp),%r12
  0x00007f757048ba2b: mov    0x20(%rsp),%r11
  0x00007f757048ba30: mov    0x28(%rsp),%r10
  0x00007f757048ba35: mov    0x30(%rsp),%r9
  0x00007f757048ba3a: mov    0x38(%rsp),%r8
  0x00007f757048ba3f: mov    0x40(%rsp),%rdi
  0x00007f757048ba44: mov    0x48(%rsp),%rsi
  0x00007f757048ba49: mov    0x50(%rsp),%rbp
  0x00007f757048ba4e: mov    0x60(%rsp),%rbx
  0x00007f757048ba53: mov    0x68(%rsp),%rdx
  0x00007f757048ba58: mov    0x70(%rsp),%rcx
  0x00007f757048ba5d: mov    0x78(%rsp),%rax
  0x00007f757048ba62: add    $0x80,%rsp
  0x00007f757048ba69: add    $0x8,%rsp
  0x00007f757048ba6d: popfq  
  0x00007f757048ba6e: mov    %r13,%rsp
  0x00007f757048ba71: pop    %rax
  0x00007f757048ba72: mov    %rsp,%r13
  0x00007f757048ba75: sub    $0x40,%rsp
  0x00007f757048ba79: mov    %rax,(%rsp)
  0x00007f757048ba7d: mov    %rsi,0x30(%rsp)
  0x00007f757048ba82: mov    %rdx,0x28(%rsp)
  0x00007f757048ba87: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ba91: mov    %rax,0x20(%rsp)
  0x00007f757048ba96: mov    %rcx,0x18(%rsp)
  0x00007f757048ba9b: movabs $0xdeadffffdeadaaac,%rax
  0x00007f757048baa5: mov    %rax,0x10(%rsp)
  0x00007f757048baaa: vmovsd %xmm0,0x8(%rsp)
  0x00007f757048bab0: mov    0x40(%rbx),%rcx
  0x00007f757048bab4: jmpq   *%rcx

AHE@0x00007f75800d4770: 0xbbbe0000 i2c: 0x00007f757048bb60 c2i: 0x00007f757048bc7c c2iUV: 0x00007f757048bc4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)D (572 bytes generated)
c2i argument handler starts at 0x7f757048bc7c
  0x00007f757048bb60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048bb64: movabs $0x7f757036e3e0,%r11
  0x00007f757048bb6e: cmp    %r11,%rax
  0x00007f757048bb71: jbe    0x00007f757048bb8a
  0x00007f757048bb77: movabs $0x7f757046e3e0,%r11
  0x00007f757048bb81: cmp    %r11,%rax
  0x00007f757048bb84: jb     0x00007f757048bc27
  0x00007f757048bb8a: movabs $0x7f7570369420,%r11
  0x00007f757048bb94: cmp    %r11,%rax
  0x00007f757048bb97: jbe    0x00007f757048bbb0
  0x00007f757048bb9d: movabs $0x7f757036de58,%r11
  0x00007f757048bba7: cmp    %r11,%rax
  0x00007f757048bbaa: jb     0x00007f757048bc27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048bbb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048bbb5: sub    $0x80,%rsp
  0x00007f757048bbbc: mov    %rax,0x78(%rsp)
  0x00007f757048bbc1: mov    %rcx,0x70(%rsp)
  0x00007f757048bbc6: mov    %rdx,0x68(%rsp)
  0x00007f757048bbcb: mov    %rbx,0x60(%rsp)
  0x00007f757048bbd0: mov    %rbp,0x50(%rsp)
  0x00007f757048bbd5: mov    %rsi,0x48(%rsp)
  0x00007f757048bbda: mov    %rdi,0x40(%rsp)
  0x00007f757048bbdf: mov    %r8,0x38(%rsp)
  0x00007f757048bbe4: mov    %r9,0x30(%rsp)
  0x00007f757048bbe9: mov    %r10,0x28(%rsp)
  0x00007f757048bbee: mov    %r11,0x20(%rsp)
  0x00007f757048bbf3: mov    %r12,0x18(%rsp)
  0x00007f757048bbf8: mov    %r13,0x10(%rsp)
  0x00007f757048bbfd: mov    %r14,0x8(%rsp)
  0x00007f757048bc02: mov    %r15,(%rsp)
  0x00007f757048bc06: movabs $0x7f758592f470,%rdi
  0x00007f757048bc10: movabs $0x7f757048bbb0,%rsi
  0x00007f757048bc1a: mov    %rsp,%rdx
  0x00007f757048bc1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048bc21: callq  0x00007f75853729fa
  0x00007f757048bc26: hlt    
  ;; } verify_i2ce 
  0x00007f757048bc27: mov    %rsp,%r11
  0x00007f757048bc2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048bc2e: push   %rax
  0x00007f757048bc2f: mov    %r11,%rax
  0x00007f757048bc32: mov    0x50(%rbx),%r11
  0x00007f757048bc36: mov    0x20(%rax),%rsi
  0x00007f757048bc3a: mov    0x18(%rax),%rdx
  0x00007f757048bc3e: mov    0x8(%rax),%rcx
  0x00007f757048bc42: mov    %rbx,0x258(%r15)
  0x00007f757048bc49: mov    %rbx,%rax
  0x00007f757048bc4c: jmpq   *%r11
  0x00007f757048bc4f: mov    0x8(%rsi),%ebx
  0x00007f757048bc52: shl    $0x3,%rbx
  0x00007f757048bc56: cmp    0x10(%rax),%rbx
  0x00007f757048bc5a: mov    0x8(%rax),%rbx
  0x00007f757048bc5e: je     0x00007f757048bc69
  0x00007f757048bc64: jmpq   0x00007f757046ec40
  0x00007f757048bc69: cmpq   $0x0,0x58(%rbx)
  0x00007f757048bc71: je     0x00007f757048bd6c
  0x00007f757048bc77: jmpq   0x00007f757046ec40
  0x00007f757048bc7c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048bc84: je     0x00007f757048bd6c
  0x00007f757048bc8a: mov    %rsp,%r13
  0x00007f757048bc8d: mov    (%rsp),%rax
  0x00007f757048bc91: and    $0xfffffffffffffff0,%rsp
  0x00007f757048bc95: pushfq 
  0x00007f757048bc96: sub    $0x8,%rsp
  0x00007f757048bc9a: mov    %rsp,-0x28(%rsp)
  0x00007f757048bc9f: sub    $0x80,%rsp
  0x00007f757048bca6: mov    %rax,0x78(%rsp)
  0x00007f757048bcab: mov    %rcx,0x70(%rsp)
  0x00007f757048bcb0: mov    %rdx,0x68(%rsp)
  0x00007f757048bcb5: mov    %rbx,0x60(%rsp)
  0x00007f757048bcba: mov    %rbp,0x50(%rsp)
  0x00007f757048bcbf: mov    %rsi,0x48(%rsp)
  0x00007f757048bcc4: mov    %rdi,0x40(%rsp)
  0x00007f757048bcc9: mov    %r8,0x38(%rsp)
  0x00007f757048bcce: mov    %r9,0x30(%rsp)
  0x00007f757048bcd3: mov    %r10,0x28(%rsp)
  0x00007f757048bcd8: mov    %r11,0x20(%rsp)
  0x00007f757048bcdd: mov    %r12,0x18(%rsp)
  0x00007f757048bce2: mov    %r13,0x10(%rsp)
  0x00007f757048bce7: mov    %r14,0x8(%rsp)
  0x00007f757048bcec: mov    %r15,(%rsp)
  0x00007f757048bcf0: sub    $0x200,%rsp
  0x00007f757048bcf7: fxsave64 (%rsp)
  0x00007f757048bcfc: mov    %rbx,%rdi
  0x00007f757048bcff: mov    %rax,%rsi
  0x00007f757048bd02: callq  0x00007f7585522bca
  0x00007f757048bd07: fxrstor64 (%rsp)
  0x00007f757048bd0c: add    $0x200,%rsp
  0x00007f757048bd13: mov    (%rsp),%r15
  0x00007f757048bd17: mov    0x8(%rsp),%r14
  0x00007f757048bd1c: mov    0x10(%rsp),%r13
  0x00007f757048bd21: mov    0x18(%rsp),%r12
  0x00007f757048bd26: mov    0x20(%rsp),%r11
  0x00007f757048bd2b: mov    0x28(%rsp),%r10
  0x00007f757048bd30: mov    0x30(%rsp),%r9
  0x00007f757048bd35: mov    0x38(%rsp),%r8
  0x00007f757048bd3a: mov    0x40(%rsp),%rdi
  0x00007f757048bd3f: mov    0x48(%rsp),%rsi
  0x00007f757048bd44: mov    0x50(%rsp),%rbp
  0x00007f757048bd49: mov    0x60(%rsp),%rbx
  0x00007f757048bd4e: mov    0x68(%rsp),%rdx
  0x00007f757048bd53: mov    0x70(%rsp),%rcx
  0x00007f757048bd58: mov    0x78(%rsp),%rax
  0x00007f757048bd5d: add    $0x80,%rsp
  0x00007f757048bd64: add    $0x8,%rsp
  0x00007f757048bd68: popfq  
  0x00007f757048bd69: mov    %r13,%rsp
  0x00007f757048bd6c: pop    %rax
  0x00007f757048bd6d: mov    %rsp,%r13
  0x00007f757048bd70: sub    $0x30,%rsp
  0x00007f757048bd74: mov    %rax,(%rsp)
  0x00007f757048bd78: mov    %rsi,0x20(%rsp)
  0x00007f757048bd7d: mov    %rdx,0x18(%rsp)
  0x00007f757048bd82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048bd8c: mov    %rax,0x10(%rsp)
  0x00007f757048bd91: mov    %rcx,0x8(%rsp)
  0x00007f757048bd96: mov    0x40(%rbx),%rcx
  0x00007f757048bd9a: jmpq   *%rcx

AHE@0x00007f75800d47b8: 0xbbbe6000 i2c: 0x00007f757048be60 c2i: 0x00007f757048bf81 c2iUV: 0x00007f757048bf54
i2c argument handler #0 for: receiver (Ljava/lang/Object;JF)V (583 bytes generated)
c2i argument handler starts at 0x7f757048bf81
  0x00007f757048be60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048be64: movabs $0x7f757036e3e0,%r11
  0x00007f757048be6e: cmp    %r11,%rax
  0x00007f757048be71: jbe    0x00007f757048be8a
  0x00007f757048be77: movabs $0x7f757046e3e0,%r11
  0x00007f757048be81: cmp    %r11,%rax
  0x00007f757048be84: jb     0x00007f757048bf27
  0x00007f757048be8a: movabs $0x7f7570369420,%r11
  0x00007f757048be94: cmp    %r11,%rax
  0x00007f757048be97: jbe    0x00007f757048beb0
  0x00007f757048be9d: movabs $0x7f757036de58,%r11
  0x00007f757048bea7: cmp    %r11,%rax
  0x00007f757048beaa: jb     0x00007f757048bf27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048beb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048beb5: sub    $0x80,%rsp
  0x00007f757048bebc: mov    %rax,0x78(%rsp)
  0x00007f757048bec1: mov    %rcx,0x70(%rsp)
  0x00007f757048bec6: mov    %rdx,0x68(%rsp)
  0x00007f757048becb: mov    %rbx,0x60(%rsp)
  0x00007f757048bed0: mov    %rbp,0x50(%rsp)
  0x00007f757048bed5: mov    %rsi,0x48(%rsp)
  0x00007f757048beda: mov    %rdi,0x40(%rsp)
  0x00007f757048bedf: mov    %r8,0x38(%rsp)
  0x00007f757048bee4: mov    %r9,0x30(%rsp)
  0x00007f757048bee9: mov    %r10,0x28(%rsp)
  0x00007f757048beee: mov    %r11,0x20(%rsp)
  0x00007f757048bef3: mov    %r12,0x18(%rsp)
  0x00007f757048bef8: mov    %r13,0x10(%rsp)
  0x00007f757048befd: mov    %r14,0x8(%rsp)
  0x00007f757048bf02: mov    %r15,(%rsp)
  0x00007f757048bf06: movabs $0x7f758592f470,%rdi
  0x00007f757048bf10: movabs $0x7f757048beb0,%rsi
  0x00007f757048bf1a: mov    %rsp,%rdx
  0x00007f757048bf1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048bf21: callq  0x00007f75853729fa
  0x00007f757048bf26: hlt    
  ;; } verify_i2ce 
  0x00007f757048bf27: mov    %rsp,%r11
  0x00007f757048bf2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048bf2e: push   %rax
  0x00007f757048bf2f: mov    %r11,%rax
  0x00007f757048bf32: mov    0x50(%rbx),%r11
  0x00007f757048bf36: mov    0x28(%rax),%rsi
  0x00007f757048bf3a: mov    0x20(%rax),%rdx
  0x00007f757048bf3e: mov    0x10(%rax),%rcx
  0x00007f757048bf42: vmovss 0x8(%rax),%xmm0
  0x00007f757048bf47: mov    %rbx,0x258(%r15)
  0x00007f757048bf4e: mov    %rbx,%rax
  0x00007f757048bf51: jmpq   *%r11
  0x00007f757048bf54: mov    0x8(%rsi),%ebx
  0x00007f757048bf57: shl    $0x3,%rbx
  0x00007f757048bf5b: cmp    0x10(%rax),%rbx
  0x00007f757048bf5f: mov    0x8(%rax),%rbx
  0x00007f757048bf63: je     0x00007f757048bf6e
  0x00007f757048bf69: jmpq   0x00007f757046ec40
  0x00007f757048bf6e: cmpq   $0x0,0x58(%rbx)
  0x00007f757048bf76: je     0x00007f757048c071
  0x00007f757048bf7c: jmpq   0x00007f757046ec40
  0x00007f757048bf81: cmpq   $0x0,0x58(%rbx)
  0x00007f757048bf89: je     0x00007f757048c071
  0x00007f757048bf8f: mov    %rsp,%r13
  0x00007f757048bf92: mov    (%rsp),%rax
  0x00007f757048bf96: and    $0xfffffffffffffff0,%rsp
  0x00007f757048bf9a: pushfq 
  0x00007f757048bf9b: sub    $0x8,%rsp
  0x00007f757048bf9f: mov    %rsp,-0x28(%rsp)
  0x00007f757048bfa4: sub    $0x80,%rsp
  0x00007f757048bfab: mov    %rax,0x78(%rsp)
  0x00007f757048bfb0: mov    %rcx,0x70(%rsp)
  0x00007f757048bfb5: mov    %rdx,0x68(%rsp)
  0x00007f757048bfba: mov    %rbx,0x60(%rsp)
  0x00007f757048bfbf: mov    %rbp,0x50(%rsp)
  0x00007f757048bfc4: mov    %rsi,0x48(%rsp)
  0x00007f757048bfc9: mov    %rdi,0x40(%rsp)
  0x00007f757048bfce: mov    %r8,0x38(%rsp)
  0x00007f757048bfd3: mov    %r9,0x30(%rsp)
  0x00007f757048bfd8: mov    %r10,0x28(%rsp)
  0x00007f757048bfdd: mov    %r11,0x20(%rsp)
  0x00007f757048bfe2: mov    %r12,0x18(%rsp)
  0x00007f757048bfe7: mov    %r13,0x10(%rsp)
  0x00007f757048bfec: mov    %r14,0x8(%rsp)
  0x00007f757048bff1: mov    %r15,(%rsp)
  0x00007f757048bff5: sub    $0x200,%rsp
  0x00007f757048bffc: fxsave64 (%rsp)
  0x00007f757048c001: mov    %rbx,%rdi
  0x00007f757048c004: mov    %rax,%rsi
  0x00007f757048c007: callq  0x00007f7585522bca
  0x00007f757048c00c: fxrstor64 (%rsp)
  0x00007f757048c011: add    $0x200,%rsp
  0x00007f757048c018: mov    (%rsp),%r15
  0x00007f757048c01c: mov    0x8(%rsp),%r14
  0x00007f757048c021: mov    0x10(%rsp),%r13
  0x00007f757048c026: mov    0x18(%rsp),%r12
  0x00007f757048c02b: mov    0x20(%rsp),%r11
  0x00007f757048c030: mov    0x28(%rsp),%r10
  0x00007f757048c035: mov    0x30(%rsp),%r9
  0x00007f757048c03a: mov    0x38(%rsp),%r8
  0x00007f757048c03f: mov    0x40(%rsp),%rdi
  0x00007f757048c044: mov    0x48(%rsp),%rsi
  0x00007f757048c049: mov    0x50(%rsp),%rbp
  0x00007f757048c04e: mov    0x60(%rsp),%rbx
  0x00007f757048c053: mov    0x68(%rsp),%rdx
  0x00007f757048c058: mov    0x70(%rsp),%rcx
  0x00007f757048c05d: mov    0x78(%rsp),%rax
  0x00007f757048c062: add    $0x80,%rsp
  0x00007f757048c069: add    $0x8,%rsp
  0x00007f757048c06d: popfq  
  0x00007f757048c06e: mov    %r13,%rsp
  0x00007f757048c071: pop    %rax
  0x00007f757048c072: mov    %rsp,%r13
  0x00007f757048c075: sub    $0x30,%rsp
  0x00007f757048c079: mov    %rax,(%rsp)
  0x00007f757048c07d: mov    %rsi,0x28(%rsp)
  0x00007f757048c082: mov    %rdx,0x20(%rsp)
  0x00007f757048c087: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048c091: mov    %rax,0x18(%rsp)
  0x00007f757048c096: mov    %rcx,0x10(%rsp)
  0x00007f757048c09b: vmovss %xmm0,0x8(%rsp)
  0x00007f757048c0a1: mov    0x40(%rbx),%rcx
  0x00007f757048c0a5: jmpq   *%rcx

AHE@0x00007f75800d4800: 0xbbbe0000 i2c: 0x00007f757048c160 c2i: 0x00007f757048c27c c2iUV: 0x00007f757048c24f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)F (572 bytes generated)
c2i argument handler starts at 0x7f757048c27c
  0x00007f757048c160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048c164: movabs $0x7f757036e3e0,%r11
  0x00007f757048c16e: cmp    %r11,%rax
  0x00007f757048c171: jbe    0x00007f757048c18a
  0x00007f757048c177: movabs $0x7f757046e3e0,%r11
  0x00007f757048c181: cmp    %r11,%rax
  0x00007f757048c184: jb     0x00007f757048c227
  0x00007f757048c18a: movabs $0x7f7570369420,%r11
  0x00007f757048c194: cmp    %r11,%rax
  0x00007f757048c197: jbe    0x00007f757048c1b0
  0x00007f757048c19d: movabs $0x7f757036de58,%r11
  0x00007f757048c1a7: cmp    %r11,%rax
  0x00007f757048c1aa: jb     0x00007f757048c227
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048c1b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048c1b5: sub    $0x80,%rsp
  0x00007f757048c1bc: mov    %rax,0x78(%rsp)
  0x00007f757048c1c1: mov    %rcx,0x70(%rsp)
  0x00007f757048c1c6: mov    %rdx,0x68(%rsp)
  0x00007f757048c1cb: mov    %rbx,0x60(%rsp)
  0x00007f757048c1d0: mov    %rbp,0x50(%rsp)
  0x00007f757048c1d5: mov    %rsi,0x48(%rsp)
  0x00007f757048c1da: mov    %rdi,0x40(%rsp)
  0x00007f757048c1df: mov    %r8,0x38(%rsp)
  0x00007f757048c1e4: mov    %r9,0x30(%rsp)
  0x00007f757048c1e9: mov    %r10,0x28(%rsp)
  0x00007f757048c1ee: mov    %r11,0x20(%rsp)
  0x00007f757048c1f3: mov    %r12,0x18(%rsp)
  0x00007f757048c1f8: mov    %r13,0x10(%rsp)
  0x00007f757048c1fd: mov    %r14,0x8(%rsp)
  0x00007f757048c202: mov    %r15,(%rsp)
  0x00007f757048c206: movabs $0x7f758592f470,%rdi
  0x00007f757048c210: movabs $0x7f757048c1b0,%rsi
  0x00007f757048c21a: mov    %rsp,%rdx
  0x00007f757048c21d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c221: callq  0x00007f75853729fa
  0x00007f757048c226: hlt    
  ;; } verify_i2ce 
  0x00007f757048c227: mov    %rsp,%r11
  0x00007f757048c22a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c22e: push   %rax
  0x00007f757048c22f: mov    %r11,%rax
  0x00007f757048c232: mov    0x50(%rbx),%r11
  0x00007f757048c236: mov    0x20(%rax),%rsi
  0x00007f757048c23a: mov    0x18(%rax),%rdx
  0x00007f757048c23e: mov    0x8(%rax),%rcx
  0x00007f757048c242: mov    %rbx,0x258(%r15)
  0x00007f757048c249: mov    %rbx,%rax
  0x00007f757048c24c: jmpq   *%r11
  0x00007f757048c24f: mov    0x8(%rsi),%ebx
  0x00007f757048c252: shl    $0x3,%rbx
  0x00007f757048c256: cmp    0x10(%rax),%rbx
  0x00007f757048c25a: mov    0x8(%rax),%rbx
  0x00007f757048c25e: je     0x00007f757048c269
  0x00007f757048c264: jmpq   0x00007f757046ec40
  0x00007f757048c269: cmpq   $0x0,0x58(%rbx)
  0x00007f757048c271: je     0x00007f757048c36c
  0x00007f757048c277: jmpq   0x00007f757046ec40
  0x00007f757048c27c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048c284: je     0x00007f757048c36c
  0x00007f757048c28a: mov    %rsp,%r13
  0x00007f757048c28d: mov    (%rsp),%rax
  0x00007f757048c291: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c295: pushfq 
  0x00007f757048c296: sub    $0x8,%rsp
  0x00007f757048c29a: mov    %rsp,-0x28(%rsp)
  0x00007f757048c29f: sub    $0x80,%rsp
  0x00007f757048c2a6: mov    %rax,0x78(%rsp)
  0x00007f757048c2ab: mov    %rcx,0x70(%rsp)
  0x00007f757048c2b0: mov    %rdx,0x68(%rsp)
  0x00007f757048c2b5: mov    %rbx,0x60(%rsp)
  0x00007f757048c2ba: mov    %rbp,0x50(%rsp)
  0x00007f757048c2bf: mov    %rsi,0x48(%rsp)
  0x00007f757048c2c4: mov    %rdi,0x40(%rsp)
  0x00007f757048c2c9: mov    %r8,0x38(%rsp)
  0x00007f757048c2ce: mov    %r9,0x30(%rsp)
  0x00007f757048c2d3: mov    %r10,0x28(%rsp)
  0x00007f757048c2d8: mov    %r11,0x20(%rsp)
  0x00007f757048c2dd: mov    %r12,0x18(%rsp)
  0x00007f757048c2e2: mov    %r13,0x10(%rsp)
  0x00007f757048c2e7: mov    %r14,0x8(%rsp)
  0x00007f757048c2ec: mov    %r15,(%rsp)
  0x00007f757048c2f0: sub    $0x200,%rsp
  0x00007f757048c2f7: fxsave64 (%rsp)
  0x00007f757048c2fc: mov    %rbx,%rdi
  0x00007f757048c2ff: mov    %rax,%rsi
  0x00007f757048c302: callq  0x00007f7585522bca
  0x00007f757048c307: fxrstor64 (%rsp)
  0x00007f757048c30c: add    $0x200,%rsp
  0x00007f757048c313: mov    (%rsp),%r15
  0x00007f757048c317: mov    0x8(%rsp),%r14
  0x00007f757048c31c: mov    0x10(%rsp),%r13
  0x00007f757048c321: mov    0x18(%rsp),%r12
  0x00007f757048c326: mov    0x20(%rsp),%r11
  0x00007f757048c32b: mov    0x28(%rsp),%r10
  0x00007f757048c330: mov    0x30(%rsp),%r9
  0x00007f757048c335: mov    0x38(%rsp),%r8
  0x00007f757048c33a: mov    0x40(%rsp),%rdi
  0x00007f757048c33f: mov    0x48(%rsp),%rsi
  0x00007f757048c344: mov    0x50(%rsp),%rbp
  0x00007f757048c349: mov    0x60(%rsp),%rbx
  0x00007f757048c34e: mov    0x68(%rsp),%rdx
  0x00007f757048c353: mov    0x70(%rsp),%rcx
  0x00007f757048c358: mov    0x78(%rsp),%rax
  0x00007f757048c35d: add    $0x80,%rsp
  0x00007f757048c364: add    $0x8,%rsp
  0x00007f757048c368: popfq  
  0x00007f757048c369: mov    %r13,%rsp
  0x00007f757048c36c: pop    %rax
  0x00007f757048c36d: mov    %rsp,%r13
  0x00007f757048c370: sub    $0x30,%rsp
  0x00007f757048c374: mov    %rax,(%rsp)
  0x00007f757048c378: mov    %rsi,0x20(%rsp)
  0x00007f757048c37d: mov    %rdx,0x18(%rsp)
  0x00007f757048c382: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048c38c: mov    %rax,0x10(%rsp)
  0x00007f757048c391: mov    %rcx,0x8(%rsp)
  0x00007f757048c396: mov    0x40(%rbx),%rcx
  0x00007f757048c39a: jmpq   *%rcx

AHE@0x00007f75800d4848: 0xbbbebe00 i2c: 0x00007f757048c460 c2i: 0x00007f757048c580 c2iUV: 0x00007f757048c553
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (596 bytes generated)
c2i argument handler starts at 0x7f757048c580
  0x00007f757048c460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048c464: movabs $0x7f757036e3e0,%r11
  0x00007f757048c46e: cmp    %r11,%rax
  0x00007f757048c471: jbe    0x00007f757048c48a
  0x00007f757048c477: movabs $0x7f757046e3e0,%r11
  0x00007f757048c481: cmp    %r11,%rax
  0x00007f757048c484: jb     0x00007f757048c527
  0x00007f757048c48a: movabs $0x7f7570369420,%r11
  0x00007f757048c494: cmp    %r11,%rax
  0x00007f757048c497: jbe    0x00007f757048c4b0
  0x00007f757048c49d: movabs $0x7f757036de58,%r11
  0x00007f757048c4a7: cmp    %r11,%rax
  0x00007f757048c4aa: jb     0x00007f757048c527
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048c4b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048c4b5: sub    $0x80,%rsp
  0x00007f757048c4bc: mov    %rax,0x78(%rsp)
  0x00007f757048c4c1: mov    %rcx,0x70(%rsp)
  0x00007f757048c4c6: mov    %rdx,0x68(%rsp)
  0x00007f757048c4cb: mov    %rbx,0x60(%rsp)
  0x00007f757048c4d0: mov    %rbp,0x50(%rsp)
  0x00007f757048c4d5: mov    %rsi,0x48(%rsp)
  0x00007f757048c4da: mov    %rdi,0x40(%rsp)
  0x00007f757048c4df: mov    %r8,0x38(%rsp)
  0x00007f757048c4e4: mov    %r9,0x30(%rsp)
  0x00007f757048c4e9: mov    %r10,0x28(%rsp)
  0x00007f757048c4ee: mov    %r11,0x20(%rsp)
  0x00007f757048c4f3: mov    %r12,0x18(%rsp)
  0x00007f757048c4f8: mov    %r13,0x10(%rsp)
  0x00007f757048c4fd: mov    %r14,0x8(%rsp)
  0x00007f757048c502: mov    %r15,(%rsp)
  0x00007f757048c506: movabs $0x7f758592f470,%rdi
  0x00007f757048c510: movabs $0x7f757048c4b0,%rsi
  0x00007f757048c51a: mov    %rsp,%rdx
  0x00007f757048c51d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c521: callq  0x00007f75853729fa
  0x00007f757048c526: hlt    
  ;; } verify_i2ce 
  0x00007f757048c527: mov    %rsp,%r11
  0x00007f757048c52a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c52e: push   %rax
  0x00007f757048c52f: mov    %r11,%rax
  0x00007f757048c532: mov    0x50(%rbx),%r11
  0x00007f757048c536: mov    0x30(%rax),%rsi
  0x00007f757048c53a: mov    0x28(%rax),%rdx
  0x00007f757048c53e: mov    0x18(%rax),%rcx
  0x00007f757048c542: mov    0x8(%rax),%r8
  0x00007f757048c546: mov    %rbx,0x258(%r15)
  0x00007f757048c54d: mov    %rbx,%rax
  0x00007f757048c550: jmpq   *%r11
  0x00007f757048c553: mov    0x8(%rsi),%ebx
  0x00007f757048c556: shl    $0x3,%rbx
  0x00007f757048c55a: cmp    0x10(%rax),%rbx
  0x00007f757048c55e: mov    0x8(%rax),%rbx
  0x00007f757048c562: je     0x00007f757048c56d
  0x00007f757048c568: jmpq   0x00007f757046ec40
  0x00007f757048c56d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048c575: je     0x00007f757048c670
  0x00007f757048c57b: jmpq   0x00007f757046ec40
  0x00007f757048c580: cmpq   $0x0,0x58(%rbx)
  0x00007f757048c588: je     0x00007f757048c670
  0x00007f757048c58e: mov    %rsp,%r13
  0x00007f757048c591: mov    (%rsp),%rax
  0x00007f757048c595: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c599: pushfq 
  0x00007f757048c59a: sub    $0x8,%rsp
  0x00007f757048c59e: mov    %rsp,-0x28(%rsp)
  0x00007f757048c5a3: sub    $0x80,%rsp
  0x00007f757048c5aa: mov    %rax,0x78(%rsp)
  0x00007f757048c5af: mov    %rcx,0x70(%rsp)
  0x00007f757048c5b4: mov    %rdx,0x68(%rsp)
  0x00007f757048c5b9: mov    %rbx,0x60(%rsp)
  0x00007f757048c5be: mov    %rbp,0x50(%rsp)
  0x00007f757048c5c3: mov    %rsi,0x48(%rsp)
  0x00007f757048c5c8: mov    %rdi,0x40(%rsp)
  0x00007f757048c5cd: mov    %r8,0x38(%rsp)
  0x00007f757048c5d2: mov    %r9,0x30(%rsp)
  0x00007f757048c5d7: mov    %r10,0x28(%rsp)
  0x00007f757048c5dc: mov    %r11,0x20(%rsp)
  0x00007f757048c5e1: mov    %r12,0x18(%rsp)
  0x00007f757048c5e6: mov    %r13,0x10(%rsp)
  0x00007f757048c5eb: mov    %r14,0x8(%rsp)
  0x00007f757048c5f0: mov    %r15,(%rsp)
  0x00007f757048c5f4: sub    $0x200,%rsp
  0x00007f757048c5fb: fxsave64 (%rsp)
  0x00007f757048c600: mov    %rbx,%rdi
  0x00007f757048c603: mov    %rax,%rsi
  0x00007f757048c606: callq  0x00007f7585522bca
  0x00007f757048c60b: fxrstor64 (%rsp)
  0x00007f757048c610: add    $0x200,%rsp
  0x00007f757048c617: mov    (%rsp),%r15
  0x00007f757048c61b: mov    0x8(%rsp),%r14
  0x00007f757048c620: mov    0x10(%rsp),%r13
  0x00007f757048c625: mov    0x18(%rsp),%r12
  0x00007f757048c62a: mov    0x20(%rsp),%r11
  0x00007f757048c62f: mov    0x28(%rsp),%r10
  0x00007f757048c634: mov    0x30(%rsp),%r9
  0x00007f757048c639: mov    0x38(%rsp),%r8
  0x00007f757048c63e: mov    0x40(%rsp),%rdi
  0x00007f757048c643: mov    0x48(%rsp),%rsi
  0x00007f757048c648: mov    0x50(%rsp),%rbp
  0x00007f757048c64d: mov    0x60(%rsp),%rbx
  0x00007f757048c652: mov    0x68(%rsp),%rdx
  0x00007f757048c657: mov    0x70(%rsp),%rcx
  0x00007f757048c65c: mov    0x78(%rsp),%rax
  0x00007f757048c661: add    $0x80,%rsp
  0x00007f757048c668: add    $0x8,%rsp
  0x00007f757048c66c: popfq  
  0x00007f757048c66d: mov    %r13,%rsp
  0x00007f757048c670: pop    %rax
  0x00007f757048c671: mov    %rsp,%r13
  0x00007f757048c674: sub    $0x40,%rsp
  0x00007f757048c678: mov    %rax,(%rsp)
  0x00007f757048c67c: mov    %rsi,0x30(%rsp)
  0x00007f757048c681: mov    %rdx,0x28(%rsp)
  0x00007f757048c686: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048c690: mov    %rax,0x20(%rsp)
  0x00007f757048c695: mov    %rcx,0x18(%rsp)
  0x00007f757048c69a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048c6a4: mov    %rax,0x10(%rsp)
  0x00007f757048c6a9: mov    %r8,0x8(%rsp)
  0x00007f757048c6ae: mov    0x40(%rbx),%rcx
  0x00007f757048c6b2: jmpq   *%rcx

AHE@0x00007f75800d4890: 0xbbbe0000 i2c: 0x00007f757048c760 c2i: 0x00007f757048c87c c2iUV: 0x00007f757048c84f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)J (572 bytes generated)
c2i argument handler starts at 0x7f757048c87c
  0x00007f757048c760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048c764: movabs $0x7f757036e3e0,%r11
  0x00007f757048c76e: cmp    %r11,%rax
  0x00007f757048c771: jbe    0x00007f757048c78a
  0x00007f757048c777: movabs $0x7f757046e3e0,%r11
  0x00007f757048c781: cmp    %r11,%rax
  0x00007f757048c784: jb     0x00007f757048c827
  0x00007f757048c78a: movabs $0x7f7570369420,%r11
  0x00007f757048c794: cmp    %r11,%rax
  0x00007f757048c797: jbe    0x00007f757048c7b0
  0x00007f757048c79d: movabs $0x7f757036de58,%r11
  0x00007f757048c7a7: cmp    %r11,%rax
  0x00007f757048c7aa: jb     0x00007f757048c827
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048c7b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048c7b5: sub    $0x80,%rsp
  0x00007f757048c7bc: mov    %rax,0x78(%rsp)
  0x00007f757048c7c1: mov    %rcx,0x70(%rsp)
  0x00007f757048c7c6: mov    %rdx,0x68(%rsp)
  0x00007f757048c7cb: mov    %rbx,0x60(%rsp)
  0x00007f757048c7d0: mov    %rbp,0x50(%rsp)
  0x00007f757048c7d5: mov    %rsi,0x48(%rsp)
  0x00007f757048c7da: mov    %rdi,0x40(%rsp)
  0x00007f757048c7df: mov    %r8,0x38(%rsp)
  0x00007f757048c7e4: mov    %r9,0x30(%rsp)
  0x00007f757048c7e9: mov    %r10,0x28(%rsp)
  0x00007f757048c7ee: mov    %r11,0x20(%rsp)
  0x00007f757048c7f3: mov    %r12,0x18(%rsp)
  0x00007f757048c7f8: mov    %r13,0x10(%rsp)
  0x00007f757048c7fd: mov    %r14,0x8(%rsp)
  0x00007f757048c802: mov    %r15,(%rsp)
  0x00007f757048c806: movabs $0x7f758592f470,%rdi
  0x00007f757048c810: movabs $0x7f757048c7b0,%rsi
  0x00007f757048c81a: mov    %rsp,%rdx
  0x00007f757048c81d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c821: callq  0x00007f75853729fa
  0x00007f757048c826: hlt    
  ;; } verify_i2ce 
  0x00007f757048c827: mov    %rsp,%r11
  0x00007f757048c82a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c82e: push   %rax
  0x00007f757048c82f: mov    %r11,%rax
  0x00007f757048c832: mov    0x50(%rbx),%r11
  0x00007f757048c836: mov    0x20(%rax),%rsi
  0x00007f757048c83a: mov    0x18(%rax),%rdx
  0x00007f757048c83e: mov    0x8(%rax),%rcx
  0x00007f757048c842: mov    %rbx,0x258(%r15)
  0x00007f757048c849: mov    %rbx,%rax
  0x00007f757048c84c: jmpq   *%r11
  0x00007f757048c84f: mov    0x8(%rsi),%ebx
  0x00007f757048c852: shl    $0x3,%rbx
  0x00007f757048c856: cmp    0x10(%rax),%rbx
  0x00007f757048c85a: mov    0x8(%rax),%rbx
  0x00007f757048c85e: je     0x00007f757048c869
  0x00007f757048c864: jmpq   0x00007f757046ec40
  0x00007f757048c869: cmpq   $0x0,0x58(%rbx)
  0x00007f757048c871: je     0x00007f757048c96c
  0x00007f757048c877: jmpq   0x00007f757046ec40
  0x00007f757048c87c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048c884: je     0x00007f757048c96c
  0x00007f757048c88a: mov    %rsp,%r13
  0x00007f757048c88d: mov    (%rsp),%rax
  0x00007f757048c891: and    $0xfffffffffffffff0,%rsp
  0x00007f757048c895: pushfq 
  0x00007f757048c896: sub    $0x8,%rsp
  0x00007f757048c89a: mov    %rsp,-0x28(%rsp)
  0x00007f757048c89f: sub    $0x80,%rsp
  0x00007f757048c8a6: mov    %rax,0x78(%rsp)
  0x00007f757048c8ab: mov    %rcx,0x70(%rsp)
  0x00007f757048c8b0: mov    %rdx,0x68(%rsp)
  0x00007f757048c8b5: mov    %rbx,0x60(%rsp)
  0x00007f757048c8ba: mov    %rbp,0x50(%rsp)
  0x00007f757048c8bf: mov    %rsi,0x48(%rsp)
  0x00007f757048c8c4: mov    %rdi,0x40(%rsp)
  0x00007f757048c8c9: mov    %r8,0x38(%rsp)
  0x00007f757048c8ce: mov    %r9,0x30(%rsp)
  0x00007f757048c8d3: mov    %r10,0x28(%rsp)
  0x00007f757048c8d8: mov    %r11,0x20(%rsp)
  0x00007f757048c8dd: mov    %r12,0x18(%rsp)
  0x00007f757048c8e2: mov    %r13,0x10(%rsp)
  0x00007f757048c8e7: mov    %r14,0x8(%rsp)
  0x00007f757048c8ec: mov    %r15,(%rsp)
  0x00007f757048c8f0: sub    $0x200,%rsp
  0x00007f757048c8f7: fxsave64 (%rsp)
  0x00007f757048c8fc: mov    %rbx,%rdi
  0x00007f757048c8ff: mov    %rax,%rsi
  0x00007f757048c902: callq  0x00007f7585522bca
  0x00007f757048c907: fxrstor64 (%rsp)
  0x00007f757048c90c: add    $0x200,%rsp
  0x00007f757048c913: mov    (%rsp),%r15
  0x00007f757048c917: mov    0x8(%rsp),%r14
  0x00007f757048c91c: mov    0x10(%rsp),%r13
  0x00007f757048c921: mov    0x18(%rsp),%r12
  0x00007f757048c926: mov    0x20(%rsp),%r11
  0x00007f757048c92b: mov    0x28(%rsp),%r10
  0x00007f757048c930: mov    0x30(%rsp),%r9
  0x00007f757048c935: mov    0x38(%rsp),%r8
  0x00007f757048c93a: mov    0x40(%rsp),%rdi
  0x00007f757048c93f: mov    0x48(%rsp),%rsi
  0x00007f757048c944: mov    0x50(%rsp),%rbp
  0x00007f757048c949: mov    0x60(%rsp),%rbx
  0x00007f757048c94e: mov    0x68(%rsp),%rdx
  0x00007f757048c953: mov    0x70(%rsp),%rcx
  0x00007f757048c958: mov    0x78(%rsp),%rax
  0x00007f757048c95d: add    $0x80,%rsp
  0x00007f757048c964: add    $0x8,%rsp
  0x00007f757048c968: popfq  
  0x00007f757048c969: mov    %r13,%rsp
  0x00007f757048c96c: pop    %rax
  0x00007f757048c96d: mov    %rsp,%r13
  0x00007f757048c970: sub    $0x30,%rsp
  0x00007f757048c974: mov    %rax,(%rsp)
  0x00007f757048c978: mov    %rsi,0x20(%rsp)
  0x00007f757048c97d: mov    %rdx,0x18(%rsp)
  0x00007f757048c982: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048c98c: mov    %rax,0x10(%rsp)
  0x00007f757048c991: mov    %rcx,0x8(%rsp)
  0x00007f757048c996: mov    0x40(%rbx),%rcx
  0x00007f757048c99a: jmpq   *%rcx

AHE@0x00007f75800d48d8: 0xbbbea000 i2c: 0x00007f757048ca60 c2i: 0x00007f757048cb80 c2iUV: 0x00007f757048cb53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (581 bytes generated)
c2i argument handler starts at 0x7f757048cb80
  0x00007f757048ca60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048ca64: movabs $0x7f757036e3e0,%r11
  0x00007f757048ca6e: cmp    %r11,%rax
  0x00007f757048ca71: jbe    0x00007f757048ca8a
  0x00007f757048ca77: movabs $0x7f757046e3e0,%r11
  0x00007f757048ca81: cmp    %r11,%rax
  0x00007f757048ca84: jb     0x00007f757048cb27
  0x00007f757048ca8a: movabs $0x7f7570369420,%r11
  0x00007f757048ca94: cmp    %r11,%rax
  0x00007f757048ca97: jbe    0x00007f757048cab0
  0x00007f757048ca9d: movabs $0x7f757036de58,%r11
  0x00007f757048caa7: cmp    %r11,%rax
  0x00007f757048caaa: jb     0x00007f757048cb27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048cab0: mov    %rsp,-0x28(%rsp)
  0x00007f757048cab5: sub    $0x80,%rsp
  0x00007f757048cabc: mov    %rax,0x78(%rsp)
  0x00007f757048cac1: mov    %rcx,0x70(%rsp)
  0x00007f757048cac6: mov    %rdx,0x68(%rsp)
  0x00007f757048cacb: mov    %rbx,0x60(%rsp)
  0x00007f757048cad0: mov    %rbp,0x50(%rsp)
  0x00007f757048cad5: mov    %rsi,0x48(%rsp)
  0x00007f757048cada: mov    %rdi,0x40(%rsp)
  0x00007f757048cadf: mov    %r8,0x38(%rsp)
  0x00007f757048cae4: mov    %r9,0x30(%rsp)
  0x00007f757048cae9: mov    %r10,0x28(%rsp)
  0x00007f757048caee: mov    %r11,0x20(%rsp)
  0x00007f757048caf3: mov    %r12,0x18(%rsp)
  0x00007f757048caf8: mov    %r13,0x10(%rsp)
  0x00007f757048cafd: mov    %r14,0x8(%rsp)
  0x00007f757048cb02: mov    %r15,(%rsp)
  0x00007f757048cb06: movabs $0x7f758592f470,%rdi
  0x00007f757048cb10: movabs $0x7f757048cab0,%rsi
  0x00007f757048cb1a: mov    %rsp,%rdx
  0x00007f757048cb1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048cb21: callq  0x00007f75853729fa
  0x00007f757048cb26: hlt    
  ;; } verify_i2ce 
  0x00007f757048cb27: mov    %rsp,%r11
  0x00007f757048cb2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048cb2e: push   %rax
  0x00007f757048cb2f: mov    %r11,%rax
  0x00007f757048cb32: mov    0x50(%rbx),%r11
  0x00007f757048cb36: mov    0x28(%rax),%rsi
  0x00007f757048cb3a: mov    0x20(%rax),%rdx
  0x00007f757048cb3e: mov    0x10(%rax),%rcx
  0x00007f757048cb42: mov    0x8(%rax),%r8d
  0x00007f757048cb46: mov    %rbx,0x258(%r15)
  0x00007f757048cb4d: mov    %rbx,%rax
  0x00007f757048cb50: jmpq   *%r11
  0x00007f757048cb53: mov    0x8(%rsi),%ebx
  0x00007f757048cb56: shl    $0x3,%rbx
  0x00007f757048cb5a: cmp    0x10(%rax),%rbx
  0x00007f757048cb5e: mov    0x8(%rax),%rbx
  0x00007f757048cb62: je     0x00007f757048cb6d
  0x00007f757048cb68: jmpq   0x00007f757046ec40
  0x00007f757048cb6d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048cb75: je     0x00007f757048cc70
  0x00007f757048cb7b: jmpq   0x00007f757046ec40
  0x00007f757048cb80: cmpq   $0x0,0x58(%rbx)
  0x00007f757048cb88: je     0x00007f757048cc70
  0x00007f757048cb8e: mov    %rsp,%r13
  0x00007f757048cb91: mov    (%rsp),%rax
  0x00007f757048cb95: and    $0xfffffffffffffff0,%rsp
  0x00007f757048cb99: pushfq 
  0x00007f757048cb9a: sub    $0x8,%rsp
  0x00007f757048cb9e: mov    %rsp,-0x28(%rsp)
  0x00007f757048cba3: sub    $0x80,%rsp
  0x00007f757048cbaa: mov    %rax,0x78(%rsp)
  0x00007f757048cbaf: mov    %rcx,0x70(%rsp)
  0x00007f757048cbb4: mov    %rdx,0x68(%rsp)
  0x00007f757048cbb9: mov    %rbx,0x60(%rsp)
  0x00007f757048cbbe: mov    %rbp,0x50(%rsp)
  0x00007f757048cbc3: mov    %rsi,0x48(%rsp)
  0x00007f757048cbc8: mov    %rdi,0x40(%rsp)
  0x00007f757048cbcd: mov    %r8,0x38(%rsp)
  0x00007f757048cbd2: mov    %r9,0x30(%rsp)
  0x00007f757048cbd7: mov    %r10,0x28(%rsp)
  0x00007f757048cbdc: mov    %r11,0x20(%rsp)
  0x00007f757048cbe1: mov    %r12,0x18(%rsp)
  0x00007f757048cbe6: mov    %r13,0x10(%rsp)
  0x00007f757048cbeb: mov    %r14,0x8(%rsp)
  0x00007f757048cbf0: mov    %r15,(%rsp)
  0x00007f757048cbf4: sub    $0x200,%rsp
  0x00007f757048cbfb: fxsave64 (%rsp)
  0x00007f757048cc00: mov    %rbx,%rdi
  0x00007f757048cc03: mov    %rax,%rsi
  0x00007f757048cc06: callq  0x00007f7585522bca
  0x00007f757048cc0b: fxrstor64 (%rsp)
  0x00007f757048cc10: add    $0x200,%rsp
  0x00007f757048cc17: mov    (%rsp),%r15
  0x00007f757048cc1b: mov    0x8(%rsp),%r14
  0x00007f757048cc20: mov    0x10(%rsp),%r13
  0x00007f757048cc25: mov    0x18(%rsp),%r12
  0x00007f757048cc2a: mov    0x20(%rsp),%r11
  0x00007f757048cc2f: mov    0x28(%rsp),%r10
  0x00007f757048cc34: mov    0x30(%rsp),%r9
  0x00007f757048cc39: mov    0x38(%rsp),%r8
  0x00007f757048cc3e: mov    0x40(%rsp),%rdi
  0x00007f757048cc43: mov    0x48(%rsp),%rsi
  0x00007f757048cc48: mov    0x50(%rsp),%rbp
  0x00007f757048cc4d: mov    0x60(%rsp),%rbx
  0x00007f757048cc52: mov    0x68(%rsp),%rdx
  0x00007f757048cc57: mov    0x70(%rsp),%rcx
  0x00007f757048cc5c: mov    0x78(%rsp),%rax
  0x00007f757048cc61: add    $0x80,%rsp
  0x00007f757048cc68: add    $0x8,%rsp
  0x00007f757048cc6c: popfq  
  0x00007f757048cc6d: mov    %r13,%rsp
  0x00007f757048cc70: pop    %rax
  0x00007f757048cc71: mov    %rsp,%r13
  0x00007f757048cc74: sub    $0x30,%rsp
  0x00007f757048cc78: mov    %rax,(%rsp)
  0x00007f757048cc7c: mov    %rsi,0x28(%rsp)
  0x00007f757048cc81: mov    %rdx,0x20(%rsp)
  0x00007f757048cc86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048cc90: mov    %rax,0x18(%rsp)
  0x00007f757048cc95: mov    %rcx,0x10(%rsp)
  0x00007f757048cc9a: mov    %r8d,0x8(%rsp)
  0x00007f757048cc9f: mov    0x40(%rbx),%rcx
  0x00007f757048cca3: jmpq   *%rcx

AHE@0x00007f75800d4920: 0xbbbe0000 i2c: 0x00007f757048cd60 c2i: 0x00007f757048ce7c c2iUV: 0x00007f757048ce4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)I (572 bytes generated)
c2i argument handler starts at 0x7f757048ce7c
  0x00007f757048cd60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048cd64: movabs $0x7f757036e3e0,%r11
  0x00007f757048cd6e: cmp    %r11,%rax
  0x00007f757048cd71: jbe    0x00007f757048cd8a
  0x00007f757048cd77: movabs $0x7f757046e3e0,%r11
  0x00007f757048cd81: cmp    %r11,%rax
  0x00007f757048cd84: jb     0x00007f757048ce27
  0x00007f757048cd8a: movabs $0x7f7570369420,%r11
  0x00007f757048cd94: cmp    %r11,%rax
  0x00007f757048cd97: jbe    0x00007f757048cdb0
  0x00007f757048cd9d: movabs $0x7f757036de58,%r11
  0x00007f757048cda7: cmp    %r11,%rax
  0x00007f757048cdaa: jb     0x00007f757048ce27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048cdb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048cdb5: sub    $0x80,%rsp
  0x00007f757048cdbc: mov    %rax,0x78(%rsp)
  0x00007f757048cdc1: mov    %rcx,0x70(%rsp)
  0x00007f757048cdc6: mov    %rdx,0x68(%rsp)
  0x00007f757048cdcb: mov    %rbx,0x60(%rsp)
  0x00007f757048cdd0: mov    %rbp,0x50(%rsp)
  0x00007f757048cdd5: mov    %rsi,0x48(%rsp)
  0x00007f757048cdda: mov    %rdi,0x40(%rsp)
  0x00007f757048cddf: mov    %r8,0x38(%rsp)
  0x00007f757048cde4: mov    %r9,0x30(%rsp)
  0x00007f757048cde9: mov    %r10,0x28(%rsp)
  0x00007f757048cdee: mov    %r11,0x20(%rsp)
  0x00007f757048cdf3: mov    %r12,0x18(%rsp)
  0x00007f757048cdf8: mov    %r13,0x10(%rsp)
  0x00007f757048cdfd: mov    %r14,0x8(%rsp)
  0x00007f757048ce02: mov    %r15,(%rsp)
  0x00007f757048ce06: movabs $0x7f758592f470,%rdi
  0x00007f757048ce10: movabs $0x7f757048cdb0,%rsi
  0x00007f757048ce1a: mov    %rsp,%rdx
  0x00007f757048ce1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ce21: callq  0x00007f75853729fa
  0x00007f757048ce26: hlt    
  ;; } verify_i2ce 
  0x00007f757048ce27: mov    %rsp,%r11
  0x00007f757048ce2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ce2e: push   %rax
  0x00007f757048ce2f: mov    %r11,%rax
  0x00007f757048ce32: mov    0x50(%rbx),%r11
  0x00007f757048ce36: mov    0x20(%rax),%rsi
  0x00007f757048ce3a: mov    0x18(%rax),%rdx
  0x00007f757048ce3e: mov    0x8(%rax),%rcx
  0x00007f757048ce42: mov    %rbx,0x258(%r15)
  0x00007f757048ce49: mov    %rbx,%rax
  0x00007f757048ce4c: jmpq   *%r11
  0x00007f757048ce4f: mov    0x8(%rsi),%ebx
  0x00007f757048ce52: shl    $0x3,%rbx
  0x00007f757048ce56: cmp    0x10(%rax),%rbx
  0x00007f757048ce5a: mov    0x8(%rax),%rbx
  0x00007f757048ce5e: je     0x00007f757048ce69
  0x00007f757048ce64: jmpq   0x00007f757046ec40
  0x00007f757048ce69: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ce71: je     0x00007f757048cf6c
  0x00007f757048ce77: jmpq   0x00007f757046ec40
  0x00007f757048ce7c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ce84: je     0x00007f757048cf6c
  0x00007f757048ce8a: mov    %rsp,%r13
  0x00007f757048ce8d: mov    (%rsp),%rax
  0x00007f757048ce91: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ce95: pushfq 
  0x00007f757048ce96: sub    $0x8,%rsp
  0x00007f757048ce9a: mov    %rsp,-0x28(%rsp)
  0x00007f757048ce9f: sub    $0x80,%rsp
  0x00007f757048cea6: mov    %rax,0x78(%rsp)
  0x00007f757048ceab: mov    %rcx,0x70(%rsp)
  0x00007f757048ceb0: mov    %rdx,0x68(%rsp)
  0x00007f757048ceb5: mov    %rbx,0x60(%rsp)
  0x00007f757048ceba: mov    %rbp,0x50(%rsp)
  0x00007f757048cebf: mov    %rsi,0x48(%rsp)
  0x00007f757048cec4: mov    %rdi,0x40(%rsp)
  0x00007f757048cec9: mov    %r8,0x38(%rsp)
  0x00007f757048cece: mov    %r9,0x30(%rsp)
  0x00007f757048ced3: mov    %r10,0x28(%rsp)
  0x00007f757048ced8: mov    %r11,0x20(%rsp)
  0x00007f757048cedd: mov    %r12,0x18(%rsp)
  0x00007f757048cee2: mov    %r13,0x10(%rsp)
  0x00007f757048cee7: mov    %r14,0x8(%rsp)
  0x00007f757048ceec: mov    %r15,(%rsp)
  0x00007f757048cef0: sub    $0x200,%rsp
  0x00007f757048cef7: fxsave64 (%rsp)
  0x00007f757048cefc: mov    %rbx,%rdi
  0x00007f757048ceff: mov    %rax,%rsi
  0x00007f757048cf02: callq  0x00007f7585522bca
  0x00007f757048cf07: fxrstor64 (%rsp)
  0x00007f757048cf0c: add    $0x200,%rsp
  0x00007f757048cf13: mov    (%rsp),%r15
  0x00007f757048cf17: mov    0x8(%rsp),%r14
  0x00007f757048cf1c: mov    0x10(%rsp),%r13
  0x00007f757048cf21: mov    0x18(%rsp),%r12
  0x00007f757048cf26: mov    0x20(%rsp),%r11
  0x00007f757048cf2b: mov    0x28(%rsp),%r10
  0x00007f757048cf30: mov    0x30(%rsp),%r9
  0x00007f757048cf35: mov    0x38(%rsp),%r8
  0x00007f757048cf3a: mov    0x40(%rsp),%rdi
  0x00007f757048cf3f: mov    0x48(%rsp),%rsi
  0x00007f757048cf44: mov    0x50(%rsp),%rbp
  0x00007f757048cf49: mov    0x60(%rsp),%rbx
  0x00007f757048cf4e: mov    0x68(%rsp),%rdx
  0x00007f757048cf53: mov    0x70(%rsp),%rcx
  0x00007f757048cf58: mov    0x78(%rsp),%rax
  0x00007f757048cf5d: add    $0x80,%rsp
  0x00007f757048cf64: add    $0x8,%rsp
  0x00007f757048cf68: popfq  
  0x00007f757048cf69: mov    %r13,%rsp
  0x00007f757048cf6c: pop    %rax
  0x00007f757048cf6d: mov    %rsp,%r13
  0x00007f757048cf70: sub    $0x30,%rsp
  0x00007f757048cf74: mov    %rax,(%rsp)
  0x00007f757048cf78: mov    %rsi,0x20(%rsp)
  0x00007f757048cf7d: mov    %rdx,0x18(%rsp)
  0x00007f757048cf82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048cf8c: mov    %rax,0x10(%rsp)
  0x00007f757048cf91: mov    %rcx,0x8(%rsp)
  0x00007f757048cf96: mov    0x40(%rbx),%rcx
  0x00007f757048cf9a: jmpq   *%rcx

AHE@0x00007f75800d4968: 0xbbbea000 i2c: 0x00007f757048d060 c2i: 0x00007f757048d180 c2iUV: 0x00007f757048d153
i2c argument handler #0 for: receiver (Ljava/lang/Object;JC)V (581 bytes generated)
c2i argument handler starts at 0x7f757048d180
  0x00007f757048d060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048d064: movabs $0x7f757036e3e0,%r11
  0x00007f757048d06e: cmp    %r11,%rax
  0x00007f757048d071: jbe    0x00007f757048d08a
  0x00007f757048d077: movabs $0x7f757046e3e0,%r11
  0x00007f757048d081: cmp    %r11,%rax
  0x00007f757048d084: jb     0x00007f757048d127
  0x00007f757048d08a: movabs $0x7f7570369420,%r11
  0x00007f757048d094: cmp    %r11,%rax
  0x00007f757048d097: jbe    0x00007f757048d0b0
  0x00007f757048d09d: movabs $0x7f757036de58,%r11
  0x00007f757048d0a7: cmp    %r11,%rax
  0x00007f757048d0aa: jb     0x00007f757048d127
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048d0b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048d0b5: sub    $0x80,%rsp
  0x00007f757048d0bc: mov    %rax,0x78(%rsp)
  0x00007f757048d0c1: mov    %rcx,0x70(%rsp)
  0x00007f757048d0c6: mov    %rdx,0x68(%rsp)
  0x00007f757048d0cb: mov    %rbx,0x60(%rsp)
  0x00007f757048d0d0: mov    %rbp,0x50(%rsp)
  0x00007f757048d0d5: mov    %rsi,0x48(%rsp)
  0x00007f757048d0da: mov    %rdi,0x40(%rsp)
  0x00007f757048d0df: mov    %r8,0x38(%rsp)
  0x00007f757048d0e4: mov    %r9,0x30(%rsp)
  0x00007f757048d0e9: mov    %r10,0x28(%rsp)
  0x00007f757048d0ee: mov    %r11,0x20(%rsp)
  0x00007f757048d0f3: mov    %r12,0x18(%rsp)
  0x00007f757048d0f8: mov    %r13,0x10(%rsp)
  0x00007f757048d0fd: mov    %r14,0x8(%rsp)
  0x00007f757048d102: mov    %r15,(%rsp)
  0x00007f757048d106: movabs $0x7f758592f470,%rdi
  0x00007f757048d110: movabs $0x7f757048d0b0,%rsi
  0x00007f757048d11a: mov    %rsp,%rdx
  0x00007f757048d11d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d121: callq  0x00007f75853729fa
  0x00007f757048d126: hlt    
  ;; } verify_i2ce 
  0x00007f757048d127: mov    %rsp,%r11
  0x00007f757048d12a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d12e: push   %rax
  0x00007f757048d12f: mov    %r11,%rax
  0x00007f757048d132: mov    0x50(%rbx),%r11
  0x00007f757048d136: mov    0x28(%rax),%rsi
  0x00007f757048d13a: mov    0x20(%rax),%rdx
  0x00007f757048d13e: mov    0x10(%rax),%rcx
  0x00007f757048d142: mov    0x8(%rax),%r8d
  0x00007f757048d146: mov    %rbx,0x258(%r15)
  0x00007f757048d14d: mov    %rbx,%rax
  0x00007f757048d150: jmpq   *%r11
  0x00007f757048d153: mov    0x8(%rsi),%ebx
  0x00007f757048d156: shl    $0x3,%rbx
  0x00007f757048d15a: cmp    0x10(%rax),%rbx
  0x00007f757048d15e: mov    0x8(%rax),%rbx
  0x00007f757048d162: je     0x00007f757048d16d
  0x00007f757048d168: jmpq   0x00007f757046ec40
  0x00007f757048d16d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048d175: je     0x00007f757048d270
  0x00007f757048d17b: jmpq   0x00007f757046ec40
  0x00007f757048d180: cmpq   $0x0,0x58(%rbx)
  0x00007f757048d188: je     0x00007f757048d270
  0x00007f757048d18e: mov    %rsp,%r13
  0x00007f757048d191: mov    (%rsp),%rax
  0x00007f757048d195: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d199: pushfq 
  0x00007f757048d19a: sub    $0x8,%rsp
  0x00007f757048d19e: mov    %rsp,-0x28(%rsp)
  0x00007f757048d1a3: sub    $0x80,%rsp
  0x00007f757048d1aa: mov    %rax,0x78(%rsp)
  0x00007f757048d1af: mov    %rcx,0x70(%rsp)
  0x00007f757048d1b4: mov    %rdx,0x68(%rsp)
  0x00007f757048d1b9: mov    %rbx,0x60(%rsp)
  0x00007f757048d1be: mov    %rbp,0x50(%rsp)
  0x00007f757048d1c3: mov    %rsi,0x48(%rsp)
  0x00007f757048d1c8: mov    %rdi,0x40(%rsp)
  0x00007f757048d1cd: mov    %r8,0x38(%rsp)
  0x00007f757048d1d2: mov    %r9,0x30(%rsp)
  0x00007f757048d1d7: mov    %r10,0x28(%rsp)
  0x00007f757048d1dc: mov    %r11,0x20(%rsp)
  0x00007f757048d1e1: mov    %r12,0x18(%rsp)
  0x00007f757048d1e6: mov    %r13,0x10(%rsp)
  0x00007f757048d1eb: mov    %r14,0x8(%rsp)
  0x00007f757048d1f0: mov    %r15,(%rsp)
  0x00007f757048d1f4: sub    $0x200,%rsp
  0x00007f757048d1fb: fxsave64 (%rsp)
  0x00007f757048d200: mov    %rbx,%rdi
  0x00007f757048d203: mov    %rax,%rsi
  0x00007f757048d206: callq  0x00007f7585522bca
  0x00007f757048d20b: fxrstor64 (%rsp)
  0x00007f757048d210: add    $0x200,%rsp
  0x00007f757048d217: mov    (%rsp),%r15
  0x00007f757048d21b: mov    0x8(%rsp),%r14
  0x00007f757048d220: mov    0x10(%rsp),%r13
  0x00007f757048d225: mov    0x18(%rsp),%r12
  0x00007f757048d22a: mov    0x20(%rsp),%r11
  0x00007f757048d22f: mov    0x28(%rsp),%r10
  0x00007f757048d234: mov    0x30(%rsp),%r9
  0x00007f757048d239: mov    0x38(%rsp),%r8
  0x00007f757048d23e: mov    0x40(%rsp),%rdi
  0x00007f757048d243: mov    0x48(%rsp),%rsi
  0x00007f757048d248: mov    0x50(%rsp),%rbp
  0x00007f757048d24d: mov    0x60(%rsp),%rbx
  0x00007f757048d252: mov    0x68(%rsp),%rdx
  0x00007f757048d257: mov    0x70(%rsp),%rcx
  0x00007f757048d25c: mov    0x78(%rsp),%rax
  0x00007f757048d261: add    $0x80,%rsp
  0x00007f757048d268: add    $0x8,%rsp
  0x00007f757048d26c: popfq  
  0x00007f757048d26d: mov    %r13,%rsp
  0x00007f757048d270: pop    %rax
  0x00007f757048d271: mov    %rsp,%r13
  0x00007f757048d274: sub    $0x30,%rsp
  0x00007f757048d278: mov    %rax,(%rsp)
  0x00007f757048d27c: mov    %rsi,0x28(%rsp)
  0x00007f757048d281: mov    %rdx,0x20(%rsp)
  0x00007f757048d286: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048d290: mov    %rax,0x18(%rsp)
  0x00007f757048d295: mov    %rcx,0x10(%rsp)
  0x00007f757048d29a: mov    %r8d,0x8(%rsp)
  0x00007f757048d29f: mov    0x40(%rbx),%rcx
  0x00007f757048d2a3: jmpq   *%rcx

AHE@0x00007f75800d49b0: 0xbbbe0000 i2c: 0x00007f757048d360 c2i: 0x00007f757048d47c c2iUV: 0x00007f757048d44f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)C (572 bytes generated)
c2i argument handler starts at 0x7f757048d47c
  0x00007f757048d360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048d364: movabs $0x7f757036e3e0,%r11
  0x00007f757048d36e: cmp    %r11,%rax
  0x00007f757048d371: jbe    0x00007f757048d38a
  0x00007f757048d377: movabs $0x7f757046e3e0,%r11
  0x00007f757048d381: cmp    %r11,%rax
  0x00007f757048d384: jb     0x00007f757048d427
  0x00007f757048d38a: movabs $0x7f7570369420,%r11
  0x00007f757048d394: cmp    %r11,%rax
  0x00007f757048d397: jbe    0x00007f757048d3b0
  0x00007f757048d39d: movabs $0x7f757036de58,%r11
  0x00007f757048d3a7: cmp    %r11,%rax
  0x00007f757048d3aa: jb     0x00007f757048d427
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048d3b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048d3b5: sub    $0x80,%rsp
  0x00007f757048d3bc: mov    %rax,0x78(%rsp)
  0x00007f757048d3c1: mov    %rcx,0x70(%rsp)
  0x00007f757048d3c6: mov    %rdx,0x68(%rsp)
  0x00007f757048d3cb: mov    %rbx,0x60(%rsp)
  0x00007f757048d3d0: mov    %rbp,0x50(%rsp)
  0x00007f757048d3d5: mov    %rsi,0x48(%rsp)
  0x00007f757048d3da: mov    %rdi,0x40(%rsp)
  0x00007f757048d3df: mov    %r8,0x38(%rsp)
  0x00007f757048d3e4: mov    %r9,0x30(%rsp)
  0x00007f757048d3e9: mov    %r10,0x28(%rsp)
  0x00007f757048d3ee: mov    %r11,0x20(%rsp)
  0x00007f757048d3f3: mov    %r12,0x18(%rsp)
  0x00007f757048d3f8: mov    %r13,0x10(%rsp)
  0x00007f757048d3fd: mov    %r14,0x8(%rsp)
  0x00007f757048d402: mov    %r15,(%rsp)
  0x00007f757048d406: movabs $0x7f758592f470,%rdi
  0x00007f757048d410: movabs $0x7f757048d3b0,%rsi
  0x00007f757048d41a: mov    %rsp,%rdx
  0x00007f757048d41d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d421: callq  0x00007f75853729fa
  0x00007f757048d426: hlt    
  ;; } verify_i2ce 
  0x00007f757048d427: mov    %rsp,%r11
  0x00007f757048d42a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d42e: push   %rax
  0x00007f757048d42f: mov    %r11,%rax
  0x00007f757048d432: mov    0x50(%rbx),%r11
  0x00007f757048d436: mov    0x20(%rax),%rsi
  0x00007f757048d43a: mov    0x18(%rax),%rdx
  0x00007f757048d43e: mov    0x8(%rax),%rcx
  0x00007f757048d442: mov    %rbx,0x258(%r15)
  0x00007f757048d449: mov    %rbx,%rax
  0x00007f757048d44c: jmpq   *%r11
  0x00007f757048d44f: mov    0x8(%rsi),%ebx
  0x00007f757048d452: shl    $0x3,%rbx
  0x00007f757048d456: cmp    0x10(%rax),%rbx
  0x00007f757048d45a: mov    0x8(%rax),%rbx
  0x00007f757048d45e: je     0x00007f757048d469
  0x00007f757048d464: jmpq   0x00007f757046ec40
  0x00007f757048d469: cmpq   $0x0,0x58(%rbx)
  0x00007f757048d471: je     0x00007f757048d56c
  0x00007f757048d477: jmpq   0x00007f757046ec40
  0x00007f757048d47c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048d484: je     0x00007f757048d56c
  0x00007f757048d48a: mov    %rsp,%r13
  0x00007f757048d48d: mov    (%rsp),%rax
  0x00007f757048d491: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d495: pushfq 
  0x00007f757048d496: sub    $0x8,%rsp
  0x00007f757048d49a: mov    %rsp,-0x28(%rsp)
  0x00007f757048d49f: sub    $0x80,%rsp
  0x00007f757048d4a6: mov    %rax,0x78(%rsp)
  0x00007f757048d4ab: mov    %rcx,0x70(%rsp)
  0x00007f757048d4b0: mov    %rdx,0x68(%rsp)
  0x00007f757048d4b5: mov    %rbx,0x60(%rsp)
  0x00007f757048d4ba: mov    %rbp,0x50(%rsp)
  0x00007f757048d4bf: mov    %rsi,0x48(%rsp)
  0x00007f757048d4c4: mov    %rdi,0x40(%rsp)
  0x00007f757048d4c9: mov    %r8,0x38(%rsp)
  0x00007f757048d4ce: mov    %r9,0x30(%rsp)
  0x00007f757048d4d3: mov    %r10,0x28(%rsp)
  0x00007f757048d4d8: mov    %r11,0x20(%rsp)
  0x00007f757048d4dd: mov    %r12,0x18(%rsp)
  0x00007f757048d4e2: mov    %r13,0x10(%rsp)
  0x00007f757048d4e7: mov    %r14,0x8(%rsp)
  0x00007f757048d4ec: mov    %r15,(%rsp)
  0x00007f757048d4f0: sub    $0x200,%rsp
  0x00007f757048d4f7: fxsave64 (%rsp)
  0x00007f757048d4fc: mov    %rbx,%rdi
  0x00007f757048d4ff: mov    %rax,%rsi
  0x00007f757048d502: callq  0x00007f7585522bca
  0x00007f757048d507: fxrstor64 (%rsp)
  0x00007f757048d50c: add    $0x200,%rsp
  0x00007f757048d513: mov    (%rsp),%r15
  0x00007f757048d517: mov    0x8(%rsp),%r14
  0x00007f757048d51c: mov    0x10(%rsp),%r13
  0x00007f757048d521: mov    0x18(%rsp),%r12
  0x00007f757048d526: mov    0x20(%rsp),%r11
  0x00007f757048d52b: mov    0x28(%rsp),%r10
  0x00007f757048d530: mov    0x30(%rsp),%r9
  0x00007f757048d535: mov    0x38(%rsp),%r8
  0x00007f757048d53a: mov    0x40(%rsp),%rdi
  0x00007f757048d53f: mov    0x48(%rsp),%rsi
  0x00007f757048d544: mov    0x50(%rsp),%rbp
  0x00007f757048d549: mov    0x60(%rsp),%rbx
  0x00007f757048d54e: mov    0x68(%rsp),%rdx
  0x00007f757048d553: mov    0x70(%rsp),%rcx
  0x00007f757048d558: mov    0x78(%rsp),%rax
  0x00007f757048d55d: add    $0x80,%rsp
  0x00007f757048d564: add    $0x8,%rsp
  0x00007f757048d568: popfq  
  0x00007f757048d569: mov    %r13,%rsp
  0x00007f757048d56c: pop    %rax
  0x00007f757048d56d: mov    %rsp,%r13
  0x00007f757048d570: sub    $0x30,%rsp
  0x00007f757048d574: mov    %rax,(%rsp)
  0x00007f757048d578: mov    %rsi,0x20(%rsp)
  0x00007f757048d57d: mov    %rdx,0x18(%rsp)
  0x00007f757048d582: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048d58c: mov    %rax,0x10(%rsp)
  0x00007f757048d591: mov    %rcx,0x8(%rsp)
  0x00007f757048d596: mov    0x40(%rbx),%rcx
  0x00007f757048d59a: jmpq   *%rcx

AHE@0x00007f75800d49f8: 0xbbbea000 i2c: 0x00007f757048d660 c2i: 0x00007f757048d780 c2iUV: 0x00007f757048d753
i2c argument handler #0 for: receiver (Ljava/lang/Object;JS)V (581 bytes generated)
c2i argument handler starts at 0x7f757048d780
  0x00007f757048d660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048d664: movabs $0x7f757036e3e0,%r11
  0x00007f757048d66e: cmp    %r11,%rax
  0x00007f757048d671: jbe    0x00007f757048d68a
  0x00007f757048d677: movabs $0x7f757046e3e0,%r11
  0x00007f757048d681: cmp    %r11,%rax
  0x00007f757048d684: jb     0x00007f757048d727
  0x00007f757048d68a: movabs $0x7f7570369420,%r11
  0x00007f757048d694: cmp    %r11,%rax
  0x00007f757048d697: jbe    0x00007f757048d6b0
  0x00007f757048d69d: movabs $0x7f757036de58,%r11
  0x00007f757048d6a7: cmp    %r11,%rax
  0x00007f757048d6aa: jb     0x00007f757048d727
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048d6b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048d6b5: sub    $0x80,%rsp
  0x00007f757048d6bc: mov    %rax,0x78(%rsp)
  0x00007f757048d6c1: mov    %rcx,0x70(%rsp)
  0x00007f757048d6c6: mov    %rdx,0x68(%rsp)
  0x00007f757048d6cb: mov    %rbx,0x60(%rsp)
  0x00007f757048d6d0: mov    %rbp,0x50(%rsp)
  0x00007f757048d6d5: mov    %rsi,0x48(%rsp)
  0x00007f757048d6da: mov    %rdi,0x40(%rsp)
  0x00007f757048d6df: mov    %r8,0x38(%rsp)
  0x00007f757048d6e4: mov    %r9,0x30(%rsp)
  0x00007f757048d6e9: mov    %r10,0x28(%rsp)
  0x00007f757048d6ee: mov    %r11,0x20(%rsp)
  0x00007f757048d6f3: mov    %r12,0x18(%rsp)
  0x00007f757048d6f8: mov    %r13,0x10(%rsp)
  0x00007f757048d6fd: mov    %r14,0x8(%rsp)
  0x00007f757048d702: mov    %r15,(%rsp)
  0x00007f757048d706: movabs $0x7f758592f470,%rdi
  0x00007f757048d710: movabs $0x7f757048d6b0,%rsi
  0x00007f757048d71a: mov    %rsp,%rdx
  0x00007f757048d71d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d721: callq  0x00007f75853729fa
  0x00007f757048d726: hlt    
  ;; } verify_i2ce 
  0x00007f757048d727: mov    %rsp,%r11
  0x00007f757048d72a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d72e: push   %rax
  0x00007f757048d72f: mov    %r11,%rax
  0x00007f757048d732: mov    0x50(%rbx),%r11
  0x00007f757048d736: mov    0x28(%rax),%rsi
  0x00007f757048d73a: mov    0x20(%rax),%rdx
  0x00007f757048d73e: mov    0x10(%rax),%rcx
  0x00007f757048d742: mov    0x8(%rax),%r8d
  0x00007f757048d746: mov    %rbx,0x258(%r15)
  0x00007f757048d74d: mov    %rbx,%rax
  0x00007f757048d750: jmpq   *%r11
  0x00007f757048d753: mov    0x8(%rsi),%ebx
  0x00007f757048d756: shl    $0x3,%rbx
  0x00007f757048d75a: cmp    0x10(%rax),%rbx
  0x00007f757048d75e: mov    0x8(%rax),%rbx
  0x00007f757048d762: je     0x00007f757048d76d
  0x00007f757048d768: jmpq   0x00007f757046ec40
  0x00007f757048d76d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048d775: je     0x00007f757048d870
  0x00007f757048d77b: jmpq   0x00007f757046ec40
  0x00007f757048d780: cmpq   $0x0,0x58(%rbx)
  0x00007f757048d788: je     0x00007f757048d870
  0x00007f757048d78e: mov    %rsp,%r13
  0x00007f757048d791: mov    (%rsp),%rax
  0x00007f757048d795: and    $0xfffffffffffffff0,%rsp
  0x00007f757048d799: pushfq 
  0x00007f757048d79a: sub    $0x8,%rsp
  0x00007f757048d79e: mov    %rsp,-0x28(%rsp)
  0x00007f757048d7a3: sub    $0x80,%rsp
  0x00007f757048d7aa: mov    %rax,0x78(%rsp)
  0x00007f757048d7af: mov    %rcx,0x70(%rsp)
  0x00007f757048d7b4: mov    %rdx,0x68(%rsp)
  0x00007f757048d7b9: mov    %rbx,0x60(%rsp)
  0x00007f757048d7be: mov    %rbp,0x50(%rsp)
  0x00007f757048d7c3: mov    %rsi,0x48(%rsp)
  0x00007f757048d7c8: mov    %rdi,0x40(%rsp)
  0x00007f757048d7cd: mov    %r8,0x38(%rsp)
  0x00007f757048d7d2: mov    %r9,0x30(%rsp)
  0x00007f757048d7d7: mov    %r10,0x28(%rsp)
  0x00007f757048d7dc: mov    %r11,0x20(%rsp)
  0x00007f757048d7e1: mov    %r12,0x18(%rsp)
  0x00007f757048d7e6: mov    %r13,0x10(%rsp)
  0x00007f757048d7eb: mov    %r14,0x8(%rsp)
  0x00007f757048d7f0: mov    %r15,(%rsp)
  0x00007f757048d7f4: sub    $0x200,%rsp
  0x00007f757048d7fb: fxsave64 (%rsp)
  0x00007f757048d800: mov    %rbx,%rdi
  0x00007f757048d803: mov    %rax,%rsi
  0x00007f757048d806: callq  0x00007f7585522bca
  0x00007f757048d80b: fxrstor64 (%rsp)
  0x00007f757048d810: add    $0x200,%rsp
  0x00007f757048d817: mov    (%rsp),%r15
  0x00007f757048d81b: mov    0x8(%rsp),%r14
  0x00007f757048d820: mov    0x10(%rsp),%r13
  0x00007f757048d825: mov    0x18(%rsp),%r12
  0x00007f757048d82a: mov    0x20(%rsp),%r11
  0x00007f757048d82f: mov    0x28(%rsp),%r10
  0x00007f757048d834: mov    0x30(%rsp),%r9
  0x00007f757048d839: mov    0x38(%rsp),%r8
  0x00007f757048d83e: mov    0x40(%rsp),%rdi
  0x00007f757048d843: mov    0x48(%rsp),%rsi
  0x00007f757048d848: mov    0x50(%rsp),%rbp
  0x00007f757048d84d: mov    0x60(%rsp),%rbx
  0x00007f757048d852: mov    0x68(%rsp),%rdx
  0x00007f757048d857: mov    0x70(%rsp),%rcx
  0x00007f757048d85c: mov    0x78(%rsp),%rax
  0x00007f757048d861: add    $0x80,%rsp
  0x00007f757048d868: add    $0x8,%rsp
  0x00007f757048d86c: popfq  
  0x00007f757048d86d: mov    %r13,%rsp
  0x00007f757048d870: pop    %rax
  0x00007f757048d871: mov    %rsp,%r13
  0x00007f757048d874: sub    $0x30,%rsp
  0x00007f757048d878: mov    %rax,(%rsp)
  0x00007f757048d87c: mov    %rsi,0x28(%rsp)
  0x00007f757048d881: mov    %rdx,0x20(%rsp)
  0x00007f757048d886: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048d890: mov    %rax,0x18(%rsp)
  0x00007f757048d895: mov    %rcx,0x10(%rsp)
  0x00007f757048d89a: mov    %r8d,0x8(%rsp)
  0x00007f757048d89f: mov    0x40(%rbx),%rcx
  0x00007f757048d8a3: jmpq   *%rcx

AHE@0x00007f75800d4a40: 0xbbbe0000 i2c: 0x00007f757048d960 c2i: 0x00007f757048da7c c2iUV: 0x00007f757048da4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)S (572 bytes generated)
c2i argument handler starts at 0x7f757048da7c
  0x00007f757048d960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048d964: movabs $0x7f757036e3e0,%r11
  0x00007f757048d96e: cmp    %r11,%rax
  0x00007f757048d971: jbe    0x00007f757048d98a
  0x00007f757048d977: movabs $0x7f757046e3e0,%r11
  0x00007f757048d981: cmp    %r11,%rax
  0x00007f757048d984: jb     0x00007f757048da27
  0x00007f757048d98a: movabs $0x7f7570369420,%r11
  0x00007f757048d994: cmp    %r11,%rax
  0x00007f757048d997: jbe    0x00007f757048d9b0
  0x00007f757048d99d: movabs $0x7f757036de58,%r11
  0x00007f757048d9a7: cmp    %r11,%rax
  0x00007f757048d9aa: jb     0x00007f757048da27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048d9b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048d9b5: sub    $0x80,%rsp
  0x00007f757048d9bc: mov    %rax,0x78(%rsp)
  0x00007f757048d9c1: mov    %rcx,0x70(%rsp)
  0x00007f757048d9c6: mov    %rdx,0x68(%rsp)
  0x00007f757048d9cb: mov    %rbx,0x60(%rsp)
  0x00007f757048d9d0: mov    %rbp,0x50(%rsp)
  0x00007f757048d9d5: mov    %rsi,0x48(%rsp)
  0x00007f757048d9da: mov    %rdi,0x40(%rsp)
  0x00007f757048d9df: mov    %r8,0x38(%rsp)
  0x00007f757048d9e4: mov    %r9,0x30(%rsp)
  0x00007f757048d9e9: mov    %r10,0x28(%rsp)
  0x00007f757048d9ee: mov    %r11,0x20(%rsp)
  0x00007f757048d9f3: mov    %r12,0x18(%rsp)
  0x00007f757048d9f8: mov    %r13,0x10(%rsp)
  0x00007f757048d9fd: mov    %r14,0x8(%rsp)
  0x00007f757048da02: mov    %r15,(%rsp)
  0x00007f757048da06: movabs $0x7f758592f470,%rdi
  0x00007f757048da10: movabs $0x7f757048d9b0,%rsi
  0x00007f757048da1a: mov    %rsp,%rdx
  0x00007f757048da1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048da21: callq  0x00007f75853729fa
  0x00007f757048da26: hlt    
  ;; } verify_i2ce 
  0x00007f757048da27: mov    %rsp,%r11
  0x00007f757048da2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048da2e: push   %rax
  0x00007f757048da2f: mov    %r11,%rax
  0x00007f757048da32: mov    0x50(%rbx),%r11
  0x00007f757048da36: mov    0x20(%rax),%rsi
  0x00007f757048da3a: mov    0x18(%rax),%rdx
  0x00007f757048da3e: mov    0x8(%rax),%rcx
  0x00007f757048da42: mov    %rbx,0x258(%r15)
  0x00007f757048da49: mov    %rbx,%rax
  0x00007f757048da4c: jmpq   *%r11
  0x00007f757048da4f: mov    0x8(%rsi),%ebx
  0x00007f757048da52: shl    $0x3,%rbx
  0x00007f757048da56: cmp    0x10(%rax),%rbx
  0x00007f757048da5a: mov    0x8(%rax),%rbx
  0x00007f757048da5e: je     0x00007f757048da69
  0x00007f757048da64: jmpq   0x00007f757046ec40
  0x00007f757048da69: cmpq   $0x0,0x58(%rbx)
  0x00007f757048da71: je     0x00007f757048db6c
  0x00007f757048da77: jmpq   0x00007f757046ec40
  0x00007f757048da7c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048da84: je     0x00007f757048db6c
  0x00007f757048da8a: mov    %rsp,%r13
  0x00007f757048da8d: mov    (%rsp),%rax
  0x00007f757048da91: and    $0xfffffffffffffff0,%rsp
  0x00007f757048da95: pushfq 
  0x00007f757048da96: sub    $0x8,%rsp
  0x00007f757048da9a: mov    %rsp,-0x28(%rsp)
  0x00007f757048da9f: sub    $0x80,%rsp
  0x00007f757048daa6: mov    %rax,0x78(%rsp)
  0x00007f757048daab: mov    %rcx,0x70(%rsp)
  0x00007f757048dab0: mov    %rdx,0x68(%rsp)
  0x00007f757048dab5: mov    %rbx,0x60(%rsp)
  0x00007f757048daba: mov    %rbp,0x50(%rsp)
  0x00007f757048dabf: mov    %rsi,0x48(%rsp)
  0x00007f757048dac4: mov    %rdi,0x40(%rsp)
  0x00007f757048dac9: mov    %r8,0x38(%rsp)
  0x00007f757048dace: mov    %r9,0x30(%rsp)
  0x00007f757048dad3: mov    %r10,0x28(%rsp)
  0x00007f757048dad8: mov    %r11,0x20(%rsp)
  0x00007f757048dadd: mov    %r12,0x18(%rsp)
  0x00007f757048dae2: mov    %r13,0x10(%rsp)
  0x00007f757048dae7: mov    %r14,0x8(%rsp)
  0x00007f757048daec: mov    %r15,(%rsp)
  0x00007f757048daf0: sub    $0x200,%rsp
  0x00007f757048daf7: fxsave64 (%rsp)
  0x00007f757048dafc: mov    %rbx,%rdi
  0x00007f757048daff: mov    %rax,%rsi
  0x00007f757048db02: callq  0x00007f7585522bca
  0x00007f757048db07: fxrstor64 (%rsp)
  0x00007f757048db0c: add    $0x200,%rsp
  0x00007f757048db13: mov    (%rsp),%r15
  0x00007f757048db17: mov    0x8(%rsp),%r14
  0x00007f757048db1c: mov    0x10(%rsp),%r13
  0x00007f757048db21: mov    0x18(%rsp),%r12
  0x00007f757048db26: mov    0x20(%rsp),%r11
  0x00007f757048db2b: mov    0x28(%rsp),%r10
  0x00007f757048db30: mov    0x30(%rsp),%r9
  0x00007f757048db35: mov    0x38(%rsp),%r8
  0x00007f757048db3a: mov    0x40(%rsp),%rdi
  0x00007f757048db3f: mov    0x48(%rsp),%rsi
  0x00007f757048db44: mov    0x50(%rsp),%rbp
  0x00007f757048db49: mov    0x60(%rsp),%rbx
  0x00007f757048db4e: mov    0x68(%rsp),%rdx
  0x00007f757048db53: mov    0x70(%rsp),%rcx
  0x00007f757048db58: mov    0x78(%rsp),%rax
  0x00007f757048db5d: add    $0x80,%rsp
  0x00007f757048db64: add    $0x8,%rsp
  0x00007f757048db68: popfq  
  0x00007f757048db69: mov    %r13,%rsp
  0x00007f757048db6c: pop    %rax
  0x00007f757048db6d: mov    %rsp,%r13
  0x00007f757048db70: sub    $0x30,%rsp
  0x00007f757048db74: mov    %rax,(%rsp)
  0x00007f757048db78: mov    %rsi,0x20(%rsp)
  0x00007f757048db7d: mov    %rdx,0x18(%rsp)
  0x00007f757048db82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048db8c: mov    %rax,0x10(%rsp)
  0x00007f757048db91: mov    %rcx,0x8(%rsp)
  0x00007f757048db96: mov    0x40(%rbx),%rcx
  0x00007f757048db9a: jmpq   *%rcx

AHE@0x00007f75800d4a88: 0xbbbea000 i2c: 0x00007f757048dc60 c2i: 0x00007f757048dd80 c2iUV: 0x00007f757048dd53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JB)V (581 bytes generated)
c2i argument handler starts at 0x7f757048dd80
  0x00007f757048dc60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048dc64: movabs $0x7f757036e3e0,%r11
  0x00007f757048dc6e: cmp    %r11,%rax
  0x00007f757048dc71: jbe    0x00007f757048dc8a
  0x00007f757048dc77: movabs $0x7f757046e3e0,%r11
  0x00007f757048dc81: cmp    %r11,%rax
  0x00007f757048dc84: jb     0x00007f757048dd27
  0x00007f757048dc8a: movabs $0x7f7570369420,%r11
  0x00007f757048dc94: cmp    %r11,%rax
  0x00007f757048dc97: jbe    0x00007f757048dcb0
  0x00007f757048dc9d: movabs $0x7f757036de58,%r11
  0x00007f757048dca7: cmp    %r11,%rax
  0x00007f757048dcaa: jb     0x00007f757048dd27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048dcb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048dcb5: sub    $0x80,%rsp
  0x00007f757048dcbc: mov    %rax,0x78(%rsp)
  0x00007f757048dcc1: mov    %rcx,0x70(%rsp)
  0x00007f757048dcc6: mov    %rdx,0x68(%rsp)
  0x00007f757048dccb: mov    %rbx,0x60(%rsp)
  0x00007f757048dcd0: mov    %rbp,0x50(%rsp)
  0x00007f757048dcd5: mov    %rsi,0x48(%rsp)
  0x00007f757048dcda: mov    %rdi,0x40(%rsp)
  0x00007f757048dcdf: mov    %r8,0x38(%rsp)
  0x00007f757048dce4: mov    %r9,0x30(%rsp)
  0x00007f757048dce9: mov    %r10,0x28(%rsp)
  0x00007f757048dcee: mov    %r11,0x20(%rsp)
  0x00007f757048dcf3: mov    %r12,0x18(%rsp)
  0x00007f757048dcf8: mov    %r13,0x10(%rsp)
  0x00007f757048dcfd: mov    %r14,0x8(%rsp)
  0x00007f757048dd02: mov    %r15,(%rsp)
  0x00007f757048dd06: movabs $0x7f758592f470,%rdi
  0x00007f757048dd10: movabs $0x7f757048dcb0,%rsi
  0x00007f757048dd1a: mov    %rsp,%rdx
  0x00007f757048dd1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048dd21: callq  0x00007f75853729fa
  0x00007f757048dd26: hlt    
  ;; } verify_i2ce 
  0x00007f757048dd27: mov    %rsp,%r11
  0x00007f757048dd2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048dd2e: push   %rax
  0x00007f757048dd2f: mov    %r11,%rax
  0x00007f757048dd32: mov    0x50(%rbx),%r11
  0x00007f757048dd36: mov    0x28(%rax),%rsi
  0x00007f757048dd3a: mov    0x20(%rax),%rdx
  0x00007f757048dd3e: mov    0x10(%rax),%rcx
  0x00007f757048dd42: mov    0x8(%rax),%r8d
  0x00007f757048dd46: mov    %rbx,0x258(%r15)
  0x00007f757048dd4d: mov    %rbx,%rax
  0x00007f757048dd50: jmpq   *%r11
  0x00007f757048dd53: mov    0x8(%rsi),%ebx
  0x00007f757048dd56: shl    $0x3,%rbx
  0x00007f757048dd5a: cmp    0x10(%rax),%rbx
  0x00007f757048dd5e: mov    0x8(%rax),%rbx
  0x00007f757048dd62: je     0x00007f757048dd6d
  0x00007f757048dd68: jmpq   0x00007f757046ec40
  0x00007f757048dd6d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048dd75: je     0x00007f757048de70
  0x00007f757048dd7b: jmpq   0x00007f757046ec40
  0x00007f757048dd80: cmpq   $0x0,0x58(%rbx)
  0x00007f757048dd88: je     0x00007f757048de70
  0x00007f757048dd8e: mov    %rsp,%r13
  0x00007f757048dd91: mov    (%rsp),%rax
  0x00007f757048dd95: and    $0xfffffffffffffff0,%rsp
  0x00007f757048dd99: pushfq 
  0x00007f757048dd9a: sub    $0x8,%rsp
  0x00007f757048dd9e: mov    %rsp,-0x28(%rsp)
  0x00007f757048dda3: sub    $0x80,%rsp
  0x00007f757048ddaa: mov    %rax,0x78(%rsp)
  0x00007f757048ddaf: mov    %rcx,0x70(%rsp)
  0x00007f757048ddb4: mov    %rdx,0x68(%rsp)
  0x00007f757048ddb9: mov    %rbx,0x60(%rsp)
  0x00007f757048ddbe: mov    %rbp,0x50(%rsp)
  0x00007f757048ddc3: mov    %rsi,0x48(%rsp)
  0x00007f757048ddc8: mov    %rdi,0x40(%rsp)
  0x00007f757048ddcd: mov    %r8,0x38(%rsp)
  0x00007f757048ddd2: mov    %r9,0x30(%rsp)
  0x00007f757048ddd7: mov    %r10,0x28(%rsp)
  0x00007f757048dddc: mov    %r11,0x20(%rsp)
  0x00007f757048dde1: mov    %r12,0x18(%rsp)
  0x00007f757048dde6: mov    %r13,0x10(%rsp)
  0x00007f757048ddeb: mov    %r14,0x8(%rsp)
  0x00007f757048ddf0: mov    %r15,(%rsp)
  0x00007f757048ddf4: sub    $0x200,%rsp
  0x00007f757048ddfb: fxsave64 (%rsp)
  0x00007f757048de00: mov    %rbx,%rdi
  0x00007f757048de03: mov    %rax,%rsi
  0x00007f757048de06: callq  0x00007f7585522bca
  0x00007f757048de0b: fxrstor64 (%rsp)
  0x00007f757048de10: add    $0x200,%rsp
  0x00007f757048de17: mov    (%rsp),%r15
  0x00007f757048de1b: mov    0x8(%rsp),%r14
  0x00007f757048de20: mov    0x10(%rsp),%r13
  0x00007f757048de25: mov    0x18(%rsp),%r12
  0x00007f757048de2a: mov    0x20(%rsp),%r11
  0x00007f757048de2f: mov    0x28(%rsp),%r10
  0x00007f757048de34: mov    0x30(%rsp),%r9
  0x00007f757048de39: mov    0x38(%rsp),%r8
  0x00007f757048de3e: mov    0x40(%rsp),%rdi
  0x00007f757048de43: mov    0x48(%rsp),%rsi
  0x00007f757048de48: mov    0x50(%rsp),%rbp
  0x00007f757048de4d: mov    0x60(%rsp),%rbx
  0x00007f757048de52: mov    0x68(%rsp),%rdx
  0x00007f757048de57: mov    0x70(%rsp),%rcx
  0x00007f757048de5c: mov    0x78(%rsp),%rax
  0x00007f757048de61: add    $0x80,%rsp
  0x00007f757048de68: add    $0x8,%rsp
  0x00007f757048de6c: popfq  
  0x00007f757048de6d: mov    %r13,%rsp
  0x00007f757048de70: pop    %rax
  0x00007f757048de71: mov    %rsp,%r13
  0x00007f757048de74: sub    $0x30,%rsp
  0x00007f757048de78: mov    %rax,(%rsp)
  0x00007f757048de7c: mov    %rsi,0x28(%rsp)
  0x00007f757048de81: mov    %rdx,0x20(%rsp)
  0x00007f757048de86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048de90: mov    %rax,0x18(%rsp)
  0x00007f757048de95: mov    %rcx,0x10(%rsp)
  0x00007f757048de9a: mov    %r8d,0x8(%rsp)
  0x00007f757048de9f: mov    0x40(%rbx),%rcx
  0x00007f757048dea3: jmpq   *%rcx

AHE@0x00007f75800d4ad0: 0xbbbe0000 i2c: 0x00007f757048df60 c2i: 0x00007f757048e07c c2iUV: 0x00007f757048e04f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)B (572 bytes generated)
c2i argument handler starts at 0x7f757048e07c
  0x00007f757048df60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048df64: movabs $0x7f757036e3e0,%r11
  0x00007f757048df6e: cmp    %r11,%rax
  0x00007f757048df71: jbe    0x00007f757048df8a
  0x00007f757048df77: movabs $0x7f757046e3e0,%r11
  0x00007f757048df81: cmp    %r11,%rax
  0x00007f757048df84: jb     0x00007f757048e027
  0x00007f757048df8a: movabs $0x7f7570369420,%r11
  0x00007f757048df94: cmp    %r11,%rax
  0x00007f757048df97: jbe    0x00007f757048dfb0
  0x00007f757048df9d: movabs $0x7f757036de58,%r11
  0x00007f757048dfa7: cmp    %r11,%rax
  0x00007f757048dfaa: jb     0x00007f757048e027
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048dfb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048dfb5: sub    $0x80,%rsp
  0x00007f757048dfbc: mov    %rax,0x78(%rsp)
  0x00007f757048dfc1: mov    %rcx,0x70(%rsp)
  0x00007f757048dfc6: mov    %rdx,0x68(%rsp)
  0x00007f757048dfcb: mov    %rbx,0x60(%rsp)
  0x00007f757048dfd0: mov    %rbp,0x50(%rsp)
  0x00007f757048dfd5: mov    %rsi,0x48(%rsp)
  0x00007f757048dfda: mov    %rdi,0x40(%rsp)
  0x00007f757048dfdf: mov    %r8,0x38(%rsp)
  0x00007f757048dfe4: mov    %r9,0x30(%rsp)
  0x00007f757048dfe9: mov    %r10,0x28(%rsp)
  0x00007f757048dfee: mov    %r11,0x20(%rsp)
  0x00007f757048dff3: mov    %r12,0x18(%rsp)
  0x00007f757048dff8: mov    %r13,0x10(%rsp)
  0x00007f757048dffd: mov    %r14,0x8(%rsp)
  0x00007f757048e002: mov    %r15,(%rsp)
  0x00007f757048e006: movabs $0x7f758592f470,%rdi
  0x00007f757048e010: movabs $0x7f757048dfb0,%rsi
  0x00007f757048e01a: mov    %rsp,%rdx
  0x00007f757048e01d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e021: callq  0x00007f75853729fa
  0x00007f757048e026: hlt    
  ;; } verify_i2ce 
  0x00007f757048e027: mov    %rsp,%r11
  0x00007f757048e02a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e02e: push   %rax
  0x00007f757048e02f: mov    %r11,%rax
  0x00007f757048e032: mov    0x50(%rbx),%r11
  0x00007f757048e036: mov    0x20(%rax),%rsi
  0x00007f757048e03a: mov    0x18(%rax),%rdx
  0x00007f757048e03e: mov    0x8(%rax),%rcx
  0x00007f757048e042: mov    %rbx,0x258(%r15)
  0x00007f757048e049: mov    %rbx,%rax
  0x00007f757048e04c: jmpq   *%r11
  0x00007f757048e04f: mov    0x8(%rsi),%ebx
  0x00007f757048e052: shl    $0x3,%rbx
  0x00007f757048e056: cmp    0x10(%rax),%rbx
  0x00007f757048e05a: mov    0x8(%rax),%rbx
  0x00007f757048e05e: je     0x00007f757048e069
  0x00007f757048e064: jmpq   0x00007f757046ec40
  0x00007f757048e069: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e071: je     0x00007f757048e16c
  0x00007f757048e077: jmpq   0x00007f757046ec40
  0x00007f757048e07c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e084: je     0x00007f757048e16c
  0x00007f757048e08a: mov    %rsp,%r13
  0x00007f757048e08d: mov    (%rsp),%rax
  0x00007f757048e091: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e095: pushfq 
  0x00007f757048e096: sub    $0x8,%rsp
  0x00007f757048e09a: mov    %rsp,-0x28(%rsp)
  0x00007f757048e09f: sub    $0x80,%rsp
  0x00007f757048e0a6: mov    %rax,0x78(%rsp)
  0x00007f757048e0ab: mov    %rcx,0x70(%rsp)
  0x00007f757048e0b0: mov    %rdx,0x68(%rsp)
  0x00007f757048e0b5: mov    %rbx,0x60(%rsp)
  0x00007f757048e0ba: mov    %rbp,0x50(%rsp)
  0x00007f757048e0bf: mov    %rsi,0x48(%rsp)
  0x00007f757048e0c4: mov    %rdi,0x40(%rsp)
  0x00007f757048e0c9: mov    %r8,0x38(%rsp)
  0x00007f757048e0ce: mov    %r9,0x30(%rsp)
  0x00007f757048e0d3: mov    %r10,0x28(%rsp)
  0x00007f757048e0d8: mov    %r11,0x20(%rsp)
  0x00007f757048e0dd: mov    %r12,0x18(%rsp)
  0x00007f757048e0e2: mov    %r13,0x10(%rsp)
  0x00007f757048e0e7: mov    %r14,0x8(%rsp)
  0x00007f757048e0ec: mov    %r15,(%rsp)
  0x00007f757048e0f0: sub    $0x200,%rsp
  0x00007f757048e0f7: fxsave64 (%rsp)
  0x00007f757048e0fc: mov    %rbx,%rdi
  0x00007f757048e0ff: mov    %rax,%rsi
  0x00007f757048e102: callq  0x00007f7585522bca
  0x00007f757048e107: fxrstor64 (%rsp)
  0x00007f757048e10c: add    $0x200,%rsp
  0x00007f757048e113: mov    (%rsp),%r15
  0x00007f757048e117: mov    0x8(%rsp),%r14
  0x00007f757048e11c: mov    0x10(%rsp),%r13
  0x00007f757048e121: mov    0x18(%rsp),%r12
  0x00007f757048e126: mov    0x20(%rsp),%r11
  0x00007f757048e12b: mov    0x28(%rsp),%r10
  0x00007f757048e130: mov    0x30(%rsp),%r9
  0x00007f757048e135: mov    0x38(%rsp),%r8
  0x00007f757048e13a: mov    0x40(%rsp),%rdi
  0x00007f757048e13f: mov    0x48(%rsp),%rsi
  0x00007f757048e144: mov    0x50(%rsp),%rbp
  0x00007f757048e149: mov    0x60(%rsp),%rbx
  0x00007f757048e14e: mov    0x68(%rsp),%rdx
  0x00007f757048e153: mov    0x70(%rsp),%rcx
  0x00007f757048e158: mov    0x78(%rsp),%rax
  0x00007f757048e15d: add    $0x80,%rsp
  0x00007f757048e164: add    $0x8,%rsp
  0x00007f757048e168: popfq  
  0x00007f757048e169: mov    %r13,%rsp
  0x00007f757048e16c: pop    %rax
  0x00007f757048e16d: mov    %rsp,%r13
  0x00007f757048e170: sub    $0x30,%rsp
  0x00007f757048e174: mov    %rax,(%rsp)
  0x00007f757048e178: mov    %rsi,0x20(%rsp)
  0x00007f757048e17d: mov    %rdx,0x18(%rsp)
  0x00007f757048e182: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048e18c: mov    %rax,0x10(%rsp)
  0x00007f757048e191: mov    %rcx,0x8(%rsp)
  0x00007f757048e196: mov    0x40(%rbx),%rcx
  0x00007f757048e19a: jmpq   *%rcx

AHE@0x00007f75800d4b18: 0xbbbea000 i2c: 0x00007f757048e260 c2i: 0x00007f757048e380 c2iUV: 0x00007f757048e353
i2c argument handler #0 for: receiver (Ljava/lang/Object;JZ)V (581 bytes generated)
c2i argument handler starts at 0x7f757048e380
  0x00007f757048e260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048e264: movabs $0x7f757036e3e0,%r11
  0x00007f757048e26e: cmp    %r11,%rax
  0x00007f757048e271: jbe    0x00007f757048e28a
  0x00007f757048e277: movabs $0x7f757046e3e0,%r11
  0x00007f757048e281: cmp    %r11,%rax
  0x00007f757048e284: jb     0x00007f757048e327
  0x00007f757048e28a: movabs $0x7f7570369420,%r11
  0x00007f757048e294: cmp    %r11,%rax
  0x00007f757048e297: jbe    0x00007f757048e2b0
  0x00007f757048e29d: movabs $0x7f757036de58,%r11
  0x00007f757048e2a7: cmp    %r11,%rax
  0x00007f757048e2aa: jb     0x00007f757048e327
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048e2b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048e2b5: sub    $0x80,%rsp
  0x00007f757048e2bc: mov    %rax,0x78(%rsp)
  0x00007f757048e2c1: mov    %rcx,0x70(%rsp)
  0x00007f757048e2c6: mov    %rdx,0x68(%rsp)
  0x00007f757048e2cb: mov    %rbx,0x60(%rsp)
  0x00007f757048e2d0: mov    %rbp,0x50(%rsp)
  0x00007f757048e2d5: mov    %rsi,0x48(%rsp)
  0x00007f757048e2da: mov    %rdi,0x40(%rsp)
  0x00007f757048e2df: mov    %r8,0x38(%rsp)
  0x00007f757048e2e4: mov    %r9,0x30(%rsp)
  0x00007f757048e2e9: mov    %r10,0x28(%rsp)
  0x00007f757048e2ee: mov    %r11,0x20(%rsp)
  0x00007f757048e2f3: mov    %r12,0x18(%rsp)
  0x00007f757048e2f8: mov    %r13,0x10(%rsp)
  0x00007f757048e2fd: mov    %r14,0x8(%rsp)
  0x00007f757048e302: mov    %r15,(%rsp)
  0x00007f757048e306: movabs $0x7f758592f470,%rdi
  0x00007f757048e310: movabs $0x7f757048e2b0,%rsi
  0x00007f757048e31a: mov    %rsp,%rdx
  0x00007f757048e31d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e321: callq  0x00007f75853729fa
  0x00007f757048e326: hlt    
  ;; } verify_i2ce 
  0x00007f757048e327: mov    %rsp,%r11
  0x00007f757048e32a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e32e: push   %rax
  0x00007f757048e32f: mov    %r11,%rax
  0x00007f757048e332: mov    0x50(%rbx),%r11
  0x00007f757048e336: mov    0x28(%rax),%rsi
  0x00007f757048e33a: mov    0x20(%rax),%rdx
  0x00007f757048e33e: mov    0x10(%rax),%rcx
  0x00007f757048e342: mov    0x8(%rax),%r8d
  0x00007f757048e346: mov    %rbx,0x258(%r15)
  0x00007f757048e34d: mov    %rbx,%rax
  0x00007f757048e350: jmpq   *%r11
  0x00007f757048e353: mov    0x8(%rsi),%ebx
  0x00007f757048e356: shl    $0x3,%rbx
  0x00007f757048e35a: cmp    0x10(%rax),%rbx
  0x00007f757048e35e: mov    0x8(%rax),%rbx
  0x00007f757048e362: je     0x00007f757048e36d
  0x00007f757048e368: jmpq   0x00007f757046ec40
  0x00007f757048e36d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e375: je     0x00007f757048e470
  0x00007f757048e37b: jmpq   0x00007f757046ec40
  0x00007f757048e380: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e388: je     0x00007f757048e470
  0x00007f757048e38e: mov    %rsp,%r13
  0x00007f757048e391: mov    (%rsp),%rax
  0x00007f757048e395: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e399: pushfq 
  0x00007f757048e39a: sub    $0x8,%rsp
  0x00007f757048e39e: mov    %rsp,-0x28(%rsp)
  0x00007f757048e3a3: sub    $0x80,%rsp
  0x00007f757048e3aa: mov    %rax,0x78(%rsp)
  0x00007f757048e3af: mov    %rcx,0x70(%rsp)
  0x00007f757048e3b4: mov    %rdx,0x68(%rsp)
  0x00007f757048e3b9: mov    %rbx,0x60(%rsp)
  0x00007f757048e3be: mov    %rbp,0x50(%rsp)
  0x00007f757048e3c3: mov    %rsi,0x48(%rsp)
  0x00007f757048e3c8: mov    %rdi,0x40(%rsp)
  0x00007f757048e3cd: mov    %r8,0x38(%rsp)
  0x00007f757048e3d2: mov    %r9,0x30(%rsp)
  0x00007f757048e3d7: mov    %r10,0x28(%rsp)
  0x00007f757048e3dc: mov    %r11,0x20(%rsp)
  0x00007f757048e3e1: mov    %r12,0x18(%rsp)
  0x00007f757048e3e6: mov    %r13,0x10(%rsp)
  0x00007f757048e3eb: mov    %r14,0x8(%rsp)
  0x00007f757048e3f0: mov    %r15,(%rsp)
  0x00007f757048e3f4: sub    $0x200,%rsp
  0x00007f757048e3fb: fxsave64 (%rsp)
  0x00007f757048e400: mov    %rbx,%rdi
  0x00007f757048e403: mov    %rax,%rsi
  0x00007f757048e406: callq  0x00007f7585522bca
  0x00007f757048e40b: fxrstor64 (%rsp)
  0x00007f757048e410: add    $0x200,%rsp
  0x00007f757048e417: mov    (%rsp),%r15
  0x00007f757048e41b: mov    0x8(%rsp),%r14
  0x00007f757048e420: mov    0x10(%rsp),%r13
  0x00007f757048e425: mov    0x18(%rsp),%r12
  0x00007f757048e42a: mov    0x20(%rsp),%r11
  0x00007f757048e42f: mov    0x28(%rsp),%r10
  0x00007f757048e434: mov    0x30(%rsp),%r9
  0x00007f757048e439: mov    0x38(%rsp),%r8
  0x00007f757048e43e: mov    0x40(%rsp),%rdi
  0x00007f757048e443: mov    0x48(%rsp),%rsi
  0x00007f757048e448: mov    0x50(%rsp),%rbp
  0x00007f757048e44d: mov    0x60(%rsp),%rbx
  0x00007f757048e452: mov    0x68(%rsp),%rdx
  0x00007f757048e457: mov    0x70(%rsp),%rcx
  0x00007f757048e45c: mov    0x78(%rsp),%rax
  0x00007f757048e461: add    $0x80,%rsp
  0x00007f757048e468: add    $0x8,%rsp
  0x00007f757048e46c: popfq  
  0x00007f757048e46d: mov    %r13,%rsp
  0x00007f757048e470: pop    %rax
  0x00007f757048e471: mov    %rsp,%r13
  0x00007f757048e474: sub    $0x30,%rsp
  0x00007f757048e478: mov    %rax,(%rsp)
  0x00007f757048e47c: mov    %rsi,0x28(%rsp)
  0x00007f757048e481: mov    %rdx,0x20(%rsp)
  0x00007f757048e486: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048e490: mov    %rax,0x18(%rsp)
  0x00007f757048e495: mov    %rcx,0x10(%rsp)
  0x00007f757048e49a: mov    %r8d,0x8(%rsp)
  0x00007f757048e49f: mov    0x40(%rbx),%rcx
  0x00007f757048e4a3: jmpq   *%rcx

AHE@0x00007f75800d4b60: 0xbbbe0000 i2c: 0x00007f757048e560 c2i: 0x00007f757048e67c c2iUV: 0x00007f757048e64f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Z (572 bytes generated)
c2i argument handler starts at 0x7f757048e67c
  0x00007f757048e560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048e564: movabs $0x7f757036e3e0,%r11
  0x00007f757048e56e: cmp    %r11,%rax
  0x00007f757048e571: jbe    0x00007f757048e58a
  0x00007f757048e577: movabs $0x7f757046e3e0,%r11
  0x00007f757048e581: cmp    %r11,%rax
  0x00007f757048e584: jb     0x00007f757048e627
  0x00007f757048e58a: movabs $0x7f7570369420,%r11
  0x00007f757048e594: cmp    %r11,%rax
  0x00007f757048e597: jbe    0x00007f757048e5b0
  0x00007f757048e59d: movabs $0x7f757036de58,%r11
  0x00007f757048e5a7: cmp    %r11,%rax
  0x00007f757048e5aa: jb     0x00007f757048e627
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048e5b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048e5b5: sub    $0x80,%rsp
  0x00007f757048e5bc: mov    %rax,0x78(%rsp)
  0x00007f757048e5c1: mov    %rcx,0x70(%rsp)
  0x00007f757048e5c6: mov    %rdx,0x68(%rsp)
  0x00007f757048e5cb: mov    %rbx,0x60(%rsp)
  0x00007f757048e5d0: mov    %rbp,0x50(%rsp)
  0x00007f757048e5d5: mov    %rsi,0x48(%rsp)
  0x00007f757048e5da: mov    %rdi,0x40(%rsp)
  0x00007f757048e5df: mov    %r8,0x38(%rsp)
  0x00007f757048e5e4: mov    %r9,0x30(%rsp)
  0x00007f757048e5e9: mov    %r10,0x28(%rsp)
  0x00007f757048e5ee: mov    %r11,0x20(%rsp)
  0x00007f757048e5f3: mov    %r12,0x18(%rsp)
  0x00007f757048e5f8: mov    %r13,0x10(%rsp)
  0x00007f757048e5fd: mov    %r14,0x8(%rsp)
  0x00007f757048e602: mov    %r15,(%rsp)
  0x00007f757048e606: movabs $0x7f758592f470,%rdi
  0x00007f757048e610: movabs $0x7f757048e5b0,%rsi
  0x00007f757048e61a: mov    %rsp,%rdx
  0x00007f757048e61d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e621: callq  0x00007f75853729fa
  0x00007f757048e626: hlt    
  ;; } verify_i2ce 
  0x00007f757048e627: mov    %rsp,%r11
  0x00007f757048e62a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e62e: push   %rax
  0x00007f757048e62f: mov    %r11,%rax
  0x00007f757048e632: mov    0x50(%rbx),%r11
  0x00007f757048e636: mov    0x20(%rax),%rsi
  0x00007f757048e63a: mov    0x18(%rax),%rdx
  0x00007f757048e63e: mov    0x8(%rax),%rcx
  0x00007f757048e642: mov    %rbx,0x258(%r15)
  0x00007f757048e649: mov    %rbx,%rax
  0x00007f757048e64c: jmpq   *%r11
  0x00007f757048e64f: mov    0x8(%rsi),%ebx
  0x00007f757048e652: shl    $0x3,%rbx
  0x00007f757048e656: cmp    0x10(%rax),%rbx
  0x00007f757048e65a: mov    0x8(%rax),%rbx
  0x00007f757048e65e: je     0x00007f757048e669
  0x00007f757048e664: jmpq   0x00007f757046ec40
  0x00007f757048e669: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e671: je     0x00007f757048e76c
  0x00007f757048e677: jmpq   0x00007f757046ec40
  0x00007f757048e67c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e684: je     0x00007f757048e76c
  0x00007f757048e68a: mov    %rsp,%r13
  0x00007f757048e68d: mov    (%rsp),%rax
  0x00007f757048e691: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e695: pushfq 
  0x00007f757048e696: sub    $0x8,%rsp
  0x00007f757048e69a: mov    %rsp,-0x28(%rsp)
  0x00007f757048e69f: sub    $0x80,%rsp
  0x00007f757048e6a6: mov    %rax,0x78(%rsp)
  0x00007f757048e6ab: mov    %rcx,0x70(%rsp)
  0x00007f757048e6b0: mov    %rdx,0x68(%rsp)
  0x00007f757048e6b5: mov    %rbx,0x60(%rsp)
  0x00007f757048e6ba: mov    %rbp,0x50(%rsp)
  0x00007f757048e6bf: mov    %rsi,0x48(%rsp)
  0x00007f757048e6c4: mov    %rdi,0x40(%rsp)
  0x00007f757048e6c9: mov    %r8,0x38(%rsp)
  0x00007f757048e6ce: mov    %r9,0x30(%rsp)
  0x00007f757048e6d3: mov    %r10,0x28(%rsp)
  0x00007f757048e6d8: mov    %r11,0x20(%rsp)
  0x00007f757048e6dd: mov    %r12,0x18(%rsp)
  0x00007f757048e6e2: mov    %r13,0x10(%rsp)
  0x00007f757048e6e7: mov    %r14,0x8(%rsp)
  0x00007f757048e6ec: mov    %r15,(%rsp)
  0x00007f757048e6f0: sub    $0x200,%rsp
  0x00007f757048e6f7: fxsave64 (%rsp)
  0x00007f757048e6fc: mov    %rbx,%rdi
  0x00007f757048e6ff: mov    %rax,%rsi
  0x00007f757048e702: callq  0x00007f7585522bca
  0x00007f757048e707: fxrstor64 (%rsp)
  0x00007f757048e70c: add    $0x200,%rsp
  0x00007f757048e713: mov    (%rsp),%r15
  0x00007f757048e717: mov    0x8(%rsp),%r14
  0x00007f757048e71c: mov    0x10(%rsp),%r13
  0x00007f757048e721: mov    0x18(%rsp),%r12
  0x00007f757048e726: mov    0x20(%rsp),%r11
  0x00007f757048e72b: mov    0x28(%rsp),%r10
  0x00007f757048e730: mov    0x30(%rsp),%r9
  0x00007f757048e735: mov    0x38(%rsp),%r8
  0x00007f757048e73a: mov    0x40(%rsp),%rdi
  0x00007f757048e73f: mov    0x48(%rsp),%rsi
  0x00007f757048e744: mov    0x50(%rsp),%rbp
  0x00007f757048e749: mov    0x60(%rsp),%rbx
  0x00007f757048e74e: mov    0x68(%rsp),%rdx
  0x00007f757048e753: mov    0x70(%rsp),%rcx
  0x00007f757048e758: mov    0x78(%rsp),%rax
  0x00007f757048e75d: add    $0x80,%rsp
  0x00007f757048e764: add    $0x8,%rsp
  0x00007f757048e768: popfq  
  0x00007f757048e769: mov    %r13,%rsp
  0x00007f757048e76c: pop    %rax
  0x00007f757048e76d: mov    %rsp,%r13
  0x00007f757048e770: sub    $0x30,%rsp
  0x00007f757048e774: mov    %rax,(%rsp)
  0x00007f757048e778: mov    %rsi,0x20(%rsp)
  0x00007f757048e77d: mov    %rdx,0x18(%rsp)
  0x00007f757048e782: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048e78c: mov    %rax,0x10(%rsp)
  0x00007f757048e791: mov    %rcx,0x8(%rsp)
  0x00007f757048e796: mov    0x40(%rbx),%rcx
  0x00007f757048e79a: jmpq   *%rcx

AHE@0x00007f75800d4ba8: 0xbbbeb000 i2c: 0x00007f757048e860 c2i: 0x00007f757048e980 c2iUV: 0x00007f757048e953
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (581 bytes generated)
c2i argument handler starts at 0x7f757048e980
  0x00007f757048e860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048e864: movabs $0x7f757036e3e0,%r11
  0x00007f757048e86e: cmp    %r11,%rax
  0x00007f757048e871: jbe    0x00007f757048e88a
  0x00007f757048e877: movabs $0x7f757046e3e0,%r11
  0x00007f757048e881: cmp    %r11,%rax
  0x00007f757048e884: jb     0x00007f757048e927
  0x00007f757048e88a: movabs $0x7f7570369420,%r11
  0x00007f757048e894: cmp    %r11,%rax
  0x00007f757048e897: jbe    0x00007f757048e8b0
  0x00007f757048e89d: movabs $0x7f757036de58,%r11
  0x00007f757048e8a7: cmp    %r11,%rax
  0x00007f757048e8aa: jb     0x00007f757048e927
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048e8b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048e8b5: sub    $0x80,%rsp
  0x00007f757048e8bc: mov    %rax,0x78(%rsp)
  0x00007f757048e8c1: mov    %rcx,0x70(%rsp)
  0x00007f757048e8c6: mov    %rdx,0x68(%rsp)
  0x00007f757048e8cb: mov    %rbx,0x60(%rsp)
  0x00007f757048e8d0: mov    %rbp,0x50(%rsp)
  0x00007f757048e8d5: mov    %rsi,0x48(%rsp)
  0x00007f757048e8da: mov    %rdi,0x40(%rsp)
  0x00007f757048e8df: mov    %r8,0x38(%rsp)
  0x00007f757048e8e4: mov    %r9,0x30(%rsp)
  0x00007f757048e8e9: mov    %r10,0x28(%rsp)
  0x00007f757048e8ee: mov    %r11,0x20(%rsp)
  0x00007f757048e8f3: mov    %r12,0x18(%rsp)
  0x00007f757048e8f8: mov    %r13,0x10(%rsp)
  0x00007f757048e8fd: mov    %r14,0x8(%rsp)
  0x00007f757048e902: mov    %r15,(%rsp)
  0x00007f757048e906: movabs $0x7f758592f470,%rdi
  0x00007f757048e910: movabs $0x7f757048e8b0,%rsi
  0x00007f757048e91a: mov    %rsp,%rdx
  0x00007f757048e91d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e921: callq  0x00007f75853729fa
  0x00007f757048e926: hlt    
  ;; } verify_i2ce 
  0x00007f757048e927: mov    %rsp,%r11
  0x00007f757048e92a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e92e: push   %rax
  0x00007f757048e92f: mov    %r11,%rax
  0x00007f757048e932: mov    0x50(%rbx),%r11
  0x00007f757048e936: mov    0x28(%rax),%rsi
  0x00007f757048e93a: mov    0x20(%rax),%rdx
  0x00007f757048e93e: mov    0x10(%rax),%rcx
  0x00007f757048e942: mov    0x8(%rax),%r8
  0x00007f757048e946: mov    %rbx,0x258(%r15)
  0x00007f757048e94d: mov    %rbx,%rax
  0x00007f757048e950: jmpq   *%r11
  0x00007f757048e953: mov    0x8(%rsi),%ebx
  0x00007f757048e956: shl    $0x3,%rbx
  0x00007f757048e95a: cmp    0x10(%rax),%rbx
  0x00007f757048e95e: mov    0x8(%rax),%rbx
  0x00007f757048e962: je     0x00007f757048e96d
  0x00007f757048e968: jmpq   0x00007f757046ec40
  0x00007f757048e96d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e975: je     0x00007f757048ea70
  0x00007f757048e97b: jmpq   0x00007f757046ec40
  0x00007f757048e980: cmpq   $0x0,0x58(%rbx)
  0x00007f757048e988: je     0x00007f757048ea70
  0x00007f757048e98e: mov    %rsp,%r13
  0x00007f757048e991: mov    (%rsp),%rax
  0x00007f757048e995: and    $0xfffffffffffffff0,%rsp
  0x00007f757048e999: pushfq 
  0x00007f757048e99a: sub    $0x8,%rsp
  0x00007f757048e99e: mov    %rsp,-0x28(%rsp)
  0x00007f757048e9a3: sub    $0x80,%rsp
  0x00007f757048e9aa: mov    %rax,0x78(%rsp)
  0x00007f757048e9af: mov    %rcx,0x70(%rsp)
  0x00007f757048e9b4: mov    %rdx,0x68(%rsp)
  0x00007f757048e9b9: mov    %rbx,0x60(%rsp)
  0x00007f757048e9be: mov    %rbp,0x50(%rsp)
  0x00007f757048e9c3: mov    %rsi,0x48(%rsp)
  0x00007f757048e9c8: mov    %rdi,0x40(%rsp)
  0x00007f757048e9cd: mov    %r8,0x38(%rsp)
  0x00007f757048e9d2: mov    %r9,0x30(%rsp)
  0x00007f757048e9d7: mov    %r10,0x28(%rsp)
  0x00007f757048e9dc: mov    %r11,0x20(%rsp)
  0x00007f757048e9e1: mov    %r12,0x18(%rsp)
  0x00007f757048e9e6: mov    %r13,0x10(%rsp)
  0x00007f757048e9eb: mov    %r14,0x8(%rsp)
  0x00007f757048e9f0: mov    %r15,(%rsp)
  0x00007f757048e9f4: sub    $0x200,%rsp
  0x00007f757048e9fb: fxsave64 (%rsp)
  0x00007f757048ea00: mov    %rbx,%rdi
  0x00007f757048ea03: mov    %rax,%rsi
  0x00007f757048ea06: callq  0x00007f7585522bca
  0x00007f757048ea0b: fxrstor64 (%rsp)
  0x00007f757048ea10: add    $0x200,%rsp
  0x00007f757048ea17: mov    (%rsp),%r15
  0x00007f757048ea1b: mov    0x8(%rsp),%r14
  0x00007f757048ea20: mov    0x10(%rsp),%r13
  0x00007f757048ea25: mov    0x18(%rsp),%r12
  0x00007f757048ea2a: mov    0x20(%rsp),%r11
  0x00007f757048ea2f: mov    0x28(%rsp),%r10
  0x00007f757048ea34: mov    0x30(%rsp),%r9
  0x00007f757048ea39: mov    0x38(%rsp),%r8
  0x00007f757048ea3e: mov    0x40(%rsp),%rdi
  0x00007f757048ea43: mov    0x48(%rsp),%rsi
  0x00007f757048ea48: mov    0x50(%rsp),%rbp
  0x00007f757048ea4d: mov    0x60(%rsp),%rbx
  0x00007f757048ea52: mov    0x68(%rsp),%rdx
  0x00007f757048ea57: mov    0x70(%rsp),%rcx
  0x00007f757048ea5c: mov    0x78(%rsp),%rax
  0x00007f757048ea61: add    $0x80,%rsp
  0x00007f757048ea68: add    $0x8,%rsp
  0x00007f757048ea6c: popfq  
  0x00007f757048ea6d: mov    %r13,%rsp
  0x00007f757048ea70: pop    %rax
  0x00007f757048ea71: mov    %rsp,%r13
  0x00007f757048ea74: sub    $0x30,%rsp
  0x00007f757048ea78: mov    %rax,(%rsp)
  0x00007f757048ea7c: mov    %rsi,0x28(%rsp)
  0x00007f757048ea81: mov    %rdx,0x20(%rsp)
  0x00007f757048ea86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ea90: mov    %rax,0x18(%rsp)
  0x00007f757048ea95: mov    %rcx,0x10(%rsp)
  0x00007f757048ea9a: mov    %r8,0x8(%rsp)
  0x00007f757048ea9f: mov    0x40(%rbx),%rcx
  0x00007f757048eaa3: jmpq   *%rcx

AHE@0x00007f75800d4bf0: 0xbbbe0000 i2c: 0x00007f757048eb60 c2i: 0x00007f757048ec7c c2iUV: 0x00007f757048ec4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Ljava/lang/Object; (572 bytes generated)
c2i argument handler starts at 0x7f757048ec7c
  0x00007f757048eb60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048eb64: movabs $0x7f757036e3e0,%r11
  0x00007f757048eb6e: cmp    %r11,%rax
  0x00007f757048eb71: jbe    0x00007f757048eb8a
  0x00007f757048eb77: movabs $0x7f757046e3e0,%r11
  0x00007f757048eb81: cmp    %r11,%rax
  0x00007f757048eb84: jb     0x00007f757048ec27
  0x00007f757048eb8a: movabs $0x7f7570369420,%r11
  0x00007f757048eb94: cmp    %r11,%rax
  0x00007f757048eb97: jbe    0x00007f757048ebb0
  0x00007f757048eb9d: movabs $0x7f757036de58,%r11
  0x00007f757048eba7: cmp    %r11,%rax
  0x00007f757048ebaa: jb     0x00007f757048ec27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048ebb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048ebb5: sub    $0x80,%rsp
  0x00007f757048ebbc: mov    %rax,0x78(%rsp)
  0x00007f757048ebc1: mov    %rcx,0x70(%rsp)
  0x00007f757048ebc6: mov    %rdx,0x68(%rsp)
  0x00007f757048ebcb: mov    %rbx,0x60(%rsp)
  0x00007f757048ebd0: mov    %rbp,0x50(%rsp)
  0x00007f757048ebd5: mov    %rsi,0x48(%rsp)
  0x00007f757048ebda: mov    %rdi,0x40(%rsp)
  0x00007f757048ebdf: mov    %r8,0x38(%rsp)
  0x00007f757048ebe4: mov    %r9,0x30(%rsp)
  0x00007f757048ebe9: mov    %r10,0x28(%rsp)
  0x00007f757048ebee: mov    %r11,0x20(%rsp)
  0x00007f757048ebf3: mov    %r12,0x18(%rsp)
  0x00007f757048ebf8: mov    %r13,0x10(%rsp)
  0x00007f757048ebfd: mov    %r14,0x8(%rsp)
  0x00007f757048ec02: mov    %r15,(%rsp)
  0x00007f757048ec06: movabs $0x7f758592f470,%rdi
  0x00007f757048ec10: movabs $0x7f757048ebb0,%rsi
  0x00007f757048ec1a: mov    %rsp,%rdx
  0x00007f757048ec1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ec21: callq  0x00007f75853729fa
  0x00007f757048ec26: hlt    
  ;; } verify_i2ce 
  0x00007f757048ec27: mov    %rsp,%r11
  0x00007f757048ec2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ec2e: push   %rax
  0x00007f757048ec2f: mov    %r11,%rax
  0x00007f757048ec32: mov    0x50(%rbx),%r11
  0x00007f757048ec36: mov    0x20(%rax),%rsi
  0x00007f757048ec3a: mov    0x18(%rax),%rdx
  0x00007f757048ec3e: mov    0x8(%rax),%rcx
  0x00007f757048ec42: mov    %rbx,0x258(%r15)
  0x00007f757048ec49: mov    %rbx,%rax
  0x00007f757048ec4c: jmpq   *%r11
  0x00007f757048ec4f: mov    0x8(%rsi),%ebx
  0x00007f757048ec52: shl    $0x3,%rbx
  0x00007f757048ec56: cmp    0x10(%rax),%rbx
  0x00007f757048ec5a: mov    0x8(%rax),%rbx
  0x00007f757048ec5e: je     0x00007f757048ec69
  0x00007f757048ec64: jmpq   0x00007f757046ec40
  0x00007f757048ec69: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ec71: je     0x00007f757048ed6c
  0x00007f757048ec77: jmpq   0x00007f757046ec40
  0x00007f757048ec7c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ec84: je     0x00007f757048ed6c
  0x00007f757048ec8a: mov    %rsp,%r13
  0x00007f757048ec8d: mov    (%rsp),%rax
  0x00007f757048ec91: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ec95: pushfq 
  0x00007f757048ec96: sub    $0x8,%rsp
  0x00007f757048ec9a: mov    %rsp,-0x28(%rsp)
  0x00007f757048ec9f: sub    $0x80,%rsp
  0x00007f757048eca6: mov    %rax,0x78(%rsp)
  0x00007f757048ecab: mov    %rcx,0x70(%rsp)
  0x00007f757048ecb0: mov    %rdx,0x68(%rsp)
  0x00007f757048ecb5: mov    %rbx,0x60(%rsp)
  0x00007f757048ecba: mov    %rbp,0x50(%rsp)
  0x00007f757048ecbf: mov    %rsi,0x48(%rsp)
  0x00007f757048ecc4: mov    %rdi,0x40(%rsp)
  0x00007f757048ecc9: mov    %r8,0x38(%rsp)
  0x00007f757048ecce: mov    %r9,0x30(%rsp)
  0x00007f757048ecd3: mov    %r10,0x28(%rsp)
  0x00007f757048ecd8: mov    %r11,0x20(%rsp)
  0x00007f757048ecdd: mov    %r12,0x18(%rsp)
  0x00007f757048ece2: mov    %r13,0x10(%rsp)
  0x00007f757048ece7: mov    %r14,0x8(%rsp)
  0x00007f757048ecec: mov    %r15,(%rsp)
  0x00007f757048ecf0: sub    $0x200,%rsp
  0x00007f757048ecf7: fxsave64 (%rsp)
  0x00007f757048ecfc: mov    %rbx,%rdi
  0x00007f757048ecff: mov    %rax,%rsi
  0x00007f757048ed02: callq  0x00007f7585522bca
  0x00007f757048ed07: fxrstor64 (%rsp)
  0x00007f757048ed0c: add    $0x200,%rsp
  0x00007f757048ed13: mov    (%rsp),%r15
  0x00007f757048ed17: mov    0x8(%rsp),%r14
  0x00007f757048ed1c: mov    0x10(%rsp),%r13
  0x00007f757048ed21: mov    0x18(%rsp),%r12
  0x00007f757048ed26: mov    0x20(%rsp),%r11
  0x00007f757048ed2b: mov    0x28(%rsp),%r10
  0x00007f757048ed30: mov    0x30(%rsp),%r9
  0x00007f757048ed35: mov    0x38(%rsp),%r8
  0x00007f757048ed3a: mov    0x40(%rsp),%rdi
  0x00007f757048ed3f: mov    0x48(%rsp),%rsi
  0x00007f757048ed44: mov    0x50(%rsp),%rbp
  0x00007f757048ed49: mov    0x60(%rsp),%rbx
  0x00007f757048ed4e: mov    0x68(%rsp),%rdx
  0x00007f757048ed53: mov    0x70(%rsp),%rcx
  0x00007f757048ed58: mov    0x78(%rsp),%rax
  0x00007f757048ed5d: add    $0x80,%rsp
  0x00007f757048ed64: add    $0x8,%rsp
  0x00007f757048ed68: popfq  
  0x00007f757048ed69: mov    %r13,%rsp
  0x00007f757048ed6c: pop    %rax
  0x00007f757048ed6d: mov    %rsp,%r13
  0x00007f757048ed70: sub    $0x30,%rsp
  0x00007f757048ed74: mov    %rax,(%rsp)
  0x00007f757048ed78: mov    %rsi,0x20(%rsp)
  0x00007f757048ed7d: mov    %rdx,0x18(%rsp)
  0x00007f757048ed82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ed8c: mov    %rax,0x10(%rsp)
  0x00007f757048ed91: mov    %rcx,0x8(%rsp)
  0x00007f757048ed96: mov    0x40(%rbx),%rcx
  0x00007f757048ed9a: jmpq   *%rcx

AHE@0x00007f75800d4c38: 0xbbbe7e00 i2c: 0x00007f757048ee60 c2i: 0x00007f757048ef81 c2iUV: 0x00007f757048ef54
i2c argument handler #0 for: receiver (Ljava/lang/Object;JD)V (598 bytes generated)
c2i argument handler starts at 0x7f757048ef81
  0x00007f757048ee60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048ee64: movabs $0x7f757036e3e0,%r11
  0x00007f757048ee6e: cmp    %r11,%rax
  0x00007f757048ee71: jbe    0x00007f757048ee8a
  0x00007f757048ee77: movabs $0x7f757046e3e0,%r11
  0x00007f757048ee81: cmp    %r11,%rax
  0x00007f757048ee84: jb     0x00007f757048ef27
  0x00007f757048ee8a: movabs $0x7f7570369420,%r11
  0x00007f757048ee94: cmp    %r11,%rax
  0x00007f757048ee97: jbe    0x00007f757048eeb0
  0x00007f757048ee9d: movabs $0x7f757036de58,%r11
  0x00007f757048eea7: cmp    %r11,%rax
  0x00007f757048eeaa: jb     0x00007f757048ef27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048eeb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048eeb5: sub    $0x80,%rsp
  0x00007f757048eebc: mov    %rax,0x78(%rsp)
  0x00007f757048eec1: mov    %rcx,0x70(%rsp)
  0x00007f757048eec6: mov    %rdx,0x68(%rsp)
  0x00007f757048eecb: mov    %rbx,0x60(%rsp)
  0x00007f757048eed0: mov    %rbp,0x50(%rsp)
  0x00007f757048eed5: mov    %rsi,0x48(%rsp)
  0x00007f757048eeda: mov    %rdi,0x40(%rsp)
  0x00007f757048eedf: mov    %r8,0x38(%rsp)
  0x00007f757048eee4: mov    %r9,0x30(%rsp)
  0x00007f757048eee9: mov    %r10,0x28(%rsp)
  0x00007f757048eeee: mov    %r11,0x20(%rsp)
  0x00007f757048eef3: mov    %r12,0x18(%rsp)
  0x00007f757048eef8: mov    %r13,0x10(%rsp)
  0x00007f757048eefd: mov    %r14,0x8(%rsp)
  0x00007f757048ef02: mov    %r15,(%rsp)
  0x00007f757048ef06: movabs $0x7f758592f470,%rdi
  0x00007f757048ef10: movabs $0x7f757048eeb0,%rsi
  0x00007f757048ef1a: mov    %rsp,%rdx
  0x00007f757048ef1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ef21: callq  0x00007f75853729fa
  0x00007f757048ef26: hlt    
  ;; } verify_i2ce 
  0x00007f757048ef27: mov    %rsp,%r11
  0x00007f757048ef2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ef2e: push   %rax
  0x00007f757048ef2f: mov    %r11,%rax
  0x00007f757048ef32: mov    0x50(%rbx),%r11
  0x00007f757048ef36: mov    0x30(%rax),%rsi
  0x00007f757048ef3a: mov    0x28(%rax),%rdx
  0x00007f757048ef3e: mov    0x18(%rax),%rcx
  0x00007f757048ef42: vmovsd 0x8(%rax),%xmm0
  0x00007f757048ef47: mov    %rbx,0x258(%r15)
  0x00007f757048ef4e: mov    %rbx,%rax
  0x00007f757048ef51: jmpq   *%r11
  0x00007f757048ef54: mov    0x8(%rsi),%ebx
  0x00007f757048ef57: shl    $0x3,%rbx
  0x00007f757048ef5b: cmp    0x10(%rax),%rbx
  0x00007f757048ef5f: mov    0x8(%rax),%rbx
  0x00007f757048ef63: je     0x00007f757048ef6e
  0x00007f757048ef69: jmpq   0x00007f757046ec40
  0x00007f757048ef6e: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ef76: je     0x00007f757048f071
  0x00007f757048ef7c: jmpq   0x00007f757046ec40
  0x00007f757048ef81: cmpq   $0x0,0x58(%rbx)
  0x00007f757048ef89: je     0x00007f757048f071
  0x00007f757048ef8f: mov    %rsp,%r13
  0x00007f757048ef92: mov    (%rsp),%rax
  0x00007f757048ef96: and    $0xfffffffffffffff0,%rsp
  0x00007f757048ef9a: pushfq 
  0x00007f757048ef9b: sub    $0x8,%rsp
  0x00007f757048ef9f: mov    %rsp,-0x28(%rsp)
  0x00007f757048efa4: sub    $0x80,%rsp
  0x00007f757048efab: mov    %rax,0x78(%rsp)
  0x00007f757048efb0: mov    %rcx,0x70(%rsp)
  0x00007f757048efb5: mov    %rdx,0x68(%rsp)
  0x00007f757048efba: mov    %rbx,0x60(%rsp)
  0x00007f757048efbf: mov    %rbp,0x50(%rsp)
  0x00007f757048efc4: mov    %rsi,0x48(%rsp)
  0x00007f757048efc9: mov    %rdi,0x40(%rsp)
  0x00007f757048efce: mov    %r8,0x38(%rsp)
  0x00007f757048efd3: mov    %r9,0x30(%rsp)
  0x00007f757048efd8: mov    %r10,0x28(%rsp)
  0x00007f757048efdd: mov    %r11,0x20(%rsp)
  0x00007f757048efe2: mov    %r12,0x18(%rsp)
  0x00007f757048efe7: mov    %r13,0x10(%rsp)
  0x00007f757048efec: mov    %r14,0x8(%rsp)
  0x00007f757048eff1: mov    %r15,(%rsp)
  0x00007f757048eff5: sub    $0x200,%rsp
  0x00007f757048effc: fxsave64 (%rsp)
  0x00007f757048f001: mov    %rbx,%rdi
  0x00007f757048f004: mov    %rax,%rsi
  0x00007f757048f007: callq  0x00007f7585522bca
  0x00007f757048f00c: fxrstor64 (%rsp)
  0x00007f757048f011: add    $0x200,%rsp
  0x00007f757048f018: mov    (%rsp),%r15
  0x00007f757048f01c: mov    0x8(%rsp),%r14
  0x00007f757048f021: mov    0x10(%rsp),%r13
  0x00007f757048f026: mov    0x18(%rsp),%r12
  0x00007f757048f02b: mov    0x20(%rsp),%r11
  0x00007f757048f030: mov    0x28(%rsp),%r10
  0x00007f757048f035: mov    0x30(%rsp),%r9
  0x00007f757048f03a: mov    0x38(%rsp),%r8
  0x00007f757048f03f: mov    0x40(%rsp),%rdi
  0x00007f757048f044: mov    0x48(%rsp),%rsi
  0x00007f757048f049: mov    0x50(%rsp),%rbp
  0x00007f757048f04e: mov    0x60(%rsp),%rbx
  0x00007f757048f053: mov    0x68(%rsp),%rdx
  0x00007f757048f058: mov    0x70(%rsp),%rcx
  0x00007f757048f05d: mov    0x78(%rsp),%rax
  0x00007f757048f062: add    $0x80,%rsp
  0x00007f757048f069: add    $0x8,%rsp
  0x00007f757048f06d: popfq  
  0x00007f757048f06e: mov    %r13,%rsp
  0x00007f757048f071: pop    %rax
  0x00007f757048f072: mov    %rsp,%r13
  0x00007f757048f075: sub    $0x40,%rsp
  0x00007f757048f079: mov    %rax,(%rsp)
  0x00007f757048f07d: mov    %rsi,0x30(%rsp)
  0x00007f757048f082: mov    %rdx,0x28(%rsp)
  0x00007f757048f087: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048f091: mov    %rax,0x20(%rsp)
  0x00007f757048f096: mov    %rcx,0x18(%rsp)
  0x00007f757048f09b: movabs $0xdeadffffdeadaaac,%rax
  0x00007f757048f0a5: mov    %rax,0x10(%rsp)
  0x00007f757048f0aa: vmovsd %xmm0,0x8(%rsp)
  0x00007f757048f0b0: mov    0x40(%rbx),%rcx
  0x00007f757048f0b4: jmpq   *%rcx

AHE@0x00007f75800d4c80: 0xbbe7e000 i2c: 0x00007f757048f160 c2i: 0x00007f757048f27d c2iUV: 0x00007f757048f250
i2c argument handler #0 for: receiver (JD)V (589 bytes generated)
c2i argument handler starts at 0x7f757048f27d
  0x00007f757048f160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048f164: movabs $0x7f757036e3e0,%r11
  0x00007f757048f16e: cmp    %r11,%rax
  0x00007f757048f171: jbe    0x00007f757048f18a
  0x00007f757048f177: movabs $0x7f757046e3e0,%r11
  0x00007f757048f181: cmp    %r11,%rax
  0x00007f757048f184: jb     0x00007f757048f227
  0x00007f757048f18a: movabs $0x7f7570369420,%r11
  0x00007f757048f194: cmp    %r11,%rax
  0x00007f757048f197: jbe    0x00007f757048f1b0
  0x00007f757048f19d: movabs $0x7f757036de58,%r11
  0x00007f757048f1a7: cmp    %r11,%rax
  0x00007f757048f1aa: jb     0x00007f757048f227
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048f1b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048f1b5: sub    $0x80,%rsp
  0x00007f757048f1bc: mov    %rax,0x78(%rsp)
  0x00007f757048f1c1: mov    %rcx,0x70(%rsp)
  0x00007f757048f1c6: mov    %rdx,0x68(%rsp)
  0x00007f757048f1cb: mov    %rbx,0x60(%rsp)
  0x00007f757048f1d0: mov    %rbp,0x50(%rsp)
  0x00007f757048f1d5: mov    %rsi,0x48(%rsp)
  0x00007f757048f1da: mov    %rdi,0x40(%rsp)
  0x00007f757048f1df: mov    %r8,0x38(%rsp)
  0x00007f757048f1e4: mov    %r9,0x30(%rsp)
  0x00007f757048f1e9: mov    %r10,0x28(%rsp)
  0x00007f757048f1ee: mov    %r11,0x20(%rsp)
  0x00007f757048f1f3: mov    %r12,0x18(%rsp)
  0x00007f757048f1f8: mov    %r13,0x10(%rsp)
  0x00007f757048f1fd: mov    %r14,0x8(%rsp)
  0x00007f757048f202: mov    %r15,(%rsp)
  0x00007f757048f206: movabs $0x7f758592f470,%rdi
  0x00007f757048f210: movabs $0x7f757048f1b0,%rsi
  0x00007f757048f21a: mov    %rsp,%rdx
  0x00007f757048f21d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f221: callq  0x00007f75853729fa
  0x00007f757048f226: hlt    
  ;; } verify_i2ce 
  0x00007f757048f227: mov    %rsp,%r11
  0x00007f757048f22a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f22e: push   %rax
  0x00007f757048f22f: mov    %r11,%rax
  0x00007f757048f232: mov    0x50(%rbx),%r11
  0x00007f757048f236: mov    0x28(%rax),%rsi
  0x00007f757048f23a: mov    0x18(%rax),%rdx
  0x00007f757048f23e: vmovsd 0x8(%rax),%xmm0
  0x00007f757048f243: mov    %rbx,0x258(%r15)
  0x00007f757048f24a: mov    %rbx,%rax
  0x00007f757048f24d: jmpq   *%r11
  0x00007f757048f250: mov    0x8(%rsi),%ebx
  0x00007f757048f253: shl    $0x3,%rbx
  0x00007f757048f257: cmp    0x10(%rax),%rbx
  0x00007f757048f25b: mov    0x8(%rax),%rbx
  0x00007f757048f25f: je     0x00007f757048f26a
  0x00007f757048f265: jmpq   0x00007f757046ec40
  0x00007f757048f26a: cmpq   $0x0,0x58(%rbx)
  0x00007f757048f272: je     0x00007f757048f36d
  0x00007f757048f278: jmpq   0x00007f757046ec40
  0x00007f757048f27d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048f285: je     0x00007f757048f36d
  0x00007f757048f28b: mov    %rsp,%r13
  0x00007f757048f28e: mov    (%rsp),%rax
  0x00007f757048f292: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f296: pushfq 
  0x00007f757048f297: sub    $0x8,%rsp
  0x00007f757048f29b: mov    %rsp,-0x28(%rsp)
  0x00007f757048f2a0: sub    $0x80,%rsp
  0x00007f757048f2a7: mov    %rax,0x78(%rsp)
  0x00007f757048f2ac: mov    %rcx,0x70(%rsp)
  0x00007f757048f2b1: mov    %rdx,0x68(%rsp)
  0x00007f757048f2b6: mov    %rbx,0x60(%rsp)
  0x00007f757048f2bb: mov    %rbp,0x50(%rsp)
  0x00007f757048f2c0: mov    %rsi,0x48(%rsp)
  0x00007f757048f2c5: mov    %rdi,0x40(%rsp)
  0x00007f757048f2ca: mov    %r8,0x38(%rsp)
  0x00007f757048f2cf: mov    %r9,0x30(%rsp)
  0x00007f757048f2d4: mov    %r10,0x28(%rsp)
  0x00007f757048f2d9: mov    %r11,0x20(%rsp)
  0x00007f757048f2de: mov    %r12,0x18(%rsp)
  0x00007f757048f2e3: mov    %r13,0x10(%rsp)
  0x00007f757048f2e8: mov    %r14,0x8(%rsp)
  0x00007f757048f2ed: mov    %r15,(%rsp)
  0x00007f757048f2f1: sub    $0x200,%rsp
  0x00007f757048f2f8: fxsave64 (%rsp)
  0x00007f757048f2fd: mov    %rbx,%rdi
  0x00007f757048f300: mov    %rax,%rsi
  0x00007f757048f303: callq  0x00007f7585522bca
  0x00007f757048f308: fxrstor64 (%rsp)
  0x00007f757048f30d: add    $0x200,%rsp
  0x00007f757048f314: mov    (%rsp),%r15
  0x00007f757048f318: mov    0x8(%rsp),%r14
  0x00007f757048f31d: mov    0x10(%rsp),%r13
  0x00007f757048f322: mov    0x18(%rsp),%r12
  0x00007f757048f327: mov    0x20(%rsp),%r11
  0x00007f757048f32c: mov    0x28(%rsp),%r10
  0x00007f757048f331: mov    0x30(%rsp),%r9
  0x00007f757048f336: mov    0x38(%rsp),%r8
  0x00007f757048f33b: mov    0x40(%rsp),%rdi
  0x00007f757048f340: mov    0x48(%rsp),%rsi
  0x00007f757048f345: mov    0x50(%rsp),%rbp
  0x00007f757048f34a: mov    0x60(%rsp),%rbx
  0x00007f757048f34f: mov    0x68(%rsp),%rdx
  0x00007f757048f354: mov    0x70(%rsp),%rcx
  0x00007f757048f359: mov    0x78(%rsp),%rax
  0x00007f757048f35e: add    $0x80,%rsp
  0x00007f757048f365: add    $0x8,%rsp
  0x00007f757048f369: popfq  
  0x00007f757048f36a: mov    %r13,%rsp
  0x00007f757048f36d: pop    %rax
  0x00007f757048f36e: mov    %rsp,%r13
  0x00007f757048f371: sub    $0x30,%rsp
  0x00007f757048f375: mov    %rax,(%rsp)
  0x00007f757048f379: mov    %rsi,0x28(%rsp)
  0x00007f757048f37e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048f388: mov    %rax,0x20(%rsp)
  0x00007f757048f38d: mov    %rdx,0x18(%rsp)
  0x00007f757048f392: movabs $0xdeadffffdeadaaac,%rax
  0x00007f757048f39c: mov    %rax,0x10(%rsp)
  0x00007f757048f3a1: vmovsd %xmm0,0x8(%rsp)
  0x00007f757048f3a7: mov    0x40(%rbx),%rcx
  0x00007f757048f3ab: jmpq   *%rcx

AHE@0x00007f75800d4cc8: 0xbba7e000 i2c: 0x00007f757048f460 c2i: 0x00007f757048f580 c2iUV: 0x00007f757048f553
i2c argument handler #0 for: receiver (Ljava/lang/Object;ID)V (581 bytes generated)
c2i argument handler starts at 0x7f757048f580
  0x00007f757048f460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048f464: movabs $0x7f757036e3e0,%r11
  0x00007f757048f46e: cmp    %r11,%rax
  0x00007f757048f471: jbe    0x00007f757048f48a
  0x00007f757048f477: movabs $0x7f757046e3e0,%r11
  0x00007f757048f481: cmp    %r11,%rax
  0x00007f757048f484: jb     0x00007f757048f527
  0x00007f757048f48a: movabs $0x7f7570369420,%r11
  0x00007f757048f494: cmp    %r11,%rax
  0x00007f757048f497: jbe    0x00007f757048f4b0
  0x00007f757048f49d: movabs $0x7f757036de58,%r11
  0x00007f757048f4a7: cmp    %r11,%rax
  0x00007f757048f4aa: jb     0x00007f757048f527
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048f4b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048f4b5: sub    $0x80,%rsp
  0x00007f757048f4bc: mov    %rax,0x78(%rsp)
  0x00007f757048f4c1: mov    %rcx,0x70(%rsp)
  0x00007f757048f4c6: mov    %rdx,0x68(%rsp)
  0x00007f757048f4cb: mov    %rbx,0x60(%rsp)
  0x00007f757048f4d0: mov    %rbp,0x50(%rsp)
  0x00007f757048f4d5: mov    %rsi,0x48(%rsp)
  0x00007f757048f4da: mov    %rdi,0x40(%rsp)
  0x00007f757048f4df: mov    %r8,0x38(%rsp)
  0x00007f757048f4e4: mov    %r9,0x30(%rsp)
  0x00007f757048f4e9: mov    %r10,0x28(%rsp)
  0x00007f757048f4ee: mov    %r11,0x20(%rsp)
  0x00007f757048f4f3: mov    %r12,0x18(%rsp)
  0x00007f757048f4f8: mov    %r13,0x10(%rsp)
  0x00007f757048f4fd: mov    %r14,0x8(%rsp)
  0x00007f757048f502: mov    %r15,(%rsp)
  0x00007f757048f506: movabs $0x7f758592f470,%rdi
  0x00007f757048f510: movabs $0x7f757048f4b0,%rsi
  0x00007f757048f51a: mov    %rsp,%rdx
  0x00007f757048f51d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f521: callq  0x00007f75853729fa
  0x00007f757048f526: hlt    
  ;; } verify_i2ce 
  0x00007f757048f527: mov    %rsp,%r11
  0x00007f757048f52a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f52e: push   %rax
  0x00007f757048f52f: mov    %r11,%rax
  0x00007f757048f532: mov    0x50(%rbx),%r11
  0x00007f757048f536: mov    0x28(%rax),%rsi
  0x00007f757048f53a: mov    0x20(%rax),%rdx
  0x00007f757048f53e: mov    0x18(%rax),%ecx
  0x00007f757048f541: vmovsd 0x8(%rax),%xmm0
  0x00007f757048f546: mov    %rbx,0x258(%r15)
  0x00007f757048f54d: mov    %rbx,%rax
  0x00007f757048f550: jmpq   *%r11
  0x00007f757048f553: mov    0x8(%rsi),%ebx
  0x00007f757048f556: shl    $0x3,%rbx
  0x00007f757048f55a: cmp    0x10(%rax),%rbx
  0x00007f757048f55e: mov    0x8(%rax),%rbx
  0x00007f757048f562: je     0x00007f757048f56d
  0x00007f757048f568: jmpq   0x00007f757046ec40
  0x00007f757048f56d: cmpq   $0x0,0x58(%rbx)
  0x00007f757048f575: je     0x00007f757048f670
  0x00007f757048f57b: jmpq   0x00007f757046ec40
  0x00007f757048f580: cmpq   $0x0,0x58(%rbx)
  0x00007f757048f588: je     0x00007f757048f670
  0x00007f757048f58e: mov    %rsp,%r13
  0x00007f757048f591: mov    (%rsp),%rax
  0x00007f757048f595: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f599: pushfq 
  0x00007f757048f59a: sub    $0x8,%rsp
  0x00007f757048f59e: mov    %rsp,-0x28(%rsp)
  0x00007f757048f5a3: sub    $0x80,%rsp
  0x00007f757048f5aa: mov    %rax,0x78(%rsp)
  0x00007f757048f5af: mov    %rcx,0x70(%rsp)
  0x00007f757048f5b4: mov    %rdx,0x68(%rsp)
  0x00007f757048f5b9: mov    %rbx,0x60(%rsp)
  0x00007f757048f5be: mov    %rbp,0x50(%rsp)
  0x00007f757048f5c3: mov    %rsi,0x48(%rsp)
  0x00007f757048f5c8: mov    %rdi,0x40(%rsp)
  0x00007f757048f5cd: mov    %r8,0x38(%rsp)
  0x00007f757048f5d2: mov    %r9,0x30(%rsp)
  0x00007f757048f5d7: mov    %r10,0x28(%rsp)
  0x00007f757048f5dc: mov    %r11,0x20(%rsp)
  0x00007f757048f5e1: mov    %r12,0x18(%rsp)
  0x00007f757048f5e6: mov    %r13,0x10(%rsp)
  0x00007f757048f5eb: mov    %r14,0x8(%rsp)
  0x00007f757048f5f0: mov    %r15,(%rsp)
  0x00007f757048f5f4: sub    $0x200,%rsp
  0x00007f757048f5fb: fxsave64 (%rsp)
  0x00007f757048f600: mov    %rbx,%rdi
  0x00007f757048f603: mov    %rax,%rsi
  0x00007f757048f606: callq  0x00007f7585522bca
  0x00007f757048f60b: fxrstor64 (%rsp)
  0x00007f757048f610: add    $0x200,%rsp
  0x00007f757048f617: mov    (%rsp),%r15
  0x00007f757048f61b: mov    0x8(%rsp),%r14
  0x00007f757048f620: mov    0x10(%rsp),%r13
  0x00007f757048f625: mov    0x18(%rsp),%r12
  0x00007f757048f62a: mov    0x20(%rsp),%r11
  0x00007f757048f62f: mov    0x28(%rsp),%r10
  0x00007f757048f634: mov    0x30(%rsp),%r9
  0x00007f757048f639: mov    0x38(%rsp),%r8
  0x00007f757048f63e: mov    0x40(%rsp),%rdi
  0x00007f757048f643: mov    0x48(%rsp),%rsi
  0x00007f757048f648: mov    0x50(%rsp),%rbp
  0x00007f757048f64d: mov    0x60(%rsp),%rbx
  0x00007f757048f652: mov    0x68(%rsp),%rdx
  0x00007f757048f657: mov    0x70(%rsp),%rcx
  0x00007f757048f65c: mov    0x78(%rsp),%rax
  0x00007f757048f661: add    $0x80,%rsp
  0x00007f757048f668: add    $0x8,%rsp
  0x00007f757048f66c: popfq  
  0x00007f757048f66d: mov    %r13,%rsp
  0x00007f757048f670: pop    %rax
  0x00007f757048f671: mov    %rsp,%r13
  0x00007f757048f674: sub    $0x30,%rsp
  0x00007f757048f678: mov    %rax,(%rsp)
  0x00007f757048f67c: mov    %rsi,0x28(%rsp)
  0x00007f757048f681: mov    %rdx,0x20(%rsp)
  0x00007f757048f686: mov    %ecx,0x18(%rsp)
  0x00007f757048f68a: movabs $0xdeadffffdeadaaac,%rax
  0x00007f757048f694: mov    %rax,0x10(%rsp)
  0x00007f757048f699: vmovsd %xmm0,0x8(%rsp)
  0x00007f757048f69f: mov    0x40(%rbx),%rcx
  0x00007f757048f6a3: jmpq   *%rcx

AHE@0x00007f75800d4d10: 0xbbe00000 i2c: 0x00007f757048f760 c2i: 0x00007f757048f878 c2iUV: 0x00007f757048f84b
i2c argument handler #0 for: receiver (J)D (563 bytes generated)
c2i argument handler starts at 0x7f757048f878
  0x00007f757048f760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048f764: movabs $0x7f757036e3e0,%r11
  0x00007f757048f76e: cmp    %r11,%rax
  0x00007f757048f771: jbe    0x00007f757048f78a
  0x00007f757048f777: movabs $0x7f757046e3e0,%r11
  0x00007f757048f781: cmp    %r11,%rax
  0x00007f757048f784: jb     0x00007f757048f827
  0x00007f757048f78a: movabs $0x7f7570369420,%r11
  0x00007f757048f794: cmp    %r11,%rax
  0x00007f757048f797: jbe    0x00007f757048f7b0
  0x00007f757048f79d: movabs $0x7f757036de58,%r11
  0x00007f757048f7a7: cmp    %r11,%rax
  0x00007f757048f7aa: jb     0x00007f757048f827
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048f7b0: mov    %rsp,-0x28(%rsp)
  0x00007f757048f7b5: sub    $0x80,%rsp
  0x00007f757048f7bc: mov    %rax,0x78(%rsp)
  0x00007f757048f7c1: mov    %rcx,0x70(%rsp)
  0x00007f757048f7c6: mov    %rdx,0x68(%rsp)
  0x00007f757048f7cb: mov    %rbx,0x60(%rsp)
  0x00007f757048f7d0: mov    %rbp,0x50(%rsp)
  0x00007f757048f7d5: mov    %rsi,0x48(%rsp)
  0x00007f757048f7da: mov    %rdi,0x40(%rsp)
  0x00007f757048f7df: mov    %r8,0x38(%rsp)
  0x00007f757048f7e4: mov    %r9,0x30(%rsp)
  0x00007f757048f7e9: mov    %r10,0x28(%rsp)
  0x00007f757048f7ee: mov    %r11,0x20(%rsp)
  0x00007f757048f7f3: mov    %r12,0x18(%rsp)
  0x00007f757048f7f8: mov    %r13,0x10(%rsp)
  0x00007f757048f7fd: mov    %r14,0x8(%rsp)
  0x00007f757048f802: mov    %r15,(%rsp)
  0x00007f757048f806: movabs $0x7f758592f470,%rdi
  0x00007f757048f810: movabs $0x7f757048f7b0,%rsi
  0x00007f757048f81a: mov    %rsp,%rdx
  0x00007f757048f81d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f821: callq  0x00007f75853729fa
  0x00007f757048f826: hlt    
  ;; } verify_i2ce 
  0x00007f757048f827: mov    %rsp,%r11
  0x00007f757048f82a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f82e: push   %rax
  0x00007f757048f82f: mov    %r11,%rax
  0x00007f757048f832: mov    0x50(%rbx),%r11
  0x00007f757048f836: mov    0x18(%rax),%rsi
  0x00007f757048f83a: mov    0x8(%rax),%rdx
  0x00007f757048f83e: mov    %rbx,0x258(%r15)
  0x00007f757048f845: mov    %rbx,%rax
  0x00007f757048f848: jmpq   *%r11
  0x00007f757048f84b: mov    0x8(%rsi),%ebx
  0x00007f757048f84e: shl    $0x3,%rbx
  0x00007f757048f852: cmp    0x10(%rax),%rbx
  0x00007f757048f856: mov    0x8(%rax),%rbx
  0x00007f757048f85a: je     0x00007f757048f865
  0x00007f757048f860: jmpq   0x00007f757046ec40
  0x00007f757048f865: cmpq   $0x0,0x58(%rbx)
  0x00007f757048f86d: je     0x00007f757048f968
  0x00007f757048f873: jmpq   0x00007f757046ec40
  0x00007f757048f878: cmpq   $0x0,0x58(%rbx)
  0x00007f757048f880: je     0x00007f757048f968
  0x00007f757048f886: mov    %rsp,%r13
  0x00007f757048f889: mov    (%rsp),%rax
  0x00007f757048f88d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048f891: pushfq 
  0x00007f757048f892: sub    $0x8,%rsp
  0x00007f757048f896: mov    %rsp,-0x28(%rsp)
  0x00007f757048f89b: sub    $0x80,%rsp
  0x00007f757048f8a2: mov    %rax,0x78(%rsp)
  0x00007f757048f8a7: mov    %rcx,0x70(%rsp)
  0x00007f757048f8ac: mov    %rdx,0x68(%rsp)
  0x00007f757048f8b1: mov    %rbx,0x60(%rsp)
  0x00007f757048f8b6: mov    %rbp,0x50(%rsp)
  0x00007f757048f8bb: mov    %rsi,0x48(%rsp)
  0x00007f757048f8c0: mov    %rdi,0x40(%rsp)
  0x00007f757048f8c5: mov    %r8,0x38(%rsp)
  0x00007f757048f8ca: mov    %r9,0x30(%rsp)
  0x00007f757048f8cf: mov    %r10,0x28(%rsp)
  0x00007f757048f8d4: mov    %r11,0x20(%rsp)
  0x00007f757048f8d9: mov    %r12,0x18(%rsp)
  0x00007f757048f8de: mov    %r13,0x10(%rsp)
  0x00007f757048f8e3: mov    %r14,0x8(%rsp)
  0x00007f757048f8e8: mov    %r15,(%rsp)
  0x00007f757048f8ec: sub    $0x200,%rsp
  0x00007f757048f8f3: fxsave64 (%rsp)
  0x00007f757048f8f8: mov    %rbx,%rdi
  0x00007f757048f8fb: mov    %rax,%rsi
  0x00007f757048f8fe: callq  0x00007f7585522bca
  0x00007f757048f903: fxrstor64 (%rsp)
  0x00007f757048f908: add    $0x200,%rsp
  0x00007f757048f90f: mov    (%rsp),%r15
  0x00007f757048f913: mov    0x8(%rsp),%r14
  0x00007f757048f918: mov    0x10(%rsp),%r13
  0x00007f757048f91d: mov    0x18(%rsp),%r12
  0x00007f757048f922: mov    0x20(%rsp),%r11
  0x00007f757048f927: mov    0x28(%rsp),%r10
  0x00007f757048f92c: mov    0x30(%rsp),%r9
  0x00007f757048f931: mov    0x38(%rsp),%r8
  0x00007f757048f936: mov    0x40(%rsp),%rdi
  0x00007f757048f93b: mov    0x48(%rsp),%rsi
  0x00007f757048f940: mov    0x50(%rsp),%rbp
  0x00007f757048f945: mov    0x60(%rsp),%rbx
  0x00007f757048f94a: mov    0x68(%rsp),%rdx
  0x00007f757048f94f: mov    0x70(%rsp),%rcx
  0x00007f757048f954: mov    0x78(%rsp),%rax
  0x00007f757048f959: add    $0x80,%rsp
  0x00007f757048f960: add    $0x8,%rsp
  0x00007f757048f964: popfq  
  0x00007f757048f965: mov    %r13,%rsp
  0x00007f757048f968: pop    %rax
  0x00007f757048f969: mov    %rsp,%r13
  0x00007f757048f96c: sub    $0x20,%rsp
  0x00007f757048f970: mov    %rax,(%rsp)
  0x00007f757048f974: mov    %rsi,0x18(%rsp)
  0x00007f757048f979: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048f983: mov    %rax,0x10(%rsp)
  0x00007f757048f988: mov    %rdx,0x8(%rsp)
  0x00007f757048f98d: mov    0x40(%rbx),%rcx
  0x00007f757048f991: jmpq   *%rcx

AHE@0x00007f75800d4d58: 0xbba00000 i2c: 0x00007f757048fa60 c2i: 0x00007f757048fb7b c2iUV: 0x00007f757048fb4e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)D (555 bytes generated)
c2i argument handler starts at 0x7f757048fb7b
  0x00007f757048fa60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048fa64: movabs $0x7f757036e3e0,%r11
  0x00007f757048fa6e: cmp    %r11,%rax
  0x00007f757048fa71: jbe    0x00007f757048fa8a
  0x00007f757048fa77: movabs $0x7f757046e3e0,%r11
  0x00007f757048fa81: cmp    %r11,%rax
  0x00007f757048fa84: jb     0x00007f757048fb27
  0x00007f757048fa8a: movabs $0x7f7570369420,%r11
  0x00007f757048fa94: cmp    %r11,%rax
  0x00007f757048fa97: jbe    0x00007f757048fab0
  0x00007f757048fa9d: movabs $0x7f757036de58,%r11
  0x00007f757048faa7: cmp    %r11,%rax
  0x00007f757048faaa: jb     0x00007f757048fb27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048fab0: mov    %rsp,-0x28(%rsp)
  0x00007f757048fab5: sub    $0x80,%rsp
  0x00007f757048fabc: mov    %rax,0x78(%rsp)
  0x00007f757048fac1: mov    %rcx,0x70(%rsp)
  0x00007f757048fac6: mov    %rdx,0x68(%rsp)
  0x00007f757048facb: mov    %rbx,0x60(%rsp)
  0x00007f757048fad0: mov    %rbp,0x50(%rsp)
  0x00007f757048fad5: mov    %rsi,0x48(%rsp)
  0x00007f757048fada: mov    %rdi,0x40(%rsp)
  0x00007f757048fadf: mov    %r8,0x38(%rsp)
  0x00007f757048fae4: mov    %r9,0x30(%rsp)
  0x00007f757048fae9: mov    %r10,0x28(%rsp)
  0x00007f757048faee: mov    %r11,0x20(%rsp)
  0x00007f757048faf3: mov    %r12,0x18(%rsp)
  0x00007f757048faf8: mov    %r13,0x10(%rsp)
  0x00007f757048fafd: mov    %r14,0x8(%rsp)
  0x00007f757048fb02: mov    %r15,(%rsp)
  0x00007f757048fb06: movabs $0x7f758592f470,%rdi
  0x00007f757048fb10: movabs $0x7f757048fab0,%rsi
  0x00007f757048fb1a: mov    %rsp,%rdx
  0x00007f757048fb1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048fb21: callq  0x00007f75853729fa
  0x00007f757048fb26: hlt    
  ;; } verify_i2ce 
  0x00007f757048fb27: mov    %rsp,%r11
  0x00007f757048fb2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048fb2e: push   %rax
  0x00007f757048fb2f: mov    %r11,%rax
  0x00007f757048fb32: mov    0x50(%rbx),%r11
  0x00007f757048fb36: mov    0x18(%rax),%rsi
  0x00007f757048fb3a: mov    0x10(%rax),%rdx
  0x00007f757048fb3e: mov    0x8(%rax),%ecx
  0x00007f757048fb41: mov    %rbx,0x258(%r15)
  0x00007f757048fb48: mov    %rbx,%rax
  0x00007f757048fb4b: jmpq   *%r11
  0x00007f757048fb4e: mov    0x8(%rsi),%ebx
  0x00007f757048fb51: shl    $0x3,%rbx
  0x00007f757048fb55: cmp    0x10(%rax),%rbx
  0x00007f757048fb59: mov    0x8(%rax),%rbx
  0x00007f757048fb5d: je     0x00007f757048fb68
  0x00007f757048fb63: jmpq   0x00007f757046ec40
  0x00007f757048fb68: cmpq   $0x0,0x58(%rbx)
  0x00007f757048fb70: je     0x00007f757048fc6b
  0x00007f757048fb76: jmpq   0x00007f757046ec40
  0x00007f757048fb7b: cmpq   $0x0,0x58(%rbx)
  0x00007f757048fb83: je     0x00007f757048fc6b
  0x00007f757048fb89: mov    %rsp,%r13
  0x00007f757048fb8c: mov    (%rsp),%rax
  0x00007f757048fb90: and    $0xfffffffffffffff0,%rsp
  0x00007f757048fb94: pushfq 
  0x00007f757048fb95: sub    $0x8,%rsp
  0x00007f757048fb99: mov    %rsp,-0x28(%rsp)
  0x00007f757048fb9e: sub    $0x80,%rsp
  0x00007f757048fba5: mov    %rax,0x78(%rsp)
  0x00007f757048fbaa: mov    %rcx,0x70(%rsp)
  0x00007f757048fbaf: mov    %rdx,0x68(%rsp)
  0x00007f757048fbb4: mov    %rbx,0x60(%rsp)
  0x00007f757048fbb9: mov    %rbp,0x50(%rsp)
  0x00007f757048fbbe: mov    %rsi,0x48(%rsp)
  0x00007f757048fbc3: mov    %rdi,0x40(%rsp)
  0x00007f757048fbc8: mov    %r8,0x38(%rsp)
  0x00007f757048fbcd: mov    %r9,0x30(%rsp)
  0x00007f757048fbd2: mov    %r10,0x28(%rsp)
  0x00007f757048fbd7: mov    %r11,0x20(%rsp)
  0x00007f757048fbdc: mov    %r12,0x18(%rsp)
  0x00007f757048fbe1: mov    %r13,0x10(%rsp)
  0x00007f757048fbe6: mov    %r14,0x8(%rsp)
  0x00007f757048fbeb: mov    %r15,(%rsp)
  0x00007f757048fbef: sub    $0x200,%rsp
  0x00007f757048fbf6: fxsave64 (%rsp)
  0x00007f757048fbfb: mov    %rbx,%rdi
  0x00007f757048fbfe: mov    %rax,%rsi
  0x00007f757048fc01: callq  0x00007f7585522bca
  0x00007f757048fc06: fxrstor64 (%rsp)
  0x00007f757048fc0b: add    $0x200,%rsp
  0x00007f757048fc12: mov    (%rsp),%r15
  0x00007f757048fc16: mov    0x8(%rsp),%r14
  0x00007f757048fc1b: mov    0x10(%rsp),%r13
  0x00007f757048fc20: mov    0x18(%rsp),%r12
  0x00007f757048fc25: mov    0x20(%rsp),%r11
  0x00007f757048fc2a: mov    0x28(%rsp),%r10
  0x00007f757048fc2f: mov    0x30(%rsp),%r9
  0x00007f757048fc34: mov    0x38(%rsp),%r8
  0x00007f757048fc39: mov    0x40(%rsp),%rdi
  0x00007f757048fc3e: mov    0x48(%rsp),%rsi
  0x00007f757048fc43: mov    0x50(%rsp),%rbp
  0x00007f757048fc48: mov    0x60(%rsp),%rbx
  0x00007f757048fc4d: mov    0x68(%rsp),%rdx
  0x00007f757048fc52: mov    0x70(%rsp),%rcx
  0x00007f757048fc57: mov    0x78(%rsp),%rax
  0x00007f757048fc5c: add    $0x80,%rsp
  0x00007f757048fc63: add    $0x8,%rsp
  0x00007f757048fc67: popfq  
  0x00007f757048fc68: mov    %r13,%rsp
  0x00007f757048fc6b: pop    %rax
  0x00007f757048fc6c: mov    %rsp,%r13
  0x00007f757048fc6f: sub    $0x20,%rsp
  0x00007f757048fc73: mov    %rax,(%rsp)
  0x00007f757048fc77: mov    %rsi,0x18(%rsp)
  0x00007f757048fc7c: mov    %rdx,0x10(%rsp)
  0x00007f757048fc81: mov    %ecx,0x8(%rsp)
  0x00007f757048fc85: mov    0x40(%rbx),%rcx
  0x00007f757048fc89: jmpq   *%rcx

AHE@0x00007f75800d4da0: 0xbbbe0000 i2c: 0x00007f757048fd60 c2i: 0x00007f757048fe7c c2iUV: 0x00007f757048fe4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)D (572 bytes generated)
c2i argument handler starts at 0x7f757048fe7c
  0x00007f757048fd60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757048fd64: movabs $0x7f757036e3e0,%r11
  0x00007f757048fd6e: cmp    %r11,%rax
  0x00007f757048fd71: jbe    0x00007f757048fd8a
  0x00007f757048fd77: movabs $0x7f757046e3e0,%r11
  0x00007f757048fd81: cmp    %r11,%rax
  0x00007f757048fd84: jb     0x00007f757048fe27
  0x00007f757048fd8a: movabs $0x7f7570369420,%r11
  0x00007f757048fd94: cmp    %r11,%rax
  0x00007f757048fd97: jbe    0x00007f757048fdb0
  0x00007f757048fd9d: movabs $0x7f757036de58,%r11
  0x00007f757048fda7: cmp    %r11,%rax
  0x00007f757048fdaa: jb     0x00007f757048fe27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757048fdb0: mov    %rsp,-0x28(%rsp)
  0x00007f757048fdb5: sub    $0x80,%rsp
  0x00007f757048fdbc: mov    %rax,0x78(%rsp)
  0x00007f757048fdc1: mov    %rcx,0x70(%rsp)
  0x00007f757048fdc6: mov    %rdx,0x68(%rsp)
  0x00007f757048fdcb: mov    %rbx,0x60(%rsp)
  0x00007f757048fdd0: mov    %rbp,0x50(%rsp)
  0x00007f757048fdd5: mov    %rsi,0x48(%rsp)
  0x00007f757048fdda: mov    %rdi,0x40(%rsp)
  0x00007f757048fddf: mov    %r8,0x38(%rsp)
  0x00007f757048fde4: mov    %r9,0x30(%rsp)
  0x00007f757048fde9: mov    %r10,0x28(%rsp)
  0x00007f757048fdee: mov    %r11,0x20(%rsp)
  0x00007f757048fdf3: mov    %r12,0x18(%rsp)
  0x00007f757048fdf8: mov    %r13,0x10(%rsp)
  0x00007f757048fdfd: mov    %r14,0x8(%rsp)
  0x00007f757048fe02: mov    %r15,(%rsp)
  0x00007f757048fe06: movabs $0x7f758592f470,%rdi
  0x00007f757048fe10: movabs $0x7f757048fdb0,%rsi
  0x00007f757048fe1a: mov    %rsp,%rdx
  0x00007f757048fe1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757048fe21: callq  0x00007f75853729fa
  0x00007f757048fe26: hlt    
  ;; } verify_i2ce 
  0x00007f757048fe27: mov    %rsp,%r11
  0x00007f757048fe2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757048fe2e: push   %rax
  0x00007f757048fe2f: mov    %r11,%rax
  0x00007f757048fe32: mov    0x50(%rbx),%r11
  0x00007f757048fe36: mov    0x20(%rax),%rsi
  0x00007f757048fe3a: mov    0x18(%rax),%rdx
  0x00007f757048fe3e: mov    0x8(%rax),%rcx
  0x00007f757048fe42: mov    %rbx,0x258(%r15)
  0x00007f757048fe49: mov    %rbx,%rax
  0x00007f757048fe4c: jmpq   *%r11
  0x00007f757048fe4f: mov    0x8(%rsi),%ebx
  0x00007f757048fe52: shl    $0x3,%rbx
  0x00007f757048fe56: cmp    0x10(%rax),%rbx
  0x00007f757048fe5a: mov    0x8(%rax),%rbx
  0x00007f757048fe5e: je     0x00007f757048fe69
  0x00007f757048fe64: jmpq   0x00007f757046ec40
  0x00007f757048fe69: cmpq   $0x0,0x58(%rbx)
  0x00007f757048fe71: je     0x00007f757048ff6c
  0x00007f757048fe77: jmpq   0x00007f757046ec40
  0x00007f757048fe7c: cmpq   $0x0,0x58(%rbx)
  0x00007f757048fe84: je     0x00007f757048ff6c
  0x00007f757048fe8a: mov    %rsp,%r13
  0x00007f757048fe8d: mov    (%rsp),%rax
  0x00007f757048fe91: and    $0xfffffffffffffff0,%rsp
  0x00007f757048fe95: pushfq 
  0x00007f757048fe96: sub    $0x8,%rsp
  0x00007f757048fe9a: mov    %rsp,-0x28(%rsp)
  0x00007f757048fe9f: sub    $0x80,%rsp
  0x00007f757048fea6: mov    %rax,0x78(%rsp)
  0x00007f757048feab: mov    %rcx,0x70(%rsp)
  0x00007f757048feb0: mov    %rdx,0x68(%rsp)
  0x00007f757048feb5: mov    %rbx,0x60(%rsp)
  0x00007f757048feba: mov    %rbp,0x50(%rsp)
  0x00007f757048febf: mov    %rsi,0x48(%rsp)
  0x00007f757048fec4: mov    %rdi,0x40(%rsp)
  0x00007f757048fec9: mov    %r8,0x38(%rsp)
  0x00007f757048fece: mov    %r9,0x30(%rsp)
  0x00007f757048fed3: mov    %r10,0x28(%rsp)
  0x00007f757048fed8: mov    %r11,0x20(%rsp)
  0x00007f757048fedd: mov    %r12,0x18(%rsp)
  0x00007f757048fee2: mov    %r13,0x10(%rsp)
  0x00007f757048fee7: mov    %r14,0x8(%rsp)
  0x00007f757048feec: mov    %r15,(%rsp)
  0x00007f757048fef0: sub    $0x200,%rsp
  0x00007f757048fef7: fxsave64 (%rsp)
  0x00007f757048fefc: mov    %rbx,%rdi
  0x00007f757048feff: mov    %rax,%rsi
  0x00007f757048ff02: callq  0x00007f7585522bca
  0x00007f757048ff07: fxrstor64 (%rsp)
  0x00007f757048ff0c: add    $0x200,%rsp
  0x00007f757048ff13: mov    (%rsp),%r15
  0x00007f757048ff17: mov    0x8(%rsp),%r14
  0x00007f757048ff1c: mov    0x10(%rsp),%r13
  0x00007f757048ff21: mov    0x18(%rsp),%r12
  0x00007f757048ff26: mov    0x20(%rsp),%r11
  0x00007f757048ff2b: mov    0x28(%rsp),%r10
  0x00007f757048ff30: mov    0x30(%rsp),%r9
  0x00007f757048ff35: mov    0x38(%rsp),%r8
  0x00007f757048ff3a: mov    0x40(%rsp),%rdi
  0x00007f757048ff3f: mov    0x48(%rsp),%rsi
  0x00007f757048ff44: mov    0x50(%rsp),%rbp
  0x00007f757048ff49: mov    0x60(%rsp),%rbx
  0x00007f757048ff4e: mov    0x68(%rsp),%rdx
  0x00007f757048ff53: mov    0x70(%rsp),%rcx
  0x00007f757048ff58: mov    0x78(%rsp),%rax
  0x00007f757048ff5d: add    $0x80,%rsp
  0x00007f757048ff64: add    $0x8,%rsp
  0x00007f757048ff68: popfq  
  0x00007f757048ff69: mov    %r13,%rsp
  0x00007f757048ff6c: pop    %rax
  0x00007f757048ff6d: mov    %rsp,%r13
  0x00007f757048ff70: sub    $0x30,%rsp
  0x00007f757048ff74: mov    %rax,(%rsp)
  0x00007f757048ff78: mov    %rsi,0x20(%rsp)
  0x00007f757048ff7d: mov    %rdx,0x18(%rsp)
  0x00007f757048ff82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757048ff8c: mov    %rax,0x10(%rsp)
  0x00007f757048ff91: mov    %rcx,0x8(%rsp)
  0x00007f757048ff96: mov    0x40(%rbx),%rcx
  0x00007f757048ff9a: jmpq   *%rcx

AHE@0x00007f75800d4de8: 0xbba60000 i2c: 0x00007f7570490060 c2i: 0x00007f7570490180 c2iUV: 0x00007f7570490153
i2c argument handler #0 for: receiver (Ljava/lang/Object;IF)V (566 bytes generated)
c2i argument handler starts at 0x7f7570490180
  0x00007f7570490060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570490064: movabs $0x7f757036e3e0,%r11
  0x00007f757049006e: cmp    %r11,%rax
  0x00007f7570490071: jbe    0x00007f757049008a
  0x00007f7570490077: movabs $0x7f757046e3e0,%r11
  0x00007f7570490081: cmp    %r11,%rax
  0x00007f7570490084: jb     0x00007f7570490127
  0x00007f757049008a: movabs $0x7f7570369420,%r11
  0x00007f7570490094: cmp    %r11,%rax
  0x00007f7570490097: jbe    0x00007f75704900b0
  0x00007f757049009d: movabs $0x7f757036de58,%r11
  0x00007f75704900a7: cmp    %r11,%rax
  0x00007f75704900aa: jb     0x00007f7570490127
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704900b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704900b5: sub    $0x80,%rsp
  0x00007f75704900bc: mov    %rax,0x78(%rsp)
  0x00007f75704900c1: mov    %rcx,0x70(%rsp)
  0x00007f75704900c6: mov    %rdx,0x68(%rsp)
  0x00007f75704900cb: mov    %rbx,0x60(%rsp)
  0x00007f75704900d0: mov    %rbp,0x50(%rsp)
  0x00007f75704900d5: mov    %rsi,0x48(%rsp)
  0x00007f75704900da: mov    %rdi,0x40(%rsp)
  0x00007f75704900df: mov    %r8,0x38(%rsp)
  0x00007f75704900e4: mov    %r9,0x30(%rsp)
  0x00007f75704900e9: mov    %r10,0x28(%rsp)
  0x00007f75704900ee: mov    %r11,0x20(%rsp)
  0x00007f75704900f3: mov    %r12,0x18(%rsp)
  0x00007f75704900f8: mov    %r13,0x10(%rsp)
  0x00007f75704900fd: mov    %r14,0x8(%rsp)
  0x00007f7570490102: mov    %r15,(%rsp)
  0x00007f7570490106: movabs $0x7f758592f470,%rdi
  0x00007f7570490110: movabs $0x7f75704900b0,%rsi
  0x00007f757049011a: mov    %rsp,%rdx
  0x00007f757049011d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490121: callq  0x00007f75853729fa
  0x00007f7570490126: hlt    
  ;; } verify_i2ce 
  0x00007f7570490127: mov    %rsp,%r11
  0x00007f757049012a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049012e: push   %rax
  0x00007f757049012f: mov    %r11,%rax
  0x00007f7570490132: mov    0x50(%rbx),%r11
  0x00007f7570490136: mov    0x20(%rax),%rsi
  0x00007f757049013a: mov    0x18(%rax),%rdx
  0x00007f757049013e: mov    0x10(%rax),%ecx
  0x00007f7570490141: vmovss 0x8(%rax),%xmm0
  0x00007f7570490146: mov    %rbx,0x258(%r15)
  0x00007f757049014d: mov    %rbx,%rax
  0x00007f7570490150: jmpq   *%r11
  0x00007f7570490153: mov    0x8(%rsi),%ebx
  0x00007f7570490156: shl    $0x3,%rbx
  0x00007f757049015a: cmp    0x10(%rax),%rbx
  0x00007f757049015e: mov    0x8(%rax),%rbx
  0x00007f7570490162: je     0x00007f757049016d
  0x00007f7570490168: jmpq   0x00007f757046ec40
  0x00007f757049016d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490175: je     0x00007f7570490270
  0x00007f757049017b: jmpq   0x00007f757046ec40
  0x00007f7570490180: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490188: je     0x00007f7570490270
  0x00007f757049018e: mov    %rsp,%r13
  0x00007f7570490191: mov    (%rsp),%rax
  0x00007f7570490195: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490199: pushfq 
  0x00007f757049019a: sub    $0x8,%rsp
  0x00007f757049019e: mov    %rsp,-0x28(%rsp)
  0x00007f75704901a3: sub    $0x80,%rsp
  0x00007f75704901aa: mov    %rax,0x78(%rsp)
  0x00007f75704901af: mov    %rcx,0x70(%rsp)
  0x00007f75704901b4: mov    %rdx,0x68(%rsp)
  0x00007f75704901b9: mov    %rbx,0x60(%rsp)
  0x00007f75704901be: mov    %rbp,0x50(%rsp)
  0x00007f75704901c3: mov    %rsi,0x48(%rsp)
  0x00007f75704901c8: mov    %rdi,0x40(%rsp)
  0x00007f75704901cd: mov    %r8,0x38(%rsp)
  0x00007f75704901d2: mov    %r9,0x30(%rsp)
  0x00007f75704901d7: mov    %r10,0x28(%rsp)
  0x00007f75704901dc: mov    %r11,0x20(%rsp)
  0x00007f75704901e1: mov    %r12,0x18(%rsp)
  0x00007f75704901e6: mov    %r13,0x10(%rsp)
  0x00007f75704901eb: mov    %r14,0x8(%rsp)
  0x00007f75704901f0: mov    %r15,(%rsp)
  0x00007f75704901f4: sub    $0x200,%rsp
  0x00007f75704901fb: fxsave64 (%rsp)
  0x00007f7570490200: mov    %rbx,%rdi
  0x00007f7570490203: mov    %rax,%rsi
  0x00007f7570490206: callq  0x00007f7585522bca
  0x00007f757049020b: fxrstor64 (%rsp)
  0x00007f7570490210: add    $0x200,%rsp
  0x00007f7570490217: mov    (%rsp),%r15
  0x00007f757049021b: mov    0x8(%rsp),%r14
  0x00007f7570490220: mov    0x10(%rsp),%r13
  0x00007f7570490225: mov    0x18(%rsp),%r12
  0x00007f757049022a: mov    0x20(%rsp),%r11
  0x00007f757049022f: mov    0x28(%rsp),%r10
  0x00007f7570490234: mov    0x30(%rsp),%r9
  0x00007f7570490239: mov    0x38(%rsp),%r8
  0x00007f757049023e: mov    0x40(%rsp),%rdi
  0x00007f7570490243: mov    0x48(%rsp),%rsi
  0x00007f7570490248: mov    0x50(%rsp),%rbp
  0x00007f757049024d: mov    0x60(%rsp),%rbx
  0x00007f7570490252: mov    0x68(%rsp),%rdx
  0x00007f7570490257: mov    0x70(%rsp),%rcx
  0x00007f757049025c: mov    0x78(%rsp),%rax
  0x00007f7570490261: add    $0x80,%rsp
  0x00007f7570490268: add    $0x8,%rsp
  0x00007f757049026c: popfq  
  0x00007f757049026d: mov    %r13,%rsp
  0x00007f7570490270: pop    %rax
  0x00007f7570490271: mov    %rsp,%r13
  0x00007f7570490274: sub    $0x30,%rsp
  0x00007f7570490278: mov    %rax,(%rsp)
  0x00007f757049027c: mov    %rsi,0x20(%rsp)
  0x00007f7570490281: mov    %rdx,0x18(%rsp)
  0x00007f7570490286: mov    %ecx,0x10(%rsp)
  0x00007f757049028a: vmovss %xmm0,0x8(%rsp)
  0x00007f7570490290: mov    0x40(%rbx),%rcx
  0x00007f7570490294: jmpq   *%rcx

AHE@0x00007f75800d4e30: 0xbbe60000 i2c: 0x00007f7570490360 c2i: 0x00007f757049047d c2iUV: 0x00007f7570490450
i2c argument handler #0 for: receiver (JF)V (574 bytes generated)
c2i argument handler starts at 0x7f757049047d
  0x00007f7570490360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570490364: movabs $0x7f757036e3e0,%r11
  0x00007f757049036e: cmp    %r11,%rax
  0x00007f7570490371: jbe    0x00007f757049038a
  0x00007f7570490377: movabs $0x7f757046e3e0,%r11
  0x00007f7570490381: cmp    %r11,%rax
  0x00007f7570490384: jb     0x00007f7570490427
  0x00007f757049038a: movabs $0x7f7570369420,%r11
  0x00007f7570490394: cmp    %r11,%rax
  0x00007f7570490397: jbe    0x00007f75704903b0
  0x00007f757049039d: movabs $0x7f757036de58,%r11
  0x00007f75704903a7: cmp    %r11,%rax
  0x00007f75704903aa: jb     0x00007f7570490427
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704903b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704903b5: sub    $0x80,%rsp
  0x00007f75704903bc: mov    %rax,0x78(%rsp)
  0x00007f75704903c1: mov    %rcx,0x70(%rsp)
  0x00007f75704903c6: mov    %rdx,0x68(%rsp)
  0x00007f75704903cb: mov    %rbx,0x60(%rsp)
  0x00007f75704903d0: mov    %rbp,0x50(%rsp)
  0x00007f75704903d5: mov    %rsi,0x48(%rsp)
  0x00007f75704903da: mov    %rdi,0x40(%rsp)
  0x00007f75704903df: mov    %r8,0x38(%rsp)
  0x00007f75704903e4: mov    %r9,0x30(%rsp)
  0x00007f75704903e9: mov    %r10,0x28(%rsp)
  0x00007f75704903ee: mov    %r11,0x20(%rsp)
  0x00007f75704903f3: mov    %r12,0x18(%rsp)
  0x00007f75704903f8: mov    %r13,0x10(%rsp)
  0x00007f75704903fd: mov    %r14,0x8(%rsp)
  0x00007f7570490402: mov    %r15,(%rsp)
  0x00007f7570490406: movabs $0x7f758592f470,%rdi
  0x00007f7570490410: movabs $0x7f75704903b0,%rsi
  0x00007f757049041a: mov    %rsp,%rdx
  0x00007f757049041d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490421: callq  0x00007f75853729fa
  0x00007f7570490426: hlt    
  ;; } verify_i2ce 
  0x00007f7570490427: mov    %rsp,%r11
  0x00007f757049042a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049042e: push   %rax
  0x00007f757049042f: mov    %r11,%rax
  0x00007f7570490432: mov    0x50(%rbx),%r11
  0x00007f7570490436: mov    0x20(%rax),%rsi
  0x00007f757049043a: mov    0x10(%rax),%rdx
  0x00007f757049043e: vmovss 0x8(%rax),%xmm0
  0x00007f7570490443: mov    %rbx,0x258(%r15)
  0x00007f757049044a: mov    %rbx,%rax
  0x00007f757049044d: jmpq   *%r11
  0x00007f7570490450: mov    0x8(%rsi),%ebx
  0x00007f7570490453: shl    $0x3,%rbx
  0x00007f7570490457: cmp    0x10(%rax),%rbx
  0x00007f757049045b: mov    0x8(%rax),%rbx
  0x00007f757049045f: je     0x00007f757049046a
  0x00007f7570490465: jmpq   0x00007f757046ec40
  0x00007f757049046a: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490472: je     0x00007f757049056d
  0x00007f7570490478: jmpq   0x00007f757046ec40
  0x00007f757049047d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490485: je     0x00007f757049056d
  0x00007f757049048b: mov    %rsp,%r13
  0x00007f757049048e: mov    (%rsp),%rax
  0x00007f7570490492: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490496: pushfq 
  0x00007f7570490497: sub    $0x8,%rsp
  0x00007f757049049b: mov    %rsp,-0x28(%rsp)
  0x00007f75704904a0: sub    $0x80,%rsp
  0x00007f75704904a7: mov    %rax,0x78(%rsp)
  0x00007f75704904ac: mov    %rcx,0x70(%rsp)
  0x00007f75704904b1: mov    %rdx,0x68(%rsp)
  0x00007f75704904b6: mov    %rbx,0x60(%rsp)
  0x00007f75704904bb: mov    %rbp,0x50(%rsp)
  0x00007f75704904c0: mov    %rsi,0x48(%rsp)
  0x00007f75704904c5: mov    %rdi,0x40(%rsp)
  0x00007f75704904ca: mov    %r8,0x38(%rsp)
  0x00007f75704904cf: mov    %r9,0x30(%rsp)
  0x00007f75704904d4: mov    %r10,0x28(%rsp)
  0x00007f75704904d9: mov    %r11,0x20(%rsp)
  0x00007f75704904de: mov    %r12,0x18(%rsp)
  0x00007f75704904e3: mov    %r13,0x10(%rsp)
  0x00007f75704904e8: mov    %r14,0x8(%rsp)
  0x00007f75704904ed: mov    %r15,(%rsp)
  0x00007f75704904f1: sub    $0x200,%rsp
  0x00007f75704904f8: fxsave64 (%rsp)
  0x00007f75704904fd: mov    %rbx,%rdi
  0x00007f7570490500: mov    %rax,%rsi
  0x00007f7570490503: callq  0x00007f7585522bca
  0x00007f7570490508: fxrstor64 (%rsp)
  0x00007f757049050d: add    $0x200,%rsp
  0x00007f7570490514: mov    (%rsp),%r15
  0x00007f7570490518: mov    0x8(%rsp),%r14
  0x00007f757049051d: mov    0x10(%rsp),%r13
  0x00007f7570490522: mov    0x18(%rsp),%r12
  0x00007f7570490527: mov    0x20(%rsp),%r11
  0x00007f757049052c: mov    0x28(%rsp),%r10
  0x00007f7570490531: mov    0x30(%rsp),%r9
  0x00007f7570490536: mov    0x38(%rsp),%r8
  0x00007f757049053b: mov    0x40(%rsp),%rdi
  0x00007f7570490540: mov    0x48(%rsp),%rsi
  0x00007f7570490545: mov    0x50(%rsp),%rbp
  0x00007f757049054a: mov    0x60(%rsp),%rbx
  0x00007f757049054f: mov    0x68(%rsp),%rdx
  0x00007f7570490554: mov    0x70(%rsp),%rcx
  0x00007f7570490559: mov    0x78(%rsp),%rax
  0x00007f757049055e: add    $0x80,%rsp
  0x00007f7570490565: add    $0x8,%rsp
  0x00007f7570490569: popfq  
  0x00007f757049056a: mov    %r13,%rsp
  0x00007f757049056d: pop    %rax
  0x00007f757049056e: mov    %rsp,%r13
  0x00007f7570490571: sub    $0x30,%rsp
  0x00007f7570490575: mov    %rax,(%rsp)
  0x00007f7570490579: mov    %rsi,0x20(%rsp)
  0x00007f757049057e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570490588: mov    %rax,0x18(%rsp)
  0x00007f757049058d: mov    %rdx,0x10(%rsp)
  0x00007f7570490592: vmovss %xmm0,0x8(%rsp)
  0x00007f7570490598: mov    0x40(%rbx),%rcx
  0x00007f757049059c: jmpq   *%rcx

AHE@0x00007f75800d4e78: 0xbbbe6000 i2c: 0x00007f7570490660 c2i: 0x00007f7570490781 c2iUV: 0x00007f7570490754
i2c argument handler #0 for: receiver (Ljava/lang/Object;JF)V (583 bytes generated)
c2i argument handler starts at 0x7f7570490781
  0x00007f7570490660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570490664: movabs $0x7f757036e3e0,%r11
  0x00007f757049066e: cmp    %r11,%rax
  0x00007f7570490671: jbe    0x00007f757049068a
  0x00007f7570490677: movabs $0x7f757046e3e0,%r11
  0x00007f7570490681: cmp    %r11,%rax
  0x00007f7570490684: jb     0x00007f7570490727
  0x00007f757049068a: movabs $0x7f7570369420,%r11
  0x00007f7570490694: cmp    %r11,%rax
  0x00007f7570490697: jbe    0x00007f75704906b0
  0x00007f757049069d: movabs $0x7f757036de58,%r11
  0x00007f75704906a7: cmp    %r11,%rax
  0x00007f75704906aa: jb     0x00007f7570490727
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704906b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704906b5: sub    $0x80,%rsp
  0x00007f75704906bc: mov    %rax,0x78(%rsp)
  0x00007f75704906c1: mov    %rcx,0x70(%rsp)
  0x00007f75704906c6: mov    %rdx,0x68(%rsp)
  0x00007f75704906cb: mov    %rbx,0x60(%rsp)
  0x00007f75704906d0: mov    %rbp,0x50(%rsp)
  0x00007f75704906d5: mov    %rsi,0x48(%rsp)
  0x00007f75704906da: mov    %rdi,0x40(%rsp)
  0x00007f75704906df: mov    %r8,0x38(%rsp)
  0x00007f75704906e4: mov    %r9,0x30(%rsp)
  0x00007f75704906e9: mov    %r10,0x28(%rsp)
  0x00007f75704906ee: mov    %r11,0x20(%rsp)
  0x00007f75704906f3: mov    %r12,0x18(%rsp)
  0x00007f75704906f8: mov    %r13,0x10(%rsp)
  0x00007f75704906fd: mov    %r14,0x8(%rsp)
  0x00007f7570490702: mov    %r15,(%rsp)
  0x00007f7570490706: movabs $0x7f758592f470,%rdi
  0x00007f7570490710: movabs $0x7f75704906b0,%rsi
  0x00007f757049071a: mov    %rsp,%rdx
  0x00007f757049071d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490721: callq  0x00007f75853729fa
  0x00007f7570490726: hlt    
  ;; } verify_i2ce 
  0x00007f7570490727: mov    %rsp,%r11
  0x00007f757049072a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049072e: push   %rax
  0x00007f757049072f: mov    %r11,%rax
  0x00007f7570490732: mov    0x50(%rbx),%r11
  0x00007f7570490736: mov    0x28(%rax),%rsi
  0x00007f757049073a: mov    0x20(%rax),%rdx
  0x00007f757049073e: mov    0x10(%rax),%rcx
  0x00007f7570490742: vmovss 0x8(%rax),%xmm0
  0x00007f7570490747: mov    %rbx,0x258(%r15)
  0x00007f757049074e: mov    %rbx,%rax
  0x00007f7570490751: jmpq   *%r11
  0x00007f7570490754: mov    0x8(%rsi),%ebx
  0x00007f7570490757: shl    $0x3,%rbx
  0x00007f757049075b: cmp    0x10(%rax),%rbx
  0x00007f757049075f: mov    0x8(%rax),%rbx
  0x00007f7570490763: je     0x00007f757049076e
  0x00007f7570490769: jmpq   0x00007f757046ec40
  0x00007f757049076e: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490776: je     0x00007f7570490871
  0x00007f757049077c: jmpq   0x00007f757046ec40
  0x00007f7570490781: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490789: je     0x00007f7570490871
  0x00007f757049078f: mov    %rsp,%r13
  0x00007f7570490792: mov    (%rsp),%rax
  0x00007f7570490796: and    $0xfffffffffffffff0,%rsp
  0x00007f757049079a: pushfq 
  0x00007f757049079b: sub    $0x8,%rsp
  0x00007f757049079f: mov    %rsp,-0x28(%rsp)
  0x00007f75704907a4: sub    $0x80,%rsp
  0x00007f75704907ab: mov    %rax,0x78(%rsp)
  0x00007f75704907b0: mov    %rcx,0x70(%rsp)
  0x00007f75704907b5: mov    %rdx,0x68(%rsp)
  0x00007f75704907ba: mov    %rbx,0x60(%rsp)
  0x00007f75704907bf: mov    %rbp,0x50(%rsp)
  0x00007f75704907c4: mov    %rsi,0x48(%rsp)
  0x00007f75704907c9: mov    %rdi,0x40(%rsp)
  0x00007f75704907ce: mov    %r8,0x38(%rsp)
  0x00007f75704907d3: mov    %r9,0x30(%rsp)
  0x00007f75704907d8: mov    %r10,0x28(%rsp)
  0x00007f75704907dd: mov    %r11,0x20(%rsp)
  0x00007f75704907e2: mov    %r12,0x18(%rsp)
  0x00007f75704907e7: mov    %r13,0x10(%rsp)
  0x00007f75704907ec: mov    %r14,0x8(%rsp)
  0x00007f75704907f1: mov    %r15,(%rsp)
  0x00007f75704907f5: sub    $0x200,%rsp
  0x00007f75704907fc: fxsave64 (%rsp)
  0x00007f7570490801: mov    %rbx,%rdi
  0x00007f7570490804: mov    %rax,%rsi
  0x00007f7570490807: callq  0x00007f7585522bca
  0x00007f757049080c: fxrstor64 (%rsp)
  0x00007f7570490811: add    $0x200,%rsp
  0x00007f7570490818: mov    (%rsp),%r15
  0x00007f757049081c: mov    0x8(%rsp),%r14
  0x00007f7570490821: mov    0x10(%rsp),%r13
  0x00007f7570490826: mov    0x18(%rsp),%r12
  0x00007f757049082b: mov    0x20(%rsp),%r11
  0x00007f7570490830: mov    0x28(%rsp),%r10
  0x00007f7570490835: mov    0x30(%rsp),%r9
  0x00007f757049083a: mov    0x38(%rsp),%r8
  0x00007f757049083f: mov    0x40(%rsp),%rdi
  0x00007f7570490844: mov    0x48(%rsp),%rsi
  0x00007f7570490849: mov    0x50(%rsp),%rbp
  0x00007f757049084e: mov    0x60(%rsp),%rbx
  0x00007f7570490853: mov    0x68(%rsp),%rdx
  0x00007f7570490858: mov    0x70(%rsp),%rcx
  0x00007f757049085d: mov    0x78(%rsp),%rax
  0x00007f7570490862: add    $0x80,%rsp
  0x00007f7570490869: add    $0x8,%rsp
  0x00007f757049086d: popfq  
  0x00007f757049086e: mov    %r13,%rsp
  0x00007f7570490871: pop    %rax
  0x00007f7570490872: mov    %rsp,%r13
  0x00007f7570490875: sub    $0x30,%rsp
  0x00007f7570490879: mov    %rax,(%rsp)
  0x00007f757049087d: mov    %rsi,0x28(%rsp)
  0x00007f7570490882: mov    %rdx,0x20(%rsp)
  0x00007f7570490887: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570490891: mov    %rax,0x18(%rsp)
  0x00007f7570490896: mov    %rcx,0x10(%rsp)
  0x00007f757049089b: vmovss %xmm0,0x8(%rsp)
  0x00007f75704908a1: mov    0x40(%rbx),%rcx
  0x00007f75704908a5: jmpq   *%rcx

AHE@0x00007f75800d4ec0: 0xbba00000 i2c: 0x00007f7570490960 c2i: 0x00007f7570490a7b c2iUV: 0x00007f7570490a4e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)F (555 bytes generated)
c2i argument handler starts at 0x7f7570490a7b
  0x00007f7570490960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570490964: movabs $0x7f757036e3e0,%r11
  0x00007f757049096e: cmp    %r11,%rax
  0x00007f7570490971: jbe    0x00007f757049098a
  0x00007f7570490977: movabs $0x7f757046e3e0,%r11
  0x00007f7570490981: cmp    %r11,%rax
  0x00007f7570490984: jb     0x00007f7570490a27
  0x00007f757049098a: movabs $0x7f7570369420,%r11
  0x00007f7570490994: cmp    %r11,%rax
  0x00007f7570490997: jbe    0x00007f75704909b0
  0x00007f757049099d: movabs $0x7f757036de58,%r11
  0x00007f75704909a7: cmp    %r11,%rax
  0x00007f75704909aa: jb     0x00007f7570490a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704909b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704909b5: sub    $0x80,%rsp
  0x00007f75704909bc: mov    %rax,0x78(%rsp)
  0x00007f75704909c1: mov    %rcx,0x70(%rsp)
  0x00007f75704909c6: mov    %rdx,0x68(%rsp)
  0x00007f75704909cb: mov    %rbx,0x60(%rsp)
  0x00007f75704909d0: mov    %rbp,0x50(%rsp)
  0x00007f75704909d5: mov    %rsi,0x48(%rsp)
  0x00007f75704909da: mov    %rdi,0x40(%rsp)
  0x00007f75704909df: mov    %r8,0x38(%rsp)
  0x00007f75704909e4: mov    %r9,0x30(%rsp)
  0x00007f75704909e9: mov    %r10,0x28(%rsp)
  0x00007f75704909ee: mov    %r11,0x20(%rsp)
  0x00007f75704909f3: mov    %r12,0x18(%rsp)
  0x00007f75704909f8: mov    %r13,0x10(%rsp)
  0x00007f75704909fd: mov    %r14,0x8(%rsp)
  0x00007f7570490a02: mov    %r15,(%rsp)
  0x00007f7570490a06: movabs $0x7f758592f470,%rdi
  0x00007f7570490a10: movabs $0x7f75704909b0,%rsi
  0x00007f7570490a1a: mov    %rsp,%rdx
  0x00007f7570490a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490a21: callq  0x00007f75853729fa
  0x00007f7570490a26: hlt    
  ;; } verify_i2ce 
  0x00007f7570490a27: mov    %rsp,%r11
  0x00007f7570490a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490a2e: push   %rax
  0x00007f7570490a2f: mov    %r11,%rax
  0x00007f7570490a32: mov    0x50(%rbx),%r11
  0x00007f7570490a36: mov    0x18(%rax),%rsi
  0x00007f7570490a3a: mov    0x10(%rax),%rdx
  0x00007f7570490a3e: mov    0x8(%rax),%ecx
  0x00007f7570490a41: mov    %rbx,0x258(%r15)
  0x00007f7570490a48: mov    %rbx,%rax
  0x00007f7570490a4b: jmpq   *%r11
  0x00007f7570490a4e: mov    0x8(%rsi),%ebx
  0x00007f7570490a51: shl    $0x3,%rbx
  0x00007f7570490a55: cmp    0x10(%rax),%rbx
  0x00007f7570490a59: mov    0x8(%rax),%rbx
  0x00007f7570490a5d: je     0x00007f7570490a68
  0x00007f7570490a63: jmpq   0x00007f757046ec40
  0x00007f7570490a68: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490a70: je     0x00007f7570490b6b
  0x00007f7570490a76: jmpq   0x00007f757046ec40
  0x00007f7570490a7b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490a83: je     0x00007f7570490b6b
  0x00007f7570490a89: mov    %rsp,%r13
  0x00007f7570490a8c: mov    (%rsp),%rax
  0x00007f7570490a90: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490a94: pushfq 
  0x00007f7570490a95: sub    $0x8,%rsp
  0x00007f7570490a99: mov    %rsp,-0x28(%rsp)
  0x00007f7570490a9e: sub    $0x80,%rsp
  0x00007f7570490aa5: mov    %rax,0x78(%rsp)
  0x00007f7570490aaa: mov    %rcx,0x70(%rsp)
  0x00007f7570490aaf: mov    %rdx,0x68(%rsp)
  0x00007f7570490ab4: mov    %rbx,0x60(%rsp)
  0x00007f7570490ab9: mov    %rbp,0x50(%rsp)
  0x00007f7570490abe: mov    %rsi,0x48(%rsp)
  0x00007f7570490ac3: mov    %rdi,0x40(%rsp)
  0x00007f7570490ac8: mov    %r8,0x38(%rsp)
  0x00007f7570490acd: mov    %r9,0x30(%rsp)
  0x00007f7570490ad2: mov    %r10,0x28(%rsp)
  0x00007f7570490ad7: mov    %r11,0x20(%rsp)
  0x00007f7570490adc: mov    %r12,0x18(%rsp)
  0x00007f7570490ae1: mov    %r13,0x10(%rsp)
  0x00007f7570490ae6: mov    %r14,0x8(%rsp)
  0x00007f7570490aeb: mov    %r15,(%rsp)
  0x00007f7570490aef: sub    $0x200,%rsp
  0x00007f7570490af6: fxsave64 (%rsp)
  0x00007f7570490afb: mov    %rbx,%rdi
  0x00007f7570490afe: mov    %rax,%rsi
  0x00007f7570490b01: callq  0x00007f7585522bca
  0x00007f7570490b06: fxrstor64 (%rsp)
  0x00007f7570490b0b: add    $0x200,%rsp
  0x00007f7570490b12: mov    (%rsp),%r15
  0x00007f7570490b16: mov    0x8(%rsp),%r14
  0x00007f7570490b1b: mov    0x10(%rsp),%r13
  0x00007f7570490b20: mov    0x18(%rsp),%r12
  0x00007f7570490b25: mov    0x20(%rsp),%r11
  0x00007f7570490b2a: mov    0x28(%rsp),%r10
  0x00007f7570490b2f: mov    0x30(%rsp),%r9
  0x00007f7570490b34: mov    0x38(%rsp),%r8
  0x00007f7570490b39: mov    0x40(%rsp),%rdi
  0x00007f7570490b3e: mov    0x48(%rsp),%rsi
  0x00007f7570490b43: mov    0x50(%rsp),%rbp
  0x00007f7570490b48: mov    0x60(%rsp),%rbx
  0x00007f7570490b4d: mov    0x68(%rsp),%rdx
  0x00007f7570490b52: mov    0x70(%rsp),%rcx
  0x00007f7570490b57: mov    0x78(%rsp),%rax
  0x00007f7570490b5c: add    $0x80,%rsp
  0x00007f7570490b63: add    $0x8,%rsp
  0x00007f7570490b67: popfq  
  0x00007f7570490b68: mov    %r13,%rsp
  0x00007f7570490b6b: pop    %rax
  0x00007f7570490b6c: mov    %rsp,%r13
  0x00007f7570490b6f: sub    $0x20,%rsp
  0x00007f7570490b73: mov    %rax,(%rsp)
  0x00007f7570490b77: mov    %rsi,0x18(%rsp)
  0x00007f7570490b7c: mov    %rdx,0x10(%rsp)
  0x00007f7570490b81: mov    %ecx,0x8(%rsp)
  0x00007f7570490b85: mov    0x40(%rbx),%rcx
  0x00007f7570490b89: jmpq   *%rcx

AHE@0x00007f75800d4f08: 0xbbe00000 i2c: 0x00007f7570490c60 c2i: 0x00007f7570490d78 c2iUV: 0x00007f7570490d4b
i2c argument handler #0 for: receiver (J)F (563 bytes generated)
c2i argument handler starts at 0x7f7570490d78
  0x00007f7570490c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570490c64: movabs $0x7f757036e3e0,%r11
  0x00007f7570490c6e: cmp    %r11,%rax
  0x00007f7570490c71: jbe    0x00007f7570490c8a
  0x00007f7570490c77: movabs $0x7f757046e3e0,%r11
  0x00007f7570490c81: cmp    %r11,%rax
  0x00007f7570490c84: jb     0x00007f7570490d27
  0x00007f7570490c8a: movabs $0x7f7570369420,%r11
  0x00007f7570490c94: cmp    %r11,%rax
  0x00007f7570490c97: jbe    0x00007f7570490cb0
  0x00007f7570490c9d: movabs $0x7f757036de58,%r11
  0x00007f7570490ca7: cmp    %r11,%rax
  0x00007f7570490caa: jb     0x00007f7570490d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570490cb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570490cb5: sub    $0x80,%rsp
  0x00007f7570490cbc: mov    %rax,0x78(%rsp)
  0x00007f7570490cc1: mov    %rcx,0x70(%rsp)
  0x00007f7570490cc6: mov    %rdx,0x68(%rsp)
  0x00007f7570490ccb: mov    %rbx,0x60(%rsp)
  0x00007f7570490cd0: mov    %rbp,0x50(%rsp)
  0x00007f7570490cd5: mov    %rsi,0x48(%rsp)
  0x00007f7570490cda: mov    %rdi,0x40(%rsp)
  0x00007f7570490cdf: mov    %r8,0x38(%rsp)
  0x00007f7570490ce4: mov    %r9,0x30(%rsp)
  0x00007f7570490ce9: mov    %r10,0x28(%rsp)
  0x00007f7570490cee: mov    %r11,0x20(%rsp)
  0x00007f7570490cf3: mov    %r12,0x18(%rsp)
  0x00007f7570490cf8: mov    %r13,0x10(%rsp)
  0x00007f7570490cfd: mov    %r14,0x8(%rsp)
  0x00007f7570490d02: mov    %r15,(%rsp)
  0x00007f7570490d06: movabs $0x7f758592f470,%rdi
  0x00007f7570490d10: movabs $0x7f7570490cb0,%rsi
  0x00007f7570490d1a: mov    %rsp,%rdx
  0x00007f7570490d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490d21: callq  0x00007f75853729fa
  0x00007f7570490d26: hlt    
  ;; } verify_i2ce 
  0x00007f7570490d27: mov    %rsp,%r11
  0x00007f7570490d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490d2e: push   %rax
  0x00007f7570490d2f: mov    %r11,%rax
  0x00007f7570490d32: mov    0x50(%rbx),%r11
  0x00007f7570490d36: mov    0x18(%rax),%rsi
  0x00007f7570490d3a: mov    0x8(%rax),%rdx
  0x00007f7570490d3e: mov    %rbx,0x258(%r15)
  0x00007f7570490d45: mov    %rbx,%rax
  0x00007f7570490d48: jmpq   *%r11
  0x00007f7570490d4b: mov    0x8(%rsi),%ebx
  0x00007f7570490d4e: shl    $0x3,%rbx
  0x00007f7570490d52: cmp    0x10(%rax),%rbx
  0x00007f7570490d56: mov    0x8(%rax),%rbx
  0x00007f7570490d5a: je     0x00007f7570490d65
  0x00007f7570490d60: jmpq   0x00007f757046ec40
  0x00007f7570490d65: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490d6d: je     0x00007f7570490e68
  0x00007f7570490d73: jmpq   0x00007f757046ec40
  0x00007f7570490d78: cmpq   $0x0,0x58(%rbx)
  0x00007f7570490d80: je     0x00007f7570490e68
  0x00007f7570490d86: mov    %rsp,%r13
  0x00007f7570490d89: mov    (%rsp),%rax
  0x00007f7570490d8d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570490d91: pushfq 
  0x00007f7570490d92: sub    $0x8,%rsp
  0x00007f7570490d96: mov    %rsp,-0x28(%rsp)
  0x00007f7570490d9b: sub    $0x80,%rsp
  0x00007f7570490da2: mov    %rax,0x78(%rsp)
  0x00007f7570490da7: mov    %rcx,0x70(%rsp)
  0x00007f7570490dac: mov    %rdx,0x68(%rsp)
  0x00007f7570490db1: mov    %rbx,0x60(%rsp)
  0x00007f7570490db6: mov    %rbp,0x50(%rsp)
  0x00007f7570490dbb: mov    %rsi,0x48(%rsp)
  0x00007f7570490dc0: mov    %rdi,0x40(%rsp)
  0x00007f7570490dc5: mov    %r8,0x38(%rsp)
  0x00007f7570490dca: mov    %r9,0x30(%rsp)
  0x00007f7570490dcf: mov    %r10,0x28(%rsp)
  0x00007f7570490dd4: mov    %r11,0x20(%rsp)
  0x00007f7570490dd9: mov    %r12,0x18(%rsp)
  0x00007f7570490dde: mov    %r13,0x10(%rsp)
  0x00007f7570490de3: mov    %r14,0x8(%rsp)
  0x00007f7570490de8: mov    %r15,(%rsp)
  0x00007f7570490dec: sub    $0x200,%rsp
  0x00007f7570490df3: fxsave64 (%rsp)
  0x00007f7570490df8: mov    %rbx,%rdi
  0x00007f7570490dfb: mov    %rax,%rsi
  0x00007f7570490dfe: callq  0x00007f7585522bca
  0x00007f7570490e03: fxrstor64 (%rsp)
  0x00007f7570490e08: add    $0x200,%rsp
  0x00007f7570490e0f: mov    (%rsp),%r15
  0x00007f7570490e13: mov    0x8(%rsp),%r14
  0x00007f7570490e18: mov    0x10(%rsp),%r13
  0x00007f7570490e1d: mov    0x18(%rsp),%r12
  0x00007f7570490e22: mov    0x20(%rsp),%r11
  0x00007f7570490e27: mov    0x28(%rsp),%r10
  0x00007f7570490e2c: mov    0x30(%rsp),%r9
  0x00007f7570490e31: mov    0x38(%rsp),%r8
  0x00007f7570490e36: mov    0x40(%rsp),%rdi
  0x00007f7570490e3b: mov    0x48(%rsp),%rsi
  0x00007f7570490e40: mov    0x50(%rsp),%rbp
  0x00007f7570490e45: mov    0x60(%rsp),%rbx
  0x00007f7570490e4a: mov    0x68(%rsp),%rdx
  0x00007f7570490e4f: mov    0x70(%rsp),%rcx
  0x00007f7570490e54: mov    0x78(%rsp),%rax
  0x00007f7570490e59: add    $0x80,%rsp
  0x00007f7570490e60: add    $0x8,%rsp
  0x00007f7570490e64: popfq  
  0x00007f7570490e65: mov    %r13,%rsp
  0x00007f7570490e68: pop    %rax
  0x00007f7570490e69: mov    %rsp,%r13
  0x00007f7570490e6c: sub    $0x20,%rsp
  0x00007f7570490e70: mov    %rax,(%rsp)
  0x00007f7570490e74: mov    %rsi,0x18(%rsp)
  0x00007f7570490e79: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570490e83: mov    %rax,0x10(%rsp)
  0x00007f7570490e88: mov    %rdx,0x8(%rsp)
  0x00007f7570490e8d: mov    0x40(%rbx),%rcx
  0x00007f7570490e91: jmpq   *%rcx

AHE@0x00007f75800d4f50: 0xbbbe0000 i2c: 0x00007f7570490f60 c2i: 0x00007f757049107c c2iUV: 0x00007f757049104f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)F (572 bytes generated)
c2i argument handler starts at 0x7f757049107c
  0x00007f7570490f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570490f64: movabs $0x7f757036e3e0,%r11
  0x00007f7570490f6e: cmp    %r11,%rax
  0x00007f7570490f71: jbe    0x00007f7570490f8a
  0x00007f7570490f77: movabs $0x7f757046e3e0,%r11
  0x00007f7570490f81: cmp    %r11,%rax
  0x00007f7570490f84: jb     0x00007f7570491027
  0x00007f7570490f8a: movabs $0x7f7570369420,%r11
  0x00007f7570490f94: cmp    %r11,%rax
  0x00007f7570490f97: jbe    0x00007f7570490fb0
  0x00007f7570490f9d: movabs $0x7f757036de58,%r11
  0x00007f7570490fa7: cmp    %r11,%rax
  0x00007f7570490faa: jb     0x00007f7570491027
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570490fb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570490fb5: sub    $0x80,%rsp
  0x00007f7570490fbc: mov    %rax,0x78(%rsp)
  0x00007f7570490fc1: mov    %rcx,0x70(%rsp)
  0x00007f7570490fc6: mov    %rdx,0x68(%rsp)
  0x00007f7570490fcb: mov    %rbx,0x60(%rsp)
  0x00007f7570490fd0: mov    %rbp,0x50(%rsp)
  0x00007f7570490fd5: mov    %rsi,0x48(%rsp)
  0x00007f7570490fda: mov    %rdi,0x40(%rsp)
  0x00007f7570490fdf: mov    %r8,0x38(%rsp)
  0x00007f7570490fe4: mov    %r9,0x30(%rsp)
  0x00007f7570490fe9: mov    %r10,0x28(%rsp)
  0x00007f7570490fee: mov    %r11,0x20(%rsp)
  0x00007f7570490ff3: mov    %r12,0x18(%rsp)
  0x00007f7570490ff8: mov    %r13,0x10(%rsp)
  0x00007f7570490ffd: mov    %r14,0x8(%rsp)
  0x00007f7570491002: mov    %r15,(%rsp)
  0x00007f7570491006: movabs $0x7f758592f470,%rdi
  0x00007f7570491010: movabs $0x7f7570490fb0,%rsi
  0x00007f757049101a: mov    %rsp,%rdx
  0x00007f757049101d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491021: callq  0x00007f75853729fa
  0x00007f7570491026: hlt    
  ;; } verify_i2ce 
  0x00007f7570491027: mov    %rsp,%r11
  0x00007f757049102a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049102e: push   %rax
  0x00007f757049102f: mov    %r11,%rax
  0x00007f7570491032: mov    0x50(%rbx),%r11
  0x00007f7570491036: mov    0x20(%rax),%rsi
  0x00007f757049103a: mov    0x18(%rax),%rdx
  0x00007f757049103e: mov    0x8(%rax),%rcx
  0x00007f7570491042: mov    %rbx,0x258(%r15)
  0x00007f7570491049: mov    %rbx,%rax
  0x00007f757049104c: jmpq   *%r11
  0x00007f757049104f: mov    0x8(%rsi),%ebx
  0x00007f7570491052: shl    $0x3,%rbx
  0x00007f7570491056: cmp    0x10(%rax),%rbx
  0x00007f757049105a: mov    0x8(%rax),%rbx
  0x00007f757049105e: je     0x00007f7570491069
  0x00007f7570491064: jmpq   0x00007f757046ec40
  0x00007f7570491069: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491071: je     0x00007f757049116c
  0x00007f7570491077: jmpq   0x00007f757046ec40
  0x00007f757049107c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491084: je     0x00007f757049116c
  0x00007f757049108a: mov    %rsp,%r13
  0x00007f757049108d: mov    (%rsp),%rax
  0x00007f7570491091: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491095: pushfq 
  0x00007f7570491096: sub    $0x8,%rsp
  0x00007f757049109a: mov    %rsp,-0x28(%rsp)
  0x00007f757049109f: sub    $0x80,%rsp
  0x00007f75704910a6: mov    %rax,0x78(%rsp)
  0x00007f75704910ab: mov    %rcx,0x70(%rsp)
  0x00007f75704910b0: mov    %rdx,0x68(%rsp)
  0x00007f75704910b5: mov    %rbx,0x60(%rsp)
  0x00007f75704910ba: mov    %rbp,0x50(%rsp)
  0x00007f75704910bf: mov    %rsi,0x48(%rsp)
  0x00007f75704910c4: mov    %rdi,0x40(%rsp)
  0x00007f75704910c9: mov    %r8,0x38(%rsp)
  0x00007f75704910ce: mov    %r9,0x30(%rsp)
  0x00007f75704910d3: mov    %r10,0x28(%rsp)
  0x00007f75704910d8: mov    %r11,0x20(%rsp)
  0x00007f75704910dd: mov    %r12,0x18(%rsp)
  0x00007f75704910e2: mov    %r13,0x10(%rsp)
  0x00007f75704910e7: mov    %r14,0x8(%rsp)
  0x00007f75704910ec: mov    %r15,(%rsp)
  0x00007f75704910f0: sub    $0x200,%rsp
  0x00007f75704910f7: fxsave64 (%rsp)
  0x00007f75704910fc: mov    %rbx,%rdi
  0x00007f75704910ff: mov    %rax,%rsi
  0x00007f7570491102: callq  0x00007f7585522bca
  0x00007f7570491107: fxrstor64 (%rsp)
  0x00007f757049110c: add    $0x200,%rsp
  0x00007f7570491113: mov    (%rsp),%r15
  0x00007f7570491117: mov    0x8(%rsp),%r14
  0x00007f757049111c: mov    0x10(%rsp),%r13
  0x00007f7570491121: mov    0x18(%rsp),%r12
  0x00007f7570491126: mov    0x20(%rsp),%r11
  0x00007f757049112b: mov    0x28(%rsp),%r10
  0x00007f7570491130: mov    0x30(%rsp),%r9
  0x00007f7570491135: mov    0x38(%rsp),%r8
  0x00007f757049113a: mov    0x40(%rsp),%rdi
  0x00007f757049113f: mov    0x48(%rsp),%rsi
  0x00007f7570491144: mov    0x50(%rsp),%rbp
  0x00007f7570491149: mov    0x60(%rsp),%rbx
  0x00007f757049114e: mov    0x68(%rsp),%rdx
  0x00007f7570491153: mov    0x70(%rsp),%rcx
  0x00007f7570491158: mov    0x78(%rsp),%rax
  0x00007f757049115d: add    $0x80,%rsp
  0x00007f7570491164: add    $0x8,%rsp
  0x00007f7570491168: popfq  
  0x00007f7570491169: mov    %r13,%rsp
  0x00007f757049116c: pop    %rax
  0x00007f757049116d: mov    %rsp,%r13
  0x00007f7570491170: sub    $0x30,%rsp
  0x00007f7570491174: mov    %rax,(%rsp)
  0x00007f7570491178: mov    %rsi,0x20(%rsp)
  0x00007f757049117d: mov    %rdx,0x18(%rsp)
  0x00007f7570491182: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049118c: mov    %rax,0x10(%rsp)
  0x00007f7570491191: mov    %rcx,0x8(%rsp)
  0x00007f7570491196: mov    0x40(%rbx),%rcx
  0x00007f757049119a: jmpq   *%rcx

AHE@0x00007f75800d4f98: 0xbbabe000 i2c: 0x00007f7570491260 c2i: 0x00007f757049137f c2iUV: 0x00007f7570491352
i2c argument handler #0 for: receiver (Ljava/lang/Object;IJ)V (579 bytes generated)
c2i argument handler starts at 0x7f757049137f
  0x00007f7570491260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570491264: movabs $0x7f757036e3e0,%r11
  0x00007f757049126e: cmp    %r11,%rax
  0x00007f7570491271: jbe    0x00007f757049128a
  0x00007f7570491277: movabs $0x7f757046e3e0,%r11
  0x00007f7570491281: cmp    %r11,%rax
  0x00007f7570491284: jb     0x00007f7570491327
  0x00007f757049128a: movabs $0x7f7570369420,%r11
  0x00007f7570491294: cmp    %r11,%rax
  0x00007f7570491297: jbe    0x00007f75704912b0
  0x00007f757049129d: movabs $0x7f757036de58,%r11
  0x00007f75704912a7: cmp    %r11,%rax
  0x00007f75704912aa: jb     0x00007f7570491327
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704912b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704912b5: sub    $0x80,%rsp
  0x00007f75704912bc: mov    %rax,0x78(%rsp)
  0x00007f75704912c1: mov    %rcx,0x70(%rsp)
  0x00007f75704912c6: mov    %rdx,0x68(%rsp)
  0x00007f75704912cb: mov    %rbx,0x60(%rsp)
  0x00007f75704912d0: mov    %rbp,0x50(%rsp)
  0x00007f75704912d5: mov    %rsi,0x48(%rsp)
  0x00007f75704912da: mov    %rdi,0x40(%rsp)
  0x00007f75704912df: mov    %r8,0x38(%rsp)
  0x00007f75704912e4: mov    %r9,0x30(%rsp)
  0x00007f75704912e9: mov    %r10,0x28(%rsp)
  0x00007f75704912ee: mov    %r11,0x20(%rsp)
  0x00007f75704912f3: mov    %r12,0x18(%rsp)
  0x00007f75704912f8: mov    %r13,0x10(%rsp)
  0x00007f75704912fd: mov    %r14,0x8(%rsp)
  0x00007f7570491302: mov    %r15,(%rsp)
  0x00007f7570491306: movabs $0x7f758592f470,%rdi
  0x00007f7570491310: movabs $0x7f75704912b0,%rsi
  0x00007f757049131a: mov    %rsp,%rdx
  0x00007f757049131d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491321: callq  0x00007f75853729fa
  0x00007f7570491326: hlt    
  ;; } verify_i2ce 
  0x00007f7570491327: mov    %rsp,%r11
  0x00007f757049132a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049132e: push   %rax
  0x00007f757049132f: mov    %r11,%rax
  0x00007f7570491332: mov    0x50(%rbx),%r11
  0x00007f7570491336: mov    0x28(%rax),%rsi
  0x00007f757049133a: mov    0x20(%rax),%rdx
  0x00007f757049133e: mov    0x18(%rax),%ecx
  0x00007f7570491341: mov    0x8(%rax),%r8
  0x00007f7570491345: mov    %rbx,0x258(%r15)
  0x00007f757049134c: mov    %rbx,%rax
  0x00007f757049134f: jmpq   *%r11
  0x00007f7570491352: mov    0x8(%rsi),%ebx
  0x00007f7570491355: shl    $0x3,%rbx
  0x00007f7570491359: cmp    0x10(%rax),%rbx
  0x00007f757049135d: mov    0x8(%rax),%rbx
  0x00007f7570491361: je     0x00007f757049136c
  0x00007f7570491367: jmpq   0x00007f757046ec40
  0x00007f757049136c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491374: je     0x00007f757049146f
  0x00007f757049137a: jmpq   0x00007f757046ec40
  0x00007f757049137f: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491387: je     0x00007f757049146f
  0x00007f757049138d: mov    %rsp,%r13
  0x00007f7570491390: mov    (%rsp),%rax
  0x00007f7570491394: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491398: pushfq 
  0x00007f7570491399: sub    $0x8,%rsp
  0x00007f757049139d: mov    %rsp,-0x28(%rsp)
  0x00007f75704913a2: sub    $0x80,%rsp
  0x00007f75704913a9: mov    %rax,0x78(%rsp)
  0x00007f75704913ae: mov    %rcx,0x70(%rsp)
  0x00007f75704913b3: mov    %rdx,0x68(%rsp)
  0x00007f75704913b8: mov    %rbx,0x60(%rsp)
  0x00007f75704913bd: mov    %rbp,0x50(%rsp)
  0x00007f75704913c2: mov    %rsi,0x48(%rsp)
  0x00007f75704913c7: mov    %rdi,0x40(%rsp)
  0x00007f75704913cc: mov    %r8,0x38(%rsp)
  0x00007f75704913d1: mov    %r9,0x30(%rsp)
  0x00007f75704913d6: mov    %r10,0x28(%rsp)
  0x00007f75704913db: mov    %r11,0x20(%rsp)
  0x00007f75704913e0: mov    %r12,0x18(%rsp)
  0x00007f75704913e5: mov    %r13,0x10(%rsp)
  0x00007f75704913ea: mov    %r14,0x8(%rsp)
  0x00007f75704913ef: mov    %r15,(%rsp)
  0x00007f75704913f3: sub    $0x200,%rsp
  0x00007f75704913fa: fxsave64 (%rsp)
  0x00007f75704913ff: mov    %rbx,%rdi
  0x00007f7570491402: mov    %rax,%rsi
  0x00007f7570491405: callq  0x00007f7585522bca
  0x00007f757049140a: fxrstor64 (%rsp)
  0x00007f757049140f: add    $0x200,%rsp
  0x00007f7570491416: mov    (%rsp),%r15
  0x00007f757049141a: mov    0x8(%rsp),%r14
  0x00007f757049141f: mov    0x10(%rsp),%r13
  0x00007f7570491424: mov    0x18(%rsp),%r12
  0x00007f7570491429: mov    0x20(%rsp),%r11
  0x00007f757049142e: mov    0x28(%rsp),%r10
  0x00007f7570491433: mov    0x30(%rsp),%r9
  0x00007f7570491438: mov    0x38(%rsp),%r8
  0x00007f757049143d: mov    0x40(%rsp),%rdi
  0x00007f7570491442: mov    0x48(%rsp),%rsi
  0x00007f7570491447: mov    0x50(%rsp),%rbp
  0x00007f757049144c: mov    0x60(%rsp),%rbx
  0x00007f7570491451: mov    0x68(%rsp),%rdx
  0x00007f7570491456: mov    0x70(%rsp),%rcx
  0x00007f757049145b: mov    0x78(%rsp),%rax
  0x00007f7570491460: add    $0x80,%rsp
  0x00007f7570491467: add    $0x8,%rsp
  0x00007f757049146b: popfq  
  0x00007f757049146c: mov    %r13,%rsp
  0x00007f757049146f: pop    %rax
  0x00007f7570491470: mov    %rsp,%r13
  0x00007f7570491473: sub    $0x30,%rsp
  0x00007f7570491477: mov    %rax,(%rsp)
  0x00007f757049147b: mov    %rsi,0x28(%rsp)
  0x00007f7570491480: mov    %rdx,0x20(%rsp)
  0x00007f7570491485: mov    %ecx,0x18(%rsp)
  0x00007f7570491489: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570491493: mov    %rax,0x10(%rsp)
  0x00007f7570491498: mov    %r8,0x8(%rsp)
  0x00007f757049149d: mov    0x40(%rbx),%rcx
  0x00007f75704914a1: jmpq   *%rcx

AHE@0x00007f75800d4fe0: 0xbbbebe00 i2c: 0x00007f7570491560 c2i: 0x00007f7570491680 c2iUV: 0x00007f7570491653
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (596 bytes generated)
c2i argument handler starts at 0x7f7570491680
  0x00007f7570491560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570491564: movabs $0x7f757036e3e0,%r11
  0x00007f757049156e: cmp    %r11,%rax
  0x00007f7570491571: jbe    0x00007f757049158a
  0x00007f7570491577: movabs $0x7f757046e3e0,%r11
  0x00007f7570491581: cmp    %r11,%rax
  0x00007f7570491584: jb     0x00007f7570491627
  0x00007f757049158a: movabs $0x7f7570369420,%r11
  0x00007f7570491594: cmp    %r11,%rax
  0x00007f7570491597: jbe    0x00007f75704915b0
  0x00007f757049159d: movabs $0x7f757036de58,%r11
  0x00007f75704915a7: cmp    %r11,%rax
  0x00007f75704915aa: jb     0x00007f7570491627
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704915b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704915b5: sub    $0x80,%rsp
  0x00007f75704915bc: mov    %rax,0x78(%rsp)
  0x00007f75704915c1: mov    %rcx,0x70(%rsp)
  0x00007f75704915c6: mov    %rdx,0x68(%rsp)
  0x00007f75704915cb: mov    %rbx,0x60(%rsp)
  0x00007f75704915d0: mov    %rbp,0x50(%rsp)
  0x00007f75704915d5: mov    %rsi,0x48(%rsp)
  0x00007f75704915da: mov    %rdi,0x40(%rsp)
  0x00007f75704915df: mov    %r8,0x38(%rsp)
  0x00007f75704915e4: mov    %r9,0x30(%rsp)
  0x00007f75704915e9: mov    %r10,0x28(%rsp)
  0x00007f75704915ee: mov    %r11,0x20(%rsp)
  0x00007f75704915f3: mov    %r12,0x18(%rsp)
  0x00007f75704915f8: mov    %r13,0x10(%rsp)
  0x00007f75704915fd: mov    %r14,0x8(%rsp)
  0x00007f7570491602: mov    %r15,(%rsp)
  0x00007f7570491606: movabs $0x7f758592f470,%rdi
  0x00007f7570491610: movabs $0x7f75704915b0,%rsi
  0x00007f757049161a: mov    %rsp,%rdx
  0x00007f757049161d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491621: callq  0x00007f75853729fa
  0x00007f7570491626: hlt    
  ;; } verify_i2ce 
  0x00007f7570491627: mov    %rsp,%r11
  0x00007f757049162a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049162e: push   %rax
  0x00007f757049162f: mov    %r11,%rax
  0x00007f7570491632: mov    0x50(%rbx),%r11
  0x00007f7570491636: mov    0x30(%rax),%rsi
  0x00007f757049163a: mov    0x28(%rax),%rdx
  0x00007f757049163e: mov    0x18(%rax),%rcx
  0x00007f7570491642: mov    0x8(%rax),%r8
  0x00007f7570491646: mov    %rbx,0x258(%r15)
  0x00007f757049164d: mov    %rbx,%rax
  0x00007f7570491650: jmpq   *%r11
  0x00007f7570491653: mov    0x8(%rsi),%ebx
  0x00007f7570491656: shl    $0x3,%rbx
  0x00007f757049165a: cmp    0x10(%rax),%rbx
  0x00007f757049165e: mov    0x8(%rax),%rbx
  0x00007f7570491662: je     0x00007f757049166d
  0x00007f7570491668: jmpq   0x00007f757046ec40
  0x00007f757049166d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491675: je     0x00007f7570491770
  0x00007f757049167b: jmpq   0x00007f757046ec40
  0x00007f7570491680: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491688: je     0x00007f7570491770
  0x00007f757049168e: mov    %rsp,%r13
  0x00007f7570491691: mov    (%rsp),%rax
  0x00007f7570491695: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491699: pushfq 
  0x00007f757049169a: sub    $0x8,%rsp
  0x00007f757049169e: mov    %rsp,-0x28(%rsp)
  0x00007f75704916a3: sub    $0x80,%rsp
  0x00007f75704916aa: mov    %rax,0x78(%rsp)
  0x00007f75704916af: mov    %rcx,0x70(%rsp)
  0x00007f75704916b4: mov    %rdx,0x68(%rsp)
  0x00007f75704916b9: mov    %rbx,0x60(%rsp)
  0x00007f75704916be: mov    %rbp,0x50(%rsp)
  0x00007f75704916c3: mov    %rsi,0x48(%rsp)
  0x00007f75704916c8: mov    %rdi,0x40(%rsp)
  0x00007f75704916cd: mov    %r8,0x38(%rsp)
  0x00007f75704916d2: mov    %r9,0x30(%rsp)
  0x00007f75704916d7: mov    %r10,0x28(%rsp)
  0x00007f75704916dc: mov    %r11,0x20(%rsp)
  0x00007f75704916e1: mov    %r12,0x18(%rsp)
  0x00007f75704916e6: mov    %r13,0x10(%rsp)
  0x00007f75704916eb: mov    %r14,0x8(%rsp)
  0x00007f75704916f0: mov    %r15,(%rsp)
  0x00007f75704916f4: sub    $0x200,%rsp
  0x00007f75704916fb: fxsave64 (%rsp)
  0x00007f7570491700: mov    %rbx,%rdi
  0x00007f7570491703: mov    %rax,%rsi
  0x00007f7570491706: callq  0x00007f7585522bca
  0x00007f757049170b: fxrstor64 (%rsp)
  0x00007f7570491710: add    $0x200,%rsp
  0x00007f7570491717: mov    (%rsp),%r15
  0x00007f757049171b: mov    0x8(%rsp),%r14
  0x00007f7570491720: mov    0x10(%rsp),%r13
  0x00007f7570491725: mov    0x18(%rsp),%r12
  0x00007f757049172a: mov    0x20(%rsp),%r11
  0x00007f757049172f: mov    0x28(%rsp),%r10
  0x00007f7570491734: mov    0x30(%rsp),%r9
  0x00007f7570491739: mov    0x38(%rsp),%r8
  0x00007f757049173e: mov    0x40(%rsp),%rdi
  0x00007f7570491743: mov    0x48(%rsp),%rsi
  0x00007f7570491748: mov    0x50(%rsp),%rbp
  0x00007f757049174d: mov    0x60(%rsp),%rbx
  0x00007f7570491752: mov    0x68(%rsp),%rdx
  0x00007f7570491757: mov    0x70(%rsp),%rcx
  0x00007f757049175c: mov    0x78(%rsp),%rax
  0x00007f7570491761: add    $0x80,%rsp
  0x00007f7570491768: add    $0x8,%rsp
  0x00007f757049176c: popfq  
  0x00007f757049176d: mov    %r13,%rsp
  0x00007f7570491770: pop    %rax
  0x00007f7570491771: mov    %rsp,%r13
  0x00007f7570491774: sub    $0x40,%rsp
  0x00007f7570491778: mov    %rax,(%rsp)
  0x00007f757049177c: mov    %rsi,0x30(%rsp)
  0x00007f7570491781: mov    %rdx,0x28(%rsp)
  0x00007f7570491786: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570491790: mov    %rax,0x20(%rsp)
  0x00007f7570491795: mov    %rcx,0x18(%rsp)
  0x00007f757049179a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704917a4: mov    %rax,0x10(%rsp)
  0x00007f75704917a9: mov    %r8,0x8(%rsp)
  0x00007f75704917ae: mov    0x40(%rbx),%rcx
  0x00007f75704917b2: jmpq   *%rcx

AHE@0x00007f75800d5028: 0xbbebe000 i2c: 0x00007f7570491860 c2i: 0x00007f757049197c c2iUV: 0x00007f757049194f
i2c argument handler #0 for: receiver (JJ)V (587 bytes generated)
c2i argument handler starts at 0x7f757049197c
  0x00007f7570491860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570491864: movabs $0x7f757036e3e0,%r11
  0x00007f757049186e: cmp    %r11,%rax
  0x00007f7570491871: jbe    0x00007f757049188a
  0x00007f7570491877: movabs $0x7f757046e3e0,%r11
  0x00007f7570491881: cmp    %r11,%rax
  0x00007f7570491884: jb     0x00007f7570491927
  0x00007f757049188a: movabs $0x7f7570369420,%r11
  0x00007f7570491894: cmp    %r11,%rax
  0x00007f7570491897: jbe    0x00007f75704918b0
  0x00007f757049189d: movabs $0x7f757036de58,%r11
  0x00007f75704918a7: cmp    %r11,%rax
  0x00007f75704918aa: jb     0x00007f7570491927
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704918b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704918b5: sub    $0x80,%rsp
  0x00007f75704918bc: mov    %rax,0x78(%rsp)
  0x00007f75704918c1: mov    %rcx,0x70(%rsp)
  0x00007f75704918c6: mov    %rdx,0x68(%rsp)
  0x00007f75704918cb: mov    %rbx,0x60(%rsp)
  0x00007f75704918d0: mov    %rbp,0x50(%rsp)
  0x00007f75704918d5: mov    %rsi,0x48(%rsp)
  0x00007f75704918da: mov    %rdi,0x40(%rsp)
  0x00007f75704918df: mov    %r8,0x38(%rsp)
  0x00007f75704918e4: mov    %r9,0x30(%rsp)
  0x00007f75704918e9: mov    %r10,0x28(%rsp)
  0x00007f75704918ee: mov    %r11,0x20(%rsp)
  0x00007f75704918f3: mov    %r12,0x18(%rsp)
  0x00007f75704918f8: mov    %r13,0x10(%rsp)
  0x00007f75704918fd: mov    %r14,0x8(%rsp)
  0x00007f7570491902: mov    %r15,(%rsp)
  0x00007f7570491906: movabs $0x7f758592f470,%rdi
  0x00007f7570491910: movabs $0x7f75704918b0,%rsi
  0x00007f757049191a: mov    %rsp,%rdx
  0x00007f757049191d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491921: callq  0x00007f75853729fa
  0x00007f7570491926: hlt    
  ;; } verify_i2ce 
  0x00007f7570491927: mov    %rsp,%r11
  0x00007f757049192a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049192e: push   %rax
  0x00007f757049192f: mov    %r11,%rax
  0x00007f7570491932: mov    0x50(%rbx),%r11
  0x00007f7570491936: mov    0x28(%rax),%rsi
  0x00007f757049193a: mov    0x18(%rax),%rdx
  0x00007f757049193e: mov    0x8(%rax),%rcx
  0x00007f7570491942: mov    %rbx,0x258(%r15)
  0x00007f7570491949: mov    %rbx,%rax
  0x00007f757049194c: jmpq   *%r11
  0x00007f757049194f: mov    0x8(%rsi),%ebx
  0x00007f7570491952: shl    $0x3,%rbx
  0x00007f7570491956: cmp    0x10(%rax),%rbx
  0x00007f757049195a: mov    0x8(%rax),%rbx
  0x00007f757049195e: je     0x00007f7570491969
  0x00007f7570491964: jmpq   0x00007f757046ec40
  0x00007f7570491969: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491971: je     0x00007f7570491a6c
  0x00007f7570491977: jmpq   0x00007f757046ec40
  0x00007f757049197c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491984: je     0x00007f7570491a6c
  0x00007f757049198a: mov    %rsp,%r13
  0x00007f757049198d: mov    (%rsp),%rax
  0x00007f7570491991: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491995: pushfq 
  0x00007f7570491996: sub    $0x8,%rsp
  0x00007f757049199a: mov    %rsp,-0x28(%rsp)
  0x00007f757049199f: sub    $0x80,%rsp
  0x00007f75704919a6: mov    %rax,0x78(%rsp)
  0x00007f75704919ab: mov    %rcx,0x70(%rsp)
  0x00007f75704919b0: mov    %rdx,0x68(%rsp)
  0x00007f75704919b5: mov    %rbx,0x60(%rsp)
  0x00007f75704919ba: mov    %rbp,0x50(%rsp)
  0x00007f75704919bf: mov    %rsi,0x48(%rsp)
  0x00007f75704919c4: mov    %rdi,0x40(%rsp)
  0x00007f75704919c9: mov    %r8,0x38(%rsp)
  0x00007f75704919ce: mov    %r9,0x30(%rsp)
  0x00007f75704919d3: mov    %r10,0x28(%rsp)
  0x00007f75704919d8: mov    %r11,0x20(%rsp)
  0x00007f75704919dd: mov    %r12,0x18(%rsp)
  0x00007f75704919e2: mov    %r13,0x10(%rsp)
  0x00007f75704919e7: mov    %r14,0x8(%rsp)
  0x00007f75704919ec: mov    %r15,(%rsp)
  0x00007f75704919f0: sub    $0x200,%rsp
  0x00007f75704919f7: fxsave64 (%rsp)
  0x00007f75704919fc: mov    %rbx,%rdi
  0x00007f75704919ff: mov    %rax,%rsi
  0x00007f7570491a02: callq  0x00007f7585522bca
  0x00007f7570491a07: fxrstor64 (%rsp)
  0x00007f7570491a0c: add    $0x200,%rsp
  0x00007f7570491a13: mov    (%rsp),%r15
  0x00007f7570491a17: mov    0x8(%rsp),%r14
  0x00007f7570491a1c: mov    0x10(%rsp),%r13
  0x00007f7570491a21: mov    0x18(%rsp),%r12
  0x00007f7570491a26: mov    0x20(%rsp),%r11
  0x00007f7570491a2b: mov    0x28(%rsp),%r10
  0x00007f7570491a30: mov    0x30(%rsp),%r9
  0x00007f7570491a35: mov    0x38(%rsp),%r8
  0x00007f7570491a3a: mov    0x40(%rsp),%rdi
  0x00007f7570491a3f: mov    0x48(%rsp),%rsi
  0x00007f7570491a44: mov    0x50(%rsp),%rbp
  0x00007f7570491a49: mov    0x60(%rsp),%rbx
  0x00007f7570491a4e: mov    0x68(%rsp),%rdx
  0x00007f7570491a53: mov    0x70(%rsp),%rcx
  0x00007f7570491a58: mov    0x78(%rsp),%rax
  0x00007f7570491a5d: add    $0x80,%rsp
  0x00007f7570491a64: add    $0x8,%rsp
  0x00007f7570491a68: popfq  
  0x00007f7570491a69: mov    %r13,%rsp
  0x00007f7570491a6c: pop    %rax
  0x00007f7570491a6d: mov    %rsp,%r13
  0x00007f7570491a70: sub    $0x30,%rsp
  0x00007f7570491a74: mov    %rax,(%rsp)
  0x00007f7570491a78: mov    %rsi,0x28(%rsp)
  0x00007f7570491a7d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570491a87: mov    %rax,0x20(%rsp)
  0x00007f7570491a8c: mov    %rdx,0x18(%rsp)
  0x00007f7570491a91: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570491a9b: mov    %rax,0x10(%rsp)
  0x00007f7570491aa0: mov    %rcx,0x8(%rsp)
  0x00007f7570491aa5: mov    0x40(%rbx),%rcx
  0x00007f7570491aa9: jmpq   *%rcx

AHE@0x00007f75800d5070: 0xbbbe0000 i2c: 0x00007f7570491b60 c2i: 0x00007f7570491c7c c2iUV: 0x00007f7570491c4f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)J (572 bytes generated)
c2i argument handler starts at 0x7f7570491c7c
  0x00007f7570491b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570491b64: movabs $0x7f757036e3e0,%r11
  0x00007f7570491b6e: cmp    %r11,%rax
  0x00007f7570491b71: jbe    0x00007f7570491b8a
  0x00007f7570491b77: movabs $0x7f757046e3e0,%r11
  0x00007f7570491b81: cmp    %r11,%rax
  0x00007f7570491b84: jb     0x00007f7570491c27
  0x00007f7570491b8a: movabs $0x7f7570369420,%r11
  0x00007f7570491b94: cmp    %r11,%rax
  0x00007f7570491b97: jbe    0x00007f7570491bb0
  0x00007f7570491b9d: movabs $0x7f757036de58,%r11
  0x00007f7570491ba7: cmp    %r11,%rax
  0x00007f7570491baa: jb     0x00007f7570491c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570491bb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570491bb5: sub    $0x80,%rsp
  0x00007f7570491bbc: mov    %rax,0x78(%rsp)
  0x00007f7570491bc1: mov    %rcx,0x70(%rsp)
  0x00007f7570491bc6: mov    %rdx,0x68(%rsp)
  0x00007f7570491bcb: mov    %rbx,0x60(%rsp)
  0x00007f7570491bd0: mov    %rbp,0x50(%rsp)
  0x00007f7570491bd5: mov    %rsi,0x48(%rsp)
  0x00007f7570491bda: mov    %rdi,0x40(%rsp)
  0x00007f7570491bdf: mov    %r8,0x38(%rsp)
  0x00007f7570491be4: mov    %r9,0x30(%rsp)
  0x00007f7570491be9: mov    %r10,0x28(%rsp)
  0x00007f7570491bee: mov    %r11,0x20(%rsp)
  0x00007f7570491bf3: mov    %r12,0x18(%rsp)
  0x00007f7570491bf8: mov    %r13,0x10(%rsp)
  0x00007f7570491bfd: mov    %r14,0x8(%rsp)
  0x00007f7570491c02: mov    %r15,(%rsp)
  0x00007f7570491c06: movabs $0x7f758592f470,%rdi
  0x00007f7570491c10: movabs $0x7f7570491bb0,%rsi
  0x00007f7570491c1a: mov    %rsp,%rdx
  0x00007f7570491c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491c21: callq  0x00007f75853729fa
  0x00007f7570491c26: hlt    
  ;; } verify_i2ce 
  0x00007f7570491c27: mov    %rsp,%r11
  0x00007f7570491c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491c2e: push   %rax
  0x00007f7570491c2f: mov    %r11,%rax
  0x00007f7570491c32: mov    0x50(%rbx),%r11
  0x00007f7570491c36: mov    0x20(%rax),%rsi
  0x00007f7570491c3a: mov    0x18(%rax),%rdx
  0x00007f7570491c3e: mov    0x8(%rax),%rcx
  0x00007f7570491c42: mov    %rbx,0x258(%r15)
  0x00007f7570491c49: mov    %rbx,%rax
  0x00007f7570491c4c: jmpq   *%r11
  0x00007f7570491c4f: mov    0x8(%rsi),%ebx
  0x00007f7570491c52: shl    $0x3,%rbx
  0x00007f7570491c56: cmp    0x10(%rax),%rbx
  0x00007f7570491c5a: mov    0x8(%rax),%rbx
  0x00007f7570491c5e: je     0x00007f7570491c69
  0x00007f7570491c64: jmpq   0x00007f757046ec40
  0x00007f7570491c69: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491c71: je     0x00007f7570491d6c
  0x00007f7570491c77: jmpq   0x00007f757046ec40
  0x00007f7570491c7c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491c84: je     0x00007f7570491d6c
  0x00007f7570491c8a: mov    %rsp,%r13
  0x00007f7570491c8d: mov    (%rsp),%rax
  0x00007f7570491c91: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491c95: pushfq 
  0x00007f7570491c96: sub    $0x8,%rsp
  0x00007f7570491c9a: mov    %rsp,-0x28(%rsp)
  0x00007f7570491c9f: sub    $0x80,%rsp
  0x00007f7570491ca6: mov    %rax,0x78(%rsp)
  0x00007f7570491cab: mov    %rcx,0x70(%rsp)
  0x00007f7570491cb0: mov    %rdx,0x68(%rsp)
  0x00007f7570491cb5: mov    %rbx,0x60(%rsp)
  0x00007f7570491cba: mov    %rbp,0x50(%rsp)
  0x00007f7570491cbf: mov    %rsi,0x48(%rsp)
  0x00007f7570491cc4: mov    %rdi,0x40(%rsp)
  0x00007f7570491cc9: mov    %r8,0x38(%rsp)
  0x00007f7570491cce: mov    %r9,0x30(%rsp)
  0x00007f7570491cd3: mov    %r10,0x28(%rsp)
  0x00007f7570491cd8: mov    %r11,0x20(%rsp)
  0x00007f7570491cdd: mov    %r12,0x18(%rsp)
  0x00007f7570491ce2: mov    %r13,0x10(%rsp)
  0x00007f7570491ce7: mov    %r14,0x8(%rsp)
  0x00007f7570491cec: mov    %r15,(%rsp)
  0x00007f7570491cf0: sub    $0x200,%rsp
  0x00007f7570491cf7: fxsave64 (%rsp)
  0x00007f7570491cfc: mov    %rbx,%rdi
  0x00007f7570491cff: mov    %rax,%rsi
  0x00007f7570491d02: callq  0x00007f7585522bca
  0x00007f7570491d07: fxrstor64 (%rsp)
  0x00007f7570491d0c: add    $0x200,%rsp
  0x00007f7570491d13: mov    (%rsp),%r15
  0x00007f7570491d17: mov    0x8(%rsp),%r14
  0x00007f7570491d1c: mov    0x10(%rsp),%r13
  0x00007f7570491d21: mov    0x18(%rsp),%r12
  0x00007f7570491d26: mov    0x20(%rsp),%r11
  0x00007f7570491d2b: mov    0x28(%rsp),%r10
  0x00007f7570491d30: mov    0x30(%rsp),%r9
  0x00007f7570491d35: mov    0x38(%rsp),%r8
  0x00007f7570491d3a: mov    0x40(%rsp),%rdi
  0x00007f7570491d3f: mov    0x48(%rsp),%rsi
  0x00007f7570491d44: mov    0x50(%rsp),%rbp
  0x00007f7570491d49: mov    0x60(%rsp),%rbx
  0x00007f7570491d4e: mov    0x68(%rsp),%rdx
  0x00007f7570491d53: mov    0x70(%rsp),%rcx
  0x00007f7570491d58: mov    0x78(%rsp),%rax
  0x00007f7570491d5d: add    $0x80,%rsp
  0x00007f7570491d64: add    $0x8,%rsp
  0x00007f7570491d68: popfq  
  0x00007f7570491d69: mov    %r13,%rsp
  0x00007f7570491d6c: pop    %rax
  0x00007f7570491d6d: mov    %rsp,%r13
  0x00007f7570491d70: sub    $0x30,%rsp
  0x00007f7570491d74: mov    %rax,(%rsp)
  0x00007f7570491d78: mov    %rsi,0x20(%rsp)
  0x00007f7570491d7d: mov    %rdx,0x18(%rsp)
  0x00007f7570491d82: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570491d8c: mov    %rax,0x10(%rsp)
  0x00007f7570491d91: mov    %rcx,0x8(%rsp)
  0x00007f7570491d96: mov    0x40(%rbx),%rcx
  0x00007f7570491d9a: jmpq   *%rcx

AHE@0x00007f75800d50b8: 0xbbe00000 i2c: 0x00007f7570491e60 c2i: 0x00007f7570491f78 c2iUV: 0x00007f7570491f4b
i2c argument handler #0 for: receiver (J)J (563 bytes generated)
c2i argument handler starts at 0x7f7570491f78
  0x00007f7570491e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570491e64: movabs $0x7f757036e3e0,%r11
  0x00007f7570491e6e: cmp    %r11,%rax
  0x00007f7570491e71: jbe    0x00007f7570491e8a
  0x00007f7570491e77: movabs $0x7f757046e3e0,%r11
  0x00007f7570491e81: cmp    %r11,%rax
  0x00007f7570491e84: jb     0x00007f7570491f27
  0x00007f7570491e8a: movabs $0x7f7570369420,%r11
  0x00007f7570491e94: cmp    %r11,%rax
  0x00007f7570491e97: jbe    0x00007f7570491eb0
  0x00007f7570491e9d: movabs $0x7f757036de58,%r11
  0x00007f7570491ea7: cmp    %r11,%rax
  0x00007f7570491eaa: jb     0x00007f7570491f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570491eb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570491eb5: sub    $0x80,%rsp
  0x00007f7570491ebc: mov    %rax,0x78(%rsp)
  0x00007f7570491ec1: mov    %rcx,0x70(%rsp)
  0x00007f7570491ec6: mov    %rdx,0x68(%rsp)
  0x00007f7570491ecb: mov    %rbx,0x60(%rsp)
  0x00007f7570491ed0: mov    %rbp,0x50(%rsp)
  0x00007f7570491ed5: mov    %rsi,0x48(%rsp)
  0x00007f7570491eda: mov    %rdi,0x40(%rsp)
  0x00007f7570491edf: mov    %r8,0x38(%rsp)
  0x00007f7570491ee4: mov    %r9,0x30(%rsp)
  0x00007f7570491ee9: mov    %r10,0x28(%rsp)
  0x00007f7570491eee: mov    %r11,0x20(%rsp)
  0x00007f7570491ef3: mov    %r12,0x18(%rsp)
  0x00007f7570491ef8: mov    %r13,0x10(%rsp)
  0x00007f7570491efd: mov    %r14,0x8(%rsp)
  0x00007f7570491f02: mov    %r15,(%rsp)
  0x00007f7570491f06: movabs $0x7f758592f470,%rdi
  0x00007f7570491f10: movabs $0x7f7570491eb0,%rsi
  0x00007f7570491f1a: mov    %rsp,%rdx
  0x00007f7570491f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491f21: callq  0x00007f75853729fa
  0x00007f7570491f26: hlt    
  ;; } verify_i2ce 
  0x00007f7570491f27: mov    %rsp,%r11
  0x00007f7570491f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491f2e: push   %rax
  0x00007f7570491f2f: mov    %r11,%rax
  0x00007f7570491f32: mov    0x50(%rbx),%r11
  0x00007f7570491f36: mov    0x18(%rax),%rsi
  0x00007f7570491f3a: mov    0x8(%rax),%rdx
  0x00007f7570491f3e: mov    %rbx,0x258(%r15)
  0x00007f7570491f45: mov    %rbx,%rax
  0x00007f7570491f48: jmpq   *%r11
  0x00007f7570491f4b: mov    0x8(%rsi),%ebx
  0x00007f7570491f4e: shl    $0x3,%rbx
  0x00007f7570491f52: cmp    0x10(%rax),%rbx
  0x00007f7570491f56: mov    0x8(%rax),%rbx
  0x00007f7570491f5a: je     0x00007f7570491f65
  0x00007f7570491f60: jmpq   0x00007f757046ec40
  0x00007f7570491f65: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491f6d: je     0x00007f7570492068
  0x00007f7570491f73: jmpq   0x00007f757046ec40
  0x00007f7570491f78: cmpq   $0x0,0x58(%rbx)
  0x00007f7570491f80: je     0x00007f7570492068
  0x00007f7570491f86: mov    %rsp,%r13
  0x00007f7570491f89: mov    (%rsp),%rax
  0x00007f7570491f8d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570491f91: pushfq 
  0x00007f7570491f92: sub    $0x8,%rsp
  0x00007f7570491f96: mov    %rsp,-0x28(%rsp)
  0x00007f7570491f9b: sub    $0x80,%rsp
  0x00007f7570491fa2: mov    %rax,0x78(%rsp)
  0x00007f7570491fa7: mov    %rcx,0x70(%rsp)
  0x00007f7570491fac: mov    %rdx,0x68(%rsp)
  0x00007f7570491fb1: mov    %rbx,0x60(%rsp)
  0x00007f7570491fb6: mov    %rbp,0x50(%rsp)
  0x00007f7570491fbb: mov    %rsi,0x48(%rsp)
  0x00007f7570491fc0: mov    %rdi,0x40(%rsp)
  0x00007f7570491fc5: mov    %r8,0x38(%rsp)
  0x00007f7570491fca: mov    %r9,0x30(%rsp)
  0x00007f7570491fcf: mov    %r10,0x28(%rsp)
  0x00007f7570491fd4: mov    %r11,0x20(%rsp)
  0x00007f7570491fd9: mov    %r12,0x18(%rsp)
  0x00007f7570491fde: mov    %r13,0x10(%rsp)
  0x00007f7570491fe3: mov    %r14,0x8(%rsp)
  0x00007f7570491fe8: mov    %r15,(%rsp)
  0x00007f7570491fec: sub    $0x200,%rsp
  0x00007f7570491ff3: fxsave64 (%rsp)
  0x00007f7570491ff8: mov    %rbx,%rdi
  0x00007f7570491ffb: mov    %rax,%rsi
  0x00007f7570491ffe: callq  0x00007f7585522bca
  0x00007f7570492003: fxrstor64 (%rsp)
  0x00007f7570492008: add    $0x200,%rsp
  0x00007f757049200f: mov    (%rsp),%r15
  0x00007f7570492013: mov    0x8(%rsp),%r14
  0x00007f7570492018: mov    0x10(%rsp),%r13
  0x00007f757049201d: mov    0x18(%rsp),%r12
  0x00007f7570492022: mov    0x20(%rsp),%r11
  0x00007f7570492027: mov    0x28(%rsp),%r10
  0x00007f757049202c: mov    0x30(%rsp),%r9
  0x00007f7570492031: mov    0x38(%rsp),%r8
  0x00007f7570492036: mov    0x40(%rsp),%rdi
  0x00007f757049203b: mov    0x48(%rsp),%rsi
  0x00007f7570492040: mov    0x50(%rsp),%rbp
  0x00007f7570492045: mov    0x60(%rsp),%rbx
  0x00007f757049204a: mov    0x68(%rsp),%rdx
  0x00007f757049204f: mov    0x70(%rsp),%rcx
  0x00007f7570492054: mov    0x78(%rsp),%rax
  0x00007f7570492059: add    $0x80,%rsp
  0x00007f7570492060: add    $0x8,%rsp
  0x00007f7570492064: popfq  
  0x00007f7570492065: mov    %r13,%rsp
  0x00007f7570492068: pop    %rax
  0x00007f7570492069: mov    %rsp,%r13
  0x00007f757049206c: sub    $0x20,%rsp
  0x00007f7570492070: mov    %rax,(%rsp)
  0x00007f7570492074: mov    %rsi,0x18(%rsp)
  0x00007f7570492079: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570492083: mov    %rax,0x10(%rsp)
  0x00007f7570492088: mov    %rdx,0x8(%rsp)
  0x00007f757049208d: mov    0x40(%rbx),%rcx
  0x00007f7570492091: jmpq   *%rcx

AHE@0x00007f75800d5100: 0xbba00000 i2c: 0x00007f7570492160 c2i: 0x00007f757049227b c2iUV: 0x00007f757049224e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)J (555 bytes generated)
c2i argument handler starts at 0x7f757049227b
  0x00007f7570492160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570492164: movabs $0x7f757036e3e0,%r11
  0x00007f757049216e: cmp    %r11,%rax
  0x00007f7570492171: jbe    0x00007f757049218a
  0x00007f7570492177: movabs $0x7f757046e3e0,%r11
  0x00007f7570492181: cmp    %r11,%rax
  0x00007f7570492184: jb     0x00007f7570492227
  0x00007f757049218a: movabs $0x7f7570369420,%r11
  0x00007f7570492194: cmp    %r11,%rax
  0x00007f7570492197: jbe    0x00007f75704921b0
  0x00007f757049219d: movabs $0x7f757036de58,%r11
  0x00007f75704921a7: cmp    %r11,%rax
  0x00007f75704921aa: jb     0x00007f7570492227
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704921b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704921b5: sub    $0x80,%rsp
  0x00007f75704921bc: mov    %rax,0x78(%rsp)
  0x00007f75704921c1: mov    %rcx,0x70(%rsp)
  0x00007f75704921c6: mov    %rdx,0x68(%rsp)
  0x00007f75704921cb: mov    %rbx,0x60(%rsp)
  0x00007f75704921d0: mov    %rbp,0x50(%rsp)
  0x00007f75704921d5: mov    %rsi,0x48(%rsp)
  0x00007f75704921da: mov    %rdi,0x40(%rsp)
  0x00007f75704921df: mov    %r8,0x38(%rsp)
  0x00007f75704921e4: mov    %r9,0x30(%rsp)
  0x00007f75704921e9: mov    %r10,0x28(%rsp)
  0x00007f75704921ee: mov    %r11,0x20(%rsp)
  0x00007f75704921f3: mov    %r12,0x18(%rsp)
  0x00007f75704921f8: mov    %r13,0x10(%rsp)
  0x00007f75704921fd: mov    %r14,0x8(%rsp)
  0x00007f7570492202: mov    %r15,(%rsp)
  0x00007f7570492206: movabs $0x7f758592f470,%rdi
  0x00007f7570492210: movabs $0x7f75704921b0,%rsi
  0x00007f757049221a: mov    %rsp,%rdx
  0x00007f757049221d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492221: callq  0x00007f75853729fa
  0x00007f7570492226: hlt    
  ;; } verify_i2ce 
  0x00007f7570492227: mov    %rsp,%r11
  0x00007f757049222a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049222e: push   %rax
  0x00007f757049222f: mov    %r11,%rax
  0x00007f7570492232: mov    0x50(%rbx),%r11
  0x00007f7570492236: mov    0x18(%rax),%rsi
  0x00007f757049223a: mov    0x10(%rax),%rdx
  0x00007f757049223e: mov    0x8(%rax),%ecx
  0x00007f7570492241: mov    %rbx,0x258(%r15)
  0x00007f7570492248: mov    %rbx,%rax
  0x00007f757049224b: jmpq   *%r11
  0x00007f757049224e: mov    0x8(%rsi),%ebx
  0x00007f7570492251: shl    $0x3,%rbx
  0x00007f7570492255: cmp    0x10(%rax),%rbx
  0x00007f7570492259: mov    0x8(%rax),%rbx
  0x00007f757049225d: je     0x00007f7570492268
  0x00007f7570492263: jmpq   0x00007f757046ec40
  0x00007f7570492268: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492270: je     0x00007f757049236b
  0x00007f7570492276: jmpq   0x00007f757046ec40
  0x00007f757049227b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492283: je     0x00007f757049236b
  0x00007f7570492289: mov    %rsp,%r13
  0x00007f757049228c: mov    (%rsp),%rax
  0x00007f7570492290: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492294: pushfq 
  0x00007f7570492295: sub    $0x8,%rsp
  0x00007f7570492299: mov    %rsp,-0x28(%rsp)
  0x00007f757049229e: sub    $0x80,%rsp
  0x00007f75704922a5: mov    %rax,0x78(%rsp)
  0x00007f75704922aa: mov    %rcx,0x70(%rsp)
  0x00007f75704922af: mov    %rdx,0x68(%rsp)
  0x00007f75704922b4: mov    %rbx,0x60(%rsp)
  0x00007f75704922b9: mov    %rbp,0x50(%rsp)
  0x00007f75704922be: mov    %rsi,0x48(%rsp)
  0x00007f75704922c3: mov    %rdi,0x40(%rsp)
  0x00007f75704922c8: mov    %r8,0x38(%rsp)
  0x00007f75704922cd: mov    %r9,0x30(%rsp)
  0x00007f75704922d2: mov    %r10,0x28(%rsp)
  0x00007f75704922d7: mov    %r11,0x20(%rsp)
  0x00007f75704922dc: mov    %r12,0x18(%rsp)
  0x00007f75704922e1: mov    %r13,0x10(%rsp)
  0x00007f75704922e6: mov    %r14,0x8(%rsp)
  0x00007f75704922eb: mov    %r15,(%rsp)
  0x00007f75704922ef: sub    $0x200,%rsp
  0x00007f75704922f6: fxsave64 (%rsp)
  0x00007f75704922fb: mov    %rbx,%rdi
  0x00007f75704922fe: mov    %rax,%rsi
  0x00007f7570492301: callq  0x00007f7585522bca
  0x00007f7570492306: fxrstor64 (%rsp)
  0x00007f757049230b: add    $0x200,%rsp
  0x00007f7570492312: mov    (%rsp),%r15
  0x00007f7570492316: mov    0x8(%rsp),%r14
  0x00007f757049231b: mov    0x10(%rsp),%r13
  0x00007f7570492320: mov    0x18(%rsp),%r12
  0x00007f7570492325: mov    0x20(%rsp),%r11
  0x00007f757049232a: mov    0x28(%rsp),%r10
  0x00007f757049232f: mov    0x30(%rsp),%r9
  0x00007f7570492334: mov    0x38(%rsp),%r8
  0x00007f7570492339: mov    0x40(%rsp),%rdi
  0x00007f757049233e: mov    0x48(%rsp),%rsi
  0x00007f7570492343: mov    0x50(%rsp),%rbp
  0x00007f7570492348: mov    0x60(%rsp),%rbx
  0x00007f757049234d: mov    0x68(%rsp),%rdx
  0x00007f7570492352: mov    0x70(%rsp),%rcx
  0x00007f7570492357: mov    0x78(%rsp),%rax
  0x00007f757049235c: add    $0x80,%rsp
  0x00007f7570492363: add    $0x8,%rsp
  0x00007f7570492367: popfq  
  0x00007f7570492368: mov    %r13,%rsp
  0x00007f757049236b: pop    %rax
  0x00007f757049236c: mov    %rsp,%r13
  0x00007f757049236f: sub    $0x20,%rsp
  0x00007f7570492373: mov    %rax,(%rsp)
  0x00007f7570492377: mov    %rsi,0x18(%rsp)
  0x00007f757049237c: mov    %rdx,0x10(%rsp)
  0x00007f7570492381: mov    %ecx,0x8(%rsp)
  0x00007f7570492385: mov    0x40(%rbx),%rcx
  0x00007f7570492389: jmpq   *%rcx

AHE@0x00007f75800d5148: 0xbbbea000 i2c: 0x00007f7570492460 c2i: 0x00007f7570492580 c2iUV: 0x00007f7570492553
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (581 bytes generated)
c2i argument handler starts at 0x7f7570492580
  0x00007f7570492460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570492464: movabs $0x7f757036e3e0,%r11
  0x00007f757049246e: cmp    %r11,%rax
  0x00007f7570492471: jbe    0x00007f757049248a
  0x00007f7570492477: movabs $0x7f757046e3e0,%r11
  0x00007f7570492481: cmp    %r11,%rax
  0x00007f7570492484: jb     0x00007f7570492527
  0x00007f757049248a: movabs $0x7f7570369420,%r11
  0x00007f7570492494: cmp    %r11,%rax
  0x00007f7570492497: jbe    0x00007f75704924b0
  0x00007f757049249d: movabs $0x7f757036de58,%r11
  0x00007f75704924a7: cmp    %r11,%rax
  0x00007f75704924aa: jb     0x00007f7570492527
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704924b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704924b5: sub    $0x80,%rsp
  0x00007f75704924bc: mov    %rax,0x78(%rsp)
  0x00007f75704924c1: mov    %rcx,0x70(%rsp)
  0x00007f75704924c6: mov    %rdx,0x68(%rsp)
  0x00007f75704924cb: mov    %rbx,0x60(%rsp)
  0x00007f75704924d0: mov    %rbp,0x50(%rsp)
  0x00007f75704924d5: mov    %rsi,0x48(%rsp)
  0x00007f75704924da: mov    %rdi,0x40(%rsp)
  0x00007f75704924df: mov    %r8,0x38(%rsp)
  0x00007f75704924e4: mov    %r9,0x30(%rsp)
  0x00007f75704924e9: mov    %r10,0x28(%rsp)
  0x00007f75704924ee: mov    %r11,0x20(%rsp)
  0x00007f75704924f3: mov    %r12,0x18(%rsp)
  0x00007f75704924f8: mov    %r13,0x10(%rsp)
  0x00007f75704924fd: mov    %r14,0x8(%rsp)
  0x00007f7570492502: mov    %r15,(%rsp)
  0x00007f7570492506: movabs $0x7f758592f470,%rdi
  0x00007f7570492510: movabs $0x7f75704924b0,%rsi
  0x00007f757049251a: mov    %rsp,%rdx
  0x00007f757049251d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492521: callq  0x00007f75853729fa
  0x00007f7570492526: hlt    
  ;; } verify_i2ce 
  0x00007f7570492527: mov    %rsp,%r11
  0x00007f757049252a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049252e: push   %rax
  0x00007f757049252f: mov    %r11,%rax
  0x00007f7570492532: mov    0x50(%rbx),%r11
  0x00007f7570492536: mov    0x28(%rax),%rsi
  0x00007f757049253a: mov    0x20(%rax),%rdx
  0x00007f757049253e: mov    0x10(%rax),%rcx
  0x00007f7570492542: mov    0x8(%rax),%r8d
  0x00007f7570492546: mov    %rbx,0x258(%r15)
  0x00007f757049254d: mov    %rbx,%rax
  0x00007f7570492550: jmpq   *%r11
  0x00007f7570492553: mov    0x8(%rsi),%ebx
  0x00007f7570492556: shl    $0x3,%rbx
  0x00007f757049255a: cmp    0x10(%rax),%rbx
  0x00007f757049255e: mov    0x8(%rax),%rbx
  0x00007f7570492562: je     0x00007f757049256d
  0x00007f7570492568: jmpq   0x00007f757046ec40
  0x00007f757049256d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492575: je     0x00007f7570492670
  0x00007f757049257b: jmpq   0x00007f757046ec40
  0x00007f7570492580: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492588: je     0x00007f7570492670
  0x00007f757049258e: mov    %rsp,%r13
  0x00007f7570492591: mov    (%rsp),%rax
  0x00007f7570492595: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492599: pushfq 
  0x00007f757049259a: sub    $0x8,%rsp
  0x00007f757049259e: mov    %rsp,-0x28(%rsp)
  0x00007f75704925a3: sub    $0x80,%rsp
  0x00007f75704925aa: mov    %rax,0x78(%rsp)
  0x00007f75704925af: mov    %rcx,0x70(%rsp)
  0x00007f75704925b4: mov    %rdx,0x68(%rsp)
  0x00007f75704925b9: mov    %rbx,0x60(%rsp)
  0x00007f75704925be: mov    %rbp,0x50(%rsp)
  0x00007f75704925c3: mov    %rsi,0x48(%rsp)
  0x00007f75704925c8: mov    %rdi,0x40(%rsp)
  0x00007f75704925cd: mov    %r8,0x38(%rsp)
  0x00007f75704925d2: mov    %r9,0x30(%rsp)
  0x00007f75704925d7: mov    %r10,0x28(%rsp)
  0x00007f75704925dc: mov    %r11,0x20(%rsp)
  0x00007f75704925e1: mov    %r12,0x18(%rsp)
  0x00007f75704925e6: mov    %r13,0x10(%rsp)
  0x00007f75704925eb: mov    %r14,0x8(%rsp)
  0x00007f75704925f0: mov    %r15,(%rsp)
  0x00007f75704925f4: sub    $0x200,%rsp
  0x00007f75704925fb: fxsave64 (%rsp)
  0x00007f7570492600: mov    %rbx,%rdi
  0x00007f7570492603: mov    %rax,%rsi
  0x00007f7570492606: callq  0x00007f7585522bca
  0x00007f757049260b: fxrstor64 (%rsp)
  0x00007f7570492610: add    $0x200,%rsp
  0x00007f7570492617: mov    (%rsp),%r15
  0x00007f757049261b: mov    0x8(%rsp),%r14
  0x00007f7570492620: mov    0x10(%rsp),%r13
  0x00007f7570492625: mov    0x18(%rsp),%r12
  0x00007f757049262a: mov    0x20(%rsp),%r11
  0x00007f757049262f: mov    0x28(%rsp),%r10
  0x00007f7570492634: mov    0x30(%rsp),%r9
  0x00007f7570492639: mov    0x38(%rsp),%r8
  0x00007f757049263e: mov    0x40(%rsp),%rdi
  0x00007f7570492643: mov    0x48(%rsp),%rsi
  0x00007f7570492648: mov    0x50(%rsp),%rbp
  0x00007f757049264d: mov    0x60(%rsp),%rbx
  0x00007f7570492652: mov    0x68(%rsp),%rdx
  0x00007f7570492657: mov    0x70(%rsp),%rcx
  0x00007f757049265c: mov    0x78(%rsp),%rax
  0x00007f7570492661: add    $0x80,%rsp
  0x00007f7570492668: add    $0x8,%rsp
  0x00007f757049266c: popfq  
  0x00007f757049266d: mov    %r13,%rsp
  0x00007f7570492670: pop    %rax
  0x00007f7570492671: mov    %rsp,%r13
  0x00007f7570492674: sub    $0x30,%rsp
  0x00007f7570492678: mov    %rax,(%rsp)
  0x00007f757049267c: mov    %rsi,0x28(%rsp)
  0x00007f7570492681: mov    %rdx,0x20(%rsp)
  0x00007f7570492686: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570492690: mov    %rax,0x18(%rsp)
  0x00007f7570492695: mov    %rcx,0x10(%rsp)
  0x00007f757049269a: mov    %r8d,0x8(%rsp)
  0x00007f757049269f: mov    0x40(%rbx),%rcx
  0x00007f75704926a3: jmpq   *%rcx

AHE@0x00007f75800d5190: 0xbbaa0000 i2c: 0x00007f7570492760 c2i: 0x00007f757049287f c2iUV: 0x00007f7570492852
i2c argument handler #0 for: receiver (Ljava/lang/Object;II)V (564 bytes generated)
c2i argument handler starts at 0x7f757049287f
  0x00007f7570492760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570492764: movabs $0x7f757036e3e0,%r11
  0x00007f757049276e: cmp    %r11,%rax
  0x00007f7570492771: jbe    0x00007f757049278a
  0x00007f7570492777: movabs $0x7f757046e3e0,%r11
  0x00007f7570492781: cmp    %r11,%rax
  0x00007f7570492784: jb     0x00007f7570492827
  0x00007f757049278a: movabs $0x7f7570369420,%r11
  0x00007f7570492794: cmp    %r11,%rax
  0x00007f7570492797: jbe    0x00007f75704927b0
  0x00007f757049279d: movabs $0x7f757036de58,%r11
  0x00007f75704927a7: cmp    %r11,%rax
  0x00007f75704927aa: jb     0x00007f7570492827
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704927b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704927b5: sub    $0x80,%rsp
  0x00007f75704927bc: mov    %rax,0x78(%rsp)
  0x00007f75704927c1: mov    %rcx,0x70(%rsp)
  0x00007f75704927c6: mov    %rdx,0x68(%rsp)
  0x00007f75704927cb: mov    %rbx,0x60(%rsp)
  0x00007f75704927d0: mov    %rbp,0x50(%rsp)
  0x00007f75704927d5: mov    %rsi,0x48(%rsp)
  0x00007f75704927da: mov    %rdi,0x40(%rsp)
  0x00007f75704927df: mov    %r8,0x38(%rsp)
  0x00007f75704927e4: mov    %r9,0x30(%rsp)
  0x00007f75704927e9: mov    %r10,0x28(%rsp)
  0x00007f75704927ee: mov    %r11,0x20(%rsp)
  0x00007f75704927f3: mov    %r12,0x18(%rsp)
  0x00007f75704927f8: mov    %r13,0x10(%rsp)
  0x00007f75704927fd: mov    %r14,0x8(%rsp)
  0x00007f7570492802: mov    %r15,(%rsp)
  0x00007f7570492806: movabs $0x7f758592f470,%rdi
  0x00007f7570492810: movabs $0x7f75704927b0,%rsi
  0x00007f757049281a: mov    %rsp,%rdx
  0x00007f757049281d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492821: callq  0x00007f75853729fa
  0x00007f7570492826: hlt    
  ;; } verify_i2ce 
  0x00007f7570492827: mov    %rsp,%r11
  0x00007f757049282a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049282e: push   %rax
  0x00007f757049282f: mov    %r11,%rax
  0x00007f7570492832: mov    0x50(%rbx),%r11
  0x00007f7570492836: mov    0x20(%rax),%rsi
  0x00007f757049283a: mov    0x18(%rax),%rdx
  0x00007f757049283e: mov    0x10(%rax),%ecx
  0x00007f7570492841: mov    0x8(%rax),%r8d
  0x00007f7570492845: mov    %rbx,0x258(%r15)
  0x00007f757049284c: mov    %rbx,%rax
  0x00007f757049284f: jmpq   *%r11
  0x00007f7570492852: mov    0x8(%rsi),%ebx
  0x00007f7570492855: shl    $0x3,%rbx
  0x00007f7570492859: cmp    0x10(%rax),%rbx
  0x00007f757049285d: mov    0x8(%rax),%rbx
  0x00007f7570492861: je     0x00007f757049286c
  0x00007f7570492867: jmpq   0x00007f757046ec40
  0x00007f757049286c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492874: je     0x00007f757049296f
  0x00007f757049287a: jmpq   0x00007f757046ec40
  0x00007f757049287f: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492887: je     0x00007f757049296f
  0x00007f757049288d: mov    %rsp,%r13
  0x00007f7570492890: mov    (%rsp),%rax
  0x00007f7570492894: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492898: pushfq 
  0x00007f7570492899: sub    $0x8,%rsp
  0x00007f757049289d: mov    %rsp,-0x28(%rsp)
  0x00007f75704928a2: sub    $0x80,%rsp
  0x00007f75704928a9: mov    %rax,0x78(%rsp)
  0x00007f75704928ae: mov    %rcx,0x70(%rsp)
  0x00007f75704928b3: mov    %rdx,0x68(%rsp)
  0x00007f75704928b8: mov    %rbx,0x60(%rsp)
  0x00007f75704928bd: mov    %rbp,0x50(%rsp)
  0x00007f75704928c2: mov    %rsi,0x48(%rsp)
  0x00007f75704928c7: mov    %rdi,0x40(%rsp)
  0x00007f75704928cc: mov    %r8,0x38(%rsp)
  0x00007f75704928d1: mov    %r9,0x30(%rsp)
  0x00007f75704928d6: mov    %r10,0x28(%rsp)
  0x00007f75704928db: mov    %r11,0x20(%rsp)
  0x00007f75704928e0: mov    %r12,0x18(%rsp)
  0x00007f75704928e5: mov    %r13,0x10(%rsp)
  0x00007f75704928ea: mov    %r14,0x8(%rsp)
  0x00007f75704928ef: mov    %r15,(%rsp)
  0x00007f75704928f3: sub    $0x200,%rsp
  0x00007f75704928fa: fxsave64 (%rsp)
  0x00007f75704928ff: mov    %rbx,%rdi
  0x00007f7570492902: mov    %rax,%rsi
  0x00007f7570492905: callq  0x00007f7585522bca
  0x00007f757049290a: fxrstor64 (%rsp)
  0x00007f757049290f: add    $0x200,%rsp
  0x00007f7570492916: mov    (%rsp),%r15
  0x00007f757049291a: mov    0x8(%rsp),%r14
  0x00007f757049291f: mov    0x10(%rsp),%r13
  0x00007f7570492924: mov    0x18(%rsp),%r12
  0x00007f7570492929: mov    0x20(%rsp),%r11
  0x00007f757049292e: mov    0x28(%rsp),%r10
  0x00007f7570492933: mov    0x30(%rsp),%r9
  0x00007f7570492938: mov    0x38(%rsp),%r8
  0x00007f757049293d: mov    0x40(%rsp),%rdi
  0x00007f7570492942: mov    0x48(%rsp),%rsi
  0x00007f7570492947: mov    0x50(%rsp),%rbp
  0x00007f757049294c: mov    0x60(%rsp),%rbx
  0x00007f7570492951: mov    0x68(%rsp),%rdx
  0x00007f7570492956: mov    0x70(%rsp),%rcx
  0x00007f757049295b: mov    0x78(%rsp),%rax
  0x00007f7570492960: add    $0x80,%rsp
  0x00007f7570492967: add    $0x8,%rsp
  0x00007f757049296b: popfq  
  0x00007f757049296c: mov    %r13,%rsp
  0x00007f757049296f: pop    %rax
  0x00007f7570492970: mov    %rsp,%r13
  0x00007f7570492973: sub    $0x30,%rsp
  0x00007f7570492977: mov    %rax,(%rsp)
  0x00007f757049297b: mov    %rsi,0x20(%rsp)
  0x00007f7570492980: mov    %rdx,0x18(%rsp)
  0x00007f7570492985: mov    %ecx,0x10(%rsp)
  0x00007f7570492989: mov    %r8d,0x8(%rsp)
  0x00007f757049298e: mov    0x40(%rbx),%rcx
  0x00007f7570492992: jmpq   *%rcx

AHE@0x00007f75800d51d8: 0xbbea0000 i2c: 0x00007f7570492a60 c2i: 0x00007f7570492b7b c2iUV: 0x00007f7570492b4e
i2c argument handler #0 for: receiver (JI)V (570 bytes generated)
c2i argument handler starts at 0x7f7570492b7b
  0x00007f7570492a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570492a64: movabs $0x7f757036e3e0,%r11
  0x00007f7570492a6e: cmp    %r11,%rax
  0x00007f7570492a71: jbe    0x00007f7570492a8a
  0x00007f7570492a77: movabs $0x7f757046e3e0,%r11
  0x00007f7570492a81: cmp    %r11,%rax
  0x00007f7570492a84: jb     0x00007f7570492b27
  0x00007f7570492a8a: movabs $0x7f7570369420,%r11
  0x00007f7570492a94: cmp    %r11,%rax
  0x00007f7570492a97: jbe    0x00007f7570492ab0
  0x00007f7570492a9d: movabs $0x7f757036de58,%r11
  0x00007f7570492aa7: cmp    %r11,%rax
  0x00007f7570492aaa: jb     0x00007f7570492b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570492ab0: mov    %rsp,-0x28(%rsp)
  0x00007f7570492ab5: sub    $0x80,%rsp
  0x00007f7570492abc: mov    %rax,0x78(%rsp)
  0x00007f7570492ac1: mov    %rcx,0x70(%rsp)
  0x00007f7570492ac6: mov    %rdx,0x68(%rsp)
  0x00007f7570492acb: mov    %rbx,0x60(%rsp)
  0x00007f7570492ad0: mov    %rbp,0x50(%rsp)
  0x00007f7570492ad5: mov    %rsi,0x48(%rsp)
  0x00007f7570492ada: mov    %rdi,0x40(%rsp)
  0x00007f7570492adf: mov    %r8,0x38(%rsp)
  0x00007f7570492ae4: mov    %r9,0x30(%rsp)
  0x00007f7570492ae9: mov    %r10,0x28(%rsp)
  0x00007f7570492aee: mov    %r11,0x20(%rsp)
  0x00007f7570492af3: mov    %r12,0x18(%rsp)
  0x00007f7570492af8: mov    %r13,0x10(%rsp)
  0x00007f7570492afd: mov    %r14,0x8(%rsp)
  0x00007f7570492b02: mov    %r15,(%rsp)
  0x00007f7570492b06: movabs $0x7f758592f470,%rdi
  0x00007f7570492b10: movabs $0x7f7570492ab0,%rsi
  0x00007f7570492b1a: mov    %rsp,%rdx
  0x00007f7570492b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492b21: callq  0x00007f75853729fa
  0x00007f7570492b26: hlt    
  ;; } verify_i2ce 
  0x00007f7570492b27: mov    %rsp,%r11
  0x00007f7570492b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492b2e: push   %rax
  0x00007f7570492b2f: mov    %r11,%rax
  0x00007f7570492b32: mov    0x50(%rbx),%r11
  0x00007f7570492b36: mov    0x20(%rax),%rsi
  0x00007f7570492b3a: mov    0x10(%rax),%rdx
  0x00007f7570492b3e: mov    0x8(%rax),%ecx
  0x00007f7570492b41: mov    %rbx,0x258(%r15)
  0x00007f7570492b48: mov    %rbx,%rax
  0x00007f7570492b4b: jmpq   *%r11
  0x00007f7570492b4e: mov    0x8(%rsi),%ebx
  0x00007f7570492b51: shl    $0x3,%rbx
  0x00007f7570492b55: cmp    0x10(%rax),%rbx
  0x00007f7570492b59: mov    0x8(%rax),%rbx
  0x00007f7570492b5d: je     0x00007f7570492b68
  0x00007f7570492b63: jmpq   0x00007f757046ec40
  0x00007f7570492b68: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492b70: je     0x00007f7570492c6b
  0x00007f7570492b76: jmpq   0x00007f757046ec40
  0x00007f7570492b7b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492b83: je     0x00007f7570492c6b
  0x00007f7570492b89: mov    %rsp,%r13
  0x00007f7570492b8c: mov    (%rsp),%rax
  0x00007f7570492b90: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492b94: pushfq 
  0x00007f7570492b95: sub    $0x8,%rsp
  0x00007f7570492b99: mov    %rsp,-0x28(%rsp)
  0x00007f7570492b9e: sub    $0x80,%rsp
  0x00007f7570492ba5: mov    %rax,0x78(%rsp)
  0x00007f7570492baa: mov    %rcx,0x70(%rsp)
  0x00007f7570492baf: mov    %rdx,0x68(%rsp)
  0x00007f7570492bb4: mov    %rbx,0x60(%rsp)
  0x00007f7570492bb9: mov    %rbp,0x50(%rsp)
  0x00007f7570492bbe: mov    %rsi,0x48(%rsp)
  0x00007f7570492bc3: mov    %rdi,0x40(%rsp)
  0x00007f7570492bc8: mov    %r8,0x38(%rsp)
  0x00007f7570492bcd: mov    %r9,0x30(%rsp)
  0x00007f7570492bd2: mov    %r10,0x28(%rsp)
  0x00007f7570492bd7: mov    %r11,0x20(%rsp)
  0x00007f7570492bdc: mov    %r12,0x18(%rsp)
  0x00007f7570492be1: mov    %r13,0x10(%rsp)
  0x00007f7570492be6: mov    %r14,0x8(%rsp)
  0x00007f7570492beb: mov    %r15,(%rsp)
  0x00007f7570492bef: sub    $0x200,%rsp
  0x00007f7570492bf6: fxsave64 (%rsp)
  0x00007f7570492bfb: mov    %rbx,%rdi
  0x00007f7570492bfe: mov    %rax,%rsi
  0x00007f7570492c01: callq  0x00007f7585522bca
  0x00007f7570492c06: fxrstor64 (%rsp)
  0x00007f7570492c0b: add    $0x200,%rsp
  0x00007f7570492c12: mov    (%rsp),%r15
  0x00007f7570492c16: mov    0x8(%rsp),%r14
  0x00007f7570492c1b: mov    0x10(%rsp),%r13
  0x00007f7570492c20: mov    0x18(%rsp),%r12
  0x00007f7570492c25: mov    0x20(%rsp),%r11
  0x00007f7570492c2a: mov    0x28(%rsp),%r10
  0x00007f7570492c2f: mov    0x30(%rsp),%r9
  0x00007f7570492c34: mov    0x38(%rsp),%r8
  0x00007f7570492c39: mov    0x40(%rsp),%rdi
  0x00007f7570492c3e: mov    0x48(%rsp),%rsi
  0x00007f7570492c43: mov    0x50(%rsp),%rbp
  0x00007f7570492c48: mov    0x60(%rsp),%rbx
  0x00007f7570492c4d: mov    0x68(%rsp),%rdx
  0x00007f7570492c52: mov    0x70(%rsp),%rcx
  0x00007f7570492c57: mov    0x78(%rsp),%rax
  0x00007f7570492c5c: add    $0x80,%rsp
  0x00007f7570492c63: add    $0x8,%rsp
  0x00007f7570492c67: popfq  
  0x00007f7570492c68: mov    %r13,%rsp
  0x00007f7570492c6b: pop    %rax
  0x00007f7570492c6c: mov    %rsp,%r13
  0x00007f7570492c6f: sub    $0x30,%rsp
  0x00007f7570492c73: mov    %rax,(%rsp)
  0x00007f7570492c77: mov    %rsi,0x20(%rsp)
  0x00007f7570492c7c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570492c86: mov    %rax,0x18(%rsp)
  0x00007f7570492c8b: mov    %rdx,0x10(%rsp)
  0x00007f7570492c90: mov    %ecx,0x8(%rsp)
  0x00007f7570492c94: mov    0x40(%rbx),%rcx
  0x00007f7570492c98: jmpq   *%rcx

AHE@0x00007f75800d5220: 0xbbe00000 i2c: 0x00007f7570492d60 c2i: 0x00007f7570492e78 c2iUV: 0x00007f7570492e4b
i2c argument handler #0 for: receiver (J)I (563 bytes generated)
c2i argument handler starts at 0x7f7570492e78
  0x00007f7570492d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570492d64: movabs $0x7f757036e3e0,%r11
  0x00007f7570492d6e: cmp    %r11,%rax
  0x00007f7570492d71: jbe    0x00007f7570492d8a
  0x00007f7570492d77: movabs $0x7f757046e3e0,%r11
  0x00007f7570492d81: cmp    %r11,%rax
  0x00007f7570492d84: jb     0x00007f7570492e27
  0x00007f7570492d8a: movabs $0x7f7570369420,%r11
  0x00007f7570492d94: cmp    %r11,%rax
  0x00007f7570492d97: jbe    0x00007f7570492db0
  0x00007f7570492d9d: movabs $0x7f757036de58,%r11
  0x00007f7570492da7: cmp    %r11,%rax
  0x00007f7570492daa: jb     0x00007f7570492e27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570492db0: mov    %rsp,-0x28(%rsp)
  0x00007f7570492db5: sub    $0x80,%rsp
  0x00007f7570492dbc: mov    %rax,0x78(%rsp)
  0x00007f7570492dc1: mov    %rcx,0x70(%rsp)
  0x00007f7570492dc6: mov    %rdx,0x68(%rsp)
  0x00007f7570492dcb: mov    %rbx,0x60(%rsp)
  0x00007f7570492dd0: mov    %rbp,0x50(%rsp)
  0x00007f7570492dd5: mov    %rsi,0x48(%rsp)
  0x00007f7570492dda: mov    %rdi,0x40(%rsp)
  0x00007f7570492ddf: mov    %r8,0x38(%rsp)
  0x00007f7570492de4: mov    %r9,0x30(%rsp)
  0x00007f7570492de9: mov    %r10,0x28(%rsp)
  0x00007f7570492dee: mov    %r11,0x20(%rsp)
  0x00007f7570492df3: mov    %r12,0x18(%rsp)
  0x00007f7570492df8: mov    %r13,0x10(%rsp)
  0x00007f7570492dfd: mov    %r14,0x8(%rsp)
  0x00007f7570492e02: mov    %r15,(%rsp)
  0x00007f7570492e06: movabs $0x7f758592f470,%rdi
  0x00007f7570492e10: movabs $0x7f7570492db0,%rsi
  0x00007f7570492e1a: mov    %rsp,%rdx
  0x00007f7570492e1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492e21: callq  0x00007f75853729fa
  0x00007f7570492e26: hlt    
  ;; } verify_i2ce 
  0x00007f7570492e27: mov    %rsp,%r11
  0x00007f7570492e2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492e2e: push   %rax
  0x00007f7570492e2f: mov    %r11,%rax
  0x00007f7570492e32: mov    0x50(%rbx),%r11
  0x00007f7570492e36: mov    0x18(%rax),%rsi
  0x00007f7570492e3a: mov    0x8(%rax),%rdx
  0x00007f7570492e3e: mov    %rbx,0x258(%r15)
  0x00007f7570492e45: mov    %rbx,%rax
  0x00007f7570492e48: jmpq   *%r11
  0x00007f7570492e4b: mov    0x8(%rsi),%ebx
  0x00007f7570492e4e: shl    $0x3,%rbx
  0x00007f7570492e52: cmp    0x10(%rax),%rbx
  0x00007f7570492e56: mov    0x8(%rax),%rbx
  0x00007f7570492e5a: je     0x00007f7570492e65
  0x00007f7570492e60: jmpq   0x00007f757046ec40
  0x00007f7570492e65: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492e6d: je     0x00007f7570492f68
  0x00007f7570492e73: jmpq   0x00007f757046ec40
  0x00007f7570492e78: cmpq   $0x0,0x58(%rbx)
  0x00007f7570492e80: je     0x00007f7570492f68
  0x00007f7570492e86: mov    %rsp,%r13
  0x00007f7570492e89: mov    (%rsp),%rax
  0x00007f7570492e8d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570492e91: pushfq 
  0x00007f7570492e92: sub    $0x8,%rsp
  0x00007f7570492e96: mov    %rsp,-0x28(%rsp)
  0x00007f7570492e9b: sub    $0x80,%rsp
  0x00007f7570492ea2: mov    %rax,0x78(%rsp)
  0x00007f7570492ea7: mov    %rcx,0x70(%rsp)
  0x00007f7570492eac: mov    %rdx,0x68(%rsp)
  0x00007f7570492eb1: mov    %rbx,0x60(%rsp)
  0x00007f7570492eb6: mov    %rbp,0x50(%rsp)
  0x00007f7570492ebb: mov    %rsi,0x48(%rsp)
  0x00007f7570492ec0: mov    %rdi,0x40(%rsp)
  0x00007f7570492ec5: mov    %r8,0x38(%rsp)
  0x00007f7570492eca: mov    %r9,0x30(%rsp)
  0x00007f7570492ecf: mov    %r10,0x28(%rsp)
  0x00007f7570492ed4: mov    %r11,0x20(%rsp)
  0x00007f7570492ed9: mov    %r12,0x18(%rsp)
  0x00007f7570492ede: mov    %r13,0x10(%rsp)
  0x00007f7570492ee3: mov    %r14,0x8(%rsp)
  0x00007f7570492ee8: mov    %r15,(%rsp)
  0x00007f7570492eec: sub    $0x200,%rsp
  0x00007f7570492ef3: fxsave64 (%rsp)
  0x00007f7570492ef8: mov    %rbx,%rdi
  0x00007f7570492efb: mov    %rax,%rsi
  0x00007f7570492efe: callq  0x00007f7585522bca
  0x00007f7570492f03: fxrstor64 (%rsp)
  0x00007f7570492f08: add    $0x200,%rsp
  0x00007f7570492f0f: mov    (%rsp),%r15
  0x00007f7570492f13: mov    0x8(%rsp),%r14
  0x00007f7570492f18: mov    0x10(%rsp),%r13
  0x00007f7570492f1d: mov    0x18(%rsp),%r12
  0x00007f7570492f22: mov    0x20(%rsp),%r11
  0x00007f7570492f27: mov    0x28(%rsp),%r10
  0x00007f7570492f2c: mov    0x30(%rsp),%r9
  0x00007f7570492f31: mov    0x38(%rsp),%r8
  0x00007f7570492f36: mov    0x40(%rsp),%rdi
  0x00007f7570492f3b: mov    0x48(%rsp),%rsi
  0x00007f7570492f40: mov    0x50(%rsp),%rbp
  0x00007f7570492f45: mov    0x60(%rsp),%rbx
  0x00007f7570492f4a: mov    0x68(%rsp),%rdx
  0x00007f7570492f4f: mov    0x70(%rsp),%rcx
  0x00007f7570492f54: mov    0x78(%rsp),%rax
  0x00007f7570492f59: add    $0x80,%rsp
  0x00007f7570492f60: add    $0x8,%rsp
  0x00007f7570492f64: popfq  
  0x00007f7570492f65: mov    %r13,%rsp
  0x00007f7570492f68: pop    %rax
  0x00007f7570492f69: mov    %rsp,%r13
  0x00007f7570492f6c: sub    $0x20,%rsp
  0x00007f7570492f70: mov    %rax,(%rsp)
  0x00007f7570492f74: mov    %rsi,0x18(%rsp)
  0x00007f7570492f79: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570492f83: mov    %rax,0x10(%rsp)
  0x00007f7570492f88: mov    %rdx,0x8(%rsp)
  0x00007f7570492f8d: mov    0x40(%rbx),%rcx
  0x00007f7570492f91: jmpq   *%rcx

AHE@0x00007f75800d5268: 0xbba00000 i2c: 0x00007f7570493060 c2i: 0x00007f757049317b c2iUV: 0x00007f757049314e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)I (555 bytes generated)
c2i argument handler starts at 0x7f757049317b
  0x00007f7570493060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570493064: movabs $0x7f757036e3e0,%r11
  0x00007f757049306e: cmp    %r11,%rax
  0x00007f7570493071: jbe    0x00007f757049308a
  0x00007f7570493077: movabs $0x7f757046e3e0,%r11
  0x00007f7570493081: cmp    %r11,%rax
  0x00007f7570493084: jb     0x00007f7570493127
  0x00007f757049308a: movabs $0x7f7570369420,%r11
  0x00007f7570493094: cmp    %r11,%rax
  0x00007f7570493097: jbe    0x00007f75704930b0
  0x00007f757049309d: movabs $0x7f757036de58,%r11
  0x00007f75704930a7: cmp    %r11,%rax
  0x00007f75704930aa: jb     0x00007f7570493127
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704930b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704930b5: sub    $0x80,%rsp
  0x00007f75704930bc: mov    %rax,0x78(%rsp)
  0x00007f75704930c1: mov    %rcx,0x70(%rsp)
  0x00007f75704930c6: mov    %rdx,0x68(%rsp)
  0x00007f75704930cb: mov    %rbx,0x60(%rsp)
  0x00007f75704930d0: mov    %rbp,0x50(%rsp)
  0x00007f75704930d5: mov    %rsi,0x48(%rsp)
  0x00007f75704930da: mov    %rdi,0x40(%rsp)
  0x00007f75704930df: mov    %r8,0x38(%rsp)
  0x00007f75704930e4: mov    %r9,0x30(%rsp)
  0x00007f75704930e9: mov    %r10,0x28(%rsp)
  0x00007f75704930ee: mov    %r11,0x20(%rsp)
  0x00007f75704930f3: mov    %r12,0x18(%rsp)
  0x00007f75704930f8: mov    %r13,0x10(%rsp)
  0x00007f75704930fd: mov    %r14,0x8(%rsp)
  0x00007f7570493102: mov    %r15,(%rsp)
  0x00007f7570493106: movabs $0x7f758592f470,%rdi
  0x00007f7570493110: movabs $0x7f75704930b0,%rsi
  0x00007f757049311a: mov    %rsp,%rdx
  0x00007f757049311d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493121: callq  0x00007f75853729fa
  0x00007f7570493126: hlt    
  ;; } verify_i2ce 
  0x00007f7570493127: mov    %rsp,%r11
  0x00007f757049312a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049312e: push   %rax
  0x00007f757049312f: mov    %r11,%rax
  0x00007f7570493132: mov    0x50(%rbx),%r11
  0x00007f7570493136: mov    0x18(%rax),%rsi
  0x00007f757049313a: mov    0x10(%rax),%rdx
  0x00007f757049313e: mov    0x8(%rax),%ecx
  0x00007f7570493141: mov    %rbx,0x258(%r15)
  0x00007f7570493148: mov    %rbx,%rax
  0x00007f757049314b: jmpq   *%r11
  0x00007f757049314e: mov    0x8(%rsi),%ebx
  0x00007f7570493151: shl    $0x3,%rbx
  0x00007f7570493155: cmp    0x10(%rax),%rbx
  0x00007f7570493159: mov    0x8(%rax),%rbx
  0x00007f757049315d: je     0x00007f7570493168
  0x00007f7570493163: jmpq   0x00007f757046ec40
  0x00007f7570493168: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493170: je     0x00007f757049326b
  0x00007f7570493176: jmpq   0x00007f757046ec40
  0x00007f757049317b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493183: je     0x00007f757049326b
  0x00007f7570493189: mov    %rsp,%r13
  0x00007f757049318c: mov    (%rsp),%rax
  0x00007f7570493190: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493194: pushfq 
  0x00007f7570493195: sub    $0x8,%rsp
  0x00007f7570493199: mov    %rsp,-0x28(%rsp)
  0x00007f757049319e: sub    $0x80,%rsp
  0x00007f75704931a5: mov    %rax,0x78(%rsp)
  0x00007f75704931aa: mov    %rcx,0x70(%rsp)
  0x00007f75704931af: mov    %rdx,0x68(%rsp)
  0x00007f75704931b4: mov    %rbx,0x60(%rsp)
  0x00007f75704931b9: mov    %rbp,0x50(%rsp)
  0x00007f75704931be: mov    %rsi,0x48(%rsp)
  0x00007f75704931c3: mov    %rdi,0x40(%rsp)
  0x00007f75704931c8: mov    %r8,0x38(%rsp)
  0x00007f75704931cd: mov    %r9,0x30(%rsp)
  0x00007f75704931d2: mov    %r10,0x28(%rsp)
  0x00007f75704931d7: mov    %r11,0x20(%rsp)
  0x00007f75704931dc: mov    %r12,0x18(%rsp)
  0x00007f75704931e1: mov    %r13,0x10(%rsp)
  0x00007f75704931e6: mov    %r14,0x8(%rsp)
  0x00007f75704931eb: mov    %r15,(%rsp)
  0x00007f75704931ef: sub    $0x200,%rsp
  0x00007f75704931f6: fxsave64 (%rsp)
  0x00007f75704931fb: mov    %rbx,%rdi
  0x00007f75704931fe: mov    %rax,%rsi
  0x00007f7570493201: callq  0x00007f7585522bca
  0x00007f7570493206: fxrstor64 (%rsp)
  0x00007f757049320b: add    $0x200,%rsp
  0x00007f7570493212: mov    (%rsp),%r15
  0x00007f7570493216: mov    0x8(%rsp),%r14
  0x00007f757049321b: mov    0x10(%rsp),%r13
  0x00007f7570493220: mov    0x18(%rsp),%r12
  0x00007f7570493225: mov    0x20(%rsp),%r11
  0x00007f757049322a: mov    0x28(%rsp),%r10
  0x00007f757049322f: mov    0x30(%rsp),%r9
  0x00007f7570493234: mov    0x38(%rsp),%r8
  0x00007f7570493239: mov    0x40(%rsp),%rdi
  0x00007f757049323e: mov    0x48(%rsp),%rsi
  0x00007f7570493243: mov    0x50(%rsp),%rbp
  0x00007f7570493248: mov    0x60(%rsp),%rbx
  0x00007f757049324d: mov    0x68(%rsp),%rdx
  0x00007f7570493252: mov    0x70(%rsp),%rcx
  0x00007f7570493257: mov    0x78(%rsp),%rax
  0x00007f757049325c: add    $0x80,%rsp
  0x00007f7570493263: add    $0x8,%rsp
  0x00007f7570493267: popfq  
  0x00007f7570493268: mov    %r13,%rsp
  0x00007f757049326b: pop    %rax
  0x00007f757049326c: mov    %rsp,%r13
  0x00007f757049326f: sub    $0x20,%rsp
  0x00007f7570493273: mov    %rax,(%rsp)
  0x00007f7570493277: mov    %rsi,0x18(%rsp)
  0x00007f757049327c: mov    %rdx,0x10(%rsp)
  0x00007f7570493281: mov    %ecx,0x8(%rsp)
  0x00007f7570493285: mov    0x40(%rbx),%rcx
  0x00007f7570493289: jmpq   *%rcx

AHE@0x00007f75800d52b0: 0xbbbe0000 i2c: 0x00007f7570493360 c2i: 0x00007f757049347c c2iUV: 0x00007f757049344f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)I (572 bytes generated)
c2i argument handler starts at 0x7f757049347c
  0x00007f7570493360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570493364: movabs $0x7f757036e3e0,%r11
  0x00007f757049336e: cmp    %r11,%rax
  0x00007f7570493371: jbe    0x00007f757049338a
  0x00007f7570493377: movabs $0x7f757046e3e0,%r11
  0x00007f7570493381: cmp    %r11,%rax
  0x00007f7570493384: jb     0x00007f7570493427
  0x00007f757049338a: movabs $0x7f7570369420,%r11
  0x00007f7570493394: cmp    %r11,%rax
  0x00007f7570493397: jbe    0x00007f75704933b0
  0x00007f757049339d: movabs $0x7f757036de58,%r11
  0x00007f75704933a7: cmp    %r11,%rax
  0x00007f75704933aa: jb     0x00007f7570493427
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704933b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704933b5: sub    $0x80,%rsp
  0x00007f75704933bc: mov    %rax,0x78(%rsp)
  0x00007f75704933c1: mov    %rcx,0x70(%rsp)
  0x00007f75704933c6: mov    %rdx,0x68(%rsp)
  0x00007f75704933cb: mov    %rbx,0x60(%rsp)
  0x00007f75704933d0: mov    %rbp,0x50(%rsp)
  0x00007f75704933d5: mov    %rsi,0x48(%rsp)
  0x00007f75704933da: mov    %rdi,0x40(%rsp)
  0x00007f75704933df: mov    %r8,0x38(%rsp)
  0x00007f75704933e4: mov    %r9,0x30(%rsp)
  0x00007f75704933e9: mov    %r10,0x28(%rsp)
  0x00007f75704933ee: mov    %r11,0x20(%rsp)
  0x00007f75704933f3: mov    %r12,0x18(%rsp)
  0x00007f75704933f8: mov    %r13,0x10(%rsp)
  0x00007f75704933fd: mov    %r14,0x8(%rsp)
  0x00007f7570493402: mov    %r15,(%rsp)
  0x00007f7570493406: movabs $0x7f758592f470,%rdi
  0x00007f7570493410: movabs $0x7f75704933b0,%rsi
  0x00007f757049341a: mov    %rsp,%rdx
  0x00007f757049341d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493421: callq  0x00007f75853729fa
  0x00007f7570493426: hlt    
  ;; } verify_i2ce 
  0x00007f7570493427: mov    %rsp,%r11
  0x00007f757049342a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049342e: push   %rax
  0x00007f757049342f: mov    %r11,%rax
  0x00007f7570493432: mov    0x50(%rbx),%r11
  0x00007f7570493436: mov    0x20(%rax),%rsi
  0x00007f757049343a: mov    0x18(%rax),%rdx
  0x00007f757049343e: mov    0x8(%rax),%rcx
  0x00007f7570493442: mov    %rbx,0x258(%r15)
  0x00007f7570493449: mov    %rbx,%rax
  0x00007f757049344c: jmpq   *%r11
  0x00007f757049344f: mov    0x8(%rsi),%ebx
  0x00007f7570493452: shl    $0x3,%rbx
  0x00007f7570493456: cmp    0x10(%rax),%rbx
  0x00007f757049345a: mov    0x8(%rax),%rbx
  0x00007f757049345e: je     0x00007f7570493469
  0x00007f7570493464: jmpq   0x00007f757046ec40
  0x00007f7570493469: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493471: je     0x00007f757049356c
  0x00007f7570493477: jmpq   0x00007f757046ec40
  0x00007f757049347c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493484: je     0x00007f757049356c
  0x00007f757049348a: mov    %rsp,%r13
  0x00007f757049348d: mov    (%rsp),%rax
  0x00007f7570493491: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493495: pushfq 
  0x00007f7570493496: sub    $0x8,%rsp
  0x00007f757049349a: mov    %rsp,-0x28(%rsp)
  0x00007f757049349f: sub    $0x80,%rsp
  0x00007f75704934a6: mov    %rax,0x78(%rsp)
  0x00007f75704934ab: mov    %rcx,0x70(%rsp)
  0x00007f75704934b0: mov    %rdx,0x68(%rsp)
  0x00007f75704934b5: mov    %rbx,0x60(%rsp)
  0x00007f75704934ba: mov    %rbp,0x50(%rsp)
  0x00007f75704934bf: mov    %rsi,0x48(%rsp)
  0x00007f75704934c4: mov    %rdi,0x40(%rsp)
  0x00007f75704934c9: mov    %r8,0x38(%rsp)
  0x00007f75704934ce: mov    %r9,0x30(%rsp)
  0x00007f75704934d3: mov    %r10,0x28(%rsp)
  0x00007f75704934d8: mov    %r11,0x20(%rsp)
  0x00007f75704934dd: mov    %r12,0x18(%rsp)
  0x00007f75704934e2: mov    %r13,0x10(%rsp)
  0x00007f75704934e7: mov    %r14,0x8(%rsp)
  0x00007f75704934ec: mov    %r15,(%rsp)
  0x00007f75704934f0: sub    $0x200,%rsp
  0x00007f75704934f7: fxsave64 (%rsp)
  0x00007f75704934fc: mov    %rbx,%rdi
  0x00007f75704934ff: mov    %rax,%rsi
  0x00007f7570493502: callq  0x00007f7585522bca
  0x00007f7570493507: fxrstor64 (%rsp)
  0x00007f757049350c: add    $0x200,%rsp
  0x00007f7570493513: mov    (%rsp),%r15
  0x00007f7570493517: mov    0x8(%rsp),%r14
  0x00007f757049351c: mov    0x10(%rsp),%r13
  0x00007f7570493521: mov    0x18(%rsp),%r12
  0x00007f7570493526: mov    0x20(%rsp),%r11
  0x00007f757049352b: mov    0x28(%rsp),%r10
  0x00007f7570493530: mov    0x30(%rsp),%r9
  0x00007f7570493535: mov    0x38(%rsp),%r8
  0x00007f757049353a: mov    0x40(%rsp),%rdi
  0x00007f757049353f: mov    0x48(%rsp),%rsi
  0x00007f7570493544: mov    0x50(%rsp),%rbp
  0x00007f7570493549: mov    0x60(%rsp),%rbx
  0x00007f757049354e: mov    0x68(%rsp),%rdx
  0x00007f7570493553: mov    0x70(%rsp),%rcx
  0x00007f7570493558: mov    0x78(%rsp),%rax
  0x00007f757049355d: add    $0x80,%rsp
  0x00007f7570493564: add    $0x8,%rsp
  0x00007f7570493568: popfq  
  0x00007f7570493569: mov    %r13,%rsp
  0x00007f757049356c: pop    %rax
  0x00007f757049356d: mov    %rsp,%r13
  0x00007f7570493570: sub    $0x30,%rsp
  0x00007f7570493574: mov    %rax,(%rsp)
  0x00007f7570493578: mov    %rsi,0x20(%rsp)
  0x00007f757049357d: mov    %rdx,0x18(%rsp)
  0x00007f7570493582: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049358c: mov    %rax,0x10(%rsp)
  0x00007f7570493591: mov    %rcx,0x8(%rsp)
  0x00007f7570493596: mov    0x40(%rbx),%rcx
  0x00007f757049359a: jmpq   *%rcx

AHE@0x00007f75800d52f8: 0xbbaa0000 i2c: 0x00007f7570493660 c2i: 0x00007f757049377f c2iUV: 0x00007f7570493752
i2c argument handler #0 for: receiver (Ljava/lang/Object;IC)V (564 bytes generated)
c2i argument handler starts at 0x7f757049377f
  0x00007f7570493660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570493664: movabs $0x7f757036e3e0,%r11
  0x00007f757049366e: cmp    %r11,%rax
  0x00007f7570493671: jbe    0x00007f757049368a
  0x00007f7570493677: movabs $0x7f757046e3e0,%r11
  0x00007f7570493681: cmp    %r11,%rax
  0x00007f7570493684: jb     0x00007f7570493727
  0x00007f757049368a: movabs $0x7f7570369420,%r11
  0x00007f7570493694: cmp    %r11,%rax
  0x00007f7570493697: jbe    0x00007f75704936b0
  0x00007f757049369d: movabs $0x7f757036de58,%r11
  0x00007f75704936a7: cmp    %r11,%rax
  0x00007f75704936aa: jb     0x00007f7570493727
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704936b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704936b5: sub    $0x80,%rsp
  0x00007f75704936bc: mov    %rax,0x78(%rsp)
  0x00007f75704936c1: mov    %rcx,0x70(%rsp)
  0x00007f75704936c6: mov    %rdx,0x68(%rsp)
  0x00007f75704936cb: mov    %rbx,0x60(%rsp)
  0x00007f75704936d0: mov    %rbp,0x50(%rsp)
  0x00007f75704936d5: mov    %rsi,0x48(%rsp)
  0x00007f75704936da: mov    %rdi,0x40(%rsp)
  0x00007f75704936df: mov    %r8,0x38(%rsp)
  0x00007f75704936e4: mov    %r9,0x30(%rsp)
  0x00007f75704936e9: mov    %r10,0x28(%rsp)
  0x00007f75704936ee: mov    %r11,0x20(%rsp)
  0x00007f75704936f3: mov    %r12,0x18(%rsp)
  0x00007f75704936f8: mov    %r13,0x10(%rsp)
  0x00007f75704936fd: mov    %r14,0x8(%rsp)
  0x00007f7570493702: mov    %r15,(%rsp)
  0x00007f7570493706: movabs $0x7f758592f470,%rdi
  0x00007f7570493710: movabs $0x7f75704936b0,%rsi
  0x00007f757049371a: mov    %rsp,%rdx
  0x00007f757049371d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493721: callq  0x00007f75853729fa
  0x00007f7570493726: hlt    
  ;; } verify_i2ce 
  0x00007f7570493727: mov    %rsp,%r11
  0x00007f757049372a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049372e: push   %rax
  0x00007f757049372f: mov    %r11,%rax
  0x00007f7570493732: mov    0x50(%rbx),%r11
  0x00007f7570493736: mov    0x20(%rax),%rsi
  0x00007f757049373a: mov    0x18(%rax),%rdx
  0x00007f757049373e: mov    0x10(%rax),%ecx
  0x00007f7570493741: mov    0x8(%rax),%r8d
  0x00007f7570493745: mov    %rbx,0x258(%r15)
  0x00007f757049374c: mov    %rbx,%rax
  0x00007f757049374f: jmpq   *%r11
  0x00007f7570493752: mov    0x8(%rsi),%ebx
  0x00007f7570493755: shl    $0x3,%rbx
  0x00007f7570493759: cmp    0x10(%rax),%rbx
  0x00007f757049375d: mov    0x8(%rax),%rbx
  0x00007f7570493761: je     0x00007f757049376c
  0x00007f7570493767: jmpq   0x00007f757046ec40
  0x00007f757049376c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493774: je     0x00007f757049386f
  0x00007f757049377a: jmpq   0x00007f757046ec40
  0x00007f757049377f: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493787: je     0x00007f757049386f
  0x00007f757049378d: mov    %rsp,%r13
  0x00007f7570493790: mov    (%rsp),%rax
  0x00007f7570493794: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493798: pushfq 
  0x00007f7570493799: sub    $0x8,%rsp
  0x00007f757049379d: mov    %rsp,-0x28(%rsp)
  0x00007f75704937a2: sub    $0x80,%rsp
  0x00007f75704937a9: mov    %rax,0x78(%rsp)
  0x00007f75704937ae: mov    %rcx,0x70(%rsp)
  0x00007f75704937b3: mov    %rdx,0x68(%rsp)
  0x00007f75704937b8: mov    %rbx,0x60(%rsp)
  0x00007f75704937bd: mov    %rbp,0x50(%rsp)
  0x00007f75704937c2: mov    %rsi,0x48(%rsp)
  0x00007f75704937c7: mov    %rdi,0x40(%rsp)
  0x00007f75704937cc: mov    %r8,0x38(%rsp)
  0x00007f75704937d1: mov    %r9,0x30(%rsp)
  0x00007f75704937d6: mov    %r10,0x28(%rsp)
  0x00007f75704937db: mov    %r11,0x20(%rsp)
  0x00007f75704937e0: mov    %r12,0x18(%rsp)
  0x00007f75704937e5: mov    %r13,0x10(%rsp)
  0x00007f75704937ea: mov    %r14,0x8(%rsp)
  0x00007f75704937ef: mov    %r15,(%rsp)
  0x00007f75704937f3: sub    $0x200,%rsp
  0x00007f75704937fa: fxsave64 (%rsp)
  0x00007f75704937ff: mov    %rbx,%rdi
  0x00007f7570493802: mov    %rax,%rsi
  0x00007f7570493805: callq  0x00007f7585522bca
  0x00007f757049380a: fxrstor64 (%rsp)
  0x00007f757049380f: add    $0x200,%rsp
  0x00007f7570493816: mov    (%rsp),%r15
  0x00007f757049381a: mov    0x8(%rsp),%r14
  0x00007f757049381f: mov    0x10(%rsp),%r13
  0x00007f7570493824: mov    0x18(%rsp),%r12
  0x00007f7570493829: mov    0x20(%rsp),%r11
  0x00007f757049382e: mov    0x28(%rsp),%r10
  0x00007f7570493833: mov    0x30(%rsp),%r9
  0x00007f7570493838: mov    0x38(%rsp),%r8
  0x00007f757049383d: mov    0x40(%rsp),%rdi
  0x00007f7570493842: mov    0x48(%rsp),%rsi
  0x00007f7570493847: mov    0x50(%rsp),%rbp
  0x00007f757049384c: mov    0x60(%rsp),%rbx
  0x00007f7570493851: mov    0x68(%rsp),%rdx
  0x00007f7570493856: mov    0x70(%rsp),%rcx
  0x00007f757049385b: mov    0x78(%rsp),%rax
  0x00007f7570493860: add    $0x80,%rsp
  0x00007f7570493867: add    $0x8,%rsp
  0x00007f757049386b: popfq  
  0x00007f757049386c: mov    %r13,%rsp
  0x00007f757049386f: pop    %rax
  0x00007f7570493870: mov    %rsp,%r13
  0x00007f7570493873: sub    $0x30,%rsp
  0x00007f7570493877: mov    %rax,(%rsp)
  0x00007f757049387b: mov    %rsi,0x20(%rsp)
  0x00007f7570493880: mov    %rdx,0x18(%rsp)
  0x00007f7570493885: mov    %ecx,0x10(%rsp)
  0x00007f7570493889: mov    %r8d,0x8(%rsp)
  0x00007f757049388e: mov    0x40(%rbx),%rcx
  0x00007f7570493892: jmpq   *%rcx

AHE@0x00007f75800d5340: 0xbbbea000 i2c: 0x00007f7570493960 c2i: 0x00007f7570493a80 c2iUV: 0x00007f7570493a53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JC)V (581 bytes generated)
c2i argument handler starts at 0x7f7570493a80
  0x00007f7570493960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570493964: movabs $0x7f757036e3e0,%r11
  0x00007f757049396e: cmp    %r11,%rax
  0x00007f7570493971: jbe    0x00007f757049398a
  0x00007f7570493977: movabs $0x7f757046e3e0,%r11
  0x00007f7570493981: cmp    %r11,%rax
  0x00007f7570493984: jb     0x00007f7570493a27
  0x00007f757049398a: movabs $0x7f7570369420,%r11
  0x00007f7570493994: cmp    %r11,%rax
  0x00007f7570493997: jbe    0x00007f75704939b0
  0x00007f757049399d: movabs $0x7f757036de58,%r11
  0x00007f75704939a7: cmp    %r11,%rax
  0x00007f75704939aa: jb     0x00007f7570493a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704939b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704939b5: sub    $0x80,%rsp
  0x00007f75704939bc: mov    %rax,0x78(%rsp)
  0x00007f75704939c1: mov    %rcx,0x70(%rsp)
  0x00007f75704939c6: mov    %rdx,0x68(%rsp)
  0x00007f75704939cb: mov    %rbx,0x60(%rsp)
  0x00007f75704939d0: mov    %rbp,0x50(%rsp)
  0x00007f75704939d5: mov    %rsi,0x48(%rsp)
  0x00007f75704939da: mov    %rdi,0x40(%rsp)
  0x00007f75704939df: mov    %r8,0x38(%rsp)
  0x00007f75704939e4: mov    %r9,0x30(%rsp)
  0x00007f75704939e9: mov    %r10,0x28(%rsp)
  0x00007f75704939ee: mov    %r11,0x20(%rsp)
  0x00007f75704939f3: mov    %r12,0x18(%rsp)
  0x00007f75704939f8: mov    %r13,0x10(%rsp)
  0x00007f75704939fd: mov    %r14,0x8(%rsp)
  0x00007f7570493a02: mov    %r15,(%rsp)
  0x00007f7570493a06: movabs $0x7f758592f470,%rdi
  0x00007f7570493a10: movabs $0x7f75704939b0,%rsi
  0x00007f7570493a1a: mov    %rsp,%rdx
  0x00007f7570493a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493a21: callq  0x00007f75853729fa
  0x00007f7570493a26: hlt    
  ;; } verify_i2ce 
  0x00007f7570493a27: mov    %rsp,%r11
  0x00007f7570493a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493a2e: push   %rax
  0x00007f7570493a2f: mov    %r11,%rax
  0x00007f7570493a32: mov    0x50(%rbx),%r11
  0x00007f7570493a36: mov    0x28(%rax),%rsi
  0x00007f7570493a3a: mov    0x20(%rax),%rdx
  0x00007f7570493a3e: mov    0x10(%rax),%rcx
  0x00007f7570493a42: mov    0x8(%rax),%r8d
  0x00007f7570493a46: mov    %rbx,0x258(%r15)
  0x00007f7570493a4d: mov    %rbx,%rax
  0x00007f7570493a50: jmpq   *%r11
  0x00007f7570493a53: mov    0x8(%rsi),%ebx
  0x00007f7570493a56: shl    $0x3,%rbx
  0x00007f7570493a5a: cmp    0x10(%rax),%rbx
  0x00007f7570493a5e: mov    0x8(%rax),%rbx
  0x00007f7570493a62: je     0x00007f7570493a6d
  0x00007f7570493a68: jmpq   0x00007f757046ec40
  0x00007f7570493a6d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493a75: je     0x00007f7570493b70
  0x00007f7570493a7b: jmpq   0x00007f757046ec40
  0x00007f7570493a80: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493a88: je     0x00007f7570493b70
  0x00007f7570493a8e: mov    %rsp,%r13
  0x00007f7570493a91: mov    (%rsp),%rax
  0x00007f7570493a95: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493a99: pushfq 
  0x00007f7570493a9a: sub    $0x8,%rsp
  0x00007f7570493a9e: mov    %rsp,-0x28(%rsp)
  0x00007f7570493aa3: sub    $0x80,%rsp
  0x00007f7570493aaa: mov    %rax,0x78(%rsp)
  0x00007f7570493aaf: mov    %rcx,0x70(%rsp)
  0x00007f7570493ab4: mov    %rdx,0x68(%rsp)
  0x00007f7570493ab9: mov    %rbx,0x60(%rsp)
  0x00007f7570493abe: mov    %rbp,0x50(%rsp)
  0x00007f7570493ac3: mov    %rsi,0x48(%rsp)
  0x00007f7570493ac8: mov    %rdi,0x40(%rsp)
  0x00007f7570493acd: mov    %r8,0x38(%rsp)
  0x00007f7570493ad2: mov    %r9,0x30(%rsp)
  0x00007f7570493ad7: mov    %r10,0x28(%rsp)
  0x00007f7570493adc: mov    %r11,0x20(%rsp)
  0x00007f7570493ae1: mov    %r12,0x18(%rsp)
  0x00007f7570493ae6: mov    %r13,0x10(%rsp)
  0x00007f7570493aeb: mov    %r14,0x8(%rsp)
  0x00007f7570493af0: mov    %r15,(%rsp)
  0x00007f7570493af4: sub    $0x200,%rsp
  0x00007f7570493afb: fxsave64 (%rsp)
  0x00007f7570493b00: mov    %rbx,%rdi
  0x00007f7570493b03: mov    %rax,%rsi
  0x00007f7570493b06: callq  0x00007f7585522bca
  0x00007f7570493b0b: fxrstor64 (%rsp)
  0x00007f7570493b10: add    $0x200,%rsp
  0x00007f7570493b17: mov    (%rsp),%r15
  0x00007f7570493b1b: mov    0x8(%rsp),%r14
  0x00007f7570493b20: mov    0x10(%rsp),%r13
  0x00007f7570493b25: mov    0x18(%rsp),%r12
  0x00007f7570493b2a: mov    0x20(%rsp),%r11
  0x00007f7570493b2f: mov    0x28(%rsp),%r10
  0x00007f7570493b34: mov    0x30(%rsp),%r9
  0x00007f7570493b39: mov    0x38(%rsp),%r8
  0x00007f7570493b3e: mov    0x40(%rsp),%rdi
  0x00007f7570493b43: mov    0x48(%rsp),%rsi
  0x00007f7570493b48: mov    0x50(%rsp),%rbp
  0x00007f7570493b4d: mov    0x60(%rsp),%rbx
  0x00007f7570493b52: mov    0x68(%rsp),%rdx
  0x00007f7570493b57: mov    0x70(%rsp),%rcx
  0x00007f7570493b5c: mov    0x78(%rsp),%rax
  0x00007f7570493b61: add    $0x80,%rsp
  0x00007f7570493b68: add    $0x8,%rsp
  0x00007f7570493b6c: popfq  
  0x00007f7570493b6d: mov    %r13,%rsp
  0x00007f7570493b70: pop    %rax
  0x00007f7570493b71: mov    %rsp,%r13
  0x00007f7570493b74: sub    $0x30,%rsp
  0x00007f7570493b78: mov    %rax,(%rsp)
  0x00007f7570493b7c: mov    %rsi,0x28(%rsp)
  0x00007f7570493b81: mov    %rdx,0x20(%rsp)
  0x00007f7570493b86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570493b90: mov    %rax,0x18(%rsp)
  0x00007f7570493b95: mov    %rcx,0x10(%rsp)
  0x00007f7570493b9a: mov    %r8d,0x8(%rsp)
  0x00007f7570493b9f: mov    0x40(%rbx),%rcx
  0x00007f7570493ba3: jmpq   *%rcx

AHE@0x00007f75800d5388: 0xbbea0000 i2c: 0x00007f7570493c60 c2i: 0x00007f7570493d7b c2iUV: 0x00007f7570493d4e
i2c argument handler #0 for: receiver (JC)V (570 bytes generated)
c2i argument handler starts at 0x7f7570493d7b
  0x00007f7570493c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570493c64: movabs $0x7f757036e3e0,%r11
  0x00007f7570493c6e: cmp    %r11,%rax
  0x00007f7570493c71: jbe    0x00007f7570493c8a
  0x00007f7570493c77: movabs $0x7f757046e3e0,%r11
  0x00007f7570493c81: cmp    %r11,%rax
  0x00007f7570493c84: jb     0x00007f7570493d27
  0x00007f7570493c8a: movabs $0x7f7570369420,%r11
  0x00007f7570493c94: cmp    %r11,%rax
  0x00007f7570493c97: jbe    0x00007f7570493cb0
  0x00007f7570493c9d: movabs $0x7f757036de58,%r11
  0x00007f7570493ca7: cmp    %r11,%rax
  0x00007f7570493caa: jb     0x00007f7570493d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570493cb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570493cb5: sub    $0x80,%rsp
  0x00007f7570493cbc: mov    %rax,0x78(%rsp)
  0x00007f7570493cc1: mov    %rcx,0x70(%rsp)
  0x00007f7570493cc6: mov    %rdx,0x68(%rsp)
  0x00007f7570493ccb: mov    %rbx,0x60(%rsp)
  0x00007f7570493cd0: mov    %rbp,0x50(%rsp)
  0x00007f7570493cd5: mov    %rsi,0x48(%rsp)
  0x00007f7570493cda: mov    %rdi,0x40(%rsp)
  0x00007f7570493cdf: mov    %r8,0x38(%rsp)
  0x00007f7570493ce4: mov    %r9,0x30(%rsp)
  0x00007f7570493ce9: mov    %r10,0x28(%rsp)
  0x00007f7570493cee: mov    %r11,0x20(%rsp)
  0x00007f7570493cf3: mov    %r12,0x18(%rsp)
  0x00007f7570493cf8: mov    %r13,0x10(%rsp)
  0x00007f7570493cfd: mov    %r14,0x8(%rsp)
  0x00007f7570493d02: mov    %r15,(%rsp)
  0x00007f7570493d06: movabs $0x7f758592f470,%rdi
  0x00007f7570493d10: movabs $0x7f7570493cb0,%rsi
  0x00007f7570493d1a: mov    %rsp,%rdx
  0x00007f7570493d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493d21: callq  0x00007f75853729fa
  0x00007f7570493d26: hlt    
  ;; } verify_i2ce 
  0x00007f7570493d27: mov    %rsp,%r11
  0x00007f7570493d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493d2e: push   %rax
  0x00007f7570493d2f: mov    %r11,%rax
  0x00007f7570493d32: mov    0x50(%rbx),%r11
  0x00007f7570493d36: mov    0x20(%rax),%rsi
  0x00007f7570493d3a: mov    0x10(%rax),%rdx
  0x00007f7570493d3e: mov    0x8(%rax),%ecx
  0x00007f7570493d41: mov    %rbx,0x258(%r15)
  0x00007f7570493d48: mov    %rbx,%rax
  0x00007f7570493d4b: jmpq   *%r11
  0x00007f7570493d4e: mov    0x8(%rsi),%ebx
  0x00007f7570493d51: shl    $0x3,%rbx
  0x00007f7570493d55: cmp    0x10(%rax),%rbx
  0x00007f7570493d59: mov    0x8(%rax),%rbx
  0x00007f7570493d5d: je     0x00007f7570493d68
  0x00007f7570493d63: jmpq   0x00007f757046ec40
  0x00007f7570493d68: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493d70: je     0x00007f7570493e6b
  0x00007f7570493d76: jmpq   0x00007f757046ec40
  0x00007f7570493d7b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570493d83: je     0x00007f7570493e6b
  0x00007f7570493d89: mov    %rsp,%r13
  0x00007f7570493d8c: mov    (%rsp),%rax
  0x00007f7570493d90: and    $0xfffffffffffffff0,%rsp
  0x00007f7570493d94: pushfq 
  0x00007f7570493d95: sub    $0x8,%rsp
  0x00007f7570493d99: mov    %rsp,-0x28(%rsp)
  0x00007f7570493d9e: sub    $0x80,%rsp
  0x00007f7570493da5: mov    %rax,0x78(%rsp)
  0x00007f7570493daa: mov    %rcx,0x70(%rsp)
  0x00007f7570493daf: mov    %rdx,0x68(%rsp)
  0x00007f7570493db4: mov    %rbx,0x60(%rsp)
  0x00007f7570493db9: mov    %rbp,0x50(%rsp)
  0x00007f7570493dbe: mov    %rsi,0x48(%rsp)
  0x00007f7570493dc3: mov    %rdi,0x40(%rsp)
  0x00007f7570493dc8: mov    %r8,0x38(%rsp)
  0x00007f7570493dcd: mov    %r9,0x30(%rsp)
  0x00007f7570493dd2: mov    %r10,0x28(%rsp)
  0x00007f7570493dd7: mov    %r11,0x20(%rsp)
  0x00007f7570493ddc: mov    %r12,0x18(%rsp)
  0x00007f7570493de1: mov    %r13,0x10(%rsp)
  0x00007f7570493de6: mov    %r14,0x8(%rsp)
  0x00007f7570493deb: mov    %r15,(%rsp)
  0x00007f7570493def: sub    $0x200,%rsp
  0x00007f7570493df6: fxsave64 (%rsp)
  0x00007f7570493dfb: mov    %rbx,%rdi
  0x00007f7570493dfe: mov    %rax,%rsi
  0x00007f7570493e01: callq  0x00007f7585522bca
  0x00007f7570493e06: fxrstor64 (%rsp)
  0x00007f7570493e0b: add    $0x200,%rsp
  0x00007f7570493e12: mov    (%rsp),%r15
  0x00007f7570493e16: mov    0x8(%rsp),%r14
  0x00007f7570493e1b: mov    0x10(%rsp),%r13
  0x00007f7570493e20: mov    0x18(%rsp),%r12
  0x00007f7570493e25: mov    0x20(%rsp),%r11
  0x00007f7570493e2a: mov    0x28(%rsp),%r10
  0x00007f7570493e2f: mov    0x30(%rsp),%r9
  0x00007f7570493e34: mov    0x38(%rsp),%r8
  0x00007f7570493e39: mov    0x40(%rsp),%rdi
  0x00007f7570493e3e: mov    0x48(%rsp),%rsi
  0x00007f7570493e43: mov    0x50(%rsp),%rbp
  0x00007f7570493e48: mov    0x60(%rsp),%rbx
  0x00007f7570493e4d: mov    0x68(%rsp),%rdx
  0x00007f7570493e52: mov    0x70(%rsp),%rcx
  0x00007f7570493e57: mov    0x78(%rsp),%rax
  0x00007f7570493e5c: add    $0x80,%rsp
  0x00007f7570493e63: add    $0x8,%rsp
  0x00007f7570493e67: popfq  
  0x00007f7570493e68: mov    %r13,%rsp
  0x00007f7570493e6b: pop    %rax
  0x00007f7570493e6c: mov    %rsp,%r13
  0x00007f7570493e6f: sub    $0x30,%rsp
  0x00007f7570493e73: mov    %rax,(%rsp)
  0x00007f7570493e77: mov    %rsi,0x20(%rsp)
  0x00007f7570493e7c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570493e86: mov    %rax,0x18(%rsp)
  0x00007f7570493e8b: mov    %rdx,0x10(%rsp)
  0x00007f7570493e90: mov    %ecx,0x8(%rsp)
  0x00007f7570493e94: mov    0x40(%rbx),%rcx
  0x00007f7570493e98: jmpq   *%rcx

AHE@0x00007f75800d53d0: 0xbba00000 i2c: 0x00007f7570493f60 c2i: 0x00007f757049407b c2iUV: 0x00007f757049404e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)C (555 bytes generated)
c2i argument handler starts at 0x7f757049407b
  0x00007f7570493f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570493f64: movabs $0x7f757036e3e0,%r11
  0x00007f7570493f6e: cmp    %r11,%rax
  0x00007f7570493f71: jbe    0x00007f7570493f8a
  0x00007f7570493f77: movabs $0x7f757046e3e0,%r11
  0x00007f7570493f81: cmp    %r11,%rax
  0x00007f7570493f84: jb     0x00007f7570494027
  0x00007f7570493f8a: movabs $0x7f7570369420,%r11
  0x00007f7570493f94: cmp    %r11,%rax
  0x00007f7570493f97: jbe    0x00007f7570493fb0
  0x00007f7570493f9d: movabs $0x7f757036de58,%r11
  0x00007f7570493fa7: cmp    %r11,%rax
  0x00007f7570493faa: jb     0x00007f7570494027
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570493fb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570493fb5: sub    $0x80,%rsp
  0x00007f7570493fbc: mov    %rax,0x78(%rsp)
  0x00007f7570493fc1: mov    %rcx,0x70(%rsp)
  0x00007f7570493fc6: mov    %rdx,0x68(%rsp)
  0x00007f7570493fcb: mov    %rbx,0x60(%rsp)
  0x00007f7570493fd0: mov    %rbp,0x50(%rsp)
  0x00007f7570493fd5: mov    %rsi,0x48(%rsp)
  0x00007f7570493fda: mov    %rdi,0x40(%rsp)
  0x00007f7570493fdf: mov    %r8,0x38(%rsp)
  0x00007f7570493fe4: mov    %r9,0x30(%rsp)
  0x00007f7570493fe9: mov    %r10,0x28(%rsp)
  0x00007f7570493fee: mov    %r11,0x20(%rsp)
  0x00007f7570493ff3: mov    %r12,0x18(%rsp)
  0x00007f7570493ff8: mov    %r13,0x10(%rsp)
  0x00007f7570493ffd: mov    %r14,0x8(%rsp)
  0x00007f7570494002: mov    %r15,(%rsp)
  0x00007f7570494006: movabs $0x7f758592f470,%rdi
  0x00007f7570494010: movabs $0x7f7570493fb0,%rsi
  0x00007f757049401a: mov    %rsp,%rdx
  0x00007f757049401d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494021: callq  0x00007f75853729fa
  0x00007f7570494026: hlt    
  ;; } verify_i2ce 
  0x00007f7570494027: mov    %rsp,%r11
  0x00007f757049402a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049402e: push   %rax
  0x00007f757049402f: mov    %r11,%rax
  0x00007f7570494032: mov    0x50(%rbx),%r11
  0x00007f7570494036: mov    0x18(%rax),%rsi
  0x00007f757049403a: mov    0x10(%rax),%rdx
  0x00007f757049403e: mov    0x8(%rax),%ecx
  0x00007f7570494041: mov    %rbx,0x258(%r15)
  0x00007f7570494048: mov    %rbx,%rax
  0x00007f757049404b: jmpq   *%r11
  0x00007f757049404e: mov    0x8(%rsi),%ebx
  0x00007f7570494051: shl    $0x3,%rbx
  0x00007f7570494055: cmp    0x10(%rax),%rbx
  0x00007f7570494059: mov    0x8(%rax),%rbx
  0x00007f757049405d: je     0x00007f7570494068
  0x00007f7570494063: jmpq   0x00007f757046ec40
  0x00007f7570494068: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494070: je     0x00007f757049416b
  0x00007f7570494076: jmpq   0x00007f757046ec40
  0x00007f757049407b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494083: je     0x00007f757049416b
  0x00007f7570494089: mov    %rsp,%r13
  0x00007f757049408c: mov    (%rsp),%rax
  0x00007f7570494090: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494094: pushfq 
  0x00007f7570494095: sub    $0x8,%rsp
  0x00007f7570494099: mov    %rsp,-0x28(%rsp)
  0x00007f757049409e: sub    $0x80,%rsp
  0x00007f75704940a5: mov    %rax,0x78(%rsp)
  0x00007f75704940aa: mov    %rcx,0x70(%rsp)
  0x00007f75704940af: mov    %rdx,0x68(%rsp)
  0x00007f75704940b4: mov    %rbx,0x60(%rsp)
  0x00007f75704940b9: mov    %rbp,0x50(%rsp)
  0x00007f75704940be: mov    %rsi,0x48(%rsp)
  0x00007f75704940c3: mov    %rdi,0x40(%rsp)
  0x00007f75704940c8: mov    %r8,0x38(%rsp)
  0x00007f75704940cd: mov    %r9,0x30(%rsp)
  0x00007f75704940d2: mov    %r10,0x28(%rsp)
  0x00007f75704940d7: mov    %r11,0x20(%rsp)
  0x00007f75704940dc: mov    %r12,0x18(%rsp)
  0x00007f75704940e1: mov    %r13,0x10(%rsp)
  0x00007f75704940e6: mov    %r14,0x8(%rsp)
  0x00007f75704940eb: mov    %r15,(%rsp)
  0x00007f75704940ef: sub    $0x200,%rsp
  0x00007f75704940f6: fxsave64 (%rsp)
  0x00007f75704940fb: mov    %rbx,%rdi
  0x00007f75704940fe: mov    %rax,%rsi
  0x00007f7570494101: callq  0x00007f7585522bca
  0x00007f7570494106: fxrstor64 (%rsp)
  0x00007f757049410b: add    $0x200,%rsp
  0x00007f7570494112: mov    (%rsp),%r15
  0x00007f7570494116: mov    0x8(%rsp),%r14
  0x00007f757049411b: mov    0x10(%rsp),%r13
  0x00007f7570494120: mov    0x18(%rsp),%r12
  0x00007f7570494125: mov    0x20(%rsp),%r11
  0x00007f757049412a: mov    0x28(%rsp),%r10
  0x00007f757049412f: mov    0x30(%rsp),%r9
  0x00007f7570494134: mov    0x38(%rsp),%r8
  0x00007f7570494139: mov    0x40(%rsp),%rdi
  0x00007f757049413e: mov    0x48(%rsp),%rsi
  0x00007f7570494143: mov    0x50(%rsp),%rbp
  0x00007f7570494148: mov    0x60(%rsp),%rbx
  0x00007f757049414d: mov    0x68(%rsp),%rdx
  0x00007f7570494152: mov    0x70(%rsp),%rcx
  0x00007f7570494157: mov    0x78(%rsp),%rax
  0x00007f757049415c: add    $0x80,%rsp
  0x00007f7570494163: add    $0x8,%rsp
  0x00007f7570494167: popfq  
  0x00007f7570494168: mov    %r13,%rsp
  0x00007f757049416b: pop    %rax
  0x00007f757049416c: mov    %rsp,%r13
  0x00007f757049416f: sub    $0x20,%rsp
  0x00007f7570494173: mov    %rax,(%rsp)
  0x00007f7570494177: mov    %rsi,0x18(%rsp)
  0x00007f757049417c: mov    %rdx,0x10(%rsp)
  0x00007f7570494181: mov    %ecx,0x8(%rsp)
  0x00007f7570494185: mov    0x40(%rbx),%rcx
  0x00007f7570494189: jmpq   *%rcx

AHE@0x00007f75800d5418: 0xbbbe0000 i2c: 0x00007f7570494260 c2i: 0x00007f757049437c c2iUV: 0x00007f757049434f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)C (572 bytes generated)
c2i argument handler starts at 0x7f757049437c
  0x00007f7570494260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570494264: movabs $0x7f757036e3e0,%r11
  0x00007f757049426e: cmp    %r11,%rax
  0x00007f7570494271: jbe    0x00007f757049428a
  0x00007f7570494277: movabs $0x7f757046e3e0,%r11
  0x00007f7570494281: cmp    %r11,%rax
  0x00007f7570494284: jb     0x00007f7570494327
  0x00007f757049428a: movabs $0x7f7570369420,%r11
  0x00007f7570494294: cmp    %r11,%rax
  0x00007f7570494297: jbe    0x00007f75704942b0
  0x00007f757049429d: movabs $0x7f757036de58,%r11
  0x00007f75704942a7: cmp    %r11,%rax
  0x00007f75704942aa: jb     0x00007f7570494327
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704942b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704942b5: sub    $0x80,%rsp
  0x00007f75704942bc: mov    %rax,0x78(%rsp)
  0x00007f75704942c1: mov    %rcx,0x70(%rsp)
  0x00007f75704942c6: mov    %rdx,0x68(%rsp)
  0x00007f75704942cb: mov    %rbx,0x60(%rsp)
  0x00007f75704942d0: mov    %rbp,0x50(%rsp)
  0x00007f75704942d5: mov    %rsi,0x48(%rsp)
  0x00007f75704942da: mov    %rdi,0x40(%rsp)
  0x00007f75704942df: mov    %r8,0x38(%rsp)
  0x00007f75704942e4: mov    %r9,0x30(%rsp)
  0x00007f75704942e9: mov    %r10,0x28(%rsp)
  0x00007f75704942ee: mov    %r11,0x20(%rsp)
  0x00007f75704942f3: mov    %r12,0x18(%rsp)
  0x00007f75704942f8: mov    %r13,0x10(%rsp)
  0x00007f75704942fd: mov    %r14,0x8(%rsp)
  0x00007f7570494302: mov    %r15,(%rsp)
  0x00007f7570494306: movabs $0x7f758592f470,%rdi
  0x00007f7570494310: movabs $0x7f75704942b0,%rsi
  0x00007f757049431a: mov    %rsp,%rdx
  0x00007f757049431d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494321: callq  0x00007f75853729fa
  0x00007f7570494326: hlt    
  ;; } verify_i2ce 
  0x00007f7570494327: mov    %rsp,%r11
  0x00007f757049432a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049432e: push   %rax
  0x00007f757049432f: mov    %r11,%rax
  0x00007f7570494332: mov    0x50(%rbx),%r11
  0x00007f7570494336: mov    0x20(%rax),%rsi
  0x00007f757049433a: mov    0x18(%rax),%rdx
  0x00007f757049433e: mov    0x8(%rax),%rcx
  0x00007f7570494342: mov    %rbx,0x258(%r15)
  0x00007f7570494349: mov    %rbx,%rax
  0x00007f757049434c: jmpq   *%r11
  0x00007f757049434f: mov    0x8(%rsi),%ebx
  0x00007f7570494352: shl    $0x3,%rbx
  0x00007f7570494356: cmp    0x10(%rax),%rbx
  0x00007f757049435a: mov    0x8(%rax),%rbx
  0x00007f757049435e: je     0x00007f7570494369
  0x00007f7570494364: jmpq   0x00007f757046ec40
  0x00007f7570494369: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494371: je     0x00007f757049446c
  0x00007f7570494377: jmpq   0x00007f757046ec40
  0x00007f757049437c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494384: je     0x00007f757049446c
  0x00007f757049438a: mov    %rsp,%r13
  0x00007f757049438d: mov    (%rsp),%rax
  0x00007f7570494391: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494395: pushfq 
  0x00007f7570494396: sub    $0x8,%rsp
  0x00007f757049439a: mov    %rsp,-0x28(%rsp)
  0x00007f757049439f: sub    $0x80,%rsp
  0x00007f75704943a6: mov    %rax,0x78(%rsp)
  0x00007f75704943ab: mov    %rcx,0x70(%rsp)
  0x00007f75704943b0: mov    %rdx,0x68(%rsp)
  0x00007f75704943b5: mov    %rbx,0x60(%rsp)
  0x00007f75704943ba: mov    %rbp,0x50(%rsp)
  0x00007f75704943bf: mov    %rsi,0x48(%rsp)
  0x00007f75704943c4: mov    %rdi,0x40(%rsp)
  0x00007f75704943c9: mov    %r8,0x38(%rsp)
  0x00007f75704943ce: mov    %r9,0x30(%rsp)
  0x00007f75704943d3: mov    %r10,0x28(%rsp)
  0x00007f75704943d8: mov    %r11,0x20(%rsp)
  0x00007f75704943dd: mov    %r12,0x18(%rsp)
  0x00007f75704943e2: mov    %r13,0x10(%rsp)
  0x00007f75704943e7: mov    %r14,0x8(%rsp)
  0x00007f75704943ec: mov    %r15,(%rsp)
  0x00007f75704943f0: sub    $0x200,%rsp
  0x00007f75704943f7: fxsave64 (%rsp)
  0x00007f75704943fc: mov    %rbx,%rdi
  0x00007f75704943ff: mov    %rax,%rsi
  0x00007f7570494402: callq  0x00007f7585522bca
  0x00007f7570494407: fxrstor64 (%rsp)
  0x00007f757049440c: add    $0x200,%rsp
  0x00007f7570494413: mov    (%rsp),%r15
  0x00007f7570494417: mov    0x8(%rsp),%r14
  0x00007f757049441c: mov    0x10(%rsp),%r13
  0x00007f7570494421: mov    0x18(%rsp),%r12
  0x00007f7570494426: mov    0x20(%rsp),%r11
  0x00007f757049442b: mov    0x28(%rsp),%r10
  0x00007f7570494430: mov    0x30(%rsp),%r9
  0x00007f7570494435: mov    0x38(%rsp),%r8
  0x00007f757049443a: mov    0x40(%rsp),%rdi
  0x00007f757049443f: mov    0x48(%rsp),%rsi
  0x00007f7570494444: mov    0x50(%rsp),%rbp
  0x00007f7570494449: mov    0x60(%rsp),%rbx
  0x00007f757049444e: mov    0x68(%rsp),%rdx
  0x00007f7570494453: mov    0x70(%rsp),%rcx
  0x00007f7570494458: mov    0x78(%rsp),%rax
  0x00007f757049445d: add    $0x80,%rsp
  0x00007f7570494464: add    $0x8,%rsp
  0x00007f7570494468: popfq  
  0x00007f7570494469: mov    %r13,%rsp
  0x00007f757049446c: pop    %rax
  0x00007f757049446d: mov    %rsp,%r13
  0x00007f7570494470: sub    $0x30,%rsp
  0x00007f7570494474: mov    %rax,(%rsp)
  0x00007f7570494478: mov    %rsi,0x20(%rsp)
  0x00007f757049447d: mov    %rdx,0x18(%rsp)
  0x00007f7570494482: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049448c: mov    %rax,0x10(%rsp)
  0x00007f7570494491: mov    %rcx,0x8(%rsp)
  0x00007f7570494496: mov    0x40(%rbx),%rcx
  0x00007f757049449a: jmpq   *%rcx

AHE@0x00007f75800d5460: 0xbbe00000 i2c: 0x00007f7570494560 c2i: 0x00007f7570494678 c2iUV: 0x00007f757049464b
i2c argument handler #0 for: receiver (J)C (563 bytes generated)
c2i argument handler starts at 0x7f7570494678
  0x00007f7570494560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570494564: movabs $0x7f757036e3e0,%r11
  0x00007f757049456e: cmp    %r11,%rax
  0x00007f7570494571: jbe    0x00007f757049458a
  0x00007f7570494577: movabs $0x7f757046e3e0,%r11
  0x00007f7570494581: cmp    %r11,%rax
  0x00007f7570494584: jb     0x00007f7570494627
  0x00007f757049458a: movabs $0x7f7570369420,%r11
  0x00007f7570494594: cmp    %r11,%rax
  0x00007f7570494597: jbe    0x00007f75704945b0
  0x00007f757049459d: movabs $0x7f757036de58,%r11
  0x00007f75704945a7: cmp    %r11,%rax
  0x00007f75704945aa: jb     0x00007f7570494627
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704945b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704945b5: sub    $0x80,%rsp
  0x00007f75704945bc: mov    %rax,0x78(%rsp)
  0x00007f75704945c1: mov    %rcx,0x70(%rsp)
  0x00007f75704945c6: mov    %rdx,0x68(%rsp)
  0x00007f75704945cb: mov    %rbx,0x60(%rsp)
  0x00007f75704945d0: mov    %rbp,0x50(%rsp)
  0x00007f75704945d5: mov    %rsi,0x48(%rsp)
  0x00007f75704945da: mov    %rdi,0x40(%rsp)
  0x00007f75704945df: mov    %r8,0x38(%rsp)
  0x00007f75704945e4: mov    %r9,0x30(%rsp)
  0x00007f75704945e9: mov    %r10,0x28(%rsp)
  0x00007f75704945ee: mov    %r11,0x20(%rsp)
  0x00007f75704945f3: mov    %r12,0x18(%rsp)
  0x00007f75704945f8: mov    %r13,0x10(%rsp)
  0x00007f75704945fd: mov    %r14,0x8(%rsp)
  0x00007f7570494602: mov    %r15,(%rsp)
  0x00007f7570494606: movabs $0x7f758592f470,%rdi
  0x00007f7570494610: movabs $0x7f75704945b0,%rsi
  0x00007f757049461a: mov    %rsp,%rdx
  0x00007f757049461d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494621: callq  0x00007f75853729fa
  0x00007f7570494626: hlt    
  ;; } verify_i2ce 
  0x00007f7570494627: mov    %rsp,%r11
  0x00007f757049462a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049462e: push   %rax
  0x00007f757049462f: mov    %r11,%rax
  0x00007f7570494632: mov    0x50(%rbx),%r11
  0x00007f7570494636: mov    0x18(%rax),%rsi
  0x00007f757049463a: mov    0x8(%rax),%rdx
  0x00007f757049463e: mov    %rbx,0x258(%r15)
  0x00007f7570494645: mov    %rbx,%rax
  0x00007f7570494648: jmpq   *%r11
  0x00007f757049464b: mov    0x8(%rsi),%ebx
  0x00007f757049464e: shl    $0x3,%rbx
  0x00007f7570494652: cmp    0x10(%rax),%rbx
  0x00007f7570494656: mov    0x8(%rax),%rbx
  0x00007f757049465a: je     0x00007f7570494665
  0x00007f7570494660: jmpq   0x00007f757046ec40
  0x00007f7570494665: cmpq   $0x0,0x58(%rbx)
  0x00007f757049466d: je     0x00007f7570494768
  0x00007f7570494673: jmpq   0x00007f757046ec40
  0x00007f7570494678: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494680: je     0x00007f7570494768
  0x00007f7570494686: mov    %rsp,%r13
  0x00007f7570494689: mov    (%rsp),%rax
  0x00007f757049468d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494691: pushfq 
  0x00007f7570494692: sub    $0x8,%rsp
  0x00007f7570494696: mov    %rsp,-0x28(%rsp)
  0x00007f757049469b: sub    $0x80,%rsp
  0x00007f75704946a2: mov    %rax,0x78(%rsp)
  0x00007f75704946a7: mov    %rcx,0x70(%rsp)
  0x00007f75704946ac: mov    %rdx,0x68(%rsp)
  0x00007f75704946b1: mov    %rbx,0x60(%rsp)
  0x00007f75704946b6: mov    %rbp,0x50(%rsp)
  0x00007f75704946bb: mov    %rsi,0x48(%rsp)
  0x00007f75704946c0: mov    %rdi,0x40(%rsp)
  0x00007f75704946c5: mov    %r8,0x38(%rsp)
  0x00007f75704946ca: mov    %r9,0x30(%rsp)
  0x00007f75704946cf: mov    %r10,0x28(%rsp)
  0x00007f75704946d4: mov    %r11,0x20(%rsp)
  0x00007f75704946d9: mov    %r12,0x18(%rsp)
  0x00007f75704946de: mov    %r13,0x10(%rsp)
  0x00007f75704946e3: mov    %r14,0x8(%rsp)
  0x00007f75704946e8: mov    %r15,(%rsp)
  0x00007f75704946ec: sub    $0x200,%rsp
  0x00007f75704946f3: fxsave64 (%rsp)
  0x00007f75704946f8: mov    %rbx,%rdi
  0x00007f75704946fb: mov    %rax,%rsi
  0x00007f75704946fe: callq  0x00007f7585522bca
  0x00007f7570494703: fxrstor64 (%rsp)
  0x00007f7570494708: add    $0x200,%rsp
  0x00007f757049470f: mov    (%rsp),%r15
  0x00007f7570494713: mov    0x8(%rsp),%r14
  0x00007f7570494718: mov    0x10(%rsp),%r13
  0x00007f757049471d: mov    0x18(%rsp),%r12
  0x00007f7570494722: mov    0x20(%rsp),%r11
  0x00007f7570494727: mov    0x28(%rsp),%r10
  0x00007f757049472c: mov    0x30(%rsp),%r9
  0x00007f7570494731: mov    0x38(%rsp),%r8
  0x00007f7570494736: mov    0x40(%rsp),%rdi
  0x00007f757049473b: mov    0x48(%rsp),%rsi
  0x00007f7570494740: mov    0x50(%rsp),%rbp
  0x00007f7570494745: mov    0x60(%rsp),%rbx
  0x00007f757049474a: mov    0x68(%rsp),%rdx
  0x00007f757049474f: mov    0x70(%rsp),%rcx
  0x00007f7570494754: mov    0x78(%rsp),%rax
  0x00007f7570494759: add    $0x80,%rsp
  0x00007f7570494760: add    $0x8,%rsp
  0x00007f7570494764: popfq  
  0x00007f7570494765: mov    %r13,%rsp
  0x00007f7570494768: pop    %rax
  0x00007f7570494769: mov    %rsp,%r13
  0x00007f757049476c: sub    $0x20,%rsp
  0x00007f7570494770: mov    %rax,(%rsp)
  0x00007f7570494774: mov    %rsi,0x18(%rsp)
  0x00007f7570494779: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570494783: mov    %rax,0x10(%rsp)
  0x00007f7570494788: mov    %rdx,0x8(%rsp)
  0x00007f757049478d: mov    0x40(%rbx),%rcx
  0x00007f7570494791: jmpq   *%rcx

AHE@0x00007f75800d54a8: 0xbbbea000 i2c: 0x00007f7570494860 c2i: 0x00007f7570494980 c2iUV: 0x00007f7570494953
i2c argument handler #0 for: receiver (Ljava/lang/Object;JS)V (581 bytes generated)
c2i argument handler starts at 0x7f7570494980
  0x00007f7570494860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570494864: movabs $0x7f757036e3e0,%r11
  0x00007f757049486e: cmp    %r11,%rax
  0x00007f7570494871: jbe    0x00007f757049488a
  0x00007f7570494877: movabs $0x7f757046e3e0,%r11
  0x00007f7570494881: cmp    %r11,%rax
  0x00007f7570494884: jb     0x00007f7570494927
  0x00007f757049488a: movabs $0x7f7570369420,%r11
  0x00007f7570494894: cmp    %r11,%rax
  0x00007f7570494897: jbe    0x00007f75704948b0
  0x00007f757049489d: movabs $0x7f757036de58,%r11
  0x00007f75704948a7: cmp    %r11,%rax
  0x00007f75704948aa: jb     0x00007f7570494927
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704948b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704948b5: sub    $0x80,%rsp
  0x00007f75704948bc: mov    %rax,0x78(%rsp)
  0x00007f75704948c1: mov    %rcx,0x70(%rsp)
  0x00007f75704948c6: mov    %rdx,0x68(%rsp)
  0x00007f75704948cb: mov    %rbx,0x60(%rsp)
  0x00007f75704948d0: mov    %rbp,0x50(%rsp)
  0x00007f75704948d5: mov    %rsi,0x48(%rsp)
  0x00007f75704948da: mov    %rdi,0x40(%rsp)
  0x00007f75704948df: mov    %r8,0x38(%rsp)
  0x00007f75704948e4: mov    %r9,0x30(%rsp)
  0x00007f75704948e9: mov    %r10,0x28(%rsp)
  0x00007f75704948ee: mov    %r11,0x20(%rsp)
  0x00007f75704948f3: mov    %r12,0x18(%rsp)
  0x00007f75704948f8: mov    %r13,0x10(%rsp)
  0x00007f75704948fd: mov    %r14,0x8(%rsp)
  0x00007f7570494902: mov    %r15,(%rsp)
  0x00007f7570494906: movabs $0x7f758592f470,%rdi
  0x00007f7570494910: movabs $0x7f75704948b0,%rsi
  0x00007f757049491a: mov    %rsp,%rdx
  0x00007f757049491d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494921: callq  0x00007f75853729fa
  0x00007f7570494926: hlt    
  ;; } verify_i2ce 
  0x00007f7570494927: mov    %rsp,%r11
  0x00007f757049492a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049492e: push   %rax
  0x00007f757049492f: mov    %r11,%rax
  0x00007f7570494932: mov    0x50(%rbx),%r11
  0x00007f7570494936: mov    0x28(%rax),%rsi
  0x00007f757049493a: mov    0x20(%rax),%rdx
  0x00007f757049493e: mov    0x10(%rax),%rcx
  0x00007f7570494942: mov    0x8(%rax),%r8d
  0x00007f7570494946: mov    %rbx,0x258(%r15)
  0x00007f757049494d: mov    %rbx,%rax
  0x00007f7570494950: jmpq   *%r11
  0x00007f7570494953: mov    0x8(%rsi),%ebx
  0x00007f7570494956: shl    $0x3,%rbx
  0x00007f757049495a: cmp    0x10(%rax),%rbx
  0x00007f757049495e: mov    0x8(%rax),%rbx
  0x00007f7570494962: je     0x00007f757049496d
  0x00007f7570494968: jmpq   0x00007f757046ec40
  0x00007f757049496d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494975: je     0x00007f7570494a70
  0x00007f757049497b: jmpq   0x00007f757046ec40
  0x00007f7570494980: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494988: je     0x00007f7570494a70
  0x00007f757049498e: mov    %rsp,%r13
  0x00007f7570494991: mov    (%rsp),%rax
  0x00007f7570494995: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494999: pushfq 
  0x00007f757049499a: sub    $0x8,%rsp
  0x00007f757049499e: mov    %rsp,-0x28(%rsp)
  0x00007f75704949a3: sub    $0x80,%rsp
  0x00007f75704949aa: mov    %rax,0x78(%rsp)
  0x00007f75704949af: mov    %rcx,0x70(%rsp)
  0x00007f75704949b4: mov    %rdx,0x68(%rsp)
  0x00007f75704949b9: mov    %rbx,0x60(%rsp)
  0x00007f75704949be: mov    %rbp,0x50(%rsp)
  0x00007f75704949c3: mov    %rsi,0x48(%rsp)
  0x00007f75704949c8: mov    %rdi,0x40(%rsp)
  0x00007f75704949cd: mov    %r8,0x38(%rsp)
  0x00007f75704949d2: mov    %r9,0x30(%rsp)
  0x00007f75704949d7: mov    %r10,0x28(%rsp)
  0x00007f75704949dc: mov    %r11,0x20(%rsp)
  0x00007f75704949e1: mov    %r12,0x18(%rsp)
  0x00007f75704949e6: mov    %r13,0x10(%rsp)
  0x00007f75704949eb: mov    %r14,0x8(%rsp)
  0x00007f75704949f0: mov    %r15,(%rsp)
  0x00007f75704949f4: sub    $0x200,%rsp
  0x00007f75704949fb: fxsave64 (%rsp)
  0x00007f7570494a00: mov    %rbx,%rdi
  0x00007f7570494a03: mov    %rax,%rsi
  0x00007f7570494a06: callq  0x00007f7585522bca
  0x00007f7570494a0b: fxrstor64 (%rsp)
  0x00007f7570494a10: add    $0x200,%rsp
  0x00007f7570494a17: mov    (%rsp),%r15
  0x00007f7570494a1b: mov    0x8(%rsp),%r14
  0x00007f7570494a20: mov    0x10(%rsp),%r13
  0x00007f7570494a25: mov    0x18(%rsp),%r12
  0x00007f7570494a2a: mov    0x20(%rsp),%r11
  0x00007f7570494a2f: mov    0x28(%rsp),%r10
  0x00007f7570494a34: mov    0x30(%rsp),%r9
  0x00007f7570494a39: mov    0x38(%rsp),%r8
  0x00007f7570494a3e: mov    0x40(%rsp),%rdi
  0x00007f7570494a43: mov    0x48(%rsp),%rsi
  0x00007f7570494a48: mov    0x50(%rsp),%rbp
  0x00007f7570494a4d: mov    0x60(%rsp),%rbx
  0x00007f7570494a52: mov    0x68(%rsp),%rdx
  0x00007f7570494a57: mov    0x70(%rsp),%rcx
  0x00007f7570494a5c: mov    0x78(%rsp),%rax
  0x00007f7570494a61: add    $0x80,%rsp
  0x00007f7570494a68: add    $0x8,%rsp
  0x00007f7570494a6c: popfq  
  0x00007f7570494a6d: mov    %r13,%rsp
  0x00007f7570494a70: pop    %rax
  0x00007f7570494a71: mov    %rsp,%r13
  0x00007f7570494a74: sub    $0x30,%rsp
  0x00007f7570494a78: mov    %rax,(%rsp)
  0x00007f7570494a7c: mov    %rsi,0x28(%rsp)
  0x00007f7570494a81: mov    %rdx,0x20(%rsp)
  0x00007f7570494a86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570494a90: mov    %rax,0x18(%rsp)
  0x00007f7570494a95: mov    %rcx,0x10(%rsp)
  0x00007f7570494a9a: mov    %r8d,0x8(%rsp)
  0x00007f7570494a9f: mov    0x40(%rbx),%rcx
  0x00007f7570494aa3: jmpq   *%rcx

AHE@0x00007f75800d54f0: 0xbbea0000 i2c: 0x00007f7570494b60 c2i: 0x00007f7570494c7b c2iUV: 0x00007f7570494c4e
i2c argument handler #0 for: receiver (JS)V (570 bytes generated)
c2i argument handler starts at 0x7f7570494c7b
  0x00007f7570494b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570494b64: movabs $0x7f757036e3e0,%r11
  0x00007f7570494b6e: cmp    %r11,%rax
  0x00007f7570494b71: jbe    0x00007f7570494b8a
  0x00007f7570494b77: movabs $0x7f757046e3e0,%r11
  0x00007f7570494b81: cmp    %r11,%rax
  0x00007f7570494b84: jb     0x00007f7570494c27
  0x00007f7570494b8a: movabs $0x7f7570369420,%r11
  0x00007f7570494b94: cmp    %r11,%rax
  0x00007f7570494b97: jbe    0x00007f7570494bb0
  0x00007f7570494b9d: movabs $0x7f757036de58,%r11
  0x00007f7570494ba7: cmp    %r11,%rax
  0x00007f7570494baa: jb     0x00007f7570494c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570494bb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570494bb5: sub    $0x80,%rsp
  0x00007f7570494bbc: mov    %rax,0x78(%rsp)
  0x00007f7570494bc1: mov    %rcx,0x70(%rsp)
  0x00007f7570494bc6: mov    %rdx,0x68(%rsp)
  0x00007f7570494bcb: mov    %rbx,0x60(%rsp)
  0x00007f7570494bd0: mov    %rbp,0x50(%rsp)
  0x00007f7570494bd5: mov    %rsi,0x48(%rsp)
  0x00007f7570494bda: mov    %rdi,0x40(%rsp)
  0x00007f7570494bdf: mov    %r8,0x38(%rsp)
  0x00007f7570494be4: mov    %r9,0x30(%rsp)
  0x00007f7570494be9: mov    %r10,0x28(%rsp)
  0x00007f7570494bee: mov    %r11,0x20(%rsp)
  0x00007f7570494bf3: mov    %r12,0x18(%rsp)
  0x00007f7570494bf8: mov    %r13,0x10(%rsp)
  0x00007f7570494bfd: mov    %r14,0x8(%rsp)
  0x00007f7570494c02: mov    %r15,(%rsp)
  0x00007f7570494c06: movabs $0x7f758592f470,%rdi
  0x00007f7570494c10: movabs $0x7f7570494bb0,%rsi
  0x00007f7570494c1a: mov    %rsp,%rdx
  0x00007f7570494c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494c21: callq  0x00007f75853729fa
  0x00007f7570494c26: hlt    
  ;; } verify_i2ce 
  0x00007f7570494c27: mov    %rsp,%r11
  0x00007f7570494c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494c2e: push   %rax
  0x00007f7570494c2f: mov    %r11,%rax
  0x00007f7570494c32: mov    0x50(%rbx),%r11
  0x00007f7570494c36: mov    0x20(%rax),%rsi
  0x00007f7570494c3a: mov    0x10(%rax),%rdx
  0x00007f7570494c3e: mov    0x8(%rax),%ecx
  0x00007f7570494c41: mov    %rbx,0x258(%r15)
  0x00007f7570494c48: mov    %rbx,%rax
  0x00007f7570494c4b: jmpq   *%r11
  0x00007f7570494c4e: mov    0x8(%rsi),%ebx
  0x00007f7570494c51: shl    $0x3,%rbx
  0x00007f7570494c55: cmp    0x10(%rax),%rbx
  0x00007f7570494c59: mov    0x8(%rax),%rbx
  0x00007f7570494c5d: je     0x00007f7570494c68
  0x00007f7570494c63: jmpq   0x00007f757046ec40
  0x00007f7570494c68: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494c70: je     0x00007f7570494d6b
  0x00007f7570494c76: jmpq   0x00007f757046ec40
  0x00007f7570494c7b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494c83: je     0x00007f7570494d6b
  0x00007f7570494c89: mov    %rsp,%r13
  0x00007f7570494c8c: mov    (%rsp),%rax
  0x00007f7570494c90: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494c94: pushfq 
  0x00007f7570494c95: sub    $0x8,%rsp
  0x00007f7570494c99: mov    %rsp,-0x28(%rsp)
  0x00007f7570494c9e: sub    $0x80,%rsp
  0x00007f7570494ca5: mov    %rax,0x78(%rsp)
  0x00007f7570494caa: mov    %rcx,0x70(%rsp)
  0x00007f7570494caf: mov    %rdx,0x68(%rsp)
  0x00007f7570494cb4: mov    %rbx,0x60(%rsp)
  0x00007f7570494cb9: mov    %rbp,0x50(%rsp)
  0x00007f7570494cbe: mov    %rsi,0x48(%rsp)
  0x00007f7570494cc3: mov    %rdi,0x40(%rsp)
  0x00007f7570494cc8: mov    %r8,0x38(%rsp)
  0x00007f7570494ccd: mov    %r9,0x30(%rsp)
  0x00007f7570494cd2: mov    %r10,0x28(%rsp)
  0x00007f7570494cd7: mov    %r11,0x20(%rsp)
  0x00007f7570494cdc: mov    %r12,0x18(%rsp)
  0x00007f7570494ce1: mov    %r13,0x10(%rsp)
  0x00007f7570494ce6: mov    %r14,0x8(%rsp)
  0x00007f7570494ceb: mov    %r15,(%rsp)
  0x00007f7570494cef: sub    $0x200,%rsp
  0x00007f7570494cf6: fxsave64 (%rsp)
  0x00007f7570494cfb: mov    %rbx,%rdi
  0x00007f7570494cfe: mov    %rax,%rsi
  0x00007f7570494d01: callq  0x00007f7585522bca
  0x00007f7570494d06: fxrstor64 (%rsp)
  0x00007f7570494d0b: add    $0x200,%rsp
  0x00007f7570494d12: mov    (%rsp),%r15
  0x00007f7570494d16: mov    0x8(%rsp),%r14
  0x00007f7570494d1b: mov    0x10(%rsp),%r13
  0x00007f7570494d20: mov    0x18(%rsp),%r12
  0x00007f7570494d25: mov    0x20(%rsp),%r11
  0x00007f7570494d2a: mov    0x28(%rsp),%r10
  0x00007f7570494d2f: mov    0x30(%rsp),%r9
  0x00007f7570494d34: mov    0x38(%rsp),%r8
  0x00007f7570494d39: mov    0x40(%rsp),%rdi
  0x00007f7570494d3e: mov    0x48(%rsp),%rsi
  0x00007f7570494d43: mov    0x50(%rsp),%rbp
  0x00007f7570494d48: mov    0x60(%rsp),%rbx
  0x00007f7570494d4d: mov    0x68(%rsp),%rdx
  0x00007f7570494d52: mov    0x70(%rsp),%rcx
  0x00007f7570494d57: mov    0x78(%rsp),%rax
  0x00007f7570494d5c: add    $0x80,%rsp
  0x00007f7570494d63: add    $0x8,%rsp
  0x00007f7570494d67: popfq  
  0x00007f7570494d68: mov    %r13,%rsp
  0x00007f7570494d6b: pop    %rax
  0x00007f7570494d6c: mov    %rsp,%r13
  0x00007f7570494d6f: sub    $0x30,%rsp
  0x00007f7570494d73: mov    %rax,(%rsp)
  0x00007f7570494d77: mov    %rsi,0x20(%rsp)
  0x00007f7570494d7c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570494d86: mov    %rax,0x18(%rsp)
  0x00007f7570494d8b: mov    %rdx,0x10(%rsp)
  0x00007f7570494d90: mov    %ecx,0x8(%rsp)
  0x00007f7570494d94: mov    0x40(%rbx),%rcx
  0x00007f7570494d98: jmpq   *%rcx

AHE@0x00007f75800d5538: 0xbbaa0000 i2c: 0x00007f7570494e60 c2i: 0x00007f7570494f7f c2iUV: 0x00007f7570494f52
i2c argument handler #0 for: receiver (Ljava/lang/Object;IS)V (564 bytes generated)
c2i argument handler starts at 0x7f7570494f7f
  0x00007f7570494e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570494e64: movabs $0x7f757036e3e0,%r11
  0x00007f7570494e6e: cmp    %r11,%rax
  0x00007f7570494e71: jbe    0x00007f7570494e8a
  0x00007f7570494e77: movabs $0x7f757046e3e0,%r11
  0x00007f7570494e81: cmp    %r11,%rax
  0x00007f7570494e84: jb     0x00007f7570494f27
  0x00007f7570494e8a: movabs $0x7f7570369420,%r11
  0x00007f7570494e94: cmp    %r11,%rax
  0x00007f7570494e97: jbe    0x00007f7570494eb0
  0x00007f7570494e9d: movabs $0x7f757036de58,%r11
  0x00007f7570494ea7: cmp    %r11,%rax
  0x00007f7570494eaa: jb     0x00007f7570494f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570494eb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570494eb5: sub    $0x80,%rsp
  0x00007f7570494ebc: mov    %rax,0x78(%rsp)
  0x00007f7570494ec1: mov    %rcx,0x70(%rsp)
  0x00007f7570494ec6: mov    %rdx,0x68(%rsp)
  0x00007f7570494ecb: mov    %rbx,0x60(%rsp)
  0x00007f7570494ed0: mov    %rbp,0x50(%rsp)
  0x00007f7570494ed5: mov    %rsi,0x48(%rsp)
  0x00007f7570494eda: mov    %rdi,0x40(%rsp)
  0x00007f7570494edf: mov    %r8,0x38(%rsp)
  0x00007f7570494ee4: mov    %r9,0x30(%rsp)
  0x00007f7570494ee9: mov    %r10,0x28(%rsp)
  0x00007f7570494eee: mov    %r11,0x20(%rsp)
  0x00007f7570494ef3: mov    %r12,0x18(%rsp)
  0x00007f7570494ef8: mov    %r13,0x10(%rsp)
  0x00007f7570494efd: mov    %r14,0x8(%rsp)
  0x00007f7570494f02: mov    %r15,(%rsp)
  0x00007f7570494f06: movabs $0x7f758592f470,%rdi
  0x00007f7570494f10: movabs $0x7f7570494eb0,%rsi
  0x00007f7570494f1a: mov    %rsp,%rdx
  0x00007f7570494f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494f21: callq  0x00007f75853729fa
  0x00007f7570494f26: hlt    
  ;; } verify_i2ce 
  0x00007f7570494f27: mov    %rsp,%r11
  0x00007f7570494f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494f2e: push   %rax
  0x00007f7570494f2f: mov    %r11,%rax
  0x00007f7570494f32: mov    0x50(%rbx),%r11
  0x00007f7570494f36: mov    0x20(%rax),%rsi
  0x00007f7570494f3a: mov    0x18(%rax),%rdx
  0x00007f7570494f3e: mov    0x10(%rax),%ecx
  0x00007f7570494f41: mov    0x8(%rax),%r8d
  0x00007f7570494f45: mov    %rbx,0x258(%r15)
  0x00007f7570494f4c: mov    %rbx,%rax
  0x00007f7570494f4f: jmpq   *%r11
  0x00007f7570494f52: mov    0x8(%rsi),%ebx
  0x00007f7570494f55: shl    $0x3,%rbx
  0x00007f7570494f59: cmp    0x10(%rax),%rbx
  0x00007f7570494f5d: mov    0x8(%rax),%rbx
  0x00007f7570494f61: je     0x00007f7570494f6c
  0x00007f7570494f67: jmpq   0x00007f757046ec40
  0x00007f7570494f6c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494f74: je     0x00007f757049506f
  0x00007f7570494f7a: jmpq   0x00007f757046ec40
  0x00007f7570494f7f: cmpq   $0x0,0x58(%rbx)
  0x00007f7570494f87: je     0x00007f757049506f
  0x00007f7570494f8d: mov    %rsp,%r13
  0x00007f7570494f90: mov    (%rsp),%rax
  0x00007f7570494f94: and    $0xfffffffffffffff0,%rsp
  0x00007f7570494f98: pushfq 
  0x00007f7570494f99: sub    $0x8,%rsp
  0x00007f7570494f9d: mov    %rsp,-0x28(%rsp)
  0x00007f7570494fa2: sub    $0x80,%rsp
  0x00007f7570494fa9: mov    %rax,0x78(%rsp)
  0x00007f7570494fae: mov    %rcx,0x70(%rsp)
  0x00007f7570494fb3: mov    %rdx,0x68(%rsp)
  0x00007f7570494fb8: mov    %rbx,0x60(%rsp)
  0x00007f7570494fbd: mov    %rbp,0x50(%rsp)
  0x00007f7570494fc2: mov    %rsi,0x48(%rsp)
  0x00007f7570494fc7: mov    %rdi,0x40(%rsp)
  0x00007f7570494fcc: mov    %r8,0x38(%rsp)
  0x00007f7570494fd1: mov    %r9,0x30(%rsp)
  0x00007f7570494fd6: mov    %r10,0x28(%rsp)
  0x00007f7570494fdb: mov    %r11,0x20(%rsp)
  0x00007f7570494fe0: mov    %r12,0x18(%rsp)
  0x00007f7570494fe5: mov    %r13,0x10(%rsp)
  0x00007f7570494fea: mov    %r14,0x8(%rsp)
  0x00007f7570494fef: mov    %r15,(%rsp)
  0x00007f7570494ff3: sub    $0x200,%rsp
  0x00007f7570494ffa: fxsave64 (%rsp)
  0x00007f7570494fff: mov    %rbx,%rdi
  0x00007f7570495002: mov    %rax,%rsi
  0x00007f7570495005: callq  0x00007f7585522bca
  0x00007f757049500a: fxrstor64 (%rsp)
  0x00007f757049500f: add    $0x200,%rsp
  0x00007f7570495016: mov    (%rsp),%r15
  0x00007f757049501a: mov    0x8(%rsp),%r14
  0x00007f757049501f: mov    0x10(%rsp),%r13
  0x00007f7570495024: mov    0x18(%rsp),%r12
  0x00007f7570495029: mov    0x20(%rsp),%r11
  0x00007f757049502e: mov    0x28(%rsp),%r10
  0x00007f7570495033: mov    0x30(%rsp),%r9
  0x00007f7570495038: mov    0x38(%rsp),%r8
  0x00007f757049503d: mov    0x40(%rsp),%rdi
  0x00007f7570495042: mov    0x48(%rsp),%rsi
  0x00007f7570495047: mov    0x50(%rsp),%rbp
  0x00007f757049504c: mov    0x60(%rsp),%rbx
  0x00007f7570495051: mov    0x68(%rsp),%rdx
  0x00007f7570495056: mov    0x70(%rsp),%rcx
  0x00007f757049505b: mov    0x78(%rsp),%rax
  0x00007f7570495060: add    $0x80,%rsp
  0x00007f7570495067: add    $0x8,%rsp
  0x00007f757049506b: popfq  
  0x00007f757049506c: mov    %r13,%rsp
  0x00007f757049506f: pop    %rax
  0x00007f7570495070: mov    %rsp,%r13
  0x00007f7570495073: sub    $0x30,%rsp
  0x00007f7570495077: mov    %rax,(%rsp)
  0x00007f757049507b: mov    %rsi,0x20(%rsp)
  0x00007f7570495080: mov    %rdx,0x18(%rsp)
  0x00007f7570495085: mov    %ecx,0x10(%rsp)
  0x00007f7570495089: mov    %r8d,0x8(%rsp)
  0x00007f757049508e: mov    0x40(%rbx),%rcx
  0x00007f7570495092: jmpq   *%rcx

AHE@0x00007f75800d5580: 0xbbbe0000 i2c: 0x00007f7570495160 c2i: 0x00007f757049527c c2iUV: 0x00007f757049524f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)S (572 bytes generated)
c2i argument handler starts at 0x7f757049527c
  0x00007f7570495160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570495164: movabs $0x7f757036e3e0,%r11
  0x00007f757049516e: cmp    %r11,%rax
  0x00007f7570495171: jbe    0x00007f757049518a
  0x00007f7570495177: movabs $0x7f757046e3e0,%r11
  0x00007f7570495181: cmp    %r11,%rax
  0x00007f7570495184: jb     0x00007f7570495227
  0x00007f757049518a: movabs $0x7f7570369420,%r11
  0x00007f7570495194: cmp    %r11,%rax
  0x00007f7570495197: jbe    0x00007f75704951b0
  0x00007f757049519d: movabs $0x7f757036de58,%r11
  0x00007f75704951a7: cmp    %r11,%rax
  0x00007f75704951aa: jb     0x00007f7570495227
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704951b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704951b5: sub    $0x80,%rsp
  0x00007f75704951bc: mov    %rax,0x78(%rsp)
  0x00007f75704951c1: mov    %rcx,0x70(%rsp)
  0x00007f75704951c6: mov    %rdx,0x68(%rsp)
  0x00007f75704951cb: mov    %rbx,0x60(%rsp)
  0x00007f75704951d0: mov    %rbp,0x50(%rsp)
  0x00007f75704951d5: mov    %rsi,0x48(%rsp)
  0x00007f75704951da: mov    %rdi,0x40(%rsp)
  0x00007f75704951df: mov    %r8,0x38(%rsp)
  0x00007f75704951e4: mov    %r9,0x30(%rsp)
  0x00007f75704951e9: mov    %r10,0x28(%rsp)
  0x00007f75704951ee: mov    %r11,0x20(%rsp)
  0x00007f75704951f3: mov    %r12,0x18(%rsp)
  0x00007f75704951f8: mov    %r13,0x10(%rsp)
  0x00007f75704951fd: mov    %r14,0x8(%rsp)
  0x00007f7570495202: mov    %r15,(%rsp)
  0x00007f7570495206: movabs $0x7f758592f470,%rdi
  0x00007f7570495210: movabs $0x7f75704951b0,%rsi
  0x00007f757049521a: mov    %rsp,%rdx
  0x00007f757049521d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495221: callq  0x00007f75853729fa
  0x00007f7570495226: hlt    
  ;; } verify_i2ce 
  0x00007f7570495227: mov    %rsp,%r11
  0x00007f757049522a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049522e: push   %rax
  0x00007f757049522f: mov    %r11,%rax
  0x00007f7570495232: mov    0x50(%rbx),%r11
  0x00007f7570495236: mov    0x20(%rax),%rsi
  0x00007f757049523a: mov    0x18(%rax),%rdx
  0x00007f757049523e: mov    0x8(%rax),%rcx
  0x00007f7570495242: mov    %rbx,0x258(%r15)
  0x00007f7570495249: mov    %rbx,%rax
  0x00007f757049524c: jmpq   *%r11
  0x00007f757049524f: mov    0x8(%rsi),%ebx
  0x00007f7570495252: shl    $0x3,%rbx
  0x00007f7570495256: cmp    0x10(%rax),%rbx
  0x00007f757049525a: mov    0x8(%rax),%rbx
  0x00007f757049525e: je     0x00007f7570495269
  0x00007f7570495264: jmpq   0x00007f757046ec40
  0x00007f7570495269: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495271: je     0x00007f757049536c
  0x00007f7570495277: jmpq   0x00007f757046ec40
  0x00007f757049527c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495284: je     0x00007f757049536c
  0x00007f757049528a: mov    %rsp,%r13
  0x00007f757049528d: mov    (%rsp),%rax
  0x00007f7570495291: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495295: pushfq 
  0x00007f7570495296: sub    $0x8,%rsp
  0x00007f757049529a: mov    %rsp,-0x28(%rsp)
  0x00007f757049529f: sub    $0x80,%rsp
  0x00007f75704952a6: mov    %rax,0x78(%rsp)
  0x00007f75704952ab: mov    %rcx,0x70(%rsp)
  0x00007f75704952b0: mov    %rdx,0x68(%rsp)
  0x00007f75704952b5: mov    %rbx,0x60(%rsp)
  0x00007f75704952ba: mov    %rbp,0x50(%rsp)
  0x00007f75704952bf: mov    %rsi,0x48(%rsp)
  0x00007f75704952c4: mov    %rdi,0x40(%rsp)
  0x00007f75704952c9: mov    %r8,0x38(%rsp)
  0x00007f75704952ce: mov    %r9,0x30(%rsp)
  0x00007f75704952d3: mov    %r10,0x28(%rsp)
  0x00007f75704952d8: mov    %r11,0x20(%rsp)
  0x00007f75704952dd: mov    %r12,0x18(%rsp)
  0x00007f75704952e2: mov    %r13,0x10(%rsp)
  0x00007f75704952e7: mov    %r14,0x8(%rsp)
  0x00007f75704952ec: mov    %r15,(%rsp)
  0x00007f75704952f0: sub    $0x200,%rsp
  0x00007f75704952f7: fxsave64 (%rsp)
  0x00007f75704952fc: mov    %rbx,%rdi
  0x00007f75704952ff: mov    %rax,%rsi
  0x00007f7570495302: callq  0x00007f7585522bca
  0x00007f7570495307: fxrstor64 (%rsp)
  0x00007f757049530c: add    $0x200,%rsp
  0x00007f7570495313: mov    (%rsp),%r15
  0x00007f7570495317: mov    0x8(%rsp),%r14
  0x00007f757049531c: mov    0x10(%rsp),%r13
  0x00007f7570495321: mov    0x18(%rsp),%r12
  0x00007f7570495326: mov    0x20(%rsp),%r11
  0x00007f757049532b: mov    0x28(%rsp),%r10
  0x00007f7570495330: mov    0x30(%rsp),%r9
  0x00007f7570495335: mov    0x38(%rsp),%r8
  0x00007f757049533a: mov    0x40(%rsp),%rdi
  0x00007f757049533f: mov    0x48(%rsp),%rsi
  0x00007f7570495344: mov    0x50(%rsp),%rbp
  0x00007f7570495349: mov    0x60(%rsp),%rbx
  0x00007f757049534e: mov    0x68(%rsp),%rdx
  0x00007f7570495353: mov    0x70(%rsp),%rcx
  0x00007f7570495358: mov    0x78(%rsp),%rax
  0x00007f757049535d: add    $0x80,%rsp
  0x00007f7570495364: add    $0x8,%rsp
  0x00007f7570495368: popfq  
  0x00007f7570495369: mov    %r13,%rsp
  0x00007f757049536c: pop    %rax
  0x00007f757049536d: mov    %rsp,%r13
  0x00007f7570495370: sub    $0x30,%rsp
  0x00007f7570495374: mov    %rax,(%rsp)
  0x00007f7570495378: mov    %rsi,0x20(%rsp)
  0x00007f757049537d: mov    %rdx,0x18(%rsp)
  0x00007f7570495382: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049538c: mov    %rax,0x10(%rsp)
  0x00007f7570495391: mov    %rcx,0x8(%rsp)
  0x00007f7570495396: mov    0x40(%rbx),%rcx
  0x00007f757049539a: jmpq   *%rcx

AHE@0x00007f75800d55c8: 0xbbe00000 i2c: 0x00007f7570495460 c2i: 0x00007f7570495578 c2iUV: 0x00007f757049554b
i2c argument handler #0 for: receiver (J)S (563 bytes generated)
c2i argument handler starts at 0x7f7570495578
  0x00007f7570495460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570495464: movabs $0x7f757036e3e0,%r11
  0x00007f757049546e: cmp    %r11,%rax
  0x00007f7570495471: jbe    0x00007f757049548a
  0x00007f7570495477: movabs $0x7f757046e3e0,%r11
  0x00007f7570495481: cmp    %r11,%rax
  0x00007f7570495484: jb     0x00007f7570495527
  0x00007f757049548a: movabs $0x7f7570369420,%r11
  0x00007f7570495494: cmp    %r11,%rax
  0x00007f7570495497: jbe    0x00007f75704954b0
  0x00007f757049549d: movabs $0x7f757036de58,%r11
  0x00007f75704954a7: cmp    %r11,%rax
  0x00007f75704954aa: jb     0x00007f7570495527
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704954b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704954b5: sub    $0x80,%rsp
  0x00007f75704954bc: mov    %rax,0x78(%rsp)
  0x00007f75704954c1: mov    %rcx,0x70(%rsp)
  0x00007f75704954c6: mov    %rdx,0x68(%rsp)
  0x00007f75704954cb: mov    %rbx,0x60(%rsp)
  0x00007f75704954d0: mov    %rbp,0x50(%rsp)
  0x00007f75704954d5: mov    %rsi,0x48(%rsp)
  0x00007f75704954da: mov    %rdi,0x40(%rsp)
  0x00007f75704954df: mov    %r8,0x38(%rsp)
  0x00007f75704954e4: mov    %r9,0x30(%rsp)
  0x00007f75704954e9: mov    %r10,0x28(%rsp)
  0x00007f75704954ee: mov    %r11,0x20(%rsp)
  0x00007f75704954f3: mov    %r12,0x18(%rsp)
  0x00007f75704954f8: mov    %r13,0x10(%rsp)
  0x00007f75704954fd: mov    %r14,0x8(%rsp)
  0x00007f7570495502: mov    %r15,(%rsp)
  0x00007f7570495506: movabs $0x7f758592f470,%rdi
  0x00007f7570495510: movabs $0x7f75704954b0,%rsi
  0x00007f757049551a: mov    %rsp,%rdx
  0x00007f757049551d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495521: callq  0x00007f75853729fa
  0x00007f7570495526: hlt    
  ;; } verify_i2ce 
  0x00007f7570495527: mov    %rsp,%r11
  0x00007f757049552a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049552e: push   %rax
  0x00007f757049552f: mov    %r11,%rax
  0x00007f7570495532: mov    0x50(%rbx),%r11
  0x00007f7570495536: mov    0x18(%rax),%rsi
  0x00007f757049553a: mov    0x8(%rax),%rdx
  0x00007f757049553e: mov    %rbx,0x258(%r15)
  0x00007f7570495545: mov    %rbx,%rax
  0x00007f7570495548: jmpq   *%r11
  0x00007f757049554b: mov    0x8(%rsi),%ebx
  0x00007f757049554e: shl    $0x3,%rbx
  0x00007f7570495552: cmp    0x10(%rax),%rbx
  0x00007f7570495556: mov    0x8(%rax),%rbx
  0x00007f757049555a: je     0x00007f7570495565
  0x00007f7570495560: jmpq   0x00007f757046ec40
  0x00007f7570495565: cmpq   $0x0,0x58(%rbx)
  0x00007f757049556d: je     0x00007f7570495668
  0x00007f7570495573: jmpq   0x00007f757046ec40
  0x00007f7570495578: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495580: je     0x00007f7570495668
  0x00007f7570495586: mov    %rsp,%r13
  0x00007f7570495589: mov    (%rsp),%rax
  0x00007f757049558d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495591: pushfq 
  0x00007f7570495592: sub    $0x8,%rsp
  0x00007f7570495596: mov    %rsp,-0x28(%rsp)
  0x00007f757049559b: sub    $0x80,%rsp
  0x00007f75704955a2: mov    %rax,0x78(%rsp)
  0x00007f75704955a7: mov    %rcx,0x70(%rsp)
  0x00007f75704955ac: mov    %rdx,0x68(%rsp)
  0x00007f75704955b1: mov    %rbx,0x60(%rsp)
  0x00007f75704955b6: mov    %rbp,0x50(%rsp)
  0x00007f75704955bb: mov    %rsi,0x48(%rsp)
  0x00007f75704955c0: mov    %rdi,0x40(%rsp)
  0x00007f75704955c5: mov    %r8,0x38(%rsp)
  0x00007f75704955ca: mov    %r9,0x30(%rsp)
  0x00007f75704955cf: mov    %r10,0x28(%rsp)
  0x00007f75704955d4: mov    %r11,0x20(%rsp)
  0x00007f75704955d9: mov    %r12,0x18(%rsp)
  0x00007f75704955de: mov    %r13,0x10(%rsp)
  0x00007f75704955e3: mov    %r14,0x8(%rsp)
  0x00007f75704955e8: mov    %r15,(%rsp)
  0x00007f75704955ec: sub    $0x200,%rsp
  0x00007f75704955f3: fxsave64 (%rsp)
  0x00007f75704955f8: mov    %rbx,%rdi
  0x00007f75704955fb: mov    %rax,%rsi
  0x00007f75704955fe: callq  0x00007f7585522bca
  0x00007f7570495603: fxrstor64 (%rsp)
  0x00007f7570495608: add    $0x200,%rsp
  0x00007f757049560f: mov    (%rsp),%r15
  0x00007f7570495613: mov    0x8(%rsp),%r14
  0x00007f7570495618: mov    0x10(%rsp),%r13
  0x00007f757049561d: mov    0x18(%rsp),%r12
  0x00007f7570495622: mov    0x20(%rsp),%r11
  0x00007f7570495627: mov    0x28(%rsp),%r10
  0x00007f757049562c: mov    0x30(%rsp),%r9
  0x00007f7570495631: mov    0x38(%rsp),%r8
  0x00007f7570495636: mov    0x40(%rsp),%rdi
  0x00007f757049563b: mov    0x48(%rsp),%rsi
  0x00007f7570495640: mov    0x50(%rsp),%rbp
  0x00007f7570495645: mov    0x60(%rsp),%rbx
  0x00007f757049564a: mov    0x68(%rsp),%rdx
  0x00007f757049564f: mov    0x70(%rsp),%rcx
  0x00007f7570495654: mov    0x78(%rsp),%rax
  0x00007f7570495659: add    $0x80,%rsp
  0x00007f7570495660: add    $0x8,%rsp
  0x00007f7570495664: popfq  
  0x00007f7570495665: mov    %r13,%rsp
  0x00007f7570495668: pop    %rax
  0x00007f7570495669: mov    %rsp,%r13
  0x00007f757049566c: sub    $0x20,%rsp
  0x00007f7570495670: mov    %rax,(%rsp)
  0x00007f7570495674: mov    %rsi,0x18(%rsp)
  0x00007f7570495679: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570495683: mov    %rax,0x10(%rsp)
  0x00007f7570495688: mov    %rdx,0x8(%rsp)
  0x00007f757049568d: mov    0x40(%rbx),%rcx
  0x00007f7570495691: jmpq   *%rcx

AHE@0x00007f75800d5610: 0xbba00000 i2c: 0x00007f7570495760 c2i: 0x00007f757049587b c2iUV: 0x00007f757049584e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)S (555 bytes generated)
c2i argument handler starts at 0x7f757049587b
  0x00007f7570495760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570495764: movabs $0x7f757036e3e0,%r11
  0x00007f757049576e: cmp    %r11,%rax
  0x00007f7570495771: jbe    0x00007f757049578a
  0x00007f7570495777: movabs $0x7f757046e3e0,%r11
  0x00007f7570495781: cmp    %r11,%rax
  0x00007f7570495784: jb     0x00007f7570495827
  0x00007f757049578a: movabs $0x7f7570369420,%r11
  0x00007f7570495794: cmp    %r11,%rax
  0x00007f7570495797: jbe    0x00007f75704957b0
  0x00007f757049579d: movabs $0x7f757036de58,%r11
  0x00007f75704957a7: cmp    %r11,%rax
  0x00007f75704957aa: jb     0x00007f7570495827
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704957b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704957b5: sub    $0x80,%rsp
  0x00007f75704957bc: mov    %rax,0x78(%rsp)
  0x00007f75704957c1: mov    %rcx,0x70(%rsp)
  0x00007f75704957c6: mov    %rdx,0x68(%rsp)
  0x00007f75704957cb: mov    %rbx,0x60(%rsp)
  0x00007f75704957d0: mov    %rbp,0x50(%rsp)
  0x00007f75704957d5: mov    %rsi,0x48(%rsp)
  0x00007f75704957da: mov    %rdi,0x40(%rsp)
  0x00007f75704957df: mov    %r8,0x38(%rsp)
  0x00007f75704957e4: mov    %r9,0x30(%rsp)
  0x00007f75704957e9: mov    %r10,0x28(%rsp)
  0x00007f75704957ee: mov    %r11,0x20(%rsp)
  0x00007f75704957f3: mov    %r12,0x18(%rsp)
  0x00007f75704957f8: mov    %r13,0x10(%rsp)
  0x00007f75704957fd: mov    %r14,0x8(%rsp)
  0x00007f7570495802: mov    %r15,(%rsp)
  0x00007f7570495806: movabs $0x7f758592f470,%rdi
  0x00007f7570495810: movabs $0x7f75704957b0,%rsi
  0x00007f757049581a: mov    %rsp,%rdx
  0x00007f757049581d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495821: callq  0x00007f75853729fa
  0x00007f7570495826: hlt    
  ;; } verify_i2ce 
  0x00007f7570495827: mov    %rsp,%r11
  0x00007f757049582a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049582e: push   %rax
  0x00007f757049582f: mov    %r11,%rax
  0x00007f7570495832: mov    0x50(%rbx),%r11
  0x00007f7570495836: mov    0x18(%rax),%rsi
  0x00007f757049583a: mov    0x10(%rax),%rdx
  0x00007f757049583e: mov    0x8(%rax),%ecx
  0x00007f7570495841: mov    %rbx,0x258(%r15)
  0x00007f7570495848: mov    %rbx,%rax
  0x00007f757049584b: jmpq   *%r11
  0x00007f757049584e: mov    0x8(%rsi),%ebx
  0x00007f7570495851: shl    $0x3,%rbx
  0x00007f7570495855: cmp    0x10(%rax),%rbx
  0x00007f7570495859: mov    0x8(%rax),%rbx
  0x00007f757049585d: je     0x00007f7570495868
  0x00007f7570495863: jmpq   0x00007f757046ec40
  0x00007f7570495868: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495870: je     0x00007f757049596b
  0x00007f7570495876: jmpq   0x00007f757046ec40
  0x00007f757049587b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495883: je     0x00007f757049596b
  0x00007f7570495889: mov    %rsp,%r13
  0x00007f757049588c: mov    (%rsp),%rax
  0x00007f7570495890: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495894: pushfq 
  0x00007f7570495895: sub    $0x8,%rsp
  0x00007f7570495899: mov    %rsp,-0x28(%rsp)
  0x00007f757049589e: sub    $0x80,%rsp
  0x00007f75704958a5: mov    %rax,0x78(%rsp)
  0x00007f75704958aa: mov    %rcx,0x70(%rsp)
  0x00007f75704958af: mov    %rdx,0x68(%rsp)
  0x00007f75704958b4: mov    %rbx,0x60(%rsp)
  0x00007f75704958b9: mov    %rbp,0x50(%rsp)
  0x00007f75704958be: mov    %rsi,0x48(%rsp)
  0x00007f75704958c3: mov    %rdi,0x40(%rsp)
  0x00007f75704958c8: mov    %r8,0x38(%rsp)
  0x00007f75704958cd: mov    %r9,0x30(%rsp)
  0x00007f75704958d2: mov    %r10,0x28(%rsp)
  0x00007f75704958d7: mov    %r11,0x20(%rsp)
  0x00007f75704958dc: mov    %r12,0x18(%rsp)
  0x00007f75704958e1: mov    %r13,0x10(%rsp)
  0x00007f75704958e6: mov    %r14,0x8(%rsp)
  0x00007f75704958eb: mov    %r15,(%rsp)
  0x00007f75704958ef: sub    $0x200,%rsp
  0x00007f75704958f6: fxsave64 (%rsp)
  0x00007f75704958fb: mov    %rbx,%rdi
  0x00007f75704958fe: mov    %rax,%rsi
  0x00007f7570495901: callq  0x00007f7585522bca
  0x00007f7570495906: fxrstor64 (%rsp)
  0x00007f757049590b: add    $0x200,%rsp
  0x00007f7570495912: mov    (%rsp),%r15
  0x00007f7570495916: mov    0x8(%rsp),%r14
  0x00007f757049591b: mov    0x10(%rsp),%r13
  0x00007f7570495920: mov    0x18(%rsp),%r12
  0x00007f7570495925: mov    0x20(%rsp),%r11
  0x00007f757049592a: mov    0x28(%rsp),%r10
  0x00007f757049592f: mov    0x30(%rsp),%r9
  0x00007f7570495934: mov    0x38(%rsp),%r8
  0x00007f7570495939: mov    0x40(%rsp),%rdi
  0x00007f757049593e: mov    0x48(%rsp),%rsi
  0x00007f7570495943: mov    0x50(%rsp),%rbp
  0x00007f7570495948: mov    0x60(%rsp),%rbx
  0x00007f757049594d: mov    0x68(%rsp),%rdx
  0x00007f7570495952: mov    0x70(%rsp),%rcx
  0x00007f7570495957: mov    0x78(%rsp),%rax
  0x00007f757049595c: add    $0x80,%rsp
  0x00007f7570495963: add    $0x8,%rsp
  0x00007f7570495967: popfq  
  0x00007f7570495968: mov    %r13,%rsp
  0x00007f757049596b: pop    %rax
  0x00007f757049596c: mov    %rsp,%r13
  0x00007f757049596f: sub    $0x20,%rsp
  0x00007f7570495973: mov    %rax,(%rsp)
  0x00007f7570495977: mov    %rsi,0x18(%rsp)
  0x00007f757049597c: mov    %rdx,0x10(%rsp)
  0x00007f7570495981: mov    %ecx,0x8(%rsp)
  0x00007f7570495985: mov    0x40(%rbx),%rcx
  0x00007f7570495989: jmpq   *%rcx

AHE@0x00007f75800d5658: 0xbbbea000 i2c: 0x00007f7570495a60 c2i: 0x00007f7570495b80 c2iUV: 0x00007f7570495b53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JB)V (581 bytes generated)
c2i argument handler starts at 0x7f7570495b80
  0x00007f7570495a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570495a64: movabs $0x7f757036e3e0,%r11
  0x00007f7570495a6e: cmp    %r11,%rax
  0x00007f7570495a71: jbe    0x00007f7570495a8a
  0x00007f7570495a77: movabs $0x7f757046e3e0,%r11
  0x00007f7570495a81: cmp    %r11,%rax
  0x00007f7570495a84: jb     0x00007f7570495b27
  0x00007f7570495a8a: movabs $0x7f7570369420,%r11
  0x00007f7570495a94: cmp    %r11,%rax
  0x00007f7570495a97: jbe    0x00007f7570495ab0
  0x00007f7570495a9d: movabs $0x7f757036de58,%r11
  0x00007f7570495aa7: cmp    %r11,%rax
  0x00007f7570495aaa: jb     0x00007f7570495b27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570495ab0: mov    %rsp,-0x28(%rsp)
  0x00007f7570495ab5: sub    $0x80,%rsp
  0x00007f7570495abc: mov    %rax,0x78(%rsp)
  0x00007f7570495ac1: mov    %rcx,0x70(%rsp)
  0x00007f7570495ac6: mov    %rdx,0x68(%rsp)
  0x00007f7570495acb: mov    %rbx,0x60(%rsp)
  0x00007f7570495ad0: mov    %rbp,0x50(%rsp)
  0x00007f7570495ad5: mov    %rsi,0x48(%rsp)
  0x00007f7570495ada: mov    %rdi,0x40(%rsp)
  0x00007f7570495adf: mov    %r8,0x38(%rsp)
  0x00007f7570495ae4: mov    %r9,0x30(%rsp)
  0x00007f7570495ae9: mov    %r10,0x28(%rsp)
  0x00007f7570495aee: mov    %r11,0x20(%rsp)
  0x00007f7570495af3: mov    %r12,0x18(%rsp)
  0x00007f7570495af8: mov    %r13,0x10(%rsp)
  0x00007f7570495afd: mov    %r14,0x8(%rsp)
  0x00007f7570495b02: mov    %r15,(%rsp)
  0x00007f7570495b06: movabs $0x7f758592f470,%rdi
  0x00007f7570495b10: movabs $0x7f7570495ab0,%rsi
  0x00007f7570495b1a: mov    %rsp,%rdx
  0x00007f7570495b1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495b21: callq  0x00007f75853729fa
  0x00007f7570495b26: hlt    
  ;; } verify_i2ce 
  0x00007f7570495b27: mov    %rsp,%r11
  0x00007f7570495b2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495b2e: push   %rax
  0x00007f7570495b2f: mov    %r11,%rax
  0x00007f7570495b32: mov    0x50(%rbx),%r11
  0x00007f7570495b36: mov    0x28(%rax),%rsi
  0x00007f7570495b3a: mov    0x20(%rax),%rdx
  0x00007f7570495b3e: mov    0x10(%rax),%rcx
  0x00007f7570495b42: mov    0x8(%rax),%r8d
  0x00007f7570495b46: mov    %rbx,0x258(%r15)
  0x00007f7570495b4d: mov    %rbx,%rax
  0x00007f7570495b50: jmpq   *%r11
  0x00007f7570495b53: mov    0x8(%rsi),%ebx
  0x00007f7570495b56: shl    $0x3,%rbx
  0x00007f7570495b5a: cmp    0x10(%rax),%rbx
  0x00007f7570495b5e: mov    0x8(%rax),%rbx
  0x00007f7570495b62: je     0x00007f7570495b6d
  0x00007f7570495b68: jmpq   0x00007f757046ec40
  0x00007f7570495b6d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495b75: je     0x00007f7570495c70
  0x00007f7570495b7b: jmpq   0x00007f757046ec40
  0x00007f7570495b80: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495b88: je     0x00007f7570495c70
  0x00007f7570495b8e: mov    %rsp,%r13
  0x00007f7570495b91: mov    (%rsp),%rax
  0x00007f7570495b95: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495b99: pushfq 
  0x00007f7570495b9a: sub    $0x8,%rsp
  0x00007f7570495b9e: mov    %rsp,-0x28(%rsp)
  0x00007f7570495ba3: sub    $0x80,%rsp
  0x00007f7570495baa: mov    %rax,0x78(%rsp)
  0x00007f7570495baf: mov    %rcx,0x70(%rsp)
  0x00007f7570495bb4: mov    %rdx,0x68(%rsp)
  0x00007f7570495bb9: mov    %rbx,0x60(%rsp)
  0x00007f7570495bbe: mov    %rbp,0x50(%rsp)
  0x00007f7570495bc3: mov    %rsi,0x48(%rsp)
  0x00007f7570495bc8: mov    %rdi,0x40(%rsp)
  0x00007f7570495bcd: mov    %r8,0x38(%rsp)
  0x00007f7570495bd2: mov    %r9,0x30(%rsp)
  0x00007f7570495bd7: mov    %r10,0x28(%rsp)
  0x00007f7570495bdc: mov    %r11,0x20(%rsp)
  0x00007f7570495be1: mov    %r12,0x18(%rsp)
  0x00007f7570495be6: mov    %r13,0x10(%rsp)
  0x00007f7570495beb: mov    %r14,0x8(%rsp)
  0x00007f7570495bf0: mov    %r15,(%rsp)
  0x00007f7570495bf4: sub    $0x200,%rsp
  0x00007f7570495bfb: fxsave64 (%rsp)
  0x00007f7570495c00: mov    %rbx,%rdi
  0x00007f7570495c03: mov    %rax,%rsi
  0x00007f7570495c06: callq  0x00007f7585522bca
  0x00007f7570495c0b: fxrstor64 (%rsp)
  0x00007f7570495c10: add    $0x200,%rsp
  0x00007f7570495c17: mov    (%rsp),%r15
  0x00007f7570495c1b: mov    0x8(%rsp),%r14
  0x00007f7570495c20: mov    0x10(%rsp),%r13
  0x00007f7570495c25: mov    0x18(%rsp),%r12
  0x00007f7570495c2a: mov    0x20(%rsp),%r11
  0x00007f7570495c2f: mov    0x28(%rsp),%r10
  0x00007f7570495c34: mov    0x30(%rsp),%r9
  0x00007f7570495c39: mov    0x38(%rsp),%r8
  0x00007f7570495c3e: mov    0x40(%rsp),%rdi
  0x00007f7570495c43: mov    0x48(%rsp),%rsi
  0x00007f7570495c48: mov    0x50(%rsp),%rbp
  0x00007f7570495c4d: mov    0x60(%rsp),%rbx
  0x00007f7570495c52: mov    0x68(%rsp),%rdx
  0x00007f7570495c57: mov    0x70(%rsp),%rcx
  0x00007f7570495c5c: mov    0x78(%rsp),%rax
  0x00007f7570495c61: add    $0x80,%rsp
  0x00007f7570495c68: add    $0x8,%rsp
  0x00007f7570495c6c: popfq  
  0x00007f7570495c6d: mov    %r13,%rsp
  0x00007f7570495c70: pop    %rax
  0x00007f7570495c71: mov    %rsp,%r13
  0x00007f7570495c74: sub    $0x30,%rsp
  0x00007f7570495c78: mov    %rax,(%rsp)
  0x00007f7570495c7c: mov    %rsi,0x28(%rsp)
  0x00007f7570495c81: mov    %rdx,0x20(%rsp)
  0x00007f7570495c86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570495c90: mov    %rax,0x18(%rsp)
  0x00007f7570495c95: mov    %rcx,0x10(%rsp)
  0x00007f7570495c9a: mov    %r8d,0x8(%rsp)
  0x00007f7570495c9f: mov    0x40(%rbx),%rcx
  0x00007f7570495ca3: jmpq   *%rcx

AHE@0x00007f75800d56a0: 0xbbaa0000 i2c: 0x00007f7570495d60 c2i: 0x00007f7570495e7f c2iUV: 0x00007f7570495e52
i2c argument handler #0 for: receiver (Ljava/lang/Object;IB)V (564 bytes generated)
c2i argument handler starts at 0x7f7570495e7f
  0x00007f7570495d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570495d64: movabs $0x7f757036e3e0,%r11
  0x00007f7570495d6e: cmp    %r11,%rax
  0x00007f7570495d71: jbe    0x00007f7570495d8a
  0x00007f7570495d77: movabs $0x7f757046e3e0,%r11
  0x00007f7570495d81: cmp    %r11,%rax
  0x00007f7570495d84: jb     0x00007f7570495e27
  0x00007f7570495d8a: movabs $0x7f7570369420,%r11
  0x00007f7570495d94: cmp    %r11,%rax
  0x00007f7570495d97: jbe    0x00007f7570495db0
  0x00007f7570495d9d: movabs $0x7f757036de58,%r11
  0x00007f7570495da7: cmp    %r11,%rax
  0x00007f7570495daa: jb     0x00007f7570495e27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570495db0: mov    %rsp,-0x28(%rsp)
  0x00007f7570495db5: sub    $0x80,%rsp
  0x00007f7570495dbc: mov    %rax,0x78(%rsp)
  0x00007f7570495dc1: mov    %rcx,0x70(%rsp)
  0x00007f7570495dc6: mov    %rdx,0x68(%rsp)
  0x00007f7570495dcb: mov    %rbx,0x60(%rsp)
  0x00007f7570495dd0: mov    %rbp,0x50(%rsp)
  0x00007f7570495dd5: mov    %rsi,0x48(%rsp)
  0x00007f7570495dda: mov    %rdi,0x40(%rsp)
  0x00007f7570495ddf: mov    %r8,0x38(%rsp)
  0x00007f7570495de4: mov    %r9,0x30(%rsp)
  0x00007f7570495de9: mov    %r10,0x28(%rsp)
  0x00007f7570495dee: mov    %r11,0x20(%rsp)
  0x00007f7570495df3: mov    %r12,0x18(%rsp)
  0x00007f7570495df8: mov    %r13,0x10(%rsp)
  0x00007f7570495dfd: mov    %r14,0x8(%rsp)
  0x00007f7570495e02: mov    %r15,(%rsp)
  0x00007f7570495e06: movabs $0x7f758592f470,%rdi
  0x00007f7570495e10: movabs $0x7f7570495db0,%rsi
  0x00007f7570495e1a: mov    %rsp,%rdx
  0x00007f7570495e1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495e21: callq  0x00007f75853729fa
  0x00007f7570495e26: hlt    
  ;; } verify_i2ce 
  0x00007f7570495e27: mov    %rsp,%r11
  0x00007f7570495e2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495e2e: push   %rax
  0x00007f7570495e2f: mov    %r11,%rax
  0x00007f7570495e32: mov    0x50(%rbx),%r11
  0x00007f7570495e36: mov    0x20(%rax),%rsi
  0x00007f7570495e3a: mov    0x18(%rax),%rdx
  0x00007f7570495e3e: mov    0x10(%rax),%ecx
  0x00007f7570495e41: mov    0x8(%rax),%r8d
  0x00007f7570495e45: mov    %rbx,0x258(%r15)
  0x00007f7570495e4c: mov    %rbx,%rax
  0x00007f7570495e4f: jmpq   *%r11
  0x00007f7570495e52: mov    0x8(%rsi),%ebx
  0x00007f7570495e55: shl    $0x3,%rbx
  0x00007f7570495e59: cmp    0x10(%rax),%rbx
  0x00007f7570495e5d: mov    0x8(%rax),%rbx
  0x00007f7570495e61: je     0x00007f7570495e6c
  0x00007f7570495e67: jmpq   0x00007f757046ec40
  0x00007f7570495e6c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495e74: je     0x00007f7570495f6f
  0x00007f7570495e7a: jmpq   0x00007f757046ec40
  0x00007f7570495e7f: cmpq   $0x0,0x58(%rbx)
  0x00007f7570495e87: je     0x00007f7570495f6f
  0x00007f7570495e8d: mov    %rsp,%r13
  0x00007f7570495e90: mov    (%rsp),%rax
  0x00007f7570495e94: and    $0xfffffffffffffff0,%rsp
  0x00007f7570495e98: pushfq 
  0x00007f7570495e99: sub    $0x8,%rsp
  0x00007f7570495e9d: mov    %rsp,-0x28(%rsp)
  0x00007f7570495ea2: sub    $0x80,%rsp
  0x00007f7570495ea9: mov    %rax,0x78(%rsp)
  0x00007f7570495eae: mov    %rcx,0x70(%rsp)
  0x00007f7570495eb3: mov    %rdx,0x68(%rsp)
  0x00007f7570495eb8: mov    %rbx,0x60(%rsp)
  0x00007f7570495ebd: mov    %rbp,0x50(%rsp)
  0x00007f7570495ec2: mov    %rsi,0x48(%rsp)
  0x00007f7570495ec7: mov    %rdi,0x40(%rsp)
  0x00007f7570495ecc: mov    %r8,0x38(%rsp)
  0x00007f7570495ed1: mov    %r9,0x30(%rsp)
  0x00007f7570495ed6: mov    %r10,0x28(%rsp)
  0x00007f7570495edb: mov    %r11,0x20(%rsp)
  0x00007f7570495ee0: mov    %r12,0x18(%rsp)
  0x00007f7570495ee5: mov    %r13,0x10(%rsp)
  0x00007f7570495eea: mov    %r14,0x8(%rsp)
  0x00007f7570495eef: mov    %r15,(%rsp)
  0x00007f7570495ef3: sub    $0x200,%rsp
  0x00007f7570495efa: fxsave64 (%rsp)
  0x00007f7570495eff: mov    %rbx,%rdi
  0x00007f7570495f02: mov    %rax,%rsi
  0x00007f7570495f05: callq  0x00007f7585522bca
  0x00007f7570495f0a: fxrstor64 (%rsp)
  0x00007f7570495f0f: add    $0x200,%rsp
  0x00007f7570495f16: mov    (%rsp),%r15
  0x00007f7570495f1a: mov    0x8(%rsp),%r14
  0x00007f7570495f1f: mov    0x10(%rsp),%r13
  0x00007f7570495f24: mov    0x18(%rsp),%r12
  0x00007f7570495f29: mov    0x20(%rsp),%r11
  0x00007f7570495f2e: mov    0x28(%rsp),%r10
  0x00007f7570495f33: mov    0x30(%rsp),%r9
  0x00007f7570495f38: mov    0x38(%rsp),%r8
  0x00007f7570495f3d: mov    0x40(%rsp),%rdi
  0x00007f7570495f42: mov    0x48(%rsp),%rsi
  0x00007f7570495f47: mov    0x50(%rsp),%rbp
  0x00007f7570495f4c: mov    0x60(%rsp),%rbx
  0x00007f7570495f51: mov    0x68(%rsp),%rdx
  0x00007f7570495f56: mov    0x70(%rsp),%rcx
  0x00007f7570495f5b: mov    0x78(%rsp),%rax
  0x00007f7570495f60: add    $0x80,%rsp
  0x00007f7570495f67: add    $0x8,%rsp
  0x00007f7570495f6b: popfq  
  0x00007f7570495f6c: mov    %r13,%rsp
  0x00007f7570495f6f: pop    %rax
  0x00007f7570495f70: mov    %rsp,%r13
  0x00007f7570495f73: sub    $0x30,%rsp
  0x00007f7570495f77: mov    %rax,(%rsp)
  0x00007f7570495f7b: mov    %rsi,0x20(%rsp)
  0x00007f7570495f80: mov    %rdx,0x18(%rsp)
  0x00007f7570495f85: mov    %ecx,0x10(%rsp)
  0x00007f7570495f89: mov    %r8d,0x8(%rsp)
  0x00007f7570495f8e: mov    0x40(%rbx),%rcx
  0x00007f7570495f92: jmpq   *%rcx

AHE@0x00007f75800d56e8: 0xbbea0000 i2c: 0x00007f7570496060 c2i: 0x00007f757049617b c2iUV: 0x00007f757049614e
i2c argument handler #0 for: receiver (JB)V (570 bytes generated)
c2i argument handler starts at 0x7f757049617b
  0x00007f7570496060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570496064: movabs $0x7f757036e3e0,%r11
  0x00007f757049606e: cmp    %r11,%rax
  0x00007f7570496071: jbe    0x00007f757049608a
  0x00007f7570496077: movabs $0x7f757046e3e0,%r11
  0x00007f7570496081: cmp    %r11,%rax
  0x00007f7570496084: jb     0x00007f7570496127
  0x00007f757049608a: movabs $0x7f7570369420,%r11
  0x00007f7570496094: cmp    %r11,%rax
  0x00007f7570496097: jbe    0x00007f75704960b0
  0x00007f757049609d: movabs $0x7f757036de58,%r11
  0x00007f75704960a7: cmp    %r11,%rax
  0x00007f75704960aa: jb     0x00007f7570496127
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704960b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704960b5: sub    $0x80,%rsp
  0x00007f75704960bc: mov    %rax,0x78(%rsp)
  0x00007f75704960c1: mov    %rcx,0x70(%rsp)
  0x00007f75704960c6: mov    %rdx,0x68(%rsp)
  0x00007f75704960cb: mov    %rbx,0x60(%rsp)
  0x00007f75704960d0: mov    %rbp,0x50(%rsp)
  0x00007f75704960d5: mov    %rsi,0x48(%rsp)
  0x00007f75704960da: mov    %rdi,0x40(%rsp)
  0x00007f75704960df: mov    %r8,0x38(%rsp)
  0x00007f75704960e4: mov    %r9,0x30(%rsp)
  0x00007f75704960e9: mov    %r10,0x28(%rsp)
  0x00007f75704960ee: mov    %r11,0x20(%rsp)
  0x00007f75704960f3: mov    %r12,0x18(%rsp)
  0x00007f75704960f8: mov    %r13,0x10(%rsp)
  0x00007f75704960fd: mov    %r14,0x8(%rsp)
  0x00007f7570496102: mov    %r15,(%rsp)
  0x00007f7570496106: movabs $0x7f758592f470,%rdi
  0x00007f7570496110: movabs $0x7f75704960b0,%rsi
  0x00007f757049611a: mov    %rsp,%rdx
  0x00007f757049611d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496121: callq  0x00007f75853729fa
  0x00007f7570496126: hlt    
  ;; } verify_i2ce 
  0x00007f7570496127: mov    %rsp,%r11
  0x00007f757049612a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049612e: push   %rax
  0x00007f757049612f: mov    %r11,%rax
  0x00007f7570496132: mov    0x50(%rbx),%r11
  0x00007f7570496136: mov    0x20(%rax),%rsi
  0x00007f757049613a: mov    0x10(%rax),%rdx
  0x00007f757049613e: mov    0x8(%rax),%ecx
  0x00007f7570496141: mov    %rbx,0x258(%r15)
  0x00007f7570496148: mov    %rbx,%rax
  0x00007f757049614b: jmpq   *%r11
  0x00007f757049614e: mov    0x8(%rsi),%ebx
  0x00007f7570496151: shl    $0x3,%rbx
  0x00007f7570496155: cmp    0x10(%rax),%rbx
  0x00007f7570496159: mov    0x8(%rax),%rbx
  0x00007f757049615d: je     0x00007f7570496168
  0x00007f7570496163: jmpq   0x00007f757046ec40
  0x00007f7570496168: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496170: je     0x00007f757049626b
  0x00007f7570496176: jmpq   0x00007f757046ec40
  0x00007f757049617b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496183: je     0x00007f757049626b
  0x00007f7570496189: mov    %rsp,%r13
  0x00007f757049618c: mov    (%rsp),%rax
  0x00007f7570496190: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496194: pushfq 
  0x00007f7570496195: sub    $0x8,%rsp
  0x00007f7570496199: mov    %rsp,-0x28(%rsp)
  0x00007f757049619e: sub    $0x80,%rsp
  0x00007f75704961a5: mov    %rax,0x78(%rsp)
  0x00007f75704961aa: mov    %rcx,0x70(%rsp)
  0x00007f75704961af: mov    %rdx,0x68(%rsp)
  0x00007f75704961b4: mov    %rbx,0x60(%rsp)
  0x00007f75704961b9: mov    %rbp,0x50(%rsp)
  0x00007f75704961be: mov    %rsi,0x48(%rsp)
  0x00007f75704961c3: mov    %rdi,0x40(%rsp)
  0x00007f75704961c8: mov    %r8,0x38(%rsp)
  0x00007f75704961cd: mov    %r9,0x30(%rsp)
  0x00007f75704961d2: mov    %r10,0x28(%rsp)
  0x00007f75704961d7: mov    %r11,0x20(%rsp)
  0x00007f75704961dc: mov    %r12,0x18(%rsp)
  0x00007f75704961e1: mov    %r13,0x10(%rsp)
  0x00007f75704961e6: mov    %r14,0x8(%rsp)
  0x00007f75704961eb: mov    %r15,(%rsp)
  0x00007f75704961ef: sub    $0x200,%rsp
  0x00007f75704961f6: fxsave64 (%rsp)
  0x00007f75704961fb: mov    %rbx,%rdi
  0x00007f75704961fe: mov    %rax,%rsi
  0x00007f7570496201: callq  0x00007f7585522bca
  0x00007f7570496206: fxrstor64 (%rsp)
  0x00007f757049620b: add    $0x200,%rsp
  0x00007f7570496212: mov    (%rsp),%r15
  0x00007f7570496216: mov    0x8(%rsp),%r14
  0x00007f757049621b: mov    0x10(%rsp),%r13
  0x00007f7570496220: mov    0x18(%rsp),%r12
  0x00007f7570496225: mov    0x20(%rsp),%r11
  0x00007f757049622a: mov    0x28(%rsp),%r10
  0x00007f757049622f: mov    0x30(%rsp),%r9
  0x00007f7570496234: mov    0x38(%rsp),%r8
  0x00007f7570496239: mov    0x40(%rsp),%rdi
  0x00007f757049623e: mov    0x48(%rsp),%rsi
  0x00007f7570496243: mov    0x50(%rsp),%rbp
  0x00007f7570496248: mov    0x60(%rsp),%rbx
  0x00007f757049624d: mov    0x68(%rsp),%rdx
  0x00007f7570496252: mov    0x70(%rsp),%rcx
  0x00007f7570496257: mov    0x78(%rsp),%rax
  0x00007f757049625c: add    $0x80,%rsp
  0x00007f7570496263: add    $0x8,%rsp
  0x00007f7570496267: popfq  
  0x00007f7570496268: mov    %r13,%rsp
  0x00007f757049626b: pop    %rax
  0x00007f757049626c: mov    %rsp,%r13
  0x00007f757049626f: sub    $0x30,%rsp
  0x00007f7570496273: mov    %rax,(%rsp)
  0x00007f7570496277: mov    %rsi,0x20(%rsp)
  0x00007f757049627c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570496286: mov    %rax,0x18(%rsp)
  0x00007f757049628b: mov    %rdx,0x10(%rsp)
  0x00007f7570496290: mov    %ecx,0x8(%rsp)
  0x00007f7570496294: mov    0x40(%rbx),%rcx
  0x00007f7570496298: jmpq   *%rcx

AHE@0x00007f75800d5730: 0xbba00000 i2c: 0x00007f7570496360 c2i: 0x00007f757049647b c2iUV: 0x00007f757049644e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)B (555 bytes generated)
c2i argument handler starts at 0x7f757049647b
  0x00007f7570496360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570496364: movabs $0x7f757036e3e0,%r11
  0x00007f757049636e: cmp    %r11,%rax
  0x00007f7570496371: jbe    0x00007f757049638a
  0x00007f7570496377: movabs $0x7f757046e3e0,%r11
  0x00007f7570496381: cmp    %r11,%rax
  0x00007f7570496384: jb     0x00007f7570496427
  0x00007f757049638a: movabs $0x7f7570369420,%r11
  0x00007f7570496394: cmp    %r11,%rax
  0x00007f7570496397: jbe    0x00007f75704963b0
  0x00007f757049639d: movabs $0x7f757036de58,%r11
  0x00007f75704963a7: cmp    %r11,%rax
  0x00007f75704963aa: jb     0x00007f7570496427
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704963b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704963b5: sub    $0x80,%rsp
  0x00007f75704963bc: mov    %rax,0x78(%rsp)
  0x00007f75704963c1: mov    %rcx,0x70(%rsp)
  0x00007f75704963c6: mov    %rdx,0x68(%rsp)
  0x00007f75704963cb: mov    %rbx,0x60(%rsp)
  0x00007f75704963d0: mov    %rbp,0x50(%rsp)
  0x00007f75704963d5: mov    %rsi,0x48(%rsp)
  0x00007f75704963da: mov    %rdi,0x40(%rsp)
  0x00007f75704963df: mov    %r8,0x38(%rsp)
  0x00007f75704963e4: mov    %r9,0x30(%rsp)
  0x00007f75704963e9: mov    %r10,0x28(%rsp)
  0x00007f75704963ee: mov    %r11,0x20(%rsp)
  0x00007f75704963f3: mov    %r12,0x18(%rsp)
  0x00007f75704963f8: mov    %r13,0x10(%rsp)
  0x00007f75704963fd: mov    %r14,0x8(%rsp)
  0x00007f7570496402: mov    %r15,(%rsp)
  0x00007f7570496406: movabs $0x7f758592f470,%rdi
  0x00007f7570496410: movabs $0x7f75704963b0,%rsi
  0x00007f757049641a: mov    %rsp,%rdx
  0x00007f757049641d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496421: callq  0x00007f75853729fa
  0x00007f7570496426: hlt    
  ;; } verify_i2ce 
  0x00007f7570496427: mov    %rsp,%r11
  0x00007f757049642a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049642e: push   %rax
  0x00007f757049642f: mov    %r11,%rax
  0x00007f7570496432: mov    0x50(%rbx),%r11
  0x00007f7570496436: mov    0x18(%rax),%rsi
  0x00007f757049643a: mov    0x10(%rax),%rdx
  0x00007f757049643e: mov    0x8(%rax),%ecx
  0x00007f7570496441: mov    %rbx,0x258(%r15)
  0x00007f7570496448: mov    %rbx,%rax
  0x00007f757049644b: jmpq   *%r11
  0x00007f757049644e: mov    0x8(%rsi),%ebx
  0x00007f7570496451: shl    $0x3,%rbx
  0x00007f7570496455: cmp    0x10(%rax),%rbx
  0x00007f7570496459: mov    0x8(%rax),%rbx
  0x00007f757049645d: je     0x00007f7570496468
  0x00007f7570496463: jmpq   0x00007f757046ec40
  0x00007f7570496468: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496470: je     0x00007f757049656b
  0x00007f7570496476: jmpq   0x00007f757046ec40
  0x00007f757049647b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496483: je     0x00007f757049656b
  0x00007f7570496489: mov    %rsp,%r13
  0x00007f757049648c: mov    (%rsp),%rax
  0x00007f7570496490: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496494: pushfq 
  0x00007f7570496495: sub    $0x8,%rsp
  0x00007f7570496499: mov    %rsp,-0x28(%rsp)
  0x00007f757049649e: sub    $0x80,%rsp
  0x00007f75704964a5: mov    %rax,0x78(%rsp)
  0x00007f75704964aa: mov    %rcx,0x70(%rsp)
  0x00007f75704964af: mov    %rdx,0x68(%rsp)
  0x00007f75704964b4: mov    %rbx,0x60(%rsp)
  0x00007f75704964b9: mov    %rbp,0x50(%rsp)
  0x00007f75704964be: mov    %rsi,0x48(%rsp)
  0x00007f75704964c3: mov    %rdi,0x40(%rsp)
  0x00007f75704964c8: mov    %r8,0x38(%rsp)
  0x00007f75704964cd: mov    %r9,0x30(%rsp)
  0x00007f75704964d2: mov    %r10,0x28(%rsp)
  0x00007f75704964d7: mov    %r11,0x20(%rsp)
  0x00007f75704964dc: mov    %r12,0x18(%rsp)
  0x00007f75704964e1: mov    %r13,0x10(%rsp)
  0x00007f75704964e6: mov    %r14,0x8(%rsp)
  0x00007f75704964eb: mov    %r15,(%rsp)
  0x00007f75704964ef: sub    $0x200,%rsp
  0x00007f75704964f6: fxsave64 (%rsp)
  0x00007f75704964fb: mov    %rbx,%rdi
  0x00007f75704964fe: mov    %rax,%rsi
  0x00007f7570496501: callq  0x00007f7585522bca
  0x00007f7570496506: fxrstor64 (%rsp)
  0x00007f757049650b: add    $0x200,%rsp
  0x00007f7570496512: mov    (%rsp),%r15
  0x00007f7570496516: mov    0x8(%rsp),%r14
  0x00007f757049651b: mov    0x10(%rsp),%r13
  0x00007f7570496520: mov    0x18(%rsp),%r12
  0x00007f7570496525: mov    0x20(%rsp),%r11
  0x00007f757049652a: mov    0x28(%rsp),%r10
  0x00007f757049652f: mov    0x30(%rsp),%r9
  0x00007f7570496534: mov    0x38(%rsp),%r8
  0x00007f7570496539: mov    0x40(%rsp),%rdi
  0x00007f757049653e: mov    0x48(%rsp),%rsi
  0x00007f7570496543: mov    0x50(%rsp),%rbp
  0x00007f7570496548: mov    0x60(%rsp),%rbx
  0x00007f757049654d: mov    0x68(%rsp),%rdx
  0x00007f7570496552: mov    0x70(%rsp),%rcx
  0x00007f7570496557: mov    0x78(%rsp),%rax
  0x00007f757049655c: add    $0x80,%rsp
  0x00007f7570496563: add    $0x8,%rsp
  0x00007f7570496567: popfq  
  0x00007f7570496568: mov    %r13,%rsp
  0x00007f757049656b: pop    %rax
  0x00007f757049656c: mov    %rsp,%r13
  0x00007f757049656f: sub    $0x20,%rsp
  0x00007f7570496573: mov    %rax,(%rsp)
  0x00007f7570496577: mov    %rsi,0x18(%rsp)
  0x00007f757049657c: mov    %rdx,0x10(%rsp)
  0x00007f7570496581: mov    %ecx,0x8(%rsp)
  0x00007f7570496585: mov    0x40(%rbx),%rcx
  0x00007f7570496589: jmpq   *%rcx

AHE@0x00007f75800d5778: 0xbbbe0000 i2c: 0x00007f7570496660 c2i: 0x00007f757049677c c2iUV: 0x00007f757049674f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)B (572 bytes generated)
c2i argument handler starts at 0x7f757049677c
  0x00007f7570496660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570496664: movabs $0x7f757036e3e0,%r11
  0x00007f757049666e: cmp    %r11,%rax
  0x00007f7570496671: jbe    0x00007f757049668a
  0x00007f7570496677: movabs $0x7f757046e3e0,%r11
  0x00007f7570496681: cmp    %r11,%rax
  0x00007f7570496684: jb     0x00007f7570496727
  0x00007f757049668a: movabs $0x7f7570369420,%r11
  0x00007f7570496694: cmp    %r11,%rax
  0x00007f7570496697: jbe    0x00007f75704966b0
  0x00007f757049669d: movabs $0x7f757036de58,%r11
  0x00007f75704966a7: cmp    %r11,%rax
  0x00007f75704966aa: jb     0x00007f7570496727
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704966b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704966b5: sub    $0x80,%rsp
  0x00007f75704966bc: mov    %rax,0x78(%rsp)
  0x00007f75704966c1: mov    %rcx,0x70(%rsp)
  0x00007f75704966c6: mov    %rdx,0x68(%rsp)
  0x00007f75704966cb: mov    %rbx,0x60(%rsp)
  0x00007f75704966d0: mov    %rbp,0x50(%rsp)
  0x00007f75704966d5: mov    %rsi,0x48(%rsp)
  0x00007f75704966da: mov    %rdi,0x40(%rsp)
  0x00007f75704966df: mov    %r8,0x38(%rsp)
  0x00007f75704966e4: mov    %r9,0x30(%rsp)
  0x00007f75704966e9: mov    %r10,0x28(%rsp)
  0x00007f75704966ee: mov    %r11,0x20(%rsp)
  0x00007f75704966f3: mov    %r12,0x18(%rsp)
  0x00007f75704966f8: mov    %r13,0x10(%rsp)
  0x00007f75704966fd: mov    %r14,0x8(%rsp)
  0x00007f7570496702: mov    %r15,(%rsp)
  0x00007f7570496706: movabs $0x7f758592f470,%rdi
  0x00007f7570496710: movabs $0x7f75704966b0,%rsi
  0x00007f757049671a: mov    %rsp,%rdx
  0x00007f757049671d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496721: callq  0x00007f75853729fa
  0x00007f7570496726: hlt    
  ;; } verify_i2ce 
  0x00007f7570496727: mov    %rsp,%r11
  0x00007f757049672a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049672e: push   %rax
  0x00007f757049672f: mov    %r11,%rax
  0x00007f7570496732: mov    0x50(%rbx),%r11
  0x00007f7570496736: mov    0x20(%rax),%rsi
  0x00007f757049673a: mov    0x18(%rax),%rdx
  0x00007f757049673e: mov    0x8(%rax),%rcx
  0x00007f7570496742: mov    %rbx,0x258(%r15)
  0x00007f7570496749: mov    %rbx,%rax
  0x00007f757049674c: jmpq   *%r11
  0x00007f757049674f: mov    0x8(%rsi),%ebx
  0x00007f7570496752: shl    $0x3,%rbx
  0x00007f7570496756: cmp    0x10(%rax),%rbx
  0x00007f757049675a: mov    0x8(%rax),%rbx
  0x00007f757049675e: je     0x00007f7570496769
  0x00007f7570496764: jmpq   0x00007f757046ec40
  0x00007f7570496769: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496771: je     0x00007f757049686c
  0x00007f7570496777: jmpq   0x00007f757046ec40
  0x00007f757049677c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496784: je     0x00007f757049686c
  0x00007f757049678a: mov    %rsp,%r13
  0x00007f757049678d: mov    (%rsp),%rax
  0x00007f7570496791: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496795: pushfq 
  0x00007f7570496796: sub    $0x8,%rsp
  0x00007f757049679a: mov    %rsp,-0x28(%rsp)
  0x00007f757049679f: sub    $0x80,%rsp
  0x00007f75704967a6: mov    %rax,0x78(%rsp)
  0x00007f75704967ab: mov    %rcx,0x70(%rsp)
  0x00007f75704967b0: mov    %rdx,0x68(%rsp)
  0x00007f75704967b5: mov    %rbx,0x60(%rsp)
  0x00007f75704967ba: mov    %rbp,0x50(%rsp)
  0x00007f75704967bf: mov    %rsi,0x48(%rsp)
  0x00007f75704967c4: mov    %rdi,0x40(%rsp)
  0x00007f75704967c9: mov    %r8,0x38(%rsp)
  0x00007f75704967ce: mov    %r9,0x30(%rsp)
  0x00007f75704967d3: mov    %r10,0x28(%rsp)
  0x00007f75704967d8: mov    %r11,0x20(%rsp)
  0x00007f75704967dd: mov    %r12,0x18(%rsp)
  0x00007f75704967e2: mov    %r13,0x10(%rsp)
  0x00007f75704967e7: mov    %r14,0x8(%rsp)
  0x00007f75704967ec: mov    %r15,(%rsp)
  0x00007f75704967f0: sub    $0x200,%rsp
  0x00007f75704967f7: fxsave64 (%rsp)
  0x00007f75704967fc: mov    %rbx,%rdi
  0x00007f75704967ff: mov    %rax,%rsi
  0x00007f7570496802: callq  0x00007f7585522bca
  0x00007f7570496807: fxrstor64 (%rsp)
  0x00007f757049680c: add    $0x200,%rsp
  0x00007f7570496813: mov    (%rsp),%r15
  0x00007f7570496817: mov    0x8(%rsp),%r14
  0x00007f757049681c: mov    0x10(%rsp),%r13
  0x00007f7570496821: mov    0x18(%rsp),%r12
  0x00007f7570496826: mov    0x20(%rsp),%r11
  0x00007f757049682b: mov    0x28(%rsp),%r10
  0x00007f7570496830: mov    0x30(%rsp),%r9
  0x00007f7570496835: mov    0x38(%rsp),%r8
  0x00007f757049683a: mov    0x40(%rsp),%rdi
  0x00007f757049683f: mov    0x48(%rsp),%rsi
  0x00007f7570496844: mov    0x50(%rsp),%rbp
  0x00007f7570496849: mov    0x60(%rsp),%rbx
  0x00007f757049684e: mov    0x68(%rsp),%rdx
  0x00007f7570496853: mov    0x70(%rsp),%rcx
  0x00007f7570496858: mov    0x78(%rsp),%rax
  0x00007f757049685d: add    $0x80,%rsp
  0x00007f7570496864: add    $0x8,%rsp
  0x00007f7570496868: popfq  
  0x00007f7570496869: mov    %r13,%rsp
  0x00007f757049686c: pop    %rax
  0x00007f757049686d: mov    %rsp,%r13
  0x00007f7570496870: sub    $0x30,%rsp
  0x00007f7570496874: mov    %rax,(%rsp)
  0x00007f7570496878: mov    %rsi,0x20(%rsp)
  0x00007f757049687d: mov    %rdx,0x18(%rsp)
  0x00007f7570496882: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049688c: mov    %rax,0x10(%rsp)
  0x00007f7570496891: mov    %rcx,0x8(%rsp)
  0x00007f7570496896: mov    0x40(%rbx),%rcx
  0x00007f757049689a: jmpq   *%rcx

AHE@0x00007f75800d57c0: 0xbbe00000 i2c: 0x00007f7570496960 c2i: 0x00007f7570496a78 c2iUV: 0x00007f7570496a4b
i2c argument handler #0 for: receiver (J)B (563 bytes generated)
c2i argument handler starts at 0x7f7570496a78
  0x00007f7570496960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570496964: movabs $0x7f757036e3e0,%r11
  0x00007f757049696e: cmp    %r11,%rax
  0x00007f7570496971: jbe    0x00007f757049698a
  0x00007f7570496977: movabs $0x7f757046e3e0,%r11
  0x00007f7570496981: cmp    %r11,%rax
  0x00007f7570496984: jb     0x00007f7570496a27
  0x00007f757049698a: movabs $0x7f7570369420,%r11
  0x00007f7570496994: cmp    %r11,%rax
  0x00007f7570496997: jbe    0x00007f75704969b0
  0x00007f757049699d: movabs $0x7f757036de58,%r11
  0x00007f75704969a7: cmp    %r11,%rax
  0x00007f75704969aa: jb     0x00007f7570496a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704969b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704969b5: sub    $0x80,%rsp
  0x00007f75704969bc: mov    %rax,0x78(%rsp)
  0x00007f75704969c1: mov    %rcx,0x70(%rsp)
  0x00007f75704969c6: mov    %rdx,0x68(%rsp)
  0x00007f75704969cb: mov    %rbx,0x60(%rsp)
  0x00007f75704969d0: mov    %rbp,0x50(%rsp)
  0x00007f75704969d5: mov    %rsi,0x48(%rsp)
  0x00007f75704969da: mov    %rdi,0x40(%rsp)
  0x00007f75704969df: mov    %r8,0x38(%rsp)
  0x00007f75704969e4: mov    %r9,0x30(%rsp)
  0x00007f75704969e9: mov    %r10,0x28(%rsp)
  0x00007f75704969ee: mov    %r11,0x20(%rsp)
  0x00007f75704969f3: mov    %r12,0x18(%rsp)
  0x00007f75704969f8: mov    %r13,0x10(%rsp)
  0x00007f75704969fd: mov    %r14,0x8(%rsp)
  0x00007f7570496a02: mov    %r15,(%rsp)
  0x00007f7570496a06: movabs $0x7f758592f470,%rdi
  0x00007f7570496a10: movabs $0x7f75704969b0,%rsi
  0x00007f7570496a1a: mov    %rsp,%rdx
  0x00007f7570496a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496a21: callq  0x00007f75853729fa
  0x00007f7570496a26: hlt    
  ;; } verify_i2ce 
  0x00007f7570496a27: mov    %rsp,%r11
  0x00007f7570496a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496a2e: push   %rax
  0x00007f7570496a2f: mov    %r11,%rax
  0x00007f7570496a32: mov    0x50(%rbx),%r11
  0x00007f7570496a36: mov    0x18(%rax),%rsi
  0x00007f7570496a3a: mov    0x8(%rax),%rdx
  0x00007f7570496a3e: mov    %rbx,0x258(%r15)
  0x00007f7570496a45: mov    %rbx,%rax
  0x00007f7570496a48: jmpq   *%r11
  0x00007f7570496a4b: mov    0x8(%rsi),%ebx
  0x00007f7570496a4e: shl    $0x3,%rbx
  0x00007f7570496a52: cmp    0x10(%rax),%rbx
  0x00007f7570496a56: mov    0x8(%rax),%rbx
  0x00007f7570496a5a: je     0x00007f7570496a65
  0x00007f7570496a60: jmpq   0x00007f757046ec40
  0x00007f7570496a65: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496a6d: je     0x00007f7570496b68
  0x00007f7570496a73: jmpq   0x00007f757046ec40
  0x00007f7570496a78: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496a80: je     0x00007f7570496b68
  0x00007f7570496a86: mov    %rsp,%r13
  0x00007f7570496a89: mov    (%rsp),%rax
  0x00007f7570496a8d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496a91: pushfq 
  0x00007f7570496a92: sub    $0x8,%rsp
  0x00007f7570496a96: mov    %rsp,-0x28(%rsp)
  0x00007f7570496a9b: sub    $0x80,%rsp
  0x00007f7570496aa2: mov    %rax,0x78(%rsp)
  0x00007f7570496aa7: mov    %rcx,0x70(%rsp)
  0x00007f7570496aac: mov    %rdx,0x68(%rsp)
  0x00007f7570496ab1: mov    %rbx,0x60(%rsp)
  0x00007f7570496ab6: mov    %rbp,0x50(%rsp)
  0x00007f7570496abb: mov    %rsi,0x48(%rsp)
  0x00007f7570496ac0: mov    %rdi,0x40(%rsp)
  0x00007f7570496ac5: mov    %r8,0x38(%rsp)
  0x00007f7570496aca: mov    %r9,0x30(%rsp)
  0x00007f7570496acf: mov    %r10,0x28(%rsp)
  0x00007f7570496ad4: mov    %r11,0x20(%rsp)
  0x00007f7570496ad9: mov    %r12,0x18(%rsp)
  0x00007f7570496ade: mov    %r13,0x10(%rsp)
  0x00007f7570496ae3: mov    %r14,0x8(%rsp)
  0x00007f7570496ae8: mov    %r15,(%rsp)
  0x00007f7570496aec: sub    $0x200,%rsp
  0x00007f7570496af3: fxsave64 (%rsp)
  0x00007f7570496af8: mov    %rbx,%rdi
  0x00007f7570496afb: mov    %rax,%rsi
  0x00007f7570496afe: callq  0x00007f7585522bca
  0x00007f7570496b03: fxrstor64 (%rsp)
  0x00007f7570496b08: add    $0x200,%rsp
  0x00007f7570496b0f: mov    (%rsp),%r15
  0x00007f7570496b13: mov    0x8(%rsp),%r14
  0x00007f7570496b18: mov    0x10(%rsp),%r13
  0x00007f7570496b1d: mov    0x18(%rsp),%r12
  0x00007f7570496b22: mov    0x20(%rsp),%r11
  0x00007f7570496b27: mov    0x28(%rsp),%r10
  0x00007f7570496b2c: mov    0x30(%rsp),%r9
  0x00007f7570496b31: mov    0x38(%rsp),%r8
  0x00007f7570496b36: mov    0x40(%rsp),%rdi
  0x00007f7570496b3b: mov    0x48(%rsp),%rsi
  0x00007f7570496b40: mov    0x50(%rsp),%rbp
  0x00007f7570496b45: mov    0x60(%rsp),%rbx
  0x00007f7570496b4a: mov    0x68(%rsp),%rdx
  0x00007f7570496b4f: mov    0x70(%rsp),%rcx
  0x00007f7570496b54: mov    0x78(%rsp),%rax
  0x00007f7570496b59: add    $0x80,%rsp
  0x00007f7570496b60: add    $0x8,%rsp
  0x00007f7570496b64: popfq  
  0x00007f7570496b65: mov    %r13,%rsp
  0x00007f7570496b68: pop    %rax
  0x00007f7570496b69: mov    %rsp,%r13
  0x00007f7570496b6c: sub    $0x20,%rsp
  0x00007f7570496b70: mov    %rax,(%rsp)
  0x00007f7570496b74: mov    %rsi,0x18(%rsp)
  0x00007f7570496b79: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570496b83: mov    %rax,0x10(%rsp)
  0x00007f7570496b88: mov    %rdx,0x8(%rsp)
  0x00007f7570496b8d: mov    0x40(%rbx),%rcx
  0x00007f7570496b91: jmpq   *%rcx

AHE@0x00007f75800d5808: 0xbbbea000 i2c: 0x00007f7570496c60 c2i: 0x00007f7570496d80 c2iUV: 0x00007f7570496d53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JZ)V (581 bytes generated)
c2i argument handler starts at 0x7f7570496d80
  0x00007f7570496c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570496c64: movabs $0x7f757036e3e0,%r11
  0x00007f7570496c6e: cmp    %r11,%rax
  0x00007f7570496c71: jbe    0x00007f7570496c8a
  0x00007f7570496c77: movabs $0x7f757046e3e0,%r11
  0x00007f7570496c81: cmp    %r11,%rax
  0x00007f7570496c84: jb     0x00007f7570496d27
  0x00007f7570496c8a: movabs $0x7f7570369420,%r11
  0x00007f7570496c94: cmp    %r11,%rax
  0x00007f7570496c97: jbe    0x00007f7570496cb0
  0x00007f7570496c9d: movabs $0x7f757036de58,%r11
  0x00007f7570496ca7: cmp    %r11,%rax
  0x00007f7570496caa: jb     0x00007f7570496d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570496cb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570496cb5: sub    $0x80,%rsp
  0x00007f7570496cbc: mov    %rax,0x78(%rsp)
  0x00007f7570496cc1: mov    %rcx,0x70(%rsp)
  0x00007f7570496cc6: mov    %rdx,0x68(%rsp)
  0x00007f7570496ccb: mov    %rbx,0x60(%rsp)
  0x00007f7570496cd0: mov    %rbp,0x50(%rsp)
  0x00007f7570496cd5: mov    %rsi,0x48(%rsp)
  0x00007f7570496cda: mov    %rdi,0x40(%rsp)
  0x00007f7570496cdf: mov    %r8,0x38(%rsp)
  0x00007f7570496ce4: mov    %r9,0x30(%rsp)
  0x00007f7570496ce9: mov    %r10,0x28(%rsp)
  0x00007f7570496cee: mov    %r11,0x20(%rsp)
  0x00007f7570496cf3: mov    %r12,0x18(%rsp)
  0x00007f7570496cf8: mov    %r13,0x10(%rsp)
  0x00007f7570496cfd: mov    %r14,0x8(%rsp)
  0x00007f7570496d02: mov    %r15,(%rsp)
  0x00007f7570496d06: movabs $0x7f758592f470,%rdi
  0x00007f7570496d10: movabs $0x7f7570496cb0,%rsi
  0x00007f7570496d1a: mov    %rsp,%rdx
  0x00007f7570496d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496d21: callq  0x00007f75853729fa
  0x00007f7570496d26: hlt    
  ;; } verify_i2ce 
  0x00007f7570496d27: mov    %rsp,%r11
  0x00007f7570496d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496d2e: push   %rax
  0x00007f7570496d2f: mov    %r11,%rax
  0x00007f7570496d32: mov    0x50(%rbx),%r11
  0x00007f7570496d36: mov    0x28(%rax),%rsi
  0x00007f7570496d3a: mov    0x20(%rax),%rdx
  0x00007f7570496d3e: mov    0x10(%rax),%rcx
  0x00007f7570496d42: mov    0x8(%rax),%r8d
  0x00007f7570496d46: mov    %rbx,0x258(%r15)
  0x00007f7570496d4d: mov    %rbx,%rax
  0x00007f7570496d50: jmpq   *%r11
  0x00007f7570496d53: mov    0x8(%rsi),%ebx
  0x00007f7570496d56: shl    $0x3,%rbx
  0x00007f7570496d5a: cmp    0x10(%rax),%rbx
  0x00007f7570496d5e: mov    0x8(%rax),%rbx
  0x00007f7570496d62: je     0x00007f7570496d6d
  0x00007f7570496d68: jmpq   0x00007f757046ec40
  0x00007f7570496d6d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496d75: je     0x00007f7570496e70
  0x00007f7570496d7b: jmpq   0x00007f757046ec40
  0x00007f7570496d80: cmpq   $0x0,0x58(%rbx)
  0x00007f7570496d88: je     0x00007f7570496e70
  0x00007f7570496d8e: mov    %rsp,%r13
  0x00007f7570496d91: mov    (%rsp),%rax
  0x00007f7570496d95: and    $0xfffffffffffffff0,%rsp
  0x00007f7570496d99: pushfq 
  0x00007f7570496d9a: sub    $0x8,%rsp
  0x00007f7570496d9e: mov    %rsp,-0x28(%rsp)
  0x00007f7570496da3: sub    $0x80,%rsp
  0x00007f7570496daa: mov    %rax,0x78(%rsp)
  0x00007f7570496daf: mov    %rcx,0x70(%rsp)
  0x00007f7570496db4: mov    %rdx,0x68(%rsp)
  0x00007f7570496db9: mov    %rbx,0x60(%rsp)
  0x00007f7570496dbe: mov    %rbp,0x50(%rsp)
  0x00007f7570496dc3: mov    %rsi,0x48(%rsp)
  0x00007f7570496dc8: mov    %rdi,0x40(%rsp)
  0x00007f7570496dcd: mov    %r8,0x38(%rsp)
  0x00007f7570496dd2: mov    %r9,0x30(%rsp)
  0x00007f7570496dd7: mov    %r10,0x28(%rsp)
  0x00007f7570496ddc: mov    %r11,0x20(%rsp)
  0x00007f7570496de1: mov    %r12,0x18(%rsp)
  0x00007f7570496de6: mov    %r13,0x10(%rsp)
  0x00007f7570496deb: mov    %r14,0x8(%rsp)
  0x00007f7570496df0: mov    %r15,(%rsp)
  0x00007f7570496df4: sub    $0x200,%rsp
  0x00007f7570496dfb: fxsave64 (%rsp)
  0x00007f7570496e00: mov    %rbx,%rdi
  0x00007f7570496e03: mov    %rax,%rsi
  0x00007f7570496e06: callq  0x00007f7585522bca
  0x00007f7570496e0b: fxrstor64 (%rsp)
  0x00007f7570496e10: add    $0x200,%rsp
  0x00007f7570496e17: mov    (%rsp),%r15
  0x00007f7570496e1b: mov    0x8(%rsp),%r14
  0x00007f7570496e20: mov    0x10(%rsp),%r13
  0x00007f7570496e25: mov    0x18(%rsp),%r12
  0x00007f7570496e2a: mov    0x20(%rsp),%r11
  0x00007f7570496e2f: mov    0x28(%rsp),%r10
  0x00007f7570496e34: mov    0x30(%rsp),%r9
  0x00007f7570496e39: mov    0x38(%rsp),%r8
  0x00007f7570496e3e: mov    0x40(%rsp),%rdi
  0x00007f7570496e43: mov    0x48(%rsp),%rsi
  0x00007f7570496e48: mov    0x50(%rsp),%rbp
  0x00007f7570496e4d: mov    0x60(%rsp),%rbx
  0x00007f7570496e52: mov    0x68(%rsp),%rdx
  0x00007f7570496e57: mov    0x70(%rsp),%rcx
  0x00007f7570496e5c: mov    0x78(%rsp),%rax
  0x00007f7570496e61: add    $0x80,%rsp
  0x00007f7570496e68: add    $0x8,%rsp
  0x00007f7570496e6c: popfq  
  0x00007f7570496e6d: mov    %r13,%rsp
  0x00007f7570496e70: pop    %rax
  0x00007f7570496e71: mov    %rsp,%r13
  0x00007f7570496e74: sub    $0x30,%rsp
  0x00007f7570496e78: mov    %rax,(%rsp)
  0x00007f7570496e7c: mov    %rsi,0x28(%rsp)
  0x00007f7570496e81: mov    %rdx,0x20(%rsp)
  0x00007f7570496e86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570496e90: mov    %rax,0x18(%rsp)
  0x00007f7570496e95: mov    %rcx,0x10(%rsp)
  0x00007f7570496e9a: mov    %r8d,0x8(%rsp)
  0x00007f7570496e9f: mov    0x40(%rbx),%rcx
  0x00007f7570496ea3: jmpq   *%rcx

AHE@0x00007f75800d5850: 0xbbaa0000 i2c: 0x00007f7570496f60 c2i: 0x00007f757049707f c2iUV: 0x00007f7570497052
i2c argument handler #0 for: receiver (Ljava/lang/Object;IZ)V (564 bytes generated)
c2i argument handler starts at 0x7f757049707f
  0x00007f7570496f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570496f64: movabs $0x7f757036e3e0,%r11
  0x00007f7570496f6e: cmp    %r11,%rax
  0x00007f7570496f71: jbe    0x00007f7570496f8a
  0x00007f7570496f77: movabs $0x7f757046e3e0,%r11
  0x00007f7570496f81: cmp    %r11,%rax
  0x00007f7570496f84: jb     0x00007f7570497027
  0x00007f7570496f8a: movabs $0x7f7570369420,%r11
  0x00007f7570496f94: cmp    %r11,%rax
  0x00007f7570496f97: jbe    0x00007f7570496fb0
  0x00007f7570496f9d: movabs $0x7f757036de58,%r11
  0x00007f7570496fa7: cmp    %r11,%rax
  0x00007f7570496faa: jb     0x00007f7570497027
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570496fb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570496fb5: sub    $0x80,%rsp
  0x00007f7570496fbc: mov    %rax,0x78(%rsp)
  0x00007f7570496fc1: mov    %rcx,0x70(%rsp)
  0x00007f7570496fc6: mov    %rdx,0x68(%rsp)
  0x00007f7570496fcb: mov    %rbx,0x60(%rsp)
  0x00007f7570496fd0: mov    %rbp,0x50(%rsp)
  0x00007f7570496fd5: mov    %rsi,0x48(%rsp)
  0x00007f7570496fda: mov    %rdi,0x40(%rsp)
  0x00007f7570496fdf: mov    %r8,0x38(%rsp)
  0x00007f7570496fe4: mov    %r9,0x30(%rsp)
  0x00007f7570496fe9: mov    %r10,0x28(%rsp)
  0x00007f7570496fee: mov    %r11,0x20(%rsp)
  0x00007f7570496ff3: mov    %r12,0x18(%rsp)
  0x00007f7570496ff8: mov    %r13,0x10(%rsp)
  0x00007f7570496ffd: mov    %r14,0x8(%rsp)
  0x00007f7570497002: mov    %r15,(%rsp)
  0x00007f7570497006: movabs $0x7f758592f470,%rdi
  0x00007f7570497010: movabs $0x7f7570496fb0,%rsi
  0x00007f757049701a: mov    %rsp,%rdx
  0x00007f757049701d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497021: callq  0x00007f75853729fa
  0x00007f7570497026: hlt    
  ;; } verify_i2ce 
  0x00007f7570497027: mov    %rsp,%r11
  0x00007f757049702a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049702e: push   %rax
  0x00007f757049702f: mov    %r11,%rax
  0x00007f7570497032: mov    0x50(%rbx),%r11
  0x00007f7570497036: mov    0x20(%rax),%rsi
  0x00007f757049703a: mov    0x18(%rax),%rdx
  0x00007f757049703e: mov    0x10(%rax),%ecx
  0x00007f7570497041: mov    0x8(%rax),%r8d
  0x00007f7570497045: mov    %rbx,0x258(%r15)
  0x00007f757049704c: mov    %rbx,%rax
  0x00007f757049704f: jmpq   *%r11
  0x00007f7570497052: mov    0x8(%rsi),%ebx
  0x00007f7570497055: shl    $0x3,%rbx
  0x00007f7570497059: cmp    0x10(%rax),%rbx
  0x00007f757049705d: mov    0x8(%rax),%rbx
  0x00007f7570497061: je     0x00007f757049706c
  0x00007f7570497067: jmpq   0x00007f757046ec40
  0x00007f757049706c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497074: je     0x00007f757049716f
  0x00007f757049707a: jmpq   0x00007f757046ec40
  0x00007f757049707f: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497087: je     0x00007f757049716f
  0x00007f757049708d: mov    %rsp,%r13
  0x00007f7570497090: mov    (%rsp),%rax
  0x00007f7570497094: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497098: pushfq 
  0x00007f7570497099: sub    $0x8,%rsp
  0x00007f757049709d: mov    %rsp,-0x28(%rsp)
  0x00007f75704970a2: sub    $0x80,%rsp
  0x00007f75704970a9: mov    %rax,0x78(%rsp)
  0x00007f75704970ae: mov    %rcx,0x70(%rsp)
  0x00007f75704970b3: mov    %rdx,0x68(%rsp)
  0x00007f75704970b8: mov    %rbx,0x60(%rsp)
  0x00007f75704970bd: mov    %rbp,0x50(%rsp)
  0x00007f75704970c2: mov    %rsi,0x48(%rsp)
  0x00007f75704970c7: mov    %rdi,0x40(%rsp)
  0x00007f75704970cc: mov    %r8,0x38(%rsp)
  0x00007f75704970d1: mov    %r9,0x30(%rsp)
  0x00007f75704970d6: mov    %r10,0x28(%rsp)
  0x00007f75704970db: mov    %r11,0x20(%rsp)
  0x00007f75704970e0: mov    %r12,0x18(%rsp)
  0x00007f75704970e5: mov    %r13,0x10(%rsp)
  0x00007f75704970ea: mov    %r14,0x8(%rsp)
  0x00007f75704970ef: mov    %r15,(%rsp)
  0x00007f75704970f3: sub    $0x200,%rsp
  0x00007f75704970fa: fxsave64 (%rsp)
  0x00007f75704970ff: mov    %rbx,%rdi
  0x00007f7570497102: mov    %rax,%rsi
  0x00007f7570497105: callq  0x00007f7585522bca
  0x00007f757049710a: fxrstor64 (%rsp)
  0x00007f757049710f: add    $0x200,%rsp
  0x00007f7570497116: mov    (%rsp),%r15
  0x00007f757049711a: mov    0x8(%rsp),%r14
  0x00007f757049711f: mov    0x10(%rsp),%r13
  0x00007f7570497124: mov    0x18(%rsp),%r12
  0x00007f7570497129: mov    0x20(%rsp),%r11
  0x00007f757049712e: mov    0x28(%rsp),%r10
  0x00007f7570497133: mov    0x30(%rsp),%r9
  0x00007f7570497138: mov    0x38(%rsp),%r8
  0x00007f757049713d: mov    0x40(%rsp),%rdi
  0x00007f7570497142: mov    0x48(%rsp),%rsi
  0x00007f7570497147: mov    0x50(%rsp),%rbp
  0x00007f757049714c: mov    0x60(%rsp),%rbx
  0x00007f7570497151: mov    0x68(%rsp),%rdx
  0x00007f7570497156: mov    0x70(%rsp),%rcx
  0x00007f757049715b: mov    0x78(%rsp),%rax
  0x00007f7570497160: add    $0x80,%rsp
  0x00007f7570497167: add    $0x8,%rsp
  0x00007f757049716b: popfq  
  0x00007f757049716c: mov    %r13,%rsp
  0x00007f757049716f: pop    %rax
  0x00007f7570497170: mov    %rsp,%r13
  0x00007f7570497173: sub    $0x30,%rsp
  0x00007f7570497177: mov    %rax,(%rsp)
  0x00007f757049717b: mov    %rsi,0x20(%rsp)
  0x00007f7570497180: mov    %rdx,0x18(%rsp)
  0x00007f7570497185: mov    %ecx,0x10(%rsp)
  0x00007f7570497189: mov    %r8d,0x8(%rsp)
  0x00007f757049718e: mov    0x40(%rbx),%rcx
  0x00007f7570497192: jmpq   *%rcx

AHE@0x00007f75800d5898: 0xbbbe0000 i2c: 0x00007f7570497260 c2i: 0x00007f757049737c c2iUV: 0x00007f757049734f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Z (572 bytes generated)
c2i argument handler starts at 0x7f757049737c
  0x00007f7570497260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570497264: movabs $0x7f757036e3e0,%r11
  0x00007f757049726e: cmp    %r11,%rax
  0x00007f7570497271: jbe    0x00007f757049728a
  0x00007f7570497277: movabs $0x7f757046e3e0,%r11
  0x00007f7570497281: cmp    %r11,%rax
  0x00007f7570497284: jb     0x00007f7570497327
  0x00007f757049728a: movabs $0x7f7570369420,%r11
  0x00007f7570497294: cmp    %r11,%rax
  0x00007f7570497297: jbe    0x00007f75704972b0
  0x00007f757049729d: movabs $0x7f757036de58,%r11
  0x00007f75704972a7: cmp    %r11,%rax
  0x00007f75704972aa: jb     0x00007f7570497327
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704972b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704972b5: sub    $0x80,%rsp
  0x00007f75704972bc: mov    %rax,0x78(%rsp)
  0x00007f75704972c1: mov    %rcx,0x70(%rsp)
  0x00007f75704972c6: mov    %rdx,0x68(%rsp)
  0x00007f75704972cb: mov    %rbx,0x60(%rsp)
  0x00007f75704972d0: mov    %rbp,0x50(%rsp)
  0x00007f75704972d5: mov    %rsi,0x48(%rsp)
  0x00007f75704972da: mov    %rdi,0x40(%rsp)
  0x00007f75704972df: mov    %r8,0x38(%rsp)
  0x00007f75704972e4: mov    %r9,0x30(%rsp)
  0x00007f75704972e9: mov    %r10,0x28(%rsp)
  0x00007f75704972ee: mov    %r11,0x20(%rsp)
  0x00007f75704972f3: mov    %r12,0x18(%rsp)
  0x00007f75704972f8: mov    %r13,0x10(%rsp)
  0x00007f75704972fd: mov    %r14,0x8(%rsp)
  0x00007f7570497302: mov    %r15,(%rsp)
  0x00007f7570497306: movabs $0x7f758592f470,%rdi
  0x00007f7570497310: movabs $0x7f75704972b0,%rsi
  0x00007f757049731a: mov    %rsp,%rdx
  0x00007f757049731d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497321: callq  0x00007f75853729fa
  0x00007f7570497326: hlt    
  ;; } verify_i2ce 
  0x00007f7570497327: mov    %rsp,%r11
  0x00007f757049732a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049732e: push   %rax
  0x00007f757049732f: mov    %r11,%rax
  0x00007f7570497332: mov    0x50(%rbx),%r11
  0x00007f7570497336: mov    0x20(%rax),%rsi
  0x00007f757049733a: mov    0x18(%rax),%rdx
  0x00007f757049733e: mov    0x8(%rax),%rcx
  0x00007f7570497342: mov    %rbx,0x258(%r15)
  0x00007f7570497349: mov    %rbx,%rax
  0x00007f757049734c: jmpq   *%r11
  0x00007f757049734f: mov    0x8(%rsi),%ebx
  0x00007f7570497352: shl    $0x3,%rbx
  0x00007f7570497356: cmp    0x10(%rax),%rbx
  0x00007f757049735a: mov    0x8(%rax),%rbx
  0x00007f757049735e: je     0x00007f7570497369
  0x00007f7570497364: jmpq   0x00007f757046ec40
  0x00007f7570497369: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497371: je     0x00007f757049746c
  0x00007f7570497377: jmpq   0x00007f757046ec40
  0x00007f757049737c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497384: je     0x00007f757049746c
  0x00007f757049738a: mov    %rsp,%r13
  0x00007f757049738d: mov    (%rsp),%rax
  0x00007f7570497391: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497395: pushfq 
  0x00007f7570497396: sub    $0x8,%rsp
  0x00007f757049739a: mov    %rsp,-0x28(%rsp)
  0x00007f757049739f: sub    $0x80,%rsp
  0x00007f75704973a6: mov    %rax,0x78(%rsp)
  0x00007f75704973ab: mov    %rcx,0x70(%rsp)
  0x00007f75704973b0: mov    %rdx,0x68(%rsp)
  0x00007f75704973b5: mov    %rbx,0x60(%rsp)
  0x00007f75704973ba: mov    %rbp,0x50(%rsp)
  0x00007f75704973bf: mov    %rsi,0x48(%rsp)
  0x00007f75704973c4: mov    %rdi,0x40(%rsp)
  0x00007f75704973c9: mov    %r8,0x38(%rsp)
  0x00007f75704973ce: mov    %r9,0x30(%rsp)
  0x00007f75704973d3: mov    %r10,0x28(%rsp)
  0x00007f75704973d8: mov    %r11,0x20(%rsp)
  0x00007f75704973dd: mov    %r12,0x18(%rsp)
  0x00007f75704973e2: mov    %r13,0x10(%rsp)
  0x00007f75704973e7: mov    %r14,0x8(%rsp)
  0x00007f75704973ec: mov    %r15,(%rsp)
  0x00007f75704973f0: sub    $0x200,%rsp
  0x00007f75704973f7: fxsave64 (%rsp)
  0x00007f75704973fc: mov    %rbx,%rdi
  0x00007f75704973ff: mov    %rax,%rsi
  0x00007f7570497402: callq  0x00007f7585522bca
  0x00007f7570497407: fxrstor64 (%rsp)
  0x00007f757049740c: add    $0x200,%rsp
  0x00007f7570497413: mov    (%rsp),%r15
  0x00007f7570497417: mov    0x8(%rsp),%r14
  0x00007f757049741c: mov    0x10(%rsp),%r13
  0x00007f7570497421: mov    0x18(%rsp),%r12
  0x00007f7570497426: mov    0x20(%rsp),%r11
  0x00007f757049742b: mov    0x28(%rsp),%r10
  0x00007f7570497430: mov    0x30(%rsp),%r9
  0x00007f7570497435: mov    0x38(%rsp),%r8
  0x00007f757049743a: mov    0x40(%rsp),%rdi
  0x00007f757049743f: mov    0x48(%rsp),%rsi
  0x00007f7570497444: mov    0x50(%rsp),%rbp
  0x00007f7570497449: mov    0x60(%rsp),%rbx
  0x00007f757049744e: mov    0x68(%rsp),%rdx
  0x00007f7570497453: mov    0x70(%rsp),%rcx
  0x00007f7570497458: mov    0x78(%rsp),%rax
  0x00007f757049745d: add    $0x80,%rsp
  0x00007f7570497464: add    $0x8,%rsp
  0x00007f7570497468: popfq  
  0x00007f7570497469: mov    %r13,%rsp
  0x00007f757049746c: pop    %rax
  0x00007f757049746d: mov    %rsp,%r13
  0x00007f7570497470: sub    $0x30,%rsp
  0x00007f7570497474: mov    %rax,(%rsp)
  0x00007f7570497478: mov    %rsi,0x20(%rsp)
  0x00007f757049747d: mov    %rdx,0x18(%rsp)
  0x00007f7570497482: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049748c: mov    %rax,0x10(%rsp)
  0x00007f7570497491: mov    %rcx,0x8(%rsp)
  0x00007f7570497496: mov    0x40(%rbx),%rcx
  0x00007f757049749a: jmpq   *%rcx

AHE@0x00007f75800d58e0: 0xbba00000 i2c: 0x00007f7570497560 c2i: 0x00007f757049767b c2iUV: 0x00007f757049764e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)Z (555 bytes generated)
c2i argument handler starts at 0x7f757049767b
  0x00007f7570497560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570497564: movabs $0x7f757036e3e0,%r11
  0x00007f757049756e: cmp    %r11,%rax
  0x00007f7570497571: jbe    0x00007f757049758a
  0x00007f7570497577: movabs $0x7f757046e3e0,%r11
  0x00007f7570497581: cmp    %r11,%rax
  0x00007f7570497584: jb     0x00007f7570497627
  0x00007f757049758a: movabs $0x7f7570369420,%r11
  0x00007f7570497594: cmp    %r11,%rax
  0x00007f7570497597: jbe    0x00007f75704975b0
  0x00007f757049759d: movabs $0x7f757036de58,%r11
  0x00007f75704975a7: cmp    %r11,%rax
  0x00007f75704975aa: jb     0x00007f7570497627
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704975b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704975b5: sub    $0x80,%rsp
  0x00007f75704975bc: mov    %rax,0x78(%rsp)
  0x00007f75704975c1: mov    %rcx,0x70(%rsp)
  0x00007f75704975c6: mov    %rdx,0x68(%rsp)
  0x00007f75704975cb: mov    %rbx,0x60(%rsp)
  0x00007f75704975d0: mov    %rbp,0x50(%rsp)
  0x00007f75704975d5: mov    %rsi,0x48(%rsp)
  0x00007f75704975da: mov    %rdi,0x40(%rsp)
  0x00007f75704975df: mov    %r8,0x38(%rsp)
  0x00007f75704975e4: mov    %r9,0x30(%rsp)
  0x00007f75704975e9: mov    %r10,0x28(%rsp)
  0x00007f75704975ee: mov    %r11,0x20(%rsp)
  0x00007f75704975f3: mov    %r12,0x18(%rsp)
  0x00007f75704975f8: mov    %r13,0x10(%rsp)
  0x00007f75704975fd: mov    %r14,0x8(%rsp)
  0x00007f7570497602: mov    %r15,(%rsp)
  0x00007f7570497606: movabs $0x7f758592f470,%rdi
  0x00007f7570497610: movabs $0x7f75704975b0,%rsi
  0x00007f757049761a: mov    %rsp,%rdx
  0x00007f757049761d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497621: callq  0x00007f75853729fa
  0x00007f7570497626: hlt    
  ;; } verify_i2ce 
  0x00007f7570497627: mov    %rsp,%r11
  0x00007f757049762a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049762e: push   %rax
  0x00007f757049762f: mov    %r11,%rax
  0x00007f7570497632: mov    0x50(%rbx),%r11
  0x00007f7570497636: mov    0x18(%rax),%rsi
  0x00007f757049763a: mov    0x10(%rax),%rdx
  0x00007f757049763e: mov    0x8(%rax),%ecx
  0x00007f7570497641: mov    %rbx,0x258(%r15)
  0x00007f7570497648: mov    %rbx,%rax
  0x00007f757049764b: jmpq   *%r11
  0x00007f757049764e: mov    0x8(%rsi),%ebx
  0x00007f7570497651: shl    $0x3,%rbx
  0x00007f7570497655: cmp    0x10(%rax),%rbx
  0x00007f7570497659: mov    0x8(%rax),%rbx
  0x00007f757049765d: je     0x00007f7570497668
  0x00007f7570497663: jmpq   0x00007f757046ec40
  0x00007f7570497668: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497670: je     0x00007f757049776b
  0x00007f7570497676: jmpq   0x00007f757046ec40
  0x00007f757049767b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497683: je     0x00007f757049776b
  0x00007f7570497689: mov    %rsp,%r13
  0x00007f757049768c: mov    (%rsp),%rax
  0x00007f7570497690: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497694: pushfq 
  0x00007f7570497695: sub    $0x8,%rsp
  0x00007f7570497699: mov    %rsp,-0x28(%rsp)
  0x00007f757049769e: sub    $0x80,%rsp
  0x00007f75704976a5: mov    %rax,0x78(%rsp)
  0x00007f75704976aa: mov    %rcx,0x70(%rsp)
  0x00007f75704976af: mov    %rdx,0x68(%rsp)
  0x00007f75704976b4: mov    %rbx,0x60(%rsp)
  0x00007f75704976b9: mov    %rbp,0x50(%rsp)
  0x00007f75704976be: mov    %rsi,0x48(%rsp)
  0x00007f75704976c3: mov    %rdi,0x40(%rsp)
  0x00007f75704976c8: mov    %r8,0x38(%rsp)
  0x00007f75704976cd: mov    %r9,0x30(%rsp)
  0x00007f75704976d2: mov    %r10,0x28(%rsp)
  0x00007f75704976d7: mov    %r11,0x20(%rsp)
  0x00007f75704976dc: mov    %r12,0x18(%rsp)
  0x00007f75704976e1: mov    %r13,0x10(%rsp)
  0x00007f75704976e6: mov    %r14,0x8(%rsp)
  0x00007f75704976eb: mov    %r15,(%rsp)
  0x00007f75704976ef: sub    $0x200,%rsp
  0x00007f75704976f6: fxsave64 (%rsp)
  0x00007f75704976fb: mov    %rbx,%rdi
  0x00007f75704976fe: mov    %rax,%rsi
  0x00007f7570497701: callq  0x00007f7585522bca
  0x00007f7570497706: fxrstor64 (%rsp)
  0x00007f757049770b: add    $0x200,%rsp
  0x00007f7570497712: mov    (%rsp),%r15
  0x00007f7570497716: mov    0x8(%rsp),%r14
  0x00007f757049771b: mov    0x10(%rsp),%r13
  0x00007f7570497720: mov    0x18(%rsp),%r12
  0x00007f7570497725: mov    0x20(%rsp),%r11
  0x00007f757049772a: mov    0x28(%rsp),%r10
  0x00007f757049772f: mov    0x30(%rsp),%r9
  0x00007f7570497734: mov    0x38(%rsp),%r8
  0x00007f7570497739: mov    0x40(%rsp),%rdi
  0x00007f757049773e: mov    0x48(%rsp),%rsi
  0x00007f7570497743: mov    0x50(%rsp),%rbp
  0x00007f7570497748: mov    0x60(%rsp),%rbx
  0x00007f757049774d: mov    0x68(%rsp),%rdx
  0x00007f7570497752: mov    0x70(%rsp),%rcx
  0x00007f7570497757: mov    0x78(%rsp),%rax
  0x00007f757049775c: add    $0x80,%rsp
  0x00007f7570497763: add    $0x8,%rsp
  0x00007f7570497767: popfq  
  0x00007f7570497768: mov    %r13,%rsp
  0x00007f757049776b: pop    %rax
  0x00007f757049776c: mov    %rsp,%r13
  0x00007f757049776f: sub    $0x20,%rsp
  0x00007f7570497773: mov    %rax,(%rsp)
  0x00007f7570497777: mov    %rsi,0x18(%rsp)
  0x00007f757049777c: mov    %rdx,0x10(%rsp)
  0x00007f7570497781: mov    %ecx,0x8(%rsp)
  0x00007f7570497785: mov    0x40(%rbx),%rcx
  0x00007f7570497789: jmpq   *%rcx

AHE@0x00007f75800d5928: 0xbbab0000 i2c: 0x00007f7570497860 c2i: 0x00007f757049797f c2iUV: 0x00007f7570497952
i2c argument handler #0 for: receiver (Ljava/lang/Object;ILjava/lang/Object;)V (564 bytes generated)
c2i argument handler starts at 0x7f757049797f
  0x00007f7570497860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570497864: movabs $0x7f757036e3e0,%r11
  0x00007f757049786e: cmp    %r11,%rax
  0x00007f7570497871: jbe    0x00007f757049788a
  0x00007f7570497877: movabs $0x7f757046e3e0,%r11
  0x00007f7570497881: cmp    %r11,%rax
  0x00007f7570497884: jb     0x00007f7570497927
  0x00007f757049788a: movabs $0x7f7570369420,%r11
  0x00007f7570497894: cmp    %r11,%rax
  0x00007f7570497897: jbe    0x00007f75704978b0
  0x00007f757049789d: movabs $0x7f757036de58,%r11
  0x00007f75704978a7: cmp    %r11,%rax
  0x00007f75704978aa: jb     0x00007f7570497927
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704978b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704978b5: sub    $0x80,%rsp
  0x00007f75704978bc: mov    %rax,0x78(%rsp)
  0x00007f75704978c1: mov    %rcx,0x70(%rsp)
  0x00007f75704978c6: mov    %rdx,0x68(%rsp)
  0x00007f75704978cb: mov    %rbx,0x60(%rsp)
  0x00007f75704978d0: mov    %rbp,0x50(%rsp)
  0x00007f75704978d5: mov    %rsi,0x48(%rsp)
  0x00007f75704978da: mov    %rdi,0x40(%rsp)
  0x00007f75704978df: mov    %r8,0x38(%rsp)
  0x00007f75704978e4: mov    %r9,0x30(%rsp)
  0x00007f75704978e9: mov    %r10,0x28(%rsp)
  0x00007f75704978ee: mov    %r11,0x20(%rsp)
  0x00007f75704978f3: mov    %r12,0x18(%rsp)
  0x00007f75704978f8: mov    %r13,0x10(%rsp)
  0x00007f75704978fd: mov    %r14,0x8(%rsp)
  0x00007f7570497902: mov    %r15,(%rsp)
  0x00007f7570497906: movabs $0x7f758592f470,%rdi
  0x00007f7570497910: movabs $0x7f75704978b0,%rsi
  0x00007f757049791a: mov    %rsp,%rdx
  0x00007f757049791d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497921: callq  0x00007f75853729fa
  0x00007f7570497926: hlt    
  ;; } verify_i2ce 
  0x00007f7570497927: mov    %rsp,%r11
  0x00007f757049792a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049792e: push   %rax
  0x00007f757049792f: mov    %r11,%rax
  0x00007f7570497932: mov    0x50(%rbx),%r11
  0x00007f7570497936: mov    0x20(%rax),%rsi
  0x00007f757049793a: mov    0x18(%rax),%rdx
  0x00007f757049793e: mov    0x10(%rax),%ecx
  0x00007f7570497941: mov    0x8(%rax),%r8
  0x00007f7570497945: mov    %rbx,0x258(%r15)
  0x00007f757049794c: mov    %rbx,%rax
  0x00007f757049794f: jmpq   *%r11
  0x00007f7570497952: mov    0x8(%rsi),%ebx
  0x00007f7570497955: shl    $0x3,%rbx
  0x00007f7570497959: cmp    0x10(%rax),%rbx
  0x00007f757049795d: mov    0x8(%rax),%rbx
  0x00007f7570497961: je     0x00007f757049796c
  0x00007f7570497967: jmpq   0x00007f757046ec40
  0x00007f757049796c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497974: je     0x00007f7570497a6f
  0x00007f757049797a: jmpq   0x00007f757046ec40
  0x00007f757049797f: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497987: je     0x00007f7570497a6f
  0x00007f757049798d: mov    %rsp,%r13
  0x00007f7570497990: mov    (%rsp),%rax
  0x00007f7570497994: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497998: pushfq 
  0x00007f7570497999: sub    $0x8,%rsp
  0x00007f757049799d: mov    %rsp,-0x28(%rsp)
  0x00007f75704979a2: sub    $0x80,%rsp
  0x00007f75704979a9: mov    %rax,0x78(%rsp)
  0x00007f75704979ae: mov    %rcx,0x70(%rsp)
  0x00007f75704979b3: mov    %rdx,0x68(%rsp)
  0x00007f75704979b8: mov    %rbx,0x60(%rsp)
  0x00007f75704979bd: mov    %rbp,0x50(%rsp)
  0x00007f75704979c2: mov    %rsi,0x48(%rsp)
  0x00007f75704979c7: mov    %rdi,0x40(%rsp)
  0x00007f75704979cc: mov    %r8,0x38(%rsp)
  0x00007f75704979d1: mov    %r9,0x30(%rsp)
  0x00007f75704979d6: mov    %r10,0x28(%rsp)
  0x00007f75704979db: mov    %r11,0x20(%rsp)
  0x00007f75704979e0: mov    %r12,0x18(%rsp)
  0x00007f75704979e5: mov    %r13,0x10(%rsp)
  0x00007f75704979ea: mov    %r14,0x8(%rsp)
  0x00007f75704979ef: mov    %r15,(%rsp)
  0x00007f75704979f3: sub    $0x200,%rsp
  0x00007f75704979fa: fxsave64 (%rsp)
  0x00007f75704979ff: mov    %rbx,%rdi
  0x00007f7570497a02: mov    %rax,%rsi
  0x00007f7570497a05: callq  0x00007f7585522bca
  0x00007f7570497a0a: fxrstor64 (%rsp)
  0x00007f7570497a0f: add    $0x200,%rsp
  0x00007f7570497a16: mov    (%rsp),%r15
  0x00007f7570497a1a: mov    0x8(%rsp),%r14
  0x00007f7570497a1f: mov    0x10(%rsp),%r13
  0x00007f7570497a24: mov    0x18(%rsp),%r12
  0x00007f7570497a29: mov    0x20(%rsp),%r11
  0x00007f7570497a2e: mov    0x28(%rsp),%r10
  0x00007f7570497a33: mov    0x30(%rsp),%r9
  0x00007f7570497a38: mov    0x38(%rsp),%r8
  0x00007f7570497a3d: mov    0x40(%rsp),%rdi
  0x00007f7570497a42: mov    0x48(%rsp),%rsi
  0x00007f7570497a47: mov    0x50(%rsp),%rbp
  0x00007f7570497a4c: mov    0x60(%rsp),%rbx
  0x00007f7570497a51: mov    0x68(%rsp),%rdx
  0x00007f7570497a56: mov    0x70(%rsp),%rcx
  0x00007f7570497a5b: mov    0x78(%rsp),%rax
  0x00007f7570497a60: add    $0x80,%rsp
  0x00007f7570497a67: add    $0x8,%rsp
  0x00007f7570497a6b: popfq  
  0x00007f7570497a6c: mov    %r13,%rsp
  0x00007f7570497a6f: pop    %rax
  0x00007f7570497a70: mov    %rsp,%r13
  0x00007f7570497a73: sub    $0x30,%rsp
  0x00007f7570497a77: mov    %rax,(%rsp)
  0x00007f7570497a7b: mov    %rsi,0x20(%rsp)
  0x00007f7570497a80: mov    %rdx,0x18(%rsp)
  0x00007f7570497a85: mov    %ecx,0x10(%rsp)
  0x00007f7570497a89: mov    %r8,0x8(%rsp)
  0x00007f7570497a8e: mov    0x40(%rbx),%rcx
  0x00007f7570497a92: jmpq   *%rcx

AHE@0x00007f75800d5970: 0xbbbeb000 i2c: 0x00007f7570497b60 c2i: 0x00007f7570497c80 c2iUV: 0x00007f7570497c53
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (581 bytes generated)
c2i argument handler starts at 0x7f7570497c80
  0x00007f7570497b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570497b64: movabs $0x7f757036e3e0,%r11
  0x00007f7570497b6e: cmp    %r11,%rax
  0x00007f7570497b71: jbe    0x00007f7570497b8a
  0x00007f7570497b77: movabs $0x7f757046e3e0,%r11
  0x00007f7570497b81: cmp    %r11,%rax
  0x00007f7570497b84: jb     0x00007f7570497c27
  0x00007f7570497b8a: movabs $0x7f7570369420,%r11
  0x00007f7570497b94: cmp    %r11,%rax
  0x00007f7570497b97: jbe    0x00007f7570497bb0
  0x00007f7570497b9d: movabs $0x7f757036de58,%r11
  0x00007f7570497ba7: cmp    %r11,%rax
  0x00007f7570497baa: jb     0x00007f7570497c27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570497bb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570497bb5: sub    $0x80,%rsp
  0x00007f7570497bbc: mov    %rax,0x78(%rsp)
  0x00007f7570497bc1: mov    %rcx,0x70(%rsp)
  0x00007f7570497bc6: mov    %rdx,0x68(%rsp)
  0x00007f7570497bcb: mov    %rbx,0x60(%rsp)
  0x00007f7570497bd0: mov    %rbp,0x50(%rsp)
  0x00007f7570497bd5: mov    %rsi,0x48(%rsp)
  0x00007f7570497bda: mov    %rdi,0x40(%rsp)
  0x00007f7570497bdf: mov    %r8,0x38(%rsp)
  0x00007f7570497be4: mov    %r9,0x30(%rsp)
  0x00007f7570497be9: mov    %r10,0x28(%rsp)
  0x00007f7570497bee: mov    %r11,0x20(%rsp)
  0x00007f7570497bf3: mov    %r12,0x18(%rsp)
  0x00007f7570497bf8: mov    %r13,0x10(%rsp)
  0x00007f7570497bfd: mov    %r14,0x8(%rsp)
  0x00007f7570497c02: mov    %r15,(%rsp)
  0x00007f7570497c06: movabs $0x7f758592f470,%rdi
  0x00007f7570497c10: movabs $0x7f7570497bb0,%rsi
  0x00007f7570497c1a: mov    %rsp,%rdx
  0x00007f7570497c1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497c21: callq  0x00007f75853729fa
  0x00007f7570497c26: hlt    
  ;; } verify_i2ce 
  0x00007f7570497c27: mov    %rsp,%r11
  0x00007f7570497c2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497c2e: push   %rax
  0x00007f7570497c2f: mov    %r11,%rax
  0x00007f7570497c32: mov    0x50(%rbx),%r11
  0x00007f7570497c36: mov    0x28(%rax),%rsi
  0x00007f7570497c3a: mov    0x20(%rax),%rdx
  0x00007f7570497c3e: mov    0x10(%rax),%rcx
  0x00007f7570497c42: mov    0x8(%rax),%r8
  0x00007f7570497c46: mov    %rbx,0x258(%r15)
  0x00007f7570497c4d: mov    %rbx,%rax
  0x00007f7570497c50: jmpq   *%r11
  0x00007f7570497c53: mov    0x8(%rsi),%ebx
  0x00007f7570497c56: shl    $0x3,%rbx
  0x00007f7570497c5a: cmp    0x10(%rax),%rbx
  0x00007f7570497c5e: mov    0x8(%rax),%rbx
  0x00007f7570497c62: je     0x00007f7570497c6d
  0x00007f7570497c68: jmpq   0x00007f757046ec40
  0x00007f7570497c6d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497c75: je     0x00007f7570497d70
  0x00007f7570497c7b: jmpq   0x00007f757046ec40
  0x00007f7570497c80: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497c88: je     0x00007f7570497d70
  0x00007f7570497c8e: mov    %rsp,%r13
  0x00007f7570497c91: mov    (%rsp),%rax
  0x00007f7570497c95: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497c99: pushfq 
  0x00007f7570497c9a: sub    $0x8,%rsp
  0x00007f7570497c9e: mov    %rsp,-0x28(%rsp)
  0x00007f7570497ca3: sub    $0x80,%rsp
  0x00007f7570497caa: mov    %rax,0x78(%rsp)
  0x00007f7570497caf: mov    %rcx,0x70(%rsp)
  0x00007f7570497cb4: mov    %rdx,0x68(%rsp)
  0x00007f7570497cb9: mov    %rbx,0x60(%rsp)
  0x00007f7570497cbe: mov    %rbp,0x50(%rsp)
  0x00007f7570497cc3: mov    %rsi,0x48(%rsp)
  0x00007f7570497cc8: mov    %rdi,0x40(%rsp)
  0x00007f7570497ccd: mov    %r8,0x38(%rsp)
  0x00007f7570497cd2: mov    %r9,0x30(%rsp)
  0x00007f7570497cd7: mov    %r10,0x28(%rsp)
  0x00007f7570497cdc: mov    %r11,0x20(%rsp)
  0x00007f7570497ce1: mov    %r12,0x18(%rsp)
  0x00007f7570497ce6: mov    %r13,0x10(%rsp)
  0x00007f7570497ceb: mov    %r14,0x8(%rsp)
  0x00007f7570497cf0: mov    %r15,(%rsp)
  0x00007f7570497cf4: sub    $0x200,%rsp
  0x00007f7570497cfb: fxsave64 (%rsp)
  0x00007f7570497d00: mov    %rbx,%rdi
  0x00007f7570497d03: mov    %rax,%rsi
  0x00007f7570497d06: callq  0x00007f7585522bca
  0x00007f7570497d0b: fxrstor64 (%rsp)
  0x00007f7570497d10: add    $0x200,%rsp
  0x00007f7570497d17: mov    (%rsp),%r15
  0x00007f7570497d1b: mov    0x8(%rsp),%r14
  0x00007f7570497d20: mov    0x10(%rsp),%r13
  0x00007f7570497d25: mov    0x18(%rsp),%r12
  0x00007f7570497d2a: mov    0x20(%rsp),%r11
  0x00007f7570497d2f: mov    0x28(%rsp),%r10
  0x00007f7570497d34: mov    0x30(%rsp),%r9
  0x00007f7570497d39: mov    0x38(%rsp),%r8
  0x00007f7570497d3e: mov    0x40(%rsp),%rdi
  0x00007f7570497d43: mov    0x48(%rsp),%rsi
  0x00007f7570497d48: mov    0x50(%rsp),%rbp
  0x00007f7570497d4d: mov    0x60(%rsp),%rbx
  0x00007f7570497d52: mov    0x68(%rsp),%rdx
  0x00007f7570497d57: mov    0x70(%rsp),%rcx
  0x00007f7570497d5c: mov    0x78(%rsp),%rax
  0x00007f7570497d61: add    $0x80,%rsp
  0x00007f7570497d68: add    $0x8,%rsp
  0x00007f7570497d6c: popfq  
  0x00007f7570497d6d: mov    %r13,%rsp
  0x00007f7570497d70: pop    %rax
  0x00007f7570497d71: mov    %rsp,%r13
  0x00007f7570497d74: sub    $0x30,%rsp
  0x00007f7570497d78: mov    %rax,(%rsp)
  0x00007f7570497d7c: mov    %rsi,0x28(%rsp)
  0x00007f7570497d81: mov    %rdx,0x20(%rsp)
  0x00007f7570497d86: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570497d90: mov    %rax,0x18(%rsp)
  0x00007f7570497d95: mov    %rcx,0x10(%rsp)
  0x00007f7570497d9a: mov    %r8,0x8(%rsp)
  0x00007f7570497d9f: mov    0x40(%rbx),%rcx
  0x00007f7570497da3: jmpq   *%rcx

AHE@0x00007f75800d59b8: 0xbba00000 i2c: 0x00007f7570497e60 c2i: 0x00007f7570497f7b c2iUV: 0x00007f7570497f4e
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)Ljava/lang/Object; (555 bytes generated)
c2i argument handler starts at 0x7f7570497f7b
  0x00007f7570497e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570497e64: movabs $0x7f757036e3e0,%r11
  0x00007f7570497e6e: cmp    %r11,%rax
  0x00007f7570497e71: jbe    0x00007f7570497e8a
  0x00007f7570497e77: movabs $0x7f757046e3e0,%r11
  0x00007f7570497e81: cmp    %r11,%rax
  0x00007f7570497e84: jb     0x00007f7570497f27
  0x00007f7570497e8a: movabs $0x7f7570369420,%r11
  0x00007f7570497e94: cmp    %r11,%rax
  0x00007f7570497e97: jbe    0x00007f7570497eb0
  0x00007f7570497e9d: movabs $0x7f757036de58,%r11
  0x00007f7570497ea7: cmp    %r11,%rax
  0x00007f7570497eaa: jb     0x00007f7570497f27
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570497eb0: mov    %rsp,-0x28(%rsp)
  0x00007f7570497eb5: sub    $0x80,%rsp
  0x00007f7570497ebc: mov    %rax,0x78(%rsp)
  0x00007f7570497ec1: mov    %rcx,0x70(%rsp)
  0x00007f7570497ec6: mov    %rdx,0x68(%rsp)
  0x00007f7570497ecb: mov    %rbx,0x60(%rsp)
  0x00007f7570497ed0: mov    %rbp,0x50(%rsp)
  0x00007f7570497ed5: mov    %rsi,0x48(%rsp)
  0x00007f7570497eda: mov    %rdi,0x40(%rsp)
  0x00007f7570497edf: mov    %r8,0x38(%rsp)
  0x00007f7570497ee4: mov    %r9,0x30(%rsp)
  0x00007f7570497ee9: mov    %r10,0x28(%rsp)
  0x00007f7570497eee: mov    %r11,0x20(%rsp)
  0x00007f7570497ef3: mov    %r12,0x18(%rsp)
  0x00007f7570497ef8: mov    %r13,0x10(%rsp)
  0x00007f7570497efd: mov    %r14,0x8(%rsp)
  0x00007f7570497f02: mov    %r15,(%rsp)
  0x00007f7570497f06: movabs $0x7f758592f470,%rdi
  0x00007f7570497f10: movabs $0x7f7570497eb0,%rsi
  0x00007f7570497f1a: mov    %rsp,%rdx
  0x00007f7570497f1d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497f21: callq  0x00007f75853729fa
  0x00007f7570497f26: hlt    
  ;; } verify_i2ce 
  0x00007f7570497f27: mov    %rsp,%r11
  0x00007f7570497f2a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497f2e: push   %rax
  0x00007f7570497f2f: mov    %r11,%rax
  0x00007f7570497f32: mov    0x50(%rbx),%r11
  0x00007f7570497f36: mov    0x18(%rax),%rsi
  0x00007f7570497f3a: mov    0x10(%rax),%rdx
  0x00007f7570497f3e: mov    0x8(%rax),%ecx
  0x00007f7570497f41: mov    %rbx,0x258(%r15)
  0x00007f7570497f48: mov    %rbx,%rax
  0x00007f7570497f4b: jmpq   *%r11
  0x00007f7570497f4e: mov    0x8(%rsi),%ebx
  0x00007f7570497f51: shl    $0x3,%rbx
  0x00007f7570497f55: cmp    0x10(%rax),%rbx
  0x00007f7570497f59: mov    0x8(%rax),%rbx
  0x00007f7570497f5d: je     0x00007f7570497f68
  0x00007f7570497f63: jmpq   0x00007f757046ec40
  0x00007f7570497f68: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497f70: je     0x00007f757049806b
  0x00007f7570497f76: jmpq   0x00007f757046ec40
  0x00007f7570497f7b: cmpq   $0x0,0x58(%rbx)
  0x00007f7570497f83: je     0x00007f757049806b
  0x00007f7570497f89: mov    %rsp,%r13
  0x00007f7570497f8c: mov    (%rsp),%rax
  0x00007f7570497f90: and    $0xfffffffffffffff0,%rsp
  0x00007f7570497f94: pushfq 
  0x00007f7570497f95: sub    $0x8,%rsp
  0x00007f7570497f99: mov    %rsp,-0x28(%rsp)
  0x00007f7570497f9e: sub    $0x80,%rsp
  0x00007f7570497fa5: mov    %rax,0x78(%rsp)
  0x00007f7570497faa: mov    %rcx,0x70(%rsp)
  0x00007f7570497faf: mov    %rdx,0x68(%rsp)
  0x00007f7570497fb4: mov    %rbx,0x60(%rsp)
  0x00007f7570497fb9: mov    %rbp,0x50(%rsp)
  0x00007f7570497fbe: mov    %rsi,0x48(%rsp)
  0x00007f7570497fc3: mov    %rdi,0x40(%rsp)
  0x00007f7570497fc8: mov    %r8,0x38(%rsp)
  0x00007f7570497fcd: mov    %r9,0x30(%rsp)
  0x00007f7570497fd2: mov    %r10,0x28(%rsp)
  0x00007f7570497fd7: mov    %r11,0x20(%rsp)
  0x00007f7570497fdc: mov    %r12,0x18(%rsp)
  0x00007f7570497fe1: mov    %r13,0x10(%rsp)
  0x00007f7570497fe6: mov    %r14,0x8(%rsp)
  0x00007f7570497feb: mov    %r15,(%rsp)
  0x00007f7570497fef: sub    $0x200,%rsp
  0x00007f7570497ff6: fxsave64 (%rsp)
  0x00007f7570497ffb: mov    %rbx,%rdi
  0x00007f7570497ffe: mov    %rax,%rsi
  0x00007f7570498001: callq  0x00007f7585522bca
  0x00007f7570498006: fxrstor64 (%rsp)
  0x00007f757049800b: add    $0x200,%rsp
  0x00007f7570498012: mov    (%rsp),%r15
  0x00007f7570498016: mov    0x8(%rsp),%r14
  0x00007f757049801b: mov    0x10(%rsp),%r13
  0x00007f7570498020: mov    0x18(%rsp),%r12
  0x00007f7570498025: mov    0x20(%rsp),%r11
  0x00007f757049802a: mov    0x28(%rsp),%r10
  0x00007f757049802f: mov    0x30(%rsp),%r9
  0x00007f7570498034: mov    0x38(%rsp),%r8
  0x00007f7570498039: mov    0x40(%rsp),%rdi
  0x00007f757049803e: mov    0x48(%rsp),%rsi
  0x00007f7570498043: mov    0x50(%rsp),%rbp
  0x00007f7570498048: mov    0x60(%rsp),%rbx
  0x00007f757049804d: mov    0x68(%rsp),%rdx
  0x00007f7570498052: mov    0x70(%rsp),%rcx
  0x00007f7570498057: mov    0x78(%rsp),%rax
  0x00007f757049805c: add    $0x80,%rsp
  0x00007f7570498063: add    $0x8,%rsp
  0x00007f7570498067: popfq  
  0x00007f7570498068: mov    %r13,%rsp
  0x00007f757049806b: pop    %rax
  0x00007f757049806c: mov    %rsp,%r13
  0x00007f757049806f: sub    $0x20,%rsp
  0x00007f7570498073: mov    %rax,(%rsp)
  0x00007f7570498077: mov    %rsi,0x18(%rsp)
  0x00007f757049807c: mov    %rdx,0x10(%rsp)
  0x00007f7570498081: mov    %ecx,0x8(%rsp)
  0x00007f7570498085: mov    0x40(%rbx),%rcx
  0x00007f7570498089: jmpq   *%rcx

AHE@0x00007f75800d5a00: 0xbbbe0000 i2c: 0x00007f7570498160 c2i: 0x00007f757049827c c2iUV: 0x00007f757049824f
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Ljava/lang/Object; (572 bytes generated)
c2i argument handler starts at 0x7f757049827c
  0x00007f7570498160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570498164: movabs $0x7f757036e3e0,%r11
  0x00007f757049816e: cmp    %r11,%rax
  0x00007f7570498171: jbe    0x00007f757049818a
  0x00007f7570498177: movabs $0x7f757046e3e0,%r11
  0x00007f7570498181: cmp    %r11,%rax
  0x00007f7570498184: jb     0x00007f7570498227
  0x00007f757049818a: movabs $0x7f7570369420,%r11
  0x00007f7570498194: cmp    %r11,%rax
  0x00007f7570498197: jbe    0x00007f75704981b0
  0x00007f757049819d: movabs $0x7f757036de58,%r11
  0x00007f75704981a7: cmp    %r11,%rax
  0x00007f75704981aa: jb     0x00007f7570498227
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704981b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704981b5: sub    $0x80,%rsp
  0x00007f75704981bc: mov    %rax,0x78(%rsp)
  0x00007f75704981c1: mov    %rcx,0x70(%rsp)
  0x00007f75704981c6: mov    %rdx,0x68(%rsp)
  0x00007f75704981cb: mov    %rbx,0x60(%rsp)
  0x00007f75704981d0: mov    %rbp,0x50(%rsp)
  0x00007f75704981d5: mov    %rsi,0x48(%rsp)
  0x00007f75704981da: mov    %rdi,0x40(%rsp)
  0x00007f75704981df: mov    %r8,0x38(%rsp)
  0x00007f75704981e4: mov    %r9,0x30(%rsp)
  0x00007f75704981e9: mov    %r10,0x28(%rsp)
  0x00007f75704981ee: mov    %r11,0x20(%rsp)
  0x00007f75704981f3: mov    %r12,0x18(%rsp)
  0x00007f75704981f8: mov    %r13,0x10(%rsp)
  0x00007f75704981fd: mov    %r14,0x8(%rsp)
  0x00007f7570498202: mov    %r15,(%rsp)
  0x00007f7570498206: movabs $0x7f758592f470,%rdi
  0x00007f7570498210: movabs $0x7f75704981b0,%rsi
  0x00007f757049821a: mov    %rsp,%rdx
  0x00007f757049821d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498221: callq  0x00007f75853729fa
  0x00007f7570498226: hlt    
  ;; } verify_i2ce 
  0x00007f7570498227: mov    %rsp,%r11
  0x00007f757049822a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049822e: push   %rax
  0x00007f757049822f: mov    %r11,%rax
  0x00007f7570498232: mov    0x50(%rbx),%r11
  0x00007f7570498236: mov    0x20(%rax),%rsi
  0x00007f757049823a: mov    0x18(%rax),%rdx
  0x00007f757049823e: mov    0x8(%rax),%rcx
  0x00007f7570498242: mov    %rbx,0x258(%r15)
  0x00007f7570498249: mov    %rbx,%rax
  0x00007f757049824c: jmpq   *%r11
  0x00007f757049824f: mov    0x8(%rsi),%ebx
  0x00007f7570498252: shl    $0x3,%rbx
  0x00007f7570498256: cmp    0x10(%rax),%rbx
  0x00007f757049825a: mov    0x8(%rax),%rbx
  0x00007f757049825e: je     0x00007f7570498269
  0x00007f7570498264: jmpq   0x00007f757046ec40
  0x00007f7570498269: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498271: je     0x00007f757049836c
  0x00007f7570498277: jmpq   0x00007f757046ec40
  0x00007f757049827c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498284: je     0x00007f757049836c
  0x00007f757049828a: mov    %rsp,%r13
  0x00007f757049828d: mov    (%rsp),%rax
  0x00007f7570498291: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498295: pushfq 
  0x00007f7570498296: sub    $0x8,%rsp
  0x00007f757049829a: mov    %rsp,-0x28(%rsp)
  0x00007f757049829f: sub    $0x80,%rsp
  0x00007f75704982a6: mov    %rax,0x78(%rsp)
  0x00007f75704982ab: mov    %rcx,0x70(%rsp)
  0x00007f75704982b0: mov    %rdx,0x68(%rsp)
  0x00007f75704982b5: mov    %rbx,0x60(%rsp)
  0x00007f75704982ba: mov    %rbp,0x50(%rsp)
  0x00007f75704982bf: mov    %rsi,0x48(%rsp)
  0x00007f75704982c4: mov    %rdi,0x40(%rsp)
  0x00007f75704982c9: mov    %r8,0x38(%rsp)
  0x00007f75704982ce: mov    %r9,0x30(%rsp)
  0x00007f75704982d3: mov    %r10,0x28(%rsp)
  0x00007f75704982d8: mov    %r11,0x20(%rsp)
  0x00007f75704982dd: mov    %r12,0x18(%rsp)
  0x00007f75704982e2: mov    %r13,0x10(%rsp)
  0x00007f75704982e7: mov    %r14,0x8(%rsp)
  0x00007f75704982ec: mov    %r15,(%rsp)
  0x00007f75704982f0: sub    $0x200,%rsp
  0x00007f75704982f7: fxsave64 (%rsp)
  0x00007f75704982fc: mov    %rbx,%rdi
  0x00007f75704982ff: mov    %rax,%rsi
  0x00007f7570498302: callq  0x00007f7585522bca
  0x00007f7570498307: fxrstor64 (%rsp)
  0x00007f757049830c: add    $0x200,%rsp
  0x00007f7570498313: mov    (%rsp),%r15
  0x00007f7570498317: mov    0x8(%rsp),%r14
  0x00007f757049831c: mov    0x10(%rsp),%r13
  0x00007f7570498321: mov    0x18(%rsp),%r12
  0x00007f7570498326: mov    0x20(%rsp),%r11
  0x00007f757049832b: mov    0x28(%rsp),%r10
  0x00007f7570498330: mov    0x30(%rsp),%r9
  0x00007f7570498335: mov    0x38(%rsp),%r8
  0x00007f757049833a: mov    0x40(%rsp),%rdi
  0x00007f757049833f: mov    0x48(%rsp),%rsi
  0x00007f7570498344: mov    0x50(%rsp),%rbp
  0x00007f7570498349: mov    0x60(%rsp),%rbx
  0x00007f757049834e: mov    0x68(%rsp),%rdx
  0x00007f7570498353: mov    0x70(%rsp),%rcx
  0x00007f7570498358: mov    0x78(%rsp),%rax
  0x00007f757049835d: add    $0x80,%rsp
  0x00007f7570498364: add    $0x8,%rsp
  0x00007f7570498368: popfq  
  0x00007f7570498369: mov    %r13,%rsp
  0x00007f757049836c: pop    %rax
  0x00007f757049836d: mov    %rsp,%r13
  0x00007f7570498370: sub    $0x30,%rsp
  0x00007f7570498374: mov    %rax,(%rsp)
  0x00007f7570498378: mov    %rsi,0x20(%rsp)
  0x00007f757049837d: mov    %rdx,0x18(%rsp)
  0x00007f7570498382: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049838c: mov    %rax,0x10(%rsp)
  0x00007f7570498391: mov    %rcx,0x8(%rsp)
  0x00007f7570498396: mov    0x40(%rbx),%rcx
  0x00007f757049839a: jmpq   *%rcx

AHE@0x00007f75800d5a48: 0xb0000000 i2c: 0x00007f7570498460 c2i: 0x00007f7570498574 c2iUV: 0x00007f7570498547
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f7570498574
  0x00007f7570498460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570498464: movabs $0x7f757036e3e0,%r11
  0x00007f757049846e: cmp    %r11,%rax
  0x00007f7570498471: jbe    0x00007f757049848a
  0x00007f7570498477: movabs $0x7f757046e3e0,%r11
  0x00007f7570498481: cmp    %r11,%rax
  0x00007f7570498484: jb     0x00007f7570498527
  0x00007f757049848a: movabs $0x7f7570369420,%r11
  0x00007f7570498494: cmp    %r11,%rax
  0x00007f7570498497: jbe    0x00007f75704984b0
  0x00007f757049849d: movabs $0x7f757036de58,%r11
  0x00007f75704984a7: cmp    %r11,%rax
  0x00007f75704984aa: jb     0x00007f7570498527
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704984b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704984b5: sub    $0x80,%rsp
  0x00007f75704984bc: mov    %rax,0x78(%rsp)
  0x00007f75704984c1: mov    %rcx,0x70(%rsp)
  0x00007f75704984c6: mov    %rdx,0x68(%rsp)
  0x00007f75704984cb: mov    %rbx,0x60(%rsp)
  0x00007f75704984d0: mov    %rbp,0x50(%rsp)
  0x00007f75704984d5: mov    %rsi,0x48(%rsp)
  0x00007f75704984da: mov    %rdi,0x40(%rsp)
  0x00007f75704984df: mov    %r8,0x38(%rsp)
  0x00007f75704984e4: mov    %r9,0x30(%rsp)
  0x00007f75704984e9: mov    %r10,0x28(%rsp)
  0x00007f75704984ee: mov    %r11,0x20(%rsp)
  0x00007f75704984f3: mov    %r12,0x18(%rsp)
  0x00007f75704984f8: mov    %r13,0x10(%rsp)
  0x00007f75704984fd: mov    %r14,0x8(%rsp)
  0x00007f7570498502: mov    %r15,(%rsp)
  0x00007f7570498506: movabs $0x7f758592f470,%rdi
  0x00007f7570498510: movabs $0x7f75704984b0,%rsi
  0x00007f757049851a: mov    %rsp,%rdx
  0x00007f757049851d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498521: callq  0x00007f75853729fa
  0x00007f7570498526: hlt    
  ;; } verify_i2ce 
  0x00007f7570498527: mov    %rsp,%r11
  0x00007f757049852a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049852e: push   %rax
  0x00007f757049852f: mov    %r11,%rax
  0x00007f7570498532: mov    0x50(%rbx),%r11
  0x00007f7570498536: mov    0x8(%rax),%rsi
  0x00007f757049853a: mov    %rbx,0x258(%r15)
  0x00007f7570498541: mov    %rbx,%rax
  0x00007f7570498544: jmpq   *%r11
  0x00007f7570498547: mov    0x8(%rsi),%ebx
  0x00007f757049854a: shl    $0x3,%rbx
  0x00007f757049854e: cmp    0x10(%rax),%rbx
  0x00007f7570498552: mov    0x8(%rax),%rbx
  0x00007f7570498556: je     0x00007f7570498561
  0x00007f757049855c: jmpq   0x00007f757046ec40
  0x00007f7570498561: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498569: je     0x00007f7570498664
  0x00007f757049856f: jmpq   0x00007f757046ec40
  0x00007f7570498574: cmpq   $0x0,0x58(%rbx)
  0x00007f757049857c: je     0x00007f7570498664
  0x00007f7570498582: mov    %rsp,%r13
  0x00007f7570498585: mov    (%rsp),%rax
  0x00007f7570498589: and    $0xfffffffffffffff0,%rsp
  0x00007f757049858d: pushfq 
  0x00007f757049858e: sub    $0x8,%rsp
  0x00007f7570498592: mov    %rsp,-0x28(%rsp)
  0x00007f7570498597: sub    $0x80,%rsp
  0x00007f757049859e: mov    %rax,0x78(%rsp)
  0x00007f75704985a3: mov    %rcx,0x70(%rsp)
  0x00007f75704985a8: mov    %rdx,0x68(%rsp)
  0x00007f75704985ad: mov    %rbx,0x60(%rsp)
  0x00007f75704985b2: mov    %rbp,0x50(%rsp)
  0x00007f75704985b7: mov    %rsi,0x48(%rsp)
  0x00007f75704985bc: mov    %rdi,0x40(%rsp)
  0x00007f75704985c1: mov    %r8,0x38(%rsp)
  0x00007f75704985c6: mov    %r9,0x30(%rsp)
  0x00007f75704985cb: mov    %r10,0x28(%rsp)
  0x00007f75704985d0: mov    %r11,0x20(%rsp)
  0x00007f75704985d5: mov    %r12,0x18(%rsp)
  0x00007f75704985da: mov    %r13,0x10(%rsp)
  0x00007f75704985df: mov    %r14,0x8(%rsp)
  0x00007f75704985e4: mov    %r15,(%rsp)
  0x00007f75704985e8: sub    $0x200,%rsp
  0x00007f75704985ef: fxsave64 (%rsp)
  0x00007f75704985f4: mov    %rbx,%rdi
  0x00007f75704985f7: mov    %rax,%rsi
  0x00007f75704985fa: callq  0x00007f7585522bca
  0x00007f75704985ff: fxrstor64 (%rsp)
  0x00007f7570498604: add    $0x200,%rsp
  0x00007f757049860b: mov    (%rsp),%r15
  0x00007f757049860f: mov    0x8(%rsp),%r14
  0x00007f7570498614: mov    0x10(%rsp),%r13
  0x00007f7570498619: mov    0x18(%rsp),%r12
  0x00007f757049861e: mov    0x20(%rsp),%r11
  0x00007f7570498623: mov    0x28(%rsp),%r10
  0x00007f7570498628: mov    0x30(%rsp),%r9
  0x00007f757049862d: mov    0x38(%rsp),%r8
  0x00007f7570498632: mov    0x40(%rsp),%rdi
  0x00007f7570498637: mov    0x48(%rsp),%rsi
  0x00007f757049863c: mov    0x50(%rsp),%rbp
  0x00007f7570498641: mov    0x60(%rsp),%rbx
  0x00007f7570498646: mov    0x68(%rsp),%rdx
  0x00007f757049864b: mov    0x70(%rsp),%rcx
  0x00007f7570498650: mov    0x78(%rsp),%rax
  0x00007f7570498655: add    $0x80,%rsp
  0x00007f757049865c: add    $0x8,%rsp
  0x00007f7570498660: popfq  
  0x00007f7570498661: mov    %r13,%rsp
  0x00007f7570498664: pop    %rax
  0x00007f7570498665: mov    %rsp,%r13
  0x00007f7570498668: sub    $0x10,%rsp
  0x00007f757049866c: mov    %rax,(%rsp)
  0x00007f7570498670: mov    %rsi,0x8(%rsp)
  0x00007f7570498675: mov    0x40(%rbx),%rcx
  0x00007f7570498679: jmpq   *%rcx

AHE@0x00007f75800d5a90: 0xb0000000 i2c: 0x00007f7570498720 c2i: 0x00007f7570498834 c2iUV: 0x00007f7570498807
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f7570498834
  0x00007f7570498720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570498724: movabs $0x7f757036e3e0,%r11
  0x00007f757049872e: cmp    %r11,%rax
  0x00007f7570498731: jbe    0x00007f757049874a
  0x00007f7570498737: movabs $0x7f757046e3e0,%r11
  0x00007f7570498741: cmp    %r11,%rax
  0x00007f7570498744: jb     0x00007f75704987e7
  0x00007f757049874a: movabs $0x7f7570369420,%r11
  0x00007f7570498754: cmp    %r11,%rax
  0x00007f7570498757: jbe    0x00007f7570498770
  0x00007f757049875d: movabs $0x7f757036de58,%r11
  0x00007f7570498767: cmp    %r11,%rax
  0x00007f757049876a: jb     0x00007f75704987e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570498770: mov    %rsp,-0x28(%rsp)
  0x00007f7570498775: sub    $0x80,%rsp
  0x00007f757049877c: mov    %rax,0x78(%rsp)
  0x00007f7570498781: mov    %rcx,0x70(%rsp)
  0x00007f7570498786: mov    %rdx,0x68(%rsp)
  0x00007f757049878b: mov    %rbx,0x60(%rsp)
  0x00007f7570498790: mov    %rbp,0x50(%rsp)
  0x00007f7570498795: mov    %rsi,0x48(%rsp)
  0x00007f757049879a: mov    %rdi,0x40(%rsp)
  0x00007f757049879f: mov    %r8,0x38(%rsp)
  0x00007f75704987a4: mov    %r9,0x30(%rsp)
  0x00007f75704987a9: mov    %r10,0x28(%rsp)
  0x00007f75704987ae: mov    %r11,0x20(%rsp)
  0x00007f75704987b3: mov    %r12,0x18(%rsp)
  0x00007f75704987b8: mov    %r13,0x10(%rsp)
  0x00007f75704987bd: mov    %r14,0x8(%rsp)
  0x00007f75704987c2: mov    %r15,(%rsp)
  0x00007f75704987c6: movabs $0x7f758592f470,%rdi
  0x00007f75704987d0: movabs $0x7f7570498770,%rsi
  0x00007f75704987da: mov    %rsp,%rdx
  0x00007f75704987dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704987e1: callq  0x00007f75853729fa
  0x00007f75704987e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704987e7: mov    %rsp,%r11
  0x00007f75704987ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704987ee: push   %rax
  0x00007f75704987ef: mov    %r11,%rax
  0x00007f75704987f2: mov    0x50(%rbx),%r11
  0x00007f75704987f6: mov    0x8(%rax),%rsi
  0x00007f75704987fa: mov    %rbx,0x258(%r15)
  0x00007f7570498801: mov    %rbx,%rax
  0x00007f7570498804: jmpq   *%r11
  0x00007f7570498807: mov    0x8(%rsi),%ebx
  0x00007f757049880a: shl    $0x3,%rbx
  0x00007f757049880e: cmp    0x10(%rax),%rbx
  0x00007f7570498812: mov    0x8(%rax),%rbx
  0x00007f7570498816: je     0x00007f7570498821
  0x00007f757049881c: jmpq   0x00007f757046ec40
  0x00007f7570498821: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498829: je     0x00007f7570498924
  0x00007f757049882f: jmpq   0x00007f757046ec40
  0x00007f7570498834: cmpq   $0x0,0x58(%rbx)
  0x00007f757049883c: je     0x00007f7570498924
  0x00007f7570498842: mov    %rsp,%r13
  0x00007f7570498845: mov    (%rsp),%rax
  0x00007f7570498849: and    $0xfffffffffffffff0,%rsp
  0x00007f757049884d: pushfq 
  0x00007f757049884e: sub    $0x8,%rsp
  0x00007f7570498852: mov    %rsp,-0x28(%rsp)
  0x00007f7570498857: sub    $0x80,%rsp
  0x00007f757049885e: mov    %rax,0x78(%rsp)
  0x00007f7570498863: mov    %rcx,0x70(%rsp)
  0x00007f7570498868: mov    %rdx,0x68(%rsp)
  0x00007f757049886d: mov    %rbx,0x60(%rsp)
  0x00007f7570498872: mov    %rbp,0x50(%rsp)
  0x00007f7570498877: mov    %rsi,0x48(%rsp)
  0x00007f757049887c: mov    %rdi,0x40(%rsp)
  0x00007f7570498881: mov    %r8,0x38(%rsp)
  0x00007f7570498886: mov    %r9,0x30(%rsp)
  0x00007f757049888b: mov    %r10,0x28(%rsp)
  0x00007f7570498890: mov    %r11,0x20(%rsp)
  0x00007f7570498895: mov    %r12,0x18(%rsp)
  0x00007f757049889a: mov    %r13,0x10(%rsp)
  0x00007f757049889f: mov    %r14,0x8(%rsp)
  0x00007f75704988a4: mov    %r15,(%rsp)
  0x00007f75704988a8: sub    $0x200,%rsp
  0x00007f75704988af: fxsave64 (%rsp)
  0x00007f75704988b4: mov    %rbx,%rdi
  0x00007f75704988b7: mov    %rax,%rsi
  0x00007f75704988ba: callq  0x00007f7585522bca
  0x00007f75704988bf: fxrstor64 (%rsp)
  0x00007f75704988c4: add    $0x200,%rsp
  0x00007f75704988cb: mov    (%rsp),%r15
  0x00007f75704988cf: mov    0x8(%rsp),%r14
  0x00007f75704988d4: mov    0x10(%rsp),%r13
  0x00007f75704988d9: mov    0x18(%rsp),%r12
  0x00007f75704988de: mov    0x20(%rsp),%r11
  0x00007f75704988e3: mov    0x28(%rsp),%r10
  0x00007f75704988e8: mov    0x30(%rsp),%r9
  0x00007f75704988ed: mov    0x38(%rsp),%r8
  0x00007f75704988f2: mov    0x40(%rsp),%rdi
  0x00007f75704988f7: mov    0x48(%rsp),%rsi
  0x00007f75704988fc: mov    0x50(%rsp),%rbp
  0x00007f7570498901: mov    0x60(%rsp),%rbx
  0x00007f7570498906: mov    0x68(%rsp),%rdx
  0x00007f757049890b: mov    0x70(%rsp),%rcx
  0x00007f7570498910: mov    0x78(%rsp),%rax
  0x00007f7570498915: add    $0x80,%rsp
  0x00007f757049891c: add    $0x8,%rsp
  0x00007f7570498920: popfq  
  0x00007f7570498921: mov    %r13,%rsp
  0x00007f7570498924: pop    %rax
  0x00007f7570498925: mov    %rsp,%r13
  0x00007f7570498928: sub    $0x10,%rsp
  0x00007f757049892c: mov    %rax,(%rsp)
  0x00007f7570498930: mov    %rsi,0x8(%rsp)
  0x00007f7570498935: mov    0x40(%rbx),%rcx
  0x00007f7570498939: jmpq   *%rcx

AHE@0x00007f75800d5ad8: 0xb0000000 i2c: 0x00007f75704989e0 c2i: 0x00007f7570498af4 c2iUV: 0x00007f7570498ac7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f7570498af4
  0x00007f75704989e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704989e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704989ee: cmp    %r11,%rax
  0x00007f75704989f1: jbe    0x00007f7570498a0a
  0x00007f75704989f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570498a01: cmp    %r11,%rax
  0x00007f7570498a04: jb     0x00007f7570498aa7
  0x00007f7570498a0a: movabs $0x7f7570369420,%r11
  0x00007f7570498a14: cmp    %r11,%rax
  0x00007f7570498a17: jbe    0x00007f7570498a30
  0x00007f7570498a1d: movabs $0x7f757036de58,%r11
  0x00007f7570498a27: cmp    %r11,%rax
  0x00007f7570498a2a: jb     0x00007f7570498aa7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570498a30: mov    %rsp,-0x28(%rsp)
  0x00007f7570498a35: sub    $0x80,%rsp
  0x00007f7570498a3c: mov    %rax,0x78(%rsp)
  0x00007f7570498a41: mov    %rcx,0x70(%rsp)
  0x00007f7570498a46: mov    %rdx,0x68(%rsp)
  0x00007f7570498a4b: mov    %rbx,0x60(%rsp)
  0x00007f7570498a50: mov    %rbp,0x50(%rsp)
  0x00007f7570498a55: mov    %rsi,0x48(%rsp)
  0x00007f7570498a5a: mov    %rdi,0x40(%rsp)
  0x00007f7570498a5f: mov    %r8,0x38(%rsp)
  0x00007f7570498a64: mov    %r9,0x30(%rsp)
  0x00007f7570498a69: mov    %r10,0x28(%rsp)
  0x00007f7570498a6e: mov    %r11,0x20(%rsp)
  0x00007f7570498a73: mov    %r12,0x18(%rsp)
  0x00007f7570498a78: mov    %r13,0x10(%rsp)
  0x00007f7570498a7d: mov    %r14,0x8(%rsp)
  0x00007f7570498a82: mov    %r15,(%rsp)
  0x00007f7570498a86: movabs $0x7f758592f470,%rdi
  0x00007f7570498a90: movabs $0x7f7570498a30,%rsi
  0x00007f7570498a9a: mov    %rsp,%rdx
  0x00007f7570498a9d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498aa1: callq  0x00007f75853729fa
  0x00007f7570498aa6: hlt    
  ;; } verify_i2ce 
  0x00007f7570498aa7: mov    %rsp,%r11
  0x00007f7570498aaa: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498aae: push   %rax
  0x00007f7570498aaf: mov    %r11,%rax
  0x00007f7570498ab2: mov    0x50(%rbx),%r11
  0x00007f7570498ab6: mov    0x8(%rax),%rsi
  0x00007f7570498aba: mov    %rbx,0x258(%r15)
  0x00007f7570498ac1: mov    %rbx,%rax
  0x00007f7570498ac4: jmpq   *%r11
  0x00007f7570498ac7: mov    0x8(%rsi),%ebx
  0x00007f7570498aca: shl    $0x3,%rbx
  0x00007f7570498ace: cmp    0x10(%rax),%rbx
  0x00007f7570498ad2: mov    0x8(%rax),%rbx
  0x00007f7570498ad6: je     0x00007f7570498ae1
  0x00007f7570498adc: jmpq   0x00007f757046ec40
  0x00007f7570498ae1: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498ae9: je     0x00007f7570498be4
  0x00007f7570498aef: jmpq   0x00007f757046ec40
  0x00007f7570498af4: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498afc: je     0x00007f7570498be4
  0x00007f7570498b02: mov    %rsp,%r13
  0x00007f7570498b05: mov    (%rsp),%rax
  0x00007f7570498b09: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498b0d: pushfq 
  0x00007f7570498b0e: sub    $0x8,%rsp
  0x00007f7570498b12: mov    %rsp,-0x28(%rsp)
  0x00007f7570498b17: sub    $0x80,%rsp
  0x00007f7570498b1e: mov    %rax,0x78(%rsp)
  0x00007f7570498b23: mov    %rcx,0x70(%rsp)
  0x00007f7570498b28: mov    %rdx,0x68(%rsp)
  0x00007f7570498b2d: mov    %rbx,0x60(%rsp)
  0x00007f7570498b32: mov    %rbp,0x50(%rsp)
  0x00007f7570498b37: mov    %rsi,0x48(%rsp)
  0x00007f7570498b3c: mov    %rdi,0x40(%rsp)
  0x00007f7570498b41: mov    %r8,0x38(%rsp)
  0x00007f7570498b46: mov    %r9,0x30(%rsp)
  0x00007f7570498b4b: mov    %r10,0x28(%rsp)
  0x00007f7570498b50: mov    %r11,0x20(%rsp)
  0x00007f7570498b55: mov    %r12,0x18(%rsp)
  0x00007f7570498b5a: mov    %r13,0x10(%rsp)
  0x00007f7570498b5f: mov    %r14,0x8(%rsp)
  0x00007f7570498b64: mov    %r15,(%rsp)
  0x00007f7570498b68: sub    $0x200,%rsp
  0x00007f7570498b6f: fxsave64 (%rsp)
  0x00007f7570498b74: mov    %rbx,%rdi
  0x00007f7570498b77: mov    %rax,%rsi
  0x00007f7570498b7a: callq  0x00007f7585522bca
  0x00007f7570498b7f: fxrstor64 (%rsp)
  0x00007f7570498b84: add    $0x200,%rsp
  0x00007f7570498b8b: mov    (%rsp),%r15
  0x00007f7570498b8f: mov    0x8(%rsp),%r14
  0x00007f7570498b94: mov    0x10(%rsp),%r13
  0x00007f7570498b99: mov    0x18(%rsp),%r12
  0x00007f7570498b9e: mov    0x20(%rsp),%r11
  0x00007f7570498ba3: mov    0x28(%rsp),%r10
  0x00007f7570498ba8: mov    0x30(%rsp),%r9
  0x00007f7570498bad: mov    0x38(%rsp),%r8
  0x00007f7570498bb2: mov    0x40(%rsp),%rdi
  0x00007f7570498bb7: mov    0x48(%rsp),%rsi
  0x00007f7570498bbc: mov    0x50(%rsp),%rbp
  0x00007f7570498bc1: mov    0x60(%rsp),%rbx
  0x00007f7570498bc6: mov    0x68(%rsp),%rdx
  0x00007f7570498bcb: mov    0x70(%rsp),%rcx
  0x00007f7570498bd0: mov    0x78(%rsp),%rax
  0x00007f7570498bd5: add    $0x80,%rsp
  0x00007f7570498bdc: add    $0x8,%rsp
  0x00007f7570498be0: popfq  
  0x00007f7570498be1: mov    %r13,%rsp
  0x00007f7570498be4: pop    %rax
  0x00007f7570498be5: mov    %rsp,%r13
  0x00007f7570498be8: sub    $0x10,%rsp
  0x00007f7570498bec: mov    %rax,(%rsp)
  0x00007f7570498bf0: mov    %rsi,0x8(%rsp)
  0x00007f7570498bf5: mov    0x40(%rbx),%rcx
  0x00007f7570498bf9: jmpq   *%rcx

AHE@0x00007f75800d5b20: 0xbb000000 i2c: 0x00007f7570498ca0 c2i: 0x00007f7570498db8 c2iUV: 0x00007f7570498d8b
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (548 bytes generated)
c2i argument handler starts at 0x7f7570498db8
  0x00007f7570498ca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570498ca4: movabs $0x7f757036e3e0,%r11
  0x00007f7570498cae: cmp    %r11,%rax
  0x00007f7570498cb1: jbe    0x00007f7570498cca
  0x00007f7570498cb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570498cc1: cmp    %r11,%rax
  0x00007f7570498cc4: jb     0x00007f7570498d67
  0x00007f7570498cca: movabs $0x7f7570369420,%r11
  0x00007f7570498cd4: cmp    %r11,%rax
  0x00007f7570498cd7: jbe    0x00007f7570498cf0
  0x00007f7570498cdd: movabs $0x7f757036de58,%r11
  0x00007f7570498ce7: cmp    %r11,%rax
  0x00007f7570498cea: jb     0x00007f7570498d67
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570498cf0: mov    %rsp,-0x28(%rsp)
  0x00007f7570498cf5: sub    $0x80,%rsp
  0x00007f7570498cfc: mov    %rax,0x78(%rsp)
  0x00007f7570498d01: mov    %rcx,0x70(%rsp)
  0x00007f7570498d06: mov    %rdx,0x68(%rsp)
  0x00007f7570498d0b: mov    %rbx,0x60(%rsp)
  0x00007f7570498d10: mov    %rbp,0x50(%rsp)
  0x00007f7570498d15: mov    %rsi,0x48(%rsp)
  0x00007f7570498d1a: mov    %rdi,0x40(%rsp)
  0x00007f7570498d1f: mov    %r8,0x38(%rsp)
  0x00007f7570498d24: mov    %r9,0x30(%rsp)
  0x00007f7570498d29: mov    %r10,0x28(%rsp)
  0x00007f7570498d2e: mov    %r11,0x20(%rsp)
  0x00007f7570498d33: mov    %r12,0x18(%rsp)
  0x00007f7570498d38: mov    %r13,0x10(%rsp)
  0x00007f7570498d3d: mov    %r14,0x8(%rsp)
  0x00007f7570498d42: mov    %r15,(%rsp)
  0x00007f7570498d46: movabs $0x7f758592f470,%rdi
  0x00007f7570498d50: movabs $0x7f7570498cf0,%rsi
  0x00007f7570498d5a: mov    %rsp,%rdx
  0x00007f7570498d5d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498d61: callq  0x00007f75853729fa
  0x00007f7570498d66: hlt    
  ;; } verify_i2ce 
  0x00007f7570498d67: mov    %rsp,%r11
  0x00007f7570498d6a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498d6e: push   %rax
  0x00007f7570498d6f: mov    %r11,%rax
  0x00007f7570498d72: mov    0x50(%rbx),%r11
  0x00007f7570498d76: mov    0x10(%rax),%rsi
  0x00007f7570498d7a: mov    0x8(%rax),%rdx
  0x00007f7570498d7e: mov    %rbx,0x258(%r15)
  0x00007f7570498d85: mov    %rbx,%rax
  0x00007f7570498d88: jmpq   *%r11
  0x00007f7570498d8b: mov    0x8(%rsi),%ebx
  0x00007f7570498d8e: shl    $0x3,%rbx
  0x00007f7570498d92: cmp    0x10(%rax),%rbx
  0x00007f7570498d96: mov    0x8(%rax),%rbx
  0x00007f7570498d9a: je     0x00007f7570498da5
  0x00007f7570498da0: jmpq   0x00007f757046ec40
  0x00007f7570498da5: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498dad: je     0x00007f7570498ea8
  0x00007f7570498db3: jmpq   0x00007f757046ec40
  0x00007f7570498db8: cmpq   $0x0,0x58(%rbx)
  0x00007f7570498dc0: je     0x00007f7570498ea8
  0x00007f7570498dc6: mov    %rsp,%r13
  0x00007f7570498dc9: mov    (%rsp),%rax
  0x00007f7570498dcd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570498dd1: pushfq 
  0x00007f7570498dd2: sub    $0x8,%rsp
  0x00007f7570498dd6: mov    %rsp,-0x28(%rsp)
  0x00007f7570498ddb: sub    $0x80,%rsp
  0x00007f7570498de2: mov    %rax,0x78(%rsp)
  0x00007f7570498de7: mov    %rcx,0x70(%rsp)
  0x00007f7570498dec: mov    %rdx,0x68(%rsp)
  0x00007f7570498df1: mov    %rbx,0x60(%rsp)
  0x00007f7570498df6: mov    %rbp,0x50(%rsp)
  0x00007f7570498dfb: mov    %rsi,0x48(%rsp)
  0x00007f7570498e00: mov    %rdi,0x40(%rsp)
  0x00007f7570498e05: mov    %r8,0x38(%rsp)
  0x00007f7570498e0a: mov    %r9,0x30(%rsp)
  0x00007f7570498e0f: mov    %r10,0x28(%rsp)
  0x00007f7570498e14: mov    %r11,0x20(%rsp)
  0x00007f7570498e19: mov    %r12,0x18(%rsp)
  0x00007f7570498e1e: mov    %r13,0x10(%rsp)
  0x00007f7570498e23: mov    %r14,0x8(%rsp)
  0x00007f7570498e28: mov    %r15,(%rsp)
  0x00007f7570498e2c: sub    $0x200,%rsp
  0x00007f7570498e33: fxsave64 (%rsp)
  0x00007f7570498e38: mov    %rbx,%rdi
  0x00007f7570498e3b: mov    %rax,%rsi
  0x00007f7570498e3e: callq  0x00007f7585522bca
  0x00007f7570498e43: fxrstor64 (%rsp)
  0x00007f7570498e48: add    $0x200,%rsp
  0x00007f7570498e4f: mov    (%rsp),%r15
  0x00007f7570498e53: mov    0x8(%rsp),%r14
  0x00007f7570498e58: mov    0x10(%rsp),%r13
  0x00007f7570498e5d: mov    0x18(%rsp),%r12
  0x00007f7570498e62: mov    0x20(%rsp),%r11
  0x00007f7570498e67: mov    0x28(%rsp),%r10
  0x00007f7570498e6c: mov    0x30(%rsp),%r9
  0x00007f7570498e71: mov    0x38(%rsp),%r8
  0x00007f7570498e76: mov    0x40(%rsp),%rdi
  0x00007f7570498e7b: mov    0x48(%rsp),%rsi
  0x00007f7570498e80: mov    0x50(%rsp),%rbp
  0x00007f7570498e85: mov    0x60(%rsp),%rbx
  0x00007f7570498e8a: mov    0x68(%rsp),%rdx
  0x00007f7570498e8f: mov    0x70(%rsp),%rcx
  0x00007f7570498e94: mov    0x78(%rsp),%rax
  0x00007f7570498e99: add    $0x80,%rsp
  0x00007f7570498ea0: add    $0x8,%rsp
  0x00007f7570498ea4: popfq  
  0x00007f7570498ea5: mov    %r13,%rsp
  0x00007f7570498ea8: pop    %rax
  0x00007f7570498ea9: mov    %rsp,%r13
  0x00007f7570498eac: sub    $0x20,%rsp
  0x00007f7570498eb0: mov    %rax,(%rsp)
  0x00007f7570498eb4: mov    %rsi,0x10(%rsp)
  0x00007f7570498eb9: mov    %rdx,0x8(%rsp)
  0x00007f7570498ebe: mov    0x40(%rbx),%rcx
  0x00007f7570498ec2: jmpq   *%rcx

AHE@0x00007f75800d5b68: 0xbabe0000 i2c: 0x00007f7570498fa0 c2i: 0x00007f75704990bb c2iUV: 0x00007f757049908e
i2c argument handler #0 for: receiver (ZJ)V (570 bytes generated)
c2i argument handler starts at 0x7f75704990bb
  0x00007f7570498fa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570498fa4: movabs $0x7f757036e3e0,%r11
  0x00007f7570498fae: cmp    %r11,%rax
  0x00007f7570498fb1: jbe    0x00007f7570498fca
  0x00007f7570498fb7: movabs $0x7f757046e3e0,%r11
  0x00007f7570498fc1: cmp    %r11,%rax
  0x00007f7570498fc4: jb     0x00007f7570499067
  0x00007f7570498fca: movabs $0x7f7570369420,%r11
  0x00007f7570498fd4: cmp    %r11,%rax
  0x00007f7570498fd7: jbe    0x00007f7570498ff0
  0x00007f7570498fdd: movabs $0x7f757036de58,%r11
  0x00007f7570498fe7: cmp    %r11,%rax
  0x00007f7570498fea: jb     0x00007f7570499067
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570498ff0: mov    %rsp,-0x28(%rsp)
  0x00007f7570498ff5: sub    $0x80,%rsp
  0x00007f7570498ffc: mov    %rax,0x78(%rsp)
  0x00007f7570499001: mov    %rcx,0x70(%rsp)
  0x00007f7570499006: mov    %rdx,0x68(%rsp)
  0x00007f757049900b: mov    %rbx,0x60(%rsp)
  0x00007f7570499010: mov    %rbp,0x50(%rsp)
  0x00007f7570499015: mov    %rsi,0x48(%rsp)
  0x00007f757049901a: mov    %rdi,0x40(%rsp)
  0x00007f757049901f: mov    %r8,0x38(%rsp)
  0x00007f7570499024: mov    %r9,0x30(%rsp)
  0x00007f7570499029: mov    %r10,0x28(%rsp)
  0x00007f757049902e: mov    %r11,0x20(%rsp)
  0x00007f7570499033: mov    %r12,0x18(%rsp)
  0x00007f7570499038: mov    %r13,0x10(%rsp)
  0x00007f757049903d: mov    %r14,0x8(%rsp)
  0x00007f7570499042: mov    %r15,(%rsp)
  0x00007f7570499046: movabs $0x7f758592f470,%rdi
  0x00007f7570499050: movabs $0x7f7570498ff0,%rsi
  0x00007f757049905a: mov    %rsp,%rdx
  0x00007f757049905d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499061: callq  0x00007f75853729fa
  0x00007f7570499066: hlt    
  ;; } verify_i2ce 
  0x00007f7570499067: mov    %rsp,%r11
  0x00007f757049906a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049906e: push   %rax
  0x00007f757049906f: mov    %r11,%rax
  0x00007f7570499072: mov    0x50(%rbx),%r11
  0x00007f7570499076: mov    0x20(%rax),%rsi
  0x00007f757049907a: mov    0x18(%rax),%edx
  0x00007f757049907d: mov    0x8(%rax),%rcx
  0x00007f7570499081: mov    %rbx,0x258(%r15)
  0x00007f7570499088: mov    %rbx,%rax
  0x00007f757049908b: jmpq   *%r11
  0x00007f757049908e: mov    0x8(%rsi),%ebx
  0x00007f7570499091: shl    $0x3,%rbx
  0x00007f7570499095: cmp    0x10(%rax),%rbx
  0x00007f7570499099: mov    0x8(%rax),%rbx
  0x00007f757049909d: je     0x00007f75704990a8
  0x00007f75704990a3: jmpq   0x00007f757046ec40
  0x00007f75704990a8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704990b0: je     0x00007f75704991ab
  0x00007f75704990b6: jmpq   0x00007f757046ec40
  0x00007f75704990bb: cmpq   $0x0,0x58(%rbx)
  0x00007f75704990c3: je     0x00007f75704991ab
  0x00007f75704990c9: mov    %rsp,%r13
  0x00007f75704990cc: mov    (%rsp),%rax
  0x00007f75704990d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704990d4: pushfq 
  0x00007f75704990d5: sub    $0x8,%rsp
  0x00007f75704990d9: mov    %rsp,-0x28(%rsp)
  0x00007f75704990de: sub    $0x80,%rsp
  0x00007f75704990e5: mov    %rax,0x78(%rsp)
  0x00007f75704990ea: mov    %rcx,0x70(%rsp)
  0x00007f75704990ef: mov    %rdx,0x68(%rsp)
  0x00007f75704990f4: mov    %rbx,0x60(%rsp)
  0x00007f75704990f9: mov    %rbp,0x50(%rsp)
  0x00007f75704990fe: mov    %rsi,0x48(%rsp)
  0x00007f7570499103: mov    %rdi,0x40(%rsp)
  0x00007f7570499108: mov    %r8,0x38(%rsp)
  0x00007f757049910d: mov    %r9,0x30(%rsp)
  0x00007f7570499112: mov    %r10,0x28(%rsp)
  0x00007f7570499117: mov    %r11,0x20(%rsp)
  0x00007f757049911c: mov    %r12,0x18(%rsp)
  0x00007f7570499121: mov    %r13,0x10(%rsp)
  0x00007f7570499126: mov    %r14,0x8(%rsp)
  0x00007f757049912b: mov    %r15,(%rsp)
  0x00007f757049912f: sub    $0x200,%rsp
  0x00007f7570499136: fxsave64 (%rsp)
  0x00007f757049913b: mov    %rbx,%rdi
  0x00007f757049913e: mov    %rax,%rsi
  0x00007f7570499141: callq  0x00007f7585522bca
  0x00007f7570499146: fxrstor64 (%rsp)
  0x00007f757049914b: add    $0x200,%rsp
  0x00007f7570499152: mov    (%rsp),%r15
  0x00007f7570499156: mov    0x8(%rsp),%r14
  0x00007f757049915b: mov    0x10(%rsp),%r13
  0x00007f7570499160: mov    0x18(%rsp),%r12
  0x00007f7570499165: mov    0x20(%rsp),%r11
  0x00007f757049916a: mov    0x28(%rsp),%r10
  0x00007f757049916f: mov    0x30(%rsp),%r9
  0x00007f7570499174: mov    0x38(%rsp),%r8
  0x00007f7570499179: mov    0x40(%rsp),%rdi
  0x00007f757049917e: mov    0x48(%rsp),%rsi
  0x00007f7570499183: mov    0x50(%rsp),%rbp
  0x00007f7570499188: mov    0x60(%rsp),%rbx
  0x00007f757049918d: mov    0x68(%rsp),%rdx
  0x00007f7570499192: mov    0x70(%rsp),%rcx
  0x00007f7570499197: mov    0x78(%rsp),%rax
  0x00007f757049919c: add    $0x80,%rsp
  0x00007f75704991a3: add    $0x8,%rsp
  0x00007f75704991a7: popfq  
  0x00007f75704991a8: mov    %r13,%rsp
  0x00007f75704991ab: pop    %rax
  0x00007f75704991ac: mov    %rsp,%r13
  0x00007f75704991af: sub    $0x30,%rsp
  0x00007f75704991b3: mov    %rax,(%rsp)
  0x00007f75704991b7: mov    %rsi,0x20(%rsp)
  0x00007f75704991bc: mov    %edx,0x18(%rsp)
  0x00007f75704991c0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704991ca: mov    %rax,0x10(%rsp)
  0x00007f75704991cf: mov    %rcx,0x8(%rsp)
  0x00007f75704991d4: mov    0x40(%rbx),%rcx
  0x00007f75704991d8: jmpq   *%rcx

AHE@0x00007f75800d5bb0: 0xbbbebbebe0000000 i2c: 0x00007f75704992a0 c2i: 0x00007f75704993c8 c2iUV: 0x00007f757049939b
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;JJ)V (629 bytes generated)
c2i argument handler starts at 0x7f75704993c8
  0x00007f75704992a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704992a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704992ae: cmp    %r11,%rax
  0x00007f75704992b1: jbe    0x00007f75704992ca
  0x00007f75704992b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704992c1: cmp    %r11,%rax
  0x00007f75704992c4: jb     0x00007f7570499367
  0x00007f75704992ca: movabs $0x7f7570369420,%r11
  0x00007f75704992d4: cmp    %r11,%rax
  0x00007f75704992d7: jbe    0x00007f75704992f0
  0x00007f75704992dd: movabs $0x7f757036de58,%r11
  0x00007f75704992e7: cmp    %r11,%rax
  0x00007f75704992ea: jb     0x00007f7570499367
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704992f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704992f5: sub    $0x80,%rsp
  0x00007f75704992fc: mov    %rax,0x78(%rsp)
  0x00007f7570499301: mov    %rcx,0x70(%rsp)
  0x00007f7570499306: mov    %rdx,0x68(%rsp)
  0x00007f757049930b: mov    %rbx,0x60(%rsp)
  0x00007f7570499310: mov    %rbp,0x50(%rsp)
  0x00007f7570499315: mov    %rsi,0x48(%rsp)
  0x00007f757049931a: mov    %rdi,0x40(%rsp)
  0x00007f757049931f: mov    %r8,0x38(%rsp)
  0x00007f7570499324: mov    %r9,0x30(%rsp)
  0x00007f7570499329: mov    %r10,0x28(%rsp)
  0x00007f757049932e: mov    %r11,0x20(%rsp)
  0x00007f7570499333: mov    %r12,0x18(%rsp)
  0x00007f7570499338: mov    %r13,0x10(%rsp)
  0x00007f757049933d: mov    %r14,0x8(%rsp)
  0x00007f7570499342: mov    %r15,(%rsp)
  0x00007f7570499346: movabs $0x7f758592f470,%rdi
  0x00007f7570499350: movabs $0x7f75704992f0,%rsi
  0x00007f757049935a: mov    %rsp,%rdx
  0x00007f757049935d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499361: callq  0x00007f75853729fa
  0x00007f7570499366: hlt    
  ;; } verify_i2ce 
  0x00007f7570499367: mov    %rsp,%r11
  0x00007f757049936a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049936e: push   %rax
  0x00007f757049936f: mov    %r11,%rax
  0x00007f7570499372: mov    0x50(%rbx),%r11
  0x00007f7570499376: mov    0x48(%rax),%rsi
  0x00007f757049937a: mov    0x40(%rax),%rdx
  0x00007f757049937e: mov    0x30(%rax),%rcx
  0x00007f7570499382: mov    0x28(%rax),%r8
  0x00007f7570499386: mov    0x18(%rax),%r9
  0x00007f757049938a: mov    0x8(%rax),%rdi
  0x00007f757049938e: mov    %rbx,0x258(%r15)
  0x00007f7570499395: mov    %rbx,%rax
  0x00007f7570499398: jmpq   *%r11
  0x00007f757049939b: mov    0x8(%rsi),%ebx
  0x00007f757049939e: shl    $0x3,%rbx
  0x00007f75704993a2: cmp    0x10(%rax),%rbx
  0x00007f75704993a6: mov    0x8(%rax),%rbx
  0x00007f75704993aa: je     0x00007f75704993b5
  0x00007f75704993b0: jmpq   0x00007f757046ec40
  0x00007f75704993b5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704993bd: je     0x00007f75704994b8
  0x00007f75704993c3: jmpq   0x00007f757046ec40
  0x00007f75704993c8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704993d0: je     0x00007f75704994b8
  0x00007f75704993d6: mov    %rsp,%r13
  0x00007f75704993d9: mov    (%rsp),%rax
  0x00007f75704993dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704993e1: pushfq 
  0x00007f75704993e2: sub    $0x8,%rsp
  0x00007f75704993e6: mov    %rsp,-0x28(%rsp)
  0x00007f75704993eb: sub    $0x80,%rsp
  0x00007f75704993f2: mov    %rax,0x78(%rsp)
  0x00007f75704993f7: mov    %rcx,0x70(%rsp)
  0x00007f75704993fc: mov    %rdx,0x68(%rsp)
  0x00007f7570499401: mov    %rbx,0x60(%rsp)
  0x00007f7570499406: mov    %rbp,0x50(%rsp)
  0x00007f757049940b: mov    %rsi,0x48(%rsp)
  0x00007f7570499410: mov    %rdi,0x40(%rsp)
  0x00007f7570499415: mov    %r8,0x38(%rsp)
  0x00007f757049941a: mov    %r9,0x30(%rsp)
  0x00007f757049941f: mov    %r10,0x28(%rsp)
  0x00007f7570499424: mov    %r11,0x20(%rsp)
  0x00007f7570499429: mov    %r12,0x18(%rsp)
  0x00007f757049942e: mov    %r13,0x10(%rsp)
  0x00007f7570499433: mov    %r14,0x8(%rsp)
  0x00007f7570499438: mov    %r15,(%rsp)
  0x00007f757049943c: sub    $0x200,%rsp
  0x00007f7570499443: fxsave64 (%rsp)
  0x00007f7570499448: mov    %rbx,%rdi
  0x00007f757049944b: mov    %rax,%rsi
  0x00007f757049944e: callq  0x00007f7585522bca
  0x00007f7570499453: fxrstor64 (%rsp)
  0x00007f7570499458: add    $0x200,%rsp
  0x00007f757049945f: mov    (%rsp),%r15
  0x00007f7570499463: mov    0x8(%rsp),%r14
  0x00007f7570499468: mov    0x10(%rsp),%r13
  0x00007f757049946d: mov    0x18(%rsp),%r12
  0x00007f7570499472: mov    0x20(%rsp),%r11
  0x00007f7570499477: mov    0x28(%rsp),%r10
  0x00007f757049947c: mov    0x30(%rsp),%r9
  0x00007f7570499481: mov    0x38(%rsp),%r8
  0x00007f7570499486: mov    0x40(%rsp),%rdi
  0x00007f757049948b: mov    0x48(%rsp),%rsi
  0x00007f7570499490: mov    0x50(%rsp),%rbp
  0x00007f7570499495: mov    0x60(%rsp),%rbx
  0x00007f757049949a: mov    0x68(%rsp),%rdx
  0x00007f757049949f: mov    0x70(%rsp),%rcx
  0x00007f75704994a4: mov    0x78(%rsp),%rax
  0x00007f75704994a9: add    $0x80,%rsp
  0x00007f75704994b0: add    $0x8,%rsp
  0x00007f75704994b4: popfq  
  0x00007f75704994b5: mov    %r13,%rsp
  0x00007f75704994b8: pop    %rax
  0x00007f75704994b9: mov    %rsp,%r13
  0x00007f75704994bc: sub    $0x50,%rsp
  0x00007f75704994c0: mov    %rax,(%rsp)
  0x00007f75704994c4: mov    %rsi,0x48(%rsp)
  0x00007f75704994c9: mov    %rdx,0x40(%rsp)
  0x00007f75704994ce: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704994d8: mov    %rax,0x38(%rsp)
  0x00007f75704994dd: mov    %rcx,0x30(%rsp)
  0x00007f75704994e2: mov    %r8,0x28(%rsp)
  0x00007f75704994e7: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704994f1: mov    %rax,0x20(%rsp)
  0x00007f75704994f6: mov    %r9,0x18(%rsp)
  0x00007f75704994fb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570499505: mov    %rax,0x10(%rsp)
  0x00007f757049950a: mov    %rdi,0x8(%rsp)
  0x00007f757049950f: mov    0x40(%rbx),%rcx
  0x00007f7570499513: jmpq   *%rcx

AHE@0x00007f75800d5bf8: 0xbbebebe0 i2c: 0x00007f75704995e0 c2i: 0x00007f7570499700 c2iUV: 0x00007f75704996d3
i2c argument handler #0 for: receiver (JJJ)V (611 bytes generated)
c2i argument handler starts at 0x7f7570499700
  0x00007f75704995e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704995e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704995ee: cmp    %r11,%rax
  0x00007f75704995f1: jbe    0x00007f757049960a
  0x00007f75704995f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570499601: cmp    %r11,%rax
  0x00007f7570499604: jb     0x00007f75704996a7
  0x00007f757049960a: movabs $0x7f7570369420,%r11
  0x00007f7570499614: cmp    %r11,%rax
  0x00007f7570499617: jbe    0x00007f7570499630
  0x00007f757049961d: movabs $0x7f757036de58,%r11
  0x00007f7570499627: cmp    %r11,%rax
  0x00007f757049962a: jb     0x00007f75704996a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570499630: mov    %rsp,-0x28(%rsp)
  0x00007f7570499635: sub    $0x80,%rsp
  0x00007f757049963c: mov    %rax,0x78(%rsp)
  0x00007f7570499641: mov    %rcx,0x70(%rsp)
  0x00007f7570499646: mov    %rdx,0x68(%rsp)
  0x00007f757049964b: mov    %rbx,0x60(%rsp)
  0x00007f7570499650: mov    %rbp,0x50(%rsp)
  0x00007f7570499655: mov    %rsi,0x48(%rsp)
  0x00007f757049965a: mov    %rdi,0x40(%rsp)
  0x00007f757049965f: mov    %r8,0x38(%rsp)
  0x00007f7570499664: mov    %r9,0x30(%rsp)
  0x00007f7570499669: mov    %r10,0x28(%rsp)
  0x00007f757049966e: mov    %r11,0x20(%rsp)
  0x00007f7570499673: mov    %r12,0x18(%rsp)
  0x00007f7570499678: mov    %r13,0x10(%rsp)
  0x00007f757049967d: mov    %r14,0x8(%rsp)
  0x00007f7570499682: mov    %r15,(%rsp)
  0x00007f7570499686: movabs $0x7f758592f470,%rdi
  0x00007f7570499690: movabs $0x7f7570499630,%rsi
  0x00007f757049969a: mov    %rsp,%rdx
  0x00007f757049969d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704996a1: callq  0x00007f75853729fa
  0x00007f75704996a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704996a7: mov    %rsp,%r11
  0x00007f75704996aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704996ae: push   %rax
  0x00007f75704996af: mov    %r11,%rax
  0x00007f75704996b2: mov    0x50(%rbx),%r11
  0x00007f75704996b6: mov    0x38(%rax),%rsi
  0x00007f75704996ba: mov    0x28(%rax),%rdx
  0x00007f75704996be: mov    0x18(%rax),%rcx
  0x00007f75704996c2: mov    0x8(%rax),%r8
  0x00007f75704996c6: mov    %rbx,0x258(%r15)
  0x00007f75704996cd: mov    %rbx,%rax
  0x00007f75704996d0: jmpq   *%r11
  0x00007f75704996d3: mov    0x8(%rsi),%ebx
  0x00007f75704996d6: shl    $0x3,%rbx
  0x00007f75704996da: cmp    0x10(%rax),%rbx
  0x00007f75704996de: mov    0x8(%rax),%rbx
  0x00007f75704996e2: je     0x00007f75704996ed
  0x00007f75704996e8: jmpq   0x00007f757046ec40
  0x00007f75704996ed: cmpq   $0x0,0x58(%rbx)
  0x00007f75704996f5: je     0x00007f75704997f0
  0x00007f75704996fb: jmpq   0x00007f757046ec40
  0x00007f7570499700: cmpq   $0x0,0x58(%rbx)
  0x00007f7570499708: je     0x00007f75704997f0
  0x00007f757049970e: mov    %rsp,%r13
  0x00007f7570499711: mov    (%rsp),%rax
  0x00007f7570499715: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499719: pushfq 
  0x00007f757049971a: sub    $0x8,%rsp
  0x00007f757049971e: mov    %rsp,-0x28(%rsp)
  0x00007f7570499723: sub    $0x80,%rsp
  0x00007f757049972a: mov    %rax,0x78(%rsp)
  0x00007f757049972f: mov    %rcx,0x70(%rsp)
  0x00007f7570499734: mov    %rdx,0x68(%rsp)
  0x00007f7570499739: mov    %rbx,0x60(%rsp)
  0x00007f757049973e: mov    %rbp,0x50(%rsp)
  0x00007f7570499743: mov    %rsi,0x48(%rsp)
  0x00007f7570499748: mov    %rdi,0x40(%rsp)
  0x00007f757049974d: mov    %r8,0x38(%rsp)
  0x00007f7570499752: mov    %r9,0x30(%rsp)
  0x00007f7570499757: mov    %r10,0x28(%rsp)
  0x00007f757049975c: mov    %r11,0x20(%rsp)
  0x00007f7570499761: mov    %r12,0x18(%rsp)
  0x00007f7570499766: mov    %r13,0x10(%rsp)
  0x00007f757049976b: mov    %r14,0x8(%rsp)
  0x00007f7570499770: mov    %r15,(%rsp)
  0x00007f7570499774: sub    $0x200,%rsp
  0x00007f757049977b: fxsave64 (%rsp)
  0x00007f7570499780: mov    %rbx,%rdi
  0x00007f7570499783: mov    %rax,%rsi
  0x00007f7570499786: callq  0x00007f7585522bca
  0x00007f757049978b: fxrstor64 (%rsp)
  0x00007f7570499790: add    $0x200,%rsp
  0x00007f7570499797: mov    (%rsp),%r15
  0x00007f757049979b: mov    0x8(%rsp),%r14
  0x00007f75704997a0: mov    0x10(%rsp),%r13
  0x00007f75704997a5: mov    0x18(%rsp),%r12
  0x00007f75704997aa: mov    0x20(%rsp),%r11
  0x00007f75704997af: mov    0x28(%rsp),%r10
  0x00007f75704997b4: mov    0x30(%rsp),%r9
  0x00007f75704997b9: mov    0x38(%rsp),%r8
  0x00007f75704997be: mov    0x40(%rsp),%rdi
  0x00007f75704997c3: mov    0x48(%rsp),%rsi
  0x00007f75704997c8: mov    0x50(%rsp),%rbp
  0x00007f75704997cd: mov    0x60(%rsp),%rbx
  0x00007f75704997d2: mov    0x68(%rsp),%rdx
  0x00007f75704997d7: mov    0x70(%rsp),%rcx
  0x00007f75704997dc: mov    0x78(%rsp),%rax
  0x00007f75704997e1: add    $0x80,%rsp
  0x00007f75704997e8: add    $0x8,%rsp
  0x00007f75704997ec: popfq  
  0x00007f75704997ed: mov    %r13,%rsp
  0x00007f75704997f0: pop    %rax
  0x00007f75704997f1: mov    %rsp,%r13
  0x00007f75704997f4: sub    $0x40,%rsp
  0x00007f75704997f8: mov    %rax,(%rsp)
  0x00007f75704997fc: mov    %rsi,0x38(%rsp)
  0x00007f7570499801: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049980b: mov    %rax,0x30(%rsp)
  0x00007f7570499810: mov    %rdx,0x28(%rsp)
  0x00007f7570499815: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757049981f: mov    %rax,0x20(%rsp)
  0x00007f7570499824: mov    %rcx,0x18(%rsp)
  0x00007f7570499829: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570499833: mov    %rax,0x10(%rsp)
  0x00007f7570499838: mov    %r8,0x8(%rsp)
  0x00007f757049983d: mov    0x40(%rbx),%rcx
  0x00007f7570499841: jmpq   *%rcx

AHE@0x00007f75800d5c40: 0xbb000000 i2c: 0x00007f7570499920 c2i: 0x00007f7570499a38 c2iUV: 0x00007f7570499a0b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f7570499a38
  0x00007f7570499920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570499924: movabs $0x7f757036e3e0,%r11
  0x00007f757049992e: cmp    %r11,%rax
  0x00007f7570499931: jbe    0x00007f757049994a
  0x00007f7570499937: movabs $0x7f757046e3e0,%r11
  0x00007f7570499941: cmp    %r11,%rax
  0x00007f7570499944: jb     0x00007f75704999e7
  0x00007f757049994a: movabs $0x7f7570369420,%r11
  0x00007f7570499954: cmp    %r11,%rax
  0x00007f7570499957: jbe    0x00007f7570499970
  0x00007f757049995d: movabs $0x7f757036de58,%r11
  0x00007f7570499967: cmp    %r11,%rax
  0x00007f757049996a: jb     0x00007f75704999e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570499970: mov    %rsp,-0x28(%rsp)
  0x00007f7570499975: sub    $0x80,%rsp
  0x00007f757049997c: mov    %rax,0x78(%rsp)
  0x00007f7570499981: mov    %rcx,0x70(%rsp)
  0x00007f7570499986: mov    %rdx,0x68(%rsp)
  0x00007f757049998b: mov    %rbx,0x60(%rsp)
  0x00007f7570499990: mov    %rbp,0x50(%rsp)
  0x00007f7570499995: mov    %rsi,0x48(%rsp)
  0x00007f757049999a: mov    %rdi,0x40(%rsp)
  0x00007f757049999f: mov    %r8,0x38(%rsp)
  0x00007f75704999a4: mov    %r9,0x30(%rsp)
  0x00007f75704999a9: mov    %r10,0x28(%rsp)
  0x00007f75704999ae: mov    %r11,0x20(%rsp)
  0x00007f75704999b3: mov    %r12,0x18(%rsp)
  0x00007f75704999b8: mov    %r13,0x10(%rsp)
  0x00007f75704999bd: mov    %r14,0x8(%rsp)
  0x00007f75704999c2: mov    %r15,(%rsp)
  0x00007f75704999c6: movabs $0x7f758592f470,%rdi
  0x00007f75704999d0: movabs $0x7f7570499970,%rsi
  0x00007f75704999da: mov    %rsp,%rdx
  0x00007f75704999dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704999e1: callq  0x00007f75853729fa
  0x00007f75704999e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704999e7: mov    %rsp,%r11
  0x00007f75704999ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704999ee: push   %rax
  0x00007f75704999ef: mov    %r11,%rax
  0x00007f75704999f2: mov    0x50(%rbx),%r11
  0x00007f75704999f6: mov    0x10(%rax),%rsi
  0x00007f75704999fa: mov    0x8(%rax),%rdx
  0x00007f75704999fe: mov    %rbx,0x258(%r15)
  0x00007f7570499a05: mov    %rbx,%rax
  0x00007f7570499a08: jmpq   *%r11
  0x00007f7570499a0b: mov    0x8(%rsi),%ebx
  0x00007f7570499a0e: shl    $0x3,%rbx
  0x00007f7570499a12: cmp    0x10(%rax),%rbx
  0x00007f7570499a16: mov    0x8(%rax),%rbx
  0x00007f7570499a1a: je     0x00007f7570499a25
  0x00007f7570499a20: jmpq   0x00007f757046ec40
  0x00007f7570499a25: cmpq   $0x0,0x58(%rbx)
  0x00007f7570499a2d: je     0x00007f7570499b28
  0x00007f7570499a33: jmpq   0x00007f757046ec40
  0x00007f7570499a38: cmpq   $0x0,0x58(%rbx)
  0x00007f7570499a40: je     0x00007f7570499b28
  0x00007f7570499a46: mov    %rsp,%r13
  0x00007f7570499a49: mov    (%rsp),%rax
  0x00007f7570499a4d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499a51: pushfq 
  0x00007f7570499a52: sub    $0x8,%rsp
  0x00007f7570499a56: mov    %rsp,-0x28(%rsp)
  0x00007f7570499a5b: sub    $0x80,%rsp
  0x00007f7570499a62: mov    %rax,0x78(%rsp)
  0x00007f7570499a67: mov    %rcx,0x70(%rsp)
  0x00007f7570499a6c: mov    %rdx,0x68(%rsp)
  0x00007f7570499a71: mov    %rbx,0x60(%rsp)
  0x00007f7570499a76: mov    %rbp,0x50(%rsp)
  0x00007f7570499a7b: mov    %rsi,0x48(%rsp)
  0x00007f7570499a80: mov    %rdi,0x40(%rsp)
  0x00007f7570499a85: mov    %r8,0x38(%rsp)
  0x00007f7570499a8a: mov    %r9,0x30(%rsp)
  0x00007f7570499a8f: mov    %r10,0x28(%rsp)
  0x00007f7570499a94: mov    %r11,0x20(%rsp)
  0x00007f7570499a99: mov    %r12,0x18(%rsp)
  0x00007f7570499a9e: mov    %r13,0x10(%rsp)
  0x00007f7570499aa3: mov    %r14,0x8(%rsp)
  0x00007f7570499aa8: mov    %r15,(%rsp)
  0x00007f7570499aac: sub    $0x200,%rsp
  0x00007f7570499ab3: fxsave64 (%rsp)
  0x00007f7570499ab8: mov    %rbx,%rdi
  0x00007f7570499abb: mov    %rax,%rsi
  0x00007f7570499abe: callq  0x00007f7585522bca
  0x00007f7570499ac3: fxrstor64 (%rsp)
  0x00007f7570499ac8: add    $0x200,%rsp
  0x00007f7570499acf: mov    (%rsp),%r15
  0x00007f7570499ad3: mov    0x8(%rsp),%r14
  0x00007f7570499ad8: mov    0x10(%rsp),%r13
  0x00007f7570499add: mov    0x18(%rsp),%r12
  0x00007f7570499ae2: mov    0x20(%rsp),%r11
  0x00007f7570499ae7: mov    0x28(%rsp),%r10
  0x00007f7570499aec: mov    0x30(%rsp),%r9
  0x00007f7570499af1: mov    0x38(%rsp),%r8
  0x00007f7570499af6: mov    0x40(%rsp),%rdi
  0x00007f7570499afb: mov    0x48(%rsp),%rsi
  0x00007f7570499b00: mov    0x50(%rsp),%rbp
  0x00007f7570499b05: mov    0x60(%rsp),%rbx
  0x00007f7570499b0a: mov    0x68(%rsp),%rdx
  0x00007f7570499b0f: mov    0x70(%rsp),%rcx
  0x00007f7570499b14: mov    0x78(%rsp),%rax
  0x00007f7570499b19: add    $0x80,%rsp
  0x00007f7570499b20: add    $0x8,%rsp
  0x00007f7570499b24: popfq  
  0x00007f7570499b25: mov    %r13,%rsp
  0x00007f7570499b28: pop    %rax
  0x00007f7570499b29: mov    %rsp,%r13
  0x00007f7570499b2c: sub    $0x20,%rsp
  0x00007f7570499b30: mov    %rax,(%rsp)
  0x00007f7570499b34: mov    %rsi,0x10(%rsp)
  0x00007f7570499b39: mov    %rdx,0x8(%rsp)
  0x00007f7570499b3e: mov    0x40(%rbx),%rcx
  0x00007f7570499b42: jmpq   *%rcx

AHE@0x00007f75800d5c88: 0x i2c: 0x00007f7570499c20 c2i: 0x00007f7570499d30 c2iUV: 0x00007f7570499d03
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570499d30
  0x00007f7570499c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570499c24: movabs $0x7f757036e3e0,%r11
  0x00007f7570499c2e: cmp    %r11,%rax
  0x00007f7570499c31: jbe    0x00007f7570499c4a
  0x00007f7570499c37: movabs $0x7f757046e3e0,%r11
  0x00007f7570499c41: cmp    %r11,%rax
  0x00007f7570499c44: jb     0x00007f7570499ce7
  0x00007f7570499c4a: movabs $0x7f7570369420,%r11
  0x00007f7570499c54: cmp    %r11,%rax
  0x00007f7570499c57: jbe    0x00007f7570499c70
  0x00007f7570499c5d: movabs $0x7f757036de58,%r11
  0x00007f7570499c67: cmp    %r11,%rax
  0x00007f7570499c6a: jb     0x00007f7570499ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570499c70: mov    %rsp,-0x28(%rsp)
  0x00007f7570499c75: sub    $0x80,%rsp
  0x00007f7570499c7c: mov    %rax,0x78(%rsp)
  0x00007f7570499c81: mov    %rcx,0x70(%rsp)
  0x00007f7570499c86: mov    %rdx,0x68(%rsp)
  0x00007f7570499c8b: mov    %rbx,0x60(%rsp)
  0x00007f7570499c90: mov    %rbp,0x50(%rsp)
  0x00007f7570499c95: mov    %rsi,0x48(%rsp)
  0x00007f7570499c9a: mov    %rdi,0x40(%rsp)
  0x00007f7570499c9f: mov    %r8,0x38(%rsp)
  0x00007f7570499ca4: mov    %r9,0x30(%rsp)
  0x00007f7570499ca9: mov    %r10,0x28(%rsp)
  0x00007f7570499cae: mov    %r11,0x20(%rsp)
  0x00007f7570499cb3: mov    %r12,0x18(%rsp)
  0x00007f7570499cb8: mov    %r13,0x10(%rsp)
  0x00007f7570499cbd: mov    %r14,0x8(%rsp)
  0x00007f7570499cc2: mov    %r15,(%rsp)
  0x00007f7570499cc6: movabs $0x7f758592f470,%rdi
  0x00007f7570499cd0: movabs $0x7f7570499c70,%rsi
  0x00007f7570499cda: mov    %rsp,%rdx
  0x00007f7570499cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499ce1: callq  0x00007f75853729fa
  0x00007f7570499ce6: hlt    
  ;; } verify_i2ce 
  0x00007f7570499ce7: mov    %rsp,%r11
  0x00007f7570499cea: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499cee: push   %rax
  0x00007f7570499cef: mov    %r11,%rax
  0x00007f7570499cf2: mov    0x50(%rbx),%r11
  0x00007f7570499cf6: mov    %rbx,0x258(%r15)
  0x00007f7570499cfd: mov    %rbx,%rax
  0x00007f7570499d00: jmpq   *%r11
  0x00007f7570499d03: mov    0x8(%rsi),%ebx
  0x00007f7570499d06: shl    $0x3,%rbx
  0x00007f7570499d0a: cmp    0x10(%rax),%rbx
  0x00007f7570499d0e: mov    0x8(%rax),%rbx
  0x00007f7570499d12: je     0x00007f7570499d1d
  0x00007f7570499d18: jmpq   0x00007f757046ec40
  0x00007f7570499d1d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570499d25: je     0x00007f7570499e20
  0x00007f7570499d2b: jmpq   0x00007f757046ec40
  0x00007f7570499d30: cmpq   $0x0,0x58(%rbx)
  0x00007f7570499d38: je     0x00007f7570499e20
  0x00007f7570499d3e: mov    %rsp,%r13
  0x00007f7570499d41: mov    (%rsp),%rax
  0x00007f7570499d45: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499d49: pushfq 
  0x00007f7570499d4a: sub    $0x8,%rsp
  0x00007f7570499d4e: mov    %rsp,-0x28(%rsp)
  0x00007f7570499d53: sub    $0x80,%rsp
  0x00007f7570499d5a: mov    %rax,0x78(%rsp)
  0x00007f7570499d5f: mov    %rcx,0x70(%rsp)
  0x00007f7570499d64: mov    %rdx,0x68(%rsp)
  0x00007f7570499d69: mov    %rbx,0x60(%rsp)
  0x00007f7570499d6e: mov    %rbp,0x50(%rsp)
  0x00007f7570499d73: mov    %rsi,0x48(%rsp)
  0x00007f7570499d78: mov    %rdi,0x40(%rsp)
  0x00007f7570499d7d: mov    %r8,0x38(%rsp)
  0x00007f7570499d82: mov    %r9,0x30(%rsp)
  0x00007f7570499d87: mov    %r10,0x28(%rsp)
  0x00007f7570499d8c: mov    %r11,0x20(%rsp)
  0x00007f7570499d91: mov    %r12,0x18(%rsp)
  0x00007f7570499d96: mov    %r13,0x10(%rsp)
  0x00007f7570499d9b: mov    %r14,0x8(%rsp)
  0x00007f7570499da0: mov    %r15,(%rsp)
  0x00007f7570499da4: sub    $0x200,%rsp
  0x00007f7570499dab: fxsave64 (%rsp)
  0x00007f7570499db0: mov    %rbx,%rdi
  0x00007f7570499db3: mov    %rax,%rsi
  0x00007f7570499db6: callq  0x00007f7585522bca
  0x00007f7570499dbb: fxrstor64 (%rsp)
  0x00007f7570499dc0: add    $0x200,%rsp
  0x00007f7570499dc7: mov    (%rsp),%r15
  0x00007f7570499dcb: mov    0x8(%rsp),%r14
  0x00007f7570499dd0: mov    0x10(%rsp),%r13
  0x00007f7570499dd5: mov    0x18(%rsp),%r12
  0x00007f7570499dda: mov    0x20(%rsp),%r11
  0x00007f7570499ddf: mov    0x28(%rsp),%r10
  0x00007f7570499de4: mov    0x30(%rsp),%r9
  0x00007f7570499de9: mov    0x38(%rsp),%r8
  0x00007f7570499dee: mov    0x40(%rsp),%rdi
  0x00007f7570499df3: mov    0x48(%rsp),%rsi
  0x00007f7570499df8: mov    0x50(%rsp),%rbp
  0x00007f7570499dfd: mov    0x60(%rsp),%rbx
  0x00007f7570499e02: mov    0x68(%rsp),%rdx
  0x00007f7570499e07: mov    0x70(%rsp),%rcx
  0x00007f7570499e0c: mov    0x78(%rsp),%rax
  0x00007f7570499e11: add    $0x80,%rsp
  0x00007f7570499e18: add    $0x8,%rsp
  0x00007f7570499e1c: popfq  
  0x00007f7570499e1d: mov    %r13,%rsp
  0x00007f7570499e20: pop    %rax
  0x00007f7570499e21: mov    %rsp,%r13
  0x00007f7570499e24: sub    $0x10,%rsp
  0x00007f7570499e28: mov    %rax,(%rsp)
  0x00007f7570499e2c: mov    0x40(%rbx),%rcx
  0x00007f7570499e30: jmpq   *%rcx

AHE@0x00007f75800d5cd0: 0x i2c: 0x00007f7570499ee0 c2i: 0x00007f7570499ff0 c2iUV: 0x00007f7570499fc3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f7570499ff0
  0x00007f7570499ee0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570499ee4: movabs $0x7f757036e3e0,%r11
  0x00007f7570499eee: cmp    %r11,%rax
  0x00007f7570499ef1: jbe    0x00007f7570499f0a
  0x00007f7570499ef7: movabs $0x7f757046e3e0,%r11
  0x00007f7570499f01: cmp    %r11,%rax
  0x00007f7570499f04: jb     0x00007f7570499fa7
  0x00007f7570499f0a: movabs $0x7f7570369420,%r11
  0x00007f7570499f14: cmp    %r11,%rax
  0x00007f7570499f17: jbe    0x00007f7570499f30
  0x00007f7570499f1d: movabs $0x7f757036de58,%r11
  0x00007f7570499f27: cmp    %r11,%rax
  0x00007f7570499f2a: jb     0x00007f7570499fa7
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570499f30: mov    %rsp,-0x28(%rsp)
  0x00007f7570499f35: sub    $0x80,%rsp
  0x00007f7570499f3c: mov    %rax,0x78(%rsp)
  0x00007f7570499f41: mov    %rcx,0x70(%rsp)
  0x00007f7570499f46: mov    %rdx,0x68(%rsp)
  0x00007f7570499f4b: mov    %rbx,0x60(%rsp)
  0x00007f7570499f50: mov    %rbp,0x50(%rsp)
  0x00007f7570499f55: mov    %rsi,0x48(%rsp)
  0x00007f7570499f5a: mov    %rdi,0x40(%rsp)
  0x00007f7570499f5f: mov    %r8,0x38(%rsp)
  0x00007f7570499f64: mov    %r9,0x30(%rsp)
  0x00007f7570499f69: mov    %r10,0x28(%rsp)
  0x00007f7570499f6e: mov    %r11,0x20(%rsp)
  0x00007f7570499f73: mov    %r12,0x18(%rsp)
  0x00007f7570499f78: mov    %r13,0x10(%rsp)
  0x00007f7570499f7d: mov    %r14,0x8(%rsp)
  0x00007f7570499f82: mov    %r15,(%rsp)
  0x00007f7570499f86: movabs $0x7f758592f470,%rdi
  0x00007f7570499f90: movabs $0x7f7570499f30,%rsi
  0x00007f7570499f9a: mov    %rsp,%rdx
  0x00007f7570499f9d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499fa1: callq  0x00007f75853729fa
  0x00007f7570499fa6: hlt    
  ;; } verify_i2ce 
  0x00007f7570499fa7: mov    %rsp,%r11
  0x00007f7570499faa: and    $0xfffffffffffffff0,%rsp
  0x00007f7570499fae: push   %rax
  0x00007f7570499faf: mov    %r11,%rax
  0x00007f7570499fb2: mov    0x50(%rbx),%r11
  0x00007f7570499fb6: mov    %rbx,0x258(%r15)
  0x00007f7570499fbd: mov    %rbx,%rax
  0x00007f7570499fc0: jmpq   *%r11
  0x00007f7570499fc3: mov    0x8(%rsi),%ebx
  0x00007f7570499fc6: shl    $0x3,%rbx
  0x00007f7570499fca: cmp    0x10(%rax),%rbx
  0x00007f7570499fce: mov    0x8(%rax),%rbx
  0x00007f7570499fd2: je     0x00007f7570499fdd
  0x00007f7570499fd8: jmpq   0x00007f757046ec40
  0x00007f7570499fdd: cmpq   $0x0,0x58(%rbx)
  0x00007f7570499fe5: je     0x00007f757049a0e0
  0x00007f7570499feb: jmpq   0x00007f757046ec40
  0x00007f7570499ff0: cmpq   $0x0,0x58(%rbx)
  0x00007f7570499ff8: je     0x00007f757049a0e0
  0x00007f7570499ffe: mov    %rsp,%r13
  0x00007f757049a001: mov    (%rsp),%rax
  0x00007f757049a005: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a009: pushfq 
  0x00007f757049a00a: sub    $0x8,%rsp
  0x00007f757049a00e: mov    %rsp,-0x28(%rsp)
  0x00007f757049a013: sub    $0x80,%rsp
  0x00007f757049a01a: mov    %rax,0x78(%rsp)
  0x00007f757049a01f: mov    %rcx,0x70(%rsp)
  0x00007f757049a024: mov    %rdx,0x68(%rsp)
  0x00007f757049a029: mov    %rbx,0x60(%rsp)
  0x00007f757049a02e: mov    %rbp,0x50(%rsp)
  0x00007f757049a033: mov    %rsi,0x48(%rsp)
  0x00007f757049a038: mov    %rdi,0x40(%rsp)
  0x00007f757049a03d: mov    %r8,0x38(%rsp)
  0x00007f757049a042: mov    %r9,0x30(%rsp)
  0x00007f757049a047: mov    %r10,0x28(%rsp)
  0x00007f757049a04c: mov    %r11,0x20(%rsp)
  0x00007f757049a051: mov    %r12,0x18(%rsp)
  0x00007f757049a056: mov    %r13,0x10(%rsp)
  0x00007f757049a05b: mov    %r14,0x8(%rsp)
  0x00007f757049a060: mov    %r15,(%rsp)
  0x00007f757049a064: sub    $0x200,%rsp
  0x00007f757049a06b: fxsave64 (%rsp)
  0x00007f757049a070: mov    %rbx,%rdi
  0x00007f757049a073: mov    %rax,%rsi
  0x00007f757049a076: callq  0x00007f7585522bca
  0x00007f757049a07b: fxrstor64 (%rsp)
  0x00007f757049a080: add    $0x200,%rsp
  0x00007f757049a087: mov    (%rsp),%r15
  0x00007f757049a08b: mov    0x8(%rsp),%r14
  0x00007f757049a090: mov    0x10(%rsp),%r13
  0x00007f757049a095: mov    0x18(%rsp),%r12
  0x00007f757049a09a: mov    0x20(%rsp),%r11
  0x00007f757049a09f: mov    0x28(%rsp),%r10
  0x00007f757049a0a4: mov    0x30(%rsp),%r9
  0x00007f757049a0a9: mov    0x38(%rsp),%r8
  0x00007f757049a0ae: mov    0x40(%rsp),%rdi
  0x00007f757049a0b3: mov    0x48(%rsp),%rsi
  0x00007f757049a0b8: mov    0x50(%rsp),%rbp
  0x00007f757049a0bd: mov    0x60(%rsp),%rbx
  0x00007f757049a0c2: mov    0x68(%rsp),%rdx
  0x00007f757049a0c7: mov    0x70(%rsp),%rcx
  0x00007f757049a0cc: mov    0x78(%rsp),%rax
  0x00007f757049a0d1: add    $0x80,%rsp
  0x00007f757049a0d8: add    $0x8,%rsp
  0x00007f757049a0dc: popfq  
  0x00007f757049a0dd: mov    %r13,%rsp
  0x00007f757049a0e0: pop    %rax
  0x00007f757049a0e1: mov    %rsp,%r13
  0x00007f757049a0e4: sub    $0x10,%rsp
  0x00007f757049a0e8: mov    %rax,(%rsp)
  0x00007f757049a0ec: mov    0x40(%rbx),%rcx
  0x00007f757049a0f0: jmpq   *%rcx

AHE@0x00007f75800d5d18: 0xb0000000 i2c: 0x00007f757049a1a0 c2i: 0x00007f757049a2b4 c2iUV: 0x00007f757049a287
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757049a2b4
  0x00007f757049a1a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049a1a4: movabs $0x7f757036e3e0,%r11
  0x00007f757049a1ae: cmp    %r11,%rax
  0x00007f757049a1b1: jbe    0x00007f757049a1ca
  0x00007f757049a1b7: movabs $0x7f757046e3e0,%r11
  0x00007f757049a1c1: cmp    %r11,%rax
  0x00007f757049a1c4: jb     0x00007f757049a267
  0x00007f757049a1ca: movabs $0x7f7570369420,%r11
  0x00007f757049a1d4: cmp    %r11,%rax
  0x00007f757049a1d7: jbe    0x00007f757049a1f0
  0x00007f757049a1dd: movabs $0x7f757036de58,%r11
  0x00007f757049a1e7: cmp    %r11,%rax
  0x00007f757049a1ea: jb     0x00007f757049a267
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049a1f0: mov    %rsp,-0x28(%rsp)
  0x00007f757049a1f5: sub    $0x80,%rsp
  0x00007f757049a1fc: mov    %rax,0x78(%rsp)
  0x00007f757049a201: mov    %rcx,0x70(%rsp)
  0x00007f757049a206: mov    %rdx,0x68(%rsp)
  0x00007f757049a20b: mov    %rbx,0x60(%rsp)
  0x00007f757049a210: mov    %rbp,0x50(%rsp)
  0x00007f757049a215: mov    %rsi,0x48(%rsp)
  0x00007f757049a21a: mov    %rdi,0x40(%rsp)
  0x00007f757049a21f: mov    %r8,0x38(%rsp)
  0x00007f757049a224: mov    %r9,0x30(%rsp)
  0x00007f757049a229: mov    %r10,0x28(%rsp)
  0x00007f757049a22e: mov    %r11,0x20(%rsp)
  0x00007f757049a233: mov    %r12,0x18(%rsp)
  0x00007f757049a238: mov    %r13,0x10(%rsp)
  0x00007f757049a23d: mov    %r14,0x8(%rsp)
  0x00007f757049a242: mov    %r15,(%rsp)
  0x00007f757049a246: movabs $0x7f758592f470,%rdi
  0x00007f757049a250: movabs $0x7f757049a1f0,%rsi
  0x00007f757049a25a: mov    %rsp,%rdx
  0x00007f757049a25d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a261: callq  0x00007f75853729fa
  0x00007f757049a266: hlt    
  ;; } verify_i2ce 
  0x00007f757049a267: mov    %rsp,%r11
  0x00007f757049a26a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a26e: push   %rax
  0x00007f757049a26f: mov    %r11,%rax
  0x00007f757049a272: mov    0x50(%rbx),%r11
  0x00007f757049a276: mov    0x8(%rax),%rsi
  0x00007f757049a27a: mov    %rbx,0x258(%r15)
  0x00007f757049a281: mov    %rbx,%rax
  0x00007f757049a284: jmpq   *%r11
  0x00007f757049a287: mov    0x8(%rsi),%ebx
  0x00007f757049a28a: shl    $0x3,%rbx
  0x00007f757049a28e: cmp    0x10(%rax),%rbx
  0x00007f757049a292: mov    0x8(%rax),%rbx
  0x00007f757049a296: je     0x00007f757049a2a1
  0x00007f757049a29c: jmpq   0x00007f757046ec40
  0x00007f757049a2a1: cmpq   $0x0,0x58(%rbx)
  0x00007f757049a2a9: je     0x00007f757049a3a4
  0x00007f757049a2af: jmpq   0x00007f757046ec40
  0x00007f757049a2b4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049a2bc: je     0x00007f757049a3a4
  0x00007f757049a2c2: mov    %rsp,%r13
  0x00007f757049a2c5: mov    (%rsp),%rax
  0x00007f757049a2c9: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a2cd: pushfq 
  0x00007f757049a2ce: sub    $0x8,%rsp
  0x00007f757049a2d2: mov    %rsp,-0x28(%rsp)
  0x00007f757049a2d7: sub    $0x80,%rsp
  0x00007f757049a2de: mov    %rax,0x78(%rsp)
  0x00007f757049a2e3: mov    %rcx,0x70(%rsp)
  0x00007f757049a2e8: mov    %rdx,0x68(%rsp)
  0x00007f757049a2ed: mov    %rbx,0x60(%rsp)
  0x00007f757049a2f2: mov    %rbp,0x50(%rsp)
  0x00007f757049a2f7: mov    %rsi,0x48(%rsp)
  0x00007f757049a2fc: mov    %rdi,0x40(%rsp)
  0x00007f757049a301: mov    %r8,0x38(%rsp)
  0x00007f757049a306: mov    %r9,0x30(%rsp)
  0x00007f757049a30b: mov    %r10,0x28(%rsp)
  0x00007f757049a310: mov    %r11,0x20(%rsp)
  0x00007f757049a315: mov    %r12,0x18(%rsp)
  0x00007f757049a31a: mov    %r13,0x10(%rsp)
  0x00007f757049a31f: mov    %r14,0x8(%rsp)
  0x00007f757049a324: mov    %r15,(%rsp)
  0x00007f757049a328: sub    $0x200,%rsp
  0x00007f757049a32f: fxsave64 (%rsp)
  0x00007f757049a334: mov    %rbx,%rdi
  0x00007f757049a337: mov    %rax,%rsi
  0x00007f757049a33a: callq  0x00007f7585522bca
  0x00007f757049a33f: fxrstor64 (%rsp)
  0x00007f757049a344: add    $0x200,%rsp
  0x00007f757049a34b: mov    (%rsp),%r15
  0x00007f757049a34f: mov    0x8(%rsp),%r14
  0x00007f757049a354: mov    0x10(%rsp),%r13
  0x00007f757049a359: mov    0x18(%rsp),%r12
  0x00007f757049a35e: mov    0x20(%rsp),%r11
  0x00007f757049a363: mov    0x28(%rsp),%r10
  0x00007f757049a368: mov    0x30(%rsp),%r9
  0x00007f757049a36d: mov    0x38(%rsp),%r8
  0x00007f757049a372: mov    0x40(%rsp),%rdi
  0x00007f757049a377: mov    0x48(%rsp),%rsi
  0x00007f757049a37c: mov    0x50(%rsp),%rbp
  0x00007f757049a381: mov    0x60(%rsp),%rbx
  0x00007f757049a386: mov    0x68(%rsp),%rdx
  0x00007f757049a38b: mov    0x70(%rsp),%rcx
  0x00007f757049a390: mov    0x78(%rsp),%rax
  0x00007f757049a395: add    $0x80,%rsp
  0x00007f757049a39c: add    $0x8,%rsp
  0x00007f757049a3a0: popfq  
  0x00007f757049a3a1: mov    %r13,%rsp
  0x00007f757049a3a4: pop    %rax
  0x00007f757049a3a5: mov    %rsp,%r13
  0x00007f757049a3a8: sub    $0x10,%rsp
  0x00007f757049a3ac: mov    %rax,(%rsp)
  0x00007f757049a3b0: mov    %rsi,0x8(%rsp)
  0x00007f757049a3b5: mov    0x40(%rbx),%rcx
  0x00007f757049a3b9: jmpq   *%rcx

AHE@0x00007f75800d5d60: 0x i2c: 0x00007f757049a460 c2i: 0x00007f757049a570 c2iUV: 0x00007f757049a543
i2c argument handler #0 for: static ()Ljava/util/Vector; (530 bytes generated)
c2i argument handler starts at 0x7f757049a570
  0x00007f757049a460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049a464: movabs $0x7f757036e3e0,%r11
  0x00007f757049a46e: cmp    %r11,%rax
  0x00007f757049a471: jbe    0x00007f757049a48a
  0x00007f757049a477: movabs $0x7f757046e3e0,%r11
  0x00007f757049a481: cmp    %r11,%rax
  0x00007f757049a484: jb     0x00007f757049a527
  0x00007f757049a48a: movabs $0x7f7570369420,%r11
  0x00007f757049a494: cmp    %r11,%rax
  0x00007f757049a497: jbe    0x00007f757049a4b0
  0x00007f757049a49d: movabs $0x7f757036de58,%r11
  0x00007f757049a4a7: cmp    %r11,%rax
  0x00007f757049a4aa: jb     0x00007f757049a527
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049a4b0: mov    %rsp,-0x28(%rsp)
  0x00007f757049a4b5: sub    $0x80,%rsp
  0x00007f757049a4bc: mov    %rax,0x78(%rsp)
  0x00007f757049a4c1: mov    %rcx,0x70(%rsp)
  0x00007f757049a4c6: mov    %rdx,0x68(%rsp)
  0x00007f757049a4cb: mov    %rbx,0x60(%rsp)
  0x00007f757049a4d0: mov    %rbp,0x50(%rsp)
  0x00007f757049a4d5: mov    %rsi,0x48(%rsp)
  0x00007f757049a4da: mov    %rdi,0x40(%rsp)
  0x00007f757049a4df: mov    %r8,0x38(%rsp)
  0x00007f757049a4e4: mov    %r9,0x30(%rsp)
  0x00007f757049a4e9: mov    %r10,0x28(%rsp)
  0x00007f757049a4ee: mov    %r11,0x20(%rsp)
  0x00007f757049a4f3: mov    %r12,0x18(%rsp)
  0x00007f757049a4f8: mov    %r13,0x10(%rsp)
  0x00007f757049a4fd: mov    %r14,0x8(%rsp)
  0x00007f757049a502: mov    %r15,(%rsp)
  0x00007f757049a506: movabs $0x7f758592f470,%rdi
  0x00007f757049a510: movabs $0x7f757049a4b0,%rsi
  0x00007f757049a51a: mov    %rsp,%rdx
  0x00007f757049a51d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a521: callq  0x00007f75853729fa
  0x00007f757049a526: hlt    
  ;; } verify_i2ce 
  0x00007f757049a527: mov    %rsp,%r11
  0x00007f757049a52a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a52e: push   %rax
  0x00007f757049a52f: mov    %r11,%rax
  0x00007f757049a532: mov    0x50(%rbx),%r11
  0x00007f757049a536: mov    %rbx,0x258(%r15)
  0x00007f757049a53d: mov    %rbx,%rax
  0x00007f757049a540: jmpq   *%r11
  0x00007f757049a543: mov    0x8(%rsi),%ebx
  0x00007f757049a546: shl    $0x3,%rbx
  0x00007f757049a54a: cmp    0x10(%rax),%rbx
  0x00007f757049a54e: mov    0x8(%rax),%rbx
  0x00007f757049a552: je     0x00007f757049a55d
  0x00007f757049a558: jmpq   0x00007f757046ec40
  0x00007f757049a55d: cmpq   $0x0,0x58(%rbx)
  0x00007f757049a565: je     0x00007f757049a660
  0x00007f757049a56b: jmpq   0x00007f757046ec40
  0x00007f757049a570: cmpq   $0x0,0x58(%rbx)
  0x00007f757049a578: je     0x00007f757049a660
  0x00007f757049a57e: mov    %rsp,%r13
  0x00007f757049a581: mov    (%rsp),%rax
  0x00007f757049a585: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a589: pushfq 
  0x00007f757049a58a: sub    $0x8,%rsp
  0x00007f757049a58e: mov    %rsp,-0x28(%rsp)
  0x00007f757049a593: sub    $0x80,%rsp
  0x00007f757049a59a: mov    %rax,0x78(%rsp)
  0x00007f757049a59f: mov    %rcx,0x70(%rsp)
  0x00007f757049a5a4: mov    %rdx,0x68(%rsp)
  0x00007f757049a5a9: mov    %rbx,0x60(%rsp)
  0x00007f757049a5ae: mov    %rbp,0x50(%rsp)
  0x00007f757049a5b3: mov    %rsi,0x48(%rsp)
  0x00007f757049a5b8: mov    %rdi,0x40(%rsp)
  0x00007f757049a5bd: mov    %r8,0x38(%rsp)
  0x00007f757049a5c2: mov    %r9,0x30(%rsp)
  0x00007f757049a5c7: mov    %r10,0x28(%rsp)
  0x00007f757049a5cc: mov    %r11,0x20(%rsp)
  0x00007f757049a5d1: mov    %r12,0x18(%rsp)
  0x00007f757049a5d6: mov    %r13,0x10(%rsp)
  0x00007f757049a5db: mov    %r14,0x8(%rsp)
  0x00007f757049a5e0: mov    %r15,(%rsp)
  0x00007f757049a5e4: sub    $0x200,%rsp
  0x00007f757049a5eb: fxsave64 (%rsp)
  0x00007f757049a5f0: mov    %rbx,%rdi
  0x00007f757049a5f3: mov    %rax,%rsi
  0x00007f757049a5f6: callq  0x00007f7585522bca
  0x00007f757049a5fb: fxrstor64 (%rsp)
  0x00007f757049a600: add    $0x200,%rsp
  0x00007f757049a607: mov    (%rsp),%r15
  0x00007f757049a60b: mov    0x8(%rsp),%r14
  0x00007f757049a610: mov    0x10(%rsp),%r13
  0x00007f757049a615: mov    0x18(%rsp),%r12
  0x00007f757049a61a: mov    0x20(%rsp),%r11
  0x00007f757049a61f: mov    0x28(%rsp),%r10
  0x00007f757049a624: mov    0x30(%rsp),%r9
  0x00007f757049a629: mov    0x38(%rsp),%r8
  0x00007f757049a62e: mov    0x40(%rsp),%rdi
  0x00007f757049a633: mov    0x48(%rsp),%rsi
  0x00007f757049a638: mov    0x50(%rsp),%rbp
  0x00007f757049a63d: mov    0x60(%rsp),%rbx
  0x00007f757049a642: mov    0x68(%rsp),%rdx
  0x00007f757049a647: mov    0x70(%rsp),%rcx
  0x00007f757049a64c: mov    0x78(%rsp),%rax
  0x00007f757049a651: add    $0x80,%rsp
  0x00007f757049a658: add    $0x8,%rsp
  0x00007f757049a65c: popfq  
  0x00007f757049a65d: mov    %r13,%rsp
  0x00007f757049a660: pop    %rax
  0x00007f757049a661: mov    %rsp,%r13
  0x00007f757049a664: sub    $0x10,%rsp
  0x00007f757049a668: mov    %rax,(%rsp)
  0x00007f757049a66c: mov    0x40(%rbx),%rcx
  0x00007f757049a670: jmpq   *%rcx

AHE@0x00007f75800d5da8: 0x i2c: 0x00007f757049a720 c2i: 0x00007f757049a830 c2iUV: 0x00007f757049a803
i2c argument handler #0 for: static ()Ljava/lang/AssertionStatusDirectives; (530 bytes generated)
c2i argument handler starts at 0x7f757049a830
  0x00007f757049a720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049a724: movabs $0x7f757036e3e0,%r11
  0x00007f757049a72e: cmp    %r11,%rax
  0x00007f757049a731: jbe    0x00007f757049a74a
  0x00007f757049a737: movabs $0x7f757046e3e0,%r11
  0x00007f757049a741: cmp    %r11,%rax
  0x00007f757049a744: jb     0x00007f757049a7e7
  0x00007f757049a74a: movabs $0x7f7570369420,%r11
  0x00007f757049a754: cmp    %r11,%rax
  0x00007f757049a757: jbe    0x00007f757049a770
  0x00007f757049a75d: movabs $0x7f757036de58,%r11
  0x00007f757049a767: cmp    %r11,%rax
  0x00007f757049a76a: jb     0x00007f757049a7e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049a770: mov    %rsp,-0x28(%rsp)
  0x00007f757049a775: sub    $0x80,%rsp
  0x00007f757049a77c: mov    %rax,0x78(%rsp)
  0x00007f757049a781: mov    %rcx,0x70(%rsp)
  0x00007f757049a786: mov    %rdx,0x68(%rsp)
  0x00007f757049a78b: mov    %rbx,0x60(%rsp)
  0x00007f757049a790: mov    %rbp,0x50(%rsp)
  0x00007f757049a795: mov    %rsi,0x48(%rsp)
  0x00007f757049a79a: mov    %rdi,0x40(%rsp)
  0x00007f757049a79f: mov    %r8,0x38(%rsp)
  0x00007f757049a7a4: mov    %r9,0x30(%rsp)
  0x00007f757049a7a9: mov    %r10,0x28(%rsp)
  0x00007f757049a7ae: mov    %r11,0x20(%rsp)
  0x00007f757049a7b3: mov    %r12,0x18(%rsp)
  0x00007f757049a7b8: mov    %r13,0x10(%rsp)
  0x00007f757049a7bd: mov    %r14,0x8(%rsp)
  0x00007f757049a7c2: mov    %r15,(%rsp)
  0x00007f757049a7c6: movabs $0x7f758592f470,%rdi
  0x00007f757049a7d0: movabs $0x7f757049a770,%rsi
  0x00007f757049a7da: mov    %rsp,%rdx
  0x00007f757049a7dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a7e1: callq  0x00007f75853729fa
  0x00007f757049a7e6: hlt    
  ;; } verify_i2ce 
  0x00007f757049a7e7: mov    %rsp,%r11
  0x00007f757049a7ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a7ee: push   %rax
  0x00007f757049a7ef: mov    %r11,%rax
  0x00007f757049a7f2: mov    0x50(%rbx),%r11
  0x00007f757049a7f6: mov    %rbx,0x258(%r15)
  0x00007f757049a7fd: mov    %rbx,%rax
  0x00007f757049a800: jmpq   *%r11
  0x00007f757049a803: mov    0x8(%rsi),%ebx
  0x00007f757049a806: shl    $0x3,%rbx
  0x00007f757049a80a: cmp    0x10(%rax),%rbx
  0x00007f757049a80e: mov    0x8(%rax),%rbx
  0x00007f757049a812: je     0x00007f757049a81d
  0x00007f757049a818: jmpq   0x00007f757046ec40
  0x00007f757049a81d: cmpq   $0x0,0x58(%rbx)
  0x00007f757049a825: je     0x00007f757049a920
  0x00007f757049a82b: jmpq   0x00007f757046ec40
  0x00007f757049a830: cmpq   $0x0,0x58(%rbx)
  0x00007f757049a838: je     0x00007f757049a920
  0x00007f757049a83e: mov    %rsp,%r13
  0x00007f757049a841: mov    (%rsp),%rax
  0x00007f757049a845: and    $0xfffffffffffffff0,%rsp
  0x00007f757049a849: pushfq 
  0x00007f757049a84a: sub    $0x8,%rsp
  0x00007f757049a84e: mov    %rsp,-0x28(%rsp)
  0x00007f757049a853: sub    $0x80,%rsp
  0x00007f757049a85a: mov    %rax,0x78(%rsp)
  0x00007f757049a85f: mov    %rcx,0x70(%rsp)
  0x00007f757049a864: mov    %rdx,0x68(%rsp)
  0x00007f757049a869: mov    %rbx,0x60(%rsp)
  0x00007f757049a86e: mov    %rbp,0x50(%rsp)
  0x00007f757049a873: mov    %rsi,0x48(%rsp)
  0x00007f757049a878: mov    %rdi,0x40(%rsp)
  0x00007f757049a87d: mov    %r8,0x38(%rsp)
  0x00007f757049a882: mov    %r9,0x30(%rsp)
  0x00007f757049a887: mov    %r10,0x28(%rsp)
  0x00007f757049a88c: mov    %r11,0x20(%rsp)
  0x00007f757049a891: mov    %r12,0x18(%rsp)
  0x00007f757049a896: mov    %r13,0x10(%rsp)
  0x00007f757049a89b: mov    %r14,0x8(%rsp)
  0x00007f757049a8a0: mov    %r15,(%rsp)
  0x00007f757049a8a4: sub    $0x200,%rsp
  0x00007f757049a8ab: fxsave64 (%rsp)
  0x00007f757049a8b0: mov    %rbx,%rdi
  0x00007f757049a8b3: mov    %rax,%rsi
  0x00007f757049a8b6: callq  0x00007f7585522bca
  0x00007f757049a8bb: fxrstor64 (%rsp)
  0x00007f757049a8c0: add    $0x200,%rsp
  0x00007f757049a8c7: mov    (%rsp),%r15
  0x00007f757049a8cb: mov    0x8(%rsp),%r14
  0x00007f757049a8d0: mov    0x10(%rsp),%r13
  0x00007f757049a8d5: mov    0x18(%rsp),%r12
  0x00007f757049a8da: mov    0x20(%rsp),%r11
  0x00007f757049a8df: mov    0x28(%rsp),%r10
  0x00007f757049a8e4: mov    0x30(%rsp),%r9
  0x00007f757049a8e9: mov    0x38(%rsp),%r8
  0x00007f757049a8ee: mov    0x40(%rsp),%rdi
  0x00007f757049a8f3: mov    0x48(%rsp),%rsi
  0x00007f757049a8f8: mov    0x50(%rsp),%rbp
  0x00007f757049a8fd: mov    0x60(%rsp),%rbx
  0x00007f757049a902: mov    0x68(%rsp),%rdx
  0x00007f757049a907: mov    0x70(%rsp),%rcx
  0x00007f757049a90c: mov    0x78(%rsp),%rax
  0x00007f757049a911: add    $0x80,%rsp
  0x00007f757049a918: add    $0x8,%rsp
  0x00007f757049a91c: popfq  
  0x00007f757049a91d: mov    %r13,%rsp
  0x00007f757049a920: pop    %rax
  0x00007f757049a921: mov    %rsp,%r13
  0x00007f757049a924: sub    $0x10,%rsp
  0x00007f757049a928: mov    %rax,(%rsp)
  0x00007f757049a92c: mov    0x40(%rbx),%rcx
  0x00007f757049a930: jmpq   *%rcx

AHE@0x00007f75800d5df0: 0xb0000000 i2c: 0x00007f757049a9e0 c2i: 0x00007f757049aaf4 c2iUV: 0x00007f757049aac7
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757049aaf4
  0x00007f757049a9e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049a9e4: movabs $0x7f757036e3e0,%r11
  0x00007f757049a9ee: cmp    %r11,%rax
  0x00007f757049a9f1: jbe    0x00007f757049aa0a
  0x00007f757049a9f7: movabs $0x7f757046e3e0,%r11
  0x00007f757049aa01: cmp    %r11,%rax
  0x00007f757049aa04: jb     0x00007f757049aaa7
  0x00007f757049aa0a: movabs $0x7f7570369420,%r11
  0x00007f757049aa14: cmp    %r11,%rax
  0x00007f757049aa17: jbe    0x00007f757049aa30
  0x00007f757049aa1d: movabs $0x7f757036de58,%r11
  0x00007f757049aa27: cmp    %r11,%rax
  0x00007f757049aa2a: jb     0x00007f757049aaa7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049aa30: mov    %rsp,-0x28(%rsp)
  0x00007f757049aa35: sub    $0x80,%rsp
  0x00007f757049aa3c: mov    %rax,0x78(%rsp)
  0x00007f757049aa41: mov    %rcx,0x70(%rsp)
  0x00007f757049aa46: mov    %rdx,0x68(%rsp)
  0x00007f757049aa4b: mov    %rbx,0x60(%rsp)
  0x00007f757049aa50: mov    %rbp,0x50(%rsp)
  0x00007f757049aa55: mov    %rsi,0x48(%rsp)
  0x00007f757049aa5a: mov    %rdi,0x40(%rsp)
  0x00007f757049aa5f: mov    %r8,0x38(%rsp)
  0x00007f757049aa64: mov    %r9,0x30(%rsp)
  0x00007f757049aa69: mov    %r10,0x28(%rsp)
  0x00007f757049aa6e: mov    %r11,0x20(%rsp)
  0x00007f757049aa73: mov    %r12,0x18(%rsp)
  0x00007f757049aa78: mov    %r13,0x10(%rsp)
  0x00007f757049aa7d: mov    %r14,0x8(%rsp)
  0x00007f757049aa82: mov    %r15,(%rsp)
  0x00007f757049aa86: movabs $0x7f758592f470,%rdi
  0x00007f757049aa90: movabs $0x7f757049aa30,%rsi
  0x00007f757049aa9a: mov    %rsp,%rdx
  0x00007f757049aa9d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049aaa1: callq  0x00007f75853729fa
  0x00007f757049aaa6: hlt    
  ;; } verify_i2ce 
  0x00007f757049aaa7: mov    %rsp,%r11
  0x00007f757049aaaa: and    $0xfffffffffffffff0,%rsp
  0x00007f757049aaae: push   %rax
  0x00007f757049aaaf: mov    %r11,%rax
  0x00007f757049aab2: mov    0x50(%rbx),%r11
  0x00007f757049aab6: mov    0x8(%rax),%rsi
  0x00007f757049aaba: mov    %rbx,0x258(%r15)
  0x00007f757049aac1: mov    %rbx,%rax
  0x00007f757049aac4: jmpq   *%r11
  0x00007f757049aac7: mov    0x8(%rsi),%ebx
  0x00007f757049aaca: shl    $0x3,%rbx
  0x00007f757049aace: cmp    0x10(%rax),%rbx
  0x00007f757049aad2: mov    0x8(%rax),%rbx
  0x00007f757049aad6: je     0x00007f757049aae1
  0x00007f757049aadc: jmpq   0x00007f757046ec40
  0x00007f757049aae1: cmpq   $0x0,0x58(%rbx)
  0x00007f757049aae9: je     0x00007f757049abe4
  0x00007f757049aaef: jmpq   0x00007f757046ec40
  0x00007f757049aaf4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049aafc: je     0x00007f757049abe4
  0x00007f757049ab02: mov    %rsp,%r13
  0x00007f757049ab05: mov    (%rsp),%rax
  0x00007f757049ab09: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ab0d: pushfq 
  0x00007f757049ab0e: sub    $0x8,%rsp
  0x00007f757049ab12: mov    %rsp,-0x28(%rsp)
  0x00007f757049ab17: sub    $0x80,%rsp
  0x00007f757049ab1e: mov    %rax,0x78(%rsp)
  0x00007f757049ab23: mov    %rcx,0x70(%rsp)
  0x00007f757049ab28: mov    %rdx,0x68(%rsp)
  0x00007f757049ab2d: mov    %rbx,0x60(%rsp)
  0x00007f757049ab32: mov    %rbp,0x50(%rsp)
  0x00007f757049ab37: mov    %rsi,0x48(%rsp)
  0x00007f757049ab3c: mov    %rdi,0x40(%rsp)
  0x00007f757049ab41: mov    %r8,0x38(%rsp)
  0x00007f757049ab46: mov    %r9,0x30(%rsp)
  0x00007f757049ab4b: mov    %r10,0x28(%rsp)
  0x00007f757049ab50: mov    %r11,0x20(%rsp)
  0x00007f757049ab55: mov    %r12,0x18(%rsp)
  0x00007f757049ab5a: mov    %r13,0x10(%rsp)
  0x00007f757049ab5f: mov    %r14,0x8(%rsp)
  0x00007f757049ab64: mov    %r15,(%rsp)
  0x00007f757049ab68: sub    $0x200,%rsp
  0x00007f757049ab6f: fxsave64 (%rsp)
  0x00007f757049ab74: mov    %rbx,%rdi
  0x00007f757049ab77: mov    %rax,%rsi
  0x00007f757049ab7a: callq  0x00007f7585522bca
  0x00007f757049ab7f: fxrstor64 (%rsp)
  0x00007f757049ab84: add    $0x200,%rsp
  0x00007f757049ab8b: mov    (%rsp),%r15
  0x00007f757049ab8f: mov    0x8(%rsp),%r14
  0x00007f757049ab94: mov    0x10(%rsp),%r13
  0x00007f757049ab99: mov    0x18(%rsp),%r12
  0x00007f757049ab9e: mov    0x20(%rsp),%r11
  0x00007f757049aba3: mov    0x28(%rsp),%r10
  0x00007f757049aba8: mov    0x30(%rsp),%r9
  0x00007f757049abad: mov    0x38(%rsp),%r8
  0x00007f757049abb2: mov    0x40(%rsp),%rdi
  0x00007f757049abb7: mov    0x48(%rsp),%rsi
  0x00007f757049abbc: mov    0x50(%rsp),%rbp
  0x00007f757049abc1: mov    0x60(%rsp),%rbx
  0x00007f757049abc6: mov    0x68(%rsp),%rdx
  0x00007f757049abcb: mov    0x70(%rsp),%rcx
  0x00007f757049abd0: mov    0x78(%rsp),%rax
  0x00007f757049abd5: add    $0x80,%rsp
  0x00007f757049abdc: add    $0x8,%rsp
  0x00007f757049abe0: popfq  
  0x00007f757049abe1: mov    %r13,%rsp
  0x00007f757049abe4: pop    %rax
  0x00007f757049abe5: mov    %rsp,%r13
  0x00007f757049abe8: sub    $0x10,%rsp
  0x00007f757049abec: mov    %rax,(%rsp)
  0x00007f757049abf0: mov    %rsi,0x8(%rsp)
  0x00007f757049abf5: mov    0x40(%rbx),%rcx
  0x00007f757049abf9: jmpq   *%rcx

AHE@0x00007f75800d5e38: 0xb0000000 i2c: 0x00007f757049aca0 c2i: 0x00007f757049adb4 c2iUV: 0x00007f757049ad87
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f757049adb4
  0x00007f757049aca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049aca4: movabs $0x7f757036e3e0,%r11
  0x00007f757049acae: cmp    %r11,%rax
  0x00007f757049acb1: jbe    0x00007f757049acca
  0x00007f757049acb7: movabs $0x7f757046e3e0,%r11
  0x00007f757049acc1: cmp    %r11,%rax
  0x00007f757049acc4: jb     0x00007f757049ad67
  0x00007f757049acca: movabs $0x7f7570369420,%r11
  0x00007f757049acd4: cmp    %r11,%rax
  0x00007f757049acd7: jbe    0x00007f757049acf0
  0x00007f757049acdd: movabs $0x7f757036de58,%r11
  0x00007f757049ace7: cmp    %r11,%rax
  0x00007f757049acea: jb     0x00007f757049ad67
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049acf0: mov    %rsp,-0x28(%rsp)
  0x00007f757049acf5: sub    $0x80,%rsp
  0x00007f757049acfc: mov    %rax,0x78(%rsp)
  0x00007f757049ad01: mov    %rcx,0x70(%rsp)
  0x00007f757049ad06: mov    %rdx,0x68(%rsp)
  0x00007f757049ad0b: mov    %rbx,0x60(%rsp)
  0x00007f757049ad10: mov    %rbp,0x50(%rsp)
  0x00007f757049ad15: mov    %rsi,0x48(%rsp)
  0x00007f757049ad1a: mov    %rdi,0x40(%rsp)
  0x00007f757049ad1f: mov    %r8,0x38(%rsp)
  0x00007f757049ad24: mov    %r9,0x30(%rsp)
  0x00007f757049ad29: mov    %r10,0x28(%rsp)
  0x00007f757049ad2e: mov    %r11,0x20(%rsp)
  0x00007f757049ad33: mov    %r12,0x18(%rsp)
  0x00007f757049ad38: mov    %r13,0x10(%rsp)
  0x00007f757049ad3d: mov    %r14,0x8(%rsp)
  0x00007f757049ad42: mov    %r15,(%rsp)
  0x00007f757049ad46: movabs $0x7f758592f470,%rdi
  0x00007f757049ad50: movabs $0x7f757049acf0,%rsi
  0x00007f757049ad5a: mov    %rsp,%rdx
  0x00007f757049ad5d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ad61: callq  0x00007f75853729fa
  0x00007f757049ad66: hlt    
  ;; } verify_i2ce 
  0x00007f757049ad67: mov    %rsp,%r11
  0x00007f757049ad6a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ad6e: push   %rax
  0x00007f757049ad6f: mov    %r11,%rax
  0x00007f757049ad72: mov    0x50(%rbx),%r11
  0x00007f757049ad76: mov    0x8(%rax),%rsi
  0x00007f757049ad7a: mov    %rbx,0x258(%r15)
  0x00007f757049ad81: mov    %rbx,%rax
  0x00007f757049ad84: jmpq   *%r11
  0x00007f757049ad87: mov    0x8(%rsi),%ebx
  0x00007f757049ad8a: shl    $0x3,%rbx
  0x00007f757049ad8e: cmp    0x10(%rax),%rbx
  0x00007f757049ad92: mov    0x8(%rax),%rbx
  0x00007f757049ad96: je     0x00007f757049ada1
  0x00007f757049ad9c: jmpq   0x00007f757046ec40
  0x00007f757049ada1: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ada9: je     0x00007f757049aea4
  0x00007f757049adaf: jmpq   0x00007f757046ec40
  0x00007f757049adb4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049adbc: je     0x00007f757049aea4
  0x00007f757049adc2: mov    %rsp,%r13
  0x00007f757049adc5: mov    (%rsp),%rax
  0x00007f757049adc9: and    $0xfffffffffffffff0,%rsp
  0x00007f757049adcd: pushfq 
  0x00007f757049adce: sub    $0x8,%rsp
  0x00007f757049add2: mov    %rsp,-0x28(%rsp)
  0x00007f757049add7: sub    $0x80,%rsp
  0x00007f757049adde: mov    %rax,0x78(%rsp)
  0x00007f757049ade3: mov    %rcx,0x70(%rsp)
  0x00007f757049ade8: mov    %rdx,0x68(%rsp)
  0x00007f757049aded: mov    %rbx,0x60(%rsp)
  0x00007f757049adf2: mov    %rbp,0x50(%rsp)
  0x00007f757049adf7: mov    %rsi,0x48(%rsp)
  0x00007f757049adfc: mov    %rdi,0x40(%rsp)
  0x00007f757049ae01: mov    %r8,0x38(%rsp)
  0x00007f757049ae06: mov    %r9,0x30(%rsp)
  0x00007f757049ae0b: mov    %r10,0x28(%rsp)
  0x00007f757049ae10: mov    %r11,0x20(%rsp)
  0x00007f757049ae15: mov    %r12,0x18(%rsp)
  0x00007f757049ae1a: mov    %r13,0x10(%rsp)
  0x00007f757049ae1f: mov    %r14,0x8(%rsp)
  0x00007f757049ae24: mov    %r15,(%rsp)
  0x00007f757049ae28: sub    $0x200,%rsp
  0x00007f757049ae2f: fxsave64 (%rsp)
  0x00007f757049ae34: mov    %rbx,%rdi
  0x00007f757049ae37: mov    %rax,%rsi
  0x00007f757049ae3a: callq  0x00007f7585522bca
  0x00007f757049ae3f: fxrstor64 (%rsp)
  0x00007f757049ae44: add    $0x200,%rsp
  0x00007f757049ae4b: mov    (%rsp),%r15
  0x00007f757049ae4f: mov    0x8(%rsp),%r14
  0x00007f757049ae54: mov    0x10(%rsp),%r13
  0x00007f757049ae59: mov    0x18(%rsp),%r12
  0x00007f757049ae5e: mov    0x20(%rsp),%r11
  0x00007f757049ae63: mov    0x28(%rsp),%r10
  0x00007f757049ae68: mov    0x30(%rsp),%r9
  0x00007f757049ae6d: mov    0x38(%rsp),%r8
  0x00007f757049ae72: mov    0x40(%rsp),%rdi
  0x00007f757049ae77: mov    0x48(%rsp),%rsi
  0x00007f757049ae7c: mov    0x50(%rsp),%rbp
  0x00007f757049ae81: mov    0x60(%rsp),%rbx
  0x00007f757049ae86: mov    0x68(%rsp),%rdx
  0x00007f757049ae8b: mov    0x70(%rsp),%rcx
  0x00007f757049ae90: mov    0x78(%rsp),%rax
  0x00007f757049ae95: add    $0x80,%rsp
  0x00007f757049ae9c: add    $0x8,%rsp
  0x00007f757049aea0: popfq  
  0x00007f757049aea1: mov    %r13,%rsp
  0x00007f757049aea4: pop    %rax
  0x00007f757049aea5: mov    %rsp,%r13
  0x00007f757049aea8: sub    $0x10,%rsp
  0x00007f757049aeac: mov    %rax,(%rsp)
  0x00007f757049aeb0: mov    %rsi,0x8(%rsp)
  0x00007f757049aeb5: mov    0x40(%rbx),%rcx
  0x00007f757049aeb9: jmpq   *%rcx

AHE@0x00007f75800d5e80: 0xbba00000 i2c: 0x00007f757049af60 c2i: 0x00007f757049b07b c2iUV: 0x00007f757049b04e
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)V (555 bytes generated)
c2i argument handler starts at 0x7f757049b07b
  0x00007f757049af60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049af64: movabs $0x7f757036e3e0,%r11
  0x00007f757049af6e: cmp    %r11,%rax
  0x00007f757049af71: jbe    0x00007f757049af8a
  0x00007f757049af77: movabs $0x7f757046e3e0,%r11
  0x00007f757049af81: cmp    %r11,%rax
  0x00007f757049af84: jb     0x00007f757049b027
  0x00007f757049af8a: movabs $0x7f7570369420,%r11
  0x00007f757049af94: cmp    %r11,%rax
  0x00007f757049af97: jbe    0x00007f757049afb0
  0x00007f757049af9d: movabs $0x7f757036de58,%r11
  0x00007f757049afa7: cmp    %r11,%rax
  0x00007f757049afaa: jb     0x00007f757049b027
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049afb0: mov    %rsp,-0x28(%rsp)
  0x00007f757049afb5: sub    $0x80,%rsp
  0x00007f757049afbc: mov    %rax,0x78(%rsp)
  0x00007f757049afc1: mov    %rcx,0x70(%rsp)
  0x00007f757049afc6: mov    %rdx,0x68(%rsp)
  0x00007f757049afcb: mov    %rbx,0x60(%rsp)
  0x00007f757049afd0: mov    %rbp,0x50(%rsp)
  0x00007f757049afd5: mov    %rsi,0x48(%rsp)
  0x00007f757049afda: mov    %rdi,0x40(%rsp)
  0x00007f757049afdf: mov    %r8,0x38(%rsp)
  0x00007f757049afe4: mov    %r9,0x30(%rsp)
  0x00007f757049afe9: mov    %r10,0x28(%rsp)
  0x00007f757049afee: mov    %r11,0x20(%rsp)
  0x00007f757049aff3: mov    %r12,0x18(%rsp)
  0x00007f757049aff8: mov    %r13,0x10(%rsp)
  0x00007f757049affd: mov    %r14,0x8(%rsp)
  0x00007f757049b002: mov    %r15,(%rsp)
  0x00007f757049b006: movabs $0x7f758592f470,%rdi
  0x00007f757049b010: movabs $0x7f757049afb0,%rsi
  0x00007f757049b01a: mov    %rsp,%rdx
  0x00007f757049b01d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b021: callq  0x00007f75853729fa
  0x00007f757049b026: hlt    
  ;; } verify_i2ce 
  0x00007f757049b027: mov    %rsp,%r11
  0x00007f757049b02a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b02e: push   %rax
  0x00007f757049b02f: mov    %r11,%rax
  0x00007f757049b032: mov    0x50(%rbx),%r11
  0x00007f757049b036: mov    0x18(%rax),%rsi
  0x00007f757049b03a: mov    0x10(%rax),%rdx
  0x00007f757049b03e: mov    0x8(%rax),%ecx
  0x00007f757049b041: mov    %rbx,0x258(%r15)
  0x00007f757049b048: mov    %rbx,%rax
  0x00007f757049b04b: jmpq   *%r11
  0x00007f757049b04e: mov    0x8(%rsi),%ebx
  0x00007f757049b051: shl    $0x3,%rbx
  0x00007f757049b055: cmp    0x10(%rax),%rbx
  0x00007f757049b059: mov    0x8(%rax),%rbx
  0x00007f757049b05d: je     0x00007f757049b068
  0x00007f757049b063: jmpq   0x00007f757046ec40
  0x00007f757049b068: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b070: je     0x00007f757049b16b
  0x00007f757049b076: jmpq   0x00007f757046ec40
  0x00007f757049b07b: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b083: je     0x00007f757049b16b
  0x00007f757049b089: mov    %rsp,%r13
  0x00007f757049b08c: mov    (%rsp),%rax
  0x00007f757049b090: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b094: pushfq 
  0x00007f757049b095: sub    $0x8,%rsp
  0x00007f757049b099: mov    %rsp,-0x28(%rsp)
  0x00007f757049b09e: sub    $0x80,%rsp
  0x00007f757049b0a5: mov    %rax,0x78(%rsp)
  0x00007f757049b0aa: mov    %rcx,0x70(%rsp)
  0x00007f757049b0af: mov    %rdx,0x68(%rsp)
  0x00007f757049b0b4: mov    %rbx,0x60(%rsp)
  0x00007f757049b0b9: mov    %rbp,0x50(%rsp)
  0x00007f757049b0be: mov    %rsi,0x48(%rsp)
  0x00007f757049b0c3: mov    %rdi,0x40(%rsp)
  0x00007f757049b0c8: mov    %r8,0x38(%rsp)
  0x00007f757049b0cd: mov    %r9,0x30(%rsp)
  0x00007f757049b0d2: mov    %r10,0x28(%rsp)
  0x00007f757049b0d7: mov    %r11,0x20(%rsp)
  0x00007f757049b0dc: mov    %r12,0x18(%rsp)
  0x00007f757049b0e1: mov    %r13,0x10(%rsp)
  0x00007f757049b0e6: mov    %r14,0x8(%rsp)
  0x00007f757049b0eb: mov    %r15,(%rsp)
  0x00007f757049b0ef: sub    $0x200,%rsp
  0x00007f757049b0f6: fxsave64 (%rsp)
  0x00007f757049b0fb: mov    %rbx,%rdi
  0x00007f757049b0fe: mov    %rax,%rsi
  0x00007f757049b101: callq  0x00007f7585522bca
  0x00007f757049b106: fxrstor64 (%rsp)
  0x00007f757049b10b: add    $0x200,%rsp
  0x00007f757049b112: mov    (%rsp),%r15
  0x00007f757049b116: mov    0x8(%rsp),%r14
  0x00007f757049b11b: mov    0x10(%rsp),%r13
  0x00007f757049b120: mov    0x18(%rsp),%r12
  0x00007f757049b125: mov    0x20(%rsp),%r11
  0x00007f757049b12a: mov    0x28(%rsp),%r10
  0x00007f757049b12f: mov    0x30(%rsp),%r9
  0x00007f757049b134: mov    0x38(%rsp),%r8
  0x00007f757049b139: mov    0x40(%rsp),%rdi
  0x00007f757049b13e: mov    0x48(%rsp),%rsi
  0x00007f757049b143: mov    0x50(%rsp),%rbp
  0x00007f757049b148: mov    0x60(%rsp),%rbx
  0x00007f757049b14d: mov    0x68(%rsp),%rdx
  0x00007f757049b152: mov    0x70(%rsp),%rcx
  0x00007f757049b157: mov    0x78(%rsp),%rax
  0x00007f757049b15c: add    $0x80,%rsp
  0x00007f757049b163: add    $0x8,%rsp
  0x00007f757049b167: popfq  
  0x00007f757049b168: mov    %r13,%rsp
  0x00007f757049b16b: pop    %rax
  0x00007f757049b16c: mov    %rsp,%r13
  0x00007f757049b16f: sub    $0x20,%rsp
  0x00007f757049b173: mov    %rax,(%rsp)
  0x00007f757049b177: mov    %rsi,0x18(%rsp)
  0x00007f757049b17c: mov    %rdx,0x10(%rsp)
  0x00007f757049b181: mov    %ecx,0x8(%rsp)
  0x00007f757049b185: mov    0x40(%rbx),%rcx
  0x00007f757049b189: jmpq   *%rcx

AHE@0x00007f75800d5ec8: 0xbba00000 i2c: 0x00007f757049b260 c2i: 0x00007f757049b37b c2iUV: 0x00007f757049b34e
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)V (555 bytes generated)
c2i argument handler starts at 0x7f757049b37b
  0x00007f757049b260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049b264: movabs $0x7f757036e3e0,%r11
  0x00007f757049b26e: cmp    %r11,%rax
  0x00007f757049b271: jbe    0x00007f757049b28a
  0x00007f757049b277: movabs $0x7f757046e3e0,%r11
  0x00007f757049b281: cmp    %r11,%rax
  0x00007f757049b284: jb     0x00007f757049b327
  0x00007f757049b28a: movabs $0x7f7570369420,%r11
  0x00007f757049b294: cmp    %r11,%rax
  0x00007f757049b297: jbe    0x00007f757049b2b0
  0x00007f757049b29d: movabs $0x7f757036de58,%r11
  0x00007f757049b2a7: cmp    %r11,%rax
  0x00007f757049b2aa: jb     0x00007f757049b327
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049b2b0: mov    %rsp,-0x28(%rsp)
  0x00007f757049b2b5: sub    $0x80,%rsp
  0x00007f757049b2bc: mov    %rax,0x78(%rsp)
  0x00007f757049b2c1: mov    %rcx,0x70(%rsp)
  0x00007f757049b2c6: mov    %rdx,0x68(%rsp)
  0x00007f757049b2cb: mov    %rbx,0x60(%rsp)
  0x00007f757049b2d0: mov    %rbp,0x50(%rsp)
  0x00007f757049b2d5: mov    %rsi,0x48(%rsp)
  0x00007f757049b2da: mov    %rdi,0x40(%rsp)
  0x00007f757049b2df: mov    %r8,0x38(%rsp)
  0x00007f757049b2e4: mov    %r9,0x30(%rsp)
  0x00007f757049b2e9: mov    %r10,0x28(%rsp)
  0x00007f757049b2ee: mov    %r11,0x20(%rsp)
  0x00007f757049b2f3: mov    %r12,0x18(%rsp)
  0x00007f757049b2f8: mov    %r13,0x10(%rsp)
  0x00007f757049b2fd: mov    %r14,0x8(%rsp)
  0x00007f757049b302: mov    %r15,(%rsp)
  0x00007f757049b306: movabs $0x7f758592f470,%rdi
  0x00007f757049b310: movabs $0x7f757049b2b0,%rsi
  0x00007f757049b31a: mov    %rsp,%rdx
  0x00007f757049b31d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b321: callq  0x00007f75853729fa
  0x00007f757049b326: hlt    
  ;; } verify_i2ce 
  0x00007f757049b327: mov    %rsp,%r11
  0x00007f757049b32a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b32e: push   %rax
  0x00007f757049b32f: mov    %r11,%rax
  0x00007f757049b332: mov    0x50(%rbx),%r11
  0x00007f757049b336: mov    0x18(%rax),%rsi
  0x00007f757049b33a: mov    0x10(%rax),%rdx
  0x00007f757049b33e: mov    0x8(%rax),%ecx
  0x00007f757049b341: mov    %rbx,0x258(%r15)
  0x00007f757049b348: mov    %rbx,%rax
  0x00007f757049b34b: jmpq   *%r11
  0x00007f757049b34e: mov    0x8(%rsi),%ebx
  0x00007f757049b351: shl    $0x3,%rbx
  0x00007f757049b355: cmp    0x10(%rax),%rbx
  0x00007f757049b359: mov    0x8(%rax),%rbx
  0x00007f757049b35d: je     0x00007f757049b368
  0x00007f757049b363: jmpq   0x00007f757046ec40
  0x00007f757049b368: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b370: je     0x00007f757049b46b
  0x00007f757049b376: jmpq   0x00007f757046ec40
  0x00007f757049b37b: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b383: je     0x00007f757049b46b
  0x00007f757049b389: mov    %rsp,%r13
  0x00007f757049b38c: mov    (%rsp),%rax
  0x00007f757049b390: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b394: pushfq 
  0x00007f757049b395: sub    $0x8,%rsp
  0x00007f757049b399: mov    %rsp,-0x28(%rsp)
  0x00007f757049b39e: sub    $0x80,%rsp
  0x00007f757049b3a5: mov    %rax,0x78(%rsp)
  0x00007f757049b3aa: mov    %rcx,0x70(%rsp)
  0x00007f757049b3af: mov    %rdx,0x68(%rsp)
  0x00007f757049b3b4: mov    %rbx,0x60(%rsp)
  0x00007f757049b3b9: mov    %rbp,0x50(%rsp)
  0x00007f757049b3be: mov    %rsi,0x48(%rsp)
  0x00007f757049b3c3: mov    %rdi,0x40(%rsp)
  0x00007f757049b3c8: mov    %r8,0x38(%rsp)
  0x00007f757049b3cd: mov    %r9,0x30(%rsp)
  0x00007f757049b3d2: mov    %r10,0x28(%rsp)
  0x00007f757049b3d7: mov    %r11,0x20(%rsp)
  0x00007f757049b3dc: mov    %r12,0x18(%rsp)
  0x00007f757049b3e1: mov    %r13,0x10(%rsp)
  0x00007f757049b3e6: mov    %r14,0x8(%rsp)
  0x00007f757049b3eb: mov    %r15,(%rsp)
  0x00007f757049b3ef: sub    $0x200,%rsp
  0x00007f757049b3f6: fxsave64 (%rsp)
  0x00007f757049b3fb: mov    %rbx,%rdi
  0x00007f757049b3fe: mov    %rax,%rsi
  0x00007f757049b401: callq  0x00007f7585522bca
  0x00007f757049b406: fxrstor64 (%rsp)
  0x00007f757049b40b: add    $0x200,%rsp
  0x00007f757049b412: mov    (%rsp),%r15
  0x00007f757049b416: mov    0x8(%rsp),%r14
  0x00007f757049b41b: mov    0x10(%rsp),%r13
  0x00007f757049b420: mov    0x18(%rsp),%r12
  0x00007f757049b425: mov    0x20(%rsp),%r11
  0x00007f757049b42a: mov    0x28(%rsp),%r10
  0x00007f757049b42f: mov    0x30(%rsp),%r9
  0x00007f757049b434: mov    0x38(%rsp),%r8
  0x00007f757049b439: mov    0x40(%rsp),%rdi
  0x00007f757049b43e: mov    0x48(%rsp),%rsi
  0x00007f757049b443: mov    0x50(%rsp),%rbp
  0x00007f757049b448: mov    0x60(%rsp),%rbx
  0x00007f757049b44d: mov    0x68(%rsp),%rdx
  0x00007f757049b452: mov    0x70(%rsp),%rcx
  0x00007f757049b457: mov    0x78(%rsp),%rax
  0x00007f757049b45c: add    $0x80,%rsp
  0x00007f757049b463: add    $0x8,%rsp
  0x00007f757049b467: popfq  
  0x00007f757049b468: mov    %r13,%rsp
  0x00007f757049b46b: pop    %rax
  0x00007f757049b46c: mov    %rsp,%r13
  0x00007f757049b46f: sub    $0x20,%rsp
  0x00007f757049b473: mov    %rax,(%rsp)
  0x00007f757049b477: mov    %rsi,0x18(%rsp)
  0x00007f757049b47c: mov    %rdx,0x10(%rsp)
  0x00007f757049b481: mov    %ecx,0x8(%rsp)
  0x00007f757049b485: mov    0x40(%rbx),%rcx
  0x00007f757049b489: jmpq   *%rcx

AHE@0x00007f75800d5f10: 0xba000000 i2c: 0x00007f757049b560 c2i: 0x00007f757049b677 c2iUV: 0x00007f757049b64a
i2c argument handler #0 for: receiver (Z)V (546 bytes generated)
c2i argument handler starts at 0x7f757049b677
  0x00007f757049b560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049b564: movabs $0x7f757036e3e0,%r11
  0x00007f757049b56e: cmp    %r11,%rax
  0x00007f757049b571: jbe    0x00007f757049b58a
  0x00007f757049b577: movabs $0x7f757046e3e0,%r11
  0x00007f757049b581: cmp    %r11,%rax
  0x00007f757049b584: jb     0x00007f757049b627
  0x00007f757049b58a: movabs $0x7f7570369420,%r11
  0x00007f757049b594: cmp    %r11,%rax
  0x00007f757049b597: jbe    0x00007f757049b5b0
  0x00007f757049b59d: movabs $0x7f757036de58,%r11
  0x00007f757049b5a7: cmp    %r11,%rax
  0x00007f757049b5aa: jb     0x00007f757049b627
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049b5b0: mov    %rsp,-0x28(%rsp)
  0x00007f757049b5b5: sub    $0x80,%rsp
  0x00007f757049b5bc: mov    %rax,0x78(%rsp)
  0x00007f757049b5c1: mov    %rcx,0x70(%rsp)
  0x00007f757049b5c6: mov    %rdx,0x68(%rsp)
  0x00007f757049b5cb: mov    %rbx,0x60(%rsp)
  0x00007f757049b5d0: mov    %rbp,0x50(%rsp)
  0x00007f757049b5d5: mov    %rsi,0x48(%rsp)
  0x00007f757049b5da: mov    %rdi,0x40(%rsp)
  0x00007f757049b5df: mov    %r8,0x38(%rsp)
  0x00007f757049b5e4: mov    %r9,0x30(%rsp)
  0x00007f757049b5e9: mov    %r10,0x28(%rsp)
  0x00007f757049b5ee: mov    %r11,0x20(%rsp)
  0x00007f757049b5f3: mov    %r12,0x18(%rsp)
  0x00007f757049b5f8: mov    %r13,0x10(%rsp)
  0x00007f757049b5fd: mov    %r14,0x8(%rsp)
  0x00007f757049b602: mov    %r15,(%rsp)
  0x00007f757049b606: movabs $0x7f758592f470,%rdi
  0x00007f757049b610: movabs $0x7f757049b5b0,%rsi
  0x00007f757049b61a: mov    %rsp,%rdx
  0x00007f757049b61d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b621: callq  0x00007f75853729fa
  0x00007f757049b626: hlt    
  ;; } verify_i2ce 
  0x00007f757049b627: mov    %rsp,%r11
  0x00007f757049b62a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b62e: push   %rax
  0x00007f757049b62f: mov    %r11,%rax
  0x00007f757049b632: mov    0x50(%rbx),%r11
  0x00007f757049b636: mov    0x10(%rax),%rsi
  0x00007f757049b63a: mov    0x8(%rax),%edx
  0x00007f757049b63d: mov    %rbx,0x258(%r15)
  0x00007f757049b644: mov    %rbx,%rax
  0x00007f757049b647: jmpq   *%r11
  0x00007f757049b64a: mov    0x8(%rsi),%ebx
  0x00007f757049b64d: shl    $0x3,%rbx
  0x00007f757049b651: cmp    0x10(%rax),%rbx
  0x00007f757049b655: mov    0x8(%rax),%rbx
  0x00007f757049b659: je     0x00007f757049b664
  0x00007f757049b65f: jmpq   0x00007f757046ec40
  0x00007f757049b664: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b66c: je     0x00007f757049b767
  0x00007f757049b672: jmpq   0x00007f757046ec40
  0x00007f757049b677: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b67f: je     0x00007f757049b767
  0x00007f757049b685: mov    %rsp,%r13
  0x00007f757049b688: mov    (%rsp),%rax
  0x00007f757049b68c: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b690: pushfq 
  0x00007f757049b691: sub    $0x8,%rsp
  0x00007f757049b695: mov    %rsp,-0x28(%rsp)
  0x00007f757049b69a: sub    $0x80,%rsp
  0x00007f757049b6a1: mov    %rax,0x78(%rsp)
  0x00007f757049b6a6: mov    %rcx,0x70(%rsp)
  0x00007f757049b6ab: mov    %rdx,0x68(%rsp)
  0x00007f757049b6b0: mov    %rbx,0x60(%rsp)
  0x00007f757049b6b5: mov    %rbp,0x50(%rsp)
  0x00007f757049b6ba: mov    %rsi,0x48(%rsp)
  0x00007f757049b6bf: mov    %rdi,0x40(%rsp)
  0x00007f757049b6c4: mov    %r8,0x38(%rsp)
  0x00007f757049b6c9: mov    %r9,0x30(%rsp)
  0x00007f757049b6ce: mov    %r10,0x28(%rsp)
  0x00007f757049b6d3: mov    %r11,0x20(%rsp)
  0x00007f757049b6d8: mov    %r12,0x18(%rsp)
  0x00007f757049b6dd: mov    %r13,0x10(%rsp)
  0x00007f757049b6e2: mov    %r14,0x8(%rsp)
  0x00007f757049b6e7: mov    %r15,(%rsp)
  0x00007f757049b6eb: sub    $0x200,%rsp
  0x00007f757049b6f2: fxsave64 (%rsp)
  0x00007f757049b6f7: mov    %rbx,%rdi
  0x00007f757049b6fa: mov    %rax,%rsi
  0x00007f757049b6fd: callq  0x00007f7585522bca
  0x00007f757049b702: fxrstor64 (%rsp)
  0x00007f757049b707: add    $0x200,%rsp
  0x00007f757049b70e: mov    (%rsp),%r15
  0x00007f757049b712: mov    0x8(%rsp),%r14
  0x00007f757049b717: mov    0x10(%rsp),%r13
  0x00007f757049b71c: mov    0x18(%rsp),%r12
  0x00007f757049b721: mov    0x20(%rsp),%r11
  0x00007f757049b726: mov    0x28(%rsp),%r10
  0x00007f757049b72b: mov    0x30(%rsp),%r9
  0x00007f757049b730: mov    0x38(%rsp),%r8
  0x00007f757049b735: mov    0x40(%rsp),%rdi
  0x00007f757049b73a: mov    0x48(%rsp),%rsi
  0x00007f757049b73f: mov    0x50(%rsp),%rbp
  0x00007f757049b744: mov    0x60(%rsp),%rbx
  0x00007f757049b749: mov    0x68(%rsp),%rdx
  0x00007f757049b74e: mov    0x70(%rsp),%rcx
  0x00007f757049b753: mov    0x78(%rsp),%rax
  0x00007f757049b758: add    $0x80,%rsp
  0x00007f757049b75f: add    $0x8,%rsp
  0x00007f757049b763: popfq  
  0x00007f757049b764: mov    %r13,%rsp
  0x00007f757049b767: pop    %rax
  0x00007f757049b768: mov    %rsp,%r13
  0x00007f757049b76b: sub    $0x20,%rsp
  0x00007f757049b76f: mov    %rax,(%rsp)
  0x00007f757049b773: mov    %rsi,0x10(%rsp)
  0x00007f757049b778: mov    %edx,0x8(%rsp)
  0x00007f757049b77c: mov    0x40(%rbx),%rcx
  0x00007f757049b780: jmpq   *%rcx

AHE@0x00007f75800d5f58: 0xbb000000 i2c: 0x00007f757049b860 c2i: 0x00007f757049b978 c2iUV: 0x00007f757049b94b
i2c argument handler #0 for: static (Ljava/lang/Class;Ljava/io/File;)Z (548 bytes generated)
c2i argument handler starts at 0x7f757049b978
  0x00007f757049b860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049b864: movabs $0x7f757036e3e0,%r11
  0x00007f757049b86e: cmp    %r11,%rax
  0x00007f757049b871: jbe    0x00007f757049b88a
  0x00007f757049b877: movabs $0x7f757046e3e0,%r11
  0x00007f757049b881: cmp    %r11,%rax
  0x00007f757049b884: jb     0x00007f757049b927
  0x00007f757049b88a: movabs $0x7f7570369420,%r11
  0x00007f757049b894: cmp    %r11,%rax
  0x00007f757049b897: jbe    0x00007f757049b8b0
  0x00007f757049b89d: movabs $0x7f757036de58,%r11
  0x00007f757049b8a7: cmp    %r11,%rax
  0x00007f757049b8aa: jb     0x00007f757049b927
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049b8b0: mov    %rsp,-0x28(%rsp)
  0x00007f757049b8b5: sub    $0x80,%rsp
  0x00007f757049b8bc: mov    %rax,0x78(%rsp)
  0x00007f757049b8c1: mov    %rcx,0x70(%rsp)
  0x00007f757049b8c6: mov    %rdx,0x68(%rsp)
  0x00007f757049b8cb: mov    %rbx,0x60(%rsp)
  0x00007f757049b8d0: mov    %rbp,0x50(%rsp)
  0x00007f757049b8d5: mov    %rsi,0x48(%rsp)
  0x00007f757049b8da: mov    %rdi,0x40(%rsp)
  0x00007f757049b8df: mov    %r8,0x38(%rsp)
  0x00007f757049b8e4: mov    %r9,0x30(%rsp)
  0x00007f757049b8e9: mov    %r10,0x28(%rsp)
  0x00007f757049b8ee: mov    %r11,0x20(%rsp)
  0x00007f757049b8f3: mov    %r12,0x18(%rsp)
  0x00007f757049b8f8: mov    %r13,0x10(%rsp)
  0x00007f757049b8fd: mov    %r14,0x8(%rsp)
  0x00007f757049b902: mov    %r15,(%rsp)
  0x00007f757049b906: movabs $0x7f758592f470,%rdi
  0x00007f757049b910: movabs $0x7f757049b8b0,%rsi
  0x00007f757049b91a: mov    %rsp,%rdx
  0x00007f757049b91d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b921: callq  0x00007f75853729fa
  0x00007f757049b926: hlt    
  ;; } verify_i2ce 
  0x00007f757049b927: mov    %rsp,%r11
  0x00007f757049b92a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b92e: push   %rax
  0x00007f757049b92f: mov    %r11,%rax
  0x00007f757049b932: mov    0x50(%rbx),%r11
  0x00007f757049b936: mov    0x10(%rax),%rsi
  0x00007f757049b93a: mov    0x8(%rax),%rdx
  0x00007f757049b93e: mov    %rbx,0x258(%r15)
  0x00007f757049b945: mov    %rbx,%rax
  0x00007f757049b948: jmpq   *%r11
  0x00007f757049b94b: mov    0x8(%rsi),%ebx
  0x00007f757049b94e: shl    $0x3,%rbx
  0x00007f757049b952: cmp    0x10(%rax),%rbx
  0x00007f757049b956: mov    0x8(%rax),%rbx
  0x00007f757049b95a: je     0x00007f757049b965
  0x00007f757049b960: jmpq   0x00007f757046ec40
  0x00007f757049b965: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b96d: je     0x00007f757049ba68
  0x00007f757049b973: jmpq   0x00007f757046ec40
  0x00007f757049b978: cmpq   $0x0,0x58(%rbx)
  0x00007f757049b980: je     0x00007f757049ba68
  0x00007f757049b986: mov    %rsp,%r13
  0x00007f757049b989: mov    (%rsp),%rax
  0x00007f757049b98d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049b991: pushfq 
  0x00007f757049b992: sub    $0x8,%rsp
  0x00007f757049b996: mov    %rsp,-0x28(%rsp)
  0x00007f757049b99b: sub    $0x80,%rsp
  0x00007f757049b9a2: mov    %rax,0x78(%rsp)
  0x00007f757049b9a7: mov    %rcx,0x70(%rsp)
  0x00007f757049b9ac: mov    %rdx,0x68(%rsp)
  0x00007f757049b9b1: mov    %rbx,0x60(%rsp)
  0x00007f757049b9b6: mov    %rbp,0x50(%rsp)
  0x00007f757049b9bb: mov    %rsi,0x48(%rsp)
  0x00007f757049b9c0: mov    %rdi,0x40(%rsp)
  0x00007f757049b9c5: mov    %r8,0x38(%rsp)
  0x00007f757049b9ca: mov    %r9,0x30(%rsp)
  0x00007f757049b9cf: mov    %r10,0x28(%rsp)
  0x00007f757049b9d4: mov    %r11,0x20(%rsp)
  0x00007f757049b9d9: mov    %r12,0x18(%rsp)
  0x00007f757049b9de: mov    %r13,0x10(%rsp)
  0x00007f757049b9e3: mov    %r14,0x8(%rsp)
  0x00007f757049b9e8: mov    %r15,(%rsp)
  0x00007f757049b9ec: sub    $0x200,%rsp
  0x00007f757049b9f3: fxsave64 (%rsp)
  0x00007f757049b9f8: mov    %rbx,%rdi
  0x00007f757049b9fb: mov    %rax,%rsi
  0x00007f757049b9fe: callq  0x00007f7585522bca
  0x00007f757049ba03: fxrstor64 (%rsp)
  0x00007f757049ba08: add    $0x200,%rsp
  0x00007f757049ba0f: mov    (%rsp),%r15
  0x00007f757049ba13: mov    0x8(%rsp),%r14
  0x00007f757049ba18: mov    0x10(%rsp),%r13
  0x00007f757049ba1d: mov    0x18(%rsp),%r12
  0x00007f757049ba22: mov    0x20(%rsp),%r11
  0x00007f757049ba27: mov    0x28(%rsp),%r10
  0x00007f757049ba2c: mov    0x30(%rsp),%r9
  0x00007f757049ba31: mov    0x38(%rsp),%r8
  0x00007f757049ba36: mov    0x40(%rsp),%rdi
  0x00007f757049ba3b: mov    0x48(%rsp),%rsi
  0x00007f757049ba40: mov    0x50(%rsp),%rbp
  0x00007f757049ba45: mov    0x60(%rsp),%rbx
  0x00007f757049ba4a: mov    0x68(%rsp),%rdx
  0x00007f757049ba4f: mov    0x70(%rsp),%rcx
  0x00007f757049ba54: mov    0x78(%rsp),%rax
  0x00007f757049ba59: add    $0x80,%rsp
  0x00007f757049ba60: add    $0x8,%rsp
  0x00007f757049ba64: popfq  
  0x00007f757049ba65: mov    %r13,%rsp
  0x00007f757049ba68: pop    %rax
  0x00007f757049ba69: mov    %rsp,%r13
  0x00007f757049ba6c: sub    $0x20,%rsp
  0x00007f757049ba70: mov    %rax,(%rsp)
  0x00007f757049ba74: mov    %rsi,0x10(%rsp)
  0x00007f757049ba79: mov    %rdx,0x8(%rsp)
  0x00007f757049ba7e: mov    0x40(%rbx),%rcx
  0x00007f757049ba82: jmpq   *%rcx

AHE@0x00007f75800d5fa0: 0xb0000000 i2c: 0x00007f757049bb60 c2i: 0x00007f757049bc74 c2iUV: 0x00007f757049bc47
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f757049bc74
  0x00007f757049bb60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049bb64: movabs $0x7f757036e3e0,%r11
  0x00007f757049bb6e: cmp    %r11,%rax
  0x00007f757049bb71: jbe    0x00007f757049bb8a
  0x00007f757049bb77: movabs $0x7f757046e3e0,%r11
  0x00007f757049bb81: cmp    %r11,%rax
  0x00007f757049bb84: jb     0x00007f757049bc27
  0x00007f757049bb8a: movabs $0x7f7570369420,%r11
  0x00007f757049bb94: cmp    %r11,%rax
  0x00007f757049bb97: jbe    0x00007f757049bbb0
  0x00007f757049bb9d: movabs $0x7f757036de58,%r11
  0x00007f757049bba7: cmp    %r11,%rax
  0x00007f757049bbaa: jb     0x00007f757049bc27
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049bbb0: mov    %rsp,-0x28(%rsp)
  0x00007f757049bbb5: sub    $0x80,%rsp
  0x00007f757049bbbc: mov    %rax,0x78(%rsp)
  0x00007f757049bbc1: mov    %rcx,0x70(%rsp)
  0x00007f757049bbc6: mov    %rdx,0x68(%rsp)
  0x00007f757049bbcb: mov    %rbx,0x60(%rsp)
  0x00007f757049bbd0: mov    %rbp,0x50(%rsp)
  0x00007f757049bbd5: mov    %rsi,0x48(%rsp)
  0x00007f757049bbda: mov    %rdi,0x40(%rsp)
  0x00007f757049bbdf: mov    %r8,0x38(%rsp)
  0x00007f757049bbe4: mov    %r9,0x30(%rsp)
  0x00007f757049bbe9: mov    %r10,0x28(%rsp)
  0x00007f757049bbee: mov    %r11,0x20(%rsp)
  0x00007f757049bbf3: mov    %r12,0x18(%rsp)
  0x00007f757049bbf8: mov    %r13,0x10(%rsp)
  0x00007f757049bbfd: mov    %r14,0x8(%rsp)
  0x00007f757049bc02: mov    %r15,(%rsp)
  0x00007f757049bc06: movabs $0x7f758592f470,%rdi
  0x00007f757049bc10: movabs $0x7f757049bbb0,%rsi
  0x00007f757049bc1a: mov    %rsp,%rdx
  0x00007f757049bc1d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049bc21: callq  0x00007f75853729fa
  0x00007f757049bc26: hlt    
  ;; } verify_i2ce 
  0x00007f757049bc27: mov    %rsp,%r11
  0x00007f757049bc2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049bc2e: push   %rax
  0x00007f757049bc2f: mov    %r11,%rax
  0x00007f757049bc32: mov    0x50(%rbx),%r11
  0x00007f757049bc36: mov    0x8(%rax),%rsi
  0x00007f757049bc3a: mov    %rbx,0x258(%r15)
  0x00007f757049bc41: mov    %rbx,%rax
  0x00007f757049bc44: jmpq   *%r11
  0x00007f757049bc47: mov    0x8(%rsi),%ebx
  0x00007f757049bc4a: shl    $0x3,%rbx
  0x00007f757049bc4e: cmp    0x10(%rax),%rbx
  0x00007f757049bc52: mov    0x8(%rax),%rbx
  0x00007f757049bc56: je     0x00007f757049bc61
  0x00007f757049bc5c: jmpq   0x00007f757046ec40
  0x00007f757049bc61: cmpq   $0x0,0x58(%rbx)
  0x00007f757049bc69: je     0x00007f757049bd64
  0x00007f757049bc6f: jmpq   0x00007f757046ec40
  0x00007f757049bc74: cmpq   $0x0,0x58(%rbx)
  0x00007f757049bc7c: je     0x00007f757049bd64
  0x00007f757049bc82: mov    %rsp,%r13
  0x00007f757049bc85: mov    (%rsp),%rax
  0x00007f757049bc89: and    $0xfffffffffffffff0,%rsp
  0x00007f757049bc8d: pushfq 
  0x00007f757049bc8e: sub    $0x8,%rsp
  0x00007f757049bc92: mov    %rsp,-0x28(%rsp)
  0x00007f757049bc97: sub    $0x80,%rsp
  0x00007f757049bc9e: mov    %rax,0x78(%rsp)
  0x00007f757049bca3: mov    %rcx,0x70(%rsp)
  0x00007f757049bca8: mov    %rdx,0x68(%rsp)
  0x00007f757049bcad: mov    %rbx,0x60(%rsp)
  0x00007f757049bcb2: mov    %rbp,0x50(%rsp)
  0x00007f757049bcb7: mov    %rsi,0x48(%rsp)
  0x00007f757049bcbc: mov    %rdi,0x40(%rsp)
  0x00007f757049bcc1: mov    %r8,0x38(%rsp)
  0x00007f757049bcc6: mov    %r9,0x30(%rsp)
  0x00007f757049bccb: mov    %r10,0x28(%rsp)
  0x00007f757049bcd0: mov    %r11,0x20(%rsp)
  0x00007f757049bcd5: mov    %r12,0x18(%rsp)
  0x00007f757049bcda: mov    %r13,0x10(%rsp)
  0x00007f757049bcdf: mov    %r14,0x8(%rsp)
  0x00007f757049bce4: mov    %r15,(%rsp)
  0x00007f757049bce8: sub    $0x200,%rsp
  0x00007f757049bcef: fxsave64 (%rsp)
  0x00007f757049bcf4: mov    %rbx,%rdi
  0x00007f757049bcf7: mov    %rax,%rsi
  0x00007f757049bcfa: callq  0x00007f7585522bca
  0x00007f757049bcff: fxrstor64 (%rsp)
  0x00007f757049bd04: add    $0x200,%rsp
  0x00007f757049bd0b: mov    (%rsp),%r15
  0x00007f757049bd0f: mov    0x8(%rsp),%r14
  0x00007f757049bd14: mov    0x10(%rsp),%r13
  0x00007f757049bd19: mov    0x18(%rsp),%r12
  0x00007f757049bd1e: mov    0x20(%rsp),%r11
  0x00007f757049bd23: mov    0x28(%rsp),%r10
  0x00007f757049bd28: mov    0x30(%rsp),%r9
  0x00007f757049bd2d: mov    0x38(%rsp),%r8
  0x00007f757049bd32: mov    0x40(%rsp),%rdi
  0x00007f757049bd37: mov    0x48(%rsp),%rsi
  0x00007f757049bd3c: mov    0x50(%rsp),%rbp
  0x00007f757049bd41: mov    0x60(%rsp),%rbx
  0x00007f757049bd46: mov    0x68(%rsp),%rdx
  0x00007f757049bd4b: mov    0x70(%rsp),%rcx
  0x00007f757049bd50: mov    0x78(%rsp),%rax
  0x00007f757049bd55: add    $0x80,%rsp
  0x00007f757049bd5c: add    $0x8,%rsp
  0x00007f757049bd60: popfq  
  0x00007f757049bd61: mov    %r13,%rsp
  0x00007f757049bd64: pop    %rax
  0x00007f757049bd65: mov    %rsp,%r13
  0x00007f757049bd68: sub    $0x10,%rsp
  0x00007f757049bd6c: mov    %rax,(%rsp)
  0x00007f757049bd70: mov    %rsi,0x8(%rsp)
  0x00007f757049bd75: mov    0x40(%rbx),%rcx
  0x00007f757049bd79: jmpq   *%rcx

AHE@0x00007f75800d5fe8: 0xbba00000 i2c: 0x00007f757049be20 c2i: 0x00007f757049bf3b c2iUV: 0x00007f757049bf0e
i2c argument handler #0 for: static (Ljava/lang/Class;Ljava/lang/String;Z)V (555 bytes generated)
c2i argument handler starts at 0x7f757049bf3b
  0x00007f757049be20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049be24: movabs $0x7f757036e3e0,%r11
  0x00007f757049be2e: cmp    %r11,%rax
  0x00007f757049be31: jbe    0x00007f757049be4a
  0x00007f757049be37: movabs $0x7f757046e3e0,%r11
  0x00007f757049be41: cmp    %r11,%rax
  0x00007f757049be44: jb     0x00007f757049bee7
  0x00007f757049be4a: movabs $0x7f7570369420,%r11
  0x00007f757049be54: cmp    %r11,%rax
  0x00007f757049be57: jbe    0x00007f757049be70
  0x00007f757049be5d: movabs $0x7f757036de58,%r11
  0x00007f757049be67: cmp    %r11,%rax
  0x00007f757049be6a: jb     0x00007f757049bee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049be70: mov    %rsp,-0x28(%rsp)
  0x00007f757049be75: sub    $0x80,%rsp
  0x00007f757049be7c: mov    %rax,0x78(%rsp)
  0x00007f757049be81: mov    %rcx,0x70(%rsp)
  0x00007f757049be86: mov    %rdx,0x68(%rsp)
  0x00007f757049be8b: mov    %rbx,0x60(%rsp)
  0x00007f757049be90: mov    %rbp,0x50(%rsp)
  0x00007f757049be95: mov    %rsi,0x48(%rsp)
  0x00007f757049be9a: mov    %rdi,0x40(%rsp)
  0x00007f757049be9f: mov    %r8,0x38(%rsp)
  0x00007f757049bea4: mov    %r9,0x30(%rsp)
  0x00007f757049bea9: mov    %r10,0x28(%rsp)
  0x00007f757049beae: mov    %r11,0x20(%rsp)
  0x00007f757049beb3: mov    %r12,0x18(%rsp)
  0x00007f757049beb8: mov    %r13,0x10(%rsp)
  0x00007f757049bebd: mov    %r14,0x8(%rsp)
  0x00007f757049bec2: mov    %r15,(%rsp)
  0x00007f757049bec6: movabs $0x7f758592f470,%rdi
  0x00007f757049bed0: movabs $0x7f757049be70,%rsi
  0x00007f757049beda: mov    %rsp,%rdx
  0x00007f757049bedd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049bee1: callq  0x00007f75853729fa
  0x00007f757049bee6: hlt    
  ;; } verify_i2ce 
  0x00007f757049bee7: mov    %rsp,%r11
  0x00007f757049beea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049beee: push   %rax
  0x00007f757049beef: mov    %r11,%rax
  0x00007f757049bef2: mov    0x50(%rbx),%r11
  0x00007f757049bef6: mov    0x18(%rax),%rsi
  0x00007f757049befa: mov    0x10(%rax),%rdx
  0x00007f757049befe: mov    0x8(%rax),%ecx
  0x00007f757049bf01: mov    %rbx,0x258(%r15)
  0x00007f757049bf08: mov    %rbx,%rax
  0x00007f757049bf0b: jmpq   *%r11
  0x00007f757049bf0e: mov    0x8(%rsi),%ebx
  0x00007f757049bf11: shl    $0x3,%rbx
  0x00007f757049bf15: cmp    0x10(%rax),%rbx
  0x00007f757049bf19: mov    0x8(%rax),%rbx
  0x00007f757049bf1d: je     0x00007f757049bf28
  0x00007f757049bf23: jmpq   0x00007f757046ec40
  0x00007f757049bf28: cmpq   $0x0,0x58(%rbx)
  0x00007f757049bf30: je     0x00007f757049c02b
  0x00007f757049bf36: jmpq   0x00007f757046ec40
  0x00007f757049bf3b: cmpq   $0x0,0x58(%rbx)
  0x00007f757049bf43: je     0x00007f757049c02b
  0x00007f757049bf49: mov    %rsp,%r13
  0x00007f757049bf4c: mov    (%rsp),%rax
  0x00007f757049bf50: and    $0xfffffffffffffff0,%rsp
  0x00007f757049bf54: pushfq 
  0x00007f757049bf55: sub    $0x8,%rsp
  0x00007f757049bf59: mov    %rsp,-0x28(%rsp)
  0x00007f757049bf5e: sub    $0x80,%rsp
  0x00007f757049bf65: mov    %rax,0x78(%rsp)
  0x00007f757049bf6a: mov    %rcx,0x70(%rsp)
  0x00007f757049bf6f: mov    %rdx,0x68(%rsp)
  0x00007f757049bf74: mov    %rbx,0x60(%rsp)
  0x00007f757049bf79: mov    %rbp,0x50(%rsp)
  0x00007f757049bf7e: mov    %rsi,0x48(%rsp)
  0x00007f757049bf83: mov    %rdi,0x40(%rsp)
  0x00007f757049bf88: mov    %r8,0x38(%rsp)
  0x00007f757049bf8d: mov    %r9,0x30(%rsp)
  0x00007f757049bf92: mov    %r10,0x28(%rsp)
  0x00007f757049bf97: mov    %r11,0x20(%rsp)
  0x00007f757049bf9c: mov    %r12,0x18(%rsp)
  0x00007f757049bfa1: mov    %r13,0x10(%rsp)
  0x00007f757049bfa6: mov    %r14,0x8(%rsp)
  0x00007f757049bfab: mov    %r15,(%rsp)
  0x00007f757049bfaf: sub    $0x200,%rsp
  0x00007f757049bfb6: fxsave64 (%rsp)
  0x00007f757049bfbb: mov    %rbx,%rdi
  0x00007f757049bfbe: mov    %rax,%rsi
  0x00007f757049bfc1: callq  0x00007f7585522bca
  0x00007f757049bfc6: fxrstor64 (%rsp)
  0x00007f757049bfcb: add    $0x200,%rsp
  0x00007f757049bfd2: mov    (%rsp),%r15
  0x00007f757049bfd6: mov    0x8(%rsp),%r14
  0x00007f757049bfdb: mov    0x10(%rsp),%r13
  0x00007f757049bfe0: mov    0x18(%rsp),%r12
  0x00007f757049bfe5: mov    0x20(%rsp),%r11
  0x00007f757049bfea: mov    0x28(%rsp),%r10
  0x00007f757049bfef: mov    0x30(%rsp),%r9
  0x00007f757049bff4: mov    0x38(%rsp),%r8
  0x00007f757049bff9: mov    0x40(%rsp),%rdi
  0x00007f757049bffe: mov    0x48(%rsp),%rsi
  0x00007f757049c003: mov    0x50(%rsp),%rbp
  0x00007f757049c008: mov    0x60(%rsp),%rbx
  0x00007f757049c00d: mov    0x68(%rsp),%rdx
  0x00007f757049c012: mov    0x70(%rsp),%rcx
  0x00007f757049c017: mov    0x78(%rsp),%rax
  0x00007f757049c01c: add    $0x80,%rsp
  0x00007f757049c023: add    $0x8,%rsp
  0x00007f757049c027: popfq  
  0x00007f757049c028: mov    %r13,%rsp
  0x00007f757049c02b: pop    %rax
  0x00007f757049c02c: mov    %rsp,%r13
  0x00007f757049c02f: sub    $0x20,%rsp
  0x00007f757049c033: mov    %rax,(%rsp)
  0x00007f757049c037: mov    %rsi,0x18(%rsp)
  0x00007f757049c03c: mov    %rdx,0x10(%rsp)
  0x00007f757049c041: mov    %ecx,0x8(%rsp)
  0x00007f757049c045: mov    0x40(%rbx),%rcx
  0x00007f757049c049: jmpq   *%rcx

AHE@0x00007f75800d6030: 0xb0000000 i2c: 0x00007f757049c120 c2i: 0x00007f757049c234 c2iUV: 0x00007f757049c207
i2c argument handler #0 for: static (Ljava/lang/String;)[Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f757049c234
  0x00007f757049c120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049c124: movabs $0x7f757036e3e0,%r11
  0x00007f757049c12e: cmp    %r11,%rax
  0x00007f757049c131: jbe    0x00007f757049c14a
  0x00007f757049c137: movabs $0x7f757046e3e0,%r11
  0x00007f757049c141: cmp    %r11,%rax
  0x00007f757049c144: jb     0x00007f757049c1e7
  0x00007f757049c14a: movabs $0x7f7570369420,%r11
  0x00007f757049c154: cmp    %r11,%rax
  0x00007f757049c157: jbe    0x00007f757049c170
  0x00007f757049c15d: movabs $0x7f757036de58,%r11
  0x00007f757049c167: cmp    %r11,%rax
  0x00007f757049c16a: jb     0x00007f757049c1e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049c170: mov    %rsp,-0x28(%rsp)
  0x00007f757049c175: sub    $0x80,%rsp
  0x00007f757049c17c: mov    %rax,0x78(%rsp)
  0x00007f757049c181: mov    %rcx,0x70(%rsp)
  0x00007f757049c186: mov    %rdx,0x68(%rsp)
  0x00007f757049c18b: mov    %rbx,0x60(%rsp)
  0x00007f757049c190: mov    %rbp,0x50(%rsp)
  0x00007f757049c195: mov    %rsi,0x48(%rsp)
  0x00007f757049c19a: mov    %rdi,0x40(%rsp)
  0x00007f757049c19f: mov    %r8,0x38(%rsp)
  0x00007f757049c1a4: mov    %r9,0x30(%rsp)
  0x00007f757049c1a9: mov    %r10,0x28(%rsp)
  0x00007f757049c1ae: mov    %r11,0x20(%rsp)
  0x00007f757049c1b3: mov    %r12,0x18(%rsp)
  0x00007f757049c1b8: mov    %r13,0x10(%rsp)
  0x00007f757049c1bd: mov    %r14,0x8(%rsp)
  0x00007f757049c1c2: mov    %r15,(%rsp)
  0x00007f757049c1c6: movabs $0x7f758592f470,%rdi
  0x00007f757049c1d0: movabs $0x7f757049c170,%rsi
  0x00007f757049c1da: mov    %rsp,%rdx
  0x00007f757049c1dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c1e1: callq  0x00007f75853729fa
  0x00007f757049c1e6: hlt    
  ;; } verify_i2ce 
  0x00007f757049c1e7: mov    %rsp,%r11
  0x00007f757049c1ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c1ee: push   %rax
  0x00007f757049c1ef: mov    %r11,%rax
  0x00007f757049c1f2: mov    0x50(%rbx),%r11
  0x00007f757049c1f6: mov    0x8(%rax),%rsi
  0x00007f757049c1fa: mov    %rbx,0x258(%r15)
  0x00007f757049c201: mov    %rbx,%rax
  0x00007f757049c204: jmpq   *%r11
  0x00007f757049c207: mov    0x8(%rsi),%ebx
  0x00007f757049c20a: shl    $0x3,%rbx
  0x00007f757049c20e: cmp    0x10(%rax),%rbx
  0x00007f757049c212: mov    0x8(%rax),%rbx
  0x00007f757049c216: je     0x00007f757049c221
  0x00007f757049c21c: jmpq   0x00007f757046ec40
  0x00007f757049c221: cmpq   $0x0,0x58(%rbx)
  0x00007f757049c229: je     0x00007f757049c324
  0x00007f757049c22f: jmpq   0x00007f757046ec40
  0x00007f757049c234: cmpq   $0x0,0x58(%rbx)
  0x00007f757049c23c: je     0x00007f757049c324
  0x00007f757049c242: mov    %rsp,%r13
  0x00007f757049c245: mov    (%rsp),%rax
  0x00007f757049c249: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c24d: pushfq 
  0x00007f757049c24e: sub    $0x8,%rsp
  0x00007f757049c252: mov    %rsp,-0x28(%rsp)
  0x00007f757049c257: sub    $0x80,%rsp
  0x00007f757049c25e: mov    %rax,0x78(%rsp)
  0x00007f757049c263: mov    %rcx,0x70(%rsp)
  0x00007f757049c268: mov    %rdx,0x68(%rsp)
  0x00007f757049c26d: mov    %rbx,0x60(%rsp)
  0x00007f757049c272: mov    %rbp,0x50(%rsp)
  0x00007f757049c277: mov    %rsi,0x48(%rsp)
  0x00007f757049c27c: mov    %rdi,0x40(%rsp)
  0x00007f757049c281: mov    %r8,0x38(%rsp)
  0x00007f757049c286: mov    %r9,0x30(%rsp)
  0x00007f757049c28b: mov    %r10,0x28(%rsp)
  0x00007f757049c290: mov    %r11,0x20(%rsp)
  0x00007f757049c295: mov    %r12,0x18(%rsp)
  0x00007f757049c29a: mov    %r13,0x10(%rsp)
  0x00007f757049c29f: mov    %r14,0x8(%rsp)
  0x00007f757049c2a4: mov    %r15,(%rsp)
  0x00007f757049c2a8: sub    $0x200,%rsp
  0x00007f757049c2af: fxsave64 (%rsp)
  0x00007f757049c2b4: mov    %rbx,%rdi
  0x00007f757049c2b7: mov    %rax,%rsi
  0x00007f757049c2ba: callq  0x00007f7585522bca
  0x00007f757049c2bf: fxrstor64 (%rsp)
  0x00007f757049c2c4: add    $0x200,%rsp
  0x00007f757049c2cb: mov    (%rsp),%r15
  0x00007f757049c2cf: mov    0x8(%rsp),%r14
  0x00007f757049c2d4: mov    0x10(%rsp),%r13
  0x00007f757049c2d9: mov    0x18(%rsp),%r12
  0x00007f757049c2de: mov    0x20(%rsp),%r11
  0x00007f757049c2e3: mov    0x28(%rsp),%r10
  0x00007f757049c2e8: mov    0x30(%rsp),%r9
  0x00007f757049c2ed: mov    0x38(%rsp),%r8
  0x00007f757049c2f2: mov    0x40(%rsp),%rdi
  0x00007f757049c2f7: mov    0x48(%rsp),%rsi
  0x00007f757049c2fc: mov    0x50(%rsp),%rbp
  0x00007f757049c301: mov    0x60(%rsp),%rbx
  0x00007f757049c306: mov    0x68(%rsp),%rdx
  0x00007f757049c30b: mov    0x70(%rsp),%rcx
  0x00007f757049c310: mov    0x78(%rsp),%rax
  0x00007f757049c315: add    $0x80,%rsp
  0x00007f757049c31c: add    $0x8,%rsp
  0x00007f757049c320: popfq  
  0x00007f757049c321: mov    %r13,%rsp
  0x00007f757049c324: pop    %rax
  0x00007f757049c325: mov    %rsp,%r13
  0x00007f757049c328: sub    $0x10,%rsp
  0x00007f757049c32c: mov    %rax,(%rsp)
  0x00007f757049c330: mov    %rsi,0x8(%rsp)
  0x00007f757049c335: mov    0x40(%rbx),%rcx
  0x00007f757049c339: jmpq   *%rcx

AHE@0x00007f75800d6078: 0xbb000000 i2c: 0x00007f757049c3e0 c2i: 0x00007f757049c4f8 c2iUV: 0x00007f757049c4cb
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/String; (548 bytes generated)
c2i argument handler starts at 0x7f757049c4f8
  0x00007f757049c3e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049c3e4: movabs $0x7f757036e3e0,%r11
  0x00007f757049c3ee: cmp    %r11,%rax
  0x00007f757049c3f1: jbe    0x00007f757049c40a
  0x00007f757049c3f7: movabs $0x7f757046e3e0,%r11
  0x00007f757049c401: cmp    %r11,%rax
  0x00007f757049c404: jb     0x00007f757049c4a7
  0x00007f757049c40a: movabs $0x7f7570369420,%r11
  0x00007f757049c414: cmp    %r11,%rax
  0x00007f757049c417: jbe    0x00007f757049c430
  0x00007f757049c41d: movabs $0x7f757036de58,%r11
  0x00007f757049c427: cmp    %r11,%rax
  0x00007f757049c42a: jb     0x00007f757049c4a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049c430: mov    %rsp,-0x28(%rsp)
  0x00007f757049c435: sub    $0x80,%rsp
  0x00007f757049c43c: mov    %rax,0x78(%rsp)
  0x00007f757049c441: mov    %rcx,0x70(%rsp)
  0x00007f757049c446: mov    %rdx,0x68(%rsp)
  0x00007f757049c44b: mov    %rbx,0x60(%rsp)
  0x00007f757049c450: mov    %rbp,0x50(%rsp)
  0x00007f757049c455: mov    %rsi,0x48(%rsp)
  0x00007f757049c45a: mov    %rdi,0x40(%rsp)
  0x00007f757049c45f: mov    %r8,0x38(%rsp)
  0x00007f757049c464: mov    %r9,0x30(%rsp)
  0x00007f757049c469: mov    %r10,0x28(%rsp)
  0x00007f757049c46e: mov    %r11,0x20(%rsp)
  0x00007f757049c473: mov    %r12,0x18(%rsp)
  0x00007f757049c478: mov    %r13,0x10(%rsp)
  0x00007f757049c47d: mov    %r14,0x8(%rsp)
  0x00007f757049c482: mov    %r15,(%rsp)
  0x00007f757049c486: movabs $0x7f758592f470,%rdi
  0x00007f757049c490: movabs $0x7f757049c430,%rsi
  0x00007f757049c49a: mov    %rsp,%rdx
  0x00007f757049c49d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c4a1: callq  0x00007f75853729fa
  0x00007f757049c4a6: hlt    
  ;; } verify_i2ce 
  0x00007f757049c4a7: mov    %rsp,%r11
  0x00007f757049c4aa: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c4ae: push   %rax
  0x00007f757049c4af: mov    %r11,%rax
  0x00007f757049c4b2: mov    0x50(%rbx),%r11
  0x00007f757049c4b6: mov    0x10(%rax),%rsi
  0x00007f757049c4ba: mov    0x8(%rax),%rdx
  0x00007f757049c4be: mov    %rbx,0x258(%r15)
  0x00007f757049c4c5: mov    %rbx,%rax
  0x00007f757049c4c8: jmpq   *%r11
  0x00007f757049c4cb: mov    0x8(%rsi),%ebx
  0x00007f757049c4ce: shl    $0x3,%rbx
  0x00007f757049c4d2: cmp    0x10(%rax),%rbx
  0x00007f757049c4d6: mov    0x8(%rax),%rbx
  0x00007f757049c4da: je     0x00007f757049c4e5
  0x00007f757049c4e0: jmpq   0x00007f757046ec40
  0x00007f757049c4e5: cmpq   $0x0,0x58(%rbx)
  0x00007f757049c4ed: je     0x00007f757049c5e8
  0x00007f757049c4f3: jmpq   0x00007f757046ec40
  0x00007f757049c4f8: cmpq   $0x0,0x58(%rbx)
  0x00007f757049c500: je     0x00007f757049c5e8
  0x00007f757049c506: mov    %rsp,%r13
  0x00007f757049c509: mov    (%rsp),%rax
  0x00007f757049c50d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c511: pushfq 
  0x00007f757049c512: sub    $0x8,%rsp
  0x00007f757049c516: mov    %rsp,-0x28(%rsp)
  0x00007f757049c51b: sub    $0x80,%rsp
  0x00007f757049c522: mov    %rax,0x78(%rsp)
  0x00007f757049c527: mov    %rcx,0x70(%rsp)
  0x00007f757049c52c: mov    %rdx,0x68(%rsp)
  0x00007f757049c531: mov    %rbx,0x60(%rsp)
  0x00007f757049c536: mov    %rbp,0x50(%rsp)
  0x00007f757049c53b: mov    %rsi,0x48(%rsp)
  0x00007f757049c540: mov    %rdi,0x40(%rsp)
  0x00007f757049c545: mov    %r8,0x38(%rsp)
  0x00007f757049c54a: mov    %r9,0x30(%rsp)
  0x00007f757049c54f: mov    %r10,0x28(%rsp)
  0x00007f757049c554: mov    %r11,0x20(%rsp)
  0x00007f757049c559: mov    %r12,0x18(%rsp)
  0x00007f757049c55e: mov    %r13,0x10(%rsp)
  0x00007f757049c563: mov    %r14,0x8(%rsp)
  0x00007f757049c568: mov    %r15,(%rsp)
  0x00007f757049c56c: sub    $0x200,%rsp
  0x00007f757049c573: fxsave64 (%rsp)
  0x00007f757049c578: mov    %rbx,%rdi
  0x00007f757049c57b: mov    %rax,%rsi
  0x00007f757049c57e: callq  0x00007f7585522bca
  0x00007f757049c583: fxrstor64 (%rsp)
  0x00007f757049c588: add    $0x200,%rsp
  0x00007f757049c58f: mov    (%rsp),%r15
  0x00007f757049c593: mov    0x8(%rsp),%r14
  0x00007f757049c598: mov    0x10(%rsp),%r13
  0x00007f757049c59d: mov    0x18(%rsp),%r12
  0x00007f757049c5a2: mov    0x20(%rsp),%r11
  0x00007f757049c5a7: mov    0x28(%rsp),%r10
  0x00007f757049c5ac: mov    0x30(%rsp),%r9
  0x00007f757049c5b1: mov    0x38(%rsp),%r8
  0x00007f757049c5b6: mov    0x40(%rsp),%rdi
  0x00007f757049c5bb: mov    0x48(%rsp),%rsi
  0x00007f757049c5c0: mov    0x50(%rsp),%rbp
  0x00007f757049c5c5: mov    0x60(%rsp),%rbx
  0x00007f757049c5ca: mov    0x68(%rsp),%rdx
  0x00007f757049c5cf: mov    0x70(%rsp),%rcx
  0x00007f757049c5d4: mov    0x78(%rsp),%rax
  0x00007f757049c5d9: add    $0x80,%rsp
  0x00007f757049c5e0: add    $0x8,%rsp
  0x00007f757049c5e4: popfq  
  0x00007f757049c5e5: mov    %r13,%rsp
  0x00007f757049c5e8: pop    %rax
  0x00007f757049c5e9: mov    %rsp,%r13
  0x00007f757049c5ec: sub    $0x20,%rsp
  0x00007f757049c5f0: mov    %rax,(%rsp)
  0x00007f757049c5f4: mov    %rsi,0x10(%rsp)
  0x00007f757049c5f9: mov    %rdx,0x8(%rsp)
  0x00007f757049c5fe: mov    0x40(%rbx),%rcx
  0x00007f757049c602: jmpq   *%rcx

AHE@0x00007f75800d60c0: 0xb0000000 i2c: 0x00007f757049c6e0 c2i: 0x00007f757049c7f4 c2iUV: 0x00007f757049c7c7
i2c argument handler #0 for: receiver ()[Ljava/lang/Package; (539 bytes generated)
c2i argument handler starts at 0x7f757049c7f4
  0x00007f757049c6e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049c6e4: movabs $0x7f757036e3e0,%r11
  0x00007f757049c6ee: cmp    %r11,%rax
  0x00007f757049c6f1: jbe    0x00007f757049c70a
  0x00007f757049c6f7: movabs $0x7f757046e3e0,%r11
  0x00007f757049c701: cmp    %r11,%rax
  0x00007f757049c704: jb     0x00007f757049c7a7
  0x00007f757049c70a: movabs $0x7f7570369420,%r11
  0x00007f757049c714: cmp    %r11,%rax
  0x00007f757049c717: jbe    0x00007f757049c730
  0x00007f757049c71d: movabs $0x7f757036de58,%r11
  0x00007f757049c727: cmp    %r11,%rax
  0x00007f757049c72a: jb     0x00007f757049c7a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049c730: mov    %rsp,-0x28(%rsp)
  0x00007f757049c735: sub    $0x80,%rsp
  0x00007f757049c73c: mov    %rax,0x78(%rsp)
  0x00007f757049c741: mov    %rcx,0x70(%rsp)
  0x00007f757049c746: mov    %rdx,0x68(%rsp)
  0x00007f757049c74b: mov    %rbx,0x60(%rsp)
  0x00007f757049c750: mov    %rbp,0x50(%rsp)
  0x00007f757049c755: mov    %rsi,0x48(%rsp)
  0x00007f757049c75a: mov    %rdi,0x40(%rsp)
  0x00007f757049c75f: mov    %r8,0x38(%rsp)
  0x00007f757049c764: mov    %r9,0x30(%rsp)
  0x00007f757049c769: mov    %r10,0x28(%rsp)
  0x00007f757049c76e: mov    %r11,0x20(%rsp)
  0x00007f757049c773: mov    %r12,0x18(%rsp)
  0x00007f757049c778: mov    %r13,0x10(%rsp)
  0x00007f757049c77d: mov    %r14,0x8(%rsp)
  0x00007f757049c782: mov    %r15,(%rsp)
  0x00007f757049c786: movabs $0x7f758592f470,%rdi
  0x00007f757049c790: movabs $0x7f757049c730,%rsi
  0x00007f757049c79a: mov    %rsp,%rdx
  0x00007f757049c79d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c7a1: callq  0x00007f75853729fa
  0x00007f757049c7a6: hlt    
  ;; } verify_i2ce 
  0x00007f757049c7a7: mov    %rsp,%r11
  0x00007f757049c7aa: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c7ae: push   %rax
  0x00007f757049c7af: mov    %r11,%rax
  0x00007f757049c7b2: mov    0x50(%rbx),%r11
  0x00007f757049c7b6: mov    0x8(%rax),%rsi
  0x00007f757049c7ba: mov    %rbx,0x258(%r15)
  0x00007f757049c7c1: mov    %rbx,%rax
  0x00007f757049c7c4: jmpq   *%r11
  0x00007f757049c7c7: mov    0x8(%rsi),%ebx
  0x00007f757049c7ca: shl    $0x3,%rbx
  0x00007f757049c7ce: cmp    0x10(%rax),%rbx
  0x00007f757049c7d2: mov    0x8(%rax),%rbx
  0x00007f757049c7d6: je     0x00007f757049c7e1
  0x00007f757049c7dc: jmpq   0x00007f757046ec40
  0x00007f757049c7e1: cmpq   $0x0,0x58(%rbx)
  0x00007f757049c7e9: je     0x00007f757049c8e4
  0x00007f757049c7ef: jmpq   0x00007f757046ec40
  0x00007f757049c7f4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049c7fc: je     0x00007f757049c8e4
  0x00007f757049c802: mov    %rsp,%r13
  0x00007f757049c805: mov    (%rsp),%rax
  0x00007f757049c809: and    $0xfffffffffffffff0,%rsp
  0x00007f757049c80d: pushfq 
  0x00007f757049c80e: sub    $0x8,%rsp
  0x00007f757049c812: mov    %rsp,-0x28(%rsp)
  0x00007f757049c817: sub    $0x80,%rsp
  0x00007f757049c81e: mov    %rax,0x78(%rsp)
  0x00007f757049c823: mov    %rcx,0x70(%rsp)
  0x00007f757049c828: mov    %rdx,0x68(%rsp)
  0x00007f757049c82d: mov    %rbx,0x60(%rsp)
  0x00007f757049c832: mov    %rbp,0x50(%rsp)
  0x00007f757049c837: mov    %rsi,0x48(%rsp)
  0x00007f757049c83c: mov    %rdi,0x40(%rsp)
  0x00007f757049c841: mov    %r8,0x38(%rsp)
  0x00007f757049c846: mov    %r9,0x30(%rsp)
  0x00007f757049c84b: mov    %r10,0x28(%rsp)
  0x00007f757049c850: mov    %r11,0x20(%rsp)
  0x00007f757049c855: mov    %r12,0x18(%rsp)
  0x00007f757049c85a: mov    %r13,0x10(%rsp)
  0x00007f757049c85f: mov    %r14,0x8(%rsp)
  0x00007f757049c864: mov    %r15,(%rsp)
  0x00007f757049c868: sub    $0x200,%rsp
  0x00007f757049c86f: fxsave64 (%rsp)
  0x00007f757049c874: mov    %rbx,%rdi
  0x00007f757049c877: mov    %rax,%rsi
  0x00007f757049c87a: callq  0x00007f7585522bca
  0x00007f757049c87f: fxrstor64 (%rsp)
  0x00007f757049c884: add    $0x200,%rsp
  0x00007f757049c88b: mov    (%rsp),%r15
  0x00007f757049c88f: mov    0x8(%rsp),%r14
  0x00007f757049c894: mov    0x10(%rsp),%r13
  0x00007f757049c899: mov    0x18(%rsp),%r12
  0x00007f757049c89e: mov    0x20(%rsp),%r11
  0x00007f757049c8a3: mov    0x28(%rsp),%r10
  0x00007f757049c8a8: mov    0x30(%rsp),%r9
  0x00007f757049c8ad: mov    0x38(%rsp),%r8
  0x00007f757049c8b2: mov    0x40(%rsp),%rdi
  0x00007f757049c8b7: mov    0x48(%rsp),%rsi
  0x00007f757049c8bc: mov    0x50(%rsp),%rbp
  0x00007f757049c8c1: mov    0x60(%rsp),%rbx
  0x00007f757049c8c6: mov    0x68(%rsp),%rdx
  0x00007f757049c8cb: mov    0x70(%rsp),%rcx
  0x00007f757049c8d0: mov    0x78(%rsp),%rax
  0x00007f757049c8d5: add    $0x80,%rsp
  0x00007f757049c8dc: add    $0x8,%rsp
  0x00007f757049c8e0: popfq  
  0x00007f757049c8e1: mov    %r13,%rsp
  0x00007f757049c8e4: pop    %rax
  0x00007f757049c8e5: mov    %rsp,%r13
  0x00007f757049c8e8: sub    $0x10,%rsp
  0x00007f757049c8ec: mov    %rax,(%rsp)
  0x00007f757049c8f0: mov    %rsi,0x8(%rsp)
  0x00007f757049c8f5: mov    0x40(%rbx),%rcx
  0x00007f757049c8f9: jmpq   *%rcx

AHE@0x00007f75800d6108: 0xbbbbbbbbb0000000 i2c: 0x00007f757049c9a0 c2i: 0x00007f757049cae7 c2iUV: 0x00007f757049caba
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package; (645 bytes generated)
c2i argument handler starts at 0x7f757049cae7
  0x00007f757049c9a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049c9a4: movabs $0x7f757036e3e0,%r11
  0x00007f757049c9ae: cmp    %r11,%rax
  0x00007f757049c9b1: jbe    0x00007f757049c9ca
  0x00007f757049c9b7: movabs $0x7f757046e3e0,%r11
  0x00007f757049c9c1: cmp    %r11,%rax
  0x00007f757049c9c4: jb     0x00007f757049ca67
  0x00007f757049c9ca: movabs $0x7f7570369420,%r11
  0x00007f757049c9d4: cmp    %r11,%rax
  0x00007f757049c9d7: jbe    0x00007f757049c9f0
  0x00007f757049c9dd: movabs $0x7f757036de58,%r11
  0x00007f757049c9e7: cmp    %r11,%rax
  0x00007f757049c9ea: jb     0x00007f757049ca67
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049c9f0: mov    %rsp,-0x28(%rsp)
  0x00007f757049c9f5: sub    $0x80,%rsp
  0x00007f757049c9fc: mov    %rax,0x78(%rsp)
  0x00007f757049ca01: mov    %rcx,0x70(%rsp)
  0x00007f757049ca06: mov    %rdx,0x68(%rsp)
  0x00007f757049ca0b: mov    %rbx,0x60(%rsp)
  0x00007f757049ca10: mov    %rbp,0x50(%rsp)
  0x00007f757049ca15: mov    %rsi,0x48(%rsp)
  0x00007f757049ca1a: mov    %rdi,0x40(%rsp)
  0x00007f757049ca1f: mov    %r8,0x38(%rsp)
  0x00007f757049ca24: mov    %r9,0x30(%rsp)
  0x00007f757049ca29: mov    %r10,0x28(%rsp)
  0x00007f757049ca2e: mov    %r11,0x20(%rsp)
  0x00007f757049ca33: mov    %r12,0x18(%rsp)
  0x00007f757049ca38: mov    %r13,0x10(%rsp)
  0x00007f757049ca3d: mov    %r14,0x8(%rsp)
  0x00007f757049ca42: mov    %r15,(%rsp)
  0x00007f757049ca46: movabs $0x7f758592f470,%rdi
  0x00007f757049ca50: movabs $0x7f757049c9f0,%rsi
  0x00007f757049ca5a: mov    %rsp,%rdx
  0x00007f757049ca5d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ca61: callq  0x00007f75853729fa
  0x00007f757049ca66: hlt    
  ;; } verify_i2ce 
  0x00007f757049ca67: mov    %rsp,%r11
  0x00007f757049ca6a: sub    $0x20,%rsp
  0x00007f757049ca6e: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ca72: push   %rax
  0x00007f757049ca73: mov    %r11,%rax
  0x00007f757049ca76: mov    0x50(%rbx),%r11
  0x00007f757049ca7a: mov    0x48(%rax),%rsi
  0x00007f757049ca7e: mov    0x40(%rax),%rdx
  0x00007f757049ca82: mov    0x38(%rax),%rcx
  0x00007f757049ca86: mov    0x30(%rax),%r8
  0x00007f757049ca8a: mov    0x28(%rax),%r9
  0x00007f757049ca8e: mov    0x20(%rax),%rdi
  0x00007f757049ca92: mov    0x18(%rax),%r13
  0x00007f757049ca96: mov    %r13,0x8(%rsp)
  0x00007f757049ca9b: mov    0x10(%rax),%r13
  0x00007f757049ca9f: mov    %r13,0x10(%rsp)
  0x00007f757049caa4: mov    0x8(%rax),%r13
  0x00007f757049caa8: mov    %r13,0x18(%rsp)
  0x00007f757049caad: mov    %rbx,0x258(%r15)
  0x00007f757049cab4: mov    %rbx,%rax
  0x00007f757049cab7: jmpq   *%r11
  0x00007f757049caba: mov    0x8(%rsi),%ebx
  0x00007f757049cabd: shl    $0x3,%rbx
  0x00007f757049cac1: cmp    0x10(%rax),%rbx
  0x00007f757049cac5: mov    0x8(%rax),%rbx
  0x00007f757049cac9: je     0x00007f757049cad4
  0x00007f757049cacf: jmpq   0x00007f757046ec40
  0x00007f757049cad4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049cadc: je     0x00007f757049cbd7
  0x00007f757049cae2: jmpq   0x00007f757046ec40
  0x00007f757049cae7: cmpq   $0x0,0x58(%rbx)
  0x00007f757049caef: je     0x00007f757049cbd7
  0x00007f757049caf5: mov    %rsp,%r13
  0x00007f757049caf8: mov    (%rsp),%rax
  0x00007f757049cafc: and    $0xfffffffffffffff0,%rsp
  0x00007f757049cb00: pushfq 
  0x00007f757049cb01: sub    $0x8,%rsp
  0x00007f757049cb05: mov    %rsp,-0x28(%rsp)
  0x00007f757049cb0a: sub    $0x80,%rsp
  0x00007f757049cb11: mov    %rax,0x78(%rsp)
  0x00007f757049cb16: mov    %rcx,0x70(%rsp)
  0x00007f757049cb1b: mov    %rdx,0x68(%rsp)
  0x00007f757049cb20: mov    %rbx,0x60(%rsp)
  0x00007f757049cb25: mov    %rbp,0x50(%rsp)
  0x00007f757049cb2a: mov    %rsi,0x48(%rsp)
  0x00007f757049cb2f: mov    %rdi,0x40(%rsp)
  0x00007f757049cb34: mov    %r8,0x38(%rsp)
  0x00007f757049cb39: mov    %r9,0x30(%rsp)
  0x00007f757049cb3e: mov    %r10,0x28(%rsp)
  0x00007f757049cb43: mov    %r11,0x20(%rsp)
  0x00007f757049cb48: mov    %r12,0x18(%rsp)
  0x00007f757049cb4d: mov    %r13,0x10(%rsp)
  0x00007f757049cb52: mov    %r14,0x8(%rsp)
  0x00007f757049cb57: mov    %r15,(%rsp)
  0x00007f757049cb5b: sub    $0x200,%rsp
  0x00007f757049cb62: fxsave64 (%rsp)
  0x00007f757049cb67: mov    %rbx,%rdi
  0x00007f757049cb6a: mov    %rax,%rsi
  0x00007f757049cb6d: callq  0x00007f7585522bca
  0x00007f757049cb72: fxrstor64 (%rsp)
  0x00007f757049cb77: add    $0x200,%rsp
  0x00007f757049cb7e: mov    (%rsp),%r15
  0x00007f757049cb82: mov    0x8(%rsp),%r14
  0x00007f757049cb87: mov    0x10(%rsp),%r13
  0x00007f757049cb8c: mov    0x18(%rsp),%r12
  0x00007f757049cb91: mov    0x20(%rsp),%r11
  0x00007f757049cb96: mov    0x28(%rsp),%r10
  0x00007f757049cb9b: mov    0x30(%rsp),%r9
  0x00007f757049cba0: mov    0x38(%rsp),%r8
  0x00007f757049cba5: mov    0x40(%rsp),%rdi
  0x00007f757049cbaa: mov    0x48(%rsp),%rsi
  0x00007f757049cbaf: mov    0x50(%rsp),%rbp
  0x00007f757049cbb4: mov    0x60(%rsp),%rbx
  0x00007f757049cbb9: mov    0x68(%rsp),%rdx
  0x00007f757049cbbe: mov    0x70(%rsp),%rcx
  0x00007f757049cbc3: mov    0x78(%rsp),%rax
  0x00007f757049cbc8: add    $0x80,%rsp
  0x00007f757049cbcf: add    $0x8,%rsp
  0x00007f757049cbd3: popfq  
  0x00007f757049cbd4: mov    %r13,%rsp
  0x00007f757049cbd7: pop    %rax
  0x00007f757049cbd8: mov    %rsp,%r13
  0x00007f757049cbdb: sub    $0x50,%rsp
  0x00007f757049cbdf: mov    %rax,(%rsp)
  0x00007f757049cbe3: mov    %rsi,0x48(%rsp)
  0x00007f757049cbe8: mov    %rdx,0x40(%rsp)
  0x00007f757049cbed: mov    %rcx,0x38(%rsp)
  0x00007f757049cbf2: mov    %r8,0x30(%rsp)
  0x00007f757049cbf7: mov    %r9,0x28(%rsp)
  0x00007f757049cbfc: mov    %rdi,0x20(%rsp)
  0x00007f757049cc01: mov    0x50(%rsp),%rax
  0x00007f757049cc06: mov    %rax,0x18(%rsp)
  0x00007f757049cc0b: mov    0x58(%rsp),%rax
  0x00007f757049cc10: mov    %rax,0x10(%rsp)
  0x00007f757049cc15: mov    0x60(%rsp),%rax
  0x00007f757049cc1a: mov    %rax,0x8(%rsp)
  0x00007f757049cc1f: mov    0x40(%rbx),%rcx
  0x00007f757049cc23: jmpq   *%rcx

AHE@0x00007f75800d6150: 0xbb000000 i2c: 0x00007f757049cce0 c2i: 0x00007f757049cdf8 c2iUV: 0x00007f757049cdcb
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z (548 bytes generated)
c2i argument handler starts at 0x7f757049cdf8
  0x00007f757049cce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049cce4: movabs $0x7f757036e3e0,%r11
  0x00007f757049ccee: cmp    %r11,%rax
  0x00007f757049ccf1: jbe    0x00007f757049cd0a
  0x00007f757049ccf7: movabs $0x7f757046e3e0,%r11
  0x00007f757049cd01: cmp    %r11,%rax
  0x00007f757049cd04: jb     0x00007f757049cda7
  0x00007f757049cd0a: movabs $0x7f7570369420,%r11
  0x00007f757049cd14: cmp    %r11,%rax
  0x00007f757049cd17: jbe    0x00007f757049cd30
  0x00007f757049cd1d: movabs $0x7f757036de58,%r11
  0x00007f757049cd27: cmp    %r11,%rax
  0x00007f757049cd2a: jb     0x00007f757049cda7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049cd30: mov    %rsp,-0x28(%rsp)
  0x00007f757049cd35: sub    $0x80,%rsp
  0x00007f757049cd3c: mov    %rax,0x78(%rsp)
  0x00007f757049cd41: mov    %rcx,0x70(%rsp)
  0x00007f757049cd46: mov    %rdx,0x68(%rsp)
  0x00007f757049cd4b: mov    %rbx,0x60(%rsp)
  0x00007f757049cd50: mov    %rbp,0x50(%rsp)
  0x00007f757049cd55: mov    %rsi,0x48(%rsp)
  0x00007f757049cd5a: mov    %rdi,0x40(%rsp)
  0x00007f757049cd5f: mov    %r8,0x38(%rsp)
  0x00007f757049cd64: mov    %r9,0x30(%rsp)
  0x00007f757049cd69: mov    %r10,0x28(%rsp)
  0x00007f757049cd6e: mov    %r11,0x20(%rsp)
  0x00007f757049cd73: mov    %r12,0x18(%rsp)
  0x00007f757049cd78: mov    %r13,0x10(%rsp)
  0x00007f757049cd7d: mov    %r14,0x8(%rsp)
  0x00007f757049cd82: mov    %r15,(%rsp)
  0x00007f757049cd86: movabs $0x7f758592f470,%rdi
  0x00007f757049cd90: movabs $0x7f757049cd30,%rsi
  0x00007f757049cd9a: mov    %rsp,%rdx
  0x00007f757049cd9d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049cda1: callq  0x00007f75853729fa
  0x00007f757049cda6: hlt    
  ;; } verify_i2ce 
  0x00007f757049cda7: mov    %rsp,%r11
  0x00007f757049cdaa: and    $0xfffffffffffffff0,%rsp
  0x00007f757049cdae: push   %rax
  0x00007f757049cdaf: mov    %r11,%rax
  0x00007f757049cdb2: mov    0x50(%rbx),%r11
  0x00007f757049cdb6: mov    0x10(%rax),%rsi
  0x00007f757049cdba: mov    0x8(%rax),%rdx
  0x00007f757049cdbe: mov    %rbx,0x258(%r15)
  0x00007f757049cdc5: mov    %rbx,%rax
  0x00007f757049cdc8: jmpq   *%r11
  0x00007f757049cdcb: mov    0x8(%rsi),%ebx
  0x00007f757049cdce: shl    $0x3,%rbx
  0x00007f757049cdd2: cmp    0x10(%rax),%rbx
  0x00007f757049cdd6: mov    0x8(%rax),%rbx
  0x00007f757049cdda: je     0x00007f757049cde5
  0x00007f757049cde0: jmpq   0x00007f757046ec40
  0x00007f757049cde5: cmpq   $0x0,0x58(%rbx)
  0x00007f757049cded: je     0x00007f757049cee8
  0x00007f757049cdf3: jmpq   0x00007f757046ec40
  0x00007f757049cdf8: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ce00: je     0x00007f757049cee8
  0x00007f757049ce06: mov    %rsp,%r13
  0x00007f757049ce09: mov    (%rsp),%rax
  0x00007f757049ce0d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ce11: pushfq 
  0x00007f757049ce12: sub    $0x8,%rsp
  0x00007f757049ce16: mov    %rsp,-0x28(%rsp)
  0x00007f757049ce1b: sub    $0x80,%rsp
  0x00007f757049ce22: mov    %rax,0x78(%rsp)
  0x00007f757049ce27: mov    %rcx,0x70(%rsp)
  0x00007f757049ce2c: mov    %rdx,0x68(%rsp)
  0x00007f757049ce31: mov    %rbx,0x60(%rsp)
  0x00007f757049ce36: mov    %rbp,0x50(%rsp)
  0x00007f757049ce3b: mov    %rsi,0x48(%rsp)
  0x00007f757049ce40: mov    %rdi,0x40(%rsp)
  0x00007f757049ce45: mov    %r8,0x38(%rsp)
  0x00007f757049ce4a: mov    %r9,0x30(%rsp)
  0x00007f757049ce4f: mov    %r10,0x28(%rsp)
  0x00007f757049ce54: mov    %r11,0x20(%rsp)
  0x00007f757049ce59: mov    %r12,0x18(%rsp)
  0x00007f757049ce5e: mov    %r13,0x10(%rsp)
  0x00007f757049ce63: mov    %r14,0x8(%rsp)
  0x00007f757049ce68: mov    %r15,(%rsp)
  0x00007f757049ce6c: sub    $0x200,%rsp
  0x00007f757049ce73: fxsave64 (%rsp)
  0x00007f757049ce78: mov    %rbx,%rdi
  0x00007f757049ce7b: mov    %rax,%rsi
  0x00007f757049ce7e: callq  0x00007f7585522bca
  0x00007f757049ce83: fxrstor64 (%rsp)
  0x00007f757049ce88: add    $0x200,%rsp
  0x00007f757049ce8f: mov    (%rsp),%r15
  0x00007f757049ce93: mov    0x8(%rsp),%r14
  0x00007f757049ce98: mov    0x10(%rsp),%r13
  0x00007f757049ce9d: mov    0x18(%rsp),%r12
  0x00007f757049cea2: mov    0x20(%rsp),%r11
  0x00007f757049cea7: mov    0x28(%rsp),%r10
  0x00007f757049ceac: mov    0x30(%rsp),%r9
  0x00007f757049ceb1: mov    0x38(%rsp),%r8
  0x00007f757049ceb6: mov    0x40(%rsp),%rdi
  0x00007f757049cebb: mov    0x48(%rsp),%rsi
  0x00007f757049cec0: mov    0x50(%rsp),%rbp
  0x00007f757049cec5: mov    0x60(%rsp),%rbx
  0x00007f757049ceca: mov    0x68(%rsp),%rdx
  0x00007f757049cecf: mov    0x70(%rsp),%rcx
  0x00007f757049ced4: mov    0x78(%rsp),%rax
  0x00007f757049ced9: add    $0x80,%rsp
  0x00007f757049cee0: add    $0x8,%rsp
  0x00007f757049cee4: popfq  
  0x00007f757049cee5: mov    %r13,%rsp
  0x00007f757049cee8: pop    %rax
  0x00007f757049cee9: mov    %rsp,%r13
  0x00007f757049ceec: sub    $0x20,%rsp
  0x00007f757049cef0: mov    %rax,(%rsp)
  0x00007f757049cef4: mov    %rsi,0x10(%rsp)
  0x00007f757049cef9: mov    %rdx,0x8(%rsp)
  0x00007f757049cefe: mov    0x40(%rbx),%rcx
  0x00007f757049cf02: jmpq   *%rcx

AHE@0x00007f75800d6198: 0xbb000000 i2c: 0x00007f757049cfe0 c2i: 0x00007f757049d0f8 c2iUV: 0x00007f757049d0cb
i2c argument handler #0 for: receiver (Ljava/lang/ClassLoader;)Z (548 bytes generated)
c2i argument handler starts at 0x7f757049d0f8
  0x00007f757049cfe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049cfe4: movabs $0x7f757036e3e0,%r11
  0x00007f757049cfee: cmp    %r11,%rax
  0x00007f757049cff1: jbe    0x00007f757049d00a
  0x00007f757049cff7: movabs $0x7f757046e3e0,%r11
  0x00007f757049d001: cmp    %r11,%rax
  0x00007f757049d004: jb     0x00007f757049d0a7
  0x00007f757049d00a: movabs $0x7f7570369420,%r11
  0x00007f757049d014: cmp    %r11,%rax
  0x00007f757049d017: jbe    0x00007f757049d030
  0x00007f757049d01d: movabs $0x7f757036de58,%r11
  0x00007f757049d027: cmp    %r11,%rax
  0x00007f757049d02a: jb     0x00007f757049d0a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049d030: mov    %rsp,-0x28(%rsp)
  0x00007f757049d035: sub    $0x80,%rsp
  0x00007f757049d03c: mov    %rax,0x78(%rsp)
  0x00007f757049d041: mov    %rcx,0x70(%rsp)
  0x00007f757049d046: mov    %rdx,0x68(%rsp)
  0x00007f757049d04b: mov    %rbx,0x60(%rsp)
  0x00007f757049d050: mov    %rbp,0x50(%rsp)
  0x00007f757049d055: mov    %rsi,0x48(%rsp)
  0x00007f757049d05a: mov    %rdi,0x40(%rsp)
  0x00007f757049d05f: mov    %r8,0x38(%rsp)
  0x00007f757049d064: mov    %r9,0x30(%rsp)
  0x00007f757049d069: mov    %r10,0x28(%rsp)
  0x00007f757049d06e: mov    %r11,0x20(%rsp)
  0x00007f757049d073: mov    %r12,0x18(%rsp)
  0x00007f757049d078: mov    %r13,0x10(%rsp)
  0x00007f757049d07d: mov    %r14,0x8(%rsp)
  0x00007f757049d082: mov    %r15,(%rsp)
  0x00007f757049d086: movabs $0x7f758592f470,%rdi
  0x00007f757049d090: movabs $0x7f757049d030,%rsi
  0x00007f757049d09a: mov    %rsp,%rdx
  0x00007f757049d09d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d0a1: callq  0x00007f75853729fa
  0x00007f757049d0a6: hlt    
  ;; } verify_i2ce 
  0x00007f757049d0a7: mov    %rsp,%r11
  0x00007f757049d0aa: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d0ae: push   %rax
  0x00007f757049d0af: mov    %r11,%rax
  0x00007f757049d0b2: mov    0x50(%rbx),%r11
  0x00007f757049d0b6: mov    0x10(%rax),%rsi
  0x00007f757049d0ba: mov    0x8(%rax),%rdx
  0x00007f757049d0be: mov    %rbx,0x258(%r15)
  0x00007f757049d0c5: mov    %rbx,%rax
  0x00007f757049d0c8: jmpq   *%r11
  0x00007f757049d0cb: mov    0x8(%rsi),%ebx
  0x00007f757049d0ce: shl    $0x3,%rbx
  0x00007f757049d0d2: cmp    0x10(%rax),%rbx
  0x00007f757049d0d6: mov    0x8(%rax),%rbx
  0x00007f757049d0da: je     0x00007f757049d0e5
  0x00007f757049d0e0: jmpq   0x00007f757046ec40
  0x00007f757049d0e5: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d0ed: je     0x00007f757049d1e8
  0x00007f757049d0f3: jmpq   0x00007f757046ec40
  0x00007f757049d0f8: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d100: je     0x00007f757049d1e8
  0x00007f757049d106: mov    %rsp,%r13
  0x00007f757049d109: mov    (%rsp),%rax
  0x00007f757049d10d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d111: pushfq 
  0x00007f757049d112: sub    $0x8,%rsp
  0x00007f757049d116: mov    %rsp,-0x28(%rsp)
  0x00007f757049d11b: sub    $0x80,%rsp
  0x00007f757049d122: mov    %rax,0x78(%rsp)
  0x00007f757049d127: mov    %rcx,0x70(%rsp)
  0x00007f757049d12c: mov    %rdx,0x68(%rsp)
  0x00007f757049d131: mov    %rbx,0x60(%rsp)
  0x00007f757049d136: mov    %rbp,0x50(%rsp)
  0x00007f757049d13b: mov    %rsi,0x48(%rsp)
  0x00007f757049d140: mov    %rdi,0x40(%rsp)
  0x00007f757049d145: mov    %r8,0x38(%rsp)
  0x00007f757049d14a: mov    %r9,0x30(%rsp)
  0x00007f757049d14f: mov    %r10,0x28(%rsp)
  0x00007f757049d154: mov    %r11,0x20(%rsp)
  0x00007f757049d159: mov    %r12,0x18(%rsp)
  0x00007f757049d15e: mov    %r13,0x10(%rsp)
  0x00007f757049d163: mov    %r14,0x8(%rsp)
  0x00007f757049d168: mov    %r15,(%rsp)
  0x00007f757049d16c: sub    $0x200,%rsp
  0x00007f757049d173: fxsave64 (%rsp)
  0x00007f757049d178: mov    %rbx,%rdi
  0x00007f757049d17b: mov    %rax,%rsi
  0x00007f757049d17e: callq  0x00007f7585522bca
  0x00007f757049d183: fxrstor64 (%rsp)
  0x00007f757049d188: add    $0x200,%rsp
  0x00007f757049d18f: mov    (%rsp),%r15
  0x00007f757049d193: mov    0x8(%rsp),%r14
  0x00007f757049d198: mov    0x10(%rsp),%r13
  0x00007f757049d19d: mov    0x18(%rsp),%r12
  0x00007f757049d1a2: mov    0x20(%rsp),%r11
  0x00007f757049d1a7: mov    0x28(%rsp),%r10
  0x00007f757049d1ac: mov    0x30(%rsp),%r9
  0x00007f757049d1b1: mov    0x38(%rsp),%r8
  0x00007f757049d1b6: mov    0x40(%rsp),%rdi
  0x00007f757049d1bb: mov    0x48(%rsp),%rsi
  0x00007f757049d1c0: mov    0x50(%rsp),%rbp
  0x00007f757049d1c5: mov    0x60(%rsp),%rbx
  0x00007f757049d1ca: mov    0x68(%rsp),%rdx
  0x00007f757049d1cf: mov    0x70(%rsp),%rcx
  0x00007f757049d1d4: mov    0x78(%rsp),%rax
  0x00007f757049d1d9: add    $0x80,%rsp
  0x00007f757049d1e0: add    $0x8,%rsp
  0x00007f757049d1e4: popfq  
  0x00007f757049d1e5: mov    %r13,%rsp
  0x00007f757049d1e8: pop    %rax
  0x00007f757049d1e9: mov    %rsp,%r13
  0x00007f757049d1ec: sub    $0x20,%rsp
  0x00007f757049d1f0: mov    %rax,(%rsp)
  0x00007f757049d1f4: mov    %rsi,0x10(%rsp)
  0x00007f757049d1f9: mov    %rdx,0x8(%rsp)
  0x00007f757049d1fe: mov    0x40(%rbx),%rcx
  0x00007f757049d202: jmpq   *%rcx

AHE@0x00007f75800d61e0: 0x i2c: 0x00007f757049d2e0 c2i: 0x00007f757049d3f0 c2iUV: 0x00007f757049d3c3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f757049d3f0
  0x00007f757049d2e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049d2e4: movabs $0x7f757036e3e0,%r11
  0x00007f757049d2ee: cmp    %r11,%rax
  0x00007f757049d2f1: jbe    0x00007f757049d30a
  0x00007f757049d2f7: movabs $0x7f757046e3e0,%r11
  0x00007f757049d301: cmp    %r11,%rax
  0x00007f757049d304: jb     0x00007f757049d3a7
  0x00007f757049d30a: movabs $0x7f7570369420,%r11
  0x00007f757049d314: cmp    %r11,%rax
  0x00007f757049d317: jbe    0x00007f757049d330
  0x00007f757049d31d: movabs $0x7f757036de58,%r11
  0x00007f757049d327: cmp    %r11,%rax
  0x00007f757049d32a: jb     0x00007f757049d3a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049d330: mov    %rsp,-0x28(%rsp)
  0x00007f757049d335: sub    $0x80,%rsp
  0x00007f757049d33c: mov    %rax,0x78(%rsp)
  0x00007f757049d341: mov    %rcx,0x70(%rsp)
  0x00007f757049d346: mov    %rdx,0x68(%rsp)
  0x00007f757049d34b: mov    %rbx,0x60(%rsp)
  0x00007f757049d350: mov    %rbp,0x50(%rsp)
  0x00007f757049d355: mov    %rsi,0x48(%rsp)
  0x00007f757049d35a: mov    %rdi,0x40(%rsp)
  0x00007f757049d35f: mov    %r8,0x38(%rsp)
  0x00007f757049d364: mov    %r9,0x30(%rsp)
  0x00007f757049d369: mov    %r10,0x28(%rsp)
  0x00007f757049d36e: mov    %r11,0x20(%rsp)
  0x00007f757049d373: mov    %r12,0x18(%rsp)
  0x00007f757049d378: mov    %r13,0x10(%rsp)
  0x00007f757049d37d: mov    %r14,0x8(%rsp)
  0x00007f757049d382: mov    %r15,(%rsp)
  0x00007f757049d386: movabs $0x7f758592f470,%rdi
  0x00007f757049d390: movabs $0x7f757049d330,%rsi
  0x00007f757049d39a: mov    %rsp,%rdx
  0x00007f757049d39d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d3a1: callq  0x00007f75853729fa
  0x00007f757049d3a6: hlt    
  ;; } verify_i2ce 
  0x00007f757049d3a7: mov    %rsp,%r11
  0x00007f757049d3aa: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d3ae: push   %rax
  0x00007f757049d3af: mov    %r11,%rax
  0x00007f757049d3b2: mov    0x50(%rbx),%r11
  0x00007f757049d3b6: mov    %rbx,0x258(%r15)
  0x00007f757049d3bd: mov    %rbx,%rax
  0x00007f757049d3c0: jmpq   *%r11
  0x00007f757049d3c3: mov    0x8(%rsi),%ebx
  0x00007f757049d3c6: shl    $0x3,%rbx
  0x00007f757049d3ca: cmp    0x10(%rax),%rbx
  0x00007f757049d3ce: mov    0x8(%rax),%rbx
  0x00007f757049d3d2: je     0x00007f757049d3dd
  0x00007f757049d3d8: jmpq   0x00007f757046ec40
  0x00007f757049d3dd: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d3e5: je     0x00007f757049d4e0
  0x00007f757049d3eb: jmpq   0x00007f757046ec40
  0x00007f757049d3f0: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d3f8: je     0x00007f757049d4e0
  0x00007f757049d3fe: mov    %rsp,%r13
  0x00007f757049d401: mov    (%rsp),%rax
  0x00007f757049d405: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d409: pushfq 
  0x00007f757049d40a: sub    $0x8,%rsp
  0x00007f757049d40e: mov    %rsp,-0x28(%rsp)
  0x00007f757049d413: sub    $0x80,%rsp
  0x00007f757049d41a: mov    %rax,0x78(%rsp)
  0x00007f757049d41f: mov    %rcx,0x70(%rsp)
  0x00007f757049d424: mov    %rdx,0x68(%rsp)
  0x00007f757049d429: mov    %rbx,0x60(%rsp)
  0x00007f757049d42e: mov    %rbp,0x50(%rsp)
  0x00007f757049d433: mov    %rsi,0x48(%rsp)
  0x00007f757049d438: mov    %rdi,0x40(%rsp)
  0x00007f757049d43d: mov    %r8,0x38(%rsp)
  0x00007f757049d442: mov    %r9,0x30(%rsp)
  0x00007f757049d447: mov    %r10,0x28(%rsp)
  0x00007f757049d44c: mov    %r11,0x20(%rsp)
  0x00007f757049d451: mov    %r12,0x18(%rsp)
  0x00007f757049d456: mov    %r13,0x10(%rsp)
  0x00007f757049d45b: mov    %r14,0x8(%rsp)
  0x00007f757049d460: mov    %r15,(%rsp)
  0x00007f757049d464: sub    $0x200,%rsp
  0x00007f757049d46b: fxsave64 (%rsp)
  0x00007f757049d470: mov    %rbx,%rdi
  0x00007f757049d473: mov    %rax,%rsi
  0x00007f757049d476: callq  0x00007f7585522bca
  0x00007f757049d47b: fxrstor64 (%rsp)
  0x00007f757049d480: add    $0x200,%rsp
  0x00007f757049d487: mov    (%rsp),%r15
  0x00007f757049d48b: mov    0x8(%rsp),%r14
  0x00007f757049d490: mov    0x10(%rsp),%r13
  0x00007f757049d495: mov    0x18(%rsp),%r12
  0x00007f757049d49a: mov    0x20(%rsp),%r11
  0x00007f757049d49f: mov    0x28(%rsp),%r10
  0x00007f757049d4a4: mov    0x30(%rsp),%r9
  0x00007f757049d4a9: mov    0x38(%rsp),%r8
  0x00007f757049d4ae: mov    0x40(%rsp),%rdi
  0x00007f757049d4b3: mov    0x48(%rsp),%rsi
  0x00007f757049d4b8: mov    0x50(%rsp),%rbp
  0x00007f757049d4bd: mov    0x60(%rsp),%rbx
  0x00007f757049d4c2: mov    0x68(%rsp),%rdx
  0x00007f757049d4c7: mov    0x70(%rsp),%rcx
  0x00007f757049d4cc: mov    0x78(%rsp),%rax
  0x00007f757049d4d1: add    $0x80,%rsp
  0x00007f757049d4d8: add    $0x8,%rsp
  0x00007f757049d4dc: popfq  
  0x00007f757049d4dd: mov    %r13,%rsp
  0x00007f757049d4e0: pop    %rax
  0x00007f757049d4e1: mov    %rsp,%r13
  0x00007f757049d4e4: sub    $0x10,%rsp
  0x00007f757049d4e8: mov    %rax,(%rsp)
  0x00007f757049d4ec: mov    0x40(%rbx),%rcx
  0x00007f757049d4f0: jmpq   *%rcx

AHE@0x00007f75800d6228: 0xb0000000 i2c: 0x00007f757049d5a0 c2i: 0x00007f757049d6b4 c2iUV: 0x00007f757049d687
i2c argument handler #0 for: receiver ()Ljava/lang/ClassLoader; (539 bytes generated)
c2i argument handler starts at 0x7f757049d6b4
  0x00007f757049d5a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049d5a4: movabs $0x7f757036e3e0,%r11
  0x00007f757049d5ae: cmp    %r11,%rax
  0x00007f757049d5b1: jbe    0x00007f757049d5ca
  0x00007f757049d5b7: movabs $0x7f757046e3e0,%r11
  0x00007f757049d5c1: cmp    %r11,%rax
  0x00007f757049d5c4: jb     0x00007f757049d667
  0x00007f757049d5ca: movabs $0x7f7570369420,%r11
  0x00007f757049d5d4: cmp    %r11,%rax
  0x00007f757049d5d7: jbe    0x00007f757049d5f0
  0x00007f757049d5dd: movabs $0x7f757036de58,%r11
  0x00007f757049d5e7: cmp    %r11,%rax
  0x00007f757049d5ea: jb     0x00007f757049d667
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049d5f0: mov    %rsp,-0x28(%rsp)
  0x00007f757049d5f5: sub    $0x80,%rsp
  0x00007f757049d5fc: mov    %rax,0x78(%rsp)
  0x00007f757049d601: mov    %rcx,0x70(%rsp)
  0x00007f757049d606: mov    %rdx,0x68(%rsp)
  0x00007f757049d60b: mov    %rbx,0x60(%rsp)
  0x00007f757049d610: mov    %rbp,0x50(%rsp)
  0x00007f757049d615: mov    %rsi,0x48(%rsp)
  0x00007f757049d61a: mov    %rdi,0x40(%rsp)
  0x00007f757049d61f: mov    %r8,0x38(%rsp)
  0x00007f757049d624: mov    %r9,0x30(%rsp)
  0x00007f757049d629: mov    %r10,0x28(%rsp)
  0x00007f757049d62e: mov    %r11,0x20(%rsp)
  0x00007f757049d633: mov    %r12,0x18(%rsp)
  0x00007f757049d638: mov    %r13,0x10(%rsp)
  0x00007f757049d63d: mov    %r14,0x8(%rsp)
  0x00007f757049d642: mov    %r15,(%rsp)
  0x00007f757049d646: movabs $0x7f758592f470,%rdi
  0x00007f757049d650: movabs $0x7f757049d5f0,%rsi
  0x00007f757049d65a: mov    %rsp,%rdx
  0x00007f757049d65d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d661: callq  0x00007f75853729fa
  0x00007f757049d666: hlt    
  ;; } verify_i2ce 
  0x00007f757049d667: mov    %rsp,%r11
  0x00007f757049d66a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d66e: push   %rax
  0x00007f757049d66f: mov    %r11,%rax
  0x00007f757049d672: mov    0x50(%rbx),%r11
  0x00007f757049d676: mov    0x8(%rax),%rsi
  0x00007f757049d67a: mov    %rbx,0x258(%r15)
  0x00007f757049d681: mov    %rbx,%rax
  0x00007f757049d684: jmpq   *%r11
  0x00007f757049d687: mov    0x8(%rsi),%ebx
  0x00007f757049d68a: shl    $0x3,%rbx
  0x00007f757049d68e: cmp    0x10(%rax),%rbx
  0x00007f757049d692: mov    0x8(%rax),%rbx
  0x00007f757049d696: je     0x00007f757049d6a1
  0x00007f757049d69c: jmpq   0x00007f757046ec40
  0x00007f757049d6a1: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d6a9: je     0x00007f757049d7a4
  0x00007f757049d6af: jmpq   0x00007f757046ec40
  0x00007f757049d6b4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d6bc: je     0x00007f757049d7a4
  0x00007f757049d6c2: mov    %rsp,%r13
  0x00007f757049d6c5: mov    (%rsp),%rax
  0x00007f757049d6c9: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d6cd: pushfq 
  0x00007f757049d6ce: sub    $0x8,%rsp
  0x00007f757049d6d2: mov    %rsp,-0x28(%rsp)
  0x00007f757049d6d7: sub    $0x80,%rsp
  0x00007f757049d6de: mov    %rax,0x78(%rsp)
  0x00007f757049d6e3: mov    %rcx,0x70(%rsp)
  0x00007f757049d6e8: mov    %rdx,0x68(%rsp)
  0x00007f757049d6ed: mov    %rbx,0x60(%rsp)
  0x00007f757049d6f2: mov    %rbp,0x50(%rsp)
  0x00007f757049d6f7: mov    %rsi,0x48(%rsp)
  0x00007f757049d6fc: mov    %rdi,0x40(%rsp)
  0x00007f757049d701: mov    %r8,0x38(%rsp)
  0x00007f757049d706: mov    %r9,0x30(%rsp)
  0x00007f757049d70b: mov    %r10,0x28(%rsp)
  0x00007f757049d710: mov    %r11,0x20(%rsp)
  0x00007f757049d715: mov    %r12,0x18(%rsp)
  0x00007f757049d71a: mov    %r13,0x10(%rsp)
  0x00007f757049d71f: mov    %r14,0x8(%rsp)
  0x00007f757049d724: mov    %r15,(%rsp)
  0x00007f757049d728: sub    $0x200,%rsp
  0x00007f757049d72f: fxsave64 (%rsp)
  0x00007f757049d734: mov    %rbx,%rdi
  0x00007f757049d737: mov    %rax,%rsi
  0x00007f757049d73a: callq  0x00007f7585522bca
  0x00007f757049d73f: fxrstor64 (%rsp)
  0x00007f757049d744: add    $0x200,%rsp
  0x00007f757049d74b: mov    (%rsp),%r15
  0x00007f757049d74f: mov    0x8(%rsp),%r14
  0x00007f757049d754: mov    0x10(%rsp),%r13
  0x00007f757049d759: mov    0x18(%rsp),%r12
  0x00007f757049d75e: mov    0x20(%rsp),%r11
  0x00007f757049d763: mov    0x28(%rsp),%r10
  0x00007f757049d768: mov    0x30(%rsp),%r9
  0x00007f757049d76d: mov    0x38(%rsp),%r8
  0x00007f757049d772: mov    0x40(%rsp),%rdi
  0x00007f757049d777: mov    0x48(%rsp),%rsi
  0x00007f757049d77c: mov    0x50(%rsp),%rbp
  0x00007f757049d781: mov    0x60(%rsp),%rbx
  0x00007f757049d786: mov    0x68(%rsp),%rdx
  0x00007f757049d78b: mov    0x70(%rsp),%rcx
  0x00007f757049d790: mov    0x78(%rsp),%rax
  0x00007f757049d795: add    $0x80,%rsp
  0x00007f757049d79c: add    $0x8,%rsp
  0x00007f757049d7a0: popfq  
  0x00007f757049d7a1: mov    %r13,%rsp
  0x00007f757049d7a4: pop    %rax
  0x00007f757049d7a5: mov    %rsp,%r13
  0x00007f757049d7a8: sub    $0x10,%rsp
  0x00007f757049d7ac: mov    %rax,(%rsp)
  0x00007f757049d7b0: mov    %rsi,0x8(%rsp)
  0x00007f757049d7b5: mov    0x40(%rbx),%rcx
  0x00007f757049d7b9: jmpq   *%rcx

AHE@0x00007f75800d6270: 0x i2c: 0x00007f757049d860 c2i: 0x00007f757049d970 c2iUV: 0x00007f757049d943
i2c argument handler #0 for: static ()Lsun/misc/URLClassPath; (530 bytes generated)
c2i argument handler starts at 0x7f757049d970
  0x00007f757049d860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049d864: movabs $0x7f757036e3e0,%r11
  0x00007f757049d86e: cmp    %r11,%rax
  0x00007f757049d871: jbe    0x00007f757049d88a
  0x00007f757049d877: movabs $0x7f757046e3e0,%r11
  0x00007f757049d881: cmp    %r11,%rax
  0x00007f757049d884: jb     0x00007f757049d927
  0x00007f757049d88a: movabs $0x7f7570369420,%r11
  0x00007f757049d894: cmp    %r11,%rax
  0x00007f757049d897: jbe    0x00007f757049d8b0
  0x00007f757049d89d: movabs $0x7f757036de58,%r11
  0x00007f757049d8a7: cmp    %r11,%rax
  0x00007f757049d8aa: jb     0x00007f757049d927
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049d8b0: mov    %rsp,-0x28(%rsp)
  0x00007f757049d8b5: sub    $0x80,%rsp
  0x00007f757049d8bc: mov    %rax,0x78(%rsp)
  0x00007f757049d8c1: mov    %rcx,0x70(%rsp)
  0x00007f757049d8c6: mov    %rdx,0x68(%rsp)
  0x00007f757049d8cb: mov    %rbx,0x60(%rsp)
  0x00007f757049d8d0: mov    %rbp,0x50(%rsp)
  0x00007f757049d8d5: mov    %rsi,0x48(%rsp)
  0x00007f757049d8da: mov    %rdi,0x40(%rsp)
  0x00007f757049d8df: mov    %r8,0x38(%rsp)
  0x00007f757049d8e4: mov    %r9,0x30(%rsp)
  0x00007f757049d8e9: mov    %r10,0x28(%rsp)
  0x00007f757049d8ee: mov    %r11,0x20(%rsp)
  0x00007f757049d8f3: mov    %r12,0x18(%rsp)
  0x00007f757049d8f8: mov    %r13,0x10(%rsp)
  0x00007f757049d8fd: mov    %r14,0x8(%rsp)
  0x00007f757049d902: mov    %r15,(%rsp)
  0x00007f757049d906: movabs $0x7f758592f470,%rdi
  0x00007f757049d910: movabs $0x7f757049d8b0,%rsi
  0x00007f757049d91a: mov    %rsp,%rdx
  0x00007f757049d91d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d921: callq  0x00007f75853729fa
  0x00007f757049d926: hlt    
  ;; } verify_i2ce 
  0x00007f757049d927: mov    %rsp,%r11
  0x00007f757049d92a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d92e: push   %rax
  0x00007f757049d92f: mov    %r11,%rax
  0x00007f757049d932: mov    0x50(%rbx),%r11
  0x00007f757049d936: mov    %rbx,0x258(%r15)
  0x00007f757049d93d: mov    %rbx,%rax
  0x00007f757049d940: jmpq   *%r11
  0x00007f757049d943: mov    0x8(%rsi),%ebx
  0x00007f757049d946: shl    $0x3,%rbx
  0x00007f757049d94a: cmp    0x10(%rax),%rbx
  0x00007f757049d94e: mov    0x8(%rax),%rbx
  0x00007f757049d952: je     0x00007f757049d95d
  0x00007f757049d958: jmpq   0x00007f757046ec40
  0x00007f757049d95d: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d965: je     0x00007f757049da60
  0x00007f757049d96b: jmpq   0x00007f757046ec40
  0x00007f757049d970: cmpq   $0x0,0x58(%rbx)
  0x00007f757049d978: je     0x00007f757049da60
  0x00007f757049d97e: mov    %rsp,%r13
  0x00007f757049d981: mov    (%rsp),%rax
  0x00007f757049d985: and    $0xfffffffffffffff0,%rsp
  0x00007f757049d989: pushfq 
  0x00007f757049d98a: sub    $0x8,%rsp
  0x00007f757049d98e: mov    %rsp,-0x28(%rsp)
  0x00007f757049d993: sub    $0x80,%rsp
  0x00007f757049d99a: mov    %rax,0x78(%rsp)
  0x00007f757049d99f: mov    %rcx,0x70(%rsp)
  0x00007f757049d9a4: mov    %rdx,0x68(%rsp)
  0x00007f757049d9a9: mov    %rbx,0x60(%rsp)
  0x00007f757049d9ae: mov    %rbp,0x50(%rsp)
  0x00007f757049d9b3: mov    %rsi,0x48(%rsp)
  0x00007f757049d9b8: mov    %rdi,0x40(%rsp)
  0x00007f757049d9bd: mov    %r8,0x38(%rsp)
  0x00007f757049d9c2: mov    %r9,0x30(%rsp)
  0x00007f757049d9c7: mov    %r10,0x28(%rsp)
  0x00007f757049d9cc: mov    %r11,0x20(%rsp)
  0x00007f757049d9d1: mov    %r12,0x18(%rsp)
  0x00007f757049d9d6: mov    %r13,0x10(%rsp)
  0x00007f757049d9db: mov    %r14,0x8(%rsp)
  0x00007f757049d9e0: mov    %r15,(%rsp)
  0x00007f757049d9e4: sub    $0x200,%rsp
  0x00007f757049d9eb: fxsave64 (%rsp)
  0x00007f757049d9f0: mov    %rbx,%rdi
  0x00007f757049d9f3: mov    %rax,%rsi
  0x00007f757049d9f6: callq  0x00007f7585522bca
  0x00007f757049d9fb: fxrstor64 (%rsp)
  0x00007f757049da00: add    $0x200,%rsp
  0x00007f757049da07: mov    (%rsp),%r15
  0x00007f757049da0b: mov    0x8(%rsp),%r14
  0x00007f757049da10: mov    0x10(%rsp),%r13
  0x00007f757049da15: mov    0x18(%rsp),%r12
  0x00007f757049da1a: mov    0x20(%rsp),%r11
  0x00007f757049da1f: mov    0x28(%rsp),%r10
  0x00007f757049da24: mov    0x30(%rsp),%r9
  0x00007f757049da29: mov    0x38(%rsp),%r8
  0x00007f757049da2e: mov    0x40(%rsp),%rdi
  0x00007f757049da33: mov    0x48(%rsp),%rsi
  0x00007f757049da38: mov    0x50(%rsp),%rbp
  0x00007f757049da3d: mov    0x60(%rsp),%rbx
  0x00007f757049da42: mov    0x68(%rsp),%rdx
  0x00007f757049da47: mov    0x70(%rsp),%rcx
  0x00007f757049da4c: mov    0x78(%rsp),%rax
  0x00007f757049da51: add    $0x80,%rsp
  0x00007f757049da58: add    $0x8,%rsp
  0x00007f757049da5c: popfq  
  0x00007f757049da5d: mov    %r13,%rsp
  0x00007f757049da60: pop    %rax
  0x00007f757049da61: mov    %rsp,%r13
  0x00007f757049da64: sub    $0x10,%rsp
  0x00007f757049da68: mov    %rax,(%rsp)
  0x00007f757049da6c: mov    0x40(%rbx),%rcx
  0x00007f757049da70: jmpq   *%rcx

AHE@0x00007f75800d62b8: 0xb0000000 i2c: 0x00007f757049db20 c2i: 0x00007f757049dc34 c2iUV: 0x00007f757049dc07
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/util/Enumeration; (539 bytes generated)
c2i argument handler starts at 0x7f757049dc34
  0x00007f757049db20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049db24: movabs $0x7f757036e3e0,%r11
  0x00007f757049db2e: cmp    %r11,%rax
  0x00007f757049db31: jbe    0x00007f757049db4a
  0x00007f757049db37: movabs $0x7f757046e3e0,%r11
  0x00007f757049db41: cmp    %r11,%rax
  0x00007f757049db44: jb     0x00007f757049dbe7
  0x00007f757049db4a: movabs $0x7f7570369420,%r11
  0x00007f757049db54: cmp    %r11,%rax
  0x00007f757049db57: jbe    0x00007f757049db70
  0x00007f757049db5d: movabs $0x7f757036de58,%r11
  0x00007f757049db67: cmp    %r11,%rax
  0x00007f757049db6a: jb     0x00007f757049dbe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049db70: mov    %rsp,-0x28(%rsp)
  0x00007f757049db75: sub    $0x80,%rsp
  0x00007f757049db7c: mov    %rax,0x78(%rsp)
  0x00007f757049db81: mov    %rcx,0x70(%rsp)
  0x00007f757049db86: mov    %rdx,0x68(%rsp)
  0x00007f757049db8b: mov    %rbx,0x60(%rsp)
  0x00007f757049db90: mov    %rbp,0x50(%rsp)
  0x00007f757049db95: mov    %rsi,0x48(%rsp)
  0x00007f757049db9a: mov    %rdi,0x40(%rsp)
  0x00007f757049db9f: mov    %r8,0x38(%rsp)
  0x00007f757049dba4: mov    %r9,0x30(%rsp)
  0x00007f757049dba9: mov    %r10,0x28(%rsp)
  0x00007f757049dbae: mov    %r11,0x20(%rsp)
  0x00007f757049dbb3: mov    %r12,0x18(%rsp)
  0x00007f757049dbb8: mov    %r13,0x10(%rsp)
  0x00007f757049dbbd: mov    %r14,0x8(%rsp)
  0x00007f757049dbc2: mov    %r15,(%rsp)
  0x00007f757049dbc6: movabs $0x7f758592f470,%rdi
  0x00007f757049dbd0: movabs $0x7f757049db70,%rsi
  0x00007f757049dbda: mov    %rsp,%rdx
  0x00007f757049dbdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049dbe1: callq  0x00007f75853729fa
  0x00007f757049dbe6: hlt    
  ;; } verify_i2ce 
  0x00007f757049dbe7: mov    %rsp,%r11
  0x00007f757049dbea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049dbee: push   %rax
  0x00007f757049dbef: mov    %r11,%rax
  0x00007f757049dbf2: mov    0x50(%rbx),%r11
  0x00007f757049dbf6: mov    0x8(%rax),%rsi
  0x00007f757049dbfa: mov    %rbx,0x258(%r15)
  0x00007f757049dc01: mov    %rbx,%rax
  0x00007f757049dc04: jmpq   *%r11
  0x00007f757049dc07: mov    0x8(%rsi),%ebx
  0x00007f757049dc0a: shl    $0x3,%rbx
  0x00007f757049dc0e: cmp    0x10(%rax),%rbx
  0x00007f757049dc12: mov    0x8(%rax),%rbx
  0x00007f757049dc16: je     0x00007f757049dc21
  0x00007f757049dc1c: jmpq   0x00007f757046ec40
  0x00007f757049dc21: cmpq   $0x0,0x58(%rbx)
  0x00007f757049dc29: je     0x00007f757049dd24
  0x00007f757049dc2f: jmpq   0x00007f757046ec40
  0x00007f757049dc34: cmpq   $0x0,0x58(%rbx)
  0x00007f757049dc3c: je     0x00007f757049dd24
  0x00007f757049dc42: mov    %rsp,%r13
  0x00007f757049dc45: mov    (%rsp),%rax
  0x00007f757049dc49: and    $0xfffffffffffffff0,%rsp
  0x00007f757049dc4d: pushfq 
  0x00007f757049dc4e: sub    $0x8,%rsp
  0x00007f757049dc52: mov    %rsp,-0x28(%rsp)
  0x00007f757049dc57: sub    $0x80,%rsp
  0x00007f757049dc5e: mov    %rax,0x78(%rsp)
  0x00007f757049dc63: mov    %rcx,0x70(%rsp)
  0x00007f757049dc68: mov    %rdx,0x68(%rsp)
  0x00007f757049dc6d: mov    %rbx,0x60(%rsp)
  0x00007f757049dc72: mov    %rbp,0x50(%rsp)
  0x00007f757049dc77: mov    %rsi,0x48(%rsp)
  0x00007f757049dc7c: mov    %rdi,0x40(%rsp)
  0x00007f757049dc81: mov    %r8,0x38(%rsp)
  0x00007f757049dc86: mov    %r9,0x30(%rsp)
  0x00007f757049dc8b: mov    %r10,0x28(%rsp)
  0x00007f757049dc90: mov    %r11,0x20(%rsp)
  0x00007f757049dc95: mov    %r12,0x18(%rsp)
  0x00007f757049dc9a: mov    %r13,0x10(%rsp)
  0x00007f757049dc9f: mov    %r14,0x8(%rsp)
  0x00007f757049dca4: mov    %r15,(%rsp)
  0x00007f757049dca8: sub    $0x200,%rsp
  0x00007f757049dcaf: fxsave64 (%rsp)
  0x00007f757049dcb4: mov    %rbx,%rdi
  0x00007f757049dcb7: mov    %rax,%rsi
  0x00007f757049dcba: callq  0x00007f7585522bca
  0x00007f757049dcbf: fxrstor64 (%rsp)
  0x00007f757049dcc4: add    $0x200,%rsp
  0x00007f757049dccb: mov    (%rsp),%r15
  0x00007f757049dccf: mov    0x8(%rsp),%r14
  0x00007f757049dcd4: mov    0x10(%rsp),%r13
  0x00007f757049dcd9: mov    0x18(%rsp),%r12
  0x00007f757049dcde: mov    0x20(%rsp),%r11
  0x00007f757049dce3: mov    0x28(%rsp),%r10
  0x00007f757049dce8: mov    0x30(%rsp),%r9
  0x00007f757049dced: mov    0x38(%rsp),%r8
  0x00007f757049dcf2: mov    0x40(%rsp),%rdi
  0x00007f757049dcf7: mov    0x48(%rsp),%rsi
  0x00007f757049dcfc: mov    0x50(%rsp),%rbp
  0x00007f757049dd01: mov    0x60(%rsp),%rbx
  0x00007f757049dd06: mov    0x68(%rsp),%rdx
  0x00007f757049dd0b: mov    0x70(%rsp),%rcx
  0x00007f757049dd10: mov    0x78(%rsp),%rax
  0x00007f757049dd15: add    $0x80,%rsp
  0x00007f757049dd1c: add    $0x8,%rsp
  0x00007f757049dd20: popfq  
  0x00007f757049dd21: mov    %r13,%rsp
  0x00007f757049dd24: pop    %rax
  0x00007f757049dd25: mov    %rsp,%r13
  0x00007f757049dd28: sub    $0x10,%rsp
  0x00007f757049dd2c: mov    %rax,(%rsp)
  0x00007f757049dd30: mov    %rsi,0x8(%rsp)
  0x00007f757049dd35: mov    0x40(%rbx),%rcx
  0x00007f757049dd39: jmpq   *%rcx

AHE@0x00007f75800d6300: 0xb0000000 i2c: 0x00007f757049dde0 c2i: 0x00007f757049def4 c2iUV: 0x00007f757049dec7
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/net/URL; (539 bytes generated)
c2i argument handler starts at 0x7f757049def4
  0x00007f757049dde0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049dde4: movabs $0x7f757036e3e0,%r11
  0x00007f757049ddee: cmp    %r11,%rax
  0x00007f757049ddf1: jbe    0x00007f757049de0a
  0x00007f757049ddf7: movabs $0x7f757046e3e0,%r11
  0x00007f757049de01: cmp    %r11,%rax
  0x00007f757049de04: jb     0x00007f757049dea7
  0x00007f757049de0a: movabs $0x7f7570369420,%r11
  0x00007f757049de14: cmp    %r11,%rax
  0x00007f757049de17: jbe    0x00007f757049de30
  0x00007f757049de1d: movabs $0x7f757036de58,%r11
  0x00007f757049de27: cmp    %r11,%rax
  0x00007f757049de2a: jb     0x00007f757049dea7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049de30: mov    %rsp,-0x28(%rsp)
  0x00007f757049de35: sub    $0x80,%rsp
  0x00007f757049de3c: mov    %rax,0x78(%rsp)
  0x00007f757049de41: mov    %rcx,0x70(%rsp)
  0x00007f757049de46: mov    %rdx,0x68(%rsp)
  0x00007f757049de4b: mov    %rbx,0x60(%rsp)
  0x00007f757049de50: mov    %rbp,0x50(%rsp)
  0x00007f757049de55: mov    %rsi,0x48(%rsp)
  0x00007f757049de5a: mov    %rdi,0x40(%rsp)
  0x00007f757049de5f: mov    %r8,0x38(%rsp)
  0x00007f757049de64: mov    %r9,0x30(%rsp)
  0x00007f757049de69: mov    %r10,0x28(%rsp)
  0x00007f757049de6e: mov    %r11,0x20(%rsp)
  0x00007f757049de73: mov    %r12,0x18(%rsp)
  0x00007f757049de78: mov    %r13,0x10(%rsp)
  0x00007f757049de7d: mov    %r14,0x8(%rsp)
  0x00007f757049de82: mov    %r15,(%rsp)
  0x00007f757049de86: movabs $0x7f758592f470,%rdi
  0x00007f757049de90: movabs $0x7f757049de30,%rsi
  0x00007f757049de9a: mov    %rsp,%rdx
  0x00007f757049de9d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049dea1: callq  0x00007f75853729fa
  0x00007f757049dea6: hlt    
  ;; } verify_i2ce 
  0x00007f757049dea7: mov    %rsp,%r11
  0x00007f757049deaa: and    $0xfffffffffffffff0,%rsp
  0x00007f757049deae: push   %rax
  0x00007f757049deaf: mov    %r11,%rax
  0x00007f757049deb2: mov    0x50(%rbx),%r11
  0x00007f757049deb6: mov    0x8(%rax),%rsi
  0x00007f757049deba: mov    %rbx,0x258(%r15)
  0x00007f757049dec1: mov    %rbx,%rax
  0x00007f757049dec4: jmpq   *%r11
  0x00007f757049dec7: mov    0x8(%rsi),%ebx
  0x00007f757049deca: shl    $0x3,%rbx
  0x00007f757049dece: cmp    0x10(%rax),%rbx
  0x00007f757049ded2: mov    0x8(%rax),%rbx
  0x00007f757049ded6: je     0x00007f757049dee1
  0x00007f757049dedc: jmpq   0x00007f757046ec40
  0x00007f757049dee1: cmpq   $0x0,0x58(%rbx)
  0x00007f757049dee9: je     0x00007f757049dfe4
  0x00007f757049deef: jmpq   0x00007f757046ec40
  0x00007f757049def4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049defc: je     0x00007f757049dfe4
  0x00007f757049df02: mov    %rsp,%r13
  0x00007f757049df05: mov    (%rsp),%rax
  0x00007f757049df09: and    $0xfffffffffffffff0,%rsp
  0x00007f757049df0d: pushfq 
  0x00007f757049df0e: sub    $0x8,%rsp
  0x00007f757049df12: mov    %rsp,-0x28(%rsp)
  0x00007f757049df17: sub    $0x80,%rsp
  0x00007f757049df1e: mov    %rax,0x78(%rsp)
  0x00007f757049df23: mov    %rcx,0x70(%rsp)
  0x00007f757049df28: mov    %rdx,0x68(%rsp)
  0x00007f757049df2d: mov    %rbx,0x60(%rsp)
  0x00007f757049df32: mov    %rbp,0x50(%rsp)
  0x00007f757049df37: mov    %rsi,0x48(%rsp)
  0x00007f757049df3c: mov    %rdi,0x40(%rsp)
  0x00007f757049df41: mov    %r8,0x38(%rsp)
  0x00007f757049df46: mov    %r9,0x30(%rsp)
  0x00007f757049df4b: mov    %r10,0x28(%rsp)
  0x00007f757049df50: mov    %r11,0x20(%rsp)
  0x00007f757049df55: mov    %r12,0x18(%rsp)
  0x00007f757049df5a: mov    %r13,0x10(%rsp)
  0x00007f757049df5f: mov    %r14,0x8(%rsp)
  0x00007f757049df64: mov    %r15,(%rsp)
  0x00007f757049df68: sub    $0x200,%rsp
  0x00007f757049df6f: fxsave64 (%rsp)
  0x00007f757049df74: mov    %rbx,%rdi
  0x00007f757049df77: mov    %rax,%rsi
  0x00007f757049df7a: callq  0x00007f7585522bca
  0x00007f757049df7f: fxrstor64 (%rsp)
  0x00007f757049df84: add    $0x200,%rsp
  0x00007f757049df8b: mov    (%rsp),%r15
  0x00007f757049df8f: mov    0x8(%rsp),%r14
  0x00007f757049df94: mov    0x10(%rsp),%r13
  0x00007f757049df99: mov    0x18(%rsp),%r12
  0x00007f757049df9e: mov    0x20(%rsp),%r11
  0x00007f757049dfa3: mov    0x28(%rsp),%r10
  0x00007f757049dfa8: mov    0x30(%rsp),%r9
  0x00007f757049dfad: mov    0x38(%rsp),%r8
  0x00007f757049dfb2: mov    0x40(%rsp),%rdi
  0x00007f757049dfb7: mov    0x48(%rsp),%rsi
  0x00007f757049dfbc: mov    0x50(%rsp),%rbp
  0x00007f757049dfc1: mov    0x60(%rsp),%rbx
  0x00007f757049dfc6: mov    0x68(%rsp),%rdx
  0x00007f757049dfcb: mov    0x70(%rsp),%rcx
  0x00007f757049dfd0: mov    0x78(%rsp),%rax
  0x00007f757049dfd5: add    $0x80,%rsp
  0x00007f757049dfdc: add    $0x8,%rsp
  0x00007f757049dfe0: popfq  
  0x00007f757049dfe1: mov    %r13,%rsp
  0x00007f757049dfe4: pop    %rax
  0x00007f757049dfe5: mov    %rsp,%r13
  0x00007f757049dfe8: sub    $0x10,%rsp
  0x00007f757049dfec: mov    %rax,(%rsp)
  0x00007f757049dff0: mov    %rsi,0x8(%rsp)
  0x00007f757049dff5: mov    0x40(%rbx),%rcx
  0x00007f757049dff9: jmpq   *%rcx

AHE@0x00007f75800d6348: 0xb0000000 i2c: 0x00007f757049e0a0 c2i: 0x00007f757049e1b4 c2iUV: 0x00007f757049e187
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/util/Enumeration; (539 bytes generated)
c2i argument handler starts at 0x7f757049e1b4
  0x00007f757049e0a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049e0a4: movabs $0x7f757036e3e0,%r11
  0x00007f757049e0ae: cmp    %r11,%rax
  0x00007f757049e0b1: jbe    0x00007f757049e0ca
  0x00007f757049e0b7: movabs $0x7f757046e3e0,%r11
  0x00007f757049e0c1: cmp    %r11,%rax
  0x00007f757049e0c4: jb     0x00007f757049e167
  0x00007f757049e0ca: movabs $0x7f7570369420,%r11
  0x00007f757049e0d4: cmp    %r11,%rax
  0x00007f757049e0d7: jbe    0x00007f757049e0f0
  0x00007f757049e0dd: movabs $0x7f757036de58,%r11
  0x00007f757049e0e7: cmp    %r11,%rax
  0x00007f757049e0ea: jb     0x00007f757049e167
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049e0f0: mov    %rsp,-0x28(%rsp)
  0x00007f757049e0f5: sub    $0x80,%rsp
  0x00007f757049e0fc: mov    %rax,0x78(%rsp)
  0x00007f757049e101: mov    %rcx,0x70(%rsp)
  0x00007f757049e106: mov    %rdx,0x68(%rsp)
  0x00007f757049e10b: mov    %rbx,0x60(%rsp)
  0x00007f757049e110: mov    %rbp,0x50(%rsp)
  0x00007f757049e115: mov    %rsi,0x48(%rsp)
  0x00007f757049e11a: mov    %rdi,0x40(%rsp)
  0x00007f757049e11f: mov    %r8,0x38(%rsp)
  0x00007f757049e124: mov    %r9,0x30(%rsp)
  0x00007f757049e129: mov    %r10,0x28(%rsp)
  0x00007f757049e12e: mov    %r11,0x20(%rsp)
  0x00007f757049e133: mov    %r12,0x18(%rsp)
  0x00007f757049e138: mov    %r13,0x10(%rsp)
  0x00007f757049e13d: mov    %r14,0x8(%rsp)
  0x00007f757049e142: mov    %r15,(%rsp)
  0x00007f757049e146: movabs $0x7f758592f470,%rdi
  0x00007f757049e150: movabs $0x7f757049e0f0,%rsi
  0x00007f757049e15a: mov    %rsp,%rdx
  0x00007f757049e15d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e161: callq  0x00007f75853729fa
  0x00007f757049e166: hlt    
  ;; } verify_i2ce 
  0x00007f757049e167: mov    %rsp,%r11
  0x00007f757049e16a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e16e: push   %rax
  0x00007f757049e16f: mov    %r11,%rax
  0x00007f757049e172: mov    0x50(%rbx),%r11
  0x00007f757049e176: mov    0x8(%rax),%rsi
  0x00007f757049e17a: mov    %rbx,0x258(%r15)
  0x00007f757049e181: mov    %rbx,%rax
  0x00007f757049e184: jmpq   *%r11
  0x00007f757049e187: mov    0x8(%rsi),%ebx
  0x00007f757049e18a: shl    $0x3,%rbx
  0x00007f757049e18e: cmp    0x10(%rax),%rbx
  0x00007f757049e192: mov    0x8(%rax),%rbx
  0x00007f757049e196: je     0x00007f757049e1a1
  0x00007f757049e19c: jmpq   0x00007f757046ec40
  0x00007f757049e1a1: cmpq   $0x0,0x58(%rbx)
  0x00007f757049e1a9: je     0x00007f757049e2a4
  0x00007f757049e1af: jmpq   0x00007f757046ec40
  0x00007f757049e1b4: cmpq   $0x0,0x58(%rbx)
  0x00007f757049e1bc: je     0x00007f757049e2a4
  0x00007f757049e1c2: mov    %rsp,%r13
  0x00007f757049e1c5: mov    (%rsp),%rax
  0x00007f757049e1c9: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e1cd: pushfq 
  0x00007f757049e1ce: sub    $0x8,%rsp
  0x00007f757049e1d2: mov    %rsp,-0x28(%rsp)
  0x00007f757049e1d7: sub    $0x80,%rsp
  0x00007f757049e1de: mov    %rax,0x78(%rsp)
  0x00007f757049e1e3: mov    %rcx,0x70(%rsp)
  0x00007f757049e1e8: mov    %rdx,0x68(%rsp)
  0x00007f757049e1ed: mov    %rbx,0x60(%rsp)
  0x00007f757049e1f2: mov    %rbp,0x50(%rsp)
  0x00007f757049e1f7: mov    %rsi,0x48(%rsp)
  0x00007f757049e1fc: mov    %rdi,0x40(%rsp)
  0x00007f757049e201: mov    %r8,0x38(%rsp)
  0x00007f757049e206: mov    %r9,0x30(%rsp)
  0x00007f757049e20b: mov    %r10,0x28(%rsp)
  0x00007f757049e210: mov    %r11,0x20(%rsp)
  0x00007f757049e215: mov    %r12,0x18(%rsp)
  0x00007f757049e21a: mov    %r13,0x10(%rsp)
  0x00007f757049e21f: mov    %r14,0x8(%rsp)
  0x00007f757049e224: mov    %r15,(%rsp)
  0x00007f757049e228: sub    $0x200,%rsp
  0x00007f757049e22f: fxsave64 (%rsp)
  0x00007f757049e234: mov    %rbx,%rdi
  0x00007f757049e237: mov    %rax,%rsi
  0x00007f757049e23a: callq  0x00007f7585522bca
  0x00007f757049e23f: fxrstor64 (%rsp)
  0x00007f757049e244: add    $0x200,%rsp
  0x00007f757049e24b: mov    (%rsp),%r15
  0x00007f757049e24f: mov    0x8(%rsp),%r14
  0x00007f757049e254: mov    0x10(%rsp),%r13
  0x00007f757049e259: mov    0x18(%rsp),%r12
  0x00007f757049e25e: mov    0x20(%rsp),%r11
  0x00007f757049e263: mov    0x28(%rsp),%r10
  0x00007f757049e268: mov    0x30(%rsp),%r9
  0x00007f757049e26d: mov    0x38(%rsp),%r8
  0x00007f757049e272: mov    0x40(%rsp),%rdi
  0x00007f757049e277: mov    0x48(%rsp),%rsi
  0x00007f757049e27c: mov    0x50(%rsp),%rbp
  0x00007f757049e281: mov    0x60(%rsp),%rbx
  0x00007f757049e286: mov    0x68(%rsp),%rdx
  0x00007f757049e28b: mov    0x70(%rsp),%rcx
  0x00007f757049e290: mov    0x78(%rsp),%rax
  0x00007f757049e295: add    $0x80,%rsp
  0x00007f757049e29c: add    $0x8,%rsp
  0x00007f757049e2a0: popfq  
  0x00007f757049e2a1: mov    %r13,%rsp
  0x00007f757049e2a4: pop    %rax
  0x00007f757049e2a5: mov    %rsp,%r13
  0x00007f757049e2a8: sub    $0x10,%rsp
  0x00007f757049e2ac: mov    %rax,(%rsp)
  0x00007f757049e2b0: mov    %rsi,0x8(%rsp)
  0x00007f757049e2b5: mov    0x40(%rbx),%rcx
  0x00007f757049e2b9: jmpq   *%rcx

AHE@0x00007f75800d6390: 0x i2c: 0x00007f757049e360 c2i: 0x00007f757049e470 c2iUV: 0x00007f757049e443
i2c argument handler #0 for: static ()Z (530 bytes generated)
c2i argument handler starts at 0x7f757049e470
  0x00007f757049e360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049e364: movabs $0x7f757036e3e0,%r11
  0x00007f757049e36e: cmp    %r11,%rax
  0x00007f757049e371: jbe    0x00007f757049e38a
  0x00007f757049e377: movabs $0x7f757046e3e0,%r11
  0x00007f757049e381: cmp    %r11,%rax
  0x00007f757049e384: jb     0x00007f757049e427
  0x00007f757049e38a: movabs $0x7f7570369420,%r11
  0x00007f757049e394: cmp    %r11,%rax
  0x00007f757049e397: jbe    0x00007f757049e3b0
  0x00007f757049e39d: movabs $0x7f757036de58,%r11
  0x00007f757049e3a7: cmp    %r11,%rax
  0x00007f757049e3aa: jb     0x00007f757049e427
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049e3b0: mov    %rsp,-0x28(%rsp)
  0x00007f757049e3b5: sub    $0x80,%rsp
  0x00007f757049e3bc: mov    %rax,0x78(%rsp)
  0x00007f757049e3c1: mov    %rcx,0x70(%rsp)
  0x00007f757049e3c6: mov    %rdx,0x68(%rsp)
  0x00007f757049e3cb: mov    %rbx,0x60(%rsp)
  0x00007f757049e3d0: mov    %rbp,0x50(%rsp)
  0x00007f757049e3d5: mov    %rsi,0x48(%rsp)
  0x00007f757049e3da: mov    %rdi,0x40(%rsp)
  0x00007f757049e3df: mov    %r8,0x38(%rsp)
  0x00007f757049e3e4: mov    %r9,0x30(%rsp)
  0x00007f757049e3e9: mov    %r10,0x28(%rsp)
  0x00007f757049e3ee: mov    %r11,0x20(%rsp)
  0x00007f757049e3f3: mov    %r12,0x18(%rsp)
  0x00007f757049e3f8: mov    %r13,0x10(%rsp)
  0x00007f757049e3fd: mov    %r14,0x8(%rsp)
  0x00007f757049e402: mov    %r15,(%rsp)
  0x00007f757049e406: movabs $0x7f758592f470,%rdi
  0x00007f757049e410: movabs $0x7f757049e3b0,%rsi
  0x00007f757049e41a: mov    %rsp,%rdx
  0x00007f757049e41d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e421: callq  0x00007f75853729fa
  0x00007f757049e426: hlt    
  ;; } verify_i2ce 
  0x00007f757049e427: mov    %rsp,%r11
  0x00007f757049e42a: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e42e: push   %rax
  0x00007f757049e42f: mov    %r11,%rax
  0x00007f757049e432: mov    0x50(%rbx),%r11
  0x00007f757049e436: mov    %rbx,0x258(%r15)
  0x00007f757049e43d: mov    %rbx,%rax
  0x00007f757049e440: jmpq   *%r11
  0x00007f757049e443: mov    0x8(%rsi),%ebx
  0x00007f757049e446: shl    $0x3,%rbx
  0x00007f757049e44a: cmp    0x10(%rax),%rbx
  0x00007f757049e44e: mov    0x8(%rax),%rbx
  0x00007f757049e452: je     0x00007f757049e45d
  0x00007f757049e458: jmpq   0x00007f757046ec40
  0x00007f757049e45d: cmpq   $0x0,0x58(%rbx)
  0x00007f757049e465: je     0x00007f757049e560
  0x00007f757049e46b: jmpq   0x00007f757046ec40
  0x00007f757049e470: cmpq   $0x0,0x58(%rbx)
  0x00007f757049e478: je     0x00007f757049e560
  0x00007f757049e47e: mov    %rsp,%r13
  0x00007f757049e481: mov    (%rsp),%rax
  0x00007f757049e485: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e489: pushfq 
  0x00007f757049e48a: sub    $0x8,%rsp
  0x00007f757049e48e: mov    %rsp,-0x28(%rsp)
  0x00007f757049e493: sub    $0x80,%rsp
  0x00007f757049e49a: mov    %rax,0x78(%rsp)
  0x00007f757049e49f: mov    %rcx,0x70(%rsp)
  0x00007f757049e4a4: mov    %rdx,0x68(%rsp)
  0x00007f757049e4a9: mov    %rbx,0x60(%rsp)
  0x00007f757049e4ae: mov    %rbp,0x50(%rsp)
  0x00007f757049e4b3: mov    %rsi,0x48(%rsp)
  0x00007f757049e4b8: mov    %rdi,0x40(%rsp)
  0x00007f757049e4bd: mov    %r8,0x38(%rsp)
  0x00007f757049e4c2: mov    %r9,0x30(%rsp)
  0x00007f757049e4c7: mov    %r10,0x28(%rsp)
  0x00007f757049e4cc: mov    %r11,0x20(%rsp)
  0x00007f757049e4d1: mov    %r12,0x18(%rsp)
  0x00007f757049e4d6: mov    %r13,0x10(%rsp)
  0x00007f757049e4db: mov    %r14,0x8(%rsp)
  0x00007f757049e4e0: mov    %r15,(%rsp)
  0x00007f757049e4e4: sub    $0x200,%rsp
  0x00007f757049e4eb: fxsave64 (%rsp)
  0x00007f757049e4f0: mov    %rbx,%rdi
  0x00007f757049e4f3: mov    %rax,%rsi
  0x00007f757049e4f6: callq  0x00007f7585522bca
  0x00007f757049e4fb: fxrstor64 (%rsp)
  0x00007f757049e500: add    $0x200,%rsp
  0x00007f757049e507: mov    (%rsp),%r15
  0x00007f757049e50b: mov    0x8(%rsp),%r14
  0x00007f757049e510: mov    0x10(%rsp),%r13
  0x00007f757049e515: mov    0x18(%rsp),%r12
  0x00007f757049e51a: mov    0x20(%rsp),%r11
  0x00007f757049e51f: mov    0x28(%rsp),%r10
  0x00007f757049e524: mov    0x30(%rsp),%r9
  0x00007f757049e529: mov    0x38(%rsp),%r8
  0x00007f757049e52e: mov    0x40(%rsp),%rdi
  0x00007f757049e533: mov    0x48(%rsp),%rsi
  0x00007f757049e538: mov    0x50(%rsp),%rbp
  0x00007f757049e53d: mov    0x60(%rsp),%rbx
  0x00007f757049e542: mov    0x68(%rsp),%rdx
  0x00007f757049e547: mov    0x70(%rsp),%rcx
  0x00007f757049e54c: mov    0x78(%rsp),%rax
  0x00007f757049e551: add    $0x80,%rsp
  0x00007f757049e558: add    $0x8,%rsp
  0x00007f757049e55c: popfq  
  0x00007f757049e55d: mov    %r13,%rsp
  0x00007f757049e560: pop    %rax
  0x00007f757049e561: mov    %rsp,%r13
  0x00007f757049e564: sub    $0x10,%rsp
  0x00007f757049e568: mov    %rax,(%rsp)
  0x00007f757049e56c: mov    0x40(%rbx),%rcx
  0x00007f757049e570: jmpq   *%rcx

AHE@0x00007f75800d63d8: 0xbb000000 i2c: 0x00007f757049e620 c2i: 0x00007f757049e738 c2iUV: 0x00007f757049e70b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/util/Enumeration; (548 bytes generated)
c2i argument handler starts at 0x7f757049e738
  0x00007f757049e620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049e624: movabs $0x7f757036e3e0,%r11
  0x00007f757049e62e: cmp    %r11,%rax
  0x00007f757049e631: jbe    0x00007f757049e64a
  0x00007f757049e637: movabs $0x7f757046e3e0,%r11
  0x00007f757049e641: cmp    %r11,%rax
  0x00007f757049e644: jb     0x00007f757049e6e7
  0x00007f757049e64a: movabs $0x7f7570369420,%r11
  0x00007f757049e654: cmp    %r11,%rax
  0x00007f757049e657: jbe    0x00007f757049e670
  0x00007f757049e65d: movabs $0x7f757036de58,%r11
  0x00007f757049e667: cmp    %r11,%rax
  0x00007f757049e66a: jb     0x00007f757049e6e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049e670: mov    %rsp,-0x28(%rsp)
  0x00007f757049e675: sub    $0x80,%rsp
  0x00007f757049e67c: mov    %rax,0x78(%rsp)
  0x00007f757049e681: mov    %rcx,0x70(%rsp)
  0x00007f757049e686: mov    %rdx,0x68(%rsp)
  0x00007f757049e68b: mov    %rbx,0x60(%rsp)
  0x00007f757049e690: mov    %rbp,0x50(%rsp)
  0x00007f757049e695: mov    %rsi,0x48(%rsp)
  0x00007f757049e69a: mov    %rdi,0x40(%rsp)
  0x00007f757049e69f: mov    %r8,0x38(%rsp)
  0x00007f757049e6a4: mov    %r9,0x30(%rsp)
  0x00007f757049e6a9: mov    %r10,0x28(%rsp)
  0x00007f757049e6ae: mov    %r11,0x20(%rsp)
  0x00007f757049e6b3: mov    %r12,0x18(%rsp)
  0x00007f757049e6b8: mov    %r13,0x10(%rsp)
  0x00007f757049e6bd: mov    %r14,0x8(%rsp)
  0x00007f757049e6c2: mov    %r15,(%rsp)
  0x00007f757049e6c6: movabs $0x7f758592f470,%rdi
  0x00007f757049e6d0: movabs $0x7f757049e670,%rsi
  0x00007f757049e6da: mov    %rsp,%rdx
  0x00007f757049e6dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e6e1: callq  0x00007f75853729fa
  0x00007f757049e6e6: hlt    
  ;; } verify_i2ce 
  0x00007f757049e6e7: mov    %rsp,%r11
  0x00007f757049e6ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e6ee: push   %rax
  0x00007f757049e6ef: mov    %r11,%rax
  0x00007f757049e6f2: mov    0x50(%rbx),%r11
  0x00007f757049e6f6: mov    0x10(%rax),%rsi
  0x00007f757049e6fa: mov    0x8(%rax),%rdx
  0x00007f757049e6fe: mov    %rbx,0x258(%r15)
  0x00007f757049e705: mov    %rbx,%rax
  0x00007f757049e708: jmpq   *%r11
  0x00007f757049e70b: mov    0x8(%rsi),%ebx
  0x00007f757049e70e: shl    $0x3,%rbx
  0x00007f757049e712: cmp    0x10(%rax),%rbx
  0x00007f757049e716: mov    0x8(%rax),%rbx
  0x00007f757049e71a: je     0x00007f757049e725
  0x00007f757049e720: jmpq   0x00007f757046ec40
  0x00007f757049e725: cmpq   $0x0,0x58(%rbx)
  0x00007f757049e72d: je     0x00007f757049e828
  0x00007f757049e733: jmpq   0x00007f757046ec40
  0x00007f757049e738: cmpq   $0x0,0x58(%rbx)
  0x00007f757049e740: je     0x00007f757049e828
  0x00007f757049e746: mov    %rsp,%r13
  0x00007f757049e749: mov    (%rsp),%rax
  0x00007f757049e74d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e751: pushfq 
  0x00007f757049e752: sub    $0x8,%rsp
  0x00007f757049e756: mov    %rsp,-0x28(%rsp)
  0x00007f757049e75b: sub    $0x80,%rsp
  0x00007f757049e762: mov    %rax,0x78(%rsp)
  0x00007f757049e767: mov    %rcx,0x70(%rsp)
  0x00007f757049e76c: mov    %rdx,0x68(%rsp)
  0x00007f757049e771: mov    %rbx,0x60(%rsp)
  0x00007f757049e776: mov    %rbp,0x50(%rsp)
  0x00007f757049e77b: mov    %rsi,0x48(%rsp)
  0x00007f757049e780: mov    %rdi,0x40(%rsp)
  0x00007f757049e785: mov    %r8,0x38(%rsp)
  0x00007f757049e78a: mov    %r9,0x30(%rsp)
  0x00007f757049e78f: mov    %r10,0x28(%rsp)
  0x00007f757049e794: mov    %r11,0x20(%rsp)
  0x00007f757049e799: mov    %r12,0x18(%rsp)
  0x00007f757049e79e: mov    %r13,0x10(%rsp)
  0x00007f757049e7a3: mov    %r14,0x8(%rsp)
  0x00007f757049e7a8: mov    %r15,(%rsp)
  0x00007f757049e7ac: sub    $0x200,%rsp
  0x00007f757049e7b3: fxsave64 (%rsp)
  0x00007f757049e7b8: mov    %rbx,%rdi
  0x00007f757049e7bb: mov    %rax,%rsi
  0x00007f757049e7be: callq  0x00007f7585522bca
  0x00007f757049e7c3: fxrstor64 (%rsp)
  0x00007f757049e7c8: add    $0x200,%rsp
  0x00007f757049e7cf: mov    (%rsp),%r15
  0x00007f757049e7d3: mov    0x8(%rsp),%r14
  0x00007f757049e7d8: mov    0x10(%rsp),%r13
  0x00007f757049e7dd: mov    0x18(%rsp),%r12
  0x00007f757049e7e2: mov    0x20(%rsp),%r11
  0x00007f757049e7e7: mov    0x28(%rsp),%r10
  0x00007f757049e7ec: mov    0x30(%rsp),%r9
  0x00007f757049e7f1: mov    0x38(%rsp),%r8
  0x00007f757049e7f6: mov    0x40(%rsp),%rdi
  0x00007f757049e7fb: mov    0x48(%rsp),%rsi
  0x00007f757049e800: mov    0x50(%rsp),%rbp
  0x00007f757049e805: mov    0x60(%rsp),%rbx
  0x00007f757049e80a: mov    0x68(%rsp),%rdx
  0x00007f757049e80f: mov    0x70(%rsp),%rcx
  0x00007f757049e814: mov    0x78(%rsp),%rax
  0x00007f757049e819: add    $0x80,%rsp
  0x00007f757049e820: add    $0x8,%rsp
  0x00007f757049e824: popfq  
  0x00007f757049e825: mov    %r13,%rsp
  0x00007f757049e828: pop    %rax
  0x00007f757049e829: mov    %rsp,%r13
  0x00007f757049e82c: sub    $0x20,%rsp
  0x00007f757049e830: mov    %rax,(%rsp)
  0x00007f757049e834: mov    %rsi,0x10(%rsp)
  0x00007f757049e839: mov    %rdx,0x8(%rsp)
  0x00007f757049e83e: mov    0x40(%rbx),%rcx
  0x00007f757049e842: jmpq   *%rcx

AHE@0x00007f75800d6420: 0xbb000000 i2c: 0x00007f757049e920 c2i: 0x00007f757049ea38 c2iUV: 0x00007f757049ea0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/net/URL; (548 bytes generated)
c2i argument handler starts at 0x7f757049ea38
  0x00007f757049e920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049e924: movabs $0x7f757036e3e0,%r11
  0x00007f757049e92e: cmp    %r11,%rax
  0x00007f757049e931: jbe    0x00007f757049e94a
  0x00007f757049e937: movabs $0x7f757046e3e0,%r11
  0x00007f757049e941: cmp    %r11,%rax
  0x00007f757049e944: jb     0x00007f757049e9e7
  0x00007f757049e94a: movabs $0x7f7570369420,%r11
  0x00007f757049e954: cmp    %r11,%rax
  0x00007f757049e957: jbe    0x00007f757049e970
  0x00007f757049e95d: movabs $0x7f757036de58,%r11
  0x00007f757049e967: cmp    %r11,%rax
  0x00007f757049e96a: jb     0x00007f757049e9e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049e970: mov    %rsp,-0x28(%rsp)
  0x00007f757049e975: sub    $0x80,%rsp
  0x00007f757049e97c: mov    %rax,0x78(%rsp)
  0x00007f757049e981: mov    %rcx,0x70(%rsp)
  0x00007f757049e986: mov    %rdx,0x68(%rsp)
  0x00007f757049e98b: mov    %rbx,0x60(%rsp)
  0x00007f757049e990: mov    %rbp,0x50(%rsp)
  0x00007f757049e995: mov    %rsi,0x48(%rsp)
  0x00007f757049e99a: mov    %rdi,0x40(%rsp)
  0x00007f757049e99f: mov    %r8,0x38(%rsp)
  0x00007f757049e9a4: mov    %r9,0x30(%rsp)
  0x00007f757049e9a9: mov    %r10,0x28(%rsp)
  0x00007f757049e9ae: mov    %r11,0x20(%rsp)
  0x00007f757049e9b3: mov    %r12,0x18(%rsp)
  0x00007f757049e9b8: mov    %r13,0x10(%rsp)
  0x00007f757049e9bd: mov    %r14,0x8(%rsp)
  0x00007f757049e9c2: mov    %r15,(%rsp)
  0x00007f757049e9c6: movabs $0x7f758592f470,%rdi
  0x00007f757049e9d0: movabs $0x7f757049e970,%rsi
  0x00007f757049e9da: mov    %rsp,%rdx
  0x00007f757049e9dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e9e1: callq  0x00007f75853729fa
  0x00007f757049e9e6: hlt    
  ;; } verify_i2ce 
  0x00007f757049e9e7: mov    %rsp,%r11
  0x00007f757049e9ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049e9ee: push   %rax
  0x00007f757049e9ef: mov    %r11,%rax
  0x00007f757049e9f2: mov    0x50(%rbx),%r11
  0x00007f757049e9f6: mov    0x10(%rax),%rsi
  0x00007f757049e9fa: mov    0x8(%rax),%rdx
  0x00007f757049e9fe: mov    %rbx,0x258(%r15)
  0x00007f757049ea05: mov    %rbx,%rax
  0x00007f757049ea08: jmpq   *%r11
  0x00007f757049ea0b: mov    0x8(%rsi),%ebx
  0x00007f757049ea0e: shl    $0x3,%rbx
  0x00007f757049ea12: cmp    0x10(%rax),%rbx
  0x00007f757049ea16: mov    0x8(%rax),%rbx
  0x00007f757049ea1a: je     0x00007f757049ea25
  0x00007f757049ea20: jmpq   0x00007f757046ec40
  0x00007f757049ea25: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ea2d: je     0x00007f757049eb28
  0x00007f757049ea33: jmpq   0x00007f757046ec40
  0x00007f757049ea38: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ea40: je     0x00007f757049eb28
  0x00007f757049ea46: mov    %rsp,%r13
  0x00007f757049ea49: mov    (%rsp),%rax
  0x00007f757049ea4d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ea51: pushfq 
  0x00007f757049ea52: sub    $0x8,%rsp
  0x00007f757049ea56: mov    %rsp,-0x28(%rsp)
  0x00007f757049ea5b: sub    $0x80,%rsp
  0x00007f757049ea62: mov    %rax,0x78(%rsp)
  0x00007f757049ea67: mov    %rcx,0x70(%rsp)
  0x00007f757049ea6c: mov    %rdx,0x68(%rsp)
  0x00007f757049ea71: mov    %rbx,0x60(%rsp)
  0x00007f757049ea76: mov    %rbp,0x50(%rsp)
  0x00007f757049ea7b: mov    %rsi,0x48(%rsp)
  0x00007f757049ea80: mov    %rdi,0x40(%rsp)
  0x00007f757049ea85: mov    %r8,0x38(%rsp)
  0x00007f757049ea8a: mov    %r9,0x30(%rsp)
  0x00007f757049ea8f: mov    %r10,0x28(%rsp)
  0x00007f757049ea94: mov    %r11,0x20(%rsp)
  0x00007f757049ea99: mov    %r12,0x18(%rsp)
  0x00007f757049ea9e: mov    %r13,0x10(%rsp)
  0x00007f757049eaa3: mov    %r14,0x8(%rsp)
  0x00007f757049eaa8: mov    %r15,(%rsp)
  0x00007f757049eaac: sub    $0x200,%rsp
  0x00007f757049eab3: fxsave64 (%rsp)
  0x00007f757049eab8: mov    %rbx,%rdi
  0x00007f757049eabb: mov    %rax,%rsi
  0x00007f757049eabe: callq  0x00007f7585522bca
  0x00007f757049eac3: fxrstor64 (%rsp)
  0x00007f757049eac8: add    $0x200,%rsp
  0x00007f757049eacf: mov    (%rsp),%r15
  0x00007f757049ead3: mov    0x8(%rsp),%r14
  0x00007f757049ead8: mov    0x10(%rsp),%r13
  0x00007f757049eadd: mov    0x18(%rsp),%r12
  0x00007f757049eae2: mov    0x20(%rsp),%r11
  0x00007f757049eae7: mov    0x28(%rsp),%r10
  0x00007f757049eaec: mov    0x30(%rsp),%r9
  0x00007f757049eaf1: mov    0x38(%rsp),%r8
  0x00007f757049eaf6: mov    0x40(%rsp),%rdi
  0x00007f757049eafb: mov    0x48(%rsp),%rsi
  0x00007f757049eb00: mov    0x50(%rsp),%rbp
  0x00007f757049eb05: mov    0x60(%rsp),%rbx
  0x00007f757049eb0a: mov    0x68(%rsp),%rdx
  0x00007f757049eb0f: mov    0x70(%rsp),%rcx
  0x00007f757049eb14: mov    0x78(%rsp),%rax
  0x00007f757049eb19: add    $0x80,%rsp
  0x00007f757049eb20: add    $0x8,%rsp
  0x00007f757049eb24: popfq  
  0x00007f757049eb25: mov    %r13,%rsp
  0x00007f757049eb28: pop    %rax
  0x00007f757049eb29: mov    %rsp,%r13
  0x00007f757049eb2c: sub    $0x20,%rsp
  0x00007f757049eb30: mov    %rax,(%rsp)
  0x00007f757049eb34: mov    %rsi,0x10(%rsp)
  0x00007f757049eb39: mov    %rdx,0x8(%rsp)
  0x00007f757049eb3e: mov    0x40(%rbx),%rcx
  0x00007f757049eb42: jmpq   *%rcx

AHE@0x00007f75800d6468: 0xbb000000 i2c: 0x00007f757049ec20 c2i: 0x00007f757049ed38 c2iUV: 0x00007f757049ed0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/util/Enumeration; (548 bytes generated)
c2i argument handler starts at 0x7f757049ed38
  0x00007f757049ec20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049ec24: movabs $0x7f757036e3e0,%r11
  0x00007f757049ec2e: cmp    %r11,%rax
  0x00007f757049ec31: jbe    0x00007f757049ec4a
  0x00007f757049ec37: movabs $0x7f757046e3e0,%r11
  0x00007f757049ec41: cmp    %r11,%rax
  0x00007f757049ec44: jb     0x00007f757049ece7
  0x00007f757049ec4a: movabs $0x7f7570369420,%r11
  0x00007f757049ec54: cmp    %r11,%rax
  0x00007f757049ec57: jbe    0x00007f757049ec70
  0x00007f757049ec5d: movabs $0x7f757036de58,%r11
  0x00007f757049ec67: cmp    %r11,%rax
  0x00007f757049ec6a: jb     0x00007f757049ece7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049ec70: mov    %rsp,-0x28(%rsp)
  0x00007f757049ec75: sub    $0x80,%rsp
  0x00007f757049ec7c: mov    %rax,0x78(%rsp)
  0x00007f757049ec81: mov    %rcx,0x70(%rsp)
  0x00007f757049ec86: mov    %rdx,0x68(%rsp)
  0x00007f757049ec8b: mov    %rbx,0x60(%rsp)
  0x00007f757049ec90: mov    %rbp,0x50(%rsp)
  0x00007f757049ec95: mov    %rsi,0x48(%rsp)
  0x00007f757049ec9a: mov    %rdi,0x40(%rsp)
  0x00007f757049ec9f: mov    %r8,0x38(%rsp)
  0x00007f757049eca4: mov    %r9,0x30(%rsp)
  0x00007f757049eca9: mov    %r10,0x28(%rsp)
  0x00007f757049ecae: mov    %r11,0x20(%rsp)
  0x00007f757049ecb3: mov    %r12,0x18(%rsp)
  0x00007f757049ecb8: mov    %r13,0x10(%rsp)
  0x00007f757049ecbd: mov    %r14,0x8(%rsp)
  0x00007f757049ecc2: mov    %r15,(%rsp)
  0x00007f757049ecc6: movabs $0x7f758592f470,%rdi
  0x00007f757049ecd0: movabs $0x7f757049ec70,%rsi
  0x00007f757049ecda: mov    %rsp,%rdx
  0x00007f757049ecdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ece1: callq  0x00007f75853729fa
  0x00007f757049ece6: hlt    
  ;; } verify_i2ce 
  0x00007f757049ece7: mov    %rsp,%r11
  0x00007f757049ecea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ecee: push   %rax
  0x00007f757049ecef: mov    %r11,%rax
  0x00007f757049ecf2: mov    0x50(%rbx),%r11
  0x00007f757049ecf6: mov    0x10(%rax),%rsi
  0x00007f757049ecfa: mov    0x8(%rax),%rdx
  0x00007f757049ecfe: mov    %rbx,0x258(%r15)
  0x00007f757049ed05: mov    %rbx,%rax
  0x00007f757049ed08: jmpq   *%r11
  0x00007f757049ed0b: mov    0x8(%rsi),%ebx
  0x00007f757049ed0e: shl    $0x3,%rbx
  0x00007f757049ed12: cmp    0x10(%rax),%rbx
  0x00007f757049ed16: mov    0x8(%rax),%rbx
  0x00007f757049ed1a: je     0x00007f757049ed25
  0x00007f757049ed20: jmpq   0x00007f757046ec40
  0x00007f757049ed25: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ed2d: je     0x00007f757049ee28
  0x00007f757049ed33: jmpq   0x00007f757046ec40
  0x00007f757049ed38: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ed40: je     0x00007f757049ee28
  0x00007f757049ed46: mov    %rsp,%r13
  0x00007f757049ed49: mov    (%rsp),%rax
  0x00007f757049ed4d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ed51: pushfq 
  0x00007f757049ed52: sub    $0x8,%rsp
  0x00007f757049ed56: mov    %rsp,-0x28(%rsp)
  0x00007f757049ed5b: sub    $0x80,%rsp
  0x00007f757049ed62: mov    %rax,0x78(%rsp)
  0x00007f757049ed67: mov    %rcx,0x70(%rsp)
  0x00007f757049ed6c: mov    %rdx,0x68(%rsp)
  0x00007f757049ed71: mov    %rbx,0x60(%rsp)
  0x00007f757049ed76: mov    %rbp,0x50(%rsp)
  0x00007f757049ed7b: mov    %rsi,0x48(%rsp)
  0x00007f757049ed80: mov    %rdi,0x40(%rsp)
  0x00007f757049ed85: mov    %r8,0x38(%rsp)
  0x00007f757049ed8a: mov    %r9,0x30(%rsp)
  0x00007f757049ed8f: mov    %r10,0x28(%rsp)
  0x00007f757049ed94: mov    %r11,0x20(%rsp)
  0x00007f757049ed99: mov    %r12,0x18(%rsp)
  0x00007f757049ed9e: mov    %r13,0x10(%rsp)
  0x00007f757049eda3: mov    %r14,0x8(%rsp)
  0x00007f757049eda8: mov    %r15,(%rsp)
  0x00007f757049edac: sub    $0x200,%rsp
  0x00007f757049edb3: fxsave64 (%rsp)
  0x00007f757049edb8: mov    %rbx,%rdi
  0x00007f757049edbb: mov    %rax,%rsi
  0x00007f757049edbe: callq  0x00007f7585522bca
  0x00007f757049edc3: fxrstor64 (%rsp)
  0x00007f757049edc8: add    $0x200,%rsp
  0x00007f757049edcf: mov    (%rsp),%r15
  0x00007f757049edd3: mov    0x8(%rsp),%r14
  0x00007f757049edd8: mov    0x10(%rsp),%r13
  0x00007f757049eddd: mov    0x18(%rsp),%r12
  0x00007f757049ede2: mov    0x20(%rsp),%r11
  0x00007f757049ede7: mov    0x28(%rsp),%r10
  0x00007f757049edec: mov    0x30(%rsp),%r9
  0x00007f757049edf1: mov    0x38(%rsp),%r8
  0x00007f757049edf6: mov    0x40(%rsp),%rdi
  0x00007f757049edfb: mov    0x48(%rsp),%rsi
  0x00007f757049ee00: mov    0x50(%rsp),%rbp
  0x00007f757049ee05: mov    0x60(%rsp),%rbx
  0x00007f757049ee0a: mov    0x68(%rsp),%rdx
  0x00007f757049ee0f: mov    0x70(%rsp),%rcx
  0x00007f757049ee14: mov    0x78(%rsp),%rax
  0x00007f757049ee19: add    $0x80,%rsp
  0x00007f757049ee20: add    $0x8,%rsp
  0x00007f757049ee24: popfq  
  0x00007f757049ee25: mov    %r13,%rsp
  0x00007f757049ee28: pop    %rax
  0x00007f757049ee29: mov    %rsp,%r13
  0x00007f757049ee2c: sub    $0x20,%rsp
  0x00007f757049ee30: mov    %rax,(%rsp)
  0x00007f757049ee34: mov    %rsi,0x10(%rsp)
  0x00007f757049ee39: mov    %rdx,0x8(%rsp)
  0x00007f757049ee3e: mov    0x40(%rbx),%rcx
  0x00007f757049ee42: jmpq   *%rcx

AHE@0x00007f75800d64b0: 0xbb000000 i2c: 0x00007f757049ef20 c2i: 0x00007f757049f038 c2iUV: 0x00007f757049f00b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f757049f038
  0x00007f757049ef20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049ef24: movabs $0x7f757036e3e0,%r11
  0x00007f757049ef2e: cmp    %r11,%rax
  0x00007f757049ef31: jbe    0x00007f757049ef4a
  0x00007f757049ef37: movabs $0x7f757046e3e0,%r11
  0x00007f757049ef41: cmp    %r11,%rax
  0x00007f757049ef44: jb     0x00007f757049efe7
  0x00007f757049ef4a: movabs $0x7f7570369420,%r11
  0x00007f757049ef54: cmp    %r11,%rax
  0x00007f757049ef57: jbe    0x00007f757049ef70
  0x00007f757049ef5d: movabs $0x7f757036de58,%r11
  0x00007f757049ef67: cmp    %r11,%rax
  0x00007f757049ef6a: jb     0x00007f757049efe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049ef70: mov    %rsp,-0x28(%rsp)
  0x00007f757049ef75: sub    $0x80,%rsp
  0x00007f757049ef7c: mov    %rax,0x78(%rsp)
  0x00007f757049ef81: mov    %rcx,0x70(%rsp)
  0x00007f757049ef86: mov    %rdx,0x68(%rsp)
  0x00007f757049ef8b: mov    %rbx,0x60(%rsp)
  0x00007f757049ef90: mov    %rbp,0x50(%rsp)
  0x00007f757049ef95: mov    %rsi,0x48(%rsp)
  0x00007f757049ef9a: mov    %rdi,0x40(%rsp)
  0x00007f757049ef9f: mov    %r8,0x38(%rsp)
  0x00007f757049efa4: mov    %r9,0x30(%rsp)
  0x00007f757049efa9: mov    %r10,0x28(%rsp)
  0x00007f757049efae: mov    %r11,0x20(%rsp)
  0x00007f757049efb3: mov    %r12,0x18(%rsp)
  0x00007f757049efb8: mov    %r13,0x10(%rsp)
  0x00007f757049efbd: mov    %r14,0x8(%rsp)
  0x00007f757049efc2: mov    %r15,(%rsp)
  0x00007f757049efc6: movabs $0x7f758592f470,%rdi
  0x00007f757049efd0: movabs $0x7f757049ef70,%rsi
  0x00007f757049efda: mov    %rsp,%rdx
  0x00007f757049efdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049efe1: callq  0x00007f75853729fa
  0x00007f757049efe6: hlt    
  ;; } verify_i2ce 
  0x00007f757049efe7: mov    %rsp,%r11
  0x00007f757049efea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049efee: push   %rax
  0x00007f757049efef: mov    %r11,%rax
  0x00007f757049eff2: mov    0x50(%rbx),%r11
  0x00007f757049eff6: mov    0x10(%rax),%rsi
  0x00007f757049effa: mov    0x8(%rax),%rdx
  0x00007f757049effe: mov    %rbx,0x258(%r15)
  0x00007f757049f005: mov    %rbx,%rax
  0x00007f757049f008: jmpq   *%r11
  0x00007f757049f00b: mov    0x8(%rsi),%ebx
  0x00007f757049f00e: shl    $0x3,%rbx
  0x00007f757049f012: cmp    0x10(%rax),%rbx
  0x00007f757049f016: mov    0x8(%rax),%rbx
  0x00007f757049f01a: je     0x00007f757049f025
  0x00007f757049f020: jmpq   0x00007f757046ec40
  0x00007f757049f025: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f02d: je     0x00007f757049f128
  0x00007f757049f033: jmpq   0x00007f757046ec40
  0x00007f757049f038: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f040: je     0x00007f757049f128
  0x00007f757049f046: mov    %rsp,%r13
  0x00007f757049f049: mov    (%rsp),%rax
  0x00007f757049f04d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f051: pushfq 
  0x00007f757049f052: sub    $0x8,%rsp
  0x00007f757049f056: mov    %rsp,-0x28(%rsp)
  0x00007f757049f05b: sub    $0x80,%rsp
  0x00007f757049f062: mov    %rax,0x78(%rsp)
  0x00007f757049f067: mov    %rcx,0x70(%rsp)
  0x00007f757049f06c: mov    %rdx,0x68(%rsp)
  0x00007f757049f071: mov    %rbx,0x60(%rsp)
  0x00007f757049f076: mov    %rbp,0x50(%rsp)
  0x00007f757049f07b: mov    %rsi,0x48(%rsp)
  0x00007f757049f080: mov    %rdi,0x40(%rsp)
  0x00007f757049f085: mov    %r8,0x38(%rsp)
  0x00007f757049f08a: mov    %r9,0x30(%rsp)
  0x00007f757049f08f: mov    %r10,0x28(%rsp)
  0x00007f757049f094: mov    %r11,0x20(%rsp)
  0x00007f757049f099: mov    %r12,0x18(%rsp)
  0x00007f757049f09e: mov    %r13,0x10(%rsp)
  0x00007f757049f0a3: mov    %r14,0x8(%rsp)
  0x00007f757049f0a8: mov    %r15,(%rsp)
  0x00007f757049f0ac: sub    $0x200,%rsp
  0x00007f757049f0b3: fxsave64 (%rsp)
  0x00007f757049f0b8: mov    %rbx,%rdi
  0x00007f757049f0bb: mov    %rax,%rsi
  0x00007f757049f0be: callq  0x00007f7585522bca
  0x00007f757049f0c3: fxrstor64 (%rsp)
  0x00007f757049f0c8: add    $0x200,%rsp
  0x00007f757049f0cf: mov    (%rsp),%r15
  0x00007f757049f0d3: mov    0x8(%rsp),%r14
  0x00007f757049f0d8: mov    0x10(%rsp),%r13
  0x00007f757049f0dd: mov    0x18(%rsp),%r12
  0x00007f757049f0e2: mov    0x20(%rsp),%r11
  0x00007f757049f0e7: mov    0x28(%rsp),%r10
  0x00007f757049f0ec: mov    0x30(%rsp),%r9
  0x00007f757049f0f1: mov    0x38(%rsp),%r8
  0x00007f757049f0f6: mov    0x40(%rsp),%rdi
  0x00007f757049f0fb: mov    0x48(%rsp),%rsi
  0x00007f757049f100: mov    0x50(%rsp),%rbp
  0x00007f757049f105: mov    0x60(%rsp),%rbx
  0x00007f757049f10a: mov    0x68(%rsp),%rdx
  0x00007f757049f10f: mov    0x70(%rsp),%rcx
  0x00007f757049f114: mov    0x78(%rsp),%rax
  0x00007f757049f119: add    $0x80,%rsp
  0x00007f757049f120: add    $0x8,%rsp
  0x00007f757049f124: popfq  
  0x00007f757049f125: mov    %r13,%rsp
  0x00007f757049f128: pop    %rax
  0x00007f757049f129: mov    %rsp,%r13
  0x00007f757049f12c: sub    $0x20,%rsp
  0x00007f757049f130: mov    %rax,(%rsp)
  0x00007f757049f134: mov    %rsi,0x10(%rsp)
  0x00007f757049f139: mov    %rdx,0x8(%rsp)
  0x00007f757049f13e: mov    0x40(%rbx),%rcx
  0x00007f757049f142: jmpq   *%rcx

AHE@0x00007f75800d64f8: 0xbb000000 i2c: 0x00007f757049f220 c2i: 0x00007f757049f338 c2iUV: 0x00007f757049f30b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f757049f338
  0x00007f757049f220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049f224: movabs $0x7f757036e3e0,%r11
  0x00007f757049f22e: cmp    %r11,%rax
  0x00007f757049f231: jbe    0x00007f757049f24a
  0x00007f757049f237: movabs $0x7f757046e3e0,%r11
  0x00007f757049f241: cmp    %r11,%rax
  0x00007f757049f244: jb     0x00007f757049f2e7
  0x00007f757049f24a: movabs $0x7f7570369420,%r11
  0x00007f757049f254: cmp    %r11,%rax
  0x00007f757049f257: jbe    0x00007f757049f270
  0x00007f757049f25d: movabs $0x7f757036de58,%r11
  0x00007f757049f267: cmp    %r11,%rax
  0x00007f757049f26a: jb     0x00007f757049f2e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049f270: mov    %rsp,-0x28(%rsp)
  0x00007f757049f275: sub    $0x80,%rsp
  0x00007f757049f27c: mov    %rax,0x78(%rsp)
  0x00007f757049f281: mov    %rcx,0x70(%rsp)
  0x00007f757049f286: mov    %rdx,0x68(%rsp)
  0x00007f757049f28b: mov    %rbx,0x60(%rsp)
  0x00007f757049f290: mov    %rbp,0x50(%rsp)
  0x00007f757049f295: mov    %rsi,0x48(%rsp)
  0x00007f757049f29a: mov    %rdi,0x40(%rsp)
  0x00007f757049f29f: mov    %r8,0x38(%rsp)
  0x00007f757049f2a4: mov    %r9,0x30(%rsp)
  0x00007f757049f2a9: mov    %r10,0x28(%rsp)
  0x00007f757049f2ae: mov    %r11,0x20(%rsp)
  0x00007f757049f2b3: mov    %r12,0x18(%rsp)
  0x00007f757049f2b8: mov    %r13,0x10(%rsp)
  0x00007f757049f2bd: mov    %r14,0x8(%rsp)
  0x00007f757049f2c2: mov    %r15,(%rsp)
  0x00007f757049f2c6: movabs $0x7f758592f470,%rdi
  0x00007f757049f2d0: movabs $0x7f757049f270,%rsi
  0x00007f757049f2da: mov    %rsp,%rdx
  0x00007f757049f2dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f2e1: callq  0x00007f75853729fa
  0x00007f757049f2e6: hlt    
  ;; } verify_i2ce 
  0x00007f757049f2e7: mov    %rsp,%r11
  0x00007f757049f2ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f2ee: push   %rax
  0x00007f757049f2ef: mov    %r11,%rax
  0x00007f757049f2f2: mov    0x50(%rbx),%r11
  0x00007f757049f2f6: mov    0x10(%rax),%rsi
  0x00007f757049f2fa: mov    0x8(%rax),%rdx
  0x00007f757049f2fe: mov    %rbx,0x258(%r15)
  0x00007f757049f305: mov    %rbx,%rax
  0x00007f757049f308: jmpq   *%r11
  0x00007f757049f30b: mov    0x8(%rsi),%ebx
  0x00007f757049f30e: shl    $0x3,%rbx
  0x00007f757049f312: cmp    0x10(%rax),%rbx
  0x00007f757049f316: mov    0x8(%rax),%rbx
  0x00007f757049f31a: je     0x00007f757049f325
  0x00007f757049f320: jmpq   0x00007f757046ec40
  0x00007f757049f325: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f32d: je     0x00007f757049f428
  0x00007f757049f333: jmpq   0x00007f757046ec40
  0x00007f757049f338: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f340: je     0x00007f757049f428
  0x00007f757049f346: mov    %rsp,%r13
  0x00007f757049f349: mov    (%rsp),%rax
  0x00007f757049f34d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f351: pushfq 
  0x00007f757049f352: sub    $0x8,%rsp
  0x00007f757049f356: mov    %rsp,-0x28(%rsp)
  0x00007f757049f35b: sub    $0x80,%rsp
  0x00007f757049f362: mov    %rax,0x78(%rsp)
  0x00007f757049f367: mov    %rcx,0x70(%rsp)
  0x00007f757049f36c: mov    %rdx,0x68(%rsp)
  0x00007f757049f371: mov    %rbx,0x60(%rsp)
  0x00007f757049f376: mov    %rbp,0x50(%rsp)
  0x00007f757049f37b: mov    %rsi,0x48(%rsp)
  0x00007f757049f380: mov    %rdi,0x40(%rsp)
  0x00007f757049f385: mov    %r8,0x38(%rsp)
  0x00007f757049f38a: mov    %r9,0x30(%rsp)
  0x00007f757049f38f: mov    %r10,0x28(%rsp)
  0x00007f757049f394: mov    %r11,0x20(%rsp)
  0x00007f757049f399: mov    %r12,0x18(%rsp)
  0x00007f757049f39e: mov    %r13,0x10(%rsp)
  0x00007f757049f3a3: mov    %r14,0x8(%rsp)
  0x00007f757049f3a8: mov    %r15,(%rsp)
  0x00007f757049f3ac: sub    $0x200,%rsp
  0x00007f757049f3b3: fxsave64 (%rsp)
  0x00007f757049f3b8: mov    %rbx,%rdi
  0x00007f757049f3bb: mov    %rax,%rsi
  0x00007f757049f3be: callq  0x00007f7585522bca
  0x00007f757049f3c3: fxrstor64 (%rsp)
  0x00007f757049f3c8: add    $0x200,%rsp
  0x00007f757049f3cf: mov    (%rsp),%r15
  0x00007f757049f3d3: mov    0x8(%rsp),%r14
  0x00007f757049f3d8: mov    0x10(%rsp),%r13
  0x00007f757049f3dd: mov    0x18(%rsp),%r12
  0x00007f757049f3e2: mov    0x20(%rsp),%r11
  0x00007f757049f3e7: mov    0x28(%rsp),%r10
  0x00007f757049f3ec: mov    0x30(%rsp),%r9
  0x00007f757049f3f1: mov    0x38(%rsp),%r8
  0x00007f757049f3f6: mov    0x40(%rsp),%rdi
  0x00007f757049f3fb: mov    0x48(%rsp),%rsi
  0x00007f757049f400: mov    0x50(%rsp),%rbp
  0x00007f757049f405: mov    0x60(%rsp),%rbx
  0x00007f757049f40a: mov    0x68(%rsp),%rdx
  0x00007f757049f40f: mov    0x70(%rsp),%rcx
  0x00007f757049f414: mov    0x78(%rsp),%rax
  0x00007f757049f419: add    $0x80,%rsp
  0x00007f757049f420: add    $0x8,%rsp
  0x00007f757049f424: popfq  
  0x00007f757049f425: mov    %r13,%rsp
  0x00007f757049f428: pop    %rax
  0x00007f757049f429: mov    %rsp,%r13
  0x00007f757049f42c: sub    $0x20,%rsp
  0x00007f757049f430: mov    %rax,(%rsp)
  0x00007f757049f434: mov    %rsi,0x10(%rsp)
  0x00007f757049f439: mov    %rdx,0x8(%rsp)
  0x00007f757049f43e: mov    0x40(%rbx),%rcx
  0x00007f757049f442: jmpq   *%rcx

AHE@0x00007f75800d6540: 0xbb000000 i2c: 0x00007f757049f520 c2i: 0x00007f757049f638 c2iUV: 0x00007f757049f60b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f757049f638
  0x00007f757049f520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049f524: movabs $0x7f757036e3e0,%r11
  0x00007f757049f52e: cmp    %r11,%rax
  0x00007f757049f531: jbe    0x00007f757049f54a
  0x00007f757049f537: movabs $0x7f757046e3e0,%r11
  0x00007f757049f541: cmp    %r11,%rax
  0x00007f757049f544: jb     0x00007f757049f5e7
  0x00007f757049f54a: movabs $0x7f7570369420,%r11
  0x00007f757049f554: cmp    %r11,%rax
  0x00007f757049f557: jbe    0x00007f757049f570
  0x00007f757049f55d: movabs $0x7f757036de58,%r11
  0x00007f757049f567: cmp    %r11,%rax
  0x00007f757049f56a: jb     0x00007f757049f5e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049f570: mov    %rsp,-0x28(%rsp)
  0x00007f757049f575: sub    $0x80,%rsp
  0x00007f757049f57c: mov    %rax,0x78(%rsp)
  0x00007f757049f581: mov    %rcx,0x70(%rsp)
  0x00007f757049f586: mov    %rdx,0x68(%rsp)
  0x00007f757049f58b: mov    %rbx,0x60(%rsp)
  0x00007f757049f590: mov    %rbp,0x50(%rsp)
  0x00007f757049f595: mov    %rsi,0x48(%rsp)
  0x00007f757049f59a: mov    %rdi,0x40(%rsp)
  0x00007f757049f59f: mov    %r8,0x38(%rsp)
  0x00007f757049f5a4: mov    %r9,0x30(%rsp)
  0x00007f757049f5a9: mov    %r10,0x28(%rsp)
  0x00007f757049f5ae: mov    %r11,0x20(%rsp)
  0x00007f757049f5b3: mov    %r12,0x18(%rsp)
  0x00007f757049f5b8: mov    %r13,0x10(%rsp)
  0x00007f757049f5bd: mov    %r14,0x8(%rsp)
  0x00007f757049f5c2: mov    %r15,(%rsp)
  0x00007f757049f5c6: movabs $0x7f758592f470,%rdi
  0x00007f757049f5d0: movabs $0x7f757049f570,%rsi
  0x00007f757049f5da: mov    %rsp,%rdx
  0x00007f757049f5dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f5e1: callq  0x00007f75853729fa
  0x00007f757049f5e6: hlt    
  ;; } verify_i2ce 
  0x00007f757049f5e7: mov    %rsp,%r11
  0x00007f757049f5ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f5ee: push   %rax
  0x00007f757049f5ef: mov    %r11,%rax
  0x00007f757049f5f2: mov    0x50(%rbx),%r11
  0x00007f757049f5f6: mov    0x10(%rax),%rsi
  0x00007f757049f5fa: mov    0x8(%rax),%rdx
  0x00007f757049f5fe: mov    %rbx,0x258(%r15)
  0x00007f757049f605: mov    %rbx,%rax
  0x00007f757049f608: jmpq   *%r11
  0x00007f757049f60b: mov    0x8(%rsi),%ebx
  0x00007f757049f60e: shl    $0x3,%rbx
  0x00007f757049f612: cmp    0x10(%rax),%rbx
  0x00007f757049f616: mov    0x8(%rax),%rbx
  0x00007f757049f61a: je     0x00007f757049f625
  0x00007f757049f620: jmpq   0x00007f757046ec40
  0x00007f757049f625: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f62d: je     0x00007f757049f728
  0x00007f757049f633: jmpq   0x00007f757046ec40
  0x00007f757049f638: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f640: je     0x00007f757049f728
  0x00007f757049f646: mov    %rsp,%r13
  0x00007f757049f649: mov    (%rsp),%rax
  0x00007f757049f64d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f651: pushfq 
  0x00007f757049f652: sub    $0x8,%rsp
  0x00007f757049f656: mov    %rsp,-0x28(%rsp)
  0x00007f757049f65b: sub    $0x80,%rsp
  0x00007f757049f662: mov    %rax,0x78(%rsp)
  0x00007f757049f667: mov    %rcx,0x70(%rsp)
  0x00007f757049f66c: mov    %rdx,0x68(%rsp)
  0x00007f757049f671: mov    %rbx,0x60(%rsp)
  0x00007f757049f676: mov    %rbp,0x50(%rsp)
  0x00007f757049f67b: mov    %rsi,0x48(%rsp)
  0x00007f757049f680: mov    %rdi,0x40(%rsp)
  0x00007f757049f685: mov    %r8,0x38(%rsp)
  0x00007f757049f68a: mov    %r9,0x30(%rsp)
  0x00007f757049f68f: mov    %r10,0x28(%rsp)
  0x00007f757049f694: mov    %r11,0x20(%rsp)
  0x00007f757049f699: mov    %r12,0x18(%rsp)
  0x00007f757049f69e: mov    %r13,0x10(%rsp)
  0x00007f757049f6a3: mov    %r14,0x8(%rsp)
  0x00007f757049f6a8: mov    %r15,(%rsp)
  0x00007f757049f6ac: sub    $0x200,%rsp
  0x00007f757049f6b3: fxsave64 (%rsp)
  0x00007f757049f6b8: mov    %rbx,%rdi
  0x00007f757049f6bb: mov    %rax,%rsi
  0x00007f757049f6be: callq  0x00007f7585522bca
  0x00007f757049f6c3: fxrstor64 (%rsp)
  0x00007f757049f6c8: add    $0x200,%rsp
  0x00007f757049f6cf: mov    (%rsp),%r15
  0x00007f757049f6d3: mov    0x8(%rsp),%r14
  0x00007f757049f6d8: mov    0x10(%rsp),%r13
  0x00007f757049f6dd: mov    0x18(%rsp),%r12
  0x00007f757049f6e2: mov    0x20(%rsp),%r11
  0x00007f757049f6e7: mov    0x28(%rsp),%r10
  0x00007f757049f6ec: mov    0x30(%rsp),%r9
  0x00007f757049f6f1: mov    0x38(%rsp),%r8
  0x00007f757049f6f6: mov    0x40(%rsp),%rdi
  0x00007f757049f6fb: mov    0x48(%rsp),%rsi
  0x00007f757049f700: mov    0x50(%rsp),%rbp
  0x00007f757049f705: mov    0x60(%rsp),%rbx
  0x00007f757049f70a: mov    0x68(%rsp),%rdx
  0x00007f757049f70f: mov    0x70(%rsp),%rcx
  0x00007f757049f714: mov    0x78(%rsp),%rax
  0x00007f757049f719: add    $0x80,%rsp
  0x00007f757049f720: add    $0x8,%rsp
  0x00007f757049f724: popfq  
  0x00007f757049f725: mov    %r13,%rsp
  0x00007f757049f728: pop    %rax
  0x00007f757049f729: mov    %rsp,%r13
  0x00007f757049f72c: sub    $0x20,%rsp
  0x00007f757049f730: mov    %rax,(%rsp)
  0x00007f757049f734: mov    %rsi,0x10(%rsp)
  0x00007f757049f739: mov    %rdx,0x8(%rsp)
  0x00007f757049f73e: mov    0x40(%rbx),%rcx
  0x00007f757049f742: jmpq   *%rcx

AHE@0x00007f75800d6588: 0xbb000000 i2c: 0x00007f757049f820 c2i: 0x00007f757049f938 c2iUV: 0x00007f757049f90b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f757049f938
  0x00007f757049f820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049f824: movabs $0x7f757036e3e0,%r11
  0x00007f757049f82e: cmp    %r11,%rax
  0x00007f757049f831: jbe    0x00007f757049f84a
  0x00007f757049f837: movabs $0x7f757046e3e0,%r11
  0x00007f757049f841: cmp    %r11,%rax
  0x00007f757049f844: jb     0x00007f757049f8e7
  0x00007f757049f84a: movabs $0x7f7570369420,%r11
  0x00007f757049f854: cmp    %r11,%rax
  0x00007f757049f857: jbe    0x00007f757049f870
  0x00007f757049f85d: movabs $0x7f757036de58,%r11
  0x00007f757049f867: cmp    %r11,%rax
  0x00007f757049f86a: jb     0x00007f757049f8e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049f870: mov    %rsp,-0x28(%rsp)
  0x00007f757049f875: sub    $0x80,%rsp
  0x00007f757049f87c: mov    %rax,0x78(%rsp)
  0x00007f757049f881: mov    %rcx,0x70(%rsp)
  0x00007f757049f886: mov    %rdx,0x68(%rsp)
  0x00007f757049f88b: mov    %rbx,0x60(%rsp)
  0x00007f757049f890: mov    %rbp,0x50(%rsp)
  0x00007f757049f895: mov    %rsi,0x48(%rsp)
  0x00007f757049f89a: mov    %rdi,0x40(%rsp)
  0x00007f757049f89f: mov    %r8,0x38(%rsp)
  0x00007f757049f8a4: mov    %r9,0x30(%rsp)
  0x00007f757049f8a9: mov    %r10,0x28(%rsp)
  0x00007f757049f8ae: mov    %r11,0x20(%rsp)
  0x00007f757049f8b3: mov    %r12,0x18(%rsp)
  0x00007f757049f8b8: mov    %r13,0x10(%rsp)
  0x00007f757049f8bd: mov    %r14,0x8(%rsp)
  0x00007f757049f8c2: mov    %r15,(%rsp)
  0x00007f757049f8c6: movabs $0x7f758592f470,%rdi
  0x00007f757049f8d0: movabs $0x7f757049f870,%rsi
  0x00007f757049f8da: mov    %rsp,%rdx
  0x00007f757049f8dd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f8e1: callq  0x00007f75853729fa
  0x00007f757049f8e6: hlt    
  ;; } verify_i2ce 
  0x00007f757049f8e7: mov    %rsp,%r11
  0x00007f757049f8ea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f8ee: push   %rax
  0x00007f757049f8ef: mov    %r11,%rax
  0x00007f757049f8f2: mov    0x50(%rbx),%r11
  0x00007f757049f8f6: mov    0x10(%rax),%rsi
  0x00007f757049f8fa: mov    0x8(%rax),%rdx
  0x00007f757049f8fe: mov    %rbx,0x258(%r15)
  0x00007f757049f905: mov    %rbx,%rax
  0x00007f757049f908: jmpq   *%r11
  0x00007f757049f90b: mov    0x8(%rsi),%ebx
  0x00007f757049f90e: shl    $0x3,%rbx
  0x00007f757049f912: cmp    0x10(%rax),%rbx
  0x00007f757049f916: mov    0x8(%rax),%rbx
  0x00007f757049f91a: je     0x00007f757049f925
  0x00007f757049f920: jmpq   0x00007f757046ec40
  0x00007f757049f925: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f92d: je     0x00007f757049fa28
  0x00007f757049f933: jmpq   0x00007f757046ec40
  0x00007f757049f938: cmpq   $0x0,0x58(%rbx)
  0x00007f757049f940: je     0x00007f757049fa28
  0x00007f757049f946: mov    %rsp,%r13
  0x00007f757049f949: mov    (%rsp),%rax
  0x00007f757049f94d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049f951: pushfq 
  0x00007f757049f952: sub    $0x8,%rsp
  0x00007f757049f956: mov    %rsp,-0x28(%rsp)
  0x00007f757049f95b: sub    $0x80,%rsp
  0x00007f757049f962: mov    %rax,0x78(%rsp)
  0x00007f757049f967: mov    %rcx,0x70(%rsp)
  0x00007f757049f96c: mov    %rdx,0x68(%rsp)
  0x00007f757049f971: mov    %rbx,0x60(%rsp)
  0x00007f757049f976: mov    %rbp,0x50(%rsp)
  0x00007f757049f97b: mov    %rsi,0x48(%rsp)
  0x00007f757049f980: mov    %rdi,0x40(%rsp)
  0x00007f757049f985: mov    %r8,0x38(%rsp)
  0x00007f757049f98a: mov    %r9,0x30(%rsp)
  0x00007f757049f98f: mov    %r10,0x28(%rsp)
  0x00007f757049f994: mov    %r11,0x20(%rsp)
  0x00007f757049f999: mov    %r12,0x18(%rsp)
  0x00007f757049f99e: mov    %r13,0x10(%rsp)
  0x00007f757049f9a3: mov    %r14,0x8(%rsp)
  0x00007f757049f9a8: mov    %r15,(%rsp)
  0x00007f757049f9ac: sub    $0x200,%rsp
  0x00007f757049f9b3: fxsave64 (%rsp)
  0x00007f757049f9b8: mov    %rbx,%rdi
  0x00007f757049f9bb: mov    %rax,%rsi
  0x00007f757049f9be: callq  0x00007f7585522bca
  0x00007f757049f9c3: fxrstor64 (%rsp)
  0x00007f757049f9c8: add    $0x200,%rsp
  0x00007f757049f9cf: mov    (%rsp),%r15
  0x00007f757049f9d3: mov    0x8(%rsp),%r14
  0x00007f757049f9d8: mov    0x10(%rsp),%r13
  0x00007f757049f9dd: mov    0x18(%rsp),%r12
  0x00007f757049f9e2: mov    0x20(%rsp),%r11
  0x00007f757049f9e7: mov    0x28(%rsp),%r10
  0x00007f757049f9ec: mov    0x30(%rsp),%r9
  0x00007f757049f9f1: mov    0x38(%rsp),%r8
  0x00007f757049f9f6: mov    0x40(%rsp),%rdi
  0x00007f757049f9fb: mov    0x48(%rsp),%rsi
  0x00007f757049fa00: mov    0x50(%rsp),%rbp
  0x00007f757049fa05: mov    0x60(%rsp),%rbx
  0x00007f757049fa0a: mov    0x68(%rsp),%rdx
  0x00007f757049fa0f: mov    0x70(%rsp),%rcx
  0x00007f757049fa14: mov    0x78(%rsp),%rax
  0x00007f757049fa19: add    $0x80,%rsp
  0x00007f757049fa20: add    $0x8,%rsp
  0x00007f757049fa24: popfq  
  0x00007f757049fa25: mov    %r13,%rsp
  0x00007f757049fa28: pop    %rax
  0x00007f757049fa29: mov    %rsp,%r13
  0x00007f757049fa2c: sub    $0x20,%rsp
  0x00007f757049fa30: mov    %rax,(%rsp)
  0x00007f757049fa34: mov    %rsi,0x10(%rsp)
  0x00007f757049fa39: mov    %rdx,0x8(%rsp)
  0x00007f757049fa3e: mov    0x40(%rbx),%rcx
  0x00007f757049fa42: jmpq   *%rcx

AHE@0x00007f75800d65d0: 0xbb000000 i2c: 0x00007f757049fb20 c2i: 0x00007f757049fc38 c2iUV: 0x00007f757049fc0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f757049fc38
  0x00007f757049fb20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049fb24: movabs $0x7f757036e3e0,%r11
  0x00007f757049fb2e: cmp    %r11,%rax
  0x00007f757049fb31: jbe    0x00007f757049fb4a
  0x00007f757049fb37: movabs $0x7f757046e3e0,%r11
  0x00007f757049fb41: cmp    %r11,%rax
  0x00007f757049fb44: jb     0x00007f757049fbe7
  0x00007f757049fb4a: movabs $0x7f7570369420,%r11
  0x00007f757049fb54: cmp    %r11,%rax
  0x00007f757049fb57: jbe    0x00007f757049fb70
  0x00007f757049fb5d: movabs $0x7f757036de58,%r11
  0x00007f757049fb67: cmp    %r11,%rax
  0x00007f757049fb6a: jb     0x00007f757049fbe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049fb70: mov    %rsp,-0x28(%rsp)
  0x00007f757049fb75: sub    $0x80,%rsp
  0x00007f757049fb7c: mov    %rax,0x78(%rsp)
  0x00007f757049fb81: mov    %rcx,0x70(%rsp)
  0x00007f757049fb86: mov    %rdx,0x68(%rsp)
  0x00007f757049fb8b: mov    %rbx,0x60(%rsp)
  0x00007f757049fb90: mov    %rbp,0x50(%rsp)
  0x00007f757049fb95: mov    %rsi,0x48(%rsp)
  0x00007f757049fb9a: mov    %rdi,0x40(%rsp)
  0x00007f757049fb9f: mov    %r8,0x38(%rsp)
  0x00007f757049fba4: mov    %r9,0x30(%rsp)
  0x00007f757049fba9: mov    %r10,0x28(%rsp)
  0x00007f757049fbae: mov    %r11,0x20(%rsp)
  0x00007f757049fbb3: mov    %r12,0x18(%rsp)
  0x00007f757049fbb8: mov    %r13,0x10(%rsp)
  0x00007f757049fbbd: mov    %r14,0x8(%rsp)
  0x00007f757049fbc2: mov    %r15,(%rsp)
  0x00007f757049fbc6: movabs $0x7f758592f470,%rdi
  0x00007f757049fbd0: movabs $0x7f757049fb70,%rsi
  0x00007f757049fbda: mov    %rsp,%rdx
  0x00007f757049fbdd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049fbe1: callq  0x00007f75853729fa
  0x00007f757049fbe6: hlt    
  ;; } verify_i2ce 
  0x00007f757049fbe7: mov    %rsp,%r11
  0x00007f757049fbea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049fbee: push   %rax
  0x00007f757049fbef: mov    %r11,%rax
  0x00007f757049fbf2: mov    0x50(%rbx),%r11
  0x00007f757049fbf6: mov    0x10(%rax),%rsi
  0x00007f757049fbfa: mov    0x8(%rax),%rdx
  0x00007f757049fbfe: mov    %rbx,0x258(%r15)
  0x00007f757049fc05: mov    %rbx,%rax
  0x00007f757049fc08: jmpq   *%r11
  0x00007f757049fc0b: mov    0x8(%rsi),%ebx
  0x00007f757049fc0e: shl    $0x3,%rbx
  0x00007f757049fc12: cmp    0x10(%rax),%rbx
  0x00007f757049fc16: mov    0x8(%rax),%rbx
  0x00007f757049fc1a: je     0x00007f757049fc25
  0x00007f757049fc20: jmpq   0x00007f757046ec40
  0x00007f757049fc25: cmpq   $0x0,0x58(%rbx)
  0x00007f757049fc2d: je     0x00007f757049fd28
  0x00007f757049fc33: jmpq   0x00007f757046ec40
  0x00007f757049fc38: cmpq   $0x0,0x58(%rbx)
  0x00007f757049fc40: je     0x00007f757049fd28
  0x00007f757049fc46: mov    %rsp,%r13
  0x00007f757049fc49: mov    (%rsp),%rax
  0x00007f757049fc4d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049fc51: pushfq 
  0x00007f757049fc52: sub    $0x8,%rsp
  0x00007f757049fc56: mov    %rsp,-0x28(%rsp)
  0x00007f757049fc5b: sub    $0x80,%rsp
  0x00007f757049fc62: mov    %rax,0x78(%rsp)
  0x00007f757049fc67: mov    %rcx,0x70(%rsp)
  0x00007f757049fc6c: mov    %rdx,0x68(%rsp)
  0x00007f757049fc71: mov    %rbx,0x60(%rsp)
  0x00007f757049fc76: mov    %rbp,0x50(%rsp)
  0x00007f757049fc7b: mov    %rsi,0x48(%rsp)
  0x00007f757049fc80: mov    %rdi,0x40(%rsp)
  0x00007f757049fc85: mov    %r8,0x38(%rsp)
  0x00007f757049fc8a: mov    %r9,0x30(%rsp)
  0x00007f757049fc8f: mov    %r10,0x28(%rsp)
  0x00007f757049fc94: mov    %r11,0x20(%rsp)
  0x00007f757049fc99: mov    %r12,0x18(%rsp)
  0x00007f757049fc9e: mov    %r13,0x10(%rsp)
  0x00007f757049fca3: mov    %r14,0x8(%rsp)
  0x00007f757049fca8: mov    %r15,(%rsp)
  0x00007f757049fcac: sub    $0x200,%rsp
  0x00007f757049fcb3: fxsave64 (%rsp)
  0x00007f757049fcb8: mov    %rbx,%rdi
  0x00007f757049fcbb: mov    %rax,%rsi
  0x00007f757049fcbe: callq  0x00007f7585522bca
  0x00007f757049fcc3: fxrstor64 (%rsp)
  0x00007f757049fcc8: add    $0x200,%rsp
  0x00007f757049fccf: mov    (%rsp),%r15
  0x00007f757049fcd3: mov    0x8(%rsp),%r14
  0x00007f757049fcd8: mov    0x10(%rsp),%r13
  0x00007f757049fcdd: mov    0x18(%rsp),%r12
  0x00007f757049fce2: mov    0x20(%rsp),%r11
  0x00007f757049fce7: mov    0x28(%rsp),%r10
  0x00007f757049fcec: mov    0x30(%rsp),%r9
  0x00007f757049fcf1: mov    0x38(%rsp),%r8
  0x00007f757049fcf6: mov    0x40(%rsp),%rdi
  0x00007f757049fcfb: mov    0x48(%rsp),%rsi
  0x00007f757049fd00: mov    0x50(%rsp),%rbp
  0x00007f757049fd05: mov    0x60(%rsp),%rbx
  0x00007f757049fd0a: mov    0x68(%rsp),%rdx
  0x00007f757049fd0f: mov    0x70(%rsp),%rcx
  0x00007f757049fd14: mov    0x78(%rsp),%rax
  0x00007f757049fd19: add    $0x80,%rsp
  0x00007f757049fd20: add    $0x8,%rsp
  0x00007f757049fd24: popfq  
  0x00007f757049fd25: mov    %r13,%rsp
  0x00007f757049fd28: pop    %rax
  0x00007f757049fd29: mov    %rsp,%r13
  0x00007f757049fd2c: sub    $0x20,%rsp
  0x00007f757049fd30: mov    %rax,(%rsp)
  0x00007f757049fd34: mov    %rsi,0x10(%rsp)
  0x00007f757049fd39: mov    %rdx,0x8(%rsp)
  0x00007f757049fd3e: mov    0x40(%rbx),%rcx
  0x00007f757049fd42: jmpq   *%rcx

AHE@0x00007f75800e8820: 0xbb000000 i2c: 0x00007f757049fe20 c2i: 0x00007f757049ff38 c2iUV: 0x00007f757049ff0b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f757049ff38
  0x00007f757049fe20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757049fe24: movabs $0x7f757036e3e0,%r11
  0x00007f757049fe2e: cmp    %r11,%rax
  0x00007f757049fe31: jbe    0x00007f757049fe4a
  0x00007f757049fe37: movabs $0x7f757046e3e0,%r11
  0x00007f757049fe41: cmp    %r11,%rax
  0x00007f757049fe44: jb     0x00007f757049fee7
  0x00007f757049fe4a: movabs $0x7f7570369420,%r11
  0x00007f757049fe54: cmp    %r11,%rax
  0x00007f757049fe57: jbe    0x00007f757049fe70
  0x00007f757049fe5d: movabs $0x7f757036de58,%r11
  0x00007f757049fe67: cmp    %r11,%rax
  0x00007f757049fe6a: jb     0x00007f757049fee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f757049fe70: mov    %rsp,-0x28(%rsp)
  0x00007f757049fe75: sub    $0x80,%rsp
  0x00007f757049fe7c: mov    %rax,0x78(%rsp)
  0x00007f757049fe81: mov    %rcx,0x70(%rsp)
  0x00007f757049fe86: mov    %rdx,0x68(%rsp)
  0x00007f757049fe8b: mov    %rbx,0x60(%rsp)
  0x00007f757049fe90: mov    %rbp,0x50(%rsp)
  0x00007f757049fe95: mov    %rsi,0x48(%rsp)
  0x00007f757049fe9a: mov    %rdi,0x40(%rsp)
  0x00007f757049fe9f: mov    %r8,0x38(%rsp)
  0x00007f757049fea4: mov    %r9,0x30(%rsp)
  0x00007f757049fea9: mov    %r10,0x28(%rsp)
  0x00007f757049feae: mov    %r11,0x20(%rsp)
  0x00007f757049feb3: mov    %r12,0x18(%rsp)
  0x00007f757049feb8: mov    %r13,0x10(%rsp)
  0x00007f757049febd: mov    %r14,0x8(%rsp)
  0x00007f757049fec2: mov    %r15,(%rsp)
  0x00007f757049fec6: movabs $0x7f758592f470,%rdi
  0x00007f757049fed0: movabs $0x7f757049fe70,%rsi
  0x00007f757049feda: mov    %rsp,%rdx
  0x00007f757049fedd: and    $0xfffffffffffffff0,%rsp
  0x00007f757049fee1: callq  0x00007f75853729fa
  0x00007f757049fee6: hlt    
  ;; } verify_i2ce 
  0x00007f757049fee7: mov    %rsp,%r11
  0x00007f757049feea: and    $0xfffffffffffffff0,%rsp
  0x00007f757049feee: push   %rax
  0x00007f757049feef: mov    %r11,%rax
  0x00007f757049fef2: mov    0x50(%rbx),%r11
  0x00007f757049fef6: mov    0x10(%rax),%rsi
  0x00007f757049fefa: mov    0x8(%rax),%rdx
  0x00007f757049fefe: mov    %rbx,0x258(%r15)
  0x00007f757049ff05: mov    %rbx,%rax
  0x00007f757049ff08: jmpq   *%r11
  0x00007f757049ff0b: mov    0x8(%rsi),%ebx
  0x00007f757049ff0e: shl    $0x3,%rbx
  0x00007f757049ff12: cmp    0x10(%rax),%rbx
  0x00007f757049ff16: mov    0x8(%rax),%rbx
  0x00007f757049ff1a: je     0x00007f757049ff25
  0x00007f757049ff20: jmpq   0x00007f757046ec40
  0x00007f757049ff25: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ff2d: je     0x00007f75704a0028
  0x00007f757049ff33: jmpq   0x00007f757046ec40
  0x00007f757049ff38: cmpq   $0x0,0x58(%rbx)
  0x00007f757049ff40: je     0x00007f75704a0028
  0x00007f757049ff46: mov    %rsp,%r13
  0x00007f757049ff49: mov    (%rsp),%rax
  0x00007f757049ff4d: and    $0xfffffffffffffff0,%rsp
  0x00007f757049ff51: pushfq 
  0x00007f757049ff52: sub    $0x8,%rsp
  0x00007f757049ff56: mov    %rsp,-0x28(%rsp)
  0x00007f757049ff5b: sub    $0x80,%rsp
  0x00007f757049ff62: mov    %rax,0x78(%rsp)
  0x00007f757049ff67: mov    %rcx,0x70(%rsp)
  0x00007f757049ff6c: mov    %rdx,0x68(%rsp)
  0x00007f757049ff71: mov    %rbx,0x60(%rsp)
  0x00007f757049ff76: mov    %rbp,0x50(%rsp)
  0x00007f757049ff7b: mov    %rsi,0x48(%rsp)
  0x00007f757049ff80: mov    %rdi,0x40(%rsp)
  0x00007f757049ff85: mov    %r8,0x38(%rsp)
  0x00007f757049ff8a: mov    %r9,0x30(%rsp)
  0x00007f757049ff8f: mov    %r10,0x28(%rsp)
  0x00007f757049ff94: mov    %r11,0x20(%rsp)
  0x00007f757049ff99: mov    %r12,0x18(%rsp)
  0x00007f757049ff9e: mov    %r13,0x10(%rsp)
  0x00007f757049ffa3: mov    %r14,0x8(%rsp)
  0x00007f757049ffa8: mov    %r15,(%rsp)
  0x00007f757049ffac: sub    $0x200,%rsp
  0x00007f757049ffb3: fxsave64 (%rsp)
  0x00007f757049ffb8: mov    %rbx,%rdi
  0x00007f757049ffbb: mov    %rax,%rsi
  0x00007f757049ffbe: callq  0x00007f7585522bca
  0x00007f757049ffc3: fxrstor64 (%rsp)
  0x00007f757049ffc8: add    $0x200,%rsp
  0x00007f757049ffcf: mov    (%rsp),%r15
  0x00007f757049ffd3: mov    0x8(%rsp),%r14
  0x00007f757049ffd8: mov    0x10(%rsp),%r13
  0x00007f757049ffdd: mov    0x18(%rsp),%r12
  0x00007f757049ffe2: mov    0x20(%rsp),%r11
  0x00007f757049ffe7: mov    0x28(%rsp),%r10
  0x00007f757049ffec: mov    0x30(%rsp),%r9
  0x00007f757049fff1: mov    0x38(%rsp),%r8
  0x00007f757049fff6: mov    0x40(%rsp),%rdi
  0x00007f757049fffb: mov    0x48(%rsp),%rsi
  0x00007f75704a0000: mov    0x50(%rsp),%rbp
  0x00007f75704a0005: mov    0x60(%rsp),%rbx
  0x00007f75704a000a: mov    0x68(%rsp),%rdx
  0x00007f75704a000f: mov    0x70(%rsp),%rcx
  0x00007f75704a0014: mov    0x78(%rsp),%rax
  0x00007f75704a0019: add    $0x80,%rsp
  0x00007f75704a0020: add    $0x8,%rsp
  0x00007f75704a0024: popfq  
  0x00007f75704a0025: mov    %r13,%rsp
  0x00007f75704a0028: pop    %rax
  0x00007f75704a0029: mov    %rsp,%r13
  0x00007f75704a002c: sub    $0x20,%rsp
  0x00007f75704a0030: mov    %rax,(%rsp)
  0x00007f75704a0034: mov    %rsi,0x10(%rsp)
  0x00007f75704a0039: mov    %rdx,0x8(%rsp)
  0x00007f75704a003e: mov    0x40(%rbx),%rcx
  0x00007f75704a0042: jmpq   *%rcx

AHE@0x00007f75800e8868: 0xbb000000 i2c: 0x00007f75704a0120 c2i: 0x00007f75704a0238 c2iUV: 0x00007f75704a020b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704a0238
  0x00007f75704a0120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a0124: movabs $0x7f757036e3e0,%r11
  0x00007f75704a012e: cmp    %r11,%rax
  0x00007f75704a0131: jbe    0x00007f75704a014a
  0x00007f75704a0137: movabs $0x7f757046e3e0,%r11
  0x00007f75704a0141: cmp    %r11,%rax
  0x00007f75704a0144: jb     0x00007f75704a01e7
  0x00007f75704a014a: movabs $0x7f7570369420,%r11
  0x00007f75704a0154: cmp    %r11,%rax
  0x00007f75704a0157: jbe    0x00007f75704a0170
  0x00007f75704a015d: movabs $0x7f757036de58,%r11
  0x00007f75704a0167: cmp    %r11,%rax
  0x00007f75704a016a: jb     0x00007f75704a01e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a0170: mov    %rsp,-0x28(%rsp)
  0x00007f75704a0175: sub    $0x80,%rsp
  0x00007f75704a017c: mov    %rax,0x78(%rsp)
  0x00007f75704a0181: mov    %rcx,0x70(%rsp)
  0x00007f75704a0186: mov    %rdx,0x68(%rsp)
  0x00007f75704a018b: mov    %rbx,0x60(%rsp)
  0x00007f75704a0190: mov    %rbp,0x50(%rsp)
  0x00007f75704a0195: mov    %rsi,0x48(%rsp)
  0x00007f75704a019a: mov    %rdi,0x40(%rsp)
  0x00007f75704a019f: mov    %r8,0x38(%rsp)
  0x00007f75704a01a4: mov    %r9,0x30(%rsp)
  0x00007f75704a01a9: mov    %r10,0x28(%rsp)
  0x00007f75704a01ae: mov    %r11,0x20(%rsp)
  0x00007f75704a01b3: mov    %r12,0x18(%rsp)
  0x00007f75704a01b8: mov    %r13,0x10(%rsp)
  0x00007f75704a01bd: mov    %r14,0x8(%rsp)
  0x00007f75704a01c2: mov    %r15,(%rsp)
  0x00007f75704a01c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a01d0: movabs $0x7f75704a0170,%rsi
  0x00007f75704a01da: mov    %rsp,%rdx
  0x00007f75704a01dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a01e1: callq  0x00007f75853729fa
  0x00007f75704a01e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a01e7: mov    %rsp,%r11
  0x00007f75704a01ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a01ee: push   %rax
  0x00007f75704a01ef: mov    %r11,%rax
  0x00007f75704a01f2: mov    0x50(%rbx),%r11
  0x00007f75704a01f6: mov    0x10(%rax),%rsi
  0x00007f75704a01fa: mov    0x8(%rax),%rdx
  0x00007f75704a01fe: mov    %rbx,0x258(%r15)
  0x00007f75704a0205: mov    %rbx,%rax
  0x00007f75704a0208: jmpq   *%r11
  0x00007f75704a020b: mov    0x8(%rsi),%ebx
  0x00007f75704a020e: shl    $0x3,%rbx
  0x00007f75704a0212: cmp    0x10(%rax),%rbx
  0x00007f75704a0216: mov    0x8(%rax),%rbx
  0x00007f75704a021a: je     0x00007f75704a0225
  0x00007f75704a0220: jmpq   0x00007f757046ec40
  0x00007f75704a0225: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a022d: je     0x00007f75704a0328
  0x00007f75704a0233: jmpq   0x00007f757046ec40
  0x00007f75704a0238: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0240: je     0x00007f75704a0328
  0x00007f75704a0246: mov    %rsp,%r13
  0x00007f75704a0249: mov    (%rsp),%rax
  0x00007f75704a024d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0251: pushfq 
  0x00007f75704a0252: sub    $0x8,%rsp
  0x00007f75704a0256: mov    %rsp,-0x28(%rsp)
  0x00007f75704a025b: sub    $0x80,%rsp
  0x00007f75704a0262: mov    %rax,0x78(%rsp)
  0x00007f75704a0267: mov    %rcx,0x70(%rsp)
  0x00007f75704a026c: mov    %rdx,0x68(%rsp)
  0x00007f75704a0271: mov    %rbx,0x60(%rsp)
  0x00007f75704a0276: mov    %rbp,0x50(%rsp)
  0x00007f75704a027b: mov    %rsi,0x48(%rsp)
  0x00007f75704a0280: mov    %rdi,0x40(%rsp)
  0x00007f75704a0285: mov    %r8,0x38(%rsp)
  0x00007f75704a028a: mov    %r9,0x30(%rsp)
  0x00007f75704a028f: mov    %r10,0x28(%rsp)
  0x00007f75704a0294: mov    %r11,0x20(%rsp)
  0x00007f75704a0299: mov    %r12,0x18(%rsp)
  0x00007f75704a029e: mov    %r13,0x10(%rsp)
  0x00007f75704a02a3: mov    %r14,0x8(%rsp)
  0x00007f75704a02a8: mov    %r15,(%rsp)
  0x00007f75704a02ac: sub    $0x200,%rsp
  0x00007f75704a02b3: fxsave64 (%rsp)
  0x00007f75704a02b8: mov    %rbx,%rdi
  0x00007f75704a02bb: mov    %rax,%rsi
  0x00007f75704a02be: callq  0x00007f7585522bca
  0x00007f75704a02c3: fxrstor64 (%rsp)
  0x00007f75704a02c8: add    $0x200,%rsp
  0x00007f75704a02cf: mov    (%rsp),%r15
  0x00007f75704a02d3: mov    0x8(%rsp),%r14
  0x00007f75704a02d8: mov    0x10(%rsp),%r13
  0x00007f75704a02dd: mov    0x18(%rsp),%r12
  0x00007f75704a02e2: mov    0x20(%rsp),%r11
  0x00007f75704a02e7: mov    0x28(%rsp),%r10
  0x00007f75704a02ec: mov    0x30(%rsp),%r9
  0x00007f75704a02f1: mov    0x38(%rsp),%r8
  0x00007f75704a02f6: mov    0x40(%rsp),%rdi
  0x00007f75704a02fb: mov    0x48(%rsp),%rsi
  0x00007f75704a0300: mov    0x50(%rsp),%rbp
  0x00007f75704a0305: mov    0x60(%rsp),%rbx
  0x00007f75704a030a: mov    0x68(%rsp),%rdx
  0x00007f75704a030f: mov    0x70(%rsp),%rcx
  0x00007f75704a0314: mov    0x78(%rsp),%rax
  0x00007f75704a0319: add    $0x80,%rsp
  0x00007f75704a0320: add    $0x8,%rsp
  0x00007f75704a0324: popfq  
  0x00007f75704a0325: mov    %r13,%rsp
  0x00007f75704a0328: pop    %rax
  0x00007f75704a0329: mov    %rsp,%r13
  0x00007f75704a032c: sub    $0x20,%rsp
  0x00007f75704a0330: mov    %rax,(%rsp)
  0x00007f75704a0334: mov    %rsi,0x10(%rsp)
  0x00007f75704a0339: mov    %rdx,0x8(%rsp)
  0x00007f75704a033e: mov    0x40(%rbx),%rcx
  0x00007f75704a0342: jmpq   *%rcx

AHE@0x00007f75800e88b0: 0xbbb00000 i2c: 0x00007f75704a0420 c2i: 0x00007f75704a053c c2iUV: 0x00007f75704a050f
i2c argument handler #0 for: receiver ([Ljava/security/cert/Certificate;[Ljava/security/cert/Certificate;)Z (557 bytes generated)
c2i argument handler starts at 0x7f75704a053c
  0x00007f75704a0420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a0424: movabs $0x7f757036e3e0,%r11
  0x00007f75704a042e: cmp    %r11,%rax
  0x00007f75704a0431: jbe    0x00007f75704a044a
  0x00007f75704a0437: movabs $0x7f757046e3e0,%r11
  0x00007f75704a0441: cmp    %r11,%rax
  0x00007f75704a0444: jb     0x00007f75704a04e7
  0x00007f75704a044a: movabs $0x7f7570369420,%r11
  0x00007f75704a0454: cmp    %r11,%rax
  0x00007f75704a0457: jbe    0x00007f75704a0470
  0x00007f75704a045d: movabs $0x7f757036de58,%r11
  0x00007f75704a0467: cmp    %r11,%rax
  0x00007f75704a046a: jb     0x00007f75704a04e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a0470: mov    %rsp,-0x28(%rsp)
  0x00007f75704a0475: sub    $0x80,%rsp
  0x00007f75704a047c: mov    %rax,0x78(%rsp)
  0x00007f75704a0481: mov    %rcx,0x70(%rsp)
  0x00007f75704a0486: mov    %rdx,0x68(%rsp)
  0x00007f75704a048b: mov    %rbx,0x60(%rsp)
  0x00007f75704a0490: mov    %rbp,0x50(%rsp)
  0x00007f75704a0495: mov    %rsi,0x48(%rsp)
  0x00007f75704a049a: mov    %rdi,0x40(%rsp)
  0x00007f75704a049f: mov    %r8,0x38(%rsp)
  0x00007f75704a04a4: mov    %r9,0x30(%rsp)
  0x00007f75704a04a9: mov    %r10,0x28(%rsp)
  0x00007f75704a04ae: mov    %r11,0x20(%rsp)
  0x00007f75704a04b3: mov    %r12,0x18(%rsp)
  0x00007f75704a04b8: mov    %r13,0x10(%rsp)
  0x00007f75704a04bd: mov    %r14,0x8(%rsp)
  0x00007f75704a04c2: mov    %r15,(%rsp)
  0x00007f75704a04c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a04d0: movabs $0x7f75704a0470,%rsi
  0x00007f75704a04da: mov    %rsp,%rdx
  0x00007f75704a04dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a04e1: callq  0x00007f75853729fa
  0x00007f75704a04e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a04e7: mov    %rsp,%r11
  0x00007f75704a04ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a04ee: push   %rax
  0x00007f75704a04ef: mov    %r11,%rax
  0x00007f75704a04f2: mov    0x50(%rbx),%r11
  0x00007f75704a04f6: mov    0x18(%rax),%rsi
  0x00007f75704a04fa: mov    0x10(%rax),%rdx
  0x00007f75704a04fe: mov    0x8(%rax),%rcx
  0x00007f75704a0502: mov    %rbx,0x258(%r15)
  0x00007f75704a0509: mov    %rbx,%rax
  0x00007f75704a050c: jmpq   *%r11
  0x00007f75704a050f: mov    0x8(%rsi),%ebx
  0x00007f75704a0512: shl    $0x3,%rbx
  0x00007f75704a0516: cmp    0x10(%rax),%rbx
  0x00007f75704a051a: mov    0x8(%rax),%rbx
  0x00007f75704a051e: je     0x00007f75704a0529
  0x00007f75704a0524: jmpq   0x00007f757046ec40
  0x00007f75704a0529: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0531: je     0x00007f75704a062c
  0x00007f75704a0537: jmpq   0x00007f757046ec40
  0x00007f75704a053c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0544: je     0x00007f75704a062c
  0x00007f75704a054a: mov    %rsp,%r13
  0x00007f75704a054d: mov    (%rsp),%rax
  0x00007f75704a0551: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0555: pushfq 
  0x00007f75704a0556: sub    $0x8,%rsp
  0x00007f75704a055a: mov    %rsp,-0x28(%rsp)
  0x00007f75704a055f: sub    $0x80,%rsp
  0x00007f75704a0566: mov    %rax,0x78(%rsp)
  0x00007f75704a056b: mov    %rcx,0x70(%rsp)
  0x00007f75704a0570: mov    %rdx,0x68(%rsp)
  0x00007f75704a0575: mov    %rbx,0x60(%rsp)
  0x00007f75704a057a: mov    %rbp,0x50(%rsp)
  0x00007f75704a057f: mov    %rsi,0x48(%rsp)
  0x00007f75704a0584: mov    %rdi,0x40(%rsp)
  0x00007f75704a0589: mov    %r8,0x38(%rsp)
  0x00007f75704a058e: mov    %r9,0x30(%rsp)
  0x00007f75704a0593: mov    %r10,0x28(%rsp)
  0x00007f75704a0598: mov    %r11,0x20(%rsp)
  0x00007f75704a059d: mov    %r12,0x18(%rsp)
  0x00007f75704a05a2: mov    %r13,0x10(%rsp)
  0x00007f75704a05a7: mov    %r14,0x8(%rsp)
  0x00007f75704a05ac: mov    %r15,(%rsp)
  0x00007f75704a05b0: sub    $0x200,%rsp
  0x00007f75704a05b7: fxsave64 (%rsp)
  0x00007f75704a05bc: mov    %rbx,%rdi
  0x00007f75704a05bf: mov    %rax,%rsi
  0x00007f75704a05c2: callq  0x00007f7585522bca
  0x00007f75704a05c7: fxrstor64 (%rsp)
  0x00007f75704a05cc: add    $0x200,%rsp
  0x00007f75704a05d3: mov    (%rsp),%r15
  0x00007f75704a05d7: mov    0x8(%rsp),%r14
  0x00007f75704a05dc: mov    0x10(%rsp),%r13
  0x00007f75704a05e1: mov    0x18(%rsp),%r12
  0x00007f75704a05e6: mov    0x20(%rsp),%r11
  0x00007f75704a05eb: mov    0x28(%rsp),%r10
  0x00007f75704a05f0: mov    0x30(%rsp),%r9
  0x00007f75704a05f5: mov    0x38(%rsp),%r8
  0x00007f75704a05fa: mov    0x40(%rsp),%rdi
  0x00007f75704a05ff: mov    0x48(%rsp),%rsi
  0x00007f75704a0604: mov    0x50(%rsp),%rbp
  0x00007f75704a0609: mov    0x60(%rsp),%rbx
  0x00007f75704a060e: mov    0x68(%rsp),%rdx
  0x00007f75704a0613: mov    0x70(%rsp),%rcx
  0x00007f75704a0618: mov    0x78(%rsp),%rax
  0x00007f75704a061d: add    $0x80,%rsp
  0x00007f75704a0624: add    $0x8,%rsp
  0x00007f75704a0628: popfq  
  0x00007f75704a0629: mov    %r13,%rsp
  0x00007f75704a062c: pop    %rax
  0x00007f75704a062d: mov    %rsp,%r13
  0x00007f75704a0630: sub    $0x20,%rsp
  0x00007f75704a0634: mov    %rax,(%rsp)
  0x00007f75704a0638: mov    %rsi,0x18(%rsp)
  0x00007f75704a063d: mov    %rdx,0x10(%rsp)
  0x00007f75704a0642: mov    %rcx,0x8(%rsp)
  0x00007f75704a0647: mov    0x40(%rbx),%rcx
  0x00007f75704a064b: jmpq   *%rcx

AHE@0x00007f75800e88f8: 0xbbb00000 i2c: 0x00007f75704a0720 c2i: 0x00007f75704a083c c2iUV: 0x00007f75704a080f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/security/CodeSource;)V (557 bytes generated)
c2i argument handler starts at 0x7f75704a083c
  0x00007f75704a0720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a0724: movabs $0x7f757036e3e0,%r11
  0x00007f75704a072e: cmp    %r11,%rax
  0x00007f75704a0731: jbe    0x00007f75704a074a
  0x00007f75704a0737: movabs $0x7f757046e3e0,%r11
  0x00007f75704a0741: cmp    %r11,%rax
  0x00007f75704a0744: jb     0x00007f75704a07e7
  0x00007f75704a074a: movabs $0x7f7570369420,%r11
  0x00007f75704a0754: cmp    %r11,%rax
  0x00007f75704a0757: jbe    0x00007f75704a0770
  0x00007f75704a075d: movabs $0x7f757036de58,%r11
  0x00007f75704a0767: cmp    %r11,%rax
  0x00007f75704a076a: jb     0x00007f75704a07e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a0770: mov    %rsp,-0x28(%rsp)
  0x00007f75704a0775: sub    $0x80,%rsp
  0x00007f75704a077c: mov    %rax,0x78(%rsp)
  0x00007f75704a0781: mov    %rcx,0x70(%rsp)
  0x00007f75704a0786: mov    %rdx,0x68(%rsp)
  0x00007f75704a078b: mov    %rbx,0x60(%rsp)
  0x00007f75704a0790: mov    %rbp,0x50(%rsp)
  0x00007f75704a0795: mov    %rsi,0x48(%rsp)
  0x00007f75704a079a: mov    %rdi,0x40(%rsp)
  0x00007f75704a079f: mov    %r8,0x38(%rsp)
  0x00007f75704a07a4: mov    %r9,0x30(%rsp)
  0x00007f75704a07a9: mov    %r10,0x28(%rsp)
  0x00007f75704a07ae: mov    %r11,0x20(%rsp)
  0x00007f75704a07b3: mov    %r12,0x18(%rsp)
  0x00007f75704a07b8: mov    %r13,0x10(%rsp)
  0x00007f75704a07bd: mov    %r14,0x8(%rsp)
  0x00007f75704a07c2: mov    %r15,(%rsp)
  0x00007f75704a07c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a07d0: movabs $0x7f75704a0770,%rsi
  0x00007f75704a07da: mov    %rsp,%rdx
  0x00007f75704a07dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a07e1: callq  0x00007f75853729fa
  0x00007f75704a07e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a07e7: mov    %rsp,%r11
  0x00007f75704a07ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a07ee: push   %rax
  0x00007f75704a07ef: mov    %r11,%rax
  0x00007f75704a07f2: mov    0x50(%rbx),%r11
  0x00007f75704a07f6: mov    0x18(%rax),%rsi
  0x00007f75704a07fa: mov    0x10(%rax),%rdx
  0x00007f75704a07fe: mov    0x8(%rax),%rcx
  0x00007f75704a0802: mov    %rbx,0x258(%r15)
  0x00007f75704a0809: mov    %rbx,%rax
  0x00007f75704a080c: jmpq   *%r11
  0x00007f75704a080f: mov    0x8(%rsi),%ebx
  0x00007f75704a0812: shl    $0x3,%rbx
  0x00007f75704a0816: cmp    0x10(%rax),%rbx
  0x00007f75704a081a: mov    0x8(%rax),%rbx
  0x00007f75704a081e: je     0x00007f75704a0829
  0x00007f75704a0824: jmpq   0x00007f757046ec40
  0x00007f75704a0829: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0831: je     0x00007f75704a092c
  0x00007f75704a0837: jmpq   0x00007f757046ec40
  0x00007f75704a083c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0844: je     0x00007f75704a092c
  0x00007f75704a084a: mov    %rsp,%r13
  0x00007f75704a084d: mov    (%rsp),%rax
  0x00007f75704a0851: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0855: pushfq 
  0x00007f75704a0856: sub    $0x8,%rsp
  0x00007f75704a085a: mov    %rsp,-0x28(%rsp)
  0x00007f75704a085f: sub    $0x80,%rsp
  0x00007f75704a0866: mov    %rax,0x78(%rsp)
  0x00007f75704a086b: mov    %rcx,0x70(%rsp)
  0x00007f75704a0870: mov    %rdx,0x68(%rsp)
  0x00007f75704a0875: mov    %rbx,0x60(%rsp)
  0x00007f75704a087a: mov    %rbp,0x50(%rsp)
  0x00007f75704a087f: mov    %rsi,0x48(%rsp)
  0x00007f75704a0884: mov    %rdi,0x40(%rsp)
  0x00007f75704a0889: mov    %r8,0x38(%rsp)
  0x00007f75704a088e: mov    %r9,0x30(%rsp)
  0x00007f75704a0893: mov    %r10,0x28(%rsp)
  0x00007f75704a0898: mov    %r11,0x20(%rsp)
  0x00007f75704a089d: mov    %r12,0x18(%rsp)
  0x00007f75704a08a2: mov    %r13,0x10(%rsp)
  0x00007f75704a08a7: mov    %r14,0x8(%rsp)
  0x00007f75704a08ac: mov    %r15,(%rsp)
  0x00007f75704a08b0: sub    $0x200,%rsp
  0x00007f75704a08b7: fxsave64 (%rsp)
  0x00007f75704a08bc: mov    %rbx,%rdi
  0x00007f75704a08bf: mov    %rax,%rsi
  0x00007f75704a08c2: callq  0x00007f7585522bca
  0x00007f75704a08c7: fxrstor64 (%rsp)
  0x00007f75704a08cc: add    $0x200,%rsp
  0x00007f75704a08d3: mov    (%rsp),%r15
  0x00007f75704a08d7: mov    0x8(%rsp),%r14
  0x00007f75704a08dc: mov    0x10(%rsp),%r13
  0x00007f75704a08e1: mov    0x18(%rsp),%r12
  0x00007f75704a08e6: mov    0x20(%rsp),%r11
  0x00007f75704a08eb: mov    0x28(%rsp),%r10
  0x00007f75704a08f0: mov    0x30(%rsp),%r9
  0x00007f75704a08f5: mov    0x38(%rsp),%r8
  0x00007f75704a08fa: mov    0x40(%rsp),%rdi
  0x00007f75704a08ff: mov    0x48(%rsp),%rsi
  0x00007f75704a0904: mov    0x50(%rsp),%rbp
  0x00007f75704a0909: mov    0x60(%rsp),%rbx
  0x00007f75704a090e: mov    0x68(%rsp),%rdx
  0x00007f75704a0913: mov    0x70(%rsp),%rcx
  0x00007f75704a0918: mov    0x78(%rsp),%rax
  0x00007f75704a091d: add    $0x80,%rsp
  0x00007f75704a0924: add    $0x8,%rsp
  0x00007f75704a0928: popfq  
  0x00007f75704a0929: mov    %r13,%rsp
  0x00007f75704a092c: pop    %rax
  0x00007f75704a092d: mov    %rsp,%r13
  0x00007f75704a0930: sub    $0x20,%rsp
  0x00007f75704a0934: mov    %rax,(%rsp)
  0x00007f75704a0938: mov    %rsi,0x18(%rsp)
  0x00007f75704a093d: mov    %rdx,0x10(%rsp)
  0x00007f75704a0942: mov    %rcx,0x8(%rsp)
  0x00007f75704a0947: mov    0x40(%rbx),%rcx
  0x00007f75704a094b: jmpq   *%rcx

AHE@0x00007f75800e8940: 0xbb000000 i2c: 0x00007f75704a0a20 c2i: 0x00007f75704a0b38 c2iUV: 0x00007f75704a0b0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Z (548 bytes generated)
c2i argument handler starts at 0x7f75704a0b38
  0x00007f75704a0a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a0a24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a0a2e: cmp    %r11,%rax
  0x00007f75704a0a31: jbe    0x00007f75704a0a4a
  0x00007f75704a0a37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a0a41: cmp    %r11,%rax
  0x00007f75704a0a44: jb     0x00007f75704a0ae7
  0x00007f75704a0a4a: movabs $0x7f7570369420,%r11
  0x00007f75704a0a54: cmp    %r11,%rax
  0x00007f75704a0a57: jbe    0x00007f75704a0a70
  0x00007f75704a0a5d: movabs $0x7f757036de58,%r11
  0x00007f75704a0a67: cmp    %r11,%rax
  0x00007f75704a0a6a: jb     0x00007f75704a0ae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a0a70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a0a75: sub    $0x80,%rsp
  0x00007f75704a0a7c: mov    %rax,0x78(%rsp)
  0x00007f75704a0a81: mov    %rcx,0x70(%rsp)
  0x00007f75704a0a86: mov    %rdx,0x68(%rsp)
  0x00007f75704a0a8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a0a90: mov    %rbp,0x50(%rsp)
  0x00007f75704a0a95: mov    %rsi,0x48(%rsp)
  0x00007f75704a0a9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a0a9f: mov    %r8,0x38(%rsp)
  0x00007f75704a0aa4: mov    %r9,0x30(%rsp)
  0x00007f75704a0aa9: mov    %r10,0x28(%rsp)
  0x00007f75704a0aae: mov    %r11,0x20(%rsp)
  0x00007f75704a0ab3: mov    %r12,0x18(%rsp)
  0x00007f75704a0ab8: mov    %r13,0x10(%rsp)
  0x00007f75704a0abd: mov    %r14,0x8(%rsp)
  0x00007f75704a0ac2: mov    %r15,(%rsp)
  0x00007f75704a0ac6: movabs $0x7f758592f470,%rdi
  0x00007f75704a0ad0: movabs $0x7f75704a0a70,%rsi
  0x00007f75704a0ada: mov    %rsp,%rdx
  0x00007f75704a0add: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0ae1: callq  0x00007f75853729fa
  0x00007f75704a0ae6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a0ae7: mov    %rsp,%r11
  0x00007f75704a0aea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0aee: push   %rax
  0x00007f75704a0aef: mov    %r11,%rax
  0x00007f75704a0af2: mov    0x50(%rbx),%r11
  0x00007f75704a0af6: mov    0x10(%rax),%rsi
  0x00007f75704a0afa: mov    0x8(%rax),%rdx
  0x00007f75704a0afe: mov    %rbx,0x258(%r15)
  0x00007f75704a0b05: mov    %rbx,%rax
  0x00007f75704a0b08: jmpq   *%r11
  0x00007f75704a0b0b: mov    0x8(%rsi),%ebx
  0x00007f75704a0b0e: shl    $0x3,%rbx
  0x00007f75704a0b12: cmp    0x10(%rax),%rbx
  0x00007f75704a0b16: mov    0x8(%rax),%rbx
  0x00007f75704a0b1a: je     0x00007f75704a0b25
  0x00007f75704a0b20: jmpq   0x00007f757046ec40
  0x00007f75704a0b25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0b2d: je     0x00007f75704a0c28
  0x00007f75704a0b33: jmpq   0x00007f757046ec40
  0x00007f75704a0b38: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0b40: je     0x00007f75704a0c28
  0x00007f75704a0b46: mov    %rsp,%r13
  0x00007f75704a0b49: mov    (%rsp),%rax
  0x00007f75704a0b4d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0b51: pushfq 
  0x00007f75704a0b52: sub    $0x8,%rsp
  0x00007f75704a0b56: mov    %rsp,-0x28(%rsp)
  0x00007f75704a0b5b: sub    $0x80,%rsp
  0x00007f75704a0b62: mov    %rax,0x78(%rsp)
  0x00007f75704a0b67: mov    %rcx,0x70(%rsp)
  0x00007f75704a0b6c: mov    %rdx,0x68(%rsp)
  0x00007f75704a0b71: mov    %rbx,0x60(%rsp)
  0x00007f75704a0b76: mov    %rbp,0x50(%rsp)
  0x00007f75704a0b7b: mov    %rsi,0x48(%rsp)
  0x00007f75704a0b80: mov    %rdi,0x40(%rsp)
  0x00007f75704a0b85: mov    %r8,0x38(%rsp)
  0x00007f75704a0b8a: mov    %r9,0x30(%rsp)
  0x00007f75704a0b8f: mov    %r10,0x28(%rsp)
  0x00007f75704a0b94: mov    %r11,0x20(%rsp)
  0x00007f75704a0b99: mov    %r12,0x18(%rsp)
  0x00007f75704a0b9e: mov    %r13,0x10(%rsp)
  0x00007f75704a0ba3: mov    %r14,0x8(%rsp)
  0x00007f75704a0ba8: mov    %r15,(%rsp)
  0x00007f75704a0bac: sub    $0x200,%rsp
  0x00007f75704a0bb3: fxsave64 (%rsp)
  0x00007f75704a0bb8: mov    %rbx,%rdi
  0x00007f75704a0bbb: mov    %rax,%rsi
  0x00007f75704a0bbe: callq  0x00007f7585522bca
  0x00007f75704a0bc3: fxrstor64 (%rsp)
  0x00007f75704a0bc8: add    $0x200,%rsp
  0x00007f75704a0bcf: mov    (%rsp),%r15
  0x00007f75704a0bd3: mov    0x8(%rsp),%r14
  0x00007f75704a0bd8: mov    0x10(%rsp),%r13
  0x00007f75704a0bdd: mov    0x18(%rsp),%r12
  0x00007f75704a0be2: mov    0x20(%rsp),%r11
  0x00007f75704a0be7: mov    0x28(%rsp),%r10
  0x00007f75704a0bec: mov    0x30(%rsp),%r9
  0x00007f75704a0bf1: mov    0x38(%rsp),%r8
  0x00007f75704a0bf6: mov    0x40(%rsp),%rdi
  0x00007f75704a0bfb: mov    0x48(%rsp),%rsi
  0x00007f75704a0c00: mov    0x50(%rsp),%rbp
  0x00007f75704a0c05: mov    0x60(%rsp),%rbx
  0x00007f75704a0c0a: mov    0x68(%rsp),%rdx
  0x00007f75704a0c0f: mov    0x70(%rsp),%rcx
  0x00007f75704a0c14: mov    0x78(%rsp),%rax
  0x00007f75704a0c19: add    $0x80,%rsp
  0x00007f75704a0c20: add    $0x8,%rsp
  0x00007f75704a0c24: popfq  
  0x00007f75704a0c25: mov    %r13,%rsp
  0x00007f75704a0c28: pop    %rax
  0x00007f75704a0c29: mov    %rsp,%r13
  0x00007f75704a0c2c: sub    $0x20,%rsp
  0x00007f75704a0c30: mov    %rax,(%rsp)
  0x00007f75704a0c34: mov    %rsi,0x10(%rsp)
  0x00007f75704a0c39: mov    %rdx,0x8(%rsp)
  0x00007f75704a0c3e: mov    0x40(%rbx),%rcx
  0x00007f75704a0c42: jmpq   *%rcx

AHE@0x00007f75800e8988: 0xbbbaabb0 i2c: 0x00007f75704a0d20 c2i: 0x00007f75704a0e55 c2iUV: 0x00007f75704a0e28
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; (607 bytes generated)
c2i argument handler starts at 0x7f75704a0e55
  0x00007f75704a0d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a0d24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a0d2e: cmp    %r11,%rax
  0x00007f75704a0d31: jbe    0x00007f75704a0d4a
  0x00007f75704a0d37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a0d41: cmp    %r11,%rax
  0x00007f75704a0d44: jb     0x00007f75704a0de7
  0x00007f75704a0d4a: movabs $0x7f7570369420,%r11
  0x00007f75704a0d54: cmp    %r11,%rax
  0x00007f75704a0d57: jbe    0x00007f75704a0d70
  0x00007f75704a0d5d: movabs $0x7f757036de58,%r11
  0x00007f75704a0d67: cmp    %r11,%rax
  0x00007f75704a0d6a: jb     0x00007f75704a0de7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a0d70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a0d75: sub    $0x80,%rsp
  0x00007f75704a0d7c: mov    %rax,0x78(%rsp)
  0x00007f75704a0d81: mov    %rcx,0x70(%rsp)
  0x00007f75704a0d86: mov    %rdx,0x68(%rsp)
  0x00007f75704a0d8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a0d90: mov    %rbp,0x50(%rsp)
  0x00007f75704a0d95: mov    %rsi,0x48(%rsp)
  0x00007f75704a0d9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a0d9f: mov    %r8,0x38(%rsp)
  0x00007f75704a0da4: mov    %r9,0x30(%rsp)
  0x00007f75704a0da9: mov    %r10,0x28(%rsp)
  0x00007f75704a0dae: mov    %r11,0x20(%rsp)
  0x00007f75704a0db3: mov    %r12,0x18(%rsp)
  0x00007f75704a0db8: mov    %r13,0x10(%rsp)
  0x00007f75704a0dbd: mov    %r14,0x8(%rsp)
  0x00007f75704a0dc2: mov    %r15,(%rsp)
  0x00007f75704a0dc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a0dd0: movabs $0x7f75704a0d70,%rsi
  0x00007f75704a0dda: mov    %rsp,%rdx
  0x00007f75704a0ddd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0de1: callq  0x00007f75853729fa
  0x00007f75704a0de6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a0de7: mov    %rsp,%r11
  0x00007f75704a0dea: sub    $0x10,%rsp
  0x00007f75704a0dee: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0df2: push   %rax
  0x00007f75704a0df3: mov    %r11,%rax
  0x00007f75704a0df6: mov    0x50(%rbx),%r11
  0x00007f75704a0dfa: mov    0x38(%rax),%rsi
  0x00007f75704a0dfe: mov    0x30(%rax),%rdx
  0x00007f75704a0e02: mov    0x28(%rax),%rcx
  0x00007f75704a0e06: mov    0x20(%rax),%r8d
  0x00007f75704a0e0a: mov    0x18(%rax),%r9d
  0x00007f75704a0e0e: mov    0x10(%rax),%rdi
  0x00007f75704a0e12: mov    0x8(%rax),%r13
  0x00007f75704a0e16: mov    %r13,0x8(%rsp)
  0x00007f75704a0e1b: mov    %rbx,0x258(%r15)
  0x00007f75704a0e22: mov    %rbx,%rax
  0x00007f75704a0e25: jmpq   *%r11
  0x00007f75704a0e28: mov    0x8(%rsi),%ebx
  0x00007f75704a0e2b: shl    $0x3,%rbx
  0x00007f75704a0e2f: cmp    0x10(%rax),%rbx
  0x00007f75704a0e33: mov    0x8(%rax),%rbx
  0x00007f75704a0e37: je     0x00007f75704a0e42
  0x00007f75704a0e3d: jmpq   0x00007f757046ec40
  0x00007f75704a0e42: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0e4a: je     0x00007f75704a0f45
  0x00007f75704a0e50: jmpq   0x00007f757046ec40
  0x00007f75704a0e55: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a0e5d: je     0x00007f75704a0f45
  0x00007f75704a0e63: mov    %rsp,%r13
  0x00007f75704a0e66: mov    (%rsp),%rax
  0x00007f75704a0e6a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a0e6e: pushfq 
  0x00007f75704a0e6f: sub    $0x8,%rsp
  0x00007f75704a0e73: mov    %rsp,-0x28(%rsp)
  0x00007f75704a0e78: sub    $0x80,%rsp
  0x00007f75704a0e7f: mov    %rax,0x78(%rsp)
  0x00007f75704a0e84: mov    %rcx,0x70(%rsp)
  0x00007f75704a0e89: mov    %rdx,0x68(%rsp)
  0x00007f75704a0e8e: mov    %rbx,0x60(%rsp)
  0x00007f75704a0e93: mov    %rbp,0x50(%rsp)
  0x00007f75704a0e98: mov    %rsi,0x48(%rsp)
  0x00007f75704a0e9d: mov    %rdi,0x40(%rsp)
  0x00007f75704a0ea2: mov    %r8,0x38(%rsp)
  0x00007f75704a0ea7: mov    %r9,0x30(%rsp)
  0x00007f75704a0eac: mov    %r10,0x28(%rsp)
  0x00007f75704a0eb1: mov    %r11,0x20(%rsp)
  0x00007f75704a0eb6: mov    %r12,0x18(%rsp)
  0x00007f75704a0ebb: mov    %r13,0x10(%rsp)
  0x00007f75704a0ec0: mov    %r14,0x8(%rsp)
  0x00007f75704a0ec5: mov    %r15,(%rsp)
  0x00007f75704a0ec9: sub    $0x200,%rsp
  0x00007f75704a0ed0: fxsave64 (%rsp)
  0x00007f75704a0ed5: mov    %rbx,%rdi
  0x00007f75704a0ed8: mov    %rax,%rsi
  0x00007f75704a0edb: callq  0x00007f7585522bca
  0x00007f75704a0ee0: fxrstor64 (%rsp)
  0x00007f75704a0ee5: add    $0x200,%rsp
  0x00007f75704a0eec: mov    (%rsp),%r15
  0x00007f75704a0ef0: mov    0x8(%rsp),%r14
  0x00007f75704a0ef5: mov    0x10(%rsp),%r13
  0x00007f75704a0efa: mov    0x18(%rsp),%r12
  0x00007f75704a0eff: mov    0x20(%rsp),%r11
  0x00007f75704a0f04: mov    0x28(%rsp),%r10
  0x00007f75704a0f09: mov    0x30(%rsp),%r9
  0x00007f75704a0f0e: mov    0x38(%rsp),%r8
  0x00007f75704a0f13: mov    0x40(%rsp),%rdi
  0x00007f75704a0f18: mov    0x48(%rsp),%rsi
  0x00007f75704a0f1d: mov    0x50(%rsp),%rbp
  0x00007f75704a0f22: mov    0x60(%rsp),%rbx
  0x00007f75704a0f27: mov    0x68(%rsp),%rdx
  0x00007f75704a0f2c: mov    0x70(%rsp),%rcx
  0x00007f75704a0f31: mov    0x78(%rsp),%rax
  0x00007f75704a0f36: add    $0x80,%rsp
  0x00007f75704a0f3d: add    $0x8,%rsp
  0x00007f75704a0f41: popfq  
  0x00007f75704a0f42: mov    %r13,%rsp
  0x00007f75704a0f45: pop    %rax
  0x00007f75704a0f46: mov    %rsp,%r13
  0x00007f75704a0f49: sub    $0x40,%rsp
  0x00007f75704a0f4d: mov    %rax,(%rsp)
  0x00007f75704a0f51: mov    %rsi,0x38(%rsp)
  0x00007f75704a0f56: mov    %rdx,0x30(%rsp)
  0x00007f75704a0f5b: mov    %rcx,0x28(%rsp)
  0x00007f75704a0f60: mov    %r8d,0x20(%rsp)
  0x00007f75704a0f65: mov    %r9d,0x18(%rsp)
  0x00007f75704a0f6a: mov    %rdi,0x10(%rsp)
  0x00007f75704a0f6f: mov    0x40(%rsp),%rax
  0x00007f75704a0f74: mov    %rax,0x8(%rsp)
  0x00007f75704a0f79: mov    0x40(%rbx),%rcx
  0x00007f75704a0f7d: jmpq   *%rcx

AHE@0x00007f75800e89d0: 0xbbbaabb0 i2c: 0x00007f75704a1020 c2i: 0x00007f75704a1155 c2iUV: 0x00007f75704a1128
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; (607 bytes generated)
c2i argument handler starts at 0x7f75704a1155
  0x00007f75704a1020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a1024: movabs $0x7f757036e3e0,%r11
  0x00007f75704a102e: cmp    %r11,%rax
  0x00007f75704a1031: jbe    0x00007f75704a104a
  0x00007f75704a1037: movabs $0x7f757046e3e0,%r11
  0x00007f75704a1041: cmp    %r11,%rax
  0x00007f75704a1044: jb     0x00007f75704a10e7
  0x00007f75704a104a: movabs $0x7f7570369420,%r11
  0x00007f75704a1054: cmp    %r11,%rax
  0x00007f75704a1057: jbe    0x00007f75704a1070
  0x00007f75704a105d: movabs $0x7f757036de58,%r11
  0x00007f75704a1067: cmp    %r11,%rax
  0x00007f75704a106a: jb     0x00007f75704a10e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a1070: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1075: sub    $0x80,%rsp
  0x00007f75704a107c: mov    %rax,0x78(%rsp)
  0x00007f75704a1081: mov    %rcx,0x70(%rsp)
  0x00007f75704a1086: mov    %rdx,0x68(%rsp)
  0x00007f75704a108b: mov    %rbx,0x60(%rsp)
  0x00007f75704a1090: mov    %rbp,0x50(%rsp)
  0x00007f75704a1095: mov    %rsi,0x48(%rsp)
  0x00007f75704a109a: mov    %rdi,0x40(%rsp)
  0x00007f75704a109f: mov    %r8,0x38(%rsp)
  0x00007f75704a10a4: mov    %r9,0x30(%rsp)
  0x00007f75704a10a9: mov    %r10,0x28(%rsp)
  0x00007f75704a10ae: mov    %r11,0x20(%rsp)
  0x00007f75704a10b3: mov    %r12,0x18(%rsp)
  0x00007f75704a10b8: mov    %r13,0x10(%rsp)
  0x00007f75704a10bd: mov    %r14,0x8(%rsp)
  0x00007f75704a10c2: mov    %r15,(%rsp)
  0x00007f75704a10c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a10d0: movabs $0x7f75704a1070,%rsi
  0x00007f75704a10da: mov    %rsp,%rdx
  0x00007f75704a10dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a10e1: callq  0x00007f75853729fa
  0x00007f75704a10e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a10e7: mov    %rsp,%r11
  0x00007f75704a10ea: sub    $0x10,%rsp
  0x00007f75704a10ee: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a10f2: push   %rax
  0x00007f75704a10f3: mov    %r11,%rax
  0x00007f75704a10f6: mov    0x50(%rbx),%r11
  0x00007f75704a10fa: mov    0x38(%rax),%rsi
  0x00007f75704a10fe: mov    0x30(%rax),%rdx
  0x00007f75704a1102: mov    0x28(%rax),%rcx
  0x00007f75704a1106: mov    0x20(%rax),%r8d
  0x00007f75704a110a: mov    0x18(%rax),%r9d
  0x00007f75704a110e: mov    0x10(%rax),%rdi
  0x00007f75704a1112: mov    0x8(%rax),%r13
  0x00007f75704a1116: mov    %r13,0x8(%rsp)
  0x00007f75704a111b: mov    %rbx,0x258(%r15)
  0x00007f75704a1122: mov    %rbx,%rax
  0x00007f75704a1125: jmpq   *%r11
  0x00007f75704a1128: mov    0x8(%rsi),%ebx
  0x00007f75704a112b: shl    $0x3,%rbx
  0x00007f75704a112f: cmp    0x10(%rax),%rbx
  0x00007f75704a1133: mov    0x8(%rax),%rbx
  0x00007f75704a1137: je     0x00007f75704a1142
  0x00007f75704a113d: jmpq   0x00007f757046ec40
  0x00007f75704a1142: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a114a: je     0x00007f75704a1245
  0x00007f75704a1150: jmpq   0x00007f757046ec40
  0x00007f75704a1155: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a115d: je     0x00007f75704a1245
  0x00007f75704a1163: mov    %rsp,%r13
  0x00007f75704a1166: mov    (%rsp),%rax
  0x00007f75704a116a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a116e: pushfq 
  0x00007f75704a116f: sub    $0x8,%rsp
  0x00007f75704a1173: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1178: sub    $0x80,%rsp
  0x00007f75704a117f: mov    %rax,0x78(%rsp)
  0x00007f75704a1184: mov    %rcx,0x70(%rsp)
  0x00007f75704a1189: mov    %rdx,0x68(%rsp)
  0x00007f75704a118e: mov    %rbx,0x60(%rsp)
  0x00007f75704a1193: mov    %rbp,0x50(%rsp)
  0x00007f75704a1198: mov    %rsi,0x48(%rsp)
  0x00007f75704a119d: mov    %rdi,0x40(%rsp)
  0x00007f75704a11a2: mov    %r8,0x38(%rsp)
  0x00007f75704a11a7: mov    %r9,0x30(%rsp)
  0x00007f75704a11ac: mov    %r10,0x28(%rsp)
  0x00007f75704a11b1: mov    %r11,0x20(%rsp)
  0x00007f75704a11b6: mov    %r12,0x18(%rsp)
  0x00007f75704a11bb: mov    %r13,0x10(%rsp)
  0x00007f75704a11c0: mov    %r14,0x8(%rsp)
  0x00007f75704a11c5: mov    %r15,(%rsp)
  0x00007f75704a11c9: sub    $0x200,%rsp
  0x00007f75704a11d0: fxsave64 (%rsp)
  0x00007f75704a11d5: mov    %rbx,%rdi
  0x00007f75704a11d8: mov    %rax,%rsi
  0x00007f75704a11db: callq  0x00007f7585522bca
  0x00007f75704a11e0: fxrstor64 (%rsp)
  0x00007f75704a11e5: add    $0x200,%rsp
  0x00007f75704a11ec: mov    (%rsp),%r15
  0x00007f75704a11f0: mov    0x8(%rsp),%r14
  0x00007f75704a11f5: mov    0x10(%rsp),%r13
  0x00007f75704a11fa: mov    0x18(%rsp),%r12
  0x00007f75704a11ff: mov    0x20(%rsp),%r11
  0x00007f75704a1204: mov    0x28(%rsp),%r10
  0x00007f75704a1209: mov    0x30(%rsp),%r9
  0x00007f75704a120e: mov    0x38(%rsp),%r8
  0x00007f75704a1213: mov    0x40(%rsp),%rdi
  0x00007f75704a1218: mov    0x48(%rsp),%rsi
  0x00007f75704a121d: mov    0x50(%rsp),%rbp
  0x00007f75704a1222: mov    0x60(%rsp),%rbx
  0x00007f75704a1227: mov    0x68(%rsp),%rdx
  0x00007f75704a122c: mov    0x70(%rsp),%rcx
  0x00007f75704a1231: mov    0x78(%rsp),%rax
  0x00007f75704a1236: add    $0x80,%rsp
  0x00007f75704a123d: add    $0x8,%rsp
  0x00007f75704a1241: popfq  
  0x00007f75704a1242: mov    %r13,%rsp
  0x00007f75704a1245: pop    %rax
  0x00007f75704a1246: mov    %rsp,%r13
  0x00007f75704a1249: sub    $0x40,%rsp
  0x00007f75704a124d: mov    %rax,(%rsp)
  0x00007f75704a1251: mov    %rsi,0x38(%rsp)
  0x00007f75704a1256: mov    %rdx,0x30(%rsp)
  0x00007f75704a125b: mov    %rcx,0x28(%rsp)
  0x00007f75704a1260: mov    %r8d,0x20(%rsp)
  0x00007f75704a1265: mov    %r9d,0x18(%rsp)
  0x00007f75704a126a: mov    %rdi,0x10(%rsp)
  0x00007f75704a126f: mov    0x40(%rsp),%rax
  0x00007f75704a1274: mov    %rax,0x8(%rsp)
  0x00007f75704a1279: mov    0x40(%rbx),%rcx
  0x00007f75704a127d: jmpq   *%rcx

AHE@0x00007f75800e8a18: 0xbbbaab00 i2c: 0x00007f75704a1320 c2i: 0x00007f75704a1448 c2iUV: 0x00007f75704a141b
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; (584 bytes generated)
c2i argument handler starts at 0x7f75704a1448
  0x00007f75704a1320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a1324: movabs $0x7f757036e3e0,%r11
  0x00007f75704a132e: cmp    %r11,%rax
  0x00007f75704a1331: jbe    0x00007f75704a134a
  0x00007f75704a1337: movabs $0x7f757046e3e0,%r11
  0x00007f75704a1341: cmp    %r11,%rax
  0x00007f75704a1344: jb     0x00007f75704a13e7
  0x00007f75704a134a: movabs $0x7f7570369420,%r11
  0x00007f75704a1354: cmp    %r11,%rax
  0x00007f75704a1357: jbe    0x00007f75704a1370
  0x00007f75704a135d: movabs $0x7f757036de58,%r11
  0x00007f75704a1367: cmp    %r11,%rax
  0x00007f75704a136a: jb     0x00007f75704a13e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a1370: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1375: sub    $0x80,%rsp
  0x00007f75704a137c: mov    %rax,0x78(%rsp)
  0x00007f75704a1381: mov    %rcx,0x70(%rsp)
  0x00007f75704a1386: mov    %rdx,0x68(%rsp)
  0x00007f75704a138b: mov    %rbx,0x60(%rsp)
  0x00007f75704a1390: mov    %rbp,0x50(%rsp)
  0x00007f75704a1395: mov    %rsi,0x48(%rsp)
  0x00007f75704a139a: mov    %rdi,0x40(%rsp)
  0x00007f75704a139f: mov    %r8,0x38(%rsp)
  0x00007f75704a13a4: mov    %r9,0x30(%rsp)
  0x00007f75704a13a9: mov    %r10,0x28(%rsp)
  0x00007f75704a13ae: mov    %r11,0x20(%rsp)
  0x00007f75704a13b3: mov    %r12,0x18(%rsp)
  0x00007f75704a13b8: mov    %r13,0x10(%rsp)
  0x00007f75704a13bd: mov    %r14,0x8(%rsp)
  0x00007f75704a13c2: mov    %r15,(%rsp)
  0x00007f75704a13c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a13d0: movabs $0x7f75704a1370,%rsi
  0x00007f75704a13da: mov    %rsp,%rdx
  0x00007f75704a13dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a13e1: callq  0x00007f75853729fa
  0x00007f75704a13e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a13e7: mov    %rsp,%r11
  0x00007f75704a13ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a13ee: push   %rax
  0x00007f75704a13ef: mov    %r11,%rax
  0x00007f75704a13f2: mov    0x50(%rbx),%r11
  0x00007f75704a13f6: mov    0x30(%rax),%rsi
  0x00007f75704a13fa: mov    0x28(%rax),%rdx
  0x00007f75704a13fe: mov    0x20(%rax),%rcx
  0x00007f75704a1402: mov    0x18(%rax),%r8d
  0x00007f75704a1406: mov    0x10(%rax),%r9d
  0x00007f75704a140a: mov    0x8(%rax),%rdi
  0x00007f75704a140e: mov    %rbx,0x258(%r15)
  0x00007f75704a1415: mov    %rbx,%rax
  0x00007f75704a1418: jmpq   *%r11
  0x00007f75704a141b: mov    0x8(%rsi),%ebx
  0x00007f75704a141e: shl    $0x3,%rbx
  0x00007f75704a1422: cmp    0x10(%rax),%rbx
  0x00007f75704a1426: mov    0x8(%rax),%rbx
  0x00007f75704a142a: je     0x00007f75704a1435
  0x00007f75704a1430: jmpq   0x00007f757046ec40
  0x00007f75704a1435: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a143d: je     0x00007f75704a1538
  0x00007f75704a1443: jmpq   0x00007f757046ec40
  0x00007f75704a1448: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a1450: je     0x00007f75704a1538
  0x00007f75704a1456: mov    %rsp,%r13
  0x00007f75704a1459: mov    (%rsp),%rax
  0x00007f75704a145d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1461: pushfq 
  0x00007f75704a1462: sub    $0x8,%rsp
  0x00007f75704a1466: mov    %rsp,-0x28(%rsp)
  0x00007f75704a146b: sub    $0x80,%rsp
  0x00007f75704a1472: mov    %rax,0x78(%rsp)
  0x00007f75704a1477: mov    %rcx,0x70(%rsp)
  0x00007f75704a147c: mov    %rdx,0x68(%rsp)
  0x00007f75704a1481: mov    %rbx,0x60(%rsp)
  0x00007f75704a1486: mov    %rbp,0x50(%rsp)
  0x00007f75704a148b: mov    %rsi,0x48(%rsp)
  0x00007f75704a1490: mov    %rdi,0x40(%rsp)
  0x00007f75704a1495: mov    %r8,0x38(%rsp)
  0x00007f75704a149a: mov    %r9,0x30(%rsp)
  0x00007f75704a149f: mov    %r10,0x28(%rsp)
  0x00007f75704a14a4: mov    %r11,0x20(%rsp)
  0x00007f75704a14a9: mov    %r12,0x18(%rsp)
  0x00007f75704a14ae: mov    %r13,0x10(%rsp)
  0x00007f75704a14b3: mov    %r14,0x8(%rsp)
  0x00007f75704a14b8: mov    %r15,(%rsp)
  0x00007f75704a14bc: sub    $0x200,%rsp
  0x00007f75704a14c3: fxsave64 (%rsp)
  0x00007f75704a14c8: mov    %rbx,%rdi
  0x00007f75704a14cb: mov    %rax,%rsi
  0x00007f75704a14ce: callq  0x00007f7585522bca
  0x00007f75704a14d3: fxrstor64 (%rsp)
  0x00007f75704a14d8: add    $0x200,%rsp
  0x00007f75704a14df: mov    (%rsp),%r15
  0x00007f75704a14e3: mov    0x8(%rsp),%r14
  0x00007f75704a14e8: mov    0x10(%rsp),%r13
  0x00007f75704a14ed: mov    0x18(%rsp),%r12
  0x00007f75704a14f2: mov    0x20(%rsp),%r11
  0x00007f75704a14f7: mov    0x28(%rsp),%r10
  0x00007f75704a14fc: mov    0x30(%rsp),%r9
  0x00007f75704a1501: mov    0x38(%rsp),%r8
  0x00007f75704a1506: mov    0x40(%rsp),%rdi
  0x00007f75704a150b: mov    0x48(%rsp),%rsi
  0x00007f75704a1510: mov    0x50(%rsp),%rbp
  0x00007f75704a1515: mov    0x60(%rsp),%rbx
  0x00007f75704a151a: mov    0x68(%rsp),%rdx
  0x00007f75704a151f: mov    0x70(%rsp),%rcx
  0x00007f75704a1524: mov    0x78(%rsp),%rax
  0x00007f75704a1529: add    $0x80,%rsp
  0x00007f75704a1530: add    $0x8,%rsp
  0x00007f75704a1534: popfq  
  0x00007f75704a1535: mov    %r13,%rsp
  0x00007f75704a1538: pop    %rax
  0x00007f75704a1539: mov    %rsp,%r13
  0x00007f75704a153c: sub    $0x40,%rsp
  0x00007f75704a1540: mov    %rax,(%rsp)
  0x00007f75704a1544: mov    %rsi,0x30(%rsp)
  0x00007f75704a1549: mov    %rdx,0x28(%rsp)
  0x00007f75704a154e: mov    %rcx,0x20(%rsp)
  0x00007f75704a1553: mov    %r8d,0x18(%rsp)
  0x00007f75704a1558: mov    %r9d,0x10(%rsp)
  0x00007f75704a155d: mov    %rdi,0x8(%rsp)
  0x00007f75704a1562: mov    0x40(%rbx),%rcx
  0x00007f75704a1566: jmpq   *%rcx

AHE@0x00007f75800e8a60: 0xbbb00000 i2c: 0x00007f75704a1620 c2i: 0x00007f75704a173c c2iUV: 0x00007f75704a170f
i2c argument handler #0 for: receiver (Ljava/lang/Class;Ljava/security/ProtectionDomain;)V (557 bytes generated)
c2i argument handler starts at 0x7f75704a173c
  0x00007f75704a1620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a1624: movabs $0x7f757036e3e0,%r11
  0x00007f75704a162e: cmp    %r11,%rax
  0x00007f75704a1631: jbe    0x00007f75704a164a
  0x00007f75704a1637: movabs $0x7f757046e3e0,%r11
  0x00007f75704a1641: cmp    %r11,%rax
  0x00007f75704a1644: jb     0x00007f75704a16e7
  0x00007f75704a164a: movabs $0x7f7570369420,%r11
  0x00007f75704a1654: cmp    %r11,%rax
  0x00007f75704a1657: jbe    0x00007f75704a1670
  0x00007f75704a165d: movabs $0x7f757036de58,%r11
  0x00007f75704a1667: cmp    %r11,%rax
  0x00007f75704a166a: jb     0x00007f75704a16e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a1670: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1675: sub    $0x80,%rsp
  0x00007f75704a167c: mov    %rax,0x78(%rsp)
  0x00007f75704a1681: mov    %rcx,0x70(%rsp)
  0x00007f75704a1686: mov    %rdx,0x68(%rsp)
  0x00007f75704a168b: mov    %rbx,0x60(%rsp)
  0x00007f75704a1690: mov    %rbp,0x50(%rsp)
  0x00007f75704a1695: mov    %rsi,0x48(%rsp)
  0x00007f75704a169a: mov    %rdi,0x40(%rsp)
  0x00007f75704a169f: mov    %r8,0x38(%rsp)
  0x00007f75704a16a4: mov    %r9,0x30(%rsp)
  0x00007f75704a16a9: mov    %r10,0x28(%rsp)
  0x00007f75704a16ae: mov    %r11,0x20(%rsp)
  0x00007f75704a16b3: mov    %r12,0x18(%rsp)
  0x00007f75704a16b8: mov    %r13,0x10(%rsp)
  0x00007f75704a16bd: mov    %r14,0x8(%rsp)
  0x00007f75704a16c2: mov    %r15,(%rsp)
  0x00007f75704a16c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a16d0: movabs $0x7f75704a1670,%rsi
  0x00007f75704a16da: mov    %rsp,%rdx
  0x00007f75704a16dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a16e1: callq  0x00007f75853729fa
  0x00007f75704a16e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a16e7: mov    %rsp,%r11
  0x00007f75704a16ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a16ee: push   %rax
  0x00007f75704a16ef: mov    %r11,%rax
  0x00007f75704a16f2: mov    0x50(%rbx),%r11
  0x00007f75704a16f6: mov    0x18(%rax),%rsi
  0x00007f75704a16fa: mov    0x10(%rax),%rdx
  0x00007f75704a16fe: mov    0x8(%rax),%rcx
  0x00007f75704a1702: mov    %rbx,0x258(%r15)
  0x00007f75704a1709: mov    %rbx,%rax
  0x00007f75704a170c: jmpq   *%r11
  0x00007f75704a170f: mov    0x8(%rsi),%ebx
  0x00007f75704a1712: shl    $0x3,%rbx
  0x00007f75704a1716: cmp    0x10(%rax),%rbx
  0x00007f75704a171a: mov    0x8(%rax),%rbx
  0x00007f75704a171e: je     0x00007f75704a1729
  0x00007f75704a1724: jmpq   0x00007f757046ec40
  0x00007f75704a1729: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a1731: je     0x00007f75704a182c
  0x00007f75704a1737: jmpq   0x00007f757046ec40
  0x00007f75704a173c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a1744: je     0x00007f75704a182c
  0x00007f75704a174a: mov    %rsp,%r13
  0x00007f75704a174d: mov    (%rsp),%rax
  0x00007f75704a1751: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1755: pushfq 
  0x00007f75704a1756: sub    $0x8,%rsp
  0x00007f75704a175a: mov    %rsp,-0x28(%rsp)
  0x00007f75704a175f: sub    $0x80,%rsp
  0x00007f75704a1766: mov    %rax,0x78(%rsp)
  0x00007f75704a176b: mov    %rcx,0x70(%rsp)
  0x00007f75704a1770: mov    %rdx,0x68(%rsp)
  0x00007f75704a1775: mov    %rbx,0x60(%rsp)
  0x00007f75704a177a: mov    %rbp,0x50(%rsp)
  0x00007f75704a177f: mov    %rsi,0x48(%rsp)
  0x00007f75704a1784: mov    %rdi,0x40(%rsp)
  0x00007f75704a1789: mov    %r8,0x38(%rsp)
  0x00007f75704a178e: mov    %r9,0x30(%rsp)
  0x00007f75704a1793: mov    %r10,0x28(%rsp)
  0x00007f75704a1798: mov    %r11,0x20(%rsp)
  0x00007f75704a179d: mov    %r12,0x18(%rsp)
  0x00007f75704a17a2: mov    %r13,0x10(%rsp)
  0x00007f75704a17a7: mov    %r14,0x8(%rsp)
  0x00007f75704a17ac: mov    %r15,(%rsp)
  0x00007f75704a17b0: sub    $0x200,%rsp
  0x00007f75704a17b7: fxsave64 (%rsp)
  0x00007f75704a17bc: mov    %rbx,%rdi
  0x00007f75704a17bf: mov    %rax,%rsi
  0x00007f75704a17c2: callq  0x00007f7585522bca
  0x00007f75704a17c7: fxrstor64 (%rsp)
  0x00007f75704a17cc: add    $0x200,%rsp
  0x00007f75704a17d3: mov    (%rsp),%r15
  0x00007f75704a17d7: mov    0x8(%rsp),%r14
  0x00007f75704a17dc: mov    0x10(%rsp),%r13
  0x00007f75704a17e1: mov    0x18(%rsp),%r12
  0x00007f75704a17e6: mov    0x20(%rsp),%r11
  0x00007f75704a17eb: mov    0x28(%rsp),%r10
  0x00007f75704a17f0: mov    0x30(%rsp),%r9
  0x00007f75704a17f5: mov    0x38(%rsp),%r8
  0x00007f75704a17fa: mov    0x40(%rsp),%rdi
  0x00007f75704a17ff: mov    0x48(%rsp),%rsi
  0x00007f75704a1804: mov    0x50(%rsp),%rbp
  0x00007f75704a1809: mov    0x60(%rsp),%rbx
  0x00007f75704a180e: mov    0x68(%rsp),%rdx
  0x00007f75704a1813: mov    0x70(%rsp),%rcx
  0x00007f75704a1818: mov    0x78(%rsp),%rax
  0x00007f75704a181d: add    $0x80,%rsp
  0x00007f75704a1824: add    $0x8,%rsp
  0x00007f75704a1828: popfq  
  0x00007f75704a1829: mov    %r13,%rsp
  0x00007f75704a182c: pop    %rax
  0x00007f75704a182d: mov    %rsp,%r13
  0x00007f75704a1830: sub    $0x20,%rsp
  0x00007f75704a1834: mov    %rax,(%rsp)
  0x00007f75704a1838: mov    %rsi,0x18(%rsp)
  0x00007f75704a183d: mov    %rdx,0x10(%rsp)
  0x00007f75704a1842: mov    %rcx,0x8(%rsp)
  0x00007f75704a1847: mov    0x40(%rbx),%rcx
  0x00007f75704a184b: jmpq   *%rcx

AHE@0x00007f75800e8aa8: 0xbb000000 i2c: 0x00007f75704a1920 c2i: 0x00007f75704a1a38 c2iUV: 0x00007f75704a1a0b
i2c argument handler #0 for: receiver (Ljava/security/ProtectionDomain;)Ljava/lang/String; (548 bytes generated)
c2i argument handler starts at 0x7f75704a1a38
  0x00007f75704a1920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a1924: movabs $0x7f757036e3e0,%r11
  0x00007f75704a192e: cmp    %r11,%rax
  0x00007f75704a1931: jbe    0x00007f75704a194a
  0x00007f75704a1937: movabs $0x7f757046e3e0,%r11
  0x00007f75704a1941: cmp    %r11,%rax
  0x00007f75704a1944: jb     0x00007f75704a19e7
  0x00007f75704a194a: movabs $0x7f7570369420,%r11
  0x00007f75704a1954: cmp    %r11,%rax
  0x00007f75704a1957: jbe    0x00007f75704a1970
  0x00007f75704a195d: movabs $0x7f757036de58,%r11
  0x00007f75704a1967: cmp    %r11,%rax
  0x00007f75704a196a: jb     0x00007f75704a19e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a1970: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1975: sub    $0x80,%rsp
  0x00007f75704a197c: mov    %rax,0x78(%rsp)
  0x00007f75704a1981: mov    %rcx,0x70(%rsp)
  0x00007f75704a1986: mov    %rdx,0x68(%rsp)
  0x00007f75704a198b: mov    %rbx,0x60(%rsp)
  0x00007f75704a1990: mov    %rbp,0x50(%rsp)
  0x00007f75704a1995: mov    %rsi,0x48(%rsp)
  0x00007f75704a199a: mov    %rdi,0x40(%rsp)
  0x00007f75704a199f: mov    %r8,0x38(%rsp)
  0x00007f75704a19a4: mov    %r9,0x30(%rsp)
  0x00007f75704a19a9: mov    %r10,0x28(%rsp)
  0x00007f75704a19ae: mov    %r11,0x20(%rsp)
  0x00007f75704a19b3: mov    %r12,0x18(%rsp)
  0x00007f75704a19b8: mov    %r13,0x10(%rsp)
  0x00007f75704a19bd: mov    %r14,0x8(%rsp)
  0x00007f75704a19c2: mov    %r15,(%rsp)
  0x00007f75704a19c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a19d0: movabs $0x7f75704a1970,%rsi
  0x00007f75704a19da: mov    %rsp,%rdx
  0x00007f75704a19dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a19e1: callq  0x00007f75853729fa
  0x00007f75704a19e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a19e7: mov    %rsp,%r11
  0x00007f75704a19ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a19ee: push   %rax
  0x00007f75704a19ef: mov    %r11,%rax
  0x00007f75704a19f2: mov    0x50(%rbx),%r11
  0x00007f75704a19f6: mov    0x10(%rax),%rsi
  0x00007f75704a19fa: mov    0x8(%rax),%rdx
  0x00007f75704a19fe: mov    %rbx,0x258(%r15)
  0x00007f75704a1a05: mov    %rbx,%rax
  0x00007f75704a1a08: jmpq   *%r11
  0x00007f75704a1a0b: mov    0x8(%rsi),%ebx
  0x00007f75704a1a0e: shl    $0x3,%rbx
  0x00007f75704a1a12: cmp    0x10(%rax),%rbx
  0x00007f75704a1a16: mov    0x8(%rax),%rbx
  0x00007f75704a1a1a: je     0x00007f75704a1a25
  0x00007f75704a1a20: jmpq   0x00007f757046ec40
  0x00007f75704a1a25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a1a2d: je     0x00007f75704a1b28
  0x00007f75704a1a33: jmpq   0x00007f757046ec40
  0x00007f75704a1a38: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a1a40: je     0x00007f75704a1b28
  0x00007f75704a1a46: mov    %rsp,%r13
  0x00007f75704a1a49: mov    (%rsp),%rax
  0x00007f75704a1a4d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1a51: pushfq 
  0x00007f75704a1a52: sub    $0x8,%rsp
  0x00007f75704a1a56: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1a5b: sub    $0x80,%rsp
  0x00007f75704a1a62: mov    %rax,0x78(%rsp)
  0x00007f75704a1a67: mov    %rcx,0x70(%rsp)
  0x00007f75704a1a6c: mov    %rdx,0x68(%rsp)
  0x00007f75704a1a71: mov    %rbx,0x60(%rsp)
  0x00007f75704a1a76: mov    %rbp,0x50(%rsp)
  0x00007f75704a1a7b: mov    %rsi,0x48(%rsp)
  0x00007f75704a1a80: mov    %rdi,0x40(%rsp)
  0x00007f75704a1a85: mov    %r8,0x38(%rsp)
  0x00007f75704a1a8a: mov    %r9,0x30(%rsp)
  0x00007f75704a1a8f: mov    %r10,0x28(%rsp)
  0x00007f75704a1a94: mov    %r11,0x20(%rsp)
  0x00007f75704a1a99: mov    %r12,0x18(%rsp)
  0x00007f75704a1a9e: mov    %r13,0x10(%rsp)
  0x00007f75704a1aa3: mov    %r14,0x8(%rsp)
  0x00007f75704a1aa8: mov    %r15,(%rsp)
  0x00007f75704a1aac: sub    $0x200,%rsp
  0x00007f75704a1ab3: fxsave64 (%rsp)
  0x00007f75704a1ab8: mov    %rbx,%rdi
  0x00007f75704a1abb: mov    %rax,%rsi
  0x00007f75704a1abe: callq  0x00007f7585522bca
  0x00007f75704a1ac3: fxrstor64 (%rsp)
  0x00007f75704a1ac8: add    $0x200,%rsp
  0x00007f75704a1acf: mov    (%rsp),%r15
  0x00007f75704a1ad3: mov    0x8(%rsp),%r14
  0x00007f75704a1ad8: mov    0x10(%rsp),%r13
  0x00007f75704a1add: mov    0x18(%rsp),%r12
  0x00007f75704a1ae2: mov    0x20(%rsp),%r11
  0x00007f75704a1ae7: mov    0x28(%rsp),%r10
  0x00007f75704a1aec: mov    0x30(%rsp),%r9
  0x00007f75704a1af1: mov    0x38(%rsp),%r8
  0x00007f75704a1af6: mov    0x40(%rsp),%rdi
  0x00007f75704a1afb: mov    0x48(%rsp),%rsi
  0x00007f75704a1b00: mov    0x50(%rsp),%rbp
  0x00007f75704a1b05: mov    0x60(%rsp),%rbx
  0x00007f75704a1b0a: mov    0x68(%rsp),%rdx
  0x00007f75704a1b0f: mov    0x70(%rsp),%rcx
  0x00007f75704a1b14: mov    0x78(%rsp),%rax
  0x00007f75704a1b19: add    $0x80,%rsp
  0x00007f75704a1b20: add    $0x8,%rsp
  0x00007f75704a1b24: popfq  
  0x00007f75704a1b25: mov    %r13,%rsp
  0x00007f75704a1b28: pop    %rax
  0x00007f75704a1b29: mov    %rsp,%r13
  0x00007f75704a1b2c: sub    $0x20,%rsp
  0x00007f75704a1b30: mov    %rax,(%rsp)
  0x00007f75704a1b34: mov    %rsi,0x10(%rsp)
  0x00007f75704a1b39: mov    %rdx,0x8(%rsp)
  0x00007f75704a1b3e: mov    0x40(%rbx),%rcx
  0x00007f75704a1b42: jmpq   *%rcx

AHE@0x00007f75800e8af0: 0xbbb00000 i2c: 0x00007f75704a1c20 c2i: 0x00007f75704a1d3c c2iUV: 0x00007f75704a1d0f
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain; (557 bytes generated)
c2i argument handler starts at 0x7f75704a1d3c
  0x00007f75704a1c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a1c24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a1c2e: cmp    %r11,%rax
  0x00007f75704a1c31: jbe    0x00007f75704a1c4a
  0x00007f75704a1c37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a1c41: cmp    %r11,%rax
  0x00007f75704a1c44: jb     0x00007f75704a1ce7
  0x00007f75704a1c4a: movabs $0x7f7570369420,%r11
  0x00007f75704a1c54: cmp    %r11,%rax
  0x00007f75704a1c57: jbe    0x00007f75704a1c70
  0x00007f75704a1c5d: movabs $0x7f757036de58,%r11
  0x00007f75704a1c67: cmp    %r11,%rax
  0x00007f75704a1c6a: jb     0x00007f75704a1ce7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a1c70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1c75: sub    $0x80,%rsp
  0x00007f75704a1c7c: mov    %rax,0x78(%rsp)
  0x00007f75704a1c81: mov    %rcx,0x70(%rsp)
  0x00007f75704a1c86: mov    %rdx,0x68(%rsp)
  0x00007f75704a1c8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a1c90: mov    %rbp,0x50(%rsp)
  0x00007f75704a1c95: mov    %rsi,0x48(%rsp)
  0x00007f75704a1c9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a1c9f: mov    %r8,0x38(%rsp)
  0x00007f75704a1ca4: mov    %r9,0x30(%rsp)
  0x00007f75704a1ca9: mov    %r10,0x28(%rsp)
  0x00007f75704a1cae: mov    %r11,0x20(%rsp)
  0x00007f75704a1cb3: mov    %r12,0x18(%rsp)
  0x00007f75704a1cb8: mov    %r13,0x10(%rsp)
  0x00007f75704a1cbd: mov    %r14,0x8(%rsp)
  0x00007f75704a1cc2: mov    %r15,(%rsp)
  0x00007f75704a1cc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a1cd0: movabs $0x7f75704a1c70,%rsi
  0x00007f75704a1cda: mov    %rsp,%rdx
  0x00007f75704a1cdd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1ce1: callq  0x00007f75853729fa
  0x00007f75704a1ce6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a1ce7: mov    %rsp,%r11
  0x00007f75704a1cea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1cee: push   %rax
  0x00007f75704a1cef: mov    %r11,%rax
  0x00007f75704a1cf2: mov    0x50(%rbx),%r11
  0x00007f75704a1cf6: mov    0x18(%rax),%rsi
  0x00007f75704a1cfa: mov    0x10(%rax),%rdx
  0x00007f75704a1cfe: mov    0x8(%rax),%rcx
  0x00007f75704a1d02: mov    %rbx,0x258(%r15)
  0x00007f75704a1d09: mov    %rbx,%rax
  0x00007f75704a1d0c: jmpq   *%r11
  0x00007f75704a1d0f: mov    0x8(%rsi),%ebx
  0x00007f75704a1d12: shl    $0x3,%rbx
  0x00007f75704a1d16: cmp    0x10(%rax),%rbx
  0x00007f75704a1d1a: mov    0x8(%rax),%rbx
  0x00007f75704a1d1e: je     0x00007f75704a1d29
  0x00007f75704a1d24: jmpq   0x00007f757046ec40
  0x00007f75704a1d29: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a1d31: je     0x00007f75704a1e2c
  0x00007f75704a1d37: jmpq   0x00007f757046ec40
  0x00007f75704a1d3c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a1d44: je     0x00007f75704a1e2c
  0x00007f75704a1d4a: mov    %rsp,%r13
  0x00007f75704a1d4d: mov    (%rsp),%rax
  0x00007f75704a1d51: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1d55: pushfq 
  0x00007f75704a1d56: sub    $0x8,%rsp
  0x00007f75704a1d5a: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1d5f: sub    $0x80,%rsp
  0x00007f75704a1d66: mov    %rax,0x78(%rsp)
  0x00007f75704a1d6b: mov    %rcx,0x70(%rsp)
  0x00007f75704a1d70: mov    %rdx,0x68(%rsp)
  0x00007f75704a1d75: mov    %rbx,0x60(%rsp)
  0x00007f75704a1d7a: mov    %rbp,0x50(%rsp)
  0x00007f75704a1d7f: mov    %rsi,0x48(%rsp)
  0x00007f75704a1d84: mov    %rdi,0x40(%rsp)
  0x00007f75704a1d89: mov    %r8,0x38(%rsp)
  0x00007f75704a1d8e: mov    %r9,0x30(%rsp)
  0x00007f75704a1d93: mov    %r10,0x28(%rsp)
  0x00007f75704a1d98: mov    %r11,0x20(%rsp)
  0x00007f75704a1d9d: mov    %r12,0x18(%rsp)
  0x00007f75704a1da2: mov    %r13,0x10(%rsp)
  0x00007f75704a1da7: mov    %r14,0x8(%rsp)
  0x00007f75704a1dac: mov    %r15,(%rsp)
  0x00007f75704a1db0: sub    $0x200,%rsp
  0x00007f75704a1db7: fxsave64 (%rsp)
  0x00007f75704a1dbc: mov    %rbx,%rdi
  0x00007f75704a1dbf: mov    %rax,%rsi
  0x00007f75704a1dc2: callq  0x00007f7585522bca
  0x00007f75704a1dc7: fxrstor64 (%rsp)
  0x00007f75704a1dcc: add    $0x200,%rsp
  0x00007f75704a1dd3: mov    (%rsp),%r15
  0x00007f75704a1dd7: mov    0x8(%rsp),%r14
  0x00007f75704a1ddc: mov    0x10(%rsp),%r13
  0x00007f75704a1de1: mov    0x18(%rsp),%r12
  0x00007f75704a1de6: mov    0x20(%rsp),%r11
  0x00007f75704a1deb: mov    0x28(%rsp),%r10
  0x00007f75704a1df0: mov    0x30(%rsp),%r9
  0x00007f75704a1df5: mov    0x38(%rsp),%r8
  0x00007f75704a1dfa: mov    0x40(%rsp),%rdi
  0x00007f75704a1dff: mov    0x48(%rsp),%rsi
  0x00007f75704a1e04: mov    0x50(%rsp),%rbp
  0x00007f75704a1e09: mov    0x60(%rsp),%rbx
  0x00007f75704a1e0e: mov    0x68(%rsp),%rdx
  0x00007f75704a1e13: mov    0x70(%rsp),%rcx
  0x00007f75704a1e18: mov    0x78(%rsp),%rax
  0x00007f75704a1e1d: add    $0x80,%rsp
  0x00007f75704a1e24: add    $0x8,%rsp
  0x00007f75704a1e28: popfq  
  0x00007f75704a1e29: mov    %r13,%rsp
  0x00007f75704a1e2c: pop    %rax
  0x00007f75704a1e2d: mov    %rsp,%r13
  0x00007f75704a1e30: sub    $0x20,%rsp
  0x00007f75704a1e34: mov    %rax,(%rsp)
  0x00007f75704a1e38: mov    %rsi,0x18(%rsp)
  0x00007f75704a1e3d: mov    %rdx,0x10(%rsp)
  0x00007f75704a1e42: mov    %rcx,0x8(%rsp)
  0x00007f75704a1e47: mov    0x40(%rbx),%rcx
  0x00007f75704a1e4b: jmpq   *%rcx

AHE@0x00007f75800e8b38: 0xbbbb0000 i2c: 0x00007f75704a1f20 c2i: 0x00007f75704a2040 c2iUV: 0x00007f75704a2013
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class; (566 bytes generated)
c2i argument handler starts at 0x7f75704a2040
  0x00007f75704a1f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a1f24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a1f2e: cmp    %r11,%rax
  0x00007f75704a1f31: jbe    0x00007f75704a1f4a
  0x00007f75704a1f37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a1f41: cmp    %r11,%rax
  0x00007f75704a1f44: jb     0x00007f75704a1fe7
  0x00007f75704a1f4a: movabs $0x7f7570369420,%r11
  0x00007f75704a1f54: cmp    %r11,%rax
  0x00007f75704a1f57: jbe    0x00007f75704a1f70
  0x00007f75704a1f5d: movabs $0x7f757036de58,%r11
  0x00007f75704a1f67: cmp    %r11,%rax
  0x00007f75704a1f6a: jb     0x00007f75704a1fe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a1f70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a1f75: sub    $0x80,%rsp
  0x00007f75704a1f7c: mov    %rax,0x78(%rsp)
  0x00007f75704a1f81: mov    %rcx,0x70(%rsp)
  0x00007f75704a1f86: mov    %rdx,0x68(%rsp)
  0x00007f75704a1f8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a1f90: mov    %rbp,0x50(%rsp)
  0x00007f75704a1f95: mov    %rsi,0x48(%rsp)
  0x00007f75704a1f9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a1f9f: mov    %r8,0x38(%rsp)
  0x00007f75704a1fa4: mov    %r9,0x30(%rsp)
  0x00007f75704a1fa9: mov    %r10,0x28(%rsp)
  0x00007f75704a1fae: mov    %r11,0x20(%rsp)
  0x00007f75704a1fb3: mov    %r12,0x18(%rsp)
  0x00007f75704a1fb8: mov    %r13,0x10(%rsp)
  0x00007f75704a1fbd: mov    %r14,0x8(%rsp)
  0x00007f75704a1fc2: mov    %r15,(%rsp)
  0x00007f75704a1fc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a1fd0: movabs $0x7f75704a1f70,%rsi
  0x00007f75704a1fda: mov    %rsp,%rdx
  0x00007f75704a1fdd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1fe1: callq  0x00007f75853729fa
  0x00007f75704a1fe6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a1fe7: mov    %rsp,%r11
  0x00007f75704a1fea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a1fee: push   %rax
  0x00007f75704a1fef: mov    %r11,%rax
  0x00007f75704a1ff2: mov    0x50(%rbx),%r11
  0x00007f75704a1ff6: mov    0x20(%rax),%rsi
  0x00007f75704a1ffa: mov    0x18(%rax),%rdx
  0x00007f75704a1ffe: mov    0x10(%rax),%rcx
  0x00007f75704a2002: mov    0x8(%rax),%r8
  0x00007f75704a2006: mov    %rbx,0x258(%r15)
  0x00007f75704a200d: mov    %rbx,%rax
  0x00007f75704a2010: jmpq   *%r11
  0x00007f75704a2013: mov    0x8(%rsi),%ebx
  0x00007f75704a2016: shl    $0x3,%rbx
  0x00007f75704a201a: cmp    0x10(%rax),%rbx
  0x00007f75704a201e: mov    0x8(%rax),%rbx
  0x00007f75704a2022: je     0x00007f75704a202d
  0x00007f75704a2028: jmpq   0x00007f757046ec40
  0x00007f75704a202d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2035: je     0x00007f75704a2130
  0x00007f75704a203b: jmpq   0x00007f757046ec40
  0x00007f75704a2040: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2048: je     0x00007f75704a2130
  0x00007f75704a204e: mov    %rsp,%r13
  0x00007f75704a2051: mov    (%rsp),%rax
  0x00007f75704a2055: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2059: pushfq 
  0x00007f75704a205a: sub    $0x8,%rsp
  0x00007f75704a205e: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2063: sub    $0x80,%rsp
  0x00007f75704a206a: mov    %rax,0x78(%rsp)
  0x00007f75704a206f: mov    %rcx,0x70(%rsp)
  0x00007f75704a2074: mov    %rdx,0x68(%rsp)
  0x00007f75704a2079: mov    %rbx,0x60(%rsp)
  0x00007f75704a207e: mov    %rbp,0x50(%rsp)
  0x00007f75704a2083: mov    %rsi,0x48(%rsp)
  0x00007f75704a2088: mov    %rdi,0x40(%rsp)
  0x00007f75704a208d: mov    %r8,0x38(%rsp)
  0x00007f75704a2092: mov    %r9,0x30(%rsp)
  0x00007f75704a2097: mov    %r10,0x28(%rsp)
  0x00007f75704a209c: mov    %r11,0x20(%rsp)
  0x00007f75704a20a1: mov    %r12,0x18(%rsp)
  0x00007f75704a20a6: mov    %r13,0x10(%rsp)
  0x00007f75704a20ab: mov    %r14,0x8(%rsp)
  0x00007f75704a20b0: mov    %r15,(%rsp)
  0x00007f75704a20b4: sub    $0x200,%rsp
  0x00007f75704a20bb: fxsave64 (%rsp)
  0x00007f75704a20c0: mov    %rbx,%rdi
  0x00007f75704a20c3: mov    %rax,%rsi
  0x00007f75704a20c6: callq  0x00007f7585522bca
  0x00007f75704a20cb: fxrstor64 (%rsp)
  0x00007f75704a20d0: add    $0x200,%rsp
  0x00007f75704a20d7: mov    (%rsp),%r15
  0x00007f75704a20db: mov    0x8(%rsp),%r14
  0x00007f75704a20e0: mov    0x10(%rsp),%r13
  0x00007f75704a20e5: mov    0x18(%rsp),%r12
  0x00007f75704a20ea: mov    0x20(%rsp),%r11
  0x00007f75704a20ef: mov    0x28(%rsp),%r10
  0x00007f75704a20f4: mov    0x30(%rsp),%r9
  0x00007f75704a20f9: mov    0x38(%rsp),%r8
  0x00007f75704a20fe: mov    0x40(%rsp),%rdi
  0x00007f75704a2103: mov    0x48(%rsp),%rsi
  0x00007f75704a2108: mov    0x50(%rsp),%rbp
  0x00007f75704a210d: mov    0x60(%rsp),%rbx
  0x00007f75704a2112: mov    0x68(%rsp),%rdx
  0x00007f75704a2117: mov    0x70(%rsp),%rcx
  0x00007f75704a211c: mov    0x78(%rsp),%rax
  0x00007f75704a2121: add    $0x80,%rsp
  0x00007f75704a2128: add    $0x8,%rsp
  0x00007f75704a212c: popfq  
  0x00007f75704a212d: mov    %r13,%rsp
  0x00007f75704a2130: pop    %rax
  0x00007f75704a2131: mov    %rsp,%r13
  0x00007f75704a2134: sub    $0x30,%rsp
  0x00007f75704a2138: mov    %rax,(%rsp)
  0x00007f75704a213c: mov    %rsi,0x20(%rsp)
  0x00007f75704a2141: mov    %rdx,0x18(%rsp)
  0x00007f75704a2146: mov    %rcx,0x10(%rsp)
  0x00007f75704a214b: mov    %r8,0x8(%rsp)
  0x00007f75704a2150: mov    0x40(%rbx),%rcx
  0x00007f75704a2154: jmpq   *%rcx

AHE@0x00007f75800e8b80: 0xbbbaa000 i2c: 0x00007f75704a2220 c2i: 0x00007f75704a2344 c2iUV: 0x00007f75704a2317
i2c argument handler #0 for: receiver (Ljava/lang/String;[BII)Ljava/lang/Class; (575 bytes generated)
c2i argument handler starts at 0x7f75704a2344
  0x00007f75704a2220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a2224: movabs $0x7f757036e3e0,%r11
  0x00007f75704a222e: cmp    %r11,%rax
  0x00007f75704a2231: jbe    0x00007f75704a224a
  0x00007f75704a2237: movabs $0x7f757046e3e0,%r11
  0x00007f75704a2241: cmp    %r11,%rax
  0x00007f75704a2244: jb     0x00007f75704a22e7
  0x00007f75704a224a: movabs $0x7f7570369420,%r11
  0x00007f75704a2254: cmp    %r11,%rax
  0x00007f75704a2257: jbe    0x00007f75704a2270
  0x00007f75704a225d: movabs $0x7f757036de58,%r11
  0x00007f75704a2267: cmp    %r11,%rax
  0x00007f75704a226a: jb     0x00007f75704a22e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a2270: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2275: sub    $0x80,%rsp
  0x00007f75704a227c: mov    %rax,0x78(%rsp)
  0x00007f75704a2281: mov    %rcx,0x70(%rsp)
  0x00007f75704a2286: mov    %rdx,0x68(%rsp)
  0x00007f75704a228b: mov    %rbx,0x60(%rsp)
  0x00007f75704a2290: mov    %rbp,0x50(%rsp)
  0x00007f75704a2295: mov    %rsi,0x48(%rsp)
  0x00007f75704a229a: mov    %rdi,0x40(%rsp)
  0x00007f75704a229f: mov    %r8,0x38(%rsp)
  0x00007f75704a22a4: mov    %r9,0x30(%rsp)
  0x00007f75704a22a9: mov    %r10,0x28(%rsp)
  0x00007f75704a22ae: mov    %r11,0x20(%rsp)
  0x00007f75704a22b3: mov    %r12,0x18(%rsp)
  0x00007f75704a22b8: mov    %r13,0x10(%rsp)
  0x00007f75704a22bd: mov    %r14,0x8(%rsp)
  0x00007f75704a22c2: mov    %r15,(%rsp)
  0x00007f75704a22c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a22d0: movabs $0x7f75704a2270,%rsi
  0x00007f75704a22da: mov    %rsp,%rdx
  0x00007f75704a22dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a22e1: callq  0x00007f75853729fa
  0x00007f75704a22e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a22e7: mov    %rsp,%r11
  0x00007f75704a22ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a22ee: push   %rax
  0x00007f75704a22ef: mov    %r11,%rax
  0x00007f75704a22f2: mov    0x50(%rbx),%r11
  0x00007f75704a22f6: mov    0x28(%rax),%rsi
  0x00007f75704a22fa: mov    0x20(%rax),%rdx
  0x00007f75704a22fe: mov    0x18(%rax),%rcx
  0x00007f75704a2302: mov    0x10(%rax),%r8d
  0x00007f75704a2306: mov    0x8(%rax),%r9d
  0x00007f75704a230a: mov    %rbx,0x258(%r15)
  0x00007f75704a2311: mov    %rbx,%rax
  0x00007f75704a2314: jmpq   *%r11
  0x00007f75704a2317: mov    0x8(%rsi),%ebx
  0x00007f75704a231a: shl    $0x3,%rbx
  0x00007f75704a231e: cmp    0x10(%rax),%rbx
  0x00007f75704a2322: mov    0x8(%rax),%rbx
  0x00007f75704a2326: je     0x00007f75704a2331
  0x00007f75704a232c: jmpq   0x00007f757046ec40
  0x00007f75704a2331: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2339: je     0x00007f75704a2434
  0x00007f75704a233f: jmpq   0x00007f757046ec40
  0x00007f75704a2344: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a234c: je     0x00007f75704a2434
  0x00007f75704a2352: mov    %rsp,%r13
  0x00007f75704a2355: mov    (%rsp),%rax
  0x00007f75704a2359: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a235d: pushfq 
  0x00007f75704a235e: sub    $0x8,%rsp
  0x00007f75704a2362: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2367: sub    $0x80,%rsp
  0x00007f75704a236e: mov    %rax,0x78(%rsp)
  0x00007f75704a2373: mov    %rcx,0x70(%rsp)
  0x00007f75704a2378: mov    %rdx,0x68(%rsp)
  0x00007f75704a237d: mov    %rbx,0x60(%rsp)
  0x00007f75704a2382: mov    %rbp,0x50(%rsp)
  0x00007f75704a2387: mov    %rsi,0x48(%rsp)
  0x00007f75704a238c: mov    %rdi,0x40(%rsp)
  0x00007f75704a2391: mov    %r8,0x38(%rsp)
  0x00007f75704a2396: mov    %r9,0x30(%rsp)
  0x00007f75704a239b: mov    %r10,0x28(%rsp)
  0x00007f75704a23a0: mov    %r11,0x20(%rsp)
  0x00007f75704a23a5: mov    %r12,0x18(%rsp)
  0x00007f75704a23aa: mov    %r13,0x10(%rsp)
  0x00007f75704a23af: mov    %r14,0x8(%rsp)
  0x00007f75704a23b4: mov    %r15,(%rsp)
  0x00007f75704a23b8: sub    $0x200,%rsp
  0x00007f75704a23bf: fxsave64 (%rsp)
  0x00007f75704a23c4: mov    %rbx,%rdi
  0x00007f75704a23c7: mov    %rax,%rsi
  0x00007f75704a23ca: callq  0x00007f7585522bca
  0x00007f75704a23cf: fxrstor64 (%rsp)
  0x00007f75704a23d4: add    $0x200,%rsp
  0x00007f75704a23db: mov    (%rsp),%r15
  0x00007f75704a23df: mov    0x8(%rsp),%r14
  0x00007f75704a23e4: mov    0x10(%rsp),%r13
  0x00007f75704a23e9: mov    0x18(%rsp),%r12
  0x00007f75704a23ee: mov    0x20(%rsp),%r11
  0x00007f75704a23f3: mov    0x28(%rsp),%r10
  0x00007f75704a23f8: mov    0x30(%rsp),%r9
  0x00007f75704a23fd: mov    0x38(%rsp),%r8
  0x00007f75704a2402: mov    0x40(%rsp),%rdi
  0x00007f75704a2407: mov    0x48(%rsp),%rsi
  0x00007f75704a240c: mov    0x50(%rsp),%rbp
  0x00007f75704a2411: mov    0x60(%rsp),%rbx
  0x00007f75704a2416: mov    0x68(%rsp),%rdx
  0x00007f75704a241b: mov    0x70(%rsp),%rcx
  0x00007f75704a2420: mov    0x78(%rsp),%rax
  0x00007f75704a2425: add    $0x80,%rsp
  0x00007f75704a242c: add    $0x8,%rsp
  0x00007f75704a2430: popfq  
  0x00007f75704a2431: mov    %r13,%rsp
  0x00007f75704a2434: pop    %rax
  0x00007f75704a2435: mov    %rsp,%r13
  0x00007f75704a2438: sub    $0x30,%rsp
  0x00007f75704a243c: mov    %rax,(%rsp)
  0x00007f75704a2440: mov    %rsi,0x28(%rsp)
  0x00007f75704a2445: mov    %rdx,0x20(%rsp)
  0x00007f75704a244a: mov    %rcx,0x18(%rsp)
  0x00007f75704a244f: mov    %r8d,0x10(%rsp)
  0x00007f75704a2454: mov    %r9d,0x8(%rsp)
  0x00007f75704a2459: mov    0x40(%rbx),%rcx
  0x00007f75704a245d: jmpq   *%rcx

AHE@0x00007f75800e8bc8: 0xbbbaab00 i2c: 0x00007f75704a2520 c2i: 0x00007f75704a2648 c2iUV: 0x00007f75704a261b
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; (584 bytes generated)
c2i argument handler starts at 0x7f75704a2648
  0x00007f75704a2520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a2524: movabs $0x7f757036e3e0,%r11
  0x00007f75704a252e: cmp    %r11,%rax
  0x00007f75704a2531: jbe    0x00007f75704a254a
  0x00007f75704a2537: movabs $0x7f757046e3e0,%r11
  0x00007f75704a2541: cmp    %r11,%rax
  0x00007f75704a2544: jb     0x00007f75704a25e7
  0x00007f75704a254a: movabs $0x7f7570369420,%r11
  0x00007f75704a2554: cmp    %r11,%rax
  0x00007f75704a2557: jbe    0x00007f75704a2570
  0x00007f75704a255d: movabs $0x7f757036de58,%r11
  0x00007f75704a2567: cmp    %r11,%rax
  0x00007f75704a256a: jb     0x00007f75704a25e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a2570: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2575: sub    $0x80,%rsp
  0x00007f75704a257c: mov    %rax,0x78(%rsp)
  0x00007f75704a2581: mov    %rcx,0x70(%rsp)
  0x00007f75704a2586: mov    %rdx,0x68(%rsp)
  0x00007f75704a258b: mov    %rbx,0x60(%rsp)
  0x00007f75704a2590: mov    %rbp,0x50(%rsp)
  0x00007f75704a2595: mov    %rsi,0x48(%rsp)
  0x00007f75704a259a: mov    %rdi,0x40(%rsp)
  0x00007f75704a259f: mov    %r8,0x38(%rsp)
  0x00007f75704a25a4: mov    %r9,0x30(%rsp)
  0x00007f75704a25a9: mov    %r10,0x28(%rsp)
  0x00007f75704a25ae: mov    %r11,0x20(%rsp)
  0x00007f75704a25b3: mov    %r12,0x18(%rsp)
  0x00007f75704a25b8: mov    %r13,0x10(%rsp)
  0x00007f75704a25bd: mov    %r14,0x8(%rsp)
  0x00007f75704a25c2: mov    %r15,(%rsp)
  0x00007f75704a25c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a25d0: movabs $0x7f75704a2570,%rsi
  0x00007f75704a25da: mov    %rsp,%rdx
  0x00007f75704a25dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a25e1: callq  0x00007f75853729fa
  0x00007f75704a25e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a25e7: mov    %rsp,%r11
  0x00007f75704a25ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a25ee: push   %rax
  0x00007f75704a25ef: mov    %r11,%rax
  0x00007f75704a25f2: mov    0x50(%rbx),%r11
  0x00007f75704a25f6: mov    0x30(%rax),%rsi
  0x00007f75704a25fa: mov    0x28(%rax),%rdx
  0x00007f75704a25fe: mov    0x20(%rax),%rcx
  0x00007f75704a2602: mov    0x18(%rax),%r8d
  0x00007f75704a2606: mov    0x10(%rax),%r9d
  0x00007f75704a260a: mov    0x8(%rax),%rdi
  0x00007f75704a260e: mov    %rbx,0x258(%r15)
  0x00007f75704a2615: mov    %rbx,%rax
  0x00007f75704a2618: jmpq   *%r11
  0x00007f75704a261b: mov    0x8(%rsi),%ebx
  0x00007f75704a261e: shl    $0x3,%rbx
  0x00007f75704a2622: cmp    0x10(%rax),%rbx
  0x00007f75704a2626: mov    0x8(%rax),%rbx
  0x00007f75704a262a: je     0x00007f75704a2635
  0x00007f75704a2630: jmpq   0x00007f757046ec40
  0x00007f75704a2635: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a263d: je     0x00007f75704a2738
  0x00007f75704a2643: jmpq   0x00007f757046ec40
  0x00007f75704a2648: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2650: je     0x00007f75704a2738
  0x00007f75704a2656: mov    %rsp,%r13
  0x00007f75704a2659: mov    (%rsp),%rax
  0x00007f75704a265d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2661: pushfq 
  0x00007f75704a2662: sub    $0x8,%rsp
  0x00007f75704a2666: mov    %rsp,-0x28(%rsp)
  0x00007f75704a266b: sub    $0x80,%rsp
  0x00007f75704a2672: mov    %rax,0x78(%rsp)
  0x00007f75704a2677: mov    %rcx,0x70(%rsp)
  0x00007f75704a267c: mov    %rdx,0x68(%rsp)
  0x00007f75704a2681: mov    %rbx,0x60(%rsp)
  0x00007f75704a2686: mov    %rbp,0x50(%rsp)
  0x00007f75704a268b: mov    %rsi,0x48(%rsp)
  0x00007f75704a2690: mov    %rdi,0x40(%rsp)
  0x00007f75704a2695: mov    %r8,0x38(%rsp)
  0x00007f75704a269a: mov    %r9,0x30(%rsp)
  0x00007f75704a269f: mov    %r10,0x28(%rsp)
  0x00007f75704a26a4: mov    %r11,0x20(%rsp)
  0x00007f75704a26a9: mov    %r12,0x18(%rsp)
  0x00007f75704a26ae: mov    %r13,0x10(%rsp)
  0x00007f75704a26b3: mov    %r14,0x8(%rsp)
  0x00007f75704a26b8: mov    %r15,(%rsp)
  0x00007f75704a26bc: sub    $0x200,%rsp
  0x00007f75704a26c3: fxsave64 (%rsp)
  0x00007f75704a26c8: mov    %rbx,%rdi
  0x00007f75704a26cb: mov    %rax,%rsi
  0x00007f75704a26ce: callq  0x00007f7585522bca
  0x00007f75704a26d3: fxrstor64 (%rsp)
  0x00007f75704a26d8: add    $0x200,%rsp
  0x00007f75704a26df: mov    (%rsp),%r15
  0x00007f75704a26e3: mov    0x8(%rsp),%r14
  0x00007f75704a26e8: mov    0x10(%rsp),%r13
  0x00007f75704a26ed: mov    0x18(%rsp),%r12
  0x00007f75704a26f2: mov    0x20(%rsp),%r11
  0x00007f75704a26f7: mov    0x28(%rsp),%r10
  0x00007f75704a26fc: mov    0x30(%rsp),%r9
  0x00007f75704a2701: mov    0x38(%rsp),%r8
  0x00007f75704a2706: mov    0x40(%rsp),%rdi
  0x00007f75704a270b: mov    0x48(%rsp),%rsi
  0x00007f75704a2710: mov    0x50(%rsp),%rbp
  0x00007f75704a2715: mov    0x60(%rsp),%rbx
  0x00007f75704a271a: mov    0x68(%rsp),%rdx
  0x00007f75704a271f: mov    0x70(%rsp),%rcx
  0x00007f75704a2724: mov    0x78(%rsp),%rax
  0x00007f75704a2729: add    $0x80,%rsp
  0x00007f75704a2730: add    $0x8,%rsp
  0x00007f75704a2734: popfq  
  0x00007f75704a2735: mov    %r13,%rsp
  0x00007f75704a2738: pop    %rax
  0x00007f75704a2739: mov    %rsp,%r13
  0x00007f75704a273c: sub    $0x40,%rsp
  0x00007f75704a2740: mov    %rax,(%rsp)
  0x00007f75704a2744: mov    %rsi,0x30(%rsp)
  0x00007f75704a2749: mov    %rdx,0x28(%rsp)
  0x00007f75704a274e: mov    %rcx,0x20(%rsp)
  0x00007f75704a2753: mov    %r8d,0x18(%rsp)
  0x00007f75704a2758: mov    %r9d,0x10(%rsp)
  0x00007f75704a275d: mov    %rdi,0x8(%rsp)
  0x00007f75704a2762: mov    0x40(%rbx),%rcx
  0x00007f75704a2766: jmpq   *%rcx

AHE@0x00007f75800e8c10: 0xbbaa0000 i2c: 0x00007f75704a2820 c2i: 0x00007f75704a293f c2iUV: 0x00007f75704a2912
i2c argument handler #0 for: receiver ([BII)Ljava/lang/Class; (564 bytes generated)
c2i argument handler starts at 0x7f75704a293f
  0x00007f75704a2820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a2824: movabs $0x7f757036e3e0,%r11
  0x00007f75704a282e: cmp    %r11,%rax
  0x00007f75704a2831: jbe    0x00007f75704a284a
  0x00007f75704a2837: movabs $0x7f757046e3e0,%r11
  0x00007f75704a2841: cmp    %r11,%rax
  0x00007f75704a2844: jb     0x00007f75704a28e7
  0x00007f75704a284a: movabs $0x7f7570369420,%r11
  0x00007f75704a2854: cmp    %r11,%rax
  0x00007f75704a2857: jbe    0x00007f75704a2870
  0x00007f75704a285d: movabs $0x7f757036de58,%r11
  0x00007f75704a2867: cmp    %r11,%rax
  0x00007f75704a286a: jb     0x00007f75704a28e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a2870: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2875: sub    $0x80,%rsp
  0x00007f75704a287c: mov    %rax,0x78(%rsp)
  0x00007f75704a2881: mov    %rcx,0x70(%rsp)
  0x00007f75704a2886: mov    %rdx,0x68(%rsp)
  0x00007f75704a288b: mov    %rbx,0x60(%rsp)
  0x00007f75704a2890: mov    %rbp,0x50(%rsp)
  0x00007f75704a2895: mov    %rsi,0x48(%rsp)
  0x00007f75704a289a: mov    %rdi,0x40(%rsp)
  0x00007f75704a289f: mov    %r8,0x38(%rsp)
  0x00007f75704a28a4: mov    %r9,0x30(%rsp)
  0x00007f75704a28a9: mov    %r10,0x28(%rsp)
  0x00007f75704a28ae: mov    %r11,0x20(%rsp)
  0x00007f75704a28b3: mov    %r12,0x18(%rsp)
  0x00007f75704a28b8: mov    %r13,0x10(%rsp)
  0x00007f75704a28bd: mov    %r14,0x8(%rsp)
  0x00007f75704a28c2: mov    %r15,(%rsp)
  0x00007f75704a28c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a28d0: movabs $0x7f75704a2870,%rsi
  0x00007f75704a28da: mov    %rsp,%rdx
  0x00007f75704a28dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a28e1: callq  0x00007f75853729fa
  0x00007f75704a28e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a28e7: mov    %rsp,%r11
  0x00007f75704a28ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a28ee: push   %rax
  0x00007f75704a28ef: mov    %r11,%rax
  0x00007f75704a28f2: mov    0x50(%rbx),%r11
  0x00007f75704a28f6: mov    0x20(%rax),%rsi
  0x00007f75704a28fa: mov    0x18(%rax),%rdx
  0x00007f75704a28fe: mov    0x10(%rax),%ecx
  0x00007f75704a2901: mov    0x8(%rax),%r8d
  0x00007f75704a2905: mov    %rbx,0x258(%r15)
  0x00007f75704a290c: mov    %rbx,%rax
  0x00007f75704a290f: jmpq   *%r11
  0x00007f75704a2912: mov    0x8(%rsi),%ebx
  0x00007f75704a2915: shl    $0x3,%rbx
  0x00007f75704a2919: cmp    0x10(%rax),%rbx
  0x00007f75704a291d: mov    0x8(%rax),%rbx
  0x00007f75704a2921: je     0x00007f75704a292c
  0x00007f75704a2927: jmpq   0x00007f757046ec40
  0x00007f75704a292c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2934: je     0x00007f75704a2a2f
  0x00007f75704a293a: jmpq   0x00007f757046ec40
  0x00007f75704a293f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2947: je     0x00007f75704a2a2f
  0x00007f75704a294d: mov    %rsp,%r13
  0x00007f75704a2950: mov    (%rsp),%rax
  0x00007f75704a2954: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2958: pushfq 
  0x00007f75704a2959: sub    $0x8,%rsp
  0x00007f75704a295d: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2962: sub    $0x80,%rsp
  0x00007f75704a2969: mov    %rax,0x78(%rsp)
  0x00007f75704a296e: mov    %rcx,0x70(%rsp)
  0x00007f75704a2973: mov    %rdx,0x68(%rsp)
  0x00007f75704a2978: mov    %rbx,0x60(%rsp)
  0x00007f75704a297d: mov    %rbp,0x50(%rsp)
  0x00007f75704a2982: mov    %rsi,0x48(%rsp)
  0x00007f75704a2987: mov    %rdi,0x40(%rsp)
  0x00007f75704a298c: mov    %r8,0x38(%rsp)
  0x00007f75704a2991: mov    %r9,0x30(%rsp)
  0x00007f75704a2996: mov    %r10,0x28(%rsp)
  0x00007f75704a299b: mov    %r11,0x20(%rsp)
  0x00007f75704a29a0: mov    %r12,0x18(%rsp)
  0x00007f75704a29a5: mov    %r13,0x10(%rsp)
  0x00007f75704a29aa: mov    %r14,0x8(%rsp)
  0x00007f75704a29af: mov    %r15,(%rsp)
  0x00007f75704a29b3: sub    $0x200,%rsp
  0x00007f75704a29ba: fxsave64 (%rsp)
  0x00007f75704a29bf: mov    %rbx,%rdi
  0x00007f75704a29c2: mov    %rax,%rsi
  0x00007f75704a29c5: callq  0x00007f7585522bca
  0x00007f75704a29ca: fxrstor64 (%rsp)
  0x00007f75704a29cf: add    $0x200,%rsp
  0x00007f75704a29d6: mov    (%rsp),%r15
  0x00007f75704a29da: mov    0x8(%rsp),%r14
  0x00007f75704a29df: mov    0x10(%rsp),%r13
  0x00007f75704a29e4: mov    0x18(%rsp),%r12
  0x00007f75704a29e9: mov    0x20(%rsp),%r11
  0x00007f75704a29ee: mov    0x28(%rsp),%r10
  0x00007f75704a29f3: mov    0x30(%rsp),%r9
  0x00007f75704a29f8: mov    0x38(%rsp),%r8
  0x00007f75704a29fd: mov    0x40(%rsp),%rdi
  0x00007f75704a2a02: mov    0x48(%rsp),%rsi
  0x00007f75704a2a07: mov    0x50(%rsp),%rbp
  0x00007f75704a2a0c: mov    0x60(%rsp),%rbx
  0x00007f75704a2a11: mov    0x68(%rsp),%rdx
  0x00007f75704a2a16: mov    0x70(%rsp),%rcx
  0x00007f75704a2a1b: mov    0x78(%rsp),%rax
  0x00007f75704a2a20: add    $0x80,%rsp
  0x00007f75704a2a27: add    $0x8,%rsp
  0x00007f75704a2a2b: popfq  
  0x00007f75704a2a2c: mov    %r13,%rsp
  0x00007f75704a2a2f: pop    %rax
  0x00007f75704a2a30: mov    %rsp,%r13
  0x00007f75704a2a33: sub    $0x30,%rsp
  0x00007f75704a2a37: mov    %rax,(%rsp)
  0x00007f75704a2a3b: mov    %rsi,0x20(%rsp)
  0x00007f75704a2a40: mov    %rdx,0x18(%rsp)
  0x00007f75704a2a45: mov    %ecx,0x10(%rsp)
  0x00007f75704a2a49: mov    %r8d,0x8(%rsp)
  0x00007f75704a2a4e: mov    0x40(%rbx),%rcx
  0x00007f75704a2a52: jmpq   *%rcx

AHE@0x00007f75800e8c58: 0xbb000000 i2c: 0x00007f75704a2b20 c2i: 0x00007f75704a2c38 c2iUV: 0x00007f75704a2c0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f75704a2c38
  0x00007f75704a2b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a2b24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a2b2e: cmp    %r11,%rax
  0x00007f75704a2b31: jbe    0x00007f75704a2b4a
  0x00007f75704a2b37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a2b41: cmp    %r11,%rax
  0x00007f75704a2b44: jb     0x00007f75704a2be7
  0x00007f75704a2b4a: movabs $0x7f7570369420,%r11
  0x00007f75704a2b54: cmp    %r11,%rax
  0x00007f75704a2b57: jbe    0x00007f75704a2b70
  0x00007f75704a2b5d: movabs $0x7f757036de58,%r11
  0x00007f75704a2b67: cmp    %r11,%rax
  0x00007f75704a2b6a: jb     0x00007f75704a2be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a2b70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2b75: sub    $0x80,%rsp
  0x00007f75704a2b7c: mov    %rax,0x78(%rsp)
  0x00007f75704a2b81: mov    %rcx,0x70(%rsp)
  0x00007f75704a2b86: mov    %rdx,0x68(%rsp)
  0x00007f75704a2b8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a2b90: mov    %rbp,0x50(%rsp)
  0x00007f75704a2b95: mov    %rsi,0x48(%rsp)
  0x00007f75704a2b9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a2b9f: mov    %r8,0x38(%rsp)
  0x00007f75704a2ba4: mov    %r9,0x30(%rsp)
  0x00007f75704a2ba9: mov    %r10,0x28(%rsp)
  0x00007f75704a2bae: mov    %r11,0x20(%rsp)
  0x00007f75704a2bb3: mov    %r12,0x18(%rsp)
  0x00007f75704a2bb8: mov    %r13,0x10(%rsp)
  0x00007f75704a2bbd: mov    %r14,0x8(%rsp)
  0x00007f75704a2bc2: mov    %r15,(%rsp)
  0x00007f75704a2bc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a2bd0: movabs $0x7f75704a2b70,%rsi
  0x00007f75704a2bda: mov    %rsp,%rdx
  0x00007f75704a2bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2be1: callq  0x00007f75853729fa
  0x00007f75704a2be6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a2be7: mov    %rsp,%r11
  0x00007f75704a2bea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2bee: push   %rax
  0x00007f75704a2bef: mov    %r11,%rax
  0x00007f75704a2bf2: mov    0x50(%rbx),%r11
  0x00007f75704a2bf6: mov    0x10(%rax),%rsi
  0x00007f75704a2bfa: mov    0x8(%rax),%rdx
  0x00007f75704a2bfe: mov    %rbx,0x258(%r15)
  0x00007f75704a2c05: mov    %rbx,%rax
  0x00007f75704a2c08: jmpq   *%r11
  0x00007f75704a2c0b: mov    0x8(%rsi),%ebx
  0x00007f75704a2c0e: shl    $0x3,%rbx
  0x00007f75704a2c12: cmp    0x10(%rax),%rbx
  0x00007f75704a2c16: mov    0x8(%rax),%rbx
  0x00007f75704a2c1a: je     0x00007f75704a2c25
  0x00007f75704a2c20: jmpq   0x00007f757046ec40
  0x00007f75704a2c25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2c2d: je     0x00007f75704a2d28
  0x00007f75704a2c33: jmpq   0x00007f757046ec40
  0x00007f75704a2c38: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2c40: je     0x00007f75704a2d28
  0x00007f75704a2c46: mov    %rsp,%r13
  0x00007f75704a2c49: mov    (%rsp),%rax
  0x00007f75704a2c4d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2c51: pushfq 
  0x00007f75704a2c52: sub    $0x8,%rsp
  0x00007f75704a2c56: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2c5b: sub    $0x80,%rsp
  0x00007f75704a2c62: mov    %rax,0x78(%rsp)
  0x00007f75704a2c67: mov    %rcx,0x70(%rsp)
  0x00007f75704a2c6c: mov    %rdx,0x68(%rsp)
  0x00007f75704a2c71: mov    %rbx,0x60(%rsp)
  0x00007f75704a2c76: mov    %rbp,0x50(%rsp)
  0x00007f75704a2c7b: mov    %rsi,0x48(%rsp)
  0x00007f75704a2c80: mov    %rdi,0x40(%rsp)
  0x00007f75704a2c85: mov    %r8,0x38(%rsp)
  0x00007f75704a2c8a: mov    %r9,0x30(%rsp)
  0x00007f75704a2c8f: mov    %r10,0x28(%rsp)
  0x00007f75704a2c94: mov    %r11,0x20(%rsp)
  0x00007f75704a2c99: mov    %r12,0x18(%rsp)
  0x00007f75704a2c9e: mov    %r13,0x10(%rsp)
  0x00007f75704a2ca3: mov    %r14,0x8(%rsp)
  0x00007f75704a2ca8: mov    %r15,(%rsp)
  0x00007f75704a2cac: sub    $0x200,%rsp
  0x00007f75704a2cb3: fxsave64 (%rsp)
  0x00007f75704a2cb8: mov    %rbx,%rdi
  0x00007f75704a2cbb: mov    %rax,%rsi
  0x00007f75704a2cbe: callq  0x00007f7585522bca
  0x00007f75704a2cc3: fxrstor64 (%rsp)
  0x00007f75704a2cc8: add    $0x200,%rsp
  0x00007f75704a2ccf: mov    (%rsp),%r15
  0x00007f75704a2cd3: mov    0x8(%rsp),%r14
  0x00007f75704a2cd8: mov    0x10(%rsp),%r13
  0x00007f75704a2cdd: mov    0x18(%rsp),%r12
  0x00007f75704a2ce2: mov    0x20(%rsp),%r11
  0x00007f75704a2ce7: mov    0x28(%rsp),%r10
  0x00007f75704a2cec: mov    0x30(%rsp),%r9
  0x00007f75704a2cf1: mov    0x38(%rsp),%r8
  0x00007f75704a2cf6: mov    0x40(%rsp),%rdi
  0x00007f75704a2cfb: mov    0x48(%rsp),%rsi
  0x00007f75704a2d00: mov    0x50(%rsp),%rbp
  0x00007f75704a2d05: mov    0x60(%rsp),%rbx
  0x00007f75704a2d0a: mov    0x68(%rsp),%rdx
  0x00007f75704a2d0f: mov    0x70(%rsp),%rcx
  0x00007f75704a2d14: mov    0x78(%rsp),%rax
  0x00007f75704a2d19: add    $0x80,%rsp
  0x00007f75704a2d20: add    $0x8,%rsp
  0x00007f75704a2d24: popfq  
  0x00007f75704a2d25: mov    %r13,%rsp
  0x00007f75704a2d28: pop    %rax
  0x00007f75704a2d29: mov    %rsp,%r13
  0x00007f75704a2d2c: sub    $0x20,%rsp
  0x00007f75704a2d30: mov    %rax,(%rsp)
  0x00007f75704a2d34: mov    %rsi,0x10(%rsp)
  0x00007f75704a2d39: mov    %rdx,0x8(%rsp)
  0x00007f75704a2d3e: mov    0x40(%rbx),%rcx
  0x00007f75704a2d42: jmpq   *%rcx

AHE@0x00007f75800e8ca0: 0xbb000000 i2c: 0x00007f75704a2e20 c2i: 0x00007f75704a2f38 c2iUV: 0x00007f75704a2f0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Object; (548 bytes generated)
c2i argument handler starts at 0x7f75704a2f38
  0x00007f75704a2e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a2e24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a2e2e: cmp    %r11,%rax
  0x00007f75704a2e31: jbe    0x00007f75704a2e4a
  0x00007f75704a2e37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a2e41: cmp    %r11,%rax
  0x00007f75704a2e44: jb     0x00007f75704a2ee7
  0x00007f75704a2e4a: movabs $0x7f7570369420,%r11
  0x00007f75704a2e54: cmp    %r11,%rax
  0x00007f75704a2e57: jbe    0x00007f75704a2e70
  0x00007f75704a2e5d: movabs $0x7f757036de58,%r11
  0x00007f75704a2e67: cmp    %r11,%rax
  0x00007f75704a2e6a: jb     0x00007f75704a2ee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a2e70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2e75: sub    $0x80,%rsp
  0x00007f75704a2e7c: mov    %rax,0x78(%rsp)
  0x00007f75704a2e81: mov    %rcx,0x70(%rsp)
  0x00007f75704a2e86: mov    %rdx,0x68(%rsp)
  0x00007f75704a2e8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a2e90: mov    %rbp,0x50(%rsp)
  0x00007f75704a2e95: mov    %rsi,0x48(%rsp)
  0x00007f75704a2e9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a2e9f: mov    %r8,0x38(%rsp)
  0x00007f75704a2ea4: mov    %r9,0x30(%rsp)
  0x00007f75704a2ea9: mov    %r10,0x28(%rsp)
  0x00007f75704a2eae: mov    %r11,0x20(%rsp)
  0x00007f75704a2eb3: mov    %r12,0x18(%rsp)
  0x00007f75704a2eb8: mov    %r13,0x10(%rsp)
  0x00007f75704a2ebd: mov    %r14,0x8(%rsp)
  0x00007f75704a2ec2: mov    %r15,(%rsp)
  0x00007f75704a2ec6: movabs $0x7f758592f470,%rdi
  0x00007f75704a2ed0: movabs $0x7f75704a2e70,%rsi
  0x00007f75704a2eda: mov    %rsp,%rdx
  0x00007f75704a2edd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2ee1: callq  0x00007f75853729fa
  0x00007f75704a2ee6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a2ee7: mov    %rsp,%r11
  0x00007f75704a2eea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2eee: push   %rax
  0x00007f75704a2eef: mov    %r11,%rax
  0x00007f75704a2ef2: mov    0x50(%rbx),%r11
  0x00007f75704a2ef6: mov    0x10(%rax),%rsi
  0x00007f75704a2efa: mov    0x8(%rax),%rdx
  0x00007f75704a2efe: mov    %rbx,0x258(%r15)
  0x00007f75704a2f05: mov    %rbx,%rax
  0x00007f75704a2f08: jmpq   *%r11
  0x00007f75704a2f0b: mov    0x8(%rsi),%ebx
  0x00007f75704a2f0e: shl    $0x3,%rbx
  0x00007f75704a2f12: cmp    0x10(%rax),%rbx
  0x00007f75704a2f16: mov    0x8(%rax),%rbx
  0x00007f75704a2f1a: je     0x00007f75704a2f25
  0x00007f75704a2f20: jmpq   0x00007f757046ec40
  0x00007f75704a2f25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2f2d: je     0x00007f75704a3028
  0x00007f75704a2f33: jmpq   0x00007f757046ec40
  0x00007f75704a2f38: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a2f40: je     0x00007f75704a3028
  0x00007f75704a2f46: mov    %rsp,%r13
  0x00007f75704a2f49: mov    (%rsp),%rax
  0x00007f75704a2f4d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a2f51: pushfq 
  0x00007f75704a2f52: sub    $0x8,%rsp
  0x00007f75704a2f56: mov    %rsp,-0x28(%rsp)
  0x00007f75704a2f5b: sub    $0x80,%rsp
  0x00007f75704a2f62: mov    %rax,0x78(%rsp)
  0x00007f75704a2f67: mov    %rcx,0x70(%rsp)
  0x00007f75704a2f6c: mov    %rdx,0x68(%rsp)
  0x00007f75704a2f71: mov    %rbx,0x60(%rsp)
  0x00007f75704a2f76: mov    %rbp,0x50(%rsp)
  0x00007f75704a2f7b: mov    %rsi,0x48(%rsp)
  0x00007f75704a2f80: mov    %rdi,0x40(%rsp)
  0x00007f75704a2f85: mov    %r8,0x38(%rsp)
  0x00007f75704a2f8a: mov    %r9,0x30(%rsp)
  0x00007f75704a2f8f: mov    %r10,0x28(%rsp)
  0x00007f75704a2f94: mov    %r11,0x20(%rsp)
  0x00007f75704a2f99: mov    %r12,0x18(%rsp)
  0x00007f75704a2f9e: mov    %r13,0x10(%rsp)
  0x00007f75704a2fa3: mov    %r14,0x8(%rsp)
  0x00007f75704a2fa8: mov    %r15,(%rsp)
  0x00007f75704a2fac: sub    $0x200,%rsp
  0x00007f75704a2fb3: fxsave64 (%rsp)
  0x00007f75704a2fb8: mov    %rbx,%rdi
  0x00007f75704a2fbb: mov    %rax,%rsi
  0x00007f75704a2fbe: callq  0x00007f7585522bca
  0x00007f75704a2fc3: fxrstor64 (%rsp)
  0x00007f75704a2fc8: add    $0x200,%rsp
  0x00007f75704a2fcf: mov    (%rsp),%r15
  0x00007f75704a2fd3: mov    0x8(%rsp),%r14
  0x00007f75704a2fd8: mov    0x10(%rsp),%r13
  0x00007f75704a2fdd: mov    0x18(%rsp),%r12
  0x00007f75704a2fe2: mov    0x20(%rsp),%r11
  0x00007f75704a2fe7: mov    0x28(%rsp),%r10
  0x00007f75704a2fec: mov    0x30(%rsp),%r9
  0x00007f75704a2ff1: mov    0x38(%rsp),%r8
  0x00007f75704a2ff6: mov    0x40(%rsp),%rdi
  0x00007f75704a2ffb: mov    0x48(%rsp),%rsi
  0x00007f75704a3000: mov    0x50(%rsp),%rbp
  0x00007f75704a3005: mov    0x60(%rsp),%rbx
  0x00007f75704a300a: mov    0x68(%rsp),%rdx
  0x00007f75704a300f: mov    0x70(%rsp),%rcx
  0x00007f75704a3014: mov    0x78(%rsp),%rax
  0x00007f75704a3019: add    $0x80,%rsp
  0x00007f75704a3020: add    $0x8,%rsp
  0x00007f75704a3024: popfq  
  0x00007f75704a3025: mov    %r13,%rsp
  0x00007f75704a3028: pop    %rax
  0x00007f75704a3029: mov    %rsp,%r13
  0x00007f75704a302c: sub    $0x20,%rsp
  0x00007f75704a3030: mov    %rax,(%rsp)
  0x00007f75704a3034: mov    %rsi,0x10(%rsp)
  0x00007f75704a3039: mov    %rdx,0x8(%rsp)
  0x00007f75704a303e: mov    0x40(%rbx),%rcx
  0x00007f75704a3042: jmpq   *%rcx

AHE@0x00007f75800e8ce8: 0x i2c: 0x00007f75704a3120 c2i: 0x00007f75704a3230 c2iUV: 0x00007f75704a3203
i2c argument handler #0 for: static ()Ljava/lang/Void; (530 bytes generated)
c2i argument handler starts at 0x7f75704a3230
  0x00007f75704a3120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a3124: movabs $0x7f757036e3e0,%r11
  0x00007f75704a312e: cmp    %r11,%rax
  0x00007f75704a3131: jbe    0x00007f75704a314a
  0x00007f75704a3137: movabs $0x7f757046e3e0,%r11
  0x00007f75704a3141: cmp    %r11,%rax
  0x00007f75704a3144: jb     0x00007f75704a31e7
  0x00007f75704a314a: movabs $0x7f7570369420,%r11
  0x00007f75704a3154: cmp    %r11,%rax
  0x00007f75704a3157: jbe    0x00007f75704a3170
  0x00007f75704a315d: movabs $0x7f757036de58,%r11
  0x00007f75704a3167: cmp    %r11,%rax
  0x00007f75704a316a: jb     0x00007f75704a31e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a3170: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3175: sub    $0x80,%rsp
  0x00007f75704a317c: mov    %rax,0x78(%rsp)
  0x00007f75704a3181: mov    %rcx,0x70(%rsp)
  0x00007f75704a3186: mov    %rdx,0x68(%rsp)
  0x00007f75704a318b: mov    %rbx,0x60(%rsp)
  0x00007f75704a3190: mov    %rbp,0x50(%rsp)
  0x00007f75704a3195: mov    %rsi,0x48(%rsp)
  0x00007f75704a319a: mov    %rdi,0x40(%rsp)
  0x00007f75704a319f: mov    %r8,0x38(%rsp)
  0x00007f75704a31a4: mov    %r9,0x30(%rsp)
  0x00007f75704a31a9: mov    %r10,0x28(%rsp)
  0x00007f75704a31ae: mov    %r11,0x20(%rsp)
  0x00007f75704a31b3: mov    %r12,0x18(%rsp)
  0x00007f75704a31b8: mov    %r13,0x10(%rsp)
  0x00007f75704a31bd: mov    %r14,0x8(%rsp)
  0x00007f75704a31c2: mov    %r15,(%rsp)
  0x00007f75704a31c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a31d0: movabs $0x7f75704a3170,%rsi
  0x00007f75704a31da: mov    %rsp,%rdx
  0x00007f75704a31dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a31e1: callq  0x00007f75853729fa
  0x00007f75704a31e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a31e7: mov    %rsp,%r11
  0x00007f75704a31ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a31ee: push   %rax
  0x00007f75704a31ef: mov    %r11,%rax
  0x00007f75704a31f2: mov    0x50(%rbx),%r11
  0x00007f75704a31f6: mov    %rbx,0x258(%r15)
  0x00007f75704a31fd: mov    %rbx,%rax
  0x00007f75704a3200: jmpq   *%r11
  0x00007f75704a3203: mov    0x8(%rsi),%ebx
  0x00007f75704a3206: shl    $0x3,%rbx
  0x00007f75704a320a: cmp    0x10(%rax),%rbx
  0x00007f75704a320e: mov    0x8(%rax),%rbx
  0x00007f75704a3212: je     0x00007f75704a321d
  0x00007f75704a3218: jmpq   0x00007f757046ec40
  0x00007f75704a321d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a3225: je     0x00007f75704a3320
  0x00007f75704a322b: jmpq   0x00007f757046ec40
  0x00007f75704a3230: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a3238: je     0x00007f75704a3320
  0x00007f75704a323e: mov    %rsp,%r13
  0x00007f75704a3241: mov    (%rsp),%rax
  0x00007f75704a3245: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3249: pushfq 
  0x00007f75704a324a: sub    $0x8,%rsp
  0x00007f75704a324e: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3253: sub    $0x80,%rsp
  0x00007f75704a325a: mov    %rax,0x78(%rsp)
  0x00007f75704a325f: mov    %rcx,0x70(%rsp)
  0x00007f75704a3264: mov    %rdx,0x68(%rsp)
  0x00007f75704a3269: mov    %rbx,0x60(%rsp)
  0x00007f75704a326e: mov    %rbp,0x50(%rsp)
  0x00007f75704a3273: mov    %rsi,0x48(%rsp)
  0x00007f75704a3278: mov    %rdi,0x40(%rsp)
  0x00007f75704a327d: mov    %r8,0x38(%rsp)
  0x00007f75704a3282: mov    %r9,0x30(%rsp)
  0x00007f75704a3287: mov    %r10,0x28(%rsp)
  0x00007f75704a328c: mov    %r11,0x20(%rsp)
  0x00007f75704a3291: mov    %r12,0x18(%rsp)
  0x00007f75704a3296: mov    %r13,0x10(%rsp)
  0x00007f75704a329b: mov    %r14,0x8(%rsp)
  0x00007f75704a32a0: mov    %r15,(%rsp)
  0x00007f75704a32a4: sub    $0x200,%rsp
  0x00007f75704a32ab: fxsave64 (%rsp)
  0x00007f75704a32b0: mov    %rbx,%rdi
  0x00007f75704a32b3: mov    %rax,%rsi
  0x00007f75704a32b6: callq  0x00007f7585522bca
  0x00007f75704a32bb: fxrstor64 (%rsp)
  0x00007f75704a32c0: add    $0x200,%rsp
  0x00007f75704a32c7: mov    (%rsp),%r15
  0x00007f75704a32cb: mov    0x8(%rsp),%r14
  0x00007f75704a32d0: mov    0x10(%rsp),%r13
  0x00007f75704a32d5: mov    0x18(%rsp),%r12
  0x00007f75704a32da: mov    0x20(%rsp),%r11
  0x00007f75704a32df: mov    0x28(%rsp),%r10
  0x00007f75704a32e4: mov    0x30(%rsp),%r9
  0x00007f75704a32e9: mov    0x38(%rsp),%r8
  0x00007f75704a32ee: mov    0x40(%rsp),%rdi
  0x00007f75704a32f3: mov    0x48(%rsp),%rsi
  0x00007f75704a32f8: mov    0x50(%rsp),%rbp
  0x00007f75704a32fd: mov    0x60(%rsp),%rbx
  0x00007f75704a3302: mov    0x68(%rsp),%rdx
  0x00007f75704a3307: mov    0x70(%rsp),%rcx
  0x00007f75704a330c: mov    0x78(%rsp),%rax
  0x00007f75704a3311: add    $0x80,%rsp
  0x00007f75704a3318: add    $0x8,%rsp
  0x00007f75704a331c: popfq  
  0x00007f75704a331d: mov    %r13,%rsp
  0x00007f75704a3320: pop    %rax
  0x00007f75704a3321: mov    %rsp,%r13
  0x00007f75704a3324: sub    $0x10,%rsp
  0x00007f75704a3328: mov    %rax,(%rsp)
  0x00007f75704a332c: mov    0x40(%rbx),%rcx
  0x00007f75704a3330: jmpq   *%rcx

AHE@0x00007f75800e8d30: 0xb0000000 i2c: 0x00007f75704a33e0 c2i: 0x00007f75704a34f4 c2iUV: 0x00007f75704a34c7
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/net/URL; (539 bytes generated)
c2i argument handler starts at 0x7f75704a34f4
  0x00007f75704a33e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a33e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a33ee: cmp    %r11,%rax
  0x00007f75704a33f1: jbe    0x00007f75704a340a
  0x00007f75704a33f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a3401: cmp    %r11,%rax
  0x00007f75704a3404: jb     0x00007f75704a34a7
  0x00007f75704a340a: movabs $0x7f7570369420,%r11
  0x00007f75704a3414: cmp    %r11,%rax
  0x00007f75704a3417: jbe    0x00007f75704a3430
  0x00007f75704a341d: movabs $0x7f757036de58,%r11
  0x00007f75704a3427: cmp    %r11,%rax
  0x00007f75704a342a: jb     0x00007f75704a34a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a3430: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3435: sub    $0x80,%rsp
  0x00007f75704a343c: mov    %rax,0x78(%rsp)
  0x00007f75704a3441: mov    %rcx,0x70(%rsp)
  0x00007f75704a3446: mov    %rdx,0x68(%rsp)
  0x00007f75704a344b: mov    %rbx,0x60(%rsp)
  0x00007f75704a3450: mov    %rbp,0x50(%rsp)
  0x00007f75704a3455: mov    %rsi,0x48(%rsp)
  0x00007f75704a345a: mov    %rdi,0x40(%rsp)
  0x00007f75704a345f: mov    %r8,0x38(%rsp)
  0x00007f75704a3464: mov    %r9,0x30(%rsp)
  0x00007f75704a3469: mov    %r10,0x28(%rsp)
  0x00007f75704a346e: mov    %r11,0x20(%rsp)
  0x00007f75704a3473: mov    %r12,0x18(%rsp)
  0x00007f75704a3478: mov    %r13,0x10(%rsp)
  0x00007f75704a347d: mov    %r14,0x8(%rsp)
  0x00007f75704a3482: mov    %r15,(%rsp)
  0x00007f75704a3486: movabs $0x7f758592f470,%rdi
  0x00007f75704a3490: movabs $0x7f75704a3430,%rsi
  0x00007f75704a349a: mov    %rsp,%rdx
  0x00007f75704a349d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a34a1: callq  0x00007f75853729fa
  0x00007f75704a34a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a34a7: mov    %rsp,%r11
  0x00007f75704a34aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a34ae: push   %rax
  0x00007f75704a34af: mov    %r11,%rax
  0x00007f75704a34b2: mov    0x50(%rbx),%r11
  0x00007f75704a34b6: mov    0x8(%rax),%rsi
  0x00007f75704a34ba: mov    %rbx,0x258(%r15)
  0x00007f75704a34c1: mov    %rbx,%rax
  0x00007f75704a34c4: jmpq   *%r11
  0x00007f75704a34c7: mov    0x8(%rsi),%ebx
  0x00007f75704a34ca: shl    $0x3,%rbx
  0x00007f75704a34ce: cmp    0x10(%rax),%rbx
  0x00007f75704a34d2: mov    0x8(%rax),%rbx
  0x00007f75704a34d6: je     0x00007f75704a34e1
  0x00007f75704a34dc: jmpq   0x00007f757046ec40
  0x00007f75704a34e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a34e9: je     0x00007f75704a35e4
  0x00007f75704a34ef: jmpq   0x00007f757046ec40
  0x00007f75704a34f4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a34fc: je     0x00007f75704a35e4
  0x00007f75704a3502: mov    %rsp,%r13
  0x00007f75704a3505: mov    (%rsp),%rax
  0x00007f75704a3509: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a350d: pushfq 
  0x00007f75704a350e: sub    $0x8,%rsp
  0x00007f75704a3512: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3517: sub    $0x80,%rsp
  0x00007f75704a351e: mov    %rax,0x78(%rsp)
  0x00007f75704a3523: mov    %rcx,0x70(%rsp)
  0x00007f75704a3528: mov    %rdx,0x68(%rsp)
  0x00007f75704a352d: mov    %rbx,0x60(%rsp)
  0x00007f75704a3532: mov    %rbp,0x50(%rsp)
  0x00007f75704a3537: mov    %rsi,0x48(%rsp)
  0x00007f75704a353c: mov    %rdi,0x40(%rsp)
  0x00007f75704a3541: mov    %r8,0x38(%rsp)
  0x00007f75704a3546: mov    %r9,0x30(%rsp)
  0x00007f75704a354b: mov    %r10,0x28(%rsp)
  0x00007f75704a3550: mov    %r11,0x20(%rsp)
  0x00007f75704a3555: mov    %r12,0x18(%rsp)
  0x00007f75704a355a: mov    %r13,0x10(%rsp)
  0x00007f75704a355f: mov    %r14,0x8(%rsp)
  0x00007f75704a3564: mov    %r15,(%rsp)
  0x00007f75704a3568: sub    $0x200,%rsp
  0x00007f75704a356f: fxsave64 (%rsp)
  0x00007f75704a3574: mov    %rbx,%rdi
  0x00007f75704a3577: mov    %rax,%rsi
  0x00007f75704a357a: callq  0x00007f7585522bca
  0x00007f75704a357f: fxrstor64 (%rsp)
  0x00007f75704a3584: add    $0x200,%rsp
  0x00007f75704a358b: mov    (%rsp),%r15
  0x00007f75704a358f: mov    0x8(%rsp),%r14
  0x00007f75704a3594: mov    0x10(%rsp),%r13
  0x00007f75704a3599: mov    0x18(%rsp),%r12
  0x00007f75704a359e: mov    0x20(%rsp),%r11
  0x00007f75704a35a3: mov    0x28(%rsp),%r10
  0x00007f75704a35a8: mov    0x30(%rsp),%r9
  0x00007f75704a35ad: mov    0x38(%rsp),%r8
  0x00007f75704a35b2: mov    0x40(%rsp),%rdi
  0x00007f75704a35b7: mov    0x48(%rsp),%rsi
  0x00007f75704a35bc: mov    0x50(%rsp),%rbp
  0x00007f75704a35c1: mov    0x60(%rsp),%rbx
  0x00007f75704a35c6: mov    0x68(%rsp),%rdx
  0x00007f75704a35cb: mov    0x70(%rsp),%rcx
  0x00007f75704a35d0: mov    0x78(%rsp),%rax
  0x00007f75704a35d5: add    $0x80,%rsp
  0x00007f75704a35dc: add    $0x8,%rsp
  0x00007f75704a35e0: popfq  
  0x00007f75704a35e1: mov    %r13,%rsp
  0x00007f75704a35e4: pop    %rax
  0x00007f75704a35e5: mov    %rsp,%r13
  0x00007f75704a35e8: sub    $0x10,%rsp
  0x00007f75704a35ec: mov    %rax,(%rsp)
  0x00007f75704a35f0: mov    %rsi,0x8(%rsp)
  0x00007f75704a35f5: mov    0x40(%rbx),%rcx
  0x00007f75704a35f9: jmpq   *%rcx

AHE@0x00007f75800e8d78: 0xb0000000 i2c: 0x00007f75704a36a0 c2i: 0x00007f75704a37b4 c2iUV: 0x00007f75704a3787
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/io/InputStream; (539 bytes generated)
c2i argument handler starts at 0x7f75704a37b4
  0x00007f75704a36a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a36a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a36ae: cmp    %r11,%rax
  0x00007f75704a36b1: jbe    0x00007f75704a36ca
  0x00007f75704a36b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a36c1: cmp    %r11,%rax
  0x00007f75704a36c4: jb     0x00007f75704a3767
  0x00007f75704a36ca: movabs $0x7f7570369420,%r11
  0x00007f75704a36d4: cmp    %r11,%rax
  0x00007f75704a36d7: jbe    0x00007f75704a36f0
  0x00007f75704a36dd: movabs $0x7f757036de58,%r11
  0x00007f75704a36e7: cmp    %r11,%rax
  0x00007f75704a36ea: jb     0x00007f75704a3767
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a36f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a36f5: sub    $0x80,%rsp
  0x00007f75704a36fc: mov    %rax,0x78(%rsp)
  0x00007f75704a3701: mov    %rcx,0x70(%rsp)
  0x00007f75704a3706: mov    %rdx,0x68(%rsp)
  0x00007f75704a370b: mov    %rbx,0x60(%rsp)
  0x00007f75704a3710: mov    %rbp,0x50(%rsp)
  0x00007f75704a3715: mov    %rsi,0x48(%rsp)
  0x00007f75704a371a: mov    %rdi,0x40(%rsp)
  0x00007f75704a371f: mov    %r8,0x38(%rsp)
  0x00007f75704a3724: mov    %r9,0x30(%rsp)
  0x00007f75704a3729: mov    %r10,0x28(%rsp)
  0x00007f75704a372e: mov    %r11,0x20(%rsp)
  0x00007f75704a3733: mov    %r12,0x18(%rsp)
  0x00007f75704a3738: mov    %r13,0x10(%rsp)
  0x00007f75704a373d: mov    %r14,0x8(%rsp)
  0x00007f75704a3742: mov    %r15,(%rsp)
  0x00007f75704a3746: movabs $0x7f758592f470,%rdi
  0x00007f75704a3750: movabs $0x7f75704a36f0,%rsi
  0x00007f75704a375a: mov    %rsp,%rdx
  0x00007f75704a375d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3761: callq  0x00007f75853729fa
  0x00007f75704a3766: hlt    
  ;; } verify_i2ce 
  0x00007f75704a3767: mov    %rsp,%r11
  0x00007f75704a376a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a376e: push   %rax
  0x00007f75704a376f: mov    %r11,%rax
  0x00007f75704a3772: mov    0x50(%rbx),%r11
  0x00007f75704a3776: mov    0x8(%rax),%rsi
  0x00007f75704a377a: mov    %rbx,0x258(%r15)
  0x00007f75704a3781: mov    %rbx,%rax
  0x00007f75704a3784: jmpq   *%r11
  0x00007f75704a3787: mov    0x8(%rsi),%ebx
  0x00007f75704a378a: shl    $0x3,%rbx
  0x00007f75704a378e: cmp    0x10(%rax),%rbx
  0x00007f75704a3792: mov    0x8(%rax),%rbx
  0x00007f75704a3796: je     0x00007f75704a37a1
  0x00007f75704a379c: jmpq   0x00007f757046ec40
  0x00007f75704a37a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a37a9: je     0x00007f75704a38a4
  0x00007f75704a37af: jmpq   0x00007f757046ec40
  0x00007f75704a37b4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a37bc: je     0x00007f75704a38a4
  0x00007f75704a37c2: mov    %rsp,%r13
  0x00007f75704a37c5: mov    (%rsp),%rax
  0x00007f75704a37c9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a37cd: pushfq 
  0x00007f75704a37ce: sub    $0x8,%rsp
  0x00007f75704a37d2: mov    %rsp,-0x28(%rsp)
  0x00007f75704a37d7: sub    $0x80,%rsp
  0x00007f75704a37de: mov    %rax,0x78(%rsp)
  0x00007f75704a37e3: mov    %rcx,0x70(%rsp)
  0x00007f75704a37e8: mov    %rdx,0x68(%rsp)
  0x00007f75704a37ed: mov    %rbx,0x60(%rsp)
  0x00007f75704a37f2: mov    %rbp,0x50(%rsp)
  0x00007f75704a37f7: mov    %rsi,0x48(%rsp)
  0x00007f75704a37fc: mov    %rdi,0x40(%rsp)
  0x00007f75704a3801: mov    %r8,0x38(%rsp)
  0x00007f75704a3806: mov    %r9,0x30(%rsp)
  0x00007f75704a380b: mov    %r10,0x28(%rsp)
  0x00007f75704a3810: mov    %r11,0x20(%rsp)
  0x00007f75704a3815: mov    %r12,0x18(%rsp)
  0x00007f75704a381a: mov    %r13,0x10(%rsp)
  0x00007f75704a381f: mov    %r14,0x8(%rsp)
  0x00007f75704a3824: mov    %r15,(%rsp)
  0x00007f75704a3828: sub    $0x200,%rsp
  0x00007f75704a382f: fxsave64 (%rsp)
  0x00007f75704a3834: mov    %rbx,%rdi
  0x00007f75704a3837: mov    %rax,%rsi
  0x00007f75704a383a: callq  0x00007f7585522bca
  0x00007f75704a383f: fxrstor64 (%rsp)
  0x00007f75704a3844: add    $0x200,%rsp
  0x00007f75704a384b: mov    (%rsp),%r15
  0x00007f75704a384f: mov    0x8(%rsp),%r14
  0x00007f75704a3854: mov    0x10(%rsp),%r13
  0x00007f75704a3859: mov    0x18(%rsp),%r12
  0x00007f75704a385e: mov    0x20(%rsp),%r11
  0x00007f75704a3863: mov    0x28(%rsp),%r10
  0x00007f75704a3868: mov    0x30(%rsp),%r9
  0x00007f75704a386d: mov    0x38(%rsp),%r8
  0x00007f75704a3872: mov    0x40(%rsp),%rdi
  0x00007f75704a3877: mov    0x48(%rsp),%rsi
  0x00007f75704a387c: mov    0x50(%rsp),%rbp
  0x00007f75704a3881: mov    0x60(%rsp),%rbx
  0x00007f75704a3886: mov    0x68(%rsp),%rdx
  0x00007f75704a388b: mov    0x70(%rsp),%rcx
  0x00007f75704a3890: mov    0x78(%rsp),%rax
  0x00007f75704a3895: add    $0x80,%rsp
  0x00007f75704a389c: add    $0x8,%rsp
  0x00007f75704a38a0: popfq  
  0x00007f75704a38a1: mov    %r13,%rsp
  0x00007f75704a38a4: pop    %rax
  0x00007f75704a38a5: mov    %rsp,%r13
  0x00007f75704a38a8: sub    $0x10,%rsp
  0x00007f75704a38ac: mov    %rax,(%rsp)
  0x00007f75704a38b0: mov    %rsi,0x8(%rsp)
  0x00007f75704a38b5: mov    0x40(%rbx),%rcx
  0x00007f75704a38b9: jmpq   *%rcx

AHE@0x00007f75800e8dc0: 0xbb000000 i2c: 0x00007f75704a3960 c2i: 0x00007f75704a3a78 c2iUV: 0x00007f75704a3a4b
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704a3a78
  0x00007f75704a3960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a3964: movabs $0x7f757036e3e0,%r11
  0x00007f75704a396e: cmp    %r11,%rax
  0x00007f75704a3971: jbe    0x00007f75704a398a
  0x00007f75704a3977: movabs $0x7f757046e3e0,%r11
  0x00007f75704a3981: cmp    %r11,%rax
  0x00007f75704a3984: jb     0x00007f75704a3a27
  0x00007f75704a398a: movabs $0x7f7570369420,%r11
  0x00007f75704a3994: cmp    %r11,%rax
  0x00007f75704a3997: jbe    0x00007f75704a39b0
  0x00007f75704a399d: movabs $0x7f757036de58,%r11
  0x00007f75704a39a7: cmp    %r11,%rax
  0x00007f75704a39aa: jb     0x00007f75704a3a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a39b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a39b5: sub    $0x80,%rsp
  0x00007f75704a39bc: mov    %rax,0x78(%rsp)
  0x00007f75704a39c1: mov    %rcx,0x70(%rsp)
  0x00007f75704a39c6: mov    %rdx,0x68(%rsp)
  0x00007f75704a39cb: mov    %rbx,0x60(%rsp)
  0x00007f75704a39d0: mov    %rbp,0x50(%rsp)
  0x00007f75704a39d5: mov    %rsi,0x48(%rsp)
  0x00007f75704a39da: mov    %rdi,0x40(%rsp)
  0x00007f75704a39df: mov    %r8,0x38(%rsp)
  0x00007f75704a39e4: mov    %r9,0x30(%rsp)
  0x00007f75704a39e9: mov    %r10,0x28(%rsp)
  0x00007f75704a39ee: mov    %r11,0x20(%rsp)
  0x00007f75704a39f3: mov    %r12,0x18(%rsp)
  0x00007f75704a39f8: mov    %r13,0x10(%rsp)
  0x00007f75704a39fd: mov    %r14,0x8(%rsp)
  0x00007f75704a3a02: mov    %r15,(%rsp)
  0x00007f75704a3a06: movabs $0x7f758592f470,%rdi
  0x00007f75704a3a10: movabs $0x7f75704a39b0,%rsi
  0x00007f75704a3a1a: mov    %rsp,%rdx
  0x00007f75704a3a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3a21: callq  0x00007f75853729fa
  0x00007f75704a3a26: hlt    
  ;; } verify_i2ce 
  0x00007f75704a3a27: mov    %rsp,%r11
  0x00007f75704a3a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3a2e: push   %rax
  0x00007f75704a3a2f: mov    %r11,%rax
  0x00007f75704a3a32: mov    0x50(%rbx),%r11
  0x00007f75704a3a36: mov    0x10(%rax),%rsi
  0x00007f75704a3a3a: mov    0x8(%rax),%rdx
  0x00007f75704a3a3e: mov    %rbx,0x258(%r15)
  0x00007f75704a3a45: mov    %rbx,%rax
  0x00007f75704a3a48: jmpq   *%r11
  0x00007f75704a3a4b: mov    0x8(%rsi),%ebx
  0x00007f75704a3a4e: shl    $0x3,%rbx
  0x00007f75704a3a52: cmp    0x10(%rax),%rbx
  0x00007f75704a3a56: mov    0x8(%rax),%rbx
  0x00007f75704a3a5a: je     0x00007f75704a3a65
  0x00007f75704a3a60: jmpq   0x00007f757046ec40
  0x00007f75704a3a65: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a3a6d: je     0x00007f75704a3b68
  0x00007f75704a3a73: jmpq   0x00007f757046ec40
  0x00007f75704a3a78: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a3a80: je     0x00007f75704a3b68
  0x00007f75704a3a86: mov    %rsp,%r13
  0x00007f75704a3a89: mov    (%rsp),%rax
  0x00007f75704a3a8d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3a91: pushfq 
  0x00007f75704a3a92: sub    $0x8,%rsp
  0x00007f75704a3a96: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3a9b: sub    $0x80,%rsp
  0x00007f75704a3aa2: mov    %rax,0x78(%rsp)
  0x00007f75704a3aa7: mov    %rcx,0x70(%rsp)
  0x00007f75704a3aac: mov    %rdx,0x68(%rsp)
  0x00007f75704a3ab1: mov    %rbx,0x60(%rsp)
  0x00007f75704a3ab6: mov    %rbp,0x50(%rsp)
  0x00007f75704a3abb: mov    %rsi,0x48(%rsp)
  0x00007f75704a3ac0: mov    %rdi,0x40(%rsp)
  0x00007f75704a3ac5: mov    %r8,0x38(%rsp)
  0x00007f75704a3aca: mov    %r9,0x30(%rsp)
  0x00007f75704a3acf: mov    %r10,0x28(%rsp)
  0x00007f75704a3ad4: mov    %r11,0x20(%rsp)
  0x00007f75704a3ad9: mov    %r12,0x18(%rsp)
  0x00007f75704a3ade: mov    %r13,0x10(%rsp)
  0x00007f75704a3ae3: mov    %r14,0x8(%rsp)
  0x00007f75704a3ae8: mov    %r15,(%rsp)
  0x00007f75704a3aec: sub    $0x200,%rsp
  0x00007f75704a3af3: fxsave64 (%rsp)
  0x00007f75704a3af8: mov    %rbx,%rdi
  0x00007f75704a3afb: mov    %rax,%rsi
  0x00007f75704a3afe: callq  0x00007f7585522bca
  0x00007f75704a3b03: fxrstor64 (%rsp)
  0x00007f75704a3b08: add    $0x200,%rsp
  0x00007f75704a3b0f: mov    (%rsp),%r15
  0x00007f75704a3b13: mov    0x8(%rsp),%r14
  0x00007f75704a3b18: mov    0x10(%rsp),%r13
  0x00007f75704a3b1d: mov    0x18(%rsp),%r12
  0x00007f75704a3b22: mov    0x20(%rsp),%r11
  0x00007f75704a3b27: mov    0x28(%rsp),%r10
  0x00007f75704a3b2c: mov    0x30(%rsp),%r9
  0x00007f75704a3b31: mov    0x38(%rsp),%r8
  0x00007f75704a3b36: mov    0x40(%rsp),%rdi
  0x00007f75704a3b3b: mov    0x48(%rsp),%rsi
  0x00007f75704a3b40: mov    0x50(%rsp),%rbp
  0x00007f75704a3b45: mov    0x60(%rsp),%rbx
  0x00007f75704a3b4a: mov    0x68(%rsp),%rdx
  0x00007f75704a3b4f: mov    0x70(%rsp),%rcx
  0x00007f75704a3b54: mov    0x78(%rsp),%rax
  0x00007f75704a3b59: add    $0x80,%rsp
  0x00007f75704a3b60: add    $0x8,%rsp
  0x00007f75704a3b64: popfq  
  0x00007f75704a3b65: mov    %r13,%rsp
  0x00007f75704a3b68: pop    %rax
  0x00007f75704a3b69: mov    %rsp,%r13
  0x00007f75704a3b6c: sub    $0x20,%rsp
  0x00007f75704a3b70: mov    %rax,(%rsp)
  0x00007f75704a3b74: mov    %rsi,0x10(%rsp)
  0x00007f75704a3b79: mov    %rdx,0x8(%rsp)
  0x00007f75704a3b7e: mov    0x40(%rbx),%rcx
  0x00007f75704a3b82: jmpq   *%rcx

AHE@0x00007f75800e8e08: 0x i2c: 0x00007f75704a3c60 c2i: 0x00007f75704a3d70 c2iUV: 0x00007f75704a3d43
i2c argument handler #0 for: static ()Ljava/util/Stack; (530 bytes generated)
c2i argument handler starts at 0x7f75704a3d70
  0x00007f75704a3c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a3c64: movabs $0x7f757036e3e0,%r11
  0x00007f75704a3c6e: cmp    %r11,%rax
  0x00007f75704a3c71: jbe    0x00007f75704a3c8a
  0x00007f75704a3c77: movabs $0x7f757046e3e0,%r11
  0x00007f75704a3c81: cmp    %r11,%rax
  0x00007f75704a3c84: jb     0x00007f75704a3d27
  0x00007f75704a3c8a: movabs $0x7f7570369420,%r11
  0x00007f75704a3c94: cmp    %r11,%rax
  0x00007f75704a3c97: jbe    0x00007f75704a3cb0
  0x00007f75704a3c9d: movabs $0x7f757036de58,%r11
  0x00007f75704a3ca7: cmp    %r11,%rax
  0x00007f75704a3caa: jb     0x00007f75704a3d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a3cb0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3cb5: sub    $0x80,%rsp
  0x00007f75704a3cbc: mov    %rax,0x78(%rsp)
  0x00007f75704a3cc1: mov    %rcx,0x70(%rsp)
  0x00007f75704a3cc6: mov    %rdx,0x68(%rsp)
  0x00007f75704a3ccb: mov    %rbx,0x60(%rsp)
  0x00007f75704a3cd0: mov    %rbp,0x50(%rsp)
  0x00007f75704a3cd5: mov    %rsi,0x48(%rsp)
  0x00007f75704a3cda: mov    %rdi,0x40(%rsp)
  0x00007f75704a3cdf: mov    %r8,0x38(%rsp)
  0x00007f75704a3ce4: mov    %r9,0x30(%rsp)
  0x00007f75704a3ce9: mov    %r10,0x28(%rsp)
  0x00007f75704a3cee: mov    %r11,0x20(%rsp)
  0x00007f75704a3cf3: mov    %r12,0x18(%rsp)
  0x00007f75704a3cf8: mov    %r13,0x10(%rsp)
  0x00007f75704a3cfd: mov    %r14,0x8(%rsp)
  0x00007f75704a3d02: mov    %r15,(%rsp)
  0x00007f75704a3d06: movabs $0x7f758592f470,%rdi
  0x00007f75704a3d10: movabs $0x7f75704a3cb0,%rsi
  0x00007f75704a3d1a: mov    %rsp,%rdx
  0x00007f75704a3d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3d21: callq  0x00007f75853729fa
  0x00007f75704a3d26: hlt    
  ;; } verify_i2ce 
  0x00007f75704a3d27: mov    %rsp,%r11
  0x00007f75704a3d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3d2e: push   %rax
  0x00007f75704a3d2f: mov    %r11,%rax
  0x00007f75704a3d32: mov    0x50(%rbx),%r11
  0x00007f75704a3d36: mov    %rbx,0x258(%r15)
  0x00007f75704a3d3d: mov    %rbx,%rax
  0x00007f75704a3d40: jmpq   *%r11
  0x00007f75704a3d43: mov    0x8(%rsi),%ebx
  0x00007f75704a3d46: shl    $0x3,%rbx
  0x00007f75704a3d4a: cmp    0x10(%rax),%rbx
  0x00007f75704a3d4e: mov    0x8(%rax),%rbx
  0x00007f75704a3d52: je     0x00007f75704a3d5d
  0x00007f75704a3d58: jmpq   0x00007f757046ec40
  0x00007f75704a3d5d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a3d65: je     0x00007f75704a3e60
  0x00007f75704a3d6b: jmpq   0x00007f757046ec40
  0x00007f75704a3d70: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a3d78: je     0x00007f75704a3e60
  0x00007f75704a3d7e: mov    %rsp,%r13
  0x00007f75704a3d81: mov    (%rsp),%rax
  0x00007f75704a3d85: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3d89: pushfq 
  0x00007f75704a3d8a: sub    $0x8,%rsp
  0x00007f75704a3d8e: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3d93: sub    $0x80,%rsp
  0x00007f75704a3d9a: mov    %rax,0x78(%rsp)
  0x00007f75704a3d9f: mov    %rcx,0x70(%rsp)
  0x00007f75704a3da4: mov    %rdx,0x68(%rsp)
  0x00007f75704a3da9: mov    %rbx,0x60(%rsp)
  0x00007f75704a3dae: mov    %rbp,0x50(%rsp)
  0x00007f75704a3db3: mov    %rsi,0x48(%rsp)
  0x00007f75704a3db8: mov    %rdi,0x40(%rsp)
  0x00007f75704a3dbd: mov    %r8,0x38(%rsp)
  0x00007f75704a3dc2: mov    %r9,0x30(%rsp)
  0x00007f75704a3dc7: mov    %r10,0x28(%rsp)
  0x00007f75704a3dcc: mov    %r11,0x20(%rsp)
  0x00007f75704a3dd1: mov    %r12,0x18(%rsp)
  0x00007f75704a3dd6: mov    %r13,0x10(%rsp)
  0x00007f75704a3ddb: mov    %r14,0x8(%rsp)
  0x00007f75704a3de0: mov    %r15,(%rsp)
  0x00007f75704a3de4: sub    $0x200,%rsp
  0x00007f75704a3deb: fxsave64 (%rsp)
  0x00007f75704a3df0: mov    %rbx,%rdi
  0x00007f75704a3df3: mov    %rax,%rsi
  0x00007f75704a3df6: callq  0x00007f7585522bca
  0x00007f75704a3dfb: fxrstor64 (%rsp)
  0x00007f75704a3e00: add    $0x200,%rsp
  0x00007f75704a3e07: mov    (%rsp),%r15
  0x00007f75704a3e0b: mov    0x8(%rsp),%r14
  0x00007f75704a3e10: mov    0x10(%rsp),%r13
  0x00007f75704a3e15: mov    0x18(%rsp),%r12
  0x00007f75704a3e1a: mov    0x20(%rsp),%r11
  0x00007f75704a3e1f: mov    0x28(%rsp),%r10
  0x00007f75704a3e24: mov    0x30(%rsp),%r9
  0x00007f75704a3e29: mov    0x38(%rsp),%r8
  0x00007f75704a3e2e: mov    0x40(%rsp),%rdi
  0x00007f75704a3e33: mov    0x48(%rsp),%rsi
  0x00007f75704a3e38: mov    0x50(%rsp),%rbp
  0x00007f75704a3e3d: mov    0x60(%rsp),%rbx
  0x00007f75704a3e42: mov    0x68(%rsp),%rdx
  0x00007f75704a3e47: mov    0x70(%rsp),%rcx
  0x00007f75704a3e4c: mov    0x78(%rsp),%rax
  0x00007f75704a3e51: add    $0x80,%rsp
  0x00007f75704a3e58: add    $0x8,%rsp
  0x00007f75704a3e5c: popfq  
  0x00007f75704a3e5d: mov    %r13,%rsp
  0x00007f75704a3e60: pop    %rax
  0x00007f75704a3e61: mov    %rsp,%r13
  0x00007f75704a3e64: sub    $0x10,%rsp
  0x00007f75704a3e68: mov    %rax,(%rsp)
  0x00007f75704a3e6c: mov    0x40(%rbx),%rcx
  0x00007f75704a3e70: jmpq   *%rcx

AHE@0x00007f75800e8e50: 0xbb000000 i2c: 0x00007f75704a3f20 c2i: 0x00007f75704a4038 c2iUV: 0x00007f75704a400b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Z (548 bytes generated)
c2i argument handler starts at 0x7f75704a4038
  0x00007f75704a3f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a3f24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a3f2e: cmp    %r11,%rax
  0x00007f75704a3f31: jbe    0x00007f75704a3f4a
  0x00007f75704a3f37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a3f41: cmp    %r11,%rax
  0x00007f75704a3f44: jb     0x00007f75704a3fe7
  0x00007f75704a3f4a: movabs $0x7f7570369420,%r11
  0x00007f75704a3f54: cmp    %r11,%rax
  0x00007f75704a3f57: jbe    0x00007f75704a3f70
  0x00007f75704a3f5d: movabs $0x7f757036de58,%r11
  0x00007f75704a3f67: cmp    %r11,%rax
  0x00007f75704a3f6a: jb     0x00007f75704a3fe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a3f70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a3f75: sub    $0x80,%rsp
  0x00007f75704a3f7c: mov    %rax,0x78(%rsp)
  0x00007f75704a3f81: mov    %rcx,0x70(%rsp)
  0x00007f75704a3f86: mov    %rdx,0x68(%rsp)
  0x00007f75704a3f8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a3f90: mov    %rbp,0x50(%rsp)
  0x00007f75704a3f95: mov    %rsi,0x48(%rsp)
  0x00007f75704a3f9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a3f9f: mov    %r8,0x38(%rsp)
  0x00007f75704a3fa4: mov    %r9,0x30(%rsp)
  0x00007f75704a3fa9: mov    %r10,0x28(%rsp)
  0x00007f75704a3fae: mov    %r11,0x20(%rsp)
  0x00007f75704a3fb3: mov    %r12,0x18(%rsp)
  0x00007f75704a3fb8: mov    %r13,0x10(%rsp)
  0x00007f75704a3fbd: mov    %r14,0x8(%rsp)
  0x00007f75704a3fc2: mov    %r15,(%rsp)
  0x00007f75704a3fc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a3fd0: movabs $0x7f75704a3f70,%rsi
  0x00007f75704a3fda: mov    %rsp,%rdx
  0x00007f75704a3fdd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3fe1: callq  0x00007f75853729fa
  0x00007f75704a3fe6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a3fe7: mov    %rsp,%r11
  0x00007f75704a3fea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a3fee: push   %rax
  0x00007f75704a3fef: mov    %r11,%rax
  0x00007f75704a3ff2: mov    0x50(%rbx),%r11
  0x00007f75704a3ff6: mov    0x10(%rax),%rsi
  0x00007f75704a3ffa: mov    0x8(%rax),%rdx
  0x00007f75704a3ffe: mov    %rbx,0x258(%r15)
  0x00007f75704a4005: mov    %rbx,%rax
  0x00007f75704a4008: jmpq   *%r11
  0x00007f75704a400b: mov    0x8(%rsi),%ebx
  0x00007f75704a400e: shl    $0x3,%rbx
  0x00007f75704a4012: cmp    0x10(%rax),%rbx
  0x00007f75704a4016: mov    0x8(%rax),%rbx
  0x00007f75704a401a: je     0x00007f75704a4025
  0x00007f75704a4020: jmpq   0x00007f757046ec40
  0x00007f75704a4025: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a402d: je     0x00007f75704a4128
  0x00007f75704a4033: jmpq   0x00007f757046ec40
  0x00007f75704a4038: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4040: je     0x00007f75704a4128
  0x00007f75704a4046: mov    %rsp,%r13
  0x00007f75704a4049: mov    (%rsp),%rax
  0x00007f75704a404d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4051: pushfq 
  0x00007f75704a4052: sub    $0x8,%rsp
  0x00007f75704a4056: mov    %rsp,-0x28(%rsp)
  0x00007f75704a405b: sub    $0x80,%rsp
  0x00007f75704a4062: mov    %rax,0x78(%rsp)
  0x00007f75704a4067: mov    %rcx,0x70(%rsp)
  0x00007f75704a406c: mov    %rdx,0x68(%rsp)
  0x00007f75704a4071: mov    %rbx,0x60(%rsp)
  0x00007f75704a4076: mov    %rbp,0x50(%rsp)
  0x00007f75704a407b: mov    %rsi,0x48(%rsp)
  0x00007f75704a4080: mov    %rdi,0x40(%rsp)
  0x00007f75704a4085: mov    %r8,0x38(%rsp)
  0x00007f75704a408a: mov    %r9,0x30(%rsp)
  0x00007f75704a408f: mov    %r10,0x28(%rsp)
  0x00007f75704a4094: mov    %r11,0x20(%rsp)
  0x00007f75704a4099: mov    %r12,0x18(%rsp)
  0x00007f75704a409e: mov    %r13,0x10(%rsp)
  0x00007f75704a40a3: mov    %r14,0x8(%rsp)
  0x00007f75704a40a8: mov    %r15,(%rsp)
  0x00007f75704a40ac: sub    $0x200,%rsp
  0x00007f75704a40b3: fxsave64 (%rsp)
  0x00007f75704a40b8: mov    %rbx,%rdi
  0x00007f75704a40bb: mov    %rax,%rsi
  0x00007f75704a40be: callq  0x00007f7585522bca
  0x00007f75704a40c3: fxrstor64 (%rsp)
  0x00007f75704a40c8: add    $0x200,%rsp
  0x00007f75704a40cf: mov    (%rsp),%r15
  0x00007f75704a40d3: mov    0x8(%rsp),%r14
  0x00007f75704a40d8: mov    0x10(%rsp),%r13
  0x00007f75704a40dd: mov    0x18(%rsp),%r12
  0x00007f75704a40e2: mov    0x20(%rsp),%r11
  0x00007f75704a40e7: mov    0x28(%rsp),%r10
  0x00007f75704a40ec: mov    0x30(%rsp),%r9
  0x00007f75704a40f1: mov    0x38(%rsp),%r8
  0x00007f75704a40f6: mov    0x40(%rsp),%rdi
  0x00007f75704a40fb: mov    0x48(%rsp),%rsi
  0x00007f75704a4100: mov    0x50(%rsp),%rbp
  0x00007f75704a4105: mov    0x60(%rsp),%rbx
  0x00007f75704a410a: mov    0x68(%rsp),%rdx
  0x00007f75704a410f: mov    0x70(%rsp),%rcx
  0x00007f75704a4114: mov    0x78(%rsp),%rax
  0x00007f75704a4119: add    $0x80,%rsp
  0x00007f75704a4120: add    $0x8,%rsp
  0x00007f75704a4124: popfq  
  0x00007f75704a4125: mov    %r13,%rsp
  0x00007f75704a4128: pop    %rax
  0x00007f75704a4129: mov    %rsp,%r13
  0x00007f75704a412c: sub    $0x20,%rsp
  0x00007f75704a4130: mov    %rax,(%rsp)
  0x00007f75704a4134: mov    %rsi,0x10(%rsp)
  0x00007f75704a4139: mov    %rdx,0x8(%rsp)
  0x00007f75704a413e: mov    0x40(%rbx),%rcx
  0x00007f75704a4142: jmpq   *%rcx

AHE@0x00007f75800e8e98: 0xbb000000 i2c: 0x00007f75704a4220 c2i: 0x00007f75704a4338 c2iUV: 0x00007f75704a430b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/net/URL; (548 bytes generated)
c2i argument handler starts at 0x7f75704a4338
  0x00007f75704a4220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a4224: movabs $0x7f757036e3e0,%r11
  0x00007f75704a422e: cmp    %r11,%rax
  0x00007f75704a4231: jbe    0x00007f75704a424a
  0x00007f75704a4237: movabs $0x7f757046e3e0,%r11
  0x00007f75704a4241: cmp    %r11,%rax
  0x00007f75704a4244: jb     0x00007f75704a42e7
  0x00007f75704a424a: movabs $0x7f7570369420,%r11
  0x00007f75704a4254: cmp    %r11,%rax
  0x00007f75704a4257: jbe    0x00007f75704a4270
  0x00007f75704a425d: movabs $0x7f757036de58,%r11
  0x00007f75704a4267: cmp    %r11,%rax
  0x00007f75704a426a: jb     0x00007f75704a42e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a4270: mov    %rsp,-0x28(%rsp)
  0x00007f75704a4275: sub    $0x80,%rsp
  0x00007f75704a427c: mov    %rax,0x78(%rsp)
  0x00007f75704a4281: mov    %rcx,0x70(%rsp)
  0x00007f75704a4286: mov    %rdx,0x68(%rsp)
  0x00007f75704a428b: mov    %rbx,0x60(%rsp)
  0x00007f75704a4290: mov    %rbp,0x50(%rsp)
  0x00007f75704a4295: mov    %rsi,0x48(%rsp)
  0x00007f75704a429a: mov    %rdi,0x40(%rsp)
  0x00007f75704a429f: mov    %r8,0x38(%rsp)
  0x00007f75704a42a4: mov    %r9,0x30(%rsp)
  0x00007f75704a42a9: mov    %r10,0x28(%rsp)
  0x00007f75704a42ae: mov    %r11,0x20(%rsp)
  0x00007f75704a42b3: mov    %r12,0x18(%rsp)
  0x00007f75704a42b8: mov    %r13,0x10(%rsp)
  0x00007f75704a42bd: mov    %r14,0x8(%rsp)
  0x00007f75704a42c2: mov    %r15,(%rsp)
  0x00007f75704a42c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a42d0: movabs $0x7f75704a4270,%rsi
  0x00007f75704a42da: mov    %rsp,%rdx
  0x00007f75704a42dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a42e1: callq  0x00007f75853729fa
  0x00007f75704a42e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a42e7: mov    %rsp,%r11
  0x00007f75704a42ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a42ee: push   %rax
  0x00007f75704a42ef: mov    %r11,%rax
  0x00007f75704a42f2: mov    0x50(%rbx),%r11
  0x00007f75704a42f6: mov    0x10(%rax),%rsi
  0x00007f75704a42fa: mov    0x8(%rax),%rdx
  0x00007f75704a42fe: mov    %rbx,0x258(%r15)
  0x00007f75704a4305: mov    %rbx,%rax
  0x00007f75704a4308: jmpq   *%r11
  0x00007f75704a430b: mov    0x8(%rsi),%ebx
  0x00007f75704a430e: shl    $0x3,%rbx
  0x00007f75704a4312: cmp    0x10(%rax),%rbx
  0x00007f75704a4316: mov    0x8(%rax),%rbx
  0x00007f75704a431a: je     0x00007f75704a4325
  0x00007f75704a4320: jmpq   0x00007f757046ec40
  0x00007f75704a4325: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a432d: je     0x00007f75704a4428
  0x00007f75704a4333: jmpq   0x00007f757046ec40
  0x00007f75704a4338: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4340: je     0x00007f75704a4428
  0x00007f75704a4346: mov    %rsp,%r13
  0x00007f75704a4349: mov    (%rsp),%rax
  0x00007f75704a434d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4351: pushfq 
  0x00007f75704a4352: sub    $0x8,%rsp
  0x00007f75704a4356: mov    %rsp,-0x28(%rsp)
  0x00007f75704a435b: sub    $0x80,%rsp
  0x00007f75704a4362: mov    %rax,0x78(%rsp)
  0x00007f75704a4367: mov    %rcx,0x70(%rsp)
  0x00007f75704a436c: mov    %rdx,0x68(%rsp)
  0x00007f75704a4371: mov    %rbx,0x60(%rsp)
  0x00007f75704a4376: mov    %rbp,0x50(%rsp)
  0x00007f75704a437b: mov    %rsi,0x48(%rsp)
  0x00007f75704a4380: mov    %rdi,0x40(%rsp)
  0x00007f75704a4385: mov    %r8,0x38(%rsp)
  0x00007f75704a438a: mov    %r9,0x30(%rsp)
  0x00007f75704a438f: mov    %r10,0x28(%rsp)
  0x00007f75704a4394: mov    %r11,0x20(%rsp)
  0x00007f75704a4399: mov    %r12,0x18(%rsp)
  0x00007f75704a439e: mov    %r13,0x10(%rsp)
  0x00007f75704a43a3: mov    %r14,0x8(%rsp)
  0x00007f75704a43a8: mov    %r15,(%rsp)
  0x00007f75704a43ac: sub    $0x200,%rsp
  0x00007f75704a43b3: fxsave64 (%rsp)
  0x00007f75704a43b8: mov    %rbx,%rdi
  0x00007f75704a43bb: mov    %rax,%rsi
  0x00007f75704a43be: callq  0x00007f7585522bca
  0x00007f75704a43c3: fxrstor64 (%rsp)
  0x00007f75704a43c8: add    $0x200,%rsp
  0x00007f75704a43cf: mov    (%rsp),%r15
  0x00007f75704a43d3: mov    0x8(%rsp),%r14
  0x00007f75704a43d8: mov    0x10(%rsp),%r13
  0x00007f75704a43dd: mov    0x18(%rsp),%r12
  0x00007f75704a43e2: mov    0x20(%rsp),%r11
  0x00007f75704a43e7: mov    0x28(%rsp),%r10
  0x00007f75704a43ec: mov    0x30(%rsp),%r9
  0x00007f75704a43f1: mov    0x38(%rsp),%r8
  0x00007f75704a43f6: mov    0x40(%rsp),%rdi
  0x00007f75704a43fb: mov    0x48(%rsp),%rsi
  0x00007f75704a4400: mov    0x50(%rsp),%rbp
  0x00007f75704a4405: mov    0x60(%rsp),%rbx
  0x00007f75704a440a: mov    0x68(%rsp),%rdx
  0x00007f75704a440f: mov    0x70(%rsp),%rcx
  0x00007f75704a4414: mov    0x78(%rsp),%rax
  0x00007f75704a4419: add    $0x80,%rsp
  0x00007f75704a4420: add    $0x8,%rsp
  0x00007f75704a4424: popfq  
  0x00007f75704a4425: mov    %r13,%rsp
  0x00007f75704a4428: pop    %rax
  0x00007f75704a4429: mov    %rsp,%r13
  0x00007f75704a442c: sub    $0x20,%rsp
  0x00007f75704a4430: mov    %rax,(%rsp)
  0x00007f75704a4434: mov    %rsi,0x10(%rsp)
  0x00007f75704a4439: mov    %rdx,0x8(%rsp)
  0x00007f75704a443e: mov    0x40(%rbx),%rcx
  0x00007f75704a4442: jmpq   *%rcx

AHE@0x00007f75800e8ee0: 0xbb000000 i2c: 0x00007f75704a4520 c2i: 0x00007f75704a4638 c2iUV: 0x00007f75704a460b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/io/InputStream; (548 bytes generated)
c2i argument handler starts at 0x7f75704a4638
  0x00007f75704a4520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a4524: movabs $0x7f757036e3e0,%r11
  0x00007f75704a452e: cmp    %r11,%rax
  0x00007f75704a4531: jbe    0x00007f75704a454a
  0x00007f75704a4537: movabs $0x7f757046e3e0,%r11
  0x00007f75704a4541: cmp    %r11,%rax
  0x00007f75704a4544: jb     0x00007f75704a45e7
  0x00007f75704a454a: movabs $0x7f7570369420,%r11
  0x00007f75704a4554: cmp    %r11,%rax
  0x00007f75704a4557: jbe    0x00007f75704a4570
  0x00007f75704a455d: movabs $0x7f757036de58,%r11
  0x00007f75704a4567: cmp    %r11,%rax
  0x00007f75704a456a: jb     0x00007f75704a45e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a4570: mov    %rsp,-0x28(%rsp)
  0x00007f75704a4575: sub    $0x80,%rsp
  0x00007f75704a457c: mov    %rax,0x78(%rsp)
  0x00007f75704a4581: mov    %rcx,0x70(%rsp)
  0x00007f75704a4586: mov    %rdx,0x68(%rsp)
  0x00007f75704a458b: mov    %rbx,0x60(%rsp)
  0x00007f75704a4590: mov    %rbp,0x50(%rsp)
  0x00007f75704a4595: mov    %rsi,0x48(%rsp)
  0x00007f75704a459a: mov    %rdi,0x40(%rsp)
  0x00007f75704a459f: mov    %r8,0x38(%rsp)
  0x00007f75704a45a4: mov    %r9,0x30(%rsp)
  0x00007f75704a45a9: mov    %r10,0x28(%rsp)
  0x00007f75704a45ae: mov    %r11,0x20(%rsp)
  0x00007f75704a45b3: mov    %r12,0x18(%rsp)
  0x00007f75704a45b8: mov    %r13,0x10(%rsp)
  0x00007f75704a45bd: mov    %r14,0x8(%rsp)
  0x00007f75704a45c2: mov    %r15,(%rsp)
  0x00007f75704a45c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a45d0: movabs $0x7f75704a4570,%rsi
  0x00007f75704a45da: mov    %rsp,%rdx
  0x00007f75704a45dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a45e1: callq  0x00007f75853729fa
  0x00007f75704a45e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a45e7: mov    %rsp,%r11
  0x00007f75704a45ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a45ee: push   %rax
  0x00007f75704a45ef: mov    %r11,%rax
  0x00007f75704a45f2: mov    0x50(%rbx),%r11
  0x00007f75704a45f6: mov    0x10(%rax),%rsi
  0x00007f75704a45fa: mov    0x8(%rax),%rdx
  0x00007f75704a45fe: mov    %rbx,0x258(%r15)
  0x00007f75704a4605: mov    %rbx,%rax
  0x00007f75704a4608: jmpq   *%r11
  0x00007f75704a460b: mov    0x8(%rsi),%ebx
  0x00007f75704a460e: shl    $0x3,%rbx
  0x00007f75704a4612: cmp    0x10(%rax),%rbx
  0x00007f75704a4616: mov    0x8(%rax),%rbx
  0x00007f75704a461a: je     0x00007f75704a4625
  0x00007f75704a4620: jmpq   0x00007f757046ec40
  0x00007f75704a4625: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a462d: je     0x00007f75704a4728
  0x00007f75704a4633: jmpq   0x00007f757046ec40
  0x00007f75704a4638: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4640: je     0x00007f75704a4728
  0x00007f75704a4646: mov    %rsp,%r13
  0x00007f75704a4649: mov    (%rsp),%rax
  0x00007f75704a464d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4651: pushfq 
  0x00007f75704a4652: sub    $0x8,%rsp
  0x00007f75704a4656: mov    %rsp,-0x28(%rsp)
  0x00007f75704a465b: sub    $0x80,%rsp
  0x00007f75704a4662: mov    %rax,0x78(%rsp)
  0x00007f75704a4667: mov    %rcx,0x70(%rsp)
  0x00007f75704a466c: mov    %rdx,0x68(%rsp)
  0x00007f75704a4671: mov    %rbx,0x60(%rsp)
  0x00007f75704a4676: mov    %rbp,0x50(%rsp)
  0x00007f75704a467b: mov    %rsi,0x48(%rsp)
  0x00007f75704a4680: mov    %rdi,0x40(%rsp)
  0x00007f75704a4685: mov    %r8,0x38(%rsp)
  0x00007f75704a468a: mov    %r9,0x30(%rsp)
  0x00007f75704a468f: mov    %r10,0x28(%rsp)
  0x00007f75704a4694: mov    %r11,0x20(%rsp)
  0x00007f75704a4699: mov    %r12,0x18(%rsp)
  0x00007f75704a469e: mov    %r13,0x10(%rsp)
  0x00007f75704a46a3: mov    %r14,0x8(%rsp)
  0x00007f75704a46a8: mov    %r15,(%rsp)
  0x00007f75704a46ac: sub    $0x200,%rsp
  0x00007f75704a46b3: fxsave64 (%rsp)
  0x00007f75704a46b8: mov    %rbx,%rdi
  0x00007f75704a46bb: mov    %rax,%rsi
  0x00007f75704a46be: callq  0x00007f7585522bca
  0x00007f75704a46c3: fxrstor64 (%rsp)
  0x00007f75704a46c8: add    $0x200,%rsp
  0x00007f75704a46cf: mov    (%rsp),%r15
  0x00007f75704a46d3: mov    0x8(%rsp),%r14
  0x00007f75704a46d8: mov    0x10(%rsp),%r13
  0x00007f75704a46dd: mov    0x18(%rsp),%r12
  0x00007f75704a46e2: mov    0x20(%rsp),%r11
  0x00007f75704a46e7: mov    0x28(%rsp),%r10
  0x00007f75704a46ec: mov    0x30(%rsp),%r9
  0x00007f75704a46f1: mov    0x38(%rsp),%r8
  0x00007f75704a46f6: mov    0x40(%rsp),%rdi
  0x00007f75704a46fb: mov    0x48(%rsp),%rsi
  0x00007f75704a4700: mov    0x50(%rsp),%rbp
  0x00007f75704a4705: mov    0x60(%rsp),%rbx
  0x00007f75704a470a: mov    0x68(%rsp),%rdx
  0x00007f75704a470f: mov    0x70(%rsp),%rcx
  0x00007f75704a4714: mov    0x78(%rsp),%rax
  0x00007f75704a4719: add    $0x80,%rsp
  0x00007f75704a4720: add    $0x8,%rsp
  0x00007f75704a4724: popfq  
  0x00007f75704a4725: mov    %r13,%rsp
  0x00007f75704a4728: pop    %rax
  0x00007f75704a4729: mov    %rsp,%r13
  0x00007f75704a472c: sub    $0x20,%rsp
  0x00007f75704a4730: mov    %rax,(%rsp)
  0x00007f75704a4734: mov    %rsi,0x10(%rsp)
  0x00007f75704a4739: mov    %rdx,0x8(%rsp)
  0x00007f75704a473e: mov    0x40(%rbx),%rcx
  0x00007f75704a4742: jmpq   *%rcx

AHE@0x00007f75800e8f28: 0xbbb00000 i2c: 0x00007f75704a4820 c2i: 0x00007f75704a493c c2iUV: 0x00007f75704a490f
i2c argument handler #0 for: receiver (Ljava/lang/Class;[Ljava/lang/Object;)V (557 bytes generated)
c2i argument handler starts at 0x7f75704a493c
  0x00007f75704a4820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a4824: movabs $0x7f757036e3e0,%r11
  0x00007f75704a482e: cmp    %r11,%rax
  0x00007f75704a4831: jbe    0x00007f75704a484a
  0x00007f75704a4837: movabs $0x7f757046e3e0,%r11
  0x00007f75704a4841: cmp    %r11,%rax
  0x00007f75704a4844: jb     0x00007f75704a48e7
  0x00007f75704a484a: movabs $0x7f7570369420,%r11
  0x00007f75704a4854: cmp    %r11,%rax
  0x00007f75704a4857: jbe    0x00007f75704a4870
  0x00007f75704a485d: movabs $0x7f757036de58,%r11
  0x00007f75704a4867: cmp    %r11,%rax
  0x00007f75704a486a: jb     0x00007f75704a48e7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a4870: mov    %rsp,-0x28(%rsp)
  0x00007f75704a4875: sub    $0x80,%rsp
  0x00007f75704a487c: mov    %rax,0x78(%rsp)
  0x00007f75704a4881: mov    %rcx,0x70(%rsp)
  0x00007f75704a4886: mov    %rdx,0x68(%rsp)
  0x00007f75704a488b: mov    %rbx,0x60(%rsp)
  0x00007f75704a4890: mov    %rbp,0x50(%rsp)
  0x00007f75704a4895: mov    %rsi,0x48(%rsp)
  0x00007f75704a489a: mov    %rdi,0x40(%rsp)
  0x00007f75704a489f: mov    %r8,0x38(%rsp)
  0x00007f75704a48a4: mov    %r9,0x30(%rsp)
  0x00007f75704a48a9: mov    %r10,0x28(%rsp)
  0x00007f75704a48ae: mov    %r11,0x20(%rsp)
  0x00007f75704a48b3: mov    %r12,0x18(%rsp)
  0x00007f75704a48b8: mov    %r13,0x10(%rsp)
  0x00007f75704a48bd: mov    %r14,0x8(%rsp)
  0x00007f75704a48c2: mov    %r15,(%rsp)
  0x00007f75704a48c6: movabs $0x7f758592f470,%rdi
  0x00007f75704a48d0: movabs $0x7f75704a4870,%rsi
  0x00007f75704a48da: mov    %rsp,%rdx
  0x00007f75704a48dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a48e1: callq  0x00007f75853729fa
  0x00007f75704a48e6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a48e7: mov    %rsp,%r11
  0x00007f75704a48ea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a48ee: push   %rax
  0x00007f75704a48ef: mov    %r11,%rax
  0x00007f75704a48f2: mov    0x50(%rbx),%r11
  0x00007f75704a48f6: mov    0x18(%rax),%rsi
  0x00007f75704a48fa: mov    0x10(%rax),%rdx
  0x00007f75704a48fe: mov    0x8(%rax),%rcx
  0x00007f75704a4902: mov    %rbx,0x258(%r15)
  0x00007f75704a4909: mov    %rbx,%rax
  0x00007f75704a490c: jmpq   *%r11
  0x00007f75704a490f: mov    0x8(%rsi),%ebx
  0x00007f75704a4912: shl    $0x3,%rbx
  0x00007f75704a4916: cmp    0x10(%rax),%rbx
  0x00007f75704a491a: mov    0x8(%rax),%rbx
  0x00007f75704a491e: je     0x00007f75704a4929
  0x00007f75704a4924: jmpq   0x00007f757046ec40
  0x00007f75704a4929: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4931: je     0x00007f75704a4a2c
  0x00007f75704a4937: jmpq   0x00007f757046ec40
  0x00007f75704a493c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4944: je     0x00007f75704a4a2c
  0x00007f75704a494a: mov    %rsp,%r13
  0x00007f75704a494d: mov    (%rsp),%rax
  0x00007f75704a4951: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4955: pushfq 
  0x00007f75704a4956: sub    $0x8,%rsp
  0x00007f75704a495a: mov    %rsp,-0x28(%rsp)
  0x00007f75704a495f: sub    $0x80,%rsp
  0x00007f75704a4966: mov    %rax,0x78(%rsp)
  0x00007f75704a496b: mov    %rcx,0x70(%rsp)
  0x00007f75704a4970: mov    %rdx,0x68(%rsp)
  0x00007f75704a4975: mov    %rbx,0x60(%rsp)
  0x00007f75704a497a: mov    %rbp,0x50(%rsp)
  0x00007f75704a497f: mov    %rsi,0x48(%rsp)
  0x00007f75704a4984: mov    %rdi,0x40(%rsp)
  0x00007f75704a4989: mov    %r8,0x38(%rsp)
  0x00007f75704a498e: mov    %r9,0x30(%rsp)
  0x00007f75704a4993: mov    %r10,0x28(%rsp)
  0x00007f75704a4998: mov    %r11,0x20(%rsp)
  0x00007f75704a499d: mov    %r12,0x18(%rsp)
  0x00007f75704a49a2: mov    %r13,0x10(%rsp)
  0x00007f75704a49a7: mov    %r14,0x8(%rsp)
  0x00007f75704a49ac: mov    %r15,(%rsp)
  0x00007f75704a49b0: sub    $0x200,%rsp
  0x00007f75704a49b7: fxsave64 (%rsp)
  0x00007f75704a49bc: mov    %rbx,%rdi
  0x00007f75704a49bf: mov    %rax,%rsi
  0x00007f75704a49c2: callq  0x00007f7585522bca
  0x00007f75704a49c7: fxrstor64 (%rsp)
  0x00007f75704a49cc: add    $0x200,%rsp
  0x00007f75704a49d3: mov    (%rsp),%r15
  0x00007f75704a49d7: mov    0x8(%rsp),%r14
  0x00007f75704a49dc: mov    0x10(%rsp),%r13
  0x00007f75704a49e1: mov    0x18(%rsp),%r12
  0x00007f75704a49e6: mov    0x20(%rsp),%r11
  0x00007f75704a49eb: mov    0x28(%rsp),%r10
  0x00007f75704a49f0: mov    0x30(%rsp),%r9
  0x00007f75704a49f5: mov    0x38(%rsp),%r8
  0x00007f75704a49fa: mov    0x40(%rsp),%rdi
  0x00007f75704a49ff: mov    0x48(%rsp),%rsi
  0x00007f75704a4a04: mov    0x50(%rsp),%rbp
  0x00007f75704a4a09: mov    0x60(%rsp),%rbx
  0x00007f75704a4a0e: mov    0x68(%rsp),%rdx
  0x00007f75704a4a13: mov    0x70(%rsp),%rcx
  0x00007f75704a4a18: mov    0x78(%rsp),%rax
  0x00007f75704a4a1d: add    $0x80,%rsp
  0x00007f75704a4a24: add    $0x8,%rsp
  0x00007f75704a4a28: popfq  
  0x00007f75704a4a29: mov    %r13,%rsp
  0x00007f75704a4a2c: pop    %rax
  0x00007f75704a4a2d: mov    %rsp,%r13
  0x00007f75704a4a30: sub    $0x20,%rsp
  0x00007f75704a4a34: mov    %rax,(%rsp)
  0x00007f75704a4a38: mov    %rsi,0x18(%rsp)
  0x00007f75704a4a3d: mov    %rdx,0x10(%rsp)
  0x00007f75704a4a42: mov    %rcx,0x8(%rsp)
  0x00007f75704a4a47: mov    0x40(%rbx),%rcx
  0x00007f75704a4a4b: jmpq   *%rcx

AHE@0x00007f75800e8f70: 0xbb000000 i2c: 0x00007f75704a4b20 c2i: 0x00007f75704a4c38 c2iUV: 0x00007f75704a4c0b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Package; (548 bytes generated)
c2i argument handler starts at 0x7f75704a4c38
  0x00007f75704a4b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a4b24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a4b2e: cmp    %r11,%rax
  0x00007f75704a4b31: jbe    0x00007f75704a4b4a
  0x00007f75704a4b37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a4b41: cmp    %r11,%rax
  0x00007f75704a4b44: jb     0x00007f75704a4be7
  0x00007f75704a4b4a: movabs $0x7f7570369420,%r11
  0x00007f75704a4b54: cmp    %r11,%rax
  0x00007f75704a4b57: jbe    0x00007f75704a4b70
  0x00007f75704a4b5d: movabs $0x7f757036de58,%r11
  0x00007f75704a4b67: cmp    %r11,%rax
  0x00007f75704a4b6a: jb     0x00007f75704a4be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a4b70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a4b75: sub    $0x80,%rsp
  0x00007f75704a4b7c: mov    %rax,0x78(%rsp)
  0x00007f75704a4b81: mov    %rcx,0x70(%rsp)
  0x00007f75704a4b86: mov    %rdx,0x68(%rsp)
  0x00007f75704a4b8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a4b90: mov    %rbp,0x50(%rsp)
  0x00007f75704a4b95: mov    %rsi,0x48(%rsp)
  0x00007f75704a4b9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a4b9f: mov    %r8,0x38(%rsp)
  0x00007f75704a4ba4: mov    %r9,0x30(%rsp)
  0x00007f75704a4ba9: mov    %r10,0x28(%rsp)
  0x00007f75704a4bae: mov    %r11,0x20(%rsp)
  0x00007f75704a4bb3: mov    %r12,0x18(%rsp)
  0x00007f75704a4bb8: mov    %r13,0x10(%rsp)
  0x00007f75704a4bbd: mov    %r14,0x8(%rsp)
  0x00007f75704a4bc2: mov    %r15,(%rsp)
  0x00007f75704a4bc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a4bd0: movabs $0x7f75704a4b70,%rsi
  0x00007f75704a4bda: mov    %rsp,%rdx
  0x00007f75704a4bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4be1: callq  0x00007f75853729fa
  0x00007f75704a4be6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a4be7: mov    %rsp,%r11
  0x00007f75704a4bea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4bee: push   %rax
  0x00007f75704a4bef: mov    %r11,%rax
  0x00007f75704a4bf2: mov    0x50(%rbx),%r11
  0x00007f75704a4bf6: mov    0x10(%rax),%rsi
  0x00007f75704a4bfa: mov    0x8(%rax),%rdx
  0x00007f75704a4bfe: mov    %rbx,0x258(%r15)
  0x00007f75704a4c05: mov    %rbx,%rax
  0x00007f75704a4c08: jmpq   *%r11
  0x00007f75704a4c0b: mov    0x8(%rsi),%ebx
  0x00007f75704a4c0e: shl    $0x3,%rbx
  0x00007f75704a4c12: cmp    0x10(%rax),%rbx
  0x00007f75704a4c16: mov    0x8(%rax),%rbx
  0x00007f75704a4c1a: je     0x00007f75704a4c25
  0x00007f75704a4c20: jmpq   0x00007f757046ec40
  0x00007f75704a4c25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4c2d: je     0x00007f75704a4d28
  0x00007f75704a4c33: jmpq   0x00007f757046ec40
  0x00007f75704a4c38: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4c40: je     0x00007f75704a4d28
  0x00007f75704a4c46: mov    %rsp,%r13
  0x00007f75704a4c49: mov    (%rsp),%rax
  0x00007f75704a4c4d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4c51: pushfq 
  0x00007f75704a4c52: sub    $0x8,%rsp
  0x00007f75704a4c56: mov    %rsp,-0x28(%rsp)
  0x00007f75704a4c5b: sub    $0x80,%rsp
  0x00007f75704a4c62: mov    %rax,0x78(%rsp)
  0x00007f75704a4c67: mov    %rcx,0x70(%rsp)
  0x00007f75704a4c6c: mov    %rdx,0x68(%rsp)
  0x00007f75704a4c71: mov    %rbx,0x60(%rsp)
  0x00007f75704a4c76: mov    %rbp,0x50(%rsp)
  0x00007f75704a4c7b: mov    %rsi,0x48(%rsp)
  0x00007f75704a4c80: mov    %rdi,0x40(%rsp)
  0x00007f75704a4c85: mov    %r8,0x38(%rsp)
  0x00007f75704a4c8a: mov    %r9,0x30(%rsp)
  0x00007f75704a4c8f: mov    %r10,0x28(%rsp)
  0x00007f75704a4c94: mov    %r11,0x20(%rsp)
  0x00007f75704a4c99: mov    %r12,0x18(%rsp)
  0x00007f75704a4c9e: mov    %r13,0x10(%rsp)
  0x00007f75704a4ca3: mov    %r14,0x8(%rsp)
  0x00007f75704a4ca8: mov    %r15,(%rsp)
  0x00007f75704a4cac: sub    $0x200,%rsp
  0x00007f75704a4cb3: fxsave64 (%rsp)
  0x00007f75704a4cb8: mov    %rbx,%rdi
  0x00007f75704a4cbb: mov    %rax,%rsi
  0x00007f75704a4cbe: callq  0x00007f7585522bca
  0x00007f75704a4cc3: fxrstor64 (%rsp)
  0x00007f75704a4cc8: add    $0x200,%rsp
  0x00007f75704a4ccf: mov    (%rsp),%r15
  0x00007f75704a4cd3: mov    0x8(%rsp),%r14
  0x00007f75704a4cd8: mov    0x10(%rsp),%r13
  0x00007f75704a4cdd: mov    0x18(%rsp),%r12
  0x00007f75704a4ce2: mov    0x20(%rsp),%r11
  0x00007f75704a4ce7: mov    0x28(%rsp),%r10
  0x00007f75704a4cec: mov    0x30(%rsp),%r9
  0x00007f75704a4cf1: mov    0x38(%rsp),%r8
  0x00007f75704a4cf6: mov    0x40(%rsp),%rdi
  0x00007f75704a4cfb: mov    0x48(%rsp),%rsi
  0x00007f75704a4d00: mov    0x50(%rsp),%rbp
  0x00007f75704a4d05: mov    0x60(%rsp),%rbx
  0x00007f75704a4d0a: mov    0x68(%rsp),%rdx
  0x00007f75704a4d0f: mov    0x70(%rsp),%rcx
  0x00007f75704a4d14: mov    0x78(%rsp),%rax
  0x00007f75704a4d19: add    $0x80,%rsp
  0x00007f75704a4d20: add    $0x8,%rsp
  0x00007f75704a4d24: popfq  
  0x00007f75704a4d25: mov    %r13,%rsp
  0x00007f75704a4d28: pop    %rax
  0x00007f75704a4d29: mov    %rsp,%r13
  0x00007f75704a4d2c: sub    $0x20,%rsp
  0x00007f75704a4d30: mov    %rax,(%rsp)
  0x00007f75704a4d34: mov    %rsi,0x10(%rsp)
  0x00007f75704a4d39: mov    %rdx,0x8(%rsp)
  0x00007f75704a4d3e: mov    0x40(%rbx),%rcx
  0x00007f75704a4d42: jmpq   *%rcx

AHE@0x00007f75800e8fb8: 0xb0000000 i2c: 0x00007f75704a4e20 c2i: 0x00007f75704a4f34 c2iUV: 0x00007f75704a4f07
i2c argument handler #0 for: static (Ljava/lang/Class;)Ljava/lang/ClassLoader; (539 bytes generated)
c2i argument handler starts at 0x7f75704a4f34
  0x00007f75704a4e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a4e24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a4e2e: cmp    %r11,%rax
  0x00007f75704a4e31: jbe    0x00007f75704a4e4a
  0x00007f75704a4e37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a4e41: cmp    %r11,%rax
  0x00007f75704a4e44: jb     0x00007f75704a4ee7
  0x00007f75704a4e4a: movabs $0x7f7570369420,%r11
  0x00007f75704a4e54: cmp    %r11,%rax
  0x00007f75704a4e57: jbe    0x00007f75704a4e70
  0x00007f75704a4e5d: movabs $0x7f757036de58,%r11
  0x00007f75704a4e67: cmp    %r11,%rax
  0x00007f75704a4e6a: jb     0x00007f75704a4ee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a4e70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a4e75: sub    $0x80,%rsp
  0x00007f75704a4e7c: mov    %rax,0x78(%rsp)
  0x00007f75704a4e81: mov    %rcx,0x70(%rsp)
  0x00007f75704a4e86: mov    %rdx,0x68(%rsp)
  0x00007f75704a4e8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a4e90: mov    %rbp,0x50(%rsp)
  0x00007f75704a4e95: mov    %rsi,0x48(%rsp)
  0x00007f75704a4e9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a4e9f: mov    %r8,0x38(%rsp)
  0x00007f75704a4ea4: mov    %r9,0x30(%rsp)
  0x00007f75704a4ea9: mov    %r10,0x28(%rsp)
  0x00007f75704a4eae: mov    %r11,0x20(%rsp)
  0x00007f75704a4eb3: mov    %r12,0x18(%rsp)
  0x00007f75704a4eb8: mov    %r13,0x10(%rsp)
  0x00007f75704a4ebd: mov    %r14,0x8(%rsp)
  0x00007f75704a4ec2: mov    %r15,(%rsp)
  0x00007f75704a4ec6: movabs $0x7f758592f470,%rdi
  0x00007f75704a4ed0: movabs $0x7f75704a4e70,%rsi
  0x00007f75704a4eda: mov    %rsp,%rdx
  0x00007f75704a4edd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4ee1: callq  0x00007f75853729fa
  0x00007f75704a4ee6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a4ee7: mov    %rsp,%r11
  0x00007f75704a4eea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4eee: push   %rax
  0x00007f75704a4eef: mov    %r11,%rax
  0x00007f75704a4ef2: mov    0x50(%rbx),%r11
  0x00007f75704a4ef6: mov    0x8(%rax),%rsi
  0x00007f75704a4efa: mov    %rbx,0x258(%r15)
  0x00007f75704a4f01: mov    %rbx,%rax
  0x00007f75704a4f04: jmpq   *%r11
  0x00007f75704a4f07: mov    0x8(%rsi),%ebx
  0x00007f75704a4f0a: shl    $0x3,%rbx
  0x00007f75704a4f0e: cmp    0x10(%rax),%rbx
  0x00007f75704a4f12: mov    0x8(%rax),%rbx
  0x00007f75704a4f16: je     0x00007f75704a4f21
  0x00007f75704a4f1c: jmpq   0x00007f757046ec40
  0x00007f75704a4f21: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4f29: je     0x00007f75704a5024
  0x00007f75704a4f2f: jmpq   0x00007f757046ec40
  0x00007f75704a4f34: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a4f3c: je     0x00007f75704a5024
  0x00007f75704a4f42: mov    %rsp,%r13
  0x00007f75704a4f45: mov    (%rsp),%rax
  0x00007f75704a4f49: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a4f4d: pushfq 
  0x00007f75704a4f4e: sub    $0x8,%rsp
  0x00007f75704a4f52: mov    %rsp,-0x28(%rsp)
  0x00007f75704a4f57: sub    $0x80,%rsp
  0x00007f75704a4f5e: mov    %rax,0x78(%rsp)
  0x00007f75704a4f63: mov    %rcx,0x70(%rsp)
  0x00007f75704a4f68: mov    %rdx,0x68(%rsp)
  0x00007f75704a4f6d: mov    %rbx,0x60(%rsp)
  0x00007f75704a4f72: mov    %rbp,0x50(%rsp)
  0x00007f75704a4f77: mov    %rsi,0x48(%rsp)
  0x00007f75704a4f7c: mov    %rdi,0x40(%rsp)
  0x00007f75704a4f81: mov    %r8,0x38(%rsp)
  0x00007f75704a4f86: mov    %r9,0x30(%rsp)
  0x00007f75704a4f8b: mov    %r10,0x28(%rsp)
  0x00007f75704a4f90: mov    %r11,0x20(%rsp)
  0x00007f75704a4f95: mov    %r12,0x18(%rsp)
  0x00007f75704a4f9a: mov    %r13,0x10(%rsp)
  0x00007f75704a4f9f: mov    %r14,0x8(%rsp)
  0x00007f75704a4fa4: mov    %r15,(%rsp)
  0x00007f75704a4fa8: sub    $0x200,%rsp
  0x00007f75704a4faf: fxsave64 (%rsp)
  0x00007f75704a4fb4: mov    %rbx,%rdi
  0x00007f75704a4fb7: mov    %rax,%rsi
  0x00007f75704a4fba: callq  0x00007f7585522bca
  0x00007f75704a4fbf: fxrstor64 (%rsp)
  0x00007f75704a4fc4: add    $0x200,%rsp
  0x00007f75704a4fcb: mov    (%rsp),%r15
  0x00007f75704a4fcf: mov    0x8(%rsp),%r14
  0x00007f75704a4fd4: mov    0x10(%rsp),%r13
  0x00007f75704a4fd9: mov    0x18(%rsp),%r12
  0x00007f75704a4fde: mov    0x20(%rsp),%r11
  0x00007f75704a4fe3: mov    0x28(%rsp),%r10
  0x00007f75704a4fe8: mov    0x30(%rsp),%r9
  0x00007f75704a4fed: mov    0x38(%rsp),%r8
  0x00007f75704a4ff2: mov    0x40(%rsp),%rdi
  0x00007f75704a4ff7: mov    0x48(%rsp),%rsi
  0x00007f75704a4ffc: mov    0x50(%rsp),%rbp
  0x00007f75704a5001: mov    0x60(%rsp),%rbx
  0x00007f75704a5006: mov    0x68(%rsp),%rdx
  0x00007f75704a500b: mov    0x70(%rsp),%rcx
  0x00007f75704a5010: mov    0x78(%rsp),%rax
  0x00007f75704a5015: add    $0x80,%rsp
  0x00007f75704a501c: add    $0x8,%rsp
  0x00007f75704a5020: popfq  
  0x00007f75704a5021: mov    %r13,%rsp
  0x00007f75704a5024: pop    %rax
  0x00007f75704a5025: mov    %rsp,%r13
  0x00007f75704a5028: sub    $0x10,%rsp
  0x00007f75704a502c: mov    %rax,(%rsp)
  0x00007f75704a5030: mov    %rsi,0x8(%rsp)
  0x00007f75704a5035: mov    0x40(%rbx),%rcx
  0x00007f75704a5039: jmpq   *%rcx

AHE@0x00007f75800e9000: 0x i2c: 0x00007f75704a50e0 c2i: 0x00007f75704a51f0 c2iUV: 0x00007f75704a51c3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f75704a51f0
  0x00007f75704a50e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a50e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a50ee: cmp    %r11,%rax
  0x00007f75704a50f1: jbe    0x00007f75704a510a
  0x00007f75704a50f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a5101: cmp    %r11,%rax
  0x00007f75704a5104: jb     0x00007f75704a51a7
  0x00007f75704a510a: movabs $0x7f7570369420,%r11
  0x00007f75704a5114: cmp    %r11,%rax
  0x00007f75704a5117: jbe    0x00007f75704a5130
  0x00007f75704a511d: movabs $0x7f757036de58,%r11
  0x00007f75704a5127: cmp    %r11,%rax
  0x00007f75704a512a: jb     0x00007f75704a51a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a5130: mov    %rsp,-0x28(%rsp)
  0x00007f75704a5135: sub    $0x80,%rsp
  0x00007f75704a513c: mov    %rax,0x78(%rsp)
  0x00007f75704a5141: mov    %rcx,0x70(%rsp)
  0x00007f75704a5146: mov    %rdx,0x68(%rsp)
  0x00007f75704a514b: mov    %rbx,0x60(%rsp)
  0x00007f75704a5150: mov    %rbp,0x50(%rsp)
  0x00007f75704a5155: mov    %rsi,0x48(%rsp)
  0x00007f75704a515a: mov    %rdi,0x40(%rsp)
  0x00007f75704a515f: mov    %r8,0x38(%rsp)
  0x00007f75704a5164: mov    %r9,0x30(%rsp)
  0x00007f75704a5169: mov    %r10,0x28(%rsp)
  0x00007f75704a516e: mov    %r11,0x20(%rsp)
  0x00007f75704a5173: mov    %r12,0x18(%rsp)
  0x00007f75704a5178: mov    %r13,0x10(%rsp)
  0x00007f75704a517d: mov    %r14,0x8(%rsp)
  0x00007f75704a5182: mov    %r15,(%rsp)
  0x00007f75704a5186: movabs $0x7f758592f470,%rdi
  0x00007f75704a5190: movabs $0x7f75704a5130,%rsi
  0x00007f75704a519a: mov    %rsp,%rdx
  0x00007f75704a519d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a51a1: callq  0x00007f75853729fa
  0x00007f75704a51a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a51a7: mov    %rsp,%r11
  0x00007f75704a51aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a51ae: push   %rax
  0x00007f75704a51af: mov    %r11,%rax
  0x00007f75704a51b2: mov    0x50(%rbx),%r11
  0x00007f75704a51b6: mov    %rbx,0x258(%r15)
  0x00007f75704a51bd: mov    %rbx,%rax
  0x00007f75704a51c0: jmpq   *%r11
  0x00007f75704a51c3: mov    0x8(%rsi),%ebx
  0x00007f75704a51c6: shl    $0x3,%rbx
  0x00007f75704a51ca: cmp    0x10(%rax),%rbx
  0x00007f75704a51ce: mov    0x8(%rax),%rbx
  0x00007f75704a51d2: je     0x00007f75704a51dd
  0x00007f75704a51d8: jmpq   0x00007f757046ec40
  0x00007f75704a51dd: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a51e5: je     0x00007f75704a52e0
  0x00007f75704a51eb: jmpq   0x00007f757046ec40
  0x00007f75704a51f0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a51f8: je     0x00007f75704a52e0
  0x00007f75704a51fe: mov    %rsp,%r13
  0x00007f75704a5201: mov    (%rsp),%rax
  0x00007f75704a5205: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5209: pushfq 
  0x00007f75704a520a: sub    $0x8,%rsp
  0x00007f75704a520e: mov    %rsp,-0x28(%rsp)
  0x00007f75704a5213: sub    $0x80,%rsp
  0x00007f75704a521a: mov    %rax,0x78(%rsp)
  0x00007f75704a521f: mov    %rcx,0x70(%rsp)
  0x00007f75704a5224: mov    %rdx,0x68(%rsp)
  0x00007f75704a5229: mov    %rbx,0x60(%rsp)
  0x00007f75704a522e: mov    %rbp,0x50(%rsp)
  0x00007f75704a5233: mov    %rsi,0x48(%rsp)
  0x00007f75704a5238: mov    %rdi,0x40(%rsp)
  0x00007f75704a523d: mov    %r8,0x38(%rsp)
  0x00007f75704a5242: mov    %r9,0x30(%rsp)
  0x00007f75704a5247: mov    %r10,0x28(%rsp)
  0x00007f75704a524c: mov    %r11,0x20(%rsp)
  0x00007f75704a5251: mov    %r12,0x18(%rsp)
  0x00007f75704a5256: mov    %r13,0x10(%rsp)
  0x00007f75704a525b: mov    %r14,0x8(%rsp)
  0x00007f75704a5260: mov    %r15,(%rsp)
  0x00007f75704a5264: sub    $0x200,%rsp
  0x00007f75704a526b: fxsave64 (%rsp)
  0x00007f75704a5270: mov    %rbx,%rdi
  0x00007f75704a5273: mov    %rax,%rsi
  0x00007f75704a5276: callq  0x00007f7585522bca
  0x00007f75704a527b: fxrstor64 (%rsp)
  0x00007f75704a5280: add    $0x200,%rsp
  0x00007f75704a5287: mov    (%rsp),%r15
  0x00007f75704a528b: mov    0x8(%rsp),%r14
  0x00007f75704a5290: mov    0x10(%rsp),%r13
  0x00007f75704a5295: mov    0x18(%rsp),%r12
  0x00007f75704a529a: mov    0x20(%rsp),%r11
  0x00007f75704a529f: mov    0x28(%rsp),%r10
  0x00007f75704a52a4: mov    0x30(%rsp),%r9
  0x00007f75704a52a9: mov    0x38(%rsp),%r8
  0x00007f75704a52ae: mov    0x40(%rsp),%rdi
  0x00007f75704a52b3: mov    0x48(%rsp),%rsi
  0x00007f75704a52b8: mov    0x50(%rsp),%rbp
  0x00007f75704a52bd: mov    0x60(%rsp),%rbx
  0x00007f75704a52c2: mov    0x68(%rsp),%rdx
  0x00007f75704a52c7: mov    0x70(%rsp),%rcx
  0x00007f75704a52cc: mov    0x78(%rsp),%rax
  0x00007f75704a52d1: add    $0x80,%rsp
  0x00007f75704a52d8: add    $0x8,%rsp
  0x00007f75704a52dc: popfq  
  0x00007f75704a52dd: mov    %r13,%rsp
  0x00007f75704a52e0: pop    %rax
  0x00007f75704a52e1: mov    %rsp,%r13
  0x00007f75704a52e4: sub    $0x10,%rsp
  0x00007f75704a52e8: mov    %rax,(%rsp)
  0x00007f75704a52ec: mov    0x40(%rbx),%rcx
  0x00007f75704a52f0: jmpq   *%rcx

AHE@0x00007f75800e9048: 0xbbb00000 i2c: 0x00007f75704a53a0 c2i: 0x00007f75704a54bc c2iUV: 0x00007f75704a548f
i2c argument handler #0 for: receiver (Ljava/lang/Class;Ljava/security/ProtectionDomain;)V (557 bytes generated)
c2i argument handler starts at 0x7f75704a54bc
  0x00007f75704a53a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a53a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a53ae: cmp    %r11,%rax
  0x00007f75704a53b1: jbe    0x00007f75704a53ca
  0x00007f75704a53b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a53c1: cmp    %r11,%rax
  0x00007f75704a53c4: jb     0x00007f75704a5467
  0x00007f75704a53ca: movabs $0x7f7570369420,%r11
  0x00007f75704a53d4: cmp    %r11,%rax
  0x00007f75704a53d7: jbe    0x00007f75704a53f0
  0x00007f75704a53dd: movabs $0x7f757036de58,%r11
  0x00007f75704a53e7: cmp    %r11,%rax
  0x00007f75704a53ea: jb     0x00007f75704a5467
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a53f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a53f5: sub    $0x80,%rsp
  0x00007f75704a53fc: mov    %rax,0x78(%rsp)
  0x00007f75704a5401: mov    %rcx,0x70(%rsp)
  0x00007f75704a5406: mov    %rdx,0x68(%rsp)
  0x00007f75704a540b: mov    %rbx,0x60(%rsp)
  0x00007f75704a5410: mov    %rbp,0x50(%rsp)
  0x00007f75704a5415: mov    %rsi,0x48(%rsp)
  0x00007f75704a541a: mov    %rdi,0x40(%rsp)
  0x00007f75704a541f: mov    %r8,0x38(%rsp)
  0x00007f75704a5424: mov    %r9,0x30(%rsp)
  0x00007f75704a5429: mov    %r10,0x28(%rsp)
  0x00007f75704a542e: mov    %r11,0x20(%rsp)
  0x00007f75704a5433: mov    %r12,0x18(%rsp)
  0x00007f75704a5438: mov    %r13,0x10(%rsp)
  0x00007f75704a543d: mov    %r14,0x8(%rsp)
  0x00007f75704a5442: mov    %r15,(%rsp)
  0x00007f75704a5446: movabs $0x7f758592f470,%rdi
  0x00007f75704a5450: movabs $0x7f75704a53f0,%rsi
  0x00007f75704a545a: mov    %rsp,%rdx
  0x00007f75704a545d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5461: callq  0x00007f75853729fa
  0x00007f75704a5466: hlt    
  ;; } verify_i2ce 
  0x00007f75704a5467: mov    %rsp,%r11
  0x00007f75704a546a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a546e: push   %rax
  0x00007f75704a546f: mov    %r11,%rax
  0x00007f75704a5472: mov    0x50(%rbx),%r11
  0x00007f75704a5476: mov    0x18(%rax),%rsi
  0x00007f75704a547a: mov    0x10(%rax),%rdx
  0x00007f75704a547e: mov    0x8(%rax),%rcx
  0x00007f75704a5482: mov    %rbx,0x258(%r15)
  0x00007f75704a5489: mov    %rbx,%rax
  0x00007f75704a548c: jmpq   *%r11
  0x00007f75704a548f: mov    0x8(%rsi),%ebx
  0x00007f75704a5492: shl    $0x3,%rbx
  0x00007f75704a5496: cmp    0x10(%rax),%rbx
  0x00007f75704a549a: mov    0x8(%rax),%rbx
  0x00007f75704a549e: je     0x00007f75704a54a9
  0x00007f75704a54a4: jmpq   0x00007f757046ec40
  0x00007f75704a54a9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a54b1: je     0x00007f75704a55ac
  0x00007f75704a54b7: jmpq   0x00007f757046ec40
  0x00007f75704a54bc: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a54c4: je     0x00007f75704a55ac
  0x00007f75704a54ca: mov    %rsp,%r13
  0x00007f75704a54cd: mov    (%rsp),%rax
  0x00007f75704a54d1: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a54d5: pushfq 
  0x00007f75704a54d6: sub    $0x8,%rsp
  0x00007f75704a54da: mov    %rsp,-0x28(%rsp)
  0x00007f75704a54df: sub    $0x80,%rsp
  0x00007f75704a54e6: mov    %rax,0x78(%rsp)
  0x00007f75704a54eb: mov    %rcx,0x70(%rsp)
  0x00007f75704a54f0: mov    %rdx,0x68(%rsp)
  0x00007f75704a54f5: mov    %rbx,0x60(%rsp)
  0x00007f75704a54fa: mov    %rbp,0x50(%rsp)
  0x00007f75704a54ff: mov    %rsi,0x48(%rsp)
  0x00007f75704a5504: mov    %rdi,0x40(%rsp)
  0x00007f75704a5509: mov    %r8,0x38(%rsp)
  0x00007f75704a550e: mov    %r9,0x30(%rsp)
  0x00007f75704a5513: mov    %r10,0x28(%rsp)
  0x00007f75704a5518: mov    %r11,0x20(%rsp)
  0x00007f75704a551d: mov    %r12,0x18(%rsp)
  0x00007f75704a5522: mov    %r13,0x10(%rsp)
  0x00007f75704a5527: mov    %r14,0x8(%rsp)
  0x00007f75704a552c: mov    %r15,(%rsp)
  0x00007f75704a5530: sub    $0x200,%rsp
  0x00007f75704a5537: fxsave64 (%rsp)
  0x00007f75704a553c: mov    %rbx,%rdi
  0x00007f75704a553f: mov    %rax,%rsi
  0x00007f75704a5542: callq  0x00007f7585522bca
  0x00007f75704a5547: fxrstor64 (%rsp)
  0x00007f75704a554c: add    $0x200,%rsp
  0x00007f75704a5553: mov    (%rsp),%r15
  0x00007f75704a5557: mov    0x8(%rsp),%r14
  0x00007f75704a555c: mov    0x10(%rsp),%r13
  0x00007f75704a5561: mov    0x18(%rsp),%r12
  0x00007f75704a5566: mov    0x20(%rsp),%r11
  0x00007f75704a556b: mov    0x28(%rsp),%r10
  0x00007f75704a5570: mov    0x30(%rsp),%r9
  0x00007f75704a5575: mov    0x38(%rsp),%r8
  0x00007f75704a557a: mov    0x40(%rsp),%rdi
  0x00007f75704a557f: mov    0x48(%rsp),%rsi
  0x00007f75704a5584: mov    0x50(%rsp),%rbp
  0x00007f75704a5589: mov    0x60(%rsp),%rbx
  0x00007f75704a558e: mov    0x68(%rsp),%rdx
  0x00007f75704a5593: mov    0x70(%rsp),%rcx
  0x00007f75704a5598: mov    0x78(%rsp),%rax
  0x00007f75704a559d: add    $0x80,%rsp
  0x00007f75704a55a4: add    $0x8,%rsp
  0x00007f75704a55a8: popfq  
  0x00007f75704a55a9: mov    %r13,%rsp
  0x00007f75704a55ac: pop    %rax
  0x00007f75704a55ad: mov    %rsp,%r13
  0x00007f75704a55b0: sub    $0x20,%rsp
  0x00007f75704a55b4: mov    %rax,(%rsp)
  0x00007f75704a55b8: mov    %rsi,0x18(%rsp)
  0x00007f75704a55bd: mov    %rdx,0x10(%rsp)
  0x00007f75704a55c2: mov    %rcx,0x8(%rsp)
  0x00007f75704a55c7: mov    0x40(%rbx),%rcx
  0x00007f75704a55cb: jmpq   *%rcx

AHE@0x00007f75800e9090: 0x i2c: 0x00007f75704a56a0 c2i: 0x00007f75704a57b0 c2iUV: 0x00007f75704a5783
i2c argument handler #0 for: static ()Ljava/lang/ClassLoader; (530 bytes generated)
c2i argument handler starts at 0x7f75704a57b0
  0x00007f75704a56a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a56a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a56ae: cmp    %r11,%rax
  0x00007f75704a56b1: jbe    0x00007f75704a56ca
  0x00007f75704a56b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a56c1: cmp    %r11,%rax
  0x00007f75704a56c4: jb     0x00007f75704a5767
  0x00007f75704a56ca: movabs $0x7f7570369420,%r11
  0x00007f75704a56d4: cmp    %r11,%rax
  0x00007f75704a56d7: jbe    0x00007f75704a56f0
  0x00007f75704a56dd: movabs $0x7f757036de58,%r11
  0x00007f75704a56e7: cmp    %r11,%rax
  0x00007f75704a56ea: jb     0x00007f75704a5767
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a56f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a56f5: sub    $0x80,%rsp
  0x00007f75704a56fc: mov    %rax,0x78(%rsp)
  0x00007f75704a5701: mov    %rcx,0x70(%rsp)
  0x00007f75704a5706: mov    %rdx,0x68(%rsp)
  0x00007f75704a570b: mov    %rbx,0x60(%rsp)
  0x00007f75704a5710: mov    %rbp,0x50(%rsp)
  0x00007f75704a5715: mov    %rsi,0x48(%rsp)
  0x00007f75704a571a: mov    %rdi,0x40(%rsp)
  0x00007f75704a571f: mov    %r8,0x38(%rsp)
  0x00007f75704a5724: mov    %r9,0x30(%rsp)
  0x00007f75704a5729: mov    %r10,0x28(%rsp)
  0x00007f75704a572e: mov    %r11,0x20(%rsp)
  0x00007f75704a5733: mov    %r12,0x18(%rsp)
  0x00007f75704a5738: mov    %r13,0x10(%rsp)
  0x00007f75704a573d: mov    %r14,0x8(%rsp)
  0x00007f75704a5742: mov    %r15,(%rsp)
  0x00007f75704a5746: movabs $0x7f758592f470,%rdi
  0x00007f75704a5750: movabs $0x7f75704a56f0,%rsi
  0x00007f75704a575a: mov    %rsp,%rdx
  0x00007f75704a575d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5761: callq  0x00007f75853729fa
  0x00007f75704a5766: hlt    
  ;; } verify_i2ce 
  0x00007f75704a5767: mov    %rsp,%r11
  0x00007f75704a576a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a576e: push   %rax
  0x00007f75704a576f: mov    %r11,%rax
  0x00007f75704a5772: mov    0x50(%rbx),%r11
  0x00007f75704a5776: mov    %rbx,0x258(%r15)
  0x00007f75704a577d: mov    %rbx,%rax
  0x00007f75704a5780: jmpq   *%r11
  0x00007f75704a5783: mov    0x8(%rsi),%ebx
  0x00007f75704a5786: shl    $0x3,%rbx
  0x00007f75704a578a: cmp    0x10(%rax),%rbx
  0x00007f75704a578e: mov    0x8(%rax),%rbx
  0x00007f75704a5792: je     0x00007f75704a579d
  0x00007f75704a5798: jmpq   0x00007f757046ec40
  0x00007f75704a579d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a57a5: je     0x00007f75704a58a0
  0x00007f75704a57ab: jmpq   0x00007f757046ec40
  0x00007f75704a57b0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a57b8: je     0x00007f75704a58a0
  0x00007f75704a57be: mov    %rsp,%r13
  0x00007f75704a57c1: mov    (%rsp),%rax
  0x00007f75704a57c5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a57c9: pushfq 
  0x00007f75704a57ca: sub    $0x8,%rsp
  0x00007f75704a57ce: mov    %rsp,-0x28(%rsp)
  0x00007f75704a57d3: sub    $0x80,%rsp
  0x00007f75704a57da: mov    %rax,0x78(%rsp)
  0x00007f75704a57df: mov    %rcx,0x70(%rsp)
  0x00007f75704a57e4: mov    %rdx,0x68(%rsp)
  0x00007f75704a57e9: mov    %rbx,0x60(%rsp)
  0x00007f75704a57ee: mov    %rbp,0x50(%rsp)
  0x00007f75704a57f3: mov    %rsi,0x48(%rsp)
  0x00007f75704a57f8: mov    %rdi,0x40(%rsp)
  0x00007f75704a57fd: mov    %r8,0x38(%rsp)
  0x00007f75704a5802: mov    %r9,0x30(%rsp)
  0x00007f75704a5807: mov    %r10,0x28(%rsp)
  0x00007f75704a580c: mov    %r11,0x20(%rsp)
  0x00007f75704a5811: mov    %r12,0x18(%rsp)
  0x00007f75704a5816: mov    %r13,0x10(%rsp)
  0x00007f75704a581b: mov    %r14,0x8(%rsp)
  0x00007f75704a5820: mov    %r15,(%rsp)
  0x00007f75704a5824: sub    $0x200,%rsp
  0x00007f75704a582b: fxsave64 (%rsp)
  0x00007f75704a5830: mov    %rbx,%rdi
  0x00007f75704a5833: mov    %rax,%rsi
  0x00007f75704a5836: callq  0x00007f7585522bca
  0x00007f75704a583b: fxrstor64 (%rsp)
  0x00007f75704a5840: add    $0x200,%rsp
  0x00007f75704a5847: mov    (%rsp),%r15
  0x00007f75704a584b: mov    0x8(%rsp),%r14
  0x00007f75704a5850: mov    0x10(%rsp),%r13
  0x00007f75704a5855: mov    0x18(%rsp),%r12
  0x00007f75704a585a: mov    0x20(%rsp),%r11
  0x00007f75704a585f: mov    0x28(%rsp),%r10
  0x00007f75704a5864: mov    0x30(%rsp),%r9
  0x00007f75704a5869: mov    0x38(%rsp),%r8
  0x00007f75704a586e: mov    0x40(%rsp),%rdi
  0x00007f75704a5873: mov    0x48(%rsp),%rsi
  0x00007f75704a5878: mov    0x50(%rsp),%rbp
  0x00007f75704a587d: mov    0x60(%rsp),%rbx
  0x00007f75704a5882: mov    0x68(%rsp),%rdx
  0x00007f75704a5887: mov    0x70(%rsp),%rcx
  0x00007f75704a588c: mov    0x78(%rsp),%rax
  0x00007f75704a5891: add    $0x80,%rsp
  0x00007f75704a5898: add    $0x8,%rsp
  0x00007f75704a589c: popfq  
  0x00007f75704a589d: mov    %r13,%rsp
  0x00007f75704a58a0: pop    %rax
  0x00007f75704a58a1: mov    %rsp,%r13
  0x00007f75704a58a4: sub    $0x10,%rsp
  0x00007f75704a58a8: mov    %rax,(%rsp)
  0x00007f75704a58ac: mov    0x40(%rbx),%rcx
  0x00007f75704a58b0: jmpq   *%rcx

AHE@0x00007f75800e90d8: 0xbb000000 i2c: 0x00007f75704a5960 c2i: 0x00007f75704a5a78 c2iUV: 0x00007f75704a5a4b
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704a5a78
  0x00007f75704a5960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a5964: movabs $0x7f757036e3e0,%r11
  0x00007f75704a596e: cmp    %r11,%rax
  0x00007f75704a5971: jbe    0x00007f75704a598a
  0x00007f75704a5977: movabs $0x7f757046e3e0,%r11
  0x00007f75704a5981: cmp    %r11,%rax
  0x00007f75704a5984: jb     0x00007f75704a5a27
  0x00007f75704a598a: movabs $0x7f7570369420,%r11
  0x00007f75704a5994: cmp    %r11,%rax
  0x00007f75704a5997: jbe    0x00007f75704a59b0
  0x00007f75704a599d: movabs $0x7f757036de58,%r11
  0x00007f75704a59a7: cmp    %r11,%rax
  0x00007f75704a59aa: jb     0x00007f75704a5a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a59b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a59b5: sub    $0x80,%rsp
  0x00007f75704a59bc: mov    %rax,0x78(%rsp)
  0x00007f75704a59c1: mov    %rcx,0x70(%rsp)
  0x00007f75704a59c6: mov    %rdx,0x68(%rsp)
  0x00007f75704a59cb: mov    %rbx,0x60(%rsp)
  0x00007f75704a59d0: mov    %rbp,0x50(%rsp)
  0x00007f75704a59d5: mov    %rsi,0x48(%rsp)
  0x00007f75704a59da: mov    %rdi,0x40(%rsp)
  0x00007f75704a59df: mov    %r8,0x38(%rsp)
  0x00007f75704a59e4: mov    %r9,0x30(%rsp)
  0x00007f75704a59e9: mov    %r10,0x28(%rsp)
  0x00007f75704a59ee: mov    %r11,0x20(%rsp)
  0x00007f75704a59f3: mov    %r12,0x18(%rsp)
  0x00007f75704a59f8: mov    %r13,0x10(%rsp)
  0x00007f75704a59fd: mov    %r14,0x8(%rsp)
  0x00007f75704a5a02: mov    %r15,(%rsp)
  0x00007f75704a5a06: movabs $0x7f758592f470,%rdi
  0x00007f75704a5a10: movabs $0x7f75704a59b0,%rsi
  0x00007f75704a5a1a: mov    %rsp,%rdx
  0x00007f75704a5a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5a21: callq  0x00007f75853729fa
  0x00007f75704a5a26: hlt    
  ;; } verify_i2ce 
  0x00007f75704a5a27: mov    %rsp,%r11
  0x00007f75704a5a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5a2e: push   %rax
  0x00007f75704a5a2f: mov    %r11,%rax
  0x00007f75704a5a32: mov    0x50(%rbx),%r11
  0x00007f75704a5a36: mov    0x10(%rax),%rsi
  0x00007f75704a5a3a: mov    0x8(%rax),%rdx
  0x00007f75704a5a3e: mov    %rbx,0x258(%r15)
  0x00007f75704a5a45: mov    %rbx,%rax
  0x00007f75704a5a48: jmpq   *%r11
  0x00007f75704a5a4b: mov    0x8(%rsi),%ebx
  0x00007f75704a5a4e: shl    $0x3,%rbx
  0x00007f75704a5a52: cmp    0x10(%rax),%rbx
  0x00007f75704a5a56: mov    0x8(%rax),%rbx
  0x00007f75704a5a5a: je     0x00007f75704a5a65
  0x00007f75704a5a60: jmpq   0x00007f757046ec40
  0x00007f75704a5a65: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a5a6d: je     0x00007f75704a5b68
  0x00007f75704a5a73: jmpq   0x00007f757046ec40
  0x00007f75704a5a78: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a5a80: je     0x00007f75704a5b68
  0x00007f75704a5a86: mov    %rsp,%r13
  0x00007f75704a5a89: mov    (%rsp),%rax
  0x00007f75704a5a8d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5a91: pushfq 
  0x00007f75704a5a92: sub    $0x8,%rsp
  0x00007f75704a5a96: mov    %rsp,-0x28(%rsp)
  0x00007f75704a5a9b: sub    $0x80,%rsp
  0x00007f75704a5aa2: mov    %rax,0x78(%rsp)
  0x00007f75704a5aa7: mov    %rcx,0x70(%rsp)
  0x00007f75704a5aac: mov    %rdx,0x68(%rsp)
  0x00007f75704a5ab1: mov    %rbx,0x60(%rsp)
  0x00007f75704a5ab6: mov    %rbp,0x50(%rsp)
  0x00007f75704a5abb: mov    %rsi,0x48(%rsp)
  0x00007f75704a5ac0: mov    %rdi,0x40(%rsp)
  0x00007f75704a5ac5: mov    %r8,0x38(%rsp)
  0x00007f75704a5aca: mov    %r9,0x30(%rsp)
  0x00007f75704a5acf: mov    %r10,0x28(%rsp)
  0x00007f75704a5ad4: mov    %r11,0x20(%rsp)
  0x00007f75704a5ad9: mov    %r12,0x18(%rsp)
  0x00007f75704a5ade: mov    %r13,0x10(%rsp)
  0x00007f75704a5ae3: mov    %r14,0x8(%rsp)
  0x00007f75704a5ae8: mov    %r15,(%rsp)
  0x00007f75704a5aec: sub    $0x200,%rsp
  0x00007f75704a5af3: fxsave64 (%rsp)
  0x00007f75704a5af8: mov    %rbx,%rdi
  0x00007f75704a5afb: mov    %rax,%rsi
  0x00007f75704a5afe: callq  0x00007f7585522bca
  0x00007f75704a5b03: fxrstor64 (%rsp)
  0x00007f75704a5b08: add    $0x200,%rsp
  0x00007f75704a5b0f: mov    (%rsp),%r15
  0x00007f75704a5b13: mov    0x8(%rsp),%r14
  0x00007f75704a5b18: mov    0x10(%rsp),%r13
  0x00007f75704a5b1d: mov    0x18(%rsp),%r12
  0x00007f75704a5b22: mov    0x20(%rsp),%r11
  0x00007f75704a5b27: mov    0x28(%rsp),%r10
  0x00007f75704a5b2c: mov    0x30(%rsp),%r9
  0x00007f75704a5b31: mov    0x38(%rsp),%r8
  0x00007f75704a5b36: mov    0x40(%rsp),%rdi
  0x00007f75704a5b3b: mov    0x48(%rsp),%rsi
  0x00007f75704a5b40: mov    0x50(%rsp),%rbp
  0x00007f75704a5b45: mov    0x60(%rsp),%rbx
  0x00007f75704a5b4a: mov    0x68(%rsp),%rdx
  0x00007f75704a5b4f: mov    0x70(%rsp),%rcx
  0x00007f75704a5b54: mov    0x78(%rsp),%rax
  0x00007f75704a5b59: add    $0x80,%rsp
  0x00007f75704a5b60: add    $0x8,%rsp
  0x00007f75704a5b64: popfq  
  0x00007f75704a5b65: mov    %r13,%rsp
  0x00007f75704a5b68: pop    %rax
  0x00007f75704a5b69: mov    %rsp,%r13
  0x00007f75704a5b6c: sub    $0x20,%rsp
  0x00007f75704a5b70: mov    %rax,(%rsp)
  0x00007f75704a5b74: mov    %rsi,0x10(%rsp)
  0x00007f75704a5b79: mov    %rdx,0x8(%rsp)
  0x00007f75704a5b7e: mov    0x40(%rbx),%rcx
  0x00007f75704a5b82: jmpq   *%rcx

AHE@0x00007f75800e9120: 0xbb000000 i2c: 0x00007f75704a5c60 c2i: 0x00007f75704a5d78 c2iUV: 0x00007f75704a5d4b
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/String;)J (548 bytes generated)
c2i argument handler starts at 0x7f75704a5d78
  0x00007f75704a5c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a5c64: movabs $0x7f757036e3e0,%r11
  0x00007f75704a5c6e: cmp    %r11,%rax
  0x00007f75704a5c71: jbe    0x00007f75704a5c8a
  0x00007f75704a5c77: movabs $0x7f757046e3e0,%r11
  0x00007f75704a5c81: cmp    %r11,%rax
  0x00007f75704a5c84: jb     0x00007f75704a5d27
  0x00007f75704a5c8a: movabs $0x7f7570369420,%r11
  0x00007f75704a5c94: cmp    %r11,%rax
  0x00007f75704a5c97: jbe    0x00007f75704a5cb0
  0x00007f75704a5c9d: movabs $0x7f757036de58,%r11
  0x00007f75704a5ca7: cmp    %r11,%rax
  0x00007f75704a5caa: jb     0x00007f75704a5d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a5cb0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a5cb5: sub    $0x80,%rsp
  0x00007f75704a5cbc: mov    %rax,0x78(%rsp)
  0x00007f75704a5cc1: mov    %rcx,0x70(%rsp)
  0x00007f75704a5cc6: mov    %rdx,0x68(%rsp)
  0x00007f75704a5ccb: mov    %rbx,0x60(%rsp)
  0x00007f75704a5cd0: mov    %rbp,0x50(%rsp)
  0x00007f75704a5cd5: mov    %rsi,0x48(%rsp)
  0x00007f75704a5cda: mov    %rdi,0x40(%rsp)
  0x00007f75704a5cdf: mov    %r8,0x38(%rsp)
  0x00007f75704a5ce4: mov    %r9,0x30(%rsp)
  0x00007f75704a5ce9: mov    %r10,0x28(%rsp)
  0x00007f75704a5cee: mov    %r11,0x20(%rsp)
  0x00007f75704a5cf3: mov    %r12,0x18(%rsp)
  0x00007f75704a5cf8: mov    %r13,0x10(%rsp)
  0x00007f75704a5cfd: mov    %r14,0x8(%rsp)
  0x00007f75704a5d02: mov    %r15,(%rsp)
  0x00007f75704a5d06: movabs $0x7f758592f470,%rdi
  0x00007f75704a5d10: movabs $0x7f75704a5cb0,%rsi
  0x00007f75704a5d1a: mov    %rsp,%rdx
  0x00007f75704a5d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5d21: callq  0x00007f75853729fa
  0x00007f75704a5d26: hlt    
  ;; } verify_i2ce 
  0x00007f75704a5d27: mov    %rsp,%r11
  0x00007f75704a5d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5d2e: push   %rax
  0x00007f75704a5d2f: mov    %r11,%rax
  0x00007f75704a5d32: mov    0x50(%rbx),%r11
  0x00007f75704a5d36: mov    0x10(%rax),%rsi
  0x00007f75704a5d3a: mov    0x8(%rax),%rdx
  0x00007f75704a5d3e: mov    %rbx,0x258(%r15)
  0x00007f75704a5d45: mov    %rbx,%rax
  0x00007f75704a5d48: jmpq   *%r11
  0x00007f75704a5d4b: mov    0x8(%rsi),%ebx
  0x00007f75704a5d4e: shl    $0x3,%rbx
  0x00007f75704a5d52: cmp    0x10(%rax),%rbx
  0x00007f75704a5d56: mov    0x8(%rax),%rbx
  0x00007f75704a5d5a: je     0x00007f75704a5d65
  0x00007f75704a5d60: jmpq   0x00007f757046ec40
  0x00007f75704a5d65: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a5d6d: je     0x00007f75704a5e68
  0x00007f75704a5d73: jmpq   0x00007f757046ec40
  0x00007f75704a5d78: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a5d80: je     0x00007f75704a5e68
  0x00007f75704a5d86: mov    %rsp,%r13
  0x00007f75704a5d89: mov    (%rsp),%rax
  0x00007f75704a5d8d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a5d91: pushfq 
  0x00007f75704a5d92: sub    $0x8,%rsp
  0x00007f75704a5d96: mov    %rsp,-0x28(%rsp)
  0x00007f75704a5d9b: sub    $0x80,%rsp
  0x00007f75704a5da2: mov    %rax,0x78(%rsp)
  0x00007f75704a5da7: mov    %rcx,0x70(%rsp)
  0x00007f75704a5dac: mov    %rdx,0x68(%rsp)
  0x00007f75704a5db1: mov    %rbx,0x60(%rsp)
  0x00007f75704a5db6: mov    %rbp,0x50(%rsp)
  0x00007f75704a5dbb: mov    %rsi,0x48(%rsp)
  0x00007f75704a5dc0: mov    %rdi,0x40(%rsp)
  0x00007f75704a5dc5: mov    %r8,0x38(%rsp)
  0x00007f75704a5dca: mov    %r9,0x30(%rsp)
  0x00007f75704a5dcf: mov    %r10,0x28(%rsp)
  0x00007f75704a5dd4: mov    %r11,0x20(%rsp)
  0x00007f75704a5dd9: mov    %r12,0x18(%rsp)
  0x00007f75704a5dde: mov    %r13,0x10(%rsp)
  0x00007f75704a5de3: mov    %r14,0x8(%rsp)
  0x00007f75704a5de8: mov    %r15,(%rsp)
  0x00007f75704a5dec: sub    $0x200,%rsp
  0x00007f75704a5df3: fxsave64 (%rsp)
  0x00007f75704a5df8: mov    %rbx,%rdi
  0x00007f75704a5dfb: mov    %rax,%rsi
  0x00007f75704a5dfe: callq  0x00007f7585522bca
  0x00007f75704a5e03: fxrstor64 (%rsp)
  0x00007f75704a5e08: add    $0x200,%rsp
  0x00007f75704a5e0f: mov    (%rsp),%r15
  0x00007f75704a5e13: mov    0x8(%rsp),%r14
  0x00007f75704a5e18: mov    0x10(%rsp),%r13
  0x00007f75704a5e1d: mov    0x18(%rsp),%r12
  0x00007f75704a5e22: mov    0x20(%rsp),%r11
  0x00007f75704a5e27: mov    0x28(%rsp),%r10
  0x00007f75704a5e2c: mov    0x30(%rsp),%r9
  0x00007f75704a5e31: mov    0x38(%rsp),%r8
  0x00007f75704a5e36: mov    0x40(%rsp),%rdi
  0x00007f75704a5e3b: mov    0x48(%rsp),%rsi
  0x00007f75704a5e40: mov    0x50(%rsp),%rbp
  0x00007f75704a5e45: mov    0x60(%rsp),%rbx
  0x00007f75704a5e4a: mov    0x68(%rsp),%rdx
  0x00007f75704a5e4f: mov    0x70(%rsp),%rcx
  0x00007f75704a5e54: mov    0x78(%rsp),%rax
  0x00007f75704a5e59: add    $0x80,%rsp
  0x00007f75704a5e60: add    $0x8,%rsp
  0x00007f75704a5e64: popfq  
  0x00007f75704a5e65: mov    %r13,%rsp
  0x00007f75704a5e68: pop    %rax
  0x00007f75704a5e69: mov    %rsp,%r13
  0x00007f75704a5e6c: sub    $0x20,%rsp
  0x00007f75704a5e70: mov    %rax,(%rsp)
  0x00007f75704a5e74: mov    %rsi,0x10(%rsp)
  0x00007f75704a5e79: mov    %rdx,0x8(%rsp)
  0x00007f75704a5e7e: mov    0x40(%rbx),%rcx
  0x00007f75704a5e82: jmpq   *%rcx

AHE@0x00007f75800e9168: 0xbb000000 i2c: 0x00007f75704a5f60 c2i: 0x00007f75704a6078 c2iUV: 0x00007f75704a604b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f75704a6078
  0x00007f75704a5f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a5f64: movabs $0x7f757036e3e0,%r11
  0x00007f75704a5f6e: cmp    %r11,%rax
  0x00007f75704a5f71: jbe    0x00007f75704a5f8a
  0x00007f75704a5f77: movabs $0x7f757046e3e0,%r11
  0x00007f75704a5f81: cmp    %r11,%rax
  0x00007f75704a5f84: jb     0x00007f75704a6027
  0x00007f75704a5f8a: movabs $0x7f7570369420,%r11
  0x00007f75704a5f94: cmp    %r11,%rax
  0x00007f75704a5f97: jbe    0x00007f75704a5fb0
  0x00007f75704a5f9d: movabs $0x7f757036de58,%r11
  0x00007f75704a5fa7: cmp    %r11,%rax
  0x00007f75704a5faa: jb     0x00007f75704a6027
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a5fb0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a5fb5: sub    $0x80,%rsp
  0x00007f75704a5fbc: mov    %rax,0x78(%rsp)
  0x00007f75704a5fc1: mov    %rcx,0x70(%rsp)
  0x00007f75704a5fc6: mov    %rdx,0x68(%rsp)
  0x00007f75704a5fcb: mov    %rbx,0x60(%rsp)
  0x00007f75704a5fd0: mov    %rbp,0x50(%rsp)
  0x00007f75704a5fd5: mov    %rsi,0x48(%rsp)
  0x00007f75704a5fda: mov    %rdi,0x40(%rsp)
  0x00007f75704a5fdf: mov    %r8,0x38(%rsp)
  0x00007f75704a5fe4: mov    %r9,0x30(%rsp)
  0x00007f75704a5fe9: mov    %r10,0x28(%rsp)
  0x00007f75704a5fee: mov    %r11,0x20(%rsp)
  0x00007f75704a5ff3: mov    %r12,0x18(%rsp)
  0x00007f75704a5ff8: mov    %r13,0x10(%rsp)
  0x00007f75704a5ffd: mov    %r14,0x8(%rsp)
  0x00007f75704a6002: mov    %r15,(%rsp)
  0x00007f75704a6006: movabs $0x7f758592f470,%rdi
  0x00007f75704a6010: movabs $0x7f75704a5fb0,%rsi
  0x00007f75704a601a: mov    %rsp,%rdx
  0x00007f75704a601d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6021: callq  0x00007f75853729fa
  0x00007f75704a6026: hlt    
  ;; } verify_i2ce 
  0x00007f75704a6027: mov    %rsp,%r11
  0x00007f75704a602a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a602e: push   %rax
  0x00007f75704a602f: mov    %r11,%rax
  0x00007f75704a6032: mov    0x50(%rbx),%r11
  0x00007f75704a6036: mov    0x10(%rax),%rsi
  0x00007f75704a603a: mov    0x8(%rax),%rdx
  0x00007f75704a603e: mov    %rbx,0x258(%r15)
  0x00007f75704a6045: mov    %rbx,%rax
  0x00007f75704a6048: jmpq   *%r11
  0x00007f75704a604b: mov    0x8(%rsi),%ebx
  0x00007f75704a604e: shl    $0x3,%rbx
  0x00007f75704a6052: cmp    0x10(%rax),%rbx
  0x00007f75704a6056: mov    0x8(%rax),%rbx
  0x00007f75704a605a: je     0x00007f75704a6065
  0x00007f75704a6060: jmpq   0x00007f757046ec40
  0x00007f75704a6065: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a606d: je     0x00007f75704a6168
  0x00007f75704a6073: jmpq   0x00007f757046ec40
  0x00007f75704a6078: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6080: je     0x00007f75704a6168
  0x00007f75704a6086: mov    %rsp,%r13
  0x00007f75704a6089: mov    (%rsp),%rax
  0x00007f75704a608d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6091: pushfq 
  0x00007f75704a6092: sub    $0x8,%rsp
  0x00007f75704a6096: mov    %rsp,-0x28(%rsp)
  0x00007f75704a609b: sub    $0x80,%rsp
  0x00007f75704a60a2: mov    %rax,0x78(%rsp)
  0x00007f75704a60a7: mov    %rcx,0x70(%rsp)
  0x00007f75704a60ac: mov    %rdx,0x68(%rsp)
  0x00007f75704a60b1: mov    %rbx,0x60(%rsp)
  0x00007f75704a60b6: mov    %rbp,0x50(%rsp)
  0x00007f75704a60bb: mov    %rsi,0x48(%rsp)
  0x00007f75704a60c0: mov    %rdi,0x40(%rsp)
  0x00007f75704a60c5: mov    %r8,0x38(%rsp)
  0x00007f75704a60ca: mov    %r9,0x30(%rsp)
  0x00007f75704a60cf: mov    %r10,0x28(%rsp)
  0x00007f75704a60d4: mov    %r11,0x20(%rsp)
  0x00007f75704a60d9: mov    %r12,0x18(%rsp)
  0x00007f75704a60de: mov    %r13,0x10(%rsp)
  0x00007f75704a60e3: mov    %r14,0x8(%rsp)
  0x00007f75704a60e8: mov    %r15,(%rsp)
  0x00007f75704a60ec: sub    $0x200,%rsp
  0x00007f75704a60f3: fxsave64 (%rsp)
  0x00007f75704a60f8: mov    %rbx,%rdi
  0x00007f75704a60fb: mov    %rax,%rsi
  0x00007f75704a60fe: callq  0x00007f7585522bca
  0x00007f75704a6103: fxrstor64 (%rsp)
  0x00007f75704a6108: add    $0x200,%rsp
  0x00007f75704a610f: mov    (%rsp),%r15
  0x00007f75704a6113: mov    0x8(%rsp),%r14
  0x00007f75704a6118: mov    0x10(%rsp),%r13
  0x00007f75704a611d: mov    0x18(%rsp),%r12
  0x00007f75704a6122: mov    0x20(%rsp),%r11
  0x00007f75704a6127: mov    0x28(%rsp),%r10
  0x00007f75704a612c: mov    0x30(%rsp),%r9
  0x00007f75704a6131: mov    0x38(%rsp),%r8
  0x00007f75704a6136: mov    0x40(%rsp),%rdi
  0x00007f75704a613b: mov    0x48(%rsp),%rsi
  0x00007f75704a6140: mov    0x50(%rsp),%rbp
  0x00007f75704a6145: mov    0x60(%rsp),%rbx
  0x00007f75704a614a: mov    0x68(%rsp),%rdx
  0x00007f75704a614f: mov    0x70(%rsp),%rcx
  0x00007f75704a6154: mov    0x78(%rsp),%rax
  0x00007f75704a6159: add    $0x80,%rsp
  0x00007f75704a6160: add    $0x8,%rsp
  0x00007f75704a6164: popfq  
  0x00007f75704a6165: mov    %r13,%rsp
  0x00007f75704a6168: pop    %rax
  0x00007f75704a6169: mov    %rsp,%r13
  0x00007f75704a616c: sub    $0x20,%rsp
  0x00007f75704a6170: mov    %rax,(%rsp)
  0x00007f75704a6174: mov    %rsi,0x10(%rsp)
  0x00007f75704a6179: mov    %rdx,0x8(%rsp)
  0x00007f75704a617e: mov    0x40(%rbx),%rcx
  0x00007f75704a6182: jmpq   *%rcx

AHE@0x00007f75800e91b0: 0xbb000000 i2c: 0x00007f75704a6260 c2i: 0x00007f75704a6378 c2iUV: 0x00007f75704a634b
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (548 bytes generated)
c2i argument handler starts at 0x7f75704a6378
  0x00007f75704a6260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a6264: movabs $0x7f757036e3e0,%r11
  0x00007f75704a626e: cmp    %r11,%rax
  0x00007f75704a6271: jbe    0x00007f75704a628a
  0x00007f75704a6277: movabs $0x7f757046e3e0,%r11
  0x00007f75704a6281: cmp    %r11,%rax
  0x00007f75704a6284: jb     0x00007f75704a6327
  0x00007f75704a628a: movabs $0x7f7570369420,%r11
  0x00007f75704a6294: cmp    %r11,%rax
  0x00007f75704a6297: jbe    0x00007f75704a62b0
  0x00007f75704a629d: movabs $0x7f757036de58,%r11
  0x00007f75704a62a7: cmp    %r11,%rax
  0x00007f75704a62aa: jb     0x00007f75704a6327
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a62b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a62b5: sub    $0x80,%rsp
  0x00007f75704a62bc: mov    %rax,0x78(%rsp)
  0x00007f75704a62c1: mov    %rcx,0x70(%rsp)
  0x00007f75704a62c6: mov    %rdx,0x68(%rsp)
  0x00007f75704a62cb: mov    %rbx,0x60(%rsp)
  0x00007f75704a62d0: mov    %rbp,0x50(%rsp)
  0x00007f75704a62d5: mov    %rsi,0x48(%rsp)
  0x00007f75704a62da: mov    %rdi,0x40(%rsp)
  0x00007f75704a62df: mov    %r8,0x38(%rsp)
  0x00007f75704a62e4: mov    %r9,0x30(%rsp)
  0x00007f75704a62e9: mov    %r10,0x28(%rsp)
  0x00007f75704a62ee: mov    %r11,0x20(%rsp)
  0x00007f75704a62f3: mov    %r12,0x18(%rsp)
  0x00007f75704a62f8: mov    %r13,0x10(%rsp)
  0x00007f75704a62fd: mov    %r14,0x8(%rsp)
  0x00007f75704a6302: mov    %r15,(%rsp)
  0x00007f75704a6306: movabs $0x7f758592f470,%rdi
  0x00007f75704a6310: movabs $0x7f75704a62b0,%rsi
  0x00007f75704a631a: mov    %rsp,%rdx
  0x00007f75704a631d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6321: callq  0x00007f75853729fa
  0x00007f75704a6326: hlt    
  ;; } verify_i2ce 
  0x00007f75704a6327: mov    %rsp,%r11
  0x00007f75704a632a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a632e: push   %rax
  0x00007f75704a632f: mov    %r11,%rax
  0x00007f75704a6332: mov    0x50(%rbx),%r11
  0x00007f75704a6336: mov    0x10(%rax),%rsi
  0x00007f75704a633a: mov    0x8(%rax),%rdx
  0x00007f75704a633e: mov    %rbx,0x258(%r15)
  0x00007f75704a6345: mov    %rbx,%rax
  0x00007f75704a6348: jmpq   *%r11
  0x00007f75704a634b: mov    0x8(%rsi),%ebx
  0x00007f75704a634e: shl    $0x3,%rbx
  0x00007f75704a6352: cmp    0x10(%rax),%rbx
  0x00007f75704a6356: mov    0x8(%rax),%rbx
  0x00007f75704a635a: je     0x00007f75704a6365
  0x00007f75704a6360: jmpq   0x00007f757046ec40
  0x00007f75704a6365: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a636d: je     0x00007f75704a6468
  0x00007f75704a6373: jmpq   0x00007f757046ec40
  0x00007f75704a6378: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6380: je     0x00007f75704a6468
  0x00007f75704a6386: mov    %rsp,%r13
  0x00007f75704a6389: mov    (%rsp),%rax
  0x00007f75704a638d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6391: pushfq 
  0x00007f75704a6392: sub    $0x8,%rsp
  0x00007f75704a6396: mov    %rsp,-0x28(%rsp)
  0x00007f75704a639b: sub    $0x80,%rsp
  0x00007f75704a63a2: mov    %rax,0x78(%rsp)
  0x00007f75704a63a7: mov    %rcx,0x70(%rsp)
  0x00007f75704a63ac: mov    %rdx,0x68(%rsp)
  0x00007f75704a63b1: mov    %rbx,0x60(%rsp)
  0x00007f75704a63b6: mov    %rbp,0x50(%rsp)
  0x00007f75704a63bb: mov    %rsi,0x48(%rsp)
  0x00007f75704a63c0: mov    %rdi,0x40(%rsp)
  0x00007f75704a63c5: mov    %r8,0x38(%rsp)
  0x00007f75704a63ca: mov    %r9,0x30(%rsp)
  0x00007f75704a63cf: mov    %r10,0x28(%rsp)
  0x00007f75704a63d4: mov    %r11,0x20(%rsp)
  0x00007f75704a63d9: mov    %r12,0x18(%rsp)
  0x00007f75704a63de: mov    %r13,0x10(%rsp)
  0x00007f75704a63e3: mov    %r14,0x8(%rsp)
  0x00007f75704a63e8: mov    %r15,(%rsp)
  0x00007f75704a63ec: sub    $0x200,%rsp
  0x00007f75704a63f3: fxsave64 (%rsp)
  0x00007f75704a63f8: mov    %rbx,%rdi
  0x00007f75704a63fb: mov    %rax,%rsi
  0x00007f75704a63fe: callq  0x00007f7585522bca
  0x00007f75704a6403: fxrstor64 (%rsp)
  0x00007f75704a6408: add    $0x200,%rsp
  0x00007f75704a640f: mov    (%rsp),%r15
  0x00007f75704a6413: mov    0x8(%rsp),%r14
  0x00007f75704a6418: mov    0x10(%rsp),%r13
  0x00007f75704a641d: mov    0x18(%rsp),%r12
  0x00007f75704a6422: mov    0x20(%rsp),%r11
  0x00007f75704a6427: mov    0x28(%rsp),%r10
  0x00007f75704a642c: mov    0x30(%rsp),%r9
  0x00007f75704a6431: mov    0x38(%rsp),%r8
  0x00007f75704a6436: mov    0x40(%rsp),%rdi
  0x00007f75704a643b: mov    0x48(%rsp),%rsi
  0x00007f75704a6440: mov    0x50(%rsp),%rbp
  0x00007f75704a6445: mov    0x60(%rsp),%rbx
  0x00007f75704a644a: mov    0x68(%rsp),%rdx
  0x00007f75704a644f: mov    0x70(%rsp),%rcx
  0x00007f75704a6454: mov    0x78(%rsp),%rax
  0x00007f75704a6459: add    $0x80,%rsp
  0x00007f75704a6460: add    $0x8,%rsp
  0x00007f75704a6464: popfq  
  0x00007f75704a6465: mov    %r13,%rsp
  0x00007f75704a6468: pop    %rax
  0x00007f75704a6469: mov    %rsp,%r13
  0x00007f75704a646c: sub    $0x20,%rsp
  0x00007f75704a6470: mov    %rax,(%rsp)
  0x00007f75704a6474: mov    %rsi,0x10(%rsp)
  0x00007f75704a6479: mov    %rdx,0x8(%rsp)
  0x00007f75704a647e: mov    0x40(%rbx),%rcx
  0x00007f75704a6482: jmpq   *%rcx

AHE@0x00007f75800e91f8: 0xbba00000 i2c: 0x00007f75704a6560 c2i: 0x00007f75704a667b c2iUV: 0x00007f75704a664e
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)Ljava/lang/Class; (555 bytes generated)
c2i argument handler starts at 0x7f75704a667b
  0x00007f75704a6560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a6564: movabs $0x7f757036e3e0,%r11
  0x00007f75704a656e: cmp    %r11,%rax
  0x00007f75704a6571: jbe    0x00007f75704a658a
  0x00007f75704a6577: movabs $0x7f757046e3e0,%r11
  0x00007f75704a6581: cmp    %r11,%rax
  0x00007f75704a6584: jb     0x00007f75704a6627
  0x00007f75704a658a: movabs $0x7f7570369420,%r11
  0x00007f75704a6594: cmp    %r11,%rax
  0x00007f75704a6597: jbe    0x00007f75704a65b0
  0x00007f75704a659d: movabs $0x7f757036de58,%r11
  0x00007f75704a65a7: cmp    %r11,%rax
  0x00007f75704a65aa: jb     0x00007f75704a6627
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a65b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a65b5: sub    $0x80,%rsp
  0x00007f75704a65bc: mov    %rax,0x78(%rsp)
  0x00007f75704a65c1: mov    %rcx,0x70(%rsp)
  0x00007f75704a65c6: mov    %rdx,0x68(%rsp)
  0x00007f75704a65cb: mov    %rbx,0x60(%rsp)
  0x00007f75704a65d0: mov    %rbp,0x50(%rsp)
  0x00007f75704a65d5: mov    %rsi,0x48(%rsp)
  0x00007f75704a65da: mov    %rdi,0x40(%rsp)
  0x00007f75704a65df: mov    %r8,0x38(%rsp)
  0x00007f75704a65e4: mov    %r9,0x30(%rsp)
  0x00007f75704a65e9: mov    %r10,0x28(%rsp)
  0x00007f75704a65ee: mov    %r11,0x20(%rsp)
  0x00007f75704a65f3: mov    %r12,0x18(%rsp)
  0x00007f75704a65f8: mov    %r13,0x10(%rsp)
  0x00007f75704a65fd: mov    %r14,0x8(%rsp)
  0x00007f75704a6602: mov    %r15,(%rsp)
  0x00007f75704a6606: movabs $0x7f758592f470,%rdi
  0x00007f75704a6610: movabs $0x7f75704a65b0,%rsi
  0x00007f75704a661a: mov    %rsp,%rdx
  0x00007f75704a661d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6621: callq  0x00007f75853729fa
  0x00007f75704a6626: hlt    
  ;; } verify_i2ce 
  0x00007f75704a6627: mov    %rsp,%r11
  0x00007f75704a662a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a662e: push   %rax
  0x00007f75704a662f: mov    %r11,%rax
  0x00007f75704a6632: mov    0x50(%rbx),%r11
  0x00007f75704a6636: mov    0x18(%rax),%rsi
  0x00007f75704a663a: mov    0x10(%rax),%rdx
  0x00007f75704a663e: mov    0x8(%rax),%ecx
  0x00007f75704a6641: mov    %rbx,0x258(%r15)
  0x00007f75704a6648: mov    %rbx,%rax
  0x00007f75704a664b: jmpq   *%r11
  0x00007f75704a664e: mov    0x8(%rsi),%ebx
  0x00007f75704a6651: shl    $0x3,%rbx
  0x00007f75704a6655: cmp    0x10(%rax),%rbx
  0x00007f75704a6659: mov    0x8(%rax),%rbx
  0x00007f75704a665d: je     0x00007f75704a6668
  0x00007f75704a6663: jmpq   0x00007f757046ec40
  0x00007f75704a6668: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6670: je     0x00007f75704a676b
  0x00007f75704a6676: jmpq   0x00007f757046ec40
  0x00007f75704a667b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6683: je     0x00007f75704a676b
  0x00007f75704a6689: mov    %rsp,%r13
  0x00007f75704a668c: mov    (%rsp),%rax
  0x00007f75704a6690: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6694: pushfq 
  0x00007f75704a6695: sub    $0x8,%rsp
  0x00007f75704a6699: mov    %rsp,-0x28(%rsp)
  0x00007f75704a669e: sub    $0x80,%rsp
  0x00007f75704a66a5: mov    %rax,0x78(%rsp)
  0x00007f75704a66aa: mov    %rcx,0x70(%rsp)
  0x00007f75704a66af: mov    %rdx,0x68(%rsp)
  0x00007f75704a66b4: mov    %rbx,0x60(%rsp)
  0x00007f75704a66b9: mov    %rbp,0x50(%rsp)
  0x00007f75704a66be: mov    %rsi,0x48(%rsp)
  0x00007f75704a66c3: mov    %rdi,0x40(%rsp)
  0x00007f75704a66c8: mov    %r8,0x38(%rsp)
  0x00007f75704a66cd: mov    %r9,0x30(%rsp)
  0x00007f75704a66d2: mov    %r10,0x28(%rsp)
  0x00007f75704a66d7: mov    %r11,0x20(%rsp)
  0x00007f75704a66dc: mov    %r12,0x18(%rsp)
  0x00007f75704a66e1: mov    %r13,0x10(%rsp)
  0x00007f75704a66e6: mov    %r14,0x8(%rsp)
  0x00007f75704a66eb: mov    %r15,(%rsp)
  0x00007f75704a66ef: sub    $0x200,%rsp
  0x00007f75704a66f6: fxsave64 (%rsp)
  0x00007f75704a66fb: mov    %rbx,%rdi
  0x00007f75704a66fe: mov    %rax,%rsi
  0x00007f75704a6701: callq  0x00007f7585522bca
  0x00007f75704a6706: fxrstor64 (%rsp)
  0x00007f75704a670b: add    $0x200,%rsp
  0x00007f75704a6712: mov    (%rsp),%r15
  0x00007f75704a6716: mov    0x8(%rsp),%r14
  0x00007f75704a671b: mov    0x10(%rsp),%r13
  0x00007f75704a6720: mov    0x18(%rsp),%r12
  0x00007f75704a6725: mov    0x20(%rsp),%r11
  0x00007f75704a672a: mov    0x28(%rsp),%r10
  0x00007f75704a672f: mov    0x30(%rsp),%r9
  0x00007f75704a6734: mov    0x38(%rsp),%r8
  0x00007f75704a6739: mov    0x40(%rsp),%rdi
  0x00007f75704a673e: mov    0x48(%rsp),%rsi
  0x00007f75704a6743: mov    0x50(%rsp),%rbp
  0x00007f75704a6748: mov    0x60(%rsp),%rbx
  0x00007f75704a674d: mov    0x68(%rsp),%rdx
  0x00007f75704a6752: mov    0x70(%rsp),%rcx
  0x00007f75704a6757: mov    0x78(%rsp),%rax
  0x00007f75704a675c: add    $0x80,%rsp
  0x00007f75704a6763: add    $0x8,%rsp
  0x00007f75704a6767: popfq  
  0x00007f75704a6768: mov    %r13,%rsp
  0x00007f75704a676b: pop    %rax
  0x00007f75704a676c: mov    %rsp,%r13
  0x00007f75704a676f: sub    $0x20,%rsp
  0x00007f75704a6773: mov    %rax,(%rsp)
  0x00007f75704a6777: mov    %rsi,0x18(%rsp)
  0x00007f75704a677c: mov    %rdx,0x10(%rsp)
  0x00007f75704a6781: mov    %ecx,0x8(%rsp)
  0x00007f75704a6785: mov    0x40(%rbx),%rcx
  0x00007f75704a6789: jmpq   *%rcx

AHE@0x00007f75800e9240: 0x i2c: 0x00007f75704a6860 c2i: 0x00007f75704a6970 c2iUV: 0x00007f75704a6943
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f75704a6970
  0x00007f75704a6860: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a6864: movabs $0x7f757036e3e0,%r11
  0x00007f75704a686e: cmp    %r11,%rax
  0x00007f75704a6871: jbe    0x00007f75704a688a
  0x00007f75704a6877: movabs $0x7f757046e3e0,%r11
  0x00007f75704a6881: cmp    %r11,%rax
  0x00007f75704a6884: jb     0x00007f75704a6927
  0x00007f75704a688a: movabs $0x7f7570369420,%r11
  0x00007f75704a6894: cmp    %r11,%rax
  0x00007f75704a6897: jbe    0x00007f75704a68b0
  0x00007f75704a689d: movabs $0x7f757036de58,%r11
  0x00007f75704a68a7: cmp    %r11,%rax
  0x00007f75704a68aa: jb     0x00007f75704a6927
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a68b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a68b5: sub    $0x80,%rsp
  0x00007f75704a68bc: mov    %rax,0x78(%rsp)
  0x00007f75704a68c1: mov    %rcx,0x70(%rsp)
  0x00007f75704a68c6: mov    %rdx,0x68(%rsp)
  0x00007f75704a68cb: mov    %rbx,0x60(%rsp)
  0x00007f75704a68d0: mov    %rbp,0x50(%rsp)
  0x00007f75704a68d5: mov    %rsi,0x48(%rsp)
  0x00007f75704a68da: mov    %rdi,0x40(%rsp)
  0x00007f75704a68df: mov    %r8,0x38(%rsp)
  0x00007f75704a68e4: mov    %r9,0x30(%rsp)
  0x00007f75704a68e9: mov    %r10,0x28(%rsp)
  0x00007f75704a68ee: mov    %r11,0x20(%rsp)
  0x00007f75704a68f3: mov    %r12,0x18(%rsp)
  0x00007f75704a68f8: mov    %r13,0x10(%rsp)
  0x00007f75704a68fd: mov    %r14,0x8(%rsp)
  0x00007f75704a6902: mov    %r15,(%rsp)
  0x00007f75704a6906: movabs $0x7f758592f470,%rdi
  0x00007f75704a6910: movabs $0x7f75704a68b0,%rsi
  0x00007f75704a691a: mov    %rsp,%rdx
  0x00007f75704a691d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6921: callq  0x00007f75853729fa
  0x00007f75704a6926: hlt    
  ;; } verify_i2ce 
  0x00007f75704a6927: mov    %rsp,%r11
  0x00007f75704a692a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a692e: push   %rax
  0x00007f75704a692f: mov    %r11,%rax
  0x00007f75704a6932: mov    0x50(%rbx),%r11
  0x00007f75704a6936: mov    %rbx,0x258(%r15)
  0x00007f75704a693d: mov    %rbx,%rax
  0x00007f75704a6940: jmpq   *%r11
  0x00007f75704a6943: mov    0x8(%rsi),%ebx
  0x00007f75704a6946: shl    $0x3,%rbx
  0x00007f75704a694a: cmp    0x10(%rax),%rbx
  0x00007f75704a694e: mov    0x8(%rax),%rbx
  0x00007f75704a6952: je     0x00007f75704a695d
  0x00007f75704a6958: jmpq   0x00007f757046ec40
  0x00007f75704a695d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6965: je     0x00007f75704a6a60
  0x00007f75704a696b: jmpq   0x00007f757046ec40
  0x00007f75704a6970: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6978: je     0x00007f75704a6a60
  0x00007f75704a697e: mov    %rsp,%r13
  0x00007f75704a6981: mov    (%rsp),%rax
  0x00007f75704a6985: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6989: pushfq 
  0x00007f75704a698a: sub    $0x8,%rsp
  0x00007f75704a698e: mov    %rsp,-0x28(%rsp)
  0x00007f75704a6993: sub    $0x80,%rsp
  0x00007f75704a699a: mov    %rax,0x78(%rsp)
  0x00007f75704a699f: mov    %rcx,0x70(%rsp)
  0x00007f75704a69a4: mov    %rdx,0x68(%rsp)
  0x00007f75704a69a9: mov    %rbx,0x60(%rsp)
  0x00007f75704a69ae: mov    %rbp,0x50(%rsp)
  0x00007f75704a69b3: mov    %rsi,0x48(%rsp)
  0x00007f75704a69b8: mov    %rdi,0x40(%rsp)
  0x00007f75704a69bd: mov    %r8,0x38(%rsp)
  0x00007f75704a69c2: mov    %r9,0x30(%rsp)
  0x00007f75704a69c7: mov    %r10,0x28(%rsp)
  0x00007f75704a69cc: mov    %r11,0x20(%rsp)
  0x00007f75704a69d1: mov    %r12,0x18(%rsp)
  0x00007f75704a69d6: mov    %r13,0x10(%rsp)
  0x00007f75704a69db: mov    %r14,0x8(%rsp)
  0x00007f75704a69e0: mov    %r15,(%rsp)
  0x00007f75704a69e4: sub    $0x200,%rsp
  0x00007f75704a69eb: fxsave64 (%rsp)
  0x00007f75704a69f0: mov    %rbx,%rdi
  0x00007f75704a69f3: mov    %rax,%rsi
  0x00007f75704a69f6: callq  0x00007f7585522bca
  0x00007f75704a69fb: fxrstor64 (%rsp)
  0x00007f75704a6a00: add    $0x200,%rsp
  0x00007f75704a6a07: mov    (%rsp),%r15
  0x00007f75704a6a0b: mov    0x8(%rsp),%r14
  0x00007f75704a6a10: mov    0x10(%rsp),%r13
  0x00007f75704a6a15: mov    0x18(%rsp),%r12
  0x00007f75704a6a1a: mov    0x20(%rsp),%r11
  0x00007f75704a6a1f: mov    0x28(%rsp),%r10
  0x00007f75704a6a24: mov    0x30(%rsp),%r9
  0x00007f75704a6a29: mov    0x38(%rsp),%r8
  0x00007f75704a6a2e: mov    0x40(%rsp),%rdi
  0x00007f75704a6a33: mov    0x48(%rsp),%rsi
  0x00007f75704a6a38: mov    0x50(%rsp),%rbp
  0x00007f75704a6a3d: mov    0x60(%rsp),%rbx
  0x00007f75704a6a42: mov    0x68(%rsp),%rdx
  0x00007f75704a6a47: mov    0x70(%rsp),%rcx
  0x00007f75704a6a4c: mov    0x78(%rsp),%rax
  0x00007f75704a6a51: add    $0x80,%rsp
  0x00007f75704a6a58: add    $0x8,%rsp
  0x00007f75704a6a5c: popfq  
  0x00007f75704a6a5d: mov    %r13,%rsp
  0x00007f75704a6a60: pop    %rax
  0x00007f75704a6a61: mov    %rsp,%r13
  0x00007f75704a6a64: sub    $0x10,%rsp
  0x00007f75704a6a68: mov    %rax,(%rsp)
  0x00007f75704a6a6c: mov    0x40(%rbx),%rcx
  0x00007f75704a6a70: jmpq   *%rcx

AHE@0x00007f75800e9288: 0xbbb00000 i2c: 0x00007f75704a6b20 c2i: 0x00007f75704a6c3c c2iUV: 0x00007f75704a6c0f
i2c argument handler #0 for: receiver (Ljava/lang/Void;Ljava/lang/ClassLoader;)V (557 bytes generated)
c2i argument handler starts at 0x7f75704a6c3c
  0x00007f75704a6b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a6b24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a6b2e: cmp    %r11,%rax
  0x00007f75704a6b31: jbe    0x00007f75704a6b4a
  0x00007f75704a6b37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a6b41: cmp    %r11,%rax
  0x00007f75704a6b44: jb     0x00007f75704a6be7
  0x00007f75704a6b4a: movabs $0x7f7570369420,%r11
  0x00007f75704a6b54: cmp    %r11,%rax
  0x00007f75704a6b57: jbe    0x00007f75704a6b70
  0x00007f75704a6b5d: movabs $0x7f757036de58,%r11
  0x00007f75704a6b67: cmp    %r11,%rax
  0x00007f75704a6b6a: jb     0x00007f75704a6be7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a6b70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a6b75: sub    $0x80,%rsp
  0x00007f75704a6b7c: mov    %rax,0x78(%rsp)
  0x00007f75704a6b81: mov    %rcx,0x70(%rsp)
  0x00007f75704a6b86: mov    %rdx,0x68(%rsp)
  0x00007f75704a6b8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a6b90: mov    %rbp,0x50(%rsp)
  0x00007f75704a6b95: mov    %rsi,0x48(%rsp)
  0x00007f75704a6b9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a6b9f: mov    %r8,0x38(%rsp)
  0x00007f75704a6ba4: mov    %r9,0x30(%rsp)
  0x00007f75704a6ba9: mov    %r10,0x28(%rsp)
  0x00007f75704a6bae: mov    %r11,0x20(%rsp)
  0x00007f75704a6bb3: mov    %r12,0x18(%rsp)
  0x00007f75704a6bb8: mov    %r13,0x10(%rsp)
  0x00007f75704a6bbd: mov    %r14,0x8(%rsp)
  0x00007f75704a6bc2: mov    %r15,(%rsp)
  0x00007f75704a6bc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a6bd0: movabs $0x7f75704a6b70,%rsi
  0x00007f75704a6bda: mov    %rsp,%rdx
  0x00007f75704a6bdd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6be1: callq  0x00007f75853729fa
  0x00007f75704a6be6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a6be7: mov    %rsp,%r11
  0x00007f75704a6bea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6bee: push   %rax
  0x00007f75704a6bef: mov    %r11,%rax
  0x00007f75704a6bf2: mov    0x50(%rbx),%r11
  0x00007f75704a6bf6: mov    0x18(%rax),%rsi
  0x00007f75704a6bfa: mov    0x10(%rax),%rdx
  0x00007f75704a6bfe: mov    0x8(%rax),%rcx
  0x00007f75704a6c02: mov    %rbx,0x258(%r15)
  0x00007f75704a6c09: mov    %rbx,%rax
  0x00007f75704a6c0c: jmpq   *%r11
  0x00007f75704a6c0f: mov    0x8(%rsi),%ebx
  0x00007f75704a6c12: shl    $0x3,%rbx
  0x00007f75704a6c16: cmp    0x10(%rax),%rbx
  0x00007f75704a6c1a: mov    0x8(%rax),%rbx
  0x00007f75704a6c1e: je     0x00007f75704a6c29
  0x00007f75704a6c24: jmpq   0x00007f757046ec40
  0x00007f75704a6c29: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6c31: je     0x00007f75704a6d2c
  0x00007f75704a6c37: jmpq   0x00007f757046ec40
  0x00007f75704a6c3c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6c44: je     0x00007f75704a6d2c
  0x00007f75704a6c4a: mov    %rsp,%r13
  0x00007f75704a6c4d: mov    (%rsp),%rax
  0x00007f75704a6c51: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6c55: pushfq 
  0x00007f75704a6c56: sub    $0x8,%rsp
  0x00007f75704a6c5a: mov    %rsp,-0x28(%rsp)
  0x00007f75704a6c5f: sub    $0x80,%rsp
  0x00007f75704a6c66: mov    %rax,0x78(%rsp)
  0x00007f75704a6c6b: mov    %rcx,0x70(%rsp)
  0x00007f75704a6c70: mov    %rdx,0x68(%rsp)
  0x00007f75704a6c75: mov    %rbx,0x60(%rsp)
  0x00007f75704a6c7a: mov    %rbp,0x50(%rsp)
  0x00007f75704a6c7f: mov    %rsi,0x48(%rsp)
  0x00007f75704a6c84: mov    %rdi,0x40(%rsp)
  0x00007f75704a6c89: mov    %r8,0x38(%rsp)
  0x00007f75704a6c8e: mov    %r9,0x30(%rsp)
  0x00007f75704a6c93: mov    %r10,0x28(%rsp)
  0x00007f75704a6c98: mov    %r11,0x20(%rsp)
  0x00007f75704a6c9d: mov    %r12,0x18(%rsp)
  0x00007f75704a6ca2: mov    %r13,0x10(%rsp)
  0x00007f75704a6ca7: mov    %r14,0x8(%rsp)
  0x00007f75704a6cac: mov    %r15,(%rsp)
  0x00007f75704a6cb0: sub    $0x200,%rsp
  0x00007f75704a6cb7: fxsave64 (%rsp)
  0x00007f75704a6cbc: mov    %rbx,%rdi
  0x00007f75704a6cbf: mov    %rax,%rsi
  0x00007f75704a6cc2: callq  0x00007f7585522bca
  0x00007f75704a6cc7: fxrstor64 (%rsp)
  0x00007f75704a6ccc: add    $0x200,%rsp
  0x00007f75704a6cd3: mov    (%rsp),%r15
  0x00007f75704a6cd7: mov    0x8(%rsp),%r14
  0x00007f75704a6cdc: mov    0x10(%rsp),%r13
  0x00007f75704a6ce1: mov    0x18(%rsp),%r12
  0x00007f75704a6ce6: mov    0x20(%rsp),%r11
  0x00007f75704a6ceb: mov    0x28(%rsp),%r10
  0x00007f75704a6cf0: mov    0x30(%rsp),%r9
  0x00007f75704a6cf5: mov    0x38(%rsp),%r8
  0x00007f75704a6cfa: mov    0x40(%rsp),%rdi
  0x00007f75704a6cff: mov    0x48(%rsp),%rsi
  0x00007f75704a6d04: mov    0x50(%rsp),%rbp
  0x00007f75704a6d09: mov    0x60(%rsp),%rbx
  0x00007f75704a6d0e: mov    0x68(%rsp),%rdx
  0x00007f75704a6d13: mov    0x70(%rsp),%rcx
  0x00007f75704a6d18: mov    0x78(%rsp),%rax
  0x00007f75704a6d1d: add    $0x80,%rsp
  0x00007f75704a6d24: add    $0x8,%rsp
  0x00007f75704a6d28: popfq  
  0x00007f75704a6d29: mov    %r13,%rsp
  0x00007f75704a6d2c: pop    %rax
  0x00007f75704a6d2d: mov    %rsp,%r13
  0x00007f75704a6d30: sub    $0x20,%rsp
  0x00007f75704a6d34: mov    %rax,(%rsp)
  0x00007f75704a6d38: mov    %rsi,0x18(%rsp)
  0x00007f75704a6d3d: mov    %rdx,0x10(%rsp)
  0x00007f75704a6d42: mov    %rcx,0x8(%rsp)
  0x00007f75704a6d47: mov    0x40(%rbx),%rcx
  0x00007f75704a6d4b: jmpq   *%rcx

AHE@0x00007f75800e92d0: 0xb0000000 i2c: 0x00007f75704a6e20 c2i: 0x00007f75704a6f34 c2iUV: 0x00007f75704a6f07
i2c argument handler #0 for: receiver ()V (539 bytes generated)
c2i argument handler starts at 0x7f75704a6f34
  0x00007f75704a6e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a6e24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a6e2e: cmp    %r11,%rax
  0x00007f75704a6e31: jbe    0x00007f75704a6e4a
  0x00007f75704a6e37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a6e41: cmp    %r11,%rax
  0x00007f75704a6e44: jb     0x00007f75704a6ee7
  0x00007f75704a6e4a: movabs $0x7f7570369420,%r11
  0x00007f75704a6e54: cmp    %r11,%rax
  0x00007f75704a6e57: jbe    0x00007f75704a6e70
  0x00007f75704a6e5d: movabs $0x7f757036de58,%r11
  0x00007f75704a6e67: cmp    %r11,%rax
  0x00007f75704a6e6a: jb     0x00007f75704a6ee7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a6e70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a6e75: sub    $0x80,%rsp
  0x00007f75704a6e7c: mov    %rax,0x78(%rsp)
  0x00007f75704a6e81: mov    %rcx,0x70(%rsp)
  0x00007f75704a6e86: mov    %rdx,0x68(%rsp)
  0x00007f75704a6e8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a6e90: mov    %rbp,0x50(%rsp)
  0x00007f75704a6e95: mov    %rsi,0x48(%rsp)
  0x00007f75704a6e9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a6e9f: mov    %r8,0x38(%rsp)
  0x00007f75704a6ea4: mov    %r9,0x30(%rsp)
  0x00007f75704a6ea9: mov    %r10,0x28(%rsp)
  0x00007f75704a6eae: mov    %r11,0x20(%rsp)
  0x00007f75704a6eb3: mov    %r12,0x18(%rsp)
  0x00007f75704a6eb8: mov    %r13,0x10(%rsp)
  0x00007f75704a6ebd: mov    %r14,0x8(%rsp)
  0x00007f75704a6ec2: mov    %r15,(%rsp)
  0x00007f75704a6ec6: movabs $0x7f758592f470,%rdi
  0x00007f75704a6ed0: movabs $0x7f75704a6e70,%rsi
  0x00007f75704a6eda: mov    %rsp,%rdx
  0x00007f75704a6edd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6ee1: callq  0x00007f75853729fa
  0x00007f75704a6ee6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a6ee7: mov    %rsp,%r11
  0x00007f75704a6eea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6eee: push   %rax
  0x00007f75704a6eef: mov    %r11,%rax
  0x00007f75704a6ef2: mov    0x50(%rbx),%r11
  0x00007f75704a6ef6: mov    0x8(%rax),%rsi
  0x00007f75704a6efa: mov    %rbx,0x258(%r15)
  0x00007f75704a6f01: mov    %rbx,%rax
  0x00007f75704a6f04: jmpq   *%r11
  0x00007f75704a6f07: mov    0x8(%rsi),%ebx
  0x00007f75704a6f0a: shl    $0x3,%rbx
  0x00007f75704a6f0e: cmp    0x10(%rax),%rbx
  0x00007f75704a6f12: mov    0x8(%rax),%rbx
  0x00007f75704a6f16: je     0x00007f75704a6f21
  0x00007f75704a6f1c: jmpq   0x00007f757046ec40
  0x00007f75704a6f21: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6f29: je     0x00007f75704a7024
  0x00007f75704a6f2f: jmpq   0x00007f757046ec40
  0x00007f75704a6f34: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a6f3c: je     0x00007f75704a7024
  0x00007f75704a6f42: mov    %rsp,%r13
  0x00007f75704a6f45: mov    (%rsp),%rax
  0x00007f75704a6f49: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a6f4d: pushfq 
  0x00007f75704a6f4e: sub    $0x8,%rsp
  0x00007f75704a6f52: mov    %rsp,-0x28(%rsp)
  0x00007f75704a6f57: sub    $0x80,%rsp
  0x00007f75704a6f5e: mov    %rax,0x78(%rsp)
  0x00007f75704a6f63: mov    %rcx,0x70(%rsp)
  0x00007f75704a6f68: mov    %rdx,0x68(%rsp)
  0x00007f75704a6f6d: mov    %rbx,0x60(%rsp)
  0x00007f75704a6f72: mov    %rbp,0x50(%rsp)
  0x00007f75704a6f77: mov    %rsi,0x48(%rsp)
  0x00007f75704a6f7c: mov    %rdi,0x40(%rsp)
  0x00007f75704a6f81: mov    %r8,0x38(%rsp)
  0x00007f75704a6f86: mov    %r9,0x30(%rsp)
  0x00007f75704a6f8b: mov    %r10,0x28(%rsp)
  0x00007f75704a6f90: mov    %r11,0x20(%rsp)
  0x00007f75704a6f95: mov    %r12,0x18(%rsp)
  0x00007f75704a6f9a: mov    %r13,0x10(%rsp)
  0x00007f75704a6f9f: mov    %r14,0x8(%rsp)
  0x00007f75704a6fa4: mov    %r15,(%rsp)
  0x00007f75704a6fa8: sub    $0x200,%rsp
  0x00007f75704a6faf: fxsave64 (%rsp)
  0x00007f75704a6fb4: mov    %rbx,%rdi
  0x00007f75704a6fb7: mov    %rax,%rsi
  0x00007f75704a6fba: callq  0x00007f7585522bca
  0x00007f75704a6fbf: fxrstor64 (%rsp)
  0x00007f75704a6fc4: add    $0x200,%rsp
  0x00007f75704a6fcb: mov    (%rsp),%r15
  0x00007f75704a6fcf: mov    0x8(%rsp),%r14
  0x00007f75704a6fd4: mov    0x10(%rsp),%r13
  0x00007f75704a6fd9: mov    0x18(%rsp),%r12
  0x00007f75704a6fde: mov    0x20(%rsp),%r11
  0x00007f75704a6fe3: mov    0x28(%rsp),%r10
  0x00007f75704a6fe8: mov    0x30(%rsp),%r9
  0x00007f75704a6fed: mov    0x38(%rsp),%r8
  0x00007f75704a6ff2: mov    0x40(%rsp),%rdi
  0x00007f75704a6ff7: mov    0x48(%rsp),%rsi
  0x00007f75704a6ffc: mov    0x50(%rsp),%rbp
  0x00007f75704a7001: mov    0x60(%rsp),%rbx
  0x00007f75704a7006: mov    0x68(%rsp),%rdx
  0x00007f75704a700b: mov    0x70(%rsp),%rcx
  0x00007f75704a7010: mov    0x78(%rsp),%rax
  0x00007f75704a7015: add    $0x80,%rsp
  0x00007f75704a701c: add    $0x8,%rsp
  0x00007f75704a7020: popfq  
  0x00007f75704a7021: mov    %r13,%rsp
  0x00007f75704a7024: pop    %rax
  0x00007f75704a7025: mov    %rsp,%r13
  0x00007f75704a7028: sub    $0x10,%rsp
  0x00007f75704a702c: mov    %rax,(%rsp)
  0x00007f75704a7030: mov    %rsi,0x8(%rsp)
  0x00007f75704a7035: mov    0x40(%rbx),%rcx
  0x00007f75704a7039: jmpq   *%rcx

AHE@0x00007f75800e9318: 0xbb000000 i2c: 0x00007f75704a70e0 c2i: 0x00007f75704a71f8 c2iUV: 0x00007f75704a71cb
i2c argument handler #0 for: receiver (Ljava/lang/ClassLoader;)V (548 bytes generated)
c2i argument handler starts at 0x7f75704a71f8
  0x00007f75704a70e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a70e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a70ee: cmp    %r11,%rax
  0x00007f75704a70f1: jbe    0x00007f75704a710a
  0x00007f75704a70f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a7101: cmp    %r11,%rax
  0x00007f75704a7104: jb     0x00007f75704a71a7
  0x00007f75704a710a: movabs $0x7f7570369420,%r11
  0x00007f75704a7114: cmp    %r11,%rax
  0x00007f75704a7117: jbe    0x00007f75704a7130
  0x00007f75704a711d: movabs $0x7f757036de58,%r11
  0x00007f75704a7127: cmp    %r11,%rax
  0x00007f75704a712a: jb     0x00007f75704a71a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a7130: mov    %rsp,-0x28(%rsp)
  0x00007f75704a7135: sub    $0x80,%rsp
  0x00007f75704a713c: mov    %rax,0x78(%rsp)
  0x00007f75704a7141: mov    %rcx,0x70(%rsp)
  0x00007f75704a7146: mov    %rdx,0x68(%rsp)
  0x00007f75704a714b: mov    %rbx,0x60(%rsp)
  0x00007f75704a7150: mov    %rbp,0x50(%rsp)
  0x00007f75704a7155: mov    %rsi,0x48(%rsp)
  0x00007f75704a715a: mov    %rdi,0x40(%rsp)
  0x00007f75704a715f: mov    %r8,0x38(%rsp)
  0x00007f75704a7164: mov    %r9,0x30(%rsp)
  0x00007f75704a7169: mov    %r10,0x28(%rsp)
  0x00007f75704a716e: mov    %r11,0x20(%rsp)
  0x00007f75704a7173: mov    %r12,0x18(%rsp)
  0x00007f75704a7178: mov    %r13,0x10(%rsp)
  0x00007f75704a717d: mov    %r14,0x8(%rsp)
  0x00007f75704a7182: mov    %r15,(%rsp)
  0x00007f75704a7186: movabs $0x7f758592f470,%rdi
  0x00007f75704a7190: movabs $0x7f75704a7130,%rsi
  0x00007f75704a719a: mov    %rsp,%rdx
  0x00007f75704a719d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a71a1: callq  0x00007f75853729fa
  0x00007f75704a71a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a71a7: mov    %rsp,%r11
  0x00007f75704a71aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a71ae: push   %rax
  0x00007f75704a71af: mov    %r11,%rax
  0x00007f75704a71b2: mov    0x50(%rbx),%r11
  0x00007f75704a71b6: mov    0x10(%rax),%rsi
  0x00007f75704a71ba: mov    0x8(%rax),%rdx
  0x00007f75704a71be: mov    %rbx,0x258(%r15)
  0x00007f75704a71c5: mov    %rbx,%rax
  0x00007f75704a71c8: jmpq   *%r11
  0x00007f75704a71cb: mov    0x8(%rsi),%ebx
  0x00007f75704a71ce: shl    $0x3,%rbx
  0x00007f75704a71d2: cmp    0x10(%rax),%rbx
  0x00007f75704a71d6: mov    0x8(%rax),%rbx
  0x00007f75704a71da: je     0x00007f75704a71e5
  0x00007f75704a71e0: jmpq   0x00007f757046ec40
  0x00007f75704a71e5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a71ed: je     0x00007f75704a72e8
  0x00007f75704a71f3: jmpq   0x00007f757046ec40
  0x00007f75704a71f8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a7200: je     0x00007f75704a72e8
  0x00007f75704a7206: mov    %rsp,%r13
  0x00007f75704a7209: mov    (%rsp),%rax
  0x00007f75704a720d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7211: pushfq 
  0x00007f75704a7212: sub    $0x8,%rsp
  0x00007f75704a7216: mov    %rsp,-0x28(%rsp)
  0x00007f75704a721b: sub    $0x80,%rsp
  0x00007f75704a7222: mov    %rax,0x78(%rsp)
  0x00007f75704a7227: mov    %rcx,0x70(%rsp)
  0x00007f75704a722c: mov    %rdx,0x68(%rsp)
  0x00007f75704a7231: mov    %rbx,0x60(%rsp)
  0x00007f75704a7236: mov    %rbp,0x50(%rsp)
  0x00007f75704a723b: mov    %rsi,0x48(%rsp)
  0x00007f75704a7240: mov    %rdi,0x40(%rsp)
  0x00007f75704a7245: mov    %r8,0x38(%rsp)
  0x00007f75704a724a: mov    %r9,0x30(%rsp)
  0x00007f75704a724f: mov    %r10,0x28(%rsp)
  0x00007f75704a7254: mov    %r11,0x20(%rsp)
  0x00007f75704a7259: mov    %r12,0x18(%rsp)
  0x00007f75704a725e: mov    %r13,0x10(%rsp)
  0x00007f75704a7263: mov    %r14,0x8(%rsp)
  0x00007f75704a7268: mov    %r15,(%rsp)
  0x00007f75704a726c: sub    $0x200,%rsp
  0x00007f75704a7273: fxsave64 (%rsp)
  0x00007f75704a7278: mov    %rbx,%rdi
  0x00007f75704a727b: mov    %rax,%rsi
  0x00007f75704a727e: callq  0x00007f7585522bca
  0x00007f75704a7283: fxrstor64 (%rsp)
  0x00007f75704a7288: add    $0x200,%rsp
  0x00007f75704a728f: mov    (%rsp),%r15
  0x00007f75704a7293: mov    0x8(%rsp),%r14
  0x00007f75704a7298: mov    0x10(%rsp),%r13
  0x00007f75704a729d: mov    0x18(%rsp),%r12
  0x00007f75704a72a2: mov    0x20(%rsp),%r11
  0x00007f75704a72a7: mov    0x28(%rsp),%r10
  0x00007f75704a72ac: mov    0x30(%rsp),%r9
  0x00007f75704a72b1: mov    0x38(%rsp),%r8
  0x00007f75704a72b6: mov    0x40(%rsp),%rdi
  0x00007f75704a72bb: mov    0x48(%rsp),%rsi
  0x00007f75704a72c0: mov    0x50(%rsp),%rbp
  0x00007f75704a72c5: mov    0x60(%rsp),%rbx
  0x00007f75704a72ca: mov    0x68(%rsp),%rdx
  0x00007f75704a72cf: mov    0x70(%rsp),%rcx
  0x00007f75704a72d4: mov    0x78(%rsp),%rax
  0x00007f75704a72d9: add    $0x80,%rsp
  0x00007f75704a72e0: add    $0x8,%rsp
  0x00007f75704a72e4: popfq  
  0x00007f75704a72e5: mov    %r13,%rsp
  0x00007f75704a72e8: pop    %rax
  0x00007f75704a72e9: mov    %rsp,%r13
  0x00007f75704a72ec: sub    $0x20,%rsp
  0x00007f75704a72f0: mov    %rax,(%rsp)
  0x00007f75704a72f4: mov    %rsi,0x10(%rsp)
  0x00007f75704a72f9: mov    %rdx,0x8(%rsp)
  0x00007f75704a72fe: mov    0x40(%rbx),%rcx
  0x00007f75704a7302: jmpq   *%rcx

AHE@0x00007f75800e9360: 0xb0000000 i2c: 0x00007f75704a73e0 c2i: 0x00007f75704a74f4 c2iUV: 0x00007f75704a74c7
i2c argument handler #0 for: receiver ()Ljava/security/PermissionCollection; (539 bytes generated)
c2i argument handler starts at 0x7f75704a74f4
  0x00007f75704a73e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a73e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a73ee: cmp    %r11,%rax
  0x00007f75704a73f1: jbe    0x00007f75704a740a
  0x00007f75704a73f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a7401: cmp    %r11,%rax
  0x00007f75704a7404: jb     0x00007f75704a74a7
  0x00007f75704a740a: movabs $0x7f7570369420,%r11
  0x00007f75704a7414: cmp    %r11,%rax
  0x00007f75704a7417: jbe    0x00007f75704a7430
  0x00007f75704a741d: movabs $0x7f757036de58,%r11
  0x00007f75704a7427: cmp    %r11,%rax
  0x00007f75704a742a: jb     0x00007f75704a74a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a7430: mov    %rsp,-0x28(%rsp)
  0x00007f75704a7435: sub    $0x80,%rsp
  0x00007f75704a743c: mov    %rax,0x78(%rsp)
  0x00007f75704a7441: mov    %rcx,0x70(%rsp)
  0x00007f75704a7446: mov    %rdx,0x68(%rsp)
  0x00007f75704a744b: mov    %rbx,0x60(%rsp)
  0x00007f75704a7450: mov    %rbp,0x50(%rsp)
  0x00007f75704a7455: mov    %rsi,0x48(%rsp)
  0x00007f75704a745a: mov    %rdi,0x40(%rsp)
  0x00007f75704a745f: mov    %r8,0x38(%rsp)
  0x00007f75704a7464: mov    %r9,0x30(%rsp)
  0x00007f75704a7469: mov    %r10,0x28(%rsp)
  0x00007f75704a746e: mov    %r11,0x20(%rsp)
  0x00007f75704a7473: mov    %r12,0x18(%rsp)
  0x00007f75704a7478: mov    %r13,0x10(%rsp)
  0x00007f75704a747d: mov    %r14,0x8(%rsp)
  0x00007f75704a7482: mov    %r15,(%rsp)
  0x00007f75704a7486: movabs $0x7f758592f470,%rdi
  0x00007f75704a7490: movabs $0x7f75704a7430,%rsi
  0x00007f75704a749a: mov    %rsp,%rdx
  0x00007f75704a749d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a74a1: callq  0x00007f75853729fa
  0x00007f75704a74a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a74a7: mov    %rsp,%r11
  0x00007f75704a74aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a74ae: push   %rax
  0x00007f75704a74af: mov    %r11,%rax
  0x00007f75704a74b2: mov    0x50(%rbx),%r11
  0x00007f75704a74b6: mov    0x8(%rax),%rsi
  0x00007f75704a74ba: mov    %rbx,0x258(%r15)
  0x00007f75704a74c1: mov    %rbx,%rax
  0x00007f75704a74c4: jmpq   *%r11
  0x00007f75704a74c7: mov    0x8(%rsi),%ebx
  0x00007f75704a74ca: shl    $0x3,%rbx
  0x00007f75704a74ce: cmp    0x10(%rax),%rbx
  0x00007f75704a74d2: mov    0x8(%rax),%rbx
  0x00007f75704a74d6: je     0x00007f75704a74e1
  0x00007f75704a74dc: jmpq   0x00007f757046ec40
  0x00007f75704a74e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a74e9: je     0x00007f75704a75e4
  0x00007f75704a74ef: jmpq   0x00007f757046ec40
  0x00007f75704a74f4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a74fc: je     0x00007f75704a75e4
  0x00007f75704a7502: mov    %rsp,%r13
  0x00007f75704a7505: mov    (%rsp),%rax
  0x00007f75704a7509: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a750d: pushfq 
  0x00007f75704a750e: sub    $0x8,%rsp
  0x00007f75704a7512: mov    %rsp,-0x28(%rsp)
  0x00007f75704a7517: sub    $0x80,%rsp
  0x00007f75704a751e: mov    %rax,0x78(%rsp)
  0x00007f75704a7523: mov    %rcx,0x70(%rsp)
  0x00007f75704a7528: mov    %rdx,0x68(%rsp)
  0x00007f75704a752d: mov    %rbx,0x60(%rsp)
  0x00007f75704a7532: mov    %rbp,0x50(%rsp)
  0x00007f75704a7537: mov    %rsi,0x48(%rsp)
  0x00007f75704a753c: mov    %rdi,0x40(%rsp)
  0x00007f75704a7541: mov    %r8,0x38(%rsp)
  0x00007f75704a7546: mov    %r9,0x30(%rsp)
  0x00007f75704a754b: mov    %r10,0x28(%rsp)
  0x00007f75704a7550: mov    %r11,0x20(%rsp)
  0x00007f75704a7555: mov    %r12,0x18(%rsp)
  0x00007f75704a755a: mov    %r13,0x10(%rsp)
  0x00007f75704a755f: mov    %r14,0x8(%rsp)
  0x00007f75704a7564: mov    %r15,(%rsp)
  0x00007f75704a7568: sub    $0x200,%rsp
  0x00007f75704a756f: fxsave64 (%rsp)
  0x00007f75704a7574: mov    %rbx,%rdi
  0x00007f75704a7577: mov    %rax,%rsi
  0x00007f75704a757a: callq  0x00007f7585522bca
  0x00007f75704a757f: fxrstor64 (%rsp)
  0x00007f75704a7584: add    $0x200,%rsp
  0x00007f75704a758b: mov    (%rsp),%r15
  0x00007f75704a758f: mov    0x8(%rsp),%r14
  0x00007f75704a7594: mov    0x10(%rsp),%r13
  0x00007f75704a7599: mov    0x18(%rsp),%r12
  0x00007f75704a759e: mov    0x20(%rsp),%r11
  0x00007f75704a75a3: mov    0x28(%rsp),%r10
  0x00007f75704a75a8: mov    0x30(%rsp),%r9
  0x00007f75704a75ad: mov    0x38(%rsp),%r8
  0x00007f75704a75b2: mov    0x40(%rsp),%rdi
  0x00007f75704a75b7: mov    0x48(%rsp),%rsi
  0x00007f75704a75bc: mov    0x50(%rsp),%rbp
  0x00007f75704a75c1: mov    0x60(%rsp),%rbx
  0x00007f75704a75c6: mov    0x68(%rsp),%rdx
  0x00007f75704a75cb: mov    0x70(%rsp),%rcx
  0x00007f75704a75d0: mov    0x78(%rsp),%rax
  0x00007f75704a75d5: add    $0x80,%rsp
  0x00007f75704a75dc: add    $0x8,%rsp
  0x00007f75704a75e0: popfq  
  0x00007f75704a75e1: mov    %r13,%rsp
  0x00007f75704a75e4: pop    %rax
  0x00007f75704a75e5: mov    %rsp,%r13
  0x00007f75704a75e8: sub    $0x10,%rsp
  0x00007f75704a75ec: mov    %rax,(%rsp)
  0x00007f75704a75f0: mov    %rsi,0x8(%rsp)
  0x00007f75704a75f5: mov    0x40(%rbx),%rcx
  0x00007f75704a75f9: jmpq   *%rcx

AHE@0x00007f75800e93a8: 0x i2c: 0x00007f75704a76a0 c2i: 0x00007f75704a77b0 c2iUV: 0x00007f75704a7783
i2c argument handler #0 for: static ()Z (530 bytes generated)
c2i argument handler starts at 0x7f75704a77b0
  0x00007f75704a76a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a76a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a76ae: cmp    %r11,%rax
  0x00007f75704a76b1: jbe    0x00007f75704a76ca
  0x00007f75704a76b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a76c1: cmp    %r11,%rax
  0x00007f75704a76c4: jb     0x00007f75704a7767
  0x00007f75704a76ca: movabs $0x7f7570369420,%r11
  0x00007f75704a76d4: cmp    %r11,%rax
  0x00007f75704a76d7: jbe    0x00007f75704a76f0
  0x00007f75704a76dd: movabs $0x7f757036de58,%r11
  0x00007f75704a76e7: cmp    %r11,%rax
  0x00007f75704a76ea: jb     0x00007f75704a7767
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a76f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a76f5: sub    $0x80,%rsp
  0x00007f75704a76fc: mov    %rax,0x78(%rsp)
  0x00007f75704a7701: mov    %rcx,0x70(%rsp)
  0x00007f75704a7706: mov    %rdx,0x68(%rsp)
  0x00007f75704a770b: mov    %rbx,0x60(%rsp)
  0x00007f75704a7710: mov    %rbp,0x50(%rsp)
  0x00007f75704a7715: mov    %rsi,0x48(%rsp)
  0x00007f75704a771a: mov    %rdi,0x40(%rsp)
  0x00007f75704a771f: mov    %r8,0x38(%rsp)
  0x00007f75704a7724: mov    %r9,0x30(%rsp)
  0x00007f75704a7729: mov    %r10,0x28(%rsp)
  0x00007f75704a772e: mov    %r11,0x20(%rsp)
  0x00007f75704a7733: mov    %r12,0x18(%rsp)
  0x00007f75704a7738: mov    %r13,0x10(%rsp)
  0x00007f75704a773d: mov    %r14,0x8(%rsp)
  0x00007f75704a7742: mov    %r15,(%rsp)
  0x00007f75704a7746: movabs $0x7f758592f470,%rdi
  0x00007f75704a7750: movabs $0x7f75704a76f0,%rsi
  0x00007f75704a775a: mov    %rsp,%rdx
  0x00007f75704a775d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7761: callq  0x00007f75853729fa
  0x00007f75704a7766: hlt    
  ;; } verify_i2ce 
  0x00007f75704a7767: mov    %rsp,%r11
  0x00007f75704a776a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a776e: push   %rax
  0x00007f75704a776f: mov    %r11,%rax
  0x00007f75704a7772: mov    0x50(%rbx),%r11
  0x00007f75704a7776: mov    %rbx,0x258(%r15)
  0x00007f75704a777d: mov    %rbx,%rax
  0x00007f75704a7780: jmpq   *%r11
  0x00007f75704a7783: mov    0x8(%rsi),%ebx
  0x00007f75704a7786: shl    $0x3,%rbx
  0x00007f75704a778a: cmp    0x10(%rax),%rbx
  0x00007f75704a778e: mov    0x8(%rax),%rbx
  0x00007f75704a7792: je     0x00007f75704a779d
  0x00007f75704a7798: jmpq   0x00007f757046ec40
  0x00007f75704a779d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a77a5: je     0x00007f75704a78a0
  0x00007f75704a77ab: jmpq   0x00007f757046ec40
  0x00007f75704a77b0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a77b8: je     0x00007f75704a78a0
  0x00007f75704a77be: mov    %rsp,%r13
  0x00007f75704a77c1: mov    (%rsp),%rax
  0x00007f75704a77c5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a77c9: pushfq 
  0x00007f75704a77ca: sub    $0x8,%rsp
  0x00007f75704a77ce: mov    %rsp,-0x28(%rsp)
  0x00007f75704a77d3: sub    $0x80,%rsp
  0x00007f75704a77da: mov    %rax,0x78(%rsp)
  0x00007f75704a77df: mov    %rcx,0x70(%rsp)
  0x00007f75704a77e4: mov    %rdx,0x68(%rsp)
  0x00007f75704a77e9: mov    %rbx,0x60(%rsp)
  0x00007f75704a77ee: mov    %rbp,0x50(%rsp)
  0x00007f75704a77f3: mov    %rsi,0x48(%rsp)
  0x00007f75704a77f8: mov    %rdi,0x40(%rsp)
  0x00007f75704a77fd: mov    %r8,0x38(%rsp)
  0x00007f75704a7802: mov    %r9,0x30(%rsp)
  0x00007f75704a7807: mov    %r10,0x28(%rsp)
  0x00007f75704a780c: mov    %r11,0x20(%rsp)
  0x00007f75704a7811: mov    %r12,0x18(%rsp)
  0x00007f75704a7816: mov    %r13,0x10(%rsp)
  0x00007f75704a781b: mov    %r14,0x8(%rsp)
  0x00007f75704a7820: mov    %r15,(%rsp)
  0x00007f75704a7824: sub    $0x200,%rsp
  0x00007f75704a782b: fxsave64 (%rsp)
  0x00007f75704a7830: mov    %rbx,%rdi
  0x00007f75704a7833: mov    %rax,%rsi
  0x00007f75704a7836: callq  0x00007f7585522bca
  0x00007f75704a783b: fxrstor64 (%rsp)
  0x00007f75704a7840: add    $0x200,%rsp
  0x00007f75704a7847: mov    (%rsp),%r15
  0x00007f75704a784b: mov    0x8(%rsp),%r14
  0x00007f75704a7850: mov    0x10(%rsp),%r13
  0x00007f75704a7855: mov    0x18(%rsp),%r12
  0x00007f75704a785a: mov    0x20(%rsp),%r11
  0x00007f75704a785f: mov    0x28(%rsp),%r10
  0x00007f75704a7864: mov    0x30(%rsp),%r9
  0x00007f75704a7869: mov    0x38(%rsp),%r8
  0x00007f75704a786e: mov    0x40(%rsp),%rdi
  0x00007f75704a7873: mov    0x48(%rsp),%rsi
  0x00007f75704a7878: mov    0x50(%rsp),%rbp
  0x00007f75704a787d: mov    0x60(%rsp),%rbx
  0x00007f75704a7882: mov    0x68(%rsp),%rdx
  0x00007f75704a7887: mov    0x70(%rsp),%rcx
  0x00007f75704a788c: mov    0x78(%rsp),%rax
  0x00007f75704a7891: add    $0x80,%rsp
  0x00007f75704a7898: add    $0x8,%rsp
  0x00007f75704a789c: popfq  
  0x00007f75704a789d: mov    %r13,%rsp
  0x00007f75704a78a0: pop    %rax
  0x00007f75704a78a1: mov    %rsp,%r13
  0x00007f75704a78a4: sub    $0x10,%rsp
  0x00007f75704a78a8: mov    %rax,(%rsp)
  0x00007f75704a78ac: mov    0x40(%rbx),%rcx
  0x00007f75704a78b0: jmpq   *%rcx

AHE@0x00007f75800e93f0: 0xbb000000 i2c: 0x00007f75704a7960 c2i: 0x00007f75704a7a78 c2iUV: 0x00007f75704a7a4b
i2c argument handler #0 for: receiver (Ljava/security/Permission;)Z (548 bytes generated)
c2i argument handler starts at 0x7f75704a7a78
  0x00007f75704a7960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a7964: movabs $0x7f757036e3e0,%r11
  0x00007f75704a796e: cmp    %r11,%rax
  0x00007f75704a7971: jbe    0x00007f75704a798a
  0x00007f75704a7977: movabs $0x7f757046e3e0,%r11
  0x00007f75704a7981: cmp    %r11,%rax
  0x00007f75704a7984: jb     0x00007f75704a7a27
  0x00007f75704a798a: movabs $0x7f7570369420,%r11
  0x00007f75704a7994: cmp    %r11,%rax
  0x00007f75704a7997: jbe    0x00007f75704a79b0
  0x00007f75704a799d: movabs $0x7f757036de58,%r11
  0x00007f75704a79a7: cmp    %r11,%rax
  0x00007f75704a79aa: jb     0x00007f75704a7a27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a79b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a79b5: sub    $0x80,%rsp
  0x00007f75704a79bc: mov    %rax,0x78(%rsp)
  0x00007f75704a79c1: mov    %rcx,0x70(%rsp)
  0x00007f75704a79c6: mov    %rdx,0x68(%rsp)
  0x00007f75704a79cb: mov    %rbx,0x60(%rsp)
  0x00007f75704a79d0: mov    %rbp,0x50(%rsp)
  0x00007f75704a79d5: mov    %rsi,0x48(%rsp)
  0x00007f75704a79da: mov    %rdi,0x40(%rsp)
  0x00007f75704a79df: mov    %r8,0x38(%rsp)
  0x00007f75704a79e4: mov    %r9,0x30(%rsp)
  0x00007f75704a79e9: mov    %r10,0x28(%rsp)
  0x00007f75704a79ee: mov    %r11,0x20(%rsp)
  0x00007f75704a79f3: mov    %r12,0x18(%rsp)
  0x00007f75704a79f8: mov    %r13,0x10(%rsp)
  0x00007f75704a79fd: mov    %r14,0x8(%rsp)
  0x00007f75704a7a02: mov    %r15,(%rsp)
  0x00007f75704a7a06: movabs $0x7f758592f470,%rdi
  0x00007f75704a7a10: movabs $0x7f75704a79b0,%rsi
  0x00007f75704a7a1a: mov    %rsp,%rdx
  0x00007f75704a7a1d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7a21: callq  0x00007f75853729fa
  0x00007f75704a7a26: hlt    
  ;; } verify_i2ce 
  0x00007f75704a7a27: mov    %rsp,%r11
  0x00007f75704a7a2a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7a2e: push   %rax
  0x00007f75704a7a2f: mov    %r11,%rax
  0x00007f75704a7a32: mov    0x50(%rbx),%r11
  0x00007f75704a7a36: mov    0x10(%rax),%rsi
  0x00007f75704a7a3a: mov    0x8(%rax),%rdx
  0x00007f75704a7a3e: mov    %rbx,0x258(%r15)
  0x00007f75704a7a45: mov    %rbx,%rax
  0x00007f75704a7a48: jmpq   *%r11
  0x00007f75704a7a4b: mov    0x8(%rsi),%ebx
  0x00007f75704a7a4e: shl    $0x3,%rbx
  0x00007f75704a7a52: cmp    0x10(%rax),%rbx
  0x00007f75704a7a56: mov    0x8(%rax),%rbx
  0x00007f75704a7a5a: je     0x00007f75704a7a65
  0x00007f75704a7a60: jmpq   0x00007f757046ec40
  0x00007f75704a7a65: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a7a6d: je     0x00007f75704a7b68
  0x00007f75704a7a73: jmpq   0x00007f757046ec40
  0x00007f75704a7a78: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a7a80: je     0x00007f75704a7b68
  0x00007f75704a7a86: mov    %rsp,%r13
  0x00007f75704a7a89: mov    (%rsp),%rax
  0x00007f75704a7a8d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7a91: pushfq 
  0x00007f75704a7a92: sub    $0x8,%rsp
  0x00007f75704a7a96: mov    %rsp,-0x28(%rsp)
  0x00007f75704a7a9b: sub    $0x80,%rsp
  0x00007f75704a7aa2: mov    %rax,0x78(%rsp)
  0x00007f75704a7aa7: mov    %rcx,0x70(%rsp)
  0x00007f75704a7aac: mov    %rdx,0x68(%rsp)
  0x00007f75704a7ab1: mov    %rbx,0x60(%rsp)
  0x00007f75704a7ab6: mov    %rbp,0x50(%rsp)
  0x00007f75704a7abb: mov    %rsi,0x48(%rsp)
  0x00007f75704a7ac0: mov    %rdi,0x40(%rsp)
  0x00007f75704a7ac5: mov    %r8,0x38(%rsp)
  0x00007f75704a7aca: mov    %r9,0x30(%rsp)
  0x00007f75704a7acf: mov    %r10,0x28(%rsp)
  0x00007f75704a7ad4: mov    %r11,0x20(%rsp)
  0x00007f75704a7ad9: mov    %r12,0x18(%rsp)
  0x00007f75704a7ade: mov    %r13,0x10(%rsp)
  0x00007f75704a7ae3: mov    %r14,0x8(%rsp)
  0x00007f75704a7ae8: mov    %r15,(%rsp)
  0x00007f75704a7aec: sub    $0x200,%rsp
  0x00007f75704a7af3: fxsave64 (%rsp)
  0x00007f75704a7af8: mov    %rbx,%rdi
  0x00007f75704a7afb: mov    %rax,%rsi
  0x00007f75704a7afe: callq  0x00007f7585522bca
  0x00007f75704a7b03: fxrstor64 (%rsp)
  0x00007f75704a7b08: add    $0x200,%rsp
  0x00007f75704a7b0f: mov    (%rsp),%r15
  0x00007f75704a7b13: mov    0x8(%rsp),%r14
  0x00007f75704a7b18: mov    0x10(%rsp),%r13
  0x00007f75704a7b1d: mov    0x18(%rsp),%r12
  0x00007f75704a7b22: mov    0x20(%rsp),%r11
  0x00007f75704a7b27: mov    0x28(%rsp),%r10
  0x00007f75704a7b2c: mov    0x30(%rsp),%r9
  0x00007f75704a7b31: mov    0x38(%rsp),%r8
  0x00007f75704a7b36: mov    0x40(%rsp),%rdi
  0x00007f75704a7b3b: mov    0x48(%rsp),%rsi
  0x00007f75704a7b40: mov    0x50(%rsp),%rbp
  0x00007f75704a7b45: mov    0x60(%rsp),%rbx
  0x00007f75704a7b4a: mov    0x68(%rsp),%rdx
  0x00007f75704a7b4f: mov    0x70(%rsp),%rcx
  0x00007f75704a7b54: mov    0x78(%rsp),%rax
  0x00007f75704a7b59: add    $0x80,%rsp
  0x00007f75704a7b60: add    $0x8,%rsp
  0x00007f75704a7b64: popfq  
  0x00007f75704a7b65: mov    %r13,%rsp
  0x00007f75704a7b68: pop    %rax
  0x00007f75704a7b69: mov    %rsp,%r13
  0x00007f75704a7b6c: sub    $0x20,%rsp
  0x00007f75704a7b70: mov    %rax,(%rsp)
  0x00007f75704a7b74: mov    %rsi,0x10(%rsp)
  0x00007f75704a7b79: mov    %rdx,0x8(%rsp)
  0x00007f75704a7b7e: mov    0x40(%rbx),%rcx
  0x00007f75704a7b82: jmpq   *%rcx

AHE@0x00007f75800e9438: 0xb0000000 i2c: 0x00007f75704a7c60 c2i: 0x00007f75704a7d74 c2iUV: 0x00007f75704a7d47
i2c argument handler #0 for: receiver ()Ljava/security/PermissionCollection; (539 bytes generated)
c2i argument handler starts at 0x7f75704a7d74
  0x00007f75704a7c60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a7c64: movabs $0x7f757036e3e0,%r11
  0x00007f75704a7c6e: cmp    %r11,%rax
  0x00007f75704a7c71: jbe    0x00007f75704a7c8a
  0x00007f75704a7c77: movabs $0x7f757046e3e0,%r11
  0x00007f75704a7c81: cmp    %r11,%rax
  0x00007f75704a7c84: jb     0x00007f75704a7d27
  0x00007f75704a7c8a: movabs $0x7f7570369420,%r11
  0x00007f75704a7c94: cmp    %r11,%rax
  0x00007f75704a7c97: jbe    0x00007f75704a7cb0
  0x00007f75704a7c9d: movabs $0x7f757036de58,%r11
  0x00007f75704a7ca7: cmp    %r11,%rax
  0x00007f75704a7caa: jb     0x00007f75704a7d27
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a7cb0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a7cb5: sub    $0x80,%rsp
  0x00007f75704a7cbc: mov    %rax,0x78(%rsp)
  0x00007f75704a7cc1: mov    %rcx,0x70(%rsp)
  0x00007f75704a7cc6: mov    %rdx,0x68(%rsp)
  0x00007f75704a7ccb: mov    %rbx,0x60(%rsp)
  0x00007f75704a7cd0: mov    %rbp,0x50(%rsp)
  0x00007f75704a7cd5: mov    %rsi,0x48(%rsp)
  0x00007f75704a7cda: mov    %rdi,0x40(%rsp)
  0x00007f75704a7cdf: mov    %r8,0x38(%rsp)
  0x00007f75704a7ce4: mov    %r9,0x30(%rsp)
  0x00007f75704a7ce9: mov    %r10,0x28(%rsp)
  0x00007f75704a7cee: mov    %r11,0x20(%rsp)
  0x00007f75704a7cf3: mov    %r12,0x18(%rsp)
  0x00007f75704a7cf8: mov    %r13,0x10(%rsp)
  0x00007f75704a7cfd: mov    %r14,0x8(%rsp)
  0x00007f75704a7d02: mov    %r15,(%rsp)
  0x00007f75704a7d06: movabs $0x7f758592f470,%rdi
  0x00007f75704a7d10: movabs $0x7f75704a7cb0,%rsi
  0x00007f75704a7d1a: mov    %rsp,%rdx
  0x00007f75704a7d1d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7d21: callq  0x00007f75853729fa
  0x00007f75704a7d26: hlt    
  ;; } verify_i2ce 
  0x00007f75704a7d27: mov    %rsp,%r11
  0x00007f75704a7d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7d2e: push   %rax
  0x00007f75704a7d2f: mov    %r11,%rax
  0x00007f75704a7d32: mov    0x50(%rbx),%r11
  0x00007f75704a7d36: mov    0x8(%rax),%rsi
  0x00007f75704a7d3a: mov    %rbx,0x258(%r15)
  0x00007f75704a7d41: mov    %rbx,%rax
  0x00007f75704a7d44: jmpq   *%r11
  0x00007f75704a7d47: mov    0x8(%rsi),%ebx
  0x00007f75704a7d4a: shl    $0x3,%rbx
  0x00007f75704a7d4e: cmp    0x10(%rax),%rbx
  0x00007f75704a7d52: mov    0x8(%rax),%rbx
  0x00007f75704a7d56: je     0x00007f75704a7d61
  0x00007f75704a7d5c: jmpq   0x00007f757046ec40
  0x00007f75704a7d61: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a7d69: je     0x00007f75704a7e64
  0x00007f75704a7d6f: jmpq   0x00007f757046ec40
  0x00007f75704a7d74: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a7d7c: je     0x00007f75704a7e64
  0x00007f75704a7d82: mov    %rsp,%r13
  0x00007f75704a7d85: mov    (%rsp),%rax
  0x00007f75704a7d89: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7d8d: pushfq 
  0x00007f75704a7d8e: sub    $0x8,%rsp
  0x00007f75704a7d92: mov    %rsp,-0x28(%rsp)
  0x00007f75704a7d97: sub    $0x80,%rsp
  0x00007f75704a7d9e: mov    %rax,0x78(%rsp)
  0x00007f75704a7da3: mov    %rcx,0x70(%rsp)
  0x00007f75704a7da8: mov    %rdx,0x68(%rsp)
  0x00007f75704a7dad: mov    %rbx,0x60(%rsp)
  0x00007f75704a7db2: mov    %rbp,0x50(%rsp)
  0x00007f75704a7db7: mov    %rsi,0x48(%rsp)
  0x00007f75704a7dbc: mov    %rdi,0x40(%rsp)
  0x00007f75704a7dc1: mov    %r8,0x38(%rsp)
  0x00007f75704a7dc6: mov    %r9,0x30(%rsp)
  0x00007f75704a7dcb: mov    %r10,0x28(%rsp)
  0x00007f75704a7dd0: mov    %r11,0x20(%rsp)
  0x00007f75704a7dd5: mov    %r12,0x18(%rsp)
  0x00007f75704a7dda: mov    %r13,0x10(%rsp)
  0x00007f75704a7ddf: mov    %r14,0x8(%rsp)
  0x00007f75704a7de4: mov    %r15,(%rsp)
  0x00007f75704a7de8: sub    $0x200,%rsp
  0x00007f75704a7def: fxsave64 (%rsp)
  0x00007f75704a7df4: mov    %rbx,%rdi
  0x00007f75704a7df7: mov    %rax,%rsi
  0x00007f75704a7dfa: callq  0x00007f7585522bca
  0x00007f75704a7dff: fxrstor64 (%rsp)
  0x00007f75704a7e04: add    $0x200,%rsp
  0x00007f75704a7e0b: mov    (%rsp),%r15
  0x00007f75704a7e0f: mov    0x8(%rsp),%r14
  0x00007f75704a7e14: mov    0x10(%rsp),%r13
  0x00007f75704a7e19: mov    0x18(%rsp),%r12
  0x00007f75704a7e1e: mov    0x20(%rsp),%r11
  0x00007f75704a7e23: mov    0x28(%rsp),%r10
  0x00007f75704a7e28: mov    0x30(%rsp),%r9
  0x00007f75704a7e2d: mov    0x38(%rsp),%r8
  0x00007f75704a7e32: mov    0x40(%rsp),%rdi
  0x00007f75704a7e37: mov    0x48(%rsp),%rsi
  0x00007f75704a7e3c: mov    0x50(%rsp),%rbp
  0x00007f75704a7e41: mov    0x60(%rsp),%rbx
  0x00007f75704a7e46: mov    0x68(%rsp),%rdx
  0x00007f75704a7e4b: mov    0x70(%rsp),%rcx
  0x00007f75704a7e50: mov    0x78(%rsp),%rax
  0x00007f75704a7e55: add    $0x80,%rsp
  0x00007f75704a7e5c: add    $0x8,%rsp
  0x00007f75704a7e60: popfq  
  0x00007f75704a7e61: mov    %r13,%rsp
  0x00007f75704a7e64: pop    %rax
  0x00007f75704a7e65: mov    %rsp,%r13
  0x00007f75704a7e68: sub    $0x10,%rsp
  0x00007f75704a7e6c: mov    %rax,(%rsp)
  0x00007f75704a7e70: mov    %rsi,0x8(%rsp)
  0x00007f75704a7e75: mov    0x40(%rbx),%rcx
  0x00007f75704a7e79: jmpq   *%rcx

AHE@0x00007f75800e9480: 0xb0000000 i2c: 0x00007f75704a7f20 c2i: 0x00007f75704a8034 c2iUV: 0x00007f75704a8007
i2c argument handler #0 for: receiver ()[Ljava/security/Principal; (539 bytes generated)
c2i argument handler starts at 0x7f75704a8034
  0x00007f75704a7f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a7f24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a7f2e: cmp    %r11,%rax
  0x00007f75704a7f31: jbe    0x00007f75704a7f4a
  0x00007f75704a7f37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a7f41: cmp    %r11,%rax
  0x00007f75704a7f44: jb     0x00007f75704a7fe7
  0x00007f75704a7f4a: movabs $0x7f7570369420,%r11
  0x00007f75704a7f54: cmp    %r11,%rax
  0x00007f75704a7f57: jbe    0x00007f75704a7f70
  0x00007f75704a7f5d: movabs $0x7f757036de58,%r11
  0x00007f75704a7f67: cmp    %r11,%rax
  0x00007f75704a7f6a: jb     0x00007f75704a7fe7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a7f70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a7f75: sub    $0x80,%rsp
  0x00007f75704a7f7c: mov    %rax,0x78(%rsp)
  0x00007f75704a7f81: mov    %rcx,0x70(%rsp)
  0x00007f75704a7f86: mov    %rdx,0x68(%rsp)
  0x00007f75704a7f8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a7f90: mov    %rbp,0x50(%rsp)
  0x00007f75704a7f95: mov    %rsi,0x48(%rsp)
  0x00007f75704a7f9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a7f9f: mov    %r8,0x38(%rsp)
  0x00007f75704a7fa4: mov    %r9,0x30(%rsp)
  0x00007f75704a7fa9: mov    %r10,0x28(%rsp)
  0x00007f75704a7fae: mov    %r11,0x20(%rsp)
  0x00007f75704a7fb3: mov    %r12,0x18(%rsp)
  0x00007f75704a7fb8: mov    %r13,0x10(%rsp)
  0x00007f75704a7fbd: mov    %r14,0x8(%rsp)
  0x00007f75704a7fc2: mov    %r15,(%rsp)
  0x00007f75704a7fc6: movabs $0x7f758592f470,%rdi
  0x00007f75704a7fd0: movabs $0x7f75704a7f70,%rsi
  0x00007f75704a7fda: mov    %rsp,%rdx
  0x00007f75704a7fdd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7fe1: callq  0x00007f75853729fa
  0x00007f75704a7fe6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a7fe7: mov    %rsp,%r11
  0x00007f75704a7fea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a7fee: push   %rax
  0x00007f75704a7fef: mov    %r11,%rax
  0x00007f75704a7ff2: mov    0x50(%rbx),%r11
  0x00007f75704a7ff6: mov    0x8(%rax),%rsi
  0x00007f75704a7ffa: mov    %rbx,0x258(%r15)
  0x00007f75704a8001: mov    %rbx,%rax
  0x00007f75704a8004: jmpq   *%r11
  0x00007f75704a8007: mov    0x8(%rsi),%ebx
  0x00007f75704a800a: shl    $0x3,%rbx
  0x00007f75704a800e: cmp    0x10(%rax),%rbx
  0x00007f75704a8012: mov    0x8(%rax),%rbx
  0x00007f75704a8016: je     0x00007f75704a8021
  0x00007f75704a801c: jmpq   0x00007f757046ec40
  0x00007f75704a8021: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a8029: je     0x00007f75704a8124
  0x00007f75704a802f: jmpq   0x00007f757046ec40
  0x00007f75704a8034: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a803c: je     0x00007f75704a8124
  0x00007f75704a8042: mov    %rsp,%r13
  0x00007f75704a8045: mov    (%rsp),%rax
  0x00007f75704a8049: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a804d: pushfq 
  0x00007f75704a804e: sub    $0x8,%rsp
  0x00007f75704a8052: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8057: sub    $0x80,%rsp
  0x00007f75704a805e: mov    %rax,0x78(%rsp)
  0x00007f75704a8063: mov    %rcx,0x70(%rsp)
  0x00007f75704a8068: mov    %rdx,0x68(%rsp)
  0x00007f75704a806d: mov    %rbx,0x60(%rsp)
  0x00007f75704a8072: mov    %rbp,0x50(%rsp)
  0x00007f75704a8077: mov    %rsi,0x48(%rsp)
  0x00007f75704a807c: mov    %rdi,0x40(%rsp)
  0x00007f75704a8081: mov    %r8,0x38(%rsp)
  0x00007f75704a8086: mov    %r9,0x30(%rsp)
  0x00007f75704a808b: mov    %r10,0x28(%rsp)
  0x00007f75704a8090: mov    %r11,0x20(%rsp)
  0x00007f75704a8095: mov    %r12,0x18(%rsp)
  0x00007f75704a809a: mov    %r13,0x10(%rsp)
  0x00007f75704a809f: mov    %r14,0x8(%rsp)
  0x00007f75704a80a4: mov    %r15,(%rsp)
  0x00007f75704a80a8: sub    $0x200,%rsp
  0x00007f75704a80af: fxsave64 (%rsp)
  0x00007f75704a80b4: mov    %rbx,%rdi
  0x00007f75704a80b7: mov    %rax,%rsi
  0x00007f75704a80ba: callq  0x00007f7585522bca
  0x00007f75704a80bf: fxrstor64 (%rsp)
  0x00007f75704a80c4: add    $0x200,%rsp
  0x00007f75704a80cb: mov    (%rsp),%r15
  0x00007f75704a80cf: mov    0x8(%rsp),%r14
  0x00007f75704a80d4: mov    0x10(%rsp),%r13
  0x00007f75704a80d9: mov    0x18(%rsp),%r12
  0x00007f75704a80de: mov    0x20(%rsp),%r11
  0x00007f75704a80e3: mov    0x28(%rsp),%r10
  0x00007f75704a80e8: mov    0x30(%rsp),%r9
  0x00007f75704a80ed: mov    0x38(%rsp),%r8
  0x00007f75704a80f2: mov    0x40(%rsp),%rdi
  0x00007f75704a80f7: mov    0x48(%rsp),%rsi
  0x00007f75704a80fc: mov    0x50(%rsp),%rbp
  0x00007f75704a8101: mov    0x60(%rsp),%rbx
  0x00007f75704a8106: mov    0x68(%rsp),%rdx
  0x00007f75704a810b: mov    0x70(%rsp),%rcx
  0x00007f75704a8110: mov    0x78(%rsp),%rax
  0x00007f75704a8115: add    $0x80,%rsp
  0x00007f75704a811c: add    $0x8,%rsp
  0x00007f75704a8120: popfq  
  0x00007f75704a8121: mov    %r13,%rsp
  0x00007f75704a8124: pop    %rax
  0x00007f75704a8125: mov    %rsp,%r13
  0x00007f75704a8128: sub    $0x10,%rsp
  0x00007f75704a812c: mov    %rax,(%rsp)
  0x00007f75704a8130: mov    %rsi,0x8(%rsp)
  0x00007f75704a8135: mov    0x40(%rbx),%rcx
  0x00007f75704a8139: jmpq   *%rcx

AHE@0x00007f75800e94c8: 0xb0000000 i2c: 0x00007f75704a81e0 c2i: 0x00007f75704a82f4 c2iUV: 0x00007f75704a82c7
i2c argument handler #0 for: receiver ()Ljava/security/CodeSource; (539 bytes generated)
c2i argument handler starts at 0x7f75704a82f4
  0x00007f75704a81e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a81e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a81ee: cmp    %r11,%rax
  0x00007f75704a81f1: jbe    0x00007f75704a820a
  0x00007f75704a81f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a8201: cmp    %r11,%rax
  0x00007f75704a8204: jb     0x00007f75704a82a7
  0x00007f75704a820a: movabs $0x7f7570369420,%r11
  0x00007f75704a8214: cmp    %r11,%rax
  0x00007f75704a8217: jbe    0x00007f75704a8230
  0x00007f75704a821d: movabs $0x7f757036de58,%r11
  0x00007f75704a8227: cmp    %r11,%rax
  0x00007f75704a822a: jb     0x00007f75704a82a7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a8230: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8235: sub    $0x80,%rsp
  0x00007f75704a823c: mov    %rax,0x78(%rsp)
  0x00007f75704a8241: mov    %rcx,0x70(%rsp)
  0x00007f75704a8246: mov    %rdx,0x68(%rsp)
  0x00007f75704a824b: mov    %rbx,0x60(%rsp)
  0x00007f75704a8250: mov    %rbp,0x50(%rsp)
  0x00007f75704a8255: mov    %rsi,0x48(%rsp)
  0x00007f75704a825a: mov    %rdi,0x40(%rsp)
  0x00007f75704a825f: mov    %r8,0x38(%rsp)
  0x00007f75704a8264: mov    %r9,0x30(%rsp)
  0x00007f75704a8269: mov    %r10,0x28(%rsp)
  0x00007f75704a826e: mov    %r11,0x20(%rsp)
  0x00007f75704a8273: mov    %r12,0x18(%rsp)
  0x00007f75704a8278: mov    %r13,0x10(%rsp)
  0x00007f75704a827d: mov    %r14,0x8(%rsp)
  0x00007f75704a8282: mov    %r15,(%rsp)
  0x00007f75704a8286: movabs $0x7f758592f470,%rdi
  0x00007f75704a8290: movabs $0x7f75704a8230,%rsi
  0x00007f75704a829a: mov    %rsp,%rdx
  0x00007f75704a829d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a82a1: callq  0x00007f75853729fa
  0x00007f75704a82a6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a82a7: mov    %rsp,%r11
  0x00007f75704a82aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a82ae: push   %rax
  0x00007f75704a82af: mov    %r11,%rax
  0x00007f75704a82b2: mov    0x50(%rbx),%r11
  0x00007f75704a82b6: mov    0x8(%rax),%rsi
  0x00007f75704a82ba: mov    %rbx,0x258(%r15)
  0x00007f75704a82c1: mov    %rbx,%rax
  0x00007f75704a82c4: jmpq   *%r11
  0x00007f75704a82c7: mov    0x8(%rsi),%ebx
  0x00007f75704a82ca: shl    $0x3,%rbx
  0x00007f75704a82ce: cmp    0x10(%rax),%rbx
  0x00007f75704a82d2: mov    0x8(%rax),%rbx
  0x00007f75704a82d6: je     0x00007f75704a82e1
  0x00007f75704a82dc: jmpq   0x00007f757046ec40
  0x00007f75704a82e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a82e9: je     0x00007f75704a83e4
  0x00007f75704a82ef: jmpq   0x00007f757046ec40
  0x00007f75704a82f4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a82fc: je     0x00007f75704a83e4
  0x00007f75704a8302: mov    %rsp,%r13
  0x00007f75704a8305: mov    (%rsp),%rax
  0x00007f75704a8309: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a830d: pushfq 
  0x00007f75704a830e: sub    $0x8,%rsp
  0x00007f75704a8312: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8317: sub    $0x80,%rsp
  0x00007f75704a831e: mov    %rax,0x78(%rsp)
  0x00007f75704a8323: mov    %rcx,0x70(%rsp)
  0x00007f75704a8328: mov    %rdx,0x68(%rsp)
  0x00007f75704a832d: mov    %rbx,0x60(%rsp)
  0x00007f75704a8332: mov    %rbp,0x50(%rsp)
  0x00007f75704a8337: mov    %rsi,0x48(%rsp)
  0x00007f75704a833c: mov    %rdi,0x40(%rsp)
  0x00007f75704a8341: mov    %r8,0x38(%rsp)
  0x00007f75704a8346: mov    %r9,0x30(%rsp)
  0x00007f75704a834b: mov    %r10,0x28(%rsp)
  0x00007f75704a8350: mov    %r11,0x20(%rsp)
  0x00007f75704a8355: mov    %r12,0x18(%rsp)
  0x00007f75704a835a: mov    %r13,0x10(%rsp)
  0x00007f75704a835f: mov    %r14,0x8(%rsp)
  0x00007f75704a8364: mov    %r15,(%rsp)
  0x00007f75704a8368: sub    $0x200,%rsp
  0x00007f75704a836f: fxsave64 (%rsp)
  0x00007f75704a8374: mov    %rbx,%rdi
  0x00007f75704a8377: mov    %rax,%rsi
  0x00007f75704a837a: callq  0x00007f7585522bca
  0x00007f75704a837f: fxrstor64 (%rsp)
  0x00007f75704a8384: add    $0x200,%rsp
  0x00007f75704a838b: mov    (%rsp),%r15
  0x00007f75704a838f: mov    0x8(%rsp),%r14
  0x00007f75704a8394: mov    0x10(%rsp),%r13
  0x00007f75704a8399: mov    0x18(%rsp),%r12
  0x00007f75704a839e: mov    0x20(%rsp),%r11
  0x00007f75704a83a3: mov    0x28(%rsp),%r10
  0x00007f75704a83a8: mov    0x30(%rsp),%r9
  0x00007f75704a83ad: mov    0x38(%rsp),%r8
  0x00007f75704a83b2: mov    0x40(%rsp),%rdi
  0x00007f75704a83b7: mov    0x48(%rsp),%rsi
  0x00007f75704a83bc: mov    0x50(%rsp),%rbp
  0x00007f75704a83c1: mov    0x60(%rsp),%rbx
  0x00007f75704a83c6: mov    0x68(%rsp),%rdx
  0x00007f75704a83cb: mov    0x70(%rsp),%rcx
  0x00007f75704a83d0: mov    0x78(%rsp),%rax
  0x00007f75704a83d5: add    $0x80,%rsp
  0x00007f75704a83dc: add    $0x8,%rsp
  0x00007f75704a83e0: popfq  
  0x00007f75704a83e1: mov    %r13,%rsp
  0x00007f75704a83e4: pop    %rax
  0x00007f75704a83e5: mov    %rsp,%r13
  0x00007f75704a83e8: sub    $0x10,%rsp
  0x00007f75704a83ec: mov    %rax,(%rsp)
  0x00007f75704a83f0: mov    %rsi,0x8(%rsp)
  0x00007f75704a83f5: mov    0x40(%rbx),%rcx
  0x00007f75704a83f9: jmpq   *%rcx

AHE@0x00007f75800e9510: 0xb0000000 i2c: 0x00007f75704a84a0 c2i: 0x00007f75704a85b4 c2iUV: 0x00007f75704a8587
i2c argument handler #0 for: static (Ljava/security/ProtectionDomain;)Z (539 bytes generated)
c2i argument handler starts at 0x7f75704a85b4
  0x00007f75704a84a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a84a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a84ae: cmp    %r11,%rax
  0x00007f75704a84b1: jbe    0x00007f75704a84ca
  0x00007f75704a84b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a84c1: cmp    %r11,%rax
  0x00007f75704a84c4: jb     0x00007f75704a8567
  0x00007f75704a84ca: movabs $0x7f7570369420,%r11
  0x00007f75704a84d4: cmp    %r11,%rax
  0x00007f75704a84d7: jbe    0x00007f75704a84f0
  0x00007f75704a84dd: movabs $0x7f757036de58,%r11
  0x00007f75704a84e7: cmp    %r11,%rax
  0x00007f75704a84ea: jb     0x00007f75704a8567
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a84f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a84f5: sub    $0x80,%rsp
  0x00007f75704a84fc: mov    %rax,0x78(%rsp)
  0x00007f75704a8501: mov    %rcx,0x70(%rsp)
  0x00007f75704a8506: mov    %rdx,0x68(%rsp)
  0x00007f75704a850b: mov    %rbx,0x60(%rsp)
  0x00007f75704a8510: mov    %rbp,0x50(%rsp)
  0x00007f75704a8515: mov    %rsi,0x48(%rsp)
  0x00007f75704a851a: mov    %rdi,0x40(%rsp)
  0x00007f75704a851f: mov    %r8,0x38(%rsp)
  0x00007f75704a8524: mov    %r9,0x30(%rsp)
  0x00007f75704a8529: mov    %r10,0x28(%rsp)
  0x00007f75704a852e: mov    %r11,0x20(%rsp)
  0x00007f75704a8533: mov    %r12,0x18(%rsp)
  0x00007f75704a8538: mov    %r13,0x10(%rsp)
  0x00007f75704a853d: mov    %r14,0x8(%rsp)
  0x00007f75704a8542: mov    %r15,(%rsp)
  0x00007f75704a8546: movabs $0x7f758592f470,%rdi
  0x00007f75704a8550: movabs $0x7f75704a84f0,%rsi
  0x00007f75704a855a: mov    %rsp,%rdx
  0x00007f75704a855d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8561: callq  0x00007f75853729fa
  0x00007f75704a8566: hlt    
  ;; } verify_i2ce 
  0x00007f75704a8567: mov    %rsp,%r11
  0x00007f75704a856a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a856e: push   %rax
  0x00007f75704a856f: mov    %r11,%rax
  0x00007f75704a8572: mov    0x50(%rbx),%r11
  0x00007f75704a8576: mov    0x8(%rax),%rsi
  0x00007f75704a857a: mov    %rbx,0x258(%r15)
  0x00007f75704a8581: mov    %rbx,%rax
  0x00007f75704a8584: jmpq   *%r11
  0x00007f75704a8587: mov    0x8(%rsi),%ebx
  0x00007f75704a858a: shl    $0x3,%rbx
  0x00007f75704a858e: cmp    0x10(%rax),%rbx
  0x00007f75704a8592: mov    0x8(%rax),%rbx
  0x00007f75704a8596: je     0x00007f75704a85a1
  0x00007f75704a859c: jmpq   0x00007f757046ec40
  0x00007f75704a85a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a85a9: je     0x00007f75704a86a4
  0x00007f75704a85af: jmpq   0x00007f757046ec40
  0x00007f75704a85b4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a85bc: je     0x00007f75704a86a4
  0x00007f75704a85c2: mov    %rsp,%r13
  0x00007f75704a85c5: mov    (%rsp),%rax
  0x00007f75704a85c9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a85cd: pushfq 
  0x00007f75704a85ce: sub    $0x8,%rsp
  0x00007f75704a85d2: mov    %rsp,-0x28(%rsp)
  0x00007f75704a85d7: sub    $0x80,%rsp
  0x00007f75704a85de: mov    %rax,0x78(%rsp)
  0x00007f75704a85e3: mov    %rcx,0x70(%rsp)
  0x00007f75704a85e8: mov    %rdx,0x68(%rsp)
  0x00007f75704a85ed: mov    %rbx,0x60(%rsp)
  0x00007f75704a85f2: mov    %rbp,0x50(%rsp)
  0x00007f75704a85f7: mov    %rsi,0x48(%rsp)
  0x00007f75704a85fc: mov    %rdi,0x40(%rsp)
  0x00007f75704a8601: mov    %r8,0x38(%rsp)
  0x00007f75704a8606: mov    %r9,0x30(%rsp)
  0x00007f75704a860b: mov    %r10,0x28(%rsp)
  0x00007f75704a8610: mov    %r11,0x20(%rsp)
  0x00007f75704a8615: mov    %r12,0x18(%rsp)
  0x00007f75704a861a: mov    %r13,0x10(%rsp)
  0x00007f75704a861f: mov    %r14,0x8(%rsp)
  0x00007f75704a8624: mov    %r15,(%rsp)
  0x00007f75704a8628: sub    $0x200,%rsp
  0x00007f75704a862f: fxsave64 (%rsp)
  0x00007f75704a8634: mov    %rbx,%rdi
  0x00007f75704a8637: mov    %rax,%rsi
  0x00007f75704a863a: callq  0x00007f7585522bca
  0x00007f75704a863f: fxrstor64 (%rsp)
  0x00007f75704a8644: add    $0x200,%rsp
  0x00007f75704a864b: mov    (%rsp),%r15
  0x00007f75704a864f: mov    0x8(%rsp),%r14
  0x00007f75704a8654: mov    0x10(%rsp),%r13
  0x00007f75704a8659: mov    0x18(%rsp),%r12
  0x00007f75704a865e: mov    0x20(%rsp),%r11
  0x00007f75704a8663: mov    0x28(%rsp),%r10
  0x00007f75704a8668: mov    0x30(%rsp),%r9
  0x00007f75704a866d: mov    0x38(%rsp),%r8
  0x00007f75704a8672: mov    0x40(%rsp),%rdi
  0x00007f75704a8677: mov    0x48(%rsp),%rsi
  0x00007f75704a867c: mov    0x50(%rsp),%rbp
  0x00007f75704a8681: mov    0x60(%rsp),%rbx
  0x00007f75704a8686: mov    0x68(%rsp),%rdx
  0x00007f75704a868b: mov    0x70(%rsp),%rcx
  0x00007f75704a8690: mov    0x78(%rsp),%rax
  0x00007f75704a8695: add    $0x80,%rsp
  0x00007f75704a869c: add    $0x8,%rsp
  0x00007f75704a86a0: popfq  
  0x00007f75704a86a1: mov    %r13,%rsp
  0x00007f75704a86a4: pop    %rax
  0x00007f75704a86a5: mov    %rsp,%r13
  0x00007f75704a86a8: sub    $0x10,%rsp
  0x00007f75704a86ac: mov    %rax,(%rsp)
  0x00007f75704a86b0: mov    %rsi,0x8(%rsp)
  0x00007f75704a86b5: mov    0x40(%rbx),%rcx
  0x00007f75704a86b9: jmpq   *%rcx

AHE@0x00007f75800e9558: 0xb0000000 i2c: 0x00007f75704a8760 c2i: 0x00007f75704a8874 c2iUV: 0x00007f75704a8847
i2c argument handler #0 for: receiver ()Ljava/lang/ClassLoader; (539 bytes generated)
c2i argument handler starts at 0x7f75704a8874
  0x00007f75704a8760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a8764: movabs $0x7f757036e3e0,%r11
  0x00007f75704a876e: cmp    %r11,%rax
  0x00007f75704a8771: jbe    0x00007f75704a878a
  0x00007f75704a8777: movabs $0x7f757046e3e0,%r11
  0x00007f75704a8781: cmp    %r11,%rax
  0x00007f75704a8784: jb     0x00007f75704a8827
  0x00007f75704a878a: movabs $0x7f7570369420,%r11
  0x00007f75704a8794: cmp    %r11,%rax
  0x00007f75704a8797: jbe    0x00007f75704a87b0
  0x00007f75704a879d: movabs $0x7f757036de58,%r11
  0x00007f75704a87a7: cmp    %r11,%rax
  0x00007f75704a87aa: jb     0x00007f75704a8827
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a87b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a87b5: sub    $0x80,%rsp
  0x00007f75704a87bc: mov    %rax,0x78(%rsp)
  0x00007f75704a87c1: mov    %rcx,0x70(%rsp)
  0x00007f75704a87c6: mov    %rdx,0x68(%rsp)
  0x00007f75704a87cb: mov    %rbx,0x60(%rsp)
  0x00007f75704a87d0: mov    %rbp,0x50(%rsp)
  0x00007f75704a87d5: mov    %rsi,0x48(%rsp)
  0x00007f75704a87da: mov    %rdi,0x40(%rsp)
  0x00007f75704a87df: mov    %r8,0x38(%rsp)
  0x00007f75704a87e4: mov    %r9,0x30(%rsp)
  0x00007f75704a87e9: mov    %r10,0x28(%rsp)
  0x00007f75704a87ee: mov    %r11,0x20(%rsp)
  0x00007f75704a87f3: mov    %r12,0x18(%rsp)
  0x00007f75704a87f8: mov    %r13,0x10(%rsp)
  0x00007f75704a87fd: mov    %r14,0x8(%rsp)
  0x00007f75704a8802: mov    %r15,(%rsp)
  0x00007f75704a8806: movabs $0x7f758592f470,%rdi
  0x00007f75704a8810: movabs $0x7f75704a87b0,%rsi
  0x00007f75704a881a: mov    %rsp,%rdx
  0x00007f75704a881d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8821: callq  0x00007f75853729fa
  0x00007f75704a8826: hlt    
  ;; } verify_i2ce 
  0x00007f75704a8827: mov    %rsp,%r11
  0x00007f75704a882a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a882e: push   %rax
  0x00007f75704a882f: mov    %r11,%rax
  0x00007f75704a8832: mov    0x50(%rbx),%r11
  0x00007f75704a8836: mov    0x8(%rax),%rsi
  0x00007f75704a883a: mov    %rbx,0x258(%r15)
  0x00007f75704a8841: mov    %rbx,%rax
  0x00007f75704a8844: jmpq   *%r11
  0x00007f75704a8847: mov    0x8(%rsi),%ebx
  0x00007f75704a884a: shl    $0x3,%rbx
  0x00007f75704a884e: cmp    0x10(%rax),%rbx
  0x00007f75704a8852: mov    0x8(%rax),%rbx
  0x00007f75704a8856: je     0x00007f75704a8861
  0x00007f75704a885c: jmpq   0x00007f757046ec40
  0x00007f75704a8861: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a8869: je     0x00007f75704a8964
  0x00007f75704a886f: jmpq   0x00007f757046ec40
  0x00007f75704a8874: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a887c: je     0x00007f75704a8964
  0x00007f75704a8882: mov    %rsp,%r13
  0x00007f75704a8885: mov    (%rsp),%rax
  0x00007f75704a8889: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a888d: pushfq 
  0x00007f75704a888e: sub    $0x8,%rsp
  0x00007f75704a8892: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8897: sub    $0x80,%rsp
  0x00007f75704a889e: mov    %rax,0x78(%rsp)
  0x00007f75704a88a3: mov    %rcx,0x70(%rsp)
  0x00007f75704a88a8: mov    %rdx,0x68(%rsp)
  0x00007f75704a88ad: mov    %rbx,0x60(%rsp)
  0x00007f75704a88b2: mov    %rbp,0x50(%rsp)
  0x00007f75704a88b7: mov    %rsi,0x48(%rsp)
  0x00007f75704a88bc: mov    %rdi,0x40(%rsp)
  0x00007f75704a88c1: mov    %r8,0x38(%rsp)
  0x00007f75704a88c6: mov    %r9,0x30(%rsp)
  0x00007f75704a88cb: mov    %r10,0x28(%rsp)
  0x00007f75704a88d0: mov    %r11,0x20(%rsp)
  0x00007f75704a88d5: mov    %r12,0x18(%rsp)
  0x00007f75704a88da: mov    %r13,0x10(%rsp)
  0x00007f75704a88df: mov    %r14,0x8(%rsp)
  0x00007f75704a88e4: mov    %r15,(%rsp)
  0x00007f75704a88e8: sub    $0x200,%rsp
  0x00007f75704a88ef: fxsave64 (%rsp)
  0x00007f75704a88f4: mov    %rbx,%rdi
  0x00007f75704a88f7: mov    %rax,%rsi
  0x00007f75704a88fa: callq  0x00007f7585522bca
  0x00007f75704a88ff: fxrstor64 (%rsp)
  0x00007f75704a8904: add    $0x200,%rsp
  0x00007f75704a890b: mov    (%rsp),%r15
  0x00007f75704a890f: mov    0x8(%rsp),%r14
  0x00007f75704a8914: mov    0x10(%rsp),%r13
  0x00007f75704a8919: mov    0x18(%rsp),%r12
  0x00007f75704a891e: mov    0x20(%rsp),%r11
  0x00007f75704a8923: mov    0x28(%rsp),%r10
  0x00007f75704a8928: mov    0x30(%rsp),%r9
  0x00007f75704a892d: mov    0x38(%rsp),%r8
  0x00007f75704a8932: mov    0x40(%rsp),%rdi
  0x00007f75704a8937: mov    0x48(%rsp),%rsi
  0x00007f75704a893c: mov    0x50(%rsp),%rbp
  0x00007f75704a8941: mov    0x60(%rsp),%rbx
  0x00007f75704a8946: mov    0x68(%rsp),%rdx
  0x00007f75704a894b: mov    0x70(%rsp),%rcx
  0x00007f75704a8950: mov    0x78(%rsp),%rax
  0x00007f75704a8955: add    $0x80,%rsp
  0x00007f75704a895c: add    $0x8,%rsp
  0x00007f75704a8960: popfq  
  0x00007f75704a8961: mov    %r13,%rsp
  0x00007f75704a8964: pop    %rax
  0x00007f75704a8965: mov    %rsp,%r13
  0x00007f75704a8968: sub    $0x10,%rsp
  0x00007f75704a896c: mov    %rax,(%rsp)
  0x00007f75704a8970: mov    %rsi,0x8(%rsp)
  0x00007f75704a8975: mov    0x40(%rbx),%rcx
  0x00007f75704a8979: jmpq   *%rcx

AHE@0x00007f75800e95a0: 0xb0000000 i2c: 0x00007f75704a8a20 c2i: 0x00007f75704a8b34 c2iUV: 0x00007f75704a8b07
i2c argument handler #0 for: receiver ()Ljava/lang/String; (539 bytes generated)
c2i argument handler starts at 0x7f75704a8b34
  0x00007f75704a8a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a8a24: movabs $0x7f757036e3e0,%r11
  0x00007f75704a8a2e: cmp    %r11,%rax
  0x00007f75704a8a31: jbe    0x00007f75704a8a4a
  0x00007f75704a8a37: movabs $0x7f757046e3e0,%r11
  0x00007f75704a8a41: cmp    %r11,%rax
  0x00007f75704a8a44: jb     0x00007f75704a8ae7
  0x00007f75704a8a4a: movabs $0x7f7570369420,%r11
  0x00007f75704a8a54: cmp    %r11,%rax
  0x00007f75704a8a57: jbe    0x00007f75704a8a70
  0x00007f75704a8a5d: movabs $0x7f757036de58,%r11
  0x00007f75704a8a67: cmp    %r11,%rax
  0x00007f75704a8a6a: jb     0x00007f75704a8ae7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a8a70: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8a75: sub    $0x80,%rsp
  0x00007f75704a8a7c: mov    %rax,0x78(%rsp)
  0x00007f75704a8a81: mov    %rcx,0x70(%rsp)
  0x00007f75704a8a86: mov    %rdx,0x68(%rsp)
  0x00007f75704a8a8b: mov    %rbx,0x60(%rsp)
  0x00007f75704a8a90: mov    %rbp,0x50(%rsp)
  0x00007f75704a8a95: mov    %rsi,0x48(%rsp)
  0x00007f75704a8a9a: mov    %rdi,0x40(%rsp)
  0x00007f75704a8a9f: mov    %r8,0x38(%rsp)
  0x00007f75704a8aa4: mov    %r9,0x30(%rsp)
  0x00007f75704a8aa9: mov    %r10,0x28(%rsp)
  0x00007f75704a8aae: mov    %r11,0x20(%rsp)
  0x00007f75704a8ab3: mov    %r12,0x18(%rsp)
  0x00007f75704a8ab8: mov    %r13,0x10(%rsp)
  0x00007f75704a8abd: mov    %r14,0x8(%rsp)
  0x00007f75704a8ac2: mov    %r15,(%rsp)
  0x00007f75704a8ac6: movabs $0x7f758592f470,%rdi
  0x00007f75704a8ad0: movabs $0x7f75704a8a70,%rsi
  0x00007f75704a8ada: mov    %rsp,%rdx
  0x00007f75704a8add: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8ae1: callq  0x00007f75853729fa
  0x00007f75704a8ae6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a8ae7: mov    %rsp,%r11
  0x00007f75704a8aea: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8aee: push   %rax
  0x00007f75704a8aef: mov    %r11,%rax
  0x00007f75704a8af2: mov    0x50(%rbx),%r11
  0x00007f75704a8af6: mov    0x8(%rax),%rsi
  0x00007f75704a8afa: mov    %rbx,0x258(%r15)
  0x00007f75704a8b01: mov    %rbx,%rax
  0x00007f75704a8b04: jmpq   *%r11
  0x00007f75704a8b07: mov    0x8(%rsi),%ebx
  0x00007f75704a8b0a: shl    $0x3,%rbx
  0x00007f75704a8b0e: cmp    0x10(%rax),%rbx
  0x00007f75704a8b12: mov    0x8(%rax),%rbx
  0x00007f75704a8b16: je     0x00007f75704a8b21
  0x00007f75704a8b1c: jmpq   0x00007f757046ec40
  0x00007f75704a8b21: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a8b29: je     0x00007f75704a8c24
  0x00007f75704a8b2f: jmpq   0x00007f757046ec40
  0x00007f75704a8b34: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a8b3c: je     0x00007f75704a8c24
  0x00007f75704a8b42: mov    %rsp,%r13
  0x00007f75704a8b45: mov    (%rsp),%rax
  0x00007f75704a8b49: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8b4d: pushfq 
  0x00007f75704a8b4e: sub    $0x8,%rsp
  0x00007f75704a8b52: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8b57: sub    $0x80,%rsp
  0x00007f75704a8b5e: mov    %rax,0x78(%rsp)
  0x00007f75704a8b63: mov    %rcx,0x70(%rsp)
  0x00007f75704a8b68: mov    %rdx,0x68(%rsp)
  0x00007f75704a8b6d: mov    %rbx,0x60(%rsp)
  0x00007f75704a8b72: mov    %rbp,0x50(%rsp)
  0x00007f75704a8b77: mov    %rsi,0x48(%rsp)
  0x00007f75704a8b7c: mov    %rdi,0x40(%rsp)
  0x00007f75704a8b81: mov    %r8,0x38(%rsp)
  0x00007f75704a8b86: mov    %r9,0x30(%rsp)
  0x00007f75704a8b8b: mov    %r10,0x28(%rsp)
  0x00007f75704a8b90: mov    %r11,0x20(%rsp)
  0x00007f75704a8b95: mov    %r12,0x18(%rsp)
  0x00007f75704a8b9a: mov    %r13,0x10(%rsp)
  0x00007f75704a8b9f: mov    %r14,0x8(%rsp)
  0x00007f75704a8ba4: mov    %r15,(%rsp)
  0x00007f75704a8ba8: sub    $0x200,%rsp
  0x00007f75704a8baf: fxsave64 (%rsp)
  0x00007f75704a8bb4: mov    %rbx,%rdi
  0x00007f75704a8bb7: mov    %rax,%rsi
  0x00007f75704a8bba: callq  0x00007f7585522bca
  0x00007f75704a8bbf: fxrstor64 (%rsp)
  0x00007f75704a8bc4: add    $0x200,%rsp
  0x00007f75704a8bcb: mov    (%rsp),%r15
  0x00007f75704a8bcf: mov    0x8(%rsp),%r14
  0x00007f75704a8bd4: mov    0x10(%rsp),%r13
  0x00007f75704a8bd9: mov    0x18(%rsp),%r12
  0x00007f75704a8bde: mov    0x20(%rsp),%r11
  0x00007f75704a8be3: mov    0x28(%rsp),%r10
  0x00007f75704a8be8: mov    0x30(%rsp),%r9
  0x00007f75704a8bed: mov    0x38(%rsp),%r8
  0x00007f75704a8bf2: mov    0x40(%rsp),%rdi
  0x00007f75704a8bf7: mov    0x48(%rsp),%rsi
  0x00007f75704a8bfc: mov    0x50(%rsp),%rbp
  0x00007f75704a8c01: mov    0x60(%rsp),%rbx
  0x00007f75704a8c06: mov    0x68(%rsp),%rdx
  0x00007f75704a8c0b: mov    0x70(%rsp),%rcx
  0x00007f75704a8c10: mov    0x78(%rsp),%rax
  0x00007f75704a8c15: add    $0x80,%rsp
  0x00007f75704a8c1c: add    $0x8,%rsp
  0x00007f75704a8c20: popfq  
  0x00007f75704a8c21: mov    %r13,%rsp
  0x00007f75704a8c24: pop    %rax
  0x00007f75704a8c25: mov    %rsp,%r13
  0x00007f75704a8c28: sub    $0x10,%rsp
  0x00007f75704a8c2c: mov    %rax,(%rsp)
  0x00007f75704a8c30: mov    %rsi,0x8(%rsp)
  0x00007f75704a8c35: mov    0x40(%rbx),%rcx
  0x00007f75704a8c39: jmpq   *%rcx

AHE@0x00007f75800e95e8: 0x i2c: 0x00007f75704a8ce0 c2i: 0x00007f75704a8df0 c2iUV: 0x00007f75704a8dc3
i2c argument handler #0 for: static ()V (530 bytes generated)
c2i argument handler starts at 0x7f75704a8df0
  0x00007f75704a8ce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a8ce4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a8cee: cmp    %r11,%rax
  0x00007f75704a8cf1: jbe    0x00007f75704a8d0a
  0x00007f75704a8cf7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a8d01: cmp    %r11,%rax
  0x00007f75704a8d04: jb     0x00007f75704a8da7
  0x00007f75704a8d0a: movabs $0x7f7570369420,%r11
  0x00007f75704a8d14: cmp    %r11,%rax
  0x00007f75704a8d17: jbe    0x00007f75704a8d30
  0x00007f75704a8d1d: movabs $0x7f757036de58,%r11
  0x00007f75704a8d27: cmp    %r11,%rax
  0x00007f75704a8d2a: jb     0x00007f75704a8da7
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a8d30: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8d35: sub    $0x80,%rsp
  0x00007f75704a8d3c: mov    %rax,0x78(%rsp)
  0x00007f75704a8d41: mov    %rcx,0x70(%rsp)
  0x00007f75704a8d46: mov    %rdx,0x68(%rsp)
  0x00007f75704a8d4b: mov    %rbx,0x60(%rsp)
  0x00007f75704a8d50: mov    %rbp,0x50(%rsp)
  0x00007f75704a8d55: mov    %rsi,0x48(%rsp)
  0x00007f75704a8d5a: mov    %rdi,0x40(%rsp)
  0x00007f75704a8d5f: mov    %r8,0x38(%rsp)
  0x00007f75704a8d64: mov    %r9,0x30(%rsp)
  0x00007f75704a8d69: mov    %r10,0x28(%rsp)
  0x00007f75704a8d6e: mov    %r11,0x20(%rsp)
  0x00007f75704a8d73: mov    %r12,0x18(%rsp)
  0x00007f75704a8d78: mov    %r13,0x10(%rsp)
  0x00007f75704a8d7d: mov    %r14,0x8(%rsp)
  0x00007f75704a8d82: mov    %r15,(%rsp)
  0x00007f75704a8d86: movabs $0x7f758592f470,%rdi
  0x00007f75704a8d90: movabs $0x7f75704a8d30,%rsi
  0x00007f75704a8d9a: mov    %rsp,%rdx
  0x00007f75704a8d9d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8da1: callq  0x00007f75853729fa
  0x00007f75704a8da6: hlt    
  ;; } verify_i2ce 
  0x00007f75704a8da7: mov    %rsp,%r11
  0x00007f75704a8daa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8dae: push   %rax
  0x00007f75704a8daf: mov    %r11,%rax
  0x00007f75704a8db2: mov    0x50(%rbx),%r11
  0x00007f75704a8db6: mov    %rbx,0x258(%r15)
  0x00007f75704a8dbd: mov    %rbx,%rax
  0x00007f75704a8dc0: jmpq   *%r11
  0x00007f75704a8dc3: mov    0x8(%rsi),%ebx
  0x00007f75704a8dc6: shl    $0x3,%rbx
  0x00007f75704a8dca: cmp    0x10(%rax),%rbx
  0x00007f75704a8dce: mov    0x8(%rax),%rbx
  0x00007f75704a8dd2: je     0x00007f75704a8ddd
  0x00007f75704a8dd8: jmpq   0x00007f757046ec40
  0x00007f75704a8ddd: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a8de5: je     0x00007f75704a8ee0
  0x00007f75704a8deb: jmpq   0x00007f757046ec40
  0x00007f75704a8df0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a8df8: je     0x00007f75704a8ee0
  0x00007f75704a8dfe: mov    %rsp,%r13
  0x00007f75704a8e01: mov    (%rsp),%rax
  0x00007f75704a8e05: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a8e09: pushfq 
  0x00007f75704a8e0a: sub    $0x8,%rsp
  0x00007f75704a8e0e: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8e13: sub    $0x80,%rsp
  0x00007f75704a8e1a: mov    %rax,0x78(%rsp)
  0x00007f75704a8e1f: mov    %rcx,0x70(%rsp)
  0x00007f75704a8e24: mov    %rdx,0x68(%rsp)
  0x00007f75704a8e29: mov    %rbx,0x60(%rsp)
  0x00007f75704a8e2e: mov    %rbp,0x50(%rsp)
  0x00007f75704a8e33: mov    %rsi,0x48(%rsp)
  0x00007f75704a8e38: mov    %rdi,0x40(%rsp)
  0x00007f75704a8e3d: mov    %r8,0x38(%rsp)
  0x00007f75704a8e42: mov    %r9,0x30(%rsp)
  0x00007f75704a8e47: mov    %r10,0x28(%rsp)
  0x00007f75704a8e4c: mov    %r11,0x20(%rsp)
  0x00007f75704a8e51: mov    %r12,0x18(%rsp)
  0x00007f75704a8e56: mov    %r13,0x10(%rsp)
  0x00007f75704a8e5b: mov    %r14,0x8(%rsp)
  0x00007f75704a8e60: mov    %r15,(%rsp)
  0x00007f75704a8e64: sub    $0x200,%rsp
  0x00007f75704a8e6b: fxsave64 (%rsp)
  0x00007f75704a8e70: mov    %rbx,%rdi
  0x00007f75704a8e73: mov    %rax,%rsi
  0x00007f75704a8e76: callq  0x00007f7585522bca
  0x00007f75704a8e7b: fxrstor64 (%rsp)
  0x00007f75704a8e80: add    $0x200,%rsp
  0x00007f75704a8e87: mov    (%rsp),%r15
  0x00007f75704a8e8b: mov    0x8(%rsp),%r14
  0x00007f75704a8e90: mov    0x10(%rsp),%r13
  0x00007f75704a8e95: mov    0x18(%rsp),%r12
  0x00007f75704a8e9a: mov    0x20(%rsp),%r11
  0x00007f75704a8e9f: mov    0x28(%rsp),%r10
  0x00007f75704a8ea4: mov    0x30(%rsp),%r9
  0x00007f75704a8ea9: mov    0x38(%rsp),%r8
  0x00007f75704a8eae: mov    0x40(%rsp),%rdi
  0x00007f75704a8eb3: mov    0x48(%rsp),%rsi
  0x00007f75704a8eb8: mov    0x50(%rsp),%rbp
  0x00007f75704a8ebd: mov    0x60(%rsp),%rbx
  0x00007f75704a8ec2: mov    0x68(%rsp),%rdx
  0x00007f75704a8ec7: mov    0x70(%rsp),%rcx
  0x00007f75704a8ecc: mov    0x78(%rsp),%rax
  0x00007f75704a8ed1: add    $0x80,%rsp
  0x00007f75704a8ed8: add    $0x8,%rsp
  0x00007f75704a8edc: popfq  
  0x00007f75704a8edd: mov    %r13,%rsp
  0x00007f75704a8ee0: pop    %rax
  0x00007f75704a8ee1: mov    %rsp,%r13
  0x00007f75704a8ee4: sub    $0x10,%rsp
  0x00007f75704a8ee8: mov    %rax,(%rsp)
  0x00007f75704a8eec: mov    0x40(%rbx),%rcx
  0x00007f75704a8ef0: jmpq   *%rcx

AHE@0x00007f75800e9630: 0xbbbbb000 i2c: 0x00007f75704a8fa0 c2i: 0x00007f75704a90c4 c2iUV: 0x00007f75704a9097
i2c argument handler #0 for: receiver (Ljava/security/CodeSource;Ljava/security/PermissionCollection;Ljava/lang/ClassLoader;[Ljava/security/Principal;)V (575 bytes generated)
c2i argument handler starts at 0x7f75704a90c4
  0x00007f75704a8fa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a8fa4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a8fae: cmp    %r11,%rax
  0x00007f75704a8fb1: jbe    0x00007f75704a8fca
  0x00007f75704a8fb7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a8fc1: cmp    %r11,%rax
  0x00007f75704a8fc4: jb     0x00007f75704a9067
  0x00007f75704a8fca: movabs $0x7f7570369420,%r11
  0x00007f75704a8fd4: cmp    %r11,%rax
  0x00007f75704a8fd7: jbe    0x00007f75704a8ff0
  0x00007f75704a8fdd: movabs $0x7f757036de58,%r11
  0x00007f75704a8fe7: cmp    %r11,%rax
  0x00007f75704a8fea: jb     0x00007f75704a9067
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a8ff0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a8ff5: sub    $0x80,%rsp
  0x00007f75704a8ffc: mov    %rax,0x78(%rsp)
  0x00007f75704a9001: mov    %rcx,0x70(%rsp)
  0x00007f75704a9006: mov    %rdx,0x68(%rsp)
  0x00007f75704a900b: mov    %rbx,0x60(%rsp)
  0x00007f75704a9010: mov    %rbp,0x50(%rsp)
  0x00007f75704a9015: mov    %rsi,0x48(%rsp)
  0x00007f75704a901a: mov    %rdi,0x40(%rsp)
  0x00007f75704a901f: mov    %r8,0x38(%rsp)
  0x00007f75704a9024: mov    %r9,0x30(%rsp)
  0x00007f75704a9029: mov    %r10,0x28(%rsp)
  0x00007f75704a902e: mov    %r11,0x20(%rsp)
  0x00007f75704a9033: mov    %r12,0x18(%rsp)
  0x00007f75704a9038: mov    %r13,0x10(%rsp)
  0x00007f75704a903d: mov    %r14,0x8(%rsp)
  0x00007f75704a9042: mov    %r15,(%rsp)
  0x00007f75704a9046: movabs $0x7f758592f470,%rdi
  0x00007f75704a9050: movabs $0x7f75704a8ff0,%rsi
  0x00007f75704a905a: mov    %rsp,%rdx
  0x00007f75704a905d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9061: callq  0x00007f75853729fa
  0x00007f75704a9066: hlt    
  ;; } verify_i2ce 
  0x00007f75704a9067: mov    %rsp,%r11
  0x00007f75704a906a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a906e: push   %rax
  0x00007f75704a906f: mov    %r11,%rax
  0x00007f75704a9072: mov    0x50(%rbx),%r11
  0x00007f75704a9076: mov    0x28(%rax),%rsi
  0x00007f75704a907a: mov    0x20(%rax),%rdx
  0x00007f75704a907e: mov    0x18(%rax),%rcx
  0x00007f75704a9082: mov    0x10(%rax),%r8
  0x00007f75704a9086: mov    0x8(%rax),%r9
  0x00007f75704a908a: mov    %rbx,0x258(%r15)
  0x00007f75704a9091: mov    %rbx,%rax
  0x00007f75704a9094: jmpq   *%r11
  0x00007f75704a9097: mov    0x8(%rsi),%ebx
  0x00007f75704a909a: shl    $0x3,%rbx
  0x00007f75704a909e: cmp    0x10(%rax),%rbx
  0x00007f75704a90a2: mov    0x8(%rax),%rbx
  0x00007f75704a90a6: je     0x00007f75704a90b1
  0x00007f75704a90ac: jmpq   0x00007f757046ec40
  0x00007f75704a90b1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a90b9: je     0x00007f75704a91b4
  0x00007f75704a90bf: jmpq   0x00007f757046ec40
  0x00007f75704a90c4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a90cc: je     0x00007f75704a91b4
  0x00007f75704a90d2: mov    %rsp,%r13
  0x00007f75704a90d5: mov    (%rsp),%rax
  0x00007f75704a90d9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a90dd: pushfq 
  0x00007f75704a90de: sub    $0x8,%rsp
  0x00007f75704a90e2: mov    %rsp,-0x28(%rsp)
  0x00007f75704a90e7: sub    $0x80,%rsp
  0x00007f75704a90ee: mov    %rax,0x78(%rsp)
  0x00007f75704a90f3: mov    %rcx,0x70(%rsp)
  0x00007f75704a90f8: mov    %rdx,0x68(%rsp)
  0x00007f75704a90fd: mov    %rbx,0x60(%rsp)
  0x00007f75704a9102: mov    %rbp,0x50(%rsp)
  0x00007f75704a9107: mov    %rsi,0x48(%rsp)
  0x00007f75704a910c: mov    %rdi,0x40(%rsp)
  0x00007f75704a9111: mov    %r8,0x38(%rsp)
  0x00007f75704a9116: mov    %r9,0x30(%rsp)
  0x00007f75704a911b: mov    %r10,0x28(%rsp)
  0x00007f75704a9120: mov    %r11,0x20(%rsp)
  0x00007f75704a9125: mov    %r12,0x18(%rsp)
  0x00007f75704a912a: mov    %r13,0x10(%rsp)
  0x00007f75704a912f: mov    %r14,0x8(%rsp)
  0x00007f75704a9134: mov    %r15,(%rsp)
  0x00007f75704a9138: sub    $0x200,%rsp
  0x00007f75704a913f: fxsave64 (%rsp)
  0x00007f75704a9144: mov    %rbx,%rdi
  0x00007f75704a9147: mov    %rax,%rsi
  0x00007f75704a914a: callq  0x00007f7585522bca
  0x00007f75704a914f: fxrstor64 (%rsp)
  0x00007f75704a9154: add    $0x200,%rsp
  0x00007f75704a915b: mov    (%rsp),%r15
  0x00007f75704a915f: mov    0x8(%rsp),%r14
  0x00007f75704a9164: mov    0x10(%rsp),%r13
  0x00007f75704a9169: mov    0x18(%rsp),%r12
  0x00007f75704a916e: mov    0x20(%rsp),%r11
  0x00007f75704a9173: mov    0x28(%rsp),%r10
  0x00007f75704a9178: mov    0x30(%rsp),%r9
  0x00007f75704a917d: mov    0x38(%rsp),%r8
  0x00007f75704a9182: mov    0x40(%rsp),%rdi
  0x00007f75704a9187: mov    0x48(%rsp),%rsi
  0x00007f75704a918c: mov    0x50(%rsp),%rbp
  0x00007f75704a9191: mov    0x60(%rsp),%rbx
  0x00007f75704a9196: mov    0x68(%rsp),%rdx
  0x00007f75704a919b: mov    0x70(%rsp),%rcx
  0x00007f75704a91a0: mov    0x78(%rsp),%rax
  0x00007f75704a91a5: add    $0x80,%rsp
  0x00007f75704a91ac: add    $0x8,%rsp
  0x00007f75704a91b0: popfq  
  0x00007f75704a91b1: mov    %r13,%rsp
  0x00007f75704a91b4: pop    %rax
  0x00007f75704a91b5: mov    %rsp,%r13
  0x00007f75704a91b8: sub    $0x30,%rsp
  0x00007f75704a91bc: mov    %rax,(%rsp)
  0x00007f75704a91c0: mov    %rsi,0x28(%rsp)
  0x00007f75704a91c5: mov    %rdx,0x20(%rsp)
  0x00007f75704a91ca: mov    %rcx,0x18(%rsp)
  0x00007f75704a91cf: mov    %r8,0x10(%rsp)
  0x00007f75704a91d4: mov    %r9,0x8(%rsp)
  0x00007f75704a91d9: mov    0x40(%rbx),%rcx
  0x00007f75704a91dd: jmpq   *%rcx

AHE@0x00007f75800e9678: 0xbbb00000 i2c: 0x00007f75704a92a0 c2i: 0x00007f75704a93bc c2iUV: 0x00007f75704a938f
i2c argument handler #0 for: receiver (Ljava/security/CodeSource;Ljava/security/PermissionCollection;)V (557 bytes generated)
c2i argument handler starts at 0x7f75704a93bc
  0x00007f75704a92a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a92a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a92ae: cmp    %r11,%rax
  0x00007f75704a92b1: jbe    0x00007f75704a92ca
  0x00007f75704a92b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a92c1: cmp    %r11,%rax
  0x00007f75704a92c4: jb     0x00007f75704a9367
  0x00007f75704a92ca: movabs $0x7f7570369420,%r11
  0x00007f75704a92d4: cmp    %r11,%rax
  0x00007f75704a92d7: jbe    0x00007f75704a92f0
  0x00007f75704a92dd: movabs $0x7f757036de58,%r11
  0x00007f75704a92e7: cmp    %r11,%rax
  0x00007f75704a92ea: jb     0x00007f75704a9367
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a92f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a92f5: sub    $0x80,%rsp
  0x00007f75704a92fc: mov    %rax,0x78(%rsp)
  0x00007f75704a9301: mov    %rcx,0x70(%rsp)
  0x00007f75704a9306: mov    %rdx,0x68(%rsp)
  0x00007f75704a930b: mov    %rbx,0x60(%rsp)
  0x00007f75704a9310: mov    %rbp,0x50(%rsp)
  0x00007f75704a9315: mov    %rsi,0x48(%rsp)
  0x00007f75704a931a: mov    %rdi,0x40(%rsp)
  0x00007f75704a931f: mov    %r8,0x38(%rsp)
  0x00007f75704a9324: mov    %r9,0x30(%rsp)
  0x00007f75704a9329: mov    %r10,0x28(%rsp)
  0x00007f75704a932e: mov    %r11,0x20(%rsp)
  0x00007f75704a9333: mov    %r12,0x18(%rsp)
  0x00007f75704a9338: mov    %r13,0x10(%rsp)
  0x00007f75704a933d: mov    %r14,0x8(%rsp)
  0x00007f75704a9342: mov    %r15,(%rsp)
  0x00007f75704a9346: movabs $0x7f758592f470,%rdi
  0x00007f75704a9350: movabs $0x7f75704a92f0,%rsi
  0x00007f75704a935a: mov    %rsp,%rdx
  0x00007f75704a935d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9361: callq  0x00007f75853729fa
  0x00007f75704a9366: hlt    
  ;; } verify_i2ce 
  0x00007f75704a9367: mov    %rsp,%r11
  0x00007f75704a936a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a936e: push   %rax
  0x00007f75704a936f: mov    %r11,%rax
  0x00007f75704a9372: mov    0x50(%rbx),%r11
  0x00007f75704a9376: mov    0x18(%rax),%rsi
  0x00007f75704a937a: mov    0x10(%rax),%rdx
  0x00007f75704a937e: mov    0x8(%rax),%rcx
  0x00007f75704a9382: mov    %rbx,0x258(%r15)
  0x00007f75704a9389: mov    %rbx,%rax
  0x00007f75704a938c: jmpq   *%r11
  0x00007f75704a938f: mov    0x8(%rsi),%ebx
  0x00007f75704a9392: shl    $0x3,%rbx
  0x00007f75704a9396: cmp    0x10(%rax),%rbx
  0x00007f75704a939a: mov    0x8(%rax),%rbx
  0x00007f75704a939e: je     0x00007f75704a93a9
  0x00007f75704a93a4: jmpq   0x00007f757046ec40
  0x00007f75704a93a9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a93b1: je     0x00007f75704a94ac
  0x00007f75704a93b7: jmpq   0x00007f757046ec40
  0x00007f75704a93bc: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a93c4: je     0x00007f75704a94ac
  0x00007f75704a93ca: mov    %rsp,%r13
  0x00007f75704a93cd: mov    (%rsp),%rax
  0x00007f75704a93d1: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a93d5: pushfq 
  0x00007f75704a93d6: sub    $0x8,%rsp
  0x00007f75704a93da: mov    %rsp,-0x28(%rsp)
  0x00007f75704a93df: sub    $0x80,%rsp
  0x00007f75704a93e6: mov    %rax,0x78(%rsp)
  0x00007f75704a93eb: mov    %rcx,0x70(%rsp)
  0x00007f75704a93f0: mov    %rdx,0x68(%rsp)
  0x00007f75704a93f5: mov    %rbx,0x60(%rsp)
  0x00007f75704a93fa: mov    %rbp,0x50(%rsp)
  0x00007f75704a93ff: mov    %rsi,0x48(%rsp)
  0x00007f75704a9404: mov    %rdi,0x40(%rsp)
  0x00007f75704a9409: mov    %r8,0x38(%rsp)
  0x00007f75704a940e: mov    %r9,0x30(%rsp)
  0x00007f75704a9413: mov    %r10,0x28(%rsp)
  0x00007f75704a9418: mov    %r11,0x20(%rsp)
  0x00007f75704a941d: mov    %r12,0x18(%rsp)
  0x00007f75704a9422: mov    %r13,0x10(%rsp)
  0x00007f75704a9427: mov    %r14,0x8(%rsp)
  0x00007f75704a942c: mov    %r15,(%rsp)
  0x00007f75704a9430: sub    $0x200,%rsp
  0x00007f75704a9437: fxsave64 (%rsp)
  0x00007f75704a943c: mov    %rbx,%rdi
  0x00007f75704a943f: mov    %rax,%rsi
  0x00007f75704a9442: callq  0x00007f7585522bca
  0x00007f75704a9447: fxrstor64 (%rsp)
  0x00007f75704a944c: add    $0x200,%rsp
  0x00007f75704a9453: mov    (%rsp),%r15
  0x00007f75704a9457: mov    0x8(%rsp),%r14
  0x00007f75704a945c: mov    0x10(%rsp),%r13
  0x00007f75704a9461: mov    0x18(%rsp),%r12
  0x00007f75704a9466: mov    0x20(%rsp),%r11
  0x00007f75704a946b: mov    0x28(%rsp),%r10
  0x00007f75704a9470: mov    0x30(%rsp),%r9
  0x00007f75704a9475: mov    0x38(%rsp),%r8
  0x00007f75704a947a: mov    0x40(%rsp),%rdi
  0x00007f75704a947f: mov    0x48(%rsp),%rsi
  0x00007f75704a9484: mov    0x50(%rsp),%rbp
  0x00007f75704a9489: mov    0x60(%rsp),%rbx
  0x00007f75704a948e: mov    0x68(%rsp),%rdx
  0x00007f75704a9493: mov    0x70(%rsp),%rcx
  0x00007f75704a9498: mov    0x78(%rsp),%rax
  0x00007f75704a949d: add    $0x80,%rsp
  0x00007f75704a94a4: add    $0x8,%rsp
  0x00007f75704a94a8: popfq  
  0x00007f75704a94a9: mov    %r13,%rsp
  0x00007f75704a94ac: pop    %rax
  0x00007f75704a94ad: mov    %rsp,%r13
  0x00007f75704a94b0: sub    $0x20,%rsp
  0x00007f75704a94b4: mov    %rax,(%rsp)
  0x00007f75704a94b8: mov    %rsi,0x18(%rsp)
  0x00007f75704a94bd: mov    %rdx,0x10(%rsp)
  0x00007f75704a94c2: mov    %rcx,0x8(%rsp)
  0x00007f75704a94c7: mov    0x40(%rbx),%rcx
  0x00007f75704a94cb: jmpq   *%rcx

AHE@0x00007f75800e96c0: 0xb0000000 i2c: 0x00007f75704a95a0 c2i: 0x00007f75704a96b4 c2iUV: 0x00007f75704a9687
i2c argument handler #0 for: receiver ()Z (539 bytes generated)
c2i argument handler starts at 0x7f75704a96b4
  0x00007f75704a95a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704a95a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704a95ae: cmp    %r11,%rax
  0x00007f75704a95b1: jbe    0x00007f75704a95ca
  0x00007f75704a95b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704a95c1: cmp    %r11,%rax
  0x00007f75704a95c4: jb     0x00007f75704a9667
  0x00007f75704a95ca: movabs $0x7f7570369420,%r11
  0x00007f75704a95d4: cmp    %r11,%rax
  0x00007f75704a95d7: jbe    0x00007f75704a95f0
  0x00007f75704a95dd: movabs $0x7f757036de58,%r11
  0x00007f75704a95e7: cmp    %r11,%rax
  0x00007f75704a95ea: jb     0x00007f75704a9667
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704a95f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a95f5: sub    $0x80,%rsp
  0x00007f75704a95fc: mov    %rax,0x78(%rsp)
  0x00007f75704a9601: mov    %rcx,0x70(%rsp)
  0x00007f75704a9606: mov    %rdx,0x68(%rsp)
  0x00007f75704a960b: mov    %rbx,0x60(%rsp)
  0x00007f75704a9610: mov    %rbp,0x50(%rsp)
  0x00007f75704a9615: mov    %rsi,0x48(%rsp)
  0x00007f75704a961a: mov    %rdi,0x40(%rsp)
  0x00007f75704a961f: mov    %r8,0x38(%rsp)
  0x00007f75704a9624: mov    %r9,0x30(%rsp)
  0x00007f75704a9629: mov    %r10,0x28(%rsp)
  0x00007f75704a962e: mov    %r11,0x20(%rsp)
  0x00007f75704a9633: mov    %r12,0x18(%rsp)
  0x00007f75704a9638: mov    %r13,0x10(%rsp)
  0x00007f75704a963d: mov    %r14,0x8(%rsp)
  0x00007f75704a9642: mov    %r15,(%rsp)
  0x00007f75704a9646: movabs $0x7f758592f470,%rdi
  0x00007f75704a9650: movabs $0x7f75704a95f0,%rsi
  0x00007f75704a965a: mov    %rsp,%rdx
  0x00007f75704a965d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9661: callq  0x00007f75853729fa
  0x00007f75704a9666: hlt    
  ;; } verify_i2ce 
  0x00007f75704a9667: mov    %rsp,%r11
  0x00007f75704a966a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a966e: push   %rax
  0x00007f75704a966f: mov    %r11,%rax
  0x00007f75704a9672: mov    0x50(%rbx),%r11
  0x00007f75704a9676: mov    0x8(%rax),%rsi
  0x00007f75704a967a: mov    %rbx,0x258(%r15)
  0x00007f75704a9681: mov    %rbx,%rax
  0x00007f75704a9684: jmpq   *%r11
  0x00007f75704a9687: mov    0x8(%rsi),%ebx
  0x00007f75704a968a: shl    $0x3,%rbx
  0x00007f75704a968e: cmp    0x10(%rax),%rbx
  0x00007f75704a9692: mov    0x8(%rax),%rbx
  0x00007f75704a9696: je     0x00007f75704a96a1
  0x00007f75704a969c: jmpq   0x00007f757046ec40
  0x00007f75704a96a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a96a9: je     0x00007f75704a97a4
  0x00007f75704a96af: jmpq   0x00007f757046ec40
  0x00007f75704a96b4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704a96bc: je     0x00007f75704a97a4
  0x00007f75704a96c2: mov    %rsp,%r13
  0x00007f75704a96c5: mov    (%rsp),%rax
  0x00007f75704a96c9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a96cd: pushfq 
  0x00007f75704a96ce: sub    $0x8,%rsp
  0x00007f75704a96d2: mov    %rsp,-0x28(%rsp)
  0x00007f75704a96d7: sub    $0x80,%rsp
  0x00007f75704a96de: mov    %rax,0x78(%rsp)
  0x00007f75704a96e3: mov    %rcx,0x70(%rsp)
  0x00007f75704a96e8: mov    %rdx,0x68(%rsp)
  0x00007f75704a96ed: mov    %rbx,0x60(%rsp)
  0x00007f75704a96f2: mov    %rbp,0x50(%rsp)
  0x00007f75704a96f7: mov    %rsi,0x48(%rsp)
  0x00007f75704a96fc: mov    %rdi,0x40(%rsp)
  0x00007f75704a9701: mov    %r8,0x38(%rsp)
  0x00007f75704a9706: mov    %r9,0x30(%rsp)
  0x00007f75704a970b: mov    %r10,0x28(%rsp)
  0x00007f75704a9710: mov    %r11,0x20(%rsp)
  0x00007f75704a9715: mov    %r12,0x18(%rsp)
  0x00007f75704a971a: mov    %r13,0x10(%rsp)
  0x00007f75704a971f: mov    %r14,0x8(%rsp)
  0x00007f75704a9724: mov    %r15,(%rsp)
  0x00007f75704a9728: sub    $0x200,%rsp
  0x00007f75704a972f: fxsave64 (%rsp)
  0x00007f75704a9734: mov    %rbx,%rdi
  0x00007f75704a9737: mov    %rax,%rsi
  0x00007f75704a973a: callq  0x00007f7585522bca
  0x00007f75704a973f: fxrstor64 (%rsp)
  0x00007f75704a9744: add    $0x200,%rsp
  0x00007f75704a974b: mov    (%rsp),%r15
  0x00007f75704a974f: mov    0x8(%rsp),%r14
  0x00007f75704a9754: mov    0x10(%rsp),%r13
  0x00007f75704a9759: mov    0x18(%rsp),%r12
  0x00007f75704a975e: mov    0x20(%rsp),%r11
  0x00007f75704a9763: mov    0x28(%rsp),%r10
  0x00007f75704a9768: mov    0x30(%rsp),%r9
  0x00007f75704a976d: mov    0x38(%rsp),%r8
  0x00007f75704a9772: mov    0x40(%rsp),%rdi
  0x00007f75704a9777: mov    0x48(%rsp),%rsi
  0x00007f75704a977c: mov    0x50(%rsp),%rbp
  0x00007f75704a9781: mov    0x60(%rsp),%rbx
  0x00007f75704a9786: mov    0x68(%rsp),%rdx
  0x00007f75704a978b: mov    0x70(%rsp),%rcx
  0x00007f75704a9790: mov    0x78(%rsp),%rax
  0x00007f75704a9795: add    $0x80,%rsp
  0x00007f75704a979c: add    $0x8,%rsp
  0x00007f75704a97a0: popfq  
  0x00007f75704a97a1: mov    %r13,%rsp
  0x00007f75704a97a4: pop    %rax
  0x00007f75704a97a5: mov    %rsp,%r13
  0x00007f75704a97a8: sub    $0x10,%rsp
  0x00007f75704a97ac: mov    %rax,(%rsp)
  0x00007f75704a97b0: mov    %rsi,0x8(%rsp)
  0x00007f75704a97b5: mov    0x40(%rbx),%rcx
  0x00007f75704a97b9: jmpq   *%rcx

Decoding RuntimeStub - AbstractMethodError throw_exception 0x00007f757046e410
  0x00007f757046e480: push   %rbp
  0x00007f757046e481: mov    %rsp,%rbp
  0x00007f757046e484: sub    $0x0,%rsp
  0x00007f757046e488: mov    %rbp,0x210(%r15)
  0x00007f757046e48f: movabs $0x7f757046e488,%r10
  0x00007f757046e499: mov    %r10,0x208(%r15)
  0x00007f757046e4a0: mov    %rsp,0x200(%r15)
  0x00007f757046e4a7: and    $0xfffffffffffffff0,%rsp
  0x00007f757046e4ab: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f757046e4ae: callq  0x00007f758551d834
  0x00007f757046e4b3: movabs $0x0,%r10
  0x00007f757046e4bd: mov    %r10,0x200(%r15)
  0x00007f757046e4c4: movabs $0x0,%r10
  0x00007f757046e4ce: mov    %r10,0x210(%r15)
  0x00007f757046e4d5: movabs $0x0,%r10
  0x00007f757046e4df: mov    %r10,0x208(%r15)
  0x00007f757046e4e6: leaveq 
  0x00007f757046e4e7: cmpq   $0x0,0x8(%r15)
  0x00007f757046e4ef: jne    0x00007f757046e56c
  0x00007f757046e4f5: mov    %rsp,-0x28(%rsp)
  0x00007f757046e4fa: sub    $0x80,%rsp
  0x00007f757046e501: mov    %rax,0x78(%rsp)
  0x00007f757046e506: mov    %rcx,0x70(%rsp)
  0x00007f757046e50b: mov    %rdx,0x68(%rsp)
  0x00007f757046e510: mov    %rbx,0x60(%rsp)
  0x00007f757046e515: mov    %rbp,0x50(%rsp)
  0x00007f757046e51a: mov    %rsi,0x48(%rsp)
  0x00007f757046e51f: mov    %rdi,0x40(%rsp)
  0x00007f757046e524: mov    %r8,0x38(%rsp)
  0x00007f757046e529: mov    %r9,0x30(%rsp)
  0x00007f757046e52e: mov    %r10,0x28(%rsp)
  0x00007f757046e533: mov    %r11,0x20(%rsp)
  0x00007f757046e538: mov    %r12,0x18(%rsp)
  0x00007f757046e53d: mov    %r13,0x10(%rsp)
  0x00007f757046e542: mov    %r14,0x8(%rsp)
  0x00007f757046e547: mov    %r15,(%rsp)
  0x00007f757046e54b: movabs $0x7f75856bea2b,%rdi
  0x00007f757046e555: movabs $0x7f757046e4f5,%rsi
  0x00007f757046e55f: mov    %rsp,%rdx
  0x00007f757046e562: and    $0xfffffffffffffff0,%rsp
  0x00007f757046e566: callq  0x00007f75853729fa
  0x00007f757046e56b: hlt    
  0x00007f757046e56c: jmpq   Stub::forward exception
  0x00007f757046e571: hlt    
  0x00007f757046e572: hlt    
  0x00007f757046e573: hlt    
  0x00007f757046e574: hlt    
  0x00007f757046e575: hlt    
  0x00007f757046e576: hlt    
  0x00007f757046e577: hlt    

Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0x00007f75704af990
  0x00007f75704afa00: push   %rbp
  0x00007f75704afa01: mov    %rsp,%rbp
  0x00007f75704afa04: sub    $0x0,%rsp
  0x00007f75704afa08: mov    %rbp,0x210(%r15)
  0x00007f75704afa0f: movabs $0x7f75704afa08,%r10
  0x00007f75704afa19: mov    %r10,0x208(%r15)
  0x00007f75704afa20: mov    %rsp,0x200(%r15)
  0x00007f75704afa27: and    $0xfffffffffffffff0,%rsp
  0x00007f75704afa2b: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f75704afa2e: callq  0x00007f758551d99c
  0x00007f75704afa33: movabs $0x0,%r10
  0x00007f75704afa3d: mov    %r10,0x200(%r15)
  0x00007f75704afa44: movabs $0x0,%r10
  0x00007f75704afa4e: mov    %r10,0x210(%r15)
  0x00007f75704afa55: movabs $0x0,%r10
  0x00007f75704afa5f: mov    %r10,0x208(%r15)
  0x00007f75704afa66: leaveq 
  0x00007f75704afa67: cmpq   $0x0,0x8(%r15)
  0x00007f75704afa6f: jne    0x00007f75704afaec
  0x00007f75704afa75: mov    %rsp,-0x28(%rsp)
  0x00007f75704afa7a: sub    $0x80,%rsp
  0x00007f75704afa81: mov    %rax,0x78(%rsp)
  0x00007f75704afa86: mov    %rcx,0x70(%rsp)
  0x00007f75704afa8b: mov    %rdx,0x68(%rsp)
  0x00007f75704afa90: mov    %rbx,0x60(%rsp)
  0x00007f75704afa95: mov    %rbp,0x50(%rsp)
  0x00007f75704afa9a: mov    %rsi,0x48(%rsp)
  0x00007f75704afa9f: mov    %rdi,0x40(%rsp)
  0x00007f75704afaa4: mov    %r8,0x38(%rsp)
  0x00007f75704afaa9: mov    %r9,0x30(%rsp)
  0x00007f75704afaae: mov    %r10,0x28(%rsp)
  0x00007f75704afab3: mov    %r11,0x20(%rsp)
  0x00007f75704afab8: mov    %r12,0x18(%rsp)
  0x00007f75704afabd: mov    %r13,0x10(%rsp)
  0x00007f75704afac2: mov    %r14,0x8(%rsp)
  0x00007f75704afac7: mov    %r15,(%rsp)
  0x00007f75704afacb: movabs $0x7f75856bea2b,%rdi
  0x00007f75704afad5: movabs $0x7f75704afa75,%rsi
  0x00007f75704afadf: mov    %rsp,%rdx
  0x00007f75704afae2: and    $0xfffffffffffffff0,%rsp
  0x00007f75704afae6: callq  0x00007f75853729fa
  0x00007f75704afaeb: hlt    
  0x00007f75704afaec: jmpq   Stub::forward exception
  0x00007f75704afaf1: hlt    
  0x00007f75704afaf2: hlt    
  0x00007f75704afaf3: hlt    
  0x00007f75704afaf4: hlt    
  0x00007f75704afaf5: hlt    
  0x00007f75704afaf6: hlt    
  0x00007f75704afaf7: hlt    

Decoding RuntimeStub - NullPointerException at call throw_exception 0x00007f75704afb10
  0x00007f75704afb80: push   %rbp
  0x00007f75704afb81: mov    %rsp,%rbp
  0x00007f75704afb84: sub    $0x0,%rsp
  0x00007f75704afb88: mov    %rbp,0x210(%r15)
  0x00007f75704afb8f: movabs $0x7f75704afb88,%r10
  0x00007f75704afb99: mov    %r10,0x208(%r15)
  0x00007f75704afba0: mov    %rsp,0x200(%r15)
  0x00007f75704afba7: and    $0xfffffffffffffff0,%rsp
  0x00007f75704afbab: mov    %r15,%rdi
  ;; call runtime_entry
  0x00007f75704afbae: callq  0x00007f758551ddd8
  0x00007f75704afbb3: movabs $0x0,%r10
  0x00007f75704afbbd: mov    %r10,0x200(%r15)
  0x00007f75704afbc4: movabs $0x0,%r10
  0x00007f75704afbce: mov    %r10,0x210(%r15)
  0x00007f75704afbd5: movabs $0x0,%r10
  0x00007f75704afbdf: mov    %r10,0x208(%r15)
  0x00007f75704afbe6: leaveq 
  0x00007f75704afbe7: cmpq   $0x0,0x8(%r15)
  0x00007f75704afbef: jne    0x00007f75704afc6c
  0x00007f75704afbf5: mov    %rsp,-0x28(%rsp)
  0x00007f75704afbfa: sub    $0x80,%rsp
  0x00007f75704afc01: mov    %rax,0x78(%rsp)
  0x00007f75704afc06: mov    %rcx,0x70(%rsp)
  0x00007f75704afc0b: mov    %rdx,0x68(%rsp)
  0x00007f75704afc10: mov    %rbx,0x60(%rsp)
  0x00007f75704afc15: mov    %rbp,0x50(%rsp)
  0x00007f75704afc1a: mov    %rsi,0x48(%rsp)
  0x00007f75704afc1f: mov    %rdi,0x40(%rsp)
  0x00007f75704afc24: mov    %r8,0x38(%rsp)
  0x00007f75704afc29: mov    %r9,0x30(%rsp)
  0x00007f75704afc2e: mov    %r10,0x28(%rsp)
  0x00007f75704afc33: mov    %r11,0x20(%rsp)
  0x00007f75704afc38: mov    %r12,0x18(%rsp)
  0x00007f75704afc3d: mov    %r13,0x10(%rsp)
  0x00007f75704afc42: mov    %r14,0x8(%rsp)
  0x00007f75704afc47: mov    %r15,(%rsp)
  0x00007f75704afc4b: movabs $0x7f75856bea2b,%rdi
  0x00007f75704afc55: movabs $0x7f75704afbf5,%rsi
  0x00007f75704afc5f: mov    %rsp,%rdx
  0x00007f75704afc62: and    $0xfffffffffffffff0,%rsp
  0x00007f75704afc66: callq  0x00007f75853729fa
  0x00007f75704afc6b: hlt    
  0x00007f75704afc6c: jmpq   Stub::forward exception
  0x00007f75704afc71: hlt    
  0x00007f75704afc72: hlt    
  0x00007f75704afc73: hlt    
  0x00007f75704afc74: hlt    
  0x00007f75704afc75: hlt    
  0x00007f75704afc76: hlt    
  0x00007f75704afc77: hlt    

StubRoutines::f2i_fixup [0x00007f75704a9820, 0x00007f75704a9858[ (56 bytes)
  0x00007f75704a9820: push   %rax
  0x00007f75704a9821: push   %rcx
  0x00007f75704a9822: push   %rdx
  0x00007f75704a9823: push   %rsi
  0x00007f75704a9824: mov    $0x7f800000,%eax
  0x00007f75704a9829: xor    %ecx,%ecx
  0x00007f75704a982b: mov    0x28(%rsp),%edx
  0x00007f75704a982f: mov    %edx,%esi
  0x00007f75704a9831: and    $0x7fffffff,%esi
  0x00007f75704a9837: cmp    %esi,%eax
  0x00007f75704a9839: js     Stub::f2i_fixup+46 0x0x7f75704a984e
  0x00007f75704a983f: test   %edx,%edx
  0x00007f75704a9841: mov    $0x80000000,%ecx
  0x00007f75704a9846: mov    $0x7fffffff,%eax
  0x00007f75704a984b: cmovns %eax,%ecx
  0x00007f75704a984e: mov    %rcx,0x28(%rsp)
  0x00007f75704a9853: pop    %rsi
  0x00007f75704a9854: pop    %rdx
  0x00007f75704a9855: pop    %rcx
  0x00007f75704a9856: pop    %rax
  0x00007f75704a9857: retq   

StubRoutines::f2l_fixup [0x00007f75704a9858, 0x00007f75704a989b[ (67 bytes)
  0x00007f75704a9858: push   %rax
  0x00007f75704a9859: push   %rcx
  0x00007f75704a985a: push   %rdx
  0x00007f75704a985b: push   %rsi
  0x00007f75704a985c: mov    $0x7f800000,%eax
  0x00007f75704a9861: xor    %ecx,%ecx
  0x00007f75704a9863: mov    0x28(%rsp),%edx
  0x00007f75704a9867: mov    %edx,%esi
  0x00007f75704a9869: and    $0x7fffffff,%esi
  0x00007f75704a986f: cmp    %esi,%eax
  0x00007f75704a9871: js     Stub::f2l_fixup+57 0x0x7f75704a9891
  0x00007f75704a9877: test   %edx,%edx
  0x00007f75704a9879: movabs $0x8000000000000000,%rcx
  0x00007f75704a9883: movabs $0x7fffffffffffffff,%rax
  0x00007f75704a988d: cmovns %rax,%rcx
  0x00007f75704a9891: mov    %rcx,0x28(%rsp)
  0x00007f75704a9896: pop    %rsi
  0x00007f75704a9897: pop    %rdx
  0x00007f75704a9898: pop    %rcx
  0x00007f75704a9899: pop    %rax
  0x00007f75704a989a: retq   

StubRoutines::d2i_fixup [0x00007f75704a989b, 0x00007f75704a98eb[ (80 bytes)
  0x00007f75704a989b: push   %rax
  0x00007f75704a989c: push   %rcx
  0x00007f75704a989d: push   %rdx
  0x00007f75704a989e: push   %rsi
  0x00007f75704a989f: push   %rdi
  0x00007f75704a98a0: mov    $0x7ff00000,%eax
  0x00007f75704a98a5: mov    0x30(%rsp),%rdx
  0x00007f75704a98aa: mov    %edx,%ecx
  0x00007f75704a98ac: mov    %rdx,%rsi
  0x00007f75704a98af: mov    %rdx,%rdi
  0x00007f75704a98b2: neg    %ecx
  0x00007f75704a98b4: shr    $0x20,%rsi
  0x00007f75704a98b8: or     %edx,%ecx
  0x00007f75704a98ba: and    $0x7fffffff,%esi
  0x00007f75704a98c0: xor    %edx,%edx
  0x00007f75704a98c2: shr    $0x1f,%ecx
  0x00007f75704a98c5: or     %ecx,%esi
  0x00007f75704a98c7: cmp    %esi,%eax
  0x00007f75704a98c9: js     Stub::d2i_fixup+69 0x0x7f75704a98e0
  0x00007f75704a98cf: test   %rdi,%rdi
  0x00007f75704a98d2: mov    $0x80000000,%edx
  0x00007f75704a98d7: mov    $0x7fffffff,%eax
  0x00007f75704a98dc: cmovns %rax,%rdx
  0x00007f75704a98e0: mov    %rdx,0x30(%rsp)
  0x00007f75704a98e5: pop    %rdi
  0x00007f75704a98e6: pop    %rsi
  0x00007f75704a98e7: pop    %rdx
  0x00007f75704a98e8: pop    %rcx
  0x00007f75704a98e9: pop    %rax
  0x00007f75704a98ea: retq   

StubRoutines::d2l_fixup [0x00007f75704a98eb, 0x00007f75704a9945[ (90 bytes)
  0x00007f75704a98eb: push   %rax
  0x00007f75704a98ec: push   %rcx
  0x00007f75704a98ed: push   %rdx
  0x00007f75704a98ee: push   %rsi
  0x00007f75704a98ef: push   %rdi
  0x00007f75704a98f0: mov    $0x7ff00000,%eax
  0x00007f75704a98f5: mov    0x30(%rsp),%rdx
  0x00007f75704a98fa: mov    %edx,%ecx
  0x00007f75704a98fc: mov    %rdx,%rsi
  0x00007f75704a98ff: mov    %rdx,%rdi
  0x00007f75704a9902: neg    %ecx
  0x00007f75704a9904: shr    $0x20,%rsi
  0x00007f75704a9908: or     %edx,%ecx
  0x00007f75704a990a: and    $0x7fffffff,%esi
  0x00007f75704a9910: xor    %edx,%edx
  0x00007f75704a9912: shr    $0x1f,%ecx
  0x00007f75704a9915: or     %ecx,%esi
  0x00007f75704a9917: cmp    %esi,%eax
  0x00007f75704a9919: js     Stub::d2l_fixup+79 0x0x7f75704a993a
  0x00007f75704a991f: test   %rdi,%rdi
  0x00007f75704a9922: movabs $0x8000000000000000,%rdx
  0x00007f75704a992c: movabs $0x7fffffffffffffff,%rax
  0x00007f75704a9936: cmovns %rax,%rdx
  0x00007f75704a993a: mov    %rdx,0x30(%rsp)
  0x00007f75704a993f: pop    %rdi
  0x00007f75704a9940: pop    %rsi
  0x00007f75704a9941: pop    %rdx
  0x00007f75704a9942: pop    %rcx
  0x00007f75704a9943: pop    %rax
  0x00007f75704a9944: retq   

StubRoutines::float_sign_mask [0x00007f75704a9960, 0x00007f75704a9970[ (16 bytes)
  0x00007f75704a9960: (bad)  
  0x00007f75704a9961: (bad)  
  0x00007f75704a9962: (bad)  
  0x00007f75704a9963: jg     Stub::float_sign_mask+4 0x0x7f75704a9964
  0x00007f75704a9965: (bad)  
  0x00007f75704a9966: (bad)  
  0x00007f75704a9967: jg     Stub::float_sign_mask+8 0x0x7f75704a9968
  0x00007f75704a9969: (bad)  
  0x00007f75704a996a: (bad)  
  0x00007f75704a996b: jg     Stub::float_sign_mask+12 0x0x7f75704a996c
  0x00007f75704a996d: (bad)  
  0x00007f75704a996e: (bad)  
  0x00007f75704a996f: .byte 0x7f

StubRoutines::float_sign_flip [0x00007f75704a9980, 0x00007f75704a9990[ (16 bytes)
  0x00007f75704a9980: add    %al,(%rax)
  0x00007f75704a9982: add    %al,-0x80000000(%rax)
  0x00007f75704a9988: add    %al,(%rax)
  0x00007f75704a998a: add    %al,-0x80000000(%rax)

StubRoutines::double_sign_mask [0x00007f75704a99a0, 0x00007f75704a99b0[ (16 bytes)
  0x00007f75704a99a0: (bad)  
  0x00007f75704a99a1: (bad)  
  0x00007f75704a99a2: (bad)  
  0x00007f75704a99a3: (bad)  
  0x00007f75704a99a4: (bad)  
  0x00007f75704a99a5: (bad)  
  0x00007f75704a99a6: (bad)  
  0x00007f75704a99a7: jg     Stub::double_sign_mask+8 0x0x7f75704a99a8
  0x00007f75704a99a9: (bad)  
  0x00007f75704a99aa: (bad)  
  0x00007f75704a99ab: (bad)  
  0x00007f75704a99ac: (bad)  
  0x00007f75704a99ad: (bad)  
  0x00007f75704a99ae: (bad)  
  0x00007f75704a99af: .byte 0x7f

StubRoutines::double_sign_flip [0x00007f75704a99c0, 0x00007f75704a99d0[ (16 bytes)
  0x00007f75704a99c0: add    %al,(%rax)
  0x00007f75704a99c2: add    %al,(%rax)
  0x00007f75704a99c4: add    %al,(%rax)
  0x00007f75704a99c6: add    %al,0x0(%rax)
  0x00007f75704a99cc: add    %al,(%rax)
  0x00007f75704a99ce: .byte 0x0
  0x00007f75704a99cf: .byte 0x80

StubRoutines::verify_oop [0x00007f75704a99d0, 0x00007f75704a9b10[ (320 bytes)
  0x00007f75704a99d0: pushfq 
  0x00007f75704a99d1: incl   0x15a7bcf1(%rip)        # 0x00007f7585f256c8
  0x00007f75704a99d7: push   %r12
  0x00007f75704a99d9: push   %rdx
  0x00007f75704a99da: push   %rcx
  0x00007f75704a99db: mov    0x30(%rsp),%rax
  0x00007f75704a99e0: test   %rax,%rax
  0x00007f75704a99e3: je     Stub::verify_oop+79 0x0x7f75704a9a1f
  0x00007f75704a99e9: mov    %rax,%rdx
  0x00007f75704a99ec: movabs $0xffffffff80000007,%rcx
  0x00007f75704a99f6: and    %rcx,%rdx
  0x00007f75704a99f9: movabs $0x80000000,%rcx
  0x00007f75704a9a03: cmp    %rcx,%rdx
  0x00007f75704a9a06: jne    Stub::verify_oop+97 0x0x7f75704a9a31
  0x00007f75704a9a0c: xor    %r12,%r12
  0x00007f75704a9a0f: mov    0x8(%rax),%eax
  0x00007f75704a9a12: shl    $0x3,%rax
  0x00007f75704a9a16: test   %rax,%rax
  0x00007f75704a9a19: je     Stub::verify_oop+97 0x0x7f75704a9a31
  0x00007f75704a9a1f: mov    0x38(%rsp),%rax
  0x00007f75704a9a24: mov    0x40(%rsp),%r10
  0x00007f75704a9a29: pop    %rcx
  0x00007f75704a9a2a: pop    %rdx
  0x00007f75704a9a2b: pop    %r12
  0x00007f75704a9a2d: popfq  
  0x00007f75704a9a2e: retq   $0x20
  0x00007f75704a9a31: mov    0x38(%rsp),%rax
  0x00007f75704a9a36: mov    0x40(%rsp),%r10
  0x00007f75704a9a3b: pop    %rcx
  0x00007f75704a9a3c: pop    %rdx
  0x00007f75704a9a3d: pop    %r12
  0x00007f75704a9a3f: popfq  
  0x00007f75704a9a40: mov    %rsp,-0x28(%rsp)
  0x00007f75704a9a45: sub    $0x80,%rsp
  0x00007f75704a9a4c: mov    %rax,0x78(%rsp)
  0x00007f75704a9a51: mov    %rcx,0x70(%rsp)
  0x00007f75704a9a56: mov    %rdx,0x68(%rsp)
  0x00007f75704a9a5b: mov    %rbx,0x60(%rsp)
  0x00007f75704a9a60: mov    %rbp,0x50(%rsp)
  0x00007f75704a9a65: mov    %rsi,0x48(%rsp)
  0x00007f75704a9a6a: mov    %rdi,0x40(%rsp)
  0x00007f75704a9a6f: mov    %r8,0x38(%rsp)
  0x00007f75704a9a74: mov    %r9,0x30(%rsp)
  0x00007f75704a9a79: mov    %r10,0x28(%rsp)
  0x00007f75704a9a7e: mov    %r11,0x20(%rsp)
  0x00007f75704a9a83: mov    %r12,0x18(%rsp)
  0x00007f75704a9a88: mov    %r13,0x10(%rsp)
  0x00007f75704a9a8d: mov    %r14,0x8(%rsp)
  0x00007f75704a9a92: mov    %r15,(%rsp)
  0x00007f75704a9a96: mov    0x88(%rsp),%rdi
  0x00007f75704a9a9e: mov    0x80(%rsp),%rsi
  0x00007f75704a9aa6: mov    %rsp,%rdx
  0x00007f75704a9aa9: mov    %rsp,%r12
  0x00007f75704a9aac: sub    $0x0,%rsp
  0x00007f75704a9ab0: and    $0xfffffffffffffff0,%rsp
  ;; call MacroAssembler::debug
  0x00007f75704a9ab4: callq  0x00007f75853729fa
  0x00007f75704a9ab9: mov    %r12,%rsp
  0x00007f75704a9abc: mov    (%rsp),%r15
  0x00007f75704a9ac0: mov    0x8(%rsp),%r14
  0x00007f75704a9ac5: mov    0x10(%rsp),%r13
  0x00007f75704a9aca: mov    0x18(%rsp),%r12
  0x00007f75704a9acf: mov    0x20(%rsp),%r11
  0x00007f75704a9ad4: mov    0x28(%rsp),%r10
  0x00007f75704a9ad9: mov    0x30(%rsp),%r9
  0x00007f75704a9ade: mov    0x38(%rsp),%r8
  0x00007f75704a9ae3: mov    0x40(%rsp),%rdi
  0x00007f75704a9ae8: mov    0x48(%rsp),%rsi
  0x00007f75704a9aed: mov    0x50(%rsp),%rbp
  0x00007f75704a9af2: mov    0x60(%rsp),%rbx
  0x00007f75704a9af7: mov    0x68(%rsp),%rdx
  0x00007f75704a9afc: mov    0x70(%rsp),%rcx
  0x00007f75704a9b01: mov    0x78(%rsp),%rax
  0x00007f75704a9b06: add    $0x80,%rsp
  0x00007f75704a9b0d: retq   $0x20

StubRoutines::jbyte_disjoint_arraycopy [0x00007f75704a9b20, 0x00007f75704a9ccb[ (427 bytes)
  0x00007f75704a9b20: push   %rbp
  0x00007f75704a9b21: mov    %rsp,%rbp
  0x00007f75704a9b24: movslq %edx,%rax
  0x00007f75704a9b27: cmp    %rdx,%rax
  0x00007f75704a9b2a: je     Stub::jbyte_disjoint_arraycopy+135 0x0x7f75704a9ba7
  0x00007f75704a9b30: mov    %rsp,-0x28(%rsp)
  0x00007f75704a9b35: sub    $0x80,%rsp
  0x00007f75704a9b3c: mov    %rax,0x78(%rsp)
  0x00007f75704a9b41: mov    %rcx,0x70(%rsp)
  0x00007f75704a9b46: mov    %rdx,0x68(%rsp)
  0x00007f75704a9b4b: mov    %rbx,0x60(%rsp)
  0x00007f75704a9b50: mov    %rbp,0x50(%rsp)
  0x00007f75704a9b55: mov    %rsi,0x48(%rsp)
  0x00007f75704a9b5a: mov    %rdi,0x40(%rsp)
  0x00007f75704a9b5f: mov    %r8,0x38(%rsp)
  0x00007f75704a9b64: mov    %r9,0x30(%rsp)
  0x00007f75704a9b69: mov    %r10,0x28(%rsp)
  0x00007f75704a9b6e: mov    %r11,0x20(%rsp)
  0x00007f75704a9b73: mov    %r12,0x18(%rsp)
  0x00007f75704a9b78: mov    %r13,0x10(%rsp)
  0x00007f75704a9b7d: mov    %r14,0x8(%rsp)
  0x00007f75704a9b82: mov    %r15,(%rsp)
  0x00007f75704a9b86: movabs $0x7f758593cf78,%rdi
  0x00007f75704a9b90: movabs $0x7f75704a9b30,%rsi
  0x00007f75704a9b9a: mov    %rsp,%rdx
  0x00007f75704a9b9d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9ba1: callq  0x00007f75853729fa
  0x00007f75704a9ba6: hlt    
  ;; Entry:
  0x00007f75704a9ba7: mov    %rdx,%rcx
  0x00007f75704a9baa: shr    $0x3,%rdx
  0x00007f75704a9bae: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f75704a9bb3: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f75704a9bb8: neg    %rdx
  0x00007f75704a9bbb: jmpq   Stub::jbyte_disjoint_arraycopy+406 0x0x7f75704a9cb6
  ;; L_copy_8_bytes:
  0x00007f75704a9bc0: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704a9bc5: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704a9bca: inc    %rdx
  0x00007f75704a9bcd: jne    Stub::jbyte_disjoint_arraycopy+160 0x0x7f75704a9bc0
  ;; L_copy_4_bytes:
  0x00007f75704a9bcf: test   $0x4,%ecx
  0x00007f75704a9bd5: je     Stub::jbyte_disjoint_arraycopy+197 0x0x7f75704a9be5
  0x00007f75704a9bd7: mov    0x8(%rdi),%eax
  0x00007f75704a9bda: mov    %eax,0x8(%rsi)
  0x00007f75704a9bdd: add    $0x4,%rdi
  0x00007f75704a9be1: add    $0x4,%rsi
  ;; L_copy_2_bytes:
  0x00007f75704a9be5: test   $0x2,%ecx
  0x00007f75704a9beb: je     Stub::jbyte_disjoint_arraycopy+221 0x0x7f75704a9bfd
  0x00007f75704a9bed: mov    0x8(%rdi),%ax
  0x00007f75704a9bf1: mov    %ax,0x8(%rsi)
  0x00007f75704a9bf5: add    $0x2,%rdi
  0x00007f75704a9bf9: add    $0x2,%rsi
  ;; L_copy_byte:
  0x00007f75704a9bfd: test   $0x1,%ecx
  0x00007f75704a9c03: je     Stub::jbyte_disjoint_arraycopy+235 0x0x7f75704a9c0b
  0x00007f75704a9c05: mov    0x8(%rdi),%al
  0x00007f75704a9c08: mov    %al,0x8(%rsi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0x00007f75704a9c0b: incl   0x15a7a863(%rip)        # 0x00007f7585f24474
  0x00007f75704a9c11: xor    %rax,%rax
  0x00007f75704a9c14: leaveq 
  0x00007f75704a9c15: retq   
  0x00007f75704a9c16: mov    %rsp,-0x28(%rsp)
  0x00007f75704a9c1b: sub    $0x80,%rsp
  0x00007f75704a9c22: mov    %rax,0x78(%rsp)
  0x00007f75704a9c27: mov    %rcx,0x70(%rsp)
  0x00007f75704a9c2c: mov    %rdx,0x68(%rsp)
  0x00007f75704a9c31: mov    %rbx,0x60(%rsp)
  0x00007f75704a9c36: mov    %rbp,0x50(%rsp)
  0x00007f75704a9c3b: mov    %rsi,0x48(%rsp)
  0x00007f75704a9c40: mov    %rdi,0x40(%rsp)
  0x00007f75704a9c45: mov    %r8,0x38(%rsp)
  0x00007f75704a9c4a: mov    %r9,0x30(%rsp)
  0x00007f75704a9c4f: mov    %r10,0x28(%rsp)
  0x00007f75704a9c54: mov    %r11,0x20(%rsp)
  0x00007f75704a9c59: mov    %r12,0x18(%rsp)
  0x00007f75704a9c5e: mov    %r13,0x10(%rsp)
  0x00007f75704a9c63: mov    %r14,0x8(%rsp)
  0x00007f75704a9c68: mov    %r15,(%rsp)
  0x00007f75704a9c6c: movabs $0x7f758593d090,%rdi
  0x00007f75704a9c76: movabs $0x7f75704a9c16,%rsi
  0x00007f75704a9c80: mov    %rsp,%rdx
  0x00007f75704a9c83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9c87: callq  0x00007f75853729fa
  0x00007f75704a9c8c: hlt    
  0x00007f75704a9c8d: nop
  0x00007f75704a9c8e: nop
  0x00007f75704a9c8f: nop
  ;; L_loop:
  0x00007f75704a9c90: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f75704a9c95: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f75704a9c9a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f75704a9c9f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f75704a9ca4: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704a9ca9: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704a9cae: mov    (%rdi,%rdx,8),%rax
  0x00007f75704a9cb2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704a9cb6: add    $0x4,%rdx
  0x00007f75704a9cba: jle    Stub::jbyte_disjoint_arraycopy+368 0x0x7f75704a9c90
  0x00007f75704a9cbc: sub    $0x4,%rdx
  0x00007f75704a9cc0: jl     Stub::jbyte_disjoint_arraycopy+160 0x0x7f75704a9bc0
  0x00007f75704a9cc6: jmpq   Stub::jbyte_disjoint_arraycopy+175 0x0x7f75704a9bcf

StubRoutines::jbyte_arraycopy [0x00007f75704a9ce0, 0x00007f75704a9ea1[ (449 bytes)
  0x00007f75704a9ce0: push   %rbp
  0x00007f75704a9ce1: mov    %rsp,%rbp
  0x00007f75704a9ce4: movslq %edx,%rax
  0x00007f75704a9ce7: cmp    %rdx,%rax
  0x00007f75704a9cea: je     Stub::jbyte_arraycopy+135 0x0x7f75704a9d67
  0x00007f75704a9cf0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a9cf5: sub    $0x80,%rsp
  0x00007f75704a9cfc: mov    %rax,0x78(%rsp)
  0x00007f75704a9d01: mov    %rcx,0x70(%rsp)
  0x00007f75704a9d06: mov    %rdx,0x68(%rsp)
  0x00007f75704a9d0b: mov    %rbx,0x60(%rsp)
  0x00007f75704a9d10: mov    %rbp,0x50(%rsp)
  0x00007f75704a9d15: mov    %rsi,0x48(%rsp)
  0x00007f75704a9d1a: mov    %rdi,0x40(%rsp)
  0x00007f75704a9d1f: mov    %r8,0x38(%rsp)
  0x00007f75704a9d24: mov    %r9,0x30(%rsp)
  0x00007f75704a9d29: mov    %r10,0x28(%rsp)
  0x00007f75704a9d2e: mov    %r11,0x20(%rsp)
  0x00007f75704a9d33: mov    %r12,0x18(%rsp)
  0x00007f75704a9d38: mov    %r13,0x10(%rsp)
  0x00007f75704a9d3d: mov    %r14,0x8(%rsp)
  0x00007f75704a9d42: mov    %r15,(%rsp)
  0x00007f75704a9d46: movabs $0x7f758593cf78,%rdi
  0x00007f75704a9d50: movabs $0x7f75704a9cf0,%rsi
  0x00007f75704a9d5a: mov    %rsp,%rdx
  0x00007f75704a9d5d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9d61: callq  0x00007f75853729fa
  0x00007f75704a9d66: hlt    
  ;; Entry:
  0x00007f75704a9d67: cmp    %rdi,%rsi
  0x00007f75704a9d6a: lea    (%rdi,%rdx,1),%rax
  0x00007f75704a9d6e: jbe    Stub::jbyte_disjoint_arraycopy+135 0x0x7f75704a9ba7
  0x00007f75704a9d74: cmp    %rax,%rsi
  0x00007f75704a9d77: jae    Stub::jbyte_disjoint_arraycopy+135 0x0x7f75704a9ba7
  0x00007f75704a9d7d: mov    %rdx,%rcx
  0x00007f75704a9d80: shr    $0x3,%rdx
  0x00007f75704a9d84: test   $0x1,%ecx
  0x00007f75704a9d8a: je     Stub::jbyte_arraycopy+187 0x0x7f75704a9d9b
  0x00007f75704a9d90: mov    -0x1(%rdi,%rcx,1),%al
  0x00007f75704a9d94: mov    %al,-0x1(%rsi,%rcx,1)
  0x00007f75704a9d98: dec    %rcx
  ;; L_copy_2_bytes:
  0x00007f75704a9d9b: test   $0x2,%ecx
  0x00007f75704a9da1: je     Stub::jbyte_arraycopy+209 0x0x7f75704a9db1
  0x00007f75704a9da7: mov    -0x2(%rdi,%rcx,1),%ax
  0x00007f75704a9dac: mov    %ax,-0x2(%rsi,%rcx,1)
  ;; L_copy_4_bytes:
  0x00007f75704a9db1: test   $0x4,%ecx
  0x00007f75704a9db7: je     Stub::jbyte_arraycopy+422 0x0x7f75704a9e86
  0x00007f75704a9dbd: mov    (%rdi,%rdx,8),%eax
  0x00007f75704a9dc0: mov    %eax,(%rsi,%rdx,8)
  0x00007f75704a9dc3: jmpq   Stub::jbyte_arraycopy+422 0x0x7f75704a9e86
  ;; L_copy_8_bytes:
  0x00007f75704a9dc8: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704a9dcd: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704a9dd2: dec    %rdx
  0x00007f75704a9dd5: jne    Stub::jbyte_arraycopy+232 0x0x7f75704a9dc8
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0x00007f75704a9dd7: incl   0x15a7a697(%rip)        # 0x00007f7585f24474
  0x00007f75704a9ddd: xor    %rax,%rax
  0x00007f75704a9de0: leaveq 
  0x00007f75704a9de1: retq   
  0x00007f75704a9de2: mov    %rsp,-0x28(%rsp)
  0x00007f75704a9de7: sub    $0x80,%rsp
  0x00007f75704a9dee: mov    %rax,0x78(%rsp)
  0x00007f75704a9df3: mov    %rcx,0x70(%rsp)
  0x00007f75704a9df8: mov    %rdx,0x68(%rsp)
  0x00007f75704a9dfd: mov    %rbx,0x60(%rsp)
  0x00007f75704a9e02: mov    %rbp,0x50(%rsp)
  0x00007f75704a9e07: mov    %rsi,0x48(%rsp)
  0x00007f75704a9e0c: mov    %rdi,0x40(%rsp)
  0x00007f75704a9e11: mov    %r8,0x38(%rsp)
  0x00007f75704a9e16: mov    %r9,0x30(%rsp)
  0x00007f75704a9e1b: mov    %r10,0x28(%rsp)
  0x00007f75704a9e20: mov    %r11,0x20(%rsp)
  0x00007f75704a9e25: mov    %r12,0x18(%rsp)
  0x00007f75704a9e2a: mov    %r13,0x10(%rsp)
  0x00007f75704a9e2f: mov    %r14,0x8(%rsp)
  0x00007f75704a9e34: mov    %r15,(%rsp)
  0x00007f75704a9e38: movabs $0x7f758593d090,%rdi
  0x00007f75704a9e42: movabs $0x7f75704a9de2,%rsi
  0x00007f75704a9e4c: mov    %rsp,%rdx
  0x00007f75704a9e4f: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9e53: callq  0x00007f75853729fa
  0x00007f75704a9e58: hlt    
  0x00007f75704a9e59: nop
  0x00007f75704a9e5a: nop
  0x00007f75704a9e5b: nop
  0x00007f75704a9e5c: nop
  0x00007f75704a9e5d: nop
  0x00007f75704a9e5e: nop
  0x00007f75704a9e5f: nop
  ;; L_loop:
  0x00007f75704a9e60: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f75704a9e65: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f75704a9e6a: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f75704a9e6f: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f75704a9e74: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704a9e79: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704a9e7e: mov    (%rdi,%rdx,8),%rax
  0x00007f75704a9e82: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704a9e86: sub    $0x4,%rdx
  0x00007f75704a9e8a: jge    Stub::jbyte_arraycopy+384 0x0x7f75704a9e60
  0x00007f75704a9e8c: add    $0x4,%rdx
  0x00007f75704a9e90: jg     Stub::jbyte_arraycopy+232 0x0x7f75704a9dc8
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0x00007f75704a9e96: incl   0x15a7a5d8(%rip)        # 0x00007f7585f24474
  0x00007f75704a9e9c: xor    %rax,%rax
  0x00007f75704a9e9f: leaveq 
  0x00007f75704a9ea0: retq   

StubRoutines::jshort_disjoint_arraycopy [0x00007f75704a9ec0, 0x00007f75704aa05b[ (411 bytes)
  0x00007f75704a9ec0: push   %rbp
  0x00007f75704a9ec1: mov    %rsp,%rbp
  0x00007f75704a9ec4: movslq %edx,%rax
  0x00007f75704a9ec7: cmp    %rdx,%rax
  0x00007f75704a9eca: je     Stub::jshort_disjoint_arraycopy+135 0x0x7f75704a9f47
  0x00007f75704a9ed0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a9ed5: sub    $0x80,%rsp
  0x00007f75704a9edc: mov    %rax,0x78(%rsp)
  0x00007f75704a9ee1: mov    %rcx,0x70(%rsp)
  0x00007f75704a9ee6: mov    %rdx,0x68(%rsp)
  0x00007f75704a9eeb: mov    %rbx,0x60(%rsp)
  0x00007f75704a9ef0: mov    %rbp,0x50(%rsp)
  0x00007f75704a9ef5: mov    %rsi,0x48(%rsp)
  0x00007f75704a9efa: mov    %rdi,0x40(%rsp)
  0x00007f75704a9eff: mov    %r8,0x38(%rsp)
  0x00007f75704a9f04: mov    %r9,0x30(%rsp)
  0x00007f75704a9f09: mov    %r10,0x28(%rsp)
  0x00007f75704a9f0e: mov    %r11,0x20(%rsp)
  0x00007f75704a9f13: mov    %r12,0x18(%rsp)
  0x00007f75704a9f18: mov    %r13,0x10(%rsp)
  0x00007f75704a9f1d: mov    %r14,0x8(%rsp)
  0x00007f75704a9f22: mov    %r15,(%rsp)
  0x00007f75704a9f26: movabs $0x7f758593cf78,%rdi
  0x00007f75704a9f30: movabs $0x7f75704a9ed0,%rsi
  0x00007f75704a9f3a: mov    %rsp,%rdx
  0x00007f75704a9f3d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704a9f41: callq  0x00007f75853729fa
  0x00007f75704a9f46: hlt    
  ;; Entry:
  0x00007f75704a9f47: mov    %rdx,%rcx
  0x00007f75704a9f4a: shr    $0x2,%rdx
  0x00007f75704a9f4e: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f75704a9f53: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f75704a9f58: neg    %rdx
  0x00007f75704a9f5b: jmpq   Stub::jshort_disjoint_arraycopy+390 0x0x7f75704aa046
  ;; L_copy_8_bytes:
  0x00007f75704a9f60: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704a9f65: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704a9f6a: inc    %rdx
  0x00007f75704a9f6d: jne    Stub::jshort_disjoint_arraycopy+160 0x0x7f75704a9f60
  ;; L_copy_4_bytes:
  0x00007f75704a9f6f: test   $0x2,%ecx
  0x00007f75704a9f75: je     Stub::jshort_disjoint_arraycopy+197 0x0x7f75704a9f85
  0x00007f75704a9f77: mov    0x8(%rdi),%eax
  0x00007f75704a9f7a: mov    %eax,0x8(%rsi)
  0x00007f75704a9f7d: add    $0x4,%rdi
  0x00007f75704a9f81: add    $0x4,%rsi
  ;; L_copy_2_bytes:
  0x00007f75704a9f85: test   $0x1,%ecx
  0x00007f75704a9f8b: je     Stub::jshort_disjoint_arraycopy+213 0x0x7f75704a9f95
  0x00007f75704a9f8d: mov    0x8(%rdi),%ax
  0x00007f75704a9f91: mov    %ax,0x8(%rsi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0x00007f75704a9f95: incl   0x15a7a4dd(%rip)        # 0x00007f7585f24478
  0x00007f75704a9f9b: xor    %rax,%rax
  0x00007f75704a9f9e: leaveq 
  0x00007f75704a9f9f: retq   
  0x00007f75704a9fa0: mov    %rsp,-0x28(%rsp)
  0x00007f75704a9fa5: sub    $0x80,%rsp
  0x00007f75704a9fac: mov    %rax,0x78(%rsp)
  0x00007f75704a9fb1: mov    %rcx,0x70(%rsp)
  0x00007f75704a9fb6: mov    %rdx,0x68(%rsp)
  0x00007f75704a9fbb: mov    %rbx,0x60(%rsp)
  0x00007f75704a9fc0: mov    %rbp,0x50(%rsp)
  0x00007f75704a9fc5: mov    %rsi,0x48(%rsp)
  0x00007f75704a9fca: mov    %rdi,0x40(%rsp)
  0x00007f75704a9fcf: mov    %r8,0x38(%rsp)
  0x00007f75704a9fd4: mov    %r9,0x30(%rsp)
  0x00007f75704a9fd9: mov    %r10,0x28(%rsp)
  0x00007f75704a9fde: mov    %r11,0x20(%rsp)
  0x00007f75704a9fe3: mov    %r12,0x18(%rsp)
  0x00007f75704a9fe8: mov    %r13,0x10(%rsp)
  0x00007f75704a9fed: mov    %r14,0x8(%rsp)
  0x00007f75704a9ff2: mov    %r15,(%rsp)
  0x00007f75704a9ff6: movabs $0x7f758593d090,%rdi
  0x00007f75704aa000: movabs $0x7f75704a9fa0,%rsi
  0x00007f75704aa00a: mov    %rsp,%rdx
  0x00007f75704aa00d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa011: callq  0x00007f75853729fa
  0x00007f75704aa016: hlt    
  0x00007f75704aa017: nop
  0x00007f75704aa018: nop
  0x00007f75704aa019: nop
  0x00007f75704aa01a: nop
  0x00007f75704aa01b: nop
  0x00007f75704aa01c: nop
  0x00007f75704aa01d: nop
  0x00007f75704aa01e: nop
  0x00007f75704aa01f: nop
  ;; L_loop:
  0x00007f75704aa020: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f75704aa025: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f75704aa02a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f75704aa02f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f75704aa034: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa039: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aa03e: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aa042: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aa046: add    $0x4,%rdx
  0x00007f75704aa04a: jle    Stub::jshort_disjoint_arraycopy+352 0x0x7f75704aa020
  0x00007f75704aa04c: sub    $0x4,%rdx
  0x00007f75704aa050: jl     Stub::jshort_disjoint_arraycopy+160 0x0x7f75704a9f60
  0x00007f75704aa056: jmpq   Stub::jshort_disjoint_arraycopy+175 0x0x7f75704a9f6f

StubRoutines::jshort_arraycopy [0x00007f75704aa060, 0x00007f75704aa201[ (417 bytes)
  0x00007f75704aa060: push   %rbp
  0x00007f75704aa061: mov    %rsp,%rbp
  0x00007f75704aa064: movslq %edx,%rax
  0x00007f75704aa067: cmp    %rdx,%rax
  0x00007f75704aa06a: je     Stub::jshort_arraycopy+135 0x0x7f75704aa0e7
  0x00007f75704aa070: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa075: sub    $0x80,%rsp
  0x00007f75704aa07c: mov    %rax,0x78(%rsp)
  0x00007f75704aa081: mov    %rcx,0x70(%rsp)
  0x00007f75704aa086: mov    %rdx,0x68(%rsp)
  0x00007f75704aa08b: mov    %rbx,0x60(%rsp)
  0x00007f75704aa090: mov    %rbp,0x50(%rsp)
  0x00007f75704aa095: mov    %rsi,0x48(%rsp)
  0x00007f75704aa09a: mov    %rdi,0x40(%rsp)
  0x00007f75704aa09f: mov    %r8,0x38(%rsp)
  0x00007f75704aa0a4: mov    %r9,0x30(%rsp)
  0x00007f75704aa0a9: mov    %r10,0x28(%rsp)
  0x00007f75704aa0ae: mov    %r11,0x20(%rsp)
  0x00007f75704aa0b3: mov    %r12,0x18(%rsp)
  0x00007f75704aa0b8: mov    %r13,0x10(%rsp)
  0x00007f75704aa0bd: mov    %r14,0x8(%rsp)
  0x00007f75704aa0c2: mov    %r15,(%rsp)
  0x00007f75704aa0c6: movabs $0x7f758593cf78,%rdi
  0x00007f75704aa0d0: movabs $0x7f75704aa070,%rsi
  0x00007f75704aa0da: mov    %rsp,%rdx
  0x00007f75704aa0dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa0e1: callq  0x00007f75853729fa
  0x00007f75704aa0e6: hlt    
  ;; Entry:
  0x00007f75704aa0e7: cmp    %rdi,%rsi
  0x00007f75704aa0ea: lea    (%rdi,%rdx,2),%rax
  0x00007f75704aa0ee: jbe    Stub::jshort_disjoint_arraycopy+135 0x0x7f75704a9f47
  0x00007f75704aa0f4: cmp    %rax,%rsi
  0x00007f75704aa0f7: jae    Stub::jshort_disjoint_arraycopy+135 0x0x7f75704a9f47
  0x00007f75704aa0fd: mov    %rdx,%rcx
  0x00007f75704aa100: shr    $0x2,%rdx
  0x00007f75704aa104: test   $0x1,%ecx
  0x00007f75704aa10a: je     Stub::jshort_arraycopy+182 0x0x7f75704aa116
  0x00007f75704aa10c: mov    -0x2(%rdi,%rcx,2),%ax
  0x00007f75704aa111: mov    %ax,-0x2(%rsi,%rcx,2)
  ;; L_copy_4_bytes:
  0x00007f75704aa116: test   $0x2,%ecx
  0x00007f75704aa11c: je     Stub::jshort_arraycopy+390 0x0x7f75704aa1e6
  0x00007f75704aa122: mov    (%rdi,%rdx,8),%eax
  0x00007f75704aa125: mov    %eax,(%rsi,%rdx,8)
  0x00007f75704aa128: jmpq   Stub::jshort_arraycopy+390 0x0x7f75704aa1e6
  ;; L_copy_8_bytes:
  0x00007f75704aa12d: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa132: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aa137: dec    %rdx
  0x00007f75704aa13a: jne    Stub::jshort_arraycopy+205 0x0x7f75704aa12d
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0x00007f75704aa13c: incl   0x15a7a336(%rip)        # 0x00007f7585f24478
  0x00007f75704aa142: xor    %rax,%rax
  0x00007f75704aa145: leaveq 
  0x00007f75704aa146: retq   
  0x00007f75704aa147: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa14c: sub    $0x80,%rsp
  0x00007f75704aa153: mov    %rax,0x78(%rsp)
  0x00007f75704aa158: mov    %rcx,0x70(%rsp)
  0x00007f75704aa15d: mov    %rdx,0x68(%rsp)
  0x00007f75704aa162: mov    %rbx,0x60(%rsp)
  0x00007f75704aa167: mov    %rbp,0x50(%rsp)
  0x00007f75704aa16c: mov    %rsi,0x48(%rsp)
  0x00007f75704aa171: mov    %rdi,0x40(%rsp)
  0x00007f75704aa176: mov    %r8,0x38(%rsp)
  0x00007f75704aa17b: mov    %r9,0x30(%rsp)
  0x00007f75704aa180: mov    %r10,0x28(%rsp)
  0x00007f75704aa185: mov    %r11,0x20(%rsp)
  0x00007f75704aa18a: mov    %r12,0x18(%rsp)
  0x00007f75704aa18f: mov    %r13,0x10(%rsp)
  0x00007f75704aa194: mov    %r14,0x8(%rsp)
  0x00007f75704aa199: mov    %r15,(%rsp)
  0x00007f75704aa19d: movabs $0x7f758593d090,%rdi
  0x00007f75704aa1a7: movabs $0x7f75704aa147,%rsi
  0x00007f75704aa1b1: mov    %rsp,%rdx
  0x00007f75704aa1b4: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa1b8: callq  0x00007f75853729fa
  0x00007f75704aa1bd: hlt    
  0x00007f75704aa1be: nop
  0x00007f75704aa1bf: nop
  ;; L_loop:
  0x00007f75704aa1c0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f75704aa1c5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f75704aa1ca: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f75704aa1cf: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f75704aa1d4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa1d9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704aa1de: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aa1e2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aa1e6: sub    $0x4,%rdx
  0x00007f75704aa1ea: jge    Stub::jshort_arraycopy+352 0x0x7f75704aa1c0
  0x00007f75704aa1ec: add    $0x4,%rdx
  0x00007f75704aa1f0: jg     Stub::jshort_arraycopy+205 0x0x7f75704aa12d
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0x00007f75704aa1f6: incl   0x15a7a27c(%rip)        # 0x00007f7585f24478
  0x00007f75704aa1fc: xor    %rax,%rax
  0x00007f75704aa1ff: leaveq 
  0x00007f75704aa200: retq   

StubRoutines::jint_disjoint_arraycopy [0x00007f75704aa220, 0x00007f75704aa39b[ (379 bytes)
  0x00007f75704aa220: push   %rbp
  0x00007f75704aa221: mov    %rsp,%rbp
  0x00007f75704aa224: movslq %edx,%rax
  0x00007f75704aa227: cmp    %rdx,%rax
  0x00007f75704aa22a: je     Stub::jint_disjoint_arraycopy+135 0x0x7f75704aa2a7
  0x00007f75704aa230: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa235: sub    $0x80,%rsp
  0x00007f75704aa23c: mov    %rax,0x78(%rsp)
  0x00007f75704aa241: mov    %rcx,0x70(%rsp)
  0x00007f75704aa246: mov    %rdx,0x68(%rsp)
  0x00007f75704aa24b: mov    %rbx,0x60(%rsp)
  0x00007f75704aa250: mov    %rbp,0x50(%rsp)
  0x00007f75704aa255: mov    %rsi,0x48(%rsp)
  0x00007f75704aa25a: mov    %rdi,0x40(%rsp)
  0x00007f75704aa25f: mov    %r8,0x38(%rsp)
  0x00007f75704aa264: mov    %r9,0x30(%rsp)
  0x00007f75704aa269: mov    %r10,0x28(%rsp)
  0x00007f75704aa26e: mov    %r11,0x20(%rsp)
  0x00007f75704aa273: mov    %r12,0x18(%rsp)
  0x00007f75704aa278: mov    %r13,0x10(%rsp)
  0x00007f75704aa27d: mov    %r14,0x8(%rsp)
  0x00007f75704aa282: mov    %r15,(%rsp)
  0x00007f75704aa286: movabs $0x7f758593cf78,%rdi
  0x00007f75704aa290: movabs $0x7f75704aa230,%rsi
  0x00007f75704aa29a: mov    %rsp,%rdx
  0x00007f75704aa29d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa2a1: callq  0x00007f75853729fa
  0x00007f75704aa2a6: hlt    
  ;; Entry:
  0x00007f75704aa2a7: mov    %rdx,%rcx
  0x00007f75704aa2aa: shr    $0x1,%rdx
  0x00007f75704aa2ae: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f75704aa2b3: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f75704aa2b8: neg    %rdx
  0x00007f75704aa2bb: jmpq   Stub::jint_disjoint_arraycopy+358 0x0x7f75704aa386
  ;; L_copy_8_bytes:
  0x00007f75704aa2c0: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa2c5: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704aa2ca: inc    %rdx
  0x00007f75704aa2cd: jne    Stub::jint_disjoint_arraycopy+160 0x0x7f75704aa2c0
  ;; L_copy_4_bytes:
  0x00007f75704aa2cf: test   $0x1,%ecx
  0x00007f75704aa2d5: je     Stub::jint_disjoint_arraycopy+189 0x0x7f75704aa2dd
  0x00007f75704aa2d7: mov    0x8(%rdi),%eax
  0x00007f75704aa2da: mov    %eax,0x8(%rsi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704aa2dd: incl   0x15a7a199(%rip)        # 0x00007f7585f2447c
  0x00007f75704aa2e3: xor    %rax,%rax
  0x00007f75704aa2e6: leaveq 
  0x00007f75704aa2e7: retq   
  0x00007f75704aa2e8: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa2ed: sub    $0x80,%rsp
  0x00007f75704aa2f4: mov    %rax,0x78(%rsp)
  0x00007f75704aa2f9: mov    %rcx,0x70(%rsp)
  0x00007f75704aa2fe: mov    %rdx,0x68(%rsp)
  0x00007f75704aa303: mov    %rbx,0x60(%rsp)
  0x00007f75704aa308: mov    %rbp,0x50(%rsp)
  0x00007f75704aa30d: mov    %rsi,0x48(%rsp)
  0x00007f75704aa312: mov    %rdi,0x40(%rsp)
  0x00007f75704aa317: mov    %r8,0x38(%rsp)
  0x00007f75704aa31c: mov    %r9,0x30(%rsp)
  0x00007f75704aa321: mov    %r10,0x28(%rsp)
  0x00007f75704aa326: mov    %r11,0x20(%rsp)
  0x00007f75704aa32b: mov    %r12,0x18(%rsp)
  0x00007f75704aa330: mov    %r13,0x10(%rsp)
  0x00007f75704aa335: mov    %r14,0x8(%rsp)
  0x00007f75704aa33a: mov    %r15,(%rsp)
  0x00007f75704aa33e: movabs $0x7f758593d090,%rdi
  0x00007f75704aa348: movabs $0x7f75704aa2e8,%rsi
  0x00007f75704aa352: mov    %rsp,%rdx
  0x00007f75704aa355: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa359: callq  0x00007f75853729fa
  0x00007f75704aa35e: hlt    
  0x00007f75704aa35f: nop
  ;; L_loop:
  0x00007f75704aa360: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f75704aa365: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f75704aa36a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f75704aa36f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f75704aa374: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa379: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aa37e: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aa382: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aa386: add    $0x4,%rdx
  0x00007f75704aa38a: jle    Stub::jint_disjoint_arraycopy+320 0x0x7f75704aa360
  0x00007f75704aa38c: sub    $0x4,%rdx
  0x00007f75704aa390: jl     Stub::jint_disjoint_arraycopy+160 0x0x7f75704aa2c0
  0x00007f75704aa396: jmpq   Stub::jint_disjoint_arraycopy+175 0x0x7f75704aa2cf

StubRoutines::jint_arraycopy [0x00007f75704aa3a0, 0x00007f75704aa5c1[ (545 bytes)
  0x00007f75704aa3a0: push   %rbp
  0x00007f75704aa3a1: mov    %rsp,%rbp
  0x00007f75704aa3a4: movslq %edx,%rax
  0x00007f75704aa3a7: cmp    %rdx,%rax
  0x00007f75704aa3aa: je     Stub::jint_arraycopy+135 0x0x7f75704aa427
  0x00007f75704aa3b0: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa3b5: sub    $0x80,%rsp
  0x00007f75704aa3bc: mov    %rax,0x78(%rsp)
  0x00007f75704aa3c1: mov    %rcx,0x70(%rsp)
  0x00007f75704aa3c6: mov    %rdx,0x68(%rsp)
  0x00007f75704aa3cb: mov    %rbx,0x60(%rsp)
  0x00007f75704aa3d0: mov    %rbp,0x50(%rsp)
  0x00007f75704aa3d5: mov    %rsi,0x48(%rsp)
  0x00007f75704aa3da: mov    %rdi,0x40(%rsp)
  0x00007f75704aa3df: mov    %r8,0x38(%rsp)
  0x00007f75704aa3e4: mov    %r9,0x30(%rsp)
  0x00007f75704aa3e9: mov    %r10,0x28(%rsp)
  0x00007f75704aa3ee: mov    %r11,0x20(%rsp)
  0x00007f75704aa3f3: mov    %r12,0x18(%rsp)
  0x00007f75704aa3f8: mov    %r13,0x10(%rsp)
  0x00007f75704aa3fd: mov    %r14,0x8(%rsp)
  0x00007f75704aa402: mov    %r15,(%rsp)
  0x00007f75704aa406: movabs $0x7f758593cf78,%rdi
  0x00007f75704aa410: movabs $0x7f75704aa3b0,%rsi
  0x00007f75704aa41a: mov    %rsp,%rdx
  0x00007f75704aa41d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa421: callq  0x00007f75853729fa
  0x00007f75704aa426: hlt    
  ;; Entry:
  0x00007f75704aa427: cmp    %rdi,%rsi
  0x00007f75704aa42a: lea    (%rdi,%rdx,4),%rax
  0x00007f75704aa42e: jbe    Stub::jint_disjoint_arraycopy+135 0x0x7f75704aa2a7
  0x00007f75704aa434: cmp    %rax,%rsi
  0x00007f75704aa437: jae    Stub::jint_disjoint_arraycopy+135 0x0x7f75704aa2a7
  0x00007f75704aa43d: movslq %edx,%rax
  0x00007f75704aa440: cmp    %rdx,%rax
  0x00007f75704aa443: je     Stub::jint_arraycopy+288 0x0x7f75704aa4c0
  0x00007f75704aa449: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa44e: sub    $0x80,%rsp
  0x00007f75704aa455: mov    %rax,0x78(%rsp)
  0x00007f75704aa45a: mov    %rcx,0x70(%rsp)
  0x00007f75704aa45f: mov    %rdx,0x68(%rsp)
  0x00007f75704aa464: mov    %rbx,0x60(%rsp)
  0x00007f75704aa469: mov    %rbp,0x50(%rsp)
  0x00007f75704aa46e: mov    %rsi,0x48(%rsp)
  0x00007f75704aa473: mov    %rdi,0x40(%rsp)
  0x00007f75704aa478: mov    %r8,0x38(%rsp)
  0x00007f75704aa47d: mov    %r9,0x30(%rsp)
  0x00007f75704aa482: mov    %r10,0x28(%rsp)
  0x00007f75704aa487: mov    %r11,0x20(%rsp)
  0x00007f75704aa48c: mov    %r12,0x18(%rsp)
  0x00007f75704aa491: mov    %r13,0x10(%rsp)
  0x00007f75704aa496: mov    %r14,0x8(%rsp)
  0x00007f75704aa49b: mov    %r15,(%rsp)
  0x00007f75704aa49f: movabs $0x7f758593cf78,%rdi
  0x00007f75704aa4a9: movabs $0x7f75704aa449,%rsi
  0x00007f75704aa4b3: mov    %rsp,%rdx
  0x00007f75704aa4b6: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa4ba: callq  0x00007f75853729fa
  0x00007f75704aa4bf: hlt    
  0x00007f75704aa4c0: mov    %rdx,%rcx
  0x00007f75704aa4c3: shr    $0x1,%rdx
  0x00007f75704aa4c7: test   $0x1,%ecx
  0x00007f75704aa4cd: je     Stub::jint_arraycopy+518 0x0x7f75704aa5a6
  0x00007f75704aa4d3: mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f75704aa4d7: mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f75704aa4db: jmpq   Stub::jint_arraycopy+518 0x0x7f75704aa5a6
  ;; L_copy_8_bytes:
  0x00007f75704aa4e0: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa4e5: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aa4ea: dec    %rdx
  0x00007f75704aa4ed: jne    Stub::jint_arraycopy+320 0x0x7f75704aa4e0
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704aa4ef: incl   0x15a79f87(%rip)        # 0x00007f7585f2447c
  0x00007f75704aa4f5: xor    %rax,%rax
  0x00007f75704aa4f8: leaveq 
  0x00007f75704aa4f9: retq   
  0x00007f75704aa4fa: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa4ff: sub    $0x80,%rsp
  0x00007f75704aa506: mov    %rax,0x78(%rsp)
  0x00007f75704aa50b: mov    %rcx,0x70(%rsp)
  0x00007f75704aa510: mov    %rdx,0x68(%rsp)
  0x00007f75704aa515: mov    %rbx,0x60(%rsp)
  0x00007f75704aa51a: mov    %rbp,0x50(%rsp)
  0x00007f75704aa51f: mov    %rsi,0x48(%rsp)
  0x00007f75704aa524: mov    %rdi,0x40(%rsp)
  0x00007f75704aa529: mov    %r8,0x38(%rsp)
  0x00007f75704aa52e: mov    %r9,0x30(%rsp)
  0x00007f75704aa533: mov    %r10,0x28(%rsp)
  0x00007f75704aa538: mov    %r11,0x20(%rsp)
  0x00007f75704aa53d: mov    %r12,0x18(%rsp)
  0x00007f75704aa542: mov    %r13,0x10(%rsp)
  0x00007f75704aa547: mov    %r14,0x8(%rsp)
  0x00007f75704aa54c: mov    %r15,(%rsp)
  0x00007f75704aa550: movabs $0x7f758593d090,%rdi
  0x00007f75704aa55a: movabs $0x7f75704aa4fa,%rsi
  0x00007f75704aa564: mov    %rsp,%rdx
  0x00007f75704aa567: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa56b: callq  0x00007f75853729fa
  0x00007f75704aa570: hlt    
  0x00007f75704aa571: nop
  0x00007f75704aa572: nop
  0x00007f75704aa573: nop
  0x00007f75704aa574: nop
  0x00007f75704aa575: nop
  0x00007f75704aa576: nop
  0x00007f75704aa577: nop
  0x00007f75704aa578: nop
  0x00007f75704aa579: nop
  0x00007f75704aa57a: nop
  0x00007f75704aa57b: nop
  0x00007f75704aa57c: nop
  0x00007f75704aa57d: nop
  0x00007f75704aa57e: nop
  0x00007f75704aa57f: nop
  ;; L_loop:
  0x00007f75704aa580: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f75704aa585: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f75704aa58a: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f75704aa58f: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f75704aa594: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa599: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704aa59e: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aa5a2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aa5a6: sub    $0x4,%rdx
  0x00007f75704aa5aa: jge    Stub::jint_arraycopy+480 0x0x7f75704aa580
  0x00007f75704aa5ac: add    $0x4,%rdx
  0x00007f75704aa5b0: jg     Stub::jint_arraycopy+320 0x0x7f75704aa4e0
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704aa5b6: incl   0x15a79ec0(%rip)        # 0x00007f7585f2447c
  0x00007f75704aa5bc: xor    %rax,%rax
  0x00007f75704aa5bf: leaveq 
  0x00007f75704aa5c0: retq   

StubRoutines::jlong_disjoint_arraycopy [0x00007f75704aa5e0, 0x00007f75704aa751[ (369 bytes)
  0x00007f75704aa5e0: push   %rbp
  0x00007f75704aa5e1: mov    %rsp,%rbp
  0x00007f75704aa5e4: movslq %edx,%rax
  0x00007f75704aa5e7: cmp    %rdx,%rax
  0x00007f75704aa5ea: je     Stub::jlong_disjoint_arraycopy+135 0x0x7f75704aa667
  0x00007f75704aa5f0: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa5f5: sub    $0x80,%rsp
  0x00007f75704aa5fc: mov    %rax,0x78(%rsp)
  0x00007f75704aa601: mov    %rcx,0x70(%rsp)
  0x00007f75704aa606: mov    %rdx,0x68(%rsp)
  0x00007f75704aa60b: mov    %rbx,0x60(%rsp)
  0x00007f75704aa610: mov    %rbp,0x50(%rsp)
  0x00007f75704aa615: mov    %rsi,0x48(%rsp)
  0x00007f75704aa61a: mov    %rdi,0x40(%rsp)
  0x00007f75704aa61f: mov    %r8,0x38(%rsp)
  0x00007f75704aa624: mov    %r9,0x30(%rsp)
  0x00007f75704aa629: mov    %r10,0x28(%rsp)
  0x00007f75704aa62e: mov    %r11,0x20(%rsp)
  0x00007f75704aa633: mov    %r12,0x18(%rsp)
  0x00007f75704aa638: mov    %r13,0x10(%rsp)
  0x00007f75704aa63d: mov    %r14,0x8(%rsp)
  0x00007f75704aa642: mov    %r15,(%rsp)
  0x00007f75704aa646: movabs $0x7f758593cf78,%rdi
  0x00007f75704aa650: movabs $0x7f75704aa5f0,%rsi
  0x00007f75704aa65a: mov    %rsp,%rdx
  0x00007f75704aa65d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa661: callq  0x00007f75853729fa
  0x00007f75704aa666: hlt    
  ;; Entry:
  0x00007f75704aa667: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f75704aa66c: lea    -0x8(%rsi,%rdx,8),%rcx
  0x00007f75704aa671: neg    %rdx
  0x00007f75704aa674: jmpq   Stub::jlong_disjoint_arraycopy+342 0x0x7f75704aa736
  ;; L_copy_8_bytes:
  0x00007f75704aa679: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa67e: mov    %rax,0x8(%rcx,%rdx,8)
  0x00007f75704aa683: inc    %rdx
  0x00007f75704aa686: jne    Stub::jlong_disjoint_arraycopy+153 0x0x7f75704aa679
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f75704aa688: incl   0x15a79df2(%rip)        # 0x00007f7585f24480
  0x00007f75704aa68e: xor    %rax,%rax
  0x00007f75704aa691: leaveq 
  0x00007f75704aa692: retq   
  0x00007f75704aa693: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa698: sub    $0x80,%rsp
  0x00007f75704aa69f: mov    %rax,0x78(%rsp)
  0x00007f75704aa6a4: mov    %rcx,0x70(%rsp)
  0x00007f75704aa6a9: mov    %rdx,0x68(%rsp)
  0x00007f75704aa6ae: mov    %rbx,0x60(%rsp)
  0x00007f75704aa6b3: mov    %rbp,0x50(%rsp)
  0x00007f75704aa6b8: mov    %rsi,0x48(%rsp)
  0x00007f75704aa6bd: mov    %rdi,0x40(%rsp)
  0x00007f75704aa6c2: mov    %r8,0x38(%rsp)
  0x00007f75704aa6c7: mov    %r9,0x30(%rsp)
  0x00007f75704aa6cc: mov    %r10,0x28(%rsp)
  0x00007f75704aa6d1: mov    %r11,0x20(%rsp)
  0x00007f75704aa6d6: mov    %r12,0x18(%rsp)
  0x00007f75704aa6db: mov    %r13,0x10(%rsp)
  0x00007f75704aa6e0: mov    %r14,0x8(%rsp)
  0x00007f75704aa6e5: mov    %r15,(%rsp)
  0x00007f75704aa6e9: movabs $0x7f758593d090,%rdi
  0x00007f75704aa6f3: movabs $0x7f75704aa693,%rsi
  0x00007f75704aa6fd: mov    %rsp,%rdx
  0x00007f75704aa700: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa704: callq  0x00007f75853729fa
  0x00007f75704aa709: hlt    
  0x00007f75704aa70a: nop
  0x00007f75704aa70b: nop
  0x00007f75704aa70c: nop
  0x00007f75704aa70d: nop
  0x00007f75704aa70e: nop
  0x00007f75704aa70f: nop
  ;; L_loop:
  0x00007f75704aa710: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f75704aa715: mov    %rax,-0x18(%rcx,%rdx,8)
  0x00007f75704aa71a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f75704aa71f: mov    %rax,-0x10(%rcx,%rdx,8)
  0x00007f75704aa724: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa729: mov    %rax,-0x8(%rcx,%rdx,8)
  0x00007f75704aa72e: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aa732: mov    %rax,(%rcx,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aa736: add    $0x4,%rdx
  0x00007f75704aa73a: jle    Stub::jlong_disjoint_arraycopy+304 0x0x7f75704aa710
  0x00007f75704aa73c: sub    $0x4,%rdx
  0x00007f75704aa740: jl     Stub::jlong_disjoint_arraycopy+153 0x0x7f75704aa679
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f75704aa746: incl   0x15a79d34(%rip)        # 0x00007f7585f24480
  0x00007f75704aa74c: xor    %rax,%rax
  0x00007f75704aa74f: leaveq 
  0x00007f75704aa750: retq   

StubRoutines::jlong_arraycopy [0x00007f75704aa760, 0x00007f75704aa8e1[ (385 bytes)
  0x00007f75704aa760: push   %rbp
  0x00007f75704aa761: mov    %rsp,%rbp
  0x00007f75704aa764: movslq %edx,%rax
  0x00007f75704aa767: cmp    %rdx,%rax
  0x00007f75704aa76a: je     Stub::jlong_arraycopy+135 0x0x7f75704aa7e7
  0x00007f75704aa770: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa775: sub    $0x80,%rsp
  0x00007f75704aa77c: mov    %rax,0x78(%rsp)
  0x00007f75704aa781: mov    %rcx,0x70(%rsp)
  0x00007f75704aa786: mov    %rdx,0x68(%rsp)
  0x00007f75704aa78b: mov    %rbx,0x60(%rsp)
  0x00007f75704aa790: mov    %rbp,0x50(%rsp)
  0x00007f75704aa795: mov    %rsi,0x48(%rsp)
  0x00007f75704aa79a: mov    %rdi,0x40(%rsp)
  0x00007f75704aa79f: mov    %r8,0x38(%rsp)
  0x00007f75704aa7a4: mov    %r9,0x30(%rsp)
  0x00007f75704aa7a9: mov    %r10,0x28(%rsp)
  0x00007f75704aa7ae: mov    %r11,0x20(%rsp)
  0x00007f75704aa7b3: mov    %r12,0x18(%rsp)
  0x00007f75704aa7b8: mov    %r13,0x10(%rsp)
  0x00007f75704aa7bd: mov    %r14,0x8(%rsp)
  0x00007f75704aa7c2: mov    %r15,(%rsp)
  0x00007f75704aa7c6: movabs $0x7f758593cf78,%rdi
  0x00007f75704aa7d0: movabs $0x7f75704aa770,%rsi
  0x00007f75704aa7da: mov    %rsp,%rdx
  0x00007f75704aa7dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa7e1: callq  0x00007f75853729fa
  0x00007f75704aa7e6: hlt    
  ;; Entry:
  0x00007f75704aa7e7: cmp    %rdi,%rsi
  0x00007f75704aa7ea: lea    (%rdi,%rdx,8),%rax
  0x00007f75704aa7ee: jbe    Stub::jlong_disjoint_arraycopy+135 0x0x7f75704aa667
  0x00007f75704aa7f4: cmp    %rax,%rsi
  0x00007f75704aa7f7: jae    Stub::jlong_disjoint_arraycopy+135 0x0x7f75704aa667
  0x00007f75704aa7fd: jmpq   Stub::jlong_arraycopy+358 0x0x7f75704aa8c6
  ;; L_copy_8_bytes:
  0x00007f75704aa802: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa807: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aa80c: dec    %rdx
  0x00007f75704aa80f: jne    Stub::jlong_arraycopy+162 0x0x7f75704aa802
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f75704aa811: incl   0x15a79c69(%rip)        # 0x00007f7585f24480
  0x00007f75704aa817: xor    %rax,%rax
  0x00007f75704aa81a: leaveq 
  0x00007f75704aa81b: retq   
  0x00007f75704aa81c: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa821: sub    $0x80,%rsp
  0x00007f75704aa828: mov    %rax,0x78(%rsp)
  0x00007f75704aa82d: mov    %rcx,0x70(%rsp)
  0x00007f75704aa832: mov    %rdx,0x68(%rsp)
  0x00007f75704aa837: mov    %rbx,0x60(%rsp)
  0x00007f75704aa83c: mov    %rbp,0x50(%rsp)
  0x00007f75704aa841: mov    %rsi,0x48(%rsp)
  0x00007f75704aa846: mov    %rdi,0x40(%rsp)
  0x00007f75704aa84b: mov    %r8,0x38(%rsp)
  0x00007f75704aa850: mov    %r9,0x30(%rsp)
  0x00007f75704aa855: mov    %r10,0x28(%rsp)
  0x00007f75704aa85a: mov    %r11,0x20(%rsp)
  0x00007f75704aa85f: mov    %r12,0x18(%rsp)
  0x00007f75704aa864: mov    %r13,0x10(%rsp)
  0x00007f75704aa869: mov    %r14,0x8(%rsp)
  0x00007f75704aa86e: mov    %r15,(%rsp)
  0x00007f75704aa872: movabs $0x7f758593d090,%rdi
  0x00007f75704aa87c: movabs $0x7f75704aa81c,%rsi
  0x00007f75704aa886: mov    %rsp,%rdx
  0x00007f75704aa889: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa88d: callq  0x00007f75853729fa
  0x00007f75704aa892: hlt    
  0x00007f75704aa893: nop
  0x00007f75704aa894: nop
  0x00007f75704aa895: nop
  0x00007f75704aa896: nop
  0x00007f75704aa897: nop
  0x00007f75704aa898: nop
  0x00007f75704aa899: nop
  0x00007f75704aa89a: nop
  0x00007f75704aa89b: nop
  0x00007f75704aa89c: nop
  0x00007f75704aa89d: nop
  0x00007f75704aa89e: nop
  0x00007f75704aa89f: nop
  ;; L_loop:
  0x00007f75704aa8a0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f75704aa8a5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f75704aa8aa: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f75704aa8af: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f75704aa8b4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa8b9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704aa8be: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aa8c2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aa8c6: sub    $0x4,%rdx
  0x00007f75704aa8ca: jge    Stub::jlong_arraycopy+320 0x0x7f75704aa8a0
  0x00007f75704aa8cc: add    $0x4,%rdx
  0x00007f75704aa8d0: jg     Stub::jlong_arraycopy+162 0x0x7f75704aa802
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0x00007f75704aa8d6: incl   0x15a79ba4(%rip)        # 0x00007f7585f24480
  0x00007f75704aa8dc: xor    %rax,%rax
  0x00007f75704aa8df: leaveq 
  0x00007f75704aa8e0: retq   

StubRoutines::oop_disjoint_arraycopy [0x00007f75704aa900, 0x00007f75704aaaab[ (427 bytes)
  0x00007f75704aa900: push   %rbp
  0x00007f75704aa901: mov    %rsp,%rbp
  0x00007f75704aa904: movslq %edx,%rax
  0x00007f75704aa907: cmp    %rdx,%rax
  0x00007f75704aa90a: je     Stub::oop_disjoint_arraycopy+135 0x0x7f75704aa987
  0x00007f75704aa910: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa915: sub    $0x80,%rsp
  0x00007f75704aa91c: mov    %rax,0x78(%rsp)
  0x00007f75704aa921: mov    %rcx,0x70(%rsp)
  0x00007f75704aa926: mov    %rdx,0x68(%rsp)
  0x00007f75704aa92b: mov    %rbx,0x60(%rsp)
  0x00007f75704aa930: mov    %rbp,0x50(%rsp)
  0x00007f75704aa935: mov    %rsi,0x48(%rsp)
  0x00007f75704aa93a: mov    %rdi,0x40(%rsp)
  0x00007f75704aa93f: mov    %r8,0x38(%rsp)
  0x00007f75704aa944: mov    %r9,0x30(%rsp)
  0x00007f75704aa949: mov    %r10,0x28(%rsp)
  0x00007f75704aa94e: mov    %r11,0x20(%rsp)
  0x00007f75704aa953: mov    %r12,0x18(%rsp)
  0x00007f75704aa958: mov    %r13,0x10(%rsp)
  0x00007f75704aa95d: mov    %r14,0x8(%rsp)
  0x00007f75704aa962: mov    %r15,(%rsp)
  0x00007f75704aa966: movabs $0x7f758593cf78,%rdi
  0x00007f75704aa970: movabs $0x7f75704aa910,%rsi
  0x00007f75704aa97a: mov    %rsp,%rdx
  0x00007f75704aa97d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aa981: callq  0x00007f75853729fa
  0x00007f75704aa986: hlt    
  ;; Entry:
  0x00007f75704aa987: mov    %rsi,%r11
  0x00007f75704aa98a: mov    %rdx,%rcx
  0x00007f75704aa98d: shr    $0x1,%rdx
  0x00007f75704aa991: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f75704aa996: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f75704aa99b: neg    %rdx
  0x00007f75704aa99e: jmpq   Stub::oop_disjoint_arraycopy+406 0x0x7f75704aaa96
  ;; L_copy_8_bytes:
  0x00007f75704aa9a3: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aa9a8: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704aa9ad: inc    %rdx
  0x00007f75704aa9b0: jne    Stub::oop_disjoint_arraycopy+163 0x0x7f75704aa9a3
  ;; L_copy_4_bytes:
  0x00007f75704aa9b2: test   $0x1,%ecx
  0x00007f75704aa9b8: je     Stub::oop_disjoint_arraycopy+192 0x0x7f75704aa9c0
  0x00007f75704aa9ba: mov    0x8(%rdi),%eax
  0x00007f75704aa9bd: mov    %eax,0x8(%rsi)
  ;; L_exit:
  0x00007f75704aa9c0: lea    (%r11,%rcx,4),%rcx
  0x00007f75704aa9c4: sub    $0x4,%rcx
  0x00007f75704aa9c8: shr    $0x9,%r11
  0x00007f75704aa9cc: shr    $0x9,%rcx
  0x00007f75704aa9d0: sub    %r11,%rcx
  0x00007f75704aa9d3: movabs $0x7f756f386000,%rax
  0x00007f75704aa9dd: add    %rax,%r11
  ;; L_loop:
  0x00007f75704aa9e0: movb   $0x0,(%r11,%rcx,1)
  0x00007f75704aa9e5: dec    %rcx
  0x00007f75704aa9e8: jge    Stub::oop_disjoint_arraycopy+224 0x0x7f75704aa9e0
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704aa9ea: incl   0x15a79a8c(%rip)        # 0x00007f7585f2447c
  0x00007f75704aa9f0: xor    %rax,%rax
  0x00007f75704aa9f3: leaveq 
  0x00007f75704aa9f4: retq   
  0x00007f75704aa9f5: mov    %rsp,-0x28(%rsp)
  0x00007f75704aa9fa: sub    $0x80,%rsp
  0x00007f75704aaa01: mov    %rax,0x78(%rsp)
  0x00007f75704aaa06: mov    %rcx,0x70(%rsp)
  0x00007f75704aaa0b: mov    %rdx,0x68(%rsp)
  0x00007f75704aaa10: mov    %rbx,0x60(%rsp)
  0x00007f75704aaa15: mov    %rbp,0x50(%rsp)
  0x00007f75704aaa1a: mov    %rsi,0x48(%rsp)
  0x00007f75704aaa1f: mov    %rdi,0x40(%rsp)
  0x00007f75704aaa24: mov    %r8,0x38(%rsp)
  0x00007f75704aaa29: mov    %r9,0x30(%rsp)
  0x00007f75704aaa2e: mov    %r10,0x28(%rsp)
  0x00007f75704aaa33: mov    %r11,0x20(%rsp)
  0x00007f75704aaa38: mov    %r12,0x18(%rsp)
  0x00007f75704aaa3d: mov    %r13,0x10(%rsp)
  0x00007f75704aaa42: mov    %r14,0x8(%rsp)
  0x00007f75704aaa47: mov    %r15,(%rsp)
  0x00007f75704aaa4b: movabs $0x7f758593d090,%rdi
  0x00007f75704aaa55: movabs $0x7f75704aa9f5,%rsi
  0x00007f75704aaa5f: mov    %rsp,%rdx
  0x00007f75704aaa62: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aaa66: callq  0x00007f75853729fa
  0x00007f75704aaa6b: hlt    
  0x00007f75704aaa6c: nop
  0x00007f75704aaa6d: nop
  0x00007f75704aaa6e: nop
  0x00007f75704aaa6f: nop
  ;; L_loop:
  0x00007f75704aaa70: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f75704aaa75: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f75704aaa7a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f75704aaa7f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f75704aaa84: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aaa89: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aaa8e: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aaa92: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aaa96: add    $0x4,%rdx
  0x00007f75704aaa9a: jle    Stub::oop_disjoint_arraycopy+368 0x0x7f75704aaa70
  0x00007f75704aaa9c: sub    $0x4,%rdx
  0x00007f75704aaaa0: jl     Stub::oop_disjoint_arraycopy+163 0x0x7f75704aa9a3
  0x00007f75704aaaa6: jmpq   Stub::oop_disjoint_arraycopy+178 0x0x7f75704aa9b2

StubRoutines::oop_arraycopy [0x00007f75704aaac0, 0x00007f75704aad0a[ (586 bytes)
  0x00007f75704aaac0: push   %rbp
  0x00007f75704aaac1: mov    %rsp,%rbp
  0x00007f75704aaac4: movslq %edx,%rax
  0x00007f75704aaac7: cmp    %rdx,%rax
  0x00007f75704aaaca: je     Stub::oop_arraycopy+135 0x0x7f75704aab47
  0x00007f75704aaad0: mov    %rsp,-0x28(%rsp)
  0x00007f75704aaad5: sub    $0x80,%rsp
  0x00007f75704aaadc: mov    %rax,0x78(%rsp)
  0x00007f75704aaae1: mov    %rcx,0x70(%rsp)
  0x00007f75704aaae6: mov    %rdx,0x68(%rsp)
  0x00007f75704aaaeb: mov    %rbx,0x60(%rsp)
  0x00007f75704aaaf0: mov    %rbp,0x50(%rsp)
  0x00007f75704aaaf5: mov    %rsi,0x48(%rsp)
  0x00007f75704aaafa: mov    %rdi,0x40(%rsp)
  0x00007f75704aaaff: mov    %r8,0x38(%rsp)
  0x00007f75704aab04: mov    %r9,0x30(%rsp)
  0x00007f75704aab09: mov    %r10,0x28(%rsp)
  0x00007f75704aab0e: mov    %r11,0x20(%rsp)
  0x00007f75704aab13: mov    %r12,0x18(%rsp)
  0x00007f75704aab18: mov    %r13,0x10(%rsp)
  0x00007f75704aab1d: mov    %r14,0x8(%rsp)
  0x00007f75704aab22: mov    %r15,(%rsp)
  0x00007f75704aab26: movabs $0x7f758593cf78,%rdi
  0x00007f75704aab30: movabs $0x7f75704aaad0,%rsi
  0x00007f75704aab3a: mov    %rsp,%rdx
  0x00007f75704aab3d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aab41: callq  0x00007f75853729fa
  0x00007f75704aab46: hlt    
  ;; Entry:
  0x00007f75704aab47: cmp    %rdi,%rsi
  0x00007f75704aab4a: lea    (%rdi,%rdx,4),%rax
  0x00007f75704aab4e: jbe    Stub::oop_disjoint_arraycopy+135 0x0x7f75704aa987
  0x00007f75704aab54: cmp    %rax,%rsi
  0x00007f75704aab57: jae    Stub::oop_disjoint_arraycopy+135 0x0x7f75704aa987
  0x00007f75704aab5d: movslq %edx,%rax
  0x00007f75704aab60: cmp    %rdx,%rax
  0x00007f75704aab63: je     Stub::oop_arraycopy+288 0x0x7f75704aabe0
  0x00007f75704aab69: mov    %rsp,-0x28(%rsp)
  0x00007f75704aab6e: sub    $0x80,%rsp
  0x00007f75704aab75: mov    %rax,0x78(%rsp)
  0x00007f75704aab7a: mov    %rcx,0x70(%rsp)
  0x00007f75704aab7f: mov    %rdx,0x68(%rsp)
  0x00007f75704aab84: mov    %rbx,0x60(%rsp)
  0x00007f75704aab89: mov    %rbp,0x50(%rsp)
  0x00007f75704aab8e: mov    %rsi,0x48(%rsp)
  0x00007f75704aab93: mov    %rdi,0x40(%rsp)
  0x00007f75704aab98: mov    %r8,0x38(%rsp)
  0x00007f75704aab9d: mov    %r9,0x30(%rsp)
  0x00007f75704aaba2: mov    %r10,0x28(%rsp)
  0x00007f75704aaba7: mov    %r11,0x20(%rsp)
  0x00007f75704aabac: mov    %r12,0x18(%rsp)
  0x00007f75704aabb1: mov    %r13,0x10(%rsp)
  0x00007f75704aabb6: mov    %r14,0x8(%rsp)
  0x00007f75704aabbb: mov    %r15,(%rsp)
  0x00007f75704aabbf: movabs $0x7f758593cf78,%rdi
  0x00007f75704aabc9: movabs $0x7f75704aab69,%rsi
  0x00007f75704aabd3: mov    %rsp,%rdx
  0x00007f75704aabd6: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aabda: callq  0x00007f75853729fa
  0x00007f75704aabdf: hlt    
  0x00007f75704aabe0: mov    %rdx,%rcx
  0x00007f75704aabe3: shr    $0x1,%rdx
  0x00007f75704aabe7: test   $0x1,%ecx
  0x00007f75704aabed: je     Stub::oop_arraycopy+518 0x0x7f75704aacc6
  0x00007f75704aabf3: mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f75704aabf7: mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f75704aabfb: jmpq   Stub::oop_arraycopy+518 0x0x7f75704aacc6
  ;; L_copy_8_bytes:
  0x00007f75704aac00: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aac05: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aac0a: dec    %rdx
  0x00007f75704aac0d: jne    Stub::oop_arraycopy+320 0x0x7f75704aac00
  0x00007f75704aac0f: jmpq   Stub::oop_arraycopy+534 0x0x7f75704aacd6
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704aac14: incl   0x15a79862(%rip)        # 0x00007f7585f2447c
  0x00007f75704aac1a: xor    %rax,%rax
  0x00007f75704aac1d: leaveq 
  0x00007f75704aac1e: retq   
  0x00007f75704aac1f: mov    %rsp,-0x28(%rsp)
  0x00007f75704aac24: sub    $0x80,%rsp
  0x00007f75704aac2b: mov    %rax,0x78(%rsp)
  0x00007f75704aac30: mov    %rcx,0x70(%rsp)
  0x00007f75704aac35: mov    %rdx,0x68(%rsp)
  0x00007f75704aac3a: mov    %rbx,0x60(%rsp)
  0x00007f75704aac3f: mov    %rbp,0x50(%rsp)
  0x00007f75704aac44: mov    %rsi,0x48(%rsp)
  0x00007f75704aac49: mov    %rdi,0x40(%rsp)
  0x00007f75704aac4e: mov    %r8,0x38(%rsp)
  0x00007f75704aac53: mov    %r9,0x30(%rsp)
  0x00007f75704aac58: mov    %r10,0x28(%rsp)
  0x00007f75704aac5d: mov    %r11,0x20(%rsp)
  0x00007f75704aac62: mov    %r12,0x18(%rsp)
  0x00007f75704aac67: mov    %r13,0x10(%rsp)
  0x00007f75704aac6c: mov    %r14,0x8(%rsp)
  0x00007f75704aac71: mov    %r15,(%rsp)
  0x00007f75704aac75: movabs $0x7f758593d090,%rdi
  0x00007f75704aac7f: movabs $0x7f75704aac1f,%rsi
  0x00007f75704aac89: mov    %rsp,%rdx
  0x00007f75704aac8c: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aac90: callq  0x00007f75853729fa
  0x00007f75704aac95: hlt    
  0x00007f75704aac96: nop
  0x00007f75704aac97: nop
  0x00007f75704aac98: nop
  0x00007f75704aac99: nop
  0x00007f75704aac9a: nop
  0x00007f75704aac9b: nop
  0x00007f75704aac9c: nop
  0x00007f75704aac9d: nop
  0x00007f75704aac9e: nop
  0x00007f75704aac9f: nop
  ;; L_loop:
  0x00007f75704aaca0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f75704aaca5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f75704aacaa: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f75704aacaf: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f75704aacb4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aacb9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704aacbe: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aacc2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aacc6: sub    $0x4,%rdx
  0x00007f75704aacca: jge    Stub::oop_arraycopy+480 0x0x7f75704aaca0
  0x00007f75704aaccc: add    $0x4,%rdx
  0x00007f75704aacd0: jg     Stub::oop_arraycopy+320 0x0x7f75704aac00
  ;; L_exit:
  0x00007f75704aacd6: lea    (%rsi,%rcx,4),%rcx
  0x00007f75704aacda: sub    $0x4,%rcx
  0x00007f75704aacde: shr    $0x9,%rsi
  0x00007f75704aace2: shr    $0x9,%rcx
  0x00007f75704aace6: sub    %rsi,%rcx
  0x00007f75704aace9: movabs $0x7f756f386000,%rax
  0x00007f75704aacf3: add    %rax,%rsi
  ;; L_loop:
  0x00007f75704aacf6: movb   $0x0,(%rsi,%rcx,1)
  0x00007f75704aacfa: dec    %rcx
  0x00007f75704aacfd: jge    Stub::oop_arraycopy+566 0x0x7f75704aacf6
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704aacff: incl   0x15a79777(%rip)        # 0x00007f7585f2447c
  0x00007f75704aad05: xor    %rax,%rax
  0x00007f75704aad08: leaveq 
  0x00007f75704aad09: retq   

StubRoutines::oop_disjoint_arraycopy_uninit [0x00007f75704aad20, 0x00007f75704aaecb[ (427 bytes)
  0x00007f75704aad20: push   %rbp
  0x00007f75704aad21: mov    %rsp,%rbp
  0x00007f75704aad24: movslq %edx,%rax
  0x00007f75704aad27: cmp    %rdx,%rax
  0x00007f75704aad2a: je     Stub::oop_disjoint_arraycopy_uninit+135 0x0x7f75704aada7
  0x00007f75704aad30: mov    %rsp,-0x28(%rsp)
  0x00007f75704aad35: sub    $0x80,%rsp
  0x00007f75704aad3c: mov    %rax,0x78(%rsp)
  0x00007f75704aad41: mov    %rcx,0x70(%rsp)
  0x00007f75704aad46: mov    %rdx,0x68(%rsp)
  0x00007f75704aad4b: mov    %rbx,0x60(%rsp)
  0x00007f75704aad50: mov    %rbp,0x50(%rsp)
  0x00007f75704aad55: mov    %rsi,0x48(%rsp)
  0x00007f75704aad5a: mov    %rdi,0x40(%rsp)
  0x00007f75704aad5f: mov    %r8,0x38(%rsp)
  0x00007f75704aad64: mov    %r9,0x30(%rsp)
  0x00007f75704aad69: mov    %r10,0x28(%rsp)
  0x00007f75704aad6e: mov    %r11,0x20(%rsp)
  0x00007f75704aad73: mov    %r12,0x18(%rsp)
  0x00007f75704aad78: mov    %r13,0x10(%rsp)
  0x00007f75704aad7d: mov    %r14,0x8(%rsp)
  0x00007f75704aad82: mov    %r15,(%rsp)
  0x00007f75704aad86: movabs $0x7f758593cf78,%rdi
  0x00007f75704aad90: movabs $0x7f75704aad30,%rsi
  0x00007f75704aad9a: mov    %rsp,%rdx
  0x00007f75704aad9d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aada1: callq  0x00007f75853729fa
  0x00007f75704aada6: hlt    
  ;; Entry:
  0x00007f75704aada7: mov    %rsi,%r11
  0x00007f75704aadaa: mov    %rdx,%rcx
  0x00007f75704aadad: shr    $0x1,%rdx
  0x00007f75704aadb1: lea    -0x8(%rdi,%rdx,8),%rdi
  0x00007f75704aadb6: lea    -0x8(%rsi,%rdx,8),%rsi
  0x00007f75704aadbb: neg    %rdx
  0x00007f75704aadbe: jmpq   Stub::oop_disjoint_arraycopy_uninit+406 0x0x7f75704aaeb6
  ;; L_copy_8_bytes:
  0x00007f75704aadc3: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704aadc8: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704aadcd: inc    %rdx
  0x00007f75704aadd0: jne    Stub::oop_disjoint_arraycopy_uninit+163 0x0x7f75704aadc3
  ;; L_copy_4_bytes:
  0x00007f75704aadd2: test   $0x1,%ecx
  0x00007f75704aadd8: je     Stub::oop_disjoint_arraycopy_uninit+192 0x0x7f75704aade0
  0x00007f75704aadda: mov    0x8(%rdi),%eax
  0x00007f75704aaddd: mov    %eax,0x8(%rsi)
  ;; L_exit:
  0x00007f75704aade0: lea    (%r11,%rcx,4),%rcx
  0x00007f75704aade4: sub    $0x4,%rcx
  0x00007f75704aade8: shr    $0x9,%r11
  0x00007f75704aadec: shr    $0x9,%rcx
  0x00007f75704aadf0: sub    %r11,%rcx
  0x00007f75704aadf3: movabs $0x7f756f386000,%rax
  0x00007f75704aadfd: add    %rax,%r11
  ;; L_loop:
  0x00007f75704aae00: movb   $0x0,(%r11,%rcx,1)
  0x00007f75704aae05: dec    %rcx
  0x00007f75704aae08: jge    Stub::oop_disjoint_arraycopy_uninit+224 0x0x7f75704aae00
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704aae0a: incl   0x15a7966c(%rip)        # 0x00007f7585f2447c
  0x00007f75704aae10: xor    %rax,%rax
  0x00007f75704aae13: leaveq 
  0x00007f75704aae14: retq   
  0x00007f75704aae15: mov    %rsp,-0x28(%rsp)
  0x00007f75704aae1a: sub    $0x80,%rsp
  0x00007f75704aae21: mov    %rax,0x78(%rsp)
  0x00007f75704aae26: mov    %rcx,0x70(%rsp)
  0x00007f75704aae2b: mov    %rdx,0x68(%rsp)
  0x00007f75704aae30: mov    %rbx,0x60(%rsp)
  0x00007f75704aae35: mov    %rbp,0x50(%rsp)
  0x00007f75704aae3a: mov    %rsi,0x48(%rsp)
  0x00007f75704aae3f: mov    %rdi,0x40(%rsp)
  0x00007f75704aae44: mov    %r8,0x38(%rsp)
  0x00007f75704aae49: mov    %r9,0x30(%rsp)
  0x00007f75704aae4e: mov    %r10,0x28(%rsp)
  0x00007f75704aae53: mov    %r11,0x20(%rsp)
  0x00007f75704aae58: mov    %r12,0x18(%rsp)
  0x00007f75704aae5d: mov    %r13,0x10(%rsp)
  0x00007f75704aae62: mov    %r14,0x8(%rsp)
  0x00007f75704aae67: mov    %r15,(%rsp)
  0x00007f75704aae6b: movabs $0x7f758593d090,%rdi
  0x00007f75704aae75: movabs $0x7f75704aae15,%rsi
  0x00007f75704aae7f: mov    %rsp,%rdx
  0x00007f75704aae82: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aae86: callq  0x00007f75853729fa
  0x00007f75704aae8b: hlt    
  0x00007f75704aae8c: nop
  0x00007f75704aae8d: nop
  0x00007f75704aae8e: nop
  0x00007f75704aae8f: nop
  ;; L_loop:
  0x00007f75704aae90: mov    -0x18(%rdi,%rdx,8),%rax
  0x00007f75704aae95: mov    %rax,-0x18(%rsi,%rdx,8)
  0x00007f75704aae9a: mov    -0x10(%rdi,%rdx,8),%rax
  0x00007f75704aae9f: mov    %rax,-0x10(%rsi,%rdx,8)
  0x00007f75704aaea4: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704aaea9: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704aaeae: mov    (%rdi,%rdx,8),%rax
  0x00007f75704aaeb2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704aaeb6: add    $0x4,%rdx
  0x00007f75704aaeba: jle    Stub::oop_disjoint_arraycopy_uninit+368 0x0x7f75704aae90
  0x00007f75704aaebc: sub    $0x4,%rdx
  0x00007f75704aaec0: jl     Stub::oop_disjoint_arraycopy_uninit+163 0x0x7f75704aadc3
  0x00007f75704aaec6: jmpq   Stub::oop_disjoint_arraycopy_uninit+178 0x0x7f75704aadd2

StubRoutines::oop_arraycopy_uninit [0x00007f75704aaee0, 0x00007f75704ab12a[ (586 bytes)
  0x00007f75704aaee0: push   %rbp
  0x00007f75704aaee1: mov    %rsp,%rbp
  0x00007f75704aaee4: movslq %edx,%rax
  0x00007f75704aaee7: cmp    %rdx,%rax
  0x00007f75704aaeea: je     Stub::oop_arraycopy_uninit+135 0x0x7f75704aaf67
  0x00007f75704aaef0: mov    %rsp,-0x28(%rsp)
  0x00007f75704aaef5: sub    $0x80,%rsp
  0x00007f75704aaefc: mov    %rax,0x78(%rsp)
  0x00007f75704aaf01: mov    %rcx,0x70(%rsp)
  0x00007f75704aaf06: mov    %rdx,0x68(%rsp)
  0x00007f75704aaf0b: mov    %rbx,0x60(%rsp)
  0x00007f75704aaf10: mov    %rbp,0x50(%rsp)
  0x00007f75704aaf15: mov    %rsi,0x48(%rsp)
  0x00007f75704aaf1a: mov    %rdi,0x40(%rsp)
  0x00007f75704aaf1f: mov    %r8,0x38(%rsp)
  0x00007f75704aaf24: mov    %r9,0x30(%rsp)
  0x00007f75704aaf29: mov    %r10,0x28(%rsp)
  0x00007f75704aaf2e: mov    %r11,0x20(%rsp)
  0x00007f75704aaf33: mov    %r12,0x18(%rsp)
  0x00007f75704aaf38: mov    %r13,0x10(%rsp)
  0x00007f75704aaf3d: mov    %r14,0x8(%rsp)
  0x00007f75704aaf42: mov    %r15,(%rsp)
  0x00007f75704aaf46: movabs $0x7f758593cf78,%rdi
  0x00007f75704aaf50: movabs $0x7f75704aaef0,%rsi
  0x00007f75704aaf5a: mov    %rsp,%rdx
  0x00007f75704aaf5d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aaf61: callq  0x00007f75853729fa
  0x00007f75704aaf66: hlt    
  0x00007f75704aaf67: cmp    %rdi,%rsi
  0x00007f75704aaf6a: lea    (%rdi,%rdx,4),%rax
  0x00007f75704aaf6e: jbe    Stub::oop_disjoint_arraycopy_uninit+135 0x0x7f75704aada7
  0x00007f75704aaf74: cmp    %rax,%rsi
  0x00007f75704aaf77: jae    Stub::oop_disjoint_arraycopy_uninit+135 0x0x7f75704aada7
  0x00007f75704aaf7d: movslq %edx,%rax
  0x00007f75704aaf80: cmp    %rdx,%rax
  0x00007f75704aaf83: je     Stub::oop_arraycopy_uninit+288 0x0x7f75704ab000
  0x00007f75704aaf89: mov    %rsp,-0x28(%rsp)
  0x00007f75704aaf8e: sub    $0x80,%rsp
  0x00007f75704aaf95: mov    %rax,0x78(%rsp)
  0x00007f75704aaf9a: mov    %rcx,0x70(%rsp)
  0x00007f75704aaf9f: mov    %rdx,0x68(%rsp)
  0x00007f75704aafa4: mov    %rbx,0x60(%rsp)
  0x00007f75704aafa9: mov    %rbp,0x50(%rsp)
  0x00007f75704aafae: mov    %rsi,0x48(%rsp)
  0x00007f75704aafb3: mov    %rdi,0x40(%rsp)
  0x00007f75704aafb8: mov    %r8,0x38(%rsp)
  0x00007f75704aafbd: mov    %r9,0x30(%rsp)
  0x00007f75704aafc2: mov    %r10,0x28(%rsp)
  0x00007f75704aafc7: mov    %r11,0x20(%rsp)
  0x00007f75704aafcc: mov    %r12,0x18(%rsp)
  0x00007f75704aafd1: mov    %r13,0x10(%rsp)
  0x00007f75704aafd6: mov    %r14,0x8(%rsp)
  0x00007f75704aafdb: mov    %r15,(%rsp)
  0x00007f75704aafdf: movabs $0x7f758593cf78,%rdi
  0x00007f75704aafe9: movabs $0x7f75704aaf89,%rsi
  0x00007f75704aaff3: mov    %rsp,%rdx
  0x00007f75704aaff6: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aaffa: callq  0x00007f75853729fa
  0x00007f75704aafff: hlt    
  0x00007f75704ab000: mov    %rdx,%rcx
  0x00007f75704ab003: shr    $0x1,%rdx
  0x00007f75704ab007: test   $0x1,%ecx
  0x00007f75704ab00d: je     Stub::oop_arraycopy_uninit+518 0x0x7f75704ab0e6
  0x00007f75704ab013: mov    -0x4(%rdi,%rcx,4),%eax
  0x00007f75704ab017: mov    %eax,-0x4(%rsi,%rcx,4)
  0x00007f75704ab01b: jmpq   Stub::oop_arraycopy_uninit+518 0x0x7f75704ab0e6
  ;; L_copy_8_bytes:
  0x00007f75704ab020: mov    -0x8(%rdi,%rdx,8),%rax
  0x00007f75704ab025: mov    %rax,-0x8(%rsi,%rdx,8)
  0x00007f75704ab02a: dec    %rdx
  0x00007f75704ab02d: jne    Stub::oop_arraycopy_uninit+320 0x0x7f75704ab020
  0x00007f75704ab02f: jmpq   Stub::oop_arraycopy_uninit+534 0x0x7f75704ab0f6
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704ab034: incl   0x15a79442(%rip)        # 0x00007f7585f2447c
  0x00007f75704ab03a: xor    %rax,%rax
  0x00007f75704ab03d: leaveq 
  0x00007f75704ab03e: retq   
  0x00007f75704ab03f: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab044: sub    $0x80,%rsp
  0x00007f75704ab04b: mov    %rax,0x78(%rsp)
  0x00007f75704ab050: mov    %rcx,0x70(%rsp)
  0x00007f75704ab055: mov    %rdx,0x68(%rsp)
  0x00007f75704ab05a: mov    %rbx,0x60(%rsp)
  0x00007f75704ab05f: mov    %rbp,0x50(%rsp)
  0x00007f75704ab064: mov    %rsi,0x48(%rsp)
  0x00007f75704ab069: mov    %rdi,0x40(%rsp)
  0x00007f75704ab06e: mov    %r8,0x38(%rsp)
  0x00007f75704ab073: mov    %r9,0x30(%rsp)
  0x00007f75704ab078: mov    %r10,0x28(%rsp)
  0x00007f75704ab07d: mov    %r11,0x20(%rsp)
  0x00007f75704ab082: mov    %r12,0x18(%rsp)
  0x00007f75704ab087: mov    %r13,0x10(%rsp)
  0x00007f75704ab08c: mov    %r14,0x8(%rsp)
  0x00007f75704ab091: mov    %r15,(%rsp)
  0x00007f75704ab095: movabs $0x7f758593d090,%rdi
  0x00007f75704ab09f: movabs $0x7f75704ab03f,%rsi
  0x00007f75704ab0a9: mov    %rsp,%rdx
  0x00007f75704ab0ac: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab0b0: callq  0x00007f75853729fa
  0x00007f75704ab0b5: hlt    
  0x00007f75704ab0b6: nop
  0x00007f75704ab0b7: nop
  0x00007f75704ab0b8: nop
  0x00007f75704ab0b9: nop
  0x00007f75704ab0ba: nop
  0x00007f75704ab0bb: nop
  0x00007f75704ab0bc: nop
  0x00007f75704ab0bd: nop
  0x00007f75704ab0be: nop
  0x00007f75704ab0bf: nop
  ;; L_loop:
  0x00007f75704ab0c0: mov    0x18(%rdi,%rdx,8),%rax
  0x00007f75704ab0c5: mov    %rax,0x18(%rsi,%rdx,8)
  0x00007f75704ab0ca: mov    0x10(%rdi,%rdx,8),%rax
  0x00007f75704ab0cf: mov    %rax,0x10(%rsi,%rdx,8)
  0x00007f75704ab0d4: mov    0x8(%rdi,%rdx,8),%rax
  0x00007f75704ab0d9: mov    %rax,0x8(%rsi,%rdx,8)
  0x00007f75704ab0de: mov    (%rdi,%rdx,8),%rax
  0x00007f75704ab0e2: mov    %rax,(%rsi,%rdx,8)
  ;; L_copy_bytes:
  0x00007f75704ab0e6: sub    $0x4,%rdx
  0x00007f75704ab0ea: jge    Stub::oop_arraycopy_uninit+480 0x0x7f75704ab0c0
  0x00007f75704ab0ec: add    $0x4,%rdx
  0x00007f75704ab0f0: jg     Stub::oop_arraycopy_uninit+320 0x0x7f75704ab020
  ;; L_exit:
  0x00007f75704ab0f6: lea    (%rsi,%rcx,4),%rcx
  0x00007f75704ab0fa: sub    $0x4,%rcx
  0x00007f75704ab0fe: shr    $0x9,%rsi
  0x00007f75704ab102: shr    $0x9,%rcx
  0x00007f75704ab106: sub    %rsi,%rcx
  0x00007f75704ab109: movabs $0x7f756f386000,%rax
  0x00007f75704ab113: add    %rax,%rsi
  ;; L_loop:
  0x00007f75704ab116: movb   $0x0,(%rsi,%rcx,1)
  0x00007f75704ab11a: dec    %rcx
  0x00007f75704ab11d: jge    Stub::oop_arraycopy_uninit+566 0x0x7f75704ab116
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0x00007f75704ab11f: incl   0x15a79357(%rip)        # 0x00007f7585f2447c
  0x00007f75704ab125: xor    %rax,%rax
  0x00007f75704ab128: leaveq 
  0x00007f75704ab129: retq   

StubRoutines::checkcast_arraycopy [0x00007f75704ab140, 0x00007f75704ab55c[ (1052 bytes)
  0x00007f75704ab140: push   %rbp
  0x00007f75704ab141: mov    %rsp,%rbp
  0x00007f75704ab144: cmp    %rdi,%rsi
  0x00007f75704ab147: lea    (%rdi,%rdx,4),%rax
  0x00007f75704ab14b: jbe    Stub::checkcast_arraycopy+145 0x0x7f75704ab1d1
  0x00007f75704ab151: cmp    %rax,%rsi
  0x00007f75704ab154: jae    Stub::checkcast_arraycopy+145 0x0x7f75704ab1d1
  0x00007f75704ab15a: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab15f: sub    $0x80,%rsp
  0x00007f75704ab166: mov    %rax,0x78(%rsp)
  0x00007f75704ab16b: mov    %rcx,0x70(%rsp)
  0x00007f75704ab170: mov    %rdx,0x68(%rsp)
  0x00007f75704ab175: mov    %rbx,0x60(%rsp)
  0x00007f75704ab17a: mov    %rbp,0x50(%rsp)
  0x00007f75704ab17f: mov    %rsi,0x48(%rsp)
  0x00007f75704ab184: mov    %rdi,0x40(%rsp)
  0x00007f75704ab189: mov    %r8,0x38(%rsp)
  0x00007f75704ab18e: mov    %r9,0x30(%rsp)
  0x00007f75704ab193: mov    %r10,0x28(%rsp)
  0x00007f75704ab198: mov    %r11,0x20(%rsp)
  0x00007f75704ab19d: mov    %r12,0x18(%rsp)
  0x00007f75704ab1a2: mov    %r13,0x10(%rsp)
  0x00007f75704ab1a7: mov    %r14,0x8(%rsp)
  0x00007f75704ab1ac: mov    %r15,(%rsp)
  0x00007f75704ab1b0: movabs $0x7f758593d230,%rdi
  0x00007f75704ab1ba: movabs $0x7f75704ab15a,%rsi
  0x00007f75704ab1c4: mov    %rsp,%rdx
  0x00007f75704ab1c7: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab1cb: callq  0x00007f75853729fa
  0x00007f75704ab1d0: hlt    
  ;; Entry:
  0x00007f75704ab1d1: sub    $0x10,%rsp
  0x00007f75704ab1d5: mov    %r13,(%rsp)
  0x00007f75704ab1d9: mov    %r14,0x8(%rsp)
  0x00007f75704ab1de: movslq %edx,%rax
  0x00007f75704ab1e1: cmp    %rdx,%rax
  0x00007f75704ab1e4: je     Stub::checkcast_arraycopy+289 0x0x7f75704ab261
  0x00007f75704ab1ea: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab1ef: sub    $0x80,%rsp
  0x00007f75704ab1f6: mov    %rax,0x78(%rsp)
  0x00007f75704ab1fb: mov    %rcx,0x70(%rsp)
  0x00007f75704ab200: mov    %rdx,0x68(%rsp)
  0x00007f75704ab205: mov    %rbx,0x60(%rsp)
  0x00007f75704ab20a: mov    %rbp,0x50(%rsp)
  0x00007f75704ab20f: mov    %rsi,0x48(%rsp)
  0x00007f75704ab214: mov    %rdi,0x40(%rsp)
  0x00007f75704ab219: mov    %r8,0x38(%rsp)
  0x00007f75704ab21e: mov    %r9,0x30(%rsp)
  0x00007f75704ab223: mov    %r10,0x28(%rsp)
  0x00007f75704ab228: mov    %r11,0x20(%rsp)
  0x00007f75704ab22d: mov    %r12,0x18(%rsp)
  0x00007f75704ab232: mov    %r13,0x10(%rsp)
  0x00007f75704ab237: mov    %r14,0x8(%rsp)
  0x00007f75704ab23c: mov    %r15,(%rsp)
  0x00007f75704ab240: movabs $0x7f758593cf78,%rdi
  0x00007f75704ab24a: movabs $0x7f75704ab1ea,%rsi
  0x00007f75704ab254: mov    %rsp,%rdx
  0x00007f75704ab257: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab25b: callq  0x00007f75853729fa
  0x00007f75704ab260: hlt    
  0x00007f75704ab261: movslq %ecx,%rax
  0x00007f75704ab264: cmp    %rcx,%rax
  0x00007f75704ab267: je     Stub::checkcast_arraycopy+420 0x0x7f75704ab2e4
  0x00007f75704ab26d: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab272: sub    $0x80,%rsp
  0x00007f75704ab279: mov    %rax,0x78(%rsp)
  0x00007f75704ab27e: mov    %rcx,0x70(%rsp)
  0x00007f75704ab283: mov    %rdx,0x68(%rsp)
  0x00007f75704ab288: mov    %rbx,0x60(%rsp)
  0x00007f75704ab28d: mov    %rbp,0x50(%rsp)
  0x00007f75704ab292: mov    %rsi,0x48(%rsp)
  0x00007f75704ab297: mov    %rdi,0x40(%rsp)
  0x00007f75704ab29c: mov    %r8,0x38(%rsp)
  0x00007f75704ab2a1: mov    %r9,0x30(%rsp)
  0x00007f75704ab2a6: mov    %r10,0x28(%rsp)
  0x00007f75704ab2ab: mov    %r11,0x20(%rsp)
  0x00007f75704ab2b0: mov    %r12,0x18(%rsp)
  0x00007f75704ab2b5: mov    %r13,0x10(%rsp)
  0x00007f75704ab2ba: mov    %r14,0x8(%rsp)
  0x00007f75704ab2bf: mov    %r15,(%rsp)
  0x00007f75704ab2c3: movabs $0x7f758593cf78,%rdi
  0x00007f75704ab2cd: movabs $0x7f75704ab26d,%rsi
  0x00007f75704ab2d7: mov    %rsp,%rdx
  0x00007f75704ab2da: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab2de: callq  0x00007f75853729fa
  0x00007f75704ab2e3: hlt    
  ;; assert consistent ckoff/ckval
  0x00007f75704ab2e4: cmp    0x10(%r8),%ecx
  0x00007f75704ab2e8: je     Stub::checkcast_arraycopy+549 0x0x7f75704ab365
  0x00007f75704ab2ee: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab2f3: sub    $0x80,%rsp
  0x00007f75704ab2fa: mov    %rax,0x78(%rsp)
  0x00007f75704ab2ff: mov    %rcx,0x70(%rsp)
  0x00007f75704ab304: mov    %rdx,0x68(%rsp)
  0x00007f75704ab309: mov    %rbx,0x60(%rsp)
  0x00007f75704ab30e: mov    %rbp,0x50(%rsp)
  0x00007f75704ab313: mov    %rsi,0x48(%rsp)
  0x00007f75704ab318: mov    %rdi,0x40(%rsp)
  0x00007f75704ab31d: mov    %r8,0x38(%rsp)
  0x00007f75704ab322: mov    %r9,0x30(%rsp)
  0x00007f75704ab327: mov    %r10,0x28(%rsp)
  0x00007f75704ab32c: mov    %r11,0x20(%rsp)
  0x00007f75704ab331: mov    %r12,0x18(%rsp)
  0x00007f75704ab336: mov    %r13,0x10(%rsp)
  0x00007f75704ab33b: mov    %r14,0x8(%rsp)
  0x00007f75704ab340: mov    %r15,(%rsp)
  0x00007f75704ab344: movabs $0x7f758593d278,%rdi
  0x00007f75704ab34e: movabs $0x7f75704ab2ee,%rsi
  0x00007f75704ab358: mov    %rsp,%rdx
  0x00007f75704ab35b: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab35f: callq  0x00007f75853729fa
  0x00007f75704ab364: hlt    
  0x00007f75704ab365: lea    (%rdi,%rdx,4),%rdi
  0x00007f75704ab369: lea    (%rsi,%rdx,4),%r13
  0x00007f75704ab36d: mov    %rdx,%r14
  0x00007f75704ab370: neg    %rdx
  0x00007f75704ab373: jne    Stub::checkcast_arraycopy+742 0x0x7f75704ab426
  0x00007f75704ab379: xor    %rax,%rax
  0x00007f75704ab37c: jmpq   Stub::checkcast_arraycopy+1035 0x0x7f75704ab54b
  0x00007f75704ab381: nop
  0x00007f75704ab382: nop
  0x00007f75704ab383: nop
  0x00007f75704ab384: nop
  0x00007f75704ab385: nop
  0x00007f75704ab386: nop
  0x00007f75704ab387: nop
  0x00007f75704ab388: nop
  0x00007f75704ab389: nop
  0x00007f75704ab38a: nop
  0x00007f75704ab38b: nop
  0x00007f75704ab38c: nop
  0x00007f75704ab38d: nop
  0x00007f75704ab38e: nop
  0x00007f75704ab38f: nop
  ;; L_store_element:
  0x00007f75704ab390: push   %r10
  0x00007f75704ab392: cmp    0x15a99e47(%rip),%r12        # 0x00007f7585f451e0
  0x00007f75704ab399: je     Stub::checkcast_arraycopy+726 0x0x7f75704ab416
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007f75704ab39f: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab3a4: sub    $0x80,%rsp
  0x00007f75704ab3ab: mov    %rax,0x78(%rsp)
  0x00007f75704ab3b0: mov    %rcx,0x70(%rsp)
  0x00007f75704ab3b5: mov    %rdx,0x68(%rsp)
  0x00007f75704ab3ba: mov    %rbx,0x60(%rsp)
  0x00007f75704ab3bf: mov    %rbp,0x50(%rsp)
  0x00007f75704ab3c4: mov    %rsi,0x48(%rsp)
  0x00007f75704ab3c9: mov    %rdi,0x40(%rsp)
  0x00007f75704ab3ce: mov    %r8,0x38(%rsp)
  0x00007f75704ab3d3: mov    %r9,0x30(%rsp)
  0x00007f75704ab3d8: mov    %r10,0x28(%rsp)
  0x00007f75704ab3dd: mov    %r11,0x20(%rsp)
  0x00007f75704ab3e2: mov    %r12,0x18(%rsp)
  0x00007f75704ab3e7: mov    %r13,0x10(%rsp)
  0x00007f75704ab3ec: mov    %r14,0x8(%rsp)
  0x00007f75704ab3f1: mov    %r15,(%rsp)
  0x00007f75704ab3f5: movabs $0x7f75858888e0,%rdi
  0x00007f75704ab3ff: movabs $0x7f75704ab39f,%rsi
  0x00007f75704ab409: mov    %rsp,%rdx
  0x00007f75704ab40c: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab410: callq  0x00007f75853729fa
  0x00007f75704ab415: hlt    
  0x00007f75704ab416: pop    %r10
  0x00007f75704ab418: mov    %eax,0x0(%r13,%rdx,4)
  0x00007f75704ab41d: inc    %rdx
  0x00007f75704ab420: je     Stub::checkcast_arraycopy+990 0x0x7f75704ab51e
  ;; L_load_element:
  0x00007f75704ab426: mov    (%rdi,%rdx,4),%eax
  0x00007f75704ab429: push   %r10
  0x00007f75704ab42b: cmp    0x15a99dae(%rip),%r12        # 0x00007f7585f451e0
  0x00007f75704ab432: je     Stub::checkcast_arraycopy+879 0x0x7f75704ab4af
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f75704ab438: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab43d: sub    $0x80,%rsp
  0x00007f75704ab444: mov    %rax,0x78(%rsp)
  0x00007f75704ab449: mov    %rcx,0x70(%rsp)
  0x00007f75704ab44e: mov    %rdx,0x68(%rsp)
  0x00007f75704ab453: mov    %rbx,0x60(%rsp)
  0x00007f75704ab458: mov    %rbp,0x50(%rsp)
  0x00007f75704ab45d: mov    %rsi,0x48(%rsp)
  0x00007f75704ab462: mov    %rdi,0x40(%rsp)
  0x00007f75704ab467: mov    %r8,0x38(%rsp)
  0x00007f75704ab46c: mov    %r9,0x30(%rsp)
  0x00007f75704ab471: mov    %r10,0x28(%rsp)
  0x00007f75704ab476: mov    %r11,0x20(%rsp)
  0x00007f75704ab47b: mov    %r12,0x18(%rsp)
  0x00007f75704ab480: mov    %r13,0x10(%rsp)
  0x00007f75704ab485: mov    %r14,0x8(%rsp)
  0x00007f75704ab48a: mov    %r15,(%rsp)
  0x00007f75704ab48e: movabs $0x7f7585888ac8,%rdi
  0x00007f75704ab498: movabs $0x7f75704ab438,%rsi
  0x00007f75704ab4a2: mov    %rsp,%rdx
  0x00007f75704ab4a5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab4a9: callq  0x00007f75853729fa
  0x00007f75704ab4ae: hlt    
  0x00007f75704ab4af: pop    %r10
  0x00007f75704ab4b1: test   %rax,%rax
  0x00007f75704ab4b4: je     Stub::checkcast_arraycopy+592 0x0x7f75704ab390
  0x00007f75704ab4ba: mov    0x8(%rax),%r11d
  0x00007f75704ab4be: shl    $0x3,%r11
  ;; type_check:
  0x00007f75704ab4c2: cmp    %r8,%r11
  0x00007f75704ab4c5: je     Stub::checkcast_arraycopy+592 0x0x7f75704ab390
  0x00007f75704ab4cb: cmp    (%r11,%rcx,1),%r8
  0x00007f75704ab4cf: je     Stub::checkcast_arraycopy+592 0x0x7f75704ab390
  0x00007f75704ab4d5: cmp    $0x20,%ecx
  0x00007f75704ab4d8: jne    Stub::checkcast_arraycopy+974 0x0x7f75704ab50e
  0x00007f75704ab4de: push   %rax
  0x00007f75704ab4df: mov    %r8,%rax
  0x00007f75704ab4e2: push   %rcx
  0x00007f75704ab4e3: push   %rdi
  0x00007f75704ab4e4: movabs $0x7f7585f24470,%rcx
  0x00007f75704ab4ee: incl   (%rcx)
  0x00007f75704ab4f0: mov    0x28(%r11),%rdi
  0x00007f75704ab4f4: mov    (%rdi),%ecx
  0x00007f75704ab4f6: add    $0x8,%rdi
  0x00007f75704ab4fa: test   %rax,%rax
  0x00007f75704ab4fd: repnz scas %es:(%rdi),%rax
  0x00007f75704ab500: pop    %rdi
  0x00007f75704ab501: pop    %rcx
  0x00007f75704ab502: pop    %rax
  0x00007f75704ab503: jne    Stub::checkcast_arraycopy+974 0x0x7f75704ab50e
  0x00007f75704ab505: mov    %r8,0x20(%r11)
  0x00007f75704ab509: jmpq   Stub::checkcast_arraycopy+592 0x0x7f75704ab390
  ;; L_miss:
  0x00007f75704ab50e: add    %rdx,%r14
  0x00007f75704ab511: mov    %r14,%rax
  0x00007f75704ab514: not    %rax
  0x00007f75704ab517: jne    Stub::checkcast_arraycopy+993 0x0x7f75704ab521
  0x00007f75704ab519: jmpq   Stub::checkcast_arraycopy+1035 0x0x7f75704ab54b
  ;; L_do_card_marks:
  0x00007f75704ab51e: xor    %rax,%rax
  ;; L_post_barrier:
  0x00007f75704ab521: lea    (%rsi,%r14,4),%r14
  0x00007f75704ab525: sub    $0x4,%r14
  0x00007f75704ab529: shr    $0x9,%rsi
  0x00007f75704ab52d: shr    $0x9,%r14
  0x00007f75704ab531: sub    %rsi,%r14
  0x00007f75704ab534: movabs $0x7f756f386000,%r10
  0x00007f75704ab53e: add    %r10,%rsi
  ;; L_loop:
  0x00007f75704ab541: movb   $0x0,(%rsi,%r14,1)
  0x00007f75704ab546: dec    %r14
  0x00007f75704ab549: jge    Stub::checkcast_arraycopy+1025 0x0x7f75704ab541
  ;; L_done:
  0x00007f75704ab54b: mov    (%rsp),%r13
  0x00007f75704ab54f: mov    0x8(%rsp),%r14
  ;; inc_counter SharedRuntime::_checkcast_array_copy_ctr
  0x00007f75704ab554: incl   0x15a78f2e(%rip)        # 0x00007f7585f24488
  0x00007f75704ab55a: leaveq 
  0x00007f75704ab55b: retq   

StubRoutines::checkcast_arraycopy_uninit [0x00007f75704ab560, 0x00007f75704ab97c[ (1052 bytes)
  0x00007f75704ab560: push   %rbp
  0x00007f75704ab561: mov    %rsp,%rbp
  0x00007f75704ab564: cmp    %rdi,%rsi
  0x00007f75704ab567: lea    (%rdi,%rdx,4),%rax
  0x00007f75704ab56b: jbe    Stub::checkcast_arraycopy_uninit+145 0x0x7f75704ab5f1
  0x00007f75704ab571: cmp    %rax,%rsi
  0x00007f75704ab574: jae    Stub::checkcast_arraycopy_uninit+145 0x0x7f75704ab5f1
  0x00007f75704ab57a: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab57f: sub    $0x80,%rsp
  0x00007f75704ab586: mov    %rax,0x78(%rsp)
  0x00007f75704ab58b: mov    %rcx,0x70(%rsp)
  0x00007f75704ab590: mov    %rdx,0x68(%rsp)
  0x00007f75704ab595: mov    %rbx,0x60(%rsp)
  0x00007f75704ab59a: mov    %rbp,0x50(%rsp)
  0x00007f75704ab59f: mov    %rsi,0x48(%rsp)
  0x00007f75704ab5a4: mov    %rdi,0x40(%rsp)
  0x00007f75704ab5a9: mov    %r8,0x38(%rsp)
  0x00007f75704ab5ae: mov    %r9,0x30(%rsp)
  0x00007f75704ab5b3: mov    %r10,0x28(%rsp)
  0x00007f75704ab5b8: mov    %r11,0x20(%rsp)
  0x00007f75704ab5bd: mov    %r12,0x18(%rsp)
  0x00007f75704ab5c2: mov    %r13,0x10(%rsp)
  0x00007f75704ab5c7: mov    %r14,0x8(%rsp)
  0x00007f75704ab5cc: mov    %r15,(%rsp)
  0x00007f75704ab5d0: movabs $0x7f758593d230,%rdi
  0x00007f75704ab5da: movabs $0x7f75704ab57a,%rsi
  0x00007f75704ab5e4: mov    %rsp,%rdx
  0x00007f75704ab5e7: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab5eb: callq  0x00007f75853729fa
  0x00007f75704ab5f0: hlt    
  0x00007f75704ab5f1: sub    $0x10,%rsp
  0x00007f75704ab5f5: mov    %r13,(%rsp)
  0x00007f75704ab5f9: mov    %r14,0x8(%rsp)
  0x00007f75704ab5fe: movslq %edx,%rax
  0x00007f75704ab601: cmp    %rdx,%rax
  0x00007f75704ab604: je     Stub::checkcast_arraycopy_uninit+289 0x0x7f75704ab681
  0x00007f75704ab60a: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab60f: sub    $0x80,%rsp
  0x00007f75704ab616: mov    %rax,0x78(%rsp)
  0x00007f75704ab61b: mov    %rcx,0x70(%rsp)
  0x00007f75704ab620: mov    %rdx,0x68(%rsp)
  0x00007f75704ab625: mov    %rbx,0x60(%rsp)
  0x00007f75704ab62a: mov    %rbp,0x50(%rsp)
  0x00007f75704ab62f: mov    %rsi,0x48(%rsp)
  0x00007f75704ab634: mov    %rdi,0x40(%rsp)
  0x00007f75704ab639: mov    %r8,0x38(%rsp)
  0x00007f75704ab63e: mov    %r9,0x30(%rsp)
  0x00007f75704ab643: mov    %r10,0x28(%rsp)
  0x00007f75704ab648: mov    %r11,0x20(%rsp)
  0x00007f75704ab64d: mov    %r12,0x18(%rsp)
  0x00007f75704ab652: mov    %r13,0x10(%rsp)
  0x00007f75704ab657: mov    %r14,0x8(%rsp)
  0x00007f75704ab65c: mov    %r15,(%rsp)
  0x00007f75704ab660: movabs $0x7f758593cf78,%rdi
  0x00007f75704ab66a: movabs $0x7f75704ab60a,%rsi
  0x00007f75704ab674: mov    %rsp,%rdx
  0x00007f75704ab677: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab67b: callq  0x00007f75853729fa
  0x00007f75704ab680: hlt    
  0x00007f75704ab681: movslq %ecx,%rax
  0x00007f75704ab684: cmp    %rcx,%rax
  0x00007f75704ab687: je     Stub::checkcast_arraycopy_uninit+420 0x0x7f75704ab704
  0x00007f75704ab68d: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab692: sub    $0x80,%rsp
  0x00007f75704ab699: mov    %rax,0x78(%rsp)
  0x00007f75704ab69e: mov    %rcx,0x70(%rsp)
  0x00007f75704ab6a3: mov    %rdx,0x68(%rsp)
  0x00007f75704ab6a8: mov    %rbx,0x60(%rsp)
  0x00007f75704ab6ad: mov    %rbp,0x50(%rsp)
  0x00007f75704ab6b2: mov    %rsi,0x48(%rsp)
  0x00007f75704ab6b7: mov    %rdi,0x40(%rsp)
  0x00007f75704ab6bc: mov    %r8,0x38(%rsp)
  0x00007f75704ab6c1: mov    %r9,0x30(%rsp)
  0x00007f75704ab6c6: mov    %r10,0x28(%rsp)
  0x00007f75704ab6cb: mov    %r11,0x20(%rsp)
  0x00007f75704ab6d0: mov    %r12,0x18(%rsp)
  0x00007f75704ab6d5: mov    %r13,0x10(%rsp)
  0x00007f75704ab6da: mov    %r14,0x8(%rsp)
  0x00007f75704ab6df: mov    %r15,(%rsp)
  0x00007f75704ab6e3: movabs $0x7f758593cf78,%rdi
  0x00007f75704ab6ed: movabs $0x7f75704ab68d,%rsi
  0x00007f75704ab6f7: mov    %rsp,%rdx
  0x00007f75704ab6fa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab6fe: callq  0x00007f75853729fa
  0x00007f75704ab703: hlt    
  ;; assert consistent ckoff/ckval
  0x00007f75704ab704: cmp    0x10(%r8),%ecx
  0x00007f75704ab708: je     Stub::checkcast_arraycopy_uninit+549 0x0x7f75704ab785
  0x00007f75704ab70e: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab713: sub    $0x80,%rsp
  0x00007f75704ab71a: mov    %rax,0x78(%rsp)
  0x00007f75704ab71f: mov    %rcx,0x70(%rsp)
  0x00007f75704ab724: mov    %rdx,0x68(%rsp)
  0x00007f75704ab729: mov    %rbx,0x60(%rsp)
  0x00007f75704ab72e: mov    %rbp,0x50(%rsp)
  0x00007f75704ab733: mov    %rsi,0x48(%rsp)
  0x00007f75704ab738: mov    %rdi,0x40(%rsp)
  0x00007f75704ab73d: mov    %r8,0x38(%rsp)
  0x00007f75704ab742: mov    %r9,0x30(%rsp)
  0x00007f75704ab747: mov    %r10,0x28(%rsp)
  0x00007f75704ab74c: mov    %r11,0x20(%rsp)
  0x00007f75704ab751: mov    %r12,0x18(%rsp)
  0x00007f75704ab756: mov    %r13,0x10(%rsp)
  0x00007f75704ab75b: mov    %r14,0x8(%rsp)
  0x00007f75704ab760: mov    %r15,(%rsp)
  0x00007f75704ab764: movabs $0x7f758593d278,%rdi
  0x00007f75704ab76e: movabs $0x7f75704ab70e,%rsi
  0x00007f75704ab778: mov    %rsp,%rdx
  0x00007f75704ab77b: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab77f: callq  0x00007f75853729fa
  0x00007f75704ab784: hlt    
  0x00007f75704ab785: lea    (%rdi,%rdx,4),%rdi
  0x00007f75704ab789: lea    (%rsi,%rdx,4),%r13
  0x00007f75704ab78d: mov    %rdx,%r14
  0x00007f75704ab790: neg    %rdx
  0x00007f75704ab793: jne    Stub::checkcast_arraycopy_uninit+742 0x0x7f75704ab846
  0x00007f75704ab799: xor    %rax,%rax
  0x00007f75704ab79c: jmpq   Stub::checkcast_arraycopy_uninit+1035 0x0x7f75704ab96b
  0x00007f75704ab7a1: nop
  0x00007f75704ab7a2: nop
  0x00007f75704ab7a3: nop
  0x00007f75704ab7a4: nop
  0x00007f75704ab7a5: nop
  0x00007f75704ab7a6: nop
  0x00007f75704ab7a7: nop
  0x00007f75704ab7a8: nop
  0x00007f75704ab7a9: nop
  0x00007f75704ab7aa: nop
  0x00007f75704ab7ab: nop
  0x00007f75704ab7ac: nop
  0x00007f75704ab7ad: nop
  0x00007f75704ab7ae: nop
  0x00007f75704ab7af: nop
  ;; L_store_element:
  0x00007f75704ab7b0: push   %r10
  0x00007f75704ab7b2: cmp    0x15a99a27(%rip),%r12        # 0x00007f7585f451e0
  0x00007f75704ab7b9: je     Stub::checkcast_arraycopy_uninit+726 0x0x7f75704ab836
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007f75704ab7bf: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab7c4: sub    $0x80,%rsp
  0x00007f75704ab7cb: mov    %rax,0x78(%rsp)
  0x00007f75704ab7d0: mov    %rcx,0x70(%rsp)
  0x00007f75704ab7d5: mov    %rdx,0x68(%rsp)
  0x00007f75704ab7da: mov    %rbx,0x60(%rsp)
  0x00007f75704ab7df: mov    %rbp,0x50(%rsp)
  0x00007f75704ab7e4: mov    %rsi,0x48(%rsp)
  0x00007f75704ab7e9: mov    %rdi,0x40(%rsp)
  0x00007f75704ab7ee: mov    %r8,0x38(%rsp)
  0x00007f75704ab7f3: mov    %r9,0x30(%rsp)
  0x00007f75704ab7f8: mov    %r10,0x28(%rsp)
  0x00007f75704ab7fd: mov    %r11,0x20(%rsp)
  0x00007f75704ab802: mov    %r12,0x18(%rsp)
  0x00007f75704ab807: mov    %r13,0x10(%rsp)
  0x00007f75704ab80c: mov    %r14,0x8(%rsp)
  0x00007f75704ab811: mov    %r15,(%rsp)
  0x00007f75704ab815: movabs $0x7f75858888e0,%rdi
  0x00007f75704ab81f: movabs $0x7f75704ab7bf,%rsi
  0x00007f75704ab829: mov    %rsp,%rdx
  0x00007f75704ab82c: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab830: callq  0x00007f75853729fa
  0x00007f75704ab835: hlt    
  0x00007f75704ab836: pop    %r10
  0x00007f75704ab838: mov    %eax,0x0(%r13,%rdx,4)
  0x00007f75704ab83d: inc    %rdx
  0x00007f75704ab840: je     Stub::checkcast_arraycopy_uninit+990 0x0x7f75704ab93e
  ;; L_load_element:
  0x00007f75704ab846: mov    (%rdi,%rdx,4),%eax
  0x00007f75704ab849: push   %r10
  0x00007f75704ab84b: cmp    0x15a9998e(%rip),%r12        # 0x00007f7585f451e0
  0x00007f75704ab852: je     Stub::checkcast_arraycopy_uninit+879 0x0x7f75704ab8cf
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f75704ab858: mov    %rsp,-0x28(%rsp)
  0x00007f75704ab85d: sub    $0x80,%rsp
  0x00007f75704ab864: mov    %rax,0x78(%rsp)
  0x00007f75704ab869: mov    %rcx,0x70(%rsp)
  0x00007f75704ab86e: mov    %rdx,0x68(%rsp)
  0x00007f75704ab873: mov    %rbx,0x60(%rsp)
  0x00007f75704ab878: mov    %rbp,0x50(%rsp)
  0x00007f75704ab87d: mov    %rsi,0x48(%rsp)
  0x00007f75704ab882: mov    %rdi,0x40(%rsp)
  0x00007f75704ab887: mov    %r8,0x38(%rsp)
  0x00007f75704ab88c: mov    %r9,0x30(%rsp)
  0x00007f75704ab891: mov    %r10,0x28(%rsp)
  0x00007f75704ab896: mov    %r11,0x20(%rsp)
  0x00007f75704ab89b: mov    %r12,0x18(%rsp)
  0x00007f75704ab8a0: mov    %r13,0x10(%rsp)
  0x00007f75704ab8a5: mov    %r14,0x8(%rsp)
  0x00007f75704ab8aa: mov    %r15,(%rsp)
  0x00007f75704ab8ae: movabs $0x7f7585888ac8,%rdi
  0x00007f75704ab8b8: movabs $0x7f75704ab858,%rsi
  0x00007f75704ab8c2: mov    %rsp,%rdx
  0x00007f75704ab8c5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ab8c9: callq  0x00007f75853729fa
  0x00007f75704ab8ce: hlt    
  0x00007f75704ab8cf: pop    %r10
  0x00007f75704ab8d1: test   %rax,%rax
  0x00007f75704ab8d4: je     Stub::checkcast_arraycopy_uninit+592 0x0x7f75704ab7b0
  0x00007f75704ab8da: mov    0x8(%rax),%r11d
  0x00007f75704ab8de: shl    $0x3,%r11
  ;; type_check:
  0x00007f75704ab8e2: cmp    %r8,%r11
  0x00007f75704ab8e5: je     Stub::checkcast_arraycopy_uninit+592 0x0x7f75704ab7b0
  0x00007f75704ab8eb: cmp    (%r11,%rcx,1),%r8
  0x00007f75704ab8ef: je     Stub::checkcast_arraycopy_uninit+592 0x0x7f75704ab7b0
  0x00007f75704ab8f5: cmp    $0x20,%ecx
  0x00007f75704ab8f8: jne    Stub::checkcast_arraycopy_uninit+974 0x0x7f75704ab92e
  0x00007f75704ab8fe: push   %rax
  0x00007f75704ab8ff: mov    %r8,%rax
  0x00007f75704ab902: push   %rcx
  0x00007f75704ab903: push   %rdi
  0x00007f75704ab904: movabs $0x7f7585f24470,%rcx
  0x00007f75704ab90e: incl   (%rcx)
  0x00007f75704ab910: mov    0x28(%r11),%rdi
  0x00007f75704ab914: mov    (%rdi),%ecx
  0x00007f75704ab916: add    $0x8,%rdi
  0x00007f75704ab91a: test   %rax,%rax
  0x00007f75704ab91d: repnz scas %es:(%rdi),%rax
  0x00007f75704ab920: pop    %rdi
  0x00007f75704ab921: pop    %rcx
  0x00007f75704ab922: pop    %rax
  0x00007f75704ab923: jne    Stub::checkcast_arraycopy_uninit+974 0x0x7f75704ab92e
  0x00007f75704ab925: mov    %r8,0x20(%r11)
  0x00007f75704ab929: jmpq   Stub::checkcast_arraycopy_uninit+592 0x0x7f75704ab7b0
  ;; L_miss:
  0x00007f75704ab92e: add    %rdx,%r14
  0x00007f75704ab931: mov    %r14,%rax
  0x00007f75704ab934: not    %rax
  0x00007f75704ab937: jne    Stub::checkcast_arraycopy_uninit+993 0x0x7f75704ab941
  0x00007f75704ab939: jmpq   Stub::checkcast_arraycopy_uninit+1035 0x0x7f75704ab96b
  ;; L_do_card_marks:
  0x00007f75704ab93e: xor    %rax,%rax
  ;; L_post_barrier:
  0x00007f75704ab941: lea    (%rsi,%r14,4),%r14
  0x00007f75704ab945: sub    $0x4,%r14
  0x00007f75704ab949: shr    $0x9,%rsi
  0x00007f75704ab94d: shr    $0x9,%r14
  0x00007f75704ab951: sub    %rsi,%r14
  0x00007f75704ab954: movabs $0x7f756f386000,%r10
  0x00007f75704ab95e: add    %r10,%rsi
  ;; L_loop:
  0x00007f75704ab961: movb   $0x0,(%rsi,%r14,1)
  0x00007f75704ab966: dec    %r14
  0x00007f75704ab969: jge    Stub::checkcast_arraycopy_uninit+1025 0x0x7f75704ab961
  ;; L_done:
  0x00007f75704ab96b: mov    (%rsp),%r13
  0x00007f75704ab96f: mov    0x8(%rsp),%r14
  ;; inc_counter SharedRuntime::_checkcast_array_copy_ctr
  0x00007f75704ab974: incl   0x15a78b0e(%rip)        # 0x00007f7585f24488
  0x00007f75704ab97a: leaveq 
  0x00007f75704ab97b: retq   

StubRoutines::unsafe_arraycopy [0x00007f75704ab980, 0x00007f75704ab9c1[ (65 bytes)
  0x00007f75704ab980: push   %rbp
  0x00007f75704ab981: mov    %rsp,%rbp
  ;; inc_counter SharedRuntime::_unsafe_array_copy_ctr
  0x00007f75704ab984: incl   0x15a78b02(%rip)        # 0x00007f7585f2448c
  0x00007f75704ab98a: mov    %rdi,%rax
  0x00007f75704ab98d: or     %rsi,%rax
  0x00007f75704ab990: or     %rdx,%rax
  0x00007f75704ab993: test   $0x7,%al
  0x00007f75704ab996: je     Stub::unsafe_arraycopy+56 0x0x7f75704ab9b8
  0x00007f75704ab998: test   $0x3,%al
  0x00007f75704ab99b: je     Stub::unsafe_arraycopy+47 0x0x7f75704ab9af
  0x00007f75704ab99d: test   $0x1,%al
  0x00007f75704ab9a0: jne    Stub::jbyte_arraycopy+135 0x0x7f75704a9d67
  ;; L_short_aligned:
  0x00007f75704ab9a6: shr    $0x1,%rdx
  0x00007f75704ab9aa: jmpq   Stub::jshort_arraycopy+135 0x0x7f75704aa0e7
  ;; L_int_aligned:
  0x00007f75704ab9af: shr    $0x2,%rdx
  0x00007f75704ab9b3: jmpq   Stub::jint_arraycopy+135 0x0x7f75704aa427
  ;; L_long_aligned:
  0x00007f75704ab9b8: shr    $0x3,%rdx
  0x00007f75704ab9bc: jmpq   Stub::jlong_arraycopy+135 0x0x7f75704aa7e7

StubRoutines::generic_arraycopy [0x00007f75704ab9db, 0x00007f75704abed7[ (1276 bytes)
  ;; L_failed_0:
  0x00007f75704ab9db: jmpq   Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704ab9e0: push   %rbp
  0x00007f75704ab9e1: mov    %rsp,%rbp
  ;; inc_counter SharedRuntime::_generic_array_copy_ctr
  0x00007f75704ab9e4: incl   0x15a78aa6(%rip)        # 0x00007f7585f24490
  0x00007f75704ab9ea: test   %rdi,%rdi
  0x00007f75704ab9ed: je     Stub::generic_arraycopy
  0x00007f75704ab9ef: test   %esi,%esi
  0x00007f75704ab9f1: js     Stub::generic_arraycopy
  0x00007f75704ab9f3: test   %rdx,%rdx
  0x00007f75704ab9f6: je     Stub::generic_arraycopy
  0x00007f75704ab9f8: test   %ecx,%ecx
  0x00007f75704ab9fa: js     Stub::generic_arraycopy
  0x00007f75704ab9fc: mov    %r8d,%r11d
  0x00007f75704ab9ff: test   %r11d,%r11d
  0x00007f75704aba02: js     Stub::generic_arraycopy
  0x00007f75704aba04: mov    0x8(%rdi),%r10d
  0x00007f75704aba08: shl    $0x3,%r10
  ;; assert klasses not null {
  0x00007f75704aba0c: test   %r10,%r10
  0x00007f75704aba0f: jne    Stub::generic_arraycopy+177 0x0x7f75704aba8c
  0x00007f75704aba15: mov    %rsp,-0x28(%rsp)
  0x00007f75704aba1a: sub    $0x80,%rsp
  0x00007f75704aba21: mov    %rax,0x78(%rsp)
  0x00007f75704aba26: mov    %rcx,0x70(%rsp)
  0x00007f75704aba2b: mov    %rdx,0x68(%rsp)
  0x00007f75704aba30: mov    %rbx,0x60(%rsp)
  0x00007f75704aba35: mov    %rbp,0x50(%rsp)
  0x00007f75704aba3a: mov    %rsi,0x48(%rsp)
  0x00007f75704aba3f: mov    %rdi,0x40(%rsp)
  0x00007f75704aba44: mov    %r8,0x38(%rsp)
  0x00007f75704aba49: mov    %r9,0x30(%rsp)
  0x00007f75704aba4e: mov    %r10,0x28(%rsp)
  0x00007f75704aba53: mov    %r11,0x20(%rsp)
  0x00007f75704aba58: mov    %r12,0x18(%rsp)
  0x00007f75704aba5d: mov    %r13,0x10(%rsp)
  0x00007f75704aba62: mov    %r14,0x8(%rsp)
  0x00007f75704aba67: mov    %r15,(%rsp)
  0x00007f75704aba6b: movabs $0x7f758593d4d9,%rdi
  0x00007f75704aba75: movabs $0x7f75704aba15,%rsi
  0x00007f75704aba7f: mov    %rsp,%rdx
  0x00007f75704aba82: and    $0xfffffffffffffff0,%rsp
  0x00007f75704aba86: callq  0x00007f75853729fa
  0x00007f75704aba8b: hlt    
  0x00007f75704aba8c: mov    0x8(%rdx),%eax
  0x00007f75704aba8f: shl    $0x3,%rax
  0x00007f75704aba93: cmp    $0x0,%rax
  0x00007f75704aba97: je     Stub::generic_arraycopy+58 0x0x7f75704aba15
  ;; } assert klasses not null done
  0x00007f75704aba9d: cmpl   $0x80100c02,0xc(%r10)
  0x00007f75704abaa5: je     Stub::generic_arraycopy+636 0x0x7f75704abc57
  0x00007f75704abaab: mov    0x8(%rdx),%eax
  0x00007f75704abaae: shl    $0x3,%rax
  0x00007f75704abab2: cmp    %rax,%r10
  0x00007f75704abab5: jne    Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704ababb: mov    0xc(%r10),%eax
  0x00007f75704ababf: cmp    $0x0,%eax
  0x00007f75704abac2: jge    Stub::generic_arraycopy+1268 0x0x7f75704abecf
  ;; assert primitive array {
  0x00007f75704abac8: cmp    $0xc0000000,%eax
  0x00007f75704abace: jge    Stub::generic_arraycopy+368 0x0x7f75704abb4b
  0x00007f75704abad4: mov    %rsp,-0x28(%rsp)
  0x00007f75704abad9: sub    $0x80,%rsp
  0x00007f75704abae0: mov    %rax,0x78(%rsp)
  0x00007f75704abae5: mov    %rcx,0x70(%rsp)
  0x00007f75704abaea: mov    %rdx,0x68(%rsp)
  0x00007f75704abaef: mov    %rbx,0x60(%rsp)
  0x00007f75704abaf4: mov    %rbp,0x50(%rsp)
  0x00007f75704abaf9: mov    %rsi,0x48(%rsp)
  0x00007f75704abafe: mov    %rdi,0x40(%rsp)
  0x00007f75704abb03: mov    %r8,0x38(%rsp)
  0x00007f75704abb08: mov    %r9,0x30(%rsp)
  0x00007f75704abb0d: mov    %r10,0x28(%rsp)
  0x00007f75704abb12: mov    %r11,0x20(%rsp)
  0x00007f75704abb17: mov    %r12,0x18(%rsp)
  0x00007f75704abb1c: mov    %r13,0x10(%rsp)
  0x00007f75704abb21: mov    %r14,0x8(%rsp)
  0x00007f75704abb26: mov    %r15,(%rsp)
  0x00007f75704abb2a: movabs $0x7f758593d528,%rdi
  0x00007f75704abb34: movabs $0x7f75704abad4,%rsi
  0x00007f75704abb3e: mov    %rsp,%rdx
  0x00007f75704abb41: and    $0xfffffffffffffff0,%rsp
  0x00007f75704abb45: callq  0x00007f75853729fa
  0x00007f75704abb4a: hlt    
  ;; } assert primitive array done
  ;; arraycopy_range_checks:
  0x00007f75704abb4b: mov    %r11d,%r10d
  0x00007f75704abb4e: add    %esi,%r10d
  0x00007f75704abb51: cmp    0xc(%rdi),%r10d
  0x00007f75704abb55: ja     Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704abb5b: mov    %r11d,%r10d
  0x00007f75704abb5e: add    %ecx,%r10d
  0x00007f75704abb61: cmp    0xc(%rdx),%r10d
  0x00007f75704abb65: ja     Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704abb6b: movslq %esi,%rsi
  0x00007f75704abb6e: movslq %ecx,%rcx
  ;; arraycopy_range_checks done
  0x00007f75704abb71: mov    %eax,%r10d
  0x00007f75704abb74: shr    $0x10,%r10d
  0x00007f75704abb78: and    $0xff,%r10
  0x00007f75704abb7f: add    %r10,%rdi
  0x00007f75704abb82: add    %r10,%rdx
  ;; choose copy loop based on element size
  0x00007f75704abb85: and    $0x3f,%eax
  ;; L_copy_bytes:
  0x00007f75704abb88: cmp    $0x0,%eax
  0x00007f75704abb8b: jne    Stub::generic_arraycopy+450 0x0x7f75704abb9d
  0x00007f75704abb8d: lea    (%rdi,%rsi,1),%rdi
  0x00007f75704abb91: lea    (%rdx,%rcx,1),%rsi
  0x00007f75704abb95: movslq %r11d,%rdx
  0x00007f75704abb98: jmpq   Stub::jbyte_arraycopy+135 0x0x7f75704a9d67
  ;; L_copy_shorts:
  0x00007f75704abb9d: cmp    $0x1,%eax
  0x00007f75704abba0: jne    Stub::generic_arraycopy+471 0x0x7f75704abbb2
  0x00007f75704abba2: lea    (%rdi,%rsi,2),%rdi
  0x00007f75704abba6: lea    (%rdx,%rcx,2),%rsi
  0x00007f75704abbaa: movslq %r11d,%rdx
  0x00007f75704abbad: jmpq   Stub::jshort_arraycopy+135 0x0x7f75704aa0e7
  ;; L_copy_ints:
  0x00007f75704abbb2: cmp    $0x2,%eax
  0x00007f75704abbb5: jne    Stub::generic_arraycopy+492 0x0x7f75704abbc7
  0x00007f75704abbb7: lea    (%rdi,%rsi,4),%rdi
  0x00007f75704abbbb: lea    (%rdx,%rcx,4),%rsi
  0x00007f75704abbbf: movslq %r11d,%rdx
  0x00007f75704abbc2: jmpq   Stub::jint_arraycopy+135 0x0x7f75704aa427
  ;; L_copy_longs:
  ;; assert long copy {
  0x00007f75704abbc7: cmp    $0x3,%eax
  0x00007f75704abbca: je     Stub::generic_arraycopy+620 0x0x7f75704abc47
  0x00007f75704abbd0: mov    %rsp,-0x28(%rsp)
  0x00007f75704abbd5: sub    $0x80,%rsp
  0x00007f75704abbdc: mov    %rax,0x78(%rsp)
  0x00007f75704abbe1: mov    %rcx,0x70(%rsp)
  0x00007f75704abbe6: mov    %rdx,0x68(%rsp)
  0x00007f75704abbeb: mov    %rbx,0x60(%rsp)
  0x00007f75704abbf0: mov    %rbp,0x50(%rsp)
  0x00007f75704abbf5: mov    %rsi,0x48(%rsp)
  0x00007f75704abbfa: mov    %rdi,0x40(%rsp)
  0x00007f75704abbff: mov    %r8,0x38(%rsp)
  0x00007f75704abc04: mov    %r9,0x30(%rsp)
  0x00007f75704abc09: mov    %r10,0x28(%rsp)
  0x00007f75704abc0e: mov    %r11,0x20(%rsp)
  0x00007f75704abc13: mov    %r12,0x18(%rsp)
  0x00007f75704abc18: mov    %r13,0x10(%rsp)
  0x00007f75704abc1d: mov    %r14,0x8(%rsp)
  0x00007f75704abc22: mov    %r15,(%rsp)
  0x00007f75704abc26: movabs $0x7f758593d5c8,%rdi
  0x00007f75704abc30: movabs $0x7f75704abbd0,%rsi
  0x00007f75704abc3a: mov    %rsp,%rdx
  0x00007f75704abc3d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704abc41: callq  0x00007f75853729fa
  0x00007f75704abc46: hlt    
  ;; } assert long copy done
  0x00007f75704abc47: lea    (%rdi,%rsi,8),%rdi
  0x00007f75704abc4b: lea    (%rdx,%rcx,8),%rsi
  0x00007f75704abc4f: movslq %r11d,%rdx
  0x00007f75704abc52: jmpq   Stub::jlong_arraycopy+135 0x0x7f75704aa7e7
  ;; L_objArray:
  0x00007f75704abc57: mov    0x8(%rdx),%eax
  0x00007f75704abc5a: shl    $0x3,%rax
  0x00007f75704abc5e: cmp    %rax,%r10
  0x00007f75704abc61: jne    Stub::generic_arraycopy+708 0x0x7f75704abc9f
  ;; arraycopy_range_checks:
  0x00007f75704abc67: mov    %r11d,%r10d
  0x00007f75704abc6a: add    %esi,%r10d
  0x00007f75704abc6d: cmp    0xc(%rdi),%r10d
  0x00007f75704abc71: ja     Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704abc77: mov    %r11d,%r10d
  0x00007f75704abc7a: add    %ecx,%r10d
  0x00007f75704abc7d: cmp    0xc(%rdx),%r10d
  0x00007f75704abc81: ja     Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704abc87: movslq %esi,%rsi
  0x00007f75704abc8a: movslq %ecx,%rcx
  ;; arraycopy_range_checks done
  0x00007f75704abc8d: lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f75704abc92: lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f75704abc97: movslq %r11d,%rdx
  ;; L_plain_copy:
  0x00007f75704abc9a: jmpq   Stub::oop_arraycopy+135 0x0x7f75704aab47
  ;; L_checkcast_copy:
  0x00007f75704abc9f: cmpl   $0x80100c02,0xc(%rax)
  0x00007f75704abca6: jne    Stub::generic_arraycopy+1268 0x0x7f75704abecf
  ;; arraycopy_range_checks:
  0x00007f75704abcac: mov    %r11d,%eax
  0x00007f75704abcaf: add    %esi,%eax
  0x00007f75704abcb1: cmp    0xc(%rdi),%eax
  0x00007f75704abcb4: ja     Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704abcba: mov    %r11d,%eax
  0x00007f75704abcbd: add    %ecx,%eax
  0x00007f75704abcbf: cmp    0xc(%rdx),%eax
  0x00007f75704abcc2: ja     Stub::generic_arraycopy+1268 0x0x7f75704abecf
  0x00007f75704abcc8: movslq %esi,%rsi
  0x00007f75704abccb: movslq %ecx,%rcx
  ;; arraycopy_range_checks done
  0x00007f75704abcce: mov    0x8(%rdx),%r11d
  0x00007f75704abcd2: shl    $0x3,%r11
  0x00007f75704abcd6: lea    0x10(%rdi,%rsi,4),%rdi
  0x00007f75704abcdb: lea    0x10(%rdx,%rcx,4),%rsi
  0x00007f75704abce0: mov    %r8d,%edx
  0x00007f75704abce3: movslq %edx,%rcx
  0x00007f75704abce6: cmp    %rdx,%rcx
  0x00007f75704abce9: je     Stub::generic_arraycopy+907 0x0x7f75704abd66
  0x00007f75704abcef: mov    %rsp,-0x28(%rsp)
  0x00007f75704abcf4: sub    $0x80,%rsp
  0x00007f75704abcfb: mov    %rax,0x78(%rsp)
  0x00007f75704abd00: mov    %rcx,0x70(%rsp)
  0x00007f75704abd05: mov    %rdx,0x68(%rsp)
  0x00007f75704abd0a: mov    %rbx,0x60(%rsp)
  0x00007f75704abd0f: mov    %rbp,0x50(%rsp)
  0x00007f75704abd14: mov    %rsi,0x48(%rsp)
  0x00007f75704abd19: mov    %rdi,0x40(%rsp)
  0x00007f75704abd1e: mov    %r8,0x38(%rsp)
  0x00007f75704abd23: mov    %r9,0x30(%rsp)
  0x00007f75704abd28: mov    %r10,0x28(%rsp)
  0x00007f75704abd2d: mov    %r11,0x20(%rsp)
  0x00007f75704abd32: mov    %r12,0x18(%rsp)
  0x00007f75704abd37: mov    %r13,0x10(%rsp)
  0x00007f75704abd3c: mov    %r14,0x8(%rsp)
  0x00007f75704abd41: mov    %r15,(%rsp)
  0x00007f75704abd45: movabs $0x7f758593cf78,%rdi
  0x00007f75704abd4f: movabs $0x7f75704abcef,%rsi
  0x00007f75704abd59: mov    %rsp,%rdx
  0x00007f75704abd5c: and    $0xfffffffffffffff0,%rsp
  0x00007f75704abd60: callq  0x00007f75853729fa
  0x00007f75704abd65: hlt    
  0x00007f75704abd66: mov    0x10(%r11),%ecx
  0x00007f75704abd6a: movslq %ecx,%rax
  0x00007f75704abd6d: cmp    %rcx,%rax
  0x00007f75704abd70: je     Stub::generic_arraycopy+1042 0x0x7f75704abded
  0x00007f75704abd76: mov    %rsp,-0x28(%rsp)
  0x00007f75704abd7b: sub    $0x80,%rsp
  0x00007f75704abd82: mov    %rax,0x78(%rsp)
  0x00007f75704abd87: mov    %rcx,0x70(%rsp)
  0x00007f75704abd8c: mov    %rdx,0x68(%rsp)
  0x00007f75704abd91: mov    %rbx,0x60(%rsp)
  0x00007f75704abd96: mov    %rbp,0x50(%rsp)
  0x00007f75704abd9b: mov    %rsi,0x48(%rsp)
  0x00007f75704abda0: mov    %rdi,0x40(%rsp)
  0x00007f75704abda5: mov    %r8,0x38(%rsp)
  0x00007f75704abdaa: mov    %r9,0x30(%rsp)
  0x00007f75704abdaf: mov    %r10,0x28(%rsp)
  0x00007f75704abdb4: mov    %r11,0x20(%rsp)
  0x00007f75704abdb9: mov    %r12,0x18(%rsp)
  0x00007f75704abdbe: mov    %r13,0x10(%rsp)
  0x00007f75704abdc3: mov    %r14,0x8(%rsp)
  0x00007f75704abdc8: mov    %r15,(%rsp)
  0x00007f75704abdcc: movabs $0x7f758593cf78,%rdi
  0x00007f75704abdd6: movabs $0x7f75704abd76,%rsi
  0x00007f75704abde0: mov    %rsp,%rdx
  0x00007f75704abde3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704abde7: callq  0x00007f75853729fa
  0x00007f75704abdec: hlt    
  ;; type_check:
  0x00007f75704abded: cmp    %r11,%r10
  0x00007f75704abdf0: je     Stub::generic_arraycopy+703 0x0x7f75704abc9a
  0x00007f75704abdf6: cmp    (%r10,%rcx,1),%r11
  0x00007f75704abdfa: je     Stub::generic_arraycopy+703 0x0x7f75704abc9a
  0x00007f75704abe00: cmp    $0x20,%ecx
  0x00007f75704abe03: jne    Stub::generic_arraycopy+1118 0x0x7f75704abe39
  0x00007f75704abe09: push   %rax
  0x00007f75704abe0a: mov    %r11,%rax
  0x00007f75704abe0d: push   %rcx
  0x00007f75704abe0e: push   %rdi
  0x00007f75704abe0f: movabs $0x7f7585f24470,%rcx
  0x00007f75704abe19: incl   (%rcx)
  0x00007f75704abe1b: mov    0x28(%r10),%rdi
  0x00007f75704abe1f: mov    (%rdi),%ecx
  0x00007f75704abe21: add    $0x8,%rdi
  0x00007f75704abe25: test   %rax,%rax
  0x00007f75704abe28: repnz scas %es:(%rdi),%rax
  0x00007f75704abe2b: pop    %rdi
  0x00007f75704abe2c: pop    %rcx
  0x00007f75704abe2d: pop    %rax
  0x00007f75704abe2e: jne    Stub::generic_arraycopy+1118 0x0x7f75704abe39
  0x00007f75704abe30: mov    %r11,0x20(%r10)
  0x00007f75704abe34: jmpq   Stub::generic_arraycopy+703 0x0x7f75704abc9a
  ;; L_miss:
  0x00007f75704abe39: mov    0xe8(%r11),%r11
  0x00007f75704abe40: mov    0x10(%r11),%ecx
  0x00007f75704abe44: movslq %ecx,%rax
  0x00007f75704abe47: cmp    %rcx,%rax
  0x00007f75704abe4a: je     Stub::generic_arraycopy+1260 0x0x7f75704abec7
  0x00007f75704abe50: mov    %rsp,-0x28(%rsp)
  0x00007f75704abe55: sub    $0x80,%rsp
  0x00007f75704abe5c: mov    %rax,0x78(%rsp)
  0x00007f75704abe61: mov    %rcx,0x70(%rsp)
  0x00007f75704abe66: mov    %rdx,0x68(%rsp)
  0x00007f75704abe6b: mov    %rbx,0x60(%rsp)
  0x00007f75704abe70: mov    %rbp,0x50(%rsp)
  0x00007f75704abe75: mov    %rsi,0x48(%rsp)
  0x00007f75704abe7a: mov    %rdi,0x40(%rsp)
  0x00007f75704abe7f: mov    %r8,0x38(%rsp)
  0x00007f75704abe84: mov    %r9,0x30(%rsp)
  0x00007f75704abe89: mov    %r10,0x28(%rsp)
  0x00007f75704abe8e: mov    %r11,0x20(%rsp)
  0x00007f75704abe93: mov    %r12,0x18(%rsp)
  0x00007f75704abe98: mov    %r13,0x10(%rsp)
  0x00007f75704abe9d: mov    %r14,0x8(%rsp)
  0x00007f75704abea2: mov    %r15,(%rsp)
  0x00007f75704abea6: movabs $0x7f758593cf78,%rdi
  0x00007f75704abeb0: movabs $0x7f75704abe50,%rsi
  0x00007f75704abeba: mov    %rsp,%rdx
  0x00007f75704abebd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704abec1: callq  0x00007f75853729fa
  0x00007f75704abec6: hlt    
  0x00007f75704abec7: mov    %r11,%r8
  0x00007f75704abeca: jmpq   Stub::checkcast_arraycopy+145 0x0x7f75704ab1d1
  ;; L_failed:
  0x00007f75704abecf: xor    %rax,%rax
  0x00007f75704abed2: not    %rax
  0x00007f75704abed5: leaveq 
  0x00007f75704abed6: retq   

StubRoutines::jbyte_fill [0x00007f75704abee0, 0x00007f75704abfaa[ (202 bytes)
  ;; Entry:
  0x00007f75704abee0: push   %rbp
  0x00007f75704abee1: mov    %rsp,%rbp
  0x00007f75704abee4: and    $0xff,%esi
  0x00007f75704abeea: mov    %esi,%eax
  0x00007f75704abeec: shl    $0x8,%eax
  0x00007f75704abeef: or     %eax,%esi
  0x00007f75704abef1: mov    %esi,%eax
  0x00007f75704abef3: shl    $0x10,%eax
  0x00007f75704abef6: or     %eax,%esi
  0x00007f75704abef8: cmp    $0x8,%edx
  0x00007f75704abefb: jb     Stub::jbyte_fill+160 0x0x7f75704abf80
  0x00007f75704abf01: test   $0x1,%rdi
  0x00007f75704abf08: je     Stub::jbyte_fill+51 0x0x7f75704abf13
  0x00007f75704abf0a: mov    %sil,(%rdi)
  0x00007f75704abf0d: inc    %rdi
  0x00007f75704abf10: dec    %rdx
  ;; L_skip_align1:
  0x00007f75704abf13: test   $0x2,%rdi
  0x00007f75704abf1a: je     Stub::jbyte_fill+70 0x0x7f75704abf26
  0x00007f75704abf1c: mov    %si,(%rdi)
  0x00007f75704abf1f: add    $0x2,%rdi
  0x00007f75704abf23: sub    $0x2,%edx
  ;; L_skip_align2:
  0x00007f75704abf26: test   $0x4,%rdi
  0x00007f75704abf2d: je     Stub::jbyte_fill+88 0x0x7f75704abf38
  0x00007f75704abf2f: mov    %esi,(%rdi)
  0x00007f75704abf31: add    $0x4,%rdi
  0x00007f75704abf35: sub    $0x4,%edx
  ;; L_fill_32_bytes:
  0x00007f75704abf38: vmovd  %esi,%xmm0
  0x00007f75704abf3c: vpshufd $0x0,%xmm0,%xmm0
  0x00007f75704abf41: sub    $0x20,%edx
  0x00007f75704abf44: jl     Stub::jbyte_fill+140 0x0x7f75704abf6c
  0x00007f75704abf4a: nop
  0x00007f75704abf4b: nop
  0x00007f75704abf4c: nop
  0x00007f75704abf4d: nop
  0x00007f75704abf4e: nop
  0x00007f75704abf4f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f75704abf50: vmovq  %xmm0,(%rdi)
  0x00007f75704abf54: vmovq  %xmm0,0x8(%rdi)
  0x00007f75704abf59: vmovq  %xmm0,0x10(%rdi)
  0x00007f75704abf5e: vmovq  %xmm0,0x18(%rdi)
  0x00007f75704abf63: add    $0x20,%rdi
  0x00007f75704abf67: sub    $0x20,%edx
  0x00007f75704abf6a: jge    Stub::jbyte_fill+112 0x0x7f75704abf50
  ;; L_check_fill_8_bytes:
  0x00007f75704abf6c: add    $0x20,%edx
  0x00007f75704abf6f: je     Stub::jbyte_fill+200 0x0x7f75704abfa8
  0x00007f75704abf71: jmp    Stub::jbyte_fill+155 0x0x7f75704abf7b
  ;; L_fill_8_bytes_loop:
  0x00007f75704abf73: vmovq  %xmm0,(%rdi)
  0x00007f75704abf77: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f75704abf7b: sub    $0x8,%edx
  0x00007f75704abf7e: jge    Stub::jbyte_fill+147 0x0x7f75704abf73
  ;; L_fill_4_bytes:
  0x00007f75704abf80: test   $0x4,%edx
  0x00007f75704abf86: je     Stub::jbyte_fill+174 0x0x7f75704abf8e
  0x00007f75704abf88: mov    %esi,(%rdi)
  0x00007f75704abf8a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f75704abf8e: test   $0x2,%edx
  0x00007f75704abf94: je     Stub::jbyte_fill+189 0x0x7f75704abf9d
  0x00007f75704abf96: mov    %si,(%rdi)
  0x00007f75704abf99: add    $0x2,%rdi
  ;; L_fill_byte:
  0x00007f75704abf9d: test   $0x1,%edx
  0x00007f75704abfa3: je     Stub::jbyte_fill+200 0x0x7f75704abfa8
  0x00007f75704abfa5: mov    %sil,(%rdi)
  ;; L_exit:
  0x00007f75704abfa8: leaveq 
  0x00007f75704abfa9: retq   

StubRoutines::jshort_fill [0x00007f75704abfc0, 0x00007f75704ac06b[ (171 bytes)
  ;; Entry:
  0x00007f75704abfc0: push   %rbp
  0x00007f75704abfc1: mov    %rsp,%rbp
  0x00007f75704abfc4: and    $0xffff,%esi
  0x00007f75704abfca: mov    %esi,%eax
  0x00007f75704abfcc: shl    $0x10,%eax
  0x00007f75704abfcf: or     %eax,%esi
  0x00007f75704abfd1: cmp    $0x4,%edx
  0x00007f75704abfd4: jb     Stub::jshort_fill+144 0x0x7f75704ac050
  0x00007f75704abfda: test   $0x2,%rdi
  0x00007f75704abfe1: je     Stub::jshort_fill+45 0x0x7f75704abfed
  0x00007f75704abfe3: mov    %si,(%rdi)
  0x00007f75704abfe6: add    $0x2,%rdi
  0x00007f75704abfea: sub    $0x1,%edx
  ;; L_skip_align2:
  0x00007f75704abfed: test   $0x4,%rdi
  0x00007f75704abff4: je     Stub::jshort_fill+63 0x0x7f75704abfff
  0x00007f75704abff6: mov    %esi,(%rdi)
  0x00007f75704abff8: add    $0x4,%rdi
  0x00007f75704abffc: sub    $0x2,%edx
  ;; L_fill_32_bytes:
  0x00007f75704abfff: vmovd  %esi,%xmm0
  0x00007f75704ac003: vpshufd $0x0,%xmm0,%xmm0
  0x00007f75704ac008: sub    $0x10,%edx
  0x00007f75704ac00b: jl     Stub::jshort_fill+124 0x0x7f75704ac03c
  0x00007f75704ac011: nop
  0x00007f75704ac012: nop
  0x00007f75704ac013: nop
  0x00007f75704ac014: nop
  0x00007f75704ac015: nop
  0x00007f75704ac016: nop
  0x00007f75704ac017: nop
  0x00007f75704ac018: nop
  0x00007f75704ac019: nop
  0x00007f75704ac01a: nop
  0x00007f75704ac01b: nop
  0x00007f75704ac01c: nop
  0x00007f75704ac01d: nop
  0x00007f75704ac01e: nop
  0x00007f75704ac01f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f75704ac020: vmovq  %xmm0,(%rdi)
  0x00007f75704ac024: vmovq  %xmm0,0x8(%rdi)
  0x00007f75704ac029: vmovq  %xmm0,0x10(%rdi)
  0x00007f75704ac02e: vmovq  %xmm0,0x18(%rdi)
  0x00007f75704ac033: add    $0x20,%rdi
  0x00007f75704ac037: sub    $0x10,%edx
  0x00007f75704ac03a: jge    Stub::jshort_fill+96 0x0x7f75704ac020
  ;; L_check_fill_8_bytes:
  0x00007f75704ac03c: add    $0x10,%edx
  0x00007f75704ac03f: je     Stub::jshort_fill+169 0x0x7f75704ac069
  0x00007f75704ac041: jmp    Stub::jshort_fill+139 0x0x7f75704ac04b
  ;; L_fill_8_bytes_loop:
  0x00007f75704ac043: vmovq  %xmm0,(%rdi)
  0x00007f75704ac047: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f75704ac04b: sub    $0x4,%edx
  0x00007f75704ac04e: jge    Stub::jshort_fill+131 0x0x7f75704ac043
  ;; L_fill_4_bytes:
  0x00007f75704ac050: test   $0x2,%edx
  0x00007f75704ac056: je     Stub::jshort_fill+158 0x0x7f75704ac05e
  0x00007f75704ac058: mov    %esi,(%rdi)
  0x00007f75704ac05a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f75704ac05e: test   $0x1,%edx
  0x00007f75704ac064: je     Stub::jshort_fill+169 0x0x7f75704ac069
  0x00007f75704ac066: mov    %si,(%rdi)
  ;; L_fill_byte:
  ;; L_exit:
  0x00007f75704ac069: leaveq 
  0x00007f75704ac06a: retq   

StubRoutines::jint_fill [0x00007f75704ac080, 0x00007f75704ac0fc[ (124 bytes)
  ;; Entry:
  0x00007f75704ac080: push   %rbp
  0x00007f75704ac081: mov    %rsp,%rbp
  0x00007f75704ac084: cmp    $0x2,%edx
  0x00007f75704ac087: jb     Stub::jint_fill+112 0x0x7f75704ac0f0
  0x00007f75704ac08d: test   $0x4,%rdi
  0x00007f75704ac094: je     Stub::jint_fill+31 0x0x7f75704ac09f
  0x00007f75704ac096: mov    %esi,(%rdi)
  0x00007f75704ac098: add    $0x4,%rdi
  0x00007f75704ac09c: sub    $0x1,%edx
  ;; L_fill_32_bytes:
  0x00007f75704ac09f: vmovd  %esi,%xmm0
  0x00007f75704ac0a3: vpshufd $0x0,%xmm0,%xmm0
  0x00007f75704ac0a8: sub    $0x8,%edx
  0x00007f75704ac0ab: jl     Stub::jint_fill+92 0x0x7f75704ac0dc
  0x00007f75704ac0b1: nop
  0x00007f75704ac0b2: nop
  0x00007f75704ac0b3: nop
  0x00007f75704ac0b4: nop
  0x00007f75704ac0b5: nop
  0x00007f75704ac0b6: nop
  0x00007f75704ac0b7: nop
  0x00007f75704ac0b8: nop
  0x00007f75704ac0b9: nop
  0x00007f75704ac0ba: nop
  0x00007f75704ac0bb: nop
  0x00007f75704ac0bc: nop
  0x00007f75704ac0bd: nop
  0x00007f75704ac0be: nop
  0x00007f75704ac0bf: nop
  ;; L_fill_32_bytes_loop:
  0x00007f75704ac0c0: vmovq  %xmm0,(%rdi)
  0x00007f75704ac0c4: vmovq  %xmm0,0x8(%rdi)
  0x00007f75704ac0c9: vmovq  %xmm0,0x10(%rdi)
  0x00007f75704ac0ce: vmovq  %xmm0,0x18(%rdi)
  0x00007f75704ac0d3: add    $0x20,%rdi
  0x00007f75704ac0d7: sub    $0x8,%edx
  0x00007f75704ac0da: jge    Stub::jint_fill+64 0x0x7f75704ac0c0
  ;; L_check_fill_8_bytes:
  0x00007f75704ac0dc: add    $0x8,%edx
  0x00007f75704ac0df: je     Stub::jint_fill+122 0x0x7f75704ac0fa
  0x00007f75704ac0e1: jmp    Stub::jint_fill+107 0x0x7f75704ac0eb
  ;; L_fill_8_bytes_loop:
  0x00007f75704ac0e3: vmovq  %xmm0,(%rdi)
  0x00007f75704ac0e7: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f75704ac0eb: sub    $0x2,%edx
  0x00007f75704ac0ee: jge    Stub::jint_fill+99 0x0x7f75704ac0e3
  ;; L_fill_4_bytes:
  0x00007f75704ac0f0: test   $0x1,%edx
  0x00007f75704ac0f6: je     Stub::jint_fill+122 0x0x7f75704ac0fa
  0x00007f75704ac0f8: mov    %esi,(%rdi)
  ;; L_fill_2_bytes:
  ;; L_exit:
  0x00007f75704ac0fa: leaveq 
  0x00007f75704ac0fb: retq   

StubRoutines::arrayof_jbyte_fill [0x00007f75704ac100, 0x00007f75704ac1aa[ (170 bytes)
  ;; Entry:
  0x00007f75704ac100: push   %rbp
  0x00007f75704ac101: mov    %rsp,%rbp
  0x00007f75704ac104: and    $0xff,%esi
  0x00007f75704ac10a: mov    %esi,%eax
  0x00007f75704ac10c: shl    $0x8,%eax
  0x00007f75704ac10f: or     %eax,%esi
  0x00007f75704ac111: mov    %esi,%eax
  0x00007f75704ac113: shl    $0x10,%eax
  0x00007f75704ac116: or     %eax,%esi
  0x00007f75704ac118: cmp    $0x8,%edx
  0x00007f75704ac11b: jb     Stub::arrayof_jbyte_fill+128 0x0x7f75704ac180
  0x00007f75704ac121: test   $0x4,%rdi
  0x00007f75704ac128: je     Stub::arrayof_jbyte_fill+51 0x0x7f75704ac133
  0x00007f75704ac12a: mov    %esi,(%rdi)
  0x00007f75704ac12c: add    $0x4,%rdi
  0x00007f75704ac130: sub    $0x4,%edx
  ;; L_fill_32_bytes:
  0x00007f75704ac133: vmovd  %esi,%xmm0
  0x00007f75704ac137: vpshufd $0x0,%xmm0,%xmm0
  0x00007f75704ac13c: sub    $0x20,%edx
  0x00007f75704ac13f: jl     Stub::arrayof_jbyte_fill+108 0x0x7f75704ac16c
  0x00007f75704ac145: nop
  0x00007f75704ac146: nop
  0x00007f75704ac147: nop
  0x00007f75704ac148: nop
  0x00007f75704ac149: nop
  0x00007f75704ac14a: nop
  0x00007f75704ac14b: nop
  0x00007f75704ac14c: nop
  0x00007f75704ac14d: nop
  0x00007f75704ac14e: nop
  0x00007f75704ac14f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f75704ac150: vmovq  %xmm0,(%rdi)
  0x00007f75704ac154: vmovq  %xmm0,0x8(%rdi)
  0x00007f75704ac159: vmovq  %xmm0,0x10(%rdi)
  0x00007f75704ac15e: vmovq  %xmm0,0x18(%rdi)
  0x00007f75704ac163: add    $0x20,%rdi
  0x00007f75704ac167: sub    $0x20,%edx
  0x00007f75704ac16a: jge    Stub::arrayof_jbyte_fill+80 0x0x7f75704ac150
  ;; L_check_fill_8_bytes:
  0x00007f75704ac16c: add    $0x20,%edx
  0x00007f75704ac16f: je     Stub::arrayof_jbyte_fill+168 0x0x7f75704ac1a8
  0x00007f75704ac171: jmp    Stub::arrayof_jbyte_fill+123 0x0x7f75704ac17b
  ;; L_fill_8_bytes_loop:
  0x00007f75704ac173: vmovq  %xmm0,(%rdi)
  0x00007f75704ac177: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f75704ac17b: sub    $0x8,%edx
  0x00007f75704ac17e: jge    Stub::arrayof_jbyte_fill+115 0x0x7f75704ac173
  ;; L_fill_4_bytes:
  0x00007f75704ac180: test   $0x4,%edx
  0x00007f75704ac186: je     Stub::arrayof_jbyte_fill+142 0x0x7f75704ac18e
  0x00007f75704ac188: mov    %esi,(%rdi)
  0x00007f75704ac18a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f75704ac18e: test   $0x2,%edx
  0x00007f75704ac194: je     Stub::arrayof_jbyte_fill+157 0x0x7f75704ac19d
  0x00007f75704ac196: mov    %si,(%rdi)
  0x00007f75704ac199: add    $0x2,%rdi
  ;; L_fill_byte:
  0x00007f75704ac19d: test   $0x1,%edx
  0x00007f75704ac1a3: je     Stub::arrayof_jbyte_fill+168 0x0x7f75704ac1a8
  0x00007f75704ac1a5: mov    %sil,(%rdi)
  ;; L_exit:
  0x00007f75704ac1a8: leaveq 
  0x00007f75704ac1a9: retq   

StubRoutines::arrayof_jshort_fill [0x00007f75704ac1c0, 0x00007f75704ac24b[ (139 bytes)
  ;; Entry:
  0x00007f75704ac1c0: push   %rbp
  0x00007f75704ac1c1: mov    %rsp,%rbp
  0x00007f75704ac1c4: and    $0xffff,%esi
  0x00007f75704ac1ca: mov    %esi,%eax
  0x00007f75704ac1cc: shl    $0x10,%eax
  0x00007f75704ac1cf: or     %eax,%esi
  0x00007f75704ac1d1: cmp    $0x4,%edx
  0x00007f75704ac1d4: jb     Stub::arrayof_jshort_fill+112 0x0x7f75704ac230
  0x00007f75704ac1da: test   $0x4,%rdi
  0x00007f75704ac1e1: je     Stub::arrayof_jshort_fill+44 0x0x7f75704ac1ec
  0x00007f75704ac1e3: mov    %esi,(%rdi)
  0x00007f75704ac1e5: add    $0x4,%rdi
  0x00007f75704ac1e9: sub    $0x2,%edx
  ;; L_fill_32_bytes:
  0x00007f75704ac1ec: vmovd  %esi,%xmm0
  0x00007f75704ac1f0: vpshufd $0x0,%xmm0,%xmm0
  0x00007f75704ac1f5: sub    $0x10,%edx
  0x00007f75704ac1f8: jl     Stub::arrayof_jshort_fill+92 0x0x7f75704ac21c
  0x00007f75704ac1fe: nop
  0x00007f75704ac1ff: nop
  ;; L_fill_32_bytes_loop:
  0x00007f75704ac200: vmovq  %xmm0,(%rdi)
  0x00007f75704ac204: vmovq  %xmm0,0x8(%rdi)
  0x00007f75704ac209: vmovq  %xmm0,0x10(%rdi)
  0x00007f75704ac20e: vmovq  %xmm0,0x18(%rdi)
  0x00007f75704ac213: add    $0x20,%rdi
  0x00007f75704ac217: sub    $0x10,%edx
  0x00007f75704ac21a: jge    Stub::arrayof_jshort_fill+64 0x0x7f75704ac200
  ;; L_check_fill_8_bytes:
  0x00007f75704ac21c: add    $0x10,%edx
  0x00007f75704ac21f: je     Stub::arrayof_jshort_fill+137 0x0x7f75704ac249
  0x00007f75704ac221: jmp    Stub::arrayof_jshort_fill+107 0x0x7f75704ac22b
  ;; L_fill_8_bytes_loop:
  0x00007f75704ac223: vmovq  %xmm0,(%rdi)
  0x00007f75704ac227: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f75704ac22b: sub    $0x4,%edx
  0x00007f75704ac22e: jge    Stub::arrayof_jshort_fill+99 0x0x7f75704ac223
  ;; L_fill_4_bytes:
  0x00007f75704ac230: test   $0x2,%edx
  0x00007f75704ac236: je     Stub::arrayof_jshort_fill+126 0x0x7f75704ac23e
  0x00007f75704ac238: mov    %esi,(%rdi)
  0x00007f75704ac23a: add    $0x4,%rdi
  ;; L_fill_2_bytes:
  0x00007f75704ac23e: test   $0x1,%edx
  0x00007f75704ac244: je     Stub::arrayof_jshort_fill+137 0x0x7f75704ac249
  0x00007f75704ac246: mov    %si,(%rdi)
  ;; L_fill_byte:
  ;; L_exit:
  0x00007f75704ac249: leaveq 
  0x00007f75704ac24a: retq   

StubRoutines::arrayof_jint_fill [0x00007f75704ac260, 0x00007f75704ac2dc[ (124 bytes)
  ;; Entry:
  0x00007f75704ac260: push   %rbp
  0x00007f75704ac261: mov    %rsp,%rbp
  0x00007f75704ac264: cmp    $0x2,%edx
  0x00007f75704ac267: jb     Stub::arrayof_jint_fill+112 0x0x7f75704ac2d0
  0x00007f75704ac26d: test   $0x4,%rdi
  0x00007f75704ac274: je     Stub::arrayof_jint_fill+31 0x0x7f75704ac27f
  0x00007f75704ac276: mov    %esi,(%rdi)
  0x00007f75704ac278: add    $0x4,%rdi
  0x00007f75704ac27c: sub    $0x1,%edx
  ;; L_fill_32_bytes:
  0x00007f75704ac27f: vmovd  %esi,%xmm0
  0x00007f75704ac283: vpshufd $0x0,%xmm0,%xmm0
  0x00007f75704ac288: sub    $0x8,%edx
  0x00007f75704ac28b: jl     Stub::arrayof_jint_fill+92 0x0x7f75704ac2bc
  0x00007f75704ac291: nop
  0x00007f75704ac292: nop
  0x00007f75704ac293: nop
  0x00007f75704ac294: nop
  0x00007f75704ac295: nop
  0x00007f75704ac296: nop
  0x00007f75704ac297: nop
  0x00007f75704ac298: nop
  0x00007f75704ac299: nop
  0x00007f75704ac29a: nop
  0x00007f75704ac29b: nop
  0x00007f75704ac29c: nop
  0x00007f75704ac29d: nop
  0x00007f75704ac29e: nop
  0x00007f75704ac29f: nop
  ;; L_fill_32_bytes_loop:
  0x00007f75704ac2a0: vmovq  %xmm0,(%rdi)
  0x00007f75704ac2a4: vmovq  %xmm0,0x8(%rdi)
  0x00007f75704ac2a9: vmovq  %xmm0,0x10(%rdi)
  0x00007f75704ac2ae: vmovq  %xmm0,0x18(%rdi)
  0x00007f75704ac2b3: add    $0x20,%rdi
  0x00007f75704ac2b7: sub    $0x8,%edx
  0x00007f75704ac2ba: jge    Stub::arrayof_jint_fill+64 0x0x7f75704ac2a0
  ;; L_check_fill_8_bytes:
  0x00007f75704ac2bc: add    $0x8,%edx
  0x00007f75704ac2bf: je     Stub::arrayof_jint_fill+122 0x0x7f75704ac2da
  0x00007f75704ac2c1: jmp    Stub::arrayof_jint_fill+107 0x0x7f75704ac2cb
  ;; L_fill_8_bytes_loop:
  0x00007f75704ac2c3: vmovq  %xmm0,(%rdi)
  0x00007f75704ac2c7: add    $0x8,%rdi
  ;; L_fill_8_bytes:
  0x00007f75704ac2cb: sub    $0x2,%edx
  0x00007f75704ac2ce: jge    Stub::arrayof_jint_fill+99 0x0x7f75704ac2c3
  ;; L_fill_4_bytes:
  0x00007f75704ac2d0: test   $0x1,%edx
  0x00007f75704ac2d6: je     Stub::arrayof_jint_fill+122 0x0x7f75704ac2da
  0x00007f75704ac2d8: mov    %esi,(%rdi)
  ;; L_fill_2_bytes:
  ;; L_exit:
  0x00007f75704ac2da: leaveq 
  0x00007f75704ac2db: retq   

StubRoutines::log [0x00007f75704ac2dc, 0x00007f75704ac2fb[ (31 bytes)
  0x00007f75704ac2dc: sub    $0x8,%rsp
  0x00007f75704ac2e0: vmovsd %xmm0,(%rsp)
  0x00007f75704ac2e5: fldl   (%rsp)
  0x00007f75704ac2e8: fldln2 
  0x00007f75704ac2ea: fxch   %st(1)
  0x00007f75704ac2ec: fyl2x  
  0x00007f75704ac2ee: fstpl  (%rsp)
  0x00007f75704ac2f1: vmovsd (%rsp),%xmm0
  0x00007f75704ac2f6: add    $0x8,%rsp
  0x00007f75704ac2fa: retq   

StubRoutines::log10 [0x00007f75704ac2fb, 0x00007f75704ac31a[ (31 bytes)
  0x00007f75704ac2fb: sub    $0x8,%rsp
  0x00007f75704ac2ff: vmovsd %xmm0,(%rsp)
  0x00007f75704ac304: fldl   (%rsp)
  0x00007f75704ac307: fldlg2 
  0x00007f75704ac309: fxch   %st(1)
  0x00007f75704ac30b: fyl2x  
  0x00007f75704ac30d: fstpl  (%rsp)
  0x00007f75704ac310: vmovsd (%rsp),%xmm0
  0x00007f75704ac315: add    $0x8,%rsp
  0x00007f75704ac319: retq   

StubRoutines::sin [0x00007f75704ac31a, 0x00007f75704ac66a[ (848 bytes)
  0x00007f75704ac31a: sub    $0x8,%rsp
  0x00007f75704ac31e: vmovsd %xmm0,(%rsp)
  0x00007f75704ac323: fldl   (%rsp)
  0x00007f75704ac326: fldl   0x153dbdec(%rip)        # 0x00007f7585888118
  0x00007f75704ac32c: fld    %st(1)
  0x00007f75704ac32e: fabs   
  0x00007f75704ac330: fucomip %st(1),%st
  0x00007f75704ac332: ffree  %st(0)
  0x00007f75704ac334: fincstp 
  0x00007f75704ac336: ja     Stub::sin+41 0x0x7f75704ac343
  0x00007f75704ac33c: fsin   
  0x00007f75704ac33e: jmpq   Stub::sin+835 0x0x7f75704ac65d
  0x00007f75704ac343: mov    %rsp,-0x28(%rsp)
  0x00007f75704ac348: sub    $0x80,%rsp
  0x00007f75704ac34f: mov    %rax,0x78(%rsp)
  0x00007f75704ac354: mov    %rcx,0x70(%rsp)
  0x00007f75704ac359: mov    %rdx,0x68(%rsp)
  0x00007f75704ac35e: mov    %rbx,0x60(%rsp)
  0x00007f75704ac363: mov    %rbp,0x50(%rsp)
  0x00007f75704ac368: mov    %rsi,0x48(%rsp)
  0x00007f75704ac36d: mov    %rdi,0x40(%rsp)
  0x00007f75704ac372: mov    %r8,0x38(%rsp)
  0x00007f75704ac377: mov    %r9,0x30(%rsp)
  0x00007f75704ac37c: mov    %r10,0x28(%rsp)
  0x00007f75704ac381: mov    %r11,0x20(%rsp)
  0x00007f75704ac386: mov    %r12,0x18(%rsp)
  0x00007f75704ac38b: mov    %r13,0x10(%rsp)
  0x00007f75704ac390: mov    %r14,0x8(%rsp)
  0x00007f75704ac395: mov    %r15,(%rsp)
  0x00007f75704ac399: sub    $0x100,%rsp
  0x00007f75704ac3a0: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f75704ac3a7: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f75704ac3af: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f75704ac3b7: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f75704ac3bf: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f75704ac3c7: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f75704ac3cf: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f75704ac3d7: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f75704ac3df: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f75704ac3ea: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f75704ac3f5: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f75704ac400: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f75704ac40b: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f75704ac416: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f75704ac421: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f75704ac42c: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f75704ac437: sub    $0x100,%rsp
  0x00007f75704ac43e: vmovdqu %xmm0,(%rsp)
  0x00007f75704ac443: vmovdqu %xmm1,0x10(%rsp)
  0x00007f75704ac449: vmovdqu %xmm2,0x20(%rsp)
  0x00007f75704ac44f: vmovdqu %xmm3,0x30(%rsp)
  0x00007f75704ac455: vmovdqu %xmm4,0x40(%rsp)
  0x00007f75704ac45b: vmovdqu %xmm5,0x50(%rsp)
  0x00007f75704ac461: vmovdqu %xmm6,0x60(%rsp)
  0x00007f75704ac467: vmovdqu %xmm7,0x70(%rsp)
  0x00007f75704ac46d: vmovdqu %xmm8,0x80(%rsp)
  0x00007f75704ac476: vmovdqu %xmm9,0x90(%rsp)
  0x00007f75704ac47f: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f75704ac488: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f75704ac491: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f75704ac49a: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f75704ac4a3: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f75704ac4ac: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f75704ac4b5: sub    $0x8,%rsp
  0x00007f75704ac4b9: fstpl  (%rsp)
  0x00007f75704ac4bc: vmovsd (%rsp),%xmm0
  0x00007f75704ac4c1: test   $0xf,%esp
  0x00007f75704ac4c7: je     Stub::sin+453 0x0x7f75704ac4df
  0x00007f75704ac4cd: sub    $0x8,%rsp
  0x00007f75704ac4d1: callq  0x00007f758552bfb6
  0x00007f75704ac4d6: add    $0x8,%rsp
  0x00007f75704ac4da: jmpq   Stub::sin+458 0x0x7f75704ac4e4
  0x00007f75704ac4df: callq  0x00007f758552bfb6
  0x00007f75704ac4e4: vmovsd %xmm0,(%rsp)
  0x00007f75704ac4e9: fldl   (%rsp)
  0x00007f75704ac4ec: add    $0x8,%rsp
  0x00007f75704ac4f0: vmovdqu (%rsp),%xmm0
  0x00007f75704ac4f5: vmovdqu 0x10(%rsp),%xmm1
  0x00007f75704ac4fb: vmovdqu 0x20(%rsp),%xmm2
  0x00007f75704ac501: vmovdqu 0x30(%rsp),%xmm3
  0x00007f75704ac507: vmovdqu 0x40(%rsp),%xmm4
  0x00007f75704ac50d: vmovdqu 0x50(%rsp),%xmm5
  0x00007f75704ac513: vmovdqu 0x60(%rsp),%xmm6
  0x00007f75704ac519: vmovdqu 0x70(%rsp),%xmm7
  0x00007f75704ac51f: vmovdqu 0x80(%rsp),%xmm8
  0x00007f75704ac528: vmovdqu 0x90(%rsp),%xmm9
  0x00007f75704ac531: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f75704ac53a: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f75704ac543: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f75704ac54c: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f75704ac555: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f75704ac55e: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f75704ac567: add    $0x100,%rsp
  0x00007f75704ac56e: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f75704ac575: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f75704ac57d: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f75704ac585: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f75704ac58d: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f75704ac595: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f75704ac59d: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f75704ac5a5: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f75704ac5ad: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f75704ac5b8: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f75704ac5c3: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f75704ac5ce: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f75704ac5d9: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f75704ac5e4: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f75704ac5ef: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f75704ac5fa: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f75704ac605: add    $0x100,%rsp
  0x00007f75704ac60c: mov    (%rsp),%r15
  0x00007f75704ac610: mov    0x8(%rsp),%r14
  0x00007f75704ac615: mov    0x10(%rsp),%r13
  0x00007f75704ac61a: mov    0x18(%rsp),%r12
  0x00007f75704ac61f: mov    0x20(%rsp),%r11
  0x00007f75704ac624: mov    0x28(%rsp),%r10
  0x00007f75704ac629: mov    0x30(%rsp),%r9
  0x00007f75704ac62e: mov    0x38(%rsp),%r8
  0x00007f75704ac633: mov    0x40(%rsp),%rdi
  0x00007f75704ac638: mov    0x48(%rsp),%rsi
  0x00007f75704ac63d: mov    0x50(%rsp),%rbp
  0x00007f75704ac642: mov    0x60(%rsp),%rbx
  0x00007f75704ac647: mov    0x68(%rsp),%rdx
  0x00007f75704ac64c: mov    0x70(%rsp),%rcx
  0x00007f75704ac651: mov    0x78(%rsp),%rax
  0x00007f75704ac656: add    $0x80,%rsp
  0x00007f75704ac65d: fstpl  (%rsp)
  0x00007f75704ac660: vmovsd (%rsp),%xmm0
  0x00007f75704ac665: add    $0x8,%rsp
  0x00007f75704ac669: retq   

StubRoutines::cos [0x00007f75704ac66a, 0x00007f75704ac9ba[ (848 bytes)
  0x00007f75704ac66a: sub    $0x8,%rsp
  0x00007f75704ac66e: vmovsd %xmm0,(%rsp)
  0x00007f75704ac673: fldl   (%rsp)
  0x00007f75704ac676: fldl   0x153dba9c(%rip)        # 0x00007f7585888118
  0x00007f75704ac67c: fld    %st(1)
  0x00007f75704ac67e: fabs   
  0x00007f75704ac680: fucomip %st(1),%st
  0x00007f75704ac682: ffree  %st(0)
  0x00007f75704ac684: fincstp 
  0x00007f75704ac686: ja     Stub::cos+41 0x0x7f75704ac693
  0x00007f75704ac68c: fcos   
  0x00007f75704ac68e: jmpq   Stub::cos+835 0x0x7f75704ac9ad
  0x00007f75704ac693: mov    %rsp,-0x28(%rsp)
  0x00007f75704ac698: sub    $0x80,%rsp
  0x00007f75704ac69f: mov    %rax,0x78(%rsp)
  0x00007f75704ac6a4: mov    %rcx,0x70(%rsp)
  0x00007f75704ac6a9: mov    %rdx,0x68(%rsp)
  0x00007f75704ac6ae: mov    %rbx,0x60(%rsp)
  0x00007f75704ac6b3: mov    %rbp,0x50(%rsp)
  0x00007f75704ac6b8: mov    %rsi,0x48(%rsp)
  0x00007f75704ac6bd: mov    %rdi,0x40(%rsp)
  0x00007f75704ac6c2: mov    %r8,0x38(%rsp)
  0x00007f75704ac6c7: mov    %r9,0x30(%rsp)
  0x00007f75704ac6cc: mov    %r10,0x28(%rsp)
  0x00007f75704ac6d1: mov    %r11,0x20(%rsp)
  0x00007f75704ac6d6: mov    %r12,0x18(%rsp)
  0x00007f75704ac6db: mov    %r13,0x10(%rsp)
  0x00007f75704ac6e0: mov    %r14,0x8(%rsp)
  0x00007f75704ac6e5: mov    %r15,(%rsp)
  0x00007f75704ac6e9: sub    $0x100,%rsp
  0x00007f75704ac6f0: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f75704ac6f7: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f75704ac6ff: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f75704ac707: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f75704ac70f: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f75704ac717: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f75704ac71f: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f75704ac727: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f75704ac72f: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f75704ac73a: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f75704ac745: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f75704ac750: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f75704ac75b: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f75704ac766: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f75704ac771: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f75704ac77c: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f75704ac787: sub    $0x100,%rsp
  0x00007f75704ac78e: vmovdqu %xmm0,(%rsp)
  0x00007f75704ac793: vmovdqu %xmm1,0x10(%rsp)
  0x00007f75704ac799: vmovdqu %xmm2,0x20(%rsp)
  0x00007f75704ac79f: vmovdqu %xmm3,0x30(%rsp)
  0x00007f75704ac7a5: vmovdqu %xmm4,0x40(%rsp)
  0x00007f75704ac7ab: vmovdqu %xmm5,0x50(%rsp)
  0x00007f75704ac7b1: vmovdqu %xmm6,0x60(%rsp)
  0x00007f75704ac7b7: vmovdqu %xmm7,0x70(%rsp)
  0x00007f75704ac7bd: vmovdqu %xmm8,0x80(%rsp)
  0x00007f75704ac7c6: vmovdqu %xmm9,0x90(%rsp)
  0x00007f75704ac7cf: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f75704ac7d8: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f75704ac7e1: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f75704ac7ea: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f75704ac7f3: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f75704ac7fc: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f75704ac805: sub    $0x8,%rsp
  0x00007f75704ac809: fstpl  (%rsp)
  0x00007f75704ac80c: vmovsd (%rsp),%xmm0
  0x00007f75704ac811: test   $0xf,%esp
  0x00007f75704ac817: je     Stub::cos+453 0x0x7f75704ac82f
  0x00007f75704ac81d: sub    $0x8,%rsp
  0x00007f75704ac821: callq  0x00007f758552c238
  0x00007f75704ac826: add    $0x8,%rsp
  0x00007f75704ac82a: jmpq   Stub::cos+458 0x0x7f75704ac834
  0x00007f75704ac82f: callq  0x00007f758552c238
  0x00007f75704ac834: vmovsd %xmm0,(%rsp)
  0x00007f75704ac839: fldl   (%rsp)
  0x00007f75704ac83c: add    $0x8,%rsp
  0x00007f75704ac840: vmovdqu (%rsp),%xmm0
  0x00007f75704ac845: vmovdqu 0x10(%rsp),%xmm1
  0x00007f75704ac84b: vmovdqu 0x20(%rsp),%xmm2
  0x00007f75704ac851: vmovdqu 0x30(%rsp),%xmm3
  0x00007f75704ac857: vmovdqu 0x40(%rsp),%xmm4
  0x00007f75704ac85d: vmovdqu 0x50(%rsp),%xmm5
  0x00007f75704ac863: vmovdqu 0x60(%rsp),%xmm6
  0x00007f75704ac869: vmovdqu 0x70(%rsp),%xmm7
  0x00007f75704ac86f: vmovdqu 0x80(%rsp),%xmm8
  0x00007f75704ac878: vmovdqu 0x90(%rsp),%xmm9
  0x00007f75704ac881: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f75704ac88a: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f75704ac893: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f75704ac89c: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f75704ac8a5: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f75704ac8ae: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f75704ac8b7: add    $0x100,%rsp
  0x00007f75704ac8be: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f75704ac8c5: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f75704ac8cd: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f75704ac8d5: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f75704ac8dd: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f75704ac8e5: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f75704ac8ed: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f75704ac8f5: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f75704ac8fd: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f75704ac908: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f75704ac913: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f75704ac91e: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f75704ac929: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f75704ac934: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f75704ac93f: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f75704ac94a: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f75704ac955: add    $0x100,%rsp
  0x00007f75704ac95c: mov    (%rsp),%r15
  0x00007f75704ac960: mov    0x8(%rsp),%r14
  0x00007f75704ac965: mov    0x10(%rsp),%r13
  0x00007f75704ac96a: mov    0x18(%rsp),%r12
  0x00007f75704ac96f: mov    0x20(%rsp),%r11
  0x00007f75704ac974: mov    0x28(%rsp),%r10
  0x00007f75704ac979: mov    0x30(%rsp),%r9
  0x00007f75704ac97e: mov    0x38(%rsp),%r8
  0x00007f75704ac983: mov    0x40(%rsp),%rdi
  0x00007f75704ac988: mov    0x48(%rsp),%rsi
  0x00007f75704ac98d: mov    0x50(%rsp),%rbp
  0x00007f75704ac992: mov    0x60(%rsp),%rbx
  0x00007f75704ac997: mov    0x68(%rsp),%rdx
  0x00007f75704ac99c: mov    0x70(%rsp),%rcx
  0x00007f75704ac9a1: mov    0x78(%rsp),%rax
  0x00007f75704ac9a6: add    $0x80,%rsp
  0x00007f75704ac9ad: fstpl  (%rsp)
  0x00007f75704ac9b0: vmovsd (%rsp),%xmm0
  0x00007f75704ac9b5: add    $0x8,%rsp
  0x00007f75704ac9b9: retq   

StubRoutines::tan [0x00007f75704ac9ba, 0x00007f75704acd0c[ (850 bytes)
  0x00007f75704ac9ba: sub    $0x8,%rsp
  0x00007f75704ac9be: vmovsd %xmm0,(%rsp)
  0x00007f75704ac9c3: fldl   (%rsp)
  0x00007f75704ac9c6: fldl   0x153db74c(%rip)        # 0x00007f7585888118
  0x00007f75704ac9cc: fld    %st(1)
  0x00007f75704ac9ce: fabs   
  0x00007f75704ac9d0: fucomip %st(1),%st
  0x00007f75704ac9d2: ffree  %st(0)
  0x00007f75704ac9d4: fincstp 
  0x00007f75704ac9d6: ja     Stub::tan+43 0x0x7f75704ac9e5
  0x00007f75704ac9dc: fptan  
  0x00007f75704ac9de: fstp   %st(0)
  0x00007f75704ac9e0: jmpq   Stub::tan+837 0x0x7f75704accff
  0x00007f75704ac9e5: mov    %rsp,-0x28(%rsp)
  0x00007f75704ac9ea: sub    $0x80,%rsp
  0x00007f75704ac9f1: mov    %rax,0x78(%rsp)
  0x00007f75704ac9f6: mov    %rcx,0x70(%rsp)
  0x00007f75704ac9fb: mov    %rdx,0x68(%rsp)
  0x00007f75704aca00: mov    %rbx,0x60(%rsp)
  0x00007f75704aca05: mov    %rbp,0x50(%rsp)
  0x00007f75704aca0a: mov    %rsi,0x48(%rsp)
  0x00007f75704aca0f: mov    %rdi,0x40(%rsp)
  0x00007f75704aca14: mov    %r8,0x38(%rsp)
  0x00007f75704aca19: mov    %r9,0x30(%rsp)
  0x00007f75704aca1e: mov    %r10,0x28(%rsp)
  0x00007f75704aca23: mov    %r11,0x20(%rsp)
  0x00007f75704aca28: mov    %r12,0x18(%rsp)
  0x00007f75704aca2d: mov    %r13,0x10(%rsp)
  0x00007f75704aca32: mov    %r14,0x8(%rsp)
  0x00007f75704aca37: mov    %r15,(%rsp)
  0x00007f75704aca3b: sub    $0x100,%rsp
  0x00007f75704aca42: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f75704aca49: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f75704aca51: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f75704aca59: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f75704aca61: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f75704aca69: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f75704aca71: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f75704aca79: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f75704aca81: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f75704aca8c: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f75704aca97: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f75704acaa2: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f75704acaad: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f75704acab8: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f75704acac3: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f75704acace: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f75704acad9: sub    $0x100,%rsp
  0x00007f75704acae0: vmovdqu %xmm0,(%rsp)
  0x00007f75704acae5: vmovdqu %xmm1,0x10(%rsp)
  0x00007f75704acaeb: vmovdqu %xmm2,0x20(%rsp)
  0x00007f75704acaf1: vmovdqu %xmm3,0x30(%rsp)
  0x00007f75704acaf7: vmovdqu %xmm4,0x40(%rsp)
  0x00007f75704acafd: vmovdqu %xmm5,0x50(%rsp)
  0x00007f75704acb03: vmovdqu %xmm6,0x60(%rsp)
  0x00007f75704acb09: vmovdqu %xmm7,0x70(%rsp)
  0x00007f75704acb0f: vmovdqu %xmm8,0x80(%rsp)
  0x00007f75704acb18: vmovdqu %xmm9,0x90(%rsp)
  0x00007f75704acb21: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f75704acb2a: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f75704acb33: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f75704acb3c: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f75704acb45: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f75704acb4e: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f75704acb57: sub    $0x8,%rsp
  0x00007f75704acb5b: fstpl  (%rsp)
  0x00007f75704acb5e: vmovsd (%rsp),%xmm0
  0x00007f75704acb63: test   $0xf,%esp
  0x00007f75704acb69: je     Stub::tan+455 0x0x7f75704acb81
  0x00007f75704acb6f: sub    $0x8,%rsp
  0x00007f75704acb73: callq  0x00007f758552c4b6
  0x00007f75704acb78: add    $0x8,%rsp
  0x00007f75704acb7c: jmpq   Stub::tan+460 0x0x7f75704acb86
  0x00007f75704acb81: callq  0x00007f758552c4b6
  0x00007f75704acb86: vmovsd %xmm0,(%rsp)
  0x00007f75704acb8b: fldl   (%rsp)
  0x00007f75704acb8e: add    $0x8,%rsp
  0x00007f75704acb92: vmovdqu (%rsp),%xmm0
  0x00007f75704acb97: vmovdqu 0x10(%rsp),%xmm1
  0x00007f75704acb9d: vmovdqu 0x20(%rsp),%xmm2
  0x00007f75704acba3: vmovdqu 0x30(%rsp),%xmm3
  0x00007f75704acba9: vmovdqu 0x40(%rsp),%xmm4
  0x00007f75704acbaf: vmovdqu 0x50(%rsp),%xmm5
  0x00007f75704acbb5: vmovdqu 0x60(%rsp),%xmm6
  0x00007f75704acbbb: vmovdqu 0x70(%rsp),%xmm7
  0x00007f75704acbc1: vmovdqu 0x80(%rsp),%xmm8
  0x00007f75704acbca: vmovdqu 0x90(%rsp),%xmm9
  0x00007f75704acbd3: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f75704acbdc: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f75704acbe5: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f75704acbee: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f75704acbf7: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f75704acc00: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f75704acc09: add    $0x100,%rsp
  0x00007f75704acc10: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f75704acc17: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f75704acc1f: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f75704acc27: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f75704acc2f: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f75704acc37: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f75704acc3f: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f75704acc47: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f75704acc4f: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f75704acc5a: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f75704acc65: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f75704acc70: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f75704acc7b: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f75704acc86: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f75704acc91: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f75704acc9c: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f75704acca7: add    $0x100,%rsp
  0x00007f75704accae: mov    (%rsp),%r15
  0x00007f75704accb2: mov    0x8(%rsp),%r14
  0x00007f75704accb7: mov    0x10(%rsp),%r13
  0x00007f75704accbc: mov    0x18(%rsp),%r12
  0x00007f75704accc1: mov    0x20(%rsp),%r11
  0x00007f75704accc6: mov    0x28(%rsp),%r10
  0x00007f75704acccb: mov    0x30(%rsp),%r9
  0x00007f75704accd0: mov    0x38(%rsp),%r8
  0x00007f75704accd5: mov    0x40(%rsp),%rdi
  0x00007f75704accda: mov    0x48(%rsp),%rsi
  0x00007f75704accdf: mov    0x50(%rsp),%rbp
  0x00007f75704acce4: mov    0x60(%rsp),%rbx
  0x00007f75704acce9: mov    0x68(%rsp),%rdx
  0x00007f75704accee: mov    0x70(%rsp),%rcx
  0x00007f75704accf3: mov    0x78(%rsp),%rax
  0x00007f75704accf8: add    $0x80,%rsp
  0x00007f75704accff: fstpl  (%rsp)
  0x00007f75704acd02: vmovsd (%rsp),%xmm0
  0x00007f75704acd07: add    $0x8,%rsp
  0x00007f75704acd0b: retq   

StubRoutines::exp [0x00007f75704acd0c, 0x00007f75704ad0be[ (946 bytes)
  0x00007f75704acd0c: sub    $0x8,%rsp
  0x00007f75704acd10: vmovsd %xmm0,(%rsp)
  0x00007f75704acd15: fldl   (%rsp)
  0x00007f75704acd18: fld    %st(0)
  0x00007f75704acd1a: sub    $0x8,%rsp
  0x00007f75704acd1e: fstcw  (%rsp)
  0x00007f75704acd22: mov    (%rsp),%eax
  0x00007f75704acd25: or     $0x300,%eax
  0x00007f75704acd2b: push   %rax
  0x00007f75704acd2c: fldcw  (%rsp)
  0x00007f75704acd2f: pop    %rax
  0x00007f75704acd30: fldl2e 
  0x00007f75704acd32: fmulp  %st,%st(1)
  0x00007f75704acd34: sub    $0x8,%rsp
  0x00007f75704acd38: fld    %st(0)
  0x00007f75704acd3a: frndint 
  0x00007f75704acd3c: fsubr  %st,%st(1)
  0x00007f75704acd3e: fistpl (%rsp)
  0x00007f75704acd41: f2xm1  
  0x00007f75704acd43: fld1   
  0x00007f75704acd45: faddp  %st,%st(1)
  0x00007f75704acd47: mov    (%rsp),%eax
  0x00007f75704acd4a: mov    $0xfffff800,%ecx
  0x00007f75704acd4f: add    $0x3ff,%eax
  0x00007f75704acd55: mov    %eax,%edx
  0x00007f75704acd57: shl    $0x14,%eax
  0x00007f75704acd5a: add    $0x1,%edx
  0x00007f75704acd5d: cmove  %ecx,%eax
  0x00007f75704acd60: cmp    $0x1,%edx
  0x00007f75704acd63: cmove  %ecx,%eax
  0x00007f75704acd66: test   %edx,%ecx
  0x00007f75704acd68: cmovne %ecx,%eax
  0x00007f75704acd6b: mov    %eax,0x4(%rsp)
  0x00007f75704acd6f: movl   $0x0,(%rsp)
  0x00007f75704acd76: fmull  (%rsp)
  0x00007f75704acd79: add    $0x8,%rsp
  0x00007f75704acd7d: fldcw  (%rsp)
  0x00007f75704acd80: add    $0x8,%rsp
  0x00007f75704acd84: fucomi %st(0),%st
  0x00007f75704acd86: jp     Stub::exp+135 0x0x7f75704acd93
  0x00007f75704acd8c: ffree  %st(1)
  0x00007f75704acd8e: jmpq   Stub::exp+933 0x0x7f75704ad0b1
  0x00007f75704acd93: ffree  %st(0)
  0x00007f75704acd95: fincstp 
  0x00007f75704acd97: mov    %rsp,-0x28(%rsp)
  0x00007f75704acd9c: sub    $0x80,%rsp
  0x00007f75704acda3: mov    %rax,0x78(%rsp)
  0x00007f75704acda8: mov    %rcx,0x70(%rsp)
  0x00007f75704acdad: mov    %rdx,0x68(%rsp)
  0x00007f75704acdb2: mov    %rbx,0x60(%rsp)
  0x00007f75704acdb7: mov    %rbp,0x50(%rsp)
  0x00007f75704acdbc: mov    %rsi,0x48(%rsp)
  0x00007f75704acdc1: mov    %rdi,0x40(%rsp)
  0x00007f75704acdc6: mov    %r8,0x38(%rsp)
  0x00007f75704acdcb: mov    %r9,0x30(%rsp)
  0x00007f75704acdd0: mov    %r10,0x28(%rsp)
  0x00007f75704acdd5: mov    %r11,0x20(%rsp)
  0x00007f75704acdda: mov    %r12,0x18(%rsp)
  0x00007f75704acddf: mov    %r13,0x10(%rsp)
  0x00007f75704acde4: mov    %r14,0x8(%rsp)
  0x00007f75704acde9: mov    %r15,(%rsp)
  0x00007f75704acded: sub    $0x100,%rsp
  0x00007f75704acdf4: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f75704acdfb: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f75704ace03: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f75704ace0b: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f75704ace13: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f75704ace1b: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f75704ace23: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f75704ace2b: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f75704ace33: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f75704ace3e: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f75704ace49: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f75704ace54: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f75704ace5f: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f75704ace6a: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f75704ace75: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f75704ace80: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f75704ace8b: sub    $0x100,%rsp
  0x00007f75704ace92: vmovdqu %xmm0,(%rsp)
  0x00007f75704ace97: vmovdqu %xmm1,0x10(%rsp)
  0x00007f75704ace9d: vmovdqu %xmm2,0x20(%rsp)
  0x00007f75704acea3: vmovdqu %xmm3,0x30(%rsp)
  0x00007f75704acea9: vmovdqu %xmm4,0x40(%rsp)
  0x00007f75704aceaf: vmovdqu %xmm5,0x50(%rsp)
  0x00007f75704aceb5: vmovdqu %xmm6,0x60(%rsp)
  0x00007f75704acebb: vmovdqu %xmm7,0x70(%rsp)
  0x00007f75704acec1: vmovdqu %xmm8,0x80(%rsp)
  0x00007f75704aceca: vmovdqu %xmm9,0x90(%rsp)
  0x00007f75704aced3: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f75704acedc: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f75704acee5: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f75704aceee: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f75704acef7: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f75704acf00: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f75704acf09: sub    $0x8,%rsp
  0x00007f75704acf0d: fstpl  (%rsp)
  0x00007f75704acf10: vmovsd (%rsp),%xmm0
  0x00007f75704acf15: test   $0xf,%esp
  0x00007f75704acf1b: je     Stub::exp+551 0x0x7f75704acf33
  0x00007f75704acf21: sub    $0x8,%rsp
  0x00007f75704acf25: callq  0x00007f7585528c7a
  0x00007f75704acf2a: add    $0x8,%rsp
  0x00007f75704acf2e: jmpq   Stub::exp+556 0x0x7f75704acf38
  0x00007f75704acf33: callq  0x00007f7585528c7a
  0x00007f75704acf38: vmovsd %xmm0,(%rsp)
  0x00007f75704acf3d: fldl   (%rsp)
  0x00007f75704acf40: add    $0x8,%rsp
  0x00007f75704acf44: vmovdqu (%rsp),%xmm0
  0x00007f75704acf49: vmovdqu 0x10(%rsp),%xmm1
  0x00007f75704acf4f: vmovdqu 0x20(%rsp),%xmm2
  0x00007f75704acf55: vmovdqu 0x30(%rsp),%xmm3
  0x00007f75704acf5b: vmovdqu 0x40(%rsp),%xmm4
  0x00007f75704acf61: vmovdqu 0x50(%rsp),%xmm5
  0x00007f75704acf67: vmovdqu 0x60(%rsp),%xmm6
  0x00007f75704acf6d: vmovdqu 0x70(%rsp),%xmm7
  0x00007f75704acf73: vmovdqu 0x80(%rsp),%xmm8
  0x00007f75704acf7c: vmovdqu 0x90(%rsp),%xmm9
  0x00007f75704acf85: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f75704acf8e: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f75704acf97: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f75704acfa0: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f75704acfa9: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f75704acfb2: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f75704acfbb: add    $0x100,%rsp
  0x00007f75704acfc2: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f75704acfc9: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f75704acfd1: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f75704acfd9: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f75704acfe1: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f75704acfe9: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f75704acff1: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f75704acff9: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f75704ad001: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f75704ad00c: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f75704ad017: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f75704ad022: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f75704ad02d: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f75704ad038: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f75704ad043: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f75704ad04e: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f75704ad059: add    $0x100,%rsp
  0x00007f75704ad060: mov    (%rsp),%r15
  0x00007f75704ad064: mov    0x8(%rsp),%r14
  0x00007f75704ad069: mov    0x10(%rsp),%r13
  0x00007f75704ad06e: mov    0x18(%rsp),%r12
  0x00007f75704ad073: mov    0x20(%rsp),%r11
  0x00007f75704ad078: mov    0x28(%rsp),%r10
  0x00007f75704ad07d: mov    0x30(%rsp),%r9
  0x00007f75704ad082: mov    0x38(%rsp),%r8
  0x00007f75704ad087: mov    0x40(%rsp),%rdi
  0x00007f75704ad08c: mov    0x48(%rsp),%rsi
  0x00007f75704ad091: mov    0x50(%rsp),%rbp
  0x00007f75704ad096: mov    0x60(%rsp),%rbx
  0x00007f75704ad09b: mov    0x68(%rsp),%rdx
  0x00007f75704ad0a0: mov    0x70(%rsp),%rcx
  0x00007f75704ad0a5: mov    0x78(%rsp),%rax
  0x00007f75704ad0aa: add    $0x80,%rsp
  0x00007f75704ad0b1: fstpl  (%rsp)
  0x00007f75704ad0b4: vmovsd (%rsp),%xmm0
  0x00007f75704ad0b9: add    $0x8,%rsp
  0x00007f75704ad0bd: retq   

StubRoutines::pow [0x00007f75704ad0be, 0x00007f75704ad5ff[ (1345 bytes)
  0x00007f75704ad0be: sub    $0x8,%rsp
  0x00007f75704ad0c2: vmovsd %xmm1,(%rsp)
  0x00007f75704ad0c7: fldl   (%rsp)
  0x00007f75704ad0ca: vmovsd %xmm0,(%rsp)
  0x00007f75704ad0cf: fldl   (%rsp)
  0x00007f75704ad0d2: movabs $0x7f7585eaf800,%rax
  0x00007f75704ad0dc: fldl   (%rax)
  0x00007f75704ad0de: fucomip %st(2),%st
  0x00007f75704ad0e0: jp     Stub::pow+59 0x0x7f75704ad0f9
  0x00007f75704ad0e6: jne    Stub::pow+59 0x0x7f75704ad0f9
  0x00007f75704ad0ec: fxch   %st(1)
  0x00007f75704ad0ee: ffree  %st(0)
  0x00007f75704ad0f0: fincstp 
  0x00007f75704ad0f2: fmul   %st(0),%st
  0x00007f75704ad0f4: jmpq   Stub::pow+1332 0x0x7f75704ad5f2
  0x00007f75704ad0f9: fldz   
  0x00007f75704ad0fb: fucomip %st(1),%st
  0x00007f75704ad0fd: ja     Stub::pow+194 0x0x7f75704ad180
  0x00007f75704ad103: fld    %st(1)
  0x00007f75704ad105: fld    %st(1)
  ;; fast_pow {
  0x00007f75704ad107: sub    $0x8,%rsp
  0x00007f75704ad10b: fstcw  (%rsp)
  0x00007f75704ad10f: mov    (%rsp),%eax
  0x00007f75704ad112: or     $0x300,%eax
  0x00007f75704ad118: push   %rax
  0x00007f75704ad119: fldcw  (%rsp)
  0x00007f75704ad11c: pop    %rax
  0x00007f75704ad11d: fyl2x  
  0x00007f75704ad11f: sub    $0x8,%rsp
  0x00007f75704ad123: fld    %st(0)
  0x00007f75704ad125: frndint 
  0x00007f75704ad127: fsubr  %st,%st(1)
  0x00007f75704ad129: fistpl (%rsp)
  0x00007f75704ad12c: f2xm1  
  0x00007f75704ad12e: fld1   
  0x00007f75704ad130: faddp  %st,%st(1)
  0x00007f75704ad132: mov    (%rsp),%eax
  0x00007f75704ad135: mov    $0xfffff800,%ecx
  0x00007f75704ad13a: add    $0x3ff,%eax
  0x00007f75704ad140: mov    %eax,%edx
  0x00007f75704ad142: shl    $0x14,%eax
  0x00007f75704ad145: add    $0x1,%edx
  0x00007f75704ad148: cmove  %ecx,%eax
  0x00007f75704ad14b: cmp    $0x1,%edx
  0x00007f75704ad14e: cmove  %ecx,%eax
  0x00007f75704ad151: test   %edx,%ecx
  0x00007f75704ad153: cmovne %ecx,%eax
  0x00007f75704ad156: mov    %eax,0x4(%rsp)
  0x00007f75704ad15a: movl   $0x0,(%rsp)
  0x00007f75704ad161: fmull  (%rsp)
  0x00007f75704ad164: add    $0x8,%rsp
  0x00007f75704ad168: fldcw  (%rsp)
  0x00007f75704ad16b: add    $0x8,%rsp
  ;; } fast_pow
  0x00007f75704ad16f: fucomi %st(0),%st
  0x00007f75704ad171: jp     Stub::pow+524 0x0x7f75704ad2ca
  0x00007f75704ad177: ffree  %st(2)
  0x00007f75704ad179: ffree  %st(1)
  0x00007f75704ad17b: jmpq   Stub::pow+1332 0x0x7f75704ad5f2
  0x00007f75704ad180: fld    %st(1)
  0x00007f75704ad182: frndint 
  0x00007f75704ad184: fucomi %st(2),%st
  0x00007f75704ad186: jne    Stub::pow+524 0x0x7f75704ad2ca
  0x00007f75704ad18c: sub    $0x8,%rsp
  0x00007f75704ad190: fld1   
  0x00007f75704ad192: fadd   %st(1),%st
  0x00007f75704ad194: fstpl  (%rsp)
  0x00007f75704ad197: fldl   (%rsp)
  0x00007f75704ad19a: fucomip %st(1),%st
  0x00007f75704ad19c: fistpll (%rsp)
  0x00007f75704ad19f: jne    Stub::pow+246 0x0x7f75704ad1b4
  0x00007f75704ad1a5: movl   $0x0,(%rsp)
  0x00007f75704ad1ac: movl   $0x0,0x4(%rsp)
  0x00007f75704ad1b4: fld    %st(1)
  0x00007f75704ad1b6: fld    %st(1)
  0x00007f75704ad1b8: fabs   
  ;; fast_pow {
  0x00007f75704ad1ba: sub    $0x8,%rsp
  0x00007f75704ad1be: fstcw  (%rsp)
  0x00007f75704ad1c2: mov    (%rsp),%eax
  0x00007f75704ad1c5: or     $0x300,%eax
  0x00007f75704ad1cb: push   %rax
  0x00007f75704ad1cc: fldcw  (%rsp)
  0x00007f75704ad1cf: pop    %rax
  0x00007f75704ad1d0: fyl2x  
  0x00007f75704ad1d2: sub    $0x8,%rsp
  0x00007f75704ad1d6: fld    %st(0)
  0x00007f75704ad1d8: frndint 
  0x00007f75704ad1da: fsubr  %st,%st(1)
  0x00007f75704ad1dc: fistpl (%rsp)
  0x00007f75704ad1df: f2xm1  
  0x00007f75704ad1e1: fld1   
  0x00007f75704ad1e3: faddp  %st,%st(1)
  0x00007f75704ad1e5: mov    (%rsp),%eax
  0x00007f75704ad1e8: mov    $0xfffff800,%ecx
  0x00007f75704ad1ed: add    $0x3ff,%eax
  0x00007f75704ad1f3: mov    %eax,%edx
  0x00007f75704ad1f5: shl    $0x14,%eax
  0x00007f75704ad1f8: add    $0x1,%edx
  0x00007f75704ad1fb: cmove  %ecx,%eax
  0x00007f75704ad1fe: cmp    $0x1,%edx
  0x00007f75704ad201: cmove  %ecx,%eax
  0x00007f75704ad204: test   %edx,%ecx
  0x00007f75704ad206: cmovne %ecx,%eax
  0x00007f75704ad209: mov    %eax,0x4(%rsp)
  0x00007f75704ad20d: movl   $0x0,(%rsp)
  0x00007f75704ad214: fmull  (%rsp)
  0x00007f75704ad217: add    $0x8,%rsp
  0x00007f75704ad21b: fldcw  (%rsp)
  0x00007f75704ad21e: add    $0x8,%rsp
  ;; } fast_pow
  0x00007f75704ad222: fucomi %st(0),%st
  0x00007f75704ad224: pop    %rax
  0x00007f75704ad225: jp     Stub::pow+524 0x0x7f75704ad2ca
  0x00007f75704ad22b: mov    %rax,%rcx
  0x00007f75704ad22e: shl    %rcx
  0x00007f75704ad231: jae    Stub::pow+502 0x0x7f75704ad2b4
  0x00007f75704ad237: jne    Stub::pow+502 0x0x7f75704ad2b4
  ;; integer indefinite value shouldn't be seen here
  0x00007f75704ad23d: mov    %rsp,-0x28(%rsp)
  0x00007f75704ad242: sub    $0x80,%rsp
  0x00007f75704ad249: mov    %rax,0x78(%rsp)
  0x00007f75704ad24e: mov    %rcx,0x70(%rsp)
  0x00007f75704ad253: mov    %rdx,0x68(%rsp)
  0x00007f75704ad258: mov    %rbx,0x60(%rsp)
  0x00007f75704ad25d: mov    %rbp,0x50(%rsp)
  0x00007f75704ad262: mov    %rsi,0x48(%rsp)
  0x00007f75704ad267: mov    %rdi,0x40(%rsp)
  0x00007f75704ad26c: mov    %r8,0x38(%rsp)
  0x00007f75704ad271: mov    %r9,0x30(%rsp)
  0x00007f75704ad276: mov    %r10,0x28(%rsp)
  0x00007f75704ad27b: mov    %r11,0x20(%rsp)
  0x00007f75704ad280: mov    %r12,0x18(%rsp)
  0x00007f75704ad285: mov    %r13,0x10(%rsp)
  0x00007f75704ad28a: mov    %r14,0x8(%rsp)
  0x00007f75704ad28f: mov    %r15,(%rsp)
  0x00007f75704ad293: movabs $0x7f7585887e78,%rdi
  0x00007f75704ad29d: movabs $0x7f75704ad23d,%rsi
  0x00007f75704ad2a7: mov    %rsp,%rdx
  0x00007f75704ad2aa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ad2ae: callq  0x00007f75853729fa
  0x00007f75704ad2b3: hlt    
  0x00007f75704ad2b4: ffree  %st(2)
  0x00007f75704ad2b6: ffree  %st(1)
  0x00007f75704ad2b8: test   $0x1,%eax
  0x00007f75704ad2bd: je     Stub::pow+1332 0x0x7f75704ad5f2
  0x00007f75704ad2c3: fchs   
  0x00007f75704ad2c5: jmpq   Stub::pow+1332 0x0x7f75704ad5f2
  0x00007f75704ad2ca: ffree  %st(0)
  0x00007f75704ad2cc: fincstp 
  0x00007f75704ad2ce: mov    %rsp,-0x28(%rsp)
  0x00007f75704ad2d3: sub    $0x80,%rsp
  0x00007f75704ad2da: mov    %rax,0x78(%rsp)
  0x00007f75704ad2df: mov    %rcx,0x70(%rsp)
  0x00007f75704ad2e4: mov    %rdx,0x68(%rsp)
  0x00007f75704ad2e9: mov    %rbx,0x60(%rsp)
  0x00007f75704ad2ee: mov    %rbp,0x50(%rsp)
  0x00007f75704ad2f3: mov    %rsi,0x48(%rsp)
  0x00007f75704ad2f8: mov    %rdi,0x40(%rsp)
  0x00007f75704ad2fd: mov    %r8,0x38(%rsp)
  0x00007f75704ad302: mov    %r9,0x30(%rsp)
  0x00007f75704ad307: mov    %r10,0x28(%rsp)
  0x00007f75704ad30c: mov    %r11,0x20(%rsp)
  0x00007f75704ad311: mov    %r12,0x18(%rsp)
  0x00007f75704ad316: mov    %r13,0x10(%rsp)
  0x00007f75704ad31b: mov    %r14,0x8(%rsp)
  0x00007f75704ad320: mov    %r15,(%rsp)
  0x00007f75704ad324: sub    $0x100,%rsp
  0x00007f75704ad32b: vextractf128 $0x1,%ymm0,(%rsp)
  0x00007f75704ad332: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x00007f75704ad33a: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x00007f75704ad342: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x00007f75704ad34a: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x00007f75704ad352: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x00007f75704ad35a: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x00007f75704ad362: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x00007f75704ad36a: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x00007f75704ad375: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x00007f75704ad380: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x00007f75704ad38b: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x00007f75704ad396: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x00007f75704ad3a1: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x00007f75704ad3ac: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x00007f75704ad3b7: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x00007f75704ad3c2: sub    $0x100,%rsp
  0x00007f75704ad3c9: vmovdqu %xmm0,(%rsp)
  0x00007f75704ad3ce: vmovdqu %xmm1,0x10(%rsp)
  0x00007f75704ad3d4: vmovdqu %xmm2,0x20(%rsp)
  0x00007f75704ad3da: vmovdqu %xmm3,0x30(%rsp)
  0x00007f75704ad3e0: vmovdqu %xmm4,0x40(%rsp)
  0x00007f75704ad3e6: vmovdqu %xmm5,0x50(%rsp)
  0x00007f75704ad3ec: vmovdqu %xmm6,0x60(%rsp)
  0x00007f75704ad3f2: vmovdqu %xmm7,0x70(%rsp)
  0x00007f75704ad3f8: vmovdqu %xmm8,0x80(%rsp)
  0x00007f75704ad401: vmovdqu %xmm9,0x90(%rsp)
  0x00007f75704ad40a: vmovdqu %xmm10,0xa0(%rsp)
  0x00007f75704ad413: vmovdqu %xmm11,0xb0(%rsp)
  0x00007f75704ad41c: vmovdqu %xmm12,0xc0(%rsp)
  0x00007f75704ad425: vmovdqu %xmm13,0xd0(%rsp)
  0x00007f75704ad42e: vmovdqu %xmm14,0xe0(%rsp)
  0x00007f75704ad437: vmovdqu %xmm15,0xf0(%rsp)
  0x00007f75704ad440: sub    $0x10,%rsp
  0x00007f75704ad444: fstpl  (%rsp)
  0x00007f75704ad447: fstpl  0x8(%rsp)
  0x00007f75704ad44b: vmovsd (%rsp),%xmm0
  0x00007f75704ad450: vmovsd 0x8(%rsp),%xmm1
  0x00007f75704ad456: test   $0xf,%esp
  0x00007f75704ad45c: je     Stub::pow+950 0x0x7f75704ad474
  0x00007f75704ad462: sub    $0x8,%rsp
  0x00007f75704ad466: callq  0x00007f7585529f2a
  0x00007f75704ad46b: add    $0x8,%rsp
  0x00007f75704ad46f: jmpq   Stub::pow+955 0x0x7f75704ad479
  0x00007f75704ad474: callq  0x00007f7585529f2a
  0x00007f75704ad479: vmovsd %xmm0,(%rsp)
  0x00007f75704ad47e: fldl   (%rsp)
  0x00007f75704ad481: add    $0x10,%rsp
  0x00007f75704ad485: vmovdqu (%rsp),%xmm0
  0x00007f75704ad48a: vmovdqu 0x10(%rsp),%xmm1
  0x00007f75704ad490: vmovdqu 0x20(%rsp),%xmm2
  0x00007f75704ad496: vmovdqu 0x30(%rsp),%xmm3
  0x00007f75704ad49c: vmovdqu 0x40(%rsp),%xmm4
  0x00007f75704ad4a2: vmovdqu 0x50(%rsp),%xmm5
  0x00007f75704ad4a8: vmovdqu 0x60(%rsp),%xmm6
  0x00007f75704ad4ae: vmovdqu 0x70(%rsp),%xmm7
  0x00007f75704ad4b4: vmovdqu 0x80(%rsp),%xmm8
  0x00007f75704ad4bd: vmovdqu 0x90(%rsp),%xmm9
  0x00007f75704ad4c6: vmovdqu 0xa0(%rsp),%xmm10
  0x00007f75704ad4cf: vmovdqu 0xb0(%rsp),%xmm11
  0x00007f75704ad4d8: vmovdqu 0xc0(%rsp),%xmm12
  0x00007f75704ad4e1: vmovdqu 0xd0(%rsp),%xmm13
  0x00007f75704ad4ea: vmovdqu 0xe0(%rsp),%xmm14
  0x00007f75704ad4f3: vmovdqu 0xf0(%rsp),%xmm15
  0x00007f75704ad4fc: add    $0x100,%rsp
  0x00007f75704ad503: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x00007f75704ad50a: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x00007f75704ad512: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x00007f75704ad51a: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x00007f75704ad522: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x00007f75704ad52a: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x00007f75704ad532: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x00007f75704ad53a: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x00007f75704ad542: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x00007f75704ad54d: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x00007f75704ad558: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x00007f75704ad563: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x00007f75704ad56e: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x00007f75704ad579: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x00007f75704ad584: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x00007f75704ad58f: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x00007f75704ad59a: add    $0x100,%rsp
  0x00007f75704ad5a1: mov    (%rsp),%r15
  0x00007f75704ad5a5: mov    0x8(%rsp),%r14
  0x00007f75704ad5aa: mov    0x10(%rsp),%r13
  0x00007f75704ad5af: mov    0x18(%rsp),%r12
  0x00007f75704ad5b4: mov    0x20(%rsp),%r11
  0x00007f75704ad5b9: mov    0x28(%rsp),%r10
  0x00007f75704ad5be: mov    0x30(%rsp),%r9
  0x00007f75704ad5c3: mov    0x38(%rsp),%r8
  0x00007f75704ad5c8: mov    0x40(%rsp),%rdi
  0x00007f75704ad5cd: mov    0x48(%rsp),%rsi
  0x00007f75704ad5d2: mov    0x50(%rsp),%rbp
  0x00007f75704ad5d7: mov    0x60(%rsp),%rbx
  0x00007f75704ad5dc: mov    0x68(%rsp),%rdx
  0x00007f75704ad5e1: mov    0x70(%rsp),%rcx
  0x00007f75704ad5e6: mov    0x78(%rsp),%rax
  0x00007f75704ad5eb: add    $0x80,%rsp
  0x00007f75704ad5f2: fstpl  (%rsp)
  0x00007f75704ad5f5: vmovsd (%rsp),%xmm0
  0x00007f75704ad5fa: add    $0x8,%rsp
  0x00007f75704ad5fe: retq   

StubRoutines::key_shuffle_mask [0x00007f75704ad600, 0x00007f75704ad610[ (16 bytes)
  0x00007f75704ad600: add    (%rdx),%eax
  0x00007f75704ad602: add    %eax,(%rax)
  0x00007f75704ad604: (bad)  
  0x00007f75704ad605: (bad)  
  0x00007f75704ad606: add    $0x90a0b04,%eax
  0x00007f75704ad60b: or     %cl,(%rdi)
  0x00007f75704ad60d: (bad)  
  0x00007f75704ad60e: .byte 0xd
  0x00007f75704ad60f: .byte 0xc

StubRoutines::aescrypt_encryptBlock [0x00007f75704ad620, 0x00007f75704ad73a[ (282 bytes)
  0x00007f75704ad620: push   %rbp
  0x00007f75704ad621: mov    %rsp,%rbp
  0x00007f75704ad624: mov    -0x4(%rdx),%eax
  0x00007f75704ad627: vmovdqu -0x2f(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f75704ad62f: vmovdqu (%rdi),%xmm0
  0x00007f75704ad633: vmovdqu (%rdx),%xmm2
  0x00007f75704ad637: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad63c: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f75704ad640: vmovdqu 0x10(%rdx),%xmm2
  0x00007f75704ad645: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad64a: vmovdqu 0x20(%rdx),%xmm3
  0x00007f75704ad64f: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad654: vmovdqu 0x30(%rdx),%xmm4
  0x00007f75704ad659: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f75704ad65e: vmovdqu 0x40(%rdx),%xmm5
  0x00007f75704ad663: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f75704ad668: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f75704ad66d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f75704ad672: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f75704ad677: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f75704ad67c: vmovdqu 0x50(%rdx),%xmm2
  0x00007f75704ad681: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad686: vmovdqu 0x60(%rdx),%xmm3
  0x00007f75704ad68b: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad690: vmovdqu 0x70(%rdx),%xmm4
  0x00007f75704ad695: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f75704ad69a: vmovdqu 0x80(%rdx),%xmm5
  0x00007f75704ad6a2: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f75704ad6a7: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f75704ad6ac: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f75704ad6b1: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f75704ad6b6: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f75704ad6bb: vmovdqu 0x90(%rdx),%xmm2
  0x00007f75704ad6c3: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad6c8: vmovdqu 0xa0(%rdx),%xmm3
  0x00007f75704ad6d0: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad6d5: cmp    $0x2c,%eax
  0x00007f75704ad6d8: je     Stub::aescrypt_encryptBlock+263 0x0x7f75704ad727
  0x00007f75704ad6da: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f75704ad6df: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f75704ad6e4: vmovdqu 0xb0(%rdx),%xmm2
  0x00007f75704ad6ec: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad6f1: vmovdqu 0xc0(%rdx),%xmm3
  0x00007f75704ad6f9: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad6fe: cmp    $0x34,%eax
  0x00007f75704ad701: je     Stub::aescrypt_encryptBlock+263 0x0x7f75704ad727
  0x00007f75704ad703: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f75704ad708: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f75704ad70d: vmovdqu 0xd0(%rdx),%xmm2
  0x00007f75704ad715: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad71a: vmovdqu 0xe0(%rdx),%xmm3
  0x00007f75704ad722: vpshufb %xmm1,%xmm3,%xmm3
  ;; L_doLast:
  0x00007f75704ad727: vaesenc %xmm2,%xmm0,%xmm0
  0x00007f75704ad72c: vaesenclast %xmm3,%xmm0,%xmm0
  0x00007f75704ad731: vmovdqu %xmm0,(%rsi)
  0x00007f75704ad735: xor    %rax,%rax
  0x00007f75704ad738: leaveq 
  0x00007f75704ad739: retq   

StubRoutines::aescrypt_decryptBlock [0x00007f75704ad740, 0x00007f75704ad85a[ (282 bytes)
  0x00007f75704ad740: push   %rbp
  0x00007f75704ad741: mov    %rsp,%rbp
  0x00007f75704ad744: mov    -0x4(%rdx),%eax
  0x00007f75704ad747: vmovdqu -0x14f(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f75704ad74f: vmovdqu (%rdi),%xmm0
  0x00007f75704ad753: vmovdqu 0x10(%rdx),%xmm2
  0x00007f75704ad758: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad75d: vmovdqu 0x20(%rdx),%xmm3
  0x00007f75704ad762: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad767: vmovdqu 0x30(%rdx),%xmm4
  0x00007f75704ad76c: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f75704ad771: vmovdqu 0x40(%rdx),%xmm5
  0x00007f75704ad776: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f75704ad77b: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f75704ad77f: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f75704ad784: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f75704ad789: vaesdec %xmm5,%xmm0,%xmm0
  0x00007f75704ad78e: vmovdqu 0x50(%rdx),%xmm2
  0x00007f75704ad793: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad798: vmovdqu 0x60(%rdx),%xmm3
  0x00007f75704ad79d: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad7a2: vmovdqu 0x70(%rdx),%xmm4
  0x00007f75704ad7a7: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f75704ad7ac: vmovdqu 0x80(%rdx),%xmm5
  0x00007f75704ad7b4: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f75704ad7b9: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f75704ad7be: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f75704ad7c3: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f75704ad7c8: vaesdec %xmm5,%xmm0,%xmm0
  0x00007f75704ad7cd: vmovdqu 0x90(%rdx),%xmm2
  0x00007f75704ad7d5: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad7da: vmovdqu 0xa0(%rdx),%xmm3
  0x00007f75704ad7e2: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad7e7: vmovdqu (%rdx),%xmm4
  0x00007f75704ad7eb: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f75704ad7f0: cmp    $0x2c,%eax
  0x00007f75704ad7f3: je     Stub::aescrypt_decryptBlock+258 0x0x7f75704ad842
  0x00007f75704ad7f5: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f75704ad7fa: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f75704ad7ff: vmovdqu 0xb0(%rdx),%xmm2
  0x00007f75704ad807: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad80c: vmovdqu 0xc0(%rdx),%xmm3
  0x00007f75704ad814: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad819: cmp    $0x34,%eax
  0x00007f75704ad81c: je     Stub::aescrypt_decryptBlock+258 0x0x7f75704ad842
  0x00007f75704ad81e: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f75704ad823: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f75704ad828: vmovdqu 0xd0(%rdx),%xmm2
  0x00007f75704ad830: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad835: vmovdqu 0xe0(%rdx),%xmm3
  0x00007f75704ad83d: vpshufb %xmm1,%xmm3,%xmm3
  ;; L_doLast:
  0x00007f75704ad842: vaesdec %xmm2,%xmm0,%xmm0
  0x00007f75704ad847: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f75704ad84c: vaesdeclast %xmm4,%xmm0,%xmm0
  0x00007f75704ad851: vmovdqu %xmm0,(%rsi)
  0x00007f75704ad855: xor    %rax,%rax
  0x00007f75704ad858: leaveq 
  0x00007f75704ad859: retq   

StubRoutines::cipherBlockChaining_encryptAESCrypt [0x00007f75704ad860, 0x00007f75704ada88[ (552 bytes)
  0x00007f75704ad860: push   %rbp
  0x00007f75704ad861: mov    %rsp,%rbp
  0x00007f75704ad864: push   %r8
  0x00007f75704ad866: vmovdqu -0x26e(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f75704ad86e: vmovdqu (%rdx),%xmm2
  0x00007f75704ad872: vpshufb %xmm1,%xmm2,%xmm2
  0x00007f75704ad877: vmovdqu 0x10(%rdx),%xmm3
  0x00007f75704ad87c: vpshufb %xmm1,%xmm3,%xmm3
  0x00007f75704ad881: vmovdqu 0x20(%rdx),%xmm4
  0x00007f75704ad886: vpshufb %xmm1,%xmm4,%xmm4
  0x00007f75704ad88b: vmovdqu 0x30(%rdx),%xmm5
  0x00007f75704ad890: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f75704ad895: vmovdqu 0x40(%rdx),%xmm6
  0x00007f75704ad89a: vpshufb %xmm1,%xmm6,%xmm6
  0x00007f75704ad89f: vmovdqu 0x50(%rdx),%xmm7
  0x00007f75704ad8a4: vpshufb %xmm1,%xmm7,%xmm7
  0x00007f75704ad8a9: vmovdqu 0x60(%rdx),%xmm8
  0x00007f75704ad8ae: vpshufb %xmm1,%xmm8,%xmm8
  0x00007f75704ad8b3: vmovdqu 0x70(%rdx),%xmm9
  0x00007f75704ad8b8: vpshufb %xmm1,%xmm9,%xmm9
  0x00007f75704ad8bd: vmovdqu 0x80(%rdx),%xmm10
  0x00007f75704ad8c5: vpshufb %xmm1,%xmm10,%xmm10
  0x00007f75704ad8ca: vmovdqu 0x90(%rdx),%xmm11
  0x00007f75704ad8d2: vpshufb %xmm1,%xmm11,%xmm11
  0x00007f75704ad8d7: vmovdqu 0xa0(%rdx),%xmm12
  0x00007f75704ad8df: vpshufb %xmm1,%xmm12,%xmm12
  0x00007f75704ad8e4: vmovdqu (%rcx),%xmm0
  0x00007f75704ad8e8: mov    -0x4(%rdx),%eax
  0x00007f75704ad8eb: cmp    $0x2c,%eax
  0x00007f75704ad8ee: jne    Stub::cipherBlockChaining_encryptAESCrypt+245 0x0x7f75704ad955
  0x00007f75704ad8f4: movabs $0x0,%rax
  0x00007f75704ad8fe: nop
  0x00007f75704ad8ff: nop
  ;; L_loopTop_128:
  0x00007f75704ad900: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f75704ad905: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f75704ad909: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f75704ad90d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f75704ad912: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f75704ad917: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f75704ad91c: vaesenc %xmm6,%xmm0,%xmm0
  0x00007f75704ad921: vaesenc %xmm7,%xmm0,%xmm0
  0x00007f75704ad926: vaesenc %xmm8,%xmm0,%xmm0
  0x00007f75704ad92b: vaesenc %xmm9,%xmm0,%xmm0
  0x00007f75704ad930: vaesenc %xmm10,%xmm0,%xmm0
  0x00007f75704ad935: vaesenc %xmm11,%xmm0,%xmm0
  0x00007f75704ad93a: vaesenclast %xmm12,%xmm0,%xmm0
  0x00007f75704ad93f: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f75704ad944: add    $0x10,%rax
  0x00007f75704ad948: sub    $0x10,%r8
  0x00007f75704ad94c: jne    Stub::cipherBlockChaining_encryptAESCrypt+160 0x0x7f75704ad900
  ;; L_exit:
  0x00007f75704ad94e: vmovdqu %xmm0,(%rcx)
  0x00007f75704ad952: pop    %rax
  0x00007f75704ad953: leaveq 
  0x00007f75704ad954: retq   
  ;; L_key_192_256:
  0x00007f75704ad955: vmovdqu 0xb0(%rdx),%xmm13
  0x00007f75704ad95d: vpshufb %xmm1,%xmm13,%xmm13
  0x00007f75704ad962: vmovdqu 0xc0(%rdx),%xmm14
  0x00007f75704ad96a: vpshufb %xmm1,%xmm14,%xmm14
  0x00007f75704ad96f: cmp    $0x34,%eax
  0x00007f75704ad972: jne    Stub::cipherBlockChaining_encryptAESCrypt+397 0x0x7f75704ad9ed
  0x00007f75704ad978: movabs $0x0,%rax
  0x00007f75704ad982: nop
  0x00007f75704ad983: nop
  0x00007f75704ad984: nop
  0x00007f75704ad985: nop
  0x00007f75704ad986: nop
  0x00007f75704ad987: nop
  0x00007f75704ad988: nop
  0x00007f75704ad989: nop
  0x00007f75704ad98a: nop
  0x00007f75704ad98b: nop
  0x00007f75704ad98c: nop
  0x00007f75704ad98d: nop
  0x00007f75704ad98e: nop
  0x00007f75704ad98f: nop
  ;; L_loopTop_192:
  0x00007f75704ad990: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f75704ad995: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f75704ad999: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f75704ad99d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f75704ad9a2: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f75704ad9a7: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f75704ad9ac: vaesenc %xmm6,%xmm0,%xmm0
  0x00007f75704ad9b1: vaesenc %xmm7,%xmm0,%xmm0
  0x00007f75704ad9b6: vaesenc %xmm8,%xmm0,%xmm0
  0x00007f75704ad9bb: vaesenc %xmm9,%xmm0,%xmm0
  0x00007f75704ad9c0: vaesenc %xmm10,%xmm0,%xmm0
  0x00007f75704ad9c5: vaesenc %xmm11,%xmm0,%xmm0
  0x00007f75704ad9ca: vaesenc %xmm12,%xmm0,%xmm0
  0x00007f75704ad9cf: vaesenc %xmm13,%xmm0,%xmm0
  0x00007f75704ad9d4: vaesenclast %xmm14,%xmm0,%xmm0
  0x00007f75704ad9d9: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f75704ad9de: add    $0x10,%rax
  0x00007f75704ad9e2: sub    $0x10,%r8
  0x00007f75704ad9e6: jne    Stub::cipherBlockChaining_encryptAESCrypt+304 0x0x7f75704ad990
  0x00007f75704ad9e8: jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x0x7f75704ad94e
  ;; L_key_256:
  0x00007f75704ad9ed: vmovdqu 0xd0(%rdx),%xmm15
  0x00007f75704ad9f5: vpshufb %xmm1,%xmm15,%xmm15
  0x00007f75704ad9fa: movabs $0x0,%rax
  0x00007f75704ada04: nop
  0x00007f75704ada05: nop
  0x00007f75704ada06: nop
  0x00007f75704ada07: nop
  0x00007f75704ada08: nop
  0x00007f75704ada09: nop
  0x00007f75704ada0a: nop
  0x00007f75704ada0b: nop
  0x00007f75704ada0c: nop
  0x00007f75704ada0d: nop
  0x00007f75704ada0e: nop
  0x00007f75704ada0f: nop
  ;; L_loopTop_256:
  0x00007f75704ada10: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f75704ada15: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f75704ada19: vpxor  %xmm2,%xmm0,%xmm0
  0x00007f75704ada1d: vaesenc %xmm3,%xmm0,%xmm0
  0x00007f75704ada22: vaesenc %xmm4,%xmm0,%xmm0
  0x00007f75704ada27: vaesenc %xmm5,%xmm0,%xmm0
  0x00007f75704ada2c: vaesenc %xmm6,%xmm0,%xmm0
  0x00007f75704ada31: vaesenc %xmm7,%xmm0,%xmm0
  0x00007f75704ada36: vaesenc %xmm8,%xmm0,%xmm0
  0x00007f75704ada3b: vaesenc %xmm9,%xmm0,%xmm0
  0x00007f75704ada40: vaesenc %xmm10,%xmm0,%xmm0
  0x00007f75704ada45: vaesenc %xmm11,%xmm0,%xmm0
  0x00007f75704ada4a: vaesenc %xmm12,%xmm0,%xmm0
  0x00007f75704ada4f: vaesenc %xmm13,%xmm0,%xmm0
  0x00007f75704ada54: vaesenc %xmm14,%xmm0,%xmm0
  0x00007f75704ada59: vaesenc %xmm15,%xmm0,%xmm0
  0x00007f75704ada5e: vmovdqu 0xe0(%rdx),%xmm1
  0x00007f75704ada66: vpshufb -0x46f(%rip),%xmm1,%xmm1        # Stub::key_shuffle_mask
  0x00007f75704ada6f: vaesenclast %xmm1,%xmm0,%xmm0
  0x00007f75704ada74: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f75704ada79: add    $0x10,%rax
  0x00007f75704ada7d: sub    $0x10,%r8
  0x00007f75704ada81: jne    Stub::cipherBlockChaining_encryptAESCrypt+432 0x0x7f75704ada10
  0x00007f75704ada83: jmpq   Stub::cipherBlockChaining_encryptAESCrypt+238 0x0x7f75704ad94e

StubRoutines::cipherBlockChaining_decryptAESCrypt [0x00007f75704adaa0, 0x00007f75704ade46[ (934 bytes)
  0x00007f75704adaa0: push   %rbp
  0x00007f75704adaa1: mov    %rsp,%rbp
  0x00007f75704adaa4: push   %r8
  0x00007f75704adaa6: vmovdqu -0x4ae(%rip),%xmm1        # Stub::key_shuffle_mask
  0x00007f75704adaae: vmovdqu 0x10(%rdx),%xmm5
  0x00007f75704adab3: vpshufb %xmm1,%xmm5,%xmm5
  0x00007f75704adab8: vmovdqu 0x20(%rdx),%xmm6
  0x00007f75704adabd: vpshufb %xmm1,%xmm6,%xmm6
  0x00007f75704adac2: vmovdqu 0x30(%rdx),%xmm7
  0x00007f75704adac7: vpshufb %xmm1,%xmm7,%xmm7
  0x00007f75704adacc: vmovdqu 0x40(%rdx),%xmm8
  0x00007f75704adad1: vpshufb %xmm1,%xmm8,%xmm8
  0x00007f75704adad6: vmovdqu 0x50(%rdx),%xmm9
  0x00007f75704adadb: vpshufb %xmm1,%xmm9,%xmm9
  0x00007f75704adae0: vmovdqu 0x60(%rdx),%xmm10
  0x00007f75704adae5: vpshufb %xmm1,%xmm10,%xmm10
  0x00007f75704adaea: vmovdqu 0x70(%rdx),%xmm11
  0x00007f75704adaef: vpshufb %xmm1,%xmm11,%xmm11
  0x00007f75704adaf4: vmovdqu 0x80(%rdx),%xmm12
  0x00007f75704adafc: vpshufb %xmm1,%xmm12,%xmm12
  0x00007f75704adb01: vmovdqu 0x90(%rdx),%xmm13
  0x00007f75704adb09: vpshufb %xmm1,%xmm13,%xmm13
  0x00007f75704adb0e: vmovdqu 0xa0(%rdx),%xmm14
  0x00007f75704adb16: vpshufb %xmm1,%xmm14,%xmm14
  0x00007f75704adb1b: vmovdqu (%rdx),%xmm15
  0x00007f75704adb1f: vpshufb %xmm1,%xmm15,%xmm15
  0x00007f75704adb24: vmovdqu (%rcx),%xmm1
  0x00007f75704adb28: mov    -0x4(%rdx),%eax
  0x00007f75704adb2b: cmp    $0x2c,%eax
  0x00007f75704adb2e: jne    Stub::cipherBlockChaining_decryptAESCrypt+599 0x0x7f75704adcf7
  0x00007f75704adb34: movabs $0x0,%rax
  0x00007f75704adb3e: nop
  0x00007f75704adb3f: nop
  ;; L_multiBlock_loopTop_128:
  0x00007f75704adb40: cmp    $0x40,%r8
  0x00007f75704adb44: jl     Stub::cipherBlockChaining_decryptAESCrypt+496 0x0x7f75704adc90
  0x00007f75704adb4a: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f75704adb4f: vmovdqu 0x10(%rdi,%rax,1),%xmm2
  0x00007f75704adb55: vmovdqu 0x20(%rdi,%rax,1),%xmm3
  0x00007f75704adb5b: vmovdqu 0x30(%rdi,%rax,1),%xmm4
  0x00007f75704adb61: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f75704adb65: vpxor  %xmm5,%xmm2,%xmm2
  0x00007f75704adb69: vpxor  %xmm5,%xmm3,%xmm3
  0x00007f75704adb6d: vpxor  %xmm5,%xmm4,%xmm4
  0x00007f75704adb71: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f75704adb76: vaesdec %xmm6,%xmm2,%xmm2
  0x00007f75704adb7b: vaesdec %xmm6,%xmm3,%xmm3
  0x00007f75704adb80: vaesdec %xmm6,%xmm4,%xmm4
  0x00007f75704adb85: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f75704adb8a: vaesdec %xmm7,%xmm2,%xmm2
  0x00007f75704adb8f: vaesdec %xmm7,%xmm3,%xmm3
  0x00007f75704adb94: vaesdec %xmm7,%xmm4,%xmm4
  0x00007f75704adb99: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f75704adb9e: vaesdec %xmm8,%xmm2,%xmm2
  0x00007f75704adba3: vaesdec %xmm8,%xmm3,%xmm3
  0x00007f75704adba8: vaesdec %xmm8,%xmm4,%xmm4
  0x00007f75704adbad: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f75704adbb2: vaesdec %xmm9,%xmm2,%xmm2
  0x00007f75704adbb7: vaesdec %xmm9,%xmm3,%xmm3
  0x00007f75704adbbc: vaesdec %xmm9,%xmm4,%xmm4
  0x00007f75704adbc1: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f75704adbc6: vaesdec %xmm10,%xmm2,%xmm2
  0x00007f75704adbcb: vaesdec %xmm10,%xmm3,%xmm3
  0x00007f75704adbd0: vaesdec %xmm10,%xmm4,%xmm4
  0x00007f75704adbd5: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f75704adbda: vaesdec %xmm11,%xmm2,%xmm2
  0x00007f75704adbdf: vaesdec %xmm11,%xmm3,%xmm3
  0x00007f75704adbe4: vaesdec %xmm11,%xmm4,%xmm4
  0x00007f75704adbe9: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f75704adbee: vaesdec %xmm12,%xmm2,%xmm2
  0x00007f75704adbf3: vaesdec %xmm12,%xmm3,%xmm3
  0x00007f75704adbf8: vaesdec %xmm12,%xmm4,%xmm4
  0x00007f75704adbfd: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f75704adc02: vaesdec %xmm13,%xmm2,%xmm2
  0x00007f75704adc07: vaesdec %xmm13,%xmm3,%xmm3
  0x00007f75704adc0c: vaesdec %xmm13,%xmm4,%xmm4
  0x00007f75704adc11: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f75704adc16: vaesdec %xmm14,%xmm2,%xmm2
  0x00007f75704adc1b: vaesdec %xmm14,%xmm3,%xmm3
  0x00007f75704adc20: vaesdec %xmm14,%xmm4,%xmm4
  0x00007f75704adc25: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f75704adc2a: vaesdeclast %xmm15,%xmm2,%xmm2
  0x00007f75704adc2f: vaesdeclast %xmm15,%xmm3,%xmm3
  0x00007f75704adc34: vaesdeclast %xmm15,%xmm4,%xmm4
  0x00007f75704adc39: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f75704adc3d: vmovdqu (%rdi,%rax,1),%xmm1
  0x00007f75704adc42: vpxor  %xmm1,%xmm2,%xmm2
  0x00007f75704adc46: vmovdqu 0x10(%rdi,%rax,1),%xmm1
  0x00007f75704adc4c: vpxor  %xmm1,%xmm3,%xmm3
  0x00007f75704adc50: vmovdqu 0x20(%rdi,%rax,1),%xmm1
  0x00007f75704adc56: vpxor  %xmm1,%xmm4,%xmm4
  0x00007f75704adc5a: vmovdqu 0x30(%rdi,%rax,1),%xmm1
  0x00007f75704adc60: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f75704adc65: vmovdqu %xmm2,0x10(%rsi,%rax,1)
  0x00007f75704adc6b: vmovdqu %xmm3,0x20(%rsi,%rax,1)
  0x00007f75704adc71: vmovdqu %xmm4,0x30(%rsi,%rax,1)
  0x00007f75704adc77: add    $0x40,%rax
  0x00007f75704adc7b: sub    $0x40,%r8
  0x00007f75704adc7f: jmpq   Stub::cipherBlockChaining_decryptAESCrypt+160 0x0x7f75704adb40
  0x00007f75704adc84: nop
  0x00007f75704adc85: nop
  0x00007f75704adc86: nop
  0x00007f75704adc87: nop
  0x00007f75704adc88: nop
  0x00007f75704adc89: nop
  0x00007f75704adc8a: nop
  0x00007f75704adc8b: nop
  0x00007f75704adc8c: nop
  0x00007f75704adc8d: nop
  0x00007f75704adc8e: nop
  0x00007f75704adc8f: nop
  ;; L_singleBlock_loopTop_128:
  0x00007f75704adc90: cmp    $0x0,%r8
  0x00007f75704adc94: je     Stub::cipherBlockChaining_decryptAESCrypt+592 0x0x7f75704adcf0
  0x00007f75704adc9a: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f75704adc9f: vmovdqa %xmm0,%xmm2
  0x00007f75704adca3: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f75704adca7: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f75704adcac: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f75704adcb1: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f75704adcb6: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f75704adcbb: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f75704adcc0: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f75704adcc5: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f75704adcca: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f75704adccf: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f75704adcd4: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f75704adcd9: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f75704adcdd: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f75704adce2: vmovdqa %xmm2,%xmm1
  0x00007f75704adce6: add    $0x10,%rax
  0x00007f75704adcea: sub    $0x10,%r8
  0x00007f75704adcee: jmp    Stub::cipherBlockChaining_decryptAESCrypt+496 0x0x7f75704adc90
  ;; L_exit:
  0x00007f75704adcf0: vmovdqu %xmm1,(%rcx)
  0x00007f75704adcf4: pop    %rax
  0x00007f75704adcf5: leaveq 
  0x00007f75704adcf6: retq   
  ;; L_key_192_256:
  0x00007f75704adcf7: vmovdqu 0xb0(%rdx),%xmm3
  0x00007f75704adcff: vpshufb -0x708(%rip),%xmm3,%xmm3        # Stub::key_shuffle_mask
  0x00007f75704add08: cmp    $0x34,%eax
  0x00007f75704add0b: jne    Stub::cipherBlockChaining_decryptAESCrypt+757 0x0x7f75704add95
  0x00007f75704add11: vmovdqu 0xc0(%rdx),%xmm4
  0x00007f75704add19: vpshufb -0x722(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f75704add22: movabs $0x0,%rax
  0x00007f75704add2c: nop
  0x00007f75704add2d: nop
  0x00007f75704add2e: nop
  0x00007f75704add2f: nop
  ;; L_singleBlock_loopTop_192:
  0x00007f75704add30: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f75704add35: vmovdqa %xmm0,%xmm2
  0x00007f75704add39: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f75704add3d: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f75704add42: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f75704add47: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f75704add4c: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f75704add51: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f75704add56: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f75704add5b: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f75704add60: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f75704add65: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f75704add6a: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f75704add6f: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f75704add74: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f75704add79: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f75704add7d: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f75704add82: vmovdqa %xmm2,%xmm1
  0x00007f75704add86: add    $0x10,%rax
  0x00007f75704add8a: sub    $0x10,%r8
  0x00007f75704add8e: jne    Stub::cipherBlockChaining_decryptAESCrypt+656 0x0x7f75704add30
  0x00007f75704add90: jmpq   Stub::cipherBlockChaining_decryptAESCrypt+592 0x0x7f75704adcf0
  ;; L_key_256:
  0x00007f75704add95: movabs $0x0,%rax
  0x00007f75704add9f: nop
  ;; L_singleBlock_loopTop_256:
  0x00007f75704adda0: vmovdqu (%rdi,%rax,1),%xmm0
  0x00007f75704adda5: vmovdqa %xmm0,%xmm2
  0x00007f75704adda9: vpxor  %xmm5,%xmm0,%xmm0
  0x00007f75704addad: vaesdec %xmm6,%xmm0,%xmm0
  0x00007f75704addb2: vaesdec %xmm7,%xmm0,%xmm0
  0x00007f75704addb7: vaesdec %xmm8,%xmm0,%xmm0
  0x00007f75704addbc: vaesdec %xmm9,%xmm0,%xmm0
  0x00007f75704addc1: vaesdec %xmm10,%xmm0,%xmm0
  0x00007f75704addc6: vaesdec %xmm11,%xmm0,%xmm0
  0x00007f75704addcb: vaesdec %xmm12,%xmm0,%xmm0
  0x00007f75704addd0: vaesdec %xmm13,%xmm0,%xmm0
  0x00007f75704addd5: vaesdec %xmm14,%xmm0,%xmm0
  0x00007f75704addda: vaesdec %xmm3,%xmm0,%xmm0
  0x00007f75704adddf: vmovdqu 0xc0(%rdx),%xmm4
  0x00007f75704adde7: vpshufb -0x7f0(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f75704addf0: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f75704addf5: vmovdqu 0xd0(%rdx),%xmm4
  0x00007f75704addfd: vpshufb -0x806(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f75704ade06: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f75704ade0b: vmovdqu 0xe0(%rdx),%xmm4
  0x00007f75704ade13: vpshufb -0x81c(%rip),%xmm4,%xmm4        # Stub::key_shuffle_mask
  0x00007f75704ade1c: vaesdec %xmm4,%xmm0,%xmm0
  0x00007f75704ade21: vaesdeclast %xmm15,%xmm0,%xmm0
  0x00007f75704ade26: vpxor  %xmm1,%xmm0,%xmm0
  0x00007f75704ade2a: vmovdqu %xmm0,(%rsi,%rax,1)
  0x00007f75704ade2f: vmovdqa %xmm2,%xmm1
  0x00007f75704ade33: add    $0x10,%rax
  0x00007f75704ade37: sub    $0x10,%r8
  0x00007f75704ade3b: jne    Stub::cipherBlockChaining_decryptAESCrypt+768 0x0x7f75704adda0
  0x00007f75704ade41: jmpq   Stub::cipherBlockChaining_decryptAESCrypt+592 0x0x7f75704adcf0

StubRoutines::SafeFetch32 [0x00007f75704ade46, 0x00007f75704ade4c[ (6 bytes)
  0x00007f75704ade46: mov    (%rdi),%esi
  0x00007f75704ade48: mov    %rsi,%rax
  0x00007f75704ade4b: retq   

StubRoutines::SafeFetchN [0x00007f75704ade4c, 0x00007f75704ade53[ (7 bytes)
  0x00007f75704ade4c: mov    (%rdi),%rsi
  0x00007f75704ade4f: mov    %rsi,%rax
  0x00007f75704ade52: retq   

StubRoutines::multiplyToLen [0x00007f75704ade60, 0x00007f75704ae079[ (537 bytes)
  ;; Entry:
  0x00007f75704ade60: push   %rbp
  0x00007f75704ade61: mov    %rsp,%rbp
  0x00007f75704ade64: mov    %r9,%r11
  0x00007f75704ade67: mov    %rsi,%rax
  0x00007f75704ade6a: mov    %rdx,%rsi
  0x00007f75704ade6d: push   %r12
  0x00007f75704ade6f: push   %r13
  0x00007f75704ade71: push   %r14
  0x00007f75704ade73: push   %r15
  0x00007f75704ade75: push   %rbx
  0x00007f75704ade76: push   %rax
  0x00007f75704ade77: push   %r11
  0x00007f75704ade79: mov    %ecx,%r12d
  0x00007f75704ade7c: mov    %r11d,%r13d
  0x00007f75704ade7f: xor    %rbx,%rbx
  0x00007f75704ade82: mov    %eax,%r14d
  0x00007f75704ade85: dec    %r14d
  0x00007f75704ade88: js     Stub::multiplyToLen+523 0x0x7f75704ae06b
  0x00007f75704ade8e: dec    %r14d
  0x00007f75704ade91: js     Stub::multiplyToLen+129 0x0x7f75704adee1
  0x00007f75704ade97: mov    (%rdi,%r14,4),%r11
  0x00007f75704ade9b: ror    $0x20,%r11
  0x00007f75704ade9f: dec    %r12d
  0x00007f75704adea2: js     Stub::multiplyToLen+134 0x0x7f75704adee6
  0x00007f75704adea8: dec    %r12d
  0x00007f75704adeab: js     Stub::multiplyToLen+124 0x0x7f75704adedc
  0x00007f75704adeb1: mov    (%rsi,%r12,4),%r15
  0x00007f75704adeb5: ror    $0x20,%r15
  0x00007f75704adeb9: mov    %r11,%rax
  0x00007f75704adebc: mul    %r15
  0x00007f75704adebf: add    %rbx,%rax
  0x00007f75704adec2: adc    $0x0,%rdx
  0x00007f75704adec6: sub    $0x2,%r13d
  0x00007f75704adeca: mov    %eax,0x4(%r8,%r13,4)
  0x00007f75704adecf: shr    $0x20,%rax
  0x00007f75704aded3: mov    %eax,(%r8,%r13,4)
  0x00007f75704aded7: mov    %rdx,%rbx
  0x00007f75704adeda: jmp    Stub::multiplyToLen+63 0x0x7f75704ade9f
  0x00007f75704adedc: mov    (%rsi),%r15d
  0x00007f75704adedf: jmp    Stub::multiplyToLen+89 0x0x7f75704adeb9
  0x00007f75704adee1: mov    (%rdi),%r11d
  0x00007f75704adee4: jmp    Stub::multiplyToLen+63 0x0x7f75704ade9f
  0x00007f75704adee6: test   %r13d,%r13d
  0x00007f75704adee9: je     Stub::multiplyToLen+169 0x0x7f75704adf09
  0x00007f75704adeef: sub    $0x1,%r13d
  0x00007f75704adef3: je     Stub::multiplyToLen+165 0x0x7f75704adf05
  0x00007f75704adef9: mov    %ebx,(%r8,%r13,4)
  0x00007f75704adefd: shr    $0x20,%rbx
  0x00007f75704adf01: sub    $0x1,%r13d
  0x00007f75704adf05: mov    %ebx,(%r8,%r13,4)
  0x00007f75704adf09: xor    %ebx,%ebx
  0x00007f75704adf0b: mov    %ecx,%r12d
  0x00007f75704adf0e: sub    $0x1,%r14d
  0x00007f75704adf12: js     Stub::multiplyToLen+523 0x0x7f75704ae06b
  0x00007f75704adf18: push   %r8
  0x00007f75704adf1a: lea    0x4(%r8,%r14,4),%r8
  0x00007f75704adf1f: sub    $0x1,%r14d
  0x00007f75704adf23: js     Stub::multiplyToLen+515 0x0x7f75704ae063
  0x00007f75704adf29: mov    (%rdi,%r14,4),%r11
  0x00007f75704adf2d: ror    $0x20,%r11
  0x00007f75704adf31: push   %rdi
  0x00007f75704adf32: push   %r14
  0x00007f75704adf34: push   %rcx
  0x00007f75704adf35: mov    %r12d,%ecx
  0x00007f75704adf38: and    $0xfffffffc,%ecx
  0x00007f75704adf3b: shr    $0x2,%ecx
  0x00007f75704adf3e: sub    $0x1,%ecx
  0x00007f75704adf41: js     Stub::multiplyToLen+344 0x0x7f75704adfb8
  0x00007f75704adf47: sub    $0x4,%r12d
  0x00007f75704adf4b: mov    0x8(%rsi,%r12,4),%r15
  0x00007f75704adf50: ror    $0x20,%r15
  0x00007f75704adf54: mov    %r11,%rax
  0x00007f75704adf57: mul    %r15
  0x00007f75704adf5a: mov    0x8(%r8,%r12,4),%r15
  0x00007f75704adf5f: ror    $0x20,%r15
  0x00007f75704adf63: add    %rbx,%rax
  0x00007f75704adf66: adc    $0x0,%rdx
  0x00007f75704adf6a: add    %r15,%rax
  0x00007f75704adf6d: adc    $0x0,%rdx
  0x00007f75704adf71: mov    %eax,0xc(%r8,%r12,4)
  0x00007f75704adf76: shr    $0x20,%rax
  0x00007f75704adf7a: mov    %eax,0x8(%r8,%r12,4)
  0x00007f75704adf7f: mov    %rdx,%rdi
  0x00007f75704adf82: mov    (%rsi,%r12,4),%r15
  0x00007f75704adf86: ror    $0x20,%r15
  0x00007f75704adf8a: mov    %r11,%rax
  0x00007f75704adf8d: mul    %r15
  0x00007f75704adf90: mov    (%r8,%r12,4),%r15
  0x00007f75704adf94: ror    $0x20,%r15
  0x00007f75704adf98: add    %rdi,%rax
  0x00007f75704adf9b: adc    $0x0,%rdx
  0x00007f75704adf9f: add    %r15,%rax
  0x00007f75704adfa2: adc    $0x0,%rdx
  0x00007f75704adfa6: mov    %eax,0x4(%r8,%r12,4)
  0x00007f75704adfab: shr    $0x20,%rax
  0x00007f75704adfaf: mov    %eax,(%r8,%r12,4)
  0x00007f75704adfb3: mov    %rdx,%rbx
  0x00007f75704adfb6: jmp    Stub::multiplyToLen+222 0x0x7f75704adf3e
  0x00007f75704adfb8: and    $0x3,%r12d
  0x00007f75704adfbc: je     Stub::multiplyToLen+480 0x0x7f75704ae040
  0x00007f75704adfc2: sub    $0x2,%r12d
  0x00007f75704adfc6: js     Stub::multiplyToLen+416 0x0x7f75704ae000
  0x00007f75704adfcc: mov    (%rsi,%r12,4),%r15
  0x00007f75704adfd0: ror    $0x20,%r15
  0x00007f75704adfd4: mov    %r11,%rax
  0x00007f75704adfd7: mul    %r15
  0x00007f75704adfda: mov    (%r8,%r12,4),%r15
  0x00007f75704adfde: ror    $0x20,%r15
  0x00007f75704adfe2: add    %rbx,%rax
  0x00007f75704adfe5: adc    $0x0,%rdx
  0x00007f75704adfe9: add    %r15,%rax
  0x00007f75704adfec: adc    $0x0,%rdx
  0x00007f75704adff0: mov    %eax,0x4(%r8,%r12,4)
  0x00007f75704adff5: shr    $0x20,%rax
  0x00007f75704adff9: mov    %eax,(%r8,%r12,4)
  0x00007f75704adffd: mov    %rdx,%rbx
  0x00007f75704ae000: add    $0x2,%r12d
  0x00007f75704ae004: and    $0x1,%r12d
  0x00007f75704ae008: sub    $0x1,%r12d
  0x00007f75704ae00c: js     Stub::multiplyToLen+480 0x0x7f75704ae040
  0x00007f75704ae012: mov    (%rsi,%r12,4),%r15d
  0x00007f75704ae016: mov    %r11,%rax
  0x00007f75704ae019: mul    %r15
  0x00007f75704ae01c: mov    (%r8,%r12,4),%r15d
  0x00007f75704ae020: add    %r15,%rax
  0x00007f75704ae023: adc    $0x0,%rdx
  0x00007f75704ae027: add    %rbx,%rax
  0x00007f75704ae02a: adc    $0x0,%rdx
  0x00007f75704ae02e: mov    %eax,(%r8,%r12,4)
  0x00007f75704ae032: shr    $0x20,%rax
  0x00007f75704ae036: shl    $0x20,%rdx
  0x00007f75704ae03a: or     %rdx,%rax
  0x00007f75704ae03d: mov    %rax,%rbx
  0x00007f75704ae040: pop    %rcx
  0x00007f75704ae041: pop    %rax
  0x00007f75704ae042: pop    %rdi
  0x00007f75704ae043: pop    %r8
  0x00007f75704ae045: mov    %eax,%r14d
  0x00007f75704ae048: add    $0x1,%r14d
  0x00007f75704ae04c: mov    %ebx,(%r8,%r14,4)
  0x00007f75704ae050: sub    $0x1,%r14d
  0x00007f75704ae054: js     Stub::multiplyToLen+523 0x0x7f75704ae06b
  0x00007f75704ae056: shr    $0x20,%rbx
  0x00007f75704ae05a: mov    %ebx,(%r8,%r14,4)
  0x00007f75704ae05e: jmpq   Stub::multiplyToLen+169 0x0x7f75704adf09
  0x00007f75704ae063: mov    (%rdi),%r11d
  0x00007f75704ae066: jmpq   Stub::multiplyToLen+209 0x0x7f75704adf31
  0x00007f75704ae06b: pop    %r11
  0x00007f75704ae06d: pop    %rax
  0x00007f75704ae06e: pop    %rbx
  0x00007f75704ae06f: pop    %r15
  0x00007f75704ae071: pop    %r14
  0x00007f75704ae073: pop    %r13
  0x00007f75704ae075: pop    %r12
  0x00007f75704ae077: leaveq 
  0x00007f75704ae078: retq   

StubRoutines::squareToLen [0x00007f75704ae080, 0x00007f75704ae1ad[ (301 bytes)
  ;; Entry:
  0x00007f75704ae080: push   %rbp
  0x00007f75704ae081: mov    %rsp,%rbp
  0x00007f75704ae084: mov    %rdx,%r8
  0x00007f75704ae087: push   %r12
  0x00007f75704ae089: push   %r13
  0x00007f75704ae08b: push   %r14
  0x00007f75704ae08d: push   %r15
  0x00007f75704ae08f: push   %rbx
  0x00007f75704ae090: xor    %rbx,%rbx
  0x00007f75704ae093: xor    %rdx,%rdx
  0x00007f75704ae096: xor    %r12d,%r12d
  0x00007f75704ae099: xor    %r15d,%r15d
  0x00007f75704ae09c: test   $0x1,%esi
  0x00007f75704ae0a2: je     Stub::squareToLen+63 0x0x7f75704ae0bf
  0x00007f75704ae0a4: mov    (%rdi,%r12,4),%eax
  0x00007f75704ae0a8: imul   %rax,%rax
  0x00007f75704ae0ac: shr    $0x1,%rax
  0x00007f75704ae0b0: adc    $0x0,%rbx
  0x00007f75704ae0b4: mov    %rax,(%r8,%r15,4)
  0x00007f75704ae0b8: inc    %r12d
  0x00007f75704ae0bb: add    $0x2,%r15d
  0x00007f75704ae0bf: cmp    %rsi,%r12
  0x00007f75704ae0c2: je     Stub::squareToLen+112 0x0x7f75704ae0f0
  0x00007f75704ae0c4: mov    (%rdi,%r12,4),%rax
  0x00007f75704ae0c8: ror    $0x20,%rax
  0x00007f75704ae0cc: mul    %rax
  0x00007f75704ae0cf: shr    $0x1,%rbx
  0x00007f75704ae0d3: rcr    %rdx
  0x00007f75704ae0d6: rcr    %rax
  0x00007f75704ae0d9: adc    $0x0,%rbx
  0x00007f75704ae0dd: mov    %rdx,(%r8,%r15,4)
  0x00007f75704ae0e1: mov    %rax,0x8(%r8,%r15,4)
  0x00007f75704ae0e6: add    $0x2,%r12d
  0x00007f75704ae0ea: add    $0x4,%r15d
  0x00007f75704ae0ee: jmp    Stub::squareToLen+63 0x0x7f75704ae0bf
  0x00007f75704ae0f0: push   %rcx
  0x00007f75704ae0f1: push   %rsi
  0x00007f75704ae0f2: add    $0x2,%ecx
  0x00007f75704ae0f5: xor    %rbx,%rbx
  0x00007f75704ae0f8: sub    $0x4,%ecx
  0x00007f75704ae0fb: sub    $0x2,%esi
  0x00007f75704ae0fe: push   %rcx
  0x00007f75704ae0ff: push   %rsi
  0x00007f75704ae100: cmp    $0x0,%esi
  0x00007f75704ae103: jle    Stub::squareToLen+228 0x0x7f75704ae164
  0x00007f75704ae105: mov    (%rdi,%rsi,4),%r13
  0x00007f75704ae109: ror    $0x20,%r13
  0x00007f75704ae10d: dec    %esi
  0x00007f75704ae10f: js     Stub::squareToLen+193 0x0x7f75704ae141
  0x00007f75704ae111: dec    %esi
  0x00007f75704ae113: js     Stub::squareToLen+223 0x0x7f75704ae15f
  0x00007f75704ae115: mov    (%rdi,%rsi,4),%r15
  0x00007f75704ae119: ror    $0x20,%r15
  0x00007f75704ae11d: sub    $0x2,%ecx
  0x00007f75704ae120: mov    (%r8,%rcx,4),%r14
  0x00007f75704ae124: mov    %r13,%rax
  0x00007f75704ae127: mul    %r15
  0x00007f75704ae12a: add    %rbx,%r14
  0x00007f75704ae12d: adc    $0x0,%rdx
  0x00007f75704ae131: add    %rax,%r14
  0x00007f75704ae134: adc    $0x0,%rdx
  0x00007f75704ae138: mov    %rdx,%rbx
  0x00007f75704ae13b: mov    %r14,(%r8,%rcx,4)
  0x00007f75704ae13f: jmp    Stub::squareToLen+141 0x0x7f75704ae10d
  0x00007f75704ae141: mov    $0x1,%r12d
  0x00007f75704ae147: sub    $0x2,%ecx
  0x00007f75704ae14a: add    %rbx,(%r8,%rcx,4)
  0x00007f75704ae14e: jae    Stub::squareToLen+219 0x0x7f75704ae15b
  0x00007f75704ae150: sub    $0x2,%ecx
  0x00007f75704ae153: js     Stub::squareToLen+219 0x0x7f75704ae15b
  0x00007f75704ae155: add    %r12,(%r8,%rcx,4)
  0x00007f75704ae159: jmp    Stub::squareToLen+206 0x0x7f75704ae14e
  0x00007f75704ae15b: pop    %rsi
  0x00007f75704ae15c: pop    %rcx
  0x00007f75704ae15d: jmp    Stub::squareToLen+117 0x0x7f75704ae0f5
  0x00007f75704ae15f: mov    (%rdi),%r15d
  0x00007f75704ae162: jmp    Stub::squareToLen+157 0x0x7f75704ae11d
  0x00007f75704ae164: pop    %rsi
  0x00007f75704ae165: pop    %rcx
  0x00007f75704ae166: pop    %rsi
  0x00007f75704ae167: pop    %rcx
  0x00007f75704ae168: mov    %ecx,%r14d
  0x00007f75704ae16b: xor    %r12d,%r12d
  0x00007f75704ae16e: dec    %r14d
  0x00007f75704ae171: dec    %r14d
  0x00007f75704ae174: js     Stub::squareToLen+276 0x0x7f75704ae194
  0x00007f75704ae176: xor    %r15d,%r15d
  0x00007f75704ae179: mov    (%r8,%r14,4),%r13
  0x00007f75704ae17d: shl    %r13
  0x00007f75704ae180: adc    $0x0,%r15d
  0x00007f75704ae184: or     %r12,%r13
  0x00007f75704ae187: ror    $0x20,%r13
  0x00007f75704ae18b: mov    %r13,(%r8,%r14,4)
  0x00007f75704ae18f: mov    %r15d,%r12d
  0x00007f75704ae192: jmp    Stub::squareToLen+238 0x0x7f75704ae16e
  0x00007f75704ae194: mov    -0x4(%rdi,%rsi,4),%r14d
  0x00007f75704ae199: and    $0x1,%r14d
  0x00007f75704ae19d: or     %r14d,-0x4(%r8,%rcx,4)
  0x00007f75704ae1a2: pop    %rbx
  0x00007f75704ae1a3: pop    %r15
  0x00007f75704ae1a5: pop    %r14
  0x00007f75704ae1a7: pop    %r13
  0x00007f75704ae1a9: pop    %r12
  0x00007f75704ae1ab: leaveq 
  0x00007f75704ae1ac: retq   

StubRoutines::mulAdd [0x00007f75704ae1c0, 0x00007f75704ae2ba[ (250 bytes)
  ;; Entry:
  0x00007f75704ae1c0: push   %rbp
  0x00007f75704ae1c1: mov    %rsp,%rbp
  0x00007f75704ae1c4: mov    %rdx,%r11
  0x00007f75704ae1c7: push   %r12
  0x00007f75704ae1c9: push   %r13
  0x00007f75704ae1cb: push   %r14
  0x00007f75704ae1cd: push   %r15
  0x00007f75704ae1cf: push   %rbx
  0x00007f75704ae1d0: mov    %r8d,%r13d
  0x00007f75704ae1d3: xor    %rbx,%rbx
  0x00007f75704ae1d6: mov    %ecx,%r12d
  0x00007f75704ae1d9: shr    $0x2,%r12d
  0x00007f75704ae1dd: sub    $0x1,%r12d
  0x00007f75704ae1e1: js     Stub::mulAdd+141 0x0x7f75704ae24d
  0x00007f75704ae1e3: sub    $0x4,%ecx
  0x00007f75704ae1e6: sub    $0x4,%r11d
  0x00007f75704ae1ea: mov    0x8(%rsi,%rcx,4),%r15
  0x00007f75704ae1ef: ror    $0x20,%r15
  0x00007f75704ae1f3: mov    0x8(%rdi,%r11,4),%r14
  0x00007f75704ae1f8: ror    $0x20,%r14
  0x00007f75704ae1fc: mov    %r13,%rax
  0x00007f75704ae1ff: mul    %r15
  0x00007f75704ae202: add    %rbx,%r14
  0x00007f75704ae205: adc    $0x0,%rdx
  0x00007f75704ae209: add    %rax,%r14
  0x00007f75704ae20c: adc    $0x0,%rdx
  0x00007f75704ae210: mov    %rdx,%rbx
  0x00007f75704ae213: ror    $0x20,%r14
  0x00007f75704ae217: mov    %r14,0x8(%rdi,%r11,4)
  0x00007f75704ae21c: mov    (%rsi,%rcx,4),%r15
  0x00007f75704ae220: ror    $0x20,%r15
  0x00007f75704ae224: mov    (%rdi,%r11,4),%r14
  0x00007f75704ae228: ror    $0x20,%r14
  0x00007f75704ae22c: mov    %r13,%rax
  0x00007f75704ae22f: mul    %r15
  0x00007f75704ae232: add    %rbx,%r14
  0x00007f75704ae235: adc    $0x0,%rdx
  0x00007f75704ae239: add    %rax,%r14
  0x00007f75704ae23c: adc    $0x0,%rdx
  0x00007f75704ae240: mov    %rdx,%rbx
  0x00007f75704ae243: ror    $0x20,%r14
  0x00007f75704ae247: mov    %r14,(%rdi,%r11,4)
  0x00007f75704ae24b: jmp    Stub::mulAdd+29 0x0x7f75704ae1dd
  0x00007f75704ae24d: dec    %ecx
  0x00007f75704ae24f: js     Stub::mulAdd+237 0x0x7f75704ae2ad
  0x00007f75704ae251: dec    %ecx
  0x00007f75704ae253: js     Stub::mulAdd+204 0x0x7f75704ae28c
  0x00007f75704ae255: mov    (%rsi,%rcx,4),%r15
  0x00007f75704ae259: ror    $0x20,%r15
  0x00007f75704ae25d: sub    $0x2,%r11d
  0x00007f75704ae261: mov    (%rdi,%r11,4),%r14
  0x00007f75704ae265: ror    $0x20,%r14
  0x00007f75704ae269: mov    %r13,%rax
  0x00007f75704ae26c: mul    %r15
  0x00007f75704ae26f: add    %rbx,%r14
  0x00007f75704ae272: adc    $0x0,%rdx
  0x00007f75704ae276: add    %rax,%r14
  0x00007f75704ae279: adc    $0x0,%rdx
  0x00007f75704ae27d: mov    %rdx,%rbx
  0x00007f75704ae280: ror    $0x20,%r14
  0x00007f75704ae284: mov    %r14,(%rdi,%r11,4)
  0x00007f75704ae288: test   %ecx,%ecx
  0x00007f75704ae28a: je     Stub::mulAdd+237 0x0x7f75704ae2ad
  0x00007f75704ae28c: mov    (%rsi),%r15d
  0x00007f75704ae28f: mov    -0x4(%rdi,%r11,4),%r14d
  0x00007f75704ae294: mov    %r8d,%eax
  0x00007f75704ae297: mul    %r15d
  0x00007f75704ae29a: add    %ebx,%r14d
  0x00007f75704ae29d: adc    $0x0,%edx
  0x00007f75704ae2a0: add    %eax,%r14d
  0x00007f75704ae2a3: adc    $0x0,%edx
  0x00007f75704ae2a6: mov    %edx,%ebx
  0x00007f75704ae2a8: mov    %r14d,-0x4(%rdi,%r11,4)
  0x00007f75704ae2ad: mov    %ebx,%eax
  0x00007f75704ae2af: pop    %rbx
  0x00007f75704ae2b0: pop    %r15
  0x00007f75704ae2b2: pop    %r14
  0x00007f75704ae2b4: pop    %r13
  0x00007f75704ae2b6: pop    %r12
  0x00007f75704ae2b8: leaveq 
  0x00007f75704ae2b9: retq   

AHE@0x00007f75800e9708: 0xb0000000 i2c: 0x00007f75704af6a0 c2i: 0x00007f75704af7da c2iUV: 0x00007f75704af7ad
i2c argument handler #0 for: receiver ()Ljava/util/Spliterator$OfInt; (577 bytes generated)
c2i argument handler starts at 0x7f75704af7da
  0x00007f75704af6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704af6a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704af6ae: cmp    %r11,%rax
  0x00007f75704af6b1: jbe    0x00007f75704af6ca
  0x00007f75704af6b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704af6c1: cmp    %r11,%rax
  0x00007f75704af6c4: jb     0x00007f75704af78d
  0x00007f75704af6ca: movabs $0x7f7570369420,%r11
  0x00007f75704af6d4: cmp    %r11,%rax
  0x00007f75704af6d7: jbe    0x00007f75704af6f0
  0x00007f75704af6dd: movabs $0x7f757036de58,%r11
  0x00007f75704af6e7: cmp    %r11,%rax
  0x00007f75704af6ea: jb     0x00007f75704af78d
  0x00007f75704af6f0: movabs $0x7f75704a9820,%r11
  0x00007f75704af6fa: cmp    %r11,%rax
  0x00007f75704af6fd: jbe    0x00007f75704af716
  0x00007f75704af703: movabs $0x7f75704af5e0,%r11
  0x00007f75704af70d: cmp    %r11,%rax
  0x00007f75704af710: jb     0x00007f75704af78d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704af716: mov    %rsp,-0x28(%rsp)
  0x00007f75704af71b: sub    $0x80,%rsp
  0x00007f75704af722: mov    %rax,0x78(%rsp)
  0x00007f75704af727: mov    %rcx,0x70(%rsp)
  0x00007f75704af72c: mov    %rdx,0x68(%rsp)
  0x00007f75704af731: mov    %rbx,0x60(%rsp)
  0x00007f75704af736: mov    %rbp,0x50(%rsp)
  0x00007f75704af73b: mov    %rsi,0x48(%rsp)
  0x00007f75704af740: mov    %rdi,0x40(%rsp)
  0x00007f75704af745: mov    %r8,0x38(%rsp)
  0x00007f75704af74a: mov    %r9,0x30(%rsp)
  0x00007f75704af74f: mov    %r10,0x28(%rsp)
  0x00007f75704af754: mov    %r11,0x20(%rsp)
  0x00007f75704af759: mov    %r12,0x18(%rsp)
  0x00007f75704af75e: mov    %r13,0x10(%rsp)
  0x00007f75704af763: mov    %r14,0x8(%rsp)
  0x00007f75704af768: mov    %r15,(%rsp)
  0x00007f75704af76c: movabs $0x7f758592f470,%rdi
  0x00007f75704af776: movabs $0x7f75704af716,%rsi
  0x00007f75704af780: mov    %rsp,%rdx
  0x00007f75704af783: and    $0xfffffffffffffff0,%rsp
  0x00007f75704af787: callq  0x00007f75853729fa
  0x00007f75704af78c: hlt    
  ;; } verify_i2ce 
  0x00007f75704af78d: mov    %rsp,%r11
  0x00007f75704af790: and    $0xfffffffffffffff0,%rsp
  0x00007f75704af794: push   %rax
  0x00007f75704af795: mov    %r11,%rax
  0x00007f75704af798: mov    0x50(%rbx),%r11
  0x00007f75704af79c: mov    0x8(%rax),%rsi
  0x00007f75704af7a0: mov    %rbx,0x258(%r15)
  0x00007f75704af7a7: mov    %rbx,%rax
  0x00007f75704af7aa: jmpq   *%r11
  0x00007f75704af7ad: mov    0x8(%rsi),%ebx
  0x00007f75704af7b0: shl    $0x3,%rbx
  0x00007f75704af7b4: cmp    0x10(%rax),%rbx
  0x00007f75704af7b8: mov    0x8(%rax),%rbx
  0x00007f75704af7bc: je     0x00007f75704af7c7
  0x00007f75704af7c2: jmpq   0x00007f757046ec40
  0x00007f75704af7c7: cmpq   $0x0,0x58(%rbx)
  0x00007f75704af7cf: je     0x00007f75704af8ca
  0x00007f75704af7d5: jmpq   0x00007f757046ec40
  0x00007f75704af7da: cmpq   $0x0,0x58(%rbx)
  0x00007f75704af7e2: je     0x00007f75704af8ca
  0x00007f75704af7e8: mov    %rsp,%r13
  0x00007f75704af7eb: mov    (%rsp),%rax
  0x00007f75704af7ef: and    $0xfffffffffffffff0,%rsp
  0x00007f75704af7f3: pushfq 
  0x00007f75704af7f4: sub    $0x8,%rsp
  0x00007f75704af7f8: mov    %rsp,-0x28(%rsp)
  0x00007f75704af7fd: sub    $0x80,%rsp
  0x00007f75704af804: mov    %rax,0x78(%rsp)
  0x00007f75704af809: mov    %rcx,0x70(%rsp)
  0x00007f75704af80e: mov    %rdx,0x68(%rsp)
  0x00007f75704af813: mov    %rbx,0x60(%rsp)
  0x00007f75704af818: mov    %rbp,0x50(%rsp)
  0x00007f75704af81d: mov    %rsi,0x48(%rsp)
  0x00007f75704af822: mov    %rdi,0x40(%rsp)
  0x00007f75704af827: mov    %r8,0x38(%rsp)
  0x00007f75704af82c: mov    %r9,0x30(%rsp)
  0x00007f75704af831: mov    %r10,0x28(%rsp)
  0x00007f75704af836: mov    %r11,0x20(%rsp)
  0x00007f75704af83b: mov    %r12,0x18(%rsp)
  0x00007f75704af840: mov    %r13,0x10(%rsp)
  0x00007f75704af845: mov    %r14,0x8(%rsp)
  0x00007f75704af84a: mov    %r15,(%rsp)
  0x00007f75704af84e: sub    $0x200,%rsp
  0x00007f75704af855: fxsave64 (%rsp)
  0x00007f75704af85a: mov    %rbx,%rdi
  0x00007f75704af85d: mov    %rax,%rsi
  0x00007f75704af860: callq  0x00007f7585522bca
  0x00007f75704af865: fxrstor64 (%rsp)
  0x00007f75704af86a: add    $0x200,%rsp
  0x00007f75704af871: mov    (%rsp),%r15
  0x00007f75704af875: mov    0x8(%rsp),%r14
  0x00007f75704af87a: mov    0x10(%rsp),%r13
  0x00007f75704af87f: mov    0x18(%rsp),%r12
  0x00007f75704af884: mov    0x20(%rsp),%r11
  0x00007f75704af889: mov    0x28(%rsp),%r10
  0x00007f75704af88e: mov    0x30(%rsp),%r9
  0x00007f75704af893: mov    0x38(%rsp),%r8
  0x00007f75704af898: mov    0x40(%rsp),%rdi
  0x00007f75704af89d: mov    0x48(%rsp),%rsi
  0x00007f75704af8a2: mov    0x50(%rsp),%rbp
  0x00007f75704af8a7: mov    0x60(%rsp),%rbx
  0x00007f75704af8ac: mov    0x68(%rsp),%rdx
  0x00007f75704af8b1: mov    0x70(%rsp),%rcx
  0x00007f75704af8b6: mov    0x78(%rsp),%rax
  0x00007f75704af8bb: add    $0x80,%rsp
  0x00007f75704af8c2: add    $0x8,%rsp
  0x00007f75704af8c6: popfq  
  0x00007f75704af8c7: mov    %r13,%rsp
  0x00007f75704af8ca: pop    %rax
  0x00007f75704af8cb: mov    %rsp,%r13
  0x00007f75704af8ce: sub    $0x10,%rsp
  0x00007f75704af8d2: mov    %rax,(%rsp)
  0x00007f75704af8d6: mov    %rsi,0x8(%rsp)
  0x00007f75704af8db: mov    0x40(%rbx),%rcx
  0x00007f75704af8df: jmpq   *%rcx

AHE@0x00007f75800e9750: 0xbaa00000 i2c: 0x00007f75704afd20 c2i: 0x00007f75704afe60 c2iUV: 0x00007f75704afe33
i2c argument handler #1 for: static ([CII)Ljava/lang/String; (591 bytes generated)
c2i argument handler starts at 0x7f75704afe60
  0x00007f75704afd20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704afd24: movabs $0x7f757036e3e0,%r11
  0x00007f75704afd2e: cmp    %r11,%rax
  0x00007f75704afd31: jbe    0x00007f75704afd4a
  0x00007f75704afd37: movabs $0x7f757046e3e0,%r11
  0x00007f75704afd41: cmp    %r11,%rax
  0x00007f75704afd44: jb     0x00007f75704afe0d
  0x00007f75704afd4a: movabs $0x7f7570369420,%r11
  0x00007f75704afd54: cmp    %r11,%rax
  0x00007f75704afd57: jbe    0x00007f75704afd70
  0x00007f75704afd5d: movabs $0x7f757036de58,%r11
  0x00007f75704afd67: cmp    %r11,%rax
  0x00007f75704afd6a: jb     0x00007f75704afe0d
  0x00007f75704afd70: movabs $0x7f75704a9820,%r11
  0x00007f75704afd7a: cmp    %r11,%rax
  0x00007f75704afd7d: jbe    0x00007f75704afd96
  0x00007f75704afd83: movabs $0x7f75704af5e0,%r11
  0x00007f75704afd8d: cmp    %r11,%rax
  0x00007f75704afd90: jb     0x00007f75704afe0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704afd96: mov    %rsp,-0x28(%rsp)
  0x00007f75704afd9b: sub    $0x80,%rsp
  0x00007f75704afda2: mov    %rax,0x78(%rsp)
  0x00007f75704afda7: mov    %rcx,0x70(%rsp)
  0x00007f75704afdac: mov    %rdx,0x68(%rsp)
  0x00007f75704afdb1: mov    %rbx,0x60(%rsp)
  0x00007f75704afdb6: mov    %rbp,0x50(%rsp)
  0x00007f75704afdbb: mov    %rsi,0x48(%rsp)
  0x00007f75704afdc0: mov    %rdi,0x40(%rsp)
  0x00007f75704afdc5: mov    %r8,0x38(%rsp)
  0x00007f75704afdca: mov    %r9,0x30(%rsp)
  0x00007f75704afdcf: mov    %r10,0x28(%rsp)
  0x00007f75704afdd4: mov    %r11,0x20(%rsp)
  0x00007f75704afdd9: mov    %r12,0x18(%rsp)
  0x00007f75704afdde: mov    %r13,0x10(%rsp)
  0x00007f75704afde3: mov    %r14,0x8(%rsp)
  0x00007f75704afde8: mov    %r15,(%rsp)
  0x00007f75704afdec: movabs $0x7f758592f470,%rdi
  0x00007f75704afdf6: movabs $0x7f75704afd96,%rsi
  0x00007f75704afe00: mov    %rsp,%rdx
  0x00007f75704afe03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704afe07: callq  0x00007f75853729fa
  0x00007f75704afe0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704afe0d: mov    %rsp,%r11
  0x00007f75704afe10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704afe14: push   %rax
  0x00007f75704afe15: mov    %r11,%rax
  0x00007f75704afe18: mov    0x50(%rbx),%r11
  0x00007f75704afe1c: mov    0x18(%rax),%rsi
  0x00007f75704afe20: mov    0x10(%rax),%edx
  0x00007f75704afe23: mov    0x8(%rax),%ecx
  0x00007f75704afe26: mov    %rbx,0x258(%r15)
  0x00007f75704afe2d: mov    %rbx,%rax
  0x00007f75704afe30: jmpq   *%r11
  0x00007f75704afe33: mov    0x8(%rsi),%ebx
  0x00007f75704afe36: shl    $0x3,%rbx
  0x00007f75704afe3a: cmp    0x10(%rax),%rbx
  0x00007f75704afe3e: mov    0x8(%rax),%rbx
  0x00007f75704afe42: je     0x00007f75704afe4d
  0x00007f75704afe48: jmpq   0x00007f757046ec40
  0x00007f75704afe4d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704afe55: je     0x00007f75704aff50
  0x00007f75704afe5b: jmpq   0x00007f757046ec40
  0x00007f75704afe60: cmpq   $0x0,0x58(%rbx)
  0x00007f75704afe68: je     0x00007f75704aff50
  0x00007f75704afe6e: mov    %rsp,%r13
  0x00007f75704afe71: mov    (%rsp),%rax
  0x00007f75704afe75: and    $0xfffffffffffffff0,%rsp
  0x00007f75704afe79: pushfq 
  0x00007f75704afe7a: sub    $0x8,%rsp
  0x00007f75704afe7e: mov    %rsp,-0x28(%rsp)
  0x00007f75704afe83: sub    $0x80,%rsp
  0x00007f75704afe8a: mov    %rax,0x78(%rsp)
  0x00007f75704afe8f: mov    %rcx,0x70(%rsp)
  0x00007f75704afe94: mov    %rdx,0x68(%rsp)
  0x00007f75704afe99: mov    %rbx,0x60(%rsp)
  0x00007f75704afe9e: mov    %rbp,0x50(%rsp)
  0x00007f75704afea3: mov    %rsi,0x48(%rsp)
  0x00007f75704afea8: mov    %rdi,0x40(%rsp)
  0x00007f75704afead: mov    %r8,0x38(%rsp)
  0x00007f75704afeb2: mov    %r9,0x30(%rsp)
  0x00007f75704afeb7: mov    %r10,0x28(%rsp)
  0x00007f75704afebc: mov    %r11,0x20(%rsp)
  0x00007f75704afec1: mov    %r12,0x18(%rsp)
  0x00007f75704afec6: mov    %r13,0x10(%rsp)
  0x00007f75704afecb: mov    %r14,0x8(%rsp)
  0x00007f75704afed0: mov    %r15,(%rsp)
  0x00007f75704afed4: sub    $0x200,%rsp
  0x00007f75704afedb: fxsave64 (%rsp)
  0x00007f75704afee0: mov    %rbx,%rdi
  0x00007f75704afee3: mov    %rax,%rsi
  0x00007f75704afee6: callq  0x00007f7585522bca
  0x00007f75704afeeb: fxrstor64 (%rsp)
  0x00007f75704afef0: add    $0x200,%rsp
  0x00007f75704afef7: mov    (%rsp),%r15
  0x00007f75704afefb: mov    0x8(%rsp),%r14
  0x00007f75704aff00: mov    0x10(%rsp),%r13
  0x00007f75704aff05: mov    0x18(%rsp),%r12
  0x00007f75704aff0a: mov    0x20(%rsp),%r11
  0x00007f75704aff0f: mov    0x28(%rsp),%r10
  0x00007f75704aff14: mov    0x30(%rsp),%r9
  0x00007f75704aff19: mov    0x38(%rsp),%r8
  0x00007f75704aff1e: mov    0x40(%rsp),%rdi
  0x00007f75704aff23: mov    0x48(%rsp),%rsi
  0x00007f75704aff28: mov    0x50(%rsp),%rbp
  0x00007f75704aff2d: mov    0x60(%rsp),%rbx
  0x00007f75704aff32: mov    0x68(%rsp),%rdx
  0x00007f75704aff37: mov    0x70(%rsp),%rcx
  0x00007f75704aff3c: mov    0x78(%rsp),%rax
  0x00007f75704aff41: add    $0x80,%rsp
  0x00007f75704aff48: add    $0x8,%rsp
  0x00007f75704aff4c: popfq  
  0x00007f75704aff4d: mov    %r13,%rsp
  0x00007f75704aff50: pop    %rax
  0x00007f75704aff51: mov    %rsp,%r13
  0x00007f75704aff54: sub    $0x20,%rsp
  0x00007f75704aff58: mov    %rax,(%rsp)
  0x00007f75704aff5c: mov    %rsi,0x18(%rsp)
  0x00007f75704aff61: mov    %edx,0x10(%rsp)
  0x00007f75704aff65: mov    %ecx,0x8(%rsp)
  0x00007f75704aff69: mov    0x40(%rbx),%rcx
  0x00007f75704aff6d: jmpq   *%rcx

AHE@0x00007f75800e9798: 0xbb000000 i2c: 0x00007f75704b0020 c2i: 0x00007f75704b015e c2iUV: 0x00007f75704b0131
i2c argument handler #2 for: receiver (Ljava/util/Locale;)Ljava/lang/String; (586 bytes generated)
c2i argument handler starts at 0x7f75704b015e
  0x00007f75704b0020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b0024: movabs $0x7f757036e3e0,%r11
  0x00007f75704b002e: cmp    %r11,%rax
  0x00007f75704b0031: jbe    0x00007f75704b004a
  0x00007f75704b0037: movabs $0x7f757046e3e0,%r11
  0x00007f75704b0041: cmp    %r11,%rax
  0x00007f75704b0044: jb     0x00007f75704b010d
  0x00007f75704b004a: movabs $0x7f7570369420,%r11
  0x00007f75704b0054: cmp    %r11,%rax
  0x00007f75704b0057: jbe    0x00007f75704b0070
  0x00007f75704b005d: movabs $0x7f757036de58,%r11
  0x00007f75704b0067: cmp    %r11,%rax
  0x00007f75704b006a: jb     0x00007f75704b010d
  0x00007f75704b0070: movabs $0x7f75704a9820,%r11
  0x00007f75704b007a: cmp    %r11,%rax
  0x00007f75704b007d: jbe    0x00007f75704b0096
  0x00007f75704b0083: movabs $0x7f75704af5e0,%r11
  0x00007f75704b008d: cmp    %r11,%rax
  0x00007f75704b0090: jb     0x00007f75704b010d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b0096: mov    %rsp,-0x28(%rsp)
  0x00007f75704b009b: sub    $0x80,%rsp
  0x00007f75704b00a2: mov    %rax,0x78(%rsp)
  0x00007f75704b00a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b00ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b00b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b00b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b00bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b00c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b00c5: mov    %r8,0x38(%rsp)
  0x00007f75704b00ca: mov    %r9,0x30(%rsp)
  0x00007f75704b00cf: mov    %r10,0x28(%rsp)
  0x00007f75704b00d4: mov    %r11,0x20(%rsp)
  0x00007f75704b00d9: mov    %r12,0x18(%rsp)
  0x00007f75704b00de: mov    %r13,0x10(%rsp)
  0x00007f75704b00e3: mov    %r14,0x8(%rsp)
  0x00007f75704b00e8: mov    %r15,(%rsp)
  0x00007f75704b00ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b00f6: movabs $0x7f75704b0096,%rsi
  0x00007f75704b0100: mov    %rsp,%rdx
  0x00007f75704b0103: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0107: callq  0x00007f75853729fa
  0x00007f75704b010c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b010d: mov    %rsp,%r11
  0x00007f75704b0110: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0114: push   %rax
  0x00007f75704b0115: mov    %r11,%rax
  0x00007f75704b0118: mov    0x50(%rbx),%r11
  0x00007f75704b011c: mov    0x10(%rax),%rsi
  0x00007f75704b0120: mov    0x8(%rax),%rdx
  0x00007f75704b0124: mov    %rbx,0x258(%r15)
  0x00007f75704b012b: mov    %rbx,%rax
  0x00007f75704b012e: jmpq   *%r11
  0x00007f75704b0131: mov    0x8(%rsi),%ebx
  0x00007f75704b0134: shl    $0x3,%rbx
  0x00007f75704b0138: cmp    0x10(%rax),%rbx
  0x00007f75704b013c: mov    0x8(%rax),%rbx
  0x00007f75704b0140: je     0x00007f75704b014b
  0x00007f75704b0146: jmpq   0x00007f757046ec40
  0x00007f75704b014b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0153: je     0x00007f75704b024e
  0x00007f75704b0159: jmpq   0x00007f757046ec40
  0x00007f75704b015e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0166: je     0x00007f75704b024e
  0x00007f75704b016c: mov    %rsp,%r13
  0x00007f75704b016f: mov    (%rsp),%rax
  0x00007f75704b0173: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0177: pushfq 
  0x00007f75704b0178: sub    $0x8,%rsp
  0x00007f75704b017c: mov    %rsp,-0x28(%rsp)
  0x00007f75704b0181: sub    $0x80,%rsp
  0x00007f75704b0188: mov    %rax,0x78(%rsp)
  0x00007f75704b018d: mov    %rcx,0x70(%rsp)
  0x00007f75704b0192: mov    %rdx,0x68(%rsp)
  0x00007f75704b0197: mov    %rbx,0x60(%rsp)
  0x00007f75704b019c: mov    %rbp,0x50(%rsp)
  0x00007f75704b01a1: mov    %rsi,0x48(%rsp)
  0x00007f75704b01a6: mov    %rdi,0x40(%rsp)
  0x00007f75704b01ab: mov    %r8,0x38(%rsp)
  0x00007f75704b01b0: mov    %r9,0x30(%rsp)
  0x00007f75704b01b5: mov    %r10,0x28(%rsp)
  0x00007f75704b01ba: mov    %r11,0x20(%rsp)
  0x00007f75704b01bf: mov    %r12,0x18(%rsp)
  0x00007f75704b01c4: mov    %r13,0x10(%rsp)
  0x00007f75704b01c9: mov    %r14,0x8(%rsp)
  0x00007f75704b01ce: mov    %r15,(%rsp)
  0x00007f75704b01d2: sub    $0x200,%rsp
  0x00007f75704b01d9: fxsave64 (%rsp)
  0x00007f75704b01de: mov    %rbx,%rdi
  0x00007f75704b01e1: mov    %rax,%rsi
  0x00007f75704b01e4: callq  0x00007f7585522bca
  0x00007f75704b01e9: fxrstor64 (%rsp)
  0x00007f75704b01ee: add    $0x200,%rsp
  0x00007f75704b01f5: mov    (%rsp),%r15
  0x00007f75704b01f9: mov    0x8(%rsp),%r14
  0x00007f75704b01fe: mov    0x10(%rsp),%r13
  0x00007f75704b0203: mov    0x18(%rsp),%r12
  0x00007f75704b0208: mov    0x20(%rsp),%r11
  0x00007f75704b020d: mov    0x28(%rsp),%r10
  0x00007f75704b0212: mov    0x30(%rsp),%r9
  0x00007f75704b0217: mov    0x38(%rsp),%r8
  0x00007f75704b021c: mov    0x40(%rsp),%rdi
  0x00007f75704b0221: mov    0x48(%rsp),%rsi
  0x00007f75704b0226: mov    0x50(%rsp),%rbp
  0x00007f75704b022b: mov    0x60(%rsp),%rbx
  0x00007f75704b0230: mov    0x68(%rsp),%rdx
  0x00007f75704b0235: mov    0x70(%rsp),%rcx
  0x00007f75704b023a: mov    0x78(%rsp),%rax
  0x00007f75704b023f: add    $0x80,%rsp
  0x00007f75704b0246: add    $0x8,%rsp
  0x00007f75704b024a: popfq  
  0x00007f75704b024b: mov    %r13,%rsp
  0x00007f75704b024e: pop    %rax
  0x00007f75704b024f: mov    %rsp,%r13
  0x00007f75704b0252: sub    $0x20,%rsp
  0x00007f75704b0256: mov    %rax,(%rsp)
  0x00007f75704b025a: mov    %rsi,0x10(%rsp)
  0x00007f75704b025f: mov    %rdx,0x8(%rsp)
  0x00007f75704b0264: mov    0x40(%rbx),%rcx
  0x00007f75704b0268: jmpq   *%rcx

AHE@0x00007f75800e97e0: 0xbba00000 i2c: 0x00007f75704b0320 c2i: 0x00007f75704b0461 c2iUV: 0x00007f75704b0434
i2c argument handler #3 for: receiver (Ljava/lang/String;I)[Ljava/lang/String; (593 bytes generated)
c2i argument handler starts at 0x7f75704b0461
  0x00007f75704b0320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b0324: movabs $0x7f757036e3e0,%r11
  0x00007f75704b032e: cmp    %r11,%rax
  0x00007f75704b0331: jbe    0x00007f75704b034a
  0x00007f75704b0337: movabs $0x7f757046e3e0,%r11
  0x00007f75704b0341: cmp    %r11,%rax
  0x00007f75704b0344: jb     0x00007f75704b040d
  0x00007f75704b034a: movabs $0x7f7570369420,%r11
  0x00007f75704b0354: cmp    %r11,%rax
  0x00007f75704b0357: jbe    0x00007f75704b0370
  0x00007f75704b035d: movabs $0x7f757036de58,%r11
  0x00007f75704b0367: cmp    %r11,%rax
  0x00007f75704b036a: jb     0x00007f75704b040d
  0x00007f75704b0370: movabs $0x7f75704a9820,%r11
  0x00007f75704b037a: cmp    %r11,%rax
  0x00007f75704b037d: jbe    0x00007f75704b0396
  0x00007f75704b0383: movabs $0x7f75704af5e0,%r11
  0x00007f75704b038d: cmp    %r11,%rax
  0x00007f75704b0390: jb     0x00007f75704b040d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b0396: mov    %rsp,-0x28(%rsp)
  0x00007f75704b039b: sub    $0x80,%rsp
  0x00007f75704b03a2: mov    %rax,0x78(%rsp)
  0x00007f75704b03a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b03ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b03b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b03b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b03bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b03c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b03c5: mov    %r8,0x38(%rsp)
  0x00007f75704b03ca: mov    %r9,0x30(%rsp)
  0x00007f75704b03cf: mov    %r10,0x28(%rsp)
  0x00007f75704b03d4: mov    %r11,0x20(%rsp)
  0x00007f75704b03d9: mov    %r12,0x18(%rsp)
  0x00007f75704b03de: mov    %r13,0x10(%rsp)
  0x00007f75704b03e3: mov    %r14,0x8(%rsp)
  0x00007f75704b03e8: mov    %r15,(%rsp)
  0x00007f75704b03ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b03f6: movabs $0x7f75704b0396,%rsi
  0x00007f75704b0400: mov    %rsp,%rdx
  0x00007f75704b0403: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0407: callq  0x00007f75853729fa
  0x00007f75704b040c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b040d: mov    %rsp,%r11
  0x00007f75704b0410: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0414: push   %rax
  0x00007f75704b0415: mov    %r11,%rax
  0x00007f75704b0418: mov    0x50(%rbx),%r11
  0x00007f75704b041c: mov    0x18(%rax),%rsi
  0x00007f75704b0420: mov    0x10(%rax),%rdx
  0x00007f75704b0424: mov    0x8(%rax),%ecx
  0x00007f75704b0427: mov    %rbx,0x258(%r15)
  0x00007f75704b042e: mov    %rbx,%rax
  0x00007f75704b0431: jmpq   *%r11
  0x00007f75704b0434: mov    0x8(%rsi),%ebx
  0x00007f75704b0437: shl    $0x3,%rbx
  0x00007f75704b043b: cmp    0x10(%rax),%rbx
  0x00007f75704b043f: mov    0x8(%rax),%rbx
  0x00007f75704b0443: je     0x00007f75704b044e
  0x00007f75704b0449: jmpq   0x00007f757046ec40
  0x00007f75704b044e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0456: je     0x00007f75704b0551
  0x00007f75704b045c: jmpq   0x00007f757046ec40
  0x00007f75704b0461: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0469: je     0x00007f75704b0551
  0x00007f75704b046f: mov    %rsp,%r13
  0x00007f75704b0472: mov    (%rsp),%rax
  0x00007f75704b0476: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b047a: pushfq 
  0x00007f75704b047b: sub    $0x8,%rsp
  0x00007f75704b047f: mov    %rsp,-0x28(%rsp)
  0x00007f75704b0484: sub    $0x80,%rsp
  0x00007f75704b048b: mov    %rax,0x78(%rsp)
  0x00007f75704b0490: mov    %rcx,0x70(%rsp)
  0x00007f75704b0495: mov    %rdx,0x68(%rsp)
  0x00007f75704b049a: mov    %rbx,0x60(%rsp)
  0x00007f75704b049f: mov    %rbp,0x50(%rsp)
  0x00007f75704b04a4: mov    %rsi,0x48(%rsp)
  0x00007f75704b04a9: mov    %rdi,0x40(%rsp)
  0x00007f75704b04ae: mov    %r8,0x38(%rsp)
  0x00007f75704b04b3: mov    %r9,0x30(%rsp)
  0x00007f75704b04b8: mov    %r10,0x28(%rsp)
  0x00007f75704b04bd: mov    %r11,0x20(%rsp)
  0x00007f75704b04c2: mov    %r12,0x18(%rsp)
  0x00007f75704b04c7: mov    %r13,0x10(%rsp)
  0x00007f75704b04cc: mov    %r14,0x8(%rsp)
  0x00007f75704b04d1: mov    %r15,(%rsp)
  0x00007f75704b04d5: sub    $0x200,%rsp
  0x00007f75704b04dc: fxsave64 (%rsp)
  0x00007f75704b04e1: mov    %rbx,%rdi
  0x00007f75704b04e4: mov    %rax,%rsi
  0x00007f75704b04e7: callq  0x00007f7585522bca
  0x00007f75704b04ec: fxrstor64 (%rsp)
  0x00007f75704b04f1: add    $0x200,%rsp
  0x00007f75704b04f8: mov    (%rsp),%r15
  0x00007f75704b04fc: mov    0x8(%rsp),%r14
  0x00007f75704b0501: mov    0x10(%rsp),%r13
  0x00007f75704b0506: mov    0x18(%rsp),%r12
  0x00007f75704b050b: mov    0x20(%rsp),%r11
  0x00007f75704b0510: mov    0x28(%rsp),%r10
  0x00007f75704b0515: mov    0x30(%rsp),%r9
  0x00007f75704b051a: mov    0x38(%rsp),%r8
  0x00007f75704b051f: mov    0x40(%rsp),%rdi
  0x00007f75704b0524: mov    0x48(%rsp),%rsi
  0x00007f75704b0529: mov    0x50(%rsp),%rbp
  0x00007f75704b052e: mov    0x60(%rsp),%rbx
  0x00007f75704b0533: mov    0x68(%rsp),%rdx
  0x00007f75704b0538: mov    0x70(%rsp),%rcx
  0x00007f75704b053d: mov    0x78(%rsp),%rax
  0x00007f75704b0542: add    $0x80,%rsp
  0x00007f75704b0549: add    $0x8,%rsp
  0x00007f75704b054d: popfq  
  0x00007f75704b054e: mov    %r13,%rsp
  0x00007f75704b0551: pop    %rax
  0x00007f75704b0552: mov    %rsp,%r13
  0x00007f75704b0555: sub    $0x20,%rsp
  0x00007f75704b0559: mov    %rax,(%rsp)
  0x00007f75704b055d: mov    %rsi,0x18(%rsp)
  0x00007f75704b0562: mov    %rdx,0x10(%rsp)
  0x00007f75704b0567: mov    %ecx,0x8(%rsp)
  0x00007f75704b056b: mov    0x40(%rbx),%rcx
  0x00007f75704b056f: jmpq   *%rcx

AHE@0x00007f75800e9828: 0xbbb00000 i2c: 0x00007f75704b0620 c2i: 0x00007f75704b0762 c2iUV: 0x00007f75704b0735
i2c argument handler #4 for: receiver (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (595 bytes generated)
c2i argument handler starts at 0x7f75704b0762
  0x00007f75704b0620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b0624: movabs $0x7f757036e3e0,%r11
  0x00007f75704b062e: cmp    %r11,%rax
  0x00007f75704b0631: jbe    0x00007f75704b064a
  0x00007f75704b0637: movabs $0x7f757046e3e0,%r11
  0x00007f75704b0641: cmp    %r11,%rax
  0x00007f75704b0644: jb     0x00007f75704b070d
  0x00007f75704b064a: movabs $0x7f7570369420,%r11
  0x00007f75704b0654: cmp    %r11,%rax
  0x00007f75704b0657: jbe    0x00007f75704b0670
  0x00007f75704b065d: movabs $0x7f757036de58,%r11
  0x00007f75704b0667: cmp    %r11,%rax
  0x00007f75704b066a: jb     0x00007f75704b070d
  0x00007f75704b0670: movabs $0x7f75704a9820,%r11
  0x00007f75704b067a: cmp    %r11,%rax
  0x00007f75704b067d: jbe    0x00007f75704b0696
  0x00007f75704b0683: movabs $0x7f75704af5e0,%r11
  0x00007f75704b068d: cmp    %r11,%rax
  0x00007f75704b0690: jb     0x00007f75704b070d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b0696: mov    %rsp,-0x28(%rsp)
  0x00007f75704b069b: sub    $0x80,%rsp
  0x00007f75704b06a2: mov    %rax,0x78(%rsp)
  0x00007f75704b06a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b06ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b06b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b06b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b06bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b06c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b06c5: mov    %r8,0x38(%rsp)
  0x00007f75704b06ca: mov    %r9,0x30(%rsp)
  0x00007f75704b06cf: mov    %r10,0x28(%rsp)
  0x00007f75704b06d4: mov    %r11,0x20(%rsp)
  0x00007f75704b06d9: mov    %r12,0x18(%rsp)
  0x00007f75704b06de: mov    %r13,0x10(%rsp)
  0x00007f75704b06e3: mov    %r14,0x8(%rsp)
  0x00007f75704b06e8: mov    %r15,(%rsp)
  0x00007f75704b06ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b06f6: movabs $0x7f75704b0696,%rsi
  0x00007f75704b0700: mov    %rsp,%rdx
  0x00007f75704b0703: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0707: callq  0x00007f75853729fa
  0x00007f75704b070c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b070d: mov    %rsp,%r11
  0x00007f75704b0710: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0714: push   %rax
  0x00007f75704b0715: mov    %r11,%rax
  0x00007f75704b0718: mov    0x50(%rbx),%r11
  0x00007f75704b071c: mov    0x18(%rax),%rsi
  0x00007f75704b0720: mov    0x10(%rax),%rdx
  0x00007f75704b0724: mov    0x8(%rax),%rcx
  0x00007f75704b0728: mov    %rbx,0x258(%r15)
  0x00007f75704b072f: mov    %rbx,%rax
  0x00007f75704b0732: jmpq   *%r11
  0x00007f75704b0735: mov    0x8(%rsi),%ebx
  0x00007f75704b0738: shl    $0x3,%rbx
  0x00007f75704b073c: cmp    0x10(%rax),%rbx
  0x00007f75704b0740: mov    0x8(%rax),%rbx
  0x00007f75704b0744: je     0x00007f75704b074f
  0x00007f75704b074a: jmpq   0x00007f757046ec40
  0x00007f75704b074f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0757: je     0x00007f75704b0852
  0x00007f75704b075d: jmpq   0x00007f757046ec40
  0x00007f75704b0762: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b076a: je     0x00007f75704b0852
  0x00007f75704b0770: mov    %rsp,%r13
  0x00007f75704b0773: mov    (%rsp),%rax
  0x00007f75704b0777: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b077b: pushfq 
  0x00007f75704b077c: sub    $0x8,%rsp
  0x00007f75704b0780: mov    %rsp,-0x28(%rsp)
  0x00007f75704b0785: sub    $0x80,%rsp
  0x00007f75704b078c: mov    %rax,0x78(%rsp)
  0x00007f75704b0791: mov    %rcx,0x70(%rsp)
  0x00007f75704b0796: mov    %rdx,0x68(%rsp)
  0x00007f75704b079b: mov    %rbx,0x60(%rsp)
  0x00007f75704b07a0: mov    %rbp,0x50(%rsp)
  0x00007f75704b07a5: mov    %rsi,0x48(%rsp)
  0x00007f75704b07aa: mov    %rdi,0x40(%rsp)
  0x00007f75704b07af: mov    %r8,0x38(%rsp)
  0x00007f75704b07b4: mov    %r9,0x30(%rsp)
  0x00007f75704b07b9: mov    %r10,0x28(%rsp)
  0x00007f75704b07be: mov    %r11,0x20(%rsp)
  0x00007f75704b07c3: mov    %r12,0x18(%rsp)
  0x00007f75704b07c8: mov    %r13,0x10(%rsp)
  0x00007f75704b07cd: mov    %r14,0x8(%rsp)
  0x00007f75704b07d2: mov    %r15,(%rsp)
  0x00007f75704b07d6: sub    $0x200,%rsp
  0x00007f75704b07dd: fxsave64 (%rsp)
  0x00007f75704b07e2: mov    %rbx,%rdi
  0x00007f75704b07e5: mov    %rax,%rsi
  0x00007f75704b07e8: callq  0x00007f7585522bca
  0x00007f75704b07ed: fxrstor64 (%rsp)
  0x00007f75704b07f2: add    $0x200,%rsp
  0x00007f75704b07f9: mov    (%rsp),%r15
  0x00007f75704b07fd: mov    0x8(%rsp),%r14
  0x00007f75704b0802: mov    0x10(%rsp),%r13
  0x00007f75704b0807: mov    0x18(%rsp),%r12
  0x00007f75704b080c: mov    0x20(%rsp),%r11
  0x00007f75704b0811: mov    0x28(%rsp),%r10
  0x00007f75704b0816: mov    0x30(%rsp),%r9
  0x00007f75704b081b: mov    0x38(%rsp),%r8
  0x00007f75704b0820: mov    0x40(%rsp),%rdi
  0x00007f75704b0825: mov    0x48(%rsp),%rsi
  0x00007f75704b082a: mov    0x50(%rsp),%rbp
  0x00007f75704b082f: mov    0x60(%rsp),%rbx
  0x00007f75704b0834: mov    0x68(%rsp),%rdx
  0x00007f75704b0839: mov    0x70(%rsp),%rcx
  0x00007f75704b083e: mov    0x78(%rsp),%rax
  0x00007f75704b0843: add    $0x80,%rsp
  0x00007f75704b084a: add    $0x8,%rsp
  0x00007f75704b084e: popfq  
  0x00007f75704b084f: mov    %r13,%rsp
  0x00007f75704b0852: pop    %rax
  0x00007f75704b0853: mov    %rsp,%r13
  0x00007f75704b0856: sub    $0x20,%rsp
  0x00007f75704b085a: mov    %rax,(%rsp)
  0x00007f75704b085e: mov    %rsi,0x18(%rsp)
  0x00007f75704b0863: mov    %rdx,0x10(%rsp)
  0x00007f75704b0868: mov    %rcx,0x8(%rsp)
  0x00007f75704b086d: mov    0x40(%rbx),%rcx
  0x00007f75704b0871: jmpq   *%rcx

AHE@0x00007f75800e9870: 0xba000000 i2c: 0x00007f75704b0920 c2i: 0x00007f75704b0a5d c2iUV: 0x00007f75704b0a30
i2c argument handler #5 for: receiver (I)Ljava/lang/String; (584 bytes generated)
c2i argument handler starts at 0x7f75704b0a5d
  0x00007f75704b0920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b0924: movabs $0x7f757036e3e0,%r11
  0x00007f75704b092e: cmp    %r11,%rax
  0x00007f75704b0931: jbe    0x00007f75704b094a
  0x00007f75704b0937: movabs $0x7f757046e3e0,%r11
  0x00007f75704b0941: cmp    %r11,%rax
  0x00007f75704b0944: jb     0x00007f75704b0a0d
  0x00007f75704b094a: movabs $0x7f7570369420,%r11
  0x00007f75704b0954: cmp    %r11,%rax
  0x00007f75704b0957: jbe    0x00007f75704b0970
  0x00007f75704b095d: movabs $0x7f757036de58,%r11
  0x00007f75704b0967: cmp    %r11,%rax
  0x00007f75704b096a: jb     0x00007f75704b0a0d
  0x00007f75704b0970: movabs $0x7f75704a9820,%r11
  0x00007f75704b097a: cmp    %r11,%rax
  0x00007f75704b097d: jbe    0x00007f75704b0996
  0x00007f75704b0983: movabs $0x7f75704af5e0,%r11
  0x00007f75704b098d: cmp    %r11,%rax
  0x00007f75704b0990: jb     0x00007f75704b0a0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b0996: mov    %rsp,-0x28(%rsp)
  0x00007f75704b099b: sub    $0x80,%rsp
  0x00007f75704b09a2: mov    %rax,0x78(%rsp)
  0x00007f75704b09a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b09ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b09b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b09b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b09bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b09c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b09c5: mov    %r8,0x38(%rsp)
  0x00007f75704b09ca: mov    %r9,0x30(%rsp)
  0x00007f75704b09cf: mov    %r10,0x28(%rsp)
  0x00007f75704b09d4: mov    %r11,0x20(%rsp)
  0x00007f75704b09d9: mov    %r12,0x18(%rsp)
  0x00007f75704b09de: mov    %r13,0x10(%rsp)
  0x00007f75704b09e3: mov    %r14,0x8(%rsp)
  0x00007f75704b09e8: mov    %r15,(%rsp)
  0x00007f75704b09ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b09f6: movabs $0x7f75704b0996,%rsi
  0x00007f75704b0a00: mov    %rsp,%rdx
  0x00007f75704b0a03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0a07: callq  0x00007f75853729fa
  0x00007f75704b0a0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b0a0d: mov    %rsp,%r11
  0x00007f75704b0a10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0a14: push   %rax
  0x00007f75704b0a15: mov    %r11,%rax
  0x00007f75704b0a18: mov    0x50(%rbx),%r11
  0x00007f75704b0a1c: mov    0x10(%rax),%rsi
  0x00007f75704b0a20: mov    0x8(%rax),%edx
  0x00007f75704b0a23: mov    %rbx,0x258(%r15)
  0x00007f75704b0a2a: mov    %rbx,%rax
  0x00007f75704b0a2d: jmpq   *%r11
  0x00007f75704b0a30: mov    0x8(%rsi),%ebx
  0x00007f75704b0a33: shl    $0x3,%rbx
  0x00007f75704b0a37: cmp    0x10(%rax),%rbx
  0x00007f75704b0a3b: mov    0x8(%rax),%rbx
  0x00007f75704b0a3f: je     0x00007f75704b0a4a
  0x00007f75704b0a45: jmpq   0x00007f757046ec40
  0x00007f75704b0a4a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0a52: je     0x00007f75704b0b4d
  0x00007f75704b0a58: jmpq   0x00007f757046ec40
  0x00007f75704b0a5d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0a65: je     0x00007f75704b0b4d
  0x00007f75704b0a6b: mov    %rsp,%r13
  0x00007f75704b0a6e: mov    (%rsp),%rax
  0x00007f75704b0a72: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0a76: pushfq 
  0x00007f75704b0a77: sub    $0x8,%rsp
  0x00007f75704b0a7b: mov    %rsp,-0x28(%rsp)
  0x00007f75704b0a80: sub    $0x80,%rsp
  0x00007f75704b0a87: mov    %rax,0x78(%rsp)
  0x00007f75704b0a8c: mov    %rcx,0x70(%rsp)
  0x00007f75704b0a91: mov    %rdx,0x68(%rsp)
  0x00007f75704b0a96: mov    %rbx,0x60(%rsp)
  0x00007f75704b0a9b: mov    %rbp,0x50(%rsp)
  0x00007f75704b0aa0: mov    %rsi,0x48(%rsp)
  0x00007f75704b0aa5: mov    %rdi,0x40(%rsp)
  0x00007f75704b0aaa: mov    %r8,0x38(%rsp)
  0x00007f75704b0aaf: mov    %r9,0x30(%rsp)
  0x00007f75704b0ab4: mov    %r10,0x28(%rsp)
  0x00007f75704b0ab9: mov    %r11,0x20(%rsp)
  0x00007f75704b0abe: mov    %r12,0x18(%rsp)
  0x00007f75704b0ac3: mov    %r13,0x10(%rsp)
  0x00007f75704b0ac8: mov    %r14,0x8(%rsp)
  0x00007f75704b0acd: mov    %r15,(%rsp)
  0x00007f75704b0ad1: sub    $0x200,%rsp
  0x00007f75704b0ad8: fxsave64 (%rsp)
  0x00007f75704b0add: mov    %rbx,%rdi
  0x00007f75704b0ae0: mov    %rax,%rsi
  0x00007f75704b0ae3: callq  0x00007f7585522bca
  0x00007f75704b0ae8: fxrstor64 (%rsp)
  0x00007f75704b0aed: add    $0x200,%rsp
  0x00007f75704b0af4: mov    (%rsp),%r15
  0x00007f75704b0af8: mov    0x8(%rsp),%r14
  0x00007f75704b0afd: mov    0x10(%rsp),%r13
  0x00007f75704b0b02: mov    0x18(%rsp),%r12
  0x00007f75704b0b07: mov    0x20(%rsp),%r11
  0x00007f75704b0b0c: mov    0x28(%rsp),%r10
  0x00007f75704b0b11: mov    0x30(%rsp),%r9
  0x00007f75704b0b16: mov    0x38(%rsp),%r8
  0x00007f75704b0b1b: mov    0x40(%rsp),%rdi
  0x00007f75704b0b20: mov    0x48(%rsp),%rsi
  0x00007f75704b0b25: mov    0x50(%rsp),%rbp
  0x00007f75704b0b2a: mov    0x60(%rsp),%rbx
  0x00007f75704b0b2f: mov    0x68(%rsp),%rdx
  0x00007f75704b0b34: mov    0x70(%rsp),%rcx
  0x00007f75704b0b39: mov    0x78(%rsp),%rax
  0x00007f75704b0b3e: add    $0x80,%rsp
  0x00007f75704b0b45: add    $0x8,%rsp
  0x00007f75704b0b49: popfq  
  0x00007f75704b0b4a: mov    %r13,%rsp
  0x00007f75704b0b4d: pop    %rax
  0x00007f75704b0b4e: mov    %rsp,%r13
  0x00007f75704b0b51: sub    $0x20,%rsp
  0x00007f75704b0b55: mov    %rax,(%rsp)
  0x00007f75704b0b59: mov    %rsi,0x10(%rsp)
  0x00007f75704b0b5e: mov    %edx,0x8(%rsp)
  0x00007f75704b0b62: mov    0x40(%rbx),%rcx
  0x00007f75704b0b66: jmpq   *%rcx

AHE@0x00007f75800e98b8: 0xbaabaaa0 i2c: 0x00007f75704b0c20 c2i: 0x00007f75704b0d78 c2iUV: 0x00007f75704b0d4b
i2c argument handler #6 for: static ([CII[CIII)I (638 bytes generated)
c2i argument handler starts at 0x7f75704b0d78
  0x00007f75704b0c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b0c24: movabs $0x7f757036e3e0,%r11
  0x00007f75704b0c2e: cmp    %r11,%rax
  0x00007f75704b0c31: jbe    0x00007f75704b0c4a
  0x00007f75704b0c37: movabs $0x7f757046e3e0,%r11
  0x00007f75704b0c41: cmp    %r11,%rax
  0x00007f75704b0c44: jb     0x00007f75704b0d0d
  0x00007f75704b0c4a: movabs $0x7f7570369420,%r11
  0x00007f75704b0c54: cmp    %r11,%rax
  0x00007f75704b0c57: jbe    0x00007f75704b0c70
  0x00007f75704b0c5d: movabs $0x7f757036de58,%r11
  0x00007f75704b0c67: cmp    %r11,%rax
  0x00007f75704b0c6a: jb     0x00007f75704b0d0d
  0x00007f75704b0c70: movabs $0x7f75704a9820,%r11
  0x00007f75704b0c7a: cmp    %r11,%rax
  0x00007f75704b0c7d: jbe    0x00007f75704b0c96
  0x00007f75704b0c83: movabs $0x7f75704af5e0,%r11
  0x00007f75704b0c8d: cmp    %r11,%rax
  0x00007f75704b0c90: jb     0x00007f75704b0d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b0c96: mov    %rsp,-0x28(%rsp)
  0x00007f75704b0c9b: sub    $0x80,%rsp
  0x00007f75704b0ca2: mov    %rax,0x78(%rsp)
  0x00007f75704b0ca7: mov    %rcx,0x70(%rsp)
  0x00007f75704b0cac: mov    %rdx,0x68(%rsp)
  0x00007f75704b0cb1: mov    %rbx,0x60(%rsp)
  0x00007f75704b0cb6: mov    %rbp,0x50(%rsp)
  0x00007f75704b0cbb: mov    %rsi,0x48(%rsp)
  0x00007f75704b0cc0: mov    %rdi,0x40(%rsp)
  0x00007f75704b0cc5: mov    %r8,0x38(%rsp)
  0x00007f75704b0cca: mov    %r9,0x30(%rsp)
  0x00007f75704b0ccf: mov    %r10,0x28(%rsp)
  0x00007f75704b0cd4: mov    %r11,0x20(%rsp)
  0x00007f75704b0cd9: mov    %r12,0x18(%rsp)
  0x00007f75704b0cde: mov    %r13,0x10(%rsp)
  0x00007f75704b0ce3: mov    %r14,0x8(%rsp)
  0x00007f75704b0ce8: mov    %r15,(%rsp)
  0x00007f75704b0cec: movabs $0x7f758592f470,%rdi
  0x00007f75704b0cf6: movabs $0x7f75704b0c96,%rsi
  0x00007f75704b0d00: mov    %rsp,%rdx
  0x00007f75704b0d03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0d07: callq  0x00007f75853729fa
  0x00007f75704b0d0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b0d0d: mov    %rsp,%r11
  0x00007f75704b0d10: sub    $0x10,%rsp
  0x00007f75704b0d14: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0d18: push   %rax
  0x00007f75704b0d19: mov    %r11,%rax
  0x00007f75704b0d1c: mov    0x50(%rbx),%r11
  0x00007f75704b0d20: mov    0x38(%rax),%rsi
  0x00007f75704b0d24: mov    0x30(%rax),%edx
  0x00007f75704b0d27: mov    0x28(%rax),%ecx
  0x00007f75704b0d2a: mov    0x20(%rax),%r8
  0x00007f75704b0d2e: mov    0x18(%rax),%r9d
  0x00007f75704b0d32: mov    0x10(%rax),%edi
  0x00007f75704b0d35: mov    0x8(%rax),%r13d
  0x00007f75704b0d39: mov    %r13,0x8(%rsp)
  0x00007f75704b0d3e: mov    %rbx,0x258(%r15)
  0x00007f75704b0d45: mov    %rbx,%rax
  0x00007f75704b0d48: jmpq   *%r11
  0x00007f75704b0d4b: mov    0x8(%rsi),%ebx
  0x00007f75704b0d4e: shl    $0x3,%rbx
  0x00007f75704b0d52: cmp    0x10(%rax),%rbx
  0x00007f75704b0d56: mov    0x8(%rax),%rbx
  0x00007f75704b0d5a: je     0x00007f75704b0d65
  0x00007f75704b0d60: jmpq   0x00007f757046ec40
  0x00007f75704b0d65: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0d6d: je     0x00007f75704b0e68
  0x00007f75704b0d73: jmpq   0x00007f757046ec40
  0x00007f75704b0d78: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b0d80: je     0x00007f75704b0e68
  0x00007f75704b0d86: mov    %rsp,%r13
  0x00007f75704b0d89: mov    (%rsp),%rax
  0x00007f75704b0d8d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b0d91: pushfq 
  0x00007f75704b0d92: sub    $0x8,%rsp
  0x00007f75704b0d96: mov    %rsp,-0x28(%rsp)
  0x00007f75704b0d9b: sub    $0x80,%rsp
  0x00007f75704b0da2: mov    %rax,0x78(%rsp)
  0x00007f75704b0da7: mov    %rcx,0x70(%rsp)
  0x00007f75704b0dac: mov    %rdx,0x68(%rsp)
  0x00007f75704b0db1: mov    %rbx,0x60(%rsp)
  0x00007f75704b0db6: mov    %rbp,0x50(%rsp)
  0x00007f75704b0dbb: mov    %rsi,0x48(%rsp)
  0x00007f75704b0dc0: mov    %rdi,0x40(%rsp)
  0x00007f75704b0dc5: mov    %r8,0x38(%rsp)
  0x00007f75704b0dca: mov    %r9,0x30(%rsp)
  0x00007f75704b0dcf: mov    %r10,0x28(%rsp)
  0x00007f75704b0dd4: mov    %r11,0x20(%rsp)
  0x00007f75704b0dd9: mov    %r12,0x18(%rsp)
  0x00007f75704b0dde: mov    %r13,0x10(%rsp)
  0x00007f75704b0de3: mov    %r14,0x8(%rsp)
  0x00007f75704b0de8: mov    %r15,(%rsp)
  0x00007f75704b0dec: sub    $0x200,%rsp
  0x00007f75704b0df3: fxsave64 (%rsp)
  0x00007f75704b0df8: mov    %rbx,%rdi
  0x00007f75704b0dfb: mov    %rax,%rsi
  0x00007f75704b0dfe: callq  0x00007f7585522bca
  0x00007f75704b0e03: fxrstor64 (%rsp)
  0x00007f75704b0e08: add    $0x200,%rsp
  0x00007f75704b0e0f: mov    (%rsp),%r15
  0x00007f75704b0e13: mov    0x8(%rsp),%r14
  0x00007f75704b0e18: mov    0x10(%rsp),%r13
  0x00007f75704b0e1d: mov    0x18(%rsp),%r12
  0x00007f75704b0e22: mov    0x20(%rsp),%r11
  0x00007f75704b0e27: mov    0x28(%rsp),%r10
  0x00007f75704b0e2c: mov    0x30(%rsp),%r9
  0x00007f75704b0e31: mov    0x38(%rsp),%r8
  0x00007f75704b0e36: mov    0x40(%rsp),%rdi
  0x00007f75704b0e3b: mov    0x48(%rsp),%rsi
  0x00007f75704b0e40: mov    0x50(%rsp),%rbp
  0x00007f75704b0e45: mov    0x60(%rsp),%rbx
  0x00007f75704b0e4a: mov    0x68(%rsp),%rdx
  0x00007f75704b0e4f: mov    0x70(%rsp),%rcx
  0x00007f75704b0e54: mov    0x78(%rsp),%rax
  0x00007f75704b0e59: add    $0x80,%rsp
  0x00007f75704b0e60: add    $0x8,%rsp
  0x00007f75704b0e64: popfq  
  0x00007f75704b0e65: mov    %r13,%rsp
  0x00007f75704b0e68: pop    %rax
  0x00007f75704b0e69: mov    %rsp,%r13
  0x00007f75704b0e6c: sub    $0x40,%rsp
  0x00007f75704b0e70: mov    %rax,(%rsp)
  0x00007f75704b0e74: mov    %rsi,0x38(%rsp)
  0x00007f75704b0e79: mov    %edx,0x30(%rsp)
  0x00007f75704b0e7d: mov    %ecx,0x28(%rsp)
  0x00007f75704b0e81: mov    %r8,0x20(%rsp)
  0x00007f75704b0e86: mov    %r9d,0x18(%rsp)
  0x00007f75704b0e8b: mov    %edi,0x10(%rsp)
  0x00007f75704b0e8f: mov    0x40(%rsp),%eax
  0x00007f75704b0e93: mov    %rax,0x8(%rsp)
  0x00007f75704b0e98: mov    0x40(%rbx),%rcx
  0x00007f75704b0e9c: jmpq   *%rcx

AHE@0x00007f75800e9900: 0xbaaba000 i2c: 0x00007f75704b0f60 c2i: 0x00007f75704b10a8 c2iUV: 0x00007f75704b107b
i2c argument handler #7 for: static ([CIILjava/lang/String;I)I (609 bytes generated)
c2i argument handler starts at 0x7f75704b10a8
  0x00007f75704b0f60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b0f64: movabs $0x7f757036e3e0,%r11
  0x00007f75704b0f6e: cmp    %r11,%rax
  0x00007f75704b0f71: jbe    0x00007f75704b0f8a
  0x00007f75704b0f77: movabs $0x7f757046e3e0,%r11
  0x00007f75704b0f81: cmp    %r11,%rax
  0x00007f75704b0f84: jb     0x00007f75704b104d
  0x00007f75704b0f8a: movabs $0x7f7570369420,%r11
  0x00007f75704b0f94: cmp    %r11,%rax
  0x00007f75704b0f97: jbe    0x00007f75704b0fb0
  0x00007f75704b0f9d: movabs $0x7f757036de58,%r11
  0x00007f75704b0fa7: cmp    %r11,%rax
  0x00007f75704b0faa: jb     0x00007f75704b104d
  0x00007f75704b0fb0: movabs $0x7f75704a9820,%r11
  0x00007f75704b0fba: cmp    %r11,%rax
  0x00007f75704b0fbd: jbe    0x00007f75704b0fd6
  0x00007f75704b0fc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704b0fcd: cmp    %r11,%rax
  0x00007f75704b0fd0: jb     0x00007f75704b104d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b0fd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704b0fdb: sub    $0x80,%rsp
  0x00007f75704b0fe2: mov    %rax,0x78(%rsp)
  0x00007f75704b0fe7: mov    %rcx,0x70(%rsp)
  0x00007f75704b0fec: mov    %rdx,0x68(%rsp)
  0x00007f75704b0ff1: mov    %rbx,0x60(%rsp)
  0x00007f75704b0ff6: mov    %rbp,0x50(%rsp)
  0x00007f75704b0ffb: mov    %rsi,0x48(%rsp)
  0x00007f75704b1000: mov    %rdi,0x40(%rsp)
  0x00007f75704b1005: mov    %r8,0x38(%rsp)
  0x00007f75704b100a: mov    %r9,0x30(%rsp)
  0x00007f75704b100f: mov    %r10,0x28(%rsp)
  0x00007f75704b1014: mov    %r11,0x20(%rsp)
  0x00007f75704b1019: mov    %r12,0x18(%rsp)
  0x00007f75704b101e: mov    %r13,0x10(%rsp)
  0x00007f75704b1023: mov    %r14,0x8(%rsp)
  0x00007f75704b1028: mov    %r15,(%rsp)
  0x00007f75704b102c: movabs $0x7f758592f470,%rdi
  0x00007f75704b1036: movabs $0x7f75704b0fd6,%rsi
  0x00007f75704b1040: mov    %rsp,%rdx
  0x00007f75704b1043: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1047: callq  0x00007f75853729fa
  0x00007f75704b104c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b104d: mov    %rsp,%r11
  0x00007f75704b1050: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1054: push   %rax
  0x00007f75704b1055: mov    %r11,%rax
  0x00007f75704b1058: mov    0x50(%rbx),%r11
  0x00007f75704b105c: mov    0x28(%rax),%rsi
  0x00007f75704b1060: mov    0x20(%rax),%edx
  0x00007f75704b1063: mov    0x18(%rax),%ecx
  0x00007f75704b1066: mov    0x10(%rax),%r8
  0x00007f75704b106a: mov    0x8(%rax),%r9d
  0x00007f75704b106e: mov    %rbx,0x258(%r15)
  0x00007f75704b1075: mov    %rbx,%rax
  0x00007f75704b1078: jmpq   *%r11
  0x00007f75704b107b: mov    0x8(%rsi),%ebx
  0x00007f75704b107e: shl    $0x3,%rbx
  0x00007f75704b1082: cmp    0x10(%rax),%rbx
  0x00007f75704b1086: mov    0x8(%rax),%rbx
  0x00007f75704b108a: je     0x00007f75704b1095
  0x00007f75704b1090: jmpq   0x00007f757046ec40
  0x00007f75704b1095: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b109d: je     0x00007f75704b1198
  0x00007f75704b10a3: jmpq   0x00007f757046ec40
  0x00007f75704b10a8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b10b0: je     0x00007f75704b1198
  0x00007f75704b10b6: mov    %rsp,%r13
  0x00007f75704b10b9: mov    (%rsp),%rax
  0x00007f75704b10bd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b10c1: pushfq 
  0x00007f75704b10c2: sub    $0x8,%rsp
  0x00007f75704b10c6: mov    %rsp,-0x28(%rsp)
  0x00007f75704b10cb: sub    $0x80,%rsp
  0x00007f75704b10d2: mov    %rax,0x78(%rsp)
  0x00007f75704b10d7: mov    %rcx,0x70(%rsp)
  0x00007f75704b10dc: mov    %rdx,0x68(%rsp)
  0x00007f75704b10e1: mov    %rbx,0x60(%rsp)
  0x00007f75704b10e6: mov    %rbp,0x50(%rsp)
  0x00007f75704b10eb: mov    %rsi,0x48(%rsp)
  0x00007f75704b10f0: mov    %rdi,0x40(%rsp)
  0x00007f75704b10f5: mov    %r8,0x38(%rsp)
  0x00007f75704b10fa: mov    %r9,0x30(%rsp)
  0x00007f75704b10ff: mov    %r10,0x28(%rsp)
  0x00007f75704b1104: mov    %r11,0x20(%rsp)
  0x00007f75704b1109: mov    %r12,0x18(%rsp)
  0x00007f75704b110e: mov    %r13,0x10(%rsp)
  0x00007f75704b1113: mov    %r14,0x8(%rsp)
  0x00007f75704b1118: mov    %r15,(%rsp)
  0x00007f75704b111c: sub    $0x200,%rsp
  0x00007f75704b1123: fxsave64 (%rsp)
  0x00007f75704b1128: mov    %rbx,%rdi
  0x00007f75704b112b: mov    %rax,%rsi
  0x00007f75704b112e: callq  0x00007f7585522bca
  0x00007f75704b1133: fxrstor64 (%rsp)
  0x00007f75704b1138: add    $0x200,%rsp
  0x00007f75704b113f: mov    (%rsp),%r15
  0x00007f75704b1143: mov    0x8(%rsp),%r14
  0x00007f75704b1148: mov    0x10(%rsp),%r13
  0x00007f75704b114d: mov    0x18(%rsp),%r12
  0x00007f75704b1152: mov    0x20(%rsp),%r11
  0x00007f75704b1157: mov    0x28(%rsp),%r10
  0x00007f75704b115c: mov    0x30(%rsp),%r9
  0x00007f75704b1161: mov    0x38(%rsp),%r8
  0x00007f75704b1166: mov    0x40(%rsp),%rdi
  0x00007f75704b116b: mov    0x48(%rsp),%rsi
  0x00007f75704b1170: mov    0x50(%rsp),%rbp
  0x00007f75704b1175: mov    0x60(%rsp),%rbx
  0x00007f75704b117a: mov    0x68(%rsp),%rdx
  0x00007f75704b117f: mov    0x70(%rsp),%rcx
  0x00007f75704b1184: mov    0x78(%rsp),%rax
  0x00007f75704b1189: add    $0x80,%rsp
  0x00007f75704b1190: add    $0x8,%rsp
  0x00007f75704b1194: popfq  
  0x00007f75704b1195: mov    %r13,%rsp
  0x00007f75704b1198: pop    %rax
  0x00007f75704b1199: mov    %rsp,%r13
  0x00007f75704b119c: sub    $0x30,%rsp
  0x00007f75704b11a0: mov    %rax,(%rsp)
  0x00007f75704b11a4: mov    %rsi,0x28(%rsp)
  0x00007f75704b11a9: mov    %edx,0x20(%rsp)
  0x00007f75704b11ad: mov    %ecx,0x18(%rsp)
  0x00007f75704b11b1: mov    %r8,0x10(%rsp)
  0x00007f75704b11b6: mov    %r9d,0x8(%rsp)
  0x00007f75704b11bb: mov    0x40(%rbx),%rcx
  0x00007f75704b11bf: jmpq   *%rcx

AHE@0x00007f75800e9948: 0xbaabaa00 i2c: 0x00007f75704b12a0 c2i: 0x00007f75704b13eb c2iUV: 0x00007f75704b13be
i2c argument handler #8 for: receiver (ZILjava/lang/String;II)Z (616 bytes generated)
c2i argument handler starts at 0x7f75704b13eb
  0x00007f75704b12a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b12a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704b12ae: cmp    %r11,%rax
  0x00007f75704b12b1: jbe    0x00007f75704b12ca
  0x00007f75704b12b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704b12c1: cmp    %r11,%rax
  0x00007f75704b12c4: jb     0x00007f75704b138d
  0x00007f75704b12ca: movabs $0x7f7570369420,%r11
  0x00007f75704b12d4: cmp    %r11,%rax
  0x00007f75704b12d7: jbe    0x00007f75704b12f0
  0x00007f75704b12dd: movabs $0x7f757036de58,%r11
  0x00007f75704b12e7: cmp    %r11,%rax
  0x00007f75704b12ea: jb     0x00007f75704b138d
  0x00007f75704b12f0: movabs $0x7f75704a9820,%r11
  0x00007f75704b12fa: cmp    %r11,%rax
  0x00007f75704b12fd: jbe    0x00007f75704b1316
  0x00007f75704b1303: movabs $0x7f75704af5e0,%r11
  0x00007f75704b130d: cmp    %r11,%rax
  0x00007f75704b1310: jb     0x00007f75704b138d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b1316: mov    %rsp,-0x28(%rsp)
  0x00007f75704b131b: sub    $0x80,%rsp
  0x00007f75704b1322: mov    %rax,0x78(%rsp)
  0x00007f75704b1327: mov    %rcx,0x70(%rsp)
  0x00007f75704b132c: mov    %rdx,0x68(%rsp)
  0x00007f75704b1331: mov    %rbx,0x60(%rsp)
  0x00007f75704b1336: mov    %rbp,0x50(%rsp)
  0x00007f75704b133b: mov    %rsi,0x48(%rsp)
  0x00007f75704b1340: mov    %rdi,0x40(%rsp)
  0x00007f75704b1345: mov    %r8,0x38(%rsp)
  0x00007f75704b134a: mov    %r9,0x30(%rsp)
  0x00007f75704b134f: mov    %r10,0x28(%rsp)
  0x00007f75704b1354: mov    %r11,0x20(%rsp)
  0x00007f75704b1359: mov    %r12,0x18(%rsp)
  0x00007f75704b135e: mov    %r13,0x10(%rsp)
  0x00007f75704b1363: mov    %r14,0x8(%rsp)
  0x00007f75704b1368: mov    %r15,(%rsp)
  0x00007f75704b136c: movabs $0x7f758592f470,%rdi
  0x00007f75704b1376: movabs $0x7f75704b1316,%rsi
  0x00007f75704b1380: mov    %rsp,%rdx
  0x00007f75704b1383: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1387: callq  0x00007f75853729fa
  0x00007f75704b138c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b138d: mov    %rsp,%r11
  0x00007f75704b1390: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1394: push   %rax
  0x00007f75704b1395: mov    %r11,%rax
  0x00007f75704b1398: mov    0x50(%rbx),%r11
  0x00007f75704b139c: mov    0x30(%rax),%rsi
  0x00007f75704b13a0: mov    0x28(%rax),%edx
  0x00007f75704b13a3: mov    0x20(%rax),%ecx
  0x00007f75704b13a6: mov    0x18(%rax),%r8
  0x00007f75704b13aa: mov    0x10(%rax),%r9d
  0x00007f75704b13ae: mov    0x8(%rax),%edi
  0x00007f75704b13b1: mov    %rbx,0x258(%r15)
  0x00007f75704b13b8: mov    %rbx,%rax
  0x00007f75704b13bb: jmpq   *%r11
  0x00007f75704b13be: mov    0x8(%rsi),%ebx
  0x00007f75704b13c1: shl    $0x3,%rbx
  0x00007f75704b13c5: cmp    0x10(%rax),%rbx
  0x00007f75704b13c9: mov    0x8(%rax),%rbx
  0x00007f75704b13cd: je     0x00007f75704b13d8
  0x00007f75704b13d3: jmpq   0x00007f757046ec40
  0x00007f75704b13d8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b13e0: je     0x00007f75704b14db
  0x00007f75704b13e6: jmpq   0x00007f757046ec40
  0x00007f75704b13eb: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b13f3: je     0x00007f75704b14db
  0x00007f75704b13f9: mov    %rsp,%r13
  0x00007f75704b13fc: mov    (%rsp),%rax
  0x00007f75704b1400: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1404: pushfq 
  0x00007f75704b1405: sub    $0x8,%rsp
  0x00007f75704b1409: mov    %rsp,-0x28(%rsp)
  0x00007f75704b140e: sub    $0x80,%rsp
  0x00007f75704b1415: mov    %rax,0x78(%rsp)
  0x00007f75704b141a: mov    %rcx,0x70(%rsp)
  0x00007f75704b141f: mov    %rdx,0x68(%rsp)
  0x00007f75704b1424: mov    %rbx,0x60(%rsp)
  0x00007f75704b1429: mov    %rbp,0x50(%rsp)
  0x00007f75704b142e: mov    %rsi,0x48(%rsp)
  0x00007f75704b1433: mov    %rdi,0x40(%rsp)
  0x00007f75704b1438: mov    %r8,0x38(%rsp)
  0x00007f75704b143d: mov    %r9,0x30(%rsp)
  0x00007f75704b1442: mov    %r10,0x28(%rsp)
  0x00007f75704b1447: mov    %r11,0x20(%rsp)
  0x00007f75704b144c: mov    %r12,0x18(%rsp)
  0x00007f75704b1451: mov    %r13,0x10(%rsp)
  0x00007f75704b1456: mov    %r14,0x8(%rsp)
  0x00007f75704b145b: mov    %r15,(%rsp)
  0x00007f75704b145f: sub    $0x200,%rsp
  0x00007f75704b1466: fxsave64 (%rsp)
  0x00007f75704b146b: mov    %rbx,%rdi
  0x00007f75704b146e: mov    %rax,%rsi
  0x00007f75704b1471: callq  0x00007f7585522bca
  0x00007f75704b1476: fxrstor64 (%rsp)
  0x00007f75704b147b: add    $0x200,%rsp
  0x00007f75704b1482: mov    (%rsp),%r15
  0x00007f75704b1486: mov    0x8(%rsp),%r14
  0x00007f75704b148b: mov    0x10(%rsp),%r13
  0x00007f75704b1490: mov    0x18(%rsp),%r12
  0x00007f75704b1495: mov    0x20(%rsp),%r11
  0x00007f75704b149a: mov    0x28(%rsp),%r10
  0x00007f75704b149f: mov    0x30(%rsp),%r9
  0x00007f75704b14a4: mov    0x38(%rsp),%r8
  0x00007f75704b14a9: mov    0x40(%rsp),%rdi
  0x00007f75704b14ae: mov    0x48(%rsp),%rsi
  0x00007f75704b14b3: mov    0x50(%rsp),%rbp
  0x00007f75704b14b8: mov    0x60(%rsp),%rbx
  0x00007f75704b14bd: mov    0x68(%rsp),%rdx
  0x00007f75704b14c2: mov    0x70(%rsp),%rcx
  0x00007f75704b14c7: mov    0x78(%rsp),%rax
  0x00007f75704b14cc: add    $0x80,%rsp
  0x00007f75704b14d3: add    $0x8,%rsp
  0x00007f75704b14d7: popfq  
  0x00007f75704b14d8: mov    %r13,%rsp
  0x00007f75704b14db: pop    %rax
  0x00007f75704b14dc: mov    %rsp,%r13
  0x00007f75704b14df: sub    $0x40,%rsp
  0x00007f75704b14e3: mov    %rax,(%rsp)
  0x00007f75704b14e7: mov    %rsi,0x30(%rsp)
  0x00007f75704b14ec: mov    %edx,0x28(%rsp)
  0x00007f75704b14f0: mov    %ecx,0x20(%rsp)
  0x00007f75704b14f4: mov    %r8,0x18(%rsp)
  0x00007f75704b14f9: mov    %r9d,0x10(%rsp)
  0x00007f75704b14fe: mov    %edi,0x8(%rsp)
  0x00007f75704b1502: mov    0x40(%rbx),%rcx
  0x00007f75704b1506: jmpq   *%rcx

AHE@0x00007f75800e9990: 0xbabaa000 i2c: 0x00007f75704b15e0 c2i: 0x00007f75704b1729 c2iUV: 0x00007f75704b16fc
i2c argument handler #9 for: receiver (ILjava/lang/String;II)Z (611 bytes generated)
c2i argument handler starts at 0x7f75704b1729
  0x00007f75704b15e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b15e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704b15ee: cmp    %r11,%rax
  0x00007f75704b15f1: jbe    0x00007f75704b160a
  0x00007f75704b15f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704b1601: cmp    %r11,%rax
  0x00007f75704b1604: jb     0x00007f75704b16cd
  0x00007f75704b160a: movabs $0x7f7570369420,%r11
  0x00007f75704b1614: cmp    %r11,%rax
  0x00007f75704b1617: jbe    0x00007f75704b1630
  0x00007f75704b161d: movabs $0x7f757036de58,%r11
  0x00007f75704b1627: cmp    %r11,%rax
  0x00007f75704b162a: jb     0x00007f75704b16cd
  0x00007f75704b1630: movabs $0x7f75704a9820,%r11
  0x00007f75704b163a: cmp    %r11,%rax
  0x00007f75704b163d: jbe    0x00007f75704b1656
  0x00007f75704b1643: movabs $0x7f75704af5e0,%r11
  0x00007f75704b164d: cmp    %r11,%rax
  0x00007f75704b1650: jb     0x00007f75704b16cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b1656: mov    %rsp,-0x28(%rsp)
  0x00007f75704b165b: sub    $0x80,%rsp
  0x00007f75704b1662: mov    %rax,0x78(%rsp)
  0x00007f75704b1667: mov    %rcx,0x70(%rsp)
  0x00007f75704b166c: mov    %rdx,0x68(%rsp)
  0x00007f75704b1671: mov    %rbx,0x60(%rsp)
  0x00007f75704b1676: mov    %rbp,0x50(%rsp)
  0x00007f75704b167b: mov    %rsi,0x48(%rsp)
  0x00007f75704b1680: mov    %rdi,0x40(%rsp)
  0x00007f75704b1685: mov    %r8,0x38(%rsp)
  0x00007f75704b168a: mov    %r9,0x30(%rsp)
  0x00007f75704b168f: mov    %r10,0x28(%rsp)
  0x00007f75704b1694: mov    %r11,0x20(%rsp)
  0x00007f75704b1699: mov    %r12,0x18(%rsp)
  0x00007f75704b169e: mov    %r13,0x10(%rsp)
  0x00007f75704b16a3: mov    %r14,0x8(%rsp)
  0x00007f75704b16a8: mov    %r15,(%rsp)
  0x00007f75704b16ac: movabs $0x7f758592f470,%rdi
  0x00007f75704b16b6: movabs $0x7f75704b1656,%rsi
  0x00007f75704b16c0: mov    %rsp,%rdx
  0x00007f75704b16c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b16c7: callq  0x00007f75853729fa
  0x00007f75704b16cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704b16cd: mov    %rsp,%r11
  0x00007f75704b16d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b16d4: push   %rax
  0x00007f75704b16d5: mov    %r11,%rax
  0x00007f75704b16d8: mov    0x50(%rbx),%r11
  0x00007f75704b16dc: mov    0x28(%rax),%rsi
  0x00007f75704b16e0: mov    0x20(%rax),%edx
  0x00007f75704b16e3: mov    0x18(%rax),%rcx
  0x00007f75704b16e7: mov    0x10(%rax),%r8d
  0x00007f75704b16eb: mov    0x8(%rax),%r9d
  0x00007f75704b16ef: mov    %rbx,0x258(%r15)
  0x00007f75704b16f6: mov    %rbx,%rax
  0x00007f75704b16f9: jmpq   *%r11
  0x00007f75704b16fc: mov    0x8(%rsi),%ebx
  0x00007f75704b16ff: shl    $0x3,%rbx
  0x00007f75704b1703: cmp    0x10(%rax),%rbx
  0x00007f75704b1707: mov    0x8(%rax),%rbx
  0x00007f75704b170b: je     0x00007f75704b1716
  0x00007f75704b1711: jmpq   0x00007f757046ec40
  0x00007f75704b1716: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b171e: je     0x00007f75704b1819
  0x00007f75704b1724: jmpq   0x00007f757046ec40
  0x00007f75704b1729: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b1731: je     0x00007f75704b1819
  0x00007f75704b1737: mov    %rsp,%r13
  0x00007f75704b173a: mov    (%rsp),%rax
  0x00007f75704b173e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1742: pushfq 
  0x00007f75704b1743: sub    $0x8,%rsp
  0x00007f75704b1747: mov    %rsp,-0x28(%rsp)
  0x00007f75704b174c: sub    $0x80,%rsp
  0x00007f75704b1753: mov    %rax,0x78(%rsp)
  0x00007f75704b1758: mov    %rcx,0x70(%rsp)
  0x00007f75704b175d: mov    %rdx,0x68(%rsp)
  0x00007f75704b1762: mov    %rbx,0x60(%rsp)
  0x00007f75704b1767: mov    %rbp,0x50(%rsp)
  0x00007f75704b176c: mov    %rsi,0x48(%rsp)
  0x00007f75704b1771: mov    %rdi,0x40(%rsp)
  0x00007f75704b1776: mov    %r8,0x38(%rsp)
  0x00007f75704b177b: mov    %r9,0x30(%rsp)
  0x00007f75704b1780: mov    %r10,0x28(%rsp)
  0x00007f75704b1785: mov    %r11,0x20(%rsp)
  0x00007f75704b178a: mov    %r12,0x18(%rsp)
  0x00007f75704b178f: mov    %r13,0x10(%rsp)
  0x00007f75704b1794: mov    %r14,0x8(%rsp)
  0x00007f75704b1799: mov    %r15,(%rsp)
  0x00007f75704b179d: sub    $0x200,%rsp
  0x00007f75704b17a4: fxsave64 (%rsp)
  0x00007f75704b17a9: mov    %rbx,%rdi
  0x00007f75704b17ac: mov    %rax,%rsi
  0x00007f75704b17af: callq  0x00007f7585522bca
  0x00007f75704b17b4: fxrstor64 (%rsp)
  0x00007f75704b17b9: add    $0x200,%rsp
  0x00007f75704b17c0: mov    (%rsp),%r15
  0x00007f75704b17c4: mov    0x8(%rsp),%r14
  0x00007f75704b17c9: mov    0x10(%rsp),%r13
  0x00007f75704b17ce: mov    0x18(%rsp),%r12
  0x00007f75704b17d3: mov    0x20(%rsp),%r11
  0x00007f75704b17d8: mov    0x28(%rsp),%r10
  0x00007f75704b17dd: mov    0x30(%rsp),%r9
  0x00007f75704b17e2: mov    0x38(%rsp),%r8
  0x00007f75704b17e7: mov    0x40(%rsp),%rdi
  0x00007f75704b17ec: mov    0x48(%rsp),%rsi
  0x00007f75704b17f1: mov    0x50(%rsp),%rbp
  0x00007f75704b17f6: mov    0x60(%rsp),%rbx
  0x00007f75704b17fb: mov    0x68(%rsp),%rdx
  0x00007f75704b1800: mov    0x70(%rsp),%rcx
  0x00007f75704b1805: mov    0x78(%rsp),%rax
  0x00007f75704b180a: add    $0x80,%rsp
  0x00007f75704b1811: add    $0x8,%rsp
  0x00007f75704b1815: popfq  
  0x00007f75704b1816: mov    %r13,%rsp
  0x00007f75704b1819: pop    %rax
  0x00007f75704b181a: mov    %rsp,%r13
  0x00007f75704b181d: sub    $0x30,%rsp
  0x00007f75704b1821: mov    %rax,(%rsp)
  0x00007f75704b1825: mov    %rsi,0x28(%rsp)
  0x00007f75704b182a: mov    %edx,0x20(%rsp)
  0x00007f75704b182e: mov    %rcx,0x18(%rsp)
  0x00007f75704b1833: mov    %r8d,0x10(%rsp)
  0x00007f75704b1838: mov    %r9d,0x8(%rsp)
  0x00007f75704b183d: mov    0x40(%rbx),%rcx
  0x00007f75704b1841: jmpq   *%rcx

AHE@0x00007f75800e99d8: 0xbe000000 i2c: 0x00007f75704b1920 c2i: 0x00007f75704b1a5a c2iUV: 0x00007f75704b1a2d
i2c argument handler #10 for: static (J)Ljava/lang/String; (592 bytes generated)
c2i argument handler starts at 0x7f75704b1a5a
  0x00007f75704b1920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b1924: movabs $0x7f757036e3e0,%r11
  0x00007f75704b192e: cmp    %r11,%rax
  0x00007f75704b1931: jbe    0x00007f75704b194a
  0x00007f75704b1937: movabs $0x7f757046e3e0,%r11
  0x00007f75704b1941: cmp    %r11,%rax
  0x00007f75704b1944: jb     0x00007f75704b1a0d
  0x00007f75704b194a: movabs $0x7f7570369420,%r11
  0x00007f75704b1954: cmp    %r11,%rax
  0x00007f75704b1957: jbe    0x00007f75704b1970
  0x00007f75704b195d: movabs $0x7f757036de58,%r11
  0x00007f75704b1967: cmp    %r11,%rax
  0x00007f75704b196a: jb     0x00007f75704b1a0d
  0x00007f75704b1970: movabs $0x7f75704a9820,%r11
  0x00007f75704b197a: cmp    %r11,%rax
  0x00007f75704b197d: jbe    0x00007f75704b1996
  0x00007f75704b1983: movabs $0x7f75704af5e0,%r11
  0x00007f75704b198d: cmp    %r11,%rax
  0x00007f75704b1990: jb     0x00007f75704b1a0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b1996: mov    %rsp,-0x28(%rsp)
  0x00007f75704b199b: sub    $0x80,%rsp
  0x00007f75704b19a2: mov    %rax,0x78(%rsp)
  0x00007f75704b19a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b19ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b19b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b19b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b19bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b19c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b19c5: mov    %r8,0x38(%rsp)
  0x00007f75704b19ca: mov    %r9,0x30(%rsp)
  0x00007f75704b19cf: mov    %r10,0x28(%rsp)
  0x00007f75704b19d4: mov    %r11,0x20(%rsp)
  0x00007f75704b19d9: mov    %r12,0x18(%rsp)
  0x00007f75704b19de: mov    %r13,0x10(%rsp)
  0x00007f75704b19e3: mov    %r14,0x8(%rsp)
  0x00007f75704b19e8: mov    %r15,(%rsp)
  0x00007f75704b19ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b19f6: movabs $0x7f75704b1996,%rsi
  0x00007f75704b1a00: mov    %rsp,%rdx
  0x00007f75704b1a03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1a07: callq  0x00007f75853729fa
  0x00007f75704b1a0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b1a0d: mov    %rsp,%r11
  0x00007f75704b1a10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1a14: push   %rax
  0x00007f75704b1a15: mov    %r11,%rax
  0x00007f75704b1a18: mov    0x50(%rbx),%r11
  0x00007f75704b1a1c: mov    0x8(%rax),%rsi
  0x00007f75704b1a20: mov    %rbx,0x258(%r15)
  0x00007f75704b1a27: mov    %rbx,%rax
  0x00007f75704b1a2a: jmpq   *%r11
  0x00007f75704b1a2d: mov    0x8(%rsi),%ebx
  0x00007f75704b1a30: shl    $0x3,%rbx
  0x00007f75704b1a34: cmp    0x10(%rax),%rbx
  0x00007f75704b1a38: mov    0x8(%rax),%rbx
  0x00007f75704b1a3c: je     0x00007f75704b1a47
  0x00007f75704b1a42: jmpq   0x00007f757046ec40
  0x00007f75704b1a47: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b1a4f: je     0x00007f75704b1b4a
  0x00007f75704b1a55: jmpq   0x00007f757046ec40
  0x00007f75704b1a5a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b1a62: je     0x00007f75704b1b4a
  0x00007f75704b1a68: mov    %rsp,%r13
  0x00007f75704b1a6b: mov    (%rsp),%rax
  0x00007f75704b1a6f: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1a73: pushfq 
  0x00007f75704b1a74: sub    $0x8,%rsp
  0x00007f75704b1a78: mov    %rsp,-0x28(%rsp)
  0x00007f75704b1a7d: sub    $0x80,%rsp
  0x00007f75704b1a84: mov    %rax,0x78(%rsp)
  0x00007f75704b1a89: mov    %rcx,0x70(%rsp)
  0x00007f75704b1a8e: mov    %rdx,0x68(%rsp)
  0x00007f75704b1a93: mov    %rbx,0x60(%rsp)
  0x00007f75704b1a98: mov    %rbp,0x50(%rsp)
  0x00007f75704b1a9d: mov    %rsi,0x48(%rsp)
  0x00007f75704b1aa2: mov    %rdi,0x40(%rsp)
  0x00007f75704b1aa7: mov    %r8,0x38(%rsp)
  0x00007f75704b1aac: mov    %r9,0x30(%rsp)
  0x00007f75704b1ab1: mov    %r10,0x28(%rsp)
  0x00007f75704b1ab6: mov    %r11,0x20(%rsp)
  0x00007f75704b1abb: mov    %r12,0x18(%rsp)
  0x00007f75704b1ac0: mov    %r13,0x10(%rsp)
  0x00007f75704b1ac5: mov    %r14,0x8(%rsp)
  0x00007f75704b1aca: mov    %r15,(%rsp)
  0x00007f75704b1ace: sub    $0x200,%rsp
  0x00007f75704b1ad5: fxsave64 (%rsp)
  0x00007f75704b1ada: mov    %rbx,%rdi
  0x00007f75704b1add: mov    %rax,%rsi
  0x00007f75704b1ae0: callq  0x00007f7585522bca
  0x00007f75704b1ae5: fxrstor64 (%rsp)
  0x00007f75704b1aea: add    $0x200,%rsp
  0x00007f75704b1af1: mov    (%rsp),%r15
  0x00007f75704b1af5: mov    0x8(%rsp),%r14
  0x00007f75704b1afa: mov    0x10(%rsp),%r13
  0x00007f75704b1aff: mov    0x18(%rsp),%r12
  0x00007f75704b1b04: mov    0x20(%rsp),%r11
  0x00007f75704b1b09: mov    0x28(%rsp),%r10
  0x00007f75704b1b0e: mov    0x30(%rsp),%r9
  0x00007f75704b1b13: mov    0x38(%rsp),%r8
  0x00007f75704b1b18: mov    0x40(%rsp),%rdi
  0x00007f75704b1b1d: mov    0x48(%rsp),%rsi
  0x00007f75704b1b22: mov    0x50(%rsp),%rbp
  0x00007f75704b1b27: mov    0x60(%rsp),%rbx
  0x00007f75704b1b2c: mov    0x68(%rsp),%rdx
  0x00007f75704b1b31: mov    0x70(%rsp),%rcx
  0x00007f75704b1b36: mov    0x78(%rsp),%rax
  0x00007f75704b1b3b: add    $0x80,%rsp
  0x00007f75704b1b42: add    $0x8,%rsp
  0x00007f75704b1b46: popfq  
  0x00007f75704b1b47: mov    %r13,%rsp
  0x00007f75704b1b4a: pop    %rax
  0x00007f75704b1b4b: mov    %rsp,%r13
  0x00007f75704b1b4e: sub    $0x20,%rsp
  0x00007f75704b1b52: mov    %rax,(%rsp)
  0x00007f75704b1b56: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704b1b60: mov    %rax,0x10(%rsp)
  0x00007f75704b1b65: mov    %rsi,0x8(%rsp)
  0x00007f75704b1b6a: mov    0x40(%rbx),%rcx
  0x00007f75704b1b6e: jmpq   *%rcx

AHE@0x00007f75800e9a20: 0xa0000000 i2c: 0x00007f75704b1c20 c2i: 0x00007f75704b1d59 c2iUV: 0x00007f75704b1d2c
i2c argument handler #11 for: static (I)Ljava/lang/String; (575 bytes generated)
c2i argument handler starts at 0x7f75704b1d59
  0x00007f75704b1c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b1c24: movabs $0x7f757036e3e0,%r11
  0x00007f75704b1c2e: cmp    %r11,%rax
  0x00007f75704b1c31: jbe    0x00007f75704b1c4a
  0x00007f75704b1c37: movabs $0x7f757046e3e0,%r11
  0x00007f75704b1c41: cmp    %r11,%rax
  0x00007f75704b1c44: jb     0x00007f75704b1d0d
  0x00007f75704b1c4a: movabs $0x7f7570369420,%r11
  0x00007f75704b1c54: cmp    %r11,%rax
  0x00007f75704b1c57: jbe    0x00007f75704b1c70
  0x00007f75704b1c5d: movabs $0x7f757036de58,%r11
  0x00007f75704b1c67: cmp    %r11,%rax
  0x00007f75704b1c6a: jb     0x00007f75704b1d0d
  0x00007f75704b1c70: movabs $0x7f75704a9820,%r11
  0x00007f75704b1c7a: cmp    %r11,%rax
  0x00007f75704b1c7d: jbe    0x00007f75704b1c96
  0x00007f75704b1c83: movabs $0x7f75704af5e0,%r11
  0x00007f75704b1c8d: cmp    %r11,%rax
  0x00007f75704b1c90: jb     0x00007f75704b1d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b1c96: mov    %rsp,-0x28(%rsp)
  0x00007f75704b1c9b: sub    $0x80,%rsp
  0x00007f75704b1ca2: mov    %rax,0x78(%rsp)
  0x00007f75704b1ca7: mov    %rcx,0x70(%rsp)
  0x00007f75704b1cac: mov    %rdx,0x68(%rsp)
  0x00007f75704b1cb1: mov    %rbx,0x60(%rsp)
  0x00007f75704b1cb6: mov    %rbp,0x50(%rsp)
  0x00007f75704b1cbb: mov    %rsi,0x48(%rsp)
  0x00007f75704b1cc0: mov    %rdi,0x40(%rsp)
  0x00007f75704b1cc5: mov    %r8,0x38(%rsp)
  0x00007f75704b1cca: mov    %r9,0x30(%rsp)
  0x00007f75704b1ccf: mov    %r10,0x28(%rsp)
  0x00007f75704b1cd4: mov    %r11,0x20(%rsp)
  0x00007f75704b1cd9: mov    %r12,0x18(%rsp)
  0x00007f75704b1cde: mov    %r13,0x10(%rsp)
  0x00007f75704b1ce3: mov    %r14,0x8(%rsp)
  0x00007f75704b1ce8: mov    %r15,(%rsp)
  0x00007f75704b1cec: movabs $0x7f758592f470,%rdi
  0x00007f75704b1cf6: movabs $0x7f75704b1c96,%rsi
  0x00007f75704b1d00: mov    %rsp,%rdx
  0x00007f75704b1d03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1d07: callq  0x00007f75853729fa
  0x00007f75704b1d0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b1d0d: mov    %rsp,%r11
  0x00007f75704b1d10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1d14: push   %rax
  0x00007f75704b1d15: mov    %r11,%rax
  0x00007f75704b1d18: mov    0x50(%rbx),%r11
  0x00007f75704b1d1c: mov    0x8(%rax),%esi
  0x00007f75704b1d1f: mov    %rbx,0x258(%r15)
  0x00007f75704b1d26: mov    %rbx,%rax
  0x00007f75704b1d29: jmpq   *%r11
  0x00007f75704b1d2c: mov    0x8(%rsi),%ebx
  0x00007f75704b1d2f: shl    $0x3,%rbx
  0x00007f75704b1d33: cmp    0x10(%rax),%rbx
  0x00007f75704b1d37: mov    0x8(%rax),%rbx
  0x00007f75704b1d3b: je     0x00007f75704b1d46
  0x00007f75704b1d41: jmpq   0x00007f757046ec40
  0x00007f75704b1d46: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b1d4e: je     0x00007f75704b1e49
  0x00007f75704b1d54: jmpq   0x00007f757046ec40
  0x00007f75704b1d59: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b1d61: je     0x00007f75704b1e49
  0x00007f75704b1d67: mov    %rsp,%r13
  0x00007f75704b1d6a: mov    (%rsp),%rax
  0x00007f75704b1d6e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b1d72: pushfq 
  0x00007f75704b1d73: sub    $0x8,%rsp
  0x00007f75704b1d77: mov    %rsp,-0x28(%rsp)
  0x00007f75704b1d7c: sub    $0x80,%rsp
  0x00007f75704b1d83: mov    %rax,0x78(%rsp)
  0x00007f75704b1d88: mov    %rcx,0x70(%rsp)
  0x00007f75704b1d8d: mov    %rdx,0x68(%rsp)
  0x00007f75704b1d92: mov    %rbx,0x60(%rsp)
  0x00007f75704b1d97: mov    %rbp,0x50(%rsp)
  0x00007f75704b1d9c: mov    %rsi,0x48(%rsp)
  0x00007f75704b1da1: mov    %rdi,0x40(%rsp)
  0x00007f75704b1da6: mov    %r8,0x38(%rsp)
  0x00007f75704b1dab: mov    %r9,0x30(%rsp)
  0x00007f75704b1db0: mov    %r10,0x28(%rsp)
  0x00007f75704b1db5: mov    %r11,0x20(%rsp)
  0x00007f75704b1dba: mov    %r12,0x18(%rsp)
  0x00007f75704b1dbf: mov    %r13,0x10(%rsp)
  0x00007f75704b1dc4: mov    %r14,0x8(%rsp)
  0x00007f75704b1dc9: mov    %r15,(%rsp)
  0x00007f75704b1dcd: sub    $0x200,%rsp
  0x00007f75704b1dd4: fxsave64 (%rsp)
  0x00007f75704b1dd9: mov    %rbx,%rdi
  0x00007f75704b1ddc: mov    %rax,%rsi
  0x00007f75704b1ddf: callq  0x00007f7585522bca
  0x00007f75704b1de4: fxrstor64 (%rsp)
  0x00007f75704b1de9: add    $0x200,%rsp
  0x00007f75704b1df0: mov    (%rsp),%r15
  0x00007f75704b1df4: mov    0x8(%rsp),%r14
  0x00007f75704b1df9: mov    0x10(%rsp),%r13
  0x00007f75704b1dfe: mov    0x18(%rsp),%r12
  0x00007f75704b1e03: mov    0x20(%rsp),%r11
  0x00007f75704b1e08: mov    0x28(%rsp),%r10
  0x00007f75704b1e0d: mov    0x30(%rsp),%r9
  0x00007f75704b1e12: mov    0x38(%rsp),%r8
  0x00007f75704b1e17: mov    0x40(%rsp),%rdi
  0x00007f75704b1e1c: mov    0x48(%rsp),%rsi
  0x00007f75704b1e21: mov    0x50(%rsp),%rbp
  0x00007f75704b1e26: mov    0x60(%rsp),%rbx
  0x00007f75704b1e2b: mov    0x68(%rsp),%rdx
  0x00007f75704b1e30: mov    0x70(%rsp),%rcx
  0x00007f75704b1e35: mov    0x78(%rsp),%rax
  0x00007f75704b1e3a: add    $0x80,%rsp
  0x00007f75704b1e41: add    $0x8,%rsp
  0x00007f75704b1e45: popfq  
  0x00007f75704b1e46: mov    %r13,%rsp
  0x00007f75704b1e49: pop    %rax
  0x00007f75704b1e4a: mov    %rsp,%r13
  0x00007f75704b1e4d: sub    $0x10,%rsp
  0x00007f75704b1e51: mov    %rax,(%rsp)
  0x00007f75704b1e55: mov    %esi,0x8(%rsp)
  0x00007f75704b1e59: mov    0x40(%rbx),%rcx
  0x00007f75704b1e5d: jmpq   *%rcx

AHE@0x00007f75800e9a68: 0x60000000 i2c: 0x00007f75704b1f20 c2i: 0x00007f75704b205b c2iUV: 0x00007f75704b202e
i2c argument handler #12 for: static (F)Ljava/lang/String; (579 bytes generated)
c2i argument handler starts at 0x7f75704b205b
  0x00007f75704b1f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b1f24: movabs $0x7f757036e3e0,%r11
  0x00007f75704b1f2e: cmp    %r11,%rax
  0x00007f75704b1f31: jbe    0x00007f75704b1f4a
  0x00007f75704b1f37: movabs $0x7f757046e3e0,%r11
  0x00007f75704b1f41: cmp    %r11,%rax
  0x00007f75704b1f44: jb     0x00007f75704b200d
  0x00007f75704b1f4a: movabs $0x7f7570369420,%r11
  0x00007f75704b1f54: cmp    %r11,%rax
  0x00007f75704b1f57: jbe    0x00007f75704b1f70
  0x00007f75704b1f5d: movabs $0x7f757036de58,%r11
  0x00007f75704b1f67: cmp    %r11,%rax
  0x00007f75704b1f6a: jb     0x00007f75704b200d
  0x00007f75704b1f70: movabs $0x7f75704a9820,%r11
  0x00007f75704b1f7a: cmp    %r11,%rax
  0x00007f75704b1f7d: jbe    0x00007f75704b1f96
  0x00007f75704b1f83: movabs $0x7f75704af5e0,%r11
  0x00007f75704b1f8d: cmp    %r11,%rax
  0x00007f75704b1f90: jb     0x00007f75704b200d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b1f96: mov    %rsp,-0x28(%rsp)
  0x00007f75704b1f9b: sub    $0x80,%rsp
  0x00007f75704b1fa2: mov    %rax,0x78(%rsp)
  0x00007f75704b1fa7: mov    %rcx,0x70(%rsp)
  0x00007f75704b1fac: mov    %rdx,0x68(%rsp)
  0x00007f75704b1fb1: mov    %rbx,0x60(%rsp)
  0x00007f75704b1fb6: mov    %rbp,0x50(%rsp)
  0x00007f75704b1fbb: mov    %rsi,0x48(%rsp)
  0x00007f75704b1fc0: mov    %rdi,0x40(%rsp)
  0x00007f75704b1fc5: mov    %r8,0x38(%rsp)
  0x00007f75704b1fca: mov    %r9,0x30(%rsp)
  0x00007f75704b1fcf: mov    %r10,0x28(%rsp)
  0x00007f75704b1fd4: mov    %r11,0x20(%rsp)
  0x00007f75704b1fd9: mov    %r12,0x18(%rsp)
  0x00007f75704b1fde: mov    %r13,0x10(%rsp)
  0x00007f75704b1fe3: mov    %r14,0x8(%rsp)
  0x00007f75704b1fe8: mov    %r15,(%rsp)
  0x00007f75704b1fec: movabs $0x7f758592f470,%rdi
  0x00007f75704b1ff6: movabs $0x7f75704b1f96,%rsi
  0x00007f75704b2000: mov    %rsp,%rdx
  0x00007f75704b2003: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2007: callq  0x00007f75853729fa
  0x00007f75704b200c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b200d: mov    %rsp,%r11
  0x00007f75704b2010: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2014: push   %rax
  0x00007f75704b2015: mov    %r11,%rax
  0x00007f75704b2018: mov    0x50(%rbx),%r11
  0x00007f75704b201c: vmovss 0x8(%rax),%xmm0
  0x00007f75704b2021: mov    %rbx,0x258(%r15)
  0x00007f75704b2028: mov    %rbx,%rax
  0x00007f75704b202b: jmpq   *%r11
  0x00007f75704b202e: mov    0x8(%rsi),%ebx
  0x00007f75704b2031: shl    $0x3,%rbx
  0x00007f75704b2035: cmp    0x10(%rax),%rbx
  0x00007f75704b2039: mov    0x8(%rax),%rbx
  0x00007f75704b203d: je     0x00007f75704b2048
  0x00007f75704b2043: jmpq   0x00007f757046ec40
  0x00007f75704b2048: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2050: je     0x00007f75704b214b
  0x00007f75704b2056: jmpq   0x00007f757046ec40
  0x00007f75704b205b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2063: je     0x00007f75704b214b
  0x00007f75704b2069: mov    %rsp,%r13
  0x00007f75704b206c: mov    (%rsp),%rax
  0x00007f75704b2070: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2074: pushfq 
  0x00007f75704b2075: sub    $0x8,%rsp
  0x00007f75704b2079: mov    %rsp,-0x28(%rsp)
  0x00007f75704b207e: sub    $0x80,%rsp
  0x00007f75704b2085: mov    %rax,0x78(%rsp)
  0x00007f75704b208a: mov    %rcx,0x70(%rsp)
  0x00007f75704b208f: mov    %rdx,0x68(%rsp)
  0x00007f75704b2094: mov    %rbx,0x60(%rsp)
  0x00007f75704b2099: mov    %rbp,0x50(%rsp)
  0x00007f75704b209e: mov    %rsi,0x48(%rsp)
  0x00007f75704b20a3: mov    %rdi,0x40(%rsp)
  0x00007f75704b20a8: mov    %r8,0x38(%rsp)
  0x00007f75704b20ad: mov    %r9,0x30(%rsp)
  0x00007f75704b20b2: mov    %r10,0x28(%rsp)
  0x00007f75704b20b7: mov    %r11,0x20(%rsp)
  0x00007f75704b20bc: mov    %r12,0x18(%rsp)
  0x00007f75704b20c1: mov    %r13,0x10(%rsp)
  0x00007f75704b20c6: mov    %r14,0x8(%rsp)
  0x00007f75704b20cb: mov    %r15,(%rsp)
  0x00007f75704b20cf: sub    $0x200,%rsp
  0x00007f75704b20d6: fxsave64 (%rsp)
  0x00007f75704b20db: mov    %rbx,%rdi
  0x00007f75704b20de: mov    %rax,%rsi
  0x00007f75704b20e1: callq  0x00007f7585522bca
  0x00007f75704b20e6: fxrstor64 (%rsp)
  0x00007f75704b20eb: add    $0x200,%rsp
  0x00007f75704b20f2: mov    (%rsp),%r15
  0x00007f75704b20f6: mov    0x8(%rsp),%r14
  0x00007f75704b20fb: mov    0x10(%rsp),%r13
  0x00007f75704b2100: mov    0x18(%rsp),%r12
  0x00007f75704b2105: mov    0x20(%rsp),%r11
  0x00007f75704b210a: mov    0x28(%rsp),%r10
  0x00007f75704b210f: mov    0x30(%rsp),%r9
  0x00007f75704b2114: mov    0x38(%rsp),%r8
  0x00007f75704b2119: mov    0x40(%rsp),%rdi
  0x00007f75704b211e: mov    0x48(%rsp),%rsi
  0x00007f75704b2123: mov    0x50(%rsp),%rbp
  0x00007f75704b2128: mov    0x60(%rsp),%rbx
  0x00007f75704b212d: mov    0x68(%rsp),%rdx
  0x00007f75704b2132: mov    0x70(%rsp),%rcx
  0x00007f75704b2137: mov    0x78(%rsp),%rax
  0x00007f75704b213c: add    $0x80,%rsp
  0x00007f75704b2143: add    $0x8,%rsp
  0x00007f75704b2147: popfq  
  0x00007f75704b2148: mov    %r13,%rsp
  0x00007f75704b214b: pop    %rax
  0x00007f75704b214c: mov    %rsp,%r13
  0x00007f75704b214f: sub    $0x10,%rsp
  0x00007f75704b2153: mov    %rax,(%rsp)
  0x00007f75704b2157: vmovss %xmm0,0x8(%rsp)
  0x00007f75704b215d: mov    0x40(%rbx),%rcx
  0x00007f75704b2161: jmpq   *%rcx

AHE@0x00007f75800e9ab0: 0x7e000000 i2c: 0x00007f75704b2220 c2i: 0x00007f75704b235b c2iUV: 0x00007f75704b232e
i2c argument handler #13 for: static (D)Ljava/lang/String; (594 bytes generated)
c2i argument handler starts at 0x7f75704b235b
  0x00007f75704b2220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b2224: movabs $0x7f757036e3e0,%r11
  0x00007f75704b222e: cmp    %r11,%rax
  0x00007f75704b2231: jbe    0x00007f75704b224a
  0x00007f75704b2237: movabs $0x7f757046e3e0,%r11
  0x00007f75704b2241: cmp    %r11,%rax
  0x00007f75704b2244: jb     0x00007f75704b230d
  0x00007f75704b224a: movabs $0x7f7570369420,%r11
  0x00007f75704b2254: cmp    %r11,%rax
  0x00007f75704b2257: jbe    0x00007f75704b2270
  0x00007f75704b225d: movabs $0x7f757036de58,%r11
  0x00007f75704b2267: cmp    %r11,%rax
  0x00007f75704b226a: jb     0x00007f75704b230d
  0x00007f75704b2270: movabs $0x7f75704a9820,%r11
  0x00007f75704b227a: cmp    %r11,%rax
  0x00007f75704b227d: jbe    0x00007f75704b2296
  0x00007f75704b2283: movabs $0x7f75704af5e0,%r11
  0x00007f75704b228d: cmp    %r11,%rax
  0x00007f75704b2290: jb     0x00007f75704b230d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b2296: mov    %rsp,-0x28(%rsp)
  0x00007f75704b229b: sub    $0x80,%rsp
  0x00007f75704b22a2: mov    %rax,0x78(%rsp)
  0x00007f75704b22a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b22ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b22b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b22b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b22bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b22c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b22c5: mov    %r8,0x38(%rsp)
  0x00007f75704b22ca: mov    %r9,0x30(%rsp)
  0x00007f75704b22cf: mov    %r10,0x28(%rsp)
  0x00007f75704b22d4: mov    %r11,0x20(%rsp)
  0x00007f75704b22d9: mov    %r12,0x18(%rsp)
  0x00007f75704b22de: mov    %r13,0x10(%rsp)
  0x00007f75704b22e3: mov    %r14,0x8(%rsp)
  0x00007f75704b22e8: mov    %r15,(%rsp)
  0x00007f75704b22ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b22f6: movabs $0x7f75704b2296,%rsi
  0x00007f75704b2300: mov    %rsp,%rdx
  0x00007f75704b2303: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2307: callq  0x00007f75853729fa
  0x00007f75704b230c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b230d: mov    %rsp,%r11
  0x00007f75704b2310: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2314: push   %rax
  0x00007f75704b2315: mov    %r11,%rax
  0x00007f75704b2318: mov    0x50(%rbx),%r11
  0x00007f75704b231c: vmovsd 0x8(%rax),%xmm0
  0x00007f75704b2321: mov    %rbx,0x258(%r15)
  0x00007f75704b2328: mov    %rbx,%rax
  0x00007f75704b232b: jmpq   *%r11
  0x00007f75704b232e: mov    0x8(%rsi),%ebx
  0x00007f75704b2331: shl    $0x3,%rbx
  0x00007f75704b2335: cmp    0x10(%rax),%rbx
  0x00007f75704b2339: mov    0x8(%rax),%rbx
  0x00007f75704b233d: je     0x00007f75704b2348
  0x00007f75704b2343: jmpq   0x00007f757046ec40
  0x00007f75704b2348: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2350: je     0x00007f75704b244b
  0x00007f75704b2356: jmpq   0x00007f757046ec40
  0x00007f75704b235b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2363: je     0x00007f75704b244b
  0x00007f75704b2369: mov    %rsp,%r13
  0x00007f75704b236c: mov    (%rsp),%rax
  0x00007f75704b2370: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2374: pushfq 
  0x00007f75704b2375: sub    $0x8,%rsp
  0x00007f75704b2379: mov    %rsp,-0x28(%rsp)
  0x00007f75704b237e: sub    $0x80,%rsp
  0x00007f75704b2385: mov    %rax,0x78(%rsp)
  0x00007f75704b238a: mov    %rcx,0x70(%rsp)
  0x00007f75704b238f: mov    %rdx,0x68(%rsp)
  0x00007f75704b2394: mov    %rbx,0x60(%rsp)
  0x00007f75704b2399: mov    %rbp,0x50(%rsp)
  0x00007f75704b239e: mov    %rsi,0x48(%rsp)
  0x00007f75704b23a3: mov    %rdi,0x40(%rsp)
  0x00007f75704b23a8: mov    %r8,0x38(%rsp)
  0x00007f75704b23ad: mov    %r9,0x30(%rsp)
  0x00007f75704b23b2: mov    %r10,0x28(%rsp)
  0x00007f75704b23b7: mov    %r11,0x20(%rsp)
  0x00007f75704b23bc: mov    %r12,0x18(%rsp)
  0x00007f75704b23c1: mov    %r13,0x10(%rsp)
  0x00007f75704b23c6: mov    %r14,0x8(%rsp)
  0x00007f75704b23cb: mov    %r15,(%rsp)
  0x00007f75704b23cf: sub    $0x200,%rsp
  0x00007f75704b23d6: fxsave64 (%rsp)
  0x00007f75704b23db: mov    %rbx,%rdi
  0x00007f75704b23de: mov    %rax,%rsi
  0x00007f75704b23e1: callq  0x00007f7585522bca
  0x00007f75704b23e6: fxrstor64 (%rsp)
  0x00007f75704b23eb: add    $0x200,%rsp
  0x00007f75704b23f2: mov    (%rsp),%r15
  0x00007f75704b23f6: mov    0x8(%rsp),%r14
  0x00007f75704b23fb: mov    0x10(%rsp),%r13
  0x00007f75704b2400: mov    0x18(%rsp),%r12
  0x00007f75704b2405: mov    0x20(%rsp),%r11
  0x00007f75704b240a: mov    0x28(%rsp),%r10
  0x00007f75704b240f: mov    0x30(%rsp),%r9
  0x00007f75704b2414: mov    0x38(%rsp),%r8
  0x00007f75704b2419: mov    0x40(%rsp),%rdi
  0x00007f75704b241e: mov    0x48(%rsp),%rsi
  0x00007f75704b2423: mov    0x50(%rsp),%rbp
  0x00007f75704b2428: mov    0x60(%rsp),%rbx
  0x00007f75704b242d: mov    0x68(%rsp),%rdx
  0x00007f75704b2432: mov    0x70(%rsp),%rcx
  0x00007f75704b2437: mov    0x78(%rsp),%rax
  0x00007f75704b243c: add    $0x80,%rsp
  0x00007f75704b2443: add    $0x8,%rsp
  0x00007f75704b2447: popfq  
  0x00007f75704b2448: mov    %r13,%rsp
  0x00007f75704b244b: pop    %rax
  0x00007f75704b244c: mov    %rsp,%r13
  0x00007f75704b244f: sub    $0x20,%rsp
  0x00007f75704b2453: mov    %rax,(%rsp)
  0x00007f75704b2457: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704b2461: mov    %rax,0x10(%rsp)
  0x00007f75704b2466: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704b246c: mov    0x40(%rbx),%rcx
  0x00007f75704b2470: jmpq   *%rcx

AHE@0x00007f75800e9af8: 0x i2c: 0x00007f75704b2520 c2i: 0x00007f75704b2656 c2iUV: 0x00007f75704b2629
i2c argument handler #14 for: static ()V (568 bytes generated)
c2i argument handler starts at 0x7f75704b2656
  0x00007f75704b2520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b2524: movabs $0x7f757036e3e0,%r11
  0x00007f75704b252e: cmp    %r11,%rax
  0x00007f75704b2531: jbe    0x00007f75704b254a
  0x00007f75704b2537: movabs $0x7f757046e3e0,%r11
  0x00007f75704b2541: cmp    %r11,%rax
  0x00007f75704b2544: jb     0x00007f75704b260d
  0x00007f75704b254a: movabs $0x7f7570369420,%r11
  0x00007f75704b2554: cmp    %r11,%rax
  0x00007f75704b2557: jbe    0x00007f75704b2570
  0x00007f75704b255d: movabs $0x7f757036de58,%r11
  0x00007f75704b2567: cmp    %r11,%rax
  0x00007f75704b256a: jb     0x00007f75704b260d
  0x00007f75704b2570: movabs $0x7f75704a9820,%r11
  0x00007f75704b257a: cmp    %r11,%rax
  0x00007f75704b257d: jbe    0x00007f75704b2596
  0x00007f75704b2583: movabs $0x7f75704af5e0,%r11
  0x00007f75704b258d: cmp    %r11,%rax
  0x00007f75704b2590: jb     0x00007f75704b260d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b2596: mov    %rsp,-0x28(%rsp)
  0x00007f75704b259b: sub    $0x80,%rsp
  0x00007f75704b25a2: mov    %rax,0x78(%rsp)
  0x00007f75704b25a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b25ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b25b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b25b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b25bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b25c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b25c5: mov    %r8,0x38(%rsp)
  0x00007f75704b25ca: mov    %r9,0x30(%rsp)
  0x00007f75704b25cf: mov    %r10,0x28(%rsp)
  0x00007f75704b25d4: mov    %r11,0x20(%rsp)
  0x00007f75704b25d9: mov    %r12,0x18(%rsp)
  0x00007f75704b25de: mov    %r13,0x10(%rsp)
  0x00007f75704b25e3: mov    %r14,0x8(%rsp)
  0x00007f75704b25e8: mov    %r15,(%rsp)
  0x00007f75704b25ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b25f6: movabs $0x7f75704b2596,%rsi
  0x00007f75704b2600: mov    %rsp,%rdx
  0x00007f75704b2603: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2607: callq  0x00007f75853729fa
  0x00007f75704b260c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b260d: mov    %rsp,%r11
  0x00007f75704b2610: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2614: push   %rax
  0x00007f75704b2615: mov    %r11,%rax
  0x00007f75704b2618: mov    0x50(%rbx),%r11
  0x00007f75704b261c: mov    %rbx,0x258(%r15)
  0x00007f75704b2623: mov    %rbx,%rax
  0x00007f75704b2626: jmpq   *%r11
  0x00007f75704b2629: mov    0x8(%rsi),%ebx
  0x00007f75704b262c: shl    $0x3,%rbx
  0x00007f75704b2630: cmp    0x10(%rax),%rbx
  0x00007f75704b2634: mov    0x8(%rax),%rbx
  0x00007f75704b2638: je     0x00007f75704b2643
  0x00007f75704b263e: jmpq   0x00007f757046ec40
  0x00007f75704b2643: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b264b: je     0x00007f75704b2746
  0x00007f75704b2651: jmpq   0x00007f757046ec40
  0x00007f75704b2656: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b265e: je     0x00007f75704b2746
  0x00007f75704b2664: mov    %rsp,%r13
  0x00007f75704b2667: mov    (%rsp),%rax
  0x00007f75704b266b: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b266f: pushfq 
  0x00007f75704b2670: sub    $0x8,%rsp
  0x00007f75704b2674: mov    %rsp,-0x28(%rsp)
  0x00007f75704b2679: sub    $0x80,%rsp
  0x00007f75704b2680: mov    %rax,0x78(%rsp)
  0x00007f75704b2685: mov    %rcx,0x70(%rsp)
  0x00007f75704b268a: mov    %rdx,0x68(%rsp)
  0x00007f75704b268f: mov    %rbx,0x60(%rsp)
  0x00007f75704b2694: mov    %rbp,0x50(%rsp)
  0x00007f75704b2699: mov    %rsi,0x48(%rsp)
  0x00007f75704b269e: mov    %rdi,0x40(%rsp)
  0x00007f75704b26a3: mov    %r8,0x38(%rsp)
  0x00007f75704b26a8: mov    %r9,0x30(%rsp)
  0x00007f75704b26ad: mov    %r10,0x28(%rsp)
  0x00007f75704b26b2: mov    %r11,0x20(%rsp)
  0x00007f75704b26b7: mov    %r12,0x18(%rsp)
  0x00007f75704b26bc: mov    %r13,0x10(%rsp)
  0x00007f75704b26c1: mov    %r14,0x8(%rsp)
  0x00007f75704b26c6: mov    %r15,(%rsp)
  0x00007f75704b26ca: sub    $0x200,%rsp
  0x00007f75704b26d1: fxsave64 (%rsp)
  0x00007f75704b26d6: mov    %rbx,%rdi
  0x00007f75704b26d9: mov    %rax,%rsi
  0x00007f75704b26dc: callq  0x00007f7585522bca
  0x00007f75704b26e1: fxrstor64 (%rsp)
  0x00007f75704b26e6: add    $0x200,%rsp
  0x00007f75704b26ed: mov    (%rsp),%r15
  0x00007f75704b26f1: mov    0x8(%rsp),%r14
  0x00007f75704b26f6: mov    0x10(%rsp),%r13
  0x00007f75704b26fb: mov    0x18(%rsp),%r12
  0x00007f75704b2700: mov    0x20(%rsp),%r11
  0x00007f75704b2705: mov    0x28(%rsp),%r10
  0x00007f75704b270a: mov    0x30(%rsp),%r9
  0x00007f75704b270f: mov    0x38(%rsp),%r8
  0x00007f75704b2714: mov    0x40(%rsp),%rdi
  0x00007f75704b2719: mov    0x48(%rsp),%rsi
  0x00007f75704b271e: mov    0x50(%rsp),%rbp
  0x00007f75704b2723: mov    0x60(%rsp),%rbx
  0x00007f75704b2728: mov    0x68(%rsp),%rdx
  0x00007f75704b272d: mov    0x70(%rsp),%rcx
  0x00007f75704b2732: mov    0x78(%rsp),%rax
  0x00007f75704b2737: add    $0x80,%rsp
  0x00007f75704b273e: add    $0x8,%rsp
  0x00007f75704b2742: popfq  
  0x00007f75704b2743: mov    %r13,%rsp
  0x00007f75704b2746: pop    %rax
  0x00007f75704b2747: mov    %rsp,%r13
  0x00007f75704b274a: sub    $0x10,%rsp
  0x00007f75704b274e: mov    %rax,(%rsp)
  0x00007f75704b2752: mov    0x40(%rbx),%rcx
  0x00007f75704b2756: jmpq   *%rcx

AHE@0x00007f75800e9b40: 0xbbaaa000 i2c: 0x00007f75704b2820 c2i: 0x00007f75704b2969 c2iUV: 0x00007f75704b293c
i2c argument handler #15 for: receiver ([BIII)V (611 bytes generated)
c2i argument handler starts at 0x7f75704b2969
  0x00007f75704b2820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b2824: movabs $0x7f757036e3e0,%r11
  0x00007f75704b282e: cmp    %r11,%rax
  0x00007f75704b2831: jbe    0x00007f75704b284a
  0x00007f75704b2837: movabs $0x7f757046e3e0,%r11
  0x00007f75704b2841: cmp    %r11,%rax
  0x00007f75704b2844: jb     0x00007f75704b290d
  0x00007f75704b284a: movabs $0x7f7570369420,%r11
  0x00007f75704b2854: cmp    %r11,%rax
  0x00007f75704b2857: jbe    0x00007f75704b2870
  0x00007f75704b285d: movabs $0x7f757036de58,%r11
  0x00007f75704b2867: cmp    %r11,%rax
  0x00007f75704b286a: jb     0x00007f75704b290d
  0x00007f75704b2870: movabs $0x7f75704a9820,%r11
  0x00007f75704b287a: cmp    %r11,%rax
  0x00007f75704b287d: jbe    0x00007f75704b2896
  0x00007f75704b2883: movabs $0x7f75704af5e0,%r11
  0x00007f75704b288d: cmp    %r11,%rax
  0x00007f75704b2890: jb     0x00007f75704b290d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b2896: mov    %rsp,-0x28(%rsp)
  0x00007f75704b289b: sub    $0x80,%rsp
  0x00007f75704b28a2: mov    %rax,0x78(%rsp)
  0x00007f75704b28a7: mov    %rcx,0x70(%rsp)
  0x00007f75704b28ac: mov    %rdx,0x68(%rsp)
  0x00007f75704b28b1: mov    %rbx,0x60(%rsp)
  0x00007f75704b28b6: mov    %rbp,0x50(%rsp)
  0x00007f75704b28bb: mov    %rsi,0x48(%rsp)
  0x00007f75704b28c0: mov    %rdi,0x40(%rsp)
  0x00007f75704b28c5: mov    %r8,0x38(%rsp)
  0x00007f75704b28ca: mov    %r9,0x30(%rsp)
  0x00007f75704b28cf: mov    %r10,0x28(%rsp)
  0x00007f75704b28d4: mov    %r11,0x20(%rsp)
  0x00007f75704b28d9: mov    %r12,0x18(%rsp)
  0x00007f75704b28de: mov    %r13,0x10(%rsp)
  0x00007f75704b28e3: mov    %r14,0x8(%rsp)
  0x00007f75704b28e8: mov    %r15,(%rsp)
  0x00007f75704b28ec: movabs $0x7f758592f470,%rdi
  0x00007f75704b28f6: movabs $0x7f75704b2896,%rsi
  0x00007f75704b2900: mov    %rsp,%rdx
  0x00007f75704b2903: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2907: callq  0x00007f75853729fa
  0x00007f75704b290c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b290d: mov    %rsp,%r11
  0x00007f75704b2910: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2914: push   %rax
  0x00007f75704b2915: mov    %r11,%rax
  0x00007f75704b2918: mov    0x50(%rbx),%r11
  0x00007f75704b291c: mov    0x28(%rax),%rsi
  0x00007f75704b2920: mov    0x20(%rax),%rdx
  0x00007f75704b2924: mov    0x18(%rax),%ecx
  0x00007f75704b2927: mov    0x10(%rax),%r8d
  0x00007f75704b292b: mov    0x8(%rax),%r9d
  0x00007f75704b292f: mov    %rbx,0x258(%r15)
  0x00007f75704b2936: mov    %rbx,%rax
  0x00007f75704b2939: jmpq   *%r11
  0x00007f75704b293c: mov    0x8(%rsi),%ebx
  0x00007f75704b293f: shl    $0x3,%rbx
  0x00007f75704b2943: cmp    0x10(%rax),%rbx
  0x00007f75704b2947: mov    0x8(%rax),%rbx
  0x00007f75704b294b: je     0x00007f75704b2956
  0x00007f75704b2951: jmpq   0x00007f757046ec40
  0x00007f75704b2956: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b295e: je     0x00007f75704b2a59
  0x00007f75704b2964: jmpq   0x00007f757046ec40
  0x00007f75704b2969: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2971: je     0x00007f75704b2a59
  0x00007f75704b2977: mov    %rsp,%r13
  0x00007f75704b297a: mov    (%rsp),%rax
  0x00007f75704b297e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2982: pushfq 
  0x00007f75704b2983: sub    $0x8,%rsp
  0x00007f75704b2987: mov    %rsp,-0x28(%rsp)
  0x00007f75704b298c: sub    $0x80,%rsp
  0x00007f75704b2993: mov    %rax,0x78(%rsp)
  0x00007f75704b2998: mov    %rcx,0x70(%rsp)
  0x00007f75704b299d: mov    %rdx,0x68(%rsp)
  0x00007f75704b29a2: mov    %rbx,0x60(%rsp)
  0x00007f75704b29a7: mov    %rbp,0x50(%rsp)
  0x00007f75704b29ac: mov    %rsi,0x48(%rsp)
  0x00007f75704b29b1: mov    %rdi,0x40(%rsp)
  0x00007f75704b29b6: mov    %r8,0x38(%rsp)
  0x00007f75704b29bb: mov    %r9,0x30(%rsp)
  0x00007f75704b29c0: mov    %r10,0x28(%rsp)
  0x00007f75704b29c5: mov    %r11,0x20(%rsp)
  0x00007f75704b29ca: mov    %r12,0x18(%rsp)
  0x00007f75704b29cf: mov    %r13,0x10(%rsp)
  0x00007f75704b29d4: mov    %r14,0x8(%rsp)
  0x00007f75704b29d9: mov    %r15,(%rsp)
  0x00007f75704b29dd: sub    $0x200,%rsp
  0x00007f75704b29e4: fxsave64 (%rsp)
  0x00007f75704b29e9: mov    %rbx,%rdi
  0x00007f75704b29ec: mov    %rax,%rsi
  0x00007f75704b29ef: callq  0x00007f7585522bca
  0x00007f75704b29f4: fxrstor64 (%rsp)
  0x00007f75704b29f9: add    $0x200,%rsp
  0x00007f75704b2a00: mov    (%rsp),%r15
  0x00007f75704b2a04: mov    0x8(%rsp),%r14
  0x00007f75704b2a09: mov    0x10(%rsp),%r13
  0x00007f75704b2a0e: mov    0x18(%rsp),%r12
  0x00007f75704b2a13: mov    0x20(%rsp),%r11
  0x00007f75704b2a18: mov    0x28(%rsp),%r10
  0x00007f75704b2a1d: mov    0x30(%rsp),%r9
  0x00007f75704b2a22: mov    0x38(%rsp),%r8
  0x00007f75704b2a27: mov    0x40(%rsp),%rdi
  0x00007f75704b2a2c: mov    0x48(%rsp),%rsi
  0x00007f75704b2a31: mov    0x50(%rsp),%rbp
  0x00007f75704b2a36: mov    0x60(%rsp),%rbx
  0x00007f75704b2a3b: mov    0x68(%rsp),%rdx
  0x00007f75704b2a40: mov    0x70(%rsp),%rcx
  0x00007f75704b2a45: mov    0x78(%rsp),%rax
  0x00007f75704b2a4a: add    $0x80,%rsp
  0x00007f75704b2a51: add    $0x8,%rsp
  0x00007f75704b2a55: popfq  
  0x00007f75704b2a56: mov    %r13,%rsp
  0x00007f75704b2a59: pop    %rax
  0x00007f75704b2a5a: mov    %rsp,%r13
  0x00007f75704b2a5d: sub    $0x30,%rsp
  0x00007f75704b2a61: mov    %rax,(%rsp)
  0x00007f75704b2a65: mov    %rsi,0x28(%rsp)
  0x00007f75704b2a6a: mov    %rdx,0x20(%rsp)
  0x00007f75704b2a6f: mov    %ecx,0x18(%rsp)
  0x00007f75704b2a73: mov    %r8d,0x10(%rsp)
  0x00007f75704b2a78: mov    %r9d,0x8(%rsp)
  0x00007f75704b2a7d: mov    0x40(%rbx),%rcx
  0x00007f75704b2a81: jmpq   *%rcx

AHE@0x00007f75800e9b88: 0xbbaa0000 i2c: 0x00007f75704b2b60 c2i: 0x00007f75704b2ca5 c2iUV: 0x00007f75704b2c78
i2c argument handler #16 for: receiver ([CII)V (602 bytes generated)
c2i argument handler starts at 0x7f75704b2ca5
  0x00007f75704b2b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b2b64: movabs $0x7f757036e3e0,%r11
  0x00007f75704b2b6e: cmp    %r11,%rax
  0x00007f75704b2b71: jbe    0x00007f75704b2b8a
  0x00007f75704b2b77: movabs $0x7f757046e3e0,%r11
  0x00007f75704b2b81: cmp    %r11,%rax
  0x00007f75704b2b84: jb     0x00007f75704b2c4d
  0x00007f75704b2b8a: movabs $0x7f7570369420,%r11
  0x00007f75704b2b94: cmp    %r11,%rax
  0x00007f75704b2b97: jbe    0x00007f75704b2bb0
  0x00007f75704b2b9d: movabs $0x7f757036de58,%r11
  0x00007f75704b2ba7: cmp    %r11,%rax
  0x00007f75704b2baa: jb     0x00007f75704b2c4d
  0x00007f75704b2bb0: movabs $0x7f75704a9820,%r11
  0x00007f75704b2bba: cmp    %r11,%rax
  0x00007f75704b2bbd: jbe    0x00007f75704b2bd6
  0x00007f75704b2bc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704b2bcd: cmp    %r11,%rax
  0x00007f75704b2bd0: jb     0x00007f75704b2c4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b2bd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704b2bdb: sub    $0x80,%rsp
  0x00007f75704b2be2: mov    %rax,0x78(%rsp)
  0x00007f75704b2be7: mov    %rcx,0x70(%rsp)
  0x00007f75704b2bec: mov    %rdx,0x68(%rsp)
  0x00007f75704b2bf1: mov    %rbx,0x60(%rsp)
  0x00007f75704b2bf6: mov    %rbp,0x50(%rsp)
  0x00007f75704b2bfb: mov    %rsi,0x48(%rsp)
  0x00007f75704b2c00: mov    %rdi,0x40(%rsp)
  0x00007f75704b2c05: mov    %r8,0x38(%rsp)
  0x00007f75704b2c0a: mov    %r9,0x30(%rsp)
  0x00007f75704b2c0f: mov    %r10,0x28(%rsp)
  0x00007f75704b2c14: mov    %r11,0x20(%rsp)
  0x00007f75704b2c19: mov    %r12,0x18(%rsp)
  0x00007f75704b2c1e: mov    %r13,0x10(%rsp)
  0x00007f75704b2c23: mov    %r14,0x8(%rsp)
  0x00007f75704b2c28: mov    %r15,(%rsp)
  0x00007f75704b2c2c: movabs $0x7f758592f470,%rdi
  0x00007f75704b2c36: movabs $0x7f75704b2bd6,%rsi
  0x00007f75704b2c40: mov    %rsp,%rdx
  0x00007f75704b2c43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2c47: callq  0x00007f75853729fa
  0x00007f75704b2c4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b2c4d: mov    %rsp,%r11
  0x00007f75704b2c50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2c54: push   %rax
  0x00007f75704b2c55: mov    %r11,%rax
  0x00007f75704b2c58: mov    0x50(%rbx),%r11
  0x00007f75704b2c5c: mov    0x20(%rax),%rsi
  0x00007f75704b2c60: mov    0x18(%rax),%rdx
  0x00007f75704b2c64: mov    0x10(%rax),%ecx
  0x00007f75704b2c67: mov    0x8(%rax),%r8d
  0x00007f75704b2c6b: mov    %rbx,0x258(%r15)
  0x00007f75704b2c72: mov    %rbx,%rax
  0x00007f75704b2c75: jmpq   *%r11
  0x00007f75704b2c78: mov    0x8(%rsi),%ebx
  0x00007f75704b2c7b: shl    $0x3,%rbx
  0x00007f75704b2c7f: cmp    0x10(%rax),%rbx
  0x00007f75704b2c83: mov    0x8(%rax),%rbx
  0x00007f75704b2c87: je     0x00007f75704b2c92
  0x00007f75704b2c8d: jmpq   0x00007f757046ec40
  0x00007f75704b2c92: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2c9a: je     0x00007f75704b2d95
  0x00007f75704b2ca0: jmpq   0x00007f757046ec40
  0x00007f75704b2ca5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2cad: je     0x00007f75704b2d95
  0x00007f75704b2cb3: mov    %rsp,%r13
  0x00007f75704b2cb6: mov    (%rsp),%rax
  0x00007f75704b2cba: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2cbe: pushfq 
  0x00007f75704b2cbf: sub    $0x8,%rsp
  0x00007f75704b2cc3: mov    %rsp,-0x28(%rsp)
  0x00007f75704b2cc8: sub    $0x80,%rsp
  0x00007f75704b2ccf: mov    %rax,0x78(%rsp)
  0x00007f75704b2cd4: mov    %rcx,0x70(%rsp)
  0x00007f75704b2cd9: mov    %rdx,0x68(%rsp)
  0x00007f75704b2cde: mov    %rbx,0x60(%rsp)
  0x00007f75704b2ce3: mov    %rbp,0x50(%rsp)
  0x00007f75704b2ce8: mov    %rsi,0x48(%rsp)
  0x00007f75704b2ced: mov    %rdi,0x40(%rsp)
  0x00007f75704b2cf2: mov    %r8,0x38(%rsp)
  0x00007f75704b2cf7: mov    %r9,0x30(%rsp)
  0x00007f75704b2cfc: mov    %r10,0x28(%rsp)
  0x00007f75704b2d01: mov    %r11,0x20(%rsp)
  0x00007f75704b2d06: mov    %r12,0x18(%rsp)
  0x00007f75704b2d0b: mov    %r13,0x10(%rsp)
  0x00007f75704b2d10: mov    %r14,0x8(%rsp)
  0x00007f75704b2d15: mov    %r15,(%rsp)
  0x00007f75704b2d19: sub    $0x200,%rsp
  0x00007f75704b2d20: fxsave64 (%rsp)
  0x00007f75704b2d25: mov    %rbx,%rdi
  0x00007f75704b2d28: mov    %rax,%rsi
  0x00007f75704b2d2b: callq  0x00007f7585522bca
  0x00007f75704b2d30: fxrstor64 (%rsp)
  0x00007f75704b2d35: add    $0x200,%rsp
  0x00007f75704b2d3c: mov    (%rsp),%r15
  0x00007f75704b2d40: mov    0x8(%rsp),%r14
  0x00007f75704b2d45: mov    0x10(%rsp),%r13
  0x00007f75704b2d4a: mov    0x18(%rsp),%r12
  0x00007f75704b2d4f: mov    0x20(%rsp),%r11
  0x00007f75704b2d54: mov    0x28(%rsp),%r10
  0x00007f75704b2d59: mov    0x30(%rsp),%r9
  0x00007f75704b2d5e: mov    0x38(%rsp),%r8
  0x00007f75704b2d63: mov    0x40(%rsp),%rdi
  0x00007f75704b2d68: mov    0x48(%rsp),%rsi
  0x00007f75704b2d6d: mov    0x50(%rsp),%rbp
  0x00007f75704b2d72: mov    0x60(%rsp),%rbx
  0x00007f75704b2d77: mov    0x68(%rsp),%rdx
  0x00007f75704b2d7c: mov    0x70(%rsp),%rcx
  0x00007f75704b2d81: mov    0x78(%rsp),%rax
  0x00007f75704b2d86: add    $0x80,%rsp
  0x00007f75704b2d8d: add    $0x8,%rsp
  0x00007f75704b2d91: popfq  
  0x00007f75704b2d92: mov    %r13,%rsp
  0x00007f75704b2d95: pop    %rax
  0x00007f75704b2d96: mov    %rsp,%r13
  0x00007f75704b2d99: sub    $0x30,%rsp
  0x00007f75704b2d9d: mov    %rax,(%rsp)
  0x00007f75704b2da1: mov    %rsi,0x20(%rsp)
  0x00007f75704b2da6: mov    %rdx,0x18(%rsp)
  0x00007f75704b2dab: mov    %ecx,0x10(%rsp)
  0x00007f75704b2daf: mov    %r8d,0x8(%rsp)
  0x00007f75704b2db4: mov    0x40(%rbx),%rcx
  0x00007f75704b2db8: jmpq   *%rcx

AHE@0x00007f75800e9bd0: 0xbbaab000 i2c: 0x00007f75704b2e60 c2i: 0x00007f75704b2fa9 c2iUV: 0x00007f75704b2f7c
i2c argument handler #17 for: receiver ([BIILjava/lang/String;)V (611 bytes generated)
c2i argument handler starts at 0x7f75704b2fa9
  0x00007f75704b2e60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704b2e64: movabs $0x7f757036e3e0,%r11
  0x00007f75704b2e6e: cmp    %r11,%rax
  0x00007f75704b2e71: jbe    0x00007f75704b2e8a
  0x00007f75704b2e77: movabs $0x7f757046e3e0,%r11
  0x00007f75704b2e81: cmp    %r11,%rax
  0x00007f75704b2e84: jb     0x00007f75704b2f4d
  0x00007f75704b2e8a: movabs $0x7f7570369420,%r11
  0x00007f75704b2e94: cmp    %r11,%rax
  0x00007f75704b2e97: jbe    0x00007f75704b2eb0
  0x00007f75704b2e9d: movabs $0x7f757036de58,%r11
  0x00007f75704b2ea7: cmp    %r11,%rax
  0x00007f75704b2eaa: jb     0x00007f75704b2f4d
  0x00007f75704b2eb0: movabs $0x7f75704a9820,%r11
  0x00007f75704b2eba: cmp    %r11,%rax
  0x00007f75704b2ebd: jbe    0x00007f75704b2ed6
  0x00007f75704b2ec3: movabs $0x7f75704af5e0,%r11
  0x00007f75704b2ecd: cmp    %r11,%rax
  0x00007f75704b2ed0: jb     0x00007f75704b2f4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704b2ed6: mov    %rsp,-0x28(%rsp)
  0x00007f75704b2edb: sub    $0x80,%rsp
  0x00007f75704b2ee2: mov    %rax,0x78(%rsp)
  0x00007f75704b2ee7: mov    %rcx,0x70(%rsp)
  0x00007f75704b2eec: mov    %rdx,0x68(%rsp)
  0x00007f75704b2ef1: mov    %rbx,0x60(%rsp)
  0x00007f75704b2ef6: mov    %rbp,0x50(%rsp)
  0x00007f75704b2efb: mov    %rsi,0x48(%rsp)
  0x00007f75704b2f00: mov    %rdi,0x40(%rsp)
  0x00007f75704b2f05: mov    %r8,0x38(%rsp)
  0x00007f75704b2f0a: mov    %r9,0x30(%rsp)
  0x00007f75704b2f0f: mov    %r10,0x28(%rsp)
  0x00007f75704b2f14: mov    %r11,0x20(%rsp)
  0x00007f75704b2f19: mov    %r12,0x18(%rsp)
  0x00007f75704b2f1e: mov    %r13,0x10(%rsp)
  0x00007f75704b2f23: mov    %r14,0x8(%rsp)
  0x00007f75704b2f28: mov    %r15,(%rsp)
  0x00007f75704b2f2c: movabs $0x7f758592f470,%rdi
  0x00007f75704b2f36: movabs $0x7f75704b2ed6,%rsi
  0x00007f75704b2f40: mov    %rsp,%rdx
  0x00007f75704b2f43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2f47: callq  0x00007f75853729fa
  0x00007f75704b2f4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704b2f4d: mov    %rsp,%r11
  0x00007f75704b2f50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2f54: push   %rax
  0x00007f75704b2f55: mov    %r11,%rax
  0x00007f75704b2f58: mov    0x50(%rbx),%r11
  0x00007f75704b2f5c: mov    0x28(%rax),%rsi
  0x00007f75704b2f60: mov    0x20(%rax),%rdx
  0x00007f75704b2f64: mov    0x18(%rax),%ecx
  0x00007f75704b2f67: mov    0x10(%rax),%r8d
  0x00007f75704b2f6b: mov    0x8(%rax),%r9
  0x00007f75704b2f6f: mov    %rbx,0x258(%r15)
  0x00007f75704b2f76: mov    %rbx,%rax
  0x00007f75704b2f79: jmpq   *%r11
  0x00007f75704b2f7c: mov    0x8(%rsi),%ebx
  0x00007f75704b2f7f: shl    $0x3,%rbx
  0x00007f75704b2f83: cmp    0x10(%rax),%rbx
  0x00007f75704b2f87: mov    0x8(%rax),%rbx
  0x00007f75704b2f8b: je     0x00007f75704b2f96
  0x00007f75704b2f91: jmpq   0x00007f757046ec40
  0x00007f75704b2f96: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2f9e: je     0x00007f75704b3099
  0x00007f75704b2fa4: jmpq   0x00007f757046ec40
  0x00007f75704b2fa9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704b2fb1: je     0x00007f75704b3099
  0x00007f75704b2fb7: mov    %rsp,%r13
  0x00007f75704b2fba: mov    (%rsp),%rax
  0x00007f75704b2fbe: and    $0xfffffffffffffff0,%rsp
  0x00007f75704b2fc2: pushfq 
  0x00007f75704b2fc3: sub    $0x8,%rsp
  0x00007f75704b2fc7: mov    %rsp,-0x28(%rsp)
  0x00007f75704b2fcc: sub    $0x80,%rsp
  0x00007f75704b2fd3: mov    %rax,0x78(%rsp)
  0x00007f75704b2fd8: mov    %rcx,0x70(%rsp)
  0x00007f75704b2fdd: mov    %rdx,0x68(%rsp)
  0x00007f75704b2fe2: mov    %rbx,0x60(%rsp)
  0x00007f75704b2fe7: mov    %rbp,0x50(%rsp)
  0x00007f75704b2fec: mov    %rsi,0x48(%rsp)
  0x00007f75704b2ff1: mov    %rdi,0x40(%rsp)
  0x00007f75704b2ff6: mov    %r8,0x38(%rsp)
  0x00007f75704b2ffb: mov    %r9,0x30(%rsp)
  0x00007f75704b3000: mov    %r10,0x28(%rsp)
  0x00007f75704b3005: mov    %r11,0x20(%rsp)
  0x00007f75704b300a: mov    %r12,0x18(%rsp)
  0x00007f75704b300f: mov    %r13,0x10(%rsp)
  0x00007f75704b3014: mov    %r14,0x8(%rsp)
  0x00007f75704b3019: mov    %r15,(%rsp)
  0x00007f75704b301d: sub    $0x200,%rsp
  0x00007f75704b3024: fxsave64 (%rsp)
  0x00007f75704b3029: mov    %rbx,%rdi
  0x00007f75704b302c: mov    %rax,%rsi
  0x00007f75704b302f: callq  0x00007f7585522bca
  0x00007f75704b3034: fxrstor64 (%rsp)
  0x00007f75704b3039: add    $0x200,%rsp
  0x00007f75704b3040: mov    (%rsp),%r15
  0x00007f75704b3044: mov    0x8(%rsp),%r14
  0x00007f75704b3049: mov    0x10(%rsp),%r13
  0x00007f75704b304e: mov    0x18(%rsp),%r12
  0x00007f75704b3053: mov    0x20(%rsp),%r11
  0x00007f75704b3058: mov    0x28(%rsp),%r10
  0x00007f75704b305d: mov    0x30(%rsp),%r9
  0x00007f75704b3062: mov    0x38(%rsp),%r8
  0x00007f75704b3067: mov    0x40(%rsp),%rdi
  0x00007f75704b306c: mov    0x48(%rsp),%rsi
  0x00007f75704b3071: mov    0x50(%rsp),%rbp
  0x00007f75704b3076: mov    0x60(%rsp),%rbx
  0x00007f75704b307b: mov    0x68(%rsp),%rdx
  0x00007f75704b3080: mov    0x70(%rsp),%rcx
  0x00007f75704b3085: mov    0x78(%rsp),%rax
  0x00007f75704b308a: add    $0x80,%rsp
  0x00007f75704b3091: add    $0x8,%rsp
  0x00007f75704b3095: popfq  
  0x00007f75704b3096: mov    %r13,%rsp
  0x00007f75704b3099: pop    %rax
  0x00007f75704b309a: mov    %rsp,%r13
  0x00007f75704b309d: sub    $0x30,%rsp
  0x00007f75704b30a1: mov    %rax,(%rsp)
  0x00007f75704b30a5: mov    %rsi,0x28(%rsp)
  0x00007f75704b30aa: mov    %rdx,0x20(%rsp)
  0x00007f75704b30af: mov    %ecx,0x18(%rsp)
  0x00007f75704b30b3: mov    %r8d,0x10(%rsp)
  0x00007f75704b30b8: mov    %r9,0x8(%rsp)
  0x00007f75704b30bd: mov    0x40(%rbx),%rcx
  0x00007f75704b30c1: jmpq   *%rcx

AHE@0x00007f75800e9c18: 0xbbbb0000 i2c: 0x00007f75704bb6a0 c2i: 0x00007f75704bb7e6 c2iUV: 0x00007f75704bb7b9
i2c argument handler #18 for: receiver (Ljava/util/Comparator;Ljava/lang/Object;Ljava/lang/Object;)I (604 bytes generated)
c2i argument handler starts at 0x7f75704bb7e6
  0x00007f75704bb6a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bb6a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bb6ae: cmp    %r11,%rax
  0x00007f75704bb6b1: jbe    0x00007f75704bb6ca
  0x00007f75704bb6b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bb6c1: cmp    %r11,%rax
  0x00007f75704bb6c4: jb     0x00007f75704bb78d
  0x00007f75704bb6ca: movabs $0x7f7570369420,%r11
  0x00007f75704bb6d4: cmp    %r11,%rax
  0x00007f75704bb6d7: jbe    0x00007f75704bb6f0
  0x00007f75704bb6dd: movabs $0x7f757036de58,%r11
  0x00007f75704bb6e7: cmp    %r11,%rax
  0x00007f75704bb6ea: jb     0x00007f75704bb78d
  0x00007f75704bb6f0: movabs $0x7f75704a9820,%r11
  0x00007f75704bb6fa: cmp    %r11,%rax
  0x00007f75704bb6fd: jbe    0x00007f75704bb716
  0x00007f75704bb703: movabs $0x7f75704af5e0,%r11
  0x00007f75704bb70d: cmp    %r11,%rax
  0x00007f75704bb710: jb     0x00007f75704bb78d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bb716: mov    %rsp,-0x28(%rsp)
  0x00007f75704bb71b: sub    $0x80,%rsp
  0x00007f75704bb722: mov    %rax,0x78(%rsp)
  0x00007f75704bb727: mov    %rcx,0x70(%rsp)
  0x00007f75704bb72c: mov    %rdx,0x68(%rsp)
  0x00007f75704bb731: mov    %rbx,0x60(%rsp)
  0x00007f75704bb736: mov    %rbp,0x50(%rsp)
  0x00007f75704bb73b: mov    %rsi,0x48(%rsp)
  0x00007f75704bb740: mov    %rdi,0x40(%rsp)
  0x00007f75704bb745: mov    %r8,0x38(%rsp)
  0x00007f75704bb74a: mov    %r9,0x30(%rsp)
  0x00007f75704bb74f: mov    %r10,0x28(%rsp)
  0x00007f75704bb754: mov    %r11,0x20(%rsp)
  0x00007f75704bb759: mov    %r12,0x18(%rsp)
  0x00007f75704bb75e: mov    %r13,0x10(%rsp)
  0x00007f75704bb763: mov    %r14,0x8(%rsp)
  0x00007f75704bb768: mov    %r15,(%rsp)
  0x00007f75704bb76c: movabs $0x7f758592f470,%rdi
  0x00007f75704bb776: movabs $0x7f75704bb716,%rsi
  0x00007f75704bb780: mov    %rsp,%rdx
  0x00007f75704bb783: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bb787: callq  0x00007f75853729fa
  0x00007f75704bb78c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bb78d: mov    %rsp,%r11
  0x00007f75704bb790: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bb794: push   %rax
  0x00007f75704bb795: mov    %r11,%rax
  0x00007f75704bb798: mov    0x50(%rbx),%r11
  0x00007f75704bb79c: mov    0x20(%rax),%rsi
  0x00007f75704bb7a0: mov    0x18(%rax),%rdx
  0x00007f75704bb7a4: mov    0x10(%rax),%rcx
  0x00007f75704bb7a8: mov    0x8(%rax),%r8
  0x00007f75704bb7ac: mov    %rbx,0x258(%r15)
  0x00007f75704bb7b3: mov    %rbx,%rax
  0x00007f75704bb7b6: jmpq   *%r11
  0x00007f75704bb7b9: mov    0x8(%rsi),%ebx
  0x00007f75704bb7bc: shl    $0x3,%rbx
  0x00007f75704bb7c0: cmp    0x10(%rax),%rbx
  0x00007f75704bb7c4: mov    0x8(%rax),%rbx
  0x00007f75704bb7c8: je     0x00007f75704bb7d3
  0x00007f75704bb7ce: jmpq   0x00007f757046ec40
  0x00007f75704bb7d3: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bb7db: je     0x00007f75704bb8d6
  0x00007f75704bb7e1: jmpq   0x00007f757046ec40
  0x00007f75704bb7e6: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bb7ee: je     0x00007f75704bb8d6
  0x00007f75704bb7f4: mov    %rsp,%r13
  0x00007f75704bb7f7: mov    (%rsp),%rax
  0x00007f75704bb7fb: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bb7ff: pushfq 
  0x00007f75704bb800: sub    $0x8,%rsp
  0x00007f75704bb804: mov    %rsp,-0x28(%rsp)
  0x00007f75704bb809: sub    $0x80,%rsp
  0x00007f75704bb810: mov    %rax,0x78(%rsp)
  0x00007f75704bb815: mov    %rcx,0x70(%rsp)
  0x00007f75704bb81a: mov    %rdx,0x68(%rsp)
  0x00007f75704bb81f: mov    %rbx,0x60(%rsp)
  0x00007f75704bb824: mov    %rbp,0x50(%rsp)
  0x00007f75704bb829: mov    %rsi,0x48(%rsp)
  0x00007f75704bb82e: mov    %rdi,0x40(%rsp)
  0x00007f75704bb833: mov    %r8,0x38(%rsp)
  0x00007f75704bb838: mov    %r9,0x30(%rsp)
  0x00007f75704bb83d: mov    %r10,0x28(%rsp)
  0x00007f75704bb842: mov    %r11,0x20(%rsp)
  0x00007f75704bb847: mov    %r12,0x18(%rsp)
  0x00007f75704bb84c: mov    %r13,0x10(%rsp)
  0x00007f75704bb851: mov    %r14,0x8(%rsp)
  0x00007f75704bb856: mov    %r15,(%rsp)
  0x00007f75704bb85a: sub    $0x200,%rsp
  0x00007f75704bb861: fxsave64 (%rsp)
  0x00007f75704bb866: mov    %rbx,%rdi
  0x00007f75704bb869: mov    %rax,%rsi
  0x00007f75704bb86c: callq  0x00007f7585522bca
  0x00007f75704bb871: fxrstor64 (%rsp)
  0x00007f75704bb876: add    $0x200,%rsp
  0x00007f75704bb87d: mov    (%rsp),%r15
  0x00007f75704bb881: mov    0x8(%rsp),%r14
  0x00007f75704bb886: mov    0x10(%rsp),%r13
  0x00007f75704bb88b: mov    0x18(%rsp),%r12
  0x00007f75704bb890: mov    0x20(%rsp),%r11
  0x00007f75704bb895: mov    0x28(%rsp),%r10
  0x00007f75704bb89a: mov    0x30(%rsp),%r9
  0x00007f75704bb89f: mov    0x38(%rsp),%r8
  0x00007f75704bb8a4: mov    0x40(%rsp),%rdi
  0x00007f75704bb8a9: mov    0x48(%rsp),%rsi
  0x00007f75704bb8ae: mov    0x50(%rsp),%rbp
  0x00007f75704bb8b3: mov    0x60(%rsp),%rbx
  0x00007f75704bb8b8: mov    0x68(%rsp),%rdx
  0x00007f75704bb8bd: mov    0x70(%rsp),%rcx
  0x00007f75704bb8c2: mov    0x78(%rsp),%rax
  0x00007f75704bb8c7: add    $0x80,%rsp
  0x00007f75704bb8ce: add    $0x8,%rsp
  0x00007f75704bb8d2: popfq  
  0x00007f75704bb8d3: mov    %r13,%rsp
  0x00007f75704bb8d6: pop    %rax
  0x00007f75704bb8d7: mov    %rsp,%r13
  0x00007f75704bb8da: sub    $0x30,%rsp
  0x00007f75704bb8de: mov    %rax,(%rsp)
  0x00007f75704bb8e2: mov    %rsi,0x20(%rsp)
  0x00007f75704bb8e7: mov    %rdx,0x18(%rsp)
  0x00007f75704bb8ec: mov    %rcx,0x10(%rsp)
  0x00007f75704bb8f1: mov    %r8,0x8(%rsp)
  0x00007f75704bb8f6: mov    0x40(%rbx),%rcx
  0x00007f75704bb8fa: jmpq   *%rcx

AHE@0x00007f75800e9c60: 0xbea00000 i2c: 0x00007f75704bb9a0 c2i: 0x00007f75704bbadd c2iUV: 0x00007f75704bbab0
i2c argument handler #19 for: static (JI)V (599 bytes generated)
c2i argument handler starts at 0x7f75704bbadd
  0x00007f75704bb9a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bb9a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bb9ae: cmp    %r11,%rax
  0x00007f75704bb9b1: jbe    0x00007f75704bb9ca
  0x00007f75704bb9b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bb9c1: cmp    %r11,%rax
  0x00007f75704bb9c4: jb     0x00007f75704bba8d
  0x00007f75704bb9ca: movabs $0x7f7570369420,%r11
  0x00007f75704bb9d4: cmp    %r11,%rax
  0x00007f75704bb9d7: jbe    0x00007f75704bb9f0
  0x00007f75704bb9dd: movabs $0x7f757036de58,%r11
  0x00007f75704bb9e7: cmp    %r11,%rax
  0x00007f75704bb9ea: jb     0x00007f75704bba8d
  0x00007f75704bb9f0: movabs $0x7f75704a9820,%r11
  0x00007f75704bb9fa: cmp    %r11,%rax
  0x00007f75704bb9fd: jbe    0x00007f75704bba16
  0x00007f75704bba03: movabs $0x7f75704af5e0,%r11
  0x00007f75704bba0d: cmp    %r11,%rax
  0x00007f75704bba10: jb     0x00007f75704bba8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bba16: mov    %rsp,-0x28(%rsp)
  0x00007f75704bba1b: sub    $0x80,%rsp
  0x00007f75704bba22: mov    %rax,0x78(%rsp)
  0x00007f75704bba27: mov    %rcx,0x70(%rsp)
  0x00007f75704bba2c: mov    %rdx,0x68(%rsp)
  0x00007f75704bba31: mov    %rbx,0x60(%rsp)
  0x00007f75704bba36: mov    %rbp,0x50(%rsp)
  0x00007f75704bba3b: mov    %rsi,0x48(%rsp)
  0x00007f75704bba40: mov    %rdi,0x40(%rsp)
  0x00007f75704bba45: mov    %r8,0x38(%rsp)
  0x00007f75704bba4a: mov    %r9,0x30(%rsp)
  0x00007f75704bba4f: mov    %r10,0x28(%rsp)
  0x00007f75704bba54: mov    %r11,0x20(%rsp)
  0x00007f75704bba59: mov    %r12,0x18(%rsp)
  0x00007f75704bba5e: mov    %r13,0x10(%rsp)
  0x00007f75704bba63: mov    %r14,0x8(%rsp)
  0x00007f75704bba68: mov    %r15,(%rsp)
  0x00007f75704bba6c: movabs $0x7f758592f470,%rdi
  0x00007f75704bba76: movabs $0x7f75704bba16,%rsi
  0x00007f75704bba80: mov    %rsp,%rdx
  0x00007f75704bba83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bba87: callq  0x00007f75853729fa
  0x00007f75704bba8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bba8d: mov    %rsp,%r11
  0x00007f75704bba90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bba94: push   %rax
  0x00007f75704bba95: mov    %r11,%rax
  0x00007f75704bba98: mov    0x50(%rbx),%r11
  0x00007f75704bba9c: mov    0x10(%rax),%rsi
  0x00007f75704bbaa0: mov    0x8(%rax),%edx
  0x00007f75704bbaa3: mov    %rbx,0x258(%r15)
  0x00007f75704bbaaa: mov    %rbx,%rax
  0x00007f75704bbaad: jmpq   *%r11
  0x00007f75704bbab0: mov    0x8(%rsi),%ebx
  0x00007f75704bbab3: shl    $0x3,%rbx
  0x00007f75704bbab7: cmp    0x10(%rax),%rbx
  0x00007f75704bbabb: mov    0x8(%rax),%rbx
  0x00007f75704bbabf: je     0x00007f75704bbaca
  0x00007f75704bbac5: jmpq   0x00007f757046ec40
  0x00007f75704bbaca: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bbad2: je     0x00007f75704bbbcd
  0x00007f75704bbad8: jmpq   0x00007f757046ec40
  0x00007f75704bbadd: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bbae5: je     0x00007f75704bbbcd
  0x00007f75704bbaeb: mov    %rsp,%r13
  0x00007f75704bbaee: mov    (%rsp),%rax
  0x00007f75704bbaf2: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bbaf6: pushfq 
  0x00007f75704bbaf7: sub    $0x8,%rsp
  0x00007f75704bbafb: mov    %rsp,-0x28(%rsp)
  0x00007f75704bbb00: sub    $0x80,%rsp
  0x00007f75704bbb07: mov    %rax,0x78(%rsp)
  0x00007f75704bbb0c: mov    %rcx,0x70(%rsp)
  0x00007f75704bbb11: mov    %rdx,0x68(%rsp)
  0x00007f75704bbb16: mov    %rbx,0x60(%rsp)
  0x00007f75704bbb1b: mov    %rbp,0x50(%rsp)
  0x00007f75704bbb20: mov    %rsi,0x48(%rsp)
  0x00007f75704bbb25: mov    %rdi,0x40(%rsp)
  0x00007f75704bbb2a: mov    %r8,0x38(%rsp)
  0x00007f75704bbb2f: mov    %r9,0x30(%rsp)
  0x00007f75704bbb34: mov    %r10,0x28(%rsp)
  0x00007f75704bbb39: mov    %r11,0x20(%rsp)
  0x00007f75704bbb3e: mov    %r12,0x18(%rsp)
  0x00007f75704bbb43: mov    %r13,0x10(%rsp)
  0x00007f75704bbb48: mov    %r14,0x8(%rsp)
  0x00007f75704bbb4d: mov    %r15,(%rsp)
  0x00007f75704bbb51: sub    $0x200,%rsp
  0x00007f75704bbb58: fxsave64 (%rsp)
  0x00007f75704bbb5d: mov    %rbx,%rdi
  0x00007f75704bbb60: mov    %rax,%rsi
  0x00007f75704bbb63: callq  0x00007f7585522bca
  0x00007f75704bbb68: fxrstor64 (%rsp)
  0x00007f75704bbb6d: add    $0x200,%rsp
  0x00007f75704bbb74: mov    (%rsp),%r15
  0x00007f75704bbb78: mov    0x8(%rsp),%r14
  0x00007f75704bbb7d: mov    0x10(%rsp),%r13
  0x00007f75704bbb82: mov    0x18(%rsp),%r12
  0x00007f75704bbb87: mov    0x20(%rsp),%r11
  0x00007f75704bbb8c: mov    0x28(%rsp),%r10
  0x00007f75704bbb91: mov    0x30(%rsp),%r9
  0x00007f75704bbb96: mov    0x38(%rsp),%r8
  0x00007f75704bbb9b: mov    0x40(%rsp),%rdi
  0x00007f75704bbba0: mov    0x48(%rsp),%rsi
  0x00007f75704bbba5: mov    0x50(%rsp),%rbp
  0x00007f75704bbbaa: mov    0x60(%rsp),%rbx
  0x00007f75704bbbaf: mov    0x68(%rsp),%rdx
  0x00007f75704bbbb4: mov    0x70(%rsp),%rcx
  0x00007f75704bbbb9: mov    0x78(%rsp),%rax
  0x00007f75704bbbbe: add    $0x80,%rsp
  0x00007f75704bbbc5: add    $0x8,%rsp
  0x00007f75704bbbc9: popfq  
  0x00007f75704bbbca: mov    %r13,%rsp
  0x00007f75704bbbcd: pop    %rax
  0x00007f75704bbbce: mov    %rsp,%r13
  0x00007f75704bbbd1: sub    $0x20,%rsp
  0x00007f75704bbbd5: mov    %rax,(%rsp)
  0x00007f75704bbbd9: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704bbbe3: mov    %rax,0x18(%rsp)
  0x00007f75704bbbe8: mov    %rsi,0x10(%rsp)
  0x00007f75704bbbed: mov    %edx,0x8(%rsp)
  0x00007f75704bbbf1: mov    0x40(%rbx),%rcx
  0x00007f75704bbbf5: jmpq   *%rcx

AHE@0x00007f75800e9ca8: 0xbbbbbe00 i2c: 0x00007f75704bbca0 c2i: 0x00007f75704bbdea c2iUV: 0x00007f75704bbdbd
i2c argument handler #20 for: receiver (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V (628 bytes generated)
c2i argument handler starts at 0x7f75704bbdea
  0x00007f75704bbca0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bbca4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bbcae: cmp    %r11,%rax
  0x00007f75704bbcb1: jbe    0x00007f75704bbcca
  0x00007f75704bbcb7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bbcc1: cmp    %r11,%rax
  0x00007f75704bbcc4: jb     0x00007f75704bbd8d
  0x00007f75704bbcca: movabs $0x7f7570369420,%r11
  0x00007f75704bbcd4: cmp    %r11,%rax
  0x00007f75704bbcd7: jbe    0x00007f75704bbcf0
  0x00007f75704bbcdd: movabs $0x7f757036de58,%r11
  0x00007f75704bbce7: cmp    %r11,%rax
  0x00007f75704bbcea: jb     0x00007f75704bbd8d
  0x00007f75704bbcf0: movabs $0x7f75704a9820,%r11
  0x00007f75704bbcfa: cmp    %r11,%rax
  0x00007f75704bbcfd: jbe    0x00007f75704bbd16
  0x00007f75704bbd03: movabs $0x7f75704af5e0,%r11
  0x00007f75704bbd0d: cmp    %r11,%rax
  0x00007f75704bbd10: jb     0x00007f75704bbd8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bbd16: mov    %rsp,-0x28(%rsp)
  0x00007f75704bbd1b: sub    $0x80,%rsp
  0x00007f75704bbd22: mov    %rax,0x78(%rsp)
  0x00007f75704bbd27: mov    %rcx,0x70(%rsp)
  0x00007f75704bbd2c: mov    %rdx,0x68(%rsp)
  0x00007f75704bbd31: mov    %rbx,0x60(%rsp)
  0x00007f75704bbd36: mov    %rbp,0x50(%rsp)
  0x00007f75704bbd3b: mov    %rsi,0x48(%rsp)
  0x00007f75704bbd40: mov    %rdi,0x40(%rsp)
  0x00007f75704bbd45: mov    %r8,0x38(%rsp)
  0x00007f75704bbd4a: mov    %r9,0x30(%rsp)
  0x00007f75704bbd4f: mov    %r10,0x28(%rsp)
  0x00007f75704bbd54: mov    %r11,0x20(%rsp)
  0x00007f75704bbd59: mov    %r12,0x18(%rsp)
  0x00007f75704bbd5e: mov    %r13,0x10(%rsp)
  0x00007f75704bbd63: mov    %r14,0x8(%rsp)
  0x00007f75704bbd68: mov    %r15,(%rsp)
  0x00007f75704bbd6c: movabs $0x7f758592f470,%rdi
  0x00007f75704bbd76: movabs $0x7f75704bbd16,%rsi
  0x00007f75704bbd80: mov    %rsp,%rdx
  0x00007f75704bbd83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bbd87: callq  0x00007f75853729fa
  0x00007f75704bbd8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bbd8d: mov    %rsp,%r11
  0x00007f75704bbd90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bbd94: push   %rax
  0x00007f75704bbd95: mov    %r11,%rax
  0x00007f75704bbd98: mov    0x50(%rbx),%r11
  0x00007f75704bbd9c: mov    0x30(%rax),%rsi
  0x00007f75704bbda0: mov    0x28(%rax),%rdx
  0x00007f75704bbda4: mov    0x20(%rax),%rcx
  0x00007f75704bbda8: mov    0x18(%rax),%r8
  0x00007f75704bbdac: mov    0x8(%rax),%r9
  0x00007f75704bbdb0: mov    %rbx,0x258(%r15)
  0x00007f75704bbdb7: mov    %rbx,%rax
  0x00007f75704bbdba: jmpq   *%r11
  0x00007f75704bbdbd: mov    0x8(%rsi),%ebx
  0x00007f75704bbdc0: shl    $0x3,%rbx
  0x00007f75704bbdc4: cmp    0x10(%rax),%rbx
  0x00007f75704bbdc8: mov    0x8(%rax),%rbx
  0x00007f75704bbdcc: je     0x00007f75704bbdd7
  0x00007f75704bbdd2: jmpq   0x00007f757046ec40
  0x00007f75704bbdd7: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bbddf: je     0x00007f75704bbeda
  0x00007f75704bbde5: jmpq   0x00007f757046ec40
  0x00007f75704bbdea: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bbdf2: je     0x00007f75704bbeda
  0x00007f75704bbdf8: mov    %rsp,%r13
  0x00007f75704bbdfb: mov    (%rsp),%rax
  0x00007f75704bbdff: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bbe03: pushfq 
  0x00007f75704bbe04: sub    $0x8,%rsp
  0x00007f75704bbe08: mov    %rsp,-0x28(%rsp)
  0x00007f75704bbe0d: sub    $0x80,%rsp
  0x00007f75704bbe14: mov    %rax,0x78(%rsp)
  0x00007f75704bbe19: mov    %rcx,0x70(%rsp)
  0x00007f75704bbe1e: mov    %rdx,0x68(%rsp)
  0x00007f75704bbe23: mov    %rbx,0x60(%rsp)
  0x00007f75704bbe28: mov    %rbp,0x50(%rsp)
  0x00007f75704bbe2d: mov    %rsi,0x48(%rsp)
  0x00007f75704bbe32: mov    %rdi,0x40(%rsp)
  0x00007f75704bbe37: mov    %r8,0x38(%rsp)
  0x00007f75704bbe3c: mov    %r9,0x30(%rsp)
  0x00007f75704bbe41: mov    %r10,0x28(%rsp)
  0x00007f75704bbe46: mov    %r11,0x20(%rsp)
  0x00007f75704bbe4b: mov    %r12,0x18(%rsp)
  0x00007f75704bbe50: mov    %r13,0x10(%rsp)
  0x00007f75704bbe55: mov    %r14,0x8(%rsp)
  0x00007f75704bbe5a: mov    %r15,(%rsp)
  0x00007f75704bbe5e: sub    $0x200,%rsp
  0x00007f75704bbe65: fxsave64 (%rsp)
  0x00007f75704bbe6a: mov    %rbx,%rdi
  0x00007f75704bbe6d: mov    %rax,%rsi
  0x00007f75704bbe70: callq  0x00007f7585522bca
  0x00007f75704bbe75: fxrstor64 (%rsp)
  0x00007f75704bbe7a: add    $0x200,%rsp
  0x00007f75704bbe81: mov    (%rsp),%r15
  0x00007f75704bbe85: mov    0x8(%rsp),%r14
  0x00007f75704bbe8a: mov    0x10(%rsp),%r13
  0x00007f75704bbe8f: mov    0x18(%rsp),%r12
  0x00007f75704bbe94: mov    0x20(%rsp),%r11
  0x00007f75704bbe99: mov    0x28(%rsp),%r10
  0x00007f75704bbe9e: mov    0x30(%rsp),%r9
  0x00007f75704bbea3: mov    0x38(%rsp),%r8
  0x00007f75704bbea8: mov    0x40(%rsp),%rdi
  0x00007f75704bbead: mov    0x48(%rsp),%rsi
  0x00007f75704bbeb2: mov    0x50(%rsp),%rbp
  0x00007f75704bbeb7: mov    0x60(%rsp),%rbx
  0x00007f75704bbebc: mov    0x68(%rsp),%rdx
  0x00007f75704bbec1: mov    0x70(%rsp),%rcx
  0x00007f75704bbec6: mov    0x78(%rsp),%rax
  0x00007f75704bbecb: add    $0x80,%rsp
  0x00007f75704bbed2: add    $0x8,%rsp
  0x00007f75704bbed6: popfq  
  0x00007f75704bbed7: mov    %r13,%rsp
  0x00007f75704bbeda: pop    %rax
  0x00007f75704bbedb: mov    %rsp,%r13
  0x00007f75704bbede: sub    $0x40,%rsp
  0x00007f75704bbee2: mov    %rax,(%rsp)
  0x00007f75704bbee6: mov    %rsi,0x30(%rsp)
  0x00007f75704bbeeb: mov    %rdx,0x28(%rsp)
  0x00007f75704bbef0: mov    %rcx,0x20(%rsp)
  0x00007f75704bbef5: mov    %r8,0x18(%rsp)
  0x00007f75704bbefa: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704bbf04: mov    %rax,0x10(%rsp)
  0x00007f75704bbf09: mov    %r9,0x8(%rsp)
  0x00007f75704bbf0e: mov    0x40(%rbx),%rcx
  0x00007f75704bbf12: jmpq   *%rcx

AHE@0x00007f75800e9cf0: 0xbbbbbeba i2c: 0x00007f75704bbfe0 c2i: 0x00007f75704bc13b c2iUV: 0x00007f75704bc10e
i2c argument handler #21 for: receiver (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;Z)V (659 bytes generated)
c2i argument handler starts at 0x7f75704bc13b
  0x00007f75704bbfe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bbfe4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bbfee: cmp    %r11,%rax
  0x00007f75704bbff1: jbe    0x00007f75704bc00a
  0x00007f75704bbff7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bc001: cmp    %r11,%rax
  0x00007f75704bc004: jb     0x00007f75704bc0cd
  0x00007f75704bc00a: movabs $0x7f7570369420,%r11
  0x00007f75704bc014: cmp    %r11,%rax
  0x00007f75704bc017: jbe    0x00007f75704bc030
  0x00007f75704bc01d: movabs $0x7f757036de58,%r11
  0x00007f75704bc027: cmp    %r11,%rax
  0x00007f75704bc02a: jb     0x00007f75704bc0cd
  0x00007f75704bc030: movabs $0x7f75704a9820,%r11
  0x00007f75704bc03a: cmp    %r11,%rax
  0x00007f75704bc03d: jbe    0x00007f75704bc056
  0x00007f75704bc043: movabs $0x7f75704af5e0,%r11
  0x00007f75704bc04d: cmp    %r11,%rax
  0x00007f75704bc050: jb     0x00007f75704bc0cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bc056: mov    %rsp,-0x28(%rsp)
  0x00007f75704bc05b: sub    $0x80,%rsp
  0x00007f75704bc062: mov    %rax,0x78(%rsp)
  0x00007f75704bc067: mov    %rcx,0x70(%rsp)
  0x00007f75704bc06c: mov    %rdx,0x68(%rsp)
  0x00007f75704bc071: mov    %rbx,0x60(%rsp)
  0x00007f75704bc076: mov    %rbp,0x50(%rsp)
  0x00007f75704bc07b: mov    %rsi,0x48(%rsp)
  0x00007f75704bc080: mov    %rdi,0x40(%rsp)
  0x00007f75704bc085: mov    %r8,0x38(%rsp)
  0x00007f75704bc08a: mov    %r9,0x30(%rsp)
  0x00007f75704bc08f: mov    %r10,0x28(%rsp)
  0x00007f75704bc094: mov    %r11,0x20(%rsp)
  0x00007f75704bc099: mov    %r12,0x18(%rsp)
  0x00007f75704bc09e: mov    %r13,0x10(%rsp)
  0x00007f75704bc0a3: mov    %r14,0x8(%rsp)
  0x00007f75704bc0a8: mov    %r15,(%rsp)
  0x00007f75704bc0ac: movabs $0x7f758592f470,%rdi
  0x00007f75704bc0b6: movabs $0x7f75704bc056,%rsi
  0x00007f75704bc0c0: mov    %rsp,%rdx
  0x00007f75704bc0c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc0c7: callq  0x00007f75853729fa
  0x00007f75704bc0cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704bc0cd: mov    %rsp,%r11
  0x00007f75704bc0d0: sub    $0x10,%rsp
  0x00007f75704bc0d4: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc0d8: push   %rax
  0x00007f75704bc0d9: mov    %r11,%rax
  0x00007f75704bc0dc: mov    0x50(%rbx),%r11
  0x00007f75704bc0e0: mov    0x40(%rax),%rsi
  0x00007f75704bc0e4: mov    0x38(%rax),%rdx
  0x00007f75704bc0e8: mov    0x30(%rax),%rcx
  0x00007f75704bc0ec: mov    0x28(%rax),%r8
  0x00007f75704bc0f0: mov    0x18(%rax),%r9
  0x00007f75704bc0f4: mov    0x10(%rax),%rdi
  0x00007f75704bc0f8: mov    0x8(%rax),%r13d
  0x00007f75704bc0fc: mov    %r13,0x8(%rsp)
  0x00007f75704bc101: mov    %rbx,0x258(%r15)
  0x00007f75704bc108: mov    %rbx,%rax
  0x00007f75704bc10b: jmpq   *%r11
  0x00007f75704bc10e: mov    0x8(%rsi),%ebx
  0x00007f75704bc111: shl    $0x3,%rbx
  0x00007f75704bc115: cmp    0x10(%rax),%rbx
  0x00007f75704bc119: mov    0x8(%rax),%rbx
  0x00007f75704bc11d: je     0x00007f75704bc128
  0x00007f75704bc123: jmpq   0x00007f757046ec40
  0x00007f75704bc128: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bc130: je     0x00007f75704bc22b
  0x00007f75704bc136: jmpq   0x00007f757046ec40
  0x00007f75704bc13b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bc143: je     0x00007f75704bc22b
  0x00007f75704bc149: mov    %rsp,%r13
  0x00007f75704bc14c: mov    (%rsp),%rax
  0x00007f75704bc150: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc154: pushfq 
  0x00007f75704bc155: sub    $0x8,%rsp
  0x00007f75704bc159: mov    %rsp,-0x28(%rsp)
  0x00007f75704bc15e: sub    $0x80,%rsp
  0x00007f75704bc165: mov    %rax,0x78(%rsp)
  0x00007f75704bc16a: mov    %rcx,0x70(%rsp)
  0x00007f75704bc16f: mov    %rdx,0x68(%rsp)
  0x00007f75704bc174: mov    %rbx,0x60(%rsp)
  0x00007f75704bc179: mov    %rbp,0x50(%rsp)
  0x00007f75704bc17e: mov    %rsi,0x48(%rsp)
  0x00007f75704bc183: mov    %rdi,0x40(%rsp)
  0x00007f75704bc188: mov    %r8,0x38(%rsp)
  0x00007f75704bc18d: mov    %r9,0x30(%rsp)
  0x00007f75704bc192: mov    %r10,0x28(%rsp)
  0x00007f75704bc197: mov    %r11,0x20(%rsp)
  0x00007f75704bc19c: mov    %r12,0x18(%rsp)
  0x00007f75704bc1a1: mov    %r13,0x10(%rsp)
  0x00007f75704bc1a6: mov    %r14,0x8(%rsp)
  0x00007f75704bc1ab: mov    %r15,(%rsp)
  0x00007f75704bc1af: sub    $0x200,%rsp
  0x00007f75704bc1b6: fxsave64 (%rsp)
  0x00007f75704bc1bb: mov    %rbx,%rdi
  0x00007f75704bc1be: mov    %rax,%rsi
  0x00007f75704bc1c1: callq  0x00007f7585522bca
  0x00007f75704bc1c6: fxrstor64 (%rsp)
  0x00007f75704bc1cb: add    $0x200,%rsp
  0x00007f75704bc1d2: mov    (%rsp),%r15
  0x00007f75704bc1d6: mov    0x8(%rsp),%r14
  0x00007f75704bc1db: mov    0x10(%rsp),%r13
  0x00007f75704bc1e0: mov    0x18(%rsp),%r12
  0x00007f75704bc1e5: mov    0x20(%rsp),%r11
  0x00007f75704bc1ea: mov    0x28(%rsp),%r10
  0x00007f75704bc1ef: mov    0x30(%rsp),%r9
  0x00007f75704bc1f4: mov    0x38(%rsp),%r8
  0x00007f75704bc1f9: mov    0x40(%rsp),%rdi
  0x00007f75704bc1fe: mov    0x48(%rsp),%rsi
  0x00007f75704bc203: mov    0x50(%rsp),%rbp
  0x00007f75704bc208: mov    0x60(%rsp),%rbx
  0x00007f75704bc20d: mov    0x68(%rsp),%rdx
  0x00007f75704bc212: mov    0x70(%rsp),%rcx
  0x00007f75704bc217: mov    0x78(%rsp),%rax
  0x00007f75704bc21c: add    $0x80,%rsp
  0x00007f75704bc223: add    $0x8,%rsp
  0x00007f75704bc227: popfq  
  0x00007f75704bc228: mov    %r13,%rsp
  0x00007f75704bc22b: pop    %rax
  0x00007f75704bc22c: mov    %rsp,%r13
  0x00007f75704bc22f: sub    $0x50,%rsp
  0x00007f75704bc233: mov    %rax,(%rsp)
  0x00007f75704bc237: mov    %rsi,0x40(%rsp)
  0x00007f75704bc23c: mov    %rdx,0x38(%rsp)
  0x00007f75704bc241: mov    %rcx,0x30(%rsp)
  0x00007f75704bc246: mov    %r8,0x28(%rsp)
  0x00007f75704bc24b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704bc255: mov    %rax,0x20(%rsp)
  0x00007f75704bc25a: mov    %r9,0x18(%rsp)
  0x00007f75704bc25f: mov    %rdi,0x10(%rsp)
  0x00007f75704bc264: mov    0x50(%rsp),%eax
  0x00007f75704bc268: mov    %rax,0x8(%rsp)
  0x00007f75704bc26d: mov    0x40(%rbx),%rcx
  0x00007f75704bc271: jmpq   *%rcx

AHE@0x00007f75800e9d38: 0xbbe00000 i2c: 0x00007f75704bc320 c2i: 0x00007f75704bc45e c2iUV: 0x00007f75704bc431
i2c argument handler #22 for: receiver (J)V (601 bytes generated)
c2i argument handler starts at 0x7f75704bc45e
  0x00007f75704bc320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bc324: movabs $0x7f757036e3e0,%r11
  0x00007f75704bc32e: cmp    %r11,%rax
  0x00007f75704bc331: jbe    0x00007f75704bc34a
  0x00007f75704bc337: movabs $0x7f757046e3e0,%r11
  0x00007f75704bc341: cmp    %r11,%rax
  0x00007f75704bc344: jb     0x00007f75704bc40d
  0x00007f75704bc34a: movabs $0x7f7570369420,%r11
  0x00007f75704bc354: cmp    %r11,%rax
  0x00007f75704bc357: jbe    0x00007f75704bc370
  0x00007f75704bc35d: movabs $0x7f757036de58,%r11
  0x00007f75704bc367: cmp    %r11,%rax
  0x00007f75704bc36a: jb     0x00007f75704bc40d
  0x00007f75704bc370: movabs $0x7f75704a9820,%r11
  0x00007f75704bc37a: cmp    %r11,%rax
  0x00007f75704bc37d: jbe    0x00007f75704bc396
  0x00007f75704bc383: movabs $0x7f75704af5e0,%r11
  0x00007f75704bc38d: cmp    %r11,%rax
  0x00007f75704bc390: jb     0x00007f75704bc40d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bc396: mov    %rsp,-0x28(%rsp)
  0x00007f75704bc39b: sub    $0x80,%rsp
  0x00007f75704bc3a2: mov    %rax,0x78(%rsp)
  0x00007f75704bc3a7: mov    %rcx,0x70(%rsp)
  0x00007f75704bc3ac: mov    %rdx,0x68(%rsp)
  0x00007f75704bc3b1: mov    %rbx,0x60(%rsp)
  0x00007f75704bc3b6: mov    %rbp,0x50(%rsp)
  0x00007f75704bc3bb: mov    %rsi,0x48(%rsp)
  0x00007f75704bc3c0: mov    %rdi,0x40(%rsp)
  0x00007f75704bc3c5: mov    %r8,0x38(%rsp)
  0x00007f75704bc3ca: mov    %r9,0x30(%rsp)
  0x00007f75704bc3cf: mov    %r10,0x28(%rsp)
  0x00007f75704bc3d4: mov    %r11,0x20(%rsp)
  0x00007f75704bc3d9: mov    %r12,0x18(%rsp)
  0x00007f75704bc3de: mov    %r13,0x10(%rsp)
  0x00007f75704bc3e3: mov    %r14,0x8(%rsp)
  0x00007f75704bc3e8: mov    %r15,(%rsp)
  0x00007f75704bc3ec: movabs $0x7f758592f470,%rdi
  0x00007f75704bc3f6: movabs $0x7f75704bc396,%rsi
  0x00007f75704bc400: mov    %rsp,%rdx
  0x00007f75704bc403: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc407: callq  0x00007f75853729fa
  0x00007f75704bc40c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bc40d: mov    %rsp,%r11
  0x00007f75704bc410: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc414: push   %rax
  0x00007f75704bc415: mov    %r11,%rax
  0x00007f75704bc418: mov    0x50(%rbx),%r11
  0x00007f75704bc41c: mov    0x18(%rax),%rsi
  0x00007f75704bc420: mov    0x8(%rax),%rdx
  0x00007f75704bc424: mov    %rbx,0x258(%r15)
  0x00007f75704bc42b: mov    %rbx,%rax
  0x00007f75704bc42e: jmpq   *%r11
  0x00007f75704bc431: mov    0x8(%rsi),%ebx
  0x00007f75704bc434: shl    $0x3,%rbx
  0x00007f75704bc438: cmp    0x10(%rax),%rbx
  0x00007f75704bc43c: mov    0x8(%rax),%rbx
  0x00007f75704bc440: je     0x00007f75704bc44b
  0x00007f75704bc446: jmpq   0x00007f757046ec40
  0x00007f75704bc44b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bc453: je     0x00007f75704bc54e
  0x00007f75704bc459: jmpq   0x00007f757046ec40
  0x00007f75704bc45e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bc466: je     0x00007f75704bc54e
  0x00007f75704bc46c: mov    %rsp,%r13
  0x00007f75704bc46f: mov    (%rsp),%rax
  0x00007f75704bc473: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc477: pushfq 
  0x00007f75704bc478: sub    $0x8,%rsp
  0x00007f75704bc47c: mov    %rsp,-0x28(%rsp)
  0x00007f75704bc481: sub    $0x80,%rsp
  0x00007f75704bc488: mov    %rax,0x78(%rsp)
  0x00007f75704bc48d: mov    %rcx,0x70(%rsp)
  0x00007f75704bc492: mov    %rdx,0x68(%rsp)
  0x00007f75704bc497: mov    %rbx,0x60(%rsp)
  0x00007f75704bc49c: mov    %rbp,0x50(%rsp)
  0x00007f75704bc4a1: mov    %rsi,0x48(%rsp)
  0x00007f75704bc4a6: mov    %rdi,0x40(%rsp)
  0x00007f75704bc4ab: mov    %r8,0x38(%rsp)
  0x00007f75704bc4b0: mov    %r9,0x30(%rsp)
  0x00007f75704bc4b5: mov    %r10,0x28(%rsp)
  0x00007f75704bc4ba: mov    %r11,0x20(%rsp)
  0x00007f75704bc4bf: mov    %r12,0x18(%rsp)
  0x00007f75704bc4c4: mov    %r13,0x10(%rsp)
  0x00007f75704bc4c9: mov    %r14,0x8(%rsp)
  0x00007f75704bc4ce: mov    %r15,(%rsp)
  0x00007f75704bc4d2: sub    $0x200,%rsp
  0x00007f75704bc4d9: fxsave64 (%rsp)
  0x00007f75704bc4de: mov    %rbx,%rdi
  0x00007f75704bc4e1: mov    %rax,%rsi
  0x00007f75704bc4e4: callq  0x00007f7585522bca
  0x00007f75704bc4e9: fxrstor64 (%rsp)
  0x00007f75704bc4ee: add    $0x200,%rsp
  0x00007f75704bc4f5: mov    (%rsp),%r15
  0x00007f75704bc4f9: mov    0x8(%rsp),%r14
  0x00007f75704bc4fe: mov    0x10(%rsp),%r13
  0x00007f75704bc503: mov    0x18(%rsp),%r12
  0x00007f75704bc508: mov    0x20(%rsp),%r11
  0x00007f75704bc50d: mov    0x28(%rsp),%r10
  0x00007f75704bc512: mov    0x30(%rsp),%r9
  0x00007f75704bc517: mov    0x38(%rsp),%r8
  0x00007f75704bc51c: mov    0x40(%rsp),%rdi
  0x00007f75704bc521: mov    0x48(%rsp),%rsi
  0x00007f75704bc526: mov    0x50(%rsp),%rbp
  0x00007f75704bc52b: mov    0x60(%rsp),%rbx
  0x00007f75704bc530: mov    0x68(%rsp),%rdx
  0x00007f75704bc535: mov    0x70(%rsp),%rcx
  0x00007f75704bc53a: mov    0x78(%rsp),%rax
  0x00007f75704bc53f: add    $0x80,%rsp
  0x00007f75704bc546: add    $0x8,%rsp
  0x00007f75704bc54a: popfq  
  0x00007f75704bc54b: mov    %r13,%rsp
  0x00007f75704bc54e: pop    %rax
  0x00007f75704bc54f: mov    %rsp,%r13
  0x00007f75704bc552: sub    $0x20,%rsp
  0x00007f75704bc556: mov    %rax,(%rsp)
  0x00007f75704bc55a: mov    %rsi,0x18(%rsp)
  0x00007f75704bc55f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704bc569: mov    %rax,0x10(%rsp)
  0x00007f75704bc56e: mov    %rdx,0x8(%rsp)
  0x00007f75704bc573: mov    0x40(%rbx),%rcx
  0x00007f75704bc577: jmpq   *%rcx

AHE@0x00007f75800e9d80: 0xbbea0000 i2c: 0x00007f75704bc620 c2i: 0x00007f75704bc761 c2iUV: 0x00007f75704bc734
i2c argument handler #23 for: receiver (JI)V (608 bytes generated)
c2i argument handler starts at 0x7f75704bc761
  0x00007f75704bc620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bc624: movabs $0x7f757036e3e0,%r11
  0x00007f75704bc62e: cmp    %r11,%rax
  0x00007f75704bc631: jbe    0x00007f75704bc64a
  0x00007f75704bc637: movabs $0x7f757046e3e0,%r11
  0x00007f75704bc641: cmp    %r11,%rax
  0x00007f75704bc644: jb     0x00007f75704bc70d
  0x00007f75704bc64a: movabs $0x7f7570369420,%r11
  0x00007f75704bc654: cmp    %r11,%rax
  0x00007f75704bc657: jbe    0x00007f75704bc670
  0x00007f75704bc65d: movabs $0x7f757036de58,%r11
  0x00007f75704bc667: cmp    %r11,%rax
  0x00007f75704bc66a: jb     0x00007f75704bc70d
  0x00007f75704bc670: movabs $0x7f75704a9820,%r11
  0x00007f75704bc67a: cmp    %r11,%rax
  0x00007f75704bc67d: jbe    0x00007f75704bc696
  0x00007f75704bc683: movabs $0x7f75704af5e0,%r11
  0x00007f75704bc68d: cmp    %r11,%rax
  0x00007f75704bc690: jb     0x00007f75704bc70d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bc696: mov    %rsp,-0x28(%rsp)
  0x00007f75704bc69b: sub    $0x80,%rsp
  0x00007f75704bc6a2: mov    %rax,0x78(%rsp)
  0x00007f75704bc6a7: mov    %rcx,0x70(%rsp)
  0x00007f75704bc6ac: mov    %rdx,0x68(%rsp)
  0x00007f75704bc6b1: mov    %rbx,0x60(%rsp)
  0x00007f75704bc6b6: mov    %rbp,0x50(%rsp)
  0x00007f75704bc6bb: mov    %rsi,0x48(%rsp)
  0x00007f75704bc6c0: mov    %rdi,0x40(%rsp)
  0x00007f75704bc6c5: mov    %r8,0x38(%rsp)
  0x00007f75704bc6ca: mov    %r9,0x30(%rsp)
  0x00007f75704bc6cf: mov    %r10,0x28(%rsp)
  0x00007f75704bc6d4: mov    %r11,0x20(%rsp)
  0x00007f75704bc6d9: mov    %r12,0x18(%rsp)
  0x00007f75704bc6de: mov    %r13,0x10(%rsp)
  0x00007f75704bc6e3: mov    %r14,0x8(%rsp)
  0x00007f75704bc6e8: mov    %r15,(%rsp)
  0x00007f75704bc6ec: movabs $0x7f758592f470,%rdi
  0x00007f75704bc6f6: movabs $0x7f75704bc696,%rsi
  0x00007f75704bc700: mov    %rsp,%rdx
  0x00007f75704bc703: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc707: callq  0x00007f75853729fa
  0x00007f75704bc70c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bc70d: mov    %rsp,%r11
  0x00007f75704bc710: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc714: push   %rax
  0x00007f75704bc715: mov    %r11,%rax
  0x00007f75704bc718: mov    0x50(%rbx),%r11
  0x00007f75704bc71c: mov    0x20(%rax),%rsi
  0x00007f75704bc720: mov    0x10(%rax),%rdx
  0x00007f75704bc724: mov    0x8(%rax),%ecx
  0x00007f75704bc727: mov    %rbx,0x258(%r15)
  0x00007f75704bc72e: mov    %rbx,%rax
  0x00007f75704bc731: jmpq   *%r11
  0x00007f75704bc734: mov    0x8(%rsi),%ebx
  0x00007f75704bc737: shl    $0x3,%rbx
  0x00007f75704bc73b: cmp    0x10(%rax),%rbx
  0x00007f75704bc73f: mov    0x8(%rax),%rbx
  0x00007f75704bc743: je     0x00007f75704bc74e
  0x00007f75704bc749: jmpq   0x00007f757046ec40
  0x00007f75704bc74e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bc756: je     0x00007f75704bc851
  0x00007f75704bc75c: jmpq   0x00007f757046ec40
  0x00007f75704bc761: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bc769: je     0x00007f75704bc851
  0x00007f75704bc76f: mov    %rsp,%r13
  0x00007f75704bc772: mov    (%rsp),%rax
  0x00007f75704bc776: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bc77a: pushfq 
  0x00007f75704bc77b: sub    $0x8,%rsp
  0x00007f75704bc77f: mov    %rsp,-0x28(%rsp)
  0x00007f75704bc784: sub    $0x80,%rsp
  0x00007f75704bc78b: mov    %rax,0x78(%rsp)
  0x00007f75704bc790: mov    %rcx,0x70(%rsp)
  0x00007f75704bc795: mov    %rdx,0x68(%rsp)
  0x00007f75704bc79a: mov    %rbx,0x60(%rsp)
  0x00007f75704bc79f: mov    %rbp,0x50(%rsp)
  0x00007f75704bc7a4: mov    %rsi,0x48(%rsp)
  0x00007f75704bc7a9: mov    %rdi,0x40(%rsp)
  0x00007f75704bc7ae: mov    %r8,0x38(%rsp)
  0x00007f75704bc7b3: mov    %r9,0x30(%rsp)
  0x00007f75704bc7b8: mov    %r10,0x28(%rsp)
  0x00007f75704bc7bd: mov    %r11,0x20(%rsp)
  0x00007f75704bc7c2: mov    %r12,0x18(%rsp)
  0x00007f75704bc7c7: mov    %r13,0x10(%rsp)
  0x00007f75704bc7cc: mov    %r14,0x8(%rsp)
  0x00007f75704bc7d1: mov    %r15,(%rsp)
  0x00007f75704bc7d5: sub    $0x200,%rsp
  0x00007f75704bc7dc: fxsave64 (%rsp)
  0x00007f75704bc7e1: mov    %rbx,%rdi
  0x00007f75704bc7e4: mov    %rax,%rsi
  0x00007f75704bc7e7: callq  0x00007f7585522bca
  0x00007f75704bc7ec: fxrstor64 (%rsp)
  0x00007f75704bc7f1: add    $0x200,%rsp
  0x00007f75704bc7f8: mov    (%rsp),%r15
  0x00007f75704bc7fc: mov    0x8(%rsp),%r14
  0x00007f75704bc801: mov    0x10(%rsp),%r13
  0x00007f75704bc806: mov    0x18(%rsp),%r12
  0x00007f75704bc80b: mov    0x20(%rsp),%r11
  0x00007f75704bc810: mov    0x28(%rsp),%r10
  0x00007f75704bc815: mov    0x30(%rsp),%r9
  0x00007f75704bc81a: mov    0x38(%rsp),%r8
  0x00007f75704bc81f: mov    0x40(%rsp),%rdi
  0x00007f75704bc824: mov    0x48(%rsp),%rsi
  0x00007f75704bc829: mov    0x50(%rsp),%rbp
  0x00007f75704bc82e: mov    0x60(%rsp),%rbx
  0x00007f75704bc833: mov    0x68(%rsp),%rdx
  0x00007f75704bc838: mov    0x70(%rsp),%rcx
  0x00007f75704bc83d: mov    0x78(%rsp),%rax
  0x00007f75704bc842: add    $0x80,%rsp
  0x00007f75704bc849: add    $0x8,%rsp
  0x00007f75704bc84d: popfq  
  0x00007f75704bc84e: mov    %r13,%rsp
  0x00007f75704bc851: pop    %rax
  0x00007f75704bc852: mov    %rsp,%r13
  0x00007f75704bc855: sub    $0x30,%rsp
  0x00007f75704bc859: mov    %rax,(%rsp)
  0x00007f75704bc85d: mov    %rsi,0x20(%rsp)
  0x00007f75704bc862: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704bc86c: mov    %rax,0x18(%rsp)
  0x00007f75704bc871: mov    %rdx,0x10(%rsp)
  0x00007f75704bc876: mov    %ecx,0x8(%rsp)
  0x00007f75704bc87a: mov    0x40(%rbx),%rcx
  0x00007f75704bc87e: jmpq   *%rcx

AHE@0x00007f75800e9dc8: 0xbbbbb000 i2c: 0x00007f75704bc920 c2i: 0x00007f75704bca6a c2iUV: 0x00007f75704bca3d
i2c argument handler #24 for: static (Ljava/security/DomainCombiner;Ljava/lang/Class;Ljava/security/AccessControlContext;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/security/AccessControlContext; (613 bytes generated)
c2i argument handler starts at 0x7f75704bca6a
  0x00007f75704bc920: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bc924: movabs $0x7f757036e3e0,%r11
  0x00007f75704bc92e: cmp    %r11,%rax
  0x00007f75704bc931: jbe    0x00007f75704bc94a
  0x00007f75704bc937: movabs $0x7f757046e3e0,%r11
  0x00007f75704bc941: cmp    %r11,%rax
  0x00007f75704bc944: jb     0x00007f75704bca0d
  0x00007f75704bc94a: movabs $0x7f7570369420,%r11
  0x00007f75704bc954: cmp    %r11,%rax
  0x00007f75704bc957: jbe    0x00007f75704bc970
  0x00007f75704bc95d: movabs $0x7f757036de58,%r11
  0x00007f75704bc967: cmp    %r11,%rax
  0x00007f75704bc96a: jb     0x00007f75704bca0d
  0x00007f75704bc970: movabs $0x7f75704a9820,%r11
  0x00007f75704bc97a: cmp    %r11,%rax
  0x00007f75704bc97d: jbe    0x00007f75704bc996
  0x00007f75704bc983: movabs $0x7f75704af5e0,%r11
  0x00007f75704bc98d: cmp    %r11,%rax
  0x00007f75704bc990: jb     0x00007f75704bca0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bc996: mov    %rsp,-0x28(%rsp)
  0x00007f75704bc99b: sub    $0x80,%rsp
  0x00007f75704bc9a2: mov    %rax,0x78(%rsp)
  0x00007f75704bc9a7: mov    %rcx,0x70(%rsp)
  0x00007f75704bc9ac: mov    %rdx,0x68(%rsp)
  0x00007f75704bc9b1: mov    %rbx,0x60(%rsp)
  0x00007f75704bc9b6: mov    %rbp,0x50(%rsp)
  0x00007f75704bc9bb: mov    %rsi,0x48(%rsp)
  0x00007f75704bc9c0: mov    %rdi,0x40(%rsp)
  0x00007f75704bc9c5: mov    %r8,0x38(%rsp)
  0x00007f75704bc9ca: mov    %r9,0x30(%rsp)
  0x00007f75704bc9cf: mov    %r10,0x28(%rsp)
  0x00007f75704bc9d4: mov    %r11,0x20(%rsp)
  0x00007f75704bc9d9: mov    %r12,0x18(%rsp)
  0x00007f75704bc9de: mov    %r13,0x10(%rsp)
  0x00007f75704bc9e3: mov    %r14,0x8(%rsp)
  0x00007f75704bc9e8: mov    %r15,(%rsp)
  0x00007f75704bc9ec: movabs $0x7f758592f470,%rdi
  0x00007f75704bc9f6: movabs $0x7f75704bc996,%rsi
  0x00007f75704bca00: mov    %rsp,%rdx
  0x00007f75704bca03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bca07: callq  0x00007f75853729fa
  0x00007f75704bca0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bca0d: mov    %rsp,%r11
  0x00007f75704bca10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bca14: push   %rax
  0x00007f75704bca15: mov    %r11,%rax
  0x00007f75704bca18: mov    0x50(%rbx),%r11
  0x00007f75704bca1c: mov    0x28(%rax),%rsi
  0x00007f75704bca20: mov    0x20(%rax),%rdx
  0x00007f75704bca24: mov    0x18(%rax),%rcx
  0x00007f75704bca28: mov    0x10(%rax),%r8
  0x00007f75704bca2c: mov    0x8(%rax),%r9
  0x00007f75704bca30: mov    %rbx,0x258(%r15)
  0x00007f75704bca37: mov    %rbx,%rax
  0x00007f75704bca3a: jmpq   *%r11
  0x00007f75704bca3d: mov    0x8(%rsi),%ebx
  0x00007f75704bca40: shl    $0x3,%rbx
  0x00007f75704bca44: cmp    0x10(%rax),%rbx
  0x00007f75704bca48: mov    0x8(%rax),%rbx
  0x00007f75704bca4c: je     0x00007f75704bca57
  0x00007f75704bca52: jmpq   0x00007f757046ec40
  0x00007f75704bca57: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bca5f: je     0x00007f75704bcb5a
  0x00007f75704bca65: jmpq   0x00007f757046ec40
  0x00007f75704bca6a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bca72: je     0x00007f75704bcb5a
  0x00007f75704bca78: mov    %rsp,%r13
  0x00007f75704bca7b: mov    (%rsp),%rax
  0x00007f75704bca7f: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bca83: pushfq 
  0x00007f75704bca84: sub    $0x8,%rsp
  0x00007f75704bca88: mov    %rsp,-0x28(%rsp)
  0x00007f75704bca8d: sub    $0x80,%rsp
  0x00007f75704bca94: mov    %rax,0x78(%rsp)
  0x00007f75704bca99: mov    %rcx,0x70(%rsp)
  0x00007f75704bca9e: mov    %rdx,0x68(%rsp)
  0x00007f75704bcaa3: mov    %rbx,0x60(%rsp)
  0x00007f75704bcaa8: mov    %rbp,0x50(%rsp)
  0x00007f75704bcaad: mov    %rsi,0x48(%rsp)
  0x00007f75704bcab2: mov    %rdi,0x40(%rsp)
  0x00007f75704bcab7: mov    %r8,0x38(%rsp)
  0x00007f75704bcabc: mov    %r9,0x30(%rsp)
  0x00007f75704bcac1: mov    %r10,0x28(%rsp)
  0x00007f75704bcac6: mov    %r11,0x20(%rsp)
  0x00007f75704bcacb: mov    %r12,0x18(%rsp)
  0x00007f75704bcad0: mov    %r13,0x10(%rsp)
  0x00007f75704bcad5: mov    %r14,0x8(%rsp)
  0x00007f75704bcada: mov    %r15,(%rsp)
  0x00007f75704bcade: sub    $0x200,%rsp
  0x00007f75704bcae5: fxsave64 (%rsp)
  0x00007f75704bcaea: mov    %rbx,%rdi
  0x00007f75704bcaed: mov    %rax,%rsi
  0x00007f75704bcaf0: callq  0x00007f7585522bca
  0x00007f75704bcaf5: fxrstor64 (%rsp)
  0x00007f75704bcafa: add    $0x200,%rsp
  0x00007f75704bcb01: mov    (%rsp),%r15
  0x00007f75704bcb05: mov    0x8(%rsp),%r14
  0x00007f75704bcb0a: mov    0x10(%rsp),%r13
  0x00007f75704bcb0f: mov    0x18(%rsp),%r12
  0x00007f75704bcb14: mov    0x20(%rsp),%r11
  0x00007f75704bcb19: mov    0x28(%rsp),%r10
  0x00007f75704bcb1e: mov    0x30(%rsp),%r9
  0x00007f75704bcb23: mov    0x38(%rsp),%r8
  0x00007f75704bcb28: mov    0x40(%rsp),%rdi
  0x00007f75704bcb2d: mov    0x48(%rsp),%rsi
  0x00007f75704bcb32: mov    0x50(%rsp),%rbp
  0x00007f75704bcb37: mov    0x60(%rsp),%rbx
  0x00007f75704bcb3c: mov    0x68(%rsp),%rdx
  0x00007f75704bcb41: mov    0x70(%rsp),%rcx
  0x00007f75704bcb46: mov    0x78(%rsp),%rax
  0x00007f75704bcb4b: add    $0x80,%rsp
  0x00007f75704bcb52: add    $0x8,%rsp
  0x00007f75704bcb56: popfq  
  0x00007f75704bcb57: mov    %r13,%rsp
  0x00007f75704bcb5a: pop    %rax
  0x00007f75704bcb5b: mov    %rsp,%r13
  0x00007f75704bcb5e: sub    $0x30,%rsp
  0x00007f75704bcb62: mov    %rax,(%rsp)
  0x00007f75704bcb66: mov    %rsi,0x28(%rsp)
  0x00007f75704bcb6b: mov    %rdx,0x20(%rsp)
  0x00007f75704bcb70: mov    %rcx,0x18(%rsp)
  0x00007f75704bcb75: mov    %r8,0x10(%rsp)
  0x00007f75704bcb7a: mov    %r9,0x8(%rsp)
  0x00007f75704bcb7f: mov    0x40(%rbx),%rcx
  0x00007f75704bcb83: jmpq   *%rcx

AHE@0x00007f75800e9e10: 0xbbba0000 i2c: 0x00007f75704bcc60 c2i: 0x00007f75704bcda6 c2iUV: 0x00007f75704bcd79
i2c argument handler #25 for: receiver (Ljava/security/AccessControlContext;Ljava/security/DomainCombiner;Z)V (604 bytes generated)
c2i argument handler starts at 0x7f75704bcda6
  0x00007f75704bcc60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bcc64: movabs $0x7f757036e3e0,%r11
  0x00007f75704bcc6e: cmp    %r11,%rax
  0x00007f75704bcc71: jbe    0x00007f75704bcc8a
  0x00007f75704bcc77: movabs $0x7f757046e3e0,%r11
  0x00007f75704bcc81: cmp    %r11,%rax
  0x00007f75704bcc84: jb     0x00007f75704bcd4d
  0x00007f75704bcc8a: movabs $0x7f7570369420,%r11
  0x00007f75704bcc94: cmp    %r11,%rax
  0x00007f75704bcc97: jbe    0x00007f75704bccb0
  0x00007f75704bcc9d: movabs $0x7f757036de58,%r11
  0x00007f75704bcca7: cmp    %r11,%rax
  0x00007f75704bccaa: jb     0x00007f75704bcd4d
  0x00007f75704bccb0: movabs $0x7f75704a9820,%r11
  0x00007f75704bccba: cmp    %r11,%rax
  0x00007f75704bccbd: jbe    0x00007f75704bccd6
  0x00007f75704bccc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704bcccd: cmp    %r11,%rax
  0x00007f75704bccd0: jb     0x00007f75704bcd4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bccd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704bccdb: sub    $0x80,%rsp
  0x00007f75704bcce2: mov    %rax,0x78(%rsp)
  0x00007f75704bcce7: mov    %rcx,0x70(%rsp)
  0x00007f75704bccec: mov    %rdx,0x68(%rsp)
  0x00007f75704bccf1: mov    %rbx,0x60(%rsp)
  0x00007f75704bccf6: mov    %rbp,0x50(%rsp)
  0x00007f75704bccfb: mov    %rsi,0x48(%rsp)
  0x00007f75704bcd00: mov    %rdi,0x40(%rsp)
  0x00007f75704bcd05: mov    %r8,0x38(%rsp)
  0x00007f75704bcd0a: mov    %r9,0x30(%rsp)
  0x00007f75704bcd0f: mov    %r10,0x28(%rsp)
  0x00007f75704bcd14: mov    %r11,0x20(%rsp)
  0x00007f75704bcd19: mov    %r12,0x18(%rsp)
  0x00007f75704bcd1e: mov    %r13,0x10(%rsp)
  0x00007f75704bcd23: mov    %r14,0x8(%rsp)
  0x00007f75704bcd28: mov    %r15,(%rsp)
  0x00007f75704bcd2c: movabs $0x7f758592f470,%rdi
  0x00007f75704bcd36: movabs $0x7f75704bccd6,%rsi
  0x00007f75704bcd40: mov    %rsp,%rdx
  0x00007f75704bcd43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bcd47: callq  0x00007f75853729fa
  0x00007f75704bcd4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bcd4d: mov    %rsp,%r11
  0x00007f75704bcd50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bcd54: push   %rax
  0x00007f75704bcd55: mov    %r11,%rax
  0x00007f75704bcd58: mov    0x50(%rbx),%r11
  0x00007f75704bcd5c: mov    0x20(%rax),%rsi
  0x00007f75704bcd60: mov    0x18(%rax),%rdx
  0x00007f75704bcd64: mov    0x10(%rax),%rcx
  0x00007f75704bcd68: mov    0x8(%rax),%r8d
  0x00007f75704bcd6c: mov    %rbx,0x258(%r15)
  0x00007f75704bcd73: mov    %rbx,%rax
  0x00007f75704bcd76: jmpq   *%r11
  0x00007f75704bcd79: mov    0x8(%rsi),%ebx
  0x00007f75704bcd7c: shl    $0x3,%rbx
  0x00007f75704bcd80: cmp    0x10(%rax),%rbx
  0x00007f75704bcd84: mov    0x8(%rax),%rbx
  0x00007f75704bcd88: je     0x00007f75704bcd93
  0x00007f75704bcd8e: jmpq   0x00007f757046ec40
  0x00007f75704bcd93: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bcd9b: je     0x00007f75704bce96
  0x00007f75704bcda1: jmpq   0x00007f757046ec40
  0x00007f75704bcda6: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bcdae: je     0x00007f75704bce96
  0x00007f75704bcdb4: mov    %rsp,%r13
  0x00007f75704bcdb7: mov    (%rsp),%rax
  0x00007f75704bcdbb: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bcdbf: pushfq 
  0x00007f75704bcdc0: sub    $0x8,%rsp
  0x00007f75704bcdc4: mov    %rsp,-0x28(%rsp)
  0x00007f75704bcdc9: sub    $0x80,%rsp
  0x00007f75704bcdd0: mov    %rax,0x78(%rsp)
  0x00007f75704bcdd5: mov    %rcx,0x70(%rsp)
  0x00007f75704bcdda: mov    %rdx,0x68(%rsp)
  0x00007f75704bcddf: mov    %rbx,0x60(%rsp)
  0x00007f75704bcde4: mov    %rbp,0x50(%rsp)
  0x00007f75704bcde9: mov    %rsi,0x48(%rsp)
  0x00007f75704bcdee: mov    %rdi,0x40(%rsp)
  0x00007f75704bcdf3: mov    %r8,0x38(%rsp)
  0x00007f75704bcdf8: mov    %r9,0x30(%rsp)
  0x00007f75704bcdfd: mov    %r10,0x28(%rsp)
  0x00007f75704bce02: mov    %r11,0x20(%rsp)
  0x00007f75704bce07: mov    %r12,0x18(%rsp)
  0x00007f75704bce0c: mov    %r13,0x10(%rsp)
  0x00007f75704bce11: mov    %r14,0x8(%rsp)
  0x00007f75704bce16: mov    %r15,(%rsp)
  0x00007f75704bce1a: sub    $0x200,%rsp
  0x00007f75704bce21: fxsave64 (%rsp)
  0x00007f75704bce26: mov    %rbx,%rdi
  0x00007f75704bce29: mov    %rax,%rsi
  0x00007f75704bce2c: callq  0x00007f7585522bca
  0x00007f75704bce31: fxrstor64 (%rsp)
  0x00007f75704bce36: add    $0x200,%rsp
  0x00007f75704bce3d: mov    (%rsp),%r15
  0x00007f75704bce41: mov    0x8(%rsp),%r14
  0x00007f75704bce46: mov    0x10(%rsp),%r13
  0x00007f75704bce4b: mov    0x18(%rsp),%r12
  0x00007f75704bce50: mov    0x20(%rsp),%r11
  0x00007f75704bce55: mov    0x28(%rsp),%r10
  0x00007f75704bce5a: mov    0x30(%rsp),%r9
  0x00007f75704bce5f: mov    0x38(%rsp),%r8
  0x00007f75704bce64: mov    0x40(%rsp),%rdi
  0x00007f75704bce69: mov    0x48(%rsp),%rsi
  0x00007f75704bce6e: mov    0x50(%rsp),%rbp
  0x00007f75704bce73: mov    0x60(%rsp),%rbx
  0x00007f75704bce78: mov    0x68(%rsp),%rdx
  0x00007f75704bce7d: mov    0x70(%rsp),%rcx
  0x00007f75704bce82: mov    0x78(%rsp),%rax
  0x00007f75704bce87: add    $0x80,%rsp
  0x00007f75704bce8e: add    $0x8,%rsp
  0x00007f75704bce92: popfq  
  0x00007f75704bce93: mov    %r13,%rsp
  0x00007f75704bce96: pop    %rax
  0x00007f75704bce97: mov    %rsp,%r13
  0x00007f75704bce9a: sub    $0x30,%rsp
  0x00007f75704bce9e: mov    %rax,(%rsp)
  0x00007f75704bcea2: mov    %rsi,0x20(%rsp)
  0x00007f75704bcea7: mov    %rdx,0x18(%rsp)
  0x00007f75704bceac: mov    %rcx,0x10(%rsp)
  0x00007f75704bceb1: mov    %r8d,0x8(%rsp)
  0x00007f75704bceb6: mov    0x40(%rbx),%rcx
  0x00007f75704bceba: jmpq   *%rcx

AHE@0x00007f75800e9e58: 0xbbbbbb00 i2c: 0x00007f75704bcf60 c2i: 0x00007f75704bd0ae c2iUV: 0x00007f75704bd081
i2c argument handler #26 for: receiver (Ljava/security/ProtectionDomain;Ljava/security/DomainCombiner;Ljava/security/AccessControlContext;Ljava/security/AccessControlContext;[Ljava/security/Permission;)V (622 bytes generated)
c2i argument handler starts at 0x7f75704bd0ae
  0x00007f75704bcf60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bcf64: movabs $0x7f757036e3e0,%r11
  0x00007f75704bcf6e: cmp    %r11,%rax
  0x00007f75704bcf71: jbe    0x00007f75704bcf8a
  0x00007f75704bcf77: movabs $0x7f757046e3e0,%r11
  0x00007f75704bcf81: cmp    %r11,%rax
  0x00007f75704bcf84: jb     0x00007f75704bd04d
  0x00007f75704bcf8a: movabs $0x7f7570369420,%r11
  0x00007f75704bcf94: cmp    %r11,%rax
  0x00007f75704bcf97: jbe    0x00007f75704bcfb0
  0x00007f75704bcf9d: movabs $0x7f757036de58,%r11
  0x00007f75704bcfa7: cmp    %r11,%rax
  0x00007f75704bcfaa: jb     0x00007f75704bd04d
  0x00007f75704bcfb0: movabs $0x7f75704a9820,%r11
  0x00007f75704bcfba: cmp    %r11,%rax
  0x00007f75704bcfbd: jbe    0x00007f75704bcfd6
  0x00007f75704bcfc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704bcfcd: cmp    %r11,%rax
  0x00007f75704bcfd0: jb     0x00007f75704bd04d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bcfd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704bcfdb: sub    $0x80,%rsp
  0x00007f75704bcfe2: mov    %rax,0x78(%rsp)
  0x00007f75704bcfe7: mov    %rcx,0x70(%rsp)
  0x00007f75704bcfec: mov    %rdx,0x68(%rsp)
  0x00007f75704bcff1: mov    %rbx,0x60(%rsp)
  0x00007f75704bcff6: mov    %rbp,0x50(%rsp)
  0x00007f75704bcffb: mov    %rsi,0x48(%rsp)
  0x00007f75704bd000: mov    %rdi,0x40(%rsp)
  0x00007f75704bd005: mov    %r8,0x38(%rsp)
  0x00007f75704bd00a: mov    %r9,0x30(%rsp)
  0x00007f75704bd00f: mov    %r10,0x28(%rsp)
  0x00007f75704bd014: mov    %r11,0x20(%rsp)
  0x00007f75704bd019: mov    %r12,0x18(%rsp)
  0x00007f75704bd01e: mov    %r13,0x10(%rsp)
  0x00007f75704bd023: mov    %r14,0x8(%rsp)
  0x00007f75704bd028: mov    %r15,(%rsp)
  0x00007f75704bd02c: movabs $0x7f758592f470,%rdi
  0x00007f75704bd036: movabs $0x7f75704bcfd6,%rsi
  0x00007f75704bd040: mov    %rsp,%rdx
  0x00007f75704bd043: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd047: callq  0x00007f75853729fa
  0x00007f75704bd04c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bd04d: mov    %rsp,%r11
  0x00007f75704bd050: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd054: push   %rax
  0x00007f75704bd055: mov    %r11,%rax
  0x00007f75704bd058: mov    0x50(%rbx),%r11
  0x00007f75704bd05c: mov    0x30(%rax),%rsi
  0x00007f75704bd060: mov    0x28(%rax),%rdx
  0x00007f75704bd064: mov    0x20(%rax),%rcx
  0x00007f75704bd068: mov    0x18(%rax),%r8
  0x00007f75704bd06c: mov    0x10(%rax),%r9
  0x00007f75704bd070: mov    0x8(%rax),%rdi
  0x00007f75704bd074: mov    %rbx,0x258(%r15)
  0x00007f75704bd07b: mov    %rbx,%rax
  0x00007f75704bd07e: jmpq   *%r11
  0x00007f75704bd081: mov    0x8(%rsi),%ebx
  0x00007f75704bd084: shl    $0x3,%rbx
  0x00007f75704bd088: cmp    0x10(%rax),%rbx
  0x00007f75704bd08c: mov    0x8(%rax),%rbx
  0x00007f75704bd090: je     0x00007f75704bd09b
  0x00007f75704bd096: jmpq   0x00007f757046ec40
  0x00007f75704bd09b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bd0a3: je     0x00007f75704bd19e
  0x00007f75704bd0a9: jmpq   0x00007f757046ec40
  0x00007f75704bd0ae: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bd0b6: je     0x00007f75704bd19e
  0x00007f75704bd0bc: mov    %rsp,%r13
  0x00007f75704bd0bf: mov    (%rsp),%rax
  0x00007f75704bd0c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd0c7: pushfq 
  0x00007f75704bd0c8: sub    $0x8,%rsp
  0x00007f75704bd0cc: mov    %rsp,-0x28(%rsp)
  0x00007f75704bd0d1: sub    $0x80,%rsp
  0x00007f75704bd0d8: mov    %rax,0x78(%rsp)
  0x00007f75704bd0dd: mov    %rcx,0x70(%rsp)
  0x00007f75704bd0e2: mov    %rdx,0x68(%rsp)
  0x00007f75704bd0e7: mov    %rbx,0x60(%rsp)
  0x00007f75704bd0ec: mov    %rbp,0x50(%rsp)
  0x00007f75704bd0f1: mov    %rsi,0x48(%rsp)
  0x00007f75704bd0f6: mov    %rdi,0x40(%rsp)
  0x00007f75704bd0fb: mov    %r8,0x38(%rsp)
  0x00007f75704bd100: mov    %r9,0x30(%rsp)
  0x00007f75704bd105: mov    %r10,0x28(%rsp)
  0x00007f75704bd10a: mov    %r11,0x20(%rsp)
  0x00007f75704bd10f: mov    %r12,0x18(%rsp)
  0x00007f75704bd114: mov    %r13,0x10(%rsp)
  0x00007f75704bd119: mov    %r14,0x8(%rsp)
  0x00007f75704bd11e: mov    %r15,(%rsp)
  0x00007f75704bd122: sub    $0x200,%rsp
  0x00007f75704bd129: fxsave64 (%rsp)
  0x00007f75704bd12e: mov    %rbx,%rdi
  0x00007f75704bd131: mov    %rax,%rsi
  0x00007f75704bd134: callq  0x00007f7585522bca
  0x00007f75704bd139: fxrstor64 (%rsp)
  0x00007f75704bd13e: add    $0x200,%rsp
  0x00007f75704bd145: mov    (%rsp),%r15
  0x00007f75704bd149: mov    0x8(%rsp),%r14
  0x00007f75704bd14e: mov    0x10(%rsp),%r13
  0x00007f75704bd153: mov    0x18(%rsp),%r12
  0x00007f75704bd158: mov    0x20(%rsp),%r11
  0x00007f75704bd15d: mov    0x28(%rsp),%r10
  0x00007f75704bd162: mov    0x30(%rsp),%r9
  0x00007f75704bd167: mov    0x38(%rsp),%r8
  0x00007f75704bd16c: mov    0x40(%rsp),%rdi
  0x00007f75704bd171: mov    0x48(%rsp),%rsi
  0x00007f75704bd176: mov    0x50(%rsp),%rbp
  0x00007f75704bd17b: mov    0x60(%rsp),%rbx
  0x00007f75704bd180: mov    0x68(%rsp),%rdx
  0x00007f75704bd185: mov    0x70(%rsp),%rcx
  0x00007f75704bd18a: mov    0x78(%rsp),%rax
  0x00007f75704bd18f: add    $0x80,%rsp
  0x00007f75704bd196: add    $0x8,%rsp
  0x00007f75704bd19a: popfq  
  0x00007f75704bd19b: mov    %r13,%rsp
  0x00007f75704bd19e: pop    %rax
  0x00007f75704bd19f: mov    %rsp,%r13
  0x00007f75704bd1a2: sub    $0x40,%rsp
  0x00007f75704bd1a6: mov    %rax,(%rsp)
  0x00007f75704bd1aa: mov    %rsi,0x30(%rsp)
  0x00007f75704bd1af: mov    %rdx,0x28(%rsp)
  0x00007f75704bd1b4: mov    %rcx,0x20(%rsp)
  0x00007f75704bd1b9: mov    %r8,0x18(%rsp)
  0x00007f75704bd1be: mov    %r9,0x10(%rsp)
  0x00007f75704bd1c3: mov    %rdi,0x8(%rsp)
  0x00007f75704bd1c8: mov    0x40(%rbx),%rcx
  0x00007f75704bd1cc: jmpq   *%rcx

AHE@0x00007f75800e9ea0: 0xbbbab000 i2c: 0x00007f75704bd2a0 c2i: 0x00007f75704bd3ea c2iUV: 0x00007f75704bd3bd
i2c argument handler #27 for: receiver (Ljava/lang/String;[Ljava/lang/Class;ZLjava/lang/Class$MethodArray;)Ljava/lang/reflect/Method; (613 bytes generated)
c2i argument handler starts at 0x7f75704bd3ea
  0x00007f75704bd2a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bd2a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bd2ae: cmp    %r11,%rax
  0x00007f75704bd2b1: jbe    0x00007f75704bd2ca
  0x00007f75704bd2b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bd2c1: cmp    %r11,%rax
  0x00007f75704bd2c4: jb     0x00007f75704bd38d
  0x00007f75704bd2ca: movabs $0x7f7570369420,%r11
  0x00007f75704bd2d4: cmp    %r11,%rax
  0x00007f75704bd2d7: jbe    0x00007f75704bd2f0
  0x00007f75704bd2dd: movabs $0x7f757036de58,%r11
  0x00007f75704bd2e7: cmp    %r11,%rax
  0x00007f75704bd2ea: jb     0x00007f75704bd38d
  0x00007f75704bd2f0: movabs $0x7f75704a9820,%r11
  0x00007f75704bd2fa: cmp    %r11,%rax
  0x00007f75704bd2fd: jbe    0x00007f75704bd316
  0x00007f75704bd303: movabs $0x7f75704af5e0,%r11
  0x00007f75704bd30d: cmp    %r11,%rax
  0x00007f75704bd310: jb     0x00007f75704bd38d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bd316: mov    %rsp,-0x28(%rsp)
  0x00007f75704bd31b: sub    $0x80,%rsp
  0x00007f75704bd322: mov    %rax,0x78(%rsp)
  0x00007f75704bd327: mov    %rcx,0x70(%rsp)
  0x00007f75704bd32c: mov    %rdx,0x68(%rsp)
  0x00007f75704bd331: mov    %rbx,0x60(%rsp)
  0x00007f75704bd336: mov    %rbp,0x50(%rsp)
  0x00007f75704bd33b: mov    %rsi,0x48(%rsp)
  0x00007f75704bd340: mov    %rdi,0x40(%rsp)
  0x00007f75704bd345: mov    %r8,0x38(%rsp)
  0x00007f75704bd34a: mov    %r9,0x30(%rsp)
  0x00007f75704bd34f: mov    %r10,0x28(%rsp)
  0x00007f75704bd354: mov    %r11,0x20(%rsp)
  0x00007f75704bd359: mov    %r12,0x18(%rsp)
  0x00007f75704bd35e: mov    %r13,0x10(%rsp)
  0x00007f75704bd363: mov    %r14,0x8(%rsp)
  0x00007f75704bd368: mov    %r15,(%rsp)
  0x00007f75704bd36c: movabs $0x7f758592f470,%rdi
  0x00007f75704bd376: movabs $0x7f75704bd316,%rsi
  0x00007f75704bd380: mov    %rsp,%rdx
  0x00007f75704bd383: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd387: callq  0x00007f75853729fa
  0x00007f75704bd38c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bd38d: mov    %rsp,%r11
  0x00007f75704bd390: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd394: push   %rax
  0x00007f75704bd395: mov    %r11,%rax
  0x00007f75704bd398: mov    0x50(%rbx),%r11
  0x00007f75704bd39c: mov    0x28(%rax),%rsi
  0x00007f75704bd3a0: mov    0x20(%rax),%rdx
  0x00007f75704bd3a4: mov    0x18(%rax),%rcx
  0x00007f75704bd3a8: mov    0x10(%rax),%r8d
  0x00007f75704bd3ac: mov    0x8(%rax),%r9
  0x00007f75704bd3b0: mov    %rbx,0x258(%r15)
  0x00007f75704bd3b7: mov    %rbx,%rax
  0x00007f75704bd3ba: jmpq   *%r11
  0x00007f75704bd3bd: mov    0x8(%rsi),%ebx
  0x00007f75704bd3c0: shl    $0x3,%rbx
  0x00007f75704bd3c4: cmp    0x10(%rax),%rbx
  0x00007f75704bd3c8: mov    0x8(%rax),%rbx
  0x00007f75704bd3cc: je     0x00007f75704bd3d7
  0x00007f75704bd3d2: jmpq   0x00007f757046ec40
  0x00007f75704bd3d7: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bd3df: je     0x00007f75704bd4da
  0x00007f75704bd3e5: jmpq   0x00007f757046ec40
  0x00007f75704bd3ea: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bd3f2: je     0x00007f75704bd4da
  0x00007f75704bd3f8: mov    %rsp,%r13
  0x00007f75704bd3fb: mov    (%rsp),%rax
  0x00007f75704bd3ff: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd403: pushfq 
  0x00007f75704bd404: sub    $0x8,%rsp
  0x00007f75704bd408: mov    %rsp,-0x28(%rsp)
  0x00007f75704bd40d: sub    $0x80,%rsp
  0x00007f75704bd414: mov    %rax,0x78(%rsp)
  0x00007f75704bd419: mov    %rcx,0x70(%rsp)
  0x00007f75704bd41e: mov    %rdx,0x68(%rsp)
  0x00007f75704bd423: mov    %rbx,0x60(%rsp)
  0x00007f75704bd428: mov    %rbp,0x50(%rsp)
  0x00007f75704bd42d: mov    %rsi,0x48(%rsp)
  0x00007f75704bd432: mov    %rdi,0x40(%rsp)
  0x00007f75704bd437: mov    %r8,0x38(%rsp)
  0x00007f75704bd43c: mov    %r9,0x30(%rsp)
  0x00007f75704bd441: mov    %r10,0x28(%rsp)
  0x00007f75704bd446: mov    %r11,0x20(%rsp)
  0x00007f75704bd44b: mov    %r12,0x18(%rsp)
  0x00007f75704bd450: mov    %r13,0x10(%rsp)
  0x00007f75704bd455: mov    %r14,0x8(%rsp)
  0x00007f75704bd45a: mov    %r15,(%rsp)
  0x00007f75704bd45e: sub    $0x200,%rsp
  0x00007f75704bd465: fxsave64 (%rsp)
  0x00007f75704bd46a: mov    %rbx,%rdi
  0x00007f75704bd46d: mov    %rax,%rsi
  0x00007f75704bd470: callq  0x00007f7585522bca
  0x00007f75704bd475: fxrstor64 (%rsp)
  0x00007f75704bd47a: add    $0x200,%rsp
  0x00007f75704bd481: mov    (%rsp),%r15
  0x00007f75704bd485: mov    0x8(%rsp),%r14
  0x00007f75704bd48a: mov    0x10(%rsp),%r13
  0x00007f75704bd48f: mov    0x18(%rsp),%r12
  0x00007f75704bd494: mov    0x20(%rsp),%r11
  0x00007f75704bd499: mov    0x28(%rsp),%r10
  0x00007f75704bd49e: mov    0x30(%rsp),%r9
  0x00007f75704bd4a3: mov    0x38(%rsp),%r8
  0x00007f75704bd4a8: mov    0x40(%rsp),%rdi
  0x00007f75704bd4ad: mov    0x48(%rsp),%rsi
  0x00007f75704bd4b2: mov    0x50(%rsp),%rbp
  0x00007f75704bd4b7: mov    0x60(%rsp),%rbx
  0x00007f75704bd4bc: mov    0x68(%rsp),%rdx
  0x00007f75704bd4c1: mov    0x70(%rsp),%rcx
  0x00007f75704bd4c6: mov    0x78(%rsp),%rax
  0x00007f75704bd4cb: add    $0x80,%rsp
  0x00007f75704bd4d2: add    $0x8,%rsp
  0x00007f75704bd4d6: popfq  
  0x00007f75704bd4d7: mov    %r13,%rsp
  0x00007f75704bd4da: pop    %rax
  0x00007f75704bd4db: mov    %rsp,%r13
  0x00007f75704bd4de: sub    $0x30,%rsp
  0x00007f75704bd4e2: mov    %rax,(%rsp)
  0x00007f75704bd4e6: mov    %rsi,0x28(%rsp)
  0x00007f75704bd4eb: mov    %rdx,0x20(%rsp)
  0x00007f75704bd4f0: mov    %rcx,0x18(%rsp)
  0x00007f75704bd4f5: mov    %r8d,0x10(%rsp)
  0x00007f75704bd4fa: mov    %r9,0x8(%rsp)
  0x00007f75704bd4ff: mov    0x40(%rbx),%rcx
  0x00007f75704bd503: jmpq   *%rcx

AHE@0x00007f75800e9ee8: 0xbaba0000 i2c: 0x00007f75704bd5e0 c2i: 0x00007f75704bd725 c2iUV: 0x00007f75704bd6f8
i2c argument handler #28 for: receiver (ILjava/lang/Class;Z)V (602 bytes generated)
c2i argument handler starts at 0x7f75704bd725
  0x00007f75704bd5e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bd5e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bd5ee: cmp    %r11,%rax
  0x00007f75704bd5f1: jbe    0x00007f75704bd60a
  0x00007f75704bd5f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bd601: cmp    %r11,%rax
  0x00007f75704bd604: jb     0x00007f75704bd6cd
  0x00007f75704bd60a: movabs $0x7f7570369420,%r11
  0x00007f75704bd614: cmp    %r11,%rax
  0x00007f75704bd617: jbe    0x00007f75704bd630
  0x00007f75704bd61d: movabs $0x7f757036de58,%r11
  0x00007f75704bd627: cmp    %r11,%rax
  0x00007f75704bd62a: jb     0x00007f75704bd6cd
  0x00007f75704bd630: movabs $0x7f75704a9820,%r11
  0x00007f75704bd63a: cmp    %r11,%rax
  0x00007f75704bd63d: jbe    0x00007f75704bd656
  0x00007f75704bd643: movabs $0x7f75704af5e0,%r11
  0x00007f75704bd64d: cmp    %r11,%rax
  0x00007f75704bd650: jb     0x00007f75704bd6cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bd656: mov    %rsp,-0x28(%rsp)
  0x00007f75704bd65b: sub    $0x80,%rsp
  0x00007f75704bd662: mov    %rax,0x78(%rsp)
  0x00007f75704bd667: mov    %rcx,0x70(%rsp)
  0x00007f75704bd66c: mov    %rdx,0x68(%rsp)
  0x00007f75704bd671: mov    %rbx,0x60(%rsp)
  0x00007f75704bd676: mov    %rbp,0x50(%rsp)
  0x00007f75704bd67b: mov    %rsi,0x48(%rsp)
  0x00007f75704bd680: mov    %rdi,0x40(%rsp)
  0x00007f75704bd685: mov    %r8,0x38(%rsp)
  0x00007f75704bd68a: mov    %r9,0x30(%rsp)
  0x00007f75704bd68f: mov    %r10,0x28(%rsp)
  0x00007f75704bd694: mov    %r11,0x20(%rsp)
  0x00007f75704bd699: mov    %r12,0x18(%rsp)
  0x00007f75704bd69e: mov    %r13,0x10(%rsp)
  0x00007f75704bd6a3: mov    %r14,0x8(%rsp)
  0x00007f75704bd6a8: mov    %r15,(%rsp)
  0x00007f75704bd6ac: movabs $0x7f758592f470,%rdi
  0x00007f75704bd6b6: movabs $0x7f75704bd656,%rsi
  0x00007f75704bd6c0: mov    %rsp,%rdx
  0x00007f75704bd6c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd6c7: callq  0x00007f75853729fa
  0x00007f75704bd6cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704bd6cd: mov    %rsp,%r11
  0x00007f75704bd6d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd6d4: push   %rax
  0x00007f75704bd6d5: mov    %r11,%rax
  0x00007f75704bd6d8: mov    0x50(%rbx),%r11
  0x00007f75704bd6dc: mov    0x20(%rax),%rsi
  0x00007f75704bd6e0: mov    0x18(%rax),%edx
  0x00007f75704bd6e3: mov    0x10(%rax),%rcx
  0x00007f75704bd6e7: mov    0x8(%rax),%r8d
  0x00007f75704bd6eb: mov    %rbx,0x258(%r15)
  0x00007f75704bd6f2: mov    %rbx,%rax
  0x00007f75704bd6f5: jmpq   *%r11
  0x00007f75704bd6f8: mov    0x8(%rsi),%ebx
  0x00007f75704bd6fb: shl    $0x3,%rbx
  0x00007f75704bd6ff: cmp    0x10(%rax),%rbx
  0x00007f75704bd703: mov    0x8(%rax),%rbx
  0x00007f75704bd707: je     0x00007f75704bd712
  0x00007f75704bd70d: jmpq   0x00007f757046ec40
  0x00007f75704bd712: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bd71a: je     0x00007f75704bd815
  0x00007f75704bd720: jmpq   0x00007f757046ec40
  0x00007f75704bd725: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bd72d: je     0x00007f75704bd815
  0x00007f75704bd733: mov    %rsp,%r13
  0x00007f75704bd736: mov    (%rsp),%rax
  0x00007f75704bd73a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd73e: pushfq 
  0x00007f75704bd73f: sub    $0x8,%rsp
  0x00007f75704bd743: mov    %rsp,-0x28(%rsp)
  0x00007f75704bd748: sub    $0x80,%rsp
  0x00007f75704bd74f: mov    %rax,0x78(%rsp)
  0x00007f75704bd754: mov    %rcx,0x70(%rsp)
  0x00007f75704bd759: mov    %rdx,0x68(%rsp)
  0x00007f75704bd75e: mov    %rbx,0x60(%rsp)
  0x00007f75704bd763: mov    %rbp,0x50(%rsp)
  0x00007f75704bd768: mov    %rsi,0x48(%rsp)
  0x00007f75704bd76d: mov    %rdi,0x40(%rsp)
  0x00007f75704bd772: mov    %r8,0x38(%rsp)
  0x00007f75704bd777: mov    %r9,0x30(%rsp)
  0x00007f75704bd77c: mov    %r10,0x28(%rsp)
  0x00007f75704bd781: mov    %r11,0x20(%rsp)
  0x00007f75704bd786: mov    %r12,0x18(%rsp)
  0x00007f75704bd78b: mov    %r13,0x10(%rsp)
  0x00007f75704bd790: mov    %r14,0x8(%rsp)
  0x00007f75704bd795: mov    %r15,(%rsp)
  0x00007f75704bd799: sub    $0x200,%rsp
  0x00007f75704bd7a0: fxsave64 (%rsp)
  0x00007f75704bd7a5: mov    %rbx,%rdi
  0x00007f75704bd7a8: mov    %rax,%rsi
  0x00007f75704bd7ab: callq  0x00007f7585522bca
  0x00007f75704bd7b0: fxrstor64 (%rsp)
  0x00007f75704bd7b5: add    $0x200,%rsp
  0x00007f75704bd7bc: mov    (%rsp),%r15
  0x00007f75704bd7c0: mov    0x8(%rsp),%r14
  0x00007f75704bd7c5: mov    0x10(%rsp),%r13
  0x00007f75704bd7ca: mov    0x18(%rsp),%r12
  0x00007f75704bd7cf: mov    0x20(%rsp),%r11
  0x00007f75704bd7d4: mov    0x28(%rsp),%r10
  0x00007f75704bd7d9: mov    0x30(%rsp),%r9
  0x00007f75704bd7de: mov    0x38(%rsp),%r8
  0x00007f75704bd7e3: mov    0x40(%rsp),%rdi
  0x00007f75704bd7e8: mov    0x48(%rsp),%rsi
  0x00007f75704bd7ed: mov    0x50(%rsp),%rbp
  0x00007f75704bd7f2: mov    0x60(%rsp),%rbx
  0x00007f75704bd7f7: mov    0x68(%rsp),%rdx
  0x00007f75704bd7fc: mov    0x70(%rsp),%rcx
  0x00007f75704bd801: mov    0x78(%rsp),%rax
  0x00007f75704bd806: add    $0x80,%rsp
  0x00007f75704bd80d: add    $0x8,%rsp
  0x00007f75704bd811: popfq  
  0x00007f75704bd812: mov    %r13,%rsp
  0x00007f75704bd815: pop    %rax
  0x00007f75704bd816: mov    %rsp,%r13
  0x00007f75704bd819: sub    $0x30,%rsp
  0x00007f75704bd81d: mov    %rax,(%rsp)
  0x00007f75704bd821: mov    %rsi,0x20(%rsp)
  0x00007f75704bd826: mov    %edx,0x18(%rsp)
  0x00007f75704bd82a: mov    %rcx,0x10(%rsp)
  0x00007f75704bd82f: mov    %r8d,0x8(%rsp)
  0x00007f75704bd834: mov    0x40(%rbx),%rcx
  0x00007f75704bd838: jmpq   *%rcx

AHE@0x00007f75800e9f30: 0xbabb0000 i2c: 0x00007f75704bd8e0 c2i: 0x00007f75704bda25 c2iUV: 0x00007f75704bd9f8
i2c argument handler #29 for: static (Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class; (602 bytes generated)
c2i argument handler starts at 0x7f75704bda25
  0x00007f75704bd8e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bd8e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bd8ee: cmp    %r11,%rax
  0x00007f75704bd8f1: jbe    0x00007f75704bd90a
  0x00007f75704bd8f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bd901: cmp    %r11,%rax
  0x00007f75704bd904: jb     0x00007f75704bd9cd
  0x00007f75704bd90a: movabs $0x7f7570369420,%r11
  0x00007f75704bd914: cmp    %r11,%rax
  0x00007f75704bd917: jbe    0x00007f75704bd930
  0x00007f75704bd91d: movabs $0x7f757036de58,%r11
  0x00007f75704bd927: cmp    %r11,%rax
  0x00007f75704bd92a: jb     0x00007f75704bd9cd
  0x00007f75704bd930: movabs $0x7f75704a9820,%r11
  0x00007f75704bd93a: cmp    %r11,%rax
  0x00007f75704bd93d: jbe    0x00007f75704bd956
  0x00007f75704bd943: movabs $0x7f75704af5e0,%r11
  0x00007f75704bd94d: cmp    %r11,%rax
  0x00007f75704bd950: jb     0x00007f75704bd9cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bd956: mov    %rsp,-0x28(%rsp)
  0x00007f75704bd95b: sub    $0x80,%rsp
  0x00007f75704bd962: mov    %rax,0x78(%rsp)
  0x00007f75704bd967: mov    %rcx,0x70(%rsp)
  0x00007f75704bd96c: mov    %rdx,0x68(%rsp)
  0x00007f75704bd971: mov    %rbx,0x60(%rsp)
  0x00007f75704bd976: mov    %rbp,0x50(%rsp)
  0x00007f75704bd97b: mov    %rsi,0x48(%rsp)
  0x00007f75704bd980: mov    %rdi,0x40(%rsp)
  0x00007f75704bd985: mov    %r8,0x38(%rsp)
  0x00007f75704bd98a: mov    %r9,0x30(%rsp)
  0x00007f75704bd98f: mov    %r10,0x28(%rsp)
  0x00007f75704bd994: mov    %r11,0x20(%rsp)
  0x00007f75704bd999: mov    %r12,0x18(%rsp)
  0x00007f75704bd99e: mov    %r13,0x10(%rsp)
  0x00007f75704bd9a3: mov    %r14,0x8(%rsp)
  0x00007f75704bd9a8: mov    %r15,(%rsp)
  0x00007f75704bd9ac: movabs $0x7f758592f470,%rdi
  0x00007f75704bd9b6: movabs $0x7f75704bd956,%rsi
  0x00007f75704bd9c0: mov    %rsp,%rdx
  0x00007f75704bd9c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd9c7: callq  0x00007f75853729fa
  0x00007f75704bd9cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704bd9cd: mov    %rsp,%r11
  0x00007f75704bd9d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bd9d4: push   %rax
  0x00007f75704bd9d5: mov    %r11,%rax
  0x00007f75704bd9d8: mov    0x50(%rbx),%r11
  0x00007f75704bd9dc: mov    0x20(%rax),%rsi
  0x00007f75704bd9e0: mov    0x18(%rax),%edx
  0x00007f75704bd9e3: mov    0x10(%rax),%rcx
  0x00007f75704bd9e7: mov    0x8(%rax),%r8
  0x00007f75704bd9eb: mov    %rbx,0x258(%r15)
  0x00007f75704bd9f2: mov    %rbx,%rax
  0x00007f75704bd9f5: jmpq   *%r11
  0x00007f75704bd9f8: mov    0x8(%rsi),%ebx
  0x00007f75704bd9fb: shl    $0x3,%rbx
  0x00007f75704bd9ff: cmp    0x10(%rax),%rbx
  0x00007f75704bda03: mov    0x8(%rax),%rbx
  0x00007f75704bda07: je     0x00007f75704bda12
  0x00007f75704bda0d: jmpq   0x00007f757046ec40
  0x00007f75704bda12: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bda1a: je     0x00007f75704bdb15
  0x00007f75704bda20: jmpq   0x00007f757046ec40
  0x00007f75704bda25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bda2d: je     0x00007f75704bdb15
  0x00007f75704bda33: mov    %rsp,%r13
  0x00007f75704bda36: mov    (%rsp),%rax
  0x00007f75704bda3a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bda3e: pushfq 
  0x00007f75704bda3f: sub    $0x8,%rsp
  0x00007f75704bda43: mov    %rsp,-0x28(%rsp)
  0x00007f75704bda48: sub    $0x80,%rsp
  0x00007f75704bda4f: mov    %rax,0x78(%rsp)
  0x00007f75704bda54: mov    %rcx,0x70(%rsp)
  0x00007f75704bda59: mov    %rdx,0x68(%rsp)
  0x00007f75704bda5e: mov    %rbx,0x60(%rsp)
  0x00007f75704bda63: mov    %rbp,0x50(%rsp)
  0x00007f75704bda68: mov    %rsi,0x48(%rsp)
  0x00007f75704bda6d: mov    %rdi,0x40(%rsp)
  0x00007f75704bda72: mov    %r8,0x38(%rsp)
  0x00007f75704bda77: mov    %r9,0x30(%rsp)
  0x00007f75704bda7c: mov    %r10,0x28(%rsp)
  0x00007f75704bda81: mov    %r11,0x20(%rsp)
  0x00007f75704bda86: mov    %r12,0x18(%rsp)
  0x00007f75704bda8b: mov    %r13,0x10(%rsp)
  0x00007f75704bda90: mov    %r14,0x8(%rsp)
  0x00007f75704bda95: mov    %r15,(%rsp)
  0x00007f75704bda99: sub    $0x200,%rsp
  0x00007f75704bdaa0: fxsave64 (%rsp)
  0x00007f75704bdaa5: mov    %rbx,%rdi
  0x00007f75704bdaa8: mov    %rax,%rsi
  0x00007f75704bdaab: callq  0x00007f7585522bca
  0x00007f75704bdab0: fxrstor64 (%rsp)
  0x00007f75704bdab5: add    $0x200,%rsp
  0x00007f75704bdabc: mov    (%rsp),%r15
  0x00007f75704bdac0: mov    0x8(%rsp),%r14
  0x00007f75704bdac5: mov    0x10(%rsp),%r13
  0x00007f75704bdaca: mov    0x18(%rsp),%r12
  0x00007f75704bdacf: mov    0x20(%rsp),%r11
  0x00007f75704bdad4: mov    0x28(%rsp),%r10
  0x00007f75704bdad9: mov    0x30(%rsp),%r9
  0x00007f75704bdade: mov    0x38(%rsp),%r8
  0x00007f75704bdae3: mov    0x40(%rsp),%rdi
  0x00007f75704bdae8: mov    0x48(%rsp),%rsi
  0x00007f75704bdaed: mov    0x50(%rsp),%rbp
  0x00007f75704bdaf2: mov    0x60(%rsp),%rbx
  0x00007f75704bdaf7: mov    0x68(%rsp),%rdx
  0x00007f75704bdafc: mov    0x70(%rsp),%rcx
  0x00007f75704bdb01: mov    0x78(%rsp),%rax
  0x00007f75704bdb06: add    $0x80,%rsp
  0x00007f75704bdb0d: add    $0x8,%rsp
  0x00007f75704bdb11: popfq  
  0x00007f75704bdb12: mov    %r13,%rsp
  0x00007f75704bdb15: pop    %rax
  0x00007f75704bdb16: mov    %rsp,%r13
  0x00007f75704bdb19: sub    $0x30,%rsp
  0x00007f75704bdb1d: mov    %rax,(%rsp)
  0x00007f75704bdb21: mov    %rsi,0x20(%rsp)
  0x00007f75704bdb26: mov    %edx,0x18(%rsp)
  0x00007f75704bdb2a: mov    %rcx,0x10(%rsp)
  0x00007f75704bdb2f: mov    %r8,0x8(%rsp)
  0x00007f75704bdb34: mov    0x40(%rbx),%rcx
  0x00007f75704bdb38: jmpq   *%rcx

AHE@0x00007f75800e9f78: 0xbab00000 i2c: 0x00007f75704bdbe0 c2i: 0x00007f75704bdd21 c2iUV: 0x00007f75704bdcf4
i2c argument handler #30 for: static (Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; (593 bytes generated)
c2i argument handler starts at 0x7f75704bdd21
  0x00007f75704bdbe0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bdbe4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bdbee: cmp    %r11,%rax
  0x00007f75704bdbf1: jbe    0x00007f75704bdc0a
  0x00007f75704bdbf7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bdc01: cmp    %r11,%rax
  0x00007f75704bdc04: jb     0x00007f75704bdccd
  0x00007f75704bdc0a: movabs $0x7f7570369420,%r11
  0x00007f75704bdc14: cmp    %r11,%rax
  0x00007f75704bdc17: jbe    0x00007f75704bdc30
  0x00007f75704bdc1d: movabs $0x7f757036de58,%r11
  0x00007f75704bdc27: cmp    %r11,%rax
  0x00007f75704bdc2a: jb     0x00007f75704bdccd
  0x00007f75704bdc30: movabs $0x7f75704a9820,%r11
  0x00007f75704bdc3a: cmp    %r11,%rax
  0x00007f75704bdc3d: jbe    0x00007f75704bdc56
  0x00007f75704bdc43: movabs $0x7f75704af5e0,%r11
  0x00007f75704bdc4d: cmp    %r11,%rax
  0x00007f75704bdc50: jb     0x00007f75704bdccd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bdc56: mov    %rsp,-0x28(%rsp)
  0x00007f75704bdc5b: sub    $0x80,%rsp
  0x00007f75704bdc62: mov    %rax,0x78(%rsp)
  0x00007f75704bdc67: mov    %rcx,0x70(%rsp)
  0x00007f75704bdc6c: mov    %rdx,0x68(%rsp)
  0x00007f75704bdc71: mov    %rbx,0x60(%rsp)
  0x00007f75704bdc76: mov    %rbp,0x50(%rsp)
  0x00007f75704bdc7b: mov    %rsi,0x48(%rsp)
  0x00007f75704bdc80: mov    %rdi,0x40(%rsp)
  0x00007f75704bdc85: mov    %r8,0x38(%rsp)
  0x00007f75704bdc8a: mov    %r9,0x30(%rsp)
  0x00007f75704bdc8f: mov    %r10,0x28(%rsp)
  0x00007f75704bdc94: mov    %r11,0x20(%rsp)
  0x00007f75704bdc99: mov    %r12,0x18(%rsp)
  0x00007f75704bdc9e: mov    %r13,0x10(%rsp)
  0x00007f75704bdca3: mov    %r14,0x8(%rsp)
  0x00007f75704bdca8: mov    %r15,(%rsp)
  0x00007f75704bdcac: movabs $0x7f758592f470,%rdi
  0x00007f75704bdcb6: movabs $0x7f75704bdc56,%rsi
  0x00007f75704bdcc0: mov    %rsp,%rdx
  0x00007f75704bdcc3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bdcc7: callq  0x00007f75853729fa
  0x00007f75704bdccc: hlt    
  ;; } verify_i2ce 
  0x00007f75704bdccd: mov    %rsp,%r11
  0x00007f75704bdcd0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bdcd4: push   %rax
  0x00007f75704bdcd5: mov    %r11,%rax
  0x00007f75704bdcd8: mov    0x50(%rbx),%r11
  0x00007f75704bdcdc: mov    0x18(%rax),%rsi
  0x00007f75704bdce0: mov    0x10(%rax),%edx
  0x00007f75704bdce3: mov    0x8(%rax),%rcx
  0x00007f75704bdce7: mov    %rbx,0x258(%r15)
  0x00007f75704bdcee: mov    %rbx,%rax
  0x00007f75704bdcf1: jmpq   *%r11
  0x00007f75704bdcf4: mov    0x8(%rsi),%ebx
  0x00007f75704bdcf7: shl    $0x3,%rbx
  0x00007f75704bdcfb: cmp    0x10(%rax),%rbx
  0x00007f75704bdcff: mov    0x8(%rax),%rbx
  0x00007f75704bdd03: je     0x00007f75704bdd0e
  0x00007f75704bdd09: jmpq   0x00007f757046ec40
  0x00007f75704bdd0e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bdd16: je     0x00007f75704bde11
  0x00007f75704bdd1c: jmpq   0x00007f757046ec40
  0x00007f75704bdd21: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bdd29: je     0x00007f75704bde11
  0x00007f75704bdd2f: mov    %rsp,%r13
  0x00007f75704bdd32: mov    (%rsp),%rax
  0x00007f75704bdd36: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bdd3a: pushfq 
  0x00007f75704bdd3b: sub    $0x8,%rsp
  0x00007f75704bdd3f: mov    %rsp,-0x28(%rsp)
  0x00007f75704bdd44: sub    $0x80,%rsp
  0x00007f75704bdd4b: mov    %rax,0x78(%rsp)
  0x00007f75704bdd50: mov    %rcx,0x70(%rsp)
  0x00007f75704bdd55: mov    %rdx,0x68(%rsp)
  0x00007f75704bdd5a: mov    %rbx,0x60(%rsp)
  0x00007f75704bdd5f: mov    %rbp,0x50(%rsp)
  0x00007f75704bdd64: mov    %rsi,0x48(%rsp)
  0x00007f75704bdd69: mov    %rdi,0x40(%rsp)
  0x00007f75704bdd6e: mov    %r8,0x38(%rsp)
  0x00007f75704bdd73: mov    %r9,0x30(%rsp)
  0x00007f75704bdd78: mov    %r10,0x28(%rsp)
  0x00007f75704bdd7d: mov    %r11,0x20(%rsp)
  0x00007f75704bdd82: mov    %r12,0x18(%rsp)
  0x00007f75704bdd87: mov    %r13,0x10(%rsp)
  0x00007f75704bdd8c: mov    %r14,0x8(%rsp)
  0x00007f75704bdd91: mov    %r15,(%rsp)
  0x00007f75704bdd95: sub    $0x200,%rsp
  0x00007f75704bdd9c: fxsave64 (%rsp)
  0x00007f75704bdda1: mov    %rbx,%rdi
  0x00007f75704bdda4: mov    %rax,%rsi
  0x00007f75704bdda7: callq  0x00007f7585522bca
  0x00007f75704bddac: fxrstor64 (%rsp)
  0x00007f75704bddb1: add    $0x200,%rsp
  0x00007f75704bddb8: mov    (%rsp),%r15
  0x00007f75704bddbc: mov    0x8(%rsp),%r14
  0x00007f75704bddc1: mov    0x10(%rsp),%r13
  0x00007f75704bddc6: mov    0x18(%rsp),%r12
  0x00007f75704bddcb: mov    0x20(%rsp),%r11
  0x00007f75704bddd0: mov    0x28(%rsp),%r10
  0x00007f75704bddd5: mov    0x30(%rsp),%r9
  0x00007f75704bddda: mov    0x38(%rsp),%r8
  0x00007f75704bdddf: mov    0x40(%rsp),%rdi
  0x00007f75704bdde4: mov    0x48(%rsp),%rsi
  0x00007f75704bdde9: mov    0x50(%rsp),%rbp
  0x00007f75704bddee: mov    0x60(%rsp),%rbx
  0x00007f75704bddf3: mov    0x68(%rsp),%rdx
  0x00007f75704bddf8: mov    0x70(%rsp),%rcx
  0x00007f75704bddfd: mov    0x78(%rsp),%rax
  0x00007f75704bde02: add    $0x80,%rsp
  0x00007f75704bde09: add    $0x8,%rsp
  0x00007f75704bde0d: popfq  
  0x00007f75704bde0e: mov    %r13,%rsp
  0x00007f75704bde11: pop    %rax
  0x00007f75704bde12: mov    %rsp,%r13
  0x00007f75704bde15: sub    $0x20,%rsp
  0x00007f75704bde19: mov    %rax,(%rsp)
  0x00007f75704bde1d: mov    %rsi,0x18(%rsp)
  0x00007f75704bde22: mov    %edx,0x10(%rsp)
  0x00007f75704bde26: mov    %rcx,0x8(%rsp)
  0x00007f75704bde2b: mov    0x40(%rbx),%rcx
  0x00007f75704bde2f: jmpq   *%rcx

AHE@0x00007f75800e9fc0: 0xbbbbab00 i2c: 0x00007f75704bdee0 c2i: 0x00007f75704be02e c2iUV: 0x00007f75704be001
i2c argument handler #31 for: receiver (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;ILjava/lang/Class;)V (622 bytes generated)
c2i argument handler starts at 0x7f75704be02e
  0x00007f75704bdee0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bdee4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bdeee: cmp    %r11,%rax
  0x00007f75704bdef1: jbe    0x00007f75704bdf0a
  0x00007f75704bdef7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bdf01: cmp    %r11,%rax
  0x00007f75704bdf04: jb     0x00007f75704bdfcd
  0x00007f75704bdf0a: movabs $0x7f7570369420,%r11
  0x00007f75704bdf14: cmp    %r11,%rax
  0x00007f75704bdf17: jbe    0x00007f75704bdf30
  0x00007f75704bdf1d: movabs $0x7f757036de58,%r11
  0x00007f75704bdf27: cmp    %r11,%rax
  0x00007f75704bdf2a: jb     0x00007f75704bdfcd
  0x00007f75704bdf30: movabs $0x7f75704a9820,%r11
  0x00007f75704bdf3a: cmp    %r11,%rax
  0x00007f75704bdf3d: jbe    0x00007f75704bdf56
  0x00007f75704bdf43: movabs $0x7f75704af5e0,%r11
  0x00007f75704bdf4d: cmp    %r11,%rax
  0x00007f75704bdf50: jb     0x00007f75704bdfcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bdf56: mov    %rsp,-0x28(%rsp)
  0x00007f75704bdf5b: sub    $0x80,%rsp
  0x00007f75704bdf62: mov    %rax,0x78(%rsp)
  0x00007f75704bdf67: mov    %rcx,0x70(%rsp)
  0x00007f75704bdf6c: mov    %rdx,0x68(%rsp)
  0x00007f75704bdf71: mov    %rbx,0x60(%rsp)
  0x00007f75704bdf76: mov    %rbp,0x50(%rsp)
  0x00007f75704bdf7b: mov    %rsi,0x48(%rsp)
  0x00007f75704bdf80: mov    %rdi,0x40(%rsp)
  0x00007f75704bdf85: mov    %r8,0x38(%rsp)
  0x00007f75704bdf8a: mov    %r9,0x30(%rsp)
  0x00007f75704bdf8f: mov    %r10,0x28(%rsp)
  0x00007f75704bdf94: mov    %r11,0x20(%rsp)
  0x00007f75704bdf99: mov    %r12,0x18(%rsp)
  0x00007f75704bdf9e: mov    %r13,0x10(%rsp)
  0x00007f75704bdfa3: mov    %r14,0x8(%rsp)
  0x00007f75704bdfa8: mov    %r15,(%rsp)
  0x00007f75704bdfac: movabs $0x7f758592f470,%rdi
  0x00007f75704bdfb6: movabs $0x7f75704bdf56,%rsi
  0x00007f75704bdfc0: mov    %rsp,%rdx
  0x00007f75704bdfc3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bdfc7: callq  0x00007f75853729fa
  0x00007f75704bdfcc: hlt    
  ;; } verify_i2ce 
  0x00007f75704bdfcd: mov    %rsp,%r11
  0x00007f75704bdfd0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bdfd4: push   %rax
  0x00007f75704bdfd5: mov    %r11,%rax
  0x00007f75704bdfd8: mov    0x50(%rbx),%r11
  0x00007f75704bdfdc: mov    0x30(%rax),%rsi
  0x00007f75704bdfe0: mov    0x28(%rax),%rdx
  0x00007f75704bdfe4: mov    0x20(%rax),%rcx
  0x00007f75704bdfe8: mov    0x18(%rax),%r8
  0x00007f75704bdfec: mov    0x10(%rax),%r9d
  0x00007f75704bdff0: mov    0x8(%rax),%rdi
  0x00007f75704bdff4: mov    %rbx,0x258(%r15)
  0x00007f75704bdffb: mov    %rbx,%rax
  0x00007f75704bdffe: jmpq   *%r11
  0x00007f75704be001: mov    0x8(%rsi),%ebx
  0x00007f75704be004: shl    $0x3,%rbx
  0x00007f75704be008: cmp    0x10(%rax),%rbx
  0x00007f75704be00c: mov    0x8(%rax),%rbx
  0x00007f75704be010: je     0x00007f75704be01b
  0x00007f75704be016: jmpq   0x00007f757046ec40
  0x00007f75704be01b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704be023: je     0x00007f75704be11e
  0x00007f75704be029: jmpq   0x00007f757046ec40
  0x00007f75704be02e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704be036: je     0x00007f75704be11e
  0x00007f75704be03c: mov    %rsp,%r13
  0x00007f75704be03f: mov    (%rsp),%rax
  0x00007f75704be043: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be047: pushfq 
  0x00007f75704be048: sub    $0x8,%rsp
  0x00007f75704be04c: mov    %rsp,-0x28(%rsp)
  0x00007f75704be051: sub    $0x80,%rsp
  0x00007f75704be058: mov    %rax,0x78(%rsp)
  0x00007f75704be05d: mov    %rcx,0x70(%rsp)
  0x00007f75704be062: mov    %rdx,0x68(%rsp)
  0x00007f75704be067: mov    %rbx,0x60(%rsp)
  0x00007f75704be06c: mov    %rbp,0x50(%rsp)
  0x00007f75704be071: mov    %rsi,0x48(%rsp)
  0x00007f75704be076: mov    %rdi,0x40(%rsp)
  0x00007f75704be07b: mov    %r8,0x38(%rsp)
  0x00007f75704be080: mov    %r9,0x30(%rsp)
  0x00007f75704be085: mov    %r10,0x28(%rsp)
  0x00007f75704be08a: mov    %r11,0x20(%rsp)
  0x00007f75704be08f: mov    %r12,0x18(%rsp)
  0x00007f75704be094: mov    %r13,0x10(%rsp)
  0x00007f75704be099: mov    %r14,0x8(%rsp)
  0x00007f75704be09e: mov    %r15,(%rsp)
  0x00007f75704be0a2: sub    $0x200,%rsp
  0x00007f75704be0a9: fxsave64 (%rsp)
  0x00007f75704be0ae: mov    %rbx,%rdi
  0x00007f75704be0b1: mov    %rax,%rsi
  0x00007f75704be0b4: callq  0x00007f7585522bca
  0x00007f75704be0b9: fxrstor64 (%rsp)
  0x00007f75704be0be: add    $0x200,%rsp
  0x00007f75704be0c5: mov    (%rsp),%r15
  0x00007f75704be0c9: mov    0x8(%rsp),%r14
  0x00007f75704be0ce: mov    0x10(%rsp),%r13
  0x00007f75704be0d3: mov    0x18(%rsp),%r12
  0x00007f75704be0d8: mov    0x20(%rsp),%r11
  0x00007f75704be0dd: mov    0x28(%rsp),%r10
  0x00007f75704be0e2: mov    0x30(%rsp),%r9
  0x00007f75704be0e7: mov    0x38(%rsp),%r8
  0x00007f75704be0ec: mov    0x40(%rsp),%rdi
  0x00007f75704be0f1: mov    0x48(%rsp),%rsi
  0x00007f75704be0f6: mov    0x50(%rsp),%rbp
  0x00007f75704be0fb: mov    0x60(%rsp),%rbx
  0x00007f75704be100: mov    0x68(%rsp),%rdx
  0x00007f75704be105: mov    0x70(%rsp),%rcx
  0x00007f75704be10a: mov    0x78(%rsp),%rax
  0x00007f75704be10f: add    $0x80,%rsp
  0x00007f75704be116: add    $0x8,%rsp
  0x00007f75704be11a: popfq  
  0x00007f75704be11b: mov    %r13,%rsp
  0x00007f75704be11e: pop    %rax
  0x00007f75704be11f: mov    %rsp,%r13
  0x00007f75704be122: sub    $0x40,%rsp
  0x00007f75704be126: mov    %rax,(%rsp)
  0x00007f75704be12a: mov    %rsi,0x30(%rsp)
  0x00007f75704be12f: mov    %rdx,0x28(%rsp)
  0x00007f75704be134: mov    %rcx,0x20(%rsp)
  0x00007f75704be139: mov    %r8,0x18(%rsp)
  0x00007f75704be13e: mov    %r9d,0x10(%rsp)
  0x00007f75704be143: mov    %rdi,0x8(%rsp)
  0x00007f75704be148: mov    0x40(%rbx),%rcx
  0x00007f75704be14c: jmpq   *%rcx

AHE@0x00007f75800ea008: 0xbbbba000 i2c: 0x00007f75704be220 c2i: 0x00007f75704be36a c2iUV: 0x00007f75704be33d
i2c argument handler #32 for: receiver (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;I)V (613 bytes generated)
c2i argument handler starts at 0x7f75704be36a
  0x00007f75704be220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704be224: movabs $0x7f757036e3e0,%r11
  0x00007f75704be22e: cmp    %r11,%rax
  0x00007f75704be231: jbe    0x00007f75704be24a
  0x00007f75704be237: movabs $0x7f757046e3e0,%r11
  0x00007f75704be241: cmp    %r11,%rax
  0x00007f75704be244: jb     0x00007f75704be30d
  0x00007f75704be24a: movabs $0x7f7570369420,%r11
  0x00007f75704be254: cmp    %r11,%rax
  0x00007f75704be257: jbe    0x00007f75704be270
  0x00007f75704be25d: movabs $0x7f757036de58,%r11
  0x00007f75704be267: cmp    %r11,%rax
  0x00007f75704be26a: jb     0x00007f75704be30d
  0x00007f75704be270: movabs $0x7f75704a9820,%r11
  0x00007f75704be27a: cmp    %r11,%rax
  0x00007f75704be27d: jbe    0x00007f75704be296
  0x00007f75704be283: movabs $0x7f75704af5e0,%r11
  0x00007f75704be28d: cmp    %r11,%rax
  0x00007f75704be290: jb     0x00007f75704be30d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704be296: mov    %rsp,-0x28(%rsp)
  0x00007f75704be29b: sub    $0x80,%rsp
  0x00007f75704be2a2: mov    %rax,0x78(%rsp)
  0x00007f75704be2a7: mov    %rcx,0x70(%rsp)
  0x00007f75704be2ac: mov    %rdx,0x68(%rsp)
  0x00007f75704be2b1: mov    %rbx,0x60(%rsp)
  0x00007f75704be2b6: mov    %rbp,0x50(%rsp)
  0x00007f75704be2bb: mov    %rsi,0x48(%rsp)
  0x00007f75704be2c0: mov    %rdi,0x40(%rsp)
  0x00007f75704be2c5: mov    %r8,0x38(%rsp)
  0x00007f75704be2ca: mov    %r9,0x30(%rsp)
  0x00007f75704be2cf: mov    %r10,0x28(%rsp)
  0x00007f75704be2d4: mov    %r11,0x20(%rsp)
  0x00007f75704be2d9: mov    %r12,0x18(%rsp)
  0x00007f75704be2de: mov    %r13,0x10(%rsp)
  0x00007f75704be2e3: mov    %r14,0x8(%rsp)
  0x00007f75704be2e8: mov    %r15,(%rsp)
  0x00007f75704be2ec: movabs $0x7f758592f470,%rdi
  0x00007f75704be2f6: movabs $0x7f75704be296,%rsi
  0x00007f75704be300: mov    %rsp,%rdx
  0x00007f75704be303: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be307: callq  0x00007f75853729fa
  0x00007f75704be30c: hlt    
  ;; } verify_i2ce 
  0x00007f75704be30d: mov    %rsp,%r11
  0x00007f75704be310: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be314: push   %rax
  0x00007f75704be315: mov    %r11,%rax
  0x00007f75704be318: mov    0x50(%rbx),%r11
  0x00007f75704be31c: mov    0x28(%rax),%rsi
  0x00007f75704be320: mov    0x20(%rax),%rdx
  0x00007f75704be324: mov    0x18(%rax),%rcx
  0x00007f75704be328: mov    0x10(%rax),%r8
  0x00007f75704be32c: mov    0x8(%rax),%r9d
  0x00007f75704be330: mov    %rbx,0x258(%r15)
  0x00007f75704be337: mov    %rbx,%rax
  0x00007f75704be33a: jmpq   *%r11
  0x00007f75704be33d: mov    0x8(%rsi),%ebx
  0x00007f75704be340: shl    $0x3,%rbx
  0x00007f75704be344: cmp    0x10(%rax),%rbx
  0x00007f75704be348: mov    0x8(%rax),%rbx
  0x00007f75704be34c: je     0x00007f75704be357
  0x00007f75704be352: jmpq   0x00007f757046ec40
  0x00007f75704be357: cmpq   $0x0,0x58(%rbx)
  0x00007f75704be35f: je     0x00007f75704be45a
  0x00007f75704be365: jmpq   0x00007f757046ec40
  0x00007f75704be36a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704be372: je     0x00007f75704be45a
  0x00007f75704be378: mov    %rsp,%r13
  0x00007f75704be37b: mov    (%rsp),%rax
  0x00007f75704be37f: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be383: pushfq 
  0x00007f75704be384: sub    $0x8,%rsp
  0x00007f75704be388: mov    %rsp,-0x28(%rsp)
  0x00007f75704be38d: sub    $0x80,%rsp
  0x00007f75704be394: mov    %rax,0x78(%rsp)
  0x00007f75704be399: mov    %rcx,0x70(%rsp)
  0x00007f75704be39e: mov    %rdx,0x68(%rsp)
  0x00007f75704be3a3: mov    %rbx,0x60(%rsp)
  0x00007f75704be3a8: mov    %rbp,0x50(%rsp)
  0x00007f75704be3ad: mov    %rsi,0x48(%rsp)
  0x00007f75704be3b2: mov    %rdi,0x40(%rsp)
  0x00007f75704be3b7: mov    %r8,0x38(%rsp)
  0x00007f75704be3bc: mov    %r9,0x30(%rsp)
  0x00007f75704be3c1: mov    %r10,0x28(%rsp)
  0x00007f75704be3c6: mov    %r11,0x20(%rsp)
  0x00007f75704be3cb: mov    %r12,0x18(%rsp)
  0x00007f75704be3d0: mov    %r13,0x10(%rsp)
  0x00007f75704be3d5: mov    %r14,0x8(%rsp)
  0x00007f75704be3da: mov    %r15,(%rsp)
  0x00007f75704be3de: sub    $0x200,%rsp
  0x00007f75704be3e5: fxsave64 (%rsp)
  0x00007f75704be3ea: mov    %rbx,%rdi
  0x00007f75704be3ed: mov    %rax,%rsi
  0x00007f75704be3f0: callq  0x00007f7585522bca
  0x00007f75704be3f5: fxrstor64 (%rsp)
  0x00007f75704be3fa: add    $0x200,%rsp
  0x00007f75704be401: mov    (%rsp),%r15
  0x00007f75704be405: mov    0x8(%rsp),%r14
  0x00007f75704be40a: mov    0x10(%rsp),%r13
  0x00007f75704be40f: mov    0x18(%rsp),%r12
  0x00007f75704be414: mov    0x20(%rsp),%r11
  0x00007f75704be419: mov    0x28(%rsp),%r10
  0x00007f75704be41e: mov    0x30(%rsp),%r9
  0x00007f75704be423: mov    0x38(%rsp),%r8
  0x00007f75704be428: mov    0x40(%rsp),%rdi
  0x00007f75704be42d: mov    0x48(%rsp),%rsi
  0x00007f75704be432: mov    0x50(%rsp),%rbp
  0x00007f75704be437: mov    0x60(%rsp),%rbx
  0x00007f75704be43c: mov    0x68(%rsp),%rdx
  0x00007f75704be441: mov    0x70(%rsp),%rcx
  0x00007f75704be446: mov    0x78(%rsp),%rax
  0x00007f75704be44b: add    $0x80,%rsp
  0x00007f75704be452: add    $0x8,%rsp
  0x00007f75704be456: popfq  
  0x00007f75704be457: mov    %r13,%rsp
  0x00007f75704be45a: pop    %rax
  0x00007f75704be45b: mov    %rsp,%r13
  0x00007f75704be45e: sub    $0x30,%rsp
  0x00007f75704be462: mov    %rax,(%rsp)
  0x00007f75704be466: mov    %rsi,0x28(%rsp)
  0x00007f75704be46b: mov    %rdx,0x20(%rsp)
  0x00007f75704be470: mov    %rcx,0x18(%rsp)
  0x00007f75704be475: mov    %r8,0x10(%rsp)
  0x00007f75704be47a: mov    %r9d,0x8(%rsp)
  0x00007f75704be47f: mov    0x40(%rbx),%rcx
  0x00007f75704be483: jmpq   *%rcx

AHE@0x00007f75800ea050: 0xbaabb000 i2c: 0x00007f75704be560 c2i: 0x00007f75704be6a8 c2iUV: 0x00007f75704be67b
i2c argument handler #33 for: receiver (IZ[Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/String; (609 bytes generated)
c2i argument handler starts at 0x7f75704be6a8
  0x00007f75704be560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704be564: movabs $0x7f757036e3e0,%r11
  0x00007f75704be56e: cmp    %r11,%rax
  0x00007f75704be571: jbe    0x00007f75704be58a
  0x00007f75704be577: movabs $0x7f757046e3e0,%r11
  0x00007f75704be581: cmp    %r11,%rax
  0x00007f75704be584: jb     0x00007f75704be64d
  0x00007f75704be58a: movabs $0x7f7570369420,%r11
  0x00007f75704be594: cmp    %r11,%rax
  0x00007f75704be597: jbe    0x00007f75704be5b0
  0x00007f75704be59d: movabs $0x7f757036de58,%r11
  0x00007f75704be5a7: cmp    %r11,%rax
  0x00007f75704be5aa: jb     0x00007f75704be64d
  0x00007f75704be5b0: movabs $0x7f75704a9820,%r11
  0x00007f75704be5ba: cmp    %r11,%rax
  0x00007f75704be5bd: jbe    0x00007f75704be5d6
  0x00007f75704be5c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704be5cd: cmp    %r11,%rax
  0x00007f75704be5d0: jb     0x00007f75704be64d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704be5d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704be5db: sub    $0x80,%rsp
  0x00007f75704be5e2: mov    %rax,0x78(%rsp)
  0x00007f75704be5e7: mov    %rcx,0x70(%rsp)
  0x00007f75704be5ec: mov    %rdx,0x68(%rsp)
  0x00007f75704be5f1: mov    %rbx,0x60(%rsp)
  0x00007f75704be5f6: mov    %rbp,0x50(%rsp)
  0x00007f75704be5fb: mov    %rsi,0x48(%rsp)
  0x00007f75704be600: mov    %rdi,0x40(%rsp)
  0x00007f75704be605: mov    %r8,0x38(%rsp)
  0x00007f75704be60a: mov    %r9,0x30(%rsp)
  0x00007f75704be60f: mov    %r10,0x28(%rsp)
  0x00007f75704be614: mov    %r11,0x20(%rsp)
  0x00007f75704be619: mov    %r12,0x18(%rsp)
  0x00007f75704be61e: mov    %r13,0x10(%rsp)
  0x00007f75704be623: mov    %r14,0x8(%rsp)
  0x00007f75704be628: mov    %r15,(%rsp)
  0x00007f75704be62c: movabs $0x7f758592f470,%rdi
  0x00007f75704be636: movabs $0x7f75704be5d6,%rsi
  0x00007f75704be640: mov    %rsp,%rdx
  0x00007f75704be643: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be647: callq  0x00007f75853729fa
  0x00007f75704be64c: hlt    
  ;; } verify_i2ce 
  0x00007f75704be64d: mov    %rsp,%r11
  0x00007f75704be650: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be654: push   %rax
  0x00007f75704be655: mov    %r11,%rax
  0x00007f75704be658: mov    0x50(%rbx),%r11
  0x00007f75704be65c: mov    0x28(%rax),%rsi
  0x00007f75704be660: mov    0x20(%rax),%edx
  0x00007f75704be663: mov    0x18(%rax),%ecx
  0x00007f75704be666: mov    0x10(%rax),%r8
  0x00007f75704be66a: mov    0x8(%rax),%r9
  0x00007f75704be66e: mov    %rbx,0x258(%r15)
  0x00007f75704be675: mov    %rbx,%rax
  0x00007f75704be678: jmpq   *%r11
  0x00007f75704be67b: mov    0x8(%rsi),%ebx
  0x00007f75704be67e: shl    $0x3,%rbx
  0x00007f75704be682: cmp    0x10(%rax),%rbx
  0x00007f75704be686: mov    0x8(%rax),%rbx
  0x00007f75704be68a: je     0x00007f75704be695
  0x00007f75704be690: jmpq   0x00007f757046ec40
  0x00007f75704be695: cmpq   $0x0,0x58(%rbx)
  0x00007f75704be69d: je     0x00007f75704be798
  0x00007f75704be6a3: jmpq   0x00007f757046ec40
  0x00007f75704be6a8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704be6b0: je     0x00007f75704be798
  0x00007f75704be6b6: mov    %rsp,%r13
  0x00007f75704be6b9: mov    (%rsp),%rax
  0x00007f75704be6bd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be6c1: pushfq 
  0x00007f75704be6c2: sub    $0x8,%rsp
  0x00007f75704be6c6: mov    %rsp,-0x28(%rsp)
  0x00007f75704be6cb: sub    $0x80,%rsp
  0x00007f75704be6d2: mov    %rax,0x78(%rsp)
  0x00007f75704be6d7: mov    %rcx,0x70(%rsp)
  0x00007f75704be6dc: mov    %rdx,0x68(%rsp)
  0x00007f75704be6e1: mov    %rbx,0x60(%rsp)
  0x00007f75704be6e6: mov    %rbp,0x50(%rsp)
  0x00007f75704be6eb: mov    %rsi,0x48(%rsp)
  0x00007f75704be6f0: mov    %rdi,0x40(%rsp)
  0x00007f75704be6f5: mov    %r8,0x38(%rsp)
  0x00007f75704be6fa: mov    %r9,0x30(%rsp)
  0x00007f75704be6ff: mov    %r10,0x28(%rsp)
  0x00007f75704be704: mov    %r11,0x20(%rsp)
  0x00007f75704be709: mov    %r12,0x18(%rsp)
  0x00007f75704be70e: mov    %r13,0x10(%rsp)
  0x00007f75704be713: mov    %r14,0x8(%rsp)
  0x00007f75704be718: mov    %r15,(%rsp)
  0x00007f75704be71c: sub    $0x200,%rsp
  0x00007f75704be723: fxsave64 (%rsp)
  0x00007f75704be728: mov    %rbx,%rdi
  0x00007f75704be72b: mov    %rax,%rsi
  0x00007f75704be72e: callq  0x00007f7585522bca
  0x00007f75704be733: fxrstor64 (%rsp)
  0x00007f75704be738: add    $0x200,%rsp
  0x00007f75704be73f: mov    (%rsp),%r15
  0x00007f75704be743: mov    0x8(%rsp),%r14
  0x00007f75704be748: mov    0x10(%rsp),%r13
  0x00007f75704be74d: mov    0x18(%rsp),%r12
  0x00007f75704be752: mov    0x20(%rsp),%r11
  0x00007f75704be757: mov    0x28(%rsp),%r10
  0x00007f75704be75c: mov    0x30(%rsp),%r9
  0x00007f75704be761: mov    0x38(%rsp),%r8
  0x00007f75704be766: mov    0x40(%rsp),%rdi
  0x00007f75704be76b: mov    0x48(%rsp),%rsi
  0x00007f75704be770: mov    0x50(%rsp),%rbp
  0x00007f75704be775: mov    0x60(%rsp),%rbx
  0x00007f75704be77a: mov    0x68(%rsp),%rdx
  0x00007f75704be77f: mov    0x70(%rsp),%rcx
  0x00007f75704be784: mov    0x78(%rsp),%rax
  0x00007f75704be789: add    $0x80,%rsp
  0x00007f75704be790: add    $0x8,%rsp
  0x00007f75704be794: popfq  
  0x00007f75704be795: mov    %r13,%rsp
  0x00007f75704be798: pop    %rax
  0x00007f75704be799: mov    %rsp,%r13
  0x00007f75704be79c: sub    $0x30,%rsp
  0x00007f75704be7a0: mov    %rax,(%rsp)
  0x00007f75704be7a4: mov    %rsi,0x28(%rsp)
  0x00007f75704be7a9: mov    %edx,0x20(%rsp)
  0x00007f75704be7ad: mov    %ecx,0x18(%rsp)
  0x00007f75704be7b1: mov    %r8,0x10(%rsp)
  0x00007f75704be7b6: mov    %r9,0x8(%rsp)
  0x00007f75704be7bb: mov    0x40(%rbx),%rcx
  0x00007f75704be7bf: jmpq   *%rcx

AHE@0x00007f75800ea098: 0xbbbbbbaabbbb0000 i2c: 0x00007f75704be8a0 c2i: 0x00007f75704bea28 c2iUV: 0x00007f75704be9fb
i2c argument handler #34 for: receiver (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B[B)V (750 bytes generated)
c2i argument handler starts at 0x7f75704bea28
  0x00007f75704be8a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704be8a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704be8ae: cmp    %r11,%rax
  0x00007f75704be8b1: jbe    0x00007f75704be8ca
  0x00007f75704be8b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704be8c1: cmp    %r11,%rax
  0x00007f75704be8c4: jb     0x00007f75704be98d
  0x00007f75704be8ca: movabs $0x7f7570369420,%r11
  0x00007f75704be8d4: cmp    %r11,%rax
  0x00007f75704be8d7: jbe    0x00007f75704be8f0
  0x00007f75704be8dd: movabs $0x7f757036de58,%r11
  0x00007f75704be8e7: cmp    %r11,%rax
  0x00007f75704be8ea: jb     0x00007f75704be98d
  0x00007f75704be8f0: movabs $0x7f75704a9820,%r11
  0x00007f75704be8fa: cmp    %r11,%rax
  0x00007f75704be8fd: jbe    0x00007f75704be916
  0x00007f75704be903: movabs $0x7f75704af5e0,%r11
  0x00007f75704be90d: cmp    %r11,%rax
  0x00007f75704be910: jb     0x00007f75704be98d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704be916: mov    %rsp,-0x28(%rsp)
  0x00007f75704be91b: sub    $0x80,%rsp
  0x00007f75704be922: mov    %rax,0x78(%rsp)
  0x00007f75704be927: mov    %rcx,0x70(%rsp)
  0x00007f75704be92c: mov    %rdx,0x68(%rsp)
  0x00007f75704be931: mov    %rbx,0x60(%rsp)
  0x00007f75704be936: mov    %rbp,0x50(%rsp)
  0x00007f75704be93b: mov    %rsi,0x48(%rsp)
  0x00007f75704be940: mov    %rdi,0x40(%rsp)
  0x00007f75704be945: mov    %r8,0x38(%rsp)
  0x00007f75704be94a: mov    %r9,0x30(%rsp)
  0x00007f75704be94f: mov    %r10,0x28(%rsp)
  0x00007f75704be954: mov    %r11,0x20(%rsp)
  0x00007f75704be959: mov    %r12,0x18(%rsp)
  0x00007f75704be95e: mov    %r13,0x10(%rsp)
  0x00007f75704be963: mov    %r14,0x8(%rsp)
  0x00007f75704be968: mov    %r15,(%rsp)
  0x00007f75704be96c: movabs $0x7f758592f470,%rdi
  0x00007f75704be976: movabs $0x7f75704be916,%rsi
  0x00007f75704be980: mov    %rsp,%rdx
  0x00007f75704be983: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be987: callq  0x00007f75853729fa
  0x00007f75704be98c: hlt    
  ;; } verify_i2ce 
  0x00007f75704be98d: mov    %rsp,%r11
  0x00007f75704be990: sub    $0x30,%rsp
  0x00007f75704be994: and    $0xfffffffffffffff0,%rsp
  0x00007f75704be998: push   %rax
  0x00007f75704be999: mov    %r11,%rax
  0x00007f75704be99c: mov    0x50(%rbx),%r11
  0x00007f75704be9a0: mov    0x60(%rax),%rsi
  0x00007f75704be9a4: mov    0x58(%rax),%rdx
  0x00007f75704be9a8: mov    0x50(%rax),%rcx
  0x00007f75704be9ac: mov    0x48(%rax),%r8
  0x00007f75704be9b0: mov    0x40(%rax),%r9
  0x00007f75704be9b4: mov    0x38(%rax),%rdi
  0x00007f75704be9b8: mov    0x30(%rax),%r13d
  0x00007f75704be9bc: mov    %r13,0x8(%rsp)
  0x00007f75704be9c1: mov    0x28(%rax),%r13d
  0x00007f75704be9c5: mov    %r13,0x10(%rsp)
  0x00007f75704be9ca: mov    0x20(%rax),%r13
  0x00007f75704be9ce: mov    %r13,0x18(%rsp)
  0x00007f75704be9d3: mov    0x18(%rax),%r13
  0x00007f75704be9d7: mov    %r13,0x20(%rsp)
  0x00007f75704be9dc: mov    0x10(%rax),%r13
  0x00007f75704be9e0: mov    %r13,0x28(%rsp)
  0x00007f75704be9e5: mov    0x8(%rax),%r13
  0x00007f75704be9e9: mov    %r13,0x30(%rsp)
  0x00007f75704be9ee: mov    %rbx,0x258(%r15)
  0x00007f75704be9f5: mov    %rbx,%rax
  0x00007f75704be9f8: jmpq   *%r11
  0x00007f75704be9fb: mov    0x8(%rsi),%ebx
  0x00007f75704be9fe: shl    $0x3,%rbx
  0x00007f75704bea02: cmp    0x10(%rax),%rbx
  0x00007f75704bea06: mov    0x8(%rax),%rbx
  0x00007f75704bea0a: je     0x00007f75704bea15
  0x00007f75704bea10: jmpq   0x00007f757046ec40
  0x00007f75704bea15: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bea1d: je     0x00007f75704beb18
  0x00007f75704bea23: jmpq   0x00007f757046ec40
  0x00007f75704bea28: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bea30: je     0x00007f75704beb18
  0x00007f75704bea36: mov    %rsp,%r13
  0x00007f75704bea39: mov    (%rsp),%rax
  0x00007f75704bea3d: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bea41: pushfq 
  0x00007f75704bea42: sub    $0x8,%rsp
  0x00007f75704bea46: mov    %rsp,-0x28(%rsp)
  0x00007f75704bea4b: sub    $0x80,%rsp
  0x00007f75704bea52: mov    %rax,0x78(%rsp)
  0x00007f75704bea57: mov    %rcx,0x70(%rsp)
  0x00007f75704bea5c: mov    %rdx,0x68(%rsp)
  0x00007f75704bea61: mov    %rbx,0x60(%rsp)
  0x00007f75704bea66: mov    %rbp,0x50(%rsp)
  0x00007f75704bea6b: mov    %rsi,0x48(%rsp)
  0x00007f75704bea70: mov    %rdi,0x40(%rsp)
  0x00007f75704bea75: mov    %r8,0x38(%rsp)
  0x00007f75704bea7a: mov    %r9,0x30(%rsp)
  0x00007f75704bea7f: mov    %r10,0x28(%rsp)
  0x00007f75704bea84: mov    %r11,0x20(%rsp)
  0x00007f75704bea89: mov    %r12,0x18(%rsp)
  0x00007f75704bea8e: mov    %r13,0x10(%rsp)
  0x00007f75704bea93: mov    %r14,0x8(%rsp)
  0x00007f75704bea98: mov    %r15,(%rsp)
  0x00007f75704bea9c: sub    $0x200,%rsp
  0x00007f75704beaa3: fxsave64 (%rsp)
  0x00007f75704beaa8: mov    %rbx,%rdi
  0x00007f75704beaab: mov    %rax,%rsi
  0x00007f75704beaae: callq  0x00007f7585522bca
  0x00007f75704beab3: fxrstor64 (%rsp)
  0x00007f75704beab8: add    $0x200,%rsp
  0x00007f75704beabf: mov    (%rsp),%r15
  0x00007f75704beac3: mov    0x8(%rsp),%r14
  0x00007f75704beac8: mov    0x10(%rsp),%r13
  0x00007f75704beacd: mov    0x18(%rsp),%r12
  0x00007f75704bead2: mov    0x20(%rsp),%r11
  0x00007f75704bead7: mov    0x28(%rsp),%r10
  0x00007f75704beadc: mov    0x30(%rsp),%r9
  0x00007f75704beae1: mov    0x38(%rsp),%r8
  0x00007f75704beae6: mov    0x40(%rsp),%rdi
  0x00007f75704beaeb: mov    0x48(%rsp),%rsi
  0x00007f75704beaf0: mov    0x50(%rsp),%rbp
  0x00007f75704beaf5: mov    0x60(%rsp),%rbx
  0x00007f75704beafa: mov    0x68(%rsp),%rdx
  0x00007f75704beaff: mov    0x70(%rsp),%rcx
  0x00007f75704beb04: mov    0x78(%rsp),%rax
  0x00007f75704beb09: add    $0x80,%rsp
  0x00007f75704beb10: add    $0x8,%rsp
  0x00007f75704beb14: popfq  
  0x00007f75704beb15: mov    %r13,%rsp
  0x00007f75704beb18: pop    %rax
  0x00007f75704beb19: mov    %rsp,%r13
  0x00007f75704beb1c: sub    $0x70,%rsp
  0x00007f75704beb20: mov    %rax,(%rsp)
  0x00007f75704beb24: mov    %rsi,0x60(%rsp)
  0x00007f75704beb29: mov    %rdx,0x58(%rsp)
  0x00007f75704beb2e: mov    %rcx,0x50(%rsp)
  0x00007f75704beb33: mov    %r8,0x48(%rsp)
  0x00007f75704beb38: mov    %r9,0x40(%rsp)
  0x00007f75704beb3d: mov    %rdi,0x38(%rsp)
  0x00007f75704beb42: mov    0x70(%rsp),%eax
  0x00007f75704beb46: mov    %rax,0x30(%rsp)
  0x00007f75704beb4b: mov    0x78(%rsp),%eax
  0x00007f75704beb4f: mov    %rax,0x28(%rsp)
  0x00007f75704beb54: mov    0x80(%rsp),%rax
  0x00007f75704beb5c: mov    %rax,0x20(%rsp)
  0x00007f75704beb61: mov    0x88(%rsp),%rax
  0x00007f75704beb69: mov    %rax,0x18(%rsp)
  0x00007f75704beb6e: mov    0x90(%rsp),%rax
  0x00007f75704beb76: mov    %rax,0x10(%rsp)
  0x00007f75704beb7b: mov    0x98(%rsp),%rax
  0x00007f75704beb83: mov    %rax,0x8(%rsp)
  0x00007f75704beb88: mov    0x40(%rbx),%rcx
  0x00007f75704beb8c: jmpq   *%rcx

AHE@0x00007f75800ea0e0: 0xbbbbaabb i2c: 0x00007f75704bec60 c2i: 0x00007f75704bedc3 c2iUV: 0x00007f75704bed96
i2c argument handler #35 for: receiver (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;IILjava/lang/String;[B)Ljava/lang/reflect/Field; (662 bytes generated)
c2i argument handler starts at 0x7f75704bedc3
  0x00007f75704bec60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bec64: movabs $0x7f757036e3e0,%r11
  0x00007f75704bec6e: cmp    %r11,%rax
  0x00007f75704bec71: jbe    0x00007f75704bec8a
  0x00007f75704bec77: movabs $0x7f757046e3e0,%r11
  0x00007f75704bec81: cmp    %r11,%rax
  0x00007f75704bec84: jb     0x00007f75704bed4d
  0x00007f75704bec8a: movabs $0x7f7570369420,%r11
  0x00007f75704bec94: cmp    %r11,%rax
  0x00007f75704bec97: jbe    0x00007f75704becb0
  0x00007f75704bec9d: movabs $0x7f757036de58,%r11
  0x00007f75704beca7: cmp    %r11,%rax
  0x00007f75704becaa: jb     0x00007f75704bed4d
  0x00007f75704becb0: movabs $0x7f75704a9820,%r11
  0x00007f75704becba: cmp    %r11,%rax
  0x00007f75704becbd: jbe    0x00007f75704becd6
  0x00007f75704becc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704beccd: cmp    %r11,%rax
  0x00007f75704becd0: jb     0x00007f75704bed4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704becd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704becdb: sub    $0x80,%rsp
  0x00007f75704bece2: mov    %rax,0x78(%rsp)
  0x00007f75704bece7: mov    %rcx,0x70(%rsp)
  0x00007f75704becec: mov    %rdx,0x68(%rsp)
  0x00007f75704becf1: mov    %rbx,0x60(%rsp)
  0x00007f75704becf6: mov    %rbp,0x50(%rsp)
  0x00007f75704becfb: mov    %rsi,0x48(%rsp)
  0x00007f75704bed00: mov    %rdi,0x40(%rsp)
  0x00007f75704bed05: mov    %r8,0x38(%rsp)
  0x00007f75704bed0a: mov    %r9,0x30(%rsp)
  0x00007f75704bed0f: mov    %r10,0x28(%rsp)
  0x00007f75704bed14: mov    %r11,0x20(%rsp)
  0x00007f75704bed19: mov    %r12,0x18(%rsp)
  0x00007f75704bed1e: mov    %r13,0x10(%rsp)
  0x00007f75704bed23: mov    %r14,0x8(%rsp)
  0x00007f75704bed28: mov    %r15,(%rsp)
  0x00007f75704bed2c: movabs $0x7f758592f470,%rdi
  0x00007f75704bed36: movabs $0x7f75704becd6,%rsi
  0x00007f75704bed40: mov    %rsp,%rdx
  0x00007f75704bed43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bed47: callq  0x00007f75853729fa
  0x00007f75704bed4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bed4d: mov    %rsp,%r11
  0x00007f75704bed50: sub    $0x10,%rsp
  0x00007f75704bed54: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bed58: push   %rax
  0x00007f75704bed59: mov    %r11,%rax
  0x00007f75704bed5c: mov    0x50(%rbx),%r11
  0x00007f75704bed60: mov    0x40(%rax),%rsi
  0x00007f75704bed64: mov    0x38(%rax),%rdx
  0x00007f75704bed68: mov    0x30(%rax),%rcx
  0x00007f75704bed6c: mov    0x28(%rax),%r8
  0x00007f75704bed70: mov    0x20(%rax),%r9d
  0x00007f75704bed74: mov    0x18(%rax),%edi
  0x00007f75704bed77: mov    0x10(%rax),%r13
  0x00007f75704bed7b: mov    %r13,0x8(%rsp)
  0x00007f75704bed80: mov    0x8(%rax),%r13
  0x00007f75704bed84: mov    %r13,0x10(%rsp)
  0x00007f75704bed89: mov    %rbx,0x258(%r15)
  0x00007f75704bed90: mov    %rbx,%rax
  0x00007f75704bed93: jmpq   *%r11
  0x00007f75704bed96: mov    0x8(%rsi),%ebx
  0x00007f75704bed99: shl    $0x3,%rbx
  0x00007f75704bed9d: cmp    0x10(%rax),%rbx
  0x00007f75704beda1: mov    0x8(%rax),%rbx
  0x00007f75704beda5: je     0x00007f75704bedb0
  0x00007f75704bedab: jmpq   0x00007f757046ec40
  0x00007f75704bedb0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bedb8: je     0x00007f75704beeb3
  0x00007f75704bedbe: jmpq   0x00007f757046ec40
  0x00007f75704bedc3: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bedcb: je     0x00007f75704beeb3
  0x00007f75704bedd1: mov    %rsp,%r13
  0x00007f75704bedd4: mov    (%rsp),%rax
  0x00007f75704bedd8: and    $0xfffffffffffffff0,%rsp
  0x00007f75704beddc: pushfq 
  0x00007f75704beddd: sub    $0x8,%rsp
  0x00007f75704bede1: mov    %rsp,-0x28(%rsp)
  0x00007f75704bede6: sub    $0x80,%rsp
  0x00007f75704beded: mov    %rax,0x78(%rsp)
  0x00007f75704bedf2: mov    %rcx,0x70(%rsp)
  0x00007f75704bedf7: mov    %rdx,0x68(%rsp)
  0x00007f75704bedfc: mov    %rbx,0x60(%rsp)
  0x00007f75704bee01: mov    %rbp,0x50(%rsp)
  0x00007f75704bee06: mov    %rsi,0x48(%rsp)
  0x00007f75704bee0b: mov    %rdi,0x40(%rsp)
  0x00007f75704bee10: mov    %r8,0x38(%rsp)
  0x00007f75704bee15: mov    %r9,0x30(%rsp)
  0x00007f75704bee1a: mov    %r10,0x28(%rsp)
  0x00007f75704bee1f: mov    %r11,0x20(%rsp)
  0x00007f75704bee24: mov    %r12,0x18(%rsp)
  0x00007f75704bee29: mov    %r13,0x10(%rsp)
  0x00007f75704bee2e: mov    %r14,0x8(%rsp)
  0x00007f75704bee33: mov    %r15,(%rsp)
  0x00007f75704bee37: sub    $0x200,%rsp
  0x00007f75704bee3e: fxsave64 (%rsp)
  0x00007f75704bee43: mov    %rbx,%rdi
  0x00007f75704bee46: mov    %rax,%rsi
  0x00007f75704bee49: callq  0x00007f7585522bca
  0x00007f75704bee4e: fxrstor64 (%rsp)
  0x00007f75704bee53: add    $0x200,%rsp
  0x00007f75704bee5a: mov    (%rsp),%r15
  0x00007f75704bee5e: mov    0x8(%rsp),%r14
  0x00007f75704bee63: mov    0x10(%rsp),%r13
  0x00007f75704bee68: mov    0x18(%rsp),%r12
  0x00007f75704bee6d: mov    0x20(%rsp),%r11
  0x00007f75704bee72: mov    0x28(%rsp),%r10
  0x00007f75704bee77: mov    0x30(%rsp),%r9
  0x00007f75704bee7c: mov    0x38(%rsp),%r8
  0x00007f75704bee81: mov    0x40(%rsp),%rdi
  0x00007f75704bee86: mov    0x48(%rsp),%rsi
  0x00007f75704bee8b: mov    0x50(%rsp),%rbp
  0x00007f75704bee90: mov    0x60(%rsp),%rbx
  0x00007f75704bee95: mov    0x68(%rsp),%rdx
  0x00007f75704bee9a: mov    0x70(%rsp),%rcx
  0x00007f75704bee9f: mov    0x78(%rsp),%rax
  0x00007f75704beea4: add    $0x80,%rsp
  0x00007f75704beeab: add    $0x8,%rsp
  0x00007f75704beeaf: popfq  
  0x00007f75704beeb0: mov    %r13,%rsp
  0x00007f75704beeb3: pop    %rax
  0x00007f75704beeb4: mov    %rsp,%r13
  0x00007f75704beeb7: sub    $0x50,%rsp
  0x00007f75704beebb: mov    %rax,(%rsp)
  0x00007f75704beebf: mov    %rsi,0x40(%rsp)
  0x00007f75704beec4: mov    %rdx,0x38(%rsp)
  0x00007f75704beec9: mov    %rcx,0x30(%rsp)
  0x00007f75704beece: mov    %r8,0x28(%rsp)
  0x00007f75704beed3: mov    %r9d,0x20(%rsp)
  0x00007f75704beed8: mov    %edi,0x18(%rsp)
  0x00007f75704beedc: mov    0x50(%rsp),%rax
  0x00007f75704beee1: mov    %rax,0x10(%rsp)
  0x00007f75704beee6: mov    0x58(%rsp),%rax
  0x00007f75704beeeb: mov    %rax,0x8(%rsp)
  0x00007f75704beef0: mov    0x40(%rbx),%rcx
  0x00007f75704beef4: jmpq   *%rcx

AHE@0x00007f75800ea128: 0xbbbbaabbb0000000 i2c: 0x00007f75704befa0 c2i: 0x00007f75704bf10c c2iUV: 0x00007f75704bf0df
i2c argument handler #36 for: receiver (Ljava/lang/Class;[Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B)Ljava/lang/reflect/Constructor; (681 bytes generated)
c2i argument handler starts at 0x7f75704bf10c
  0x00007f75704befa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704befa4: movabs $0x7f757036e3e0,%r11
  0x00007f75704befae: cmp    %r11,%rax
  0x00007f75704befb1: jbe    0x00007f75704befca
  0x00007f75704befb7: movabs $0x7f757046e3e0,%r11
  0x00007f75704befc1: cmp    %r11,%rax
  0x00007f75704befc4: jb     0x00007f75704bf08d
  0x00007f75704befca: movabs $0x7f7570369420,%r11
  0x00007f75704befd4: cmp    %r11,%rax
  0x00007f75704befd7: jbe    0x00007f75704beff0
  0x00007f75704befdd: movabs $0x7f757036de58,%r11
  0x00007f75704befe7: cmp    %r11,%rax
  0x00007f75704befea: jb     0x00007f75704bf08d
  0x00007f75704beff0: movabs $0x7f75704a9820,%r11
  0x00007f75704beffa: cmp    %r11,%rax
  0x00007f75704beffd: jbe    0x00007f75704bf016
  0x00007f75704bf003: movabs $0x7f75704af5e0,%r11
  0x00007f75704bf00d: cmp    %r11,%rax
  0x00007f75704bf010: jb     0x00007f75704bf08d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bf016: mov    %rsp,-0x28(%rsp)
  0x00007f75704bf01b: sub    $0x80,%rsp
  0x00007f75704bf022: mov    %rax,0x78(%rsp)
  0x00007f75704bf027: mov    %rcx,0x70(%rsp)
  0x00007f75704bf02c: mov    %rdx,0x68(%rsp)
  0x00007f75704bf031: mov    %rbx,0x60(%rsp)
  0x00007f75704bf036: mov    %rbp,0x50(%rsp)
  0x00007f75704bf03b: mov    %rsi,0x48(%rsp)
  0x00007f75704bf040: mov    %rdi,0x40(%rsp)
  0x00007f75704bf045: mov    %r8,0x38(%rsp)
  0x00007f75704bf04a: mov    %r9,0x30(%rsp)
  0x00007f75704bf04f: mov    %r10,0x28(%rsp)
  0x00007f75704bf054: mov    %r11,0x20(%rsp)
  0x00007f75704bf059: mov    %r12,0x18(%rsp)
  0x00007f75704bf05e: mov    %r13,0x10(%rsp)
  0x00007f75704bf063: mov    %r14,0x8(%rsp)
  0x00007f75704bf068: mov    %r15,(%rsp)
  0x00007f75704bf06c: movabs $0x7f758592f470,%rdi
  0x00007f75704bf076: movabs $0x7f75704bf016,%rsi
  0x00007f75704bf080: mov    %rsp,%rdx
  0x00007f75704bf083: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf087: callq  0x00007f75853729fa
  0x00007f75704bf08c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bf08d: mov    %rsp,%r11
  0x00007f75704bf090: sub    $0x20,%rsp
  0x00007f75704bf094: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf098: push   %rax
  0x00007f75704bf099: mov    %r11,%rax
  0x00007f75704bf09c: mov    0x50(%rbx),%r11
  0x00007f75704bf0a0: mov    0x48(%rax),%rsi
  0x00007f75704bf0a4: mov    0x40(%rax),%rdx
  0x00007f75704bf0a8: mov    0x38(%rax),%rcx
  0x00007f75704bf0ac: mov    0x30(%rax),%r8
  0x00007f75704bf0b0: mov    0x28(%rax),%r9d
  0x00007f75704bf0b4: mov    0x20(%rax),%edi
  0x00007f75704bf0b7: mov    0x18(%rax),%r13
  0x00007f75704bf0bb: mov    %r13,0x8(%rsp)
  0x00007f75704bf0c0: mov    0x10(%rax),%r13
  0x00007f75704bf0c4: mov    %r13,0x10(%rsp)
  0x00007f75704bf0c9: mov    0x8(%rax),%r13
  0x00007f75704bf0cd: mov    %r13,0x18(%rsp)
  0x00007f75704bf0d2: mov    %rbx,0x258(%r15)
  0x00007f75704bf0d9: mov    %rbx,%rax
  0x00007f75704bf0dc: jmpq   *%r11
  0x00007f75704bf0df: mov    0x8(%rsi),%ebx
  0x00007f75704bf0e2: shl    $0x3,%rbx
  0x00007f75704bf0e6: cmp    0x10(%rax),%rbx
  0x00007f75704bf0ea: mov    0x8(%rax),%rbx
  0x00007f75704bf0ee: je     0x00007f75704bf0f9
  0x00007f75704bf0f4: jmpq   0x00007f757046ec40
  0x00007f75704bf0f9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bf101: je     0x00007f75704bf1fc
  0x00007f75704bf107: jmpq   0x00007f757046ec40
  0x00007f75704bf10c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bf114: je     0x00007f75704bf1fc
  0x00007f75704bf11a: mov    %rsp,%r13
  0x00007f75704bf11d: mov    (%rsp),%rax
  0x00007f75704bf121: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf125: pushfq 
  0x00007f75704bf126: sub    $0x8,%rsp
  0x00007f75704bf12a: mov    %rsp,-0x28(%rsp)
  0x00007f75704bf12f: sub    $0x80,%rsp
  0x00007f75704bf136: mov    %rax,0x78(%rsp)
  0x00007f75704bf13b: mov    %rcx,0x70(%rsp)
  0x00007f75704bf140: mov    %rdx,0x68(%rsp)
  0x00007f75704bf145: mov    %rbx,0x60(%rsp)
  0x00007f75704bf14a: mov    %rbp,0x50(%rsp)
  0x00007f75704bf14f: mov    %rsi,0x48(%rsp)
  0x00007f75704bf154: mov    %rdi,0x40(%rsp)
  0x00007f75704bf159: mov    %r8,0x38(%rsp)
  0x00007f75704bf15e: mov    %r9,0x30(%rsp)
  0x00007f75704bf163: mov    %r10,0x28(%rsp)
  0x00007f75704bf168: mov    %r11,0x20(%rsp)
  0x00007f75704bf16d: mov    %r12,0x18(%rsp)
  0x00007f75704bf172: mov    %r13,0x10(%rsp)
  0x00007f75704bf177: mov    %r14,0x8(%rsp)
  0x00007f75704bf17c: mov    %r15,(%rsp)
  0x00007f75704bf180: sub    $0x200,%rsp
  0x00007f75704bf187: fxsave64 (%rsp)
  0x00007f75704bf18c: mov    %rbx,%rdi
  0x00007f75704bf18f: mov    %rax,%rsi
  0x00007f75704bf192: callq  0x00007f7585522bca
  0x00007f75704bf197: fxrstor64 (%rsp)
  0x00007f75704bf19c: add    $0x200,%rsp
  0x00007f75704bf1a3: mov    (%rsp),%r15
  0x00007f75704bf1a7: mov    0x8(%rsp),%r14
  0x00007f75704bf1ac: mov    0x10(%rsp),%r13
  0x00007f75704bf1b1: mov    0x18(%rsp),%r12
  0x00007f75704bf1b6: mov    0x20(%rsp),%r11
  0x00007f75704bf1bb: mov    0x28(%rsp),%r10
  0x00007f75704bf1c0: mov    0x30(%rsp),%r9
  0x00007f75704bf1c5: mov    0x38(%rsp),%r8
  0x00007f75704bf1ca: mov    0x40(%rsp),%rdi
  0x00007f75704bf1cf: mov    0x48(%rsp),%rsi
  0x00007f75704bf1d4: mov    0x50(%rsp),%rbp
  0x00007f75704bf1d9: mov    0x60(%rsp),%rbx
  0x00007f75704bf1de: mov    0x68(%rsp),%rdx
  0x00007f75704bf1e3: mov    0x70(%rsp),%rcx
  0x00007f75704bf1e8: mov    0x78(%rsp),%rax
  0x00007f75704bf1ed: add    $0x80,%rsp
  0x00007f75704bf1f4: add    $0x8,%rsp
  0x00007f75704bf1f8: popfq  
  0x00007f75704bf1f9: mov    %r13,%rsp
  0x00007f75704bf1fc: pop    %rax
  0x00007f75704bf1fd: mov    %rsp,%r13
  0x00007f75704bf200: sub    $0x50,%rsp
  0x00007f75704bf204: mov    %rax,(%rsp)
  0x00007f75704bf208: mov    %rsi,0x48(%rsp)
  0x00007f75704bf20d: mov    %rdx,0x40(%rsp)
  0x00007f75704bf212: mov    %rcx,0x38(%rsp)
  0x00007f75704bf217: mov    %r8,0x30(%rsp)
  0x00007f75704bf21c: mov    %r9d,0x28(%rsp)
  0x00007f75704bf221: mov    %edi,0x20(%rsp)
  0x00007f75704bf225: mov    0x50(%rsp),%rax
  0x00007f75704bf22a: mov    %rax,0x18(%rsp)
  0x00007f75704bf22f: mov    0x58(%rsp),%rax
  0x00007f75704bf234: mov    %rax,0x10(%rsp)
  0x00007f75704bf239: mov    0x60(%rsp),%rax
  0x00007f75704bf23e: mov    %rax,0x8(%rsp)
  0x00007f75704bf243: mov    0x40(%rbx),%rcx
  0x00007f75704bf247: jmpq   *%rcx

AHE@0x00007f75800ea170: 0xbbbaa000 i2c: 0x00007f75704bf320 c2i: 0x00007f75704bf46a c2iUV: 0x00007f75704bf43d
i2c argument handler #37 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (613 bytes generated)
c2i argument handler starts at 0x7f75704bf46a
  0x00007f75704bf320: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bf324: movabs $0x7f757036e3e0,%r11
  0x00007f75704bf32e: cmp    %r11,%rax
  0x00007f75704bf331: jbe    0x00007f75704bf34a
  0x00007f75704bf337: movabs $0x7f757046e3e0,%r11
  0x00007f75704bf341: cmp    %r11,%rax
  0x00007f75704bf344: jb     0x00007f75704bf40d
  0x00007f75704bf34a: movabs $0x7f7570369420,%r11
  0x00007f75704bf354: cmp    %r11,%rax
  0x00007f75704bf357: jbe    0x00007f75704bf370
  0x00007f75704bf35d: movabs $0x7f757036de58,%r11
  0x00007f75704bf367: cmp    %r11,%rax
  0x00007f75704bf36a: jb     0x00007f75704bf40d
  0x00007f75704bf370: movabs $0x7f75704a9820,%r11
  0x00007f75704bf37a: cmp    %r11,%rax
  0x00007f75704bf37d: jbe    0x00007f75704bf396
  0x00007f75704bf383: movabs $0x7f75704af5e0,%r11
  0x00007f75704bf38d: cmp    %r11,%rax
  0x00007f75704bf390: jb     0x00007f75704bf40d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bf396: mov    %rsp,-0x28(%rsp)
  0x00007f75704bf39b: sub    $0x80,%rsp
  0x00007f75704bf3a2: mov    %rax,0x78(%rsp)
  0x00007f75704bf3a7: mov    %rcx,0x70(%rsp)
  0x00007f75704bf3ac: mov    %rdx,0x68(%rsp)
  0x00007f75704bf3b1: mov    %rbx,0x60(%rsp)
  0x00007f75704bf3b6: mov    %rbp,0x50(%rsp)
  0x00007f75704bf3bb: mov    %rsi,0x48(%rsp)
  0x00007f75704bf3c0: mov    %rdi,0x40(%rsp)
  0x00007f75704bf3c5: mov    %r8,0x38(%rsp)
  0x00007f75704bf3ca: mov    %r9,0x30(%rsp)
  0x00007f75704bf3cf: mov    %r10,0x28(%rsp)
  0x00007f75704bf3d4: mov    %r11,0x20(%rsp)
  0x00007f75704bf3d9: mov    %r12,0x18(%rsp)
  0x00007f75704bf3de: mov    %r13,0x10(%rsp)
  0x00007f75704bf3e3: mov    %r14,0x8(%rsp)
  0x00007f75704bf3e8: mov    %r15,(%rsp)
  0x00007f75704bf3ec: movabs $0x7f758592f470,%rdi
  0x00007f75704bf3f6: movabs $0x7f75704bf396,%rsi
  0x00007f75704bf400: mov    %rsp,%rdx
  0x00007f75704bf403: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf407: callq  0x00007f75853729fa
  0x00007f75704bf40c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bf40d: mov    %rsp,%r11
  0x00007f75704bf410: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf414: push   %rax
  0x00007f75704bf415: mov    %r11,%rax
  0x00007f75704bf418: mov    0x50(%rbx),%r11
  0x00007f75704bf41c: mov    0x28(%rax),%rsi
  0x00007f75704bf420: mov    0x20(%rax),%rdx
  0x00007f75704bf424: mov    0x18(%rax),%rcx
  0x00007f75704bf428: mov    0x10(%rax),%r8d
  0x00007f75704bf42c: mov    0x8(%rax),%r9d
  0x00007f75704bf430: mov    %rbx,0x258(%r15)
  0x00007f75704bf437: mov    %rbx,%rax
  0x00007f75704bf43a: jmpq   *%r11
  0x00007f75704bf43d: mov    0x8(%rsi),%ebx
  0x00007f75704bf440: shl    $0x3,%rbx
  0x00007f75704bf444: cmp    0x10(%rax),%rbx
  0x00007f75704bf448: mov    0x8(%rax),%rbx
  0x00007f75704bf44c: je     0x00007f75704bf457
  0x00007f75704bf452: jmpq   0x00007f757046ec40
  0x00007f75704bf457: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bf45f: je     0x00007f75704bf55a
  0x00007f75704bf465: jmpq   0x00007f757046ec40
  0x00007f75704bf46a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bf472: je     0x00007f75704bf55a
  0x00007f75704bf478: mov    %rsp,%r13
  0x00007f75704bf47b: mov    (%rsp),%rax
  0x00007f75704bf47f: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf483: pushfq 
  0x00007f75704bf484: sub    $0x8,%rsp
  0x00007f75704bf488: mov    %rsp,-0x28(%rsp)
  0x00007f75704bf48d: sub    $0x80,%rsp
  0x00007f75704bf494: mov    %rax,0x78(%rsp)
  0x00007f75704bf499: mov    %rcx,0x70(%rsp)
  0x00007f75704bf49e: mov    %rdx,0x68(%rsp)
  0x00007f75704bf4a3: mov    %rbx,0x60(%rsp)
  0x00007f75704bf4a8: mov    %rbp,0x50(%rsp)
  0x00007f75704bf4ad: mov    %rsi,0x48(%rsp)
  0x00007f75704bf4b2: mov    %rdi,0x40(%rsp)
  0x00007f75704bf4b7: mov    %r8,0x38(%rsp)
  0x00007f75704bf4bc: mov    %r9,0x30(%rsp)
  0x00007f75704bf4c1: mov    %r10,0x28(%rsp)
  0x00007f75704bf4c6: mov    %r11,0x20(%rsp)
  0x00007f75704bf4cb: mov    %r12,0x18(%rsp)
  0x00007f75704bf4d0: mov    %r13,0x10(%rsp)
  0x00007f75704bf4d5: mov    %r14,0x8(%rsp)
  0x00007f75704bf4da: mov    %r15,(%rsp)
  0x00007f75704bf4de: sub    $0x200,%rsp
  0x00007f75704bf4e5: fxsave64 (%rsp)
  0x00007f75704bf4ea: mov    %rbx,%rdi
  0x00007f75704bf4ed: mov    %rax,%rsi
  0x00007f75704bf4f0: callq  0x00007f7585522bca
  0x00007f75704bf4f5: fxrstor64 (%rsp)
  0x00007f75704bf4fa: add    $0x200,%rsp
  0x00007f75704bf501: mov    (%rsp),%r15
  0x00007f75704bf505: mov    0x8(%rsp),%r14
  0x00007f75704bf50a: mov    0x10(%rsp),%r13
  0x00007f75704bf50f: mov    0x18(%rsp),%r12
  0x00007f75704bf514: mov    0x20(%rsp),%r11
  0x00007f75704bf519: mov    0x28(%rsp),%r10
  0x00007f75704bf51e: mov    0x30(%rsp),%r9
  0x00007f75704bf523: mov    0x38(%rsp),%r8
  0x00007f75704bf528: mov    0x40(%rsp),%rdi
  0x00007f75704bf52d: mov    0x48(%rsp),%rsi
  0x00007f75704bf532: mov    0x50(%rsp),%rbp
  0x00007f75704bf537: mov    0x60(%rsp),%rbx
  0x00007f75704bf53c: mov    0x68(%rsp),%rdx
  0x00007f75704bf541: mov    0x70(%rsp),%rcx
  0x00007f75704bf546: mov    0x78(%rsp),%rax
  0x00007f75704bf54b: add    $0x80,%rsp
  0x00007f75704bf552: add    $0x8,%rsp
  0x00007f75704bf556: popfq  
  0x00007f75704bf557: mov    %r13,%rsp
  0x00007f75704bf55a: pop    %rax
  0x00007f75704bf55b: mov    %rsp,%r13
  0x00007f75704bf55e: sub    $0x30,%rsp
  0x00007f75704bf562: mov    %rax,(%rsp)
  0x00007f75704bf566: mov    %rsi,0x28(%rsp)
  0x00007f75704bf56b: mov    %rdx,0x20(%rsp)
  0x00007f75704bf570: mov    %rcx,0x18(%rsp)
  0x00007f75704bf575: mov    %r8d,0x10(%rsp)
  0x00007f75704bf57a: mov    %r9d,0x8(%rsp)
  0x00007f75704bf57f: mov    0x40(%rbx),%rcx
  0x00007f75704bf583: jmpq   *%rcx

AHE@0x00007f75800ea1b8: 0xaaa00000 i2c: 0x00007f75704bf660 c2i: 0x00007f75704bf79f c2iUV: 0x00007f75704bf772
i2c argument handler #38 for: static (III)V (589 bytes generated)
c2i argument handler starts at 0x7f75704bf79f
  0x00007f75704bf660: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bf664: movabs $0x7f757036e3e0,%r11
  0x00007f75704bf66e: cmp    %r11,%rax
  0x00007f75704bf671: jbe    0x00007f75704bf68a
  0x00007f75704bf677: movabs $0x7f757046e3e0,%r11
  0x00007f75704bf681: cmp    %r11,%rax
  0x00007f75704bf684: jb     0x00007f75704bf74d
  0x00007f75704bf68a: movabs $0x7f7570369420,%r11
  0x00007f75704bf694: cmp    %r11,%rax
  0x00007f75704bf697: jbe    0x00007f75704bf6b0
  0x00007f75704bf69d: movabs $0x7f757036de58,%r11
  0x00007f75704bf6a7: cmp    %r11,%rax
  0x00007f75704bf6aa: jb     0x00007f75704bf74d
  0x00007f75704bf6b0: movabs $0x7f75704a9820,%r11
  0x00007f75704bf6ba: cmp    %r11,%rax
  0x00007f75704bf6bd: jbe    0x00007f75704bf6d6
  0x00007f75704bf6c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704bf6cd: cmp    %r11,%rax
  0x00007f75704bf6d0: jb     0x00007f75704bf74d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bf6d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704bf6db: sub    $0x80,%rsp
  0x00007f75704bf6e2: mov    %rax,0x78(%rsp)
  0x00007f75704bf6e7: mov    %rcx,0x70(%rsp)
  0x00007f75704bf6ec: mov    %rdx,0x68(%rsp)
  0x00007f75704bf6f1: mov    %rbx,0x60(%rsp)
  0x00007f75704bf6f6: mov    %rbp,0x50(%rsp)
  0x00007f75704bf6fb: mov    %rsi,0x48(%rsp)
  0x00007f75704bf700: mov    %rdi,0x40(%rsp)
  0x00007f75704bf705: mov    %r8,0x38(%rsp)
  0x00007f75704bf70a: mov    %r9,0x30(%rsp)
  0x00007f75704bf70f: mov    %r10,0x28(%rsp)
  0x00007f75704bf714: mov    %r11,0x20(%rsp)
  0x00007f75704bf719: mov    %r12,0x18(%rsp)
  0x00007f75704bf71e: mov    %r13,0x10(%rsp)
  0x00007f75704bf723: mov    %r14,0x8(%rsp)
  0x00007f75704bf728: mov    %r15,(%rsp)
  0x00007f75704bf72c: movabs $0x7f758592f470,%rdi
  0x00007f75704bf736: movabs $0x7f75704bf6d6,%rsi
  0x00007f75704bf740: mov    %rsp,%rdx
  0x00007f75704bf743: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf747: callq  0x00007f75853729fa
  0x00007f75704bf74c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bf74d: mov    %rsp,%r11
  0x00007f75704bf750: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf754: push   %rax
  0x00007f75704bf755: mov    %r11,%rax
  0x00007f75704bf758: mov    0x50(%rbx),%r11
  0x00007f75704bf75c: mov    0x18(%rax),%esi
  0x00007f75704bf75f: mov    0x10(%rax),%edx
  0x00007f75704bf762: mov    0x8(%rax),%ecx
  0x00007f75704bf765: mov    %rbx,0x258(%r15)
  0x00007f75704bf76c: mov    %rbx,%rax
  0x00007f75704bf76f: jmpq   *%r11
  0x00007f75704bf772: mov    0x8(%rsi),%ebx
  0x00007f75704bf775: shl    $0x3,%rbx
  0x00007f75704bf779: cmp    0x10(%rax),%rbx
  0x00007f75704bf77d: mov    0x8(%rax),%rbx
  0x00007f75704bf781: je     0x00007f75704bf78c
  0x00007f75704bf787: jmpq   0x00007f757046ec40
  0x00007f75704bf78c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bf794: je     0x00007f75704bf88f
  0x00007f75704bf79a: jmpq   0x00007f757046ec40
  0x00007f75704bf79f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bf7a7: je     0x00007f75704bf88f
  0x00007f75704bf7ad: mov    %rsp,%r13
  0x00007f75704bf7b0: mov    (%rsp),%rax
  0x00007f75704bf7b4: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bf7b8: pushfq 
  0x00007f75704bf7b9: sub    $0x8,%rsp
  0x00007f75704bf7bd: mov    %rsp,-0x28(%rsp)
  0x00007f75704bf7c2: sub    $0x80,%rsp
  0x00007f75704bf7c9: mov    %rax,0x78(%rsp)
  0x00007f75704bf7ce: mov    %rcx,0x70(%rsp)
  0x00007f75704bf7d3: mov    %rdx,0x68(%rsp)
  0x00007f75704bf7d8: mov    %rbx,0x60(%rsp)
  0x00007f75704bf7dd: mov    %rbp,0x50(%rsp)
  0x00007f75704bf7e2: mov    %rsi,0x48(%rsp)
  0x00007f75704bf7e7: mov    %rdi,0x40(%rsp)
  0x00007f75704bf7ec: mov    %r8,0x38(%rsp)
  0x00007f75704bf7f1: mov    %r9,0x30(%rsp)
  0x00007f75704bf7f6: mov    %r10,0x28(%rsp)
  0x00007f75704bf7fb: mov    %r11,0x20(%rsp)
  0x00007f75704bf800: mov    %r12,0x18(%rsp)
  0x00007f75704bf805: mov    %r13,0x10(%rsp)
  0x00007f75704bf80a: mov    %r14,0x8(%rsp)
  0x00007f75704bf80f: mov    %r15,(%rsp)
  0x00007f75704bf813: sub    $0x200,%rsp
  0x00007f75704bf81a: fxsave64 (%rsp)
  0x00007f75704bf81f: mov    %rbx,%rdi
  0x00007f75704bf822: mov    %rax,%rsi
  0x00007f75704bf825: callq  0x00007f7585522bca
  0x00007f75704bf82a: fxrstor64 (%rsp)
  0x00007f75704bf82f: add    $0x200,%rsp
  0x00007f75704bf836: mov    (%rsp),%r15
  0x00007f75704bf83a: mov    0x8(%rsp),%r14
  0x00007f75704bf83f: mov    0x10(%rsp),%r13
  0x00007f75704bf844: mov    0x18(%rsp),%r12
  0x00007f75704bf849: mov    0x20(%rsp),%r11
  0x00007f75704bf84e: mov    0x28(%rsp),%r10
  0x00007f75704bf853: mov    0x30(%rsp),%r9
  0x00007f75704bf858: mov    0x38(%rsp),%r8
  0x00007f75704bf85d: mov    0x40(%rsp),%rdi
  0x00007f75704bf862: mov    0x48(%rsp),%rsi
  0x00007f75704bf867: mov    0x50(%rsp),%rbp
  0x00007f75704bf86c: mov    0x60(%rsp),%rbx
  0x00007f75704bf871: mov    0x68(%rsp),%rdx
  0x00007f75704bf876: mov    0x70(%rsp),%rcx
  0x00007f75704bf87b: mov    0x78(%rsp),%rax
  0x00007f75704bf880: add    $0x80,%rsp
  0x00007f75704bf887: add    $0x8,%rsp
  0x00007f75704bf88b: popfq  
  0x00007f75704bf88c: mov    %r13,%rsp
  0x00007f75704bf88f: pop    %rax
  0x00007f75704bf890: mov    %rsp,%r13
  0x00007f75704bf893: sub    $0x20,%rsp
  0x00007f75704bf897: mov    %rax,(%rsp)
  0x00007f75704bf89b: mov    %esi,0x18(%rsp)
  0x00007f75704bf89f: mov    %edx,0x10(%rsp)
  0x00007f75704bf8a3: mov    %ecx,0x8(%rsp)
  0x00007f75704bf8a7: mov    0x40(%rbx),%rcx
  0x00007f75704bf8ab: jmpq   *%rcx

AHE@0x00007f75800ea200: 0xab000000 i2c: 0x00007f75704bf960 c2i: 0x00007f75704bfa9d c2iUV: 0x00007f75704bfa70
i2c argument handler #39 for: static (ILjava/lang/Object;)Ljava/util/List; (584 bytes generated)
c2i argument handler starts at 0x7f75704bfa9d
  0x00007f75704bf960: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bf964: movabs $0x7f757036e3e0,%r11
  0x00007f75704bf96e: cmp    %r11,%rax
  0x00007f75704bf971: jbe    0x00007f75704bf98a
  0x00007f75704bf977: movabs $0x7f757046e3e0,%r11
  0x00007f75704bf981: cmp    %r11,%rax
  0x00007f75704bf984: jb     0x00007f75704bfa4d
  0x00007f75704bf98a: movabs $0x7f7570369420,%r11
  0x00007f75704bf994: cmp    %r11,%rax
  0x00007f75704bf997: jbe    0x00007f75704bf9b0
  0x00007f75704bf99d: movabs $0x7f757036de58,%r11
  0x00007f75704bf9a7: cmp    %r11,%rax
  0x00007f75704bf9aa: jb     0x00007f75704bfa4d
  0x00007f75704bf9b0: movabs $0x7f75704a9820,%r11
  0x00007f75704bf9ba: cmp    %r11,%rax
  0x00007f75704bf9bd: jbe    0x00007f75704bf9d6
  0x00007f75704bf9c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704bf9cd: cmp    %r11,%rax
  0x00007f75704bf9d0: jb     0x00007f75704bfa4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bf9d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704bf9db: sub    $0x80,%rsp
  0x00007f75704bf9e2: mov    %rax,0x78(%rsp)
  0x00007f75704bf9e7: mov    %rcx,0x70(%rsp)
  0x00007f75704bf9ec: mov    %rdx,0x68(%rsp)
  0x00007f75704bf9f1: mov    %rbx,0x60(%rsp)
  0x00007f75704bf9f6: mov    %rbp,0x50(%rsp)
  0x00007f75704bf9fb: mov    %rsi,0x48(%rsp)
  0x00007f75704bfa00: mov    %rdi,0x40(%rsp)
  0x00007f75704bfa05: mov    %r8,0x38(%rsp)
  0x00007f75704bfa0a: mov    %r9,0x30(%rsp)
  0x00007f75704bfa0f: mov    %r10,0x28(%rsp)
  0x00007f75704bfa14: mov    %r11,0x20(%rsp)
  0x00007f75704bfa19: mov    %r12,0x18(%rsp)
  0x00007f75704bfa1e: mov    %r13,0x10(%rsp)
  0x00007f75704bfa23: mov    %r14,0x8(%rsp)
  0x00007f75704bfa28: mov    %r15,(%rsp)
  0x00007f75704bfa2c: movabs $0x7f758592f470,%rdi
  0x00007f75704bfa36: movabs $0x7f75704bf9d6,%rsi
  0x00007f75704bfa40: mov    %rsp,%rdx
  0x00007f75704bfa43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bfa47: callq  0x00007f75853729fa
  0x00007f75704bfa4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bfa4d: mov    %rsp,%r11
  0x00007f75704bfa50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bfa54: push   %rax
  0x00007f75704bfa55: mov    %r11,%rax
  0x00007f75704bfa58: mov    0x50(%rbx),%r11
  0x00007f75704bfa5c: mov    0x10(%rax),%esi
  0x00007f75704bfa5f: mov    0x8(%rax),%rdx
  0x00007f75704bfa63: mov    %rbx,0x258(%r15)
  0x00007f75704bfa6a: mov    %rbx,%rax
  0x00007f75704bfa6d: jmpq   *%r11
  0x00007f75704bfa70: mov    0x8(%rsi),%ebx
  0x00007f75704bfa73: shl    $0x3,%rbx
  0x00007f75704bfa77: cmp    0x10(%rax),%rbx
  0x00007f75704bfa7b: mov    0x8(%rax),%rbx
  0x00007f75704bfa7f: je     0x00007f75704bfa8a
  0x00007f75704bfa85: jmpq   0x00007f757046ec40
  0x00007f75704bfa8a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bfa92: je     0x00007f75704bfb8d
  0x00007f75704bfa98: jmpq   0x00007f757046ec40
  0x00007f75704bfa9d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bfaa5: je     0x00007f75704bfb8d
  0x00007f75704bfaab: mov    %rsp,%r13
  0x00007f75704bfaae: mov    (%rsp),%rax
  0x00007f75704bfab2: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bfab6: pushfq 
  0x00007f75704bfab7: sub    $0x8,%rsp
  0x00007f75704bfabb: mov    %rsp,-0x28(%rsp)
  0x00007f75704bfac0: sub    $0x80,%rsp
  0x00007f75704bfac7: mov    %rax,0x78(%rsp)
  0x00007f75704bfacc: mov    %rcx,0x70(%rsp)
  0x00007f75704bfad1: mov    %rdx,0x68(%rsp)
  0x00007f75704bfad6: mov    %rbx,0x60(%rsp)
  0x00007f75704bfadb: mov    %rbp,0x50(%rsp)
  0x00007f75704bfae0: mov    %rsi,0x48(%rsp)
  0x00007f75704bfae5: mov    %rdi,0x40(%rsp)
  0x00007f75704bfaea: mov    %r8,0x38(%rsp)
  0x00007f75704bfaef: mov    %r9,0x30(%rsp)
  0x00007f75704bfaf4: mov    %r10,0x28(%rsp)
  0x00007f75704bfaf9: mov    %r11,0x20(%rsp)
  0x00007f75704bfafe: mov    %r12,0x18(%rsp)
  0x00007f75704bfb03: mov    %r13,0x10(%rsp)
  0x00007f75704bfb08: mov    %r14,0x8(%rsp)
  0x00007f75704bfb0d: mov    %r15,(%rsp)
  0x00007f75704bfb11: sub    $0x200,%rsp
  0x00007f75704bfb18: fxsave64 (%rsp)
  0x00007f75704bfb1d: mov    %rbx,%rdi
  0x00007f75704bfb20: mov    %rax,%rsi
  0x00007f75704bfb23: callq  0x00007f7585522bca
  0x00007f75704bfb28: fxrstor64 (%rsp)
  0x00007f75704bfb2d: add    $0x200,%rsp
  0x00007f75704bfb34: mov    (%rsp),%r15
  0x00007f75704bfb38: mov    0x8(%rsp),%r14
  0x00007f75704bfb3d: mov    0x10(%rsp),%r13
  0x00007f75704bfb42: mov    0x18(%rsp),%r12
  0x00007f75704bfb47: mov    0x20(%rsp),%r11
  0x00007f75704bfb4c: mov    0x28(%rsp),%r10
  0x00007f75704bfb51: mov    0x30(%rsp),%r9
  0x00007f75704bfb56: mov    0x38(%rsp),%r8
  0x00007f75704bfb5b: mov    0x40(%rsp),%rdi
  0x00007f75704bfb60: mov    0x48(%rsp),%rsi
  0x00007f75704bfb65: mov    0x50(%rsp),%rbp
  0x00007f75704bfb6a: mov    0x60(%rsp),%rbx
  0x00007f75704bfb6f: mov    0x68(%rsp),%rdx
  0x00007f75704bfb74: mov    0x70(%rsp),%rcx
  0x00007f75704bfb79: mov    0x78(%rsp),%rax
  0x00007f75704bfb7e: add    $0x80,%rsp
  0x00007f75704bfb85: add    $0x8,%rsp
  0x00007f75704bfb89: popfq  
  0x00007f75704bfb8a: mov    %r13,%rsp
  0x00007f75704bfb8d: pop    %rax
  0x00007f75704bfb8e: mov    %rsp,%r13
  0x00007f75704bfb91: sub    $0x20,%rsp
  0x00007f75704bfb95: mov    %rax,(%rsp)
  0x00007f75704bfb99: mov    %esi,0x10(%rsp)
  0x00007f75704bfb9d: mov    %rdx,0x8(%rsp)
  0x00007f75704bfba2: mov    0x40(%rbx),%rcx
  0x00007f75704bfba6: jmpq   *%rcx

AHE@0x00007f75800ea248: 0xbabbb000 i2c: 0x00007f75704bfc60 c2i: 0x00007f75704bfda9 c2iUV: 0x00007f75704bfd7c
i2c argument handler #40 for: receiver (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode; (611 bytes generated)
c2i argument handler starts at 0x7f75704bfda9
  0x00007f75704bfc60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bfc64: movabs $0x7f757036e3e0,%r11
  0x00007f75704bfc6e: cmp    %r11,%rax
  0x00007f75704bfc71: jbe    0x00007f75704bfc8a
  0x00007f75704bfc77: movabs $0x7f757046e3e0,%r11
  0x00007f75704bfc81: cmp    %r11,%rax
  0x00007f75704bfc84: jb     0x00007f75704bfd4d
  0x00007f75704bfc8a: movabs $0x7f7570369420,%r11
  0x00007f75704bfc94: cmp    %r11,%rax
  0x00007f75704bfc97: jbe    0x00007f75704bfcb0
  0x00007f75704bfc9d: movabs $0x7f757036de58,%r11
  0x00007f75704bfca7: cmp    %r11,%rax
  0x00007f75704bfcaa: jb     0x00007f75704bfd4d
  0x00007f75704bfcb0: movabs $0x7f75704a9820,%r11
  0x00007f75704bfcba: cmp    %r11,%rax
  0x00007f75704bfcbd: jbe    0x00007f75704bfcd6
  0x00007f75704bfcc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704bfccd: cmp    %r11,%rax
  0x00007f75704bfcd0: jb     0x00007f75704bfd4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704bfcd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704bfcdb: sub    $0x80,%rsp
  0x00007f75704bfce2: mov    %rax,0x78(%rsp)
  0x00007f75704bfce7: mov    %rcx,0x70(%rsp)
  0x00007f75704bfcec: mov    %rdx,0x68(%rsp)
  0x00007f75704bfcf1: mov    %rbx,0x60(%rsp)
  0x00007f75704bfcf6: mov    %rbp,0x50(%rsp)
  0x00007f75704bfcfb: mov    %rsi,0x48(%rsp)
  0x00007f75704bfd00: mov    %rdi,0x40(%rsp)
  0x00007f75704bfd05: mov    %r8,0x38(%rsp)
  0x00007f75704bfd0a: mov    %r9,0x30(%rsp)
  0x00007f75704bfd0f: mov    %r10,0x28(%rsp)
  0x00007f75704bfd14: mov    %r11,0x20(%rsp)
  0x00007f75704bfd19: mov    %r12,0x18(%rsp)
  0x00007f75704bfd1e: mov    %r13,0x10(%rsp)
  0x00007f75704bfd23: mov    %r14,0x8(%rsp)
  0x00007f75704bfd28: mov    %r15,(%rsp)
  0x00007f75704bfd2c: movabs $0x7f758592f470,%rdi
  0x00007f75704bfd36: movabs $0x7f75704bfcd6,%rsi
  0x00007f75704bfd40: mov    %rsp,%rdx
  0x00007f75704bfd43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bfd47: callq  0x00007f75853729fa
  0x00007f75704bfd4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704bfd4d: mov    %rsp,%r11
  0x00007f75704bfd50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bfd54: push   %rax
  0x00007f75704bfd55: mov    %r11,%rax
  0x00007f75704bfd58: mov    0x50(%rbx),%r11
  0x00007f75704bfd5c: mov    0x28(%rax),%rsi
  0x00007f75704bfd60: mov    0x20(%rax),%edx
  0x00007f75704bfd63: mov    0x18(%rax),%rcx
  0x00007f75704bfd67: mov    0x10(%rax),%r8
  0x00007f75704bfd6b: mov    0x8(%rax),%r9
  0x00007f75704bfd6f: mov    %rbx,0x258(%r15)
  0x00007f75704bfd76: mov    %rbx,%rax
  0x00007f75704bfd79: jmpq   *%r11
  0x00007f75704bfd7c: mov    0x8(%rsi),%ebx
  0x00007f75704bfd7f: shl    $0x3,%rbx
  0x00007f75704bfd83: cmp    0x10(%rax),%rbx
  0x00007f75704bfd87: mov    0x8(%rax),%rbx
  0x00007f75704bfd8b: je     0x00007f75704bfd96
  0x00007f75704bfd91: jmpq   0x00007f757046ec40
  0x00007f75704bfd96: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bfd9e: je     0x00007f75704bfe99
  0x00007f75704bfda4: jmpq   0x00007f757046ec40
  0x00007f75704bfda9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704bfdb1: je     0x00007f75704bfe99
  0x00007f75704bfdb7: mov    %rsp,%r13
  0x00007f75704bfdba: mov    (%rsp),%rax
  0x00007f75704bfdbe: and    $0xfffffffffffffff0,%rsp
  0x00007f75704bfdc2: pushfq 
  0x00007f75704bfdc3: sub    $0x8,%rsp
  0x00007f75704bfdc7: mov    %rsp,-0x28(%rsp)
  0x00007f75704bfdcc: sub    $0x80,%rsp
  0x00007f75704bfdd3: mov    %rax,0x78(%rsp)
  0x00007f75704bfdd8: mov    %rcx,0x70(%rsp)
  0x00007f75704bfddd: mov    %rdx,0x68(%rsp)
  0x00007f75704bfde2: mov    %rbx,0x60(%rsp)
  0x00007f75704bfde7: mov    %rbp,0x50(%rsp)
  0x00007f75704bfdec: mov    %rsi,0x48(%rsp)
  0x00007f75704bfdf1: mov    %rdi,0x40(%rsp)
  0x00007f75704bfdf6: mov    %r8,0x38(%rsp)
  0x00007f75704bfdfb: mov    %r9,0x30(%rsp)
  0x00007f75704bfe00: mov    %r10,0x28(%rsp)
  0x00007f75704bfe05: mov    %r11,0x20(%rsp)
  0x00007f75704bfe0a: mov    %r12,0x18(%rsp)
  0x00007f75704bfe0f: mov    %r13,0x10(%rsp)
  0x00007f75704bfe14: mov    %r14,0x8(%rsp)
  0x00007f75704bfe19: mov    %r15,(%rsp)
  0x00007f75704bfe1d: sub    $0x200,%rsp
  0x00007f75704bfe24: fxsave64 (%rsp)
  0x00007f75704bfe29: mov    %rbx,%rdi
  0x00007f75704bfe2c: mov    %rax,%rsi
  0x00007f75704bfe2f: callq  0x00007f7585522bca
  0x00007f75704bfe34: fxrstor64 (%rsp)
  0x00007f75704bfe39: add    $0x200,%rsp
  0x00007f75704bfe40: mov    (%rsp),%r15
  0x00007f75704bfe44: mov    0x8(%rsp),%r14
  0x00007f75704bfe49: mov    0x10(%rsp),%r13
  0x00007f75704bfe4e: mov    0x18(%rsp),%r12
  0x00007f75704bfe53: mov    0x20(%rsp),%r11
  0x00007f75704bfe58: mov    0x28(%rsp),%r10
  0x00007f75704bfe5d: mov    0x30(%rsp),%r9
  0x00007f75704bfe62: mov    0x38(%rsp),%r8
  0x00007f75704bfe67: mov    0x40(%rsp),%rdi
  0x00007f75704bfe6c: mov    0x48(%rsp),%rsi
  0x00007f75704bfe71: mov    0x50(%rsp),%rbp
  0x00007f75704bfe76: mov    0x60(%rsp),%rbx
  0x00007f75704bfe7b: mov    0x68(%rsp),%rdx
  0x00007f75704bfe80: mov    0x70(%rsp),%rcx
  0x00007f75704bfe85: mov    0x78(%rsp),%rax
  0x00007f75704bfe8a: add    $0x80,%rsp
  0x00007f75704bfe91: add    $0x8,%rsp
  0x00007f75704bfe95: popfq  
  0x00007f75704bfe96: mov    %r13,%rsp
  0x00007f75704bfe99: pop    %rax
  0x00007f75704bfe9a: mov    %rsp,%r13
  0x00007f75704bfe9d: sub    $0x30,%rsp
  0x00007f75704bfea1: mov    %rax,(%rsp)
  0x00007f75704bfea5: mov    %rsi,0x28(%rsp)
  0x00007f75704bfeaa: mov    %edx,0x20(%rsp)
  0x00007f75704bfeae: mov    %rcx,0x18(%rsp)
  0x00007f75704bfeb3: mov    %r8,0x10(%rsp)
  0x00007f75704bfeb8: mov    %r9,0x8(%rsp)
  0x00007f75704bfebd: mov    0x40(%rbx),%rcx
  0x00007f75704bfec1: jmpq   *%rcx

AHE@0x00007f75800ea290: 0xbabbaa00 i2c: 0x00007f75704bffa0 c2i: 0x00007f75704c00ec c2iUV: 0x00007f75704c00bf
i2c argument handler #41 for: receiver (ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node; (618 bytes generated)
c2i argument handler starts at 0x7f75704c00ec
  0x00007f75704bffa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704bffa4: movabs $0x7f757036e3e0,%r11
  0x00007f75704bffae: cmp    %r11,%rax
  0x00007f75704bffb1: jbe    0x00007f75704bffca
  0x00007f75704bffb7: movabs $0x7f757046e3e0,%r11
  0x00007f75704bffc1: cmp    %r11,%rax
  0x00007f75704bffc4: jb     0x00007f75704c008d
  0x00007f75704bffca: movabs $0x7f7570369420,%r11
  0x00007f75704bffd4: cmp    %r11,%rax
  0x00007f75704bffd7: jbe    0x00007f75704bfff0
  0x00007f75704bffdd: movabs $0x7f757036de58,%r11
  0x00007f75704bffe7: cmp    %r11,%rax
  0x00007f75704bffea: jb     0x00007f75704c008d
  0x00007f75704bfff0: movabs $0x7f75704a9820,%r11
  0x00007f75704bfffa: cmp    %r11,%rax
  0x00007f75704bfffd: jbe    0x00007f75704c0016
  0x00007f75704c0003: movabs $0x7f75704af5e0,%r11
  0x00007f75704c000d: cmp    %r11,%rax
  0x00007f75704c0010: jb     0x00007f75704c008d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c0016: mov    %rsp,-0x28(%rsp)
  0x00007f75704c001b: sub    $0x80,%rsp
  0x00007f75704c0022: mov    %rax,0x78(%rsp)
  0x00007f75704c0027: mov    %rcx,0x70(%rsp)
  0x00007f75704c002c: mov    %rdx,0x68(%rsp)
  0x00007f75704c0031: mov    %rbx,0x60(%rsp)
  0x00007f75704c0036: mov    %rbp,0x50(%rsp)
  0x00007f75704c003b: mov    %rsi,0x48(%rsp)
  0x00007f75704c0040: mov    %rdi,0x40(%rsp)
  0x00007f75704c0045: mov    %r8,0x38(%rsp)
  0x00007f75704c004a: mov    %r9,0x30(%rsp)
  0x00007f75704c004f: mov    %r10,0x28(%rsp)
  0x00007f75704c0054: mov    %r11,0x20(%rsp)
  0x00007f75704c0059: mov    %r12,0x18(%rsp)
  0x00007f75704c005e: mov    %r13,0x10(%rsp)
  0x00007f75704c0063: mov    %r14,0x8(%rsp)
  0x00007f75704c0068: mov    %r15,(%rsp)
  0x00007f75704c006c: movabs $0x7f758592f470,%rdi
  0x00007f75704c0076: movabs $0x7f75704c0016,%rsi
  0x00007f75704c0080: mov    %rsp,%rdx
  0x00007f75704c0083: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0087: callq  0x00007f75853729fa
  0x00007f75704c008c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c008d: mov    %rsp,%r11
  0x00007f75704c0090: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0094: push   %rax
  0x00007f75704c0095: mov    %r11,%rax
  0x00007f75704c0098: mov    0x50(%rbx),%r11
  0x00007f75704c009c: mov    0x30(%rax),%rsi
  0x00007f75704c00a0: mov    0x28(%rax),%edx
  0x00007f75704c00a3: mov    0x20(%rax),%rcx
  0x00007f75704c00a7: mov    0x18(%rax),%r8
  0x00007f75704c00ab: mov    0x10(%rax),%r9d
  0x00007f75704c00af: mov    0x8(%rax),%edi
  0x00007f75704c00b2: mov    %rbx,0x258(%r15)
  0x00007f75704c00b9: mov    %rbx,%rax
  0x00007f75704c00bc: jmpq   *%r11
  0x00007f75704c00bf: mov    0x8(%rsi),%ebx
  0x00007f75704c00c2: shl    $0x3,%rbx
  0x00007f75704c00c6: cmp    0x10(%rax),%rbx
  0x00007f75704c00ca: mov    0x8(%rax),%rbx
  0x00007f75704c00ce: je     0x00007f75704c00d9
  0x00007f75704c00d4: jmpq   0x00007f757046ec40
  0x00007f75704c00d9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c00e1: je     0x00007f75704c01dc
  0x00007f75704c00e7: jmpq   0x00007f757046ec40
  0x00007f75704c00ec: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c00f4: je     0x00007f75704c01dc
  0x00007f75704c00fa: mov    %rsp,%r13
  0x00007f75704c00fd: mov    (%rsp),%rax
  0x00007f75704c0101: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0105: pushfq 
  0x00007f75704c0106: sub    $0x8,%rsp
  0x00007f75704c010a: mov    %rsp,-0x28(%rsp)
  0x00007f75704c010f: sub    $0x80,%rsp
  0x00007f75704c0116: mov    %rax,0x78(%rsp)
  0x00007f75704c011b: mov    %rcx,0x70(%rsp)
  0x00007f75704c0120: mov    %rdx,0x68(%rsp)
  0x00007f75704c0125: mov    %rbx,0x60(%rsp)
  0x00007f75704c012a: mov    %rbp,0x50(%rsp)
  0x00007f75704c012f: mov    %rsi,0x48(%rsp)
  0x00007f75704c0134: mov    %rdi,0x40(%rsp)
  0x00007f75704c0139: mov    %r8,0x38(%rsp)
  0x00007f75704c013e: mov    %r9,0x30(%rsp)
  0x00007f75704c0143: mov    %r10,0x28(%rsp)
  0x00007f75704c0148: mov    %r11,0x20(%rsp)
  0x00007f75704c014d: mov    %r12,0x18(%rsp)
  0x00007f75704c0152: mov    %r13,0x10(%rsp)
  0x00007f75704c0157: mov    %r14,0x8(%rsp)
  0x00007f75704c015c: mov    %r15,(%rsp)
  0x00007f75704c0160: sub    $0x200,%rsp
  0x00007f75704c0167: fxsave64 (%rsp)
  0x00007f75704c016c: mov    %rbx,%rdi
  0x00007f75704c016f: mov    %rax,%rsi
  0x00007f75704c0172: callq  0x00007f7585522bca
  0x00007f75704c0177: fxrstor64 (%rsp)
  0x00007f75704c017c: add    $0x200,%rsp
  0x00007f75704c0183: mov    (%rsp),%r15
  0x00007f75704c0187: mov    0x8(%rsp),%r14
  0x00007f75704c018c: mov    0x10(%rsp),%r13
  0x00007f75704c0191: mov    0x18(%rsp),%r12
  0x00007f75704c0196: mov    0x20(%rsp),%r11
  0x00007f75704c019b: mov    0x28(%rsp),%r10
  0x00007f75704c01a0: mov    0x30(%rsp),%r9
  0x00007f75704c01a5: mov    0x38(%rsp),%r8
  0x00007f75704c01aa: mov    0x40(%rsp),%rdi
  0x00007f75704c01af: mov    0x48(%rsp),%rsi
  0x00007f75704c01b4: mov    0x50(%rsp),%rbp
  0x00007f75704c01b9: mov    0x60(%rsp),%rbx
  0x00007f75704c01be: mov    0x68(%rsp),%rdx
  0x00007f75704c01c3: mov    0x70(%rsp),%rcx
  0x00007f75704c01c8: mov    0x78(%rsp),%rax
  0x00007f75704c01cd: add    $0x80,%rsp
  0x00007f75704c01d4: add    $0x8,%rsp
  0x00007f75704c01d8: popfq  
  0x00007f75704c01d9: mov    %r13,%rsp
  0x00007f75704c01dc: pop    %rax
  0x00007f75704c01dd: mov    %rsp,%r13
  0x00007f75704c01e0: sub    $0x40,%rsp
  0x00007f75704c01e4: mov    %rax,(%rsp)
  0x00007f75704c01e8: mov    %rsi,0x30(%rsp)
  0x00007f75704c01ed: mov    %edx,0x28(%rsp)
  0x00007f75704c01f1: mov    %rcx,0x20(%rsp)
  0x00007f75704c01f6: mov    %r8,0x18(%rsp)
  0x00007f75704c01fb: mov    %r9d,0x10(%rsp)
  0x00007f75704c0200: mov    %edi,0x8(%rsp)
  0x00007f75704c0204: mov    0x40(%rbx),%rcx
  0x00007f75704c0208: jmpq   *%rcx

AHE@0x00007f75800ea2d8: 0xba600000 i2c: 0x00007f75704c02e0 c2i: 0x00007f75704c0422 c2iUV: 0x00007f75704c03f5
i2c argument handler #42 for: receiver (IF)V (595 bytes generated)
c2i argument handler starts at 0x7f75704c0422
  0x00007f75704c02e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c02e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c02ee: cmp    %r11,%rax
  0x00007f75704c02f1: jbe    0x00007f75704c030a
  0x00007f75704c02f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c0301: cmp    %r11,%rax
  0x00007f75704c0304: jb     0x00007f75704c03cd
  0x00007f75704c030a: movabs $0x7f7570369420,%r11
  0x00007f75704c0314: cmp    %r11,%rax
  0x00007f75704c0317: jbe    0x00007f75704c0330
  0x00007f75704c031d: movabs $0x7f757036de58,%r11
  0x00007f75704c0327: cmp    %r11,%rax
  0x00007f75704c032a: jb     0x00007f75704c03cd
  0x00007f75704c0330: movabs $0x7f75704a9820,%r11
  0x00007f75704c033a: cmp    %r11,%rax
  0x00007f75704c033d: jbe    0x00007f75704c0356
  0x00007f75704c0343: movabs $0x7f75704af5e0,%r11
  0x00007f75704c034d: cmp    %r11,%rax
  0x00007f75704c0350: jb     0x00007f75704c03cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c0356: mov    %rsp,-0x28(%rsp)
  0x00007f75704c035b: sub    $0x80,%rsp
  0x00007f75704c0362: mov    %rax,0x78(%rsp)
  0x00007f75704c0367: mov    %rcx,0x70(%rsp)
  0x00007f75704c036c: mov    %rdx,0x68(%rsp)
  0x00007f75704c0371: mov    %rbx,0x60(%rsp)
  0x00007f75704c0376: mov    %rbp,0x50(%rsp)
  0x00007f75704c037b: mov    %rsi,0x48(%rsp)
  0x00007f75704c0380: mov    %rdi,0x40(%rsp)
  0x00007f75704c0385: mov    %r8,0x38(%rsp)
  0x00007f75704c038a: mov    %r9,0x30(%rsp)
  0x00007f75704c038f: mov    %r10,0x28(%rsp)
  0x00007f75704c0394: mov    %r11,0x20(%rsp)
  0x00007f75704c0399: mov    %r12,0x18(%rsp)
  0x00007f75704c039e: mov    %r13,0x10(%rsp)
  0x00007f75704c03a3: mov    %r14,0x8(%rsp)
  0x00007f75704c03a8: mov    %r15,(%rsp)
  0x00007f75704c03ac: movabs $0x7f758592f470,%rdi
  0x00007f75704c03b6: movabs $0x7f75704c0356,%rsi
  0x00007f75704c03c0: mov    %rsp,%rdx
  0x00007f75704c03c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c03c7: callq  0x00007f75853729fa
  0x00007f75704c03cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c03cd: mov    %rsp,%r11
  0x00007f75704c03d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c03d4: push   %rax
  0x00007f75704c03d5: mov    %r11,%rax
  0x00007f75704c03d8: mov    0x50(%rbx),%r11
  0x00007f75704c03dc: mov    0x18(%rax),%rsi
  0x00007f75704c03e0: mov    0x10(%rax),%edx
  0x00007f75704c03e3: vmovss 0x8(%rax),%xmm0
  0x00007f75704c03e8: mov    %rbx,0x258(%r15)
  0x00007f75704c03ef: mov    %rbx,%rax
  0x00007f75704c03f2: jmpq   *%r11
  0x00007f75704c03f5: mov    0x8(%rsi),%ebx
  0x00007f75704c03f8: shl    $0x3,%rbx
  0x00007f75704c03fc: cmp    0x10(%rax),%rbx
  0x00007f75704c0400: mov    0x8(%rax),%rbx
  0x00007f75704c0404: je     0x00007f75704c040f
  0x00007f75704c040a: jmpq   0x00007f757046ec40
  0x00007f75704c040f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c0417: je     0x00007f75704c0512
  0x00007f75704c041d: jmpq   0x00007f757046ec40
  0x00007f75704c0422: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c042a: je     0x00007f75704c0512
  0x00007f75704c0430: mov    %rsp,%r13
  0x00007f75704c0433: mov    (%rsp),%rax
  0x00007f75704c0437: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c043b: pushfq 
  0x00007f75704c043c: sub    $0x8,%rsp
  0x00007f75704c0440: mov    %rsp,-0x28(%rsp)
  0x00007f75704c0445: sub    $0x80,%rsp
  0x00007f75704c044c: mov    %rax,0x78(%rsp)
  0x00007f75704c0451: mov    %rcx,0x70(%rsp)
  0x00007f75704c0456: mov    %rdx,0x68(%rsp)
  0x00007f75704c045b: mov    %rbx,0x60(%rsp)
  0x00007f75704c0460: mov    %rbp,0x50(%rsp)
  0x00007f75704c0465: mov    %rsi,0x48(%rsp)
  0x00007f75704c046a: mov    %rdi,0x40(%rsp)
  0x00007f75704c046f: mov    %r8,0x38(%rsp)
  0x00007f75704c0474: mov    %r9,0x30(%rsp)
  0x00007f75704c0479: mov    %r10,0x28(%rsp)
  0x00007f75704c047e: mov    %r11,0x20(%rsp)
  0x00007f75704c0483: mov    %r12,0x18(%rsp)
  0x00007f75704c0488: mov    %r13,0x10(%rsp)
  0x00007f75704c048d: mov    %r14,0x8(%rsp)
  0x00007f75704c0492: mov    %r15,(%rsp)
  0x00007f75704c0496: sub    $0x200,%rsp
  0x00007f75704c049d: fxsave64 (%rsp)
  0x00007f75704c04a2: mov    %rbx,%rdi
  0x00007f75704c04a5: mov    %rax,%rsi
  0x00007f75704c04a8: callq  0x00007f7585522bca
  0x00007f75704c04ad: fxrstor64 (%rsp)
  0x00007f75704c04b2: add    $0x200,%rsp
  0x00007f75704c04b9: mov    (%rsp),%r15
  0x00007f75704c04bd: mov    0x8(%rsp),%r14
  0x00007f75704c04c2: mov    0x10(%rsp),%r13
  0x00007f75704c04c7: mov    0x18(%rsp),%r12
  0x00007f75704c04cc: mov    0x20(%rsp),%r11
  0x00007f75704c04d1: mov    0x28(%rsp),%r10
  0x00007f75704c04d6: mov    0x30(%rsp),%r9
  0x00007f75704c04db: mov    0x38(%rsp),%r8
  0x00007f75704c04e0: mov    0x40(%rsp),%rdi
  0x00007f75704c04e5: mov    0x48(%rsp),%rsi
  0x00007f75704c04ea: mov    0x50(%rsp),%rbp
  0x00007f75704c04ef: mov    0x60(%rsp),%rbx
  0x00007f75704c04f4: mov    0x68(%rsp),%rdx
  0x00007f75704c04f9: mov    0x70(%rsp),%rcx
  0x00007f75704c04fe: mov    0x78(%rsp),%rax
  0x00007f75704c0503: add    $0x80,%rsp
  0x00007f75704c050a: add    $0x8,%rsp
  0x00007f75704c050e: popfq  
  0x00007f75704c050f: mov    %r13,%rsp
  0x00007f75704c0512: pop    %rax
  0x00007f75704c0513: mov    %rsp,%r13
  0x00007f75704c0516: sub    $0x20,%rsp
  0x00007f75704c051a: mov    %rax,(%rsp)
  0x00007f75704c051e: mov    %rsi,0x18(%rsp)
  0x00007f75704c0523: mov    %edx,0x10(%rsp)
  0x00007f75704c0527: vmovss %xmm0,0x8(%rsp)
  0x00007f75704c052d: mov    0x40(%rbx),%rcx
  0x00007f75704c0531: jmpq   *%rcx

AHE@0x00007f75800ea320: 0xaa000000 i2c: 0x00007f75704c05e0 c2i: 0x00007f75704c071c c2iUV: 0x00007f75704c06ef
i2c argument handler #43 for: static (II)V (582 bytes generated)
c2i argument handler starts at 0x7f75704c071c
  0x00007f75704c05e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c05e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c05ee: cmp    %r11,%rax
  0x00007f75704c05f1: jbe    0x00007f75704c060a
  0x00007f75704c05f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c0601: cmp    %r11,%rax
  0x00007f75704c0604: jb     0x00007f75704c06cd
  0x00007f75704c060a: movabs $0x7f7570369420,%r11
  0x00007f75704c0614: cmp    %r11,%rax
  0x00007f75704c0617: jbe    0x00007f75704c0630
  0x00007f75704c061d: movabs $0x7f757036de58,%r11
  0x00007f75704c0627: cmp    %r11,%rax
  0x00007f75704c062a: jb     0x00007f75704c06cd
  0x00007f75704c0630: movabs $0x7f75704a9820,%r11
  0x00007f75704c063a: cmp    %r11,%rax
  0x00007f75704c063d: jbe    0x00007f75704c0656
  0x00007f75704c0643: movabs $0x7f75704af5e0,%r11
  0x00007f75704c064d: cmp    %r11,%rax
  0x00007f75704c0650: jb     0x00007f75704c06cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c0656: mov    %rsp,-0x28(%rsp)
  0x00007f75704c065b: sub    $0x80,%rsp
  0x00007f75704c0662: mov    %rax,0x78(%rsp)
  0x00007f75704c0667: mov    %rcx,0x70(%rsp)
  0x00007f75704c066c: mov    %rdx,0x68(%rsp)
  0x00007f75704c0671: mov    %rbx,0x60(%rsp)
  0x00007f75704c0676: mov    %rbp,0x50(%rsp)
  0x00007f75704c067b: mov    %rsi,0x48(%rsp)
  0x00007f75704c0680: mov    %rdi,0x40(%rsp)
  0x00007f75704c0685: mov    %r8,0x38(%rsp)
  0x00007f75704c068a: mov    %r9,0x30(%rsp)
  0x00007f75704c068f: mov    %r10,0x28(%rsp)
  0x00007f75704c0694: mov    %r11,0x20(%rsp)
  0x00007f75704c0699: mov    %r12,0x18(%rsp)
  0x00007f75704c069e: mov    %r13,0x10(%rsp)
  0x00007f75704c06a3: mov    %r14,0x8(%rsp)
  0x00007f75704c06a8: mov    %r15,(%rsp)
  0x00007f75704c06ac: movabs $0x7f758592f470,%rdi
  0x00007f75704c06b6: movabs $0x7f75704c0656,%rsi
  0x00007f75704c06c0: mov    %rsp,%rdx
  0x00007f75704c06c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c06c7: callq  0x00007f75853729fa
  0x00007f75704c06cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c06cd: mov    %rsp,%r11
  0x00007f75704c06d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c06d4: push   %rax
  0x00007f75704c06d5: mov    %r11,%rax
  0x00007f75704c06d8: mov    0x50(%rbx),%r11
  0x00007f75704c06dc: mov    0x10(%rax),%esi
  0x00007f75704c06df: mov    0x8(%rax),%edx
  0x00007f75704c06e2: mov    %rbx,0x258(%r15)
  0x00007f75704c06e9: mov    %rbx,%rax
  0x00007f75704c06ec: jmpq   *%r11
  0x00007f75704c06ef: mov    0x8(%rsi),%ebx
  0x00007f75704c06f2: shl    $0x3,%rbx
  0x00007f75704c06f6: cmp    0x10(%rax),%rbx
  0x00007f75704c06fa: mov    0x8(%rax),%rbx
  0x00007f75704c06fe: je     0x00007f75704c0709
  0x00007f75704c0704: jmpq   0x00007f757046ec40
  0x00007f75704c0709: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c0711: je     0x00007f75704c080c
  0x00007f75704c0717: jmpq   0x00007f757046ec40
  0x00007f75704c071c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c0724: je     0x00007f75704c080c
  0x00007f75704c072a: mov    %rsp,%r13
  0x00007f75704c072d: mov    (%rsp),%rax
  0x00007f75704c0731: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0735: pushfq 
  0x00007f75704c0736: sub    $0x8,%rsp
  0x00007f75704c073a: mov    %rsp,-0x28(%rsp)
  0x00007f75704c073f: sub    $0x80,%rsp
  0x00007f75704c0746: mov    %rax,0x78(%rsp)
  0x00007f75704c074b: mov    %rcx,0x70(%rsp)
  0x00007f75704c0750: mov    %rdx,0x68(%rsp)
  0x00007f75704c0755: mov    %rbx,0x60(%rsp)
  0x00007f75704c075a: mov    %rbp,0x50(%rsp)
  0x00007f75704c075f: mov    %rsi,0x48(%rsp)
  0x00007f75704c0764: mov    %rdi,0x40(%rsp)
  0x00007f75704c0769: mov    %r8,0x38(%rsp)
  0x00007f75704c076e: mov    %r9,0x30(%rsp)
  0x00007f75704c0773: mov    %r10,0x28(%rsp)
  0x00007f75704c0778: mov    %r11,0x20(%rsp)
  0x00007f75704c077d: mov    %r12,0x18(%rsp)
  0x00007f75704c0782: mov    %r13,0x10(%rsp)
  0x00007f75704c0787: mov    %r14,0x8(%rsp)
  0x00007f75704c078c: mov    %r15,(%rsp)
  0x00007f75704c0790: sub    $0x200,%rsp
  0x00007f75704c0797: fxsave64 (%rsp)
  0x00007f75704c079c: mov    %rbx,%rdi
  0x00007f75704c079f: mov    %rax,%rsi
  0x00007f75704c07a2: callq  0x00007f7585522bca
  0x00007f75704c07a7: fxrstor64 (%rsp)
  0x00007f75704c07ac: add    $0x200,%rsp
  0x00007f75704c07b3: mov    (%rsp),%r15
  0x00007f75704c07b7: mov    0x8(%rsp),%r14
  0x00007f75704c07bc: mov    0x10(%rsp),%r13
  0x00007f75704c07c1: mov    0x18(%rsp),%r12
  0x00007f75704c07c6: mov    0x20(%rsp),%r11
  0x00007f75704c07cb: mov    0x28(%rsp),%r10
  0x00007f75704c07d0: mov    0x30(%rsp),%r9
  0x00007f75704c07d5: mov    0x38(%rsp),%r8
  0x00007f75704c07da: mov    0x40(%rsp),%rdi
  0x00007f75704c07df: mov    0x48(%rsp),%rsi
  0x00007f75704c07e4: mov    0x50(%rsp),%rbp
  0x00007f75704c07e9: mov    0x60(%rsp),%rbx
  0x00007f75704c07ee: mov    0x68(%rsp),%rdx
  0x00007f75704c07f3: mov    0x70(%rsp),%rcx
  0x00007f75704c07f8: mov    0x78(%rsp),%rax
  0x00007f75704c07fd: add    $0x80,%rsp
  0x00007f75704c0804: add    $0x8,%rsp
  0x00007f75704c0808: popfq  
  0x00007f75704c0809: mov    %r13,%rsp
  0x00007f75704c080c: pop    %rax
  0x00007f75704c080d: mov    %rsp,%r13
  0x00007f75704c0810: sub    $0x20,%rsp
  0x00007f75704c0814: mov    %rax,(%rsp)
  0x00007f75704c0818: mov    %esi,0x10(%rsp)
  0x00007f75704c081c: mov    %edx,0x8(%rsp)
  0x00007f75704c0820: mov    0x40(%rbx),%rcx
  0x00007f75704c0824: jmpq   *%rcx

AHE@0x00007f75800ea368: 0xbabba000 i2c: 0x00007f75704c08e0 c2i: 0x00007f75704c0a29 c2iUV: 0x00007f75704c09fc
i2c argument handler #44 for: receiver (ILjava/lang/Object;Ljava/lang/Object;I)V (611 bytes generated)
c2i argument handler starts at 0x7f75704c0a29
  0x00007f75704c08e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c08e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c08ee: cmp    %r11,%rax
  0x00007f75704c08f1: jbe    0x00007f75704c090a
  0x00007f75704c08f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c0901: cmp    %r11,%rax
  0x00007f75704c0904: jb     0x00007f75704c09cd
  0x00007f75704c090a: movabs $0x7f7570369420,%r11
  0x00007f75704c0914: cmp    %r11,%rax
  0x00007f75704c0917: jbe    0x00007f75704c0930
  0x00007f75704c091d: movabs $0x7f757036de58,%r11
  0x00007f75704c0927: cmp    %r11,%rax
  0x00007f75704c092a: jb     0x00007f75704c09cd
  0x00007f75704c0930: movabs $0x7f75704a9820,%r11
  0x00007f75704c093a: cmp    %r11,%rax
  0x00007f75704c093d: jbe    0x00007f75704c0956
  0x00007f75704c0943: movabs $0x7f75704af5e0,%r11
  0x00007f75704c094d: cmp    %r11,%rax
  0x00007f75704c0950: jb     0x00007f75704c09cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c0956: mov    %rsp,-0x28(%rsp)
  0x00007f75704c095b: sub    $0x80,%rsp
  0x00007f75704c0962: mov    %rax,0x78(%rsp)
  0x00007f75704c0967: mov    %rcx,0x70(%rsp)
  0x00007f75704c096c: mov    %rdx,0x68(%rsp)
  0x00007f75704c0971: mov    %rbx,0x60(%rsp)
  0x00007f75704c0976: mov    %rbp,0x50(%rsp)
  0x00007f75704c097b: mov    %rsi,0x48(%rsp)
  0x00007f75704c0980: mov    %rdi,0x40(%rsp)
  0x00007f75704c0985: mov    %r8,0x38(%rsp)
  0x00007f75704c098a: mov    %r9,0x30(%rsp)
  0x00007f75704c098f: mov    %r10,0x28(%rsp)
  0x00007f75704c0994: mov    %r11,0x20(%rsp)
  0x00007f75704c0999: mov    %r12,0x18(%rsp)
  0x00007f75704c099e: mov    %r13,0x10(%rsp)
  0x00007f75704c09a3: mov    %r14,0x8(%rsp)
  0x00007f75704c09a8: mov    %r15,(%rsp)
  0x00007f75704c09ac: movabs $0x7f758592f470,%rdi
  0x00007f75704c09b6: movabs $0x7f75704c0956,%rsi
  0x00007f75704c09c0: mov    %rsp,%rdx
  0x00007f75704c09c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c09c7: callq  0x00007f75853729fa
  0x00007f75704c09cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c09cd: mov    %rsp,%r11
  0x00007f75704c09d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c09d4: push   %rax
  0x00007f75704c09d5: mov    %r11,%rax
  0x00007f75704c09d8: mov    0x50(%rbx),%r11
  0x00007f75704c09dc: mov    0x28(%rax),%rsi
  0x00007f75704c09e0: mov    0x20(%rax),%edx
  0x00007f75704c09e3: mov    0x18(%rax),%rcx
  0x00007f75704c09e7: mov    0x10(%rax),%r8
  0x00007f75704c09eb: mov    0x8(%rax),%r9d
  0x00007f75704c09ef: mov    %rbx,0x258(%r15)
  0x00007f75704c09f6: mov    %rbx,%rax
  0x00007f75704c09f9: jmpq   *%r11
  0x00007f75704c09fc: mov    0x8(%rsi),%ebx
  0x00007f75704c09ff: shl    $0x3,%rbx
  0x00007f75704c0a03: cmp    0x10(%rax),%rbx
  0x00007f75704c0a07: mov    0x8(%rax),%rbx
  0x00007f75704c0a0b: je     0x00007f75704c0a16
  0x00007f75704c0a11: jmpq   0x00007f757046ec40
  0x00007f75704c0a16: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c0a1e: je     0x00007f75704c0b19
  0x00007f75704c0a24: jmpq   0x00007f757046ec40
  0x00007f75704c0a29: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c0a31: je     0x00007f75704c0b19
  0x00007f75704c0a37: mov    %rsp,%r13
  0x00007f75704c0a3a: mov    (%rsp),%rax
  0x00007f75704c0a3e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0a42: pushfq 
  0x00007f75704c0a43: sub    $0x8,%rsp
  0x00007f75704c0a47: mov    %rsp,-0x28(%rsp)
  0x00007f75704c0a4c: sub    $0x80,%rsp
  0x00007f75704c0a53: mov    %rax,0x78(%rsp)
  0x00007f75704c0a58: mov    %rcx,0x70(%rsp)
  0x00007f75704c0a5d: mov    %rdx,0x68(%rsp)
  0x00007f75704c0a62: mov    %rbx,0x60(%rsp)
  0x00007f75704c0a67: mov    %rbp,0x50(%rsp)
  0x00007f75704c0a6c: mov    %rsi,0x48(%rsp)
  0x00007f75704c0a71: mov    %rdi,0x40(%rsp)
  0x00007f75704c0a76: mov    %r8,0x38(%rsp)
  0x00007f75704c0a7b: mov    %r9,0x30(%rsp)
  0x00007f75704c0a80: mov    %r10,0x28(%rsp)
  0x00007f75704c0a85: mov    %r11,0x20(%rsp)
  0x00007f75704c0a8a: mov    %r12,0x18(%rsp)
  0x00007f75704c0a8f: mov    %r13,0x10(%rsp)
  0x00007f75704c0a94: mov    %r14,0x8(%rsp)
  0x00007f75704c0a99: mov    %r15,(%rsp)
  0x00007f75704c0a9d: sub    $0x200,%rsp
  0x00007f75704c0aa4: fxsave64 (%rsp)
  0x00007f75704c0aa9: mov    %rbx,%rdi
  0x00007f75704c0aac: mov    %rax,%rsi
  0x00007f75704c0aaf: callq  0x00007f7585522bca
  0x00007f75704c0ab4: fxrstor64 (%rsp)
  0x00007f75704c0ab9: add    $0x200,%rsp
  0x00007f75704c0ac0: mov    (%rsp),%r15
  0x00007f75704c0ac4: mov    0x8(%rsp),%r14
  0x00007f75704c0ac9: mov    0x10(%rsp),%r13
  0x00007f75704c0ace: mov    0x18(%rsp),%r12
  0x00007f75704c0ad3: mov    0x20(%rsp),%r11
  0x00007f75704c0ad8: mov    0x28(%rsp),%r10
  0x00007f75704c0add: mov    0x30(%rsp),%r9
  0x00007f75704c0ae2: mov    0x38(%rsp),%r8
  0x00007f75704c0ae7: mov    0x40(%rsp),%rdi
  0x00007f75704c0aec: mov    0x48(%rsp),%rsi
  0x00007f75704c0af1: mov    0x50(%rsp),%rbp
  0x00007f75704c0af6: mov    0x60(%rsp),%rbx
  0x00007f75704c0afb: mov    0x68(%rsp),%rdx
  0x00007f75704c0b00: mov    0x70(%rsp),%rcx
  0x00007f75704c0b05: mov    0x78(%rsp),%rax
  0x00007f75704c0b0a: add    $0x80,%rsp
  0x00007f75704c0b11: add    $0x8,%rsp
  0x00007f75704c0b15: popfq  
  0x00007f75704c0b16: mov    %r13,%rsp
  0x00007f75704c0b19: pop    %rax
  0x00007f75704c0b1a: mov    %rsp,%r13
  0x00007f75704c0b1d: sub    $0x30,%rsp
  0x00007f75704c0b21: mov    %rax,(%rsp)
  0x00007f75704c0b25: mov    %rsi,0x28(%rsp)
  0x00007f75704c0b2a: mov    %edx,0x20(%rsp)
  0x00007f75704c0b2e: mov    %rcx,0x18(%rsp)
  0x00007f75704c0b33: mov    %r8,0x10(%rsp)
  0x00007f75704c0b38: mov    %r9d,0x8(%rsp)
  0x00007f75704c0b3d: mov    0x40(%rbx),%rcx
  0x00007f75704c0b41: jmpq   *%rcx

AHE@0x00007f75800ea3b0: 0x66000000 i2c: 0x00007f75704c0c20 c2i: 0x00007f75704c0d60 c2iUV: 0x00007f75704c0d33
i2c argument handler #45 for: static (FF)F (590 bytes generated)
c2i argument handler starts at 0x7f75704c0d60
  0x00007f75704c0c20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c0c24: movabs $0x7f757036e3e0,%r11
  0x00007f75704c0c2e: cmp    %r11,%rax
  0x00007f75704c0c31: jbe    0x00007f75704c0c4a
  0x00007f75704c0c37: movabs $0x7f757046e3e0,%r11
  0x00007f75704c0c41: cmp    %r11,%rax
  0x00007f75704c0c44: jb     0x00007f75704c0d0d
  0x00007f75704c0c4a: movabs $0x7f7570369420,%r11
  0x00007f75704c0c54: cmp    %r11,%rax
  0x00007f75704c0c57: jbe    0x00007f75704c0c70
  0x00007f75704c0c5d: movabs $0x7f757036de58,%r11
  0x00007f75704c0c67: cmp    %r11,%rax
  0x00007f75704c0c6a: jb     0x00007f75704c0d0d
  0x00007f75704c0c70: movabs $0x7f75704a9820,%r11
  0x00007f75704c0c7a: cmp    %r11,%rax
  0x00007f75704c0c7d: jbe    0x00007f75704c0c96
  0x00007f75704c0c83: movabs $0x7f75704af5e0,%r11
  0x00007f75704c0c8d: cmp    %r11,%rax
  0x00007f75704c0c90: jb     0x00007f75704c0d0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c0c96: mov    %rsp,-0x28(%rsp)
  0x00007f75704c0c9b: sub    $0x80,%rsp
  0x00007f75704c0ca2: mov    %rax,0x78(%rsp)
  0x00007f75704c0ca7: mov    %rcx,0x70(%rsp)
  0x00007f75704c0cac: mov    %rdx,0x68(%rsp)
  0x00007f75704c0cb1: mov    %rbx,0x60(%rsp)
  0x00007f75704c0cb6: mov    %rbp,0x50(%rsp)
  0x00007f75704c0cbb: mov    %rsi,0x48(%rsp)
  0x00007f75704c0cc0: mov    %rdi,0x40(%rsp)
  0x00007f75704c0cc5: mov    %r8,0x38(%rsp)
  0x00007f75704c0cca: mov    %r9,0x30(%rsp)
  0x00007f75704c0ccf: mov    %r10,0x28(%rsp)
  0x00007f75704c0cd4: mov    %r11,0x20(%rsp)
  0x00007f75704c0cd9: mov    %r12,0x18(%rsp)
  0x00007f75704c0cde: mov    %r13,0x10(%rsp)
  0x00007f75704c0ce3: mov    %r14,0x8(%rsp)
  0x00007f75704c0ce8: mov    %r15,(%rsp)
  0x00007f75704c0cec: movabs $0x7f758592f470,%rdi
  0x00007f75704c0cf6: movabs $0x7f75704c0c96,%rsi
  0x00007f75704c0d00: mov    %rsp,%rdx
  0x00007f75704c0d03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0d07: callq  0x00007f75853729fa
  0x00007f75704c0d0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c0d0d: mov    %rsp,%r11
  0x00007f75704c0d10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0d14: push   %rax
  0x00007f75704c0d15: mov    %r11,%rax
  0x00007f75704c0d18: mov    0x50(%rbx),%r11
  0x00007f75704c0d1c: vmovss 0x10(%rax),%xmm0
  0x00007f75704c0d21: vmovss 0x8(%rax),%xmm1
  0x00007f75704c0d26: mov    %rbx,0x258(%r15)
  0x00007f75704c0d2d: mov    %rbx,%rax
  0x00007f75704c0d30: jmpq   *%r11
  0x00007f75704c0d33: mov    0x8(%rsi),%ebx
  0x00007f75704c0d36: shl    $0x3,%rbx
  0x00007f75704c0d3a: cmp    0x10(%rax),%rbx
  0x00007f75704c0d3e: mov    0x8(%rax),%rbx
  0x00007f75704c0d42: je     0x00007f75704c0d4d
  0x00007f75704c0d48: jmpq   0x00007f757046ec40
  0x00007f75704c0d4d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c0d55: je     0x00007f75704c0e50
  0x00007f75704c0d5b: jmpq   0x00007f757046ec40
  0x00007f75704c0d60: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c0d68: je     0x00007f75704c0e50
  0x00007f75704c0d6e: mov    %rsp,%r13
  0x00007f75704c0d71: mov    (%rsp),%rax
  0x00007f75704c0d75: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c0d79: pushfq 
  0x00007f75704c0d7a: sub    $0x8,%rsp
  0x00007f75704c0d7e: mov    %rsp,-0x28(%rsp)
  0x00007f75704c0d83: sub    $0x80,%rsp
  0x00007f75704c0d8a: mov    %rax,0x78(%rsp)
  0x00007f75704c0d8f: mov    %rcx,0x70(%rsp)
  0x00007f75704c0d94: mov    %rdx,0x68(%rsp)
  0x00007f75704c0d99: mov    %rbx,0x60(%rsp)
  0x00007f75704c0d9e: mov    %rbp,0x50(%rsp)
  0x00007f75704c0da3: mov    %rsi,0x48(%rsp)
  0x00007f75704c0da8: mov    %rdi,0x40(%rsp)
  0x00007f75704c0dad: mov    %r8,0x38(%rsp)
  0x00007f75704c0db2: mov    %r9,0x30(%rsp)
  0x00007f75704c0db7: mov    %r10,0x28(%rsp)
  0x00007f75704c0dbc: mov    %r11,0x20(%rsp)
  0x00007f75704c0dc1: mov    %r12,0x18(%rsp)
  0x00007f75704c0dc6: mov    %r13,0x10(%rsp)
  0x00007f75704c0dcb: mov    %r14,0x8(%rsp)
  0x00007f75704c0dd0: mov    %r15,(%rsp)
  0x00007f75704c0dd4: sub    $0x200,%rsp
  0x00007f75704c0ddb: fxsave64 (%rsp)
  0x00007f75704c0de0: mov    %rbx,%rdi
  0x00007f75704c0de3: mov    %rax,%rsi
  0x00007f75704c0de6: callq  0x00007f7585522bca
  0x00007f75704c0deb: fxrstor64 (%rsp)
  0x00007f75704c0df0: add    $0x200,%rsp
  0x00007f75704c0df7: mov    (%rsp),%r15
  0x00007f75704c0dfb: mov    0x8(%rsp),%r14
  0x00007f75704c0e00: mov    0x10(%rsp),%r13
  0x00007f75704c0e05: mov    0x18(%rsp),%r12
  0x00007f75704c0e0a: mov    0x20(%rsp),%r11
  0x00007f75704c0e0f: mov    0x28(%rsp),%r10
  0x00007f75704c0e14: mov    0x30(%rsp),%r9
  0x00007f75704c0e19: mov    0x38(%rsp),%r8
  0x00007f75704c0e1e: mov    0x40(%rsp),%rdi
  0x00007f75704c0e23: mov    0x48(%rsp),%rsi
  0x00007f75704c0e28: mov    0x50(%rsp),%rbp
  0x00007f75704c0e2d: mov    0x60(%rsp),%rbx
  0x00007f75704c0e32: mov    0x68(%rsp),%rdx
  0x00007f75704c0e37: mov    0x70(%rsp),%rcx
  0x00007f75704c0e3c: mov    0x78(%rsp),%rax
  0x00007f75704c0e41: add    $0x80,%rsp
  0x00007f75704c0e48: add    $0x8,%rsp
  0x00007f75704c0e4c: popfq  
  0x00007f75704c0e4d: mov    %r13,%rsp
  0x00007f75704c0e50: pop    %rax
  0x00007f75704c0e51: mov    %rsp,%r13
  0x00007f75704c0e54: sub    $0x20,%rsp
  0x00007f75704c0e58: mov    %rax,(%rsp)
  0x00007f75704c0e5c: vmovss %xmm0,0x10(%rsp)
  0x00007f75704c0e62: vmovss %xmm1,0x8(%rsp)
  0x00007f75704c0e68: mov    0x40(%rbx),%rcx
  0x00007f75704c0e6c: jmpq   *%rcx

AHE@0x00007f75800ea3f8: 0xb6000000 i2c: 0x00007f75704c0f20 c2i: 0x00007f75704c105f c2iUV: 0x00007f75704c1032
i2c argument handler #46 for: receiver (F)V (588 bytes generated)
c2i argument handler starts at 0x7f75704c105f
  0x00007f75704c0f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c0f24: movabs $0x7f757036e3e0,%r11
  0x00007f75704c0f2e: cmp    %r11,%rax
  0x00007f75704c0f31: jbe    0x00007f75704c0f4a
  0x00007f75704c0f37: movabs $0x7f757046e3e0,%r11
  0x00007f75704c0f41: cmp    %r11,%rax
  0x00007f75704c0f44: jb     0x00007f75704c100d
  0x00007f75704c0f4a: movabs $0x7f7570369420,%r11
  0x00007f75704c0f54: cmp    %r11,%rax
  0x00007f75704c0f57: jbe    0x00007f75704c0f70
  0x00007f75704c0f5d: movabs $0x7f757036de58,%r11
  0x00007f75704c0f67: cmp    %r11,%rax
  0x00007f75704c0f6a: jb     0x00007f75704c100d
  0x00007f75704c0f70: movabs $0x7f75704a9820,%r11
  0x00007f75704c0f7a: cmp    %r11,%rax
  0x00007f75704c0f7d: jbe    0x00007f75704c0f96
  0x00007f75704c0f83: movabs $0x7f75704af5e0,%r11
  0x00007f75704c0f8d: cmp    %r11,%rax
  0x00007f75704c0f90: jb     0x00007f75704c100d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c0f96: mov    %rsp,-0x28(%rsp)
  0x00007f75704c0f9b: sub    $0x80,%rsp
  0x00007f75704c0fa2: mov    %rax,0x78(%rsp)
  0x00007f75704c0fa7: mov    %rcx,0x70(%rsp)
  0x00007f75704c0fac: mov    %rdx,0x68(%rsp)
  0x00007f75704c0fb1: mov    %rbx,0x60(%rsp)
  0x00007f75704c0fb6: mov    %rbp,0x50(%rsp)
  0x00007f75704c0fbb: mov    %rsi,0x48(%rsp)
  0x00007f75704c0fc0: mov    %rdi,0x40(%rsp)
  0x00007f75704c0fc5: mov    %r8,0x38(%rsp)
  0x00007f75704c0fca: mov    %r9,0x30(%rsp)
  0x00007f75704c0fcf: mov    %r10,0x28(%rsp)
  0x00007f75704c0fd4: mov    %r11,0x20(%rsp)
  0x00007f75704c0fd9: mov    %r12,0x18(%rsp)
  0x00007f75704c0fde: mov    %r13,0x10(%rsp)
  0x00007f75704c0fe3: mov    %r14,0x8(%rsp)
  0x00007f75704c0fe8: mov    %r15,(%rsp)
  0x00007f75704c0fec: movabs $0x7f758592f470,%rdi
  0x00007f75704c0ff6: movabs $0x7f75704c0f96,%rsi
  0x00007f75704c1000: mov    %rsp,%rdx
  0x00007f75704c1003: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1007: callq  0x00007f75853729fa
  0x00007f75704c100c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c100d: mov    %rsp,%r11
  0x00007f75704c1010: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1014: push   %rax
  0x00007f75704c1015: mov    %r11,%rax
  0x00007f75704c1018: mov    0x50(%rbx),%r11
  0x00007f75704c101c: mov    0x10(%rax),%rsi
  0x00007f75704c1020: vmovss 0x8(%rax),%xmm0
  0x00007f75704c1025: mov    %rbx,0x258(%r15)
  0x00007f75704c102c: mov    %rbx,%rax
  0x00007f75704c102f: jmpq   *%r11
  0x00007f75704c1032: mov    0x8(%rsi),%ebx
  0x00007f75704c1035: shl    $0x3,%rbx
  0x00007f75704c1039: cmp    0x10(%rax),%rbx
  0x00007f75704c103d: mov    0x8(%rax),%rbx
  0x00007f75704c1041: je     0x00007f75704c104c
  0x00007f75704c1047: jmpq   0x00007f757046ec40
  0x00007f75704c104c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1054: je     0x00007f75704c114f
  0x00007f75704c105a: jmpq   0x00007f757046ec40
  0x00007f75704c105f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1067: je     0x00007f75704c114f
  0x00007f75704c106d: mov    %rsp,%r13
  0x00007f75704c1070: mov    (%rsp),%rax
  0x00007f75704c1074: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1078: pushfq 
  0x00007f75704c1079: sub    $0x8,%rsp
  0x00007f75704c107d: mov    %rsp,-0x28(%rsp)
  0x00007f75704c1082: sub    $0x80,%rsp
  0x00007f75704c1089: mov    %rax,0x78(%rsp)
  0x00007f75704c108e: mov    %rcx,0x70(%rsp)
  0x00007f75704c1093: mov    %rdx,0x68(%rsp)
  0x00007f75704c1098: mov    %rbx,0x60(%rsp)
  0x00007f75704c109d: mov    %rbp,0x50(%rsp)
  0x00007f75704c10a2: mov    %rsi,0x48(%rsp)
  0x00007f75704c10a7: mov    %rdi,0x40(%rsp)
  0x00007f75704c10ac: mov    %r8,0x38(%rsp)
  0x00007f75704c10b1: mov    %r9,0x30(%rsp)
  0x00007f75704c10b6: mov    %r10,0x28(%rsp)
  0x00007f75704c10bb: mov    %r11,0x20(%rsp)
  0x00007f75704c10c0: mov    %r12,0x18(%rsp)
  0x00007f75704c10c5: mov    %r13,0x10(%rsp)
  0x00007f75704c10ca: mov    %r14,0x8(%rsp)
  0x00007f75704c10cf: mov    %r15,(%rsp)
  0x00007f75704c10d3: sub    $0x200,%rsp
  0x00007f75704c10da: fxsave64 (%rsp)
  0x00007f75704c10df: mov    %rbx,%rdi
  0x00007f75704c10e2: mov    %rax,%rsi
  0x00007f75704c10e5: callq  0x00007f7585522bca
  0x00007f75704c10ea: fxrstor64 (%rsp)
  0x00007f75704c10ef: add    $0x200,%rsp
  0x00007f75704c10f6: mov    (%rsp),%r15
  0x00007f75704c10fa: mov    0x8(%rsp),%r14
  0x00007f75704c10ff: mov    0x10(%rsp),%r13
  0x00007f75704c1104: mov    0x18(%rsp),%r12
  0x00007f75704c1109: mov    0x20(%rsp),%r11
  0x00007f75704c110e: mov    0x28(%rsp),%r10
  0x00007f75704c1113: mov    0x30(%rsp),%r9
  0x00007f75704c1118: mov    0x38(%rsp),%r8
  0x00007f75704c111d: mov    0x40(%rsp),%rdi
  0x00007f75704c1122: mov    0x48(%rsp),%rsi
  0x00007f75704c1127: mov    0x50(%rsp),%rbp
  0x00007f75704c112c: mov    0x60(%rsp),%rbx
  0x00007f75704c1131: mov    0x68(%rsp),%rdx
  0x00007f75704c1136: mov    0x70(%rsp),%rcx
  0x00007f75704c113b: mov    0x78(%rsp),%rax
  0x00007f75704c1140: add    $0x80,%rsp
  0x00007f75704c1147: add    $0x8,%rsp
  0x00007f75704c114b: popfq  
  0x00007f75704c114c: mov    %r13,%rsp
  0x00007f75704c114f: pop    %rax
  0x00007f75704c1150: mov    %rsp,%r13
  0x00007f75704c1153: sub    $0x20,%rsp
  0x00007f75704c1157: mov    %rax,(%rsp)
  0x00007f75704c115b: mov    %rsi,0x10(%rsp)
  0x00007f75704c1160: vmovss %xmm0,0x8(%rsp)
  0x00007f75704c1166: mov    0x40(%rbx),%rcx
  0x00007f75704c116a: jmpq   *%rcx

AHE@0x00007f75800ea440: 0xb7e00000 i2c: 0x00007f75704c1220 c2i: 0x00007f75704c135f c2iUV: 0x00007f75704c1332
i2c argument handler #47 for: receiver (D)V (603 bytes generated)
c2i argument handler starts at 0x7f75704c135f
  0x00007f75704c1220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c1224: movabs $0x7f757036e3e0,%r11
  0x00007f75704c122e: cmp    %r11,%rax
  0x00007f75704c1231: jbe    0x00007f75704c124a
  0x00007f75704c1237: movabs $0x7f757046e3e0,%r11
  0x00007f75704c1241: cmp    %r11,%rax
  0x00007f75704c1244: jb     0x00007f75704c130d
  0x00007f75704c124a: movabs $0x7f7570369420,%r11
  0x00007f75704c1254: cmp    %r11,%rax
  0x00007f75704c1257: jbe    0x00007f75704c1270
  0x00007f75704c125d: movabs $0x7f757036de58,%r11
  0x00007f75704c1267: cmp    %r11,%rax
  0x00007f75704c126a: jb     0x00007f75704c130d
  0x00007f75704c1270: movabs $0x7f75704a9820,%r11
  0x00007f75704c127a: cmp    %r11,%rax
  0x00007f75704c127d: jbe    0x00007f75704c1296
  0x00007f75704c1283: movabs $0x7f75704af5e0,%r11
  0x00007f75704c128d: cmp    %r11,%rax
  0x00007f75704c1290: jb     0x00007f75704c130d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c1296: mov    %rsp,-0x28(%rsp)
  0x00007f75704c129b: sub    $0x80,%rsp
  0x00007f75704c12a2: mov    %rax,0x78(%rsp)
  0x00007f75704c12a7: mov    %rcx,0x70(%rsp)
  0x00007f75704c12ac: mov    %rdx,0x68(%rsp)
  0x00007f75704c12b1: mov    %rbx,0x60(%rsp)
  0x00007f75704c12b6: mov    %rbp,0x50(%rsp)
  0x00007f75704c12bb: mov    %rsi,0x48(%rsp)
  0x00007f75704c12c0: mov    %rdi,0x40(%rsp)
  0x00007f75704c12c5: mov    %r8,0x38(%rsp)
  0x00007f75704c12ca: mov    %r9,0x30(%rsp)
  0x00007f75704c12cf: mov    %r10,0x28(%rsp)
  0x00007f75704c12d4: mov    %r11,0x20(%rsp)
  0x00007f75704c12d9: mov    %r12,0x18(%rsp)
  0x00007f75704c12de: mov    %r13,0x10(%rsp)
  0x00007f75704c12e3: mov    %r14,0x8(%rsp)
  0x00007f75704c12e8: mov    %r15,(%rsp)
  0x00007f75704c12ec: movabs $0x7f758592f470,%rdi
  0x00007f75704c12f6: movabs $0x7f75704c1296,%rsi
  0x00007f75704c1300: mov    %rsp,%rdx
  0x00007f75704c1303: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1307: callq  0x00007f75853729fa
  0x00007f75704c130c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c130d: mov    %rsp,%r11
  0x00007f75704c1310: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1314: push   %rax
  0x00007f75704c1315: mov    %r11,%rax
  0x00007f75704c1318: mov    0x50(%rbx),%r11
  0x00007f75704c131c: mov    0x18(%rax),%rsi
  0x00007f75704c1320: vmovsd 0x8(%rax),%xmm0
  0x00007f75704c1325: mov    %rbx,0x258(%r15)
  0x00007f75704c132c: mov    %rbx,%rax
  0x00007f75704c132f: jmpq   *%r11
  0x00007f75704c1332: mov    0x8(%rsi),%ebx
  0x00007f75704c1335: shl    $0x3,%rbx
  0x00007f75704c1339: cmp    0x10(%rax),%rbx
  0x00007f75704c133d: mov    0x8(%rax),%rbx
  0x00007f75704c1341: je     0x00007f75704c134c
  0x00007f75704c1347: jmpq   0x00007f757046ec40
  0x00007f75704c134c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1354: je     0x00007f75704c144f
  0x00007f75704c135a: jmpq   0x00007f757046ec40
  0x00007f75704c135f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1367: je     0x00007f75704c144f
  0x00007f75704c136d: mov    %rsp,%r13
  0x00007f75704c1370: mov    (%rsp),%rax
  0x00007f75704c1374: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1378: pushfq 
  0x00007f75704c1379: sub    $0x8,%rsp
  0x00007f75704c137d: mov    %rsp,-0x28(%rsp)
  0x00007f75704c1382: sub    $0x80,%rsp
  0x00007f75704c1389: mov    %rax,0x78(%rsp)
  0x00007f75704c138e: mov    %rcx,0x70(%rsp)
  0x00007f75704c1393: mov    %rdx,0x68(%rsp)
  0x00007f75704c1398: mov    %rbx,0x60(%rsp)
  0x00007f75704c139d: mov    %rbp,0x50(%rsp)
  0x00007f75704c13a2: mov    %rsi,0x48(%rsp)
  0x00007f75704c13a7: mov    %rdi,0x40(%rsp)
  0x00007f75704c13ac: mov    %r8,0x38(%rsp)
  0x00007f75704c13b1: mov    %r9,0x30(%rsp)
  0x00007f75704c13b6: mov    %r10,0x28(%rsp)
  0x00007f75704c13bb: mov    %r11,0x20(%rsp)
  0x00007f75704c13c0: mov    %r12,0x18(%rsp)
  0x00007f75704c13c5: mov    %r13,0x10(%rsp)
  0x00007f75704c13ca: mov    %r14,0x8(%rsp)
  0x00007f75704c13cf: mov    %r15,(%rsp)
  0x00007f75704c13d3: sub    $0x200,%rsp
  0x00007f75704c13da: fxsave64 (%rsp)
  0x00007f75704c13df: mov    %rbx,%rdi
  0x00007f75704c13e2: mov    %rax,%rsi
  0x00007f75704c13e5: callq  0x00007f7585522bca
  0x00007f75704c13ea: fxrstor64 (%rsp)
  0x00007f75704c13ef: add    $0x200,%rsp
  0x00007f75704c13f6: mov    (%rsp),%r15
  0x00007f75704c13fa: mov    0x8(%rsp),%r14
  0x00007f75704c13ff: mov    0x10(%rsp),%r13
  0x00007f75704c1404: mov    0x18(%rsp),%r12
  0x00007f75704c1409: mov    0x20(%rsp),%r11
  0x00007f75704c140e: mov    0x28(%rsp),%r10
  0x00007f75704c1413: mov    0x30(%rsp),%r9
  0x00007f75704c1418: mov    0x38(%rsp),%r8
  0x00007f75704c141d: mov    0x40(%rsp),%rdi
  0x00007f75704c1422: mov    0x48(%rsp),%rsi
  0x00007f75704c1427: mov    0x50(%rsp),%rbp
  0x00007f75704c142c: mov    0x60(%rsp),%rbx
  0x00007f75704c1431: mov    0x68(%rsp),%rdx
  0x00007f75704c1436: mov    0x70(%rsp),%rcx
  0x00007f75704c143b: mov    0x78(%rsp),%rax
  0x00007f75704c1440: add    $0x80,%rsp
  0x00007f75704c1447: add    $0x8,%rsp
  0x00007f75704c144b: popfq  
  0x00007f75704c144c: mov    %r13,%rsp
  0x00007f75704c144f: pop    %rax
  0x00007f75704c1450: mov    %rsp,%r13
  0x00007f75704c1453: sub    $0x20,%rsp
  0x00007f75704c1457: mov    %rax,(%rsp)
  0x00007f75704c145b: mov    %rsi,0x18(%rsp)
  0x00007f75704c1460: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c146a: mov    %rax,0x10(%rsp)
  0x00007f75704c146f: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704c1475: mov    0x40(%rbx),%rcx
  0x00007f75704c1479: jmpq   *%rcx

AHE@0x00007f75800ea488: 0x67e00000 i2c: 0x00007f75704c1520 c2i: 0x00007f75704c1660 c2iUV: 0x00007f75704c1633
i2c argument handler #48 for: static (FD)F (605 bytes generated)
c2i argument handler starts at 0x7f75704c1660
  0x00007f75704c1520: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c1524: movabs $0x7f757036e3e0,%r11
  0x00007f75704c152e: cmp    %r11,%rax
  0x00007f75704c1531: jbe    0x00007f75704c154a
  0x00007f75704c1537: movabs $0x7f757046e3e0,%r11
  0x00007f75704c1541: cmp    %r11,%rax
  0x00007f75704c1544: jb     0x00007f75704c160d
  0x00007f75704c154a: movabs $0x7f7570369420,%r11
  0x00007f75704c1554: cmp    %r11,%rax
  0x00007f75704c1557: jbe    0x00007f75704c1570
  0x00007f75704c155d: movabs $0x7f757036de58,%r11
  0x00007f75704c1567: cmp    %r11,%rax
  0x00007f75704c156a: jb     0x00007f75704c160d
  0x00007f75704c1570: movabs $0x7f75704a9820,%r11
  0x00007f75704c157a: cmp    %r11,%rax
  0x00007f75704c157d: jbe    0x00007f75704c1596
  0x00007f75704c1583: movabs $0x7f75704af5e0,%r11
  0x00007f75704c158d: cmp    %r11,%rax
  0x00007f75704c1590: jb     0x00007f75704c160d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c1596: mov    %rsp,-0x28(%rsp)
  0x00007f75704c159b: sub    $0x80,%rsp
  0x00007f75704c15a2: mov    %rax,0x78(%rsp)
  0x00007f75704c15a7: mov    %rcx,0x70(%rsp)
  0x00007f75704c15ac: mov    %rdx,0x68(%rsp)
  0x00007f75704c15b1: mov    %rbx,0x60(%rsp)
  0x00007f75704c15b6: mov    %rbp,0x50(%rsp)
  0x00007f75704c15bb: mov    %rsi,0x48(%rsp)
  0x00007f75704c15c0: mov    %rdi,0x40(%rsp)
  0x00007f75704c15c5: mov    %r8,0x38(%rsp)
  0x00007f75704c15ca: mov    %r9,0x30(%rsp)
  0x00007f75704c15cf: mov    %r10,0x28(%rsp)
  0x00007f75704c15d4: mov    %r11,0x20(%rsp)
  0x00007f75704c15d9: mov    %r12,0x18(%rsp)
  0x00007f75704c15de: mov    %r13,0x10(%rsp)
  0x00007f75704c15e3: mov    %r14,0x8(%rsp)
  0x00007f75704c15e8: mov    %r15,(%rsp)
  0x00007f75704c15ec: movabs $0x7f758592f470,%rdi
  0x00007f75704c15f6: movabs $0x7f75704c1596,%rsi
  0x00007f75704c1600: mov    %rsp,%rdx
  0x00007f75704c1603: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1607: callq  0x00007f75853729fa
  0x00007f75704c160c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c160d: mov    %rsp,%r11
  0x00007f75704c1610: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1614: push   %rax
  0x00007f75704c1615: mov    %r11,%rax
  0x00007f75704c1618: mov    0x50(%rbx),%r11
  0x00007f75704c161c: vmovss 0x18(%rax),%xmm0
  0x00007f75704c1621: vmovsd 0x8(%rax),%xmm1
  0x00007f75704c1626: mov    %rbx,0x258(%r15)
  0x00007f75704c162d: mov    %rbx,%rax
  0x00007f75704c1630: jmpq   *%r11
  0x00007f75704c1633: mov    0x8(%rsi),%ebx
  0x00007f75704c1636: shl    $0x3,%rbx
  0x00007f75704c163a: cmp    0x10(%rax),%rbx
  0x00007f75704c163e: mov    0x8(%rax),%rbx
  0x00007f75704c1642: je     0x00007f75704c164d
  0x00007f75704c1648: jmpq   0x00007f757046ec40
  0x00007f75704c164d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1655: je     0x00007f75704c1750
  0x00007f75704c165b: jmpq   0x00007f757046ec40
  0x00007f75704c1660: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1668: je     0x00007f75704c1750
  0x00007f75704c166e: mov    %rsp,%r13
  0x00007f75704c1671: mov    (%rsp),%rax
  0x00007f75704c1675: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1679: pushfq 
  0x00007f75704c167a: sub    $0x8,%rsp
  0x00007f75704c167e: mov    %rsp,-0x28(%rsp)
  0x00007f75704c1683: sub    $0x80,%rsp
  0x00007f75704c168a: mov    %rax,0x78(%rsp)
  0x00007f75704c168f: mov    %rcx,0x70(%rsp)
  0x00007f75704c1694: mov    %rdx,0x68(%rsp)
  0x00007f75704c1699: mov    %rbx,0x60(%rsp)
  0x00007f75704c169e: mov    %rbp,0x50(%rsp)
  0x00007f75704c16a3: mov    %rsi,0x48(%rsp)
  0x00007f75704c16a8: mov    %rdi,0x40(%rsp)
  0x00007f75704c16ad: mov    %r8,0x38(%rsp)
  0x00007f75704c16b2: mov    %r9,0x30(%rsp)
  0x00007f75704c16b7: mov    %r10,0x28(%rsp)
  0x00007f75704c16bc: mov    %r11,0x20(%rsp)
  0x00007f75704c16c1: mov    %r12,0x18(%rsp)
  0x00007f75704c16c6: mov    %r13,0x10(%rsp)
  0x00007f75704c16cb: mov    %r14,0x8(%rsp)
  0x00007f75704c16d0: mov    %r15,(%rsp)
  0x00007f75704c16d4: sub    $0x200,%rsp
  0x00007f75704c16db: fxsave64 (%rsp)
  0x00007f75704c16e0: mov    %rbx,%rdi
  0x00007f75704c16e3: mov    %rax,%rsi
  0x00007f75704c16e6: callq  0x00007f7585522bca
  0x00007f75704c16eb: fxrstor64 (%rsp)
  0x00007f75704c16f0: add    $0x200,%rsp
  0x00007f75704c16f7: mov    (%rsp),%r15
  0x00007f75704c16fb: mov    0x8(%rsp),%r14
  0x00007f75704c1700: mov    0x10(%rsp),%r13
  0x00007f75704c1705: mov    0x18(%rsp),%r12
  0x00007f75704c170a: mov    0x20(%rsp),%r11
  0x00007f75704c170f: mov    0x28(%rsp),%r10
  0x00007f75704c1714: mov    0x30(%rsp),%r9
  0x00007f75704c1719: mov    0x38(%rsp),%r8
  0x00007f75704c171e: mov    0x40(%rsp),%rdi
  0x00007f75704c1723: mov    0x48(%rsp),%rsi
  0x00007f75704c1728: mov    0x50(%rsp),%rbp
  0x00007f75704c172d: mov    0x60(%rsp),%rbx
  0x00007f75704c1732: mov    0x68(%rsp),%rdx
  0x00007f75704c1737: mov    0x70(%rsp),%rcx
  0x00007f75704c173c: mov    0x78(%rsp),%rax
  0x00007f75704c1741: add    $0x80,%rsp
  0x00007f75704c1748: add    $0x8,%rsp
  0x00007f75704c174c: popfq  
  0x00007f75704c174d: mov    %r13,%rsp
  0x00007f75704c1750: pop    %rax
  0x00007f75704c1751: mov    %rsp,%r13
  0x00007f75704c1754: sub    $0x20,%rsp
  0x00007f75704c1758: mov    %rax,(%rsp)
  0x00007f75704c175c: vmovss %xmm0,0x18(%rsp)
  0x00007f75704c1762: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c176c: mov    %rax,0x10(%rsp)
  0x00007f75704c1771: vmovsd %xmm1,0x8(%rsp)
  0x00007f75704c1777: mov    0x40(%rbx),%rcx
  0x00007f75704c177b: jmpq   *%rcx

AHE@0x00007f75800ea4d0: 0x7e7e0000 i2c: 0x00007f75704c1820 c2i: 0x00007f75704c1960 c2iUV: 0x00007f75704c1933
i2c argument handler #49 for: static (DD)D (620 bytes generated)
c2i argument handler starts at 0x7f75704c1960
  0x00007f75704c1820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c1824: movabs $0x7f757036e3e0,%r11
  0x00007f75704c182e: cmp    %r11,%rax
  0x00007f75704c1831: jbe    0x00007f75704c184a
  0x00007f75704c1837: movabs $0x7f757046e3e0,%r11
  0x00007f75704c1841: cmp    %r11,%rax
  0x00007f75704c1844: jb     0x00007f75704c190d
  0x00007f75704c184a: movabs $0x7f7570369420,%r11
  0x00007f75704c1854: cmp    %r11,%rax
  0x00007f75704c1857: jbe    0x00007f75704c1870
  0x00007f75704c185d: movabs $0x7f757036de58,%r11
  0x00007f75704c1867: cmp    %r11,%rax
  0x00007f75704c186a: jb     0x00007f75704c190d
  0x00007f75704c1870: movabs $0x7f75704a9820,%r11
  0x00007f75704c187a: cmp    %r11,%rax
  0x00007f75704c187d: jbe    0x00007f75704c1896
  0x00007f75704c1883: movabs $0x7f75704af5e0,%r11
  0x00007f75704c188d: cmp    %r11,%rax
  0x00007f75704c1890: jb     0x00007f75704c190d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c1896: mov    %rsp,-0x28(%rsp)
  0x00007f75704c189b: sub    $0x80,%rsp
  0x00007f75704c18a2: mov    %rax,0x78(%rsp)
  0x00007f75704c18a7: mov    %rcx,0x70(%rsp)
  0x00007f75704c18ac: mov    %rdx,0x68(%rsp)
  0x00007f75704c18b1: mov    %rbx,0x60(%rsp)
  0x00007f75704c18b6: mov    %rbp,0x50(%rsp)
  0x00007f75704c18bb: mov    %rsi,0x48(%rsp)
  0x00007f75704c18c0: mov    %rdi,0x40(%rsp)
  0x00007f75704c18c5: mov    %r8,0x38(%rsp)
  0x00007f75704c18ca: mov    %r9,0x30(%rsp)
  0x00007f75704c18cf: mov    %r10,0x28(%rsp)
  0x00007f75704c18d4: mov    %r11,0x20(%rsp)
  0x00007f75704c18d9: mov    %r12,0x18(%rsp)
  0x00007f75704c18de: mov    %r13,0x10(%rsp)
  0x00007f75704c18e3: mov    %r14,0x8(%rsp)
  0x00007f75704c18e8: mov    %r15,(%rsp)
  0x00007f75704c18ec: movabs $0x7f758592f470,%rdi
  0x00007f75704c18f6: movabs $0x7f75704c1896,%rsi
  0x00007f75704c1900: mov    %rsp,%rdx
  0x00007f75704c1903: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1907: callq  0x00007f75853729fa
  0x00007f75704c190c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c190d: mov    %rsp,%r11
  0x00007f75704c1910: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1914: push   %rax
  0x00007f75704c1915: mov    %r11,%rax
  0x00007f75704c1918: mov    0x50(%rbx),%r11
  0x00007f75704c191c: vmovsd 0x18(%rax),%xmm0
  0x00007f75704c1921: vmovsd 0x8(%rax),%xmm1
  0x00007f75704c1926: mov    %rbx,0x258(%r15)
  0x00007f75704c192d: mov    %rbx,%rax
  0x00007f75704c1930: jmpq   *%r11
  0x00007f75704c1933: mov    0x8(%rsi),%ebx
  0x00007f75704c1936: shl    $0x3,%rbx
  0x00007f75704c193a: cmp    0x10(%rax),%rbx
  0x00007f75704c193e: mov    0x8(%rax),%rbx
  0x00007f75704c1942: je     0x00007f75704c194d
  0x00007f75704c1948: jmpq   0x00007f757046ec40
  0x00007f75704c194d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1955: je     0x00007f75704c1a50
  0x00007f75704c195b: jmpq   0x00007f757046ec40
  0x00007f75704c1960: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1968: je     0x00007f75704c1a50
  0x00007f75704c196e: mov    %rsp,%r13
  0x00007f75704c1971: mov    (%rsp),%rax
  0x00007f75704c1975: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1979: pushfq 
  0x00007f75704c197a: sub    $0x8,%rsp
  0x00007f75704c197e: mov    %rsp,-0x28(%rsp)
  0x00007f75704c1983: sub    $0x80,%rsp
  0x00007f75704c198a: mov    %rax,0x78(%rsp)
  0x00007f75704c198f: mov    %rcx,0x70(%rsp)
  0x00007f75704c1994: mov    %rdx,0x68(%rsp)
  0x00007f75704c1999: mov    %rbx,0x60(%rsp)
  0x00007f75704c199e: mov    %rbp,0x50(%rsp)
  0x00007f75704c19a3: mov    %rsi,0x48(%rsp)
  0x00007f75704c19a8: mov    %rdi,0x40(%rsp)
  0x00007f75704c19ad: mov    %r8,0x38(%rsp)
  0x00007f75704c19b2: mov    %r9,0x30(%rsp)
  0x00007f75704c19b7: mov    %r10,0x28(%rsp)
  0x00007f75704c19bc: mov    %r11,0x20(%rsp)
  0x00007f75704c19c1: mov    %r12,0x18(%rsp)
  0x00007f75704c19c6: mov    %r13,0x10(%rsp)
  0x00007f75704c19cb: mov    %r14,0x8(%rsp)
  0x00007f75704c19d0: mov    %r15,(%rsp)
  0x00007f75704c19d4: sub    $0x200,%rsp
  0x00007f75704c19db: fxsave64 (%rsp)
  0x00007f75704c19e0: mov    %rbx,%rdi
  0x00007f75704c19e3: mov    %rax,%rsi
  0x00007f75704c19e6: callq  0x00007f7585522bca
  0x00007f75704c19eb: fxrstor64 (%rsp)
  0x00007f75704c19f0: add    $0x200,%rsp
  0x00007f75704c19f7: mov    (%rsp),%r15
  0x00007f75704c19fb: mov    0x8(%rsp),%r14
  0x00007f75704c1a00: mov    0x10(%rsp),%r13
  0x00007f75704c1a05: mov    0x18(%rsp),%r12
  0x00007f75704c1a0a: mov    0x20(%rsp),%r11
  0x00007f75704c1a0f: mov    0x28(%rsp),%r10
  0x00007f75704c1a14: mov    0x30(%rsp),%r9
  0x00007f75704c1a19: mov    0x38(%rsp),%r8
  0x00007f75704c1a1e: mov    0x40(%rsp),%rdi
  0x00007f75704c1a23: mov    0x48(%rsp),%rsi
  0x00007f75704c1a28: mov    0x50(%rsp),%rbp
  0x00007f75704c1a2d: mov    0x60(%rsp),%rbx
  0x00007f75704c1a32: mov    0x68(%rsp),%rdx
  0x00007f75704c1a37: mov    0x70(%rsp),%rcx
  0x00007f75704c1a3c: mov    0x78(%rsp),%rax
  0x00007f75704c1a41: add    $0x80,%rsp
  0x00007f75704c1a48: add    $0x8,%rsp
  0x00007f75704c1a4c: popfq  
  0x00007f75704c1a4d: mov    %r13,%rsp
  0x00007f75704c1a50: pop    %rax
  0x00007f75704c1a51: mov    %rsp,%r13
  0x00007f75704c1a54: sub    $0x30,%rsp
  0x00007f75704c1a58: mov    %rax,(%rsp)
  0x00007f75704c1a5c: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c1a66: mov    %rax,0x20(%rsp)
  0x00007f75704c1a6b: vmovsd %xmm0,0x18(%rsp)
  0x00007f75704c1a71: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c1a7b: mov    %rax,0x10(%rsp)
  0x00007f75704c1a80: vmovsd %xmm1,0x8(%rsp)
  0x00007f75704c1a86: mov    0x40(%rbx),%rcx
  0x00007f75704c1a8a: jmpq   *%rcx

AHE@0x00007f75800ea518: 0xbebe0000 i2c: 0x00007f75704c1b60 c2i: 0x00007f75704c1c9e c2iUV: 0x00007f75704c1c71
i2c argument handler #50 for: static (JJ)J (616 bytes generated)
c2i argument handler starts at 0x7f75704c1c9e
  0x00007f75704c1b60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c1b64: movabs $0x7f757036e3e0,%r11
  0x00007f75704c1b6e: cmp    %r11,%rax
  0x00007f75704c1b71: jbe    0x00007f75704c1b8a
  0x00007f75704c1b77: movabs $0x7f757046e3e0,%r11
  0x00007f75704c1b81: cmp    %r11,%rax
  0x00007f75704c1b84: jb     0x00007f75704c1c4d
  0x00007f75704c1b8a: movabs $0x7f7570369420,%r11
  0x00007f75704c1b94: cmp    %r11,%rax
  0x00007f75704c1b97: jbe    0x00007f75704c1bb0
  0x00007f75704c1b9d: movabs $0x7f757036de58,%r11
  0x00007f75704c1ba7: cmp    %r11,%rax
  0x00007f75704c1baa: jb     0x00007f75704c1c4d
  0x00007f75704c1bb0: movabs $0x7f75704a9820,%r11
  0x00007f75704c1bba: cmp    %r11,%rax
  0x00007f75704c1bbd: jbe    0x00007f75704c1bd6
  0x00007f75704c1bc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c1bcd: cmp    %r11,%rax
  0x00007f75704c1bd0: jb     0x00007f75704c1c4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c1bd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c1bdb: sub    $0x80,%rsp
  0x00007f75704c1be2: mov    %rax,0x78(%rsp)
  0x00007f75704c1be7: mov    %rcx,0x70(%rsp)
  0x00007f75704c1bec: mov    %rdx,0x68(%rsp)
  0x00007f75704c1bf1: mov    %rbx,0x60(%rsp)
  0x00007f75704c1bf6: mov    %rbp,0x50(%rsp)
  0x00007f75704c1bfb: mov    %rsi,0x48(%rsp)
  0x00007f75704c1c00: mov    %rdi,0x40(%rsp)
  0x00007f75704c1c05: mov    %r8,0x38(%rsp)
  0x00007f75704c1c0a: mov    %r9,0x30(%rsp)
  0x00007f75704c1c0f: mov    %r10,0x28(%rsp)
  0x00007f75704c1c14: mov    %r11,0x20(%rsp)
  0x00007f75704c1c19: mov    %r12,0x18(%rsp)
  0x00007f75704c1c1e: mov    %r13,0x10(%rsp)
  0x00007f75704c1c23: mov    %r14,0x8(%rsp)
  0x00007f75704c1c28: mov    %r15,(%rsp)
  0x00007f75704c1c2c: movabs $0x7f758592f470,%rdi
  0x00007f75704c1c36: movabs $0x7f75704c1bd6,%rsi
  0x00007f75704c1c40: mov    %rsp,%rdx
  0x00007f75704c1c43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1c47: callq  0x00007f75853729fa
  0x00007f75704c1c4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c1c4d: mov    %rsp,%r11
  0x00007f75704c1c50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1c54: push   %rax
  0x00007f75704c1c55: mov    %r11,%rax
  0x00007f75704c1c58: mov    0x50(%rbx),%r11
  0x00007f75704c1c5c: mov    0x18(%rax),%rsi
  0x00007f75704c1c60: mov    0x8(%rax),%rdx
  0x00007f75704c1c64: mov    %rbx,0x258(%r15)
  0x00007f75704c1c6b: mov    %rbx,%rax
  0x00007f75704c1c6e: jmpq   *%r11
  0x00007f75704c1c71: mov    0x8(%rsi),%ebx
  0x00007f75704c1c74: shl    $0x3,%rbx
  0x00007f75704c1c78: cmp    0x10(%rax),%rbx
  0x00007f75704c1c7c: mov    0x8(%rax),%rbx
  0x00007f75704c1c80: je     0x00007f75704c1c8b
  0x00007f75704c1c86: jmpq   0x00007f757046ec40
  0x00007f75704c1c8b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1c93: je     0x00007f75704c1d8e
  0x00007f75704c1c99: jmpq   0x00007f757046ec40
  0x00007f75704c1c9e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1ca6: je     0x00007f75704c1d8e
  0x00007f75704c1cac: mov    %rsp,%r13
  0x00007f75704c1caf: mov    (%rsp),%rax
  0x00007f75704c1cb3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1cb7: pushfq 
  0x00007f75704c1cb8: sub    $0x8,%rsp
  0x00007f75704c1cbc: mov    %rsp,-0x28(%rsp)
  0x00007f75704c1cc1: sub    $0x80,%rsp
  0x00007f75704c1cc8: mov    %rax,0x78(%rsp)
  0x00007f75704c1ccd: mov    %rcx,0x70(%rsp)
  0x00007f75704c1cd2: mov    %rdx,0x68(%rsp)
  0x00007f75704c1cd7: mov    %rbx,0x60(%rsp)
  0x00007f75704c1cdc: mov    %rbp,0x50(%rsp)
  0x00007f75704c1ce1: mov    %rsi,0x48(%rsp)
  0x00007f75704c1ce6: mov    %rdi,0x40(%rsp)
  0x00007f75704c1ceb: mov    %r8,0x38(%rsp)
  0x00007f75704c1cf0: mov    %r9,0x30(%rsp)
  0x00007f75704c1cf5: mov    %r10,0x28(%rsp)
  0x00007f75704c1cfa: mov    %r11,0x20(%rsp)
  0x00007f75704c1cff: mov    %r12,0x18(%rsp)
  0x00007f75704c1d04: mov    %r13,0x10(%rsp)
  0x00007f75704c1d09: mov    %r14,0x8(%rsp)
  0x00007f75704c1d0e: mov    %r15,(%rsp)
  0x00007f75704c1d12: sub    $0x200,%rsp
  0x00007f75704c1d19: fxsave64 (%rsp)
  0x00007f75704c1d1e: mov    %rbx,%rdi
  0x00007f75704c1d21: mov    %rax,%rsi
  0x00007f75704c1d24: callq  0x00007f7585522bca
  0x00007f75704c1d29: fxrstor64 (%rsp)
  0x00007f75704c1d2e: add    $0x200,%rsp
  0x00007f75704c1d35: mov    (%rsp),%r15
  0x00007f75704c1d39: mov    0x8(%rsp),%r14
  0x00007f75704c1d3e: mov    0x10(%rsp),%r13
  0x00007f75704c1d43: mov    0x18(%rsp),%r12
  0x00007f75704c1d48: mov    0x20(%rsp),%r11
  0x00007f75704c1d4d: mov    0x28(%rsp),%r10
  0x00007f75704c1d52: mov    0x30(%rsp),%r9
  0x00007f75704c1d57: mov    0x38(%rsp),%r8
  0x00007f75704c1d5c: mov    0x40(%rsp),%rdi
  0x00007f75704c1d61: mov    0x48(%rsp),%rsi
  0x00007f75704c1d66: mov    0x50(%rsp),%rbp
  0x00007f75704c1d6b: mov    0x60(%rsp),%rbx
  0x00007f75704c1d70: mov    0x68(%rsp),%rdx
  0x00007f75704c1d75: mov    0x70(%rsp),%rcx
  0x00007f75704c1d7a: mov    0x78(%rsp),%rax
  0x00007f75704c1d7f: add    $0x80,%rsp
  0x00007f75704c1d86: add    $0x8,%rsp
  0x00007f75704c1d8a: popfq  
  0x00007f75704c1d8b: mov    %r13,%rsp
  0x00007f75704c1d8e: pop    %rax
  0x00007f75704c1d8f: mov    %rsp,%r13
  0x00007f75704c1d92: sub    $0x30,%rsp
  0x00007f75704c1d96: mov    %rax,(%rsp)
  0x00007f75704c1d9a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c1da4: mov    %rax,0x20(%rsp)
  0x00007f75704c1da9: mov    %rsi,0x18(%rsp)
  0x00007f75704c1dae: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c1db8: mov    %rax,0x10(%rsp)
  0x00007f75704c1dbd: mov    %rdx,0x8(%rsp)
  0x00007f75704c1dc2: mov    0x40(%rbx),%rcx
  0x00007f75704c1dc6: jmpq   *%rcx

AHE@0x00007f75800ea560: 0x6a000000 i2c: 0x00007f75704c1ea0 c2i: 0x00007f75704c1fde c2iUV: 0x00007f75704c1fb1
i2c argument handler #51 for: static (FI)F (586 bytes generated)
c2i argument handler starts at 0x7f75704c1fde
  0x00007f75704c1ea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c1ea4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c1eae: cmp    %r11,%rax
  0x00007f75704c1eb1: jbe    0x00007f75704c1eca
  0x00007f75704c1eb7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c1ec1: cmp    %r11,%rax
  0x00007f75704c1ec4: jb     0x00007f75704c1f8d
  0x00007f75704c1eca: movabs $0x7f7570369420,%r11
  0x00007f75704c1ed4: cmp    %r11,%rax
  0x00007f75704c1ed7: jbe    0x00007f75704c1ef0
  0x00007f75704c1edd: movabs $0x7f757036de58,%r11
  0x00007f75704c1ee7: cmp    %r11,%rax
  0x00007f75704c1eea: jb     0x00007f75704c1f8d
  0x00007f75704c1ef0: movabs $0x7f75704a9820,%r11
  0x00007f75704c1efa: cmp    %r11,%rax
  0x00007f75704c1efd: jbe    0x00007f75704c1f16
  0x00007f75704c1f03: movabs $0x7f75704af5e0,%r11
  0x00007f75704c1f0d: cmp    %r11,%rax
  0x00007f75704c1f10: jb     0x00007f75704c1f8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c1f16: mov    %rsp,-0x28(%rsp)
  0x00007f75704c1f1b: sub    $0x80,%rsp
  0x00007f75704c1f22: mov    %rax,0x78(%rsp)
  0x00007f75704c1f27: mov    %rcx,0x70(%rsp)
  0x00007f75704c1f2c: mov    %rdx,0x68(%rsp)
  0x00007f75704c1f31: mov    %rbx,0x60(%rsp)
  0x00007f75704c1f36: mov    %rbp,0x50(%rsp)
  0x00007f75704c1f3b: mov    %rsi,0x48(%rsp)
  0x00007f75704c1f40: mov    %rdi,0x40(%rsp)
  0x00007f75704c1f45: mov    %r8,0x38(%rsp)
  0x00007f75704c1f4a: mov    %r9,0x30(%rsp)
  0x00007f75704c1f4f: mov    %r10,0x28(%rsp)
  0x00007f75704c1f54: mov    %r11,0x20(%rsp)
  0x00007f75704c1f59: mov    %r12,0x18(%rsp)
  0x00007f75704c1f5e: mov    %r13,0x10(%rsp)
  0x00007f75704c1f63: mov    %r14,0x8(%rsp)
  0x00007f75704c1f68: mov    %r15,(%rsp)
  0x00007f75704c1f6c: movabs $0x7f758592f470,%rdi
  0x00007f75704c1f76: movabs $0x7f75704c1f16,%rsi
  0x00007f75704c1f80: mov    %rsp,%rdx
  0x00007f75704c1f83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1f87: callq  0x00007f75853729fa
  0x00007f75704c1f8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c1f8d: mov    %rsp,%r11
  0x00007f75704c1f90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1f94: push   %rax
  0x00007f75704c1f95: mov    %r11,%rax
  0x00007f75704c1f98: mov    0x50(%rbx),%r11
  0x00007f75704c1f9c: vmovss 0x10(%rax),%xmm0
  0x00007f75704c1fa1: mov    0x8(%rax),%esi
  0x00007f75704c1fa4: mov    %rbx,0x258(%r15)
  0x00007f75704c1fab: mov    %rbx,%rax
  0x00007f75704c1fae: jmpq   *%r11
  0x00007f75704c1fb1: mov    0x8(%rsi),%ebx
  0x00007f75704c1fb4: shl    $0x3,%rbx
  0x00007f75704c1fb8: cmp    0x10(%rax),%rbx
  0x00007f75704c1fbc: mov    0x8(%rax),%rbx
  0x00007f75704c1fc0: je     0x00007f75704c1fcb
  0x00007f75704c1fc6: jmpq   0x00007f757046ec40
  0x00007f75704c1fcb: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1fd3: je     0x00007f75704c20ce
  0x00007f75704c1fd9: jmpq   0x00007f757046ec40
  0x00007f75704c1fde: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c1fe6: je     0x00007f75704c20ce
  0x00007f75704c1fec: mov    %rsp,%r13
  0x00007f75704c1fef: mov    (%rsp),%rax
  0x00007f75704c1ff3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c1ff7: pushfq 
  0x00007f75704c1ff8: sub    $0x8,%rsp
  0x00007f75704c1ffc: mov    %rsp,-0x28(%rsp)
  0x00007f75704c2001: sub    $0x80,%rsp
  0x00007f75704c2008: mov    %rax,0x78(%rsp)
  0x00007f75704c200d: mov    %rcx,0x70(%rsp)
  0x00007f75704c2012: mov    %rdx,0x68(%rsp)
  0x00007f75704c2017: mov    %rbx,0x60(%rsp)
  0x00007f75704c201c: mov    %rbp,0x50(%rsp)
  0x00007f75704c2021: mov    %rsi,0x48(%rsp)
  0x00007f75704c2026: mov    %rdi,0x40(%rsp)
  0x00007f75704c202b: mov    %r8,0x38(%rsp)
  0x00007f75704c2030: mov    %r9,0x30(%rsp)
  0x00007f75704c2035: mov    %r10,0x28(%rsp)
  0x00007f75704c203a: mov    %r11,0x20(%rsp)
  0x00007f75704c203f: mov    %r12,0x18(%rsp)
  0x00007f75704c2044: mov    %r13,0x10(%rsp)
  0x00007f75704c2049: mov    %r14,0x8(%rsp)
  0x00007f75704c204e: mov    %r15,(%rsp)
  0x00007f75704c2052: sub    $0x200,%rsp
  0x00007f75704c2059: fxsave64 (%rsp)
  0x00007f75704c205e: mov    %rbx,%rdi
  0x00007f75704c2061: mov    %rax,%rsi
  0x00007f75704c2064: callq  0x00007f7585522bca
  0x00007f75704c2069: fxrstor64 (%rsp)
  0x00007f75704c206e: add    $0x200,%rsp
  0x00007f75704c2075: mov    (%rsp),%r15
  0x00007f75704c2079: mov    0x8(%rsp),%r14
  0x00007f75704c207e: mov    0x10(%rsp),%r13
  0x00007f75704c2083: mov    0x18(%rsp),%r12
  0x00007f75704c2088: mov    0x20(%rsp),%r11
  0x00007f75704c208d: mov    0x28(%rsp),%r10
  0x00007f75704c2092: mov    0x30(%rsp),%r9
  0x00007f75704c2097: mov    0x38(%rsp),%r8
  0x00007f75704c209c: mov    0x40(%rsp),%rdi
  0x00007f75704c20a1: mov    0x48(%rsp),%rsi
  0x00007f75704c20a6: mov    0x50(%rsp),%rbp
  0x00007f75704c20ab: mov    0x60(%rsp),%rbx
  0x00007f75704c20b0: mov    0x68(%rsp),%rdx
  0x00007f75704c20b5: mov    0x70(%rsp),%rcx
  0x00007f75704c20ba: mov    0x78(%rsp),%rax
  0x00007f75704c20bf: add    $0x80,%rsp
  0x00007f75704c20c6: add    $0x8,%rsp
  0x00007f75704c20ca: popfq  
  0x00007f75704c20cb: mov    %r13,%rsp
  0x00007f75704c20ce: pop    %rax
  0x00007f75704c20cf: mov    %rsp,%r13
  0x00007f75704c20d2: sub    $0x20,%rsp
  0x00007f75704c20d6: mov    %rax,(%rsp)
  0x00007f75704c20da: vmovss %xmm0,0x10(%rsp)
  0x00007f75704c20e0: mov    %esi,0x8(%rsp)
  0x00007f75704c20e4: mov    0x40(%rbx),%rcx
  0x00007f75704c20e8: jmpq   *%rcx

AHE@0x00007f75800ea5a8: 0x7ea00000 i2c: 0x00007f75704c21a0 c2i: 0x00007f75704c22de c2iUV: 0x00007f75704c22b1
i2c argument handler #52 for: static (DI)D (601 bytes generated)
c2i argument handler starts at 0x7f75704c22de
  0x00007f75704c21a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c21a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c21ae: cmp    %r11,%rax
  0x00007f75704c21b1: jbe    0x00007f75704c21ca
  0x00007f75704c21b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c21c1: cmp    %r11,%rax
  0x00007f75704c21c4: jb     0x00007f75704c228d
  0x00007f75704c21ca: movabs $0x7f7570369420,%r11
  0x00007f75704c21d4: cmp    %r11,%rax
  0x00007f75704c21d7: jbe    0x00007f75704c21f0
  0x00007f75704c21dd: movabs $0x7f757036de58,%r11
  0x00007f75704c21e7: cmp    %r11,%rax
  0x00007f75704c21ea: jb     0x00007f75704c228d
  0x00007f75704c21f0: movabs $0x7f75704a9820,%r11
  0x00007f75704c21fa: cmp    %r11,%rax
  0x00007f75704c21fd: jbe    0x00007f75704c2216
  0x00007f75704c2203: movabs $0x7f75704af5e0,%r11
  0x00007f75704c220d: cmp    %r11,%rax
  0x00007f75704c2210: jb     0x00007f75704c228d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c2216: mov    %rsp,-0x28(%rsp)
  0x00007f75704c221b: sub    $0x80,%rsp
  0x00007f75704c2222: mov    %rax,0x78(%rsp)
  0x00007f75704c2227: mov    %rcx,0x70(%rsp)
  0x00007f75704c222c: mov    %rdx,0x68(%rsp)
  0x00007f75704c2231: mov    %rbx,0x60(%rsp)
  0x00007f75704c2236: mov    %rbp,0x50(%rsp)
  0x00007f75704c223b: mov    %rsi,0x48(%rsp)
  0x00007f75704c2240: mov    %rdi,0x40(%rsp)
  0x00007f75704c2245: mov    %r8,0x38(%rsp)
  0x00007f75704c224a: mov    %r9,0x30(%rsp)
  0x00007f75704c224f: mov    %r10,0x28(%rsp)
  0x00007f75704c2254: mov    %r11,0x20(%rsp)
  0x00007f75704c2259: mov    %r12,0x18(%rsp)
  0x00007f75704c225e: mov    %r13,0x10(%rsp)
  0x00007f75704c2263: mov    %r14,0x8(%rsp)
  0x00007f75704c2268: mov    %r15,(%rsp)
  0x00007f75704c226c: movabs $0x7f758592f470,%rdi
  0x00007f75704c2276: movabs $0x7f75704c2216,%rsi
  0x00007f75704c2280: mov    %rsp,%rdx
  0x00007f75704c2283: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2287: callq  0x00007f75853729fa
  0x00007f75704c228c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c228d: mov    %rsp,%r11
  0x00007f75704c2290: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2294: push   %rax
  0x00007f75704c2295: mov    %r11,%rax
  0x00007f75704c2298: mov    0x50(%rbx),%r11
  0x00007f75704c229c: vmovsd 0x10(%rax),%xmm0
  0x00007f75704c22a1: mov    0x8(%rax),%esi
  0x00007f75704c22a4: mov    %rbx,0x258(%r15)
  0x00007f75704c22ab: mov    %rbx,%rax
  0x00007f75704c22ae: jmpq   *%r11
  0x00007f75704c22b1: mov    0x8(%rsi),%ebx
  0x00007f75704c22b4: shl    $0x3,%rbx
  0x00007f75704c22b8: cmp    0x10(%rax),%rbx
  0x00007f75704c22bc: mov    0x8(%rax),%rbx
  0x00007f75704c22c0: je     0x00007f75704c22cb
  0x00007f75704c22c6: jmpq   0x00007f757046ec40
  0x00007f75704c22cb: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c22d3: je     0x00007f75704c23ce
  0x00007f75704c22d9: jmpq   0x00007f757046ec40
  0x00007f75704c22de: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c22e6: je     0x00007f75704c23ce
  0x00007f75704c22ec: mov    %rsp,%r13
  0x00007f75704c22ef: mov    (%rsp),%rax
  0x00007f75704c22f3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c22f7: pushfq 
  0x00007f75704c22f8: sub    $0x8,%rsp
  0x00007f75704c22fc: mov    %rsp,-0x28(%rsp)
  0x00007f75704c2301: sub    $0x80,%rsp
  0x00007f75704c2308: mov    %rax,0x78(%rsp)
  0x00007f75704c230d: mov    %rcx,0x70(%rsp)
  0x00007f75704c2312: mov    %rdx,0x68(%rsp)
  0x00007f75704c2317: mov    %rbx,0x60(%rsp)
  0x00007f75704c231c: mov    %rbp,0x50(%rsp)
  0x00007f75704c2321: mov    %rsi,0x48(%rsp)
  0x00007f75704c2326: mov    %rdi,0x40(%rsp)
  0x00007f75704c232b: mov    %r8,0x38(%rsp)
  0x00007f75704c2330: mov    %r9,0x30(%rsp)
  0x00007f75704c2335: mov    %r10,0x28(%rsp)
  0x00007f75704c233a: mov    %r11,0x20(%rsp)
  0x00007f75704c233f: mov    %r12,0x18(%rsp)
  0x00007f75704c2344: mov    %r13,0x10(%rsp)
  0x00007f75704c2349: mov    %r14,0x8(%rsp)
  0x00007f75704c234e: mov    %r15,(%rsp)
  0x00007f75704c2352: sub    $0x200,%rsp
  0x00007f75704c2359: fxsave64 (%rsp)
  0x00007f75704c235e: mov    %rbx,%rdi
  0x00007f75704c2361: mov    %rax,%rsi
  0x00007f75704c2364: callq  0x00007f7585522bca
  0x00007f75704c2369: fxrstor64 (%rsp)
  0x00007f75704c236e: add    $0x200,%rsp
  0x00007f75704c2375: mov    (%rsp),%r15
  0x00007f75704c2379: mov    0x8(%rsp),%r14
  0x00007f75704c237e: mov    0x10(%rsp),%r13
  0x00007f75704c2383: mov    0x18(%rsp),%r12
  0x00007f75704c2388: mov    0x20(%rsp),%r11
  0x00007f75704c238d: mov    0x28(%rsp),%r10
  0x00007f75704c2392: mov    0x30(%rsp),%r9
  0x00007f75704c2397: mov    0x38(%rsp),%r8
  0x00007f75704c239c: mov    0x40(%rsp),%rdi
  0x00007f75704c23a1: mov    0x48(%rsp),%rsi
  0x00007f75704c23a6: mov    0x50(%rsp),%rbp
  0x00007f75704c23ab: mov    0x60(%rsp),%rbx
  0x00007f75704c23b0: mov    0x68(%rsp),%rdx
  0x00007f75704c23b5: mov    0x70(%rsp),%rcx
  0x00007f75704c23ba: mov    0x78(%rsp),%rax
  0x00007f75704c23bf: add    $0x80,%rsp
  0x00007f75704c23c6: add    $0x8,%rsp
  0x00007f75704c23ca: popfq  
  0x00007f75704c23cb: mov    %r13,%rsp
  0x00007f75704c23ce: pop    %rax
  0x00007f75704c23cf: mov    %rsp,%r13
  0x00007f75704c23d2: sub    $0x20,%rsp
  0x00007f75704c23d6: mov    %rax,(%rsp)
  0x00007f75704c23da: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c23e4: mov    %rax,0x18(%rsp)
  0x00007f75704c23e9: vmovsd %xmm0,0x10(%rsp)
  0x00007f75704c23ef: mov    %esi,0x8(%rsp)
  0x00007f75704c23f3: mov    0x40(%rbx),%rcx
  0x00007f75704c23f7: jmpq   *%rcx

AHE@0x00007f75800ea5f0: 0xbaaaa000 i2c: 0x00007f75704c24a0 c2i: 0x00007f75704c25e8 c2iUV: 0x00007f75704c25bb
i2c argument handler #53 for: receiver (IIII)V (609 bytes generated)
c2i argument handler starts at 0x7f75704c25e8
  0x00007f75704c24a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c24a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c24ae: cmp    %r11,%rax
  0x00007f75704c24b1: jbe    0x00007f75704c24ca
  0x00007f75704c24b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c24c1: cmp    %r11,%rax
  0x00007f75704c24c4: jb     0x00007f75704c258d
  0x00007f75704c24ca: movabs $0x7f7570369420,%r11
  0x00007f75704c24d4: cmp    %r11,%rax
  0x00007f75704c24d7: jbe    0x00007f75704c24f0
  0x00007f75704c24dd: movabs $0x7f757036de58,%r11
  0x00007f75704c24e7: cmp    %r11,%rax
  0x00007f75704c24ea: jb     0x00007f75704c258d
  0x00007f75704c24f0: movabs $0x7f75704a9820,%r11
  0x00007f75704c24fa: cmp    %r11,%rax
  0x00007f75704c24fd: jbe    0x00007f75704c2516
  0x00007f75704c2503: movabs $0x7f75704af5e0,%r11
  0x00007f75704c250d: cmp    %r11,%rax
  0x00007f75704c2510: jb     0x00007f75704c258d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c2516: mov    %rsp,-0x28(%rsp)
  0x00007f75704c251b: sub    $0x80,%rsp
  0x00007f75704c2522: mov    %rax,0x78(%rsp)
  0x00007f75704c2527: mov    %rcx,0x70(%rsp)
  0x00007f75704c252c: mov    %rdx,0x68(%rsp)
  0x00007f75704c2531: mov    %rbx,0x60(%rsp)
  0x00007f75704c2536: mov    %rbp,0x50(%rsp)
  0x00007f75704c253b: mov    %rsi,0x48(%rsp)
  0x00007f75704c2540: mov    %rdi,0x40(%rsp)
  0x00007f75704c2545: mov    %r8,0x38(%rsp)
  0x00007f75704c254a: mov    %r9,0x30(%rsp)
  0x00007f75704c254f: mov    %r10,0x28(%rsp)
  0x00007f75704c2554: mov    %r11,0x20(%rsp)
  0x00007f75704c2559: mov    %r12,0x18(%rsp)
  0x00007f75704c255e: mov    %r13,0x10(%rsp)
  0x00007f75704c2563: mov    %r14,0x8(%rsp)
  0x00007f75704c2568: mov    %r15,(%rsp)
  0x00007f75704c256c: movabs $0x7f758592f470,%rdi
  0x00007f75704c2576: movabs $0x7f75704c2516,%rsi
  0x00007f75704c2580: mov    %rsp,%rdx
  0x00007f75704c2583: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2587: callq  0x00007f75853729fa
  0x00007f75704c258c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c258d: mov    %rsp,%r11
  0x00007f75704c2590: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2594: push   %rax
  0x00007f75704c2595: mov    %r11,%rax
  0x00007f75704c2598: mov    0x50(%rbx),%r11
  0x00007f75704c259c: mov    0x28(%rax),%rsi
  0x00007f75704c25a0: mov    0x20(%rax),%edx
  0x00007f75704c25a3: mov    0x18(%rax),%ecx
  0x00007f75704c25a6: mov    0x10(%rax),%r8d
  0x00007f75704c25aa: mov    0x8(%rax),%r9d
  0x00007f75704c25ae: mov    %rbx,0x258(%r15)
  0x00007f75704c25b5: mov    %rbx,%rax
  0x00007f75704c25b8: jmpq   *%r11
  0x00007f75704c25bb: mov    0x8(%rsi),%ebx
  0x00007f75704c25be: shl    $0x3,%rbx
  0x00007f75704c25c2: cmp    0x10(%rax),%rbx
  0x00007f75704c25c6: mov    0x8(%rax),%rbx
  0x00007f75704c25ca: je     0x00007f75704c25d5
  0x00007f75704c25d0: jmpq   0x00007f757046ec40
  0x00007f75704c25d5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c25dd: je     0x00007f75704c26d8
  0x00007f75704c25e3: jmpq   0x00007f757046ec40
  0x00007f75704c25e8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c25f0: je     0x00007f75704c26d8
  0x00007f75704c25f6: mov    %rsp,%r13
  0x00007f75704c25f9: mov    (%rsp),%rax
  0x00007f75704c25fd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2601: pushfq 
  0x00007f75704c2602: sub    $0x8,%rsp
  0x00007f75704c2606: mov    %rsp,-0x28(%rsp)
  0x00007f75704c260b: sub    $0x80,%rsp
  0x00007f75704c2612: mov    %rax,0x78(%rsp)
  0x00007f75704c2617: mov    %rcx,0x70(%rsp)
  0x00007f75704c261c: mov    %rdx,0x68(%rsp)
  0x00007f75704c2621: mov    %rbx,0x60(%rsp)
  0x00007f75704c2626: mov    %rbp,0x50(%rsp)
  0x00007f75704c262b: mov    %rsi,0x48(%rsp)
  0x00007f75704c2630: mov    %rdi,0x40(%rsp)
  0x00007f75704c2635: mov    %r8,0x38(%rsp)
  0x00007f75704c263a: mov    %r9,0x30(%rsp)
  0x00007f75704c263f: mov    %r10,0x28(%rsp)
  0x00007f75704c2644: mov    %r11,0x20(%rsp)
  0x00007f75704c2649: mov    %r12,0x18(%rsp)
  0x00007f75704c264e: mov    %r13,0x10(%rsp)
  0x00007f75704c2653: mov    %r14,0x8(%rsp)
  0x00007f75704c2658: mov    %r15,(%rsp)
  0x00007f75704c265c: sub    $0x200,%rsp
  0x00007f75704c2663: fxsave64 (%rsp)
  0x00007f75704c2668: mov    %rbx,%rdi
  0x00007f75704c266b: mov    %rax,%rsi
  0x00007f75704c266e: callq  0x00007f7585522bca
  0x00007f75704c2673: fxrstor64 (%rsp)
  0x00007f75704c2678: add    $0x200,%rsp
  0x00007f75704c267f: mov    (%rsp),%r15
  0x00007f75704c2683: mov    0x8(%rsp),%r14
  0x00007f75704c2688: mov    0x10(%rsp),%r13
  0x00007f75704c268d: mov    0x18(%rsp),%r12
  0x00007f75704c2692: mov    0x20(%rsp),%r11
  0x00007f75704c2697: mov    0x28(%rsp),%r10
  0x00007f75704c269c: mov    0x30(%rsp),%r9
  0x00007f75704c26a1: mov    0x38(%rsp),%r8
  0x00007f75704c26a6: mov    0x40(%rsp),%rdi
  0x00007f75704c26ab: mov    0x48(%rsp),%rsi
  0x00007f75704c26b0: mov    0x50(%rsp),%rbp
  0x00007f75704c26b5: mov    0x60(%rsp),%rbx
  0x00007f75704c26ba: mov    0x68(%rsp),%rdx
  0x00007f75704c26bf: mov    0x70(%rsp),%rcx
  0x00007f75704c26c4: mov    0x78(%rsp),%rax
  0x00007f75704c26c9: add    $0x80,%rsp
  0x00007f75704c26d0: add    $0x8,%rsp
  0x00007f75704c26d4: popfq  
  0x00007f75704c26d5: mov    %r13,%rsp
  0x00007f75704c26d8: pop    %rax
  0x00007f75704c26d9: mov    %rsp,%r13
  0x00007f75704c26dc: sub    $0x30,%rsp
  0x00007f75704c26e0: mov    %rax,(%rsp)
  0x00007f75704c26e4: mov    %rsi,0x28(%rsp)
  0x00007f75704c26e9: mov    %edx,0x20(%rsp)
  0x00007f75704c26ed: mov    %ecx,0x18(%rsp)
  0x00007f75704c26f1: mov    %r8d,0x10(%rsp)
  0x00007f75704c26f6: mov    %r9d,0x8(%rsp)
  0x00007f75704c26fb: mov    0x40(%rbx),%rcx
  0x00007f75704c26ff: jmpq   *%rcx

AHE@0x00007f75800ea638: 0xbb7e0000 i2c: 0x00007f75704c27e0 c2i: 0x00007f75704c2923 c2iUV: 0x00007f75704c28f6
i2c argument handler #54 for: receiver (Ljava/lang/Object;D)V (612 bytes generated)
c2i argument handler starts at 0x7f75704c2923
  0x00007f75704c27e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c27e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c27ee: cmp    %r11,%rax
  0x00007f75704c27f1: jbe    0x00007f75704c280a
  0x00007f75704c27f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c2801: cmp    %r11,%rax
  0x00007f75704c2804: jb     0x00007f75704c28cd
  0x00007f75704c280a: movabs $0x7f7570369420,%r11
  0x00007f75704c2814: cmp    %r11,%rax
  0x00007f75704c2817: jbe    0x00007f75704c2830
  0x00007f75704c281d: movabs $0x7f757036de58,%r11
  0x00007f75704c2827: cmp    %r11,%rax
  0x00007f75704c282a: jb     0x00007f75704c28cd
  0x00007f75704c2830: movabs $0x7f75704a9820,%r11
  0x00007f75704c283a: cmp    %r11,%rax
  0x00007f75704c283d: jbe    0x00007f75704c2856
  0x00007f75704c2843: movabs $0x7f75704af5e0,%r11
  0x00007f75704c284d: cmp    %r11,%rax
  0x00007f75704c2850: jb     0x00007f75704c28cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c2856: mov    %rsp,-0x28(%rsp)
  0x00007f75704c285b: sub    $0x80,%rsp
  0x00007f75704c2862: mov    %rax,0x78(%rsp)
  0x00007f75704c2867: mov    %rcx,0x70(%rsp)
  0x00007f75704c286c: mov    %rdx,0x68(%rsp)
  0x00007f75704c2871: mov    %rbx,0x60(%rsp)
  0x00007f75704c2876: mov    %rbp,0x50(%rsp)
  0x00007f75704c287b: mov    %rsi,0x48(%rsp)
  0x00007f75704c2880: mov    %rdi,0x40(%rsp)
  0x00007f75704c2885: mov    %r8,0x38(%rsp)
  0x00007f75704c288a: mov    %r9,0x30(%rsp)
  0x00007f75704c288f: mov    %r10,0x28(%rsp)
  0x00007f75704c2894: mov    %r11,0x20(%rsp)
  0x00007f75704c2899: mov    %r12,0x18(%rsp)
  0x00007f75704c289e: mov    %r13,0x10(%rsp)
  0x00007f75704c28a3: mov    %r14,0x8(%rsp)
  0x00007f75704c28a8: mov    %r15,(%rsp)
  0x00007f75704c28ac: movabs $0x7f758592f470,%rdi
  0x00007f75704c28b6: movabs $0x7f75704c2856,%rsi
  0x00007f75704c28c0: mov    %rsp,%rdx
  0x00007f75704c28c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c28c7: callq  0x00007f75853729fa
  0x00007f75704c28cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c28cd: mov    %rsp,%r11
  0x00007f75704c28d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c28d4: push   %rax
  0x00007f75704c28d5: mov    %r11,%rax
  0x00007f75704c28d8: mov    0x50(%rbx),%r11
  0x00007f75704c28dc: mov    0x20(%rax),%rsi
  0x00007f75704c28e0: mov    0x18(%rax),%rdx
  0x00007f75704c28e4: vmovsd 0x8(%rax),%xmm0
  0x00007f75704c28e9: mov    %rbx,0x258(%r15)
  0x00007f75704c28f0: mov    %rbx,%rax
  0x00007f75704c28f3: jmpq   *%r11
  0x00007f75704c28f6: mov    0x8(%rsi),%ebx
  0x00007f75704c28f9: shl    $0x3,%rbx
  0x00007f75704c28fd: cmp    0x10(%rax),%rbx
  0x00007f75704c2901: mov    0x8(%rax),%rbx
  0x00007f75704c2905: je     0x00007f75704c2910
  0x00007f75704c290b: jmpq   0x00007f757046ec40
  0x00007f75704c2910: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c2918: je     0x00007f75704c2a13
  0x00007f75704c291e: jmpq   0x00007f757046ec40
  0x00007f75704c2923: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c292b: je     0x00007f75704c2a13
  0x00007f75704c2931: mov    %rsp,%r13
  0x00007f75704c2934: mov    (%rsp),%rax
  0x00007f75704c2938: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c293c: pushfq 
  0x00007f75704c293d: sub    $0x8,%rsp
  0x00007f75704c2941: mov    %rsp,-0x28(%rsp)
  0x00007f75704c2946: sub    $0x80,%rsp
  0x00007f75704c294d: mov    %rax,0x78(%rsp)
  0x00007f75704c2952: mov    %rcx,0x70(%rsp)
  0x00007f75704c2957: mov    %rdx,0x68(%rsp)
  0x00007f75704c295c: mov    %rbx,0x60(%rsp)
  0x00007f75704c2961: mov    %rbp,0x50(%rsp)
  0x00007f75704c2966: mov    %rsi,0x48(%rsp)
  0x00007f75704c296b: mov    %rdi,0x40(%rsp)
  0x00007f75704c2970: mov    %r8,0x38(%rsp)
  0x00007f75704c2975: mov    %r9,0x30(%rsp)
  0x00007f75704c297a: mov    %r10,0x28(%rsp)
  0x00007f75704c297f: mov    %r11,0x20(%rsp)
  0x00007f75704c2984: mov    %r12,0x18(%rsp)
  0x00007f75704c2989: mov    %r13,0x10(%rsp)
  0x00007f75704c298e: mov    %r14,0x8(%rsp)
  0x00007f75704c2993: mov    %r15,(%rsp)
  0x00007f75704c2997: sub    $0x200,%rsp
  0x00007f75704c299e: fxsave64 (%rsp)
  0x00007f75704c29a3: mov    %rbx,%rdi
  0x00007f75704c29a6: mov    %rax,%rsi
  0x00007f75704c29a9: callq  0x00007f7585522bca
  0x00007f75704c29ae: fxrstor64 (%rsp)
  0x00007f75704c29b3: add    $0x200,%rsp
  0x00007f75704c29ba: mov    (%rsp),%r15
  0x00007f75704c29be: mov    0x8(%rsp),%r14
  0x00007f75704c29c3: mov    0x10(%rsp),%r13
  0x00007f75704c29c8: mov    0x18(%rsp),%r12
  0x00007f75704c29cd: mov    0x20(%rsp),%r11
  0x00007f75704c29d2: mov    0x28(%rsp),%r10
  0x00007f75704c29d7: mov    0x30(%rsp),%r9
  0x00007f75704c29dc: mov    0x38(%rsp),%r8
  0x00007f75704c29e1: mov    0x40(%rsp),%rdi
  0x00007f75704c29e6: mov    0x48(%rsp),%rsi
  0x00007f75704c29eb: mov    0x50(%rsp),%rbp
  0x00007f75704c29f0: mov    0x60(%rsp),%rbx
  0x00007f75704c29f5: mov    0x68(%rsp),%rdx
  0x00007f75704c29fa: mov    0x70(%rsp),%rcx
  0x00007f75704c29ff: mov    0x78(%rsp),%rax
  0x00007f75704c2a04: add    $0x80,%rsp
  0x00007f75704c2a0b: add    $0x8,%rsp
  0x00007f75704c2a0f: popfq  
  0x00007f75704c2a10: mov    %r13,%rsp
  0x00007f75704c2a13: pop    %rax
  0x00007f75704c2a14: mov    %rsp,%r13
  0x00007f75704c2a17: sub    $0x30,%rsp
  0x00007f75704c2a1b: mov    %rax,(%rsp)
  0x00007f75704c2a1f: mov    %rsi,0x20(%rsp)
  0x00007f75704c2a24: mov    %rdx,0x18(%rsp)
  0x00007f75704c2a29: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c2a33: mov    %rax,0x10(%rsp)
  0x00007f75704c2a38: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704c2a3e: mov    0x40(%rbx),%rcx
  0x00007f75704c2a42: jmpq   *%rcx

AHE@0x00007f75800ea680: 0xbb600000 i2c: 0x00007f75704c2b20 c2i: 0x00007f75704c2c63 c2iUV: 0x00007f75704c2c36
i2c argument handler #55 for: receiver (Ljava/lang/Object;F)V (597 bytes generated)
c2i argument handler starts at 0x7f75704c2c63
  0x00007f75704c2b20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c2b24: movabs $0x7f757036e3e0,%r11
  0x00007f75704c2b2e: cmp    %r11,%rax
  0x00007f75704c2b31: jbe    0x00007f75704c2b4a
  0x00007f75704c2b37: movabs $0x7f757046e3e0,%r11
  0x00007f75704c2b41: cmp    %r11,%rax
  0x00007f75704c2b44: jb     0x00007f75704c2c0d
  0x00007f75704c2b4a: movabs $0x7f7570369420,%r11
  0x00007f75704c2b54: cmp    %r11,%rax
  0x00007f75704c2b57: jbe    0x00007f75704c2b70
  0x00007f75704c2b5d: movabs $0x7f757036de58,%r11
  0x00007f75704c2b67: cmp    %r11,%rax
  0x00007f75704c2b6a: jb     0x00007f75704c2c0d
  0x00007f75704c2b70: movabs $0x7f75704a9820,%r11
  0x00007f75704c2b7a: cmp    %r11,%rax
  0x00007f75704c2b7d: jbe    0x00007f75704c2b96
  0x00007f75704c2b83: movabs $0x7f75704af5e0,%r11
  0x00007f75704c2b8d: cmp    %r11,%rax
  0x00007f75704c2b90: jb     0x00007f75704c2c0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c2b96: mov    %rsp,-0x28(%rsp)
  0x00007f75704c2b9b: sub    $0x80,%rsp
  0x00007f75704c2ba2: mov    %rax,0x78(%rsp)
  0x00007f75704c2ba7: mov    %rcx,0x70(%rsp)
  0x00007f75704c2bac: mov    %rdx,0x68(%rsp)
  0x00007f75704c2bb1: mov    %rbx,0x60(%rsp)
  0x00007f75704c2bb6: mov    %rbp,0x50(%rsp)
  0x00007f75704c2bbb: mov    %rsi,0x48(%rsp)
  0x00007f75704c2bc0: mov    %rdi,0x40(%rsp)
  0x00007f75704c2bc5: mov    %r8,0x38(%rsp)
  0x00007f75704c2bca: mov    %r9,0x30(%rsp)
  0x00007f75704c2bcf: mov    %r10,0x28(%rsp)
  0x00007f75704c2bd4: mov    %r11,0x20(%rsp)
  0x00007f75704c2bd9: mov    %r12,0x18(%rsp)
  0x00007f75704c2bde: mov    %r13,0x10(%rsp)
  0x00007f75704c2be3: mov    %r14,0x8(%rsp)
  0x00007f75704c2be8: mov    %r15,(%rsp)
  0x00007f75704c2bec: movabs $0x7f758592f470,%rdi
  0x00007f75704c2bf6: movabs $0x7f75704c2b96,%rsi
  0x00007f75704c2c00: mov    %rsp,%rdx
  0x00007f75704c2c03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2c07: callq  0x00007f75853729fa
  0x00007f75704c2c0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c2c0d: mov    %rsp,%r11
  0x00007f75704c2c10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2c14: push   %rax
  0x00007f75704c2c15: mov    %r11,%rax
  0x00007f75704c2c18: mov    0x50(%rbx),%r11
  0x00007f75704c2c1c: mov    0x18(%rax),%rsi
  0x00007f75704c2c20: mov    0x10(%rax),%rdx
  0x00007f75704c2c24: vmovss 0x8(%rax),%xmm0
  0x00007f75704c2c29: mov    %rbx,0x258(%r15)
  0x00007f75704c2c30: mov    %rbx,%rax
  0x00007f75704c2c33: jmpq   *%r11
  0x00007f75704c2c36: mov    0x8(%rsi),%ebx
  0x00007f75704c2c39: shl    $0x3,%rbx
  0x00007f75704c2c3d: cmp    0x10(%rax),%rbx
  0x00007f75704c2c41: mov    0x8(%rax),%rbx
  0x00007f75704c2c45: je     0x00007f75704c2c50
  0x00007f75704c2c4b: jmpq   0x00007f757046ec40
  0x00007f75704c2c50: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c2c58: je     0x00007f75704c2d53
  0x00007f75704c2c5e: jmpq   0x00007f757046ec40
  0x00007f75704c2c63: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c2c6b: je     0x00007f75704c2d53
  0x00007f75704c2c71: mov    %rsp,%r13
  0x00007f75704c2c74: mov    (%rsp),%rax
  0x00007f75704c2c78: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2c7c: pushfq 
  0x00007f75704c2c7d: sub    $0x8,%rsp
  0x00007f75704c2c81: mov    %rsp,-0x28(%rsp)
  0x00007f75704c2c86: sub    $0x80,%rsp
  0x00007f75704c2c8d: mov    %rax,0x78(%rsp)
  0x00007f75704c2c92: mov    %rcx,0x70(%rsp)
  0x00007f75704c2c97: mov    %rdx,0x68(%rsp)
  0x00007f75704c2c9c: mov    %rbx,0x60(%rsp)
  0x00007f75704c2ca1: mov    %rbp,0x50(%rsp)
  0x00007f75704c2ca6: mov    %rsi,0x48(%rsp)
  0x00007f75704c2cab: mov    %rdi,0x40(%rsp)
  0x00007f75704c2cb0: mov    %r8,0x38(%rsp)
  0x00007f75704c2cb5: mov    %r9,0x30(%rsp)
  0x00007f75704c2cba: mov    %r10,0x28(%rsp)
  0x00007f75704c2cbf: mov    %r11,0x20(%rsp)
  0x00007f75704c2cc4: mov    %r12,0x18(%rsp)
  0x00007f75704c2cc9: mov    %r13,0x10(%rsp)
  0x00007f75704c2cce: mov    %r14,0x8(%rsp)
  0x00007f75704c2cd3: mov    %r15,(%rsp)
  0x00007f75704c2cd7: sub    $0x200,%rsp
  0x00007f75704c2cde: fxsave64 (%rsp)
  0x00007f75704c2ce3: mov    %rbx,%rdi
  0x00007f75704c2ce6: mov    %rax,%rsi
  0x00007f75704c2ce9: callq  0x00007f7585522bca
  0x00007f75704c2cee: fxrstor64 (%rsp)
  0x00007f75704c2cf3: add    $0x200,%rsp
  0x00007f75704c2cfa: mov    (%rsp),%r15
  0x00007f75704c2cfe: mov    0x8(%rsp),%r14
  0x00007f75704c2d03: mov    0x10(%rsp),%r13
  0x00007f75704c2d08: mov    0x18(%rsp),%r12
  0x00007f75704c2d0d: mov    0x20(%rsp),%r11
  0x00007f75704c2d12: mov    0x28(%rsp),%r10
  0x00007f75704c2d17: mov    0x30(%rsp),%r9
  0x00007f75704c2d1c: mov    0x38(%rsp),%r8
  0x00007f75704c2d21: mov    0x40(%rsp),%rdi
  0x00007f75704c2d26: mov    0x48(%rsp),%rsi
  0x00007f75704c2d2b: mov    0x50(%rsp),%rbp
  0x00007f75704c2d30: mov    0x60(%rsp),%rbx
  0x00007f75704c2d35: mov    0x68(%rsp),%rdx
  0x00007f75704c2d3a: mov    0x70(%rsp),%rcx
  0x00007f75704c2d3f: mov    0x78(%rsp),%rax
  0x00007f75704c2d44: add    $0x80,%rsp
  0x00007f75704c2d4b: add    $0x8,%rsp
  0x00007f75704c2d4f: popfq  
  0x00007f75704c2d50: mov    %r13,%rsp
  0x00007f75704c2d53: pop    %rax
  0x00007f75704c2d54: mov    %rsp,%r13
  0x00007f75704c2d57: sub    $0x20,%rsp
  0x00007f75704c2d5b: mov    %rax,(%rsp)
  0x00007f75704c2d5f: mov    %rsi,0x18(%rsp)
  0x00007f75704c2d64: mov    %rdx,0x10(%rsp)
  0x00007f75704c2d69: vmovss %xmm0,0x8(%rsp)
  0x00007f75704c2d6f: mov    0x40(%rbx),%rcx
  0x00007f75704c2d73: jmpq   *%rcx

AHE@0x00007f75800ea6c8: 0xbbbe0000 i2c: 0x00007f75704c2e20 c2i: 0x00007f75704c2f62 c2iUV: 0x00007f75704c2f35
i2c argument handler #56 for: receiver (Ljava/lang/Object;J)V (610 bytes generated)
c2i argument handler starts at 0x7f75704c2f62
  0x00007f75704c2e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c2e24: movabs $0x7f757036e3e0,%r11
  0x00007f75704c2e2e: cmp    %r11,%rax
  0x00007f75704c2e31: jbe    0x00007f75704c2e4a
  0x00007f75704c2e37: movabs $0x7f757046e3e0,%r11
  0x00007f75704c2e41: cmp    %r11,%rax
  0x00007f75704c2e44: jb     0x00007f75704c2f0d
  0x00007f75704c2e4a: movabs $0x7f7570369420,%r11
  0x00007f75704c2e54: cmp    %r11,%rax
  0x00007f75704c2e57: jbe    0x00007f75704c2e70
  0x00007f75704c2e5d: movabs $0x7f757036de58,%r11
  0x00007f75704c2e67: cmp    %r11,%rax
  0x00007f75704c2e6a: jb     0x00007f75704c2f0d
  0x00007f75704c2e70: movabs $0x7f75704a9820,%r11
  0x00007f75704c2e7a: cmp    %r11,%rax
  0x00007f75704c2e7d: jbe    0x00007f75704c2e96
  0x00007f75704c2e83: movabs $0x7f75704af5e0,%r11
  0x00007f75704c2e8d: cmp    %r11,%rax
  0x00007f75704c2e90: jb     0x00007f75704c2f0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c2e96: mov    %rsp,-0x28(%rsp)
  0x00007f75704c2e9b: sub    $0x80,%rsp
  0x00007f75704c2ea2: mov    %rax,0x78(%rsp)
  0x00007f75704c2ea7: mov    %rcx,0x70(%rsp)
  0x00007f75704c2eac: mov    %rdx,0x68(%rsp)
  0x00007f75704c2eb1: mov    %rbx,0x60(%rsp)
  0x00007f75704c2eb6: mov    %rbp,0x50(%rsp)
  0x00007f75704c2ebb: mov    %rsi,0x48(%rsp)
  0x00007f75704c2ec0: mov    %rdi,0x40(%rsp)
  0x00007f75704c2ec5: mov    %r8,0x38(%rsp)
  0x00007f75704c2eca: mov    %r9,0x30(%rsp)
  0x00007f75704c2ecf: mov    %r10,0x28(%rsp)
  0x00007f75704c2ed4: mov    %r11,0x20(%rsp)
  0x00007f75704c2ed9: mov    %r12,0x18(%rsp)
  0x00007f75704c2ede: mov    %r13,0x10(%rsp)
  0x00007f75704c2ee3: mov    %r14,0x8(%rsp)
  0x00007f75704c2ee8: mov    %r15,(%rsp)
  0x00007f75704c2eec: movabs $0x7f758592f470,%rdi
  0x00007f75704c2ef6: movabs $0x7f75704c2e96,%rsi
  0x00007f75704c2f00: mov    %rsp,%rdx
  0x00007f75704c2f03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2f07: callq  0x00007f75853729fa
  0x00007f75704c2f0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c2f0d: mov    %rsp,%r11
  0x00007f75704c2f10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2f14: push   %rax
  0x00007f75704c2f15: mov    %r11,%rax
  0x00007f75704c2f18: mov    0x50(%rbx),%r11
  0x00007f75704c2f1c: mov    0x20(%rax),%rsi
  0x00007f75704c2f20: mov    0x18(%rax),%rdx
  0x00007f75704c2f24: mov    0x8(%rax),%rcx
  0x00007f75704c2f28: mov    %rbx,0x258(%r15)
  0x00007f75704c2f2f: mov    %rbx,%rax
  0x00007f75704c2f32: jmpq   *%r11
  0x00007f75704c2f35: mov    0x8(%rsi),%ebx
  0x00007f75704c2f38: shl    $0x3,%rbx
  0x00007f75704c2f3c: cmp    0x10(%rax),%rbx
  0x00007f75704c2f40: mov    0x8(%rax),%rbx
  0x00007f75704c2f44: je     0x00007f75704c2f4f
  0x00007f75704c2f4a: jmpq   0x00007f757046ec40
  0x00007f75704c2f4f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c2f57: je     0x00007f75704c3052
  0x00007f75704c2f5d: jmpq   0x00007f757046ec40
  0x00007f75704c2f62: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c2f6a: je     0x00007f75704c3052
  0x00007f75704c2f70: mov    %rsp,%r13
  0x00007f75704c2f73: mov    (%rsp),%rax
  0x00007f75704c2f77: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c2f7b: pushfq 
  0x00007f75704c2f7c: sub    $0x8,%rsp
  0x00007f75704c2f80: mov    %rsp,-0x28(%rsp)
  0x00007f75704c2f85: sub    $0x80,%rsp
  0x00007f75704c2f8c: mov    %rax,0x78(%rsp)
  0x00007f75704c2f91: mov    %rcx,0x70(%rsp)
  0x00007f75704c2f96: mov    %rdx,0x68(%rsp)
  0x00007f75704c2f9b: mov    %rbx,0x60(%rsp)
  0x00007f75704c2fa0: mov    %rbp,0x50(%rsp)
  0x00007f75704c2fa5: mov    %rsi,0x48(%rsp)
  0x00007f75704c2faa: mov    %rdi,0x40(%rsp)
  0x00007f75704c2faf: mov    %r8,0x38(%rsp)
  0x00007f75704c2fb4: mov    %r9,0x30(%rsp)
  0x00007f75704c2fb9: mov    %r10,0x28(%rsp)
  0x00007f75704c2fbe: mov    %r11,0x20(%rsp)
  0x00007f75704c2fc3: mov    %r12,0x18(%rsp)
  0x00007f75704c2fc8: mov    %r13,0x10(%rsp)
  0x00007f75704c2fcd: mov    %r14,0x8(%rsp)
  0x00007f75704c2fd2: mov    %r15,(%rsp)
  0x00007f75704c2fd6: sub    $0x200,%rsp
  0x00007f75704c2fdd: fxsave64 (%rsp)
  0x00007f75704c2fe2: mov    %rbx,%rdi
  0x00007f75704c2fe5: mov    %rax,%rsi
  0x00007f75704c2fe8: callq  0x00007f7585522bca
  0x00007f75704c2fed: fxrstor64 (%rsp)
  0x00007f75704c2ff2: add    $0x200,%rsp
  0x00007f75704c2ff9: mov    (%rsp),%r15
  0x00007f75704c2ffd: mov    0x8(%rsp),%r14
  0x00007f75704c3002: mov    0x10(%rsp),%r13
  0x00007f75704c3007: mov    0x18(%rsp),%r12
  0x00007f75704c300c: mov    0x20(%rsp),%r11
  0x00007f75704c3011: mov    0x28(%rsp),%r10
  0x00007f75704c3016: mov    0x30(%rsp),%r9
  0x00007f75704c301b: mov    0x38(%rsp),%r8
  0x00007f75704c3020: mov    0x40(%rsp),%rdi
  0x00007f75704c3025: mov    0x48(%rsp),%rsi
  0x00007f75704c302a: mov    0x50(%rsp),%rbp
  0x00007f75704c302f: mov    0x60(%rsp),%rbx
  0x00007f75704c3034: mov    0x68(%rsp),%rdx
  0x00007f75704c3039: mov    0x70(%rsp),%rcx
  0x00007f75704c303e: mov    0x78(%rsp),%rax
  0x00007f75704c3043: add    $0x80,%rsp
  0x00007f75704c304a: add    $0x8,%rsp
  0x00007f75704c304e: popfq  
  0x00007f75704c304f: mov    %r13,%rsp
  0x00007f75704c3052: pop    %rax
  0x00007f75704c3053: mov    %rsp,%r13
  0x00007f75704c3056: sub    $0x30,%rsp
  0x00007f75704c305a: mov    %rax,(%rsp)
  0x00007f75704c305e: mov    %rsi,0x20(%rsp)
  0x00007f75704c3063: mov    %rdx,0x18(%rsp)
  0x00007f75704c3068: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c3072: mov    %rax,0x10(%rsp)
  0x00007f75704c3077: mov    %rcx,0x8(%rsp)
  0x00007f75704c307c: mov    0x40(%rbx),%rcx
  0x00007f75704c3080: jmpq   *%rcx

AHE@0x00007f75800ea710: 0xbaaa0000 i2c: 0x00007f75704c3160 c2i: 0x00007f75704c32a4 c2iUV: 0x00007f75704c3277
i2c argument handler #57 for: static ([CIIC)I (600 bytes generated)
c2i argument handler starts at 0x7f75704c32a4
  0x00007f75704c3160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c3164: movabs $0x7f757036e3e0,%r11
  0x00007f75704c316e: cmp    %r11,%rax
  0x00007f75704c3171: jbe    0x00007f75704c318a
  0x00007f75704c3177: movabs $0x7f757046e3e0,%r11
  0x00007f75704c3181: cmp    %r11,%rax
  0x00007f75704c3184: jb     0x00007f75704c324d
  0x00007f75704c318a: movabs $0x7f7570369420,%r11
  0x00007f75704c3194: cmp    %r11,%rax
  0x00007f75704c3197: jbe    0x00007f75704c31b0
  0x00007f75704c319d: movabs $0x7f757036de58,%r11
  0x00007f75704c31a7: cmp    %r11,%rax
  0x00007f75704c31aa: jb     0x00007f75704c324d
  0x00007f75704c31b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c31ba: cmp    %r11,%rax
  0x00007f75704c31bd: jbe    0x00007f75704c31d6
  0x00007f75704c31c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c31cd: cmp    %r11,%rax
  0x00007f75704c31d0: jb     0x00007f75704c324d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c31d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c31db: sub    $0x80,%rsp
  0x00007f75704c31e2: mov    %rax,0x78(%rsp)
  0x00007f75704c31e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c31ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c31f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c31f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c31fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c3200: mov    %rdi,0x40(%rsp)
  0x00007f75704c3205: mov    %r8,0x38(%rsp)
  0x00007f75704c320a: mov    %r9,0x30(%rsp)
  0x00007f75704c320f: mov    %r10,0x28(%rsp)
  0x00007f75704c3214: mov    %r11,0x20(%rsp)
  0x00007f75704c3219: mov    %r12,0x18(%rsp)
  0x00007f75704c321e: mov    %r13,0x10(%rsp)
  0x00007f75704c3223: mov    %r14,0x8(%rsp)
  0x00007f75704c3228: mov    %r15,(%rsp)
  0x00007f75704c322c: movabs $0x7f758592f470,%rdi
  0x00007f75704c3236: movabs $0x7f75704c31d6,%rsi
  0x00007f75704c3240: mov    %rsp,%rdx
  0x00007f75704c3243: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3247: callq  0x00007f75853729fa
  0x00007f75704c324c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c324d: mov    %rsp,%r11
  0x00007f75704c3250: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3254: push   %rax
  0x00007f75704c3255: mov    %r11,%rax
  0x00007f75704c3258: mov    0x50(%rbx),%r11
  0x00007f75704c325c: mov    0x20(%rax),%rsi
  0x00007f75704c3260: mov    0x18(%rax),%edx
  0x00007f75704c3263: mov    0x10(%rax),%ecx
  0x00007f75704c3266: mov    0x8(%rax),%r8d
  0x00007f75704c326a: mov    %rbx,0x258(%r15)
  0x00007f75704c3271: mov    %rbx,%rax
  0x00007f75704c3274: jmpq   *%r11
  0x00007f75704c3277: mov    0x8(%rsi),%ebx
  0x00007f75704c327a: shl    $0x3,%rbx
  0x00007f75704c327e: cmp    0x10(%rax),%rbx
  0x00007f75704c3282: mov    0x8(%rax),%rbx
  0x00007f75704c3286: je     0x00007f75704c3291
  0x00007f75704c328c: jmpq   0x00007f757046ec40
  0x00007f75704c3291: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c3299: je     0x00007f75704c3394
  0x00007f75704c329f: jmpq   0x00007f757046ec40
  0x00007f75704c32a4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c32ac: je     0x00007f75704c3394
  0x00007f75704c32b2: mov    %rsp,%r13
  0x00007f75704c32b5: mov    (%rsp),%rax
  0x00007f75704c32b9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c32bd: pushfq 
  0x00007f75704c32be: sub    $0x8,%rsp
  0x00007f75704c32c2: mov    %rsp,-0x28(%rsp)
  0x00007f75704c32c7: sub    $0x80,%rsp
  0x00007f75704c32ce: mov    %rax,0x78(%rsp)
  0x00007f75704c32d3: mov    %rcx,0x70(%rsp)
  0x00007f75704c32d8: mov    %rdx,0x68(%rsp)
  0x00007f75704c32dd: mov    %rbx,0x60(%rsp)
  0x00007f75704c32e2: mov    %rbp,0x50(%rsp)
  0x00007f75704c32e7: mov    %rsi,0x48(%rsp)
  0x00007f75704c32ec: mov    %rdi,0x40(%rsp)
  0x00007f75704c32f1: mov    %r8,0x38(%rsp)
  0x00007f75704c32f6: mov    %r9,0x30(%rsp)
  0x00007f75704c32fb: mov    %r10,0x28(%rsp)
  0x00007f75704c3300: mov    %r11,0x20(%rsp)
  0x00007f75704c3305: mov    %r12,0x18(%rsp)
  0x00007f75704c330a: mov    %r13,0x10(%rsp)
  0x00007f75704c330f: mov    %r14,0x8(%rsp)
  0x00007f75704c3314: mov    %r15,(%rsp)
  0x00007f75704c3318: sub    $0x200,%rsp
  0x00007f75704c331f: fxsave64 (%rsp)
  0x00007f75704c3324: mov    %rbx,%rdi
  0x00007f75704c3327: mov    %rax,%rsi
  0x00007f75704c332a: callq  0x00007f7585522bca
  0x00007f75704c332f: fxrstor64 (%rsp)
  0x00007f75704c3334: add    $0x200,%rsp
  0x00007f75704c333b: mov    (%rsp),%r15
  0x00007f75704c333f: mov    0x8(%rsp),%r14
  0x00007f75704c3344: mov    0x10(%rsp),%r13
  0x00007f75704c3349: mov    0x18(%rsp),%r12
  0x00007f75704c334e: mov    0x20(%rsp),%r11
  0x00007f75704c3353: mov    0x28(%rsp),%r10
  0x00007f75704c3358: mov    0x30(%rsp),%r9
  0x00007f75704c335d: mov    0x38(%rsp),%r8
  0x00007f75704c3362: mov    0x40(%rsp),%rdi
  0x00007f75704c3367: mov    0x48(%rsp),%rsi
  0x00007f75704c336c: mov    0x50(%rsp),%rbp
  0x00007f75704c3371: mov    0x60(%rsp),%rbx
  0x00007f75704c3376: mov    0x68(%rsp),%rdx
  0x00007f75704c337b: mov    0x70(%rsp),%rcx
  0x00007f75704c3380: mov    0x78(%rsp),%rax
  0x00007f75704c3385: add    $0x80,%rsp
  0x00007f75704c338c: add    $0x8,%rsp
  0x00007f75704c3390: popfq  
  0x00007f75704c3391: mov    %r13,%rsp
  0x00007f75704c3394: pop    %rax
  0x00007f75704c3395: mov    %rsp,%r13
  0x00007f75704c3398: sub    $0x30,%rsp
  0x00007f75704c339c: mov    %rax,(%rsp)
  0x00007f75704c33a0: mov    %rsi,0x20(%rsp)
  0x00007f75704c33a5: mov    %edx,0x18(%rsp)
  0x00007f75704c33a9: mov    %ecx,0x10(%rsp)
  0x00007f75704c33ad: mov    %r8d,0x8(%rsp)
  0x00007f75704c33b2: mov    0x40(%rbx),%rcx
  0x00007f75704c33b6: jmpq   *%rcx

AHE@0x00007f75800ea758: 0xbaabe000 i2c: 0x00007f75704c3460 c2i: 0x00007f75704c35a4 c2iUV: 0x00007f75704c3577
i2c argument handler #58 for: static ([JIIJ)I (615 bytes generated)
c2i argument handler starts at 0x7f75704c35a4
  0x00007f75704c3460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c3464: movabs $0x7f757036e3e0,%r11
  0x00007f75704c346e: cmp    %r11,%rax
  0x00007f75704c3471: jbe    0x00007f75704c348a
  0x00007f75704c3477: movabs $0x7f757046e3e0,%r11
  0x00007f75704c3481: cmp    %r11,%rax
  0x00007f75704c3484: jb     0x00007f75704c354d
  0x00007f75704c348a: movabs $0x7f7570369420,%r11
  0x00007f75704c3494: cmp    %r11,%rax
  0x00007f75704c3497: jbe    0x00007f75704c34b0
  0x00007f75704c349d: movabs $0x7f757036de58,%r11
  0x00007f75704c34a7: cmp    %r11,%rax
  0x00007f75704c34aa: jb     0x00007f75704c354d
  0x00007f75704c34b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c34ba: cmp    %r11,%rax
  0x00007f75704c34bd: jbe    0x00007f75704c34d6
  0x00007f75704c34c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c34cd: cmp    %r11,%rax
  0x00007f75704c34d0: jb     0x00007f75704c354d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c34d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c34db: sub    $0x80,%rsp
  0x00007f75704c34e2: mov    %rax,0x78(%rsp)
  0x00007f75704c34e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c34ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c34f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c34f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c34fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c3500: mov    %rdi,0x40(%rsp)
  0x00007f75704c3505: mov    %r8,0x38(%rsp)
  0x00007f75704c350a: mov    %r9,0x30(%rsp)
  0x00007f75704c350f: mov    %r10,0x28(%rsp)
  0x00007f75704c3514: mov    %r11,0x20(%rsp)
  0x00007f75704c3519: mov    %r12,0x18(%rsp)
  0x00007f75704c351e: mov    %r13,0x10(%rsp)
  0x00007f75704c3523: mov    %r14,0x8(%rsp)
  0x00007f75704c3528: mov    %r15,(%rsp)
  0x00007f75704c352c: movabs $0x7f758592f470,%rdi
  0x00007f75704c3536: movabs $0x7f75704c34d6,%rsi
  0x00007f75704c3540: mov    %rsp,%rdx
  0x00007f75704c3543: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3547: callq  0x00007f75853729fa
  0x00007f75704c354c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c354d: mov    %rsp,%r11
  0x00007f75704c3550: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3554: push   %rax
  0x00007f75704c3555: mov    %r11,%rax
  0x00007f75704c3558: mov    0x50(%rbx),%r11
  0x00007f75704c355c: mov    0x28(%rax),%rsi
  0x00007f75704c3560: mov    0x20(%rax),%edx
  0x00007f75704c3563: mov    0x18(%rax),%ecx
  0x00007f75704c3566: mov    0x8(%rax),%r8
  0x00007f75704c356a: mov    %rbx,0x258(%r15)
  0x00007f75704c3571: mov    %rbx,%rax
  0x00007f75704c3574: jmpq   *%r11
  0x00007f75704c3577: mov    0x8(%rsi),%ebx
  0x00007f75704c357a: shl    $0x3,%rbx
  0x00007f75704c357e: cmp    0x10(%rax),%rbx
  0x00007f75704c3582: mov    0x8(%rax),%rbx
  0x00007f75704c3586: je     0x00007f75704c3591
  0x00007f75704c358c: jmpq   0x00007f757046ec40
  0x00007f75704c3591: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c3599: je     0x00007f75704c3694
  0x00007f75704c359f: jmpq   0x00007f757046ec40
  0x00007f75704c35a4: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c35ac: je     0x00007f75704c3694
  0x00007f75704c35b2: mov    %rsp,%r13
  0x00007f75704c35b5: mov    (%rsp),%rax
  0x00007f75704c35b9: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c35bd: pushfq 
  0x00007f75704c35be: sub    $0x8,%rsp
  0x00007f75704c35c2: mov    %rsp,-0x28(%rsp)
  0x00007f75704c35c7: sub    $0x80,%rsp
  0x00007f75704c35ce: mov    %rax,0x78(%rsp)
  0x00007f75704c35d3: mov    %rcx,0x70(%rsp)
  0x00007f75704c35d8: mov    %rdx,0x68(%rsp)
  0x00007f75704c35dd: mov    %rbx,0x60(%rsp)
  0x00007f75704c35e2: mov    %rbp,0x50(%rsp)
  0x00007f75704c35e7: mov    %rsi,0x48(%rsp)
  0x00007f75704c35ec: mov    %rdi,0x40(%rsp)
  0x00007f75704c35f1: mov    %r8,0x38(%rsp)
  0x00007f75704c35f6: mov    %r9,0x30(%rsp)
  0x00007f75704c35fb: mov    %r10,0x28(%rsp)
  0x00007f75704c3600: mov    %r11,0x20(%rsp)
  0x00007f75704c3605: mov    %r12,0x18(%rsp)
  0x00007f75704c360a: mov    %r13,0x10(%rsp)
  0x00007f75704c360f: mov    %r14,0x8(%rsp)
  0x00007f75704c3614: mov    %r15,(%rsp)
  0x00007f75704c3618: sub    $0x200,%rsp
  0x00007f75704c361f: fxsave64 (%rsp)
  0x00007f75704c3624: mov    %rbx,%rdi
  0x00007f75704c3627: mov    %rax,%rsi
  0x00007f75704c362a: callq  0x00007f7585522bca
  0x00007f75704c362f: fxrstor64 (%rsp)
  0x00007f75704c3634: add    $0x200,%rsp
  0x00007f75704c363b: mov    (%rsp),%r15
  0x00007f75704c363f: mov    0x8(%rsp),%r14
  0x00007f75704c3644: mov    0x10(%rsp),%r13
  0x00007f75704c3649: mov    0x18(%rsp),%r12
  0x00007f75704c364e: mov    0x20(%rsp),%r11
  0x00007f75704c3653: mov    0x28(%rsp),%r10
  0x00007f75704c3658: mov    0x30(%rsp),%r9
  0x00007f75704c365d: mov    0x38(%rsp),%r8
  0x00007f75704c3662: mov    0x40(%rsp),%rdi
  0x00007f75704c3667: mov    0x48(%rsp),%rsi
  0x00007f75704c366c: mov    0x50(%rsp),%rbp
  0x00007f75704c3671: mov    0x60(%rsp),%rbx
  0x00007f75704c3676: mov    0x68(%rsp),%rdx
  0x00007f75704c367b: mov    0x70(%rsp),%rcx
  0x00007f75704c3680: mov    0x78(%rsp),%rax
  0x00007f75704c3685: add    $0x80,%rsp
  0x00007f75704c368c: add    $0x8,%rsp
  0x00007f75704c3690: popfq  
  0x00007f75704c3691: mov    %r13,%rsp
  0x00007f75704c3694: pop    %rax
  0x00007f75704c3695: mov    %rsp,%r13
  0x00007f75704c3698: sub    $0x30,%rsp
  0x00007f75704c369c: mov    %rax,(%rsp)
  0x00007f75704c36a0: mov    %rsi,0x28(%rsp)
  0x00007f75704c36a5: mov    %edx,0x20(%rsp)
  0x00007f75704c36a9: mov    %ecx,0x18(%rsp)
  0x00007f75704c36ad: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c36b7: mov    %rax,0x10(%rsp)
  0x00007f75704c36bc: mov    %r8,0x8(%rsp)
  0x00007f75704c36c1: mov    0x40(%rbx),%rcx
  0x00007f75704c36c5: jmpq   *%rcx

AHE@0x00007f75800ea7a0: 0xbaa7e000 i2c: 0x00007f75704c37a0 c2i: 0x00007f75704c38e5 c2iUV: 0x00007f75704c38b8
i2c argument handler #59 for: static ([DIID)I (617 bytes generated)
c2i argument handler starts at 0x7f75704c38e5
  0x00007f75704c37a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c37a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c37ae: cmp    %r11,%rax
  0x00007f75704c37b1: jbe    0x00007f75704c37ca
  0x00007f75704c37b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c37c1: cmp    %r11,%rax
  0x00007f75704c37c4: jb     0x00007f75704c388d
  0x00007f75704c37ca: movabs $0x7f7570369420,%r11
  0x00007f75704c37d4: cmp    %r11,%rax
  0x00007f75704c37d7: jbe    0x00007f75704c37f0
  0x00007f75704c37dd: movabs $0x7f757036de58,%r11
  0x00007f75704c37e7: cmp    %r11,%rax
  0x00007f75704c37ea: jb     0x00007f75704c388d
  0x00007f75704c37f0: movabs $0x7f75704a9820,%r11
  0x00007f75704c37fa: cmp    %r11,%rax
  0x00007f75704c37fd: jbe    0x00007f75704c3816
  0x00007f75704c3803: movabs $0x7f75704af5e0,%r11
  0x00007f75704c380d: cmp    %r11,%rax
  0x00007f75704c3810: jb     0x00007f75704c388d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c3816: mov    %rsp,-0x28(%rsp)
  0x00007f75704c381b: sub    $0x80,%rsp
  0x00007f75704c3822: mov    %rax,0x78(%rsp)
  0x00007f75704c3827: mov    %rcx,0x70(%rsp)
  0x00007f75704c382c: mov    %rdx,0x68(%rsp)
  0x00007f75704c3831: mov    %rbx,0x60(%rsp)
  0x00007f75704c3836: mov    %rbp,0x50(%rsp)
  0x00007f75704c383b: mov    %rsi,0x48(%rsp)
  0x00007f75704c3840: mov    %rdi,0x40(%rsp)
  0x00007f75704c3845: mov    %r8,0x38(%rsp)
  0x00007f75704c384a: mov    %r9,0x30(%rsp)
  0x00007f75704c384f: mov    %r10,0x28(%rsp)
  0x00007f75704c3854: mov    %r11,0x20(%rsp)
  0x00007f75704c3859: mov    %r12,0x18(%rsp)
  0x00007f75704c385e: mov    %r13,0x10(%rsp)
  0x00007f75704c3863: mov    %r14,0x8(%rsp)
  0x00007f75704c3868: mov    %r15,(%rsp)
  0x00007f75704c386c: movabs $0x7f758592f470,%rdi
  0x00007f75704c3876: movabs $0x7f75704c3816,%rsi
  0x00007f75704c3880: mov    %rsp,%rdx
  0x00007f75704c3883: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3887: callq  0x00007f75853729fa
  0x00007f75704c388c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c388d: mov    %rsp,%r11
  0x00007f75704c3890: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3894: push   %rax
  0x00007f75704c3895: mov    %r11,%rax
  0x00007f75704c3898: mov    0x50(%rbx),%r11
  0x00007f75704c389c: mov    0x28(%rax),%rsi
  0x00007f75704c38a0: mov    0x20(%rax),%edx
  0x00007f75704c38a3: mov    0x18(%rax),%ecx
  0x00007f75704c38a6: vmovsd 0x8(%rax),%xmm0
  0x00007f75704c38ab: mov    %rbx,0x258(%r15)
  0x00007f75704c38b2: mov    %rbx,%rax
  0x00007f75704c38b5: jmpq   *%r11
  0x00007f75704c38b8: mov    0x8(%rsi),%ebx
  0x00007f75704c38bb: shl    $0x3,%rbx
  0x00007f75704c38bf: cmp    0x10(%rax),%rbx
  0x00007f75704c38c3: mov    0x8(%rax),%rbx
  0x00007f75704c38c7: je     0x00007f75704c38d2
  0x00007f75704c38cd: jmpq   0x00007f757046ec40
  0x00007f75704c38d2: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c38da: je     0x00007f75704c39d5
  0x00007f75704c38e0: jmpq   0x00007f757046ec40
  0x00007f75704c38e5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c38ed: je     0x00007f75704c39d5
  0x00007f75704c38f3: mov    %rsp,%r13
  0x00007f75704c38f6: mov    (%rsp),%rax
  0x00007f75704c38fa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c38fe: pushfq 
  0x00007f75704c38ff: sub    $0x8,%rsp
  0x00007f75704c3903: mov    %rsp,-0x28(%rsp)
  0x00007f75704c3908: sub    $0x80,%rsp
  0x00007f75704c390f: mov    %rax,0x78(%rsp)
  0x00007f75704c3914: mov    %rcx,0x70(%rsp)
  0x00007f75704c3919: mov    %rdx,0x68(%rsp)
  0x00007f75704c391e: mov    %rbx,0x60(%rsp)
  0x00007f75704c3923: mov    %rbp,0x50(%rsp)
  0x00007f75704c3928: mov    %rsi,0x48(%rsp)
  0x00007f75704c392d: mov    %rdi,0x40(%rsp)
  0x00007f75704c3932: mov    %r8,0x38(%rsp)
  0x00007f75704c3937: mov    %r9,0x30(%rsp)
  0x00007f75704c393c: mov    %r10,0x28(%rsp)
  0x00007f75704c3941: mov    %r11,0x20(%rsp)
  0x00007f75704c3946: mov    %r12,0x18(%rsp)
  0x00007f75704c394b: mov    %r13,0x10(%rsp)
  0x00007f75704c3950: mov    %r14,0x8(%rsp)
  0x00007f75704c3955: mov    %r15,(%rsp)
  0x00007f75704c3959: sub    $0x200,%rsp
  0x00007f75704c3960: fxsave64 (%rsp)
  0x00007f75704c3965: mov    %rbx,%rdi
  0x00007f75704c3968: mov    %rax,%rsi
  0x00007f75704c396b: callq  0x00007f7585522bca
  0x00007f75704c3970: fxrstor64 (%rsp)
  0x00007f75704c3975: add    $0x200,%rsp
  0x00007f75704c397c: mov    (%rsp),%r15
  0x00007f75704c3980: mov    0x8(%rsp),%r14
  0x00007f75704c3985: mov    0x10(%rsp),%r13
  0x00007f75704c398a: mov    0x18(%rsp),%r12
  0x00007f75704c398f: mov    0x20(%rsp),%r11
  0x00007f75704c3994: mov    0x28(%rsp),%r10
  0x00007f75704c3999: mov    0x30(%rsp),%r9
  0x00007f75704c399e: mov    0x38(%rsp),%r8
  0x00007f75704c39a3: mov    0x40(%rsp),%rdi
  0x00007f75704c39a8: mov    0x48(%rsp),%rsi
  0x00007f75704c39ad: mov    0x50(%rsp),%rbp
  0x00007f75704c39b2: mov    0x60(%rsp),%rbx
  0x00007f75704c39b7: mov    0x68(%rsp),%rdx
  0x00007f75704c39bc: mov    0x70(%rsp),%rcx
  0x00007f75704c39c1: mov    0x78(%rsp),%rax
  0x00007f75704c39c6: add    $0x80,%rsp
  0x00007f75704c39cd: add    $0x8,%rsp
  0x00007f75704c39d1: popfq  
  0x00007f75704c39d2: mov    %r13,%rsp
  0x00007f75704c39d5: pop    %rax
  0x00007f75704c39d6: mov    %rsp,%r13
  0x00007f75704c39d9: sub    $0x30,%rsp
  0x00007f75704c39dd: mov    %rax,(%rsp)
  0x00007f75704c39e1: mov    %rsi,0x28(%rsp)
  0x00007f75704c39e6: mov    %edx,0x20(%rsp)
  0x00007f75704c39ea: mov    %ecx,0x18(%rsp)
  0x00007f75704c39ee: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c39f8: mov    %rax,0x10(%rsp)
  0x00007f75704c39fd: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704c3a03: mov    0x40(%rbx),%rcx
  0x00007f75704c3a07: jmpq   *%rcx

AHE@0x00007f758012c0c0: 0xbaa60000 i2c: 0x00007f75704c3ae0 c2i: 0x00007f75704c3c25 c2iUV: 0x00007f75704c3bf8
i2c argument handler #60 for: static ([FIIF)I (602 bytes generated)
c2i argument handler starts at 0x7f75704c3c25
  0x00007f75704c3ae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c3ae4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c3aee: cmp    %r11,%rax
  0x00007f75704c3af1: jbe    0x00007f75704c3b0a
  0x00007f75704c3af7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c3b01: cmp    %r11,%rax
  0x00007f75704c3b04: jb     0x00007f75704c3bcd
  0x00007f75704c3b0a: movabs $0x7f7570369420,%r11
  0x00007f75704c3b14: cmp    %r11,%rax
  0x00007f75704c3b17: jbe    0x00007f75704c3b30
  0x00007f75704c3b1d: movabs $0x7f757036de58,%r11
  0x00007f75704c3b27: cmp    %r11,%rax
  0x00007f75704c3b2a: jb     0x00007f75704c3bcd
  0x00007f75704c3b30: movabs $0x7f75704a9820,%r11
  0x00007f75704c3b3a: cmp    %r11,%rax
  0x00007f75704c3b3d: jbe    0x00007f75704c3b56
  0x00007f75704c3b43: movabs $0x7f75704af5e0,%r11
  0x00007f75704c3b4d: cmp    %r11,%rax
  0x00007f75704c3b50: jb     0x00007f75704c3bcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c3b56: mov    %rsp,-0x28(%rsp)
  0x00007f75704c3b5b: sub    $0x80,%rsp
  0x00007f75704c3b62: mov    %rax,0x78(%rsp)
  0x00007f75704c3b67: mov    %rcx,0x70(%rsp)
  0x00007f75704c3b6c: mov    %rdx,0x68(%rsp)
  0x00007f75704c3b71: mov    %rbx,0x60(%rsp)
  0x00007f75704c3b76: mov    %rbp,0x50(%rsp)
  0x00007f75704c3b7b: mov    %rsi,0x48(%rsp)
  0x00007f75704c3b80: mov    %rdi,0x40(%rsp)
  0x00007f75704c3b85: mov    %r8,0x38(%rsp)
  0x00007f75704c3b8a: mov    %r9,0x30(%rsp)
  0x00007f75704c3b8f: mov    %r10,0x28(%rsp)
  0x00007f75704c3b94: mov    %r11,0x20(%rsp)
  0x00007f75704c3b99: mov    %r12,0x18(%rsp)
  0x00007f75704c3b9e: mov    %r13,0x10(%rsp)
  0x00007f75704c3ba3: mov    %r14,0x8(%rsp)
  0x00007f75704c3ba8: mov    %r15,(%rsp)
  0x00007f75704c3bac: movabs $0x7f758592f470,%rdi
  0x00007f75704c3bb6: movabs $0x7f75704c3b56,%rsi
  0x00007f75704c3bc0: mov    %rsp,%rdx
  0x00007f75704c3bc3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3bc7: callq  0x00007f75853729fa
  0x00007f75704c3bcc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c3bcd: mov    %rsp,%r11
  0x00007f75704c3bd0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3bd4: push   %rax
  0x00007f75704c3bd5: mov    %r11,%rax
  0x00007f75704c3bd8: mov    0x50(%rbx),%r11
  0x00007f75704c3bdc: mov    0x20(%rax),%rsi
  0x00007f75704c3be0: mov    0x18(%rax),%edx
  0x00007f75704c3be3: mov    0x10(%rax),%ecx
  0x00007f75704c3be6: vmovss 0x8(%rax),%xmm0
  0x00007f75704c3beb: mov    %rbx,0x258(%r15)
  0x00007f75704c3bf2: mov    %rbx,%rax
  0x00007f75704c3bf5: jmpq   *%r11
  0x00007f75704c3bf8: mov    0x8(%rsi),%ebx
  0x00007f75704c3bfb: shl    $0x3,%rbx
  0x00007f75704c3bff: cmp    0x10(%rax),%rbx
  0x00007f75704c3c03: mov    0x8(%rax),%rbx
  0x00007f75704c3c07: je     0x00007f75704c3c12
  0x00007f75704c3c0d: jmpq   0x00007f757046ec40
  0x00007f75704c3c12: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c3c1a: je     0x00007f75704c3d15
  0x00007f75704c3c20: jmpq   0x00007f757046ec40
  0x00007f75704c3c25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c3c2d: je     0x00007f75704c3d15
  0x00007f75704c3c33: mov    %rsp,%r13
  0x00007f75704c3c36: mov    (%rsp),%rax
  0x00007f75704c3c3a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3c3e: pushfq 
  0x00007f75704c3c3f: sub    $0x8,%rsp
  0x00007f75704c3c43: mov    %rsp,-0x28(%rsp)
  0x00007f75704c3c48: sub    $0x80,%rsp
  0x00007f75704c3c4f: mov    %rax,0x78(%rsp)
  0x00007f75704c3c54: mov    %rcx,0x70(%rsp)
  0x00007f75704c3c59: mov    %rdx,0x68(%rsp)
  0x00007f75704c3c5e: mov    %rbx,0x60(%rsp)
  0x00007f75704c3c63: mov    %rbp,0x50(%rsp)
  0x00007f75704c3c68: mov    %rsi,0x48(%rsp)
  0x00007f75704c3c6d: mov    %rdi,0x40(%rsp)
  0x00007f75704c3c72: mov    %r8,0x38(%rsp)
  0x00007f75704c3c77: mov    %r9,0x30(%rsp)
  0x00007f75704c3c7c: mov    %r10,0x28(%rsp)
  0x00007f75704c3c81: mov    %r11,0x20(%rsp)
  0x00007f75704c3c86: mov    %r12,0x18(%rsp)
  0x00007f75704c3c8b: mov    %r13,0x10(%rsp)
  0x00007f75704c3c90: mov    %r14,0x8(%rsp)
  0x00007f75704c3c95: mov    %r15,(%rsp)
  0x00007f75704c3c99: sub    $0x200,%rsp
  0x00007f75704c3ca0: fxsave64 (%rsp)
  0x00007f75704c3ca5: mov    %rbx,%rdi
  0x00007f75704c3ca8: mov    %rax,%rsi
  0x00007f75704c3cab: callq  0x00007f7585522bca
  0x00007f75704c3cb0: fxrstor64 (%rsp)
  0x00007f75704c3cb5: add    $0x200,%rsp
  0x00007f75704c3cbc: mov    (%rsp),%r15
  0x00007f75704c3cc0: mov    0x8(%rsp),%r14
  0x00007f75704c3cc5: mov    0x10(%rsp),%r13
  0x00007f75704c3cca: mov    0x18(%rsp),%r12
  0x00007f75704c3ccf: mov    0x20(%rsp),%r11
  0x00007f75704c3cd4: mov    0x28(%rsp),%r10
  0x00007f75704c3cd9: mov    0x30(%rsp),%r9
  0x00007f75704c3cde: mov    0x38(%rsp),%r8
  0x00007f75704c3ce3: mov    0x40(%rsp),%rdi
  0x00007f75704c3ce8: mov    0x48(%rsp),%rsi
  0x00007f75704c3ced: mov    0x50(%rsp),%rbp
  0x00007f75704c3cf2: mov    0x60(%rsp),%rbx
  0x00007f75704c3cf7: mov    0x68(%rsp),%rdx
  0x00007f75704c3cfc: mov    0x70(%rsp),%rcx
  0x00007f75704c3d01: mov    0x78(%rsp),%rax
  0x00007f75704c3d06: add    $0x80,%rsp
  0x00007f75704c3d0d: add    $0x8,%rsp
  0x00007f75704c3d11: popfq  
  0x00007f75704c3d12: mov    %r13,%rsp
  0x00007f75704c3d15: pop    %rax
  0x00007f75704c3d16: mov    %rsp,%r13
  0x00007f75704c3d19: sub    $0x30,%rsp
  0x00007f75704c3d1d: mov    %rax,(%rsp)
  0x00007f75704c3d21: mov    %rsi,0x20(%rsp)
  0x00007f75704c3d26: mov    %edx,0x18(%rsp)
  0x00007f75704c3d2a: mov    %ecx,0x10(%rsp)
  0x00007f75704c3d2e: vmovss %xmm0,0x8(%rsp)
  0x00007f75704c3d34: mov    0x40(%rbx),%rcx
  0x00007f75704c3d38: jmpq   *%rcx

AHE@0x00007f758012c108: 0xbaab0000 i2c: 0x00007f75704c3de0 c2i: 0x00007f75704c3f24 c2iUV: 0x00007f75704c3ef7
i2c argument handler #61 for: static ([Ljava/lang/Object;IILjava/lang/Object;)I (600 bytes generated)
c2i argument handler starts at 0x7f75704c3f24
  0x00007f75704c3de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c3de4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c3dee: cmp    %r11,%rax
  0x00007f75704c3df1: jbe    0x00007f75704c3e0a
  0x00007f75704c3df7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c3e01: cmp    %r11,%rax
  0x00007f75704c3e04: jb     0x00007f75704c3ecd
  0x00007f75704c3e0a: movabs $0x7f7570369420,%r11
  0x00007f75704c3e14: cmp    %r11,%rax
  0x00007f75704c3e17: jbe    0x00007f75704c3e30
  0x00007f75704c3e1d: movabs $0x7f757036de58,%r11
  0x00007f75704c3e27: cmp    %r11,%rax
  0x00007f75704c3e2a: jb     0x00007f75704c3ecd
  0x00007f75704c3e30: movabs $0x7f75704a9820,%r11
  0x00007f75704c3e3a: cmp    %r11,%rax
  0x00007f75704c3e3d: jbe    0x00007f75704c3e56
  0x00007f75704c3e43: movabs $0x7f75704af5e0,%r11
  0x00007f75704c3e4d: cmp    %r11,%rax
  0x00007f75704c3e50: jb     0x00007f75704c3ecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c3e56: mov    %rsp,-0x28(%rsp)
  0x00007f75704c3e5b: sub    $0x80,%rsp
  0x00007f75704c3e62: mov    %rax,0x78(%rsp)
  0x00007f75704c3e67: mov    %rcx,0x70(%rsp)
  0x00007f75704c3e6c: mov    %rdx,0x68(%rsp)
  0x00007f75704c3e71: mov    %rbx,0x60(%rsp)
  0x00007f75704c3e76: mov    %rbp,0x50(%rsp)
  0x00007f75704c3e7b: mov    %rsi,0x48(%rsp)
  0x00007f75704c3e80: mov    %rdi,0x40(%rsp)
  0x00007f75704c3e85: mov    %r8,0x38(%rsp)
  0x00007f75704c3e8a: mov    %r9,0x30(%rsp)
  0x00007f75704c3e8f: mov    %r10,0x28(%rsp)
  0x00007f75704c3e94: mov    %r11,0x20(%rsp)
  0x00007f75704c3e99: mov    %r12,0x18(%rsp)
  0x00007f75704c3e9e: mov    %r13,0x10(%rsp)
  0x00007f75704c3ea3: mov    %r14,0x8(%rsp)
  0x00007f75704c3ea8: mov    %r15,(%rsp)
  0x00007f75704c3eac: movabs $0x7f758592f470,%rdi
  0x00007f75704c3eb6: movabs $0x7f75704c3e56,%rsi
  0x00007f75704c3ec0: mov    %rsp,%rdx
  0x00007f75704c3ec3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3ec7: callq  0x00007f75853729fa
  0x00007f75704c3ecc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c3ecd: mov    %rsp,%r11
  0x00007f75704c3ed0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3ed4: push   %rax
  0x00007f75704c3ed5: mov    %r11,%rax
  0x00007f75704c3ed8: mov    0x50(%rbx),%r11
  0x00007f75704c3edc: mov    0x20(%rax),%rsi
  0x00007f75704c3ee0: mov    0x18(%rax),%edx
  0x00007f75704c3ee3: mov    0x10(%rax),%ecx
  0x00007f75704c3ee6: mov    0x8(%rax),%r8
  0x00007f75704c3eea: mov    %rbx,0x258(%r15)
  0x00007f75704c3ef1: mov    %rbx,%rax
  0x00007f75704c3ef4: jmpq   *%r11
  0x00007f75704c3ef7: mov    0x8(%rsi),%ebx
  0x00007f75704c3efa: shl    $0x3,%rbx
  0x00007f75704c3efe: cmp    0x10(%rax),%rbx
  0x00007f75704c3f02: mov    0x8(%rax),%rbx
  0x00007f75704c3f06: je     0x00007f75704c3f11
  0x00007f75704c3f0c: jmpq   0x00007f757046ec40
  0x00007f75704c3f11: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c3f19: je     0x00007f75704c4014
  0x00007f75704c3f1f: jmpq   0x00007f757046ec40
  0x00007f75704c3f24: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c3f2c: je     0x00007f75704c4014
  0x00007f75704c3f32: mov    %rsp,%r13
  0x00007f75704c3f35: mov    (%rsp),%rax
  0x00007f75704c3f39: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c3f3d: pushfq 
  0x00007f75704c3f3e: sub    $0x8,%rsp
  0x00007f75704c3f42: mov    %rsp,-0x28(%rsp)
  0x00007f75704c3f47: sub    $0x80,%rsp
  0x00007f75704c3f4e: mov    %rax,0x78(%rsp)
  0x00007f75704c3f53: mov    %rcx,0x70(%rsp)
  0x00007f75704c3f58: mov    %rdx,0x68(%rsp)
  0x00007f75704c3f5d: mov    %rbx,0x60(%rsp)
  0x00007f75704c3f62: mov    %rbp,0x50(%rsp)
  0x00007f75704c3f67: mov    %rsi,0x48(%rsp)
  0x00007f75704c3f6c: mov    %rdi,0x40(%rsp)
  0x00007f75704c3f71: mov    %r8,0x38(%rsp)
  0x00007f75704c3f76: mov    %r9,0x30(%rsp)
  0x00007f75704c3f7b: mov    %r10,0x28(%rsp)
  0x00007f75704c3f80: mov    %r11,0x20(%rsp)
  0x00007f75704c3f85: mov    %r12,0x18(%rsp)
  0x00007f75704c3f8a: mov    %r13,0x10(%rsp)
  0x00007f75704c3f8f: mov    %r14,0x8(%rsp)
  0x00007f75704c3f94: mov    %r15,(%rsp)
  0x00007f75704c3f98: sub    $0x200,%rsp
  0x00007f75704c3f9f: fxsave64 (%rsp)
  0x00007f75704c3fa4: mov    %rbx,%rdi
  0x00007f75704c3fa7: mov    %rax,%rsi
  0x00007f75704c3faa: callq  0x00007f7585522bca
  0x00007f75704c3faf: fxrstor64 (%rsp)
  0x00007f75704c3fb4: add    $0x200,%rsp
  0x00007f75704c3fbb: mov    (%rsp),%r15
  0x00007f75704c3fbf: mov    0x8(%rsp),%r14
  0x00007f75704c3fc4: mov    0x10(%rsp),%r13
  0x00007f75704c3fc9: mov    0x18(%rsp),%r12
  0x00007f75704c3fce: mov    0x20(%rsp),%r11
  0x00007f75704c3fd3: mov    0x28(%rsp),%r10
  0x00007f75704c3fd8: mov    0x30(%rsp),%r9
  0x00007f75704c3fdd: mov    0x38(%rsp),%r8
  0x00007f75704c3fe2: mov    0x40(%rsp),%rdi
  0x00007f75704c3fe7: mov    0x48(%rsp),%rsi
  0x00007f75704c3fec: mov    0x50(%rsp),%rbp
  0x00007f75704c3ff1: mov    0x60(%rsp),%rbx
  0x00007f75704c3ff6: mov    0x68(%rsp),%rdx
  0x00007f75704c3ffb: mov    0x70(%rsp),%rcx
  0x00007f75704c4000: mov    0x78(%rsp),%rax
  0x00007f75704c4005: add    $0x80,%rsp
  0x00007f75704c400c: add    $0x8,%rsp
  0x00007f75704c4010: popfq  
  0x00007f75704c4011: mov    %r13,%rsp
  0x00007f75704c4014: pop    %rax
  0x00007f75704c4015: mov    %rsp,%r13
  0x00007f75704c4018: sub    $0x30,%rsp
  0x00007f75704c401c: mov    %rax,(%rsp)
  0x00007f75704c4020: mov    %rsi,0x20(%rsp)
  0x00007f75704c4025: mov    %edx,0x18(%rsp)
  0x00007f75704c4029: mov    %ecx,0x10(%rsp)
  0x00007f75704c402d: mov    %r8,0x8(%rsp)
  0x00007f75704c4032: mov    0x40(%rbx),%rcx
  0x00007f75704c4036: jmpq   *%rcx

AHE@0x00007f758012c150: 0xbbaaab00 i2c: 0x00007f75704c40e0 c2i: 0x00007f75704c422d c2iUV: 0x00007f75704c4200
i2c argument handler #62 for: static ([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)V (620 bytes generated)
c2i argument handler starts at 0x7f75704c422d
  0x00007f75704c40e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c40e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c40ee: cmp    %r11,%rax
  0x00007f75704c40f1: jbe    0x00007f75704c410a
  0x00007f75704c40f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c4101: cmp    %r11,%rax
  0x00007f75704c4104: jb     0x00007f75704c41cd
  0x00007f75704c410a: movabs $0x7f7570369420,%r11
  0x00007f75704c4114: cmp    %r11,%rax
  0x00007f75704c4117: jbe    0x00007f75704c4130
  0x00007f75704c411d: movabs $0x7f757036de58,%r11
  0x00007f75704c4127: cmp    %r11,%rax
  0x00007f75704c412a: jb     0x00007f75704c41cd
  0x00007f75704c4130: movabs $0x7f75704a9820,%r11
  0x00007f75704c413a: cmp    %r11,%rax
  0x00007f75704c413d: jbe    0x00007f75704c4156
  0x00007f75704c4143: movabs $0x7f75704af5e0,%r11
  0x00007f75704c414d: cmp    %r11,%rax
  0x00007f75704c4150: jb     0x00007f75704c41cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c4156: mov    %rsp,-0x28(%rsp)
  0x00007f75704c415b: sub    $0x80,%rsp
  0x00007f75704c4162: mov    %rax,0x78(%rsp)
  0x00007f75704c4167: mov    %rcx,0x70(%rsp)
  0x00007f75704c416c: mov    %rdx,0x68(%rsp)
  0x00007f75704c4171: mov    %rbx,0x60(%rsp)
  0x00007f75704c4176: mov    %rbp,0x50(%rsp)
  0x00007f75704c417b: mov    %rsi,0x48(%rsp)
  0x00007f75704c4180: mov    %rdi,0x40(%rsp)
  0x00007f75704c4185: mov    %r8,0x38(%rsp)
  0x00007f75704c418a: mov    %r9,0x30(%rsp)
  0x00007f75704c418f: mov    %r10,0x28(%rsp)
  0x00007f75704c4194: mov    %r11,0x20(%rsp)
  0x00007f75704c4199: mov    %r12,0x18(%rsp)
  0x00007f75704c419e: mov    %r13,0x10(%rsp)
  0x00007f75704c41a3: mov    %r14,0x8(%rsp)
  0x00007f75704c41a8: mov    %r15,(%rsp)
  0x00007f75704c41ac: movabs $0x7f758592f470,%rdi
  0x00007f75704c41b6: movabs $0x7f75704c4156,%rsi
  0x00007f75704c41c0: mov    %rsp,%rdx
  0x00007f75704c41c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c41c7: callq  0x00007f75853729fa
  0x00007f75704c41cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c41cd: mov    %rsp,%r11
  0x00007f75704c41d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c41d4: push   %rax
  0x00007f75704c41d5: mov    %r11,%rax
  0x00007f75704c41d8: mov    0x50(%rbx),%r11
  0x00007f75704c41dc: mov    0x30(%rax),%rsi
  0x00007f75704c41e0: mov    0x28(%rax),%rdx
  0x00007f75704c41e4: mov    0x20(%rax),%ecx
  0x00007f75704c41e7: mov    0x18(%rax),%r8d
  0x00007f75704c41eb: mov    0x10(%rax),%r9d
  0x00007f75704c41ef: mov    0x8(%rax),%rdi
  0x00007f75704c41f3: mov    %rbx,0x258(%r15)
  0x00007f75704c41fa: mov    %rbx,%rax
  0x00007f75704c41fd: jmpq   *%r11
  0x00007f75704c4200: mov    0x8(%rsi),%ebx
  0x00007f75704c4203: shl    $0x3,%rbx
  0x00007f75704c4207: cmp    0x10(%rax),%rbx
  0x00007f75704c420b: mov    0x8(%rax),%rbx
  0x00007f75704c420f: je     0x00007f75704c421a
  0x00007f75704c4215: jmpq   0x00007f757046ec40
  0x00007f75704c421a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4222: je     0x00007f75704c431d
  0x00007f75704c4228: jmpq   0x00007f757046ec40
  0x00007f75704c422d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4235: je     0x00007f75704c431d
  0x00007f75704c423b: mov    %rsp,%r13
  0x00007f75704c423e: mov    (%rsp),%rax
  0x00007f75704c4242: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4246: pushfq 
  0x00007f75704c4247: sub    $0x8,%rsp
  0x00007f75704c424b: mov    %rsp,-0x28(%rsp)
  0x00007f75704c4250: sub    $0x80,%rsp
  0x00007f75704c4257: mov    %rax,0x78(%rsp)
  0x00007f75704c425c: mov    %rcx,0x70(%rsp)
  0x00007f75704c4261: mov    %rdx,0x68(%rsp)
  0x00007f75704c4266: mov    %rbx,0x60(%rsp)
  0x00007f75704c426b: mov    %rbp,0x50(%rsp)
  0x00007f75704c4270: mov    %rsi,0x48(%rsp)
  0x00007f75704c4275: mov    %rdi,0x40(%rsp)
  0x00007f75704c427a: mov    %r8,0x38(%rsp)
  0x00007f75704c427f: mov    %r9,0x30(%rsp)
  0x00007f75704c4284: mov    %r10,0x28(%rsp)
  0x00007f75704c4289: mov    %r11,0x20(%rsp)
  0x00007f75704c428e: mov    %r12,0x18(%rsp)
  0x00007f75704c4293: mov    %r13,0x10(%rsp)
  0x00007f75704c4298: mov    %r14,0x8(%rsp)
  0x00007f75704c429d: mov    %r15,(%rsp)
  0x00007f75704c42a1: sub    $0x200,%rsp
  0x00007f75704c42a8: fxsave64 (%rsp)
  0x00007f75704c42ad: mov    %rbx,%rdi
  0x00007f75704c42b0: mov    %rax,%rsi
  0x00007f75704c42b3: callq  0x00007f7585522bca
  0x00007f75704c42b8: fxrstor64 (%rsp)
  0x00007f75704c42bd: add    $0x200,%rsp
  0x00007f75704c42c4: mov    (%rsp),%r15
  0x00007f75704c42c8: mov    0x8(%rsp),%r14
  0x00007f75704c42cd: mov    0x10(%rsp),%r13
  0x00007f75704c42d2: mov    0x18(%rsp),%r12
  0x00007f75704c42d7: mov    0x20(%rsp),%r11
  0x00007f75704c42dc: mov    0x28(%rsp),%r10
  0x00007f75704c42e1: mov    0x30(%rsp),%r9
  0x00007f75704c42e6: mov    0x38(%rsp),%r8
  0x00007f75704c42eb: mov    0x40(%rsp),%rdi
  0x00007f75704c42f0: mov    0x48(%rsp),%rsi
  0x00007f75704c42f5: mov    0x50(%rsp),%rbp
  0x00007f75704c42fa: mov    0x60(%rsp),%rbx
  0x00007f75704c42ff: mov    0x68(%rsp),%rdx
  0x00007f75704c4304: mov    0x70(%rsp),%rcx
  0x00007f75704c4309: mov    0x78(%rsp),%rax
  0x00007f75704c430e: add    $0x80,%rsp
  0x00007f75704c4315: add    $0x8,%rsp
  0x00007f75704c4319: popfq  
  0x00007f75704c431a: mov    %r13,%rsp
  0x00007f75704c431d: pop    %rax
  0x00007f75704c431e: mov    %rsp,%r13
  0x00007f75704c4321: sub    $0x40,%rsp
  0x00007f75704c4325: mov    %rax,(%rsp)
  0x00007f75704c4329: mov    %rsi,0x30(%rsp)
  0x00007f75704c432e: mov    %rdx,0x28(%rsp)
  0x00007f75704c4333: mov    %ecx,0x20(%rsp)
  0x00007f75704c4337: mov    %r8d,0x18(%rsp)
  0x00007f75704c433c: mov    %r9d,0x10(%rsp)
  0x00007f75704c4341: mov    %rdi,0x8(%rsp)
  0x00007f75704c4346: mov    0x40(%rbx),%rcx
  0x00007f75704c434a: jmpq   *%rcx

AHE@0x00007f758012c198: 0xba7e0000 i2c: 0x00007f75704c4420 c2i: 0x00007f75704c4562 c2iUV: 0x00007f75704c4535
i2c argument handler #63 for: receiver (ID)Ljava/lang/AbstractStringBuilder; (610 bytes generated)
c2i argument handler starts at 0x7f75704c4562
  0x00007f75704c4420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c4424: movabs $0x7f757036e3e0,%r11
  0x00007f75704c442e: cmp    %r11,%rax
  0x00007f75704c4431: jbe    0x00007f75704c444a
  0x00007f75704c4437: movabs $0x7f757046e3e0,%r11
  0x00007f75704c4441: cmp    %r11,%rax
  0x00007f75704c4444: jb     0x00007f75704c450d
  0x00007f75704c444a: movabs $0x7f7570369420,%r11
  0x00007f75704c4454: cmp    %r11,%rax
  0x00007f75704c4457: jbe    0x00007f75704c4470
  0x00007f75704c445d: movabs $0x7f757036de58,%r11
  0x00007f75704c4467: cmp    %r11,%rax
  0x00007f75704c446a: jb     0x00007f75704c450d
  0x00007f75704c4470: movabs $0x7f75704a9820,%r11
  0x00007f75704c447a: cmp    %r11,%rax
  0x00007f75704c447d: jbe    0x00007f75704c4496
  0x00007f75704c4483: movabs $0x7f75704af5e0,%r11
  0x00007f75704c448d: cmp    %r11,%rax
  0x00007f75704c4490: jb     0x00007f75704c450d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c4496: mov    %rsp,-0x28(%rsp)
  0x00007f75704c449b: sub    $0x80,%rsp
  0x00007f75704c44a2: mov    %rax,0x78(%rsp)
  0x00007f75704c44a7: mov    %rcx,0x70(%rsp)
  0x00007f75704c44ac: mov    %rdx,0x68(%rsp)
  0x00007f75704c44b1: mov    %rbx,0x60(%rsp)
  0x00007f75704c44b6: mov    %rbp,0x50(%rsp)
  0x00007f75704c44bb: mov    %rsi,0x48(%rsp)
  0x00007f75704c44c0: mov    %rdi,0x40(%rsp)
  0x00007f75704c44c5: mov    %r8,0x38(%rsp)
  0x00007f75704c44ca: mov    %r9,0x30(%rsp)
  0x00007f75704c44cf: mov    %r10,0x28(%rsp)
  0x00007f75704c44d4: mov    %r11,0x20(%rsp)
  0x00007f75704c44d9: mov    %r12,0x18(%rsp)
  0x00007f75704c44de: mov    %r13,0x10(%rsp)
  0x00007f75704c44e3: mov    %r14,0x8(%rsp)
  0x00007f75704c44e8: mov    %r15,(%rsp)
  0x00007f75704c44ec: movabs $0x7f758592f470,%rdi
  0x00007f75704c44f6: movabs $0x7f75704c4496,%rsi
  0x00007f75704c4500: mov    %rsp,%rdx
  0x00007f75704c4503: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4507: callq  0x00007f75853729fa
  0x00007f75704c450c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c450d: mov    %rsp,%r11
  0x00007f75704c4510: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4514: push   %rax
  0x00007f75704c4515: mov    %r11,%rax
  0x00007f75704c4518: mov    0x50(%rbx),%r11
  0x00007f75704c451c: mov    0x20(%rax),%rsi
  0x00007f75704c4520: mov    0x18(%rax),%edx
  0x00007f75704c4523: vmovsd 0x8(%rax),%xmm0
  0x00007f75704c4528: mov    %rbx,0x258(%r15)
  0x00007f75704c452f: mov    %rbx,%rax
  0x00007f75704c4532: jmpq   *%r11
  0x00007f75704c4535: mov    0x8(%rsi),%ebx
  0x00007f75704c4538: shl    $0x3,%rbx
  0x00007f75704c453c: cmp    0x10(%rax),%rbx
  0x00007f75704c4540: mov    0x8(%rax),%rbx
  0x00007f75704c4544: je     0x00007f75704c454f
  0x00007f75704c454a: jmpq   0x00007f757046ec40
  0x00007f75704c454f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4557: je     0x00007f75704c4652
  0x00007f75704c455d: jmpq   0x00007f757046ec40
  0x00007f75704c4562: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c456a: je     0x00007f75704c4652
  0x00007f75704c4570: mov    %rsp,%r13
  0x00007f75704c4573: mov    (%rsp),%rax
  0x00007f75704c4577: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c457b: pushfq 
  0x00007f75704c457c: sub    $0x8,%rsp
  0x00007f75704c4580: mov    %rsp,-0x28(%rsp)
  0x00007f75704c4585: sub    $0x80,%rsp
  0x00007f75704c458c: mov    %rax,0x78(%rsp)
  0x00007f75704c4591: mov    %rcx,0x70(%rsp)
  0x00007f75704c4596: mov    %rdx,0x68(%rsp)
  0x00007f75704c459b: mov    %rbx,0x60(%rsp)
  0x00007f75704c45a0: mov    %rbp,0x50(%rsp)
  0x00007f75704c45a5: mov    %rsi,0x48(%rsp)
  0x00007f75704c45aa: mov    %rdi,0x40(%rsp)
  0x00007f75704c45af: mov    %r8,0x38(%rsp)
  0x00007f75704c45b4: mov    %r9,0x30(%rsp)
  0x00007f75704c45b9: mov    %r10,0x28(%rsp)
  0x00007f75704c45be: mov    %r11,0x20(%rsp)
  0x00007f75704c45c3: mov    %r12,0x18(%rsp)
  0x00007f75704c45c8: mov    %r13,0x10(%rsp)
  0x00007f75704c45cd: mov    %r14,0x8(%rsp)
  0x00007f75704c45d2: mov    %r15,(%rsp)
  0x00007f75704c45d6: sub    $0x200,%rsp
  0x00007f75704c45dd: fxsave64 (%rsp)
  0x00007f75704c45e2: mov    %rbx,%rdi
  0x00007f75704c45e5: mov    %rax,%rsi
  0x00007f75704c45e8: callq  0x00007f7585522bca
  0x00007f75704c45ed: fxrstor64 (%rsp)
  0x00007f75704c45f2: add    $0x200,%rsp
  0x00007f75704c45f9: mov    (%rsp),%r15
  0x00007f75704c45fd: mov    0x8(%rsp),%r14
  0x00007f75704c4602: mov    0x10(%rsp),%r13
  0x00007f75704c4607: mov    0x18(%rsp),%r12
  0x00007f75704c460c: mov    0x20(%rsp),%r11
  0x00007f75704c4611: mov    0x28(%rsp),%r10
  0x00007f75704c4616: mov    0x30(%rsp),%r9
  0x00007f75704c461b: mov    0x38(%rsp),%r8
  0x00007f75704c4620: mov    0x40(%rsp),%rdi
  0x00007f75704c4625: mov    0x48(%rsp),%rsi
  0x00007f75704c462a: mov    0x50(%rsp),%rbp
  0x00007f75704c462f: mov    0x60(%rsp),%rbx
  0x00007f75704c4634: mov    0x68(%rsp),%rdx
  0x00007f75704c4639: mov    0x70(%rsp),%rcx
  0x00007f75704c463e: mov    0x78(%rsp),%rax
  0x00007f75704c4643: add    $0x80,%rsp
  0x00007f75704c464a: add    $0x8,%rsp
  0x00007f75704c464e: popfq  
  0x00007f75704c464f: mov    %r13,%rsp
  0x00007f75704c4652: pop    %rax
  0x00007f75704c4653: mov    %rsp,%r13
  0x00007f75704c4656: sub    $0x30,%rsp
  0x00007f75704c465a: mov    %rax,(%rsp)
  0x00007f75704c465e: mov    %rsi,0x20(%rsp)
  0x00007f75704c4663: mov    %edx,0x18(%rsp)
  0x00007f75704c4667: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c4671: mov    %rax,0x10(%rsp)
  0x00007f75704c4676: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704c467c: mov    0x40(%rbx),%rcx
  0x00007f75704c4680: jmpq   *%rcx

AHE@0x00007f758012c1e0: 0xbabe0000 i2c: 0x00007f75704c4760 c2i: 0x00007f75704c48a1 c2iUV: 0x00007f75704c4874
i2c argument handler #64 for: receiver (IJ)Ljava/lang/AbstractStringBuilder; (608 bytes generated)
c2i argument handler starts at 0x7f75704c48a1
  0x00007f75704c4760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c4764: movabs $0x7f757036e3e0,%r11
  0x00007f75704c476e: cmp    %r11,%rax
  0x00007f75704c4771: jbe    0x00007f75704c478a
  0x00007f75704c4777: movabs $0x7f757046e3e0,%r11
  0x00007f75704c4781: cmp    %r11,%rax
  0x00007f75704c4784: jb     0x00007f75704c484d
  0x00007f75704c478a: movabs $0x7f7570369420,%r11
  0x00007f75704c4794: cmp    %r11,%rax
  0x00007f75704c4797: jbe    0x00007f75704c47b0
  0x00007f75704c479d: movabs $0x7f757036de58,%r11
  0x00007f75704c47a7: cmp    %r11,%rax
  0x00007f75704c47aa: jb     0x00007f75704c484d
  0x00007f75704c47b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c47ba: cmp    %r11,%rax
  0x00007f75704c47bd: jbe    0x00007f75704c47d6
  0x00007f75704c47c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c47cd: cmp    %r11,%rax
  0x00007f75704c47d0: jb     0x00007f75704c484d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c47d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c47db: sub    $0x80,%rsp
  0x00007f75704c47e2: mov    %rax,0x78(%rsp)
  0x00007f75704c47e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c47ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c47f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c47f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c47fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c4800: mov    %rdi,0x40(%rsp)
  0x00007f75704c4805: mov    %r8,0x38(%rsp)
  0x00007f75704c480a: mov    %r9,0x30(%rsp)
  0x00007f75704c480f: mov    %r10,0x28(%rsp)
  0x00007f75704c4814: mov    %r11,0x20(%rsp)
  0x00007f75704c4819: mov    %r12,0x18(%rsp)
  0x00007f75704c481e: mov    %r13,0x10(%rsp)
  0x00007f75704c4823: mov    %r14,0x8(%rsp)
  0x00007f75704c4828: mov    %r15,(%rsp)
  0x00007f75704c482c: movabs $0x7f758592f470,%rdi
  0x00007f75704c4836: movabs $0x7f75704c47d6,%rsi
  0x00007f75704c4840: mov    %rsp,%rdx
  0x00007f75704c4843: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4847: callq  0x00007f75853729fa
  0x00007f75704c484c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c484d: mov    %rsp,%r11
  0x00007f75704c4850: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4854: push   %rax
  0x00007f75704c4855: mov    %r11,%rax
  0x00007f75704c4858: mov    0x50(%rbx),%r11
  0x00007f75704c485c: mov    0x20(%rax),%rsi
  0x00007f75704c4860: mov    0x18(%rax),%edx
  0x00007f75704c4863: mov    0x8(%rax),%rcx
  0x00007f75704c4867: mov    %rbx,0x258(%r15)
  0x00007f75704c486e: mov    %rbx,%rax
  0x00007f75704c4871: jmpq   *%r11
  0x00007f75704c4874: mov    0x8(%rsi),%ebx
  0x00007f75704c4877: shl    $0x3,%rbx
  0x00007f75704c487b: cmp    0x10(%rax),%rbx
  0x00007f75704c487f: mov    0x8(%rax),%rbx
  0x00007f75704c4883: je     0x00007f75704c488e
  0x00007f75704c4889: jmpq   0x00007f757046ec40
  0x00007f75704c488e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4896: je     0x00007f75704c4991
  0x00007f75704c489c: jmpq   0x00007f757046ec40
  0x00007f75704c48a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c48a9: je     0x00007f75704c4991
  0x00007f75704c48af: mov    %rsp,%r13
  0x00007f75704c48b2: mov    (%rsp),%rax
  0x00007f75704c48b6: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c48ba: pushfq 
  0x00007f75704c48bb: sub    $0x8,%rsp
  0x00007f75704c48bf: mov    %rsp,-0x28(%rsp)
  0x00007f75704c48c4: sub    $0x80,%rsp
  0x00007f75704c48cb: mov    %rax,0x78(%rsp)
  0x00007f75704c48d0: mov    %rcx,0x70(%rsp)
  0x00007f75704c48d5: mov    %rdx,0x68(%rsp)
  0x00007f75704c48da: mov    %rbx,0x60(%rsp)
  0x00007f75704c48df: mov    %rbp,0x50(%rsp)
  0x00007f75704c48e4: mov    %rsi,0x48(%rsp)
  0x00007f75704c48e9: mov    %rdi,0x40(%rsp)
  0x00007f75704c48ee: mov    %r8,0x38(%rsp)
  0x00007f75704c48f3: mov    %r9,0x30(%rsp)
  0x00007f75704c48f8: mov    %r10,0x28(%rsp)
  0x00007f75704c48fd: mov    %r11,0x20(%rsp)
  0x00007f75704c4902: mov    %r12,0x18(%rsp)
  0x00007f75704c4907: mov    %r13,0x10(%rsp)
  0x00007f75704c490c: mov    %r14,0x8(%rsp)
  0x00007f75704c4911: mov    %r15,(%rsp)
  0x00007f75704c4915: sub    $0x200,%rsp
  0x00007f75704c491c: fxsave64 (%rsp)
  0x00007f75704c4921: mov    %rbx,%rdi
  0x00007f75704c4924: mov    %rax,%rsi
  0x00007f75704c4927: callq  0x00007f7585522bca
  0x00007f75704c492c: fxrstor64 (%rsp)
  0x00007f75704c4931: add    $0x200,%rsp
  0x00007f75704c4938: mov    (%rsp),%r15
  0x00007f75704c493c: mov    0x8(%rsp),%r14
  0x00007f75704c4941: mov    0x10(%rsp),%r13
  0x00007f75704c4946: mov    0x18(%rsp),%r12
  0x00007f75704c494b: mov    0x20(%rsp),%r11
  0x00007f75704c4950: mov    0x28(%rsp),%r10
  0x00007f75704c4955: mov    0x30(%rsp),%r9
  0x00007f75704c495a: mov    0x38(%rsp),%r8
  0x00007f75704c495f: mov    0x40(%rsp),%rdi
  0x00007f75704c4964: mov    0x48(%rsp),%rsi
  0x00007f75704c4969: mov    0x50(%rsp),%rbp
  0x00007f75704c496e: mov    0x60(%rsp),%rbx
  0x00007f75704c4973: mov    0x68(%rsp),%rdx
  0x00007f75704c4978: mov    0x70(%rsp),%rcx
  0x00007f75704c497d: mov    0x78(%rsp),%rax
  0x00007f75704c4982: add    $0x80,%rsp
  0x00007f75704c4989: add    $0x8,%rsp
  0x00007f75704c498d: popfq  
  0x00007f75704c498e: mov    %r13,%rsp
  0x00007f75704c4991: pop    %rax
  0x00007f75704c4992: mov    %rsp,%r13
  0x00007f75704c4995: sub    $0x30,%rsp
  0x00007f75704c4999: mov    %rax,(%rsp)
  0x00007f75704c499d: mov    %rsi,0x20(%rsp)
  0x00007f75704c49a2: mov    %edx,0x18(%rsp)
  0x00007f75704c49a6: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c49b0: mov    %rax,0x10(%rsp)
  0x00007f75704c49b5: mov    %rcx,0x8(%rsp)
  0x00007f75704c49ba: mov    0x40(%rbx),%rcx
  0x00007f75704c49be: jmpq   *%rcx

AHE@0x00007f758012c228: 0xa6000000 i2c: 0x00007f75704c4a60 c2i: 0x00007f75704c4b9e c2iUV: 0x00007f75704c4b71
i2c argument handler #65 for: static (IF)I (586 bytes generated)
c2i argument handler starts at 0x7f75704c4b9e
  0x00007f75704c4a60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c4a64: movabs $0x7f757036e3e0,%r11
  0x00007f75704c4a6e: cmp    %r11,%rax
  0x00007f75704c4a71: jbe    0x00007f75704c4a8a
  0x00007f75704c4a77: movabs $0x7f757046e3e0,%r11
  0x00007f75704c4a81: cmp    %r11,%rax
  0x00007f75704c4a84: jb     0x00007f75704c4b4d
  0x00007f75704c4a8a: movabs $0x7f7570369420,%r11
  0x00007f75704c4a94: cmp    %r11,%rax
  0x00007f75704c4a97: jbe    0x00007f75704c4ab0
  0x00007f75704c4a9d: movabs $0x7f757036de58,%r11
  0x00007f75704c4aa7: cmp    %r11,%rax
  0x00007f75704c4aaa: jb     0x00007f75704c4b4d
  0x00007f75704c4ab0: movabs $0x7f75704a9820,%r11
  0x00007f75704c4aba: cmp    %r11,%rax
  0x00007f75704c4abd: jbe    0x00007f75704c4ad6
  0x00007f75704c4ac3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c4acd: cmp    %r11,%rax
  0x00007f75704c4ad0: jb     0x00007f75704c4b4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c4ad6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c4adb: sub    $0x80,%rsp
  0x00007f75704c4ae2: mov    %rax,0x78(%rsp)
  0x00007f75704c4ae7: mov    %rcx,0x70(%rsp)
  0x00007f75704c4aec: mov    %rdx,0x68(%rsp)
  0x00007f75704c4af1: mov    %rbx,0x60(%rsp)
  0x00007f75704c4af6: mov    %rbp,0x50(%rsp)
  0x00007f75704c4afb: mov    %rsi,0x48(%rsp)
  0x00007f75704c4b00: mov    %rdi,0x40(%rsp)
  0x00007f75704c4b05: mov    %r8,0x38(%rsp)
  0x00007f75704c4b0a: mov    %r9,0x30(%rsp)
  0x00007f75704c4b0f: mov    %r10,0x28(%rsp)
  0x00007f75704c4b14: mov    %r11,0x20(%rsp)
  0x00007f75704c4b19: mov    %r12,0x18(%rsp)
  0x00007f75704c4b1e: mov    %r13,0x10(%rsp)
  0x00007f75704c4b23: mov    %r14,0x8(%rsp)
  0x00007f75704c4b28: mov    %r15,(%rsp)
  0x00007f75704c4b2c: movabs $0x7f758592f470,%rdi
  0x00007f75704c4b36: movabs $0x7f75704c4ad6,%rsi
  0x00007f75704c4b40: mov    %rsp,%rdx
  0x00007f75704c4b43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4b47: callq  0x00007f75853729fa
  0x00007f75704c4b4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c4b4d: mov    %rsp,%r11
  0x00007f75704c4b50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4b54: push   %rax
  0x00007f75704c4b55: mov    %r11,%rax
  0x00007f75704c4b58: mov    0x50(%rbx),%r11
  0x00007f75704c4b5c: mov    0x10(%rax),%esi
  0x00007f75704c4b5f: vmovss 0x8(%rax),%xmm0
  0x00007f75704c4b64: mov    %rbx,0x258(%r15)
  0x00007f75704c4b6b: mov    %rbx,%rax
  0x00007f75704c4b6e: jmpq   *%r11
  0x00007f75704c4b71: mov    0x8(%rsi),%ebx
  0x00007f75704c4b74: shl    $0x3,%rbx
  0x00007f75704c4b78: cmp    0x10(%rax),%rbx
  0x00007f75704c4b7c: mov    0x8(%rax),%rbx
  0x00007f75704c4b80: je     0x00007f75704c4b8b
  0x00007f75704c4b86: jmpq   0x00007f757046ec40
  0x00007f75704c4b8b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4b93: je     0x00007f75704c4c8e
  0x00007f75704c4b99: jmpq   0x00007f757046ec40
  0x00007f75704c4b9e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4ba6: je     0x00007f75704c4c8e
  0x00007f75704c4bac: mov    %rsp,%r13
  0x00007f75704c4baf: mov    (%rsp),%rax
  0x00007f75704c4bb3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4bb7: pushfq 
  0x00007f75704c4bb8: sub    $0x8,%rsp
  0x00007f75704c4bbc: mov    %rsp,-0x28(%rsp)
  0x00007f75704c4bc1: sub    $0x80,%rsp
  0x00007f75704c4bc8: mov    %rax,0x78(%rsp)
  0x00007f75704c4bcd: mov    %rcx,0x70(%rsp)
  0x00007f75704c4bd2: mov    %rdx,0x68(%rsp)
  0x00007f75704c4bd7: mov    %rbx,0x60(%rsp)
  0x00007f75704c4bdc: mov    %rbp,0x50(%rsp)
  0x00007f75704c4be1: mov    %rsi,0x48(%rsp)
  0x00007f75704c4be6: mov    %rdi,0x40(%rsp)
  0x00007f75704c4beb: mov    %r8,0x38(%rsp)
  0x00007f75704c4bf0: mov    %r9,0x30(%rsp)
  0x00007f75704c4bf5: mov    %r10,0x28(%rsp)
  0x00007f75704c4bfa: mov    %r11,0x20(%rsp)
  0x00007f75704c4bff: mov    %r12,0x18(%rsp)
  0x00007f75704c4c04: mov    %r13,0x10(%rsp)
  0x00007f75704c4c09: mov    %r14,0x8(%rsp)
  0x00007f75704c4c0e: mov    %r15,(%rsp)
  0x00007f75704c4c12: sub    $0x200,%rsp
  0x00007f75704c4c19: fxsave64 (%rsp)
  0x00007f75704c4c1e: mov    %rbx,%rdi
  0x00007f75704c4c21: mov    %rax,%rsi
  0x00007f75704c4c24: callq  0x00007f7585522bca
  0x00007f75704c4c29: fxrstor64 (%rsp)
  0x00007f75704c4c2e: add    $0x200,%rsp
  0x00007f75704c4c35: mov    (%rsp),%r15
  0x00007f75704c4c39: mov    0x8(%rsp),%r14
  0x00007f75704c4c3e: mov    0x10(%rsp),%r13
  0x00007f75704c4c43: mov    0x18(%rsp),%r12
  0x00007f75704c4c48: mov    0x20(%rsp),%r11
  0x00007f75704c4c4d: mov    0x28(%rsp),%r10
  0x00007f75704c4c52: mov    0x30(%rsp),%r9
  0x00007f75704c4c57: mov    0x38(%rsp),%r8
  0x00007f75704c4c5c: mov    0x40(%rsp),%rdi
  0x00007f75704c4c61: mov    0x48(%rsp),%rsi
  0x00007f75704c4c66: mov    0x50(%rsp),%rbp
  0x00007f75704c4c6b: mov    0x60(%rsp),%rbx
  0x00007f75704c4c70: mov    0x68(%rsp),%rdx
  0x00007f75704c4c75: mov    0x70(%rsp),%rcx
  0x00007f75704c4c7a: mov    0x78(%rsp),%rax
  0x00007f75704c4c7f: add    $0x80,%rsp
  0x00007f75704c4c86: add    $0x8,%rsp
  0x00007f75704c4c8a: popfq  
  0x00007f75704c4c8b: mov    %r13,%rsp
  0x00007f75704c4c8e: pop    %rax
  0x00007f75704c4c8f: mov    %rsp,%r13
  0x00007f75704c4c92: sub    $0x20,%rsp
  0x00007f75704c4c96: mov    %rax,(%rsp)
  0x00007f75704c4c9a: mov    %esi,0x10(%rsp)
  0x00007f75704c4c9e: vmovss %xmm0,0x8(%rsp)
  0x00007f75704c4ca4: mov    0x40(%rbx),%rcx
  0x00007f75704c4ca8: jmpq   *%rcx

AHE@0x00007f758012c270: 0xbbab0000 i2c: 0x00007f75704c4d60 c2i: 0x00007f75704c4ea5 c2iUV: 0x00007f75704c4e78
i2c argument handler #66 for: receiver (Ljava/lang/ThreadLocal;ILjava/lang/ThreadLocal$ThreadLocalMap$Entry;)Ljava/lang/ThreadLocal$ThreadLocalMap$Entry; (602 bytes generated)
c2i argument handler starts at 0x7f75704c4ea5
  0x00007f75704c4d60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c4d64: movabs $0x7f757036e3e0,%r11
  0x00007f75704c4d6e: cmp    %r11,%rax
  0x00007f75704c4d71: jbe    0x00007f75704c4d8a
  0x00007f75704c4d77: movabs $0x7f757046e3e0,%r11
  0x00007f75704c4d81: cmp    %r11,%rax
  0x00007f75704c4d84: jb     0x00007f75704c4e4d
  0x00007f75704c4d8a: movabs $0x7f7570369420,%r11
  0x00007f75704c4d94: cmp    %r11,%rax
  0x00007f75704c4d97: jbe    0x00007f75704c4db0
  0x00007f75704c4d9d: movabs $0x7f757036de58,%r11
  0x00007f75704c4da7: cmp    %r11,%rax
  0x00007f75704c4daa: jb     0x00007f75704c4e4d
  0x00007f75704c4db0: movabs $0x7f75704a9820,%r11
  0x00007f75704c4dba: cmp    %r11,%rax
  0x00007f75704c4dbd: jbe    0x00007f75704c4dd6
  0x00007f75704c4dc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c4dcd: cmp    %r11,%rax
  0x00007f75704c4dd0: jb     0x00007f75704c4e4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c4dd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c4ddb: sub    $0x80,%rsp
  0x00007f75704c4de2: mov    %rax,0x78(%rsp)
  0x00007f75704c4de7: mov    %rcx,0x70(%rsp)
  0x00007f75704c4dec: mov    %rdx,0x68(%rsp)
  0x00007f75704c4df1: mov    %rbx,0x60(%rsp)
  0x00007f75704c4df6: mov    %rbp,0x50(%rsp)
  0x00007f75704c4dfb: mov    %rsi,0x48(%rsp)
  0x00007f75704c4e00: mov    %rdi,0x40(%rsp)
  0x00007f75704c4e05: mov    %r8,0x38(%rsp)
  0x00007f75704c4e0a: mov    %r9,0x30(%rsp)
  0x00007f75704c4e0f: mov    %r10,0x28(%rsp)
  0x00007f75704c4e14: mov    %r11,0x20(%rsp)
  0x00007f75704c4e19: mov    %r12,0x18(%rsp)
  0x00007f75704c4e1e: mov    %r13,0x10(%rsp)
  0x00007f75704c4e23: mov    %r14,0x8(%rsp)
  0x00007f75704c4e28: mov    %r15,(%rsp)
  0x00007f75704c4e2c: movabs $0x7f758592f470,%rdi
  0x00007f75704c4e36: movabs $0x7f75704c4dd6,%rsi
  0x00007f75704c4e40: mov    %rsp,%rdx
  0x00007f75704c4e43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4e47: callq  0x00007f75853729fa
  0x00007f75704c4e4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c4e4d: mov    %rsp,%r11
  0x00007f75704c4e50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4e54: push   %rax
  0x00007f75704c4e55: mov    %r11,%rax
  0x00007f75704c4e58: mov    0x50(%rbx),%r11
  0x00007f75704c4e5c: mov    0x20(%rax),%rsi
  0x00007f75704c4e60: mov    0x18(%rax),%rdx
  0x00007f75704c4e64: mov    0x10(%rax),%ecx
  0x00007f75704c4e67: mov    0x8(%rax),%r8
  0x00007f75704c4e6b: mov    %rbx,0x258(%r15)
  0x00007f75704c4e72: mov    %rbx,%rax
  0x00007f75704c4e75: jmpq   *%r11
  0x00007f75704c4e78: mov    0x8(%rsi),%ebx
  0x00007f75704c4e7b: shl    $0x3,%rbx
  0x00007f75704c4e7f: cmp    0x10(%rax),%rbx
  0x00007f75704c4e83: mov    0x8(%rax),%rbx
  0x00007f75704c4e87: je     0x00007f75704c4e92
  0x00007f75704c4e8d: jmpq   0x00007f757046ec40
  0x00007f75704c4e92: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4e9a: je     0x00007f75704c4f95
  0x00007f75704c4ea0: jmpq   0x00007f757046ec40
  0x00007f75704c4ea5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c4ead: je     0x00007f75704c4f95
  0x00007f75704c4eb3: mov    %rsp,%r13
  0x00007f75704c4eb6: mov    (%rsp),%rax
  0x00007f75704c4eba: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c4ebe: pushfq 
  0x00007f75704c4ebf: sub    $0x8,%rsp
  0x00007f75704c4ec3: mov    %rsp,-0x28(%rsp)
  0x00007f75704c4ec8: sub    $0x80,%rsp
  0x00007f75704c4ecf: mov    %rax,0x78(%rsp)
  0x00007f75704c4ed4: mov    %rcx,0x70(%rsp)
  0x00007f75704c4ed9: mov    %rdx,0x68(%rsp)
  0x00007f75704c4ede: mov    %rbx,0x60(%rsp)
  0x00007f75704c4ee3: mov    %rbp,0x50(%rsp)
  0x00007f75704c4ee8: mov    %rsi,0x48(%rsp)
  0x00007f75704c4eed: mov    %rdi,0x40(%rsp)
  0x00007f75704c4ef2: mov    %r8,0x38(%rsp)
  0x00007f75704c4ef7: mov    %r9,0x30(%rsp)
  0x00007f75704c4efc: mov    %r10,0x28(%rsp)
  0x00007f75704c4f01: mov    %r11,0x20(%rsp)
  0x00007f75704c4f06: mov    %r12,0x18(%rsp)
  0x00007f75704c4f0b: mov    %r13,0x10(%rsp)
  0x00007f75704c4f10: mov    %r14,0x8(%rsp)
  0x00007f75704c4f15: mov    %r15,(%rsp)
  0x00007f75704c4f19: sub    $0x200,%rsp
  0x00007f75704c4f20: fxsave64 (%rsp)
  0x00007f75704c4f25: mov    %rbx,%rdi
  0x00007f75704c4f28: mov    %rax,%rsi
  0x00007f75704c4f2b: callq  0x00007f7585522bca
  0x00007f75704c4f30: fxrstor64 (%rsp)
  0x00007f75704c4f35: add    $0x200,%rsp
  0x00007f75704c4f3c: mov    (%rsp),%r15
  0x00007f75704c4f40: mov    0x8(%rsp),%r14
  0x00007f75704c4f45: mov    0x10(%rsp),%r13
  0x00007f75704c4f4a: mov    0x18(%rsp),%r12
  0x00007f75704c4f4f: mov    0x20(%rsp),%r11
  0x00007f75704c4f54: mov    0x28(%rsp),%r10
  0x00007f75704c4f59: mov    0x30(%rsp),%r9
  0x00007f75704c4f5e: mov    0x38(%rsp),%r8
  0x00007f75704c4f63: mov    0x40(%rsp),%rdi
  0x00007f75704c4f68: mov    0x48(%rsp),%rsi
  0x00007f75704c4f6d: mov    0x50(%rsp),%rbp
  0x00007f75704c4f72: mov    0x60(%rsp),%rbx
  0x00007f75704c4f77: mov    0x68(%rsp),%rdx
  0x00007f75704c4f7c: mov    0x70(%rsp),%rcx
  0x00007f75704c4f81: mov    0x78(%rsp),%rax
  0x00007f75704c4f86: add    $0x80,%rsp
  0x00007f75704c4f8d: add    $0x8,%rsp
  0x00007f75704c4f91: popfq  
  0x00007f75704c4f92: mov    %r13,%rsp
  0x00007f75704c4f95: pop    %rax
  0x00007f75704c4f96: mov    %rsp,%r13
  0x00007f75704c4f99: sub    $0x30,%rsp
  0x00007f75704c4f9d: mov    %rax,(%rsp)
  0x00007f75704c4fa1: mov    %rsi,0x20(%rsp)
  0x00007f75704c4fa6: mov    %rdx,0x18(%rsp)
  0x00007f75704c4fab: mov    %ecx,0x10(%rsp)
  0x00007f75704c4faf: mov    %r8,0x8(%rsp)
  0x00007f75704c4fb4: mov    0x40(%rbx),%rcx
  0x00007f75704c4fb8: jmpq   *%rcx

AHE@0x00007f758012c2b8: 0xbb660000 i2c: 0x00007f75704c5060 c2i: 0x00007f75704c51a8 c2iUV: 0x00007f75704c517b
i2c argument handler #67 for: receiver (Ljava/nio/charset/Charset;FF)V (608 bytes generated)
c2i argument handler starts at 0x7f75704c51a8
  0x00007f75704c5060: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c5064: movabs $0x7f757036e3e0,%r11
  0x00007f75704c506e: cmp    %r11,%rax
  0x00007f75704c5071: jbe    0x00007f75704c508a
  0x00007f75704c5077: movabs $0x7f757046e3e0,%r11
  0x00007f75704c5081: cmp    %r11,%rax
  0x00007f75704c5084: jb     0x00007f75704c514d
  0x00007f75704c508a: movabs $0x7f7570369420,%r11
  0x00007f75704c5094: cmp    %r11,%rax
  0x00007f75704c5097: jbe    0x00007f75704c50b0
  0x00007f75704c509d: movabs $0x7f757036de58,%r11
  0x00007f75704c50a7: cmp    %r11,%rax
  0x00007f75704c50aa: jb     0x00007f75704c514d
  0x00007f75704c50b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c50ba: cmp    %r11,%rax
  0x00007f75704c50bd: jbe    0x00007f75704c50d6
  0x00007f75704c50c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c50cd: cmp    %r11,%rax
  0x00007f75704c50d0: jb     0x00007f75704c514d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c50d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c50db: sub    $0x80,%rsp
  0x00007f75704c50e2: mov    %rax,0x78(%rsp)
  0x00007f75704c50e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c50ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c50f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c50f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c50fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c5100: mov    %rdi,0x40(%rsp)
  0x00007f75704c5105: mov    %r8,0x38(%rsp)
  0x00007f75704c510a: mov    %r9,0x30(%rsp)
  0x00007f75704c510f: mov    %r10,0x28(%rsp)
  0x00007f75704c5114: mov    %r11,0x20(%rsp)
  0x00007f75704c5119: mov    %r12,0x18(%rsp)
  0x00007f75704c511e: mov    %r13,0x10(%rsp)
  0x00007f75704c5123: mov    %r14,0x8(%rsp)
  0x00007f75704c5128: mov    %r15,(%rsp)
  0x00007f75704c512c: movabs $0x7f758592f470,%rdi
  0x00007f75704c5136: movabs $0x7f75704c50d6,%rsi
  0x00007f75704c5140: mov    %rsp,%rdx
  0x00007f75704c5143: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5147: callq  0x00007f75853729fa
  0x00007f75704c514c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c514d: mov    %rsp,%r11
  0x00007f75704c5150: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5154: push   %rax
  0x00007f75704c5155: mov    %r11,%rax
  0x00007f75704c5158: mov    0x50(%rbx),%r11
  0x00007f75704c515c: mov    0x20(%rax),%rsi
  0x00007f75704c5160: mov    0x18(%rax),%rdx
  0x00007f75704c5164: vmovss 0x10(%rax),%xmm0
  0x00007f75704c5169: vmovss 0x8(%rax),%xmm1
  0x00007f75704c516e: mov    %rbx,0x258(%r15)
  0x00007f75704c5175: mov    %rbx,%rax
  0x00007f75704c5178: jmpq   *%r11
  0x00007f75704c517b: mov    0x8(%rsi),%ebx
  0x00007f75704c517e: shl    $0x3,%rbx
  0x00007f75704c5182: cmp    0x10(%rax),%rbx
  0x00007f75704c5186: mov    0x8(%rax),%rbx
  0x00007f75704c518a: je     0x00007f75704c5195
  0x00007f75704c5190: jmpq   0x00007f757046ec40
  0x00007f75704c5195: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c519d: je     0x00007f75704c5298
  0x00007f75704c51a3: jmpq   0x00007f757046ec40
  0x00007f75704c51a8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c51b0: je     0x00007f75704c5298
  0x00007f75704c51b6: mov    %rsp,%r13
  0x00007f75704c51b9: mov    (%rsp),%rax
  0x00007f75704c51bd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c51c1: pushfq 
  0x00007f75704c51c2: sub    $0x8,%rsp
  0x00007f75704c51c6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c51cb: sub    $0x80,%rsp
  0x00007f75704c51d2: mov    %rax,0x78(%rsp)
  0x00007f75704c51d7: mov    %rcx,0x70(%rsp)
  0x00007f75704c51dc: mov    %rdx,0x68(%rsp)
  0x00007f75704c51e1: mov    %rbx,0x60(%rsp)
  0x00007f75704c51e6: mov    %rbp,0x50(%rsp)
  0x00007f75704c51eb: mov    %rsi,0x48(%rsp)
  0x00007f75704c51f0: mov    %rdi,0x40(%rsp)
  0x00007f75704c51f5: mov    %r8,0x38(%rsp)
  0x00007f75704c51fa: mov    %r9,0x30(%rsp)
  0x00007f75704c51ff: mov    %r10,0x28(%rsp)
  0x00007f75704c5204: mov    %r11,0x20(%rsp)
  0x00007f75704c5209: mov    %r12,0x18(%rsp)
  0x00007f75704c520e: mov    %r13,0x10(%rsp)
  0x00007f75704c5213: mov    %r14,0x8(%rsp)
  0x00007f75704c5218: mov    %r15,(%rsp)
  0x00007f75704c521c: sub    $0x200,%rsp
  0x00007f75704c5223: fxsave64 (%rsp)
  0x00007f75704c5228: mov    %rbx,%rdi
  0x00007f75704c522b: mov    %rax,%rsi
  0x00007f75704c522e: callq  0x00007f7585522bca
  0x00007f75704c5233: fxrstor64 (%rsp)
  0x00007f75704c5238: add    $0x200,%rsp
  0x00007f75704c523f: mov    (%rsp),%r15
  0x00007f75704c5243: mov    0x8(%rsp),%r14
  0x00007f75704c5248: mov    0x10(%rsp),%r13
  0x00007f75704c524d: mov    0x18(%rsp),%r12
  0x00007f75704c5252: mov    0x20(%rsp),%r11
  0x00007f75704c5257: mov    0x28(%rsp),%r10
  0x00007f75704c525c: mov    0x30(%rsp),%r9
  0x00007f75704c5261: mov    0x38(%rsp),%r8
  0x00007f75704c5266: mov    0x40(%rsp),%rdi
  0x00007f75704c526b: mov    0x48(%rsp),%rsi
  0x00007f75704c5270: mov    0x50(%rsp),%rbp
  0x00007f75704c5275: mov    0x60(%rsp),%rbx
  0x00007f75704c527a: mov    0x68(%rsp),%rdx
  0x00007f75704c527f: mov    0x70(%rsp),%rcx
  0x00007f75704c5284: mov    0x78(%rsp),%rax
  0x00007f75704c5289: add    $0x80,%rsp
  0x00007f75704c5290: add    $0x8,%rsp
  0x00007f75704c5294: popfq  
  0x00007f75704c5295: mov    %r13,%rsp
  0x00007f75704c5298: pop    %rax
  0x00007f75704c5299: mov    %rsp,%r13
  0x00007f75704c529c: sub    $0x30,%rsp
  0x00007f75704c52a0: mov    %rax,(%rsp)
  0x00007f75704c52a4: mov    %rsi,0x20(%rsp)
  0x00007f75704c52a9: mov    %rdx,0x18(%rsp)
  0x00007f75704c52ae: vmovss %xmm0,0x10(%rsp)
  0x00007f75704c52b4: vmovss %xmm1,0x8(%rsp)
  0x00007f75704c52ba: mov    0x40(%rbx),%rcx
  0x00007f75704c52be: jmpq   *%rcx

AHE@0x00007f758012c300: 0xbb66b000 i2c: 0x00007f75704c5360 c2i: 0x00007f75704c54ac c2iUV: 0x00007f75704c547f
i2c argument handler #68 for: receiver (Ljava/nio/charset/Charset;FFLjava/lang/String;)V (617 bytes generated)
c2i argument handler starts at 0x7f75704c54ac
  0x00007f75704c5360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c5364: movabs $0x7f757036e3e0,%r11
  0x00007f75704c536e: cmp    %r11,%rax
  0x00007f75704c5371: jbe    0x00007f75704c538a
  0x00007f75704c5377: movabs $0x7f757046e3e0,%r11
  0x00007f75704c5381: cmp    %r11,%rax
  0x00007f75704c5384: jb     0x00007f75704c544d
  0x00007f75704c538a: movabs $0x7f7570369420,%r11
  0x00007f75704c5394: cmp    %r11,%rax
  0x00007f75704c5397: jbe    0x00007f75704c53b0
  0x00007f75704c539d: movabs $0x7f757036de58,%r11
  0x00007f75704c53a7: cmp    %r11,%rax
  0x00007f75704c53aa: jb     0x00007f75704c544d
  0x00007f75704c53b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c53ba: cmp    %r11,%rax
  0x00007f75704c53bd: jbe    0x00007f75704c53d6
  0x00007f75704c53c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c53cd: cmp    %r11,%rax
  0x00007f75704c53d0: jb     0x00007f75704c544d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c53d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c53db: sub    $0x80,%rsp
  0x00007f75704c53e2: mov    %rax,0x78(%rsp)
  0x00007f75704c53e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c53ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c53f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c53f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c53fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c5400: mov    %rdi,0x40(%rsp)
  0x00007f75704c5405: mov    %r8,0x38(%rsp)
  0x00007f75704c540a: mov    %r9,0x30(%rsp)
  0x00007f75704c540f: mov    %r10,0x28(%rsp)
  0x00007f75704c5414: mov    %r11,0x20(%rsp)
  0x00007f75704c5419: mov    %r12,0x18(%rsp)
  0x00007f75704c541e: mov    %r13,0x10(%rsp)
  0x00007f75704c5423: mov    %r14,0x8(%rsp)
  0x00007f75704c5428: mov    %r15,(%rsp)
  0x00007f75704c542c: movabs $0x7f758592f470,%rdi
  0x00007f75704c5436: movabs $0x7f75704c53d6,%rsi
  0x00007f75704c5440: mov    %rsp,%rdx
  0x00007f75704c5443: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5447: callq  0x00007f75853729fa
  0x00007f75704c544c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c544d: mov    %rsp,%r11
  0x00007f75704c5450: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5454: push   %rax
  0x00007f75704c5455: mov    %r11,%rax
  0x00007f75704c5458: mov    0x50(%rbx),%r11
  0x00007f75704c545c: mov    0x28(%rax),%rsi
  0x00007f75704c5460: mov    0x20(%rax),%rdx
  0x00007f75704c5464: vmovss 0x18(%rax),%xmm0
  0x00007f75704c5469: vmovss 0x10(%rax),%xmm1
  0x00007f75704c546e: mov    0x8(%rax),%rcx
  0x00007f75704c5472: mov    %rbx,0x258(%r15)
  0x00007f75704c5479: mov    %rbx,%rax
  0x00007f75704c547c: jmpq   *%r11
  0x00007f75704c547f: mov    0x8(%rsi),%ebx
  0x00007f75704c5482: shl    $0x3,%rbx
  0x00007f75704c5486: cmp    0x10(%rax),%rbx
  0x00007f75704c548a: mov    0x8(%rax),%rbx
  0x00007f75704c548e: je     0x00007f75704c5499
  0x00007f75704c5494: jmpq   0x00007f757046ec40
  0x00007f75704c5499: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c54a1: je     0x00007f75704c559c
  0x00007f75704c54a7: jmpq   0x00007f757046ec40
  0x00007f75704c54ac: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c54b4: je     0x00007f75704c559c
  0x00007f75704c54ba: mov    %rsp,%r13
  0x00007f75704c54bd: mov    (%rsp),%rax
  0x00007f75704c54c1: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c54c5: pushfq 
  0x00007f75704c54c6: sub    $0x8,%rsp
  0x00007f75704c54ca: mov    %rsp,-0x28(%rsp)
  0x00007f75704c54cf: sub    $0x80,%rsp
  0x00007f75704c54d6: mov    %rax,0x78(%rsp)
  0x00007f75704c54db: mov    %rcx,0x70(%rsp)
  0x00007f75704c54e0: mov    %rdx,0x68(%rsp)
  0x00007f75704c54e5: mov    %rbx,0x60(%rsp)
  0x00007f75704c54ea: mov    %rbp,0x50(%rsp)
  0x00007f75704c54ef: mov    %rsi,0x48(%rsp)
  0x00007f75704c54f4: mov    %rdi,0x40(%rsp)
  0x00007f75704c54f9: mov    %r8,0x38(%rsp)
  0x00007f75704c54fe: mov    %r9,0x30(%rsp)
  0x00007f75704c5503: mov    %r10,0x28(%rsp)
  0x00007f75704c5508: mov    %r11,0x20(%rsp)
  0x00007f75704c550d: mov    %r12,0x18(%rsp)
  0x00007f75704c5512: mov    %r13,0x10(%rsp)
  0x00007f75704c5517: mov    %r14,0x8(%rsp)
  0x00007f75704c551c: mov    %r15,(%rsp)
  0x00007f75704c5520: sub    $0x200,%rsp
  0x00007f75704c5527: fxsave64 (%rsp)
  0x00007f75704c552c: mov    %rbx,%rdi
  0x00007f75704c552f: mov    %rax,%rsi
  0x00007f75704c5532: callq  0x00007f7585522bca
  0x00007f75704c5537: fxrstor64 (%rsp)
  0x00007f75704c553c: add    $0x200,%rsp
  0x00007f75704c5543: mov    (%rsp),%r15
  0x00007f75704c5547: mov    0x8(%rsp),%r14
  0x00007f75704c554c: mov    0x10(%rsp),%r13
  0x00007f75704c5551: mov    0x18(%rsp),%r12
  0x00007f75704c5556: mov    0x20(%rsp),%r11
  0x00007f75704c555b: mov    0x28(%rsp),%r10
  0x00007f75704c5560: mov    0x30(%rsp),%r9
  0x00007f75704c5565: mov    0x38(%rsp),%r8
  0x00007f75704c556a: mov    0x40(%rsp),%rdi
  0x00007f75704c556f: mov    0x48(%rsp),%rsi
  0x00007f75704c5574: mov    0x50(%rsp),%rbp
  0x00007f75704c5579: mov    0x60(%rsp),%rbx
  0x00007f75704c557e: mov    0x68(%rsp),%rdx
  0x00007f75704c5583: mov    0x70(%rsp),%rcx
  0x00007f75704c5588: mov    0x78(%rsp),%rax
  0x00007f75704c558d: add    $0x80,%rsp
  0x00007f75704c5594: add    $0x8,%rsp
  0x00007f75704c5598: popfq  
  0x00007f75704c5599: mov    %r13,%rsp
  0x00007f75704c559c: pop    %rax
  0x00007f75704c559d: mov    %rsp,%r13
  0x00007f75704c55a0: sub    $0x30,%rsp
  0x00007f75704c55a4: mov    %rax,(%rsp)
  0x00007f75704c55a8: mov    %rsi,0x28(%rsp)
  0x00007f75704c55ad: mov    %rdx,0x20(%rsp)
  0x00007f75704c55b2: vmovss %xmm0,0x18(%rsp)
  0x00007f75704c55b8: vmovss %xmm1,0x10(%rsp)
  0x00007f75704c55be: mov    %rcx,0x8(%rsp)
  0x00007f75704c55c3: mov    0x40(%rbx),%rcx
  0x00007f75704c55c7: jmpq   *%rcx

AHE@0x00007f758012c348: 0xbaaaaba0 i2c: 0x00007f75704c56a0 c2i: 0x00007f75704c57f9 c2iUV: 0x00007f75704c57cc
i2c argument handler #69 for: receiver (IIII[BI)V (640 bytes generated)
c2i argument handler starts at 0x7f75704c57f9
  0x00007f75704c56a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c56a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c56ae: cmp    %r11,%rax
  0x00007f75704c56b1: jbe    0x00007f75704c56ca
  0x00007f75704c56b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c56c1: cmp    %r11,%rax
  0x00007f75704c56c4: jb     0x00007f75704c578d
  0x00007f75704c56ca: movabs $0x7f7570369420,%r11
  0x00007f75704c56d4: cmp    %r11,%rax
  0x00007f75704c56d7: jbe    0x00007f75704c56f0
  0x00007f75704c56dd: movabs $0x7f757036de58,%r11
  0x00007f75704c56e7: cmp    %r11,%rax
  0x00007f75704c56ea: jb     0x00007f75704c578d
  0x00007f75704c56f0: movabs $0x7f75704a9820,%r11
  0x00007f75704c56fa: cmp    %r11,%rax
  0x00007f75704c56fd: jbe    0x00007f75704c5716
  0x00007f75704c5703: movabs $0x7f75704af5e0,%r11
  0x00007f75704c570d: cmp    %r11,%rax
  0x00007f75704c5710: jb     0x00007f75704c578d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c5716: mov    %rsp,-0x28(%rsp)
  0x00007f75704c571b: sub    $0x80,%rsp
  0x00007f75704c5722: mov    %rax,0x78(%rsp)
  0x00007f75704c5727: mov    %rcx,0x70(%rsp)
  0x00007f75704c572c: mov    %rdx,0x68(%rsp)
  0x00007f75704c5731: mov    %rbx,0x60(%rsp)
  0x00007f75704c5736: mov    %rbp,0x50(%rsp)
  0x00007f75704c573b: mov    %rsi,0x48(%rsp)
  0x00007f75704c5740: mov    %rdi,0x40(%rsp)
  0x00007f75704c5745: mov    %r8,0x38(%rsp)
  0x00007f75704c574a: mov    %r9,0x30(%rsp)
  0x00007f75704c574f: mov    %r10,0x28(%rsp)
  0x00007f75704c5754: mov    %r11,0x20(%rsp)
  0x00007f75704c5759: mov    %r12,0x18(%rsp)
  0x00007f75704c575e: mov    %r13,0x10(%rsp)
  0x00007f75704c5763: mov    %r14,0x8(%rsp)
  0x00007f75704c5768: mov    %r15,(%rsp)
  0x00007f75704c576c: movabs $0x7f758592f470,%rdi
  0x00007f75704c5776: movabs $0x7f75704c5716,%rsi
  0x00007f75704c5780: mov    %rsp,%rdx
  0x00007f75704c5783: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5787: callq  0x00007f75853729fa
  0x00007f75704c578c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c578d: mov    %rsp,%r11
  0x00007f75704c5790: sub    $0x10,%rsp
  0x00007f75704c5794: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5798: push   %rax
  0x00007f75704c5799: mov    %r11,%rax
  0x00007f75704c579c: mov    0x50(%rbx),%r11
  0x00007f75704c57a0: mov    0x38(%rax),%rsi
  0x00007f75704c57a4: mov    0x30(%rax),%edx
  0x00007f75704c57a7: mov    0x28(%rax),%ecx
  0x00007f75704c57aa: mov    0x20(%rax),%r8d
  0x00007f75704c57ae: mov    0x18(%rax),%r9d
  0x00007f75704c57b2: mov    0x10(%rax),%rdi
  0x00007f75704c57b6: mov    0x8(%rax),%r13d
  0x00007f75704c57ba: mov    %r13,0x8(%rsp)
  0x00007f75704c57bf: mov    %rbx,0x258(%r15)
  0x00007f75704c57c6: mov    %rbx,%rax
  0x00007f75704c57c9: jmpq   *%r11
  0x00007f75704c57cc: mov    0x8(%rsi),%ebx
  0x00007f75704c57cf: shl    $0x3,%rbx
  0x00007f75704c57d3: cmp    0x10(%rax),%rbx
  0x00007f75704c57d7: mov    0x8(%rax),%rbx
  0x00007f75704c57db: je     0x00007f75704c57e6
  0x00007f75704c57e1: jmpq   0x00007f757046ec40
  0x00007f75704c57e6: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c57ee: je     0x00007f75704c58e9
  0x00007f75704c57f4: jmpq   0x00007f757046ec40
  0x00007f75704c57f9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c5801: je     0x00007f75704c58e9
  0x00007f75704c5807: mov    %rsp,%r13
  0x00007f75704c580a: mov    (%rsp),%rax
  0x00007f75704c580e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5812: pushfq 
  0x00007f75704c5813: sub    $0x8,%rsp
  0x00007f75704c5817: mov    %rsp,-0x28(%rsp)
  0x00007f75704c581c: sub    $0x80,%rsp
  0x00007f75704c5823: mov    %rax,0x78(%rsp)
  0x00007f75704c5828: mov    %rcx,0x70(%rsp)
  0x00007f75704c582d: mov    %rdx,0x68(%rsp)
  0x00007f75704c5832: mov    %rbx,0x60(%rsp)
  0x00007f75704c5837: mov    %rbp,0x50(%rsp)
  0x00007f75704c583c: mov    %rsi,0x48(%rsp)
  0x00007f75704c5841: mov    %rdi,0x40(%rsp)
  0x00007f75704c5846: mov    %r8,0x38(%rsp)
  0x00007f75704c584b: mov    %r9,0x30(%rsp)
  0x00007f75704c5850: mov    %r10,0x28(%rsp)
  0x00007f75704c5855: mov    %r11,0x20(%rsp)
  0x00007f75704c585a: mov    %r12,0x18(%rsp)
  0x00007f75704c585f: mov    %r13,0x10(%rsp)
  0x00007f75704c5864: mov    %r14,0x8(%rsp)
  0x00007f75704c5869: mov    %r15,(%rsp)
  0x00007f75704c586d: sub    $0x200,%rsp
  0x00007f75704c5874: fxsave64 (%rsp)
  0x00007f75704c5879: mov    %rbx,%rdi
  0x00007f75704c587c: mov    %rax,%rsi
  0x00007f75704c587f: callq  0x00007f7585522bca
  0x00007f75704c5884: fxrstor64 (%rsp)
  0x00007f75704c5889: add    $0x200,%rsp
  0x00007f75704c5890: mov    (%rsp),%r15
  0x00007f75704c5894: mov    0x8(%rsp),%r14
  0x00007f75704c5899: mov    0x10(%rsp),%r13
  0x00007f75704c589e: mov    0x18(%rsp),%r12
  0x00007f75704c58a3: mov    0x20(%rsp),%r11
  0x00007f75704c58a8: mov    0x28(%rsp),%r10
  0x00007f75704c58ad: mov    0x30(%rsp),%r9
  0x00007f75704c58b2: mov    0x38(%rsp),%r8
  0x00007f75704c58b7: mov    0x40(%rsp),%rdi
  0x00007f75704c58bc: mov    0x48(%rsp),%rsi
  0x00007f75704c58c1: mov    0x50(%rsp),%rbp
  0x00007f75704c58c6: mov    0x60(%rsp),%rbx
  0x00007f75704c58cb: mov    0x68(%rsp),%rdx
  0x00007f75704c58d0: mov    0x70(%rsp),%rcx
  0x00007f75704c58d5: mov    0x78(%rsp),%rax
  0x00007f75704c58da: add    $0x80,%rsp
  0x00007f75704c58e1: add    $0x8,%rsp
  0x00007f75704c58e5: popfq  
  0x00007f75704c58e6: mov    %r13,%rsp
  0x00007f75704c58e9: pop    %rax
  0x00007f75704c58ea: mov    %rsp,%r13
  0x00007f75704c58ed: sub    $0x40,%rsp
  0x00007f75704c58f1: mov    %rax,(%rsp)
  0x00007f75704c58f5: mov    %rsi,0x38(%rsp)
  0x00007f75704c58fa: mov    %edx,0x30(%rsp)
  0x00007f75704c58fe: mov    %ecx,0x28(%rsp)
  0x00007f75704c5902: mov    %r8d,0x20(%rsp)
  0x00007f75704c5907: mov    %r9d,0x18(%rsp)
  0x00007f75704c590c: mov    %rdi,0x10(%rsp)
  0x00007f75704c5911: mov    0x40(%rsp),%eax
  0x00007f75704c5915: mov    %rax,0x8(%rsp)
  0x00007f75704c591a: mov    0x40(%rbx),%rcx
  0x00007f75704c591e: jmpq   *%rcx

AHE@0x00007f758012c390: 0xbbaaaaa0 i2c: 0x00007f75704c59e0 c2i: 0x00007f75704c5b39 c2iUV: 0x00007f75704c5b0c
i2c argument handler #70 for: receiver ([BIIIII)V (640 bytes generated)
c2i argument handler starts at 0x7f75704c5b39
  0x00007f75704c59e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c59e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c59ee: cmp    %r11,%rax
  0x00007f75704c59f1: jbe    0x00007f75704c5a0a
  0x00007f75704c59f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c5a01: cmp    %r11,%rax
  0x00007f75704c5a04: jb     0x00007f75704c5acd
  0x00007f75704c5a0a: movabs $0x7f7570369420,%r11
  0x00007f75704c5a14: cmp    %r11,%rax
  0x00007f75704c5a17: jbe    0x00007f75704c5a30
  0x00007f75704c5a1d: movabs $0x7f757036de58,%r11
  0x00007f75704c5a27: cmp    %r11,%rax
  0x00007f75704c5a2a: jb     0x00007f75704c5acd
  0x00007f75704c5a30: movabs $0x7f75704a9820,%r11
  0x00007f75704c5a3a: cmp    %r11,%rax
  0x00007f75704c5a3d: jbe    0x00007f75704c5a56
  0x00007f75704c5a43: movabs $0x7f75704af5e0,%r11
  0x00007f75704c5a4d: cmp    %r11,%rax
  0x00007f75704c5a50: jb     0x00007f75704c5acd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c5a56: mov    %rsp,-0x28(%rsp)
  0x00007f75704c5a5b: sub    $0x80,%rsp
  0x00007f75704c5a62: mov    %rax,0x78(%rsp)
  0x00007f75704c5a67: mov    %rcx,0x70(%rsp)
  0x00007f75704c5a6c: mov    %rdx,0x68(%rsp)
  0x00007f75704c5a71: mov    %rbx,0x60(%rsp)
  0x00007f75704c5a76: mov    %rbp,0x50(%rsp)
  0x00007f75704c5a7b: mov    %rsi,0x48(%rsp)
  0x00007f75704c5a80: mov    %rdi,0x40(%rsp)
  0x00007f75704c5a85: mov    %r8,0x38(%rsp)
  0x00007f75704c5a8a: mov    %r9,0x30(%rsp)
  0x00007f75704c5a8f: mov    %r10,0x28(%rsp)
  0x00007f75704c5a94: mov    %r11,0x20(%rsp)
  0x00007f75704c5a99: mov    %r12,0x18(%rsp)
  0x00007f75704c5a9e: mov    %r13,0x10(%rsp)
  0x00007f75704c5aa3: mov    %r14,0x8(%rsp)
  0x00007f75704c5aa8: mov    %r15,(%rsp)
  0x00007f75704c5aac: movabs $0x7f758592f470,%rdi
  0x00007f75704c5ab6: movabs $0x7f75704c5a56,%rsi
  0x00007f75704c5ac0: mov    %rsp,%rdx
  0x00007f75704c5ac3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5ac7: callq  0x00007f75853729fa
  0x00007f75704c5acc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c5acd: mov    %rsp,%r11
  0x00007f75704c5ad0: sub    $0x10,%rsp
  0x00007f75704c5ad4: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5ad8: push   %rax
  0x00007f75704c5ad9: mov    %r11,%rax
  0x00007f75704c5adc: mov    0x50(%rbx),%r11
  0x00007f75704c5ae0: mov    0x38(%rax),%rsi
  0x00007f75704c5ae4: mov    0x30(%rax),%rdx
  0x00007f75704c5ae8: mov    0x28(%rax),%ecx
  0x00007f75704c5aeb: mov    0x20(%rax),%r8d
  0x00007f75704c5aef: mov    0x18(%rax),%r9d
  0x00007f75704c5af3: mov    0x10(%rax),%edi
  0x00007f75704c5af6: mov    0x8(%rax),%r13d
  0x00007f75704c5afa: mov    %r13,0x8(%rsp)
  0x00007f75704c5aff: mov    %rbx,0x258(%r15)
  0x00007f75704c5b06: mov    %rbx,%rax
  0x00007f75704c5b09: jmpq   *%r11
  0x00007f75704c5b0c: mov    0x8(%rsi),%ebx
  0x00007f75704c5b0f: shl    $0x3,%rbx
  0x00007f75704c5b13: cmp    0x10(%rax),%rbx
  0x00007f75704c5b17: mov    0x8(%rax),%rbx
  0x00007f75704c5b1b: je     0x00007f75704c5b26
  0x00007f75704c5b21: jmpq   0x00007f757046ec40
  0x00007f75704c5b26: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c5b2e: je     0x00007f75704c5c29
  0x00007f75704c5b34: jmpq   0x00007f757046ec40
  0x00007f75704c5b39: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c5b41: je     0x00007f75704c5c29
  0x00007f75704c5b47: mov    %rsp,%r13
  0x00007f75704c5b4a: mov    (%rsp),%rax
  0x00007f75704c5b4e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5b52: pushfq 
  0x00007f75704c5b53: sub    $0x8,%rsp
  0x00007f75704c5b57: mov    %rsp,-0x28(%rsp)
  0x00007f75704c5b5c: sub    $0x80,%rsp
  0x00007f75704c5b63: mov    %rax,0x78(%rsp)
  0x00007f75704c5b68: mov    %rcx,0x70(%rsp)
  0x00007f75704c5b6d: mov    %rdx,0x68(%rsp)
  0x00007f75704c5b72: mov    %rbx,0x60(%rsp)
  0x00007f75704c5b77: mov    %rbp,0x50(%rsp)
  0x00007f75704c5b7c: mov    %rsi,0x48(%rsp)
  0x00007f75704c5b81: mov    %rdi,0x40(%rsp)
  0x00007f75704c5b86: mov    %r8,0x38(%rsp)
  0x00007f75704c5b8b: mov    %r9,0x30(%rsp)
  0x00007f75704c5b90: mov    %r10,0x28(%rsp)
  0x00007f75704c5b95: mov    %r11,0x20(%rsp)
  0x00007f75704c5b9a: mov    %r12,0x18(%rsp)
  0x00007f75704c5b9f: mov    %r13,0x10(%rsp)
  0x00007f75704c5ba4: mov    %r14,0x8(%rsp)
  0x00007f75704c5ba9: mov    %r15,(%rsp)
  0x00007f75704c5bad: sub    $0x200,%rsp
  0x00007f75704c5bb4: fxsave64 (%rsp)
  0x00007f75704c5bb9: mov    %rbx,%rdi
  0x00007f75704c5bbc: mov    %rax,%rsi
  0x00007f75704c5bbf: callq  0x00007f7585522bca
  0x00007f75704c5bc4: fxrstor64 (%rsp)
  0x00007f75704c5bc9: add    $0x200,%rsp
  0x00007f75704c5bd0: mov    (%rsp),%r15
  0x00007f75704c5bd4: mov    0x8(%rsp),%r14
  0x00007f75704c5bd9: mov    0x10(%rsp),%r13
  0x00007f75704c5bde: mov    0x18(%rsp),%r12
  0x00007f75704c5be3: mov    0x20(%rsp),%r11
  0x00007f75704c5be8: mov    0x28(%rsp),%r10
  0x00007f75704c5bed: mov    0x30(%rsp),%r9
  0x00007f75704c5bf2: mov    0x38(%rsp),%r8
  0x00007f75704c5bf7: mov    0x40(%rsp),%rdi
  0x00007f75704c5bfc: mov    0x48(%rsp),%rsi
  0x00007f75704c5c01: mov    0x50(%rsp),%rbp
  0x00007f75704c5c06: mov    0x60(%rsp),%rbx
  0x00007f75704c5c0b: mov    0x68(%rsp),%rdx
  0x00007f75704c5c10: mov    0x70(%rsp),%rcx
  0x00007f75704c5c15: mov    0x78(%rsp),%rax
  0x00007f75704c5c1a: add    $0x80,%rsp
  0x00007f75704c5c21: add    $0x8,%rsp
  0x00007f75704c5c25: popfq  
  0x00007f75704c5c26: mov    %r13,%rsp
  0x00007f75704c5c29: pop    %rax
  0x00007f75704c5c2a: mov    %rsp,%r13
  0x00007f75704c5c2d: sub    $0x40,%rsp
  0x00007f75704c5c31: mov    %rax,(%rsp)
  0x00007f75704c5c35: mov    %rsi,0x38(%rsp)
  0x00007f75704c5c3a: mov    %rdx,0x30(%rsp)
  0x00007f75704c5c3f: mov    %ecx,0x28(%rsp)
  0x00007f75704c5c43: mov    %r8d,0x20(%rsp)
  0x00007f75704c5c48: mov    %r9d,0x18(%rsp)
  0x00007f75704c5c4d: mov    %edi,0x10(%rsp)
  0x00007f75704c5c51: mov    0x40(%rsp),%eax
  0x00007f75704c5c55: mov    %rax,0x8(%rsp)
  0x00007f75704c5c5a: mov    0x40(%rbx),%rcx
  0x00007f75704c5c5e: jmpq   *%rcx

AHE@0x00007f758012c3d8: 0xbbebbebebe000000 i2c: 0x00007f75704c5d20 c2i: 0x00007f75704c5e6e c2iUV: 0x00007f75704c5e41
i2c argument handler #71 for: static (Ljava/lang/Object;JLjava/lang/Object;JJJ)V (682 bytes generated)
c2i argument handler starts at 0x7f75704c5e6e
  0x00007f75704c5d20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c5d24: movabs $0x7f757036e3e0,%r11
  0x00007f75704c5d2e: cmp    %r11,%rax
  0x00007f75704c5d31: jbe    0x00007f75704c5d4a
  0x00007f75704c5d37: movabs $0x7f757046e3e0,%r11
  0x00007f75704c5d41: cmp    %r11,%rax
  0x00007f75704c5d44: jb     0x00007f75704c5e0d
  0x00007f75704c5d4a: movabs $0x7f7570369420,%r11
  0x00007f75704c5d54: cmp    %r11,%rax
  0x00007f75704c5d57: jbe    0x00007f75704c5d70
  0x00007f75704c5d5d: movabs $0x7f757036de58,%r11
  0x00007f75704c5d67: cmp    %r11,%rax
  0x00007f75704c5d6a: jb     0x00007f75704c5e0d
  0x00007f75704c5d70: movabs $0x7f75704a9820,%r11
  0x00007f75704c5d7a: cmp    %r11,%rax
  0x00007f75704c5d7d: jbe    0x00007f75704c5d96
  0x00007f75704c5d83: movabs $0x7f75704af5e0,%r11
  0x00007f75704c5d8d: cmp    %r11,%rax
  0x00007f75704c5d90: jb     0x00007f75704c5e0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c5d96: mov    %rsp,-0x28(%rsp)
  0x00007f75704c5d9b: sub    $0x80,%rsp
  0x00007f75704c5da2: mov    %rax,0x78(%rsp)
  0x00007f75704c5da7: mov    %rcx,0x70(%rsp)
  0x00007f75704c5dac: mov    %rdx,0x68(%rsp)
  0x00007f75704c5db1: mov    %rbx,0x60(%rsp)
  0x00007f75704c5db6: mov    %rbp,0x50(%rsp)
  0x00007f75704c5dbb: mov    %rsi,0x48(%rsp)
  0x00007f75704c5dc0: mov    %rdi,0x40(%rsp)
  0x00007f75704c5dc5: mov    %r8,0x38(%rsp)
  0x00007f75704c5dca: mov    %r9,0x30(%rsp)
  0x00007f75704c5dcf: mov    %r10,0x28(%rsp)
  0x00007f75704c5dd4: mov    %r11,0x20(%rsp)
  0x00007f75704c5dd9: mov    %r12,0x18(%rsp)
  0x00007f75704c5dde: mov    %r13,0x10(%rsp)
  0x00007f75704c5de3: mov    %r14,0x8(%rsp)
  0x00007f75704c5de8: mov    %r15,(%rsp)
  0x00007f75704c5dec: movabs $0x7f758592f470,%rdi
  0x00007f75704c5df6: movabs $0x7f75704c5d96,%rsi
  0x00007f75704c5e00: mov    %rsp,%rdx
  0x00007f75704c5e03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5e07: callq  0x00007f75853729fa
  0x00007f75704c5e0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c5e0d: mov    %rsp,%r11
  0x00007f75704c5e10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5e14: push   %rax
  0x00007f75704c5e15: mov    %r11,%rax
  0x00007f75704c5e18: mov    0x50(%rbx),%r11
  0x00007f75704c5e1c: mov    0x50(%rax),%rsi
  0x00007f75704c5e20: mov    0x40(%rax),%rdx
  0x00007f75704c5e24: mov    0x38(%rax),%rcx
  0x00007f75704c5e28: mov    0x28(%rax),%r8
  0x00007f75704c5e2c: mov    0x18(%rax),%r9
  0x00007f75704c5e30: mov    0x8(%rax),%rdi
  0x00007f75704c5e34: mov    %rbx,0x258(%r15)
  0x00007f75704c5e3b: mov    %rbx,%rax
  0x00007f75704c5e3e: jmpq   *%r11
  0x00007f75704c5e41: mov    0x8(%rsi),%ebx
  0x00007f75704c5e44: shl    $0x3,%rbx
  0x00007f75704c5e48: cmp    0x10(%rax),%rbx
  0x00007f75704c5e4c: mov    0x8(%rax),%rbx
  0x00007f75704c5e50: je     0x00007f75704c5e5b
  0x00007f75704c5e56: jmpq   0x00007f757046ec40
  0x00007f75704c5e5b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c5e63: je     0x00007f75704c5f5e
  0x00007f75704c5e69: jmpq   0x00007f757046ec40
  0x00007f75704c5e6e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c5e76: je     0x00007f75704c5f5e
  0x00007f75704c5e7c: mov    %rsp,%r13
  0x00007f75704c5e7f: mov    (%rsp),%rax
  0x00007f75704c5e83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c5e87: pushfq 
  0x00007f75704c5e88: sub    $0x8,%rsp
  0x00007f75704c5e8c: mov    %rsp,-0x28(%rsp)
  0x00007f75704c5e91: sub    $0x80,%rsp
  0x00007f75704c5e98: mov    %rax,0x78(%rsp)
  0x00007f75704c5e9d: mov    %rcx,0x70(%rsp)
  0x00007f75704c5ea2: mov    %rdx,0x68(%rsp)
  0x00007f75704c5ea7: mov    %rbx,0x60(%rsp)
  0x00007f75704c5eac: mov    %rbp,0x50(%rsp)
  0x00007f75704c5eb1: mov    %rsi,0x48(%rsp)
  0x00007f75704c5eb6: mov    %rdi,0x40(%rsp)
  0x00007f75704c5ebb: mov    %r8,0x38(%rsp)
  0x00007f75704c5ec0: mov    %r9,0x30(%rsp)
  0x00007f75704c5ec5: mov    %r10,0x28(%rsp)
  0x00007f75704c5eca: mov    %r11,0x20(%rsp)
  0x00007f75704c5ecf: mov    %r12,0x18(%rsp)
  0x00007f75704c5ed4: mov    %r13,0x10(%rsp)
  0x00007f75704c5ed9: mov    %r14,0x8(%rsp)
  0x00007f75704c5ede: mov    %r15,(%rsp)
  0x00007f75704c5ee2: sub    $0x200,%rsp
  0x00007f75704c5ee9: fxsave64 (%rsp)
  0x00007f75704c5eee: mov    %rbx,%rdi
  0x00007f75704c5ef1: mov    %rax,%rsi
  0x00007f75704c5ef4: callq  0x00007f7585522bca
  0x00007f75704c5ef9: fxrstor64 (%rsp)
  0x00007f75704c5efe: add    $0x200,%rsp
  0x00007f75704c5f05: mov    (%rsp),%r15
  0x00007f75704c5f09: mov    0x8(%rsp),%r14
  0x00007f75704c5f0e: mov    0x10(%rsp),%r13
  0x00007f75704c5f13: mov    0x18(%rsp),%r12
  0x00007f75704c5f18: mov    0x20(%rsp),%r11
  0x00007f75704c5f1d: mov    0x28(%rsp),%r10
  0x00007f75704c5f22: mov    0x30(%rsp),%r9
  0x00007f75704c5f27: mov    0x38(%rsp),%r8
  0x00007f75704c5f2c: mov    0x40(%rsp),%rdi
  0x00007f75704c5f31: mov    0x48(%rsp),%rsi
  0x00007f75704c5f36: mov    0x50(%rsp),%rbp
  0x00007f75704c5f3b: mov    0x60(%rsp),%rbx
  0x00007f75704c5f40: mov    0x68(%rsp),%rdx
  0x00007f75704c5f45: mov    0x70(%rsp),%rcx
  0x00007f75704c5f4a: mov    0x78(%rsp),%rax
  0x00007f75704c5f4f: add    $0x80,%rsp
  0x00007f75704c5f56: add    $0x8,%rsp
  0x00007f75704c5f5a: popfq  
  0x00007f75704c5f5b: mov    %r13,%rsp
  0x00007f75704c5f5e: pop    %rax
  0x00007f75704c5f5f: mov    %rsp,%r13
  0x00007f75704c5f62: sub    $0x60,%rsp
  0x00007f75704c5f66: mov    %rax,(%rsp)
  0x00007f75704c5f6a: mov    %rsi,0x50(%rsp)
  0x00007f75704c5f6f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c5f79: mov    %rax,0x48(%rsp)
  0x00007f75704c5f7e: mov    %rdx,0x40(%rsp)
  0x00007f75704c5f83: mov    %rcx,0x38(%rsp)
  0x00007f75704c5f88: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c5f92: mov    %rax,0x30(%rsp)
  0x00007f75704c5f97: mov    %r8,0x28(%rsp)
  0x00007f75704c5f9c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c5fa6: mov    %rax,0x20(%rsp)
  0x00007f75704c5fab: mov    %r9,0x18(%rsp)
  0x00007f75704c5fb0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c5fba: mov    %rax,0x10(%rsp)
  0x00007f75704c5fbf: mov    %rdi,0x8(%rsp)
  0x00007f75704c5fc4: mov    0x40(%rbx),%rcx
  0x00007f75704c5fc8: jmpq   *%rcx

AHE@0x00007f758012c420: 0xbebbebe0 i2c: 0x00007f75704c60a0 c2i: 0x00007f75704c61e6 c2iUV: 0x00007f75704c61b9
i2c argument handler #72 for: static (JLjava/lang/Object;JJ)V (649 bytes generated)
c2i argument handler starts at 0x7f75704c61e6
  0x00007f75704c60a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c60a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c60ae: cmp    %r11,%rax
  0x00007f75704c60b1: jbe    0x00007f75704c60ca
  0x00007f75704c60b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c60c1: cmp    %r11,%rax
  0x00007f75704c60c4: jb     0x00007f75704c618d
  0x00007f75704c60ca: movabs $0x7f7570369420,%r11
  0x00007f75704c60d4: cmp    %r11,%rax
  0x00007f75704c60d7: jbe    0x00007f75704c60f0
  0x00007f75704c60dd: movabs $0x7f757036de58,%r11
  0x00007f75704c60e7: cmp    %r11,%rax
  0x00007f75704c60ea: jb     0x00007f75704c618d
  0x00007f75704c60f0: movabs $0x7f75704a9820,%r11
  0x00007f75704c60fa: cmp    %r11,%rax
  0x00007f75704c60fd: jbe    0x00007f75704c6116
  0x00007f75704c6103: movabs $0x7f75704af5e0,%r11
  0x00007f75704c610d: cmp    %r11,%rax
  0x00007f75704c6110: jb     0x00007f75704c618d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c6116: mov    %rsp,-0x28(%rsp)
  0x00007f75704c611b: sub    $0x80,%rsp
  0x00007f75704c6122: mov    %rax,0x78(%rsp)
  0x00007f75704c6127: mov    %rcx,0x70(%rsp)
  0x00007f75704c612c: mov    %rdx,0x68(%rsp)
  0x00007f75704c6131: mov    %rbx,0x60(%rsp)
  0x00007f75704c6136: mov    %rbp,0x50(%rsp)
  0x00007f75704c613b: mov    %rsi,0x48(%rsp)
  0x00007f75704c6140: mov    %rdi,0x40(%rsp)
  0x00007f75704c6145: mov    %r8,0x38(%rsp)
  0x00007f75704c614a: mov    %r9,0x30(%rsp)
  0x00007f75704c614f: mov    %r10,0x28(%rsp)
  0x00007f75704c6154: mov    %r11,0x20(%rsp)
  0x00007f75704c6159: mov    %r12,0x18(%rsp)
  0x00007f75704c615e: mov    %r13,0x10(%rsp)
  0x00007f75704c6163: mov    %r14,0x8(%rsp)
  0x00007f75704c6168: mov    %r15,(%rsp)
  0x00007f75704c616c: movabs $0x7f758592f470,%rdi
  0x00007f75704c6176: movabs $0x7f75704c6116,%rsi
  0x00007f75704c6180: mov    %rsp,%rdx
  0x00007f75704c6183: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6187: callq  0x00007f75853729fa
  0x00007f75704c618c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c618d: mov    %rsp,%r11
  0x00007f75704c6190: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6194: push   %rax
  0x00007f75704c6195: mov    %r11,%rax
  0x00007f75704c6198: mov    0x50(%rbx),%r11
  0x00007f75704c619c: mov    0x30(%rax),%rsi
  0x00007f75704c61a0: mov    0x28(%rax),%rdx
  0x00007f75704c61a4: mov    0x18(%rax),%rcx
  0x00007f75704c61a8: mov    0x8(%rax),%r8
  0x00007f75704c61ac: mov    %rbx,0x258(%r15)
  0x00007f75704c61b3: mov    %rbx,%rax
  0x00007f75704c61b6: jmpq   *%r11
  0x00007f75704c61b9: mov    0x8(%rsi),%ebx
  0x00007f75704c61bc: shl    $0x3,%rbx
  0x00007f75704c61c0: cmp    0x10(%rax),%rbx
  0x00007f75704c61c4: mov    0x8(%rax),%rbx
  0x00007f75704c61c8: je     0x00007f75704c61d3
  0x00007f75704c61ce: jmpq   0x00007f757046ec40
  0x00007f75704c61d3: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c61db: je     0x00007f75704c62d6
  0x00007f75704c61e1: jmpq   0x00007f757046ec40
  0x00007f75704c61e6: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c61ee: je     0x00007f75704c62d6
  0x00007f75704c61f4: mov    %rsp,%r13
  0x00007f75704c61f7: mov    (%rsp),%rax
  0x00007f75704c61fb: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c61ff: pushfq 
  0x00007f75704c6200: sub    $0x8,%rsp
  0x00007f75704c6204: mov    %rsp,-0x28(%rsp)
  0x00007f75704c6209: sub    $0x80,%rsp
  0x00007f75704c6210: mov    %rax,0x78(%rsp)
  0x00007f75704c6215: mov    %rcx,0x70(%rsp)
  0x00007f75704c621a: mov    %rdx,0x68(%rsp)
  0x00007f75704c621f: mov    %rbx,0x60(%rsp)
  0x00007f75704c6224: mov    %rbp,0x50(%rsp)
  0x00007f75704c6229: mov    %rsi,0x48(%rsp)
  0x00007f75704c622e: mov    %rdi,0x40(%rsp)
  0x00007f75704c6233: mov    %r8,0x38(%rsp)
  0x00007f75704c6238: mov    %r9,0x30(%rsp)
  0x00007f75704c623d: mov    %r10,0x28(%rsp)
  0x00007f75704c6242: mov    %r11,0x20(%rsp)
  0x00007f75704c6247: mov    %r12,0x18(%rsp)
  0x00007f75704c624c: mov    %r13,0x10(%rsp)
  0x00007f75704c6251: mov    %r14,0x8(%rsp)
  0x00007f75704c6256: mov    %r15,(%rsp)
  0x00007f75704c625a: sub    $0x200,%rsp
  0x00007f75704c6261: fxsave64 (%rsp)
  0x00007f75704c6266: mov    %rbx,%rdi
  0x00007f75704c6269: mov    %rax,%rsi
  0x00007f75704c626c: callq  0x00007f7585522bca
  0x00007f75704c6271: fxrstor64 (%rsp)
  0x00007f75704c6276: add    $0x200,%rsp
  0x00007f75704c627d: mov    (%rsp),%r15
  0x00007f75704c6281: mov    0x8(%rsp),%r14
  0x00007f75704c6286: mov    0x10(%rsp),%r13
  0x00007f75704c628b: mov    0x18(%rsp),%r12
  0x00007f75704c6290: mov    0x20(%rsp),%r11
  0x00007f75704c6295: mov    0x28(%rsp),%r10
  0x00007f75704c629a: mov    0x30(%rsp),%r9
  0x00007f75704c629f: mov    0x38(%rsp),%r8
  0x00007f75704c62a4: mov    0x40(%rsp),%rdi
  0x00007f75704c62a9: mov    0x48(%rsp),%rsi
  0x00007f75704c62ae: mov    0x50(%rsp),%rbp
  0x00007f75704c62b3: mov    0x60(%rsp),%rbx
  0x00007f75704c62b8: mov    0x68(%rsp),%rdx
  0x00007f75704c62bd: mov    0x70(%rsp),%rcx
  0x00007f75704c62c2: mov    0x78(%rsp),%rax
  0x00007f75704c62c7: add    $0x80,%rsp
  0x00007f75704c62ce: add    $0x8,%rsp
  0x00007f75704c62d2: popfq  
  0x00007f75704c62d3: mov    %r13,%rsp
  0x00007f75704c62d6: pop    %rax
  0x00007f75704c62d7: mov    %rsp,%r13
  0x00007f75704c62da: sub    $0x40,%rsp
  0x00007f75704c62de: mov    %rax,(%rsp)
  0x00007f75704c62e2: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c62ec: mov    %rax,0x38(%rsp)
  0x00007f75704c62f1: mov    %rsi,0x30(%rsp)
  0x00007f75704c62f6: mov    %rdx,0x28(%rsp)
  0x00007f75704c62fb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6305: mov    %rax,0x20(%rsp)
  0x00007f75704c630a: mov    %rcx,0x18(%rsp)
  0x00007f75704c630f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6319: mov    %rax,0x10(%rsp)
  0x00007f75704c631e: mov    %r8,0x8(%rsp)
  0x00007f75704c6323: mov    0x40(%rbx),%rcx
  0x00007f75704c6327: jmpq   *%rcx

AHE@0x00007f758012c468: 0xbbebebe0 i2c: 0x00007f75704c63e0 c2i: 0x00007f75704c6526 c2iUV: 0x00007f75704c64f9
i2c argument handler #73 for: static (Ljava/lang/Object;JJJ)V (649 bytes generated)
c2i argument handler starts at 0x7f75704c6526
  0x00007f75704c63e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c63e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c63ee: cmp    %r11,%rax
  0x00007f75704c63f1: jbe    0x00007f75704c640a
  0x00007f75704c63f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c6401: cmp    %r11,%rax
  0x00007f75704c6404: jb     0x00007f75704c64cd
  0x00007f75704c640a: movabs $0x7f7570369420,%r11
  0x00007f75704c6414: cmp    %r11,%rax
  0x00007f75704c6417: jbe    0x00007f75704c6430
  0x00007f75704c641d: movabs $0x7f757036de58,%r11
  0x00007f75704c6427: cmp    %r11,%rax
  0x00007f75704c642a: jb     0x00007f75704c64cd
  0x00007f75704c6430: movabs $0x7f75704a9820,%r11
  0x00007f75704c643a: cmp    %r11,%rax
  0x00007f75704c643d: jbe    0x00007f75704c6456
  0x00007f75704c6443: movabs $0x7f75704af5e0,%r11
  0x00007f75704c644d: cmp    %r11,%rax
  0x00007f75704c6450: jb     0x00007f75704c64cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c6456: mov    %rsp,-0x28(%rsp)
  0x00007f75704c645b: sub    $0x80,%rsp
  0x00007f75704c6462: mov    %rax,0x78(%rsp)
  0x00007f75704c6467: mov    %rcx,0x70(%rsp)
  0x00007f75704c646c: mov    %rdx,0x68(%rsp)
  0x00007f75704c6471: mov    %rbx,0x60(%rsp)
  0x00007f75704c6476: mov    %rbp,0x50(%rsp)
  0x00007f75704c647b: mov    %rsi,0x48(%rsp)
  0x00007f75704c6480: mov    %rdi,0x40(%rsp)
  0x00007f75704c6485: mov    %r8,0x38(%rsp)
  0x00007f75704c648a: mov    %r9,0x30(%rsp)
  0x00007f75704c648f: mov    %r10,0x28(%rsp)
  0x00007f75704c6494: mov    %r11,0x20(%rsp)
  0x00007f75704c6499: mov    %r12,0x18(%rsp)
  0x00007f75704c649e: mov    %r13,0x10(%rsp)
  0x00007f75704c64a3: mov    %r14,0x8(%rsp)
  0x00007f75704c64a8: mov    %r15,(%rsp)
  0x00007f75704c64ac: movabs $0x7f758592f470,%rdi
  0x00007f75704c64b6: movabs $0x7f75704c6456,%rsi
  0x00007f75704c64c0: mov    %rsp,%rdx
  0x00007f75704c64c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c64c7: callq  0x00007f75853729fa
  0x00007f75704c64cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c64cd: mov    %rsp,%r11
  0x00007f75704c64d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c64d4: push   %rax
  0x00007f75704c64d5: mov    %r11,%rax
  0x00007f75704c64d8: mov    0x50(%rbx),%r11
  0x00007f75704c64dc: mov    0x38(%rax),%rsi
  0x00007f75704c64e0: mov    0x28(%rax),%rdx
  0x00007f75704c64e4: mov    0x18(%rax),%rcx
  0x00007f75704c64e8: mov    0x8(%rax),%r8
  0x00007f75704c64ec: mov    %rbx,0x258(%r15)
  0x00007f75704c64f3: mov    %rbx,%rax
  0x00007f75704c64f6: jmpq   *%r11
  0x00007f75704c64f9: mov    0x8(%rsi),%ebx
  0x00007f75704c64fc: shl    $0x3,%rbx
  0x00007f75704c6500: cmp    0x10(%rax),%rbx
  0x00007f75704c6504: mov    0x8(%rax),%rbx
  0x00007f75704c6508: je     0x00007f75704c6513
  0x00007f75704c650e: jmpq   0x00007f757046ec40
  0x00007f75704c6513: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c651b: je     0x00007f75704c6616
  0x00007f75704c6521: jmpq   0x00007f757046ec40
  0x00007f75704c6526: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c652e: je     0x00007f75704c6616
  0x00007f75704c6534: mov    %rsp,%r13
  0x00007f75704c6537: mov    (%rsp),%rax
  0x00007f75704c653b: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c653f: pushfq 
  0x00007f75704c6540: sub    $0x8,%rsp
  0x00007f75704c6544: mov    %rsp,-0x28(%rsp)
  0x00007f75704c6549: sub    $0x80,%rsp
  0x00007f75704c6550: mov    %rax,0x78(%rsp)
  0x00007f75704c6555: mov    %rcx,0x70(%rsp)
  0x00007f75704c655a: mov    %rdx,0x68(%rsp)
  0x00007f75704c655f: mov    %rbx,0x60(%rsp)
  0x00007f75704c6564: mov    %rbp,0x50(%rsp)
  0x00007f75704c6569: mov    %rsi,0x48(%rsp)
  0x00007f75704c656e: mov    %rdi,0x40(%rsp)
  0x00007f75704c6573: mov    %r8,0x38(%rsp)
  0x00007f75704c6578: mov    %r9,0x30(%rsp)
  0x00007f75704c657d: mov    %r10,0x28(%rsp)
  0x00007f75704c6582: mov    %r11,0x20(%rsp)
  0x00007f75704c6587: mov    %r12,0x18(%rsp)
  0x00007f75704c658c: mov    %r13,0x10(%rsp)
  0x00007f75704c6591: mov    %r14,0x8(%rsp)
  0x00007f75704c6596: mov    %r15,(%rsp)
  0x00007f75704c659a: sub    $0x200,%rsp
  0x00007f75704c65a1: fxsave64 (%rsp)
  0x00007f75704c65a6: mov    %rbx,%rdi
  0x00007f75704c65a9: mov    %rax,%rsi
  0x00007f75704c65ac: callq  0x00007f7585522bca
  0x00007f75704c65b1: fxrstor64 (%rsp)
  0x00007f75704c65b6: add    $0x200,%rsp
  0x00007f75704c65bd: mov    (%rsp),%r15
  0x00007f75704c65c1: mov    0x8(%rsp),%r14
  0x00007f75704c65c6: mov    0x10(%rsp),%r13
  0x00007f75704c65cb: mov    0x18(%rsp),%r12
  0x00007f75704c65d0: mov    0x20(%rsp),%r11
  0x00007f75704c65d5: mov    0x28(%rsp),%r10
  0x00007f75704c65da: mov    0x30(%rsp),%r9
  0x00007f75704c65df: mov    0x38(%rsp),%r8
  0x00007f75704c65e4: mov    0x40(%rsp),%rdi
  0x00007f75704c65e9: mov    0x48(%rsp),%rsi
  0x00007f75704c65ee: mov    0x50(%rsp),%rbp
  0x00007f75704c65f3: mov    0x60(%rsp),%rbx
  0x00007f75704c65f8: mov    0x68(%rsp),%rdx
  0x00007f75704c65fd: mov    0x70(%rsp),%rcx
  0x00007f75704c6602: mov    0x78(%rsp),%rax
  0x00007f75704c6607: add    $0x80,%rsp
  0x00007f75704c660e: add    $0x8,%rsp
  0x00007f75704c6612: popfq  
  0x00007f75704c6613: mov    %r13,%rsp
  0x00007f75704c6616: pop    %rax
  0x00007f75704c6617: mov    %rsp,%r13
  0x00007f75704c661a: sub    $0x40,%rsp
  0x00007f75704c661e: mov    %rax,(%rsp)
  0x00007f75704c6622: mov    %rsi,0x38(%rsp)
  0x00007f75704c6627: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6631: mov    %rax,0x30(%rsp)
  0x00007f75704c6636: mov    %rdx,0x28(%rsp)
  0x00007f75704c663b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6645: mov    %rax,0x20(%rsp)
  0x00007f75704c664a: mov    %rcx,0x18(%rsp)
  0x00007f75704c664f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6659: mov    %rax,0x10(%rsp)
  0x00007f75704c665e: mov    %r8,0x8(%rsp)
  0x00007f75704c6663: mov    0x40(%rbx),%rcx
  0x00007f75704c6667: jmpq   *%rcx

AHE@0x00007f758012c4b0: 0xbebbebebe0000000 i2c: 0x00007f75704c6720 c2i: 0x00007f75704c686a c2iUV: 0x00007f75704c683d
i2c argument handler #74 for: static (JLjava/lang/Object;JJJ)V (673 bytes generated)
c2i argument handler starts at 0x7f75704c686a
  0x00007f75704c6720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c6724: movabs $0x7f757036e3e0,%r11
  0x00007f75704c672e: cmp    %r11,%rax
  0x00007f75704c6731: jbe    0x00007f75704c674a
  0x00007f75704c6737: movabs $0x7f757046e3e0,%r11
  0x00007f75704c6741: cmp    %r11,%rax
  0x00007f75704c6744: jb     0x00007f75704c680d
  0x00007f75704c674a: movabs $0x7f7570369420,%r11
  0x00007f75704c6754: cmp    %r11,%rax
  0x00007f75704c6757: jbe    0x00007f75704c6770
  0x00007f75704c675d: movabs $0x7f757036de58,%r11
  0x00007f75704c6767: cmp    %r11,%rax
  0x00007f75704c676a: jb     0x00007f75704c680d
  0x00007f75704c6770: movabs $0x7f75704a9820,%r11
  0x00007f75704c677a: cmp    %r11,%rax
  0x00007f75704c677d: jbe    0x00007f75704c6796
  0x00007f75704c6783: movabs $0x7f75704af5e0,%r11
  0x00007f75704c678d: cmp    %r11,%rax
  0x00007f75704c6790: jb     0x00007f75704c680d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c6796: mov    %rsp,-0x28(%rsp)
  0x00007f75704c679b: sub    $0x80,%rsp
  0x00007f75704c67a2: mov    %rax,0x78(%rsp)
  0x00007f75704c67a7: mov    %rcx,0x70(%rsp)
  0x00007f75704c67ac: mov    %rdx,0x68(%rsp)
  0x00007f75704c67b1: mov    %rbx,0x60(%rsp)
  0x00007f75704c67b6: mov    %rbp,0x50(%rsp)
  0x00007f75704c67bb: mov    %rsi,0x48(%rsp)
  0x00007f75704c67c0: mov    %rdi,0x40(%rsp)
  0x00007f75704c67c5: mov    %r8,0x38(%rsp)
  0x00007f75704c67ca: mov    %r9,0x30(%rsp)
  0x00007f75704c67cf: mov    %r10,0x28(%rsp)
  0x00007f75704c67d4: mov    %r11,0x20(%rsp)
  0x00007f75704c67d9: mov    %r12,0x18(%rsp)
  0x00007f75704c67de: mov    %r13,0x10(%rsp)
  0x00007f75704c67e3: mov    %r14,0x8(%rsp)
  0x00007f75704c67e8: mov    %r15,(%rsp)
  0x00007f75704c67ec: movabs $0x7f758592f470,%rdi
  0x00007f75704c67f6: movabs $0x7f75704c6796,%rsi
  0x00007f75704c6800: mov    %rsp,%rdx
  0x00007f75704c6803: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6807: callq  0x00007f75853729fa
  0x00007f75704c680c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c680d: mov    %rsp,%r11
  0x00007f75704c6810: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6814: push   %rax
  0x00007f75704c6815: mov    %r11,%rax
  0x00007f75704c6818: mov    0x50(%rbx),%r11
  0x00007f75704c681c: mov    0x40(%rax),%rsi
  0x00007f75704c6820: mov    0x38(%rax),%rdx
  0x00007f75704c6824: mov    0x28(%rax),%rcx
  0x00007f75704c6828: mov    0x18(%rax),%r8
  0x00007f75704c682c: mov    0x8(%rax),%r9
  0x00007f75704c6830: mov    %rbx,0x258(%r15)
  0x00007f75704c6837: mov    %rbx,%rax
  0x00007f75704c683a: jmpq   *%r11
  0x00007f75704c683d: mov    0x8(%rsi),%ebx
  0x00007f75704c6840: shl    $0x3,%rbx
  0x00007f75704c6844: cmp    0x10(%rax),%rbx
  0x00007f75704c6848: mov    0x8(%rax),%rbx
  0x00007f75704c684c: je     0x00007f75704c6857
  0x00007f75704c6852: jmpq   0x00007f757046ec40
  0x00007f75704c6857: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c685f: je     0x00007f75704c695a
  0x00007f75704c6865: jmpq   0x00007f757046ec40
  0x00007f75704c686a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c6872: je     0x00007f75704c695a
  0x00007f75704c6878: mov    %rsp,%r13
  0x00007f75704c687b: mov    (%rsp),%rax
  0x00007f75704c687f: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6883: pushfq 
  0x00007f75704c6884: sub    $0x8,%rsp
  0x00007f75704c6888: mov    %rsp,-0x28(%rsp)
  0x00007f75704c688d: sub    $0x80,%rsp
  0x00007f75704c6894: mov    %rax,0x78(%rsp)
  0x00007f75704c6899: mov    %rcx,0x70(%rsp)
  0x00007f75704c689e: mov    %rdx,0x68(%rsp)
  0x00007f75704c68a3: mov    %rbx,0x60(%rsp)
  0x00007f75704c68a8: mov    %rbp,0x50(%rsp)
  0x00007f75704c68ad: mov    %rsi,0x48(%rsp)
  0x00007f75704c68b2: mov    %rdi,0x40(%rsp)
  0x00007f75704c68b7: mov    %r8,0x38(%rsp)
  0x00007f75704c68bc: mov    %r9,0x30(%rsp)
  0x00007f75704c68c1: mov    %r10,0x28(%rsp)
  0x00007f75704c68c6: mov    %r11,0x20(%rsp)
  0x00007f75704c68cb: mov    %r12,0x18(%rsp)
  0x00007f75704c68d0: mov    %r13,0x10(%rsp)
  0x00007f75704c68d5: mov    %r14,0x8(%rsp)
  0x00007f75704c68da: mov    %r15,(%rsp)
  0x00007f75704c68de: sub    $0x200,%rsp
  0x00007f75704c68e5: fxsave64 (%rsp)
  0x00007f75704c68ea: mov    %rbx,%rdi
  0x00007f75704c68ed: mov    %rax,%rsi
  0x00007f75704c68f0: callq  0x00007f7585522bca
  0x00007f75704c68f5: fxrstor64 (%rsp)
  0x00007f75704c68fa: add    $0x200,%rsp
  0x00007f75704c6901: mov    (%rsp),%r15
  0x00007f75704c6905: mov    0x8(%rsp),%r14
  0x00007f75704c690a: mov    0x10(%rsp),%r13
  0x00007f75704c690f: mov    0x18(%rsp),%r12
  0x00007f75704c6914: mov    0x20(%rsp),%r11
  0x00007f75704c6919: mov    0x28(%rsp),%r10
  0x00007f75704c691e: mov    0x30(%rsp),%r9
  0x00007f75704c6923: mov    0x38(%rsp),%r8
  0x00007f75704c6928: mov    0x40(%rsp),%rdi
  0x00007f75704c692d: mov    0x48(%rsp),%rsi
  0x00007f75704c6932: mov    0x50(%rsp),%rbp
  0x00007f75704c6937: mov    0x60(%rsp),%rbx
  0x00007f75704c693c: mov    0x68(%rsp),%rdx
  0x00007f75704c6941: mov    0x70(%rsp),%rcx
  0x00007f75704c6946: mov    0x78(%rsp),%rax
  0x00007f75704c694b: add    $0x80,%rsp
  0x00007f75704c6952: add    $0x8,%rsp
  0x00007f75704c6956: popfq  
  0x00007f75704c6957: mov    %r13,%rsp
  0x00007f75704c695a: pop    %rax
  0x00007f75704c695b: mov    %rsp,%r13
  0x00007f75704c695e: sub    $0x50,%rsp
  0x00007f75704c6962: mov    %rax,(%rsp)
  0x00007f75704c6966: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6970: mov    %rax,0x48(%rsp)
  0x00007f75704c6975: mov    %rsi,0x40(%rsp)
  0x00007f75704c697a: mov    %rdx,0x38(%rsp)
  0x00007f75704c697f: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6989: mov    %rax,0x30(%rsp)
  0x00007f75704c698e: mov    %rcx,0x28(%rsp)
  0x00007f75704c6993: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c699d: mov    %rax,0x20(%rsp)
  0x00007f75704c69a2: mov    %r8,0x18(%rsp)
  0x00007f75704c69a7: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c69b1: mov    %rax,0x10(%rsp)
  0x00007f75704c69b6: mov    %r9,0x8(%rsp)
  0x00007f75704c69bb: mov    0x40(%rbx),%rcx
  0x00007f75704c69bf: jmpq   *%rcx

AHE@0x00007f758012c4f8: 0xbbebebebe0000000 i2c: 0x00007f75704c6aa0 c2i: 0x00007f75704c6bea c2iUV: 0x00007f75704c6bbd
i2c argument handler #75 for: static (Ljava/lang/Object;JJJJ)V (673 bytes generated)
c2i argument handler starts at 0x7f75704c6bea
  0x00007f75704c6aa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c6aa4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c6aae: cmp    %r11,%rax
  0x00007f75704c6ab1: jbe    0x00007f75704c6aca
  0x00007f75704c6ab7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c6ac1: cmp    %r11,%rax
  0x00007f75704c6ac4: jb     0x00007f75704c6b8d
  0x00007f75704c6aca: movabs $0x7f7570369420,%r11
  0x00007f75704c6ad4: cmp    %r11,%rax
  0x00007f75704c6ad7: jbe    0x00007f75704c6af0
  0x00007f75704c6add: movabs $0x7f757036de58,%r11
  0x00007f75704c6ae7: cmp    %r11,%rax
  0x00007f75704c6aea: jb     0x00007f75704c6b8d
  0x00007f75704c6af0: movabs $0x7f75704a9820,%r11
  0x00007f75704c6afa: cmp    %r11,%rax
  0x00007f75704c6afd: jbe    0x00007f75704c6b16
  0x00007f75704c6b03: movabs $0x7f75704af5e0,%r11
  0x00007f75704c6b0d: cmp    %r11,%rax
  0x00007f75704c6b10: jb     0x00007f75704c6b8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c6b16: mov    %rsp,-0x28(%rsp)
  0x00007f75704c6b1b: sub    $0x80,%rsp
  0x00007f75704c6b22: mov    %rax,0x78(%rsp)
  0x00007f75704c6b27: mov    %rcx,0x70(%rsp)
  0x00007f75704c6b2c: mov    %rdx,0x68(%rsp)
  0x00007f75704c6b31: mov    %rbx,0x60(%rsp)
  0x00007f75704c6b36: mov    %rbp,0x50(%rsp)
  0x00007f75704c6b3b: mov    %rsi,0x48(%rsp)
  0x00007f75704c6b40: mov    %rdi,0x40(%rsp)
  0x00007f75704c6b45: mov    %r8,0x38(%rsp)
  0x00007f75704c6b4a: mov    %r9,0x30(%rsp)
  0x00007f75704c6b4f: mov    %r10,0x28(%rsp)
  0x00007f75704c6b54: mov    %r11,0x20(%rsp)
  0x00007f75704c6b59: mov    %r12,0x18(%rsp)
  0x00007f75704c6b5e: mov    %r13,0x10(%rsp)
  0x00007f75704c6b63: mov    %r14,0x8(%rsp)
  0x00007f75704c6b68: mov    %r15,(%rsp)
  0x00007f75704c6b6c: movabs $0x7f758592f470,%rdi
  0x00007f75704c6b76: movabs $0x7f75704c6b16,%rsi
  0x00007f75704c6b80: mov    %rsp,%rdx
  0x00007f75704c6b83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6b87: callq  0x00007f75853729fa
  0x00007f75704c6b8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c6b8d: mov    %rsp,%r11
  0x00007f75704c6b90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6b94: push   %rax
  0x00007f75704c6b95: mov    %r11,%rax
  0x00007f75704c6b98: mov    0x50(%rbx),%r11
  0x00007f75704c6b9c: mov    0x48(%rax),%rsi
  0x00007f75704c6ba0: mov    0x38(%rax),%rdx
  0x00007f75704c6ba4: mov    0x28(%rax),%rcx
  0x00007f75704c6ba8: mov    0x18(%rax),%r8
  0x00007f75704c6bac: mov    0x8(%rax),%r9
  0x00007f75704c6bb0: mov    %rbx,0x258(%r15)
  0x00007f75704c6bb7: mov    %rbx,%rax
  0x00007f75704c6bba: jmpq   *%r11
  0x00007f75704c6bbd: mov    0x8(%rsi),%ebx
  0x00007f75704c6bc0: shl    $0x3,%rbx
  0x00007f75704c6bc4: cmp    0x10(%rax),%rbx
  0x00007f75704c6bc8: mov    0x8(%rax),%rbx
  0x00007f75704c6bcc: je     0x00007f75704c6bd7
  0x00007f75704c6bd2: jmpq   0x00007f757046ec40
  0x00007f75704c6bd7: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c6bdf: je     0x00007f75704c6cda
  0x00007f75704c6be5: jmpq   0x00007f757046ec40
  0x00007f75704c6bea: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c6bf2: je     0x00007f75704c6cda
  0x00007f75704c6bf8: mov    %rsp,%r13
  0x00007f75704c6bfb: mov    (%rsp),%rax
  0x00007f75704c6bff: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6c03: pushfq 
  0x00007f75704c6c04: sub    $0x8,%rsp
  0x00007f75704c6c08: mov    %rsp,-0x28(%rsp)
  0x00007f75704c6c0d: sub    $0x80,%rsp
  0x00007f75704c6c14: mov    %rax,0x78(%rsp)
  0x00007f75704c6c19: mov    %rcx,0x70(%rsp)
  0x00007f75704c6c1e: mov    %rdx,0x68(%rsp)
  0x00007f75704c6c23: mov    %rbx,0x60(%rsp)
  0x00007f75704c6c28: mov    %rbp,0x50(%rsp)
  0x00007f75704c6c2d: mov    %rsi,0x48(%rsp)
  0x00007f75704c6c32: mov    %rdi,0x40(%rsp)
  0x00007f75704c6c37: mov    %r8,0x38(%rsp)
  0x00007f75704c6c3c: mov    %r9,0x30(%rsp)
  0x00007f75704c6c41: mov    %r10,0x28(%rsp)
  0x00007f75704c6c46: mov    %r11,0x20(%rsp)
  0x00007f75704c6c4b: mov    %r12,0x18(%rsp)
  0x00007f75704c6c50: mov    %r13,0x10(%rsp)
  0x00007f75704c6c55: mov    %r14,0x8(%rsp)
  0x00007f75704c6c5a: mov    %r15,(%rsp)
  0x00007f75704c6c5e: sub    $0x200,%rsp
  0x00007f75704c6c65: fxsave64 (%rsp)
  0x00007f75704c6c6a: mov    %rbx,%rdi
  0x00007f75704c6c6d: mov    %rax,%rsi
  0x00007f75704c6c70: callq  0x00007f7585522bca
  0x00007f75704c6c75: fxrstor64 (%rsp)
  0x00007f75704c6c7a: add    $0x200,%rsp
  0x00007f75704c6c81: mov    (%rsp),%r15
  0x00007f75704c6c85: mov    0x8(%rsp),%r14
  0x00007f75704c6c8a: mov    0x10(%rsp),%r13
  0x00007f75704c6c8f: mov    0x18(%rsp),%r12
  0x00007f75704c6c94: mov    0x20(%rsp),%r11
  0x00007f75704c6c99: mov    0x28(%rsp),%r10
  0x00007f75704c6c9e: mov    0x30(%rsp),%r9
  0x00007f75704c6ca3: mov    0x38(%rsp),%r8
  0x00007f75704c6ca8: mov    0x40(%rsp),%rdi
  0x00007f75704c6cad: mov    0x48(%rsp),%rsi
  0x00007f75704c6cb2: mov    0x50(%rsp),%rbp
  0x00007f75704c6cb7: mov    0x60(%rsp),%rbx
  0x00007f75704c6cbc: mov    0x68(%rsp),%rdx
  0x00007f75704c6cc1: mov    0x70(%rsp),%rcx
  0x00007f75704c6cc6: mov    0x78(%rsp),%rax
  0x00007f75704c6ccb: add    $0x80,%rsp
  0x00007f75704c6cd2: add    $0x8,%rsp
  0x00007f75704c6cd6: popfq  
  0x00007f75704c6cd7: mov    %r13,%rsp
  0x00007f75704c6cda: pop    %rax
  0x00007f75704c6cdb: mov    %rsp,%r13
  0x00007f75704c6cde: sub    $0x50,%rsp
  0x00007f75704c6ce2: mov    %rax,(%rsp)
  0x00007f75704c6ce6: mov    %rsi,0x48(%rsp)
  0x00007f75704c6ceb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6cf5: mov    %rax,0x40(%rsp)
  0x00007f75704c6cfa: mov    %rdx,0x38(%rsp)
  0x00007f75704c6cff: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6d09: mov    %rax,0x30(%rsp)
  0x00007f75704c6d0e: mov    %rcx,0x28(%rsp)
  0x00007f75704c6d13: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6d1d: mov    %rax,0x20(%rsp)
  0x00007f75704c6d22: mov    %r8,0x18(%rsp)
  0x00007f75704c6d27: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c6d31: mov    %rax,0x10(%rsp)
  0x00007f75704c6d36: mov    %r9,0x8(%rsp)
  0x00007f75704c6d3b: mov    0x40(%rbx),%rcx
  0x00007f75704c6d3f: jmpq   *%rcx

AHE@0x00007f758012c540: 0xbe7e0000 i2c: 0x00007f75704c6e20 c2i: 0x00007f75704c6f5f c2iUV: 0x00007f75704c6f32
i2c argument handler #76 for: static (JD)V (618 bytes generated)
c2i argument handler starts at 0x7f75704c6f5f
  0x00007f75704c6e20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c6e24: movabs $0x7f757036e3e0,%r11
  0x00007f75704c6e2e: cmp    %r11,%rax
  0x00007f75704c6e31: jbe    0x00007f75704c6e4a
  0x00007f75704c6e37: movabs $0x7f757046e3e0,%r11
  0x00007f75704c6e41: cmp    %r11,%rax
  0x00007f75704c6e44: jb     0x00007f75704c6f0d
  0x00007f75704c6e4a: movabs $0x7f7570369420,%r11
  0x00007f75704c6e54: cmp    %r11,%rax
  0x00007f75704c6e57: jbe    0x00007f75704c6e70
  0x00007f75704c6e5d: movabs $0x7f757036de58,%r11
  0x00007f75704c6e67: cmp    %r11,%rax
  0x00007f75704c6e6a: jb     0x00007f75704c6f0d
  0x00007f75704c6e70: movabs $0x7f75704a9820,%r11
  0x00007f75704c6e7a: cmp    %r11,%rax
  0x00007f75704c6e7d: jbe    0x00007f75704c6e96
  0x00007f75704c6e83: movabs $0x7f75704af5e0,%r11
  0x00007f75704c6e8d: cmp    %r11,%rax
  0x00007f75704c6e90: jb     0x00007f75704c6f0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c6e96: mov    %rsp,-0x28(%rsp)
  0x00007f75704c6e9b: sub    $0x80,%rsp
  0x00007f75704c6ea2: mov    %rax,0x78(%rsp)
  0x00007f75704c6ea7: mov    %rcx,0x70(%rsp)
  0x00007f75704c6eac: mov    %rdx,0x68(%rsp)
  0x00007f75704c6eb1: mov    %rbx,0x60(%rsp)
  0x00007f75704c6eb6: mov    %rbp,0x50(%rsp)
  0x00007f75704c6ebb: mov    %rsi,0x48(%rsp)
  0x00007f75704c6ec0: mov    %rdi,0x40(%rsp)
  0x00007f75704c6ec5: mov    %r8,0x38(%rsp)
  0x00007f75704c6eca: mov    %r9,0x30(%rsp)
  0x00007f75704c6ecf: mov    %r10,0x28(%rsp)
  0x00007f75704c6ed4: mov    %r11,0x20(%rsp)
  0x00007f75704c6ed9: mov    %r12,0x18(%rsp)
  0x00007f75704c6ede: mov    %r13,0x10(%rsp)
  0x00007f75704c6ee3: mov    %r14,0x8(%rsp)
  0x00007f75704c6ee8: mov    %r15,(%rsp)
  0x00007f75704c6eec: movabs $0x7f758592f470,%rdi
  0x00007f75704c6ef6: movabs $0x7f75704c6e96,%rsi
  0x00007f75704c6f00: mov    %rsp,%rdx
  0x00007f75704c6f03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6f07: callq  0x00007f75853729fa
  0x00007f75704c6f0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c6f0d: mov    %rsp,%r11
  0x00007f75704c6f10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6f14: push   %rax
  0x00007f75704c6f15: mov    %r11,%rax
  0x00007f75704c6f18: mov    0x50(%rbx),%r11
  0x00007f75704c6f1c: mov    0x18(%rax),%rsi
  0x00007f75704c6f20: vmovsd 0x8(%rax),%xmm0
  0x00007f75704c6f25: mov    %rbx,0x258(%r15)
  0x00007f75704c6f2c: mov    %rbx,%rax
  0x00007f75704c6f2f: jmpq   *%r11
  0x00007f75704c6f32: mov    0x8(%rsi),%ebx
  0x00007f75704c6f35: shl    $0x3,%rbx
  0x00007f75704c6f39: cmp    0x10(%rax),%rbx
  0x00007f75704c6f3d: mov    0x8(%rax),%rbx
  0x00007f75704c6f41: je     0x00007f75704c6f4c
  0x00007f75704c6f47: jmpq   0x00007f757046ec40
  0x00007f75704c6f4c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c6f54: je     0x00007f75704c704f
  0x00007f75704c6f5a: jmpq   0x00007f757046ec40
  0x00007f75704c6f5f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c6f67: je     0x00007f75704c704f
  0x00007f75704c6f6d: mov    %rsp,%r13
  0x00007f75704c6f70: mov    (%rsp),%rax
  0x00007f75704c6f74: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c6f78: pushfq 
  0x00007f75704c6f79: sub    $0x8,%rsp
  0x00007f75704c6f7d: mov    %rsp,-0x28(%rsp)
  0x00007f75704c6f82: sub    $0x80,%rsp
  0x00007f75704c6f89: mov    %rax,0x78(%rsp)
  0x00007f75704c6f8e: mov    %rcx,0x70(%rsp)
  0x00007f75704c6f93: mov    %rdx,0x68(%rsp)
  0x00007f75704c6f98: mov    %rbx,0x60(%rsp)
  0x00007f75704c6f9d: mov    %rbp,0x50(%rsp)
  0x00007f75704c6fa2: mov    %rsi,0x48(%rsp)
  0x00007f75704c6fa7: mov    %rdi,0x40(%rsp)
  0x00007f75704c6fac: mov    %r8,0x38(%rsp)
  0x00007f75704c6fb1: mov    %r9,0x30(%rsp)
  0x00007f75704c6fb6: mov    %r10,0x28(%rsp)
  0x00007f75704c6fbb: mov    %r11,0x20(%rsp)
  0x00007f75704c6fc0: mov    %r12,0x18(%rsp)
  0x00007f75704c6fc5: mov    %r13,0x10(%rsp)
  0x00007f75704c6fca: mov    %r14,0x8(%rsp)
  0x00007f75704c6fcf: mov    %r15,(%rsp)
  0x00007f75704c6fd3: sub    $0x200,%rsp
  0x00007f75704c6fda: fxsave64 (%rsp)
  0x00007f75704c6fdf: mov    %rbx,%rdi
  0x00007f75704c6fe2: mov    %rax,%rsi
  0x00007f75704c6fe5: callq  0x00007f7585522bca
  0x00007f75704c6fea: fxrstor64 (%rsp)
  0x00007f75704c6fef: add    $0x200,%rsp
  0x00007f75704c6ff6: mov    (%rsp),%r15
  0x00007f75704c6ffa: mov    0x8(%rsp),%r14
  0x00007f75704c6fff: mov    0x10(%rsp),%r13
  0x00007f75704c7004: mov    0x18(%rsp),%r12
  0x00007f75704c7009: mov    0x20(%rsp),%r11
  0x00007f75704c700e: mov    0x28(%rsp),%r10
  0x00007f75704c7013: mov    0x30(%rsp),%r9
  0x00007f75704c7018: mov    0x38(%rsp),%r8
  0x00007f75704c701d: mov    0x40(%rsp),%rdi
  0x00007f75704c7022: mov    0x48(%rsp),%rsi
  0x00007f75704c7027: mov    0x50(%rsp),%rbp
  0x00007f75704c702c: mov    0x60(%rsp),%rbx
  0x00007f75704c7031: mov    0x68(%rsp),%rdx
  0x00007f75704c7036: mov    0x70(%rsp),%rcx
  0x00007f75704c703b: mov    0x78(%rsp),%rax
  0x00007f75704c7040: add    $0x80,%rsp
  0x00007f75704c7047: add    $0x8,%rsp
  0x00007f75704c704b: popfq  
  0x00007f75704c704c: mov    %r13,%rsp
  0x00007f75704c704f: pop    %rax
  0x00007f75704c7050: mov    %rsp,%r13
  0x00007f75704c7053: sub    $0x30,%rsp
  0x00007f75704c7057: mov    %rax,(%rsp)
  0x00007f75704c705b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c7065: mov    %rax,0x20(%rsp)
  0x00007f75704c706a: mov    %rsi,0x18(%rsp)
  0x00007f75704c706f: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c7079: mov    %rax,0x10(%rsp)
  0x00007f75704c707e: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704c7084: mov    0x40(%rbx),%rcx
  0x00007f75704c7088: jmpq   *%rcx

AHE@0x00007f758012c588: 0xbe600000 i2c: 0x00007f75704c7160 c2i: 0x00007f75704c729f c2iUV: 0x00007f75704c7272
i2c argument handler #77 for: static (JF)V (603 bytes generated)
c2i argument handler starts at 0x7f75704c729f
  0x00007f75704c7160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c7164: movabs $0x7f757036e3e0,%r11
  0x00007f75704c716e: cmp    %r11,%rax
  0x00007f75704c7171: jbe    0x00007f75704c718a
  0x00007f75704c7177: movabs $0x7f757046e3e0,%r11
  0x00007f75704c7181: cmp    %r11,%rax
  0x00007f75704c7184: jb     0x00007f75704c724d
  0x00007f75704c718a: movabs $0x7f7570369420,%r11
  0x00007f75704c7194: cmp    %r11,%rax
  0x00007f75704c7197: jbe    0x00007f75704c71b0
  0x00007f75704c719d: movabs $0x7f757036de58,%r11
  0x00007f75704c71a7: cmp    %r11,%rax
  0x00007f75704c71aa: jb     0x00007f75704c724d
  0x00007f75704c71b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c71ba: cmp    %r11,%rax
  0x00007f75704c71bd: jbe    0x00007f75704c71d6
  0x00007f75704c71c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c71cd: cmp    %r11,%rax
  0x00007f75704c71d0: jb     0x00007f75704c724d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c71d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c71db: sub    $0x80,%rsp
  0x00007f75704c71e2: mov    %rax,0x78(%rsp)
  0x00007f75704c71e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c71ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c71f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c71f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c71fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c7200: mov    %rdi,0x40(%rsp)
  0x00007f75704c7205: mov    %r8,0x38(%rsp)
  0x00007f75704c720a: mov    %r9,0x30(%rsp)
  0x00007f75704c720f: mov    %r10,0x28(%rsp)
  0x00007f75704c7214: mov    %r11,0x20(%rsp)
  0x00007f75704c7219: mov    %r12,0x18(%rsp)
  0x00007f75704c721e: mov    %r13,0x10(%rsp)
  0x00007f75704c7223: mov    %r14,0x8(%rsp)
  0x00007f75704c7228: mov    %r15,(%rsp)
  0x00007f75704c722c: movabs $0x7f758592f470,%rdi
  0x00007f75704c7236: movabs $0x7f75704c71d6,%rsi
  0x00007f75704c7240: mov    %rsp,%rdx
  0x00007f75704c7243: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7247: callq  0x00007f75853729fa
  0x00007f75704c724c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c724d: mov    %rsp,%r11
  0x00007f75704c7250: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7254: push   %rax
  0x00007f75704c7255: mov    %r11,%rax
  0x00007f75704c7258: mov    0x50(%rbx),%r11
  0x00007f75704c725c: mov    0x10(%rax),%rsi
  0x00007f75704c7260: vmovss 0x8(%rax),%xmm0
  0x00007f75704c7265: mov    %rbx,0x258(%r15)
  0x00007f75704c726c: mov    %rbx,%rax
  0x00007f75704c726f: jmpq   *%r11
  0x00007f75704c7272: mov    0x8(%rsi),%ebx
  0x00007f75704c7275: shl    $0x3,%rbx
  0x00007f75704c7279: cmp    0x10(%rax),%rbx
  0x00007f75704c727d: mov    0x8(%rax),%rbx
  0x00007f75704c7281: je     0x00007f75704c728c
  0x00007f75704c7287: jmpq   0x00007f757046ec40
  0x00007f75704c728c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c7294: je     0x00007f75704c738f
  0x00007f75704c729a: jmpq   0x00007f757046ec40
  0x00007f75704c729f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c72a7: je     0x00007f75704c738f
  0x00007f75704c72ad: mov    %rsp,%r13
  0x00007f75704c72b0: mov    (%rsp),%rax
  0x00007f75704c72b4: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c72b8: pushfq 
  0x00007f75704c72b9: sub    $0x8,%rsp
  0x00007f75704c72bd: mov    %rsp,-0x28(%rsp)
  0x00007f75704c72c2: sub    $0x80,%rsp
  0x00007f75704c72c9: mov    %rax,0x78(%rsp)
  0x00007f75704c72ce: mov    %rcx,0x70(%rsp)
  0x00007f75704c72d3: mov    %rdx,0x68(%rsp)
  0x00007f75704c72d8: mov    %rbx,0x60(%rsp)
  0x00007f75704c72dd: mov    %rbp,0x50(%rsp)
  0x00007f75704c72e2: mov    %rsi,0x48(%rsp)
  0x00007f75704c72e7: mov    %rdi,0x40(%rsp)
  0x00007f75704c72ec: mov    %r8,0x38(%rsp)
  0x00007f75704c72f1: mov    %r9,0x30(%rsp)
  0x00007f75704c72f6: mov    %r10,0x28(%rsp)
  0x00007f75704c72fb: mov    %r11,0x20(%rsp)
  0x00007f75704c7300: mov    %r12,0x18(%rsp)
  0x00007f75704c7305: mov    %r13,0x10(%rsp)
  0x00007f75704c730a: mov    %r14,0x8(%rsp)
  0x00007f75704c730f: mov    %r15,(%rsp)
  0x00007f75704c7313: sub    $0x200,%rsp
  0x00007f75704c731a: fxsave64 (%rsp)
  0x00007f75704c731f: mov    %rbx,%rdi
  0x00007f75704c7322: mov    %rax,%rsi
  0x00007f75704c7325: callq  0x00007f7585522bca
  0x00007f75704c732a: fxrstor64 (%rsp)
  0x00007f75704c732f: add    $0x200,%rsp
  0x00007f75704c7336: mov    (%rsp),%r15
  0x00007f75704c733a: mov    0x8(%rsp),%r14
  0x00007f75704c733f: mov    0x10(%rsp),%r13
  0x00007f75704c7344: mov    0x18(%rsp),%r12
  0x00007f75704c7349: mov    0x20(%rsp),%r11
  0x00007f75704c734e: mov    0x28(%rsp),%r10
  0x00007f75704c7353: mov    0x30(%rsp),%r9
  0x00007f75704c7358: mov    0x38(%rsp),%r8
  0x00007f75704c735d: mov    0x40(%rsp),%rdi
  0x00007f75704c7362: mov    0x48(%rsp),%rsi
  0x00007f75704c7367: mov    0x50(%rsp),%rbp
  0x00007f75704c736c: mov    0x60(%rsp),%rbx
  0x00007f75704c7371: mov    0x68(%rsp),%rdx
  0x00007f75704c7376: mov    0x70(%rsp),%rcx
  0x00007f75704c737b: mov    0x78(%rsp),%rax
  0x00007f75704c7380: add    $0x80,%rsp
  0x00007f75704c7387: add    $0x8,%rsp
  0x00007f75704c738b: popfq  
  0x00007f75704c738c: mov    %r13,%rsp
  0x00007f75704c738f: pop    %rax
  0x00007f75704c7390: mov    %rsp,%r13
  0x00007f75704c7393: sub    $0x20,%rsp
  0x00007f75704c7397: mov    %rax,(%rsp)
  0x00007f75704c739b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c73a5: mov    %rax,0x18(%rsp)
  0x00007f75704c73aa: mov    %rsi,0x10(%rsp)
  0x00007f75704c73af: vmovss %xmm0,0x8(%rsp)
  0x00007f75704c73b5: mov    0x40(%rbx),%rcx
  0x00007f75704c73b9: jmpq   *%rcx

AHE@0x00007f758012c5d0: 0xaaaaaaaa i2c: 0x00007f75704c7460 c2i: 0x00007f75704c75c0 c2iUV: 0x00007f75704c7593
i2c argument handler #78 for: static (BBBBBBBB)J (654 bytes generated)
c2i argument handler starts at 0x7f75704c75c0
  0x00007f75704c7460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c7464: movabs $0x7f757036e3e0,%r11
  0x00007f75704c746e: cmp    %r11,%rax
  0x00007f75704c7471: jbe    0x00007f75704c748a
  0x00007f75704c7477: movabs $0x7f757046e3e0,%r11
  0x00007f75704c7481: cmp    %r11,%rax
  0x00007f75704c7484: jb     0x00007f75704c754d
  0x00007f75704c748a: movabs $0x7f7570369420,%r11
  0x00007f75704c7494: cmp    %r11,%rax
  0x00007f75704c7497: jbe    0x00007f75704c74b0
  0x00007f75704c749d: movabs $0x7f757036de58,%r11
  0x00007f75704c74a7: cmp    %r11,%rax
  0x00007f75704c74aa: jb     0x00007f75704c754d
  0x00007f75704c74b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c74ba: cmp    %r11,%rax
  0x00007f75704c74bd: jbe    0x00007f75704c74d6
  0x00007f75704c74c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c74cd: cmp    %r11,%rax
  0x00007f75704c74d0: jb     0x00007f75704c754d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c74d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c74db: sub    $0x80,%rsp
  0x00007f75704c74e2: mov    %rax,0x78(%rsp)
  0x00007f75704c74e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c74ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c74f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c74f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c74fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c7500: mov    %rdi,0x40(%rsp)
  0x00007f75704c7505: mov    %r8,0x38(%rsp)
  0x00007f75704c750a: mov    %r9,0x30(%rsp)
  0x00007f75704c750f: mov    %r10,0x28(%rsp)
  0x00007f75704c7514: mov    %r11,0x20(%rsp)
  0x00007f75704c7519: mov    %r12,0x18(%rsp)
  0x00007f75704c751e: mov    %r13,0x10(%rsp)
  0x00007f75704c7523: mov    %r14,0x8(%rsp)
  0x00007f75704c7528: mov    %r15,(%rsp)
  0x00007f75704c752c: movabs $0x7f758592f470,%rdi
  0x00007f75704c7536: movabs $0x7f75704c74d6,%rsi
  0x00007f75704c7540: mov    %rsp,%rdx
  0x00007f75704c7543: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7547: callq  0x00007f75853729fa
  0x00007f75704c754c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c754d: mov    %rsp,%r11
  0x00007f75704c7550: sub    $0x10,%rsp
  0x00007f75704c7554: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7558: push   %rax
  0x00007f75704c7559: mov    %r11,%rax
  0x00007f75704c755c: mov    0x50(%rbx),%r11
  0x00007f75704c7560: mov    0x40(%rax),%esi
  0x00007f75704c7563: mov    0x38(%rax),%edx
  0x00007f75704c7566: mov    0x30(%rax),%ecx
  0x00007f75704c7569: mov    0x28(%rax),%r8d
  0x00007f75704c756d: mov    0x20(%rax),%r9d
  0x00007f75704c7571: mov    0x18(%rax),%edi
  0x00007f75704c7574: mov    0x10(%rax),%r13d
  0x00007f75704c7578: mov    %r13,0x8(%rsp)
  0x00007f75704c757d: mov    0x8(%rax),%r13d
  0x00007f75704c7581: mov    %r13,0x10(%rsp)
  0x00007f75704c7586: mov    %rbx,0x258(%r15)
  0x00007f75704c758d: mov    %rbx,%rax
  0x00007f75704c7590: jmpq   *%r11
  0x00007f75704c7593: mov    0x8(%rsi),%ebx
  0x00007f75704c7596: shl    $0x3,%rbx
  0x00007f75704c759a: cmp    0x10(%rax),%rbx
  0x00007f75704c759e: mov    0x8(%rax),%rbx
  0x00007f75704c75a2: je     0x00007f75704c75ad
  0x00007f75704c75a8: jmpq   0x00007f757046ec40
  0x00007f75704c75ad: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c75b5: je     0x00007f75704c76b0
  0x00007f75704c75bb: jmpq   0x00007f757046ec40
  0x00007f75704c75c0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c75c8: je     0x00007f75704c76b0
  0x00007f75704c75ce: mov    %rsp,%r13
  0x00007f75704c75d1: mov    (%rsp),%rax
  0x00007f75704c75d5: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c75d9: pushfq 
  0x00007f75704c75da: sub    $0x8,%rsp
  0x00007f75704c75de: mov    %rsp,-0x28(%rsp)
  0x00007f75704c75e3: sub    $0x80,%rsp
  0x00007f75704c75ea: mov    %rax,0x78(%rsp)
  0x00007f75704c75ef: mov    %rcx,0x70(%rsp)
  0x00007f75704c75f4: mov    %rdx,0x68(%rsp)
  0x00007f75704c75f9: mov    %rbx,0x60(%rsp)
  0x00007f75704c75fe: mov    %rbp,0x50(%rsp)
  0x00007f75704c7603: mov    %rsi,0x48(%rsp)
  0x00007f75704c7608: mov    %rdi,0x40(%rsp)
  0x00007f75704c760d: mov    %r8,0x38(%rsp)
  0x00007f75704c7612: mov    %r9,0x30(%rsp)
  0x00007f75704c7617: mov    %r10,0x28(%rsp)
  0x00007f75704c761c: mov    %r11,0x20(%rsp)
  0x00007f75704c7621: mov    %r12,0x18(%rsp)
  0x00007f75704c7626: mov    %r13,0x10(%rsp)
  0x00007f75704c762b: mov    %r14,0x8(%rsp)
  0x00007f75704c7630: mov    %r15,(%rsp)
  0x00007f75704c7634: sub    $0x200,%rsp
  0x00007f75704c763b: fxsave64 (%rsp)
  0x00007f75704c7640: mov    %rbx,%rdi
  0x00007f75704c7643: mov    %rax,%rsi
  0x00007f75704c7646: callq  0x00007f7585522bca
  0x00007f75704c764b: fxrstor64 (%rsp)
  0x00007f75704c7650: add    $0x200,%rsp
  0x00007f75704c7657: mov    (%rsp),%r15
  0x00007f75704c765b: mov    0x8(%rsp),%r14
  0x00007f75704c7660: mov    0x10(%rsp),%r13
  0x00007f75704c7665: mov    0x18(%rsp),%r12
  0x00007f75704c766a: mov    0x20(%rsp),%r11
  0x00007f75704c766f: mov    0x28(%rsp),%r10
  0x00007f75704c7674: mov    0x30(%rsp),%r9
  0x00007f75704c7679: mov    0x38(%rsp),%r8
  0x00007f75704c767e: mov    0x40(%rsp),%rdi
  0x00007f75704c7683: mov    0x48(%rsp),%rsi
  0x00007f75704c7688: mov    0x50(%rsp),%rbp
  0x00007f75704c768d: mov    0x60(%rsp),%rbx
  0x00007f75704c7692: mov    0x68(%rsp),%rdx
  0x00007f75704c7697: mov    0x70(%rsp),%rcx
  0x00007f75704c769c: mov    0x78(%rsp),%rax
  0x00007f75704c76a1: add    $0x80,%rsp
  0x00007f75704c76a8: add    $0x8,%rsp
  0x00007f75704c76ac: popfq  
  0x00007f75704c76ad: mov    %r13,%rsp
  0x00007f75704c76b0: pop    %rax
  0x00007f75704c76b1: mov    %rsp,%r13
  0x00007f75704c76b4: sub    $0x50,%rsp
  0x00007f75704c76b8: mov    %rax,(%rsp)
  0x00007f75704c76bc: mov    %esi,0x40(%rsp)
  0x00007f75704c76c0: mov    %edx,0x38(%rsp)
  0x00007f75704c76c4: mov    %ecx,0x30(%rsp)
  0x00007f75704c76c8: mov    %r8d,0x28(%rsp)
  0x00007f75704c76cd: mov    %r9d,0x20(%rsp)
  0x00007f75704c76d2: mov    %edi,0x18(%rsp)
  0x00007f75704c76d6: mov    0x50(%rsp),%eax
  0x00007f75704c76da: mov    %rax,0x10(%rsp)
  0x00007f75704c76df: mov    0x58(%rsp),%eax
  0x00007f75704c76e3: mov    %rax,0x8(%rsp)
  0x00007f75704c76e8: mov    0x40(%rbx),%rcx
  0x00007f75704c76ec: jmpq   *%rcx

AHE@0x00007f758012c618: 0xaaaa0000 i2c: 0x00007f75704c77a0 c2i: 0x00007f75704c78e3 c2iUV: 0x00007f75704c78b6
i2c argument handler #79 for: static (BBBB)I (598 bytes generated)
c2i argument handler starts at 0x7f75704c78e3
  0x00007f75704c77a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c77a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c77ae: cmp    %r11,%rax
  0x00007f75704c77b1: jbe    0x00007f75704c77ca
  0x00007f75704c77b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c77c1: cmp    %r11,%rax
  0x00007f75704c77c4: jb     0x00007f75704c788d
  0x00007f75704c77ca: movabs $0x7f7570369420,%r11
  0x00007f75704c77d4: cmp    %r11,%rax
  0x00007f75704c77d7: jbe    0x00007f75704c77f0
  0x00007f75704c77dd: movabs $0x7f757036de58,%r11
  0x00007f75704c77e7: cmp    %r11,%rax
  0x00007f75704c77ea: jb     0x00007f75704c788d
  0x00007f75704c77f0: movabs $0x7f75704a9820,%r11
  0x00007f75704c77fa: cmp    %r11,%rax
  0x00007f75704c77fd: jbe    0x00007f75704c7816
  0x00007f75704c7803: movabs $0x7f75704af5e0,%r11
  0x00007f75704c780d: cmp    %r11,%rax
  0x00007f75704c7810: jb     0x00007f75704c788d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c7816: mov    %rsp,-0x28(%rsp)
  0x00007f75704c781b: sub    $0x80,%rsp
  0x00007f75704c7822: mov    %rax,0x78(%rsp)
  0x00007f75704c7827: mov    %rcx,0x70(%rsp)
  0x00007f75704c782c: mov    %rdx,0x68(%rsp)
  0x00007f75704c7831: mov    %rbx,0x60(%rsp)
  0x00007f75704c7836: mov    %rbp,0x50(%rsp)
  0x00007f75704c783b: mov    %rsi,0x48(%rsp)
  0x00007f75704c7840: mov    %rdi,0x40(%rsp)
  0x00007f75704c7845: mov    %r8,0x38(%rsp)
  0x00007f75704c784a: mov    %r9,0x30(%rsp)
  0x00007f75704c784f: mov    %r10,0x28(%rsp)
  0x00007f75704c7854: mov    %r11,0x20(%rsp)
  0x00007f75704c7859: mov    %r12,0x18(%rsp)
  0x00007f75704c785e: mov    %r13,0x10(%rsp)
  0x00007f75704c7863: mov    %r14,0x8(%rsp)
  0x00007f75704c7868: mov    %r15,(%rsp)
  0x00007f75704c786c: movabs $0x7f758592f470,%rdi
  0x00007f75704c7876: movabs $0x7f75704c7816,%rsi
  0x00007f75704c7880: mov    %rsp,%rdx
  0x00007f75704c7883: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7887: callq  0x00007f75853729fa
  0x00007f75704c788c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c788d: mov    %rsp,%r11
  0x00007f75704c7890: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7894: push   %rax
  0x00007f75704c7895: mov    %r11,%rax
  0x00007f75704c7898: mov    0x50(%rbx),%r11
  0x00007f75704c789c: mov    0x20(%rax),%esi
  0x00007f75704c789f: mov    0x18(%rax),%edx
  0x00007f75704c78a2: mov    0x10(%rax),%ecx
  0x00007f75704c78a5: mov    0x8(%rax),%r8d
  0x00007f75704c78a9: mov    %rbx,0x258(%r15)
  0x00007f75704c78b0: mov    %rbx,%rax
  0x00007f75704c78b3: jmpq   *%r11
  0x00007f75704c78b6: mov    0x8(%rsi),%ebx
  0x00007f75704c78b9: shl    $0x3,%rbx
  0x00007f75704c78bd: cmp    0x10(%rax),%rbx
  0x00007f75704c78c1: mov    0x8(%rax),%rbx
  0x00007f75704c78c5: je     0x00007f75704c78d0
  0x00007f75704c78cb: jmpq   0x00007f757046ec40
  0x00007f75704c78d0: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c78d8: je     0x00007f75704c79d3
  0x00007f75704c78de: jmpq   0x00007f757046ec40
  0x00007f75704c78e3: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c78eb: je     0x00007f75704c79d3
  0x00007f75704c78f1: mov    %rsp,%r13
  0x00007f75704c78f4: mov    (%rsp),%rax
  0x00007f75704c78f8: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c78fc: pushfq 
  0x00007f75704c78fd: sub    $0x8,%rsp
  0x00007f75704c7901: mov    %rsp,-0x28(%rsp)
  0x00007f75704c7906: sub    $0x80,%rsp
  0x00007f75704c790d: mov    %rax,0x78(%rsp)
  0x00007f75704c7912: mov    %rcx,0x70(%rsp)
  0x00007f75704c7917: mov    %rdx,0x68(%rsp)
  0x00007f75704c791c: mov    %rbx,0x60(%rsp)
  0x00007f75704c7921: mov    %rbp,0x50(%rsp)
  0x00007f75704c7926: mov    %rsi,0x48(%rsp)
  0x00007f75704c792b: mov    %rdi,0x40(%rsp)
  0x00007f75704c7930: mov    %r8,0x38(%rsp)
  0x00007f75704c7935: mov    %r9,0x30(%rsp)
  0x00007f75704c793a: mov    %r10,0x28(%rsp)
  0x00007f75704c793f: mov    %r11,0x20(%rsp)
  0x00007f75704c7944: mov    %r12,0x18(%rsp)
  0x00007f75704c7949: mov    %r13,0x10(%rsp)
  0x00007f75704c794e: mov    %r14,0x8(%rsp)
  0x00007f75704c7953: mov    %r15,(%rsp)
  0x00007f75704c7957: sub    $0x200,%rsp
  0x00007f75704c795e: fxsave64 (%rsp)
  0x00007f75704c7963: mov    %rbx,%rdi
  0x00007f75704c7966: mov    %rax,%rsi
  0x00007f75704c7969: callq  0x00007f7585522bca
  0x00007f75704c796e: fxrstor64 (%rsp)
  0x00007f75704c7973: add    $0x200,%rsp
  0x00007f75704c797a: mov    (%rsp),%r15
  0x00007f75704c797e: mov    0x8(%rsp),%r14
  0x00007f75704c7983: mov    0x10(%rsp),%r13
  0x00007f75704c7988: mov    0x18(%rsp),%r12
  0x00007f75704c798d: mov    0x20(%rsp),%r11
  0x00007f75704c7992: mov    0x28(%rsp),%r10
  0x00007f75704c7997: mov    0x30(%rsp),%r9
  0x00007f75704c799c: mov    0x38(%rsp),%r8
  0x00007f75704c79a1: mov    0x40(%rsp),%rdi
  0x00007f75704c79a6: mov    0x48(%rsp),%rsi
  0x00007f75704c79ab: mov    0x50(%rsp),%rbp
  0x00007f75704c79b0: mov    0x60(%rsp),%rbx
  0x00007f75704c79b5: mov    0x68(%rsp),%rdx
  0x00007f75704c79ba: mov    0x70(%rsp),%rcx
  0x00007f75704c79bf: mov    0x78(%rsp),%rax
  0x00007f75704c79c4: add    $0x80,%rsp
  0x00007f75704c79cb: add    $0x8,%rsp
  0x00007f75704c79cf: popfq  
  0x00007f75704c79d0: mov    %r13,%rsp
  0x00007f75704c79d3: pop    %rax
  0x00007f75704c79d4: mov    %rsp,%r13
  0x00007f75704c79d7: sub    $0x30,%rsp
  0x00007f75704c79db: mov    %rax,(%rsp)
  0x00007f75704c79df: mov    %esi,0x20(%rsp)
  0x00007f75704c79e3: mov    %edx,0x18(%rsp)
  0x00007f75704c79e7: mov    %ecx,0x10(%rsp)
  0x00007f75704c79eb: mov    %r8d,0x8(%rsp)
  0x00007f75704c79f0: mov    0x40(%rbx),%rcx
  0x00007f75704c79f4: jmpq   *%rcx

AHE@0x00007f758012c660: 0xbe7ea000 i2c: 0x00007f75704c7aa0 c2i: 0x00007f75704c7be2 c2iUV: 0x00007f75704c7bb5
i2c argument handler #80 for: static (JDZ)V (625 bytes generated)
c2i argument handler starts at 0x7f75704c7be2
  0x00007f75704c7aa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c7aa4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c7aae: cmp    %r11,%rax
  0x00007f75704c7ab1: jbe    0x00007f75704c7aca
  0x00007f75704c7ab7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c7ac1: cmp    %r11,%rax
  0x00007f75704c7ac4: jb     0x00007f75704c7b8d
  0x00007f75704c7aca: movabs $0x7f7570369420,%r11
  0x00007f75704c7ad4: cmp    %r11,%rax
  0x00007f75704c7ad7: jbe    0x00007f75704c7af0
  0x00007f75704c7add: movabs $0x7f757036de58,%r11
  0x00007f75704c7ae7: cmp    %r11,%rax
  0x00007f75704c7aea: jb     0x00007f75704c7b8d
  0x00007f75704c7af0: movabs $0x7f75704a9820,%r11
  0x00007f75704c7afa: cmp    %r11,%rax
  0x00007f75704c7afd: jbe    0x00007f75704c7b16
  0x00007f75704c7b03: movabs $0x7f75704af5e0,%r11
  0x00007f75704c7b0d: cmp    %r11,%rax
  0x00007f75704c7b10: jb     0x00007f75704c7b8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c7b16: mov    %rsp,-0x28(%rsp)
  0x00007f75704c7b1b: sub    $0x80,%rsp
  0x00007f75704c7b22: mov    %rax,0x78(%rsp)
  0x00007f75704c7b27: mov    %rcx,0x70(%rsp)
  0x00007f75704c7b2c: mov    %rdx,0x68(%rsp)
  0x00007f75704c7b31: mov    %rbx,0x60(%rsp)
  0x00007f75704c7b36: mov    %rbp,0x50(%rsp)
  0x00007f75704c7b3b: mov    %rsi,0x48(%rsp)
  0x00007f75704c7b40: mov    %rdi,0x40(%rsp)
  0x00007f75704c7b45: mov    %r8,0x38(%rsp)
  0x00007f75704c7b4a: mov    %r9,0x30(%rsp)
  0x00007f75704c7b4f: mov    %r10,0x28(%rsp)
  0x00007f75704c7b54: mov    %r11,0x20(%rsp)
  0x00007f75704c7b59: mov    %r12,0x18(%rsp)
  0x00007f75704c7b5e: mov    %r13,0x10(%rsp)
  0x00007f75704c7b63: mov    %r14,0x8(%rsp)
  0x00007f75704c7b68: mov    %r15,(%rsp)
  0x00007f75704c7b6c: movabs $0x7f758592f470,%rdi
  0x00007f75704c7b76: movabs $0x7f75704c7b16,%rsi
  0x00007f75704c7b80: mov    %rsp,%rdx
  0x00007f75704c7b83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7b87: callq  0x00007f75853729fa
  0x00007f75704c7b8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c7b8d: mov    %rsp,%r11
  0x00007f75704c7b90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7b94: push   %rax
  0x00007f75704c7b95: mov    %r11,%rax
  0x00007f75704c7b98: mov    0x50(%rbx),%r11
  0x00007f75704c7b9c: mov    0x20(%rax),%rsi
  0x00007f75704c7ba0: vmovsd 0x10(%rax),%xmm0
  0x00007f75704c7ba5: mov    0x8(%rax),%edx
  0x00007f75704c7ba8: mov    %rbx,0x258(%r15)
  0x00007f75704c7baf: mov    %rbx,%rax
  0x00007f75704c7bb2: jmpq   *%r11
  0x00007f75704c7bb5: mov    0x8(%rsi),%ebx
  0x00007f75704c7bb8: shl    $0x3,%rbx
  0x00007f75704c7bbc: cmp    0x10(%rax),%rbx
  0x00007f75704c7bc0: mov    0x8(%rax),%rbx
  0x00007f75704c7bc4: je     0x00007f75704c7bcf
  0x00007f75704c7bca: jmpq   0x00007f757046ec40
  0x00007f75704c7bcf: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c7bd7: je     0x00007f75704c7cd2
  0x00007f75704c7bdd: jmpq   0x00007f757046ec40
  0x00007f75704c7be2: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c7bea: je     0x00007f75704c7cd2
  0x00007f75704c7bf0: mov    %rsp,%r13
  0x00007f75704c7bf3: mov    (%rsp),%rax
  0x00007f75704c7bf7: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7bfb: pushfq 
  0x00007f75704c7bfc: sub    $0x8,%rsp
  0x00007f75704c7c00: mov    %rsp,-0x28(%rsp)
  0x00007f75704c7c05: sub    $0x80,%rsp
  0x00007f75704c7c0c: mov    %rax,0x78(%rsp)
  0x00007f75704c7c11: mov    %rcx,0x70(%rsp)
  0x00007f75704c7c16: mov    %rdx,0x68(%rsp)
  0x00007f75704c7c1b: mov    %rbx,0x60(%rsp)
  0x00007f75704c7c20: mov    %rbp,0x50(%rsp)
  0x00007f75704c7c25: mov    %rsi,0x48(%rsp)
  0x00007f75704c7c2a: mov    %rdi,0x40(%rsp)
  0x00007f75704c7c2f: mov    %r8,0x38(%rsp)
  0x00007f75704c7c34: mov    %r9,0x30(%rsp)
  0x00007f75704c7c39: mov    %r10,0x28(%rsp)
  0x00007f75704c7c3e: mov    %r11,0x20(%rsp)
  0x00007f75704c7c43: mov    %r12,0x18(%rsp)
  0x00007f75704c7c48: mov    %r13,0x10(%rsp)
  0x00007f75704c7c4d: mov    %r14,0x8(%rsp)
  0x00007f75704c7c52: mov    %r15,(%rsp)
  0x00007f75704c7c56: sub    $0x200,%rsp
  0x00007f75704c7c5d: fxsave64 (%rsp)
  0x00007f75704c7c62: mov    %rbx,%rdi
  0x00007f75704c7c65: mov    %rax,%rsi
  0x00007f75704c7c68: callq  0x00007f7585522bca
  0x00007f75704c7c6d: fxrstor64 (%rsp)
  0x00007f75704c7c72: add    $0x200,%rsp
  0x00007f75704c7c79: mov    (%rsp),%r15
  0x00007f75704c7c7d: mov    0x8(%rsp),%r14
  0x00007f75704c7c82: mov    0x10(%rsp),%r13
  0x00007f75704c7c87: mov    0x18(%rsp),%r12
  0x00007f75704c7c8c: mov    0x20(%rsp),%r11
  0x00007f75704c7c91: mov    0x28(%rsp),%r10
  0x00007f75704c7c96: mov    0x30(%rsp),%r9
  0x00007f75704c7c9b: mov    0x38(%rsp),%r8
  0x00007f75704c7ca0: mov    0x40(%rsp),%rdi
  0x00007f75704c7ca5: mov    0x48(%rsp),%rsi
  0x00007f75704c7caa: mov    0x50(%rsp),%rbp
  0x00007f75704c7caf: mov    0x60(%rsp),%rbx
  0x00007f75704c7cb4: mov    0x68(%rsp),%rdx
  0x00007f75704c7cb9: mov    0x70(%rsp),%rcx
  0x00007f75704c7cbe: mov    0x78(%rsp),%rax
  0x00007f75704c7cc3: add    $0x80,%rsp
  0x00007f75704c7cca: add    $0x8,%rsp
  0x00007f75704c7cce: popfq  
  0x00007f75704c7ccf: mov    %r13,%rsp
  0x00007f75704c7cd2: pop    %rax
  0x00007f75704c7cd3: mov    %rsp,%r13
  0x00007f75704c7cd6: sub    $0x30,%rsp
  0x00007f75704c7cda: mov    %rax,(%rsp)
  0x00007f75704c7cde: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c7ce8: mov    %rax,0x28(%rsp)
  0x00007f75704c7ced: mov    %rsi,0x20(%rsp)
  0x00007f75704c7cf2: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c7cfc: mov    %rax,0x18(%rsp)
  0x00007f75704c7d01: vmovsd %xmm0,0x10(%rsp)
  0x00007f75704c7d07: mov    %edx,0x8(%rsp)
  0x00007f75704c7d0b: mov    0x40(%rbx),%rcx
  0x00007f75704c7d0f: jmpq   *%rcx

AHE@0x00007f758012c6a8: 0xba7ea000 i2c: 0x00007f75704c7de0 c2i: 0x00007f75704c7f25 c2iUV: 0x00007f75704c7ef8
i2c argument handler #81 for: static (Ljava/nio/ByteBuffer;IDZ)V (617 bytes generated)
c2i argument handler starts at 0x7f75704c7f25
  0x00007f75704c7de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c7de4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c7dee: cmp    %r11,%rax
  0x00007f75704c7df1: jbe    0x00007f75704c7e0a
  0x00007f75704c7df7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c7e01: cmp    %r11,%rax
  0x00007f75704c7e04: jb     0x00007f75704c7ecd
  0x00007f75704c7e0a: movabs $0x7f7570369420,%r11
  0x00007f75704c7e14: cmp    %r11,%rax
  0x00007f75704c7e17: jbe    0x00007f75704c7e30
  0x00007f75704c7e1d: movabs $0x7f757036de58,%r11
  0x00007f75704c7e27: cmp    %r11,%rax
  0x00007f75704c7e2a: jb     0x00007f75704c7ecd
  0x00007f75704c7e30: movabs $0x7f75704a9820,%r11
  0x00007f75704c7e3a: cmp    %r11,%rax
  0x00007f75704c7e3d: jbe    0x00007f75704c7e56
  0x00007f75704c7e43: movabs $0x7f75704af5e0,%r11
  0x00007f75704c7e4d: cmp    %r11,%rax
  0x00007f75704c7e50: jb     0x00007f75704c7ecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c7e56: mov    %rsp,-0x28(%rsp)
  0x00007f75704c7e5b: sub    $0x80,%rsp
  0x00007f75704c7e62: mov    %rax,0x78(%rsp)
  0x00007f75704c7e67: mov    %rcx,0x70(%rsp)
  0x00007f75704c7e6c: mov    %rdx,0x68(%rsp)
  0x00007f75704c7e71: mov    %rbx,0x60(%rsp)
  0x00007f75704c7e76: mov    %rbp,0x50(%rsp)
  0x00007f75704c7e7b: mov    %rsi,0x48(%rsp)
  0x00007f75704c7e80: mov    %rdi,0x40(%rsp)
  0x00007f75704c7e85: mov    %r8,0x38(%rsp)
  0x00007f75704c7e8a: mov    %r9,0x30(%rsp)
  0x00007f75704c7e8f: mov    %r10,0x28(%rsp)
  0x00007f75704c7e94: mov    %r11,0x20(%rsp)
  0x00007f75704c7e99: mov    %r12,0x18(%rsp)
  0x00007f75704c7e9e: mov    %r13,0x10(%rsp)
  0x00007f75704c7ea3: mov    %r14,0x8(%rsp)
  0x00007f75704c7ea8: mov    %r15,(%rsp)
  0x00007f75704c7eac: movabs $0x7f758592f470,%rdi
  0x00007f75704c7eb6: movabs $0x7f75704c7e56,%rsi
  0x00007f75704c7ec0: mov    %rsp,%rdx
  0x00007f75704c7ec3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7ec7: callq  0x00007f75853729fa
  0x00007f75704c7ecc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c7ecd: mov    %rsp,%r11
  0x00007f75704c7ed0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7ed4: push   %rax
  0x00007f75704c7ed5: mov    %r11,%rax
  0x00007f75704c7ed8: mov    0x50(%rbx),%r11
  0x00007f75704c7edc: mov    0x28(%rax),%rsi
  0x00007f75704c7ee0: mov    0x20(%rax),%edx
  0x00007f75704c7ee3: vmovsd 0x10(%rax),%xmm0
  0x00007f75704c7ee8: mov    0x8(%rax),%ecx
  0x00007f75704c7eeb: mov    %rbx,0x258(%r15)
  0x00007f75704c7ef2: mov    %rbx,%rax
  0x00007f75704c7ef5: jmpq   *%r11
  0x00007f75704c7ef8: mov    0x8(%rsi),%ebx
  0x00007f75704c7efb: shl    $0x3,%rbx
  0x00007f75704c7eff: cmp    0x10(%rax),%rbx
  0x00007f75704c7f03: mov    0x8(%rax),%rbx
  0x00007f75704c7f07: je     0x00007f75704c7f12
  0x00007f75704c7f0d: jmpq   0x00007f757046ec40
  0x00007f75704c7f12: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c7f1a: je     0x00007f75704c8015
  0x00007f75704c7f20: jmpq   0x00007f757046ec40
  0x00007f75704c7f25: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c7f2d: je     0x00007f75704c8015
  0x00007f75704c7f33: mov    %rsp,%r13
  0x00007f75704c7f36: mov    (%rsp),%rax
  0x00007f75704c7f3a: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c7f3e: pushfq 
  0x00007f75704c7f3f: sub    $0x8,%rsp
  0x00007f75704c7f43: mov    %rsp,-0x28(%rsp)
  0x00007f75704c7f48: sub    $0x80,%rsp
  0x00007f75704c7f4f: mov    %rax,0x78(%rsp)
  0x00007f75704c7f54: mov    %rcx,0x70(%rsp)
  0x00007f75704c7f59: mov    %rdx,0x68(%rsp)
  0x00007f75704c7f5e: mov    %rbx,0x60(%rsp)
  0x00007f75704c7f63: mov    %rbp,0x50(%rsp)
  0x00007f75704c7f68: mov    %rsi,0x48(%rsp)
  0x00007f75704c7f6d: mov    %rdi,0x40(%rsp)
  0x00007f75704c7f72: mov    %r8,0x38(%rsp)
  0x00007f75704c7f77: mov    %r9,0x30(%rsp)
  0x00007f75704c7f7c: mov    %r10,0x28(%rsp)
  0x00007f75704c7f81: mov    %r11,0x20(%rsp)
  0x00007f75704c7f86: mov    %r12,0x18(%rsp)
  0x00007f75704c7f8b: mov    %r13,0x10(%rsp)
  0x00007f75704c7f90: mov    %r14,0x8(%rsp)
  0x00007f75704c7f95: mov    %r15,(%rsp)
  0x00007f75704c7f99: sub    $0x200,%rsp
  0x00007f75704c7fa0: fxsave64 (%rsp)
  0x00007f75704c7fa5: mov    %rbx,%rdi
  0x00007f75704c7fa8: mov    %rax,%rsi
  0x00007f75704c7fab: callq  0x00007f7585522bca
  0x00007f75704c7fb0: fxrstor64 (%rsp)
  0x00007f75704c7fb5: add    $0x200,%rsp
  0x00007f75704c7fbc: mov    (%rsp),%r15
  0x00007f75704c7fc0: mov    0x8(%rsp),%r14
  0x00007f75704c7fc5: mov    0x10(%rsp),%r13
  0x00007f75704c7fca: mov    0x18(%rsp),%r12
  0x00007f75704c7fcf: mov    0x20(%rsp),%r11
  0x00007f75704c7fd4: mov    0x28(%rsp),%r10
  0x00007f75704c7fd9: mov    0x30(%rsp),%r9
  0x00007f75704c7fde: mov    0x38(%rsp),%r8
  0x00007f75704c7fe3: mov    0x40(%rsp),%rdi
  0x00007f75704c7fe8: mov    0x48(%rsp),%rsi
  0x00007f75704c7fed: mov    0x50(%rsp),%rbp
  0x00007f75704c7ff2: mov    0x60(%rsp),%rbx
  0x00007f75704c7ff7: mov    0x68(%rsp),%rdx
  0x00007f75704c7ffc: mov    0x70(%rsp),%rcx
  0x00007f75704c8001: mov    0x78(%rsp),%rax
  0x00007f75704c8006: add    $0x80,%rsp
  0x00007f75704c800d: add    $0x8,%rsp
  0x00007f75704c8011: popfq  
  0x00007f75704c8012: mov    %r13,%rsp
  0x00007f75704c8015: pop    %rax
  0x00007f75704c8016: mov    %rsp,%r13
  0x00007f75704c8019: sub    $0x30,%rsp
  0x00007f75704c801d: mov    %rax,(%rsp)
  0x00007f75704c8021: mov    %rsi,0x28(%rsp)
  0x00007f75704c8026: mov    %edx,0x20(%rsp)
  0x00007f75704c802a: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704c8034: mov    %rax,0x18(%rsp)
  0x00007f75704c8039: vmovsd %xmm0,0x10(%rsp)
  0x00007f75704c803f: mov    %ecx,0x8(%rsp)
  0x00007f75704c8043: mov    0x40(%rbx),%rcx
  0x00007f75704c8047: jmpq   *%rcx

AHE@0x00007f758012c6f0: 0xbe6a0000 i2c: 0x00007f75704c8120 c2i: 0x00007f75704c8262 c2iUV: 0x00007f75704c8235
i2c argument handler #82 for: static (JFZ)V (610 bytes generated)
c2i argument handler starts at 0x7f75704c8262
  0x00007f75704c8120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c8124: movabs $0x7f757036e3e0,%r11
  0x00007f75704c812e: cmp    %r11,%rax
  0x00007f75704c8131: jbe    0x00007f75704c814a
  0x00007f75704c8137: movabs $0x7f757046e3e0,%r11
  0x00007f75704c8141: cmp    %r11,%rax
  0x00007f75704c8144: jb     0x00007f75704c820d
  0x00007f75704c814a: movabs $0x7f7570369420,%r11
  0x00007f75704c8154: cmp    %r11,%rax
  0x00007f75704c8157: jbe    0x00007f75704c8170
  0x00007f75704c815d: movabs $0x7f757036de58,%r11
  0x00007f75704c8167: cmp    %r11,%rax
  0x00007f75704c816a: jb     0x00007f75704c820d
  0x00007f75704c8170: movabs $0x7f75704a9820,%r11
  0x00007f75704c817a: cmp    %r11,%rax
  0x00007f75704c817d: jbe    0x00007f75704c8196
  0x00007f75704c8183: movabs $0x7f75704af5e0,%r11
  0x00007f75704c818d: cmp    %r11,%rax
  0x00007f75704c8190: jb     0x00007f75704c820d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c8196: mov    %rsp,-0x28(%rsp)
  0x00007f75704c819b: sub    $0x80,%rsp
  0x00007f75704c81a2: mov    %rax,0x78(%rsp)
  0x00007f75704c81a7: mov    %rcx,0x70(%rsp)
  0x00007f75704c81ac: mov    %rdx,0x68(%rsp)
  0x00007f75704c81b1: mov    %rbx,0x60(%rsp)
  0x00007f75704c81b6: mov    %rbp,0x50(%rsp)
  0x00007f75704c81bb: mov    %rsi,0x48(%rsp)
  0x00007f75704c81c0: mov    %rdi,0x40(%rsp)
  0x00007f75704c81c5: mov    %r8,0x38(%rsp)
  0x00007f75704c81ca: mov    %r9,0x30(%rsp)
  0x00007f75704c81cf: mov    %r10,0x28(%rsp)
  0x00007f75704c81d4: mov    %r11,0x20(%rsp)
  0x00007f75704c81d9: mov    %r12,0x18(%rsp)
  0x00007f75704c81de: mov    %r13,0x10(%rsp)
  0x00007f75704c81e3: mov    %r14,0x8(%rsp)
  0x00007f75704c81e8: mov    %r15,(%rsp)
  0x00007f75704c81ec: movabs $0x7f758592f470,%rdi
  0x00007f75704c81f6: movabs $0x7f75704c8196,%rsi
  0x00007f75704c8200: mov    %rsp,%rdx
  0x00007f75704c8203: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8207: callq  0x00007f75853729fa
  0x00007f75704c820c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c820d: mov    %rsp,%r11
  0x00007f75704c8210: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8214: push   %rax
  0x00007f75704c8215: mov    %r11,%rax
  0x00007f75704c8218: mov    0x50(%rbx),%r11
  0x00007f75704c821c: mov    0x18(%rax),%rsi
  0x00007f75704c8220: vmovss 0x10(%rax),%xmm0
  0x00007f75704c8225: mov    0x8(%rax),%edx
  0x00007f75704c8228: mov    %rbx,0x258(%r15)
  0x00007f75704c822f: mov    %rbx,%rax
  0x00007f75704c8232: jmpq   *%r11
  0x00007f75704c8235: mov    0x8(%rsi),%ebx
  0x00007f75704c8238: shl    $0x3,%rbx
  0x00007f75704c823c: cmp    0x10(%rax),%rbx
  0x00007f75704c8240: mov    0x8(%rax),%rbx
  0x00007f75704c8244: je     0x00007f75704c824f
  0x00007f75704c824a: jmpq   0x00007f757046ec40
  0x00007f75704c824f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c8257: je     0x00007f75704c8352
  0x00007f75704c825d: jmpq   0x00007f757046ec40
  0x00007f75704c8262: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c826a: je     0x00007f75704c8352
  0x00007f75704c8270: mov    %rsp,%r13
  0x00007f75704c8273: mov    (%rsp),%rax
  0x00007f75704c8277: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c827b: pushfq 
  0x00007f75704c827c: sub    $0x8,%rsp
  0x00007f75704c8280: mov    %rsp,-0x28(%rsp)
  0x00007f75704c8285: sub    $0x80,%rsp
  0x00007f75704c828c: mov    %rax,0x78(%rsp)
  0x00007f75704c8291: mov    %rcx,0x70(%rsp)
  0x00007f75704c8296: mov    %rdx,0x68(%rsp)
  0x00007f75704c829b: mov    %rbx,0x60(%rsp)
  0x00007f75704c82a0: mov    %rbp,0x50(%rsp)
  0x00007f75704c82a5: mov    %rsi,0x48(%rsp)
  0x00007f75704c82aa: mov    %rdi,0x40(%rsp)
  0x00007f75704c82af: mov    %r8,0x38(%rsp)
  0x00007f75704c82b4: mov    %r9,0x30(%rsp)
  0x00007f75704c82b9: mov    %r10,0x28(%rsp)
  0x00007f75704c82be: mov    %r11,0x20(%rsp)
  0x00007f75704c82c3: mov    %r12,0x18(%rsp)
  0x00007f75704c82c8: mov    %r13,0x10(%rsp)
  0x00007f75704c82cd: mov    %r14,0x8(%rsp)
  0x00007f75704c82d2: mov    %r15,(%rsp)
  0x00007f75704c82d6: sub    $0x200,%rsp
  0x00007f75704c82dd: fxsave64 (%rsp)
  0x00007f75704c82e2: mov    %rbx,%rdi
  0x00007f75704c82e5: mov    %rax,%rsi
  0x00007f75704c82e8: callq  0x00007f7585522bca
  0x00007f75704c82ed: fxrstor64 (%rsp)
  0x00007f75704c82f2: add    $0x200,%rsp
  0x00007f75704c82f9: mov    (%rsp),%r15
  0x00007f75704c82fd: mov    0x8(%rsp),%r14
  0x00007f75704c8302: mov    0x10(%rsp),%r13
  0x00007f75704c8307: mov    0x18(%rsp),%r12
  0x00007f75704c830c: mov    0x20(%rsp),%r11
  0x00007f75704c8311: mov    0x28(%rsp),%r10
  0x00007f75704c8316: mov    0x30(%rsp),%r9
  0x00007f75704c831b: mov    0x38(%rsp),%r8
  0x00007f75704c8320: mov    0x40(%rsp),%rdi
  0x00007f75704c8325: mov    0x48(%rsp),%rsi
  0x00007f75704c832a: mov    0x50(%rsp),%rbp
  0x00007f75704c832f: mov    0x60(%rsp),%rbx
  0x00007f75704c8334: mov    0x68(%rsp),%rdx
  0x00007f75704c8339: mov    0x70(%rsp),%rcx
  0x00007f75704c833e: mov    0x78(%rsp),%rax
  0x00007f75704c8343: add    $0x80,%rsp
  0x00007f75704c834a: add    $0x8,%rsp
  0x00007f75704c834e: popfq  
  0x00007f75704c834f: mov    %r13,%rsp
  0x00007f75704c8352: pop    %rax
  0x00007f75704c8353: mov    %rsp,%r13
  0x00007f75704c8356: sub    $0x30,%rsp
  0x00007f75704c835a: mov    %rax,(%rsp)
  0x00007f75704c835e: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c8368: mov    %rax,0x20(%rsp)
  0x00007f75704c836d: mov    %rsi,0x18(%rsp)
  0x00007f75704c8372: vmovss %xmm0,0x10(%rsp)
  0x00007f75704c8378: mov    %edx,0x8(%rsp)
  0x00007f75704c837c: mov    0x40(%rbx),%rcx
  0x00007f75704c8380: jmpq   *%rcx

AHE@0x00007f758012c738: 0xba6a0000 i2c: 0x00007f75704c8460 c2i: 0x00007f75704c85a5 c2iUV: 0x00007f75704c8578
i2c argument handler #83 for: static (Ljava/nio/ByteBuffer;IFZ)V (602 bytes generated)
c2i argument handler starts at 0x7f75704c85a5
  0x00007f75704c8460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c8464: movabs $0x7f757036e3e0,%r11
  0x00007f75704c846e: cmp    %r11,%rax
  0x00007f75704c8471: jbe    0x00007f75704c848a
  0x00007f75704c8477: movabs $0x7f757046e3e0,%r11
  0x00007f75704c8481: cmp    %r11,%rax
  0x00007f75704c8484: jb     0x00007f75704c854d
  0x00007f75704c848a: movabs $0x7f7570369420,%r11
  0x00007f75704c8494: cmp    %r11,%rax
  0x00007f75704c8497: jbe    0x00007f75704c84b0
  0x00007f75704c849d: movabs $0x7f757036de58,%r11
  0x00007f75704c84a7: cmp    %r11,%rax
  0x00007f75704c84aa: jb     0x00007f75704c854d
  0x00007f75704c84b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c84ba: cmp    %r11,%rax
  0x00007f75704c84bd: jbe    0x00007f75704c84d6
  0x00007f75704c84c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c84cd: cmp    %r11,%rax
  0x00007f75704c84d0: jb     0x00007f75704c854d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c84d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c84db: sub    $0x80,%rsp
  0x00007f75704c84e2: mov    %rax,0x78(%rsp)
  0x00007f75704c84e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c84ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c84f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c84f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c84fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c8500: mov    %rdi,0x40(%rsp)
  0x00007f75704c8505: mov    %r8,0x38(%rsp)
  0x00007f75704c850a: mov    %r9,0x30(%rsp)
  0x00007f75704c850f: mov    %r10,0x28(%rsp)
  0x00007f75704c8514: mov    %r11,0x20(%rsp)
  0x00007f75704c8519: mov    %r12,0x18(%rsp)
  0x00007f75704c851e: mov    %r13,0x10(%rsp)
  0x00007f75704c8523: mov    %r14,0x8(%rsp)
  0x00007f75704c8528: mov    %r15,(%rsp)
  0x00007f75704c852c: movabs $0x7f758592f470,%rdi
  0x00007f75704c8536: movabs $0x7f75704c84d6,%rsi
  0x00007f75704c8540: mov    %rsp,%rdx
  0x00007f75704c8543: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8547: callq  0x00007f75853729fa
  0x00007f75704c854c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c854d: mov    %rsp,%r11
  0x00007f75704c8550: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8554: push   %rax
  0x00007f75704c8555: mov    %r11,%rax
  0x00007f75704c8558: mov    0x50(%rbx),%r11
  0x00007f75704c855c: mov    0x20(%rax),%rsi
  0x00007f75704c8560: mov    0x18(%rax),%edx
  0x00007f75704c8563: vmovss 0x10(%rax),%xmm0
  0x00007f75704c8568: mov    0x8(%rax),%ecx
  0x00007f75704c856b: mov    %rbx,0x258(%r15)
  0x00007f75704c8572: mov    %rbx,%rax
  0x00007f75704c8575: jmpq   *%r11
  0x00007f75704c8578: mov    0x8(%rsi),%ebx
  0x00007f75704c857b: shl    $0x3,%rbx
  0x00007f75704c857f: cmp    0x10(%rax),%rbx
  0x00007f75704c8583: mov    0x8(%rax),%rbx
  0x00007f75704c8587: je     0x00007f75704c8592
  0x00007f75704c858d: jmpq   0x00007f757046ec40
  0x00007f75704c8592: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c859a: je     0x00007f75704c8695
  0x00007f75704c85a0: jmpq   0x00007f757046ec40
  0x00007f75704c85a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c85ad: je     0x00007f75704c8695
  0x00007f75704c85b3: mov    %rsp,%r13
  0x00007f75704c85b6: mov    (%rsp),%rax
  0x00007f75704c85ba: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c85be: pushfq 
  0x00007f75704c85bf: sub    $0x8,%rsp
  0x00007f75704c85c3: mov    %rsp,-0x28(%rsp)
  0x00007f75704c85c8: sub    $0x80,%rsp
  0x00007f75704c85cf: mov    %rax,0x78(%rsp)
  0x00007f75704c85d4: mov    %rcx,0x70(%rsp)
  0x00007f75704c85d9: mov    %rdx,0x68(%rsp)
  0x00007f75704c85de: mov    %rbx,0x60(%rsp)
  0x00007f75704c85e3: mov    %rbp,0x50(%rsp)
  0x00007f75704c85e8: mov    %rsi,0x48(%rsp)
  0x00007f75704c85ed: mov    %rdi,0x40(%rsp)
  0x00007f75704c85f2: mov    %r8,0x38(%rsp)
  0x00007f75704c85f7: mov    %r9,0x30(%rsp)
  0x00007f75704c85fc: mov    %r10,0x28(%rsp)
  0x00007f75704c8601: mov    %r11,0x20(%rsp)
  0x00007f75704c8606: mov    %r12,0x18(%rsp)
  0x00007f75704c860b: mov    %r13,0x10(%rsp)
  0x00007f75704c8610: mov    %r14,0x8(%rsp)
  0x00007f75704c8615: mov    %r15,(%rsp)
  0x00007f75704c8619: sub    $0x200,%rsp
  0x00007f75704c8620: fxsave64 (%rsp)
  0x00007f75704c8625: mov    %rbx,%rdi
  0x00007f75704c8628: mov    %rax,%rsi
  0x00007f75704c862b: callq  0x00007f7585522bca
  0x00007f75704c8630: fxrstor64 (%rsp)
  0x00007f75704c8635: add    $0x200,%rsp
  0x00007f75704c863c: mov    (%rsp),%r15
  0x00007f75704c8640: mov    0x8(%rsp),%r14
  0x00007f75704c8645: mov    0x10(%rsp),%r13
  0x00007f75704c864a: mov    0x18(%rsp),%r12
  0x00007f75704c864f: mov    0x20(%rsp),%r11
  0x00007f75704c8654: mov    0x28(%rsp),%r10
  0x00007f75704c8659: mov    0x30(%rsp),%r9
  0x00007f75704c865e: mov    0x38(%rsp),%r8
  0x00007f75704c8663: mov    0x40(%rsp),%rdi
  0x00007f75704c8668: mov    0x48(%rsp),%rsi
  0x00007f75704c866d: mov    0x50(%rsp),%rbp
  0x00007f75704c8672: mov    0x60(%rsp),%rbx
  0x00007f75704c8677: mov    0x68(%rsp),%rdx
  0x00007f75704c867c: mov    0x70(%rsp),%rcx
  0x00007f75704c8681: mov    0x78(%rsp),%rax
  0x00007f75704c8686: add    $0x80,%rsp
  0x00007f75704c868d: add    $0x8,%rsp
  0x00007f75704c8691: popfq  
  0x00007f75704c8692: mov    %r13,%rsp
  0x00007f75704c8695: pop    %rax
  0x00007f75704c8696: mov    %rsp,%r13
  0x00007f75704c8699: sub    $0x30,%rsp
  0x00007f75704c869d: mov    %rax,(%rsp)
  0x00007f75704c86a1: mov    %rsi,0x20(%rsp)
  0x00007f75704c86a6: mov    %edx,0x18(%rsp)
  0x00007f75704c86aa: vmovss %xmm0,0x10(%rsp)
  0x00007f75704c86b0: mov    %ecx,0x8(%rsp)
  0x00007f75704c86b4: mov    0x40(%rbx),%rcx
  0x00007f75704c86b8: jmpq   *%rcx

AHE@0x00007f758012c780: 0xbebea000 i2c: 0x00007f75704c8760 c2i: 0x00007f75704c88a1 c2iUV: 0x00007f75704c8874
i2c argument handler #84 for: static (JJZ)V (623 bytes generated)
c2i argument handler starts at 0x7f75704c88a1
  0x00007f75704c8760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c8764: movabs $0x7f757036e3e0,%r11
  0x00007f75704c876e: cmp    %r11,%rax
  0x00007f75704c8771: jbe    0x00007f75704c878a
  0x00007f75704c8777: movabs $0x7f757046e3e0,%r11
  0x00007f75704c8781: cmp    %r11,%rax
  0x00007f75704c8784: jb     0x00007f75704c884d
  0x00007f75704c878a: movabs $0x7f7570369420,%r11
  0x00007f75704c8794: cmp    %r11,%rax
  0x00007f75704c8797: jbe    0x00007f75704c87b0
  0x00007f75704c879d: movabs $0x7f757036de58,%r11
  0x00007f75704c87a7: cmp    %r11,%rax
  0x00007f75704c87aa: jb     0x00007f75704c884d
  0x00007f75704c87b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c87ba: cmp    %r11,%rax
  0x00007f75704c87bd: jbe    0x00007f75704c87d6
  0x00007f75704c87c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c87cd: cmp    %r11,%rax
  0x00007f75704c87d0: jb     0x00007f75704c884d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c87d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c87db: sub    $0x80,%rsp
  0x00007f75704c87e2: mov    %rax,0x78(%rsp)
  0x00007f75704c87e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c87ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c87f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c87f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c87fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c8800: mov    %rdi,0x40(%rsp)
  0x00007f75704c8805: mov    %r8,0x38(%rsp)
  0x00007f75704c880a: mov    %r9,0x30(%rsp)
  0x00007f75704c880f: mov    %r10,0x28(%rsp)
  0x00007f75704c8814: mov    %r11,0x20(%rsp)
  0x00007f75704c8819: mov    %r12,0x18(%rsp)
  0x00007f75704c881e: mov    %r13,0x10(%rsp)
  0x00007f75704c8823: mov    %r14,0x8(%rsp)
  0x00007f75704c8828: mov    %r15,(%rsp)
  0x00007f75704c882c: movabs $0x7f758592f470,%rdi
  0x00007f75704c8836: movabs $0x7f75704c87d6,%rsi
  0x00007f75704c8840: mov    %rsp,%rdx
  0x00007f75704c8843: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8847: callq  0x00007f75853729fa
  0x00007f75704c884c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c884d: mov    %rsp,%r11
  0x00007f75704c8850: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8854: push   %rax
  0x00007f75704c8855: mov    %r11,%rax
  0x00007f75704c8858: mov    0x50(%rbx),%r11
  0x00007f75704c885c: mov    0x20(%rax),%rsi
  0x00007f75704c8860: mov    0x10(%rax),%rdx
  0x00007f75704c8864: mov    0x8(%rax),%ecx
  0x00007f75704c8867: mov    %rbx,0x258(%r15)
  0x00007f75704c886e: mov    %rbx,%rax
  0x00007f75704c8871: jmpq   *%r11
  0x00007f75704c8874: mov    0x8(%rsi),%ebx
  0x00007f75704c8877: shl    $0x3,%rbx
  0x00007f75704c887b: cmp    0x10(%rax),%rbx
  0x00007f75704c887f: mov    0x8(%rax),%rbx
  0x00007f75704c8883: je     0x00007f75704c888e
  0x00007f75704c8889: jmpq   0x00007f757046ec40
  0x00007f75704c888e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c8896: je     0x00007f75704c8991
  0x00007f75704c889c: jmpq   0x00007f757046ec40
  0x00007f75704c88a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c88a9: je     0x00007f75704c8991
  0x00007f75704c88af: mov    %rsp,%r13
  0x00007f75704c88b2: mov    (%rsp),%rax
  0x00007f75704c88b6: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c88ba: pushfq 
  0x00007f75704c88bb: sub    $0x8,%rsp
  0x00007f75704c88bf: mov    %rsp,-0x28(%rsp)
  0x00007f75704c88c4: sub    $0x80,%rsp
  0x00007f75704c88cb: mov    %rax,0x78(%rsp)
  0x00007f75704c88d0: mov    %rcx,0x70(%rsp)
  0x00007f75704c88d5: mov    %rdx,0x68(%rsp)
  0x00007f75704c88da: mov    %rbx,0x60(%rsp)
  0x00007f75704c88df: mov    %rbp,0x50(%rsp)
  0x00007f75704c88e4: mov    %rsi,0x48(%rsp)
  0x00007f75704c88e9: mov    %rdi,0x40(%rsp)
  0x00007f75704c88ee: mov    %r8,0x38(%rsp)
  0x00007f75704c88f3: mov    %r9,0x30(%rsp)
  0x00007f75704c88f8: mov    %r10,0x28(%rsp)
  0x00007f75704c88fd: mov    %r11,0x20(%rsp)
  0x00007f75704c8902: mov    %r12,0x18(%rsp)
  0x00007f75704c8907: mov    %r13,0x10(%rsp)
  0x00007f75704c890c: mov    %r14,0x8(%rsp)
  0x00007f75704c8911: mov    %r15,(%rsp)
  0x00007f75704c8915: sub    $0x200,%rsp
  0x00007f75704c891c: fxsave64 (%rsp)
  0x00007f75704c8921: mov    %rbx,%rdi
  0x00007f75704c8924: mov    %rax,%rsi
  0x00007f75704c8927: callq  0x00007f7585522bca
  0x00007f75704c892c: fxrstor64 (%rsp)
  0x00007f75704c8931: add    $0x200,%rsp
  0x00007f75704c8938: mov    (%rsp),%r15
  0x00007f75704c893c: mov    0x8(%rsp),%r14
  0x00007f75704c8941: mov    0x10(%rsp),%r13
  0x00007f75704c8946: mov    0x18(%rsp),%r12
  0x00007f75704c894b: mov    0x20(%rsp),%r11
  0x00007f75704c8950: mov    0x28(%rsp),%r10
  0x00007f75704c8955: mov    0x30(%rsp),%r9
  0x00007f75704c895a: mov    0x38(%rsp),%r8
  0x00007f75704c895f: mov    0x40(%rsp),%rdi
  0x00007f75704c8964: mov    0x48(%rsp),%rsi
  0x00007f75704c8969: mov    0x50(%rsp),%rbp
  0x00007f75704c896e: mov    0x60(%rsp),%rbx
  0x00007f75704c8973: mov    0x68(%rsp),%rdx
  0x00007f75704c8978: mov    0x70(%rsp),%rcx
  0x00007f75704c897d: mov    0x78(%rsp),%rax
  0x00007f75704c8982: add    $0x80,%rsp
  0x00007f75704c8989: add    $0x8,%rsp
  0x00007f75704c898d: popfq  
  0x00007f75704c898e: mov    %r13,%rsp
  0x00007f75704c8991: pop    %rax
  0x00007f75704c8992: mov    %rsp,%r13
  0x00007f75704c8995: sub    $0x30,%rsp
  0x00007f75704c8999: mov    %rax,(%rsp)
  0x00007f75704c899d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c89a7: mov    %rax,0x28(%rsp)
  0x00007f75704c89ac: mov    %rsi,0x20(%rsp)
  0x00007f75704c89b1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c89bb: mov    %rax,0x18(%rsp)
  0x00007f75704c89c0: mov    %rdx,0x10(%rsp)
  0x00007f75704c89c5: mov    %ecx,0x8(%rsp)
  0x00007f75704c89c9: mov    0x40(%rbx),%rcx
  0x00007f75704c89cd: jmpq   *%rcx

AHE@0x00007f758012c7c8: 0xbabea000 i2c: 0x00007f75704c8aa0 c2i: 0x00007f75704c8be5 c2iUV: 0x00007f75704c8bb8
i2c argument handler #85 for: static (Ljava/nio/ByteBuffer;IJZ)V (617 bytes generated)
c2i argument handler starts at 0x7f75704c8be5
  0x00007f75704c8aa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c8aa4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c8aae: cmp    %r11,%rax
  0x00007f75704c8ab1: jbe    0x00007f75704c8aca
  0x00007f75704c8ab7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c8ac1: cmp    %r11,%rax
  0x00007f75704c8ac4: jb     0x00007f75704c8b8d
  0x00007f75704c8aca: movabs $0x7f7570369420,%r11
  0x00007f75704c8ad4: cmp    %r11,%rax
  0x00007f75704c8ad7: jbe    0x00007f75704c8af0
  0x00007f75704c8add: movabs $0x7f757036de58,%r11
  0x00007f75704c8ae7: cmp    %r11,%rax
  0x00007f75704c8aea: jb     0x00007f75704c8b8d
  0x00007f75704c8af0: movabs $0x7f75704a9820,%r11
  0x00007f75704c8afa: cmp    %r11,%rax
  0x00007f75704c8afd: jbe    0x00007f75704c8b16
  0x00007f75704c8b03: movabs $0x7f75704af5e0,%r11
  0x00007f75704c8b0d: cmp    %r11,%rax
  0x00007f75704c8b10: jb     0x00007f75704c8b8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c8b16: mov    %rsp,-0x28(%rsp)
  0x00007f75704c8b1b: sub    $0x80,%rsp
  0x00007f75704c8b22: mov    %rax,0x78(%rsp)
  0x00007f75704c8b27: mov    %rcx,0x70(%rsp)
  0x00007f75704c8b2c: mov    %rdx,0x68(%rsp)
  0x00007f75704c8b31: mov    %rbx,0x60(%rsp)
  0x00007f75704c8b36: mov    %rbp,0x50(%rsp)
  0x00007f75704c8b3b: mov    %rsi,0x48(%rsp)
  0x00007f75704c8b40: mov    %rdi,0x40(%rsp)
  0x00007f75704c8b45: mov    %r8,0x38(%rsp)
  0x00007f75704c8b4a: mov    %r9,0x30(%rsp)
  0x00007f75704c8b4f: mov    %r10,0x28(%rsp)
  0x00007f75704c8b54: mov    %r11,0x20(%rsp)
  0x00007f75704c8b59: mov    %r12,0x18(%rsp)
  0x00007f75704c8b5e: mov    %r13,0x10(%rsp)
  0x00007f75704c8b63: mov    %r14,0x8(%rsp)
  0x00007f75704c8b68: mov    %r15,(%rsp)
  0x00007f75704c8b6c: movabs $0x7f758592f470,%rdi
  0x00007f75704c8b76: movabs $0x7f75704c8b16,%rsi
  0x00007f75704c8b80: mov    %rsp,%rdx
  0x00007f75704c8b83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8b87: callq  0x00007f75853729fa
  0x00007f75704c8b8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c8b8d: mov    %rsp,%r11
  0x00007f75704c8b90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8b94: push   %rax
  0x00007f75704c8b95: mov    %r11,%rax
  0x00007f75704c8b98: mov    0x50(%rbx),%r11
  0x00007f75704c8b9c: mov    0x28(%rax),%rsi
  0x00007f75704c8ba0: mov    0x20(%rax),%edx
  0x00007f75704c8ba3: mov    0x10(%rax),%rcx
  0x00007f75704c8ba7: mov    0x8(%rax),%r8d
  0x00007f75704c8bab: mov    %rbx,0x258(%r15)
  0x00007f75704c8bb2: mov    %rbx,%rax
  0x00007f75704c8bb5: jmpq   *%r11
  0x00007f75704c8bb8: mov    0x8(%rsi),%ebx
  0x00007f75704c8bbb: shl    $0x3,%rbx
  0x00007f75704c8bbf: cmp    0x10(%rax),%rbx
  0x00007f75704c8bc3: mov    0x8(%rax),%rbx
  0x00007f75704c8bc7: je     0x00007f75704c8bd2
  0x00007f75704c8bcd: jmpq   0x00007f757046ec40
  0x00007f75704c8bd2: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c8bda: je     0x00007f75704c8cd5
  0x00007f75704c8be0: jmpq   0x00007f757046ec40
  0x00007f75704c8be5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c8bed: je     0x00007f75704c8cd5
  0x00007f75704c8bf3: mov    %rsp,%r13
  0x00007f75704c8bf6: mov    (%rsp),%rax
  0x00007f75704c8bfa: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8bfe: pushfq 
  0x00007f75704c8bff: sub    $0x8,%rsp
  0x00007f75704c8c03: mov    %rsp,-0x28(%rsp)
  0x00007f75704c8c08: sub    $0x80,%rsp
  0x00007f75704c8c0f: mov    %rax,0x78(%rsp)
  0x00007f75704c8c14: mov    %rcx,0x70(%rsp)
  0x00007f75704c8c19: mov    %rdx,0x68(%rsp)
  0x00007f75704c8c1e: mov    %rbx,0x60(%rsp)
  0x00007f75704c8c23: mov    %rbp,0x50(%rsp)
  0x00007f75704c8c28: mov    %rsi,0x48(%rsp)
  0x00007f75704c8c2d: mov    %rdi,0x40(%rsp)
  0x00007f75704c8c32: mov    %r8,0x38(%rsp)
  0x00007f75704c8c37: mov    %r9,0x30(%rsp)
  0x00007f75704c8c3c: mov    %r10,0x28(%rsp)
  0x00007f75704c8c41: mov    %r11,0x20(%rsp)
  0x00007f75704c8c46: mov    %r12,0x18(%rsp)
  0x00007f75704c8c4b: mov    %r13,0x10(%rsp)
  0x00007f75704c8c50: mov    %r14,0x8(%rsp)
  0x00007f75704c8c55: mov    %r15,(%rsp)
  0x00007f75704c8c59: sub    $0x200,%rsp
  0x00007f75704c8c60: fxsave64 (%rsp)
  0x00007f75704c8c65: mov    %rbx,%rdi
  0x00007f75704c8c68: mov    %rax,%rsi
  0x00007f75704c8c6b: callq  0x00007f7585522bca
  0x00007f75704c8c70: fxrstor64 (%rsp)
  0x00007f75704c8c75: add    $0x200,%rsp
  0x00007f75704c8c7c: mov    (%rsp),%r15
  0x00007f75704c8c80: mov    0x8(%rsp),%r14
  0x00007f75704c8c85: mov    0x10(%rsp),%r13
  0x00007f75704c8c8a: mov    0x18(%rsp),%r12
  0x00007f75704c8c8f: mov    0x20(%rsp),%r11
  0x00007f75704c8c94: mov    0x28(%rsp),%r10
  0x00007f75704c8c99: mov    0x30(%rsp),%r9
  0x00007f75704c8c9e: mov    0x38(%rsp),%r8
  0x00007f75704c8ca3: mov    0x40(%rsp),%rdi
  0x00007f75704c8ca8: mov    0x48(%rsp),%rsi
  0x00007f75704c8cad: mov    0x50(%rsp),%rbp
  0x00007f75704c8cb2: mov    0x60(%rsp),%rbx
  0x00007f75704c8cb7: mov    0x68(%rsp),%rdx
  0x00007f75704c8cbc: mov    0x70(%rsp),%rcx
  0x00007f75704c8cc1: mov    0x78(%rsp),%rax
  0x00007f75704c8cc6: add    $0x80,%rsp
  0x00007f75704c8ccd: add    $0x8,%rsp
  0x00007f75704c8cd1: popfq  
  0x00007f75704c8cd2: mov    %r13,%rsp
  0x00007f75704c8cd5: pop    %rax
  0x00007f75704c8cd6: mov    %rsp,%r13
  0x00007f75704c8cd9: sub    $0x30,%rsp
  0x00007f75704c8cdd: mov    %rax,(%rsp)
  0x00007f75704c8ce1: mov    %rsi,0x28(%rsp)
  0x00007f75704c8ce6: mov    %edx,0x20(%rsp)
  0x00007f75704c8cea: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c8cf4: mov    %rax,0x18(%rsp)
  0x00007f75704c8cf9: mov    %rcx,0x10(%rsp)
  0x00007f75704c8cfe: mov    %r8d,0x8(%rsp)
  0x00007f75704c8d03: mov    0x40(%rbx),%rcx
  0x00007f75704c8d07: jmpq   *%rcx

AHE@0x00007f758012c810: 0xbeaa0000 i2c: 0x00007f75704c8de0 c2i: 0x00007f75704c8f20 c2iUV: 0x00007f75704c8ef3
i2c argument handler #86 for: static (JIZ)V (606 bytes generated)
c2i argument handler starts at 0x7f75704c8f20
  0x00007f75704c8de0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c8de4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c8dee: cmp    %r11,%rax
  0x00007f75704c8df1: jbe    0x00007f75704c8e0a
  0x00007f75704c8df7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c8e01: cmp    %r11,%rax
  0x00007f75704c8e04: jb     0x00007f75704c8ecd
  0x00007f75704c8e0a: movabs $0x7f7570369420,%r11
  0x00007f75704c8e14: cmp    %r11,%rax
  0x00007f75704c8e17: jbe    0x00007f75704c8e30
  0x00007f75704c8e1d: movabs $0x7f757036de58,%r11
  0x00007f75704c8e27: cmp    %r11,%rax
  0x00007f75704c8e2a: jb     0x00007f75704c8ecd
  0x00007f75704c8e30: movabs $0x7f75704a9820,%r11
  0x00007f75704c8e3a: cmp    %r11,%rax
  0x00007f75704c8e3d: jbe    0x00007f75704c8e56
  0x00007f75704c8e43: movabs $0x7f75704af5e0,%r11
  0x00007f75704c8e4d: cmp    %r11,%rax
  0x00007f75704c8e50: jb     0x00007f75704c8ecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c8e56: mov    %rsp,-0x28(%rsp)
  0x00007f75704c8e5b: sub    $0x80,%rsp
  0x00007f75704c8e62: mov    %rax,0x78(%rsp)
  0x00007f75704c8e67: mov    %rcx,0x70(%rsp)
  0x00007f75704c8e6c: mov    %rdx,0x68(%rsp)
  0x00007f75704c8e71: mov    %rbx,0x60(%rsp)
  0x00007f75704c8e76: mov    %rbp,0x50(%rsp)
  0x00007f75704c8e7b: mov    %rsi,0x48(%rsp)
  0x00007f75704c8e80: mov    %rdi,0x40(%rsp)
  0x00007f75704c8e85: mov    %r8,0x38(%rsp)
  0x00007f75704c8e8a: mov    %r9,0x30(%rsp)
  0x00007f75704c8e8f: mov    %r10,0x28(%rsp)
  0x00007f75704c8e94: mov    %r11,0x20(%rsp)
  0x00007f75704c8e99: mov    %r12,0x18(%rsp)
  0x00007f75704c8e9e: mov    %r13,0x10(%rsp)
  0x00007f75704c8ea3: mov    %r14,0x8(%rsp)
  0x00007f75704c8ea8: mov    %r15,(%rsp)
  0x00007f75704c8eac: movabs $0x7f758592f470,%rdi
  0x00007f75704c8eb6: movabs $0x7f75704c8e56,%rsi
  0x00007f75704c8ec0: mov    %rsp,%rdx
  0x00007f75704c8ec3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8ec7: callq  0x00007f75853729fa
  0x00007f75704c8ecc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c8ecd: mov    %rsp,%r11
  0x00007f75704c8ed0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8ed4: push   %rax
  0x00007f75704c8ed5: mov    %r11,%rax
  0x00007f75704c8ed8: mov    0x50(%rbx),%r11
  0x00007f75704c8edc: mov    0x18(%rax),%rsi
  0x00007f75704c8ee0: mov    0x10(%rax),%edx
  0x00007f75704c8ee3: mov    0x8(%rax),%ecx
  0x00007f75704c8ee6: mov    %rbx,0x258(%r15)
  0x00007f75704c8eed: mov    %rbx,%rax
  0x00007f75704c8ef0: jmpq   *%r11
  0x00007f75704c8ef3: mov    0x8(%rsi),%ebx
  0x00007f75704c8ef6: shl    $0x3,%rbx
  0x00007f75704c8efa: cmp    0x10(%rax),%rbx
  0x00007f75704c8efe: mov    0x8(%rax),%rbx
  0x00007f75704c8f02: je     0x00007f75704c8f0d
  0x00007f75704c8f08: jmpq   0x00007f757046ec40
  0x00007f75704c8f0d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c8f15: je     0x00007f75704c9010
  0x00007f75704c8f1b: jmpq   0x00007f757046ec40
  0x00007f75704c8f20: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c8f28: je     0x00007f75704c9010
  0x00007f75704c8f2e: mov    %rsp,%r13
  0x00007f75704c8f31: mov    (%rsp),%rax
  0x00007f75704c8f35: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c8f39: pushfq 
  0x00007f75704c8f3a: sub    $0x8,%rsp
  0x00007f75704c8f3e: mov    %rsp,-0x28(%rsp)
  0x00007f75704c8f43: sub    $0x80,%rsp
  0x00007f75704c8f4a: mov    %rax,0x78(%rsp)
  0x00007f75704c8f4f: mov    %rcx,0x70(%rsp)
  0x00007f75704c8f54: mov    %rdx,0x68(%rsp)
  0x00007f75704c8f59: mov    %rbx,0x60(%rsp)
  0x00007f75704c8f5e: mov    %rbp,0x50(%rsp)
  0x00007f75704c8f63: mov    %rsi,0x48(%rsp)
  0x00007f75704c8f68: mov    %rdi,0x40(%rsp)
  0x00007f75704c8f6d: mov    %r8,0x38(%rsp)
  0x00007f75704c8f72: mov    %r9,0x30(%rsp)
  0x00007f75704c8f77: mov    %r10,0x28(%rsp)
  0x00007f75704c8f7c: mov    %r11,0x20(%rsp)
  0x00007f75704c8f81: mov    %r12,0x18(%rsp)
  0x00007f75704c8f86: mov    %r13,0x10(%rsp)
  0x00007f75704c8f8b: mov    %r14,0x8(%rsp)
  0x00007f75704c8f90: mov    %r15,(%rsp)
  0x00007f75704c8f94: sub    $0x200,%rsp
  0x00007f75704c8f9b: fxsave64 (%rsp)
  0x00007f75704c8fa0: mov    %rbx,%rdi
  0x00007f75704c8fa3: mov    %rax,%rsi
  0x00007f75704c8fa6: callq  0x00007f7585522bca
  0x00007f75704c8fab: fxrstor64 (%rsp)
  0x00007f75704c8fb0: add    $0x200,%rsp
  0x00007f75704c8fb7: mov    (%rsp),%r15
  0x00007f75704c8fbb: mov    0x8(%rsp),%r14
  0x00007f75704c8fc0: mov    0x10(%rsp),%r13
  0x00007f75704c8fc5: mov    0x18(%rsp),%r12
  0x00007f75704c8fca: mov    0x20(%rsp),%r11
  0x00007f75704c8fcf: mov    0x28(%rsp),%r10
  0x00007f75704c8fd4: mov    0x30(%rsp),%r9
  0x00007f75704c8fd9: mov    0x38(%rsp),%r8
  0x00007f75704c8fde: mov    0x40(%rsp),%rdi
  0x00007f75704c8fe3: mov    0x48(%rsp),%rsi
  0x00007f75704c8fe8: mov    0x50(%rsp),%rbp
  0x00007f75704c8fed: mov    0x60(%rsp),%rbx
  0x00007f75704c8ff2: mov    0x68(%rsp),%rdx
  0x00007f75704c8ff7: mov    0x70(%rsp),%rcx
  0x00007f75704c8ffc: mov    0x78(%rsp),%rax
  0x00007f75704c9001: add    $0x80,%rsp
  0x00007f75704c9008: add    $0x8,%rsp
  0x00007f75704c900c: popfq  
  0x00007f75704c900d: mov    %r13,%rsp
  0x00007f75704c9010: pop    %rax
  0x00007f75704c9011: mov    %rsp,%r13
  0x00007f75704c9014: sub    $0x30,%rsp
  0x00007f75704c9018: mov    %rax,(%rsp)
  0x00007f75704c901c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c9026: mov    %rax,0x20(%rsp)
  0x00007f75704c902b: mov    %rsi,0x18(%rsp)
  0x00007f75704c9030: mov    %edx,0x10(%rsp)
  0x00007f75704c9034: mov    %ecx,0x8(%rsp)
  0x00007f75704c9038: mov    0x40(%rbx),%rcx
  0x00007f75704c903c: jmpq   *%rcx

AHE@0x00007f758012c858: 0xbbeb0000 i2c: 0x00007f75704c90e0 c2i: 0x00007f75704c9222 c2iUV: 0x00007f75704c91f5
i2c argument handler #87 for: receiver (JLjava/util/function/LongBinaryOperator;)J (610 bytes generated)
c2i argument handler starts at 0x7f75704c9222
  0x00007f75704c90e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c90e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c90ee: cmp    %r11,%rax
  0x00007f75704c90f1: jbe    0x00007f75704c910a
  0x00007f75704c90f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c9101: cmp    %r11,%rax
  0x00007f75704c9104: jb     0x00007f75704c91cd
  0x00007f75704c910a: movabs $0x7f7570369420,%r11
  0x00007f75704c9114: cmp    %r11,%rax
  0x00007f75704c9117: jbe    0x00007f75704c9130
  0x00007f75704c911d: movabs $0x7f757036de58,%r11
  0x00007f75704c9127: cmp    %r11,%rax
  0x00007f75704c912a: jb     0x00007f75704c91cd
  0x00007f75704c9130: movabs $0x7f75704a9820,%r11
  0x00007f75704c913a: cmp    %r11,%rax
  0x00007f75704c913d: jbe    0x00007f75704c9156
  0x00007f75704c9143: movabs $0x7f75704af5e0,%r11
  0x00007f75704c914d: cmp    %r11,%rax
  0x00007f75704c9150: jb     0x00007f75704c91cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c9156: mov    %rsp,-0x28(%rsp)
  0x00007f75704c915b: sub    $0x80,%rsp
  0x00007f75704c9162: mov    %rax,0x78(%rsp)
  0x00007f75704c9167: mov    %rcx,0x70(%rsp)
  0x00007f75704c916c: mov    %rdx,0x68(%rsp)
  0x00007f75704c9171: mov    %rbx,0x60(%rsp)
  0x00007f75704c9176: mov    %rbp,0x50(%rsp)
  0x00007f75704c917b: mov    %rsi,0x48(%rsp)
  0x00007f75704c9180: mov    %rdi,0x40(%rsp)
  0x00007f75704c9185: mov    %r8,0x38(%rsp)
  0x00007f75704c918a: mov    %r9,0x30(%rsp)
  0x00007f75704c918f: mov    %r10,0x28(%rsp)
  0x00007f75704c9194: mov    %r11,0x20(%rsp)
  0x00007f75704c9199: mov    %r12,0x18(%rsp)
  0x00007f75704c919e: mov    %r13,0x10(%rsp)
  0x00007f75704c91a3: mov    %r14,0x8(%rsp)
  0x00007f75704c91a8: mov    %r15,(%rsp)
  0x00007f75704c91ac: movabs $0x7f758592f470,%rdi
  0x00007f75704c91b6: movabs $0x7f75704c9156,%rsi
  0x00007f75704c91c0: mov    %rsp,%rdx
  0x00007f75704c91c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c91c7: callq  0x00007f75853729fa
  0x00007f75704c91cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704c91cd: mov    %rsp,%r11
  0x00007f75704c91d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c91d4: push   %rax
  0x00007f75704c91d5: mov    %r11,%rax
  0x00007f75704c91d8: mov    0x50(%rbx),%r11
  0x00007f75704c91dc: mov    0x20(%rax),%rsi
  0x00007f75704c91e0: mov    0x10(%rax),%rdx
  0x00007f75704c91e4: mov    0x8(%rax),%rcx
  0x00007f75704c91e8: mov    %rbx,0x258(%r15)
  0x00007f75704c91ef: mov    %rbx,%rax
  0x00007f75704c91f2: jmpq   *%r11
  0x00007f75704c91f5: mov    0x8(%rsi),%ebx
  0x00007f75704c91f8: shl    $0x3,%rbx
  0x00007f75704c91fc: cmp    0x10(%rax),%rbx
  0x00007f75704c9200: mov    0x8(%rax),%rbx
  0x00007f75704c9204: je     0x00007f75704c920f
  0x00007f75704c920a: jmpq   0x00007f757046ec40
  0x00007f75704c920f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c9217: je     0x00007f75704c9312
  0x00007f75704c921d: jmpq   0x00007f757046ec40
  0x00007f75704c9222: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c922a: je     0x00007f75704c9312
  0x00007f75704c9230: mov    %rsp,%r13
  0x00007f75704c9233: mov    (%rsp),%rax
  0x00007f75704c9237: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c923b: pushfq 
  0x00007f75704c923c: sub    $0x8,%rsp
  0x00007f75704c9240: mov    %rsp,-0x28(%rsp)
  0x00007f75704c9245: sub    $0x80,%rsp
  0x00007f75704c924c: mov    %rax,0x78(%rsp)
  0x00007f75704c9251: mov    %rcx,0x70(%rsp)
  0x00007f75704c9256: mov    %rdx,0x68(%rsp)
  0x00007f75704c925b: mov    %rbx,0x60(%rsp)
  0x00007f75704c9260: mov    %rbp,0x50(%rsp)
  0x00007f75704c9265: mov    %rsi,0x48(%rsp)
  0x00007f75704c926a: mov    %rdi,0x40(%rsp)
  0x00007f75704c926f: mov    %r8,0x38(%rsp)
  0x00007f75704c9274: mov    %r9,0x30(%rsp)
  0x00007f75704c9279: mov    %r10,0x28(%rsp)
  0x00007f75704c927e: mov    %r11,0x20(%rsp)
  0x00007f75704c9283: mov    %r12,0x18(%rsp)
  0x00007f75704c9288: mov    %r13,0x10(%rsp)
  0x00007f75704c928d: mov    %r14,0x8(%rsp)
  0x00007f75704c9292: mov    %r15,(%rsp)
  0x00007f75704c9296: sub    $0x200,%rsp
  0x00007f75704c929d: fxsave64 (%rsp)
  0x00007f75704c92a2: mov    %rbx,%rdi
  0x00007f75704c92a5: mov    %rax,%rsi
  0x00007f75704c92a8: callq  0x00007f7585522bca
  0x00007f75704c92ad: fxrstor64 (%rsp)
  0x00007f75704c92b2: add    $0x200,%rsp
  0x00007f75704c92b9: mov    (%rsp),%r15
  0x00007f75704c92bd: mov    0x8(%rsp),%r14
  0x00007f75704c92c2: mov    0x10(%rsp),%r13
  0x00007f75704c92c7: mov    0x18(%rsp),%r12
  0x00007f75704c92cc: mov    0x20(%rsp),%r11
  0x00007f75704c92d1: mov    0x28(%rsp),%r10
  0x00007f75704c92d6: mov    0x30(%rsp),%r9
  0x00007f75704c92db: mov    0x38(%rsp),%r8
  0x00007f75704c92e0: mov    0x40(%rsp),%rdi
  0x00007f75704c92e5: mov    0x48(%rsp),%rsi
  0x00007f75704c92ea: mov    0x50(%rsp),%rbp
  0x00007f75704c92ef: mov    0x60(%rsp),%rbx
  0x00007f75704c92f4: mov    0x68(%rsp),%rdx
  0x00007f75704c92f9: mov    0x70(%rsp),%rcx
  0x00007f75704c92fe: mov    0x78(%rsp),%rax
  0x00007f75704c9303: add    $0x80,%rsp
  0x00007f75704c930a: add    $0x8,%rsp
  0x00007f75704c930e: popfq  
  0x00007f75704c930f: mov    %r13,%rsp
  0x00007f75704c9312: pop    %rax
  0x00007f75704c9313: mov    %rsp,%r13
  0x00007f75704c9316: sub    $0x30,%rsp
  0x00007f75704c931a: mov    %rax,(%rsp)
  0x00007f75704c931e: mov    %rsi,0x20(%rsp)
  0x00007f75704c9323: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c932d: mov    %rax,0x18(%rsp)
  0x00007f75704c9332: mov    %rdx,0x10(%rsp)
  0x00007f75704c9337: mov    %rcx,0x8(%rsp)
  0x00007f75704c933c: mov    0x40(%rbx),%rcx
  0x00007f75704c9340: jmpq   *%rcx

AHE@0x00007f758012c8a0: 0xbbebe000 i2c: 0x00007f75704c9420 c2i: 0x00007f75704c9562 c2iUV: 0x00007f75704c9535
i2c argument handler #88 for: receiver (JJ)Z (625 bytes generated)
c2i argument handler starts at 0x7f75704c9562
  0x00007f75704c9420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c9424: movabs $0x7f757036e3e0,%r11
  0x00007f75704c942e: cmp    %r11,%rax
  0x00007f75704c9431: jbe    0x00007f75704c944a
  0x00007f75704c9437: movabs $0x7f757046e3e0,%r11
  0x00007f75704c9441: cmp    %r11,%rax
  0x00007f75704c9444: jb     0x00007f75704c950d
  0x00007f75704c944a: movabs $0x7f7570369420,%r11
  0x00007f75704c9454: cmp    %r11,%rax
  0x00007f75704c9457: jbe    0x00007f75704c9470
  0x00007f75704c945d: movabs $0x7f757036de58,%r11
  0x00007f75704c9467: cmp    %r11,%rax
  0x00007f75704c946a: jb     0x00007f75704c950d
  0x00007f75704c9470: movabs $0x7f75704a9820,%r11
  0x00007f75704c947a: cmp    %r11,%rax
  0x00007f75704c947d: jbe    0x00007f75704c9496
  0x00007f75704c9483: movabs $0x7f75704af5e0,%r11
  0x00007f75704c948d: cmp    %r11,%rax
  0x00007f75704c9490: jb     0x00007f75704c950d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c9496: mov    %rsp,-0x28(%rsp)
  0x00007f75704c949b: sub    $0x80,%rsp
  0x00007f75704c94a2: mov    %rax,0x78(%rsp)
  0x00007f75704c94a7: mov    %rcx,0x70(%rsp)
  0x00007f75704c94ac: mov    %rdx,0x68(%rsp)
  0x00007f75704c94b1: mov    %rbx,0x60(%rsp)
  0x00007f75704c94b6: mov    %rbp,0x50(%rsp)
  0x00007f75704c94bb: mov    %rsi,0x48(%rsp)
  0x00007f75704c94c0: mov    %rdi,0x40(%rsp)
  0x00007f75704c94c5: mov    %r8,0x38(%rsp)
  0x00007f75704c94ca: mov    %r9,0x30(%rsp)
  0x00007f75704c94cf: mov    %r10,0x28(%rsp)
  0x00007f75704c94d4: mov    %r11,0x20(%rsp)
  0x00007f75704c94d9: mov    %r12,0x18(%rsp)
  0x00007f75704c94de: mov    %r13,0x10(%rsp)
  0x00007f75704c94e3: mov    %r14,0x8(%rsp)
  0x00007f75704c94e8: mov    %r15,(%rsp)
  0x00007f75704c94ec: movabs $0x7f758592f470,%rdi
  0x00007f75704c94f6: movabs $0x7f75704c9496,%rsi
  0x00007f75704c9500: mov    %rsp,%rdx
  0x00007f75704c9503: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9507: callq  0x00007f75853729fa
  0x00007f75704c950c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c950d: mov    %rsp,%r11
  0x00007f75704c9510: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9514: push   %rax
  0x00007f75704c9515: mov    %r11,%rax
  0x00007f75704c9518: mov    0x50(%rbx),%r11
  0x00007f75704c951c: mov    0x28(%rax),%rsi
  0x00007f75704c9520: mov    0x18(%rax),%rdx
  0x00007f75704c9524: mov    0x8(%rax),%rcx
  0x00007f75704c9528: mov    %rbx,0x258(%r15)
  0x00007f75704c952f: mov    %rbx,%rax
  0x00007f75704c9532: jmpq   *%r11
  0x00007f75704c9535: mov    0x8(%rsi),%ebx
  0x00007f75704c9538: shl    $0x3,%rbx
  0x00007f75704c953c: cmp    0x10(%rax),%rbx
  0x00007f75704c9540: mov    0x8(%rax),%rbx
  0x00007f75704c9544: je     0x00007f75704c954f
  0x00007f75704c954a: jmpq   0x00007f757046ec40
  0x00007f75704c954f: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c9557: je     0x00007f75704c9652
  0x00007f75704c955d: jmpq   0x00007f757046ec40
  0x00007f75704c9562: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c956a: je     0x00007f75704c9652
  0x00007f75704c9570: mov    %rsp,%r13
  0x00007f75704c9573: mov    (%rsp),%rax
  0x00007f75704c9577: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c957b: pushfq 
  0x00007f75704c957c: sub    $0x8,%rsp
  0x00007f75704c9580: mov    %rsp,-0x28(%rsp)
  0x00007f75704c9585: sub    $0x80,%rsp
  0x00007f75704c958c: mov    %rax,0x78(%rsp)
  0x00007f75704c9591: mov    %rcx,0x70(%rsp)
  0x00007f75704c9596: mov    %rdx,0x68(%rsp)
  0x00007f75704c959b: mov    %rbx,0x60(%rsp)
  0x00007f75704c95a0: mov    %rbp,0x50(%rsp)
  0x00007f75704c95a5: mov    %rsi,0x48(%rsp)
  0x00007f75704c95aa: mov    %rdi,0x40(%rsp)
  0x00007f75704c95af: mov    %r8,0x38(%rsp)
  0x00007f75704c95b4: mov    %r9,0x30(%rsp)
  0x00007f75704c95b9: mov    %r10,0x28(%rsp)
  0x00007f75704c95be: mov    %r11,0x20(%rsp)
  0x00007f75704c95c3: mov    %r12,0x18(%rsp)
  0x00007f75704c95c8: mov    %r13,0x10(%rsp)
  0x00007f75704c95cd: mov    %r14,0x8(%rsp)
  0x00007f75704c95d2: mov    %r15,(%rsp)
  0x00007f75704c95d6: sub    $0x200,%rsp
  0x00007f75704c95dd: fxsave64 (%rsp)
  0x00007f75704c95e2: mov    %rbx,%rdi
  0x00007f75704c95e5: mov    %rax,%rsi
  0x00007f75704c95e8: callq  0x00007f7585522bca
  0x00007f75704c95ed: fxrstor64 (%rsp)
  0x00007f75704c95f2: add    $0x200,%rsp
  0x00007f75704c95f9: mov    (%rsp),%r15
  0x00007f75704c95fd: mov    0x8(%rsp),%r14
  0x00007f75704c9602: mov    0x10(%rsp),%r13
  0x00007f75704c9607: mov    0x18(%rsp),%r12
  0x00007f75704c960c: mov    0x20(%rsp),%r11
  0x00007f75704c9611: mov    0x28(%rsp),%r10
  0x00007f75704c9616: mov    0x30(%rsp),%r9
  0x00007f75704c961b: mov    0x38(%rsp),%r8
  0x00007f75704c9620: mov    0x40(%rsp),%rdi
  0x00007f75704c9625: mov    0x48(%rsp),%rsi
  0x00007f75704c962a: mov    0x50(%rsp),%rbp
  0x00007f75704c962f: mov    0x60(%rsp),%rbx
  0x00007f75704c9634: mov    0x68(%rsp),%rdx
  0x00007f75704c9639: mov    0x70(%rsp),%rcx
  0x00007f75704c963e: mov    0x78(%rsp),%rax
  0x00007f75704c9643: add    $0x80,%rsp
  0x00007f75704c964a: add    $0x8,%rsp
  0x00007f75704c964e: popfq  
  0x00007f75704c964f: mov    %r13,%rsp
  0x00007f75704c9652: pop    %rax
  0x00007f75704c9653: mov    %rsp,%r13
  0x00007f75704c9656: sub    $0x30,%rsp
  0x00007f75704c965a: mov    %rax,(%rsp)
  0x00007f75704c965e: mov    %rsi,0x28(%rsp)
  0x00007f75704c9663: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c966d: mov    %rax,0x20(%rsp)
  0x00007f75704c9672: mov    %rdx,0x18(%rsp)
  0x00007f75704c9677: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c9681: mov    %rax,0x10(%rsp)
  0x00007f75704c9686: mov    %rcx,0x8(%rsp)
  0x00007f75704c968b: mov    0x40(%rbx),%rcx
  0x00007f75704c968f: jmpq   *%rcx

AHE@0x00007f758012c8e8: 0xbbeab000 i2c: 0x00007f75704c9760 c2i: 0x00007f75704c98a5 c2iUV: 0x00007f75704c9878
i2c argument handler #89 for: receiver (JILjava/lang/Object;)Ljava/nio/ByteBuffer; (617 bytes generated)
c2i argument handler starts at 0x7f75704c98a5
  0x00007f75704c9760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c9764: movabs $0x7f757036e3e0,%r11
  0x00007f75704c976e: cmp    %r11,%rax
  0x00007f75704c9771: jbe    0x00007f75704c978a
  0x00007f75704c9777: movabs $0x7f757046e3e0,%r11
  0x00007f75704c9781: cmp    %r11,%rax
  0x00007f75704c9784: jb     0x00007f75704c984d
  0x00007f75704c978a: movabs $0x7f7570369420,%r11
  0x00007f75704c9794: cmp    %r11,%rax
  0x00007f75704c9797: jbe    0x00007f75704c97b0
  0x00007f75704c979d: movabs $0x7f757036de58,%r11
  0x00007f75704c97a7: cmp    %r11,%rax
  0x00007f75704c97aa: jb     0x00007f75704c984d
  0x00007f75704c97b0: movabs $0x7f75704a9820,%r11
  0x00007f75704c97ba: cmp    %r11,%rax
  0x00007f75704c97bd: jbe    0x00007f75704c97d6
  0x00007f75704c97c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704c97cd: cmp    %r11,%rax
  0x00007f75704c97d0: jb     0x00007f75704c984d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c97d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704c97db: sub    $0x80,%rsp
  0x00007f75704c97e2: mov    %rax,0x78(%rsp)
  0x00007f75704c97e7: mov    %rcx,0x70(%rsp)
  0x00007f75704c97ec: mov    %rdx,0x68(%rsp)
  0x00007f75704c97f1: mov    %rbx,0x60(%rsp)
  0x00007f75704c97f6: mov    %rbp,0x50(%rsp)
  0x00007f75704c97fb: mov    %rsi,0x48(%rsp)
  0x00007f75704c9800: mov    %rdi,0x40(%rsp)
  0x00007f75704c9805: mov    %r8,0x38(%rsp)
  0x00007f75704c980a: mov    %r9,0x30(%rsp)
  0x00007f75704c980f: mov    %r10,0x28(%rsp)
  0x00007f75704c9814: mov    %r11,0x20(%rsp)
  0x00007f75704c9819: mov    %r12,0x18(%rsp)
  0x00007f75704c981e: mov    %r13,0x10(%rsp)
  0x00007f75704c9823: mov    %r14,0x8(%rsp)
  0x00007f75704c9828: mov    %r15,(%rsp)
  0x00007f75704c982c: movabs $0x7f758592f470,%rdi
  0x00007f75704c9836: movabs $0x7f75704c97d6,%rsi
  0x00007f75704c9840: mov    %rsp,%rdx
  0x00007f75704c9843: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9847: callq  0x00007f75853729fa
  0x00007f75704c984c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c984d: mov    %rsp,%r11
  0x00007f75704c9850: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9854: push   %rax
  0x00007f75704c9855: mov    %r11,%rax
  0x00007f75704c9858: mov    0x50(%rbx),%r11
  0x00007f75704c985c: mov    0x28(%rax),%rsi
  0x00007f75704c9860: mov    0x18(%rax),%rdx
  0x00007f75704c9864: mov    0x10(%rax),%ecx
  0x00007f75704c9867: mov    0x8(%rax),%r8
  0x00007f75704c986b: mov    %rbx,0x258(%r15)
  0x00007f75704c9872: mov    %rbx,%rax
  0x00007f75704c9875: jmpq   *%r11
  0x00007f75704c9878: mov    0x8(%rsi),%ebx
  0x00007f75704c987b: shl    $0x3,%rbx
  0x00007f75704c987f: cmp    0x10(%rax),%rbx
  0x00007f75704c9883: mov    0x8(%rax),%rbx
  0x00007f75704c9887: je     0x00007f75704c9892
  0x00007f75704c988d: jmpq   0x00007f757046ec40
  0x00007f75704c9892: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c989a: je     0x00007f75704c9995
  0x00007f75704c98a0: jmpq   0x00007f757046ec40
  0x00007f75704c98a5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c98ad: je     0x00007f75704c9995
  0x00007f75704c98b3: mov    %rsp,%r13
  0x00007f75704c98b6: mov    (%rsp),%rax
  0x00007f75704c98ba: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c98be: pushfq 
  0x00007f75704c98bf: sub    $0x8,%rsp
  0x00007f75704c98c3: mov    %rsp,-0x28(%rsp)
  0x00007f75704c98c8: sub    $0x80,%rsp
  0x00007f75704c98cf: mov    %rax,0x78(%rsp)
  0x00007f75704c98d4: mov    %rcx,0x70(%rsp)
  0x00007f75704c98d9: mov    %rdx,0x68(%rsp)
  0x00007f75704c98de: mov    %rbx,0x60(%rsp)
  0x00007f75704c98e3: mov    %rbp,0x50(%rsp)
  0x00007f75704c98e8: mov    %rsi,0x48(%rsp)
  0x00007f75704c98ed: mov    %rdi,0x40(%rsp)
  0x00007f75704c98f2: mov    %r8,0x38(%rsp)
  0x00007f75704c98f7: mov    %r9,0x30(%rsp)
  0x00007f75704c98fc: mov    %r10,0x28(%rsp)
  0x00007f75704c9901: mov    %r11,0x20(%rsp)
  0x00007f75704c9906: mov    %r12,0x18(%rsp)
  0x00007f75704c990b: mov    %r13,0x10(%rsp)
  0x00007f75704c9910: mov    %r14,0x8(%rsp)
  0x00007f75704c9915: mov    %r15,(%rsp)
  0x00007f75704c9919: sub    $0x200,%rsp
  0x00007f75704c9920: fxsave64 (%rsp)
  0x00007f75704c9925: mov    %rbx,%rdi
  0x00007f75704c9928: mov    %rax,%rsi
  0x00007f75704c992b: callq  0x00007f7585522bca
  0x00007f75704c9930: fxrstor64 (%rsp)
  0x00007f75704c9935: add    $0x200,%rsp
  0x00007f75704c993c: mov    (%rsp),%r15
  0x00007f75704c9940: mov    0x8(%rsp),%r14
  0x00007f75704c9945: mov    0x10(%rsp),%r13
  0x00007f75704c994a: mov    0x18(%rsp),%r12
  0x00007f75704c994f: mov    0x20(%rsp),%r11
  0x00007f75704c9954: mov    0x28(%rsp),%r10
  0x00007f75704c9959: mov    0x30(%rsp),%r9
  0x00007f75704c995e: mov    0x38(%rsp),%r8
  0x00007f75704c9963: mov    0x40(%rsp),%rdi
  0x00007f75704c9968: mov    0x48(%rsp),%rsi
  0x00007f75704c996d: mov    0x50(%rsp),%rbp
  0x00007f75704c9972: mov    0x60(%rsp),%rbx
  0x00007f75704c9977: mov    0x68(%rsp),%rdx
  0x00007f75704c997c: mov    0x70(%rsp),%rcx
  0x00007f75704c9981: mov    0x78(%rsp),%rax
  0x00007f75704c9986: add    $0x80,%rsp
  0x00007f75704c998d: add    $0x8,%rsp
  0x00007f75704c9991: popfq  
  0x00007f75704c9992: mov    %r13,%rsp
  0x00007f75704c9995: pop    %rax
  0x00007f75704c9996: mov    %rsp,%r13
  0x00007f75704c9999: sub    $0x30,%rsp
  0x00007f75704c999d: mov    %rax,(%rsp)
  0x00007f75704c99a1: mov    %rsi,0x28(%rsp)
  0x00007f75704c99a6: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c99b0: mov    %rax,0x20(%rsp)
  0x00007f75704c99b5: mov    %rdx,0x18(%rsp)
  0x00007f75704c99ba: mov    %ecx,0x10(%rsp)
  0x00007f75704c99be: mov    %r8,0x8(%rsp)
  0x00007f75704c99c3: mov    0x40(%rbx),%rcx
  0x00007f75704c99c7: jmpq   *%rcx

AHE@0x00007f758012c930: 0xabe00000 i2c: 0x00007f75704c9aa0 c2i: 0x00007f75704c9bdd c2iUV: 0x00007f75704c9bb0
i2c argument handler #90 for: static (IJ)J (599 bytes generated)
c2i argument handler starts at 0x7f75704c9bdd
  0x00007f75704c9aa0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c9aa4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c9aae: cmp    %r11,%rax
  0x00007f75704c9ab1: jbe    0x00007f75704c9aca
  0x00007f75704c9ab7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c9ac1: cmp    %r11,%rax
  0x00007f75704c9ac4: jb     0x00007f75704c9b8d
  0x00007f75704c9aca: movabs $0x7f7570369420,%r11
  0x00007f75704c9ad4: cmp    %r11,%rax
  0x00007f75704c9ad7: jbe    0x00007f75704c9af0
  0x00007f75704c9add: movabs $0x7f757036de58,%r11
  0x00007f75704c9ae7: cmp    %r11,%rax
  0x00007f75704c9aea: jb     0x00007f75704c9b8d
  0x00007f75704c9af0: movabs $0x7f75704a9820,%r11
  0x00007f75704c9afa: cmp    %r11,%rax
  0x00007f75704c9afd: jbe    0x00007f75704c9b16
  0x00007f75704c9b03: movabs $0x7f75704af5e0,%r11
  0x00007f75704c9b0d: cmp    %r11,%rax
  0x00007f75704c9b10: jb     0x00007f75704c9b8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c9b16: mov    %rsp,-0x28(%rsp)
  0x00007f75704c9b1b: sub    $0x80,%rsp
  0x00007f75704c9b22: mov    %rax,0x78(%rsp)
  0x00007f75704c9b27: mov    %rcx,0x70(%rsp)
  0x00007f75704c9b2c: mov    %rdx,0x68(%rsp)
  0x00007f75704c9b31: mov    %rbx,0x60(%rsp)
  0x00007f75704c9b36: mov    %rbp,0x50(%rsp)
  0x00007f75704c9b3b: mov    %rsi,0x48(%rsp)
  0x00007f75704c9b40: mov    %rdi,0x40(%rsp)
  0x00007f75704c9b45: mov    %r8,0x38(%rsp)
  0x00007f75704c9b4a: mov    %r9,0x30(%rsp)
  0x00007f75704c9b4f: mov    %r10,0x28(%rsp)
  0x00007f75704c9b54: mov    %r11,0x20(%rsp)
  0x00007f75704c9b59: mov    %r12,0x18(%rsp)
  0x00007f75704c9b5e: mov    %r13,0x10(%rsp)
  0x00007f75704c9b63: mov    %r14,0x8(%rsp)
  0x00007f75704c9b68: mov    %r15,(%rsp)
  0x00007f75704c9b6c: movabs $0x7f758592f470,%rdi
  0x00007f75704c9b76: movabs $0x7f75704c9b16,%rsi
  0x00007f75704c9b80: mov    %rsp,%rdx
  0x00007f75704c9b83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9b87: callq  0x00007f75853729fa
  0x00007f75704c9b8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c9b8d: mov    %rsp,%r11
  0x00007f75704c9b90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9b94: push   %rax
  0x00007f75704c9b95: mov    %r11,%rax
  0x00007f75704c9b98: mov    0x50(%rbx),%r11
  0x00007f75704c9b9c: mov    0x18(%rax),%esi
  0x00007f75704c9b9f: mov    0x8(%rax),%rdx
  0x00007f75704c9ba3: mov    %rbx,0x258(%r15)
  0x00007f75704c9baa: mov    %rbx,%rax
  0x00007f75704c9bad: jmpq   *%r11
  0x00007f75704c9bb0: mov    0x8(%rsi),%ebx
  0x00007f75704c9bb3: shl    $0x3,%rbx
  0x00007f75704c9bb7: cmp    0x10(%rax),%rbx
  0x00007f75704c9bbb: mov    0x8(%rax),%rbx
  0x00007f75704c9bbf: je     0x00007f75704c9bca
  0x00007f75704c9bc5: jmpq   0x00007f757046ec40
  0x00007f75704c9bca: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c9bd2: je     0x00007f75704c9ccd
  0x00007f75704c9bd8: jmpq   0x00007f757046ec40
  0x00007f75704c9bdd: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c9be5: je     0x00007f75704c9ccd
  0x00007f75704c9beb: mov    %rsp,%r13
  0x00007f75704c9bee: mov    (%rsp),%rax
  0x00007f75704c9bf2: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9bf6: pushfq 
  0x00007f75704c9bf7: sub    $0x8,%rsp
  0x00007f75704c9bfb: mov    %rsp,-0x28(%rsp)
  0x00007f75704c9c00: sub    $0x80,%rsp
  0x00007f75704c9c07: mov    %rax,0x78(%rsp)
  0x00007f75704c9c0c: mov    %rcx,0x70(%rsp)
  0x00007f75704c9c11: mov    %rdx,0x68(%rsp)
  0x00007f75704c9c16: mov    %rbx,0x60(%rsp)
  0x00007f75704c9c1b: mov    %rbp,0x50(%rsp)
  0x00007f75704c9c20: mov    %rsi,0x48(%rsp)
  0x00007f75704c9c25: mov    %rdi,0x40(%rsp)
  0x00007f75704c9c2a: mov    %r8,0x38(%rsp)
  0x00007f75704c9c2f: mov    %r9,0x30(%rsp)
  0x00007f75704c9c34: mov    %r10,0x28(%rsp)
  0x00007f75704c9c39: mov    %r11,0x20(%rsp)
  0x00007f75704c9c3e: mov    %r12,0x18(%rsp)
  0x00007f75704c9c43: mov    %r13,0x10(%rsp)
  0x00007f75704c9c48: mov    %r14,0x8(%rsp)
  0x00007f75704c9c4d: mov    %r15,(%rsp)
  0x00007f75704c9c51: sub    $0x200,%rsp
  0x00007f75704c9c58: fxsave64 (%rsp)
  0x00007f75704c9c5d: mov    %rbx,%rdi
  0x00007f75704c9c60: mov    %rax,%rsi
  0x00007f75704c9c63: callq  0x00007f7585522bca
  0x00007f75704c9c68: fxrstor64 (%rsp)
  0x00007f75704c9c6d: add    $0x200,%rsp
  0x00007f75704c9c74: mov    (%rsp),%r15
  0x00007f75704c9c78: mov    0x8(%rsp),%r14
  0x00007f75704c9c7d: mov    0x10(%rsp),%r13
  0x00007f75704c9c82: mov    0x18(%rsp),%r12
  0x00007f75704c9c87: mov    0x20(%rsp),%r11
  0x00007f75704c9c8c: mov    0x28(%rsp),%r10
  0x00007f75704c9c91: mov    0x30(%rsp),%r9
  0x00007f75704c9c96: mov    0x38(%rsp),%r8
  0x00007f75704c9c9b: mov    0x40(%rsp),%rdi
  0x00007f75704c9ca0: mov    0x48(%rsp),%rsi
  0x00007f75704c9ca5: mov    0x50(%rsp),%rbp
  0x00007f75704c9caa: mov    0x60(%rsp),%rbx
  0x00007f75704c9caf: mov    0x68(%rsp),%rdx
  0x00007f75704c9cb4: mov    0x70(%rsp),%rcx
  0x00007f75704c9cb9: mov    0x78(%rsp),%rax
  0x00007f75704c9cbe: add    $0x80,%rsp
  0x00007f75704c9cc5: add    $0x8,%rsp
  0x00007f75704c9cc9: popfq  
  0x00007f75704c9cca: mov    %r13,%rsp
  0x00007f75704c9ccd: pop    %rax
  0x00007f75704c9cce: mov    %rsp,%r13
  0x00007f75704c9cd1: sub    $0x20,%rsp
  0x00007f75704c9cd5: mov    %rax,(%rsp)
  0x00007f75704c9cd9: mov    %esi,0x18(%rsp)
  0x00007f75704c9cdd: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704c9ce7: mov    %rax,0x10(%rsp)
  0x00007f75704c9cec: mov    %rdx,0x8(%rsp)
  0x00007f75704c9cf1: mov    0x40(%rbx),%rcx
  0x00007f75704c9cf5: jmpq   *%rcx

AHE@0x00007f758012c978: 0xaabaa000 i2c: 0x00007f75704c9da0 c2i: 0x00007f75704c9ee8 c2iUV: 0x00007f75704c9ebb
i2c argument handler #91 for: static (II[CII)I (609 bytes generated)
c2i argument handler starts at 0x7f75704c9ee8
  0x00007f75704c9da0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704c9da4: movabs $0x7f757036e3e0,%r11
  0x00007f75704c9dae: cmp    %r11,%rax
  0x00007f75704c9db1: jbe    0x00007f75704c9dca
  0x00007f75704c9db7: movabs $0x7f757046e3e0,%r11
  0x00007f75704c9dc1: cmp    %r11,%rax
  0x00007f75704c9dc4: jb     0x00007f75704c9e8d
  0x00007f75704c9dca: movabs $0x7f7570369420,%r11
  0x00007f75704c9dd4: cmp    %r11,%rax
  0x00007f75704c9dd7: jbe    0x00007f75704c9df0
  0x00007f75704c9ddd: movabs $0x7f757036de58,%r11
  0x00007f75704c9de7: cmp    %r11,%rax
  0x00007f75704c9dea: jb     0x00007f75704c9e8d
  0x00007f75704c9df0: movabs $0x7f75704a9820,%r11
  0x00007f75704c9dfa: cmp    %r11,%rax
  0x00007f75704c9dfd: jbe    0x00007f75704c9e16
  0x00007f75704c9e03: movabs $0x7f75704af5e0,%r11
  0x00007f75704c9e0d: cmp    %r11,%rax
  0x00007f75704c9e10: jb     0x00007f75704c9e8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704c9e16: mov    %rsp,-0x28(%rsp)
  0x00007f75704c9e1b: sub    $0x80,%rsp
  0x00007f75704c9e22: mov    %rax,0x78(%rsp)
  0x00007f75704c9e27: mov    %rcx,0x70(%rsp)
  0x00007f75704c9e2c: mov    %rdx,0x68(%rsp)
  0x00007f75704c9e31: mov    %rbx,0x60(%rsp)
  0x00007f75704c9e36: mov    %rbp,0x50(%rsp)
  0x00007f75704c9e3b: mov    %rsi,0x48(%rsp)
  0x00007f75704c9e40: mov    %rdi,0x40(%rsp)
  0x00007f75704c9e45: mov    %r8,0x38(%rsp)
  0x00007f75704c9e4a: mov    %r9,0x30(%rsp)
  0x00007f75704c9e4f: mov    %r10,0x28(%rsp)
  0x00007f75704c9e54: mov    %r11,0x20(%rsp)
  0x00007f75704c9e59: mov    %r12,0x18(%rsp)
  0x00007f75704c9e5e: mov    %r13,0x10(%rsp)
  0x00007f75704c9e63: mov    %r14,0x8(%rsp)
  0x00007f75704c9e68: mov    %r15,(%rsp)
  0x00007f75704c9e6c: movabs $0x7f758592f470,%rdi
  0x00007f75704c9e76: movabs $0x7f75704c9e16,%rsi
  0x00007f75704c9e80: mov    %rsp,%rdx
  0x00007f75704c9e83: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9e87: callq  0x00007f75853729fa
  0x00007f75704c9e8c: hlt    
  ;; } verify_i2ce 
  0x00007f75704c9e8d: mov    %rsp,%r11
  0x00007f75704c9e90: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9e94: push   %rax
  0x00007f75704c9e95: mov    %r11,%rax
  0x00007f75704c9e98: mov    0x50(%rbx),%r11
  0x00007f75704c9e9c: mov    0x28(%rax),%esi
  0x00007f75704c9e9f: mov    0x20(%rax),%edx
  0x00007f75704c9ea2: mov    0x18(%rax),%rcx
  0x00007f75704c9ea6: mov    0x10(%rax),%r8d
  0x00007f75704c9eaa: mov    0x8(%rax),%r9d
  0x00007f75704c9eae: mov    %rbx,0x258(%r15)
  0x00007f75704c9eb5: mov    %rbx,%rax
  0x00007f75704c9eb8: jmpq   *%r11
  0x00007f75704c9ebb: mov    0x8(%rsi),%ebx
  0x00007f75704c9ebe: shl    $0x3,%rbx
  0x00007f75704c9ec2: cmp    0x10(%rax),%rbx
  0x00007f75704c9ec6: mov    0x8(%rax),%rbx
  0x00007f75704c9eca: je     0x00007f75704c9ed5
  0x00007f75704c9ed0: jmpq   0x00007f757046ec40
  0x00007f75704c9ed5: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c9edd: je     0x00007f75704c9fd8
  0x00007f75704c9ee3: jmpq   0x00007f757046ec40
  0x00007f75704c9ee8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704c9ef0: je     0x00007f75704c9fd8
  0x00007f75704c9ef6: mov    %rsp,%r13
  0x00007f75704c9ef9: mov    (%rsp),%rax
  0x00007f75704c9efd: and    $0xfffffffffffffff0,%rsp
  0x00007f75704c9f01: pushfq 
  0x00007f75704c9f02: sub    $0x8,%rsp
  0x00007f75704c9f06: mov    %rsp,-0x28(%rsp)
  0x00007f75704c9f0b: sub    $0x80,%rsp
  0x00007f75704c9f12: mov    %rax,0x78(%rsp)
  0x00007f75704c9f17: mov    %rcx,0x70(%rsp)
  0x00007f75704c9f1c: mov    %rdx,0x68(%rsp)
  0x00007f75704c9f21: mov    %rbx,0x60(%rsp)
  0x00007f75704c9f26: mov    %rbp,0x50(%rsp)
  0x00007f75704c9f2b: mov    %rsi,0x48(%rsp)
  0x00007f75704c9f30: mov    %rdi,0x40(%rsp)
  0x00007f75704c9f35: mov    %r8,0x38(%rsp)
  0x00007f75704c9f3a: mov    %r9,0x30(%rsp)
  0x00007f75704c9f3f: mov    %r10,0x28(%rsp)
  0x00007f75704c9f44: mov    %r11,0x20(%rsp)
  0x00007f75704c9f49: mov    %r12,0x18(%rsp)
  0x00007f75704c9f4e: mov    %r13,0x10(%rsp)
  0x00007f75704c9f53: mov    %r14,0x8(%rsp)
  0x00007f75704c9f58: mov    %r15,(%rsp)
  0x00007f75704c9f5c: sub    $0x200,%rsp
  0x00007f75704c9f63: fxsave64 (%rsp)
  0x00007f75704c9f68: mov    %rbx,%rdi
  0x00007f75704c9f6b: mov    %rax,%rsi
  0x00007f75704c9f6e: callq  0x00007f7585522bca
  0x00007f75704c9f73: fxrstor64 (%rsp)
  0x00007f75704c9f78: add    $0x200,%rsp
  0x00007f75704c9f7f: mov    (%rsp),%r15
  0x00007f75704c9f83: mov    0x8(%rsp),%r14
  0x00007f75704c9f88: mov    0x10(%rsp),%r13
  0x00007f75704c9f8d: mov    0x18(%rsp),%r12
  0x00007f75704c9f92: mov    0x20(%rsp),%r11
  0x00007f75704c9f97: mov    0x28(%rsp),%r10
  0x00007f75704c9f9c: mov    0x30(%rsp),%r9
  0x00007f75704c9fa1: mov    0x38(%rsp),%r8
  0x00007f75704c9fa6: mov    0x40(%rsp),%rdi
  0x00007f75704c9fab: mov    0x48(%rsp),%rsi
  0x00007f75704c9fb0: mov    0x50(%rsp),%rbp
  0x00007f75704c9fb5: mov    0x60(%rsp),%rbx
  0x00007f75704c9fba: mov    0x68(%rsp),%rdx
  0x00007f75704c9fbf: mov    0x70(%rsp),%rcx
  0x00007f75704c9fc4: mov    0x78(%rsp),%rax
  0x00007f75704c9fc9: add    $0x80,%rsp
  0x00007f75704c9fd0: add    $0x8,%rsp
  0x00007f75704c9fd4: popfq  
  0x00007f75704c9fd5: mov    %r13,%rsp
  0x00007f75704c9fd8: pop    %rax
  0x00007f75704c9fd9: mov    %rsp,%r13
  0x00007f75704c9fdc: sub    $0x30,%rsp
  0x00007f75704c9fe0: mov    %rax,(%rsp)
  0x00007f75704c9fe4: mov    %esi,0x28(%rsp)
  0x00007f75704c9fe8: mov    %edx,0x20(%rsp)
  0x00007f75704c9fec: mov    %rcx,0x18(%rsp)
  0x00007f75704c9ff1: mov    %r8d,0x10(%rsp)
  0x00007f75704c9ff6: mov    %r9d,0x8(%rsp)
  0x00007f75704c9ffb: mov    0x40(%rbx),%rcx
  0x00007f75704c9fff: jmpq   *%rcx

AHE@0x00007f758012c9c0: 0xaab00000 i2c: 0x00007f75704ca0e0 c2i: 0x00007f75704ca220 c2iUV: 0x00007f75704ca1f3
i2c argument handler #92 for: static (II[C)V (591 bytes generated)
c2i argument handler starts at 0x7f75704ca220
  0x00007f75704ca0e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704ca0e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704ca0ee: cmp    %r11,%rax
  0x00007f75704ca0f1: jbe    0x00007f75704ca10a
  0x00007f75704ca0f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704ca101: cmp    %r11,%rax
  0x00007f75704ca104: jb     0x00007f75704ca1cd
  0x00007f75704ca10a: movabs $0x7f7570369420,%r11
  0x00007f75704ca114: cmp    %r11,%rax
  0x00007f75704ca117: jbe    0x00007f75704ca130
  0x00007f75704ca11d: movabs $0x7f757036de58,%r11
  0x00007f75704ca127: cmp    %r11,%rax
  0x00007f75704ca12a: jb     0x00007f75704ca1cd
  0x00007f75704ca130: movabs $0x7f75704a9820,%r11
  0x00007f75704ca13a: cmp    %r11,%rax
  0x00007f75704ca13d: jbe    0x00007f75704ca156
  0x00007f75704ca143: movabs $0x7f75704af5e0,%r11
  0x00007f75704ca14d: cmp    %r11,%rax
  0x00007f75704ca150: jb     0x00007f75704ca1cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704ca156: mov    %rsp,-0x28(%rsp)
  0x00007f75704ca15b: sub    $0x80,%rsp
  0x00007f75704ca162: mov    %rax,0x78(%rsp)
  0x00007f75704ca167: mov    %rcx,0x70(%rsp)
  0x00007f75704ca16c: mov    %rdx,0x68(%rsp)
  0x00007f75704ca171: mov    %rbx,0x60(%rsp)
  0x00007f75704ca176: mov    %rbp,0x50(%rsp)
  0x00007f75704ca17b: mov    %rsi,0x48(%rsp)
  0x00007f75704ca180: mov    %rdi,0x40(%rsp)
  0x00007f75704ca185: mov    %r8,0x38(%rsp)
  0x00007f75704ca18a: mov    %r9,0x30(%rsp)
  0x00007f75704ca18f: mov    %r10,0x28(%rsp)
  0x00007f75704ca194: mov    %r11,0x20(%rsp)
  0x00007f75704ca199: mov    %r12,0x18(%rsp)
  0x00007f75704ca19e: mov    %r13,0x10(%rsp)
  0x00007f75704ca1a3: mov    %r14,0x8(%rsp)
  0x00007f75704ca1a8: mov    %r15,(%rsp)
  0x00007f75704ca1ac: movabs $0x7f758592f470,%rdi
  0x00007f75704ca1b6: movabs $0x7f75704ca156,%rsi
  0x00007f75704ca1c0: mov    %rsp,%rdx
  0x00007f75704ca1c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca1c7: callq  0x00007f75853729fa
  0x00007f75704ca1cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704ca1cd: mov    %rsp,%r11
  0x00007f75704ca1d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca1d4: push   %rax
  0x00007f75704ca1d5: mov    %r11,%rax
  0x00007f75704ca1d8: mov    0x50(%rbx),%r11
  0x00007f75704ca1dc: mov    0x18(%rax),%esi
  0x00007f75704ca1df: mov    0x10(%rax),%edx
  0x00007f75704ca1e2: mov    0x8(%rax),%rcx
  0x00007f75704ca1e6: mov    %rbx,0x258(%r15)
  0x00007f75704ca1ed: mov    %rbx,%rax
  0x00007f75704ca1f0: jmpq   *%r11
  0x00007f75704ca1f3: mov    0x8(%rsi),%ebx
  0x00007f75704ca1f6: shl    $0x3,%rbx
  0x00007f75704ca1fa: cmp    0x10(%rax),%rbx
  0x00007f75704ca1fe: mov    0x8(%rax),%rbx
  0x00007f75704ca202: je     0x00007f75704ca20d
  0x00007f75704ca208: jmpq   0x00007f757046ec40
  0x00007f75704ca20d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ca215: je     0x00007f75704ca310
  0x00007f75704ca21b: jmpq   0x00007f757046ec40
  0x00007f75704ca220: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ca228: je     0x00007f75704ca310
  0x00007f75704ca22e: mov    %rsp,%r13
  0x00007f75704ca231: mov    (%rsp),%rax
  0x00007f75704ca235: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca239: pushfq 
  0x00007f75704ca23a: sub    $0x8,%rsp
  0x00007f75704ca23e: mov    %rsp,-0x28(%rsp)
  0x00007f75704ca243: sub    $0x80,%rsp
  0x00007f75704ca24a: mov    %rax,0x78(%rsp)
  0x00007f75704ca24f: mov    %rcx,0x70(%rsp)
  0x00007f75704ca254: mov    %rdx,0x68(%rsp)
  0x00007f75704ca259: mov    %rbx,0x60(%rsp)
  0x00007f75704ca25e: mov    %rbp,0x50(%rsp)
  0x00007f75704ca263: mov    %rsi,0x48(%rsp)
  0x00007f75704ca268: mov    %rdi,0x40(%rsp)
  0x00007f75704ca26d: mov    %r8,0x38(%rsp)
  0x00007f75704ca272: mov    %r9,0x30(%rsp)
  0x00007f75704ca277: mov    %r10,0x28(%rsp)
  0x00007f75704ca27c: mov    %r11,0x20(%rsp)
  0x00007f75704ca281: mov    %r12,0x18(%rsp)
  0x00007f75704ca286: mov    %r13,0x10(%rsp)
  0x00007f75704ca28b: mov    %r14,0x8(%rsp)
  0x00007f75704ca290: mov    %r15,(%rsp)
  0x00007f75704ca294: sub    $0x200,%rsp
  0x00007f75704ca29b: fxsave64 (%rsp)
  0x00007f75704ca2a0: mov    %rbx,%rdi
  0x00007f75704ca2a3: mov    %rax,%rsi
  0x00007f75704ca2a6: callq  0x00007f7585522bca
  0x00007f75704ca2ab: fxrstor64 (%rsp)
  0x00007f75704ca2b0: add    $0x200,%rsp
  0x00007f75704ca2b7: mov    (%rsp),%r15
  0x00007f75704ca2bb: mov    0x8(%rsp),%r14
  0x00007f75704ca2c0: mov    0x10(%rsp),%r13
  0x00007f75704ca2c5: mov    0x18(%rsp),%r12
  0x00007f75704ca2ca: mov    0x20(%rsp),%r11
  0x00007f75704ca2cf: mov    0x28(%rsp),%r10
  0x00007f75704ca2d4: mov    0x30(%rsp),%r9
  0x00007f75704ca2d9: mov    0x38(%rsp),%r8
  0x00007f75704ca2de: mov    0x40(%rsp),%rdi
  0x00007f75704ca2e3: mov    0x48(%rsp),%rsi
  0x00007f75704ca2e8: mov    0x50(%rsp),%rbp
  0x00007f75704ca2ed: mov    0x60(%rsp),%rbx
  0x00007f75704ca2f2: mov    0x68(%rsp),%rdx
  0x00007f75704ca2f7: mov    0x70(%rsp),%rcx
  0x00007f75704ca2fc: mov    0x78(%rsp),%rax
  0x00007f75704ca301: add    $0x80,%rsp
  0x00007f75704ca308: add    $0x8,%rsp
  0x00007f75704ca30c: popfq  
  0x00007f75704ca30d: mov    %r13,%rsp
  0x00007f75704ca310: pop    %rax
  0x00007f75704ca311: mov    %rsp,%r13
  0x00007f75704ca314: sub    $0x20,%rsp
  0x00007f75704ca318: mov    %rax,(%rsp)
  0x00007f75704ca31c: mov    %esi,0x18(%rsp)
  0x00007f75704ca320: mov    %edx,0x10(%rsp)
  0x00007f75704ca324: mov    %rcx,0x8(%rsp)
  0x00007f75704ca329: mov    0x40(%rbx),%rcx
  0x00007f75704ca32d: jmpq   *%rcx

AHE@0x00007f758012ca08: 0xbbbaab00 i2c: 0x00007f75704ca3e0 c2i: 0x00007f75704ca52e c2iUV: 0x00007f75704ca501
i2c argument handler #93 for: receiver (Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; (622 bytes generated)
c2i argument handler starts at 0x7f75704ca52e
  0x00007f75704ca3e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704ca3e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704ca3ee: cmp    %r11,%rax
  0x00007f75704ca3f1: jbe    0x00007f75704ca40a
  0x00007f75704ca3f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704ca401: cmp    %r11,%rax
  0x00007f75704ca404: jb     0x00007f75704ca4cd
  0x00007f75704ca40a: movabs $0x7f7570369420,%r11
  0x00007f75704ca414: cmp    %r11,%rax
  0x00007f75704ca417: jbe    0x00007f75704ca430
  0x00007f75704ca41d: movabs $0x7f757036de58,%r11
  0x00007f75704ca427: cmp    %r11,%rax
  0x00007f75704ca42a: jb     0x00007f75704ca4cd
  0x00007f75704ca430: movabs $0x7f75704a9820,%r11
  0x00007f75704ca43a: cmp    %r11,%rax
  0x00007f75704ca43d: jbe    0x00007f75704ca456
  0x00007f75704ca443: movabs $0x7f75704af5e0,%r11
  0x00007f75704ca44d: cmp    %r11,%rax
  0x00007f75704ca450: jb     0x00007f75704ca4cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704ca456: mov    %rsp,-0x28(%rsp)
  0x00007f75704ca45b: sub    $0x80,%rsp
  0x00007f75704ca462: mov    %rax,0x78(%rsp)
  0x00007f75704ca467: mov    %rcx,0x70(%rsp)
  0x00007f75704ca46c: mov    %rdx,0x68(%rsp)
  0x00007f75704ca471: mov    %rbx,0x60(%rsp)
  0x00007f75704ca476: mov    %rbp,0x50(%rsp)
  0x00007f75704ca47b: mov    %rsi,0x48(%rsp)
  0x00007f75704ca480: mov    %rdi,0x40(%rsp)
  0x00007f75704ca485: mov    %r8,0x38(%rsp)
  0x00007f75704ca48a: mov    %r9,0x30(%rsp)
  0x00007f75704ca48f: mov    %r10,0x28(%rsp)
  0x00007f75704ca494: mov    %r11,0x20(%rsp)
  0x00007f75704ca499: mov    %r12,0x18(%rsp)
  0x00007f75704ca49e: mov    %r13,0x10(%rsp)
  0x00007f75704ca4a3: mov    %r14,0x8(%rsp)
  0x00007f75704ca4a8: mov    %r15,(%rsp)
  0x00007f75704ca4ac: movabs $0x7f758592f470,%rdi
  0x00007f75704ca4b6: movabs $0x7f75704ca456,%rsi
  0x00007f75704ca4c0: mov    %rsp,%rdx
  0x00007f75704ca4c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca4c7: callq  0x00007f75853729fa
  0x00007f75704ca4cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704ca4cd: mov    %rsp,%r11
  0x00007f75704ca4d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca4d4: push   %rax
  0x00007f75704ca4d5: mov    %r11,%rax
  0x00007f75704ca4d8: mov    0x50(%rbx),%r11
  0x00007f75704ca4dc: mov    0x30(%rax),%rsi
  0x00007f75704ca4e0: mov    0x28(%rax),%rdx
  0x00007f75704ca4e4: mov    0x20(%rax),%rcx
  0x00007f75704ca4e8: mov    0x18(%rax),%r8d
  0x00007f75704ca4ec: mov    0x10(%rax),%r9d
  0x00007f75704ca4f0: mov    0x8(%rax),%rdi
  0x00007f75704ca4f4: mov    %rbx,0x258(%r15)
  0x00007f75704ca4fb: mov    %rbx,%rax
  0x00007f75704ca4fe: jmpq   *%r11
  0x00007f75704ca501: mov    0x8(%rsi),%ebx
  0x00007f75704ca504: shl    $0x3,%rbx
  0x00007f75704ca508: cmp    0x10(%rax),%rbx
  0x00007f75704ca50c: mov    0x8(%rax),%rbx
  0x00007f75704ca510: je     0x00007f75704ca51b
  0x00007f75704ca516: jmpq   0x00007f757046ec40
  0x00007f75704ca51b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ca523: je     0x00007f75704ca61e
  0x00007f75704ca529: jmpq   0x00007f757046ec40
  0x00007f75704ca52e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ca536: je     0x00007f75704ca61e
  0x00007f75704ca53c: mov    %rsp,%r13
  0x00007f75704ca53f: mov    (%rsp),%rax
  0x00007f75704ca543: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca547: pushfq 
  0x00007f75704ca548: sub    $0x8,%rsp
  0x00007f75704ca54c: mov    %rsp,-0x28(%rsp)
  0x00007f75704ca551: sub    $0x80,%rsp
  0x00007f75704ca558: mov    %rax,0x78(%rsp)
  0x00007f75704ca55d: mov    %rcx,0x70(%rsp)
  0x00007f75704ca562: mov    %rdx,0x68(%rsp)
  0x00007f75704ca567: mov    %rbx,0x60(%rsp)
  0x00007f75704ca56c: mov    %rbp,0x50(%rsp)
  0x00007f75704ca571: mov    %rsi,0x48(%rsp)
  0x00007f75704ca576: mov    %rdi,0x40(%rsp)
  0x00007f75704ca57b: mov    %r8,0x38(%rsp)
  0x00007f75704ca580: mov    %r9,0x30(%rsp)
  0x00007f75704ca585: mov    %r10,0x28(%rsp)
  0x00007f75704ca58a: mov    %r11,0x20(%rsp)
  0x00007f75704ca58f: mov    %r12,0x18(%rsp)
  0x00007f75704ca594: mov    %r13,0x10(%rsp)
  0x00007f75704ca599: mov    %r14,0x8(%rsp)
  0x00007f75704ca59e: mov    %r15,(%rsp)
  0x00007f75704ca5a2: sub    $0x200,%rsp
  0x00007f75704ca5a9: fxsave64 (%rsp)
  0x00007f75704ca5ae: mov    %rbx,%rdi
  0x00007f75704ca5b1: mov    %rax,%rsi
  0x00007f75704ca5b4: callq  0x00007f7585522bca
  0x00007f75704ca5b9: fxrstor64 (%rsp)
  0x00007f75704ca5be: add    $0x200,%rsp
  0x00007f75704ca5c5: mov    (%rsp),%r15
  0x00007f75704ca5c9: mov    0x8(%rsp),%r14
  0x00007f75704ca5ce: mov    0x10(%rsp),%r13
  0x00007f75704ca5d3: mov    0x18(%rsp),%r12
  0x00007f75704ca5d8: mov    0x20(%rsp),%r11
  0x00007f75704ca5dd: mov    0x28(%rsp),%r10
  0x00007f75704ca5e2: mov    0x30(%rsp),%r9
  0x00007f75704ca5e7: mov    0x38(%rsp),%r8
  0x00007f75704ca5ec: mov    0x40(%rsp),%rdi
  0x00007f75704ca5f1: mov    0x48(%rsp),%rsi
  0x00007f75704ca5f6: mov    0x50(%rsp),%rbp
  0x00007f75704ca5fb: mov    0x60(%rsp),%rbx
  0x00007f75704ca600: mov    0x68(%rsp),%rdx
  0x00007f75704ca605: mov    0x70(%rsp),%rcx
  0x00007f75704ca60a: mov    0x78(%rsp),%rax
  0x00007f75704ca60f: add    $0x80,%rsp
  0x00007f75704ca616: add    $0x8,%rsp
  0x00007f75704ca61a: popfq  
  0x00007f75704ca61b: mov    %r13,%rsp
  0x00007f75704ca61e: pop    %rax
  0x00007f75704ca61f: mov    %rsp,%r13
  0x00007f75704ca622: sub    $0x40,%rsp
  0x00007f75704ca626: mov    %rax,(%rsp)
  0x00007f75704ca62a: mov    %rsi,0x30(%rsp)
  0x00007f75704ca62f: mov    %rdx,0x28(%rsp)
  0x00007f75704ca634: mov    %rcx,0x20(%rsp)
  0x00007f75704ca639: mov    %r8d,0x18(%rsp)
  0x00007f75704ca63e: mov    %r9d,0x10(%rsp)
  0x00007f75704ca643: mov    %rdi,0x8(%rsp)
  0x00007f75704ca648: mov    0x40(%rbx),%rcx
  0x00007f75704ca64c: jmpq   *%rcx

AHE@0x00007f758012ca50: 0xaba00000 i2c: 0x00007f75704ca720 c2i: 0x00007f75704ca860 c2iUV: 0x00007f75704ca833
i2c argument handler #94 for: static (I[CI)I (591 bytes generated)
c2i argument handler starts at 0x7f75704ca860
  0x00007f75704ca720: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704ca724: movabs $0x7f757036e3e0,%r11
  0x00007f75704ca72e: cmp    %r11,%rax
  0x00007f75704ca731: jbe    0x00007f75704ca74a
  0x00007f75704ca737: movabs $0x7f757046e3e0,%r11
  0x00007f75704ca741: cmp    %r11,%rax
  0x00007f75704ca744: jb     0x00007f75704ca80d
  0x00007f75704ca74a: movabs $0x7f7570369420,%r11
  0x00007f75704ca754: cmp    %r11,%rax
  0x00007f75704ca757: jbe    0x00007f75704ca770
  0x00007f75704ca75d: movabs $0x7f757036de58,%r11
  0x00007f75704ca767: cmp    %r11,%rax
  0x00007f75704ca76a: jb     0x00007f75704ca80d
  0x00007f75704ca770: movabs $0x7f75704a9820,%r11
  0x00007f75704ca77a: cmp    %r11,%rax
  0x00007f75704ca77d: jbe    0x00007f75704ca796
  0x00007f75704ca783: movabs $0x7f75704af5e0,%r11
  0x00007f75704ca78d: cmp    %r11,%rax
  0x00007f75704ca790: jb     0x00007f75704ca80d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704ca796: mov    %rsp,-0x28(%rsp)
  0x00007f75704ca79b: sub    $0x80,%rsp
  0x00007f75704ca7a2: mov    %rax,0x78(%rsp)
  0x00007f75704ca7a7: mov    %rcx,0x70(%rsp)
  0x00007f75704ca7ac: mov    %rdx,0x68(%rsp)
  0x00007f75704ca7b1: mov    %rbx,0x60(%rsp)
  0x00007f75704ca7b6: mov    %rbp,0x50(%rsp)
  0x00007f75704ca7bb: mov    %rsi,0x48(%rsp)
  0x00007f75704ca7c0: mov    %rdi,0x40(%rsp)
  0x00007f75704ca7c5: mov    %r8,0x38(%rsp)
  0x00007f75704ca7ca: mov    %r9,0x30(%rsp)
  0x00007f75704ca7cf: mov    %r10,0x28(%rsp)
  0x00007f75704ca7d4: mov    %r11,0x20(%rsp)
  0x00007f75704ca7d9: mov    %r12,0x18(%rsp)
  0x00007f75704ca7de: mov    %r13,0x10(%rsp)
  0x00007f75704ca7e3: mov    %r14,0x8(%rsp)
  0x00007f75704ca7e8: mov    %r15,(%rsp)
  0x00007f75704ca7ec: movabs $0x7f758592f470,%rdi
  0x00007f75704ca7f6: movabs $0x7f75704ca796,%rsi
  0x00007f75704ca800: mov    %rsp,%rdx
  0x00007f75704ca803: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca807: callq  0x00007f75853729fa
  0x00007f75704ca80c: hlt    
  ;; } verify_i2ce 
  0x00007f75704ca80d: mov    %rsp,%r11
  0x00007f75704ca810: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca814: push   %rax
  0x00007f75704ca815: mov    %r11,%rax
  0x00007f75704ca818: mov    0x50(%rbx),%r11
  0x00007f75704ca81c: mov    0x18(%rax),%esi
  0x00007f75704ca81f: mov    0x10(%rax),%rdx
  0x00007f75704ca823: mov    0x8(%rax),%ecx
  0x00007f75704ca826: mov    %rbx,0x258(%r15)
  0x00007f75704ca82d: mov    %rbx,%rax
  0x00007f75704ca830: jmpq   *%r11
  0x00007f75704ca833: mov    0x8(%rsi),%ebx
  0x00007f75704ca836: shl    $0x3,%rbx
  0x00007f75704ca83a: cmp    0x10(%rax),%rbx
  0x00007f75704ca83e: mov    0x8(%rax),%rbx
  0x00007f75704ca842: je     0x00007f75704ca84d
  0x00007f75704ca848: jmpq   0x00007f757046ec40
  0x00007f75704ca84d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ca855: je     0x00007f75704ca950
  0x00007f75704ca85b: jmpq   0x00007f757046ec40
  0x00007f75704ca860: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ca868: je     0x00007f75704ca950
  0x00007f75704ca86e: mov    %rsp,%r13
  0x00007f75704ca871: mov    (%rsp),%rax
  0x00007f75704ca875: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ca879: pushfq 
  0x00007f75704ca87a: sub    $0x8,%rsp
  0x00007f75704ca87e: mov    %rsp,-0x28(%rsp)
  0x00007f75704ca883: sub    $0x80,%rsp
  0x00007f75704ca88a: mov    %rax,0x78(%rsp)
  0x00007f75704ca88f: mov    %rcx,0x70(%rsp)
  0x00007f75704ca894: mov    %rdx,0x68(%rsp)
  0x00007f75704ca899: mov    %rbx,0x60(%rsp)
  0x00007f75704ca89e: mov    %rbp,0x50(%rsp)
  0x00007f75704ca8a3: mov    %rsi,0x48(%rsp)
  0x00007f75704ca8a8: mov    %rdi,0x40(%rsp)
  0x00007f75704ca8ad: mov    %r8,0x38(%rsp)
  0x00007f75704ca8b2: mov    %r9,0x30(%rsp)
  0x00007f75704ca8b7: mov    %r10,0x28(%rsp)
  0x00007f75704ca8bc: mov    %r11,0x20(%rsp)
  0x00007f75704ca8c1: mov    %r12,0x18(%rsp)
  0x00007f75704ca8c6: mov    %r13,0x10(%rsp)
  0x00007f75704ca8cb: mov    %r14,0x8(%rsp)
  0x00007f75704ca8d0: mov    %r15,(%rsp)
  0x00007f75704ca8d4: sub    $0x200,%rsp
  0x00007f75704ca8db: fxsave64 (%rsp)
  0x00007f75704ca8e0: mov    %rbx,%rdi
  0x00007f75704ca8e3: mov    %rax,%rsi
  0x00007f75704ca8e6: callq  0x00007f7585522bca
  0x00007f75704ca8eb: fxrstor64 (%rsp)
  0x00007f75704ca8f0: add    $0x200,%rsp
  0x00007f75704ca8f7: mov    (%rsp),%r15
  0x00007f75704ca8fb: mov    0x8(%rsp),%r14
  0x00007f75704ca900: mov    0x10(%rsp),%r13
  0x00007f75704ca905: mov    0x18(%rsp),%r12
  0x00007f75704ca90a: mov    0x20(%rsp),%r11
  0x00007f75704ca90f: mov    0x28(%rsp),%r10
  0x00007f75704ca914: mov    0x30(%rsp),%r9
  0x00007f75704ca919: mov    0x38(%rsp),%r8
  0x00007f75704ca91e: mov    0x40(%rsp),%rdi
  0x00007f75704ca923: mov    0x48(%rsp),%rsi
  0x00007f75704ca928: mov    0x50(%rsp),%rbp
  0x00007f75704ca92d: mov    0x60(%rsp),%rbx
  0x00007f75704ca932: mov    0x68(%rsp),%rdx
  0x00007f75704ca937: mov    0x70(%rsp),%rcx
  0x00007f75704ca93c: mov    0x78(%rsp),%rax
  0x00007f75704ca941: add    $0x80,%rsp
  0x00007f75704ca948: add    $0x8,%rsp
  0x00007f75704ca94c: popfq  
  0x00007f75704ca94d: mov    %r13,%rsp
  0x00007f75704ca950: pop    %rax
  0x00007f75704ca951: mov    %rsp,%r13
  0x00007f75704ca954: sub    $0x20,%rsp
  0x00007f75704ca958: mov    %rax,(%rsp)
  0x00007f75704ca95c: mov    %esi,0x18(%rsp)
  0x00007f75704ca960: mov    %rdx,0x10(%rsp)
  0x00007f75704ca965: mov    %ecx,0x8(%rsp)
  0x00007f75704ca969: mov    0x40(%rbx),%rcx
  0x00007f75704ca96d: jmpq   *%rcx

AHE@0x00007f758012ca98: 0xbbbbbabb i2c: 0x00007f75704caa20 c2i: 0x00007f75704cab83 c2iUV: 0x00007f75704cab56
i2c argument handler #95 for: static (Ljava/lang/StringBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (662 bytes generated)
c2i argument handler starts at 0x7f75704cab83
  0x00007f75704caa20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704caa24: movabs $0x7f757036e3e0,%r11
  0x00007f75704caa2e: cmp    %r11,%rax
  0x00007f75704caa31: jbe    0x00007f75704caa4a
  0x00007f75704caa37: movabs $0x7f757046e3e0,%r11
  0x00007f75704caa41: cmp    %r11,%rax
  0x00007f75704caa44: jb     0x00007f75704cab0d
  0x00007f75704caa4a: movabs $0x7f7570369420,%r11
  0x00007f75704caa54: cmp    %r11,%rax
  0x00007f75704caa57: jbe    0x00007f75704caa70
  0x00007f75704caa5d: movabs $0x7f757036de58,%r11
  0x00007f75704caa67: cmp    %r11,%rax
  0x00007f75704caa6a: jb     0x00007f75704cab0d
  0x00007f75704caa70: movabs $0x7f75704a9820,%r11
  0x00007f75704caa7a: cmp    %r11,%rax
  0x00007f75704caa7d: jbe    0x00007f75704caa96
  0x00007f75704caa83: movabs $0x7f75704af5e0,%r11
  0x00007f75704caa8d: cmp    %r11,%rax
  0x00007f75704caa90: jb     0x00007f75704cab0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704caa96: mov    %rsp,-0x28(%rsp)
  0x00007f75704caa9b: sub    $0x80,%rsp
  0x00007f75704caaa2: mov    %rax,0x78(%rsp)
  0x00007f75704caaa7: mov    %rcx,0x70(%rsp)
  0x00007f75704caaac: mov    %rdx,0x68(%rsp)
  0x00007f75704caab1: mov    %rbx,0x60(%rsp)
  0x00007f75704caab6: mov    %rbp,0x50(%rsp)
  0x00007f75704caabb: mov    %rsi,0x48(%rsp)
  0x00007f75704caac0: mov    %rdi,0x40(%rsp)
  0x00007f75704caac5: mov    %r8,0x38(%rsp)
  0x00007f75704caaca: mov    %r9,0x30(%rsp)
  0x00007f75704caacf: mov    %r10,0x28(%rsp)
  0x00007f75704caad4: mov    %r11,0x20(%rsp)
  0x00007f75704caad9: mov    %r12,0x18(%rsp)
  0x00007f75704caade: mov    %r13,0x10(%rsp)
  0x00007f75704caae3: mov    %r14,0x8(%rsp)
  0x00007f75704caae8: mov    %r15,(%rsp)
  0x00007f75704caaec: movabs $0x7f758592f470,%rdi
  0x00007f75704caaf6: movabs $0x7f75704caa96,%rsi
  0x00007f75704cab00: mov    %rsp,%rdx
  0x00007f75704cab03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cab07: callq  0x00007f75853729fa
  0x00007f75704cab0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cab0d: mov    %rsp,%r11
  0x00007f75704cab10: sub    $0x10,%rsp
  0x00007f75704cab14: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cab18: push   %rax
  0x00007f75704cab19: mov    %r11,%rax
  0x00007f75704cab1c: mov    0x50(%rbx),%r11
  0x00007f75704cab20: mov    0x40(%rax),%rsi
  0x00007f75704cab24: mov    0x38(%rax),%rdx
  0x00007f75704cab28: mov    0x30(%rax),%rcx
  0x00007f75704cab2c: mov    0x28(%rax),%r8
  0x00007f75704cab30: mov    0x20(%rax),%r9
  0x00007f75704cab34: mov    0x18(%rax),%edi
  0x00007f75704cab37: mov    0x10(%rax),%r13
  0x00007f75704cab3b: mov    %r13,0x8(%rsp)
  0x00007f75704cab40: mov    0x8(%rax),%r13
  0x00007f75704cab44: mov    %r13,0x10(%rsp)
  0x00007f75704cab49: mov    %rbx,0x258(%r15)
  0x00007f75704cab50: mov    %rbx,%rax
  0x00007f75704cab53: jmpq   *%r11
  0x00007f75704cab56: mov    0x8(%rsi),%ebx
  0x00007f75704cab59: shl    $0x3,%rbx
  0x00007f75704cab5d: cmp    0x10(%rax),%rbx
  0x00007f75704cab61: mov    0x8(%rax),%rbx
  0x00007f75704cab65: je     0x00007f75704cab70
  0x00007f75704cab6b: jmpq   0x00007f757046ec40
  0x00007f75704cab70: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cab78: je     0x00007f75704cac73
  0x00007f75704cab7e: jmpq   0x00007f757046ec40
  0x00007f75704cab83: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cab8b: je     0x00007f75704cac73
  0x00007f75704cab91: mov    %rsp,%r13
  0x00007f75704cab94: mov    (%rsp),%rax
  0x00007f75704cab98: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cab9c: pushfq 
  0x00007f75704cab9d: sub    $0x8,%rsp
  0x00007f75704caba1: mov    %rsp,-0x28(%rsp)
  0x00007f75704caba6: sub    $0x80,%rsp
  0x00007f75704cabad: mov    %rax,0x78(%rsp)
  0x00007f75704cabb2: mov    %rcx,0x70(%rsp)
  0x00007f75704cabb7: mov    %rdx,0x68(%rsp)
  0x00007f75704cabbc: mov    %rbx,0x60(%rsp)
  0x00007f75704cabc1: mov    %rbp,0x50(%rsp)
  0x00007f75704cabc6: mov    %rsi,0x48(%rsp)
  0x00007f75704cabcb: mov    %rdi,0x40(%rsp)
  0x00007f75704cabd0: mov    %r8,0x38(%rsp)
  0x00007f75704cabd5: mov    %r9,0x30(%rsp)
  0x00007f75704cabda: mov    %r10,0x28(%rsp)
  0x00007f75704cabdf: mov    %r11,0x20(%rsp)
  0x00007f75704cabe4: mov    %r12,0x18(%rsp)
  0x00007f75704cabe9: mov    %r13,0x10(%rsp)
  0x00007f75704cabee: mov    %r14,0x8(%rsp)
  0x00007f75704cabf3: mov    %r15,(%rsp)
  0x00007f75704cabf7: sub    $0x200,%rsp
  0x00007f75704cabfe: fxsave64 (%rsp)
  0x00007f75704cac03: mov    %rbx,%rdi
  0x00007f75704cac06: mov    %rax,%rsi
  0x00007f75704cac09: callq  0x00007f7585522bca
  0x00007f75704cac0e: fxrstor64 (%rsp)
  0x00007f75704cac13: add    $0x200,%rsp
  0x00007f75704cac1a: mov    (%rsp),%r15
  0x00007f75704cac1e: mov    0x8(%rsp),%r14
  0x00007f75704cac23: mov    0x10(%rsp),%r13
  0x00007f75704cac28: mov    0x18(%rsp),%r12
  0x00007f75704cac2d: mov    0x20(%rsp),%r11
  0x00007f75704cac32: mov    0x28(%rsp),%r10
  0x00007f75704cac37: mov    0x30(%rsp),%r9
  0x00007f75704cac3c: mov    0x38(%rsp),%r8
  0x00007f75704cac41: mov    0x40(%rsp),%rdi
  0x00007f75704cac46: mov    0x48(%rsp),%rsi
  0x00007f75704cac4b: mov    0x50(%rsp),%rbp
  0x00007f75704cac50: mov    0x60(%rsp),%rbx
  0x00007f75704cac55: mov    0x68(%rsp),%rdx
  0x00007f75704cac5a: mov    0x70(%rsp),%rcx
  0x00007f75704cac5f: mov    0x78(%rsp),%rax
  0x00007f75704cac64: add    $0x80,%rsp
  0x00007f75704cac6b: add    $0x8,%rsp
  0x00007f75704cac6f: popfq  
  0x00007f75704cac70: mov    %r13,%rsp
  0x00007f75704cac73: pop    %rax
  0x00007f75704cac74: mov    %rsp,%r13
  0x00007f75704cac77: sub    $0x50,%rsp
  0x00007f75704cac7b: mov    %rax,(%rsp)
  0x00007f75704cac7f: mov    %rsi,0x40(%rsp)
  0x00007f75704cac84: mov    %rdx,0x38(%rsp)
  0x00007f75704cac89: mov    %rcx,0x30(%rsp)
  0x00007f75704cac8e: mov    %r8,0x28(%rsp)
  0x00007f75704cac93: mov    %r9,0x20(%rsp)
  0x00007f75704cac98: mov    %edi,0x18(%rsp)
  0x00007f75704cac9c: mov    0x50(%rsp),%rax
  0x00007f75704caca1: mov    %rax,0x10(%rsp)
  0x00007f75704caca6: mov    0x58(%rsp),%rax
  0x00007f75704cacab: mov    %rax,0x8(%rsp)
  0x00007f75704cacb0: mov    0x40(%rbx),%rcx
  0x00007f75704cacb4: jmpq   *%rcx

AHE@0x00007f758012cae0: 0xabebe000 i2c: 0x00007f75704cad60 c2i: 0x00007f75704caea1 c2iUV: 0x00007f75704cae74
i2c argument handler #96 for: static (CJJ)Z (623 bytes generated)
c2i argument handler starts at 0x7f75704caea1
  0x00007f75704cad60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cad64: movabs $0x7f757036e3e0,%r11
  0x00007f75704cad6e: cmp    %r11,%rax
  0x00007f75704cad71: jbe    0x00007f75704cad8a
  0x00007f75704cad77: movabs $0x7f757046e3e0,%r11
  0x00007f75704cad81: cmp    %r11,%rax
  0x00007f75704cad84: jb     0x00007f75704cae4d
  0x00007f75704cad8a: movabs $0x7f7570369420,%r11
  0x00007f75704cad94: cmp    %r11,%rax
  0x00007f75704cad97: jbe    0x00007f75704cadb0
  0x00007f75704cad9d: movabs $0x7f757036de58,%r11
  0x00007f75704cada7: cmp    %r11,%rax
  0x00007f75704cadaa: jb     0x00007f75704cae4d
  0x00007f75704cadb0: movabs $0x7f75704a9820,%r11
  0x00007f75704cadba: cmp    %r11,%rax
  0x00007f75704cadbd: jbe    0x00007f75704cadd6
  0x00007f75704cadc3: movabs $0x7f75704af5e0,%r11
  0x00007f75704cadcd: cmp    %r11,%rax
  0x00007f75704cadd0: jb     0x00007f75704cae4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cadd6: mov    %rsp,-0x28(%rsp)
  0x00007f75704caddb: sub    $0x80,%rsp
  0x00007f75704cade2: mov    %rax,0x78(%rsp)
  0x00007f75704cade7: mov    %rcx,0x70(%rsp)
  0x00007f75704cadec: mov    %rdx,0x68(%rsp)
  0x00007f75704cadf1: mov    %rbx,0x60(%rsp)
  0x00007f75704cadf6: mov    %rbp,0x50(%rsp)
  0x00007f75704cadfb: mov    %rsi,0x48(%rsp)
  0x00007f75704cae00: mov    %rdi,0x40(%rsp)
  0x00007f75704cae05: mov    %r8,0x38(%rsp)
  0x00007f75704cae0a: mov    %r9,0x30(%rsp)
  0x00007f75704cae0f: mov    %r10,0x28(%rsp)
  0x00007f75704cae14: mov    %r11,0x20(%rsp)
  0x00007f75704cae19: mov    %r12,0x18(%rsp)
  0x00007f75704cae1e: mov    %r13,0x10(%rsp)
  0x00007f75704cae23: mov    %r14,0x8(%rsp)
  0x00007f75704cae28: mov    %r15,(%rsp)
  0x00007f75704cae2c: movabs $0x7f758592f470,%rdi
  0x00007f75704cae36: movabs $0x7f75704cadd6,%rsi
  0x00007f75704cae40: mov    %rsp,%rdx
  0x00007f75704cae43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cae47: callq  0x00007f75853729fa
  0x00007f75704cae4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cae4d: mov    %rsp,%r11
  0x00007f75704cae50: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cae54: push   %rax
  0x00007f75704cae55: mov    %r11,%rax
  0x00007f75704cae58: mov    0x50(%rbx),%r11
  0x00007f75704cae5c: mov    0x28(%rax),%esi
  0x00007f75704cae5f: mov    0x18(%rax),%rdx
  0x00007f75704cae63: mov    0x8(%rax),%rcx
  0x00007f75704cae67: mov    %rbx,0x258(%r15)
  0x00007f75704cae6e: mov    %rbx,%rax
  0x00007f75704cae71: jmpq   *%r11
  0x00007f75704cae74: mov    0x8(%rsi),%ebx
  0x00007f75704cae77: shl    $0x3,%rbx
  0x00007f75704cae7b: cmp    0x10(%rax),%rbx
  0x00007f75704cae7f: mov    0x8(%rax),%rbx
  0x00007f75704cae83: je     0x00007f75704cae8e
  0x00007f75704cae89: jmpq   0x00007f757046ec40
  0x00007f75704cae8e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cae96: je     0x00007f75704caf91
  0x00007f75704cae9c: jmpq   0x00007f757046ec40
  0x00007f75704caea1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704caea9: je     0x00007f75704caf91
  0x00007f75704caeaf: mov    %rsp,%r13
  0x00007f75704caeb2: mov    (%rsp),%rax
  0x00007f75704caeb6: and    $0xfffffffffffffff0,%rsp
  0x00007f75704caeba: pushfq 
  0x00007f75704caebb: sub    $0x8,%rsp
  0x00007f75704caebf: mov    %rsp,-0x28(%rsp)
  0x00007f75704caec4: sub    $0x80,%rsp
  0x00007f75704caecb: mov    %rax,0x78(%rsp)
  0x00007f75704caed0: mov    %rcx,0x70(%rsp)
  0x00007f75704caed5: mov    %rdx,0x68(%rsp)
  0x00007f75704caeda: mov    %rbx,0x60(%rsp)
  0x00007f75704caedf: mov    %rbp,0x50(%rsp)
  0x00007f75704caee4: mov    %rsi,0x48(%rsp)
  0x00007f75704caee9: mov    %rdi,0x40(%rsp)
  0x00007f75704caeee: mov    %r8,0x38(%rsp)
  0x00007f75704caef3: mov    %r9,0x30(%rsp)
  0x00007f75704caef8: mov    %r10,0x28(%rsp)
  0x00007f75704caefd: mov    %r11,0x20(%rsp)
  0x00007f75704caf02: mov    %r12,0x18(%rsp)
  0x00007f75704caf07: mov    %r13,0x10(%rsp)
  0x00007f75704caf0c: mov    %r14,0x8(%rsp)
  0x00007f75704caf11: mov    %r15,(%rsp)
  0x00007f75704caf15: sub    $0x200,%rsp
  0x00007f75704caf1c: fxsave64 (%rsp)
  0x00007f75704caf21: mov    %rbx,%rdi
  0x00007f75704caf24: mov    %rax,%rsi
  0x00007f75704caf27: callq  0x00007f7585522bca
  0x00007f75704caf2c: fxrstor64 (%rsp)
  0x00007f75704caf31: add    $0x200,%rsp
  0x00007f75704caf38: mov    (%rsp),%r15
  0x00007f75704caf3c: mov    0x8(%rsp),%r14
  0x00007f75704caf41: mov    0x10(%rsp),%r13
  0x00007f75704caf46: mov    0x18(%rsp),%r12
  0x00007f75704caf4b: mov    0x20(%rsp),%r11
  0x00007f75704caf50: mov    0x28(%rsp),%r10
  0x00007f75704caf55: mov    0x30(%rsp),%r9
  0x00007f75704caf5a: mov    0x38(%rsp),%r8
  0x00007f75704caf5f: mov    0x40(%rsp),%rdi
  0x00007f75704caf64: mov    0x48(%rsp),%rsi
  0x00007f75704caf69: mov    0x50(%rsp),%rbp
  0x00007f75704caf6e: mov    0x60(%rsp),%rbx
  0x00007f75704caf73: mov    0x68(%rsp),%rdx
  0x00007f75704caf78: mov    0x70(%rsp),%rcx
  0x00007f75704caf7d: mov    0x78(%rsp),%rax
  0x00007f75704caf82: add    $0x80,%rsp
  0x00007f75704caf89: add    $0x8,%rsp
  0x00007f75704caf8d: popfq  
  0x00007f75704caf8e: mov    %r13,%rsp
  0x00007f75704caf91: pop    %rax
  0x00007f75704caf92: mov    %rsp,%r13
  0x00007f75704caf95: sub    $0x30,%rsp
  0x00007f75704caf99: mov    %rax,(%rsp)
  0x00007f75704caf9d: mov    %esi,0x28(%rsp)
  0x00007f75704cafa1: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cafab: mov    %rax,0x20(%rsp)
  0x00007f75704cafb0: mov    %rdx,0x18(%rsp)
  0x00007f75704cafb5: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cafbf: mov    %rax,0x10(%rsp)
  0x00007f75704cafc4: mov    %rcx,0x8(%rsp)
  0x00007f75704cafc9: mov    0x40(%rbx),%rcx
  0x00007f75704cafcd: jmpq   *%rcx

AHE@0x00007f758012cb28: 0xbbbbbabbb0000000 i2c: 0x00007f75704cb0a0 c2i: 0x00007f75704cb20c c2iUV: 0x00007f75704cb1df
i2c argument handler #97 for: static (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (681 bytes generated)
c2i argument handler starts at 0x7f75704cb20c
  0x00007f75704cb0a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cb0a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704cb0ae: cmp    %r11,%rax
  0x00007f75704cb0b1: jbe    0x00007f75704cb0ca
  0x00007f75704cb0b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704cb0c1: cmp    %r11,%rax
  0x00007f75704cb0c4: jb     0x00007f75704cb18d
  0x00007f75704cb0ca: movabs $0x7f7570369420,%r11
  0x00007f75704cb0d4: cmp    %r11,%rax
  0x00007f75704cb0d7: jbe    0x00007f75704cb0f0
  0x00007f75704cb0dd: movabs $0x7f757036de58,%r11
  0x00007f75704cb0e7: cmp    %r11,%rax
  0x00007f75704cb0ea: jb     0x00007f75704cb18d
  0x00007f75704cb0f0: movabs $0x7f75704a9820,%r11
  0x00007f75704cb0fa: cmp    %r11,%rax
  0x00007f75704cb0fd: jbe    0x00007f75704cb116
  0x00007f75704cb103: movabs $0x7f75704af5e0,%r11
  0x00007f75704cb10d: cmp    %r11,%rax
  0x00007f75704cb110: jb     0x00007f75704cb18d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cb116: mov    %rsp,-0x28(%rsp)
  0x00007f75704cb11b: sub    $0x80,%rsp
  0x00007f75704cb122: mov    %rax,0x78(%rsp)
  0x00007f75704cb127: mov    %rcx,0x70(%rsp)
  0x00007f75704cb12c: mov    %rdx,0x68(%rsp)
  0x00007f75704cb131: mov    %rbx,0x60(%rsp)
  0x00007f75704cb136: mov    %rbp,0x50(%rsp)
  0x00007f75704cb13b: mov    %rsi,0x48(%rsp)
  0x00007f75704cb140: mov    %rdi,0x40(%rsp)
  0x00007f75704cb145: mov    %r8,0x38(%rsp)
  0x00007f75704cb14a: mov    %r9,0x30(%rsp)
  0x00007f75704cb14f: mov    %r10,0x28(%rsp)
  0x00007f75704cb154: mov    %r11,0x20(%rsp)
  0x00007f75704cb159: mov    %r12,0x18(%rsp)
  0x00007f75704cb15e: mov    %r13,0x10(%rsp)
  0x00007f75704cb163: mov    %r14,0x8(%rsp)
  0x00007f75704cb168: mov    %r15,(%rsp)
  0x00007f75704cb16c: movabs $0x7f758592f470,%rdi
  0x00007f75704cb176: movabs $0x7f75704cb116,%rsi
  0x00007f75704cb180: mov    %rsp,%rdx
  0x00007f75704cb183: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb187: callq  0x00007f75853729fa
  0x00007f75704cb18c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cb18d: mov    %rsp,%r11
  0x00007f75704cb190: sub    $0x20,%rsp
  0x00007f75704cb194: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb198: push   %rax
  0x00007f75704cb199: mov    %r11,%rax
  0x00007f75704cb19c: mov    0x50(%rbx),%r11
  0x00007f75704cb1a0: mov    0x48(%rax),%rsi
  0x00007f75704cb1a4: mov    0x40(%rax),%rdx
  0x00007f75704cb1a8: mov    0x38(%rax),%rcx
  0x00007f75704cb1ac: mov    0x30(%rax),%r8
  0x00007f75704cb1b0: mov    0x28(%rax),%r9
  0x00007f75704cb1b4: mov    0x20(%rax),%edi
  0x00007f75704cb1b7: mov    0x18(%rax),%r13
  0x00007f75704cb1bb: mov    %r13,0x8(%rsp)
  0x00007f75704cb1c0: mov    0x10(%rax),%r13
  0x00007f75704cb1c4: mov    %r13,0x10(%rsp)
  0x00007f75704cb1c9: mov    0x8(%rax),%r13
  0x00007f75704cb1cd: mov    %r13,0x18(%rsp)
  0x00007f75704cb1d2: mov    %rbx,0x258(%r15)
  0x00007f75704cb1d9: mov    %rbx,%rax
  0x00007f75704cb1dc: jmpq   *%r11
  0x00007f75704cb1df: mov    0x8(%rsi),%ebx
  0x00007f75704cb1e2: shl    $0x3,%rbx
  0x00007f75704cb1e6: cmp    0x10(%rax),%rbx
  0x00007f75704cb1ea: mov    0x8(%rax),%rbx
  0x00007f75704cb1ee: je     0x00007f75704cb1f9
  0x00007f75704cb1f4: jmpq   0x00007f757046ec40
  0x00007f75704cb1f9: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cb201: je     0x00007f75704cb2fc
  0x00007f75704cb207: jmpq   0x00007f757046ec40
  0x00007f75704cb20c: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cb214: je     0x00007f75704cb2fc
  0x00007f75704cb21a: mov    %rsp,%r13
  0x00007f75704cb21d: mov    (%rsp),%rax
  0x00007f75704cb221: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb225: pushfq 
  0x00007f75704cb226: sub    $0x8,%rsp
  0x00007f75704cb22a: mov    %rsp,-0x28(%rsp)
  0x00007f75704cb22f: sub    $0x80,%rsp
  0x00007f75704cb236: mov    %rax,0x78(%rsp)
  0x00007f75704cb23b: mov    %rcx,0x70(%rsp)
  0x00007f75704cb240: mov    %rdx,0x68(%rsp)
  0x00007f75704cb245: mov    %rbx,0x60(%rsp)
  0x00007f75704cb24a: mov    %rbp,0x50(%rsp)
  0x00007f75704cb24f: mov    %rsi,0x48(%rsp)
  0x00007f75704cb254: mov    %rdi,0x40(%rsp)
  0x00007f75704cb259: mov    %r8,0x38(%rsp)
  0x00007f75704cb25e: mov    %r9,0x30(%rsp)
  0x00007f75704cb263: mov    %r10,0x28(%rsp)
  0x00007f75704cb268: mov    %r11,0x20(%rsp)
  0x00007f75704cb26d: mov    %r12,0x18(%rsp)
  0x00007f75704cb272: mov    %r13,0x10(%rsp)
  0x00007f75704cb277: mov    %r14,0x8(%rsp)
  0x00007f75704cb27c: mov    %r15,(%rsp)
  0x00007f75704cb280: sub    $0x200,%rsp
  0x00007f75704cb287: fxsave64 (%rsp)
  0x00007f75704cb28c: mov    %rbx,%rdi
  0x00007f75704cb28f: mov    %rax,%rsi
  0x00007f75704cb292: callq  0x00007f7585522bca
  0x00007f75704cb297: fxrstor64 (%rsp)
  0x00007f75704cb29c: add    $0x200,%rsp
  0x00007f75704cb2a3: mov    (%rsp),%r15
  0x00007f75704cb2a7: mov    0x8(%rsp),%r14
  0x00007f75704cb2ac: mov    0x10(%rsp),%r13
  0x00007f75704cb2b1: mov    0x18(%rsp),%r12
  0x00007f75704cb2b6: mov    0x20(%rsp),%r11
  0x00007f75704cb2bb: mov    0x28(%rsp),%r10
  0x00007f75704cb2c0: mov    0x30(%rsp),%r9
  0x00007f75704cb2c5: mov    0x38(%rsp),%r8
  0x00007f75704cb2ca: mov    0x40(%rsp),%rdi
  0x00007f75704cb2cf: mov    0x48(%rsp),%rsi
  0x00007f75704cb2d4: mov    0x50(%rsp),%rbp
  0x00007f75704cb2d9: mov    0x60(%rsp),%rbx
  0x00007f75704cb2de: mov    0x68(%rsp),%rdx
  0x00007f75704cb2e3: mov    0x70(%rsp),%rcx
  0x00007f75704cb2e8: mov    0x78(%rsp),%rax
  0x00007f75704cb2ed: add    $0x80,%rsp
  0x00007f75704cb2f4: add    $0x8,%rsp
  0x00007f75704cb2f8: popfq  
  0x00007f75704cb2f9: mov    %r13,%rsp
  0x00007f75704cb2fc: pop    %rax
  0x00007f75704cb2fd: mov    %rsp,%r13
  0x00007f75704cb300: sub    $0x50,%rsp
  0x00007f75704cb304: mov    %rax,(%rsp)
  0x00007f75704cb308: mov    %rsi,0x48(%rsp)
  0x00007f75704cb30d: mov    %rdx,0x40(%rsp)
  0x00007f75704cb312: mov    %rcx,0x38(%rsp)
  0x00007f75704cb317: mov    %r8,0x30(%rsp)
  0x00007f75704cb31c: mov    %r9,0x28(%rsp)
  0x00007f75704cb321: mov    %edi,0x20(%rsp)
  0x00007f75704cb325: mov    0x50(%rsp),%rax
  0x00007f75704cb32a: mov    %rax,0x18(%rsp)
  0x00007f75704cb32f: mov    0x58(%rsp),%rax
  0x00007f75704cb334: mov    %rax,0x10(%rsp)
  0x00007f75704cb339: mov    0x60(%rsp),%rax
  0x00007f75704cb33e: mov    %rax,0x8(%rsp)
  0x00007f75704cb343: mov    0x40(%rbx),%rcx
  0x00007f75704cb347: jmpq   *%rcx

AHE@0x00007f758012cb70: 0xbeabaa00 i2c: 0x00007f75704cb420 c2i: 0x00007f75704cb569 c2iUV: 0x00007f75704cb53c
i2c argument handler #98 for: static (JI[CII)I (626 bytes generated)
c2i argument handler starts at 0x7f75704cb569
  0x00007f75704cb420: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cb424: movabs $0x7f757036e3e0,%r11
  0x00007f75704cb42e: cmp    %r11,%rax
  0x00007f75704cb431: jbe    0x00007f75704cb44a
  0x00007f75704cb437: movabs $0x7f757046e3e0,%r11
  0x00007f75704cb441: cmp    %r11,%rax
  0x00007f75704cb444: jb     0x00007f75704cb50d
  0x00007f75704cb44a: movabs $0x7f7570369420,%r11
  0x00007f75704cb454: cmp    %r11,%rax
  0x00007f75704cb457: jbe    0x00007f75704cb470
  0x00007f75704cb45d: movabs $0x7f757036de58,%r11
  0x00007f75704cb467: cmp    %r11,%rax
  0x00007f75704cb46a: jb     0x00007f75704cb50d
  0x00007f75704cb470: movabs $0x7f75704a9820,%r11
  0x00007f75704cb47a: cmp    %r11,%rax
  0x00007f75704cb47d: jbe    0x00007f75704cb496
  0x00007f75704cb483: movabs $0x7f75704af5e0,%r11
  0x00007f75704cb48d: cmp    %r11,%rax
  0x00007f75704cb490: jb     0x00007f75704cb50d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cb496: mov    %rsp,-0x28(%rsp)
  0x00007f75704cb49b: sub    $0x80,%rsp
  0x00007f75704cb4a2: mov    %rax,0x78(%rsp)
  0x00007f75704cb4a7: mov    %rcx,0x70(%rsp)
  0x00007f75704cb4ac: mov    %rdx,0x68(%rsp)
  0x00007f75704cb4b1: mov    %rbx,0x60(%rsp)
  0x00007f75704cb4b6: mov    %rbp,0x50(%rsp)
  0x00007f75704cb4bb: mov    %rsi,0x48(%rsp)
  0x00007f75704cb4c0: mov    %rdi,0x40(%rsp)
  0x00007f75704cb4c5: mov    %r8,0x38(%rsp)
  0x00007f75704cb4ca: mov    %r9,0x30(%rsp)
  0x00007f75704cb4cf: mov    %r10,0x28(%rsp)
  0x00007f75704cb4d4: mov    %r11,0x20(%rsp)
  0x00007f75704cb4d9: mov    %r12,0x18(%rsp)
  0x00007f75704cb4de: mov    %r13,0x10(%rsp)
  0x00007f75704cb4e3: mov    %r14,0x8(%rsp)
  0x00007f75704cb4e8: mov    %r15,(%rsp)
  0x00007f75704cb4ec: movabs $0x7f758592f470,%rdi
  0x00007f75704cb4f6: movabs $0x7f75704cb496,%rsi
  0x00007f75704cb500: mov    %rsp,%rdx
  0x00007f75704cb503: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb507: callq  0x00007f75853729fa
  0x00007f75704cb50c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cb50d: mov    %rsp,%r11
  0x00007f75704cb510: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb514: push   %rax
  0x00007f75704cb515: mov    %r11,%rax
  0x00007f75704cb518: mov    0x50(%rbx),%r11
  0x00007f75704cb51c: mov    0x28(%rax),%rsi
  0x00007f75704cb520: mov    0x20(%rax),%edx
  0x00007f75704cb523: mov    0x18(%rax),%rcx
  0x00007f75704cb527: mov    0x10(%rax),%r8d
  0x00007f75704cb52b: mov    0x8(%rax),%r9d
  0x00007f75704cb52f: mov    %rbx,0x258(%r15)
  0x00007f75704cb536: mov    %rbx,%rax
  0x00007f75704cb539: jmpq   *%r11
  0x00007f75704cb53c: mov    0x8(%rsi),%ebx
  0x00007f75704cb53f: shl    $0x3,%rbx
  0x00007f75704cb543: cmp    0x10(%rax),%rbx
  0x00007f75704cb547: mov    0x8(%rax),%rbx
  0x00007f75704cb54b: je     0x00007f75704cb556
  0x00007f75704cb551: jmpq   0x00007f757046ec40
  0x00007f75704cb556: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cb55e: je     0x00007f75704cb659
  0x00007f75704cb564: jmpq   0x00007f757046ec40
  0x00007f75704cb569: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cb571: je     0x00007f75704cb659
  0x00007f75704cb577: mov    %rsp,%r13
  0x00007f75704cb57a: mov    (%rsp),%rax
  0x00007f75704cb57e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb582: pushfq 
  0x00007f75704cb583: sub    $0x8,%rsp
  0x00007f75704cb587: mov    %rsp,-0x28(%rsp)
  0x00007f75704cb58c: sub    $0x80,%rsp
  0x00007f75704cb593: mov    %rax,0x78(%rsp)
  0x00007f75704cb598: mov    %rcx,0x70(%rsp)
  0x00007f75704cb59d: mov    %rdx,0x68(%rsp)
  0x00007f75704cb5a2: mov    %rbx,0x60(%rsp)
  0x00007f75704cb5a7: mov    %rbp,0x50(%rsp)
  0x00007f75704cb5ac: mov    %rsi,0x48(%rsp)
  0x00007f75704cb5b1: mov    %rdi,0x40(%rsp)
  0x00007f75704cb5b6: mov    %r8,0x38(%rsp)
  0x00007f75704cb5bb: mov    %r9,0x30(%rsp)
  0x00007f75704cb5c0: mov    %r10,0x28(%rsp)
  0x00007f75704cb5c5: mov    %r11,0x20(%rsp)
  0x00007f75704cb5ca: mov    %r12,0x18(%rsp)
  0x00007f75704cb5cf: mov    %r13,0x10(%rsp)
  0x00007f75704cb5d4: mov    %r14,0x8(%rsp)
  0x00007f75704cb5d9: mov    %r15,(%rsp)
  0x00007f75704cb5dd: sub    $0x200,%rsp
  0x00007f75704cb5e4: fxsave64 (%rsp)
  0x00007f75704cb5e9: mov    %rbx,%rdi
  0x00007f75704cb5ec: mov    %rax,%rsi
  0x00007f75704cb5ef: callq  0x00007f7585522bca
  0x00007f75704cb5f4: fxrstor64 (%rsp)
  0x00007f75704cb5f9: add    $0x200,%rsp
  0x00007f75704cb600: mov    (%rsp),%r15
  0x00007f75704cb604: mov    0x8(%rsp),%r14
  0x00007f75704cb609: mov    0x10(%rsp),%r13
  0x00007f75704cb60e: mov    0x18(%rsp),%r12
  0x00007f75704cb613: mov    0x20(%rsp),%r11
  0x00007f75704cb618: mov    0x28(%rsp),%r10
  0x00007f75704cb61d: mov    0x30(%rsp),%r9
  0x00007f75704cb622: mov    0x38(%rsp),%r8
  0x00007f75704cb627: mov    0x40(%rsp),%rdi
  0x00007f75704cb62c: mov    0x48(%rsp),%rsi
  0x00007f75704cb631: mov    0x50(%rsp),%rbp
  0x00007f75704cb636: mov    0x60(%rsp),%rbx
  0x00007f75704cb63b: mov    0x68(%rsp),%rdx
  0x00007f75704cb640: mov    0x70(%rsp),%rcx
  0x00007f75704cb645: mov    0x78(%rsp),%rax
  0x00007f75704cb64a: add    $0x80,%rsp
  0x00007f75704cb651: add    $0x8,%rsp
  0x00007f75704cb655: popfq  
  0x00007f75704cb656: mov    %r13,%rsp
  0x00007f75704cb659: pop    %rax
  0x00007f75704cb65a: mov    %rsp,%r13
  0x00007f75704cb65d: sub    $0x40,%rsp
  0x00007f75704cb661: mov    %rax,(%rsp)
  0x00007f75704cb665: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cb66f: mov    %rax,0x30(%rsp)
  0x00007f75704cb674: mov    %rsi,0x28(%rsp)
  0x00007f75704cb679: mov    %edx,0x20(%rsp)
  0x00007f75704cb67d: mov    %rcx,0x18(%rsp)
  0x00007f75704cb682: mov    %r8d,0x10(%rsp)
  0x00007f75704cb687: mov    %r9d,0x8(%rsp)
  0x00007f75704cb68c: mov    0x40(%rbx),%rcx
  0x00007f75704cb690: jmpq   *%rcx

AHE@0x00007f758012cbb8: 0xbeab0000 i2c: 0x00007f75704cb760 c2i: 0x00007f75704cb8a1 c2iUV: 0x00007f75704cb874
i2c argument handler #99 for: static (JI[C)V (608 bytes generated)
c2i argument handler starts at 0x7f75704cb8a1
  0x00007f75704cb760: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cb764: movabs $0x7f757036e3e0,%r11
  0x00007f75704cb76e: cmp    %r11,%rax
  0x00007f75704cb771: jbe    0x00007f75704cb78a
  0x00007f75704cb777: movabs $0x7f757046e3e0,%r11
  0x00007f75704cb781: cmp    %r11,%rax
  0x00007f75704cb784: jb     0x00007f75704cb84d
  0x00007f75704cb78a: movabs $0x7f7570369420,%r11
  0x00007f75704cb794: cmp    %r11,%rax
  0x00007f75704cb797: jbe    0x00007f75704cb7b0
  0x00007f75704cb79d: movabs $0x7f757036de58,%r11
  0x00007f75704cb7a7: cmp    %r11,%rax
  0x00007f75704cb7aa: jb     0x00007f75704cb84d
  0x00007f75704cb7b0: movabs $0x7f75704a9820,%r11
  0x00007f75704cb7ba: cmp    %r11,%rax
  0x00007f75704cb7bd: jbe    0x00007f75704cb7d6
  0x00007f75704cb7c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704cb7cd: cmp    %r11,%rax
  0x00007f75704cb7d0: jb     0x00007f75704cb84d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cb7d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704cb7db: sub    $0x80,%rsp
  0x00007f75704cb7e2: mov    %rax,0x78(%rsp)
  0x00007f75704cb7e7: mov    %rcx,0x70(%rsp)
  0x00007f75704cb7ec: mov    %rdx,0x68(%rsp)
  0x00007f75704cb7f1: mov    %rbx,0x60(%rsp)
  0x00007f75704cb7f6: mov    %rbp,0x50(%rsp)
  0x00007f75704cb7fb: mov    %rsi,0x48(%rsp)
  0x00007f75704cb800: mov    %rdi,0x40(%rsp)
  0x00007f75704cb805: mov    %r8,0x38(%rsp)
  0x00007f75704cb80a: mov    %r9,0x30(%rsp)
  0x00007f75704cb80f: mov    %r10,0x28(%rsp)
  0x00007f75704cb814: mov    %r11,0x20(%rsp)
  0x00007f75704cb819: mov    %r12,0x18(%rsp)
  0x00007f75704cb81e: mov    %r13,0x10(%rsp)
  0x00007f75704cb823: mov    %r14,0x8(%rsp)
  0x00007f75704cb828: mov    %r15,(%rsp)
  0x00007f75704cb82c: movabs $0x7f758592f470,%rdi
  0x00007f75704cb836: movabs $0x7f75704cb7d6,%rsi
  0x00007f75704cb840: mov    %rsp,%rdx
  0x00007f75704cb843: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb847: callq  0x00007f75853729fa
  0x00007f75704cb84c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cb84d: mov    %rsp,%r11
  0x00007f75704cb850: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb854: push   %rax
  0x00007f75704cb855: mov    %r11,%rax
  0x00007f75704cb858: mov    0x50(%rbx),%r11
  0x00007f75704cb85c: mov    0x18(%rax),%rsi
  0x00007f75704cb860: mov    0x10(%rax),%edx
  0x00007f75704cb863: mov    0x8(%rax),%rcx
  0x00007f75704cb867: mov    %rbx,0x258(%r15)
  0x00007f75704cb86e: mov    %rbx,%rax
  0x00007f75704cb871: jmpq   *%r11
  0x00007f75704cb874: mov    0x8(%rsi),%ebx
  0x00007f75704cb877: shl    $0x3,%rbx
  0x00007f75704cb87b: cmp    0x10(%rax),%rbx
  0x00007f75704cb87f: mov    0x8(%rax),%rbx
  0x00007f75704cb883: je     0x00007f75704cb88e
  0x00007f75704cb889: jmpq   0x00007f757046ec40
  0x00007f75704cb88e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cb896: je     0x00007f75704cb991
  0x00007f75704cb89c: jmpq   0x00007f757046ec40
  0x00007f75704cb8a1: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cb8a9: je     0x00007f75704cb991
  0x00007f75704cb8af: mov    %rsp,%r13
  0x00007f75704cb8b2: mov    (%rsp),%rax
  0x00007f75704cb8b6: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cb8ba: pushfq 
  0x00007f75704cb8bb: sub    $0x8,%rsp
  0x00007f75704cb8bf: mov    %rsp,-0x28(%rsp)
  0x00007f75704cb8c4: sub    $0x80,%rsp
  0x00007f75704cb8cb: mov    %rax,0x78(%rsp)
  0x00007f75704cb8d0: mov    %rcx,0x70(%rsp)
  0x00007f75704cb8d5: mov    %rdx,0x68(%rsp)
  0x00007f75704cb8da: mov    %rbx,0x60(%rsp)
  0x00007f75704cb8df: mov    %rbp,0x50(%rsp)
  0x00007f75704cb8e4: mov    %rsi,0x48(%rsp)
  0x00007f75704cb8e9: mov    %rdi,0x40(%rsp)
  0x00007f75704cb8ee: mov    %r8,0x38(%rsp)
  0x00007f75704cb8f3: mov    %r9,0x30(%rsp)
  0x00007f75704cb8f8: mov    %r10,0x28(%rsp)
  0x00007f75704cb8fd: mov    %r11,0x20(%rsp)
  0x00007f75704cb902: mov    %r12,0x18(%rsp)
  0x00007f75704cb907: mov    %r13,0x10(%rsp)
  0x00007f75704cb90c: mov    %r14,0x8(%rsp)
  0x00007f75704cb911: mov    %r15,(%rsp)
  0x00007f75704cb915: sub    $0x200,%rsp
  0x00007f75704cb91c: fxsave64 (%rsp)
  0x00007f75704cb921: mov    %rbx,%rdi
  0x00007f75704cb924: mov    %rax,%rsi
  0x00007f75704cb927: callq  0x00007f7585522bca
  0x00007f75704cb92c: fxrstor64 (%rsp)
  0x00007f75704cb931: add    $0x200,%rsp
  0x00007f75704cb938: mov    (%rsp),%r15
  0x00007f75704cb93c: mov    0x8(%rsp),%r14
  0x00007f75704cb941: mov    0x10(%rsp),%r13
  0x00007f75704cb946: mov    0x18(%rsp),%r12
  0x00007f75704cb94b: mov    0x20(%rsp),%r11
  0x00007f75704cb950: mov    0x28(%rsp),%r10
  0x00007f75704cb955: mov    0x30(%rsp),%r9
  0x00007f75704cb95a: mov    0x38(%rsp),%r8
  0x00007f75704cb95f: mov    0x40(%rsp),%rdi
  0x00007f75704cb964: mov    0x48(%rsp),%rsi
  0x00007f75704cb969: mov    0x50(%rsp),%rbp
  0x00007f75704cb96e: mov    0x60(%rsp),%rbx
  0x00007f75704cb973: mov    0x68(%rsp),%rdx
  0x00007f75704cb978: mov    0x70(%rsp),%rcx
  0x00007f75704cb97d: mov    0x78(%rsp),%rax
  0x00007f75704cb982: add    $0x80,%rsp
  0x00007f75704cb989: add    $0x8,%rsp
  0x00007f75704cb98d: popfq  
  0x00007f75704cb98e: mov    %r13,%rsp
  0x00007f75704cb991: pop    %rax
  0x00007f75704cb992: mov    %rsp,%r13
  0x00007f75704cb995: sub    $0x30,%rsp
  0x00007f75704cb999: mov    %rax,(%rsp)
  0x00007f75704cb99d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cb9a7: mov    %rax,0x20(%rsp)
  0x00007f75704cb9ac: mov    %rsi,0x18(%rsp)
  0x00007f75704cb9b1: mov    %edx,0x10(%rsp)
  0x00007f75704cb9b5: mov    %rcx,0x8(%rsp)
  0x00007f75704cb9ba: mov    0x40(%rbx),%rcx
  0x00007f75704cb9be: jmpq   *%rcx

AHE@0x00007f758012cc00: 0xbbbabbbbb0000000 i2c: 0x00007f75704cba60 c2i: 0x00007f75704cbbcd c2iUV: 0x00007f75704cbba0
i2c argument handler #100 for: receiver (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V (683 bytes generated)
c2i argument handler starts at 0x7f75704cbbcd
  0x00007f75704cba60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cba64: movabs $0x7f757036e3e0,%r11
  0x00007f75704cba6e: cmp    %r11,%rax
  0x00007f75704cba71: jbe    0x00007f75704cba8a
  0x00007f75704cba77: movabs $0x7f757046e3e0,%r11
  0x00007f75704cba81: cmp    %r11,%rax
  0x00007f75704cba84: jb     0x00007f75704cbb4d
  0x00007f75704cba8a: movabs $0x7f7570369420,%r11
  0x00007f75704cba94: cmp    %r11,%rax
  0x00007f75704cba97: jbe    0x00007f75704cbab0
  0x00007f75704cba9d: movabs $0x7f757036de58,%r11
  0x00007f75704cbaa7: cmp    %r11,%rax
  0x00007f75704cbaaa: jb     0x00007f75704cbb4d
  0x00007f75704cbab0: movabs $0x7f75704a9820,%r11
  0x00007f75704cbaba: cmp    %r11,%rax
  0x00007f75704cbabd: jbe    0x00007f75704cbad6
  0x00007f75704cbac3: movabs $0x7f75704af5e0,%r11
  0x00007f75704cbacd: cmp    %r11,%rax
  0x00007f75704cbad0: jb     0x00007f75704cbb4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cbad6: mov    %rsp,-0x28(%rsp)
  0x00007f75704cbadb: sub    $0x80,%rsp
  0x00007f75704cbae2: mov    %rax,0x78(%rsp)
  0x00007f75704cbae7: mov    %rcx,0x70(%rsp)
  0x00007f75704cbaec: mov    %rdx,0x68(%rsp)
  0x00007f75704cbaf1: mov    %rbx,0x60(%rsp)
  0x00007f75704cbaf6: mov    %rbp,0x50(%rsp)
  0x00007f75704cbafb: mov    %rsi,0x48(%rsp)
  0x00007f75704cbb00: mov    %rdi,0x40(%rsp)
  0x00007f75704cbb05: mov    %r8,0x38(%rsp)
  0x00007f75704cbb0a: mov    %r9,0x30(%rsp)
  0x00007f75704cbb0f: mov    %r10,0x28(%rsp)
  0x00007f75704cbb14: mov    %r11,0x20(%rsp)
  0x00007f75704cbb19: mov    %r12,0x18(%rsp)
  0x00007f75704cbb1e: mov    %r13,0x10(%rsp)
  0x00007f75704cbb23: mov    %r14,0x8(%rsp)
  0x00007f75704cbb28: mov    %r15,(%rsp)
  0x00007f75704cbb2c: movabs $0x7f758592f470,%rdi
  0x00007f75704cbb36: movabs $0x7f75704cbad6,%rsi
  0x00007f75704cbb40: mov    %rsp,%rdx
  0x00007f75704cbb43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cbb47: callq  0x00007f75853729fa
  0x00007f75704cbb4c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cbb4d: mov    %rsp,%r11
  0x00007f75704cbb50: sub    $0x20,%rsp
  0x00007f75704cbb54: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cbb58: push   %rax
  0x00007f75704cbb59: mov    %r11,%rax
  0x00007f75704cbb5c: mov    0x50(%rbx),%r11
  0x00007f75704cbb60: mov    0x48(%rax),%rsi
  0x00007f75704cbb64: mov    0x40(%rax),%rdx
  0x00007f75704cbb68: mov    0x38(%rax),%rcx
  0x00007f75704cbb6c: mov    0x30(%rax),%r8d
  0x00007f75704cbb70: mov    0x28(%rax),%r9
  0x00007f75704cbb74: mov    0x20(%rax),%rdi
  0x00007f75704cbb78: mov    0x18(%rax),%r13
  0x00007f75704cbb7c: mov    %r13,0x8(%rsp)
  0x00007f75704cbb81: mov    0x10(%rax),%r13
  0x00007f75704cbb85: mov    %r13,0x10(%rsp)
  0x00007f75704cbb8a: mov    0x8(%rax),%r13
  0x00007f75704cbb8e: mov    %r13,0x18(%rsp)
  0x00007f75704cbb93: mov    %rbx,0x258(%r15)
  0x00007f75704cbb9a: mov    %rbx,%rax
  0x00007f75704cbb9d: jmpq   *%r11
  0x00007f75704cbba0: mov    0x8(%rsi),%ebx
  0x00007f75704cbba3: shl    $0x3,%rbx
  0x00007f75704cbba7: cmp    0x10(%rax),%rbx
  0x00007f75704cbbab: mov    0x8(%rax),%rbx
  0x00007f75704cbbaf: je     0x00007f75704cbbba
  0x00007f75704cbbb5: jmpq   0x00007f757046ec40
  0x00007f75704cbbba: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cbbc2: je     0x00007f75704cbcbd
  0x00007f75704cbbc8: jmpq   0x00007f757046ec40
  0x00007f75704cbbcd: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cbbd5: je     0x00007f75704cbcbd
  0x00007f75704cbbdb: mov    %rsp,%r13
  0x00007f75704cbbde: mov    (%rsp),%rax
  0x00007f75704cbbe2: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cbbe6: pushfq 
  0x00007f75704cbbe7: sub    $0x8,%rsp
  0x00007f75704cbbeb: mov    %rsp,-0x28(%rsp)
  0x00007f75704cbbf0: sub    $0x80,%rsp
  0x00007f75704cbbf7: mov    %rax,0x78(%rsp)
  0x00007f75704cbbfc: mov    %rcx,0x70(%rsp)
  0x00007f75704cbc01: mov    %rdx,0x68(%rsp)
  0x00007f75704cbc06: mov    %rbx,0x60(%rsp)
  0x00007f75704cbc0b: mov    %rbp,0x50(%rsp)
  0x00007f75704cbc10: mov    %rsi,0x48(%rsp)
  0x00007f75704cbc15: mov    %rdi,0x40(%rsp)
  0x00007f75704cbc1a: mov    %r8,0x38(%rsp)
  0x00007f75704cbc1f: mov    %r9,0x30(%rsp)
  0x00007f75704cbc24: mov    %r10,0x28(%rsp)
  0x00007f75704cbc29: mov    %r11,0x20(%rsp)
  0x00007f75704cbc2e: mov    %r12,0x18(%rsp)
  0x00007f75704cbc33: mov    %r13,0x10(%rsp)
  0x00007f75704cbc38: mov    %r14,0x8(%rsp)
  0x00007f75704cbc3d: mov    %r15,(%rsp)
  0x00007f75704cbc41: sub    $0x200,%rsp
  0x00007f75704cbc48: fxsave64 (%rsp)
  0x00007f75704cbc4d: mov    %rbx,%rdi
  0x00007f75704cbc50: mov    %rax,%rsi
  0x00007f75704cbc53: callq  0x00007f7585522bca
  0x00007f75704cbc58: fxrstor64 (%rsp)
  0x00007f75704cbc5d: add    $0x200,%rsp
  0x00007f75704cbc64: mov    (%rsp),%r15
  0x00007f75704cbc68: mov    0x8(%rsp),%r14
  0x00007f75704cbc6d: mov    0x10(%rsp),%r13
  0x00007f75704cbc72: mov    0x18(%rsp),%r12
  0x00007f75704cbc77: mov    0x20(%rsp),%r11
  0x00007f75704cbc7c: mov    0x28(%rsp),%r10
  0x00007f75704cbc81: mov    0x30(%rsp),%r9
  0x00007f75704cbc86: mov    0x38(%rsp),%r8
  0x00007f75704cbc8b: mov    0x40(%rsp),%rdi
  0x00007f75704cbc90: mov    0x48(%rsp),%rsi
  0x00007f75704cbc95: mov    0x50(%rsp),%rbp
  0x00007f75704cbc9a: mov    0x60(%rsp),%rbx
  0x00007f75704cbc9f: mov    0x68(%rsp),%rdx
  0x00007f75704cbca4: mov    0x70(%rsp),%rcx
  0x00007f75704cbca9: mov    0x78(%rsp),%rax
  0x00007f75704cbcae: add    $0x80,%rsp
  0x00007f75704cbcb5: add    $0x8,%rsp
  0x00007f75704cbcb9: popfq  
  0x00007f75704cbcba: mov    %r13,%rsp
  0x00007f75704cbcbd: pop    %rax
  0x00007f75704cbcbe: mov    %rsp,%r13
  0x00007f75704cbcc1: sub    $0x50,%rsp
  0x00007f75704cbcc5: mov    %rax,(%rsp)
  0x00007f75704cbcc9: mov    %rsi,0x48(%rsp)
  0x00007f75704cbcce: mov    %rdx,0x40(%rsp)
  0x00007f75704cbcd3: mov    %rcx,0x38(%rsp)
  0x00007f75704cbcd8: mov    %r8d,0x30(%rsp)
  0x00007f75704cbcdd: mov    %r9,0x28(%rsp)
  0x00007f75704cbce2: mov    %rdi,0x20(%rsp)
  0x00007f75704cbce7: mov    0x50(%rsp),%rax
  0x00007f75704cbcec: mov    %rax,0x18(%rsp)
  0x00007f75704cbcf1: mov    0x58(%rsp),%rax
  0x00007f75704cbcf6: mov    %rax,0x10(%rsp)
  0x00007f75704cbcfb: mov    0x60(%rsp),%rax
  0x00007f75704cbd00: mov    %rax,0x8(%rsp)
  0x00007f75704cbd05: mov    0x40(%rbx),%rcx
  0x00007f75704cbd09: jmpq   *%rcx

AHE@0x00007f758012cc48: 0xbbbabb00 i2c: 0x00007f75704cbde0 c2i: 0x00007f75704cbf2e c2iUV: 0x00007f75704cbf01
i2c argument handler #101 for: receiver (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (622 bytes generated)
c2i argument handler starts at 0x7f75704cbf2e
  0x00007f75704cbde0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cbde4: movabs $0x7f757036e3e0,%r11
  0x00007f75704cbdee: cmp    %r11,%rax
  0x00007f75704cbdf1: jbe    0x00007f75704cbe0a
  0x00007f75704cbdf7: movabs $0x7f757046e3e0,%r11
  0x00007f75704cbe01: cmp    %r11,%rax
  0x00007f75704cbe04: jb     0x00007f75704cbecd
  0x00007f75704cbe0a: movabs $0x7f7570369420,%r11
  0x00007f75704cbe14: cmp    %r11,%rax
  0x00007f75704cbe17: jbe    0x00007f75704cbe30
  0x00007f75704cbe1d: movabs $0x7f757036de58,%r11
  0x00007f75704cbe27: cmp    %r11,%rax
  0x00007f75704cbe2a: jb     0x00007f75704cbecd
  0x00007f75704cbe30: movabs $0x7f75704a9820,%r11
  0x00007f75704cbe3a: cmp    %r11,%rax
  0x00007f75704cbe3d: jbe    0x00007f75704cbe56
  0x00007f75704cbe43: movabs $0x7f75704af5e0,%r11
  0x00007f75704cbe4d: cmp    %r11,%rax
  0x00007f75704cbe50: jb     0x00007f75704cbecd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cbe56: mov    %rsp,-0x28(%rsp)
  0x00007f75704cbe5b: sub    $0x80,%rsp
  0x00007f75704cbe62: mov    %rax,0x78(%rsp)
  0x00007f75704cbe67: mov    %rcx,0x70(%rsp)
  0x00007f75704cbe6c: mov    %rdx,0x68(%rsp)
  0x00007f75704cbe71: mov    %rbx,0x60(%rsp)
  0x00007f75704cbe76: mov    %rbp,0x50(%rsp)
  0x00007f75704cbe7b: mov    %rsi,0x48(%rsp)
  0x00007f75704cbe80: mov    %rdi,0x40(%rsp)
  0x00007f75704cbe85: mov    %r8,0x38(%rsp)
  0x00007f75704cbe8a: mov    %r9,0x30(%rsp)
  0x00007f75704cbe8f: mov    %r10,0x28(%rsp)
  0x00007f75704cbe94: mov    %r11,0x20(%rsp)
  0x00007f75704cbe99: mov    %r12,0x18(%rsp)
  0x00007f75704cbe9e: mov    %r13,0x10(%rsp)
  0x00007f75704cbea3: mov    %r14,0x8(%rsp)
  0x00007f75704cbea8: mov    %r15,(%rsp)
  0x00007f75704cbeac: movabs $0x7f758592f470,%rdi
  0x00007f75704cbeb6: movabs $0x7f75704cbe56,%rsi
  0x00007f75704cbec0: mov    %rsp,%rdx
  0x00007f75704cbec3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cbec7: callq  0x00007f75853729fa
  0x00007f75704cbecc: hlt    
  ;; } verify_i2ce 
  0x00007f75704cbecd: mov    %rsp,%r11
  0x00007f75704cbed0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cbed4: push   %rax
  0x00007f75704cbed5: mov    %r11,%rax
  0x00007f75704cbed8: mov    0x50(%rbx),%r11
  0x00007f75704cbedc: mov    0x30(%rax),%rsi
  0x00007f75704cbee0: mov    0x28(%rax),%rdx
  0x00007f75704cbee4: mov    0x20(%rax),%rcx
  0x00007f75704cbee8: mov    0x18(%rax),%r8d
  0x00007f75704cbeec: mov    0x10(%rax),%r9
  0x00007f75704cbef0: mov    0x8(%rax),%rdi
  0x00007f75704cbef4: mov    %rbx,0x258(%r15)
  0x00007f75704cbefb: mov    %rbx,%rax
  0x00007f75704cbefe: jmpq   *%r11
  0x00007f75704cbf01: mov    0x8(%rsi),%ebx
  0x00007f75704cbf04: shl    $0x3,%rbx
  0x00007f75704cbf08: cmp    0x10(%rax),%rbx
  0x00007f75704cbf0c: mov    0x8(%rax),%rbx
  0x00007f75704cbf10: je     0x00007f75704cbf1b
  0x00007f75704cbf16: jmpq   0x00007f757046ec40
  0x00007f75704cbf1b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cbf23: je     0x00007f75704cc01e
  0x00007f75704cbf29: jmpq   0x00007f757046ec40
  0x00007f75704cbf2e: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cbf36: je     0x00007f75704cc01e
  0x00007f75704cbf3c: mov    %rsp,%r13
  0x00007f75704cbf3f: mov    (%rsp),%rax
  0x00007f75704cbf43: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cbf47: pushfq 
  0x00007f75704cbf48: sub    $0x8,%rsp
  0x00007f75704cbf4c: mov    %rsp,-0x28(%rsp)
  0x00007f75704cbf51: sub    $0x80,%rsp
  0x00007f75704cbf58: mov    %rax,0x78(%rsp)
  0x00007f75704cbf5d: mov    %rcx,0x70(%rsp)
  0x00007f75704cbf62: mov    %rdx,0x68(%rsp)
  0x00007f75704cbf67: mov    %rbx,0x60(%rsp)
  0x00007f75704cbf6c: mov    %rbp,0x50(%rsp)
  0x00007f75704cbf71: mov    %rsi,0x48(%rsp)
  0x00007f75704cbf76: mov    %rdi,0x40(%rsp)
  0x00007f75704cbf7b: mov    %r8,0x38(%rsp)
  0x00007f75704cbf80: mov    %r9,0x30(%rsp)
  0x00007f75704cbf85: mov    %r10,0x28(%rsp)
  0x00007f75704cbf8a: mov    %r11,0x20(%rsp)
  0x00007f75704cbf8f: mov    %r12,0x18(%rsp)
  0x00007f75704cbf94: mov    %r13,0x10(%rsp)
  0x00007f75704cbf99: mov    %r14,0x8(%rsp)
  0x00007f75704cbf9e: mov    %r15,(%rsp)
  0x00007f75704cbfa2: sub    $0x200,%rsp
  0x00007f75704cbfa9: fxsave64 (%rsp)
  0x00007f75704cbfae: mov    %rbx,%rdi
  0x00007f75704cbfb1: mov    %rax,%rsi
  0x00007f75704cbfb4: callq  0x00007f7585522bca
  0x00007f75704cbfb9: fxrstor64 (%rsp)
  0x00007f75704cbfbe: add    $0x200,%rsp
  0x00007f75704cbfc5: mov    (%rsp),%r15
  0x00007f75704cbfc9: mov    0x8(%rsp),%r14
  0x00007f75704cbfce: mov    0x10(%rsp),%r13
  0x00007f75704cbfd3: mov    0x18(%rsp),%r12
  0x00007f75704cbfd8: mov    0x20(%rsp),%r11
  0x00007f75704cbfdd: mov    0x28(%rsp),%r10
  0x00007f75704cbfe2: mov    0x30(%rsp),%r9
  0x00007f75704cbfe7: mov    0x38(%rsp),%r8
  0x00007f75704cbfec: mov    0x40(%rsp),%rdi
  0x00007f75704cbff1: mov    0x48(%rsp),%rsi
  0x00007f75704cbff6: mov    0x50(%rsp),%rbp
  0x00007f75704cbffb: mov    0x60(%rsp),%rbx
  0x00007f75704cc000: mov    0x68(%rsp),%rdx
  0x00007f75704cc005: mov    0x70(%rsp),%rcx
  0x00007f75704cc00a: mov    0x78(%rsp),%rax
  0x00007f75704cc00f: add    $0x80,%rsp
  0x00007f75704cc016: add    $0x8,%rsp
  0x00007f75704cc01a: popfq  
  0x00007f75704cc01b: mov    %r13,%rsp
  0x00007f75704cc01e: pop    %rax
  0x00007f75704cc01f: mov    %rsp,%r13
  0x00007f75704cc022: sub    $0x40,%rsp
  0x00007f75704cc026: mov    %rax,(%rsp)
  0x00007f75704cc02a: mov    %rsi,0x30(%rsp)
  0x00007f75704cc02f: mov    %rdx,0x28(%rsp)
  0x00007f75704cc034: mov    %rcx,0x20(%rsp)
  0x00007f75704cc039: mov    %r8d,0x18(%rsp)
  0x00007f75704cc03e: mov    %r9,0x10(%rsp)
  0x00007f75704cc043: mov    %rdi,0x8(%rsp)
  0x00007f75704cc048: mov    0x40(%rbx),%rcx
  0x00007f75704cc04c: jmpq   *%rcx

AHE@0x00007f758012cc90: 0xbbebab00 i2c: 0x00007f75704cc120 c2i: 0x00007f75704cc26a c2iUV: 0x00007f75704cc23d
i2c argument handler #102 for: receiver (JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I (628 bytes generated)
c2i argument handler starts at 0x7f75704cc26a
  0x00007f75704cc120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cc124: movabs $0x7f757036e3e0,%r11
  0x00007f75704cc12e: cmp    %r11,%rax
  0x00007f75704cc131: jbe    0x00007f75704cc14a
  0x00007f75704cc137: movabs $0x7f757046e3e0,%r11
  0x00007f75704cc141: cmp    %r11,%rax
  0x00007f75704cc144: jb     0x00007f75704cc20d
  0x00007f75704cc14a: movabs $0x7f7570369420,%r11
  0x00007f75704cc154: cmp    %r11,%rax
  0x00007f75704cc157: jbe    0x00007f75704cc170
  0x00007f75704cc15d: movabs $0x7f757036de58,%r11
  0x00007f75704cc167: cmp    %r11,%rax
  0x00007f75704cc16a: jb     0x00007f75704cc20d
  0x00007f75704cc170: movabs $0x7f75704a9820,%r11
  0x00007f75704cc17a: cmp    %r11,%rax
  0x00007f75704cc17d: jbe    0x00007f75704cc196
  0x00007f75704cc183: movabs $0x7f75704af5e0,%r11
  0x00007f75704cc18d: cmp    %r11,%rax
  0x00007f75704cc190: jb     0x00007f75704cc20d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cc196: mov    %rsp,-0x28(%rsp)
  0x00007f75704cc19b: sub    $0x80,%rsp
  0x00007f75704cc1a2: mov    %rax,0x78(%rsp)
  0x00007f75704cc1a7: mov    %rcx,0x70(%rsp)
  0x00007f75704cc1ac: mov    %rdx,0x68(%rsp)
  0x00007f75704cc1b1: mov    %rbx,0x60(%rsp)
  0x00007f75704cc1b6: mov    %rbp,0x50(%rsp)
  0x00007f75704cc1bb: mov    %rsi,0x48(%rsp)
  0x00007f75704cc1c0: mov    %rdi,0x40(%rsp)
  0x00007f75704cc1c5: mov    %r8,0x38(%rsp)
  0x00007f75704cc1ca: mov    %r9,0x30(%rsp)
  0x00007f75704cc1cf: mov    %r10,0x28(%rsp)
  0x00007f75704cc1d4: mov    %r11,0x20(%rsp)
  0x00007f75704cc1d9: mov    %r12,0x18(%rsp)
  0x00007f75704cc1de: mov    %r13,0x10(%rsp)
  0x00007f75704cc1e3: mov    %r14,0x8(%rsp)
  0x00007f75704cc1e8: mov    %r15,(%rsp)
  0x00007f75704cc1ec: movabs $0x7f758592f470,%rdi
  0x00007f75704cc1f6: movabs $0x7f75704cc196,%rsi
  0x00007f75704cc200: mov    %rsp,%rdx
  0x00007f75704cc203: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc207: callq  0x00007f75853729fa
  0x00007f75704cc20c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cc20d: mov    %rsp,%r11
  0x00007f75704cc210: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc214: push   %rax
  0x00007f75704cc215: mov    %r11,%rax
  0x00007f75704cc218: mov    0x50(%rbx),%r11
  0x00007f75704cc21c: mov    0x30(%rax),%rsi
  0x00007f75704cc220: mov    0x20(%rax),%rdx
  0x00007f75704cc224: mov    0x18(%rax),%rcx
  0x00007f75704cc228: mov    0x10(%rax),%r8d
  0x00007f75704cc22c: mov    0x8(%rax),%r9
  0x00007f75704cc230: mov    %rbx,0x258(%r15)
  0x00007f75704cc237: mov    %rbx,%rax
  0x00007f75704cc23a: jmpq   *%r11
  0x00007f75704cc23d: mov    0x8(%rsi),%ebx
  0x00007f75704cc240: shl    $0x3,%rbx
  0x00007f75704cc244: cmp    0x10(%rax),%rbx
  0x00007f75704cc248: mov    0x8(%rax),%rbx
  0x00007f75704cc24c: je     0x00007f75704cc257
  0x00007f75704cc252: jmpq   0x00007f757046ec40
  0x00007f75704cc257: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cc25f: je     0x00007f75704cc35a
  0x00007f75704cc265: jmpq   0x00007f757046ec40
  0x00007f75704cc26a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cc272: je     0x00007f75704cc35a
  0x00007f75704cc278: mov    %rsp,%r13
  0x00007f75704cc27b: mov    (%rsp),%rax
  0x00007f75704cc27f: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc283: pushfq 
  0x00007f75704cc284: sub    $0x8,%rsp
  0x00007f75704cc288: mov    %rsp,-0x28(%rsp)
  0x00007f75704cc28d: sub    $0x80,%rsp
  0x00007f75704cc294: mov    %rax,0x78(%rsp)
  0x00007f75704cc299: mov    %rcx,0x70(%rsp)
  0x00007f75704cc29e: mov    %rdx,0x68(%rsp)
  0x00007f75704cc2a3: mov    %rbx,0x60(%rsp)
  0x00007f75704cc2a8: mov    %rbp,0x50(%rsp)
  0x00007f75704cc2ad: mov    %rsi,0x48(%rsp)
  0x00007f75704cc2b2: mov    %rdi,0x40(%rsp)
  0x00007f75704cc2b7: mov    %r8,0x38(%rsp)
  0x00007f75704cc2bc: mov    %r9,0x30(%rsp)
  0x00007f75704cc2c1: mov    %r10,0x28(%rsp)
  0x00007f75704cc2c6: mov    %r11,0x20(%rsp)
  0x00007f75704cc2cb: mov    %r12,0x18(%rsp)
  0x00007f75704cc2d0: mov    %r13,0x10(%rsp)
  0x00007f75704cc2d5: mov    %r14,0x8(%rsp)
  0x00007f75704cc2da: mov    %r15,(%rsp)
  0x00007f75704cc2de: sub    $0x200,%rsp
  0x00007f75704cc2e5: fxsave64 (%rsp)
  0x00007f75704cc2ea: mov    %rbx,%rdi
  0x00007f75704cc2ed: mov    %rax,%rsi
  0x00007f75704cc2f0: callq  0x00007f7585522bca
  0x00007f75704cc2f5: fxrstor64 (%rsp)
  0x00007f75704cc2fa: add    $0x200,%rsp
  0x00007f75704cc301: mov    (%rsp),%r15
  0x00007f75704cc305: mov    0x8(%rsp),%r14
  0x00007f75704cc30a: mov    0x10(%rsp),%r13
  0x00007f75704cc30f: mov    0x18(%rsp),%r12
  0x00007f75704cc314: mov    0x20(%rsp),%r11
  0x00007f75704cc319: mov    0x28(%rsp),%r10
  0x00007f75704cc31e: mov    0x30(%rsp),%r9
  0x00007f75704cc323: mov    0x38(%rsp),%r8
  0x00007f75704cc328: mov    0x40(%rsp),%rdi
  0x00007f75704cc32d: mov    0x48(%rsp),%rsi
  0x00007f75704cc332: mov    0x50(%rsp),%rbp
  0x00007f75704cc337: mov    0x60(%rsp),%rbx
  0x00007f75704cc33c: mov    0x68(%rsp),%rdx
  0x00007f75704cc341: mov    0x70(%rsp),%rcx
  0x00007f75704cc346: mov    0x78(%rsp),%rax
  0x00007f75704cc34b: add    $0x80,%rsp
  0x00007f75704cc352: add    $0x8,%rsp
  0x00007f75704cc356: popfq  
  0x00007f75704cc357: mov    %r13,%rsp
  0x00007f75704cc35a: pop    %rax
  0x00007f75704cc35b: mov    %rsp,%r13
  0x00007f75704cc35e: sub    $0x40,%rsp
  0x00007f75704cc362: mov    %rax,(%rsp)
  0x00007f75704cc366: mov    %rsi,0x30(%rsp)
  0x00007f75704cc36b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cc375: mov    %rax,0x28(%rsp)
  0x00007f75704cc37a: mov    %rdx,0x20(%rsp)
  0x00007f75704cc37f: mov    %rcx,0x18(%rsp)
  0x00007f75704cc384: mov    %r8d,0x10(%rsp)
  0x00007f75704cc389: mov    %r9,0x8(%rsp)
  0x00007f75704cc38e: mov    0x40(%rbx),%rcx
  0x00007f75704cc392: jmpq   *%rcx

AHE@0x00007f758012ccd8: 0xbbebbeb0 i2c: 0x00007f75704cc460 c2i: 0x00007f75704cc5aa c2iUV: 0x00007f75704cc57d
i2c argument handler #103 for: receiver (JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J (643 bytes generated)
c2i argument handler starts at 0x7f75704cc5aa
  0x00007f75704cc460: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cc464: movabs $0x7f757036e3e0,%r11
  0x00007f75704cc46e: cmp    %r11,%rax
  0x00007f75704cc471: jbe    0x00007f75704cc48a
  0x00007f75704cc477: movabs $0x7f757046e3e0,%r11
  0x00007f75704cc481: cmp    %r11,%rax
  0x00007f75704cc484: jb     0x00007f75704cc54d
  0x00007f75704cc48a: movabs $0x7f7570369420,%r11
  0x00007f75704cc494: cmp    %r11,%rax
  0x00007f75704cc497: jbe    0x00007f75704cc4b0
  0x00007f75704cc49d: movabs $0x7f757036de58,%r11
  0x00007f75704cc4a7: cmp    %r11,%rax
  0x00007f75704cc4aa: jb     0x00007f75704cc54d
  0x00007f75704cc4b0: movabs $0x7f75704a9820,%r11
  0x00007f75704cc4ba: cmp    %r11,%rax
  0x00007f75704cc4bd: jbe    0x00007f75704cc4d6
  0x00007f75704cc4c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704cc4cd: cmp    %r11,%rax
  0x00007f75704cc4d0: jb     0x00007f75704cc54d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cc4d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704cc4db: sub    $0x80,%rsp
  0x00007f75704cc4e2: mov    %rax,0x78(%rsp)
  0x00007f75704cc4e7: mov    %rcx,0x70(%rsp)
  0x00007f75704cc4ec: mov    %rdx,0x68(%rsp)
  0x00007f75704cc4f1: mov    %rbx,0x60(%rsp)
  0x00007f75704cc4f6: mov    %rbp,0x50(%rsp)
  0x00007f75704cc4fb: mov    %rsi,0x48(%rsp)
  0x00007f75704cc500: mov    %rdi,0x40(%rsp)
  0x00007f75704cc505: mov    %r8,0x38(%rsp)
  0x00007f75704cc50a: mov    %r9,0x30(%rsp)
  0x00007f75704cc50f: mov    %r10,0x28(%rsp)
  0x00007f75704cc514: mov    %r11,0x20(%rsp)
  0x00007f75704cc519: mov    %r12,0x18(%rsp)
  0x00007f75704cc51e: mov    %r13,0x10(%rsp)
  0x00007f75704cc523: mov    %r14,0x8(%rsp)
  0x00007f75704cc528: mov    %r15,(%rsp)
  0x00007f75704cc52c: movabs $0x7f758592f470,%rdi
  0x00007f75704cc536: movabs $0x7f75704cc4d6,%rsi
  0x00007f75704cc540: mov    %rsp,%rdx
  0x00007f75704cc543: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc547: callq  0x00007f75853729fa
  0x00007f75704cc54c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cc54d: mov    %rsp,%r11
  0x00007f75704cc550: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc554: push   %rax
  0x00007f75704cc555: mov    %r11,%rax
  0x00007f75704cc558: mov    0x50(%rbx),%r11
  0x00007f75704cc55c: mov    0x38(%rax),%rsi
  0x00007f75704cc560: mov    0x28(%rax),%rdx
  0x00007f75704cc564: mov    0x20(%rax),%rcx
  0x00007f75704cc568: mov    0x10(%rax),%r8
  0x00007f75704cc56c: mov    0x8(%rax),%r9
  0x00007f75704cc570: mov    %rbx,0x258(%r15)
  0x00007f75704cc577: mov    %rbx,%rax
  0x00007f75704cc57a: jmpq   *%r11
  0x00007f75704cc57d: mov    0x8(%rsi),%ebx
  0x00007f75704cc580: shl    $0x3,%rbx
  0x00007f75704cc584: cmp    0x10(%rax),%rbx
  0x00007f75704cc588: mov    0x8(%rax),%rbx
  0x00007f75704cc58c: je     0x00007f75704cc597
  0x00007f75704cc592: jmpq   0x00007f757046ec40
  0x00007f75704cc597: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cc59f: je     0x00007f75704cc69a
  0x00007f75704cc5a5: jmpq   0x00007f757046ec40
  0x00007f75704cc5aa: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cc5b2: je     0x00007f75704cc69a
  0x00007f75704cc5b8: mov    %rsp,%r13
  0x00007f75704cc5bb: mov    (%rsp),%rax
  0x00007f75704cc5bf: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc5c3: pushfq 
  0x00007f75704cc5c4: sub    $0x8,%rsp
  0x00007f75704cc5c8: mov    %rsp,-0x28(%rsp)
  0x00007f75704cc5cd: sub    $0x80,%rsp
  0x00007f75704cc5d4: mov    %rax,0x78(%rsp)
  0x00007f75704cc5d9: mov    %rcx,0x70(%rsp)
  0x00007f75704cc5de: mov    %rdx,0x68(%rsp)
  0x00007f75704cc5e3: mov    %rbx,0x60(%rsp)
  0x00007f75704cc5e8: mov    %rbp,0x50(%rsp)
  0x00007f75704cc5ed: mov    %rsi,0x48(%rsp)
  0x00007f75704cc5f2: mov    %rdi,0x40(%rsp)
  0x00007f75704cc5f7: mov    %r8,0x38(%rsp)
  0x00007f75704cc5fc: mov    %r9,0x30(%rsp)
  0x00007f75704cc601: mov    %r10,0x28(%rsp)
  0x00007f75704cc606: mov    %r11,0x20(%rsp)
  0x00007f75704cc60b: mov    %r12,0x18(%rsp)
  0x00007f75704cc610: mov    %r13,0x10(%rsp)
  0x00007f75704cc615: mov    %r14,0x8(%rsp)
  0x00007f75704cc61a: mov    %r15,(%rsp)
  0x00007f75704cc61e: sub    $0x200,%rsp
  0x00007f75704cc625: fxsave64 (%rsp)
  0x00007f75704cc62a: mov    %rbx,%rdi
  0x00007f75704cc62d: mov    %rax,%rsi
  0x00007f75704cc630: callq  0x00007f7585522bca
  0x00007f75704cc635: fxrstor64 (%rsp)
  0x00007f75704cc63a: add    $0x200,%rsp
  0x00007f75704cc641: mov    (%rsp),%r15
  0x00007f75704cc645: mov    0x8(%rsp),%r14
  0x00007f75704cc64a: mov    0x10(%rsp),%r13
  0x00007f75704cc64f: mov    0x18(%rsp),%r12
  0x00007f75704cc654: mov    0x20(%rsp),%r11
  0x00007f75704cc659: mov    0x28(%rsp),%r10
  0x00007f75704cc65e: mov    0x30(%rsp),%r9
  0x00007f75704cc663: mov    0x38(%rsp),%r8
  0x00007f75704cc668: mov    0x40(%rsp),%rdi
  0x00007f75704cc66d: mov    0x48(%rsp),%rsi
  0x00007f75704cc672: mov    0x50(%rsp),%rbp
  0x00007f75704cc677: mov    0x60(%rsp),%rbx
  0x00007f75704cc67c: mov    0x68(%rsp),%rdx
  0x00007f75704cc681: mov    0x70(%rsp),%rcx
  0x00007f75704cc686: mov    0x78(%rsp),%rax
  0x00007f75704cc68b: add    $0x80,%rsp
  0x00007f75704cc692: add    $0x8,%rsp
  0x00007f75704cc696: popfq  
  0x00007f75704cc697: mov    %r13,%rsp
  0x00007f75704cc69a: pop    %rax
  0x00007f75704cc69b: mov    %rsp,%r13
  0x00007f75704cc69e: sub    $0x40,%rsp
  0x00007f75704cc6a2: mov    %rax,(%rsp)
  0x00007f75704cc6a6: mov    %rsi,0x38(%rsp)
  0x00007f75704cc6ab: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cc6b5: mov    %rax,0x30(%rsp)
  0x00007f75704cc6ba: mov    %rdx,0x28(%rsp)
  0x00007f75704cc6bf: mov    %rcx,0x20(%rsp)
  0x00007f75704cc6c4: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cc6ce: mov    %rax,0x18(%rsp)
  0x00007f75704cc6d3: mov    %r8,0x10(%rsp)
  0x00007f75704cc6d8: mov    %r9,0x8(%rsp)
  0x00007f75704cc6dd: mov    0x40(%rbx),%rcx
  0x00007f75704cc6e1: jmpq   *%rcx

AHE@0x00007f758012cd20: 0xbbeb7eb0 i2c: 0x00007f75704cc7a0 c2i: 0x00007f75704cc8eb c2iUV: 0x00007f75704cc8be
i2c argument handler #104 for: receiver (JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D (645 bytes generated)
c2i argument handler starts at 0x7f75704cc8eb
  0x00007f75704cc7a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cc7a4: movabs $0x7f757036e3e0,%r11
  0x00007f75704cc7ae: cmp    %r11,%rax
  0x00007f75704cc7b1: jbe    0x00007f75704cc7ca
  0x00007f75704cc7b7: movabs $0x7f757046e3e0,%r11
  0x00007f75704cc7c1: cmp    %r11,%rax
  0x00007f75704cc7c4: jb     0x00007f75704cc88d
  0x00007f75704cc7ca: movabs $0x7f7570369420,%r11
  0x00007f75704cc7d4: cmp    %r11,%rax
  0x00007f75704cc7d7: jbe    0x00007f75704cc7f0
  0x00007f75704cc7dd: movabs $0x7f757036de58,%r11
  0x00007f75704cc7e7: cmp    %r11,%rax
  0x00007f75704cc7ea: jb     0x00007f75704cc88d
  0x00007f75704cc7f0: movabs $0x7f75704a9820,%r11
  0x00007f75704cc7fa: cmp    %r11,%rax
  0x00007f75704cc7fd: jbe    0x00007f75704cc816
  0x00007f75704cc803: movabs $0x7f75704af5e0,%r11
  0x00007f75704cc80d: cmp    %r11,%rax
  0x00007f75704cc810: jb     0x00007f75704cc88d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cc816: mov    %rsp,-0x28(%rsp)
  0x00007f75704cc81b: sub    $0x80,%rsp
  0x00007f75704cc822: mov    %rax,0x78(%rsp)
  0x00007f75704cc827: mov    %rcx,0x70(%rsp)
  0x00007f75704cc82c: mov    %rdx,0x68(%rsp)
  0x00007f75704cc831: mov    %rbx,0x60(%rsp)
  0x00007f75704cc836: mov    %rbp,0x50(%rsp)
  0x00007f75704cc83b: mov    %rsi,0x48(%rsp)
  0x00007f75704cc840: mov    %rdi,0x40(%rsp)
  0x00007f75704cc845: mov    %r8,0x38(%rsp)
  0x00007f75704cc84a: mov    %r9,0x30(%rsp)
  0x00007f75704cc84f: mov    %r10,0x28(%rsp)
  0x00007f75704cc854: mov    %r11,0x20(%rsp)
  0x00007f75704cc859: mov    %r12,0x18(%rsp)
  0x00007f75704cc85e: mov    %r13,0x10(%rsp)
  0x00007f75704cc863: mov    %r14,0x8(%rsp)
  0x00007f75704cc868: mov    %r15,(%rsp)
  0x00007f75704cc86c: movabs $0x7f758592f470,%rdi
  0x00007f75704cc876: movabs $0x7f75704cc816,%rsi
  0x00007f75704cc880: mov    %rsp,%rdx
  0x00007f75704cc883: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc887: callq  0x00007f75853729fa
  0x00007f75704cc88c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cc88d: mov    %rsp,%r11
  0x00007f75704cc890: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc894: push   %rax
  0x00007f75704cc895: mov    %r11,%rax
  0x00007f75704cc898: mov    0x50(%rbx),%r11
  0x00007f75704cc89c: mov    0x38(%rax),%rsi
  0x00007f75704cc8a0: mov    0x28(%rax),%rdx
  0x00007f75704cc8a4: mov    0x20(%rax),%rcx
  0x00007f75704cc8a8: vmovsd 0x10(%rax),%xmm0
  0x00007f75704cc8ad: mov    0x8(%rax),%r8
  0x00007f75704cc8b1: mov    %rbx,0x258(%r15)
  0x00007f75704cc8b8: mov    %rbx,%rax
  0x00007f75704cc8bb: jmpq   *%r11
  0x00007f75704cc8be: mov    0x8(%rsi),%ebx
  0x00007f75704cc8c1: shl    $0x3,%rbx
  0x00007f75704cc8c5: cmp    0x10(%rax),%rbx
  0x00007f75704cc8c9: mov    0x8(%rax),%rbx
  0x00007f75704cc8cd: je     0x00007f75704cc8d8
  0x00007f75704cc8d3: jmpq   0x00007f757046ec40
  0x00007f75704cc8d8: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cc8e0: je     0x00007f75704cc9db
  0x00007f75704cc8e6: jmpq   0x00007f757046ec40
  0x00007f75704cc8eb: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cc8f3: je     0x00007f75704cc9db
  0x00007f75704cc8f9: mov    %rsp,%r13
  0x00007f75704cc8fc: mov    (%rsp),%rax
  0x00007f75704cc900: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cc904: pushfq 
  0x00007f75704cc905: sub    $0x8,%rsp
  0x00007f75704cc909: mov    %rsp,-0x28(%rsp)
  0x00007f75704cc90e: sub    $0x80,%rsp
  0x00007f75704cc915: mov    %rax,0x78(%rsp)
  0x00007f75704cc91a: mov    %rcx,0x70(%rsp)
  0x00007f75704cc91f: mov    %rdx,0x68(%rsp)
  0x00007f75704cc924: mov    %rbx,0x60(%rsp)
  0x00007f75704cc929: mov    %rbp,0x50(%rsp)
  0x00007f75704cc92e: mov    %rsi,0x48(%rsp)
  0x00007f75704cc933: mov    %rdi,0x40(%rsp)
  0x00007f75704cc938: mov    %r8,0x38(%rsp)
  0x00007f75704cc93d: mov    %r9,0x30(%rsp)
  0x00007f75704cc942: mov    %r10,0x28(%rsp)
  0x00007f75704cc947: mov    %r11,0x20(%rsp)
  0x00007f75704cc94c: mov    %r12,0x18(%rsp)
  0x00007f75704cc951: mov    %r13,0x10(%rsp)
  0x00007f75704cc956: mov    %r14,0x8(%rsp)
  0x00007f75704cc95b: mov    %r15,(%rsp)
  0x00007f75704cc95f: sub    $0x200,%rsp
  0x00007f75704cc966: fxsave64 (%rsp)
  0x00007f75704cc96b: mov    %rbx,%rdi
  0x00007f75704cc96e: mov    %rax,%rsi
  0x00007f75704cc971: callq  0x00007f7585522bca
  0x00007f75704cc976: fxrstor64 (%rsp)
  0x00007f75704cc97b: add    $0x200,%rsp
  0x00007f75704cc982: mov    (%rsp),%r15
  0x00007f75704cc986: mov    0x8(%rsp),%r14
  0x00007f75704cc98b: mov    0x10(%rsp),%r13
  0x00007f75704cc990: mov    0x18(%rsp),%r12
  0x00007f75704cc995: mov    0x20(%rsp),%r11
  0x00007f75704cc99a: mov    0x28(%rsp),%r10
  0x00007f75704cc99f: mov    0x30(%rsp),%r9
  0x00007f75704cc9a4: mov    0x38(%rsp),%r8
  0x00007f75704cc9a9: mov    0x40(%rsp),%rdi
  0x00007f75704cc9ae: mov    0x48(%rsp),%rsi
  0x00007f75704cc9b3: mov    0x50(%rsp),%rbp
  0x00007f75704cc9b8: mov    0x60(%rsp),%rbx
  0x00007f75704cc9bd: mov    0x68(%rsp),%rdx
  0x00007f75704cc9c2: mov    0x70(%rsp),%rcx
  0x00007f75704cc9c7: mov    0x78(%rsp),%rax
  0x00007f75704cc9cc: add    $0x80,%rsp
  0x00007f75704cc9d3: add    $0x8,%rsp
  0x00007f75704cc9d7: popfq  
  0x00007f75704cc9d8: mov    %r13,%rsp
  0x00007f75704cc9db: pop    %rax
  0x00007f75704cc9dc: mov    %rsp,%r13
  0x00007f75704cc9df: sub    $0x40,%rsp
  0x00007f75704cc9e3: mov    %rax,(%rsp)
  0x00007f75704cc9e7: mov    %rsi,0x38(%rsp)
  0x00007f75704cc9ec: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cc9f6: mov    %rax,0x30(%rsp)
  0x00007f75704cc9fb: mov    %rdx,0x28(%rsp)
  0x00007f75704cca00: mov    %rcx,0x20(%rsp)
  0x00007f75704cca05: movabs $0xdeadffffdeadaaac,%rax
  0x00007f75704cca0f: mov    %rax,0x18(%rsp)
  0x00007f75704cca14: vmovsd %xmm0,0x10(%rsp)
  0x00007f75704cca1a: mov    %r8,0x8(%rsp)
  0x00007f75704cca1f: mov    0x40(%rbx),%rcx
  0x00007f75704cca23: jmpq   *%rcx

AHE@0x00007f758012cd68: 0xbbebb000 i2c: 0x00007f75704ccae0 c2i: 0x00007f75704ccc26 c2iUV: 0x00007f75704ccbf9
i2c argument handler #105 for: receiver (JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object; (619 bytes generated)
c2i argument handler starts at 0x7f75704ccc26
  0x00007f75704ccae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704ccae4: movabs $0x7f757036e3e0,%r11
  0x00007f75704ccaee: cmp    %r11,%rax
  0x00007f75704ccaf1: jbe    0x00007f75704ccb0a
  0x00007f75704ccaf7: movabs $0x7f757046e3e0,%r11
  0x00007f75704ccb01: cmp    %r11,%rax
  0x00007f75704ccb04: jb     0x00007f75704ccbcd
  0x00007f75704ccb0a: movabs $0x7f7570369420,%r11
  0x00007f75704ccb14: cmp    %r11,%rax
  0x00007f75704ccb17: jbe    0x00007f75704ccb30
  0x00007f75704ccb1d: movabs $0x7f757036de58,%r11
  0x00007f75704ccb27: cmp    %r11,%rax
  0x00007f75704ccb2a: jb     0x00007f75704ccbcd
  0x00007f75704ccb30: movabs $0x7f75704a9820,%r11
  0x00007f75704ccb3a: cmp    %r11,%rax
  0x00007f75704ccb3d: jbe    0x00007f75704ccb56
  0x00007f75704ccb43: movabs $0x7f75704af5e0,%r11
  0x00007f75704ccb4d: cmp    %r11,%rax
  0x00007f75704ccb50: jb     0x00007f75704ccbcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704ccb56: mov    %rsp,-0x28(%rsp)
  0x00007f75704ccb5b: sub    $0x80,%rsp
  0x00007f75704ccb62: mov    %rax,0x78(%rsp)
  0x00007f75704ccb67: mov    %rcx,0x70(%rsp)
  0x00007f75704ccb6c: mov    %rdx,0x68(%rsp)
  0x00007f75704ccb71: mov    %rbx,0x60(%rsp)
  0x00007f75704ccb76: mov    %rbp,0x50(%rsp)
  0x00007f75704ccb7b: mov    %rsi,0x48(%rsp)
  0x00007f75704ccb80: mov    %rdi,0x40(%rsp)
  0x00007f75704ccb85: mov    %r8,0x38(%rsp)
  0x00007f75704ccb8a: mov    %r9,0x30(%rsp)
  0x00007f75704ccb8f: mov    %r10,0x28(%rsp)
  0x00007f75704ccb94: mov    %r11,0x20(%rsp)
  0x00007f75704ccb99: mov    %r12,0x18(%rsp)
  0x00007f75704ccb9e: mov    %r13,0x10(%rsp)
  0x00007f75704ccba3: mov    %r14,0x8(%rsp)
  0x00007f75704ccba8: mov    %r15,(%rsp)
  0x00007f75704ccbac: movabs $0x7f758592f470,%rdi
  0x00007f75704ccbb6: movabs $0x7f75704ccb56,%rsi
  0x00007f75704ccbc0: mov    %rsp,%rdx
  0x00007f75704ccbc3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ccbc7: callq  0x00007f75853729fa
  0x00007f75704ccbcc: hlt    
  ;; } verify_i2ce 
  0x00007f75704ccbcd: mov    %rsp,%r11
  0x00007f75704ccbd0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ccbd4: push   %rax
  0x00007f75704ccbd5: mov    %r11,%rax
  0x00007f75704ccbd8: mov    0x50(%rbx),%r11
  0x00007f75704ccbdc: mov    0x28(%rax),%rsi
  0x00007f75704ccbe0: mov    0x18(%rax),%rdx
  0x00007f75704ccbe4: mov    0x10(%rax),%rcx
  0x00007f75704ccbe8: mov    0x8(%rax),%r8
  0x00007f75704ccbec: mov    %rbx,0x258(%r15)
  0x00007f75704ccbf3: mov    %rbx,%rax
  0x00007f75704ccbf6: jmpq   *%r11
  0x00007f75704ccbf9: mov    0x8(%rsi),%ebx
  0x00007f75704ccbfc: shl    $0x3,%rbx
  0x00007f75704ccc00: cmp    0x10(%rax),%rbx
  0x00007f75704ccc04: mov    0x8(%rax),%rbx
  0x00007f75704ccc08: je     0x00007f75704ccc13
  0x00007f75704ccc0e: jmpq   0x00007f757046ec40
  0x00007f75704ccc13: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ccc1b: je     0x00007f75704ccd16
  0x00007f75704ccc21: jmpq   0x00007f757046ec40
  0x00007f75704ccc26: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ccc2e: je     0x00007f75704ccd16
  0x00007f75704ccc34: mov    %rsp,%r13
  0x00007f75704ccc37: mov    (%rsp),%rax
  0x00007f75704ccc3b: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ccc3f: pushfq 
  0x00007f75704ccc40: sub    $0x8,%rsp
  0x00007f75704ccc44: mov    %rsp,-0x28(%rsp)
  0x00007f75704ccc49: sub    $0x80,%rsp
  0x00007f75704ccc50: mov    %rax,0x78(%rsp)
  0x00007f75704ccc55: mov    %rcx,0x70(%rsp)
  0x00007f75704ccc5a: mov    %rdx,0x68(%rsp)
  0x00007f75704ccc5f: mov    %rbx,0x60(%rsp)
  0x00007f75704ccc64: mov    %rbp,0x50(%rsp)
  0x00007f75704ccc69: mov    %rsi,0x48(%rsp)
  0x00007f75704ccc6e: mov    %rdi,0x40(%rsp)
  0x00007f75704ccc73: mov    %r8,0x38(%rsp)
  0x00007f75704ccc78: mov    %r9,0x30(%rsp)
  0x00007f75704ccc7d: mov    %r10,0x28(%rsp)
  0x00007f75704ccc82: mov    %r11,0x20(%rsp)
  0x00007f75704ccc87: mov    %r12,0x18(%rsp)
  0x00007f75704ccc8c: mov    %r13,0x10(%rsp)
  0x00007f75704ccc91: mov    %r14,0x8(%rsp)
  0x00007f75704ccc96: mov    %r15,(%rsp)
  0x00007f75704ccc9a: sub    $0x200,%rsp
  0x00007f75704ccca1: fxsave64 (%rsp)
  0x00007f75704ccca6: mov    %rbx,%rdi
  0x00007f75704ccca9: mov    %rax,%rsi
  0x00007f75704cccac: callq  0x00007f7585522bca
  0x00007f75704cccb1: fxrstor64 (%rsp)
  0x00007f75704cccb6: add    $0x200,%rsp
  0x00007f75704cccbd: mov    (%rsp),%r15
  0x00007f75704cccc1: mov    0x8(%rsp),%r14
  0x00007f75704cccc6: mov    0x10(%rsp),%r13
  0x00007f75704ccccb: mov    0x18(%rsp),%r12
  0x00007f75704cccd0: mov    0x20(%rsp),%r11
  0x00007f75704cccd5: mov    0x28(%rsp),%r10
  0x00007f75704cccda: mov    0x30(%rsp),%r9
  0x00007f75704cccdf: mov    0x38(%rsp),%r8
  0x00007f75704ccce4: mov    0x40(%rsp),%rdi
  0x00007f75704ccce9: mov    0x48(%rsp),%rsi
  0x00007f75704cccee: mov    0x50(%rsp),%rbp
  0x00007f75704cccf3: mov    0x60(%rsp),%rbx
  0x00007f75704cccf8: mov    0x68(%rsp),%rdx
  0x00007f75704cccfd: mov    0x70(%rsp),%rcx
  0x00007f75704ccd02: mov    0x78(%rsp),%rax
  0x00007f75704ccd07: add    $0x80,%rsp
  0x00007f75704ccd0e: add    $0x8,%rsp
  0x00007f75704ccd12: popfq  
  0x00007f75704ccd13: mov    %r13,%rsp
  0x00007f75704ccd16: pop    %rax
  0x00007f75704ccd17: mov    %rsp,%r13
  0x00007f75704ccd1a: sub    $0x30,%rsp
  0x00007f75704ccd1e: mov    %rax,(%rsp)
  0x00007f75704ccd22: mov    %rsi,0x28(%rsp)
  0x00007f75704ccd27: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704ccd31: mov    %rax,0x20(%rsp)
  0x00007f75704ccd36: mov    %rdx,0x18(%rsp)
  0x00007f75704ccd3b: mov    %rcx,0x10(%rsp)
  0x00007f75704ccd40: mov    %r8,0x8(%rsp)
  0x00007f75704ccd45: mov    0x40(%rbx),%rcx
  0x00007f75704ccd49: jmpq   *%rcx

AHE@0x00007f758012cdb0: 0xbbbbba00 i2c: 0x00007f75704cce20 c2i: 0x00007f75704ccf6d c2iUV: 0x00007f75704ccf40
i2c argument handler #106 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V (620 bytes generated)
c2i argument handler starts at 0x7f75704ccf6d
  0x00007f75704cce20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cce24: movabs $0x7f757036e3e0,%r11
  0x00007f75704cce2e: cmp    %r11,%rax
  0x00007f75704cce31: jbe    0x00007f75704cce4a
  0x00007f75704cce37: movabs $0x7f757046e3e0,%r11
  0x00007f75704cce41: cmp    %r11,%rax
  0x00007f75704cce44: jb     0x00007f75704ccf0d
  0x00007f75704cce4a: movabs $0x7f7570369420,%r11
  0x00007f75704cce54: cmp    %r11,%rax
  0x00007f75704cce57: jbe    0x00007f75704cce70
  0x00007f75704cce5d: movabs $0x7f757036de58,%r11
  0x00007f75704cce67: cmp    %r11,%rax
  0x00007f75704cce6a: jb     0x00007f75704ccf0d
  0x00007f75704cce70: movabs $0x7f75704a9820,%r11
  0x00007f75704cce7a: cmp    %r11,%rax
  0x00007f75704cce7d: jbe    0x00007f75704cce96
  0x00007f75704cce83: movabs $0x7f75704af5e0,%r11
  0x00007f75704cce8d: cmp    %r11,%rax
  0x00007f75704cce90: jb     0x00007f75704ccf0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cce96: mov    %rsp,-0x28(%rsp)
  0x00007f75704cce9b: sub    $0x80,%rsp
  0x00007f75704ccea2: mov    %rax,0x78(%rsp)
  0x00007f75704ccea7: mov    %rcx,0x70(%rsp)
  0x00007f75704cceac: mov    %rdx,0x68(%rsp)
  0x00007f75704cceb1: mov    %rbx,0x60(%rsp)
  0x00007f75704cceb6: mov    %rbp,0x50(%rsp)
  0x00007f75704ccebb: mov    %rsi,0x48(%rsp)
  0x00007f75704ccec0: mov    %rdi,0x40(%rsp)
  0x00007f75704ccec5: mov    %r8,0x38(%rsp)
  0x00007f75704cceca: mov    %r9,0x30(%rsp)
  0x00007f75704ccecf: mov    %r10,0x28(%rsp)
  0x00007f75704cced4: mov    %r11,0x20(%rsp)
  0x00007f75704cced9: mov    %r12,0x18(%rsp)
  0x00007f75704ccede: mov    %r13,0x10(%rsp)
  0x00007f75704ccee3: mov    %r14,0x8(%rsp)
  0x00007f75704ccee8: mov    %r15,(%rsp)
  0x00007f75704cceec: movabs $0x7f758592f470,%rdi
  0x00007f75704ccef6: movabs $0x7f75704cce96,%rsi
  0x00007f75704ccf00: mov    %rsp,%rdx
  0x00007f75704ccf03: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ccf07: callq  0x00007f75853729fa
  0x00007f75704ccf0c: hlt    
  ;; } verify_i2ce 
  0x00007f75704ccf0d: mov    %rsp,%r11
  0x00007f75704ccf10: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ccf14: push   %rax
  0x00007f75704ccf15: mov    %r11,%rax
  0x00007f75704ccf18: mov    0x50(%rbx),%r11
  0x00007f75704ccf1c: mov    0x30(%rax),%rsi
  0x00007f75704ccf20: mov    0x28(%rax),%rdx
  0x00007f75704ccf24: mov    0x20(%rax),%rcx
  0x00007f75704ccf28: mov    0x18(%rax),%r8
  0x00007f75704ccf2c: mov    0x10(%rax),%r9
  0x00007f75704ccf30: mov    0x8(%rax),%edi
  0x00007f75704ccf33: mov    %rbx,0x258(%r15)
  0x00007f75704ccf3a: mov    %rbx,%rax
  0x00007f75704ccf3d: jmpq   *%r11
  0x00007f75704ccf40: mov    0x8(%rsi),%ebx
  0x00007f75704ccf43: shl    $0x3,%rbx
  0x00007f75704ccf47: cmp    0x10(%rax),%rbx
  0x00007f75704ccf4b: mov    0x8(%rax),%rbx
  0x00007f75704ccf4f: je     0x00007f75704ccf5a
  0x00007f75704ccf55: jmpq   0x00007f757046ec40
  0x00007f75704ccf5a: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ccf62: je     0x00007f75704cd05d
  0x00007f75704ccf68: jmpq   0x00007f757046ec40
  0x00007f75704ccf6d: cmpq   $0x0,0x58(%rbx)
  0x00007f75704ccf75: je     0x00007f75704cd05d
  0x00007f75704ccf7b: mov    %rsp,%r13
  0x00007f75704ccf7e: mov    (%rsp),%rax
  0x00007f75704ccf82: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ccf86: pushfq 
  0x00007f75704ccf87: sub    $0x8,%rsp
  0x00007f75704ccf8b: mov    %rsp,-0x28(%rsp)
  0x00007f75704ccf90: sub    $0x80,%rsp
  0x00007f75704ccf97: mov    %rax,0x78(%rsp)
  0x00007f75704ccf9c: mov    %rcx,0x70(%rsp)
  0x00007f75704ccfa1: mov    %rdx,0x68(%rsp)
  0x00007f75704ccfa6: mov    %rbx,0x60(%rsp)
  0x00007f75704ccfab: mov    %rbp,0x50(%rsp)
  0x00007f75704ccfb0: mov    %rsi,0x48(%rsp)
  0x00007f75704ccfb5: mov    %rdi,0x40(%rsp)
  0x00007f75704ccfba: mov    %r8,0x38(%rsp)
  0x00007f75704ccfbf: mov    %r9,0x30(%rsp)
  0x00007f75704ccfc4: mov    %r10,0x28(%rsp)
  0x00007f75704ccfc9: mov    %r11,0x20(%rsp)
  0x00007f75704ccfce: mov    %r12,0x18(%rsp)
  0x00007f75704ccfd3: mov    %r13,0x10(%rsp)
  0x00007f75704ccfd8: mov    %r14,0x8(%rsp)
  0x00007f75704ccfdd: mov    %r15,(%rsp)
  0x00007f75704ccfe1: sub    $0x200,%rsp
  0x00007f75704ccfe8: fxsave64 (%rsp)
  0x00007f75704ccfed: mov    %rbx,%rdi
  0x00007f75704ccff0: mov    %rax,%rsi
  0x00007f75704ccff3: callq  0x00007f7585522bca
  0x00007f75704ccff8: fxrstor64 (%rsp)
  0x00007f75704ccffd: add    $0x200,%rsp
  0x00007f75704cd004: mov    (%rsp),%r15
  0x00007f75704cd008: mov    0x8(%rsp),%r14
  0x00007f75704cd00d: mov    0x10(%rsp),%r13
  0x00007f75704cd012: mov    0x18(%rsp),%r12
  0x00007f75704cd017: mov    0x20(%rsp),%r11
  0x00007f75704cd01c: mov    0x28(%rsp),%r10
  0x00007f75704cd021: mov    0x30(%rsp),%r9
  0x00007f75704cd026: mov    0x38(%rsp),%r8
  0x00007f75704cd02b: mov    0x40(%rsp),%rdi
  0x00007f75704cd030: mov    0x48(%rsp),%rsi
  0x00007f75704cd035: mov    0x50(%rsp),%rbp
  0x00007f75704cd03a: mov    0x60(%rsp),%rbx
  0x00007f75704cd03f: mov    0x68(%rsp),%rdx
  0x00007f75704cd044: mov    0x70(%rsp),%rcx
  0x00007f75704cd049: mov    0x78(%rsp),%rax
  0x00007f75704cd04e: add    $0x80,%rsp
  0x00007f75704cd055: add    $0x8,%rsp
  0x00007f75704cd059: popfq  
  0x00007f75704cd05a: mov    %r13,%rsp
  0x00007f75704cd05d: pop    %rax
  0x00007f75704cd05e: mov    %rsp,%r13
  0x00007f75704cd061: sub    $0x40,%rsp
  0x00007f75704cd065: mov    %rax,(%rsp)
  0x00007f75704cd069: mov    %rsi,0x30(%rsp)
  0x00007f75704cd06e: mov    %rdx,0x28(%rsp)
  0x00007f75704cd073: mov    %rcx,0x20(%rsp)
  0x00007f75704cd078: mov    %r8,0x18(%rsp)
  0x00007f75704cd07d: mov    %r9,0x10(%rsp)
  0x00007f75704cd082: mov    %edi,0x8(%rsp)
  0x00007f75704cd086: mov    0x40(%rbx),%rcx
  0x00007f75704cd08a: jmpq   *%rcx

AHE@0x00007f758012cdf8: 0xbbbbabbbbb000000 i2c: 0x00007f75704cd160 c2i: 0x00007f75704cd2d6 c2iUV: 0x00007f75704cd2a9
i2c argument handler #107 for: receiver (Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V (702 bytes generated)
c2i argument handler starts at 0x7f75704cd2d6
  0x00007f75704cd160: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cd164: movabs $0x7f757036e3e0,%r11
  0x00007f75704cd16e: cmp    %r11,%rax
  0x00007f75704cd171: jbe    0x00007f75704cd18a
  0x00007f75704cd177: movabs $0x7f757046e3e0,%r11
  0x00007f75704cd181: cmp    %r11,%rax
  0x00007f75704cd184: jb     0x00007f75704cd24d
  0x00007f75704cd18a: movabs $0x7f7570369420,%r11
  0x00007f75704cd194: cmp    %r11,%rax
  0x00007f75704cd197: jbe    0x00007f75704cd1b0
  0x00007f75704cd19d: movabs $0x7f757036de58,%r11
  0x00007f75704cd1a7: cmp    %r11,%rax
  0x00007f75704cd1aa: jb     0x00007f75704cd24d
  0x00007f75704cd1b0: movabs $0x7f75704a9820,%r11
  0x00007f75704cd1ba: cmp    %r11,%rax
  0x00007f75704cd1bd: jbe    0x00007f75704cd1d6
  0x00007f75704cd1c3: movabs $0x7f75704af5e0,%r11
  0x00007f75704cd1cd: cmp    %r11,%rax
  0x00007f75704cd1d0: jb     0x00007f75704cd24d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cd1d6: mov    %rsp,-0x28(%rsp)
  0x00007f75704cd1db: sub    $0x80,%rsp
  0x00007f75704cd1e2: mov    %rax,0x78(%rsp)
  0x00007f75704cd1e7: mov    %rcx,0x70(%rsp)
  0x00007f75704cd1ec: mov    %rdx,0x68(%rsp)
  0x00007f75704cd1f1: mov    %rbx,0x60(%rsp)
  0x00007f75704cd1f6: mov    %rbp,0x50(%rsp)
  0x00007f75704cd1fb: mov    %rsi,0x48(%rsp)
  0x00007f75704cd200: mov    %rdi,0x40(%rsp)
  0x00007f75704cd205: mov    %r8,0x38(%rsp)
  0x00007f75704cd20a: mov    %r9,0x30(%rsp)
  0x00007f75704cd20f: mov    %r10,0x28(%rsp)
  0x00007f75704cd214: mov    %r11,0x20(%rsp)
  0x00007f75704cd219: mov    %r12,0x18(%rsp)
  0x00007f75704cd21e: mov    %r13,0x10(%rsp)
  0x00007f75704cd223: mov    %r14,0x8(%rsp)
  0x00007f75704cd228: mov    %r15,(%rsp)
  0x00007f75704cd22c: movabs $0x7f758592f470,%rdi
  0x00007f75704cd236: movabs $0x7f75704cd1d6,%rsi
  0x00007f75704cd240: mov    %rsp,%rdx
  0x00007f75704cd243: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd247: callq  0x00007f75853729fa
  0x00007f75704cd24c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cd24d: mov    %rsp,%r11
  0x00007f75704cd250: sub    $0x20,%rsp
  0x00007f75704cd254: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd258: push   %rax
  0x00007f75704cd259: mov    %r11,%rax
  0x00007f75704cd25c: mov    0x50(%rbx),%r11
  0x00007f75704cd260: mov    0x50(%rax),%rsi
  0x00007f75704cd264: mov    0x48(%rax),%rdx
  0x00007f75704cd268: mov    0x40(%rax),%rcx
  0x00007f75704cd26c: mov    0x38(%rax),%r8
  0x00007f75704cd270: mov    0x30(%rax),%r9d
  0x00007f75704cd274: mov    0x28(%rax),%rdi
  0x00007f75704cd278: mov    0x20(%rax),%r13
  0x00007f75704cd27c: mov    %r13,0x8(%rsp)
  0x00007f75704cd281: mov    0x18(%rax),%r13
  0x00007f75704cd285: mov    %r13,0x10(%rsp)
  0x00007f75704cd28a: mov    0x10(%rax),%r13
  0x00007f75704cd28e: mov    %r13,0x18(%rsp)
  0x00007f75704cd293: mov    0x8(%rax),%r13
  0x00007f75704cd297: mov    %r13,0x20(%rsp)
  0x00007f75704cd29c: mov    %rbx,0x258(%r15)
  0x00007f75704cd2a3: mov    %rbx,%rax
  0x00007f75704cd2a6: jmpq   *%r11
  0x00007f75704cd2a9: mov    0x8(%rsi),%ebx
  0x00007f75704cd2ac: shl    $0x3,%rbx
  0x00007f75704cd2b0: cmp    0x10(%rax),%rbx
  0x00007f75704cd2b4: mov    0x8(%rax),%rbx
  0x00007f75704cd2b8: je     0x00007f75704cd2c3
  0x00007f75704cd2be: jmpq   0x00007f757046ec40
  0x00007f75704cd2c3: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cd2cb: je     0x00007f75704cd3c6
  0x00007f75704cd2d1: jmpq   0x00007f757046ec40
  0x00007f75704cd2d6: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cd2de: je     0x00007f75704cd3c6
  0x00007f75704cd2e4: mov    %rsp,%r13
  0x00007f75704cd2e7: mov    (%rsp),%rax
  0x00007f75704cd2eb: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd2ef: pushfq 
  0x00007f75704cd2f0: sub    $0x8,%rsp
  0x00007f75704cd2f4: mov    %rsp,-0x28(%rsp)
  0x00007f75704cd2f9: sub    $0x80,%rsp
  0x00007f75704cd300: mov    %rax,0x78(%rsp)
  0x00007f75704cd305: mov    %rcx,0x70(%rsp)
  0x00007f75704cd30a: mov    %rdx,0x68(%rsp)
  0x00007f75704cd30f: mov    %rbx,0x60(%rsp)
  0x00007f75704cd314: mov    %rbp,0x50(%rsp)
  0x00007f75704cd319: mov    %rsi,0x48(%rsp)
  0x00007f75704cd31e: mov    %rdi,0x40(%rsp)
  0x00007f75704cd323: mov    %r8,0x38(%rsp)
  0x00007f75704cd328: mov    %r9,0x30(%rsp)
  0x00007f75704cd32d: mov    %r10,0x28(%rsp)
  0x00007f75704cd332: mov    %r11,0x20(%rsp)
  0x00007f75704cd337: mov    %r12,0x18(%rsp)
  0x00007f75704cd33c: mov    %r13,0x10(%rsp)
  0x00007f75704cd341: mov    %r14,0x8(%rsp)
  0x00007f75704cd346: mov    %r15,(%rsp)
  0x00007f75704cd34a: sub    $0x200,%rsp
  0x00007f75704cd351: fxsave64 (%rsp)
  0x00007f75704cd356: mov    %rbx,%rdi
  0x00007f75704cd359: mov    %rax,%rsi
  0x00007f75704cd35c: callq  0x00007f7585522bca
  0x00007f75704cd361: fxrstor64 (%rsp)
  0x00007f75704cd366: add    $0x200,%rsp
  0x00007f75704cd36d: mov    (%rsp),%r15
  0x00007f75704cd371: mov    0x8(%rsp),%r14
  0x00007f75704cd376: mov    0x10(%rsp),%r13
  0x00007f75704cd37b: mov    0x18(%rsp),%r12
  0x00007f75704cd380: mov    0x20(%rsp),%r11
  0x00007f75704cd385: mov    0x28(%rsp),%r10
  0x00007f75704cd38a: mov    0x30(%rsp),%r9
  0x00007f75704cd38f: mov    0x38(%rsp),%r8
  0x00007f75704cd394: mov    0x40(%rsp),%rdi
  0x00007f75704cd399: mov    0x48(%rsp),%rsi
  0x00007f75704cd39e: mov    0x50(%rsp),%rbp
  0x00007f75704cd3a3: mov    0x60(%rsp),%rbx
  0x00007f75704cd3a8: mov    0x68(%rsp),%rdx
  0x00007f75704cd3ad: mov    0x70(%rsp),%rcx
  0x00007f75704cd3b2: mov    0x78(%rsp),%rax
  0x00007f75704cd3b7: add    $0x80,%rsp
  0x00007f75704cd3be: add    $0x8,%rsp
  0x00007f75704cd3c2: popfq  
  0x00007f75704cd3c3: mov    %r13,%rsp
  0x00007f75704cd3c6: pop    %rax
  0x00007f75704cd3c7: mov    %rsp,%r13
  0x00007f75704cd3ca: sub    $0x60,%rsp
  0x00007f75704cd3ce: mov    %rax,(%rsp)
  0x00007f75704cd3d2: mov    %rsi,0x50(%rsp)
  0x00007f75704cd3d7: mov    %rdx,0x48(%rsp)
  0x00007f75704cd3dc: mov    %rcx,0x40(%rsp)
  0x00007f75704cd3e1: mov    %r8,0x38(%rsp)
  0x00007f75704cd3e6: mov    %r9d,0x30(%rsp)
  0x00007f75704cd3eb: mov    %rdi,0x28(%rsp)
  0x00007f75704cd3f0: mov    0x60(%rsp),%rax
  0x00007f75704cd3f5: mov    %rax,0x20(%rsp)
  0x00007f75704cd3fa: mov    0x68(%rsp),%rax
  0x00007f75704cd3ff: mov    %rax,0x18(%rsp)
  0x00007f75704cd404: mov    0x70(%rsp),%rax
  0x00007f75704cd409: mov    %rax,0x10(%rsp)
  0x00007f75704cd40e: mov    0x78(%rsp),%rax
  0x00007f75704cd413: mov    %rax,0x8(%rsp)
  0x00007f75704cd418: mov    0x40(%rbx),%rcx
  0x00007f75704cd41c: jmpq   *%rcx

AHE@0x00007f758012ce40: 0xbbbbabb0 i2c: 0x00007f75704cd4e0 c2i: 0x00007f75704cd63b c2iUV: 0x00007f75704cd60e
i2c argument handler #108 for: receiver (Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (645 bytes generated)
c2i argument handler starts at 0x7f75704cd63b
  0x00007f75704cd4e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cd4e4: movabs $0x7f757036e3e0,%r11
  0x00007f75704cd4ee: cmp    %r11,%rax
  0x00007f75704cd4f1: jbe    0x00007f75704cd50a
  0x00007f75704cd4f7: movabs $0x7f757046e3e0,%r11
  0x00007f75704cd501: cmp    %r11,%rax
  0x00007f75704cd504: jb     0x00007f75704cd5cd
  0x00007f75704cd50a: movabs $0x7f7570369420,%r11
  0x00007f75704cd514: cmp    %r11,%rax
  0x00007f75704cd517: jbe    0x00007f75704cd530
  0x00007f75704cd51d: movabs $0x7f757036de58,%r11
  0x00007f75704cd527: cmp    %r11,%rax
  0x00007f75704cd52a: jb     0x00007f75704cd5cd
  0x00007f75704cd530: movabs $0x7f75704a9820,%r11
  0x00007f75704cd53a: cmp    %r11,%rax
  0x00007f75704cd53d: jbe    0x00007f75704cd556
  0x00007f75704cd543: movabs $0x7f75704af5e0,%r11
  0x00007f75704cd54d: cmp    %r11,%rax
  0x00007f75704cd550: jb     0x00007f75704cd5cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cd556: mov    %rsp,-0x28(%rsp)
  0x00007f75704cd55b: sub    $0x80,%rsp
  0x00007f75704cd562: mov    %rax,0x78(%rsp)
  0x00007f75704cd567: mov    %rcx,0x70(%rsp)
  0x00007f75704cd56c: mov    %rdx,0x68(%rsp)
  0x00007f75704cd571: mov    %rbx,0x60(%rsp)
  0x00007f75704cd576: mov    %rbp,0x50(%rsp)
  0x00007f75704cd57b: mov    %rsi,0x48(%rsp)
  0x00007f75704cd580: mov    %rdi,0x40(%rsp)
  0x00007f75704cd585: mov    %r8,0x38(%rsp)
  0x00007f75704cd58a: mov    %r9,0x30(%rsp)
  0x00007f75704cd58f: mov    %r10,0x28(%rsp)
  0x00007f75704cd594: mov    %r11,0x20(%rsp)
  0x00007f75704cd599: mov    %r12,0x18(%rsp)
  0x00007f75704cd59e: mov    %r13,0x10(%rsp)
  0x00007f75704cd5a3: mov    %r14,0x8(%rsp)
  0x00007f75704cd5a8: mov    %r15,(%rsp)
  0x00007f75704cd5ac: movabs $0x7f758592f470,%rdi
  0x00007f75704cd5b6: movabs $0x7f75704cd556,%rsi
  0x00007f75704cd5c0: mov    %rsp,%rdx
  0x00007f75704cd5c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd5c7: callq  0x00007f75853729fa
  0x00007f75704cd5cc: hlt    
  ;; } verify_i2ce 
  0x00007f75704cd5cd: mov    %rsp,%r11
  0x00007f75704cd5d0: sub    $0x10,%rsp
  0x00007f75704cd5d4: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd5d8: push   %rax
  0x00007f75704cd5d9: mov    %r11,%rax
  0x00007f75704cd5dc: mov    0x50(%rbx),%r11
  0x00007f75704cd5e0: mov    0x38(%rax),%rsi
  0x00007f75704cd5e4: mov    0x30(%rax),%rdx
  0x00007f75704cd5e8: mov    0x28(%rax),%rcx
  0x00007f75704cd5ec: mov    0x20(%rax),%r8
  0x00007f75704cd5f0: mov    0x18(%rax),%r9d
  0x00007f75704cd5f4: mov    0x10(%rax),%rdi
  0x00007f75704cd5f8: mov    0x8(%rax),%r13
  0x00007f75704cd5fc: mov    %r13,0x8(%rsp)
  0x00007f75704cd601: mov    %rbx,0x258(%r15)
  0x00007f75704cd608: mov    %rbx,%rax
  0x00007f75704cd60b: jmpq   *%r11
  0x00007f75704cd60e: mov    0x8(%rsi),%ebx
  0x00007f75704cd611: shl    $0x3,%rbx
  0x00007f75704cd615: cmp    0x10(%rax),%rbx
  0x00007f75704cd619: mov    0x8(%rax),%rbx
  0x00007f75704cd61d: je     0x00007f75704cd628
  0x00007f75704cd623: jmpq   0x00007f757046ec40
  0x00007f75704cd628: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cd630: je     0x00007f75704cd72b
  0x00007f75704cd636: jmpq   0x00007f757046ec40
  0x00007f75704cd63b: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cd643: je     0x00007f75704cd72b
  0x00007f75704cd649: mov    %rsp,%r13
  0x00007f75704cd64c: mov    (%rsp),%rax
  0x00007f75704cd650: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd654: pushfq 
  0x00007f75704cd655: sub    $0x8,%rsp
  0x00007f75704cd659: mov    %rsp,-0x28(%rsp)
  0x00007f75704cd65e: sub    $0x80,%rsp
  0x00007f75704cd665: mov    %rax,0x78(%rsp)
  0x00007f75704cd66a: mov    %rcx,0x70(%rsp)
  0x00007f75704cd66f: mov    %rdx,0x68(%rsp)
  0x00007f75704cd674: mov    %rbx,0x60(%rsp)
  0x00007f75704cd679: mov    %rbp,0x50(%rsp)
  0x00007f75704cd67e: mov    %rsi,0x48(%rsp)
  0x00007f75704cd683: mov    %rdi,0x40(%rsp)
  0x00007f75704cd688: mov    %r8,0x38(%rsp)
  0x00007f75704cd68d: mov    %r9,0x30(%rsp)
  0x00007f75704cd692: mov    %r10,0x28(%rsp)
  0x00007f75704cd697: mov    %r11,0x20(%rsp)
  0x00007f75704cd69c: mov    %r12,0x18(%rsp)
  0x00007f75704cd6a1: mov    %r13,0x10(%rsp)
  0x00007f75704cd6a6: mov    %r14,0x8(%rsp)
  0x00007f75704cd6ab: mov    %r15,(%rsp)
  0x00007f75704cd6af: sub    $0x200,%rsp
  0x00007f75704cd6b6: fxsave64 (%rsp)
  0x00007f75704cd6bb: mov    %rbx,%rdi
  0x00007f75704cd6be: mov    %rax,%rsi
  0x00007f75704cd6c1: callq  0x00007f7585522bca
  0x00007f75704cd6c6: fxrstor64 (%rsp)
  0x00007f75704cd6cb: add    $0x200,%rsp
  0x00007f75704cd6d2: mov    (%rsp),%r15
  0x00007f75704cd6d6: mov    0x8(%rsp),%r14
  0x00007f75704cd6db: mov    0x10(%rsp),%r13
  0x00007f75704cd6e0: mov    0x18(%rsp),%r12
  0x00007f75704cd6e5: mov    0x20(%rsp),%r11
  0x00007f75704cd6ea: mov    0x28(%rsp),%r10
  0x00007f75704cd6ef: mov    0x30(%rsp),%r9
  0x00007f75704cd6f4: mov    0x38(%rsp),%r8
  0x00007f75704cd6f9: mov    0x40(%rsp),%rdi
  0x00007f75704cd6fe: mov    0x48(%rsp),%rsi
  0x00007f75704cd703: mov    0x50(%rsp),%rbp
  0x00007f75704cd708: mov    0x60(%rsp),%rbx
  0x00007f75704cd70d: mov    0x68(%rsp),%rdx
  0x00007f75704cd712: mov    0x70(%rsp),%rcx
  0x00007f75704cd717: mov    0x78(%rsp),%rax
  0x00007f75704cd71c: add    $0x80,%rsp
  0x00007f75704cd723: add    $0x8,%rsp
  0x00007f75704cd727: popfq  
  0x00007f75704cd728: mov    %r13,%rsp
  0x00007f75704cd72b: pop    %rax
  0x00007f75704cd72c: mov    %rsp,%r13
  0x00007f75704cd72f: sub    $0x40,%rsp
  0x00007f75704cd733: mov    %rax,(%rsp)
  0x00007f75704cd737: mov    %rsi,0x38(%rsp)
  0x00007f75704cd73c: mov    %rdx,0x30(%rsp)
  0x00007f75704cd741: mov    %rcx,0x28(%rsp)
  0x00007f75704cd746: mov    %r8,0x20(%rsp)
  0x00007f75704cd74b: mov    %r9d,0x18(%rsp)
  0x00007f75704cd750: mov    %rdi,0x10(%rsp)
  0x00007f75704cd755: mov    0x40(%rsp),%rax
  0x00007f75704cd75a: mov    %rax,0x8(%rsp)
  0x00007f75704cd75f: mov    0x40(%rbx),%rcx
  0x00007f75704cd763: jmpq   *%rcx

AHE@0x00007f758012ce88: 0xbbebeb00 i2c: 0x00007f75704cd820 c2i: 0x00007f75704cd966 c2iUV: 0x00007f75704cd939
i2c argument handler #109 for: static (Ljava/lang/String;JJ[C)I (634 bytes generated)
c2i argument handler starts at 0x7f75704cd966
  0x00007f75704cd820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75704cd824: movabs $0x7f757036e3e0,%r11
  0x00007f75704cd82e: cmp    %r11,%rax
  0x00007f75704cd831: jbe    0x00007f75704cd84a
  0x00007f75704cd837: movabs $0x7f757046e3e0,%r11
  0x00007f75704cd841: cmp    %r11,%rax
  0x00007f75704cd844: jb     0x00007f75704cd90d
  0x00007f75704cd84a: movabs $0x7f7570369420,%r11
  0x00007f75704cd854: cmp    %r11,%rax
  0x00007f75704cd857: jbe    0x00007f75704cd870
  0x00007f75704cd85d: movabs $0x7f757036de58,%r11
  0x00007f75704cd867: cmp    %r11,%rax
  0x00007f75704cd86a: jb     0x00007f75704cd90d
  0x00007f75704cd870: movabs $0x7f75704a9820,%r11
  0x00007f75704cd87a: cmp    %r11,%rax
  0x00007f75704cd87d: jbe    0x00007f75704cd896
  0x00007f75704cd883: movabs $0x7f75704af5e0,%r11
  0x00007f75704cd88d: cmp    %r11,%rax
  0x00007f75704cd890: jb     0x00007f75704cd90d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75704cd896: mov    %rsp,-0x28(%rsp)
  0x00007f75704cd89b: sub    $0x80,%rsp
  0x00007f75704cd8a2: mov    %rax,0x78(%rsp)
  0x00007f75704cd8a7: mov    %rcx,0x70(%rsp)
  0x00007f75704cd8ac: mov    %rdx,0x68(%rsp)
  0x00007f75704cd8b1: mov    %rbx,0x60(%rsp)
  0x00007f75704cd8b6: mov    %rbp,0x50(%rsp)
  0x00007f75704cd8bb: mov    %rsi,0x48(%rsp)
  0x00007f75704cd8c0: mov    %rdi,0x40(%rsp)
  0x00007f75704cd8c5: mov    %r8,0x38(%rsp)
  0x00007f75704cd8ca: mov    %r9,0x30(%rsp)
  0x00007f75704cd8cf: mov    %r10,0x28(%rsp)
  0x00007f75704cd8d4: mov    %r11,0x20(%rsp)
  0x00007f75704cd8d9: mov    %r12,0x18(%rsp)
  0x00007f75704cd8de: mov    %r13,0x10(%rsp)
  0x00007f75704cd8e3: mov    %r14,0x8(%rsp)
  0x00007f75704cd8e8: mov    %r15,(%rsp)
  0x00007f75704cd8ec: movabs $0x7f758592f470,%rdi
  0x00007f75704cd8f6: movabs $0x7f75704cd896,%rsi
  0x00007f75704cd900: mov    %rsp,%rdx
  0x00007f75704cd903: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd907: callq  0x00007f75853729fa
  0x00007f75704cd90c: hlt    
  ;; } verify_i2ce 
  0x00007f75704cd90d: mov    %rsp,%r11
  0x00007f75704cd910: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd914: push   %rax
  0x00007f75704cd915: mov    %r11,%rax
  0x00007f75704cd918: mov    0x50(%rbx),%r11
  0x00007f75704cd91c: mov    0x30(%rax),%rsi
  0x00007f75704cd920: mov    0x20(%rax),%rdx
  0x00007f75704cd924: mov    0x10(%rax),%rcx
  0x00007f75704cd928: mov    0x8(%rax),%r8
  0x00007f75704cd92c: mov    %rbx,0x258(%r15)
  0x00007f75704cd933: mov    %rbx,%rax
  0x00007f75704cd936: jmpq   *%r11
  0x00007f75704cd939: mov    0x8(%rsi),%ebx
  0x00007f75704cd93c: shl    $0x3,%rbx
  0x00007f75704cd940: cmp    0x10(%rax),%rbx
  0x00007f75704cd944: mov    0x8(%rax),%rbx
  0x00007f75704cd948: je     0x00007f75704cd953
  0x00007f75704cd94e: jmpq   0x00007f757046ec40
  0x00007f75704cd953: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cd95b: je     0x00007f75704cda56
  0x00007f75704cd961: jmpq   0x00007f757046ec40
  0x00007f75704cd966: cmpq   $0x0,0x58(%rbx)
  0x00007f75704cd96e: je     0x00007f75704cda56
  0x00007f75704cd974: mov    %rsp,%r13
  0x00007f75704cd977: mov    (%rsp),%rax
  0x00007f75704cd97b: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cd97f: pushfq 
  0x00007f75704cd980: sub    $0x8,%rsp
  0x00007f75704cd984: mov    %rsp,-0x28(%rsp)
  0x00007f75704cd989: sub    $0x80,%rsp
  0x00007f75704cd990: mov    %rax,0x78(%rsp)
  0x00007f75704cd995: mov    %rcx,0x70(%rsp)
  0x00007f75704cd99a: mov    %rdx,0x68(%rsp)
  0x00007f75704cd99f: mov    %rbx,0x60(%rsp)
  0x00007f75704cd9a4: mov    %rbp,0x50(%rsp)
  0x00007f75704cd9a9: mov    %rsi,0x48(%rsp)
  0x00007f75704cd9ae: mov    %rdi,0x40(%rsp)
  0x00007f75704cd9b3: mov    %r8,0x38(%rsp)
  0x00007f75704cd9b8: mov    %r9,0x30(%rsp)
  0x00007f75704cd9bd: mov    %r10,0x28(%rsp)
  0x00007f75704cd9c2: mov    %r11,0x20(%rsp)
  0x00007f75704cd9c7: mov    %r12,0x18(%rsp)
  0x00007f75704cd9cc: mov    %r13,0x10(%rsp)
  0x00007f75704cd9d1: mov    %r14,0x8(%rsp)
  0x00007f75704cd9d6: mov    %r15,(%rsp)
  0x00007f75704cd9da: sub    $0x200,%rsp
  0x00007f75704cd9e1: fxsave64 (%rsp)
  0x00007f75704cd9e6: mov    %rbx,%rdi
  0x00007f75704cd9e9: mov    %rax,%rsi
  0x00007f75704cd9ec: callq  0x00007f7585522bca
  0x00007f75704cd9f1: fxrstor64 (%rsp)
  0x00007f75704cd9f6: add    $0x200,%rsp
  0x00007f75704cd9fd: mov    (%rsp),%r15
  0x00007f75704cda01: mov    0x8(%rsp),%r14
  0x00007f75704cda06: mov    0x10(%rsp),%r13
  0x00007f75704cda0b: mov    0x18(%rsp),%r12
  0x00007f75704cda10: mov    0x20(%rsp),%r11
  0x00007f75704cda15: mov    0x28(%rsp),%r10
  0x00007f75704cda1a: mov    0x30(%rsp),%r9
  0x00007f75704cda1f: mov    0x38(%rsp),%r8
  0x00007f75704cda24: mov    0x40(%rsp),%rdi
  0x00007f75704cda29: mov    0x48(%rsp),%rsi
  0x00007f75704cda2e: mov    0x50(%rsp),%rbp
  0x00007f75704cda33: mov    0x60(%rsp),%rbx
  0x00007f75704cda38: mov    0x68(%rsp),%rdx
  0x00007f75704cda3d: mov    0x70(%rsp),%rcx
  0x00007f75704cda42: mov    0x78(%rsp),%rax
  0x00007f75704cda47: add    $0x80,%rsp
  0x00007f75704cda4e: add    $0x8,%rsp
  0x00007f75704cda52: popfq  
  0x00007f75704cda53: mov    %r13,%rsp
  0x00007f75704cda56: pop    %rax
  0x00007f75704cda57: mov    %rsp,%r13
  0x00007f75704cda5a: sub    $0x40,%rsp
  0x00007f75704cda5e: mov    %rax,(%rsp)
  0x00007f75704cda62: mov    %rsi,0x30(%rsp)
  0x00007f75704cda67: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cda71: mov    %rax,0x28(%rsp)
  0x00007f75704cda76: mov    %rdx,0x20(%rsp)
  0x00007f75704cda7b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75704cda85: mov    %rax,0x18(%rsp)
  0x00007f75704cda8a: mov    %rcx,0x10(%rsp)
  0x00007f75704cda8f: mov    %r8,0x8(%rsp)
  0x00007f75704cda94: mov    0x40(%rbx),%rcx
  0x00007f75704cda98: jmpq   *%rcx

Decoding ExceptionBlob 0x00007f757036de90
  0x00007f757036dee0: push   %rdx
  0x00007f757036dee1: sub    $0x8,%rsp
  0x00007f757036dee5: mov    %rbp,(%rsp)
  0x00007f757036dee9: mov    %rax,0x2d0(%r15)
  0x00007f757036def0: mov    %rdx,0x2d8(%r15)
  0x00007f757036def7: movabs $0x7f757036def7,%r10
  0x00007f757036df01: mov    %r10,0x208(%r15)
  0x00007f757036df08: mov    %rsp,0x200(%r15)
  0x00007f757036df0f: mov    %r15,%rdi
  0x00007f757036df12: and    $0xfffffffffffffff0,%rsp
  0x00007f757036df16: callq  0x00007f758551265e
  0x00007f757036df1b: movabs $0x0,%r10
  0x00007f757036df25: mov    %r10,0x200(%r15)
  0x00007f757036df2c: movabs $0x0,%r10
  0x00007f757036df36: mov    %r10,0x208(%r15)
  0x00007f757036df3d: mov    (%rsp),%rbp
  0x00007f757036df41: add    $0x8,%rsp
  0x00007f757036df45: pop    %rdx
  0x00007f757036df46: mov    %rax,%r8
  0x00007f757036df49: mov    0x2d0(%r15),%rax
  0x00007f757036df50: mov    0x2d8(%r15),%rdx
  0x00007f757036df57: movq   $0x0,0x2e0(%r15)
  0x00007f757036df62: movq   $0x0,0x2d8(%r15)
  0x00007f757036df6d: movq   $0x0,0x2d0(%r15)
  0x00007f757036df78: jmpq   *%r8
  0x00007f757036df7b: hlt    
  0x00007f757036df7c: hlt    
  0x00007f757036df7d: hlt    
  0x00007f757036df7e: hlt    
  0x00007f757036df7f: hlt    

Decoding RuntimeStub - dtrace_object_alloc Runtime1 stub 0x00007f75704ce190
  0x00007f75704ce200: push   %rbp
  0x00007f75704ce201: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f75704ce204: mov    %rsp,-0x28(%rsp)
  0x00007f75704ce209: sub    $0x80,%rsp
  0x00007f75704ce210: mov    %rax,0x78(%rsp)
  0x00007f75704ce215: mov    %rcx,0x70(%rsp)
  0x00007f75704ce21a: mov    %rdx,0x68(%rsp)
  0x00007f75704ce21f: mov    %rbx,0x60(%rsp)
  0x00007f75704ce224: mov    %rbp,0x50(%rsp)
  0x00007f75704ce229: mov    %rsi,0x48(%rsp)
  0x00007f75704ce22e: mov    %rdi,0x40(%rsp)
  0x00007f75704ce233: mov    %r8,0x38(%rsp)
  0x00007f75704ce238: mov    %r9,0x30(%rsp)
  0x00007f75704ce23d: mov    %r10,0x28(%rsp)
  0x00007f75704ce242: mov    %r11,0x20(%rsp)
  0x00007f75704ce247: mov    %r12,0x18(%rsp)
  0x00007f75704ce24c: mov    %r13,0x10(%rsp)
  0x00007f75704ce251: mov    %r14,0x8(%rsp)
  0x00007f75704ce256: mov    %r15,(%rsp)
  0x00007f75704ce25a: sub    $0x150,%rsp
  0x00007f75704ce261: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f75704ce26d: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704ce273: vmovsd %xmm1,0x10(%rsp)
  0x00007f75704ce279: vmovsd %xmm2,0x18(%rsp)
  0x00007f75704ce27f: vmovsd %xmm3,0x20(%rsp)
  0x00007f75704ce285: vmovsd %xmm4,0x28(%rsp)
  0x00007f75704ce28b: vmovsd %xmm5,0x30(%rsp)
  0x00007f75704ce291: vmovsd %xmm6,0x38(%rsp)
  0x00007f75704ce297: vmovsd %xmm7,0x40(%rsp)
  0x00007f75704ce29d: vmovsd %xmm8,0x48(%rsp)
  0x00007f75704ce2a3: vmovsd %xmm9,0x50(%rsp)
  0x00007f75704ce2a9: vmovsd %xmm10,0x58(%rsp)
  0x00007f75704ce2af: vmovsd %xmm11,0x60(%rsp)
  0x00007f75704ce2b5: vmovsd %xmm12,0x68(%rsp)
  0x00007f75704ce2bb: vmovsd %xmm13,0x70(%rsp)
  0x00007f75704ce2c1: vmovsd %xmm14,0x78(%rsp)
  0x00007f75704ce2c7: vmovsd %xmm15,0x80(%rsp)
  0x00007f75704ce2d0: mov    %rax,%rdi
  0x00007f75704ce2d3: callq  0x00007f758551eff6
  ;; restore_live_registers
  0x00007f75704ce2d8: vmovsd 0x8(%rsp),%xmm0
  0x00007f75704ce2de: vmovsd 0x10(%rsp),%xmm1
  0x00007f75704ce2e4: vmovsd 0x18(%rsp),%xmm2
  0x00007f75704ce2ea: vmovsd 0x20(%rsp),%xmm3
  0x00007f75704ce2f0: vmovsd 0x28(%rsp),%xmm4
  0x00007f75704ce2f6: vmovsd 0x30(%rsp),%xmm5
  0x00007f75704ce2fc: vmovsd 0x38(%rsp),%xmm6
  0x00007f75704ce302: vmovsd 0x40(%rsp),%xmm7
  0x00007f75704ce308: vmovsd 0x48(%rsp),%xmm8
  0x00007f75704ce30e: vmovsd 0x50(%rsp),%xmm9
  0x00007f75704ce314: vmovsd 0x58(%rsp),%xmm10
  0x00007f75704ce31a: vmovsd 0x60(%rsp),%xmm11
  0x00007f75704ce320: vmovsd 0x68(%rsp),%xmm12
  0x00007f75704ce326: vmovsd 0x70(%rsp),%xmm13
  0x00007f75704ce32c: vmovsd 0x78(%rsp),%xmm14
  0x00007f75704ce332: vmovsd 0x80(%rsp),%xmm15
  0x00007f75704ce33b: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f75704ce347: je     0x00007f75704ce3c4
  0x00007f75704ce34d: mov    %rsp,-0x28(%rsp)
  0x00007f75704ce352: sub    $0x80,%rsp
  0x00007f75704ce359: mov    %rax,0x78(%rsp)
  0x00007f75704ce35e: mov    %rcx,0x70(%rsp)
  0x00007f75704ce363: mov    %rdx,0x68(%rsp)
  0x00007f75704ce368: mov    %rbx,0x60(%rsp)
  0x00007f75704ce36d: mov    %rbp,0x50(%rsp)
  0x00007f75704ce372: mov    %rsi,0x48(%rsp)
  0x00007f75704ce377: mov    %rdi,0x40(%rsp)
  0x00007f75704ce37c: mov    %r8,0x38(%rsp)
  0x00007f75704ce381: mov    %r9,0x30(%rsp)
  0x00007f75704ce386: mov    %r10,0x28(%rsp)
  0x00007f75704ce38b: mov    %r11,0x20(%rsp)
  0x00007f75704ce390: mov    %r12,0x18(%rsp)
  0x00007f75704ce395: mov    %r13,0x10(%rsp)
  0x00007f75704ce39a: mov    %r14,0x8(%rsp)
  0x00007f75704ce39f: mov    %r15,(%rsp)
  0x00007f75704ce3a3: movabs $0x7f75856f340f,%rdi
  0x00007f75704ce3ad: movabs $0x7f75704ce34d,%rsi
  0x00007f75704ce3b7: mov    %rsp,%rdx
  0x00007f75704ce3ba: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ce3be: callq  0x00007f75853729fa
  0x00007f75704ce3c3: hlt    
  0x00007f75704ce3c4: add    $0x150,%rsp
  0x00007f75704ce3cb: mov    (%rsp),%r15
  0x00007f75704ce3cf: mov    0x8(%rsp),%r14
  0x00007f75704ce3d4: mov    0x10(%rsp),%r13
  0x00007f75704ce3d9: mov    0x18(%rsp),%r12
  0x00007f75704ce3de: mov    0x20(%rsp),%r11
  0x00007f75704ce3e3: mov    0x28(%rsp),%r10
  0x00007f75704ce3e8: mov    0x30(%rsp),%r9
  0x00007f75704ce3ed: mov    0x38(%rsp),%r8
  0x00007f75704ce3f2: mov    0x40(%rsp),%rdi
  0x00007f75704ce3f7: mov    0x48(%rsp),%rsi
  0x00007f75704ce3fc: mov    0x50(%rsp),%rbp
  0x00007f75704ce401: mov    0x60(%rsp),%rbx
  0x00007f75704ce406: mov    0x68(%rsp),%rdx
  0x00007f75704ce40b: mov    0x70(%rsp),%rcx
  0x00007f75704ce410: mov    0x78(%rsp),%rax
  0x00007f75704ce415: add    $0x80,%rsp
  0x00007f75704ce41c: leaveq 
  0x00007f75704ce41d: retq   
  0x00007f75704ce41e: nop
  0x00007f75704ce41f: nop

Decoding RuntimeStub - unwind_exception Runtime1 stub 0x00007f75704cdf10
  0x00007f75704cdfa0: movabs $0xdead,%rbx
  0x00007f75704cdfaa: movabs $0xdead,%rcx
  0x00007f75704cdfb4: movabs $0xdead,%rdx
  0x00007f75704cdfbe: movabs $0xdead,%rsi
  0x00007f75704cdfc8: movabs $0xdead,%rdi
  0x00007f75704cdfd2: cmpq   $0x0,0x2d0(%r15)
  0x00007f75704cdfdd: je     0x00007f75704ce05a
  0x00007f75704cdfe3: mov    %rsp,-0x28(%rsp)
  0x00007f75704cdfe8: sub    $0x80,%rsp
  0x00007f75704cdfef: mov    %rax,0x78(%rsp)
  0x00007f75704cdff4: mov    %rcx,0x70(%rsp)
  0x00007f75704cdff9: mov    %rdx,0x68(%rsp)
  0x00007f75704cdffe: mov    %rbx,0x60(%rsp)
  0x00007f75704ce003: mov    %rbp,0x50(%rsp)
  0x00007f75704ce008: mov    %rsi,0x48(%rsp)
  0x00007f75704ce00d: mov    %rdi,0x40(%rsp)
  0x00007f75704ce012: mov    %r8,0x38(%rsp)
  0x00007f75704ce017: mov    %r9,0x30(%rsp)
  0x00007f75704ce01c: mov    %r10,0x28(%rsp)
  0x00007f75704ce021: mov    %r11,0x20(%rsp)
  0x00007f75704ce026: mov    %r12,0x18(%rsp)
  0x00007f75704ce02b: mov    %r13,0x10(%rsp)
  0x00007f75704ce030: mov    %r14,0x8(%rsp)
  0x00007f75704ce035: mov    %r15,(%rsp)
  0x00007f75704ce039: movabs $0x7f75856f3497,%rdi
  0x00007f75704ce043: movabs $0x7f75704cdfe3,%rsi
  0x00007f75704ce04d: mov    %rsp,%rdx
  0x00007f75704ce050: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ce054: callq  0x00007f75853729fa
  0x00007f75704ce059: hlt    
  0x00007f75704ce05a: cmpq   $0x0,0x2d8(%r15)
  0x00007f75704ce065: je     0x00007f75704ce0e2
  0x00007f75704ce06b: mov    %rsp,-0x28(%rsp)
  0x00007f75704ce070: sub    $0x80,%rsp
  0x00007f75704ce077: mov    %rax,0x78(%rsp)
  0x00007f75704ce07c: mov    %rcx,0x70(%rsp)
  0x00007f75704ce081: mov    %rdx,0x68(%rsp)
  0x00007f75704ce086: mov    %rbx,0x60(%rsp)
  0x00007f75704ce08b: mov    %rbp,0x50(%rsp)
  0x00007f75704ce090: mov    %rsi,0x48(%rsp)
  0x00007f75704ce095: mov    %rdi,0x40(%rsp)
  0x00007f75704ce09a: mov    %r8,0x38(%rsp)
  0x00007f75704ce09f: mov    %r9,0x30(%rsp)
  0x00007f75704ce0a4: mov    %r10,0x28(%rsp)
  0x00007f75704ce0a9: mov    %r11,0x20(%rsp)
  0x00007f75704ce0ae: mov    %r12,0x18(%rsp)
  0x00007f75704ce0b3: mov    %r13,0x10(%rsp)
  0x00007f75704ce0b8: mov    %r14,0x8(%rsp)
  0x00007f75704ce0bd: mov    %r15,(%rsp)
  0x00007f75704ce0c1: movabs $0x7f75856f34b3,%rdi
  0x00007f75704ce0cb: movabs $0x7f75704ce06b,%rsi
  0x00007f75704ce0d5: mov    %rsp,%rdx
  0x00007f75704ce0d8: and    $0xfffffffffffffff0,%rsp
  0x00007f75704ce0dc: callq  0x00007f75853729fa
  0x00007f75704ce0e1: hlt    
  0x00007f75704ce0e2: emms   
  0x00007f75704ce0e4: mov    %rax,%r14
  0x00007f75704ce0e7: mov    (%rsp),%rdx
  0x00007f75704ce0eb: mov    %rdx,%rsi
  0x00007f75704ce0ee: mov    %r15,%rdi
  0x00007f75704ce0f1: test   $0xf,%esp
  0x00007f75704ce0f7: je     0x00007f75704ce10f
  0x00007f75704ce0fd: sub    $0x8,%rsp
  0x00007f75704ce101: callq  0x00007f758551c9be
  0x00007f75704ce106: add    $0x8,%rsp
  0x00007f75704ce10a: jmpq   0x00007f75704ce114
  0x00007f75704ce10f: callq  0x00007f758551c9be
  0x00007f75704ce114: movabs $0xdead,%rbx
  0x00007f75704ce11e: movabs $0xdead,%rcx
  0x00007f75704ce128: movabs $0xdead,%rdx
  0x00007f75704ce132: movabs $0xdead,%rdi
  0x00007f75704ce13c: mov    %rax,%rbx
  0x00007f75704ce13f: mov    %r14,%rax
  0x00007f75704ce142: pop    %rdx
  0x00007f75704ce143: jmpq   *%rbx
  0x00007f75704ce145: nop
  0x00007f75704ce146: nop
  0x00007f75704ce147: nop

Decoding RuntimeStub - forward_exception Runtime1 stub 0x00007f757055b190
  ;; generate_handle_exception
  0x00007f757055b240: mov    0x8(%r15),%rax
  0x00007f757055b244: movabs $0x0,%r10
  0x00007f757055b24e: mov    %r10,0x8(%r15)
  0x00007f757055b252: mov    0x8(%rbp),%rdx
  0x00007f757055b256: movabs $0x0,%r10
  0x00007f757055b260: mov    %r10,0x260(%r15)
  0x00007f757055b267: movabs $0x0,%r10
  0x00007f757055b271: mov    %r10,0x268(%r15)
  0x00007f757055b278: movabs $0xdead,%rbx
  0x00007f757055b282: movabs $0xdead,%rcx
  0x00007f757055b28c: movabs $0xdead,%rsi
  0x00007f757055b296: movabs $0xdead,%rdi
  0x00007f757055b2a0: cmpq   $0x0,0x2d0(%r15)
  0x00007f757055b2ab: je     0x00007f757055b328
  0x00007f757055b2b1: mov    %rsp,-0x28(%rsp)
  0x00007f757055b2b6: sub    $0x80,%rsp
  0x00007f757055b2bd: mov    %rax,0x78(%rsp)
  0x00007f757055b2c2: mov    %rcx,0x70(%rsp)
  0x00007f757055b2c7: mov    %rdx,0x68(%rsp)
  0x00007f757055b2cc: mov    %rbx,0x60(%rsp)
  0x00007f757055b2d1: mov    %rbp,0x50(%rsp)
  0x00007f757055b2d6: mov    %rsi,0x48(%rsp)
  0x00007f757055b2db: mov    %rdi,0x40(%rsp)
  0x00007f757055b2e0: mov    %r8,0x38(%rsp)
  0x00007f757055b2e5: mov    %r9,0x30(%rsp)
  0x00007f757055b2ea: mov    %r10,0x28(%rsp)
  0x00007f757055b2ef: mov    %r11,0x20(%rsp)
  0x00007f757055b2f4: mov    %r12,0x18(%rsp)
  0x00007f757055b2f9: mov    %r13,0x10(%rsp)
  0x00007f757055b2fe: mov    %r14,0x8(%rsp)
  0x00007f757055b303: mov    %r15,(%rsp)
  0x00007f757055b307: movabs $0x7f75856f3464,%rdi
  0x00007f757055b311: movabs $0x7f757055b2b1,%rsi
  0x00007f757055b31b: mov    %rsp,%rdx
  0x00007f757055b31e: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b322: callq  0x00007f75853729fa
  0x00007f757055b327: hlt    
  0x00007f757055b328: cmpq   $0x0,0x2d8(%r15)
  0x00007f757055b333: je     0x00007f757055b3b0
  0x00007f757055b339: mov    %rsp,-0x28(%rsp)
  0x00007f757055b33e: sub    $0x80,%rsp
  0x00007f757055b345: mov    %rax,0x78(%rsp)
  0x00007f757055b34a: mov    %rcx,0x70(%rsp)
  0x00007f757055b34f: mov    %rdx,0x68(%rsp)
  0x00007f757055b354: mov    %rbx,0x60(%rsp)
  0x00007f757055b359: mov    %rbp,0x50(%rsp)
  0x00007f757055b35e: mov    %rsi,0x48(%rsp)
  0x00007f757055b363: mov    %rdi,0x40(%rsp)
  0x00007f757055b368: mov    %r8,0x38(%rsp)
  0x00007f757055b36d: mov    %r9,0x30(%rsp)
  0x00007f757055b372: mov    %r10,0x28(%rsp)
  0x00007f757055b377: mov    %r11,0x20(%rsp)
  0x00007f757055b37c: mov    %r12,0x18(%rsp)
  0x00007f757055b381: mov    %r13,0x10(%rsp)
  0x00007f757055b386: mov    %r14,0x8(%rsp)
  0x00007f757055b38b: mov    %r15,(%rsp)
  0x00007f757055b38f: movabs $0x7f75856f347e,%rdi
  0x00007f757055b399: movabs $0x7f757055b339,%rsi
  0x00007f757055b3a3: mov    %rsp,%rdx
  0x00007f757055b3a6: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b3aa: callq  0x00007f75853729fa
  0x00007f757055b3af: hlt    
  0x00007f757055b3b0: mov    %rax,0x2d0(%r15)
  0x00007f757055b3b7: mov    %rdx,0x2d8(%r15)
  0x00007f757055b3be: mov    %rdx,0x8(%rbp)
  0x00007f757055b3c2: mov    %r15,%rdi
  0x00007f757055b3c5: mov    %rbp,0x210(%r15)
  0x00007f757055b3cc: mov    %rsp,0x200(%r15)
  0x00007f757055b3d3: callq  0x00007f7584e52b8c
  0x00007f757055b3d8: push   %rax
  0x00007f757055b3d9: push   %rdi
  0x00007f757055b3da: push   %rsi
  0x00007f757055b3db: push   %rdx
  0x00007f757055b3dc: push   %rcx
  0x00007f757055b3dd: push   %r8
  0x00007f757055b3df: push   %r9
  0x00007f757055b3e1: push   %r10
  0x00007f757055b3e3: mov    %rsp,%r10
  0x00007f757055b3e6: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b3ea: push   %r10
  0x00007f757055b3ec: push   %r11
  0x00007f757055b3ee: mov    $0x1,%edi
  0x00007f757055b3f3: callq  0x00007f7585f5a2d0
  0x00007f757055b3f8: pop    %r11
  0x00007f757055b3fa: pop    %rsp
  0x00007f757055b3fb: pop    %r10
  0x00007f757055b3fd: pop    %r9
  0x00007f757055b3ff: pop    %r8
  0x00007f757055b401: pop    %rcx
  0x00007f757055b402: pop    %rdx
  0x00007f757055b403: pop    %rsi
  0x00007f757055b404: pop    %rdi
  0x00007f757055b405: cmp    %rax,%r15
  0x00007f757055b408: je     0x00007f757055b48a
  0x00007f757055b40e: callq  0x00007f7585459a22
  0x00007f757055b413: mov    %rsp,-0x28(%rsp)
  0x00007f757055b418: sub    $0x80,%rsp
  0x00007f757055b41f: mov    %rax,0x78(%rsp)
  0x00007f757055b424: mov    %rcx,0x70(%rsp)
  0x00007f757055b429: mov    %rdx,0x68(%rsp)
  0x00007f757055b42e: mov    %rbx,0x60(%rsp)
  0x00007f757055b433: mov    %rbp,0x50(%rsp)
  0x00007f757055b438: mov    %rsi,0x48(%rsp)
  0x00007f757055b43d: mov    %rdi,0x40(%rsp)
  0x00007f757055b442: mov    %r8,0x38(%rsp)
  0x00007f757055b447: mov    %r9,0x30(%rsp)
  0x00007f757055b44c: mov    %r10,0x28(%rsp)
  0x00007f757055b451: mov    %r11,0x20(%rsp)
  0x00007f757055b456: mov    %r12,0x18(%rsp)
  0x00007f757055b45b: mov    %r13,0x10(%rsp)
  0x00007f757055b460: mov    %r14,0x8(%rsp)
  0x00007f757055b465: mov    %r15,(%rsp)
  0x00007f757055b469: movabs $0x7f75856f3278,%rdi
  0x00007f757055b473: movabs $0x7f757055b413,%rsi
  0x00007f757055b47d: mov    %rsp,%rdx
  0x00007f757055b480: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b484: callq  0x00007f75853729fa
  0x00007f757055b489: hlt    
  0x00007f757055b48a: pop    %rax
  0x00007f757055b48b: movabs $0x0,%r10
  0x00007f757055b495: mov    %r10,0x200(%r15)
  0x00007f757055b49c: movabs $0x0,%r10
  0x00007f757055b4a6: mov    %r10,0x210(%r15)
  0x00007f757055b4ad: movabs $0x0,%r10
  0x00007f757055b4b7: mov    %r10,0x208(%r15)
  0x00007f757055b4be: cmpq   $0x0,0x8(%r15)
  0x00007f757055b4c6: je     0x00007f757055b547
  0x00007f757055b4cc: mov    0x8(%r15),%rax
  0x00007f757055b4d0: mov    %rsp,-0x28(%rsp)
  0x00007f757055b4d5: sub    $0x80,%rsp
  0x00007f757055b4dc: mov    %rax,0x78(%rsp)
  0x00007f757055b4e1: mov    %rcx,0x70(%rsp)
  0x00007f757055b4e6: mov    %rdx,0x68(%rsp)
  0x00007f757055b4eb: mov    %rbx,0x60(%rsp)
  0x00007f757055b4f0: mov    %rbp,0x50(%rsp)
  0x00007f757055b4f5: mov    %rsi,0x48(%rsp)
  0x00007f757055b4fa: mov    %rdi,0x40(%rsp)
  0x00007f757055b4ff: mov    %r8,0x38(%rsp)
  0x00007f757055b504: mov    %r9,0x30(%rsp)
  0x00007f757055b509: mov    %r10,0x28(%rsp)
  0x00007f757055b50e: mov    %r11,0x20(%rsp)
  0x00007f757055b513: mov    %r12,0x18(%rsp)
  0x00007f757055b518: mov    %r13,0x10(%rsp)
  0x00007f757055b51d: mov    %r14,0x8(%rsp)
  0x00007f757055b522: mov    %r15,(%rsp)
  0x00007f757055b526: movabs $0x7f75856bea2b,%rdi
  0x00007f757055b530: movabs $0x7f757055b4d0,%rsi
  0x00007f757055b53a: mov    %rsp,%rdx
  0x00007f757055b53d: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b541: callq  0x00007f75853729fa
  0x00007f757055b546: hlt    
  0x00007f757055b547: movabs $0xdead,%rbx
  0x00007f757055b551: movabs $0xdead,%rcx
  0x00007f757055b55b: movabs $0xdead,%rdx
  0x00007f757055b565: movabs $0xdead,%rsi
  0x00007f757055b56f: movabs $0xdead,%rdi
  0x00007f757055b579: mov    %rax,0x8(%rbp)
  ;; restore_live_registers
  0x00007f757055b57d: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055b583: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055b589: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055b58f: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055b595: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055b59b: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055b5a1: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055b5a7: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055b5ad: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055b5b3: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055b5b9: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055b5bf: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055b5c5: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055b5cb: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055b5d1: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055b5d7: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055b5e0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055b5ec: je     0x00007f757055b669
  0x00007f757055b5f2: mov    %rsp,-0x28(%rsp)
  0x00007f757055b5f7: sub    $0x80,%rsp
  0x00007f757055b5fe: mov    %rax,0x78(%rsp)
  0x00007f757055b603: mov    %rcx,0x70(%rsp)
  0x00007f757055b608: mov    %rdx,0x68(%rsp)
  0x00007f757055b60d: mov    %rbx,0x60(%rsp)
  0x00007f757055b612: mov    %rbp,0x50(%rsp)
  0x00007f757055b617: mov    %rsi,0x48(%rsp)
  0x00007f757055b61c: mov    %rdi,0x40(%rsp)
  0x00007f757055b621: mov    %r8,0x38(%rsp)
  0x00007f757055b626: mov    %r9,0x30(%rsp)
  0x00007f757055b62b: mov    %r10,0x28(%rsp)
  0x00007f757055b630: mov    %r11,0x20(%rsp)
  0x00007f757055b635: mov    %r12,0x18(%rsp)
  0x00007f757055b63a: mov    %r13,0x10(%rsp)
  0x00007f757055b63f: mov    %r14,0x8(%rsp)
  0x00007f757055b644: mov    %r15,(%rsp)
  0x00007f757055b648: movabs $0x7f75856f340f,%rdi
  0x00007f757055b652: movabs $0x7f757055b5f2,%rsi
  0x00007f757055b65c: mov    %rsp,%rdx
  0x00007f757055b65f: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b663: callq  0x00007f75853729fa
  0x00007f757055b668: hlt    
  0x00007f757055b669: add    $0x150,%rsp
  0x00007f757055b670: mov    (%rsp),%r15
  0x00007f757055b674: mov    0x8(%rsp),%r14
  0x00007f757055b679: mov    0x10(%rsp),%r13
  0x00007f757055b67e: mov    0x18(%rsp),%r12
  0x00007f757055b683: mov    0x20(%rsp),%r11
  0x00007f757055b688: mov    0x28(%rsp),%r10
  0x00007f757055b68d: mov    0x30(%rsp),%r9
  0x00007f757055b692: mov    0x38(%rsp),%r8
  0x00007f757055b697: mov    0x40(%rsp),%rdi
  0x00007f757055b69c: mov    0x48(%rsp),%rsi
  0x00007f757055b6a1: mov    0x50(%rsp),%rbp
  0x00007f757055b6a6: mov    0x60(%rsp),%rbx
  0x00007f757055b6ab: mov    0x68(%rsp),%rdx
  0x00007f757055b6b0: mov    0x70(%rsp),%rcx
  0x00007f757055b6b5: mov    0x78(%rsp),%rax
  0x00007f757055b6ba: add    $0x80,%rsp
  0x00007f757055b6c1: leaveq 
  0x00007f757055b6c2: retq   
  0x00007f757055b6c3: nop
  0x00007f757055b6c4: nop
  0x00007f757055b6c5: nop
  0x00007f757055b6c6: nop
  0x00007f757055b6c7: nop

Decoding RuntimeStub - throw_range_check_failed Runtime1 stub 0x00007f75704cdbd0
  0x00007f75704cdc60: push   %rbp
  0x00007f75704cdc61: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f75704cdc64: mov    %rsp,-0x28(%rsp)
  0x00007f75704cdc69: sub    $0x80,%rsp
  0x00007f75704cdc70: mov    %rax,0x78(%rsp)
  0x00007f75704cdc75: mov    %rcx,0x70(%rsp)
  0x00007f75704cdc7a: mov    %rdx,0x68(%rsp)
  0x00007f75704cdc7f: mov    %rbx,0x60(%rsp)
  0x00007f75704cdc84: mov    %rbp,0x50(%rsp)
  0x00007f75704cdc89: mov    %rsi,0x48(%rsp)
  0x00007f75704cdc8e: mov    %rdi,0x40(%rsp)
  0x00007f75704cdc93: mov    %r8,0x38(%rsp)
  0x00007f75704cdc98: mov    %r9,0x30(%rsp)
  0x00007f75704cdc9d: mov    %r10,0x28(%rsp)
  0x00007f75704cdca2: mov    %r11,0x20(%rsp)
  0x00007f75704cdca7: mov    %r12,0x18(%rsp)
  0x00007f75704cdcac: mov    %r13,0x10(%rsp)
  0x00007f75704cdcb1: mov    %r14,0x8(%rsp)
  0x00007f75704cdcb6: mov    %r15,(%rsp)
  0x00007f75704cdcba: sub    $0x150,%rsp
  0x00007f75704cdcc1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f75704cdccd: vmovsd %xmm0,0x8(%rsp)
  0x00007f75704cdcd3: vmovsd %xmm1,0x10(%rsp)
  0x00007f75704cdcd9: vmovsd %xmm2,0x18(%rsp)
  0x00007f75704cdcdf: vmovsd %xmm3,0x20(%rsp)
  0x00007f75704cdce5: vmovsd %xmm4,0x28(%rsp)
  0x00007f75704cdceb: vmovsd %xmm5,0x30(%rsp)
  0x00007f75704cdcf1: vmovsd %xmm6,0x38(%rsp)
  0x00007f75704cdcf7: vmovsd %xmm7,0x40(%rsp)
  0x00007f75704cdcfd: vmovsd %xmm8,0x48(%rsp)
  0x00007f75704cdd03: vmovsd %xmm9,0x50(%rsp)
  0x00007f75704cdd09: vmovsd %xmm10,0x58(%rsp)
  0x00007f75704cdd0f: vmovsd %xmm11,0x60(%rsp)
  0x00007f75704cdd15: vmovsd %xmm12,0x68(%rsp)
  0x00007f75704cdd1b: vmovsd %xmm13,0x70(%rsp)
  0x00007f75704cdd21: vmovsd %xmm14,0x78(%rsp)
  0x00007f75704cdd27: vmovsd %xmm15,0x80(%rsp)
  0x00007f75704cdd30: movabs $0xdead,%rax
  0x00007f75704cdd3a: movabs $0xdead,%rbx
  0x00007f75704cdd44: movabs $0xdead,%rcx
  0x00007f75704cdd4e: movabs $0xdead,%rdx
  0x00007f75704cdd58: movabs $0xdead,%rsi
  0x00007f75704cdd62: movabs $0xdead,%rdi
  0x00007f75704cdd6c: mov    0x10(%rbp),%rsi
  0x00007f75704cdd70: mov    %r15,%rdi
  0x00007f75704cdd73: mov    %rbp,0x210(%r15)
  0x00007f75704cdd7a: mov    %rsp,0x200(%r15)
  0x00007f75704cdd81: callq  0x00007f7584e52c82
  0x00007f75704cdd86: push   %rax
  0x00007f75704cdd87: push   %rdi
  0x00007f75704cdd88: push   %rsi
  0x00007f75704cdd89: push   %rdx
  0x00007f75704cdd8a: push   %rcx
  0x00007f75704cdd8b: push   %r8
  0x00007f75704cdd8d: push   %r9
  0x00007f75704cdd8f: push   %r10
  0x00007f75704cdd91: mov    %rsp,%r10
  0x00007f75704cdd94: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cdd98: push   %r10
  0x00007f75704cdd9a: push   %r11
  0x00007f75704cdd9c: mov    $0x1,%edi
  0x00007f75704cdda1: callq  0x00007f7585f5a2d0
  0x00007f75704cdda6: pop    %r11
  0x00007f75704cdda8: pop    %rsp
  0x00007f75704cdda9: pop    %r10
  0x00007f75704cddab: pop    %r9
  0x00007f75704cddad: pop    %r8
  0x00007f75704cddaf: pop    %rcx
  0x00007f75704cddb0: pop    %rdx
  0x00007f75704cddb1: pop    %rsi
  0x00007f75704cddb2: pop    %rdi
  0x00007f75704cddb3: cmp    %rax,%r15
  0x00007f75704cddb6: je     0x00007f75704cde38
  0x00007f75704cddbc: callq  0x00007f7585459a22
  0x00007f75704cddc1: mov    %rsp,-0x28(%rsp)
  0x00007f75704cddc6: sub    $0x80,%rsp
  0x00007f75704cddcd: mov    %rax,0x78(%rsp)
  0x00007f75704cddd2: mov    %rcx,0x70(%rsp)
  0x00007f75704cddd7: mov    %rdx,0x68(%rsp)
  0x00007f75704cdddc: mov    %rbx,0x60(%rsp)
  0x00007f75704cdde1: mov    %rbp,0x50(%rsp)
  0x00007f75704cdde6: mov    %rsi,0x48(%rsp)
  0x00007f75704cddeb: mov    %rdi,0x40(%rsp)
  0x00007f75704cddf0: mov    %r8,0x38(%rsp)
  0x00007f75704cddf5: mov    %r9,0x30(%rsp)
  0x00007f75704cddfa: mov    %r10,0x28(%rsp)
  0x00007f75704cddff: mov    %r11,0x20(%rsp)
  0x00007f75704cde04: mov    %r12,0x18(%rsp)
  0x00007f75704cde09: mov    %r13,0x10(%rsp)
  0x00007f75704cde0e: mov    %r14,0x8(%rsp)
  0x00007f75704cde13: mov    %r15,(%rsp)
  0x00007f75704cde17: movabs $0x7f75856f3278,%rdi
  0x00007f75704cde21: movabs $0x7f75704cddc1,%rsi
  0x00007f75704cde2b: mov    %rsp,%rdx
  0x00007f75704cde2e: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cde32: callq  0x00007f75853729fa
  0x00007f75704cde37: hlt    
  0x00007f75704cde38: pop    %rax
  0x00007f75704cde39: movabs $0x0,%r10
  0x00007f75704cde43: mov    %r10,0x200(%r15)
  0x00007f75704cde4a: movabs $0x0,%r10
  0x00007f75704cde54: mov    %r10,0x210(%r15)
  0x00007f75704cde5b: movabs $0x0,%r10
  0x00007f75704cde65: mov    %r10,0x208(%r15)
  0x00007f75704cde6c: cmpq   $0x0,0x8(%r15)
  0x00007f75704cde74: je     0x00007f75704cde83
  0x00007f75704cde7a: mov    0x8(%r15),%rax
  0x00007f75704cde7e: jmpq   0x00007f757055b240
  0x00007f75704cde83: mov    %rsp,-0x28(%rsp)
  0x00007f75704cde88: sub    $0x80,%rsp
  0x00007f75704cde8f: mov    %rax,0x78(%rsp)
  0x00007f75704cde94: mov    %rcx,0x70(%rsp)
  0x00007f75704cde99: mov    %rdx,0x68(%rsp)
  0x00007f75704cde9e: mov    %rbx,0x60(%rsp)
  0x00007f75704cdea3: mov    %rbp,0x50(%rsp)
  0x00007f75704cdea8: mov    %rsi,0x48(%rsp)
  0x00007f75704cdead: mov    %rdi,0x40(%rsp)
  0x00007f75704cdeb2: mov    %r8,0x38(%rsp)
  0x00007f75704cdeb7: mov    %r9,0x30(%rsp)
  0x00007f75704cdebc: mov    %r10,0x28(%rsp)
  0x00007f75704cdec1: mov    %r11,0x20(%rsp)
  0x00007f75704cdec6: mov    %r12,0x18(%rsp)
  0x00007f75704cdecb: mov    %r13,0x10(%rsp)
  0x00007f75704cded0: mov    %r14,0x8(%rsp)
  0x00007f75704cded5: mov    %r15,(%rsp)
  0x00007f75704cded9: movabs $0x7f75856f30d8,%rdi
  0x00007f75704cdee3: movabs $0x7f75704cde83,%rsi
  0x00007f75704cdeed: mov    %rsp,%rdx
  0x00007f75704cdef0: and    $0xfffffffffffffff0,%rsp
  0x00007f75704cdef4: callq  0x00007f75853729fa
  0x00007f75704cdef9: hlt    
  0x00007f75704cdefa: leaveq 
  0x00007f75704cdefb: retq   
  0x00007f75704cdefc: nop
  0x00007f75704cdefd: nop
  0x00007f75704cdefe: nop
  0x00007f75704cdeff: nop

Decoding RuntimeStub - _new_instance_Java 0x00007f75704cdad0
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f75704cdb20: sub    $0x8,%rsp
  0x00007f75704cdb27: mov    %rbp,(%rsp)
  0x00007f75704cdb2b: mov    %rsp,0x200(%r15)
  0x00007f75704cdb32: mov    %rsi,%rdi
  0x00007f75704cdb35: mov    %r15,%rsi
  0x00007f75704cdb38: movabs $0x7f758550e6a2,%r10
  0x00007f75704cdb42: callq  *%r10
  0x00007f75704cdb45: mov    %r12,0x200(%r15)
  0x00007f75704cdb4c: mov    %r12,0x208(%r15)
  0x00007f75704cdb53: mov    0x260(%r15),%rax
  0x00007f75704cdb5a: mov    %r12,0x260(%r15)
  0x00007f75704cdb61: cmp    0x8(%r15),%r12
  0x00007f75704cdb65: jne    0x00007f75704cdb69
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f75704cdb67: pop    %rbp
  0x00007f75704cdb68: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f75704cdb69: movabs $0x7f7570369420,%r10
  0x00007f75704cdb73: xor    %ebx,%ebx
  0x00007f75704cdb75: pop    %rbp
  0x00007f75704cdb76: jmpq   *%r10
  0x00007f75704cdb79: hlt    
  0x00007f75704cdb7a: hlt    
  0x00007f75704cdb7b: hlt    
  0x00007f75704cdb7c: hlt    
  0x00007f75704cdb7d: hlt    
  0x00007f75704cdb7e: hlt    
  0x00007f75704cdb7f: hlt    

AHE@0x00007f758012ced0: 0xbbbbbbbbbbb00000 i2c: 0x00007f757055b7a0 c2i: 0x00007f757055b91f c2iUV: 0x00007f757055b8f2
i2c argument handler #110 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (724 bytes generated)
c2i argument handler starts at 0x7f757055b91f
  0x00007f757055b7a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757055b7a4: movabs $0x7f757036e3e0,%r11
  0x00007f757055b7ae: cmp    %r11,%rax
  0x00007f757055b7b1: jbe    0x00007f757055b7ca
  0x00007f757055b7b7: movabs $0x7f757046e3e0,%r11
  0x00007f757055b7c1: cmp    %r11,%rax
  0x00007f757055b7c4: jb     0x00007f757055b88d
  0x00007f757055b7ca: movabs $0x7f7570369420,%r11
  0x00007f757055b7d4: cmp    %r11,%rax
  0x00007f757055b7d7: jbe    0x00007f757055b7f0
  0x00007f757055b7dd: movabs $0x7f757036de58,%r11
  0x00007f757055b7e7: cmp    %r11,%rax
  0x00007f757055b7ea: jb     0x00007f757055b88d
  0x00007f757055b7f0: movabs $0x7f75704a9820,%r11
  0x00007f757055b7fa: cmp    %r11,%rax
  0x00007f757055b7fd: jbe    0x00007f757055b816
  0x00007f757055b803: movabs $0x7f75704af5e0,%r11
  0x00007f757055b80d: cmp    %r11,%rax
  0x00007f757055b810: jb     0x00007f757055b88d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757055b816: mov    %rsp,-0x28(%rsp)
  0x00007f757055b81b: sub    $0x80,%rsp
  0x00007f757055b822: mov    %rax,0x78(%rsp)
  0x00007f757055b827: mov    %rcx,0x70(%rsp)
  0x00007f757055b82c: mov    %rdx,0x68(%rsp)
  0x00007f757055b831: mov    %rbx,0x60(%rsp)
  0x00007f757055b836: mov    %rbp,0x50(%rsp)
  0x00007f757055b83b: mov    %rsi,0x48(%rsp)
  0x00007f757055b840: mov    %rdi,0x40(%rsp)
  0x00007f757055b845: mov    %r8,0x38(%rsp)
  0x00007f757055b84a: mov    %r9,0x30(%rsp)
  0x00007f757055b84f: mov    %r10,0x28(%rsp)
  0x00007f757055b854: mov    %r11,0x20(%rsp)
  0x00007f757055b859: mov    %r12,0x18(%rsp)
  0x00007f757055b85e: mov    %r13,0x10(%rsp)
  0x00007f757055b863: mov    %r14,0x8(%rsp)
  0x00007f757055b868: mov    %r15,(%rsp)
  0x00007f757055b86c: movabs $0x7f758592f470,%rdi
  0x00007f757055b876: movabs $0x7f757055b816,%rsi
  0x00007f757055b880: mov    %rsp,%rdx
  0x00007f757055b883: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b887: callq  0x00007f75853729fa
  0x00007f757055b88c: hlt    
  ;; } verify_i2ce 
  0x00007f757055b88d: mov    %rsp,%r11
  0x00007f757055b890: sub    $0x30,%rsp
  0x00007f757055b894: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b898: push   %rax
  0x00007f757055b899: mov    %r11,%rax
  0x00007f757055b89c: mov    0x50(%rbx),%r11
  0x00007f757055b8a0: mov    0x58(%rax),%rsi
  0x00007f757055b8a4: mov    0x50(%rax),%rdx
  0x00007f757055b8a8: mov    0x48(%rax),%rcx
  0x00007f757055b8ac: mov    0x40(%rax),%r8
  0x00007f757055b8b0: mov    0x38(%rax),%r9
  0x00007f757055b8b4: mov    0x30(%rax),%rdi
  0x00007f757055b8b8: mov    0x28(%rax),%r13
  0x00007f757055b8bc: mov    %r13,0x8(%rsp)
  0x00007f757055b8c1: mov    0x20(%rax),%r13
  0x00007f757055b8c5: mov    %r13,0x10(%rsp)
  0x00007f757055b8ca: mov    0x18(%rax),%r13
  0x00007f757055b8ce: mov    %r13,0x18(%rsp)
  0x00007f757055b8d3: mov    0x10(%rax),%r13
  0x00007f757055b8d7: mov    %r13,0x20(%rsp)
  0x00007f757055b8dc: mov    0x8(%rax),%r13
  0x00007f757055b8e0: mov    %r13,0x28(%rsp)
  0x00007f757055b8e5: mov    %rbx,0x258(%r15)
  0x00007f757055b8ec: mov    %rbx,%rax
  0x00007f757055b8ef: jmpq   *%r11
  0x00007f757055b8f2: mov    0x8(%rsi),%ebx
  0x00007f757055b8f5: shl    $0x3,%rbx
  0x00007f757055b8f9: cmp    0x10(%rax),%rbx
  0x00007f757055b8fd: mov    0x8(%rax),%rbx
  0x00007f757055b901: je     0x00007f757055b90c
  0x00007f757055b907: jmpq   0x00007f757046ec40
  0x00007f757055b90c: cmpq   $0x0,0x58(%rbx)
  0x00007f757055b914: je     0x00007f757055ba0f
  0x00007f757055b91a: jmpq   0x00007f757046ec40
  0x00007f757055b91f: cmpq   $0x0,0x58(%rbx)
  0x00007f757055b927: je     0x00007f757055ba0f
  0x00007f757055b92d: mov    %rsp,%r13
  0x00007f757055b930: mov    (%rsp),%rax
  0x00007f757055b934: and    $0xfffffffffffffff0,%rsp
  0x00007f757055b938: pushfq 
  0x00007f757055b939: sub    $0x8,%rsp
  0x00007f757055b93d: mov    %rsp,-0x28(%rsp)
  0x00007f757055b942: sub    $0x80,%rsp
  0x00007f757055b949: mov    %rax,0x78(%rsp)
  0x00007f757055b94e: mov    %rcx,0x70(%rsp)
  0x00007f757055b953: mov    %rdx,0x68(%rsp)
  0x00007f757055b958: mov    %rbx,0x60(%rsp)
  0x00007f757055b95d: mov    %rbp,0x50(%rsp)
  0x00007f757055b962: mov    %rsi,0x48(%rsp)
  0x00007f757055b967: mov    %rdi,0x40(%rsp)
  0x00007f757055b96c: mov    %r8,0x38(%rsp)
  0x00007f757055b971: mov    %r9,0x30(%rsp)
  0x00007f757055b976: mov    %r10,0x28(%rsp)
  0x00007f757055b97b: mov    %r11,0x20(%rsp)
  0x00007f757055b980: mov    %r12,0x18(%rsp)
  0x00007f757055b985: mov    %r13,0x10(%rsp)
  0x00007f757055b98a: mov    %r14,0x8(%rsp)
  0x00007f757055b98f: mov    %r15,(%rsp)
  0x00007f757055b993: sub    $0x200,%rsp
  0x00007f757055b99a: fxsave64 (%rsp)
  0x00007f757055b99f: mov    %rbx,%rdi
  0x00007f757055b9a2: mov    %rax,%rsi
  0x00007f757055b9a5: callq  0x00007f7585522bca
  0x00007f757055b9aa: fxrstor64 (%rsp)
  0x00007f757055b9af: add    $0x200,%rsp
  0x00007f757055b9b6: mov    (%rsp),%r15
  0x00007f757055b9ba: mov    0x8(%rsp),%r14
  0x00007f757055b9bf: mov    0x10(%rsp),%r13
  0x00007f757055b9c4: mov    0x18(%rsp),%r12
  0x00007f757055b9c9: mov    0x20(%rsp),%r11
  0x00007f757055b9ce: mov    0x28(%rsp),%r10
  0x00007f757055b9d3: mov    0x30(%rsp),%r9
  0x00007f757055b9d8: mov    0x38(%rsp),%r8
  0x00007f757055b9dd: mov    0x40(%rsp),%rdi
  0x00007f757055b9e2: mov    0x48(%rsp),%rsi
  0x00007f757055b9e7: mov    0x50(%rsp),%rbp
  0x00007f757055b9ec: mov    0x60(%rsp),%rbx
  0x00007f757055b9f1: mov    0x68(%rsp),%rdx
  0x00007f757055b9f6: mov    0x70(%rsp),%rcx
  0x00007f757055b9fb: mov    0x78(%rsp),%rax
  0x00007f757055ba00: add    $0x80,%rsp
  0x00007f757055ba07: add    $0x8,%rsp
  0x00007f757055ba0b: popfq  
  0x00007f757055ba0c: mov    %r13,%rsp
  0x00007f757055ba0f: pop    %rax
  0x00007f757055ba10: mov    %rsp,%r13
  0x00007f757055ba13: sub    $0x60,%rsp
  0x00007f757055ba17: mov    %rax,(%rsp)
  0x00007f757055ba1b: mov    %rsi,0x58(%rsp)
  0x00007f757055ba20: mov    %rdx,0x50(%rsp)
  0x00007f757055ba25: mov    %rcx,0x48(%rsp)
  0x00007f757055ba2a: mov    %r8,0x40(%rsp)
  0x00007f757055ba2f: mov    %r9,0x38(%rsp)
  0x00007f757055ba34: mov    %rdi,0x30(%rsp)
  0x00007f757055ba39: mov    0x60(%rsp),%rax
  0x00007f757055ba3e: mov    %rax,0x28(%rsp)
  0x00007f757055ba43: mov    0x68(%rsp),%rax
  0x00007f757055ba48: mov    %rax,0x20(%rsp)
  0x00007f757055ba4d: mov    0x70(%rsp),%rax
  0x00007f757055ba52: mov    %rax,0x18(%rsp)
  0x00007f757055ba57: mov    0x78(%rsp),%rax
  0x00007f757055ba5c: mov    %rax,0x10(%rsp)
  0x00007f757055ba61: mov    0x80(%rsp),%rax
  0x00007f757055ba69: mov    %rax,0x8(%rsp)
  0x00007f757055ba6e: mov    0x40(%rbx),%rcx
  0x00007f757055ba72: jmpq   *%rcx

Decoding RuntimeStub - throw_index_exception Runtime1 stub 0x00007f757055e710
  0x00007f757055e7a0: push   %rbp
  0x00007f757055e7a1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055e7a4: mov    %rsp,-0x28(%rsp)
  0x00007f757055e7a9: sub    $0x80,%rsp
  0x00007f757055e7b0: mov    %rax,0x78(%rsp)
  0x00007f757055e7b5: mov    %rcx,0x70(%rsp)
  0x00007f757055e7ba: mov    %rdx,0x68(%rsp)
  0x00007f757055e7bf: mov    %rbx,0x60(%rsp)
  0x00007f757055e7c4: mov    %rbp,0x50(%rsp)
  0x00007f757055e7c9: mov    %rsi,0x48(%rsp)
  0x00007f757055e7ce: mov    %rdi,0x40(%rsp)
  0x00007f757055e7d3: mov    %r8,0x38(%rsp)
  0x00007f757055e7d8: mov    %r9,0x30(%rsp)
  0x00007f757055e7dd: mov    %r10,0x28(%rsp)
  0x00007f757055e7e2: mov    %r11,0x20(%rsp)
  0x00007f757055e7e7: mov    %r12,0x18(%rsp)
  0x00007f757055e7ec: mov    %r13,0x10(%rsp)
  0x00007f757055e7f1: mov    %r14,0x8(%rsp)
  0x00007f757055e7f6: mov    %r15,(%rsp)
  0x00007f757055e7fa: sub    $0x150,%rsp
  0x00007f757055e801: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055e80d: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055e813: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055e819: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055e81f: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055e825: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055e82b: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055e831: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055e837: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055e83d: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055e843: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055e849: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055e84f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055e855: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055e85b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055e861: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055e867: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055e870: movabs $0xdead,%rax
  0x00007f757055e87a: movabs $0xdead,%rbx
  0x00007f757055e884: movabs $0xdead,%rcx
  0x00007f757055e88e: movabs $0xdead,%rdx
  0x00007f757055e898: movabs $0xdead,%rsi
  0x00007f757055e8a2: movabs $0xdead,%rdi
  0x00007f757055e8ac: mov    0x10(%rbp),%rsi
  0x00007f757055e8b0: mov    %r15,%rdi
  0x00007f757055e8b3: mov    %rbp,0x210(%r15)
  0x00007f757055e8ba: mov    %rsp,0x200(%r15)
  0x00007f757055e8c1: callq  0x00007f7584e52e38
  0x00007f757055e8c6: push   %rax
  0x00007f757055e8c7: push   %rdi
  0x00007f757055e8c8: push   %rsi
  0x00007f757055e8c9: push   %rdx
  0x00007f757055e8ca: push   %rcx
  0x00007f757055e8cb: push   %r8
  0x00007f757055e8cd: push   %r9
  0x00007f757055e8cf: push   %r10
  0x00007f757055e8d1: mov    %rsp,%r10
  0x00007f757055e8d4: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e8d8: push   %r10
  0x00007f757055e8da: push   %r11
  0x00007f757055e8dc: mov    $0x1,%edi
  0x00007f757055e8e1: callq  0x00007f7585f5a2d0
  0x00007f757055e8e6: pop    %r11
  0x00007f757055e8e8: pop    %rsp
  0x00007f757055e8e9: pop    %r10
  0x00007f757055e8eb: pop    %r9
  0x00007f757055e8ed: pop    %r8
  0x00007f757055e8ef: pop    %rcx
  0x00007f757055e8f0: pop    %rdx
  0x00007f757055e8f1: pop    %rsi
  0x00007f757055e8f2: pop    %rdi
  0x00007f757055e8f3: cmp    %rax,%r15
  0x00007f757055e8f6: je     0x00007f757055e978
  0x00007f757055e8fc: callq  0x00007f7585459a22
  0x00007f757055e901: mov    %rsp,-0x28(%rsp)
  0x00007f757055e906: sub    $0x80,%rsp
  0x00007f757055e90d: mov    %rax,0x78(%rsp)
  0x00007f757055e912: mov    %rcx,0x70(%rsp)
  0x00007f757055e917: mov    %rdx,0x68(%rsp)
  0x00007f757055e91c: mov    %rbx,0x60(%rsp)
  0x00007f757055e921: mov    %rbp,0x50(%rsp)
  0x00007f757055e926: mov    %rsi,0x48(%rsp)
  0x00007f757055e92b: mov    %rdi,0x40(%rsp)
  0x00007f757055e930: mov    %r8,0x38(%rsp)
  0x00007f757055e935: mov    %r9,0x30(%rsp)
  0x00007f757055e93a: mov    %r10,0x28(%rsp)
  0x00007f757055e93f: mov    %r11,0x20(%rsp)
  0x00007f757055e944: mov    %r12,0x18(%rsp)
  0x00007f757055e949: mov    %r13,0x10(%rsp)
  0x00007f757055e94e: mov    %r14,0x8(%rsp)
  0x00007f757055e953: mov    %r15,(%rsp)
  0x00007f757055e957: movabs $0x7f75856f3278,%rdi
  0x00007f757055e961: movabs $0x7f757055e901,%rsi
  0x00007f757055e96b: mov    %rsp,%rdx
  0x00007f757055e96e: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e972: callq  0x00007f75853729fa
  0x00007f757055e977: hlt    
  0x00007f757055e978: pop    %rax
  0x00007f757055e979: movabs $0x0,%r10
  0x00007f757055e983: mov    %r10,0x200(%r15)
  0x00007f757055e98a: movabs $0x0,%r10
  0x00007f757055e994: mov    %r10,0x210(%r15)
  0x00007f757055e99b: movabs $0x0,%r10
  0x00007f757055e9a5: mov    %r10,0x208(%r15)
  0x00007f757055e9ac: cmpq   $0x0,0x8(%r15)
  0x00007f757055e9b4: je     0x00007f757055e9c3
  0x00007f757055e9ba: mov    0x8(%r15),%rax
  0x00007f757055e9be: jmpq   0x00007f757055b240
  0x00007f757055e9c3: mov    %rsp,-0x28(%rsp)
  0x00007f757055e9c8: sub    $0x80,%rsp
  0x00007f757055e9cf: mov    %rax,0x78(%rsp)
  0x00007f757055e9d4: mov    %rcx,0x70(%rsp)
  0x00007f757055e9d9: mov    %rdx,0x68(%rsp)
  0x00007f757055e9de: mov    %rbx,0x60(%rsp)
  0x00007f757055e9e3: mov    %rbp,0x50(%rsp)
  0x00007f757055e9e8: mov    %rsi,0x48(%rsp)
  0x00007f757055e9ed: mov    %rdi,0x40(%rsp)
  0x00007f757055e9f2: mov    %r8,0x38(%rsp)
  0x00007f757055e9f7: mov    %r9,0x30(%rsp)
  0x00007f757055e9fc: mov    %r10,0x28(%rsp)
  0x00007f757055ea01: mov    %r11,0x20(%rsp)
  0x00007f757055ea06: mov    %r12,0x18(%rsp)
  0x00007f757055ea0b: mov    %r13,0x10(%rsp)
  0x00007f757055ea10: mov    %r14,0x8(%rsp)
  0x00007f757055ea15: mov    %r15,(%rsp)
  0x00007f757055ea19: movabs $0x7f75856f30d8,%rdi
  0x00007f757055ea23: movabs $0x7f757055e9c3,%rsi
  0x00007f757055ea2d: mov    %rsp,%rdx
  0x00007f757055ea30: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ea34: callq  0x00007f75853729fa
  0x00007f757055ea39: hlt    
  0x00007f757055ea3a: leaveq 
  0x00007f757055ea3b: retq   
  0x00007f757055ea3c: nop
  0x00007f757055ea3d: nop
  0x00007f757055ea3e: nop
  0x00007f757055ea3f: nop

AHE@0x00007f758012cf18: 0xbbbbbbbbb0000000 i2c: 0x00007f757055eae0 c2i: 0x00007f757055ec4d c2iUV: 0x00007f757055ec20
i2c argument handler #111 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (683 bytes generated)
c2i argument handler starts at 0x7f757055ec4d
  0x00007f757055eae0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757055eae4: movabs $0x7f757036e3e0,%r11
  0x00007f757055eaee: cmp    %r11,%rax
  0x00007f757055eaf1: jbe    0x00007f757055eb0a
  0x00007f757055eaf7: movabs $0x7f757046e3e0,%r11
  0x00007f757055eb01: cmp    %r11,%rax
  0x00007f757055eb04: jb     0x00007f757055ebcd
  0x00007f757055eb0a: movabs $0x7f7570369420,%r11
  0x00007f757055eb14: cmp    %r11,%rax
  0x00007f757055eb17: jbe    0x00007f757055eb30
  0x00007f757055eb1d: movabs $0x7f757036de58,%r11
  0x00007f757055eb27: cmp    %r11,%rax
  0x00007f757055eb2a: jb     0x00007f757055ebcd
  0x00007f757055eb30: movabs $0x7f75704a9820,%r11
  0x00007f757055eb3a: cmp    %r11,%rax
  0x00007f757055eb3d: jbe    0x00007f757055eb56
  0x00007f757055eb43: movabs $0x7f75704af5e0,%r11
  0x00007f757055eb4d: cmp    %r11,%rax
  0x00007f757055eb50: jb     0x00007f757055ebcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f757055eb56: mov    %rsp,-0x28(%rsp)
  0x00007f757055eb5b: sub    $0x80,%rsp
  0x00007f757055eb62: mov    %rax,0x78(%rsp)
  0x00007f757055eb67: mov    %rcx,0x70(%rsp)
  0x00007f757055eb6c: mov    %rdx,0x68(%rsp)
  0x00007f757055eb71: mov    %rbx,0x60(%rsp)
  0x00007f757055eb76: mov    %rbp,0x50(%rsp)
  0x00007f757055eb7b: mov    %rsi,0x48(%rsp)
  0x00007f757055eb80: mov    %rdi,0x40(%rsp)
  0x00007f757055eb85: mov    %r8,0x38(%rsp)
  0x00007f757055eb8a: mov    %r9,0x30(%rsp)
  0x00007f757055eb8f: mov    %r10,0x28(%rsp)
  0x00007f757055eb94: mov    %r11,0x20(%rsp)
  0x00007f757055eb99: mov    %r12,0x18(%rsp)
  0x00007f757055eb9e: mov    %r13,0x10(%rsp)
  0x00007f757055eba3: mov    %r14,0x8(%rsp)
  0x00007f757055eba8: mov    %r15,(%rsp)
  0x00007f757055ebac: movabs $0x7f758592f470,%rdi
  0x00007f757055ebb6: movabs $0x7f757055eb56,%rsi
  0x00007f757055ebc0: mov    %rsp,%rdx
  0x00007f757055ebc3: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ebc7: callq  0x00007f75853729fa
  0x00007f757055ebcc: hlt    
  ;; } verify_i2ce 
  0x00007f757055ebcd: mov    %rsp,%r11
  0x00007f757055ebd0: sub    $0x20,%rsp
  0x00007f757055ebd4: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ebd8: push   %rax
  0x00007f757055ebd9: mov    %r11,%rax
  0x00007f757055ebdc: mov    0x50(%rbx),%r11
  0x00007f757055ebe0: mov    0x48(%rax),%rsi
  0x00007f757055ebe4: mov    0x40(%rax),%rdx
  0x00007f757055ebe8: mov    0x38(%rax),%rcx
  0x00007f757055ebec: mov    0x30(%rax),%r8
  0x00007f757055ebf0: mov    0x28(%rax),%r9
  0x00007f757055ebf4: mov    0x20(%rax),%rdi
  0x00007f757055ebf8: mov    0x18(%rax),%r13
  0x00007f757055ebfc: mov    %r13,0x8(%rsp)
  0x00007f757055ec01: mov    0x10(%rax),%r13
  0x00007f757055ec05: mov    %r13,0x10(%rsp)
  0x00007f757055ec0a: mov    0x8(%rax),%r13
  0x00007f757055ec0e: mov    %r13,0x18(%rsp)
  0x00007f757055ec13: mov    %rbx,0x258(%r15)
  0x00007f757055ec1a: mov    %rbx,%rax
  0x00007f757055ec1d: jmpq   *%r11
  0x00007f757055ec20: mov    0x8(%rsi),%ebx
  0x00007f757055ec23: shl    $0x3,%rbx
  0x00007f757055ec27: cmp    0x10(%rax),%rbx
  0x00007f757055ec2b: mov    0x8(%rax),%rbx
  0x00007f757055ec2f: je     0x00007f757055ec3a
  0x00007f757055ec35: jmpq   0x00007f757046ec40
  0x00007f757055ec3a: cmpq   $0x0,0x58(%rbx)
  0x00007f757055ec42: je     0x00007f757055ed3d
  0x00007f757055ec48: jmpq   0x00007f757046ec40
  0x00007f757055ec4d: cmpq   $0x0,0x58(%rbx)
  0x00007f757055ec55: je     0x00007f757055ed3d
  0x00007f757055ec5b: mov    %rsp,%r13
  0x00007f757055ec5e: mov    (%rsp),%rax
  0x00007f757055ec62: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ec66: pushfq 
  0x00007f757055ec67: sub    $0x8,%rsp
  0x00007f757055ec6b: mov    %rsp,-0x28(%rsp)
  0x00007f757055ec70: sub    $0x80,%rsp
  0x00007f757055ec77: mov    %rax,0x78(%rsp)
  0x00007f757055ec7c: mov    %rcx,0x70(%rsp)
  0x00007f757055ec81: mov    %rdx,0x68(%rsp)
  0x00007f757055ec86: mov    %rbx,0x60(%rsp)
  0x00007f757055ec8b: mov    %rbp,0x50(%rsp)
  0x00007f757055ec90: mov    %rsi,0x48(%rsp)
  0x00007f757055ec95: mov    %rdi,0x40(%rsp)
  0x00007f757055ec9a: mov    %r8,0x38(%rsp)
  0x00007f757055ec9f: mov    %r9,0x30(%rsp)
  0x00007f757055eca4: mov    %r10,0x28(%rsp)
  0x00007f757055eca9: mov    %r11,0x20(%rsp)
  0x00007f757055ecae: mov    %r12,0x18(%rsp)
  0x00007f757055ecb3: mov    %r13,0x10(%rsp)
  0x00007f757055ecb8: mov    %r14,0x8(%rsp)
  0x00007f757055ecbd: mov    %r15,(%rsp)
  0x00007f757055ecc1: sub    $0x200,%rsp
  0x00007f757055ecc8: fxsave64 (%rsp)
  0x00007f757055eccd: mov    %rbx,%rdi
  0x00007f757055ecd0: mov    %rax,%rsi
  0x00007f757055ecd3: callq  0x00007f7585522bca
  0x00007f757055ecd8: fxrstor64 (%rsp)
  0x00007f757055ecdd: add    $0x200,%rsp
  0x00007f757055ece4: mov    (%rsp),%r15
  0x00007f757055ece8: mov    0x8(%rsp),%r14
  0x00007f757055eced: mov    0x10(%rsp),%r13
  0x00007f757055ecf2: mov    0x18(%rsp),%r12
  0x00007f757055ecf7: mov    0x20(%rsp),%r11
  0x00007f757055ecfc: mov    0x28(%rsp),%r10
  0x00007f757055ed01: mov    0x30(%rsp),%r9
  0x00007f757055ed06: mov    0x38(%rsp),%r8
  0x00007f757055ed0b: mov    0x40(%rsp),%rdi
  0x00007f757055ed10: mov    0x48(%rsp),%rsi
  0x00007f757055ed15: mov    0x50(%rsp),%rbp
  0x00007f757055ed1a: mov    0x60(%rsp),%rbx
  0x00007f757055ed1f: mov    0x68(%rsp),%rdx
  0x00007f757055ed24: mov    0x70(%rsp),%rcx
  0x00007f757055ed29: mov    0x78(%rsp),%rax
  0x00007f757055ed2e: add    $0x80,%rsp
  0x00007f757055ed35: add    $0x8,%rsp
  0x00007f757055ed39: popfq  
  0x00007f757055ed3a: mov    %r13,%rsp
  0x00007f757055ed3d: pop    %rax
  0x00007f757055ed3e: mov    %rsp,%r13
  0x00007f757055ed41: sub    $0x50,%rsp
  0x00007f757055ed45: mov    %rax,(%rsp)
  0x00007f757055ed49: mov    %rsi,0x48(%rsp)
  0x00007f757055ed4e: mov    %rdx,0x40(%rsp)
  0x00007f757055ed53: mov    %rcx,0x38(%rsp)
  0x00007f757055ed58: mov    %r8,0x30(%rsp)
  0x00007f757055ed5d: mov    %r9,0x28(%rsp)
  0x00007f757055ed62: mov    %rdi,0x20(%rsp)
  0x00007f757055ed67: mov    0x50(%rsp),%rax
  0x00007f757055ed6c: mov    %rax,0x18(%rsp)
  0x00007f757055ed71: mov    0x58(%rsp),%rax
  0x00007f757055ed76: mov    %rax,0x10(%rsp)
  0x00007f757055ed7b: mov    0x60(%rsp),%rax
  0x00007f757055ed80: mov    %rax,0x8(%rsp)
  0x00007f757055ed85: mov    0x40(%rbx),%rcx
  0x00007f757055ed89: jmpq   *%rcx

Decoding RuntimeStub - throw_div0_exception Runtime1 stub 0x00007f757055e3d0
  0x00007f757055e460: push   %rbp
  0x00007f757055e461: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055e464: mov    %rsp,-0x28(%rsp)
  0x00007f757055e469: sub    $0x80,%rsp
  0x00007f757055e470: mov    %rax,0x78(%rsp)
  0x00007f757055e475: mov    %rcx,0x70(%rsp)
  0x00007f757055e47a: mov    %rdx,0x68(%rsp)
  0x00007f757055e47f: mov    %rbx,0x60(%rsp)
  0x00007f757055e484: mov    %rbp,0x50(%rsp)
  0x00007f757055e489: mov    %rsi,0x48(%rsp)
  0x00007f757055e48e: mov    %rdi,0x40(%rsp)
  0x00007f757055e493: mov    %r8,0x38(%rsp)
  0x00007f757055e498: mov    %r9,0x30(%rsp)
  0x00007f757055e49d: mov    %r10,0x28(%rsp)
  0x00007f757055e4a2: mov    %r11,0x20(%rsp)
  0x00007f757055e4a7: mov    %r12,0x18(%rsp)
  0x00007f757055e4ac: mov    %r13,0x10(%rsp)
  0x00007f757055e4b1: mov    %r14,0x8(%rsp)
  0x00007f757055e4b6: mov    %r15,(%rsp)
  0x00007f757055e4ba: sub    $0x150,%rsp
  0x00007f757055e4c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055e4cd: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055e4d3: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055e4d9: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055e4df: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055e4e5: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055e4eb: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055e4f1: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055e4f7: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055e4fd: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055e503: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055e509: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055e50f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055e515: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055e51b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055e521: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055e527: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055e530: movabs $0xdead,%rax
  0x00007f757055e53a: movabs $0xdead,%rbx
  0x00007f757055e544: movabs $0xdead,%rcx
  0x00007f757055e54e: movabs $0xdead,%rdx
  0x00007f757055e558: movabs $0xdead,%rsi
  0x00007f757055e562: movabs $0xdead,%rdi
  0x00007f757055e56c: mov    %r15,%rdi
  0x00007f757055e56f: mov    %rbp,0x210(%r15)
  0x00007f757055e576: mov    %rsp,0x200(%r15)
  0x00007f757055e57d: callq  0x00007f7584e52fee
  0x00007f757055e582: push   %rax
  0x00007f757055e583: push   %rdi
  0x00007f757055e584: push   %rsi
  0x00007f757055e585: push   %rdx
  0x00007f757055e586: push   %rcx
  0x00007f757055e587: push   %r8
  0x00007f757055e589: push   %r9
  0x00007f757055e58b: push   %r10
  0x00007f757055e58d: mov    %rsp,%r10
  0x00007f757055e590: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e594: push   %r10
  0x00007f757055e596: push   %r11
  0x00007f757055e598: mov    $0x1,%edi
  0x00007f757055e59d: callq  0x00007f7585f5a2d0
  0x00007f757055e5a2: pop    %r11
  0x00007f757055e5a4: pop    %rsp
  0x00007f757055e5a5: pop    %r10
  0x00007f757055e5a7: pop    %r9
  0x00007f757055e5a9: pop    %r8
  0x00007f757055e5ab: pop    %rcx
  0x00007f757055e5ac: pop    %rdx
  0x00007f757055e5ad: pop    %rsi
  0x00007f757055e5ae: pop    %rdi
  0x00007f757055e5af: cmp    %rax,%r15
  0x00007f757055e5b2: je     0x00007f757055e634
  0x00007f757055e5b8: callq  0x00007f7585459a22
  0x00007f757055e5bd: mov    %rsp,-0x28(%rsp)
  0x00007f757055e5c2: sub    $0x80,%rsp
  0x00007f757055e5c9: mov    %rax,0x78(%rsp)
  0x00007f757055e5ce: mov    %rcx,0x70(%rsp)
  0x00007f757055e5d3: mov    %rdx,0x68(%rsp)
  0x00007f757055e5d8: mov    %rbx,0x60(%rsp)
  0x00007f757055e5dd: mov    %rbp,0x50(%rsp)
  0x00007f757055e5e2: mov    %rsi,0x48(%rsp)
  0x00007f757055e5e7: mov    %rdi,0x40(%rsp)
  0x00007f757055e5ec: mov    %r8,0x38(%rsp)
  0x00007f757055e5f1: mov    %r9,0x30(%rsp)
  0x00007f757055e5f6: mov    %r10,0x28(%rsp)
  0x00007f757055e5fb: mov    %r11,0x20(%rsp)
  0x00007f757055e600: mov    %r12,0x18(%rsp)
  0x00007f757055e605: mov    %r13,0x10(%rsp)
  0x00007f757055e60a: mov    %r14,0x8(%rsp)
  0x00007f757055e60f: mov    %r15,(%rsp)
  0x00007f757055e613: movabs $0x7f75856f3278,%rdi
  0x00007f757055e61d: movabs $0x7f757055e5bd,%rsi
  0x00007f757055e627: mov    %rsp,%rdx
  0x00007f757055e62a: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e62e: callq  0x00007f75853729fa
  0x00007f757055e633: hlt    
  0x00007f757055e634: pop    %rax
  0x00007f757055e635: movabs $0x0,%r10
  0x00007f757055e63f: mov    %r10,0x200(%r15)
  0x00007f757055e646: movabs $0x0,%r10
  0x00007f757055e650: mov    %r10,0x210(%r15)
  0x00007f757055e657: movabs $0x0,%r10
  0x00007f757055e661: mov    %r10,0x208(%r15)
  0x00007f757055e668: cmpq   $0x0,0x8(%r15)
  0x00007f757055e670: je     0x00007f757055e67f
  0x00007f757055e676: mov    0x8(%r15),%rax
  0x00007f757055e67a: jmpq   0x00007f757055b240
  0x00007f757055e67f: mov    %rsp,-0x28(%rsp)
  0x00007f757055e684: sub    $0x80,%rsp
  0x00007f757055e68b: mov    %rax,0x78(%rsp)
  0x00007f757055e690: mov    %rcx,0x70(%rsp)
  0x00007f757055e695: mov    %rdx,0x68(%rsp)
  0x00007f757055e69a: mov    %rbx,0x60(%rsp)
  0x00007f757055e69f: mov    %rbp,0x50(%rsp)
  0x00007f757055e6a4: mov    %rsi,0x48(%rsp)
  0x00007f757055e6a9: mov    %rdi,0x40(%rsp)
  0x00007f757055e6ae: mov    %r8,0x38(%rsp)
  0x00007f757055e6b3: mov    %r9,0x30(%rsp)
  0x00007f757055e6b8: mov    %r10,0x28(%rsp)
  0x00007f757055e6bd: mov    %r11,0x20(%rsp)
  0x00007f757055e6c2: mov    %r12,0x18(%rsp)
  0x00007f757055e6c7: mov    %r13,0x10(%rsp)
  0x00007f757055e6cc: mov    %r14,0x8(%rsp)
  0x00007f757055e6d1: mov    %r15,(%rsp)
  0x00007f757055e6d5: movabs $0x7f75856f30d8,%rdi
  0x00007f757055e6df: movabs $0x7f757055e67f,%rsi
  0x00007f757055e6e9: mov    %rsp,%rdx
  0x00007f757055e6ec: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e6f0: callq  0x00007f75853729fa
  0x00007f757055e6f5: hlt    
  0x00007f757055e6f6: leaveq 
  0x00007f757055e6f7: retq   

Decoding RuntimeStub - throw_null_pointer_exception Runtime1 stub 0x00007f757055c850
  0x00007f757055c8e0: push   %rbp
  0x00007f757055c8e1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055c8e4: mov    %rsp,-0x28(%rsp)
  0x00007f757055c8e9: sub    $0x80,%rsp
  0x00007f757055c8f0: mov    %rax,0x78(%rsp)
  0x00007f757055c8f5: mov    %rcx,0x70(%rsp)
  0x00007f757055c8fa: mov    %rdx,0x68(%rsp)
  0x00007f757055c8ff: mov    %rbx,0x60(%rsp)
  0x00007f757055c904: mov    %rbp,0x50(%rsp)
  0x00007f757055c909: mov    %rsi,0x48(%rsp)
  0x00007f757055c90e: mov    %rdi,0x40(%rsp)
  0x00007f757055c913: mov    %r8,0x38(%rsp)
  0x00007f757055c918: mov    %r9,0x30(%rsp)
  0x00007f757055c91d: mov    %r10,0x28(%rsp)
  0x00007f757055c922: mov    %r11,0x20(%rsp)
  0x00007f757055c927: mov    %r12,0x18(%rsp)
  0x00007f757055c92c: mov    %r13,0x10(%rsp)
  0x00007f757055c931: mov    %r14,0x8(%rsp)
  0x00007f757055c936: mov    %r15,(%rsp)
  0x00007f757055c93a: sub    $0x150,%rsp
  0x00007f757055c941: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055c94d: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055c953: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055c959: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055c95f: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055c965: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055c96b: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055c971: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055c977: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055c97d: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055c983: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055c989: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055c98f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055c995: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055c99b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055c9a1: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055c9a7: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055c9b0: movabs $0xdead,%rax
  0x00007f757055c9ba: movabs $0xdead,%rbx
  0x00007f757055c9c4: movabs $0xdead,%rcx
  0x00007f757055c9ce: movabs $0xdead,%rdx
  0x00007f757055c9d8: movabs $0xdead,%rsi
  0x00007f757055c9e2: movabs $0xdead,%rdi
  0x00007f757055c9ec: mov    %r15,%rdi
  0x00007f757055c9ef: mov    %rbp,0x210(%r15)
  0x00007f757055c9f6: mov    %rsp,0x200(%r15)
  0x00007f757055c9fd: callq  0x00007f7584e53166
  0x00007f757055ca02: push   %rax
  0x00007f757055ca03: push   %rdi
  0x00007f757055ca04: push   %rsi
  0x00007f757055ca05: push   %rdx
  0x00007f757055ca06: push   %rcx
  0x00007f757055ca07: push   %r8
  0x00007f757055ca09: push   %r9
  0x00007f757055ca0b: push   %r10
  0x00007f757055ca0d: mov    %rsp,%r10
  0x00007f757055ca10: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ca14: push   %r10
  0x00007f757055ca16: push   %r11
  0x00007f757055ca18: mov    $0x1,%edi
  0x00007f757055ca1d: callq  0x00007f7585f5a2d0
  0x00007f757055ca22: pop    %r11
  0x00007f757055ca24: pop    %rsp
  0x00007f757055ca25: pop    %r10
  0x00007f757055ca27: pop    %r9
  0x00007f757055ca29: pop    %r8
  0x00007f757055ca2b: pop    %rcx
  0x00007f757055ca2c: pop    %rdx
  0x00007f757055ca2d: pop    %rsi
  0x00007f757055ca2e: pop    %rdi
  0x00007f757055ca2f: cmp    %rax,%r15
  0x00007f757055ca32: je     0x00007f757055cab4
  0x00007f757055ca38: callq  0x00007f7585459a22
  0x00007f757055ca3d: mov    %rsp,-0x28(%rsp)
  0x00007f757055ca42: sub    $0x80,%rsp
  0x00007f757055ca49: mov    %rax,0x78(%rsp)
  0x00007f757055ca4e: mov    %rcx,0x70(%rsp)
  0x00007f757055ca53: mov    %rdx,0x68(%rsp)
  0x00007f757055ca58: mov    %rbx,0x60(%rsp)
  0x00007f757055ca5d: mov    %rbp,0x50(%rsp)
  0x00007f757055ca62: mov    %rsi,0x48(%rsp)
  0x00007f757055ca67: mov    %rdi,0x40(%rsp)
  0x00007f757055ca6c: mov    %r8,0x38(%rsp)
  0x00007f757055ca71: mov    %r9,0x30(%rsp)
  0x00007f757055ca76: mov    %r10,0x28(%rsp)
  0x00007f757055ca7b: mov    %r11,0x20(%rsp)
  0x00007f757055ca80: mov    %r12,0x18(%rsp)
  0x00007f757055ca85: mov    %r13,0x10(%rsp)
  0x00007f757055ca8a: mov    %r14,0x8(%rsp)
  0x00007f757055ca8f: mov    %r15,(%rsp)
  0x00007f757055ca93: movabs $0x7f75856f3278,%rdi
  0x00007f757055ca9d: movabs $0x7f757055ca3d,%rsi
  0x00007f757055caa7: mov    %rsp,%rdx
  0x00007f757055caaa: and    $0xfffffffffffffff0,%rsp
  0x00007f757055caae: callq  0x00007f75853729fa
  0x00007f757055cab3: hlt    
  0x00007f757055cab4: pop    %rax
  0x00007f757055cab5: movabs $0x0,%r10
  0x00007f757055cabf: mov    %r10,0x200(%r15)
  0x00007f757055cac6: movabs $0x0,%r10
  0x00007f757055cad0: mov    %r10,0x210(%r15)
  0x00007f757055cad7: movabs $0x0,%r10
  0x00007f757055cae1: mov    %r10,0x208(%r15)
  0x00007f757055cae8: cmpq   $0x0,0x8(%r15)
  0x00007f757055caf0: je     0x00007f757055caff
  0x00007f757055caf6: mov    0x8(%r15),%rax
  0x00007f757055cafa: jmpq   0x00007f757055b240
  0x00007f757055caff: mov    %rsp,-0x28(%rsp)
  0x00007f757055cb04: sub    $0x80,%rsp
  0x00007f757055cb0b: mov    %rax,0x78(%rsp)
  0x00007f757055cb10: mov    %rcx,0x70(%rsp)
  0x00007f757055cb15: mov    %rdx,0x68(%rsp)
  0x00007f757055cb1a: mov    %rbx,0x60(%rsp)
  0x00007f757055cb1f: mov    %rbp,0x50(%rsp)
  0x00007f757055cb24: mov    %rsi,0x48(%rsp)
  0x00007f757055cb29: mov    %rdi,0x40(%rsp)
  0x00007f757055cb2e: mov    %r8,0x38(%rsp)
  0x00007f757055cb33: mov    %r9,0x30(%rsp)
  0x00007f757055cb38: mov    %r10,0x28(%rsp)
  0x00007f757055cb3d: mov    %r11,0x20(%rsp)
  0x00007f757055cb42: mov    %r12,0x18(%rsp)
  0x00007f757055cb47: mov    %r13,0x10(%rsp)
  0x00007f757055cb4c: mov    %r14,0x8(%rsp)
  0x00007f757055cb51: mov    %r15,(%rsp)
  0x00007f757055cb55: movabs $0x7f75856f30d8,%rdi
  0x00007f757055cb5f: movabs $0x7f757055caff,%rsi
  0x00007f757055cb69: mov    %rsp,%rdx
  0x00007f757055cb6c: and    $0xfffffffffffffff0,%rsp
  0x00007f757055cb70: callq  0x00007f75853729fa
  0x00007f757055cb75: hlt    
  0x00007f757055cb76: leaveq 
  0x00007f757055cb77: retq   

Decoding RuntimeStub - register_finalizer Runtime1 stub 0x00007f757055c450
  0x00007f757055c4e0: mov    %rdi,%rax
  0x00007f757055c4e3: mov    0x8(%rax),%esi
  0x00007f757055c4e6: shl    $0x3,%rsi
  0x00007f757055c4ea: mov    0xa4(%rsi),%esi
  0x00007f757055c4f0: test   $0x40000000,%esi
  0x00007f757055c4f6: jne    0x00007f757055c4fd
  0x00007f757055c4fc: retq   
  0x00007f757055c4fd: push   %rbp
  0x00007f757055c4fe: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055c501: mov    %rsp,-0x28(%rsp)
  0x00007f757055c506: sub    $0x80,%rsp
  0x00007f757055c50d: mov    %rax,0x78(%rsp)
  0x00007f757055c512: mov    %rcx,0x70(%rsp)
  0x00007f757055c517: mov    %rdx,0x68(%rsp)
  0x00007f757055c51c: mov    %rbx,0x60(%rsp)
  0x00007f757055c521: mov    %rbp,0x50(%rsp)
  0x00007f757055c526: mov    %rsi,0x48(%rsp)
  0x00007f757055c52b: mov    %rdi,0x40(%rsp)
  0x00007f757055c530: mov    %r8,0x38(%rsp)
  0x00007f757055c535: mov    %r9,0x30(%rsp)
  0x00007f757055c53a: mov    %r10,0x28(%rsp)
  0x00007f757055c53f: mov    %r11,0x20(%rsp)
  0x00007f757055c544: mov    %r12,0x18(%rsp)
  0x00007f757055c549: mov    %r13,0x10(%rsp)
  0x00007f757055c54e: mov    %r14,0x8(%rsp)
  0x00007f757055c553: mov    %r15,(%rsp)
  0x00007f757055c557: sub    $0x150,%rsp
  0x00007f757055c55e: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055c56a: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055c570: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055c576: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055c57c: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055c582: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055c588: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055c58e: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055c594: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055c59a: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055c5a0: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055c5a6: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055c5ac: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055c5b2: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055c5b8: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055c5be: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055c5c4: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055c5cd: mov    %rax,%rsi
  0x00007f757055c5d0: mov    %r15,%rdi
  0x00007f757055c5d3: mov    %rbp,0x210(%r15)
  0x00007f757055c5da: mov    %rsp,0x200(%r15)
  0x00007f757055c5e1: callq  0x00007f758551ed74
  0x00007f757055c5e6: push   %rax
  0x00007f757055c5e7: push   %rdi
  0x00007f757055c5e8: push   %rsi
  0x00007f757055c5e9: push   %rdx
  0x00007f757055c5ea: push   %rcx
  0x00007f757055c5eb: push   %r8
  0x00007f757055c5ed: push   %r9
  0x00007f757055c5ef: push   %r10
  0x00007f757055c5f1: mov    %rsp,%r10
  0x00007f757055c5f4: and    $0xfffffffffffffff0,%rsp
  0x00007f757055c5f8: push   %r10
  0x00007f757055c5fa: push   %r11
  0x00007f757055c5fc: mov    $0x1,%edi
  0x00007f757055c601: callq  0x00007f7585f5a2d0
  0x00007f757055c606: pop    %r11
  0x00007f757055c608: pop    %rsp
  0x00007f757055c609: pop    %r10
  0x00007f757055c60b: pop    %r9
  0x00007f757055c60d: pop    %r8
  0x00007f757055c60f: pop    %rcx
  0x00007f757055c610: pop    %rdx
  0x00007f757055c611: pop    %rsi
  0x00007f757055c612: pop    %rdi
  0x00007f757055c613: cmp    %rax,%r15
  0x00007f757055c616: je     0x00007f757055c698
  0x00007f757055c61c: callq  0x00007f7585459a22
  0x00007f757055c621: mov    %rsp,-0x28(%rsp)
  0x00007f757055c626: sub    $0x80,%rsp
  0x00007f757055c62d: mov    %rax,0x78(%rsp)
  0x00007f757055c632: mov    %rcx,0x70(%rsp)
  0x00007f757055c637: mov    %rdx,0x68(%rsp)
  0x00007f757055c63c: mov    %rbx,0x60(%rsp)
  0x00007f757055c641: mov    %rbp,0x50(%rsp)
  0x00007f757055c646: mov    %rsi,0x48(%rsp)
  0x00007f757055c64b: mov    %rdi,0x40(%rsp)
  0x00007f757055c650: mov    %r8,0x38(%rsp)
  0x00007f757055c655: mov    %r9,0x30(%rsp)
  0x00007f757055c65a: mov    %r10,0x28(%rsp)
  0x00007f757055c65f: mov    %r11,0x20(%rsp)
  0x00007f757055c664: mov    %r12,0x18(%rsp)
  0x00007f757055c669: mov    %r13,0x10(%rsp)
  0x00007f757055c66e: mov    %r14,0x8(%rsp)
  0x00007f757055c673: mov    %r15,(%rsp)
  0x00007f757055c677: movabs $0x7f75856f3278,%rdi
  0x00007f757055c681: movabs $0x7f757055c621,%rsi
  0x00007f757055c68b: mov    %rsp,%rdx
  0x00007f757055c68e: and    $0xfffffffffffffff0,%rsp
  0x00007f757055c692: callq  0x00007f75853729fa
  0x00007f757055c697: hlt    
  0x00007f757055c698: pop    %rax
  0x00007f757055c699: movabs $0x0,%r10
  0x00007f757055c6a3: mov    %r10,0x200(%r15)
  0x00007f757055c6aa: movabs $0x0,%r10
  0x00007f757055c6b4: mov    %r10,0x210(%r15)
  0x00007f757055c6bb: movabs $0x0,%r10
  0x00007f757055c6c5: mov    %r10,0x208(%r15)
  0x00007f757055c6cc: cmpq   $0x0,0x8(%r15)
  0x00007f757055c6d4: je     0x00007f757055c6e3
  0x00007f757055c6da: mov    0x8(%r15),%rax
  0x00007f757055c6de: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f757055c6e3: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055c6e9: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055c6ef: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055c6f5: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055c6fb: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055c701: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055c707: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055c70d: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055c713: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055c719: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055c71f: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055c725: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055c72b: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055c731: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055c737: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055c73d: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055c746: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055c752: je     0x00007f757055c7cf
  0x00007f757055c758: mov    %rsp,-0x28(%rsp)
  0x00007f757055c75d: sub    $0x80,%rsp
  0x00007f757055c764: mov    %rax,0x78(%rsp)
  0x00007f757055c769: mov    %rcx,0x70(%rsp)
  0x00007f757055c76e: mov    %rdx,0x68(%rsp)
  0x00007f757055c773: mov    %rbx,0x60(%rsp)
  0x00007f757055c778: mov    %rbp,0x50(%rsp)
  0x00007f757055c77d: mov    %rsi,0x48(%rsp)
  0x00007f757055c782: mov    %rdi,0x40(%rsp)
  0x00007f757055c787: mov    %r8,0x38(%rsp)
  0x00007f757055c78c: mov    %r9,0x30(%rsp)
  0x00007f757055c791: mov    %r10,0x28(%rsp)
  0x00007f757055c796: mov    %r11,0x20(%rsp)
  0x00007f757055c79b: mov    %r12,0x18(%rsp)
  0x00007f757055c7a0: mov    %r13,0x10(%rsp)
  0x00007f757055c7a5: mov    %r14,0x8(%rsp)
  0x00007f757055c7aa: mov    %r15,(%rsp)
  0x00007f757055c7ae: movabs $0x7f75856f340f,%rdi
  0x00007f757055c7b8: movabs $0x7f757055c758,%rsi
  0x00007f757055c7c2: mov    %rsp,%rdx
  0x00007f757055c7c5: and    $0xfffffffffffffff0,%rsp
  0x00007f757055c7c9: callq  0x00007f75853729fa
  0x00007f757055c7ce: hlt    
  0x00007f757055c7cf: add    $0x150,%rsp
  0x00007f757055c7d6: mov    (%rsp),%r15
  0x00007f757055c7da: mov    0x8(%rsp),%r14
  0x00007f757055c7df: mov    0x10(%rsp),%r13
  0x00007f757055c7e4: mov    0x18(%rsp),%r12
  0x00007f757055c7e9: mov    0x20(%rsp),%r11
  0x00007f757055c7ee: mov    0x28(%rsp),%r10
  0x00007f757055c7f3: mov    0x30(%rsp),%r9
  0x00007f757055c7f8: mov    0x38(%rsp),%r8
  0x00007f757055c7fd: mov    0x40(%rsp),%rdi
  0x00007f757055c802: mov    0x48(%rsp),%rsi
  0x00007f757055c807: mov    0x50(%rsp),%rbp
  0x00007f757055c80c: mov    0x60(%rsp),%rbx
  0x00007f757055c811: mov    0x68(%rsp),%rdx
  0x00007f757055c816: mov    0x70(%rsp),%rcx
  0x00007f757055c81b: mov    0x78(%rsp),%rax
  0x00007f757055c820: add    $0x80,%rsp
  0x00007f757055c827: leaveq 
  0x00007f757055c828: retq   
  0x00007f757055c829: nop
  0x00007f757055c82a: nop
  0x00007f757055c82b: nop
  0x00007f757055c82c: nop
  0x00007f757055c82d: nop
  0x00007f757055c82e: nop
  0x00007f757055c82f: nop

Decoding RuntimeStub - new_instance Runtime1 stub 0x00007f757055c050
  0x00007f757055c0e0: push   %rbp
  0x00007f757055c0e1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055c0e4: mov    %rsp,-0x28(%rsp)
  0x00007f757055c0e9: sub    $0x80,%rsp
  0x00007f757055c0f0: mov    %rax,0x78(%rsp)
  0x00007f757055c0f5: mov    %rcx,0x70(%rsp)
  0x00007f757055c0fa: mov    %rdx,0x68(%rsp)
  0x00007f757055c0ff: mov    %rbx,0x60(%rsp)
  0x00007f757055c104: mov    %rbp,0x50(%rsp)
  0x00007f757055c109: mov    %rsi,0x48(%rsp)
  0x00007f757055c10e: mov    %rdi,0x40(%rsp)
  0x00007f757055c113: mov    %r8,0x38(%rsp)
  0x00007f757055c118: mov    %r9,0x30(%rsp)
  0x00007f757055c11d: mov    %r10,0x28(%rsp)
  0x00007f757055c122: mov    %r11,0x20(%rsp)
  0x00007f757055c127: mov    %r12,0x18(%rsp)
  0x00007f757055c12c: mov    %r13,0x10(%rsp)
  0x00007f757055c131: mov    %r14,0x8(%rsp)
  0x00007f757055c136: mov    %r15,(%rsp)
  0x00007f757055c13a: sub    $0x150,%rsp
  0x00007f757055c141: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055c14d: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055c153: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055c159: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055c15f: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055c165: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055c16b: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055c171: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055c177: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055c17d: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055c183: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055c189: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055c18f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055c195: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055c19b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055c1a1: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055c1a7: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055c1b0: mov    %rdx,%rsi
  0x00007f757055c1b3: mov    %r15,%rdi
  0x00007f757055c1b6: mov    %rbp,0x210(%r15)
  0x00007f757055c1bd: mov    %rsp,0x200(%r15)
  0x00007f757055c1c4: callq  0x00007f7584e5106c
  0x00007f757055c1c9: push   %rax
  0x00007f757055c1ca: push   %rdi
  0x00007f757055c1cb: push   %rsi
  0x00007f757055c1cc: push   %rdx
  0x00007f757055c1cd: push   %rcx
  0x00007f757055c1ce: push   %r8
  0x00007f757055c1d0: push   %r9
  0x00007f757055c1d2: push   %r10
  0x00007f757055c1d4: mov    %rsp,%r10
  0x00007f757055c1d7: and    $0xfffffffffffffff0,%rsp
  0x00007f757055c1db: push   %r10
  0x00007f757055c1dd: push   %r11
  0x00007f757055c1df: mov    $0x1,%edi
  0x00007f757055c1e4: callq  0x00007f7585f5a2d0
  0x00007f757055c1e9: pop    %r11
  0x00007f757055c1eb: pop    %rsp
  0x00007f757055c1ec: pop    %r10
  0x00007f757055c1ee: pop    %r9
  0x00007f757055c1f0: pop    %r8
  0x00007f757055c1f2: pop    %rcx
  0x00007f757055c1f3: pop    %rdx
  0x00007f757055c1f4: pop    %rsi
  0x00007f757055c1f5: pop    %rdi
  0x00007f757055c1f6: cmp    %rax,%r15
  0x00007f757055c1f9: je     0x00007f757055c27b
  0x00007f757055c1ff: callq  0x00007f7585459a22
  0x00007f757055c204: mov    %rsp,-0x28(%rsp)
  0x00007f757055c209: sub    $0x80,%rsp
  0x00007f757055c210: mov    %rax,0x78(%rsp)
  0x00007f757055c215: mov    %rcx,0x70(%rsp)
  0x00007f757055c21a: mov    %rdx,0x68(%rsp)
  0x00007f757055c21f: mov    %rbx,0x60(%rsp)
  0x00007f757055c224: mov    %rbp,0x50(%rsp)
  0x00007f757055c229: mov    %rsi,0x48(%rsp)
  0x00007f757055c22e: mov    %rdi,0x40(%rsp)
  0x00007f757055c233: mov    %r8,0x38(%rsp)
  0x00007f757055c238: mov    %r9,0x30(%rsp)
  0x00007f757055c23d: mov    %r10,0x28(%rsp)
  0x00007f757055c242: mov    %r11,0x20(%rsp)
  0x00007f757055c247: mov    %r12,0x18(%rsp)
  0x00007f757055c24c: mov    %r13,0x10(%rsp)
  0x00007f757055c251: mov    %r14,0x8(%rsp)
  0x00007f757055c256: mov    %r15,(%rsp)
  0x00007f757055c25a: movabs $0x7f75856f3278,%rdi
  0x00007f757055c264: movabs $0x7f757055c204,%rsi
  0x00007f757055c26e: mov    %rsp,%rdx
  0x00007f757055c271: and    $0xfffffffffffffff0,%rsp
  0x00007f757055c275: callq  0x00007f75853729fa
  0x00007f757055c27a: hlt    
  0x00007f757055c27b: pop    %rax
  0x00007f757055c27c: movabs $0x0,%r10
  0x00007f757055c286: mov    %r10,0x200(%r15)
  0x00007f757055c28d: movabs $0x0,%r10
  0x00007f757055c297: mov    %r10,0x210(%r15)
  0x00007f757055c29e: movabs $0x0,%r10
  0x00007f757055c2a8: mov    %r10,0x208(%r15)
  0x00007f757055c2af: cmpq   $0x0,0x8(%r15)
  0x00007f757055c2b7: je     0x00007f757055c2d7
  0x00007f757055c2bd: mov    0x8(%r15),%rax
  0x00007f757055c2c1: movabs $0x0,%r10
  0x00007f757055c2cb: mov    %r10,0x260(%r15)
  0x00007f757055c2d2: jmpq   0x00007f757055b240
  0x00007f757055c2d7: mov    0x260(%r15),%rax
  0x00007f757055c2de: movabs $0x0,%r10
  0x00007f757055c2e8: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f757055c2ef: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055c2f5: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055c2fb: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055c301: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055c307: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055c30d: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055c313: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055c319: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055c31f: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055c325: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055c32b: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055c331: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055c337: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055c33d: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055c343: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055c349: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055c352: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055c35e: je     0x00007f757055c3db
  0x00007f757055c364: mov    %rsp,-0x28(%rsp)
  0x00007f757055c369: sub    $0x80,%rsp
  0x00007f757055c370: mov    %rax,0x78(%rsp)
  0x00007f757055c375: mov    %rcx,0x70(%rsp)
  0x00007f757055c37a: mov    %rdx,0x68(%rsp)
  0x00007f757055c37f: mov    %rbx,0x60(%rsp)
  0x00007f757055c384: mov    %rbp,0x50(%rsp)
  0x00007f757055c389: mov    %rsi,0x48(%rsp)
  0x00007f757055c38e: mov    %rdi,0x40(%rsp)
  0x00007f757055c393: mov    %r8,0x38(%rsp)
  0x00007f757055c398: mov    %r9,0x30(%rsp)
  0x00007f757055c39d: mov    %r10,0x28(%rsp)
  0x00007f757055c3a2: mov    %r11,0x20(%rsp)
  0x00007f757055c3a7: mov    %r12,0x18(%rsp)
  0x00007f757055c3ac: mov    %r13,0x10(%rsp)
  0x00007f757055c3b1: mov    %r14,0x8(%rsp)
  0x00007f757055c3b6: mov    %r15,(%rsp)
  0x00007f757055c3ba: movabs $0x7f75856f340f,%rdi
  0x00007f757055c3c4: movabs $0x7f757055c364,%rsi
  0x00007f757055c3ce: mov    %rsp,%rdx
  0x00007f757055c3d1: and    $0xfffffffffffffff0,%rsp
  0x00007f757055c3d5: callq  0x00007f75853729fa
  0x00007f757055c3da: hlt    
  0x00007f757055c3db: add    $0x150,%rsp
  0x00007f757055c3e2: mov    (%rsp),%r15
  0x00007f757055c3e6: mov    0x8(%rsp),%r14
  0x00007f757055c3eb: mov    0x10(%rsp),%r13
  0x00007f757055c3f0: mov    0x18(%rsp),%r12
  0x00007f757055c3f5: mov    0x20(%rsp),%r11
  0x00007f757055c3fa: mov    0x28(%rsp),%r10
  0x00007f757055c3ff: mov    0x30(%rsp),%r9
  0x00007f757055c404: mov    0x38(%rsp),%r8
  0x00007f757055c409: mov    0x40(%rsp),%rdi
  0x00007f757055c40e: mov    0x48(%rsp),%rsi
  0x00007f757055c413: mov    0x50(%rsp),%rbp
  0x00007f757055c418: mov    0x60(%rsp),%rbx
  0x00007f757055c41d: mov    0x68(%rsp),%rdx
  0x00007f757055c422: mov    0x70(%rsp),%rcx
  0x00007f757055c427: add    $0x80,%rsp
  0x00007f757055c42e: leaveq 
  0x00007f757055c42f: retq   

Decoding RuntimeStub - fast_new_instance Runtime1 stub 0x00007f7570560550
  0x00007f7570560680: push   %rdi
  0x00007f7570560681: push   %rbx
  0x00007f7570560682: mov    0xc(%rdx),%ecx
  0x00007f7570560685: cmp    $0x0,%ecx
  0x00007f7570560688: jle    0x00007f757056069a
  0x00007f757056068e: test   $0x1,%ecx
  0x00007f7570560694: je     0x00007f7570560788
  0x00007f757056069a: mov    %rsp,-0x28(%rsp)
  0x00007f757056069f: sub    $0x80,%rsp
  0x00007f75705606a6: mov    %rax,0x78(%rsp)
  0x00007f75705606ab: mov    %rcx,0x70(%rsp)
  0x00007f75705606b0: mov    %rdx,0x68(%rsp)
  0x00007f75705606b5: mov    %rbx,0x60(%rsp)
  0x00007f75705606ba: mov    %rbp,0x50(%rsp)
  0x00007f75705606bf: mov    %rsi,0x48(%rsp)
  0x00007f75705606c4: mov    %rdi,0x40(%rsp)
  0x00007f75705606c9: mov    %r8,0x38(%rsp)
  0x00007f75705606ce: mov    %r9,0x30(%rsp)
  0x00007f75705606d3: mov    %r10,0x28(%rsp)
  0x00007f75705606d8: mov    %r11,0x20(%rsp)
  0x00007f75705606dd: mov    %r12,0x18(%rsp)
  0x00007f75705606e2: mov    %r13,0x10(%rsp)
  0x00007f75705606e7: mov    %r14,0x8(%rsp)
  0x00007f75705606ec: mov    %r15,(%rsp)
  0x00007f75705606f0: movabs $0x7f75856f35e0,%rdi
  0x00007f75705606fa: movabs $0x7f757056069a,%rsi
  0x00007f7570560704: mov    %rsp,%rdx
  0x00007f7570560707: and    $0xfffffffffffffff0,%rsp
  0x00007f757056070b: callq  0x00007f75853729fa
  0x00007f7570560710: hlt    
  0x00007f7570560711: mov    %rsp,-0x28(%rsp)
  0x00007f7570560716: sub    $0x80,%rsp
  0x00007f757056071d: mov    %rax,0x78(%rsp)
  0x00007f7570560722: mov    %rcx,0x70(%rsp)
  0x00007f7570560727: mov    %rdx,0x68(%rsp)
  0x00007f757056072c: mov    %rbx,0x60(%rsp)
  0x00007f7570560731: mov    %rbp,0x50(%rsp)
  0x00007f7570560736: mov    %rsi,0x48(%rsp)
  0x00007f757056073b: mov    %rdi,0x40(%rsp)
  0x00007f7570560740: mov    %r8,0x38(%rsp)
  0x00007f7570560745: mov    %r9,0x30(%rsp)
  0x00007f757056074a: mov    %r10,0x28(%rsp)
  0x00007f757056074f: mov    %r11,0x20(%rsp)
  0x00007f7570560754: mov    %r12,0x18(%rsp)
  0x00007f7570560759: mov    %r13,0x10(%rsp)
  0x00007f757056075e: mov    %r14,0x8(%rsp)
  0x00007f7570560763: mov    %r15,(%rsp)
  0x00007f7570560767: movabs $0x7f75856bea2b,%rdi
  0x00007f7570560771: movabs $0x7f7570560711,%rsi
  0x00007f757056077b: mov    %rsp,%rdx
  0x00007f757056077e: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560782: callq  0x00007f75853729fa
  0x00007f7570560787: hlt    
  0x00007f7570560788: mov    0x70(%r15),%rax
  0x00007f757056078c: mov    0x80(%r15),%rcx
  0x00007f7570560793: sub    %rax,%rcx
  0x00007f7570560796: shr    $0x3,%rcx
  0x00007f757056079a: cmp    0x90(%r15),%rcx
  0x00007f75705607a1: jle    0x00007f75705607c5
  0x00007f75705607a7: movabs $0x4,%rsi
  0x00007f75705607b1: add    %rsi,0x90(%r15)
  0x00007f75705607b8: addl   $0x1,0xb0(%r15)
  0x00007f75705607c0: jmpq   0x00007f7570560a45
  0x00007f75705607c5: addl   $0x1,0xa0(%r15)
  0x00007f75705607cd: add    %ecx,0xa4(%r15)
  0x00007f75705607d4: test   %rax,%rax
  0x00007f75705607d7: je     0x00007f7570560814
  0x00007f75705607dd: movabs $0x201,%r10
  0x00007f75705607e7: mov    %r10,(%rax)
  0x00007f75705607ea: sub    $0x2,%rcx
  0x00007f75705607ee: add    $0x2,%rcx
  0x00007f75705607f2: shl    %rcx
  0x00007f75705607f5: mov    %ecx,0xc(%rax)
  0x00007f75705607f8: mov    0x159e4759(%rip),%rcx        # 0x00007f7585f44f58
  0x00007f75705607ff: shr    $0x3,%rcx
  0x00007f7570560803: mov    %ecx,0x8(%rax)
  0x00007f7570560806: mov    %rax,%rcx
  0x00007f7570560809: sub    0x68(%r15),%rcx
  0x00007f757056080d: add    %rcx,0xd8(%r15)
  0x00007f7570560814: mov    0x88(%r15),%rcx
  0x00007f757056081b: shl    $0x3,%rcx
  0x00007f757056081f: mov    0xfac1a72(%rip),%rax        # 0x00007f7580022298
  0x00007f7570560826: lea    (%rax,%rcx,1),%rsi
  0x00007f757056082a: cmp    %rax,%rsi
  0x00007f757056082d: jb     0x00007f7570560b3a
  0x00007f7570560833: cmp    0xfac1a36(%rip),%rsi        # 0x00007f7580022270
  0x00007f757056083a: ja     0x00007f7570560b3a
  0x00007f7570560840: lock cmpxchg %rsi,0xfac1a4f(%rip)        # 0x00007f7580022298
  0x00007f7570560849: jne    0x00007f757056081f
  0x00007f757056084b: push   %rsi
  0x00007f757056084c: mov    0x88(%r15),%rsi
  0x00007f7570560853: shl    $0x3,%rsi
  0x00007f7570560857: cmp    %rsi,%rcx
  0x00007f757056085a: je     0x00007f757056094e
  ;; assert(t1 != tlab size)
  0x00007f7570560860: mov    %rsp,-0x28(%rsp)
  0x00007f7570560865: sub    $0x80,%rsp
  0x00007f757056086c: mov    %rax,0x78(%rsp)
  0x00007f7570560871: mov    %rcx,0x70(%rsp)
  0x00007f7570560876: mov    %rdx,0x68(%rsp)
  0x00007f757056087b: mov    %rbx,0x60(%rsp)
  0x00007f7570560880: mov    %rbp,0x50(%rsp)
  0x00007f7570560885: mov    %rsi,0x48(%rsp)
  0x00007f757056088a: mov    %rdi,0x40(%rsp)
  0x00007f757056088f: mov    %r8,0x38(%rsp)
  0x00007f7570560894: mov    %r9,0x30(%rsp)
  0x00007f7570560899: mov    %r10,0x28(%rsp)
  0x00007f757056089e: mov    %r11,0x20(%rsp)
  0x00007f75705608a3: mov    %r12,0x18(%rsp)
  0x00007f75705608a8: mov    %r13,0x10(%rsp)
  0x00007f75705608ad: mov    %r14,0x8(%rsp)
  0x00007f75705608b2: mov    %r15,(%rsp)
  0x00007f75705608b6: movabs $0x7f7585888079,%rdi
  0x00007f75705608c0: movabs $0x7f7570560860,%rsi
  0x00007f75705608ca: mov    %rsp,%rdx
  0x00007f75705608cd: and    $0xfffffffffffffff0,%rsp
  0x00007f75705608d1: callq  0x00007f75853729fa
  0x00007f75705608d6: hlt    
  0x00007f75705608d7: mov    %rsp,-0x28(%rsp)
  0x00007f75705608dc: sub    $0x80,%rsp
  0x00007f75705608e3: mov    %rax,0x78(%rsp)
  0x00007f75705608e8: mov    %rcx,0x70(%rsp)
  0x00007f75705608ed: mov    %rdx,0x68(%rsp)
  0x00007f75705608f2: mov    %rbx,0x60(%rsp)
  0x00007f75705608f7: mov    %rbp,0x50(%rsp)
  0x00007f75705608fc: mov    %rsi,0x48(%rsp)
  0x00007f7570560901: mov    %rdi,0x40(%rsp)
  0x00007f7570560906: mov    %r8,0x38(%rsp)
  0x00007f757056090b: mov    %r9,0x30(%rsp)
  0x00007f7570560910: mov    %r10,0x28(%rsp)
  0x00007f7570560915: mov    %r11,0x20(%rsp)
  0x00007f757056091a: mov    %r12,0x18(%rsp)
  0x00007f757056091f: mov    %r13,0x10(%rsp)
  0x00007f7570560924: mov    %r14,0x8(%rsp)
  0x00007f7570560929: mov    %r15,(%rsp)
  0x00007f757056092d: movabs $0x7f75856bea2b,%rdi
  0x00007f7570560937: movabs $0x7f75705608d7,%rsi
  0x00007f7570560941: mov    %rsp,%rdx
  0x00007f7570560944: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560948: callq  0x00007f75853729fa
  0x00007f757056094d: hlt    
  0x00007f757056094e: pop    %rsi
  0x00007f757056094f: mov    %rax,0x68(%r15)
  0x00007f7570560953: mov    %rax,0x70(%r15)
  0x00007f7570560957: add    %rcx,%rax
  0x00007f757056095a: sub    $0x10,%rax
  0x00007f757056095e: mov    %rax,0x80(%r15)
  0x00007f7570560965: jmpq   0x00007f757056096a
  0x00007f757056096a: mov    0xc(%rdx),%ecx
  0x00007f757056096d: mov    0x70(%r15),%rax
  0x00007f7570560971: lea    (%rax,%rcx,1),%rsi
  0x00007f7570560975: cmp    0x80(%r15),%rsi
  0x00007f757056097c: ja     0x00007f7570560b3a
  0x00007f7570560982: mov    %rsi,0x70(%r15)
  0x00007f7570560986: mov    0xb0(%rdx),%rbx
  0x00007f757056098d: mov    %rbx,(%rax)
  0x00007f7570560990: mov    %rdx,%rbx
  0x00007f7570560993: shr    $0x3,%rbx
  0x00007f7570560997: mov    %ebx,0x8(%rax)
  0x00007f757056099a: xor    %rbx,%rbx
  0x00007f757056099d: mov    %ebx,0xc(%rax)
  0x00007f75705609a0: mov    %rcx,%rsi
  0x00007f75705609a3: sub    $0x10,%rsi
  0x00007f75705609a7: je     0x00007f7570560a42
  0x00007f75705609ad: test   $0x7,%rsi
  0x00007f75705609b4: je     0x00007f7570560a31
  0x00007f75705609ba: mov    %rsp,-0x28(%rsp)
  0x00007f75705609bf: sub    $0x80,%rsp
  0x00007f75705609c6: mov    %rax,0x78(%rsp)
  0x00007f75705609cb: mov    %rcx,0x70(%rsp)
  0x00007f75705609d0: mov    %rdx,0x68(%rsp)
  0x00007f75705609d5: mov    %rbx,0x60(%rsp)
  0x00007f75705609da: mov    %rbp,0x50(%rsp)
  0x00007f75705609df: mov    %rsi,0x48(%rsp)
  0x00007f75705609e4: mov    %rdi,0x40(%rsp)
  0x00007f75705609e9: mov    %r8,0x38(%rsp)
  0x00007f75705609ee: mov    %r9,0x30(%rsp)
  0x00007f75705609f3: mov    %r10,0x28(%rsp)
  0x00007f75705609f8: mov    %r11,0x20(%rsp)
  0x00007f75705609fd: mov    %r12,0x18(%rsp)
  0x00007f7570560a02: mov    %r13,0x10(%rsp)
  0x00007f7570560a07: mov    %r14,0x8(%rsp)
  0x00007f7570560a0c: mov    %r15,(%rsp)
  0x00007f7570560a10: movabs $0x7f75856e9fc8,%rdi
  0x00007f7570560a1a: movabs $0x7f75705609ba,%rsi
  0x00007f7570560a24: mov    %rsp,%rdx
  0x00007f7570560a27: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560a2b: callq  0x00007f75853729fa
  0x00007f7570560a30: hlt    
  0x00007f7570560a31: xor    %rbx,%rbx
  0x00007f7570560a34: shr    $0x3,%rsi
  0x00007f7570560a38: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f7570560a3d: dec    %rsi
  0x00007f7570560a40: jne    0x00007f7570560a38
  0x00007f7570560a42: pop    %rbx
  0x00007f7570560a43: pop    %rdi
  0x00007f7570560a44: retq   
  0x00007f7570560a45: mov    0xc(%rdx),%ecx
  0x00007f7570560a48: mov    0xfac1849(%rip),%rax        # 0x00007f7580022298
  0x00007f7570560a4f: lea    (%rax,%rcx,1),%rbx
  0x00007f7570560a53: cmp    %rax,%rbx
  0x00007f7570560a56: jb     0x00007f7570560b3a
  0x00007f7570560a5c: cmp    0xfac180d(%rip),%rbx        # 0x00007f7580022270
  0x00007f7570560a63: ja     0x00007f7570560b3a
  0x00007f7570560a69: lock cmpxchg %rbx,0xfac1826(%rip)        # 0x00007f7580022298
  0x00007f7570560a72: jne    0x00007f7570560a48
  0x00007f7570560a74: add    %rcx,0xd8(%r15)
  0x00007f7570560a7b: mov    0xb0(%rdx),%rbx
  0x00007f7570560a82: mov    %rbx,(%rax)
  0x00007f7570560a85: mov    %rdx,%rbx
  0x00007f7570560a88: shr    $0x3,%rbx
  0x00007f7570560a8c: mov    %ebx,0x8(%rax)
  0x00007f7570560a8f: xor    %rbx,%rbx
  0x00007f7570560a92: mov    %ebx,0xc(%rax)
  0x00007f7570560a95: mov    %rcx,%rsi
  0x00007f7570560a98: sub    $0x10,%rsi
  0x00007f7570560a9c: je     0x00007f7570560b37
  0x00007f7570560aa2: test   $0x7,%rsi
  0x00007f7570560aa9: je     0x00007f7570560b26
  0x00007f7570560aaf: mov    %rsp,-0x28(%rsp)
  0x00007f7570560ab4: sub    $0x80,%rsp
  0x00007f7570560abb: mov    %rax,0x78(%rsp)
  0x00007f7570560ac0: mov    %rcx,0x70(%rsp)
  0x00007f7570560ac5: mov    %rdx,0x68(%rsp)
  0x00007f7570560aca: mov    %rbx,0x60(%rsp)
  0x00007f7570560acf: mov    %rbp,0x50(%rsp)
  0x00007f7570560ad4: mov    %rsi,0x48(%rsp)
  0x00007f7570560ad9: mov    %rdi,0x40(%rsp)
  0x00007f7570560ade: mov    %r8,0x38(%rsp)
  0x00007f7570560ae3: mov    %r9,0x30(%rsp)
  0x00007f7570560ae8: mov    %r10,0x28(%rsp)
  0x00007f7570560aed: mov    %r11,0x20(%rsp)
  0x00007f7570560af2: mov    %r12,0x18(%rsp)
  0x00007f7570560af7: mov    %r13,0x10(%rsp)
  0x00007f7570560afc: mov    %r14,0x8(%rsp)
  0x00007f7570560b01: mov    %r15,(%rsp)
  0x00007f7570560b05: movabs $0x7f75856e9fc8,%rdi
  0x00007f7570560b0f: movabs $0x7f7570560aaf,%rsi
  0x00007f7570560b19: mov    %rsp,%rdx
  0x00007f7570560b1c: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560b20: callq  0x00007f75853729fa
  0x00007f7570560b25: hlt    
  0x00007f7570560b26: xor    %rbx,%rbx
  0x00007f7570560b29: shr    $0x3,%rsi
  0x00007f7570560b2d: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f7570560b32: dec    %rsi
  0x00007f7570560b35: jne    0x00007f7570560b2d
  0x00007f7570560b37: pop    %rbx
  0x00007f7570560b38: pop    %rdi
  0x00007f7570560b39: retq   
  0x00007f7570560b3a: pop    %rbx
  0x00007f7570560b3b: pop    %rdi
  0x00007f7570560b3c: push   %rbp
  0x00007f7570560b3d: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f7570560b40: mov    %rsp,-0x28(%rsp)
  0x00007f7570560b45: sub    $0x80,%rsp
  0x00007f7570560b4c: mov    %rax,0x78(%rsp)
  0x00007f7570560b51: mov    %rcx,0x70(%rsp)
  0x00007f7570560b56: mov    %rdx,0x68(%rsp)
  0x00007f7570560b5b: mov    %rbx,0x60(%rsp)
  0x00007f7570560b60: mov    %rbp,0x50(%rsp)
  0x00007f7570560b65: mov    %rsi,0x48(%rsp)
  0x00007f7570560b6a: mov    %rdi,0x40(%rsp)
  0x00007f7570560b6f: mov    %r8,0x38(%rsp)
  0x00007f7570560b74: mov    %r9,0x30(%rsp)
  0x00007f7570560b79: mov    %r10,0x28(%rsp)
  0x00007f7570560b7e: mov    %r11,0x20(%rsp)
  0x00007f7570560b83: mov    %r12,0x18(%rsp)
  0x00007f7570560b88: mov    %r13,0x10(%rsp)
  0x00007f7570560b8d: mov    %r14,0x8(%rsp)
  0x00007f7570560b92: mov    %r15,(%rsp)
  0x00007f7570560b96: sub    $0x150,%rsp
  0x00007f7570560b9d: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570560ba9: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570560baf: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570560bb5: vmovsd %xmm2,0x18(%rsp)
  0x00007f7570560bbb: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570560bc1: vmovsd %xmm4,0x28(%rsp)
  0x00007f7570560bc7: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570560bcd: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570560bd3: vmovsd %xmm7,0x40(%rsp)
  0x00007f7570560bd9: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570560bdf: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570560be5: vmovsd %xmm10,0x58(%rsp)
  0x00007f7570560beb: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570560bf1: vmovsd %xmm12,0x68(%rsp)
  0x00007f7570560bf7: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570560bfd: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570560c03: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570560c0c: mov    %rdx,%rsi
  0x00007f7570560c0f: mov    %r15,%rdi
  0x00007f7570560c12: mov    %rbp,0x210(%r15)
  0x00007f7570560c19: mov    %rsp,0x200(%r15)
  0x00007f7570560c20: callq  0x00007f7584e5106c
  0x00007f7570560c25: push   %rax
  0x00007f7570560c26: push   %rdi
  0x00007f7570560c27: push   %rsi
  0x00007f7570560c28: push   %rdx
  0x00007f7570560c29: push   %rcx
  0x00007f7570560c2a: push   %r8
  0x00007f7570560c2c: push   %r9
  0x00007f7570560c2e: push   %r10
  0x00007f7570560c30: mov    %rsp,%r10
  0x00007f7570560c33: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560c37: push   %r10
  0x00007f7570560c39: push   %r11
  0x00007f7570560c3b: mov    $0x1,%edi
  0x00007f7570560c40: callq  0x00007f7585f5a2d0
  0x00007f7570560c45: pop    %r11
  0x00007f7570560c47: pop    %rsp
  0x00007f7570560c48: pop    %r10
  0x00007f7570560c4a: pop    %r9
  0x00007f7570560c4c: pop    %r8
  0x00007f7570560c4e: pop    %rcx
  0x00007f7570560c4f: pop    %rdx
  0x00007f7570560c50: pop    %rsi
  0x00007f7570560c51: pop    %rdi
  0x00007f7570560c52: cmp    %rax,%r15
  0x00007f7570560c55: je     0x00007f7570560cd7
  0x00007f7570560c5b: callq  0x00007f7585459a22
  0x00007f7570560c60: mov    %rsp,-0x28(%rsp)
  0x00007f7570560c65: sub    $0x80,%rsp
  0x00007f7570560c6c: mov    %rax,0x78(%rsp)
  0x00007f7570560c71: mov    %rcx,0x70(%rsp)
  0x00007f7570560c76: mov    %rdx,0x68(%rsp)
  0x00007f7570560c7b: mov    %rbx,0x60(%rsp)
  0x00007f7570560c80: mov    %rbp,0x50(%rsp)
  0x00007f7570560c85: mov    %rsi,0x48(%rsp)
  0x00007f7570560c8a: mov    %rdi,0x40(%rsp)
  0x00007f7570560c8f: mov    %r8,0x38(%rsp)
  0x00007f7570560c94: mov    %r9,0x30(%rsp)
  0x00007f7570560c99: mov    %r10,0x28(%rsp)
  0x00007f7570560c9e: mov    %r11,0x20(%rsp)
  0x00007f7570560ca3: mov    %r12,0x18(%rsp)
  0x00007f7570560ca8: mov    %r13,0x10(%rsp)
  0x00007f7570560cad: mov    %r14,0x8(%rsp)
  0x00007f7570560cb2: mov    %r15,(%rsp)
  0x00007f7570560cb6: movabs $0x7f75856f3278,%rdi
  0x00007f7570560cc0: movabs $0x7f7570560c60,%rsi
  0x00007f7570560cca: mov    %rsp,%rdx
  0x00007f7570560ccd: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560cd1: callq  0x00007f75853729fa
  0x00007f7570560cd6: hlt    
  0x00007f7570560cd7: pop    %rax
  0x00007f7570560cd8: movabs $0x0,%r10
  0x00007f7570560ce2: mov    %r10,0x200(%r15)
  0x00007f7570560ce9: movabs $0x0,%r10
  0x00007f7570560cf3: mov    %r10,0x210(%r15)
  0x00007f7570560cfa: movabs $0x0,%r10
  0x00007f7570560d04: mov    %r10,0x208(%r15)
  0x00007f7570560d0b: cmpq   $0x0,0x8(%r15)
  0x00007f7570560d13: je     0x00007f7570560d33
  0x00007f7570560d19: mov    0x8(%r15),%rax
  0x00007f7570560d1d: movabs $0x0,%r10
  0x00007f7570560d27: mov    %r10,0x260(%r15)
  0x00007f7570560d2e: jmpq   0x00007f757055b240
  0x00007f7570560d33: mov    0x260(%r15),%rax
  0x00007f7570560d3a: movabs $0x0,%r10
  0x00007f7570560d44: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f7570560d4b: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570560d51: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570560d57: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570560d5d: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570560d63: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570560d69: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570560d6f: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570560d75: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570560d7b: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570560d81: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570560d87: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570560d8d: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570560d93: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570560d99: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570560d9f: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570560da5: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570560dae: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570560dba: je     0x00007f7570560e37
  0x00007f7570560dc0: mov    %rsp,-0x28(%rsp)
  0x00007f7570560dc5: sub    $0x80,%rsp
  0x00007f7570560dcc: mov    %rax,0x78(%rsp)
  0x00007f7570560dd1: mov    %rcx,0x70(%rsp)
  0x00007f7570560dd6: mov    %rdx,0x68(%rsp)
  0x00007f7570560ddb: mov    %rbx,0x60(%rsp)
  0x00007f7570560de0: mov    %rbp,0x50(%rsp)
  0x00007f7570560de5: mov    %rsi,0x48(%rsp)
  0x00007f7570560dea: mov    %rdi,0x40(%rsp)
  0x00007f7570560def: mov    %r8,0x38(%rsp)
  0x00007f7570560df4: mov    %r9,0x30(%rsp)
  0x00007f7570560df9: mov    %r10,0x28(%rsp)
  0x00007f7570560dfe: mov    %r11,0x20(%rsp)
  0x00007f7570560e03: mov    %r12,0x18(%rsp)
  0x00007f7570560e08: mov    %r13,0x10(%rsp)
  0x00007f7570560e0d: mov    %r14,0x8(%rsp)
  0x00007f7570560e12: mov    %r15,(%rsp)
  0x00007f7570560e16: movabs $0x7f75856f340f,%rdi
  0x00007f7570560e20: movabs $0x7f7570560dc0,%rsi
  0x00007f7570560e2a: mov    %rsp,%rdx
  0x00007f7570560e2d: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560e31: callq  0x00007f75853729fa
  0x00007f7570560e36: hlt    
  0x00007f7570560e37: add    $0x150,%rsp
  0x00007f7570560e3e: mov    (%rsp),%r15
  0x00007f7570560e42: mov    0x8(%rsp),%r14
  0x00007f7570560e47: mov    0x10(%rsp),%r13
  0x00007f7570560e4c: mov    0x18(%rsp),%r12
  0x00007f7570560e51: mov    0x20(%rsp),%r11
  0x00007f7570560e56: mov    0x28(%rsp),%r10
  0x00007f7570560e5b: mov    0x30(%rsp),%r9
  0x00007f7570560e60: mov    0x38(%rsp),%r8
  0x00007f7570560e65: mov    0x40(%rsp),%rdi
  0x00007f7570560e6a: mov    0x48(%rsp),%rsi
  0x00007f7570560e6f: mov    0x50(%rsp),%rbp
  0x00007f7570560e74: mov    0x60(%rsp),%rbx
  0x00007f7570560e79: mov    0x68(%rsp),%rdx
  0x00007f7570560e7e: mov    0x70(%rsp),%rcx
  0x00007f7570560e83: add    $0x80,%rsp
  0x00007f7570560e8a: leaveq 
  0x00007f7570560e8b: retq   
  0x00007f7570560e8c: nop
  0x00007f7570560e8d: nop
  0x00007f7570560e8e: nop
  0x00007f7570560e8f: nop

Decoding RuntimeStub - fast_new_instance_init_check Runtime1 stub 0x00007f7570560ed0
  0x00007f7570561000: push   %rdi
  0x00007f7570561001: push   %rbx
  0x00007f7570561002: cmpb   $0x4,0x16a(%rdx)
  0x00007f7570561009: jne    0x00007f75705614c7
  0x00007f757056100f: mov    0xc(%rdx),%ecx
  0x00007f7570561012: cmp    $0x0,%ecx
  0x00007f7570561015: jle    0x00007f7570561027
  0x00007f757056101b: test   $0x1,%ecx
  0x00007f7570561021: je     0x00007f7570561115
  0x00007f7570561027: mov    %rsp,-0x28(%rsp)
  0x00007f757056102c: sub    $0x80,%rsp
  0x00007f7570561033: mov    %rax,0x78(%rsp)
  0x00007f7570561038: mov    %rcx,0x70(%rsp)
  0x00007f757056103d: mov    %rdx,0x68(%rsp)
  0x00007f7570561042: mov    %rbx,0x60(%rsp)
  0x00007f7570561047: mov    %rbp,0x50(%rsp)
  0x00007f757056104c: mov    %rsi,0x48(%rsp)
  0x00007f7570561051: mov    %rdi,0x40(%rsp)
  0x00007f7570561056: mov    %r8,0x38(%rsp)
  0x00007f757056105b: mov    %r9,0x30(%rsp)
  0x00007f7570561060: mov    %r10,0x28(%rsp)
  0x00007f7570561065: mov    %r11,0x20(%rsp)
  0x00007f757056106a: mov    %r12,0x18(%rsp)
  0x00007f757056106f: mov    %r13,0x10(%rsp)
  0x00007f7570561074: mov    %r14,0x8(%rsp)
  0x00007f7570561079: mov    %r15,(%rsp)
  0x00007f757056107d: movabs $0x7f75856f35e0,%rdi
  0x00007f7570561087: movabs $0x7f7570561027,%rsi
  0x00007f7570561091: mov    %rsp,%rdx
  0x00007f7570561094: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561098: callq  0x00007f75853729fa
  0x00007f757056109d: hlt    
  0x00007f757056109e: mov    %rsp,-0x28(%rsp)
  0x00007f75705610a3: sub    $0x80,%rsp
  0x00007f75705610aa: mov    %rax,0x78(%rsp)
  0x00007f75705610af: mov    %rcx,0x70(%rsp)
  0x00007f75705610b4: mov    %rdx,0x68(%rsp)
  0x00007f75705610b9: mov    %rbx,0x60(%rsp)
  0x00007f75705610be: mov    %rbp,0x50(%rsp)
  0x00007f75705610c3: mov    %rsi,0x48(%rsp)
  0x00007f75705610c8: mov    %rdi,0x40(%rsp)
  0x00007f75705610cd: mov    %r8,0x38(%rsp)
  0x00007f75705610d2: mov    %r9,0x30(%rsp)
  0x00007f75705610d7: mov    %r10,0x28(%rsp)
  0x00007f75705610dc: mov    %r11,0x20(%rsp)
  0x00007f75705610e1: mov    %r12,0x18(%rsp)
  0x00007f75705610e6: mov    %r13,0x10(%rsp)
  0x00007f75705610eb: mov    %r14,0x8(%rsp)
  0x00007f75705610f0: mov    %r15,(%rsp)
  0x00007f75705610f4: movabs $0x7f75856bea2b,%rdi
  0x00007f75705610fe: movabs $0x7f757056109e,%rsi
  0x00007f7570561108: mov    %rsp,%rdx
  0x00007f757056110b: and    $0xfffffffffffffff0,%rsp
  0x00007f757056110f: callq  0x00007f75853729fa
  0x00007f7570561114: hlt    
  0x00007f7570561115: mov    0x70(%r15),%rax
  0x00007f7570561119: mov    0x80(%r15),%rcx
  0x00007f7570561120: sub    %rax,%rcx
  0x00007f7570561123: shr    $0x3,%rcx
  0x00007f7570561127: cmp    0x90(%r15),%rcx
  0x00007f757056112e: jle    0x00007f7570561152
  0x00007f7570561134: movabs $0x4,%rsi
  0x00007f757056113e: add    %rsi,0x90(%r15)
  0x00007f7570561145: addl   $0x1,0xb0(%r15)
  0x00007f757056114d: jmpq   0x00007f75705613d2
  0x00007f7570561152: addl   $0x1,0xa0(%r15)
  0x00007f757056115a: add    %ecx,0xa4(%r15)
  0x00007f7570561161: test   %rax,%rax
  0x00007f7570561164: je     0x00007f75705611a1
  0x00007f757056116a: movabs $0x201,%r10
  0x00007f7570561174: mov    %r10,(%rax)
  0x00007f7570561177: sub    $0x2,%rcx
  0x00007f757056117b: add    $0x2,%rcx
  0x00007f757056117f: shl    %rcx
  0x00007f7570561182: mov    %ecx,0xc(%rax)
  0x00007f7570561185: mov    0x159e3dcc(%rip),%rcx        # 0x00007f7585f44f58
  0x00007f757056118c: shr    $0x3,%rcx
  0x00007f7570561190: mov    %ecx,0x8(%rax)
  0x00007f7570561193: mov    %rax,%rcx
  0x00007f7570561196: sub    0x68(%r15),%rcx
  0x00007f757056119a: add    %rcx,0xd8(%r15)
  0x00007f75705611a1: mov    0x88(%r15),%rcx
  0x00007f75705611a8: shl    $0x3,%rcx
  0x00007f75705611ac: mov    0xfac10e5(%rip),%rax        # 0x00007f7580022298
  0x00007f75705611b3: lea    (%rax,%rcx,1),%rsi
  0x00007f75705611b7: cmp    %rax,%rsi
  0x00007f75705611ba: jb     0x00007f75705614c7
  0x00007f75705611c0: cmp    0xfac10a9(%rip),%rsi        # 0x00007f7580022270
  0x00007f75705611c7: ja     0x00007f75705614c7
  0x00007f75705611cd: lock cmpxchg %rsi,0xfac10c2(%rip)        # 0x00007f7580022298
  0x00007f75705611d6: jne    0x00007f75705611ac
  0x00007f75705611d8: push   %rsi
  0x00007f75705611d9: mov    0x88(%r15),%rsi
  0x00007f75705611e0: shl    $0x3,%rsi
  0x00007f75705611e4: cmp    %rsi,%rcx
  0x00007f75705611e7: je     0x00007f75705612db
  ;; assert(t1 != tlab size)
  0x00007f75705611ed: mov    %rsp,-0x28(%rsp)
  0x00007f75705611f2: sub    $0x80,%rsp
  0x00007f75705611f9: mov    %rax,0x78(%rsp)
  0x00007f75705611fe: mov    %rcx,0x70(%rsp)
  0x00007f7570561203: mov    %rdx,0x68(%rsp)
  0x00007f7570561208: mov    %rbx,0x60(%rsp)
  0x00007f757056120d: mov    %rbp,0x50(%rsp)
  0x00007f7570561212: mov    %rsi,0x48(%rsp)
  0x00007f7570561217: mov    %rdi,0x40(%rsp)
  0x00007f757056121c: mov    %r8,0x38(%rsp)
  0x00007f7570561221: mov    %r9,0x30(%rsp)
  0x00007f7570561226: mov    %r10,0x28(%rsp)
  0x00007f757056122b: mov    %r11,0x20(%rsp)
  0x00007f7570561230: mov    %r12,0x18(%rsp)
  0x00007f7570561235: mov    %r13,0x10(%rsp)
  0x00007f757056123a: mov    %r14,0x8(%rsp)
  0x00007f757056123f: mov    %r15,(%rsp)
  0x00007f7570561243: movabs $0x7f7585888079,%rdi
  0x00007f757056124d: movabs $0x7f75705611ed,%rsi
  0x00007f7570561257: mov    %rsp,%rdx
  0x00007f757056125a: and    $0xfffffffffffffff0,%rsp
  0x00007f757056125e: callq  0x00007f75853729fa
  0x00007f7570561263: hlt    
  0x00007f7570561264: mov    %rsp,-0x28(%rsp)
  0x00007f7570561269: sub    $0x80,%rsp
  0x00007f7570561270: mov    %rax,0x78(%rsp)
  0x00007f7570561275: mov    %rcx,0x70(%rsp)
  0x00007f757056127a: mov    %rdx,0x68(%rsp)
  0x00007f757056127f: mov    %rbx,0x60(%rsp)
  0x00007f7570561284: mov    %rbp,0x50(%rsp)
  0x00007f7570561289: mov    %rsi,0x48(%rsp)
  0x00007f757056128e: mov    %rdi,0x40(%rsp)
  0x00007f7570561293: mov    %r8,0x38(%rsp)
  0x00007f7570561298: mov    %r9,0x30(%rsp)
  0x00007f757056129d: mov    %r10,0x28(%rsp)
  0x00007f75705612a2: mov    %r11,0x20(%rsp)
  0x00007f75705612a7: mov    %r12,0x18(%rsp)
  0x00007f75705612ac: mov    %r13,0x10(%rsp)
  0x00007f75705612b1: mov    %r14,0x8(%rsp)
  0x00007f75705612b6: mov    %r15,(%rsp)
  0x00007f75705612ba: movabs $0x7f75856bea2b,%rdi
  0x00007f75705612c4: movabs $0x7f7570561264,%rsi
  0x00007f75705612ce: mov    %rsp,%rdx
  0x00007f75705612d1: and    $0xfffffffffffffff0,%rsp
  0x00007f75705612d5: callq  0x00007f75853729fa
  0x00007f75705612da: hlt    
  0x00007f75705612db: pop    %rsi
  0x00007f75705612dc: mov    %rax,0x68(%r15)
  0x00007f75705612e0: mov    %rax,0x70(%r15)
  0x00007f75705612e4: add    %rcx,%rax
  0x00007f75705612e7: sub    $0x10,%rax
  0x00007f75705612eb: mov    %rax,0x80(%r15)
  0x00007f75705612f2: jmpq   0x00007f75705612f7
  0x00007f75705612f7: mov    0xc(%rdx),%ecx
  0x00007f75705612fa: mov    0x70(%r15),%rax
  0x00007f75705612fe: lea    (%rax,%rcx,1),%rsi
  0x00007f7570561302: cmp    0x80(%r15),%rsi
  0x00007f7570561309: ja     0x00007f75705614c7
  0x00007f757056130f: mov    %rsi,0x70(%r15)
  0x00007f7570561313: mov    0xb0(%rdx),%rbx
  0x00007f757056131a: mov    %rbx,(%rax)
  0x00007f757056131d: mov    %rdx,%rbx
  0x00007f7570561320: shr    $0x3,%rbx
  0x00007f7570561324: mov    %ebx,0x8(%rax)
  0x00007f7570561327: xor    %rbx,%rbx
  0x00007f757056132a: mov    %ebx,0xc(%rax)
  0x00007f757056132d: mov    %rcx,%rsi
  0x00007f7570561330: sub    $0x10,%rsi
  0x00007f7570561334: je     0x00007f75705613cf
  0x00007f757056133a: test   $0x7,%rsi
  0x00007f7570561341: je     0x00007f75705613be
  0x00007f7570561347: mov    %rsp,-0x28(%rsp)
  0x00007f757056134c: sub    $0x80,%rsp
  0x00007f7570561353: mov    %rax,0x78(%rsp)
  0x00007f7570561358: mov    %rcx,0x70(%rsp)
  0x00007f757056135d: mov    %rdx,0x68(%rsp)
  0x00007f7570561362: mov    %rbx,0x60(%rsp)
  0x00007f7570561367: mov    %rbp,0x50(%rsp)
  0x00007f757056136c: mov    %rsi,0x48(%rsp)
  0x00007f7570561371: mov    %rdi,0x40(%rsp)
  0x00007f7570561376: mov    %r8,0x38(%rsp)
  0x00007f757056137b: mov    %r9,0x30(%rsp)
  0x00007f7570561380: mov    %r10,0x28(%rsp)
  0x00007f7570561385: mov    %r11,0x20(%rsp)
  0x00007f757056138a: mov    %r12,0x18(%rsp)
  0x00007f757056138f: mov    %r13,0x10(%rsp)
  0x00007f7570561394: mov    %r14,0x8(%rsp)
  0x00007f7570561399: mov    %r15,(%rsp)
  0x00007f757056139d: movabs $0x7f75856e9fc8,%rdi
  0x00007f75705613a7: movabs $0x7f7570561347,%rsi
  0x00007f75705613b1: mov    %rsp,%rdx
  0x00007f75705613b4: and    $0xfffffffffffffff0,%rsp
  0x00007f75705613b8: callq  0x00007f75853729fa
  0x00007f75705613bd: hlt    
  0x00007f75705613be: xor    %rbx,%rbx
  0x00007f75705613c1: shr    $0x3,%rsi
  0x00007f75705613c5: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f75705613ca: dec    %rsi
  0x00007f75705613cd: jne    0x00007f75705613c5
  0x00007f75705613cf: pop    %rbx
  0x00007f75705613d0: pop    %rdi
  0x00007f75705613d1: retq   
  0x00007f75705613d2: mov    0xc(%rdx),%ecx
  0x00007f75705613d5: mov    0xfac0ebc(%rip),%rax        # 0x00007f7580022298
  0x00007f75705613dc: lea    (%rax,%rcx,1),%rbx
  0x00007f75705613e0: cmp    %rax,%rbx
  0x00007f75705613e3: jb     0x00007f75705614c7
  0x00007f75705613e9: cmp    0xfac0e80(%rip),%rbx        # 0x00007f7580022270
  0x00007f75705613f0: ja     0x00007f75705614c7
  0x00007f75705613f6: lock cmpxchg %rbx,0xfac0e99(%rip)        # 0x00007f7580022298
  0x00007f75705613ff: jne    0x00007f75705613d5
  0x00007f7570561401: add    %rcx,0xd8(%r15)
  0x00007f7570561408: mov    0xb0(%rdx),%rbx
  0x00007f757056140f: mov    %rbx,(%rax)
  0x00007f7570561412: mov    %rdx,%rbx
  0x00007f7570561415: shr    $0x3,%rbx
  0x00007f7570561419: mov    %ebx,0x8(%rax)
  0x00007f757056141c: xor    %rbx,%rbx
  0x00007f757056141f: mov    %ebx,0xc(%rax)
  0x00007f7570561422: mov    %rcx,%rsi
  0x00007f7570561425: sub    $0x10,%rsi
  0x00007f7570561429: je     0x00007f75705614c4
  0x00007f757056142f: test   $0x7,%rsi
  0x00007f7570561436: je     0x00007f75705614b3
  0x00007f757056143c: mov    %rsp,-0x28(%rsp)
  0x00007f7570561441: sub    $0x80,%rsp
  0x00007f7570561448: mov    %rax,0x78(%rsp)
  0x00007f757056144d: mov    %rcx,0x70(%rsp)
  0x00007f7570561452: mov    %rdx,0x68(%rsp)
  0x00007f7570561457: mov    %rbx,0x60(%rsp)
  0x00007f757056145c: mov    %rbp,0x50(%rsp)
  0x00007f7570561461: mov    %rsi,0x48(%rsp)
  0x00007f7570561466: mov    %rdi,0x40(%rsp)
  0x00007f757056146b: mov    %r8,0x38(%rsp)
  0x00007f7570561470: mov    %r9,0x30(%rsp)
  0x00007f7570561475: mov    %r10,0x28(%rsp)
  0x00007f757056147a: mov    %r11,0x20(%rsp)
  0x00007f757056147f: mov    %r12,0x18(%rsp)
  0x00007f7570561484: mov    %r13,0x10(%rsp)
  0x00007f7570561489: mov    %r14,0x8(%rsp)
  0x00007f757056148e: mov    %r15,(%rsp)
  0x00007f7570561492: movabs $0x7f75856e9fc8,%rdi
  0x00007f757056149c: movabs $0x7f757056143c,%rsi
  0x00007f75705614a6: mov    %rsp,%rdx
  0x00007f75705614a9: and    $0xfffffffffffffff0,%rsp
  0x00007f75705614ad: callq  0x00007f75853729fa
  0x00007f75705614b2: hlt    
  0x00007f75705614b3: xor    %rbx,%rbx
  0x00007f75705614b6: shr    $0x3,%rsi
  0x00007f75705614ba: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f75705614bf: dec    %rsi
  0x00007f75705614c2: jne    0x00007f75705614ba
  0x00007f75705614c4: pop    %rbx
  0x00007f75705614c5: pop    %rdi
  0x00007f75705614c6: retq   
  0x00007f75705614c7: pop    %rbx
  0x00007f75705614c8: pop    %rdi
  0x00007f75705614c9: push   %rbp
  0x00007f75705614ca: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f75705614cd: mov    %rsp,-0x28(%rsp)
  0x00007f75705614d2: sub    $0x80,%rsp
  0x00007f75705614d9: mov    %rax,0x78(%rsp)
  0x00007f75705614de: mov    %rcx,0x70(%rsp)
  0x00007f75705614e3: mov    %rdx,0x68(%rsp)
  0x00007f75705614e8: mov    %rbx,0x60(%rsp)
  0x00007f75705614ed: mov    %rbp,0x50(%rsp)
  0x00007f75705614f2: mov    %rsi,0x48(%rsp)
  0x00007f75705614f7: mov    %rdi,0x40(%rsp)
  0x00007f75705614fc: mov    %r8,0x38(%rsp)
  0x00007f7570561501: mov    %r9,0x30(%rsp)
  0x00007f7570561506: mov    %r10,0x28(%rsp)
  0x00007f757056150b: mov    %r11,0x20(%rsp)
  0x00007f7570561510: mov    %r12,0x18(%rsp)
  0x00007f7570561515: mov    %r13,0x10(%rsp)
  0x00007f757056151a: mov    %r14,0x8(%rsp)
  0x00007f757056151f: mov    %r15,(%rsp)
  0x00007f7570561523: sub    $0x150,%rsp
  0x00007f757056152a: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570561536: vmovsd %xmm0,0x8(%rsp)
  0x00007f757056153c: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570561542: vmovsd %xmm2,0x18(%rsp)
  0x00007f7570561548: vmovsd %xmm3,0x20(%rsp)
  0x00007f757056154e: vmovsd %xmm4,0x28(%rsp)
  0x00007f7570561554: vmovsd %xmm5,0x30(%rsp)
  0x00007f757056155a: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570561560: vmovsd %xmm7,0x40(%rsp)
  0x00007f7570561566: vmovsd %xmm8,0x48(%rsp)
  0x00007f757056156c: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570561572: vmovsd %xmm10,0x58(%rsp)
  0x00007f7570561578: vmovsd %xmm11,0x60(%rsp)
  0x00007f757056157e: vmovsd %xmm12,0x68(%rsp)
  0x00007f7570561584: vmovsd %xmm13,0x70(%rsp)
  0x00007f757056158a: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570561590: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570561599: mov    %rdx,%rsi
  0x00007f757056159c: mov    %r15,%rdi
  0x00007f757056159f: mov    %rbp,0x210(%r15)
  0x00007f75705615a6: mov    %rsp,0x200(%r15)
  0x00007f75705615ad: callq  0x00007f7584e5106c
  0x00007f75705615b2: push   %rax
  0x00007f75705615b3: push   %rdi
  0x00007f75705615b4: push   %rsi
  0x00007f75705615b5: push   %rdx
  0x00007f75705615b6: push   %rcx
  0x00007f75705615b7: push   %r8
  0x00007f75705615b9: push   %r9
  0x00007f75705615bb: push   %r10
  0x00007f75705615bd: mov    %rsp,%r10
  0x00007f75705615c0: and    $0xfffffffffffffff0,%rsp
  0x00007f75705615c4: push   %r10
  0x00007f75705615c6: push   %r11
  0x00007f75705615c8: mov    $0x1,%edi
  0x00007f75705615cd: callq  0x00007f7585f5a2d0
  0x00007f75705615d2: pop    %r11
  0x00007f75705615d4: pop    %rsp
  0x00007f75705615d5: pop    %r10
  0x00007f75705615d7: pop    %r9
  0x00007f75705615d9: pop    %r8
  0x00007f75705615db: pop    %rcx
  0x00007f75705615dc: pop    %rdx
  0x00007f75705615dd: pop    %rsi
  0x00007f75705615de: pop    %rdi
  0x00007f75705615df: cmp    %rax,%r15
  0x00007f75705615e2: je     0x00007f7570561664
  0x00007f75705615e8: callq  0x00007f7585459a22
  0x00007f75705615ed: mov    %rsp,-0x28(%rsp)
  0x00007f75705615f2: sub    $0x80,%rsp
  0x00007f75705615f9: mov    %rax,0x78(%rsp)
  0x00007f75705615fe: mov    %rcx,0x70(%rsp)
  0x00007f7570561603: mov    %rdx,0x68(%rsp)
  0x00007f7570561608: mov    %rbx,0x60(%rsp)
  0x00007f757056160d: mov    %rbp,0x50(%rsp)
  0x00007f7570561612: mov    %rsi,0x48(%rsp)
  0x00007f7570561617: mov    %rdi,0x40(%rsp)
  0x00007f757056161c: mov    %r8,0x38(%rsp)
  0x00007f7570561621: mov    %r9,0x30(%rsp)
  0x00007f7570561626: mov    %r10,0x28(%rsp)
  0x00007f757056162b: mov    %r11,0x20(%rsp)
  0x00007f7570561630: mov    %r12,0x18(%rsp)
  0x00007f7570561635: mov    %r13,0x10(%rsp)
  0x00007f757056163a: mov    %r14,0x8(%rsp)
  0x00007f757056163f: mov    %r15,(%rsp)
  0x00007f7570561643: movabs $0x7f75856f3278,%rdi
  0x00007f757056164d: movabs $0x7f75705615ed,%rsi
  0x00007f7570561657: mov    %rsp,%rdx
  0x00007f757056165a: and    $0xfffffffffffffff0,%rsp
  0x00007f757056165e: callq  0x00007f75853729fa
  0x00007f7570561663: hlt    
  0x00007f7570561664: pop    %rax
  0x00007f7570561665: movabs $0x0,%r10
  0x00007f757056166f: mov    %r10,0x200(%r15)
  0x00007f7570561676: movabs $0x0,%r10
  0x00007f7570561680: mov    %r10,0x210(%r15)
  0x00007f7570561687: movabs $0x0,%r10
  0x00007f7570561691: mov    %r10,0x208(%r15)
  0x00007f7570561698: cmpq   $0x0,0x8(%r15)
  0x00007f75705616a0: je     0x00007f75705616c0
  0x00007f75705616a6: mov    0x8(%r15),%rax
  0x00007f75705616aa: movabs $0x0,%r10
  0x00007f75705616b4: mov    %r10,0x260(%r15)
  0x00007f75705616bb: jmpq   0x00007f757055b240
  0x00007f75705616c0: mov    0x260(%r15),%rax
  0x00007f75705616c7: movabs $0x0,%r10
  0x00007f75705616d1: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f75705616d8: vmovsd 0x8(%rsp),%xmm0
  0x00007f75705616de: vmovsd 0x10(%rsp),%xmm1
  0x00007f75705616e4: vmovsd 0x18(%rsp),%xmm2
  0x00007f75705616ea: vmovsd 0x20(%rsp),%xmm3
  0x00007f75705616f0: vmovsd 0x28(%rsp),%xmm4
  0x00007f75705616f6: vmovsd 0x30(%rsp),%xmm5
  0x00007f75705616fc: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570561702: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570561708: vmovsd 0x48(%rsp),%xmm8
  0x00007f757056170e: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570561714: vmovsd 0x58(%rsp),%xmm10
  0x00007f757056171a: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570561720: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570561726: vmovsd 0x70(%rsp),%xmm13
  0x00007f757056172c: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570561732: vmovsd 0x80(%rsp),%xmm15
  0x00007f757056173b: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570561747: je     0x00007f75705617c4
  0x00007f757056174d: mov    %rsp,-0x28(%rsp)
  0x00007f7570561752: sub    $0x80,%rsp
  0x00007f7570561759: mov    %rax,0x78(%rsp)
  0x00007f757056175e: mov    %rcx,0x70(%rsp)
  0x00007f7570561763: mov    %rdx,0x68(%rsp)
  0x00007f7570561768: mov    %rbx,0x60(%rsp)
  0x00007f757056176d: mov    %rbp,0x50(%rsp)
  0x00007f7570561772: mov    %rsi,0x48(%rsp)
  0x00007f7570561777: mov    %rdi,0x40(%rsp)
  0x00007f757056177c: mov    %r8,0x38(%rsp)
  0x00007f7570561781: mov    %r9,0x30(%rsp)
  0x00007f7570561786: mov    %r10,0x28(%rsp)
  0x00007f757056178b: mov    %r11,0x20(%rsp)
  0x00007f7570561790: mov    %r12,0x18(%rsp)
  0x00007f7570561795: mov    %r13,0x10(%rsp)
  0x00007f757056179a: mov    %r14,0x8(%rsp)
  0x00007f757056179f: mov    %r15,(%rsp)
  0x00007f75705617a3: movabs $0x7f75856f340f,%rdi
  0x00007f75705617ad: movabs $0x7f757056174d,%rsi
  0x00007f75705617b7: mov    %rsp,%rdx
  0x00007f75705617ba: and    $0xfffffffffffffff0,%rsp
  0x00007f75705617be: callq  0x00007f75853729fa
  0x00007f75705617c3: hlt    
  0x00007f75705617c4: add    $0x150,%rsp
  0x00007f75705617cb: mov    (%rsp),%r15
  0x00007f75705617cf: mov    0x8(%rsp),%r14
  0x00007f75705617d4: mov    0x10(%rsp),%r13
  0x00007f75705617d9: mov    0x18(%rsp),%r12
  0x00007f75705617de: mov    0x20(%rsp),%r11
  0x00007f75705617e3: mov    0x28(%rsp),%r10
  0x00007f75705617e8: mov    0x30(%rsp),%r9
  0x00007f75705617ed: mov    0x38(%rsp),%r8
  0x00007f75705617f2: mov    0x40(%rsp),%rdi
  0x00007f75705617f7: mov    0x48(%rsp),%rsi
  0x00007f75705617fc: mov    0x50(%rsp),%rbp
  0x00007f7570561801: mov    0x60(%rsp),%rbx
  0x00007f7570561806: mov    0x68(%rsp),%rdx
  0x00007f757056180b: mov    0x70(%rsp),%rcx
  0x00007f7570561810: add    $0x80,%rsp
  0x00007f7570561817: leaveq 
  0x00007f7570561818: retq   
  0x00007f7570561819: nop
  0x00007f757056181a: nop
  0x00007f757056181b: nop
  0x00007f757056181c: nop
  0x00007f757056181d: nop
  0x00007f757056181e: nop
  0x00007f757056181f: nop

Decoding RuntimeStub - _new_array_Java 0x00007f757046f4d0
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f757046f520: sub    $0x8,%rsp
  0x00007f757046f527: mov    %rbp,(%rsp)
  0x00007f757046f52b: mov    %rsp,0x200(%r15)
  0x00007f757046f532: mov    %rsi,%rdi
  0x00007f757046f535: mov    %edx,%esi
  0x00007f757046f537: mov    %r15,%rdx
  0x00007f757046f53a: movabs $0x7f758550e9b4,%r10
  0x00007f757046f544: callq  *%r10
  0x00007f757046f547: mov    %r12,0x200(%r15)
  0x00007f757046f54e: mov    %r12,0x208(%r15)
  0x00007f757046f555: mov    0x260(%r15),%rax
  0x00007f757046f55c: mov    %r12,0x260(%r15)
  0x00007f757046f563: cmp    0x8(%r15),%r12
  0x00007f757046f567: jne    0x00007f757046f56b
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f757046f569: pop    %rbp
  0x00007f757046f56a: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f757046f56b: movabs $0x7f7570369420,%r10
  0x00007f757046f575: xor    %ebx,%ebx
  0x00007f757046f577: pop    %rbp
  0x00007f757046f578: jmpq   *%r10
  0x00007f757046f57b: hlt    
  0x00007f757046f57c: hlt    
  0x00007f757046f57d: hlt    
  0x00007f757046f57e: hlt    
  0x00007f757046f57f: hlt    

AHE@0x00007f758012cf60: 0xbbbbbbb0 i2c: 0x00007f757055e120 c2i: 0x00007f757055e27b c2iUV: 0x00007f757055e24e
i2c argument handler #112 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (645 bytes generated)
c2i argument handler starts at 0x7f757055e27b
  0x00007f757055e120: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757055e124: movabs $0x7f757036e3e0,%r11
  0x00007f757055e12e: cmp    %r11,%rax
  0x00007f757055e131: jbe    0x00007f757055e14a
  0x00007f757055e137: movabs $0x7f757046e3e0,%r11
  0x00007f757055e141: cmp    %r11,%rax
  0x00007f757055e144: jb     0x00007f757055e20d
  0x00007f757055e14a: movabs $0x7f7570369420,%r11
  0x00007f757055e154: cmp    %r11,%rax
  0x00007f757055e157: jbe    0x00007f757055e170
  0x00007f757055e15d: movabs $0x7f757036de58,%r11
  0x00007f757055e167: cmp    %r11,%rax
  0x00007f757055e16a: jb     0x00007f757055e20d
  0x00007f757055e170: movabs $0x7f75704a9820,%r11
  0x00007f757055e17a: cmp    %r11,%rax
  0x00007f757055e17d: jbe    0x00007f757055e196
  0x00007f757055e183: movabs $0x7f75704af5e0,%r11
  0x00007f757055e18d: cmp    %r11,%rax
  0x00007f757055e190: jb     0x00007f757055e20d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757055e196: mov    %rsp,-0x28(%rsp)
  0x00007f757055e19b: sub    $0x80,%rsp
  0x00007f757055e1a2: mov    %rax,0x78(%rsp)
  0x00007f757055e1a7: mov    %rcx,0x70(%rsp)
  0x00007f757055e1ac: mov    %rdx,0x68(%rsp)
  0x00007f757055e1b1: mov    %rbx,0x60(%rsp)
  0x00007f757055e1b6: mov    %rbp,0x50(%rsp)
  0x00007f757055e1bb: mov    %rsi,0x48(%rsp)
  0x00007f757055e1c0: mov    %rdi,0x40(%rsp)
  0x00007f757055e1c5: mov    %r8,0x38(%rsp)
  0x00007f757055e1ca: mov    %r9,0x30(%rsp)
  0x00007f757055e1cf: mov    %r10,0x28(%rsp)
  0x00007f757055e1d4: mov    %r11,0x20(%rsp)
  0x00007f757055e1d9: mov    %r12,0x18(%rsp)
  0x00007f757055e1de: mov    %r13,0x10(%rsp)
  0x00007f757055e1e3: mov    %r14,0x8(%rsp)
  0x00007f757055e1e8: mov    %r15,(%rsp)
  0x00007f757055e1ec: movabs $0x7f758592f470,%rdi
  0x00007f757055e1f6: movabs $0x7f757055e196,%rsi
  0x00007f757055e200: mov    %rsp,%rdx
  0x00007f757055e203: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e207: callq  0x00007f75853729fa
  0x00007f757055e20c: hlt    
  ;; } verify_i2ce 
  0x00007f757055e20d: mov    %rsp,%r11
  0x00007f757055e210: sub    $0x10,%rsp
  0x00007f757055e214: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e218: push   %rax
  0x00007f757055e219: mov    %r11,%rax
  0x00007f757055e21c: mov    0x50(%rbx),%r11
  0x00007f757055e220: mov    0x38(%rax),%rsi
  0x00007f757055e224: mov    0x30(%rax),%rdx
  0x00007f757055e228: mov    0x28(%rax),%rcx
  0x00007f757055e22c: mov    0x20(%rax),%r8
  0x00007f757055e230: mov    0x18(%rax),%r9
  0x00007f757055e234: mov    0x10(%rax),%rdi
  0x00007f757055e238: mov    0x8(%rax),%r13
  0x00007f757055e23c: mov    %r13,0x8(%rsp)
  0x00007f757055e241: mov    %rbx,0x258(%r15)
  0x00007f757055e248: mov    %rbx,%rax
  0x00007f757055e24b: jmpq   *%r11
  0x00007f757055e24e: mov    0x8(%rsi),%ebx
  0x00007f757055e251: shl    $0x3,%rbx
  0x00007f757055e255: cmp    0x10(%rax),%rbx
  0x00007f757055e259: mov    0x8(%rax),%rbx
  0x00007f757055e25d: je     0x00007f757055e268
  0x00007f757055e263: jmpq   0x00007f757046ec40
  0x00007f757055e268: cmpq   $0x0,0x58(%rbx)
  0x00007f757055e270: je     0x00007f757055e36b
  0x00007f757055e276: jmpq   0x00007f757046ec40
  0x00007f757055e27b: cmpq   $0x0,0x58(%rbx)
  0x00007f757055e283: je     0x00007f757055e36b
  0x00007f757055e289: mov    %rsp,%r13
  0x00007f757055e28c: mov    (%rsp),%rax
  0x00007f757055e290: and    $0xfffffffffffffff0,%rsp
  0x00007f757055e294: pushfq 
  0x00007f757055e295: sub    $0x8,%rsp
  0x00007f757055e299: mov    %rsp,-0x28(%rsp)
  0x00007f757055e29e: sub    $0x80,%rsp
  0x00007f757055e2a5: mov    %rax,0x78(%rsp)
  0x00007f757055e2aa: mov    %rcx,0x70(%rsp)
  0x00007f757055e2af: mov    %rdx,0x68(%rsp)
  0x00007f757055e2b4: mov    %rbx,0x60(%rsp)
  0x00007f757055e2b9: mov    %rbp,0x50(%rsp)
  0x00007f757055e2be: mov    %rsi,0x48(%rsp)
  0x00007f757055e2c3: mov    %rdi,0x40(%rsp)
  0x00007f757055e2c8: mov    %r8,0x38(%rsp)
  0x00007f757055e2cd: mov    %r9,0x30(%rsp)
  0x00007f757055e2d2: mov    %r10,0x28(%rsp)
  0x00007f757055e2d7: mov    %r11,0x20(%rsp)
  0x00007f757055e2dc: mov    %r12,0x18(%rsp)
  0x00007f757055e2e1: mov    %r13,0x10(%rsp)
  0x00007f757055e2e6: mov    %r14,0x8(%rsp)
  0x00007f757055e2eb: mov    %r15,(%rsp)
  0x00007f757055e2ef: sub    $0x200,%rsp
  0x00007f757055e2f6: fxsave64 (%rsp)
  0x00007f757055e2fb: mov    %rbx,%rdi
  0x00007f757055e2fe: mov    %rax,%rsi
  0x00007f757055e301: callq  0x00007f7585522bca
  0x00007f757055e306: fxrstor64 (%rsp)
  0x00007f757055e30b: add    $0x200,%rsp
  0x00007f757055e312: mov    (%rsp),%r15
  0x00007f757055e316: mov    0x8(%rsp),%r14
  0x00007f757055e31b: mov    0x10(%rsp),%r13
  0x00007f757055e320: mov    0x18(%rsp),%r12
  0x00007f757055e325: mov    0x20(%rsp),%r11
  0x00007f757055e32a: mov    0x28(%rsp),%r10
  0x00007f757055e32f: mov    0x30(%rsp),%r9
  0x00007f757055e334: mov    0x38(%rsp),%r8
  0x00007f757055e339: mov    0x40(%rsp),%rdi
  0x00007f757055e33e: mov    0x48(%rsp),%rsi
  0x00007f757055e343: mov    0x50(%rsp),%rbp
  0x00007f757055e348: mov    0x60(%rsp),%rbx
  0x00007f757055e34d: mov    0x68(%rsp),%rdx
  0x00007f757055e352: mov    0x70(%rsp),%rcx
  0x00007f757055e357: mov    0x78(%rsp),%rax
  0x00007f757055e35c: add    $0x80,%rsp
  0x00007f757055e363: add    $0x8,%rsp
  0x00007f757055e367: popfq  
  0x00007f757055e368: mov    %r13,%rsp
  0x00007f757055e36b: pop    %rax
  0x00007f757055e36c: mov    %rsp,%r13
  0x00007f757055e36f: sub    $0x40,%rsp
  0x00007f757055e373: mov    %rax,(%rsp)
  0x00007f757055e377: mov    %rsi,0x38(%rsp)
  0x00007f757055e37c: mov    %rdx,0x30(%rsp)
  0x00007f757055e381: mov    %rcx,0x28(%rsp)
  0x00007f757055e386: mov    %r8,0x20(%rsp)
  0x00007f757055e38b: mov    %r9,0x18(%rsp)
  0x00007f757055e390: mov    %rdi,0x10(%rsp)
  0x00007f757055e395: mov    0x40(%rsp),%rax
  0x00007f757055e39a: mov    %rax,0x8(%rsp)
  0x00007f757055e39f: mov    0x40(%rbx),%rcx
  0x00007f757055e3a3: jmpq   *%rcx

AHE@0x00007f758012cfa8: 0xbbbbbbbb i2c: 0x00007f757055bce0 c2i: 0x00007f757055be44 c2iUV: 0x00007f757055be17
i2c argument handler #113 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (664 bytes generated)
c2i argument handler starts at 0x7f757055be44
  0x00007f757055bce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757055bce4: movabs $0x7f757036e3e0,%r11
  0x00007f757055bcee: cmp    %r11,%rax
  0x00007f757055bcf1: jbe    0x00007f757055bd0a
  0x00007f757055bcf7: movabs $0x7f757046e3e0,%r11
  0x00007f757055bd01: cmp    %r11,%rax
  0x00007f757055bd04: jb     0x00007f757055bdcd
  0x00007f757055bd0a: movabs $0x7f7570369420,%r11
  0x00007f757055bd14: cmp    %r11,%rax
  0x00007f757055bd17: jbe    0x00007f757055bd30
  0x00007f757055bd1d: movabs $0x7f757036de58,%r11
  0x00007f757055bd27: cmp    %r11,%rax
  0x00007f757055bd2a: jb     0x00007f757055bdcd
  0x00007f757055bd30: movabs $0x7f75704a9820,%r11
  0x00007f757055bd3a: cmp    %r11,%rax
  0x00007f757055bd3d: jbe    0x00007f757055bd56
  0x00007f757055bd43: movabs $0x7f75704af5e0,%r11
  0x00007f757055bd4d: cmp    %r11,%rax
  0x00007f757055bd50: jb     0x00007f757055bdcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f757055bd56: mov    %rsp,-0x28(%rsp)
  0x00007f757055bd5b: sub    $0x80,%rsp
  0x00007f757055bd62: mov    %rax,0x78(%rsp)
  0x00007f757055bd67: mov    %rcx,0x70(%rsp)
  0x00007f757055bd6c: mov    %rdx,0x68(%rsp)
  0x00007f757055bd71: mov    %rbx,0x60(%rsp)
  0x00007f757055bd76: mov    %rbp,0x50(%rsp)
  0x00007f757055bd7b: mov    %rsi,0x48(%rsp)
  0x00007f757055bd80: mov    %rdi,0x40(%rsp)
  0x00007f757055bd85: mov    %r8,0x38(%rsp)
  0x00007f757055bd8a: mov    %r9,0x30(%rsp)
  0x00007f757055bd8f: mov    %r10,0x28(%rsp)
  0x00007f757055bd94: mov    %r11,0x20(%rsp)
  0x00007f757055bd99: mov    %r12,0x18(%rsp)
  0x00007f757055bd9e: mov    %r13,0x10(%rsp)
  0x00007f757055bda3: mov    %r14,0x8(%rsp)
  0x00007f757055bda8: mov    %r15,(%rsp)
  0x00007f757055bdac: movabs $0x7f758592f470,%rdi
  0x00007f757055bdb6: movabs $0x7f757055bd56,%rsi
  0x00007f757055bdc0: mov    %rsp,%rdx
  0x00007f757055bdc3: and    $0xfffffffffffffff0,%rsp
  0x00007f757055bdc7: callq  0x00007f75853729fa
  0x00007f757055bdcc: hlt    
  ;; } verify_i2ce 
  0x00007f757055bdcd: mov    %rsp,%r11
  0x00007f757055bdd0: sub    $0x10,%rsp
  0x00007f757055bdd4: and    $0xfffffffffffffff0,%rsp
  0x00007f757055bdd8: push   %rax
  0x00007f757055bdd9: mov    %r11,%rax
  0x00007f757055bddc: mov    0x50(%rbx),%r11
  0x00007f757055bde0: mov    0x40(%rax),%rsi
  0x00007f757055bde4: mov    0x38(%rax),%rdx
  0x00007f757055bde8: mov    0x30(%rax),%rcx
  0x00007f757055bdec: mov    0x28(%rax),%r8
  0x00007f757055bdf0: mov    0x20(%rax),%r9
  0x00007f757055bdf4: mov    0x18(%rax),%rdi
  0x00007f757055bdf8: mov    0x10(%rax),%r13
  0x00007f757055bdfc: mov    %r13,0x8(%rsp)
  0x00007f757055be01: mov    0x8(%rax),%r13
  0x00007f757055be05: mov    %r13,0x10(%rsp)
  0x00007f757055be0a: mov    %rbx,0x258(%r15)
  0x00007f757055be11: mov    %rbx,%rax
  0x00007f757055be14: jmpq   *%r11
  0x00007f757055be17: mov    0x8(%rsi),%ebx
  0x00007f757055be1a: shl    $0x3,%rbx
  0x00007f757055be1e: cmp    0x10(%rax),%rbx
  0x00007f757055be22: mov    0x8(%rax),%rbx
  0x00007f757055be26: je     0x00007f757055be31
  0x00007f757055be2c: jmpq   0x00007f757046ec40
  0x00007f757055be31: cmpq   $0x0,0x58(%rbx)
  0x00007f757055be39: je     0x00007f757055bf34
  0x00007f757055be3f: jmpq   0x00007f757046ec40
  0x00007f757055be44: cmpq   $0x0,0x58(%rbx)
  0x00007f757055be4c: je     0x00007f757055bf34
  0x00007f757055be52: mov    %rsp,%r13
  0x00007f757055be55: mov    (%rsp),%rax
  0x00007f757055be59: and    $0xfffffffffffffff0,%rsp
  0x00007f757055be5d: pushfq 
  0x00007f757055be5e: sub    $0x8,%rsp
  0x00007f757055be62: mov    %rsp,-0x28(%rsp)
  0x00007f757055be67: sub    $0x80,%rsp
  0x00007f757055be6e: mov    %rax,0x78(%rsp)
  0x00007f757055be73: mov    %rcx,0x70(%rsp)
  0x00007f757055be78: mov    %rdx,0x68(%rsp)
  0x00007f757055be7d: mov    %rbx,0x60(%rsp)
  0x00007f757055be82: mov    %rbp,0x50(%rsp)
  0x00007f757055be87: mov    %rsi,0x48(%rsp)
  0x00007f757055be8c: mov    %rdi,0x40(%rsp)
  0x00007f757055be91: mov    %r8,0x38(%rsp)
  0x00007f757055be96: mov    %r9,0x30(%rsp)
  0x00007f757055be9b: mov    %r10,0x28(%rsp)
  0x00007f757055bea0: mov    %r11,0x20(%rsp)
  0x00007f757055bea5: mov    %r12,0x18(%rsp)
  0x00007f757055beaa: mov    %r13,0x10(%rsp)
  0x00007f757055beaf: mov    %r14,0x8(%rsp)
  0x00007f757055beb4: mov    %r15,(%rsp)
  0x00007f757055beb8: sub    $0x200,%rsp
  0x00007f757055bebf: fxsave64 (%rsp)
  0x00007f757055bec4: mov    %rbx,%rdi
  0x00007f757055bec7: mov    %rax,%rsi
  0x00007f757055beca: callq  0x00007f7585522bca
  0x00007f757055becf: fxrstor64 (%rsp)
  0x00007f757055bed4: add    $0x200,%rsp
  0x00007f757055bedb: mov    (%rsp),%r15
  0x00007f757055bedf: mov    0x8(%rsp),%r14
  0x00007f757055bee4: mov    0x10(%rsp),%r13
  0x00007f757055bee9: mov    0x18(%rsp),%r12
  0x00007f757055beee: mov    0x20(%rsp),%r11
  0x00007f757055bef3: mov    0x28(%rsp),%r10
  0x00007f757055bef8: mov    0x30(%rsp),%r9
  0x00007f757055befd: mov    0x38(%rsp),%r8
  0x00007f757055bf02: mov    0x40(%rsp),%rdi
  0x00007f757055bf07: mov    0x48(%rsp),%rsi
  0x00007f757055bf0c: mov    0x50(%rsp),%rbp
  0x00007f757055bf11: mov    0x60(%rsp),%rbx
  0x00007f757055bf16: mov    0x68(%rsp),%rdx
  0x00007f757055bf1b: mov    0x70(%rsp),%rcx
  0x00007f757055bf20: mov    0x78(%rsp),%rax
  0x00007f757055bf25: add    $0x80,%rsp
  0x00007f757055bf2c: add    $0x8,%rsp
  0x00007f757055bf30: popfq  
  0x00007f757055bf31: mov    %r13,%rsp
  0x00007f757055bf34: pop    %rax
  0x00007f757055bf35: mov    %rsp,%r13
  0x00007f757055bf38: sub    $0x50,%rsp
  0x00007f757055bf3c: mov    %rax,(%rsp)
  0x00007f757055bf40: mov    %rsi,0x40(%rsp)
  0x00007f757055bf45: mov    %rdx,0x38(%rsp)
  0x00007f757055bf4a: mov    %rcx,0x30(%rsp)
  0x00007f757055bf4f: mov    %r8,0x28(%rsp)
  0x00007f757055bf54: mov    %r9,0x20(%rsp)
  0x00007f757055bf59: mov    %rdi,0x18(%rsp)
  0x00007f757055bf5e: mov    0x50(%rsp),%rax
  0x00007f757055bf63: mov    %rax,0x10(%rsp)
  0x00007f757055bf68: mov    0x58(%rsp),%rax
  0x00007f757055bf6d: mov    %rax,0x8(%rsp)
  0x00007f757055bf72: mov    0x40(%rbx),%rcx
  0x00007f757055bf76: jmpq   *%rcx

AHE@0x00007f758012cff0: 0xbbbbbbbbbb000000 i2c: 0x00007f75705622a0 c2i: 0x00007f7570562416 c2iUV: 0x00007f75705623e9
i2c argument handler #114 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (702 bytes generated)
c2i argument handler starts at 0x7f7570562416
  0x00007f75705622a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705622a4: movabs $0x7f757036e3e0,%r11
  0x00007f75705622ae: cmp    %r11,%rax
  0x00007f75705622b1: jbe    0x00007f75705622ca
  0x00007f75705622b7: movabs $0x7f757046e3e0,%r11
  0x00007f75705622c1: cmp    %r11,%rax
  0x00007f75705622c4: jb     0x00007f757056238d
  0x00007f75705622ca: movabs $0x7f7570369420,%r11
  0x00007f75705622d4: cmp    %r11,%rax
  0x00007f75705622d7: jbe    0x00007f75705622f0
  0x00007f75705622dd: movabs $0x7f757036de58,%r11
  0x00007f75705622e7: cmp    %r11,%rax
  0x00007f75705622ea: jb     0x00007f757056238d
  0x00007f75705622f0: movabs $0x7f75704a9820,%r11
  0x00007f75705622fa: cmp    %r11,%rax
  0x00007f75705622fd: jbe    0x00007f7570562316
  0x00007f7570562303: movabs $0x7f75704af5e0,%r11
  0x00007f757056230d: cmp    %r11,%rax
  0x00007f7570562310: jb     0x00007f757056238d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570562316: mov    %rsp,-0x28(%rsp)
  0x00007f757056231b: sub    $0x80,%rsp
  0x00007f7570562322: mov    %rax,0x78(%rsp)
  0x00007f7570562327: mov    %rcx,0x70(%rsp)
  0x00007f757056232c: mov    %rdx,0x68(%rsp)
  0x00007f7570562331: mov    %rbx,0x60(%rsp)
  0x00007f7570562336: mov    %rbp,0x50(%rsp)
  0x00007f757056233b: mov    %rsi,0x48(%rsp)
  0x00007f7570562340: mov    %rdi,0x40(%rsp)
  0x00007f7570562345: mov    %r8,0x38(%rsp)
  0x00007f757056234a: mov    %r9,0x30(%rsp)
  0x00007f757056234f: mov    %r10,0x28(%rsp)
  0x00007f7570562354: mov    %r11,0x20(%rsp)
  0x00007f7570562359: mov    %r12,0x18(%rsp)
  0x00007f757056235e: mov    %r13,0x10(%rsp)
  0x00007f7570562363: mov    %r14,0x8(%rsp)
  0x00007f7570562368: mov    %r15,(%rsp)
  0x00007f757056236c: movabs $0x7f758592f470,%rdi
  0x00007f7570562376: movabs $0x7f7570562316,%rsi
  0x00007f7570562380: mov    %rsp,%rdx
  0x00007f7570562383: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562387: callq  0x00007f75853729fa
  0x00007f757056238c: hlt    
  ;; } verify_i2ce 
  0x00007f757056238d: mov    %rsp,%r11
  0x00007f7570562390: sub    $0x20,%rsp
  0x00007f7570562394: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562398: push   %rax
  0x00007f7570562399: mov    %r11,%rax
  0x00007f757056239c: mov    0x50(%rbx),%r11
  0x00007f75705623a0: mov    0x50(%rax),%rsi
  0x00007f75705623a4: mov    0x48(%rax),%rdx
  0x00007f75705623a8: mov    0x40(%rax),%rcx
  0x00007f75705623ac: mov    0x38(%rax),%r8
  0x00007f75705623b0: mov    0x30(%rax),%r9
  0x00007f75705623b4: mov    0x28(%rax),%rdi
  0x00007f75705623b8: mov    0x20(%rax),%r13
  0x00007f75705623bc: mov    %r13,0x8(%rsp)
  0x00007f75705623c1: mov    0x18(%rax),%r13
  0x00007f75705623c5: mov    %r13,0x10(%rsp)
  0x00007f75705623ca: mov    0x10(%rax),%r13
  0x00007f75705623ce: mov    %r13,0x18(%rsp)
  0x00007f75705623d3: mov    0x8(%rax),%r13
  0x00007f75705623d7: mov    %r13,0x20(%rsp)
  0x00007f75705623dc: mov    %rbx,0x258(%r15)
  0x00007f75705623e3: mov    %rbx,%rax
  0x00007f75705623e6: jmpq   *%r11
  0x00007f75705623e9: mov    0x8(%rsi),%ebx
  0x00007f75705623ec: shl    $0x3,%rbx
  0x00007f75705623f0: cmp    0x10(%rax),%rbx
  0x00007f75705623f4: mov    0x8(%rax),%rbx
  0x00007f75705623f8: je     0x00007f7570562403
  0x00007f75705623fe: jmpq   0x00007f757046ec40
  0x00007f7570562403: cmpq   $0x0,0x58(%rbx)
  0x00007f757056240b: je     0x00007f7570562506
  0x00007f7570562411: jmpq   0x00007f757046ec40
  0x00007f7570562416: cmpq   $0x0,0x58(%rbx)
  0x00007f757056241e: je     0x00007f7570562506
  0x00007f7570562424: mov    %rsp,%r13
  0x00007f7570562427: mov    (%rsp),%rax
  0x00007f757056242b: and    $0xfffffffffffffff0,%rsp
  0x00007f757056242f: pushfq 
  0x00007f7570562430: sub    $0x8,%rsp
  0x00007f7570562434: mov    %rsp,-0x28(%rsp)
  0x00007f7570562439: sub    $0x80,%rsp
  0x00007f7570562440: mov    %rax,0x78(%rsp)
  0x00007f7570562445: mov    %rcx,0x70(%rsp)
  0x00007f757056244a: mov    %rdx,0x68(%rsp)
  0x00007f757056244f: mov    %rbx,0x60(%rsp)
  0x00007f7570562454: mov    %rbp,0x50(%rsp)
  0x00007f7570562459: mov    %rsi,0x48(%rsp)
  0x00007f757056245e: mov    %rdi,0x40(%rsp)
  0x00007f7570562463: mov    %r8,0x38(%rsp)
  0x00007f7570562468: mov    %r9,0x30(%rsp)
  0x00007f757056246d: mov    %r10,0x28(%rsp)
  0x00007f7570562472: mov    %r11,0x20(%rsp)
  0x00007f7570562477: mov    %r12,0x18(%rsp)
  0x00007f757056247c: mov    %r13,0x10(%rsp)
  0x00007f7570562481: mov    %r14,0x8(%rsp)
  0x00007f7570562486: mov    %r15,(%rsp)
  0x00007f757056248a: sub    $0x200,%rsp
  0x00007f7570562491: fxsave64 (%rsp)
  0x00007f7570562496: mov    %rbx,%rdi
  0x00007f7570562499: mov    %rax,%rsi
  0x00007f757056249c: callq  0x00007f7585522bca
  0x00007f75705624a1: fxrstor64 (%rsp)
  0x00007f75705624a6: add    $0x200,%rsp
  0x00007f75705624ad: mov    (%rsp),%r15
  0x00007f75705624b1: mov    0x8(%rsp),%r14
  0x00007f75705624b6: mov    0x10(%rsp),%r13
  0x00007f75705624bb: mov    0x18(%rsp),%r12
  0x00007f75705624c0: mov    0x20(%rsp),%r11
  0x00007f75705624c5: mov    0x28(%rsp),%r10
  0x00007f75705624ca: mov    0x30(%rsp),%r9
  0x00007f75705624cf: mov    0x38(%rsp),%r8
  0x00007f75705624d4: mov    0x40(%rsp),%rdi
  0x00007f75705624d9: mov    0x48(%rsp),%rsi
  0x00007f75705624de: mov    0x50(%rsp),%rbp
  0x00007f75705624e3: mov    0x60(%rsp),%rbx
  0x00007f75705624e8: mov    0x68(%rsp),%rdx
  0x00007f75705624ed: mov    0x70(%rsp),%rcx
  0x00007f75705624f2: mov    0x78(%rsp),%rax
  0x00007f75705624f7: add    $0x80,%rsp
  0x00007f75705624fe: add    $0x8,%rsp
  0x00007f7570562502: popfq  
  0x00007f7570562503: mov    %r13,%rsp
  0x00007f7570562506: pop    %rax
  0x00007f7570562507: mov    %rsp,%r13
  0x00007f757056250a: sub    $0x60,%rsp
  0x00007f757056250e: mov    %rax,(%rsp)
  0x00007f7570562512: mov    %rsi,0x50(%rsp)
  0x00007f7570562517: mov    %rdx,0x48(%rsp)
  0x00007f757056251c: mov    %rcx,0x40(%rsp)
  0x00007f7570562521: mov    %r8,0x38(%rsp)
  0x00007f7570562526: mov    %r9,0x30(%rsp)
  0x00007f757056252b: mov    %rdi,0x28(%rsp)
  0x00007f7570562530: mov    0x60(%rsp),%rax
  0x00007f7570562535: mov    %rax,0x20(%rsp)
  0x00007f757056253a: mov    0x68(%rsp),%rax
  0x00007f757056253f: mov    %rax,0x18(%rsp)
  0x00007f7570562544: mov    0x70(%rsp),%rax
  0x00007f7570562549: mov    %rax,0x10(%rsp)
  0x00007f757056254e: mov    0x78(%rsp),%rax
  0x00007f7570562553: mov    %rax,0x8(%rsp)
  0x00007f7570562558: mov    0x40(%rbx),%rcx
  0x00007f757056255c: jmpq   *%rcx

AHE@0x00007f758012d038: 0xbbbbbbbbbbbb0000 i2c: 0x00007f7570562620 c2i: 0x00007f75705627a8 c2iUV: 0x00007f757056277b
i2c argument handler #115 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (752 bytes generated)
c2i argument handler starts at 0x7f75705627a8
  0x00007f7570562620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570562624: movabs $0x7f757036e3e0,%r11
  0x00007f757056262e: cmp    %r11,%rax
  0x00007f7570562631: jbe    0x00007f757056264a
  0x00007f7570562637: movabs $0x7f757046e3e0,%r11
  0x00007f7570562641: cmp    %r11,%rax
  0x00007f7570562644: jb     0x00007f757056270d
  0x00007f757056264a: movabs $0x7f7570369420,%r11
  0x00007f7570562654: cmp    %r11,%rax
  0x00007f7570562657: jbe    0x00007f7570562670
  0x00007f757056265d: movabs $0x7f757036de58,%r11
  0x00007f7570562667: cmp    %r11,%rax
  0x00007f757056266a: jb     0x00007f757056270d
  0x00007f7570562670: movabs $0x7f75704a9820,%r11
  0x00007f757056267a: cmp    %r11,%rax
  0x00007f757056267d: jbe    0x00007f7570562696
  0x00007f7570562683: movabs $0x7f75704af5e0,%r11
  0x00007f757056268d: cmp    %r11,%rax
  0x00007f7570562690: jb     0x00007f757056270d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570562696: mov    %rsp,-0x28(%rsp)
  0x00007f757056269b: sub    $0x80,%rsp
  0x00007f75705626a2: mov    %rax,0x78(%rsp)
  0x00007f75705626a7: mov    %rcx,0x70(%rsp)
  0x00007f75705626ac: mov    %rdx,0x68(%rsp)
  0x00007f75705626b1: mov    %rbx,0x60(%rsp)
  0x00007f75705626b6: mov    %rbp,0x50(%rsp)
  0x00007f75705626bb: mov    %rsi,0x48(%rsp)
  0x00007f75705626c0: mov    %rdi,0x40(%rsp)
  0x00007f75705626c5: mov    %r8,0x38(%rsp)
  0x00007f75705626ca: mov    %r9,0x30(%rsp)
  0x00007f75705626cf: mov    %r10,0x28(%rsp)
  0x00007f75705626d4: mov    %r11,0x20(%rsp)
  0x00007f75705626d9: mov    %r12,0x18(%rsp)
  0x00007f75705626de: mov    %r13,0x10(%rsp)
  0x00007f75705626e3: mov    %r14,0x8(%rsp)
  0x00007f75705626e8: mov    %r15,(%rsp)
  0x00007f75705626ec: movabs $0x7f758592f470,%rdi
  0x00007f75705626f6: movabs $0x7f7570562696,%rsi
  0x00007f7570562700: mov    %rsp,%rdx
  0x00007f7570562703: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562707: callq  0x00007f75853729fa
  0x00007f757056270c: hlt    
  ;; } verify_i2ce 
  0x00007f757056270d: mov    %rsp,%r11
  0x00007f7570562710: sub    $0x30,%rsp
  0x00007f7570562714: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562718: push   %rax
  0x00007f7570562719: mov    %r11,%rax
  0x00007f757056271c: mov    0x50(%rbx),%r11
  0x00007f7570562720: mov    0x60(%rax),%rsi
  0x00007f7570562724: mov    0x58(%rax),%rdx
  0x00007f7570562728: mov    0x50(%rax),%rcx
  0x00007f757056272c: mov    0x48(%rax),%r8
  0x00007f7570562730: mov    0x40(%rax),%r9
  0x00007f7570562734: mov    0x38(%rax),%rdi
  0x00007f7570562738: mov    0x30(%rax),%r13
  0x00007f757056273c: mov    %r13,0x8(%rsp)
  0x00007f7570562741: mov    0x28(%rax),%r13
  0x00007f7570562745: mov    %r13,0x10(%rsp)
  0x00007f757056274a: mov    0x20(%rax),%r13
  0x00007f757056274e: mov    %r13,0x18(%rsp)
  0x00007f7570562753: mov    0x18(%rax),%r13
  0x00007f7570562757: mov    %r13,0x20(%rsp)
  0x00007f757056275c: mov    0x10(%rax),%r13
  0x00007f7570562760: mov    %r13,0x28(%rsp)
  0x00007f7570562765: mov    0x8(%rax),%r13
  0x00007f7570562769: mov    %r13,0x30(%rsp)
  0x00007f757056276e: mov    %rbx,0x258(%r15)
  0x00007f7570562775: mov    %rbx,%rax
  0x00007f7570562778: jmpq   *%r11
  0x00007f757056277b: mov    0x8(%rsi),%ebx
  0x00007f757056277e: shl    $0x3,%rbx
  0x00007f7570562782: cmp    0x10(%rax),%rbx
  0x00007f7570562786: mov    0x8(%rax),%rbx
  0x00007f757056278a: je     0x00007f7570562795
  0x00007f7570562790: jmpq   0x00007f757046ec40
  0x00007f7570562795: cmpq   $0x0,0x58(%rbx)
  0x00007f757056279d: je     0x00007f7570562898
  0x00007f75705627a3: jmpq   0x00007f757046ec40
  0x00007f75705627a8: cmpq   $0x0,0x58(%rbx)
  0x00007f75705627b0: je     0x00007f7570562898
  0x00007f75705627b6: mov    %rsp,%r13
  0x00007f75705627b9: mov    (%rsp),%rax
  0x00007f75705627bd: and    $0xfffffffffffffff0,%rsp
  0x00007f75705627c1: pushfq 
  0x00007f75705627c2: sub    $0x8,%rsp
  0x00007f75705627c6: mov    %rsp,-0x28(%rsp)
  0x00007f75705627cb: sub    $0x80,%rsp
  0x00007f75705627d2: mov    %rax,0x78(%rsp)
  0x00007f75705627d7: mov    %rcx,0x70(%rsp)
  0x00007f75705627dc: mov    %rdx,0x68(%rsp)
  0x00007f75705627e1: mov    %rbx,0x60(%rsp)
  0x00007f75705627e6: mov    %rbp,0x50(%rsp)
  0x00007f75705627eb: mov    %rsi,0x48(%rsp)
  0x00007f75705627f0: mov    %rdi,0x40(%rsp)
  0x00007f75705627f5: mov    %r8,0x38(%rsp)
  0x00007f75705627fa: mov    %r9,0x30(%rsp)
  0x00007f75705627ff: mov    %r10,0x28(%rsp)
  0x00007f7570562804: mov    %r11,0x20(%rsp)
  0x00007f7570562809: mov    %r12,0x18(%rsp)
  0x00007f757056280e: mov    %r13,0x10(%rsp)
  0x00007f7570562813: mov    %r14,0x8(%rsp)
  0x00007f7570562818: mov    %r15,(%rsp)
  0x00007f757056281c: sub    $0x200,%rsp
  0x00007f7570562823: fxsave64 (%rsp)
  0x00007f7570562828: mov    %rbx,%rdi
  0x00007f757056282b: mov    %rax,%rsi
  0x00007f757056282e: callq  0x00007f7585522bca
  0x00007f7570562833: fxrstor64 (%rsp)
  0x00007f7570562838: add    $0x200,%rsp
  0x00007f757056283f: mov    (%rsp),%r15
  0x00007f7570562843: mov    0x8(%rsp),%r14
  0x00007f7570562848: mov    0x10(%rsp),%r13
  0x00007f757056284d: mov    0x18(%rsp),%r12
  0x00007f7570562852: mov    0x20(%rsp),%r11
  0x00007f7570562857: mov    0x28(%rsp),%r10
  0x00007f757056285c: mov    0x30(%rsp),%r9
  0x00007f7570562861: mov    0x38(%rsp),%r8
  0x00007f7570562866: mov    0x40(%rsp),%rdi
  0x00007f757056286b: mov    0x48(%rsp),%rsi
  0x00007f7570562870: mov    0x50(%rsp),%rbp
  0x00007f7570562875: mov    0x60(%rsp),%rbx
  0x00007f757056287a: mov    0x68(%rsp),%rdx
  0x00007f757056287f: mov    0x70(%rsp),%rcx
  0x00007f7570562884: mov    0x78(%rsp),%rax
  0x00007f7570562889: add    $0x80,%rsp
  0x00007f7570562890: add    $0x8,%rsp
  0x00007f7570562894: popfq  
  0x00007f7570562895: mov    %r13,%rsp
  0x00007f7570562898: pop    %rax
  0x00007f7570562899: mov    %rsp,%r13
  0x00007f757056289c: sub    $0x70,%rsp
  0x00007f75705628a0: mov    %rax,(%rsp)
  0x00007f75705628a4: mov    %rsi,0x60(%rsp)
  0x00007f75705628a9: mov    %rdx,0x58(%rsp)
  0x00007f75705628ae: mov    %rcx,0x50(%rsp)
  0x00007f75705628b3: mov    %r8,0x48(%rsp)
  0x00007f75705628b8: mov    %r9,0x40(%rsp)
  0x00007f75705628bd: mov    %rdi,0x38(%rsp)
  0x00007f75705628c2: mov    0x70(%rsp),%rax
  0x00007f75705628c7: mov    %rax,0x30(%rsp)
  0x00007f75705628cc: mov    0x78(%rsp),%rax
  0x00007f75705628d1: mov    %rax,0x28(%rsp)
  0x00007f75705628d6: mov    0x80(%rsp),%rax
  0x00007f75705628de: mov    %rax,0x20(%rsp)
  0x00007f75705628e3: mov    0x88(%rsp),%rax
  0x00007f75705628eb: mov    %rax,0x18(%rsp)
  0x00007f75705628f0: mov    0x90(%rsp),%rax
  0x00007f75705628f8: mov    %rax,0x10(%rsp)
  0x00007f75705628fd: mov    0x98(%rsp),%rax
  0x00007f7570562905: mov    %rax,0x8(%rsp)
  0x00007f757056290a: mov    0x40(%rbx),%rcx
  0x00007f757056290e: jmpq   *%rcx

AHE@0x00007f758012d080: 0xabb00000 i2c: 0x00007f75705629e0 c2i: 0x00007f7570562b21 c2iUV: 0x00007f7570562af4
i2c argument handler #116 for: static (ZLjava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/MethodHandle; (593 bytes generated)
c2i argument handler starts at 0x7f7570562b21
  0x00007f75705629e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705629e4: movabs $0x7f757036e3e0,%r11
  0x00007f75705629ee: cmp    %r11,%rax
  0x00007f75705629f1: jbe    0x00007f7570562a0a
  0x00007f75705629f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570562a01: cmp    %r11,%rax
  0x00007f7570562a04: jb     0x00007f7570562acd
  0x00007f7570562a0a: movabs $0x7f7570369420,%r11
  0x00007f7570562a14: cmp    %r11,%rax
  0x00007f7570562a17: jbe    0x00007f7570562a30
  0x00007f7570562a1d: movabs $0x7f757036de58,%r11
  0x00007f7570562a27: cmp    %r11,%rax
  0x00007f7570562a2a: jb     0x00007f7570562acd
  0x00007f7570562a30: movabs $0x7f75704a9820,%r11
  0x00007f7570562a3a: cmp    %r11,%rax
  0x00007f7570562a3d: jbe    0x00007f7570562a56
  0x00007f7570562a43: movabs $0x7f75704af5e0,%r11
  0x00007f7570562a4d: cmp    %r11,%rax
  0x00007f7570562a50: jb     0x00007f7570562acd
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570562a56: mov    %rsp,-0x28(%rsp)
  0x00007f7570562a5b: sub    $0x80,%rsp
  0x00007f7570562a62: mov    %rax,0x78(%rsp)
  0x00007f7570562a67: mov    %rcx,0x70(%rsp)
  0x00007f7570562a6c: mov    %rdx,0x68(%rsp)
  0x00007f7570562a71: mov    %rbx,0x60(%rsp)
  0x00007f7570562a76: mov    %rbp,0x50(%rsp)
  0x00007f7570562a7b: mov    %rsi,0x48(%rsp)
  0x00007f7570562a80: mov    %rdi,0x40(%rsp)
  0x00007f7570562a85: mov    %r8,0x38(%rsp)
  0x00007f7570562a8a: mov    %r9,0x30(%rsp)
  0x00007f7570562a8f: mov    %r10,0x28(%rsp)
  0x00007f7570562a94: mov    %r11,0x20(%rsp)
  0x00007f7570562a99: mov    %r12,0x18(%rsp)
  0x00007f7570562a9e: mov    %r13,0x10(%rsp)
  0x00007f7570562aa3: mov    %r14,0x8(%rsp)
  0x00007f7570562aa8: mov    %r15,(%rsp)
  0x00007f7570562aac: movabs $0x7f758592f470,%rdi
  0x00007f7570562ab6: movabs $0x7f7570562a56,%rsi
  0x00007f7570562ac0: mov    %rsp,%rdx
  0x00007f7570562ac3: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562ac7: callq  0x00007f75853729fa
  0x00007f7570562acc: hlt    
  ;; } verify_i2ce 
  0x00007f7570562acd: mov    %rsp,%r11
  0x00007f7570562ad0: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562ad4: push   %rax
  0x00007f7570562ad5: mov    %r11,%rax
  0x00007f7570562ad8: mov    0x50(%rbx),%r11
  0x00007f7570562adc: mov    0x18(%rax),%esi
  0x00007f7570562adf: mov    0x10(%rax),%rdx
  0x00007f7570562ae3: mov    0x8(%rax),%rcx
  0x00007f7570562ae7: mov    %rbx,0x258(%r15)
  0x00007f7570562aee: mov    %rbx,%rax
  0x00007f7570562af1: jmpq   *%r11
  0x00007f7570562af4: mov    0x8(%rsi),%ebx
  0x00007f7570562af7: shl    $0x3,%rbx
  0x00007f7570562afb: cmp    0x10(%rax),%rbx
  0x00007f7570562aff: mov    0x8(%rax),%rbx
  0x00007f7570562b03: je     0x00007f7570562b0e
  0x00007f7570562b09: jmpq   0x00007f757046ec40
  0x00007f7570562b0e: cmpq   $0x0,0x58(%rbx)
  0x00007f7570562b16: je     0x00007f7570562c11
  0x00007f7570562b1c: jmpq   0x00007f757046ec40
  0x00007f7570562b21: cmpq   $0x0,0x58(%rbx)
  0x00007f7570562b29: je     0x00007f7570562c11
  0x00007f7570562b2f: mov    %rsp,%r13
  0x00007f7570562b32: mov    (%rsp),%rax
  0x00007f7570562b36: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562b3a: pushfq 
  0x00007f7570562b3b: sub    $0x8,%rsp
  0x00007f7570562b3f: mov    %rsp,-0x28(%rsp)
  0x00007f7570562b44: sub    $0x80,%rsp
  0x00007f7570562b4b: mov    %rax,0x78(%rsp)
  0x00007f7570562b50: mov    %rcx,0x70(%rsp)
  0x00007f7570562b55: mov    %rdx,0x68(%rsp)
  0x00007f7570562b5a: mov    %rbx,0x60(%rsp)
  0x00007f7570562b5f: mov    %rbp,0x50(%rsp)
  0x00007f7570562b64: mov    %rsi,0x48(%rsp)
  0x00007f7570562b69: mov    %rdi,0x40(%rsp)
  0x00007f7570562b6e: mov    %r8,0x38(%rsp)
  0x00007f7570562b73: mov    %r9,0x30(%rsp)
  0x00007f7570562b78: mov    %r10,0x28(%rsp)
  0x00007f7570562b7d: mov    %r11,0x20(%rsp)
  0x00007f7570562b82: mov    %r12,0x18(%rsp)
  0x00007f7570562b87: mov    %r13,0x10(%rsp)
  0x00007f7570562b8c: mov    %r14,0x8(%rsp)
  0x00007f7570562b91: mov    %r15,(%rsp)
  0x00007f7570562b95: sub    $0x200,%rsp
  0x00007f7570562b9c: fxsave64 (%rsp)
  0x00007f7570562ba1: mov    %rbx,%rdi
  0x00007f7570562ba4: mov    %rax,%rsi
  0x00007f7570562ba7: callq  0x00007f7585522bca
  0x00007f7570562bac: fxrstor64 (%rsp)
  0x00007f7570562bb1: add    $0x200,%rsp
  0x00007f7570562bb8: mov    (%rsp),%r15
  0x00007f7570562bbc: mov    0x8(%rsp),%r14
  0x00007f7570562bc1: mov    0x10(%rsp),%r13
  0x00007f7570562bc6: mov    0x18(%rsp),%r12
  0x00007f7570562bcb: mov    0x20(%rsp),%r11
  0x00007f7570562bd0: mov    0x28(%rsp),%r10
  0x00007f7570562bd5: mov    0x30(%rsp),%r9
  0x00007f7570562bda: mov    0x38(%rsp),%r8
  0x00007f7570562bdf: mov    0x40(%rsp),%rdi
  0x00007f7570562be4: mov    0x48(%rsp),%rsi
  0x00007f7570562be9: mov    0x50(%rsp),%rbp
  0x00007f7570562bee: mov    0x60(%rsp),%rbx
  0x00007f7570562bf3: mov    0x68(%rsp),%rdx
  0x00007f7570562bf8: mov    0x70(%rsp),%rcx
  0x00007f7570562bfd: mov    0x78(%rsp),%rax
  0x00007f7570562c02: add    $0x80,%rsp
  0x00007f7570562c09: add    $0x8,%rsp
  0x00007f7570562c0d: popfq  
  0x00007f7570562c0e: mov    %r13,%rsp
  0x00007f7570562c11: pop    %rax
  0x00007f7570562c12: mov    %rsp,%r13
  0x00007f7570562c15: sub    $0x20,%rsp
  0x00007f7570562c19: mov    %rax,(%rsp)
  0x00007f7570562c1d: mov    %esi,0x18(%rsp)
  0x00007f7570562c21: mov    %rdx,0x10(%rsp)
  0x00007f7570562c26: mov    %rcx,0x8(%rsp)
  0x00007f7570562c2b: mov    0x40(%rbx),%rcx
  0x00007f7570562c2f: jmpq   *%rcx

AHE@0x00007f758012d0c8: 0xbbabbb00 i2c: 0x00007f7570562ce0 c2i: 0x00007f7570562e2d c2iUV: 0x00007f7570562e00
i2c argument handler #117 for: receiver (Ljava/lang/Class;ZLjava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Class;)Ljava/util/List; (620 bytes generated)
c2i argument handler starts at 0x7f7570562e2d
  0x00007f7570562ce0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570562ce4: movabs $0x7f757036e3e0,%r11
  0x00007f7570562cee: cmp    %r11,%rax
  0x00007f7570562cf1: jbe    0x00007f7570562d0a
  0x00007f7570562cf7: movabs $0x7f757046e3e0,%r11
  0x00007f7570562d01: cmp    %r11,%rax
  0x00007f7570562d04: jb     0x00007f7570562dcd
  0x00007f7570562d0a: movabs $0x7f7570369420,%r11
  0x00007f7570562d14: cmp    %r11,%rax
  0x00007f7570562d17: jbe    0x00007f7570562d30
  0x00007f7570562d1d: movabs $0x7f757036de58,%r11
  0x00007f7570562d27: cmp    %r11,%rax
  0x00007f7570562d2a: jb     0x00007f7570562dcd
  0x00007f7570562d30: movabs $0x7f75704a9820,%r11
  0x00007f7570562d3a: cmp    %r11,%rax
  0x00007f7570562d3d: jbe    0x00007f7570562d56
  0x00007f7570562d43: movabs $0x7f75704af5e0,%r11
  0x00007f7570562d4d: cmp    %r11,%rax
  0x00007f7570562d50: jb     0x00007f7570562dcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570562d56: mov    %rsp,-0x28(%rsp)
  0x00007f7570562d5b: sub    $0x80,%rsp
  0x00007f7570562d62: mov    %rax,0x78(%rsp)
  0x00007f7570562d67: mov    %rcx,0x70(%rsp)
  0x00007f7570562d6c: mov    %rdx,0x68(%rsp)
  0x00007f7570562d71: mov    %rbx,0x60(%rsp)
  0x00007f7570562d76: mov    %rbp,0x50(%rsp)
  0x00007f7570562d7b: mov    %rsi,0x48(%rsp)
  0x00007f7570562d80: mov    %rdi,0x40(%rsp)
  0x00007f7570562d85: mov    %r8,0x38(%rsp)
  0x00007f7570562d8a: mov    %r9,0x30(%rsp)
  0x00007f7570562d8f: mov    %r10,0x28(%rsp)
  0x00007f7570562d94: mov    %r11,0x20(%rsp)
  0x00007f7570562d99: mov    %r12,0x18(%rsp)
  0x00007f7570562d9e: mov    %r13,0x10(%rsp)
  0x00007f7570562da3: mov    %r14,0x8(%rsp)
  0x00007f7570562da8: mov    %r15,(%rsp)
  0x00007f7570562dac: movabs $0x7f758592f470,%rdi
  0x00007f7570562db6: movabs $0x7f7570562d56,%rsi
  0x00007f7570562dc0: mov    %rsp,%rdx
  0x00007f7570562dc3: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562dc7: callq  0x00007f75853729fa
  0x00007f7570562dcc: hlt    
  ;; } verify_i2ce 
  0x00007f7570562dcd: mov    %rsp,%r11
  0x00007f7570562dd0: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562dd4: push   %rax
  0x00007f7570562dd5: mov    %r11,%rax
  0x00007f7570562dd8: mov    0x50(%rbx),%r11
  0x00007f7570562ddc: mov    0x30(%rax),%rsi
  0x00007f7570562de0: mov    0x28(%rax),%rdx
  0x00007f7570562de4: mov    0x20(%rax),%ecx
  0x00007f7570562de7: mov    0x18(%rax),%r8
  0x00007f7570562deb: mov    0x10(%rax),%r9
  0x00007f7570562def: mov    0x8(%rax),%rdi
  0x00007f7570562df3: mov    %rbx,0x258(%r15)
  0x00007f7570562dfa: mov    %rbx,%rax
  0x00007f7570562dfd: jmpq   *%r11
  0x00007f7570562e00: mov    0x8(%rsi),%ebx
  0x00007f7570562e03: shl    $0x3,%rbx
  0x00007f7570562e07: cmp    0x10(%rax),%rbx
  0x00007f7570562e0b: mov    0x8(%rax),%rbx
  0x00007f7570562e0f: je     0x00007f7570562e1a
  0x00007f7570562e15: jmpq   0x00007f757046ec40
  0x00007f7570562e1a: cmpq   $0x0,0x58(%rbx)
  0x00007f7570562e22: je     0x00007f7570562f1d
  0x00007f7570562e28: jmpq   0x00007f757046ec40
  0x00007f7570562e2d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570562e35: je     0x00007f7570562f1d
  0x00007f7570562e3b: mov    %rsp,%r13
  0x00007f7570562e3e: mov    (%rsp),%rax
  0x00007f7570562e42: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562e46: pushfq 
  0x00007f7570562e47: sub    $0x8,%rsp
  0x00007f7570562e4b: mov    %rsp,-0x28(%rsp)
  0x00007f7570562e50: sub    $0x80,%rsp
  0x00007f7570562e57: mov    %rax,0x78(%rsp)
  0x00007f7570562e5c: mov    %rcx,0x70(%rsp)
  0x00007f7570562e61: mov    %rdx,0x68(%rsp)
  0x00007f7570562e66: mov    %rbx,0x60(%rsp)
  0x00007f7570562e6b: mov    %rbp,0x50(%rsp)
  0x00007f7570562e70: mov    %rsi,0x48(%rsp)
  0x00007f7570562e75: mov    %rdi,0x40(%rsp)
  0x00007f7570562e7a: mov    %r8,0x38(%rsp)
  0x00007f7570562e7f: mov    %r9,0x30(%rsp)
  0x00007f7570562e84: mov    %r10,0x28(%rsp)
  0x00007f7570562e89: mov    %r11,0x20(%rsp)
  0x00007f7570562e8e: mov    %r12,0x18(%rsp)
  0x00007f7570562e93: mov    %r13,0x10(%rsp)
  0x00007f7570562e98: mov    %r14,0x8(%rsp)
  0x00007f7570562e9d: mov    %r15,(%rsp)
  0x00007f7570562ea1: sub    $0x200,%rsp
  0x00007f7570562ea8: fxsave64 (%rsp)
  0x00007f7570562ead: mov    %rbx,%rdi
  0x00007f7570562eb0: mov    %rax,%rsi
  0x00007f7570562eb3: callq  0x00007f7585522bca
  0x00007f7570562eb8: fxrstor64 (%rsp)
  0x00007f7570562ebd: add    $0x200,%rsp
  0x00007f7570562ec4: mov    (%rsp),%r15
  0x00007f7570562ec8: mov    0x8(%rsp),%r14
  0x00007f7570562ecd: mov    0x10(%rsp),%r13
  0x00007f7570562ed2: mov    0x18(%rsp),%r12
  0x00007f7570562ed7: mov    0x20(%rsp),%r11
  0x00007f7570562edc: mov    0x28(%rsp),%r10
  0x00007f7570562ee1: mov    0x30(%rsp),%r9
  0x00007f7570562ee6: mov    0x38(%rsp),%r8
  0x00007f7570562eeb: mov    0x40(%rsp),%rdi
  0x00007f7570562ef0: mov    0x48(%rsp),%rsi
  0x00007f7570562ef5: mov    0x50(%rsp),%rbp
  0x00007f7570562efa: mov    0x60(%rsp),%rbx
  0x00007f7570562eff: mov    0x68(%rsp),%rdx
  0x00007f7570562f04: mov    0x70(%rsp),%rcx
  0x00007f7570562f09: mov    0x78(%rsp),%rax
  0x00007f7570562f0e: add    $0x80,%rsp
  0x00007f7570562f15: add    $0x8,%rsp
  0x00007f7570562f19: popfq  
  0x00007f7570562f1a: mov    %r13,%rsp
  0x00007f7570562f1d: pop    %rax
  0x00007f7570562f1e: mov    %rsp,%r13
  0x00007f7570562f21: sub    $0x40,%rsp
  0x00007f7570562f25: mov    %rax,(%rsp)
  0x00007f7570562f29: mov    %rsi,0x30(%rsp)
  0x00007f7570562f2e: mov    %rdx,0x28(%rsp)
  0x00007f7570562f33: mov    %ecx,0x20(%rsp)
  0x00007f7570562f37: mov    %r8,0x18(%rsp)
  0x00007f7570562f3c: mov    %r9,0x10(%rsp)
  0x00007f7570562f41: mov    %rdi,0x8(%rsp)
  0x00007f7570562f46: mov    0x40(%rbx),%rcx
  0x00007f7570562f4a: jmpq   *%rcx

AHE@0x00007f758012d110: 0xbabbbb00 i2c: 0x00007f7570563020 c2i: 0x00007f757056316d c2iUV: 0x00007f7570563140
i2c argument handler #118 for: static (Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName; (620 bytes generated)
c2i argument handler starts at 0x7f757056316d
  0x00007f7570563020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570563024: movabs $0x7f757036e3e0,%r11
  0x00007f757056302e: cmp    %r11,%rax
  0x00007f7570563031: jbe    0x00007f757056304a
  0x00007f7570563037: movabs $0x7f757046e3e0,%r11
  0x00007f7570563041: cmp    %r11,%rax
  0x00007f7570563044: jb     0x00007f757056310d
  0x00007f757056304a: movabs $0x7f7570369420,%r11
  0x00007f7570563054: cmp    %r11,%rax
  0x00007f7570563057: jbe    0x00007f7570563070
  0x00007f757056305d: movabs $0x7f757036de58,%r11
  0x00007f7570563067: cmp    %r11,%rax
  0x00007f757056306a: jb     0x00007f757056310d
  0x00007f7570563070: movabs $0x7f75704a9820,%r11
  0x00007f757056307a: cmp    %r11,%rax
  0x00007f757056307d: jbe    0x00007f7570563096
  0x00007f7570563083: movabs $0x7f75704af5e0,%r11
  0x00007f757056308d: cmp    %r11,%rax
  0x00007f7570563090: jb     0x00007f757056310d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570563096: mov    %rsp,-0x28(%rsp)
  0x00007f757056309b: sub    $0x80,%rsp
  0x00007f75705630a2: mov    %rax,0x78(%rsp)
  0x00007f75705630a7: mov    %rcx,0x70(%rsp)
  0x00007f75705630ac: mov    %rdx,0x68(%rsp)
  0x00007f75705630b1: mov    %rbx,0x60(%rsp)
  0x00007f75705630b6: mov    %rbp,0x50(%rsp)
  0x00007f75705630bb: mov    %rsi,0x48(%rsp)
  0x00007f75705630c0: mov    %rdi,0x40(%rsp)
  0x00007f75705630c5: mov    %r8,0x38(%rsp)
  0x00007f75705630ca: mov    %r9,0x30(%rsp)
  0x00007f75705630cf: mov    %r10,0x28(%rsp)
  0x00007f75705630d4: mov    %r11,0x20(%rsp)
  0x00007f75705630d9: mov    %r12,0x18(%rsp)
  0x00007f75705630de: mov    %r13,0x10(%rsp)
  0x00007f75705630e3: mov    %r14,0x8(%rsp)
  0x00007f75705630e8: mov    %r15,(%rsp)
  0x00007f75705630ec: movabs $0x7f758592f470,%rdi
  0x00007f75705630f6: movabs $0x7f7570563096,%rsi
  0x00007f7570563100: mov    %rsp,%rdx
  0x00007f7570563103: and    $0xfffffffffffffff0,%rsp
  0x00007f7570563107: callq  0x00007f75853729fa
  0x00007f757056310c: hlt    
  ;; } verify_i2ce 
  0x00007f757056310d: mov    %rsp,%r11
  0x00007f7570563110: and    $0xfffffffffffffff0,%rsp
  0x00007f7570563114: push   %rax
  0x00007f7570563115: mov    %r11,%rax
  0x00007f7570563118: mov    0x50(%rbx),%r11
  0x00007f757056311c: mov    0x30(%rax),%rsi
  0x00007f7570563120: mov    0x28(%rax),%edx
  0x00007f7570563123: mov    0x20(%rax),%rcx
  0x00007f7570563127: mov    0x18(%rax),%r8
  0x00007f757056312b: mov    0x10(%rax),%r9
  0x00007f757056312f: mov    0x8(%rax),%rdi
  0x00007f7570563133: mov    %rbx,0x258(%r15)
  0x00007f757056313a: mov    %rbx,%rax
  0x00007f757056313d: jmpq   *%r11
  0x00007f7570563140: mov    0x8(%rsi),%ebx
  0x00007f7570563143: shl    $0x3,%rbx
  0x00007f7570563147: cmp    0x10(%rax),%rbx
  0x00007f757056314b: mov    0x8(%rax),%rbx
  0x00007f757056314f: je     0x00007f757056315a
  0x00007f7570563155: jmpq   0x00007f757046ec40
  0x00007f757056315a: cmpq   $0x0,0x58(%rbx)
  0x00007f7570563162: je     0x00007f757056325d
  0x00007f7570563168: jmpq   0x00007f757046ec40
  0x00007f757056316d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570563175: je     0x00007f757056325d
  0x00007f757056317b: mov    %rsp,%r13
  0x00007f757056317e: mov    (%rsp),%rax
  0x00007f7570563182: and    $0xfffffffffffffff0,%rsp
  0x00007f7570563186: pushfq 
  0x00007f7570563187: sub    $0x8,%rsp
  0x00007f757056318b: mov    %rsp,-0x28(%rsp)
  0x00007f7570563190: sub    $0x80,%rsp
  0x00007f7570563197: mov    %rax,0x78(%rsp)
  0x00007f757056319c: mov    %rcx,0x70(%rsp)
  0x00007f75705631a1: mov    %rdx,0x68(%rsp)
  0x00007f75705631a6: mov    %rbx,0x60(%rsp)
  0x00007f75705631ab: mov    %rbp,0x50(%rsp)
  0x00007f75705631b0: mov    %rsi,0x48(%rsp)
  0x00007f75705631b5: mov    %rdi,0x40(%rsp)
  0x00007f75705631ba: mov    %r8,0x38(%rsp)
  0x00007f75705631bf: mov    %r9,0x30(%rsp)
  0x00007f75705631c4: mov    %r10,0x28(%rsp)
  0x00007f75705631c9: mov    %r11,0x20(%rsp)
  0x00007f75705631ce: mov    %r12,0x18(%rsp)
  0x00007f75705631d3: mov    %r13,0x10(%rsp)
  0x00007f75705631d8: mov    %r14,0x8(%rsp)
  0x00007f75705631dd: mov    %r15,(%rsp)
  0x00007f75705631e1: sub    $0x200,%rsp
  0x00007f75705631e8: fxsave64 (%rsp)
  0x00007f75705631ed: mov    %rbx,%rdi
  0x00007f75705631f0: mov    %rax,%rsi
  0x00007f75705631f3: callq  0x00007f7585522bca
  0x00007f75705631f8: fxrstor64 (%rsp)
  0x00007f75705631fd: add    $0x200,%rsp
  0x00007f7570563204: mov    (%rsp),%r15
  0x00007f7570563208: mov    0x8(%rsp),%r14
  0x00007f757056320d: mov    0x10(%rsp),%r13
  0x00007f7570563212: mov    0x18(%rsp),%r12
  0x00007f7570563217: mov    0x20(%rsp),%r11
  0x00007f757056321c: mov    0x28(%rsp),%r10
  0x00007f7570563221: mov    0x30(%rsp),%r9
  0x00007f7570563226: mov    0x38(%rsp),%r8
  0x00007f757056322b: mov    0x40(%rsp),%rdi
  0x00007f7570563230: mov    0x48(%rsp),%rsi
  0x00007f7570563235: mov    0x50(%rsp),%rbp
  0x00007f757056323a: mov    0x60(%rsp),%rbx
  0x00007f757056323f: mov    0x68(%rsp),%rdx
  0x00007f7570563244: mov    0x70(%rsp),%rcx
  0x00007f7570563249: mov    0x78(%rsp),%rax
  0x00007f757056324e: add    $0x80,%rsp
  0x00007f7570563255: add    $0x8,%rsp
  0x00007f7570563259: popfq  
  0x00007f757056325a: mov    %r13,%rsp
  0x00007f757056325d: pop    %rax
  0x00007f757056325e: mov    %rsp,%r13
  0x00007f7570563261: sub    $0x40,%rsp
  0x00007f7570563265: mov    %rax,(%rsp)
  0x00007f7570563269: mov    %rsi,0x30(%rsp)
  0x00007f757056326e: mov    %edx,0x28(%rsp)
  0x00007f7570563272: mov    %rcx,0x20(%rsp)
  0x00007f7570563277: mov    %r8,0x18(%rsp)
  0x00007f757056327c: mov    %r9,0x10(%rsp)
  0x00007f7570563281: mov    %rdi,0x8(%rsp)
  0x00007f7570563286: mov    0x40(%rbx),%rcx
  0x00007f757056328a: jmpq   *%rcx

AHE@0x00007f758012d158: 0xbbbabab0 i2c: 0x00007f7570563360 c2i: 0x00007f75705634ba c2iUV: 0x00007f757056348d
i2c argument handler #119 for: static (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Class;I[Ljava/lang/invoke/MemberName;)I (643 bytes generated)
c2i argument handler starts at 0x7f75705634ba
  0x00007f7570563360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570563364: movabs $0x7f757036e3e0,%r11
  0x00007f757056336e: cmp    %r11,%rax
  0x00007f7570563371: jbe    0x00007f757056338a
  0x00007f7570563377: movabs $0x7f757046e3e0,%r11
  0x00007f7570563381: cmp    %r11,%rax
  0x00007f7570563384: jb     0x00007f757056344d
  0x00007f757056338a: movabs $0x7f7570369420,%r11
  0x00007f7570563394: cmp    %r11,%rax
  0x00007f7570563397: jbe    0x00007f75705633b0
  0x00007f757056339d: movabs $0x7f757036de58,%r11
  0x00007f75705633a7: cmp    %r11,%rax
  0x00007f75705633aa: jb     0x00007f757056344d
  0x00007f75705633b0: movabs $0x7f75704a9820,%r11
  0x00007f75705633ba: cmp    %r11,%rax
  0x00007f75705633bd: jbe    0x00007f75705633d6
  0x00007f75705633c3: movabs $0x7f75704af5e0,%r11
  0x00007f75705633cd: cmp    %r11,%rax
  0x00007f75705633d0: jb     0x00007f757056344d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75705633d6: mov    %rsp,-0x28(%rsp)
  0x00007f75705633db: sub    $0x80,%rsp
  0x00007f75705633e2: mov    %rax,0x78(%rsp)
  0x00007f75705633e7: mov    %rcx,0x70(%rsp)
  0x00007f75705633ec: mov    %rdx,0x68(%rsp)
  0x00007f75705633f1: mov    %rbx,0x60(%rsp)
  0x00007f75705633f6: mov    %rbp,0x50(%rsp)
  0x00007f75705633fb: mov    %rsi,0x48(%rsp)
  0x00007f7570563400: mov    %rdi,0x40(%rsp)
  0x00007f7570563405: mov    %r8,0x38(%rsp)
  0x00007f757056340a: mov    %r9,0x30(%rsp)
  0x00007f757056340f: mov    %r10,0x28(%rsp)
  0x00007f7570563414: mov    %r11,0x20(%rsp)
  0x00007f7570563419: mov    %r12,0x18(%rsp)
  0x00007f757056341e: mov    %r13,0x10(%rsp)
  0x00007f7570563423: mov    %r14,0x8(%rsp)
  0x00007f7570563428: mov    %r15,(%rsp)
  0x00007f757056342c: movabs $0x7f758592f470,%rdi
  0x00007f7570563436: movabs $0x7f75705633d6,%rsi
  0x00007f7570563440: mov    %rsp,%rdx
  0x00007f7570563443: and    $0xfffffffffffffff0,%rsp
  0x00007f7570563447: callq  0x00007f75853729fa
  0x00007f757056344c: hlt    
  ;; } verify_i2ce 
  0x00007f757056344d: mov    %rsp,%r11
  0x00007f7570563450: sub    $0x10,%rsp
  0x00007f7570563454: and    $0xfffffffffffffff0,%rsp
  0x00007f7570563458: push   %rax
  0x00007f7570563459: mov    %r11,%rax
  0x00007f757056345c: mov    0x50(%rbx),%r11
  0x00007f7570563460: mov    0x38(%rax),%rsi
  0x00007f7570563464: mov    0x30(%rax),%rdx
  0x00007f7570563468: mov    0x28(%rax),%rcx
  0x00007f757056346c: mov    0x20(%rax),%r8d
  0x00007f7570563470: mov    0x18(%rax),%r9
  0x00007f7570563474: mov    0x10(%rax),%edi
  0x00007f7570563477: mov    0x8(%rax),%r13
  0x00007f757056347b: mov    %r13,0x8(%rsp)
  0x00007f7570563480: mov    %rbx,0x258(%r15)
  0x00007f7570563487: mov    %rbx,%rax
  0x00007f757056348a: jmpq   *%r11
  0x00007f757056348d: mov    0x8(%rsi),%ebx
  0x00007f7570563490: shl    $0x3,%rbx
  0x00007f7570563494: cmp    0x10(%rax),%rbx
  0x00007f7570563498: mov    0x8(%rax),%rbx
  0x00007f757056349c: je     0x00007f75705634a7
  0x00007f75705634a2: jmpq   0x00007f757046ec40
  0x00007f75705634a7: cmpq   $0x0,0x58(%rbx)
  0x00007f75705634af: je     0x00007f75705635aa
  0x00007f75705634b5: jmpq   0x00007f757046ec40
  0x00007f75705634ba: cmpq   $0x0,0x58(%rbx)
  0x00007f75705634c2: je     0x00007f75705635aa
  0x00007f75705634c8: mov    %rsp,%r13
  0x00007f75705634cb: mov    (%rsp),%rax
  0x00007f75705634cf: and    $0xfffffffffffffff0,%rsp
  0x00007f75705634d3: pushfq 
  0x00007f75705634d4: sub    $0x8,%rsp
  0x00007f75705634d8: mov    %rsp,-0x28(%rsp)
  0x00007f75705634dd: sub    $0x80,%rsp
  0x00007f75705634e4: mov    %rax,0x78(%rsp)
  0x00007f75705634e9: mov    %rcx,0x70(%rsp)
  0x00007f75705634ee: mov    %rdx,0x68(%rsp)
  0x00007f75705634f3: mov    %rbx,0x60(%rsp)
  0x00007f75705634f8: mov    %rbp,0x50(%rsp)
  0x00007f75705634fd: mov    %rsi,0x48(%rsp)
  0x00007f7570563502: mov    %rdi,0x40(%rsp)
  0x00007f7570563507: mov    %r8,0x38(%rsp)
  0x00007f757056350c: mov    %r9,0x30(%rsp)
  0x00007f7570563511: mov    %r10,0x28(%rsp)
  0x00007f7570563516: mov    %r11,0x20(%rsp)
  0x00007f757056351b: mov    %r12,0x18(%rsp)
  0x00007f7570563520: mov    %r13,0x10(%rsp)
  0x00007f7570563525: mov    %r14,0x8(%rsp)
  0x00007f757056352a: mov    %r15,(%rsp)
  0x00007f757056352e: sub    $0x200,%rsp
  0x00007f7570563535: fxsave64 (%rsp)
  0x00007f757056353a: mov    %rbx,%rdi
  0x00007f757056353d: mov    %rax,%rsi
  0x00007f7570563540: callq  0x00007f7585522bca
  0x00007f7570563545: fxrstor64 (%rsp)
  0x00007f757056354a: add    $0x200,%rsp
  0x00007f7570563551: mov    (%rsp),%r15
  0x00007f7570563555: mov    0x8(%rsp),%r14
  0x00007f757056355a: mov    0x10(%rsp),%r13
  0x00007f757056355f: mov    0x18(%rsp),%r12
  0x00007f7570563564: mov    0x20(%rsp),%r11
  0x00007f7570563569: mov    0x28(%rsp),%r10
  0x00007f757056356e: mov    0x30(%rsp),%r9
  0x00007f7570563573: mov    0x38(%rsp),%r8
  0x00007f7570563578: mov    0x40(%rsp),%rdi
  0x00007f757056357d: mov    0x48(%rsp),%rsi
  0x00007f7570563582: mov    0x50(%rsp),%rbp
  0x00007f7570563587: mov    0x60(%rsp),%rbx
  0x00007f757056358c: mov    0x68(%rsp),%rdx
  0x00007f7570563591: mov    0x70(%rsp),%rcx
  0x00007f7570563596: mov    0x78(%rsp),%rax
  0x00007f757056359b: add    $0x80,%rsp
  0x00007f75705635a2: add    $0x8,%rsp
  0x00007f75705635a6: popfq  
  0x00007f75705635a7: mov    %r13,%rsp
  0x00007f75705635aa: pop    %rax
  0x00007f75705635ab: mov    %rsp,%r13
  0x00007f75705635ae: sub    $0x40,%rsp
  0x00007f75705635b2: mov    %rax,(%rsp)
  0x00007f75705635b6: mov    %rsi,0x38(%rsp)
  0x00007f75705635bb: mov    %rdx,0x30(%rsp)
  0x00007f75705635c0: mov    %rcx,0x28(%rsp)
  0x00007f75705635c5: mov    %r8d,0x20(%rsp)
  0x00007f75705635ca: mov    %r9,0x18(%rsp)
  0x00007f75705635cf: mov    %edi,0x10(%rsp)
  0x00007f75705635d3: mov    0x40(%rsp),%rax
  0x00007f75705635d8: mov    %rax,0x8(%rsp)
  0x00007f75705635dd: mov    0x40(%rbx),%rcx
  0x00007f75705635e1: jmpq   *%rcx

Decoding RuntimeStub - _new_array_nozero_Java 0x00007f757055bf90
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f757055bfe0: sub    $0x8,%rsp
  0x00007f757055bfe7: mov    %rbp,(%rsp)
  0x00007f757055bfeb: mov    %rsp,0x200(%r15)
  0x00007f757055bff2: mov    %rsi,%rdi
  0x00007f757055bff5: mov    %edx,%esi
  0x00007f757055bff7: mov    %r15,%rdx
  0x00007f757055bffa: movabs $0x7f758550ec32,%r10
  0x00007f757055c004: callq  *%r10
  0x00007f757055c007: mov    %r12,0x200(%r15)
  0x00007f757055c00e: mov    %r12,0x208(%r15)
  0x00007f757055c015: mov    0x260(%r15),%rax
  0x00007f757055c01c: mov    %r12,0x260(%r15)
  0x00007f757055c023: cmp    0x8(%r15),%r12
  0x00007f757055c027: jne    0x00007f757055c02b
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f757055c029: pop    %rbp
  0x00007f757055c02a: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f757055c02b: movabs $0x7f7570369420,%r10
  0x00007f757055c035: xor    %ebx,%ebx
  0x00007f757055c037: pop    %rbp
  0x00007f757055c038: jmpq   *%r10
  0x00007f757055c03b: hlt    
  0x00007f757055c03c: hlt    
  0x00007f757055c03d: hlt    
  0x00007f757055c03e: hlt    
  0x00007f757055c03f: hlt    

Decoding RuntimeStub - new_type_array Runtime1 stub 0x00007f7570561850
  0x00007f7570561980: mov    0xc(%rdx),%eax
  0x00007f7570561983: sar    $0x1e,%eax
  0x00007f7570561986: cmp    $0xffffffff,%eax
  0x00007f7570561989: je     0x00007f7570561a7d
  0x00007f757056198f: mov    %rsp,-0x28(%rsp)
  0x00007f7570561994: sub    $0x80,%rsp
  0x00007f757056199b: mov    %rax,0x78(%rsp)
  0x00007f75705619a0: mov    %rcx,0x70(%rsp)
  0x00007f75705619a5: mov    %rdx,0x68(%rsp)
  0x00007f75705619aa: mov    %rbx,0x60(%rsp)
  0x00007f75705619af: mov    %rbp,0x50(%rsp)
  0x00007f75705619b4: mov    %rsi,0x48(%rsp)
  0x00007f75705619b9: mov    %rdi,0x40(%rsp)
  0x00007f75705619be: mov    %r8,0x38(%rsp)
  0x00007f75705619c3: mov    %r9,0x30(%rsp)
  0x00007f75705619c8: mov    %r10,0x28(%rsp)
  0x00007f75705619cd: mov    %r11,0x20(%rsp)
  0x00007f75705619d2: mov    %r12,0x18(%rsp)
  0x00007f75705619d7: mov    %r13,0x10(%rsp)
  0x00007f75705619dc: mov    %r14,0x8(%rsp)
  0x00007f75705619e1: mov    %r15,(%rsp)
  0x00007f75705619e5: movabs $0x7f75856f362e,%rdi
  0x00007f75705619ef: movabs $0x7f757056198f,%rsi
  0x00007f75705619f9: mov    %rsp,%rdx
  0x00007f75705619fc: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561a00: callq  0x00007f75853729fa
  0x00007f7570561a05: hlt    
  0x00007f7570561a06: mov    %rsp,-0x28(%rsp)
  0x00007f7570561a0b: sub    $0x80,%rsp
  0x00007f7570561a12: mov    %rax,0x78(%rsp)
  0x00007f7570561a17: mov    %rcx,0x70(%rsp)
  0x00007f7570561a1c: mov    %rdx,0x68(%rsp)
  0x00007f7570561a21: mov    %rbx,0x60(%rsp)
  0x00007f7570561a26: mov    %rbp,0x50(%rsp)
  0x00007f7570561a2b: mov    %rsi,0x48(%rsp)
  0x00007f7570561a30: mov    %rdi,0x40(%rsp)
  0x00007f7570561a35: mov    %r8,0x38(%rsp)
  0x00007f7570561a3a: mov    %r9,0x30(%rsp)
  0x00007f7570561a3f: mov    %r10,0x28(%rsp)
  0x00007f7570561a44: mov    %r11,0x20(%rsp)
  0x00007f7570561a49: mov    %r12,0x18(%rsp)
  0x00007f7570561a4e: mov    %r13,0x10(%rsp)
  0x00007f7570561a53: mov    %r14,0x8(%rsp)
  0x00007f7570561a58: mov    %r15,(%rsp)
  0x00007f7570561a5c: movabs $0x7f75856bea2b,%rdi
  0x00007f7570561a66: movabs $0x7f7570561a06,%rsi
  0x00007f7570561a70: mov    %rsp,%rdx
  0x00007f7570561a73: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561a77: callq  0x00007f75853729fa
  0x00007f7570561a7c: hlt    
  0x00007f7570561a7d: cmp    $0xffffff,%ebx
  0x00007f7570561a83: ja     0x00007f7570561e7b
  0x00007f7570561a89: mov    0x70(%r15),%rax
  0x00007f7570561a8d: mov    0x80(%r15),%rcx
  0x00007f7570561a94: sub    %rax,%rcx
  0x00007f7570561a97: shr    $0x3,%rcx
  0x00007f7570561a9b: cmp    0x90(%r15),%rcx
  0x00007f7570561aa2: jle    0x00007f7570561ac6
  0x00007f7570561aa8: movabs $0x4,%rsi
  0x00007f7570561ab2: add    %rsi,0x90(%r15)
  0x00007f7570561ab9: addl   $0x1,0xb0(%r15)
  0x00007f7570561ac1: jmpq   0x00007f7570561d66
  0x00007f7570561ac6: addl   $0x1,0xa0(%r15)
  0x00007f7570561ace: add    %ecx,0xa4(%r15)
  0x00007f7570561ad5: test   %rax,%rax
  0x00007f7570561ad8: je     0x00007f7570561b15
  0x00007f7570561ade: movabs $0x201,%r10
  0x00007f7570561ae8: mov    %r10,(%rax)
  0x00007f7570561aeb: sub    $0x2,%rcx
  0x00007f7570561aef: add    $0x2,%rcx
  0x00007f7570561af3: shl    %rcx
  0x00007f7570561af6: mov    %ecx,0xc(%rax)
  0x00007f7570561af9: mov    0x159e3458(%rip),%rcx        # 0x00007f7585f44f58
  0x00007f7570561b00: shr    $0x3,%rcx
  0x00007f7570561b04: mov    %ecx,0x8(%rax)
  0x00007f7570561b07: mov    %rax,%rcx
  0x00007f7570561b0a: sub    0x68(%r15),%rcx
  0x00007f7570561b0e: add    %rcx,0xd8(%r15)
  0x00007f7570561b15: mov    0x88(%r15),%rcx
  0x00007f7570561b1c: shl    $0x3,%rcx
  0x00007f7570561b20: mov    0xfac0771(%rip),%rax        # 0x00007f7580022298
  0x00007f7570561b27: lea    (%rax,%rcx,1),%rsi
  0x00007f7570561b2b: cmp    %rax,%rsi
  0x00007f7570561b2e: jb     0x00007f7570561e7b
  0x00007f7570561b34: cmp    0xfac0735(%rip),%rsi        # 0x00007f7580022270
  0x00007f7570561b3b: ja     0x00007f7570561e7b
  0x00007f7570561b41: lock cmpxchg %rsi,0xfac074e(%rip)        # 0x00007f7580022298
  0x00007f7570561b4a: jne    0x00007f7570561b20
  0x00007f7570561b4c: push   %rsi
  0x00007f7570561b4d: mov    0x88(%r15),%rsi
  0x00007f7570561b54: shl    $0x3,%rsi
  0x00007f7570561b58: cmp    %rsi,%rcx
  0x00007f7570561b5b: je     0x00007f7570561c4f
  ;; assert(t1 != tlab size)
  0x00007f7570561b61: mov    %rsp,-0x28(%rsp)
  0x00007f7570561b66: sub    $0x80,%rsp
  0x00007f7570561b6d: mov    %rax,0x78(%rsp)
  0x00007f7570561b72: mov    %rcx,0x70(%rsp)
  0x00007f7570561b77: mov    %rdx,0x68(%rsp)
  0x00007f7570561b7c: mov    %rbx,0x60(%rsp)
  0x00007f7570561b81: mov    %rbp,0x50(%rsp)
  0x00007f7570561b86: mov    %rsi,0x48(%rsp)
  0x00007f7570561b8b: mov    %rdi,0x40(%rsp)
  0x00007f7570561b90: mov    %r8,0x38(%rsp)
  0x00007f7570561b95: mov    %r9,0x30(%rsp)
  0x00007f7570561b9a: mov    %r10,0x28(%rsp)
  0x00007f7570561b9f: mov    %r11,0x20(%rsp)
  0x00007f7570561ba4: mov    %r12,0x18(%rsp)
  0x00007f7570561ba9: mov    %r13,0x10(%rsp)
  0x00007f7570561bae: mov    %r14,0x8(%rsp)
  0x00007f7570561bb3: mov    %r15,(%rsp)
  0x00007f7570561bb7: movabs $0x7f7585888079,%rdi
  0x00007f7570561bc1: movabs $0x7f7570561b61,%rsi
  0x00007f7570561bcb: mov    %rsp,%rdx
  0x00007f7570561bce: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561bd2: callq  0x00007f75853729fa
  0x00007f7570561bd7: hlt    
  0x00007f7570561bd8: mov    %rsp,-0x28(%rsp)
  0x00007f7570561bdd: sub    $0x80,%rsp
  0x00007f7570561be4: mov    %rax,0x78(%rsp)
  0x00007f7570561be9: mov    %rcx,0x70(%rsp)
  0x00007f7570561bee: mov    %rdx,0x68(%rsp)
  0x00007f7570561bf3: mov    %rbx,0x60(%rsp)
  0x00007f7570561bf8: mov    %rbp,0x50(%rsp)
  0x00007f7570561bfd: mov    %rsi,0x48(%rsp)
  0x00007f7570561c02: mov    %rdi,0x40(%rsp)
  0x00007f7570561c07: mov    %r8,0x38(%rsp)
  0x00007f7570561c0c: mov    %r9,0x30(%rsp)
  0x00007f7570561c11: mov    %r10,0x28(%rsp)
  0x00007f7570561c16: mov    %r11,0x20(%rsp)
  0x00007f7570561c1b: mov    %r12,0x18(%rsp)
  0x00007f7570561c20: mov    %r13,0x10(%rsp)
  0x00007f7570561c25: mov    %r14,0x8(%rsp)
  0x00007f7570561c2a: mov    %r15,(%rsp)
  0x00007f7570561c2e: movabs $0x7f75856bea2b,%rdi
  0x00007f7570561c38: movabs $0x7f7570561bd8,%rsi
  0x00007f7570561c42: mov    %rsp,%rdx
  0x00007f7570561c45: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561c49: callq  0x00007f75853729fa
  0x00007f7570561c4e: hlt    
  0x00007f7570561c4f: pop    %rsi
  0x00007f7570561c50: mov    %rax,0x68(%r15)
  0x00007f7570561c54: mov    %rax,0x70(%r15)
  0x00007f7570561c58: add    %rcx,%rax
  0x00007f7570561c5b: sub    $0x10,%rax
  0x00007f7570561c5f: mov    %rax,0x80(%r15)
  0x00007f7570561c66: jmpq   0x00007f7570561c6b
  0x00007f7570561c6b: mov    0xc(%rdx),%ecx
  0x00007f7570561c6e: mov    %ebx,%esi
  0x00007f7570561c70: shl    %cl,%rsi
  0x00007f7570561c73: shr    $0x10,%rcx
  0x00007f7570561c77: and    $0xff,%rcx
  0x00007f7570561c7e: add    %rcx,%rsi
  0x00007f7570561c81: add    $0x7,%rsi
  0x00007f7570561c85: and    $0xfffffffffffffff8,%rsi
  0x00007f7570561c89: mov    0x70(%r15),%rax
  0x00007f7570561c8d: lea    (%rax,%rsi,1),%rdi
  0x00007f7570561c91: cmp    0x80(%r15),%rdi
  0x00007f7570561c98: ja     0x00007f7570561e7b
  0x00007f7570561c9e: mov    %rdi,0x70(%r15)
  0x00007f7570561ca2: movq   $0x1,(%rax)
  0x00007f7570561ca9: mov    %rdx,%rcx
  0x00007f7570561cac: shr    $0x3,%rcx
  0x00007f7570561cb0: mov    %ecx,0x8(%rax)
  0x00007f7570561cb3: mov    %ebx,0xc(%rax)
  0x00007f7570561cb6: mov    0xe(%rdx),%cl
  0x00007f7570561cb9: and    $0xff,%rcx
  0x00007f7570561cc0: sub    %rcx,%rsi
  0x00007f7570561cc3: add    %rax,%rcx
  0x00007f7570561cc6: sub    $0x0,%rsi
  0x00007f7570561cca: je     0x00007f7570561d65
  0x00007f7570561cd0: test   $0x7,%rsi
  0x00007f7570561cd7: je     0x00007f7570561d54
  0x00007f7570561cdd: mov    %rsp,-0x28(%rsp)
  0x00007f7570561ce2: sub    $0x80,%rsp
  0x00007f7570561ce9: mov    %rax,0x78(%rsp)
  0x00007f7570561cee: mov    %rcx,0x70(%rsp)
  0x00007f7570561cf3: mov    %rdx,0x68(%rsp)
  0x00007f7570561cf8: mov    %rbx,0x60(%rsp)
  0x00007f7570561cfd: mov    %rbp,0x50(%rsp)
  0x00007f7570561d02: mov    %rsi,0x48(%rsp)
  0x00007f7570561d07: mov    %rdi,0x40(%rsp)
  0x00007f7570561d0c: mov    %r8,0x38(%rsp)
  0x00007f7570561d11: mov    %r9,0x30(%rsp)
  0x00007f7570561d16: mov    %r10,0x28(%rsp)
  0x00007f7570561d1b: mov    %r11,0x20(%rsp)
  0x00007f7570561d20: mov    %r12,0x18(%rsp)
  0x00007f7570561d25: mov    %r13,0x10(%rsp)
  0x00007f7570561d2a: mov    %r14,0x8(%rsp)
  0x00007f7570561d2f: mov    %r15,(%rsp)
  0x00007f7570561d33: movabs $0x7f75856e9fc8,%rdi
  0x00007f7570561d3d: movabs $0x7f7570561cdd,%rsi
  0x00007f7570561d47: mov    %rsp,%rdx
  0x00007f7570561d4a: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561d4e: callq  0x00007f75853729fa
  0x00007f7570561d53: hlt    
  0x00007f7570561d54: xor    %rdi,%rdi
  0x00007f7570561d57: shr    $0x3,%rsi
  0x00007f7570561d5b: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f7570561d60: dec    %rsi
  0x00007f7570561d63: jne    0x00007f7570561d5b
  0x00007f7570561d65: retq   
  0x00007f7570561d66: mov    0xc(%rdx),%ecx
  0x00007f7570561d69: mov    %ebx,%esi
  0x00007f7570561d6b: shl    %cl,%rsi
  0x00007f7570561d6e: shr    $0x10,%rcx
  0x00007f7570561d72: and    $0xff,%rcx
  0x00007f7570561d79: add    %rcx,%rsi
  0x00007f7570561d7c: add    $0x7,%rsi
  0x00007f7570561d80: and    $0xfffffffffffffff8,%rsi
  0x00007f7570561d84: mov    0xfac050d(%rip),%rax        # 0x00007f7580022298
  0x00007f7570561d8b: lea    (%rax,%rsi,1),%rcx
  0x00007f7570561d8f: cmp    %rax,%rcx
  0x00007f7570561d92: jb     0x00007f7570561e7b
  0x00007f7570561d98: cmp    0xfac04d1(%rip),%rcx        # 0x00007f7580022270
  0x00007f7570561d9f: ja     0x00007f7570561e7b
  0x00007f7570561da5: lock cmpxchg %rcx,0xfac04ea(%rip)        # 0x00007f7580022298
  0x00007f7570561dae: jne    0x00007f7570561d84
  0x00007f7570561db0: add    %rsi,0xd8(%r15)
  0x00007f7570561db7: movq   $0x1,(%rax)
  0x00007f7570561dbe: mov    %rdx,%rcx
  0x00007f7570561dc1: shr    $0x3,%rcx
  0x00007f7570561dc5: mov    %ecx,0x8(%rax)
  0x00007f7570561dc8: mov    %ebx,0xc(%rax)
  0x00007f7570561dcb: mov    0xe(%rdx),%cl
  0x00007f7570561dce: and    $0xff,%rcx
  0x00007f7570561dd5: sub    %rcx,%rsi
  0x00007f7570561dd8: add    %rax,%rcx
  0x00007f7570561ddb: sub    $0x0,%rsi
  0x00007f7570561ddf: je     0x00007f7570561e7a
  0x00007f7570561de5: test   $0x7,%rsi
  0x00007f7570561dec: je     0x00007f7570561e69
  0x00007f7570561df2: mov    %rsp,-0x28(%rsp)
  0x00007f7570561df7: sub    $0x80,%rsp
  0x00007f7570561dfe: mov    %rax,0x78(%rsp)
  0x00007f7570561e03: mov    %rcx,0x70(%rsp)
  0x00007f7570561e08: mov    %rdx,0x68(%rsp)
  0x00007f7570561e0d: mov    %rbx,0x60(%rsp)
  0x00007f7570561e12: mov    %rbp,0x50(%rsp)
  0x00007f7570561e17: mov    %rsi,0x48(%rsp)
  0x00007f7570561e1c: mov    %rdi,0x40(%rsp)
  0x00007f7570561e21: mov    %r8,0x38(%rsp)
  0x00007f7570561e26: mov    %r9,0x30(%rsp)
  0x00007f7570561e2b: mov    %r10,0x28(%rsp)
  0x00007f7570561e30: mov    %r11,0x20(%rsp)
  0x00007f7570561e35: mov    %r12,0x18(%rsp)
  0x00007f7570561e3a: mov    %r13,0x10(%rsp)
  0x00007f7570561e3f: mov    %r14,0x8(%rsp)
  0x00007f7570561e44: mov    %r15,(%rsp)
  0x00007f7570561e48: movabs $0x7f75856e9fc8,%rdi
  0x00007f7570561e52: movabs $0x7f7570561df2,%rsi
  0x00007f7570561e5c: mov    %rsp,%rdx
  0x00007f7570561e5f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561e63: callq  0x00007f75853729fa
  0x00007f7570561e68: hlt    
  0x00007f7570561e69: xor    %rdi,%rdi
  0x00007f7570561e6c: shr    $0x3,%rsi
  0x00007f7570561e70: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f7570561e75: dec    %rsi
  0x00007f7570561e78: jne    0x00007f7570561e70
  0x00007f7570561e7a: retq   
  0x00007f7570561e7b: push   %rbp
  0x00007f7570561e7c: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f7570561e7f: mov    %rsp,-0x28(%rsp)
  0x00007f7570561e84: sub    $0x80,%rsp
  0x00007f7570561e8b: mov    %rax,0x78(%rsp)
  0x00007f7570561e90: mov    %rcx,0x70(%rsp)
  0x00007f7570561e95: mov    %rdx,0x68(%rsp)
  0x00007f7570561e9a: mov    %rbx,0x60(%rsp)
  0x00007f7570561e9f: mov    %rbp,0x50(%rsp)
  0x00007f7570561ea4: mov    %rsi,0x48(%rsp)
  0x00007f7570561ea9: mov    %rdi,0x40(%rsp)
  0x00007f7570561eae: mov    %r8,0x38(%rsp)
  0x00007f7570561eb3: mov    %r9,0x30(%rsp)
  0x00007f7570561eb8: mov    %r10,0x28(%rsp)
  0x00007f7570561ebd: mov    %r11,0x20(%rsp)
  0x00007f7570561ec2: mov    %r12,0x18(%rsp)
  0x00007f7570561ec7: mov    %r13,0x10(%rsp)
  0x00007f7570561ecc: mov    %r14,0x8(%rsp)
  0x00007f7570561ed1: mov    %r15,(%rsp)
  0x00007f7570561ed5: sub    $0x150,%rsp
  0x00007f7570561edc: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570561ee8: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570561eee: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570561ef4: vmovsd %xmm2,0x18(%rsp)
  0x00007f7570561efa: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570561f00: vmovsd %xmm4,0x28(%rsp)
  0x00007f7570561f06: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570561f0c: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570561f12: vmovsd %xmm7,0x40(%rsp)
  0x00007f7570561f18: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570561f1e: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570561f24: vmovsd %xmm10,0x58(%rsp)
  0x00007f7570561f2a: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570561f30: vmovsd %xmm12,0x68(%rsp)
  0x00007f7570561f36: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570561f3c: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570561f42: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570561f4b: mov    %rdx,%rsi
  0x00007f7570561f4e: mov    %rbx,%rdx
  0x00007f7570561f51: mov    %r15,%rdi
  0x00007f7570561f54: mov    %rbp,0x210(%r15)
  0x00007f7570561f5b: mov    %rsp,0x200(%r15)
  0x00007f7570561f62: callq  0x00007f7584e51344
  0x00007f7570561f67: push   %rax
  0x00007f7570561f68: push   %rdi
  0x00007f7570561f69: push   %rsi
  0x00007f7570561f6a: push   %rdx
  0x00007f7570561f6b: push   %rcx
  0x00007f7570561f6c: push   %r8
  0x00007f7570561f6e: push   %r9
  0x00007f7570561f70: push   %r10
  0x00007f7570561f72: mov    %rsp,%r10
  0x00007f7570561f75: and    $0xfffffffffffffff0,%rsp
  0x00007f7570561f79: push   %r10
  0x00007f7570561f7b: push   %r11
  0x00007f7570561f7d: mov    $0x1,%edi
  0x00007f7570561f82: callq  0x00007f7585f5a2d0
  0x00007f7570561f87: pop    %r11
  0x00007f7570561f89: pop    %rsp
  0x00007f7570561f8a: pop    %r10
  0x00007f7570561f8c: pop    %r9
  0x00007f7570561f8e: pop    %r8
  0x00007f7570561f90: pop    %rcx
  0x00007f7570561f91: pop    %rdx
  0x00007f7570561f92: pop    %rsi
  0x00007f7570561f93: pop    %rdi
  0x00007f7570561f94: cmp    %rax,%r15
  0x00007f7570561f97: je     0x00007f7570562019
  0x00007f7570561f9d: callq  0x00007f7585459a22
  0x00007f7570561fa2: mov    %rsp,-0x28(%rsp)
  0x00007f7570561fa7: sub    $0x80,%rsp
  0x00007f7570561fae: mov    %rax,0x78(%rsp)
  0x00007f7570561fb3: mov    %rcx,0x70(%rsp)
  0x00007f7570561fb8: mov    %rdx,0x68(%rsp)
  0x00007f7570561fbd: mov    %rbx,0x60(%rsp)
  0x00007f7570561fc2: mov    %rbp,0x50(%rsp)
  0x00007f7570561fc7: mov    %rsi,0x48(%rsp)
  0x00007f7570561fcc: mov    %rdi,0x40(%rsp)
  0x00007f7570561fd1: mov    %r8,0x38(%rsp)
  0x00007f7570561fd6: mov    %r9,0x30(%rsp)
  0x00007f7570561fdb: mov    %r10,0x28(%rsp)
  0x00007f7570561fe0: mov    %r11,0x20(%rsp)
  0x00007f7570561fe5: mov    %r12,0x18(%rsp)
  0x00007f7570561fea: mov    %r13,0x10(%rsp)
  0x00007f7570561fef: mov    %r14,0x8(%rsp)
  0x00007f7570561ff4: mov    %r15,(%rsp)
  0x00007f7570561ff8: movabs $0x7f75856f3278,%rdi
  0x00007f7570562002: movabs $0x7f7570561fa2,%rsi
  0x00007f757056200c: mov    %rsp,%rdx
  0x00007f757056200f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562013: callq  0x00007f75853729fa
  0x00007f7570562018: hlt    
  0x00007f7570562019: pop    %rax
  0x00007f757056201a: movabs $0x0,%r10
  0x00007f7570562024: mov    %r10,0x200(%r15)
  0x00007f757056202b: movabs $0x0,%r10
  0x00007f7570562035: mov    %r10,0x210(%r15)
  0x00007f757056203c: movabs $0x0,%r10
  0x00007f7570562046: mov    %r10,0x208(%r15)
  0x00007f757056204d: cmpq   $0x0,0x8(%r15)
  0x00007f7570562055: je     0x00007f7570562075
  0x00007f757056205b: mov    0x8(%r15),%rax
  0x00007f757056205f: movabs $0x0,%r10
  0x00007f7570562069: mov    %r10,0x260(%r15)
  0x00007f7570562070: jmpq   0x00007f757055b240
  0x00007f7570562075: mov    0x260(%r15),%rax
  0x00007f757056207c: movabs $0x0,%r10
  0x00007f7570562086: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f757056208d: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570562093: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570562099: vmovsd 0x18(%rsp),%xmm2
  0x00007f757056209f: vmovsd 0x20(%rsp),%xmm3
  0x00007f75705620a5: vmovsd 0x28(%rsp),%xmm4
  0x00007f75705620ab: vmovsd 0x30(%rsp),%xmm5
  0x00007f75705620b1: vmovsd 0x38(%rsp),%xmm6
  0x00007f75705620b7: vmovsd 0x40(%rsp),%xmm7
  0x00007f75705620bd: vmovsd 0x48(%rsp),%xmm8
  0x00007f75705620c3: vmovsd 0x50(%rsp),%xmm9
  0x00007f75705620c9: vmovsd 0x58(%rsp),%xmm10
  0x00007f75705620cf: vmovsd 0x60(%rsp),%xmm11
  0x00007f75705620d5: vmovsd 0x68(%rsp),%xmm12
  0x00007f75705620db: vmovsd 0x70(%rsp),%xmm13
  0x00007f75705620e1: vmovsd 0x78(%rsp),%xmm14
  0x00007f75705620e7: vmovsd 0x80(%rsp),%xmm15
  0x00007f75705620f0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f75705620fc: je     0x00007f7570562179
  0x00007f7570562102: mov    %rsp,-0x28(%rsp)
  0x00007f7570562107: sub    $0x80,%rsp
  0x00007f757056210e: mov    %rax,0x78(%rsp)
  0x00007f7570562113: mov    %rcx,0x70(%rsp)
  0x00007f7570562118: mov    %rdx,0x68(%rsp)
  0x00007f757056211d: mov    %rbx,0x60(%rsp)
  0x00007f7570562122: mov    %rbp,0x50(%rsp)
  0x00007f7570562127: mov    %rsi,0x48(%rsp)
  0x00007f757056212c: mov    %rdi,0x40(%rsp)
  0x00007f7570562131: mov    %r8,0x38(%rsp)
  0x00007f7570562136: mov    %r9,0x30(%rsp)
  0x00007f757056213b: mov    %r10,0x28(%rsp)
  0x00007f7570562140: mov    %r11,0x20(%rsp)
  0x00007f7570562145: mov    %r12,0x18(%rsp)
  0x00007f757056214a: mov    %r13,0x10(%rsp)
  0x00007f757056214f: mov    %r14,0x8(%rsp)
  0x00007f7570562154: mov    %r15,(%rsp)
  0x00007f7570562158: movabs $0x7f75856f340f,%rdi
  0x00007f7570562162: movabs $0x7f7570562102,%rsi
  0x00007f757056216c: mov    %rsp,%rdx
  0x00007f757056216f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570562173: callq  0x00007f75853729fa
  0x00007f7570562178: hlt    
  0x00007f7570562179: add    $0x150,%rsp
  0x00007f7570562180: mov    (%rsp),%r15
  0x00007f7570562184: mov    0x8(%rsp),%r14
  0x00007f7570562189: mov    0x10(%rsp),%r13
  0x00007f757056218e: mov    0x18(%rsp),%r12
  0x00007f7570562193: mov    0x20(%rsp),%r11
  0x00007f7570562198: mov    0x28(%rsp),%r10
  0x00007f757056219d: mov    0x30(%rsp),%r9
  0x00007f75705621a2: mov    0x38(%rsp),%r8
  0x00007f75705621a7: mov    0x40(%rsp),%rdi
  0x00007f75705621ac: mov    0x48(%rsp),%rsi
  0x00007f75705621b1: mov    0x50(%rsp),%rbp
  0x00007f75705621b6: mov    0x60(%rsp),%rbx
  0x00007f75705621bb: mov    0x68(%rsp),%rdx
  0x00007f75705621c0: mov    0x70(%rsp),%rcx
  0x00007f75705621c5: add    $0x80,%rsp
  0x00007f75705621cc: leaveq 
  0x00007f75705621cd: retq   
  0x00007f75705621ce: nop
  0x00007f75705621cf: nop

Decoding RuntimeStub - _multianewarray2_Java 0x00007f757055bb90
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f757055bbe0: sub    $0x8,%rsp
  0x00007f757055bbe7: mov    %rbp,(%rsp)
  0x00007f757055bbeb: mov    %rsp,0x200(%r15)
  0x00007f757055bbf2: mov    %rsi,%rdi
  0x00007f757055bbf5: mov    %edx,%esi
  0x00007f757055bbf7: mov    %ecx,%edx
  0x00007f757055bbf9: mov    %r15,%rcx
  0x00007f757055bbfc: movabs $0x7f758550ef84,%r10
  0x00007f757055bc06: callq  *%r10
  0x00007f757055bc09: mov    %r12,0x200(%r15)
  0x00007f757055bc10: mov    %r12,0x208(%r15)
  0x00007f757055bc17: mov    0x260(%r15),%rax
  0x00007f757055bc1e: mov    %r12,0x260(%r15)
  0x00007f757055bc25: cmp    0x8(%r15),%r12
  0x00007f757055bc29: jne    0x00007f757055bc2d
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f757055bc2b: pop    %rbp
  0x00007f757055bc2c: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f757055bc2d: movabs $0x7f7570369420,%r10
  0x00007f757055bc37: xor    %ebx,%ebx
  0x00007f757055bc39: pop    %rbp
  0x00007f757055bc3a: jmpq   *%r10
  0x00007f757055bc3d: hlt    
  0x00007f757055bc3e: hlt    
  0x00007f757055bc3f: hlt    

MethodHandle::interpreter_entry::_invokeGeneric [0x00007f7570563660, 0x00007f7570563661[ (1 bytes)
Decoding RuntimeStub - new_object_array Runtime1 stub 0x00007f757058fd90
  0x00007f757058fec0: mov    0xc(%rdx),%eax
  0x00007f757058fec3: sar    $0x1e,%eax
  0x00007f757058fec6: cmp    $0xfffffffe,%eax
  0x00007f757058fec9: je     0x00007f757058ffbd
  0x00007f757058fecf: mov    %rsp,-0x28(%rsp)
  0x00007f757058fed4: sub    $0x80,%rsp
  0x00007f757058fedb: mov    %rax,0x78(%rsp)
  0x00007f757058fee0: mov    %rcx,0x70(%rsp)
  0x00007f757058fee5: mov    %rdx,0x68(%rsp)
  0x00007f757058feea: mov    %rbx,0x60(%rsp)
  0x00007f757058feef: mov    %rbp,0x50(%rsp)
  0x00007f757058fef4: mov    %rsi,0x48(%rsp)
  0x00007f757058fef9: mov    %rdi,0x40(%rsp)
  0x00007f757058fefe: mov    %r8,0x38(%rsp)
  0x00007f757058ff03: mov    %r9,0x30(%rsp)
  0x00007f757058ff08: mov    %r10,0x28(%rsp)
  0x00007f757058ff0d: mov    %r11,0x20(%rsp)
  0x00007f757058ff12: mov    %r12,0x18(%rsp)
  0x00007f757058ff17: mov    %r13,0x10(%rsp)
  0x00007f757058ff1c: mov    %r14,0x8(%rsp)
  0x00007f757058ff21: mov    %r15,(%rsp)
  0x00007f757058ff25: movabs $0x7f75856f362e,%rdi
  0x00007f757058ff2f: movabs $0x7f757058fecf,%rsi
  0x00007f757058ff39: mov    %rsp,%rdx
  0x00007f757058ff3c: and    $0xfffffffffffffff0,%rsp
  0x00007f757058ff40: callq  0x00007f75853729fa
  0x00007f757058ff45: hlt    
  0x00007f757058ff46: mov    %rsp,-0x28(%rsp)
  0x00007f757058ff4b: sub    $0x80,%rsp
  0x00007f757058ff52: mov    %rax,0x78(%rsp)
  0x00007f757058ff57: mov    %rcx,0x70(%rsp)
  0x00007f757058ff5c: mov    %rdx,0x68(%rsp)
  0x00007f757058ff61: mov    %rbx,0x60(%rsp)
  0x00007f757058ff66: mov    %rbp,0x50(%rsp)
  0x00007f757058ff6b: mov    %rsi,0x48(%rsp)
  0x00007f757058ff70: mov    %rdi,0x40(%rsp)
  0x00007f757058ff75: mov    %r8,0x38(%rsp)
  0x00007f757058ff7a: mov    %r9,0x30(%rsp)
  0x00007f757058ff7f: mov    %r10,0x28(%rsp)
  0x00007f757058ff84: mov    %r11,0x20(%rsp)
  0x00007f757058ff89: mov    %r12,0x18(%rsp)
  0x00007f757058ff8e: mov    %r13,0x10(%rsp)
  0x00007f757058ff93: mov    %r14,0x8(%rsp)
  0x00007f757058ff98: mov    %r15,(%rsp)
  0x00007f757058ff9c: movabs $0x7f75856bea2b,%rdi
  0x00007f757058ffa6: movabs $0x7f757058ff46,%rsi
  0x00007f757058ffb0: mov    %rsp,%rdx
  0x00007f757058ffb3: and    $0xfffffffffffffff0,%rsp
  0x00007f757058ffb7: callq  0x00007f75853729fa
  0x00007f757058ffbc: hlt    
  0x00007f757058ffbd: cmp    $0xffffff,%ebx
  0x00007f757058ffc3: ja     0x00007f75705903bb
  0x00007f757058ffc9: mov    0x70(%r15),%rax
  0x00007f757058ffcd: mov    0x80(%r15),%rcx
  0x00007f757058ffd4: sub    %rax,%rcx
  0x00007f757058ffd7: shr    $0x3,%rcx
  0x00007f757058ffdb: cmp    0x90(%r15),%rcx
  0x00007f757058ffe2: jle    0x00007f7570590006
  0x00007f757058ffe8: movabs $0x4,%rsi
  0x00007f757058fff2: add    %rsi,0x90(%r15)
  0x00007f757058fff9: addl   $0x1,0xb0(%r15)
  0x00007f7570590001: jmpq   0x00007f75705902a6
  0x00007f7570590006: addl   $0x1,0xa0(%r15)
  0x00007f757059000e: add    %ecx,0xa4(%r15)
  0x00007f7570590015: test   %rax,%rax
  0x00007f7570590018: je     0x00007f7570590055
  0x00007f757059001e: movabs $0x201,%r10
  0x00007f7570590028: mov    %r10,(%rax)
  0x00007f757059002b: sub    $0x2,%rcx
  0x00007f757059002f: add    $0x2,%rcx
  0x00007f7570590033: shl    %rcx
  0x00007f7570590036: mov    %ecx,0xc(%rax)
  0x00007f7570590039: mov    0x159b4f18(%rip),%rcx        # 0x00007f7585f44f58
  0x00007f7570590040: shr    $0x3,%rcx
  0x00007f7570590044: mov    %ecx,0x8(%rax)
  0x00007f7570590047: mov    %rax,%rcx
  0x00007f757059004a: sub    0x68(%r15),%rcx
  0x00007f757059004e: add    %rcx,0xd8(%r15)
  0x00007f7570590055: mov    0x88(%r15),%rcx
  0x00007f757059005c: shl    $0x3,%rcx
  0x00007f7570590060: mov    0xfa92231(%rip),%rax        # 0x00007f7580022298
  0x00007f7570590067: lea    (%rax,%rcx,1),%rsi
  0x00007f757059006b: cmp    %rax,%rsi
  0x00007f757059006e: jb     0x00007f75705903bb
  0x00007f7570590074: cmp    0xfa921f5(%rip),%rsi        # 0x00007f7580022270
  0x00007f757059007b: ja     0x00007f75705903bb
  0x00007f7570590081: lock cmpxchg %rsi,0xfa9220e(%rip)        # 0x00007f7580022298
  0x00007f757059008a: jne    0x00007f7570590060
  0x00007f757059008c: push   %rsi
  0x00007f757059008d: mov    0x88(%r15),%rsi
  0x00007f7570590094: shl    $0x3,%rsi
  0x00007f7570590098: cmp    %rsi,%rcx
  0x00007f757059009b: je     0x00007f757059018f
  ;; assert(t1 != tlab size)
  0x00007f75705900a1: mov    %rsp,-0x28(%rsp)
  0x00007f75705900a6: sub    $0x80,%rsp
  0x00007f75705900ad: mov    %rax,0x78(%rsp)
  0x00007f75705900b2: mov    %rcx,0x70(%rsp)
  0x00007f75705900b7: mov    %rdx,0x68(%rsp)
  0x00007f75705900bc: mov    %rbx,0x60(%rsp)
  0x00007f75705900c1: mov    %rbp,0x50(%rsp)
  0x00007f75705900c6: mov    %rsi,0x48(%rsp)
  0x00007f75705900cb: mov    %rdi,0x40(%rsp)
  0x00007f75705900d0: mov    %r8,0x38(%rsp)
  0x00007f75705900d5: mov    %r9,0x30(%rsp)
  0x00007f75705900da: mov    %r10,0x28(%rsp)
  0x00007f75705900df: mov    %r11,0x20(%rsp)
  0x00007f75705900e4: mov    %r12,0x18(%rsp)
  0x00007f75705900e9: mov    %r13,0x10(%rsp)
  0x00007f75705900ee: mov    %r14,0x8(%rsp)
  0x00007f75705900f3: mov    %r15,(%rsp)
  0x00007f75705900f7: movabs $0x7f7585888079,%rdi
  0x00007f7570590101: movabs $0x7f75705900a1,%rsi
  0x00007f757059010b: mov    %rsp,%rdx
  0x00007f757059010e: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590112: callq  0x00007f75853729fa
  0x00007f7570590117: hlt    
  0x00007f7570590118: mov    %rsp,-0x28(%rsp)
  0x00007f757059011d: sub    $0x80,%rsp
  0x00007f7570590124: mov    %rax,0x78(%rsp)
  0x00007f7570590129: mov    %rcx,0x70(%rsp)
  0x00007f757059012e: mov    %rdx,0x68(%rsp)
  0x00007f7570590133: mov    %rbx,0x60(%rsp)
  0x00007f7570590138: mov    %rbp,0x50(%rsp)
  0x00007f757059013d: mov    %rsi,0x48(%rsp)
  0x00007f7570590142: mov    %rdi,0x40(%rsp)
  0x00007f7570590147: mov    %r8,0x38(%rsp)
  0x00007f757059014c: mov    %r9,0x30(%rsp)
  0x00007f7570590151: mov    %r10,0x28(%rsp)
  0x00007f7570590156: mov    %r11,0x20(%rsp)
  0x00007f757059015b: mov    %r12,0x18(%rsp)
  0x00007f7570590160: mov    %r13,0x10(%rsp)
  0x00007f7570590165: mov    %r14,0x8(%rsp)
  0x00007f757059016a: mov    %r15,(%rsp)
  0x00007f757059016e: movabs $0x7f75856bea2b,%rdi
  0x00007f7570590178: movabs $0x7f7570590118,%rsi
  0x00007f7570590182: mov    %rsp,%rdx
  0x00007f7570590185: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590189: callq  0x00007f75853729fa
  0x00007f757059018e: hlt    
  0x00007f757059018f: pop    %rsi
  0x00007f7570590190: mov    %rax,0x68(%r15)
  0x00007f7570590194: mov    %rax,0x70(%r15)
  0x00007f7570590198: add    %rcx,%rax
  0x00007f757059019b: sub    $0x10,%rax
  0x00007f757059019f: mov    %rax,0x80(%r15)
  0x00007f75705901a6: jmpq   0x00007f75705901ab
  0x00007f75705901ab: mov    0xc(%rdx),%ecx
  0x00007f75705901ae: mov    %ebx,%esi
  0x00007f75705901b0: shl    %cl,%rsi
  0x00007f75705901b3: shr    $0x10,%rcx
  0x00007f75705901b7: and    $0xff,%rcx
  0x00007f75705901be: add    %rcx,%rsi
  0x00007f75705901c1: add    $0x7,%rsi
  0x00007f75705901c5: and    $0xfffffffffffffff8,%rsi
  0x00007f75705901c9: mov    0x70(%r15),%rax
  0x00007f75705901cd: lea    (%rax,%rsi,1),%rdi
  0x00007f75705901d1: cmp    0x80(%r15),%rdi
  0x00007f75705901d8: ja     0x00007f75705903bb
  0x00007f75705901de: mov    %rdi,0x70(%r15)
  0x00007f75705901e2: movq   $0x1,(%rax)
  0x00007f75705901e9: mov    %rdx,%rcx
  0x00007f75705901ec: shr    $0x3,%rcx
  0x00007f75705901f0: mov    %ecx,0x8(%rax)
  0x00007f75705901f3: mov    %ebx,0xc(%rax)
  0x00007f75705901f6: mov    0xe(%rdx),%cl
  0x00007f75705901f9: and    $0xff,%rcx
  0x00007f7570590200: sub    %rcx,%rsi
  0x00007f7570590203: add    %rax,%rcx
  0x00007f7570590206: sub    $0x0,%rsi
  0x00007f757059020a: je     0x00007f75705902a5
  0x00007f7570590210: test   $0x7,%rsi
  0x00007f7570590217: je     0x00007f7570590294
  0x00007f757059021d: mov    %rsp,-0x28(%rsp)
  0x00007f7570590222: sub    $0x80,%rsp
  0x00007f7570590229: mov    %rax,0x78(%rsp)
  0x00007f757059022e: mov    %rcx,0x70(%rsp)
  0x00007f7570590233: mov    %rdx,0x68(%rsp)
  0x00007f7570590238: mov    %rbx,0x60(%rsp)
  0x00007f757059023d: mov    %rbp,0x50(%rsp)
  0x00007f7570590242: mov    %rsi,0x48(%rsp)
  0x00007f7570590247: mov    %rdi,0x40(%rsp)
  0x00007f757059024c: mov    %r8,0x38(%rsp)
  0x00007f7570590251: mov    %r9,0x30(%rsp)
  0x00007f7570590256: mov    %r10,0x28(%rsp)
  0x00007f757059025b: mov    %r11,0x20(%rsp)
  0x00007f7570590260: mov    %r12,0x18(%rsp)
  0x00007f7570590265: mov    %r13,0x10(%rsp)
  0x00007f757059026a: mov    %r14,0x8(%rsp)
  0x00007f757059026f: mov    %r15,(%rsp)
  0x00007f7570590273: movabs $0x7f75856e9fc8,%rdi
  0x00007f757059027d: movabs $0x7f757059021d,%rsi
  0x00007f7570590287: mov    %rsp,%rdx
  0x00007f757059028a: and    $0xfffffffffffffff0,%rsp
  0x00007f757059028e: callq  0x00007f75853729fa
  0x00007f7570590293: hlt    
  0x00007f7570590294: xor    %rdi,%rdi
  0x00007f7570590297: shr    $0x3,%rsi
  0x00007f757059029b: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f75705902a0: dec    %rsi
  0x00007f75705902a3: jne    0x00007f757059029b
  0x00007f75705902a5: retq   
  0x00007f75705902a6: mov    0xc(%rdx),%ecx
  0x00007f75705902a9: mov    %ebx,%esi
  0x00007f75705902ab: shl    %cl,%rsi
  0x00007f75705902ae: shr    $0x10,%rcx
  0x00007f75705902b2: and    $0xff,%rcx
  0x00007f75705902b9: add    %rcx,%rsi
  0x00007f75705902bc: add    $0x7,%rsi
  0x00007f75705902c0: and    $0xfffffffffffffff8,%rsi
  0x00007f75705902c4: mov    0xfa91fcd(%rip),%rax        # 0x00007f7580022298
  0x00007f75705902cb: lea    (%rax,%rsi,1),%rcx
  0x00007f75705902cf: cmp    %rax,%rcx
  0x00007f75705902d2: jb     0x00007f75705903bb
  0x00007f75705902d8: cmp    0xfa91f91(%rip),%rcx        # 0x00007f7580022270
  0x00007f75705902df: ja     0x00007f75705903bb
  0x00007f75705902e5: lock cmpxchg %rcx,0xfa91faa(%rip)        # 0x00007f7580022298
  0x00007f75705902ee: jne    0x00007f75705902c4
  0x00007f75705902f0: add    %rsi,0xd8(%r15)
  0x00007f75705902f7: movq   $0x1,(%rax)
  0x00007f75705902fe: mov    %rdx,%rcx
  0x00007f7570590301: shr    $0x3,%rcx
  0x00007f7570590305: mov    %ecx,0x8(%rax)
  0x00007f7570590308: mov    %ebx,0xc(%rax)
  0x00007f757059030b: mov    0xe(%rdx),%cl
  0x00007f757059030e: and    $0xff,%rcx
  0x00007f7570590315: sub    %rcx,%rsi
  0x00007f7570590318: add    %rax,%rcx
  0x00007f757059031b: sub    $0x0,%rsi
  0x00007f757059031f: je     0x00007f75705903ba
  0x00007f7570590325: test   $0x7,%rsi
  0x00007f757059032c: je     0x00007f75705903a9
  0x00007f7570590332: mov    %rsp,-0x28(%rsp)
  0x00007f7570590337: sub    $0x80,%rsp
  0x00007f757059033e: mov    %rax,0x78(%rsp)
  0x00007f7570590343: mov    %rcx,0x70(%rsp)
  0x00007f7570590348: mov    %rdx,0x68(%rsp)
  0x00007f757059034d: mov    %rbx,0x60(%rsp)
  0x00007f7570590352: mov    %rbp,0x50(%rsp)
  0x00007f7570590357: mov    %rsi,0x48(%rsp)
  0x00007f757059035c: mov    %rdi,0x40(%rsp)
  0x00007f7570590361: mov    %r8,0x38(%rsp)
  0x00007f7570590366: mov    %r9,0x30(%rsp)
  0x00007f757059036b: mov    %r10,0x28(%rsp)
  0x00007f7570590370: mov    %r11,0x20(%rsp)
  0x00007f7570590375: mov    %r12,0x18(%rsp)
  0x00007f757059037a: mov    %r13,0x10(%rsp)
  0x00007f757059037f: mov    %r14,0x8(%rsp)
  0x00007f7570590384: mov    %r15,(%rsp)
  0x00007f7570590388: movabs $0x7f75856e9fc8,%rdi
  0x00007f7570590392: movabs $0x7f7570590332,%rsi
  0x00007f757059039c: mov    %rsp,%rdx
  0x00007f757059039f: and    $0xfffffffffffffff0,%rsp
  0x00007f75705903a3: callq  0x00007f75853729fa
  0x00007f75705903a8: hlt    
  0x00007f75705903a9: xor    %rdi,%rdi
  0x00007f75705903ac: shr    $0x3,%rsi
  0x00007f75705903b0: mov    %rdi,-0x8(%rcx,%rsi,8)
  0x00007f75705903b5: dec    %rsi
  0x00007f75705903b8: jne    0x00007f75705903b0
  0x00007f75705903ba: retq   
  0x00007f75705903bb: push   %rbp
  0x00007f75705903bc: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f75705903bf: mov    %rsp,-0x28(%rsp)
  0x00007f75705903c4: sub    $0x80,%rsp
  0x00007f75705903cb: mov    %rax,0x78(%rsp)
  0x00007f75705903d0: mov    %rcx,0x70(%rsp)
  0x00007f75705903d5: mov    %rdx,0x68(%rsp)
  0x00007f75705903da: mov    %rbx,0x60(%rsp)
  0x00007f75705903df: mov    %rbp,0x50(%rsp)
  0x00007f75705903e4: mov    %rsi,0x48(%rsp)
  0x00007f75705903e9: mov    %rdi,0x40(%rsp)
  0x00007f75705903ee: mov    %r8,0x38(%rsp)
  0x00007f75705903f3: mov    %r9,0x30(%rsp)
  0x00007f75705903f8: mov    %r10,0x28(%rsp)
  0x00007f75705903fd: mov    %r11,0x20(%rsp)
  0x00007f7570590402: mov    %r12,0x18(%rsp)
  0x00007f7570590407: mov    %r13,0x10(%rsp)
  0x00007f757059040c: mov    %r14,0x8(%rsp)
  0x00007f7570590411: mov    %r15,(%rsp)
  0x00007f7570590415: sub    $0x150,%rsp
  0x00007f757059041c: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570590428: vmovsd %xmm0,0x8(%rsp)
  0x00007f757059042e: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570590434: vmovsd %xmm2,0x18(%rsp)
  0x00007f757059043a: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570590440: vmovsd %xmm4,0x28(%rsp)
  0x00007f7570590446: vmovsd %xmm5,0x30(%rsp)
  0x00007f757059044c: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570590452: vmovsd %xmm7,0x40(%rsp)
  0x00007f7570590458: vmovsd %xmm8,0x48(%rsp)
  0x00007f757059045e: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570590464: vmovsd %xmm10,0x58(%rsp)
  0x00007f757059046a: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570590470: vmovsd %xmm12,0x68(%rsp)
  0x00007f7570590476: vmovsd %xmm13,0x70(%rsp)
  0x00007f757059047c: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570590482: vmovsd %xmm15,0x80(%rsp)
  0x00007f757059048b: mov    %rdx,%rsi
  0x00007f757059048e: mov    %rbx,%rdx
  0x00007f7570590491: mov    %r15,%rdi
  0x00007f7570590494: mov    %rbp,0x210(%r15)
  0x00007f757059049b: mov    %rsp,0x200(%r15)
  0x00007f75705904a2: callq  0x00007f7584e5157e
  0x00007f75705904a7: push   %rax
  0x00007f75705904a8: push   %rdi
  0x00007f75705904a9: push   %rsi
  0x00007f75705904aa: push   %rdx
  0x00007f75705904ab: push   %rcx
  0x00007f75705904ac: push   %r8
  0x00007f75705904ae: push   %r9
  0x00007f75705904b0: push   %r10
  0x00007f75705904b2: mov    %rsp,%r10
  0x00007f75705904b5: and    $0xfffffffffffffff0,%rsp
  0x00007f75705904b9: push   %r10
  0x00007f75705904bb: push   %r11
  0x00007f75705904bd: mov    $0x1,%edi
  0x00007f75705904c2: callq  0x00007f7585f5a2d0
  0x00007f75705904c7: pop    %r11
  0x00007f75705904c9: pop    %rsp
  0x00007f75705904ca: pop    %r10
  0x00007f75705904cc: pop    %r9
  0x00007f75705904ce: pop    %r8
  0x00007f75705904d0: pop    %rcx
  0x00007f75705904d1: pop    %rdx
  0x00007f75705904d2: pop    %rsi
  0x00007f75705904d3: pop    %rdi
  0x00007f75705904d4: cmp    %rax,%r15
  0x00007f75705904d7: je     0x00007f7570590559
  0x00007f75705904dd: callq  0x00007f7585459a22
  0x00007f75705904e2: mov    %rsp,-0x28(%rsp)
  0x00007f75705904e7: sub    $0x80,%rsp
  0x00007f75705904ee: mov    %rax,0x78(%rsp)
  0x00007f75705904f3: mov    %rcx,0x70(%rsp)
  0x00007f75705904f8: mov    %rdx,0x68(%rsp)
  0x00007f75705904fd: mov    %rbx,0x60(%rsp)
  0x00007f7570590502: mov    %rbp,0x50(%rsp)
  0x00007f7570590507: mov    %rsi,0x48(%rsp)
  0x00007f757059050c: mov    %rdi,0x40(%rsp)
  0x00007f7570590511: mov    %r8,0x38(%rsp)
  0x00007f7570590516: mov    %r9,0x30(%rsp)
  0x00007f757059051b: mov    %r10,0x28(%rsp)
  0x00007f7570590520: mov    %r11,0x20(%rsp)
  0x00007f7570590525: mov    %r12,0x18(%rsp)
  0x00007f757059052a: mov    %r13,0x10(%rsp)
  0x00007f757059052f: mov    %r14,0x8(%rsp)
  0x00007f7570590534: mov    %r15,(%rsp)
  0x00007f7570590538: movabs $0x7f75856f3278,%rdi
  0x00007f7570590542: movabs $0x7f75705904e2,%rsi
  0x00007f757059054c: mov    %rsp,%rdx
  0x00007f757059054f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590553: callq  0x00007f75853729fa
  0x00007f7570590558: hlt    
  0x00007f7570590559: pop    %rax
  0x00007f757059055a: movabs $0x0,%r10
  0x00007f7570590564: mov    %r10,0x200(%r15)
  0x00007f757059056b: movabs $0x0,%r10
  0x00007f7570590575: mov    %r10,0x210(%r15)
  0x00007f757059057c: movabs $0x0,%r10
  0x00007f7570590586: mov    %r10,0x208(%r15)
  0x00007f757059058d: cmpq   $0x0,0x8(%r15)
  0x00007f7570590595: je     0x00007f75705905b5
  0x00007f757059059b: mov    0x8(%r15),%rax
  0x00007f757059059f: movabs $0x0,%r10
  0x00007f75705905a9: mov    %r10,0x260(%r15)
  0x00007f75705905b0: jmpq   0x00007f757055b240
  0x00007f75705905b5: mov    0x260(%r15),%rax
  0x00007f75705905bc: movabs $0x0,%r10
  0x00007f75705905c6: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f75705905cd: vmovsd 0x8(%rsp),%xmm0
  0x00007f75705905d3: vmovsd 0x10(%rsp),%xmm1
  0x00007f75705905d9: vmovsd 0x18(%rsp),%xmm2
  0x00007f75705905df: vmovsd 0x20(%rsp),%xmm3
  0x00007f75705905e5: vmovsd 0x28(%rsp),%xmm4
  0x00007f75705905eb: vmovsd 0x30(%rsp),%xmm5
  0x00007f75705905f1: vmovsd 0x38(%rsp),%xmm6
  0x00007f75705905f7: vmovsd 0x40(%rsp),%xmm7
  0x00007f75705905fd: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570590603: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570590609: vmovsd 0x58(%rsp),%xmm10
  0x00007f757059060f: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570590615: vmovsd 0x68(%rsp),%xmm12
  0x00007f757059061b: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570590621: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570590627: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570590630: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059063c: je     0x00007f75705906b9
  0x00007f7570590642: mov    %rsp,-0x28(%rsp)
  0x00007f7570590647: sub    $0x80,%rsp
  0x00007f757059064e: mov    %rax,0x78(%rsp)
  0x00007f7570590653: mov    %rcx,0x70(%rsp)
  0x00007f7570590658: mov    %rdx,0x68(%rsp)
  0x00007f757059065d: mov    %rbx,0x60(%rsp)
  0x00007f7570590662: mov    %rbp,0x50(%rsp)
  0x00007f7570590667: mov    %rsi,0x48(%rsp)
  0x00007f757059066c: mov    %rdi,0x40(%rsp)
  0x00007f7570590671: mov    %r8,0x38(%rsp)
  0x00007f7570590676: mov    %r9,0x30(%rsp)
  0x00007f757059067b: mov    %r10,0x28(%rsp)
  0x00007f7570590680: mov    %r11,0x20(%rsp)
  0x00007f7570590685: mov    %r12,0x18(%rsp)
  0x00007f757059068a: mov    %r13,0x10(%rsp)
  0x00007f757059068f: mov    %r14,0x8(%rsp)
  0x00007f7570590694: mov    %r15,(%rsp)
  0x00007f7570590698: movabs $0x7f75856f340f,%rdi
  0x00007f75705906a2: movabs $0x7f7570590642,%rsi
  0x00007f75705906ac: mov    %rsp,%rdx
  0x00007f75705906af: and    $0xfffffffffffffff0,%rsp
  0x00007f75705906b3: callq  0x00007f75853729fa
  0x00007f75705906b8: hlt    
  0x00007f75705906b9: add    $0x150,%rsp
  0x00007f75705906c0: mov    (%rsp),%r15
  0x00007f75705906c4: mov    0x8(%rsp),%r14
  0x00007f75705906c9: mov    0x10(%rsp),%r13
  0x00007f75705906ce: mov    0x18(%rsp),%r12
  0x00007f75705906d3: mov    0x20(%rsp),%r11
  0x00007f75705906d8: mov    0x28(%rsp),%r10
  0x00007f75705906dd: mov    0x30(%rsp),%r9
  0x00007f75705906e2: mov    0x38(%rsp),%r8
  0x00007f75705906e7: mov    0x40(%rsp),%rdi
  0x00007f75705906ec: mov    0x48(%rsp),%rsi
  0x00007f75705906f1: mov    0x50(%rsp),%rbp
  0x00007f75705906f6: mov    0x60(%rsp),%rbx
  0x00007f75705906fb: mov    0x68(%rsp),%rdx
  0x00007f7570590700: mov    0x70(%rsp),%rcx
  0x00007f7570590705: add    $0x80,%rsp
  0x00007f757059070c: leaveq 
  0x00007f757059070d: retq   
  0x00007f757059070e: nop
  0x00007f757059070f: nop

Decoding RuntimeStub - _multianewarray3_Java 0x00007f757055ba90
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f757055bae0: sub    $0x8,%rsp
  0x00007f757055bae7: mov    %rbp,(%rsp)
  0x00007f757055baeb: mov    %rsp,0x200(%r15)
  0x00007f757055baf2: mov    %rsi,%rdi
  0x00007f757055baf5: mov    %edx,%esi
  0x00007f757055baf7: mov    %ecx,%edx
  0x00007f757055baf9: mov    %r8d,%ecx
  0x00007f757055bafc: mov    %r15,%r8
  0x00007f757055baff: movabs $0x7f758550f21e,%r10
  0x00007f757055bb09: callq  *%r10
  0x00007f757055bb0c: mov    %r12,0x200(%r15)
  0x00007f757055bb13: mov    %r12,0x208(%r15)
  0x00007f757055bb1a: mov    0x260(%r15),%rax
  0x00007f757055bb21: mov    %r12,0x260(%r15)
  0x00007f757055bb28: cmp    0x8(%r15),%r12
  0x00007f757055bb2c: jne    0x00007f757055bb30
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f757055bb2e: pop    %rbp
  0x00007f757055bb2f: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f757055bb30: movabs $0x7f7570369420,%r10
  0x00007f757055bb3a: xor    %ebx,%ebx
  0x00007f757055bb3c: pop    %rbp
  0x00007f757055bb3d: jmpq   *%r10

  0x00007f7570563660: hlt    

MethodHandle::interpreter_entry::_invokeBasic [0x00007f7570563661, 0x00007f75705638c6[ (613 bytes)
Decoding RuntimeStub - new_multi_array Runtime1 stub 0x00007f7570590750
  0x00007f75705907e0: push   %rbp
  0x00007f75705907e1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f75705907e4: mov    %rsp,-0x28(%rsp)
  0x00007f75705907e9: sub    $0x80,%rsp
  0x00007f75705907f0: mov    %rax,0x78(%rsp)
  0x00007f75705907f5: mov    %rcx,0x70(%rsp)
  0x00007f75705907fa: mov    %rdx,0x68(%rsp)
  0x00007f75705907ff: mov    %rbx,0x60(%rsp)
  0x00007f7570590804: mov    %rbp,0x50(%rsp)
  0x00007f7570590809: mov    %rsi,0x48(%rsp)
  0x00007f757059080e: mov    %rdi,0x40(%rsp)
  0x00007f7570590813: mov    %r8,0x38(%rsp)
  0x00007f7570590818: mov    %r9,0x30(%rsp)
  0x00007f757059081d: mov    %r10,0x28(%rsp)
  0x00007f7570590822: mov    %r11,0x20(%rsp)
  0x00007f7570590827: mov    %r12,0x18(%rsp)
  0x00007f757059082c: mov    %r13,0x10(%rsp)
  0x00007f7570590831: mov    %r14,0x8(%rsp)
  0x00007f7570590836: mov    %r15,(%rsp)
  0x00007f757059083a: sub    $0x150,%rsp
  0x00007f7570590841: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059084d: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570590853: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570590859: vmovsd %xmm2,0x18(%rsp)
  0x00007f757059085f: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570590865: vmovsd %xmm4,0x28(%rsp)
  0x00007f757059086b: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570590871: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570590877: vmovsd %xmm7,0x40(%rsp)
  0x00007f757059087d: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570590883: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570590889: vmovsd %xmm10,0x58(%rsp)
  0x00007f757059088f: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570590895: vmovsd %xmm12,0x68(%rsp)
  0x00007f757059089b: vmovsd %xmm13,0x70(%rsp)
  0x00007f75705908a1: vmovsd %xmm14,0x78(%rsp)
  0x00007f75705908a7: vmovsd %xmm15,0x80(%rsp)
  0x00007f75705908b0: mov    %rax,%rsi
  0x00007f75705908b3: mov    %rbx,%rdx
  0x00007f75705908b6: mov    %rcx,%rcx
  0x00007f75705908b9: mov    %r15,%rdi
  0x00007f75705908bc: mov    %rbp,0x210(%r15)
  0x00007f75705908c3: mov    %rsp,0x200(%r15)
  0x00007f75705908ca: callq  0x00007f7584e517ea
  0x00007f75705908cf: push   %rax
  0x00007f75705908d0: push   %rdi
  0x00007f75705908d1: push   %rsi
  0x00007f75705908d2: push   %rdx
  0x00007f75705908d3: push   %rcx
  0x00007f75705908d4: push   %r8
  0x00007f75705908d6: push   %r9
  0x00007f75705908d8: push   %r10
  0x00007f75705908da: mov    %rsp,%r10
  0x00007f75705908dd: and    $0xfffffffffffffff0,%rsp
  0x00007f75705908e1: push   %r10
  0x00007f75705908e3: push   %r11
  0x00007f75705908e5: mov    $0x1,%edi
  0x00007f75705908ea: callq  0x00007f7585f5a2d0
  0x00007f75705908ef: pop    %r11
  0x00007f75705908f1: pop    %rsp
  0x00007f75705908f2: pop    %r10
  0x00007f75705908f4: pop    %r9
  0x00007f75705908f6: pop    %r8
  0x00007f75705908f8: pop    %rcx
  0x00007f75705908f9: pop    %rdx
  0x00007f75705908fa: pop    %rsi
  0x00007f75705908fb: pop    %rdi
  0x00007f75705908fc: cmp    %rax,%r15
  0x00007f75705908ff: je     0x00007f7570590981
  0x00007f7570590905: callq  0x00007f7585459a22
  0x00007f757059090a: mov    %rsp,-0x28(%rsp)
  0x00007f757059090f: sub    $0x80,%rsp
  0x00007f7570590916: mov    %rax,0x78(%rsp)
  0x00007f757059091b: mov    %rcx,0x70(%rsp)
  0x00007f7570590920: mov    %rdx,0x68(%rsp)
  0x00007f7570590925: mov    %rbx,0x60(%rsp)
  0x00007f757059092a: mov    %rbp,0x50(%rsp)
  0x00007f757059092f: mov    %rsi,0x48(%rsp)
  0x00007f7570590934: mov    %rdi,0x40(%rsp)
  0x00007f7570590939: mov    %r8,0x38(%rsp)
  0x00007f757059093e: mov    %r9,0x30(%rsp)
  0x00007f7570590943: mov    %r10,0x28(%rsp)
  0x00007f7570590948: mov    %r11,0x20(%rsp)
  0x00007f757059094d: mov    %r12,0x18(%rsp)
  0x00007f7570590952: mov    %r13,0x10(%rsp)
  0x00007f7570590957: mov    %r14,0x8(%rsp)
  0x00007f757059095c: mov    %r15,(%rsp)
  0x00007f7570590960: movabs $0x7f75856f3278,%rdi
  0x00007f757059096a: movabs $0x7f757059090a,%rsi
  0x00007f7570590974: mov    %rsp,%rdx
  0x00007f7570590977: and    $0xfffffffffffffff0,%rsp
  0x00007f757059097b: callq  0x00007f75853729fa
  0x00007f7570590980: hlt    
  0x00007f7570590981: pop    %rax
  0x00007f7570590982: movabs $0x0,%r10
  0x00007f757059098c: mov    %r10,0x200(%r15)
  0x00007f7570590993: movabs $0x0,%r10
  0x00007f757059099d: mov    %r10,0x210(%r15)
  0x00007f75705909a4: movabs $0x0,%r10
  0x00007f75705909ae: mov    %r10,0x208(%r15)
  0x00007f75705909b5: cmpq   $0x0,0x8(%r15)
  0x00007f75705909bd: je     0x00007f75705909dd
  0x00007f75705909c3: mov    0x8(%r15),%rax
  0x00007f75705909c7: movabs $0x0,%r10
  0x00007f75705909d1: mov    %r10,0x260(%r15)
  0x00007f75705909d8: jmpq   0x00007f757055b240
  0x00007f75705909dd: mov    0x260(%r15),%rax
  0x00007f75705909e4: movabs $0x0,%r10
  0x00007f75705909ee: mov    %r10,0x260(%r15)
  ;; restore_live_registers_except_rax
  0x00007f75705909f5: vmovsd 0x8(%rsp),%xmm0
  0x00007f75705909fb: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570590a01: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570590a07: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570590a0d: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570590a13: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570590a19: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570590a1f: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570590a25: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570590a2b: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570590a31: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570590a37: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570590a3d: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570590a43: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570590a49: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570590a4f: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570590a58: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570590a64: je     0x00007f7570590ae1
  0x00007f7570590a6a: mov    %rsp,-0x28(%rsp)
  0x00007f7570590a6f: sub    $0x80,%rsp
  0x00007f7570590a76: mov    %rax,0x78(%rsp)
  0x00007f7570590a7b: mov    %rcx,0x70(%rsp)
  0x00007f7570590a80: mov    %rdx,0x68(%rsp)
  0x00007f7570590a85: mov    %rbx,0x60(%rsp)
  0x00007f7570590a8a: mov    %rbp,0x50(%rsp)
  0x00007f7570590a8f: mov    %rsi,0x48(%rsp)
  0x00007f7570590a94: mov    %rdi,0x40(%rsp)
  0x00007f7570590a99: mov    %r8,0x38(%rsp)
  0x00007f7570590a9e: mov    %r9,0x30(%rsp)
  0x00007f7570590aa3: mov    %r10,0x28(%rsp)
  0x00007f7570590aa8: mov    %r11,0x20(%rsp)
  0x00007f7570590aad: mov    %r12,0x18(%rsp)
  0x00007f7570590ab2: mov    %r13,0x10(%rsp)
  0x00007f7570590ab7: mov    %r14,0x8(%rsp)
  0x00007f7570590abc: mov    %r15,(%rsp)
  0x00007f7570590ac0: movabs $0x7f75856f340f,%rdi
  0x00007f7570590aca: movabs $0x7f7570590a6a,%rsi
  0x00007f7570590ad4: mov    %rsp,%rdx
  0x00007f7570590ad7: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590adb: callq  0x00007f75853729fa
  0x00007f7570590ae0: hlt    
  0x00007f7570590ae1: add    $0x150,%rsp
  0x00007f7570590ae8: mov    (%rsp),%r15
  0x00007f7570590aec: mov    0x8(%rsp),%r14
  0x00007f7570590af1: mov    0x10(%rsp),%r13
  0x00007f7570590af6: mov    0x18(%rsp),%r12
  0x00007f7570590afb: mov    0x20(%rsp),%r11
  0x00007f7570590b00: mov    0x28(%rsp),%r10
  0x00007f7570590b05: mov    0x30(%rsp),%r9
  0x00007f7570590b0a: mov    0x38(%rsp),%r8
  0x00007f7570590b0f: mov    0x40(%rsp),%rdi
  0x00007f7570590b14: mov    0x48(%rsp),%rsi
  0x00007f7570590b19: mov    0x50(%rsp),%rbp
  0x00007f7570590b1e: mov    0x60(%rsp),%rbx
  0x00007f7570590b23: mov    0x68(%rsp),%rdx
  0x00007f7570590b28: mov    0x70(%rsp),%rcx
  0x00007f7570590b2d: add    $0x80,%rsp
  0x00007f7570590b34: leaveq 
  0x00007f7570590b35: retq   
  0x00007f7570590b36: nop
  0x00007f7570590b37: nop

  0x00007f7570563661: nop
  0x00007f7570563662: nop
  0x00007f7570563663: nop
  0x00007f7570563664: nop
  0x00007f7570563665: nop
  0x00007f7570563666: nop
  0x00007f7570563667: nop
  0x00007f7570563668: nop
  0x00007f7570563669: nop
  0x00007f757056366a: nop
  0x00007f757056366b: nop
  0x00007f757056366c: nop
  0x00007f757056366d: nop
  0x00007f757056366e: nop
  0x00007f757056366f: nop
  0x00007f7570563670: nop
Decoding RuntimeStub - handle_exception_nofpu Runtime1 stub 0x00007f7570590b50
  0x00007f7570590c00: push   %rbp
  0x00007f7570590c01: mov    %rsp,%rbp
  ;; generate_handle_exception
  ;; save_live_registers
  0x00007f7570590c04: mov    %rsp,-0x28(%rsp)
  0x00007f7570590c09: sub    $0x80,%rsp
  0x00007f7570590c10: mov    %rax,0x78(%rsp)
  0x00007f7570590c15: mov    %rcx,0x70(%rsp)
  0x00007f7570590c1a: mov    %rdx,0x68(%rsp)
  0x00007f7570590c1f: mov    %rbx,0x60(%rsp)
  0x00007f7570590c24: mov    %rbp,0x50(%rsp)
  0x00007f7570590c29: mov    %rsi,0x48(%rsp)
  0x00007f7570590c2e: mov    %rdi,0x40(%rsp)
  0x00007f7570590c33: mov    %r8,0x38(%rsp)
  0x00007f7570590c38: mov    %r9,0x30(%rsp)
  0x00007f7570590c3d: mov    %r10,0x28(%rsp)
  0x00007f7570590c42: mov    %r11,0x20(%rsp)
  0x00007f7570590c47: mov    %r12,0x18(%rsp)
  0x00007f7570590c4c: mov    %r13,0x10(%rsp)
  0x00007f7570590c51: mov    %r14,0x8(%rsp)
  0x00007f7570590c56: mov    %r15,(%rsp)
  0x00007f7570590c5a: sub    $0x150,%rsp
  0x00007f7570590c61: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570590c6d: movabs $0xdead,%rbx
  0x00007f7570590c77: movabs $0xdead,%rcx
  0x00007f7570590c81: movabs $0xdead,%rsi
  0x00007f7570590c8b: movabs $0xdead,%rdi
  0x00007f7570590c95: cmpq   $0x0,0x2d0(%r15)
  0x00007f7570590ca0: je     0x00007f7570590d1d
  0x00007f7570590ca6: mov    %rsp,-0x28(%rsp)
  0x00007f7570590cab: sub    $0x80,%rsp
  0x00007f7570590cb2: mov    %rax,0x78(%rsp)
  0x00007f7570590cb7: mov    %rcx,0x70(%rsp)
  0x00007f7570590cbc: mov    %rdx,0x68(%rsp)
  0x00007f7570590cc1: mov    %rbx,0x60(%rsp)
  0x00007f7570590cc6: mov    %rbp,0x50(%rsp)
  0x00007f7570590ccb: mov    %rsi,0x48(%rsp)
  0x00007f7570590cd0: mov    %rdi,0x40(%rsp)
  0x00007f7570590cd5: mov    %r8,0x38(%rsp)
  0x00007f7570590cda: mov    %r9,0x30(%rsp)
  0x00007f7570590cdf: mov    %r10,0x28(%rsp)
  0x00007f7570590ce4: mov    %r11,0x20(%rsp)
  0x00007f7570590ce9: mov    %r12,0x18(%rsp)
  0x00007f7570590cee: mov    %r13,0x10(%rsp)
  0x00007f7570590cf3: mov    %r14,0x8(%rsp)
  0x00007f7570590cf8: mov    %r15,(%rsp)
  0x00007f7570590cfc: movabs $0x7f75856f3464,%rdi
  0x00007f7570590d06: movabs $0x7f7570590ca6,%rsi
  0x00007f7570590d10: mov    %rsp,%rdx
  0x00007f7570590d13: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590d17: callq  0x00007f75853729fa
  0x00007f7570590d1c: hlt    
  0x00007f7570590d1d: cmpq   $0x0,0x2d8(%r15)
  0x00007f7570590d28: je     0x00007f7570590da5
  0x00007f7570590d2e: mov    %rsp,-0x28(%rsp)
  0x00007f7570590d33: sub    $0x80,%rsp
  0x00007f7570590d3a: mov    %rax,0x78(%rsp)
  0x00007f7570590d3f: mov    %rcx,0x70(%rsp)
  0x00007f7570590d44: mov    %rdx,0x68(%rsp)
  0x00007f7570590d49: mov    %rbx,0x60(%rsp)
  0x00007f7570590d4e: mov    %rbp,0x50(%rsp)
  0x00007f7570590d53: mov    %rsi,0x48(%rsp)
  0x00007f7570590d58: mov    %rdi,0x40(%rsp)
  0x00007f7570590d5d: mov    %r8,0x38(%rsp)
  0x00007f7570590d62: mov    %r9,0x30(%rsp)
  0x00007f7570590d67: mov    %r10,0x28(%rsp)
  0x00007f7570590d6c: mov    %r11,0x20(%rsp)
  0x00007f7570590d71: mov    %r12,0x18(%rsp)
  0x00007f7570590d76: mov    %r13,0x10(%rsp)
  0x00007f7570590d7b: mov    %r14,0x8(%rsp)
  0x00007f7570590d80: mov    %r15,(%rsp)
  0x00007f7570590d84: movabs $0x7f75856f347e,%rdi
  0x00007f7570590d8e: movabs $0x7f7570590d2e,%rsi
  0x00007f7570590d98: mov    %rsp,%rdx
  0x00007f7570590d9b: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590d9f: callq  0x00007f75853729fa
  0x00007f7570590da4: hlt    
  0x00007f7570590da5: mov    %rax,0x2d0(%r15)
  0x00007f7570590dac: mov    %rdx,0x2d8(%r15)
  0x00007f7570590db3: mov    %rdx,0x8(%rbp)
  0x00007f7570590db7: mov    %r15,%rdi
  0x00007f7570590dba: mov    %rbp,0x210(%r15)
  0x00007f7570590dc1: mov    %rsp,0x200(%r15)
  0x00007f7570590dc8: callq  0x00007f7584e52b8c
  0x00007f7570590dcd: push   %rax
  0x00007f7570590dce: push   %rdi
  0x00007f7570590dcf: push   %rsi
  0x00007f7570590dd0: push   %rdx
  0x00007f7570590dd1: push   %rcx
  0x00007f7570590dd2: push   %r8
  0x00007f7570590dd4: push   %r9
  0x00007f7570590dd6: push   %r10
  0x00007f7570590dd8: mov    %rsp,%r10
  0x00007f7570590ddb: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590ddf: push   %r10
  0x00007f7570590de1: push   %r11
  0x00007f7570590de3: mov    $0x1,%edi
  0x00007f7570590de8: callq  0x00007f7585f5a2d0
  0x00007f7570590ded: pop    %r11
  0x00007f7570590def: pop    %rsp
  0x00007f7570590df0: pop    %r10
  0x00007f7570590df2: pop    %r9
  0x00007f7570590df4: pop    %r8
  0x00007f7570590df6: pop    %rcx
  0x00007f7570590df7: pop    %rdx
  0x00007f7570590df8: pop    %rsi
  0x00007f7570590df9: pop    %rdi
  0x00007f7570590dfa: cmp    %rax,%r15
  0x00007f7570590dfd: je     0x00007f7570590e7f
  0x00007f7570590e03: callq  0x00007f7585459a22
  0x00007f7570590e08: mov    %rsp,-0x28(%rsp)
  0x00007f7570590e0d: sub    $0x80,%rsp
  0x00007f7570590e14: mov    %rax,0x78(%rsp)
  0x00007f7570590e19: mov    %rcx,0x70(%rsp)
  0x00007f7570590e1e: mov    %rdx,0x68(%rsp)
  0x00007f7570590e23: mov    %rbx,0x60(%rsp)
  0x00007f7570590e28: mov    %rbp,0x50(%rsp)
  0x00007f7570590e2d: mov    %rsi,0x48(%rsp)
  0x00007f7570590e32: mov    %rdi,0x40(%rsp)
  0x00007f7570590e37: mov    %r8,0x38(%rsp)
  0x00007f7570590e3c: mov    %r9,0x30(%rsp)
  0x00007f7570590e41: mov    %r10,0x28(%rsp)
  0x00007f7570590e46: mov    %r11,0x20(%rsp)
  0x00007f7570590e4b: mov    %r12,0x18(%rsp)
  0x00007f7570590e50: mov    %r13,0x10(%rsp)
  0x00007f7570590e55: mov    %r14,0x8(%rsp)
  0x00007f7570590e5a: mov    %r15,(%rsp)
  0x00007f7570590e5e: movabs $0x7f75856f3278,%rdi
  0x00007f7570590e68: movabs $0x7f7570590e08,%rsi
  0x00007f7570590e72: mov    %rsp,%rdx
  0x00007f7570590e75: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590e79: callq  0x00007f75853729fa
  0x00007f7570590e7e: hlt    
  0x00007f7570590e7f: pop    %rax
  0x00007f7570590e80: movabs $0x0,%r10
  0x00007f7570590e8a: mov    %r10,0x200(%r15)
  0x00007f7570590e91: movabs $0x0,%r10
  0x00007f7570590e9b: mov    %r10,0x210(%r15)
  0x00007f7570590ea2: movabs $0x0,%r10
  0x00007f7570590eac: mov    %r10,0x208(%r15)
  0x00007f7570590eb3: cmpq   $0x0,0x8(%r15)
  0x00007f7570590ebb: je     0x00007f7570590eca
  0x00007f7570590ec1: mov    0x8(%r15),%rax
  0x00007f7570590ec5: jmpq   0x00007f757055b240
  0x00007f7570590eca: movabs $0xdead,%rbx
  0x00007f7570590ed4: movabs $0xdead,%rcx
  0x00007f7570590ede: movabs $0xdead,%rdx
  0x00007f7570590ee8: movabs $0xdead,%rsi
  0x00007f7570590ef2: movabs $0xdead,%rdi
  0x00007f7570590efc: mov    %rax,0x8(%rbp)
  ;; restore_live_registers
  0x00007f7570590f00: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570590f0c: je     0x00007f7570590f89
  0x00007f7570590f12: mov    %rsp,-0x28(%rsp)
  0x00007f7570590f17: sub    $0x80,%rsp
  0x00007f7570590f1e: mov    %rax,0x78(%rsp)
  0x00007f7570590f23: mov    %rcx,0x70(%rsp)
  0x00007f7570590f28: mov    %rdx,0x68(%rsp)
  0x00007f7570590f2d: mov    %rbx,0x60(%rsp)
  0x00007f7570590f32: mov    %rbp,0x50(%rsp)
  0x00007f7570590f37: mov    %rsi,0x48(%rsp)
  0x00007f7570590f3c: mov    %rdi,0x40(%rsp)
  0x00007f7570590f41: mov    %r8,0x38(%rsp)
  0x00007f7570590f46: mov    %r9,0x30(%rsp)
  0x00007f7570590f4b: mov    %r10,0x28(%rsp)
  0x00007f7570590f50: mov    %r11,0x20(%rsp)
  0x00007f7570590f55: mov    %r12,0x18(%rsp)
  0x00007f7570590f5a: mov    %r13,0x10(%rsp)
  0x00007f7570590f5f: mov    %r14,0x8(%rsp)
  0x00007f7570590f64: mov    %r15,(%rsp)
  0x00007f7570590f68: movabs $0x7f75856f340f,%rdi
  0x00007f7570590f72: movabs $0x7f7570590f12,%rsi
  0x00007f7570590f7c: mov    %rsp,%rdx
  0x00007f7570590f7f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570590f83: callq  0x00007f75853729fa
  0x00007f7570590f88: hlt    
  0x00007f7570590f89: add    $0x150,%rsp
  0x00007f7570590f90: mov    (%rsp),%r15
  0x00007f7570590f94: mov    0x8(%rsp),%r14
  0x00007f7570590f99: mov    0x10(%rsp),%r13
  0x00007f7570590f9e: mov    0x18(%rsp),%r12
  0x00007f7570590fa3: mov    0x20(%rsp),%r11
  0x00007f7570590fa8: mov    0x28(%rsp),%r10
  0x00007f7570590fad: mov    0x30(%rsp),%r9
  0x00007f7570590fb2: mov    0x38(%rsp),%r8
  0x00007f7570590fb7: mov    0x40(%rsp),%rdi
  0x00007f7570590fbc: mov    0x48(%rsp),%rsi
  0x00007f7570590fc1: mov    0x50(%rsp),%rbp
  0x00007f7570590fc6: mov    0x60(%rsp),%rbx
  0x00007f7570590fcb: mov    0x68(%rsp),%rdx
  0x00007f7570590fd0: mov    0x70(%rsp),%rcx
  0x00007f7570590fd5: mov    0x78(%rsp),%rax
  0x00007f7570590fda: add    $0x80,%rsp
  0x00007f7570590fe1: leaveq 
  0x00007f7570590fe2: retq   
  0x00007f7570590fe3: nop
  0x00007f7570590fe4: nop
  0x00007f7570590fe5: nop
  0x00007f7570590fe6: nop
  0x00007f7570590fe7: nop

Decoding RuntimeStub - _multianewarray4_Java 0x00007f7570591010
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570591060: sub    $0x8,%rsp
  0x00007f7570591067: mov    %rbp,(%rsp)
  0x00007f757059106b: mov    %rsp,0x200(%r15)
  0x00007f7570591072: mov    %rsi,%rdi
  0x00007f7570591075: mov    %edx,%esi
  0x00007f7570591077: mov    %ecx,%edx
  0x00007f7570591079: mov    %r8d,%ecx
  0x00007f757059107c: mov    %r9d,%r8d
  0x00007f757059107f: mov    %r15,%r9
  0x00007f7570591082: movabs $0x7f758550f4c6,%r10
  0x00007f757059108c: callq  *%r10
  0x00007f757059108f: mov    %r12,0x200(%r15)
  0x00007f7570591096: mov    %r12,0x208(%r15)
  0x00007f757059109d: mov    0x260(%r15),%rax
  0x00007f75705910a4: mov    %r12,0x260(%r15)
  0x00007f75705910ab: cmp    0x8(%r15),%r12
  0x00007f75705910af: jne    0x00007f75705910b3
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f75705910b1: pop    %rbp
  0x00007f75705910b2: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f75705910b3: movabs $0x7f7570369420,%r10
  0x00007f75705910bd: xor    %ebx,%ebx
  0x00007f75705910bf: pop    %rbp
  0x00007f75705910c0: jmpq   *%r10
  0x00007f75705910c3: hlt    
  0x00007f75705910c4: hlt    
  0x00007f75705910c5: hlt    
  0x00007f75705910c6: hlt    
  0x00007f75705910c7: hlt    

  0x00007f7570563671: nop
  0x00007f7570563672: nop
  0x00007f7570563673: nop
  0x00007f7570563674: nop
  0x00007f7570563675: nop
  0x00007f7570563676: nopDecoding RuntimeStub - handle_exception Runtime1 stub 0x00007f7570591110
  0x00007f75705911c0: push   %rbp
  0x00007f75705911c1: mov    %rsp,%rbp
  ;; generate_handle_exception
  ;; save_live_registers
  0x00007f75705911c4: mov    %rsp,-0x28(%rsp)
  0x00007f75705911c9: sub    $0x80,%rsp
  0x00007f75705911d0: mov    %rax,0x78(%rsp)
  0x00007f75705911d5: mov    %rcx,0x70(%rsp)
  0x00007f75705911da: mov    %rdx,0x68(%rsp)
  0x00007f75705911df: mov    %rbx,0x60(%rsp)
  0x00007f75705911e4: mov    %rbp,0x50(%rsp)
  0x00007f75705911e9: mov    %rsi,0x48(%rsp)
  0x00007f75705911ee: mov    %rdi,0x40(%rsp)
  0x00007f75705911f3: mov    %r8,0x38(%rsp)
  0x00007f75705911f8: mov    %r9,0x30(%rsp)
  0x00007f75705911fd: mov    %r10,0x28(%rsp)
  0x00007f7570591202: mov    %r11,0x20(%rsp)
  0x00007f7570591207: mov    %r12,0x18(%rsp)
  0x00007f757059120c: mov    %r13,0x10(%rsp)
  0x00007f7570591211: mov    %r14,0x8(%rsp)
  0x00007f7570591216: mov    %r15,(%rsp)
  0x00007f757059121a: sub    $0x150,%rsp
  0x00007f7570591221: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059122d: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570591233: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570591239: vmovsd %xmm2,0x18(%rsp)
  0x00007f757059123f: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570591245: vmovsd %xmm4,0x28(%rsp)
  0x00007f757059124b: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570591251: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570591257: vmovsd %xmm7,0x40(%rsp)
  0x00007f757059125d: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570591263: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570591269: vmovsd %xmm10,0x58(%rsp)
  0x00007f757059126f: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570591275: vmovsd %xmm12,0x68(%rsp)
  0x00007f757059127b: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570591281: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570591287: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570591290: movabs $0xdead,%rbx
  0x00007f757059129a: movabs $0xdead,%rcx
  0x00007f75705912a4: movabs $0xdead,%rsi
  0x00007f75705912ae: movabs $0xdead,%rdi
  0x00007f75705912b8: cmpq   $0x0,0x2d0(%r15)
  0x00007f75705912c3: je     0x00007f7570591340
  0x00007f75705912c9: mov    %rsp,-0x28(%rsp)
  0x00007f75705912ce: sub    $0x80,%rsp
  0x00007f75705912d5: mov    %rax,0x78(%rsp)
  0x00007f75705912da: mov    %rcx,0x70(%rsp)
  0x00007f75705912df: mov    %rdx,0x68(%rsp)
  0x00007f75705912e4: mov    %rbx,0x60(%rsp)
  0x00007f75705912e9: mov    %rbp,0x50(%rsp)
  0x00007f75705912ee: mov    %rsi,0x48(%rsp)
  0x00007f75705912f3: mov    %rdi,0x40(%rsp)
  0x00007f75705912f8: mov    %r8,0x38(%rsp)
  0x00007f75705912fd: mov    %r9,0x30(%rsp)
  0x00007f7570591302: mov    %r10,0x28(%rsp)
  0x00007f7570591307: mov    %r11,0x20(%rsp)
  0x00007f757059130c: mov    %r12,0x18(%rsp)
  0x00007f7570591311: mov    %r13,0x10(%rsp)
  0x00007f7570591316: mov    %r14,0x8(%rsp)
  0x00007f757059131b: mov    %r15,(%rsp)
  0x00007f757059131f: movabs $0x7f75856f3464,%rdi
  0x00007f7570591329: movabs $0x7f75705912c9,%rsi
  0x00007f7570591333: mov    %rsp,%rdx
  0x00007f7570591336: and    $0xfffffffffffffff0,%rsp
  0x00007f757059133a: callq  0x00007f75853729fa
  0x00007f757059133f: hlt    
  0x00007f7570591340: cmpq   $0x0,0x2d8(%r15)
  0x00007f757059134b: je     0x00007f75705913c8
  0x00007f7570591351: mov    %rsp,-0x28(%rsp)
  0x00007f7570591356: sub    $0x80,%rsp
  0x00007f757059135d: mov    %rax,0x78(%rsp)
  0x00007f7570591362: mov    %rcx,0x70(%rsp)
  0x00007f7570591367: mov    %rdx,0x68(%rsp)
  0x00007f757059136c: mov    %rbx,0x60(%rsp)
  0x00007f7570591371: mov    %rbp,0x50(%rsp)
  0x00007f7570591376: mov    %rsi,0x48(%rsp)
  0x00007f757059137b: mov    %rdi,0x40(%rsp)
  0x00007f7570591380: mov    %r8,0x38(%rsp)
  0x00007f7570591385: mov    %r9,0x30(%rsp)
  0x00007f757059138a: mov    %r10,0x28(%rsp)
  0x00007f757059138f: mov    %r11,0x20(%rsp)
  0x00007f7570591394: mov    %r12,0x18(%rsp)
  0x00007f7570591399: mov    %r13,0x10(%rsp)
  0x00007f757059139e: mov    %r14,0x8(%rsp)
  0x00007f75705913a3: mov    %r15,(%rsp)
  0x00007f75705913a7: movabs $0x7f75856f347e,%rdi
  0x00007f75705913b1: movabs $0x7f7570591351,%rsi
  0x00007f75705913bb: mov    %rsp,%rdx
  0x00007f75705913be: and    $0xfffffffffffffff0,%rsp
  0x00007f75705913c2: callq  0x00007f75853729fa
  0x00007f75705913c7: hlt    
  0x00007f75705913c8: mov    %rax,0x2d0(%r15)
  0x00007f75705913cf: mov    %rdx,0x2d8(%r15)
  0x00007f75705913d6: mov    %rdx,0x8(%rbp)
  0x00007f75705913da: mov    %r15,%rdi
  0x00007f75705913dd: mov    %rbp,0x210(%r15)
  0x00007f75705913e4: mov    %rsp,0x200(%r15)
  0x00007f75705913eb: callq  0x00007f7584e52b8c
  0x00007f75705913f0: push   %rax
  0x00007f75705913f1: push   %rdi
  0x00007f75705913f2: push   %rsi
  0x00007f75705913f3: push   %rdx
  0x00007f75705913f4: push   %rcx
  0x00007f75705913f5: push   %r8
  0x00007f75705913f7: push   %r9
  0x00007f75705913f9: push   %r10
  0x00007f75705913fb: mov    %rsp,%r10
  0x00007f75705913fe: and    $0xfffffffffffffff0,%rsp
  0x00007f7570591402: push   %r10
  0x00007f7570591404: push   %r11
  0x00007f7570591406: mov    $0x1,%edi
  0x00007f757059140b: callq  0x00007f7585f5a2d0
  0x00007f7570591410: pop    %r11
  0x00007f7570591412: pop    %rsp
  0x00007f7570591413: pop    %r10
  0x00007f7570591415: pop    %r9
  0x00007f7570591417: pop    %r8
  0x00007f7570591419: pop    %rcx
  0x00007f757059141a: pop    %rdx
  0x00007f757059141b: pop    %rsi
  0x00007f757059141c: pop    %rdi
  0x00007f757059141d: cmp    %rax,%r15
  0x00007f7570591420: je     0x00007f75705914a2
  0x00007f7570591426: callq  0x00007f7585459a22
  0x00007f757059142b: mov    %rsp,-0x28(%rsp)
  0x00007f7570591430: sub    $0x80,%rsp
  0x00007f7570591437: mov    %rax,0x78(%rsp)
  0x00007f757059143c: mov    %rcx,0x70(%rsp)
  0x00007f7570591441: mov    %rdx,0x68(%rsp)
  0x00007f7570591446: mov    %rbx,0x60(%rsp)
  0x00007f757059144b: mov    %rbp,0x50(%rsp)
  0x00007f7570591450: mov    %rsi,0x48(%rsp)
  0x00007f7570591455: mov    %rdi,0x40(%rsp)
  0x00007f757059145a: mov    %r8,0x38(%rsp)
  0x00007f757059145f: mov    %r9,0x30(%rsp)
  0x00007f7570591464: mov    %r10,0x28(%rsp)
  0x00007f7570591469: mov    %r11,0x20(%rsp)
  0x00007f757059146e: mov    %r12,0x18(%rsp)
  0x00007f7570591473: mov    %r13,0x10(%rsp)
  0x00007f7570591478: mov    %r14,0x8(%rsp)
  0x00007f757059147d: mov    %r15,(%rsp)
  0x00007f7570591481: movabs $0x7f75856f3278,%rdi
  0x00007f757059148b: movabs $0x7f757059142b,%rsi
  0x00007f7570591495: mov    %rsp,%rdx
  0x00007f7570591498: and    $0xfffffffffffffff0,%rsp
  0x00007f757059149c: callq  0x00007f75853729fa
  0x00007f75705914a1: hlt    
  0x00007f75705914a2: pop    %rax
  0x00007f75705914a3: movabs $0x0,%r10
  0x00007f75705914ad: mov    %r10,0x200(%r15)
  0x00007f75705914b4: movabs $0x0,%r10
  0x00007f75705914be: mov    %r10,0x210(%r15)
  0x00007f75705914c5: movabs $0x0,%r10
  0x00007f75705914cf: mov    %r10,0x208(%r15)
  0x00007f75705914d6: cmpq   $0x0,0x8(%r15)
  0x00007f75705914de: je     0x00007f75705914ed
  0x00007f75705914e4: mov    0x8(%r15),%rax
  0x00007f75705914e8: jmpq   0x00007f757055b240
  0x00007f75705914ed: movabs $0xdead,%rbx
  0x00007f75705914f7: movabs $0xdead,%rcx
  0x00007f7570591501: movabs $0xdead,%rdx
  0x00007f757059150b: movabs $0xdead,%rsi
  0x00007f7570591515: movabs $0xdead,%rdi
  0x00007f757059151f: mov    %rax,0x8(%rbp)
  ;; restore_live_registers
  0x00007f7570591523: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570591529: vmovsd 0x10(%rsp),%xmm1
  0x00007f757059152f: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570591535: vmovsd 0x20(%rsp),%xmm3
  0x00007f757059153b: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570591541: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570591547: vmovsd 0x38(%rsp),%xmm6
  0x00007f757059154d: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570591553: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570591559: vmovsd 0x50(%rsp),%xmm9
  0x00007f757059155f: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570591565: vmovsd 0x60(%rsp),%xmm11
  0x00007f757059156b: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570591571: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570591577: vmovsd 0x78(%rsp),%xmm14
  0x00007f757059157d: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570591586: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570591592: je     0x00007f757059160f
  0x00007f7570591598: mov    %rsp,-0x28(%rsp)
  0x00007f757059159d: sub    $0x80,%rsp
  0x00007f75705915a4: mov    %rax,0x78(%rsp)
  0x00007f75705915a9: mov    %rcx,0x70(%rsp)
  0x00007f75705915ae: mov    %rdx,0x68(%rsp)
  0x00007f75705915b3: mov    %rbx,0x60(%rsp)
  0x00007f75705915b8: mov    %rbp,0x50(%rsp)
  0x00007f75705915bd: mov    %rsi,0x48(%rsp)
  0x00007f75705915c2: mov    %rdi,0x40(%rsp)
  0x00007f75705915c7: mov    %r8,0x38(%rsp)
  0x00007f75705915cc: mov    %r9,0x30(%rsp)
  0x00007f75705915d1: mov    %r10,0x28(%rsp)
  0x00007f75705915d6: mov    %r11,0x20(%rsp)
  0x00007f75705915db: mov    %r12,0x18(%rsp)
  0x00007f75705915e0: mov    %r13,0x10(%rsp)
  0x00007f75705915e5: mov    %r14,0x8(%rsp)
  0x00007f75705915ea: mov    %r15,(%rsp)
  0x00007f75705915ee: movabs $0x7f75856f340f,%rdi
  0x00007f75705915f8: movabs $0x7f7570591598,%rsi
  0x00007f7570591602: mov    %rsp,%rdx
  0x00007f7570591605: and    $0xfffffffffffffff0,%rsp
  0x00007f7570591609: callq  0x00007f75853729fa
  0x00007f757059160e: hlt    
  0x00007f757059160f: add    $0x150,%rsp
  0x00007f7570591616: mov    (%rsp),%r15
  0x00007f757059161a: mov    0x8(%rsp),%r14
  0x00007f757059161f: mov    0x10(%rsp),%r13
  0x00007f7570591624: mov    0x18(%rsp),%r12
  0x00007f7570591629: mov    0x20(%rsp),%r11
  0x00007f757059162e: mov    0x28(%rsp),%r10
  0x00007f7570591633: mov    0x30(%rsp),%r9
  0x00007f7570591638: mov    0x38(%rsp),%r8
  0x00007f757059163d: mov    0x40(%rsp),%rdi
  0x00007f7570591642: mov    0x48(%rsp),%rsi
  0x00007f7570591647: mov    0x50(%rsp),%rbp
  0x00007f757059164c: mov    0x60(%rsp),%rbx
  0x00007f7570591651: mov    0x68(%rsp),%rdx
  0x00007f7570591656: mov    0x70(%rsp),%rcx
  0x00007f757059165b: mov    0x78(%rsp),%rax
  0x00007f7570591660: add    $0x80,%rsp
  0x00007f7570591667: leaveq 
  0x00007f7570591668: retq   
  0x00007f7570591669: nop
  0x00007f757059166a: nop
  0x00007f757059166b: nop
  0x00007f757059166c: nop
  0x00007f757059166d: nop
  0x00007f757059166e: nop
  0x00007f757059166f: nop

Decoding RuntimeStub - _multianewarray5_Java 0x00007f7570591690
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f75705916e0: sub    $0x18,%rsp
  0x00007f75705916e7: mov    %rbp,0x10(%rsp)
  0x00007f75705916ec: mov    %edi,%r10d
  0x00007f75705916ef: mov    %rsp,0x200(%r15)
  0x00007f75705916f6: mov    %rsi,%rdi
  0x00007f75705916f9: mov    %edx,%esi
  0x00007f75705916fb: mov    %ecx,%edx
  0x00007f75705916fd: mov    %r8d,%ecx
  0x00007f7570591700: mov    %r9d,%r8d
  0x00007f7570591703: mov    %r10d,%r9d
  0x00007f7570591706: mov    %r15,(%rsp)
  0x00007f757059170a: movabs $0x7f758550f77e,%r10
  0x00007f7570591714: callq  *%r10
  0x00007f7570591717: mov    %r12,0x200(%r15)
  0x00007f757059171e: mov    %r12,0x208(%r15)
  0x00007f7570591725: mov    0x260(%r15),%rax
  0x00007f757059172c: mov    %r12,0x260(%r15)
  0x00007f7570591733: cmp    0x8(%r15),%r12
  0x00007f7570591737: jne    0x00007f757059173f
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f7570591739: add    $0x10,%rsp
  0x00007f757059173d: pop    %rbp
  0x00007f757059173e: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f757059173f: movabs $0x7f7570369420,%r10
  0x00007f7570591749: xor    %ebx,%ebx
  0x00007f757059174b: add    $0x10,%rsp
  0x00007f757059174f: pop    %rbp
  0x00007f7570591750: jmpq   *%r10
  0x00007f7570591753: hlt    
  0x00007f7570591754: hlt    
  0x00007f7570591755: hlt    
  0x00007f7570591756: hlt    
  0x00007f7570591757: hlt    


  0x00007f7570563677: nop
  0x00007f7570563678: nop
  0x00007f7570563679: nop
  0x00007f757056367a: nop
  0x00007f757056367b: nop
  0x00007f757056367c: nop
  0x00007f757056367d: nop
  0x00007f757056367e: nop
  0x00007f757056367f: nop
  ;; verify_intrinsic_id {
  0x00007f7570563680: cmpb   $0xb6,0x32(%rbx)
  0x00007f7570563684: je     0x00007f7570563701
  ;; bad Method*::intrinsic_id
  0x00007f757056368a: mov    %rsp,-0x28(%rsp)
  0x00007f757056368f: sub    $0x80,%rsp
  0x00007f7570563696: mov    %rax,0x78(%rsp)
  0x00007f757056369b: mov    %rcx,0x70(%rsp)
  0x00007f75705636a0: mov    %rdx,0x68(%rsp)
  0x00007f75705636a5: mov    %rbx,0x60(%rsp)
  0x00007f75705636aa: mov    %rbp,0x50(%rsp)
  0x00007f75705636af: mov    %rsi,0x48(%rsp)
  0x00007f75705636b4: mov    %rdi,0x40(%rsp)
  0x00007f75705636b9: mov    %r8,0x38(%rsp)
  0x00007f75705636be: mov    %r9,0x30(%rsp)
  0x00007f75705636c3: mov    %r10,0x28(%rsp)
  0x00007f75705636c8: mov    %r11,0x20(%rsp)
  0x00007f75705636cd: mov    %r12,0x18(%rsp)
  0x00007f75705636d2: mov    %r13,0x10(%rsp)
  0x00007f75705636d7: mov    %r14,0x8(%rsp)
  0x00007f75705636dc: mov    %r15,(%rsp)
  0x00007f75705636e0: movabs $0x7f75858af749,%rdi
  0x00007f75705636ea: movabs $0x7f757056368a,%rsi
  0x00007f75705636f4: mov    %rsp,%rdx
  0x00007f75705636f7: and    $0xfffffffffffffff0,%rsp
  0x00007f75705636fb: callq  0x00007f75853729fa
  0x00007f7570563700: hlt    
  ;; } verify_intrinsic_id
  0x00007f7570563701: mov    0x10(%rbx),%rdx
  0x00007f7570563705: movzwl 0x2c(%rdx),%edx
  0x00007f7570563709: mov    (%rsp,%rdx,8),%rcx
  ;; jump_to_lambda_form {
  0x00007f757056370d: mov    0x14(%rcx),%ebx
  0x00007f7570563710: push   %r10
  0x00007f7570563712: cmp    0x159e1ac7(%rip),%r12        # 0x00007f7585f451e0
  0x00007f7570563719: je     0x00007f7570563796
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f757056371f: mov    %rsp,-0x28(%rsp)
  0x00007f7570563724: sub    $0x80,%rsp
  0x00007f757056372b: mov    %rax,0x78(%rsp)
  0x00007f7570563730: mov    %rcx,0x70(%rsp)
  0x00007f7570563735: mov    %rdx,0x68(%rsp)
  0x00007f757056373a: mov    %rbx,0x60(%rsp)
  0x00007f757056373f: mov    %rbp,0x50(%rsp)
  0x00007f7570563744: mov    %rsi,0x48(%rsp)
  0x00007f7570563749: mov    %rdi,0x40(%rsp)
  0x00007f757056374e: mov    %r8,0x38(%rsp)
  0x00007f7570563753: mov    %r9,0x30(%rsp)
  0x00007f7570563758: mov    %r10,0x28(%rsp)
  0x00007f757056375d: mov    %r11,0x20(%rsp)
  0x00007f7570563762: mov    %r12,0x18(%rsp)
  0x00007f7570563767: mov    %r13,0x10(%rsp)
  0x00007f757056376c: mov    %r14,0x8(%rsp)
  0x00007f7570563771: mov    %r15,(%rsp)
  0x00007f7570563775: movabs $0x7f7585888ac8,%rdi
  0x00007f757056377f: movabs $0x7f757056371f,%rsi
  0x00007f7570563789: mov    %rsp,%rdx
  0x00007f757056378c: and    $0xfffffffffffffff0,%rsp
  0x00007f7570563790: callq  0x00007f75853729fa
  0x00007f7570563795: hlt    
  0x00007f7570563796: pop    %r10
  0x00007f7570563798: mov    0x28(%rbx),%ebx
  0x00007f757056379b: push   %r10
  0x00007f757056379d: cmp    0x159e1a3c(%rip),%r12        # 0x00007f7585f451e0
  0x00007f75705637a4: je     0x00007f7570563821
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007f75705637aa: mov    %rsp,-0x28(%rsp)
  0x00007f75705637af: sub    $0x80,%rsp
  0x00007f75705637b6: mov    %rax,0x78(%rsp)
  0x00007f75705637bb: mov    %rcx,0x70(%rsp)
  0x00007f75705637c0: mov    %rdx,0x68(%rsp)
  0x00007f75705637c5: mov    %rbx,0x60(%rsp)
  0x00007f75705637ca: mov    %rbp,0x50(%rsp)
  0x00007f75705637cf: mov    %rsi,0x48(%rsp)
  0x00007f75705637d4: mov    %rdi,0x40(%rsp)
  0x00007f75705637d9: mov    %r8,0x38(%rsp)
  0x00007f75705637de: mov    %r9,0x30(%rsp)
  0x00007f75705637e3: mov    %r10,0x28(%rsp)
  0x00007f75705637e8: mov    %r11,0x20(%rsp)
  0x00007f75705637ed: mov    %r12,0x18(%rsp)
  0x00007f75705637f2: mov    %r13,0x10(%rsp)
  0x00007f75705637f7: mov    %r14,0x8(%rsp)
  0x00007f75705637fc: mov    %r15,(%rsp)
  0x00007f7570563800: movabs $0x7f7585888ac8,%rdi
  0x00007f757056380a: movabs $0x7f75705637aa,%rsi
  0x00007f7570563814: mov    %rsp,%rdx
  0x00007f7570563817: and    $0xfffffffffffffff0,%rsp
  0x00007f757056381b: callq  0x00007f75853729fa
  0x00007f7570563820: hlt    
  0x00007f7570563821: pop    %r10
  0x00007f7570563823: mov    0x18(%rbx),%rbx
  0x00007f7570563827: mov    0x10(%rbx),%r10
  0x00007f757056382b: movzwl 0x2c(%r10),%r10d
  0x00007f7570563830: cmp    (%rsp,%r10,8),%rcx
  0x00007f7570563834: je     0x00007f75705638b5
  0x00007f757056383a: mov    (%rsp,%r10,8),%rax
  ;; receiver not on stack
  0x00007f757056383e: mov    %rsp,-0x28(%rsp)
  0x00007f7570563843: sub    $0x80,%rsp
  0x00007f757056384a: mov    %rax,0x78(%rsp)
  0x00007f757056384f: mov    %rcx,0x70(%rsp)
  0x00007f7570563854: mov    %rdx,0x68(%rsp)
  0x00007f7570563859: mov    %rbx,0x60(%rsp)
  0x00007f757056385e: mov    %rbp,0x50(%rsp)
  0x00007f7570563863: mov    %rsi,0x48(%rsp)
  0x00007f7570563868: mov    %rdi,0x40(%rsp)
  0x00007f757056386d: mov    %r8,0x38(%rsp)
  0x00007f7570563872: mov    %r9,0x30(%rsp)
  0x00007f7570563877: mov    %r10,0x28(%rsp)
  0x00007f757056387c: mov    %r11,0x20(%rsp)
  0x00007f7570563881: mov    %r12,0x18(%rsp)
  0x00007f7570563886: mov    %r13,0x10(%rsp)
  0x00007f757056388b: mov    %r14,0x8(%rsp)
  0x00007f7570563890: mov    %r15,(%rsp)
  0x00007f7570563894: Decoding RuntimeStub - _multianewarrayN_Java 0x00007f7570591b10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570591b60: sub    $0x8,%rsp
  0x00007f7570591b67: mov    %rbp,(%rsp)
  0x00007f7570591b6b: mov    %rsp,0x200(%r15)
  0x00007f7570591b72: mov    %rsi,%rdi
  0x00007f7570591b75: mov    %rdx,%rsi
  0x00007f7570591b78: mov    %r15,%rdx
  0x00007f7570591b7b: movabs $0x7f758550fa3c,%r10
  0x00007f7570591b85: callq  *%r10
  0x00007f7570591b88: mov    %r12,0x200(%r15)
  0x00007f7570591b8f: mov    %r12,0x208(%r15)
  0x00007f7570591b96: mov    0x260(%r15),%rax
  0x00007f7570591b9d: mov    %r12,0x260(%r15)
  0x00007f7570591ba4: cmp    0x8(%r15),%r12
  0x00007f7570591ba8: jne    0x00007f7570591bac
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f7570591baa: pop    %rbp
  0x00007f7570591bab: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f7570591bac: movabs $0x7f7570369420,%r10
  0x00007f7570591bb6: xor    %ebx,%ebx
  0x00007f7570591bb8: pop    %rbp
  0x00007f7570591bb9: jmpq   *%r10
  0x00007f7570591bbc: hlt    
  0x00007f7570591bbd: hlt    
  0x00007f7570591bbe: hlt    
  0x00007f7570591bbf: hlt    

Decoding RuntimeStub - _g1_wb_pre_Java 0x00007f7570591c10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570591c60: sub    $0x8,%rsp
  0x00007f7570591c67: mov    %rbp,(%rsp)
  0x00007f7570591c6b: mov    %rsp,0x200(%r15)
  0x00007f7570591c72: mov    %rsi,%rdi
  0x00007f7570591c75: mov    %rdx,%rsi
  0x00007f7570591c78: mov    %r15,%rdx
  0x00007f7570591c7b: movabs $0x7f758551b2b6,%r10
  0x00007f7570591c85: callq  *%r10
  0x00007f7570591c88: mov    %r12,0x200(%r15)
  0x00007f7570591c8f: mov    %r12,0x208(%r15)
  0x00007f7570591c96: cmp    0x8(%r15),%r12
  0x00007f7570591c9a: jne    0x00007f7570591c9e
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f7570591c9c: pop    %rbp
  0x00007f7570591c9d: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f7570591c9e: movabs $0x7f7570369420,%r10
  0x00007f7570591ca8: xor    %ebx,%ebx
  0x00007f7570591caa: pop    %rbp
  0x00007f7570591cab: jmpq   *%r10
  0x00007f7570591cae: hlt    
  0x00007f7570591caf: hlt    

Decoding RuntimeStub - _g1_wb_post_Java 0x00007f7570591d10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570591d60: sub    $0x8,%rsp
  0x00007f7570591d67: mov    %rbp,(%rsp)
  0x00007f7570591d6b: mov    %rsp,0x200(%r15)
  0x00007f7570591d72: mov    %rsi,%rdi
  0x00007f7570591d75: mov    %rdx,%rsi
  0x00007f7570591d78: mov    %r15,%rdx
  0x00007f7570591d7b: movabs $0x7f758551b47e,%r10
  0x00007f7570591d85: callq  *%r10
  0x00007f7570591d88: mov    %r12,0x200(%r15)
  0x00007f7570591d8f: mov    %r12,0x208(%r15)
  0x00007f7570591d96: cmp    0x8(%r15),%r12
  0x00007f7570591d9a: jne    0x00007f7570591d9e
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f7570591d9c: pop    %rbp
  0x00007f7570591d9d: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f7570591d9e: movabs $0x7f7570369420,%r10
  0x00007f7570591da8: xor    %ebx,%ebx
  0x00007f7570591daa: pop    %rbp
  0x00007f7570591dab: jmpq   *%r10
  0x00007f7570591dae: hlt    
  0x00007f7570591daf: hlt    

Decoding RuntimeStub - _complete_monitor_locking_Java 0x00007f7570591e10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570591e60: sub    $0x8,%rsp
  0x00007f7570591e67: mov    %rbp,(%rsp)
  0x00007f7570591e6b: mov    %rsp,0x200(%r15)
  0x00007f7570591e72: mov    %rsi,%rdi
  0x00007f7570591e75: mov    %rdx,%rsi
  0x00007f7570591e78: mov    %r15,%rdx
  0x00007f7570591e7b: movabs $0x7f75855236be,%r10
  0x00007f7570591e85: callq  *%r10
  0x00007f7570591e88: mov    %r12,0x200(%r15)
  0x00007f7570591e8f: mov    %r12,0x208(%r15)
  0x00007f7570591e96: cmp    0x8(%r15),%r12
  0x00007f7570591e9a: jne    0x00007f7570591e9e
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f7570591e9c: pop    %rbp
  0x00007f7570591e9d: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f7570591e9e: movabs $0x7f7570369420,%r10
  0x00007f7570591ea8: xor    %ebx,%ebx
  0x00007f7570591eaa: pop    %rbp
  0x00007f7570591eab: jmpq   *%r10
  0x00007f7570591eae: hlt    
  0x00007f7570591eaf: hlt    

Decoding RuntimeStub - _rethrow_Java 0x00007f7570591f10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570591f60: sub    $0x18,%rsp
  0x00007f7570591f67: mov    %rbp,0x10(%rsp)
  0x00007f7570591f6c: rex.W pushq 0x18(%rsp)
  0x00007f7570591f71: rex.W popq (%rsp)
  0x00007f7570591f75: mov    %rsp,0x200(%r15)
  0x00007f7570591f7c: mov    %rsi,%rdi
  0x00007f7570591f7f: mov    %r15,%rsi
  0x00007f7570591f82: mov    (%rsp),%rdx
  0x00007f7570591f86: movabs $0x7f75855127d4,%r10
  0x00007f7570591f90: callq  *%r10
  0x00007f7570591f93: mov    %rax,%r10
  0x00007f7570591f96: mov    %r12,0x200(%r15)
  0x00007f7570591f9d: mov    %r12,0x208(%r15)
  0x00007f7570591fa4: mov    0x260(%r15),%rax
  0x00007f7570591fab: mov    %r12,0x260(%r15)
  0x00007f7570591fb2: cmp    0x8(%r15),%r12
  0x00007f7570591fb6: jne    0x00007f7570591fc1
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f7570591fb8: add    $0x10,%rsp
  0x00007f7570591fbc: pop    %rbp
  0x00007f7570591fbd: pop    %rdx
  0x00007f7570591fbe: jmpq   *%r10
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f7570591fc1: movabs $0x7f7570369420,%r10
  0x00007f7570591fcb: xor    %ebx,%ebx
  0x00007f7570591fcd: add    $0x10,%rsp
  0x00007f7570591fd1: pop    %rbp
  0x00007f7570591fd2: jmpq   *%r10
  0x00007f7570591fd5: hlt    
  0x00007f7570591fd6: hlt    
  0x00007f7570591fd7: hlt    

Decoding RuntimeStub - handle_exception_from_callee Runtime1 stub 0x00007f7570591790
  0x00007f7570591820: push   %rbp
  0x00007f7570591821: mov    %rsp,%rbp
  ;; generate_handle_exception
  0x00007f7570591824: movabs $0xdead,%rbx
  0x00007f757059182e: movabs $0xdead,%rcx
  0x00007f7570591838: movabs $0xdead,%rsi
  0x00007f7570591842: movabs $0xdead,%rdi
  0x00007f757059184c: cmpq   $0x0,0x2d0(%r15)
  0x00007f7570591857: je     0x00007f75705918d4
  0x00007f757059185d: mov    %rsp,-0x28(%rsp)
  0x00007f7570591862: sub    $0x80,%rsp
  0x00007f7570591869: mov    %rax,0x78(%rsp)
  0x00007f757059186e: mov    %rcx,0x70(%rsp)
  0x00007f7570591873: mov    %rdx,0x68(%rsp)
  0x00007f7570591878: mov    %rbx,0x60(%rsp)
  0x00007f757059187d: mov    %rbp,0x50(%rsp)
  0x00007f7570591882: mov    %rsi,0x48(%rsp)
  0x00007f7570591887: mov    %rdi,0x40(%rsp)
  0x00007f757059188c: mov    %r8,0x38(%rsp)
  0x00007f7570591891: mov    %r9,0x30(%rsp)
  0x00007f7570591896: mov    %r10,0x28(%rsp)
  0x00007f757059189b: mov    %r11,0x20(%rsp)
  0x00007f75705918a0: mov    %r12,0x18(%rsp)
  0x00007f75705918a5: mov    %r13,0x10(%rsp)
  0x00007f75705918aa: mov    %r14,0x8(%rsp)
  0x00007f75705918af: mov    %r15,(%rsp)
  0x00007f75705918b3: movabs $0x7f75856f3464,%rdi
  0x00007f75705918bd: movabs $0x7f757059185d,%rsi
  0x00007f75705918c7: mov    %rsp,%rdx
  0x00007f75705918ca: and    $0xfffffffffffffff0,%rsp
  0x00007f75705918ce: callq  0x00007f75853729fa
  0x00007f75705918d3: hlt    
  0x00007f75705918d4: cmpq   $0x0,0x2d8(%r15)
  0x00007f75705918df: je     0x00007f757059195c
  0x00007f75705918e5: mov    %rsp,-0x28(%rsp)
  0x00007f75705918ea: sub    $0x80,%rsp
  0x00007f75705918f1: mov    %rax,0x78(%rsp)
  0x00007f75705918f6: mov    %rcx,0x70(%rsp)
  0x00007f75705918fb: mov    %rdx,0x68(%rsp)
  0x00007f7570591900: mov    %rbx,0x60(%rsp)
  0x00007f7570591905: mov    %rbp,0x50(%rsp)
  0x00007f757059190a: mov    %rsi,0x48(%rsp)
  0x00007f757059190f: mov    %rdi,0x40(%rsp)
  0x00007f7570591914: mov    %r8,0x38(%rsp)
  0x00007f7570591919: mov    %r9,0x30(%rsp)
  0x00007f757059191e: mov    %r10,0x28(%rsp)
  0x00007f7570591923: mov    %r11,0x20(%rsp)
  0x00007f7570591928: mov    %r12,0x18(%rsp)
  0x00007f757059192d: mov    %r13,0x10(%rsp)
  0x00007f7570591932: mov    %r14,0x8(%rsp)
  0x00007f7570591937: mov    %r15,(%rsp)
  0x00007f757059193b: movabs $0x7f75856f347e,%rdi
  0x00007f7570591945: movabs $0x7f75705918e5,%rsi
  0x00007f757059194f: mov    %rsp,%rdx
  0x00007f7570591952: and    $0xfffffffffffffff0,%rsp
  0x00007f7570591956: callq  0x00007f75853729fa
  0x00007f757059195b: hlt    
  0x00007f757059195c: mov    %rax,0x2d0(%r15)
  0x00007f7570591963: mov    %rdx,0x2d8(%r15)
  0x00007f757059196a: mov    %rdx,0x8(%rbp)
  0x00007f757059196e: mov    %r15,%rdi
  0x00007f7570591971: mov    %rbp,0x210(%r15)
  0x00007f7570591978: movabs $0x7f7570591971,%r10
  0x00007f7570591982: mov    %r10,0x208(%r15)
  0x00007f7570591989: mov    %rsp,0x200(%r15)
  0x00007f7570591990: and    $0xfffffffffffffff0,%rsp
  0x00007f7570591994: callq  0x00007f7584e52b8c
  0x00007f7570591999: push   %rax
  0x00007f757059199a: push   %rdi
  0x00007f757059199b: push   %rsi
  0x00007f757059199c: push   %rdx
  0x00007f757059199d: push   %rcx
  0x00007f757059199e: push   %r8
  0x00007f75705919a0: push   %r9
  0x00007f75705919a2: push   %r10
  0x00007f75705919a4: mov    %rsp,%r10
  0x00007f75705919a7: and    $0xfffffffffffffff0,%rsp
  0x00007f75705919ab: push   %r10
  0x00007f75705919ad: push   %r11
  0x00007f75705919af: mov    $0x1,%edi
  0x00007f75705919b4: callq  0x00007f7585f5a2d0
  0x00007f75705919b9: pop    %r11
  0x00007f75705919bb: pop    %rsp
  0x00007f75705919bc: pop    %r10
  0x00007f75705919be: pop    %r9
  0x00007f75705919c0: pop    %r8
  0x00007f75705919c2: pop    %rcx
  0x00007f75705919c3: pop    %rdx
  0x00007f75705919c4: pop    %rsi
  0x00007f75705919c5: pop    %rdi
  0x00007f75705919c6: cmp    %rax,%r15
  0x00007f75705919c9: je     0x00007f7570591a4b
  0x00007f75705919cf: callq  0x00007f7585459a22
  0x00007f75705919d4: mov    %rsp,-0x28(%rsp)
  0x00007f75705919d9: sub    $0x80,%rsp
  0x00007f75705919e0: mov    %rax,0x78(%rsp)
  0x00007f75705919e5: mov    %rcx,0x70(%rsp)
  0x00007f75705919ea: mov    %rdx,0x68(%rsp)
  0x00007f75705919ef: mov    %rbx,0x60(%rsp)
  0x00007f75705919f4: mov    %rbp,0x50(%rsp)
  0x00007f75705919f9: mov    %rsi,0x48(%rsp)
  0x00007f75705919fe: mov    %rdi,0x40(%rsp)
  0x00007f7570591a03: mov    %r8,0x38(%rsp)
  0x00007f7570591a08: mov    %r9,0x30(%rsp)
  0x00007f7570591a0d: mov    %r10,0x28(%rsp)
  0x00007f7570591a12: mov    %r11,0x20(%rsp)
  0x00007f7570591a17: mov    %r12,0x18(%rsp)
  0x00007f7570591a1c: mov    %r13,0x10(%rsp)
  0x00007f7570591a21: mov    %r14,0x8(%rsp)
  0x00007f7570591a26: mov    %r15,(%rsp)
  0x00007f7570591a2a: movabs $0x7f75856f3278,%rdi
  0x00007f7570591a34: movabs $0x7f75705919d4,%rsi
  0x00007f7570591a3e: mov    %rsp,%rdx
  0x00007f7570591a41: and    $0xfffffffffffffff0,%rsp
  0x00007f7570591a45: callq  0x00007f75853729fa
  0x00007f7570591a4a: hlt    
  0x00007f7570591a4b: pop    %rax
  0x00007f7570591a4c: movabs $0x0,%r10
  0x00007f7570591a56: mov    %r10,0x200(%r15)
  0x00007f7570591a5d: movabs $0x0,%r10
  0x00007f7570591a67: mov    %r10,0x210(%r15)
  0x00007f7570591a6e: movabs $0x0,%r10
  0x00007f7570591a78: mov    %r10,0x208(%r15)
  0x00007f7570591a7f: cmpq   $0x0,0x8(%r15)
  0x00007f7570591a87: je     0x00007f7570591a96
  0x00007f7570591a8d: mov    0x8(%r15),%rax
  0x00007f7570591a91: jmpq   0x00007f757055b240
  0x00007f7570591a96: movabs $0xdead,%rbx
  0x00007f7570591aa0: movabs $0xdead,%rcx
  0x00007f7570591aaa: movabs $0xdead,%rdx
  0x00007f7570591ab4: movabs $0xdead,%rsi
  0x00007f7570591abe: movabs $0xdead,%rdi
  0x00007f7570591ac8: mov    %rax,0x8(%rbp)
  0x00007f7570591acc: leaveq 
  0x00007f7570591acd: pop    %rcx
  0x00007f7570591ace: jmpq   *%rcx
  0x00007f7570591ad0: leaveq 
  0x00007f7570591ad1: retq   
  0x00007f7570591ad2: nop
  0x00007f7570591ad3: nop
  0x00007f7570591ad4: nop
  0x00007f7570591ad5: nop
  0x00007f7570591ad6: nop
  0x00007f7570591ad7: nop

nop
MethodHandle::interpreter_entry::_linkToVirtual [0x00007f75705638c6, 0x00007f7570563d51[ (1163 bytes)
  ;; } jump_to_lambda_form
  0x00007f75705638c6: nop
  0x00007f75705638c7: nop
  0x00007f75705638c8: nop
  0x00007f75705638c9: nop
  0x00007f75705638ca: nop
  0x00007f75705638cb: nop
  0x00007f75705638cc: nop
  0x00007f75705638cd: nop
  0x00007f75705638ce: nop
  0x00007f75705638cf: nop
  0x00007f75705638d0: nop
  0x00007f75705638d1: nop
  0x00007f75705638d2: nop
  0x00007f75705638d3: nopDecoding RuntimeStub - throw_array_store_exception Runtime1 stub 0x00007f7570560210
  0x00007f75705602a0: push   %rbp
  0x00007f75705602a1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f75705602a4: mov    %rsp,-0x28(%rsp)
  0x00007f75705602a9: sub    $0x80,%rsp
  0x00007f75705602b0: mov    %rax,0x78(%rsp)
  0x00007f75705602b5: mov    %rcx,0x70(%rsp)
  0x00007f75705602ba: mov    %rdx,0x68(%rsp)
  0x00007f75705602bf: mov    %rbx,0x60(%rsp)
  0x00007f75705602c4: mov    %rbp,0x50(%rsp)
  0x00007f75705602c9: mov    %rsi,0x48(%rsp)
  0x00007f75705602ce: mov    %rdi,0x40(%rsp)
  0x00007f75705602d3: mov    %r8,0x38(%rsp)
  0x00007f75705602d8: mov    %r9,0x30(%rsp)
  0x00007f75705602dd: mov    %r10,0x28(%rsp)
  0x00007f75705602e2: mov    %r11,0x20(%rsp)
  0x00007f75705602e7: mov    %r12,0x18(%rsp)
  0x00007f75705602ec: mov    %r13,0x10(%rsp)
  0x00007f75705602f1: mov    %r14,0x8(%rsp)
  0x00007f75705602f6: mov    %r15,(%rsp)
  0x00007f75705602fa: sub    $0x150,%rsp
  0x00007f7570560301: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757056030d: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570560313: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570560319: vmovsd %xmm2,0x18(%rsp)
  0x00007f757056031f: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570560325: vmovsd %xmm4,0x28(%rsp)
  0x00007f757056032b: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570560331: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570560337: vmovsd %xmm7,0x40(%rsp)
  0x00007f757056033d: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570560343: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570560349: vmovsd %xmm10,0x58(%rsp)
  0x00007f757056034f: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570560355: vmovsd %xmm12,0x68(%rsp)
  0x00007f757056035b: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570560361: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570560367: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570560370: movabs $0xdead,%rax
  0x00007f757056037a: movabs $0xdead,%rbx
  0x00007f7570560384: movabs $0xdead,%rcx
  0x00007f757056038e: movabs $0xdead,%rdx
  0x00007f7570560398: movabs $0xdead,%rsi
  0x00007f75705603a2: movabs $0xdead,%rdi
  0x00007f75705603ac: mov    0x10(%rbp),%rsi
  0x00007f75705603b0: mov    %r15,%rdi
  0x00007f75705603b3: mov    %rbp,0x210(%r15)
  0x00007f75705603ba: mov    %rsp,0x200(%r15)
  0x00007f75705603c1: callq  0x00007f7584e51bde
  0x00007f75705603c6: push   %rax
  0x00007f75705603c7: push   %rdi
  0x00007f75705603c8: push   %rsi
  0x00007f75705603c9: push   %rdx
  0x00007f75705603ca: push   %rcx
  0x00007f75705603cb: push   %r8
  0x00007f75705603cd: push   %r9
  0x00007f75705603cf: push   %r10
  0x00007f75705603d1: mov    %rsp,%r10
  0x00007f75705603d4: and    $0xfffffffffffffff0,%rsp
  0x00007f75705603d8: push   %r10
  0x00007f75705603da: push   %r11
  0x00007f75705603dc: mov    $0x1,%edi
  0x00007f75705603e1: callq  0x00007f7585f5a2d0
  0x00007f75705603e6: pop    %r11
  0x00007f75705603e8: pop    %rsp
  0x00007f75705603e9: pop    %r10
  0x00007f75705603eb: pop    %r9
  0x00007f75705603ed: pop    %r8
  0x00007f75705603ef: pop    %rcx
  0x00007f75705603f0: pop    %rdx
  0x00007f75705603f1: pop    %rsi
  0x00007f75705603f2: pop    %rdi
  0x00007f75705603f3: cmp    %rax,%r15
  0x00007f75705603f6: je     0x00007f7570560478
  0x00007f75705603fc: callq  0x00007f7585459a22
  0x00007f7570560401: mov    %rsp,-0x28(%rsp)
  0x00007f7570560406: sub    $0x80,%rsp
  0x00007f757056040d: mov    %rax,0x78(%rsp)
  0x00007f7570560412: mov    %rcx,0x70(%rsp)
  0x00007f7570560417: mov    %rdx,0x68(%rsp)
  0x00007f757056041c: mov    %rbx,0x60(%rsp)
  0x00007f7570560421: mov    %rbp,0x50(%rsp)
  0x00007f7570560426: mov    %rsi,0x48(%rsp)
  0x00007f757056042b: mov    %rdi,0x40(%rsp)
  0x00007f7570560430: mov    %r8,0x38(%rsp)
  0x00007f7570560435: mov    %r9,0x30(%rsp)
  0x00007f757056043a: mov    %r10,0x28(%rsp)
  0x00007f757056043f: mov    %r11,0x20(%rsp)
  0x00007f7570560444: mov    %r12,0x18(%rsp)
  0x00007f7570560449: mov    %r13,0x10(%rsp)
  0x00007f757056044e: mov    %r14,0x8(%rsp)
  0x00007f7570560453: mov    %r15,(%rsp)
  0x00007f7570560457: movabs $0x7f75856f3278,%rdi
  0x00007f7570560461: movabs $0x7f7570560401,%rsi
  0x00007f757056046b: mov    %rsp,%rdx
  0x00007f757056046e: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560472: callq  0x00007f75853729fa
  0x00007f7570560477: hlt    
  0x00007f7570560478: pop    %rax
  0x00007f7570560479: movabs $0x0,%r10
  0x00007f7570560483: mov    %r10,0x200(%r15)
  0x00007f757056048a: movabs $0x0,%r10
  0x00007f7570560494: mov    %r10,0x210(%r15)
  0x00007f757056049b: movabs $0x0,%r10
  0x00007f75705604a5: mov    %r10,0x208(%r15)
  0x00007f75705604ac: cmpq   $0x0,0x8(%r15)
  0x00007f75705604b4: je     0x00007f75705604c3
  0x00007f75705604ba: mov    0x8(%r15),%rax
  0x00007f75705604be: jmpq   0x00007f757055b240
  0x00007f75705604c3: mov    %rsp,-0x28(%rsp)
  0x00007f75705604c8: sub    $0x80,%rsp
  0x00007f75705604cf: mov    %rax,0x78(%rsp)
  0x00007f75705604d4: mov    %rcx,0x70(%rsp)
  0x00007f75705604d9: mov    %rdx,0x68(%rsp)
  0x00007f75705604de: mov    %rbx,0x60(%rsp)
  0x00007f75705604e3: mov    %rbp,0x50(%rsp)
  0x00007f75705604e8: mov    %rsi,0x48(%rsp)
  0x00007f75705604ed: mov    %rdi,0x40(%rsp)
  0x00007f75705604f2: mov    %r8,0x38(%rsp)
  0x00007f75705604f7: mov    %r9,0x30(%rsp)
  0x00007f75705604fc: mov    %r10,0x28(%rsp)
  0x00007f7570560501: mov    %r11,0x20(%rsp)
  0x00007f7570560506: mov    %r12,0x18(%rsp)
  0x00007f757056050b: mov    %r13,0x10(%rsp)
  0x00007f7570560510: mov    %r14,0x8(%rsp)
  0x00007f7570560515: mov    %r15,(%rsp)
  0x00007f7570560519: movabs $0x7f75856f30d8,%rdi
  0x00007f7570560523: movabs $0x7f75705604c3,%rsi
  0x00007f757056052d: mov    %rsp,%rdx
  0x00007f7570560530: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560534: callq  0x00007f75853729fa
  0x00007f7570560539: hlt    
  0x00007f757056053a: leaveq 
  0x00007f757056053b: retq   
  0x00007f757056053c: nop
  0x00007f757056053d: nop
  0x00007f757056053e: nop
  0x00007f757056053f: nop

Decoding RuntimeStub - _slow_arraycopy_Java 0x00007f7570560150
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f75705601a0: sub    $0x8,%rsp
  0x00007f75705601a7: mov    %rbp,(%rsp)
  0x00007f75705601ab: mov    %rsp,0x200(%r15)
  0x00007f75705601b2: mov    %rsi,%rdi
  0x00007f75705601b5: mov    %edx,%esi
  0x00007f75705601b7: mov    %rcx,%rdx
  0x00007f75705601ba: mov    %r8d,%ecx
  0x00007f75705601bd: mov    %r9d,%r8d
  0x00007f75705601c0: mov    %r15,%r9
  0x00007f75705601c3: movabs $0x7f758552319a,%r10
  0x00007f75705601cd: callq  *%r10
  0x00007f75705601d0: mov    %r12,0x200(%r15)
  0x00007f75705601d7: mov    %r12,0x208(%r15)
  0x00007f75705601de: cmp    0x8(%r15),%r12
  0x00007f75705601e2: jne    0x00007f75705601e6
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f75705601e4: pop    %rbp
  0x00007f75705601e5: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f75705601e6: movabs $0x7f7570369420,%r10
  0x00007f75705601f0: xor    %ebx,%ebx
  0x00007f75705601f2: pop    %rbp
  0x00007f75705601f3: jmpq   *%r10
  0x00007f75705601f6: hlt    
  0x00007f75705601f7: hlt    


  0x00007f75705638d4: nop
  0x00007f75705638d5: nopDecoding RuntimeStub - throw_class_cast_exception Runtime1 stub 0x00007f757055fe10
  0x00007f757055fea0: push   %rbp
  0x00007f757055fea1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055fea4: mov    %rsp,-0x28(%rsp)
  0x00007f757055fea9: sub    $0x80,%rsp
  0x00007f757055feb0: mov    %rax,0x78(%rsp)
  0x00007f757055feb5: mov    %rcx,0x70(%rsp)
  0x00007f757055feba: mov    %rdx,0x68(%rsp)
  0x00007f757055febf: mov    %rbx,0x60(%rsp)
  0x00007f757055fec4: mov    %rbp,0x50(%rsp)
  0x00007f757055fec9: mov    %rsi,0x48(%rsp)
  0x00007f757055fece: mov    %rdi,0x40(%rsp)
  0x00007f757055fed3: mov    %r8,0x38(%rsp)
  0x00007f757055fed8: mov    %r9,0x30(%rsp)
  0x00007f757055fedd: mov    %r10,0x28(%rsp)
  0x00007f757055fee2: mov    %r11,0x20(%rsp)
  0x00007f757055fee7: mov    %r12,0x18(%rsp)
  0x00007f757055feec: mov    %r13,0x10(%rsp)
  0x00007f757055fef1: mov    %r14,0x8(%rsp)
  0x00007f757055fef6: mov    %r15,(%rsp)
  0x00007f757055fefa: sub    $0x150,%rsp
  0x00007f757055ff01: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055ff0d: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055ff13: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055ff19: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055ff1f: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055ff25: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055ff2b: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055ff31: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055ff37: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055ff3d: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055ff43: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055ff49: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055ff4f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055ff55: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055ff5b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055ff61: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055ff67: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055ff70: movabs $0xdead,%rax
  0x00007f757055ff7a: movabs $0xdead,%rbx
  0x00007f757055ff84: movabs $0xdead,%rcx
  0x00007f757055ff8e: movabs $0xdead,%rdx
  0x00007f757055ff98: movabs $0xdead,%rsi
  0x00007f757055ffa2: movabs $0xdead,%rdi
  0x00007f757055ffac: mov    0x10(%rbp),%rsi
  0x00007f757055ffb0: mov    %r15,%rdi
  0x00007f757055ffb3: mov    %rbp,0x210(%r15)
  0x00007f757055ffba: mov    %rsp,0x200(%r15)
  0x00007f757055ffc1: callq  0x00007f7584e532dc
  0x00007f757055ffc6: push   %rax
  0x00007f757055ffc7: push   %rdi
  0x00007f757055ffc8: push   %rsi
  0x00007f757055ffc9: push   %rdx
  0x00007f757055ffca: push   %rcx
  0x00007f757055ffcb: push   %r8
  0x00007f757055ffcd: push   %r9
  0x00007f757055ffcf: push   %r10
  0x00007f757055ffd1: mov    %rsp,%r10
  0x00007f757055ffd4: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ffd8: push   %r10
  0x00007f757055ffda: push   %r11
  0x00007f757055ffdc: mov    $0x1,%edi
  0x00007f757055ffe1: callq  0x00007f7585f5a2d0
  0x00007f757055ffe6: pop    %r11
  0x00007f757055ffe8: pop    %rsp
  0x00007f757055ffe9: pop    %r10
  0x00007f757055ffeb: pop    %r9
  0x00007f757055ffed: pop    %r8
  0x00007f757055ffef: pop    %rcx
  0x00007f757055fff0: pop    %rdx
  0x00007f757055fff1: pop    %rsi
  0x00007f757055fff2: pop    %rdi
  0x00007f757055fff3: cmp    %rax,%r15
  0x00007f757055fff6: je     0x00007f7570560078
  0x00007f757055fffc: callq  0x00007f7585459a22
  0x00007f7570560001: mov    %rsp,-0x28(%rsp)
  0x00007f7570560006: sub    $0x80,%rsp
  0x00007f757056000d: mov    %rax,0x78(%rsp)
  0x00007f7570560012: mov    %rcx,0x70(%rsp)
  0x00007f7570560017: mov    %rdx,0x68(%rsp)
  0x00007f757056001c: mov    %rbx,0x60(%rsp)
  0x00007f7570560021: mov    %rbp,0x50(%rsp)
  0x00007f7570560026: mov    %rsi,0x48(%rsp)
  0x00007f757056002b: mov    %rdi,0x40(%rsp)
  0x00007f7570560030: mov    %r8,0x38(%rsp)
  0x00007f7570560035: mov    %r9,0x30(%rsp)
  0x00007f757056003a: mov    %r10,0x28(%rsp)
  0x00007f757056003f: mov    %r11,0x20(%rsp)
  0x00007f7570560044: mov    %r12,0x18(%rsp)
  0x00007f7570560049: mov    %r13,0x10(%rsp)
  0x00007f757056004e: mov    %r14,0x8(%rsp)
  0x00007f7570560053: mov    %r15,(%rsp)
  0x00007f7570560057: movabs $0x7f75856f3278,%rdi
  0x00007f7570560061: movabs $0x7f7570560001,%rsi
  0x00007f757056006b: mov    %rsp,%rdx
  0x00007f757056006e: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560072: callq  0x00007f75853729fa
  0x00007f7570560077: hlt    
  0x00007f7570560078: pop    %rax
  0x00007f7570560079: movabs $0x0,%r10
  0x00007f7570560083: mov    %r10,0x200(%r15)
  0x00007f757056008a: movabs $0x0,%r10
  0x00007f7570560094: mov    %r10,0x210(%r15)
  0x00007f757056009b: movabs $0x0,%r10
  0x00007f75705600a5: mov    %r10,0x208(%r15)
  0x00007f75705600ac: cmpq   $0x0,0x8(%r15)
  0x00007f75705600b4: je     0x00007f75705600c3
  0x00007f75705600ba: mov    0x8(%r15),%rax
  0x00007f75705600be: jmpq   0x00007f757055b240
  0x00007f75705600c3: mov    %rsp,-0x28(%rsp)
  0x00007f75705600c8: sub    $0x80,%rsp
  0x00007f75705600cf: mov    %rax,0x78(%rsp)
  0x00007f75705600d4: mov    %rcx,0x70(%rsp)
  0x00007f75705600d9: mov    %rdx,0x68(%rsp)
  0x00007f75705600de: mov    %rbx,0x60(%rsp)
  0x00007f75705600e3: mov    %rbp,0x50(%rsp)
  0x00007f75705600e8: mov    %rsi,0x48(%rsp)
  0x00007f75705600ed: mov    %rdi,0x40(%rsp)
  0x00007f75705600f2: mov    %r8,0x38(%rsp)
  0x00007f75705600f7: mov    %r9,0x30(%rsp)
  0x00007f75705600fc: mov    %r10,0x28(%rsp)
  0x00007f7570560101: mov    %r11,0x20(%rsp)
  0x00007f7570560106: mov    %r12,0x18(%rsp)
  0x00007f757056010b: mov    %r13,0x10(%rsp)
  0x00007f7570560110: mov    %r14,0x8(%rsp)
  0x00007f7570560115: mov    %r15,(%rsp)
  0x00007f7570560119: movabs $0x7f75856f30d8,%rdi
  0x00007f7570560123: movabs $0x7f75705600c3,%rsi
  0x00007f757056012d: mov    %rsp,%rdx
  0x00007f7570560130: and    $0xfffffffffffffff0,%rsp
  0x00007f7570560134: callq  0x00007f75853729fa
  0x00007f7570560139: hlt    
  0x00007f757056013a: leaveq 
  0x00007f757056013b: retq   
  0x00007f757056013c: nop
  0x00007f757056013d: nop
  0x00007f757056013e: nop
  0x00007f757056013f: nop


  0x00007f75705638d6: nop
  0x00007f75705638d7: nop
  0x00007f75705638d8: nop
  0x00007f75705638d9: nop
  0x00007f75705638da: nop
  0x00007f75705638db: nop
  0x00007f75705638dc: nop
  0x00007f75705638dd: nop
  0x00007f75705638de: nop
  0x00007f75705638df: nop
  ;; verify_intrinsic_id {
  0x00007f75705638e0: Decoding RuntimeStub - throw_incompatible_class_change_error Runtime1 stub 0x00007f757055fad0
  0x00007f757055fb60: push   %rbp
  0x00007f757055fb61: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055fb64: mov    %rsp,-0x28(%rsp)
  0x00007f757055fb69: sub    $0x80,%rsp
  0x00007f757055fb70: mov    %rax,0x78(%rsp)
  0x00007f757055fb75: mov    %rcx,0x70(%rsp)
  0x00007f757055fb7a: mov    %rdx,0x68(%rsp)
  0x00007f757055fb7f: mov    %rbx,0x60(%rsp)
  0x00007f757055fb84: mov    %rbp,0x50(%rsp)
  0x00007f757055fb89: mov    %rsi,0x48(%rsp)
  0x00007f757055fb8e: mov    %rdi,0x40(%rsp)
  0x00007f757055fb93: mov    %r8,0x38(%rsp)
  0x00007f757055fb98: mov    %r9,0x30(%rsp)
  0x00007f757055fb9d: mov    %r10,0x28(%rsp)
  0x00007f757055fba2: mov    %r11,0x20(%rsp)
  0x00007f757055fba7: mov    %r12,0x18(%rsp)
  0x00007f757055fbac: mov    %r13,0x10(%rsp)
  0x00007f757055fbb1: mov    %r14,0x8(%rsp)
  0x00007f757055fbb6: mov    %r15,(%rsp)
  0x00007f757055fbba: sub    $0x150,%rsp
  0x00007f757055fbc1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055fbcd: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055fbd3: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055fbd9: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055fbdf: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055fbe5: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055fbeb: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055fbf1: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055fbf7: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055fbfd: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055fc03: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055fc09: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055fc0f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055fc15: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055fc1b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055fc21: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055fc27: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055fc30: movabs $0xdead,%rax
  0x00007f757055fc3a: movabs $0xdead,%rbx
  0x00007f757055fc44: movabs $0xdead,%rcx
  0x00007f757055fc4e: movabs $0xdead,%rdx
  0x00007f757055fc58: movabs $0xdead,%rsi
  0x00007f757055fc62: movabs $0xdead,%rdi
  0x00007f757055fc6c: mov    %r15,%rdi
  0x00007f757055fc6f: mov    %rbp,0x210(%r15)
  0x00007f757055fc76: mov    %rsp,0x200(%r15)
  0x00007f757055fc7d: callq  0x00007f7584e534c6
  0x00007f757055fc82: push   %rax
  0x00007f757055fc83: push   %rdi
  0x00007f757055fc84: push   %rsi
  0x00007f757055fc85: push   %rdx
  0x00007f757055fc86: push   %rcx
  0x00007f757055fc87: push   %r8
  0x00007f757055fc89: push   %r9
  0x00007f757055fc8b: push   %r10
  0x00007f757055fc8d: mov    %rsp,%r10
  0x00007f757055fc90: and    $0xfffffffffffffff0,%rsp
  0x00007f757055fc94: push   %r10
  0x00007f757055fc96: push   %r11
  0x00007f757055fc98: mov    $0x1,%edi
  0x00007f757055fc9d: callq  0x00007f7585f5a2d0
  0x00007f757055fca2: pop    %r11
  0x00007f757055fca4: pop    %rsp
  0x00007f757055fca5: pop    %r10
  0x00007f757055fca7: pop    %r9
  0x00007f757055fca9: pop    %r8
  0x00007f757055fcab: pop    %rcx
  0x00007f757055fcac: pop    %rdx
  0x00007f757055fcad: pop    %rsi
  0x00007f757055fcae: pop    %rdi
  0x00007f757055fcaf: cmp    %rax,%r15
  0x00007f757055fcb2: je     0x00007f757055fd34
  0x00007f757055fcb8: callq  0x00007f7585459a22
  0x00007f757055fcbd: mov    %rsp,-0x28(%rsp)
  0x00007f757055fcc2: sub    $0x80,%rsp
  0x00007f757055fcc9: mov    %rax,0x78(%rsp)
  0x00007f757055fcce: mov    %rcx,0x70(%rsp)
  0x00007f757055fcd3: mov    %rdx,0x68(%rsp)
  0x00007f757055fcd8: mov    %rbx,0x60(%rsp)
  0x00007f757055fcdd: mov    %rbp,0x50(%rsp)
  0x00007f757055fce2: mov    %rsi,0x48(%rsp)
  0x00007f757055fce7: mov    %rdi,0x40(%rsp)
  0x00007f757055fcec: mov    %r8,0x38(%rsp)
  0x00007f757055fcf1: mov    %r9,0x30(%rsp)
  0x00007f757055fcf6: mov    %r10,0x28(%rsp)
  0x00007f757055fcfb: mov    %r11,0x20(%rsp)
  0x00007f757055fd00: mov    %r12,0x18(%rsp)
  0x00007f757055fd05: mov    %r13,0x10(%rsp)
  0x00007f757055fd0a: mov    %r14,0x8(%rsp)
  0x00007f757055fd0f: mov    %r15,(%rsp)
  0x00007f757055fd13: movabs $0x7f75856f3278,%rdi
  0x00007f757055fd1d: movabs $0x7f757055fcbd,%rsi
  0x00007f757055fd27: mov    %rsp,%rdx
  0x00007f757055fd2a: and    $0xfffffffffffffff0,%rsp
  0x00007f757055fd2e: callq  0x00007f75853729fa
  0x00007f757055fd33: hlt    
  0x00007f757055fd34: pop    %rax
  0x00007f757055fd35: movabs $0x0,%r10
  0x00007f757055fd3f: mov    %r10,0x200(%r15)
  0x00007f757055fd46: movabs $0x0,%r10
  0x00007f757055fd50: mov    %r10,0x210(%r15)
  0x00007f757055fd57: movabs $0x0,%r10
  0x00007f757055fd61: mov    %r10,0x208(%r15)
  0x00007f757055fd68: cmpq   $0x0,0x8(%r15)
  0x00007f757055fd70: je     0x00007f757055fd7f
  0x00007f757055fd76: mov    0x8(%r15),%rax
  0x00007f757055fd7a: jmpq   0x00007f757055b240
  0x00007f757055fd7f: mov    %rsp,-0x28(%rsp)
  0x00007f757055fd84: sub    $0x80,%rsp
  0x00007f757055fd8b: mov    %rax,0x78(%rsp)
  0x00007f757055fd90: mov    %rcx,0x70(%rsp)
  0x00007f757055fd95: mov    %rdx,0x68(%rsp)
  0x00007f757055fd9a: mov    %rbx,0x60(%rsp)
  0x00007f757055fd9f: mov    %rbp,0x50(%rsp)
  0x00007f757055fda4: mov    %rsi,0x48(%rsp)
  0x00007f757055fda9: mov    %rdi,0x40(%rsp)
  0x00007f757055fdae: mov    %r8,0x38(%rsp)
  0x00007f757055fdb3: mov    %r9,0x30(%rsp)
  0x00007f757055fdb8: mov    %r10,0x28(%rsp)
  0x00007f757055fdbd: mov    %r11,0x20(%rsp)
  0x00007f757055fdc2: mov    %r12,0x18(%rsp)
  0x00007f757055fdc7: mov    %r13,0x10(%rsp)
  0x00007f757055fdcc: mov    %r14,0x8(%rsp)
  0x00007f757055fdd1: mov    %r15,(%rsp)
  0x00007f757055fdd5: movabs $0x7f75856f30d8,%rdi
  0x00007f757055fddf: movabs $0x7f757055fd7f,%rsi
  0x00007f757055fde9: mov    %rsp,%rdx
  0x00007f757055fdec: and    $0xfffffffffffffff0,%rsp
  0x00007f757055fdf0: callq  0x00007f75853729fa
  0x00007f757055fdf5: hlt    
  0x00007f757055fdf6: leaveq 
  0x00007f757055fdf7: retq   

Decoding RuntimeStub - _register_finalizer_Java 0x00007f757055fa10
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f757055fa60: sub    $0x8,%rsp
  0x00007f757055fa67: mov    %rbp,(%rsp)
  0x00007f757055fa6b: mov    %rsp,0x200(%r15)
  0x00007f757055fa72: mov    %rsi,%rdi
  0x00007f757055fa75: mov    %r15,%rsi
  0x00007f757055fa78: movabs $0x7f7585512ce0,%r10
  0x00007f757055fa82: callq  *%r10
  0x00007f757055fa85: mov    %r12,0x200(%r15)
  0x00007f757055fa8c: mov    %r12,0x208(%r15)
  0x00007f757055fa93: cmp    0x8(%r15),%r12
  0x00007f757055fa97: jne    0x00007f757055fa9b
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f757055fa99: pop    %rbp
  0x00007f757055fa9a: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f757055fa9b: movabs $0x7f7570369420,%r10
  0x00007f757055faa5: xor    %ebx,%ebx
  0x00007f757055faa7: pop    %rbp
  0x00007f757055faa8: jmpq   *%r10
  0x00007f757055faab: hlt    
  0x00007f757055faac: hlt    
  0x00007f757055faad: hlt    
  0x00007f757055faae: hlt    
  0x00007f757055faaf: hlt    

hlt    
MethodHandle::interpreter_entry::_linkToStatic [0x00007f7570563d51, 0x00007f7570563f30[ (479 bytes)
  0x00007f7570563d51: nop
Decoding RuntimeStub - slow_subtype_check Runtime1 stub 0x00007f757055f910
  0x00007f757055f980: push   %rdi
  0x00007f757055f981: push   %rsi
  0x00007f757055f982: push   %rcx
  0x00007f757055f983: push   %rax
  0x00007f757055f984: mov    0x30(%rsp),%rsi
  0x00007f757055f989: mov    0x28(%rsp),%rax
  0x00007f757055f98e: push   %rax
  0x00007f757055f98f: mov    %rax,%rax
  0x00007f757055f992: movabs $0x7f7585f24470,%rcx
  0x00007f757055f99c: incl   (%rcx)
  0x00007f757055f99e: mov    0x28(%rsi),%rdi
  0x00007f757055f9a2: mov    (%rdi),%ecx
  0x00007f757055f9a4: add    $0x8,%rdi
  0x00007f757055f9a8: test   %rax,%rax
  0x00007f757055f9ab: repnz scas %es:(%rdi),%rax
  0x00007f757055f9ae: pop    %rax
  0x00007f757055f9af: jne    0x00007f757055f9c7
  0x00007f757055f9b5: mov    %rax,0x20(%rsi)
  0x00007f757055f9b9: movq   $0x1,0x30(%rsp)
  0x00007f757055f9c2: pop    %rax
  0x00007f757055f9c3: pop    %rcx
  0x00007f757055f9c4: pop    %rsi
  0x00007f757055f9c5: pop    %rdi
  0x00007f757055f9c6: retq   
  0x00007f757055f9c7: movabs $0x0,%r10
  0x00007f757055f9d1: mov    %r10,0x30(%rsp)
  0x00007f757055f9d6: pop    %rax
  0x00007f757055f9d7: pop    %rcx
  0x00007f757055f9d8: pop    %rsi
  0x00007f757055f9d9: pop    %rdi
  0x00007f757055f9da: retq   
  0x00007f757055f9db: nop
  0x00007f757055f9dc: nop
  0x00007f757055f9dd: nop
  0x00007f757055f9de: nop
  0x00007f757055f9df: nop

  0x00007f7570563d52: nop
  0x00007f7570563d53: nop
  0x00007f7570563d54: nop
  0x00007f7570563d55: nop
  0x00007f7570563d56: nop
  0x00007f7570563d57: nop
  0x00007f7570563d58: nop
  0x00007f7570563d59: nop
  0x00007f7570563d5a: nop
  0x00007f7570563d5b: nop
  0x00007f7570563d5c: nop
  0x00007f7570563d5d: nop
  0x00007f7570563d5e: nop
  0x00007f7570563d5f: nop
  ;; verify_intrinsic_id {
  0x00007f7570563d60: cmpb   $0xb8Decoding RuntimeStub - monitorenter Runtime1 stub 0x00007f757055f510
  0x00007f757055f5a0: push   %rbp
  0x00007f757055f5a1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055f5a4: mov    %rsp,-0x28(%rsp)
  0x00007f757055f5a9: sub    $0x80,%rsp
  0x00007f757055f5b0: mov    %rax,0x78(%rsp)
  0x00007f757055f5b5: mov    %rcx,0x70(%rsp)
  0x00007f757055f5ba: mov    %rdx,0x68(%rsp)
  0x00007f757055f5bf: mov    %rbx,0x60(%rsp)
  0x00007f757055f5c4: mov    %rbp,0x50(%rsp)
  0x00007f757055f5c9: mov    %rsi,0x48(%rsp)
  0x00007f757055f5ce: mov    %rdi,0x40(%rsp)
  0x00007f757055f5d3: mov    %r8,0x38(%rsp)
  0x00007f757055f5d8: mov    %r9,0x30(%rsp)
  0x00007f757055f5dd: mov    %r10,0x28(%rsp)
  0x00007f757055f5e2: mov    %r11,0x20(%rsp)
  0x00007f757055f5e7: mov    %r12,0x18(%rsp)
  0x00007f757055f5ec: mov    %r13,0x10(%rsp)
  0x00007f757055f5f1: mov    %r14,0x8(%rsp)
  0x00007f757055f5f6: mov    %r15,(%rsp)
  0x00007f757055f5fa: sub    $0x150,%rsp
  0x00007f757055f601: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055f60d: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055f613: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055f619: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055f61f: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055f625: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055f62b: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055f631: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055f637: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055f63d: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055f643: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055f649: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055f64f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055f655: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055f65b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055f661: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055f667: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055f670: mov    0x18(%rbp),%rax
  0x00007f757055f674: mov    0x10(%rbp),%rbx
  0x00007f757055f678: mov    %rax,%rsi
  0x00007f757055f67b: mov    %rbx,%rdx
  0x00007f757055f67e: mov    %r15,%rdi
  0x00007f757055f681: mov    %rbp,0x210(%r15)
  0x00007f757055f688: mov    %rsp,0x200(%r15)
  0x00007f757055f68f: callq  0x00007f7584e53674
  0x00007f757055f694: push   %rax
  0x00007f757055f695: push   %rdi
  0x00007f757055f696: push   %rsi
  0x00007f757055f697: push   %rdx
  0x00007f757055f698: push   %rcx
  0x00007f757055f699: push   %r8
  0x00007f757055f69b: push   %r9
  0x00007f757055f69d: push   %r10
  0x00007f757055f69f: mov    %rsp,%r10
  0x00007f757055f6a2: and    $0xfffffffffffffff0,%rsp
  0x00007f757055f6a6: push   %r10
  0x00007f757055f6a8: push   %r11
  0x00007f757055f6aa: mov    $0x1,%edi
  0x00007f757055f6af: callq  0x00007f7585f5a2d0
  0x00007f757055f6b4: pop    %r11
  0x00007f757055f6b6: pop    %rsp
  0x00007f757055f6b7: pop    %r10
  0x00007f757055f6b9: pop    %r9
  0x00007f757055f6bb: pop    %r8
  0x00007f757055f6bd: pop    %rcx
  0x00007f757055f6be: pop    %rdx
  0x00007f757055f6bf: pop    %rsi
  0x00007f757055f6c0: pop    %rdi
  0x00007f757055f6c1: cmp    %rax,%r15
  0x00007f757055f6c4: je     0x00007f757055f746
  0x00007f757055f6ca: callq  0x00007f7585459a22
  0x00007f757055f6cf: mov    %rsp,-0x28(%rsp)
  0x00007f757055f6d4: sub    $0x80,%rsp
  0x00007f757055f6db: mov    %rax,0x78(%rsp)
  0x00007f757055f6e0: mov    %rcx,0x70(%rsp)
  0x00007f757055f6e5: mov    %rdx,0x68(%rsp)
  0x00007f757055f6ea: mov    %rbx,0x60(%rsp)
  0x00007f757055f6ef: mov    %rbp,0x50(%rsp)
  0x00007f757055f6f4: mov    %rsi,0x48(%rsp)
  0x00007f757055f6f9: mov    %rdi,0x40(%rsp)
  0x00007f757055f6fe: mov    %r8,0x38(%rsp)
  0x00007f757055f703: mov    %r9,0x30(%rsp)
  0x00007f757055f708: mov    %r10,0x28(%rsp)
  0x00007f757055f70d: mov    %r11,0x20(%rsp)
  0x00007f757055f712: mov    %r12,0x18(%rsp)
  0x00007f757055f717: mov    %r13,0x10(%rsp)
  0x00007f757055f71c: mov    %r14,0x8(%rsp)
  0x00007f757055f721: mov    %r15,(%rsp)
  0x00007f757055f725: movabs $0x7f75856f3278,%rdi
  0x00007f757055f72f: movabs $0x7f757055f6cf,%rsi
  0x00007f757055f739: mov    %rsp,%rdx
  0x00007f757055f73c: and    $0xfffffffffffffff0,%rsp
  0x00007f757055f740: callq  0x00007f75853729fa
  0x00007f757055f745: hlt    
  0x00007f757055f746: pop    %rax
  0x00007f757055f747: movabs $0x0,%r10
  0x00007f757055f751: mov    %r10,0x200(%r15)
  0x00007f757055f758: movabs $0x0,%r10
  0x00007f757055f762: mov    %r10,0x210(%r15)
  0x00007f757055f769: movabs $0x0,%r10
  0x00007f757055f773: mov    %r10,0x208(%r15)
  0x00007f757055f77a: cmpq   $0x0,0x8(%r15)
  0x00007f757055f782: je     0x00007f757055f791
  0x00007f757055f788: mov    0x8(%r15),%rax
  0x00007f757055f78c: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f757055f791: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055f797: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055f79d: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055f7a3: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055f7a9: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055f7af: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055f7b5: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055f7bb: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055f7c1: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055f7c7: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055f7cd: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055f7d3: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055f7d9: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055f7df: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055f7e5: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055f7eb: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055f7f4: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055f800: je     0x00007f757055f87d
  0x00007f757055f806: mov    %rsp,-0x28(%rsp)
  0x00007f757055f80b: sub    $0x80,%rsp
  0x00007f757055f812: mov    %rax,0x78(%rsp)
  0x00007f757055f817: mov    %rcx,0x70(%rsp)
  0x00007f757055f81c: mov    %rdx,0x68(%rsp)
  0x00007f757055f821: mov    %rbx,0x60(%rsp)
  0x00007f757055f826: mov    %rbp,0x50(%rsp)
  0x00007f757055f82b: mov    %rsi,0x48(%rsp)
  0x00007f757055f830: mov    %rdi,0x40(%rsp)
  0x00007f757055f835: mov    %r8,0x38(%rsp)
  0x00007f757055f83a: mov    %r9,0x30(%rsp)
  0x00007f757055f83f: mov    %r10,0x28(%rsp)
  0x00007f757055f844: mov    %r11,0x20(%rsp)
  0x00007f757055f849: mov    %r12,0x18(%rsp)
  0x00007f757055f84e: mov    %r13,0x10(%rsp)
  0x00007f757055f853: mov    %r14,0x8(%rsp)
  0x00007f757055f858: mov    %r15,(%rsp)
  0x00007f757055f85c: movabs $0x7f75856f340f,%rdi
  0x00007f757055f866: movabs $0x7f757055f806,%rsi
  0x00007f757055f870: mov    %rsp,%rdx
  0x00007f757055f873: and    $0xfffffffffffffff0,%rsp
  0x00007f757055f877: callq  0x00007f75853729fa
  0x00007f757055f87c: hlt    
  0x00007f757055f87d: add    $0x150,%rsp
  0x00007f757055f884: mov    (%rsp),%r15
  0x00007f757055f888: mov    0x8(%rsp),%r14
  0x00007f757055f88d: mov    0x10(%rsp),%r13
  0x00007f757055f892: mov    0x18(%rsp),%r12
  0x00007f757055f897: mov    0x20(%rsp),%r11
  0x00007f757055f89c: mov    0x28(%rsp),%r10
  0x00007f757055f8a1: mov    0x30(%rsp),%r9
  0x00007f757055f8a6: mov    0x38(%rsp),%r8
  0x00007f757055f8ab: mov    0x40(%rsp),%rdi
  0x00007f757055f8b0: mov    0x48(%rsp),%rsi
  0x00007f757055f8b5: mov    0x50(%rsp),%rbp
  0x00007f757055f8ba: mov    0x60(%rsp),%rbx
  0x00007f757055f8bf: mov    0x68(%rsp),%rdx
  0x00007f757055f8c4: mov    0x70(%rsp),%rcx
  0x00007f757055f8c9: mov    0x78(%rsp),%rax
  0x00007f757055f8ce: add    $0x80,%rsp
  0x00007f757055f8d5: leaveq 
  0x00007f757055f8d6: retq   
  0x00007f757055f8d7: nop

,
MethodHandle::interpreter_entry::_linkToSpecial [0x00007f7570563f30, 0x00007f757056432b[ (1019 bytes)
  0x00007f7570563f30: nop
  0x00007f7570563f31: nop
  0x00007f7570563f32: nop
  0x00007f7570563f33: nop
  0x00007f7570563f34: nop
  0x00007f7570563f35: nop
  0x00007f7570563f36: nop
  0x00007f7570563f37: nop
  0x00007f7570563f38: nop
  0x00007f7570563f39: nop
  0x00007f7570563f3a: Decoding RuntimeStub - monitorenter_nofpu Runtime1 stub 0x00007f757055f1d0
  0x00007f757055f260: push   %rbp
  0x00007f757055f261: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055f264: mov    %rsp,-0x28(%rsp)
  0x00007f757055f269: sub    $0x80,%rsp
  0x00007f757055f270: mov    %rax,0x78(%rsp)
  0x00007f757055f275: mov    %rcx,0x70(%rsp)
  0x00007f757055f27a: mov    %rdx,0x68(%rsp)
  0x00007f757055f27f: mov    %rbx,0x60(%rsp)
  0x00007f757055f284: mov    %rbp,0x50(%rsp)
  0x00007f757055f289: mov    %rsi,0x48(%rsp)
  0x00007f757055f28e: mov    %rdi,0x40(%rsp)
  0x00007f757055f293: mov    %r8,0x38(%rsp)
  0x00007f757055f298: mov    %r9,0x30(%rsp)
  0x00007f757055f29d: mov    %r10,0x28(%rsp)
  0x00007f757055f2a2: mov    %r11,0x20(%rsp)
  0x00007f757055f2a7: mov    %r12,0x18(%rsp)
  0x00007f757055f2ac: mov    %r13,0x10(%rsp)
  0x00007f757055f2b1: mov    %r14,0x8(%rsp)
  0x00007f757055f2b6: mov    %r15,(%rsp)
  0x00007f757055f2ba: sub    $0x150,%rsp
  0x00007f757055f2c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055f2cd: mov    0x18(%rbp),%rax
  0x00007f757055f2d1: mov    0x10(%rbp),%rbx
  0x00007f757055f2d5: mov    %rax,%rsi
  0x00007f757055f2d8: mov    %rbx,%rdx
  0x00007f757055f2db: mov    %r15,%rdi
  0x00007f757055f2de: mov    %rbp,0x210(%r15)
  0x00007f757055f2e5: mov    %rsp,0x200(%r15)
  0x00007f757055f2ec: callq  0x00007f7584e53674
  0x00007f757055f2f1: push   %rax
  0x00007f757055f2f2: push   %rdi
  0x00007f757055f2f3: push   %rsi
  0x00007f757055f2f4: push   %rdx
  0x00007f757055f2f5: push   %rcx
  0x00007f757055f2f6: push   %r8
  0x00007f757055f2f8: push   %r9
  0x00007f757055f2fa: push   %r10
  0x00007f757055f2fc: mov    %rsp,%r10
  0x00007f757055f2ff: and    $0xfffffffffffffff0,%rsp
  0x00007f757055f303: push   %r10
  0x00007f757055f305: push   %r11
  0x00007f757055f307: mov    $0x1,%edi
  0x00007f757055f30c: callq  0x00007f7585f5a2d0
  0x00007f757055f311: pop    %r11
  0x00007f757055f313: pop    %rsp
  0x00007f757055f314: pop    %r10
  0x00007f757055f316: pop    %r9
  0x00007f757055f318: pop    %r8
  0x00007f757055f31a: pop    %rcx
  0x00007f757055f31b: pop    %rdx
  0x00007f757055f31c: pop    %rsi
  0x00007f757055f31d: pop    %rdi
  0x00007f757055f31e: cmp    %rax,%r15
  0x00007f757055f321: je     0x00007f757055f3a3
  0x00007f757055f327: callq  0x00007f7585459a22
  0x00007f757055f32c: mov    %rsp,-0x28(%rsp)
  0x00007f757055f331: sub    $0x80,%rsp
  0x00007f757055f338: mov    %rax,0x78(%rsp)
  0x00007f757055f33d: mov    %rcx,0x70(%rsp)
  0x00007f757055f342: mov    %rdx,0x68(%rsp)
  0x00007f757055f347: mov    %rbx,0x60(%rsp)
  0x00007f757055f34c: mov    %rbp,0x50(%rsp)
  0x00007f757055f351: mov    %rsi,0x48(%rsp)
  0x00007f757055f356: mov    %rdi,0x40(%rsp)
  0x00007f757055f35b: mov    %r8,0x38(%rsp)
  0x00007f757055f360: mov    %r9,0x30(%rsp)
  0x00007f757055f365: mov    %r10,0x28(%rsp)
  0x00007f757055f36a: mov    %r11,0x20(%rsp)
  0x00007f757055f36f: mov    %r12,0x18(%rsp)
  0x00007f757055f374: mov    %r13,0x10(%rsp)
  0x00007f757055f379: mov    %r14,0x8(%rsp)
  0x00007f757055f37e: mov    %r15,(%rsp)
  0x00007f757055f382: movabs $0x7f75856f3278,%rdi
  0x00007f757055f38c: movabs $0x7f757055f32c,%rsi
  0x00007f757055f396: mov    %rsp,%rdx
  0x00007f757055f399: and    $0xfffffffffffffff0,%rsp
  0x00007f757055f39d: callq  0x00007f75853729fa
  0x00007f757055f3a2: hlt    
  0x00007f757055f3a3: pop    %rax
  0x00007f757055f3a4: movabs $0x0,%r10
  0x00007f757055f3ae: mov    %r10,0x200(%r15)
  0x00007f757055f3b5: movabs $0x0,%r10
  0x00007f757055f3bf: mov    %r10,0x210(%r15)
  0x00007f757055f3c6: movabs $0x0,%r10
  0x00007f757055f3d0: mov    %r10,0x208(%r15)
  0x00007f757055f3d7: cmpq   $0x0,0x8(%r15)
  0x00007f757055f3df: je     0x00007f757055f3ee
  0x00007f757055f3e5: mov    0x8(%r15),%rax
  0x00007f757055f3e9: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f757055f3ee: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055f3fa: je     0x00007f757055f477
  0x00007f757055f400: mov    %rsp,-0x28(%rsp)
  0x00007f757055f405: sub    $0x80,%rsp
  0x00007f757055f40c: mov    %rax,0x78(%rsp)
  0x00007f757055f411: mov    %rcx,0x70(%rsp)
  0x00007f757055f416: mov    %rdx,0x68(%rsp)
  0x00007f757055f41b: mov    %rbx,0x60(%rsp)
  0x00007f757055f420: mov    %rbp,0x50(%rsp)
  0x00007f757055f425: mov    %rsi,0x48(%rsp)
  0x00007f757055f42a: mov    %rdi,0x40(%rsp)
  0x00007f757055f42f: mov    %r8,0x38(%rsp)
  0x00007f757055f434: mov    %r9,0x30(%rsp)
  0x00007f757055f439: mov    %r10,0x28(%rsp)
  0x00007f757055f43e: mov    %r11,0x20(%rsp)
  0x00007f757055f443: mov    %r12,0x18(%rsp)
  0x00007f757055f448: mov    %r13,0x10(%rsp)
  0x00007f757055f44d: mov    %r14,0x8(%rsp)
  0x00007f757055f452: mov    %r15,(%rsp)
  0x00007f757055f456: movabs $0x7f75856f340f,%rdi
  0x00007f757055f460: movabs $0x7f757055f400,%rsi
  0x00007f757055f46a: mov    %rsp,%rdx
  0x00007f757055f46d: and    $0xfffffffffffffff0,%rsp
  0x00007f757055f471: callq  0x00007f75853729fa
  0x00007f757055f476: hlt    
  0x00007f757055f477: add    $0x150,%rsp
  0x00007f757055f47e: mov    (%rsp),%r15
  0x00007f757055f482: mov    0x8(%rsp),%r14
  0x00007f757055f487: mov    0x10(%rsp),%r13
  0x00007f757055f48c: mov    0x18(%rsp),%r12
  0x00007f757055f491: mov    0x20(%rsp),%r11
  0x00007f757055f496: mov    0x28(%rsp),%r10
  0x00007f757055f49b: mov    0x30(%rsp),%r9
  0x00007f757055f4a0: mov    0x38(%rsp),%r8
  0x00007f757055f4a5: mov    0x40(%rsp),%rdi
  0x00007f757055f4aa: mov    0x48(%rsp),%rsi
  0x00007f757055f4af: mov    0x50(%rsp),%rbp
  0x00007f757055f4b4: mov    0x60(%rsp),%rbx
  0x00007f757055f4b9: mov    0x68(%rsp),%rdx
  0x00007f757055f4be: mov    0x70(%rsp),%rcx
  0x00007f757055f4c3: mov    0x78(%rsp),%rax
  0x00007f757055f4c8: add    $0x80,%rsp
  0x00007f757055f4cf: leaveq 
  0x00007f757055f4d0: retq   
  0x00007f757055f4d1: nop
  0x00007f757055f4d2: nop
  0x00007f757055f4d3: nop
  0x00007f757055f4d4: nop
  0x00007f757055f4d5: nop
  0x00007f757055f4d6: nop
  0x00007f757055f4d7: nop

nop
MethodHandle::interpreter_entry::_linkToInterface [0x00007f757056432b, 0x00007f757056471e[ (1011 bytes)
  0x00007f757056432b: nop
  0x00007f757056432c: nop
  0x00007f757056432d: nop
  0x00007f757056432e: nop
  0x00007f757056432f: nop
  0x00007f7570564330: nop
  0x00007f7570564331: nop
  0x00007f7570564332: nop
  0x00007f7570564333: nop
  0x00007f7570564334: nop
  0x00007f7570564335: nop
  0x00007f7570564336: nop
  0x00007f7570564337: nop
  0x00007f7570564338: Decoding RuntimeStub - monitorexit Runtime1 stub 0x00007f757055edd0
  0x00007f757055ee60: push   %rbp
  0x00007f757055ee61: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055ee64: mov    %rsp,-0x28(%rsp)
  0x00007f757055ee69: sub    $0x80,%rsp
  0x00007f757055ee70: mov    %rax,0x78(%rsp)
  0x00007f757055ee75: mov    %rcx,0x70(%rsp)
  0x00007f757055ee7a: mov    %rdx,0x68(%rsp)
  0x00007f757055ee7f: mov    %rbx,0x60(%rsp)
  0x00007f757055ee84: mov    %rbp,0x50(%rsp)
  0x00007f757055ee89: mov    %rsi,0x48(%rsp)
  0x00007f757055ee8e: mov    %rdi,0x40(%rsp)
  0x00007f757055ee93: mov    %r8,0x38(%rsp)
  0x00007f757055ee98: mov    %r9,0x30(%rsp)
  0x00007f757055ee9d: mov    %r10,0x28(%rsp)
  0x00007f757055eea2: mov    %r11,0x20(%rsp)
  0x00007f757055eea7: mov    %r12,0x18(%rsp)
  0x00007f757055eeac: mov    %r13,0x10(%rsp)
  0x00007f757055eeb1: mov    %r14,0x8(%rsp)
  0x00007f757055eeb6: mov    %r15,(%rsp)
  0x00007f757055eeba: sub    $0x150,%rsp
  0x00007f757055eec1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055eecd: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055eed3: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055eed9: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055eedf: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055eee5: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055eeeb: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055eef1: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055eef7: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055eefd: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055ef03: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055ef09: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055ef0f: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055ef15: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055ef1b: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055ef21: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055ef27: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055ef30: mov    0x10(%rbp),%rax
  0x00007f757055ef34: mov    %rax,%rsi
  0x00007f757055ef37: mov    %r15,%rdi
  0x00007f757055ef3a: mov    %rbp,0x210(%r15)
  0x00007f757055ef41: mov    %rsp,0x200(%r15)
  0x00007f757055ef48: callq  0x00007f7584e53972
  0x00007f757055ef4d: push   %rax
  0x00007f757055ef4e: push   %rdi
  0x00007f757055ef4f: push   %rsi
  0x00007f757055ef50: push   %rdx
  0x00007f757055ef51: push   %rcx
  0x00007f757055ef52: push   %r8
  0x00007f757055ef54: push   %r9
  0x00007f757055ef56: push   %r10
  0x00007f757055ef58: mov    %rsp,%r10
  0x00007f757055ef5b: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ef5f: push   %r10
  0x00007f757055ef61: push   %r11
  0x00007f757055ef63: mov    $0x1,%edi
  0x00007f757055ef68: callq  0x00007f7585f5a2d0
  0x00007f757055ef6d: pop    %r11
  0x00007f757055ef6f: pop    %rsp
  0x00007f757055ef70: pop    %r10
  0x00007f757055ef72: pop    %r9
  0x00007f757055ef74: pop    %r8
  0x00007f757055ef76: pop    %rcx
  0x00007f757055ef77: pop    %rdx
  0x00007f757055ef78: pop    %rsi
  0x00007f757055ef79: pop    %rdi
  0x00007f757055ef7a: cmp    %rax,%r15
  0x00007f757055ef7d: je     0x00007f757055efff
  0x00007f757055ef83: callq  0x00007f7585459a22
  0x00007f757055ef88: mov    %rsp,-0x28(%rsp)
  0x00007f757055ef8d: sub    $0x80,%rsp
  0x00007f757055ef94: mov    %rax,0x78(%rsp)
  0x00007f757055ef99: mov    %rcx,0x70(%rsp)
  0x00007f757055ef9e: mov    %rdx,0x68(%rsp)
  0x00007f757055efa3: mov    %rbx,0x60(%rsp)
  0x00007f757055efa8: mov    %rbp,0x50(%rsp)
  0x00007f757055efad: mov    %rsi,0x48(%rsp)
  0x00007f757055efb2: mov    %rdi,0x40(%rsp)
  0x00007f757055efb7: mov    %r8,0x38(%rsp)
  0x00007f757055efbc: mov    %r9,0x30(%rsp)
  0x00007f757055efc1: mov    %r10,0x28(%rsp)
  0x00007f757055efc6: mov    %r11,0x20(%rsp)
  0x00007f757055efcb: mov    %r12,0x18(%rsp)
  0x00007f757055efd0: mov    %r13,0x10(%rsp)
  0x00007f757055efd5: mov    %r14,0x8(%rsp)
  0x00007f757055efda: mov    %r15,(%rsp)
  0x00007f757055efde: movabs $0x7f75856f3278,%rdi
  0x00007f757055efe8: movabs $0x7f757055ef88,%rsi
  0x00007f757055eff2: mov    %rsp,%rdx
  0x00007f757055eff5: and    $0xfffffffffffffff0,%rsp
  0x00007f757055eff9: callq  0x00007f75853729fa
  0x00007f757055effe: hlt    
  0x00007f757055efff: pop    %rax
  0x00007f757055f000: movabs $0x0,%r10
  0x00007f757055f00a: mov    %r10,0x200(%r15)
  0x00007f757055f011: movabs $0x0,%r10
  0x00007f757055f01b: mov    %r10,0x210(%r15)
  0x00007f757055f022: movabs $0x0,%r10
  0x00007f757055f02c: mov    %r10,0x208(%r15)
  0x00007f757055f033: cmpq   $0x0,0x8(%r15)
  0x00007f757055f03b: je     0x00007f757055f04a
  0x00007f757055f041: mov    0x8(%r15),%rax
  0x00007f757055f045: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f757055f04a: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055f050: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055f056: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055f05c: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055f062: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055f068: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055f06e: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055f074: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055f07a: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055f080: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055f086: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055f08c: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055f092: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055f098: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055f09e: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055f0a4: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055f0ad: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055f0b9: je     0x00007f757055f136
  0x00007f757055f0bf: mov    %rsp,-0x28(%rsp)
  0x00007f757055f0c4: sub    $0x80,%rsp
  0x00007f757055f0cb: mov    %rax,0x78(%rsp)
  0x00007f757055f0d0: mov    %rcx,0x70(%rsp)
  0x00007f757055f0d5: mov    %rdx,0x68(%rsp)
  0x00007f757055f0da: mov    %rbx,0x60(%rsp)
  0x00007f757055f0df: mov    %rbp,0x50(%rsp)
  0x00007f757055f0e4: mov    %rsi,0x48(%rsp)
  0x00007f757055f0e9: mov    %rdi,0x40(%rsp)
  0x00007f757055f0ee: mov    %r8,0x38(%rsp)
  0x00007f757055f0f3: mov    %r9,0x30(%rsp)
  0x00007f757055f0f8: mov    %r10,0x28(%rsp)
  0x00007f757055f0fd: mov    %r11,0x20(%rsp)
  0x00007f757055f102: mov    %r12,0x18(%rsp)
  0x00007f757055f107: mov    %r13,0x10(%rsp)
  0x00007f757055f10c: mov    %r14,0x8(%rsp)
  0x00007f757055f111: mov    %r15,(%rsp)
  0x00007f757055f115: movabs $0x7f75856f340f,%rdi
  0x00007f757055f11f: movabs $0x7f757055f0bf,%rsi
  0x00007f757055f129: mov    %rsp,%rdx
  0x00007f757055f12c: and    $0xfffffffffffffff0,%rsp
  0x00007f757055f130: callq  0x00007f75853729fa
  0x00007f757055f135: hlt    
  0x00007f757055f136: add    $0x150,%rsp
  0x00007f757055f13d: mov    (%rsp),%r15
  0x00007f757055f141: mov    0x8(%rsp),%r14
  0x00007f757055f146: mov    0x10(%rsp),%r13
  0x00007f757055f14b: mov    0x18(%rsp),%r12
  0x00007f757055f150: mov    0x20(%rsp),%r11
  0x00007f757055f155: mov    0x28(%rsp),%r10
  0x00007f757055f15a: mov    0x30(%rsp),%r9
  0x00007f757055f15f: mov    0x38(%rsp),%r8
  0x00007f757055f164: mov    0x40(%rsp),%rdi
  0x00007f757055f169: mov    0x48(%rsp),%rsi
  0x00007f757055f16e: mov    0x50(%rsp),%rbp
  0x00007f757055f173: mov    0x60(%rsp),%rbx
  0x00007f757055f178: mov    0x68(%rsp),%rdx
  0x00007f757055f17d: mov    0x70(%rsp),%rcx
  0x00007f757055f182: mov    0x78(%rsp),%rax
  0x00007f757055f187: add    $0x80,%rsp
  0x00007f757055f18e: leaveq 
  0x00007f757055f18f: retq   

Decoding RuntimeStub - _zap_dead_Java_locals_Java 0x00007f75705935d0
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570593620: sub    $0x88,%rsp
  0x00007f7570593627: mov    %rbp,0x80(%rsp)
  0x00007f757059362f: vmovsd %xmm7,0x70(%rsp)
  0x00007f7570593635: vmovsd %xmm6,0x68(%rsp)
  0x00007f757059363b: vmovsd %xmm5,0x60(%rsp)
  0x00007f7570593641: vmovsd %xmm4,0x58(%rsp)
  0x00007f7570593647: vmovsd %xmm3,0x50(%rsp)
  0x00007f757059364d: vmovsd %xmm2,0x48(%rsp)
  0x00007f7570593653: vmovsd %xmm1,0x40(%rsp)
  0x00007f7570593659: vmovsd %xmm0,0x38(%rsp)
  0x00007f757059365f: mov    %rsi,0x30(%rsp)
  0x00007f7570593664: mov    %rdx,0x28(%rsp)
  0x00007f7570593669: mov    %rdi,0x20(%rsp)
  0x00007f757059366e: mov    %rcx,0x18(%rsp)
  0x00007f7570593673: mov    %r12,0x10(%rsp)
  0x00007f7570593678: mov    %r9,0x8(%rsp)
  0x00007f757059367d: mov    %r8,(%rsp)
  0x00007f7570593681: mov    %rsp,0x200(%r15)
  0x00007f7570593688: mov    %r15,%rdi
  0x00007f757059368b: movabs $0x7f7585513822,%r10
  0x00007f7570593695: callq  *%r10
  0x00007f7570593698: mov    %r12,0x200(%r15)
  0x00007f757059369f: mov    %r12,0x208(%r15)
  0x00007f75705936a6: cmp    0x8(%r15),%r12
  0x00007f75705936aa: jne    0x00007f7570593707
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f75705936ac: mov    (%rsp),%r8
  0x00007f75705936b0: mov    0x8(%rsp),%r9
  0x00007f75705936b5: mov    0x10(%rsp),%r12
  0x00007f75705936ba: mov    0x18(%rsp),%rcx
  0x00007f75705936bf: mov    0x20(%rsp),%rdi
  0x00007f75705936c4: mov    0x28(%rsp),%rdx
  0x00007f75705936c9: mov    0x30(%rsp),%rsi
  0x00007f75705936ce: vmovsd 0x38(%rsp),%xmm0
  0x00007f75705936d4: vmovsd 0x40(%rsp),%xmm1
  0x00007f75705936da: vmovsd 0x48(%rsp),%xmm2
  0x00007f75705936e0: vmovsd 0x50(%rsp),%xmm3
  0x00007f75705936e6: vmovsd 0x58(%rsp),%xmm4
  0x00007f75705936ec: vmovsd 0x60(%rsp),%xmm5
  0x00007f75705936f2: vmovsd 0x68(%rsp),%xmm6
  0x00007f75705936f8: vmovsd 0x70(%rsp),%xmm7
  0x00007f75705936fe: add    $0x80,%rsp
  0x00007f7570593705: pop    %rbp
  0x00007f7570593706: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f7570593707: movabs $0x7f7570369420,%r10
  0x00007f7570593711: xor    %ebx,%ebx
  0x00007f7570593713: mov    (%rsp),%r8
  0x00007f7570593717: mov    0x8(%rsp),%r9
  0x00007f757059371c: mov    0x10(%rsp),%r12
  0x00007f7570593721: mov    0x18(%rsp),%rcx
  0x00007f7570593726: mov    0x20(%rsp),%rdi
  0x00007f757059372b: mov    0x28(%rsp),%rdx
  0x00007f7570593730: mov    0x30(%rsp),%rsi
  0x00007f7570593735: vmovsd 0x38(%rsp),%xmm0
  0x00007f757059373b: vmovsd 0x40(%rsp),%xmm1
  0x00007f7570593741: vmovsd 0x48(%rsp),%xmm2
  0x00007f7570593747: vmovsd 0x50(%rsp),%xmm3
  0x00007f757059374d: vmovsd 0x58(%rsp),%xmm4
  0x00007f7570593753: vmovsd 0x60(%rsp),%xmm5
  0x00007f7570593759: vmovsd 0x68(%rsp),%xmm6
  0x00007f757059375f: vmovsd 0x70(%rsp),%xmm7
  0x00007f7570593765: add    $0x80,%rsp
  0x00007f757059376c: pop    %rbp
  0x00007f757059376d: jmpq   *%r10

jmp*%r10
Decoding RuntimeStub - monitorexit_nofpu Runtime1 stub 0x00007f7570593290
  0x00007f7570593320: push   %rbp
  0x00007f7570593321: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f7570593324: mov    %rsp,-0x28(%rsp)
  0x00007f7570593329: sub    $0x80,%rsp
  0x00007f7570593330: mov    %rax,0x78(%rsp)
  0x00007f7570593335: mov    %rcx,0x70(%rsp)
  0x00007f757059333a: mov    %rdx,0x68(%rsp)
  0x00007f757059333f: mov    %rbx,0x60(%rsp)
  0x00007f7570593344: mov    %rbp,0x50(%rsp)
  0x00007f7570593349: mov    %rsi,0x48(%rsp)
  0x00007f757059334e: mov    %rdi,0x40(%rsp)
  0x00007f7570593353: mov    %r8,0x38(%rsp)
  0x00007f7570593358: mov    %r9,0x30(%rsp)
  0x00007f757059335d: mov    %r10,0x28(%rsp)
  0x00007f7570593362: mov    %r11,0x20(%rsp)
  0x00007f7570593367: mov    %r12,0x18(%rsp)
  0x00007f757059336c: mov    %r13,0x10(%rsp)
  0x00007f7570593371: mov    %r14,0x8(%rsp)
  0x00007f7570593376: mov    %r15,(%rsp)
  0x00007f757059337a: sub    $0x150,%rsp
  0x00007f7570593381: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059338d: mov    0x10(%rbp),%rax
  0x00007f7570593391: mov    %rax,%rsi
  0x00007f7570593394: mov    %r15,%rdi
  0x00007f7570593397: mov    %rbp,0x210(%r15)
  0x00007f757059339e: mov    %rsp,0x200(%r15)
  0x00007f75705933a5: callq  0x00007f7584e53972
  0x00007f75705933aa: push   %rax
  0x00007f75705933ab: push   %rdi
  0x00007f75705933ac: push   %rsi
  0x00007f75705933ad: push   %rdx
  0x00007f75705933ae: push   %rcx
  0x00007f75705933af: push   %r8
  0x00007f75705933b1: push   %r9
  0x00007f75705933b3: push   %r10
  0x00007f75705933b5: mov    %rsp,%r10
  0x00007f75705933b8: and    $0xfffffffffffffff0,%rsp
  0x00007f75705933bc: push   %r10
  0x00007f75705933be: push   %r11
  0x00007f75705933c0: mov    $0x1,%edi
  0x00007f75705933c5: callq  0x00007f7585f5a2d0
  0x00007f75705933ca: pop    %r11
  0x00007f75705933cc: pop    %rsp
  0x00007f75705933cd: pop    %r10
  0x00007f75705933cf: pop    %r9
  0x00007f75705933d1: pop    %r8
  0x00007f75705933d3: pop    %rcx
  0x00007f75705933d4: pop    %rdx
  0x00007f75705933d5: pop    %rsi
  0x00007f75705933d6: pop    %rdi
  0x00007f75705933d7: cmp    %rax,%r15
  0x00007f75705933da: je     0x00007f757059345c
  0x00007f75705933e0: callq  0x00007f7585459a22
  0x00007f75705933e5: mov    %rsp,-0x28(%rsp)
  0x00007f75705933ea: sub    $0x80,%rsp
  0x00007f75705933f1: mov    %rax,0x78(%rsp)
  0x00007f75705933f6: mov    %rcx,0x70(%rsp)
  0x00007f75705933fb: mov    %rdx,0x68(%rsp)
  0x00007f7570593400: mov    %rbx,0x60(%rsp)
  0x00007f7570593405: mov    %rbp,0x50(%rsp)
  0x00007f757059340a: mov    %rsi,0x48(%rsp)
  0x00007f757059340f: mov    %rdi,0x40(%rsp)
  0x00007f7570593414: mov    %r8,0x38(%rsp)
  0x00007f7570593419: mov    %r9,0x30(%rsp)
  0x00007f757059341e: mov    %r10,0x28(%rsp)
  0x00007f7570593423: mov    %r11,0x20(%rsp)
  0x00007f7570593428: mov    %r12,0x18(%rsp)
  0x00007f757059342d: mov    %r13,0x10(%rsp)
  0x00007f7570593432: mov    %r14,0x8(%rsp)
  0x00007f7570593437: mov    %r15,(%rsp)
  0x00007f757059343b: movabs $0x7f75856f3278,%rdi
  0x00007f7570593445: movabs $0x7f75705933e5,%rsi
  0x00007f757059344f: mov    %rsp,%rdx
  0x00007f7570593452: and    $0xfffffffffffffff0,%rsp
  0x00007f7570593456: callq  0x00007f75853729fa
  0x00007f757059345b: hlt    
  0x00007f757059345c: pop    %rax
  0x00007f757059345d: movabs $0x0,%r10
  0x00007f7570593467: mov    %r10,0x200(%r15)
  0x00007f757059346e: movabs $0x0,%r10
  0x00007f7570593478: mov    %r10,0x210(%r15)
  0x00007f757059347f: movabs $0x0,%r10
  0x00007f7570593489: mov    %r10,0x208(%r15)
  0x00007f7570593490: cmpq   $0x0,0x8(%r15)
  0x00007f7570593498: je     0x00007f75705934a7
  0x00007f757059349e: mov    0x8(%r15),%rax
  0x00007f75705934a2: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f75705934a7: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f75705934b3: je     0x00007f7570593530
  0x00007f75705934b9: mov    %rsp,-0x28(%rsp)
  0x00007f75705934be: sub    $0x80,%rsp
  0x00007f75705934c5: mov    %rax,0x78(%rsp)
  0x00007f75705934ca: mov    %rcx,0x70(%rsp)
  0x00007f75705934cf: mov    %rdx,0x68(%rsp)
  0x00007f75705934d4: mov    %rbx,0x60(%rsp)
  0x00007f75705934d9: mov    %rbp,0x50(%rsp)
  0x00007f75705934de: mov    %rsi,0x48(%rsp)
  0x00007f75705934e3: mov    %rdi,0x40(%rsp)
  0x00007f75705934e8: mov    %r8,0x38(%rsp)
  0x00007f75705934ed: mov    %r9,0x30(%rsp)
  0x00007f75705934f2: mov    %r10,0x28(%rsp)
  0x00007f75705934f7: mov    %r11,0x20(%rsp)
  0x00007f75705934fc: mov    %r12,0x18(%rsp)
  0x00007f7570593501: mov    %r13,0x10(%rsp)
  0x00007f7570593506: mov    %r14,0x8(%rsp)
  0x00007f757059350b: mov    %r15,(%rsp)
  0x00007f757059350f: movabs $0x7f75856f340f,%rdi
  0x00007f7570593519: movabs $0x7f75705934b9,%rsi
  0x00007f7570593523: mov    %rsp,%rdx
  0x00007f7570593526: and    $0xfffffffffffffff0,%rsp
  0x00007f757059352a: callq  0x00007f75853729fa
  0x00007f757059352f: hlt    
  0x00007f7570593530: add    $0x150,%rsp
  0x00007f7570593537: mov    (%rsp),%r15
  0x00007f757059353b: mov    0x8(%rsp),%r14
  0x00007f7570593540: mov    0x10(%rsp),%r13
  0x00007f7570593545: mov    0x18(%rsp),%r12
  0x00007f757059354a: mov    0x20(%rsp),%r11
  0x00007f757059354f: mov    0x28(%rsp),%r10
  0x00007f7570593554: mov    0x30(%rsp),%r9
  0x00007f7570593559: mov    0x38(%rsp),%r8
  0x00007f757059355e: mov    0x40(%rsp),%rdi
  0x00007f7570593563: mov    0x48(%rsp),%rsi
  0x00007f7570593568: mov    0x50(%rsp),%rbp
  0x00007f757059356d: mov    0x60(%rsp),%rbx
  0x00007f7570593572: mov    0x68(%rsp),%rdx
  0x00007f7570593577: mov    0x70(%rsp),%rcx
  0x00007f757059357c: mov    0x78(%rsp),%rax
  0x00007f7570593581: add    $0x80,%rsp
  0x00007f7570593588: leaveq 
  0x00007f7570593589: retq   
  0x00007f757059358a: nop
  0x00007f757059358b: nop
  0x00007f757059358c: nop
  0x00007f757059358d: nop
  0x00007f757059358e: nop
  0x00007f757059358f: nop

Decoding RuntimeStub - deoptimize Runtime1 stub 0x00007f7570592e90
  0x00007f7570592f20: push   %rbp
  0x00007f7570592f21: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f7570592f24: mov    %rsp,-0x28(%rsp)
  0x00007f7570592f29: sub    $0x80,%rsp
  0x00007f7570592f30: mov    %rax,0x78(%rsp)
  0x00007f7570592f35: mov    %rcx,0x70(%rsp)
  0x00007f7570592f3a: mov    %rdx,0x68(%rsp)
  0x00007f7570592f3f: mov    %rbx,0x60(%rsp)
  0x00007f7570592f44: mov    %rbp,0x50(%rsp)
  0x00007f7570592f49: mov    %rsi,0x48(%rsp)
  0x00007f7570592f4e: mov    %rdi,0x40(%rsp)
  0x00007f7570592f53: mov    %r8,0x38(%rsp)
  0x00007f7570592f58: mov    %r9,0x30(%rsp)
  0x00007f7570592f5d: mov    %r10,0x28(%rsp)
  0x00007f7570592f62: mov    %r11,0x20(%rsp)
  0x00007f7570592f67: mov    %r12,0x18(%rsp)
  0x00007f7570592f6c: mov    %r13,0x10(%rsp)
  0x00007f7570592f71: mov    %r14,0x8(%rsp)
  0x00007f7570592f76: mov    %r15,(%rsp)
  0x00007f7570592f7a: sub    $0x150,%rsp
  0x00007f7570592f81: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570592f8d: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570592f93: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570592f99: vmovsd %xmm2,0x18(%rsp)
  0x00007f7570592f9f: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570592fa5: vmovsd %xmm4,0x28(%rsp)
  0x00007f7570592fab: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570592fb1: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570592fb7: vmovsd %xmm7,0x40(%rsp)
  0x00007f7570592fbd: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570592fc3: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570592fc9: vmovsd %xmm10,0x58(%rsp)
  0x00007f7570592fcf: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570592fd5: vmovsd %xmm12,0x68(%rsp)
  0x00007f7570592fdb: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570592fe1: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570592fe7: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570592ff0: mov    %r15,%rdi
  0x00007f7570592ff3: mov    %rbp,0x210(%r15)
  0x00007f7570592ffa: mov    %rsp,0x200(%r15)
  0x00007f7570593001: callq  0x00007f7584e53bde
  0x00007f7570593006: push   %rax
  0x00007f7570593007: push   %rdi
  0x00007f7570593008: push   %rsi
  0x00007f7570593009: push   %rdx
  0x00007f757059300a: push   %rcx
  0x00007f757059300b: push   %r8
  0x00007f757059300d: push   %r9
  0x00007f757059300f: push   %r10
  0x00007f7570593011: mov    %rsp,%r10
  0x00007f7570593014: and    $0xfffffffffffffff0,%rsp
  0x00007f7570593018: push   %r10
  0x00007f757059301a: push   %r11
  0x00007f757059301c: mov    $0x1,%edi
  0x00007f7570593021: callq  0x00007f7585f5a2d0
  0x00007f7570593026: pop    %r11
  0x00007f7570593028: pop    %rsp
  0x00007f7570593029: pop    %r10
  0x00007f757059302b: pop    %r9
  0x00007f757059302d: pop    %r8
  0x00007f757059302f: pop    %rcx
  0x00007f7570593030: pop    %rdx
  0x00007f7570593031: pop    %rsi
  0x00007f7570593032: pop    %rdi
  0x00007f7570593033: cmp    %rax,%r15
  0x00007f7570593036: je     0x00007f75705930b8
  0x00007f757059303c: callq  0x00007f7585459a22
  0x00007f7570593041: mov    %rsp,-0x28(%rsp)
  0x00007f7570593046: sub    $0x80,%rsp
  0x00007f757059304d: mov    %rax,0x78(%rsp)
  0x00007f7570593052: mov    %rcx,0x70(%rsp)
  0x00007f7570593057: mov    %rdx,0x68(%rsp)
  0x00007f757059305c: mov    %rbx,0x60(%rsp)
  0x00007f7570593061: mov    %rbp,0x50(%rsp)
  0x00007f7570593066: mov    %rsi,0x48(%rsp)
  0x00007f757059306b: mov    %rdi,0x40(%rsp)
  0x00007f7570593070: mov    %r8,0x38(%rsp)
  0x00007f7570593075: mov    %r9,0x30(%rsp)
  0x00007f757059307a: mov    %r10,0x28(%rsp)
  0x00007f757059307f: mov    %r11,0x20(%rsp)
  0x00007f7570593084: mov    %r12,0x18(%rsp)
  0x00007f7570593089: mov    %r13,0x10(%rsp)
  0x00007f757059308e: mov    %r14,0x8(%rsp)
  0x00007f7570593093: mov    %r15,(%rsp)
  0x00007f7570593097: movabs $0x7f75856f3278,%rdi
  0x00007f75705930a1: movabs $0x7f7570593041,%rsi
  0x00007f75705930ab: mov    %rsp,%rdx
  0x00007f75705930ae: and    $0xfffffffffffffff0,%rsp
  0x00007f75705930b2: callq  0x00007f75853729fa
  0x00007f75705930b7: hlt    
  0x00007f75705930b8: pop    %rax
  0x00007f75705930b9: movabs $0x0,%r10
  0x00007f75705930c3: mov    %r10,0x200(%r15)
  0x00007f75705930ca: movabs $0x0,%r10
  0x00007f75705930d4: mov    %r10,0x210(%r15)
  0x00007f75705930db: movabs $0x0,%r10
  0x00007f75705930e5: mov    %r10,0x208(%r15)
  0x00007f75705930ec: cmpq   $0x0,0x8(%r15)
  0x00007f75705930f4: je     0x00007f7570593103
  0x00007f75705930fa: mov    0x8(%r15),%rax
  0x00007f75705930fe: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f7570593103: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570593109: vmovsd 0x10(%rsp),%xmm1
  0x00007f757059310f: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570593115: vmovsd 0x20(%rsp),%xmm3
  0x00007f757059311b: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570593121: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570593127: vmovsd 0x38(%rsp),%xmm6
  0x00007f757059312d: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570593133: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570593139: vmovsd 0x50(%rsp),%xmm9
  0x00007f757059313f: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570593145: vmovsd 0x60(%rsp),%xmm11
  0x00007f757059314b: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570593151: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570593157: vmovsd 0x78(%rsp),%xmm14
  0x00007f757059315d: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570593166: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570593172: je     0x00007f75705931ef
  0x00007f7570593178: mov    %rsp,-0x28(%rsp)
  0x00007f757059317d: sub    $0x80,%rsp
  0x00007f7570593184: mov    %rax,0x78(%rsp)
  0x00007f7570593189: mov    %rcx,0x70(%rsp)
  0x00007f757059318e: mov    %rdx,0x68(%rsp)
  0x00007f7570593193: mov    %rbx,0x60(%rsp)
  0x00007f7570593198: mov    %rbp,0x50(%rsp)
  0x00007f757059319d: mov    %rsi,0x48(%rsp)
  0x00007f75705931a2: mov    %rdi,0x40(%rsp)
  0x00007f75705931a7: mov    %r8,0x38(%rsp)
  0x00007f75705931ac: mov    %r9,0x30(%rsp)
  0x00007f75705931b1: mov    %r10,0x28(%rsp)
  0x00007f75705931b6: mov    %r11,0x20(%rsp)
  0x00007f75705931bb: mov    %r12,0x18(%rsp)
  0x00007f75705931c0: mov    %r13,0x10(%rsp)
  0x00007f75705931c5: mov    %r14,0x8(%rsp)
  0x00007f75705931ca: mov    %r15,(%rsp)
  0x00007f75705931ce: movabs $0x7f75856f340f,%rdi
  0x00007f75705931d8: movabs $0x7f7570593178,%rsi
  0x00007f75705931e2: mov    %rsp,%rdx
  0x00007f75705931e5: and    $0xfffffffffffffff0,%rsp
  0x00007f75705931e9: callq  0x00007f75853729fa
  0x00007f75705931ee: hlt    
  0x00007f75705931ef: add    $0x150,%rsp
  0x00007f75705931f6: mov    (%rsp),%r15
  0x00007f75705931fa: mov    0x8(%rsp),%r14
  0x00007f75705931ff: mov    0x10(%rsp),%r13
  0x00007f7570593204: mov    0x18(%rsp),%r12
  0x00007f7570593209: mov    0x20(%rsp),%r11
  0x00007f757059320e: mov    0x28(%rsp),%r10
  0x00007f7570593213: mov    0x30(%rsp),%r9
  0x00007f7570593218: mov    0x38(%rsp),%r8
  0x00007f757059321d: mov    0x40(%rsp),%rdi
  0x00007f7570593222: mov    0x48(%rsp),%rsi
  0x00007f7570593227: mov    0x50(%rsp),%rbp
  0x00007f757059322c: mov    0x60(%rsp),%rbx
  0x00007f7570593231: mov    0x68(%rsp),%rdx
  0x00007f7570593236: mov    0x70(%rsp),%rcx
  0x00007f757059323b: mov    0x78(%rsp),%rax
  0x00007f7570593240: add    $0x80,%rsp
  0x00007f7570593247: leaveq 
  0x00007f7570593248: jmpq   0x00007f7570470356
  0x00007f757059324d: leaveq 
  0x00007f757059324e: retq   
  0x00007f757059324f: nop

Decoding RuntimeStub - _zap_dead_native_locals_Java 0x00007f7570592cd0
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0x00007f7570592d20: sub    $0x88,%rsp
  0x00007f7570592d27: mov    %rbp,0x80(%rsp)
  0x00007f7570592d2f: vmovsd %xmm7,0x70(%rsp)
  0x00007f7570592d35: vmovsd %xmm6,0x68(%rsp)
  0x00007f7570592d3b: vmovsd %xmm5,0x60(%rsp)
  0x00007f7570592d41: vmovsd %xmm4,0x58(%rsp)
  0x00007f7570592d47: vmovsd %xmm3,0x50(%rsp)
  0x00007f7570592d4d: vmovsd %xmm2,0x48(%rsp)
  0x00007f7570592d53: vmovsd %xmm1,0x40(%rsp)
  0x00007f7570592d59: vmovsd %xmm0,0x38(%rsp)
  0x00007f7570592d5f: mov    %rsi,0x30(%rsp)
  0x00007f7570592d64: mov    %rdx,0x28(%rsp)
  0x00007f7570592d69: mov    %rdi,0x20(%rsp)
  0x00007f7570592d6e: mov    %rcx,0x18(%rsp)
  0x00007f7570592d73: mov    %r12,0x10(%rsp)
  0x00007f7570592d78: mov    %r9,0x8(%rsp)
  0x00007f7570592d7d: mov    %r8,(%rsp)
  0x00007f7570592d81: mov    %rsp,0x200(%r15)
  0x00007f7570592d88: mov    %r15,%rdi
  0x00007f7570592d8b: movabs $0x7f7585513952,%r10
  0x00007f7570592d95: callq  *%r10
  0x00007f7570592d98: mov    %r12,0x200(%r15)
  0x00007f7570592d9f: mov    %r12,0x208(%r15)
  0x00007f7570592da6: cmp    0x8(%r15),%r12
  0x00007f7570592daa: jne    0x00007f7570592e07
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0x00007f7570592dac: mov    (%rsp),%r8
  0x00007f7570592db0: mov    0x8(%rsp),%r9
  0x00007f7570592db5: mov    0x10(%rsp),%r12
  0x00007f7570592dba: mov    0x18(%rsp),%rcx
  0x00007f7570592dbf: mov    0x20(%rsp),%rdi
  0x00007f7570592dc4: mov    0x28(%rsp),%rdx
  0x00007f7570592dc9: mov    0x30(%rsp),%rsi
  0x00007f7570592dce: vmovsd 0x38(%rsp),%xmm0
  0x00007f7570592dd4: vmovsd 0x40(%rsp),%xmm1
  0x00007f7570592dda: vmovsd 0x48(%rsp),%xmm2
  0x00007f7570592de0: vmovsd 0x50(%rsp),%xmm3
  0x00007f7570592de6: vmovsd 0x58(%rsp),%xmm4
  0x00007f7570592dec: vmovsd 0x60(%rsp),%xmm5
  0x00007f7570592df2: vmovsd 0x68(%rsp),%xmm6
  0x00007f7570592df8: vmovsd 0x70(%rsp),%xmm7
  0x00007f7570592dfe: add    $0x80,%rsp
  0x00007f7570592e05: pop    %rbp
  0x00007f7570592e06: retq   
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0x00007f7570592e07: movabs $0x7f7570369420,%r10
  0x00007f7570592e11: xor    %ebx,%ebx
  0x00007f7570592e13: mov    (%rsp),%r8
  0x00007f7570592e17: mov    0x8(%rsp),%r9
  0x00007f7570592e1c: mov    0x10(%rsp),%r12
  0x00007f7570592e21: mov    0x18(%rsp),%rcx
  0x00007f7570592e26: mov    0x20(%rsp),%rdi
  0x00007f7570592e2b: mov    0x28(%rsp),%rdx
  0x00007f7570592e30: mov    0x30(%rsp),%rsi
  0x00007f7570592e35: vmovsd 0x38(%rsp),%xmm0
  0x00007f7570592e3b: vmovsd 0x40(%rsp),%xmm1
  0x00007f7570592e41: vmovsd 0x48(%rsp),%xmm2
  0x00007f7570592e47: vmovsd 0x50(%rsp),%xmm3
  0x00007f7570592e4d: vmovsd 0x58(%rsp),%xmm4
  0x00007f7570592e53: vmovsd 0x60(%rsp),%xmm5
  0x00007f7570592e59: vmovsd 0x68(%rsp),%xmm6
  0x00007f7570592e5f: vmovsd 0x70(%rsp),%xmm7
  0x00007f7570592e65: add    $0x80,%rsp
  0x00007f7570592e6c: pop    %rbp
  0x00007f7570592e6d: jmpq   *%r10

Decoding RuntimeStub - access_field_patching Runtime1 stub 0x00007f7570592190
  0x00007f7570592260: push   %rbp
  0x00007f7570592261: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f7570592264: mov    %rsp,-0x28(%rsp)
  0x00007f7570592269: sub    $0x80,%rsp
  0x00007f7570592270: mov    %rax,0x78(%rsp)
  0x00007f7570592275: mov    %rcx,0x70(%rsp)
  0x00007f757059227a: mov    %rdx,0x68(%rsp)
  0x00007f757059227f: mov    %rbx,0x60(%rsp)
  0x00007f7570592284: mov    %rbp,0x50(%rsp)
  0x00007f7570592289: mov    %rsi,0x48(%rsp)
  0x00007f757059228e: mov    %rdi,0x40(%rsp)
  0x00007f7570592293: mov    %r8,0x38(%rsp)
  0x00007f7570592298: mov    %r9,0x30(%rsp)
  0x00007f757059229d: mov    %r10,0x28(%rsp)
  0x00007f75705922a2: mov    %r11,0x20(%rsp)
  0x00007f75705922a7: mov    %r12,0x18(%rsp)
  0x00007f75705922ac: mov    %r13,0x10(%rsp)
  0x00007f75705922b1: mov    %r14,0x8(%rsp)
  0x00007f75705922b6: mov    %r15,(%rsp)
  0x00007f75705922ba: sub    $0x150,%rsp
  0x00007f75705922c1: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f75705922cd: vmovsd %xmm0,0x8(%rsp)
  0x00007f75705922d3: vmovsd %xmm1,0x10(%rsp)
  0x00007f75705922d9: vmovsd %xmm2,0x18(%rsp)
  0x00007f75705922df: vmovsd %xmm3,0x20(%rsp)
  0x00007f75705922e5: vmovsd %xmm4,0x28(%rsp)
  0x00007f75705922eb: vmovsd %xmm5,0x30(%rsp)
  0x00007f75705922f1: vmovsd %xmm6,0x38(%rsp)
  0x00007f75705922f7: vmovsd %xmm7,0x40(%rsp)
  0x00007f75705922fd: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570592303: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570592309: vmovsd %xmm10,0x58(%rsp)
  0x00007f757059230f: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570592315: vmovsd %xmm12,0x68(%rsp)
  0x00007f757059231b: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570592321: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570592327: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570592330: mov    %r15,%rdi
  0x00007f7570592333: mov    %rbp,0x210(%r15)
  0x00007f757059233a: mov    %rsp,0x200(%r15)
  0x00007f7570592341: callq  0x00007f7584e55b90
  0x00007f7570592346: push   %rax
  0x00007f7570592347: push   %rdi
  0x00007f7570592348: push   %rsi
  0x00007f7570592349: push   %rdx
  0x00007f757059234a: push   %rcx
  0x00007f757059234b: push   %r8
  0x00007f757059234d: push   %r9
  0x00007f757059234f: push   %r10
  0x00007f7570592351: mov    %rsp,%r10
  0x00007f7570592354: and    $0xfffffffffffffff0,%rsp
  0x00007f7570592358: push   %r10
  0x00007f757059235a: push   %r11
  0x00007f757059235c: mov    $0x1,%edi
  0x00007f7570592361: callq  0x00007f7585f5a2d0
  0x00007f7570592366: pop    %r11
  0x00007f7570592368: pop    %rsp
  0x00007f7570592369: pop    %r10
  0x00007f757059236b: pop    %r9
  0x00007f757059236d: pop    %r8
  0x00007f757059236f: pop    %rcx
  0x00007f7570592370: pop    %rdx
  0x00007f7570592371: pop    %rsi
  0x00007f7570592372: pop    %rdi
  0x00007f7570592373: cmp    %rax,%r15
  0x00007f7570592376: je     0x00007f75705923f3
  0x00007f757059237c: mov    %rsp,-0x28(%rsp)
  0x00007f7570592381: sub    $0x80,%rsp
  0x00007f7570592388: mov    %rax,0x78(%rsp)
  0x00007f757059238d: mov    %rcx,0x70(%rsp)
  0x00007f7570592392: mov    %rdx,0x68(%rsp)
  0x00007f7570592397: mov    %rbx,0x60(%rsp)
  0x00007f757059239c: mov    %rbp,0x50(%rsp)
  0x00007f75705923a1: mov    %rsi,0x48(%rsp)
  0x00007f75705923a6: mov    %rdi,0x40(%rsp)
  0x00007f75705923ab: mov    %r8,0x38(%rsp)
  0x00007f75705923b0: mov    %r9,0x30(%rsp)
  0x00007f75705923b5: mov    %r10,0x28(%rsp)
  0x00007f75705923ba: mov    %r11,0x20(%rsp)
  0x00007f75705923bf: mov    %r12,0x18(%rsp)
  0x00007f75705923c4: mov    %r13,0x10(%rsp)
  0x00007f75705923c9: mov    %r14,0x8(%rsp)
  0x00007f75705923ce: mov    %r15,(%rsp)
  0x00007f75705923d2: movabs $0x7f75856f3528,%rdi
  0x00007f75705923dc: movabs $0x7f757059237c,%rsi
  0x00007f75705923e6: mov    %rsp,%rdx
  0x00007f75705923e9: and    $0xfffffffffffffff0,%rsp
  0x00007f75705923ed: callq  0x00007f75853729fa
  0x00007f75705923f2: hlt    
  0x00007f75705923f3: pop    %rax
  0x00007f75705923f4: movabs $0x0,%r10
  0x00007f75705923fe: mov    %r10,0x200(%r15)
  0x00007f7570592405: movabs $0x0,%r10
  0x00007f757059240f: mov    %r10,0x210(%r15)
  0x00007f7570592416: movabs $0x0,%r10
  0x00007f7570592420: mov    %r10,0x208(%r15)
  0x00007f7570592427: cmpq   $0x0,0x8(%r15)
  0x00007f757059242f: je     0x00007f75705926c4
  0x00007f7570592435: test   %rax,%rax
  0x00007f7570592438: je     0x00007f757055b240
  0x00007f757059243e: mov    0x8(%r15),%rax
  0x00007f7570592442: movabs $0x0,%r10
  0x00007f757059244c: mov    %r10,0x8(%r15)
  0x00007f7570592450: mov    0x1d8(%rsp),%rdx
  0x00007f7570592458: cmpq   $0x0,0x2d0(%r15)
  0x00007f7570592463: je     0x00007f75705924e0
  0x00007f7570592469: mov    %rsp,-0x28(%rsp)
  0x00007f757059246e: sub    $0x80,%rsp
  0x00007f7570592475: mov    %rax,0x78(%rsp)
  0x00007f757059247a: mov    %rcx,0x70(%rsp)
  0x00007f757059247f: mov    %rdx,0x68(%rsp)
  0x00007f7570592484: mov    %rbx,0x60(%rsp)
  0x00007f7570592489: mov    %rbp,0x50(%rsp)
  0x00007f757059248e: mov    %rsi,0x48(%rsp)
  0x00007f7570592493: mov    %rdi,0x40(%rsp)
  0x00007f7570592498: mov    %r8,0x38(%rsp)
  0x00007f757059249d: mov    %r9,0x30(%rsp)
  0x00007f75705924a2: mov    %r10,0x28(%rsp)
  0x00007f75705924a7: mov    %r11,0x20(%rsp)
  0x00007f75705924ac: mov    %r12,0x18(%rsp)
  0x00007f75705924b1: mov    %r13,0x10(%rsp)
  0x00007f75705924b6: mov    %r14,0x8(%rsp)
  0x00007f75705924bb: mov    %r15,(%rsp)
  0x00007f75705924bf: movabs $0x7f75856f3497,%rdi
  0x00007f75705924c9: movabs $0x7f7570592469,%rsi
  0x00007f75705924d3: mov    %rsp,%rdx
  0x00007f75705924d6: and    $0xfffffffffffffff0,%rsp
  0x00007f75705924da: callq  0x00007f75853729fa
  0x00007f75705924df: hlt    
  0x00007f75705924e0: cmpq   $0x0,0x2d8(%r15)
  0x00007f75705924eb: je     0x00007f7570592568
  0x00007f75705924f1: mov    %rsp,-0x28(%rsp)
  0x00007f75705924f6: sub    $0x80,%rsp
  0x00007f75705924fd: mov    %rax,0x78(%rsp)
  0x00007f7570592502: mov    %rcx,0x70(%rsp)
  0x00007f7570592507: mov    %rdx,0x68(%rsp)
  0x00007f757059250c: mov    %rbx,0x60(%rsp)
  0x00007f7570592511: mov    %rbp,0x50(%rsp)
  0x00007f7570592516: mov    %rsi,0x48(%rsp)
  0x00007f757059251b: mov    %rdi,0x40(%rsp)
  0x00007f7570592520: mov    %r8,0x38(%rsp)
  0x00007f7570592525: mov    %r9,0x30(%rsp)
  0x00007f757059252a: mov    %r10,0x28(%rsp)
  0x00007f757059252f: mov    %r11,0x20(%rsp)
  0x00007f7570592534: mov    %r12,0x18(%rsp)
  0x00007f7570592539: mov    %r13,0x10(%rsp)
  0x00007f757059253e: mov    %r14,0x8(%rsp)
  0x00007f7570592543: mov    %r15,(%rsp)
  0x00007f7570592547: movabs $0x7f75856f34b3,%rdi
  0x00007f7570592551: movabs $0x7f75705924f1,%rsi
  0x00007f757059255b: mov    %rsp,%rdx
  0x00007f757059255e: and    $0xfffffffffffffff0,%rsp
  0x00007f7570592562: callq  0x00007f75853729fa
  0x00007f7570592567: hlt    
  0x00007f7570592568: mov    %rax,0x2d0(%r15)
  0x00007f757059256f: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f7570592576: vmovsd 0x8(%rsp),%xmm0
  0x00007f757059257c: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570592582: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570592588: vmovsd 0x20(%rsp),%xmm3
  0x00007f757059258e: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570592594: vmovsd 0x30(%rsp),%xmm5
  0x00007f757059259a: vmovsd 0x38(%rsp),%xmm6
  0x00007f75705925a0: vmovsd 0x40(%rsp),%xmm7
  0x00007f75705925a6: vmovsd 0x48(%rsp),%xmm8
  0x00007f75705925ac: vmovsd 0x50(%rsp),%xmm9
  0x00007f75705925b2: vmovsd 0x58(%rsp),%xmm10
  0x00007f75705925b8: vmovsd 0x60(%rsp),%xmm11
  0x00007f75705925be: vmovsd 0x68(%rsp),%xmm12
  0x00007f75705925c4: vmovsd 0x70(%rsp),%xmm13
  0x00007f75705925ca: vmovsd 0x78(%rsp),%xmm14
  0x00007f75705925d0: vmovsd 0x80(%rsp),%xmm15
  0x00007f75705925d9: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f75705925e5: je     0x00007f7570592662
  0x00007f75705925eb: mov    %rsp,-0x28(%rsp)
  0x00007f75705925f0: sub    $0x80,%rsp
  0x00007f75705925f7: mov    %rax,0x78(%rsp)
  0x00007f75705925fc: mov    %rcx,0x70(%rsp)
  0x00007f7570592601: mov    %rdx,0x68(%rsp)
  0x00007f7570592606: mov    %rbx,0x60(%rsp)
  0x00007f757059260b: mov    %rbp,0x50(%rsp)
  0x00007f7570592610: mov    %rsi,0x48(%rsp)
  0x00007f7570592615: mov    %rdi,0x40(%rsp)
  0x00007f757059261a: mov    %r8,0x38(%rsp)
  0x00007f757059261f: mov    %r9,0x30(%rsp)
  0x00007f7570592624: mov    %r10,0x28(%rsp)
  0x00007f7570592629: mov    %r11,0x20(%rsp)
  0x00007f757059262e: mov    %r12,0x18(%rsp)
  0x00007f7570592633: mov    %r13,0x10(%rsp)
  0x00007f7570592638: mov    %r14,0x8(%rsp)
  0x00007f757059263d: mov    %r15,(%rsp)
  0x00007f7570592641: movabs $0x7f75856f340f,%rdi
  0x00007f757059264b: movabs $0x7f75705925eb,%rsi
  0x00007f7570592655: mov    %rsp,%rdx
  0x00007f7570592658: and    $0xfffffffffffffff0,%rsp
  0x00007f757059265c: callq  0x00007f75853729fa
  0x00007f7570592661: hlt    
  0x00007f7570592662: add    $0x150,%rsp
  0x00007f7570592669: mov    (%rsp),%r15
  0x00007f757059266d: mov    0x8(%rsp),%r14
  0x00007f7570592672: mov    0x10(%rsp),%r13
  0x00007f7570592677: mov    0x18(%rsp),%r12
  0x00007f757059267c: mov    0x20(%rsp),%r11
  0x00007f7570592681: mov    0x28(%rsp),%r10
  0x00007f7570592686: mov    0x30(%rsp),%r9
  0x00007f757059268b: mov    0x38(%rsp),%r8
  0x00007f7570592690: mov    0x40(%rsp),%rdi
  0x00007f7570592695: mov    0x48(%rsp),%rsi
  0x00007f757059269a: mov    0x50(%rsp),%rbp
  0x00007f757059269f: mov    0x60(%rsp),%rbx
  0x00007f75705926a4: mov    0x68(%rsp),%rdx
  0x00007f75705926a9: mov    0x70(%rsp),%rcx
  0x00007f75705926ae: mov    0x78(%rsp),%rax
  0x00007f75705926b3: add    $0x80,%rsp
  0x00007f75705926ba: leaveq 
  0x00007f75705926bb: add    $0x8,%rsp
  0x00007f75705926bf: jmpq   0x00007f75704703da
  0x00007f75705926c4: test   %rax,%rax
  0x00007f75705926c7: je     0x00007f7570592817
  ;; restore_live_registers
  0x00007f75705926cd: vmovsd 0x8(%rsp),%xmm0
  0x00007f75705926d3: vmovsd 0x10(%rsp),%xmm1
  0x00007f75705926d9: vmovsd 0x18(%rsp),%xmm2
  0x00007f75705926df: vmovsd 0x20(%rsp),%xmm3
  0x00007f75705926e5: vmovsd 0x28(%rsp),%xmm4
  0x00007f75705926eb: vmovsd 0x30(%rsp),%xmm5
  0x00007f75705926f1: vmovsd 0x38(%rsp),%xmm6
  0x00007f75705926f7: vmovsd 0x40(%rsp),%xmm7
  0x00007f75705926fd: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570592703: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570592709: vmovsd 0x58(%rsp),%xmm10
  0x00007f757059270f: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570592715: vmovsd 0x68(%rsp),%xmm12
  0x00007f757059271b: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570592721: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570592727: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570592730: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059273c: je     0x00007f75705927b9
  0x00007f7570592742: mov    %rsp,-0x28(%rsp)
  0x00007f7570592747: sub    $0x80,%rsp
  0x00007f757059274e: mov    %rax,0x78(%rsp)
  0x00007f7570592753: mov    %rcx,0x70(%rsp)
  0x00007f7570592758: mov    %rdx,0x68(%rsp)
  0x00007f757059275d: mov    %rbx,0x60(%rsp)
  0x00007f7570592762: mov    %rbp,0x50(%rsp)
  0x00007f7570592767: mov    %rsi,0x48(%rsp)
  0x00007f757059276c: mov    %rdi,0x40(%rsp)
  0x00007f7570592771: mov    %r8,0x38(%rsp)
  0x00007f7570592776: mov    %r9,0x30(%rsp)
  0x00007f757059277b: mov    %r10,0x28(%rsp)
  0x00007f7570592780: mov    %r11,0x20(%rsp)
  0x00007f7570592785: mov    %r12,0x18(%rsp)
  0x00007f757059278a: mov    %r13,0x10(%rsp)
  0x00007f757059278f: mov    %r14,0x8(%rsp)
  0x00007f7570592794: mov    %r15,(%rsp)
  0x00007f7570592798: movabs $0x7f75856f340f,%rdi
  0x00007f75705927a2: movabs $0x7f7570592742,%rsi
  0x00007f75705927ac: mov    %rsp,%rdx
  0x00007f75705927af: and    $0xfffffffffffffff0,%rsp
  0x00007f75705927b3: callq  0x00007f75853729fa
  0x00007f75705927b8: hlt    
  0x00007f75705927b9: add    $0x150,%rsp
  0x00007f75705927c0: mov    (%rsp),%r15
  0x00007f75705927c4: mov    0x8(%rsp),%r14
  0x00007f75705927c9: mov    0x10(%rsp),%r13
  0x00007f75705927ce: mov    0x18(%rsp),%r12
  0x00007f75705927d3: mov    0x20(%rsp),%r11
  0x00007f75705927d8: mov    0x28(%rsp),%r10
  0x00007f75705927dd: mov    0x30(%rsp),%r9
  0x00007f75705927e2: mov    0x38(%rsp),%r8
  0x00007f75705927e7: mov    0x40(%rsp),%rdi
  0x00007f75705927ec: mov    0x48(%rsp),%rsi
  0x00007f75705927f1: mov    0x50(%rsp),%rbp
  0x00007f75705927f6: mov    0x60(%rsp),%rbx
  0x00007f75705927fb: mov    0x68(%rsp),%rdx
  0x00007f7570592800: mov    0x70(%rsp),%rcx
  0x00007f7570592805: mov    0x78(%rsp),%rax
  0x00007f757059280a: add    $0x80,%rsp
  0x00007f7570592811: leaveq 
  0x00007f7570592812: jmpq   0x00007f7570470356
  ;; restore_live_registers
  0x00007f7570592817: vmovsd 0x8(%rsp),%xmm0
  0x00007f757059281d: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570592823: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570592829: vmovsd 0x20(%rsp),%xmm3
  0x00007f757059282f: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570592835: vmovsd 0x30(%rsp),%xmm5
  0x00007f757059283b: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570592841: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570592847: vmovsd 0x48(%rsp),%xmm8
  0x00007f757059284d: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570592853: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570592859: vmovsd 0x60(%rsp),%xmm11
  0x00007f757059285f: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570592865: vmovsd 0x70(%rsp),%xmm13
  0x00007f757059286b: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570592871: vmovsd 0x80(%rsp),%xmm15
  0x00007f757059287a: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570592886: je     0x00007f7570592903
  0x00007f757059288c: mov    %rsp,-0x28(%rsp)
  0x00007f7570592891: sub    $0x80,%rsp
  0x00007f7570592898: mov    %rax,0x78(%rsp)
  0x00007f757059289d: mov    %rcx,0x70(%rsp)
  0x00007f75705928a2: mov    %rdx,0x68(%rsp)
  0x00007f75705928a7: mov    %rbx,0x60(%rsp)
  0x00007f75705928ac: mov    %rbp,0x50(%rsp)
  0x00007f75705928b1: mov    %rsi,0x48(%rsp)
  0x00007f75705928b6: mov    %rdi,0x40(%rsp)
  0x00007f75705928bb: mov    %r8,0x38(%rsp)
  0x00007f75705928c0: mov    %r9,0x30(%rsp)
  0x00007f75705928c5: mov    %r10,0x28(%rsp)
  0x00007f75705928ca: mov    %r11,0x20(%rsp)
  0x00007f75705928cf: mov    %r12,0x18(%rsp)
  0x00007f75705928d4: mov    %r13,0x10(%rsp)
  0x00007f75705928d9: mov    %r14,0x8(%rsp)
  0x00007f75705928de: mov    %r15,(%rsp)
  0x00007f75705928e2: movabs $0x7f75856f340f,%rdi
  0x00007f75705928ec: movabs $0x7f757059288c,%rsi
  0x00007f75705928f6: mov    %rsp,%rdx
  0x00007f75705928f9: and    $0xfffffffffffffff0,%rsp
  0x00007f75705928fd: callq  0x00007f75853729fa
  0x00007f7570592902: hlt    
  0x00007f7570592903: add    $0x150,%rsp
  0x00007f757059290a: mov    (%rsp),%r15
  0x00007f757059290e: mov    0x8(%rsp),%r14
  0x00007f7570592913: mov    0x10(%rsp),%r13
  0x00007f7570592918: mov    0x18(%rsp),%r12
  0x00007f757059291d: mov    0x20(%rsp),%r11
  0x00007f7570592922: mov    0x28(%rsp),%r10
  0x00007f7570592927: mov    0x30(%rsp),%r9
  0x00007f757059292c: mov    0x38(%rsp),%r8
  0x00007f7570592931: mov    0x40(%rsp),%rdi
  0x00007f7570592936: mov    0x48(%rsp),%rsi
  0x00007f757059293b: mov    0x50(%rsp),%rbp
  0x00007f7570592940: mov    0x60(%rsp),%rbx
  0x00007f7570592945: mov    0x68(%rsp),%rdx
  0x00007f757059294a: mov    0x70(%rsp),%rcx
  0x00007f757059294f: mov    0x78(%rsp),%rax
  0x00007f7570592954: add    $0x80,%rsp
  0x00007f757059295b: leaveq 
  0x00007f757059295c: retq   
  0x00007f757059295d: leaveq 
  0x00007f757059295e: retq   
  0x00007f757059295f: nop

AHE@0x00007f758012d1a0: 0xbebebea0 i2c: 0x00007f7570592a20 c2i: 0x00007f7570592b66 c2iUV: 0x00007f7570592b39
i2c argument handler #120 for: static (JJJZ)V (649 bytes generated)
c2i argument handler starts at 0x7f7570592b66
  0x00007f7570592a20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570592a24: movabs $0x7f757036e3e0,%r11
  0x00007f7570592a2e: cmp    %r11,%rax
  0x00007f7570592a31: jbe    0x00007f7570592a4a
  0x00007f7570592a37: movabs $0x7f757046e3e0,%r11
  0x00007f7570592a41: cmp    %r11,%rax
  0x00007f7570592a44: jb     0x00007f7570592b0d
  0x00007f7570592a4a: movabs $0x7f7570369420,%r11
  0x00007f7570592a54: cmp    %r11,%rax
  0x00007f7570592a57: jbe    0x00007f7570592a70
  0x00007f7570592a5d: movabs $0x7f757036de58,%r11
  0x00007f7570592a67: cmp    %r11,%rax
  0x00007f7570592a6a: jb     0x00007f7570592b0d
  0x00007f7570592a70: movabs $0x7f75704a9820,%r11
  0x00007f7570592a7a: cmp    %r11,%rax
  0x00007f7570592a7d: jbe    0x00007f7570592a96
  0x00007f7570592a83: movabs $0x7f75704af5e0,%r11
  0x00007f7570592a8d: cmp    %r11,%rax
  0x00007f7570592a90: jb     0x00007f7570592b0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570592a96: mov    %rsp,-0x28(%rsp)
  0x00007f7570592a9b: sub    $0x80,%rsp
  0x00007f7570592aa2: mov    %rax,0x78(%rsp)
  0x00007f7570592aa7: mov    %rcx,0x70(%rsp)
  0x00007f7570592aac: mov    %rdx,0x68(%rsp)
  0x00007f7570592ab1: mov    %rbx,0x60(%rsp)
  0x00007f7570592ab6: mov    %rbp,0x50(%rsp)
  0x00007f7570592abb: mov    %rsi,0x48(%rsp)
  0x00007f7570592ac0: mov    %rdi,0x40(%rsp)
  0x00007f7570592ac5: mov    %r8,0x38(%rsp)
  0x00007f7570592aca: mov    %r9,0x30(%rsp)
  0x00007f7570592acf: mov    %r10,0x28(%rsp)
  0x00007f7570592ad4: mov    %r11,0x20(%rsp)
  0x00007f7570592ad9: mov    %r12,0x18(%rsp)
  0x00007f7570592ade: mov    %r13,0x10(%rsp)
  0x00007f7570592ae3: mov    %r14,0x8(%rsp)
  0x00007f7570592ae8: mov    %r15,(%rsp)
  0x00007f7570592aec: movabs $0x7f758592f470,%rdi
  0x00007f7570592af6: movabs $0x7f7570592a96,%rsi
  0x00007f7570592b00: mov    %rsp,%rdx
  0x00007f7570592b03: and    $0xfffffffffffffff0,%rsp
  0x00007f7570592b07: callq  0x00007f75853729fa
  0x00007f7570592b0c: hlt    
  ;; } verify_i2ce 
  0x00007f7570592b0d: mov    %rsp,%r11
  0x00007f7570592b10: and    $0xfffffffffffffff0,%rsp
  0x00007f7570592b14: push   %rax
  0x00007f7570592b15: mov    %r11,%rax
  0x00007f7570592b18: mov    0x50(%rbx),%r11
  0x00007f7570592b1c: mov    0x30(%rax),%rsi
  0x00007f7570592b20: mov    0x20(%rax),%rdx
  0x00007f7570592b24: mov    0x10(%rax),%rcx
  0x00007f7570592b28: mov    0x8(%rax),%r8d
  0x00007f7570592b2c: mov    %rbx,0x258(%r15)
  0x00007f7570592b33: mov    %rbx,%rax
  0x00007f7570592b36: jmpq   *%r11
  0x00007f7570592b39: mov    0x8(%rsi),%ebx
  0x00007f7570592b3c: shl    $0x3,%rbx
  0x00007f7570592b40: cmp    0x10(%rax),%rbx
  0x00007f7570592b44: mov    0x8(%rax),%rbx
  0x00007f7570592b48: je     0x00007f7570592b53
  0x00007f7570592b4e: jmpq   0x00007f757046ec40
  0x00007f7570592b53: cmpq   $0x0,0x58(%rbx)
  0x00007f7570592b5b: je     0x00007f7570592c56
  0x00007f7570592b61: jmpq   0x00007f757046ec40
  0x00007f7570592b66: cmpq   $0x0,0x58(%rbx)
  0x00007f7570592b6e: je     0x00007f7570592c56
  0x00007f7570592b74: mov    %rsp,%r13
  0x00007f7570592b77: mov    (%rsp),%rax
  0x00007f7570592b7b: and    $0xfffffffffffffff0,%rsp
  0x00007f7570592b7f: pushfq 
  0x00007f7570592b80: sub    $0x8,%rsp
  0x00007f7570592b84: mov    %rsp,-0x28(%rsp)
  0x00007f7570592b89: sub    $0x80,%rsp
  0x00007f7570592b90: mov    %rax,0x78(%rsp)
  0x00007f7570592b95: mov    %rcx,0x70(%rsp)
  0x00007f7570592b9a: mov    %rdx,0x68(%rsp)
  0x00007f7570592b9f: mov    %rbx,0x60(%rsp)
  0x00007f7570592ba4: mov    %rbp,0x50(%rsp)
  0x00007f7570592ba9: mov    %rsi,0x48(%rsp)
  0x00007f7570592bae: mov    %rdi,0x40(%rsp)
  0x00007f7570592bb3: mov    %r8,0x38(%rsp)
  0x00007f7570592bb8: mov    %r9,0x30(%rsp)
  0x00007f7570592bbd: mov    %r10,0x28(%rsp)
  0x00007f7570592bc2: mov    %r11,0x20(%rsp)
  0x00007f7570592bc7: mov    %r12,0x18(%rsp)
  0x00007f7570592bcc: mov    %r13,0x10(%rsp)
  0x00007f7570592bd1: mov    %r14,0x8(%rsp)
  0x00007f7570592bd6: mov    %r15,(%rsp)
  0x00007f7570592bda: sub    $0x200,%rsp
  0x00007f7570592be1: fxsave64 (%rsp)
  0x00007f7570592be6: mov    %rbx,%rdi
  0x00007f7570592be9: mov    %rax,%rsi
  0x00007f7570592bec: callq  0x00007f7585522bca
  0x00007f7570592bf1: fxrstor64 (%rsp)
  0x00007f7570592bf6: add    $0x200,%rsp
  0x00007f7570592bfd: mov    (%rsp),%r15
  0x00007f7570592c01: mov    0x8(%rsp),%r14
  0x00007f7570592c06: mov    0x10(%rsp),%r13
  0x00007f7570592c0b: mov    0x18(%rsp),%r12
  0x00007f7570592c10: mov    0x20(%rsp),%r11
  0x00007f7570592c15: mov    0x28(%rsp),%r10
  0x00007f7570592c1a: mov    0x30(%rsp),%r9
  0x00007f7570592c1f: mov    0x38(%rsp),%r8
  0x00007f7570592c24: mov    0x40(%rsp),%rdi
  0x00007f7570592c29: mov    0x48(%rsp),%rsi
  0x00007f7570592c2e: mov    0x50(%rsp),%rbp
  0x00007f7570592c33: mov    0x60(%rsp),%rbx
  0x00007f7570592c38: mov    0x68(%rsp),%rdx
  0x00007f7570592c3d: mov    0x70(%rsp),%rcx
  0x00007f7570592c42: mov    0x78(%rsp),%rax
  0x00007f7570592c47: add    $0x80,%rsp
  0x00007f7570592c4e: add    $0x8,%rsp
  0x00007f7570592c52: popfq  
  0x00007f7570592c53: mov    %r13,%rsp
  0x00007f7570592c56: pop    %rax
  0x00007f7570592c57: mov    %rsp,%r13
  0x00007f7570592c5a: sub    $0x40,%rsp
  0x00007f7570592c5e: mov    %rax,(%rsp)
  0x00007f7570592c62: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570592c6c: mov    %rax,0x38(%rsp)
  0x00007f7570592c71: mov    %rsi,0x30(%rsp)
  0x00007f7570592c76: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570592c80: mov    %rax,0x28(%rsp)
  0x00007f7570592c85: mov    %rdx,0x20(%rsp)
  0x00007f7570592c8a: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570592c94: mov    %rax,0x18(%rsp)
  0x00007f7570592c99: mov    %rcx,0x10(%rsp)
  0x00007f7570592c9e: mov    %r8d,0x8(%rsp)
  0x00007f7570592ca3: mov    0x40(%rbx),%rcx
  0x00007f7570592ca7: jmpq   *%rcx

AHE@0x00007f758012d1e8: 0xabbebebea0000000 i2c: 0x00007f757055dde0 c2i: 0x00007f757055df2c c2iUV: 0x00007f757055deff
i2c argument handler #121 for: static (ZLjava/lang/String;JJJZ)V (663 bytes generated)
c2i argument handler starts at 0x7f757055df2c
  0x00007f757055dde0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757055dde4: movabs $0x7f757036e3e0,%r11
  0x00007f757055ddee: cmp    %r11,%rax
  0x00007f757055ddf1: jbe    0x00007f757055de0a
  0x00007f757055ddf7: movabs $0x7f757046e3e0,%r11
  0x00007f757055de01: cmp    %r11,%rax
  0x00007f757055de04: jb     0x00007f757055decd
  0x00007f757055de0a: movabs $0x7f7570369420,%r11
  0x00007f757055de14: cmp    %r11,%rax
  0x00007f757055de17: jbe    0x00007f757055de30
  0x00007f757055de1d: movabs $0x7f757036de58,%r11
  0x00007f757055de27: cmp    %r11,%rax
  0x00007f757055de2a: jb     0x00007f757055decd
  0x00007f757055de30: movabs $0x7f75704a9820,%r11
  0x00007f757055de3a: cmp    %r11,%rax
  0x00007f757055de3d: jbe    0x00007f757055de56
  0x00007f757055de43: movabs $0x7f75704af5e0,%r11
  0x00007f757055de4d: cmp    %r11,%rax
  0x00007f757055de50: jb     0x00007f757055decd
  ;; i2c adapter must return to an interpreter frame
  0x00007f757055de56: mov    %rsp,-0x28(%rsp)
  0x00007f757055de5b: sub    $0x80,%rsp
  0x00007f757055de62: mov    %rax,0x78(%rsp)
  0x00007f757055de67: mov    %rcx,0x70(%rsp)
  0x00007f757055de6c: mov    %rdx,0x68(%rsp)
  0x00007f757055de71: mov    %rbx,0x60(%rsp)
  0x00007f757055de76: mov    %rbp,0x50(%rsp)
  0x00007f757055de7b: mov    %rsi,0x48(%rsp)
  0x00007f757055de80: mov    %rdi,0x40(%rsp)
  0x00007f757055de85: mov    %r8,0x38(%rsp)
  0x00007f757055de8a: mov    %r9,0x30(%rsp)
  0x00007f757055de8f: mov    %r10,0x28(%rsp)
  0x00007f757055de94: mov    %r11,0x20(%rsp)
  0x00007f757055de99: mov    %r12,0x18(%rsp)
  0x00007f757055de9e: mov    %r13,0x10(%rsp)
  0x00007f757055dea3: mov    %r14,0x8(%rsp)
  0x00007f757055dea8: mov    %r15,(%rsp)
  0x00007f757055deac: movabs $0x7f758592f470,%rdi
  0x00007f757055deb6: movabs $0x7f757055de56,%rsi
  0x00007f757055dec0: mov    %rsp,%rdx
  0x00007f757055dec3: and    $0xfffffffffffffff0,%rsp
  0x00007f757055dec7: callq  0x00007f75853729fa
  0x00007f757055decc: hlt    
  ;; } verify_i2ce 
  0x00007f757055decd: mov    %rsp,%r11
  0x00007f757055ded0: and    $0xfffffffffffffff0,%rsp
  0x00007f757055ded4: push   %rax
  0x00007f757055ded5: mov    %r11,%rax
  0x00007f757055ded8: mov    0x50(%rbx),%r11
  0x00007f757055dedc: mov    0x48(%rax),%esi
  0x00007f757055dedf: mov    0x40(%rax),%rdx
  0x00007f757055dee3: mov    0x30(%rax),%rcx
  0x00007f757055dee7: mov    0x20(%rax),%r8
  0x00007f757055deeb: mov    0x10(%rax),%r9
  0x00007f757055deef: mov    0x8(%rax),%edi
  0x00007f757055def2: mov    %rbx,0x258(%r15)
  0x00007f757055def9: mov    %rbx,%rax
  0x00007f757055defc: jmpq   *%r11
  0x00007f757055deff: mov    0x8(%rsi),%ebx
  0x00007f757055df02: shl    $0x3,%rbx
  0x00007f757055df06: cmp    0x10(%rax),%rbx
  0x00007f757055df0a: mov    0x8(%rax),%rbx
  0x00007f757055df0e: je     0x00007f757055df19
  0x00007f757055df14: jmpq   0x00007f757046ec40
  0x00007f757055df19: cmpq   $0x0,0x58(%rbx)
  0x00007f757055df21: je     0x00007f757055e01c
  0x00007f757055df27: jmpq   0x00007f757046ec40
  0x00007f757055df2c: cmpq   $0x0,0x58(%rbx)
  0x00007f757055df34: je     0x00007f757055e01c
  0x00007f757055df3a: mov    %rsp,%r13
  0x00007f757055df3d: mov    (%rsp),%rax
  0x00007f757055df41: and    $0xfffffffffffffff0,%rsp
  0x00007f757055df45: pushfq 
  0x00007f757055df46: sub    $0x8,%rsp
  0x00007f757055df4a: mov    %rsp,-0x28(%rsp)
  0x00007f757055df4f: sub    $0x80,%rsp
  0x00007f757055df56: mov    %rax,0x78(%rsp)
  0x00007f757055df5b: mov    %rcx,0x70(%rsp)
  0x00007f757055df60: mov    %rdx,0x68(%rsp)
  0x00007f757055df65: mov    %rbx,0x60(%rsp)
  0x00007f757055df6a: mov    %rbp,0x50(%rsp)
  0x00007f757055df6f: mov    %rsi,0x48(%rsp)
  0x00007f757055df74: mov    %rdi,0x40(%rsp)
  0x00007f757055df79: mov    %r8,0x38(%rsp)
  0x00007f757055df7e: mov    %r9,0x30(%rsp)
  0x00007f757055df83: mov    %r10,0x28(%rsp)
  0x00007f757055df88: mov    %r11,0x20(%rsp)
  0x00007f757055df8d: mov    %r12,0x18(%rsp)
  0x00007f757055df92: mov    %r13,0x10(%rsp)
  0x00007f757055df97: mov    %r14,0x8(%rsp)
  0x00007f757055df9c: mov    %r15,(%rsp)
  0x00007f757055dfa0: sub    $0x200,%rsp
  0x00007f757055dfa7: fxsave64 (%rsp)
  0x00007f757055dfac: mov    %rbx,%rdi
  0x00007f757055dfaf: mov    %rax,%rsi
  0x00007f757055dfb2: callq  0x00007f7585522bca
  0x00007f757055dfb7: fxrstor64 (%rsp)
  0x00007f757055dfbc: add    $0x200,%rsp
  0x00007f757055dfc3: mov    (%rsp),%r15
  0x00007f757055dfc7: mov    0x8(%rsp),%r14
  0x00007f757055dfcc: mov    0x10(%rsp),%r13
  0x00007f757055dfd1: mov    0x18(%rsp),%r12
  0x00007f757055dfd6: mov    0x20(%rsp),%r11
  0x00007f757055dfdb: mov    0x28(%rsp),%r10
  0x00007f757055dfe0: mov    0x30(%rsp),%r9
  0x00007f757055dfe5: mov    0x38(%rsp),%r8
  0x00007f757055dfea: mov    0x40(%rsp),%rdi
  0x00007f757055dfef: mov    0x48(%rsp),%rsi
  0x00007f757055dff4: mov    0x50(%rsp),%rbp
  0x00007f757055dff9: mov    0x60(%rsp),%rbx
  0x00007f757055dffe: mov    0x68(%rsp),%rdx
  0x00007f757055e003: mov    0x70(%rsp),%rcx
  0x00007f757055e008: mov    0x78(%rsp),%rax
  0x00007f757055e00d: add    $0x80,%rsp
  0x00007f757055e014: add    $0x8,%rsp
  0x00007f757055e018: popfq  
  0x00007f757055e019: mov    %r13,%rsp
  0x00007f757055e01c: pop    %rax
  0x00007f757055e01d: mov    %rsp,%r13
  0x00007f757055e020: sub    $0x50,%rsp
  0x00007f757055e024: mov    %rax,(%rsp)
  0x00007f757055e028: mov    %esi,0x48(%rsp)
  0x00007f757055e02c: mov    %rdx,0x40(%rsp)
  0x00007f757055e031: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757055e03b: mov    %rax,0x38(%rsp)
  0x00007f757055e040: mov    %rcx,0x30(%rsp)
  0x00007f757055e045: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757055e04f: mov    %rax,0x28(%rsp)
  0x00007f757055e054: mov    %r8,0x20(%rsp)
  0x00007f757055e059: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757055e063: mov    %rax,0x18(%rsp)
  0x00007f757055e068: mov    %r9,0x10(%rsp)
  0x00007f757055e06d: mov    %edi,0x8(%rsp)
  0x00007f757055e071: mov    0x40(%rbx),%rcx
  0x00007f757055e075: jmpq   *%rcx

Decoding RuntimeStub - load_klass_patching Runtime1 stub 0x00007f757055d550
  0x00007f757055d620: push   %rbp
  0x00007f757055d621: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055d624: mov    %rsp,-0x28(%rsp)
  0x00007f757055d629: sub    $0x80,%rsp
  0x00007f757055d630: mov    %rax,0x78(%rsp)
  0x00007f757055d635: mov    %rcx,0x70(%rsp)
  0x00007f757055d63a: mov    %rdx,0x68(%rsp)
  0x00007f757055d63f: mov    %rbx,0x60(%rsp)
  0x00007f757055d644: mov    %rbp,0x50(%rsp)
  0x00007f757055d649: mov    %rsi,0x48(%rsp)
  0x00007f757055d64e: mov    %rdi,0x40(%rsp)
  0x00007f757055d653: mov    %r8,0x38(%rsp)
  0x00007f757055d658: mov    %r9,0x30(%rsp)
  0x00007f757055d65d: mov    %r10,0x28(%rsp)
  0x00007f757055d662: mov    %r11,0x20(%rsp)
  0x00007f757055d667: mov    %r12,0x18(%rsp)
  0x00007f757055d66c: mov    %r13,0x10(%rsp)
  0x00007f757055d671: mov    %r14,0x8(%rsp)
  0x00007f757055d676: mov    %r15,(%rsp)
  0x00007f757055d67a: sub    $0x150,%rsp
  0x00007f757055d681: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055d68d: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055d693: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055d699: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055d69f: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055d6a5: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055d6ab: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055d6b1: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055d6b7: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055d6bd: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055d6c3: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055d6c9: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055d6cf: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055d6d5: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055d6db: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055d6e1: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055d6e7: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055d6f0: mov    %r15,%rdi
  0x00007f757055d6f3: mov    %rbp,0x210(%r15)
  0x00007f757055d6fa: mov    %rsp,0x200(%r15)
  0x00007f757055d701: callq  0x00007f7584e55a58
  0x00007f757055d706: push   %rax
  0x00007f757055d707: push   %rdi
  0x00007f757055d708: push   %rsi
  0x00007f757055d709: push   %rdx
  0x00007f757055d70a: push   %rcx
  0x00007f757055d70b: push   %r8
  0x00007f757055d70d: push   %r9
  0x00007f757055d70f: push   %r10
  0x00007f757055d711: mov    %rsp,%r10
  0x00007f757055d714: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d718: push   %r10
  0x00007f757055d71a: push   %r11
  0x00007f757055d71c: mov    $0x1,%edi
  0x00007f757055d721: callq  0x00007f7585f5a2d0
  0x00007f757055d726: pop    %r11
  0x00007f757055d728: pop    %rsp
  0x00007f757055d729: pop    %r10
  0x00007f757055d72b: pop    %r9
  0x00007f757055d72d: pop    %r8
  0x00007f757055d72f: pop    %rcx
  0x00007f757055d730: pop    %rdx
  0x00007f757055d731: pop    %rsi
  0x00007f757055d732: pop    %rdi
  0x00007f757055d733: cmp    %rax,%r15
  0x00007f757055d736: je     0x00007f757055d7b3
  0x00007f757055d73c: mov    %rsp,-0x28(%rsp)
  0x00007f757055d741: sub    $0x80,%rsp
  0x00007f757055d748: mov    %rax,0x78(%rsp)
  0x00007f757055d74d: mov    %rcx,0x70(%rsp)
  0x00007f757055d752: mov    %rdx,0x68(%rsp)
  0x00007f757055d757: mov    %rbx,0x60(%rsp)
  0x00007f757055d75c: mov    %rbp,0x50(%rsp)
  0x00007f757055d761: mov    %rsi,0x48(%rsp)
  0x00007f757055d766: mov    %rdi,0x40(%rsp)
  0x00007f757055d76b: mov    %r8,0x38(%rsp)
  0x00007f757055d770: mov    %r9,0x30(%rsp)
  0x00007f757055d775: mov    %r10,0x28(%rsp)
  0x00007f757055d77a: mov    %r11,0x20(%rsp)
  0x00007f757055d77f: mov    %r12,0x18(%rsp)
  0x00007f757055d784: mov    %r13,0x10(%rsp)
  0x00007f757055d789: mov    %r14,0x8(%rsp)
  0x00007f757055d78e: mov    %r15,(%rsp)
  0x00007f757055d792: movabs $0x7f75856f3528,%rdi
  0x00007f757055d79c: movabs $0x7f757055d73c,%rsi
  0x00007f757055d7a6: mov    %rsp,%rdx
  0x00007f757055d7a9: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d7ad: callq  0x00007f75853729fa
  0x00007f757055d7b2: hlt    
  0x00007f757055d7b3: pop    %rax
  0x00007f757055d7b4: movabs $0x0,%r10
  0x00007f757055d7be: mov    %r10,0x200(%r15)
  0x00007f757055d7c5: movabs $0x0,%r10
  0x00007f757055d7cf: mov    %r10,0x210(%r15)
  0x00007f757055d7d6: movabs $0x0,%r10
  0x00007f757055d7e0: mov    %r10,0x208(%r15)
  0x00007f757055d7e7: cmpq   $0x0,0x8(%r15)
  0x00007f757055d7ef: je     0x00007f757055da84
  0x00007f757055d7f5: test   %rax,%rax
  0x00007f757055d7f8: je     0x00007f757055b240
  0x00007f757055d7fe: mov    0x8(%r15),%rax
  0x00007f757055d802: movabs $0x0,%r10
  0x00007f757055d80c: mov    %r10,0x8(%r15)
  0x00007f757055d810: mov    0x1d8(%rsp),%rdx
  0x00007f757055d818: cmpq   $0x0,0x2d0(%r15)
  0x00007f757055d823: je     0x00007f757055d8a0
  0x00007f757055d829: mov    %rsp,-0x28(%rsp)
  0x00007f757055d82e: sub    $0x80,%rsp
  0x00007f757055d835: mov    %rax,0x78(%rsp)
  0x00007f757055d83a: mov    %rcx,0x70(%rsp)
  0x00007f757055d83f: mov    %rdx,0x68(%rsp)
  0x00007f757055d844: mov    %rbx,0x60(%rsp)
  0x00007f757055d849: mov    %rbp,0x50(%rsp)
  0x00007f757055d84e: mov    %rsi,0x48(%rsp)
  0x00007f757055d853: mov    %rdi,0x40(%rsp)
  0x00007f757055d858: mov    %r8,0x38(%rsp)
  0x00007f757055d85d: mov    %r9,0x30(%rsp)
  0x00007f757055d862: mov    %r10,0x28(%rsp)
  0x00007f757055d867: mov    %r11,0x20(%rsp)
  0x00007f757055d86c: mov    %r12,0x18(%rsp)
  0x00007f757055d871: mov    %r13,0x10(%rsp)
  0x00007f757055d876: mov    %r14,0x8(%rsp)
  0x00007f757055d87b: mov    %r15,(%rsp)
  0x00007f757055d87f: movabs $0x7f75856f3497,%rdi
  0x00007f757055d889: movabs $0x7f757055d829,%rsi
  0x00007f757055d893: mov    %rsp,%rdx
  0x00007f757055d896: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d89a: callq  0x00007f75853729fa
  0x00007f757055d89f: hlt    
  0x00007f757055d8a0: cmpq   $0x0,0x2d8(%r15)
  0x00007f757055d8ab: je     0x00007f757055d928
  0x00007f757055d8b1: mov    %rsp,-0x28(%rsp)
  0x00007f757055d8b6: sub    $0x80,%rsp
  0x00007f757055d8bd: mov    %rax,0x78(%rsp)
  0x00007f757055d8c2: mov    %rcx,0x70(%rsp)
  0x00007f757055d8c7: mov    %rdx,0x68(%rsp)
  0x00007f757055d8cc: mov    %rbx,0x60(%rsp)
  0x00007f757055d8d1: mov    %rbp,0x50(%rsp)
  0x00007f757055d8d6: mov    %rsi,0x48(%rsp)
  0x00007f757055d8db: mov    %rdi,0x40(%rsp)
  0x00007f757055d8e0: mov    %r8,0x38(%rsp)
  0x00007f757055d8e5: mov    %r9,0x30(%rsp)
  0x00007f757055d8ea: mov    %r10,0x28(%rsp)
  0x00007f757055d8ef: mov    %r11,0x20(%rsp)
  0x00007f757055d8f4: mov    %r12,0x18(%rsp)
  0x00007f757055d8f9: mov    %r13,0x10(%rsp)
  0x00007f757055d8fe: mov    %r14,0x8(%rsp)
  0x00007f757055d903: mov    %r15,(%rsp)
  0x00007f757055d907: movabs $0x7f75856f34b3,%rdi
  0x00007f757055d911: movabs $0x7f757055d8b1,%rsi
  0x00007f757055d91b: mov    %rsp,%rdx
  0x00007f757055d91e: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d922: callq  0x00007f75853729fa
  0x00007f757055d927: hlt    
  0x00007f757055d928: mov    %rax,0x2d0(%r15)
  0x00007f757055d92f: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f757055d936: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055d93c: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055d942: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055d948: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055d94e: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055d954: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055d95a: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055d960: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055d966: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055d96c: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055d972: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055d978: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055d97e: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055d984: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055d98a: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055d990: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055d999: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055d9a5: je     0x00007f757055da22
  0x00007f757055d9ab: mov    %rsp,-0x28(%rsp)
  0x00007f757055d9b0: sub    $0x80,%rsp
  0x00007f757055d9b7: mov    %rax,0x78(%rsp)
  0x00007f757055d9bc: mov    %rcx,0x70(%rsp)
  0x00007f757055d9c1: mov    %rdx,0x68(%rsp)
  0x00007f757055d9c6: mov    %rbx,0x60(%rsp)
  0x00007f757055d9cb: mov    %rbp,0x50(%rsp)
  0x00007f757055d9d0: mov    %rsi,0x48(%rsp)
  0x00007f757055d9d5: mov    %rdi,0x40(%rsp)
  0x00007f757055d9da: mov    %r8,0x38(%rsp)
  0x00007f757055d9df: mov    %r9,0x30(%rsp)
  0x00007f757055d9e4: mov    %r10,0x28(%rsp)
  0x00007f757055d9e9: mov    %r11,0x20(%rsp)
  0x00007f757055d9ee: mov    %r12,0x18(%rsp)
  0x00007f757055d9f3: mov    %r13,0x10(%rsp)
  0x00007f757055d9f8: mov    %r14,0x8(%rsp)
  0x00007f757055d9fd: mov    %r15,(%rsp)
  0x00007f757055da01: movabs $0x7f75856f340f,%rdi
  0x00007f757055da0b: movabs $0x7f757055d9ab,%rsi
  0x00007f757055da15: mov    %rsp,%rdx
  0x00007f757055da18: and    $0xfffffffffffffff0,%rsp
  0x00007f757055da1c: callq  0x00007f75853729fa
  0x00007f757055da21: hlt    
  0x00007f757055da22: add    $0x150,%rsp
  0x00007f757055da29: mov    (%rsp),%r15
  0x00007f757055da2d: mov    0x8(%rsp),%r14
  0x00007f757055da32: mov    0x10(%rsp),%r13
  0x00007f757055da37: mov    0x18(%rsp),%r12
  0x00007f757055da3c: mov    0x20(%rsp),%r11
  0x00007f757055da41: mov    0x28(%rsp),%r10
  0x00007f757055da46: mov    0x30(%rsp),%r9
  0x00007f757055da4b: mov    0x38(%rsp),%r8
  0x00007f757055da50: mov    0x40(%rsp),%rdi
  0x00007f757055da55: mov    0x48(%rsp),%rsi
  0x00007f757055da5a: mov    0x50(%rsp),%rbp
  0x00007f757055da5f: mov    0x60(%rsp),%rbx
  0x00007f757055da64: mov    0x68(%rsp),%rdx
  0x00007f757055da69: mov    0x70(%rsp),%rcx
  0x00007f757055da6e: mov    0x78(%rsp),%rax
  0x00007f757055da73: add    $0x80,%rsp
  0x00007f757055da7a: leaveq 
  0x00007f757055da7b: add    $0x8,%rsp
  0x00007f757055da7f: jmpq   0x00007f75704703da
  0x00007f757055da84: test   %rax,%rax
  0x00007f757055da87: je     0x00007f757055dbd7
  ;; restore_live_registers
  0x00007f757055da8d: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055da93: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055da99: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055da9f: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055daa5: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055daab: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055dab1: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055dab7: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055dabd: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055dac3: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055dac9: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055dacf: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055dad5: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055dadb: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055dae1: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055dae7: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055daf0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055dafc: je     0x00007f757055db79
  0x00007f757055db02: mov    %rsp,-0x28(%rsp)
  0x00007f757055db07: sub    $0x80,%rsp
  0x00007f757055db0e: mov    %rax,0x78(%rsp)
  0x00007f757055db13: mov    %rcx,0x70(%rsp)
  0x00007f757055db18: mov    %rdx,0x68(%rsp)
  0x00007f757055db1d: mov    %rbx,0x60(%rsp)
  0x00007f757055db22: mov    %rbp,0x50(%rsp)
  0x00007f757055db27: mov    %rsi,0x48(%rsp)
  0x00007f757055db2c: mov    %rdi,0x40(%rsp)
  0x00007f757055db31: mov    %r8,0x38(%rsp)
  0x00007f757055db36: mov    %r9,0x30(%rsp)
  0x00007f757055db3b: mov    %r10,0x28(%rsp)
  0x00007f757055db40: mov    %r11,0x20(%rsp)
  0x00007f757055db45: mov    %r12,0x18(%rsp)
  0x00007f757055db4a: mov    %r13,0x10(%rsp)
  0x00007f757055db4f: mov    %r14,0x8(%rsp)
  0x00007f757055db54: mov    %r15,(%rsp)
  0x00007f757055db58: movabs $0x7f75856f340f,%rdi
  0x00007f757055db62: movabs $0x7f757055db02,%rsi
  0x00007f757055db6c: mov    %rsp,%rdx
  0x00007f757055db6f: and    $0xfffffffffffffff0,%rsp
  0x00007f757055db73: callq  0x00007f75853729fa
  0x00007f757055db78: hlt    
  0x00007f757055db79: add    $0x150,%rsp
  0x00007f757055db80: mov    (%rsp),%r15
  0x00007f757055db84: mov    0x8(%rsp),%r14
  0x00007f757055db89: mov    0x10(%rsp),%r13
  0x00007f757055db8e: mov    0x18(%rsp),%r12
  0x00007f757055db93: mov    0x20(%rsp),%r11
  0x00007f757055db98: mov    0x28(%rsp),%r10
  0x00007f757055db9d: mov    0x30(%rsp),%r9
  0x00007f757055dba2: mov    0x38(%rsp),%r8
  0x00007f757055dba7: mov    0x40(%rsp),%rdi
  0x00007f757055dbac: mov    0x48(%rsp),%rsi
  0x00007f757055dbb1: mov    0x50(%rsp),%rbp
  0x00007f757055dbb6: mov    0x60(%rsp),%rbx
  0x00007f757055dbbb: mov    0x68(%rsp),%rdx
  0x00007f757055dbc0: mov    0x70(%rsp),%rcx
  0x00007f757055dbc5: mov    0x78(%rsp),%rax
  0x00007f757055dbca: add    $0x80,%rsp
  0x00007f757055dbd1: leaveq 
  0x00007f757055dbd2: jmpq   0x00007f7570470356
  ;; restore_live_registers
  0x00007f757055dbd7: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055dbdd: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055dbe3: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055dbe9: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055dbef: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055dbf5: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055dbfb: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055dc01: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055dc07: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055dc0d: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055dc13: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055dc19: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055dc1f: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055dc25: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055dc2b: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055dc31: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055dc3a: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055dc46: je     0x00007f757055dcc3
  0x00007f757055dc4c: mov    %rsp,-0x28(%rsp)
  0x00007f757055dc51: sub    $0x80,%rsp
  0x00007f757055dc58: mov    %rax,0x78(%rsp)
  0x00007f757055dc5d: mov    %rcx,0x70(%rsp)
  0x00007f757055dc62: mov    %rdx,0x68(%rsp)
  0x00007f757055dc67: mov    %rbx,0x60(%rsp)
  0x00007f757055dc6c: mov    %rbp,0x50(%rsp)
  0x00007f757055dc71: mov    %rsi,0x48(%rsp)
  0x00007f757055dc76: mov    %rdi,0x40(%rsp)
  0x00007f757055dc7b: mov    %r8,0x38(%rsp)
  0x00007f757055dc80: mov    %r9,0x30(%rsp)
  0x00007f757055dc85: mov    %r10,0x28(%rsp)
  0x00007f757055dc8a: mov    %r11,0x20(%rsp)
  0x00007f757055dc8f: mov    %r12,0x18(%rsp)
  0x00007f757055dc94: mov    %r13,0x10(%rsp)
  0x00007f757055dc99: mov    %r14,0x8(%rsp)
  0x00007f757055dc9e: mov    %r15,(%rsp)
  0x00007f757055dca2: movabs $0x7f75856f340f,%rdi
  0x00007f757055dcac: movabs $0x7f757055dc4c,%rsi
  0x00007f757055dcb6: mov    %rsp,%rdx
  0x00007f757055dcb9: and    $0xfffffffffffffff0,%rsp
  0x00007f757055dcbd: callq  0x00007f75853729fa
  0x00007f757055dcc2: hlt    
  0x00007f757055dcc3: add    $0x150,%rsp
  0x00007f757055dcca: mov    (%rsp),%r15
  0x00007f757055dcce: mov    0x8(%rsp),%r14
  0x00007f757055dcd3: mov    0x10(%rsp),%r13
  0x00007f757055dcd8: mov    0x18(%rsp),%r12
  0x00007f757055dcdd: mov    0x20(%rsp),%r11
  0x00007f757055dce2: mov    0x28(%rsp),%r10
  0x00007f757055dce7: mov    0x30(%rsp),%r9
  0x00007f757055dcec: mov    0x38(%rsp),%r8
  0x00007f757055dcf1: mov    0x40(%rsp),%rdi
  0x00007f757055dcf6: mov    0x48(%rsp),%rsi
  0x00007f757055dcfb: mov    0x50(%rsp),%rbp
  0x00007f757055dd00: mov    0x60(%rsp),%rbx
  0x00007f757055dd05: mov    0x68(%rsp),%rdx
  0x00007f757055dd0a: mov    0x70(%rsp),%rcx
  0x00007f757055dd0f: mov    0x78(%rsp),%rax
  0x00007f757055dd14: add    $0x80,%rsp
  0x00007f757055dd1b: leaveq 
  0x00007f757055dd1c: retq   
  0x00007f757055dd1d: leaveq 
  0x00007f757055dd1e: retq   
  0x00007f757055dd1f: nop

Decoding RuntimeStub - load_mirror_patching Runtime1 stub 0x00007f757055cd50
  0x00007f757055ce20: push   %rbp
  0x00007f757055ce21: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f757055ce24: mov    %rsp,-0x28(%rsp)
  0x00007f757055ce29: sub    $0x80,%rsp
  0x00007f757055ce30: mov    %rax,0x78(%rsp)
  0x00007f757055ce35: mov    %rcx,0x70(%rsp)
  0x00007f757055ce3a: mov    %rdx,0x68(%rsp)
  0x00007f757055ce3f: mov    %rbx,0x60(%rsp)
  0x00007f757055ce44: mov    %rbp,0x50(%rsp)
  0x00007f757055ce49: mov    %rsi,0x48(%rsp)
  0x00007f757055ce4e: mov    %rdi,0x40(%rsp)
  0x00007f757055ce53: mov    %r8,0x38(%rsp)
  0x00007f757055ce58: mov    %r9,0x30(%rsp)
  0x00007f757055ce5d: mov    %r10,0x28(%rsp)
  0x00007f757055ce62: mov    %r11,0x20(%rsp)
  0x00007f757055ce67: mov    %r12,0x18(%rsp)
  0x00007f757055ce6c: mov    %r13,0x10(%rsp)
  0x00007f757055ce71: mov    %r14,0x8(%rsp)
  0x00007f757055ce76: mov    %r15,(%rsp)
  0x00007f757055ce7a: sub    $0x150,%rsp
  0x00007f757055ce81: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055ce8d: vmovsd %xmm0,0x8(%rsp)
  0x00007f757055ce93: vmovsd %xmm1,0x10(%rsp)
  0x00007f757055ce99: vmovsd %xmm2,0x18(%rsp)
  0x00007f757055ce9f: vmovsd %xmm3,0x20(%rsp)
  0x00007f757055cea5: vmovsd %xmm4,0x28(%rsp)
  0x00007f757055ceab: vmovsd %xmm5,0x30(%rsp)
  0x00007f757055ceb1: vmovsd %xmm6,0x38(%rsp)
  0x00007f757055ceb7: vmovsd %xmm7,0x40(%rsp)
  0x00007f757055cebd: vmovsd %xmm8,0x48(%rsp)
  0x00007f757055cec3: vmovsd %xmm9,0x50(%rsp)
  0x00007f757055cec9: vmovsd %xmm10,0x58(%rsp)
  0x00007f757055cecf: vmovsd %xmm11,0x60(%rsp)
  0x00007f757055ced5: vmovsd %xmm12,0x68(%rsp)
  0x00007f757055cedb: vmovsd %xmm13,0x70(%rsp)
  0x00007f757055cee1: vmovsd %xmm14,0x78(%rsp)
  0x00007f757055cee7: vmovsd %xmm15,0x80(%rsp)
  0x00007f757055cef0: mov    %r15,%rdi
  0x00007f757055cef3: mov    %rbp,0x210(%r15)
  0x00007f757055cefa: mov    %rsp,0x200(%r15)
  0x00007f757055cf01: callq  0x00007f7584e55ac0
  0x00007f757055cf06: push   %rax
  0x00007f757055cf07: push   %rdi
  0x00007f757055cf08: push   %rsi
  0x00007f757055cf09: push   %rdx
  0x00007f757055cf0a: push   %rcx
  0x00007f757055cf0b: push   %r8
  0x00007f757055cf0d: push   %r9
  0x00007f757055cf0f: push   %r10
  0x00007f757055cf11: mov    %rsp,%r10
  0x00007f757055cf14: and    $0xfffffffffffffff0,%rsp
  0x00007f757055cf18: push   %r10
  0x00007f757055cf1a: push   %r11
  0x00007f757055cf1c: mov    $0x1,%edi
  0x00007f757055cf21: callq  0x00007f7585f5a2d0
  0x00007f757055cf26: pop    %r11
  0x00007f757055cf28: pop    %rsp
  0x00007f757055cf29: pop    %r10
  0x00007f757055cf2b: pop    %r9
  0x00007f757055cf2d: pop    %r8
  0x00007f757055cf2f: pop    %rcx
  0x00007f757055cf30: pop    %rdx
  0x00007f757055cf31: pop    %rsi
  0x00007f757055cf32: pop    %rdi
  0x00007f757055cf33: cmp    %rax,%r15
  0x00007f757055cf36: je     0x00007f757055cfb3
  0x00007f757055cf3c: mov    %rsp,-0x28(%rsp)
  0x00007f757055cf41: sub    $0x80,%rsp
  0x00007f757055cf48: mov    %rax,0x78(%rsp)
  0x00007f757055cf4d: mov    %rcx,0x70(%rsp)
  0x00007f757055cf52: mov    %rdx,0x68(%rsp)
  0x00007f757055cf57: mov    %rbx,0x60(%rsp)
  0x00007f757055cf5c: mov    %rbp,0x50(%rsp)
  0x00007f757055cf61: mov    %rsi,0x48(%rsp)
  0x00007f757055cf66: mov    %rdi,0x40(%rsp)
  0x00007f757055cf6b: mov    %r8,0x38(%rsp)
  0x00007f757055cf70: mov    %r9,0x30(%rsp)
  0x00007f757055cf75: mov    %r10,0x28(%rsp)
  0x00007f757055cf7a: mov    %r11,0x20(%rsp)
  0x00007f757055cf7f: mov    %r12,0x18(%rsp)
  0x00007f757055cf84: mov    %r13,0x10(%rsp)
  0x00007f757055cf89: mov    %r14,0x8(%rsp)
  0x00007f757055cf8e: mov    %r15,(%rsp)
  0x00007f757055cf92: movabs $0x7f75856f3528,%rdi
  0x00007f757055cf9c: movabs $0x7f757055cf3c,%rsi
  0x00007f757055cfa6: mov    %rsp,%rdx
  0x00007f757055cfa9: and    $0xfffffffffffffff0,%rsp
  0x00007f757055cfad: callq  0x00007f75853729fa
  0x00007f757055cfb2: hlt    
  0x00007f757055cfb3: pop    %rax
  0x00007f757055cfb4: movabs $0x0,%r10
  0x00007f757055cfbe: mov    %r10,0x200(%r15)
  0x00007f757055cfc5: movabs $0x0,%r10
  0x00007f757055cfcf: mov    %r10,0x210(%r15)
  0x00007f757055cfd6: movabs $0x0,%r10
  0x00007f757055cfe0: mov    %r10,0x208(%r15)
  0x00007f757055cfe7: cmpq   $0x0,0x8(%r15)
  0x00007f757055cfef: je     0x00007f757055d284
  0x00007f757055cff5: test   %rax,%rax
  0x00007f757055cff8: je     0x00007f757055b240
  0x00007f757055cffe: mov    0x8(%r15),%rax
  0x00007f757055d002: movabs $0x0,%r10
  0x00007f757055d00c: mov    %r10,0x8(%r15)
  0x00007f757055d010: mov    0x1d8(%rsp),%rdx
  0x00007f757055d018: cmpq   $0x0,0x2d0(%r15)
  0x00007f757055d023: je     0x00007f757055d0a0
  0x00007f757055d029: mov    %rsp,-0x28(%rsp)
  0x00007f757055d02e: sub    $0x80,%rsp
  0x00007f757055d035: mov    %rax,0x78(%rsp)
  0x00007f757055d03a: mov    %rcx,0x70(%rsp)
  0x00007f757055d03f: mov    %rdx,0x68(%rsp)
  0x00007f757055d044: mov    %rbx,0x60(%rsp)
  0x00007f757055d049: mov    %rbp,0x50(%rsp)
  0x00007f757055d04e: mov    %rsi,0x48(%rsp)
  0x00007f757055d053: mov    %rdi,0x40(%rsp)
  0x00007f757055d058: mov    %r8,0x38(%rsp)
  0x00007f757055d05d: mov    %r9,0x30(%rsp)
  0x00007f757055d062: mov    %r10,0x28(%rsp)
  0x00007f757055d067: mov    %r11,0x20(%rsp)
  0x00007f757055d06c: mov    %r12,0x18(%rsp)
  0x00007f757055d071: mov    %r13,0x10(%rsp)
  0x00007f757055d076: mov    %r14,0x8(%rsp)
  0x00007f757055d07b: mov    %r15,(%rsp)
  0x00007f757055d07f: movabs $0x7f75856f3497,%rdi
  0x00007f757055d089: movabs $0x7f757055d029,%rsi
  0x00007f757055d093: mov    %rsp,%rdx
  0x00007f757055d096: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d09a: callq  0x00007f75853729fa
  0x00007f757055d09f: hlt    
  0x00007f757055d0a0: cmpq   $0x0,0x2d8(%r15)
  0x00007f757055d0ab: je     0x00007f757055d128
  0x00007f757055d0b1: mov    %rsp,-0x28(%rsp)
  0x00007f757055d0b6: sub    $0x80,%rsp
  0x00007f757055d0bd: mov    %rax,0x78(%rsp)
  0x00007f757055d0c2: mov    %rcx,0x70(%rsp)
  0x00007f757055d0c7: mov    %rdx,0x68(%rsp)
  0x00007f757055d0cc: mov    %rbx,0x60(%rsp)
  0x00007f757055d0d1: mov    %rbp,0x50(%rsp)
  0x00007f757055d0d6: mov    %rsi,0x48(%rsp)
  0x00007f757055d0db: mov    %rdi,0x40(%rsp)
  0x00007f757055d0e0: mov    %r8,0x38(%rsp)
  0x00007f757055d0e5: mov    %r9,0x30(%rsp)
  0x00007f757055d0ea: mov    %r10,0x28(%rsp)
  0x00007f757055d0ef: mov    %r11,0x20(%rsp)
  0x00007f757055d0f4: mov    %r12,0x18(%rsp)
  0x00007f757055d0f9: mov    %r13,0x10(%rsp)
  0x00007f757055d0fe: mov    %r14,0x8(%rsp)
  0x00007f757055d103: mov    %r15,(%rsp)
  0x00007f757055d107: movabs $0x7f75856f34b3,%rdi
  0x00007f757055d111: movabs $0x7f757055d0b1,%rsi
  0x00007f757055d11b: mov    %rsp,%rdx
  0x00007f757055d11e: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d122: callq  0x00007f75853729fa
  0x00007f757055d127: hlt    
  0x00007f757055d128: mov    %rax,0x2d0(%r15)
  0x00007f757055d12f: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f757055d136: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055d13c: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055d142: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055d148: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055d14e: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055d154: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055d15a: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055d160: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055d166: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055d16c: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055d172: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055d178: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055d17e: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055d184: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055d18a: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055d190: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055d199: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055d1a5: je     0x00007f757055d222
  0x00007f757055d1ab: mov    %rsp,-0x28(%rsp)
  0x00007f757055d1b0: sub    $0x80,%rsp
  0x00007f757055d1b7: mov    %rax,0x78(%rsp)
  0x00007f757055d1bc: mov    %rcx,0x70(%rsp)
  0x00007f757055d1c1: mov    %rdx,0x68(%rsp)
  0x00007f757055d1c6: mov    %rbx,0x60(%rsp)
  0x00007f757055d1cb: mov    %rbp,0x50(%rsp)
  0x00007f757055d1d0: mov    %rsi,0x48(%rsp)
  0x00007f757055d1d5: mov    %rdi,0x40(%rsp)
  0x00007f757055d1da: mov    %r8,0x38(%rsp)
  0x00007f757055d1df: mov    %r9,0x30(%rsp)
  0x00007f757055d1e4: mov    %r10,0x28(%rsp)
  0x00007f757055d1e9: mov    %r11,0x20(%rsp)
  0x00007f757055d1ee: mov    %r12,0x18(%rsp)
  0x00007f757055d1f3: mov    %r13,0x10(%rsp)
  0x00007f757055d1f8: mov    %r14,0x8(%rsp)
  0x00007f757055d1fd: mov    %r15,(%rsp)
  0x00007f757055d201: movabs $0x7f75856f340f,%rdi
  0x00007f757055d20b: movabs $0x7f757055d1ab,%rsi
  0x00007f757055d215: mov    %rsp,%rdx
  0x00007f757055d218: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d21c: callq  0x00007f75853729fa
  0x00007f757055d221: hlt    
  0x00007f757055d222: add    $0x150,%rsp
  0x00007f757055d229: mov    (%rsp),%r15
  0x00007f757055d22d: mov    0x8(%rsp),%r14
  0x00007f757055d232: mov    0x10(%rsp),%r13
  0x00007f757055d237: mov    0x18(%rsp),%r12
  0x00007f757055d23c: mov    0x20(%rsp),%r11
  0x00007f757055d241: mov    0x28(%rsp),%r10
  0x00007f757055d246: mov    0x30(%rsp),%r9
  0x00007f757055d24b: mov    0x38(%rsp),%r8
  0x00007f757055d250: mov    0x40(%rsp),%rdi
  0x00007f757055d255: mov    0x48(%rsp),%rsi
  0x00007f757055d25a: mov    0x50(%rsp),%rbp
  0x00007f757055d25f: mov    0x60(%rsp),%rbx
  0x00007f757055d264: mov    0x68(%rsp),%rdx
  0x00007f757055d269: mov    0x70(%rsp),%rcx
  0x00007f757055d26e: mov    0x78(%rsp),%rax
  0x00007f757055d273: add    $0x80,%rsp
  0x00007f757055d27a: leaveq 
  0x00007f757055d27b: add    $0x8,%rsp
  0x00007f757055d27f: jmpq   0x00007f75704703da
  0x00007f757055d284: test   %rax,%rax
  0x00007f757055d287: je     0x00007f757055d3d7
  ;; restore_live_registers
  0x00007f757055d28d: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055d293: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055d299: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055d29f: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055d2a5: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055d2ab: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055d2b1: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055d2b7: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055d2bd: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055d2c3: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055d2c9: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055d2cf: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055d2d5: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055d2db: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055d2e1: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055d2e7: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055d2f0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055d2fc: je     0x00007f757055d379
  0x00007f757055d302: mov    %rsp,-0x28(%rsp)
  0x00007f757055d307: sub    $0x80,%rsp
  0x00007f757055d30e: mov    %rax,0x78(%rsp)
  0x00007f757055d313: mov    %rcx,0x70(%rsp)
  0x00007f757055d318: mov    %rdx,0x68(%rsp)
  0x00007f757055d31d: mov    %rbx,0x60(%rsp)
  0x00007f757055d322: mov    %rbp,0x50(%rsp)
  0x00007f757055d327: mov    %rsi,0x48(%rsp)
  0x00007f757055d32c: mov    %rdi,0x40(%rsp)
  0x00007f757055d331: mov    %r8,0x38(%rsp)
  0x00007f757055d336: mov    %r9,0x30(%rsp)
  0x00007f757055d33b: mov    %r10,0x28(%rsp)
  0x00007f757055d340: mov    %r11,0x20(%rsp)
  0x00007f757055d345: mov    %r12,0x18(%rsp)
  0x00007f757055d34a: mov    %r13,0x10(%rsp)
  0x00007f757055d34f: mov    %r14,0x8(%rsp)
  0x00007f757055d354: mov    %r15,(%rsp)
  0x00007f757055d358: movabs $0x7f75856f340f,%rdi
  0x00007f757055d362: movabs $0x7f757055d302,%rsi
  0x00007f757055d36c: mov    %rsp,%rdx
  0x00007f757055d36f: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d373: callq  0x00007f75853729fa
  0x00007f757055d378: hlt    
  0x00007f757055d379: add    $0x150,%rsp
  0x00007f757055d380: mov    (%rsp),%r15
  0x00007f757055d384: mov    0x8(%rsp),%r14
  0x00007f757055d389: mov    0x10(%rsp),%r13
  0x00007f757055d38e: mov    0x18(%rsp),%r12
  0x00007f757055d393: mov    0x20(%rsp),%r11
  0x00007f757055d398: mov    0x28(%rsp),%r10
  0x00007f757055d39d: mov    0x30(%rsp),%r9
  0x00007f757055d3a2: mov    0x38(%rsp),%r8
  0x00007f757055d3a7: mov    0x40(%rsp),%rdi
  0x00007f757055d3ac: mov    0x48(%rsp),%rsi
  0x00007f757055d3b1: mov    0x50(%rsp),%rbp
  0x00007f757055d3b6: mov    0x60(%rsp),%rbx
  0x00007f757055d3bb: mov    0x68(%rsp),%rdx
  0x00007f757055d3c0: mov    0x70(%rsp),%rcx
  0x00007f757055d3c5: mov    0x78(%rsp),%rax
  0x00007f757055d3ca: add    $0x80,%rsp
  0x00007f757055d3d1: leaveq 
  0x00007f757055d3d2: jmpq   0x00007f7570470356
  ;; restore_live_registers
  0x00007f757055d3d7: vmovsd 0x8(%rsp),%xmm0
  0x00007f757055d3dd: vmovsd 0x10(%rsp),%xmm1
  0x00007f757055d3e3: vmovsd 0x18(%rsp),%xmm2
  0x00007f757055d3e9: vmovsd 0x20(%rsp),%xmm3
  0x00007f757055d3ef: vmovsd 0x28(%rsp),%xmm4
  0x00007f757055d3f5: vmovsd 0x30(%rsp),%xmm5
  0x00007f757055d3fb: vmovsd 0x38(%rsp),%xmm6
  0x00007f757055d401: vmovsd 0x40(%rsp),%xmm7
  0x00007f757055d407: vmovsd 0x48(%rsp),%xmm8
  0x00007f757055d40d: vmovsd 0x50(%rsp),%xmm9
  0x00007f757055d413: vmovsd 0x58(%rsp),%xmm10
  0x00007f757055d419: vmovsd 0x60(%rsp),%xmm11
  0x00007f757055d41f: vmovsd 0x68(%rsp),%xmm12
  0x00007f757055d425: vmovsd 0x70(%rsp),%xmm13
  0x00007f757055d42b: vmovsd 0x78(%rsp),%xmm14
  0x00007f757055d431: vmovsd 0x80(%rsp),%xmm15
  0x00007f757055d43a: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757055d446: je     0x00007f757055d4c3
  0x00007f757055d44c: mov    %rsp,-0x28(%rsp)
  0x00007f757055d451: sub    $0x80,%rsp
  0x00007f757055d458: mov    %rax,0x78(%rsp)
  0x00007f757055d45d: mov    %rcx,0x70(%rsp)
  0x00007f757055d462: mov    %rdx,0x68(%rsp)
  0x00007f757055d467: mov    %rbx,0x60(%rsp)
  0x00007f757055d46c: mov    %rbp,0x50(%rsp)
  0x00007f757055d471: mov    %rsi,0x48(%rsp)
  0x00007f757055d476: mov    %rdi,0x40(%rsp)
  0x00007f757055d47b: mov    %r8,0x38(%rsp)
  0x00007f757055d480: mov    %r9,0x30(%rsp)
  0x00007f757055d485: mov    %r10,0x28(%rsp)
  0x00007f757055d48a: mov    %r11,0x20(%rsp)
  0x00007f757055d48f: mov    %r12,0x18(%rsp)
  0x00007f757055d494: mov    %r13,0x10(%rsp)
  0x00007f757055d499: mov    %r14,0x8(%rsp)
  0x00007f757055d49e: mov    %r15,(%rsp)
  0x00007f757055d4a2: movabs $0x7f75856f340f,%rdi
  0x00007f757055d4ac: movabs $0x7f757055d44c,%rsi
  0x00007f757055d4b6: mov    %rsp,%rdx
  0x00007f757055d4b9: and    $0xfffffffffffffff0,%rsp
  0x00007f757055d4bd: callq  0x00007f75853729fa
  0x00007f757055d4c2: hlt    
  0x00007f757055d4c3: add    $0x150,%rsp
  0x00007f757055d4ca: mov    (%rsp),%r15
  0x00007f757055d4ce: mov    0x8(%rsp),%r14
  0x00007f757055d4d3: mov    0x10(%rsp),%r13
  0x00007f757055d4d8: mov    0x18(%rsp),%r12
  0x00007f757055d4dd: mov    0x20(%rsp),%r11
  0x00007f757055d4e2: mov    0x28(%rsp),%r10
  0x00007f757055d4e7: mov    0x30(%rsp),%r9
  0x00007f757055d4ec: mov    0x38(%rsp),%r8
  0x00007f757055d4f1: mov    0x40(%rsp),%rdi
  0x00007f757055d4f6: mov    0x48(%rsp),%rsi
  0x00007f757055d4fb: mov    0x50(%rsp),%rbp
  0x00007f757055d500: mov    0x60(%rsp),%rbx
  0x00007f757055d505: mov    0x68(%rsp),%rdx
  0x00007f757055d50a: mov    0x70(%rsp),%rcx
  0x00007f757055d50f: mov    0x78(%rsp),%rax
  0x00007f757055d514: add    $0x80,%rsp
  0x00007f757055d51b: leaveq 
  0x00007f757055d51c: retq   
  0x00007f757055d51d: leaveq 
  0x00007f757055d51e: retq   
  0x00007f757055d51f: nop

Decoding RuntimeStub - load_appendix_patching Runtime1 stub 0x00007f7570594810
  0x00007f75705948e0: push   %rbp
  0x00007f75705948e1: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f75705948e4: mov    %rsp,-0x28(%rsp)
  0x00007f75705948e9: sub    $0x80,%rsp
  0x00007f75705948f0: mov    %rax,0x78(%rsp)
  0x00007f75705948f5: mov    %rcx,0x70(%rsp)
  0x00007f75705948fa: mov    %rdx,0x68(%rsp)
  0x00007f75705948ff: mov    %rbx,0x60(%rsp)
  0x00007f7570594904: mov    %rbp,0x50(%rsp)
  0x00007f7570594909: mov    %rsi,0x48(%rsp)
  0x00007f757059490e: mov    %rdi,0x40(%rsp)
  0x00007f7570594913: mov    %r8,0x38(%rsp)
  0x00007f7570594918: mov    %r9,0x30(%rsp)
  0x00007f757059491d: mov    %r10,0x28(%rsp)
  0x00007f7570594922: mov    %r11,0x20(%rsp)
  0x00007f7570594927: mov    %r12,0x18(%rsp)
  0x00007f757059492c: mov    %r13,0x10(%rsp)
  0x00007f7570594931: mov    %r14,0x8(%rsp)
  0x00007f7570594936: mov    %r15,(%rsp)
  0x00007f757059493a: sub    $0x150,%rsp
  0x00007f7570594941: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059494d: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570594953: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570594959: vmovsd %xmm2,0x18(%rsp)
  0x00007f757059495f: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570594965: vmovsd %xmm4,0x28(%rsp)
  0x00007f757059496b: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570594971: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570594977: vmovsd %xmm7,0x40(%rsp)
  0x00007f757059497d: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570594983: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570594989: vmovsd %xmm10,0x58(%rsp)
  0x00007f757059498f: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570594995: vmovsd %xmm12,0x68(%rsp)
  0x00007f757059499b: vmovsd %xmm13,0x70(%rsp)
  0x00007f75705949a1: vmovsd %xmm14,0x78(%rsp)
  0x00007f75705949a7: vmovsd %xmm15,0x80(%rsp)
  0x00007f75705949b0: mov    %r15,%rdi
  0x00007f75705949b3: mov    %rbp,0x210(%r15)
  0x00007f75705949ba: mov    %rsp,0x200(%r15)
  0x00007f75705949c1: callq  0x00007f7584e55b28
  0x00007f75705949c6: push   %rax
  0x00007f75705949c7: push   %rdi
  0x00007f75705949c8: push   %rsi
  0x00007f75705949c9: push   %rdx
  0x00007f75705949ca: push   %rcx
  0x00007f75705949cb: push   %r8
  0x00007f75705949cd: push   %r9
  0x00007f75705949cf: push   %r10
  0x00007f75705949d1: mov    %rsp,%r10
  0x00007f75705949d4: and    $0xfffffffffffffff0,%rsp
  0x00007f75705949d8: push   %r10
  0x00007f75705949da: push   %r11
  0x00007f75705949dc: mov    $0x1,%edi
  0x00007f75705949e1: callq  0x00007f7585f5a2d0
  0x00007f75705949e6: pop    %r11
  0x00007f75705949e8: pop    %rsp
  0x00007f75705949e9: pop    %r10
  0x00007f75705949eb: pop    %r9
  0x00007f75705949ed: pop    %r8
  0x00007f75705949ef: pop    %rcx
  0x00007f75705949f0: pop    %rdx
  0x00007f75705949f1: pop    %rsi
  0x00007f75705949f2: pop    %rdi
  0x00007f75705949f3: cmp    %rax,%r15
  0x00007f75705949f6: je     0x00007f7570594a73
  0x00007f75705949fc: mov    %rsp,-0x28(%rsp)
  0x00007f7570594a01: sub    $0x80,%rsp
  0x00007f7570594a08: mov    %rax,0x78(%rsp)
  0x00007f7570594a0d: mov    %rcx,0x70(%rsp)
  0x00007f7570594a12: mov    %rdx,0x68(%rsp)
  0x00007f7570594a17: mov    %rbx,0x60(%rsp)
  0x00007f7570594a1c: mov    %rbp,0x50(%rsp)
  0x00007f7570594a21: mov    %rsi,0x48(%rsp)
  0x00007f7570594a26: mov    %rdi,0x40(%rsp)
  0x00007f7570594a2b: mov    %r8,0x38(%rsp)
  0x00007f7570594a30: mov    %r9,0x30(%rsp)
  0x00007f7570594a35: mov    %r10,0x28(%rsp)
  0x00007f7570594a3a: mov    %r11,0x20(%rsp)
  0x00007f7570594a3f: mov    %r12,0x18(%rsp)
  0x00007f7570594a44: mov    %r13,0x10(%rsp)
  0x00007f7570594a49: mov    %r14,0x8(%rsp)
  0x00007f7570594a4e: mov    %r15,(%rsp)
  0x00007f7570594a52: movabs $0x7f75856f3528,%rdi
  0x00007f7570594a5c: movabs $0x7f75705949fc,%rsi
  0x00007f7570594a66: mov    %rsp,%rdx
  0x00007f7570594a69: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594a6d: callq  0x00007f75853729fa
  0x00007f7570594a72: hlt    
  0x00007f7570594a73: pop    %rax
  0x00007f7570594a74: movabs $0x0,%r10
  0x00007f7570594a7e: mov    %r10,0x200(%r15)
  0x00007f7570594a85: movabs $0x0,%r10
  0x00007f7570594a8f: mov    %r10,0x210(%r15)
  0x00007f7570594a96: movabs $0x0,%r10
  0x00007f7570594aa0: mov    %r10,0x208(%r15)
  0x00007f7570594aa7: cmpq   $0x0,0x8(%r15)
  0x00007f7570594aaf: je     0x00007f7570594d44
  0x00007f7570594ab5: test   %rax,%rax
  0x00007f7570594ab8: je     0x00007f757055b240
  0x00007f7570594abe: mov    0x8(%r15),%rax
  0x00007f7570594ac2: movabs $0x0,%r10
  0x00007f7570594acc: mov    %r10,0x8(%r15)
  0x00007f7570594ad0: mov    0x1d8(%rsp),%rdx
  0x00007f7570594ad8: cmpq   $0x0,0x2d0(%r15)
  0x00007f7570594ae3: je     0x00007f7570594b60
  0x00007f7570594ae9: mov    %rsp,-0x28(%rsp)
  0x00007f7570594aee: sub    $0x80,%rsp
  0x00007f7570594af5: mov    %rax,0x78(%rsp)
  0x00007f7570594afa: mov    %rcx,0x70(%rsp)
  0x00007f7570594aff: mov    %rdx,0x68(%rsp)
  0x00007f7570594b04: mov    %rbx,0x60(%rsp)
  0x00007f7570594b09: mov    %rbp,0x50(%rsp)
  0x00007f7570594b0e: mov    %rsi,0x48(%rsp)
  0x00007f7570594b13: mov    %rdi,0x40(%rsp)
  0x00007f7570594b18: mov    %r8,0x38(%rsp)
  0x00007f7570594b1d: mov    %r9,0x30(%rsp)
  0x00007f7570594b22: mov    %r10,0x28(%rsp)
  0x00007f7570594b27: mov    %r11,0x20(%rsp)
  0x00007f7570594b2c: mov    %r12,0x18(%rsp)
  0x00007f7570594b31: mov    %r13,0x10(%rsp)
  0x00007f7570594b36: mov    %r14,0x8(%rsp)
  0x00007f7570594b3b: mov    %r15,(%rsp)
  0x00007f7570594b3f: movabs $0x7f75856f3497,%rdi
  0x00007f7570594b49: movabs $0x7f7570594ae9,%rsi
  0x00007f7570594b53: mov    %rsp,%rdx
  0x00007f7570594b56: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594b5a: callq  0x00007f75853729fa
  0x00007f7570594b5f: hlt    
  0x00007f7570594b60: cmpq   $0x0,0x2d8(%r15)
  0x00007f7570594b6b: je     0x00007f7570594be8
  0x00007f7570594b71: mov    %rsp,-0x28(%rsp)
  0x00007f7570594b76: sub    $0x80,%rsp
  0x00007f7570594b7d: mov    %rax,0x78(%rsp)
  0x00007f7570594b82: mov    %rcx,0x70(%rsp)
  0x00007f7570594b87: mov    %rdx,0x68(%rsp)
  0x00007f7570594b8c: mov    %rbx,0x60(%rsp)
  0x00007f7570594b91: mov    %rbp,0x50(%rsp)
  0x00007f7570594b96: mov    %rsi,0x48(%rsp)
  0x00007f7570594b9b: mov    %rdi,0x40(%rsp)
  0x00007f7570594ba0: mov    %r8,0x38(%rsp)
  0x00007f7570594ba5: mov    %r9,0x30(%rsp)
  0x00007f7570594baa: mov    %r10,0x28(%rsp)
  0x00007f7570594baf: mov    %r11,0x20(%rsp)
  0x00007f7570594bb4: mov    %r12,0x18(%rsp)
  0x00007f7570594bb9: mov    %r13,0x10(%rsp)
  0x00007f7570594bbe: mov    %r14,0x8(%rsp)
  0x00007f7570594bc3: mov    %r15,(%rsp)
  0x00007f7570594bc7: movabs $0x7f75856f34b3,%rdi
  0x00007f7570594bd1: movabs $0x7f7570594b71,%rsi
  0x00007f7570594bdb: mov    %rsp,%rdx
  0x00007f7570594bde: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594be2: callq  0x00007f75853729fa
  0x00007f7570594be7: hlt    
  0x00007f7570594be8: mov    %rax,0x2d0(%r15)
  0x00007f7570594bef: mov    %rdx,0x2d8(%r15)
  ;; restore_live_registers
  0x00007f7570594bf6: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570594bfc: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570594c02: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570594c08: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570594c0e: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570594c14: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570594c1a: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570594c20: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570594c26: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570594c2c: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570594c32: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570594c38: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570594c3e: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570594c44: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570594c4a: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570594c50: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570594c59: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570594c65: je     0x00007f7570594ce2
  0x00007f7570594c6b: mov    %rsp,-0x28(%rsp)
  0x00007f7570594c70: sub    $0x80,%rsp
  0x00007f7570594c77: mov    %rax,0x78(%rsp)
  0x00007f7570594c7c: mov    %rcx,0x70(%rsp)
  0x00007f7570594c81: mov    %rdx,0x68(%rsp)
  0x00007f7570594c86: mov    %rbx,0x60(%rsp)
  0x00007f7570594c8b: mov    %rbp,0x50(%rsp)
  0x00007f7570594c90: mov    %rsi,0x48(%rsp)
  0x00007f7570594c95: mov    %rdi,0x40(%rsp)
  0x00007f7570594c9a: mov    %r8,0x38(%rsp)
  0x00007f7570594c9f: mov    %r9,0x30(%rsp)
  0x00007f7570594ca4: mov    %r10,0x28(%rsp)
  0x00007f7570594ca9: mov    %r11,0x20(%rsp)
  0x00007f7570594cae: mov    %r12,0x18(%rsp)
  0x00007f7570594cb3: mov    %r13,0x10(%rsp)
  0x00007f7570594cb8: mov    %r14,0x8(%rsp)
  0x00007f7570594cbd: mov    %r15,(%rsp)
  0x00007f7570594cc1: movabs $0x7f75856f340f,%rdi
  0x00007f7570594ccb: movabs $0x7f7570594c6b,%rsi
  0x00007f7570594cd5: mov    %rsp,%rdx
  0x00007f7570594cd8: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594cdc: callq  0x00007f75853729fa
  0x00007f7570594ce1: hlt    
  0x00007f7570594ce2: add    $0x150,%rsp
  0x00007f7570594ce9: mov    (%rsp),%r15
  0x00007f7570594ced: mov    0x8(%rsp),%r14
  0x00007f7570594cf2: mov    0x10(%rsp),%r13
  0x00007f7570594cf7: mov    0x18(%rsp),%r12
  0x00007f7570594cfc: mov    0x20(%rsp),%r11
  0x00007f7570594d01: mov    0x28(%rsp),%r10
  0x00007f7570594d06: mov    0x30(%rsp),%r9
  0x00007f7570594d0b: mov    0x38(%rsp),%r8
  0x00007f7570594d10: mov    0x40(%rsp),%rdi
  0x00007f7570594d15: mov    0x48(%rsp),%rsi
  0x00007f7570594d1a: mov    0x50(%rsp),%rbp
  0x00007f7570594d1f: mov    0x60(%rsp),%rbx
  0x00007f7570594d24: mov    0x68(%rsp),%rdx
  0x00007f7570594d29: mov    0x70(%rsp),%rcx
  0x00007f7570594d2e: mov    0x78(%rsp),%rax
  0x00007f7570594d33: add    $0x80,%rsp
  0x00007f7570594d3a: leaveq 
  0x00007f7570594d3b: add    $0x8,%rsp
  0x00007f7570594d3f: jmpq   0x00007f75704703da
  0x00007f7570594d44: test   %rax,%rax
  0x00007f7570594d47: je     0x00007f7570594e97
  ;; restore_live_registers
  0x00007f7570594d4d: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570594d53: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570594d59: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570594d5f: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570594d65: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570594d6b: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570594d71: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570594d77: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570594d7d: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570594d83: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570594d89: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570594d8f: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570594d95: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570594d9b: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570594da1: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570594da7: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570594db0: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570594dbc: je     0x00007f7570594e39
  0x00007f7570594dc2: mov    %rsp,-0x28(%rsp)
  0x00007f7570594dc7: sub    $0x80,%rsp
  0x00007f7570594dce: mov    %rax,0x78(%rsp)
  0x00007f7570594dd3: mov    %rcx,0x70(%rsp)
  0x00007f7570594dd8: mov    %rdx,0x68(%rsp)
  0x00007f7570594ddd: mov    %rbx,0x60(%rsp)
  0x00007f7570594de2: mov    %rbp,0x50(%rsp)
  0x00007f7570594de7: mov    %rsi,0x48(%rsp)
  0x00007f7570594dec: mov    %rdi,0x40(%rsp)
  0x00007f7570594df1: mov    %r8,0x38(%rsp)
  0x00007f7570594df6: mov    %r9,0x30(%rsp)
  0x00007f7570594dfb: mov    %r10,0x28(%rsp)
  0x00007f7570594e00: mov    %r11,0x20(%rsp)
  0x00007f7570594e05: mov    %r12,0x18(%rsp)
  0x00007f7570594e0a: mov    %r13,0x10(%rsp)
  0x00007f7570594e0f: mov    %r14,0x8(%rsp)
  0x00007f7570594e14: mov    %r15,(%rsp)
  0x00007f7570594e18: movabs $0x7f75856f340f,%rdi
  0x00007f7570594e22: movabs $0x7f7570594dc2,%rsi
  0x00007f7570594e2c: mov    %rsp,%rdx
  0x00007f7570594e2f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594e33: callq  0x00007f75853729fa
  0x00007f7570594e38: hlt    
  0x00007f7570594e39: add    $0x150,%rsp
  0x00007f7570594e40: mov    (%rsp),%r15
  0x00007f7570594e44: mov    0x8(%rsp),%r14
  0x00007f7570594e49: mov    0x10(%rsp),%r13
  0x00007f7570594e4e: mov    0x18(%rsp),%r12
  0x00007f7570594e53: mov    0x20(%rsp),%r11
  0x00007f7570594e58: mov    0x28(%rsp),%r10
  0x00007f7570594e5d: mov    0x30(%rsp),%r9
  0x00007f7570594e62: mov    0x38(%rsp),%r8
  0x00007f7570594e67: mov    0x40(%rsp),%rdi
  0x00007f7570594e6c: mov    0x48(%rsp),%rsi
  0x00007f7570594e71: mov    0x50(%rsp),%rbp
  0x00007f7570594e76: mov    0x60(%rsp),%rbx
  0x00007f7570594e7b: mov    0x68(%rsp),%rdx
  0x00007f7570594e80: mov    0x70(%rsp),%rcx
  0x00007f7570594e85: mov    0x78(%rsp),%rax
  0x00007f7570594e8a: add    $0x80,%rsp
  0x00007f7570594e91: leaveq 
  0x00007f7570594e92: jmpq   0x00007f7570470356
  ;; restore_live_registers
  0x00007f7570594e97: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570594e9d: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570594ea3: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570594ea9: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570594eaf: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570594eb5: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570594ebb: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570594ec1: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570594ec7: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570594ecd: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570594ed3: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570594ed9: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570594edf: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570594ee5: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570594eeb: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570594ef1: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570594efa: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570594f06: je     0x00007f7570594f83
  0x00007f7570594f0c: mov    %rsp,-0x28(%rsp)
  0x00007f7570594f11: sub    $0x80,%rsp
  0x00007f7570594f18: mov    %rax,0x78(%rsp)
  0x00007f7570594f1d: mov    %rcx,0x70(%rsp)
  0x00007f7570594f22: mov    %rdx,0x68(%rsp)
  0x00007f7570594f27: mov    %rbx,0x60(%rsp)
  0x00007f7570594f2c: mov    %rbp,0x50(%rsp)
  0x00007f7570594f31: mov    %rsi,0x48(%rsp)
  0x00007f7570594f36: mov    %rdi,0x40(%rsp)
  0x00007f7570594f3b: mov    %r8,0x38(%rsp)
  0x00007f7570594f40: mov    %r9,0x30(%rsp)
  0x00007f7570594f45: mov    %r10,0x28(%rsp)
  0x00007f7570594f4a: mov    %r11,0x20(%rsp)
  0x00007f7570594f4f: mov    %r12,0x18(%rsp)
  0x00007f7570594f54: mov    %r13,0x10(%rsp)
  0x00007f7570594f59: mov    %r14,0x8(%rsp)
  0x00007f7570594f5e: mov    %r15,(%rsp)
  0x00007f7570594f62: movabs $0x7f75856f340f,%rdi
  0x00007f7570594f6c: movabs $0x7f7570594f0c,%rsi
  0x00007f7570594f76: mov    %rsp,%rdx
  0x00007f7570594f79: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594f7d: callq  0x00007f75853729fa
  0x00007f7570594f82: hlt    
  0x00007f7570594f83: add    $0x150,%rsp
  0x00007f7570594f8a: mov    (%rsp),%r15
  0x00007f7570594f8e: mov    0x8(%rsp),%r14
  0x00007f7570594f93: mov    0x10(%rsp),%r13
  0x00007f7570594f98: mov    0x18(%rsp),%r12
  0x00007f7570594f9d: mov    0x20(%rsp),%r11
  0x00007f7570594fa2: mov    0x28(%rsp),%r10
  0x00007f7570594fa7: mov    0x30(%rsp),%r9
  0x00007f7570594fac: mov    0x38(%rsp),%r8
  0x00007f7570594fb1: mov    0x40(%rsp),%rdi
  0x00007f7570594fb6: mov    0x48(%rsp),%rsi
  0x00007f7570594fbb: mov    0x50(%rsp),%rbp
  0x00007f7570594fc0: mov    0x60(%rsp),%rbx
  0x00007f7570594fc5: mov    0x68(%rsp),%rdx
  0x00007f7570594fca: mov    0x70(%rsp),%rcx
  0x00007f7570594fcf: mov    0x78(%rsp),%rax
  0x00007f7570594fd4: add    $0x80,%rsp
  0x00007f7570594fdb: leaveq 
  0x00007f7570594fdc: retq   
  0x00007f7570594fdd: leaveq 
  0x00007f7570594fde: retq   
  0x00007f7570594fdf: nop

AHE@0x00007f758012d230: 0xbeba0000 i2c: 0x00007f75705945a0 c2i: 0x00007f75705946e1 c2iUV: 0x00007f75705946b4
i2c argument handler #122 for: static (J[BZ)J (608 bytes generated)
c2i argument handler starts at 0x7f75705946e1
  0x00007f75705945a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705945a4: movabs $0x7f757036e3e0,%r11
  0x00007f75705945ae: cmp    %r11,%rax
  0x00007f75705945b1: jbe    0x00007f75705945ca
  0x00007f75705945b7: movabs $0x7f757046e3e0,%r11
  0x00007f75705945c1: cmp    %r11,%rax
  0x00007f75705945c4: jb     0x00007f757059468d
  0x00007f75705945ca: movabs $0x7f7570369420,%r11
  0x00007f75705945d4: cmp    %r11,%rax
  0x00007f75705945d7: jbe    0x00007f75705945f0
  0x00007f75705945dd: movabs $0x7f757036de58,%r11
  0x00007f75705945e7: cmp    %r11,%rax
  0x00007f75705945ea: jb     0x00007f757059468d
  0x00007f75705945f0: movabs $0x7f75704a9820,%r11
  0x00007f75705945fa: cmp    %r11,%rax
  0x00007f75705945fd: jbe    0x00007f7570594616
  0x00007f7570594603: movabs $0x7f75704af5e0,%r11
  0x00007f757059460d: cmp    %r11,%rax
  0x00007f7570594610: jb     0x00007f757059468d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570594616: mov    %rsp,-0x28(%rsp)
  0x00007f757059461b: sub    $0x80,%rsp
  0x00007f7570594622: mov    %rax,0x78(%rsp)
  0x00007f7570594627: mov    %rcx,0x70(%rsp)
  0x00007f757059462c: mov    %rdx,0x68(%rsp)
  0x00007f7570594631: mov    %rbx,0x60(%rsp)
  0x00007f7570594636: mov    %rbp,0x50(%rsp)
  0x00007f757059463b: mov    %rsi,0x48(%rsp)
  0x00007f7570594640: mov    %rdi,0x40(%rsp)
  0x00007f7570594645: mov    %r8,0x38(%rsp)
  0x00007f757059464a: mov    %r9,0x30(%rsp)
  0x00007f757059464f: mov    %r10,0x28(%rsp)
  0x00007f7570594654: mov    %r11,0x20(%rsp)
  0x00007f7570594659: mov    %r12,0x18(%rsp)
  0x00007f757059465e: mov    %r13,0x10(%rsp)
  0x00007f7570594663: mov    %r14,0x8(%rsp)
  0x00007f7570594668: mov    %r15,(%rsp)
  0x00007f757059466c: movabs $0x7f758592f470,%rdi
  0x00007f7570594676: movabs $0x7f7570594616,%rsi
  0x00007f7570594680: mov    %rsp,%rdx
  0x00007f7570594683: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594687: callq  0x00007f75853729fa
  0x00007f757059468c: hlt    
  ;; } verify_i2ce 
  0x00007f757059468d: mov    %rsp,%r11
  0x00007f7570594690: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594694: push   %rax
  0x00007f7570594695: mov    %r11,%rax
  0x00007f7570594698: mov    0x50(%rbx),%r11
  0x00007f757059469c: mov    0x18(%rax),%rsi
  0x00007f75705946a0: mov    0x10(%rax),%rdx
  0x00007f75705946a4: mov    0x8(%rax),%ecx
  0x00007f75705946a7: mov    %rbx,0x258(%r15)
  0x00007f75705946ae: mov    %rbx,%rax
  0x00007f75705946b1: jmpq   *%r11
  0x00007f75705946b4: mov    0x8(%rsi),%ebx
  0x00007f75705946b7: shl    $0x3,%rbx
  0x00007f75705946bb: cmp    0x10(%rax),%rbx
  0x00007f75705946bf: mov    0x8(%rax),%rbx
  0x00007f75705946c3: je     0x00007f75705946ce
  0x00007f75705946c9: jmpq   0x00007f757046ec40
  0x00007f75705946ce: cmpq   $0x0,0x58(%rbx)
  0x00007f75705946d6: je     0x00007f75705947d1
  0x00007f75705946dc: jmpq   0x00007f757046ec40
  0x00007f75705946e1: cmpq   $0x0,0x58(%rbx)
  0x00007f75705946e9: je     0x00007f75705947d1
  0x00007f75705946ef: mov    %rsp,%r13
  0x00007f75705946f2: mov    (%rsp),%rax
  0x00007f75705946f6: and    $0xfffffffffffffff0,%rsp
  0x00007f75705946fa: pushfq 
  0x00007f75705946fb: sub    $0x8,%rsp
  0x00007f75705946ff: mov    %rsp,-0x28(%rsp)
  0x00007f7570594704: sub    $0x80,%rsp
  0x00007f757059470b: mov    %rax,0x78(%rsp)
  0x00007f7570594710: mov    %rcx,0x70(%rsp)
  0x00007f7570594715: mov    %rdx,0x68(%rsp)
  0x00007f757059471a: mov    %rbx,0x60(%rsp)
  0x00007f757059471f: mov    %rbp,0x50(%rsp)
  0x00007f7570594724: mov    %rsi,0x48(%rsp)
  0x00007f7570594729: mov    %rdi,0x40(%rsp)
  0x00007f757059472e: mov    %r8,0x38(%rsp)
  0x00007f7570594733: mov    %r9,0x30(%rsp)
  0x00007f7570594738: mov    %r10,0x28(%rsp)
  0x00007f757059473d: mov    %r11,0x20(%rsp)
  0x00007f7570594742: mov    %r12,0x18(%rsp)
  0x00007f7570594747: mov    %r13,0x10(%rsp)
  0x00007f757059474c: mov    %r14,0x8(%rsp)
  0x00007f7570594751: mov    %r15,(%rsp)
  0x00007f7570594755: sub    $0x200,%rsp
  0x00007f757059475c: fxsave64 (%rsp)
  0x00007f7570594761: mov    %rbx,%rdi
  0x00007f7570594764: mov    %rax,%rsi
  0x00007f7570594767: callq  0x00007f7585522bca
  0x00007f757059476c: fxrstor64 (%rsp)
  0x00007f7570594771: add    $0x200,%rsp
  0x00007f7570594778: mov    (%rsp),%r15
  0x00007f757059477c: mov    0x8(%rsp),%r14
  0x00007f7570594781: mov    0x10(%rsp),%r13
  0x00007f7570594786: mov    0x18(%rsp),%r12
  0x00007f757059478b: mov    0x20(%rsp),%r11
  0x00007f7570594790: mov    0x28(%rsp),%r10
  0x00007f7570594795: mov    0x30(%rsp),%r9
  0x00007f757059479a: mov    0x38(%rsp),%r8
  0x00007f757059479f: mov    0x40(%rsp),%rdi
  0x00007f75705947a4: mov    0x48(%rsp),%rsi
  0x00007f75705947a9: mov    0x50(%rsp),%rbp
  0x00007f75705947ae: mov    0x60(%rsp),%rbx
  0x00007f75705947b3: mov    0x68(%rsp),%rdx
  0x00007f75705947b8: mov    0x70(%rsp),%rcx
  0x00007f75705947bd: mov    0x78(%rsp),%rax
  0x00007f75705947c2: add    $0x80,%rsp
  0x00007f75705947c9: add    $0x8,%rsp
  0x00007f75705947cd: popfq  
  0x00007f75705947ce: mov    %r13,%rsp
  0x00007f75705947d1: pop    %rax
  0x00007f75705947d2: mov    %rsp,%r13
  0x00007f75705947d5: sub    $0x30,%rsp
  0x00007f75705947d9: mov    %rax,(%rsp)
  0x00007f75705947dd: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75705947e7: mov    %rax,0x20(%rsp)
  0x00007f75705947ec: mov    %rsi,0x18(%rsp)
  0x00007f75705947f1: mov    %rdx,0x10(%rsp)
  0x00007f75705947f6: mov    %ecx,0x8(%rsp)
  0x00007f75705947fa: mov    0x40(%rbx),%rcx
  0x00007f75705947fe: jmpq   *%rcx

Decoding RuntimeStub - g1_pre_barrier_slow Runtime1 stub 0x00007f75705942d0
  0x00007f7570594360: push   %rbp
  0x00007f7570594361: mov    %rsp,%rbp
  0x00007f7570594364: movabs $0x1e,%rax
  0x00007f757059436e: mov    %rax,%rsi
  0x00007f7570594371: mov    %r15,%rdi
  0x00007f7570594374: mov    %rbp,0x210(%r15)
  0x00007f757059437b: mov    %rsp,0x200(%r15)
  0x00007f7570594382: callq  0x00007f7584e51a6e
  0x00007f7570594387: push   %rax
  0x00007f7570594388: push   %rdi
  0x00007f7570594389: push   %rsi
  0x00007f757059438a: push   %rdx
  0x00007f757059438b: push   %rcx
  0x00007f757059438c: push   %r8
  0x00007f757059438e: push   %r9
  0x00007f7570594390: push   %r10
  0x00007f7570594392: mov    %rsp,%r10
  0x00007f7570594395: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594399: push   %r10
  0x00007f757059439b: push   %r11
  0x00007f757059439d: mov    $0x1,%edi
  0x00007f75705943a2: callq  0x00007f7585f5a2d0
  0x00007f75705943a7: pop    %r11
  0x00007f75705943a9: pop    %rsp
  0x00007f75705943aa: pop    %r10
  0x00007f75705943ac: pop    %r9
  0x00007f75705943ae: pop    %r8
  0x00007f75705943b0: pop    %rcx
  0x00007f75705943b1: pop    %rdx
  0x00007f75705943b2: pop    %rsi
  0x00007f75705943b3: pop    %rdi
  0x00007f75705943b4: cmp    %rax,%r15
  0x00007f75705943b7: je     0x00007f7570594439
  0x00007f75705943bd: callq  0x00007f7585459a22
  0x00007f75705943c2: mov    %rsp,-0x28(%rsp)
  0x00007f75705943c7: sub    $0x80,%rsp
  0x00007f75705943ce: mov    %rax,0x78(%rsp)
  0x00007f75705943d3: mov    %rcx,0x70(%rsp)
  0x00007f75705943d8: mov    %rdx,0x68(%rsp)
  0x00007f75705943dd: mov    %rbx,0x60(%rsp)
  0x00007f75705943e2: mov    %rbp,0x50(%rsp)
  0x00007f75705943e7: mov    %rsi,0x48(%rsp)
  0x00007f75705943ec: mov    %rdi,0x40(%rsp)
  0x00007f75705943f1: mov    %r8,0x38(%rsp)
  0x00007f75705943f6: mov    %r9,0x30(%rsp)
  0x00007f75705943fb: mov    %r10,0x28(%rsp)
  0x00007f7570594400: mov    %r11,0x20(%rsp)
  0x00007f7570594405: mov    %r12,0x18(%rsp)
  0x00007f757059440a: mov    %r13,0x10(%rsp)
  0x00007f757059440f: mov    %r14,0x8(%rsp)
  0x00007f7570594414: mov    %r15,(%rsp)
  0x00007f7570594418: movabs $0x7f75856f3278,%rdi
  0x00007f7570594422: movabs $0x7f75705943c2,%rsi
  0x00007f757059442c: mov    %rsp,%rdx
  0x00007f757059442f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594433: callq  0x00007f75853729fa
  0x00007f7570594438: hlt    
  0x00007f7570594439: pop    %rax
  0x00007f757059443a: movabs $0x0,%r10
  0x00007f7570594444: mov    %r10,0x200(%r15)
  0x00007f757059444b: movabs $0x0,%r10
  0x00007f7570594455: mov    %r10,0x210(%r15)
  0x00007f757059445c: movabs $0x0,%r10
  0x00007f7570594466: mov    %r10,0x208(%r15)
  0x00007f757059446d: cmpq   $0x0,0x8(%r15)
  0x00007f7570594475: je     0x00007f7570594485
  0x00007f757059447b: mov    0x8(%r15),%rax
  0x00007f757059447f: leaveq 
  0x00007f7570594480: jmpq   Stub::forward exception
  0x00007f7570594485: mov    %rsp,-0x28(%rsp)
  0x00007f757059448a: sub    $0x80,%rsp
  0x00007f7570594491: mov    %rax,0x78(%rsp)
  0x00007f7570594496: mov    %rcx,0x70(%rsp)
  0x00007f757059449b: mov    %rdx,0x68(%rsp)
  0x00007f75705944a0: mov    %rbx,0x60(%rsp)
  0x00007f75705944a5: mov    %rbp,0x50(%rsp)
  0x00007f75705944aa: mov    %rsi,0x48(%rsp)
  0x00007f75705944af: mov    %rdi,0x40(%rsp)
  0x00007f75705944b4: mov    %r8,0x38(%rsp)
  0x00007f75705944b9: mov    %r9,0x30(%rsp)
  0x00007f75705944be: mov    %r10,0x28(%rsp)
  0x00007f75705944c3: mov    %r11,0x20(%rsp)
  0x00007f75705944c8: mov    %r12,0x18(%rsp)
  0x00007f75705944cd: mov    %r13,0x10(%rsp)
  0x00007f75705944d2: mov    %r14,0x8(%rsp)
  0x00007f75705944d7: mov    %r15,(%rsp)
  0x00007f75705944db: movabs $0x7f75856bea2b,%rdi
  0x00007f75705944e5: movabs $0x7f7570594485,%rsi
  0x00007f75705944ef: mov    %rsp,%rdx
  0x00007f75705944f2: and    $0xfffffffffffffff0,%rsp
  0x00007f75705944f6: callq  0x00007f75853729fa
  0x00007f75705944fb: hlt    
  0x00007f75705944fc: leaveq 
  0x00007f75705944fd: retq   
  0x00007f75705944fe: nop
  0x00007f75705944ff: nop

AHE@0x00007f758012d278: 0xbebebebaa0000000 i2c: 0x00007f7570594020 c2i: 0x00007f757059416d c2iUV: 0x00007f7570594140
i2c argument handler #123 for: static (JJJ[BII)I (665 bytes generated)
c2i argument handler starts at 0x7f757059416d
  0x00007f7570594020: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570594024: movabs $0x7f757036e3e0,%r11
  0x00007f757059402e: cmp    %r11,%rax
  0x00007f7570594031: jbe    0x00007f757059404a
  0x00007f7570594037: movabs $0x7f757046e3e0,%r11
  0x00007f7570594041: cmp    %r11,%rax
  0x00007f7570594044: jb     0x00007f757059410d
  0x00007f757059404a: movabs $0x7f7570369420,%r11
  0x00007f7570594054: cmp    %r11,%rax
  0x00007f7570594057: jbe    0x00007f7570594070
  0x00007f757059405d: movabs $0x7f757036de58,%r11
  0x00007f7570594067: cmp    %r11,%rax
  0x00007f757059406a: jb     0x00007f757059410d
  0x00007f7570594070: movabs $0x7f75704a9820,%r11
  0x00007f757059407a: cmp    %r11,%rax
  0x00007f757059407d: jbe    0x00007f7570594096
  0x00007f7570594083: movabs $0x7f75704af5e0,%r11
  0x00007f757059408d: cmp    %r11,%rax
  0x00007f7570594090: jb     0x00007f757059410d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570594096: mov    %rsp,-0x28(%rsp)
  0x00007f757059409b: sub    $0x80,%rsp
  0x00007f75705940a2: mov    %rax,0x78(%rsp)
  0x00007f75705940a7: mov    %rcx,0x70(%rsp)
  0x00007f75705940ac: mov    %rdx,0x68(%rsp)
  0x00007f75705940b1: mov    %rbx,0x60(%rsp)
  0x00007f75705940b6: mov    %rbp,0x50(%rsp)
  0x00007f75705940bb: mov    %rsi,0x48(%rsp)
  0x00007f75705940c0: mov    %rdi,0x40(%rsp)
  0x00007f75705940c5: mov    %r8,0x38(%rsp)
  0x00007f75705940ca: mov    %r9,0x30(%rsp)
  0x00007f75705940cf: mov    %r10,0x28(%rsp)
  0x00007f75705940d4: mov    %r11,0x20(%rsp)
  0x00007f75705940d9: mov    %r12,0x18(%rsp)
  0x00007f75705940de: mov    %r13,0x10(%rsp)
  0x00007f75705940e3: mov    %r14,0x8(%rsp)
  0x00007f75705940e8: mov    %r15,(%rsp)
  0x00007f75705940ec: movabs $0x7f758592f470,%rdi
  0x00007f75705940f6: movabs $0x7f7570594096,%rsi
  0x00007f7570594100: mov    %rsp,%rdx
  0x00007f7570594103: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594107: callq  0x00007f75853729fa
  0x00007f757059410c: hlt    
  ;; } verify_i2ce 
  0x00007f757059410d: mov    %rsp,%r11
  0x00007f7570594110: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594114: push   %rax
  0x00007f7570594115: mov    %r11,%rax
  0x00007f7570594118: mov    0x50(%rbx),%r11
  0x00007f757059411c: mov    0x40(%rax),%rsi
  0x00007f7570594120: mov    0x30(%rax),%rdx
  0x00007f7570594124: mov    0x20(%rax),%rcx
  0x00007f7570594128: mov    0x18(%rax),%r8
  0x00007f757059412c: mov    0x10(%rax),%r9d
  0x00007f7570594130: mov    0x8(%rax),%edi
  0x00007f7570594133: mov    %rbx,0x258(%r15)
  0x00007f757059413a: mov    %rbx,%rax
  0x00007f757059413d: jmpq   *%r11
  0x00007f7570594140: mov    0x8(%rsi),%ebx
  0x00007f7570594143: shl    $0x3,%rbx
  0x00007f7570594147: cmp    0x10(%rax),%rbx
  0x00007f757059414b: mov    0x8(%rax),%rbx
  0x00007f757059414f: je     0x00007f757059415a
  0x00007f7570594155: jmpq   0x00007f757046ec40
  0x00007f757059415a: cmpq   $0x0,0x58(%rbx)
  0x00007f7570594162: je     0x00007f757059425d
  0x00007f7570594168: jmpq   0x00007f757046ec40
  0x00007f757059416d: cmpq   $0x0,0x58(%rbx)
  0x00007f7570594175: je     0x00007f757059425d
  0x00007f757059417b: mov    %rsp,%r13
  0x00007f757059417e: mov    (%rsp),%rax
  0x00007f7570594182: and    $0xfffffffffffffff0,%rsp
  0x00007f7570594186: pushfq 
  0x00007f7570594187: sub    $0x8,%rsp
  0x00007f757059418b: mov    %rsp,-0x28(%rsp)
  0x00007f7570594190: sub    $0x80,%rsp
  0x00007f7570594197: mov    %rax,0x78(%rsp)
  0x00007f757059419c: mov    %rcx,0x70(%rsp)
  0x00007f75705941a1: mov    %rdx,0x68(%rsp)
  0x00007f75705941a6: mov    %rbx,0x60(%rsp)
  0x00007f75705941ab: mov    %rbp,0x50(%rsp)
  0x00007f75705941b0: mov    %rsi,0x48(%rsp)
  0x00007f75705941b5: mov    %rdi,0x40(%rsp)
  0x00007f75705941ba: mov    %r8,0x38(%rsp)
  0x00007f75705941bf: mov    %r9,0x30(%rsp)
  0x00007f75705941c4: mov    %r10,0x28(%rsp)
  0x00007f75705941c9: mov    %r11,0x20(%rsp)
  0x00007f75705941ce: mov    %r12,0x18(%rsp)
  0x00007f75705941d3: mov    %r13,0x10(%rsp)
  0x00007f75705941d8: mov    %r14,0x8(%rsp)
  0x00007f75705941dd: mov    %r15,(%rsp)
  0x00007f75705941e1: sub    $0x200,%rsp
  0x00007f75705941e8: fxsave64 (%rsp)
  0x00007f75705941ed: mov    %rbx,%rdi
  0x00007f75705941f0: mov    %rax,%rsi
  0x00007f75705941f3: callq  0x00007f7585522bca
  0x00007f75705941f8: fxrstor64 (%rsp)
  0x00007f75705941fd: add    $0x200,%rsp
  0x00007f7570594204: mov    (%rsp),%r15
  0x00007f7570594208: mov    0x8(%rsp),%r14
  0x00007f757059420d: mov    0x10(%rsp),%r13
  0x00007f7570594212: mov    0x18(%rsp),%r12
  0x00007f7570594217: mov    0x20(%rsp),%r11
  0x00007f757059421c: mov    0x28(%rsp),%r10
  0x00007f7570594221: mov    0x30(%rsp),%r9
  0x00007f7570594226: mov    0x38(%rsp),%r8
  0x00007f757059422b: mov    0x40(%rsp),%rdi
  0x00007f7570594230: mov    0x48(%rsp),%rsi
  0x00007f7570594235: mov    0x50(%rsp),%rbp
  0x00007f757059423a: mov    0x60(%rsp),%rbx
  0x00007f757059423f: mov    0x68(%rsp),%rdx
  0x00007f7570594244: mov    0x70(%rsp),%rcx
  0x00007f7570594249: mov    0x78(%rsp),%rax
  0x00007f757059424e: add    $0x80,%rsp
  0x00007f7570594255: add    $0x8,%rsp
  0x00007f7570594259: popfq  
  0x00007f757059425a: mov    %r13,%rsp
  0x00007f757059425d: pop    %rax
  0x00007f757059425e: mov    %rsp,%r13
  0x00007f7570594261: sub    $0x50,%rsp
  0x00007f7570594265: mov    %rax,(%rsp)
  0x00007f7570594269: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570594273: mov    %rax,0x48(%rsp)
  0x00007f7570594278: mov    %rsi,0x40(%rsp)
  0x00007f757059427d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570594287: mov    %rax,0x38(%rsp)
  0x00007f757059428c: mov    %rdx,0x30(%rsp)
  0x00007f7570594291: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059429b: mov    %rax,0x28(%rsp)
  0x00007f75705942a0: mov    %rcx,0x20(%rsp)
  0x00007f75705942a5: mov    %r8,0x18(%rsp)
  0x00007f75705942aa: mov    %r9d,0x10(%rsp)
  0x00007f75705942af: mov    %edi,0x8(%rsp)
  0x00007f75705942b3: mov    0x40(%rbx),%rcx
  0x00007f75705942b7: jmpq   *%rcx

Decoding RuntimeStub - g1_post_barrier_slow Runtime1 stub 0x00007f7570593c50
  0x00007f7570593cc0: push   %rbp
  0x00007f7570593cc1: mov    %rsp,%rbp
  0x00007f7570593cc4: push   %rax
  0x00007f7570593cc5: push   %rcx
  0x00007f7570593cc6: mov    0x10(%rbp),%rcx
  0x00007f7570593cca: shr    $0x9,%rcx
  0x00007f7570593cce: movabs $0x7f756f386000,%rax
  0x00007f7570593cd8: add    %rax,%rcx
  0x00007f7570593cdb: cmpb   $0x20,(%rcx)
  0x00007f7570593cde: je     0x00007f7570593f64
  0x00007f7570593ce4: lock addl $0x0,(%rsp)
  0x00007f7570593ce9: cmpb   $0x0,(%rcx)
  0x00007f7570593cec: je     0x00007f7570593f64
  0x00007f7570593cf2: movb   $0x0,(%rcx)
  0x00007f7570593cf5: cmpl   $0x0,0x568(%r15)
  0x00007f7570593d00: je     0x00007f7570593d29
  0x00007f7570593d06: subl   $0x8,0x568(%r15)
  0x00007f7570593d0e: push   %rbx
  0x00007f7570593d0f: mov    0x560(%r15),%rbx
  0x00007f7570593d16: movslq 0x568(%r15),%r10
  0x00007f7570593d1d: add    %r10,%rbx
  0x00007f7570593d20: mov    %rcx,(%rbx)
  0x00007f7570593d23: pop    %rbx
  0x00007f7570593d24: jmpq   0x00007f7570593f64
  0x00007f7570593d29: push   %rdx
  ;; save_live_registers
  0x00007f7570593d2a: mov    %rsp,-0x28(%rsp)
  0x00007f7570593d2f: sub    $0x80,%rsp
  0x00007f7570593d36: mov    %rax,0x78(%rsp)
  0x00007f7570593d3b: mov    %rcx,0x70(%rsp)
  0x00007f7570593d40: mov    %rdx,0x68(%rsp)
  0x00007f7570593d45: mov    %rbx,0x60(%rsp)
  0x00007f7570593d4a: mov    %rbp,0x50(%rsp)
  0x00007f7570593d4f: mov    %rsi,0x48(%rsp)
  0x00007f7570593d54: mov    %rdi,0x40(%rsp)
  0x00007f7570593d59: mov    %r8,0x38(%rsp)
  0x00007f7570593d5e: mov    %r9,0x30(%rsp)
  0x00007f7570593d63: mov    %r10,0x28(%rsp)
  0x00007f7570593d68: mov    %r11,0x20(%rsp)
  0x00007f7570593d6d: mov    %r12,0x18(%rsp)
  0x00007f7570593d72: mov    %r13,0x10(%rsp)
  0x00007f7570593d77: mov    %r14,0x8(%rsp)
  0x00007f7570593d7c: mov    %r15,(%rsp)
  0x00007f7570593d80: sub    $0x150,%rsp
  0x00007f7570593d87: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570593d93: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570593d99: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570593d9f: vmovsd %xmm2,0x18(%rsp)
  0x00007f7570593da5: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570593dab: vmovsd %xmm4,0x28(%rsp)
  0x00007f7570593db1: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570593db7: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570593dbd: vmovsd %xmm7,0x40(%rsp)
  0x00007f7570593dc3: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570593dc9: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570593dcf: vmovsd %xmm10,0x58(%rsp)
  0x00007f7570593dd5: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570593ddb: vmovsd %xmm12,0x68(%rsp)
  0x00007f7570593de1: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570593de7: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570593ded: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570593df6: mov    %r15,%rsi
  0x00007f7570593df9: mov    %rcx,%rdi
  0x00007f7570593dfc: test   $0xf,%esp
  0x00007f7570593e02: je     0x00007f7570593e1a
  0x00007f7570593e08: sub    $0x8,%rsp
  0x00007f7570593e0c: callq  0x00007f758551b47e
  0x00007f7570593e11: add    $0x8,%rsp
  0x00007f7570593e15: jmpq   0x00007f7570593e1f
  0x00007f7570593e1a: callq  0x00007f758551b47e
  ;; restore_live_registers
  0x00007f7570593e1f: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570593e25: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570593e2b: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570593e31: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570593e37: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570593e3d: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570593e43: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570593e49: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570593e4f: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570593e55: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570593e5b: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570593e61: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570593e67: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570593e6d: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570593e73: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570593e79: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570593e82: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570593e8e: je     0x00007f7570593f0b
  0x00007f7570593e94: mov    %rsp,-0x28(%rsp)
  0x00007f7570593e99: sub    $0x80,%rsp
  0x00007f7570593ea0: mov    %rax,0x78(%rsp)
  0x00007f7570593ea5: mov    %rcx,0x70(%rsp)
  0x00007f7570593eaa: mov    %rdx,0x68(%rsp)
  0x00007f7570593eaf: mov    %rbx,0x60(%rsp)
  0x00007f7570593eb4: mov    %rbp,0x50(%rsp)
  0x00007f7570593eb9: mov    %rsi,0x48(%rsp)
  0x00007f7570593ebe: mov    %rdi,0x40(%rsp)
  0x00007f7570593ec3: mov    %r8,0x38(%rsp)
  0x00007f7570593ec8: mov    %r9,0x30(%rsp)
  0x00007f7570593ecd: mov    %r10,0x28(%rsp)
  0x00007f7570593ed2: mov    %r11,0x20(%rsp)
  0x00007f7570593ed7: mov    %r12,0x18(%rsp)
  0x00007f7570593edc: mov    %r13,0x10(%rsp)
  0x00007f7570593ee1: mov    %r14,0x8(%rsp)
  0x00007f7570593ee6: mov    %r15,(%rsp)
  0x00007f7570593eea: movabs $0x7f75856f340f,%rdi
  0x00007f7570593ef4: movabs $0x7f7570593e94,%rsi
  0x00007f7570593efe: mov    %rsp,%rdx
  0x00007f7570593f01: and    $0xfffffffffffffff0,%rsp
  0x00007f7570593f05: callq  0x00007f75853729fa
  0x00007f7570593f0a: hlt    
  0x00007f7570593f0b: add    $0x150,%rsp
  0x00007f7570593f12: mov    (%rsp),%r15
  0x00007f7570593f16: mov    0x8(%rsp),%r14
  0x00007f7570593f1b: mov    0x10(%rsp),%r13
  0x00007f7570593f20: mov    0x18(%rsp),%r12
  0x00007f7570593f25: mov    0x20(%rsp),%r11
  0x00007f7570593f2a: mov    0x28(%rsp),%r10
  0x00007f7570593f2f: mov    0x30(%rsp),%r9
  0x00007f7570593f34: mov    0x38(%rsp),%r8
  0x00007f7570593f39: mov    0x40(%rsp),%rdi
  0x00007f7570593f3e: mov    0x48(%rsp),%rsi
  0x00007f7570593f43: mov    0x50(%rsp),%rbp
  0x00007f7570593f48: mov    0x60(%rsp),%rbx
  0x00007f7570593f4d: mov    0x68(%rsp),%rdx
  0x00007f7570593f52: mov    0x70(%rsp),%rcx
  0x00007f7570593f57: mov    0x78(%rsp),%rax
  0x00007f7570593f5c: add    $0x80,%rsp
  0x00007f7570593f63: pop    %rdx
  0x00007f7570593f64: pop    %rcx
  0x00007f7570593f65: pop    %rax
  0x00007f7570593f66: leaveq 
  0x00007f7570593f67: retq   

AHE@0x00007f758012d2c0: 0xbbaaba00 i2c: 0x00007f75705950a0 c2i: 0x00007f75705951ec c2iUV: 0x00007f75705951bf
i2c argument handler #124 for: receiver (Ljava/lang/String;II[BI)Ljava/nio/ByteBuffer; (618 bytes generated)
c2i argument handler starts at 0x7f75705951ec
  0x00007f75705950a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705950a4: movabs $0x7f757036e3e0,%r11
  0x00007f75705950ae: cmp    %r11,%rax
  0x00007f75705950b1: jbe    0x00007f75705950ca
  0x00007f75705950b7: movabs $0x7f757046e3e0,%r11
  0x00007f75705950c1: cmp    %r11,%rax
  0x00007f75705950c4: jb     0x00007f757059518d
  0x00007f75705950ca: movabs $0x7f7570369420,%r11
  0x00007f75705950d4: cmp    %r11,%rax
  0x00007f75705950d7: jbe    0x00007f75705950f0
  0x00007f75705950dd: movabs $0x7f757036de58,%r11
  0x00007f75705950e7: cmp    %r11,%rax
  0x00007f75705950ea: jb     0x00007f757059518d
  0x00007f75705950f0: movabs $0x7f75704a9820,%r11
  0x00007f75705950fa: cmp    %r11,%rax
  0x00007f75705950fd: jbe    0x00007f7570595116
  0x00007f7570595103: movabs $0x7f75704af5e0,%r11
  0x00007f757059510d: cmp    %r11,%rax
  0x00007f7570595110: jb     0x00007f757059518d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570595116: mov    %rsp,-0x28(%rsp)
  0x00007f757059511b: sub    $0x80,%rsp
  0x00007f7570595122: mov    %rax,0x78(%rsp)
  0x00007f7570595127: mov    %rcx,0x70(%rsp)
  0x00007f757059512c: mov    %rdx,0x68(%rsp)
  0x00007f7570595131: mov    %rbx,0x60(%rsp)
  0x00007f7570595136: mov    %rbp,0x50(%rsp)
  0x00007f757059513b: mov    %rsi,0x48(%rsp)
  0x00007f7570595140: mov    %rdi,0x40(%rsp)
  0x00007f7570595145: mov    %r8,0x38(%rsp)
  0x00007f757059514a: mov    %r9,0x30(%rsp)
  0x00007f757059514f: mov    %r10,0x28(%rsp)
  0x00007f7570595154: mov    %r11,0x20(%rsp)
  0x00007f7570595159: mov    %r12,0x18(%rsp)
  0x00007f757059515e: mov    %r13,0x10(%rsp)
  0x00007f7570595163: mov    %r14,0x8(%rsp)
  0x00007f7570595168: mov    %r15,(%rsp)
  0x00007f757059516c: movabs $0x7f758592f470,%rdi
  0x00007f7570595176: movabs $0x7f7570595116,%rsi
  0x00007f7570595180: mov    %rsp,%rdx
  0x00007f7570595183: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595187: callq  0x00007f75853729fa
  0x00007f757059518c: hlt    
  ;; } verify_i2ce 
  0x00007f757059518d: mov    %rsp,%r11
  0x00007f7570595190: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595194: push   %rax
  0x00007f7570595195: mov    %r11,%rax
  0x00007f7570595198: mov    0x50(%rbx),%r11
  0x00007f757059519c: mov    0x30(%rax),%rsi
  0x00007f75705951a0: mov    0x28(%rax),%rdx
  0x00007f75705951a4: mov    0x20(%rax),%ecx
  0x00007f75705951a7: mov    0x18(%rax),%r8d
  0x00007f75705951ab: mov    0x10(%rax),%r9
  0x00007f75705951af: mov    0x8(%rax),%edi
  0x00007f75705951b2: mov    %rbx,0x258(%r15)
  0x00007f75705951b9: mov    %rbx,%rax
  0x00007f75705951bc: jmpq   *%r11
  0x00007f75705951bf: mov    0x8(%rsi),%ebx
  0x00007f75705951c2: shl    $0x3,%rbx
  0x00007f75705951c6: cmp    0x10(%rax),%rbx
  0x00007f75705951ca: mov    0x8(%rax),%rbx
  0x00007f75705951ce: je     0x00007f75705951d9
  0x00007f75705951d4: jmpq   0x00007f757046ec40
  0x00007f75705951d9: cmpq   $0x0,0x58(%rbx)
  0x00007f75705951e1: je     0x00007f75705952dc
  0x00007f75705951e7: jmpq   0x00007f757046ec40
  0x00007f75705951ec: cmpq   $0x0,0x58(%rbx)
  0x00007f75705951f4: je     0x00007f75705952dc
  0x00007f75705951fa: mov    %rsp,%r13
  0x00007f75705951fd: mov    (%rsp),%rax
  0x00007f7570595201: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595205: pushfq 
  0x00007f7570595206: sub    $0x8,%rsp
  0x00007f757059520a: mov    %rsp,-0x28(%rsp)
  0x00007f757059520f: sub    $0x80,%rsp
  0x00007f7570595216: mov    %rax,0x78(%rsp)
  0x00007f757059521b: mov    %rcx,0x70(%rsp)
  0x00007f7570595220: mov    %rdx,0x68(%rsp)
  0x00007f7570595225: mov    %rbx,0x60(%rsp)
  0x00007f757059522a: mov    %rbp,0x50(%rsp)
  0x00007f757059522f: mov    %rsi,0x48(%rsp)
  0x00007f7570595234: mov    %rdi,0x40(%rsp)
  0x00007f7570595239: mov    %r8,0x38(%rsp)
  0x00007f757059523e: mov    %r9,0x30(%rsp)
  0x00007f7570595243: mov    %r10,0x28(%rsp)
  0x00007f7570595248: mov    %r11,0x20(%rsp)
  0x00007f757059524d: mov    %r12,0x18(%rsp)
  0x00007f7570595252: mov    %r13,0x10(%rsp)
  0x00007f7570595257: mov    %r14,0x8(%rsp)
  0x00007f757059525c: mov    %r15,(%rsp)
  0x00007f7570595260: sub    $0x200,%rsp
  0x00007f7570595267: fxsave64 (%rsp)
  0x00007f757059526c: mov    %rbx,%rdi
  0x00007f757059526f: mov    %rax,%rsi
  0x00007f7570595272: callq  0x00007f7585522bca
  0x00007f7570595277: fxrstor64 (%rsp)
  0x00007f757059527c: add    $0x200,%rsp
  0x00007f7570595283: mov    (%rsp),%r15
  0x00007f7570595287: mov    0x8(%rsp),%r14
  0x00007f757059528c: mov    0x10(%rsp),%r13
  0x00007f7570595291: mov    0x18(%rsp),%r12
  0x00007f7570595296: mov    0x20(%rsp),%r11
  0x00007f757059529b: mov    0x28(%rsp),%r10
  0x00007f75705952a0: mov    0x30(%rsp),%r9
  0x00007f75705952a5: mov    0x38(%rsp),%r8
  0x00007f75705952aa: mov    0x40(%rsp),%rdi
  0x00007f75705952af: mov    0x48(%rsp),%rsi
  0x00007f75705952b4: mov    0x50(%rsp),%rbp
  0x00007f75705952b9: mov    0x60(%rsp),%rbx
  0x00007f75705952be: mov    0x68(%rsp),%rdx
  0x00007f75705952c3: mov    0x70(%rsp),%rcx
  0x00007f75705952c8: mov    0x78(%rsp),%rax
  0x00007f75705952cd: add    $0x80,%rsp
  0x00007f75705952d4: add    $0x8,%rsp
  0x00007f75705952d8: popfq  
  0x00007f75705952d9: mov    %r13,%rsp
  0x00007f75705952dc: pop    %rax
  0x00007f75705952dd: mov    %rsp,%r13
  0x00007f75705952e0: sub    $0x40,%rsp
  0x00007f75705952e4: mov    %rax,(%rsp)
  0x00007f75705952e8: mov    %rsi,0x30(%rsp)
  0x00007f75705952ed: mov    %rdx,0x28(%rsp)
  0x00007f75705952f2: mov    %ecx,0x20(%rsp)
  0x00007f75705952f6: mov    %r8d,0x18(%rsp)
  0x00007f75705952fb: mov    %r9,0x10(%rsp)
  0x00007f7570595300: mov    %edi,0x8(%rsp)
  0x00007f7570595304: mov    0x40(%rbx),%rcx
  0x00007f7570595308: jmpq   *%rcx

Decoding RuntimeStub - fpu2long_stub Runtime1 stub 0x00007f7570592010
  0x00007f7570592060: push   %rsi
  0x00007f7570592061: push   %rcx
  0x00007f7570592062: push   %rdx
  0x00007f7570592063: sub    $0x20,%rsp
  0x00007f7570592067: fstl   0x8(%rsp)
  0x00007f757059206b: mov    0xc(%rsp),%eax
  0x00007f757059206f: and    $0x7ff00000,%eax
  0x00007f7570592075: cmp    $0x7ff00000,%eax
  0x00007f757059207b: jne    0x00007f7570592095
  0x00007f7570592081: mov    0xc(%rsp),%eax
  0x00007f7570592085: and    $0xfffff,%eax
  0x00007f757059208b: or     0x8(%rsp),%eax
  0x00007f757059208f: jne    0x00007f7570592104
  0x00007f7570592095: fstcw  (%rsp)
  0x00007f7570592099: movzwl (%rsp),%eax
  0x00007f757059209d: or     $0xc00,%eax
  0x00007f75705920a3: mov    %ax,0x2(%rsp)
  0x00007f75705920a8: fldcw  0x2(%rsp)
  0x00007f75705920ac: fistpll 0x18(%rsp)
  0x00007f75705920b1: fldcw  (%rsp)
  0x00007f75705920b4: fwait
  0x00007f75705920b5: mov    0x18(%rsp),%rax
  0x00007f75705920ba: mov    0x1c(%rsp),%edx
  0x00007f75705920be: mov    %rax,%rcx
  0x00007f75705920c1: xor    $0x0,%ecx
  0x00007f75705920c4: mov    $0x80000000,%esi
  0x00007f75705920c9: xor    %edx,%esi
  0x00007f75705920cb: or     %esi,%ecx
  0x00007f75705920cd: jne    0x00007f757059210b
  0x00007f75705920d3: fldz   
  0x00007f75705920d5: fcompl 0x8(%rsp)
  0x00007f75705920d9: fnstsw %ax
  0x00007f75705920db: test   $0x4100,%eax
  0x00007f75705920e0: je     0x00007f75705920f5
  0x00007f75705920e6: movabs $0x7fffffffffffffff,%rax
  0x00007f75705920f0: jmpq   0x00007f757059210b
  0x00007f75705920f5: movabs $0x8000000000000000,%rax
  0x00007f75705920ff: jmpq   0x00007f757059210b
  0x00007f7570592104: ffree  %st(0)
  0x00007f7570592106: fincstp 
  0x00007f7570592108: xor    %rax,%rax
  0x00007f757059210b: add    $0x20,%rsp
  0x00007f757059210f: pop    %rdx
  0x00007f7570592110: pop    %rcx
  0x00007f7570592111: pop    %rsi
  0x00007f7570592112: retq   
  0x00007f7570592113: nop
  0x00007f7570592114: nop
  0x00007f7570592115: nop
  0x00007f7570592116: nop
  0x00007f7570592117: nop

AHE@0x00007f758012d308: 0xbbaabe00 i2c: 0x00007f75705953e0 c2i: 0x00007f7570595529 c2iUV: 0x00007f75705954fc
i2c argument handler #125 for: receiver (Ljava/lang/String;IIJ)Ljava/nio/ByteBuffer; (626 bytes generated)
c2i argument handler starts at 0x7f7570595529
  0x00007f75705953e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705953e4: movabs $0x7f757036e3e0,%r11
  0x00007f75705953ee: cmp    %r11,%rax
  0x00007f75705953f1: jbe    0x00007f757059540a
  0x00007f75705953f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570595401: cmp    %r11,%rax
  0x00007f7570595404: jb     0x00007f75705954cd
  0x00007f757059540a: movabs $0x7f7570369420,%r11
  0x00007f7570595414: cmp    %r11,%rax
  0x00007f7570595417: jbe    0x00007f7570595430
  0x00007f757059541d: movabs $0x7f757036de58,%r11
  0x00007f7570595427: cmp    %r11,%rax
  0x00007f757059542a: jb     0x00007f75705954cd
  0x00007f7570595430: movabs $0x7f75704a9820,%r11
  0x00007f757059543a: cmp    %r11,%rax
  0x00007f757059543d: jbe    0x00007f7570595456
  0x00007f7570595443: movabs $0x7f75704af5e0,%r11
  0x00007f757059544d: cmp    %r11,%rax
  0x00007f7570595450: jb     0x00007f75705954cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570595456: mov    %rsp,-0x28(%rsp)
  0x00007f757059545b: sub    $0x80,%rsp
  0x00007f7570595462: mov    %rax,0x78(%rsp)
  0x00007f7570595467: mov    %rcx,0x70(%rsp)
  0x00007f757059546c: mov    %rdx,0x68(%rsp)
  0x00007f7570595471: mov    %rbx,0x60(%rsp)
  0x00007f7570595476: mov    %rbp,0x50(%rsp)
  0x00007f757059547b: mov    %rsi,0x48(%rsp)
  0x00007f7570595480: mov    %rdi,0x40(%rsp)
  0x00007f7570595485: mov    %r8,0x38(%rsp)
  0x00007f757059548a: mov    %r9,0x30(%rsp)
  0x00007f757059548f: mov    %r10,0x28(%rsp)
  0x00007f7570595494: mov    %r11,0x20(%rsp)
  0x00007f7570595499: mov    %r12,0x18(%rsp)
  0x00007f757059549e: mov    %r13,0x10(%rsp)
  0x00007f75705954a3: mov    %r14,0x8(%rsp)
  0x00007f75705954a8: mov    %r15,(%rsp)
  0x00007f75705954ac: movabs $0x7f758592f470,%rdi
  0x00007f75705954b6: movabs $0x7f7570595456,%rsi
  0x00007f75705954c0: mov    %rsp,%rdx
  0x00007f75705954c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75705954c7: callq  0x00007f75853729fa
  0x00007f75705954cc: hlt    
  ;; } verify_i2ce 
  0x00007f75705954cd: mov    %rsp,%r11
  0x00007f75705954d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75705954d4: push   %rax
  0x00007f75705954d5: mov    %r11,%rax
  0x00007f75705954d8: mov    0x50(%rbx),%r11
  0x00007f75705954dc: mov    0x30(%rax),%rsi
  0x00007f75705954e0: mov    0x28(%rax),%rdx
  0x00007f75705954e4: mov    0x20(%rax),%ecx
  0x00007f75705954e7: mov    0x18(%rax),%r8d
  0x00007f75705954eb: mov    0x8(%rax),%r9
  0x00007f75705954ef: mov    %rbx,0x258(%r15)
  0x00007f75705954f6: mov    %rbx,%rax
  0x00007f75705954f9: jmpq   *%r11
  0x00007f75705954fc: mov    0x8(%rsi),%ebx
  0x00007f75705954ff: shl    $0x3,%rbx
  0x00007f7570595503: cmp    0x10(%rax),%rbx
  0x00007f7570595507: mov    0x8(%rax),%rbx
  0x00007f757059550b: je     0x00007f7570595516
  0x00007f7570595511: jmpq   0x00007f757046ec40
  0x00007f7570595516: cmpq   $0x0,0x58(%rbx)
  0x00007f757059551e: je     0x00007f7570595619
  0x00007f7570595524: jmpq   0x00007f757046ec40
  0x00007f7570595529: cmpq   $0x0,0x58(%rbx)
  0x00007f7570595531: je     0x00007f7570595619
  0x00007f7570595537: mov    %rsp,%r13
  0x00007f757059553a: mov    (%rsp),%rax
  0x00007f757059553e: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595542: pushfq 
  0x00007f7570595543: sub    $0x8,%rsp
  0x00007f7570595547: mov    %rsp,-0x28(%rsp)
  0x00007f757059554c: sub    $0x80,%rsp
  0x00007f7570595553: mov    %rax,0x78(%rsp)
  0x00007f7570595558: mov    %rcx,0x70(%rsp)
  0x00007f757059555d: mov    %rdx,0x68(%rsp)
  0x00007f7570595562: mov    %rbx,0x60(%rsp)
  0x00007f7570595567: mov    %rbp,0x50(%rsp)
  0x00007f757059556c: mov    %rsi,0x48(%rsp)
  0x00007f7570595571: mov    %rdi,0x40(%rsp)
  0x00007f7570595576: mov    %r8,0x38(%rsp)
  0x00007f757059557b: mov    %r9,0x30(%rsp)
  0x00007f7570595580: mov    %r10,0x28(%rsp)
  0x00007f7570595585: mov    %r11,0x20(%rsp)
  0x00007f757059558a: mov    %r12,0x18(%rsp)
  0x00007f757059558f: mov    %r13,0x10(%rsp)
  0x00007f7570595594: mov    %r14,0x8(%rsp)
  0x00007f7570595599: mov    %r15,(%rsp)
  0x00007f757059559d: sub    $0x200,%rsp
  0x00007f75705955a4: fxsave64 (%rsp)
  0x00007f75705955a9: mov    %rbx,%rdi
  0x00007f75705955ac: mov    %rax,%rsi
  0x00007f75705955af: callq  0x00007f7585522bca
  0x00007f75705955b4: fxrstor64 (%rsp)
  0x00007f75705955b9: add    $0x200,%rsp
  0x00007f75705955c0: mov    (%rsp),%r15
  0x00007f75705955c4: mov    0x8(%rsp),%r14
  0x00007f75705955c9: mov    0x10(%rsp),%r13
  0x00007f75705955ce: mov    0x18(%rsp),%r12
  0x00007f75705955d3: mov    0x20(%rsp),%r11
  0x00007f75705955d8: mov    0x28(%rsp),%r10
  0x00007f75705955dd: mov    0x30(%rsp),%r9
  0x00007f75705955e2: mov    0x38(%rsp),%r8
  0x00007f75705955e7: mov    0x40(%rsp),%rdi
  0x00007f75705955ec: mov    0x48(%rsp),%rsi
  0x00007f75705955f1: mov    0x50(%rsp),%rbp
  0x00007f75705955f6: mov    0x60(%rsp),%rbx
  0x00007f75705955fb: mov    0x68(%rsp),%rdx
  0x00007f7570595600: mov    0x70(%rsp),%rcx
  0x00007f7570595605: mov    0x78(%rsp),%rax
  0x00007f757059560a: add    $0x80,%rsp
  0x00007f7570595611: add    $0x8,%rsp
  0x00007f7570595615: popfq  
  0x00007f7570595616: mov    %r13,%rsp
  0x00007f7570595619: pop    %rax
  0x00007f757059561a: mov    %rsp,%r13
  0x00007f757059561d: sub    $0x40,%rsp
  0x00007f7570595621: mov    %rax,(%rsp)
  0x00007f7570595625: mov    %rsi,0x30(%rsp)
  0x00007f757059562a: mov    %rdx,0x28(%rsp)
  0x00007f757059562f: mov    %ecx,0x20(%rsp)
  0x00007f7570595633: mov    %r8d,0x18(%rsp)
  0x00007f7570595638: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570595642: mov    %rax,0x10(%rsp)
  0x00007f7570595647: mov    %r9,0x8(%rsp)
  0x00007f757059564c: mov    0x40(%rbx),%rcx
  0x00007f7570595650: jmpq   *%rcx

Decoding RuntimeStub - counter_overflow Runtime1 stub 0x00007f7570595690
  0x00007f7570595720: push   %rbp
  0x00007f7570595721: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f7570595724: mov    %rsp,-0x28(%rsp)
  0x00007f7570595729: sub    $0x80,%rsp
  0x00007f7570595730: mov    %rax,0x78(%rsp)
  0x00007f7570595735: mov    %rcx,0x70(%rsp)
  0x00007f757059573a: mov    %rdx,0x68(%rsp)
  0x00007f757059573f: mov    %rbx,0x60(%rsp)
  0x00007f7570595744: mov    %rbp,0x50(%rsp)
  0x00007f7570595749: mov    %rsi,0x48(%rsp)
  0x00007f757059574e: mov    %rdi,0x40(%rsp)
  0x00007f7570595753: mov    %r8,0x38(%rsp)
  0x00007f7570595758: mov    %r9,0x30(%rsp)
  0x00007f757059575d: mov    %r10,0x28(%rsp)
  0x00007f7570595762: mov    %r11,0x20(%rsp)
  0x00007f7570595767: mov    %r12,0x18(%rsp)
  0x00007f757059576c: mov    %r13,0x10(%rsp)
  0x00007f7570595771: mov    %r14,0x8(%rsp)
  0x00007f7570595776: mov    %r15,(%rsp)
  0x00007f757059577a: sub    $0x150,%rsp
  0x00007f7570595781: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059578d: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570595793: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570595799: vmovsd %xmm2,0x18(%rsp)
  0x00007f757059579f: vmovsd %xmm3,0x20(%rsp)
  0x00007f75705957a5: vmovsd %xmm4,0x28(%rsp)
  0x00007f75705957ab: vmovsd %xmm5,0x30(%rsp)
  0x00007f75705957b1: vmovsd %xmm6,0x38(%rsp)
  0x00007f75705957b7: vmovsd %xmm7,0x40(%rsp)
  0x00007f75705957bd: vmovsd %xmm8,0x48(%rsp)
  0x00007f75705957c3: vmovsd %xmm9,0x50(%rsp)
  0x00007f75705957c9: vmovsd %xmm10,0x58(%rsp)
  0x00007f75705957cf: vmovsd %xmm11,0x60(%rsp)
  0x00007f75705957d5: vmovsd %xmm12,0x68(%rsp)
  0x00007f75705957db: vmovsd %xmm13,0x70(%rsp)
  0x00007f75705957e1: vmovsd %xmm14,0x78(%rsp)
  0x00007f75705957e7: vmovsd %xmm15,0x80(%rsp)
  0x00007f75705957f0: mov    0x10(%rbp),%eax
  0x00007f75705957f3: mov    0x18(%rbp),%rbx
  0x00007f75705957f7: mov    %rax,%rsi
  0x00007f75705957fa: mov    %rbx,%rdx
  0x00007f75705957fd: mov    %r15,%rdi
  0x00007f7570595800: mov    %rbp,0x210(%r15)
  0x00007f7570595807: mov    %rsp,0x200(%r15)
  0x00007f757059580e: callq  0x00007f7584e5213a
  0x00007f7570595813: push   %rax
  0x00007f7570595814: push   %rdi
  0x00007f7570595815: push   %rsi
  0x00007f7570595816: push   %rdx
  0x00007f7570595817: push   %rcx
  0x00007f7570595818: push   %r8
  0x00007f757059581a: push   %r9
  0x00007f757059581c: push   %r10
  0x00007f757059581e: mov    %rsp,%r10
  0x00007f7570595821: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595825: push   %r10
  0x00007f7570595827: push   %r11
  0x00007f7570595829: mov    $0x1,%edi
  0x00007f757059582e: callq  0x00007f7585f5a2d0
  0x00007f7570595833: pop    %r11
  0x00007f7570595835: pop    %rsp
  0x00007f7570595836: pop    %r10
  0x00007f7570595838: pop    %r9
  0x00007f757059583a: pop    %r8
  0x00007f757059583c: pop    %rcx
  0x00007f757059583d: pop    %rdx
  0x00007f757059583e: pop    %rsi
  0x00007f757059583f: pop    %rdi
  0x00007f7570595840: cmp    %rax,%r15
  0x00007f7570595843: je     0x00007f75705958c5
  0x00007f7570595849: callq  0x00007f7585459a22
  0x00007f757059584e: mov    %rsp,-0x28(%rsp)
  0x00007f7570595853: sub    $0x80,%rsp
  0x00007f757059585a: mov    %rax,0x78(%rsp)
  0x00007f757059585f: mov    %rcx,0x70(%rsp)
  0x00007f7570595864: mov    %rdx,0x68(%rsp)
  0x00007f7570595869: mov    %rbx,0x60(%rsp)
  0x00007f757059586e: mov    %rbp,0x50(%rsp)
  0x00007f7570595873: mov    %rsi,0x48(%rsp)
  0x00007f7570595878: mov    %rdi,0x40(%rsp)
  0x00007f757059587d: mov    %r8,0x38(%rsp)
  0x00007f7570595882: mov    %r9,0x30(%rsp)
  0x00007f7570595887: mov    %r10,0x28(%rsp)
  0x00007f757059588c: mov    %r11,0x20(%rsp)
  0x00007f7570595891: mov    %r12,0x18(%rsp)
  0x00007f7570595896: mov    %r13,0x10(%rsp)
  0x00007f757059589b: mov    %r14,0x8(%rsp)
  0x00007f75705958a0: mov    %r15,(%rsp)
  0x00007f75705958a4: movabs $0x7f75856f3278,%rdi
  0x00007f75705958ae: movabs $0x7f757059584e,%rsi
  0x00007f75705958b8: mov    %rsp,%rdx
  0x00007f75705958bb: and    $0xfffffffffffffff0,%rsp
  0x00007f75705958bf: callq  0x00007f75853729fa
  0x00007f75705958c4: hlt    
  0x00007f75705958c5: pop    %rax
  0x00007f75705958c6: movabs $0x0,%r10
  0x00007f75705958d0: mov    %r10,0x200(%r15)
  0x00007f75705958d7: movabs $0x0,%r10
  0x00007f75705958e1: mov    %r10,0x210(%r15)
  0x00007f75705958e8: movabs $0x0,%r10
  0x00007f75705958f2: mov    %r10,0x208(%r15)
  0x00007f75705958f9: cmpq   $0x0,0x8(%r15)
  0x00007f7570595901: je     0x00007f7570595910
  0x00007f7570595907: mov    0x8(%r15),%rax
  0x00007f757059590b: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f7570595910: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570595916: vmovsd 0x10(%rsp),%xmm1
  0x00007f757059591c: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570595922: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570595928: vmovsd 0x28(%rsp),%xmm4
  0x00007f757059592e: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570595934: vmovsd 0x38(%rsp),%xmm6
  0x00007f757059593a: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570595940: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570595946: vmovsd 0x50(%rsp),%xmm9
  0x00007f757059594c: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570595952: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570595958: vmovsd 0x68(%rsp),%xmm12
  0x00007f757059595e: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570595964: vmovsd 0x78(%rsp),%xmm14
  0x00007f757059596a: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570595973: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f757059597f: je     0x00007f75705959fc
  0x00007f7570595985: mov    %rsp,-0x28(%rsp)
  0x00007f757059598a: sub    $0x80,%rsp
  0x00007f7570595991: mov    %rax,0x78(%rsp)
  0x00007f7570595996: mov    %rcx,0x70(%rsp)
  0x00007f757059599b: mov    %rdx,0x68(%rsp)
  0x00007f75705959a0: mov    %rbx,0x60(%rsp)
  0x00007f75705959a5: mov    %rbp,0x50(%rsp)
  0x00007f75705959aa: mov    %rsi,0x48(%rsp)
  0x00007f75705959af: mov    %rdi,0x40(%rsp)
  0x00007f75705959b4: mov    %r8,0x38(%rsp)
  0x00007f75705959b9: mov    %r9,0x30(%rsp)
  0x00007f75705959be: mov    %r10,0x28(%rsp)
  0x00007f75705959c3: mov    %r11,0x20(%rsp)
  0x00007f75705959c8: mov    %r12,0x18(%rsp)
  0x00007f75705959cd: mov    %r13,0x10(%rsp)
  0x00007f75705959d2: mov    %r14,0x8(%rsp)
  0x00007f75705959d7: mov    %r15,(%rsp)
  0x00007f75705959db: movabs $0x7f75856f340f,%rdi
  0x00007f75705959e5: movabs $0x7f7570595985,%rsi
  0x00007f75705959ef: mov    %rsp,%rdx
  0x00007f75705959f2: and    $0xfffffffffffffff0,%rsp
  0x00007f75705959f6: callq  0x00007f75853729fa
  0x00007f75705959fb: hlt    
  0x00007f75705959fc: add    $0x150,%rsp
  0x00007f7570595a03: mov    (%rsp),%r15
  0x00007f7570595a07: mov    0x8(%rsp),%r14
  0x00007f7570595a0c: mov    0x10(%rsp),%r13
  0x00007f7570595a11: mov    0x18(%rsp),%r12
  0x00007f7570595a16: mov    0x20(%rsp),%r11
  0x00007f7570595a1b: mov    0x28(%rsp),%r10
  0x00007f7570595a20: mov    0x30(%rsp),%r9
  0x00007f7570595a25: mov    0x38(%rsp),%r8
  0x00007f7570595a2a: mov    0x40(%rsp),%rdi
  0x00007f7570595a2f: mov    0x48(%rsp),%rsi
  0x00007f7570595a34: mov    0x50(%rsp),%rbp
  0x00007f7570595a39: mov    0x60(%rsp),%rbx
  0x00007f7570595a3e: mov    0x68(%rsp),%rdx
  0x00007f7570595a43: mov    0x70(%rsp),%rcx
  0x00007f7570595a48: mov    0x78(%rsp),%rax
  0x00007f7570595a4d: add    $0x80,%rsp
  0x00007f7570595a54: leaveq 
  0x00007f7570595a55: retq   
  0x00007f7570595a56: nop
  0x00007f7570595a57: nop

Decoding RuntimeStub - predicate_failed_trap Runtime1 stub 0x00007f7570595a90
  0x00007f7570595b20: push   %rbp
  0x00007f7570595b21: mov    %rsp,%rbp
  ;; save_live_registers
  0x00007f7570595b24: mov    %rsp,-0x28(%rsp)
  0x00007f7570595b29: sub    $0x80,%rsp
  0x00007f7570595b30: mov    %rax,0x78(%rsp)
  0x00007f7570595b35: mov    %rcx,0x70(%rsp)
  0x00007f7570595b3a: mov    %rdx,0x68(%rsp)
  0x00007f7570595b3f: mov    %rbx,0x60(%rsp)
  0x00007f7570595b44: mov    %rbp,0x50(%rsp)
  0x00007f7570595b49: mov    %rsi,0x48(%rsp)
  0x00007f7570595b4e: mov    %rdi,0x40(%rsp)
  0x00007f7570595b53: mov    %r8,0x38(%rsp)
  0x00007f7570595b58: mov    %r9,0x30(%rsp)
  0x00007f7570595b5d: mov    %r10,0x28(%rsp)
  0x00007f7570595b62: mov    %r11,0x20(%rsp)
  0x00007f7570595b67: mov    %r12,0x18(%rsp)
  0x00007f7570595b6c: mov    %r13,0x10(%rsp)
  0x00007f7570595b71: mov    %r14,0x8(%rsp)
  0x00007f7570595b76: mov    %r15,(%rsp)
  0x00007f7570595b7a: sub    $0x150,%rsp
  0x00007f7570595b81: movq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570595b8d: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570595b93: vmovsd %xmm1,0x10(%rsp)
  0x00007f7570595b99: vmovsd %xmm2,0x18(%rsp)
  0x00007f7570595b9f: vmovsd %xmm3,0x20(%rsp)
  0x00007f7570595ba5: vmovsd %xmm4,0x28(%rsp)
  0x00007f7570595bab: vmovsd %xmm5,0x30(%rsp)
  0x00007f7570595bb1: vmovsd %xmm6,0x38(%rsp)
  0x00007f7570595bb7: vmovsd %xmm7,0x40(%rsp)
  0x00007f7570595bbd: vmovsd %xmm8,0x48(%rsp)
  0x00007f7570595bc3: vmovsd %xmm9,0x50(%rsp)
  0x00007f7570595bc9: vmovsd %xmm10,0x58(%rsp)
  0x00007f7570595bcf: vmovsd %xmm11,0x60(%rsp)
  0x00007f7570595bd5: vmovsd %xmm12,0x68(%rsp)
  0x00007f7570595bdb: vmovsd %xmm13,0x70(%rsp)
  0x00007f7570595be1: vmovsd %xmm14,0x78(%rsp)
  0x00007f7570595be7: vmovsd %xmm15,0x80(%rsp)
  0x00007f7570595bf0: mov    %r15,%rdi
  0x00007f7570595bf3: mov    %rbp,0x210(%r15)
  0x00007f7570595bfa: mov    %rsp,0x200(%r15)
  0x00007f7570595c01: callq  0x00007f7584e5674e
  0x00007f7570595c06: push   %rax
  0x00007f7570595c07: push   %rdi
  0x00007f7570595c08: push   %rsi
  0x00007f7570595c09: push   %rdx
  0x00007f7570595c0a: push   %rcx
  0x00007f7570595c0b: push   %r8
  0x00007f7570595c0d: push   %r9
  0x00007f7570595c0f: push   %r10
  0x00007f7570595c11: mov    %rsp,%r10
  0x00007f7570595c14: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595c18: push   %r10
  0x00007f7570595c1a: push   %r11
  0x00007f7570595c1c: mov    $0x1,%edi
  0x00007f7570595c21: callq  0x00007f7585f5a2d0
  0x00007f7570595c26: pop    %r11
  0x00007f7570595c28: pop    %rsp
  0x00007f7570595c29: pop    %r10
  0x00007f7570595c2b: pop    %r9
  0x00007f7570595c2d: pop    %r8
  0x00007f7570595c2f: pop    %rcx
  0x00007f7570595c30: pop    %rdx
  0x00007f7570595c31: pop    %rsi
  0x00007f7570595c32: pop    %rdi
  0x00007f7570595c33: cmp    %rax,%r15
  0x00007f7570595c36: je     0x00007f7570595cb8
  0x00007f7570595c3c: callq  0x00007f7585459a22
  0x00007f7570595c41: mov    %rsp,-0x28(%rsp)
  0x00007f7570595c46: sub    $0x80,%rsp
  0x00007f7570595c4d: mov    %rax,0x78(%rsp)
  0x00007f7570595c52: mov    %rcx,0x70(%rsp)
  0x00007f7570595c57: mov    %rdx,0x68(%rsp)
  0x00007f7570595c5c: mov    %rbx,0x60(%rsp)
  0x00007f7570595c61: mov    %rbp,0x50(%rsp)
  0x00007f7570595c66: mov    %rsi,0x48(%rsp)
  0x00007f7570595c6b: mov    %rdi,0x40(%rsp)
  0x00007f7570595c70: mov    %r8,0x38(%rsp)
  0x00007f7570595c75: mov    %r9,0x30(%rsp)
  0x00007f7570595c7a: mov    %r10,0x28(%rsp)
  0x00007f7570595c7f: mov    %r11,0x20(%rsp)
  0x00007f7570595c84: mov    %r12,0x18(%rsp)
  0x00007f7570595c89: mov    %r13,0x10(%rsp)
  0x00007f7570595c8e: mov    %r14,0x8(%rsp)
  0x00007f7570595c93: mov    %r15,(%rsp)
  0x00007f7570595c97: movabs $0x7f75856f3278,%rdi
  0x00007f7570595ca1: movabs $0x7f7570595c41,%rsi
  0x00007f7570595cab: mov    %rsp,%rdx
  0x00007f7570595cae: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595cb2: callq  0x00007f75853729fa
  0x00007f7570595cb7: hlt    
  0x00007f7570595cb8: pop    %rax
  0x00007f7570595cb9: movabs $0x0,%r10
  0x00007f7570595cc3: mov    %r10,0x200(%r15)
  0x00007f7570595cca: movabs $0x0,%r10
  0x00007f7570595cd4: mov    %r10,0x210(%r15)
  0x00007f7570595cdb: movabs $0x0,%r10
  0x00007f7570595ce5: mov    %r10,0x208(%r15)
  0x00007f7570595cec: cmpq   $0x0,0x8(%r15)
  0x00007f7570595cf4: je     0x00007f7570595d03
  0x00007f7570595cfa: mov    0x8(%r15),%rax
  0x00007f7570595cfe: jmpq   0x00007f757055b240
  ;; restore_live_registers
  0x00007f7570595d03: vmovsd 0x8(%rsp),%xmm0
  0x00007f7570595d09: vmovsd 0x10(%rsp),%xmm1
  0x00007f7570595d0f: vmovsd 0x18(%rsp),%xmm2
  0x00007f7570595d15: vmovsd 0x20(%rsp),%xmm3
  0x00007f7570595d1b: vmovsd 0x28(%rsp),%xmm4
  0x00007f7570595d21: vmovsd 0x30(%rsp),%xmm5
  0x00007f7570595d27: vmovsd 0x38(%rsp),%xmm6
  0x00007f7570595d2d: vmovsd 0x40(%rsp),%xmm7
  0x00007f7570595d33: vmovsd 0x48(%rsp),%xmm8
  0x00007f7570595d39: vmovsd 0x50(%rsp),%xmm9
  0x00007f7570595d3f: vmovsd 0x58(%rsp),%xmm10
  0x00007f7570595d45: vmovsd 0x60(%rsp),%xmm11
  0x00007f7570595d4b: vmovsd 0x68(%rsp),%xmm12
  0x00007f7570595d51: vmovsd 0x70(%rsp),%xmm13
  0x00007f7570595d57: vmovsd 0x78(%rsp),%xmm14
  0x00007f7570595d5d: vmovsd 0x80(%rsp),%xmm15
  0x00007f7570595d66: cmpq   $0xfffffffffeedbeef,0x148(%rsp)
  0x00007f7570595d72: je     0x00007f7570595def
  0x00007f7570595d78: mov    %rsp,-0x28(%rsp)
  0x00007f7570595d7d: sub    $0x80,%rsp
  0x00007f7570595d84: mov    %rax,0x78(%rsp)
  0x00007f7570595d89: mov    %rcx,0x70(%rsp)
  0x00007f7570595d8e: mov    %rdx,0x68(%rsp)
  0x00007f7570595d93: mov    %rbx,0x60(%rsp)
  0x00007f7570595d98: mov    %rbp,0x50(%rsp)
  0x00007f7570595d9d: mov    %rsi,0x48(%rsp)
  0x00007f7570595da2: mov    %rdi,0x40(%rsp)
  0x00007f7570595da7: mov    %r8,0x38(%rsp)
  0x00007f7570595dac: mov    %r9,0x30(%rsp)
  0x00007f7570595db1: mov    %r10,0x28(%rsp)
  0x00007f7570595db6: mov    %r11,0x20(%rsp)
  0x00007f7570595dbb: mov    %r12,0x18(%rsp)
  0x00007f7570595dc0: mov    %r13,0x10(%rsp)
  0x00007f7570595dc5: mov    %r14,0x8(%rsp)
  0x00007f7570595dca: mov    %r15,(%rsp)
  0x00007f7570595dce: movabs $0x7f75856f340f,%rdi
  0x00007f7570595dd8: movabs $0x7f7570595d78,%rsi
  0x00007f7570595de2: mov    %rsp,%rdx
  0x00007f7570595de5: and    $0xfffffffffffffff0,%rsp
  0x00007f7570595de9: callq  0x00007f75853729fa
  0x00007f7570595dee: hlt    
  0x00007f7570595def: add    $0x150,%rsp
  0x00007f7570595df6: mov    (%rsp),%r15
  0x00007f7570595dfa: mov    0x8(%rsp),%r14
  0x00007f7570595dff: mov    0x10(%rsp),%r13
  0x00007f7570595e04: mov    0x18(%rsp),%r12
  0x00007f7570595e09: mov    0x20(%rsp),%r11
  0x00007f7570595e0e: mov    0x28(%rsp),%r10
  0x00007f7570595e13: mov    0x30(%rsp),%r9
  0x00007f7570595e18: mov    0x38(%rsp),%r8
  0x00007f7570595e1d: mov    0x40(%rsp),%rdi
  0x00007f7570595e22: mov    0x48(%rsp),%rsi
  0x00007f7570595e27: mov    0x50(%rsp),%rbp
  0x00007f7570595e2c: mov    0x60(%rsp),%rbx
  0x00007f7570595e31: mov    0x68(%rsp),%rdx
  0x00007f7570595e36: mov    0x70(%rsp),%rcx
  0x00007f7570595e3b: mov    0x78(%rsp),%rax
  0x00007f7570595e40: add    $0x80,%rsp
  0x00007f7570595e47: leaveq 
  0x00007f7570595e48: jmpq   0x00007f7570470356
  0x00007f7570595e4d: leaveq 
  0x00007f7570595e4e: retq   
  0x00007f7570595e4f: nop

AHE@0x00007f758012d350: 0xbaaaab00 i2c: 0x00007f7570595f20 c2i: 0x00007f757059606c c2iUV: 0x00007f757059603f
i2c argument handler #126 for: receiver (IIIILjava/io/FileDescriptor;)V (618 bytes generated)
c2i argument handler starts at 0x7f757059606c
  0x00007f7570595f20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570595f24: movabs $0x7f757036e3e0,%r11
  0x00007f7570595f2e: cmp    %r11,%rax
  0x00007f7570595f31: jbe    0x00007f7570595f4a
  0x00007f7570595f37: movabs $0x7f757046e3e0,%r11
  0x00007f7570595f41: cmp    %r11,%rax
  0x00007f7570595f44: jb     0x00007f757059600d
  0x00007f7570595f4a: movabs $0x7f7570369420,%r11
  0x00007f7570595f54: cmp    %r11,%rax
  0x00007f7570595f57: jbe    0x00007f7570595f70
  0x00007f7570595f5d: movabs $0x7f757036de58,%r11
  0x00007f7570595f67: cmp    %r11,%rax
  0x00007f7570595f6a: jb     0x00007f757059600d
  0x00007f7570595f70: movabs $0x7f75704a9820,%r11
  0x00007f7570595f7a: cmp    %r11,%rax
  0x00007f7570595f7d: jbe    0x00007f7570595f96
  0x00007f7570595f83: movabs $0x7f75704af5e0,%r11
  0x00007f7570595f8d: cmp    %r11,%rax
  0x00007f7570595f90: jb     0x00007f757059600d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570595f96: mov    %rsp,-0x28(%rsp)
  0x00007f7570595f9b: sub    $0x80,%rsp
  0x00007f7570595fa2: mov    %rax,0x78(%rsp)
  0x00007f7570595fa7: mov    %rcx,0x70(%rsp)
  0x00007f7570595fac: mov    %rdx,0x68(%rsp)
  0x00007f7570595fb1: mov    %rbx,0x60(%rsp)
  0x00007f7570595fb6: mov    %rbp,0x50(%rsp)
  0x00007f7570595fbb: mov    %rsi,0x48(%rsp)
  0x00007f7570595fc0: mov    %rdi,0x40(%rsp)
  0x00007f7570595fc5: mov    %r8,0x38(%rsp)
  0x00007f7570595fca: mov    %r9,0x30(%rsp)
  0x00007f7570595fcf: mov    %r10,0x28(%rsp)
  0x00007f7570595fd4: mov    %r11,0x20(%rsp)
  0x00007f7570595fd9: mov    %r12,0x18(%rsp)
  0x00007f7570595fde: mov    %r13,0x10(%rsp)
  0x00007f7570595fe3: mov    %r14,0x8(%rsp)
  0x00007f7570595fe8: mov    %r15,(%rsp)
  0x00007f7570595fec: movabs $0x7f758592f470,%rdi
  0x00007f7570595ff6: movabs $0x7f7570595f96,%rsi
  0x00007f7570596000: mov    %rsp,%rdx
  0x00007f7570596003: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596007: callq  0x00007f75853729fa
  0x00007f757059600c: hlt    
  ;; } verify_i2ce 
  0x00007f757059600d: mov    %rsp,%r11
  0x00007f7570596010: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596014: push   %rax
  0x00007f7570596015: mov    %r11,%rax
  0x00007f7570596018: mov    0x50(%rbx),%r11
  0x00007f757059601c: mov    0x30(%rax),%rsi
  0x00007f7570596020: mov    0x28(%rax),%edx
  0x00007f7570596023: mov    0x20(%rax),%ecx
  0x00007f7570596026: mov    0x18(%rax),%r8d
  0x00007f757059602a: mov    0x10(%rax),%r9d
  0x00007f757059602e: mov    0x8(%rax),%rdi
  0x00007f7570596032: mov    %rbx,0x258(%r15)
  0x00007f7570596039: mov    %rbx,%rax
  0x00007f757059603c: jmpq   *%r11
  0x00007f757059603f: mov    0x8(%rsi),%ebx
  0x00007f7570596042: shl    $0x3,%rbx
  0x00007f7570596046: cmp    0x10(%rax),%rbx
  0x00007f757059604a: mov    0x8(%rax),%rbx
  0x00007f757059604e: je     0x00007f7570596059
  0x00007f7570596054: jmpq   0x00007f757046ec40
  0x00007f7570596059: cmpq   $0x0,0x58(%rbx)
  0x00007f7570596061: je     0x00007f757059615c
  0x00007f7570596067: jmpq   0x00007f757046ec40
  0x00007f757059606c: cmpq   $0x0,0x58(%rbx)
  0x00007f7570596074: je     0x00007f757059615c
  0x00007f757059607a: mov    %rsp,%r13
  0x00007f757059607d: mov    (%rsp),%rax
  0x00007f7570596081: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596085: pushfq 
  0x00007f7570596086: sub    $0x8,%rsp
  0x00007f757059608a: mov    %rsp,-0x28(%rsp)
  0x00007f757059608f: sub    $0x80,%rsp
  0x00007f7570596096: mov    %rax,0x78(%rsp)
  0x00007f757059609b: mov    %rcx,0x70(%rsp)
  0x00007f75705960a0: mov    %rdx,0x68(%rsp)
  0x00007f75705960a5: mov    %rbx,0x60(%rsp)
  0x00007f75705960aa: mov    %rbp,0x50(%rsp)
  0x00007f75705960af: mov    %rsi,0x48(%rsp)
  0x00007f75705960b4: mov    %rdi,0x40(%rsp)
  0x00007f75705960b9: mov    %r8,0x38(%rsp)
  0x00007f75705960be: mov    %r9,0x30(%rsp)
  0x00007f75705960c3: mov    %r10,0x28(%rsp)
  0x00007f75705960c8: mov    %r11,0x20(%rsp)
  0x00007f75705960cd: mov    %r12,0x18(%rsp)
  0x00007f75705960d2: mov    %r13,0x10(%rsp)
  0x00007f75705960d7: mov    %r14,0x8(%rsp)
  0x00007f75705960dc: mov    %r15,(%rsp)
  0x00007f75705960e0: sub    $0x200,%rsp
  0x00007f75705960e7: fxsave64 (%rsp)
  0x00007f75705960ec: mov    %rbx,%rdi
  0x00007f75705960ef: mov    %rax,%rsi
  0x00007f75705960f2: callq  0x00007f7585522bca
  0x00007f75705960f7: fxrstor64 (%rsp)
  0x00007f75705960fc: add    $0x200,%rsp
  0x00007f7570596103: mov    (%rsp),%r15
  0x00007f7570596107: mov    0x8(%rsp),%r14
  0x00007f757059610c: mov    0x10(%rsp),%r13
  0x00007f7570596111: mov    0x18(%rsp),%r12
  0x00007f7570596116: mov    0x20(%rsp),%r11
  0x00007f757059611b: mov    0x28(%rsp),%r10
  0x00007f7570596120: mov    0x30(%rsp),%r9
  0x00007f7570596125: mov    0x38(%rsp),%r8
  0x00007f757059612a: mov    0x40(%rsp),%rdi
  0x00007f757059612f: mov    0x48(%rsp),%rsi
  0x00007f7570596134: mov    0x50(%rsp),%rbp
  0x00007f7570596139: mov    0x60(%rsp),%rbx
  0x00007f757059613e: mov    0x68(%rsp),%rdx
  0x00007f7570596143: mov    0x70(%rsp),%rcx
  0x00007f7570596148: mov    0x78(%rsp),%rax
  0x00007f757059614d: add    $0x80,%rsp
  0x00007f7570596154: add    $0x8,%rsp
  0x00007f7570596158: popfq  
  0x00007f7570596159: mov    %r13,%rsp
  0x00007f757059615c: pop    %rax
  0x00007f757059615d: mov    %rsp,%r13
  0x00007f7570596160: sub    $0x40,%rsp
  0x00007f7570596164: mov    %rax,(%rsp)
  0x00007f7570596168: mov    %rsi,0x30(%rsp)
  0x00007f757059616d: mov    %edx,0x28(%rsp)
  0x00007f7570596171: mov    %ecx,0x20(%rsp)
  0x00007f7570596175: mov    %r8d,0x18(%rsp)
  0x00007f757059617a: mov    %r9d,0x10(%rsp)
  0x00007f757059617f: mov    %rdi,0x8(%rsp)
  0x00007f7570596184: mov    0x40(%rbx),%rcx
  0x00007f7570596188: jmpq   *%rcx

AHE@0x00007f758012d398: 0xbbbebe00 i2c: 0x00007f7570596260 c2i: 0x00007f75705963a6 c2iUV: 0x00007f7570596379
i2c argument handler #127 for: receiver (Ljava/io/FileDescriptor;JJ)V (634 bytes generated)
c2i argument handler starts at 0x7f75705963a6
  0x00007f7570596260: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570596264: movabs $0x7f757036e3e0,%r11
  0x00007f757059626e: cmp    %r11,%rax
  0x00007f7570596271: jbe    0x00007f757059628a
  0x00007f7570596277: movabs $0x7f757046e3e0,%r11
  0x00007f7570596281: cmp    %r11,%rax
  0x00007f7570596284: jb     0x00007f757059634d
  0x00007f757059628a: movabs $0x7f7570369420,%r11
  0x00007f7570596294: cmp    %r11,%rax
  0x00007f7570596297: jbe    0x00007f75705962b0
  0x00007f757059629d: movabs $0x7f757036de58,%r11
  0x00007f75705962a7: cmp    %r11,%rax
  0x00007f75705962aa: jb     0x00007f757059634d
  0x00007f75705962b0: movabs $0x7f75704a9820,%r11
  0x00007f75705962ba: cmp    %r11,%rax
  0x00007f75705962bd: jbe    0x00007f75705962d6
  0x00007f75705962c3: movabs $0x7f75704af5e0,%r11
  0x00007f75705962cd: cmp    %r11,%rax
  0x00007f75705962d0: jb     0x00007f757059634d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75705962d6: mov    %rsp,-0x28(%rsp)
  0x00007f75705962db: sub    $0x80,%rsp
  0x00007f75705962e2: mov    %rax,0x78(%rsp)
  0x00007f75705962e7: mov    %rcx,0x70(%rsp)
  0x00007f75705962ec: mov    %rdx,0x68(%rsp)
  0x00007f75705962f1: mov    %rbx,0x60(%rsp)
  0x00007f75705962f6: mov    %rbp,0x50(%rsp)
  0x00007f75705962fb: mov    %rsi,0x48(%rsp)
  0x00007f7570596300: mov    %rdi,0x40(%rsp)
  0x00007f7570596305: mov    %r8,0x38(%rsp)
  0x00007f757059630a: mov    %r9,0x30(%rsp)
  0x00007f757059630f: mov    %r10,0x28(%rsp)
  0x00007f7570596314: mov    %r11,0x20(%rsp)
  0x00007f7570596319: mov    %r12,0x18(%rsp)
  0x00007f757059631e: mov    %r13,0x10(%rsp)
  0x00007f7570596323: mov    %r14,0x8(%rsp)
  0x00007f7570596328: mov    %r15,(%rsp)
  0x00007f757059632c: movabs $0x7f758592f470,%rdi
  0x00007f7570596336: movabs $0x7f75705962d6,%rsi
  0x00007f7570596340: mov    %rsp,%rdx
  0x00007f7570596343: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596347: callq  0x00007f75853729fa
  0x00007f757059634c: hlt    
  ;; } verify_i2ce 
  0x00007f757059634d: mov    %rsp,%r11
  0x00007f7570596350: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596354: push   %rax
  0x00007f7570596355: mov    %r11,%rax
  0x00007f7570596358: mov    0x50(%rbx),%r11
  0x00007f757059635c: mov    0x30(%rax),%rsi
  0x00007f7570596360: mov    0x28(%rax),%rdx
  0x00007f7570596364: mov    0x18(%rax),%rcx
  0x00007f7570596368: mov    0x8(%rax),%r8
  0x00007f757059636c: mov    %rbx,0x258(%r15)
  0x00007f7570596373: mov    %rbx,%rax
  0x00007f7570596376: jmpq   *%r11
  0x00007f7570596379: mov    0x8(%rsi),%ebx
  0x00007f757059637c: shl    $0x3,%rbx
  0x00007f7570596380: cmp    0x10(%rax),%rbx
  0x00007f7570596384: mov    0x8(%rax),%rbx
  0x00007f7570596388: je     0x00007f7570596393
  0x00007f757059638e: jmpq   0x00007f757046ec40
  0x00007f7570596393: cmpq   $0x0,0x58(%rbx)
  0x00007f757059639b: je     0x00007f7570596496
  0x00007f75705963a1: jmpq   0x00007f757046ec40
  0x00007f75705963a6: cmpq   $0x0,0x58(%rbx)
  0x00007f75705963ae: je     0x00007f7570596496
  0x00007f75705963b4: mov    %rsp,%r13
  0x00007f75705963b7: mov    (%rsp),%rax
  0x00007f75705963bb: and    $0xfffffffffffffff0,%rsp
  0x00007f75705963bf: pushfq 
  0x00007f75705963c0: sub    $0x8,%rsp
  0x00007f75705963c4: mov    %rsp,-0x28(%rsp)
  0x00007f75705963c9: sub    $0x80,%rsp
  0x00007f75705963d0: mov    %rax,0x78(%rsp)
  0x00007f75705963d5: mov    %rcx,0x70(%rsp)
  0x00007f75705963da: mov    %rdx,0x68(%rsp)
  0x00007f75705963df: mov    %rbx,0x60(%rsp)
  0x00007f75705963e4: mov    %rbp,0x50(%rsp)
  0x00007f75705963e9: mov    %rsi,0x48(%rsp)
  0x00007f75705963ee: mov    %rdi,0x40(%rsp)
  0x00007f75705963f3: mov    %r8,0x38(%rsp)
  0x00007f75705963f8: mov    %r9,0x30(%rsp)
  0x00007f75705963fd: mov    %r10,0x28(%rsp)
  0x00007f7570596402: mov    %r11,0x20(%rsp)
  0x00007f7570596407: mov    %r12,0x18(%rsp)
  0x00007f757059640c: mov    %r13,0x10(%rsp)
  0x00007f7570596411: mov    %r14,0x8(%rsp)
  0x00007f7570596416: mov    %r15,(%rsp)
  0x00007f757059641a: sub    $0x200,%rsp
  0x00007f7570596421: fxsave64 (%rsp)
  0x00007f7570596426: mov    %rbx,%rdi
  0x00007f7570596429: mov    %rax,%rsi
  0x00007f757059642c: callq  0x00007f7585522bca
  0x00007f7570596431: fxrstor64 (%rsp)
  0x00007f7570596436: add    $0x200,%rsp
  0x00007f757059643d: mov    (%rsp),%r15
  0x00007f7570596441: mov    0x8(%rsp),%r14
  0x00007f7570596446: mov    0x10(%rsp),%r13
  0x00007f757059644b: mov    0x18(%rsp),%r12
  0x00007f7570596450: mov    0x20(%rsp),%r11
  0x00007f7570596455: mov    0x28(%rsp),%r10
  0x00007f757059645a: mov    0x30(%rsp),%r9
  0x00007f757059645f: mov    0x38(%rsp),%r8
  0x00007f7570596464: mov    0x40(%rsp),%rdi
  0x00007f7570596469: mov    0x48(%rsp),%rsi
  0x00007f757059646e: mov    0x50(%rsp),%rbp
  0x00007f7570596473: mov    0x60(%rsp),%rbx
  0x00007f7570596478: mov    0x68(%rsp),%rdx
  0x00007f757059647d: mov    0x70(%rsp),%rcx
  0x00007f7570596482: mov    0x78(%rsp),%rax
  0x00007f7570596487: add    $0x80,%rsp
  0x00007f757059648e: add    $0x8,%rsp
  0x00007f7570596492: popfq  
  0x00007f7570596493: mov    %r13,%rsp
  0x00007f7570596496: pop    %rax
  0x00007f7570596497: mov    %rsp,%r13
  0x00007f757059649a: sub    $0x40,%rsp
  0x00007f757059649e: mov    %rax,(%rsp)
  0x00007f75705964a2: mov    %rsi,0x30(%rsp)
  0x00007f75705964a7: mov    %rdx,0x28(%rsp)
  0x00007f75705964ac: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75705964b6: mov    %rax,0x20(%rsp)
  0x00007f75705964bb: mov    %rcx,0x18(%rsp)
  0x00007f75705964c0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75705964ca: mov    %rax,0x10(%rsp)
  0x00007f75705964cf: mov    %r8,0x8(%rsp)
  0x00007f75705964d4: mov    0x40(%rbx),%rcx
  0x00007f75705964d8: jmpq   *%rcx

AHE@0x00007f758012d3e0: 0xbbebea00 i2c: 0x00007f75705965a0 c2i: 0x00007f75705966e6 c2iUV: 0x00007f75705966b9
i2c argument handler #128 for: receiver (JJI)Z (634 bytes generated)
c2i argument handler starts at 0x7f75705966e6
  0x00007f75705965a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705965a4: movabs $0x7f757036e3e0,%r11
  0x00007f75705965ae: cmp    %r11,%rax
  0x00007f75705965b1: jbe    0x00007f75705965ca
  0x00007f75705965b7: movabs $0x7f757046e3e0,%r11
  0x00007f75705965c1: cmp    %r11,%rax
  0x00007f75705965c4: jb     0x00007f757059668d
  0x00007f75705965ca: movabs $0x7f7570369420,%r11
  0x00007f75705965d4: cmp    %r11,%rax
  0x00007f75705965d7: jbe    0x00007f75705965f0
  0x00007f75705965dd: movabs $0x7f757036de58,%r11
  0x00007f75705965e7: cmp    %r11,%rax
  0x00007f75705965ea: jb     0x00007f757059668d
  0x00007f75705965f0: movabs $0x7f75704a9820,%r11
  0x00007f75705965fa: cmp    %r11,%rax
  0x00007f75705965fd: jbe    0x00007f7570596616
  0x00007f7570596603: movabs $0x7f75704af5e0,%r11
  0x00007f757059660d: cmp    %r11,%rax
  0x00007f7570596610: jb     0x00007f757059668d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570596616: mov    %rsp,-0x28(%rsp)
  0x00007f757059661b: sub    $0x80,%rsp
  0x00007f7570596622: mov    %rax,0x78(%rsp)
  0x00007f7570596627: mov    %rcx,0x70(%rsp)
  0x00007f757059662c: mov    %rdx,0x68(%rsp)
  0x00007f7570596631: mov    %rbx,0x60(%rsp)
  0x00007f7570596636: mov    %rbp,0x50(%rsp)
  0x00007f757059663b: mov    %rsi,0x48(%rsp)
  0x00007f7570596640: mov    %rdi,0x40(%rsp)
  0x00007f7570596645: mov    %r8,0x38(%rsp)
  0x00007f757059664a: mov    %r9,0x30(%rsp)
  0x00007f757059664f: mov    %r10,0x28(%rsp)
  0x00007f7570596654: mov    %r11,0x20(%rsp)
  0x00007f7570596659: mov    %r12,0x18(%rsp)
  0x00007f757059665e: mov    %r13,0x10(%rsp)
  0x00007f7570596663: mov    %r14,0x8(%rsp)
  0x00007f7570596668: mov    %r15,(%rsp)
  0x00007f757059666c: movabs $0x7f758592f470,%rdi
  0x00007f7570596676: movabs $0x7f7570596616,%rsi
  0x00007f7570596680: mov    %rsp,%rdx
  0x00007f7570596683: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596687: callq  0x00007f75853729fa
  0x00007f757059668c: hlt    
  ;; } verify_i2ce 
  0x00007f757059668d: mov    %rsp,%r11
  0x00007f7570596690: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596694: push   %rax
  0x00007f7570596695: mov    %r11,%rax
  0x00007f7570596698: mov    0x50(%rbx),%r11
  0x00007f757059669c: mov    0x30(%rax),%rsi
  0x00007f75705966a0: mov    0x20(%rax),%rdx
  0x00007f75705966a4: mov    0x10(%rax),%rcx
  0x00007f75705966a8: mov    0x8(%rax),%r8d
  0x00007f75705966ac: mov    %rbx,0x258(%r15)
  0x00007f75705966b3: mov    %rbx,%rax
  0x00007f75705966b6: jmpq   *%r11
  0x00007f75705966b9: mov    0x8(%rsi),%ebx
  0x00007f75705966bc: shl    $0x3,%rbx
  0x00007f75705966c0: cmp    0x10(%rax),%rbx
  0x00007f75705966c4: mov    0x8(%rax),%rbx
  0x00007f75705966c8: je     0x00007f75705966d3
  0x00007f75705966ce: jmpq   0x00007f757046ec40
  0x00007f75705966d3: cmpq   $0x0,0x58(%rbx)
  0x00007f75705966db: je     0x00007f75705967d6
  0x00007f75705966e1: jmpq   0x00007f757046ec40
  0x00007f75705966e6: cmpq   $0x0,0x58(%rbx)
  0x00007f75705966ee: je     0x00007f75705967d6
  0x00007f75705966f4: mov    %rsp,%r13
  0x00007f75705966f7: mov    (%rsp),%rax
  0x00007f75705966fb: and    $0xfffffffffffffff0,%rsp
  0x00007f75705966ff: pushfq 
  0x00007f7570596700: sub    $0x8,%rsp
  0x00007f7570596704: mov    %rsp,-0x28(%rsp)
  0x00007f7570596709: sub    $0x80,%rsp
  0x00007f7570596710: mov    %rax,0x78(%rsp)
  0x00007f7570596715: mov    %rcx,0x70(%rsp)
  0x00007f757059671a: mov    %rdx,0x68(%rsp)
  0x00007f757059671f: mov    %rbx,0x60(%rsp)
  0x00007f7570596724: mov    %rbp,0x50(%rsp)
  0x00007f7570596729: mov    %rsi,0x48(%rsp)
  0x00007f757059672e: mov    %rdi,0x40(%rsp)
  0x00007f7570596733: mov    %r8,0x38(%rsp)
  0x00007f7570596738: mov    %r9,0x30(%rsp)
  0x00007f757059673d: mov    %r10,0x28(%rsp)
  0x00007f7570596742: mov    %r11,0x20(%rsp)
  0x00007f7570596747: mov    %r12,0x18(%rsp)
  0x00007f757059674c: mov    %r13,0x10(%rsp)
  0x00007f7570596751: mov    %r14,0x8(%rsp)
  0x00007f7570596756: mov    %r15,(%rsp)
  0x00007f757059675a: sub    $0x200,%rsp
  0x00007f7570596761: fxsave64 (%rsp)
  0x00007f7570596766: mov    %rbx,%rdi
  0x00007f7570596769: mov    %rax,%rsi
  0x00007f757059676c: callq  0x00007f7585522bca
  0x00007f7570596771: fxrstor64 (%rsp)
  0x00007f7570596776: add    $0x200,%rsp
  0x00007f757059677d: mov    (%rsp),%r15
  0x00007f7570596781: mov    0x8(%rsp),%r14
  0x00007f7570596786: mov    0x10(%rsp),%r13
  0x00007f757059678b: mov    0x18(%rsp),%r12
  0x00007f7570596790: mov    0x20(%rsp),%r11
  0x00007f7570596795: mov    0x28(%rsp),%r10
  0x00007f757059679a: mov    0x30(%rsp),%r9
  0x00007f757059679f: mov    0x38(%rsp),%r8
  0x00007f75705967a4: mov    0x40(%rsp),%rdi
  0x00007f75705967a9: mov    0x48(%rsp),%rsi
  0x00007f75705967ae: mov    0x50(%rsp),%rbp
  0x00007f75705967b3: mov    0x60(%rsp),%rbx
  0x00007f75705967b8: mov    0x68(%rsp),%rdx
  0x00007f75705967bd: mov    0x70(%rsp),%rcx
  0x00007f75705967c2: mov    0x78(%rsp),%rax
  0x00007f75705967c7: add    $0x80,%rsp
  0x00007f75705967ce: add    $0x8,%rsp
  0x00007f75705967d2: popfq  
  0x00007f75705967d3: mov    %r13,%rsp
  0x00007f75705967d6: pop    %rax
  0x00007f75705967d7: mov    %rsp,%r13
  0x00007f75705967da: sub    $0x40,%rsp
  0x00007f75705967de: mov    %rax,(%rsp)
  0x00007f75705967e2: mov    %rsi,0x30(%rsp)
  0x00007f75705967e7: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75705967f1: mov    %rax,0x28(%rsp)
  0x00007f75705967f6: mov    %rdx,0x20(%rsp)
  0x00007f75705967fb: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570596805: mov    %rax,0x18(%rsp)
  0x00007f757059680a: mov    %rcx,0x10(%rsp)
  0x00007f757059680f: mov    %r8d,0x8(%rsp)
  0x00007f7570596814: mov    0x40(%rbx),%rcx
  0x00007f7570596818: jmpq   *%rcx

AHE@0x00007f758012d428: 0xbbe7e000 i2c: 0x00007f75705968e0 c2i: 0x00007f7570596a23 c2iUV: 0x00007f75705969f6
i2c argument handler #129 for: receiver (JD)Ljava/nio/ByteBuffer; (627 bytes generated)
c2i argument handler starts at 0x7f7570596a23
  0x00007f75705968e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705968e4: movabs $0x7f757036e3e0,%r11
  0x00007f75705968ee: cmp    %r11,%rax
  0x00007f75705968f1: jbe    0x00007f757059690a
  0x00007f75705968f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570596901: cmp    %r11,%rax
  0x00007f7570596904: jb     0x00007f75705969cd
  0x00007f757059690a: movabs $0x7f7570369420,%r11
  0x00007f7570596914: cmp    %r11,%rax
  0x00007f7570596917: jbe    0x00007f7570596930
  0x00007f757059691d: movabs $0x7f757036de58,%r11
  0x00007f7570596927: cmp    %r11,%rax
  0x00007f757059692a: jb     0x00007f75705969cd
  0x00007f7570596930: movabs $0x7f75704a9820,%r11
  0x00007f757059693a: cmp    %r11,%rax
  0x00007f757059693d: jbe    0x00007f7570596956
  0x00007f7570596943: movabs $0x7f75704af5e0,%r11
  0x00007f757059694d: cmp    %r11,%rax
  0x00007f7570596950: jb     0x00007f75705969cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570596956: mov    %rsp,-0x28(%rsp)
  0x00007f757059695b: sub    $0x80,%rsp
  0x00007f7570596962: mov    %rax,0x78(%rsp)
  0x00007f7570596967: mov    %rcx,0x70(%rsp)
  0x00007f757059696c: mov    %rdx,0x68(%rsp)
  0x00007f7570596971: mov    %rbx,0x60(%rsp)
  0x00007f7570596976: mov    %rbp,0x50(%rsp)
  0x00007f757059697b: mov    %rsi,0x48(%rsp)
  0x00007f7570596980: mov    %rdi,0x40(%rsp)
  0x00007f7570596985: mov    %r8,0x38(%rsp)
  0x00007f757059698a: mov    %r9,0x30(%rsp)
  0x00007f757059698f: mov    %r10,0x28(%rsp)
  0x00007f7570596994: mov    %r11,0x20(%rsp)
  0x00007f7570596999: mov    %r12,0x18(%rsp)
  0x00007f757059699e: mov    %r13,0x10(%rsp)
  0x00007f75705969a3: mov    %r14,0x8(%rsp)
  0x00007f75705969a8: mov    %r15,(%rsp)
  0x00007f75705969ac: movabs $0x7f758592f470,%rdi
  0x00007f75705969b6: movabs $0x7f7570596956,%rsi
  0x00007f75705969c0: mov    %rsp,%rdx
  0x00007f75705969c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75705969c7: callq  0x00007f75853729fa
  0x00007f75705969cc: hlt    
  ;; } verify_i2ce 
  0x00007f75705969cd: mov    %rsp,%r11
  0x00007f75705969d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75705969d4: push   %rax
  0x00007f75705969d5: mov    %r11,%rax
  0x00007f75705969d8: mov    0x50(%rbx),%r11
  0x00007f75705969dc: mov    0x28(%rax),%rsi
  0x00007f75705969e0: mov    0x18(%rax),%rdx
  0x00007f75705969e4: vmovsd 0x8(%rax),%xmm0
  0x00007f75705969e9: mov    %rbx,0x258(%r15)
  0x00007f75705969f0: mov    %rbx,%rax
  0x00007f75705969f3: jmpq   *%r11
  0x00007f75705969f6: mov    0x8(%rsi),%ebx
  0x00007f75705969f9: shl    $0x3,%rbx
  0x00007f75705969fd: cmp    0x10(%rax),%rbx
  0x00007f7570596a01: mov    0x8(%rax),%rbx
  0x00007f7570596a05: je     0x00007f7570596a10
  0x00007f7570596a0b: jmpq   0x00007f757046ec40
  0x00007f7570596a10: cmpq   $0x0,0x58(%rbx)
  0x00007f7570596a18: je     0x00007f7570596b13
  0x00007f7570596a1e: jmpq   0x00007f757046ec40
  0x00007f7570596a23: cmpq   $0x0,0x58(%rbx)
  0x00007f7570596a2b: je     0x00007f7570596b13
  0x00007f7570596a31: mov    %rsp,%r13
  0x00007f7570596a34: mov    (%rsp),%rax
  0x00007f7570596a38: and    $0xfffffffffffffff0,%rsp
  0x00007f7570596a3c: pushfq 
  0x00007f7570596a3d: sub    $0x8,%rsp
  0x00007f7570596a41: mov    %rsp,-0x28(%rsp)
  0x00007f7570596a46: sub    $0x80,%rsp
  0x00007f7570596a4d: mov    %rax,0x78(%rsp)
  0x00007f7570596a52: mov    %rcx,0x70(%rsp)
  0x00007f7570596a57: mov    %rdx,0x68(%rsp)
  0x00007f7570596a5c: mov    %rbx,0x60(%rsp)
  0x00007f7570596a61: mov    %rbp,0x50(%rsp)
  0x00007f7570596a66: mov    %rsi,0x48(%rsp)
  0x00007f7570596a6b: mov    %rdi,0x40(%rsp)
  0x00007f7570596a70: mov    %r8,0x38(%rsp)
  0x00007f7570596a75: mov    %r9,0x30(%rsp)
  0x00007f7570596a7a: mov    %r10,0x28(%rsp)
  0x00007f7570596a7f: mov    %r11,0x20(%rsp)
  0x00007f7570596a84: mov    %r12,0x18(%rsp)
  0x00007f7570596a89: mov    %r13,0x10(%rsp)
  0x00007f7570596a8e: mov    %r14,0x8(%rsp)
  0x00007f7570596a93: mov    %r15,(%rsp)
  0x00007f7570596a97: sub    $0x200,%rsp
  0x00007f7570596a9e: fxsave64 (%rsp)
  0x00007f7570596aa3: mov    %rbx,%rdi
  0x00007f7570596aa6: mov    %rax,%rsi
  0x00007f7570596aa9: callq  0x00007f7585522bca
  0x00007f7570596aae: fxrstor64 (%rsp)
  0x00007f7570596ab3: add    $0x200,%rsp
  0x00007f7570596aba: mov    (%rsp),%r15
  0x00007f7570596abe: mov    0x8(%rsp),%r14
  0x00007f7570596ac3: mov    0x10(%rsp),%r13
  0x00007f7570596ac8: mov    0x18(%rsp),%r12
  0x00007f7570596acd: mov    0x20(%rsp),%r11
  0x00007f7570596ad2: mov    0x28(%rsp),%r10
  0x00007f7570596ad7: mov    0x30(%rsp),%r9
  0x00007f7570596adc: mov    0x38(%rsp),%r8
  0x00007f7570596ae1: mov    0x40(%rsp),%rdi
  0x00007f7570596ae6: mov    0x48(%rsp),%rsi
  0x00007f7570596aeb: mov    0x50(%rsp),%rbp
  0x00007f7570596af0: mov    0x60(%rsp),%rbx
  0x00007f7570596af5: mov    0x68(%rsp),%rdx
  0x00007f7570596afa: mov    0x70(%rsp),%rcx
  0x00007f7570596aff: mov    0x78(%rsp),%rax
  0x00007f7570596b04: add    $0x80,%rsp
  0x00007f7570596b0b: add    $0x8,%rsp
  0x00007f7570596b0f: popfq  
  0x00007f7570596b10: mov    %r13,%rsp
  0x00007f7570596b13: pop    %rax
  0x00007f7570596b14: mov    %rsp,%r13
  0x00007f7570596b17: sub    $0x30,%rsp
  0x00007f7570596b1b: mov    %rax,(%rsp)
  0x00007f7570596b1f: mov    %rsi,0x28(%rsp)
  0x00007f7570596b24: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570596b2e: mov    %rax,0x20(%rsp)
  0x00007f7570596b33: mov    %rdx,0x18(%rsp)
  0x00007f7570596b38: movabs $0xdeadffffdeadaaac,%rax
  0x00007f7570596b42: mov    %rax,0x10(%rsp)
  0x00007f7570596b47: vmovsd %xmm0,0x8(%rsp)
  0x00007f7570596b4d: mov    0x40(%rbx),%rcx
  0x00007f7570596b51: jmpq   *%rcx

AHE@0x00007f758012d470: 0xbbe60000 i2c: 0x00007f7570597360 c2i: 0x00007f75705974a3 c2iUV: 0x00007f7570597476
i2c argument handler #130 for: receiver (JF)Ljava/nio/ByteBuffer; (612 bytes generated)
c2i argument handler starts at 0x7f75705974a3
  0x00007f7570597360: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570597364: movabs $0x7f757036e3e0,%r11
  0x00007f757059736e: cmp    %r11,%rax
  0x00007f7570597371: jbe    0x00007f757059738a
  0x00007f7570597377: movabs $0x7f757046e3e0,%r11
  0x00007f7570597381: cmp    %r11,%rax
  0x00007f7570597384: jb     0x00007f757059744d
  0x00007f757059738a: movabs $0x7f7570369420,%r11
  0x00007f7570597394: cmp    %r11,%rax
  0x00007f7570597397: jbe    0x00007f75705973b0
  0x00007f757059739d: movabs $0x7f757036de58,%r11
  0x00007f75705973a7: cmp    %r11,%rax
  0x00007f75705973aa: jb     0x00007f757059744d
  0x00007f75705973b0: movabs $0x7f75704a9820,%r11
  0x00007f75705973ba: cmp    %r11,%rax
  0x00007f75705973bd: jbe    0x00007f75705973d6
  0x00007f75705973c3: movabs $0x7f75704af5e0,%r11
  0x00007f75705973cd: cmp    %r11,%rax
  0x00007f75705973d0: jb     0x00007f757059744d
  ;; i2c adapter must return to an interpreter frame
  0x00007f75705973d6: mov    %rsp,-0x28(%rsp)
  0x00007f75705973db: sub    $0x80,%rsp
  0x00007f75705973e2: mov    %rax,0x78(%rsp)
  0x00007f75705973e7: mov    %rcx,0x70(%rsp)
  0x00007f75705973ec: mov    %rdx,0x68(%rsp)
  0x00007f75705973f1: mov    %rbx,0x60(%rsp)
  0x00007f75705973f6: mov    %rbp,0x50(%rsp)
  0x00007f75705973fb: mov    %rsi,0x48(%rsp)
  0x00007f7570597400: mov    %rdi,0x40(%rsp)
  0x00007f7570597405: mov    %r8,0x38(%rsp)
  0x00007f757059740a: mov    %r9,0x30(%rsp)
  0x00007f757059740f: mov    %r10,0x28(%rsp)
  0x00007f7570597414: mov    %r11,0x20(%rsp)
  0x00007f7570597419: mov    %r12,0x18(%rsp)
  0x00007f757059741e: mov    %r13,0x10(%rsp)
  0x00007f7570597423: mov    %r14,0x8(%rsp)
  0x00007f7570597428: mov    %r15,(%rsp)
  0x00007f757059742c: movabs $0x7f758592f470,%rdi
  0x00007f7570597436: movabs $0x7f75705973d6,%rsi
  0x00007f7570597440: mov    %rsp,%rdx
  0x00007f7570597443: and    $0xfffffffffffffff0,%rsp
  0x00007f7570597447: callq  0x00007f75853729fa
  0x00007f757059744c: hlt    
  ;; } verify_i2ce 
  0x00007f757059744d: mov    %rsp,%r11
  0x00007f7570597450: and    $0xfffffffffffffff0,%rsp
  0x00007f7570597454: push   %rax
  0x00007f7570597455: mov    %r11,%rax
  0x00007f7570597458: mov    0x50(%rbx),%r11
  0x00007f757059745c: mov    0x20(%rax),%rsi
  0x00007f7570597460: mov    0x10(%rax),%rdx
  0x00007f7570597464: vmovss 0x8(%rax),%xmm0
  0x00007f7570597469: mov    %rbx,0x258(%r15)
  0x00007f7570597470: mov    %rbx,%rax
  0x00007f7570597473: jmpq   *%r11
  0x00007f7570597476: mov    0x8(%rsi),%ebx
  0x00007f7570597479: shl    $0x3,%rbx
  0x00007f757059747d: cmp    0x10(%rax),%rbx
  0x00007f7570597481: mov    0x8(%rax),%rbx
  0x00007f7570597485: je     0x00007f7570597490
  0x00007f757059748b: jmpq   0x00007f757046ec40
  0x00007f7570597490: cmpq   $0x0,0x58(%rbx)
  0x00007f7570597498: je     0x00007f7570597593
  0x00007f757059749e: jmpq   0x00007f757046ec40
  0x00007f75705974a3: cmpq   $0x0,0x58(%rbx)
  0x00007f75705974ab: je     0x00007f7570597593
  0x00007f75705974b1: mov    %rsp,%r13
  0x00007f75705974b4: mov    (%rsp),%rax
  0x00007f75705974b8: and    $0xfffffffffffffff0,%rsp
  0x00007f75705974bc: pushfq 
  0x00007f75705974bd: sub    $0x8,%rsp
  0x00007f75705974c1: mov    %rsp,-0x28(%rsp)
  0x00007f75705974c6: sub    $0x80,%rsp
  0x00007f75705974cd: mov    %rax,0x78(%rsp)
  0x00007f75705974d2: mov    %rcx,0x70(%rsp)
  0x00007f75705974d7: mov    %rdx,0x68(%rsp)
  0x00007f75705974dc: mov    %rbx,0x60(%rsp)
  0x00007f75705974e1: mov    %rbp,0x50(%rsp)
  0x00007f75705974e6: mov    %rsi,0x48(%rsp)
  0x00007f75705974eb: mov    %rdi,0x40(%rsp)
  0x00007f75705974f0: mov    %r8,0x38(%rsp)
  0x00007f75705974f5: mov    %r9,0x30(%rsp)
  0x00007f75705974fa: mov    %r10,0x28(%rsp)
  0x00007f75705974ff: mov    %r11,0x20(%rsp)
  0x00007f7570597504: mov    %r12,0x18(%rsp)
  0x00007f7570597509: mov    %r13,0x10(%rsp)
  0x00007f757059750e: mov    %r14,0x8(%rsp)
  0x00007f7570597513: mov    %r15,(%rsp)
  0x00007f7570597517: sub    $0x200,%rsp
  0x00007f757059751e: fxsave64 (%rsp)
  0x00007f7570597523: mov    %rbx,%rdi
  0x00007f7570597526: mov    %rax,%rsi
  0x00007f7570597529: callq  0x00007f7585522bca
  0x00007f757059752e: fxrstor64 (%rsp)
  0x00007f7570597533: add    $0x200,%rsp
  0x00007f757059753a: mov    (%rsp),%r15
  0x00007f757059753e: mov    0x8(%rsp),%r14
  0x00007f7570597543: mov    0x10(%rsp),%r13
  0x00007f7570597548: mov    0x18(%rsp),%r12
  0x00007f757059754d: mov    0x20(%rsp),%r11
  0x00007f7570597552: mov    0x28(%rsp),%r10
  0x00007f7570597557: mov    0x30(%rsp),%r9
  0x00007f757059755c: mov    0x38(%rsp),%r8
  0x00007f7570597561: mov    0x40(%rsp),%rdi
  0x00007f7570597566: mov    0x48(%rsp),%rsi
  0x00007f757059756b: mov    0x50(%rsp),%rbp
  0x00007f7570597570: mov    0x60(%rsp),%rbx
  0x00007f7570597575: mov    0x68(%rsp),%rdx
  0x00007f757059757a: mov    0x70(%rsp),%rcx
  0x00007f757059757f: mov    0x78(%rsp),%rax
  0x00007f7570597584: add    $0x80,%rsp
  0x00007f757059758b: add    $0x8,%rsp
  0x00007f757059758f: popfq  
  0x00007f7570597590: mov    %r13,%rsp
  0x00007f7570597593: pop    %rax
  0x00007f7570597594: mov    %rsp,%r13
  0x00007f7570597597: sub    $0x30,%rsp
  0x00007f757059759b: mov    %rax,(%rsp)
  0x00007f757059759f: mov    %rsi,0x20(%rsp)
  0x00007f75705975a4: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75705975ae: mov    %rax,0x18(%rsp)
  0x00007f75705975b3: mov    %rdx,0x10(%rsp)
  0x00007f75705975b8: vmovss %xmm0,0x8(%rsp)
  0x00007f75705975be: mov    0x40(%rbx),%rcx
  0x00007f75705975c2: jmpq   *%rcx

AHE@0x00007f758012d4b8: 0xbabebb00 i2c: 0x00007f75705976a0 c2i: 0x00007f75705977e9 c2iUV: 0x00007f75705977bc
i2c argument handler #131 for: receiver (IJLjava/io/FileDescriptor;Ljava/lang/Runnable;)V (626 bytes generated)
c2i argument handler starts at 0x7f75705977e9
  0x00007f75705976a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705976a4: movabs $0x7f757036e3e0,%r11
  0x00007f75705976ae: cmp    %r11,%rax
  0x00007f75705976b1: jbe    0x00007f75705976ca
  0x00007f75705976b7: movabs $0x7f757046e3e0,%r11
  0x00007f75705976c1: cmp    %r11,%rax
  0x00007f75705976c4: jb     0x00007f757059778d
  0x00007f75705976ca: movabs $0x7f7570369420,%r11
  0x00007f75705976d4: cmp    %r11,%rax
  0x00007f75705976d7: jbe    0x00007f75705976f0
  0x00007f75705976dd: movabs $0x7f757036de58,%r11
  0x00007f75705976e7: cmp    %r11,%rax
  0x00007f75705976ea: jb     0x00007f757059778d
  0x00007f75705976f0: movabs $0x7f75704a9820,%r11
  0x00007f75705976fa: cmp    %r11,%rax
  0x00007f75705976fd: jbe    0x00007f7570597716
  0x00007f7570597703: movabs $0x7f75704af5e0,%r11
  0x00007f757059770d: cmp    %r11,%rax
  0x00007f7570597710: jb     0x00007f757059778d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570597716: mov    %rsp,-0x28(%rsp)
  0x00007f757059771b: sub    $0x80,%rsp
  0x00007f7570597722: mov    %rax,0x78(%rsp)
  0x00007f7570597727: mov    %rcx,0x70(%rsp)
  0x00007f757059772c: mov    %rdx,0x68(%rsp)
  0x00007f7570597731: mov    %rbx,0x60(%rsp)
  0x00007f7570597736: mov    %rbp,0x50(%rsp)
  0x00007f757059773b: mov    %rsi,0x48(%rsp)
  0x00007f7570597740: mov    %rdi,0x40(%rsp)
  0x00007f7570597745: mov    %r8,0x38(%rsp)
  0x00007f757059774a: mov    %r9,0x30(%rsp)
  0x00007f757059774f: mov    %r10,0x28(%rsp)
  0x00007f7570597754: mov    %r11,0x20(%rsp)
  0x00007f7570597759: mov    %r12,0x18(%rsp)
  0x00007f757059775e: mov    %r13,0x10(%rsp)
  0x00007f7570597763: mov    %r14,0x8(%rsp)
  0x00007f7570597768: mov    %r15,(%rsp)
  0x00007f757059776c: movabs $0x7f758592f470,%rdi
  0x00007f7570597776: movabs $0x7f7570597716,%rsi
  0x00007f7570597780: mov    %rsp,%rdx
  0x00007f7570597783: and    $0xfffffffffffffff0,%rsp
  0x00007f7570597787: callq  0x00007f75853729fa
  0x00007f757059778c: hlt    
  ;; } verify_i2ce 
  0x00007f757059778d: mov    %rsp,%r11
  0x00007f7570597790: and    $0xfffffffffffffff0,%rsp
  0x00007f7570597794: push   %rax
  0x00007f7570597795: mov    %r11,%rax
  0x00007f7570597798: mov    0x50(%rbx),%r11
  0x00007f757059779c: mov    0x30(%rax),%rsi
  0x00007f75705977a0: mov    0x28(%rax),%edx
  0x00007f75705977a3: mov    0x18(%rax),%rcx
  0x00007f75705977a7: mov    0x10(%rax),%r8
  0x00007f75705977ab: mov    0x8(%rax),%r9
  0x00007f75705977af: mov    %rbx,0x258(%r15)
  0x00007f75705977b6: mov    %rbx,%rax
  0x00007f75705977b9: jmpq   *%r11
  0x00007f75705977bc: mov    0x8(%rsi),%ebx
  0x00007f75705977bf: shl    $0x3,%rbx
  0x00007f75705977c3: cmp    0x10(%rax),%rbx
  0x00007f75705977c7: mov    0x8(%rax),%rbx
  0x00007f75705977cb: je     0x00007f75705977d6
  0x00007f75705977d1: jmpq   0x00007f757046ec40
  0x00007f75705977d6: cmpq   $0x0,0x58(%rbx)
  0x00007f75705977de: je     0x00007f75705978d9
  0x00007f75705977e4: jmpq   0x00007f757046ec40
  0x00007f75705977e9: cmpq   $0x0,0x58(%rbx)
  0x00007f75705977f1: je     0x00007f75705978d9
  0x00007f75705977f7: mov    %rsp,%r13
  0x00007f75705977fa: mov    (%rsp),%rax
  0x00007f75705977fe: and    $0xfffffffffffffff0,%rsp
  0x00007f7570597802: pushfq 
  0x00007f7570597803: sub    $0x8,%rsp
  0x00007f7570597807: mov    %rsp,-0x28(%rsp)
  0x00007f757059780c: sub    $0x80,%rsp
  0x00007f7570597813: mov    %rax,0x78(%rsp)
  0x00007f7570597818: mov    %rcx,0x70(%rsp)
  0x00007f757059781d: mov    %rdx,0x68(%rsp)
  0x00007f7570597822: mov    %rbx,0x60(%rsp)
  0x00007f7570597827: mov    %rbp,0x50(%rsp)
  0x00007f757059782c: mov    %rsi,0x48(%rsp)
  0x00007f7570597831: mov    %rdi,0x40(%rsp)
  0x00007f7570597836: mov    %r8,0x38(%rsp)
  0x00007f757059783b: mov    %r9,0x30(%rsp)
  0x00007f7570597840: mov    %r10,0x28(%rsp)
  0x00007f7570597845: mov    %r11,0x20(%rsp)
  0x00007f757059784a: mov    %r12,0x18(%rsp)
  0x00007f757059784f: mov    %r13,0x10(%rsp)
  0x00007f7570597854: mov    %r14,0x8(%rsp)
  0x00007f7570597859: mov    %r15,(%rsp)
  0x00007f757059785d: sub    $0x200,%rsp
  0x00007f7570597864: fxsave64 (%rsp)
  0x00007f7570597869: mov    %rbx,%rdi
  0x00007f757059786c: mov    %rax,%rsi
  0x00007f757059786f: callq  0x00007f7585522bca
  0x00007f7570597874: fxrstor64 (%rsp)
  0x00007f7570597879: add    $0x200,%rsp
  0x00007f7570597880: mov    (%rsp),%r15
  0x00007f7570597884: mov    0x8(%rsp),%r14
  0x00007f7570597889: mov    0x10(%rsp),%r13
  0x00007f757059788e: mov    0x18(%rsp),%r12
  0x00007f7570597893: mov    0x20(%rsp),%r11
  0x00007f7570597898: mov    0x28(%rsp),%r10
  0x00007f757059789d: mov    0x30(%rsp),%r9
  0x00007f75705978a2: mov    0x38(%rsp),%r8
  0x00007f75705978a7: mov    0x40(%rsp),%rdi
  0x00007f75705978ac: mov    0x48(%rsp),%rsi
  0x00007f75705978b1: mov    0x50(%rsp),%rbp
  0x00007f75705978b6: mov    0x60(%rsp),%rbx
  0x00007f75705978bb: mov    0x68(%rsp),%rdx
  0x00007f75705978c0: mov    0x70(%rsp),%rcx
  0x00007f75705978c5: mov    0x78(%rsp),%rax
  0x00007f75705978ca: add    $0x80,%rsp
  0x00007f75705978d1: add    $0x8,%rsp
  0x00007f75705978d5: popfq  
  0x00007f75705978d6: mov    %r13,%rsp
  0x00007f75705978d9: pop    %rax
  0x00007f75705978da: mov    %rsp,%r13
  0x00007f75705978dd: sub    $0x40,%rsp
  0x00007f75705978e1: mov    %rax,(%rsp)
  0x00007f75705978e5: mov    %rsi,0x30(%rsp)
  0x00007f75705978ea: mov    %edx,0x28(%rsp)
  0x00007f75705978ee: movabs $0xdeadffffdeadaaab,%rax
  0x00007f75705978f8: mov    %rax,0x20(%rsp)
  0x00007f75705978fd: mov    %rcx,0x18(%rsp)
  0x00007f7570597902: mov    %r8,0x10(%rsp)
  0x00007f7570597907: mov    %r9,0x8(%rsp)
  0x00007f757059790c: mov    0x40(%rbx),%rcx
  0x00007f7570597910: jmpq   *%rcx

AHE@0x00007f758012d500: 0xbbebaa00 i2c: 0x00007f75705992e0 c2i: 0x00007f757059942a c2iUV: 0x00007f75705993fd
i2c argument handler #132 for: receiver (J[BII)I (628 bytes generated)
c2i argument handler starts at 0x7f757059942a
  0x00007f75705992e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f75705992e4: movabs $0x7f757036e3e0,%r11
  0x00007f75705992ee: cmp    %r11,%rax
  0x00007f75705992f1: jbe    0x00007f757059930a
  0x00007f75705992f7: movabs $0x7f757046e3e0,%r11
  0x00007f7570599301: cmp    %r11,%rax
  0x00007f7570599304: jb     0x00007f75705993cd
  0x00007f757059930a: movabs $0x7f7570369420,%r11
  0x00007f7570599314: cmp    %r11,%rax
  0x00007f7570599317: jbe    0x00007f7570599330
  0x00007f757059931d: movabs $0x7f757036de58,%r11
  0x00007f7570599327: cmp    %r11,%rax
  0x00007f757059932a: jb     0x00007f75705993cd
  0x00007f7570599330: movabs $0x7f75704a9820,%r11
  0x00007f757059933a: cmp    %r11,%rax
  0x00007f757059933d: jbe    0x00007f7570599356
  0x00007f7570599343: movabs $0x7f75704af5e0,%r11
  0x00007f757059934d: cmp    %r11,%rax
  0x00007f7570599350: jb     0x00007f75705993cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570599356: mov    %rsp,-0x28(%rsp)
  0x00007f757059935b: sub    $0x80,%rsp
  0x00007f7570599362: mov    %rax,0x78(%rsp)
  0x00007f7570599367: mov    %rcx,0x70(%rsp)
  0x00007f757059936c: mov    %rdx,0x68(%rsp)
  0x00007f7570599371: mov    %rbx,0x60(%rsp)
  0x00007f7570599376: mov    %rbp,0x50(%rsp)
  0x00007f757059937b: mov    %rsi,0x48(%rsp)
  0x00007f7570599380: mov    %rdi,0x40(%rsp)
  0x00007f7570599385: mov    %r8,0x38(%rsp)
  0x00007f757059938a: mov    %r9,0x30(%rsp)
  0x00007f757059938f: mov    %r10,0x28(%rsp)
  0x00007f7570599394: mov    %r11,0x20(%rsp)
  0x00007f7570599399: mov    %r12,0x18(%rsp)
  0x00007f757059939e: mov    %r13,0x10(%rsp)
  0x00007f75705993a3: mov    %r14,0x8(%rsp)
  0x00007f75705993a8: mov    %r15,(%rsp)
  0x00007f75705993ac: movabs $0x7f758592f470,%rdi
  0x00007f75705993b6: movabs $0x7f7570599356,%rsi
  0x00007f75705993c0: mov    %rsp,%rdx
  0x00007f75705993c3: and    $0xfffffffffffffff0,%rsp
  0x00007f75705993c7: callq  0x00007f75853729fa
  0x00007f75705993cc: hlt    
  ;; } verify_i2ce 
  0x00007f75705993cd: mov    %rsp,%r11
  0x00007f75705993d0: and    $0xfffffffffffffff0,%rsp
  0x00007f75705993d4: push   %rax
  0x00007f75705993d5: mov    %r11,%rax
  0x00007f75705993d8: mov    0x50(%rbx),%r11
  0x00007f75705993dc: mov    0x30(%rax),%rsi
  0x00007f75705993e0: mov    0x20(%rax),%rdx
  0x00007f75705993e4: mov    0x18(%rax),%rcx
  0x00007f75705993e8: mov    0x10(%rax),%r8d
  0x00007f75705993ec: mov    0x8(%rax),%r9d
  0x00007f75705993f0: mov    %rbx,0x258(%r15)
  0x00007f75705993f7: mov    %rbx,%rax
  0x00007f75705993fa: jmpq   *%r11
  0x00007f75705993fd: mov    0x8(%rsi),%ebx
  0x00007f7570599400: shl    $0x3,%rbx
  0x00007f7570599404: cmp    0x10(%rax),%rbx
  0x00007f7570599408: mov    0x8(%rax),%rbx
  0x00007f757059940c: je     0x00007f7570599417
  0x00007f7570599412: jmpq   0x00007f757046ec40
  0x00007f7570599417: cmpq   $0x0,0x58(%rbx)
  0x00007f757059941f: je     0x00007f757059951a
  0x00007f7570599425: jmpq   0x00007f757046ec40
  0x00007f757059942a: cmpq   $0x0,0x58(%rbx)
  0x00007f7570599432: je     0x00007f757059951a
  0x00007f7570599438: mov    %rsp,%r13
  0x00007f757059943b: mov    (%rsp),%rax
  0x00007f757059943f: and    $0xfffffffffffffff0,%rsp
  0x00007f7570599443: pushfq 
  0x00007f7570599444: sub    $0x8,%rsp
  0x00007f7570599448: mov    %rsp,-0x28(%rsp)
  0x00007f757059944d: sub    $0x80,%rsp
  0x00007f7570599454: mov    %rax,0x78(%rsp)
  0x00007f7570599459: mov    %rcx,0x70(%rsp)
  0x00007f757059945e: mov    %rdx,0x68(%rsp)
  0x00007f7570599463: mov    %rbx,0x60(%rsp)
  0x00007f7570599468: mov    %rbp,0x50(%rsp)
  0x00007f757059946d: mov    %rsi,0x48(%rsp)
  0x00007f7570599472: mov    %rdi,0x40(%rsp)
  0x00007f7570599477: mov    %r8,0x38(%rsp)
  0x00007f757059947c: mov    %r9,0x30(%rsp)
  0x00007f7570599481: mov    %r10,0x28(%rsp)
  0x00007f7570599486: mov    %r11,0x20(%rsp)
  0x00007f757059948b: mov    %r12,0x18(%rsp)
  0x00007f7570599490: mov    %r13,0x10(%rsp)
  0x00007f7570599495: mov    %r14,0x8(%rsp)
  0x00007f757059949a: mov    %r15,(%rsp)
  0x00007f757059949e: sub    $0x200,%rsp
  0x00007f75705994a5: fxsave64 (%rsp)
  0x00007f75705994aa: mov    %rbx,%rdi
  0x00007f75705994ad: mov    %rax,%rsi
  0x00007f75705994b0: callq  0x00007f7585522bca
  0x00007f75705994b5: fxrstor64 (%rsp)
  0x00007f75705994ba: add    $0x200,%rsp
  0x00007f75705994c1: mov    (%rsp),%r15
  0x00007f75705994c5: mov    0x8(%rsp),%r14
  0x00007f75705994ca: mov    0x10(%rsp),%r13
  0x00007f75705994cf: mov    0x18(%rsp),%r12
  0x00007f75705994d4: mov    0x20(%rsp),%r11
  0x00007f75705994d9: mov    0x28(%rsp),%r10
  0x00007f75705994de: mov    0x30(%rsp),%r9
  0x00007f75705994e3: mov    0x38(%rsp),%r8
  0x00007f75705994e8: mov    0x40(%rsp),%rdi
  0x00007f75705994ed: mov    0x48(%rsp),%rsi
  0x00007f75705994f2: mov    0x50(%rsp),%rbp
  0x00007f75705994f7: mov    0x60(%rsp),%rbx
  0x00007f75705994fc: mov    0x68(%rsp),%rdx
  0x00007f7570599501: mov    0x70(%rsp),%rcx
  0x00007f7570599506: mov    0x78(%rsp),%rax
  0x00007f757059950b: add    $0x80,%rsp
  0x00007f7570599512: add    $0x8,%rsp
  0x00007f7570599516: popfq  
  0x00007f7570599517: mov    %r13,%rsp
  0x00007f757059951a: pop    %rax
  0x00007f757059951b: mov    %rsp,%r13
  0x00007f757059951e: sub    $0x40,%rsp
  0x00007f7570599522: mov    %rax,(%rsp)
  0x00007f7570599526: mov    %rsi,0x30(%rsp)
  0x00007f757059952b: movabs $0xdeadffffdeadaaab,%rax
  0x00007f7570599535: mov    %rax,0x28(%rsp)
  0x00007f757059953a: mov    %rdx,0x20(%rsp)
  0x00007f757059953f: mov    %rcx,0x18(%rsp)
  0x00007f7570599544: mov    %r8d,0x10(%rsp)
  0x00007f7570599549: mov    %r9d,0x8(%rsp)
  0x00007f757059954e: mov    0x40(%rbx),%rcx
  0x00007f7570599552: jmpq   *%rcx

AHE@0x00007f758012d548: 0xbebaa000 i2c: 0x00007f7570599620 c2i: 0x00007f7570599765 c2iUV: 0x00007f7570599738
i2c argument handler #133 for: static (J[BII)V (617 bytes generated)
c2i argument handler starts at 0x7f7570599765
  0x00007f7570599620: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f7570599624: movabs $0x7f757036e3e0,%r11
  0x00007f757059962e: cmp    %r11,%rax
  0x00007f7570599631: jbe    0x00007f757059964a
  0x00007f7570599637: movabs $0x7f757046e3e0,%r11
  0x00007f7570599641: cmp    %r11,%rax
  0x00007f7570599644: jb     0x00007f757059970d
  0x00007f757059964a: movabs $0x7f7570369420,%r11
  0x00007f7570599654: cmp    %r11,%rax
  0x00007f7570599657: jbe    0x00007f7570599670
  0x00007f757059965d: movabs $0x7f757036de58,%r11
  0x00007f7570599667: cmp    %r11,%rax
  0x00007f757059966a: jb     0x00007f757059970d
  0x00007f7570599670: movabs $0x7f75704a9820,%r11
  0x00007f757059967a: cmp    %r11,%rax
  0x00007f757059967d: jbe    0x00007f7570599696
  0x00007f7570599683: movabs $0x7f75704af5e0,%r11
  0x00007f757059968d: cmp    %r11,%rax
  0x00007f7570599690: jb     0x00007f757059970d
  ;; i2c adapter must return to an interpreter frame
  0x00007f7570599696: mov    %rsp,-0x28(%rsp)
  0x00007f757059969b: sub    $0x80,%rsp
  0x00007f75705996a2: mov    %rax,0x78(%rsp)
  0x00007f75705996a7: mov    %rcx,0x70(%rsp)
  0x00007f75705996ac: mov    %rdx,0x68(%rsp)
  0x00007f75705996b1: mov    %rbx,0x60(%rsp)
  0x00007f75705996b6: mov    %rbp,0x50(%rsp)
  0x00007f75705996bb: mov    %rsi,0x48(%rsp)
  0x00007f75705996c0: mov    %rdi,0x40(%rsp)
  0x00007f75705996c5: mov    %r8,0x38(%rsp)
  0x00007f75705996ca: mov    %r9,0x30(%rsp)
  0x00007f75705996cf: mov    %r10,0x28(%rsp)
  0x00007f75705996d4: mov    %r11,0x20(%rsp)
  0x00007f75705996d9: mov    %r12,0x18(%rsp)
  0x00007f75705996de: mov    %r13,0x10(%rsp)
  0x00007f75705996e3: mov    %r14,0x8(%rsp)
  0x00007f75705996e8: mov    %r15,(%rsp)
  0x00007f75705996ec: movabs $0x7f758592f470,%rdi
  0x00007f75705996f6: movabs $0x7f7570599696,%rsi
  0x00007f7570599700: mov    %rsp,%rdx
  0x00007f7570599703: and    $0xfffffffffffffff0,%rsp
  0x00007f7570599707: callq  0x00007f75853729fa
  0x00007f757059970c: hlt    
  ;; } verify_i2ce 
  0x00007f757059970d: mov    %rsp,%r11
  0x00007f7570599710: and    $0xfffffffffffffff0,%rsp
  0x00007f7570599714: push   %rax
  0x00007f7570599715: mov    %r11,%rax
  0x00007f7570599718: mov    0x50(%rbx),%r11
  0x00007f757059971c: mov    0x20(%rax),%rsi
  0x00007f7570599720: mov    0x18(%rax),%rdx
  0x00007f7570599724: mov    0x10(%rax),%ecx
  0x00007f7570599727: mov    0x8(%rax),%r8d
  0x00007f757059972b: mov    %rbx,0x258(%r15)
  0x00007f7570599732: mov    %rbx,%rax
  0x00007f7570599735: jmpq   *%r11
  0x00007f7570599738: mov    0x8(%rsi),%ebx
  0x00007f757059973b: shl    $0x3,%rbx
  0x00007f757059973f: cmp    0x10(%rax),%rbx
  0x00007f7570599743: mov    0x8(%rax),%rbx
  0x00007f7570599747: je     0x00007f7570599752
  0x00007f757059974d: jmpq   0x00007f757046ec40
  0x00007f7570599752: cmpq   $0x0,0x58(%rbx)
  0x00007f757059975a: je     0x00007f7570599855
  0x00007f7570599760: jmpq   0x00007f757046ec40
  0x00007f7570599765: cmpq   $0x0,0x58(%rbx)
  0x00007f757059976d: je     0x00007f7570599855
  0x00007f7570599773: mov    %rsp,%r13
  0x00007f7570599776: mov    (%rsp),%rax
  0x00007f757059977a: and    $0xfffffffffffffff0,%rsp
  0x00007f757059977e: pushfq 
  0x00007f757059977f: sub    $0x8,%rsp
  0x00007f7570599783: mov    %rsp,-0x28(%rsp)
  0x00007f7570599788: sub    $0x80,%rsp
  0x00007f757059978f: mov    %rax,0x78(%rsp)
  0x00007f7570599794: mov    %rcx,0x70(%rsp)
  0x00007f7570599799: mov    %rdx,0x68(%rsp)
  0x00007f757059979e: mov    %rbx,0x60(%rsp)
  0x00007f75705997a3: mov    %rbp,0x50(%rsp)
  0x00007f75705997a8: mov    %rsi,0x48(%rsp)
  0x00007f75705997ad: mov    %rdi,0x40(%rsp)
  0x00007f75705997b2: mov    %r8,0x38(%rsp)
  0x00007f75705997b7: mov    %r9,0x30(%rsp)
  0x00007f75705997bc: mov    %r10,0x28(%rsp)
  0x00007f75705997c1: mov    %r11,0x20(%rsp)
  0x00007f75705997c6: mov    %r12,0x18(%rsp)
  0x00007f75705997cb: mov    %r13,0x10(%rsp)
  0x00007f75705997d0: mov    %r14,0x8(%rsp)
  0x00007f75705997d5: mov    %r15,(%rsp)
  0x00007f75705997d9: sub    $0x200,%rsp
  0x00007f75705997e0: fxsave64 (%rsp)
  0x00007f75705997e5: mov    %rbx,%rdi
  0x00007f75705997e8: mov    %rax,%rsi
  0x00007f75705997eb: callq  0x00007f7585522bca
  0x00007f75705997f0: fxrstor64 (%rsp)
  0x00007f75705997f5: add    $0x200,%rsp
  0x00007f75705997fc: mov    (%rsp),%r15
  0x00007f7570599800: mov    0x8(%rsp),%r14
  0x00007f7570599805: mov    0x10(%rsp),%r13
  0x00007f757059980a: mov    0x18(%rsp),%r12
  0x00007f757059980f: mov    0x20(%rsp),%r11
  0x00007f7570599814: mov    0x28(%rsp),%r10
  0x00007f7570599819: mov    0x30(%rsp),%r9
  0x00007f757059981e: mov    0x38(%rsp),%r8
  0x00007f7570599823: mov    0x40(%rsp),%rdi
  0x00007f7570599828: mov    0x48(%rsp),%rsi
  0x00007f757059982d: mov    0x50(%rsp),%rbp
  0x00007f7570599832: mov    0x60(%rsp),%rbx
  0x00007f7570599837: mov    0x68(%rsp),%rdx
  0x00007f757059983c: mov    0x70(%rsp),%rcx
  0x00007f7570599841: mov    0x78(%rsp),%rax
  0x00007f7570599846: add    $0x80,%rsp
  0x00007f757059984d: add    $0x8,%rsp
  0x00007f7570599851: popfq  
  0x00007f7570599852: mov    %r13,%rsp
  0x00007f7570599855: pop    %rax
  0x00007f7570599856: mov    %rsp,%r13
  0x00007f7570599859: sub    $0x30,%rsp
  0x00007f757059985d: mov    %rax,(%rsp)
  0x00007f7570599861: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059986b: mov    %rax,0x28(%rsp)
  0x00007f7570599870: mov    %rsi,0x20(%rsp)
  0x00007f7570599875: mov    %rdx,0x18(%rsp)
  0x00007f757059987a: mov    %ecx,0x10(%rsp)
  0x00007f757059987e: mov    %r8d,0x8(%rsp)
  0x00007f7570599883: mov    0x40(%rbx),%rcx
  0x00007f7570599887: jmpq   *%rcx

AHE@0x00007f758012d590: 0xabea0000 i2c: 0x00007f757059aba0 c2i: 0x00007f757059ace0 c2iUV: 0x00007f757059acb3
i2c argument handler #134 for: static (IJI)I (606 bytes generated)
c2i argument handler starts at 0x7f757059ace0
  0x00007f757059aba0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059aba4: movabs $0x7f757036e3e0,%r11
  0x00007f757059abae: cmp    %r11,%rax
  0x00007f757059abb1: jbe    0x00007f757059abca
  0x00007f757059abb7: movabs $0x7f757046e3e0,%r11
  0x00007f757059abc1: cmp    %r11,%rax
  0x00007f757059abc4: jb     0x00007f757059ac8d
  0x00007f757059abca: movabs $0x7f7570369420,%r11
  0x00007f757059abd4: cmp    %r11,%rax
  0x00007f757059abd7: jbe    0x00007f757059abf0
  0x00007f757059abdd: movabs $0x7f757036de58,%r11
  0x00007f757059abe7: cmp    %r11,%rax
  0x00007f757059abea: jb     0x00007f757059ac8d
  0x00007f757059abf0: movabs $0x7f75704a9820,%r11
  0x00007f757059abfa: cmp    %r11,%rax
  0x00007f757059abfd: jbe    0x00007f757059ac16
  0x00007f757059ac03: movabs $0x7f75704af5e0,%r11
  0x00007f757059ac0d: cmp    %r11,%rax
  0x00007f757059ac10: jb     0x00007f757059ac8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059ac16: mov    %rsp,-0x28(%rsp)
  0x00007f757059ac1b: sub    $0x80,%rsp
  0x00007f757059ac22: mov    %rax,0x78(%rsp)
  0x00007f757059ac27: mov    %rcx,0x70(%rsp)
  0x00007f757059ac2c: mov    %rdx,0x68(%rsp)
  0x00007f757059ac31: mov    %rbx,0x60(%rsp)
  0x00007f757059ac36: mov    %rbp,0x50(%rsp)
  0x00007f757059ac3b: mov    %rsi,0x48(%rsp)
  0x00007f757059ac40: mov    %rdi,0x40(%rsp)
  0x00007f757059ac45: mov    %r8,0x38(%rsp)
  0x00007f757059ac4a: mov    %r9,0x30(%rsp)
  0x00007f757059ac4f: mov    %r10,0x28(%rsp)
  0x00007f757059ac54: mov    %r11,0x20(%rsp)
  0x00007f757059ac59: mov    %r12,0x18(%rsp)
  0x00007f757059ac5e: mov    %r13,0x10(%rsp)
  0x00007f757059ac63: mov    %r14,0x8(%rsp)
  0x00007f757059ac68: mov    %r15,(%rsp)
  0x00007f757059ac6c: movabs $0x7f758592f470,%rdi
  0x00007f757059ac76: movabs $0x7f757059ac16,%rsi
  0x00007f757059ac80: mov    %rsp,%rdx
  0x00007f757059ac83: and    $0xfffffffffffffff0,%rsp
  0x00007f757059ac87: callq  0x00007f75853729fa
  0x00007f757059ac8c: hlt    
  ;; } verify_i2ce 
  0x00007f757059ac8d: mov    %rsp,%r11
  0x00007f757059ac90: and    $0xfffffffffffffff0,%rsp
  0x00007f757059ac94: push   %rax
  0x00007f757059ac95: mov    %r11,%rax
  0x00007f757059ac98: mov    0x50(%rbx),%r11
  0x00007f757059ac9c: mov    0x20(%rax),%esi
  0x00007f757059ac9f: mov    0x10(%rax),%rdx
  0x00007f757059aca3: mov    0x8(%rax),%ecx
  0x00007f757059aca6: mov    %rbx,0x258(%r15)
  0x00007f757059acad: mov    %rbx,%rax
  0x00007f757059acb0: jmpq   *%r11
  0x00007f757059acb3: mov    0x8(%rsi),%ebx
  0x00007f757059acb6: shl    $0x3,%rbx
  0x00007f757059acba: cmp    0x10(%rax),%rbx
  0x00007f757059acbe: mov    0x8(%rax),%rbx
  0x00007f757059acc2: je     0x00007f757059accd
  0x00007f757059acc8: jmpq   0x00007f757046ec40
  0x00007f757059accd: cmpq   $0x0,0x58(%rbx)
  0x00007f757059acd5: je     0x00007f757059add0
  0x00007f757059acdb: jmpq   0x00007f757046ec40
  0x00007f757059ace0: cmpq   $0x0,0x58(%rbx)
  0x00007f757059ace8: je     0x00007f757059add0
  0x00007f757059acee: mov    %rsp,%r13
  0x00007f757059acf1: mov    (%rsp),%rax
  0x00007f757059acf5: and    $0xfffffffffffffff0,%rsp
  0x00007f757059acf9: pushfq 
  0x00007f757059acfa: sub    $0x8,%rsp
  0x00007f757059acfe: mov    %rsp,-0x28(%rsp)
  0x00007f757059ad03: sub    $0x80,%rsp
  0x00007f757059ad0a: mov    %rax,0x78(%rsp)
  0x00007f757059ad0f: mov    %rcx,0x70(%rsp)
  0x00007f757059ad14: mov    %rdx,0x68(%rsp)
  0x00007f757059ad19: mov    %rbx,0x60(%rsp)
  0x00007f757059ad1e: mov    %rbp,0x50(%rsp)
  0x00007f757059ad23: mov    %rsi,0x48(%rsp)
  0x00007f757059ad28: mov    %rdi,0x40(%rsp)
  0x00007f757059ad2d: mov    %r8,0x38(%rsp)
  0x00007f757059ad32: mov    %r9,0x30(%rsp)
  0x00007f757059ad37: mov    %r10,0x28(%rsp)
  0x00007f757059ad3c: mov    %r11,0x20(%rsp)
  0x00007f757059ad41: mov    %r12,0x18(%rsp)
  0x00007f757059ad46: mov    %r13,0x10(%rsp)
  0x00007f757059ad4b: mov    %r14,0x8(%rsp)
  0x00007f757059ad50: mov    %r15,(%rsp)
  0x00007f757059ad54: sub    $0x200,%rsp
  0x00007f757059ad5b: fxsave64 (%rsp)
  0x00007f757059ad60: mov    %rbx,%rdi
  0x00007f757059ad63: mov    %rax,%rsi
  0x00007f757059ad66: callq  0x00007f7585522bca
  0x00007f757059ad6b: fxrstor64 (%rsp)
  0x00007f757059ad70: add    $0x200,%rsp
  0x00007f757059ad77: mov    (%rsp),%r15
  0x00007f757059ad7b: mov    0x8(%rsp),%r14
  0x00007f757059ad80: mov    0x10(%rsp),%r13
  0x00007f757059ad85: mov    0x18(%rsp),%r12
  0x00007f757059ad8a: mov    0x20(%rsp),%r11
  0x00007f757059ad8f: mov    0x28(%rsp),%r10
  0x00007f757059ad94: mov    0x30(%rsp),%r9
  0x00007f757059ad99: mov    0x38(%rsp),%r8
  0x00007f757059ad9e: mov    0x40(%rsp),%rdi
  0x00007f757059ada3: mov    0x48(%rsp),%rsi
  0x00007f757059ada8: mov    0x50(%rsp),%rbp
  0x00007f757059adad: mov    0x60(%rsp),%rbx
  0x00007f757059adb2: mov    0x68(%rsp),%rdx
  0x00007f757059adb7: mov    0x70(%rsp),%rcx
  0x00007f757059adbc: mov    0x78(%rsp),%rax
  0x00007f757059adc1: add    $0x80,%rsp
  0x00007f757059adc8: add    $0x8,%rsp
  0x00007f757059adcc: popfq  
  0x00007f757059adcd: mov    %r13,%rsp
  0x00007f757059add0: pop    %rax
  0x00007f757059add1: mov    %rsp,%r13
  0x00007f757059add4: sub    $0x30,%rsp
  0x00007f757059add8: mov    %rax,(%rsp)
  0x00007f757059addc: mov    %esi,0x20(%rsp)
  0x00007f757059ade0: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059adea: mov    %rax,0x18(%rsp)
  0x00007f757059adef: mov    %rdx,0x10(%rsp)
  0x00007f757059adf4: mov    %ecx,0x8(%rsp)
  0x00007f757059adf8: mov    0x40(%rbx),%rcx
  0x00007f757059adfc: jmpq   *%rcx

AHE@0x00007f758012d5d8: 0xbeb00000 i2c: 0x00007f757059aea0 c2i: 0x00007f757059afde c2iUV: 0x00007f757059afb1
i2c argument handler #135 for: static (JLsun/nio/fs/UnixFileStoreAttributes;)V (601 bytes generated)
c2i argument handler starts at 0x7f757059afde
  0x00007f757059aea0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059aea4: movabs $0x7f757036e3e0,%r11
  0x00007f757059aeae: cmp    %r11,%rax
  0x00007f757059aeb1: jbe    0x00007f757059aeca
  0x00007f757059aeb7: movabs $0x7f757046e3e0,%r11
  0x00007f757059aec1: cmp    %r11,%rax
  0x00007f757059aec4: jb     0x00007f757059af8d
  0x00007f757059aeca: movabs $0x7f7570369420,%r11
  0x00007f757059aed4: cmp    %r11,%rax
  0x00007f757059aed7: jbe    0x00007f757059aef0
  0x00007f757059aedd: movabs $0x7f757036de58,%r11
  0x00007f757059aee7: cmp    %r11,%rax
  0x00007f757059aeea: jb     0x00007f757059af8d
  0x00007f757059aef0: movabs $0x7f75704a9820,%r11
  0x00007f757059aefa: cmp    %r11,%rax
  0x00007f757059aefd: jbe    0x00007f757059af16
  0x00007f757059af03: movabs $0x7f75704af5e0,%r11
  0x00007f757059af0d: cmp    %r11,%rax
  0x00007f757059af10: jb     0x00007f757059af8d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059af16: mov    %rsp,-0x28(%rsp)
  0x00007f757059af1b: sub    $0x80,%rsp
  0x00007f757059af22: mov    %rax,0x78(%rsp)
  0x00007f757059af27: mov    %rcx,0x70(%rsp)
  0x00007f757059af2c: mov    %rdx,0x68(%rsp)
  0x00007f757059af31: mov    %rbx,0x60(%rsp)
  0x00007f757059af36: mov    %rbp,0x50(%rsp)
  0x00007f757059af3b: mov    %rsi,0x48(%rsp)
  0x00007f757059af40: mov    %rdi,0x40(%rsp)
  0x00007f757059af45: mov    %r8,0x38(%rsp)
  0x00007f757059af4a: mov    %r9,0x30(%rsp)
  0x00007f757059af4f: mov    %r10,0x28(%rsp)
  0x00007f757059af54: mov    %r11,0x20(%rsp)
  0x00007f757059af59: mov    %r12,0x18(%rsp)
  0x00007f757059af5e: mov    %r13,0x10(%rsp)
  0x00007f757059af63: mov    %r14,0x8(%rsp)
  0x00007f757059af68: mov    %r15,(%rsp)
  0x00007f757059af6c: movabs $0x7f758592f470,%rdi
  0x00007f757059af76: movabs $0x7f757059af16,%rsi
  0x00007f757059af80: mov    %rsp,%rdx
  0x00007f757059af83: and    $0xfffffffffffffff0,%rsp
  0x00007f757059af87: callq  0x00007f75853729fa
  0x00007f757059af8c: hlt    
  ;; } verify_i2ce 
  0x00007f757059af8d: mov    %rsp,%r11
  0x00007f757059af90: and    $0xfffffffffffffff0,%rsp
  0x00007f757059af94: push   %rax
  0x00007f757059af95: mov    %r11,%rax
  0x00007f757059af98: mov    0x50(%rbx),%r11
  0x00007f757059af9c: mov    0x10(%rax),%rsi
  0x00007f757059afa0: mov    0x8(%rax),%rdx
  0x00007f757059afa4: mov    %rbx,0x258(%r15)
  0x00007f757059afab: mov    %rbx,%rax
  0x00007f757059afae: jmpq   *%r11
  0x00007f757059afb1: mov    0x8(%rsi),%ebx
  0x00007f757059afb4: shl    $0x3,%rbx
  0x00007f757059afb8: cmp    0x10(%rax),%rbx
  0x00007f757059afbc: mov    0x8(%rax),%rbx
  0x00007f757059afc0: je     0x00007f757059afcb
  0x00007f757059afc6: jmpq   0x00007f757046ec40
  0x00007f757059afcb: cmpq   $0x0,0x58(%rbx)
  0x00007f757059afd3: je     0x00007f757059b0ce
  0x00007f757059afd9: jmpq   0x00007f757046ec40
  0x00007f757059afde: cmpq   $0x0,0x58(%rbx)
  0x00007f757059afe6: je     0x00007f757059b0ce
  0x00007f757059afec: mov    %rsp,%r13
  0x00007f757059afef: mov    (%rsp),%rax
  0x00007f757059aff3: and    $0xfffffffffffffff0,%rsp
  0x00007f757059aff7: pushfq 
  0x00007f757059aff8: sub    $0x8,%rsp
  0x00007f757059affc: mov    %rsp,-0x28(%rsp)
  0x00007f757059b001: sub    $0x80,%rsp
  0x00007f757059b008: mov    %rax,0x78(%rsp)
  0x00007f757059b00d: mov    %rcx,0x70(%rsp)
  0x00007f757059b012: mov    %rdx,0x68(%rsp)
  0x00007f757059b017: mov    %rbx,0x60(%rsp)
  0x00007f757059b01c: mov    %rbp,0x50(%rsp)
  0x00007f757059b021: mov    %rsi,0x48(%rsp)
  0x00007f757059b026: mov    %rdi,0x40(%rsp)
  0x00007f757059b02b: mov    %r8,0x38(%rsp)
  0x00007f757059b030: mov    %r9,0x30(%rsp)
  0x00007f757059b035: mov    %r10,0x28(%rsp)
  0x00007f757059b03a: mov    %r11,0x20(%rsp)
  0x00007f757059b03f: mov    %r12,0x18(%rsp)
  0x00007f757059b044: mov    %r13,0x10(%rsp)
  0x00007f757059b049: mov    %r14,0x8(%rsp)
  0x00007f757059b04e: mov    %r15,(%rsp)
  0x00007f757059b052: sub    $0x200,%rsp
  0x00007f757059b059: fxsave64 (%rsp)
  0x00007f757059b05e: mov    %rbx,%rdi
  0x00007f757059b061: mov    %rax,%rsi
  0x00007f757059b064: callq  0x00007f7585522bca
  0x00007f757059b069: fxrstor64 (%rsp)
  0x00007f757059b06e: add    $0x200,%rsp
  0x00007f757059b075: mov    (%rsp),%r15
  0x00007f757059b079: mov    0x8(%rsp),%r14
  0x00007f757059b07e: mov    0x10(%rsp),%r13
  0x00007f757059b083: mov    0x18(%rsp),%r12
  0x00007f757059b088: mov    0x20(%rsp),%r11
  0x00007f757059b08d: mov    0x28(%rsp),%r10
  0x00007f757059b092: mov    0x30(%rsp),%r9
  0x00007f757059b097: mov    0x38(%rsp),%r8
  0x00007f757059b09c: mov    0x40(%rsp),%rdi
  0x00007f757059b0a1: mov    0x48(%rsp),%rsi
  0x00007f757059b0a6: mov    0x50(%rsp),%rbp
  0x00007f757059b0ab: mov    0x60(%rsp),%rbx
  0x00007f757059b0b0: mov    0x68(%rsp),%rdx
  0x00007f757059b0b5: mov    0x70(%rsp),%rcx
  0x00007f757059b0ba: mov    0x78(%rsp),%rax
  0x00007f757059b0bf: add    $0x80,%rsp
  0x00007f757059b0c6: add    $0x8,%rsp
  0x00007f757059b0ca: popfq  
  0x00007f757059b0cb: mov    %r13,%rsp
  0x00007f757059b0ce: pop    %rax
  0x00007f757059b0cf: mov    %rsp,%r13
  0x00007f757059b0d2: sub    $0x20,%rsp
  0x00007f757059b0d6: mov    %rax,(%rsp)
  0x00007f757059b0da: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059b0e4: mov    %rax,0x18(%rsp)
  0x00007f757059b0e9: mov    %rsi,0x10(%rsp)
  0x00007f757059b0ee: mov    %rdx,0x8(%rsp)
  0x00007f757059b0f3: mov    0x40(%rbx),%rcx
  0x00007f757059b0f7: jmpq   *%rcx

AHE@0x00007f758012d620: 0xbebebe00 i2c: 0x00007f757059b1a0 c2i: 0x00007f757059b2e2 c2iUV: 0x00007f757059b2b5
i2c argument handler #136 for: static (JJJ)V (640 bytes generated)
c2i argument handler starts at 0x7f757059b2e2
  0x00007f757059b1a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059b1a4: movabs $0x7f757036e3e0,%r11
  0x00007f757059b1ae: cmp    %r11,%rax
  0x00007f757059b1b1: jbe    0x00007f757059b1ca
  0x00007f757059b1b7: movabs $0x7f757046e3e0,%r11
  0x00007f757059b1c1: cmp    %r11,%rax
  0x00007f757059b1c4: jb     0x00007f757059b28d
  0x00007f757059b1ca: movabs $0x7f7570369420,%r11
  0x00007f757059b1d4: cmp    %r11,%rax
  0x00007f757059b1d7: jbe    0x00007f757059b1f0
  0x00007f757059b1dd: movabs $0x7f757036de58,%r11
  0x00007f757059b1e7: cmp    %r11,%rax
  0x00007f757059b1ea: jb     0x00007f757059b28d
  0x00007f757059b1f0: movabs $0x7f75704a9820,%r11
  0x00007f757059b1fa: cmp    %r11,%rax
  0x00007f757059b1fd: jbe    0x00007f757059b216
  0x00007f757059b203: movabs $0x7f75704af5e0,%r11
  0x00007f757059b20d: cmp    %r11,%rax
  0x00007f757059b210: jb     0x00007f757059b28d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059b216: mov    %rsp,-0x28(%rsp)
  0x00007f757059b21b: sub    $0x80,%rsp
  0x00007f757059b222: mov    %rax,0x78(%rsp)
  0x00007f757059b227: mov    %rcx,0x70(%rsp)
  0x00007f757059b22c: mov    %rdx,0x68(%rsp)
  0x00007f757059b231: mov    %rbx,0x60(%rsp)
  0x00007f757059b236: mov    %rbp,0x50(%rsp)
  0x00007f757059b23b: mov    %rsi,0x48(%rsp)
  0x00007f757059b240: mov    %rdi,0x40(%rsp)
  0x00007f757059b245: mov    %r8,0x38(%rsp)
  0x00007f757059b24a: mov    %r9,0x30(%rsp)
  0x00007f757059b24f: mov    %r10,0x28(%rsp)
  0x00007f757059b254: mov    %r11,0x20(%rsp)
  0x00007f757059b259: mov    %r12,0x18(%rsp)
  0x00007f757059b25e: mov    %r13,0x10(%rsp)
  0x00007f757059b263: mov    %r14,0x8(%rsp)
  0x00007f757059b268: mov    %r15,(%rsp)
  0x00007f757059b26c: movabs $0x7f758592f470,%rdi
  0x00007f757059b276: movabs $0x7f757059b216,%rsi
  0x00007f757059b280: mov    %rsp,%rdx
  0x00007f757059b283: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b287: callq  0x00007f75853729fa
  0x00007f757059b28c: hlt    
  ;; } verify_i2ce 
  0x00007f757059b28d: mov    %rsp,%r11
  0x00007f757059b290: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b294: push   %rax
  0x00007f757059b295: mov    %r11,%rax
  0x00007f757059b298: mov    0x50(%rbx),%r11
  0x00007f757059b29c: mov    0x28(%rax),%rsi
  0x00007f757059b2a0: mov    0x18(%rax),%rdx
  0x00007f757059b2a4: mov    0x8(%rax),%rcx
  0x00007f757059b2a8: mov    %rbx,0x258(%r15)
  0x00007f757059b2af: mov    %rbx,%rax
  0x00007f757059b2b2: jmpq   *%r11
  0x00007f757059b2b5: mov    0x8(%rsi),%ebx
  0x00007f757059b2b8: shl    $0x3,%rbx
  0x00007f757059b2bc: cmp    0x10(%rax),%rbx
  0x00007f757059b2c0: mov    0x8(%rax),%rbx
  0x00007f757059b2c4: je     0x00007f757059b2cf
  0x00007f757059b2ca: jmpq   0x00007f757046ec40
  0x00007f757059b2cf: cmpq   $0x0,0x58(%rbx)
  0x00007f757059b2d7: je     0x00007f757059b3d2
  0x00007f757059b2dd: jmpq   0x00007f757046ec40
  0x00007f757059b2e2: cmpq   $0x0,0x58(%rbx)
  0x00007f757059b2ea: je     0x00007f757059b3d2
  0x00007f757059b2f0: mov    %rsp,%r13
  0x00007f757059b2f3: mov    (%rsp),%rax
  0x00007f757059b2f7: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b2fb: pushfq 
  0x00007f757059b2fc: sub    $0x8,%rsp
  0x00007f757059b300: mov    %rsp,-0x28(%rsp)
  0x00007f757059b305: sub    $0x80,%rsp
  0x00007f757059b30c: mov    %rax,0x78(%rsp)
  0x00007f757059b311: mov    %rcx,0x70(%rsp)
  0x00007f757059b316: mov    %rdx,0x68(%rsp)
  0x00007f757059b31b: mov    %rbx,0x60(%rsp)
  0x00007f757059b320: mov    %rbp,0x50(%rsp)
  0x00007f757059b325: mov    %rsi,0x48(%rsp)
  0x00007f757059b32a: mov    %rdi,0x40(%rsp)
  0x00007f757059b32f: mov    %r8,0x38(%rsp)
  0x00007f757059b334: mov    %r9,0x30(%rsp)
  0x00007f757059b339: mov    %r10,0x28(%rsp)
  0x00007f757059b33e: mov    %r11,0x20(%rsp)
  0x00007f757059b343: mov    %r12,0x18(%rsp)
  0x00007f757059b348: mov    %r13,0x10(%rsp)
  0x00007f757059b34d: mov    %r14,0x8(%rsp)
  0x00007f757059b352: mov    %r15,(%rsp)
  0x00007f757059b356: sub    $0x200,%rsp
  0x00007f757059b35d: fxsave64 (%rsp)
  0x00007f757059b362: mov    %rbx,%rdi
  0x00007f757059b365: mov    %rax,%rsi
  0x00007f757059b368: callq  0x00007f7585522bca
  0x00007f757059b36d: fxrstor64 (%rsp)
  0x00007f757059b372: add    $0x200,%rsp
  0x00007f757059b379: mov    (%rsp),%r15
  0x00007f757059b37d: mov    0x8(%rsp),%r14
  0x00007f757059b382: mov    0x10(%rsp),%r13
  0x00007f757059b387: mov    0x18(%rsp),%r12
  0x00007f757059b38c: mov    0x20(%rsp),%r11
  0x00007f757059b391: mov    0x28(%rsp),%r10
  0x00007f757059b396: mov    0x30(%rsp),%r9
  0x00007f757059b39b: mov    0x38(%rsp),%r8
  0x00007f757059b3a0: mov    0x40(%rsp),%rdi
  0x00007f757059b3a5: mov    0x48(%rsp),%rsi
  0x00007f757059b3aa: mov    0x50(%rsp),%rbp
  0x00007f757059b3af: mov    0x60(%rsp),%rbx
  0x00007f757059b3b4: mov    0x68(%rsp),%rdx
  0x00007f757059b3b9: mov    0x70(%rsp),%rcx
  0x00007f757059b3be: mov    0x78(%rsp),%rax
  0x00007f757059b3c3: add    $0x80,%rsp
  0x00007f757059b3ca: add    $0x8,%rsp
  0x00007f757059b3ce: popfq  
  0x00007f757059b3cf: mov    %r13,%rsp
  0x00007f757059b3d2: pop    %rax
  0x00007f757059b3d3: mov    %rsp,%r13
  0x00007f757059b3d6: sub    $0x40,%rsp
  0x00007f757059b3da: mov    %rax,(%rsp)
  0x00007f757059b3de: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059b3e8: mov    %rax,0x30(%rsp)
  0x00007f757059b3ed: mov    %rsi,0x28(%rsp)
  0x00007f757059b3f2: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059b3fc: mov    %rax,0x20(%rsp)
  0x00007f757059b401: mov    %rdx,0x18(%rsp)
  0x00007f757059b406: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059b410: mov    %rax,0x10(%rsp)
  0x00007f757059b415: mov    %rcx,0x8(%rsp)
  0x00007f757059b41a: mov    0x40(%rbx),%rcx
  0x00007f757059b41e: jmpq   *%rcx

AHE@0x00007f758012d668: 0xabeab000 i2c: 0x00007f757059b4e0 c2i: 0x00007f757059b624 c2iUV: 0x00007f757059b5f7
i2c argument handler #137 for: static (IJILsun/nio/fs/UnixFileAttributes;)V (615 bytes generated)
c2i argument handler starts at 0x7f757059b624
  0x00007f757059b4e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059b4e4: movabs $0x7f757036e3e0,%r11
  0x00007f757059b4ee: cmp    %r11,%rax
  0x00007f757059b4f1: jbe    0x00007f757059b50a
  0x00007f757059b4f7: movabs $0x7f757046e3e0,%r11
  0x00007f757059b501: cmp    %r11,%rax
  0x00007f757059b504: jb     0x00007f757059b5cd
  0x00007f757059b50a: movabs $0x7f7570369420,%r11
  0x00007f757059b514: cmp    %r11,%rax
  0x00007f757059b517: jbe    0x00007f757059b530
  0x00007f757059b51d: movabs $0x7f757036de58,%r11
  0x00007f757059b527: cmp    %r11,%rax
  0x00007f757059b52a: jb     0x00007f757059b5cd
  0x00007f757059b530: movabs $0x7f75704a9820,%r11
  0x00007f757059b53a: cmp    %r11,%rax
  0x00007f757059b53d: jbe    0x00007f757059b556
  0x00007f757059b543: movabs $0x7f75704af5e0,%r11
  0x00007f757059b54d: cmp    %r11,%rax
  0x00007f757059b550: jb     0x00007f757059b5cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059b556: mov    %rsp,-0x28(%rsp)
  0x00007f757059b55b: sub    $0x80,%rsp
  0x00007f757059b562: mov    %rax,0x78(%rsp)
  0x00007f757059b567: mov    %rcx,0x70(%rsp)
  0x00007f757059b56c: mov    %rdx,0x68(%rsp)
  0x00007f757059b571: mov    %rbx,0x60(%rsp)
  0x00007f757059b576: mov    %rbp,0x50(%rsp)
  0x00007f757059b57b: mov    %rsi,0x48(%rsp)
  0x00007f757059b580: mov    %rdi,0x40(%rsp)
  0x00007f757059b585: mov    %r8,0x38(%rsp)
  0x00007f757059b58a: mov    %r9,0x30(%rsp)
  0x00007f757059b58f: mov    %r10,0x28(%rsp)
  0x00007f757059b594: mov    %r11,0x20(%rsp)
  0x00007f757059b599: mov    %r12,0x18(%rsp)
  0x00007f757059b59e: mov    %r13,0x10(%rsp)
  0x00007f757059b5a3: mov    %r14,0x8(%rsp)
  0x00007f757059b5a8: mov    %r15,(%rsp)
  0x00007f757059b5ac: movabs $0x7f758592f470,%rdi
  0x00007f757059b5b6: movabs $0x7f757059b556,%rsi
  0x00007f757059b5c0: mov    %rsp,%rdx
  0x00007f757059b5c3: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b5c7: callq  0x00007f75853729fa
  0x00007f757059b5cc: hlt    
  ;; } verify_i2ce 
  0x00007f757059b5cd: mov    %rsp,%r11
  0x00007f757059b5d0: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b5d4: push   %rax
  0x00007f757059b5d5: mov    %r11,%rax
  0x00007f757059b5d8: mov    0x50(%rbx),%r11
  0x00007f757059b5dc: mov    0x28(%rax),%esi
  0x00007f757059b5df: mov    0x18(%rax),%rdx
  0x00007f757059b5e3: mov    0x10(%rax),%ecx
  0x00007f757059b5e6: mov    0x8(%rax),%r8
  0x00007f757059b5ea: mov    %rbx,0x258(%r15)
  0x00007f757059b5f1: mov    %rbx,%rax
  0x00007f757059b5f4: jmpq   *%r11
  0x00007f757059b5f7: mov    0x8(%rsi),%ebx
  0x00007f757059b5fa: shl    $0x3,%rbx
  0x00007f757059b5fe: cmp    0x10(%rax),%rbx
  0x00007f757059b602: mov    0x8(%rax),%rbx
  0x00007f757059b606: je     0x00007f757059b611
  0x00007f757059b60c: jmpq   0x00007f757046ec40
  0x00007f757059b611: cmpq   $0x0,0x58(%rbx)
  0x00007f757059b619: je     0x00007f757059b714
  0x00007f757059b61f: jmpq   0x00007f757046ec40
  0x00007f757059b624: cmpq   $0x0,0x58(%rbx)
  0x00007f757059b62c: je     0x00007f757059b714
  0x00007f757059b632: mov    %rsp,%r13
  0x00007f757059b635: mov    (%rsp),%rax
  0x00007f757059b639: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b63d: pushfq 
  0x00007f757059b63e: sub    $0x8,%rsp
  0x00007f757059b642: mov    %rsp,-0x28(%rsp)
  0x00007f757059b647: sub    $0x80,%rsp
  0x00007f757059b64e: mov    %rax,0x78(%rsp)
  0x00007f757059b653: mov    %rcx,0x70(%rsp)
  0x00007f757059b658: mov    %rdx,0x68(%rsp)
  0x00007f757059b65d: mov    %rbx,0x60(%rsp)
  0x00007f757059b662: mov    %rbp,0x50(%rsp)
  0x00007f757059b667: mov    %rsi,0x48(%rsp)
  0x00007f757059b66c: mov    %rdi,0x40(%rsp)
  0x00007f757059b671: mov    %r8,0x38(%rsp)
  0x00007f757059b676: mov    %r9,0x30(%rsp)
  0x00007f757059b67b: mov    %r10,0x28(%rsp)
  0x00007f757059b680: mov    %r11,0x20(%rsp)
  0x00007f757059b685: mov    %r12,0x18(%rsp)
  0x00007f757059b68a: mov    %r13,0x10(%rsp)
  0x00007f757059b68f: mov    %r14,0x8(%rsp)
  0x00007f757059b694: mov    %r15,(%rsp)
  0x00007f757059b698: sub    $0x200,%rsp
  0x00007f757059b69f: fxsave64 (%rsp)
  0x00007f757059b6a4: mov    %rbx,%rdi
  0x00007f757059b6a7: mov    %rax,%rsi
  0x00007f757059b6aa: callq  0x00007f7585522bca
  0x00007f757059b6af: fxrstor64 (%rsp)
  0x00007f757059b6b4: add    $0x200,%rsp
  0x00007f757059b6bb: mov    (%rsp),%r15
  0x00007f757059b6bf: mov    0x8(%rsp),%r14
  0x00007f757059b6c4: mov    0x10(%rsp),%r13
  0x00007f757059b6c9: mov    0x18(%rsp),%r12
  0x00007f757059b6ce: mov    0x20(%rsp),%r11
  0x00007f757059b6d3: mov    0x28(%rsp),%r10
  0x00007f757059b6d8: mov    0x30(%rsp),%r9
  0x00007f757059b6dd: mov    0x38(%rsp),%r8
  0x00007f757059b6e2: mov    0x40(%rsp),%rdi
  0x00007f757059b6e7: mov    0x48(%rsp),%rsi
  0x00007f757059b6ec: mov    0x50(%rsp),%rbp
  0x00007f757059b6f1: mov    0x60(%rsp),%rbx
  0x00007f757059b6f6: mov    0x68(%rsp),%rdx
  0x00007f757059b6fb: mov    0x70(%rsp),%rcx
  0x00007f757059b700: mov    0x78(%rsp),%rax
  0x00007f757059b705: add    $0x80,%rsp
  0x00007f757059b70c: add    $0x8,%rsp
  0x00007f757059b710: popfq  
  0x00007f757059b711: mov    %r13,%rsp
  0x00007f757059b714: pop    %rax
  0x00007f757059b715: mov    %rsp,%r13
  0x00007f757059b718: sub    $0x30,%rsp
  0x00007f757059b71c: mov    %rax,(%rsp)
  0x00007f757059b720: mov    %esi,0x28(%rsp)
  0x00007f757059b724: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059b72e: mov    %rax,0x20(%rsp)
  0x00007f757059b733: mov    %rdx,0x18(%rsp)
  0x00007f757059b738: mov    %ecx,0x10(%rsp)
  0x00007f757059b73c: mov    %r8,0x8(%rsp)
  0x00007f757059b741: mov    0x40(%rbx),%rcx
  0x00007f757059b745: jmpq   *%rcx

AHE@0x00007f758012d6b0: 0xabab0000 i2c: 0x00007f757059b820 c2i: 0x00007f757059b964 c2iUV: 0x00007f757059b937
i2c argument handler #138 for: static (I[BILsun/nio/fs/UnixFileAttributes;)V (600 bytes generated)
c2i argument handler starts at 0x7f757059b964
  0x00007f757059b820: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059b824: movabs $0x7f757036e3e0,%r11
  0x00007f757059b82e: cmp    %r11,%rax
  0x00007f757059b831: jbe    0x00007f757059b84a
  0x00007f757059b837: movabs $0x7f757046e3e0,%r11
  0x00007f757059b841: cmp    %r11,%rax
  0x00007f757059b844: jb     0x00007f757059b90d
  0x00007f757059b84a: movabs $0x7f7570369420,%r11
  0x00007f757059b854: cmp    %r11,%rax
  0x00007f757059b857: jbe    0x00007f757059b870
  0x00007f757059b85d: movabs $0x7f757036de58,%r11
  0x00007f757059b867: cmp    %r11,%rax
  0x00007f757059b86a: jb     0x00007f757059b90d
  0x00007f757059b870: movabs $0x7f75704a9820,%r11
  0x00007f757059b87a: cmp    %r11,%rax
  0x00007f757059b87d: jbe    0x00007f757059b896
  0x00007f757059b883: movabs $0x7f75704af5e0,%r11
  0x00007f757059b88d: cmp    %r11,%rax
  0x00007f757059b890: jb     0x00007f757059b90d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059b896: mov    %rsp,-0x28(%rsp)
  0x00007f757059b89b: sub    $0x80,%rsp
  0x00007f757059b8a2: mov    %rax,0x78(%rsp)
  0x00007f757059b8a7: mov    %rcx,0x70(%rsp)
  0x00007f757059b8ac: mov    %rdx,0x68(%rsp)
  0x00007f757059b8b1: mov    %rbx,0x60(%rsp)
  0x00007f757059b8b6: mov    %rbp,0x50(%rsp)
  0x00007f757059b8bb: mov    %rsi,0x48(%rsp)
  0x00007f757059b8c0: mov    %rdi,0x40(%rsp)
  0x00007f757059b8c5: mov    %r8,0x38(%rsp)
  0x00007f757059b8ca: mov    %r9,0x30(%rsp)
  0x00007f757059b8cf: mov    %r10,0x28(%rsp)
  0x00007f757059b8d4: mov    %r11,0x20(%rsp)
  0x00007f757059b8d9: mov    %r12,0x18(%rsp)
  0x00007f757059b8de: mov    %r13,0x10(%rsp)
  0x00007f757059b8e3: mov    %r14,0x8(%rsp)
  0x00007f757059b8e8: mov    %r15,(%rsp)
  0x00007f757059b8ec: movabs $0x7f758592f470,%rdi
  0x00007f757059b8f6: movabs $0x7f757059b896,%rsi
  0x00007f757059b900: mov    %rsp,%rdx
  0x00007f757059b903: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b907: callq  0x00007f75853729fa
  0x00007f757059b90c: hlt    
  ;; } verify_i2ce 
  0x00007f757059b90d: mov    %rsp,%r11
  0x00007f757059b910: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b914: push   %rax
  0x00007f757059b915: mov    %r11,%rax
  0x00007f757059b918: mov    0x50(%rbx),%r11
  0x00007f757059b91c: mov    0x20(%rax),%esi
  0x00007f757059b91f: mov    0x18(%rax),%rdx
  0x00007f757059b923: mov    0x10(%rax),%ecx
  0x00007f757059b926: mov    0x8(%rax),%r8
  0x00007f757059b92a: mov    %rbx,0x258(%r15)
  0x00007f757059b931: mov    %rbx,%rax
  0x00007f757059b934: jmpq   *%r11
  0x00007f757059b937: mov    0x8(%rsi),%ebx
  0x00007f757059b93a: shl    $0x3,%rbx
  0x00007f757059b93e: cmp    0x10(%rax),%rbx
  0x00007f757059b942: mov    0x8(%rax),%rbx
  0x00007f757059b946: je     0x00007f757059b951
  0x00007f757059b94c: jmpq   0x00007f757046ec40
  0x00007f757059b951: cmpq   $0x0,0x58(%rbx)
  0x00007f757059b959: je     0x00007f757059ba54
  0x00007f757059b95f: jmpq   0x00007f757046ec40
  0x00007f757059b964: cmpq   $0x0,0x58(%rbx)
  0x00007f757059b96c: je     0x00007f757059ba54
  0x00007f757059b972: mov    %rsp,%r13
  0x00007f757059b975: mov    (%rsp),%rax
  0x00007f757059b979: and    $0xfffffffffffffff0,%rsp
  0x00007f757059b97d: pushfq 
  0x00007f757059b97e: sub    $0x8,%rsp
  0x00007f757059b982: mov    %rsp,-0x28(%rsp)
  0x00007f757059b987: sub    $0x80,%rsp
  0x00007f757059b98e: mov    %rax,0x78(%rsp)
  0x00007f757059b993: mov    %rcx,0x70(%rsp)
  0x00007f757059b998: mov    %rdx,0x68(%rsp)
  0x00007f757059b99d: mov    %rbx,0x60(%rsp)
  0x00007f757059b9a2: mov    %rbp,0x50(%rsp)
  0x00007f757059b9a7: mov    %rsi,0x48(%rsp)
  0x00007f757059b9ac: mov    %rdi,0x40(%rsp)
  0x00007f757059b9b1: mov    %r8,0x38(%rsp)
  0x00007f757059b9b6: mov    %r9,0x30(%rsp)
  0x00007f757059b9bb: mov    %r10,0x28(%rsp)
  0x00007f757059b9c0: mov    %r11,0x20(%rsp)
  0x00007f757059b9c5: mov    %r12,0x18(%rsp)
  0x00007f757059b9ca: mov    %r13,0x10(%rsp)
  0x00007f757059b9cf: mov    %r14,0x8(%rsp)
  0x00007f757059b9d4: mov    %r15,(%rsp)
  0x00007f757059b9d8: sub    $0x200,%rsp
  0x00007f757059b9df: fxsave64 (%rsp)
  0x00007f757059b9e4: mov    %rbx,%rdi
  0x00007f757059b9e7: mov    %rax,%rsi
  0x00007f757059b9ea: callq  0x00007f7585522bca
  0x00007f757059b9ef: fxrstor64 (%rsp)
  0x00007f757059b9f4: add    $0x200,%rsp
  0x00007f757059b9fb: mov    (%rsp),%r15
  0x00007f757059b9ff: mov    0x8(%rsp),%r14
  0x00007f757059ba04: mov    0x10(%rsp),%r13
  0x00007f757059ba09: mov    0x18(%rsp),%r12
  0x00007f757059ba0e: mov    0x20(%rsp),%r11
  0x00007f757059ba13: mov    0x28(%rsp),%r10
  0x00007f757059ba18: mov    0x30(%rsp),%r9
  0x00007f757059ba1d: mov    0x38(%rsp),%r8
  0x00007f757059ba22: mov    0x40(%rsp),%rdi
  0x00007f757059ba27: mov    0x48(%rsp),%rsi
  0x00007f757059ba2c: mov    0x50(%rsp),%rbp
  0x00007f757059ba31: mov    0x60(%rsp),%rbx
  0x00007f757059ba36: mov    0x68(%rsp),%rdx
  0x00007f757059ba3b: mov    0x70(%rsp),%rcx
  0x00007f757059ba40: mov    0x78(%rsp),%rax
  0x00007f757059ba45: add    $0x80,%rsp
  0x00007f757059ba4c: add    $0x8,%rsp
  0x00007f757059ba50: popfq  
  0x00007f757059ba51: mov    %r13,%rsp
  0x00007f757059ba54: pop    %rax
  0x00007f757059ba55: mov    %rsp,%r13
  0x00007f757059ba58: sub    $0x30,%rsp
  0x00007f757059ba5c: mov    %rax,(%rsp)
  0x00007f757059ba60: mov    %esi,0x20(%rsp)
  0x00007f757059ba64: mov    %rdx,0x18(%rsp)
  0x00007f757059ba69: mov    %ecx,0x10(%rsp)
  0x00007f757059ba6d: mov    %r8,0x8(%rsp)
  0x00007f757059ba72: mov    0x40(%rbx),%rcx
  0x00007f757059ba76: jmpq   *%rcx

AHE@0x00007f758012d6f8: 0xabeabe00 i2c: 0x00007f757059bb20 c2i: 0x00007f757059bc64 c2iUV: 0x00007f757059bc37
i2c argument handler #139 for: static (IJIJ)V (630 bytes generated)
c2i argument handler starts at 0x7f757059bc64
  0x00007f757059bb20: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059bb24: movabs $0x7f757036e3e0,%r11
  0x00007f757059bb2e: cmp    %r11,%rax
  0x00007f757059bb31: jbe    0x00007f757059bb4a
  0x00007f757059bb37: movabs $0x7f757046e3e0,%r11
  0x00007f757059bb41: cmp    %r11,%rax
  0x00007f757059bb44: jb     0x00007f757059bc0d
  0x00007f757059bb4a: movabs $0x7f7570369420,%r11
  0x00007f757059bb54: cmp    %r11,%rax
  0x00007f757059bb57: jbe    0x00007f757059bb70
  0x00007f757059bb5d: movabs $0x7f757036de58,%r11
  0x00007f757059bb67: cmp    %r11,%rax
  0x00007f757059bb6a: jb     0x00007f757059bc0d
  0x00007f757059bb70: movabs $0x7f75704a9820,%r11
  0x00007f757059bb7a: cmp    %r11,%rax
  0x00007f757059bb7d: jbe    0x00007f757059bb96
  0x00007f757059bb83: movabs $0x7f75704af5e0,%r11
  0x00007f757059bb8d: cmp    %r11,%rax
  0x00007f757059bb90: jb     0x00007f757059bc0d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059bb96: mov    %rsp,-0x28(%rsp)
  0x00007f757059bb9b: sub    $0x80,%rsp
  0x00007f757059bba2: mov    %rax,0x78(%rsp)
  0x00007f757059bba7: mov    %rcx,0x70(%rsp)
  0x00007f757059bbac: mov    %rdx,0x68(%rsp)
  0x00007f757059bbb1: mov    %rbx,0x60(%rsp)
  0x00007f757059bbb6: mov    %rbp,0x50(%rsp)
  0x00007f757059bbbb: mov    %rsi,0x48(%rsp)
  0x00007f757059bbc0: mov    %rdi,0x40(%rsp)
  0x00007f757059bbc5: mov    %r8,0x38(%rsp)
  0x00007f757059bbca: mov    %r9,0x30(%rsp)
  0x00007f757059bbcf: mov    %r10,0x28(%rsp)
  0x00007f757059bbd4: mov    %r11,0x20(%rsp)
  0x00007f757059bbd9: mov    %r12,0x18(%rsp)
  0x00007f757059bbde: mov    %r13,0x10(%rsp)
  0x00007f757059bbe3: mov    %r14,0x8(%rsp)
  0x00007f757059bbe8: mov    %r15,(%rsp)
  0x00007f757059bbec: movabs $0x7f758592f470,%rdi
  0x00007f757059bbf6: movabs $0x7f757059bb96,%rsi
  0x00007f757059bc00: mov    %rsp,%rdx
  0x00007f757059bc03: and    $0xfffffffffffffff0,%rsp
  0x00007f757059bc07: callq  0x00007f75853729fa
  0x00007f757059bc0c: hlt    
  ;; } verify_i2ce 
  0x00007f757059bc0d: mov    %rsp,%r11
  0x00007f757059bc10: and    $0xfffffffffffffff0,%rsp
  0x00007f757059bc14: push   %rax
  0x00007f757059bc15: mov    %r11,%rax
  0x00007f757059bc18: mov    0x50(%rbx),%r11
  0x00007f757059bc1c: mov    0x30(%rax),%esi
  0x00007f757059bc1f: mov    0x20(%rax),%rdx
  0x00007f757059bc23: mov    0x18(%rax),%ecx
  0x00007f757059bc26: mov    0x8(%rax),%r8
  0x00007f757059bc2a: mov    %rbx,0x258(%r15)
  0x00007f757059bc31: mov    %rbx,%rax
  0x00007f757059bc34: jmpq   *%r11
  0x00007f757059bc37: mov    0x8(%rsi),%ebx
  0x00007f757059bc3a: shl    $0x3,%rbx
  0x00007f757059bc3e: cmp    0x10(%rax),%rbx
  0x00007f757059bc42: mov    0x8(%rax),%rbx
  0x00007f757059bc46: je     0x00007f757059bc51
  0x00007f757059bc4c: jmpq   0x00007f757046ec40
  0x00007f757059bc51: cmpq   $0x0,0x58(%rbx)
  0x00007f757059bc59: je     0x00007f757059bd54
  0x00007f757059bc5f: jmpq   0x00007f757046ec40
  0x00007f757059bc64: cmpq   $0x0,0x58(%rbx)
  0x00007f757059bc6c: je     0x00007f757059bd54
  0x00007f757059bc72: mov    %rsp,%r13
  0x00007f757059bc75: mov    (%rsp),%rax
  0x00007f757059bc79: and    $0xfffffffffffffff0,%rsp
  0x00007f757059bc7d: pushfq 
  0x00007f757059bc7e: sub    $0x8,%rsp
  0x00007f757059bc82: mov    %rsp,-0x28(%rsp)
  0x00007f757059bc87: sub    $0x80,%rsp
  0x00007f757059bc8e: mov    %rax,0x78(%rsp)
  0x00007f757059bc93: mov    %rcx,0x70(%rsp)
  0x00007f757059bc98: mov    %rdx,0x68(%rsp)
  0x00007f757059bc9d: mov    %rbx,0x60(%rsp)
  0x00007f757059bca2: mov    %rbp,0x50(%rsp)
  0x00007f757059bca7: mov    %rsi,0x48(%rsp)
  0x00007f757059bcac: mov    %rdi,0x40(%rsp)
  0x00007f757059bcb1: mov    %r8,0x38(%rsp)
  0x00007f757059bcb6: mov    %r9,0x30(%rsp)
  0x00007f757059bcbb: mov    %r10,0x28(%rsp)
  0x00007f757059bcc0: mov    %r11,0x20(%rsp)
  0x00007f757059bcc5: mov    %r12,0x18(%rsp)
  0x00007f757059bcca: mov    %r13,0x10(%rsp)
  0x00007f757059bccf: mov    %r14,0x8(%rsp)
  0x00007f757059bcd4: mov    %r15,(%rsp)
  0x00007f757059bcd8: sub    $0x200,%rsp
  0x00007f757059bcdf: fxsave64 (%rsp)
  0x00007f757059bce4: mov    %rbx,%rdi
  0x00007f757059bce7: mov    %rax,%rsi
  0x00007f757059bcea: callq  0x00007f7585522bca
  0x00007f757059bcef: fxrstor64 (%rsp)
  0x00007f757059bcf4: add    $0x200,%rsp
  0x00007f757059bcfb: mov    (%rsp),%r15
  0x00007f757059bcff: mov    0x8(%rsp),%r14
  0x00007f757059bd04: mov    0x10(%rsp),%r13
  0x00007f757059bd09: mov    0x18(%rsp),%r12
  0x00007f757059bd0e: mov    0x20(%rsp),%r11
  0x00007f757059bd13: mov    0x28(%rsp),%r10
  0x00007f757059bd18: mov    0x30(%rsp),%r9
  0x00007f757059bd1d: mov    0x38(%rsp),%r8
  0x00007f757059bd22: mov    0x40(%rsp),%rdi
  0x00007f757059bd27: mov    0x48(%rsp),%rsi
  0x00007f757059bd2c: mov    0x50(%rsp),%rbp
  0x00007f757059bd31: mov    0x60(%rsp),%rbx
  0x00007f757059bd36: mov    0x68(%rsp),%rdx
  0x00007f757059bd3b: mov    0x70(%rsp),%rcx
  0x00007f757059bd40: mov    0x78(%rsp),%rax
  0x00007f757059bd45: add    $0x80,%rsp
  0x00007f757059bd4c: add    $0x8,%rsp
  0x00007f757059bd50: popfq  
  0x00007f757059bd51: mov    %r13,%rsp
  0x00007f757059bd54: pop    %rax
  0x00007f757059bd55: mov    %rsp,%r13
  0x00007f757059bd58: sub    $0x40,%rsp
  0x00007f757059bd5c: mov    %rax,(%rsp)
  0x00007f757059bd60: mov    %esi,0x30(%rsp)
  0x00007f757059bd64: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059bd6e: mov    %rax,0x28(%rsp)
  0x00007f757059bd73: mov    %rdx,0x20(%rsp)
  0x00007f757059bd78: mov    %ecx,0x18(%rsp)
  0x00007f757059bd7c: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059bd86: mov    %rax,0x10(%rsp)
  0x00007f757059bd8b: mov    %r8,0x8(%rsp)
  0x00007f757059bd90: mov    0x40(%rbx),%rcx
  0x00007f757059bd94: jmpq   *%rcx

AHE@0x00007f758012d740: 0xbeabe000 i2c: 0x00007f757059be60 c2i: 0x00007f757059bfa1 c2iUV: 0x00007f757059bf74
i2c argument handler #140 for: static (JIJ)V (623 bytes generated)
c2i argument handler starts at 0x7f757059bfa1
  0x00007f757059be60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059be64: movabs $0x7f757036e3e0,%r11
  0x00007f757059be6e: cmp    %r11,%rax
  0x00007f757059be71: jbe    0x00007f757059be8a
  0x00007f757059be77: movabs $0x7f757046e3e0,%r11
  0x00007f757059be81: cmp    %r11,%rax
  0x00007f757059be84: jb     0x00007f757059bf4d
  0x00007f757059be8a: movabs $0x7f7570369420,%r11
  0x00007f757059be94: cmp    %r11,%rax
  0x00007f757059be97: jbe    0x00007f757059beb0
  0x00007f757059be9d: movabs $0x7f757036de58,%r11
  0x00007f757059bea7: cmp    %r11,%rax
  0x00007f757059beaa: jb     0x00007f757059bf4d
  0x00007f757059beb0: movabs $0x7f75704a9820,%r11
  0x00007f757059beba: cmp    %r11,%rax
  0x00007f757059bebd: jbe    0x00007f757059bed6
  0x00007f757059bec3: movabs $0x7f75704af5e0,%r11
  0x00007f757059becd: cmp    %r11,%rax
  0x00007f757059bed0: jb     0x00007f757059bf4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059bed6: mov    %rsp,-0x28(%rsp)
  0x00007f757059bedb: sub    $0x80,%rsp
  0x00007f757059bee2: mov    %rax,0x78(%rsp)
  0x00007f757059bee7: mov    %rcx,0x70(%rsp)
  0x00007f757059beec: mov    %rdx,0x68(%rsp)
  0x00007f757059bef1: mov    %rbx,0x60(%rsp)
  0x00007f757059bef6: mov    %rbp,0x50(%rsp)
  0x00007f757059befb: mov    %rsi,0x48(%rsp)
  0x00007f757059bf00: mov    %rdi,0x40(%rsp)
  0x00007f757059bf05: mov    %r8,0x38(%rsp)
  0x00007f757059bf0a: mov    %r9,0x30(%rsp)
  0x00007f757059bf0f: mov    %r10,0x28(%rsp)
  0x00007f757059bf14: mov    %r11,0x20(%rsp)
  0x00007f757059bf19: mov    %r12,0x18(%rsp)
  0x00007f757059bf1e: mov    %r13,0x10(%rsp)
  0x00007f757059bf23: mov    %r14,0x8(%rsp)
  0x00007f757059bf28: mov    %r15,(%rsp)
  0x00007f757059bf2c: movabs $0x7f758592f470,%rdi
  0x00007f757059bf36: movabs $0x7f757059bed6,%rsi
  0x00007f757059bf40: mov    %rsp,%rdx
  0x00007f757059bf43: and    $0xfffffffffffffff0,%rsp
  0x00007f757059bf47: callq  0x00007f75853729fa
  0x00007f757059bf4c: hlt    
  ;; } verify_i2ce 
  0x00007f757059bf4d: mov    %rsp,%r11
  0x00007f757059bf50: and    $0xfffffffffffffff0,%rsp
  0x00007f757059bf54: push   %rax
  0x00007f757059bf55: mov    %r11,%rax
  0x00007f757059bf58: mov    0x50(%rbx),%r11
  0x00007f757059bf5c: mov    0x20(%rax),%rsi
  0x00007f757059bf60: mov    0x18(%rax),%edx
  0x00007f757059bf63: mov    0x8(%rax),%rcx
  0x00007f757059bf67: mov    %rbx,0x258(%r15)
  0x00007f757059bf6e: mov    %rbx,%rax
  0x00007f757059bf71: jmpq   *%r11
  0x00007f757059bf74: mov    0x8(%rsi),%ebx
  0x00007f757059bf77: shl    $0x3,%rbx
  0x00007f757059bf7b: cmp    0x10(%rax),%rbx
  0x00007f757059bf7f: mov    0x8(%rax),%rbx
  0x00007f757059bf83: je     0x00007f757059bf8e
  0x00007f757059bf89: jmpq   0x00007f757046ec40
  0x00007f757059bf8e: cmpq   $0x0,0x58(%rbx)
  0x00007f757059bf96: je     0x00007f757059c091
  0x00007f757059bf9c: jmpq   0x00007f757046ec40
  0x00007f757059bfa1: cmpq   $0x0,0x58(%rbx)
  0x00007f757059bfa9: je     0x00007f757059c091
  0x00007f757059bfaf: mov    %rsp,%r13
  0x00007f757059bfb2: mov    (%rsp),%rax
  0x00007f757059bfb6: and    $0xfffffffffffffff0,%rsp
  0x00007f757059bfba: pushfq 
  0x00007f757059bfbb: sub    $0x8,%rsp
  0x00007f757059bfbf: mov    %rsp,-0x28(%rsp)
  0x00007f757059bfc4: sub    $0x80,%rsp
  0x00007f757059bfcb: mov    %rax,0x78(%rsp)
  0x00007f757059bfd0: mov    %rcx,0x70(%rsp)
  0x00007f757059bfd5: mov    %rdx,0x68(%rsp)
  0x00007f757059bfda: mov    %rbx,0x60(%rsp)
  0x00007f757059bfdf: mov    %rbp,0x50(%rsp)
  0x00007f757059bfe4: mov    %rsi,0x48(%rsp)
  0x00007f757059bfe9: mov    %rdi,0x40(%rsp)
  0x00007f757059bfee: mov    %r8,0x38(%rsp)
  0x00007f757059bff3: mov    %r9,0x30(%rsp)
  0x00007f757059bff8: mov    %r10,0x28(%rsp)
  0x00007f757059bffd: mov    %r11,0x20(%rsp)
  0x00007f757059c002: mov    %r12,0x18(%rsp)
  0x00007f757059c007: mov    %r13,0x10(%rsp)
  0x00007f757059c00c: mov    %r14,0x8(%rsp)
  0x00007f757059c011: mov    %r15,(%rsp)
  0x00007f757059c015: sub    $0x200,%rsp
  0x00007f757059c01c: fxsave64 (%rsp)
  0x00007f757059c021: mov    %rbx,%rdi
  0x00007f757059c024: mov    %rax,%rsi
  0x00007f757059c027: callq  0x00007f7585522bca
  0x00007f757059c02c: fxrstor64 (%rsp)
  0x00007f757059c031: add    $0x200,%rsp
  0x00007f757059c038: mov    (%rsp),%r15
  0x00007f757059c03c: mov    0x8(%rsp),%r14
  0x00007f757059c041: mov    0x10(%rsp),%r13
  0x00007f757059c046: mov    0x18(%rsp),%r12
  0x00007f757059c04b: mov    0x20(%rsp),%r11
  0x00007f757059c050: mov    0x28(%rsp),%r10
  0x00007f757059c055: mov    0x30(%rsp),%r9
  0x00007f757059c05a: mov    0x38(%rsp),%r8
  0x00007f757059c05f: mov    0x40(%rsp),%rdi
  0x00007f757059c064: mov    0x48(%rsp),%rsi
  0x00007f757059c069: mov    0x50(%rsp),%rbp
  0x00007f757059c06e: mov    0x60(%rsp),%rbx
  0x00007f757059c073: mov    0x68(%rsp),%rdx
  0x00007f757059c078: mov    0x70(%rsp),%rcx
  0x00007f757059c07d: mov    0x78(%rsp),%rax
  0x00007f757059c082: add    $0x80,%rsp
  0x00007f757059c089: add    $0x8,%rsp
  0x00007f757059c08d: popfq  
  0x00007f757059c08e: mov    %r13,%rsp
  0x00007f757059c091: pop    %rax
  0x00007f757059c092: mov    %rsp,%r13
  0x00007f757059c095: sub    $0x30,%rsp
  0x00007f757059c099: mov    %rax,(%rsp)
  0x00007f757059c09d: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059c0a7: mov    %rax,0x28(%rsp)
  0x00007f757059c0ac: mov    %rsi,0x20(%rsp)
  0x00007f757059c0b1: mov    %edx,0x18(%rsp)
  0x00007f757059c0b5: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059c0bf: mov    %rax,0x10(%rsp)
  0x00007f757059c0c4: mov    %rcx,0x8(%rsp)
  0x00007f757059c0c9: mov    0x40(%rbx),%rcx
  0x00007f757059c0cd: jmpq   *%rcx

AHE@0x00007f758012d788: 0xabeaa000 i2c: 0x00007f757059c1a0 c2i: 0x00007f757059c2e4 c2iUV: 0x00007f757059c2b7
i2c argument handler #141 for: static (IJII)I (615 bytes generated)
c2i argument handler starts at 0x7f757059c2e4
  0x00007f757059c1a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059c1a4: movabs $0x7f757036e3e0,%r11
  0x00007f757059c1ae: cmp    %r11,%rax
  0x00007f757059c1b1: jbe    0x00007f757059c1ca
  0x00007f757059c1b7: movabs $0x7f757046e3e0,%r11
  0x00007f757059c1c1: cmp    %r11,%rax
  0x00007f757059c1c4: jb     0x00007f757059c28d
  0x00007f757059c1ca: movabs $0x7f7570369420,%r11
  0x00007f757059c1d4: cmp    %r11,%rax
  0x00007f757059c1d7: jbe    0x00007f757059c1f0
  0x00007f757059c1dd: movabs $0x7f757036de58,%r11
  0x00007f757059c1e7: cmp    %r11,%rax
  0x00007f757059c1ea: jb     0x00007f757059c28d
  0x00007f757059c1f0: movabs $0x7f75704a9820,%r11
  0x00007f757059c1fa: cmp    %r11,%rax
  0x00007f757059c1fd: jbe    0x00007f757059c216
  0x00007f757059c203: movabs $0x7f75704af5e0,%r11
  0x00007f757059c20d: cmp    %r11,%rax
  0x00007f757059c210: jb     0x00007f757059c28d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059c216: mov    %rsp,-0x28(%rsp)
  0x00007f757059c21b: sub    $0x80,%rsp
  0x00007f757059c222: mov    %rax,0x78(%rsp)
  0x00007f757059c227: mov    %rcx,0x70(%rsp)
  0x00007f757059c22c: mov    %rdx,0x68(%rsp)
  0x00007f757059c231: mov    %rbx,0x60(%rsp)
  0x00007f757059c236: mov    %rbp,0x50(%rsp)
  0x00007f757059c23b: mov    %rsi,0x48(%rsp)
  0x00007f757059c240: mov    %rdi,0x40(%rsp)
  0x00007f757059c245: mov    %r8,0x38(%rsp)
  0x00007f757059c24a: mov    %r9,0x30(%rsp)
  0x00007f757059c24f: mov    %r10,0x28(%rsp)
  0x00007f757059c254: mov    %r11,0x20(%rsp)
  0x00007f757059c259: mov    %r12,0x18(%rsp)
  0x00007f757059c25e: mov    %r13,0x10(%rsp)
  0x00007f757059c263: mov    %r14,0x8(%rsp)
  0x00007f757059c268: mov    %r15,(%rsp)
  0x00007f757059c26c: movabs $0x7f758592f470,%rdi
  0x00007f757059c276: movabs $0x7f757059c216,%rsi
  0x00007f757059c280: mov    %rsp,%rdx
  0x00007f757059c283: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c287: callq  0x00007f75853729fa
  0x00007f757059c28c: hlt    
  ;; } verify_i2ce 
  0x00007f757059c28d: mov    %rsp,%r11
  0x00007f757059c290: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c294: push   %rax
  0x00007f757059c295: mov    %r11,%rax
  0x00007f757059c298: mov    0x50(%rbx),%r11
  0x00007f757059c29c: mov    0x28(%rax),%esi
  0x00007f757059c29f: mov    0x18(%rax),%rdx
  0x00007f757059c2a3: mov    0x10(%rax),%ecx
  0x00007f757059c2a6: mov    0x8(%rax),%r8d
  0x00007f757059c2aa: mov    %rbx,0x258(%r15)
  0x00007f757059c2b1: mov    %rbx,%rax
  0x00007f757059c2b4: jmpq   *%r11
  0x00007f757059c2b7: mov    0x8(%rsi),%ebx
  0x00007f757059c2ba: shl    $0x3,%rbx
  0x00007f757059c2be: cmp    0x10(%rax),%rbx
  0x00007f757059c2c2: mov    0x8(%rax),%rbx
  0x00007f757059c2c6: je     0x00007f757059c2d1
  0x00007f757059c2cc: jmpq   0x00007f757046ec40
  0x00007f757059c2d1: cmpq   $0x0,0x58(%rbx)
  0x00007f757059c2d9: je     0x00007f757059c3d4
  0x00007f757059c2df: jmpq   0x00007f757046ec40
  0x00007f757059c2e4: cmpq   $0x0,0x58(%rbx)
  0x00007f757059c2ec: je     0x00007f757059c3d4
  0x00007f757059c2f2: mov    %rsp,%r13
  0x00007f757059c2f5: mov    (%rsp),%rax
  0x00007f757059c2f9: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c2fd: pushfq 
  0x00007f757059c2fe: sub    $0x8,%rsp
  0x00007f757059c302: mov    %rsp,-0x28(%rsp)
  0x00007f757059c307: sub    $0x80,%rsp
  0x00007f757059c30e: mov    %rax,0x78(%rsp)
  0x00007f757059c313: mov    %rcx,0x70(%rsp)
  0x00007f757059c318: mov    %rdx,0x68(%rsp)
  0x00007f757059c31d: mov    %rbx,0x60(%rsp)
  0x00007f757059c322: mov    %rbp,0x50(%rsp)
  0x00007f757059c327: mov    %rsi,0x48(%rsp)
  0x00007f757059c32c: mov    %rdi,0x40(%rsp)
  0x00007f757059c331: mov    %r8,0x38(%rsp)
  0x00007f757059c336: mov    %r9,0x30(%rsp)
  0x00007f757059c33b: mov    %r10,0x28(%rsp)
  0x00007f757059c340: mov    %r11,0x20(%rsp)
  0x00007f757059c345: mov    %r12,0x18(%rsp)
  0x00007f757059c34a: mov    %r13,0x10(%rsp)
  0x00007f757059c34f: mov    %r14,0x8(%rsp)
  0x00007f757059c354: mov    %r15,(%rsp)
  0x00007f757059c358: sub    $0x200,%rsp
  0x00007f757059c35f: fxsave64 (%rsp)
  0x00007f757059c364: mov    %rbx,%rdi
  0x00007f757059c367: mov    %rax,%rsi
  0x00007f757059c36a: callq  0x00007f7585522bca
  0x00007f757059c36f: fxrstor64 (%rsp)
  0x00007f757059c374: add    $0x200,%rsp
  0x00007f757059c37b: mov    (%rsp),%r15
  0x00007f757059c37f: mov    0x8(%rsp),%r14
  0x00007f757059c384: mov    0x10(%rsp),%r13
  0x00007f757059c389: mov    0x18(%rsp),%r12
  0x00007f757059c38e: mov    0x20(%rsp),%r11
  0x00007f757059c393: mov    0x28(%rsp),%r10
  0x00007f757059c398: mov    0x30(%rsp),%r9
  0x00007f757059c39d: mov    0x38(%rsp),%r8
  0x00007f757059c3a2: mov    0x40(%rsp),%rdi
  0x00007f757059c3a7: mov    0x48(%rsp),%rsi
  0x00007f757059c3ac: mov    0x50(%rsp),%rbp
  0x00007f757059c3b1: mov    0x60(%rsp),%rbx
  0x00007f757059c3b6: mov    0x68(%rsp),%rdx
  0x00007f757059c3bb: mov    0x70(%rsp),%rcx
  0x00007f757059c3c0: mov    0x78(%rsp),%rax
  0x00007f757059c3c5: add    $0x80,%rsp
  0x00007f757059c3cc: add    $0x8,%rsp
  0x00007f757059c3d0: popfq  
  0x00007f757059c3d1: mov    %r13,%rsp
  0x00007f757059c3d4: pop    %rax
  0x00007f757059c3d5: mov    %rsp,%r13
  0x00007f757059c3d8: sub    $0x30,%rsp
  0x00007f757059c3dc: mov    %rax,(%rsp)
  0x00007f757059c3e0: mov    %esi,0x28(%rsp)
  0x00007f757059c3e4: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059c3ee: mov    %rax,0x20(%rsp)
  0x00007f757059c3f3: mov    %rdx,0x18(%rsp)
  0x00007f757059c3f8: mov    %ecx,0x10(%rsp)
  0x00007f757059c3fc: mov    %r8d,0x8(%rsp)
  0x00007f757059c401: mov    0x40(%rbx),%rcx
  0x00007f757059c405: jmpq   *%rcx

AHE@0x00007f758012d7d0: 0xabaa0000 i2c: 0x00007f757059c4e0 c2i: 0x00007f757059c624 c2iUV: 0x00007f757059c5f7
i2c argument handler #142 for: static (I[BII)I (600 bytes generated)
c2i argument handler starts at 0x7f757059c624
  0x00007f757059c4e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059c4e4: movabs $0x7f757036e3e0,%r11
  0x00007f757059c4ee: cmp    %r11,%rax
  0x00007f757059c4f1: jbe    0x00007f757059c50a
  0x00007f757059c4f7: movabs $0x7f757046e3e0,%r11
  0x00007f757059c501: cmp    %r11,%rax
  0x00007f757059c504: jb     0x00007f757059c5cd
  0x00007f757059c50a: movabs $0x7f7570369420,%r11
  0x00007f757059c514: cmp    %r11,%rax
  0x00007f757059c517: jbe    0x00007f757059c530
  0x00007f757059c51d: movabs $0x7f757036de58,%r11
  0x00007f757059c527: cmp    %r11,%rax
  0x00007f757059c52a: jb     0x00007f757059c5cd
  0x00007f757059c530: movabs $0x7f75704a9820,%r11
  0x00007f757059c53a: cmp    %r11,%rax
  0x00007f757059c53d: jbe    0x00007f757059c556
  0x00007f757059c543: movabs $0x7f75704af5e0,%r11
  0x00007f757059c54d: cmp    %r11,%rax
  0x00007f757059c550: jb     0x00007f757059c5cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059c556: mov    %rsp,-0x28(%rsp)
  0x00007f757059c55b: sub    $0x80,%rsp
  0x00007f757059c562: mov    %rax,0x78(%rsp)
  0x00007f757059c567: mov    %rcx,0x70(%rsp)
  0x00007f757059c56c: mov    %rdx,0x68(%rsp)
  0x00007f757059c571: mov    %rbx,0x60(%rsp)
  0x00007f757059c576: mov    %rbp,0x50(%rsp)
  0x00007f757059c57b: mov    %rsi,0x48(%rsp)
  0x00007f757059c580: mov    %rdi,0x40(%rsp)
  0x00007f757059c585: mov    %r8,0x38(%rsp)
  0x00007f757059c58a: mov    %r9,0x30(%rsp)
  0x00007f757059c58f: mov    %r10,0x28(%rsp)
  0x00007f757059c594: mov    %r11,0x20(%rsp)
  0x00007f757059c599: mov    %r12,0x18(%rsp)
  0x00007f757059c59e: mov    %r13,0x10(%rsp)
  0x00007f757059c5a3: mov    %r14,0x8(%rsp)
  0x00007f757059c5a8: mov    %r15,(%rsp)
  0x00007f757059c5ac: movabs $0x7f758592f470,%rdi
  0x00007f757059c5b6: movabs $0x7f757059c556,%rsi
  0x00007f757059c5c0: mov    %rsp,%rdx
  0x00007f757059c5c3: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c5c7: callq  0x00007f75853729fa
  0x00007f757059c5cc: hlt    
  ;; } verify_i2ce 
  0x00007f757059c5cd: mov    %rsp,%r11
  0x00007f757059c5d0: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c5d4: push   %rax
  0x00007f757059c5d5: mov    %r11,%rax
  0x00007f757059c5d8: mov    0x50(%rbx),%r11
  0x00007f757059c5dc: mov    0x20(%rax),%esi
  0x00007f757059c5df: mov    0x18(%rax),%rdx
  0x00007f757059c5e3: mov    0x10(%rax),%ecx
  0x00007f757059c5e6: mov    0x8(%rax),%r8d
  0x00007f757059c5ea: mov    %rbx,0x258(%r15)
  0x00007f757059c5f1: mov    %rbx,%rax
  0x00007f757059c5f4: jmpq   *%r11
  0x00007f757059c5f7: mov    0x8(%rsi),%ebx
  0x00007f757059c5fa: shl    $0x3,%rbx
  0x00007f757059c5fe: cmp    0x10(%rax),%rbx
  0x00007f757059c602: mov    0x8(%rax),%rbx
  0x00007f757059c606: je     0x00007f757059c611
  0x00007f757059c60c: jmpq   0x00007f757046ec40
  0x00007f757059c611: cmpq   $0x0,0x58(%rbx)
  0x00007f757059c619: je     0x00007f757059c714
  0x00007f757059c61f: jmpq   0x00007f757046ec40
  0x00007f757059c624: cmpq   $0x0,0x58(%rbx)
  0x00007f757059c62c: je     0x00007f757059c714
  0x00007f757059c632: mov    %rsp,%r13
  0x00007f757059c635: mov    (%rsp),%rax
  0x00007f757059c639: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c63d: pushfq 
  0x00007f757059c63e: sub    $0x8,%rsp
  0x00007f757059c642: mov    %rsp,-0x28(%rsp)
  0x00007f757059c647: sub    $0x80,%rsp
  0x00007f757059c64e: mov    %rax,0x78(%rsp)
  0x00007f757059c653: mov    %rcx,0x70(%rsp)
  0x00007f757059c658: mov    %rdx,0x68(%rsp)
  0x00007f757059c65d: mov    %rbx,0x60(%rsp)
  0x00007f757059c662: mov    %rbp,0x50(%rsp)
  0x00007f757059c667: mov    %rsi,0x48(%rsp)
  0x00007f757059c66c: mov    %rdi,0x40(%rsp)
  0x00007f757059c671: mov    %r8,0x38(%rsp)
  0x00007f757059c676: mov    %r9,0x30(%rsp)
  0x00007f757059c67b: mov    %r10,0x28(%rsp)
  0x00007f757059c680: mov    %r11,0x20(%rsp)
  0x00007f757059c685: mov    %r12,0x18(%rsp)
  0x00007f757059c68a: mov    %r13,0x10(%rsp)
  0x00007f757059c68f: mov    %r14,0x8(%rsp)
  0x00007f757059c694: mov    %r15,(%rsp)
  0x00007f757059c698: sub    $0x200,%rsp
  0x00007f757059c69f: fxsave64 (%rsp)
  0x00007f757059c6a4: mov    %rbx,%rdi
  0x00007f757059c6a7: mov    %rax,%rsi
  0x00007f757059c6aa: callq  0x00007f7585522bca
  0x00007f757059c6af: fxrstor64 (%rsp)
  0x00007f757059c6b4: add    $0x200,%rsp
  0x00007f757059c6bb: mov    (%rsp),%r15
  0x00007f757059c6bf: mov    0x8(%rsp),%r14
  0x00007f757059c6c4: mov    0x10(%rsp),%r13
  0x00007f757059c6c9: mov    0x18(%rsp),%r12
  0x00007f757059c6ce: mov    0x20(%rsp),%r11
  0x00007f757059c6d3: mov    0x28(%rsp),%r10
  0x00007f757059c6d8: mov    0x30(%rsp),%r9
  0x00007f757059c6dd: mov    0x38(%rsp),%r8
  0x00007f757059c6e2: mov    0x40(%rsp),%rdi
  0x00007f757059c6e7: mov    0x48(%rsp),%rsi
  0x00007f757059c6ec: mov    0x50(%rsp),%rbp
  0x00007f757059c6f1: mov    0x60(%rsp),%rbx
  0x00007f757059c6f6: mov    0x68(%rsp),%rdx
  0x00007f757059c6fb: mov    0x70(%rsp),%rcx
  0x00007f757059c700: mov    0x78(%rsp),%rax
  0x00007f757059c705: add    $0x80,%rsp
  0x00007f757059c70c: add    $0x8,%rsp
  0x00007f757059c710: popfq  
  0x00007f757059c711: mov    %r13,%rsp
  0x00007f757059c714: pop    %rax
  0x00007f757059c715: mov    %rsp,%r13
  0x00007f757059c718: sub    $0x30,%rsp
  0x00007f757059c71c: mov    %rax,(%rsp)
  0x00007f757059c720: mov    %esi,0x20(%rsp)
  0x00007f757059c724: mov    %rdx,0x18(%rsp)
  0x00007f757059c729: mov    %ecx,0x10(%rsp)
  0x00007f757059c72d: mov    %r8d,0x8(%rsp)
  0x00007f757059c732: mov    0x40(%rbx),%rcx
  0x00007f757059c736: jmpq   *%rcx

AHE@0x00007f758012d818: 0xbbbbbbabb0000000 i2c: 0x00007f757059c7e0 c2i: 0x00007f757059c94d c2iUV: 0x00007f757059c920
i2c argument handler #143 for: receiver (Ljava/lang/StringBuffer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V (682 bytes generated)
c2i argument handler starts at 0x7f757059c94d
  0x00007f757059c7e0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059c7e4: movabs $0x7f757036e3e0,%r11
  0x00007f757059c7ee: cmp    %r11,%rax
  0x00007f757059c7f1: jbe    0x00007f757059c80a
  0x00007f757059c7f7: movabs $0x7f757046e3e0,%r11
  0x00007f757059c801: cmp    %r11,%rax
  0x00007f757059c804: jb     0x00007f757059c8cd
  0x00007f757059c80a: movabs $0x7f7570369420,%r11
  0x00007f757059c814: cmp    %r11,%rax
  0x00007f757059c817: jbe    0x00007f757059c830
  0x00007f757059c81d: movabs $0x7f757036de58,%r11
  0x00007f757059c827: cmp    %r11,%rax
  0x00007f757059c82a: jb     0x00007f757059c8cd
  0x00007f757059c830: movabs $0x7f75704a9820,%r11
  0x00007f757059c83a: cmp    %r11,%rax
  0x00007f757059c83d: jbe    0x00007f757059c856
  0x00007f757059c843: movabs $0x7f75704af5e0,%r11
  0x00007f757059c84d: cmp    %r11,%rax
  0x00007f757059c850: jb     0x00007f757059c8cd
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059c856: mov    %rsp,-0x28(%rsp)
  0x00007f757059c85b: sub    $0x80,%rsp
  0x00007f757059c862: mov    %rax,0x78(%rsp)
  0x00007f757059c867: mov    %rcx,0x70(%rsp)
  0x00007f757059c86c: mov    %rdx,0x68(%rsp)
  0x00007f757059c871: mov    %rbx,0x60(%rsp)
  0x00007f757059c876: mov    %rbp,0x50(%rsp)
  0x00007f757059c87b: mov    %rsi,0x48(%rsp)
  0x00007f757059c880: mov    %rdi,0x40(%rsp)
  0x00007f757059c885: mov    %r8,0x38(%rsp)
  0x00007f757059c88a: mov    %r9,0x30(%rsp)
  0x00007f757059c88f: mov    %r10,0x28(%rsp)
  0x00007f757059c894: mov    %r11,0x20(%rsp)
  0x00007f757059c899: mov    %r12,0x18(%rsp)
  0x00007f757059c89e: mov    %r13,0x10(%rsp)
  0x00007f757059c8a3: mov    %r14,0x8(%rsp)
  0x00007f757059c8a8: mov    %r15,(%rsp)
  0x00007f757059c8ac: movabs $0x7f758592f470,%rdi
  0x00007f757059c8b6: movabs $0x7f757059c856,%rsi
  0x00007f757059c8c0: mov    %rsp,%rdx
  0x00007f757059c8c3: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c8c7: callq  0x00007f75853729fa
  0x00007f757059c8cc: hlt    
  ;; } verify_i2ce 
  0x00007f757059c8cd: mov    %rsp,%r11
  0x00007f757059c8d0: sub    $0x20,%rsp
  0x00007f757059c8d4: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c8d8: push   %rax
  0x00007f757059c8d9: mov    %r11,%rax
  0x00007f757059c8dc: mov    0x50(%rbx),%r11
  0x00007f757059c8e0: mov    0x48(%rax),%rsi
  0x00007f757059c8e4: mov    0x40(%rax),%rdx
  0x00007f757059c8e8: mov    0x38(%rax),%rcx
  0x00007f757059c8ec: mov    0x30(%rax),%r8
  0x00007f757059c8f0: mov    0x28(%rax),%r9
  0x00007f757059c8f4: mov    0x20(%rax),%rdi
  0x00007f757059c8f8: mov    0x18(%rax),%r13d
  0x00007f757059c8fc: mov    %r13,0x8(%rsp)
  0x00007f757059c901: mov    0x10(%rax),%r13
  0x00007f757059c905: mov    %r13,0x10(%rsp)
  0x00007f757059c90a: mov    0x8(%rax),%r13
  0x00007f757059c90e: mov    %r13,0x18(%rsp)
  0x00007f757059c913: mov    %rbx,0x258(%r15)
  0x00007f757059c91a: mov    %rbx,%rax
  0x00007f757059c91d: jmpq   *%r11
  0x00007f757059c920: mov    0x8(%rsi),%ebx
  0x00007f757059c923: shl    $0x3,%rbx
  0x00007f757059c927: cmp    0x10(%rax),%rbx
  0x00007f757059c92b: mov    0x8(%rax),%rbx
  0x00007f757059c92f: je     0x00007f757059c93a
  0x00007f757059c935: jmpq   0x00007f757046ec40
  0x00007f757059c93a: cmpq   $0x0,0x58(%rbx)
  0x00007f757059c942: je     0x00007f757059ca3d
  0x00007f757059c948: jmpq   0x00007f757046ec40
  0x00007f757059c94d: cmpq   $0x0,0x58(%rbx)
  0x00007f757059c955: je     0x00007f757059ca3d
  0x00007f757059c95b: mov    %rsp,%r13
  0x00007f757059c95e: mov    (%rsp),%rax
  0x00007f757059c962: and    $0xfffffffffffffff0,%rsp
  0x00007f757059c966: pushfq 
  0x00007f757059c967: sub    $0x8,%rsp
  0x00007f757059c96b: mov    %rsp,-0x28(%rsp)
  0x00007f757059c970: sub    $0x80,%rsp
  0x00007f757059c977: mov    %rax,0x78(%rsp)
  0x00007f757059c97c: mov    %rcx,0x70(%rsp)
  0x00007f757059c981: mov    %rdx,0x68(%rsp)
  0x00007f757059c986: mov    %rbx,0x60(%rsp)
  0x00007f757059c98b: mov    %rbp,0x50(%rsp)
  0x00007f757059c990: mov    %rsi,0x48(%rsp)
  0x00007f757059c995: mov    %rdi,0x40(%rsp)
  0x00007f757059c99a: mov    %r8,0x38(%rsp)
  0x00007f757059c99f: mov    %r9,0x30(%rsp)
  0x00007f757059c9a4: mov    %r10,0x28(%rsp)
  0x00007f757059c9a9: mov    %r11,0x20(%rsp)
  0x00007f757059c9ae: mov    %r12,0x18(%rsp)
  0x00007f757059c9b3: mov    %r13,0x10(%rsp)
  0x00007f757059c9b8: mov    %r14,0x8(%rsp)
  0x00007f757059c9bd: mov    %r15,(%rsp)
  0x00007f757059c9c1: sub    $0x200,%rsp
  0x00007f757059c9c8: fxsave64 (%rsp)
  0x00007f757059c9cd: mov    %rbx,%rdi
  0x00007f757059c9d0: mov    %rax,%rsi
  0x00007f757059c9d3: callq  0x00007f7585522bca
  0x00007f757059c9d8: fxrstor64 (%rsp)
  0x00007f757059c9dd: add    $0x200,%rsp
  0x00007f757059c9e4: mov    (%rsp),%r15
  0x00007f757059c9e8: mov    0x8(%rsp),%r14
  0x00007f757059c9ed: mov    0x10(%rsp),%r13
  0x00007f757059c9f2: mov    0x18(%rsp),%r12
  0x00007f757059c9f7: mov    0x20(%rsp),%r11
  0x00007f757059c9fc: mov    0x28(%rsp),%r10
  0x00007f757059ca01: mov    0x30(%rsp),%r9
  0x00007f757059ca06: mov    0x38(%rsp),%r8
  0x00007f757059ca0b: mov    0x40(%rsp),%rdi
  0x00007f757059ca10: mov    0x48(%rsp),%rsi
  0x00007f757059ca15: mov    0x50(%rsp),%rbp
  0x00007f757059ca1a: mov    0x60(%rsp),%rbx
  0x00007f757059ca1f: mov    0x68(%rsp),%rdx
  0x00007f757059ca24: mov    0x70(%rsp),%rcx
  0x00007f757059ca29: mov    0x78(%rsp),%rax
  0x00007f757059ca2e: add    $0x80,%rsp
  0x00007f757059ca35: add    $0x8,%rsp
  0x00007f757059ca39: popfq  
  0x00007f757059ca3a: mov    %r13,%rsp
  0x00007f757059ca3d: pop    %rax
  0x00007f757059ca3e: mov    %rsp,%r13
  0x00007f757059ca41: sub    $0x50,%rsp
  0x00007f757059ca45: mov    %rax,(%rsp)
  0x00007f757059ca49: mov    %rsi,0x48(%rsp)
  0x00007f757059ca4e: mov    %rdx,0x40(%rsp)
  0x00007f757059ca53: mov    %rcx,0x38(%rsp)
  0x00007f757059ca58: mov    %r8,0x30(%rsp)
  0x00007f757059ca5d: mov    %r9,0x28(%rsp)
  0x00007f757059ca62: mov    %rdi,0x20(%rsp)
  0x00007f757059ca67: mov    0x50(%rsp),%eax
  0x00007f757059ca6b: mov    %rax,0x18(%rsp)
  0x00007f757059ca70: mov    0x58(%rsp),%rax
  0x00007f757059ca75: mov    %rax,0x10(%rsp)
  0x00007f757059ca7a: mov    0x60(%rsp),%rax
  0x00007f757059ca7f: mov    %rax,0x8(%rsp)
  0x00007f757059ca84: mov    0x40(%rbx),%rcx
  0x00007f757059ca88: jmpq   *%rcx

AHE@0x00007f758012d860: 0xbbbbbbabbb000000 i2c: 0x00007f757059cb60 c2i: 0x00007f757059ccd6 c2iUV: 0x00007f757059cca9
i2c argument handler #144 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (701 bytes generated)
c2i argument handler starts at 0x7f757059ccd6
  0x00007f757059cb60: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059cb64: movabs $0x7f757036e3e0,%r11
  0x00007f757059cb6e: cmp    %r11,%rax
  0x00007f757059cb71: jbe    0x00007f757059cb8a
  0x00007f757059cb77: movabs $0x7f757046e3e0,%r11
  0x00007f757059cb81: cmp    %r11,%rax
  0x00007f757059cb84: jb     0x00007f757059cc4d
  0x00007f757059cb8a: movabs $0x7f7570369420,%r11
  0x00007f757059cb94: cmp    %r11,%rax
  0x00007f757059cb97: jbe    0x00007f757059cbb0
  0x00007f757059cb9d: movabs $0x7f757036de58,%r11
  0x00007f757059cba7: cmp    %r11,%rax
  0x00007f757059cbaa: jb     0x00007f757059cc4d
  0x00007f757059cbb0: movabs $0x7f75704a9820,%r11
  0x00007f757059cbba: cmp    %r11,%rax
  0x00007f757059cbbd: jbe    0x00007f757059cbd6
  0x00007f757059cbc3: movabs $0x7f75704af5e0,%r11
  0x00007f757059cbcd: cmp    %r11,%rax
  0x00007f757059cbd0: jb     0x00007f757059cc4d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059cbd6: mov    %rsp,-0x28(%rsp)
  0x00007f757059cbdb: sub    $0x80,%rsp
  0x00007f757059cbe2: mov    %rax,0x78(%rsp)
  0x00007f757059cbe7: mov    %rcx,0x70(%rsp)
  0x00007f757059cbec: mov    %rdx,0x68(%rsp)
  0x00007f757059cbf1: mov    %rbx,0x60(%rsp)
  0x00007f757059cbf6: mov    %rbp,0x50(%rsp)
  0x00007f757059cbfb: mov    %rsi,0x48(%rsp)
  0x00007f757059cc00: mov    %rdi,0x40(%rsp)
  0x00007f757059cc05: mov    %r8,0x38(%rsp)
  0x00007f757059cc0a: mov    %r9,0x30(%rsp)
  0x00007f757059cc0f: mov    %r10,0x28(%rsp)
  0x00007f757059cc14: mov    %r11,0x20(%rsp)
  0x00007f757059cc19: mov    %r12,0x18(%rsp)
  0x00007f757059cc1e: mov    %r13,0x10(%rsp)
  0x00007f757059cc23: mov    %r14,0x8(%rsp)
  0x00007f757059cc28: mov    %r15,(%rsp)
  0x00007f757059cc2c: movabs $0x7f758592f470,%rdi
  0x00007f757059cc36: movabs $0x7f757059cbd6,%rsi
  0x00007f757059cc40: mov    %rsp,%rdx
  0x00007f757059cc43: and    $0xfffffffffffffff0,%rsp
  0x00007f757059cc47: callq  0x00007f75853729fa
  0x00007f757059cc4c: hlt    
  ;; } verify_i2ce 
  0x00007f757059cc4d: mov    %rsp,%r11
  0x00007f757059cc50: sub    $0x20,%rsp
  0x00007f757059cc54: and    $0xfffffffffffffff0,%rsp
  0x00007f757059cc58: push   %rax
  0x00007f757059cc59: mov    %r11,%rax
  0x00007f757059cc5c: mov    0x50(%rbx),%r11
  0x00007f757059cc60: mov    0x50(%rax),%rsi
  0x00007f757059cc64: mov    0x48(%rax),%rdx
  0x00007f757059cc68: mov    0x40(%rax),%rcx
  0x00007f757059cc6c: mov    0x38(%rax),%r8
  0x00007f757059cc70: mov    0x30(%rax),%r9
  0x00007f757059cc74: mov    0x28(%rax),%rdi
  0x00007f757059cc78: mov    0x20(%rax),%r13d
  0x00007f757059cc7c: mov    %r13,0x8(%rsp)
  0x00007f757059cc81: mov    0x18(%rax),%r13
  0x00007f757059cc85: mov    %r13,0x10(%rsp)
  0x00007f757059cc8a: mov    0x10(%rax),%r13
  0x00007f757059cc8e: mov    %r13,0x18(%rsp)
  0x00007f757059cc93: mov    0x8(%rax),%r13
  0x00007f757059cc97: mov    %r13,0x20(%rsp)
  0x00007f757059cc9c: mov    %rbx,0x258(%r15)
  0x00007f757059cca3: mov    %rbx,%rax
  0x00007f757059cca6: jmpq   *%r11
  0x00007f757059cca9: mov    0x8(%rsi),%ebx
  0x00007f757059ccac: shl    $0x3,%rbx
  0x00007f757059ccb0: cmp    0x10(%rax),%rbx
  0x00007f757059ccb4: mov    0x8(%rax),%rbx
  0x00007f757059ccb8: je     0x00007f757059ccc3
  0x00007f757059ccbe: jmpq   0x00007f757046ec40
  0x00007f757059ccc3: cmpq   $0x0,0x58(%rbx)
  0x00007f757059cccb: je     0x00007f757059cdc6
  0x00007f757059ccd1: jmpq   0x00007f757046ec40
  0x00007f757059ccd6: cmpq   $0x0,0x58(%rbx)
  0x00007f757059ccde: je     0x00007f757059cdc6
  0x00007f757059cce4: mov    %rsp,%r13
  0x00007f757059cce7: mov    (%rsp),%rax
  0x00007f757059cceb: and    $0xfffffffffffffff0,%rsp
  0x00007f757059ccef: pushfq 
  0x00007f757059ccf0: sub    $0x8,%rsp
  0x00007f757059ccf4: mov    %rsp,-0x28(%rsp)
  0x00007f757059ccf9: sub    $0x80,%rsp
  0x00007f757059cd00: mov    %rax,0x78(%rsp)
  0x00007f757059cd05: mov    %rcx,0x70(%rsp)
  0x00007f757059cd0a: mov    %rdx,0x68(%rsp)
  0x00007f757059cd0f: mov    %rbx,0x60(%rsp)
  0x00007f757059cd14: mov    %rbp,0x50(%rsp)
  0x00007f757059cd19: mov    %rsi,0x48(%rsp)
  0x00007f757059cd1e: mov    %rdi,0x40(%rsp)
  0x00007f757059cd23: mov    %r8,0x38(%rsp)
  0x00007f757059cd28: mov    %r9,0x30(%rsp)
  0x00007f757059cd2d: mov    %r10,0x28(%rsp)
  0x00007f757059cd32: mov    %r11,0x20(%rsp)
  0x00007f757059cd37: mov    %r12,0x18(%rsp)
  0x00007f757059cd3c: mov    %r13,0x10(%rsp)
  0x00007f757059cd41: mov    %r14,0x8(%rsp)
  0x00007f757059cd46: mov    %r15,(%rsp)
  0x00007f757059cd4a: sub    $0x200,%rsp
  0x00007f757059cd51: fxsave64 (%rsp)
  0x00007f757059cd56: mov    %rbx,%rdi
  0x00007f757059cd59: mov    %rax,%rsi
  0x00007f757059cd5c: callq  0x00007f7585522bca
  0x00007f757059cd61: fxrstor64 (%rsp)
  0x00007f757059cd66: add    $0x200,%rsp
  0x00007f757059cd6d: mov    (%rsp),%r15
  0x00007f757059cd71: mov    0x8(%rsp),%r14
  0x00007f757059cd76: mov    0x10(%rsp),%r13
  0x00007f757059cd7b: mov    0x18(%rsp),%r12
  0x00007f757059cd80: mov    0x20(%rsp),%r11
  0x00007f757059cd85: mov    0x28(%rsp),%r10
  0x00007f757059cd8a: mov    0x30(%rsp),%r9
  0x00007f757059cd8f: mov    0x38(%rsp),%r8
  0x00007f757059cd94: mov    0x40(%rsp),%rdi
  0x00007f757059cd99: mov    0x48(%rsp),%rsi
  0x00007f757059cd9e: mov    0x50(%rsp),%rbp
  0x00007f757059cda3: mov    0x60(%rsp),%rbx
  0x00007f757059cda8: mov    0x68(%rsp),%rdx
  0x00007f757059cdad: mov    0x70(%rsp),%rcx
  0x00007f757059cdb2: mov    0x78(%rsp),%rax
  0x00007f757059cdb7: add    $0x80,%rsp
  0x00007f757059cdbe: add    $0x8,%rsp
  0x00007f757059cdc2: popfq  
  0x00007f757059cdc3: mov    %r13,%rsp
  0x00007f757059cdc6: pop    %rax
  0x00007f757059cdc7: mov    %rsp,%r13
  0x00007f757059cdca: sub    $0x60,%rsp
  0x00007f757059cdce: mov    %rax,(%rsp)
  0x00007f757059cdd2: mov    %rsi,0x50(%rsp)
  0x00007f757059cdd7: mov    %rdx,0x48(%rsp)
  0x00007f757059cddc: mov    %rcx,0x40(%rsp)
  0x00007f757059cde1: mov    %r8,0x38(%rsp)
  0x00007f757059cde6: mov    %r9,0x30(%rsp)
  0x00007f757059cdeb: mov    %rdi,0x28(%rsp)
  0x00007f757059cdf0: mov    0x60(%rsp),%eax
  0x00007f757059cdf4: mov    %rax,0x20(%rsp)
  0x00007f757059cdf9: mov    0x68(%rsp),%rax
  0x00007f757059cdfe: mov    %rax,0x18(%rsp)
  0x00007f757059ce03: mov    0x70(%rsp),%rax
  0x00007f757059ce08: mov    %rax,0x10(%rsp)
  0x00007f757059ce0d: mov    0x78(%rsp),%rax
  0x00007f757059ce12: mov    %rax,0x8(%rsp)
  0x00007f757059ce17: mov    0x40(%rbx),%rcx
  0x00007f757059ce1b: jmpq   *%rcx

AHE@0x00007f758012d8a8: 0xbbbbabbb i2c: 0x00007f757059cee0 c2i: 0x00007f757059d044 c2iUV: 0x00007f757059d017
i2c argument handler #145 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V (664 bytes generated)
c2i argument handler starts at 0x7f757059d044
  0x00007f757059cee0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059cee4: movabs $0x7f757036e3e0,%r11
  0x00007f757059ceee: cmp    %r11,%rax
  0x00007f757059cef1: jbe    0x00007f757059cf0a
  0x00007f757059cef7: movabs $0x7f757046e3e0,%r11
  0x00007f757059cf01: cmp    %r11,%rax
  0x00007f757059cf04: jb     0x00007f757059cfcd
  0x00007f757059cf0a: movabs $0x7f7570369420,%r11
  0x00007f757059cf14: cmp    %r11,%rax
  0x00007f757059cf17: jbe    0x00007f757059cf30
  0x00007f757059cf1d: movabs $0x7f757036de58,%r11
  0x00007f757059cf27: cmp    %r11,%rax
  0x00007f757059cf2a: jb     0x00007f757059cfcd
  0x00007f757059cf30: movabs $0x7f75704a9820,%r11
  0x00007f757059cf3a: cmp    %r11,%rax
  0x00007f757059cf3d: jbe    0x00007f757059cf56
  0x00007f757059cf43: movabs $0x7f75704af5e0,%r11
  0x00007f757059cf4d: cmp    %r11,%rax
  0x00007f757059cf50: jb     0x00007f757059cfcd
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059cf56: mov    %rsp,-0x28(%rsp)
  0x00007f757059cf5b: sub    $0x80,%rsp
  0x00007f757059cf62: mov    %rax,0x78(%rsp)
  0x00007f757059cf67: mov    %rcx,0x70(%rsp)
  0x00007f757059cf6c: mov    %rdx,0x68(%rsp)
  0x00007f757059cf71: mov    %rbx,0x60(%rsp)
  0x00007f757059cf76: mov    %rbp,0x50(%rsp)
  0x00007f757059cf7b: mov    %rsi,0x48(%rsp)
  0x00007f757059cf80: mov    %rdi,0x40(%rsp)
  0x00007f757059cf85: mov    %r8,0x38(%rsp)
  0x00007f757059cf8a: mov    %r9,0x30(%rsp)
  0x00007f757059cf8f: mov    %r10,0x28(%rsp)
  0x00007f757059cf94: mov    %r11,0x20(%rsp)
  0x00007f757059cf99: mov    %r12,0x18(%rsp)
  0x00007f757059cf9e: mov    %r13,0x10(%rsp)
  0x00007f757059cfa3: mov    %r14,0x8(%rsp)
  0x00007f757059cfa8: mov    %r15,(%rsp)
  0x00007f757059cfac: movabs $0x7f758592f470,%rdi
  0x00007f757059cfb6: movabs $0x7f757059cf56,%rsi
  0x00007f757059cfc0: mov    %rsp,%rdx
  0x00007f757059cfc3: and    $0xfffffffffffffff0,%rsp
  0x00007f757059cfc7: callq  0x00007f75853729fa
  0x00007f757059cfcc: hlt    
  ;; } verify_i2ce 
  0x00007f757059cfcd: mov    %rsp,%r11
  0x00007f757059cfd0: sub    $0x10,%rsp
  0x00007f757059cfd4: and    $0xfffffffffffffff0,%rsp
  0x00007f757059cfd8: push   %rax
  0x00007f757059cfd9: mov    %r11,%rax
  0x00007f757059cfdc: mov    0x50(%rbx),%r11
  0x00007f757059cfe0: mov    0x40(%rax),%rsi
  0x00007f757059cfe4: mov    0x38(%rax),%rdx
  0x00007f757059cfe8: mov    0x30(%rax),%rcx
  0x00007f757059cfec: mov    0x28(%rax),%r8
  0x00007f757059cff0: mov    0x20(%rax),%r9d
  0x00007f757059cff4: mov    0x18(%rax),%rdi
  0x00007f757059cff8: mov    0x10(%rax),%r13
  0x00007f757059cffc: mov    %r13,0x8(%rsp)
  0x00007f757059d001: mov    0x8(%rax),%r13
  0x00007f757059d005: mov    %r13,0x10(%rsp)
  0x00007f757059d00a: mov    %rbx,0x258(%r15)
  0x00007f757059d011: mov    %rbx,%rax
  0x00007f757059d014: jmpq   *%r11
  0x00007f757059d017: mov    0x8(%rsi),%ebx
  0x00007f757059d01a: shl    $0x3,%rbx
  0x00007f757059d01e: cmp    0x10(%rax),%rbx
  0x00007f757059d022: mov    0x8(%rax),%rbx
  0x00007f757059d026: je     0x00007f757059d031
  0x00007f757059d02c: jmpq   0x00007f757046ec40
  0x00007f757059d031: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d039: je     0x00007f757059d134
  0x00007f757059d03f: jmpq   0x00007f757046ec40
  0x00007f757059d044: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d04c: je     0x00007f757059d134
  0x00007f757059d052: mov    %rsp,%r13
  0x00007f757059d055: mov    (%rsp),%rax
  0x00007f757059d059: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d05d: pushfq 
  0x00007f757059d05e: sub    $0x8,%rsp
  0x00007f757059d062: mov    %rsp,-0x28(%rsp)
  0x00007f757059d067: sub    $0x80,%rsp
  0x00007f757059d06e: mov    %rax,0x78(%rsp)
  0x00007f757059d073: mov    %rcx,0x70(%rsp)
  0x00007f757059d078: mov    %rdx,0x68(%rsp)
  0x00007f757059d07d: mov    %rbx,0x60(%rsp)
  0x00007f757059d082: mov    %rbp,0x50(%rsp)
  0x00007f757059d087: mov    %rsi,0x48(%rsp)
  0x00007f757059d08c: mov    %rdi,0x40(%rsp)
  0x00007f757059d091: mov    %r8,0x38(%rsp)
  0x00007f757059d096: mov    %r9,0x30(%rsp)
  0x00007f757059d09b: mov    %r10,0x28(%rsp)
  0x00007f757059d0a0: mov    %r11,0x20(%rsp)
  0x00007f757059d0a5: mov    %r12,0x18(%rsp)
  0x00007f757059d0aa: mov    %r13,0x10(%rsp)
  0x00007f757059d0af: mov    %r14,0x8(%rsp)
  0x00007f757059d0b4: mov    %r15,(%rsp)
  0x00007f757059d0b8: sub    $0x200,%rsp
  0x00007f757059d0bf: fxsave64 (%rsp)
  0x00007f757059d0c4: mov    %rbx,%rdi
  0x00007f757059d0c7: mov    %rax,%rsi
  0x00007f757059d0ca: callq  0x00007f7585522bca
  0x00007f757059d0cf: fxrstor64 (%rsp)
  0x00007f757059d0d4: add    $0x200,%rsp
  0x00007f757059d0db: mov    (%rsp),%r15
  0x00007f757059d0df: mov    0x8(%rsp),%r14
  0x00007f757059d0e4: mov    0x10(%rsp),%r13
  0x00007f757059d0e9: mov    0x18(%rsp),%r12
  0x00007f757059d0ee: mov    0x20(%rsp),%r11
  0x00007f757059d0f3: mov    0x28(%rsp),%r10
  0x00007f757059d0f8: mov    0x30(%rsp),%r9
  0x00007f757059d0fd: mov    0x38(%rsp),%r8
  0x00007f757059d102: mov    0x40(%rsp),%rdi
  0x00007f757059d107: mov    0x48(%rsp),%rsi
  0x00007f757059d10c: mov    0x50(%rsp),%rbp
  0x00007f757059d111: mov    0x60(%rsp),%rbx
  0x00007f757059d116: mov    0x68(%rsp),%rdx
  0x00007f757059d11b: mov    0x70(%rsp),%rcx
  0x00007f757059d120: mov    0x78(%rsp),%rax
  0x00007f757059d125: add    $0x80,%rsp
  0x00007f757059d12c: add    $0x8,%rsp
  0x00007f757059d130: popfq  
  0x00007f757059d131: mov    %r13,%rsp
  0x00007f757059d134: pop    %rax
  0x00007f757059d135: mov    %rsp,%r13
  0x00007f757059d138: sub    $0x50,%rsp
  0x00007f757059d13c: mov    %rax,(%rsp)
  0x00007f757059d140: mov    %rsi,0x40(%rsp)
  0x00007f757059d145: mov    %rdx,0x38(%rsp)
  0x00007f757059d14a: mov    %rcx,0x30(%rsp)
  0x00007f757059d14f: mov    %r8,0x28(%rsp)
  0x00007f757059d154: mov    %r9d,0x20(%rsp)
  0x00007f757059d159: mov    %rdi,0x18(%rsp)
  0x00007f757059d15e: mov    0x50(%rsp),%rax
  0x00007f757059d163: mov    %rax,0x10(%rsp)
  0x00007f757059d168: mov    0x58(%rsp),%rax
  0x00007f757059d16d: mov    %rax,0x8(%rsp)
  0x00007f757059d172: mov    0x40(%rbx),%rcx
  0x00007f757059d176: jmpq   *%rcx

AHE@0x00007f758012d8f0: 0xbaabebe0 i2c: 0x00007f757059d220 c2i: 0x00007f757059d368 c2iUV: 0x00007f757059d33b
i2c argument handler #146 for: receiver (IIJJ)I (639 bytes generated)
c2i argument handler starts at 0x7f757059d368
  0x00007f757059d220: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059d224: movabs $0x7f757036e3e0,%r11
  0x00007f757059d22e: cmp    %r11,%rax
  0x00007f757059d231: jbe    0x00007f757059d24a
  0x00007f757059d237: movabs $0x7f757046e3e0,%r11
  0x00007f757059d241: cmp    %r11,%rax
  0x00007f757059d244: jb     0x00007f757059d30d
  0x00007f757059d24a: movabs $0x7f7570369420,%r11
  0x00007f757059d254: cmp    %r11,%rax
  0x00007f757059d257: jbe    0x00007f757059d270
  0x00007f757059d25d: movabs $0x7f757036de58,%r11
  0x00007f757059d267: cmp    %r11,%rax
  0x00007f757059d26a: jb     0x00007f757059d30d
  0x00007f757059d270: movabs $0x7f75704a9820,%r11
  0x00007f757059d27a: cmp    %r11,%rax
  0x00007f757059d27d: jbe    0x00007f757059d296
  0x00007f757059d283: movabs $0x7f75704af5e0,%r11
  0x00007f757059d28d: cmp    %r11,%rax
  0x00007f757059d290: jb     0x00007f757059d30d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059d296: mov    %rsp,-0x28(%rsp)
  0x00007f757059d29b: sub    $0x80,%rsp
  0x00007f757059d2a2: mov    %rax,0x78(%rsp)
  0x00007f757059d2a7: mov    %rcx,0x70(%rsp)
  0x00007f757059d2ac: mov    %rdx,0x68(%rsp)
  0x00007f757059d2b1: mov    %rbx,0x60(%rsp)
  0x00007f757059d2b6: mov    %rbp,0x50(%rsp)
  0x00007f757059d2bb: mov    %rsi,0x48(%rsp)
  0x00007f757059d2c0: mov    %rdi,0x40(%rsp)
  0x00007f757059d2c5: mov    %r8,0x38(%rsp)
  0x00007f757059d2ca: mov    %r9,0x30(%rsp)
  0x00007f757059d2cf: mov    %r10,0x28(%rsp)
  0x00007f757059d2d4: mov    %r11,0x20(%rsp)
  0x00007f757059d2d9: mov    %r12,0x18(%rsp)
  0x00007f757059d2de: mov    %r13,0x10(%rsp)
  0x00007f757059d2e3: mov    %r14,0x8(%rsp)
  0x00007f757059d2e8: mov    %r15,(%rsp)
  0x00007f757059d2ec: movabs $0x7f758592f470,%rdi
  0x00007f757059d2f6: movabs $0x7f757059d296,%rsi
  0x00007f757059d300: mov    %rsp,%rdx
  0x00007f757059d303: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d307: callq  0x00007f75853729fa
  0x00007f757059d30c: hlt    
  ;; } verify_i2ce 
  0x00007f757059d30d: mov    %rsp,%r11
  0x00007f757059d310: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d314: push   %rax
  0x00007f757059d315: mov    %r11,%rax
  0x00007f757059d318: mov    0x50(%rbx),%r11
  0x00007f757059d31c: mov    0x38(%rax),%rsi
  0x00007f757059d320: mov    0x30(%rax),%edx
  0x00007f757059d323: mov    0x28(%rax),%ecx
  0x00007f757059d326: mov    0x18(%rax),%r8
  0x00007f757059d32a: mov    0x8(%rax),%r9
  0x00007f757059d32e: mov    %rbx,0x258(%r15)
  0x00007f757059d335: mov    %rbx,%rax
  0x00007f757059d338: jmpq   *%r11
  0x00007f757059d33b: mov    0x8(%rsi),%ebx
  0x00007f757059d33e: shl    $0x3,%rbx
  0x00007f757059d342: cmp    0x10(%rax),%rbx
  0x00007f757059d346: mov    0x8(%rax),%rbx
  0x00007f757059d34a: je     0x00007f757059d355
  0x00007f757059d350: jmpq   0x00007f757046ec40
  0x00007f757059d355: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d35d: je     0x00007f757059d458
  0x00007f757059d363: jmpq   0x00007f757046ec40
  0x00007f757059d368: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d370: je     0x00007f757059d458
  0x00007f757059d376: mov    %rsp,%r13
  0x00007f757059d379: mov    (%rsp),%rax
  0x00007f757059d37d: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d381: pushfq 
  0x00007f757059d382: sub    $0x8,%rsp
  0x00007f757059d386: mov    %rsp,-0x28(%rsp)
  0x00007f757059d38b: sub    $0x80,%rsp
  0x00007f757059d392: mov    %rax,0x78(%rsp)
  0x00007f757059d397: mov    %rcx,0x70(%rsp)
  0x00007f757059d39c: mov    %rdx,0x68(%rsp)
  0x00007f757059d3a1: mov    %rbx,0x60(%rsp)
  0x00007f757059d3a6: mov    %rbp,0x50(%rsp)
  0x00007f757059d3ab: mov    %rsi,0x48(%rsp)
  0x00007f757059d3b0: mov    %rdi,0x40(%rsp)
  0x00007f757059d3b5: mov    %r8,0x38(%rsp)
  0x00007f757059d3ba: mov    %r9,0x30(%rsp)
  0x00007f757059d3bf: mov    %r10,0x28(%rsp)
  0x00007f757059d3c4: mov    %r11,0x20(%rsp)
  0x00007f757059d3c9: mov    %r12,0x18(%rsp)
  0x00007f757059d3ce: mov    %r13,0x10(%rsp)
  0x00007f757059d3d3: mov    %r14,0x8(%rsp)
  0x00007f757059d3d8: mov    %r15,(%rsp)
  0x00007f757059d3dc: sub    $0x200,%rsp
  0x00007f757059d3e3: fxsave64 (%rsp)
  0x00007f757059d3e8: mov    %rbx,%rdi
  0x00007f757059d3eb: mov    %rax,%rsi
  0x00007f757059d3ee: callq  0x00007f7585522bca
  0x00007f757059d3f3: fxrstor64 (%rsp)
  0x00007f757059d3f8: add    $0x200,%rsp
  0x00007f757059d3ff: mov    (%rsp),%r15
  0x00007f757059d403: mov    0x8(%rsp),%r14
  0x00007f757059d408: mov    0x10(%rsp),%r13
  0x00007f757059d40d: mov    0x18(%rsp),%r12
  0x00007f757059d412: mov    0x20(%rsp),%r11
  0x00007f757059d417: mov    0x28(%rsp),%r10
  0x00007f757059d41c: mov    0x30(%rsp),%r9
  0x00007f757059d421: mov    0x38(%rsp),%r8
  0x00007f757059d426: mov    0x40(%rsp),%rdi
  0x00007f757059d42b: mov    0x48(%rsp),%rsi
  0x00007f757059d430: mov    0x50(%rsp),%rbp
  0x00007f757059d435: mov    0x60(%rsp),%rbx
  0x00007f757059d43a: mov    0x68(%rsp),%rdx
  0x00007f757059d43f: mov    0x70(%rsp),%rcx
  0x00007f757059d444: mov    0x78(%rsp),%rax
  0x00007f757059d449: add    $0x80,%rsp
  0x00007f757059d450: add    $0x8,%rsp
  0x00007f757059d454: popfq  
  0x00007f757059d455: mov    %r13,%rsp
  0x00007f757059d458: pop    %rax
  0x00007f757059d459: mov    %rsp,%r13
  0x00007f757059d45c: sub    $0x40,%rsp
  0x00007f757059d460: mov    %rax,(%rsp)
  0x00007f757059d464: mov    %rsi,0x38(%rsp)
  0x00007f757059d469: mov    %edx,0x30(%rsp)
  0x00007f757059d46d: mov    %ecx,0x28(%rsp)
  0x00007f757059d471: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059d47b: mov    %rax,0x20(%rsp)
  0x00007f757059d480: mov    %r8,0x18(%rsp)
  0x00007f757059d485: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059d48f: mov    %rax,0x10(%rsp)
  0x00007f757059d494: mov    %r9,0x8(%rsp)
  0x00007f757059d499: mov    0x40(%rbx),%rcx
  0x00007f757059d49d: jmpq   *%rcx

AHE@0x00007f758012d938: 0xbabebeb0 i2c: 0x00007f757059d560 c2i: 0x00007f757059d6a9 c2iUV: 0x00007f757059d67c
i2c argument handler #147 for: receiver (IJJLjava/lang/String;)V (641 bytes generated)
c2i argument handler starts at 0x7f757059d6a9
  0x00007f757059d560: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059d564: movabs $0x7f757036e3e0,%r11
  0x00007f757059d56e: cmp    %r11,%rax
  0x00007f757059d571: jbe    0x00007f757059d58a
  0x00007f757059d577: movabs $0x7f757046e3e0,%r11
  0x00007f757059d581: cmp    %r11,%rax
  0x00007f757059d584: jb     0x00007f757059d64d
  0x00007f757059d58a: movabs $0x7f7570369420,%r11
  0x00007f757059d594: cmp    %r11,%rax
  0x00007f757059d597: jbe    0x00007f757059d5b0
  0x00007f757059d59d: movabs $0x7f757036de58,%r11
  0x00007f757059d5a7: cmp    %r11,%rax
  0x00007f757059d5aa: jb     0x00007f757059d64d
  0x00007f757059d5b0: movabs $0x7f75704a9820,%r11
  0x00007f757059d5ba: cmp    %r11,%rax
  0x00007f757059d5bd: jbe    0x00007f757059d5d6
  0x00007f757059d5c3: movabs $0x7f75704af5e0,%r11
  0x00007f757059d5cd: cmp    %r11,%rax
  0x00007f757059d5d0: jb     0x00007f757059d64d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059d5d6: mov    %rsp,-0x28(%rsp)
  0x00007f757059d5db: sub    $0x80,%rsp
  0x00007f757059d5e2: mov    %rax,0x78(%rsp)
  0x00007f757059d5e7: mov    %rcx,0x70(%rsp)
  0x00007f757059d5ec: mov    %rdx,0x68(%rsp)
  0x00007f757059d5f1: mov    %rbx,0x60(%rsp)
  0x00007f757059d5f6: mov    %rbp,0x50(%rsp)
  0x00007f757059d5fb: mov    %rsi,0x48(%rsp)
  0x00007f757059d600: mov    %rdi,0x40(%rsp)
  0x00007f757059d605: mov    %r8,0x38(%rsp)
  0x00007f757059d60a: mov    %r9,0x30(%rsp)
  0x00007f757059d60f: mov    %r10,0x28(%rsp)
  0x00007f757059d614: mov    %r11,0x20(%rsp)
  0x00007f757059d619: mov    %r12,0x18(%rsp)
  0x00007f757059d61e: mov    %r13,0x10(%rsp)
  0x00007f757059d623: mov    %r14,0x8(%rsp)
  0x00007f757059d628: mov    %r15,(%rsp)
  0x00007f757059d62c: movabs $0x7f758592f470,%rdi
  0x00007f757059d636: movabs $0x7f757059d5d6,%rsi
  0x00007f757059d640: mov    %rsp,%rdx
  0x00007f757059d643: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d647: callq  0x00007f75853729fa
  0x00007f757059d64c: hlt    
  ;; } verify_i2ce 
  0x00007f757059d64d: mov    %rsp,%r11
  0x00007f757059d650: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d654: push   %rax
  0x00007f757059d655: mov    %r11,%rax
  0x00007f757059d658: mov    0x50(%rbx),%r11
  0x00007f757059d65c: mov    0x38(%rax),%rsi
  0x00007f757059d660: mov    0x30(%rax),%edx
  0x00007f757059d663: mov    0x20(%rax),%rcx
  0x00007f757059d667: mov    0x10(%rax),%r8
  0x00007f757059d66b: mov    0x8(%rax),%r9
  0x00007f757059d66f: mov    %rbx,0x258(%r15)
  0x00007f757059d676: mov    %rbx,%rax
  0x00007f757059d679: jmpq   *%r11
  0x00007f757059d67c: mov    0x8(%rsi),%ebx
  0x00007f757059d67f: shl    $0x3,%rbx
  0x00007f757059d683: cmp    0x10(%rax),%rbx
  0x00007f757059d687: mov    0x8(%rax),%rbx
  0x00007f757059d68b: je     0x00007f757059d696
  0x00007f757059d691: jmpq   0x00007f757046ec40
  0x00007f757059d696: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d69e: je     0x00007f757059d799
  0x00007f757059d6a4: jmpq   0x00007f757046ec40
  0x00007f757059d6a9: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d6b1: je     0x00007f757059d799
  0x00007f757059d6b7: mov    %rsp,%r13
  0x00007f757059d6ba: mov    (%rsp),%rax
  0x00007f757059d6be: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d6c2: pushfq 
  0x00007f757059d6c3: sub    $0x8,%rsp
  0x00007f757059d6c7: mov    %rsp,-0x28(%rsp)
  0x00007f757059d6cc: sub    $0x80,%rsp
  0x00007f757059d6d3: mov    %rax,0x78(%rsp)
  0x00007f757059d6d8: mov    %rcx,0x70(%rsp)
  0x00007f757059d6dd: mov    %rdx,0x68(%rsp)
  0x00007f757059d6e2: mov    %rbx,0x60(%rsp)
  0x00007f757059d6e7: mov    %rbp,0x50(%rsp)
  0x00007f757059d6ec: mov    %rsi,0x48(%rsp)
  0x00007f757059d6f1: mov    %rdi,0x40(%rsp)
  0x00007f757059d6f6: mov    %r8,0x38(%rsp)
  0x00007f757059d6fb: mov    %r9,0x30(%rsp)
  0x00007f757059d700: mov    %r10,0x28(%rsp)
  0x00007f757059d705: mov    %r11,0x20(%rsp)
  0x00007f757059d70a: mov    %r12,0x18(%rsp)
  0x00007f757059d70f: mov    %r13,0x10(%rsp)
  0x00007f757059d714: mov    %r14,0x8(%rsp)
  0x00007f757059d719: mov    %r15,(%rsp)
  0x00007f757059d71d: sub    $0x200,%rsp
  0x00007f757059d724: fxsave64 (%rsp)
  0x00007f757059d729: mov    %rbx,%rdi
  0x00007f757059d72c: mov    %rax,%rsi
  0x00007f757059d72f: callq  0x00007f7585522bca
  0x00007f757059d734: fxrstor64 (%rsp)
  0x00007f757059d739: add    $0x200,%rsp
  0x00007f757059d740: mov    (%rsp),%r15
  0x00007f757059d744: mov    0x8(%rsp),%r14
  0x00007f757059d749: mov    0x10(%rsp),%r13
  0x00007f757059d74e: mov    0x18(%rsp),%r12
  0x00007f757059d753: mov    0x20(%rsp),%r11
  0x00007f757059d758: mov    0x28(%rsp),%r10
  0x00007f757059d75d: mov    0x30(%rsp),%r9
  0x00007f757059d762: mov    0x38(%rsp),%r8
  0x00007f757059d767: mov    0x40(%rsp),%rdi
  0x00007f757059d76c: mov    0x48(%rsp),%rsi
  0x00007f757059d771: mov    0x50(%rsp),%rbp
  0x00007f757059d776: mov    0x60(%rsp),%rbx
  0x00007f757059d77b: mov    0x68(%rsp),%rdx
  0x00007f757059d780: mov    0x70(%rsp),%rcx
  0x00007f757059d785: mov    0x78(%rsp),%rax
  0x00007f757059d78a: add    $0x80,%rsp
  0x00007f757059d791: add    $0x8,%rsp
  0x00007f757059d795: popfq  
  0x00007f757059d796: mov    %r13,%rsp
  0x00007f757059d799: pop    %rax
  0x00007f757059d79a: mov    %rsp,%r13
  0x00007f757059d79d: sub    $0x40,%rsp
  0x00007f757059d7a1: mov    %rax,(%rsp)
  0x00007f757059d7a5: mov    %rsi,0x38(%rsp)
  0x00007f757059d7aa: mov    %edx,0x30(%rsp)
  0x00007f757059d7ae: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059d7b8: mov    %rax,0x28(%rsp)
  0x00007f757059d7bd: mov    %rcx,0x20(%rsp)
  0x00007f757059d7c2: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059d7cc: mov    %rax,0x18(%rsp)
  0x00007f757059d7d1: mov    %r8,0x10(%rsp)
  0x00007f757059d7d6: mov    %r9,0x8(%rsp)
  0x00007f757059d7db: mov    0x40(%rbx),%rcx
  0x00007f757059d7df: jmpq   *%rcx

AHE@0x00007f758012d980: 0xbaabebeb i2c: 0x00007f757059d8a0 c2i: 0x00007f757059d9ec c2iUV: 0x00007f757059d9bf
i2c argument handler #148 for: receiver (IIJJLjava/lang/String;)V (648 bytes generated)
c2i argument handler starts at 0x7f757059d9ec
  0x00007f757059d8a0: mov    (%rsp),%rax
  ;; verify_i2c { 
  0x00007f757059d8a4: movabs $0x7f757036e3e0,%r11
  0x00007f757059d8ae: cmp    %r11,%rax
  0x00007f757059d8b1: jbe    0x00007f757059d8ca
  0x00007f757059d8b7: movabs $0x7f757046e3e0,%r11
  0x00007f757059d8c1: cmp    %r11,%rax
  0x00007f757059d8c4: jb     0x00007f757059d98d
  0x00007f757059d8ca: movabs $0x7f7570369420,%r11
  0x00007f757059d8d4: cmp    %r11,%rax
  0x00007f757059d8d7: jbe    0x00007f757059d8f0
  0x00007f757059d8dd: movabs $0x7f757036de58,%r11
  0x00007f757059d8e7: cmp    %r11,%rax
  0x00007f757059d8ea: jb     0x00007f757059d98d
  0x00007f757059d8f0: movabs $0x7f75704a9820,%r11
  0x00007f757059d8fa: cmp    %r11,%rax
  0x00007f757059d8fd: jbe    0x00007f757059d916
  0x00007f757059d903: movabs $0x7f75704af5e0,%r11
  0x00007f757059d90d: cmp    %r11,%rax
  0x00007f757059d910: jb     0x00007f757059d98d
  ;; i2c adapter must return to an interpreter frame
  0x00007f757059d916: mov    %rsp,-0x28(%rsp)
  0x00007f757059d91b: sub    $0x80,%rsp
  0x00007f757059d922: mov    %rax,0x78(%rsp)
  0x00007f757059d927: mov    %rcx,0x70(%rsp)
  0x00007f757059d92c: mov    %rdx,0x68(%rsp)
  0x00007f757059d931: mov    %rbx,0x60(%rsp)
  0x00007f757059d936: mov    %rbp,0x50(%rsp)
  0x00007f757059d93b: mov    %rsi,0x48(%rsp)
  0x00007f757059d940: mov    %rdi,0x40(%rsp)
  0x00007f757059d945: mov    %r8,0x38(%rsp)
  0x00007f757059d94a: mov    %r9,0x30(%rsp)
  0x00007f757059d94f: mov    %r10,0x28(%rsp)
  0x00007f757059d954: mov    %r11,0x20(%rsp)
  0x00007f757059d959: mov    %r12,0x18(%rsp)
  0x00007f757059d95e: mov    %r13,0x10(%rsp)
  0x00007f757059d963: mov    %r14,0x8(%rsp)
  0x00007f757059d968: mov    %r15,(%rsp)
  0x00007f757059d96c: movabs $0x7f758592f470,%rdi
  0x00007f757059d976: movabs $0x7f757059d916,%rsi
  0x00007f757059d980: mov    %rsp,%rdx
  0x00007f757059d983: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d987: callq  0x00007f75853729fa
  0x00007f757059d98c: hlt    
  ;; } verify_i2ce 
  0x00007f757059d98d: mov    %rsp,%r11
  0x00007f757059d990: and    $0xfffffffffffffff0,%rsp
  0x00007f757059d994: push   %rax
  0x00007f757059d995: mov    %r11,%rax
  0x00007f757059d998: mov    0x50(%rbx),%r11
  0x00007f757059d99c: mov    0x40(%rax),%rsi
  0x00007f757059d9a0: mov    0x38(%rax),%edx
  0x00007f757059d9a3: mov    0x30(%rax),%ecx
  0x00007f757059d9a6: mov    0x20(%rax),%r8
  0x00007f757059d9aa: mov    0x10(%rax),%r9
  0x00007f757059d9ae: mov    0x8(%rax),%rdi
  0x00007f757059d9b2: mov    %rbx,0x258(%r15)
  0x00007f757059d9b9: mov    %rbx,%rax
  0x00007f757059d9bc: jmpq   *%r11
  0x00007f757059d9bf: mov    0x8(%rsi),%ebx
  0x00007f757059d9c2: shl    $0x3,%rbx
  0x00007f757059d9c6: cmp    0x10(%rax),%rbx
  0x00007f757059d9ca: mov    0x8(%rax),%rbx
  0x00007f757059d9ce: je     0x00007f757059d9d9
  0x00007f757059d9d4: jmpq   0x00007f757046ec40
  0x00007f757059d9d9: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d9e1: je     0x00007f757059dadc
  0x00007f757059d9e7: jmpq   0x00007f757046ec40
  0x00007f757059d9ec: cmpq   $0x0,0x58(%rbx)
  0x00007f757059d9f4: je     0x00007f757059dadc
  0x00007f757059d9fa: mov    %rsp,%r13
  0x00007f757059d9fd: mov    (%rsp),%rax
  0x00007f757059da01: and    $0xfffffffffffffff0,%rsp
  0x00007f757059da05: pushfq 
  0x00007f757059da06: sub    $0x8,%rsp
  0x00007f757059da0a: mov    %rsp,-0x28(%rsp)
  0x00007f757059da0f: sub    $0x80,%rsp
  0x00007f757059da16: mov    %rax,0x78(%rsp)
  0x00007f757059da1b: mov    %rcx,0x70(%rsp)
  0x00007f757059da20: mov    %rdx,0x68(%rsp)
  0x00007f757059da25: mov    %rbx,0x60(%rsp)
  0x00007f757059da2a: mov    %rbp,0x50(%rsp)
  0x00007f757059da2f: mov    %rsi,0x48(%rsp)
  0x00007f757059da34: mov    %rdi,0x40(%rsp)
  0x00007f757059da39: mov    %r8,0x38(%rsp)
  0x00007f757059da3e: mov    %r9,0x30(%rsp)
  0x00007f757059da43: mov    %r10,0x28(%rsp)
  0x00007f757059da48: mov    %r11,0x20(%rsp)
  0x00007f757059da4d: mov    %r12,0x18(%rsp)
  0x00007f757059da52: mov    %r13,0x10(%rsp)
  0x00007f757059da57: mov    %r14,0x8(%rsp)
  0x00007f757059da5c: mov    %r15,(%rsp)
  0x00007f757059da60: sub    $0x200,%rsp
  0x00007f757059da67: fxsave64 (%rsp)
  0x00007f757059da6c: mov    %rbx,%rdi
  0x00007f757059da6f: mov    %rax,%rsi
  0x00007f757059da72: callq  0x00007f7585522bca
  0x00007f757059da77: fxrstor64 (%rsp)
  0x00007f757059da7c: add    $0x200,%rsp
  0x00007f757059da83: mov    (%rsp),%r15
  0x00007f757059da87: mov    0x8(%rsp),%r14
  0x00007f757059da8c: mov    0x10(%rsp),%r13
  0x00007f757059da91: mov    0x18(%rsp),%r12
  0x00007f757059da96: mov    0x20(%rsp),%r11
  0x00007f757059da9b: mov    0x28(%rsp),%r10
  0x00007f757059daa0: mov    0x30(%rsp),%r9
  0x00007f757059daa5: mov    0x38(%rsp),%r8
  0x00007f757059daaa: mov    0x40(%rsp),%rdi
  0x00007f757059daaf: mov    0x48(%rsp),%rsi
  0x00007f757059dab4: mov    0x50(%rsp),%rbp
  0x00007f757059dab9: mov    0x60(%rsp),%rbx
  0x00007f757059dabe: mov    0x68(%rsp),%rdx
  0x00007f757059dac3: mov    0x70(%rsp),%rcx
  0x00007f757059dac8: mov    0x78(%rsp),%rax
  0x00007f757059dacd: add    $0x80,%rsp
  0x00007f757059dad4: add    $0x8,%rsp
  0x00007f757059dad8: popfq  
  0x00007f757059dad9: mov    %r13,%rsp
  0x00007f757059dadc: pop    %rax
  0x00007f757059dadd: mov    %rsp,%r13
  0x00007f757059dae0: sub    $0x50,%rsp
  0x00007f757059dae4: mov    %rax,(%rsp)
  0x00007f757059dae8: mov    %rsi,0x40(%rsp)
  0x00007f757059daed: mov    %edx,0x38(%rsp)
  0x00007f757059daf1: mov    %ecx,0x30(%rsp)
  0x00007f757059daf5: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059daff: mov    %rax,0x28(%rsp)
  0x00007f757059db04: mov    %r8,0x20(%rsp)
  0x00007f757059db09: movabs $0xdeadffffdeadaaab,%rax
  0x00007f757059db13: mov    %rax,0x18(%rsp)
  0x00007f757059db18: mov    %r9,0x10(%rsp)
  0x00007f757059db1d: mov    %rdi,0x8(%rsp)
  0x00007f757059db22: mov    0x40(%rbx),%rcx
  0x00007f757059db26: jmpq   *%rcx

hello world!

RUN FINISHED; exit value 0; real time: 3s; user: 680ms; system: 910ms
