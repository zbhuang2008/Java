ICache::flush_icache_stub [0xa75af040, 0xa75af04a[ (10 bytes)
Loaded disassembler from /home/zbhuang/OpenJDK/jdk8u/build/linux-x86-normal-server-slowdebug/jdk/lib/i386/hsdis-i386.so
[Disassembling for mach='i386']
  0xa75af040: lock addl $0x0,(%esp)
  0xa75af045: mov    0xc(%esp),%eax
  0xa75af049: ret    

VM_Version::get_cpu_info_stub [0xa75af140, 0xa75af339[ (505 bytes)
  0xa75af140: push   %ebp
  0xa75af141: mov    0x8(%esp),%ebp
  0xa75af145: push   %ebx
  0xa75af146: push   %esi
  0xa75af147: pushf  
  0xa75af148: pop    %eax
  0xa75af149: push   %eax
  0xa75af14a: mov    %eax,%ecx
  0xa75af14c: xor    $0x40000,%eax
  0xa75af152: push   %eax
  0xa75af153: popf   
  0xa75af154: pushf  
  0xa75af155: pop    %eax
  0xa75af156: cmp    %ecx,%eax
  0xa75af158: jne    0xa75af167
  0xa75af15a: mov    $0x300,%eax
  0xa75af15f: mov    %eax,0x10(%ebp)
  0xa75af162: jmp    0xa75af334
  0xa75af167: mov    %ecx,%eax
  0xa75af169: xor    $0x200000,%eax
  0xa75af16f: push   %eax
  0xa75af170: popf   
  0xa75af171: pushf  
  0xa75af172: pop    %eax
  0xa75af173: cmp    %eax,%ecx
  0xa75af175: jne    0xa75af184
  0xa75af177: mov    $0x400,%eax
  0xa75af17c: mov    %eax,0x10(%ebp)
  0xa75af17f: jmp    0xa75af334
  0xa75af184: xor    %eax,%eax
  0xa75af186: cpuid  
  0xa75af188: or     %eax,%eax
  0xa75af18a: je     0xa75af177
  0xa75af18c: lea    0x0(%ebp),%esi
  0xa75af18f: mov    %eax,(%esi)
  0xa75af191: mov    %ebx,0x4(%esi)
  0xa75af194: mov    %ecx,0x8(%esi)
  0xa75af197: mov    %edx,0xc(%esi)
  0xa75af19a: cmp    $0xa,%eax
  0xa75af19d: jbe    0xa75af208
  0xa75af19f: mov    $0xb,%eax
  0xa75af1a4: xor    %ecx,%ecx
  0xa75af1a6: cpuid  
  0xa75af1a8: lea    0x40(%ebp),%esi
  0xa75af1ab: mov    %eax,(%esi)
  0xa75af1ad: mov    %ebx,0x4(%esi)
  0xa75af1b0: mov    %ecx,0x8(%esi)
  0xa75af1b3: mov    %edx,0xc(%esi)
  0xa75af1b6: mov    $0xb,%eax
  0xa75af1bb: mov    $0x1,%ecx
  0xa75af1c0: cpuid  
  0xa75af1c2: push   %eax
  0xa75af1c3: and    $0x1f,%eax
  0xa75af1c6: or     %ebx,%eax
  0xa75af1c8: and    $0xffff,%eax
  0xa75af1ce: pop    %eax
  0xa75af1cf: je     0xa75af208
  0xa75af1d1: lea    0x50(%ebp),%esi
  0xa75af1d4: mov    %eax,(%esi)
  0xa75af1d6: mov    %ebx,0x4(%esi)
  0xa75af1d9: mov    %ecx,0x8(%esi)
  0xa75af1dc: mov    %edx,0xc(%esi)
  0xa75af1df: mov    $0xb,%eax
  0xa75af1e4: mov    $0x2,%ecx
  0xa75af1e9: cpuid  
  0xa75af1eb: push   %eax
  0xa75af1ec: and    $0x1f,%eax
  0xa75af1ef: or     %ebx,%eax
  0xa75af1f1: and    $0xffff,%eax
  0xa75af1f7: pop    %eax
  0xa75af1f8: je     0xa75af208
  0xa75af1fa: lea    0x60(%ebp),%esi
  0xa75af1fd: mov    %eax,(%esi)
  0xa75af1ff: mov    %ebx,0x4(%esi)
  0xa75af202: mov    %ecx,0x8(%esi)
  0xa75af205: mov    %edx,0xc(%esi)
  0xa75af208: mov    $0x4,%eax
  0xa75af20d: cmp    0x0(%ebp),%eax
  0xa75af210: jg     0xa75af22d
  0xa75af212: xor    %ecx,%ecx
  0xa75af214: cpuid  
  0xa75af216: push   %eax
  0xa75af217: and    $0x1f,%eax
  0xa75af21a: or     %eax,%eax
  0xa75af21c: pop    %eax
  0xa75af21d: je     0xa75af22d
  0xa75af21f: lea    0x20(%ebp),%esi
  0xa75af222: mov    %eax,(%esi)
  0xa75af224: mov    %ebx,0x4(%esi)
  0xa75af227: mov    %ecx,0x8(%esi)
  0xa75af22a: mov    %edx,0xc(%esi)
  0xa75af22d: mov    $0x1,%eax
  0xa75af232: cpuid  
  0xa75af234: lea    0x10(%ebp),%esi
  0xa75af237: mov    %eax,(%esi)
  0xa75af239: mov    %ebx,0x4(%esi)
  0xa75af23c: mov    %ecx,0x8(%esi)
  0xa75af23f: mov    %edx,0xc(%esi)
  0xa75af242: and    $0x18000000,%ecx
  0xa75af248: cmp    $0x18000000,%ecx
  0xa75af24e: jne    0xa75af293
  0xa75af250: xor    %ecx,%ecx
  0xa75af252: xgetbv 
  0xa75af255: lea    0xf0(%ebp),%esi
  0xa75af25b: mov    %eax,(%esi)
  0xa75af25d: mov    %edx,0x4(%esi)
  0xa75af260: and    $0x6,%eax
  0xa75af263: cmp    $0x6,%eax
  0xa75af266: jne    0xa75af293
  0xa75af268: mov    $0xcafebabe,%ecx
  0xa75af26d: vmovd  %ecx,%xmm0
  0xa75af271: vpshufd $0x0,%xmm0,%xmm0
  0xa75af276: vinsertf128 $0x1,%xmm0,%ymm0,%ymm0
  0xa75af27c: vmovdqu %ymm0,%ymm7
  0xa75af280: xor    %esi,%esi
  0xa75af282: mov    (%esi),%eax
  0xa75af284: lea    0xf8(%ebp),%esi
  0xa75af28a: vmovdqu %ymm0,(%esi)
  0xa75af28e: vmovdqu %ymm7,0x20(%esi)
  0xa75af293: mov    $0x7,%eax
  0xa75af298: cmp    0x0(%ebp),%eax
  0xa75af29b: jg     0xa75af2a9
  0xa75af29d: xor    %ecx,%ecx
  0xa75af29f: cpuid  
  0xa75af2a1: lea    0x30(%ebp),%esi
  0xa75af2a4: mov    %eax,(%esi)
  0xa75af2a6: mov    %ebx,0x4(%esi)
  0xa75af2a9: mov    $0x80000000,%eax
  0xa75af2ae: cpuid  
  0xa75af2b0: cmp    $0x80000000,%eax
  0xa75af2b6: jbe    0xa75af334
  0xa75af2bc: cmp    $0x80000004,%eax
  0xa75af2c2: jbe    0xa75af31c
  0xa75af2c4: cmp    $0x80000006,%eax
  0xa75af2ca: jbe    0xa75af304
  0xa75af2cc: cmp    $0x80000007,%eax
  0xa75af2d2: jbe    0xa75af2ec
  0xa75af2d4: mov    $0x80000008,%eax
  0xa75af2d9: cpuid  
  0xa75af2db: lea    0xe0(%ebp),%esi
  0xa75af2e1: mov    %eax,(%esi)
  0xa75af2e3: mov    %ebx,0x4(%esi)
  0xa75af2e6: mov    %ecx,0x8(%esi)
  0xa75af2e9: mov    %edx,0xc(%esi)
  0xa75af2ec: mov    $0x80000007,%eax
  0xa75af2f1: cpuid  
  0xa75af2f3: lea    0xd0(%ebp),%esi
  0xa75af2f9: mov    %eax,(%esi)
  0xa75af2fb: mov    %ebx,0x4(%esi)
  0xa75af2fe: mov    %ecx,0x8(%esi)
  0xa75af301: mov    %edx,0xc(%esi)
  0xa75af304: mov    $0x80000005,%eax
  0xa75af309: cpuid  
  0xa75af30b: lea    0xc0(%ebp),%esi
  0xa75af311: mov    %eax,(%esi)
  0xa75af313: mov    %ebx,0x4(%esi)
  0xa75af316: mov    %ecx,0x8(%esi)
  0xa75af319: mov    %edx,0xc(%esi)
  0xa75af31c: mov    $0x80000001,%eax
  0xa75af321: cpuid  
  0xa75af323: lea    0x80(%ebp),%esi
  0xa75af329: mov    %eax,(%esi)
  0xa75af32b: mov    %ebx,0x4(%esi)
  0xa75af32e: mov    %ecx,0x8(%esi)
  0xa75af331: mov    %edx,0xc(%esi)
  0xa75af334: popf   
  0xa75af335: pop    %esi
  0xa75af336: pop    %ebx
  0xa75af337: pop    %ebp
  0xa75af338: ret    

Decoding RuntimeStub - StackOverflowError throw_exception 0xa75b1988
  0xa75b19e0: mov    %esp,%ebx
  0xa75b19e2: shr    $0xc,%ebx
  0xa75b19e5: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa75b19ec: push   %ebp
  0xa75b19ed: mov    %esp,%ebp
  0xa75b19ef: sub    $0xc,%esp
  0xa75b19f2: mov    %ebx,(%esp)
  0xa75b19f5: mov    %ebp,0x148(%ebx)
  0xa75b19fb: mov    %esp,0x140(%ebx)
  ;; call runtime_entry
  0xa75b1a01: call   0xb71d170c
  0xa75b1a06: mov    %esp,%ebx
  0xa75b1a08: shr    $0xc,%ebx
  0xa75b1a0b: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa75b1a12: movl   $0x0,0x140(%ebx)
  0xa75b1a1c: movl   $0x0,0x148(%ebx)
  0xa75b1a26: movl   $0x0,0x144(%ebx)
  0xa75b1a30: mov    %ebp,%esp
  0xa75b1a32: pop    %ebp
  0xa75b1a33: cmpl   $0x0,0x4(%ebx)
  0xa75b1a3a: jne    0xa75b1a51
  0xa75b1a40: push   $0xb735fe8b
  0xa75b1a45: call   0xa75b1a4a
  0xa75b1a4a: pusha  
  0xa75b1a4b: call   0xb7052f32
  0xa75b1a50: hlt    
  0xa75b1a51: jmp    0xa75af400
  0xa75b1a56: hlt    
  0xa75b1a57: hlt    

StubRoutines::forward exception [0xa75af400, 0xa75af477[ (119 bytes)
  0xa75af400: mov    %esp,%ecx
  0xa75af402: shr    $0xc,%ecx
  0xa75af405: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa75af40c: cmpl   $0x0,0x4(%ecx)
  0xa75af413: jne    0xa75af42a
  0xa75af419: push   $0xb75aea80
  0xa75af41e: call   0xa75af423
  0xa75af423: pusha  
  0xa75af424: call   0xb7052f32
  0xa75af429: hlt    
  0xa75af42a: mov    %esp,%ecx
  0xa75af42c: shr    $0xc,%ecx
  0xa75af42f: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa75af436: mov    (%esp),%edx
  ;; call exception_handler_for_return_address
  0xa75af439: push   %edx
  0xa75af43a: push   %ecx
  0xa75af43b: call   0xb71d0228
  0xa75af440: add    $0x8,%esp
  0xa75af443: mov    %eax,%ebx
  0xa75af445: mov    %esp,%ecx
  0xa75af447: shr    $0xc,%ecx
  0xa75af44a: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa75af451: pop    %edx
  0xa75af452: mov    0x4(%ecx),%eax
  0xa75af455: movl   $0x0,0x4(%ecx)
  0xa75af45c: test   %eax,%eax
  0xa75af45e: jne    0xa75af475
  0xa75af464: push   $0xb75aeae8
  0xa75af469: call   0xa75af46e
  0xa75af46e: pusha  
  0xa75af46f: call   0xb7052f32
  0xa75af474: hlt    
  0xa75af475: jmp    *%ebx

StubRoutines::call_stub [0xa75af477, 0xa75af548[ (209 bytes)
  0xa75af477: push   %ebp
  0xa75af478: mov    %esp,%ebp
  0xa75af47a: mov    0x20(%ebp),%ecx
  0xa75af47d: shl    $0x2,%ecx
  0xa75af480: add    $0x10,%ecx
  0xa75af483: sub    %ecx,%esp
  0xa75af485: and    $0xfffffff0,%esp
  0xa75af488: mov    %edi,-0x4(%ebp)
  0xa75af48b: mov    %esi,-0x8(%ebp)
  0xa75af48e: mov    %ebx,-0xc(%ebp)
  0xa75af491: stmxcsr -0x10(%ebp)
  0xa75af495: mov    -0x10(%ebp),%eax
  0xa75af498: and    $0xffc0,%eax
  0xa75af49e: cmp    0xb792d12c,%eax
  0xa75af4a4: je     0xa75af4b1
  0xa75af4aa: ldmxcsr 0xb792d12c
  0xa75af4b1: fldcw  0xb792d11c
  0xa75af4b7: mov    0x24(%ebp),%ecx
  0xa75af4ba: cmpl   $0x0,0x4(%ecx)
  0xa75af4c1: je     0xa75af4d8
  0xa75af4c7: push   $0xb75ae8b8
  0xa75af4cc: call   0xa75af4d1
  0xa75af4d1: pusha  
  0xa75af4d2: call   0xb7052f32
  0xa75af4d7: hlt    
  ;; pass parameters if any
  0xa75af4d8: mov    0x20(%ebp),%ecx
  0xa75af4db: test   %ecx,%ecx
  0xa75af4dd: je     0xa75af4f3
  0xa75af4e3: mov    0x1c(%ebp),%edx
  0xa75af4e6: xor    %ebx,%ebx
  ;; loop:
  0xa75af4e8: mov    -0x4(%edx,%ecx,4),%eax
  0xa75af4ec: mov    %eax,(%esp,%ebx,4)
  0xa75af4ef: inc    %ebx
  0xa75af4f0: dec    %ecx
  0xa75af4f1: jne    0xa75af4e8
  ;; parameters_done:
  0xa75af4f3: mov    0x14(%ebp),%ebx
  0xa75af4f6: mov    0x18(%ebp),%eax
  0xa75af4f9: mov    %esp,%esi
  ;; call Java function
  0xa75af4fb: call   *%eax
  ;; call_stub_return_address:
  ;; L_skip:
  0xa75af4fd: mov    0xc(%ebp),%edi
  0xa75af500: mov    0x10(%ebp),%esi
  0xa75af503: cmp    $0xb,%esi
  0xa75af506: je     0xa75af535
  0xa75af50c: cmp    $0x6,%esi
  0xa75af50f: je     0xa75af53c
  0xa75af515: cmp    $0x7,%esi
  0xa75af518: je     0xa75af542
  0xa75af51e: mov    %eax,(%edi)
  ;; exit:
  0xa75af520: lea    -0x10(%ebp),%esp
  0xa75af523: ldmxcsr -0x10(%ebp)
  0xa75af527: mov    -0xc(%ebp),%ebx
  0xa75af52a: mov    -0x8(%ebp),%esi
  0xa75af52d: mov    -0x4(%ebp),%edi
  0xa75af530: add    $0x10,%esp
  0xa75af533: pop    %ebp
  0xa75af534: ret    
  ;; is_long:
  0xa75af535: mov    %eax,(%edi)
  0xa75af537: mov    %edx,0x4(%edi)
  0xa75af53a: jmp    0xa75af520
  ;; is_float:
  0xa75af53c: vmovss %xmm0,(%edi)
  0xa75af540: jmp    0xa75af520
  ;; is_double:
  0xa75af542: vmovsd %xmm0,(%edi)
  0xa75af546: jmp    0xa75af520

StubRoutines::catch_exception [0xa75af548, 0xa75af586[ (62 bytes)
  0xa75af548: mov    0x24(%ebp),%ecx
  0xa75af54b: mov    %esp,%ebx
  0xa75af54d: shr    $0xc,%ebx
  0xa75af550: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa75af557: cmp    %ecx,%ebx
  0xa75af559: je     0xa75af570
  0xa75af55f: push   $0xb75ae9ac
  0xa75af564: call   0xa75af569
  0xa75af569: pusha  
  0xa75af56a: call   0xb7052f32
  0xa75af56f: hlt    
  0xa75af570: mov    %eax,0x4(%ecx)
  0xa75af573: movl   $0xb75ae854,0x8(%ecx)
  0xa75af57a: movl   $0x167,0xc(%ecx)
  0xa75af581: jmp    0xa75af4fd

StubRoutines::atomic_xchg [0xa75af586, 0xa75af593[ (13 bytes)
  0xa75af586: push   %edx
  0xa75af587: mov    0x8(%esp),%eax
  0xa75af58b: mov    0xc(%esp),%edx
  0xa75af58f: xchg   %eax,(%edx)
  0xa75af591: pop    %edx
  0xa75af592: ret    

StubRoutines::handler_for_unsafe_access [0xa75af593, 0xa75af5a4[ (17 bytes)
  0xa75af593: push   $0x0
  0xa75af598: pusha  
  ;; call handle_unsafe_access
  0xa75af599: call   0xb7205411
  0xa75af59e: mov    %eax,0x20(%esp)
  0xa75af5a2: popa   
  0xa75af5a3: ret    

StubRoutines::verify_mxcsr [0xa75af5a4, 0xa75af5a5[ (1 bytes)
  0xa75af5a4: ret    

StubRoutines::verify_spcw [0xa75af5a5, 0xa75af5a6[ (1 bytes)
  0xa75af5a5: ret    

StubRoutines::d2i_wrapper [0xa75af5a6, 0xa75af5de[ (56 bytes)
  0xa75af5a6: sub    $0x8,%esp
  0xa75af5a9: fstpl  (%esp)
  0xa75af5ac: push   %ebx
  0xa75af5ad: push   %ecx
  0xa75af5ae: push   %esi
  0xa75af5af: push   %edi
  0xa75af5b0: push   %ebp
  0xa75af5b1: sub    $0x6c,%esp
  0xa75af5b4: fnsave (%esp)
  0xa75af5b7: fldl   0x80(%esp)
  0xa75af5bf: sub    $0x8,%esp
  0xa75af5c2: fstl   (%esp)
  0xa75af5c5: emms   
  ;; SharedRuntime::d2i
  0xa75af5c7: call   0xb71cf672
  0xa75af5cc: add    $0x8,%esp
  0xa75af5cf: frstor (%esp)
  0xa75af5d2: add    $0x6c,%esp
  0xa75af5d5: pop    %ebp
  0xa75af5d6: pop    %edi
  0xa75af5d7: pop    %esi
  0xa75af5d8: pop    %ecx
  0xa75af5d9: pop    %ebx
  0xa75af5da: add    $0x8,%esp
  0xa75af5dd: ret    

StubRoutines::d2i_wrapper [0xa75af5de, 0xa75af616[ (56 bytes)
  0xa75af5de: sub    $0x8,%esp
  0xa75af5e1: fstpl  (%esp)
  0xa75af5e4: push   %ebx
  0xa75af5e5: push   %ecx
  0xa75af5e6: push   %esi
  0xa75af5e7: push   %edi
  0xa75af5e8: push   %ebp
  0xa75af5e9: sub    $0x6c,%esp
  0xa75af5ec: fnsave (%esp)
  0xa75af5ef: fldl   0x80(%esp)
  0xa75af5f7: sub    $0x8,%esp
  0xa75af5fa: fstl   (%esp)
  0xa75af5fd: emms   
  ;; SharedRuntime::d2l
  0xa75af5ff: call   0xb71cf826
  0xa75af604: add    $0x8,%esp
  0xa75af607: frstor (%esp)
  0xa75af60a: add    $0x6c,%esp
  0xa75af60d: pop    %ebp
  0xa75af60e: pop    %edi
  0xa75af60f: pop    %esi
  0xa75af610: pop    %ecx
  0xa75af611: pop    %ebx
  0xa75af612: add    $0x8,%esp
  0xa75af615: ret    

StubRoutines::updateBytesCRC32 [0xa75af620, 0xa75af874[ (596 bytes)
  ;; Entry:
  0xa75af620: push   %ebp
  0xa75af621: mov    %esp,%ebp
  0xa75af623: push   %esi
  0xa75af624: push   %edi
  0xa75af625: push   %ebx
  0xa75af626: mov    0x8(%ebp),%edx
  0xa75af629: mov    0xc(%ebp),%esi
  0xa75af62c: mov    0x10(%ebp),%ecx
  0xa75af62f: mov    $0xb78c8680,%edi
  0xa75af634: not    %edx
  0xa75af636: cmp    $0x10,%ecx
  0xa75af639: jl     0xa75af84e
  0xa75af63f: mov    %esi,%ebx
  0xa75af641: and    $0xf,%ebx
  0xa75af644: je     0xa75af661
  0xa75af646: sub    $0x10,%ebx
  0xa75af649: add    %ebx,%ecx
  0xa75af64b: nop
  ;; L_align_loop:
  0xa75af64c: movsbl (%esi),%eax
  0xa75af64f: xor    %edx,%eax
  0xa75af651: and    $0xff,%eax
  0xa75af657: shr    $0x8,%edx
  0xa75af65a: xor    (%edi,%eax,4),%edx
  0xa75af65d: inc    %esi
  0xa75af65e: inc    %ebx
  0xa75af65f: jl     0xa75af64c
  ;; L_aligned:
  0xa75af661: mov    %ecx,%ebx
  0xa75af663: shr    $0x4,%ecx
  0xa75af666: je     0xa75af84c
  0xa75af66c: vmovdqa (%esi),%xmm1
  0xa75af670: vmovd  %xmm1,%eax
  0xa75af674: xor    %eax,%edx
  0xa75af676: vpinsrd $0x0,%edx,%xmm1,%xmm1
  0xa75af67c: add    $0x10,%esi
  0xa75af67f: sub    $0x4,%ecx
  0xa75af682: jl     0xa75af75f
  0xa75af688: vmovdqa (%esi),%xmm2
  0xa75af68c: vmovdqa 0x10(%esi),%xmm3
  0xa75af691: vmovdqa 0x20(%esi),%xmm4
  0xa75af696: add    $0x30,%esi
  0xa75af699: sub    $0x3,%ecx
  0xa75af69c: jle    0xa75af71b
  0xa75af6a2: vmovdqu 0xb78c8660,%xmm0
  0xa75af6aa: nop
  0xa75af6ab: nop
  0xa75af6ac: nop
  0xa75af6ad: nop
  0xa75af6ae: nop
  0xa75af6af: nop
  0xa75af6b0: nop
  0xa75af6b1: nop
  0xa75af6b2: nop
  0xa75af6b3: nop
  0xa75af6b4: nop
  0xa75af6b5: nop
  0xa75af6b6: nop
  0xa75af6b7: nop
  0xa75af6b8: nop
  0xa75af6b9: nop
  0xa75af6ba: nop
  0xa75af6bb: nop
  0xa75af6bc: nop
  0xa75af6bd: nop
  0xa75af6be: nop
  0xa75af6bf: nop
  ;; L_fold_512b_loop:
  0xa75af6c0: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0xa75af6c6: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0xa75af6cc: vpxor  (%esi),%xmm1,%xmm1
  0xa75af6d0: vpxor  %xmm5,%xmm1,%xmm1
  0xa75af6d4: vpclmulhqhqdq %xmm2,%xmm0,%xmm5
  0xa75af6da: vpclmullqlqdq %xmm2,%xmm0,%xmm2
  0xa75af6e0: vpxor  0x10(%esi),%xmm2,%xmm2
  0xa75af6e5: vpxor  %xmm5,%xmm2,%xmm2
  0xa75af6e9: vpclmulhqhqdq %xmm3,%xmm0,%xmm5
  0xa75af6ef: vpclmullqlqdq %xmm3,%xmm0,%xmm3
  0xa75af6f5: vpxor  0x20(%esi),%xmm3,%xmm3
  0xa75af6fa: vpxor  %xmm5,%xmm3,%xmm3
  0xa75af6fe: vpclmulhqhqdq %xmm4,%xmm0,%xmm5
  0xa75af704: vpclmullqlqdq %xmm4,%xmm0,%xmm4
  0xa75af70a: vpxor  0x30(%esi),%xmm4,%xmm4
  0xa75af70f: vpxor  %xmm5,%xmm4,%xmm4
  0xa75af713: add    $0x40,%esi
  0xa75af716: sub    $0x4,%ecx
  0xa75af719: jg     0xa75af6c0
  ;; L_fold_512b:
  0xa75af71b: vmovdqu 0xb78c8650,%xmm0
  0xa75af723: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0xa75af729: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0xa75af72f: vpxor  %xmm2,%xmm1,%xmm1
  0xa75af733: vpxor  %xmm5,%xmm1,%xmm1
  0xa75af737: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0xa75af73d: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0xa75af743: vpxor  %xmm3,%xmm1,%xmm1
  0xa75af747: vpxor  %xmm5,%xmm1,%xmm1
  0xa75af74b: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0xa75af751: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0xa75af757: vpxor  %xmm4,%xmm1,%xmm1
  0xa75af75b: vpxor  %xmm5,%xmm1,%xmm1
  ;; L_fold_tail:
  0xa75af75f: add    $0x3,%ecx
  0xa75af762: jle    0xa75af786
  0xa75af764: vmovdqu 0xb78c8650,%xmm0
  ;; L_fold_tail_loop:
  0xa75af76c: vpclmulhqhqdq %xmm1,%xmm0,%xmm5
  0xa75af772: vpclmullqlqdq %xmm1,%xmm0,%xmm1
  0xa75af778: vpxor  (%esi),%xmm1,%xmm1
  0xa75af77c: vpxor  %xmm5,%xmm1,%xmm1
  0xa75af780: add    $0x10,%esi
  0xa75af783: dec    %ecx
  0xa75af784: jg     0xa75af76c
  ;; L_fold_128b:
  0xa75af786: vmovdqu 0xb78c8640,%xmm0
  0xa75af78e: vpclmulhqlqdq %xmm1,%xmm0,%xmm2
  0xa75af794: vpand  %xmm2,%xmm0,%xmm3
  0xa75af798: vpclmulhqlqdq %xmm3,%xmm0,%xmm0
  0xa75af79e: vpsrldq $0x8,%xmm1,%xmm1
  0xa75af7a3: vpsrldq $0x4,%xmm2,%xmm2
  0xa75af7a8: vpxor  %xmm1,%xmm0,%xmm0
  0xa75af7ac: vpxor  %xmm2,%xmm0,%xmm0
  0xa75af7b0: vmovd  %xmm0,%eax
  0xa75af7b4: and    $0xff,%eax
  0xa75af7ba: vmovd  (%edi,%eax,4),%xmm1
  0xa75af7bf: vpsrldq $0x1,%xmm0,%xmm0
  0xa75af7c4: vpxor  %xmm1,%xmm0,%xmm0
  0xa75af7c8: vmovd  %xmm0,%eax
  0xa75af7cc: and    $0xff,%eax
  0xa75af7d2: vmovd  (%edi,%eax,4),%xmm1
  0xa75af7d7: vpsrldq $0x1,%xmm0,%xmm0
  0xa75af7dc: vpxor  %xmm1,%xmm0,%xmm0
  0xa75af7e0: vmovd  %xmm0,%eax
  0xa75af7e4: and    $0xff,%eax
  0xa75af7ea: vmovd  (%edi,%eax,4),%xmm1
  0xa75af7ef: vpsrldq $0x1,%xmm0,%xmm0
  0xa75af7f4: vpxor  %xmm1,%xmm0,%xmm0
  0xa75af7f8: vmovd  %xmm0,%eax
  0xa75af7fc: and    $0xff,%eax
  0xa75af802: vmovd  (%edi,%eax,4),%xmm1
  0xa75af807: vpsrldq $0x1,%xmm0,%xmm0
  0xa75af80c: vpxor  %xmm1,%xmm0,%xmm0
  0xa75af810: vmovd  %xmm0,%edx
  0xa75af814: mov    %edx,%eax
  0xa75af816: and    $0xff,%eax
  0xa75af81c: shr    $0x8,%edx
  0xa75af81f: xor    (%edi,%eax,4),%edx
  0xa75af822: mov    %edx,%eax
  0xa75af824: and    $0xff,%eax
  0xa75af82a: shr    $0x8,%edx
  0xa75af82d: xor    (%edi,%eax,4),%edx
  0xa75af830: mov    %edx,%eax
  0xa75af832: and    $0xff,%eax
  0xa75af838: shr    $0x8,%edx
  0xa75af83b: xor    (%edi,%eax,4),%edx
  0xa75af83e: mov    %edx,%eax
  0xa75af840: and    $0xff,%eax
  0xa75af846: shr    $0x8,%edx
  0xa75af849: xor    (%edi,%eax,4),%edx
  ;; L_tail_restore:
  0xa75af84c: mov    %ebx,%ecx
  ;; L_tail:
  0xa75af84e: and    $0xf,%ecx
  0xa75af851: je     0xa75af869
  0xa75af853: nop
  ;; L_tail_loop:
  0xa75af854: movsbl (%esi),%eax
  0xa75af857: xor    %edx,%eax
  0xa75af859: and    $0xff,%eax
  0xa75af85f: shr    $0x8,%edx
  0xa75af862: xor    (%edi,%eax,4),%edx
  0xa75af865: inc    %esi
  0xa75af866: dec    %ecx
  0xa75af867: jg     0xa75af854
  ;; L_exit:
  0xa75af869: not    %edx
  0xa75af86b: mov    %edx,%eax
  0xa75af86d: pop    %ebx
  0xa75af86e: pop    %edi
  0xa75af86f: pop    %esi
  0xa75af870: mov    %ebp,%esp
  0xa75af872: pop    %ebp
  0xa75af873: ret    

Decoding RuntimeStub - wrong_method_stub 0xa7692008
  0xa7692060: push   %ebp
  0xa7692061: mov    %esp,%ebp
  0xa7692063: pusha  
  0xa7692064: pushf  
  0xa7692065: sub    $0xc8,%esp
  0xa769206b: sub    $0x6c,%esp
  0xa769206e: fnsave (%esp)
  0xa7692071: fwait
  0xa7692072: cmpw   $0x27f,(%esp)
  0xa7692078: je     0xa769208b
  0xa769207a: push   $0xb75a2604
  0xa769207f: call   0xa7692084
  0xa7692084: pusha  
  0xa7692085: call   0xb7052f32
  0xa769208a: hlt    
  0xa769208b: movw   $0x27f,(%esp)
  0xa7692091: frstor (%esp)
  0xa7692094: fstpl  0x70(%esp)
  0xa7692098: fstpl  0x78(%esp)
  0xa769209c: fstpl  0x80(%esp)
  0xa76920a3: fstpl  0x88(%esp)
  0xa76920aa: fstpl  0x90(%esp)
  0xa76920b1: fstpl  0x98(%esp)
  0xa76920b8: fstpl  0xa0(%esp)
  0xa76920bf: fstpl  0xa8(%esp)
  0xa76920c6: vmovdqu %xmm0,0xb0(%esp)
  0xa76920cf: vmovdqu %xmm1,0xc0(%esp)
  0xa76920d8: vmovdqu %xmm2,0xd0(%esp)
  0xa76920e1: vmovdqu %xmm3,0xe0(%esp)
  0xa76920ea: vmovdqu %xmm4,0xf0(%esp)
  0xa76920f3: vmovdqu %xmm5,0x100(%esp)
  0xa76920fc: vmovdqu %xmm6,0x110(%esp)
  0xa7692105: vmovdqu %xmm7,0x120(%esp)
  0xa769210e: mov    %esp,%edi
  0xa7692110: shr    $0xc,%edi
  0xa7692113: mov    -0x486bdba0(,%edi,4),%edi
  0xa769211a: push   %edi
  0xa769211b: mov    %ebp,0x148(%edi)
  0xa7692121: mov    %esp,0x140(%edi)
  0xa7692127: call   0xb71d4536
  0xa769212c: add    $0x4,%esp
  0xa769212f: movl   $0x0,0x140(%edi)
  0xa7692139: movl   $0x0,0x148(%edi)
  0xa7692143: movl   $0x0,0x144(%edi)
  0xa769214d: cmpl   $0x0,0x4(%edi)
  0xa7692154: jne    0xa76921d1
  0xa769215a: mov    0x174(%edi),%ebx
  0xa7692160: movl   $0x0,0x174(%edi)
  0xa769216a: mov    %ebx,0x148(%esp)
  0xa7692171: mov    %eax,0x154(%esp)
  0xa7692178: vmovdqu 0xb0(%esp),%xmm0
  0xa7692181: vmovdqu 0xc0(%esp),%xmm1
  0xa769218a: vmovdqu 0xd0(%esp),%xmm2
  0xa7692193: vmovdqu 0xe0(%esp),%xmm3
  0xa769219c: vmovdqu 0xf0(%esp),%xmm4
  0xa76921a5: vmovdqu 0x100(%esp),%xmm5
  0xa76921ae: vmovdqu 0x110(%esp),%xmm6
  0xa76921b7: vmovdqu 0x120(%esp),%xmm7
  0xa76921c0: frstor (%esp)
  0xa76921c3: add    $0x6c,%esp
  0xa76921c6: add    $0xc8,%esp
  0xa76921cc: popf   
  0xa76921cd: popa   
  0xa76921ce: pop    %ebp
  0xa76921cf: jmp    *%eax
  0xa76921d1: vmovdqu 0xb0(%esp),%xmm0
  0xa76921da: vmovdqu 0xc0(%esp),%xmm1
  0xa76921e3: vmovdqu 0xd0(%esp),%xmm2
  0xa76921ec: vmovdqu 0xe0(%esp),%xmm3
  0xa76921f5: vmovdqu 0xf0(%esp),%xmm4
  0xa76921fe: vmovdqu 0x100(%esp),%xmm5
  0xa7692207: vmovdqu 0x110(%esp),%xmm6
  0xa7692210: vmovdqu 0x120(%esp),%xmm7
  0xa7692219: frstor (%esp)
  0xa769221c: add    $0x6c,%esp
  0xa769221f: add    $0xc8,%esp
  0xa7692225: popf   
  0xa7692226: popa   
  0xa7692227: pop    %ebp
  0xa7692228: mov    %esp,%edi
  0xa769222a: shr    $0xc,%edi
  0xa769222d: mov    -0x486bdba0(,%edi,4),%edi
  0xa7692234: movl   $0x0,0x170(%edi)
  0xa769223e: mov    0x4(%edi),%eax
  0xa7692241: jmp    0xa75af400
  0xa7692246: hlt    
  0xa7692247: hlt    

Decoding RuntimeStub - wrong_method_abstract_stub 0xa7692288
  0xa76922e0: push   %ebp
  0xa76922e1: mov    %esp,%ebp
  0xa76922e3: pusha  
  0xa76922e4: pushf  
  0xa76922e5: sub    $0xc8,%esp
  0xa76922eb: sub    $0x6c,%esp
  0xa76922ee: fnsave (%esp)
  0xa76922f1: fwait
  0xa76922f2: cmpw   $0x27f,(%esp)
  0xa76922f8: je     0xa769230b
  0xa76922fa: push   $0xb75a2604
  0xa76922ff: call   0xa7692304
  0xa7692304: pusha  
  0xa7692305: call   0xb7052f32
  0xa769230a: hlt    
  0xa769230b: movw   $0x27f,(%esp)
  0xa7692311: frstor (%esp)
  0xa7692314: fstpl  0x70(%esp)
  0xa7692318: fstpl  0x78(%esp)
  0xa769231c: fstpl  0x80(%esp)
  0xa7692323: fstpl  0x88(%esp)
  0xa769232a: fstpl  0x90(%esp)
  0xa7692331: fstpl  0x98(%esp)
  0xa7692338: fstpl  0xa0(%esp)
  0xa769233f: fstpl  0xa8(%esp)
  0xa7692346: vmovdqu %xmm0,0xb0(%esp)
  0xa769234f: vmovdqu %xmm1,0xc0(%esp)
  0xa7692358: vmovdqu %xmm2,0xd0(%esp)
  0xa7692361: vmovdqu %xmm3,0xe0(%esp)
  0xa769236a: vmovdqu %xmm4,0xf0(%esp)
  0xa7692373: vmovdqu %xmm5,0x100(%esp)
  0xa769237c: vmovdqu %xmm6,0x110(%esp)
  0xa7692385: vmovdqu %xmm7,0x120(%esp)
  0xa769238e: mov    %esp,%edi
  0xa7692390: shr    $0xc,%edi
  0xa7692393: mov    -0x486bdba0(,%edi,4),%edi
  0xa769239a: push   %edi
  0xa769239b: mov    %ebp,0x148(%edi)
  0xa76923a1: mov    %esp,0x140(%edi)
  0xa76923a7: call   0xb71d4954
  0xa76923ac: add    $0x4,%esp
  0xa76923af: movl   $0x0,0x140(%edi)
  0xa76923b9: movl   $0x0,0x148(%edi)
  0xa76923c3: movl   $0x0,0x144(%edi)
  0xa76923cd: cmpl   $0x0,0x4(%edi)
  0xa76923d4: jne    0xa7692451
  0xa76923da: mov    0x174(%edi),%ebx
  0xa76923e0: movl   $0x0,0x174(%edi)
  0xa76923ea: mov    %ebx,0x148(%esp)
  0xa76923f1: mov    %eax,0x154(%esp)
  0xa76923f8: vmovdqu 0xb0(%esp),%xmm0
  0xa7692401: vmovdqu 0xc0(%esp),%xmm1
  0xa769240a: vmovdqu 0xd0(%esp),%xmm2
  0xa7692413: vmovdqu 0xe0(%esp),%xmm3
  0xa769241c: vmovdqu 0xf0(%esp),%xmm4
  0xa7692425: vmovdqu 0x100(%esp),%xmm5
  0xa769242e: vmovdqu 0x110(%esp),%xmm6
  0xa7692437: vmovdqu 0x120(%esp),%xmm7
  0xa7692440: frstor (%esp)
  0xa7692443: add    $0x6c,%esp
  0xa7692446: add    $0xc8,%esp
  0xa769244c: popf   
  0xa769244d: popa   
  0xa769244e: pop    %ebp
  0xa769244f: jmp    *%eax
  0xa7692451: vmovdqu 0xb0(%esp),%xmm0
  0xa769245a: vmovdqu 0xc0(%esp),%xmm1
  0xa7692463: vmovdqu 0xd0(%esp),%xmm2
  0xa769246c: vmovdqu 0xe0(%esp),%xmm3
  0xa7692475: vmovdqu 0xf0(%esp),%xmm4
  0xa769247e: vmovdqu 0x100(%esp),%xmm5
  0xa7692487: vmovdqu 0x110(%esp),%xmm6
  0xa7692490: vmovdqu 0x120(%esp),%xmm7
  0xa7692499: frstor (%esp)
  0xa769249c: add    $0x6c,%esp
  0xa769249f: add    $0xc8,%esp
  0xa76924a5: popf   
  0xa76924a6: popa   
  0xa76924a7: pop    %ebp
  0xa76924a8: mov    %esp,%edi
  0xa76924aa: shr    $0xc,%edi
  0xa76924ad: mov    -0x486bdba0(,%edi,4),%edi
  0xa76924b4: movl   $0x0,0x170(%edi)
  0xa76924be: mov    0x4(%edi),%eax
  0xa76924c1: jmp    0xa75af400
  0xa76924c6: hlt    
  0xa76924c7: hlt    

Decoding RuntimeStub - ic_miss_stub 0xa7692508
  0xa7692560: push   %ebp
  0xa7692561: mov    %esp,%ebp
  0xa7692563: pusha  
  0xa7692564: pushf  
  0xa7692565: sub    $0xc8,%esp
  0xa769256b: sub    $0x6c,%esp
  0xa769256e: fnsave (%esp)
  0xa7692571: fwait
  0xa7692572: cmpw   $0x27f,(%esp)
  0xa7692578: je     0xa769258b
  0xa769257a: push   $0xb75a2604
  0xa769257f: call   0xa7692584
  0xa7692584: pusha  
  0xa7692585: call   0xb7052f32
  0xa769258a: hlt    
  0xa769258b: movw   $0x27f,(%esp)
  0xa7692591: frstor (%esp)
  0xa7692594: fstpl  0x70(%esp)
  0xa7692598: fstpl  0x78(%esp)
  0xa769259c: fstpl  0x80(%esp)
  0xa76925a3: fstpl  0x88(%esp)
  0xa76925aa: fstpl  0x90(%esp)
  0xa76925b1: fstpl  0x98(%esp)
  0xa76925b8: fstpl  0xa0(%esp)
  0xa76925bf: fstpl  0xa8(%esp)
  0xa76925c6: vmovdqu %xmm0,0xb0(%esp)
  0xa76925cf: vmovdqu %xmm1,0xc0(%esp)
  0xa76925d8: vmovdqu %xmm2,0xd0(%esp)
  0xa76925e1: vmovdqu %xmm3,0xe0(%esp)
  0xa76925ea: vmovdqu %xmm4,0xf0(%esp)
  0xa76925f3: vmovdqu %xmm5,0x100(%esp)
  0xa76925fc: vmovdqu %xmm6,0x110(%esp)
  0xa7692605: vmovdqu %xmm7,0x120(%esp)
  0xa769260e: mov    %esp,%edi
  0xa7692610: shr    $0xc,%edi
  0xa7692613: mov    -0x486bdba0(,%edi,4),%edi
  0xa769261a: push   %edi
  0xa769261b: mov    %ebp,0x148(%edi)
  0xa7692621: mov    %esp,0x140(%edi)
  0xa7692627: call   0xb71d41a0
  0xa769262c: add    $0x4,%esp
  0xa769262f: movl   $0x0,0x140(%edi)
  0xa7692639: movl   $0x0,0x148(%edi)
  0xa7692643: movl   $0x0,0x144(%edi)
  0xa769264d: cmpl   $0x0,0x4(%edi)
  0xa7692654: jne    0xa76926d1
  0xa769265a: mov    0x174(%edi),%ebx
  0xa7692660: movl   $0x0,0x174(%edi)
  0xa769266a: mov    %ebx,0x148(%esp)
  0xa7692671: mov    %eax,0x154(%esp)
  0xa7692678: vmovdqu 0xb0(%esp),%xmm0
  0xa7692681: vmovdqu 0xc0(%esp),%xmm1
  0xa769268a: vmovdqu 0xd0(%esp),%xmm2
  0xa7692693: vmovdqu 0xe0(%esp),%xmm3
  0xa769269c: vmovdqu 0xf0(%esp),%xmm4
  0xa76926a5: vmovdqu 0x100(%esp),%xmm5
  0xa76926ae: vmovdqu 0x110(%esp),%xmm6
  0xa76926b7: vmovdqu 0x120(%esp),%xmm7
  0xa76926c0: frstor (%esp)
  0xa76926c3: add    $0x6c,%esp
  0xa76926c6: add    $0xc8,%esp
  0xa76926cc: popf   
  0xa76926cd: popa   
  0xa76926ce: pop    %ebp
  0xa76926cf: jmp    *%eax
  0xa76926d1: vmovdqu 0xb0(%esp),%xmm0
  0xa76926da: vmovdqu 0xc0(%esp),%xmm1
  0xa76926e3: vmovdqu 0xd0(%esp),%xmm2
  0xa76926ec: vmovdqu 0xe0(%esp),%xmm3
  0xa76926f5: vmovdqu 0xf0(%esp),%xmm4
  0xa76926fe: vmovdqu 0x100(%esp),%xmm5
  0xa7692707: vmovdqu 0x110(%esp),%xmm6
  0xa7692710: vmovdqu 0x120(%esp),%xmm7
  0xa7692719: frstor (%esp)
  0xa769271c: add    $0x6c,%esp
  0xa769271f: add    $0xc8,%esp
  0xa7692725: popf   
  0xa7692726: popa   
  0xa7692727: pop    %ebp
  0xa7692728: mov    %esp,%edi
  0xa769272a: shr    $0xc,%edi
  0xa769272d: mov    -0x486bdba0(,%edi,4),%edi
  0xa7692734: movl   $0x0,0x170(%edi)
  0xa769273e: mov    0x4(%edi),%eax
  0xa7692741: jmp    0xa75af400
  0xa7692746: hlt    
  0xa7692747: hlt    

Decoding RuntimeStub - resolve_opt_virtual_call 0xa7692788
  0xa76927e0: push   %ebp
  0xa76927e1: mov    %esp,%ebp
  0xa76927e3: pusha  
  0xa76927e4: pushf  
  0xa76927e5: sub    $0xc8,%esp
  0xa76927eb: sub    $0x6c,%esp
  0xa76927ee: fnsave (%esp)
  0xa76927f1: fwait
  0xa76927f2: cmpw   $0x27f,(%esp)
  0xa76927f8: je     0xa769280b
  0xa76927fa: push   $0xb75a2604
  0xa76927ff: call   0xa7692804
  0xa7692804: pusha  
  0xa7692805: call   0xb7052f32
  0xa769280a: hlt    
  0xa769280b: movw   $0x27f,(%esp)
  0xa7692811: frstor (%esp)
  0xa7692814: fstpl  0x70(%esp)
  0xa7692818: fstpl  0x78(%esp)
  0xa769281c: fstpl  0x80(%esp)
  0xa7692823: fstpl  0x88(%esp)
  0xa769282a: fstpl  0x90(%esp)
  0xa7692831: fstpl  0x98(%esp)
  0xa7692838: fstpl  0xa0(%esp)
  0xa769283f: fstpl  0xa8(%esp)
  0xa7692846: vmovdqu %xmm0,0xb0(%esp)
  0xa769284f: vmovdqu %xmm1,0xc0(%esp)
  0xa7692858: vmovdqu %xmm2,0xd0(%esp)
  0xa7692861: vmovdqu %xmm3,0xe0(%esp)
  0xa769286a: vmovdqu %xmm4,0xf0(%esp)
  0xa7692873: vmovdqu %xmm5,0x100(%esp)
  0xa769287c: vmovdqu %xmm6,0x110(%esp)
  0xa7692885: vmovdqu %xmm7,0x120(%esp)
  0xa769288e: mov    %esp,%edi
  0xa7692890: shr    $0xc,%edi
  0xa7692893: mov    -0x486bdba0(,%edi,4),%edi
  0xa769289a: push   %edi
  0xa769289b: mov    %ebp,0x148(%edi)
  0xa76928a1: mov    %esp,0x140(%edi)
  0xa76928a7: call   0xb71d4f62
  0xa76928ac: add    $0x4,%esp
  0xa76928af: movl   $0x0,0x140(%edi)
  0xa76928b9: movl   $0x0,0x148(%edi)
  0xa76928c3: movl   $0x0,0x144(%edi)
  0xa76928cd: cmpl   $0x0,0x4(%edi)
  0xa76928d4: jne    0xa7692951
  0xa76928da: mov    0x174(%edi),%ebx
  0xa76928e0: movl   $0x0,0x174(%edi)
  0xa76928ea: mov    %ebx,0x148(%esp)
  0xa76928f1: mov    %eax,0x154(%esp)
  0xa76928f8: vmovdqu 0xb0(%esp),%xmm0
  0xa7692901: vmovdqu 0xc0(%esp),%xmm1
  0xa769290a: vmovdqu 0xd0(%esp),%xmm2
  0xa7692913: vmovdqu 0xe0(%esp),%xmm3
  0xa769291c: vmovdqu 0xf0(%esp),%xmm4
  0xa7692925: vmovdqu 0x100(%esp),%xmm5
  0xa769292e: vmovdqu 0x110(%esp),%xmm6
  0xa7692937: vmovdqu 0x120(%esp),%xmm7
  0xa7692940: frstor (%esp)
  0xa7692943: add    $0x6c,%esp
  0xa7692946: add    $0xc8,%esp
  0xa769294c: popf   
  0xa769294d: popa   
  0xa769294e: pop    %ebp
  0xa769294f: jmp    *%eax
  0xa7692951: vmovdqu 0xb0(%esp),%xmm0
  0xa769295a: vmovdqu 0xc0(%esp),%xmm1
  0xa7692963: vmovdqu 0xd0(%esp),%xmm2
  0xa769296c: vmovdqu 0xe0(%esp),%xmm3
  0xa7692975: vmovdqu 0xf0(%esp),%xmm4
  0xa769297e: vmovdqu 0x100(%esp),%xmm5
  0xa7692987: vmovdqu 0x110(%esp),%xmm6
  0xa7692990: vmovdqu 0x120(%esp),%xmm7
  0xa7692999: frstor (%esp)
  0xa769299c: add    $0x6c,%esp
  0xa769299f: add    $0xc8,%esp
  0xa76929a5: popf   
  0xa76929a6: popa   
  0xa76929a7: pop    %ebp
  0xa76929a8: mov    %esp,%edi
  0xa76929aa: shr    $0xc,%edi
  0xa76929ad: mov    -0x486bdba0(,%edi,4),%edi
  0xa76929b4: movl   $0x0,0x170(%edi)
  0xa76929be: mov    0x4(%edi),%eax
  0xa76929c1: jmp    0xa75af400
  0xa76929c6: hlt    
  0xa76929c7: hlt    

Decoding RuntimeStub - resolve_virtual_call 0xa7692a08
  0xa7692a60: push   %ebp
  0xa7692a61: mov    %esp,%ebp
  0xa7692a63: pusha  
  0xa7692a64: pushf  
  0xa7692a65: sub    $0xc8,%esp
  0xa7692a6b: sub    $0x6c,%esp
  0xa7692a6e: fnsave (%esp)
  0xa7692a71: fwait
  0xa7692a72: cmpw   $0x27f,(%esp)
  0xa7692a78: je     0xa7692a8b
  0xa7692a7a: push   $0xb75a2604
  0xa7692a7f: call   0xa7692a84
  0xa7692a84: pusha  
  0xa7692a85: call   0xb7052f32
  0xa7692a8a: hlt    
  0xa7692a8b: movw   $0x27f,(%esp)
  0xa7692a91: frstor (%esp)
  0xa7692a94: fstpl  0x70(%esp)
  0xa7692a98: fstpl  0x78(%esp)
  0xa7692a9c: fstpl  0x80(%esp)
  0xa7692aa3: fstpl  0x88(%esp)
  0xa7692aaa: fstpl  0x90(%esp)
  0xa7692ab1: fstpl  0x98(%esp)
  0xa7692ab8: fstpl  0xa0(%esp)
  0xa7692abf: fstpl  0xa8(%esp)
  0xa7692ac6: vmovdqu %xmm0,0xb0(%esp)
  0xa7692acf: vmovdqu %xmm1,0xc0(%esp)
  0xa7692ad8: vmovdqu %xmm2,0xd0(%esp)
  0xa7692ae1: vmovdqu %xmm3,0xe0(%esp)
  0xa7692aea: vmovdqu %xmm4,0xf0(%esp)
  0xa7692af3: vmovdqu %xmm5,0x100(%esp)
  0xa7692afc: vmovdqu %xmm6,0x110(%esp)
  0xa7692b05: vmovdqu %xmm7,0x120(%esp)
  0xa7692b0e: mov    %esp,%edi
  0xa7692b10: shr    $0xc,%edi
  0xa7692b13: mov    -0x486bdba0(,%edi,4),%edi
  0xa7692b1a: push   %edi
  0xa7692b1b: mov    %ebp,0x148(%edi)
  0xa7692b21: mov    %esp,0x140(%edi)
  0xa7692b27: call   0xb71d4cea
  0xa7692b2c: add    $0x4,%esp
  0xa7692b2f: movl   $0x0,0x140(%edi)
  0xa7692b39: movl   $0x0,0x148(%edi)
  0xa7692b43: movl   $0x0,0x144(%edi)
  0xa7692b4d: cmpl   $0x0,0x4(%edi)
  0xa7692b54: jne    0xa7692bd1
  0xa7692b5a: mov    0x174(%edi),%ebx
  0xa7692b60: movl   $0x0,0x174(%edi)
  0xa7692b6a: mov    %ebx,0x148(%esp)
  0xa7692b71: mov    %eax,0x154(%esp)
  0xa7692b78: vmovdqu 0xb0(%esp),%xmm0
  0xa7692b81: vmovdqu 0xc0(%esp),%xmm1
  0xa7692b8a: vmovdqu 0xd0(%esp),%xmm2
  0xa7692b93: vmovdqu 0xe0(%esp),%xmm3
  0xa7692b9c: vmovdqu 0xf0(%esp),%xmm4
  0xa7692ba5: vmovdqu 0x100(%esp),%xmm5
  0xa7692bae: vmovdqu 0x110(%esp),%xmm6
  0xa7692bb7: vmovdqu 0x120(%esp),%xmm7
  0xa7692bc0: frstor (%esp)
  0xa7692bc3: add    $0x6c,%esp
  0xa7692bc6: add    $0xc8,%esp
  0xa7692bcc: popf   
  0xa7692bcd: popa   
  0xa7692bce: pop    %ebp
  0xa7692bcf: jmp    *%eax
  0xa7692bd1: vmovdqu 0xb0(%esp),%xmm0
  0xa7692bda: vmovdqu 0xc0(%esp),%xmm1
  0xa7692be3: vmovdqu 0xd0(%esp),%xmm2
  0xa7692bec: vmovdqu 0xe0(%esp),%xmm3
  0xa7692bf5: vmovdqu 0xf0(%esp),%xmm4
  0xa7692bfe: vmovdqu 0x100(%esp),%xmm5
  0xa7692c07: vmovdqu 0x110(%esp),%xmm6
  0xa7692c10: vmovdqu 0x120(%esp),%xmm7
  0xa7692c19: frstor (%esp)
  0xa7692c1c: add    $0x6c,%esp
  0xa7692c1f: add    $0xc8,%esp
  0xa7692c25: popf   
  0xa7692c26: popa   
  0xa7692c27: pop    %ebp
  0xa7692c28: mov    %esp,%edi
  0xa7692c2a: shr    $0xc,%edi
  0xa7692c2d: mov    -0x486bdba0(,%edi,4),%edi
  0xa7692c34: movl   $0x0,0x170(%edi)
  0xa7692c3e: mov    0x4(%edi),%eax
  0xa7692c41: jmp    0xa75af400
  0xa7692c46: hlt    
  0xa7692c47: hlt    

Decoding RuntimeStub - resolve_static_call 0xa7692c88
  0xa7692ce0: push   %ebp
  0xa7692ce1: mov    %esp,%ebp
  0xa7692ce3: pusha  
  0xa7692ce4: pushf  
  0xa7692ce5: sub    $0xc8,%esp
  0xa7692ceb: sub    $0x6c,%esp
  0xa7692cee: fnsave (%esp)
  0xa7692cf1: fwait
  0xa7692cf2: cmpw   $0x27f,(%esp)
  0xa7692cf8: je     0xa7692d0b
  0xa7692cfa: push   $0xb75a2604
  0xa7692cff: call   0xa7692d04
  0xa7692d04: pusha  
  0xa7692d05: call   0xb7052f32
  0xa7692d0a: hlt    
  0xa7692d0b: movw   $0x27f,(%esp)
  0xa7692d11: frstor (%esp)
  0xa7692d14: fstpl  0x70(%esp)
  0xa7692d18: fstpl  0x78(%esp)
  0xa7692d1c: fstpl  0x80(%esp)
  0xa7692d23: fstpl  0x88(%esp)
  0xa7692d2a: fstpl  0x90(%esp)
  0xa7692d31: fstpl  0x98(%esp)
  0xa7692d38: fstpl  0xa0(%esp)
  0xa7692d3f: fstpl  0xa8(%esp)
  0xa7692d46: vmovdqu %xmm0,0xb0(%esp)
  0xa7692d4f: vmovdqu %xmm1,0xc0(%esp)
  0xa7692d58: vmovdqu %xmm2,0xd0(%esp)
  0xa7692d61: vmovdqu %xmm3,0xe0(%esp)
  0xa7692d6a: vmovdqu %xmm4,0xf0(%esp)
  0xa7692d73: vmovdqu %xmm5,0x100(%esp)
  0xa7692d7c: vmovdqu %xmm6,0x110(%esp)
  0xa7692d85: vmovdqu %xmm7,0x120(%esp)
  0xa7692d8e: mov    %esp,%edi
  0xa7692d90: shr    $0xc,%edi
  0xa7692d93: mov    -0x486bdba0(,%edi,4),%edi
  0xa7692d9a: push   %edi
  0xa7692d9b: mov    %ebp,0x148(%edi)
  0xa7692da1: mov    %esp,0x140(%edi)
  0xa7692da7: call   0xb71d4a72
  0xa7692dac: add    $0x4,%esp
  0xa7692daf: movl   $0x0,0x140(%edi)
  0xa7692db9: movl   $0x0,0x148(%edi)
  0xa7692dc3: movl   $0x0,0x144(%edi)
  0xa7692dcd: cmpl   $0x0,0x4(%edi)
  0xa7692dd4: jne    0xa7692e51
  0xa7692dda: mov    0x174(%edi),%ebx
  0xa7692de0: movl   $0x0,0x174(%edi)
  0xa7692dea: mov    %ebx,0x148(%esp)
  0xa7692df1: mov    %eax,0x154(%esp)
  0xa7692df8: vmovdqu 0xb0(%esp),%xmm0
  0xa7692e01: vmovdqu 0xc0(%esp),%xmm1
  0xa7692e0a: vmovdqu 0xd0(%esp),%xmm2
  0xa7692e13: vmovdqu 0xe0(%esp),%xmm3
  0xa7692e1c: vmovdqu 0xf0(%esp),%xmm4
  0xa7692e25: vmovdqu 0x100(%esp),%xmm5
  0xa7692e2e: vmovdqu 0x110(%esp),%xmm6
  0xa7692e37: vmovdqu 0x120(%esp),%xmm7
  0xa7692e40: frstor (%esp)
  0xa7692e43: add    $0x6c,%esp
  0xa7692e46: add    $0xc8,%esp
  0xa7692e4c: popf   
  0xa7692e4d: popa   
  0xa7692e4e: pop    %ebp
  0xa7692e4f: jmp    *%eax
  0xa7692e51: vmovdqu 0xb0(%esp),%xmm0
  0xa7692e5a: vmovdqu 0xc0(%esp),%xmm1
  0xa7692e63: vmovdqu 0xd0(%esp),%xmm2
  0xa7692e6c: vmovdqu 0xe0(%esp),%xmm3
  0xa7692e75: vmovdqu 0xf0(%esp),%xmm4
  0xa7692e7e: vmovdqu 0x100(%esp),%xmm5
  0xa7692e87: vmovdqu 0x110(%esp),%xmm6
  0xa7692e90: vmovdqu 0x120(%esp),%xmm7
  0xa7692e99: frstor (%esp)
  0xa7692e9c: add    $0x6c,%esp
  0xa7692e9f: add    $0xc8,%esp
  0xa7692ea5: popf   
  0xa7692ea6: popa   
  0xa7692ea7: pop    %ebp
  0xa7692ea8: mov    %esp,%edi
  0xa7692eaa: shr    $0xc,%edi
  0xa7692ead: mov    -0x486bdba0(,%edi,4),%edi
  0xa7692eb4: movl   $0x0,0x170(%edi)
  0xa7692ebe: mov    0x4(%edi),%eax
  0xa7692ec1: jmp    0xa75af400
  0xa7692ec6: hlt    
  0xa7692ec7: hlt    

Decoding SafepointBlob 0xa7692f08
  0xa7692f60: push   %ebx
  0xa7692f61: push   %ebp
  0xa7692f62: mov    %esp,%ebp
  0xa7692f64: pusha  
  0xa7692f65: pushf  
  0xa7692f66: sub    $0xc8,%esp
  0xa7692f6c: sub    $0x6c,%esp
  0xa7692f6f: fnsave (%esp)
  0xa7692f72: frstor (%esp)
  0xa7692f76: fldcw  0xb792d11c
  0xa7692f7c: fstpl  0x70(%esp)
  0xa7692f80: fstpl  0x78(%esp)
  0xa7692f84: fstpl  0x80(%esp)
  0xa7692f8b: fstpl  0x88(%esp)
  0xa7692f92: fstpl  0x90(%esp)
  0xa7692f99: fstpl  0x98(%esp)
  0xa7692fa0: fstpl  0xa0(%esp)
  0xa7692fa7: fstpl  0xa8(%esp)
  0xa7692fae: vmovdqu %xmm0,0xb0(%esp)
  0xa7692fb7: vmovdqu %xmm1,0xc0(%esp)
  0xa7692fc0: vmovdqu %xmm2,0xd0(%esp)
  0xa7692fc9: vmovdqu %xmm3,0xe0(%esp)
  0xa7692fd2: vmovdqu %xmm4,0xf0(%esp)
  0xa7692fdb: vmovdqu %xmm5,0x100(%esp)
  0xa7692fe4: vmovdqu %xmm6,0x110(%esp)
  0xa7692fed: vmovdqu %xmm7,0x120(%esp)
  0xa7692ff6: sub    $0x80,%esp
  0xa7692ffc: vextractf128 $0x1,%ymm0,(%esp)
  0xa7693003: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa769300b: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa7693013: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa769301b: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa7693023: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa769302b: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa7693033: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa769303b: mov    %esp,%edi
  0xa769303d: shr    $0xc,%edi
  0xa7693040: mov    -0x486bdba0(,%edi,4),%edi
  0xa7693047: push   %edi
  0xa7693048: mov    %esp,0x140(%edi)
  0xa769304e: mov    0x194(%edi),%eax
  0xa7693054: mov    %eax,0x4(%ebp)
  0xa7693057: call   0xb71c92ce
  0xa769305c: pop    %ecx
  0xa769305d: mov    %esp,%edi
  0xa769305f: shr    $0xc,%edi
  0xa7693062: mov    -0x486bdba0(,%edi,4),%edi
  0xa7693069: movl   $0x0,0x140(%edi)
  0xa7693073: movl   $0x0,0x144(%edi)
  0xa769307d: cmpl   $0x0,0x4(%edi)
  0xa7693084: je     0xa769312b
  0xa769308a: vmovdqu 0x130(%esp),%xmm0
  0xa7693093: vmovdqu 0x140(%esp),%xmm1
  0xa769309c: vmovdqu 0x150(%esp),%xmm2
  0xa76930a5: vmovdqu 0x160(%esp),%xmm3
  0xa76930ae: vmovdqu 0x170(%esp),%xmm4
  0xa76930b7: vmovdqu 0x180(%esp),%xmm5
  0xa76930c0: vmovdqu 0x190(%esp),%xmm6
  0xa76930c9: vmovdqu 0x1a0(%esp),%xmm7
  0xa76930d2: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa76930d9: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa76930e1: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa76930e9: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa76930f1: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa76930f9: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa7693101: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa7693109: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa7693111: add    $0x80,%esp
  0xa7693117: frstor (%esp)
  0xa769311a: add    $0x6c,%esp
  0xa769311d: add    $0xc8,%esp
  0xa7693123: popf   
  0xa7693124: popa   
  0xa7693125: pop    %ebp
  0xa7693126: jmp    0xa75af400
  0xa769312b: vmovdqu 0x130(%esp),%xmm0
  0xa7693134: vmovdqu 0x140(%esp),%xmm1
  0xa769313d: vmovdqu 0x150(%esp),%xmm2
  0xa7693146: vmovdqu 0x160(%esp),%xmm3
  0xa769314f: vmovdqu 0x170(%esp),%xmm4
  0xa7693158: vmovdqu 0x180(%esp),%xmm5
  0xa7693161: vmovdqu 0x190(%esp),%xmm6
  0xa769316a: vmovdqu 0x1a0(%esp),%xmm7
  0xa7693173: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa769317a: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa7693182: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa769318a: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa7693192: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa769319a: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa76931a2: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa76931aa: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa76931b2: add    $0x80,%esp
  0xa76931b8: frstor (%esp)
  0xa76931bb: add    $0x6c,%esp
  0xa76931be: add    $0xc8,%esp
  0xa76931c4: popf   
  0xa76931c5: popa   
  0xa76931c6: pop    %ebp
  0xa76931c7: ret    

Decoding SafepointBlob 0xa75b1748
  0xa75b17a0: push   %ebx
  0xa75b17a1: push   %ebp
  0xa75b17a2: mov    %esp,%ebp
  0xa75b17a4: pusha  
  0xa75b17a5: pushf  
  0xa75b17a6: sub    $0xc8,%esp
  0xa75b17ac: sub    $0x6c,%esp
  0xa75b17af: fnsave (%esp)
  0xa75b17b2: frstor (%esp)
  0xa75b17b6: fldcw  0xb792d11c
  0xa75b17bc: fstpl  0x70(%esp)
  0xa75b17c0: fstpl  0x78(%esp)
  0xa75b17c4: fstpl  0x80(%esp)
  0xa75b17cb: fstpl  0x88(%esp)
  0xa75b17d2: fstpl  0x90(%esp)
  0xa75b17d9: fstpl  0x98(%esp)
  0xa75b17e0: fstpl  0xa0(%esp)
  0xa75b17e7: fstpl  0xa8(%esp)
  0xa75b17ee: vmovdqu %xmm0,0xb0(%esp)
  0xa75b17f7: vmovdqu %xmm1,0xc0(%esp)
  0xa75b1800: vmovdqu %xmm2,0xd0(%esp)
  0xa75b1809: vmovdqu %xmm3,0xe0(%esp)
  0xa75b1812: vmovdqu %xmm4,0xf0(%esp)
  0xa75b181b: vmovdqu %xmm5,0x100(%esp)
  0xa75b1824: vmovdqu %xmm6,0x110(%esp)
  0xa75b182d: vmovdqu %xmm7,0x120(%esp)
  0xa75b1836: mov    %esp,%edi
  0xa75b1838: shr    $0xc,%edi
  0xa75b183b: mov    -0x486bdba0(,%edi,4),%edi
  0xa75b1842: push   %edi
  0xa75b1843: mov    %esp,0x140(%edi)
  0xa75b1849: mov    0x194(%edi),%eax
  0xa75b184f: mov    %eax,0x4(%ebp)
  0xa75b1852: call   0xb71c92ce
  0xa75b1857: pop    %ecx
  0xa75b1858: mov    %esp,%edi
  0xa75b185a: shr    $0xc,%edi
  0xa75b185d: mov    -0x486bdba0(,%edi,4),%edi
  0xa75b1864: movl   $0x0,0x140(%edi)
  0xa75b186e: movl   $0x0,0x144(%edi)
  0xa75b1878: cmpl   $0x0,0x4(%edi)
  0xa75b187f: je     0xa75b18e1
  0xa75b1885: vmovdqu 0xb0(%esp),%xmm0
  0xa75b188e: vmovdqu 0xc0(%esp),%xmm1
  0xa75b1897: vmovdqu 0xd0(%esp),%xmm2
  0xa75b18a0: vmovdqu 0xe0(%esp),%xmm3
  0xa75b18a9: vmovdqu 0xf0(%esp),%xmm4
  0xa75b18b2: vmovdqu 0x100(%esp),%xmm5
  0xa75b18bb: vmovdqu 0x110(%esp),%xmm6
  0xa75b18c4: vmovdqu 0x120(%esp),%xmm7
  0xa75b18cd: frstor (%esp)
  0xa75b18d0: add    $0x6c,%esp
  0xa75b18d3: add    $0xc8,%esp
  0xa75b18d9: popf   
  0xa75b18da: popa   
  0xa75b18db: pop    %ebp
  0xa75b18dc: jmp    0xa75af400
  0xa75b18e1: vmovdqu 0xb0(%esp),%xmm0
  0xa75b18ea: vmovdqu 0xc0(%esp),%xmm1
  0xa75b18f3: vmovdqu 0xd0(%esp),%xmm2
  0xa75b18fc: vmovdqu 0xe0(%esp),%xmm3
  0xa75b1905: vmovdqu 0xf0(%esp),%xmm4
  0xa75b190e: vmovdqu 0x100(%esp),%xmm5
  0xa75b1917: vmovdqu 0x110(%esp),%xmm6
  0xa75b1920: vmovdqu 0x120(%esp),%xmm7
  0xa75b1929: frstor (%esp)
  0xa75b192c: add    $0x6c,%esp
  0xa75b192f: add    $0xc8,%esp
  0xa75b1935: popf   
  0xa75b1936: popa   
  0xa75b1937: pop    %ebp
  0xa75b1938: ret    
  0xa75b1939: hlt    
  0xa75b193a: hlt    
  0xa75b193b: hlt    

Decoding SafepointBlob 0xa7693208
  0xa7693260: push   %ebp
  0xa7693261: mov    %esp,%ebp
  0xa7693263: pusha  
  0xa7693264: pushf  
  0xa7693265: sub    $0xc8,%esp
  0xa769326b: sub    $0x6c,%esp
  0xa769326e: fnsave (%esp)
  0xa7693271: frstor (%esp)
  0xa7693275: fldcw  0xb792d11c
  0xa769327b: fstpl  0x70(%esp)
  0xa769327f: fstpl  0x78(%esp)
  0xa7693283: fstpl  0x80(%esp)
  0xa769328a: fstpl  0x88(%esp)
  0xa7693291: fstpl  0x90(%esp)
  0xa7693298: fstpl  0x98(%esp)
  0xa769329f: fstpl  0xa0(%esp)
  0xa76932a6: fstpl  0xa8(%esp)
  0xa76932ad: vmovdqu %xmm0,0xb0(%esp)
  0xa76932b6: vmovdqu %xmm1,0xc0(%esp)
  0xa76932bf: vmovdqu %xmm2,0xd0(%esp)
  0xa76932c8: vmovdqu %xmm3,0xe0(%esp)
  0xa76932d1: vmovdqu %xmm4,0xf0(%esp)
  0xa76932da: vmovdqu %xmm5,0x100(%esp)
  0xa76932e3: vmovdqu %xmm6,0x110(%esp)
  0xa76932ec: vmovdqu %xmm7,0x120(%esp)
  0xa76932f5: mov    %esp,%edi
  0xa76932f7: shr    $0xc,%edi
  0xa76932fa: mov    -0x486bdba0(,%edi,4),%edi
  0xa7693301: push   %edi
  0xa7693302: mov    %esp,0x140(%edi)
  0xa7693308: call   0xb71c92ce
  0xa769330d: pop    %ecx
  0xa769330e: mov    %esp,%edi
  0xa7693310: shr    $0xc,%edi
  0xa7693313: mov    -0x486bdba0(,%edi,4),%edi
  0xa769331a: movl   $0x0,0x140(%edi)
  0xa7693324: movl   $0x0,0x144(%edi)
  0xa769332e: cmpl   $0x0,0x4(%edi)
  0xa7693335: je     0xa7693397
  0xa769333b: vmovdqu 0xb0(%esp),%xmm0
  0xa7693344: vmovdqu 0xc0(%esp),%xmm1
  0xa769334d: vmovdqu 0xd0(%esp),%xmm2
  0xa7693356: vmovdqu 0xe0(%esp),%xmm3
  0xa769335f: vmovdqu 0xf0(%esp),%xmm4
  0xa7693368: vmovdqu 0x100(%esp),%xmm5
  0xa7693371: vmovdqu 0x110(%esp),%xmm6
  0xa769337a: vmovdqu 0x120(%esp),%xmm7
  0xa7693383: frstor (%esp)
  0xa7693386: add    $0x6c,%esp
  0xa7693389: add    $0xc8,%esp
  0xa769338f: popf   
  0xa7693390: popa   
  0xa7693391: pop    %ebp
  0xa7693392: jmp    0xa75af400
  0xa7693397: vmovdqu 0xb0(%esp),%xmm0
  0xa76933a0: vmovdqu 0xc0(%esp),%xmm1
  0xa76933a9: vmovdqu 0xd0(%esp),%xmm2
  0xa76933b2: vmovdqu 0xe0(%esp),%xmm3
  0xa76933bb: vmovdqu 0xf0(%esp),%xmm4
  0xa76933c4: vmovdqu 0x100(%esp),%xmm5
  0xa76933cd: vmovdqu 0x110(%esp),%xmm6
  0xa76933d6: vmovdqu 0x120(%esp),%xmm7
  0xa76933df: frstor (%esp)
  0xa76933e2: add    $0x6c,%esp
  0xa76933e5: add    $0xc8,%esp
  0xa76933eb: popf   
  0xa76933ec: popa   
  0xa76933ed: pop    %ebp
  0xa76933ee: ret    
  0xa76933ef: hlt    

Decoding DeoptimizationBlob 0xa7693408
  0xa76934c0: push   %ebp
  0xa76934c1: mov    %esp,%ebp
  0xa76934c3: pusha  
  0xa76934c4: pushf  
  0xa76934c5: sub    $0xc8,%esp
  0xa76934cb: sub    $0x6c,%esp
  0xa76934ce: fnsave (%esp)
  0xa76934d1: frstor (%esp)
  0xa76934d5: fldcw  0xb792d11c
  0xa76934db: fstpl  0x70(%esp)
  0xa76934df: fstpl  0x78(%esp)
  0xa76934e3: fstpl  0x80(%esp)
  0xa76934ea: fstpl  0x88(%esp)
  0xa76934f1: fstpl  0x90(%esp)
  0xa76934f8: fstpl  0x98(%esp)
  0xa76934ff: fstpl  0xa0(%esp)
  0xa7693506: fstpl  0xa8(%esp)
  0xa769350d: vmovdqu %xmm0,0xb0(%esp)
  0xa7693516: vmovdqu %xmm1,0xc0(%esp)
  0xa769351f: vmovdqu %xmm2,0xd0(%esp)
  0xa7693528: vmovdqu %xmm3,0xe0(%esp)
  0xa7693531: vmovdqu %xmm4,0xf0(%esp)
  0xa769353a: vmovdqu %xmm5,0x100(%esp)
  0xa7693543: vmovdqu %xmm6,0x110(%esp)
  0xa769354c: vmovdqu %xmm7,0x120(%esp)
  0xa7693555: push   $0x0
  0xa769355a: jmp    0xa76936f6
  0xa769355f: push   %ebp
  0xa7693560: mov    %esp,%ebp
  0xa7693562: pusha  
  0xa7693563: pushf  
  0xa7693564: sub    $0xc8,%esp
  0xa769356a: sub    $0x6c,%esp
  0xa769356d: fnsave (%esp)
  0xa7693570: frstor (%esp)
  0xa7693574: fldcw  0xb792d11c
  0xa769357a: fstpl  0x70(%esp)
  0xa769357e: fstpl  0x78(%esp)
  0xa7693582: fstpl  0x80(%esp)
  0xa7693589: fstpl  0x88(%esp)
  0xa7693590: fstpl  0x90(%esp)
  0xa7693597: fstpl  0x98(%esp)
  0xa769359e: fstpl  0xa0(%esp)
  0xa76935a5: fstpl  0xa8(%esp)
  0xa76935ac: vmovdqu %xmm0,0xb0(%esp)
  0xa76935b5: vmovdqu %xmm1,0xc0(%esp)
  0xa76935be: vmovdqu %xmm2,0xd0(%esp)
  0xa76935c7: vmovdqu %xmm3,0xe0(%esp)
  0xa76935d0: vmovdqu %xmm4,0xf0(%esp)
  0xa76935d9: vmovdqu %xmm5,0x100(%esp)
  0xa76935e2: vmovdqu %xmm6,0x110(%esp)
  0xa76935eb: vmovdqu %xmm7,0x120(%esp)
  0xa76935f4: push   $0x3
  0xa76935f9: jmp    0xa76936f6
  0xa76935fe: mov    %esp,%edi
  0xa7693600: shr    $0xc,%edi
  0xa7693603: mov    -0x486bdba0(,%edi,4),%edi
  0xa769360a: mov    %edx,0x1b8(%edi)
  0xa7693610: mov    %eax,0x1b4(%edi)
  0xa7693616: push   $0x0
  0xa769361b: push   %ebp
  0xa769361c: mov    %esp,%ebp
  0xa769361e: pusha  
  0xa769361f: pushf  
  0xa7693620: sub    $0xc8,%esp
  0xa7693626: sub    $0x6c,%esp
  0xa7693629: fnsave (%esp)
  0xa769362c: frstor (%esp)
  0xa7693630: fldcw  0xb792d11c
  0xa7693636: fstpl  0x70(%esp)
  0xa769363a: fstpl  0x78(%esp)
  0xa769363e: fstpl  0x80(%esp)
  0xa7693645: fstpl  0x88(%esp)
  0xa769364c: fstpl  0x90(%esp)
  0xa7693653: fstpl  0x98(%esp)
  0xa769365a: fstpl  0xa0(%esp)
  0xa7693661: fstpl  0xa8(%esp)
  0xa7693668: vmovdqu %xmm0,0xb0(%esp)
  0xa7693671: vmovdqu %xmm1,0xc0(%esp)
  0xa769367a: vmovdqu %xmm2,0xd0(%esp)
  0xa7693683: vmovdqu %xmm3,0xe0(%esp)
  0xa769368c: vmovdqu %xmm4,0xf0(%esp)
  0xa7693695: vmovdqu %xmm5,0x100(%esp)
  0xa769369e: vmovdqu %xmm6,0x110(%esp)
  0xa76936a7: vmovdqu %xmm7,0x120(%esp)
  0xa76936b0: push   $0x1
  0xa76936b5: mov    %esp,%edi
  0xa76936b7: shr    $0xc,%edi
  0xa76936ba: mov    -0x486bdba0(,%edi,4),%edi
  0xa76936c1: mov    0x1b8(%edi),%edx
  0xa76936c7: mov    %edx,0x4(%ebp)
  0xa76936ca: movl   $0x0,0x1b8(%edi)
  0xa76936d4: mov    0x1b4(%edi),%eax
  0xa76936da: mov    0x4(%edi),%eax
  0xa76936dd: test   %eax,%eax
  0xa76936df: je     0xa76936f6
  0xa76936e5: push   $0xb75a30e0
  0xa76936ea: call   0xa76936ef
  0xa76936ef: pusha  
  0xa76936f0: call   0xb7052f32
  0xa76936f5: hlt    
  0xa76936f6: emms   
  0xa76936f8: mov    %esp,%ecx
  0xa76936fa: shr    $0xc,%ecx
  0xa76936fd: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa7693704: push   %ecx
  0xa7693705: mov    %esp,0x140(%ecx)
  0xa769370b: call   0xb6d0f4da
  0xa7693710: pop    %ecx
  0xa7693711: mov    %esp,%ecx
  0xa7693713: shr    $0xc,%ecx
  0xa7693716: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa769371d: movl   $0x0,0x140(%ecx)
  0xa7693727: movl   $0x0,0x144(%ecx)
  0xa7693731: mov    %eax,%edi
  0xa7693733: pop    %eax
  0xa7693734: mov    %eax,0x30(%edi)
  0xa7693737: cmp    $0x1,%eax
  0xa769373a: jne    0xa769376e
  0xa7693740: mov    0x1b4(%ecx),%eax
  0xa7693746: mov    0x1b8(%ecx),%edx
  0xa769374c: movl   $0x0,0x1b4(%ecx)
  0xa7693756: movl   $0x0,0x1b8(%ecx)
  0xa7693760: mov    %eax,0x154(%esp)
  0xa7693767: mov    %edx,0x14c(%esp)
  0xa769376e: frstor (%esp)
  0xa7693771: vmovsd 0xb0(%esp),%xmm0
  0xa769377a: mov    0x154(%esp),%eax
  0xa7693781: mov    0x14c(%esp),%edx
  0xa7693788: add    $0x15c,%esp
  0xa769378e: fldcw  0xb792d11c
  0xa7693794: add    0x4(%edi),%esp
  0xa7693797: mov    0x24(%edi),%ebp
  0xa769379a: mov    0x10(%edi),%ebx
  0xa769379d: mov    %esp,%ecx
  0xa769379f: mov    %ebx,-0x1000(%ecx)
  0xa76937a5: sub    $0x1000,%ecx
  0xa76937ab: sub    $0x1000,%ebx
  0xa76937b1: jg     0xa769379f
  0xa76937b3: mov    %ebx,-0x1000(%ecx)
  0xa76937b9: mov    %ebx,-0x2000(%ecx)
  0xa76937bf: mov    %ebx,-0x3000(%ecx)
  0xa76937c5: mov    %ebx,-0x4000(%ecx)
  0xa76937cb: mov    %ebx,-0x5000(%ecx)
  0xa76937d1: mov    %ebx,-0x6000(%ecx)
  0xa76937d7: mov    %ebx,-0x7000(%ecx)
  0xa76937dd: mov    %ebx,-0x8000(%ecx)
  0xa76937e3: mov    0x18(%edi),%ecx
  0xa76937e6: pop    %esi
  0xa76937e7: mov    0x14(%edi),%esi
  0xa76937ea: mov    0xc(%edi),%ebx
  0xa76937ed: mov    %ebx,0x2c(%edi)
  0xa76937f0: mov    %esp,0x34(%edi)
  0xa76937f3: mov    0x8(%edi),%ebx
  0xa76937f6: sub    %ebx,%esp
  0xa76937f8: mov    (%esi),%ebx
  0xa76937fa: sub    $0x8,%ebx
  0xa76937fd: pushl  (%ecx)
  0xa76937ff: push   %ebp
  0xa7693800: mov    %esp,%ebp
  0xa7693802: sub    %ebx,%esp
  0xa7693804: mov    0x34(%edi),%ebx
  0xa7693807: movl   $0x0,-0x8(%ebp)
  0xa769380e: mov    %ebx,-0x4(%ebp)
  0xa7693811: mov    %esp,0x34(%edi)
  0xa7693814: add    $0x4,%esi
  0xa7693817: add    $0x4,%ecx
  0xa769381a: decl   0x2c(%edi)
  0xa769381d: jne    0xa76937f8
  0xa769381f: pushl  (%ecx)
  0xa7693821: push   %ebp
  0xa7693822: mov    %esp,%ebp
  0xa7693824: sub    $0x158,%esp
  0xa769382a: mov    %eax,0x154(%esp)
  0xa7693831: mov    %edx,0x14c(%esp)
  0xa7693838: fstpl  0x70(%esp)
  0xa769383c: vmovsd %xmm0,0xb0(%esp)
  0xa7693845: pushl  0x30(%edi)
  0xa7693848: mov    %esp,%ecx
  0xa769384a: shr    $0xc,%ecx
  0xa769384d: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa7693854: push   %ecx
  0xa7693855: mov    %ebp,0x148(%ecx)
  0xa769385b: mov    %esp,0x140(%ecx)
  0xa7693861: call   0xb6d10c34
  0xa7693866: push   %eax
  0xa7693867: mov    %esp,%ecx
  0xa7693869: shr    $0xc,%ecx
  0xa769386c: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa7693873: movl   $0x0,0x140(%ecx)
  0xa769387d: movl   $0x0,0x144(%ecx)
  0xa7693887: mov    0x160(%esp),%eax
  0xa769388e: mov    0x158(%esp),%edx
  0xa7693895: emms   
  0xa7693897: cmpl   $0x7,(%esp)
  0xa769389e: je     0xa76938bf
  0xa76938a4: cmpl   $0x6,(%esp)
  0xa76938ab: jne    0xa76938c8
  0xa76938b1: vmovss 0xbc(%esp),%xmm0
  0xa76938ba: jmp    0xa76938c8
  0xa76938bf: vmovsd 0xbc(%esp),%xmm0
  0xa76938c8: mov    %ebp,%esp
  0xa76938ca: pop    %ebp
  0xa76938cb: ret    

Decoding UncommonTrapBlob 0xa7691ac8
  0xa7691b20: sub    $0xc,%esp
  0xa7691b23: mov    %ebp,0x8(%esp)
  0xa7691b27: emms   
  0xa7691b29: mov    %esp,%edx
  0xa7691b2b: shr    $0xc,%edx
  0xa7691b2e: mov    -0x486bdba0(,%edx,4),%edx
  0xa7691b35: mov    %esp,0x140(%edx)
  0xa7691b3b: mov    %edx,(%esp)
  0xa7691b3e: mov    %ecx,0x4(%esp)
  0xa7691b42: call   0xb6d15184
  0xa7691b47: mov    %esp,%ecx
  0xa7691b49: shr    $0xc,%ecx
  0xa7691b4c: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa7691b53: movl   $0x0,0x140(%ecx)
  0xa7691b5d: movl   $0x0,0x144(%ecx)
  0xa7691b67: mov    %eax,%edi
  0xa7691b69: add    $0xc,%esp
  0xa7691b6c: mov    0x4(%edi),%ecx
  0xa7691b6f: add    %ecx,%esp
  0xa7691b71: mov    0x24(%edi),%ebp
  0xa7691b74: mov    0x10(%edi),%ebx
  0xa7691b77: mov    %esp,%ecx
  0xa7691b79: mov    %ebx,-0x1000(%ecx)
  0xa7691b7f: sub    $0x1000,%ecx
  0xa7691b85: sub    $0x1000,%ebx
  0xa7691b8b: jg     0xa7691b79
  0xa7691b8d: mov    %ebx,-0x1000(%ecx)
  0xa7691b93: mov    %ebx,-0x2000(%ecx)
  0xa7691b99: mov    %ebx,-0x3000(%ecx)
  0xa7691b9f: mov    %ebx,-0x4000(%ecx)
  0xa7691ba5: mov    %ebx,-0x5000(%ecx)
  0xa7691bab: mov    %ebx,-0x6000(%ecx)
  0xa7691bb1: mov    %ebx,-0x7000(%ecx)
  0xa7691bb7: mov    %ebx,-0x8000(%ecx)
  0xa7691bbd: mov    0x18(%edi),%ecx
  0xa7691bc0: pop    %esi
  0xa7691bc1: mov    0x14(%edi),%esi
  0xa7691bc4: mov    0xc(%edi),%ebx
  0xa7691bc7: mov    %ebx,0x2c(%edi)
  0xa7691bca: mov    %esp,0x34(%edi)
  0xa7691bcd: mov    0x8(%edi),%ebx
  0xa7691bd0: sub    %ebx,%esp
  0xa7691bd2: mov    (%esi),%ebx
  0xa7691bd4: sub    $0x8,%ebx
  0xa7691bd7: pushl  (%ecx)
  0xa7691bd9: push   %ebp
  0xa7691bda: mov    %esp,%ebp
  0xa7691bdc: sub    %ebx,%esp
  0xa7691bde: mov    0x34(%edi),%ebx
  0xa7691be1: movl   $0x0,-0x8(%ebp)
  0xa7691be8: mov    %ebx,-0x4(%ebp)
  0xa7691beb: mov    %esp,0x34(%edi)
  0xa7691bee: add    $0x4,%esi
  0xa7691bf1: add    $0x4,%ecx
  0xa7691bf4: decl   0x2c(%edi)
  0xa7691bf7: jne    0xa7691bd2
  0xa7691bf9: pushl  (%ecx)
  0xa7691bfb: push   %ebp
  0xa7691bfc: mov    %esp,%ebp
  0xa7691bfe: sub    $0x8,%esp
  0xa7691c01: mov    %esp,%edi
  0xa7691c03: shr    $0xc,%edi
  0xa7691c06: mov    -0x486bdba0(,%edi,4),%edi
  0xa7691c0d: mov    %ebp,0x148(%edi)
  0xa7691c13: mov    %esp,0x140(%edi)
  0xa7691c19: mov    %edi,(%esp)
  0xa7691c1c: movl   $0x2,0x4(%esp)
  0xa7691c24: call   0xb6d10c34
  0xa7691c29: mov    %esp,%edi
  0xa7691c2b: shr    $0xc,%edi
  0xa7691c2e: mov    -0x486bdba0(,%edi,4),%edi
  0xa7691c35: movl   $0x0,0x140(%edi)
  0xa7691c3f: movl   $0x0,0x148(%edi)
  0xa7691c49: movl   $0x0,0x144(%edi)
  0xa7691c53: mov    %ebp,%esp
  0xa7691c55: pop    %ebp
  0xa7691c56: ret    
  0xa7691c57: hlt    

AHE@0xb6673b94: 0xa0000000 i2c: 0xa7691f00 c2i: 0xa7691f8d c2iUV: 0xa7691f6c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa7691f8d
  0xa7691f00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7691f03: mov    $0xa75b1ac0,%edi
  0xa7691f08: cmp    %edi,%eax
  0xa7691f0a: jbe    0xa7691f1d
  0xa7691f10: mov    $0xa7691ac0,%edi
  0xa7691f15: cmp    %edi,%eax
  0xa7691f17: jb     0xa7691f48
  0xa7691f1d: mov    $0xa75af400,%edi
  0xa7691f22: cmp    %edi,%eax
  0xa7691f24: jbe    0xa7691f37
  0xa7691f2a: mov    $0xa75b1728,%edi
  0xa7691f2f: cmp    %edi,%eax
  0xa7691f31: jb     0xa7691f48
  ;; i2c adapter must return to an interpreter frame
  0xa7691f37: push   $0xb75a2830
  0xa7691f3c: call   0xa7691f41
  0xa7691f41: pusha  
  0xa7691f42: call   0xb7052f32
  0xa7691f47: hlt    
  ;; } verify_i2ce 
  0xa7691f48: mov    %esp,%edi
  0xa7691f4a: and    $0xfffffff0,%esp
  0xa7691f4d: push   %eax
  0xa7691f4e: mov    %edi,%eax
  0xa7691f50: mov    0x30(%ebx),%edi
  0xa7691f53: mov    0x4(%eax),%ecx
  0xa7691f56: mov    %esp,%eax
  0xa7691f58: shr    $0xc,%eax
  0xa7691f5b: mov    -0x486bdba0(,%eax,4),%eax
  0xa7691f62: mov    %ebx,0x16c(%eax)
  0xa7691f68: mov    %ebx,%eax
  0xa7691f6a: jmp    *%edi
  0xa7691f6c: mov    0x4(%ecx),%ebx
  0xa7691f6f: cmp    0x8(%eax),%ebx
  0xa7691f72: mov    0x4(%eax),%ebx
  0xa7691f75: jne    0xa7691f88
  0xa7691f7b: cmpl   $0x0,0x34(%ebx)
  0xa7691f82: je     0xa7691fc7
  0xa7691f88: jmp    0xa7692560
  0xa7691f8d: cmpl   $0x0,0x34(%ebx)
  0xa7691f94: je     0xa7691fc7
  0xa7691f9a: mov    (%esp),%eax
  0xa7691f9d: pusha  
  0xa7691f9e: pushf  
  0xa7691f9f: sub    $0x10,%esp
  0xa7691fa2: vmovsd %xmm0,(%esp)
  0xa7691fa7: vmovsd %xmm1,0x8(%esp)
  0xa7691fad: push   %eax
  0xa7691fae: push   %ebx
  0xa7691faf: call   0xb71d62fc
  0xa7691fb4: add    $0x8,%esp
  0xa7691fb7: vmovsd (%esp),%xmm0
  0xa7691fbc: vmovsd 0x8(%esp),%xmm1
  0xa7691fc2: add    $0x10,%esp
  0xa7691fc5: popf   
  0xa7691fc6: popa   
  0xa7691fc7: pop    %eax
  0xa7691fc8: mov    %esp,%esi
  0xa7691fca: sub    $0x4,%esp
  0xa7691fcd: mov    %ecx,(%esp)
  0xa7691fd0: mov    0x28(%ebx),%ecx
  0xa7691fd3: push   %eax
  0xa7691fd4: jmp    *%ecx

AHE@0xb6673bb8: 0xa0000000 i2c: 0xa7691d40 c2i: 0xa7691dcd c2iUV: 0xa7691dac
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa7691dcd
  0xa7691d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7691d43: mov    $0xa75b1ac0,%edi
  0xa7691d48: cmp    %edi,%eax
  0xa7691d4a: jbe    0xa7691d5d
  0xa7691d50: mov    $0xa7691ac0,%edi
  0xa7691d55: cmp    %edi,%eax
  0xa7691d57: jb     0xa7691d88
  0xa7691d5d: mov    $0xa75af400,%edi
  0xa7691d62: cmp    %edi,%eax
  0xa7691d64: jbe    0xa7691d77
  0xa7691d6a: mov    $0xa75b1728,%edi
  0xa7691d6f: cmp    %edi,%eax
  0xa7691d71: jb     0xa7691d88
  ;; i2c adapter must return to an interpreter frame
  0xa7691d77: push   $0xb75a2830
  0xa7691d7c: call   0xa7691d81
  0xa7691d81: pusha  
  0xa7691d82: call   0xb7052f32
  0xa7691d87: hlt    
  ;; } verify_i2ce 
  0xa7691d88: mov    %esp,%edi
  0xa7691d8a: and    $0xfffffff0,%esp
  0xa7691d8d: push   %eax
  0xa7691d8e: mov    %edi,%eax
  0xa7691d90: mov    0x30(%ebx),%edi
  0xa7691d93: mov    0x4(%eax),%ecx
  0xa7691d96: mov    %esp,%eax
  0xa7691d98: shr    $0xc,%eax
  0xa7691d9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa7691da2: mov    %ebx,0x16c(%eax)
  0xa7691da8: mov    %ebx,%eax
  0xa7691daa: jmp    *%edi
  0xa7691dac: mov    0x4(%ecx),%ebx
  0xa7691daf: cmp    0x8(%eax),%ebx
  0xa7691db2: mov    0x4(%eax),%ebx
  0xa7691db5: jne    0xa7691dc8
  0xa7691dbb: cmpl   $0x0,0x34(%ebx)
  0xa7691dc2: je     0xa7691e07
  0xa7691dc8: jmp    0xa7692560
  0xa7691dcd: cmpl   $0x0,0x34(%ebx)
  0xa7691dd4: je     0xa7691e07
  0xa7691dda: mov    (%esp),%eax
  0xa7691ddd: pusha  
  0xa7691dde: pushf  
  0xa7691ddf: sub    $0x10,%esp
  0xa7691de2: vmovsd %xmm0,(%esp)
  0xa7691de7: vmovsd %xmm1,0x8(%esp)
  0xa7691ded: push   %eax
  0xa7691dee: push   %ebx
  0xa7691def: call   0xb71d62fc
  0xa7691df4: add    $0x8,%esp
  0xa7691df7: vmovsd (%esp),%xmm0
  0xa7691dfc: vmovsd 0x8(%esp),%xmm1
  0xa7691e02: add    $0x10,%esp
  0xa7691e05: popf   
  0xa7691e06: popa   
  0xa7691e07: pop    %eax
  0xa7691e08: mov    %esp,%esi
  0xa7691e0a: sub    $0x4,%esp
  0xa7691e0d: mov    %ecx,(%esp)
  0xa7691e10: mov    0x28(%ebx),%ecx
  0xa7691e13: push   %eax
  0xa7691e14: jmp    *%ecx

AHE@0xb6673bdc: 0x i2c: 0xa769a200 c2i: 0xa769a28a c2iUV: 0xa769a269
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa769a28a
  0xa769a200: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769a203: mov    $0xa75b1ac0,%edi
  0xa769a208: cmp    %edi,%eax
  0xa769a20a: jbe    0xa769a21d
  0xa769a210: mov    $0xa7691ac0,%edi
  0xa769a215: cmp    %edi,%eax
  0xa769a217: jb     0xa769a248
  0xa769a21d: mov    $0xa75af400,%edi
  0xa769a222: cmp    %edi,%eax
  0xa769a224: jbe    0xa769a237
  0xa769a22a: mov    $0xa75b1728,%edi
  0xa769a22f: cmp    %edi,%eax
  0xa769a231: jb     0xa769a248
  ;; i2c adapter must return to an interpreter frame
  0xa769a237: push   $0xb75a2830
  0xa769a23c: call   0xa769a241
  0xa769a241: pusha  
  0xa769a242: call   0xb7052f32
  0xa769a247: hlt    
  ;; } verify_i2ce 
  0xa769a248: mov    %esp,%edi
  0xa769a24a: and    $0xfffffff0,%esp
  0xa769a24d: push   %eax
  0xa769a24e: mov    %edi,%eax
  0xa769a250: mov    0x30(%ebx),%edi
  0xa769a253: mov    %esp,%eax
  0xa769a255: shr    $0xc,%eax
  0xa769a258: mov    -0x486bdba0(,%eax,4),%eax
  0xa769a25f: mov    %ebx,0x16c(%eax)
  0xa769a265: mov    %ebx,%eax
  0xa769a267: jmp    *%edi
  0xa769a269: mov    0x4(%ecx),%ebx
  0xa769a26c: cmp    0x8(%eax),%ebx
  0xa769a26f: mov    0x4(%eax),%ebx
  0xa769a272: jne    0xa769a285
  0xa769a278: cmpl   $0x0,0x34(%ebx)
  0xa769a27f: je     0xa769a2c4
  0xa769a285: jmp    0xa7692560
  0xa769a28a: cmpl   $0x0,0x34(%ebx)
  0xa769a291: je     0xa769a2c4
  0xa769a297: mov    (%esp),%eax
  0xa769a29a: pusha  
  0xa769a29b: pushf  
  0xa769a29c: sub    $0x10,%esp
  0xa769a29f: vmovsd %xmm0,(%esp)
  0xa769a2a4: vmovsd %xmm1,0x8(%esp)
  0xa769a2aa: push   %eax
  0xa769a2ab: push   %ebx
  0xa769a2ac: call   0xb71d62fc
  0xa769a2b1: add    $0x8,%esp
  0xa769a2b4: vmovsd (%esp),%xmm0
  0xa769a2b9: vmovsd 0x8(%esp),%xmm1
  0xa769a2bf: add    $0x10,%esp
  0xa769a2c2: popf   
  0xa769a2c3: popa   
  0xa769a2c4: pop    %eax
  0xa769a2c5: mov    %esp,%esi
  0xa769a2c7: sub    $0x0,%esp
  0xa769a2ca: mov    0x28(%ebx),%ecx
  0xa769a2cd: push   %eax
  0xa769a2ce: jmp    *%ecx

AHE@0xb6673c00: 0xa0000000 i2c: 0xa769a380 c2i: 0xa769a40d c2iUV: 0xa769a3ec
i2c argument handler #0 for: receiver ()Ljava/lang/Object; (214 bytes generated)
c2i argument handler starts at 0xa769a40d
  0xa769a380: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769a383: mov    $0xa75b1ac0,%edi
  0xa769a388: cmp    %edi,%eax
  0xa769a38a: jbe    0xa769a39d
  0xa769a390: mov    $0xa7691ac0,%edi
  0xa769a395: cmp    %edi,%eax
  0xa769a397: jb     0xa769a3c8
  0xa769a39d: mov    $0xa75af400,%edi
  0xa769a3a2: cmp    %edi,%eax
  0xa769a3a4: jbe    0xa769a3b7
  0xa769a3aa: mov    $0xa75b1728,%edi
  0xa769a3af: cmp    %edi,%eax
  0xa769a3b1: jb     0xa769a3c8
  ;; i2c adapter must return to an interpreter frame
  0xa769a3b7: push   $0xb75a2830
  0xa769a3bc: call   0xa769a3c1
  0xa769a3c1: pusha  
  0xa769a3c2: call   0xb7052f32
  0xa769a3c7: hlt    
  ;; } verify_i2ce 
  0xa769a3c8: mov    %esp,%edi
  0xa769a3ca: and    $0xfffffff0,%esp
  0xa769a3cd: push   %eax
  0xa769a3ce: mov    %edi,%eax
  0xa769a3d0: mov    0x30(%ebx),%edi
  0xa769a3d3: mov    0x4(%eax),%ecx
  0xa769a3d6: mov    %esp,%eax
  0xa769a3d8: shr    $0xc,%eax
  0xa769a3db: mov    -0x486bdba0(,%eax,4),%eax
  0xa769a3e2: mov    %ebx,0x16c(%eax)
  0xa769a3e8: mov    %ebx,%eax
  0xa769a3ea: jmp    *%edi
  0xa769a3ec: mov    0x4(%ecx),%ebx
  0xa769a3ef: cmp    0x8(%eax),%ebx
  0xa769a3f2: mov    0x4(%eax),%ebx
  0xa769a3f5: jne    0xa769a408
  0xa769a3fb: cmpl   $0x0,0x34(%ebx)
  0xa769a402: je     0xa769a447
  0xa769a408: jmp    0xa7692560
  0xa769a40d: cmpl   $0x0,0x34(%ebx)
  0xa769a414: je     0xa769a447
  0xa769a41a: mov    (%esp),%eax
  0xa769a41d: pusha  
  0xa769a41e: pushf  
  0xa769a41f: sub    $0x10,%esp
  0xa769a422: vmovsd %xmm0,(%esp)
  0xa769a427: vmovsd %xmm1,0x8(%esp)
  0xa769a42d: push   %eax
  0xa769a42e: push   %ebx
  0xa769a42f: call   0xb71d62fc
  0xa769a434: add    $0x8,%esp
  0xa769a437: vmovsd (%esp),%xmm0
  0xa769a43c: vmovsd 0x8(%esp),%xmm1
  0xa769a442: add    $0x10,%esp
  0xa769a445: popf   
  0xa769a446: popa   
  0xa769a447: pop    %eax
  0xa769a448: mov    %esp,%esi
  0xa769a44a: sub    $0x4,%esp
  0xa769a44d: mov    %ecx,(%esp)
  0xa769a450: mov    0x28(%ebx),%ecx
  0xa769a453: push   %eax
  0xa769a454: jmp    *%ecx

AHE@0xb6673c24: 0xa0000000 i2c: 0xa769a500 c2i: 0xa769a58d c2iUV: 0xa769a56c
i2c argument handler #0 for: receiver ()Ljava/lang/Class; (214 bytes generated)
c2i argument handler starts at 0xa769a58d
  0xa769a500: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769a503: mov    $0xa75b1ac0,%edi
  0xa769a508: cmp    %edi,%eax
  0xa769a50a: jbe    0xa769a51d
  0xa769a510: mov    $0xa7691ac0,%edi
  0xa769a515: cmp    %edi,%eax
  0xa769a517: jb     0xa769a548
  0xa769a51d: mov    $0xa75af400,%edi
  0xa769a522: cmp    %edi,%eax
  0xa769a524: jbe    0xa769a537
  0xa769a52a: mov    $0xa75b1728,%edi
  0xa769a52f: cmp    %edi,%eax
  0xa769a531: jb     0xa769a548
  ;; i2c adapter must return to an interpreter frame
  0xa769a537: push   $0xb75a2830
  0xa769a53c: call   0xa769a541
  0xa769a541: pusha  
  0xa769a542: call   0xb7052f32
  0xa769a547: hlt    
  ;; } verify_i2ce 
  0xa769a548: mov    %esp,%edi
  0xa769a54a: and    $0xfffffff0,%esp
  0xa769a54d: push   %eax
  0xa769a54e: mov    %edi,%eax
  0xa769a550: mov    0x30(%ebx),%edi
  0xa769a553: mov    0x4(%eax),%ecx
  0xa769a556: mov    %esp,%eax
  0xa769a558: shr    $0xc,%eax
  0xa769a55b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769a562: mov    %ebx,0x16c(%eax)
  0xa769a568: mov    %ebx,%eax
  0xa769a56a: jmp    *%edi
  0xa769a56c: mov    0x4(%ecx),%ebx
  0xa769a56f: cmp    0x8(%eax),%ebx
  0xa769a572: mov    0x4(%eax),%ebx
  0xa769a575: jne    0xa769a588
  0xa769a57b: cmpl   $0x0,0x34(%ebx)
  0xa769a582: je     0xa769a5c7
  0xa769a588: jmp    0xa7692560
  0xa769a58d: cmpl   $0x0,0x34(%ebx)
  0xa769a594: je     0xa769a5c7
  0xa769a59a: mov    (%esp),%eax
  0xa769a59d: pusha  
  0xa769a59e: pushf  
  0xa769a59f: sub    $0x10,%esp
  0xa769a5a2: vmovsd %xmm0,(%esp)
  0xa769a5a7: vmovsd %xmm1,0x8(%esp)
  0xa769a5ad: push   %eax
  0xa769a5ae: push   %ebx
  0xa769a5af: call   0xb71d62fc
  0xa769a5b4: add    $0x8,%esp
  0xa769a5b7: vmovsd (%esp),%xmm0
  0xa769a5bc: vmovsd 0x8(%esp),%xmm1
  0xa769a5c2: add    $0x10,%esp
  0xa769a5c5: popf   
  0xa769a5c6: popa   
  0xa769a5c7: pop    %eax
  0xa769a5c8: mov    %esp,%esi
  0xa769a5ca: sub    $0x4,%esp
  0xa769a5cd: mov    %ecx,(%esp)
  0xa769a5d0: mov    0x28(%ebx),%ecx
  0xa769a5d3: push   %eax
  0xa769a5d4: jmp    *%ecx

AHE@0xb6673c48: 0xa0000000 i2c: 0xa769a680 c2i: 0xa769a70d c2iUV: 0xa769a6ec
i2c argument handler #0 for: receiver ()I (214 bytes generated)
c2i argument handler starts at 0xa769a70d
  0xa769a680: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769a683: mov    $0xa75b1ac0,%edi
  0xa769a688: cmp    %edi,%eax
  0xa769a68a: jbe    0xa769a69d
  0xa769a690: mov    $0xa7691ac0,%edi
  0xa769a695: cmp    %edi,%eax
  0xa769a697: jb     0xa769a6c8
  0xa769a69d: mov    $0xa75af400,%edi
  0xa769a6a2: cmp    %edi,%eax
  0xa769a6a4: jbe    0xa769a6b7
  0xa769a6aa: mov    $0xa75b1728,%edi
  0xa769a6af: cmp    %edi,%eax
  0xa769a6b1: jb     0xa769a6c8
  ;; i2c adapter must return to an interpreter frame
  0xa769a6b7: push   $0xb75a2830
  0xa769a6bc: call   0xa769a6c1
  0xa769a6c1: pusha  
  0xa769a6c2: call   0xb7052f32
  0xa769a6c7: hlt    
  ;; } verify_i2ce 
  0xa769a6c8: mov    %esp,%edi
  0xa769a6ca: and    $0xfffffff0,%esp
  0xa769a6cd: push   %eax
  0xa769a6ce: mov    %edi,%eax
  0xa769a6d0: mov    0x30(%ebx),%edi
  0xa769a6d3: mov    0x4(%eax),%ecx
  0xa769a6d6: mov    %esp,%eax
  0xa769a6d8: shr    $0xc,%eax
  0xa769a6db: mov    -0x486bdba0(,%eax,4),%eax
  0xa769a6e2: mov    %ebx,0x16c(%eax)
  0xa769a6e8: mov    %ebx,%eax
  0xa769a6ea: jmp    *%edi
  0xa769a6ec: mov    0x4(%ecx),%ebx
  0xa769a6ef: cmp    0x8(%eax),%ebx
  0xa769a6f2: mov    0x4(%eax),%ebx
  0xa769a6f5: jne    0xa769a708
  0xa769a6fb: cmpl   $0x0,0x34(%ebx)
  0xa769a702: je     0xa769a747
  0xa769a708: jmp    0xa7692560
  0xa769a70d: cmpl   $0x0,0x34(%ebx)
  0xa769a714: je     0xa769a747
  0xa769a71a: mov    (%esp),%eax
  0xa769a71d: pusha  
  0xa769a71e: pushf  
  0xa769a71f: sub    $0x10,%esp
  0xa769a722: vmovsd %xmm0,(%esp)
  0xa769a727: vmovsd %xmm1,0x8(%esp)
  0xa769a72d: push   %eax
  0xa769a72e: push   %ebx
  0xa769a72f: call   0xb71d62fc
  0xa769a734: add    $0x8,%esp
  0xa769a737: vmovsd (%esp),%xmm0
  0xa769a73c: vmovsd 0x8(%esp),%xmm1
  0xa769a742: add    $0x10,%esp
  0xa769a745: popf   
  0xa769a746: popa   
  0xa769a747: pop    %eax
  0xa769a748: mov    %esp,%esi
  0xa769a74a: sub    $0x4,%esp
  0xa769a74d: mov    %ecx,(%esp)
  0xa769a750: mov    0x28(%ebx),%ecx
  0xa769a753: push   %eax
  0xa769a754: jmp    *%ecx

AHE@0xb6673c6c: 0xa0000000 i2c: 0xa769a800 c2i: 0xa769a88d c2iUV: 0xa769a86c
i2c argument handler #0 for: receiver ()Ljava/lang/String; (214 bytes generated)
c2i argument handler starts at 0xa769a88d
  0xa769a800: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769a803: mov    $0xa75b1ac0,%edi
  0xa769a808: cmp    %edi,%eax
  0xa769a80a: jbe    0xa769a81d
  0xa769a810: mov    $0xa7691ac0,%edi
  0xa769a815: cmp    %edi,%eax
  0xa769a817: jb     0xa769a848
  0xa769a81d: mov    $0xa75af400,%edi
  0xa769a822: cmp    %edi,%eax
  0xa769a824: jbe    0xa769a837
  0xa769a82a: mov    $0xa75b1728,%edi
  0xa769a82f: cmp    %edi,%eax
  0xa769a831: jb     0xa769a848
  ;; i2c adapter must return to an interpreter frame
  0xa769a837: push   $0xb75a2830
  0xa769a83c: call   0xa769a841
  0xa769a841: pusha  
  0xa769a842: call   0xb7052f32
  0xa769a847: hlt    
  ;; } verify_i2ce 
  0xa769a848: mov    %esp,%edi
  0xa769a84a: and    $0xfffffff0,%esp
  0xa769a84d: push   %eax
  0xa769a84e: mov    %edi,%eax
  0xa769a850: mov    0x30(%ebx),%edi
  0xa769a853: mov    0x4(%eax),%ecx
  0xa769a856: mov    %esp,%eax
  0xa769a858: shr    $0xc,%eax
  0xa769a85b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769a862: mov    %ebx,0x16c(%eax)
  0xa769a868: mov    %ebx,%eax
  0xa769a86a: jmp    *%edi
  0xa769a86c: mov    0x4(%ecx),%ebx
  0xa769a86f: cmp    0x8(%eax),%ebx
  0xa769a872: mov    0x4(%eax),%ebx
  0xa769a875: jne    0xa769a888
  0xa769a87b: cmpl   $0x0,0x34(%ebx)
  0xa769a882: je     0xa769a8c7
  0xa769a888: jmp    0xa7692560
  0xa769a88d: cmpl   $0x0,0x34(%ebx)
  0xa769a894: je     0xa769a8c7
  0xa769a89a: mov    (%esp),%eax
  0xa769a89d: pusha  
  0xa769a89e: pushf  
  0xa769a89f: sub    $0x10,%esp
  0xa769a8a2: vmovsd %xmm0,(%esp)
  0xa769a8a7: vmovsd %xmm1,0x8(%esp)
  0xa769a8ad: push   %eax
  0xa769a8ae: push   %ebx
  0xa769a8af: call   0xb71d62fc
  0xa769a8b4: add    $0x8,%esp
  0xa769a8b7: vmovsd (%esp),%xmm0
  0xa769a8bc: vmovsd 0x8(%esp),%xmm1
  0xa769a8c2: add    $0x10,%esp
  0xa769a8c5: popf   
  0xa769a8c6: popa   
  0xa769a8c7: pop    %eax
  0xa769a8c8: mov    %esp,%esi
  0xa769a8ca: sub    $0x4,%esp
  0xa769a8cd: mov    %ecx,(%esp)
  0xa769a8d0: mov    0x28(%ebx),%ecx
  0xa769a8d3: push   %eax
  0xa769a8d4: jmp    *%ecx

AHE@0xb6673c90: 0xaa000000 i2c: 0xa769a980 c2i: 0xa769aa10 c2iUV: 0xa769a9ef
i2c argument handler #0 for: receiver (Ljava/lang/Object;)Z (221 bytes generated)
c2i argument handler starts at 0xa769aa10
  0xa769a980: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769a983: mov    $0xa75b1ac0,%edi
  0xa769a988: cmp    %edi,%eax
  0xa769a98a: jbe    0xa769a99d
  0xa769a990: mov    $0xa7691ac0,%edi
  0xa769a995: cmp    %edi,%eax
  0xa769a997: jb     0xa769a9c8
  0xa769a99d: mov    $0xa75af400,%edi
  0xa769a9a2: cmp    %edi,%eax
  0xa769a9a4: jbe    0xa769a9b7
  0xa769a9aa: mov    $0xa75b1728,%edi
  0xa769a9af: cmp    %edi,%eax
  0xa769a9b1: jb     0xa769a9c8
  ;; i2c adapter must return to an interpreter frame
  0xa769a9b7: push   $0xb75a2830
  0xa769a9bc: call   0xa769a9c1
  0xa769a9c1: pusha  
  0xa769a9c2: call   0xb7052f32
  0xa769a9c7: hlt    
  ;; } verify_i2ce 
  0xa769a9c8: mov    %esp,%edi
  0xa769a9ca: and    $0xfffffff0,%esp
  0xa769a9cd: push   %eax
  0xa769a9ce: mov    %edi,%eax
  0xa769a9d0: mov    0x30(%ebx),%edi
  0xa769a9d3: mov    0x8(%eax),%ecx
  0xa769a9d6: mov    0x4(%eax),%edx
  0xa769a9d9: mov    %esp,%eax
  0xa769a9db: shr    $0xc,%eax
  0xa769a9de: mov    -0x486bdba0(,%eax,4),%eax
  0xa769a9e5: mov    %ebx,0x16c(%eax)
  0xa769a9eb: mov    %ebx,%eax
  0xa769a9ed: jmp    *%edi
  0xa769a9ef: mov    0x4(%ecx),%ebx
  0xa769a9f2: cmp    0x8(%eax),%ebx
  0xa769a9f5: mov    0x4(%eax),%ebx
  0xa769a9f8: jne    0xa769aa0b
  0xa769a9fe: cmpl   $0x0,0x34(%ebx)
  0xa769aa05: je     0xa769aa4a
  0xa769aa0b: jmp    0xa7692560
  0xa769aa10: cmpl   $0x0,0x34(%ebx)
  0xa769aa17: je     0xa769aa4a
  0xa769aa1d: mov    (%esp),%eax
  0xa769aa20: pusha  
  0xa769aa21: pushf  
  0xa769aa22: sub    $0x10,%esp
  0xa769aa25: vmovsd %xmm0,(%esp)
  0xa769aa2a: vmovsd %xmm1,0x8(%esp)
  0xa769aa30: push   %eax
  0xa769aa31: push   %ebx
  0xa769aa32: call   0xb71d62fc
  0xa769aa37: add    $0x8,%esp
  0xa769aa3a: vmovsd (%esp),%xmm0
  0xa769aa3f: vmovsd 0x8(%esp),%xmm1
  0xa769aa45: add    $0x10,%esp
  0xa769aa48: popf   
  0xa769aa49: popa   
  0xa769aa4a: pop    %eax
  0xa769aa4b: mov    %esp,%esi
  0xa769aa4d: sub    $0x8,%esp
  0xa769aa50: mov    %ecx,0x4(%esp)
  0xa769aa54: mov    %edx,(%esp)
  0xa769aa57: mov    0x28(%ebx),%ecx
  0xa769aa5a: push   %eax
  0xa769aa5b: jmp    *%ecx

AHE@0xb6673cb4: 0xa0000000 i2c: 0xa769ab00 c2i: 0xa769ab8d c2iUV: 0xa769ab6c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769ab8d
  0xa769ab00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769ab03: mov    $0xa75b1ac0,%edi
  0xa769ab08: cmp    %edi,%eax
  0xa769ab0a: jbe    0xa769ab1d
  0xa769ab10: mov    $0xa7691ac0,%edi
  0xa769ab15: cmp    %edi,%eax
  0xa769ab17: jb     0xa769ab48
  0xa769ab1d: mov    $0xa75af400,%edi
  0xa769ab22: cmp    %edi,%eax
  0xa769ab24: jbe    0xa769ab37
  0xa769ab2a: mov    $0xa75b1728,%edi
  0xa769ab2f: cmp    %edi,%eax
  0xa769ab31: jb     0xa769ab48
  ;; i2c adapter must return to an interpreter frame
  0xa769ab37: push   $0xb75a2830
  0xa769ab3c: call   0xa769ab41
  0xa769ab41: pusha  
  0xa769ab42: call   0xb7052f32
  0xa769ab47: hlt    
  ;; } verify_i2ce 
  0xa769ab48: mov    %esp,%edi
  0xa769ab4a: and    $0xfffffff0,%esp
  0xa769ab4d: push   %eax
  0xa769ab4e: mov    %edi,%eax
  0xa769ab50: mov    0x30(%ebx),%edi
  0xa769ab53: mov    0x4(%eax),%ecx
  0xa769ab56: mov    %esp,%eax
  0xa769ab58: shr    $0xc,%eax
  0xa769ab5b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769ab62: mov    %ebx,0x16c(%eax)
  0xa769ab68: mov    %ebx,%eax
  0xa769ab6a: jmp    *%edi
  0xa769ab6c: mov    0x4(%ecx),%ebx
  0xa769ab6f: cmp    0x8(%eax),%ebx
  0xa769ab72: mov    0x4(%eax),%ebx
  0xa769ab75: jne    0xa769ab88
  0xa769ab7b: cmpl   $0x0,0x34(%ebx)
  0xa769ab82: je     0xa769abc7
  0xa769ab88: jmp    0xa7692560
  0xa769ab8d: cmpl   $0x0,0x34(%ebx)
  0xa769ab94: je     0xa769abc7
  0xa769ab9a: mov    (%esp),%eax
  0xa769ab9d: pusha  
  0xa769ab9e: pushf  
  0xa769ab9f: sub    $0x10,%esp
  0xa769aba2: vmovsd %xmm0,(%esp)
  0xa769aba7: vmovsd %xmm1,0x8(%esp)
  0xa769abad: push   %eax
  0xa769abae: push   %ebx
  0xa769abaf: call   0xb71d62fc
  0xa769abb4: add    $0x8,%esp
  0xa769abb7: vmovsd (%esp),%xmm0
  0xa769abbc: vmovsd 0x8(%esp),%xmm1
  0xa769abc2: add    $0x10,%esp
  0xa769abc5: popf   
  0xa769abc6: popa   
  0xa769abc7: pop    %eax
  0xa769abc8: mov    %esp,%esi
  0xa769abca: sub    $0x4,%esp
  0xa769abcd: mov    %ecx,(%esp)
  0xa769abd0: mov    0x28(%ebx),%ecx
  0xa769abd3: push   %eax
  0xa769abd4: jmp    *%ecx

AHE@0xb6673cd8: 0xabe00000 i2c: 0xa769ac80 c2i: 0xa769ad1e c2iUV: 0xa769acfd
i2c argument handler #0 for: receiver (J)V (247 bytes generated)
c2i argument handler starts at 0xa769ad1e
  0xa769ac80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769ac83: mov    $0xa75b1ac0,%edi
  0xa769ac88: cmp    %edi,%eax
  0xa769ac8a: jbe    0xa769ac9d
  0xa769ac90: mov    $0xa7691ac0,%edi
  0xa769ac95: cmp    %edi,%eax
  0xa769ac97: jb     0xa769acc8
  0xa769ac9d: mov    $0xa75af400,%edi
  0xa769aca2: cmp    %edi,%eax
  0xa769aca4: jbe    0xa769acb7
  0xa769acaa: mov    $0xa75b1728,%edi
  0xa769acaf: cmp    %edi,%eax
  0xa769acb1: jb     0xa769acc8
  ;; i2c adapter must return to an interpreter frame
  0xa769acb7: push   $0xb75a2830
  0xa769acbc: call   0xa769acc1
  0xa769acc1: pusha  
  0xa769acc2: call   0xb7052f32
  0xa769acc7: hlt    
  ;; } verify_i2ce 
  0xa769acc8: mov    %esp,%edi
  0xa769acca: sub    $0x8,%esp
  0xa769accd: and    $0xfffffff0,%esp
  0xa769acd0: push   %eax
  0xa769acd1: mov    %edi,%eax
  0xa769acd3: mov    0x30(%ebx),%edi
  0xa769acd6: mov    0xc(%eax),%ecx
  0xa769acd9: mov    0x4(%eax),%esi
  0xa769acdc: mov    %esi,0x4(%esp)
  0xa769ace0: mov    0x8(%eax),%esi
  0xa769ace3: mov    %esi,0x8(%esp)
  0xa769ace7: mov    %esp,%eax
  0xa769ace9: shr    $0xc,%eax
  0xa769acec: mov    -0x486bdba0(,%eax,4),%eax
  0xa769acf3: mov    %ebx,0x16c(%eax)
  0xa769acf9: mov    %ebx,%eax
  0xa769acfb: jmp    *%edi
  0xa769acfd: mov    0x4(%ecx),%ebx
  0xa769ad00: cmp    0x8(%eax),%ebx
  0xa769ad03: mov    0x4(%eax),%ebx
  0xa769ad06: jne    0xa769ad19
  0xa769ad0c: cmpl   $0x0,0x34(%ebx)
  0xa769ad13: je     0xa769ad58
  0xa769ad19: jmp    0xa7692560
  0xa769ad1e: cmpl   $0x0,0x34(%ebx)
  0xa769ad25: je     0xa769ad58
  0xa769ad2b: mov    (%esp),%eax
  0xa769ad2e: pusha  
  0xa769ad2f: pushf  
  0xa769ad30: sub    $0x10,%esp
  0xa769ad33: vmovsd %xmm0,(%esp)
  0xa769ad38: vmovsd %xmm1,0x8(%esp)
  0xa769ad3e: push   %eax
  0xa769ad3f: push   %ebx
  0xa769ad40: call   0xb71d62fc
  0xa769ad45: add    $0x8,%esp
  0xa769ad48: vmovsd (%esp),%xmm0
  0xa769ad4d: vmovsd 0x8(%esp),%xmm1
  0xa769ad53: add    $0x10,%esp
  0xa769ad56: popf   
  0xa769ad57: popa   
  0xa769ad58: pop    %eax
  0xa769ad59: mov    %esp,%esi
  0xa769ad5b: sub    $0xc,%esp
  0xa769ad5e: mov    %ecx,0x8(%esp)
  0xa769ad62: mov    0xc(%esp),%edi
  0xa769ad66: mov    %edi,(%esp)
  0xa769ad69: mov    0x10(%esp),%edi
  0xa769ad6d: mov    %edi,0x4(%esp)
  0xa769ad71: mov    0x28(%ebx),%ecx
  0xa769ad74: push   %eax
  0xa769ad75: jmp    *%ecx

AHE@0xb6673cfc: 0xabea0000 i2c: 0xa769ae00 c2i: 0xa769aea1 c2iUV: 0xa769ae80
i2c argument handler #0 for: receiver (JI)V (254 bytes generated)
c2i argument handler starts at 0xa769aea1
  0xa769ae00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769ae03: mov    $0xa75b1ac0,%edi
  0xa769ae08: cmp    %edi,%eax
  0xa769ae0a: jbe    0xa769ae1d
  0xa769ae10: mov    $0xa7691ac0,%edi
  0xa769ae15: cmp    %edi,%eax
  0xa769ae17: jb     0xa769ae48
  0xa769ae1d: mov    $0xa75af400,%edi
  0xa769ae22: cmp    %edi,%eax
  0xa769ae24: jbe    0xa769ae37
  0xa769ae2a: mov    $0xa75b1728,%edi
  0xa769ae2f: cmp    %edi,%eax
  0xa769ae31: jb     0xa769ae48
  ;; i2c adapter must return to an interpreter frame
  0xa769ae37: push   $0xb75a2830
  0xa769ae3c: call   0xa769ae41
  0xa769ae41: pusha  
  0xa769ae42: call   0xb7052f32
  0xa769ae47: hlt    
  ;; } verify_i2ce 
  0xa769ae48: mov    %esp,%edi
  0xa769ae4a: sub    $0x8,%esp
  0xa769ae4d: and    $0xfffffff0,%esp
  0xa769ae50: push   %eax
  0xa769ae51: mov    %edi,%eax
  0xa769ae53: mov    0x30(%ebx),%edi
  0xa769ae56: mov    0x10(%eax),%ecx
  0xa769ae59: mov    0x8(%eax),%esi
  0xa769ae5c: mov    %esi,0x4(%esp)
  0xa769ae60: mov    0xc(%eax),%esi
  0xa769ae63: mov    %esi,0x8(%esp)
  0xa769ae67: mov    0x4(%eax),%edx
  0xa769ae6a: mov    %esp,%eax
  0xa769ae6c: shr    $0xc,%eax
  0xa769ae6f: mov    -0x486bdba0(,%eax,4),%eax
  0xa769ae76: mov    %ebx,0x16c(%eax)
  0xa769ae7c: mov    %ebx,%eax
  0xa769ae7e: jmp    *%edi
  0xa769ae80: mov    0x4(%ecx),%ebx
  0xa769ae83: cmp    0x8(%eax),%ebx
  0xa769ae86: mov    0x4(%eax),%ebx
  0xa769ae89: jne    0xa769ae9c
  0xa769ae8f: cmpl   $0x0,0x34(%ebx)
  0xa769ae96: je     0xa769aedb
  0xa769ae9c: jmp    0xa7692560
  0xa769aea1: cmpl   $0x0,0x34(%ebx)
  0xa769aea8: je     0xa769aedb
  0xa769aeae: mov    (%esp),%eax
  0xa769aeb1: pusha  
  0xa769aeb2: pushf  
  0xa769aeb3: sub    $0x10,%esp
  0xa769aeb6: vmovsd %xmm0,(%esp)
  0xa769aebb: vmovsd %xmm1,0x8(%esp)
  0xa769aec1: push   %eax
  0xa769aec2: push   %ebx
  0xa769aec3: call   0xb71d62fc
  0xa769aec8: add    $0x8,%esp
  0xa769aecb: vmovsd (%esp),%xmm0
  0xa769aed0: vmovsd 0x8(%esp),%xmm1
  0xa769aed6: add    $0x10,%esp
  0xa769aed9: popf   
  0xa769aeda: popa   
  0xa769aedb: pop    %eax
  0xa769aedc: mov    %esp,%esi
  0xa769aede: sub    $0x10,%esp
  0xa769aee1: mov    %ecx,0xc(%esp)
  0xa769aee5: mov    0x10(%esp),%edi
  0xa769aee9: mov    %edi,0x4(%esp)
  0xa769aeed: mov    0x14(%esp),%edi
  0xa769aef1: mov    %edi,0x8(%esp)
  0xa769aef5: mov    %edx,(%esp)
  0xa769aef8: mov    0x28(%ebx),%ecx
  0xa769aefb: push   %eax
  0xa769aefc: jmp    *%ecx

AHE@0xb6673d20: 0xa0000000 i2c: 0xa769af80 c2i: 0xa769b00d c2iUV: 0xa769afec
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769b00d
  0xa769af80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769af83: mov    $0xa75b1ac0,%edi
  0xa769af88: cmp    %edi,%eax
  0xa769af8a: jbe    0xa769af9d
  0xa769af90: mov    $0xa7691ac0,%edi
  0xa769af95: cmp    %edi,%eax
  0xa769af97: jb     0xa769afc8
  0xa769af9d: mov    $0xa75af400,%edi
  0xa769afa2: cmp    %edi,%eax
  0xa769afa4: jbe    0xa769afb7
  0xa769afaa: mov    $0xa75b1728,%edi
  0xa769afaf: cmp    %edi,%eax
  0xa769afb1: jb     0xa769afc8
  ;; i2c adapter must return to an interpreter frame
  0xa769afb7: push   $0xb75a2830
  0xa769afbc: call   0xa769afc1
  0xa769afc1: pusha  
  0xa769afc2: call   0xb7052f32
  0xa769afc7: hlt    
  ;; } verify_i2ce 
  0xa769afc8: mov    %esp,%edi
  0xa769afca: and    $0xfffffff0,%esp
  0xa769afcd: push   %eax
  0xa769afce: mov    %edi,%eax
  0xa769afd0: mov    0x30(%ebx),%edi
  0xa769afd3: mov    0x4(%eax),%ecx
  0xa769afd6: mov    %esp,%eax
  0xa769afd8: shr    $0xc,%eax
  0xa769afdb: mov    -0x486bdba0(,%eax,4),%eax
  0xa769afe2: mov    %ebx,0x16c(%eax)
  0xa769afe8: mov    %ebx,%eax
  0xa769afea: jmp    *%edi
  0xa769afec: mov    0x4(%ecx),%ebx
  0xa769afef: cmp    0x8(%eax),%ebx
  0xa769aff2: mov    0x4(%eax),%ebx
  0xa769aff5: jne    0xa769b008
  0xa769affb: cmpl   $0x0,0x34(%ebx)
  0xa769b002: je     0xa769b047
  0xa769b008: jmp    0xa7692560
  0xa769b00d: cmpl   $0x0,0x34(%ebx)
  0xa769b014: je     0xa769b047
  0xa769b01a: mov    (%esp),%eax
  0xa769b01d: pusha  
  0xa769b01e: pushf  
  0xa769b01f: sub    $0x10,%esp
  0xa769b022: vmovsd %xmm0,(%esp)
  0xa769b027: vmovsd %xmm1,0x8(%esp)
  0xa769b02d: push   %eax
  0xa769b02e: push   %ebx
  0xa769b02f: call   0xb71d62fc
  0xa769b034: add    $0x8,%esp
  0xa769b037: vmovsd (%esp),%xmm0
  0xa769b03c: vmovsd 0x8(%esp),%xmm1
  0xa769b042: add    $0x10,%esp
  0xa769b045: popf   
  0xa769b046: popa   
  0xa769b047: pop    %eax
  0xa769b048: mov    %esp,%esi
  0xa769b04a: sub    $0x4,%esp
  0xa769b04d: mov    %ecx,(%esp)
  0xa769b050: mov    0x28(%ebx),%ecx
  0xa769b053: push   %eax
  0xa769b054: jmp    *%ecx

AHE@0xb6673d44: 0x i2c: 0xa769b100 c2i: 0xa769b18a c2iUV: 0xa769b169
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa769b18a
  0xa769b100: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769b103: mov    $0xa75b1ac0,%edi
  0xa769b108: cmp    %edi,%eax
  0xa769b10a: jbe    0xa769b11d
  0xa769b110: mov    $0xa7691ac0,%edi
  0xa769b115: cmp    %edi,%eax
  0xa769b117: jb     0xa769b148
  0xa769b11d: mov    $0xa75af400,%edi
  0xa769b122: cmp    %edi,%eax
  0xa769b124: jbe    0xa769b137
  0xa769b12a: mov    $0xa75b1728,%edi
  0xa769b12f: cmp    %edi,%eax
  0xa769b131: jb     0xa769b148
  ;; i2c adapter must return to an interpreter frame
  0xa769b137: push   $0xb75a2830
  0xa769b13c: call   0xa769b141
  0xa769b141: pusha  
  0xa769b142: call   0xb7052f32
  0xa769b147: hlt    
  ;; } verify_i2ce 
  0xa769b148: mov    %esp,%edi
  0xa769b14a: and    $0xfffffff0,%esp
  0xa769b14d: push   %eax
  0xa769b14e: mov    %edi,%eax
  0xa769b150: mov    0x30(%ebx),%edi
  0xa769b153: mov    %esp,%eax
  0xa769b155: shr    $0xc,%eax
  0xa769b158: mov    -0x486bdba0(,%eax,4),%eax
  0xa769b15f: mov    %ebx,0x16c(%eax)
  0xa769b165: mov    %ebx,%eax
  0xa769b167: jmp    *%edi
  0xa769b169: mov    0x4(%ecx),%ebx
  0xa769b16c: cmp    0x8(%eax),%ebx
  0xa769b16f: mov    0x4(%eax),%ebx
  0xa769b172: jne    0xa769b185
  0xa769b178: cmpl   $0x0,0x34(%ebx)
  0xa769b17f: je     0xa769b1c4
  0xa769b185: jmp    0xa7692560
  0xa769b18a: cmpl   $0x0,0x34(%ebx)
  0xa769b191: je     0xa769b1c4
  0xa769b197: mov    (%esp),%eax
  0xa769b19a: pusha  
  0xa769b19b: pushf  
  0xa769b19c: sub    $0x10,%esp
  0xa769b19f: vmovsd %xmm0,(%esp)
  0xa769b1a4: vmovsd %xmm1,0x8(%esp)
  0xa769b1aa: push   %eax
  0xa769b1ab: push   %ebx
  0xa769b1ac: call   0xb71d62fc
  0xa769b1b1: add    $0x8,%esp
  0xa769b1b4: vmovsd (%esp),%xmm0
  0xa769b1b9: vmovsd 0x8(%esp),%xmm1
  0xa769b1bf: add    $0x10,%esp
  0xa769b1c2: popf   
  0xa769b1c3: popa   
  0xa769b1c4: pop    %eax
  0xa769b1c5: mov    %esp,%esi
  0xa769b1c7: sub    $0x0,%esp
  0xa769b1ca: mov    0x28(%ebx),%ecx
  0xa769b1cd: push   %eax
  0xa769b1ce: jmp    *%ecx

AHE@0xb6673d68: 0xa0000000 i2c: 0xa769b280 c2i: 0xa769b30d c2iUV: 0xa769b2ec
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769b30d
  0xa769b280: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769b283: mov    $0xa75b1ac0,%edi
  0xa769b288: cmp    %edi,%eax
  0xa769b28a: jbe    0xa769b29d
  0xa769b290: mov    $0xa7691ac0,%edi
  0xa769b295: cmp    %edi,%eax
  0xa769b297: jb     0xa769b2c8
  0xa769b29d: mov    $0xa75af400,%edi
  0xa769b2a2: cmp    %edi,%eax
  0xa769b2a4: jbe    0xa769b2b7
  0xa769b2aa: mov    $0xa75b1728,%edi
  0xa769b2af: cmp    %edi,%eax
  0xa769b2b1: jb     0xa769b2c8
  ;; i2c adapter must return to an interpreter frame
  0xa769b2b7: push   $0xb75a2830
  0xa769b2bc: call   0xa769b2c1
  0xa769b2c1: pusha  
  0xa769b2c2: call   0xb7052f32
  0xa769b2c7: hlt    
  ;; } verify_i2ce 
  0xa769b2c8: mov    %esp,%edi
  0xa769b2ca: and    $0xfffffff0,%esp
  0xa769b2cd: push   %eax
  0xa769b2ce: mov    %edi,%eax
  0xa769b2d0: mov    0x30(%ebx),%edi
  0xa769b2d3: mov    0x4(%eax),%ecx
  0xa769b2d6: mov    %esp,%eax
  0xa769b2d8: shr    $0xc,%eax
  0xa769b2db: mov    -0x486bdba0(,%eax,4),%eax
  0xa769b2e2: mov    %ebx,0x16c(%eax)
  0xa769b2e8: mov    %ebx,%eax
  0xa769b2ea: jmp    *%edi
  0xa769b2ec: mov    0x4(%ecx),%ebx
  0xa769b2ef: cmp    0x8(%eax),%ebx
  0xa769b2f2: mov    0x4(%eax),%ebx
  0xa769b2f5: jne    0xa769b308
  0xa769b2fb: cmpl   $0x0,0x34(%ebx)
  0xa769b302: je     0xa769b347
  0xa769b308: jmp    0xa7692560
  0xa769b30d: cmpl   $0x0,0x34(%ebx)
  0xa769b314: je     0xa769b347
  0xa769b31a: mov    (%esp),%eax
  0xa769b31d: pusha  
  0xa769b31e: pushf  
  0xa769b31f: sub    $0x10,%esp
  0xa769b322: vmovsd %xmm0,(%esp)
  0xa769b327: vmovsd %xmm1,0x8(%esp)
  0xa769b32d: push   %eax
  0xa769b32e: push   %ebx
  0xa769b32f: call   0xb71d62fc
  0xa769b334: add    $0x8,%esp
  0xa769b337: vmovsd (%esp),%xmm0
  0xa769b33c: vmovsd 0x8(%esp),%xmm1
  0xa769b342: add    $0x10,%esp
  0xa769b345: popf   
  0xa769b346: popa   
  0xa769b347: pop    %eax
  0xa769b348: mov    %esp,%esi
  0xa769b34a: sub    $0x4,%esp
  0xa769b34d: mov    %ecx,(%esp)
  0xa769b350: mov    0x28(%ebx),%ecx
  0xa769b353: push   %eax
  0xa769b354: jmp    *%ecx

AHE@0xb6673d8c: 0xa0000000 i2c: 0xa769b400 c2i: 0xa769b48d c2iUV: 0xa769b46c
i2c argument handler #0 for: receiver ()[Ljava/lang/Throwable; (214 bytes generated)
c2i argument handler starts at 0xa769b48d
  0xa769b400: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769b403: mov    $0xa75b1ac0,%edi
  0xa769b408: cmp    %edi,%eax
  0xa769b40a: jbe    0xa769b41d
  0xa769b410: mov    $0xa7691ac0,%edi
  0xa769b415: cmp    %edi,%eax
  0xa769b417: jb     0xa769b448
  0xa769b41d: mov    $0xa75af400,%edi
  0xa769b422: cmp    %edi,%eax
  0xa769b424: jbe    0xa769b437
  0xa769b42a: mov    $0xa75b1728,%edi
  0xa769b42f: cmp    %edi,%eax
  0xa769b431: jb     0xa769b448
  ;; i2c adapter must return to an interpreter frame
  0xa769b437: push   $0xb75a2830
  0xa769b43c: call   0xa769b441
  0xa769b441: pusha  
  0xa769b442: call   0xb7052f32
  0xa769b447: hlt    
  ;; } verify_i2ce 
  0xa769b448: mov    %esp,%edi
  0xa769b44a: and    $0xfffffff0,%esp
  0xa769b44d: push   %eax
  0xa769b44e: mov    %edi,%eax
  0xa769b450: mov    0x30(%ebx),%edi
  0xa769b453: mov    0x4(%eax),%ecx
  0xa769b456: mov    %esp,%eax
  0xa769b458: shr    $0xc,%eax
  0xa769b45b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769b462: mov    %ebx,0x16c(%eax)
  0xa769b468: mov    %ebx,%eax
  0xa769b46a: jmp    *%edi
  0xa769b46c: mov    0x4(%ecx),%ebx
  0xa769b46f: cmp    0x8(%eax),%ebx
  0xa769b472: mov    0x4(%eax),%ebx
  0xa769b475: jne    0xa769b488
  0xa769b47b: cmpl   $0x0,0x34(%ebx)
  0xa769b482: je     0xa769b4c7
  0xa769b488: jmp    0xa7692560
  0xa769b48d: cmpl   $0x0,0x34(%ebx)
  0xa769b494: je     0xa769b4c7
  0xa769b49a: mov    (%esp),%eax
  0xa769b49d: pusha  
  0xa769b49e: pushf  
  0xa769b49f: sub    $0x10,%esp
  0xa769b4a2: vmovsd %xmm0,(%esp)
  0xa769b4a7: vmovsd %xmm1,0x8(%esp)
  0xa769b4ad: push   %eax
  0xa769b4ae: push   %ebx
  0xa769b4af: call   0xb71d62fc
  0xa769b4b4: add    $0x8,%esp
  0xa769b4b7: vmovsd (%esp),%xmm0
  0xa769b4bc: vmovsd 0x8(%esp),%xmm1
  0xa769b4c2: add    $0x10,%esp
  0xa769b4c5: popf   
  0xa769b4c6: popa   
  0xa769b4c7: pop    %eax
  0xa769b4c8: mov    %esp,%esi
  0xa769b4ca: sub    $0x4,%esp
  0xa769b4cd: mov    %ecx,(%esp)
  0xa769b4d0: mov    0x28(%ebx),%ecx
  0xa769b4d3: push   %eax
  0xa769b4d4: jmp    *%ecx

AHE@0xb6673db0: 0xaa000000 i2c: 0xa769b580 c2i: 0xa769b610 c2iUV: 0xa769b5ef
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (221 bytes generated)
c2i argument handler starts at 0xa769b610
  0xa769b580: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769b583: mov    $0xa75b1ac0,%edi
  0xa769b588: cmp    %edi,%eax
  0xa769b58a: jbe    0xa769b59d
  0xa769b590: mov    $0xa7691ac0,%edi
  0xa769b595: cmp    %edi,%eax
  0xa769b597: jb     0xa769b5c8
  0xa769b59d: mov    $0xa75af400,%edi
  0xa769b5a2: cmp    %edi,%eax
  0xa769b5a4: jbe    0xa769b5b7
  0xa769b5aa: mov    $0xa75b1728,%edi
  0xa769b5af: cmp    %edi,%eax
  0xa769b5b1: jb     0xa769b5c8
  ;; i2c adapter must return to an interpreter frame
  0xa769b5b7: push   $0xb75a2830
  0xa769b5bc: call   0xa769b5c1
  0xa769b5c1: pusha  
  0xa769b5c2: call   0xb7052f32
  0xa769b5c7: hlt    
  ;; } verify_i2ce 
  0xa769b5c8: mov    %esp,%edi
  0xa769b5ca: and    $0xfffffff0,%esp
  0xa769b5cd: push   %eax
  0xa769b5ce: mov    %edi,%eax
  0xa769b5d0: mov    0x30(%ebx),%edi
  0xa769b5d3: mov    0x8(%eax),%ecx
  0xa769b5d6: mov    0x4(%eax),%edx
  0xa769b5d9: mov    %esp,%eax
  0xa769b5db: shr    $0xc,%eax
  0xa769b5de: mov    -0x486bdba0(,%eax,4),%eax
  0xa769b5e5: mov    %ebx,0x16c(%eax)
  0xa769b5eb: mov    %ebx,%eax
  0xa769b5ed: jmp    *%edi
  0xa769b5ef: mov    0x4(%ecx),%ebx
  0xa769b5f2: cmp    0x8(%eax),%ebx
  0xa769b5f5: mov    0x4(%eax),%ebx
  0xa769b5f8: jne    0xa769b60b
  0xa769b5fe: cmpl   $0x0,0x34(%ebx)
  0xa769b605: je     0xa769b64a
  0xa769b60b: jmp    0xa7692560
  0xa769b610: cmpl   $0x0,0x34(%ebx)
  0xa769b617: je     0xa769b64a
  0xa769b61d: mov    (%esp),%eax
  0xa769b620: pusha  
  0xa769b621: pushf  
  0xa769b622: sub    $0x10,%esp
  0xa769b625: vmovsd %xmm0,(%esp)
  0xa769b62a: vmovsd %xmm1,0x8(%esp)
  0xa769b630: push   %eax
  0xa769b631: push   %ebx
  0xa769b632: call   0xb71d62fc
  0xa769b637: add    $0x8,%esp
  0xa769b63a: vmovsd (%esp),%xmm0
  0xa769b63f: vmovsd 0x8(%esp),%xmm1
  0xa769b645: add    $0x10,%esp
  0xa769b648: popf   
  0xa769b649: popa   
  0xa769b64a: pop    %eax
  0xa769b64b: mov    %esp,%esi
  0xa769b64d: sub    $0x8,%esp
  0xa769b650: mov    %ecx,0x4(%esp)
  0xa769b654: mov    %edx,(%esp)
  0xa769b657: mov    0x28(%ebx),%ecx
  0xa769b65a: push   %eax
  0xa769b65b: jmp    *%ecx

AHE@0xb6673dd4: 0xaa000000 i2c: 0xa769b700 c2i: 0xa769b790 c2iUV: 0xa769b76f
i2c argument handler #0 for: receiver (Ljava/io/ObjectOutputStream;)V (221 bytes generated)
c2i argument handler starts at 0xa769b790
  0xa769b700: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769b703: mov    $0xa75b1ac0,%edi
  0xa769b708: cmp    %edi,%eax
  0xa769b70a: jbe    0xa769b71d
  0xa769b710: mov    $0xa7691ac0,%edi
  0xa769b715: cmp    %edi,%eax
  0xa769b717: jb     0xa769b748
  0xa769b71d: mov    $0xa75af400,%edi
  0xa769b722: cmp    %edi,%eax
  0xa769b724: jbe    0xa769b737
  0xa769b72a: mov    $0xa75b1728,%edi
  0xa769b72f: cmp    %edi,%eax
  0xa769b731: jb     0xa769b748
  ;; i2c adapter must return to an interpreter frame
  0xa769b737: push   $0xb75a2830
  0xa769b73c: call   0xa769b741
  0xa769b741: pusha  
  0xa769b742: call   0xb7052f32
  0xa769b747: hlt    
  ;; } verify_i2ce 
  0xa769b748: mov    %esp,%edi
  0xa769b74a: and    $0xfffffff0,%esp
  0xa769b74d: push   %eax
  0xa769b74e: mov    %edi,%eax
  0xa769b750: mov    0x30(%ebx),%edi
  0xa769b753: mov    0x8(%eax),%ecx
  0xa769b756: mov    0x4(%eax),%edx
  0xa769b759: mov    %esp,%eax
  0xa769b75b: shr    $0xc,%eax
  0xa769b75e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769b765: mov    %ebx,0x16c(%eax)
  0xa769b76b: mov    %ebx,%eax
  0xa769b76d: jmp    *%edi
  0xa769b76f: mov    0x4(%ecx),%ebx
  0xa769b772: cmp    0x8(%eax),%ebx
  0xa769b775: mov    0x4(%eax),%ebx
  0xa769b778: jne    0xa769b78b
  0xa769b77e: cmpl   $0x0,0x34(%ebx)
  0xa769b785: je     0xa769b7ca
  0xa769b78b: jmp    0xa7692560
  0xa769b790: cmpl   $0x0,0x34(%ebx)
  0xa769b797: je     0xa769b7ca
  0xa769b79d: mov    (%esp),%eax
  0xa769b7a0: pusha  
  0xa769b7a1: pushf  
  0xa769b7a2: sub    $0x10,%esp
  0xa769b7a5: vmovsd %xmm0,(%esp)
  0xa769b7aa: vmovsd %xmm1,0x8(%esp)
  0xa769b7b0: push   %eax
  0xa769b7b1: push   %ebx
  0xa769b7b2: call   0xb71d62fc
  0xa769b7b7: add    $0x8,%esp
  0xa769b7ba: vmovsd (%esp),%xmm0
  0xa769b7bf: vmovsd 0x8(%esp),%xmm1
  0xa769b7c5: add    $0x10,%esp
  0xa769b7c8: popf   
  0xa769b7c9: popa   
  0xa769b7ca: pop    %eax
  0xa769b7cb: mov    %esp,%esi
  0xa769b7cd: sub    $0x8,%esp
  0xa769b7d0: mov    %ecx,0x4(%esp)
  0xa769b7d4: mov    %edx,(%esp)
  0xa769b7d7: mov    0x28(%ebx),%ecx
  0xa769b7da: push   %eax
  0xa769b7db: jmp    *%ecx

AHE@0xb6673df8: 0xaa000000 i2c: 0xa769b880 c2i: 0xa769b910 c2iUV: 0xa769b8ef
i2c argument handler #0 for: receiver (Ljava/util/List;)I (221 bytes generated)
c2i argument handler starts at 0xa769b910
  0xa769b880: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769b883: mov    $0xa75b1ac0,%edi
  0xa769b888: cmp    %edi,%eax
  0xa769b88a: jbe    0xa769b89d
  0xa769b890: mov    $0xa7691ac0,%edi
  0xa769b895: cmp    %edi,%eax
  0xa769b897: jb     0xa769b8c8
  0xa769b89d: mov    $0xa75af400,%edi
  0xa769b8a2: cmp    %edi,%eax
  0xa769b8a4: jbe    0xa769b8b7
  0xa769b8aa: mov    $0xa75b1728,%edi
  0xa769b8af: cmp    %edi,%eax
  0xa769b8b1: jb     0xa769b8c8
  ;; i2c adapter must return to an interpreter frame
  0xa769b8b7: push   $0xb75a2830
  0xa769b8bc: call   0xa769b8c1
  0xa769b8c1: pusha  
  0xa769b8c2: call   0xb7052f32
  0xa769b8c7: hlt    
  ;; } verify_i2ce 
  0xa769b8c8: mov    %esp,%edi
  0xa769b8ca: and    $0xfffffff0,%esp
  0xa769b8cd: push   %eax
  0xa769b8ce: mov    %edi,%eax
  0xa769b8d0: mov    0x30(%ebx),%edi
  0xa769b8d3: mov    0x8(%eax),%ecx
  0xa769b8d6: mov    0x4(%eax),%edx
  0xa769b8d9: mov    %esp,%eax
  0xa769b8db: shr    $0xc,%eax
  0xa769b8de: mov    -0x486bdba0(,%eax,4),%eax
  0xa769b8e5: mov    %ebx,0x16c(%eax)
  0xa769b8eb: mov    %ebx,%eax
  0xa769b8ed: jmp    *%edi
  0xa769b8ef: mov    0x4(%ecx),%ebx
  0xa769b8f2: cmp    0x8(%eax),%ebx
  0xa769b8f5: mov    0x4(%eax),%ebx
  0xa769b8f8: jne    0xa769b90b
  0xa769b8fe: cmpl   $0x0,0x34(%ebx)
  0xa769b905: je     0xa769b94a
  0xa769b90b: jmp    0xa7692560
  0xa769b910: cmpl   $0x0,0x34(%ebx)
  0xa769b917: je     0xa769b94a
  0xa769b91d: mov    (%esp),%eax
  0xa769b920: pusha  
  0xa769b921: pushf  
  0xa769b922: sub    $0x10,%esp
  0xa769b925: vmovsd %xmm0,(%esp)
  0xa769b92a: vmovsd %xmm1,0x8(%esp)
  0xa769b930: push   %eax
  0xa769b931: push   %ebx
  0xa769b932: call   0xb71d62fc
  0xa769b937: add    $0x8,%esp
  0xa769b93a: vmovsd (%esp),%xmm0
  0xa769b93f: vmovsd 0x8(%esp),%xmm1
  0xa769b945: add    $0x10,%esp
  0xa769b948: popf   
  0xa769b949: popa   
  0xa769b94a: pop    %eax
  0xa769b94b: mov    %esp,%esi
  0xa769b94d: sub    $0x8,%esp
  0xa769b950: mov    %ecx,0x4(%esp)
  0xa769b954: mov    %edx,(%esp)
  0xa769b957: mov    0x28(%ebx),%ecx
  0xa769b95a: push   %eax
  0xa769b95b: jmp    *%ecx

AHE@0xb6673e1c: 0xaa000000 i2c: 0xa769ba00 c2i: 0xa769ba90 c2iUV: 0xa769ba6f
i2c argument handler #0 for: receiver (Ljava/io/ObjectInputStream;)V (221 bytes generated)
c2i argument handler starts at 0xa769ba90
  0xa769ba00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769ba03: mov    $0xa75b1ac0,%edi
  0xa769ba08: cmp    %edi,%eax
  0xa769ba0a: jbe    0xa769ba1d
  0xa769ba10: mov    $0xa7691ac0,%edi
  0xa769ba15: cmp    %edi,%eax
  0xa769ba17: jb     0xa769ba48
  0xa769ba1d: mov    $0xa75af400,%edi
  0xa769ba22: cmp    %edi,%eax
  0xa769ba24: jbe    0xa769ba37
  0xa769ba2a: mov    $0xa75b1728,%edi
  0xa769ba2f: cmp    %edi,%eax
  0xa769ba31: jb     0xa769ba48
  ;; i2c adapter must return to an interpreter frame
  0xa769ba37: push   $0xb75a2830
  0xa769ba3c: call   0xa769ba41
  0xa769ba41: pusha  
  0xa769ba42: call   0xb7052f32
  0xa769ba47: hlt    
  ;; } verify_i2ce 
  0xa769ba48: mov    %esp,%edi
  0xa769ba4a: and    $0xfffffff0,%esp
  0xa769ba4d: push   %eax
  0xa769ba4e: mov    %edi,%eax
  0xa769ba50: mov    0x30(%ebx),%edi
  0xa769ba53: mov    0x8(%eax),%ecx
  0xa769ba56: mov    0x4(%eax),%edx
  0xa769ba59: mov    %esp,%eax
  0xa769ba5b: shr    $0xc,%eax
  0xa769ba5e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769ba65: mov    %ebx,0x16c(%eax)
  0xa769ba6b: mov    %ebx,%eax
  0xa769ba6d: jmp    *%edi
  0xa769ba6f: mov    0x4(%ecx),%ebx
  0xa769ba72: cmp    0x8(%eax),%ebx
  0xa769ba75: mov    0x4(%eax),%ebx
  0xa769ba78: jne    0xa769ba8b
  0xa769ba7e: cmpl   $0x0,0x34(%ebx)
  0xa769ba85: je     0xa769baca
  0xa769ba8b: jmp    0xa7692560
  0xa769ba90: cmpl   $0x0,0x34(%ebx)
  0xa769ba97: je     0xa769baca
  0xa769ba9d: mov    (%esp),%eax
  0xa769baa0: pusha  
  0xa769baa1: pushf  
  0xa769baa2: sub    $0x10,%esp
  0xa769baa5: vmovsd %xmm0,(%esp)
  0xa769baaa: vmovsd %xmm1,0x8(%esp)
  0xa769bab0: push   %eax
  0xa769bab1: push   %ebx
  0xa769bab2: call   0xb71d62fc
  0xa769bab7: add    $0x8,%esp
  0xa769baba: vmovsd (%esp),%xmm0
  0xa769babf: vmovsd 0x8(%esp),%xmm1
  0xa769bac5: add    $0x10,%esp
  0xa769bac8: popf   
  0xa769bac9: popa   
  0xa769baca: pop    %eax
  0xa769bacb: mov    %esp,%esi
  0xa769bacd: sub    $0x8,%esp
  0xa769bad0: mov    %ecx,0x4(%esp)
  0xa769bad4: mov    %edx,(%esp)
  0xa769bad7: mov    0x28(%ebx),%ecx
  0xa769bada: push   %eax
  0xa769badb: jmp    *%ecx

AHE@0xb6673e40: 0xaa000000 i2c: 0xa769bb80 c2i: 0xa769bc10 c2iUV: 0xa769bbef
i2c argument handler #0 for: receiver (I)Ljava/lang/StackTraceElement; (221 bytes generated)
c2i argument handler starts at 0xa769bc10
  0xa769bb80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769bb83: mov    $0xa75b1ac0,%edi
  0xa769bb88: cmp    %edi,%eax
  0xa769bb8a: jbe    0xa769bb9d
  0xa769bb90: mov    $0xa7691ac0,%edi
  0xa769bb95: cmp    %edi,%eax
  0xa769bb97: jb     0xa769bbc8
  0xa769bb9d: mov    $0xa75af400,%edi
  0xa769bba2: cmp    %edi,%eax
  0xa769bba4: jbe    0xa769bbb7
  0xa769bbaa: mov    $0xa75b1728,%edi
  0xa769bbaf: cmp    %edi,%eax
  0xa769bbb1: jb     0xa769bbc8
  ;; i2c adapter must return to an interpreter frame
  0xa769bbb7: push   $0xb75a2830
  0xa769bbbc: call   0xa769bbc1
  0xa769bbc1: pusha  
  0xa769bbc2: call   0xb7052f32
  0xa769bbc7: hlt    
  ;; } verify_i2ce 
  0xa769bbc8: mov    %esp,%edi
  0xa769bbca: and    $0xfffffff0,%esp
  0xa769bbcd: push   %eax
  0xa769bbce: mov    %edi,%eax
  0xa769bbd0: mov    0x30(%ebx),%edi
  0xa769bbd3: mov    0x8(%eax),%ecx
  0xa769bbd6: mov    0x4(%eax),%edx
  0xa769bbd9: mov    %esp,%eax
  0xa769bbdb: shr    $0xc,%eax
  0xa769bbde: mov    -0x486bdba0(,%eax,4),%eax
  0xa769bbe5: mov    %ebx,0x16c(%eax)
  0xa769bbeb: mov    %ebx,%eax
  0xa769bbed: jmp    *%edi
  0xa769bbef: mov    0x4(%ecx),%ebx
  0xa769bbf2: cmp    0x8(%eax),%ebx
  0xa769bbf5: mov    0x4(%eax),%ebx
  0xa769bbf8: jne    0xa769bc0b
  0xa769bbfe: cmpl   $0x0,0x34(%ebx)
  0xa769bc05: je     0xa769bc4a
  0xa769bc0b: jmp    0xa7692560
  0xa769bc10: cmpl   $0x0,0x34(%ebx)
  0xa769bc17: je     0xa769bc4a
  0xa769bc1d: mov    (%esp),%eax
  0xa769bc20: pusha  
  0xa769bc21: pushf  
  0xa769bc22: sub    $0x10,%esp
  0xa769bc25: vmovsd %xmm0,(%esp)
  0xa769bc2a: vmovsd %xmm1,0x8(%esp)
  0xa769bc30: push   %eax
  0xa769bc31: push   %ebx
  0xa769bc32: call   0xb71d62fc
  0xa769bc37: add    $0x8,%esp
  0xa769bc3a: vmovsd (%esp),%xmm0
  0xa769bc3f: vmovsd 0x8(%esp),%xmm1
  0xa769bc45: add    $0x10,%esp
  0xa769bc48: popf   
  0xa769bc49: popa   
  0xa769bc4a: pop    %eax
  0xa769bc4b: mov    %esp,%esi
  0xa769bc4d: sub    $0x8,%esp
  0xa769bc50: mov    %ecx,0x4(%esp)
  0xa769bc54: mov    %edx,(%esp)
  0xa769bc57: mov    0x28(%ebx),%ecx
  0xa769bc5a: push   %eax
  0xa769bc5b: jmp    *%ecx

AHE@0xb6673e64: 0xa0000000 i2c: 0xa769bd00 c2i: 0xa769bd8d c2iUV: 0xa769bd6c
i2c argument handler #0 for: receiver ()I (214 bytes generated)
c2i argument handler starts at 0xa769bd8d
  0xa769bd00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769bd03: mov    $0xa75b1ac0,%edi
  0xa769bd08: cmp    %edi,%eax
  0xa769bd0a: jbe    0xa769bd1d
  0xa769bd10: mov    $0xa7691ac0,%edi
  0xa769bd15: cmp    %edi,%eax
  0xa769bd17: jb     0xa769bd48
  0xa769bd1d: mov    $0xa75af400,%edi
  0xa769bd22: cmp    %edi,%eax
  0xa769bd24: jbe    0xa769bd37
  0xa769bd2a: mov    $0xa75b1728,%edi
  0xa769bd2f: cmp    %edi,%eax
  0xa769bd31: jb     0xa769bd48
  ;; i2c adapter must return to an interpreter frame
  0xa769bd37: push   $0xb75a2830
  0xa769bd3c: call   0xa769bd41
  0xa769bd41: pusha  
  0xa769bd42: call   0xb7052f32
  0xa769bd47: hlt    
  ;; } verify_i2ce 
  0xa769bd48: mov    %esp,%edi
  0xa769bd4a: and    $0xfffffff0,%esp
  0xa769bd4d: push   %eax
  0xa769bd4e: mov    %edi,%eax
  0xa769bd50: mov    0x30(%ebx),%edi
  0xa769bd53: mov    0x4(%eax),%ecx
  0xa769bd56: mov    %esp,%eax
  0xa769bd58: shr    $0xc,%eax
  0xa769bd5b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769bd62: mov    %ebx,0x16c(%eax)
  0xa769bd68: mov    %ebx,%eax
  0xa769bd6a: jmp    *%edi
  0xa769bd6c: mov    0x4(%ecx),%ebx
  0xa769bd6f: cmp    0x8(%eax),%ebx
  0xa769bd72: mov    0x4(%eax),%ebx
  0xa769bd75: jne    0xa769bd88
  0xa769bd7b: cmpl   $0x0,0x34(%ebx)
  0xa769bd82: je     0xa769bdc7
  0xa769bd88: jmp    0xa7692560
  0xa769bd8d: cmpl   $0x0,0x34(%ebx)
  0xa769bd94: je     0xa769bdc7
  0xa769bd9a: mov    (%esp),%eax
  0xa769bd9d: pusha  
  0xa769bd9e: pushf  
  0xa769bd9f: sub    $0x10,%esp
  0xa769bda2: vmovsd %xmm0,(%esp)
  0xa769bda7: vmovsd %xmm1,0x8(%esp)
  0xa769bdad: push   %eax
  0xa769bdae: push   %ebx
  0xa769bdaf: call   0xb71d62fc
  0xa769bdb4: add    $0x8,%esp
  0xa769bdb7: vmovsd (%esp),%xmm0
  0xa769bdbc: vmovsd 0x8(%esp),%xmm1
  0xa769bdc2: add    $0x10,%esp
  0xa769bdc5: popf   
  0xa769bdc6: popa   
  0xa769bdc7: pop    %eax
  0xa769bdc8: mov    %esp,%esi
  0xa769bdca: sub    $0x4,%esp
  0xa769bdcd: mov    %ecx,(%esp)
  0xa769bdd0: mov    0x28(%ebx),%ecx
  0xa769bdd3: push   %eax
  0xa769bdd4: jmp    *%ecx

AHE@0xb6673e88: 0xaa000000 i2c: 0xa769be80 c2i: 0xa769bf10 c2iUV: 0xa769beef
i2c argument handler #0 for: receiver ([Ljava/lang/StackTraceElement;)V (221 bytes generated)
c2i argument handler starts at 0xa769bf10
  0xa769be80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769be83: mov    $0xa75b1ac0,%edi
  0xa769be88: cmp    %edi,%eax
  0xa769be8a: jbe    0xa769be9d
  0xa769be90: mov    $0xa7691ac0,%edi
  0xa769be95: cmp    %edi,%eax
  0xa769be97: jb     0xa769bec8
  0xa769be9d: mov    $0xa75af400,%edi
  0xa769bea2: cmp    %edi,%eax
  0xa769bea4: jbe    0xa769beb7
  0xa769beaa: mov    $0xa75b1728,%edi
  0xa769beaf: cmp    %edi,%eax
  0xa769beb1: jb     0xa769bec8
  ;; i2c adapter must return to an interpreter frame
  0xa769beb7: push   $0xb75a2830
  0xa769bebc: call   0xa769bec1
  0xa769bec1: pusha  
  0xa769bec2: call   0xb7052f32
  0xa769bec7: hlt    
  ;; } verify_i2ce 
  0xa769bec8: mov    %esp,%edi
  0xa769beca: and    $0xfffffff0,%esp
  0xa769becd: push   %eax
  0xa769bece: mov    %edi,%eax
  0xa769bed0: mov    0x30(%ebx),%edi
  0xa769bed3: mov    0x8(%eax),%ecx
  0xa769bed6: mov    0x4(%eax),%edx
  0xa769bed9: mov    %esp,%eax
  0xa769bedb: shr    $0xc,%eax
  0xa769bede: mov    -0x486bdba0(,%eax,4),%eax
  0xa769bee5: mov    %ebx,0x16c(%eax)
  0xa769beeb: mov    %ebx,%eax
  0xa769beed: jmp    *%edi
  0xa769beef: mov    0x4(%ecx),%ebx
  0xa769bef2: cmp    0x8(%eax),%ebx
  0xa769bef5: mov    0x4(%eax),%ebx
  0xa769bef8: jne    0xa769bf0b
  0xa769befe: cmpl   $0x0,0x34(%ebx)
  0xa769bf05: je     0xa769bf4a
  0xa769bf0b: jmp    0xa7692560
  0xa769bf10: cmpl   $0x0,0x34(%ebx)
  0xa769bf17: je     0xa769bf4a
  0xa769bf1d: mov    (%esp),%eax
  0xa769bf20: pusha  
  0xa769bf21: pushf  
  0xa769bf22: sub    $0x10,%esp
  0xa769bf25: vmovsd %xmm0,(%esp)
  0xa769bf2a: vmovsd %xmm1,0x8(%esp)
  0xa769bf30: push   %eax
  0xa769bf31: push   %ebx
  0xa769bf32: call   0xb71d62fc
  0xa769bf37: add    $0x8,%esp
  0xa769bf3a: vmovsd (%esp),%xmm0
  0xa769bf3f: vmovsd 0x8(%esp),%xmm1
  0xa769bf45: add    $0x10,%esp
  0xa769bf48: popf   
  0xa769bf49: popa   
  0xa769bf4a: pop    %eax
  0xa769bf4b: mov    %esp,%esi
  0xa769bf4d: sub    $0x8,%esp
  0xa769bf50: mov    %ecx,0x4(%esp)
  0xa769bf54: mov    %edx,(%esp)
  0xa769bf57: mov    0x28(%ebx),%ecx
  0xa769bf5a: push   %eax
  0xa769bf5b: jmp    *%ecx

AHE@0xb6673eac: 0xa0000000 i2c: 0xa769c000 c2i: 0xa769c08d c2iUV: 0xa769c06c
i2c argument handler #0 for: receiver ()[Ljava/lang/StackTraceElement; (214 bytes generated)
c2i argument handler starts at 0xa769c08d
  0xa769c000: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769c003: mov    $0xa75b1ac0,%edi
  0xa769c008: cmp    %edi,%eax
  0xa769c00a: jbe    0xa769c01d
  0xa769c010: mov    $0xa7691ac0,%edi
  0xa769c015: cmp    %edi,%eax
  0xa769c017: jb     0xa769c048
  0xa769c01d: mov    $0xa75af400,%edi
  0xa769c022: cmp    %edi,%eax
  0xa769c024: jbe    0xa769c037
  0xa769c02a: mov    $0xa75b1728,%edi
  0xa769c02f: cmp    %edi,%eax
  0xa769c031: jb     0xa769c048
  ;; i2c adapter must return to an interpreter frame
  0xa769c037: push   $0xb75a2830
  0xa769c03c: call   0xa769c041
  0xa769c041: pusha  
  0xa769c042: call   0xb7052f32
  0xa769c047: hlt    
  ;; } verify_i2ce 
  0xa769c048: mov    %esp,%edi
  0xa769c04a: and    $0xfffffff0,%esp
  0xa769c04d: push   %eax
  0xa769c04e: mov    %edi,%eax
  0xa769c050: mov    0x30(%ebx),%edi
  0xa769c053: mov    0x4(%eax),%ecx
  0xa769c056: mov    %esp,%eax
  0xa769c058: shr    $0xc,%eax
  0xa769c05b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769c062: mov    %ebx,0x16c(%eax)
  0xa769c068: mov    %ebx,%eax
  0xa769c06a: jmp    *%edi
  0xa769c06c: mov    0x4(%ecx),%ebx
  0xa769c06f: cmp    0x8(%eax),%ebx
  0xa769c072: mov    0x4(%eax),%ebx
  0xa769c075: jne    0xa769c088
  0xa769c07b: cmpl   $0x0,0x34(%ebx)
  0xa769c082: je     0xa769c0c7
  0xa769c088: jmp    0xa7692560
  0xa769c08d: cmpl   $0x0,0x34(%ebx)
  0xa769c094: je     0xa769c0c7
  0xa769c09a: mov    (%esp),%eax
  0xa769c09d: pusha  
  0xa769c09e: pushf  
  0xa769c09f: sub    $0x10,%esp
  0xa769c0a2: vmovsd %xmm0,(%esp)
  0xa769c0a7: vmovsd %xmm1,0x8(%esp)
  0xa769c0ad: push   %eax
  0xa769c0ae: push   %ebx
  0xa769c0af: call   0xb71d62fc
  0xa769c0b4: add    $0x8,%esp
  0xa769c0b7: vmovsd (%esp),%xmm0
  0xa769c0bc: vmovsd 0x8(%esp),%xmm1
  0xa769c0c2: add    $0x10,%esp
  0xa769c0c5: popf   
  0xa769c0c6: popa   
  0xa769c0c7: pop    %eax
  0xa769c0c8: mov    %esp,%esi
  0xa769c0ca: sub    $0x4,%esp
  0xa769c0cd: mov    %ecx,(%esp)
  0xa769c0d0: mov    0x28(%ebx),%ecx
  0xa769c0d3: push   %eax
  0xa769c0d4: jmp    *%ecx

AHE@0xb6673ed0: 0xa0000000 i2c: 0xa769c180 c2i: 0xa769c20d c2iUV: 0xa769c1ec
i2c argument handler #0 for: receiver ()[Ljava/lang/StackTraceElement; (214 bytes generated)
c2i argument handler starts at 0xa769c20d
  0xa769c180: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769c183: mov    $0xa75b1ac0,%edi
  0xa769c188: cmp    %edi,%eax
  0xa769c18a: jbe    0xa769c19d
  0xa769c190: mov    $0xa7691ac0,%edi
  0xa769c195: cmp    %edi,%eax
  0xa769c197: jb     0xa769c1c8
  0xa769c19d: mov    $0xa75af400,%edi
  0xa769c1a2: cmp    %edi,%eax
  0xa769c1a4: jbe    0xa769c1b7
  0xa769c1aa: mov    $0xa75b1728,%edi
  0xa769c1af: cmp    %edi,%eax
  0xa769c1b1: jb     0xa769c1c8
  ;; i2c adapter must return to an interpreter frame
  0xa769c1b7: push   $0xb75a2830
  0xa769c1bc: call   0xa769c1c1
  0xa769c1c1: pusha  
  0xa769c1c2: call   0xb7052f32
  0xa769c1c7: hlt    
  ;; } verify_i2ce 
  0xa769c1c8: mov    %esp,%edi
  0xa769c1ca: and    $0xfffffff0,%esp
  0xa769c1cd: push   %eax
  0xa769c1ce: mov    %edi,%eax
  0xa769c1d0: mov    0x30(%ebx),%edi
  0xa769c1d3: mov    0x4(%eax),%ecx
  0xa769c1d6: mov    %esp,%eax
  0xa769c1d8: shr    $0xc,%eax
  0xa769c1db: mov    -0x486bdba0(,%eax,4),%eax
  0xa769c1e2: mov    %ebx,0x16c(%eax)
  0xa769c1e8: mov    %ebx,%eax
  0xa769c1ea: jmp    *%edi
  0xa769c1ec: mov    0x4(%ecx),%ebx
  0xa769c1ef: cmp    0x8(%eax),%ebx
  0xa769c1f2: mov    0x4(%eax),%ebx
  0xa769c1f5: jne    0xa769c208
  0xa769c1fb: cmpl   $0x0,0x34(%ebx)
  0xa769c202: je     0xa769c247
  0xa769c208: jmp    0xa7692560
  0xa769c20d: cmpl   $0x0,0x34(%ebx)
  0xa769c214: je     0xa769c247
  0xa769c21a: mov    (%esp),%eax
  0xa769c21d: pusha  
  0xa769c21e: pushf  
  0xa769c21f: sub    $0x10,%esp
  0xa769c222: vmovsd %xmm0,(%esp)
  0xa769c227: vmovsd %xmm1,0x8(%esp)
  0xa769c22d: push   %eax
  0xa769c22e: push   %ebx
  0xa769c22f: call   0xb71d62fc
  0xa769c234: add    $0x8,%esp
  0xa769c237: vmovsd (%esp),%xmm0
  0xa769c23c: vmovsd 0x8(%esp),%xmm1
  0xa769c242: add    $0x10,%esp
  0xa769c245: popf   
  0xa769c246: popa   
  0xa769c247: pop    %eax
  0xa769c248: mov    %esp,%esi
  0xa769c24a: sub    $0x4,%esp
  0xa769c24d: mov    %ecx,(%esp)
  0xa769c250: mov    0x28(%ebx),%ecx
  0xa769c253: push   %eax
  0xa769c254: jmp    *%ecx

AHE@0xb6673ef4: 0xaaaaaa00 i2c: 0xa769c300 c2i: 0xa769c3af c2iUV: 0xa769c38e
i2c argument handler #0 for: receiver (Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V (284 bytes generated)
c2i argument handler starts at 0xa769c3af
  0xa769c300: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769c303: mov    $0xa75b1ac0,%edi
  0xa769c308: cmp    %edi,%eax
  0xa769c30a: jbe    0xa769c31d
  0xa769c310: mov    $0xa7691ac0,%edi
  0xa769c315: cmp    %edi,%eax
  0xa769c317: jb     0xa769c348
  0xa769c31d: mov    $0xa75af400,%edi
  0xa769c322: cmp    %edi,%eax
  0xa769c324: jbe    0xa769c337
  0xa769c32a: mov    $0xa75b1728,%edi
  0xa769c32f: cmp    %edi,%eax
  0xa769c331: jb     0xa769c348
  ;; i2c adapter must return to an interpreter frame
  0xa769c337: push   $0xb75a2830
  0xa769c33c: call   0xa769c341
  0xa769c341: pusha  
  0xa769c342: call   0xb7052f32
  0xa769c347: hlt    
  ;; } verify_i2ce 
  0xa769c348: mov    %esp,%edi
  0xa769c34a: sub    $0x10,%esp
  0xa769c34d: and    $0xfffffff0,%esp
  0xa769c350: push   %eax
  0xa769c351: mov    %edi,%eax
  0xa769c353: mov    0x30(%ebx),%edi
  0xa769c356: mov    0x18(%eax),%ecx
  0xa769c359: mov    0x14(%eax),%edx
  0xa769c35c: mov    0x10(%eax),%esi
  0xa769c35f: mov    %esi,0x4(%esp)
  0xa769c363: mov    0xc(%eax),%esi
  0xa769c366: mov    %esi,0x8(%esp)
  0xa769c36a: mov    0x8(%eax),%esi
  0xa769c36d: mov    %esi,0xc(%esp)
  0xa769c371: mov    0x4(%eax),%esi
  0xa769c374: mov    %esi,0x10(%esp)
  0xa769c378: mov    %esp,%eax
  0xa769c37a: shr    $0xc,%eax
  0xa769c37d: mov    -0x486bdba0(,%eax,4),%eax
  0xa769c384: mov    %ebx,0x16c(%eax)
  0xa769c38a: mov    %ebx,%eax
  0xa769c38c: jmp    *%edi
  0xa769c38e: mov    0x4(%ecx),%ebx
  0xa769c391: cmp    0x8(%eax),%ebx
  0xa769c394: mov    0x4(%eax),%ebx
  0xa769c397: jne    0xa769c3aa
  0xa769c39d: cmpl   $0x0,0x34(%ebx)
  0xa769c3a4: je     0xa769c3e9
  0xa769c3aa: jmp    0xa7692560
  0xa769c3af: cmpl   $0x0,0x34(%ebx)
  0xa769c3b6: je     0xa769c3e9
  0xa769c3bc: mov    (%esp),%eax
  0xa769c3bf: pusha  
  0xa769c3c0: pushf  
  0xa769c3c1: sub    $0x10,%esp
  0xa769c3c4: vmovsd %xmm0,(%esp)
  0xa769c3c9: vmovsd %xmm1,0x8(%esp)
  0xa769c3cf: push   %eax
  0xa769c3d0: push   %ebx
  0xa769c3d1: call   0xb71d62fc
  0xa769c3d6: add    $0x8,%esp
  0xa769c3d9: vmovsd (%esp),%xmm0
  0xa769c3de: vmovsd 0x8(%esp),%xmm1
  0xa769c3e4: add    $0x10,%esp
  0xa769c3e7: popf   
  0xa769c3e8: popa   
  0xa769c3e9: pop    %eax
  0xa769c3ea: mov    %esp,%esi
  0xa769c3ec: sub    $0x18,%esp
  0xa769c3ef: mov    %ecx,0x14(%esp)
  0xa769c3f3: mov    %edx,0x10(%esp)
  0xa769c3f7: mov    0x18(%esp),%edi
  0xa769c3fb: mov    %edi,0xc(%esp)
  0xa769c3ff: mov    0x1c(%esp),%edi
  0xa769c403: mov    %edi,0x8(%esp)
  0xa769c407: mov    0x20(%esp),%edi
  0xa769c40b: mov    %edi,0x4(%esp)
  0xa769c40f: mov    0x24(%esp),%edi
  0xa769c413: mov    %edi,(%esp)
  0xa769c416: mov    0x28(%ebx),%ecx
  0xa769c419: push   %eax
  0xa769c41a: jmp    *%ecx

AHE@0xb6673f18: 0xa0000000 i2c: 0xa769c4c0 c2i: 0xa769c54d c2iUV: 0xa769c52c
i2c argument handler #0 for: receiver ()Ljava/lang/String; (214 bytes generated)
c2i argument handler starts at 0xa769c54d
  0xa769c4c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769c4c3: mov    $0xa75b1ac0,%edi
  0xa769c4c8: cmp    %edi,%eax
  0xa769c4ca: jbe    0xa769c4dd
  0xa769c4d0: mov    $0xa7691ac0,%edi
  0xa769c4d5: cmp    %edi,%eax
  0xa769c4d7: jb     0xa769c508
  0xa769c4dd: mov    $0xa75af400,%edi
  0xa769c4e2: cmp    %edi,%eax
  0xa769c4e4: jbe    0xa769c4f7
  0xa769c4ea: mov    $0xa75b1728,%edi
  0xa769c4ef: cmp    %edi,%eax
  0xa769c4f1: jb     0xa769c508
  ;; i2c adapter must return to an interpreter frame
  0xa769c4f7: push   $0xb75a2830
  0xa769c4fc: call   0xa769c501
  0xa769c501: pusha  
  0xa769c502: call   0xb7052f32
  0xa769c507: hlt    
  ;; } verify_i2ce 
  0xa769c508: mov    %esp,%edi
  0xa769c50a: and    $0xfffffff0,%esp
  0xa769c50d: push   %eax
  0xa769c50e: mov    %edi,%eax
  0xa769c510: mov    0x30(%ebx),%edi
  0xa769c513: mov    0x4(%eax),%ecx
  0xa769c516: mov    %esp,%eax
  0xa769c518: shr    $0xc,%eax
  0xa769c51b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769c522: mov    %ebx,0x16c(%eax)
  0xa769c528: mov    %ebx,%eax
  0xa769c52a: jmp    *%edi
  0xa769c52c: mov    0x4(%ecx),%ebx
  0xa769c52f: cmp    0x8(%eax),%ebx
  0xa769c532: mov    0x4(%eax),%ebx
  0xa769c535: jne    0xa769c548
  0xa769c53b: cmpl   $0x0,0x34(%ebx)
  0xa769c542: je     0xa769c587
  0xa769c548: jmp    0xa7692560
  0xa769c54d: cmpl   $0x0,0x34(%ebx)
  0xa769c554: je     0xa769c587
  0xa769c55a: mov    (%esp),%eax
  0xa769c55d: pusha  
  0xa769c55e: pushf  
  0xa769c55f: sub    $0x10,%esp
  0xa769c562: vmovsd %xmm0,(%esp)
  0xa769c567: vmovsd %xmm1,0x8(%esp)
  0xa769c56d: push   %eax
  0xa769c56e: push   %ebx
  0xa769c56f: call   0xb71d62fc
  0xa769c574: add    $0x8,%esp
  0xa769c577: vmovsd (%esp),%xmm0
  0xa769c57c: vmovsd 0x8(%esp),%xmm1
  0xa769c582: add    $0x10,%esp
  0xa769c585: popf   
  0xa769c586: popa   
  0xa769c587: pop    %eax
  0xa769c588: mov    %esp,%esi
  0xa769c58a: sub    $0x4,%esp
  0xa769c58d: mov    %ecx,(%esp)
  0xa769c590: mov    0x28(%ebx),%ecx
  0xa769c593: push   %eax
  0xa769c594: jmp    *%ecx

AHE@0xb6673f3c: 0xa0000000 i2c: 0xa769c640 c2i: 0xa769c6cd c2iUV: 0xa769c6ac
i2c argument handler #0 for: receiver ()Ljava/lang/String; (214 bytes generated)
c2i argument handler starts at 0xa769c6cd
  0xa769c640: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769c643: mov    $0xa75b1ac0,%edi
  0xa769c648: cmp    %edi,%eax
  0xa769c64a: jbe    0xa769c65d
  0xa769c650: mov    $0xa7691ac0,%edi
  0xa769c655: cmp    %edi,%eax
  0xa769c657: jb     0xa769c688
  0xa769c65d: mov    $0xa75af400,%edi
  0xa769c662: cmp    %edi,%eax
  0xa769c664: jbe    0xa769c677
  0xa769c66a: mov    $0xa75b1728,%edi
  0xa769c66f: cmp    %edi,%eax
  0xa769c671: jb     0xa769c688
  ;; i2c adapter must return to an interpreter frame
  0xa769c677: push   $0xb75a2830
  0xa769c67c: call   0xa769c681
  0xa769c681: pusha  
  0xa769c682: call   0xb7052f32
  0xa769c687: hlt    
  ;; } verify_i2ce 
  0xa769c688: mov    %esp,%edi
  0xa769c68a: and    $0xfffffff0,%esp
  0xa769c68d: push   %eax
  0xa769c68e: mov    %edi,%eax
  0xa769c690: mov    0x30(%ebx),%edi
  0xa769c693: mov    0x4(%eax),%ecx
  0xa769c696: mov    %esp,%eax
  0xa769c698: shr    $0xc,%eax
  0xa769c69b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769c6a2: mov    %ebx,0x16c(%eax)
  0xa769c6a8: mov    %ebx,%eax
  0xa769c6aa: jmp    *%edi
  0xa769c6ac: mov    0x4(%ecx),%ebx
  0xa769c6af: cmp    0x8(%eax),%ebx
  0xa769c6b2: mov    0x4(%eax),%ebx
  0xa769c6b5: jne    0xa769c6c8
  0xa769c6bb: cmpl   $0x0,0x34(%ebx)
  0xa769c6c2: je     0xa769c707
  0xa769c6c8: jmp    0xa7692560
  0xa769c6cd: cmpl   $0x0,0x34(%ebx)
  0xa769c6d4: je     0xa769c707
  0xa769c6da: mov    (%esp),%eax
  0xa769c6dd: pusha  
  0xa769c6de: pushf  
  0xa769c6df: sub    $0x10,%esp
  0xa769c6e2: vmovsd %xmm0,(%esp)
  0xa769c6e7: vmovsd %xmm1,0x8(%esp)
  0xa769c6ed: push   %eax
  0xa769c6ee: push   %ebx
  0xa769c6ef: call   0xb71d62fc
  0xa769c6f4: add    $0x8,%esp
  0xa769c6f7: vmovsd (%esp),%xmm0
  0xa769c6fc: vmovsd 0x8(%esp),%xmm1
  0xa769c702: add    $0x10,%esp
  0xa769c705: popf   
  0xa769c706: popa   
  0xa769c707: pop    %eax
  0xa769c708: mov    %esp,%esi
  0xa769c70a: sub    $0x4,%esp
  0xa769c70d: mov    %ecx,(%esp)
  0xa769c710: mov    0x28(%ebx),%ecx
  0xa769c713: push   %eax
  0xa769c714: jmp    *%ecx

AHE@0xb6673f60: 0xa0000000 i2c: 0xa769c7c0 c2i: 0xa769c84d c2iUV: 0xa769c82c
i2c argument handler #0 for: receiver ()Ljava/lang/String; (214 bytes generated)
c2i argument handler starts at 0xa769c84d
  0xa769c7c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769c7c3: mov    $0xa75b1ac0,%edi
  0xa769c7c8: cmp    %edi,%eax
  0xa769c7ca: jbe    0xa769c7dd
  0xa769c7d0: mov    $0xa7691ac0,%edi
  0xa769c7d5: cmp    %edi,%eax
  0xa769c7d7: jb     0xa769c808
  0xa769c7dd: mov    $0xa75af400,%edi
  0xa769c7e2: cmp    %edi,%eax
  0xa769c7e4: jbe    0xa769c7f7
  0xa769c7ea: mov    $0xa75b1728,%edi
  0xa769c7ef: cmp    %edi,%eax
  0xa769c7f1: jb     0xa769c808
  ;; i2c adapter must return to an interpreter frame
  0xa769c7f7: push   $0xb75a2830
  0xa769c7fc: call   0xa769c801
  0xa769c801: pusha  
  0xa769c802: call   0xb7052f32
  0xa769c807: hlt    
  ;; } verify_i2ce 
  0xa769c808: mov    %esp,%edi
  0xa769c80a: and    $0xfffffff0,%esp
  0xa769c80d: push   %eax
  0xa769c80e: mov    %edi,%eax
  0xa769c810: mov    0x30(%ebx),%edi
  0xa769c813: mov    0x4(%eax),%ecx
  0xa769c816: mov    %esp,%eax
  0xa769c818: shr    $0xc,%eax
  0xa769c81b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769c822: mov    %ebx,0x16c(%eax)
  0xa769c828: mov    %ebx,%eax
  0xa769c82a: jmp    *%edi
  0xa769c82c: mov    0x4(%ecx),%ebx
  0xa769c82f: cmp    0x8(%eax),%ebx
  0xa769c832: mov    0x4(%eax),%ebx
  0xa769c835: jne    0xa769c848
  0xa769c83b: cmpl   $0x0,0x34(%ebx)
  0xa769c842: je     0xa769c887
  0xa769c848: jmp    0xa7692560
  0xa769c84d: cmpl   $0x0,0x34(%ebx)
  0xa769c854: je     0xa769c887
  0xa769c85a: mov    (%esp),%eax
  0xa769c85d: pusha  
  0xa769c85e: pushf  
  0xa769c85f: sub    $0x10,%esp
  0xa769c862: vmovsd %xmm0,(%esp)
  0xa769c867: vmovsd %xmm1,0x8(%esp)
  0xa769c86d: push   %eax
  0xa769c86e: push   %ebx
  0xa769c86f: call   0xb71d62fc
  0xa769c874: add    $0x8,%esp
  0xa769c877: vmovsd (%esp),%xmm0
  0xa769c87c: vmovsd 0x8(%esp),%xmm1
  0xa769c882: add    $0x10,%esp
  0xa769c885: popf   
  0xa769c886: popa   
  0xa769c887: pop    %eax
  0xa769c888: mov    %esp,%esi
  0xa769c88a: sub    $0x4,%esp
  0xa769c88d: mov    %ecx,(%esp)
  0xa769c890: mov    0x28(%ebx),%ecx
  0xa769c893: push   %eax
  0xa769c894: jmp    *%ecx

AHE@0xb6673f84: 0xaa000000 i2c: 0xa769c940 c2i: 0xa769c9d0 c2iUV: 0xa769c9af
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)Ljava/lang/Throwable; (221 bytes generated)
c2i argument handler starts at 0xa769c9d0
  0xa769c940: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769c943: mov    $0xa75b1ac0,%edi
  0xa769c948: cmp    %edi,%eax
  0xa769c94a: jbe    0xa769c95d
  0xa769c950: mov    $0xa7691ac0,%edi
  0xa769c955: cmp    %edi,%eax
  0xa769c957: jb     0xa769c988
  0xa769c95d: mov    $0xa75af400,%edi
  0xa769c962: cmp    %edi,%eax
  0xa769c964: jbe    0xa769c977
  0xa769c96a: mov    $0xa75b1728,%edi
  0xa769c96f: cmp    %edi,%eax
  0xa769c971: jb     0xa769c988
  ;; i2c adapter must return to an interpreter frame
  0xa769c977: push   $0xb75a2830
  0xa769c97c: call   0xa769c981
  0xa769c981: pusha  
  0xa769c982: call   0xb7052f32
  0xa769c987: hlt    
  ;; } verify_i2ce 
  0xa769c988: mov    %esp,%edi
  0xa769c98a: and    $0xfffffff0,%esp
  0xa769c98d: push   %eax
  0xa769c98e: mov    %edi,%eax
  0xa769c990: mov    0x30(%ebx),%edi
  0xa769c993: mov    0x8(%eax),%ecx
  0xa769c996: mov    0x4(%eax),%edx
  0xa769c999: mov    %esp,%eax
  0xa769c99b: shr    $0xc,%eax
  0xa769c99e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769c9a5: mov    %ebx,0x16c(%eax)
  0xa769c9ab: mov    %ebx,%eax
  0xa769c9ad: jmp    *%edi
  0xa769c9af: mov    0x4(%ecx),%ebx
  0xa769c9b2: cmp    0x8(%eax),%ebx
  0xa769c9b5: mov    0x4(%eax),%ebx
  0xa769c9b8: jne    0xa769c9cb
  0xa769c9be: cmpl   $0x0,0x34(%ebx)
  0xa769c9c5: je     0xa769ca0a
  0xa769c9cb: jmp    0xa7692560
  0xa769c9d0: cmpl   $0x0,0x34(%ebx)
  0xa769c9d7: je     0xa769ca0a
  0xa769c9dd: mov    (%esp),%eax
  0xa769c9e0: pusha  
  0xa769c9e1: pushf  
  0xa769c9e2: sub    $0x10,%esp
  0xa769c9e5: vmovsd %xmm0,(%esp)
  0xa769c9ea: vmovsd %xmm1,0x8(%esp)
  0xa769c9f0: push   %eax
  0xa769c9f1: push   %ebx
  0xa769c9f2: call   0xb71d62fc
  0xa769c9f7: add    $0x8,%esp
  0xa769c9fa: vmovsd (%esp),%xmm0
  0xa769c9ff: vmovsd 0x8(%esp),%xmm1
  0xa769ca05: add    $0x10,%esp
  0xa769ca08: popf   
  0xa769ca09: popa   
  0xa769ca0a: pop    %eax
  0xa769ca0b: mov    %esp,%esi
  0xa769ca0d: sub    $0x8,%esp
  0xa769ca10: mov    %ecx,0x4(%esp)
  0xa769ca14: mov    %edx,(%esp)
  0xa769ca17: mov    0x28(%ebx),%ecx
  0xa769ca1a: push   %eax
  0xa769ca1b: jmp    *%ecx

AHE@0xb6673fa8: 0xa0000000 i2c: 0xa769cac0 c2i: 0xa769cb4d c2iUV: 0xa769cb2c
i2c argument handler #0 for: receiver ()Ljava/lang/Throwable; (214 bytes generated)
c2i argument handler starts at 0xa769cb4d
  0xa769cac0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769cac3: mov    $0xa75b1ac0,%edi
  0xa769cac8: cmp    %edi,%eax
  0xa769caca: jbe    0xa769cadd
  0xa769cad0: mov    $0xa7691ac0,%edi
  0xa769cad5: cmp    %edi,%eax
  0xa769cad7: jb     0xa769cb08
  0xa769cadd: mov    $0xa75af400,%edi
  0xa769cae2: cmp    %edi,%eax
  0xa769cae4: jbe    0xa769caf7
  0xa769caea: mov    $0xa75b1728,%edi
  0xa769caef: cmp    %edi,%eax
  0xa769caf1: jb     0xa769cb08
  ;; i2c adapter must return to an interpreter frame
  0xa769caf7: push   $0xb75a2830
  0xa769cafc: call   0xa769cb01
  0xa769cb01: pusha  
  0xa769cb02: call   0xb7052f32
  0xa769cb07: hlt    
  ;; } verify_i2ce 
  0xa769cb08: mov    %esp,%edi
  0xa769cb0a: and    $0xfffffff0,%esp
  0xa769cb0d: push   %eax
  0xa769cb0e: mov    %edi,%eax
  0xa769cb10: mov    0x30(%ebx),%edi
  0xa769cb13: mov    0x4(%eax),%ecx
  0xa769cb16: mov    %esp,%eax
  0xa769cb18: shr    $0xc,%eax
  0xa769cb1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769cb22: mov    %ebx,0x16c(%eax)
  0xa769cb28: mov    %ebx,%eax
  0xa769cb2a: jmp    *%edi
  0xa769cb2c: mov    0x4(%ecx),%ebx
  0xa769cb2f: cmp    0x8(%eax),%ebx
  0xa769cb32: mov    0x4(%eax),%ebx
  0xa769cb35: jne    0xa769cb48
  0xa769cb3b: cmpl   $0x0,0x34(%ebx)
  0xa769cb42: je     0xa769cb87
  0xa769cb48: jmp    0xa7692560
  0xa769cb4d: cmpl   $0x0,0x34(%ebx)
  0xa769cb54: je     0xa769cb87
  0xa769cb5a: mov    (%esp),%eax
  0xa769cb5d: pusha  
  0xa769cb5e: pushf  
  0xa769cb5f: sub    $0x10,%esp
  0xa769cb62: vmovsd %xmm0,(%esp)
  0xa769cb67: vmovsd %xmm1,0x8(%esp)
  0xa769cb6d: push   %eax
  0xa769cb6e: push   %ebx
  0xa769cb6f: call   0xb71d62fc
  0xa769cb74: add    $0x8,%esp
  0xa769cb77: vmovsd (%esp),%xmm0
  0xa769cb7c: vmovsd 0x8(%esp),%xmm1
  0xa769cb82: add    $0x10,%esp
  0xa769cb85: popf   
  0xa769cb86: popa   
  0xa769cb87: pop    %eax
  0xa769cb88: mov    %esp,%esi
  0xa769cb8a: sub    $0x4,%esp
  0xa769cb8d: mov    %ecx,(%esp)
  0xa769cb90: mov    0x28(%ebx),%ecx
  0xa769cb93: push   %eax
  0xa769cb94: jmp    *%ecx

AHE@0xb6673fcc: 0xaa000000 i2c: 0xa769cc40 c2i: 0xa769ccd0 c2iUV: 0xa769ccaf
i2c argument handler #0 for: receiver (I)Ljava/lang/Throwable; (221 bytes generated)
c2i argument handler starts at 0xa769ccd0
  0xa769cc40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769cc43: mov    $0xa75b1ac0,%edi
  0xa769cc48: cmp    %edi,%eax
  0xa769cc4a: jbe    0xa769cc5d
  0xa769cc50: mov    $0xa7691ac0,%edi
  0xa769cc55: cmp    %edi,%eax
  0xa769cc57: jb     0xa769cc88
  0xa769cc5d: mov    $0xa75af400,%edi
  0xa769cc62: cmp    %edi,%eax
  0xa769cc64: jbe    0xa769cc77
  0xa769cc6a: mov    $0xa75b1728,%edi
  0xa769cc6f: cmp    %edi,%eax
  0xa769cc71: jb     0xa769cc88
  ;; i2c adapter must return to an interpreter frame
  0xa769cc77: push   $0xb75a2830
  0xa769cc7c: call   0xa769cc81
  0xa769cc81: pusha  
  0xa769cc82: call   0xb7052f32
  0xa769cc87: hlt    
  ;; } verify_i2ce 
  0xa769cc88: mov    %esp,%edi
  0xa769cc8a: and    $0xfffffff0,%esp
  0xa769cc8d: push   %eax
  0xa769cc8e: mov    %edi,%eax
  0xa769cc90: mov    0x30(%ebx),%edi
  0xa769cc93: mov    0x8(%eax),%ecx
  0xa769cc96: mov    0x4(%eax),%edx
  0xa769cc99: mov    %esp,%eax
  0xa769cc9b: shr    $0xc,%eax
  0xa769cc9e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769cca5: mov    %ebx,0x16c(%eax)
  0xa769ccab: mov    %ebx,%eax
  0xa769ccad: jmp    *%edi
  0xa769ccaf: mov    0x4(%ecx),%ebx
  0xa769ccb2: cmp    0x8(%eax),%ebx
  0xa769ccb5: mov    0x4(%eax),%ebx
  0xa769ccb8: jne    0xa769cccb
  0xa769ccbe: cmpl   $0x0,0x34(%ebx)
  0xa769ccc5: je     0xa769cd0a
  0xa769cccb: jmp    0xa7692560
  0xa769ccd0: cmpl   $0x0,0x34(%ebx)
  0xa769ccd7: je     0xa769cd0a
  0xa769ccdd: mov    (%esp),%eax
  0xa769cce0: pusha  
  0xa769cce1: pushf  
  0xa769cce2: sub    $0x10,%esp
  0xa769cce5: vmovsd %xmm0,(%esp)
  0xa769ccea: vmovsd %xmm1,0x8(%esp)
  0xa769ccf0: push   %eax
  0xa769ccf1: push   %ebx
  0xa769ccf2: call   0xb71d62fc
  0xa769ccf7: add    $0x8,%esp
  0xa769ccfa: vmovsd (%esp),%xmm0
  0xa769ccff: vmovsd 0x8(%esp),%xmm1
  0xa769cd05: add    $0x10,%esp
  0xa769cd08: popf   
  0xa769cd09: popa   
  0xa769cd0a: pop    %eax
  0xa769cd0b: mov    %esp,%esi
  0xa769cd0d: sub    $0x8,%esp
  0xa769cd10: mov    %ecx,0x4(%esp)
  0xa769cd14: mov    %edx,(%esp)
  0xa769cd17: mov    0x28(%ebx),%ecx
  0xa769cd1a: push   %eax
  0xa769cd1b: jmp    *%ecx

AHE@0xb6673ff0: 0xa0000000 i2c: 0xa769cdc0 c2i: 0xa769ce4d c2iUV: 0xa769ce2c
i2c argument handler #0 for: receiver ()Ljava/lang/Throwable; (214 bytes generated)
c2i argument handler starts at 0xa769ce4d
  0xa769cdc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769cdc3: mov    $0xa75b1ac0,%edi
  0xa769cdc8: cmp    %edi,%eax
  0xa769cdca: jbe    0xa769cddd
  0xa769cdd0: mov    $0xa7691ac0,%edi
  0xa769cdd5: cmp    %edi,%eax
  0xa769cdd7: jb     0xa769ce08
  0xa769cddd: mov    $0xa75af400,%edi
  0xa769cde2: cmp    %edi,%eax
  0xa769cde4: jbe    0xa769cdf7
  0xa769cdea: mov    $0xa75b1728,%edi
  0xa769cdef: cmp    %edi,%eax
  0xa769cdf1: jb     0xa769ce08
  ;; i2c adapter must return to an interpreter frame
  0xa769cdf7: push   $0xb75a2830
  0xa769cdfc: call   0xa769ce01
  0xa769ce01: pusha  
  0xa769ce02: call   0xb7052f32
  0xa769ce07: hlt    
  ;; } verify_i2ce 
  0xa769ce08: mov    %esp,%edi
  0xa769ce0a: and    $0xfffffff0,%esp
  0xa769ce0d: push   %eax
  0xa769ce0e: mov    %edi,%eax
  0xa769ce10: mov    0x30(%ebx),%edi
  0xa769ce13: mov    0x4(%eax),%ecx
  0xa769ce16: mov    %esp,%eax
  0xa769ce18: shr    $0xc,%eax
  0xa769ce1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769ce22: mov    %ebx,0x16c(%eax)
  0xa769ce28: mov    %ebx,%eax
  0xa769ce2a: jmp    *%edi
  0xa769ce2c: mov    0x4(%ecx),%ebx
  0xa769ce2f: cmp    0x8(%eax),%ebx
  0xa769ce32: mov    0x4(%eax),%ebx
  0xa769ce35: jne    0xa769ce48
  0xa769ce3b: cmpl   $0x0,0x34(%ebx)
  0xa769ce42: je     0xa769ce87
  0xa769ce48: jmp    0xa7692560
  0xa769ce4d: cmpl   $0x0,0x34(%ebx)
  0xa769ce54: je     0xa769ce87
  0xa769ce5a: mov    (%esp),%eax
  0xa769ce5d: pusha  
  0xa769ce5e: pushf  
  0xa769ce5f: sub    $0x10,%esp
  0xa769ce62: vmovsd %xmm0,(%esp)
  0xa769ce67: vmovsd %xmm1,0x8(%esp)
  0xa769ce6d: push   %eax
  0xa769ce6e: push   %ebx
  0xa769ce6f: call   0xb71d62fc
  0xa769ce74: add    $0x8,%esp
  0xa769ce77: vmovsd (%esp),%xmm0
  0xa769ce7c: vmovsd 0x8(%esp),%xmm1
  0xa769ce82: add    $0x10,%esp
  0xa769ce85: popf   
  0xa769ce86: popa   
  0xa769ce87: pop    %eax
  0xa769ce88: mov    %esp,%esi
  0xa769ce8a: sub    $0x4,%esp
  0xa769ce8d: mov    %ecx,(%esp)
  0xa769ce90: mov    0x28(%ebx),%ecx
  0xa769ce93: push   %eax
  0xa769ce94: jmp    *%ecx

AHE@0xb6674014: 0xaa000000 i2c: 0xa769cf40 c2i: 0xa769cfd0 c2iUV: 0xa769cfaf
i2c argument handler #0 for: receiver (Ljava/io/PrintWriter;)V (221 bytes generated)
c2i argument handler starts at 0xa769cfd0
  0xa769cf40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769cf43: mov    $0xa75b1ac0,%edi
  0xa769cf48: cmp    %edi,%eax
  0xa769cf4a: jbe    0xa769cf5d
  0xa769cf50: mov    $0xa7691ac0,%edi
  0xa769cf55: cmp    %edi,%eax
  0xa769cf57: jb     0xa769cf88
  0xa769cf5d: mov    $0xa75af400,%edi
  0xa769cf62: cmp    %edi,%eax
  0xa769cf64: jbe    0xa769cf77
  0xa769cf6a: mov    $0xa75b1728,%edi
  0xa769cf6f: cmp    %edi,%eax
  0xa769cf71: jb     0xa769cf88
  ;; i2c adapter must return to an interpreter frame
  0xa769cf77: push   $0xb75a2830
  0xa769cf7c: call   0xa769cf81
  0xa769cf81: pusha  
  0xa769cf82: call   0xb7052f32
  0xa769cf87: hlt    
  ;; } verify_i2ce 
  0xa769cf88: mov    %esp,%edi
  0xa769cf8a: and    $0xfffffff0,%esp
  0xa769cf8d: push   %eax
  0xa769cf8e: mov    %edi,%eax
  0xa769cf90: mov    0x30(%ebx),%edi
  0xa769cf93: mov    0x8(%eax),%ecx
  0xa769cf96: mov    0x4(%eax),%edx
  0xa769cf99: mov    %esp,%eax
  0xa769cf9b: shr    $0xc,%eax
  0xa769cf9e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769cfa5: mov    %ebx,0x16c(%eax)
  0xa769cfab: mov    %ebx,%eax
  0xa769cfad: jmp    *%edi
  0xa769cfaf: mov    0x4(%ecx),%ebx
  0xa769cfb2: cmp    0x8(%eax),%ebx
  0xa769cfb5: mov    0x4(%eax),%ebx
  0xa769cfb8: jne    0xa769cfcb
  0xa769cfbe: cmpl   $0x0,0x34(%ebx)
  0xa769cfc5: je     0xa769d00a
  0xa769cfcb: jmp    0xa7692560
  0xa769cfd0: cmpl   $0x0,0x34(%ebx)
  0xa769cfd7: je     0xa769d00a
  0xa769cfdd: mov    (%esp),%eax
  0xa769cfe0: pusha  
  0xa769cfe1: pushf  
  0xa769cfe2: sub    $0x10,%esp
  0xa769cfe5: vmovsd %xmm0,(%esp)
  0xa769cfea: vmovsd %xmm1,0x8(%esp)
  0xa769cff0: push   %eax
  0xa769cff1: push   %ebx
  0xa769cff2: call   0xb71d62fc
  0xa769cff7: add    $0x8,%esp
  0xa769cffa: vmovsd (%esp),%xmm0
  0xa769cfff: vmovsd 0x8(%esp),%xmm1
  0xa769d005: add    $0x10,%esp
  0xa769d008: popf   
  0xa769d009: popa   
  0xa769d00a: pop    %eax
  0xa769d00b: mov    %esp,%esi
  0xa769d00d: sub    $0x8,%esp
  0xa769d010: mov    %ecx,0x4(%esp)
  0xa769d014: mov    %edx,(%esp)
  0xa769d017: mov    0x28(%ebx),%ecx
  0xa769d01a: push   %eax
  0xa769d01b: jmp    *%ecx

AHE@0xb6674038: 0xa0000000 i2c: 0xa769d0c0 c2i: 0xa769d14d c2iUV: 0xa769d12c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769d14d
  0xa769d0c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769d0c3: mov    $0xa75b1ac0,%edi
  0xa769d0c8: cmp    %edi,%eax
  0xa769d0ca: jbe    0xa769d0dd
  0xa769d0d0: mov    $0xa7691ac0,%edi
  0xa769d0d5: cmp    %edi,%eax
  0xa769d0d7: jb     0xa769d108
  0xa769d0dd: mov    $0xa75af400,%edi
  0xa769d0e2: cmp    %edi,%eax
  0xa769d0e4: jbe    0xa769d0f7
  0xa769d0ea: mov    $0xa75b1728,%edi
  0xa769d0ef: cmp    %edi,%eax
  0xa769d0f1: jb     0xa769d108
  ;; i2c adapter must return to an interpreter frame
  0xa769d0f7: push   $0xb75a2830
  0xa769d0fc: call   0xa769d101
  0xa769d101: pusha  
  0xa769d102: call   0xb7052f32
  0xa769d107: hlt    
  ;; } verify_i2ce 
  0xa769d108: mov    %esp,%edi
  0xa769d10a: and    $0xfffffff0,%esp
  0xa769d10d: push   %eax
  0xa769d10e: mov    %edi,%eax
  0xa769d110: mov    0x30(%ebx),%edi
  0xa769d113: mov    0x4(%eax),%ecx
  0xa769d116: mov    %esp,%eax
  0xa769d118: shr    $0xc,%eax
  0xa769d11b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769d122: mov    %ebx,0x16c(%eax)
  0xa769d128: mov    %ebx,%eax
  0xa769d12a: jmp    *%edi
  0xa769d12c: mov    0x4(%ecx),%ebx
  0xa769d12f: cmp    0x8(%eax),%ebx
  0xa769d132: mov    0x4(%eax),%ebx
  0xa769d135: jne    0xa769d148
  0xa769d13b: cmpl   $0x0,0x34(%ebx)
  0xa769d142: je     0xa769d187
  0xa769d148: jmp    0xa7692560
  0xa769d14d: cmpl   $0x0,0x34(%ebx)
  0xa769d154: je     0xa769d187
  0xa769d15a: mov    (%esp),%eax
  0xa769d15d: pusha  
  0xa769d15e: pushf  
  0xa769d15f: sub    $0x10,%esp
  0xa769d162: vmovsd %xmm0,(%esp)
  0xa769d167: vmovsd %xmm1,0x8(%esp)
  0xa769d16d: push   %eax
  0xa769d16e: push   %ebx
  0xa769d16f: call   0xb71d62fc
  0xa769d174: add    $0x8,%esp
  0xa769d177: vmovsd (%esp),%xmm0
  0xa769d17c: vmovsd 0x8(%esp),%xmm1
  0xa769d182: add    $0x10,%esp
  0xa769d185: popf   
  0xa769d186: popa   
  0xa769d187: pop    %eax
  0xa769d188: mov    %esp,%esi
  0xa769d18a: sub    $0x4,%esp
  0xa769d18d: mov    %ecx,(%esp)
  0xa769d190: mov    0x28(%ebx),%ecx
  0xa769d193: push   %eax
  0xa769d194: jmp    *%ecx

AHE@0xb667405c: 0xaa000000 i2c: 0xa769d240 c2i: 0xa769d2d0 c2iUV: 0xa769d2af
i2c argument handler #0 for: receiver (Ljava/io/PrintStream;)V (221 bytes generated)
c2i argument handler starts at 0xa769d2d0
  0xa769d240: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769d243: mov    $0xa75b1ac0,%edi
  0xa769d248: cmp    %edi,%eax
  0xa769d24a: jbe    0xa769d25d
  0xa769d250: mov    $0xa7691ac0,%edi
  0xa769d255: cmp    %edi,%eax
  0xa769d257: jb     0xa769d288
  0xa769d25d: mov    $0xa75af400,%edi
  0xa769d262: cmp    %edi,%eax
  0xa769d264: jbe    0xa769d277
  0xa769d26a: mov    $0xa75b1728,%edi
  0xa769d26f: cmp    %edi,%eax
  0xa769d271: jb     0xa769d288
  ;; i2c adapter must return to an interpreter frame
  0xa769d277: push   $0xb75a2830
  0xa769d27c: call   0xa769d281
  0xa769d281: pusha  
  0xa769d282: call   0xb7052f32
  0xa769d287: hlt    
  ;; } verify_i2ce 
  0xa769d288: mov    %esp,%edi
  0xa769d28a: and    $0xfffffff0,%esp
  0xa769d28d: push   %eax
  0xa769d28e: mov    %edi,%eax
  0xa769d290: mov    0x30(%ebx),%edi
  0xa769d293: mov    0x8(%eax),%ecx
  0xa769d296: mov    0x4(%eax),%edx
  0xa769d299: mov    %esp,%eax
  0xa769d29b: shr    $0xc,%eax
  0xa769d29e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769d2a5: mov    %ebx,0x16c(%eax)
  0xa769d2ab: mov    %ebx,%eax
  0xa769d2ad: jmp    *%edi
  0xa769d2af: mov    0x4(%ecx),%ebx
  0xa769d2b2: cmp    0x8(%eax),%ebx
  0xa769d2b5: mov    0x4(%eax),%ebx
  0xa769d2b8: jne    0xa769d2cb
  0xa769d2be: cmpl   $0x0,0x34(%ebx)
  0xa769d2c5: je     0xa769d30a
  0xa769d2cb: jmp    0xa7692560
  0xa769d2d0: cmpl   $0x0,0x34(%ebx)
  0xa769d2d7: je     0xa769d30a
  0xa769d2dd: mov    (%esp),%eax
  0xa769d2e0: pusha  
  0xa769d2e1: pushf  
  0xa769d2e2: sub    $0x10,%esp
  0xa769d2e5: vmovsd %xmm0,(%esp)
  0xa769d2ea: vmovsd %xmm1,0x8(%esp)
  0xa769d2f0: push   %eax
  0xa769d2f1: push   %ebx
  0xa769d2f2: call   0xb71d62fc
  0xa769d2f7: add    $0x8,%esp
  0xa769d2fa: vmovsd (%esp),%xmm0
  0xa769d2ff: vmovsd 0x8(%esp),%xmm1
  0xa769d305: add    $0x10,%esp
  0xa769d308: popf   
  0xa769d309: popa   
  0xa769d30a: pop    %eax
  0xa769d30b: mov    %esp,%esi
  0xa769d30d: sub    $0x8,%esp
  0xa769d310: mov    %ecx,0x4(%esp)
  0xa769d314: mov    %edx,(%esp)
  0xa769d317: mov    0x28(%ebx),%ecx
  0xa769d31a: push   %eax
  0xa769d31b: jmp    *%ecx

AHE@0xb6674080: 0xaa000000 i2c: 0xa769d3c0 c2i: 0xa769d450 c2iUV: 0xa769d42f
i2c argument handler #0 for: receiver (Ljava/lang/Throwable$PrintStreamOrWriter;)V (221 bytes generated)
c2i argument handler starts at 0xa769d450
  0xa769d3c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769d3c3: mov    $0xa75b1ac0,%edi
  0xa769d3c8: cmp    %edi,%eax
  0xa769d3ca: jbe    0xa769d3dd
  0xa769d3d0: mov    $0xa7691ac0,%edi
  0xa769d3d5: cmp    %edi,%eax
  0xa769d3d7: jb     0xa769d408
  0xa769d3dd: mov    $0xa75af400,%edi
  0xa769d3e2: cmp    %edi,%eax
  0xa769d3e4: jbe    0xa769d3f7
  0xa769d3ea: mov    $0xa75b1728,%edi
  0xa769d3ef: cmp    %edi,%eax
  0xa769d3f1: jb     0xa769d408
  ;; i2c adapter must return to an interpreter frame
  0xa769d3f7: push   $0xb75a2830
  0xa769d3fc: call   0xa769d401
  0xa769d401: pusha  
  0xa769d402: call   0xb7052f32
  0xa769d407: hlt    
  ;; } verify_i2ce 
  0xa769d408: mov    %esp,%edi
  0xa769d40a: and    $0xfffffff0,%esp
  0xa769d40d: push   %eax
  0xa769d40e: mov    %edi,%eax
  0xa769d410: mov    0x30(%ebx),%edi
  0xa769d413: mov    0x8(%eax),%ecx
  0xa769d416: mov    0x4(%eax),%edx
  0xa769d419: mov    %esp,%eax
  0xa769d41b: shr    $0xc,%eax
  0xa769d41e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769d425: mov    %ebx,0x16c(%eax)
  0xa769d42b: mov    %ebx,%eax
  0xa769d42d: jmp    *%edi
  0xa769d42f: mov    0x4(%ecx),%ebx
  0xa769d432: cmp    0x8(%eax),%ebx
  0xa769d435: mov    0x4(%eax),%ebx
  0xa769d438: jne    0xa769d44b
  0xa769d43e: cmpl   $0x0,0x34(%ebx)
  0xa769d445: je     0xa769d48a
  0xa769d44b: jmp    0xa7692560
  0xa769d450: cmpl   $0x0,0x34(%ebx)
  0xa769d457: je     0xa769d48a
  0xa769d45d: mov    (%esp),%eax
  0xa769d460: pusha  
  0xa769d461: pushf  
  0xa769d462: sub    $0x10,%esp
  0xa769d465: vmovsd %xmm0,(%esp)
  0xa769d46a: vmovsd %xmm1,0x8(%esp)
  0xa769d470: push   %eax
  0xa769d471: push   %ebx
  0xa769d472: call   0xb71d62fc
  0xa769d477: add    $0x8,%esp
  0xa769d47a: vmovsd (%esp),%xmm0
  0xa769d47f: vmovsd 0x8(%esp),%xmm1
  0xa769d485: add    $0x10,%esp
  0xa769d488: popf   
  0xa769d489: popa   
  0xa769d48a: pop    %eax
  0xa769d48b: mov    %esp,%esi
  0xa769d48d: sub    $0x8,%esp
  0xa769d490: mov    %ecx,0x4(%esp)
  0xa769d494: mov    %edx,(%esp)
  0xa769d497: mov    0x28(%ebx),%ecx
  0xa769d49a: push   %eax
  0xa769d49b: jmp    *%ecx

AHE@0xb66740a4: 0x i2c: 0xa769d540 c2i: 0xa769d5ca c2iUV: 0xa769d5a9
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa769d5ca
  0xa769d540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769d543: mov    $0xa75b1ac0,%edi
  0xa769d548: cmp    %edi,%eax
  0xa769d54a: jbe    0xa769d55d
  0xa769d550: mov    $0xa7691ac0,%edi
  0xa769d555: cmp    %edi,%eax
  0xa769d557: jb     0xa769d588
  0xa769d55d: mov    $0xa75af400,%edi
  0xa769d562: cmp    %edi,%eax
  0xa769d564: jbe    0xa769d577
  0xa769d56a: mov    $0xa75b1728,%edi
  0xa769d56f: cmp    %edi,%eax
  0xa769d571: jb     0xa769d588
  ;; i2c adapter must return to an interpreter frame
  0xa769d577: push   $0xb75a2830
  0xa769d57c: call   0xa769d581
  0xa769d581: pusha  
  0xa769d582: call   0xb7052f32
  0xa769d587: hlt    
  ;; } verify_i2ce 
  0xa769d588: mov    %esp,%edi
  0xa769d58a: and    $0xfffffff0,%esp
  0xa769d58d: push   %eax
  0xa769d58e: mov    %edi,%eax
  0xa769d590: mov    0x30(%ebx),%edi
  0xa769d593: mov    %esp,%eax
  0xa769d595: shr    $0xc,%eax
  0xa769d598: mov    -0x486bdba0(,%eax,4),%eax
  0xa769d59f: mov    %ebx,0x16c(%eax)
  0xa769d5a5: mov    %ebx,%eax
  0xa769d5a7: jmp    *%edi
  0xa769d5a9: mov    0x4(%ecx),%ebx
  0xa769d5ac: cmp    0x8(%eax),%ebx
  0xa769d5af: mov    0x4(%eax),%ebx
  0xa769d5b2: jne    0xa769d5c5
  0xa769d5b8: cmpl   $0x0,0x34(%ebx)
  0xa769d5bf: je     0xa769d604
  0xa769d5c5: jmp    0xa7692560
  0xa769d5ca: cmpl   $0x0,0x34(%ebx)
  0xa769d5d1: je     0xa769d604
  0xa769d5d7: mov    (%esp),%eax
  0xa769d5da: pusha  
  0xa769d5db: pushf  
  0xa769d5dc: sub    $0x10,%esp
  0xa769d5df: vmovsd %xmm0,(%esp)
  0xa769d5e4: vmovsd %xmm1,0x8(%esp)
  0xa769d5ea: push   %eax
  0xa769d5eb: push   %ebx
  0xa769d5ec: call   0xb71d62fc
  0xa769d5f1: add    $0x8,%esp
  0xa769d5f4: vmovsd (%esp),%xmm0
  0xa769d5f9: vmovsd 0x8(%esp),%xmm1
  0xa769d5ff: add    $0x10,%esp
  0xa769d602: popf   
  0xa769d603: popa   
  0xa769d604: pop    %eax
  0xa769d605: mov    %esp,%esi
  0xa769d607: sub    $0x0,%esp
  0xa769d60a: mov    0x28(%ebx),%ecx
  0xa769d60d: push   %eax
  0xa769d60e: jmp    *%ecx

AHE@0xb66740c8: 0xa0000000 i2c: 0xa769d6c0 c2i: 0xa769d74d c2iUV: 0xa769d72c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769d74d
  0xa769d6c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769d6c3: mov    $0xa75b1ac0,%edi
  0xa769d6c8: cmp    %edi,%eax
  0xa769d6ca: jbe    0xa769d6dd
  0xa769d6d0: mov    $0xa7691ac0,%edi
  0xa769d6d5: cmp    %edi,%eax
  0xa769d6d7: jb     0xa769d708
  0xa769d6dd: mov    $0xa75af400,%edi
  0xa769d6e2: cmp    %edi,%eax
  0xa769d6e4: jbe    0xa769d6f7
  0xa769d6ea: mov    $0xa75b1728,%edi
  0xa769d6ef: cmp    %edi,%eax
  0xa769d6f1: jb     0xa769d708
  ;; i2c adapter must return to an interpreter frame
  0xa769d6f7: push   $0xb75a2830
  0xa769d6fc: call   0xa769d701
  0xa769d701: pusha  
  0xa769d702: call   0xb7052f32
  0xa769d707: hlt    
  ;; } verify_i2ce 
  0xa769d708: mov    %esp,%edi
  0xa769d70a: and    $0xfffffff0,%esp
  0xa769d70d: push   %eax
  0xa769d70e: mov    %edi,%eax
  0xa769d710: mov    0x30(%ebx),%edi
  0xa769d713: mov    0x4(%eax),%ecx
  0xa769d716: mov    %esp,%eax
  0xa769d718: shr    $0xc,%eax
  0xa769d71b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769d722: mov    %ebx,0x16c(%eax)
  0xa769d728: mov    %ebx,%eax
  0xa769d72a: jmp    *%edi
  0xa769d72c: mov    0x4(%ecx),%ebx
  0xa769d72f: cmp    0x8(%eax),%ebx
  0xa769d732: mov    0x4(%eax),%ebx
  0xa769d735: jne    0xa769d748
  0xa769d73b: cmpl   $0x0,0x34(%ebx)
  0xa769d742: je     0xa769d787
  0xa769d748: jmp    0xa7692560
  0xa769d74d: cmpl   $0x0,0x34(%ebx)
  0xa769d754: je     0xa769d787
  0xa769d75a: mov    (%esp),%eax
  0xa769d75d: pusha  
  0xa769d75e: pushf  
  0xa769d75f: sub    $0x10,%esp
  0xa769d762: vmovsd %xmm0,(%esp)
  0xa769d767: vmovsd %xmm1,0x8(%esp)
  0xa769d76d: push   %eax
  0xa769d76e: push   %ebx
  0xa769d76f: call   0xb71d62fc
  0xa769d774: add    $0x8,%esp
  0xa769d777: vmovsd (%esp),%xmm0
  0xa769d77c: vmovsd 0x8(%esp),%xmm1
  0xa769d782: add    $0x10,%esp
  0xa769d785: popf   
  0xa769d786: popa   
  0xa769d787: pop    %eax
  0xa769d788: mov    %esp,%esi
  0xa769d78a: sub    $0x4,%esp
  0xa769d78d: mov    %ecx,(%esp)
  0xa769d790: mov    0x28(%ebx),%ecx
  0xa769d793: push   %eax
  0xa769d794: jmp    *%ecx

AHE@0xb66740ec: 0xaa000000 i2c: 0xa769d840 c2i: 0xa769d8d0 c2iUV: 0xa769d8af
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (221 bytes generated)
c2i argument handler starts at 0xa769d8d0
  0xa769d840: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769d843: mov    $0xa75b1ac0,%edi
  0xa769d848: cmp    %edi,%eax
  0xa769d84a: jbe    0xa769d85d
  0xa769d850: mov    $0xa7691ac0,%edi
  0xa769d855: cmp    %edi,%eax
  0xa769d857: jb     0xa769d888
  0xa769d85d: mov    $0xa75af400,%edi
  0xa769d862: cmp    %edi,%eax
  0xa769d864: jbe    0xa769d877
  0xa769d86a: mov    $0xa75b1728,%edi
  0xa769d86f: cmp    %edi,%eax
  0xa769d871: jb     0xa769d888
  ;; i2c adapter must return to an interpreter frame
  0xa769d877: push   $0xb75a2830
  0xa769d87c: call   0xa769d881
  0xa769d881: pusha  
  0xa769d882: call   0xb7052f32
  0xa769d887: hlt    
  ;; } verify_i2ce 
  0xa769d888: mov    %esp,%edi
  0xa769d88a: and    $0xfffffff0,%esp
  0xa769d88d: push   %eax
  0xa769d88e: mov    %edi,%eax
  0xa769d890: mov    0x30(%ebx),%edi
  0xa769d893: mov    0x8(%eax),%ecx
  0xa769d896: mov    0x4(%eax),%edx
  0xa769d899: mov    %esp,%eax
  0xa769d89b: shr    $0xc,%eax
  0xa769d89e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769d8a5: mov    %ebx,0x16c(%eax)
  0xa769d8ab: mov    %ebx,%eax
  0xa769d8ad: jmp    *%edi
  0xa769d8af: mov    0x4(%ecx),%ebx
  0xa769d8b2: cmp    0x8(%eax),%ebx
  0xa769d8b5: mov    0x4(%eax),%ebx
  0xa769d8b8: jne    0xa769d8cb
  0xa769d8be: cmpl   $0x0,0x34(%ebx)
  0xa769d8c5: je     0xa769d90a
  0xa769d8cb: jmp    0xa7692560
  0xa769d8d0: cmpl   $0x0,0x34(%ebx)
  0xa769d8d7: je     0xa769d90a
  0xa769d8dd: mov    (%esp),%eax
  0xa769d8e0: pusha  
  0xa769d8e1: pushf  
  0xa769d8e2: sub    $0x10,%esp
  0xa769d8e5: vmovsd %xmm0,(%esp)
  0xa769d8ea: vmovsd %xmm1,0x8(%esp)
  0xa769d8f0: push   %eax
  0xa769d8f1: push   %ebx
  0xa769d8f2: call   0xb71d62fc
  0xa769d8f7: add    $0x8,%esp
  0xa769d8fa: vmovsd (%esp),%xmm0
  0xa769d8ff: vmovsd 0x8(%esp),%xmm1
  0xa769d905: add    $0x10,%esp
  0xa769d908: popf   
  0xa769d909: popa   
  0xa769d90a: pop    %eax
  0xa769d90b: mov    %esp,%esi
  0xa769d90d: sub    $0x8,%esp
  0xa769d910: mov    %ecx,0x4(%esp)
  0xa769d914: mov    %edx,(%esp)
  0xa769d917: mov    0x28(%ebx),%ecx
  0xa769d91a: push   %eax
  0xa769d91b: jmp    *%ecx

AHE@0xb6674110: 0xaaa00000 i2c: 0xa769d9c0 c2i: 0xa769da5a c2iUV: 0xa769da39
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (239 bytes generated)
c2i argument handler starts at 0xa769da5a
  0xa769d9c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769d9c3: mov    $0xa75b1ac0,%edi
  0xa769d9c8: cmp    %edi,%eax
  0xa769d9ca: jbe    0xa769d9dd
  0xa769d9d0: mov    $0xa7691ac0,%edi
  0xa769d9d5: cmp    %edi,%eax
  0xa769d9d7: jb     0xa769da08
  0xa769d9dd: mov    $0xa75af400,%edi
  0xa769d9e2: cmp    %edi,%eax
  0xa769d9e4: jbe    0xa769d9f7
  0xa769d9ea: mov    $0xa75b1728,%edi
  0xa769d9ef: cmp    %edi,%eax
  0xa769d9f1: jb     0xa769da08
  ;; i2c adapter must return to an interpreter frame
  0xa769d9f7: push   $0xb75a2830
  0xa769d9fc: call   0xa769da01
  0xa769da01: pusha  
  0xa769da02: call   0xb7052f32
  0xa769da07: hlt    
  ;; } verify_i2ce 
  0xa769da08: mov    %esp,%edi
  0xa769da0a: sub    $0x8,%esp
  0xa769da0d: and    $0xfffffff0,%esp
  0xa769da10: push   %eax
  0xa769da11: mov    %edi,%eax
  0xa769da13: mov    0x30(%ebx),%edi
  0xa769da16: mov    0xc(%eax),%ecx
  0xa769da19: mov    0x8(%eax),%edx
  0xa769da1c: mov    0x4(%eax),%esi
  0xa769da1f: mov    %esi,0x4(%esp)
  0xa769da23: mov    %esp,%eax
  0xa769da25: shr    $0xc,%eax
  0xa769da28: mov    -0x486bdba0(,%eax,4),%eax
  0xa769da2f: mov    %ebx,0x16c(%eax)
  0xa769da35: mov    %ebx,%eax
  0xa769da37: jmp    *%edi
  0xa769da39: mov    0x4(%ecx),%ebx
  0xa769da3c: cmp    0x8(%eax),%ebx
  0xa769da3f: mov    0x4(%eax),%ebx
  0xa769da42: jne    0xa769da55
  0xa769da48: cmpl   $0x0,0x34(%ebx)
  0xa769da4f: je     0xa769da94
  0xa769da55: jmp    0xa7692560
  0xa769da5a: cmpl   $0x0,0x34(%ebx)
  0xa769da61: je     0xa769da94
  0xa769da67: mov    (%esp),%eax
  0xa769da6a: pusha  
  0xa769da6b: pushf  
  0xa769da6c: sub    $0x10,%esp
  0xa769da6f: vmovsd %xmm0,(%esp)
  0xa769da74: vmovsd %xmm1,0x8(%esp)
  0xa769da7a: push   %eax
  0xa769da7b: push   %ebx
  0xa769da7c: call   0xb71d62fc
  0xa769da81: add    $0x8,%esp
  0xa769da84: vmovsd (%esp),%xmm0
  0xa769da89: vmovsd 0x8(%esp),%xmm1
  0xa769da8f: add    $0x10,%esp
  0xa769da92: popf   
  0xa769da93: popa   
  0xa769da94: pop    %eax
  0xa769da95: mov    %esp,%esi
  0xa769da97: sub    $0xc,%esp
  0xa769da9a: mov    %ecx,0x8(%esp)
  0xa769da9e: mov    %edx,0x4(%esp)
  0xa769daa2: mov    0xc(%esp),%edi
  0xa769daa6: mov    %edi,(%esp)
  0xa769daa9: mov    0x28(%ebx),%ecx
  0xa769daac: push   %eax
  0xa769daad: jmp    *%ecx

AHE@0xb6674134: 0xaa000000 i2c: 0xa769db40 c2i: 0xa769dbd0 c2iUV: 0xa769dbaf
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (221 bytes generated)
c2i argument handler starts at 0xa769dbd0
  0xa769db40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769db43: mov    $0xa75b1ac0,%edi
  0xa769db48: cmp    %edi,%eax
  0xa769db4a: jbe    0xa769db5d
  0xa769db50: mov    $0xa7691ac0,%edi
  0xa769db55: cmp    %edi,%eax
  0xa769db57: jb     0xa769db88
  0xa769db5d: mov    $0xa75af400,%edi
  0xa769db62: cmp    %edi,%eax
  0xa769db64: jbe    0xa769db77
  0xa769db6a: mov    $0xa75b1728,%edi
  0xa769db6f: cmp    %edi,%eax
  0xa769db71: jb     0xa769db88
  ;; i2c adapter must return to an interpreter frame
  0xa769db77: push   $0xb75a2830
  0xa769db7c: call   0xa769db81
  0xa769db81: pusha  
  0xa769db82: call   0xb7052f32
  0xa769db87: hlt    
  ;; } verify_i2ce 
  0xa769db88: mov    %esp,%edi
  0xa769db8a: and    $0xfffffff0,%esp
  0xa769db8d: push   %eax
  0xa769db8e: mov    %edi,%eax
  0xa769db90: mov    0x30(%ebx),%edi
  0xa769db93: mov    0x8(%eax),%ecx
  0xa769db96: mov    0x4(%eax),%edx
  0xa769db99: mov    %esp,%eax
  0xa769db9b: shr    $0xc,%eax
  0xa769db9e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769dba5: mov    %ebx,0x16c(%eax)
  0xa769dbab: mov    %ebx,%eax
  0xa769dbad: jmp    *%edi
  0xa769dbaf: mov    0x4(%ecx),%ebx
  0xa769dbb2: cmp    0x8(%eax),%ebx
  0xa769dbb5: mov    0x4(%eax),%ebx
  0xa769dbb8: jne    0xa769dbcb
  0xa769dbbe: cmpl   $0x0,0x34(%ebx)
  0xa769dbc5: je     0xa769dc0a
  0xa769dbcb: jmp    0xa7692560
  0xa769dbd0: cmpl   $0x0,0x34(%ebx)
  0xa769dbd7: je     0xa769dc0a
  0xa769dbdd: mov    (%esp),%eax
  0xa769dbe0: pusha  
  0xa769dbe1: pushf  
  0xa769dbe2: sub    $0x10,%esp
  0xa769dbe5: vmovsd %xmm0,(%esp)
  0xa769dbea: vmovsd %xmm1,0x8(%esp)
  0xa769dbf0: push   %eax
  0xa769dbf1: push   %ebx
  0xa769dbf2: call   0xb71d62fc
  0xa769dbf7: add    $0x8,%esp
  0xa769dbfa: vmovsd (%esp),%xmm0
  0xa769dbff: vmovsd 0x8(%esp),%xmm1
  0xa769dc05: add    $0x10,%esp
  0xa769dc08: popf   
  0xa769dc09: popa   
  0xa769dc0a: pop    %eax
  0xa769dc0b: mov    %esp,%esi
  0xa769dc0d: sub    $0x8,%esp
  0xa769dc10: mov    %ecx,0x4(%esp)
  0xa769dc14: mov    %edx,(%esp)
  0xa769dc17: mov    0x28(%ebx),%ecx
  0xa769dc1a: push   %eax
  0xa769dc1b: jmp    *%ecx

AHE@0xb6674158: 0xaaaaa000 i2c: 0xa769dcc0 c2i: 0xa769dd68 c2iUV: 0xa769dd47
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (269 bytes generated)
c2i argument handler starts at 0xa769dd68
  0xa769dcc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769dcc3: mov    $0xa75b1ac0,%edi
  0xa769dcc8: cmp    %edi,%eax
  0xa769dcca: jbe    0xa769dcdd
  0xa769dcd0: mov    $0xa7691ac0,%edi
  0xa769dcd5: cmp    %edi,%eax
  0xa769dcd7: jb     0xa769dd08
  0xa769dcdd: mov    $0xa75af400,%edi
  0xa769dce2: cmp    %edi,%eax
  0xa769dce4: jbe    0xa769dcf7
  0xa769dcea: mov    $0xa75b1728,%edi
  0xa769dcef: cmp    %edi,%eax
  0xa769dcf1: jb     0xa769dd08
  ;; i2c adapter must return to an interpreter frame
  0xa769dcf7: push   $0xb75a2830
  0xa769dcfc: call   0xa769dd01
  0xa769dd01: pusha  
  0xa769dd02: call   0xb7052f32
  0xa769dd07: hlt    
  ;; } verify_i2ce 
  0xa769dd08: mov    %esp,%edi
  0xa769dd0a: sub    $0x10,%esp
  0xa769dd0d: and    $0xfffffff0,%esp
  0xa769dd10: push   %eax
  0xa769dd11: mov    %edi,%eax
  0xa769dd13: mov    0x30(%ebx),%edi
  0xa769dd16: mov    0x14(%eax),%ecx
  0xa769dd19: mov    0x10(%eax),%edx
  0xa769dd1c: mov    0xc(%eax),%esi
  0xa769dd1f: mov    %esi,0x4(%esp)
  0xa769dd23: mov    0x8(%eax),%esi
  0xa769dd26: mov    %esi,0x8(%esp)
  0xa769dd2a: mov    0x4(%eax),%esi
  0xa769dd2d: mov    %esi,0xc(%esp)
  0xa769dd31: mov    %esp,%eax
  0xa769dd33: shr    $0xc,%eax
  0xa769dd36: mov    -0x486bdba0(,%eax,4),%eax
  0xa769dd3d: mov    %ebx,0x16c(%eax)
  0xa769dd43: mov    %ebx,%eax
  0xa769dd45: jmp    *%edi
  0xa769dd47: mov    0x4(%ecx),%ebx
  0xa769dd4a: cmp    0x8(%eax),%ebx
  0xa769dd4d: mov    0x4(%eax),%ebx
  0xa769dd50: jne    0xa769dd63
  0xa769dd56: cmpl   $0x0,0x34(%ebx)
  0xa769dd5d: je     0xa769dda2
  0xa769dd63: jmp    0xa7692560
  0xa769dd68: cmpl   $0x0,0x34(%ebx)
  0xa769dd6f: je     0xa769dda2
  0xa769dd75: mov    (%esp),%eax
  0xa769dd78: pusha  
  0xa769dd79: pushf  
  0xa769dd7a: sub    $0x10,%esp
  0xa769dd7d: vmovsd %xmm0,(%esp)
  0xa769dd82: vmovsd %xmm1,0x8(%esp)
  0xa769dd88: push   %eax
  0xa769dd89: push   %ebx
  0xa769dd8a: call   0xb71d62fc
  0xa769dd8f: add    $0x8,%esp
  0xa769dd92: vmovsd (%esp),%xmm0
  0xa769dd97: vmovsd 0x8(%esp),%xmm1
  0xa769dd9d: add    $0x10,%esp
  0xa769dda0: popf   
  0xa769dda1: popa   
  0xa769dda2: pop    %eax
  0xa769dda3: mov    %esp,%esi
  0xa769dda5: sub    $0x14,%esp
  0xa769dda8: mov    %ecx,0x10(%esp)
  0xa769ddac: mov    %edx,0xc(%esp)
  0xa769ddb0: mov    0x14(%esp),%edi
  0xa769ddb4: mov    %edi,0x8(%esp)
  0xa769ddb8: mov    0x18(%esp),%edi
  0xa769ddbc: mov    %edi,0x4(%esp)
  0xa769ddc0: mov    0x1c(%esp),%edi
  0xa769ddc4: mov    %edi,(%esp)
  0xa769ddc7: mov    0x28(%ebx),%ecx
  0xa769ddca: push   %eax
  0xa769ddcb: jmp    *%ecx

AHE@0xb667417c: 0xa0000000 i2c: 0xa769de80 c2i: 0xa769df0d c2iUV: 0xa769deec
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769df0d
  0xa769de80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769de83: mov    $0xa75b1ac0,%edi
  0xa769de88: cmp    %edi,%eax
  0xa769de8a: jbe    0xa769de9d
  0xa769de90: mov    $0xa7691ac0,%edi
  0xa769de95: cmp    %edi,%eax
  0xa769de97: jb     0xa769dec8
  0xa769de9d: mov    $0xa75af400,%edi
  0xa769dea2: cmp    %edi,%eax
  0xa769dea4: jbe    0xa769deb7
  0xa769deaa: mov    $0xa75b1728,%edi
  0xa769deaf: cmp    %edi,%eax
  0xa769deb1: jb     0xa769dec8
  ;; i2c adapter must return to an interpreter frame
  0xa769deb7: push   $0xb75a2830
  0xa769debc: call   0xa769dec1
  0xa769dec1: pusha  
  0xa769dec2: call   0xb7052f32
  0xa769dec7: hlt    
  ;; } verify_i2ce 
  0xa769dec8: mov    %esp,%edi
  0xa769deca: and    $0xfffffff0,%esp
  0xa769decd: push   %eax
  0xa769dece: mov    %edi,%eax
  0xa769ded0: mov    0x30(%ebx),%edi
  0xa769ded3: mov    0x4(%eax),%ecx
  0xa769ded6: mov    %esp,%eax
  0xa769ded8: shr    $0xc,%eax
  0xa769dedb: mov    -0x486bdba0(,%eax,4),%eax
  0xa769dee2: mov    %ebx,0x16c(%eax)
  0xa769dee8: mov    %ebx,%eax
  0xa769deea: jmp    *%edi
  0xa769deec: mov    0x4(%ecx),%ebx
  0xa769deef: cmp    0x8(%eax),%ebx
  0xa769def2: mov    0x4(%eax),%ebx
  0xa769def5: jne    0xa769df08
  0xa769defb: cmpl   $0x0,0x34(%ebx)
  0xa769df02: je     0xa769df47
  0xa769df08: jmp    0xa7692560
  0xa769df0d: cmpl   $0x0,0x34(%ebx)
  0xa769df14: je     0xa769df47
  0xa769df1a: mov    (%esp),%eax
  0xa769df1d: pusha  
  0xa769df1e: pushf  
  0xa769df1f: sub    $0x10,%esp
  0xa769df22: vmovsd %xmm0,(%esp)
  0xa769df27: vmovsd %xmm1,0x8(%esp)
  0xa769df2d: push   %eax
  0xa769df2e: push   %ebx
  0xa769df2f: call   0xb71d62fc
  0xa769df34: add    $0x8,%esp
  0xa769df37: vmovsd (%esp),%xmm0
  0xa769df3c: vmovsd 0x8(%esp),%xmm1
  0xa769df42: add    $0x10,%esp
  0xa769df45: popf   
  0xa769df46: popa   
  0xa769df47: pop    %eax
  0xa769df48: mov    %esp,%esi
  0xa769df4a: sub    $0x4,%esp
  0xa769df4d: mov    %ecx,(%esp)
  0xa769df50: mov    0x28(%ebx),%ecx
  0xa769df53: push   %eax
  0xa769df54: jmp    *%ecx

AHE@0xb66741a0: 0xaa000000 i2c: 0xa769e000 c2i: 0xa769e090 c2iUV: 0xa769e06f
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (221 bytes generated)
c2i argument handler starts at 0xa769e090
  0xa769e000: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769e003: mov    $0xa75b1ac0,%edi
  0xa769e008: cmp    %edi,%eax
  0xa769e00a: jbe    0xa769e01d
  0xa769e010: mov    $0xa7691ac0,%edi
  0xa769e015: cmp    %edi,%eax
  0xa769e017: jb     0xa769e048
  0xa769e01d: mov    $0xa75af400,%edi
  0xa769e022: cmp    %edi,%eax
  0xa769e024: jbe    0xa769e037
  0xa769e02a: mov    $0xa75b1728,%edi
  0xa769e02f: cmp    %edi,%eax
  0xa769e031: jb     0xa769e048
  ;; i2c adapter must return to an interpreter frame
  0xa769e037: push   $0xb75a2830
  0xa769e03c: call   0xa769e041
  0xa769e041: pusha  
  0xa769e042: call   0xb7052f32
  0xa769e047: hlt    
  ;; } verify_i2ce 
  0xa769e048: mov    %esp,%edi
  0xa769e04a: and    $0xfffffff0,%esp
  0xa769e04d: push   %eax
  0xa769e04e: mov    %edi,%eax
  0xa769e050: mov    0x30(%ebx),%edi
  0xa769e053: mov    0x8(%eax),%ecx
  0xa769e056: mov    0x4(%eax),%edx
  0xa769e059: mov    %esp,%eax
  0xa769e05b: shr    $0xc,%eax
  0xa769e05e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769e065: mov    %ebx,0x16c(%eax)
  0xa769e06b: mov    %ebx,%eax
  0xa769e06d: jmp    *%edi
  0xa769e06f: mov    0x4(%ecx),%ebx
  0xa769e072: cmp    0x8(%eax),%ebx
  0xa769e075: mov    0x4(%eax),%ebx
  0xa769e078: jne    0xa769e08b
  0xa769e07e: cmpl   $0x0,0x34(%ebx)
  0xa769e085: je     0xa769e0ca
  0xa769e08b: jmp    0xa7692560
  0xa769e090: cmpl   $0x0,0x34(%ebx)
  0xa769e097: je     0xa769e0ca
  0xa769e09d: mov    (%esp),%eax
  0xa769e0a0: pusha  
  0xa769e0a1: pushf  
  0xa769e0a2: sub    $0x10,%esp
  0xa769e0a5: vmovsd %xmm0,(%esp)
  0xa769e0aa: vmovsd %xmm1,0x8(%esp)
  0xa769e0b0: push   %eax
  0xa769e0b1: push   %ebx
  0xa769e0b2: call   0xb71d62fc
  0xa769e0b7: add    $0x8,%esp
  0xa769e0ba: vmovsd (%esp),%xmm0
  0xa769e0bf: vmovsd 0x8(%esp),%xmm1
  0xa769e0c5: add    $0x10,%esp
  0xa769e0c8: popf   
  0xa769e0c9: popa   
  0xa769e0ca: pop    %eax
  0xa769e0cb: mov    %esp,%esi
  0xa769e0cd: sub    $0x8,%esp
  0xa769e0d0: mov    %ecx,0x4(%esp)
  0xa769e0d4: mov    %edx,(%esp)
  0xa769e0d7: mov    0x28(%ebx),%ecx
  0xa769e0da: push   %eax
  0xa769e0db: jmp    *%ecx

AHE@0xb66741c4: 0xaaa00000 i2c: 0xa769e180 c2i: 0xa769e21a c2iUV: 0xa769e1f9
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (239 bytes generated)
c2i argument handler starts at 0xa769e21a
  0xa769e180: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769e183: mov    $0xa75b1ac0,%edi
  0xa769e188: cmp    %edi,%eax
  0xa769e18a: jbe    0xa769e19d
  0xa769e190: mov    $0xa7691ac0,%edi
  0xa769e195: cmp    %edi,%eax
  0xa769e197: jb     0xa769e1c8
  0xa769e19d: mov    $0xa75af400,%edi
  0xa769e1a2: cmp    %edi,%eax
  0xa769e1a4: jbe    0xa769e1b7
  0xa769e1aa: mov    $0xa75b1728,%edi
  0xa769e1af: cmp    %edi,%eax
  0xa769e1b1: jb     0xa769e1c8
  ;; i2c adapter must return to an interpreter frame
  0xa769e1b7: push   $0xb75a2830
  0xa769e1bc: call   0xa769e1c1
  0xa769e1c1: pusha  
  0xa769e1c2: call   0xb7052f32
  0xa769e1c7: hlt    
  ;; } verify_i2ce 
  0xa769e1c8: mov    %esp,%edi
  0xa769e1ca: sub    $0x8,%esp
  0xa769e1cd: and    $0xfffffff0,%esp
  0xa769e1d0: push   %eax
  0xa769e1d1: mov    %edi,%eax
  0xa769e1d3: mov    0x30(%ebx),%edi
  0xa769e1d6: mov    0xc(%eax),%ecx
  0xa769e1d9: mov    0x8(%eax),%edx
  0xa769e1dc: mov    0x4(%eax),%esi
  0xa769e1df: mov    %esi,0x4(%esp)
  0xa769e1e3: mov    %esp,%eax
  0xa769e1e5: shr    $0xc,%eax
  0xa769e1e8: mov    -0x486bdba0(,%eax,4),%eax
  0xa769e1ef: mov    %ebx,0x16c(%eax)
  0xa769e1f5: mov    %ebx,%eax
  0xa769e1f7: jmp    *%edi
  0xa769e1f9: mov    0x4(%ecx),%ebx
  0xa769e1fc: cmp    0x8(%eax),%ebx
  0xa769e1ff: mov    0x4(%eax),%ebx
  0xa769e202: jne    0xa769e215
  0xa769e208: cmpl   $0x0,0x34(%ebx)
  0xa769e20f: je     0xa769e254
  0xa769e215: jmp    0xa7692560
  0xa769e21a: cmpl   $0x0,0x34(%ebx)
  0xa769e221: je     0xa769e254
  0xa769e227: mov    (%esp),%eax
  0xa769e22a: pusha  
  0xa769e22b: pushf  
  0xa769e22c: sub    $0x10,%esp
  0xa769e22f: vmovsd %xmm0,(%esp)
  0xa769e234: vmovsd %xmm1,0x8(%esp)
  0xa769e23a: push   %eax
  0xa769e23b: push   %ebx
  0xa769e23c: call   0xb71d62fc
  0xa769e241: add    $0x8,%esp
  0xa769e244: vmovsd (%esp),%xmm0
  0xa769e249: vmovsd 0x8(%esp),%xmm1
  0xa769e24f: add    $0x10,%esp
  0xa769e252: popf   
  0xa769e253: popa   
  0xa769e254: pop    %eax
  0xa769e255: mov    %esp,%esi
  0xa769e257: sub    $0xc,%esp
  0xa769e25a: mov    %ecx,0x8(%esp)
  0xa769e25e: mov    %edx,0x4(%esp)
  0xa769e262: mov    0xc(%esp),%edi
  0xa769e266: mov    %edi,(%esp)
  0xa769e269: mov    0x28(%ebx),%ecx
  0xa769e26c: push   %eax
  0xa769e26d: jmp    *%ecx

AHE@0xb66741e8: 0xaa000000 i2c: 0xa769e300 c2i: 0xa769e390 c2iUV: 0xa769e36f
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (221 bytes generated)
c2i argument handler starts at 0xa769e390
  0xa769e300: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769e303: mov    $0xa75b1ac0,%edi
  0xa769e308: cmp    %edi,%eax
  0xa769e30a: jbe    0xa769e31d
  0xa769e310: mov    $0xa7691ac0,%edi
  0xa769e315: cmp    %edi,%eax
  0xa769e317: jb     0xa769e348
  0xa769e31d: mov    $0xa75af400,%edi
  0xa769e322: cmp    %edi,%eax
  0xa769e324: jbe    0xa769e337
  0xa769e32a: mov    $0xa75b1728,%edi
  0xa769e32f: cmp    %edi,%eax
  0xa769e331: jb     0xa769e348
  ;; i2c adapter must return to an interpreter frame
  0xa769e337: push   $0xb75a2830
  0xa769e33c: call   0xa769e341
  0xa769e341: pusha  
  0xa769e342: call   0xb7052f32
  0xa769e347: hlt    
  ;; } verify_i2ce 
  0xa769e348: mov    %esp,%edi
  0xa769e34a: and    $0xfffffff0,%esp
  0xa769e34d: push   %eax
  0xa769e34e: mov    %edi,%eax
  0xa769e350: mov    0x30(%ebx),%edi
  0xa769e353: mov    0x8(%eax),%ecx
  0xa769e356: mov    0x4(%eax),%edx
  0xa769e359: mov    %esp,%eax
  0xa769e35b: shr    $0xc,%eax
  0xa769e35e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769e365: mov    %ebx,0x16c(%eax)
  0xa769e36b: mov    %ebx,%eax
  0xa769e36d: jmp    *%edi
  0xa769e36f: mov    0x4(%ecx),%ebx
  0xa769e372: cmp    0x8(%eax),%ebx
  0xa769e375: mov    0x4(%eax),%ebx
  0xa769e378: jne    0xa769e38b
  0xa769e37e: cmpl   $0x0,0x34(%ebx)
  0xa769e385: je     0xa769e3ca
  0xa769e38b: jmp    0xa7692560
  0xa769e390: cmpl   $0x0,0x34(%ebx)
  0xa769e397: je     0xa769e3ca
  0xa769e39d: mov    (%esp),%eax
  0xa769e3a0: pusha  
  0xa769e3a1: pushf  
  0xa769e3a2: sub    $0x10,%esp
  0xa769e3a5: vmovsd %xmm0,(%esp)
  0xa769e3aa: vmovsd %xmm1,0x8(%esp)
  0xa769e3b0: push   %eax
  0xa769e3b1: push   %ebx
  0xa769e3b2: call   0xb71d62fc
  0xa769e3b7: add    $0x8,%esp
  0xa769e3ba: vmovsd (%esp),%xmm0
  0xa769e3bf: vmovsd 0x8(%esp),%xmm1
  0xa769e3c5: add    $0x10,%esp
  0xa769e3c8: popf   
  0xa769e3c9: popa   
  0xa769e3ca: pop    %eax
  0xa769e3cb: mov    %esp,%esi
  0xa769e3cd: sub    $0x8,%esp
  0xa769e3d0: mov    %ecx,0x4(%esp)
  0xa769e3d4: mov    %edx,(%esp)
  0xa769e3d7: mov    0x28(%ebx),%ecx
  0xa769e3da: push   %eax
  0xa769e3db: jmp    *%ecx

AHE@0xb667420c: 0xaaaaa000 i2c: 0xa769e480 c2i: 0xa769e528 c2iUV: 0xa769e507
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;ZZ)V (269 bytes generated)
c2i argument handler starts at 0xa769e528
  0xa769e480: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769e483: mov    $0xa75b1ac0,%edi
  0xa769e488: cmp    %edi,%eax
  0xa769e48a: jbe    0xa769e49d
  0xa769e490: mov    $0xa7691ac0,%edi
  0xa769e495: cmp    %edi,%eax
  0xa769e497: jb     0xa769e4c8
  0xa769e49d: mov    $0xa75af400,%edi
  0xa769e4a2: cmp    %edi,%eax
  0xa769e4a4: jbe    0xa769e4b7
  0xa769e4aa: mov    $0xa75b1728,%edi
  0xa769e4af: cmp    %edi,%eax
  0xa769e4b1: jb     0xa769e4c8
  ;; i2c adapter must return to an interpreter frame
  0xa769e4b7: push   $0xb75a2830
  0xa769e4bc: call   0xa769e4c1
  0xa769e4c1: pusha  
  0xa769e4c2: call   0xb7052f32
  0xa769e4c7: hlt    
  ;; } verify_i2ce 
  0xa769e4c8: mov    %esp,%edi
  0xa769e4ca: sub    $0x10,%esp
  0xa769e4cd: and    $0xfffffff0,%esp
  0xa769e4d0: push   %eax
  0xa769e4d1: mov    %edi,%eax
  0xa769e4d3: mov    0x30(%ebx),%edi
  0xa769e4d6: mov    0x14(%eax),%ecx
  0xa769e4d9: mov    0x10(%eax),%edx
  0xa769e4dc: mov    0xc(%eax),%esi
  0xa769e4df: mov    %esi,0x4(%esp)
  0xa769e4e3: mov    0x8(%eax),%esi
  0xa769e4e6: mov    %esi,0x8(%esp)
  0xa769e4ea: mov    0x4(%eax),%esi
  0xa769e4ed: mov    %esi,0xc(%esp)
  0xa769e4f1: mov    %esp,%eax
  0xa769e4f3: shr    $0xc,%eax
  0xa769e4f6: mov    -0x486bdba0(,%eax,4),%eax
  0xa769e4fd: mov    %ebx,0x16c(%eax)
  0xa769e503: mov    %ebx,%eax
  0xa769e505: jmp    *%edi
  0xa769e507: mov    0x4(%ecx),%ebx
  0xa769e50a: cmp    0x8(%eax),%ebx
  0xa769e50d: mov    0x4(%eax),%ebx
  0xa769e510: jne    0xa769e523
  0xa769e516: cmpl   $0x0,0x34(%ebx)
  0xa769e51d: je     0xa769e562
  0xa769e523: jmp    0xa7692560
  0xa769e528: cmpl   $0x0,0x34(%ebx)
  0xa769e52f: je     0xa769e562
  0xa769e535: mov    (%esp),%eax
  0xa769e538: pusha  
  0xa769e539: pushf  
  0xa769e53a: sub    $0x10,%esp
  0xa769e53d: vmovsd %xmm0,(%esp)
  0xa769e542: vmovsd %xmm1,0x8(%esp)
  0xa769e548: push   %eax
  0xa769e549: push   %ebx
  0xa769e54a: call   0xb71d62fc
  0xa769e54f: add    $0x8,%esp
  0xa769e552: vmovsd (%esp),%xmm0
  0xa769e557: vmovsd 0x8(%esp),%xmm1
  0xa769e55d: add    $0x10,%esp
  0xa769e560: popf   
  0xa769e561: popa   
  0xa769e562: pop    %eax
  0xa769e563: mov    %esp,%esi
  0xa769e565: sub    $0x14,%esp
  0xa769e568: mov    %ecx,0x10(%esp)
  0xa769e56c: mov    %edx,0xc(%esp)
  0xa769e570: mov    0x14(%esp),%edi
  0xa769e574: mov    %edi,0x8(%esp)
  0xa769e578: mov    0x18(%esp),%edi
  0xa769e57c: mov    %edi,0x4(%esp)
  0xa769e580: mov    0x1c(%esp),%edi
  0xa769e584: mov    %edi,(%esp)
  0xa769e587: mov    0x28(%ebx),%ecx
  0xa769e58a: push   %eax
  0xa769e58b: jmp    *%ecx

AHE@0xb6674230: 0xa0000000 i2c: 0xa769e640 c2i: 0xa769e6cd c2iUV: 0xa769e6ac
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769e6cd
  0xa769e640: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769e643: mov    $0xa75b1ac0,%edi
  0xa769e648: cmp    %edi,%eax
  0xa769e64a: jbe    0xa769e65d
  0xa769e650: mov    $0xa7691ac0,%edi
  0xa769e655: cmp    %edi,%eax
  0xa769e657: jb     0xa769e688
  0xa769e65d: mov    $0xa75af400,%edi
  0xa769e662: cmp    %edi,%eax
  0xa769e664: jbe    0xa769e677
  0xa769e66a: mov    $0xa75b1728,%edi
  0xa769e66f: cmp    %edi,%eax
  0xa769e671: jb     0xa769e688
  ;; i2c adapter must return to an interpreter frame
  0xa769e677: push   $0xb75a2830
  0xa769e67c: call   0xa769e681
  0xa769e681: pusha  
  0xa769e682: call   0xb7052f32
  0xa769e687: hlt    
  ;; } verify_i2ce 
  0xa769e688: mov    %esp,%edi
  0xa769e68a: and    $0xfffffff0,%esp
  0xa769e68d: push   %eax
  0xa769e68e: mov    %edi,%eax
  0xa769e690: mov    0x30(%ebx),%edi
  0xa769e693: mov    0x4(%eax),%ecx
  0xa769e696: mov    %esp,%eax
  0xa769e698: shr    $0xc,%eax
  0xa769e69b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769e6a2: mov    %ebx,0x16c(%eax)
  0xa769e6a8: mov    %ebx,%eax
  0xa769e6aa: jmp    *%edi
  0xa769e6ac: mov    0x4(%ecx),%ebx
  0xa769e6af: cmp    0x8(%eax),%ebx
  0xa769e6b2: mov    0x4(%eax),%ebx
  0xa769e6b5: jne    0xa769e6c8
  0xa769e6bb: cmpl   $0x0,0x34(%ebx)
  0xa769e6c2: je     0xa769e707
  0xa769e6c8: jmp    0xa7692560
  0xa769e6cd: cmpl   $0x0,0x34(%ebx)
  0xa769e6d4: je     0xa769e707
  0xa769e6da: mov    (%esp),%eax
  0xa769e6dd: pusha  
  0xa769e6de: pushf  
  0xa769e6df: sub    $0x10,%esp
  0xa769e6e2: vmovsd %xmm0,(%esp)
  0xa769e6e7: vmovsd %xmm1,0x8(%esp)
  0xa769e6ed: push   %eax
  0xa769e6ee: push   %ebx
  0xa769e6ef: call   0xb71d62fc
  0xa769e6f4: add    $0x8,%esp
  0xa769e6f7: vmovsd (%esp),%xmm0
  0xa769e6fc: vmovsd 0x8(%esp),%xmm1
  0xa769e702: add    $0x10,%esp
  0xa769e705: popf   
  0xa769e706: popa   
  0xa769e707: pop    %eax
  0xa769e708: mov    %esp,%esi
  0xa769e70a: sub    $0x4,%esp
  0xa769e70d: mov    %ecx,(%esp)
  0xa769e710: mov    0x28(%ebx),%ecx
  0xa769e713: push   %eax
  0xa769e714: jmp    *%ecx

AHE@0xb6674254: 0xaa000000 i2c: 0xa769e7c0 c2i: 0xa769e850 c2iUV: 0xa769e82f
i2c argument handler #0 for: receiver (Ljava/lang/String;)V (221 bytes generated)
c2i argument handler starts at 0xa769e850
  0xa769e7c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769e7c3: mov    $0xa75b1ac0,%edi
  0xa769e7c8: cmp    %edi,%eax
  0xa769e7ca: jbe    0xa769e7dd
  0xa769e7d0: mov    $0xa7691ac0,%edi
  0xa769e7d5: cmp    %edi,%eax
  0xa769e7d7: jb     0xa769e808
  0xa769e7dd: mov    $0xa75af400,%edi
  0xa769e7e2: cmp    %edi,%eax
  0xa769e7e4: jbe    0xa769e7f7
  0xa769e7ea: mov    $0xa75b1728,%edi
  0xa769e7ef: cmp    %edi,%eax
  0xa769e7f1: jb     0xa769e808
  ;; i2c adapter must return to an interpreter frame
  0xa769e7f7: push   $0xb75a2830
  0xa769e7fc: call   0xa769e801
  0xa769e801: pusha  
  0xa769e802: call   0xb7052f32
  0xa769e807: hlt    
  ;; } verify_i2ce 
  0xa769e808: mov    %esp,%edi
  0xa769e80a: and    $0xfffffff0,%esp
  0xa769e80d: push   %eax
  0xa769e80e: mov    %edi,%eax
  0xa769e810: mov    0x30(%ebx),%edi
  0xa769e813: mov    0x8(%eax),%ecx
  0xa769e816: mov    0x4(%eax),%edx
  0xa769e819: mov    %esp,%eax
  0xa769e81b: shr    $0xc,%eax
  0xa769e81e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769e825: mov    %ebx,0x16c(%eax)
  0xa769e82b: mov    %ebx,%eax
  0xa769e82d: jmp    *%edi
  0xa769e82f: mov    0x4(%ecx),%ebx
  0xa769e832: cmp    0x8(%eax),%ebx
  0xa769e835: mov    0x4(%eax),%ebx
  0xa769e838: jne    0xa769e84b
  0xa769e83e: cmpl   $0x0,0x34(%ebx)
  0xa769e845: je     0xa769e88a
  0xa769e84b: jmp    0xa7692560
  0xa769e850: cmpl   $0x0,0x34(%ebx)
  0xa769e857: je     0xa769e88a
  0xa769e85d: mov    (%esp),%eax
  0xa769e860: pusha  
  0xa769e861: pushf  
  0xa769e862: sub    $0x10,%esp
  0xa769e865: vmovsd %xmm0,(%esp)
  0xa769e86a: vmovsd %xmm1,0x8(%esp)
  0xa769e870: push   %eax
  0xa769e871: push   %ebx
  0xa769e872: call   0xb71d62fc
  0xa769e877: add    $0x8,%esp
  0xa769e87a: vmovsd (%esp),%xmm0
  0xa769e87f: vmovsd 0x8(%esp),%xmm1
  0xa769e885: add    $0x10,%esp
  0xa769e888: popf   
  0xa769e889: popa   
  0xa769e88a: pop    %eax
  0xa769e88b: mov    %esp,%esi
  0xa769e88d: sub    $0x8,%esp
  0xa769e890: mov    %ecx,0x4(%esp)
  0xa769e894: mov    %edx,(%esp)
  0xa769e897: mov    0x28(%ebx),%ecx
  0xa769e89a: push   %eax
  0xa769e89b: jmp    *%ecx

AHE@0xb6674278: 0xaaa00000 i2c: 0xa769e940 c2i: 0xa769e9da c2iUV: 0xa769e9b9
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/Throwable;)V (239 bytes generated)
c2i argument handler starts at 0xa769e9da
  0xa769e940: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769e943: mov    $0xa75b1ac0,%edi
  0xa769e948: cmp    %edi,%eax
  0xa769e94a: jbe    0xa769e95d
  0xa769e950: mov    $0xa7691ac0,%edi
  0xa769e955: cmp    %edi,%eax
  0xa769e957: jb     0xa769e988
  0xa769e95d: mov    $0xa75af400,%edi
  0xa769e962: cmp    %edi,%eax
  0xa769e964: jbe    0xa769e977
  0xa769e96a: mov    $0xa75b1728,%edi
  0xa769e96f: cmp    %edi,%eax
  0xa769e971: jb     0xa769e988
  ;; i2c adapter must return to an interpreter frame
  0xa769e977: push   $0xb75a2830
  0xa769e97c: call   0xa769e981
  0xa769e981: pusha  
  0xa769e982: call   0xb7052f32
  0xa769e987: hlt    
  ;; } verify_i2ce 
  0xa769e988: mov    %esp,%edi
  0xa769e98a: sub    $0x8,%esp
  0xa769e98d: and    $0xfffffff0,%esp
  0xa769e990: push   %eax
  0xa769e991: mov    %edi,%eax
  0xa769e993: mov    0x30(%ebx),%edi
  0xa769e996: mov    0xc(%eax),%ecx
  0xa769e999: mov    0x8(%eax),%edx
  0xa769e99c: mov    0x4(%eax),%esi
  0xa769e99f: mov    %esi,0x4(%esp)
  0xa769e9a3: mov    %esp,%eax
  0xa769e9a5: shr    $0xc,%eax
  0xa769e9a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa769e9af: mov    %ebx,0x16c(%eax)
  0xa769e9b5: mov    %ebx,%eax
  0xa769e9b7: jmp    *%edi
  0xa769e9b9: mov    0x4(%ecx),%ebx
  0xa769e9bc: cmp    0x8(%eax),%ebx
  0xa769e9bf: mov    0x4(%eax),%ebx
  0xa769e9c2: jne    0xa769e9d5
  0xa769e9c8: cmpl   $0x0,0x34(%ebx)
  0xa769e9cf: je     0xa769ea14
  0xa769e9d5: jmp    0xa7692560
  0xa769e9da: cmpl   $0x0,0x34(%ebx)
  0xa769e9e1: je     0xa769ea14
  0xa769e9e7: mov    (%esp),%eax
  0xa769e9ea: pusha  
  0xa769e9eb: pushf  
  0xa769e9ec: sub    $0x10,%esp
  0xa769e9ef: vmovsd %xmm0,(%esp)
  0xa769e9f4: vmovsd %xmm1,0x8(%esp)
  0xa769e9fa: push   %eax
  0xa769e9fb: push   %ebx
  0xa769e9fc: call   0xb71d62fc
  0xa769ea01: add    $0x8,%esp
  0xa769ea04: vmovsd (%esp),%xmm0
  0xa769ea09: vmovsd 0x8(%esp),%xmm1
  0xa769ea0f: add    $0x10,%esp
  0xa769ea12: popf   
  0xa769ea13: popa   
  0xa769ea14: pop    %eax
  0xa769ea15: mov    %esp,%esi
  0xa769ea17: sub    $0xc,%esp
  0xa769ea1a: mov    %ecx,0x8(%esp)
  0xa769ea1e: mov    %edx,0x4(%esp)
  0xa769ea22: mov    0xc(%esp),%edi
  0xa769ea26: mov    %edi,(%esp)
  0xa769ea29: mov    0x28(%ebx),%ecx
  0xa769ea2c: push   %eax
  0xa769ea2d: jmp    *%ecx

AHE@0xb667429c: 0xaa000000 i2c: 0xa769eac0 c2i: 0xa769eb50 c2iUV: 0xa769eb2f
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (221 bytes generated)
c2i argument handler starts at 0xa769eb50
  0xa769eac0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769eac3: mov    $0xa75b1ac0,%edi
  0xa769eac8: cmp    %edi,%eax
  0xa769eaca: jbe    0xa769eadd
  0xa769ead0: mov    $0xa7691ac0,%edi
  0xa769ead5: cmp    %edi,%eax
  0xa769ead7: jb     0xa769eb08
  0xa769eadd: mov    $0xa75af400,%edi
  0xa769eae2: cmp    %edi,%eax
  0xa769eae4: jbe    0xa769eaf7
  0xa769eaea: mov    $0xa75b1728,%edi
  0xa769eaef: cmp    %edi,%eax
  0xa769eaf1: jb     0xa769eb08
  ;; i2c adapter must return to an interpreter frame
  0xa769eaf7: push   $0xb75a2830
  0xa769eafc: call   0xa769eb01
  0xa769eb01: pusha  
  0xa769eb02: call   0xb7052f32
  0xa769eb07: hlt    
  ;; } verify_i2ce 
  0xa769eb08: mov    %esp,%edi
  0xa769eb0a: and    $0xfffffff0,%esp
  0xa769eb0d: push   %eax
  0xa769eb0e: mov    %edi,%eax
  0xa769eb10: mov    0x30(%ebx),%edi
  0xa769eb13: mov    0x8(%eax),%ecx
  0xa769eb16: mov    0x4(%eax),%edx
  0xa769eb19: mov    %esp,%eax
  0xa769eb1b: shr    $0xc,%eax
  0xa769eb1e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769eb25: mov    %ebx,0x16c(%eax)
  0xa769eb2b: mov    %ebx,%eax
  0xa769eb2d: jmp    *%edi
  0xa769eb2f: mov    0x4(%ecx),%ebx
  0xa769eb32: cmp    0x8(%eax),%ebx
  0xa769eb35: mov    0x4(%eax),%ebx
  0xa769eb38: jne    0xa769eb4b
  0xa769eb3e: cmpl   $0x0,0x34(%ebx)
  0xa769eb45: je     0xa769eb8a
  0xa769eb4b: jmp    0xa7692560
  0xa769eb50: cmpl   $0x0,0x34(%ebx)
  0xa769eb57: je     0xa769eb8a
  0xa769eb5d: mov    (%esp),%eax
  0xa769eb60: pusha  
  0xa769eb61: pushf  
  0xa769eb62: sub    $0x10,%esp
  0xa769eb65: vmovsd %xmm0,(%esp)
  0xa769eb6a: vmovsd %xmm1,0x8(%esp)
  0xa769eb70: push   %eax
  0xa769eb71: push   %ebx
  0xa769eb72: call   0xb71d62fc
  0xa769eb77: add    $0x8,%esp
  0xa769eb7a: vmovsd (%esp),%xmm0
  0xa769eb7f: vmovsd 0x8(%esp),%xmm1
  0xa769eb85: add    $0x10,%esp
  0xa769eb88: popf   
  0xa769eb89: popa   
  0xa769eb8a: pop    %eax
  0xa769eb8b: mov    %esp,%esi
  0xa769eb8d: sub    $0x8,%esp
  0xa769eb90: mov    %ecx,0x4(%esp)
  0xa769eb94: mov    %edx,(%esp)
  0xa769eb97: mov    0x28(%ebx),%ecx
  0xa769eb9a: push   %eax
  0xa769eb9b: jmp    *%ecx

AHE@0xb66742c0: 0xa0000000 i2c: 0xa769ec40 c2i: 0xa769eccd c2iUV: 0xa769ecac
i2c argument handler #0 for: receiver ()Z (214 bytes generated)
c2i argument handler starts at 0xa769eccd
  0xa769ec40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769ec43: mov    $0xa75b1ac0,%edi
  0xa769ec48: cmp    %edi,%eax
  0xa769ec4a: jbe    0xa769ec5d
  0xa769ec50: mov    $0xa7691ac0,%edi
  0xa769ec55: cmp    %edi,%eax
  0xa769ec57: jb     0xa769ec88
  0xa769ec5d: mov    $0xa75af400,%edi
  0xa769ec62: cmp    %edi,%eax
  0xa769ec64: jbe    0xa769ec77
  0xa769ec6a: mov    $0xa75b1728,%edi
  0xa769ec6f: cmp    %edi,%eax
  0xa769ec71: jb     0xa769ec88
  ;; i2c adapter must return to an interpreter frame
  0xa769ec77: push   $0xb75a2830
  0xa769ec7c: call   0xa769ec81
  0xa769ec81: pusha  
  0xa769ec82: call   0xb7052f32
  0xa769ec87: hlt    
  ;; } verify_i2ce 
  0xa769ec88: mov    %esp,%edi
  0xa769ec8a: and    $0xfffffff0,%esp
  0xa769ec8d: push   %eax
  0xa769ec8e: mov    %edi,%eax
  0xa769ec90: mov    0x30(%ebx),%edi
  0xa769ec93: mov    0x4(%eax),%ecx
  0xa769ec96: mov    %esp,%eax
  0xa769ec98: shr    $0xc,%eax
  0xa769ec9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769eca2: mov    %ebx,0x16c(%eax)
  0xa769eca8: mov    %ebx,%eax
  0xa769ecaa: jmp    *%edi
  0xa769ecac: mov    0x4(%ecx),%ebx
  0xa769ecaf: cmp    0x8(%eax),%ebx
  0xa769ecb2: mov    0x4(%eax),%ebx
  0xa769ecb5: jne    0xa769ecc8
  0xa769ecbb: cmpl   $0x0,0x34(%ebx)
  0xa769ecc2: je     0xa769ed07
  0xa769ecc8: jmp    0xa7692560
  0xa769eccd: cmpl   $0x0,0x34(%ebx)
  0xa769ecd4: je     0xa769ed07
  0xa769ecda: mov    (%esp),%eax
  0xa769ecdd: pusha  
  0xa769ecde: pushf  
  0xa769ecdf: sub    $0x10,%esp
  0xa769ece2: vmovsd %xmm0,(%esp)
  0xa769ece7: vmovsd %xmm1,0x8(%esp)
  0xa769eced: push   %eax
  0xa769ecee: push   %ebx
  0xa769ecef: call   0xb71d62fc
  0xa769ecf4: add    $0x8,%esp
  0xa769ecf7: vmovsd (%esp),%xmm0
  0xa769ecfc: vmovsd 0x8(%esp),%xmm1
  0xa769ed02: add    $0x10,%esp
  0xa769ed05: popf   
  0xa769ed06: popa   
  0xa769ed07: pop    %eax
  0xa769ed08: mov    %esp,%esi
  0xa769ed0a: sub    $0x4,%esp
  0xa769ed0d: mov    %ecx,(%esp)
  0xa769ed10: mov    0x28(%ebx),%ecx
  0xa769ed13: push   %eax
  0xa769ed14: jmp    *%ecx

AHE@0xb66742e4: 0xa0000000 i2c: 0xa769edc0 c2i: 0xa769ee4d c2iUV: 0xa769ee2c
i2c argument handler #0 for: receiver ()Z (214 bytes generated)
c2i argument handler starts at 0xa769ee4d
  0xa769edc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769edc3: mov    $0xa75b1ac0,%edi
  0xa769edc8: cmp    %edi,%eax
  0xa769edca: jbe    0xa769eddd
  0xa769edd0: mov    $0xa7691ac0,%edi
  0xa769edd5: cmp    %edi,%eax
  0xa769edd7: jb     0xa769ee08
  0xa769eddd: mov    $0xa75af400,%edi
  0xa769ede2: cmp    %edi,%eax
  0xa769ede4: jbe    0xa769edf7
  0xa769edea: mov    $0xa75b1728,%edi
  0xa769edef: cmp    %edi,%eax
  0xa769edf1: jb     0xa769ee08
  ;; i2c adapter must return to an interpreter frame
  0xa769edf7: push   $0xb75a2830
  0xa769edfc: call   0xa769ee01
  0xa769ee01: pusha  
  0xa769ee02: call   0xb7052f32
  0xa769ee07: hlt    
  ;; } verify_i2ce 
  0xa769ee08: mov    %esp,%edi
  0xa769ee0a: and    $0xfffffff0,%esp
  0xa769ee0d: push   %eax
  0xa769ee0e: mov    %edi,%eax
  0xa769ee10: mov    0x30(%ebx),%edi
  0xa769ee13: mov    0x4(%eax),%ecx
  0xa769ee16: mov    %esp,%eax
  0xa769ee18: shr    $0xc,%eax
  0xa769ee1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769ee22: mov    %ebx,0x16c(%eax)
  0xa769ee28: mov    %ebx,%eax
  0xa769ee2a: jmp    *%edi
  0xa769ee2c: mov    0x4(%ecx),%ebx
  0xa769ee2f: cmp    0x8(%eax),%ebx
  0xa769ee32: mov    0x4(%eax),%ebx
  0xa769ee35: jne    0xa769ee48
  0xa769ee3b: cmpl   $0x0,0x34(%ebx)
  0xa769ee42: je     0xa769ee87
  0xa769ee48: jmp    0xa7692560
  0xa769ee4d: cmpl   $0x0,0x34(%ebx)
  0xa769ee54: je     0xa769ee87
  0xa769ee5a: mov    (%esp),%eax
  0xa769ee5d: pusha  
  0xa769ee5e: pushf  
  0xa769ee5f: sub    $0x10,%esp
  0xa769ee62: vmovsd %xmm0,(%esp)
  0xa769ee67: vmovsd %xmm1,0x8(%esp)
  0xa769ee6d: push   %eax
  0xa769ee6e: push   %ebx
  0xa769ee6f: call   0xb71d62fc
  0xa769ee74: add    $0x8,%esp
  0xa769ee77: vmovsd (%esp),%xmm0
  0xa769ee7c: vmovsd 0x8(%esp),%xmm1
  0xa769ee82: add    $0x10,%esp
  0xa769ee85: popf   
  0xa769ee86: popa   
  0xa769ee87: pop    %eax
  0xa769ee88: mov    %esp,%esi
  0xa769ee8a: sub    $0x4,%esp
  0xa769ee8d: mov    %ecx,(%esp)
  0xa769ee90: mov    0x28(%ebx),%ecx
  0xa769ee93: push   %eax
  0xa769ee94: jmp    *%ecx

AHE@0xb6674308: 0xa0000000 i2c: 0xa769ef40 c2i: 0xa769efcd c2iUV: 0xa769efac
i2c argument handler #0 for: static (Z)Z (214 bytes generated)
c2i argument handler starts at 0xa769efcd
  0xa769ef40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769ef43: mov    $0xa75b1ac0,%edi
  0xa769ef48: cmp    %edi,%eax
  0xa769ef4a: jbe    0xa769ef5d
  0xa769ef50: mov    $0xa7691ac0,%edi
  0xa769ef55: cmp    %edi,%eax
  0xa769ef57: jb     0xa769ef88
  0xa769ef5d: mov    $0xa75af400,%edi
  0xa769ef62: cmp    %edi,%eax
  0xa769ef64: jbe    0xa769ef77
  0xa769ef6a: mov    $0xa75b1728,%edi
  0xa769ef6f: cmp    %edi,%eax
  0xa769ef71: jb     0xa769ef88
  ;; i2c adapter must return to an interpreter frame
  0xa769ef77: push   $0xb75a2830
  0xa769ef7c: call   0xa769ef81
  0xa769ef81: pusha  
  0xa769ef82: call   0xb7052f32
  0xa769ef87: hlt    
  ;; } verify_i2ce 
  0xa769ef88: mov    %esp,%edi
  0xa769ef8a: and    $0xfffffff0,%esp
  0xa769ef8d: push   %eax
  0xa769ef8e: mov    %edi,%eax
  0xa769ef90: mov    0x30(%ebx),%edi
  0xa769ef93: mov    0x4(%eax),%ecx
  0xa769ef96: mov    %esp,%eax
  0xa769ef98: shr    $0xc,%eax
  0xa769ef9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769efa2: mov    %ebx,0x16c(%eax)
  0xa769efa8: mov    %ebx,%eax
  0xa769efaa: jmp    *%edi
  0xa769efac: mov    0x4(%ecx),%ebx
  0xa769efaf: cmp    0x8(%eax),%ebx
  0xa769efb2: mov    0x4(%eax),%ebx
  0xa769efb5: jne    0xa769efc8
  0xa769efbb: cmpl   $0x0,0x34(%ebx)
  0xa769efc2: je     0xa769f007
  0xa769efc8: jmp    0xa7692560
  0xa769efcd: cmpl   $0x0,0x34(%ebx)
  0xa769efd4: je     0xa769f007
  0xa769efda: mov    (%esp),%eax
  0xa769efdd: pusha  
  0xa769efde: pushf  
  0xa769efdf: sub    $0x10,%esp
  0xa769efe2: vmovsd %xmm0,(%esp)
  0xa769efe7: vmovsd %xmm1,0x8(%esp)
  0xa769efed: push   %eax
  0xa769efee: push   %ebx
  0xa769efef: call   0xb71d62fc
  0xa769eff4: add    $0x8,%esp
  0xa769eff7: vmovsd (%esp),%xmm0
  0xa769effc: vmovsd 0x8(%esp),%xmm1
  0xa769f002: add    $0x10,%esp
  0xa769f005: popf   
  0xa769f006: popa   
  0xa769f007: pop    %eax
  0xa769f008: mov    %esp,%esi
  0xa769f00a: sub    $0x4,%esp
  0xa769f00d: mov    %ecx,(%esp)
  0xa769f010: mov    0x28(%ebx),%ecx
  0xa769f013: push   %eax
  0xa769f014: jmp    *%ecx

AHE@0xb667432c: 0xa0000000 i2c: 0xa769f0c0 c2i: 0xa769f14d c2iUV: 0xa769f12c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa769f14d
  0xa769f0c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769f0c3: mov    $0xa75b1ac0,%edi
  0xa769f0c8: cmp    %edi,%eax
  0xa769f0ca: jbe    0xa769f0dd
  0xa769f0d0: mov    $0xa7691ac0,%edi
  0xa769f0d5: cmp    %edi,%eax
  0xa769f0d7: jb     0xa769f108
  0xa769f0dd: mov    $0xa75af400,%edi
  0xa769f0e2: cmp    %edi,%eax
  0xa769f0e4: jbe    0xa769f0f7
  0xa769f0ea: mov    $0xa75b1728,%edi
  0xa769f0ef: cmp    %edi,%eax
  0xa769f0f1: jb     0xa769f108
  ;; i2c adapter must return to an interpreter frame
  0xa769f0f7: push   $0xb75a2830
  0xa769f0fc: call   0xa769f101
  0xa769f101: pusha  
  0xa769f102: call   0xb7052f32
  0xa769f107: hlt    
  ;; } verify_i2ce 
  0xa769f108: mov    %esp,%edi
  0xa769f10a: and    $0xfffffff0,%esp
  0xa769f10d: push   %eax
  0xa769f10e: mov    %edi,%eax
  0xa769f110: mov    0x30(%ebx),%edi
  0xa769f113: mov    0x4(%eax),%ecx
  0xa769f116: mov    %esp,%eax
  0xa769f118: shr    $0xc,%eax
  0xa769f11b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769f122: mov    %ebx,0x16c(%eax)
  0xa769f128: mov    %ebx,%eax
  0xa769f12a: jmp    *%edi
  0xa769f12c: mov    0x4(%ecx),%ebx
  0xa769f12f: cmp    0x8(%eax),%ebx
  0xa769f132: mov    0x4(%eax),%ebx
  0xa769f135: jne    0xa769f148
  0xa769f13b: cmpl   $0x0,0x34(%ebx)
  0xa769f142: je     0xa769f187
  0xa769f148: jmp    0xa7692560
  0xa769f14d: cmpl   $0x0,0x34(%ebx)
  0xa769f154: je     0xa769f187
  0xa769f15a: mov    (%esp),%eax
  0xa769f15d: pusha  
  0xa769f15e: pushf  
  0xa769f15f: sub    $0x10,%esp
  0xa769f162: vmovsd %xmm0,(%esp)
  0xa769f167: vmovsd %xmm1,0x8(%esp)
  0xa769f16d: push   %eax
  0xa769f16e: push   %ebx
  0xa769f16f: call   0xb71d62fc
  0xa769f174: add    $0x8,%esp
  0xa769f177: vmovsd (%esp),%xmm0
  0xa769f17c: vmovsd 0x8(%esp),%xmm1
  0xa769f182: add    $0x10,%esp
  0xa769f185: popf   
  0xa769f186: popa   
  0xa769f187: pop    %eax
  0xa769f188: mov    %esp,%esi
  0xa769f18a: sub    $0x4,%esp
  0xa769f18d: mov    %ecx,(%esp)
  0xa769f190: mov    0x28(%ebx),%ecx
  0xa769f193: push   %eax
  0xa769f194: jmp    *%ecx

AHE@0xb6674350: 0xa0000000 i2c: 0xa769f240 c2i: 0xa769f2cd c2iUV: 0xa769f2ac
i2c argument handler #0 for: receiver ()Ljava/lang/Object; (214 bytes generated)
c2i argument handler starts at 0xa769f2cd
  0xa769f240: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769f243: mov    $0xa75b1ac0,%edi
  0xa769f248: cmp    %edi,%eax
  0xa769f24a: jbe    0xa769f25d
  0xa769f250: mov    $0xa7691ac0,%edi
  0xa769f255: cmp    %edi,%eax
  0xa769f257: jb     0xa769f288
  0xa769f25d: mov    $0xa75af400,%edi
  0xa769f262: cmp    %edi,%eax
  0xa769f264: jbe    0xa769f277
  0xa769f26a: mov    $0xa75b1728,%edi
  0xa769f26f: cmp    %edi,%eax
  0xa769f271: jb     0xa769f288
  ;; i2c adapter must return to an interpreter frame
  0xa769f277: push   $0xb75a2830
  0xa769f27c: call   0xa769f281
  0xa769f281: pusha  
  0xa769f282: call   0xb7052f32
  0xa769f287: hlt    
  ;; } verify_i2ce 
  0xa769f288: mov    %esp,%edi
  0xa769f28a: and    $0xfffffff0,%esp
  0xa769f28d: push   %eax
  0xa769f28e: mov    %edi,%eax
  0xa769f290: mov    0x30(%ebx),%edi
  0xa769f293: mov    0x4(%eax),%ecx
  0xa769f296: mov    %esp,%eax
  0xa769f298: shr    $0xc,%eax
  0xa769f29b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769f2a2: mov    %ebx,0x16c(%eax)
  0xa769f2a8: mov    %ebx,%eax
  0xa769f2aa: jmp    *%edi
  0xa769f2ac: mov    0x4(%ecx),%ebx
  0xa769f2af: cmp    0x8(%eax),%ebx
  0xa769f2b2: mov    0x4(%eax),%ebx
  0xa769f2b5: jne    0xa769f2c8
  0xa769f2bb: cmpl   $0x0,0x34(%ebx)
  0xa769f2c2: je     0xa769f307
  0xa769f2c8: jmp    0xa7692560
  0xa769f2cd: cmpl   $0x0,0x34(%ebx)
  0xa769f2d4: je     0xa769f307
  0xa769f2da: mov    (%esp),%eax
  0xa769f2dd: pusha  
  0xa769f2de: pushf  
  0xa769f2df: sub    $0x10,%esp
  0xa769f2e2: vmovsd %xmm0,(%esp)
  0xa769f2e7: vmovsd %xmm1,0x8(%esp)
  0xa769f2ed: push   %eax
  0xa769f2ee: push   %ebx
  0xa769f2ef: call   0xb71d62fc
  0xa769f2f4: add    $0x8,%esp
  0xa769f2f7: vmovsd (%esp),%xmm0
  0xa769f2fc: vmovsd 0x8(%esp),%xmm1
  0xa769f302: add    $0x10,%esp
  0xa769f305: popf   
  0xa769f306: popa   
  0xa769f307: pop    %eax
  0xa769f308: mov    %esp,%esi
  0xa769f30a: sub    $0x4,%esp
  0xa769f30d: mov    %ecx,(%esp)
  0xa769f310: mov    0x28(%ebx),%ecx
  0xa769f313: push   %eax
  0xa769f314: jmp    *%ecx

AHE@0xb6674374: 0x i2c: 0xa769f3c0 c2i: 0xa769f44a c2iUV: 0xa769f429
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa769f44a
  0xa769f3c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769f3c3: mov    $0xa75b1ac0,%edi
  0xa769f3c8: cmp    %edi,%eax
  0xa769f3ca: jbe    0xa769f3dd
  0xa769f3d0: mov    $0xa7691ac0,%edi
  0xa769f3d5: cmp    %edi,%eax
  0xa769f3d7: jb     0xa769f408
  0xa769f3dd: mov    $0xa75af400,%edi
  0xa769f3e2: cmp    %edi,%eax
  0xa769f3e4: jbe    0xa769f3f7
  0xa769f3ea: mov    $0xa75b1728,%edi
  0xa769f3ef: cmp    %edi,%eax
  0xa769f3f1: jb     0xa769f408
  ;; i2c adapter must return to an interpreter frame
  0xa769f3f7: push   $0xb75a2830
  0xa769f3fc: call   0xa769f401
  0xa769f401: pusha  
  0xa769f402: call   0xb7052f32
  0xa769f407: hlt    
  ;; } verify_i2ce 
  0xa769f408: mov    %esp,%edi
  0xa769f40a: and    $0xfffffff0,%esp
  0xa769f40d: push   %eax
  0xa769f40e: mov    %edi,%eax
  0xa769f410: mov    0x30(%ebx),%edi
  0xa769f413: mov    %esp,%eax
  0xa769f415: shr    $0xc,%eax
  0xa769f418: mov    -0x486bdba0(,%eax,4),%eax
  0xa769f41f: mov    %ebx,0x16c(%eax)
  0xa769f425: mov    %ebx,%eax
  0xa769f427: jmp    *%edi
  0xa769f429: mov    0x4(%ecx),%ebx
  0xa769f42c: cmp    0x8(%eax),%ebx
  0xa769f42f: mov    0x4(%eax),%ebx
  0xa769f432: jne    0xa769f445
  0xa769f438: cmpl   $0x0,0x34(%ebx)
  0xa769f43f: je     0xa769f484
  0xa769f445: jmp    0xa7692560
  0xa769f44a: cmpl   $0x0,0x34(%ebx)
  0xa769f451: je     0xa769f484
  0xa769f457: mov    (%esp),%eax
  0xa769f45a: pusha  
  0xa769f45b: pushf  
  0xa769f45c: sub    $0x10,%esp
  0xa769f45f: vmovsd %xmm0,(%esp)
  0xa769f464: vmovsd %xmm1,0x8(%esp)
  0xa769f46a: push   %eax
  0xa769f46b: push   %ebx
  0xa769f46c: call   0xb71d62fc
  0xa769f471: add    $0x8,%esp
  0xa769f474: vmovsd (%esp),%xmm0
  0xa769f479: vmovsd 0x8(%esp),%xmm1
  0xa769f47f: add    $0x10,%esp
  0xa769f482: popf   
  0xa769f483: popa   
  0xa769f484: pop    %eax
  0xa769f485: mov    %esp,%esi
  0xa769f487: sub    $0x0,%esp
  0xa769f48a: mov    0x28(%ebx),%ecx
  0xa769f48d: push   %eax
  0xa769f48e: jmp    *%ecx

AHE@0xb6674398: 0xaaa00000 i2c: 0xa769f540 c2i: 0xa769f5da c2iUV: 0xa769f5b9
i2c argument handler #0 for: receiver (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V (239 bytes generated)
c2i argument handler starts at 0xa769f5da
  0xa769f540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769f543: mov    $0xa75b1ac0,%edi
  0xa769f548: cmp    %edi,%eax
  0xa769f54a: jbe    0xa769f55d
  0xa769f550: mov    $0xa7691ac0,%edi
  0xa769f555: cmp    %edi,%eax
  0xa769f557: jb     0xa769f588
  0xa769f55d: mov    $0xa75af400,%edi
  0xa769f562: cmp    %edi,%eax
  0xa769f564: jbe    0xa769f577
  0xa769f56a: mov    $0xa75b1728,%edi
  0xa769f56f: cmp    %edi,%eax
  0xa769f571: jb     0xa769f588
  ;; i2c adapter must return to an interpreter frame
  0xa769f577: push   $0xb75a2830
  0xa769f57c: call   0xa769f581
  0xa769f581: pusha  
  0xa769f582: call   0xb7052f32
  0xa769f587: hlt    
  ;; } verify_i2ce 
  0xa769f588: mov    %esp,%edi
  0xa769f58a: sub    $0x8,%esp
  0xa769f58d: and    $0xfffffff0,%esp
  0xa769f590: push   %eax
  0xa769f591: mov    %edi,%eax
  0xa769f593: mov    0x30(%ebx),%edi
  0xa769f596: mov    0xc(%eax),%ecx
  0xa769f599: mov    0x8(%eax),%edx
  0xa769f59c: mov    0x4(%eax),%esi
  0xa769f59f: mov    %esi,0x4(%esp)
  0xa769f5a3: mov    %esp,%eax
  0xa769f5a5: shr    $0xc,%eax
  0xa769f5a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa769f5af: mov    %ebx,0x16c(%eax)
  0xa769f5b5: mov    %ebx,%eax
  0xa769f5b7: jmp    *%edi
  0xa769f5b9: mov    0x4(%ecx),%ebx
  0xa769f5bc: cmp    0x8(%eax),%ebx
  0xa769f5bf: mov    0x4(%eax),%ebx
  0xa769f5c2: jne    0xa769f5d5
  0xa769f5c8: cmpl   $0x0,0x34(%ebx)
  0xa769f5cf: je     0xa769f614
  0xa769f5d5: jmp    0xa7692560
  0xa769f5da: cmpl   $0x0,0x34(%ebx)
  0xa769f5e1: je     0xa769f614
  0xa769f5e7: mov    (%esp),%eax
  0xa769f5ea: pusha  
  0xa769f5eb: pushf  
  0xa769f5ec: sub    $0x10,%esp
  0xa769f5ef: vmovsd %xmm0,(%esp)
  0xa769f5f4: vmovsd %xmm1,0x8(%esp)
  0xa769f5fa: push   %eax
  0xa769f5fb: push   %ebx
  0xa769f5fc: call   0xb71d62fc
  0xa769f601: add    $0x8,%esp
  0xa769f604: vmovsd (%esp),%xmm0
  0xa769f609: vmovsd 0x8(%esp),%xmm1
  0xa769f60f: add    $0x10,%esp
  0xa769f612: popf   
  0xa769f613: popa   
  0xa769f614: pop    %eax
  0xa769f615: mov    %esp,%esi
  0xa769f617: sub    $0xc,%esp
  0xa769f61a: mov    %ecx,0x8(%esp)
  0xa769f61e: mov    %edx,0x4(%esp)
  0xa769f622: mov    0xc(%esp),%edi
  0xa769f626: mov    %edi,(%esp)
  0xa769f629: mov    0x28(%ebx),%ecx
  0xa769f62c: push   %eax
  0xa769f62d: jmp    *%ecx

AHE@0xb66743bc: 0xaa000000 i2c: 0xa769f6c0 c2i: 0xa769f750 c2iUV: 0xa769f72f
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (221 bytes generated)
c2i argument handler starts at 0xa769f750
  0xa769f6c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769f6c3: mov    $0xa75b1ac0,%edi
  0xa769f6c8: cmp    %edi,%eax
  0xa769f6ca: jbe    0xa769f6dd
  0xa769f6d0: mov    $0xa7691ac0,%edi
  0xa769f6d5: cmp    %edi,%eax
  0xa769f6d7: jb     0xa769f708
  0xa769f6dd: mov    $0xa75af400,%edi
  0xa769f6e2: cmp    %edi,%eax
  0xa769f6e4: jbe    0xa769f6f7
  0xa769f6ea: mov    $0xa75b1728,%edi
  0xa769f6ef: cmp    %edi,%eax
  0xa769f6f1: jb     0xa769f708
  ;; i2c adapter must return to an interpreter frame
  0xa769f6f7: push   $0xb75a2830
  0xa769f6fc: call   0xa769f701
  0xa769f701: pusha  
  0xa769f702: call   0xb7052f32
  0xa769f707: hlt    
  ;; } verify_i2ce 
  0xa769f708: mov    %esp,%edi
  0xa769f70a: and    $0xfffffff0,%esp
  0xa769f70d: push   %eax
  0xa769f70e: mov    %edi,%eax
  0xa769f710: mov    0x30(%ebx),%edi
  0xa769f713: mov    0x8(%eax),%ecx
  0xa769f716: mov    0x4(%eax),%edx
  0xa769f719: mov    %esp,%eax
  0xa769f71b: shr    $0xc,%eax
  0xa769f71e: mov    -0x486bdba0(,%eax,4),%eax
  0xa769f725: mov    %ebx,0x16c(%eax)
  0xa769f72b: mov    %ebx,%eax
  0xa769f72d: jmp    *%edi
  0xa769f72f: mov    0x4(%ecx),%ebx
  0xa769f732: cmp    0x8(%eax),%ebx
  0xa769f735: mov    0x4(%eax),%ebx
  0xa769f738: jne    0xa769f74b
  0xa769f73e: cmpl   $0x0,0x34(%ebx)
  0xa769f745: je     0xa769f78a
  0xa769f74b: jmp    0xa7692560
  0xa769f750: cmpl   $0x0,0x34(%ebx)
  0xa769f757: je     0xa769f78a
  0xa769f75d: mov    (%esp),%eax
  0xa769f760: pusha  
  0xa769f761: pushf  
  0xa769f762: sub    $0x10,%esp
  0xa769f765: vmovsd %xmm0,(%esp)
  0xa769f76a: vmovsd %xmm1,0x8(%esp)
  0xa769f770: push   %eax
  0xa769f771: push   %ebx
  0xa769f772: call   0xb71d62fc
  0xa769f777: add    $0x8,%esp
  0xa769f77a: vmovsd (%esp),%xmm0
  0xa769f77f: vmovsd 0x8(%esp),%xmm1
  0xa769f785: add    $0x10,%esp
  0xa769f788: popf   
  0xa769f789: popa   
  0xa769f78a: pop    %eax
  0xa769f78b: mov    %esp,%esi
  0xa769f78d: sub    $0x8,%esp
  0xa769f790: mov    %ecx,0x4(%esp)
  0xa769f794: mov    %edx,(%esp)
  0xa769f797: mov    0x28(%ebx),%ecx
  0xa769f79a: push   %eax
  0xa769f79b: jmp    *%ecx

AHE@0xb66743e0: 0xaaa00000 i2c: 0xa769f840 c2i: 0xa769f8da c2iUV: 0xa769f8b9
i2c argument handler #0 for: receiver (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V (239 bytes generated)
c2i argument handler starts at 0xa769f8da
  0xa769f840: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769f843: mov    $0xa75b1ac0,%edi
  0xa769f848: cmp    %edi,%eax
  0xa769f84a: jbe    0xa769f85d
  0xa769f850: mov    $0xa7691ac0,%edi
  0xa769f855: cmp    %edi,%eax
  0xa769f857: jb     0xa769f888
  0xa769f85d: mov    $0xa75af400,%edi
  0xa769f862: cmp    %edi,%eax
  0xa769f864: jbe    0xa769f877
  0xa769f86a: mov    $0xa75b1728,%edi
  0xa769f86f: cmp    %edi,%eax
  0xa769f871: jb     0xa769f888
  ;; i2c adapter must return to an interpreter frame
  0xa769f877: push   $0xb75a2830
  0xa769f87c: call   0xa769f881
  0xa769f881: pusha  
  0xa769f882: call   0xb7052f32
  0xa769f887: hlt    
  ;; } verify_i2ce 
  0xa769f888: mov    %esp,%edi
  0xa769f88a: sub    $0x8,%esp
  0xa769f88d: and    $0xfffffff0,%esp
  0xa769f890: push   %eax
  0xa769f891: mov    %edi,%eax
  0xa769f893: mov    0x30(%ebx),%edi
  0xa769f896: mov    0xc(%eax),%ecx
  0xa769f899: mov    0x8(%eax),%edx
  0xa769f89c: mov    0x4(%eax),%esi
  0xa769f89f: mov    %esi,0x4(%esp)
  0xa769f8a3: mov    %esp,%eax
  0xa769f8a5: shr    $0xc,%eax
  0xa769f8a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa769f8af: mov    %ebx,0x16c(%eax)
  0xa769f8b5: mov    %ebx,%eax
  0xa769f8b7: jmp    *%edi
  0xa769f8b9: mov    0x4(%ecx),%ebx
  0xa769f8bc: cmp    0x8(%eax),%ebx
  0xa769f8bf: mov    0x4(%eax),%ebx
  0xa769f8c2: jne    0xa769f8d5
  0xa769f8c8: cmpl   $0x0,0x34(%ebx)
  0xa769f8cf: je     0xa769f914
  0xa769f8d5: jmp    0xa7692560
  0xa769f8da: cmpl   $0x0,0x34(%ebx)
  0xa769f8e1: je     0xa769f914
  0xa769f8e7: mov    (%esp),%eax
  0xa769f8ea: pusha  
  0xa769f8eb: pushf  
  0xa769f8ec: sub    $0x10,%esp
  0xa769f8ef: vmovsd %xmm0,(%esp)
  0xa769f8f4: vmovsd %xmm1,0x8(%esp)
  0xa769f8fa: push   %eax
  0xa769f8fb: push   %ebx
  0xa769f8fc: call   0xb71d62fc
  0xa769f901: add    $0x8,%esp
  0xa769f904: vmovsd (%esp),%xmm0
  0xa769f909: vmovsd 0x8(%esp),%xmm1
  0xa769f90f: add    $0x10,%esp
  0xa769f912: popf   
  0xa769f913: popa   
  0xa769f914: pop    %eax
  0xa769f915: mov    %esp,%esi
  0xa769f917: sub    $0xc,%esp
  0xa769f91a: mov    %ecx,0x8(%esp)
  0xa769f91e: mov    %edx,0x4(%esp)
  0xa769f922: mov    0xc(%esp),%edi
  0xa769f926: mov    %edi,(%esp)
  0xa769f929: mov    0x28(%ebx),%ecx
  0xa769f92c: push   %eax
  0xa769f92d: jmp    *%ecx

AHE@0xb6674404: 0xa0000000 i2c: 0xa769f9c0 c2i: 0xa769fa4d c2iUV: 0xa769fa2c
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;)Ljava/lang/ref/Finalizer; (214 bytes generated)
c2i argument handler starts at 0xa769fa4d
  0xa769f9c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769f9c3: mov    $0xa75b1ac0,%edi
  0xa769f9c8: cmp    %edi,%eax
  0xa769f9ca: jbe    0xa769f9dd
  0xa769f9d0: mov    $0xa7691ac0,%edi
  0xa769f9d5: cmp    %edi,%eax
  0xa769f9d7: jb     0xa769fa08
  0xa769f9dd: mov    $0xa75af400,%edi
  0xa769f9e2: cmp    %edi,%eax
  0xa769f9e4: jbe    0xa769f9f7
  0xa769f9ea: mov    $0xa75b1728,%edi
  0xa769f9ef: cmp    %edi,%eax
  0xa769f9f1: jb     0xa769fa08
  ;; i2c adapter must return to an interpreter frame
  0xa769f9f7: push   $0xb75a2830
  0xa769f9fc: call   0xa769fa01
  0xa769fa01: pusha  
  0xa769fa02: call   0xb7052f32
  0xa769fa07: hlt    
  ;; } verify_i2ce 
  0xa769fa08: mov    %esp,%edi
  0xa769fa0a: and    $0xfffffff0,%esp
  0xa769fa0d: push   %eax
  0xa769fa0e: mov    %edi,%eax
  0xa769fa10: mov    0x30(%ebx),%edi
  0xa769fa13: mov    0x4(%eax),%ecx
  0xa769fa16: mov    %esp,%eax
  0xa769fa18: shr    $0xc,%eax
  0xa769fa1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769fa22: mov    %ebx,0x16c(%eax)
  0xa769fa28: mov    %ebx,%eax
  0xa769fa2a: jmp    *%edi
  0xa769fa2c: mov    0x4(%ecx),%ebx
  0xa769fa2f: cmp    0x8(%eax),%ebx
  0xa769fa32: mov    0x4(%eax),%ebx
  0xa769fa35: jne    0xa769fa48
  0xa769fa3b: cmpl   $0x0,0x34(%ebx)
  0xa769fa42: je     0xa769fa87
  0xa769fa48: jmp    0xa7692560
  0xa769fa4d: cmpl   $0x0,0x34(%ebx)
  0xa769fa54: je     0xa769fa87
  0xa769fa5a: mov    (%esp),%eax
  0xa769fa5d: pusha  
  0xa769fa5e: pushf  
  0xa769fa5f: sub    $0x10,%esp
  0xa769fa62: vmovsd %xmm0,(%esp)
  0xa769fa67: vmovsd %xmm1,0x8(%esp)
  0xa769fa6d: push   %eax
  0xa769fa6e: push   %ebx
  0xa769fa6f: call   0xb71d62fc
  0xa769fa74: add    $0x8,%esp
  0xa769fa77: vmovsd (%esp),%xmm0
  0xa769fa7c: vmovsd 0x8(%esp),%xmm1
  0xa769fa82: add    $0x10,%esp
  0xa769fa85: popf   
  0xa769fa86: popa   
  0xa769fa87: pop    %eax
  0xa769fa88: mov    %esp,%esi
  0xa769fa8a: sub    $0x4,%esp
  0xa769fa8d: mov    %ecx,(%esp)
  0xa769fa90: mov    0x28(%ebx),%ecx
  0xa769fa93: push   %eax
  0xa769fa94: jmp    *%ecx

AHE@0xb6674428: 0xa0000000 i2c: 0xa769fb40 c2i: 0xa769fbcd c2iUV: 0xa769fbac
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;)Ljava/lang/ref/Finalizer; (214 bytes generated)
c2i argument handler starts at 0xa769fbcd
  0xa769fb40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769fb43: mov    $0xa75b1ac0,%edi
  0xa769fb48: cmp    %edi,%eax
  0xa769fb4a: jbe    0xa769fb5d
  0xa769fb50: mov    $0xa7691ac0,%edi
  0xa769fb55: cmp    %edi,%eax
  0xa769fb57: jb     0xa769fb88
  0xa769fb5d: mov    $0xa75af400,%edi
  0xa769fb62: cmp    %edi,%eax
  0xa769fb64: jbe    0xa769fb77
  0xa769fb6a: mov    $0xa75b1728,%edi
  0xa769fb6f: cmp    %edi,%eax
  0xa769fb71: jb     0xa769fb88
  ;; i2c adapter must return to an interpreter frame
  0xa769fb77: push   $0xb75a2830
  0xa769fb7c: call   0xa769fb81
  0xa769fb81: pusha  
  0xa769fb82: call   0xb7052f32
  0xa769fb87: hlt    
  ;; } verify_i2ce 
  0xa769fb88: mov    %esp,%edi
  0xa769fb8a: and    $0xfffffff0,%esp
  0xa769fb8d: push   %eax
  0xa769fb8e: mov    %edi,%eax
  0xa769fb90: mov    0x30(%ebx),%edi
  0xa769fb93: mov    0x4(%eax),%ecx
  0xa769fb96: mov    %esp,%eax
  0xa769fb98: shr    $0xc,%eax
  0xa769fb9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769fba2: mov    %ebx,0x16c(%eax)
  0xa769fba8: mov    %ebx,%eax
  0xa769fbaa: jmp    *%edi
  0xa769fbac: mov    0x4(%ecx),%ebx
  0xa769fbaf: cmp    0x8(%eax),%ebx
  0xa769fbb2: mov    0x4(%eax),%ebx
  0xa769fbb5: jne    0xa769fbc8
  0xa769fbbb: cmpl   $0x0,0x34(%ebx)
  0xa769fbc2: je     0xa769fc07
  0xa769fbc8: jmp    0xa7692560
  0xa769fbcd: cmpl   $0x0,0x34(%ebx)
  0xa769fbd4: je     0xa769fc07
  0xa769fbda: mov    (%esp),%eax
  0xa769fbdd: pusha  
  0xa769fbde: pushf  
  0xa769fbdf: sub    $0x10,%esp
  0xa769fbe2: vmovsd %xmm0,(%esp)
  0xa769fbe7: vmovsd %xmm1,0x8(%esp)
  0xa769fbed: push   %eax
  0xa769fbee: push   %ebx
  0xa769fbef: call   0xb71d62fc
  0xa769fbf4: add    $0x8,%esp
  0xa769fbf7: vmovsd (%esp),%xmm0
  0xa769fbfc: vmovsd 0x8(%esp),%xmm1
  0xa769fc02: add    $0x10,%esp
  0xa769fc05: popf   
  0xa769fc06: popa   
  0xa769fc07: pop    %eax
  0xa769fc08: mov    %esp,%esi
  0xa769fc0a: sub    $0x4,%esp
  0xa769fc0d: mov    %ecx,(%esp)
  0xa769fc10: mov    0x28(%ebx),%ecx
  0xa769fc13: push   %eax
  0xa769fc14: jmp    *%ecx

AHE@0xb667444c: 0x i2c: 0xa769fcc0 c2i: 0xa769fd4a c2iUV: 0xa769fd29
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa769fd4a
  0xa769fcc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769fcc3: mov    $0xa75b1ac0,%edi
  0xa769fcc8: cmp    %edi,%eax
  0xa769fcca: jbe    0xa769fcdd
  0xa769fcd0: mov    $0xa7691ac0,%edi
  0xa769fcd5: cmp    %edi,%eax
  0xa769fcd7: jb     0xa769fd08
  0xa769fcdd: mov    $0xa75af400,%edi
  0xa769fce2: cmp    %edi,%eax
  0xa769fce4: jbe    0xa769fcf7
  0xa769fcea: mov    $0xa75b1728,%edi
  0xa769fcef: cmp    %edi,%eax
  0xa769fcf1: jb     0xa769fd08
  ;; i2c adapter must return to an interpreter frame
  0xa769fcf7: push   $0xb75a2830
  0xa769fcfc: call   0xa769fd01
  0xa769fd01: pusha  
  0xa769fd02: call   0xb7052f32
  0xa769fd07: hlt    
  ;; } verify_i2ce 
  0xa769fd08: mov    %esp,%edi
  0xa769fd0a: and    $0xfffffff0,%esp
  0xa769fd0d: push   %eax
  0xa769fd0e: mov    %edi,%eax
  0xa769fd10: mov    0x30(%ebx),%edi
  0xa769fd13: mov    %esp,%eax
  0xa769fd15: shr    $0xc,%eax
  0xa769fd18: mov    -0x486bdba0(,%eax,4),%eax
  0xa769fd1f: mov    %ebx,0x16c(%eax)
  0xa769fd25: mov    %ebx,%eax
  0xa769fd27: jmp    *%edi
  0xa769fd29: mov    0x4(%ecx),%ebx
  0xa769fd2c: cmp    0x8(%eax),%ebx
  0xa769fd2f: mov    0x4(%eax),%ebx
  0xa769fd32: jne    0xa769fd45
  0xa769fd38: cmpl   $0x0,0x34(%ebx)
  0xa769fd3f: je     0xa769fd84
  0xa769fd45: jmp    0xa7692560
  0xa769fd4a: cmpl   $0x0,0x34(%ebx)
  0xa769fd51: je     0xa769fd84
  0xa769fd57: mov    (%esp),%eax
  0xa769fd5a: pusha  
  0xa769fd5b: pushf  
  0xa769fd5c: sub    $0x10,%esp
  0xa769fd5f: vmovsd %xmm0,(%esp)
  0xa769fd64: vmovsd %xmm1,0x8(%esp)
  0xa769fd6a: push   %eax
  0xa769fd6b: push   %ebx
  0xa769fd6c: call   0xb71d62fc
  0xa769fd71: add    $0x8,%esp
  0xa769fd74: vmovsd (%esp),%xmm0
  0xa769fd79: vmovsd 0x8(%esp),%xmm1
  0xa769fd7f: add    $0x10,%esp
  0xa769fd82: popf   
  0xa769fd83: popa   
  0xa769fd84: pop    %eax
  0xa769fd85: mov    %esp,%esi
  0xa769fd87: sub    $0x0,%esp
  0xa769fd8a: mov    0x28(%ebx),%ecx
  0xa769fd8d: push   %eax
  0xa769fd8e: jmp    *%ecx

AHE@0xb6674470: 0xa0000000 i2c: 0xa769fe40 c2i: 0xa769fecd c2iUV: 0xa769feac
i2c argument handler #0 for: static (Ljava/lang/Runnable;)V (214 bytes generated)
c2i argument handler starts at 0xa769fecd
  0xa769fe40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769fe43: mov    $0xa75b1ac0,%edi
  0xa769fe48: cmp    %edi,%eax
  0xa769fe4a: jbe    0xa769fe5d
  0xa769fe50: mov    $0xa7691ac0,%edi
  0xa769fe55: cmp    %edi,%eax
  0xa769fe57: jb     0xa769fe88
  0xa769fe5d: mov    $0xa75af400,%edi
  0xa769fe62: cmp    %edi,%eax
  0xa769fe64: jbe    0xa769fe77
  0xa769fe6a: mov    $0xa75b1728,%edi
  0xa769fe6f: cmp    %edi,%eax
  0xa769fe71: jb     0xa769fe88
  ;; i2c adapter must return to an interpreter frame
  0xa769fe77: push   $0xb75a2830
  0xa769fe7c: call   0xa769fe81
  0xa769fe81: pusha  
  0xa769fe82: call   0xb7052f32
  0xa769fe87: hlt    
  ;; } verify_i2ce 
  0xa769fe88: mov    %esp,%edi
  0xa769fe8a: and    $0xfffffff0,%esp
  0xa769fe8d: push   %eax
  0xa769fe8e: mov    %edi,%eax
  0xa769fe90: mov    0x30(%ebx),%edi
  0xa769fe93: mov    0x4(%eax),%ecx
  0xa769fe96: mov    %esp,%eax
  0xa769fe98: shr    $0xc,%eax
  0xa769fe9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa769fea2: mov    %ebx,0x16c(%eax)
  0xa769fea8: mov    %ebx,%eax
  0xa769feaa: jmp    *%edi
  0xa769feac: mov    0x4(%ecx),%ebx
  0xa769feaf: cmp    0x8(%eax),%ebx
  0xa769feb2: mov    0x4(%eax),%ebx
  0xa769feb5: jne    0xa769fec8
  0xa769febb: cmpl   $0x0,0x34(%ebx)
  0xa769fec2: je     0xa769ff07
  0xa769fec8: jmp    0xa7692560
  0xa769fecd: cmpl   $0x0,0x34(%ebx)
  0xa769fed4: je     0xa769ff07
  0xa769feda: mov    (%esp),%eax
  0xa769fedd: pusha  
  0xa769fede: pushf  
  0xa769fedf: sub    $0x10,%esp
  0xa769fee2: vmovsd %xmm0,(%esp)
  0xa769fee7: vmovsd %xmm1,0x8(%esp)
  0xa769feed: push   %eax
  0xa769feee: push   %ebx
  0xa769feef: call   0xb71d62fc
  0xa769fef4: add    $0x8,%esp
  0xa769fef7: vmovsd (%esp),%xmm0
  0xa769fefc: vmovsd 0x8(%esp),%xmm1
  0xa769ff02: add    $0x10,%esp
  0xa769ff05: popf   
  0xa769ff06: popa   
  0xa769ff07: pop    %eax
  0xa769ff08: mov    %esp,%esi
  0xa769ff0a: sub    $0x4,%esp
  0xa769ff0d: mov    %ecx,(%esp)
  0xa769ff10: mov    0x28(%ebx),%ecx
  0xa769ff13: push   %eax
  0xa769ff14: jmp    *%ecx

AHE@0xb6674494: 0xaa000000 i2c: 0xa769ffc0 c2i: 0xa76a0050 c2iUV: 0xa76a002f
i2c argument handler #0 for: receiver (Lsun/misc/JavaLangAccess;)V (221 bytes generated)
c2i argument handler starts at 0xa76a0050
  0xa769ffc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa769ffc3: mov    $0xa75b1ac0,%edi
  0xa769ffc8: cmp    %edi,%eax
  0xa769ffca: jbe    0xa769ffdd
  0xa769ffd0: mov    $0xa7691ac0,%edi
  0xa769ffd5: cmp    %edi,%eax
  0xa769ffd7: jb     0xa76a0008
  0xa769ffdd: mov    $0xa75af400,%edi
  0xa769ffe2: cmp    %edi,%eax
  0xa769ffe4: jbe    0xa769fff7
  0xa769ffea: mov    $0xa75b1728,%edi
  0xa769ffef: cmp    %edi,%eax
  0xa769fff1: jb     0xa76a0008
  ;; i2c adapter must return to an interpreter frame
  0xa769fff7: push   $0xb75a2830
  0xa769fffc: call   0xa76a0001
  0xa76a0001: pusha  
  0xa76a0002: call   0xb7052f32
  0xa76a0007: hlt    
  ;; } verify_i2ce 
  0xa76a0008: mov    %esp,%edi
  0xa76a000a: and    $0xfffffff0,%esp
  0xa76a000d: push   %eax
  0xa76a000e: mov    %edi,%eax
  0xa76a0010: mov    0x30(%ebx),%edi
  0xa76a0013: mov    0x8(%eax),%ecx
  0xa76a0016: mov    0x4(%eax),%edx
  0xa76a0019: mov    %esp,%eax
  0xa76a001b: shr    $0xc,%eax
  0xa76a001e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a0025: mov    %ebx,0x16c(%eax)
  0xa76a002b: mov    %ebx,%eax
  0xa76a002d: jmp    *%edi
  0xa76a002f: mov    0x4(%ecx),%ebx
  0xa76a0032: cmp    0x8(%eax),%ebx
  0xa76a0035: mov    0x4(%eax),%ebx
  0xa76a0038: jne    0xa76a004b
  0xa76a003e: cmpl   $0x0,0x34(%ebx)
  0xa76a0045: je     0xa76a008a
  0xa76a004b: jmp    0xa7692560
  0xa76a0050: cmpl   $0x0,0x34(%ebx)
  0xa76a0057: je     0xa76a008a
  0xa76a005d: mov    (%esp),%eax
  0xa76a0060: pusha  
  0xa76a0061: pushf  
  0xa76a0062: sub    $0x10,%esp
  0xa76a0065: vmovsd %xmm0,(%esp)
  0xa76a006a: vmovsd %xmm1,0x8(%esp)
  0xa76a0070: push   %eax
  0xa76a0071: push   %ebx
  0xa76a0072: call   0xb71d62fc
  0xa76a0077: add    $0x8,%esp
  0xa76a007a: vmovsd (%esp),%xmm0
  0xa76a007f: vmovsd 0x8(%esp),%xmm1
  0xa76a0085: add    $0x10,%esp
  0xa76a0088: popf   
  0xa76a0089: popa   
  0xa76a008a: pop    %eax
  0xa76a008b: mov    %esp,%esi
  0xa76a008d: sub    $0x8,%esp
  0xa76a0090: mov    %ecx,0x4(%esp)
  0xa76a0094: mov    %edx,(%esp)
  0xa76a0097: mov    0x28(%ebx),%ecx
  0xa76a009a: push   %eax
  0xa76a009b: jmp    *%ecx

AHE@0xb66744b8: 0x i2c: 0xa76a0140 c2i: 0xa76a01ca c2iUV: 0xa76a01a9
i2c argument handler #0 for: static ()Ljava/lang/ref/ReferenceQueue; (208 bytes generated)
c2i argument handler starts at 0xa76a01ca
  0xa76a0140: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a0143: mov    $0xa75b1ac0,%edi
  0xa76a0148: cmp    %edi,%eax
  0xa76a014a: jbe    0xa76a015d
  0xa76a0150: mov    $0xa7691ac0,%edi
  0xa76a0155: cmp    %edi,%eax
  0xa76a0157: jb     0xa76a0188
  0xa76a015d: mov    $0xa75af400,%edi
  0xa76a0162: cmp    %edi,%eax
  0xa76a0164: jbe    0xa76a0177
  0xa76a016a: mov    $0xa75b1728,%edi
  0xa76a016f: cmp    %edi,%eax
  0xa76a0171: jb     0xa76a0188
  ;; i2c adapter must return to an interpreter frame
  0xa76a0177: push   $0xb75a2830
  0xa76a017c: call   0xa76a0181
  0xa76a0181: pusha  
  0xa76a0182: call   0xb7052f32
  0xa76a0187: hlt    
  ;; } verify_i2ce 
  0xa76a0188: mov    %esp,%edi
  0xa76a018a: and    $0xfffffff0,%esp
  0xa76a018d: push   %eax
  0xa76a018e: mov    %edi,%eax
  0xa76a0190: mov    0x30(%ebx),%edi
  0xa76a0193: mov    %esp,%eax
  0xa76a0195: shr    $0xc,%eax
  0xa76a0198: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a019f: mov    %ebx,0x16c(%eax)
  0xa76a01a5: mov    %ebx,%eax
  0xa76a01a7: jmp    *%edi
  0xa76a01a9: mov    0x4(%ecx),%ebx
  0xa76a01ac: cmp    0x8(%eax),%ebx
  0xa76a01af: mov    0x4(%eax),%ebx
  0xa76a01b2: jne    0xa76a01c5
  0xa76a01b8: cmpl   $0x0,0x34(%ebx)
  0xa76a01bf: je     0xa76a0204
  0xa76a01c5: jmp    0xa7692560
  0xa76a01ca: cmpl   $0x0,0x34(%ebx)
  0xa76a01d1: je     0xa76a0204
  0xa76a01d7: mov    (%esp),%eax
  0xa76a01da: pusha  
  0xa76a01db: pushf  
  0xa76a01dc: sub    $0x10,%esp
  0xa76a01df: vmovsd %xmm0,(%esp)
  0xa76a01e4: vmovsd %xmm1,0x8(%esp)
  0xa76a01ea: push   %eax
  0xa76a01eb: push   %ebx
  0xa76a01ec: call   0xb71d62fc
  0xa76a01f1: add    $0x8,%esp
  0xa76a01f4: vmovsd (%esp),%xmm0
  0xa76a01f9: vmovsd 0x8(%esp),%xmm1
  0xa76a01ff: add    $0x10,%esp
  0xa76a0202: popf   
  0xa76a0203: popa   
  0xa76a0204: pop    %eax
  0xa76a0205: mov    %esp,%esi
  0xa76a0207: sub    $0x0,%esp
  0xa76a020a: mov    0x28(%ebx),%ecx
  0xa76a020d: push   %eax
  0xa76a020e: jmp    *%ecx

AHE@0xb66744dc: 0xa0000000 i2c: 0xa76a02c0 c2i: 0xa76a034d c2iUV: 0xa76a032c
i2c argument handler #0 for: receiver ()Z (214 bytes generated)
c2i argument handler starts at 0xa76a034d
  0xa76a02c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a02c3: mov    $0xa75b1ac0,%edi
  0xa76a02c8: cmp    %edi,%eax
  0xa76a02ca: jbe    0xa76a02dd
  0xa76a02d0: mov    $0xa7691ac0,%edi
  0xa76a02d5: cmp    %edi,%eax
  0xa76a02d7: jb     0xa76a0308
  0xa76a02dd: mov    $0xa75af400,%edi
  0xa76a02e2: cmp    %edi,%eax
  0xa76a02e4: jbe    0xa76a02f7
  0xa76a02ea: mov    $0xa75b1728,%edi
  0xa76a02ef: cmp    %edi,%eax
  0xa76a02f1: jb     0xa76a0308
  ;; i2c adapter must return to an interpreter frame
  0xa76a02f7: push   $0xb75a2830
  0xa76a02fc: call   0xa76a0301
  0xa76a0301: pusha  
  0xa76a0302: call   0xb7052f32
  0xa76a0307: hlt    
  ;; } verify_i2ce 
  0xa76a0308: mov    %esp,%edi
  0xa76a030a: and    $0xfffffff0,%esp
  0xa76a030d: push   %eax
  0xa76a030e: mov    %edi,%eax
  0xa76a0310: mov    0x30(%ebx),%edi
  0xa76a0313: mov    0x4(%eax),%ecx
  0xa76a0316: mov    %esp,%eax
  0xa76a0318: shr    $0xc,%eax
  0xa76a031b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a0322: mov    %ebx,0x16c(%eax)
  0xa76a0328: mov    %ebx,%eax
  0xa76a032a: jmp    *%edi
  0xa76a032c: mov    0x4(%ecx),%ebx
  0xa76a032f: cmp    0x8(%eax),%ebx
  0xa76a0332: mov    0x4(%eax),%ebx
  0xa76a0335: jne    0xa76a0348
  0xa76a033b: cmpl   $0x0,0x34(%ebx)
  0xa76a0342: je     0xa76a0387
  0xa76a0348: jmp    0xa7692560
  0xa76a034d: cmpl   $0x0,0x34(%ebx)
  0xa76a0354: je     0xa76a0387
  0xa76a035a: mov    (%esp),%eax
  0xa76a035d: pusha  
  0xa76a035e: pushf  
  0xa76a035f: sub    $0x10,%esp
  0xa76a0362: vmovsd %xmm0,(%esp)
  0xa76a0367: vmovsd %xmm1,0x8(%esp)
  0xa76a036d: push   %eax
  0xa76a036e: push   %ebx
  0xa76a036f: call   0xb71d62fc
  0xa76a0374: add    $0x8,%esp
  0xa76a0377: vmovsd (%esp),%xmm0
  0xa76a037c: vmovsd 0x8(%esp),%xmm1
  0xa76a0382: add    $0x10,%esp
  0xa76a0385: popf   
  0xa76a0386: popa   
  0xa76a0387: pop    %eax
  0xa76a0388: mov    %esp,%esi
  0xa76a038a: sub    $0x4,%esp
  0xa76a038d: mov    %ecx,(%esp)
  0xa76a0390: mov    0x28(%ebx),%ecx
  0xa76a0393: push   %eax
  0xa76a0394: jmp    *%ecx

AHE@0xb6674500: 0x i2c: 0xa76a0440 c2i: 0xa76a04ca c2iUV: 0xa76a04a9
i2c argument handler #0 for: static ()Ljava/lang/ref/ReferenceQueue; (208 bytes generated)
c2i argument handler starts at 0xa76a04ca
  0xa76a0440: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a0443: mov    $0xa75b1ac0,%edi
  0xa76a0448: cmp    %edi,%eax
  0xa76a044a: jbe    0xa76a045d
  0xa76a0450: mov    $0xa7691ac0,%edi
  0xa76a0455: cmp    %edi,%eax
  0xa76a0457: jb     0xa76a0488
  0xa76a045d: mov    $0xa75af400,%edi
  0xa76a0462: cmp    %edi,%eax
  0xa76a0464: jbe    0xa76a0477
  0xa76a046a: mov    $0xa75b1728,%edi
  0xa76a046f: cmp    %edi,%eax
  0xa76a0471: jb     0xa76a0488
  ;; i2c adapter must return to an interpreter frame
  0xa76a0477: push   $0xb75a2830
  0xa76a047c: call   0xa76a0481
  0xa76a0481: pusha  
  0xa76a0482: call   0xb7052f32
  0xa76a0487: hlt    
  ;; } verify_i2ce 
  0xa76a0488: mov    %esp,%edi
  0xa76a048a: and    $0xfffffff0,%esp
  0xa76a048d: push   %eax
  0xa76a048e: mov    %edi,%eax
  0xa76a0490: mov    0x30(%ebx),%edi
  0xa76a0493: mov    %esp,%eax
  0xa76a0495: shr    $0xc,%eax
  0xa76a0498: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a049f: mov    %ebx,0x16c(%eax)
  0xa76a04a5: mov    %ebx,%eax
  0xa76a04a7: jmp    *%edi
  0xa76a04a9: mov    0x4(%ecx),%ebx
  0xa76a04ac: cmp    0x8(%eax),%ebx
  0xa76a04af: mov    0x4(%eax),%ebx
  0xa76a04b2: jne    0xa76a04c5
  0xa76a04b8: cmpl   $0x0,0x34(%ebx)
  0xa76a04bf: je     0xa76a0504
  0xa76a04c5: jmp    0xa7692560
  0xa76a04ca: cmpl   $0x0,0x34(%ebx)
  0xa76a04d1: je     0xa76a0504
  0xa76a04d7: mov    (%esp),%eax
  0xa76a04da: pusha  
  0xa76a04db: pushf  
  0xa76a04dc: sub    $0x10,%esp
  0xa76a04df: vmovsd %xmm0,(%esp)
  0xa76a04e4: vmovsd %xmm1,0x8(%esp)
  0xa76a04ea: push   %eax
  0xa76a04eb: push   %ebx
  0xa76a04ec: call   0xb71d62fc
  0xa76a04f1: add    $0x8,%esp
  0xa76a04f4: vmovsd (%esp),%xmm0
  0xa76a04f9: vmovsd 0x8(%esp),%xmm1
  0xa76a04ff: add    $0x10,%esp
  0xa76a0502: popf   
  0xa76a0503: popa   
  0xa76a0504: pop    %eax
  0xa76a0505: mov    %esp,%esi
  0xa76a0507: sub    $0x0,%esp
  0xa76a050a: mov    0x28(%ebx),%ecx
  0xa76a050d: push   %eax
  0xa76a050e: jmp    *%ecx

AHE@0xb6674524: 0x i2c: 0xa76a05c0 c2i: 0xa76a064a c2iUV: 0xa76a0629
i2c argument handler #0 for: static ()Ljava/lang/ref/Finalizer; (208 bytes generated)
c2i argument handler starts at 0xa76a064a
  0xa76a05c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a05c3: mov    $0xa75b1ac0,%edi
  0xa76a05c8: cmp    %edi,%eax
  0xa76a05ca: jbe    0xa76a05dd
  0xa76a05d0: mov    $0xa7691ac0,%edi
  0xa76a05d5: cmp    %edi,%eax
  0xa76a05d7: jb     0xa76a0608
  0xa76a05dd: mov    $0xa75af400,%edi
  0xa76a05e2: cmp    %edi,%eax
  0xa76a05e4: jbe    0xa76a05f7
  0xa76a05ea: mov    $0xa75b1728,%edi
  0xa76a05ef: cmp    %edi,%eax
  0xa76a05f1: jb     0xa76a0608
  ;; i2c adapter must return to an interpreter frame
  0xa76a05f7: push   $0xb75a2830
  0xa76a05fc: call   0xa76a0601
  0xa76a0601: pusha  
  0xa76a0602: call   0xb7052f32
  0xa76a0607: hlt    
  ;; } verify_i2ce 
  0xa76a0608: mov    %esp,%edi
  0xa76a060a: and    $0xfffffff0,%esp
  0xa76a060d: push   %eax
  0xa76a060e: mov    %edi,%eax
  0xa76a0610: mov    0x30(%ebx),%edi
  0xa76a0613: mov    %esp,%eax
  0xa76a0615: shr    $0xc,%eax
  0xa76a0618: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a061f: mov    %ebx,0x16c(%eax)
  0xa76a0625: mov    %ebx,%eax
  0xa76a0627: jmp    *%edi
  0xa76a0629: mov    0x4(%ecx),%ebx
  0xa76a062c: cmp    0x8(%eax),%ebx
  0xa76a062f: mov    0x4(%eax),%ebx
  0xa76a0632: jne    0xa76a0645
  0xa76a0638: cmpl   $0x0,0x34(%ebx)
  0xa76a063f: je     0xa76a0684
  0xa76a0645: jmp    0xa7692560
  0xa76a064a: cmpl   $0x0,0x34(%ebx)
  0xa76a0651: je     0xa76a0684
  0xa76a0657: mov    (%esp),%eax
  0xa76a065a: pusha  
  0xa76a065b: pushf  
  0xa76a065c: sub    $0x10,%esp
  0xa76a065f: vmovsd %xmm0,(%esp)
  0xa76a0664: vmovsd %xmm1,0x8(%esp)
  0xa76a066a: push   %eax
  0xa76a066b: push   %ebx
  0xa76a066c: call   0xb71d62fc
  0xa76a0671: add    $0x8,%esp
  0xa76a0674: vmovsd (%esp),%xmm0
  0xa76a0679: vmovsd 0x8(%esp),%xmm1
  0xa76a067f: add    $0x10,%esp
  0xa76a0682: popf   
  0xa76a0683: popa   
  0xa76a0684: pop    %eax
  0xa76a0685: mov    %esp,%esi
  0xa76a0687: sub    $0x0,%esp
  0xa76a068a: mov    0x28(%ebx),%ecx
  0xa76a068d: push   %eax
  0xa76a068e: jmp    *%ecx

AHE@0xb6674548: 0x i2c: 0xa76a0740 c2i: 0xa76a07ca c2iUV: 0xa76a07a9
i2c argument handler #0 for: static ()Ljava/lang/Object; (208 bytes generated)
c2i argument handler starts at 0xa76a07ca
  0xa76a0740: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a0743: mov    $0xa75b1ac0,%edi
  0xa76a0748: cmp    %edi,%eax
  0xa76a074a: jbe    0xa76a075d
  0xa76a0750: mov    $0xa7691ac0,%edi
  0xa76a0755: cmp    %edi,%eax
  0xa76a0757: jb     0xa76a0788
  0xa76a075d: mov    $0xa75af400,%edi
  0xa76a0762: cmp    %edi,%eax
  0xa76a0764: jbe    0xa76a0777
  0xa76a076a: mov    $0xa75b1728,%edi
  0xa76a076f: cmp    %edi,%eax
  0xa76a0771: jb     0xa76a0788
  ;; i2c adapter must return to an interpreter frame
  0xa76a0777: push   $0xb75a2830
  0xa76a077c: call   0xa76a0781
  0xa76a0781: pusha  
  0xa76a0782: call   0xb7052f32
  0xa76a0787: hlt    
  ;; } verify_i2ce 
  0xa76a0788: mov    %esp,%edi
  0xa76a078a: and    $0xfffffff0,%esp
  0xa76a078d: push   %eax
  0xa76a078e: mov    %edi,%eax
  0xa76a0790: mov    0x30(%ebx),%edi
  0xa76a0793: mov    %esp,%eax
  0xa76a0795: shr    $0xc,%eax
  0xa76a0798: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a079f: mov    %ebx,0x16c(%eax)
  0xa76a07a5: mov    %ebx,%eax
  0xa76a07a7: jmp    *%edi
  0xa76a07a9: mov    0x4(%ecx),%ebx
  0xa76a07ac: cmp    0x8(%eax),%ebx
  0xa76a07af: mov    0x4(%eax),%ebx
  0xa76a07b2: jne    0xa76a07c5
  0xa76a07b8: cmpl   $0x0,0x34(%ebx)
  0xa76a07bf: je     0xa76a0804
  0xa76a07c5: jmp    0xa7692560
  0xa76a07ca: cmpl   $0x0,0x34(%ebx)
  0xa76a07d1: je     0xa76a0804
  0xa76a07d7: mov    (%esp),%eax
  0xa76a07da: pusha  
  0xa76a07db: pushf  
  0xa76a07dc: sub    $0x10,%esp
  0xa76a07df: vmovsd %xmm0,(%esp)
  0xa76a07e4: vmovsd %xmm1,0x8(%esp)
  0xa76a07ea: push   %eax
  0xa76a07eb: push   %ebx
  0xa76a07ec: call   0xb71d62fc
  0xa76a07f1: add    $0x8,%esp
  0xa76a07f4: vmovsd (%esp),%xmm0
  0xa76a07f9: vmovsd 0x8(%esp),%xmm1
  0xa76a07ff: add    $0x10,%esp
  0xa76a0802: popf   
  0xa76a0803: popa   
  0xa76a0804: pop    %eax
  0xa76a0805: mov    %esp,%esi
  0xa76a0807: sub    $0x0,%esp
  0xa76a080a: mov    0x28(%ebx),%ecx
  0xa76a080d: push   %eax
  0xa76a080e: jmp    *%ecx

AHE@0xb667456c: 0xaa000000 i2c: 0xa76a08c0 c2i: 0xa76a0950 c2iUV: 0xa76a092f
i2c argument handler #0 for: static (Ljava/lang/ref/Finalizer;Lsun/misc/JavaLangAccess;)V (221 bytes generated)
c2i argument handler starts at 0xa76a0950
  0xa76a08c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a08c3: mov    $0xa75b1ac0,%edi
  0xa76a08c8: cmp    %edi,%eax
  0xa76a08ca: jbe    0xa76a08dd
  0xa76a08d0: mov    $0xa7691ac0,%edi
  0xa76a08d5: cmp    %edi,%eax
  0xa76a08d7: jb     0xa76a0908
  0xa76a08dd: mov    $0xa75af400,%edi
  0xa76a08e2: cmp    %edi,%eax
  0xa76a08e4: jbe    0xa76a08f7
  0xa76a08ea: mov    $0xa75b1728,%edi
  0xa76a08ef: cmp    %edi,%eax
  0xa76a08f1: jb     0xa76a0908
  ;; i2c adapter must return to an interpreter frame
  0xa76a08f7: push   $0xb75a2830
  0xa76a08fc: call   0xa76a0901
  0xa76a0901: pusha  
  0xa76a0902: call   0xb7052f32
  0xa76a0907: hlt    
  ;; } verify_i2ce 
  0xa76a0908: mov    %esp,%edi
  0xa76a090a: and    $0xfffffff0,%esp
  0xa76a090d: push   %eax
  0xa76a090e: mov    %edi,%eax
  0xa76a0910: mov    0x30(%ebx),%edi
  0xa76a0913: mov    0x8(%eax),%ecx
  0xa76a0916: mov    0x4(%eax),%edx
  0xa76a0919: mov    %esp,%eax
  0xa76a091b: shr    $0xc,%eax
  0xa76a091e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a0925: mov    %ebx,0x16c(%eax)
  0xa76a092b: mov    %ebx,%eax
  0xa76a092d: jmp    *%edi
  0xa76a092f: mov    0x4(%ecx),%ebx
  0xa76a0932: cmp    0x8(%eax),%ebx
  0xa76a0935: mov    0x4(%eax),%ebx
  0xa76a0938: jne    0xa76a094b
  0xa76a093e: cmpl   $0x0,0x34(%ebx)
  0xa76a0945: je     0xa76a098a
  0xa76a094b: jmp    0xa7692560
  0xa76a0950: cmpl   $0x0,0x34(%ebx)
  0xa76a0957: je     0xa76a098a
  0xa76a095d: mov    (%esp),%eax
  0xa76a0960: pusha  
  0xa76a0961: pushf  
  0xa76a0962: sub    $0x10,%esp
  0xa76a0965: vmovsd %xmm0,(%esp)
  0xa76a096a: vmovsd %xmm1,0x8(%esp)
  0xa76a0970: push   %eax
  0xa76a0971: push   %ebx
  0xa76a0972: call   0xb71d62fc
  0xa76a0977: add    $0x8,%esp
  0xa76a097a: vmovsd (%esp),%xmm0
  0xa76a097f: vmovsd 0x8(%esp),%xmm1
  0xa76a0985: add    $0x10,%esp
  0xa76a0988: popf   
  0xa76a0989: popa   
  0xa76a098a: pop    %eax
  0xa76a098b: mov    %esp,%esi
  0xa76a098d: sub    $0x8,%esp
  0xa76a0990: mov    %ecx,0x4(%esp)
  0xa76a0994: mov    %edx,(%esp)
  0xa76a0997: mov    0x28(%ebx),%ecx
  0xa76a099a: push   %eax
  0xa76a099b: jmp    *%ecx

AHE@0xb6674590: 0xa0000000 i2c: 0xa76a0a40 c2i: 0xa76a0acd c2iUV: 0xa76a0aac
i2c argument handler #0 for: static (Ljava/lang/Object;)V (214 bytes generated)
c2i argument handler starts at 0xa76a0acd
  0xa76a0a40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a0a43: mov    $0xa75b1ac0,%edi
  0xa76a0a48: cmp    %edi,%eax
  0xa76a0a4a: jbe    0xa76a0a5d
  0xa76a0a50: mov    $0xa7691ac0,%edi
  0xa76a0a55: cmp    %edi,%eax
  0xa76a0a57: jb     0xa76a0a88
  0xa76a0a5d: mov    $0xa75af400,%edi
  0xa76a0a62: cmp    %edi,%eax
  0xa76a0a64: jbe    0xa76a0a77
  0xa76a0a6a: mov    $0xa75b1728,%edi
  0xa76a0a6f: cmp    %edi,%eax
  0xa76a0a71: jb     0xa76a0a88
  ;; i2c adapter must return to an interpreter frame
  0xa76a0a77: push   $0xb75a2830
  0xa76a0a7c: call   0xa76a0a81
  0xa76a0a81: pusha  
  0xa76a0a82: call   0xb7052f32
  0xa76a0a87: hlt    
  ;; } verify_i2ce 
  0xa76a0a88: mov    %esp,%edi
  0xa76a0a8a: and    $0xfffffff0,%esp
  0xa76a0a8d: push   %eax
  0xa76a0a8e: mov    %edi,%eax
  0xa76a0a90: mov    0x30(%ebx),%edi
  0xa76a0a93: mov    0x4(%eax),%ecx
  0xa76a0a96: mov    %esp,%eax
  0xa76a0a98: shr    $0xc,%eax
  0xa76a0a9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a0aa2: mov    %ebx,0x16c(%eax)
  0xa76a0aa8: mov    %ebx,%eax
  0xa76a0aaa: jmp    *%edi
  0xa76a0aac: mov    0x4(%ecx),%ebx
  0xa76a0aaf: cmp    0x8(%eax),%ebx
  0xa76a0ab2: mov    0x4(%eax),%ebx
  0xa76a0ab5: jne    0xa76a0ac8
  0xa76a0abb: cmpl   $0x0,0x34(%ebx)
  0xa76a0ac2: je     0xa76a0b07
  0xa76a0ac8: jmp    0xa7692560
  0xa76a0acd: cmpl   $0x0,0x34(%ebx)
  0xa76a0ad4: je     0xa76a0b07
  0xa76a0ada: mov    (%esp),%eax
  0xa76a0add: pusha  
  0xa76a0ade: pushf  
  0xa76a0adf: sub    $0x10,%esp
  0xa76a0ae2: vmovsd %xmm0,(%esp)
  0xa76a0ae7: vmovsd %xmm1,0x8(%esp)
  0xa76a0aed: push   %eax
  0xa76a0aee: push   %ebx
  0xa76a0aef: call   0xb71d62fc
  0xa76a0af4: add    $0x8,%esp
  0xa76a0af7: vmovsd (%esp),%xmm0
  0xa76a0afc: vmovsd 0x8(%esp),%xmm1
  0xa76a0b02: add    $0x10,%esp
  0xa76a0b05: popf   
  0xa76a0b06: popa   
  0xa76a0b07: pop    %eax
  0xa76a0b08: mov    %esp,%esi
  0xa76a0b0a: sub    $0x4,%esp
  0xa76a0b0d: mov    %ecx,(%esp)
  0xa76a0b10: mov    0x28(%ebx),%ecx
  0xa76a0b13: push   %eax
  0xa76a0b14: jmp    *%ecx

AHE@0xb66745b4: 0x i2c: 0xa76a0bc0 c2i: 0xa76a0c4a c2iUV: 0xa76a0c29
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76a0c4a
  0xa76a0bc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a0bc3: mov    $0xa75b1ac0,%edi
  0xa76a0bc8: cmp    %edi,%eax
  0xa76a0bca: jbe    0xa76a0bdd
  0xa76a0bd0: mov    $0xa7691ac0,%edi
  0xa76a0bd5: cmp    %edi,%eax
  0xa76a0bd7: jb     0xa76a0c08
  0xa76a0bdd: mov    $0xa75af400,%edi
  0xa76a0be2: cmp    %edi,%eax
  0xa76a0be4: jbe    0xa76a0bf7
  0xa76a0bea: mov    $0xa75b1728,%edi
  0xa76a0bef: cmp    %edi,%eax
  0xa76a0bf1: jb     0xa76a0c08
  ;; i2c adapter must return to an interpreter frame
  0xa76a0bf7: push   $0xb75a2830
  0xa76a0bfc: call   0xa76a0c01
  0xa76a0c01: pusha  
  0xa76a0c02: call   0xb7052f32
  0xa76a0c07: hlt    
  ;; } verify_i2ce 
  0xa76a0c08: mov    %esp,%edi
  0xa76a0c0a: and    $0xfffffff0,%esp
  0xa76a0c0d: push   %eax
  0xa76a0c0e: mov    %edi,%eax
  0xa76a0c10: mov    0x30(%ebx),%edi
  0xa76a0c13: mov    %esp,%eax
  0xa76a0c15: shr    $0xc,%eax
  0xa76a0c18: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a0c1f: mov    %ebx,0x16c(%eax)
  0xa76a0c25: mov    %ebx,%eax
  0xa76a0c27: jmp    *%edi
  0xa76a0c29: mov    0x4(%ecx),%ebx
  0xa76a0c2c: cmp    0x8(%eax),%ebx
  0xa76a0c2f: mov    0x4(%eax),%ebx
  0xa76a0c32: jne    0xa76a0c45
  0xa76a0c38: cmpl   $0x0,0x34(%ebx)
  0xa76a0c3f: je     0xa76a0c84
  0xa76a0c45: jmp    0xa7692560
  0xa76a0c4a: cmpl   $0x0,0x34(%ebx)
  0xa76a0c51: je     0xa76a0c84
  0xa76a0c57: mov    (%esp),%eax
  0xa76a0c5a: pusha  
  0xa76a0c5b: pushf  
  0xa76a0c5c: sub    $0x10,%esp
  0xa76a0c5f: vmovsd %xmm0,(%esp)
  0xa76a0c64: vmovsd %xmm1,0x8(%esp)
  0xa76a0c6a: push   %eax
  0xa76a0c6b: push   %ebx
  0xa76a0c6c: call   0xb71d62fc
  0xa76a0c71: add    $0x8,%esp
  0xa76a0c74: vmovsd (%esp),%xmm0
  0xa76a0c79: vmovsd 0x8(%esp),%xmm1
  0xa76a0c7f: add    $0x10,%esp
  0xa76a0c82: popf   
  0xa76a0c83: popa   
  0xa76a0c84: pop    %eax
  0xa76a0c85: mov    %esp,%esi
  0xa76a0c87: sub    $0x0,%esp
  0xa76a0c8a: mov    0x28(%ebx),%ecx
  0xa76a0c8d: push   %eax
  0xa76a0c8e: jmp    *%ecx

AHE@0xb66745d8: 0xa0000000 i2c: 0xa76a0d40 c2i: 0xa76a0dcd c2iUV: 0xa76a0dac
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76a0dcd
  0xa76a0d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a0d43: mov    $0xa75b1ac0,%edi
  0xa76a0d48: cmp    %edi,%eax
  0xa76a0d4a: jbe    0xa76a0d5d
  0xa76a0d50: mov    $0xa7691ac0,%edi
  0xa76a0d55: cmp    %edi,%eax
  0xa76a0d57: jb     0xa76a0d88
  0xa76a0d5d: mov    $0xa75af400,%edi
  0xa76a0d62: cmp    %edi,%eax
  0xa76a0d64: jbe    0xa76a0d77
  0xa76a0d6a: mov    $0xa75b1728,%edi
  0xa76a0d6f: cmp    %edi,%eax
  0xa76a0d71: jb     0xa76a0d88
  ;; i2c adapter must return to an interpreter frame
  0xa76a0d77: push   $0xb75a2830
  0xa76a0d7c: call   0xa76a0d81
  0xa76a0d81: pusha  
  0xa76a0d82: call   0xb7052f32
  0xa76a0d87: hlt    
  ;; } verify_i2ce 
  0xa76a0d88: mov    %esp,%edi
  0xa76a0d8a: and    $0xfffffff0,%esp
  0xa76a0d8d: push   %eax
  0xa76a0d8e: mov    %edi,%eax
  0xa76a0d90: mov    0x30(%ebx),%edi
  0xa76a0d93: mov    0x4(%eax),%ecx
  0xa76a0d96: mov    %esp,%eax
  0xa76a0d98: shr    $0xc,%eax
  0xa76a0d9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a0da2: mov    %ebx,0x16c(%eax)
  0xa76a0da8: mov    %ebx,%eax
  0xa76a0daa: jmp    *%edi
  0xa76a0dac: mov    0x4(%ecx),%ebx
  0xa76a0daf: cmp    0x8(%eax),%ebx
  0xa76a0db2: mov    0x4(%eax),%ebx
  0xa76a0db5: jne    0xa76a0dc8
  0xa76a0dbb: cmpl   $0x0,0x34(%ebx)
  0xa76a0dc2: je     0xa76a0e07
  0xa76a0dc8: jmp    0xa7692560
  0xa76a0dcd: cmpl   $0x0,0x34(%ebx)
  0xa76a0dd4: je     0xa76a0e07
  0xa76a0dda: mov    (%esp),%eax
  0xa76a0ddd: pusha  
  0xa76a0dde: pushf  
  0xa76a0ddf: sub    $0x10,%esp
  0xa76a0de2: vmovsd %xmm0,(%esp)
  0xa76a0de7: vmovsd %xmm1,0x8(%esp)
  0xa76a0ded: push   %eax
  0xa76a0dee: push   %ebx
  0xa76a0def: call   0xb71d62fc
  0xa76a0df4: add    $0x8,%esp
  0xa76a0df7: vmovsd (%esp),%xmm0
  0xa76a0dfc: vmovsd 0x8(%esp),%xmm1
  0xa76a0e02: add    $0x10,%esp
  0xa76a0e05: popf   
  0xa76a0e06: popa   
  0xa76a0e07: pop    %eax
  0xa76a0e08: mov    %esp,%esi
  0xa76a0e0a: sub    $0x4,%esp
  0xa76a0e0d: mov    %ecx,(%esp)
  0xa76a0e10: mov    0x28(%ebx),%ecx
  0xa76a0e13: push   %eax
  0xa76a0e14: jmp    *%ecx

AHE@0xb66745fc: 0xa0000000 i2c: 0xa76a0ec0 c2i: 0xa76a0f4d c2iUV: 0xa76a0f2c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76a0f4d
  0xa76a0ec0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a0ec3: mov    $0xa75b1ac0,%edi
  0xa76a0ec8: cmp    %edi,%eax
  0xa76a0eca: jbe    0xa76a0edd
  0xa76a0ed0: mov    $0xa7691ac0,%edi
  0xa76a0ed5: cmp    %edi,%eax
  0xa76a0ed7: jb     0xa76a0f08
  0xa76a0edd: mov    $0xa75af400,%edi
  0xa76a0ee2: cmp    %edi,%eax
  0xa76a0ee4: jbe    0xa76a0ef7
  0xa76a0eea: mov    $0xa75b1728,%edi
  0xa76a0eef: cmp    %edi,%eax
  0xa76a0ef1: jb     0xa76a0f08
  ;; i2c adapter must return to an interpreter frame
  0xa76a0ef7: push   $0xb75a2830
  0xa76a0efc: call   0xa76a0f01
  0xa76a0f01: pusha  
  0xa76a0f02: call   0xb7052f32
  0xa76a0f07: hlt    
  ;; } verify_i2ce 
  0xa76a0f08: mov    %esp,%edi
  0xa76a0f0a: and    $0xfffffff0,%esp
  0xa76a0f0d: push   %eax
  0xa76a0f0e: mov    %edi,%eax
  0xa76a0f10: mov    0x30(%ebx),%edi
  0xa76a0f13: mov    0x4(%eax),%ecx
  0xa76a0f16: mov    %esp,%eax
  0xa76a0f18: shr    $0xc,%eax
  0xa76a0f1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a0f22: mov    %ebx,0x16c(%eax)
  0xa76a0f28: mov    %ebx,%eax
  0xa76a0f2a: jmp    *%edi
  0xa76a0f2c: mov    0x4(%ecx),%ebx
  0xa76a0f2f: cmp    0x8(%eax),%ebx
  0xa76a0f32: mov    0x4(%eax),%ebx
  0xa76a0f35: jne    0xa76a0f48
  0xa76a0f3b: cmpl   $0x0,0x34(%ebx)
  0xa76a0f42: je     0xa76a0f87
  0xa76a0f48: jmp    0xa7692560
  0xa76a0f4d: cmpl   $0x0,0x34(%ebx)
  0xa76a0f54: je     0xa76a0f87
  0xa76a0f5a: mov    (%esp),%eax
  0xa76a0f5d: pusha  
  0xa76a0f5e: pushf  
  0xa76a0f5f: sub    $0x10,%esp
  0xa76a0f62: vmovsd %xmm0,(%esp)
  0xa76a0f67: vmovsd %xmm1,0x8(%esp)
  0xa76a0f6d: push   %eax
  0xa76a0f6e: push   %ebx
  0xa76a0f6f: call   0xb71d62fc
  0xa76a0f74: add    $0x8,%esp
  0xa76a0f77: vmovsd (%esp),%xmm0
  0xa76a0f7c: vmovsd 0x8(%esp),%xmm1
  0xa76a0f82: add    $0x10,%esp
  0xa76a0f85: popf   
  0xa76a0f86: popa   
  0xa76a0f87: pop    %eax
  0xa76a0f88: mov    %esp,%esi
  0xa76a0f8a: sub    $0x4,%esp
  0xa76a0f8d: mov    %ecx,(%esp)
  0xa76a0f90: mov    0x28(%ebx),%ecx
  0xa76a0f93: push   %eax
  0xa76a0f94: jmp    *%ecx

AHE@0xb6674620: 0x i2c: 0xa76a1040 c2i: 0xa76a10ca c2iUV: 0xa76a10a9
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76a10ca
  0xa76a1040: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1043: mov    $0xa75b1ac0,%edi
  0xa76a1048: cmp    %edi,%eax
  0xa76a104a: jbe    0xa76a105d
  0xa76a1050: mov    $0xa7691ac0,%edi
  0xa76a1055: cmp    %edi,%eax
  0xa76a1057: jb     0xa76a1088
  0xa76a105d: mov    $0xa75af400,%edi
  0xa76a1062: cmp    %edi,%eax
  0xa76a1064: jbe    0xa76a1077
  0xa76a106a: mov    $0xa75b1728,%edi
  0xa76a106f: cmp    %edi,%eax
  0xa76a1071: jb     0xa76a1088
  ;; i2c adapter must return to an interpreter frame
  0xa76a1077: push   $0xb75a2830
  0xa76a107c: call   0xa76a1081
  0xa76a1081: pusha  
  0xa76a1082: call   0xb7052f32
  0xa76a1087: hlt    
  ;; } verify_i2ce 
  0xa76a1088: mov    %esp,%edi
  0xa76a108a: and    $0xfffffff0,%esp
  0xa76a108d: push   %eax
  0xa76a108e: mov    %edi,%eax
  0xa76a1090: mov    0x30(%ebx),%edi
  0xa76a1093: mov    %esp,%eax
  0xa76a1095: shr    $0xc,%eax
  0xa76a1098: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a109f: mov    %ebx,0x16c(%eax)
  0xa76a10a5: mov    %ebx,%eax
  0xa76a10a7: jmp    *%edi
  0xa76a10a9: mov    0x4(%ecx),%ebx
  0xa76a10ac: cmp    0x8(%eax),%ebx
  0xa76a10af: mov    0x4(%eax),%ebx
  0xa76a10b2: jne    0xa76a10c5
  0xa76a10b8: cmpl   $0x0,0x34(%ebx)
  0xa76a10bf: je     0xa76a1104
  0xa76a10c5: jmp    0xa7692560
  0xa76a10ca: cmpl   $0x0,0x34(%ebx)
  0xa76a10d1: je     0xa76a1104
  0xa76a10d7: mov    (%esp),%eax
  0xa76a10da: pusha  
  0xa76a10db: pushf  
  0xa76a10dc: sub    $0x10,%esp
  0xa76a10df: vmovsd %xmm0,(%esp)
  0xa76a10e4: vmovsd %xmm1,0x8(%esp)
  0xa76a10ea: push   %eax
  0xa76a10eb: push   %ebx
  0xa76a10ec: call   0xb71d62fc
  0xa76a10f1: add    $0x8,%esp
  0xa76a10f4: vmovsd (%esp),%xmm0
  0xa76a10f9: vmovsd 0x8(%esp),%xmm1
  0xa76a10ff: add    $0x10,%esp
  0xa76a1102: popf   
  0xa76a1103: popa   
  0xa76a1104: pop    %eax
  0xa76a1105: mov    %esp,%esi
  0xa76a1107: sub    $0x0,%esp
  0xa76a110a: mov    0x28(%ebx),%ecx
  0xa76a110d: push   %eax
  0xa76a110e: jmp    *%ecx

AHE@0xb6674644: 0xaa000000 i2c: 0xa76a11c0 c2i: 0xa76a1250 c2iUV: 0xa76a122f
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (221 bytes generated)
c2i argument handler starts at 0xa76a1250
  0xa76a11c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a11c3: mov    $0xa75b1ac0,%edi
  0xa76a11c8: cmp    %edi,%eax
  0xa76a11ca: jbe    0xa76a11dd
  0xa76a11d0: mov    $0xa7691ac0,%edi
  0xa76a11d5: cmp    %edi,%eax
  0xa76a11d7: jb     0xa76a1208
  0xa76a11dd: mov    $0xa75af400,%edi
  0xa76a11e2: cmp    %edi,%eax
  0xa76a11e4: jbe    0xa76a11f7
  0xa76a11ea: mov    $0xa75b1728,%edi
  0xa76a11ef: cmp    %edi,%eax
  0xa76a11f1: jb     0xa76a1208
  ;; i2c adapter must return to an interpreter frame
  0xa76a11f7: push   $0xb75a2830
  0xa76a11fc: call   0xa76a1201
  0xa76a1201: pusha  
  0xa76a1202: call   0xb7052f32
  0xa76a1207: hlt    
  ;; } verify_i2ce 
  0xa76a1208: mov    %esp,%edi
  0xa76a120a: and    $0xfffffff0,%esp
  0xa76a120d: push   %eax
  0xa76a120e: mov    %edi,%eax
  0xa76a1210: mov    0x30(%ebx),%edi
  0xa76a1213: mov    0x8(%eax),%ecx
  0xa76a1216: mov    0x4(%eax),%edx
  0xa76a1219: mov    %esp,%eax
  0xa76a121b: shr    $0xc,%eax
  0xa76a121e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a1225: mov    %ebx,0x16c(%eax)
  0xa76a122b: mov    %ebx,%eax
  0xa76a122d: jmp    *%edi
  0xa76a122f: mov    0x4(%ecx),%ebx
  0xa76a1232: cmp    0x8(%eax),%ebx
  0xa76a1235: mov    0x4(%eax),%ebx
  0xa76a1238: jne    0xa76a124b
  0xa76a123e: cmpl   $0x0,0x34(%ebx)
  0xa76a1245: je     0xa76a128a
  0xa76a124b: jmp    0xa7692560
  0xa76a1250: cmpl   $0x0,0x34(%ebx)
  0xa76a1257: je     0xa76a128a
  0xa76a125d: mov    (%esp),%eax
  0xa76a1260: pusha  
  0xa76a1261: pushf  
  0xa76a1262: sub    $0x10,%esp
  0xa76a1265: vmovsd %xmm0,(%esp)
  0xa76a126a: vmovsd %xmm1,0x8(%esp)
  0xa76a1270: push   %eax
  0xa76a1271: push   %ebx
  0xa76a1272: call   0xb71d62fc
  0xa76a1277: add    $0x8,%esp
  0xa76a127a: vmovsd (%esp),%xmm0
  0xa76a127f: vmovsd 0x8(%esp),%xmm1
  0xa76a1285: add    $0x10,%esp
  0xa76a1288: popf   
  0xa76a1289: popa   
  0xa76a128a: pop    %eax
  0xa76a128b: mov    %esp,%esi
  0xa76a128d: sub    $0x8,%esp
  0xa76a1290: mov    %ecx,0x4(%esp)
  0xa76a1294: mov    %edx,(%esp)
  0xa76a1297: mov    0x28(%ebx),%ecx
  0xa76a129a: push   %eax
  0xa76a129b: jmp    *%ecx

AHE@0xb6674668: 0xaaa00000 i2c: 0xa76a1340 c2i: 0xa76a13da c2iUV: 0xa76a13b9
i2c argument handler #0 for: receiver ([DI)I (239 bytes generated)
c2i argument handler starts at 0xa76a13da
  0xa76a1340: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1343: mov    $0xa75b1ac0,%edi
  0xa76a1348: cmp    %edi,%eax
  0xa76a134a: jbe    0xa76a135d
  0xa76a1350: mov    $0xa7691ac0,%edi
  0xa76a1355: cmp    %edi,%eax
  0xa76a1357: jb     0xa76a1388
  0xa76a135d: mov    $0xa75af400,%edi
  0xa76a1362: cmp    %edi,%eax
  0xa76a1364: jbe    0xa76a1377
  0xa76a136a: mov    $0xa75b1728,%edi
  0xa76a136f: cmp    %edi,%eax
  0xa76a1371: jb     0xa76a1388
  ;; i2c adapter must return to an interpreter frame
  0xa76a1377: push   $0xb75a2830
  0xa76a137c: call   0xa76a1381
  0xa76a1381: pusha  
  0xa76a1382: call   0xb7052f32
  0xa76a1387: hlt    
  ;; } verify_i2ce 
  0xa76a1388: mov    %esp,%edi
  0xa76a138a: sub    $0x8,%esp
  0xa76a138d: and    $0xfffffff0,%esp
  0xa76a1390: push   %eax
  0xa76a1391: mov    %edi,%eax
  0xa76a1393: mov    0x30(%ebx),%edi
  0xa76a1396: mov    0xc(%eax),%ecx
  0xa76a1399: mov    0x8(%eax),%edx
  0xa76a139c: mov    0x4(%eax),%esi
  0xa76a139f: mov    %esi,0x4(%esp)
  0xa76a13a3: mov    %esp,%eax
  0xa76a13a5: shr    $0xc,%eax
  0xa76a13a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a13af: mov    %ebx,0x16c(%eax)
  0xa76a13b5: mov    %ebx,%eax
  0xa76a13b7: jmp    *%edi
  0xa76a13b9: mov    0x4(%ecx),%ebx
  0xa76a13bc: cmp    0x8(%eax),%ebx
  0xa76a13bf: mov    0x4(%eax),%ebx
  0xa76a13c2: jne    0xa76a13d5
  0xa76a13c8: cmpl   $0x0,0x34(%ebx)
  0xa76a13cf: je     0xa76a1414
  0xa76a13d5: jmp    0xa7692560
  0xa76a13da: cmpl   $0x0,0x34(%ebx)
  0xa76a13e1: je     0xa76a1414
  0xa76a13e7: mov    (%esp),%eax
  0xa76a13ea: pusha  
  0xa76a13eb: pushf  
  0xa76a13ec: sub    $0x10,%esp
  0xa76a13ef: vmovsd %xmm0,(%esp)
  0xa76a13f4: vmovsd %xmm1,0x8(%esp)
  0xa76a13fa: push   %eax
  0xa76a13fb: push   %ebx
  0xa76a13fc: call   0xb71d62fc
  0xa76a1401: add    $0x8,%esp
  0xa76a1404: vmovsd (%esp),%xmm0
  0xa76a1409: vmovsd 0x8(%esp),%xmm1
  0xa76a140f: add    $0x10,%esp
  0xa76a1412: popf   
  0xa76a1413: popa   
  0xa76a1414: pop    %eax
  0xa76a1415: mov    %esp,%esi
  0xa76a1417: sub    $0xc,%esp
  0xa76a141a: mov    %ecx,0x8(%esp)
  0xa76a141e: mov    %edx,0x4(%esp)
  0xa76a1422: mov    0xc(%esp),%edi
  0xa76a1426: mov    %edi,(%esp)
  0xa76a1429: mov    0x28(%ebx),%ecx
  0xa76a142c: push   %eax
  0xa76a142d: jmp    *%ecx

AHE@0xb667468c: 0xaa000000 i2c: 0xa76a14c0 c2i: 0xa76a1550 c2iUV: 0xa76a152f
i2c argument handler #0 for: receiver (Ljava/lang/Object;)Z (221 bytes generated)
c2i argument handler starts at 0xa76a1550
  0xa76a14c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a14c3: mov    $0xa75b1ac0,%edi
  0xa76a14c8: cmp    %edi,%eax
  0xa76a14ca: jbe    0xa76a14dd
  0xa76a14d0: mov    $0xa7691ac0,%edi
  0xa76a14d5: cmp    %edi,%eax
  0xa76a14d7: jb     0xa76a1508
  0xa76a14dd: mov    $0xa75af400,%edi
  0xa76a14e2: cmp    %edi,%eax
  0xa76a14e4: jbe    0xa76a14f7
  0xa76a14ea: mov    $0xa75b1728,%edi
  0xa76a14ef: cmp    %edi,%eax
  0xa76a14f1: jb     0xa76a1508
  ;; i2c adapter must return to an interpreter frame
  0xa76a14f7: push   $0xb75a2830
  0xa76a14fc: call   0xa76a1501
  0xa76a1501: pusha  
  0xa76a1502: call   0xb7052f32
  0xa76a1507: hlt    
  ;; } verify_i2ce 
  0xa76a1508: mov    %esp,%edi
  0xa76a150a: and    $0xfffffff0,%esp
  0xa76a150d: push   %eax
  0xa76a150e: mov    %edi,%eax
  0xa76a1510: mov    0x30(%ebx),%edi
  0xa76a1513: mov    0x8(%eax),%ecx
  0xa76a1516: mov    0x4(%eax),%edx
  0xa76a1519: mov    %esp,%eax
  0xa76a151b: shr    $0xc,%eax
  0xa76a151e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a1525: mov    %ebx,0x16c(%eax)
  0xa76a152b: mov    %ebx,%eax
  0xa76a152d: jmp    *%edi
  0xa76a152f: mov    0x4(%ecx),%ebx
  0xa76a1532: cmp    0x8(%eax),%ebx
  0xa76a1535: mov    0x4(%eax),%ebx
  0xa76a1538: jne    0xa76a154b
  0xa76a153e: cmpl   $0x0,0x34(%ebx)
  0xa76a1545: je     0xa76a158a
  0xa76a154b: jmp    0xa7692560
  0xa76a1550: cmpl   $0x0,0x34(%ebx)
  0xa76a1557: je     0xa76a158a
  0xa76a155d: mov    (%esp),%eax
  0xa76a1560: pusha  
  0xa76a1561: pushf  
  0xa76a1562: sub    $0x10,%esp
  0xa76a1565: vmovsd %xmm0,(%esp)
  0xa76a156a: vmovsd %xmm1,0x8(%esp)
  0xa76a1570: push   %eax
  0xa76a1571: push   %ebx
  0xa76a1572: call   0xb71d62fc
  0xa76a1577: add    $0x8,%esp
  0xa76a157a: vmovsd (%esp),%xmm0
  0xa76a157f: vmovsd 0x8(%esp),%xmm1
  0xa76a1585: add    $0x10,%esp
  0xa76a1588: popf   
  0xa76a1589: popa   
  0xa76a158a: pop    %eax
  0xa76a158b: mov    %esp,%esi
  0xa76a158d: sub    $0x8,%esp
  0xa76a1590: mov    %ecx,0x4(%esp)
  0xa76a1594: mov    %edx,(%esp)
  0xa76a1597: mov    0x28(%ebx),%ecx
  0xa76a159a: push   %eax
  0xa76a159b: jmp    *%ecx

AHE@0xb66746b0: 0xaa000000 i2c: 0xa76a1640 c2i: 0xa76a16d0 c2iUV: 0xa76a16af
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (221 bytes generated)
c2i argument handler starts at 0xa76a16d0
  0xa76a1640: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1643: mov    $0xa75b1ac0,%edi
  0xa76a1648: cmp    %edi,%eax
  0xa76a164a: jbe    0xa76a165d
  0xa76a1650: mov    $0xa7691ac0,%edi
  0xa76a1655: cmp    %edi,%eax
  0xa76a1657: jb     0xa76a1688
  0xa76a165d: mov    $0xa75af400,%edi
  0xa76a1662: cmp    %edi,%eax
  0xa76a1664: jbe    0xa76a1677
  0xa76a166a: mov    $0xa75b1728,%edi
  0xa76a166f: cmp    %edi,%eax
  0xa76a1671: jb     0xa76a1688
  ;; i2c adapter must return to an interpreter frame
  0xa76a1677: push   $0xb75a2830
  0xa76a167c: call   0xa76a1681
  0xa76a1681: pusha  
  0xa76a1682: call   0xb7052f32
  0xa76a1687: hlt    
  ;; } verify_i2ce 
  0xa76a1688: mov    %esp,%edi
  0xa76a168a: and    $0xfffffff0,%esp
  0xa76a168d: push   %eax
  0xa76a168e: mov    %edi,%eax
  0xa76a1690: mov    0x30(%ebx),%edi
  0xa76a1693: mov    0x8(%eax),%ecx
  0xa76a1696: mov    0x4(%eax),%edx
  0xa76a1699: mov    %esp,%eax
  0xa76a169b: shr    $0xc,%eax
  0xa76a169e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a16a5: mov    %ebx,0x16c(%eax)
  0xa76a16ab: mov    %ebx,%eax
  0xa76a16ad: jmp    *%edi
  0xa76a16af: mov    0x4(%ecx),%ebx
  0xa76a16b2: cmp    0x8(%eax),%ebx
  0xa76a16b5: mov    0x4(%eax),%ebx
  0xa76a16b8: jne    0xa76a16cb
  0xa76a16be: cmpl   $0x0,0x34(%ebx)
  0xa76a16c5: je     0xa76a170a
  0xa76a16cb: jmp    0xa7692560
  0xa76a16d0: cmpl   $0x0,0x34(%ebx)
  0xa76a16d7: je     0xa76a170a
  0xa76a16dd: mov    (%esp),%eax
  0xa76a16e0: pusha  
  0xa76a16e1: pushf  
  0xa76a16e2: sub    $0x10,%esp
  0xa76a16e5: vmovsd %xmm0,(%esp)
  0xa76a16ea: vmovsd %xmm1,0x8(%esp)
  0xa76a16f0: push   %eax
  0xa76a16f1: push   %ebx
  0xa76a16f2: call   0xb71d62fc
  0xa76a16f7: add    $0x8,%esp
  0xa76a16fa: vmovsd (%esp),%xmm0
  0xa76a16ff: vmovsd 0x8(%esp),%xmm1
  0xa76a1705: add    $0x10,%esp
  0xa76a1708: popf   
  0xa76a1709: popa   
  0xa76a170a: pop    %eax
  0xa76a170b: mov    %esp,%esi
  0xa76a170d: sub    $0x8,%esp
  0xa76a1710: mov    %ecx,0x4(%esp)
  0xa76a1714: mov    %edx,(%esp)
  0xa76a1717: mov    0x28(%ebx),%ecx
  0xa76a171a: push   %eax
  0xa76a171b: jmp    *%ecx

AHE@0xb66746d4: 0xaa000000 i2c: 0xa76a17c0 c2i: 0xa76a1850 c2iUV: 0xa76a182f
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (221 bytes generated)
c2i argument handler starts at 0xa76a1850
  0xa76a17c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a17c3: mov    $0xa75b1ac0,%edi
  0xa76a17c8: cmp    %edi,%eax
  0xa76a17ca: jbe    0xa76a17dd
  0xa76a17d0: mov    $0xa7691ac0,%edi
  0xa76a17d5: cmp    %edi,%eax
  0xa76a17d7: jb     0xa76a1808
  0xa76a17dd: mov    $0xa75af400,%edi
  0xa76a17e2: cmp    %edi,%eax
  0xa76a17e4: jbe    0xa76a17f7
  0xa76a17ea: mov    $0xa75b1728,%edi
  0xa76a17ef: cmp    %edi,%eax
  0xa76a17f1: jb     0xa76a1808
  ;; i2c adapter must return to an interpreter frame
  0xa76a17f7: push   $0xb75a2830
  0xa76a17fc: call   0xa76a1801
  0xa76a1801: pusha  
  0xa76a1802: call   0xb7052f32
  0xa76a1807: hlt    
  ;; } verify_i2ce 
  0xa76a1808: mov    %esp,%edi
  0xa76a180a: and    $0xfffffff0,%esp
  0xa76a180d: push   %eax
  0xa76a180e: mov    %edi,%eax
  0xa76a1810: mov    0x30(%ebx),%edi
  0xa76a1813: mov    0x8(%eax),%ecx
  0xa76a1816: mov    0x4(%eax),%edx
  0xa76a1819: mov    %esp,%eax
  0xa76a181b: shr    $0xc,%eax
  0xa76a181e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a1825: mov    %ebx,0x16c(%eax)
  0xa76a182b: mov    %ebx,%eax
  0xa76a182d: jmp    *%edi
  0xa76a182f: mov    0x4(%ecx),%ebx
  0xa76a1832: cmp    0x8(%eax),%ebx
  0xa76a1835: mov    0x4(%eax),%ebx
  0xa76a1838: jne    0xa76a184b
  0xa76a183e: cmpl   $0x0,0x34(%ebx)
  0xa76a1845: je     0xa76a188a
  0xa76a184b: jmp    0xa7692560
  0xa76a1850: cmpl   $0x0,0x34(%ebx)
  0xa76a1857: je     0xa76a188a
  0xa76a185d: mov    (%esp),%eax
  0xa76a1860: pusha  
  0xa76a1861: pushf  
  0xa76a1862: sub    $0x10,%esp
  0xa76a1865: vmovsd %xmm0,(%esp)
  0xa76a186a: vmovsd %xmm1,0x8(%esp)
  0xa76a1870: push   %eax
  0xa76a1871: push   %ebx
  0xa76a1872: call   0xb71d62fc
  0xa76a1877: add    $0x8,%esp
  0xa76a187a: vmovsd (%esp),%xmm0
  0xa76a187f: vmovsd 0x8(%esp),%xmm1
  0xa76a1885: add    $0x10,%esp
  0xa76a1888: popf   
  0xa76a1889: popa   
  0xa76a188a: pop    %eax
  0xa76a188b: mov    %esp,%esi
  0xa76a188d: sub    $0x8,%esp
  0xa76a1890: mov    %ecx,0x4(%esp)
  0xa76a1894: mov    %edx,(%esp)
  0xa76a1897: mov    0x28(%ebx),%ecx
  0xa76a189a: push   %eax
  0xa76a189b: jmp    *%ecx

AHE@0xb66746f8: 0xaaaa0000 i2c: 0xa76a1940 c2i: 0xa76a19e1 c2iUV: 0xa76a19c0
i2c argument handler #0 for: receiver (Ljava/lang/Class;[B[Ljava/lang/Object;)Ljava/lang/Class; (254 bytes generated)
c2i argument handler starts at 0xa76a19e1
  0xa76a1940: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1943: mov    $0xa75b1ac0,%edi
  0xa76a1948: cmp    %edi,%eax
  0xa76a194a: jbe    0xa76a195d
  0xa76a1950: mov    $0xa7691ac0,%edi
  0xa76a1955: cmp    %edi,%eax
  0xa76a1957: jb     0xa76a1988
  0xa76a195d: mov    $0xa75af400,%edi
  0xa76a1962: cmp    %edi,%eax
  0xa76a1964: jbe    0xa76a1977
  0xa76a196a: mov    $0xa75b1728,%edi
  0xa76a196f: cmp    %edi,%eax
  0xa76a1971: jb     0xa76a1988
  ;; i2c adapter must return to an interpreter frame
  0xa76a1977: push   $0xb75a2830
  0xa76a197c: call   0xa76a1981
  0xa76a1981: pusha  
  0xa76a1982: call   0xb7052f32
  0xa76a1987: hlt    
  ;; } verify_i2ce 
  0xa76a1988: mov    %esp,%edi
  0xa76a198a: sub    $0x8,%esp
  0xa76a198d: and    $0xfffffff0,%esp
  0xa76a1990: push   %eax
  0xa76a1991: mov    %edi,%eax
  0xa76a1993: mov    0x30(%ebx),%edi
  0xa76a1996: mov    0x10(%eax),%ecx
  0xa76a1999: mov    0xc(%eax),%edx
  0xa76a199c: mov    0x8(%eax),%esi
  0xa76a199f: mov    %esi,0x4(%esp)
  0xa76a19a3: mov    0x4(%eax),%esi
  0xa76a19a6: mov    %esi,0x8(%esp)
  0xa76a19aa: mov    %esp,%eax
  0xa76a19ac: shr    $0xc,%eax
  0xa76a19af: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a19b6: mov    %ebx,0x16c(%eax)
  0xa76a19bc: mov    %ebx,%eax
  0xa76a19be: jmp    *%edi
  0xa76a19c0: mov    0x4(%ecx),%ebx
  0xa76a19c3: cmp    0x8(%eax),%ebx
  0xa76a19c6: mov    0x4(%eax),%ebx
  0xa76a19c9: jne    0xa76a19dc
  0xa76a19cf: cmpl   $0x0,0x34(%ebx)
  0xa76a19d6: je     0xa76a1a1b
  0xa76a19dc: jmp    0xa7692560
  0xa76a19e1: cmpl   $0x0,0x34(%ebx)
  0xa76a19e8: je     0xa76a1a1b
  0xa76a19ee: mov    (%esp),%eax
  0xa76a19f1: pusha  
  0xa76a19f2: pushf  
  0xa76a19f3: sub    $0x10,%esp
  0xa76a19f6: vmovsd %xmm0,(%esp)
  0xa76a19fb: vmovsd %xmm1,0x8(%esp)
  0xa76a1a01: push   %eax
  0xa76a1a02: push   %ebx
  0xa76a1a03: call   0xb71d62fc
  0xa76a1a08: add    $0x8,%esp
  0xa76a1a0b: vmovsd (%esp),%xmm0
  0xa76a1a10: vmovsd 0x8(%esp),%xmm1
  0xa76a1a16: add    $0x10,%esp
  0xa76a1a19: popf   
  0xa76a1a1a: popa   
  0xa76a1a1b: pop    %eax
  0xa76a1a1c: mov    %esp,%esi
  0xa76a1a1e: sub    $0x10,%esp
  0xa76a1a21: mov    %ecx,0xc(%esp)
  0xa76a1a25: mov    %edx,0x8(%esp)
  0xa76a1a29: mov    0x10(%esp),%edi
  0xa76a1a2d: mov    %edi,0x4(%esp)
  0xa76a1a31: mov    0x14(%esp),%edi
  0xa76a1a35: mov    %edi,(%esp)
  0xa76a1a38: mov    0x28(%ebx),%ecx
  0xa76a1a3b: push   %eax
  0xa76a1a3c: jmp    *%ecx

AHE@0xb667471c: 0xa0000000 i2c: 0xa76a1ac0 c2i: 0xa76a1b4d c2iUV: 0xa76a1b2c
i2c argument handler #0 for: receiver ()I (214 bytes generated)
c2i argument handler starts at 0xa76a1b4d
  0xa76a1ac0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1ac3: mov    $0xa75b1ac0,%edi
  0xa76a1ac8: cmp    %edi,%eax
  0xa76a1aca: jbe    0xa76a1add
  0xa76a1ad0: mov    $0xa7691ac0,%edi
  0xa76a1ad5: cmp    %edi,%eax
  0xa76a1ad7: jb     0xa76a1b08
  0xa76a1add: mov    $0xa75af400,%edi
  0xa76a1ae2: cmp    %edi,%eax
  0xa76a1ae4: jbe    0xa76a1af7
  0xa76a1aea: mov    $0xa75b1728,%edi
  0xa76a1aef: cmp    %edi,%eax
  0xa76a1af1: jb     0xa76a1b08
  ;; i2c adapter must return to an interpreter frame
  0xa76a1af7: push   $0xb75a2830
  0xa76a1afc: call   0xa76a1b01
  0xa76a1b01: pusha  
  0xa76a1b02: call   0xb7052f32
  0xa76a1b07: hlt    
  ;; } verify_i2ce 
  0xa76a1b08: mov    %esp,%edi
  0xa76a1b0a: and    $0xfffffff0,%esp
  0xa76a1b0d: push   %eax
  0xa76a1b0e: mov    %edi,%eax
  0xa76a1b10: mov    0x30(%ebx),%edi
  0xa76a1b13: mov    0x4(%eax),%ecx
  0xa76a1b16: mov    %esp,%eax
  0xa76a1b18: shr    $0xc,%eax
  0xa76a1b1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a1b22: mov    %ebx,0x16c(%eax)
  0xa76a1b28: mov    %ebx,%eax
  0xa76a1b2a: jmp    *%edi
  0xa76a1b2c: mov    0x4(%ecx),%ebx
  0xa76a1b2f: cmp    0x8(%eax),%ebx
  0xa76a1b32: mov    0x4(%eax),%ebx
  0xa76a1b35: jne    0xa76a1b48
  0xa76a1b3b: cmpl   $0x0,0x34(%ebx)
  0xa76a1b42: je     0xa76a1b87
  0xa76a1b48: jmp    0xa7692560
  0xa76a1b4d: cmpl   $0x0,0x34(%ebx)
  0xa76a1b54: je     0xa76a1b87
  0xa76a1b5a: mov    (%esp),%eax
  0xa76a1b5d: pusha  
  0xa76a1b5e: pushf  
  0xa76a1b5f: sub    $0x10,%esp
  0xa76a1b62: vmovsd %xmm0,(%esp)
  0xa76a1b67: vmovsd %xmm1,0x8(%esp)
  0xa76a1b6d: push   %eax
  0xa76a1b6e: push   %ebx
  0xa76a1b6f: call   0xb71d62fc
  0xa76a1b74: add    $0x8,%esp
  0xa76a1b77: vmovsd (%esp),%xmm0
  0xa76a1b7c: vmovsd 0x8(%esp),%xmm1
  0xa76a1b82: add    $0x10,%esp
  0xa76a1b85: popf   
  0xa76a1b86: popa   
  0xa76a1b87: pop    %eax
  0xa76a1b88: mov    %esp,%esi
  0xa76a1b8a: sub    $0x4,%esp
  0xa76a1b8d: mov    %ecx,(%esp)
  0xa76a1b90: mov    0x28(%ebx),%ecx
  0xa76a1b93: push   %eax
  0xa76a1b94: jmp    *%ecx

AHE@0xb6674740: 0xa0000000 i2c: 0xa76a1c40 c2i: 0xa76a1ccd c2iUV: 0xa76a1cac
i2c argument handler #0 for: receiver ()I (214 bytes generated)
c2i argument handler starts at 0xa76a1ccd
  0xa76a1c40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1c43: mov    $0xa75b1ac0,%edi
  0xa76a1c48: cmp    %edi,%eax
  0xa76a1c4a: jbe    0xa76a1c5d
  0xa76a1c50: mov    $0xa7691ac0,%edi
  0xa76a1c55: cmp    %edi,%eax
  0xa76a1c57: jb     0xa76a1c88
  0xa76a1c5d: mov    $0xa75af400,%edi
  0xa76a1c62: cmp    %edi,%eax
  0xa76a1c64: jbe    0xa76a1c77
  0xa76a1c6a: mov    $0xa75b1728,%edi
  0xa76a1c6f: cmp    %edi,%eax
  0xa76a1c71: jb     0xa76a1c88
  ;; i2c adapter must return to an interpreter frame
  0xa76a1c77: push   $0xb75a2830
  0xa76a1c7c: call   0xa76a1c81
  0xa76a1c81: pusha  
  0xa76a1c82: call   0xb7052f32
  0xa76a1c87: hlt    
  ;; } verify_i2ce 
  0xa76a1c88: mov    %esp,%edi
  0xa76a1c8a: and    $0xfffffff0,%esp
  0xa76a1c8d: push   %eax
  0xa76a1c8e: mov    %edi,%eax
  0xa76a1c90: mov    0x30(%ebx),%edi
  0xa76a1c93: mov    0x4(%eax),%ecx
  0xa76a1c96: mov    %esp,%eax
  0xa76a1c98: shr    $0xc,%eax
  0xa76a1c9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a1ca2: mov    %ebx,0x16c(%eax)
  0xa76a1ca8: mov    %ebx,%eax
  0xa76a1caa: jmp    *%edi
  0xa76a1cac: mov    0x4(%ecx),%ebx
  0xa76a1caf: cmp    0x8(%eax),%ebx
  0xa76a1cb2: mov    0x4(%eax),%ebx
  0xa76a1cb5: jne    0xa76a1cc8
  0xa76a1cbb: cmpl   $0x0,0x34(%ebx)
  0xa76a1cc2: je     0xa76a1d07
  0xa76a1cc8: jmp    0xa7692560
  0xa76a1ccd: cmpl   $0x0,0x34(%ebx)
  0xa76a1cd4: je     0xa76a1d07
  0xa76a1cda: mov    (%esp),%eax
  0xa76a1cdd: pusha  
  0xa76a1cde: pushf  
  0xa76a1cdf: sub    $0x10,%esp
  0xa76a1ce2: vmovsd %xmm0,(%esp)
  0xa76a1ce7: vmovsd %xmm1,0x8(%esp)
  0xa76a1ced: push   %eax
  0xa76a1cee: push   %ebx
  0xa76a1cef: call   0xb71d62fc
  0xa76a1cf4: add    $0x8,%esp
  0xa76a1cf7: vmovsd (%esp),%xmm0
  0xa76a1cfc: vmovsd 0x8(%esp),%xmm1
  0xa76a1d02: add    $0x10,%esp
  0xa76a1d05: popf   
  0xa76a1d06: popa   
  0xa76a1d07: pop    %eax
  0xa76a1d08: mov    %esp,%esi
  0xa76a1d0a: sub    $0x4,%esp
  0xa76a1d0d: mov    %ecx,(%esp)
  0xa76a1d10: mov    0x28(%ebx),%ecx
  0xa76a1d13: push   %eax
  0xa76a1d14: jmp    *%ecx

AHE@0xb6674764: 0xaa000000 i2c: 0xa76a1dc0 c2i: 0xa76a1e50 c2iUV: 0xa76a1e2f
i2c argument handler #0 for: receiver (Ljava/lang/Class;)I (221 bytes generated)
c2i argument handler starts at 0xa76a1e50
  0xa76a1dc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1dc3: mov    $0xa75b1ac0,%edi
  0xa76a1dc8: cmp    %edi,%eax
  0xa76a1dca: jbe    0xa76a1ddd
  0xa76a1dd0: mov    $0xa7691ac0,%edi
  0xa76a1dd5: cmp    %edi,%eax
  0xa76a1dd7: jb     0xa76a1e08
  0xa76a1ddd: mov    $0xa75af400,%edi
  0xa76a1de2: cmp    %edi,%eax
  0xa76a1de4: jbe    0xa76a1df7
  0xa76a1dea: mov    $0xa75b1728,%edi
  0xa76a1def: cmp    %edi,%eax
  0xa76a1df1: jb     0xa76a1e08
  ;; i2c adapter must return to an interpreter frame
  0xa76a1df7: push   $0xb75a2830
  0xa76a1dfc: call   0xa76a1e01
  0xa76a1e01: pusha  
  0xa76a1e02: call   0xb7052f32
  0xa76a1e07: hlt    
  ;; } verify_i2ce 
  0xa76a1e08: mov    %esp,%edi
  0xa76a1e0a: and    $0xfffffff0,%esp
  0xa76a1e0d: push   %eax
  0xa76a1e0e: mov    %edi,%eax
  0xa76a1e10: mov    0x30(%ebx),%edi
  0xa76a1e13: mov    0x8(%eax),%ecx
  0xa76a1e16: mov    0x4(%eax),%edx
  0xa76a1e19: mov    %esp,%eax
  0xa76a1e1b: shr    $0xc,%eax
  0xa76a1e1e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a1e25: mov    %ebx,0x16c(%eax)
  0xa76a1e2b: mov    %ebx,%eax
  0xa76a1e2d: jmp    *%edi
  0xa76a1e2f: mov    0x4(%ecx),%ebx
  0xa76a1e32: cmp    0x8(%eax),%ebx
  0xa76a1e35: mov    0x4(%eax),%ebx
  0xa76a1e38: jne    0xa76a1e4b
  0xa76a1e3e: cmpl   $0x0,0x34(%ebx)
  0xa76a1e45: je     0xa76a1e8a
  0xa76a1e4b: jmp    0xa7692560
  0xa76a1e50: cmpl   $0x0,0x34(%ebx)
  0xa76a1e57: je     0xa76a1e8a
  0xa76a1e5d: mov    (%esp),%eax
  0xa76a1e60: pusha  
  0xa76a1e61: pushf  
  0xa76a1e62: sub    $0x10,%esp
  0xa76a1e65: vmovsd %xmm0,(%esp)
  0xa76a1e6a: vmovsd %xmm1,0x8(%esp)
  0xa76a1e70: push   %eax
  0xa76a1e71: push   %ebx
  0xa76a1e72: call   0xb71d62fc
  0xa76a1e77: add    $0x8,%esp
  0xa76a1e7a: vmovsd (%esp),%xmm0
  0xa76a1e7f: vmovsd 0x8(%esp),%xmm1
  0xa76a1e85: add    $0x10,%esp
  0xa76a1e88: popf   
  0xa76a1e89: popa   
  0xa76a1e8a: pop    %eax
  0xa76a1e8b: mov    %esp,%esi
  0xa76a1e8d: sub    $0x8,%esp
  0xa76a1e90: mov    %ecx,0x4(%esp)
  0xa76a1e94: mov    %edx,(%esp)
  0xa76a1e97: mov    0x28(%ebx),%ecx
  0xa76a1e9a: push   %eax
  0xa76a1e9b: jmp    *%ecx

AHE@0xb6674788: 0xaa000000 i2c: 0xa76a1f40 c2i: 0xa76a1fd0 c2iUV: 0xa76a1faf
i2c argument handler #0 for: receiver (Ljava/lang/Class;)I (221 bytes generated)
c2i argument handler starts at 0xa76a1fd0
  0xa76a1f40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a1f43: mov    $0xa75b1ac0,%edi
  0xa76a1f48: cmp    %edi,%eax
  0xa76a1f4a: jbe    0xa76a1f5d
  0xa76a1f50: mov    $0xa7691ac0,%edi
  0xa76a1f55: cmp    %edi,%eax
  0xa76a1f57: jb     0xa76a1f88
  0xa76a1f5d: mov    $0xa75af400,%edi
  0xa76a1f62: cmp    %edi,%eax
  0xa76a1f64: jbe    0xa76a1f77
  0xa76a1f6a: mov    $0xa75b1728,%edi
  0xa76a1f6f: cmp    %edi,%eax
  0xa76a1f71: jb     0xa76a1f88
  ;; i2c adapter must return to an interpreter frame
  0xa76a1f77: push   $0xb75a2830
  0xa76a1f7c: call   0xa76a1f81
  0xa76a1f81: pusha  
  0xa76a1f82: call   0xb7052f32
  0xa76a1f87: hlt    
  ;; } verify_i2ce 
  0xa76a1f88: mov    %esp,%edi
  0xa76a1f8a: and    $0xfffffff0,%esp
  0xa76a1f8d: push   %eax
  0xa76a1f8e: mov    %edi,%eax
  0xa76a1f90: mov    0x30(%ebx),%edi
  0xa76a1f93: mov    0x8(%eax),%ecx
  0xa76a1f96: mov    0x4(%eax),%edx
  0xa76a1f99: mov    %esp,%eax
  0xa76a1f9b: shr    $0xc,%eax
  0xa76a1f9e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a1fa5: mov    %ebx,0x16c(%eax)
  0xa76a1fab: mov    %ebx,%eax
  0xa76a1fad: jmp    *%edi
  0xa76a1faf: mov    0x4(%ecx),%ebx
  0xa76a1fb2: cmp    0x8(%eax),%ebx
  0xa76a1fb5: mov    0x4(%eax),%ebx
  0xa76a1fb8: jne    0xa76a1fcb
  0xa76a1fbe: cmpl   $0x0,0x34(%ebx)
  0xa76a1fc5: je     0xa76a200a
  0xa76a1fcb: jmp    0xa7692560
  0xa76a1fd0: cmpl   $0x0,0x34(%ebx)
  0xa76a1fd7: je     0xa76a200a
  0xa76a1fdd: mov    (%esp),%eax
  0xa76a1fe0: pusha  
  0xa76a1fe1: pushf  
  0xa76a1fe2: sub    $0x10,%esp
  0xa76a1fe5: vmovsd %xmm0,(%esp)
  0xa76a1fea: vmovsd %xmm1,0x8(%esp)
  0xa76a1ff0: push   %eax
  0xa76a1ff1: push   %ebx
  0xa76a1ff2: call   0xb71d62fc
  0xa76a1ff7: add    $0x8,%esp
  0xa76a1ffa: vmovsd (%esp),%xmm0
  0xa76a1fff: vmovsd 0x8(%esp),%xmm1
  0xa76a2005: add    $0x10,%esp
  0xa76a2008: popf   
  0xa76a2009: popa   
  0xa76a200a: pop    %eax
  0xa76a200b: mov    %esp,%esi
  0xa76a200d: sub    $0x8,%esp
  0xa76a2010: mov    %ecx,0x4(%esp)
  0xa76a2014: mov    %edx,(%esp)
  0xa76a2017: mov    0x28(%ebx),%ecx
  0xa76a201a: push   %eax
  0xa76a201b: jmp    *%ecx

AHE@0xb66747ac: 0xabe00000 i2c: 0xa76a20c0 c2i: 0xa76a215e c2iUV: 0xa76a213d
i2c argument handler #0 for: receiver (J)V (247 bytes generated)
c2i argument handler starts at 0xa76a215e
  0xa76a20c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a20c3: mov    $0xa75b1ac0,%edi
  0xa76a20c8: cmp    %edi,%eax
  0xa76a20ca: jbe    0xa76a20dd
  0xa76a20d0: mov    $0xa7691ac0,%edi
  0xa76a20d5: cmp    %edi,%eax
  0xa76a20d7: jb     0xa76a2108
  0xa76a20dd: mov    $0xa75af400,%edi
  0xa76a20e2: cmp    %edi,%eax
  0xa76a20e4: jbe    0xa76a20f7
  0xa76a20ea: mov    $0xa75b1728,%edi
  0xa76a20ef: cmp    %edi,%eax
  0xa76a20f1: jb     0xa76a2108
  ;; i2c adapter must return to an interpreter frame
  0xa76a20f7: push   $0xb75a2830
  0xa76a20fc: call   0xa76a2101
  0xa76a2101: pusha  
  0xa76a2102: call   0xb7052f32
  0xa76a2107: hlt    
  ;; } verify_i2ce 
  0xa76a2108: mov    %esp,%edi
  0xa76a210a: sub    $0x8,%esp
  0xa76a210d: and    $0xfffffff0,%esp
  0xa76a2110: push   %eax
  0xa76a2111: mov    %edi,%eax
  0xa76a2113: mov    0x30(%ebx),%edi
  0xa76a2116: mov    0xc(%eax),%ecx
  0xa76a2119: mov    0x4(%eax),%esi
  0xa76a211c: mov    %esi,0x4(%esp)
  0xa76a2120: mov    0x8(%eax),%esi
  0xa76a2123: mov    %esi,0x8(%esp)
  0xa76a2127: mov    %esp,%eax
  0xa76a2129: shr    $0xc,%eax
  0xa76a212c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2133: mov    %ebx,0x16c(%eax)
  0xa76a2139: mov    %ebx,%eax
  0xa76a213b: jmp    *%edi
  0xa76a213d: mov    0x4(%ecx),%ebx
  0xa76a2140: cmp    0x8(%eax),%ebx
  0xa76a2143: mov    0x4(%eax),%ebx
  0xa76a2146: jne    0xa76a2159
  0xa76a214c: cmpl   $0x0,0x34(%ebx)
  0xa76a2153: je     0xa76a2198
  0xa76a2159: jmp    0xa7692560
  0xa76a215e: cmpl   $0x0,0x34(%ebx)
  0xa76a2165: je     0xa76a2198
  0xa76a216b: mov    (%esp),%eax
  0xa76a216e: pusha  
  0xa76a216f: pushf  
  0xa76a2170: sub    $0x10,%esp
  0xa76a2173: vmovsd %xmm0,(%esp)
  0xa76a2178: vmovsd %xmm1,0x8(%esp)
  0xa76a217e: push   %eax
  0xa76a217f: push   %ebx
  0xa76a2180: call   0xb71d62fc
  0xa76a2185: add    $0x8,%esp
  0xa76a2188: vmovsd (%esp),%xmm0
  0xa76a218d: vmovsd 0x8(%esp),%xmm1
  0xa76a2193: add    $0x10,%esp
  0xa76a2196: popf   
  0xa76a2197: popa   
  0xa76a2198: pop    %eax
  0xa76a2199: mov    %esp,%esi
  0xa76a219b: sub    $0xc,%esp
  0xa76a219e: mov    %ecx,0x8(%esp)
  0xa76a21a2: mov    0xc(%esp),%edi
  0xa76a21a6: mov    %edi,(%esp)
  0xa76a21a9: mov    0x10(%esp),%edi
  0xa76a21ad: mov    %edi,0x4(%esp)
  0xa76a21b1: mov    0x28(%ebx),%ecx
  0xa76a21b4: push   %eax
  0xa76a21b5: jmp    *%ecx

AHE@0xb66747d0: 0xaabebea0 i2c: 0xa76a2240 c2i: 0xa76a22f6 c2iUV: 0xa76a22d5
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJB)V (299 bytes generated)
c2i argument handler starts at 0xa76a22f6
  0xa76a2240: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2243: mov    $0xa75b1ac0,%edi
  0xa76a2248: cmp    %edi,%eax
  0xa76a224a: jbe    0xa76a225d
  0xa76a2250: mov    $0xa7691ac0,%edi
  0xa76a2255: cmp    %edi,%eax
  0xa76a2257: jb     0xa76a2288
  0xa76a225d: mov    $0xa75af400,%edi
  0xa76a2262: cmp    %edi,%eax
  0xa76a2264: jbe    0xa76a2277
  0xa76a226a: mov    $0xa75b1728,%edi
  0xa76a226f: cmp    %edi,%eax
  0xa76a2271: jb     0xa76a2288
  ;; i2c adapter must return to an interpreter frame
  0xa76a2277: push   $0xb75a2830
  0xa76a227c: call   0xa76a2281
  0xa76a2281: pusha  
  0xa76a2282: call   0xb7052f32
  0xa76a2287: hlt    
  ;; } verify_i2ce 
  0xa76a2288: mov    %esp,%edi
  0xa76a228a: sub    $0x18,%esp
  0xa76a228d: and    $0xfffffff0,%esp
  0xa76a2290: push   %eax
  0xa76a2291: mov    %edi,%eax
  0xa76a2293: mov    0x30(%ebx),%edi
  0xa76a2296: mov    0x1c(%eax),%ecx
  0xa76a2299: mov    0x18(%eax),%edx
  0xa76a229c: mov    0x10(%eax),%esi
  0xa76a229f: mov    %esi,0x4(%esp)
  0xa76a22a3: mov    0x14(%eax),%esi
  0xa76a22a6: mov    %esi,0x8(%esp)
  0xa76a22aa: mov    0x8(%eax),%esi
  0xa76a22ad: mov    %esi,0xc(%esp)
  0xa76a22b1: mov    0xc(%eax),%esi
  0xa76a22b4: mov    %esi,0x10(%esp)
  0xa76a22b8: mov    0x4(%eax),%esi
  0xa76a22bb: mov    %esi,0x14(%esp)
  0xa76a22bf: mov    %esp,%eax
  0xa76a22c1: shr    $0xc,%eax
  0xa76a22c4: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a22cb: mov    %ebx,0x16c(%eax)
  0xa76a22d1: mov    %ebx,%eax
  0xa76a22d3: jmp    *%edi
  0xa76a22d5: mov    0x4(%ecx),%ebx
  0xa76a22d8: cmp    0x8(%eax),%ebx
  0xa76a22db: mov    0x4(%eax),%ebx
  0xa76a22de: jne    0xa76a22f1
  0xa76a22e4: cmpl   $0x0,0x34(%ebx)
  0xa76a22eb: je     0xa76a2330
  0xa76a22f1: jmp    0xa7692560
  0xa76a22f6: cmpl   $0x0,0x34(%ebx)
  0xa76a22fd: je     0xa76a2330
  0xa76a2303: mov    (%esp),%eax
  0xa76a2306: pusha  
  0xa76a2307: pushf  
  0xa76a2308: sub    $0x10,%esp
  0xa76a230b: vmovsd %xmm0,(%esp)
  0xa76a2310: vmovsd %xmm1,0x8(%esp)
  0xa76a2316: push   %eax
  0xa76a2317: push   %ebx
  0xa76a2318: call   0xb71d62fc
  0xa76a231d: add    $0x8,%esp
  0xa76a2320: vmovsd (%esp),%xmm0
  0xa76a2325: vmovsd 0x8(%esp),%xmm1
  0xa76a232b: add    $0x10,%esp
  0xa76a232e: popf   
  0xa76a232f: popa   
  0xa76a2330: pop    %eax
  0xa76a2331: mov    %esp,%esi
  0xa76a2333: sub    $0x1c,%esp
  0xa76a2336: mov    %ecx,0x18(%esp)
  0xa76a233a: mov    %edx,0x14(%esp)
  0xa76a233e: mov    0x1c(%esp),%edi
  0xa76a2342: mov    %edi,0xc(%esp)
  0xa76a2346: mov    0x20(%esp),%edi
  0xa76a234a: mov    %edi,0x10(%esp)
  0xa76a234e: mov    0x24(%esp),%edi
  0xa76a2352: mov    %edi,0x4(%esp)
  0xa76a2356: mov    0x28(%esp),%edi
  0xa76a235a: mov    %edi,0x8(%esp)
  0xa76a235e: mov    0x2c(%esp),%edi
  0xa76a2362: mov    %edi,(%esp)
  0xa76a2365: mov    0x28(%ebx),%ecx
  0xa76a2368: push   %eax
  0xa76a2369: jmp    *%ecx

AHE@0xb66747f4: 0xabebea00 i2c: 0xa76a2400 c2i: 0xa76a24af c2iUV: 0xa76a248e
i2c argument handler #0 for: receiver (JJB)V (284 bytes generated)
c2i argument handler starts at 0xa76a24af
  0xa76a2400: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2403: mov    $0xa75b1ac0,%edi
  0xa76a2408: cmp    %edi,%eax
  0xa76a240a: jbe    0xa76a241d
  0xa76a2410: mov    $0xa7691ac0,%edi
  0xa76a2415: cmp    %edi,%eax
  0xa76a2417: jb     0xa76a2448
  0xa76a241d: mov    $0xa75af400,%edi
  0xa76a2422: cmp    %edi,%eax
  0xa76a2424: jbe    0xa76a2437
  0xa76a242a: mov    $0xa75b1728,%edi
  0xa76a242f: cmp    %edi,%eax
  0xa76a2431: jb     0xa76a2448
  ;; i2c adapter must return to an interpreter frame
  0xa76a2437: push   $0xb75a2830
  0xa76a243c: call   0xa76a2441
  0xa76a2441: pusha  
  0xa76a2442: call   0xb7052f32
  0xa76a2447: hlt    
  ;; } verify_i2ce 
  0xa76a2448: mov    %esp,%edi
  0xa76a244a: sub    $0x10,%esp
  0xa76a244d: and    $0xfffffff0,%esp
  0xa76a2450: push   %eax
  0xa76a2451: mov    %edi,%eax
  0xa76a2453: mov    0x30(%ebx),%edi
  0xa76a2456: mov    0x18(%eax),%ecx
  0xa76a2459: mov    0x10(%eax),%esi
  0xa76a245c: mov    %esi,0x4(%esp)
  0xa76a2460: mov    0x14(%eax),%esi
  0xa76a2463: mov    %esi,0x8(%esp)
  0xa76a2467: mov    0x8(%eax),%esi
  0xa76a246a: mov    %esi,0xc(%esp)
  0xa76a246e: mov    0xc(%eax),%esi
  0xa76a2471: mov    %esi,0x10(%esp)
  0xa76a2475: mov    0x4(%eax),%edx
  0xa76a2478: mov    %esp,%eax
  0xa76a247a: shr    $0xc,%eax
  0xa76a247d: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2484: mov    %ebx,0x16c(%eax)
  0xa76a248a: mov    %ebx,%eax
  0xa76a248c: jmp    *%edi
  0xa76a248e: mov    0x4(%ecx),%ebx
  0xa76a2491: cmp    0x8(%eax),%ebx
  0xa76a2494: mov    0x4(%eax),%ebx
  0xa76a2497: jne    0xa76a24aa
  0xa76a249d: cmpl   $0x0,0x34(%ebx)
  0xa76a24a4: je     0xa76a24e9
  0xa76a24aa: jmp    0xa7692560
  0xa76a24af: cmpl   $0x0,0x34(%ebx)
  0xa76a24b6: je     0xa76a24e9
  0xa76a24bc: mov    (%esp),%eax
  0xa76a24bf: pusha  
  0xa76a24c0: pushf  
  0xa76a24c1: sub    $0x10,%esp
  0xa76a24c4: vmovsd %xmm0,(%esp)
  0xa76a24c9: vmovsd %xmm1,0x8(%esp)
  0xa76a24cf: push   %eax
  0xa76a24d0: push   %ebx
  0xa76a24d1: call   0xb71d62fc
  0xa76a24d6: add    $0x8,%esp
  0xa76a24d9: vmovsd (%esp),%xmm0
  0xa76a24de: vmovsd 0x8(%esp),%xmm1
  0xa76a24e4: add    $0x10,%esp
  0xa76a24e7: popf   
  0xa76a24e8: popa   
  0xa76a24e9: pop    %eax
  0xa76a24ea: mov    %esp,%esi
  0xa76a24ec: sub    $0x18,%esp
  0xa76a24ef: mov    %ecx,0x14(%esp)
  0xa76a24f3: mov    0x18(%esp),%edi
  0xa76a24f7: mov    %edi,0xc(%esp)
  0xa76a24fb: mov    0x1c(%esp),%edi
  0xa76a24ff: mov    %edi,0x10(%esp)
  0xa76a2503: mov    0x20(%esp),%edi
  0xa76a2507: mov    %edi,0x4(%esp)
  0xa76a250b: mov    0x24(%esp),%edi
  0xa76a250f: mov    %edi,0x8(%esp)
  0xa76a2513: mov    %edx,(%esp)
  0xa76a2516: mov    0x28(%ebx),%ecx
  0xa76a2519: push   %eax
  0xa76a251a: jmp    *%ecx

AHE@0xb6674818: 0xabebe000 i2c: 0xa76a25c0 c2i: 0xa76a266c c2iUV: 0xa76a264b
i2c argument handler #0 for: receiver (JJ)J (277 bytes generated)
c2i argument handler starts at 0xa76a266c
  0xa76a25c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a25c3: mov    $0xa75b1ac0,%edi
  0xa76a25c8: cmp    %edi,%eax
  0xa76a25ca: jbe    0xa76a25dd
  0xa76a25d0: mov    $0xa7691ac0,%edi
  0xa76a25d5: cmp    %edi,%eax
  0xa76a25d7: jb     0xa76a2608
  0xa76a25dd: mov    $0xa75af400,%edi
  0xa76a25e2: cmp    %edi,%eax
  0xa76a25e4: jbe    0xa76a25f7
  0xa76a25ea: mov    $0xa75b1728,%edi
  0xa76a25ef: cmp    %edi,%eax
  0xa76a25f1: jb     0xa76a2608
  ;; i2c adapter must return to an interpreter frame
  0xa76a25f7: push   $0xb75a2830
  0xa76a25fc: call   0xa76a2601
  0xa76a2601: pusha  
  0xa76a2602: call   0xb7052f32
  0xa76a2607: hlt    
  ;; } verify_i2ce 
  0xa76a2608: mov    %esp,%edi
  0xa76a260a: sub    $0x10,%esp
  0xa76a260d: and    $0xfffffff0,%esp
  0xa76a2610: push   %eax
  0xa76a2611: mov    %edi,%eax
  0xa76a2613: mov    0x30(%ebx),%edi
  0xa76a2616: mov    0x14(%eax),%ecx
  0xa76a2619: mov    0xc(%eax),%esi
  0xa76a261c: mov    %esi,0x4(%esp)
  0xa76a2620: mov    0x10(%eax),%esi
  0xa76a2623: mov    %esi,0x8(%esp)
  0xa76a2627: mov    0x4(%eax),%esi
  0xa76a262a: mov    %esi,0xc(%esp)
  0xa76a262e: mov    0x8(%eax),%esi
  0xa76a2631: mov    %esi,0x10(%esp)
  0xa76a2635: mov    %esp,%eax
  0xa76a2637: shr    $0xc,%eax
  0xa76a263a: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2641: mov    %ebx,0x16c(%eax)
  0xa76a2647: mov    %ebx,%eax
  0xa76a2649: jmp    *%edi
  0xa76a264b: mov    0x4(%ecx),%ebx
  0xa76a264e: cmp    0x8(%eax),%ebx
  0xa76a2651: mov    0x4(%eax),%ebx
  0xa76a2654: jne    0xa76a2667
  0xa76a265a: cmpl   $0x0,0x34(%ebx)
  0xa76a2661: je     0xa76a26a6
  0xa76a2667: jmp    0xa7692560
  0xa76a266c: cmpl   $0x0,0x34(%ebx)
  0xa76a2673: je     0xa76a26a6
  0xa76a2679: mov    (%esp),%eax
  0xa76a267c: pusha  
  0xa76a267d: pushf  
  0xa76a267e: sub    $0x10,%esp
  0xa76a2681: vmovsd %xmm0,(%esp)
  0xa76a2686: vmovsd %xmm1,0x8(%esp)
  0xa76a268c: push   %eax
  0xa76a268d: push   %ebx
  0xa76a268e: call   0xb71d62fc
  0xa76a2693: add    $0x8,%esp
  0xa76a2696: vmovsd (%esp),%xmm0
  0xa76a269b: vmovsd 0x8(%esp),%xmm1
  0xa76a26a1: add    $0x10,%esp
  0xa76a26a4: popf   
  0xa76a26a5: popa   
  0xa76a26a6: pop    %eax
  0xa76a26a7: mov    %esp,%esi
  0xa76a26a9: sub    $0x14,%esp
  0xa76a26ac: mov    %ecx,0x10(%esp)
  0xa76a26b0: mov    0x14(%esp),%edi
  0xa76a26b4: mov    %edi,0x8(%esp)
  0xa76a26b8: mov    0x18(%esp),%edi
  0xa76a26bc: mov    %edi,0xc(%esp)
  0xa76a26c0: mov    0x1c(%esp),%edi
  0xa76a26c4: mov    %edi,(%esp)
  0xa76a26c7: mov    0x20(%esp),%edi
  0xa76a26cb: mov    %edi,0x4(%esp)
  0xa76a26cf: mov    0x28(%ebx),%ecx
  0xa76a26d2: push   %eax
  0xa76a26d3: jmp    *%ecx

AHE@0xb667483c: 0xabe00000 i2c: 0xa76a2780 c2i: 0xa76a281e c2iUV: 0xa76a27fd
i2c argument handler #0 for: receiver (J)J (247 bytes generated)
c2i argument handler starts at 0xa76a281e
  0xa76a2780: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2783: mov    $0xa75b1ac0,%edi
  0xa76a2788: cmp    %edi,%eax
  0xa76a278a: jbe    0xa76a279d
  0xa76a2790: mov    $0xa7691ac0,%edi
  0xa76a2795: cmp    %edi,%eax
  0xa76a2797: jb     0xa76a27c8
  0xa76a279d: mov    $0xa75af400,%edi
  0xa76a27a2: cmp    %edi,%eax
  0xa76a27a4: jbe    0xa76a27b7
  0xa76a27aa: mov    $0xa75b1728,%edi
  0xa76a27af: cmp    %edi,%eax
  0xa76a27b1: jb     0xa76a27c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a27b7: push   $0xb75a2830
  0xa76a27bc: call   0xa76a27c1
  0xa76a27c1: pusha  
  0xa76a27c2: call   0xb7052f32
  0xa76a27c7: hlt    
  ;; } verify_i2ce 
  0xa76a27c8: mov    %esp,%edi
  0xa76a27ca: sub    $0x8,%esp
  0xa76a27cd: and    $0xfffffff0,%esp
  0xa76a27d0: push   %eax
  0xa76a27d1: mov    %edi,%eax
  0xa76a27d3: mov    0x30(%ebx),%edi
  0xa76a27d6: mov    0xc(%eax),%ecx
  0xa76a27d9: mov    0x4(%eax),%esi
  0xa76a27dc: mov    %esi,0x4(%esp)
  0xa76a27e0: mov    0x8(%eax),%esi
  0xa76a27e3: mov    %esi,0x8(%esp)
  0xa76a27e7: mov    %esp,%eax
  0xa76a27e9: shr    $0xc,%eax
  0xa76a27ec: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a27f3: mov    %ebx,0x16c(%eax)
  0xa76a27f9: mov    %ebx,%eax
  0xa76a27fb: jmp    *%edi
  0xa76a27fd: mov    0x4(%ecx),%ebx
  0xa76a2800: cmp    0x8(%eax),%ebx
  0xa76a2803: mov    0x4(%eax),%ebx
  0xa76a2806: jne    0xa76a2819
  0xa76a280c: cmpl   $0x0,0x34(%ebx)
  0xa76a2813: je     0xa76a2858
  0xa76a2819: jmp    0xa7692560
  0xa76a281e: cmpl   $0x0,0x34(%ebx)
  0xa76a2825: je     0xa76a2858
  0xa76a282b: mov    (%esp),%eax
  0xa76a282e: pusha  
  0xa76a282f: pushf  
  0xa76a2830: sub    $0x10,%esp
  0xa76a2833: vmovsd %xmm0,(%esp)
  0xa76a2838: vmovsd %xmm1,0x8(%esp)
  0xa76a283e: push   %eax
  0xa76a283f: push   %ebx
  0xa76a2840: call   0xb71d62fc
  0xa76a2845: add    $0x8,%esp
  0xa76a2848: vmovsd (%esp),%xmm0
  0xa76a284d: vmovsd 0x8(%esp),%xmm1
  0xa76a2853: add    $0x10,%esp
  0xa76a2856: popf   
  0xa76a2857: popa   
  0xa76a2858: pop    %eax
  0xa76a2859: mov    %esp,%esi
  0xa76a285b: sub    $0xc,%esp
  0xa76a285e: mov    %ecx,0x8(%esp)
  0xa76a2862: mov    0xc(%esp),%edi
  0xa76a2866: mov    %edi,(%esp)
  0xa76a2869: mov    0x10(%esp),%edi
  0xa76a286d: mov    %edi,0x4(%esp)
  0xa76a2871: mov    0x28(%ebx),%ecx
  0xa76a2874: push   %eax
  0xa76a2875: jmp    *%ecx

AHE@0xb6674860: 0xaa000000 i2c: 0xa76a2900 c2i: 0xa76a2990 c2iUV: 0xa76a296f
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (221 bytes generated)
c2i argument handler starts at 0xa76a2990
  0xa76a2900: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2903: mov    $0xa75b1ac0,%edi
  0xa76a2908: cmp    %edi,%eax
  0xa76a290a: jbe    0xa76a291d
  0xa76a2910: mov    $0xa7691ac0,%edi
  0xa76a2915: cmp    %edi,%eax
  0xa76a2917: jb     0xa76a2948
  0xa76a291d: mov    $0xa75af400,%edi
  0xa76a2922: cmp    %edi,%eax
  0xa76a2924: jbe    0xa76a2937
  0xa76a292a: mov    $0xa75b1728,%edi
  0xa76a292f: cmp    %edi,%eax
  0xa76a2931: jb     0xa76a2948
  ;; i2c adapter must return to an interpreter frame
  0xa76a2937: push   $0xb75a2830
  0xa76a293c: call   0xa76a2941
  0xa76a2941: pusha  
  0xa76a2942: call   0xb7052f32
  0xa76a2947: hlt    
  ;; } verify_i2ce 
  0xa76a2948: mov    %esp,%edi
  0xa76a294a: and    $0xfffffff0,%esp
  0xa76a294d: push   %eax
  0xa76a294e: mov    %edi,%eax
  0xa76a2950: mov    0x30(%ebx),%edi
  0xa76a2953: mov    0x8(%eax),%ecx
  0xa76a2956: mov    0x4(%eax),%edx
  0xa76a2959: mov    %esp,%eax
  0xa76a295b: shr    $0xc,%eax
  0xa76a295e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2965: mov    %ebx,0x16c(%eax)
  0xa76a296b: mov    %ebx,%eax
  0xa76a296d: jmp    *%edi
  0xa76a296f: mov    0x4(%ecx),%ebx
  0xa76a2972: cmp    0x8(%eax),%ebx
  0xa76a2975: mov    0x4(%eax),%ebx
  0xa76a2978: jne    0xa76a298b
  0xa76a297e: cmpl   $0x0,0x34(%ebx)
  0xa76a2985: je     0xa76a29ca
  0xa76a298b: jmp    0xa7692560
  0xa76a2990: cmpl   $0x0,0x34(%ebx)
  0xa76a2997: je     0xa76a29ca
  0xa76a299d: mov    (%esp),%eax
  0xa76a29a0: pusha  
  0xa76a29a1: pushf  
  0xa76a29a2: sub    $0x10,%esp
  0xa76a29a5: vmovsd %xmm0,(%esp)
  0xa76a29aa: vmovsd %xmm1,0x8(%esp)
  0xa76a29b0: push   %eax
  0xa76a29b1: push   %ebx
  0xa76a29b2: call   0xb71d62fc
  0xa76a29b7: add    $0x8,%esp
  0xa76a29ba: vmovsd (%esp),%xmm0
  0xa76a29bf: vmovsd 0x8(%esp),%xmm1
  0xa76a29c5: add    $0x10,%esp
  0xa76a29c8: popf   
  0xa76a29c9: popa   
  0xa76a29ca: pop    %eax
  0xa76a29cb: mov    %esp,%esi
  0xa76a29cd: sub    $0x8,%esp
  0xa76a29d0: mov    %ecx,0x4(%esp)
  0xa76a29d4: mov    %edx,(%esp)
  0xa76a29d7: mov    0x28(%ebx),%ecx
  0xa76a29da: push   %eax
  0xa76a29db: jmp    *%ecx

AHE@0xb6674884: 0xaa000000 i2c: 0xa76a2a80 c2i: 0xa76a2b10 c2iUV: 0xa76a2aef
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Z (221 bytes generated)
c2i argument handler starts at 0xa76a2b10
  0xa76a2a80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2a83: mov    $0xa75b1ac0,%edi
  0xa76a2a88: cmp    %edi,%eax
  0xa76a2a8a: jbe    0xa76a2a9d
  0xa76a2a90: mov    $0xa7691ac0,%edi
  0xa76a2a95: cmp    %edi,%eax
  0xa76a2a97: jb     0xa76a2ac8
  0xa76a2a9d: mov    $0xa75af400,%edi
  0xa76a2aa2: cmp    %edi,%eax
  0xa76a2aa4: jbe    0xa76a2ab7
  0xa76a2aaa: mov    $0xa75b1728,%edi
  0xa76a2aaf: cmp    %edi,%eax
  0xa76a2ab1: jb     0xa76a2ac8
  ;; i2c adapter must return to an interpreter frame
  0xa76a2ab7: push   $0xb75a2830
  0xa76a2abc: call   0xa76a2ac1
  0xa76a2ac1: pusha  
  0xa76a2ac2: call   0xb7052f32
  0xa76a2ac7: hlt    
  ;; } verify_i2ce 
  0xa76a2ac8: mov    %esp,%edi
  0xa76a2aca: and    $0xfffffff0,%esp
  0xa76a2acd: push   %eax
  0xa76a2ace: mov    %edi,%eax
  0xa76a2ad0: mov    0x30(%ebx),%edi
  0xa76a2ad3: mov    0x8(%eax),%ecx
  0xa76a2ad6: mov    0x4(%eax),%edx
  0xa76a2ad9: mov    %esp,%eax
  0xa76a2adb: shr    $0xc,%eax
  0xa76a2ade: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2ae5: mov    %ebx,0x16c(%eax)
  0xa76a2aeb: mov    %ebx,%eax
  0xa76a2aed: jmp    *%edi
  0xa76a2aef: mov    0x4(%ecx),%ebx
  0xa76a2af2: cmp    0x8(%eax),%ebx
  0xa76a2af5: mov    0x4(%eax),%ebx
  0xa76a2af8: jne    0xa76a2b0b
  0xa76a2afe: cmpl   $0x0,0x34(%ebx)
  0xa76a2b05: je     0xa76a2b4a
  0xa76a2b0b: jmp    0xa7692560
  0xa76a2b10: cmpl   $0x0,0x34(%ebx)
  0xa76a2b17: je     0xa76a2b4a
  0xa76a2b1d: mov    (%esp),%eax
  0xa76a2b20: pusha  
  0xa76a2b21: pushf  
  0xa76a2b22: sub    $0x10,%esp
  0xa76a2b25: vmovsd %xmm0,(%esp)
  0xa76a2b2a: vmovsd %xmm1,0x8(%esp)
  0xa76a2b30: push   %eax
  0xa76a2b31: push   %ebx
  0xa76a2b32: call   0xb71d62fc
  0xa76a2b37: add    $0x8,%esp
  0xa76a2b3a: vmovsd (%esp),%xmm0
  0xa76a2b3f: vmovsd 0x8(%esp),%xmm1
  0xa76a2b45: add    $0x10,%esp
  0xa76a2b48: popf   
  0xa76a2b49: popa   
  0xa76a2b4a: pop    %eax
  0xa76a2b4b: mov    %esp,%esi
  0xa76a2b4d: sub    $0x8,%esp
  0xa76a2b50: mov    %ecx,0x4(%esp)
  0xa76a2b54: mov    %edx,(%esp)
  0xa76a2b57: mov    0x28(%ebx),%ecx
  0xa76a2b5a: push   %eax
  0xa76a2b5b: jmp    *%ecx

AHE@0xb66748a8: 0xaa000000 i2c: 0xa76a2c00 c2i: 0xa76a2c90 c2iUV: 0xa76a2c6f
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)J (221 bytes generated)
c2i argument handler starts at 0xa76a2c90
  0xa76a2c00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2c03: mov    $0xa75b1ac0,%edi
  0xa76a2c08: cmp    %edi,%eax
  0xa76a2c0a: jbe    0xa76a2c1d
  0xa76a2c10: mov    $0xa7691ac0,%edi
  0xa76a2c15: cmp    %edi,%eax
  0xa76a2c17: jb     0xa76a2c48
  0xa76a2c1d: mov    $0xa75af400,%edi
  0xa76a2c22: cmp    %edi,%eax
  0xa76a2c24: jbe    0xa76a2c37
  0xa76a2c2a: mov    $0xa75b1728,%edi
  0xa76a2c2f: cmp    %edi,%eax
  0xa76a2c31: jb     0xa76a2c48
  ;; i2c adapter must return to an interpreter frame
  0xa76a2c37: push   $0xb75a2830
  0xa76a2c3c: call   0xa76a2c41
  0xa76a2c41: pusha  
  0xa76a2c42: call   0xb7052f32
  0xa76a2c47: hlt    
  ;; } verify_i2ce 
  0xa76a2c48: mov    %esp,%edi
  0xa76a2c4a: and    $0xfffffff0,%esp
  0xa76a2c4d: push   %eax
  0xa76a2c4e: mov    %edi,%eax
  0xa76a2c50: mov    0x30(%ebx),%edi
  0xa76a2c53: mov    0x8(%eax),%ecx
  0xa76a2c56: mov    0x4(%eax),%edx
  0xa76a2c59: mov    %esp,%eax
  0xa76a2c5b: shr    $0xc,%eax
  0xa76a2c5e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2c65: mov    %ebx,0x16c(%eax)
  0xa76a2c6b: mov    %ebx,%eax
  0xa76a2c6d: jmp    *%edi
  0xa76a2c6f: mov    0x4(%ecx),%ebx
  0xa76a2c72: cmp    0x8(%eax),%ebx
  0xa76a2c75: mov    0x4(%eax),%ebx
  0xa76a2c78: jne    0xa76a2c8b
  0xa76a2c7e: cmpl   $0x0,0x34(%ebx)
  0xa76a2c85: je     0xa76a2cca
  0xa76a2c8b: jmp    0xa7692560
  0xa76a2c90: cmpl   $0x0,0x34(%ebx)
  0xa76a2c97: je     0xa76a2cca
  0xa76a2c9d: mov    (%esp),%eax
  0xa76a2ca0: pusha  
  0xa76a2ca1: pushf  
  0xa76a2ca2: sub    $0x10,%esp
  0xa76a2ca5: vmovsd %xmm0,(%esp)
  0xa76a2caa: vmovsd %xmm1,0x8(%esp)
  0xa76a2cb0: push   %eax
  0xa76a2cb1: push   %ebx
  0xa76a2cb2: call   0xb71d62fc
  0xa76a2cb7: add    $0x8,%esp
  0xa76a2cba: vmovsd (%esp),%xmm0
  0xa76a2cbf: vmovsd 0x8(%esp),%xmm1
  0xa76a2cc5: add    $0x10,%esp
  0xa76a2cc8: popf   
  0xa76a2cc9: popa   
  0xa76a2cca: pop    %eax
  0xa76a2ccb: mov    %esp,%esi
  0xa76a2ccd: sub    $0x8,%esp
  0xa76a2cd0: mov    %ecx,0x4(%esp)
  0xa76a2cd4: mov    %edx,(%esp)
  0xa76a2cd7: mov    0x28(%ebx),%ecx
  0xa76a2cda: push   %eax
  0xa76a2cdb: jmp    *%ecx

AHE@0xb66748cc: 0xaa000000 i2c: 0xa76a2d80 c2i: 0xa76a2e10 c2iUV: 0xa76a2def
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)J (221 bytes generated)
c2i argument handler starts at 0xa76a2e10
  0xa76a2d80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2d83: mov    $0xa75b1ac0,%edi
  0xa76a2d88: cmp    %edi,%eax
  0xa76a2d8a: jbe    0xa76a2d9d
  0xa76a2d90: mov    $0xa7691ac0,%edi
  0xa76a2d95: cmp    %edi,%eax
  0xa76a2d97: jb     0xa76a2dc8
  0xa76a2d9d: mov    $0xa75af400,%edi
  0xa76a2da2: cmp    %edi,%eax
  0xa76a2da4: jbe    0xa76a2db7
  0xa76a2daa: mov    $0xa75b1728,%edi
  0xa76a2daf: cmp    %edi,%eax
  0xa76a2db1: jb     0xa76a2dc8
  ;; i2c adapter must return to an interpreter frame
  0xa76a2db7: push   $0xb75a2830
  0xa76a2dbc: call   0xa76a2dc1
  0xa76a2dc1: pusha  
  0xa76a2dc2: call   0xb7052f32
  0xa76a2dc7: hlt    
  ;; } verify_i2ce 
  0xa76a2dc8: mov    %esp,%edi
  0xa76a2dca: and    $0xfffffff0,%esp
  0xa76a2dcd: push   %eax
  0xa76a2dce: mov    %edi,%eax
  0xa76a2dd0: mov    0x30(%ebx),%edi
  0xa76a2dd3: mov    0x8(%eax),%ecx
  0xa76a2dd6: mov    0x4(%eax),%edx
  0xa76a2dd9: mov    %esp,%eax
  0xa76a2ddb: shr    $0xc,%eax
  0xa76a2dde: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2de5: mov    %ebx,0x16c(%eax)
  0xa76a2deb: mov    %ebx,%eax
  0xa76a2ded: jmp    *%edi
  0xa76a2def: mov    0x4(%ecx),%ebx
  0xa76a2df2: cmp    0x8(%eax),%ebx
  0xa76a2df5: mov    0x4(%eax),%ebx
  0xa76a2df8: jne    0xa76a2e0b
  0xa76a2dfe: cmpl   $0x0,0x34(%ebx)
  0xa76a2e05: je     0xa76a2e4a
  0xa76a2e0b: jmp    0xa7692560
  0xa76a2e10: cmpl   $0x0,0x34(%ebx)
  0xa76a2e17: je     0xa76a2e4a
  0xa76a2e1d: mov    (%esp),%eax
  0xa76a2e20: pusha  
  0xa76a2e21: pushf  
  0xa76a2e22: sub    $0x10,%esp
  0xa76a2e25: vmovsd %xmm0,(%esp)
  0xa76a2e2a: vmovsd %xmm1,0x8(%esp)
  0xa76a2e30: push   %eax
  0xa76a2e31: push   %ebx
  0xa76a2e32: call   0xb71d62fc
  0xa76a2e37: add    $0x8,%esp
  0xa76a2e3a: vmovsd (%esp),%xmm0
  0xa76a2e3f: vmovsd 0x8(%esp),%xmm1
  0xa76a2e45: add    $0x10,%esp
  0xa76a2e48: popf   
  0xa76a2e49: popa   
  0xa76a2e4a: pop    %eax
  0xa76a2e4b: mov    %esp,%esi
  0xa76a2e4d: sub    $0x8,%esp
  0xa76a2e50: mov    %ecx,0x4(%esp)
  0xa76a2e54: mov    %edx,(%esp)
  0xa76a2e57: mov    0x28(%ebx),%ecx
  0xa76a2e5a: push   %eax
  0xa76a2e5b: jmp    *%ecx

AHE@0xb66748f0: 0xaa000000 i2c: 0xa76a2f00 c2i: 0xa76a2f90 c2iUV: 0xa76a2f6f
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)I (221 bytes generated)
c2i argument handler starts at 0xa76a2f90
  0xa76a2f00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a2f03: mov    $0xa75b1ac0,%edi
  0xa76a2f08: cmp    %edi,%eax
  0xa76a2f0a: jbe    0xa76a2f1d
  0xa76a2f10: mov    $0xa7691ac0,%edi
  0xa76a2f15: cmp    %edi,%eax
  0xa76a2f17: jb     0xa76a2f48
  0xa76a2f1d: mov    $0xa75af400,%edi
  0xa76a2f22: cmp    %edi,%eax
  0xa76a2f24: jbe    0xa76a2f37
  0xa76a2f2a: mov    $0xa75b1728,%edi
  0xa76a2f2f: cmp    %edi,%eax
  0xa76a2f31: jb     0xa76a2f48
  ;; i2c adapter must return to an interpreter frame
  0xa76a2f37: push   $0xb75a2830
  0xa76a2f3c: call   0xa76a2f41
  0xa76a2f41: pusha  
  0xa76a2f42: call   0xb7052f32
  0xa76a2f47: hlt    
  ;; } verify_i2ce 
  0xa76a2f48: mov    %esp,%edi
  0xa76a2f4a: and    $0xfffffff0,%esp
  0xa76a2f4d: push   %eax
  0xa76a2f4e: mov    %edi,%eax
  0xa76a2f50: mov    0x30(%ebx),%edi
  0xa76a2f53: mov    0x8(%eax),%ecx
  0xa76a2f56: mov    0x4(%eax),%edx
  0xa76a2f59: mov    %esp,%eax
  0xa76a2f5b: shr    $0xc,%eax
  0xa76a2f5e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a2f65: mov    %ebx,0x16c(%eax)
  0xa76a2f6b: mov    %ebx,%eax
  0xa76a2f6d: jmp    *%edi
  0xa76a2f6f: mov    0x4(%ecx),%ebx
  0xa76a2f72: cmp    0x8(%eax),%ebx
  0xa76a2f75: mov    0x4(%eax),%ebx
  0xa76a2f78: jne    0xa76a2f8b
  0xa76a2f7e: cmpl   $0x0,0x34(%ebx)
  0xa76a2f85: je     0xa76a2fca
  0xa76a2f8b: jmp    0xa7692560
  0xa76a2f90: cmpl   $0x0,0x34(%ebx)
  0xa76a2f97: je     0xa76a2fca
  0xa76a2f9d: mov    (%esp),%eax
  0xa76a2fa0: pusha  
  0xa76a2fa1: pushf  
  0xa76a2fa2: sub    $0x10,%esp
  0xa76a2fa5: vmovsd %xmm0,(%esp)
  0xa76a2faa: vmovsd %xmm1,0x8(%esp)
  0xa76a2fb0: push   %eax
  0xa76a2fb1: push   %ebx
  0xa76a2fb2: call   0xb71d62fc
  0xa76a2fb7: add    $0x8,%esp
  0xa76a2fba: vmovsd (%esp),%xmm0
  0xa76a2fbf: vmovsd 0x8(%esp),%xmm1
  0xa76a2fc5: add    $0x10,%esp
  0xa76a2fc8: popf   
  0xa76a2fc9: popa   
  0xa76a2fca: pop    %eax
  0xa76a2fcb: mov    %esp,%esi
  0xa76a2fcd: sub    $0x8,%esp
  0xa76a2fd0: mov    %ecx,0x4(%esp)
  0xa76a2fd4: mov    %edx,(%esp)
  0xa76a2fd7: mov    0x28(%ebx),%ecx
  0xa76a2fda: push   %eax
  0xa76a2fdb: jmp    *%ecx

AHE@0xb6674914: 0xaa000000 i2c: 0xa76a3080 c2i: 0xa76a3110 c2iUV: 0xa76a30ef
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Ljava/lang/Object; (221 bytes generated)
c2i argument handler starts at 0xa76a3110
  0xa76a3080: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3083: mov    $0xa75b1ac0,%edi
  0xa76a3088: cmp    %edi,%eax
  0xa76a308a: jbe    0xa76a309d
  0xa76a3090: mov    $0xa7691ac0,%edi
  0xa76a3095: cmp    %edi,%eax
  0xa76a3097: jb     0xa76a30c8
  0xa76a309d: mov    $0xa75af400,%edi
  0xa76a30a2: cmp    %edi,%eax
  0xa76a30a4: jbe    0xa76a30b7
  0xa76a30aa: mov    $0xa75b1728,%edi
  0xa76a30af: cmp    %edi,%eax
  0xa76a30b1: jb     0xa76a30c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a30b7: push   $0xb75a2830
  0xa76a30bc: call   0xa76a30c1
  0xa76a30c1: pusha  
  0xa76a30c2: call   0xb7052f32
  0xa76a30c7: hlt    
  ;; } verify_i2ce 
  0xa76a30c8: mov    %esp,%edi
  0xa76a30ca: and    $0xfffffff0,%esp
  0xa76a30cd: push   %eax
  0xa76a30ce: mov    %edi,%eax
  0xa76a30d0: mov    0x30(%ebx),%edi
  0xa76a30d3: mov    0x8(%eax),%ecx
  0xa76a30d6: mov    0x4(%eax),%edx
  0xa76a30d9: mov    %esp,%eax
  0xa76a30db: shr    $0xc,%eax
  0xa76a30de: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a30e5: mov    %ebx,0x16c(%eax)
  0xa76a30eb: mov    %ebx,%eax
  0xa76a30ed: jmp    *%edi
  0xa76a30ef: mov    0x4(%ecx),%ebx
  0xa76a30f2: cmp    0x8(%eax),%ebx
  0xa76a30f5: mov    0x4(%eax),%ebx
  0xa76a30f8: jne    0xa76a310b
  0xa76a30fe: cmpl   $0x0,0x34(%ebx)
  0xa76a3105: je     0xa76a314a
  0xa76a310b: jmp    0xa7692560
  0xa76a3110: cmpl   $0x0,0x34(%ebx)
  0xa76a3117: je     0xa76a314a
  0xa76a311d: mov    (%esp),%eax
  0xa76a3120: pusha  
  0xa76a3121: pushf  
  0xa76a3122: sub    $0x10,%esp
  0xa76a3125: vmovsd %xmm0,(%esp)
  0xa76a312a: vmovsd %xmm1,0x8(%esp)
  0xa76a3130: push   %eax
  0xa76a3131: push   %ebx
  0xa76a3132: call   0xb71d62fc
  0xa76a3137: add    $0x8,%esp
  0xa76a313a: vmovsd (%esp),%xmm0
  0xa76a313f: vmovsd 0x8(%esp),%xmm1
  0xa76a3145: add    $0x10,%esp
  0xa76a3148: popf   
  0xa76a3149: popa   
  0xa76a314a: pop    %eax
  0xa76a314b: mov    %esp,%esi
  0xa76a314d: sub    $0x8,%esp
  0xa76a3150: mov    %ecx,0x4(%esp)
  0xa76a3154: mov    %edx,(%esp)
  0xa76a3157: mov    0x28(%ebx),%ecx
  0xa76a315a: push   %eax
  0xa76a315b: jmp    *%ecx

AHE@0xb6674938: 0xaa000000 i2c: 0xa76a3200 c2i: 0xa76a3290 c2iUV: 0xa76a326f
i2c argument handler #0 for: receiver (Ljava/lang/reflect/Field;)Ljava/lang/Object; (221 bytes generated)
c2i argument handler starts at 0xa76a3290
  0xa76a3200: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3203: mov    $0xa75b1ac0,%edi
  0xa76a3208: cmp    %edi,%eax
  0xa76a320a: jbe    0xa76a321d
  0xa76a3210: mov    $0xa7691ac0,%edi
  0xa76a3215: cmp    %edi,%eax
  0xa76a3217: jb     0xa76a3248
  0xa76a321d: mov    $0xa75af400,%edi
  0xa76a3222: cmp    %edi,%eax
  0xa76a3224: jbe    0xa76a3237
  0xa76a322a: mov    $0xa75b1728,%edi
  0xa76a322f: cmp    %edi,%eax
  0xa76a3231: jb     0xa76a3248
  ;; i2c adapter must return to an interpreter frame
  0xa76a3237: push   $0xb75a2830
  0xa76a323c: call   0xa76a3241
  0xa76a3241: pusha  
  0xa76a3242: call   0xb7052f32
  0xa76a3247: hlt    
  ;; } verify_i2ce 
  0xa76a3248: mov    %esp,%edi
  0xa76a324a: and    $0xfffffff0,%esp
  0xa76a324d: push   %eax
  0xa76a324e: mov    %edi,%eax
  0xa76a3250: mov    0x30(%ebx),%edi
  0xa76a3253: mov    0x8(%eax),%ecx
  0xa76a3256: mov    0x4(%eax),%edx
  0xa76a3259: mov    %esp,%eax
  0xa76a325b: shr    $0xc,%eax
  0xa76a325e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a3265: mov    %ebx,0x16c(%eax)
  0xa76a326b: mov    %ebx,%eax
  0xa76a326d: jmp    *%edi
  0xa76a326f: mov    0x4(%ecx),%ebx
  0xa76a3272: cmp    0x8(%eax),%ebx
  0xa76a3275: mov    0x4(%eax),%ebx
  0xa76a3278: jne    0xa76a328b
  0xa76a327e: cmpl   $0x0,0x34(%ebx)
  0xa76a3285: je     0xa76a32ca
  0xa76a328b: jmp    0xa7692560
  0xa76a3290: cmpl   $0x0,0x34(%ebx)
  0xa76a3297: je     0xa76a32ca
  0xa76a329d: mov    (%esp),%eax
  0xa76a32a0: pusha  
  0xa76a32a1: pushf  
  0xa76a32a2: sub    $0x10,%esp
  0xa76a32a5: vmovsd %xmm0,(%esp)
  0xa76a32aa: vmovsd %xmm1,0x8(%esp)
  0xa76a32b0: push   %eax
  0xa76a32b1: push   %ebx
  0xa76a32b2: call   0xb71d62fc
  0xa76a32b7: add    $0x8,%esp
  0xa76a32ba: vmovsd (%esp),%xmm0
  0xa76a32bf: vmovsd 0x8(%esp),%xmm1
  0xa76a32c5: add    $0x10,%esp
  0xa76a32c8: popf   
  0xa76a32c9: popa   
  0xa76a32ca: pop    %eax
  0xa76a32cb: mov    %esp,%esi
  0xa76a32cd: sub    $0x8,%esp
  0xa76a32d0: mov    %ecx,0x4(%esp)
  0xa76a32d4: mov    %edx,(%esp)
  0xa76a32d7: mov    0x28(%ebx),%ecx
  0xa76a32da: push   %eax
  0xa76a32db: jmp    *%ecx

AHE@0xb667495c: 0xaaaaaaa0 i2c: 0xa76a3380 c2i: 0xa76a3436 c2iUV: 0xa76a3415
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/lang/ClassLoader;Ljava/security/ProtectionDomain;)Ljava/lang/Class; (299 bytes generated)
c2i argument handler starts at 0xa76a3436
  0xa76a3380: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3383: mov    $0xa75b1ac0,%edi
  0xa76a3388: cmp    %edi,%eax
  0xa76a338a: jbe    0xa76a339d
  0xa76a3390: mov    $0xa7691ac0,%edi
  0xa76a3395: cmp    %edi,%eax
  0xa76a3397: jb     0xa76a33c8
  0xa76a339d: mov    $0xa75af400,%edi
  0xa76a33a2: cmp    %edi,%eax
  0xa76a33a4: jbe    0xa76a33b7
  0xa76a33aa: mov    $0xa75b1728,%edi
  0xa76a33af: cmp    %edi,%eax
  0xa76a33b1: jb     0xa76a33c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a33b7: push   $0xb75a2830
  0xa76a33bc: call   0xa76a33c1
  0xa76a33c1: pusha  
  0xa76a33c2: call   0xb7052f32
  0xa76a33c7: hlt    
  ;; } verify_i2ce 
  0xa76a33c8: mov    %esp,%edi
  0xa76a33ca: sub    $0x18,%esp
  0xa76a33cd: and    $0xfffffff0,%esp
  0xa76a33d0: push   %eax
  0xa76a33d1: mov    %edi,%eax
  0xa76a33d3: mov    0x30(%ebx),%edi
  0xa76a33d6: mov    0x1c(%eax),%ecx
  0xa76a33d9: mov    0x18(%eax),%edx
  0xa76a33dc: mov    0x14(%eax),%esi
  0xa76a33df: mov    %esi,0x4(%esp)
  0xa76a33e3: mov    0x10(%eax),%esi
  0xa76a33e6: mov    %esi,0x8(%esp)
  0xa76a33ea: mov    0xc(%eax),%esi
  0xa76a33ed: mov    %esi,0xc(%esp)
  0xa76a33f1: mov    0x8(%eax),%esi
  0xa76a33f4: mov    %esi,0x10(%esp)
  0xa76a33f8: mov    0x4(%eax),%esi
  0xa76a33fb: mov    %esi,0x14(%esp)
  0xa76a33ff: mov    %esp,%eax
  0xa76a3401: shr    $0xc,%eax
  0xa76a3404: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a340b: mov    %ebx,0x16c(%eax)
  0xa76a3411: mov    %ebx,%eax
  0xa76a3413: jmp    *%edi
  0xa76a3415: mov    0x4(%ecx),%ebx
  0xa76a3418: cmp    0x8(%eax),%ebx
  0xa76a341b: mov    0x4(%eax),%ebx
  0xa76a341e: jne    0xa76a3431
  0xa76a3424: cmpl   $0x0,0x34(%ebx)
  0xa76a342b: je     0xa76a3470
  0xa76a3431: jmp    0xa7692560
  0xa76a3436: cmpl   $0x0,0x34(%ebx)
  0xa76a343d: je     0xa76a3470
  0xa76a3443: mov    (%esp),%eax
  0xa76a3446: pusha  
  0xa76a3447: pushf  
  0xa76a3448: sub    $0x10,%esp
  0xa76a344b: vmovsd %xmm0,(%esp)
  0xa76a3450: vmovsd %xmm1,0x8(%esp)
  0xa76a3456: push   %eax
  0xa76a3457: push   %ebx
  0xa76a3458: call   0xb71d62fc
  0xa76a345d: add    $0x8,%esp
  0xa76a3460: vmovsd (%esp),%xmm0
  0xa76a3465: vmovsd 0x8(%esp),%xmm1
  0xa76a346b: add    $0x10,%esp
  0xa76a346e: popf   
  0xa76a346f: popa   
  0xa76a3470: pop    %eax
  0xa76a3471: mov    %esp,%esi
  0xa76a3473: sub    $0x1c,%esp
  0xa76a3476: mov    %ecx,0x18(%esp)
  0xa76a347a: mov    %edx,0x14(%esp)
  0xa76a347e: mov    0x1c(%esp),%edi
  0xa76a3482: mov    %edi,0x10(%esp)
  0xa76a3486: mov    0x20(%esp),%edi
  0xa76a348a: mov    %edi,0xc(%esp)
  0xa76a348e: mov    0x24(%esp),%edi
  0xa76a3492: mov    %edi,0x8(%esp)
  0xa76a3496: mov    0x28(%esp),%edi
  0xa76a349a: mov    %edi,0x4(%esp)
  0xa76a349e: mov    0x2c(%esp),%edi
  0xa76a34a2: mov    %edi,(%esp)
  0xa76a34a5: mov    0x28(%ebx),%ecx
  0xa76a34a8: push   %eax
  0xa76a34a9: jmp    *%ecx

AHE@0xb6674980: 0xaa000000 i2c: 0xa76a3540 c2i: 0xa76a35d0 c2iUV: 0xa76a35af
i2c argument handler #0 for: receiver (Ljava/lang/Throwable;)V (221 bytes generated)
c2i argument handler starts at 0xa76a35d0
  0xa76a3540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3543: mov    $0xa75b1ac0,%edi
  0xa76a3548: cmp    %edi,%eax
  0xa76a354a: jbe    0xa76a355d
  0xa76a3550: mov    $0xa7691ac0,%edi
  0xa76a3555: cmp    %edi,%eax
  0xa76a3557: jb     0xa76a3588
  0xa76a355d: mov    $0xa75af400,%edi
  0xa76a3562: cmp    %edi,%eax
  0xa76a3564: jbe    0xa76a3577
  0xa76a356a: mov    $0xa75b1728,%edi
  0xa76a356f: cmp    %edi,%eax
  0xa76a3571: jb     0xa76a3588
  ;; i2c adapter must return to an interpreter frame
  0xa76a3577: push   $0xb75a2830
  0xa76a357c: call   0xa76a3581
  0xa76a3581: pusha  
  0xa76a3582: call   0xb7052f32
  0xa76a3587: hlt    
  ;; } verify_i2ce 
  0xa76a3588: mov    %esp,%edi
  0xa76a358a: and    $0xfffffff0,%esp
  0xa76a358d: push   %eax
  0xa76a358e: mov    %edi,%eax
  0xa76a3590: mov    0x30(%ebx),%edi
  0xa76a3593: mov    0x8(%eax),%ecx
  0xa76a3596: mov    0x4(%eax),%edx
  0xa76a3599: mov    %esp,%eax
  0xa76a359b: shr    $0xc,%eax
  0xa76a359e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a35a5: mov    %ebx,0x16c(%eax)
  0xa76a35ab: mov    %ebx,%eax
  0xa76a35ad: jmp    *%edi
  0xa76a35af: mov    0x4(%ecx),%ebx
  0xa76a35b2: cmp    0x8(%eax),%ebx
  0xa76a35b5: mov    0x4(%eax),%ebx
  0xa76a35b8: jne    0xa76a35cb
  0xa76a35be: cmpl   $0x0,0x34(%ebx)
  0xa76a35c5: je     0xa76a360a
  0xa76a35cb: jmp    0xa7692560
  0xa76a35d0: cmpl   $0x0,0x34(%ebx)
  0xa76a35d7: je     0xa76a360a
  0xa76a35dd: mov    (%esp),%eax
  0xa76a35e0: pusha  
  0xa76a35e1: pushf  
  0xa76a35e2: sub    $0x10,%esp
  0xa76a35e5: vmovsd %xmm0,(%esp)
  0xa76a35ea: vmovsd %xmm1,0x8(%esp)
  0xa76a35f0: push   %eax
  0xa76a35f1: push   %ebx
  0xa76a35f2: call   0xb71d62fc
  0xa76a35f7: add    $0x8,%esp
  0xa76a35fa: vmovsd (%esp),%xmm0
  0xa76a35ff: vmovsd 0x8(%esp),%xmm1
  0xa76a3605: add    $0x10,%esp
  0xa76a3608: popf   
  0xa76a3609: popa   
  0xa76a360a: pop    %eax
  0xa76a360b: mov    %esp,%esi
  0xa76a360d: sub    $0x8,%esp
  0xa76a3610: mov    %ecx,0x4(%esp)
  0xa76a3614: mov    %edx,(%esp)
  0xa76a3617: mov    0x28(%ebx),%ecx
  0xa76a361a: push   %eax
  0xa76a361b: jmp    *%ecx

AHE@0xb66749a4: 0x i2c: 0xa76a36c0 c2i: 0xa76a374a c2iUV: 0xa76a3729
i2c argument handler #0 for: static ()Lsun/misc/Unsafe; (208 bytes generated)
c2i argument handler starts at 0xa76a374a
  0xa76a36c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a36c3: mov    $0xa75b1ac0,%edi
  0xa76a36c8: cmp    %edi,%eax
  0xa76a36ca: jbe    0xa76a36dd
  0xa76a36d0: mov    $0xa7691ac0,%edi
  0xa76a36d5: cmp    %edi,%eax
  0xa76a36d7: jb     0xa76a3708
  0xa76a36dd: mov    $0xa75af400,%edi
  0xa76a36e2: cmp    %edi,%eax
  0xa76a36e4: jbe    0xa76a36f7
  0xa76a36ea: mov    $0xa75b1728,%edi
  0xa76a36ef: cmp    %edi,%eax
  0xa76a36f1: jb     0xa76a3708
  ;; i2c adapter must return to an interpreter frame
  0xa76a36f7: push   $0xb75a2830
  0xa76a36fc: call   0xa76a3701
  0xa76a3701: pusha  
  0xa76a3702: call   0xb7052f32
  0xa76a3707: hlt    
  ;; } verify_i2ce 
  0xa76a3708: mov    %esp,%edi
  0xa76a370a: and    $0xfffffff0,%esp
  0xa76a370d: push   %eax
  0xa76a370e: mov    %edi,%eax
  0xa76a3710: mov    0x30(%ebx),%edi
  0xa76a3713: mov    %esp,%eax
  0xa76a3715: shr    $0xc,%eax
  0xa76a3718: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a371f: mov    %ebx,0x16c(%eax)
  0xa76a3725: mov    %ebx,%eax
  0xa76a3727: jmp    *%edi
  0xa76a3729: mov    0x4(%ecx),%ebx
  0xa76a372c: cmp    0x8(%eax),%ebx
  0xa76a372f: mov    0x4(%eax),%ebx
  0xa76a3732: jne    0xa76a3745
  0xa76a3738: cmpl   $0x0,0x34(%ebx)
  0xa76a373f: je     0xa76a3784
  0xa76a3745: jmp    0xa7692560
  0xa76a374a: cmpl   $0x0,0x34(%ebx)
  0xa76a3751: je     0xa76a3784
  0xa76a3757: mov    (%esp),%eax
  0xa76a375a: pusha  
  0xa76a375b: pushf  
  0xa76a375c: sub    $0x10,%esp
  0xa76a375f: vmovsd %xmm0,(%esp)
  0xa76a3764: vmovsd %xmm1,0x8(%esp)
  0xa76a376a: push   %eax
  0xa76a376b: push   %ebx
  0xa76a376c: call   0xb71d62fc
  0xa76a3771: add    $0x8,%esp
  0xa76a3774: vmovsd (%esp),%xmm0
  0xa76a3779: vmovsd 0x8(%esp),%xmm1
  0xa76a377f: add    $0x10,%esp
  0xa76a3782: popf   
  0xa76a3783: popa   
  0xa76a3784: pop    %eax
  0xa76a3785: mov    %esp,%esi
  0xa76a3787: sub    $0x0,%esp
  0xa76a378a: mov    0x28(%ebx),%ecx
  0xa76a378d: push   %eax
  0xa76a378e: jmp    *%ecx

AHE@0xb66749c8: 0x i2c: 0xa76a3840 c2i: 0xa76a38ca c2iUV: 0xa76a38a9
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76a38ca
  0xa76a3840: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3843: mov    $0xa75b1ac0,%edi
  0xa76a3848: cmp    %edi,%eax
  0xa76a384a: jbe    0xa76a385d
  0xa76a3850: mov    $0xa7691ac0,%edi
  0xa76a3855: cmp    %edi,%eax
  0xa76a3857: jb     0xa76a3888
  0xa76a385d: mov    $0xa75af400,%edi
  0xa76a3862: cmp    %edi,%eax
  0xa76a3864: jbe    0xa76a3877
  0xa76a386a: mov    $0xa75b1728,%edi
  0xa76a386f: cmp    %edi,%eax
  0xa76a3871: jb     0xa76a3888
  ;; i2c adapter must return to an interpreter frame
  0xa76a3877: push   $0xb75a2830
  0xa76a387c: call   0xa76a3881
  0xa76a3881: pusha  
  0xa76a3882: call   0xb7052f32
  0xa76a3887: hlt    
  ;; } verify_i2ce 
  0xa76a3888: mov    %esp,%edi
  0xa76a388a: and    $0xfffffff0,%esp
  0xa76a388d: push   %eax
  0xa76a388e: mov    %edi,%eax
  0xa76a3890: mov    0x30(%ebx),%edi
  0xa76a3893: mov    %esp,%eax
  0xa76a3895: shr    $0xc,%eax
  0xa76a3898: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a389f: mov    %ebx,0x16c(%eax)
  0xa76a38a5: mov    %ebx,%eax
  0xa76a38a7: jmp    *%edi
  0xa76a38a9: mov    0x4(%ecx),%ebx
  0xa76a38ac: cmp    0x8(%eax),%ebx
  0xa76a38af: mov    0x4(%eax),%ebx
  0xa76a38b2: jne    0xa76a38c5
  0xa76a38b8: cmpl   $0x0,0x34(%ebx)
  0xa76a38bf: je     0xa76a3904
  0xa76a38c5: jmp    0xa7692560
  0xa76a38ca: cmpl   $0x0,0x34(%ebx)
  0xa76a38d1: je     0xa76a3904
  0xa76a38d7: mov    (%esp),%eax
  0xa76a38da: pusha  
  0xa76a38db: pushf  
  0xa76a38dc: sub    $0x10,%esp
  0xa76a38df: vmovsd %xmm0,(%esp)
  0xa76a38e4: vmovsd %xmm1,0x8(%esp)
  0xa76a38ea: push   %eax
  0xa76a38eb: push   %ebx
  0xa76a38ec: call   0xb71d62fc
  0xa76a38f1: add    $0x8,%esp
  0xa76a38f4: vmovsd (%esp),%xmm0
  0xa76a38f9: vmovsd 0x8(%esp),%xmm1
  0xa76a38ff: add    $0x10,%esp
  0xa76a3902: popf   
  0xa76a3903: popa   
  0xa76a3904: pop    %eax
  0xa76a3905: mov    %esp,%esi
  0xa76a3907: sub    $0x0,%esp
  0xa76a390a: mov    0x28(%ebx),%ecx
  0xa76a390d: push   %eax
  0xa76a390e: jmp    *%ecx

AHE@0xb66749ec: 0xaabea000 i2c: 0xa76a39c0 c2i: 0xa76a3a68 c2iUV: 0xa76a3a47
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)Ljava/lang/Object; (269 bytes generated)
c2i argument handler starts at 0xa76a3a68
  0xa76a39c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a39c3: mov    $0xa75b1ac0,%edi
  0xa76a39c8: cmp    %edi,%eax
  0xa76a39ca: jbe    0xa76a39dd
  0xa76a39d0: mov    $0xa7691ac0,%edi
  0xa76a39d5: cmp    %edi,%eax
  0xa76a39d7: jb     0xa76a3a08
  0xa76a39dd: mov    $0xa75af400,%edi
  0xa76a39e2: cmp    %edi,%eax
  0xa76a39e4: jbe    0xa76a39f7
  0xa76a39ea: mov    $0xa75b1728,%edi
  0xa76a39ef: cmp    %edi,%eax
  0xa76a39f1: jb     0xa76a3a08
  ;; i2c adapter must return to an interpreter frame
  0xa76a39f7: push   $0xb75a2830
  0xa76a39fc: call   0xa76a3a01
  0xa76a3a01: pusha  
  0xa76a3a02: call   0xb7052f32
  0xa76a3a07: hlt    
  ;; } verify_i2ce 
  0xa76a3a08: mov    %esp,%edi
  0xa76a3a0a: sub    $0x10,%esp
  0xa76a3a0d: and    $0xfffffff0,%esp
  0xa76a3a10: push   %eax
  0xa76a3a11: mov    %edi,%eax
  0xa76a3a13: mov    0x30(%ebx),%edi
  0xa76a3a16: mov    0x14(%eax),%ecx
  0xa76a3a19: mov    0x10(%eax),%edx
  0xa76a3a1c: mov    0x8(%eax),%esi
  0xa76a3a1f: mov    %esi,0x4(%esp)
  0xa76a3a23: mov    0xc(%eax),%esi
  0xa76a3a26: mov    %esi,0x8(%esp)
  0xa76a3a2a: mov    0x4(%eax),%esi
  0xa76a3a2d: mov    %esi,0xc(%esp)
  0xa76a3a31: mov    %esp,%eax
  0xa76a3a33: shr    $0xc,%eax
  0xa76a3a36: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a3a3d: mov    %ebx,0x16c(%eax)
  0xa76a3a43: mov    %ebx,%eax
  0xa76a3a45: jmp    *%edi
  0xa76a3a47: mov    0x4(%ecx),%ebx
  0xa76a3a4a: cmp    0x8(%eax),%ebx
  0xa76a3a4d: mov    0x4(%eax),%ebx
  0xa76a3a50: jne    0xa76a3a63
  0xa76a3a56: cmpl   $0x0,0x34(%ebx)
  0xa76a3a5d: je     0xa76a3aa2
  0xa76a3a63: jmp    0xa7692560
  0xa76a3a68: cmpl   $0x0,0x34(%ebx)
  0xa76a3a6f: je     0xa76a3aa2
  0xa76a3a75: mov    (%esp),%eax
  0xa76a3a78: pusha  
  0xa76a3a79: pushf  
  0xa76a3a7a: sub    $0x10,%esp
  0xa76a3a7d: vmovsd %xmm0,(%esp)
  0xa76a3a82: vmovsd %xmm1,0x8(%esp)
  0xa76a3a88: push   %eax
  0xa76a3a89: push   %ebx
  0xa76a3a8a: call   0xb71d62fc
  0xa76a3a8f: add    $0x8,%esp
  0xa76a3a92: vmovsd (%esp),%xmm0
  0xa76a3a97: vmovsd 0x8(%esp),%xmm1
  0xa76a3a9d: add    $0x10,%esp
  0xa76a3aa0: popf   
  0xa76a3aa1: popa   
  0xa76a3aa2: pop    %eax
  0xa76a3aa3: mov    %esp,%esi
  0xa76a3aa5: sub    $0x14,%esp
  0xa76a3aa8: mov    %ecx,0x10(%esp)
  0xa76a3aac: mov    %edx,0xc(%esp)
  0xa76a3ab0: mov    0x14(%esp),%edi
  0xa76a3ab4: mov    %edi,0x4(%esp)
  0xa76a3ab8: mov    0x18(%esp),%edi
  0xa76a3abc: mov    %edi,0x8(%esp)
  0xa76a3ac0: mov    0x1c(%esp),%edi
  0xa76a3ac4: mov    %edi,(%esp)
  0xa76a3ac7: mov    0x28(%ebx),%ecx
  0xa76a3aca: push   %eax
  0xa76a3acb: jmp    *%ecx

AHE@0xb6674a10: 0xaabebe00 i2c: 0xa76a3b80 c2i: 0xa76a3c2f c2iUV: 0xa76a3c0e
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)J (284 bytes generated)
c2i argument handler starts at 0xa76a3c2f
  0xa76a3b80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3b83: mov    $0xa75b1ac0,%edi
  0xa76a3b88: cmp    %edi,%eax
  0xa76a3b8a: jbe    0xa76a3b9d
  0xa76a3b90: mov    $0xa7691ac0,%edi
  0xa76a3b95: cmp    %edi,%eax
  0xa76a3b97: jb     0xa76a3bc8
  0xa76a3b9d: mov    $0xa75af400,%edi
  0xa76a3ba2: cmp    %edi,%eax
  0xa76a3ba4: jbe    0xa76a3bb7
  0xa76a3baa: mov    $0xa75b1728,%edi
  0xa76a3baf: cmp    %edi,%eax
  0xa76a3bb1: jb     0xa76a3bc8
  ;; i2c adapter must return to an interpreter frame
  0xa76a3bb7: push   $0xb75a2830
  0xa76a3bbc: call   0xa76a3bc1
  0xa76a3bc1: pusha  
  0xa76a3bc2: call   0xb7052f32
  0xa76a3bc7: hlt    
  ;; } verify_i2ce 
  0xa76a3bc8: mov    %esp,%edi
  0xa76a3bca: sub    $0x10,%esp
  0xa76a3bcd: and    $0xfffffff0,%esp
  0xa76a3bd0: push   %eax
  0xa76a3bd1: mov    %edi,%eax
  0xa76a3bd3: mov    0x30(%ebx),%edi
  0xa76a3bd6: mov    0x18(%eax),%ecx
  0xa76a3bd9: mov    0x14(%eax),%edx
  0xa76a3bdc: mov    0xc(%eax),%esi
  0xa76a3bdf: mov    %esi,0x4(%esp)
  0xa76a3be3: mov    0x10(%eax),%esi
  0xa76a3be6: mov    %esi,0x8(%esp)
  0xa76a3bea: mov    0x4(%eax),%esi
  0xa76a3bed: mov    %esi,0xc(%esp)
  0xa76a3bf1: mov    0x8(%eax),%esi
  0xa76a3bf4: mov    %esi,0x10(%esp)
  0xa76a3bf8: mov    %esp,%eax
  0xa76a3bfa: shr    $0xc,%eax
  0xa76a3bfd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a3c04: mov    %ebx,0x16c(%eax)
  0xa76a3c0a: mov    %ebx,%eax
  0xa76a3c0c: jmp    *%edi
  0xa76a3c0e: mov    0x4(%ecx),%ebx
  0xa76a3c11: cmp    0x8(%eax),%ebx
  0xa76a3c14: mov    0x4(%eax),%ebx
  0xa76a3c17: jne    0xa76a3c2a
  0xa76a3c1d: cmpl   $0x0,0x34(%ebx)
  0xa76a3c24: je     0xa76a3c69
  0xa76a3c2a: jmp    0xa7692560
  0xa76a3c2f: cmpl   $0x0,0x34(%ebx)
  0xa76a3c36: je     0xa76a3c69
  0xa76a3c3c: mov    (%esp),%eax
  0xa76a3c3f: pusha  
  0xa76a3c40: pushf  
  0xa76a3c41: sub    $0x10,%esp
  0xa76a3c44: vmovsd %xmm0,(%esp)
  0xa76a3c49: vmovsd %xmm1,0x8(%esp)
  0xa76a3c4f: push   %eax
  0xa76a3c50: push   %ebx
  0xa76a3c51: call   0xb71d62fc
  0xa76a3c56: add    $0x8,%esp
  0xa76a3c59: vmovsd (%esp),%xmm0
  0xa76a3c5e: vmovsd 0x8(%esp),%xmm1
  0xa76a3c64: add    $0x10,%esp
  0xa76a3c67: popf   
  0xa76a3c68: popa   
  0xa76a3c69: pop    %eax
  0xa76a3c6a: mov    %esp,%esi
  0xa76a3c6c: sub    $0x18,%esp
  0xa76a3c6f: mov    %ecx,0x14(%esp)
  0xa76a3c73: mov    %edx,0x10(%esp)
  0xa76a3c77: mov    0x18(%esp),%edi
  0xa76a3c7b: mov    %edi,0x8(%esp)
  0xa76a3c7f: mov    0x1c(%esp),%edi
  0xa76a3c83: mov    %edi,0xc(%esp)
  0xa76a3c87: mov    0x20(%esp),%edi
  0xa76a3c8b: mov    %edi,(%esp)
  0xa76a3c8e: mov    0x24(%esp),%edi
  0xa76a3c92: mov    %edi,0x4(%esp)
  0xa76a3c96: mov    0x28(%ebx),%ecx
  0xa76a3c99: push   %eax
  0xa76a3c9a: jmp    *%ecx

AHE@0xb6674a34: 0xaabea000 i2c: 0xa76a3d40 c2i: 0xa76a3de8 c2iUV: 0xa76a3dc7
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)I (269 bytes generated)
c2i argument handler starts at 0xa76a3de8
  0xa76a3d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3d43: mov    $0xa75b1ac0,%edi
  0xa76a3d48: cmp    %edi,%eax
  0xa76a3d4a: jbe    0xa76a3d5d
  0xa76a3d50: mov    $0xa7691ac0,%edi
  0xa76a3d55: cmp    %edi,%eax
  0xa76a3d57: jb     0xa76a3d88
  0xa76a3d5d: mov    $0xa75af400,%edi
  0xa76a3d62: cmp    %edi,%eax
  0xa76a3d64: jbe    0xa76a3d77
  0xa76a3d6a: mov    $0xa75b1728,%edi
  0xa76a3d6f: cmp    %edi,%eax
  0xa76a3d71: jb     0xa76a3d88
  ;; i2c adapter must return to an interpreter frame
  0xa76a3d77: push   $0xb75a2830
  0xa76a3d7c: call   0xa76a3d81
  0xa76a3d81: pusha  
  0xa76a3d82: call   0xb7052f32
  0xa76a3d87: hlt    
  ;; } verify_i2ce 
  0xa76a3d88: mov    %esp,%edi
  0xa76a3d8a: sub    $0x10,%esp
  0xa76a3d8d: and    $0xfffffff0,%esp
  0xa76a3d90: push   %eax
  0xa76a3d91: mov    %edi,%eax
  0xa76a3d93: mov    0x30(%ebx),%edi
  0xa76a3d96: mov    0x14(%eax),%ecx
  0xa76a3d99: mov    0x10(%eax),%edx
  0xa76a3d9c: mov    0x8(%eax),%esi
  0xa76a3d9f: mov    %esi,0x4(%esp)
  0xa76a3da3: mov    0xc(%eax),%esi
  0xa76a3da6: mov    %esi,0x8(%esp)
  0xa76a3daa: mov    0x4(%eax),%esi
  0xa76a3dad: mov    %esi,0xc(%esp)
  0xa76a3db1: mov    %esp,%eax
  0xa76a3db3: shr    $0xc,%eax
  0xa76a3db6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a3dbd: mov    %ebx,0x16c(%eax)
  0xa76a3dc3: mov    %ebx,%eax
  0xa76a3dc5: jmp    *%edi
  0xa76a3dc7: mov    0x4(%ecx),%ebx
  0xa76a3dca: cmp    0x8(%eax),%ebx
  0xa76a3dcd: mov    0x4(%eax),%ebx
  0xa76a3dd0: jne    0xa76a3de3
  0xa76a3dd6: cmpl   $0x0,0x34(%ebx)
  0xa76a3ddd: je     0xa76a3e22
  0xa76a3de3: jmp    0xa7692560
  0xa76a3de8: cmpl   $0x0,0x34(%ebx)
  0xa76a3def: je     0xa76a3e22
  0xa76a3df5: mov    (%esp),%eax
  0xa76a3df8: pusha  
  0xa76a3df9: pushf  
  0xa76a3dfa: sub    $0x10,%esp
  0xa76a3dfd: vmovsd %xmm0,(%esp)
  0xa76a3e02: vmovsd %xmm1,0x8(%esp)
  0xa76a3e08: push   %eax
  0xa76a3e09: push   %ebx
  0xa76a3e0a: call   0xb71d62fc
  0xa76a3e0f: add    $0x8,%esp
  0xa76a3e12: vmovsd (%esp),%xmm0
  0xa76a3e17: vmovsd 0x8(%esp),%xmm1
  0xa76a3e1d: add    $0x10,%esp
  0xa76a3e20: popf   
  0xa76a3e21: popa   
  0xa76a3e22: pop    %eax
  0xa76a3e23: mov    %esp,%esi
  0xa76a3e25: sub    $0x14,%esp
  0xa76a3e28: mov    %ecx,0x10(%esp)
  0xa76a3e2c: mov    %edx,0xc(%esp)
  0xa76a3e30: mov    0x14(%esp),%edi
  0xa76a3e34: mov    %edi,0x4(%esp)
  0xa76a3e38: mov    0x18(%esp),%edi
  0xa76a3e3c: mov    %edi,0x8(%esp)
  0xa76a3e40: mov    0x1c(%esp),%edi
  0xa76a3e44: mov    %edi,(%esp)
  0xa76a3e47: mov    0x28(%ebx),%ecx
  0xa76a3e4a: push   %eax
  0xa76a3e4b: jmp    *%ecx

AHE@0xb6674a58: 0xaabebe00 i2c: 0xa76a3f00 c2i: 0xa76a3faf c2iUV: 0xa76a3f8e
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)J (284 bytes generated)
c2i argument handler starts at 0xa76a3faf
  0xa76a3f00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a3f03: mov    $0xa75b1ac0,%edi
  0xa76a3f08: cmp    %edi,%eax
  0xa76a3f0a: jbe    0xa76a3f1d
  0xa76a3f10: mov    $0xa7691ac0,%edi
  0xa76a3f15: cmp    %edi,%eax
  0xa76a3f17: jb     0xa76a3f48
  0xa76a3f1d: mov    $0xa75af400,%edi
  0xa76a3f22: cmp    %edi,%eax
  0xa76a3f24: jbe    0xa76a3f37
  0xa76a3f2a: mov    $0xa75b1728,%edi
  0xa76a3f2f: cmp    %edi,%eax
  0xa76a3f31: jb     0xa76a3f48
  ;; i2c adapter must return to an interpreter frame
  0xa76a3f37: push   $0xb75a2830
  0xa76a3f3c: call   0xa76a3f41
  0xa76a3f41: pusha  
  0xa76a3f42: call   0xb7052f32
  0xa76a3f47: hlt    
  ;; } verify_i2ce 
  0xa76a3f48: mov    %esp,%edi
  0xa76a3f4a: sub    $0x10,%esp
  0xa76a3f4d: and    $0xfffffff0,%esp
  0xa76a3f50: push   %eax
  0xa76a3f51: mov    %edi,%eax
  0xa76a3f53: mov    0x30(%ebx),%edi
  0xa76a3f56: mov    0x18(%eax),%ecx
  0xa76a3f59: mov    0x14(%eax),%edx
  0xa76a3f5c: mov    0xc(%eax),%esi
  0xa76a3f5f: mov    %esi,0x4(%esp)
  0xa76a3f63: mov    0x10(%eax),%esi
  0xa76a3f66: mov    %esi,0x8(%esp)
  0xa76a3f6a: mov    0x4(%eax),%esi
  0xa76a3f6d: mov    %esi,0xc(%esp)
  0xa76a3f71: mov    0x8(%eax),%esi
  0xa76a3f74: mov    %esi,0x10(%esp)
  0xa76a3f78: mov    %esp,%eax
  0xa76a3f7a: shr    $0xc,%eax
  0xa76a3f7d: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a3f84: mov    %ebx,0x16c(%eax)
  0xa76a3f8a: mov    %ebx,%eax
  0xa76a3f8c: jmp    *%edi
  0xa76a3f8e: mov    0x4(%ecx),%ebx
  0xa76a3f91: cmp    0x8(%eax),%ebx
  0xa76a3f94: mov    0x4(%eax),%ebx
  0xa76a3f97: jne    0xa76a3faa
  0xa76a3f9d: cmpl   $0x0,0x34(%ebx)
  0xa76a3fa4: je     0xa76a3fe9
  0xa76a3faa: jmp    0xa7692560
  0xa76a3faf: cmpl   $0x0,0x34(%ebx)
  0xa76a3fb6: je     0xa76a3fe9
  0xa76a3fbc: mov    (%esp),%eax
  0xa76a3fbf: pusha  
  0xa76a3fc0: pushf  
  0xa76a3fc1: sub    $0x10,%esp
  0xa76a3fc4: vmovsd %xmm0,(%esp)
  0xa76a3fc9: vmovsd %xmm1,0x8(%esp)
  0xa76a3fcf: push   %eax
  0xa76a3fd0: push   %ebx
  0xa76a3fd1: call   0xb71d62fc
  0xa76a3fd6: add    $0x8,%esp
  0xa76a3fd9: vmovsd (%esp),%xmm0
  0xa76a3fde: vmovsd 0x8(%esp),%xmm1
  0xa76a3fe4: add    $0x10,%esp
  0xa76a3fe7: popf   
  0xa76a3fe8: popa   
  0xa76a3fe9: pop    %eax
  0xa76a3fea: mov    %esp,%esi
  0xa76a3fec: sub    $0x18,%esp
  0xa76a3fef: mov    %ecx,0x14(%esp)
  0xa76a3ff3: mov    %edx,0x10(%esp)
  0xa76a3ff7: mov    0x18(%esp),%edi
  0xa76a3ffb: mov    %edi,0x8(%esp)
  0xa76a3fff: mov    0x1c(%esp),%edi
  0xa76a4003: mov    %edi,0xc(%esp)
  0xa76a4007: mov    0x20(%esp),%edi
  0xa76a400b: mov    %edi,(%esp)
  0xa76a400e: mov    0x24(%esp),%edi
  0xa76a4012: mov    %edi,0x4(%esp)
  0xa76a4016: mov    0x28(%ebx),%ecx
  0xa76a4019: push   %eax
  0xa76a401a: jmp    *%ecx

AHE@0xb6674a7c: 0xaabea000 i2c: 0xa76a40c0 c2i: 0xa76a4168 c2iUV: 0xa76a4147
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)I (269 bytes generated)
c2i argument handler starts at 0xa76a4168
  0xa76a40c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a40c3: mov    $0xa75b1ac0,%edi
  0xa76a40c8: cmp    %edi,%eax
  0xa76a40ca: jbe    0xa76a40dd
  0xa76a40d0: mov    $0xa7691ac0,%edi
  0xa76a40d5: cmp    %edi,%eax
  0xa76a40d7: jb     0xa76a4108
  0xa76a40dd: mov    $0xa75af400,%edi
  0xa76a40e2: cmp    %edi,%eax
  0xa76a40e4: jbe    0xa76a40f7
  0xa76a40ea: mov    $0xa75b1728,%edi
  0xa76a40ef: cmp    %edi,%eax
  0xa76a40f1: jb     0xa76a4108
  ;; i2c adapter must return to an interpreter frame
  0xa76a40f7: push   $0xb75a2830
  0xa76a40fc: call   0xa76a4101
  0xa76a4101: pusha  
  0xa76a4102: call   0xb7052f32
  0xa76a4107: hlt    
  ;; } verify_i2ce 
  0xa76a4108: mov    %esp,%edi
  0xa76a410a: sub    $0x10,%esp
  0xa76a410d: and    $0xfffffff0,%esp
  0xa76a4110: push   %eax
  0xa76a4111: mov    %edi,%eax
  0xa76a4113: mov    0x30(%ebx),%edi
  0xa76a4116: mov    0x14(%eax),%ecx
  0xa76a4119: mov    0x10(%eax),%edx
  0xa76a411c: mov    0x8(%eax),%esi
  0xa76a411f: mov    %esi,0x4(%esp)
  0xa76a4123: mov    0xc(%eax),%esi
  0xa76a4126: mov    %esi,0x8(%esp)
  0xa76a412a: mov    0x4(%eax),%esi
  0xa76a412d: mov    %esi,0xc(%esp)
  0xa76a4131: mov    %esp,%eax
  0xa76a4133: shr    $0xc,%eax
  0xa76a4136: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a413d: mov    %ebx,0x16c(%eax)
  0xa76a4143: mov    %ebx,%eax
  0xa76a4145: jmp    *%edi
  0xa76a4147: mov    0x4(%ecx),%ebx
  0xa76a414a: cmp    0x8(%eax),%ebx
  0xa76a414d: mov    0x4(%eax),%ebx
  0xa76a4150: jne    0xa76a4163
  0xa76a4156: cmpl   $0x0,0x34(%ebx)
  0xa76a415d: je     0xa76a41a2
  0xa76a4163: jmp    0xa7692560
  0xa76a4168: cmpl   $0x0,0x34(%ebx)
  0xa76a416f: je     0xa76a41a2
  0xa76a4175: mov    (%esp),%eax
  0xa76a4178: pusha  
  0xa76a4179: pushf  
  0xa76a417a: sub    $0x10,%esp
  0xa76a417d: vmovsd %xmm0,(%esp)
  0xa76a4182: vmovsd %xmm1,0x8(%esp)
  0xa76a4188: push   %eax
  0xa76a4189: push   %ebx
  0xa76a418a: call   0xb71d62fc
  0xa76a418f: add    $0x8,%esp
  0xa76a4192: vmovsd (%esp),%xmm0
  0xa76a4197: vmovsd 0x8(%esp),%xmm1
  0xa76a419d: add    $0x10,%esp
  0xa76a41a0: popf   
  0xa76a41a1: popa   
  0xa76a41a2: pop    %eax
  0xa76a41a3: mov    %esp,%esi
  0xa76a41a5: sub    $0x14,%esp
  0xa76a41a8: mov    %ecx,0x10(%esp)
  0xa76a41ac: mov    %edx,0xc(%esp)
  0xa76a41b0: mov    0x14(%esp),%edi
  0xa76a41b4: mov    %edi,0x4(%esp)
  0xa76a41b8: mov    0x18(%esp),%edi
  0xa76a41bc: mov    %edi,0x8(%esp)
  0xa76a41c0: mov    0x1c(%esp),%edi
  0xa76a41c4: mov    %edi,(%esp)
  0xa76a41c7: mov    0x28(%ebx),%ecx
  0xa76a41ca: push   %eax
  0xa76a41cb: jmp    *%ecx

AHE@0xb6674aa0: 0xaabea000 i2c: 0xa76a4280 c2i: 0xa76a4328 c2iUV: 0xa76a4307
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (269 bytes generated)
c2i argument handler starts at 0xa76a4328
  0xa76a4280: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a4283: mov    $0xa75b1ac0,%edi
  0xa76a4288: cmp    %edi,%eax
  0xa76a428a: jbe    0xa76a429d
  0xa76a4290: mov    $0xa7691ac0,%edi
  0xa76a4295: cmp    %edi,%eax
  0xa76a4297: jb     0xa76a42c8
  0xa76a429d: mov    $0xa75af400,%edi
  0xa76a42a2: cmp    %edi,%eax
  0xa76a42a4: jbe    0xa76a42b7
  0xa76a42aa: mov    $0xa75b1728,%edi
  0xa76a42af: cmp    %edi,%eax
  0xa76a42b1: jb     0xa76a42c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a42b7: push   $0xb75a2830
  0xa76a42bc: call   0xa76a42c1
  0xa76a42c1: pusha  
  0xa76a42c2: call   0xb7052f32
  0xa76a42c7: hlt    
  ;; } verify_i2ce 
  0xa76a42c8: mov    %esp,%edi
  0xa76a42ca: sub    $0x10,%esp
  0xa76a42cd: and    $0xfffffff0,%esp
  0xa76a42d0: push   %eax
  0xa76a42d1: mov    %edi,%eax
  0xa76a42d3: mov    0x30(%ebx),%edi
  0xa76a42d6: mov    0x14(%eax),%ecx
  0xa76a42d9: mov    0x10(%eax),%edx
  0xa76a42dc: mov    0x8(%eax),%esi
  0xa76a42df: mov    %esi,0x4(%esp)
  0xa76a42e3: mov    0xc(%eax),%esi
  0xa76a42e6: mov    %esi,0x8(%esp)
  0xa76a42ea: mov    0x4(%eax),%esi
  0xa76a42ed: mov    %esi,0xc(%esp)
  0xa76a42f1: mov    %esp,%eax
  0xa76a42f3: shr    $0xc,%eax
  0xa76a42f6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a42fd: mov    %ebx,0x16c(%eax)
  0xa76a4303: mov    %ebx,%eax
  0xa76a4305: jmp    *%edi
  0xa76a4307: mov    0x4(%ecx),%ebx
  0xa76a430a: cmp    0x8(%eax),%ebx
  0xa76a430d: mov    0x4(%eax),%ebx
  0xa76a4310: jne    0xa76a4323
  0xa76a4316: cmpl   $0x0,0x34(%ebx)
  0xa76a431d: je     0xa76a4362
  0xa76a4323: jmp    0xa7692560
  0xa76a4328: cmpl   $0x0,0x34(%ebx)
  0xa76a432f: je     0xa76a4362
  0xa76a4335: mov    (%esp),%eax
  0xa76a4338: pusha  
  0xa76a4339: pushf  
  0xa76a433a: sub    $0x10,%esp
  0xa76a433d: vmovsd %xmm0,(%esp)
  0xa76a4342: vmovsd %xmm1,0x8(%esp)
  0xa76a4348: push   %eax
  0xa76a4349: push   %ebx
  0xa76a434a: call   0xb71d62fc
  0xa76a434f: add    $0x8,%esp
  0xa76a4352: vmovsd (%esp),%xmm0
  0xa76a4357: vmovsd 0x8(%esp),%xmm1
  0xa76a435d: add    $0x10,%esp
  0xa76a4360: popf   
  0xa76a4361: popa   
  0xa76a4362: pop    %eax
  0xa76a4363: mov    %esp,%esi
  0xa76a4365: sub    $0x14,%esp
  0xa76a4368: mov    %ecx,0x10(%esp)
  0xa76a436c: mov    %edx,0xc(%esp)
  0xa76a4370: mov    0x14(%esp),%edi
  0xa76a4374: mov    %edi,0x4(%esp)
  0xa76a4378: mov    0x18(%esp),%edi
  0xa76a437c: mov    %edi,0x8(%esp)
  0xa76a4380: mov    0x1c(%esp),%edi
  0xa76a4384: mov    %edi,(%esp)
  0xa76a4387: mov    0x28(%ebx),%ecx
  0xa76a438a: push   %eax
  0xa76a438b: jmp    *%ecx

AHE@0xb6674ac4: 0xaabebe00 i2c: 0xa76a4440 c2i: 0xa76a44ef c2iUV: 0xa76a44ce
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (284 bytes generated)
c2i argument handler starts at 0xa76a44ef
  0xa76a4440: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a4443: mov    $0xa75b1ac0,%edi
  0xa76a4448: cmp    %edi,%eax
  0xa76a444a: jbe    0xa76a445d
  0xa76a4450: mov    $0xa7691ac0,%edi
  0xa76a4455: cmp    %edi,%eax
  0xa76a4457: jb     0xa76a4488
  0xa76a445d: mov    $0xa75af400,%edi
  0xa76a4462: cmp    %edi,%eax
  0xa76a4464: jbe    0xa76a4477
  0xa76a446a: mov    $0xa75b1728,%edi
  0xa76a446f: cmp    %edi,%eax
  0xa76a4471: jb     0xa76a4488
  ;; i2c adapter must return to an interpreter frame
  0xa76a4477: push   $0xb75a2830
  0xa76a447c: call   0xa76a4481
  0xa76a4481: pusha  
  0xa76a4482: call   0xb7052f32
  0xa76a4487: hlt    
  ;; } verify_i2ce 
  0xa76a4488: mov    %esp,%edi
  0xa76a448a: sub    $0x10,%esp
  0xa76a448d: and    $0xfffffff0,%esp
  0xa76a4490: push   %eax
  0xa76a4491: mov    %edi,%eax
  0xa76a4493: mov    0x30(%ebx),%edi
  0xa76a4496: mov    0x18(%eax),%ecx
  0xa76a4499: mov    0x14(%eax),%edx
  0xa76a449c: mov    0xc(%eax),%esi
  0xa76a449f: mov    %esi,0x4(%esp)
  0xa76a44a3: mov    0x10(%eax),%esi
  0xa76a44a6: mov    %esi,0x8(%esp)
  0xa76a44aa: mov    0x4(%eax),%esi
  0xa76a44ad: mov    %esi,0xc(%esp)
  0xa76a44b1: mov    0x8(%eax),%esi
  0xa76a44b4: mov    %esi,0x10(%esp)
  0xa76a44b8: mov    %esp,%eax
  0xa76a44ba: shr    $0xc,%eax
  0xa76a44bd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a44c4: mov    %ebx,0x16c(%eax)
  0xa76a44ca: mov    %ebx,%eax
  0xa76a44cc: jmp    *%edi
  0xa76a44ce: mov    0x4(%ecx),%ebx
  0xa76a44d1: cmp    0x8(%eax),%ebx
  0xa76a44d4: mov    0x4(%eax),%ebx
  0xa76a44d7: jne    0xa76a44ea
  0xa76a44dd: cmpl   $0x0,0x34(%ebx)
  0xa76a44e4: je     0xa76a4529
  0xa76a44ea: jmp    0xa7692560
  0xa76a44ef: cmpl   $0x0,0x34(%ebx)
  0xa76a44f6: je     0xa76a4529
  0xa76a44fc: mov    (%esp),%eax
  0xa76a44ff: pusha  
  0xa76a4500: pushf  
  0xa76a4501: sub    $0x10,%esp
  0xa76a4504: vmovsd %xmm0,(%esp)
  0xa76a4509: vmovsd %xmm1,0x8(%esp)
  0xa76a450f: push   %eax
  0xa76a4510: push   %ebx
  0xa76a4511: call   0xb71d62fc
  0xa76a4516: add    $0x8,%esp
  0xa76a4519: vmovsd (%esp),%xmm0
  0xa76a451e: vmovsd 0x8(%esp),%xmm1
  0xa76a4524: add    $0x10,%esp
  0xa76a4527: popf   
  0xa76a4528: popa   
  0xa76a4529: pop    %eax
  0xa76a452a: mov    %esp,%esi
  0xa76a452c: sub    $0x18,%esp
  0xa76a452f: mov    %ecx,0x14(%esp)
  0xa76a4533: mov    %edx,0x10(%esp)
  0xa76a4537: mov    0x18(%esp),%edi
  0xa76a453b: mov    %edi,0x8(%esp)
  0xa76a453f: mov    0x1c(%esp),%edi
  0xa76a4543: mov    %edi,0xc(%esp)
  0xa76a4547: mov    0x20(%esp),%edi
  0xa76a454b: mov    %edi,(%esp)
  0xa76a454e: mov    0x24(%esp),%edi
  0xa76a4552: mov    %edi,0x4(%esp)
  0xa76a4556: mov    0x28(%ebx),%ecx
  0xa76a4559: push   %eax
  0xa76a455a: jmp    *%ecx

AHE@0xb6674ae8: 0xaabea000 i2c: 0xa76a4600 c2i: 0xa76a46a8 c2iUV: 0xa76a4687
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (269 bytes generated)
c2i argument handler starts at 0xa76a46a8
  0xa76a4600: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a4603: mov    $0xa75b1ac0,%edi
  0xa76a4608: cmp    %edi,%eax
  0xa76a460a: jbe    0xa76a461d
  0xa76a4610: mov    $0xa7691ac0,%edi
  0xa76a4615: cmp    %edi,%eax
  0xa76a4617: jb     0xa76a4648
  0xa76a461d: mov    $0xa75af400,%edi
  0xa76a4622: cmp    %edi,%eax
  0xa76a4624: jbe    0xa76a4637
  0xa76a462a: mov    $0xa75b1728,%edi
  0xa76a462f: cmp    %edi,%eax
  0xa76a4631: jb     0xa76a4648
  ;; i2c adapter must return to an interpreter frame
  0xa76a4637: push   $0xb75a2830
  0xa76a463c: call   0xa76a4641
  0xa76a4641: pusha  
  0xa76a4642: call   0xb7052f32
  0xa76a4647: hlt    
  ;; } verify_i2ce 
  0xa76a4648: mov    %esp,%edi
  0xa76a464a: sub    $0x10,%esp
  0xa76a464d: and    $0xfffffff0,%esp
  0xa76a4650: push   %eax
  0xa76a4651: mov    %edi,%eax
  0xa76a4653: mov    0x30(%ebx),%edi
  0xa76a4656: mov    0x14(%eax),%ecx
  0xa76a4659: mov    0x10(%eax),%edx
  0xa76a465c: mov    0x8(%eax),%esi
  0xa76a465f: mov    %esi,0x4(%esp)
  0xa76a4663: mov    0xc(%eax),%esi
  0xa76a4666: mov    %esi,0x8(%esp)
  0xa76a466a: mov    0x4(%eax),%esi
  0xa76a466d: mov    %esi,0xc(%esp)
  0xa76a4671: mov    %esp,%eax
  0xa76a4673: shr    $0xc,%eax
  0xa76a4676: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a467d: mov    %ebx,0x16c(%eax)
  0xa76a4683: mov    %ebx,%eax
  0xa76a4685: jmp    *%edi
  0xa76a4687: mov    0x4(%ecx),%ebx
  0xa76a468a: cmp    0x8(%eax),%ebx
  0xa76a468d: mov    0x4(%eax),%ebx
  0xa76a4690: jne    0xa76a46a3
  0xa76a4696: cmpl   $0x0,0x34(%ebx)
  0xa76a469d: je     0xa76a46e2
  0xa76a46a3: jmp    0xa7692560
  0xa76a46a8: cmpl   $0x0,0x34(%ebx)
  0xa76a46af: je     0xa76a46e2
  0xa76a46b5: mov    (%esp),%eax
  0xa76a46b8: pusha  
  0xa76a46b9: pushf  
  0xa76a46ba: sub    $0x10,%esp
  0xa76a46bd: vmovsd %xmm0,(%esp)
  0xa76a46c2: vmovsd %xmm1,0x8(%esp)
  0xa76a46c8: push   %eax
  0xa76a46c9: push   %ebx
  0xa76a46ca: call   0xb71d62fc
  0xa76a46cf: add    $0x8,%esp
  0xa76a46d2: vmovsd (%esp),%xmm0
  0xa76a46d7: vmovsd 0x8(%esp),%xmm1
  0xa76a46dd: add    $0x10,%esp
  0xa76a46e0: popf   
  0xa76a46e1: popa   
  0xa76a46e2: pop    %eax
  0xa76a46e3: mov    %esp,%esi
  0xa76a46e5: sub    $0x14,%esp
  0xa76a46e8: mov    %ecx,0x10(%esp)
  0xa76a46ec: mov    %edx,0xc(%esp)
  0xa76a46f0: mov    0x14(%esp),%edi
  0xa76a46f4: mov    %edi,0x4(%esp)
  0xa76a46f8: mov    0x18(%esp),%edi
  0xa76a46fc: mov    %edi,0x8(%esp)
  0xa76a4700: mov    0x1c(%esp),%edi
  0xa76a4704: mov    %edi,(%esp)
  0xa76a4707: mov    0x28(%ebx),%ecx
  0xa76a470a: push   %eax
  0xa76a470b: jmp    *%ecx

AHE@0xb6674b0c: 0xaabeaa00 i2c: 0xa76a47c0 c2i: 0xa76a486f c2iUV: 0xa76a484e
i2c argument handler #0 for: receiver (Ljava/lang/Object;JII)Z (284 bytes generated)
c2i argument handler starts at 0xa76a486f
  0xa76a47c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a47c3: mov    $0xa75b1ac0,%edi
  0xa76a47c8: cmp    %edi,%eax
  0xa76a47ca: jbe    0xa76a47dd
  0xa76a47d0: mov    $0xa7691ac0,%edi
  0xa76a47d5: cmp    %edi,%eax
  0xa76a47d7: jb     0xa76a4808
  0xa76a47dd: mov    $0xa75af400,%edi
  0xa76a47e2: cmp    %edi,%eax
  0xa76a47e4: jbe    0xa76a47f7
  0xa76a47ea: mov    $0xa75b1728,%edi
  0xa76a47ef: cmp    %edi,%eax
  0xa76a47f1: jb     0xa76a4808
  ;; i2c adapter must return to an interpreter frame
  0xa76a47f7: push   $0xb75a2830
  0xa76a47fc: call   0xa76a4801
  0xa76a4801: pusha  
  0xa76a4802: call   0xb7052f32
  0xa76a4807: hlt    
  ;; } verify_i2ce 
  0xa76a4808: mov    %esp,%edi
  0xa76a480a: sub    $0x10,%esp
  0xa76a480d: and    $0xfffffff0,%esp
  0xa76a4810: push   %eax
  0xa76a4811: mov    %edi,%eax
  0xa76a4813: mov    0x30(%ebx),%edi
  0xa76a4816: mov    0x18(%eax),%ecx
  0xa76a4819: mov    0x14(%eax),%edx
  0xa76a481c: mov    0xc(%eax),%esi
  0xa76a481f: mov    %esi,0x4(%esp)
  0xa76a4823: mov    0x10(%eax),%esi
  0xa76a4826: mov    %esi,0x8(%esp)
  0xa76a482a: mov    0x8(%eax),%esi
  0xa76a482d: mov    %esi,0xc(%esp)
  0xa76a4831: mov    0x4(%eax),%esi
  0xa76a4834: mov    %esi,0x10(%esp)
  0xa76a4838: mov    %esp,%eax
  0xa76a483a: shr    $0xc,%eax
  0xa76a483d: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a4844: mov    %ebx,0x16c(%eax)
  0xa76a484a: mov    %ebx,%eax
  0xa76a484c: jmp    *%edi
  0xa76a484e: mov    0x4(%ecx),%ebx
  0xa76a4851: cmp    0x8(%eax),%ebx
  0xa76a4854: mov    0x4(%eax),%ebx
  0xa76a4857: jne    0xa76a486a
  0xa76a485d: cmpl   $0x0,0x34(%ebx)
  0xa76a4864: je     0xa76a48a9
  0xa76a486a: jmp    0xa7692560
  0xa76a486f: cmpl   $0x0,0x34(%ebx)
  0xa76a4876: je     0xa76a48a9
  0xa76a487c: mov    (%esp),%eax
  0xa76a487f: pusha  
  0xa76a4880: pushf  
  0xa76a4881: sub    $0x10,%esp
  0xa76a4884: vmovsd %xmm0,(%esp)
  0xa76a4889: vmovsd %xmm1,0x8(%esp)
  0xa76a488f: push   %eax
  0xa76a4890: push   %ebx
  0xa76a4891: call   0xb71d62fc
  0xa76a4896: add    $0x8,%esp
  0xa76a4899: vmovsd (%esp),%xmm0
  0xa76a489e: vmovsd 0x8(%esp),%xmm1
  0xa76a48a4: add    $0x10,%esp
  0xa76a48a7: popf   
  0xa76a48a8: popa   
  0xa76a48a9: pop    %eax
  0xa76a48aa: mov    %esp,%esi
  0xa76a48ac: sub    $0x18,%esp
  0xa76a48af: mov    %ecx,0x14(%esp)
  0xa76a48b3: mov    %edx,0x10(%esp)
  0xa76a48b7: mov    0x18(%esp),%edi
  0xa76a48bb: mov    %edi,0x8(%esp)
  0xa76a48bf: mov    0x1c(%esp),%edi
  0xa76a48c3: mov    %edi,0xc(%esp)
  0xa76a48c7: mov    0x20(%esp),%edi
  0xa76a48cb: mov    %edi,0x4(%esp)
  0xa76a48cf: mov    0x24(%esp),%edi
  0xa76a48d3: mov    %edi,(%esp)
  0xa76a48d6: mov    0x28(%ebx),%ecx
  0xa76a48d9: push   %eax
  0xa76a48da: jmp    *%ecx

AHE@0xb6674b30: 0xaabebebe i2c: 0xa76a4980 c2i: 0xa76a4a3d c2iUV: 0xa76a4a1c
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJJ)Z (314 bytes generated)
c2i argument handler starts at 0xa76a4a3d
  0xa76a4980: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a4983: mov    $0xa75b1ac0,%edi
  0xa76a4988: cmp    %edi,%eax
  0xa76a498a: jbe    0xa76a499d
  0xa76a4990: mov    $0xa7691ac0,%edi
  0xa76a4995: cmp    %edi,%eax
  0xa76a4997: jb     0xa76a49c8
  0xa76a499d: mov    $0xa75af400,%edi
  0xa76a49a2: cmp    %edi,%eax
  0xa76a49a4: jbe    0xa76a49b7
  0xa76a49aa: mov    $0xa75b1728,%edi
  0xa76a49af: cmp    %edi,%eax
  0xa76a49b1: jb     0xa76a49c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a49b7: push   $0xb75a2830
  0xa76a49bc: call   0xa76a49c1
  0xa76a49c1: pusha  
  0xa76a49c2: call   0xb7052f32
  0xa76a49c7: hlt    
  ;; } verify_i2ce 
  0xa76a49c8: mov    %esp,%edi
  0xa76a49ca: sub    $0x18,%esp
  0xa76a49cd: and    $0xfffffff0,%esp
  0xa76a49d0: push   %eax
  0xa76a49d1: mov    %edi,%eax
  0xa76a49d3: mov    0x30(%ebx),%edi
  0xa76a49d6: mov    0x20(%eax),%ecx
  0xa76a49d9: mov    0x1c(%eax),%edx
  0xa76a49dc: mov    0x14(%eax),%esi
  0xa76a49df: mov    %esi,0x4(%esp)
  0xa76a49e3: mov    0x18(%eax),%esi
  0xa76a49e6: mov    %esi,0x8(%esp)
  0xa76a49ea: mov    0xc(%eax),%esi
  0xa76a49ed: mov    %esi,0xc(%esp)
  0xa76a49f1: mov    0x10(%eax),%esi
  0xa76a49f4: mov    %esi,0x10(%esp)
  0xa76a49f8: mov    0x4(%eax),%esi
  0xa76a49fb: mov    %esi,0x14(%esp)
  0xa76a49ff: mov    0x8(%eax),%esi
  0xa76a4a02: mov    %esi,0x18(%esp)
  0xa76a4a06: mov    %esp,%eax
  0xa76a4a08: shr    $0xc,%eax
  0xa76a4a0b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a4a12: mov    %ebx,0x16c(%eax)
  0xa76a4a18: mov    %ebx,%eax
  0xa76a4a1a: jmp    *%edi
  0xa76a4a1c: mov    0x4(%ecx),%ebx
  0xa76a4a1f: cmp    0x8(%eax),%ebx
  0xa76a4a22: mov    0x4(%eax),%ebx
  0xa76a4a25: jne    0xa76a4a38
  0xa76a4a2b: cmpl   $0x0,0x34(%ebx)
  0xa76a4a32: je     0xa76a4a77
  0xa76a4a38: jmp    0xa7692560
  0xa76a4a3d: cmpl   $0x0,0x34(%ebx)
  0xa76a4a44: je     0xa76a4a77
  0xa76a4a4a: mov    (%esp),%eax
  0xa76a4a4d: pusha  
  0xa76a4a4e: pushf  
  0xa76a4a4f: sub    $0x10,%esp
  0xa76a4a52: vmovsd %xmm0,(%esp)
  0xa76a4a57: vmovsd %xmm1,0x8(%esp)
  0xa76a4a5d: push   %eax
  0xa76a4a5e: push   %ebx
  0xa76a4a5f: call   0xb71d62fc
  0xa76a4a64: add    $0x8,%esp
  0xa76a4a67: vmovsd (%esp),%xmm0
  0xa76a4a6c: vmovsd 0x8(%esp),%xmm1
  0xa76a4a72: add    $0x10,%esp
  0xa76a4a75: popf   
  0xa76a4a76: popa   
  0xa76a4a77: pop    %eax
  0xa76a4a78: mov    %esp,%esi
  0xa76a4a7a: sub    $0x20,%esp
  0xa76a4a7d: mov    %ecx,0x1c(%esp)
  0xa76a4a81: mov    %edx,0x18(%esp)
  0xa76a4a85: mov    0x20(%esp),%edi
  0xa76a4a89: mov    %edi,0x10(%esp)
  0xa76a4a8d: mov    0x24(%esp),%edi
  0xa76a4a91: mov    %edi,0x14(%esp)
  0xa76a4a95: mov    0x28(%esp),%edi
  0xa76a4a99: mov    %edi,0x8(%esp)
  0xa76a4a9d: mov    0x2c(%esp),%edi
  0xa76a4aa1: mov    %edi,0xc(%esp)
  0xa76a4aa5: mov    0x30(%esp),%edi
  0xa76a4aa9: mov    %edi,(%esp)
  0xa76a4aac: mov    0x34(%esp),%edi
  0xa76a4ab0: mov    %edi,0x4(%esp)
  0xa76a4ab4: mov    0x28(%ebx),%ecx
  0xa76a4ab7: push   %eax
  0xa76a4ab8: jmp    *%ecx

AHE@0xb66818a0: 0xaabeaa00 i2c: 0xa76a4b40 c2i: 0xa76a4bef c2iUV: 0xa76a4bce
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z (284 bytes generated)
c2i argument handler starts at 0xa76a4bef
  0xa76a4b40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a4b43: mov    $0xa75b1ac0,%edi
  0xa76a4b48: cmp    %edi,%eax
  0xa76a4b4a: jbe    0xa76a4b5d
  0xa76a4b50: mov    $0xa7691ac0,%edi
  0xa76a4b55: cmp    %edi,%eax
  0xa76a4b57: jb     0xa76a4b88
  0xa76a4b5d: mov    $0xa75af400,%edi
  0xa76a4b62: cmp    %edi,%eax
  0xa76a4b64: jbe    0xa76a4b77
  0xa76a4b6a: mov    $0xa75b1728,%edi
  0xa76a4b6f: cmp    %edi,%eax
  0xa76a4b71: jb     0xa76a4b88
  ;; i2c adapter must return to an interpreter frame
  0xa76a4b77: push   $0xb75a2830
  0xa76a4b7c: call   0xa76a4b81
  0xa76a4b81: pusha  
  0xa76a4b82: call   0xb7052f32
  0xa76a4b87: hlt    
  ;; } verify_i2ce 
  0xa76a4b88: mov    %esp,%edi
  0xa76a4b8a: sub    $0x10,%esp
  0xa76a4b8d: and    $0xfffffff0,%esp
  0xa76a4b90: push   %eax
  0xa76a4b91: mov    %edi,%eax
  0xa76a4b93: mov    0x30(%ebx),%edi
  0xa76a4b96: mov    0x18(%eax),%ecx
  0xa76a4b99: mov    0x14(%eax),%edx
  0xa76a4b9c: mov    0xc(%eax),%esi
  0xa76a4b9f: mov    %esi,0x4(%esp)
  0xa76a4ba3: mov    0x10(%eax),%esi
  0xa76a4ba6: mov    %esi,0x8(%esp)
  0xa76a4baa: mov    0x8(%eax),%esi
  0xa76a4bad: mov    %esi,0xc(%esp)
  0xa76a4bb1: mov    0x4(%eax),%esi
  0xa76a4bb4: mov    %esi,0x10(%esp)
  0xa76a4bb8: mov    %esp,%eax
  0xa76a4bba: shr    $0xc,%eax
  0xa76a4bbd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a4bc4: mov    %ebx,0x16c(%eax)
  0xa76a4bca: mov    %ebx,%eax
  0xa76a4bcc: jmp    *%edi
  0xa76a4bce: mov    0x4(%ecx),%ebx
  0xa76a4bd1: cmp    0x8(%eax),%ebx
  0xa76a4bd4: mov    0x4(%eax),%ebx
  0xa76a4bd7: jne    0xa76a4bea
  0xa76a4bdd: cmpl   $0x0,0x34(%ebx)
  0xa76a4be4: je     0xa76a4c29
  0xa76a4bea: jmp    0xa7692560
  0xa76a4bef: cmpl   $0x0,0x34(%ebx)
  0xa76a4bf6: je     0xa76a4c29
  0xa76a4bfc: mov    (%esp),%eax
  0xa76a4bff: pusha  
  0xa76a4c00: pushf  
  0xa76a4c01: sub    $0x10,%esp
  0xa76a4c04: vmovsd %xmm0,(%esp)
  0xa76a4c09: vmovsd %xmm1,0x8(%esp)
  0xa76a4c0f: push   %eax
  0xa76a4c10: push   %ebx
  0xa76a4c11: call   0xb71d62fc
  0xa76a4c16: add    $0x8,%esp
  0xa76a4c19: vmovsd (%esp),%xmm0
  0xa76a4c1e: vmovsd 0x8(%esp),%xmm1
  0xa76a4c24: add    $0x10,%esp
  0xa76a4c27: popf   
  0xa76a4c28: popa   
  0xa76a4c29: pop    %eax
  0xa76a4c2a: mov    %esp,%esi
  0xa76a4c2c: sub    $0x18,%esp
  0xa76a4c2f: mov    %ecx,0x14(%esp)
  0xa76a4c33: mov    %edx,0x10(%esp)
  0xa76a4c37: mov    0x18(%esp),%edi
  0xa76a4c3b: mov    %edi,0x8(%esp)
  0xa76a4c3f: mov    0x1c(%esp),%edi
  0xa76a4c43: mov    %edi,0xc(%esp)
  0xa76a4c47: mov    0x20(%esp),%edi
  0xa76a4c4b: mov    %edi,0x4(%esp)
  0xa76a4c4f: mov    0x24(%esp),%edi
  0xa76a4c53: mov    %edi,(%esp)
  0xa76a4c56: mov    0x28(%ebx),%ecx
  0xa76a4c59: push   %eax
  0xa76a4c5a: jmp    *%ecx

AHE@0xb66818c4: 0xabebe000 i2c: 0xa76a4d00 c2i: 0xa76a4dac c2iUV: 0xa76a4d8b
i2c argument handler #0 for: receiver (JJ)V (277 bytes generated)
c2i argument handler starts at 0xa76a4dac
  0xa76a4d00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a4d03: mov    $0xa75b1ac0,%edi
  0xa76a4d08: cmp    %edi,%eax
  0xa76a4d0a: jbe    0xa76a4d1d
  0xa76a4d10: mov    $0xa7691ac0,%edi
  0xa76a4d15: cmp    %edi,%eax
  0xa76a4d17: jb     0xa76a4d48
  0xa76a4d1d: mov    $0xa75af400,%edi
  0xa76a4d22: cmp    %edi,%eax
  0xa76a4d24: jbe    0xa76a4d37
  0xa76a4d2a: mov    $0xa75b1728,%edi
  0xa76a4d2f: cmp    %edi,%eax
  0xa76a4d31: jb     0xa76a4d48
  ;; i2c adapter must return to an interpreter frame
  0xa76a4d37: push   $0xb75a2830
  0xa76a4d3c: call   0xa76a4d41
  0xa76a4d41: pusha  
  0xa76a4d42: call   0xb7052f32
  0xa76a4d47: hlt    
  ;; } verify_i2ce 
  0xa76a4d48: mov    %esp,%edi
  0xa76a4d4a: sub    $0x10,%esp
  0xa76a4d4d: and    $0xfffffff0,%esp
  0xa76a4d50: push   %eax
  0xa76a4d51: mov    %edi,%eax
  0xa76a4d53: mov    0x30(%ebx),%edi
  0xa76a4d56: mov    0x14(%eax),%ecx
  0xa76a4d59: mov    0xc(%eax),%esi
  0xa76a4d5c: mov    %esi,0x4(%esp)
  0xa76a4d60: mov    0x10(%eax),%esi
  0xa76a4d63: mov    %esi,0x8(%esp)
  0xa76a4d67: mov    0x4(%eax),%esi
  0xa76a4d6a: mov    %esi,0xc(%esp)
  0xa76a4d6e: mov    0x8(%eax),%esi
  0xa76a4d71: mov    %esi,0x10(%esp)
  0xa76a4d75: mov    %esp,%eax
  0xa76a4d77: shr    $0xc,%eax
  0xa76a4d7a: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a4d81: mov    %ebx,0x16c(%eax)
  0xa76a4d87: mov    %ebx,%eax
  0xa76a4d89: jmp    *%edi
  0xa76a4d8b: mov    0x4(%ecx),%ebx
  0xa76a4d8e: cmp    0x8(%eax),%ebx
  0xa76a4d91: mov    0x4(%eax),%ebx
  0xa76a4d94: jne    0xa76a4da7
  0xa76a4d9a: cmpl   $0x0,0x34(%ebx)
  0xa76a4da1: je     0xa76a4de6
  0xa76a4da7: jmp    0xa7692560
  0xa76a4dac: cmpl   $0x0,0x34(%ebx)
  0xa76a4db3: je     0xa76a4de6
  0xa76a4db9: mov    (%esp),%eax
  0xa76a4dbc: pusha  
  0xa76a4dbd: pushf  
  0xa76a4dbe: sub    $0x10,%esp
  0xa76a4dc1: vmovsd %xmm0,(%esp)
  0xa76a4dc6: vmovsd %xmm1,0x8(%esp)
  0xa76a4dcc: push   %eax
  0xa76a4dcd: push   %ebx
  0xa76a4dce: call   0xb71d62fc
  0xa76a4dd3: add    $0x8,%esp
  0xa76a4dd6: vmovsd (%esp),%xmm0
  0xa76a4ddb: vmovsd 0x8(%esp),%xmm1
  0xa76a4de1: add    $0x10,%esp
  0xa76a4de4: popf   
  0xa76a4de5: popa   
  0xa76a4de6: pop    %eax
  0xa76a4de7: mov    %esp,%esi
  0xa76a4de9: sub    $0x14,%esp
  0xa76a4dec: mov    %ecx,0x10(%esp)
  0xa76a4df0: mov    0x14(%esp),%edi
  0xa76a4df4: mov    %edi,0x8(%esp)
  0xa76a4df8: mov    0x18(%esp),%edi
  0xa76a4dfc: mov    %edi,0xc(%esp)
  0xa76a4e00: mov    0x1c(%esp),%edi
  0xa76a4e04: mov    %edi,(%esp)
  0xa76a4e07: mov    0x20(%esp),%edi
  0xa76a4e0b: mov    %edi,0x4(%esp)
  0xa76a4e0f: mov    0x28(%ebx),%ecx
  0xa76a4e12: push   %eax
  0xa76a4e13: jmp    *%ecx

AHE@0xb66818e8: 0xabe00000 i2c: 0xa76a4ec0 c2i: 0xa76a4f5e c2iUV: 0xa76a4f3d
i2c argument handler #0 for: receiver (J)J (247 bytes generated)
c2i argument handler starts at 0xa76a4f5e
  0xa76a4ec0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a4ec3: mov    $0xa75b1ac0,%edi
  0xa76a4ec8: cmp    %edi,%eax
  0xa76a4eca: jbe    0xa76a4edd
  0xa76a4ed0: mov    $0xa7691ac0,%edi
  0xa76a4ed5: cmp    %edi,%eax
  0xa76a4ed7: jb     0xa76a4f08
  0xa76a4edd: mov    $0xa75af400,%edi
  0xa76a4ee2: cmp    %edi,%eax
  0xa76a4ee4: jbe    0xa76a4ef7
  0xa76a4eea: mov    $0xa75b1728,%edi
  0xa76a4eef: cmp    %edi,%eax
  0xa76a4ef1: jb     0xa76a4f08
  ;; i2c adapter must return to an interpreter frame
  0xa76a4ef7: push   $0xb75a2830
  0xa76a4efc: call   0xa76a4f01
  0xa76a4f01: pusha  
  0xa76a4f02: call   0xb7052f32
  0xa76a4f07: hlt    
  ;; } verify_i2ce 
  0xa76a4f08: mov    %esp,%edi
  0xa76a4f0a: sub    $0x8,%esp
  0xa76a4f0d: and    $0xfffffff0,%esp
  0xa76a4f10: push   %eax
  0xa76a4f11: mov    %edi,%eax
  0xa76a4f13: mov    0x30(%ebx),%edi
  0xa76a4f16: mov    0xc(%eax),%ecx
  0xa76a4f19: mov    0x4(%eax),%esi
  0xa76a4f1c: mov    %esi,0x4(%esp)
  0xa76a4f20: mov    0x8(%eax),%esi
  0xa76a4f23: mov    %esi,0x8(%esp)
  0xa76a4f27: mov    %esp,%eax
  0xa76a4f29: shr    $0xc,%eax
  0xa76a4f2c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a4f33: mov    %ebx,0x16c(%eax)
  0xa76a4f39: mov    %ebx,%eax
  0xa76a4f3b: jmp    *%edi
  0xa76a4f3d: mov    0x4(%ecx),%ebx
  0xa76a4f40: cmp    0x8(%eax),%ebx
  0xa76a4f43: mov    0x4(%eax),%ebx
  0xa76a4f46: jne    0xa76a4f59
  0xa76a4f4c: cmpl   $0x0,0x34(%ebx)
  0xa76a4f53: je     0xa76a4f98
  0xa76a4f59: jmp    0xa7692560
  0xa76a4f5e: cmpl   $0x0,0x34(%ebx)
  0xa76a4f65: je     0xa76a4f98
  0xa76a4f6b: mov    (%esp),%eax
  0xa76a4f6e: pusha  
  0xa76a4f6f: pushf  
  0xa76a4f70: sub    $0x10,%esp
  0xa76a4f73: vmovsd %xmm0,(%esp)
  0xa76a4f78: vmovsd %xmm1,0x8(%esp)
  0xa76a4f7e: push   %eax
  0xa76a4f7f: push   %ebx
  0xa76a4f80: call   0xb71d62fc
  0xa76a4f85: add    $0x8,%esp
  0xa76a4f88: vmovsd (%esp),%xmm0
  0xa76a4f8d: vmovsd 0x8(%esp),%xmm1
  0xa76a4f93: add    $0x10,%esp
  0xa76a4f96: popf   
  0xa76a4f97: popa   
  0xa76a4f98: pop    %eax
  0xa76a4f99: mov    %esp,%esi
  0xa76a4f9b: sub    $0xc,%esp
  0xa76a4f9e: mov    %ecx,0x8(%esp)
  0xa76a4fa2: mov    0xc(%esp),%edi
  0xa76a4fa6: mov    %edi,(%esp)
  0xa76a4fa9: mov    0x10(%esp),%edi
  0xa76a4fad: mov    %edi,0x4(%esp)
  0xa76a4fb1: mov    0x28(%ebx),%ecx
  0xa76a4fb4: push   %eax
  0xa76a4fb5: jmp    *%ecx

AHE@0xb668190c: 0xaabe7e00 i2c: 0xa76a5040 c2i: 0xa76a50e6 c2iUV: 0xa76a50c5
i2c argument handler #0 for: receiver (Ljava/lang/Object;JD)V (265 bytes generated)
c2i argument handler starts at 0xa76a50e6
  0xa76a5040: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5043: mov    $0xa75b1ac0,%edi
  0xa76a5048: cmp    %edi,%eax
  0xa76a504a: jbe    0xa76a505d
  0xa76a5050: mov    $0xa7691ac0,%edi
  0xa76a5055: cmp    %edi,%eax
  0xa76a5057: jb     0xa76a5088
  0xa76a505d: mov    $0xa75af400,%edi
  0xa76a5062: cmp    %edi,%eax
  0xa76a5064: jbe    0xa76a5077
  0xa76a506a: mov    $0xa75b1728,%edi
  0xa76a506f: cmp    %edi,%eax
  0xa76a5071: jb     0xa76a5088
  ;; i2c adapter must return to an interpreter frame
  0xa76a5077: push   $0xb75a2830
  0xa76a507c: call   0xa76a5081
  0xa76a5081: pusha  
  0xa76a5082: call   0xb7052f32
  0xa76a5087: hlt    
  ;; } verify_i2ce 
  0xa76a5088: mov    %esp,%edi
  0xa76a508a: sub    $0x8,%esp
  0xa76a508d: and    $0xfffffff0,%esp
  0xa76a5090: push   %eax
  0xa76a5091: mov    %edi,%eax
  0xa76a5093: mov    0x30(%ebx),%edi
  0xa76a5096: mov    0x18(%eax),%ecx
  0xa76a5099: mov    0x14(%eax),%edx
  0xa76a509c: mov    0xc(%eax),%esi
  0xa76a509f: mov    %esi,0x4(%esp)
  0xa76a50a3: mov    0x10(%eax),%esi
  0xa76a50a6: mov    %esi,0x8(%esp)
  0xa76a50aa: vmovsd 0x4(%eax),%xmm0
  0xa76a50af: mov    %esp,%eax
  0xa76a50b1: shr    $0xc,%eax
  0xa76a50b4: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a50bb: mov    %ebx,0x16c(%eax)
  0xa76a50c1: mov    %ebx,%eax
  0xa76a50c3: jmp    *%edi
  0xa76a50c5: mov    0x4(%ecx),%ebx
  0xa76a50c8: cmp    0x8(%eax),%ebx
  0xa76a50cb: mov    0x4(%eax),%ebx
  0xa76a50ce: jne    0xa76a50e1
  0xa76a50d4: cmpl   $0x0,0x34(%ebx)
  0xa76a50db: je     0xa76a5120
  0xa76a50e1: jmp    0xa7692560
  0xa76a50e6: cmpl   $0x0,0x34(%ebx)
  0xa76a50ed: je     0xa76a5120
  0xa76a50f3: mov    (%esp),%eax
  0xa76a50f6: pusha  
  0xa76a50f7: pushf  
  0xa76a50f8: sub    $0x10,%esp
  0xa76a50fb: vmovsd %xmm0,(%esp)
  0xa76a5100: vmovsd %xmm1,0x8(%esp)
  0xa76a5106: push   %eax
  0xa76a5107: push   %ebx
  0xa76a5108: call   0xb71d62fc
  0xa76a510d: add    $0x8,%esp
  0xa76a5110: vmovsd (%esp),%xmm0
  0xa76a5115: vmovsd 0x8(%esp),%xmm1
  0xa76a511b: add    $0x10,%esp
  0xa76a511e: popf   
  0xa76a511f: popa   
  0xa76a5120: pop    %eax
  0xa76a5121: mov    %esp,%esi
  0xa76a5123: sub    $0x18,%esp
  0xa76a5126: mov    %ecx,0x14(%esp)
  0xa76a512a: mov    %edx,0x10(%esp)
  0xa76a512e: mov    0x18(%esp),%edi
  0xa76a5132: mov    %edi,0x8(%esp)
  0xa76a5136: mov    0x1c(%esp),%edi
  0xa76a513a: mov    %edi,0xc(%esp)
  0xa76a513e: vmovsd %xmm0,(%esp)
  0xa76a5143: mov    0x28(%ebx),%ecx
  0xa76a5146: push   %eax
  0xa76a5147: jmp    *%ecx

AHE@0xb6681930: 0xaabe0000 i2c: 0xa76a5200 c2i: 0xa76a52a1 c2iUV: 0xa76a5280
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)D (254 bytes generated)
c2i argument handler starts at 0xa76a52a1
  0xa76a5200: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5203: mov    $0xa75b1ac0,%edi
  0xa76a5208: cmp    %edi,%eax
  0xa76a520a: jbe    0xa76a521d
  0xa76a5210: mov    $0xa7691ac0,%edi
  0xa76a5215: cmp    %edi,%eax
  0xa76a5217: jb     0xa76a5248
  0xa76a521d: mov    $0xa75af400,%edi
  0xa76a5222: cmp    %edi,%eax
  0xa76a5224: jbe    0xa76a5237
  0xa76a522a: mov    $0xa75b1728,%edi
  0xa76a522f: cmp    %edi,%eax
  0xa76a5231: jb     0xa76a5248
  ;; i2c adapter must return to an interpreter frame
  0xa76a5237: push   $0xb75a2830
  0xa76a523c: call   0xa76a5241
  0xa76a5241: pusha  
  0xa76a5242: call   0xb7052f32
  0xa76a5247: hlt    
  ;; } verify_i2ce 
  0xa76a5248: mov    %esp,%edi
  0xa76a524a: sub    $0x8,%esp
  0xa76a524d: and    $0xfffffff0,%esp
  0xa76a5250: push   %eax
  0xa76a5251: mov    %edi,%eax
  0xa76a5253: mov    0x30(%ebx),%edi
  0xa76a5256: mov    0x10(%eax),%ecx
  0xa76a5259: mov    0xc(%eax),%edx
  0xa76a525c: mov    0x4(%eax),%esi
  0xa76a525f: mov    %esi,0x4(%esp)
  0xa76a5263: mov    0x8(%eax),%esi
  0xa76a5266: mov    %esi,0x8(%esp)
  0xa76a526a: mov    %esp,%eax
  0xa76a526c: shr    $0xc,%eax
  0xa76a526f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a5276: mov    %ebx,0x16c(%eax)
  0xa76a527c: mov    %ebx,%eax
  0xa76a527e: jmp    *%edi
  0xa76a5280: mov    0x4(%ecx),%ebx
  0xa76a5283: cmp    0x8(%eax),%ebx
  0xa76a5286: mov    0x4(%eax),%ebx
  0xa76a5289: jne    0xa76a529c
  0xa76a528f: cmpl   $0x0,0x34(%ebx)
  0xa76a5296: je     0xa76a52db
  0xa76a529c: jmp    0xa7692560
  0xa76a52a1: cmpl   $0x0,0x34(%ebx)
  0xa76a52a8: je     0xa76a52db
  0xa76a52ae: mov    (%esp),%eax
  0xa76a52b1: pusha  
  0xa76a52b2: pushf  
  0xa76a52b3: sub    $0x10,%esp
  0xa76a52b6: vmovsd %xmm0,(%esp)
  0xa76a52bb: vmovsd %xmm1,0x8(%esp)
  0xa76a52c1: push   %eax
  0xa76a52c2: push   %ebx
  0xa76a52c3: call   0xb71d62fc
  0xa76a52c8: add    $0x8,%esp
  0xa76a52cb: vmovsd (%esp),%xmm0
  0xa76a52d0: vmovsd 0x8(%esp),%xmm1
  0xa76a52d6: add    $0x10,%esp
  0xa76a52d9: popf   
  0xa76a52da: popa   
  0xa76a52db: pop    %eax
  0xa76a52dc: mov    %esp,%esi
  0xa76a52de: sub    $0x10,%esp
  0xa76a52e1: mov    %ecx,0xc(%esp)
  0xa76a52e5: mov    %edx,0x8(%esp)
  0xa76a52e9: mov    0x10(%esp),%edi
  0xa76a52ed: mov    %edi,(%esp)
  0xa76a52f0: mov    0x14(%esp),%edi
  0xa76a52f4: mov    %edi,0x4(%esp)
  0xa76a52f8: mov    0x28(%ebx),%ecx
  0xa76a52fb: push   %eax
  0xa76a52fc: jmp    *%ecx

AHE@0xb6681954: 0xaabe6000 i2c: 0xa76a5380 c2i: 0xa76a5426 c2iUV: 0xa76a5405
i2c argument handler #0 for: receiver (Ljava/lang/Object;JF)V (265 bytes generated)
c2i argument handler starts at 0xa76a5426
  0xa76a5380: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5383: mov    $0xa75b1ac0,%edi
  0xa76a5388: cmp    %edi,%eax
  0xa76a538a: jbe    0xa76a539d
  0xa76a5390: mov    $0xa7691ac0,%edi
  0xa76a5395: cmp    %edi,%eax
  0xa76a5397: jb     0xa76a53c8
  0xa76a539d: mov    $0xa75af400,%edi
  0xa76a53a2: cmp    %edi,%eax
  0xa76a53a4: jbe    0xa76a53b7
  0xa76a53aa: mov    $0xa75b1728,%edi
  0xa76a53af: cmp    %edi,%eax
  0xa76a53b1: jb     0xa76a53c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a53b7: push   $0xb75a2830
  0xa76a53bc: call   0xa76a53c1
  0xa76a53c1: pusha  
  0xa76a53c2: call   0xb7052f32
  0xa76a53c7: hlt    
  ;; } verify_i2ce 
  0xa76a53c8: mov    %esp,%edi
  0xa76a53ca: sub    $0x8,%esp
  0xa76a53cd: and    $0xfffffff0,%esp
  0xa76a53d0: push   %eax
  0xa76a53d1: mov    %edi,%eax
  0xa76a53d3: mov    0x30(%ebx),%edi
  0xa76a53d6: mov    0x14(%eax),%ecx
  0xa76a53d9: mov    0x10(%eax),%edx
  0xa76a53dc: mov    0x8(%eax),%esi
  0xa76a53df: mov    %esi,0x4(%esp)
  0xa76a53e3: mov    0xc(%eax),%esi
  0xa76a53e6: mov    %esi,0x8(%esp)
  0xa76a53ea: vmovss 0x4(%eax),%xmm0
  0xa76a53ef: mov    %esp,%eax
  0xa76a53f1: shr    $0xc,%eax
  0xa76a53f4: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a53fb: mov    %ebx,0x16c(%eax)
  0xa76a5401: mov    %ebx,%eax
  0xa76a5403: jmp    *%edi
  0xa76a5405: mov    0x4(%ecx),%ebx
  0xa76a5408: cmp    0x8(%eax),%ebx
  0xa76a540b: mov    0x4(%eax),%ebx
  0xa76a540e: jne    0xa76a5421
  0xa76a5414: cmpl   $0x0,0x34(%ebx)
  0xa76a541b: je     0xa76a5460
  0xa76a5421: jmp    0xa7692560
  0xa76a5426: cmpl   $0x0,0x34(%ebx)
  0xa76a542d: je     0xa76a5460
  0xa76a5433: mov    (%esp),%eax
  0xa76a5436: pusha  
  0xa76a5437: pushf  
  0xa76a5438: sub    $0x10,%esp
  0xa76a543b: vmovsd %xmm0,(%esp)
  0xa76a5440: vmovsd %xmm1,0x8(%esp)
  0xa76a5446: push   %eax
  0xa76a5447: push   %ebx
  0xa76a5448: call   0xb71d62fc
  0xa76a544d: add    $0x8,%esp
  0xa76a5450: vmovsd (%esp),%xmm0
  0xa76a5455: vmovsd 0x8(%esp),%xmm1
  0xa76a545b: add    $0x10,%esp
  0xa76a545e: popf   
  0xa76a545f: popa   
  0xa76a5460: pop    %eax
  0xa76a5461: mov    %esp,%esi
  0xa76a5463: sub    $0x14,%esp
  0xa76a5466: mov    %ecx,0x10(%esp)
  0xa76a546a: mov    %edx,0xc(%esp)
  0xa76a546e: mov    0x14(%esp),%edi
  0xa76a5472: mov    %edi,0x4(%esp)
  0xa76a5476: mov    0x18(%esp),%edi
  0xa76a547a: mov    %edi,0x8(%esp)
  0xa76a547e: vmovss %xmm0,(%esp)
  0xa76a5483: mov    0x28(%ebx),%ecx
  0xa76a5486: push   %eax
  0xa76a5487: jmp    *%ecx

AHE@0xb6681978: 0xaabe0000 i2c: 0xa76a5540 c2i: 0xa76a55e1 c2iUV: 0xa76a55c0
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)F (254 bytes generated)
c2i argument handler starts at 0xa76a55e1
  0xa76a5540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5543: mov    $0xa75b1ac0,%edi
  0xa76a5548: cmp    %edi,%eax
  0xa76a554a: jbe    0xa76a555d
  0xa76a5550: mov    $0xa7691ac0,%edi
  0xa76a5555: cmp    %edi,%eax
  0xa76a5557: jb     0xa76a5588
  0xa76a555d: mov    $0xa75af400,%edi
  0xa76a5562: cmp    %edi,%eax
  0xa76a5564: jbe    0xa76a5577
  0xa76a556a: mov    $0xa75b1728,%edi
  0xa76a556f: cmp    %edi,%eax
  0xa76a5571: jb     0xa76a5588
  ;; i2c adapter must return to an interpreter frame
  0xa76a5577: push   $0xb75a2830
  0xa76a557c: call   0xa76a5581
  0xa76a5581: pusha  
  0xa76a5582: call   0xb7052f32
  0xa76a5587: hlt    
  ;; } verify_i2ce 
  0xa76a5588: mov    %esp,%edi
  0xa76a558a: sub    $0x8,%esp
  0xa76a558d: and    $0xfffffff0,%esp
  0xa76a5590: push   %eax
  0xa76a5591: mov    %edi,%eax
  0xa76a5593: mov    0x30(%ebx),%edi
  0xa76a5596: mov    0x10(%eax),%ecx
  0xa76a5599: mov    0xc(%eax),%edx
  0xa76a559c: mov    0x4(%eax),%esi
  0xa76a559f: mov    %esi,0x4(%esp)
  0xa76a55a3: mov    0x8(%eax),%esi
  0xa76a55a6: mov    %esi,0x8(%esp)
  0xa76a55aa: mov    %esp,%eax
  0xa76a55ac: shr    $0xc,%eax
  0xa76a55af: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a55b6: mov    %ebx,0x16c(%eax)
  0xa76a55bc: mov    %ebx,%eax
  0xa76a55be: jmp    *%edi
  0xa76a55c0: mov    0x4(%ecx),%ebx
  0xa76a55c3: cmp    0x8(%eax),%ebx
  0xa76a55c6: mov    0x4(%eax),%ebx
  0xa76a55c9: jne    0xa76a55dc
  0xa76a55cf: cmpl   $0x0,0x34(%ebx)
  0xa76a55d6: je     0xa76a561b
  0xa76a55dc: jmp    0xa7692560
  0xa76a55e1: cmpl   $0x0,0x34(%ebx)
  0xa76a55e8: je     0xa76a561b
  0xa76a55ee: mov    (%esp),%eax
  0xa76a55f1: pusha  
  0xa76a55f2: pushf  
  0xa76a55f3: sub    $0x10,%esp
  0xa76a55f6: vmovsd %xmm0,(%esp)
  0xa76a55fb: vmovsd %xmm1,0x8(%esp)
  0xa76a5601: push   %eax
  0xa76a5602: push   %ebx
  0xa76a5603: call   0xb71d62fc
  0xa76a5608: add    $0x8,%esp
  0xa76a560b: vmovsd (%esp),%xmm0
  0xa76a5610: vmovsd 0x8(%esp),%xmm1
  0xa76a5616: add    $0x10,%esp
  0xa76a5619: popf   
  0xa76a561a: popa   
  0xa76a561b: pop    %eax
  0xa76a561c: mov    %esp,%esi
  0xa76a561e: sub    $0x10,%esp
  0xa76a5621: mov    %ecx,0xc(%esp)
  0xa76a5625: mov    %edx,0x8(%esp)
  0xa76a5629: mov    0x10(%esp),%edi
  0xa76a562d: mov    %edi,(%esp)
  0xa76a5630: mov    0x14(%esp),%edi
  0xa76a5634: mov    %edi,0x4(%esp)
  0xa76a5638: mov    0x28(%ebx),%ecx
  0xa76a563b: push   %eax
  0xa76a563c: jmp    *%ecx

AHE@0xb668199c: 0xaabebe00 i2c: 0xa76a56c0 c2i: 0xa76a576f c2iUV: 0xa76a574e
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (284 bytes generated)
c2i argument handler starts at 0xa76a576f
  0xa76a56c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a56c3: mov    $0xa75b1ac0,%edi
  0xa76a56c8: cmp    %edi,%eax
  0xa76a56ca: jbe    0xa76a56dd
  0xa76a56d0: mov    $0xa7691ac0,%edi
  0xa76a56d5: cmp    %edi,%eax
  0xa76a56d7: jb     0xa76a5708
  0xa76a56dd: mov    $0xa75af400,%edi
  0xa76a56e2: cmp    %edi,%eax
  0xa76a56e4: jbe    0xa76a56f7
  0xa76a56ea: mov    $0xa75b1728,%edi
  0xa76a56ef: cmp    %edi,%eax
  0xa76a56f1: jb     0xa76a5708
  ;; i2c adapter must return to an interpreter frame
  0xa76a56f7: push   $0xb75a2830
  0xa76a56fc: call   0xa76a5701
  0xa76a5701: pusha  
  0xa76a5702: call   0xb7052f32
  0xa76a5707: hlt    
  ;; } verify_i2ce 
  0xa76a5708: mov    %esp,%edi
  0xa76a570a: sub    $0x10,%esp
  0xa76a570d: and    $0xfffffff0,%esp
  0xa76a5710: push   %eax
  0xa76a5711: mov    %edi,%eax
  0xa76a5713: mov    0x30(%ebx),%edi
  0xa76a5716: mov    0x18(%eax),%ecx
  0xa76a5719: mov    0x14(%eax),%edx
  0xa76a571c: mov    0xc(%eax),%esi
  0xa76a571f: mov    %esi,0x4(%esp)
  0xa76a5723: mov    0x10(%eax),%esi
  0xa76a5726: mov    %esi,0x8(%esp)
  0xa76a572a: mov    0x4(%eax),%esi
  0xa76a572d: mov    %esi,0xc(%esp)
  0xa76a5731: mov    0x8(%eax),%esi
  0xa76a5734: mov    %esi,0x10(%esp)
  0xa76a5738: mov    %esp,%eax
  0xa76a573a: shr    $0xc,%eax
  0xa76a573d: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a5744: mov    %ebx,0x16c(%eax)
  0xa76a574a: mov    %ebx,%eax
  0xa76a574c: jmp    *%edi
  0xa76a574e: mov    0x4(%ecx),%ebx
  0xa76a5751: cmp    0x8(%eax),%ebx
  0xa76a5754: mov    0x4(%eax),%ebx
  0xa76a5757: jne    0xa76a576a
  0xa76a575d: cmpl   $0x0,0x34(%ebx)
  0xa76a5764: je     0xa76a57a9
  0xa76a576a: jmp    0xa7692560
  0xa76a576f: cmpl   $0x0,0x34(%ebx)
  0xa76a5776: je     0xa76a57a9
  0xa76a577c: mov    (%esp),%eax
  0xa76a577f: pusha  
  0xa76a5780: pushf  
  0xa76a5781: sub    $0x10,%esp
  0xa76a5784: vmovsd %xmm0,(%esp)
  0xa76a5789: vmovsd %xmm1,0x8(%esp)
  0xa76a578f: push   %eax
  0xa76a5790: push   %ebx
  0xa76a5791: call   0xb71d62fc
  0xa76a5796: add    $0x8,%esp
  0xa76a5799: vmovsd (%esp),%xmm0
  0xa76a579e: vmovsd 0x8(%esp),%xmm1
  0xa76a57a4: add    $0x10,%esp
  0xa76a57a7: popf   
  0xa76a57a8: popa   
  0xa76a57a9: pop    %eax
  0xa76a57aa: mov    %esp,%esi
  0xa76a57ac: sub    $0x18,%esp
  0xa76a57af: mov    %ecx,0x14(%esp)
  0xa76a57b3: mov    %edx,0x10(%esp)
  0xa76a57b7: mov    0x18(%esp),%edi
  0xa76a57bb: mov    %edi,0x8(%esp)
  0xa76a57bf: mov    0x1c(%esp),%edi
  0xa76a57c3: mov    %edi,0xc(%esp)
  0xa76a57c7: mov    0x20(%esp),%edi
  0xa76a57cb: mov    %edi,(%esp)
  0xa76a57ce: mov    0x24(%esp),%edi
  0xa76a57d2: mov    %edi,0x4(%esp)
  0xa76a57d6: mov    0x28(%ebx),%ecx
  0xa76a57d9: push   %eax
  0xa76a57da: jmp    *%ecx

AHE@0xb66819c0: 0xaabe0000 i2c: 0xa76a5880 c2i: 0xa76a5921 c2iUV: 0xa76a5900
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)J (254 bytes generated)
c2i argument handler starts at 0xa76a5921
  0xa76a5880: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5883: mov    $0xa75b1ac0,%edi
  0xa76a5888: cmp    %edi,%eax
  0xa76a588a: jbe    0xa76a589d
  0xa76a5890: mov    $0xa7691ac0,%edi
  0xa76a5895: cmp    %edi,%eax
  0xa76a5897: jb     0xa76a58c8
  0xa76a589d: mov    $0xa75af400,%edi
  0xa76a58a2: cmp    %edi,%eax
  0xa76a58a4: jbe    0xa76a58b7
  0xa76a58aa: mov    $0xa75b1728,%edi
  0xa76a58af: cmp    %edi,%eax
  0xa76a58b1: jb     0xa76a58c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a58b7: push   $0xb75a2830
  0xa76a58bc: call   0xa76a58c1
  0xa76a58c1: pusha  
  0xa76a58c2: call   0xb7052f32
  0xa76a58c7: hlt    
  ;; } verify_i2ce 
  0xa76a58c8: mov    %esp,%edi
  0xa76a58ca: sub    $0x8,%esp
  0xa76a58cd: and    $0xfffffff0,%esp
  0xa76a58d0: push   %eax
  0xa76a58d1: mov    %edi,%eax
  0xa76a58d3: mov    0x30(%ebx),%edi
  0xa76a58d6: mov    0x10(%eax),%ecx
  0xa76a58d9: mov    0xc(%eax),%edx
  0xa76a58dc: mov    0x4(%eax),%esi
  0xa76a58df: mov    %esi,0x4(%esp)
  0xa76a58e3: mov    0x8(%eax),%esi
  0xa76a58e6: mov    %esi,0x8(%esp)
  0xa76a58ea: mov    %esp,%eax
  0xa76a58ec: shr    $0xc,%eax
  0xa76a58ef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a58f6: mov    %ebx,0x16c(%eax)
  0xa76a58fc: mov    %ebx,%eax
  0xa76a58fe: jmp    *%edi
  0xa76a5900: mov    0x4(%ecx),%ebx
  0xa76a5903: cmp    0x8(%eax),%ebx
  0xa76a5906: mov    0x4(%eax),%ebx
  0xa76a5909: jne    0xa76a591c
  0xa76a590f: cmpl   $0x0,0x34(%ebx)
  0xa76a5916: je     0xa76a595b
  0xa76a591c: jmp    0xa7692560
  0xa76a5921: cmpl   $0x0,0x34(%ebx)
  0xa76a5928: je     0xa76a595b
  0xa76a592e: mov    (%esp),%eax
  0xa76a5931: pusha  
  0xa76a5932: pushf  
  0xa76a5933: sub    $0x10,%esp
  0xa76a5936: vmovsd %xmm0,(%esp)
  0xa76a593b: vmovsd %xmm1,0x8(%esp)
  0xa76a5941: push   %eax
  0xa76a5942: push   %ebx
  0xa76a5943: call   0xb71d62fc
  0xa76a5948: add    $0x8,%esp
  0xa76a594b: vmovsd (%esp),%xmm0
  0xa76a5950: vmovsd 0x8(%esp),%xmm1
  0xa76a5956: add    $0x10,%esp
  0xa76a5959: popf   
  0xa76a595a: popa   
  0xa76a595b: pop    %eax
  0xa76a595c: mov    %esp,%esi
  0xa76a595e: sub    $0x10,%esp
  0xa76a5961: mov    %ecx,0xc(%esp)
  0xa76a5965: mov    %edx,0x8(%esp)
  0xa76a5969: mov    0x10(%esp),%edi
  0xa76a596d: mov    %edi,(%esp)
  0xa76a5970: mov    0x14(%esp),%edi
  0xa76a5974: mov    %edi,0x4(%esp)
  0xa76a5978: mov    0x28(%ebx),%ecx
  0xa76a597b: push   %eax
  0xa76a597c: jmp    *%ecx

AHE@0xb66819e4: 0xaabea000 i2c: 0xa76a5a00 c2i: 0xa76a5aa8 c2iUV: 0xa76a5a87
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (269 bytes generated)
c2i argument handler starts at 0xa76a5aa8
  0xa76a5a00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5a03: mov    $0xa75b1ac0,%edi
  0xa76a5a08: cmp    %edi,%eax
  0xa76a5a0a: jbe    0xa76a5a1d
  0xa76a5a10: mov    $0xa7691ac0,%edi
  0xa76a5a15: cmp    %edi,%eax
  0xa76a5a17: jb     0xa76a5a48
  0xa76a5a1d: mov    $0xa75af400,%edi
  0xa76a5a22: cmp    %edi,%eax
  0xa76a5a24: jbe    0xa76a5a37
  0xa76a5a2a: mov    $0xa75b1728,%edi
  0xa76a5a2f: cmp    %edi,%eax
  0xa76a5a31: jb     0xa76a5a48
  ;; i2c adapter must return to an interpreter frame
  0xa76a5a37: push   $0xb75a2830
  0xa76a5a3c: call   0xa76a5a41
  0xa76a5a41: pusha  
  0xa76a5a42: call   0xb7052f32
  0xa76a5a47: hlt    
  ;; } verify_i2ce 
  0xa76a5a48: mov    %esp,%edi
  0xa76a5a4a: sub    $0x10,%esp
  0xa76a5a4d: and    $0xfffffff0,%esp
  0xa76a5a50: push   %eax
  0xa76a5a51: mov    %edi,%eax
  0xa76a5a53: mov    0x30(%ebx),%edi
  0xa76a5a56: mov    0x14(%eax),%ecx
  0xa76a5a59: mov    0x10(%eax),%edx
  0xa76a5a5c: mov    0x8(%eax),%esi
  0xa76a5a5f: mov    %esi,0x4(%esp)
  0xa76a5a63: mov    0xc(%eax),%esi
  0xa76a5a66: mov    %esi,0x8(%esp)
  0xa76a5a6a: mov    0x4(%eax),%esi
  0xa76a5a6d: mov    %esi,0xc(%esp)
  0xa76a5a71: mov    %esp,%eax
  0xa76a5a73: shr    $0xc,%eax
  0xa76a5a76: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a5a7d: mov    %ebx,0x16c(%eax)
  0xa76a5a83: mov    %ebx,%eax
  0xa76a5a85: jmp    *%edi
  0xa76a5a87: mov    0x4(%ecx),%ebx
  0xa76a5a8a: cmp    0x8(%eax),%ebx
  0xa76a5a8d: mov    0x4(%eax),%ebx
  0xa76a5a90: jne    0xa76a5aa3
  0xa76a5a96: cmpl   $0x0,0x34(%ebx)
  0xa76a5a9d: je     0xa76a5ae2
  0xa76a5aa3: jmp    0xa7692560
  0xa76a5aa8: cmpl   $0x0,0x34(%ebx)
  0xa76a5aaf: je     0xa76a5ae2
  0xa76a5ab5: mov    (%esp),%eax
  0xa76a5ab8: pusha  
  0xa76a5ab9: pushf  
  0xa76a5aba: sub    $0x10,%esp
  0xa76a5abd: vmovsd %xmm0,(%esp)
  0xa76a5ac2: vmovsd %xmm1,0x8(%esp)
  0xa76a5ac8: push   %eax
  0xa76a5ac9: push   %ebx
  0xa76a5aca: call   0xb71d62fc
  0xa76a5acf: add    $0x8,%esp
  0xa76a5ad2: vmovsd (%esp),%xmm0
  0xa76a5ad7: vmovsd 0x8(%esp),%xmm1
  0xa76a5add: add    $0x10,%esp
  0xa76a5ae0: popf   
  0xa76a5ae1: popa   
  0xa76a5ae2: pop    %eax
  0xa76a5ae3: mov    %esp,%esi
  0xa76a5ae5: sub    $0x14,%esp
  0xa76a5ae8: mov    %ecx,0x10(%esp)
  0xa76a5aec: mov    %edx,0xc(%esp)
  0xa76a5af0: mov    0x14(%esp),%edi
  0xa76a5af4: mov    %edi,0x4(%esp)
  0xa76a5af8: mov    0x18(%esp),%edi
  0xa76a5afc: mov    %edi,0x8(%esp)
  0xa76a5b00: mov    0x1c(%esp),%edi
  0xa76a5b04: mov    %edi,(%esp)
  0xa76a5b07: mov    0x28(%ebx),%ecx
  0xa76a5b0a: push   %eax
  0xa76a5b0b: jmp    *%ecx

AHE@0xb6681a08: 0xaabe0000 i2c: 0xa76a5bc0 c2i: 0xa76a5c61 c2iUV: 0xa76a5c40
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)I (254 bytes generated)
c2i argument handler starts at 0xa76a5c61
  0xa76a5bc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5bc3: mov    $0xa75b1ac0,%edi
  0xa76a5bc8: cmp    %edi,%eax
  0xa76a5bca: jbe    0xa76a5bdd
  0xa76a5bd0: mov    $0xa7691ac0,%edi
  0xa76a5bd5: cmp    %edi,%eax
  0xa76a5bd7: jb     0xa76a5c08
  0xa76a5bdd: mov    $0xa75af400,%edi
  0xa76a5be2: cmp    %edi,%eax
  0xa76a5be4: jbe    0xa76a5bf7
  0xa76a5bea: mov    $0xa75b1728,%edi
  0xa76a5bef: cmp    %edi,%eax
  0xa76a5bf1: jb     0xa76a5c08
  ;; i2c adapter must return to an interpreter frame
  0xa76a5bf7: push   $0xb75a2830
  0xa76a5bfc: call   0xa76a5c01
  0xa76a5c01: pusha  
  0xa76a5c02: call   0xb7052f32
  0xa76a5c07: hlt    
  ;; } verify_i2ce 
  0xa76a5c08: mov    %esp,%edi
  0xa76a5c0a: sub    $0x8,%esp
  0xa76a5c0d: and    $0xfffffff0,%esp
  0xa76a5c10: push   %eax
  0xa76a5c11: mov    %edi,%eax
  0xa76a5c13: mov    0x30(%ebx),%edi
  0xa76a5c16: mov    0x10(%eax),%ecx
  0xa76a5c19: mov    0xc(%eax),%edx
  0xa76a5c1c: mov    0x4(%eax),%esi
  0xa76a5c1f: mov    %esi,0x4(%esp)
  0xa76a5c23: mov    0x8(%eax),%esi
  0xa76a5c26: mov    %esi,0x8(%esp)
  0xa76a5c2a: mov    %esp,%eax
  0xa76a5c2c: shr    $0xc,%eax
  0xa76a5c2f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a5c36: mov    %ebx,0x16c(%eax)
  0xa76a5c3c: mov    %ebx,%eax
  0xa76a5c3e: jmp    *%edi
  0xa76a5c40: mov    0x4(%ecx),%ebx
  0xa76a5c43: cmp    0x8(%eax),%ebx
  0xa76a5c46: mov    0x4(%eax),%ebx
  0xa76a5c49: jne    0xa76a5c5c
  0xa76a5c4f: cmpl   $0x0,0x34(%ebx)
  0xa76a5c56: je     0xa76a5c9b
  0xa76a5c5c: jmp    0xa7692560
  0xa76a5c61: cmpl   $0x0,0x34(%ebx)
  0xa76a5c68: je     0xa76a5c9b
  0xa76a5c6e: mov    (%esp),%eax
  0xa76a5c71: pusha  
  0xa76a5c72: pushf  
  0xa76a5c73: sub    $0x10,%esp
  0xa76a5c76: vmovsd %xmm0,(%esp)
  0xa76a5c7b: vmovsd %xmm1,0x8(%esp)
  0xa76a5c81: push   %eax
  0xa76a5c82: push   %ebx
  0xa76a5c83: call   0xb71d62fc
  0xa76a5c88: add    $0x8,%esp
  0xa76a5c8b: vmovsd (%esp),%xmm0
  0xa76a5c90: vmovsd 0x8(%esp),%xmm1
  0xa76a5c96: add    $0x10,%esp
  0xa76a5c99: popf   
  0xa76a5c9a: popa   
  0xa76a5c9b: pop    %eax
  0xa76a5c9c: mov    %esp,%esi
  0xa76a5c9e: sub    $0x10,%esp
  0xa76a5ca1: mov    %ecx,0xc(%esp)
  0xa76a5ca5: mov    %edx,0x8(%esp)
  0xa76a5ca9: mov    0x10(%esp),%edi
  0xa76a5cad: mov    %edi,(%esp)
  0xa76a5cb0: mov    0x14(%esp),%edi
  0xa76a5cb4: mov    %edi,0x4(%esp)
  0xa76a5cb8: mov    0x28(%ebx),%ecx
  0xa76a5cbb: push   %eax
  0xa76a5cbc: jmp    *%ecx

AHE@0xb6681a2c: 0xaabea000 i2c: 0xa76a5d40 c2i: 0xa76a5de8 c2iUV: 0xa76a5dc7
i2c argument handler #0 for: receiver (Ljava/lang/Object;JC)V (269 bytes generated)
c2i argument handler starts at 0xa76a5de8
  0xa76a5d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5d43: mov    $0xa75b1ac0,%edi
  0xa76a5d48: cmp    %edi,%eax
  0xa76a5d4a: jbe    0xa76a5d5d
  0xa76a5d50: mov    $0xa7691ac0,%edi
  0xa76a5d55: cmp    %edi,%eax
  0xa76a5d57: jb     0xa76a5d88
  0xa76a5d5d: mov    $0xa75af400,%edi
  0xa76a5d62: cmp    %edi,%eax
  0xa76a5d64: jbe    0xa76a5d77
  0xa76a5d6a: mov    $0xa75b1728,%edi
  0xa76a5d6f: cmp    %edi,%eax
  0xa76a5d71: jb     0xa76a5d88
  ;; i2c adapter must return to an interpreter frame
  0xa76a5d77: push   $0xb75a2830
  0xa76a5d7c: call   0xa76a5d81
  0xa76a5d81: pusha  
  0xa76a5d82: call   0xb7052f32
  0xa76a5d87: hlt    
  ;; } verify_i2ce 
  0xa76a5d88: mov    %esp,%edi
  0xa76a5d8a: sub    $0x10,%esp
  0xa76a5d8d: and    $0xfffffff0,%esp
  0xa76a5d90: push   %eax
  0xa76a5d91: mov    %edi,%eax
  0xa76a5d93: mov    0x30(%ebx),%edi
  0xa76a5d96: mov    0x14(%eax),%ecx
  0xa76a5d99: mov    0x10(%eax),%edx
  0xa76a5d9c: mov    0x8(%eax),%esi
  0xa76a5d9f: mov    %esi,0x4(%esp)
  0xa76a5da3: mov    0xc(%eax),%esi
  0xa76a5da6: mov    %esi,0x8(%esp)
  0xa76a5daa: mov    0x4(%eax),%esi
  0xa76a5dad: mov    %esi,0xc(%esp)
  0xa76a5db1: mov    %esp,%eax
  0xa76a5db3: shr    $0xc,%eax
  0xa76a5db6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a5dbd: mov    %ebx,0x16c(%eax)
  0xa76a5dc3: mov    %ebx,%eax
  0xa76a5dc5: jmp    *%edi
  0xa76a5dc7: mov    0x4(%ecx),%ebx
  0xa76a5dca: cmp    0x8(%eax),%ebx
  0xa76a5dcd: mov    0x4(%eax),%ebx
  0xa76a5dd0: jne    0xa76a5de3
  0xa76a5dd6: cmpl   $0x0,0x34(%ebx)
  0xa76a5ddd: je     0xa76a5e22
  0xa76a5de3: jmp    0xa7692560
  0xa76a5de8: cmpl   $0x0,0x34(%ebx)
  0xa76a5def: je     0xa76a5e22
  0xa76a5df5: mov    (%esp),%eax
  0xa76a5df8: pusha  
  0xa76a5df9: pushf  
  0xa76a5dfa: sub    $0x10,%esp
  0xa76a5dfd: vmovsd %xmm0,(%esp)
  0xa76a5e02: vmovsd %xmm1,0x8(%esp)
  0xa76a5e08: push   %eax
  0xa76a5e09: push   %ebx
  0xa76a5e0a: call   0xb71d62fc
  0xa76a5e0f: add    $0x8,%esp
  0xa76a5e12: vmovsd (%esp),%xmm0
  0xa76a5e17: vmovsd 0x8(%esp),%xmm1
  0xa76a5e1d: add    $0x10,%esp
  0xa76a5e20: popf   
  0xa76a5e21: popa   
  0xa76a5e22: pop    %eax
  0xa76a5e23: mov    %esp,%esi
  0xa76a5e25: sub    $0x14,%esp
  0xa76a5e28: mov    %ecx,0x10(%esp)
  0xa76a5e2c: mov    %edx,0xc(%esp)
  0xa76a5e30: mov    0x14(%esp),%edi
  0xa76a5e34: mov    %edi,0x4(%esp)
  0xa76a5e38: mov    0x18(%esp),%edi
  0xa76a5e3c: mov    %edi,0x8(%esp)
  0xa76a5e40: mov    0x1c(%esp),%edi
  0xa76a5e44: mov    %edi,(%esp)
  0xa76a5e47: mov    0x28(%ebx),%ecx
  0xa76a5e4a: push   %eax
  0xa76a5e4b: jmp    *%ecx

AHE@0xb6681a50: 0xaabe0000 i2c: 0xa76a5f00 c2i: 0xa76a5fa1 c2iUV: 0xa76a5f80
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)C (254 bytes generated)
c2i argument handler starts at 0xa76a5fa1
  0xa76a5f00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a5f03: mov    $0xa75b1ac0,%edi
  0xa76a5f08: cmp    %edi,%eax
  0xa76a5f0a: jbe    0xa76a5f1d
  0xa76a5f10: mov    $0xa7691ac0,%edi
  0xa76a5f15: cmp    %edi,%eax
  0xa76a5f17: jb     0xa76a5f48
  0xa76a5f1d: mov    $0xa75af400,%edi
  0xa76a5f22: cmp    %edi,%eax
  0xa76a5f24: jbe    0xa76a5f37
  0xa76a5f2a: mov    $0xa75b1728,%edi
  0xa76a5f2f: cmp    %edi,%eax
  0xa76a5f31: jb     0xa76a5f48
  ;; i2c adapter must return to an interpreter frame
  0xa76a5f37: push   $0xb75a2830
  0xa76a5f3c: call   0xa76a5f41
  0xa76a5f41: pusha  
  0xa76a5f42: call   0xb7052f32
  0xa76a5f47: hlt    
  ;; } verify_i2ce 
  0xa76a5f48: mov    %esp,%edi
  0xa76a5f4a: sub    $0x8,%esp
  0xa76a5f4d: and    $0xfffffff0,%esp
  0xa76a5f50: push   %eax
  0xa76a5f51: mov    %edi,%eax
  0xa76a5f53: mov    0x30(%ebx),%edi
  0xa76a5f56: mov    0x10(%eax),%ecx
  0xa76a5f59: mov    0xc(%eax),%edx
  0xa76a5f5c: mov    0x4(%eax),%esi
  0xa76a5f5f: mov    %esi,0x4(%esp)
  0xa76a5f63: mov    0x8(%eax),%esi
  0xa76a5f66: mov    %esi,0x8(%esp)
  0xa76a5f6a: mov    %esp,%eax
  0xa76a5f6c: shr    $0xc,%eax
  0xa76a5f6f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a5f76: mov    %ebx,0x16c(%eax)
  0xa76a5f7c: mov    %ebx,%eax
  0xa76a5f7e: jmp    *%edi
  0xa76a5f80: mov    0x4(%ecx),%ebx
  0xa76a5f83: cmp    0x8(%eax),%ebx
  0xa76a5f86: mov    0x4(%eax),%ebx
  0xa76a5f89: jne    0xa76a5f9c
  0xa76a5f8f: cmpl   $0x0,0x34(%ebx)
  0xa76a5f96: je     0xa76a5fdb
  0xa76a5f9c: jmp    0xa7692560
  0xa76a5fa1: cmpl   $0x0,0x34(%ebx)
  0xa76a5fa8: je     0xa76a5fdb
  0xa76a5fae: mov    (%esp),%eax
  0xa76a5fb1: pusha  
  0xa76a5fb2: pushf  
  0xa76a5fb3: sub    $0x10,%esp
  0xa76a5fb6: vmovsd %xmm0,(%esp)
  0xa76a5fbb: vmovsd %xmm1,0x8(%esp)
  0xa76a5fc1: push   %eax
  0xa76a5fc2: push   %ebx
  0xa76a5fc3: call   0xb71d62fc
  0xa76a5fc8: add    $0x8,%esp
  0xa76a5fcb: vmovsd (%esp),%xmm0
  0xa76a5fd0: vmovsd 0x8(%esp),%xmm1
  0xa76a5fd6: add    $0x10,%esp
  0xa76a5fd9: popf   
  0xa76a5fda: popa   
  0xa76a5fdb: pop    %eax
  0xa76a5fdc: mov    %esp,%esi
  0xa76a5fde: sub    $0x10,%esp
  0xa76a5fe1: mov    %ecx,0xc(%esp)
  0xa76a5fe5: mov    %edx,0x8(%esp)
  0xa76a5fe9: mov    0x10(%esp),%edi
  0xa76a5fed: mov    %edi,(%esp)
  0xa76a5ff0: mov    0x14(%esp),%edi
  0xa76a5ff4: mov    %edi,0x4(%esp)
  0xa76a5ff8: mov    0x28(%ebx),%ecx
  0xa76a5ffb: push   %eax
  0xa76a5ffc: jmp    *%ecx

AHE@0xb6681a74: 0xaabea000 i2c: 0xa76a6080 c2i: 0xa76a6128 c2iUV: 0xa76a6107
i2c argument handler #0 for: receiver (Ljava/lang/Object;JS)V (269 bytes generated)
c2i argument handler starts at 0xa76a6128
  0xa76a6080: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6083: mov    $0xa75b1ac0,%edi
  0xa76a6088: cmp    %edi,%eax
  0xa76a608a: jbe    0xa76a609d
  0xa76a6090: mov    $0xa7691ac0,%edi
  0xa76a6095: cmp    %edi,%eax
  0xa76a6097: jb     0xa76a60c8
  0xa76a609d: mov    $0xa75af400,%edi
  0xa76a60a2: cmp    %edi,%eax
  0xa76a60a4: jbe    0xa76a60b7
  0xa76a60aa: mov    $0xa75b1728,%edi
  0xa76a60af: cmp    %edi,%eax
  0xa76a60b1: jb     0xa76a60c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a60b7: push   $0xb75a2830
  0xa76a60bc: call   0xa76a60c1
  0xa76a60c1: pusha  
  0xa76a60c2: call   0xb7052f32
  0xa76a60c7: hlt    
  ;; } verify_i2ce 
  0xa76a60c8: mov    %esp,%edi
  0xa76a60ca: sub    $0x10,%esp
  0xa76a60cd: and    $0xfffffff0,%esp
  0xa76a60d0: push   %eax
  0xa76a60d1: mov    %edi,%eax
  0xa76a60d3: mov    0x30(%ebx),%edi
  0xa76a60d6: mov    0x14(%eax),%ecx
  0xa76a60d9: mov    0x10(%eax),%edx
  0xa76a60dc: mov    0x8(%eax),%esi
  0xa76a60df: mov    %esi,0x4(%esp)
  0xa76a60e3: mov    0xc(%eax),%esi
  0xa76a60e6: mov    %esi,0x8(%esp)
  0xa76a60ea: mov    0x4(%eax),%esi
  0xa76a60ed: mov    %esi,0xc(%esp)
  0xa76a60f1: mov    %esp,%eax
  0xa76a60f3: shr    $0xc,%eax
  0xa76a60f6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a60fd: mov    %ebx,0x16c(%eax)
  0xa76a6103: mov    %ebx,%eax
  0xa76a6105: jmp    *%edi
  0xa76a6107: mov    0x4(%ecx),%ebx
  0xa76a610a: cmp    0x8(%eax),%ebx
  0xa76a610d: mov    0x4(%eax),%ebx
  0xa76a6110: jne    0xa76a6123
  0xa76a6116: cmpl   $0x0,0x34(%ebx)
  0xa76a611d: je     0xa76a6162
  0xa76a6123: jmp    0xa7692560
  0xa76a6128: cmpl   $0x0,0x34(%ebx)
  0xa76a612f: je     0xa76a6162
  0xa76a6135: mov    (%esp),%eax
  0xa76a6138: pusha  
  0xa76a6139: pushf  
  0xa76a613a: sub    $0x10,%esp
  0xa76a613d: vmovsd %xmm0,(%esp)
  0xa76a6142: vmovsd %xmm1,0x8(%esp)
  0xa76a6148: push   %eax
  0xa76a6149: push   %ebx
  0xa76a614a: call   0xb71d62fc
  0xa76a614f: add    $0x8,%esp
  0xa76a6152: vmovsd (%esp),%xmm0
  0xa76a6157: vmovsd 0x8(%esp),%xmm1
  0xa76a615d: add    $0x10,%esp
  0xa76a6160: popf   
  0xa76a6161: popa   
  0xa76a6162: pop    %eax
  0xa76a6163: mov    %esp,%esi
  0xa76a6165: sub    $0x14,%esp
  0xa76a6168: mov    %ecx,0x10(%esp)
  0xa76a616c: mov    %edx,0xc(%esp)
  0xa76a6170: mov    0x14(%esp),%edi
  0xa76a6174: mov    %edi,0x4(%esp)
  0xa76a6178: mov    0x18(%esp),%edi
  0xa76a617c: mov    %edi,0x8(%esp)
  0xa76a6180: mov    0x1c(%esp),%edi
  0xa76a6184: mov    %edi,(%esp)
  0xa76a6187: mov    0x28(%ebx),%ecx
  0xa76a618a: push   %eax
  0xa76a618b: jmp    *%ecx

AHE@0xb6681a98: 0xaabe0000 i2c: 0xa76a6240 c2i: 0xa76a62e1 c2iUV: 0xa76a62c0
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)S (254 bytes generated)
c2i argument handler starts at 0xa76a62e1
  0xa76a6240: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6243: mov    $0xa75b1ac0,%edi
  0xa76a6248: cmp    %edi,%eax
  0xa76a624a: jbe    0xa76a625d
  0xa76a6250: mov    $0xa7691ac0,%edi
  0xa76a6255: cmp    %edi,%eax
  0xa76a6257: jb     0xa76a6288
  0xa76a625d: mov    $0xa75af400,%edi
  0xa76a6262: cmp    %edi,%eax
  0xa76a6264: jbe    0xa76a6277
  0xa76a626a: mov    $0xa75b1728,%edi
  0xa76a626f: cmp    %edi,%eax
  0xa76a6271: jb     0xa76a6288
  ;; i2c adapter must return to an interpreter frame
  0xa76a6277: push   $0xb75a2830
  0xa76a627c: call   0xa76a6281
  0xa76a6281: pusha  
  0xa76a6282: call   0xb7052f32
  0xa76a6287: hlt    
  ;; } verify_i2ce 
  0xa76a6288: mov    %esp,%edi
  0xa76a628a: sub    $0x8,%esp
  0xa76a628d: and    $0xfffffff0,%esp
  0xa76a6290: push   %eax
  0xa76a6291: mov    %edi,%eax
  0xa76a6293: mov    0x30(%ebx),%edi
  0xa76a6296: mov    0x10(%eax),%ecx
  0xa76a6299: mov    0xc(%eax),%edx
  0xa76a629c: mov    0x4(%eax),%esi
  0xa76a629f: mov    %esi,0x4(%esp)
  0xa76a62a3: mov    0x8(%eax),%esi
  0xa76a62a6: mov    %esi,0x8(%esp)
  0xa76a62aa: mov    %esp,%eax
  0xa76a62ac: shr    $0xc,%eax
  0xa76a62af: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a62b6: mov    %ebx,0x16c(%eax)
  0xa76a62bc: mov    %ebx,%eax
  0xa76a62be: jmp    *%edi
  0xa76a62c0: mov    0x4(%ecx),%ebx
  0xa76a62c3: cmp    0x8(%eax),%ebx
  0xa76a62c6: mov    0x4(%eax),%ebx
  0xa76a62c9: jne    0xa76a62dc
  0xa76a62cf: cmpl   $0x0,0x34(%ebx)
  0xa76a62d6: je     0xa76a631b
  0xa76a62dc: jmp    0xa7692560
  0xa76a62e1: cmpl   $0x0,0x34(%ebx)
  0xa76a62e8: je     0xa76a631b
  0xa76a62ee: mov    (%esp),%eax
  0xa76a62f1: pusha  
  0xa76a62f2: pushf  
  0xa76a62f3: sub    $0x10,%esp
  0xa76a62f6: vmovsd %xmm0,(%esp)
  0xa76a62fb: vmovsd %xmm1,0x8(%esp)
  0xa76a6301: push   %eax
  0xa76a6302: push   %ebx
  0xa76a6303: call   0xb71d62fc
  0xa76a6308: add    $0x8,%esp
  0xa76a630b: vmovsd (%esp),%xmm0
  0xa76a6310: vmovsd 0x8(%esp),%xmm1
  0xa76a6316: add    $0x10,%esp
  0xa76a6319: popf   
  0xa76a631a: popa   
  0xa76a631b: pop    %eax
  0xa76a631c: mov    %esp,%esi
  0xa76a631e: sub    $0x10,%esp
  0xa76a6321: mov    %ecx,0xc(%esp)
  0xa76a6325: mov    %edx,0x8(%esp)
  0xa76a6329: mov    0x10(%esp),%edi
  0xa76a632d: mov    %edi,(%esp)
  0xa76a6330: mov    0x14(%esp),%edi
  0xa76a6334: mov    %edi,0x4(%esp)
  0xa76a6338: mov    0x28(%ebx),%ecx
  0xa76a633b: push   %eax
  0xa76a633c: jmp    *%ecx

AHE@0xb6681abc: 0xaabea000 i2c: 0xa76a63c0 c2i: 0xa76a6468 c2iUV: 0xa76a6447
i2c argument handler #0 for: receiver (Ljava/lang/Object;JB)V (269 bytes generated)
c2i argument handler starts at 0xa76a6468
  0xa76a63c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a63c3: mov    $0xa75b1ac0,%edi
  0xa76a63c8: cmp    %edi,%eax
  0xa76a63ca: jbe    0xa76a63dd
  0xa76a63d0: mov    $0xa7691ac0,%edi
  0xa76a63d5: cmp    %edi,%eax
  0xa76a63d7: jb     0xa76a6408
  0xa76a63dd: mov    $0xa75af400,%edi
  0xa76a63e2: cmp    %edi,%eax
  0xa76a63e4: jbe    0xa76a63f7
  0xa76a63ea: mov    $0xa75b1728,%edi
  0xa76a63ef: cmp    %edi,%eax
  0xa76a63f1: jb     0xa76a6408
  ;; i2c adapter must return to an interpreter frame
  0xa76a63f7: push   $0xb75a2830
  0xa76a63fc: call   0xa76a6401
  0xa76a6401: pusha  
  0xa76a6402: call   0xb7052f32
  0xa76a6407: hlt    
  ;; } verify_i2ce 
  0xa76a6408: mov    %esp,%edi
  0xa76a640a: sub    $0x10,%esp
  0xa76a640d: and    $0xfffffff0,%esp
  0xa76a6410: push   %eax
  0xa76a6411: mov    %edi,%eax
  0xa76a6413: mov    0x30(%ebx),%edi
  0xa76a6416: mov    0x14(%eax),%ecx
  0xa76a6419: mov    0x10(%eax),%edx
  0xa76a641c: mov    0x8(%eax),%esi
  0xa76a641f: mov    %esi,0x4(%esp)
  0xa76a6423: mov    0xc(%eax),%esi
  0xa76a6426: mov    %esi,0x8(%esp)
  0xa76a642a: mov    0x4(%eax),%esi
  0xa76a642d: mov    %esi,0xc(%esp)
  0xa76a6431: mov    %esp,%eax
  0xa76a6433: shr    $0xc,%eax
  0xa76a6436: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a643d: mov    %ebx,0x16c(%eax)
  0xa76a6443: mov    %ebx,%eax
  0xa76a6445: jmp    *%edi
  0xa76a6447: mov    0x4(%ecx),%ebx
  0xa76a644a: cmp    0x8(%eax),%ebx
  0xa76a644d: mov    0x4(%eax),%ebx
  0xa76a6450: jne    0xa76a6463
  0xa76a6456: cmpl   $0x0,0x34(%ebx)
  0xa76a645d: je     0xa76a64a2
  0xa76a6463: jmp    0xa7692560
  0xa76a6468: cmpl   $0x0,0x34(%ebx)
  0xa76a646f: je     0xa76a64a2
  0xa76a6475: mov    (%esp),%eax
  0xa76a6478: pusha  
  0xa76a6479: pushf  
  0xa76a647a: sub    $0x10,%esp
  0xa76a647d: vmovsd %xmm0,(%esp)
  0xa76a6482: vmovsd %xmm1,0x8(%esp)
  0xa76a6488: push   %eax
  0xa76a6489: push   %ebx
  0xa76a648a: call   0xb71d62fc
  0xa76a648f: add    $0x8,%esp
  0xa76a6492: vmovsd (%esp),%xmm0
  0xa76a6497: vmovsd 0x8(%esp),%xmm1
  0xa76a649d: add    $0x10,%esp
  0xa76a64a0: popf   
  0xa76a64a1: popa   
  0xa76a64a2: pop    %eax
  0xa76a64a3: mov    %esp,%esi
  0xa76a64a5: sub    $0x14,%esp
  0xa76a64a8: mov    %ecx,0x10(%esp)
  0xa76a64ac: mov    %edx,0xc(%esp)
  0xa76a64b0: mov    0x14(%esp),%edi
  0xa76a64b4: mov    %edi,0x4(%esp)
  0xa76a64b8: mov    0x18(%esp),%edi
  0xa76a64bc: mov    %edi,0x8(%esp)
  0xa76a64c0: mov    0x1c(%esp),%edi
  0xa76a64c4: mov    %edi,(%esp)
  0xa76a64c7: mov    0x28(%ebx),%ecx
  0xa76a64ca: push   %eax
  0xa76a64cb: jmp    *%ecx

AHE@0xb6681ae0: 0xaabe0000 i2c: 0xa76a6580 c2i: 0xa76a6621 c2iUV: 0xa76a6600
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)B (254 bytes generated)
c2i argument handler starts at 0xa76a6621
  0xa76a6580: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6583: mov    $0xa75b1ac0,%edi
  0xa76a6588: cmp    %edi,%eax
  0xa76a658a: jbe    0xa76a659d
  0xa76a6590: mov    $0xa7691ac0,%edi
  0xa76a6595: cmp    %edi,%eax
  0xa76a6597: jb     0xa76a65c8
  0xa76a659d: mov    $0xa75af400,%edi
  0xa76a65a2: cmp    %edi,%eax
  0xa76a65a4: jbe    0xa76a65b7
  0xa76a65aa: mov    $0xa75b1728,%edi
  0xa76a65af: cmp    %edi,%eax
  0xa76a65b1: jb     0xa76a65c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a65b7: push   $0xb75a2830
  0xa76a65bc: call   0xa76a65c1
  0xa76a65c1: pusha  
  0xa76a65c2: call   0xb7052f32
  0xa76a65c7: hlt    
  ;; } verify_i2ce 
  0xa76a65c8: mov    %esp,%edi
  0xa76a65ca: sub    $0x8,%esp
  0xa76a65cd: and    $0xfffffff0,%esp
  0xa76a65d0: push   %eax
  0xa76a65d1: mov    %edi,%eax
  0xa76a65d3: mov    0x30(%ebx),%edi
  0xa76a65d6: mov    0x10(%eax),%ecx
  0xa76a65d9: mov    0xc(%eax),%edx
  0xa76a65dc: mov    0x4(%eax),%esi
  0xa76a65df: mov    %esi,0x4(%esp)
  0xa76a65e3: mov    0x8(%eax),%esi
  0xa76a65e6: mov    %esi,0x8(%esp)
  0xa76a65ea: mov    %esp,%eax
  0xa76a65ec: shr    $0xc,%eax
  0xa76a65ef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a65f6: mov    %ebx,0x16c(%eax)
  0xa76a65fc: mov    %ebx,%eax
  0xa76a65fe: jmp    *%edi
  0xa76a6600: mov    0x4(%ecx),%ebx
  0xa76a6603: cmp    0x8(%eax),%ebx
  0xa76a6606: mov    0x4(%eax),%ebx
  0xa76a6609: jne    0xa76a661c
  0xa76a660f: cmpl   $0x0,0x34(%ebx)
  0xa76a6616: je     0xa76a665b
  0xa76a661c: jmp    0xa7692560
  0xa76a6621: cmpl   $0x0,0x34(%ebx)
  0xa76a6628: je     0xa76a665b
  0xa76a662e: mov    (%esp),%eax
  0xa76a6631: pusha  
  0xa76a6632: pushf  
  0xa76a6633: sub    $0x10,%esp
  0xa76a6636: vmovsd %xmm0,(%esp)
  0xa76a663b: vmovsd %xmm1,0x8(%esp)
  0xa76a6641: push   %eax
  0xa76a6642: push   %ebx
  0xa76a6643: call   0xb71d62fc
  0xa76a6648: add    $0x8,%esp
  0xa76a664b: vmovsd (%esp),%xmm0
  0xa76a6650: vmovsd 0x8(%esp),%xmm1
  0xa76a6656: add    $0x10,%esp
  0xa76a6659: popf   
  0xa76a665a: popa   
  0xa76a665b: pop    %eax
  0xa76a665c: mov    %esp,%esi
  0xa76a665e: sub    $0x10,%esp
  0xa76a6661: mov    %ecx,0xc(%esp)
  0xa76a6665: mov    %edx,0x8(%esp)
  0xa76a6669: mov    0x10(%esp),%edi
  0xa76a666d: mov    %edi,(%esp)
  0xa76a6670: mov    0x14(%esp),%edi
  0xa76a6674: mov    %edi,0x4(%esp)
  0xa76a6678: mov    0x28(%ebx),%ecx
  0xa76a667b: push   %eax
  0xa76a667c: jmp    *%ecx

AHE@0xb6681b04: 0xaabea000 i2c: 0xa76a6700 c2i: 0xa76a67a8 c2iUV: 0xa76a6787
i2c argument handler #0 for: receiver (Ljava/lang/Object;JZ)V (269 bytes generated)
c2i argument handler starts at 0xa76a67a8
  0xa76a6700: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6703: mov    $0xa75b1ac0,%edi
  0xa76a6708: cmp    %edi,%eax
  0xa76a670a: jbe    0xa76a671d
  0xa76a6710: mov    $0xa7691ac0,%edi
  0xa76a6715: cmp    %edi,%eax
  0xa76a6717: jb     0xa76a6748
  0xa76a671d: mov    $0xa75af400,%edi
  0xa76a6722: cmp    %edi,%eax
  0xa76a6724: jbe    0xa76a6737
  0xa76a672a: mov    $0xa75b1728,%edi
  0xa76a672f: cmp    %edi,%eax
  0xa76a6731: jb     0xa76a6748
  ;; i2c adapter must return to an interpreter frame
  0xa76a6737: push   $0xb75a2830
  0xa76a673c: call   0xa76a6741
  0xa76a6741: pusha  
  0xa76a6742: call   0xb7052f32
  0xa76a6747: hlt    
  ;; } verify_i2ce 
  0xa76a6748: mov    %esp,%edi
  0xa76a674a: sub    $0x10,%esp
  0xa76a674d: and    $0xfffffff0,%esp
  0xa76a6750: push   %eax
  0xa76a6751: mov    %edi,%eax
  0xa76a6753: mov    0x30(%ebx),%edi
  0xa76a6756: mov    0x14(%eax),%ecx
  0xa76a6759: mov    0x10(%eax),%edx
  0xa76a675c: mov    0x8(%eax),%esi
  0xa76a675f: mov    %esi,0x4(%esp)
  0xa76a6763: mov    0xc(%eax),%esi
  0xa76a6766: mov    %esi,0x8(%esp)
  0xa76a676a: mov    0x4(%eax),%esi
  0xa76a676d: mov    %esi,0xc(%esp)
  0xa76a6771: mov    %esp,%eax
  0xa76a6773: shr    $0xc,%eax
  0xa76a6776: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a677d: mov    %ebx,0x16c(%eax)
  0xa76a6783: mov    %ebx,%eax
  0xa76a6785: jmp    *%edi
  0xa76a6787: mov    0x4(%ecx),%ebx
  0xa76a678a: cmp    0x8(%eax),%ebx
  0xa76a678d: mov    0x4(%eax),%ebx
  0xa76a6790: jne    0xa76a67a3
  0xa76a6796: cmpl   $0x0,0x34(%ebx)
  0xa76a679d: je     0xa76a67e2
  0xa76a67a3: jmp    0xa7692560
  0xa76a67a8: cmpl   $0x0,0x34(%ebx)
  0xa76a67af: je     0xa76a67e2
  0xa76a67b5: mov    (%esp),%eax
  0xa76a67b8: pusha  
  0xa76a67b9: pushf  
  0xa76a67ba: sub    $0x10,%esp
  0xa76a67bd: vmovsd %xmm0,(%esp)
  0xa76a67c2: vmovsd %xmm1,0x8(%esp)
  0xa76a67c8: push   %eax
  0xa76a67c9: push   %ebx
  0xa76a67ca: call   0xb71d62fc
  0xa76a67cf: add    $0x8,%esp
  0xa76a67d2: vmovsd (%esp),%xmm0
  0xa76a67d7: vmovsd 0x8(%esp),%xmm1
  0xa76a67dd: add    $0x10,%esp
  0xa76a67e0: popf   
  0xa76a67e1: popa   
  0xa76a67e2: pop    %eax
  0xa76a67e3: mov    %esp,%esi
  0xa76a67e5: sub    $0x14,%esp
  0xa76a67e8: mov    %ecx,0x10(%esp)
  0xa76a67ec: mov    %edx,0xc(%esp)
  0xa76a67f0: mov    0x14(%esp),%edi
  0xa76a67f4: mov    %edi,0x4(%esp)
  0xa76a67f8: mov    0x18(%esp),%edi
  0xa76a67fc: mov    %edi,0x8(%esp)
  0xa76a6800: mov    0x1c(%esp),%edi
  0xa76a6804: mov    %edi,(%esp)
  0xa76a6807: mov    0x28(%ebx),%ecx
  0xa76a680a: push   %eax
  0xa76a680b: jmp    *%ecx

AHE@0xb6681b28: 0xaabe0000 i2c: 0xa76a68c0 c2i: 0xa76a6961 c2iUV: 0xa76a6940
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Z (254 bytes generated)
c2i argument handler starts at 0xa76a6961
  0xa76a68c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a68c3: mov    $0xa75b1ac0,%edi
  0xa76a68c8: cmp    %edi,%eax
  0xa76a68ca: jbe    0xa76a68dd
  0xa76a68d0: mov    $0xa7691ac0,%edi
  0xa76a68d5: cmp    %edi,%eax
  0xa76a68d7: jb     0xa76a6908
  0xa76a68dd: mov    $0xa75af400,%edi
  0xa76a68e2: cmp    %edi,%eax
  0xa76a68e4: jbe    0xa76a68f7
  0xa76a68ea: mov    $0xa75b1728,%edi
  0xa76a68ef: cmp    %edi,%eax
  0xa76a68f1: jb     0xa76a6908
  ;; i2c adapter must return to an interpreter frame
  0xa76a68f7: push   $0xb75a2830
  0xa76a68fc: call   0xa76a6901
  0xa76a6901: pusha  
  0xa76a6902: call   0xb7052f32
  0xa76a6907: hlt    
  ;; } verify_i2ce 
  0xa76a6908: mov    %esp,%edi
  0xa76a690a: sub    $0x8,%esp
  0xa76a690d: and    $0xfffffff0,%esp
  0xa76a6910: push   %eax
  0xa76a6911: mov    %edi,%eax
  0xa76a6913: mov    0x30(%ebx),%edi
  0xa76a6916: mov    0x10(%eax),%ecx
  0xa76a6919: mov    0xc(%eax),%edx
  0xa76a691c: mov    0x4(%eax),%esi
  0xa76a691f: mov    %esi,0x4(%esp)
  0xa76a6923: mov    0x8(%eax),%esi
  0xa76a6926: mov    %esi,0x8(%esp)
  0xa76a692a: mov    %esp,%eax
  0xa76a692c: shr    $0xc,%eax
  0xa76a692f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a6936: mov    %ebx,0x16c(%eax)
  0xa76a693c: mov    %ebx,%eax
  0xa76a693e: jmp    *%edi
  0xa76a6940: mov    0x4(%ecx),%ebx
  0xa76a6943: cmp    0x8(%eax),%ebx
  0xa76a6946: mov    0x4(%eax),%ebx
  0xa76a6949: jne    0xa76a695c
  0xa76a694f: cmpl   $0x0,0x34(%ebx)
  0xa76a6956: je     0xa76a699b
  0xa76a695c: jmp    0xa7692560
  0xa76a6961: cmpl   $0x0,0x34(%ebx)
  0xa76a6968: je     0xa76a699b
  0xa76a696e: mov    (%esp),%eax
  0xa76a6971: pusha  
  0xa76a6972: pushf  
  0xa76a6973: sub    $0x10,%esp
  0xa76a6976: vmovsd %xmm0,(%esp)
  0xa76a697b: vmovsd %xmm1,0x8(%esp)
  0xa76a6981: push   %eax
  0xa76a6982: push   %ebx
  0xa76a6983: call   0xb71d62fc
  0xa76a6988: add    $0x8,%esp
  0xa76a698b: vmovsd (%esp),%xmm0
  0xa76a6990: vmovsd 0x8(%esp),%xmm1
  0xa76a6996: add    $0x10,%esp
  0xa76a6999: popf   
  0xa76a699a: popa   
  0xa76a699b: pop    %eax
  0xa76a699c: mov    %esp,%esi
  0xa76a699e: sub    $0x10,%esp
  0xa76a69a1: mov    %ecx,0xc(%esp)
  0xa76a69a5: mov    %edx,0x8(%esp)
  0xa76a69a9: mov    0x10(%esp),%edi
  0xa76a69ad: mov    %edi,(%esp)
  0xa76a69b0: mov    0x14(%esp),%edi
  0xa76a69b4: mov    %edi,0x4(%esp)
  0xa76a69b8: mov    0x28(%ebx),%ecx
  0xa76a69bb: push   %eax
  0xa76a69bc: jmp    *%ecx

AHE@0xb6681b4c: 0xaabea000 i2c: 0xa76a6a40 c2i: 0xa76a6ae8 c2iUV: 0xa76a6ac7
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (269 bytes generated)
c2i argument handler starts at 0xa76a6ae8
  0xa76a6a40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6a43: mov    $0xa75b1ac0,%edi
  0xa76a6a48: cmp    %edi,%eax
  0xa76a6a4a: jbe    0xa76a6a5d
  0xa76a6a50: mov    $0xa7691ac0,%edi
  0xa76a6a55: cmp    %edi,%eax
  0xa76a6a57: jb     0xa76a6a88
  0xa76a6a5d: mov    $0xa75af400,%edi
  0xa76a6a62: cmp    %edi,%eax
  0xa76a6a64: jbe    0xa76a6a77
  0xa76a6a6a: mov    $0xa75b1728,%edi
  0xa76a6a6f: cmp    %edi,%eax
  0xa76a6a71: jb     0xa76a6a88
  ;; i2c adapter must return to an interpreter frame
  0xa76a6a77: push   $0xb75a2830
  0xa76a6a7c: call   0xa76a6a81
  0xa76a6a81: pusha  
  0xa76a6a82: call   0xb7052f32
  0xa76a6a87: hlt    
  ;; } verify_i2ce 
  0xa76a6a88: mov    %esp,%edi
  0xa76a6a8a: sub    $0x10,%esp
  0xa76a6a8d: and    $0xfffffff0,%esp
  0xa76a6a90: push   %eax
  0xa76a6a91: mov    %edi,%eax
  0xa76a6a93: mov    0x30(%ebx),%edi
  0xa76a6a96: mov    0x14(%eax),%ecx
  0xa76a6a99: mov    0x10(%eax),%edx
  0xa76a6a9c: mov    0x8(%eax),%esi
  0xa76a6a9f: mov    %esi,0x4(%esp)
  0xa76a6aa3: mov    0xc(%eax),%esi
  0xa76a6aa6: mov    %esi,0x8(%esp)
  0xa76a6aaa: mov    0x4(%eax),%esi
  0xa76a6aad: mov    %esi,0xc(%esp)
  0xa76a6ab1: mov    %esp,%eax
  0xa76a6ab3: shr    $0xc,%eax
  0xa76a6ab6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a6abd: mov    %ebx,0x16c(%eax)
  0xa76a6ac3: mov    %ebx,%eax
  0xa76a6ac5: jmp    *%edi
  0xa76a6ac7: mov    0x4(%ecx),%ebx
  0xa76a6aca: cmp    0x8(%eax),%ebx
  0xa76a6acd: mov    0x4(%eax),%ebx
  0xa76a6ad0: jne    0xa76a6ae3
  0xa76a6ad6: cmpl   $0x0,0x34(%ebx)
  0xa76a6add: je     0xa76a6b22
  0xa76a6ae3: jmp    0xa7692560
  0xa76a6ae8: cmpl   $0x0,0x34(%ebx)
  0xa76a6aef: je     0xa76a6b22
  0xa76a6af5: mov    (%esp),%eax
  0xa76a6af8: pusha  
  0xa76a6af9: pushf  
  0xa76a6afa: sub    $0x10,%esp
  0xa76a6afd: vmovsd %xmm0,(%esp)
  0xa76a6b02: vmovsd %xmm1,0x8(%esp)
  0xa76a6b08: push   %eax
  0xa76a6b09: push   %ebx
  0xa76a6b0a: call   0xb71d62fc
  0xa76a6b0f: add    $0x8,%esp
  0xa76a6b12: vmovsd (%esp),%xmm0
  0xa76a6b17: vmovsd 0x8(%esp),%xmm1
  0xa76a6b1d: add    $0x10,%esp
  0xa76a6b20: popf   
  0xa76a6b21: popa   
  0xa76a6b22: pop    %eax
  0xa76a6b23: mov    %esp,%esi
  0xa76a6b25: sub    $0x14,%esp
  0xa76a6b28: mov    %ecx,0x10(%esp)
  0xa76a6b2c: mov    %edx,0xc(%esp)
  0xa76a6b30: mov    0x14(%esp),%edi
  0xa76a6b34: mov    %edi,0x4(%esp)
  0xa76a6b38: mov    0x18(%esp),%edi
  0xa76a6b3c: mov    %edi,0x8(%esp)
  0xa76a6b40: mov    0x1c(%esp),%edi
  0xa76a6b44: mov    %edi,(%esp)
  0xa76a6b47: mov    0x28(%ebx),%ecx
  0xa76a6b4a: push   %eax
  0xa76a6b4b: jmp    *%ecx

AHE@0xb6681b70: 0xaabe0000 i2c: 0xa76a6c00 c2i: 0xa76a6ca1 c2iUV: 0xa76a6c80
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Ljava/lang/Object; (254 bytes generated)
c2i argument handler starts at 0xa76a6ca1
  0xa76a6c00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6c03: mov    $0xa75b1ac0,%edi
  0xa76a6c08: cmp    %edi,%eax
  0xa76a6c0a: jbe    0xa76a6c1d
  0xa76a6c10: mov    $0xa7691ac0,%edi
  0xa76a6c15: cmp    %edi,%eax
  0xa76a6c17: jb     0xa76a6c48
  0xa76a6c1d: mov    $0xa75af400,%edi
  0xa76a6c22: cmp    %edi,%eax
  0xa76a6c24: jbe    0xa76a6c37
  0xa76a6c2a: mov    $0xa75b1728,%edi
  0xa76a6c2f: cmp    %edi,%eax
  0xa76a6c31: jb     0xa76a6c48
  ;; i2c adapter must return to an interpreter frame
  0xa76a6c37: push   $0xb75a2830
  0xa76a6c3c: call   0xa76a6c41
  0xa76a6c41: pusha  
  0xa76a6c42: call   0xb7052f32
  0xa76a6c47: hlt    
  ;; } verify_i2ce 
  0xa76a6c48: mov    %esp,%edi
  0xa76a6c4a: sub    $0x8,%esp
  0xa76a6c4d: and    $0xfffffff0,%esp
  0xa76a6c50: push   %eax
  0xa76a6c51: mov    %edi,%eax
  0xa76a6c53: mov    0x30(%ebx),%edi
  0xa76a6c56: mov    0x10(%eax),%ecx
  0xa76a6c59: mov    0xc(%eax),%edx
  0xa76a6c5c: mov    0x4(%eax),%esi
  0xa76a6c5f: mov    %esi,0x4(%esp)
  0xa76a6c63: mov    0x8(%eax),%esi
  0xa76a6c66: mov    %esi,0x8(%esp)
  0xa76a6c6a: mov    %esp,%eax
  0xa76a6c6c: shr    $0xc,%eax
  0xa76a6c6f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a6c76: mov    %ebx,0x16c(%eax)
  0xa76a6c7c: mov    %ebx,%eax
  0xa76a6c7e: jmp    *%edi
  0xa76a6c80: mov    0x4(%ecx),%ebx
  0xa76a6c83: cmp    0x8(%eax),%ebx
  0xa76a6c86: mov    0x4(%eax),%ebx
  0xa76a6c89: jne    0xa76a6c9c
  0xa76a6c8f: cmpl   $0x0,0x34(%ebx)
  0xa76a6c96: je     0xa76a6cdb
  0xa76a6c9c: jmp    0xa7692560
  0xa76a6ca1: cmpl   $0x0,0x34(%ebx)
  0xa76a6ca8: je     0xa76a6cdb
  0xa76a6cae: mov    (%esp),%eax
  0xa76a6cb1: pusha  
  0xa76a6cb2: pushf  
  0xa76a6cb3: sub    $0x10,%esp
  0xa76a6cb6: vmovsd %xmm0,(%esp)
  0xa76a6cbb: vmovsd %xmm1,0x8(%esp)
  0xa76a6cc1: push   %eax
  0xa76a6cc2: push   %ebx
  0xa76a6cc3: call   0xb71d62fc
  0xa76a6cc8: add    $0x8,%esp
  0xa76a6ccb: vmovsd (%esp),%xmm0
  0xa76a6cd0: vmovsd 0x8(%esp),%xmm1
  0xa76a6cd6: add    $0x10,%esp
  0xa76a6cd9: popf   
  0xa76a6cda: popa   
  0xa76a6cdb: pop    %eax
  0xa76a6cdc: mov    %esp,%esi
  0xa76a6cde: sub    $0x10,%esp
  0xa76a6ce1: mov    %ecx,0xc(%esp)
  0xa76a6ce5: mov    %edx,0x8(%esp)
  0xa76a6ce9: mov    0x10(%esp),%edi
  0xa76a6ced: mov    %edi,(%esp)
  0xa76a6cf0: mov    0x14(%esp),%edi
  0xa76a6cf4: mov    %edi,0x4(%esp)
  0xa76a6cf8: mov    0x28(%ebx),%ecx
  0xa76a6cfb: push   %eax
  0xa76a6cfc: jmp    *%ecx

AHE@0xb6681b94: 0xaabe7e00 i2c: 0xa76a6d80 c2i: 0xa76a6e26 c2iUV: 0xa76a6e05
i2c argument handler #0 for: receiver (Ljava/lang/Object;JD)V (265 bytes generated)
c2i argument handler starts at 0xa76a6e26
  0xa76a6d80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6d83: mov    $0xa75b1ac0,%edi
  0xa76a6d88: cmp    %edi,%eax
  0xa76a6d8a: jbe    0xa76a6d9d
  0xa76a6d90: mov    $0xa7691ac0,%edi
  0xa76a6d95: cmp    %edi,%eax
  0xa76a6d97: jb     0xa76a6dc8
  0xa76a6d9d: mov    $0xa75af400,%edi
  0xa76a6da2: cmp    %edi,%eax
  0xa76a6da4: jbe    0xa76a6db7
  0xa76a6daa: mov    $0xa75b1728,%edi
  0xa76a6daf: cmp    %edi,%eax
  0xa76a6db1: jb     0xa76a6dc8
  ;; i2c adapter must return to an interpreter frame
  0xa76a6db7: push   $0xb75a2830
  0xa76a6dbc: call   0xa76a6dc1
  0xa76a6dc1: pusha  
  0xa76a6dc2: call   0xb7052f32
  0xa76a6dc7: hlt    
  ;; } verify_i2ce 
  0xa76a6dc8: mov    %esp,%edi
  0xa76a6dca: sub    $0x8,%esp
  0xa76a6dcd: and    $0xfffffff0,%esp
  0xa76a6dd0: push   %eax
  0xa76a6dd1: mov    %edi,%eax
  0xa76a6dd3: mov    0x30(%ebx),%edi
  0xa76a6dd6: mov    0x18(%eax),%ecx
  0xa76a6dd9: mov    0x14(%eax),%edx
  0xa76a6ddc: mov    0xc(%eax),%esi
  0xa76a6ddf: mov    %esi,0x4(%esp)
  0xa76a6de3: mov    0x10(%eax),%esi
  0xa76a6de6: mov    %esi,0x8(%esp)
  0xa76a6dea: vmovsd 0x4(%eax),%xmm0
  0xa76a6def: mov    %esp,%eax
  0xa76a6df1: shr    $0xc,%eax
  0xa76a6df4: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a6dfb: mov    %ebx,0x16c(%eax)
  0xa76a6e01: mov    %ebx,%eax
  0xa76a6e03: jmp    *%edi
  0xa76a6e05: mov    0x4(%ecx),%ebx
  0xa76a6e08: cmp    0x8(%eax),%ebx
  0xa76a6e0b: mov    0x4(%eax),%ebx
  0xa76a6e0e: jne    0xa76a6e21
  0xa76a6e14: cmpl   $0x0,0x34(%ebx)
  0xa76a6e1b: je     0xa76a6e60
  0xa76a6e21: jmp    0xa7692560
  0xa76a6e26: cmpl   $0x0,0x34(%ebx)
  0xa76a6e2d: je     0xa76a6e60
  0xa76a6e33: mov    (%esp),%eax
  0xa76a6e36: pusha  
  0xa76a6e37: pushf  
  0xa76a6e38: sub    $0x10,%esp
  0xa76a6e3b: vmovsd %xmm0,(%esp)
  0xa76a6e40: vmovsd %xmm1,0x8(%esp)
  0xa76a6e46: push   %eax
  0xa76a6e47: push   %ebx
  0xa76a6e48: call   0xb71d62fc
  0xa76a6e4d: add    $0x8,%esp
  0xa76a6e50: vmovsd (%esp),%xmm0
  0xa76a6e55: vmovsd 0x8(%esp),%xmm1
  0xa76a6e5b: add    $0x10,%esp
  0xa76a6e5e: popf   
  0xa76a6e5f: popa   
  0xa76a6e60: pop    %eax
  0xa76a6e61: mov    %esp,%esi
  0xa76a6e63: sub    $0x18,%esp
  0xa76a6e66: mov    %ecx,0x14(%esp)
  0xa76a6e6a: mov    %edx,0x10(%esp)
  0xa76a6e6e: mov    0x18(%esp),%edi
  0xa76a6e72: mov    %edi,0x8(%esp)
  0xa76a6e76: mov    0x1c(%esp),%edi
  0xa76a6e7a: mov    %edi,0xc(%esp)
  0xa76a6e7e: vmovsd %xmm0,(%esp)
  0xa76a6e83: mov    0x28(%ebx),%ecx
  0xa76a6e86: push   %eax
  0xa76a6e87: jmp    *%ecx

AHE@0xb6681bb8: 0xabe7e000 i2c: 0xa76a6f40 c2i: 0xa76a6fe3 c2iUV: 0xa76a6fc2
i2c argument handler #0 for: receiver (JD)V (258 bytes generated)
c2i argument handler starts at 0xa76a6fe3
  0xa76a6f40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a6f43: mov    $0xa75b1ac0,%edi
  0xa76a6f48: cmp    %edi,%eax
  0xa76a6f4a: jbe    0xa76a6f5d
  0xa76a6f50: mov    $0xa7691ac0,%edi
  0xa76a6f55: cmp    %edi,%eax
  0xa76a6f57: jb     0xa76a6f88
  0xa76a6f5d: mov    $0xa75af400,%edi
  0xa76a6f62: cmp    %edi,%eax
  0xa76a6f64: jbe    0xa76a6f77
  0xa76a6f6a: mov    $0xa75b1728,%edi
  0xa76a6f6f: cmp    %edi,%eax
  0xa76a6f71: jb     0xa76a6f88
  ;; i2c adapter must return to an interpreter frame
  0xa76a6f77: push   $0xb75a2830
  0xa76a6f7c: call   0xa76a6f81
  0xa76a6f81: pusha  
  0xa76a6f82: call   0xb7052f32
  0xa76a6f87: hlt    
  ;; } verify_i2ce 
  0xa76a6f88: mov    %esp,%edi
  0xa76a6f8a: sub    $0x8,%esp
  0xa76a6f8d: and    $0xfffffff0,%esp
  0xa76a6f90: push   %eax
  0xa76a6f91: mov    %edi,%eax
  0xa76a6f93: mov    0x30(%ebx),%edi
  0xa76a6f96: mov    0x14(%eax),%ecx
  0xa76a6f99: mov    0xc(%eax),%esi
  0xa76a6f9c: mov    %esi,0x4(%esp)
  0xa76a6fa0: mov    0x10(%eax),%esi
  0xa76a6fa3: mov    %esi,0x8(%esp)
  0xa76a6fa7: vmovsd 0x4(%eax),%xmm0
  0xa76a6fac: mov    %esp,%eax
  0xa76a6fae: shr    $0xc,%eax
  0xa76a6fb1: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a6fb8: mov    %ebx,0x16c(%eax)
  0xa76a6fbe: mov    %ebx,%eax
  0xa76a6fc0: jmp    *%edi
  0xa76a6fc2: mov    0x4(%ecx),%ebx
  0xa76a6fc5: cmp    0x8(%eax),%ebx
  0xa76a6fc8: mov    0x4(%eax),%ebx
  0xa76a6fcb: jne    0xa76a6fde
  0xa76a6fd1: cmpl   $0x0,0x34(%ebx)
  0xa76a6fd8: je     0xa76a701d
  0xa76a6fde: jmp    0xa7692560
  0xa76a6fe3: cmpl   $0x0,0x34(%ebx)
  0xa76a6fea: je     0xa76a701d
  0xa76a6ff0: mov    (%esp),%eax
  0xa76a6ff3: pusha  
  0xa76a6ff4: pushf  
  0xa76a6ff5: sub    $0x10,%esp
  0xa76a6ff8: vmovsd %xmm0,(%esp)
  0xa76a6ffd: vmovsd %xmm1,0x8(%esp)
  0xa76a7003: push   %eax
  0xa76a7004: push   %ebx
  0xa76a7005: call   0xb71d62fc
  0xa76a700a: add    $0x8,%esp
  0xa76a700d: vmovsd (%esp),%xmm0
  0xa76a7012: vmovsd 0x8(%esp),%xmm1
  0xa76a7018: add    $0x10,%esp
  0xa76a701b: popf   
  0xa76a701c: popa   
  0xa76a701d: pop    %eax
  0xa76a701e: mov    %esp,%esi
  0xa76a7020: sub    $0x14,%esp
  0xa76a7023: mov    %ecx,0x10(%esp)
  0xa76a7027: mov    0x14(%esp),%edi
  0xa76a702b: mov    %edi,0x8(%esp)
  0xa76a702f: mov    0x18(%esp),%edi
  0xa76a7033: mov    %edi,0xc(%esp)
  0xa76a7037: vmovsd %xmm0,(%esp)
  0xa76a703c: mov    0x28(%ebx),%ecx
  0xa76a703f: push   %eax
  0xa76a7040: jmp    *%ecx

AHE@0xb6681bdc: 0xaaa7e000 i2c: 0xa76a7100 c2i: 0xa76a719f c2iUV: 0xa76a717e
i2c argument handler #0 for: receiver (Ljava/lang/Object;ID)V (250 bytes generated)
c2i argument handler starts at 0xa76a719f
  0xa76a7100: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7103: mov    $0xa75b1ac0,%edi
  0xa76a7108: cmp    %edi,%eax
  0xa76a710a: jbe    0xa76a711d
  0xa76a7110: mov    $0xa7691ac0,%edi
  0xa76a7115: cmp    %edi,%eax
  0xa76a7117: jb     0xa76a7148
  0xa76a711d: mov    $0xa75af400,%edi
  0xa76a7122: cmp    %edi,%eax
  0xa76a7124: jbe    0xa76a7137
  0xa76a712a: mov    $0xa75b1728,%edi
  0xa76a712f: cmp    %edi,%eax
  0xa76a7131: jb     0xa76a7148
  ;; i2c adapter must return to an interpreter frame
  0xa76a7137: push   $0xb75a2830
  0xa76a713c: call   0xa76a7141
  0xa76a7141: pusha  
  0xa76a7142: call   0xb7052f32
  0xa76a7147: hlt    
  ;; } verify_i2ce 
  0xa76a7148: mov    %esp,%edi
  0xa76a714a: sub    $0x8,%esp
  0xa76a714d: and    $0xfffffff0,%esp
  0xa76a7150: push   %eax
  0xa76a7151: mov    %edi,%eax
  0xa76a7153: mov    0x30(%ebx),%edi
  0xa76a7156: mov    0x14(%eax),%ecx
  0xa76a7159: mov    0x10(%eax),%edx
  0xa76a715c: mov    0xc(%eax),%esi
  0xa76a715f: mov    %esi,0x4(%esp)
  0xa76a7163: vmovsd 0x4(%eax),%xmm0
  0xa76a7168: mov    %esp,%eax
  0xa76a716a: shr    $0xc,%eax
  0xa76a716d: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a7174: mov    %ebx,0x16c(%eax)
  0xa76a717a: mov    %ebx,%eax
  0xa76a717c: jmp    *%edi
  0xa76a717e: mov    0x4(%ecx),%ebx
  0xa76a7181: cmp    0x8(%eax),%ebx
  0xa76a7184: mov    0x4(%eax),%ebx
  0xa76a7187: jne    0xa76a719a
  0xa76a718d: cmpl   $0x0,0x34(%ebx)
  0xa76a7194: je     0xa76a71d9
  0xa76a719a: jmp    0xa7692560
  0xa76a719f: cmpl   $0x0,0x34(%ebx)
  0xa76a71a6: je     0xa76a71d9
  0xa76a71ac: mov    (%esp),%eax
  0xa76a71af: pusha  
  0xa76a71b0: pushf  
  0xa76a71b1: sub    $0x10,%esp
  0xa76a71b4: vmovsd %xmm0,(%esp)
  0xa76a71b9: vmovsd %xmm1,0x8(%esp)
  0xa76a71bf: push   %eax
  0xa76a71c0: push   %ebx
  0xa76a71c1: call   0xb71d62fc
  0xa76a71c6: add    $0x8,%esp
  0xa76a71c9: vmovsd (%esp),%xmm0
  0xa76a71ce: vmovsd 0x8(%esp),%xmm1
  0xa76a71d4: add    $0x10,%esp
  0xa76a71d7: popf   
  0xa76a71d8: popa   
  0xa76a71d9: pop    %eax
  0xa76a71da: mov    %esp,%esi
  0xa76a71dc: sub    $0x14,%esp
  0xa76a71df: mov    %ecx,0x10(%esp)
  0xa76a71e3: mov    %edx,0xc(%esp)
  0xa76a71e7: mov    0x14(%esp),%edi
  0xa76a71eb: mov    %edi,0x8(%esp)
  0xa76a71ef: vmovsd %xmm0,(%esp)
  0xa76a71f4: mov    0x28(%ebx),%ecx
  0xa76a71f7: push   %eax
  0xa76a71f8: jmp    *%ecx

AHE@0xb6681c00: 0xabe00000 i2c: 0xa76a7280 c2i: 0xa76a731e c2iUV: 0xa76a72fd
i2c argument handler #0 for: receiver (J)D (247 bytes generated)
c2i argument handler starts at 0xa76a731e
  0xa76a7280: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7283: mov    $0xa75b1ac0,%edi
  0xa76a7288: cmp    %edi,%eax
  0xa76a728a: jbe    0xa76a729d
  0xa76a7290: mov    $0xa7691ac0,%edi
  0xa76a7295: cmp    %edi,%eax
  0xa76a7297: jb     0xa76a72c8
  0xa76a729d: mov    $0xa75af400,%edi
  0xa76a72a2: cmp    %edi,%eax
  0xa76a72a4: jbe    0xa76a72b7
  0xa76a72aa: mov    $0xa75b1728,%edi
  0xa76a72af: cmp    %edi,%eax
  0xa76a72b1: jb     0xa76a72c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a72b7: push   $0xb75a2830
  0xa76a72bc: call   0xa76a72c1
  0xa76a72c1: pusha  
  0xa76a72c2: call   0xb7052f32
  0xa76a72c7: hlt    
  ;; } verify_i2ce 
  0xa76a72c8: mov    %esp,%edi
  0xa76a72ca: sub    $0x8,%esp
  0xa76a72cd: and    $0xfffffff0,%esp
  0xa76a72d0: push   %eax
  0xa76a72d1: mov    %edi,%eax
  0xa76a72d3: mov    0x30(%ebx),%edi
  0xa76a72d6: mov    0xc(%eax),%ecx
  0xa76a72d9: mov    0x4(%eax),%esi
  0xa76a72dc: mov    %esi,0x4(%esp)
  0xa76a72e0: mov    0x8(%eax),%esi
  0xa76a72e3: mov    %esi,0x8(%esp)
  0xa76a72e7: mov    %esp,%eax
  0xa76a72e9: shr    $0xc,%eax
  0xa76a72ec: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a72f3: mov    %ebx,0x16c(%eax)
  0xa76a72f9: mov    %ebx,%eax
  0xa76a72fb: jmp    *%edi
  0xa76a72fd: mov    0x4(%ecx),%ebx
  0xa76a7300: cmp    0x8(%eax),%ebx
  0xa76a7303: mov    0x4(%eax),%ebx
  0xa76a7306: jne    0xa76a7319
  0xa76a730c: cmpl   $0x0,0x34(%ebx)
  0xa76a7313: je     0xa76a7358
  0xa76a7319: jmp    0xa7692560
  0xa76a731e: cmpl   $0x0,0x34(%ebx)
  0xa76a7325: je     0xa76a7358
  0xa76a732b: mov    (%esp),%eax
  0xa76a732e: pusha  
  0xa76a732f: pushf  
  0xa76a7330: sub    $0x10,%esp
  0xa76a7333: vmovsd %xmm0,(%esp)
  0xa76a7338: vmovsd %xmm1,0x8(%esp)
  0xa76a733e: push   %eax
  0xa76a733f: push   %ebx
  0xa76a7340: call   0xb71d62fc
  0xa76a7345: add    $0x8,%esp
  0xa76a7348: vmovsd (%esp),%xmm0
  0xa76a734d: vmovsd 0x8(%esp),%xmm1
  0xa76a7353: add    $0x10,%esp
  0xa76a7356: popf   
  0xa76a7357: popa   
  0xa76a7358: pop    %eax
  0xa76a7359: mov    %esp,%esi
  0xa76a735b: sub    $0xc,%esp
  0xa76a735e: mov    %ecx,0x8(%esp)
  0xa76a7362: mov    0xc(%esp),%edi
  0xa76a7366: mov    %edi,(%esp)
  0xa76a7369: mov    0x10(%esp),%edi
  0xa76a736d: mov    %edi,0x4(%esp)
  0xa76a7371: mov    0x28(%ebx),%ecx
  0xa76a7374: push   %eax
  0xa76a7375: jmp    *%ecx

AHE@0xb6681c24: 0xaaa00000 i2c: 0xa76a7400 c2i: 0xa76a749a c2iUV: 0xa76a7479
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)D (239 bytes generated)
c2i argument handler starts at 0xa76a749a
  0xa76a7400: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7403: mov    $0xa75b1ac0,%edi
  0xa76a7408: cmp    %edi,%eax
  0xa76a740a: jbe    0xa76a741d
  0xa76a7410: mov    $0xa7691ac0,%edi
  0xa76a7415: cmp    %edi,%eax
  0xa76a7417: jb     0xa76a7448
  0xa76a741d: mov    $0xa75af400,%edi
  0xa76a7422: cmp    %edi,%eax
  0xa76a7424: jbe    0xa76a7437
  0xa76a742a: mov    $0xa75b1728,%edi
  0xa76a742f: cmp    %edi,%eax
  0xa76a7431: jb     0xa76a7448
  ;; i2c adapter must return to an interpreter frame
  0xa76a7437: push   $0xb75a2830
  0xa76a743c: call   0xa76a7441
  0xa76a7441: pusha  
  0xa76a7442: call   0xb7052f32
  0xa76a7447: hlt    
  ;; } verify_i2ce 
  0xa76a7448: mov    %esp,%edi
  0xa76a744a: sub    $0x8,%esp
  0xa76a744d: and    $0xfffffff0,%esp
  0xa76a7450: push   %eax
  0xa76a7451: mov    %edi,%eax
  0xa76a7453: mov    0x30(%ebx),%edi
  0xa76a7456: mov    0xc(%eax),%ecx
  0xa76a7459: mov    0x8(%eax),%edx
  0xa76a745c: mov    0x4(%eax),%esi
  0xa76a745f: mov    %esi,0x4(%esp)
  0xa76a7463: mov    %esp,%eax
  0xa76a7465: shr    $0xc,%eax
  0xa76a7468: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a746f: mov    %ebx,0x16c(%eax)
  0xa76a7475: mov    %ebx,%eax
  0xa76a7477: jmp    *%edi
  0xa76a7479: mov    0x4(%ecx),%ebx
  0xa76a747c: cmp    0x8(%eax),%ebx
  0xa76a747f: mov    0x4(%eax),%ebx
  0xa76a7482: jne    0xa76a7495
  0xa76a7488: cmpl   $0x0,0x34(%ebx)
  0xa76a748f: je     0xa76a74d4
  0xa76a7495: jmp    0xa7692560
  0xa76a749a: cmpl   $0x0,0x34(%ebx)
  0xa76a74a1: je     0xa76a74d4
  0xa76a74a7: mov    (%esp),%eax
  0xa76a74aa: pusha  
  0xa76a74ab: pushf  
  0xa76a74ac: sub    $0x10,%esp
  0xa76a74af: vmovsd %xmm0,(%esp)
  0xa76a74b4: vmovsd %xmm1,0x8(%esp)
  0xa76a74ba: push   %eax
  0xa76a74bb: push   %ebx
  0xa76a74bc: call   0xb71d62fc
  0xa76a74c1: add    $0x8,%esp
  0xa76a74c4: vmovsd (%esp),%xmm0
  0xa76a74c9: vmovsd 0x8(%esp),%xmm1
  0xa76a74cf: add    $0x10,%esp
  0xa76a74d2: popf   
  0xa76a74d3: popa   
  0xa76a74d4: pop    %eax
  0xa76a74d5: mov    %esp,%esi
  0xa76a74d7: sub    $0xc,%esp
  0xa76a74da: mov    %ecx,0x8(%esp)
  0xa76a74de: mov    %edx,0x4(%esp)
  0xa76a74e2: mov    0xc(%esp),%edi
  0xa76a74e6: mov    %edi,(%esp)
  0xa76a74e9: mov    0x28(%ebx),%ecx
  0xa76a74ec: push   %eax
  0xa76a74ed: jmp    *%ecx

AHE@0xb6681c48: 0xaabe0000 i2c: 0xa76a7580 c2i: 0xa76a7621 c2iUV: 0xa76a7600
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)D (254 bytes generated)
c2i argument handler starts at 0xa76a7621
  0xa76a7580: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7583: mov    $0xa75b1ac0,%edi
  0xa76a7588: cmp    %edi,%eax
  0xa76a758a: jbe    0xa76a759d
  0xa76a7590: mov    $0xa7691ac0,%edi
  0xa76a7595: cmp    %edi,%eax
  0xa76a7597: jb     0xa76a75c8
  0xa76a759d: mov    $0xa75af400,%edi
  0xa76a75a2: cmp    %edi,%eax
  0xa76a75a4: jbe    0xa76a75b7
  0xa76a75aa: mov    $0xa75b1728,%edi
  0xa76a75af: cmp    %edi,%eax
  0xa76a75b1: jb     0xa76a75c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a75b7: push   $0xb75a2830
  0xa76a75bc: call   0xa76a75c1
  0xa76a75c1: pusha  
  0xa76a75c2: call   0xb7052f32
  0xa76a75c7: hlt    
  ;; } verify_i2ce 
  0xa76a75c8: mov    %esp,%edi
  0xa76a75ca: sub    $0x8,%esp
  0xa76a75cd: and    $0xfffffff0,%esp
  0xa76a75d0: push   %eax
  0xa76a75d1: mov    %edi,%eax
  0xa76a75d3: mov    0x30(%ebx),%edi
  0xa76a75d6: mov    0x10(%eax),%ecx
  0xa76a75d9: mov    0xc(%eax),%edx
  0xa76a75dc: mov    0x4(%eax),%esi
  0xa76a75df: mov    %esi,0x4(%esp)
  0xa76a75e3: mov    0x8(%eax),%esi
  0xa76a75e6: mov    %esi,0x8(%esp)
  0xa76a75ea: mov    %esp,%eax
  0xa76a75ec: shr    $0xc,%eax
  0xa76a75ef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a75f6: mov    %ebx,0x16c(%eax)
  0xa76a75fc: mov    %ebx,%eax
  0xa76a75fe: jmp    *%edi
  0xa76a7600: mov    0x4(%ecx),%ebx
  0xa76a7603: cmp    0x8(%eax),%ebx
  0xa76a7606: mov    0x4(%eax),%ebx
  0xa76a7609: jne    0xa76a761c
  0xa76a760f: cmpl   $0x0,0x34(%ebx)
  0xa76a7616: je     0xa76a765b
  0xa76a761c: jmp    0xa7692560
  0xa76a7621: cmpl   $0x0,0x34(%ebx)
  0xa76a7628: je     0xa76a765b
  0xa76a762e: mov    (%esp),%eax
  0xa76a7631: pusha  
  0xa76a7632: pushf  
  0xa76a7633: sub    $0x10,%esp
  0xa76a7636: vmovsd %xmm0,(%esp)
  0xa76a763b: vmovsd %xmm1,0x8(%esp)
  0xa76a7641: push   %eax
  0xa76a7642: push   %ebx
  0xa76a7643: call   0xb71d62fc
  0xa76a7648: add    $0x8,%esp
  0xa76a764b: vmovsd (%esp),%xmm0
  0xa76a7650: vmovsd 0x8(%esp),%xmm1
  0xa76a7656: add    $0x10,%esp
  0xa76a7659: popf   
  0xa76a765a: popa   
  0xa76a765b: pop    %eax
  0xa76a765c: mov    %esp,%esi
  0xa76a765e: sub    $0x10,%esp
  0xa76a7661: mov    %ecx,0xc(%esp)
  0xa76a7665: mov    %edx,0x8(%esp)
  0xa76a7669: mov    0x10(%esp),%edi
  0xa76a766d: mov    %edi,(%esp)
  0xa76a7670: mov    0x14(%esp),%edi
  0xa76a7674: mov    %edi,0x4(%esp)
  0xa76a7678: mov    0x28(%ebx),%ecx
  0xa76a767b: push   %eax
  0xa76a767c: jmp    *%ecx

AHE@0xb6681c6c: 0xaaa60000 i2c: 0xa76a7700 c2i: 0xa76a779f c2iUV: 0xa76a777e
i2c argument handler #0 for: receiver (Ljava/lang/Object;IF)V (250 bytes generated)
c2i argument handler starts at 0xa76a779f
  0xa76a7700: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7703: mov    $0xa75b1ac0,%edi
  0xa76a7708: cmp    %edi,%eax
  0xa76a770a: jbe    0xa76a771d
  0xa76a7710: mov    $0xa7691ac0,%edi
  0xa76a7715: cmp    %edi,%eax
  0xa76a7717: jb     0xa76a7748
  0xa76a771d: mov    $0xa75af400,%edi
  0xa76a7722: cmp    %edi,%eax
  0xa76a7724: jbe    0xa76a7737
  0xa76a772a: mov    $0xa75b1728,%edi
  0xa76a772f: cmp    %edi,%eax
  0xa76a7731: jb     0xa76a7748
  ;; i2c adapter must return to an interpreter frame
  0xa76a7737: push   $0xb75a2830
  0xa76a773c: call   0xa76a7741
  0xa76a7741: pusha  
  0xa76a7742: call   0xb7052f32
  0xa76a7747: hlt    
  ;; } verify_i2ce 
  0xa76a7748: mov    %esp,%edi
  0xa76a774a: sub    $0x8,%esp
  0xa76a774d: and    $0xfffffff0,%esp
  0xa76a7750: push   %eax
  0xa76a7751: mov    %edi,%eax
  0xa76a7753: mov    0x30(%ebx),%edi
  0xa76a7756: mov    0x10(%eax),%ecx
  0xa76a7759: mov    0xc(%eax),%edx
  0xa76a775c: mov    0x8(%eax),%esi
  0xa76a775f: mov    %esi,0x4(%esp)
  0xa76a7763: vmovss 0x4(%eax),%xmm0
  0xa76a7768: mov    %esp,%eax
  0xa76a776a: shr    $0xc,%eax
  0xa76a776d: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a7774: mov    %ebx,0x16c(%eax)
  0xa76a777a: mov    %ebx,%eax
  0xa76a777c: jmp    *%edi
  0xa76a777e: mov    0x4(%ecx),%ebx
  0xa76a7781: cmp    0x8(%eax),%ebx
  0xa76a7784: mov    0x4(%eax),%ebx
  0xa76a7787: jne    0xa76a779a
  0xa76a778d: cmpl   $0x0,0x34(%ebx)
  0xa76a7794: je     0xa76a77d9
  0xa76a779a: jmp    0xa7692560
  0xa76a779f: cmpl   $0x0,0x34(%ebx)
  0xa76a77a6: je     0xa76a77d9
  0xa76a77ac: mov    (%esp),%eax
  0xa76a77af: pusha  
  0xa76a77b0: pushf  
  0xa76a77b1: sub    $0x10,%esp
  0xa76a77b4: vmovsd %xmm0,(%esp)
  0xa76a77b9: vmovsd %xmm1,0x8(%esp)
  0xa76a77bf: push   %eax
  0xa76a77c0: push   %ebx
  0xa76a77c1: call   0xb71d62fc
  0xa76a77c6: add    $0x8,%esp
  0xa76a77c9: vmovsd (%esp),%xmm0
  0xa76a77ce: vmovsd 0x8(%esp),%xmm1
  0xa76a77d4: add    $0x10,%esp
  0xa76a77d7: popf   
  0xa76a77d8: popa   
  0xa76a77d9: pop    %eax
  0xa76a77da: mov    %esp,%esi
  0xa76a77dc: sub    $0x10,%esp
  0xa76a77df: mov    %ecx,0xc(%esp)
  0xa76a77e3: mov    %edx,0x8(%esp)
  0xa76a77e7: mov    0x10(%esp),%edi
  0xa76a77eb: mov    %edi,0x4(%esp)
  0xa76a77ef: vmovss %xmm0,(%esp)
  0xa76a77f4: mov    0x28(%ebx),%ecx
  0xa76a77f7: push   %eax
  0xa76a77f8: jmp    *%ecx

AHE@0xb6681c90: 0xabe60000 i2c: 0xa76a7880 c2i: 0xa76a7923 c2iUV: 0xa76a7902
i2c argument handler #0 for: receiver (JF)V (258 bytes generated)
c2i argument handler starts at 0xa76a7923
  0xa76a7880: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7883: mov    $0xa75b1ac0,%edi
  0xa76a7888: cmp    %edi,%eax
  0xa76a788a: jbe    0xa76a789d
  0xa76a7890: mov    $0xa7691ac0,%edi
  0xa76a7895: cmp    %edi,%eax
  0xa76a7897: jb     0xa76a78c8
  0xa76a789d: mov    $0xa75af400,%edi
  0xa76a78a2: cmp    %edi,%eax
  0xa76a78a4: jbe    0xa76a78b7
  0xa76a78aa: mov    $0xa75b1728,%edi
  0xa76a78af: cmp    %edi,%eax
  0xa76a78b1: jb     0xa76a78c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a78b7: push   $0xb75a2830
  0xa76a78bc: call   0xa76a78c1
  0xa76a78c1: pusha  
  0xa76a78c2: call   0xb7052f32
  0xa76a78c7: hlt    
  ;; } verify_i2ce 
  0xa76a78c8: mov    %esp,%edi
  0xa76a78ca: sub    $0x8,%esp
  0xa76a78cd: and    $0xfffffff0,%esp
  0xa76a78d0: push   %eax
  0xa76a78d1: mov    %edi,%eax
  0xa76a78d3: mov    0x30(%ebx),%edi
  0xa76a78d6: mov    0x10(%eax),%ecx
  0xa76a78d9: mov    0x8(%eax),%esi
  0xa76a78dc: mov    %esi,0x4(%esp)
  0xa76a78e0: mov    0xc(%eax),%esi
  0xa76a78e3: mov    %esi,0x8(%esp)
  0xa76a78e7: vmovss 0x4(%eax),%xmm0
  0xa76a78ec: mov    %esp,%eax
  0xa76a78ee: shr    $0xc,%eax
  0xa76a78f1: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a78f8: mov    %ebx,0x16c(%eax)
  0xa76a78fe: mov    %ebx,%eax
  0xa76a7900: jmp    *%edi
  0xa76a7902: mov    0x4(%ecx),%ebx
  0xa76a7905: cmp    0x8(%eax),%ebx
  0xa76a7908: mov    0x4(%eax),%ebx
  0xa76a790b: jne    0xa76a791e
  0xa76a7911: cmpl   $0x0,0x34(%ebx)
  0xa76a7918: je     0xa76a795d
  0xa76a791e: jmp    0xa7692560
  0xa76a7923: cmpl   $0x0,0x34(%ebx)
  0xa76a792a: je     0xa76a795d
  0xa76a7930: mov    (%esp),%eax
  0xa76a7933: pusha  
  0xa76a7934: pushf  
  0xa76a7935: sub    $0x10,%esp
  0xa76a7938: vmovsd %xmm0,(%esp)
  0xa76a793d: vmovsd %xmm1,0x8(%esp)
  0xa76a7943: push   %eax
  0xa76a7944: push   %ebx
  0xa76a7945: call   0xb71d62fc
  0xa76a794a: add    $0x8,%esp
  0xa76a794d: vmovsd (%esp),%xmm0
  0xa76a7952: vmovsd 0x8(%esp),%xmm1
  0xa76a7958: add    $0x10,%esp
  0xa76a795b: popf   
  0xa76a795c: popa   
  0xa76a795d: pop    %eax
  0xa76a795e: mov    %esp,%esi
  0xa76a7960: sub    $0x10,%esp
  0xa76a7963: mov    %ecx,0xc(%esp)
  0xa76a7967: mov    0x10(%esp),%edi
  0xa76a796b: mov    %edi,0x4(%esp)
  0xa76a796f: mov    0x14(%esp),%edi
  0xa76a7973: mov    %edi,0x8(%esp)
  0xa76a7977: vmovss %xmm0,(%esp)
  0xa76a797c: mov    0x28(%ebx),%ecx
  0xa76a797f: push   %eax
  0xa76a7980: jmp    *%ecx

AHE@0xb6681cb4: 0xaabe6000 i2c: 0xa76a7a40 c2i: 0xa76a7ae6 c2iUV: 0xa76a7ac5
i2c argument handler #0 for: receiver (Ljava/lang/Object;JF)V (265 bytes generated)
c2i argument handler starts at 0xa76a7ae6
  0xa76a7a40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7a43: mov    $0xa75b1ac0,%edi
  0xa76a7a48: cmp    %edi,%eax
  0xa76a7a4a: jbe    0xa76a7a5d
  0xa76a7a50: mov    $0xa7691ac0,%edi
  0xa76a7a55: cmp    %edi,%eax
  0xa76a7a57: jb     0xa76a7a88
  0xa76a7a5d: mov    $0xa75af400,%edi
  0xa76a7a62: cmp    %edi,%eax
  0xa76a7a64: jbe    0xa76a7a77
  0xa76a7a6a: mov    $0xa75b1728,%edi
  0xa76a7a6f: cmp    %edi,%eax
  0xa76a7a71: jb     0xa76a7a88
  ;; i2c adapter must return to an interpreter frame
  0xa76a7a77: push   $0xb75a2830
  0xa76a7a7c: call   0xa76a7a81
  0xa76a7a81: pusha  
  0xa76a7a82: call   0xb7052f32
  0xa76a7a87: hlt    
  ;; } verify_i2ce 
  0xa76a7a88: mov    %esp,%edi
  0xa76a7a8a: sub    $0x8,%esp
  0xa76a7a8d: and    $0xfffffff0,%esp
  0xa76a7a90: push   %eax
  0xa76a7a91: mov    %edi,%eax
  0xa76a7a93: mov    0x30(%ebx),%edi
  0xa76a7a96: mov    0x14(%eax),%ecx
  0xa76a7a99: mov    0x10(%eax),%edx
  0xa76a7a9c: mov    0x8(%eax),%esi
  0xa76a7a9f: mov    %esi,0x4(%esp)
  0xa76a7aa3: mov    0xc(%eax),%esi
  0xa76a7aa6: mov    %esi,0x8(%esp)
  0xa76a7aaa: vmovss 0x4(%eax),%xmm0
  0xa76a7aaf: mov    %esp,%eax
  0xa76a7ab1: shr    $0xc,%eax
  0xa76a7ab4: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a7abb: mov    %ebx,0x16c(%eax)
  0xa76a7ac1: mov    %ebx,%eax
  0xa76a7ac3: jmp    *%edi
  0xa76a7ac5: mov    0x4(%ecx),%ebx
  0xa76a7ac8: cmp    0x8(%eax),%ebx
  0xa76a7acb: mov    0x4(%eax),%ebx
  0xa76a7ace: jne    0xa76a7ae1
  0xa76a7ad4: cmpl   $0x0,0x34(%ebx)
  0xa76a7adb: je     0xa76a7b20
  0xa76a7ae1: jmp    0xa7692560
  0xa76a7ae6: cmpl   $0x0,0x34(%ebx)
  0xa76a7aed: je     0xa76a7b20
  0xa76a7af3: mov    (%esp),%eax
  0xa76a7af6: pusha  
  0xa76a7af7: pushf  
  0xa76a7af8: sub    $0x10,%esp
  0xa76a7afb: vmovsd %xmm0,(%esp)
  0xa76a7b00: vmovsd %xmm1,0x8(%esp)
  0xa76a7b06: push   %eax
  0xa76a7b07: push   %ebx
  0xa76a7b08: call   0xb71d62fc
  0xa76a7b0d: add    $0x8,%esp
  0xa76a7b10: vmovsd (%esp),%xmm0
  0xa76a7b15: vmovsd 0x8(%esp),%xmm1
  0xa76a7b1b: add    $0x10,%esp
  0xa76a7b1e: popf   
  0xa76a7b1f: popa   
  0xa76a7b20: pop    %eax
  0xa76a7b21: mov    %esp,%esi
  0xa76a7b23: sub    $0x14,%esp
  0xa76a7b26: mov    %ecx,0x10(%esp)
  0xa76a7b2a: mov    %edx,0xc(%esp)
  0xa76a7b2e: mov    0x14(%esp),%edi
  0xa76a7b32: mov    %edi,0x4(%esp)
  0xa76a7b36: mov    0x18(%esp),%edi
  0xa76a7b3a: mov    %edi,0x8(%esp)
  0xa76a7b3e: vmovss %xmm0,(%esp)
  0xa76a7b43: mov    0x28(%ebx),%ecx
  0xa76a7b46: push   %eax
  0xa76a7b47: jmp    *%ecx

AHE@0xb6681cd8: 0xaaa00000 i2c: 0xa76a7c00 c2i: 0xa76a7c9a c2iUV: 0xa76a7c79
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)F (239 bytes generated)
c2i argument handler starts at 0xa76a7c9a
  0xa76a7c00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7c03: mov    $0xa75b1ac0,%edi
  0xa76a7c08: cmp    %edi,%eax
  0xa76a7c0a: jbe    0xa76a7c1d
  0xa76a7c10: mov    $0xa7691ac0,%edi
  0xa76a7c15: cmp    %edi,%eax
  0xa76a7c17: jb     0xa76a7c48
  0xa76a7c1d: mov    $0xa75af400,%edi
  0xa76a7c22: cmp    %edi,%eax
  0xa76a7c24: jbe    0xa76a7c37
  0xa76a7c2a: mov    $0xa75b1728,%edi
  0xa76a7c2f: cmp    %edi,%eax
  0xa76a7c31: jb     0xa76a7c48
  ;; i2c adapter must return to an interpreter frame
  0xa76a7c37: push   $0xb75a2830
  0xa76a7c3c: call   0xa76a7c41
  0xa76a7c41: pusha  
  0xa76a7c42: call   0xb7052f32
  0xa76a7c47: hlt    
  ;; } verify_i2ce 
  0xa76a7c48: mov    %esp,%edi
  0xa76a7c4a: sub    $0x8,%esp
  0xa76a7c4d: and    $0xfffffff0,%esp
  0xa76a7c50: push   %eax
  0xa76a7c51: mov    %edi,%eax
  0xa76a7c53: mov    0x30(%ebx),%edi
  0xa76a7c56: mov    0xc(%eax),%ecx
  0xa76a7c59: mov    0x8(%eax),%edx
  0xa76a7c5c: mov    0x4(%eax),%esi
  0xa76a7c5f: mov    %esi,0x4(%esp)
  0xa76a7c63: mov    %esp,%eax
  0xa76a7c65: shr    $0xc,%eax
  0xa76a7c68: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a7c6f: mov    %ebx,0x16c(%eax)
  0xa76a7c75: mov    %ebx,%eax
  0xa76a7c77: jmp    *%edi
  0xa76a7c79: mov    0x4(%ecx),%ebx
  0xa76a7c7c: cmp    0x8(%eax),%ebx
  0xa76a7c7f: mov    0x4(%eax),%ebx
  0xa76a7c82: jne    0xa76a7c95
  0xa76a7c88: cmpl   $0x0,0x34(%ebx)
  0xa76a7c8f: je     0xa76a7cd4
  0xa76a7c95: jmp    0xa7692560
  0xa76a7c9a: cmpl   $0x0,0x34(%ebx)
  0xa76a7ca1: je     0xa76a7cd4
  0xa76a7ca7: mov    (%esp),%eax
  0xa76a7caa: pusha  
  0xa76a7cab: pushf  
  0xa76a7cac: sub    $0x10,%esp
  0xa76a7caf: vmovsd %xmm0,(%esp)
  0xa76a7cb4: vmovsd %xmm1,0x8(%esp)
  0xa76a7cba: push   %eax
  0xa76a7cbb: push   %ebx
  0xa76a7cbc: call   0xb71d62fc
  0xa76a7cc1: add    $0x8,%esp
  0xa76a7cc4: vmovsd (%esp),%xmm0
  0xa76a7cc9: vmovsd 0x8(%esp),%xmm1
  0xa76a7ccf: add    $0x10,%esp
  0xa76a7cd2: popf   
  0xa76a7cd3: popa   
  0xa76a7cd4: pop    %eax
  0xa76a7cd5: mov    %esp,%esi
  0xa76a7cd7: sub    $0xc,%esp
  0xa76a7cda: mov    %ecx,0x8(%esp)
  0xa76a7cde: mov    %edx,0x4(%esp)
  0xa76a7ce2: mov    0xc(%esp),%edi
  0xa76a7ce6: mov    %edi,(%esp)
  0xa76a7ce9: mov    0x28(%ebx),%ecx
  0xa76a7cec: push   %eax
  0xa76a7ced: jmp    *%ecx

AHE@0xb6681cfc: 0xabe00000 i2c: 0xa76a7d80 c2i: 0xa76a7e1e c2iUV: 0xa76a7dfd
i2c argument handler #0 for: receiver (J)F (247 bytes generated)
c2i argument handler starts at 0xa76a7e1e
  0xa76a7d80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7d83: mov    $0xa75b1ac0,%edi
  0xa76a7d88: cmp    %edi,%eax
  0xa76a7d8a: jbe    0xa76a7d9d
  0xa76a7d90: mov    $0xa7691ac0,%edi
  0xa76a7d95: cmp    %edi,%eax
  0xa76a7d97: jb     0xa76a7dc8
  0xa76a7d9d: mov    $0xa75af400,%edi
  0xa76a7da2: cmp    %edi,%eax
  0xa76a7da4: jbe    0xa76a7db7
  0xa76a7daa: mov    $0xa75b1728,%edi
  0xa76a7daf: cmp    %edi,%eax
  0xa76a7db1: jb     0xa76a7dc8
  ;; i2c adapter must return to an interpreter frame
  0xa76a7db7: push   $0xb75a2830
  0xa76a7dbc: call   0xa76a7dc1
  0xa76a7dc1: pusha  
  0xa76a7dc2: call   0xb7052f32
  0xa76a7dc7: hlt    
  ;; } verify_i2ce 
  0xa76a7dc8: mov    %esp,%edi
  0xa76a7dca: sub    $0x8,%esp
  0xa76a7dcd: and    $0xfffffff0,%esp
  0xa76a7dd0: push   %eax
  0xa76a7dd1: mov    %edi,%eax
  0xa76a7dd3: mov    0x30(%ebx),%edi
  0xa76a7dd6: mov    0xc(%eax),%ecx
  0xa76a7dd9: mov    0x4(%eax),%esi
  0xa76a7ddc: mov    %esi,0x4(%esp)
  0xa76a7de0: mov    0x8(%eax),%esi
  0xa76a7de3: mov    %esi,0x8(%esp)
  0xa76a7de7: mov    %esp,%eax
  0xa76a7de9: shr    $0xc,%eax
  0xa76a7dec: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a7df3: mov    %ebx,0x16c(%eax)
  0xa76a7df9: mov    %ebx,%eax
  0xa76a7dfb: jmp    *%edi
  0xa76a7dfd: mov    0x4(%ecx),%ebx
  0xa76a7e00: cmp    0x8(%eax),%ebx
  0xa76a7e03: mov    0x4(%eax),%ebx
  0xa76a7e06: jne    0xa76a7e19
  0xa76a7e0c: cmpl   $0x0,0x34(%ebx)
  0xa76a7e13: je     0xa76a7e58
  0xa76a7e19: jmp    0xa7692560
  0xa76a7e1e: cmpl   $0x0,0x34(%ebx)
  0xa76a7e25: je     0xa76a7e58
  0xa76a7e2b: mov    (%esp),%eax
  0xa76a7e2e: pusha  
  0xa76a7e2f: pushf  
  0xa76a7e30: sub    $0x10,%esp
  0xa76a7e33: vmovsd %xmm0,(%esp)
  0xa76a7e38: vmovsd %xmm1,0x8(%esp)
  0xa76a7e3e: push   %eax
  0xa76a7e3f: push   %ebx
  0xa76a7e40: call   0xb71d62fc
  0xa76a7e45: add    $0x8,%esp
  0xa76a7e48: vmovsd (%esp),%xmm0
  0xa76a7e4d: vmovsd 0x8(%esp),%xmm1
  0xa76a7e53: add    $0x10,%esp
  0xa76a7e56: popf   
  0xa76a7e57: popa   
  0xa76a7e58: pop    %eax
  0xa76a7e59: mov    %esp,%esi
  0xa76a7e5b: sub    $0xc,%esp
  0xa76a7e5e: mov    %ecx,0x8(%esp)
  0xa76a7e62: mov    0xc(%esp),%edi
  0xa76a7e66: mov    %edi,(%esp)
  0xa76a7e69: mov    0x10(%esp),%edi
  0xa76a7e6d: mov    %edi,0x4(%esp)
  0xa76a7e71: mov    0x28(%ebx),%ecx
  0xa76a7e74: push   %eax
  0xa76a7e75: jmp    *%ecx

AHE@0xb6681d20: 0xaabe0000 i2c: 0xa76a7f00 c2i: 0xa76a7fa1 c2iUV: 0xa76a7f80
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)F (254 bytes generated)
c2i argument handler starts at 0xa76a7fa1
  0xa76a7f00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a7f03: mov    $0xa75b1ac0,%edi
  0xa76a7f08: cmp    %edi,%eax
  0xa76a7f0a: jbe    0xa76a7f1d
  0xa76a7f10: mov    $0xa7691ac0,%edi
  0xa76a7f15: cmp    %edi,%eax
  0xa76a7f17: jb     0xa76a7f48
  0xa76a7f1d: mov    $0xa75af400,%edi
  0xa76a7f22: cmp    %edi,%eax
  0xa76a7f24: jbe    0xa76a7f37
  0xa76a7f2a: mov    $0xa75b1728,%edi
  0xa76a7f2f: cmp    %edi,%eax
  0xa76a7f31: jb     0xa76a7f48
  ;; i2c adapter must return to an interpreter frame
  0xa76a7f37: push   $0xb75a2830
  0xa76a7f3c: call   0xa76a7f41
  0xa76a7f41: pusha  
  0xa76a7f42: call   0xb7052f32
  0xa76a7f47: hlt    
  ;; } verify_i2ce 
  0xa76a7f48: mov    %esp,%edi
  0xa76a7f4a: sub    $0x8,%esp
  0xa76a7f4d: and    $0xfffffff0,%esp
  0xa76a7f50: push   %eax
  0xa76a7f51: mov    %edi,%eax
  0xa76a7f53: mov    0x30(%ebx),%edi
  0xa76a7f56: mov    0x10(%eax),%ecx
  0xa76a7f59: mov    0xc(%eax),%edx
  0xa76a7f5c: mov    0x4(%eax),%esi
  0xa76a7f5f: mov    %esi,0x4(%esp)
  0xa76a7f63: mov    0x8(%eax),%esi
  0xa76a7f66: mov    %esi,0x8(%esp)
  0xa76a7f6a: mov    %esp,%eax
  0xa76a7f6c: shr    $0xc,%eax
  0xa76a7f6f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a7f76: mov    %ebx,0x16c(%eax)
  0xa76a7f7c: mov    %ebx,%eax
  0xa76a7f7e: jmp    *%edi
  0xa76a7f80: mov    0x4(%ecx),%ebx
  0xa76a7f83: cmp    0x8(%eax),%ebx
  0xa76a7f86: mov    0x4(%eax),%ebx
  0xa76a7f89: jne    0xa76a7f9c
  0xa76a7f8f: cmpl   $0x0,0x34(%ebx)
  0xa76a7f96: je     0xa76a7fdb
  0xa76a7f9c: jmp    0xa7692560
  0xa76a7fa1: cmpl   $0x0,0x34(%ebx)
  0xa76a7fa8: je     0xa76a7fdb
  0xa76a7fae: mov    (%esp),%eax
  0xa76a7fb1: pusha  
  0xa76a7fb2: pushf  
  0xa76a7fb3: sub    $0x10,%esp
  0xa76a7fb6: vmovsd %xmm0,(%esp)
  0xa76a7fbb: vmovsd %xmm1,0x8(%esp)
  0xa76a7fc1: push   %eax
  0xa76a7fc2: push   %ebx
  0xa76a7fc3: call   0xb71d62fc
  0xa76a7fc8: add    $0x8,%esp
  0xa76a7fcb: vmovsd (%esp),%xmm0
  0xa76a7fd0: vmovsd 0x8(%esp),%xmm1
  0xa76a7fd6: add    $0x10,%esp
  0xa76a7fd9: popf   
  0xa76a7fda: popa   
  0xa76a7fdb: pop    %eax
  0xa76a7fdc: mov    %esp,%esi
  0xa76a7fde: sub    $0x10,%esp
  0xa76a7fe1: mov    %ecx,0xc(%esp)
  0xa76a7fe5: mov    %edx,0x8(%esp)
  0xa76a7fe9: mov    0x10(%esp),%edi
  0xa76a7fed: mov    %edi,(%esp)
  0xa76a7ff0: mov    0x14(%esp),%edi
  0xa76a7ff4: mov    %edi,0x4(%esp)
  0xa76a7ff8: mov    0x28(%ebx),%ecx
  0xa76a7ffb: push   %eax
  0xa76a7ffc: jmp    *%ecx

AHE@0xb6681d44: 0xaaabe000 i2c: 0xa76a8080 c2i: 0xa76a8128 c2iUV: 0xa76a8107
i2c argument handler #0 for: receiver (Ljava/lang/Object;IJ)V (269 bytes generated)
c2i argument handler starts at 0xa76a8128
  0xa76a8080: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8083: mov    $0xa75b1ac0,%edi
  0xa76a8088: cmp    %edi,%eax
  0xa76a808a: jbe    0xa76a809d
  0xa76a8090: mov    $0xa7691ac0,%edi
  0xa76a8095: cmp    %edi,%eax
  0xa76a8097: jb     0xa76a80c8
  0xa76a809d: mov    $0xa75af400,%edi
  0xa76a80a2: cmp    %edi,%eax
  0xa76a80a4: jbe    0xa76a80b7
  0xa76a80aa: mov    $0xa75b1728,%edi
  0xa76a80af: cmp    %edi,%eax
  0xa76a80b1: jb     0xa76a80c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a80b7: push   $0xb75a2830
  0xa76a80bc: call   0xa76a80c1
  0xa76a80c1: pusha  
  0xa76a80c2: call   0xb7052f32
  0xa76a80c7: hlt    
  ;; } verify_i2ce 
  0xa76a80c8: mov    %esp,%edi
  0xa76a80ca: sub    $0x10,%esp
  0xa76a80cd: and    $0xfffffff0,%esp
  0xa76a80d0: push   %eax
  0xa76a80d1: mov    %edi,%eax
  0xa76a80d3: mov    0x30(%ebx),%edi
  0xa76a80d6: mov    0x14(%eax),%ecx
  0xa76a80d9: mov    0x10(%eax),%edx
  0xa76a80dc: mov    0xc(%eax),%esi
  0xa76a80df: mov    %esi,0xc(%esp)
  0xa76a80e3: mov    0x4(%eax),%esi
  0xa76a80e6: mov    %esi,0x4(%esp)
  0xa76a80ea: mov    0x8(%eax),%esi
  0xa76a80ed: mov    %esi,0x8(%esp)
  0xa76a80f1: mov    %esp,%eax
  0xa76a80f3: shr    $0xc,%eax
  0xa76a80f6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a80fd: mov    %ebx,0x16c(%eax)
  0xa76a8103: mov    %ebx,%eax
  0xa76a8105: jmp    *%edi
  0xa76a8107: mov    0x4(%ecx),%ebx
  0xa76a810a: cmp    0x8(%eax),%ebx
  0xa76a810d: mov    0x4(%eax),%ebx
  0xa76a8110: jne    0xa76a8123
  0xa76a8116: cmpl   $0x0,0x34(%ebx)
  0xa76a811d: je     0xa76a8162
  0xa76a8123: jmp    0xa7692560
  0xa76a8128: cmpl   $0x0,0x34(%ebx)
  0xa76a812f: je     0xa76a8162
  0xa76a8135: mov    (%esp),%eax
  0xa76a8138: pusha  
  0xa76a8139: pushf  
  0xa76a813a: sub    $0x10,%esp
  0xa76a813d: vmovsd %xmm0,(%esp)
  0xa76a8142: vmovsd %xmm1,0x8(%esp)
  0xa76a8148: push   %eax
  0xa76a8149: push   %ebx
  0xa76a814a: call   0xb71d62fc
  0xa76a814f: add    $0x8,%esp
  0xa76a8152: vmovsd (%esp),%xmm0
  0xa76a8157: vmovsd 0x8(%esp),%xmm1
  0xa76a815d: add    $0x10,%esp
  0xa76a8160: popf   
  0xa76a8161: popa   
  0xa76a8162: pop    %eax
  0xa76a8163: mov    %esp,%esi
  0xa76a8165: sub    $0x14,%esp
  0xa76a8168: mov    %ecx,0x10(%esp)
  0xa76a816c: mov    %edx,0xc(%esp)
  0xa76a8170: mov    0x1c(%esp),%edi
  0xa76a8174: mov    %edi,0x8(%esp)
  0xa76a8178: mov    0x14(%esp),%edi
  0xa76a817c: mov    %edi,(%esp)
  0xa76a817f: mov    0x18(%esp),%edi
  0xa76a8183: mov    %edi,0x4(%esp)
  0xa76a8187: mov    0x28(%ebx),%ecx
  0xa76a818a: push   %eax
  0xa76a818b: jmp    *%ecx

AHE@0xb6681d68: 0xaabebe00 i2c: 0xa76a8240 c2i: 0xa76a82ef c2iUV: 0xa76a82ce
i2c argument handler #0 for: receiver (Ljava/lang/Object;JJ)V (284 bytes generated)
c2i argument handler starts at 0xa76a82ef
  0xa76a8240: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8243: mov    $0xa75b1ac0,%edi
  0xa76a8248: cmp    %edi,%eax
  0xa76a824a: jbe    0xa76a825d
  0xa76a8250: mov    $0xa7691ac0,%edi
  0xa76a8255: cmp    %edi,%eax
  0xa76a8257: jb     0xa76a8288
  0xa76a825d: mov    $0xa75af400,%edi
  0xa76a8262: cmp    %edi,%eax
  0xa76a8264: jbe    0xa76a8277
  0xa76a826a: mov    $0xa75b1728,%edi
  0xa76a826f: cmp    %edi,%eax
  0xa76a8271: jb     0xa76a8288
  ;; i2c adapter must return to an interpreter frame
  0xa76a8277: push   $0xb75a2830
  0xa76a827c: call   0xa76a8281
  0xa76a8281: pusha  
  0xa76a8282: call   0xb7052f32
  0xa76a8287: hlt    
  ;; } verify_i2ce 
  0xa76a8288: mov    %esp,%edi
  0xa76a828a: sub    $0x10,%esp
  0xa76a828d: and    $0xfffffff0,%esp
  0xa76a8290: push   %eax
  0xa76a8291: mov    %edi,%eax
  0xa76a8293: mov    0x30(%ebx),%edi
  0xa76a8296: mov    0x18(%eax),%ecx
  0xa76a8299: mov    0x14(%eax),%edx
  0xa76a829c: mov    0xc(%eax),%esi
  0xa76a829f: mov    %esi,0x4(%esp)
  0xa76a82a3: mov    0x10(%eax),%esi
  0xa76a82a6: mov    %esi,0x8(%esp)
  0xa76a82aa: mov    0x4(%eax),%esi
  0xa76a82ad: mov    %esi,0xc(%esp)
  0xa76a82b1: mov    0x8(%eax),%esi
  0xa76a82b4: mov    %esi,0x10(%esp)
  0xa76a82b8: mov    %esp,%eax
  0xa76a82ba: shr    $0xc,%eax
  0xa76a82bd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a82c4: mov    %ebx,0x16c(%eax)
  0xa76a82ca: mov    %ebx,%eax
  0xa76a82cc: jmp    *%edi
  0xa76a82ce: mov    0x4(%ecx),%ebx
  0xa76a82d1: cmp    0x8(%eax),%ebx
  0xa76a82d4: mov    0x4(%eax),%ebx
  0xa76a82d7: jne    0xa76a82ea
  0xa76a82dd: cmpl   $0x0,0x34(%ebx)
  0xa76a82e4: je     0xa76a8329
  0xa76a82ea: jmp    0xa7692560
  0xa76a82ef: cmpl   $0x0,0x34(%ebx)
  0xa76a82f6: je     0xa76a8329
  0xa76a82fc: mov    (%esp),%eax
  0xa76a82ff: pusha  
  0xa76a8300: pushf  
  0xa76a8301: sub    $0x10,%esp
  0xa76a8304: vmovsd %xmm0,(%esp)
  0xa76a8309: vmovsd %xmm1,0x8(%esp)
  0xa76a830f: push   %eax
  0xa76a8310: push   %ebx
  0xa76a8311: call   0xb71d62fc
  0xa76a8316: add    $0x8,%esp
  0xa76a8319: vmovsd (%esp),%xmm0
  0xa76a831e: vmovsd 0x8(%esp),%xmm1
  0xa76a8324: add    $0x10,%esp
  0xa76a8327: popf   
  0xa76a8328: popa   
  0xa76a8329: pop    %eax
  0xa76a832a: mov    %esp,%esi
  0xa76a832c: sub    $0x18,%esp
  0xa76a832f: mov    %ecx,0x14(%esp)
  0xa76a8333: mov    %edx,0x10(%esp)
  0xa76a8337: mov    0x18(%esp),%edi
  0xa76a833b: mov    %edi,0x8(%esp)
  0xa76a833f: mov    0x1c(%esp),%edi
  0xa76a8343: mov    %edi,0xc(%esp)
  0xa76a8347: mov    0x20(%esp),%edi
  0xa76a834b: mov    %edi,(%esp)
  0xa76a834e: mov    0x24(%esp),%edi
  0xa76a8352: mov    %edi,0x4(%esp)
  0xa76a8356: mov    0x28(%ebx),%ecx
  0xa76a8359: push   %eax
  0xa76a835a: jmp    *%ecx

AHE@0xb6681d8c: 0xabebe000 i2c: 0xa76a8400 c2i: 0xa76a84ac c2iUV: 0xa76a848b
i2c argument handler #0 for: receiver (JJ)V (277 bytes generated)
c2i argument handler starts at 0xa76a84ac
  0xa76a8400: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8403: mov    $0xa75b1ac0,%edi
  0xa76a8408: cmp    %edi,%eax
  0xa76a840a: jbe    0xa76a841d
  0xa76a8410: mov    $0xa7691ac0,%edi
  0xa76a8415: cmp    %edi,%eax
  0xa76a8417: jb     0xa76a8448
  0xa76a841d: mov    $0xa75af400,%edi
  0xa76a8422: cmp    %edi,%eax
  0xa76a8424: jbe    0xa76a8437
  0xa76a842a: mov    $0xa75b1728,%edi
  0xa76a842f: cmp    %edi,%eax
  0xa76a8431: jb     0xa76a8448
  ;; i2c adapter must return to an interpreter frame
  0xa76a8437: push   $0xb75a2830
  0xa76a843c: call   0xa76a8441
  0xa76a8441: pusha  
  0xa76a8442: call   0xb7052f32
  0xa76a8447: hlt    
  ;; } verify_i2ce 
  0xa76a8448: mov    %esp,%edi
  0xa76a844a: sub    $0x10,%esp
  0xa76a844d: and    $0xfffffff0,%esp
  0xa76a8450: push   %eax
  0xa76a8451: mov    %edi,%eax
  0xa76a8453: mov    0x30(%ebx),%edi
  0xa76a8456: mov    0x14(%eax),%ecx
  0xa76a8459: mov    0xc(%eax),%esi
  0xa76a845c: mov    %esi,0x4(%esp)
  0xa76a8460: mov    0x10(%eax),%esi
  0xa76a8463: mov    %esi,0x8(%esp)
  0xa76a8467: mov    0x4(%eax),%esi
  0xa76a846a: mov    %esi,0xc(%esp)
  0xa76a846e: mov    0x8(%eax),%esi
  0xa76a8471: mov    %esi,0x10(%esp)
  0xa76a8475: mov    %esp,%eax
  0xa76a8477: shr    $0xc,%eax
  0xa76a847a: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a8481: mov    %ebx,0x16c(%eax)
  0xa76a8487: mov    %ebx,%eax
  0xa76a8489: jmp    *%edi
  0xa76a848b: mov    0x4(%ecx),%ebx
  0xa76a848e: cmp    0x8(%eax),%ebx
  0xa76a8491: mov    0x4(%eax),%ebx
  0xa76a8494: jne    0xa76a84a7
  0xa76a849a: cmpl   $0x0,0x34(%ebx)
  0xa76a84a1: je     0xa76a84e6
  0xa76a84a7: jmp    0xa7692560
  0xa76a84ac: cmpl   $0x0,0x34(%ebx)
  0xa76a84b3: je     0xa76a84e6
  0xa76a84b9: mov    (%esp),%eax
  0xa76a84bc: pusha  
  0xa76a84bd: pushf  
  0xa76a84be: sub    $0x10,%esp
  0xa76a84c1: vmovsd %xmm0,(%esp)
  0xa76a84c6: vmovsd %xmm1,0x8(%esp)
  0xa76a84cc: push   %eax
  0xa76a84cd: push   %ebx
  0xa76a84ce: call   0xb71d62fc
  0xa76a84d3: add    $0x8,%esp
  0xa76a84d6: vmovsd (%esp),%xmm0
  0xa76a84db: vmovsd 0x8(%esp),%xmm1
  0xa76a84e1: add    $0x10,%esp
  0xa76a84e4: popf   
  0xa76a84e5: popa   
  0xa76a84e6: pop    %eax
  0xa76a84e7: mov    %esp,%esi
  0xa76a84e9: sub    $0x14,%esp
  0xa76a84ec: mov    %ecx,0x10(%esp)
  0xa76a84f0: mov    0x14(%esp),%edi
  0xa76a84f4: mov    %edi,0x8(%esp)
  0xa76a84f8: mov    0x18(%esp),%edi
  0xa76a84fc: mov    %edi,0xc(%esp)
  0xa76a8500: mov    0x1c(%esp),%edi
  0xa76a8504: mov    %edi,(%esp)
  0xa76a8507: mov    0x20(%esp),%edi
  0xa76a850b: mov    %edi,0x4(%esp)
  0xa76a850f: mov    0x28(%ebx),%ecx
  0xa76a8512: push   %eax
  0xa76a8513: jmp    *%ecx

AHE@0xb6681db0: 0xaabe0000 i2c: 0xa76a85c0 c2i: 0xa76a8661 c2iUV: 0xa76a8640
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)J (254 bytes generated)
c2i argument handler starts at 0xa76a8661
  0xa76a85c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a85c3: mov    $0xa75b1ac0,%edi
  0xa76a85c8: cmp    %edi,%eax
  0xa76a85ca: jbe    0xa76a85dd
  0xa76a85d0: mov    $0xa7691ac0,%edi
  0xa76a85d5: cmp    %edi,%eax
  0xa76a85d7: jb     0xa76a8608
  0xa76a85dd: mov    $0xa75af400,%edi
  0xa76a85e2: cmp    %edi,%eax
  0xa76a85e4: jbe    0xa76a85f7
  0xa76a85ea: mov    $0xa75b1728,%edi
  0xa76a85ef: cmp    %edi,%eax
  0xa76a85f1: jb     0xa76a8608
  ;; i2c adapter must return to an interpreter frame
  0xa76a85f7: push   $0xb75a2830
  0xa76a85fc: call   0xa76a8601
  0xa76a8601: pusha  
  0xa76a8602: call   0xb7052f32
  0xa76a8607: hlt    
  ;; } verify_i2ce 
  0xa76a8608: mov    %esp,%edi
  0xa76a860a: sub    $0x8,%esp
  0xa76a860d: and    $0xfffffff0,%esp
  0xa76a8610: push   %eax
  0xa76a8611: mov    %edi,%eax
  0xa76a8613: mov    0x30(%ebx),%edi
  0xa76a8616: mov    0x10(%eax),%ecx
  0xa76a8619: mov    0xc(%eax),%edx
  0xa76a861c: mov    0x4(%eax),%esi
  0xa76a861f: mov    %esi,0x4(%esp)
  0xa76a8623: mov    0x8(%eax),%esi
  0xa76a8626: mov    %esi,0x8(%esp)
  0xa76a862a: mov    %esp,%eax
  0xa76a862c: shr    $0xc,%eax
  0xa76a862f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a8636: mov    %ebx,0x16c(%eax)
  0xa76a863c: mov    %ebx,%eax
  0xa76a863e: jmp    *%edi
  0xa76a8640: mov    0x4(%ecx),%ebx
  0xa76a8643: cmp    0x8(%eax),%ebx
  0xa76a8646: mov    0x4(%eax),%ebx
  0xa76a8649: jne    0xa76a865c
  0xa76a864f: cmpl   $0x0,0x34(%ebx)
  0xa76a8656: je     0xa76a869b
  0xa76a865c: jmp    0xa7692560
  0xa76a8661: cmpl   $0x0,0x34(%ebx)
  0xa76a8668: je     0xa76a869b
  0xa76a866e: mov    (%esp),%eax
  0xa76a8671: pusha  
  0xa76a8672: pushf  
  0xa76a8673: sub    $0x10,%esp
  0xa76a8676: vmovsd %xmm0,(%esp)
  0xa76a867b: vmovsd %xmm1,0x8(%esp)
  0xa76a8681: push   %eax
  0xa76a8682: push   %ebx
  0xa76a8683: call   0xb71d62fc
  0xa76a8688: add    $0x8,%esp
  0xa76a868b: vmovsd (%esp),%xmm0
  0xa76a8690: vmovsd 0x8(%esp),%xmm1
  0xa76a8696: add    $0x10,%esp
  0xa76a8699: popf   
  0xa76a869a: popa   
  0xa76a869b: pop    %eax
  0xa76a869c: mov    %esp,%esi
  0xa76a869e: sub    $0x10,%esp
  0xa76a86a1: mov    %ecx,0xc(%esp)
  0xa76a86a5: mov    %edx,0x8(%esp)
  0xa76a86a9: mov    0x10(%esp),%edi
  0xa76a86ad: mov    %edi,(%esp)
  0xa76a86b0: mov    0x14(%esp),%edi
  0xa76a86b4: mov    %edi,0x4(%esp)
  0xa76a86b8: mov    0x28(%ebx),%ecx
  0xa76a86bb: push   %eax
  0xa76a86bc: jmp    *%ecx

AHE@0xb6681dd4: 0xabe00000 i2c: 0xa76a8740 c2i: 0xa76a87de c2iUV: 0xa76a87bd
i2c argument handler #0 for: receiver (J)J (247 bytes generated)
c2i argument handler starts at 0xa76a87de
  0xa76a8740: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8743: mov    $0xa75b1ac0,%edi
  0xa76a8748: cmp    %edi,%eax
  0xa76a874a: jbe    0xa76a875d
  0xa76a8750: mov    $0xa7691ac0,%edi
  0xa76a8755: cmp    %edi,%eax
  0xa76a8757: jb     0xa76a8788
  0xa76a875d: mov    $0xa75af400,%edi
  0xa76a8762: cmp    %edi,%eax
  0xa76a8764: jbe    0xa76a8777
  0xa76a876a: mov    $0xa75b1728,%edi
  0xa76a876f: cmp    %edi,%eax
  0xa76a8771: jb     0xa76a8788
  ;; i2c adapter must return to an interpreter frame
  0xa76a8777: push   $0xb75a2830
  0xa76a877c: call   0xa76a8781
  0xa76a8781: pusha  
  0xa76a8782: call   0xb7052f32
  0xa76a8787: hlt    
  ;; } verify_i2ce 
  0xa76a8788: mov    %esp,%edi
  0xa76a878a: sub    $0x8,%esp
  0xa76a878d: and    $0xfffffff0,%esp
  0xa76a8790: push   %eax
  0xa76a8791: mov    %edi,%eax
  0xa76a8793: mov    0x30(%ebx),%edi
  0xa76a8796: mov    0xc(%eax),%ecx
  0xa76a8799: mov    0x4(%eax),%esi
  0xa76a879c: mov    %esi,0x4(%esp)
  0xa76a87a0: mov    0x8(%eax),%esi
  0xa76a87a3: mov    %esi,0x8(%esp)
  0xa76a87a7: mov    %esp,%eax
  0xa76a87a9: shr    $0xc,%eax
  0xa76a87ac: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a87b3: mov    %ebx,0x16c(%eax)
  0xa76a87b9: mov    %ebx,%eax
  0xa76a87bb: jmp    *%edi
  0xa76a87bd: mov    0x4(%ecx),%ebx
  0xa76a87c0: cmp    0x8(%eax),%ebx
  0xa76a87c3: mov    0x4(%eax),%ebx
  0xa76a87c6: jne    0xa76a87d9
  0xa76a87cc: cmpl   $0x0,0x34(%ebx)
  0xa76a87d3: je     0xa76a8818
  0xa76a87d9: jmp    0xa7692560
  0xa76a87de: cmpl   $0x0,0x34(%ebx)
  0xa76a87e5: je     0xa76a8818
  0xa76a87eb: mov    (%esp),%eax
  0xa76a87ee: pusha  
  0xa76a87ef: pushf  
  0xa76a87f0: sub    $0x10,%esp
  0xa76a87f3: vmovsd %xmm0,(%esp)
  0xa76a87f8: vmovsd %xmm1,0x8(%esp)
  0xa76a87fe: push   %eax
  0xa76a87ff: push   %ebx
  0xa76a8800: call   0xb71d62fc
  0xa76a8805: add    $0x8,%esp
  0xa76a8808: vmovsd (%esp),%xmm0
  0xa76a880d: vmovsd 0x8(%esp),%xmm1
  0xa76a8813: add    $0x10,%esp
  0xa76a8816: popf   
  0xa76a8817: popa   
  0xa76a8818: pop    %eax
  0xa76a8819: mov    %esp,%esi
  0xa76a881b: sub    $0xc,%esp
  0xa76a881e: mov    %ecx,0x8(%esp)
  0xa76a8822: mov    0xc(%esp),%edi
  0xa76a8826: mov    %edi,(%esp)
  0xa76a8829: mov    0x10(%esp),%edi
  0xa76a882d: mov    %edi,0x4(%esp)
  0xa76a8831: mov    0x28(%ebx),%ecx
  0xa76a8834: push   %eax
  0xa76a8835: jmp    *%ecx

AHE@0xb6681df8: 0xaaa00000 i2c: 0xa76a88c0 c2i: 0xa76a895a c2iUV: 0xa76a8939
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)J (239 bytes generated)
c2i argument handler starts at 0xa76a895a
  0xa76a88c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a88c3: mov    $0xa75b1ac0,%edi
  0xa76a88c8: cmp    %edi,%eax
  0xa76a88ca: jbe    0xa76a88dd
  0xa76a88d0: mov    $0xa7691ac0,%edi
  0xa76a88d5: cmp    %edi,%eax
  0xa76a88d7: jb     0xa76a8908
  0xa76a88dd: mov    $0xa75af400,%edi
  0xa76a88e2: cmp    %edi,%eax
  0xa76a88e4: jbe    0xa76a88f7
  0xa76a88ea: mov    $0xa75b1728,%edi
  0xa76a88ef: cmp    %edi,%eax
  0xa76a88f1: jb     0xa76a8908
  ;; i2c adapter must return to an interpreter frame
  0xa76a88f7: push   $0xb75a2830
  0xa76a88fc: call   0xa76a8901
  0xa76a8901: pusha  
  0xa76a8902: call   0xb7052f32
  0xa76a8907: hlt    
  ;; } verify_i2ce 
  0xa76a8908: mov    %esp,%edi
  0xa76a890a: sub    $0x8,%esp
  0xa76a890d: and    $0xfffffff0,%esp
  0xa76a8910: push   %eax
  0xa76a8911: mov    %edi,%eax
  0xa76a8913: mov    0x30(%ebx),%edi
  0xa76a8916: mov    0xc(%eax),%ecx
  0xa76a8919: mov    0x8(%eax),%edx
  0xa76a891c: mov    0x4(%eax),%esi
  0xa76a891f: mov    %esi,0x4(%esp)
  0xa76a8923: mov    %esp,%eax
  0xa76a8925: shr    $0xc,%eax
  0xa76a8928: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a892f: mov    %ebx,0x16c(%eax)
  0xa76a8935: mov    %ebx,%eax
  0xa76a8937: jmp    *%edi
  0xa76a8939: mov    0x4(%ecx),%ebx
  0xa76a893c: cmp    0x8(%eax),%ebx
  0xa76a893f: mov    0x4(%eax),%ebx
  0xa76a8942: jne    0xa76a8955
  0xa76a8948: cmpl   $0x0,0x34(%ebx)
  0xa76a894f: je     0xa76a8994
  0xa76a8955: jmp    0xa7692560
  0xa76a895a: cmpl   $0x0,0x34(%ebx)
  0xa76a8961: je     0xa76a8994
  0xa76a8967: mov    (%esp),%eax
  0xa76a896a: pusha  
  0xa76a896b: pushf  
  0xa76a896c: sub    $0x10,%esp
  0xa76a896f: vmovsd %xmm0,(%esp)
  0xa76a8974: vmovsd %xmm1,0x8(%esp)
  0xa76a897a: push   %eax
  0xa76a897b: push   %ebx
  0xa76a897c: call   0xb71d62fc
  0xa76a8981: add    $0x8,%esp
  0xa76a8984: vmovsd (%esp),%xmm0
  0xa76a8989: vmovsd 0x8(%esp),%xmm1
  0xa76a898f: add    $0x10,%esp
  0xa76a8992: popf   
  0xa76a8993: popa   
  0xa76a8994: pop    %eax
  0xa76a8995: mov    %esp,%esi
  0xa76a8997: sub    $0xc,%esp
  0xa76a899a: mov    %ecx,0x8(%esp)
  0xa76a899e: mov    %edx,0x4(%esp)
  0xa76a89a2: mov    0xc(%esp),%edi
  0xa76a89a6: mov    %edi,(%esp)
  0xa76a89a9: mov    0x28(%ebx),%ecx
  0xa76a89ac: push   %eax
  0xa76a89ad: jmp    *%ecx

AHE@0xb6681e1c: 0xaabea000 i2c: 0xa76a8a40 c2i: 0xa76a8ae8 c2iUV: 0xa76a8ac7
i2c argument handler #0 for: receiver (Ljava/lang/Object;JI)V (269 bytes generated)
c2i argument handler starts at 0xa76a8ae8
  0xa76a8a40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8a43: mov    $0xa75b1ac0,%edi
  0xa76a8a48: cmp    %edi,%eax
  0xa76a8a4a: jbe    0xa76a8a5d
  0xa76a8a50: mov    $0xa7691ac0,%edi
  0xa76a8a55: cmp    %edi,%eax
  0xa76a8a57: jb     0xa76a8a88
  0xa76a8a5d: mov    $0xa75af400,%edi
  0xa76a8a62: cmp    %edi,%eax
  0xa76a8a64: jbe    0xa76a8a77
  0xa76a8a6a: mov    $0xa75b1728,%edi
  0xa76a8a6f: cmp    %edi,%eax
  0xa76a8a71: jb     0xa76a8a88
  ;; i2c adapter must return to an interpreter frame
  0xa76a8a77: push   $0xb75a2830
  0xa76a8a7c: call   0xa76a8a81
  0xa76a8a81: pusha  
  0xa76a8a82: call   0xb7052f32
  0xa76a8a87: hlt    
  ;; } verify_i2ce 
  0xa76a8a88: mov    %esp,%edi
  0xa76a8a8a: sub    $0x10,%esp
  0xa76a8a8d: and    $0xfffffff0,%esp
  0xa76a8a90: push   %eax
  0xa76a8a91: mov    %edi,%eax
  0xa76a8a93: mov    0x30(%ebx),%edi
  0xa76a8a96: mov    0x14(%eax),%ecx
  0xa76a8a99: mov    0x10(%eax),%edx
  0xa76a8a9c: mov    0x8(%eax),%esi
  0xa76a8a9f: mov    %esi,0x4(%esp)
  0xa76a8aa3: mov    0xc(%eax),%esi
  0xa76a8aa6: mov    %esi,0x8(%esp)
  0xa76a8aaa: mov    0x4(%eax),%esi
  0xa76a8aad: mov    %esi,0xc(%esp)
  0xa76a8ab1: mov    %esp,%eax
  0xa76a8ab3: shr    $0xc,%eax
  0xa76a8ab6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a8abd: mov    %ebx,0x16c(%eax)
  0xa76a8ac3: mov    %ebx,%eax
  0xa76a8ac5: jmp    *%edi
  0xa76a8ac7: mov    0x4(%ecx),%ebx
  0xa76a8aca: cmp    0x8(%eax),%ebx
  0xa76a8acd: mov    0x4(%eax),%ebx
  0xa76a8ad0: jne    0xa76a8ae3
  0xa76a8ad6: cmpl   $0x0,0x34(%ebx)
  0xa76a8add: je     0xa76a8b22
  0xa76a8ae3: jmp    0xa7692560
  0xa76a8ae8: cmpl   $0x0,0x34(%ebx)
  0xa76a8aef: je     0xa76a8b22
  0xa76a8af5: mov    (%esp),%eax
  0xa76a8af8: pusha  
  0xa76a8af9: pushf  
  0xa76a8afa: sub    $0x10,%esp
  0xa76a8afd: vmovsd %xmm0,(%esp)
  0xa76a8b02: vmovsd %xmm1,0x8(%esp)
  0xa76a8b08: push   %eax
  0xa76a8b09: push   %ebx
  0xa76a8b0a: call   0xb71d62fc
  0xa76a8b0f: add    $0x8,%esp
  0xa76a8b12: vmovsd (%esp),%xmm0
  0xa76a8b17: vmovsd 0x8(%esp),%xmm1
  0xa76a8b1d: add    $0x10,%esp
  0xa76a8b20: popf   
  0xa76a8b21: popa   
  0xa76a8b22: pop    %eax
  0xa76a8b23: mov    %esp,%esi
  0xa76a8b25: sub    $0x14,%esp
  0xa76a8b28: mov    %ecx,0x10(%esp)
  0xa76a8b2c: mov    %edx,0xc(%esp)
  0xa76a8b30: mov    0x14(%esp),%edi
  0xa76a8b34: mov    %edi,0x4(%esp)
  0xa76a8b38: mov    0x18(%esp),%edi
  0xa76a8b3c: mov    %edi,0x8(%esp)
  0xa76a8b40: mov    0x1c(%esp),%edi
  0xa76a8b44: mov    %edi,(%esp)
  0xa76a8b47: mov    0x28(%ebx),%ecx
  0xa76a8b4a: push   %eax
  0xa76a8b4b: jmp    *%ecx

AHE@0xb6681e40: 0xaaaa0000 i2c: 0xa76a8c00 c2i: 0xa76a8ca1 c2iUV: 0xa76a8c80
i2c argument handler #0 for: receiver (Ljava/lang/Object;II)V (254 bytes generated)
c2i argument handler starts at 0xa76a8ca1
  0xa76a8c00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8c03: mov    $0xa75b1ac0,%edi
  0xa76a8c08: cmp    %edi,%eax
  0xa76a8c0a: jbe    0xa76a8c1d
  0xa76a8c10: mov    $0xa7691ac0,%edi
  0xa76a8c15: cmp    %edi,%eax
  0xa76a8c17: jb     0xa76a8c48
  0xa76a8c1d: mov    $0xa75af400,%edi
  0xa76a8c22: cmp    %edi,%eax
  0xa76a8c24: jbe    0xa76a8c37
  0xa76a8c2a: mov    $0xa75b1728,%edi
  0xa76a8c2f: cmp    %edi,%eax
  0xa76a8c31: jb     0xa76a8c48
  ;; i2c adapter must return to an interpreter frame
  0xa76a8c37: push   $0xb75a2830
  0xa76a8c3c: call   0xa76a8c41
  0xa76a8c41: pusha  
  0xa76a8c42: call   0xb7052f32
  0xa76a8c47: hlt    
  ;; } verify_i2ce 
  0xa76a8c48: mov    %esp,%edi
  0xa76a8c4a: sub    $0x8,%esp
  0xa76a8c4d: and    $0xfffffff0,%esp
  0xa76a8c50: push   %eax
  0xa76a8c51: mov    %edi,%eax
  0xa76a8c53: mov    0x30(%ebx),%edi
  0xa76a8c56: mov    0x10(%eax),%ecx
  0xa76a8c59: mov    0xc(%eax),%edx
  0xa76a8c5c: mov    0x8(%eax),%esi
  0xa76a8c5f: mov    %esi,0x4(%esp)
  0xa76a8c63: mov    0x4(%eax),%esi
  0xa76a8c66: mov    %esi,0x8(%esp)
  0xa76a8c6a: mov    %esp,%eax
  0xa76a8c6c: shr    $0xc,%eax
  0xa76a8c6f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a8c76: mov    %ebx,0x16c(%eax)
  0xa76a8c7c: mov    %ebx,%eax
  0xa76a8c7e: jmp    *%edi
  0xa76a8c80: mov    0x4(%ecx),%ebx
  0xa76a8c83: cmp    0x8(%eax),%ebx
  0xa76a8c86: mov    0x4(%eax),%ebx
  0xa76a8c89: jne    0xa76a8c9c
  0xa76a8c8f: cmpl   $0x0,0x34(%ebx)
  0xa76a8c96: je     0xa76a8cdb
  0xa76a8c9c: jmp    0xa7692560
  0xa76a8ca1: cmpl   $0x0,0x34(%ebx)
  0xa76a8ca8: je     0xa76a8cdb
  0xa76a8cae: mov    (%esp),%eax
  0xa76a8cb1: pusha  
  0xa76a8cb2: pushf  
  0xa76a8cb3: sub    $0x10,%esp
  0xa76a8cb6: vmovsd %xmm0,(%esp)
  0xa76a8cbb: vmovsd %xmm1,0x8(%esp)
  0xa76a8cc1: push   %eax
  0xa76a8cc2: push   %ebx
  0xa76a8cc3: call   0xb71d62fc
  0xa76a8cc8: add    $0x8,%esp
  0xa76a8ccb: vmovsd (%esp),%xmm0
  0xa76a8cd0: vmovsd 0x8(%esp),%xmm1
  0xa76a8cd6: add    $0x10,%esp
  0xa76a8cd9: popf   
  0xa76a8cda: popa   
  0xa76a8cdb: pop    %eax
  0xa76a8cdc: mov    %esp,%esi
  0xa76a8cde: sub    $0x10,%esp
  0xa76a8ce1: mov    %ecx,0xc(%esp)
  0xa76a8ce5: mov    %edx,0x8(%esp)
  0xa76a8ce9: mov    0x10(%esp),%edi
  0xa76a8ced: mov    %edi,0x4(%esp)
  0xa76a8cf1: mov    0x14(%esp),%edi
  0xa76a8cf5: mov    %edi,(%esp)
  0xa76a8cf8: mov    0x28(%ebx),%ecx
  0xa76a8cfb: push   %eax
  0xa76a8cfc: jmp    *%ecx

AHE@0xb6681e64: 0xabea0000 i2c: 0xa76a8d80 c2i: 0xa76a8e21 c2iUV: 0xa76a8e00
i2c argument handler #0 for: receiver (JI)V (254 bytes generated)
c2i argument handler starts at 0xa76a8e21
  0xa76a8d80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8d83: mov    $0xa75b1ac0,%edi
  0xa76a8d88: cmp    %edi,%eax
  0xa76a8d8a: jbe    0xa76a8d9d
  0xa76a8d90: mov    $0xa7691ac0,%edi
  0xa76a8d95: cmp    %edi,%eax
  0xa76a8d97: jb     0xa76a8dc8
  0xa76a8d9d: mov    $0xa75af400,%edi
  0xa76a8da2: cmp    %edi,%eax
  0xa76a8da4: jbe    0xa76a8db7
  0xa76a8daa: mov    $0xa75b1728,%edi
  0xa76a8daf: cmp    %edi,%eax
  0xa76a8db1: jb     0xa76a8dc8
  ;; i2c adapter must return to an interpreter frame
  0xa76a8db7: push   $0xb75a2830
  0xa76a8dbc: call   0xa76a8dc1
  0xa76a8dc1: pusha  
  0xa76a8dc2: call   0xb7052f32
  0xa76a8dc7: hlt    
  ;; } verify_i2ce 
  0xa76a8dc8: mov    %esp,%edi
  0xa76a8dca: sub    $0x8,%esp
  0xa76a8dcd: and    $0xfffffff0,%esp
  0xa76a8dd0: push   %eax
  0xa76a8dd1: mov    %edi,%eax
  0xa76a8dd3: mov    0x30(%ebx),%edi
  0xa76a8dd6: mov    0x10(%eax),%ecx
  0xa76a8dd9: mov    0x8(%eax),%esi
  0xa76a8ddc: mov    %esi,0x4(%esp)
  0xa76a8de0: mov    0xc(%eax),%esi
  0xa76a8de3: mov    %esi,0x8(%esp)
  0xa76a8de7: mov    0x4(%eax),%edx
  0xa76a8dea: mov    %esp,%eax
  0xa76a8dec: shr    $0xc,%eax
  0xa76a8def: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a8df6: mov    %ebx,0x16c(%eax)
  0xa76a8dfc: mov    %ebx,%eax
  0xa76a8dfe: jmp    *%edi
  0xa76a8e00: mov    0x4(%ecx),%ebx
  0xa76a8e03: cmp    0x8(%eax),%ebx
  0xa76a8e06: mov    0x4(%eax),%ebx
  0xa76a8e09: jne    0xa76a8e1c
  0xa76a8e0f: cmpl   $0x0,0x34(%ebx)
  0xa76a8e16: je     0xa76a8e5b
  0xa76a8e1c: jmp    0xa7692560
  0xa76a8e21: cmpl   $0x0,0x34(%ebx)
  0xa76a8e28: je     0xa76a8e5b
  0xa76a8e2e: mov    (%esp),%eax
  0xa76a8e31: pusha  
  0xa76a8e32: pushf  
  0xa76a8e33: sub    $0x10,%esp
  0xa76a8e36: vmovsd %xmm0,(%esp)
  0xa76a8e3b: vmovsd %xmm1,0x8(%esp)
  0xa76a8e41: push   %eax
  0xa76a8e42: push   %ebx
  0xa76a8e43: call   0xb71d62fc
  0xa76a8e48: add    $0x8,%esp
  0xa76a8e4b: vmovsd (%esp),%xmm0
  0xa76a8e50: vmovsd 0x8(%esp),%xmm1
  0xa76a8e56: add    $0x10,%esp
  0xa76a8e59: popf   
  0xa76a8e5a: popa   
  0xa76a8e5b: pop    %eax
  0xa76a8e5c: mov    %esp,%esi
  0xa76a8e5e: sub    $0x10,%esp
  0xa76a8e61: mov    %ecx,0xc(%esp)
  0xa76a8e65: mov    0x10(%esp),%edi
  0xa76a8e69: mov    %edi,0x4(%esp)
  0xa76a8e6d: mov    0x14(%esp),%edi
  0xa76a8e71: mov    %edi,0x8(%esp)
  0xa76a8e75: mov    %edx,(%esp)
  0xa76a8e78: mov    0x28(%ebx),%ecx
  0xa76a8e7b: push   %eax
  0xa76a8e7c: jmp    *%ecx

AHE@0xb6681e88: 0xabe00000 i2c: 0xa76a8f00 c2i: 0xa76a8f9e c2iUV: 0xa76a8f7d
i2c argument handler #0 for: receiver (J)I (247 bytes generated)
c2i argument handler starts at 0xa76a8f9e
  0xa76a8f00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a8f03: mov    $0xa75b1ac0,%edi
  0xa76a8f08: cmp    %edi,%eax
  0xa76a8f0a: jbe    0xa76a8f1d
  0xa76a8f10: mov    $0xa7691ac0,%edi
  0xa76a8f15: cmp    %edi,%eax
  0xa76a8f17: jb     0xa76a8f48
  0xa76a8f1d: mov    $0xa75af400,%edi
  0xa76a8f22: cmp    %edi,%eax
  0xa76a8f24: jbe    0xa76a8f37
  0xa76a8f2a: mov    $0xa75b1728,%edi
  0xa76a8f2f: cmp    %edi,%eax
  0xa76a8f31: jb     0xa76a8f48
  ;; i2c adapter must return to an interpreter frame
  0xa76a8f37: push   $0xb75a2830
  0xa76a8f3c: call   0xa76a8f41
  0xa76a8f41: pusha  
  0xa76a8f42: call   0xb7052f32
  0xa76a8f47: hlt    
  ;; } verify_i2ce 
  0xa76a8f48: mov    %esp,%edi
  0xa76a8f4a: sub    $0x8,%esp
  0xa76a8f4d: and    $0xfffffff0,%esp
  0xa76a8f50: push   %eax
  0xa76a8f51: mov    %edi,%eax
  0xa76a8f53: mov    0x30(%ebx),%edi
  0xa76a8f56: mov    0xc(%eax),%ecx
  0xa76a8f59: mov    0x4(%eax),%esi
  0xa76a8f5c: mov    %esi,0x4(%esp)
  0xa76a8f60: mov    0x8(%eax),%esi
  0xa76a8f63: mov    %esi,0x8(%esp)
  0xa76a8f67: mov    %esp,%eax
  0xa76a8f69: shr    $0xc,%eax
  0xa76a8f6c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a8f73: mov    %ebx,0x16c(%eax)
  0xa76a8f79: mov    %ebx,%eax
  0xa76a8f7b: jmp    *%edi
  0xa76a8f7d: mov    0x4(%ecx),%ebx
  0xa76a8f80: cmp    0x8(%eax),%ebx
  0xa76a8f83: mov    0x4(%eax),%ebx
  0xa76a8f86: jne    0xa76a8f99
  0xa76a8f8c: cmpl   $0x0,0x34(%ebx)
  0xa76a8f93: je     0xa76a8fd8
  0xa76a8f99: jmp    0xa7692560
  0xa76a8f9e: cmpl   $0x0,0x34(%ebx)
  0xa76a8fa5: je     0xa76a8fd8
  0xa76a8fab: mov    (%esp),%eax
  0xa76a8fae: pusha  
  0xa76a8faf: pushf  
  0xa76a8fb0: sub    $0x10,%esp
  0xa76a8fb3: vmovsd %xmm0,(%esp)
  0xa76a8fb8: vmovsd %xmm1,0x8(%esp)
  0xa76a8fbe: push   %eax
  0xa76a8fbf: push   %ebx
  0xa76a8fc0: call   0xb71d62fc
  0xa76a8fc5: add    $0x8,%esp
  0xa76a8fc8: vmovsd (%esp),%xmm0
  0xa76a8fcd: vmovsd 0x8(%esp),%xmm1
  0xa76a8fd3: add    $0x10,%esp
  0xa76a8fd6: popf   
  0xa76a8fd7: popa   
  0xa76a8fd8: pop    %eax
  0xa76a8fd9: mov    %esp,%esi
  0xa76a8fdb: sub    $0xc,%esp
  0xa76a8fde: mov    %ecx,0x8(%esp)
  0xa76a8fe2: mov    0xc(%esp),%edi
  0xa76a8fe6: mov    %edi,(%esp)
  0xa76a8fe9: mov    0x10(%esp),%edi
  0xa76a8fed: mov    %edi,0x4(%esp)
  0xa76a8ff1: mov    0x28(%ebx),%ecx
  0xa76a8ff4: push   %eax
  0xa76a8ff5: jmp    *%ecx

AHE@0xb6681eac: 0xaaa00000 i2c: 0xa76a9080 c2i: 0xa76a911a c2iUV: 0xa76a90f9
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)I (239 bytes generated)
c2i argument handler starts at 0xa76a911a
  0xa76a9080: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9083: mov    $0xa75b1ac0,%edi
  0xa76a9088: cmp    %edi,%eax
  0xa76a908a: jbe    0xa76a909d
  0xa76a9090: mov    $0xa7691ac0,%edi
  0xa76a9095: cmp    %edi,%eax
  0xa76a9097: jb     0xa76a90c8
  0xa76a909d: mov    $0xa75af400,%edi
  0xa76a90a2: cmp    %edi,%eax
  0xa76a90a4: jbe    0xa76a90b7
  0xa76a90aa: mov    $0xa75b1728,%edi
  0xa76a90af: cmp    %edi,%eax
  0xa76a90b1: jb     0xa76a90c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a90b7: push   $0xb75a2830
  0xa76a90bc: call   0xa76a90c1
  0xa76a90c1: pusha  
  0xa76a90c2: call   0xb7052f32
  0xa76a90c7: hlt    
  ;; } verify_i2ce 
  0xa76a90c8: mov    %esp,%edi
  0xa76a90ca: sub    $0x8,%esp
  0xa76a90cd: and    $0xfffffff0,%esp
  0xa76a90d0: push   %eax
  0xa76a90d1: mov    %edi,%eax
  0xa76a90d3: mov    0x30(%ebx),%edi
  0xa76a90d6: mov    0xc(%eax),%ecx
  0xa76a90d9: mov    0x8(%eax),%edx
  0xa76a90dc: mov    0x4(%eax),%esi
  0xa76a90df: mov    %esi,0x4(%esp)
  0xa76a90e3: mov    %esp,%eax
  0xa76a90e5: shr    $0xc,%eax
  0xa76a90e8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a90ef: mov    %ebx,0x16c(%eax)
  0xa76a90f5: mov    %ebx,%eax
  0xa76a90f7: jmp    *%edi
  0xa76a90f9: mov    0x4(%ecx),%ebx
  0xa76a90fc: cmp    0x8(%eax),%ebx
  0xa76a90ff: mov    0x4(%eax),%ebx
  0xa76a9102: jne    0xa76a9115
  0xa76a9108: cmpl   $0x0,0x34(%ebx)
  0xa76a910f: je     0xa76a9154
  0xa76a9115: jmp    0xa7692560
  0xa76a911a: cmpl   $0x0,0x34(%ebx)
  0xa76a9121: je     0xa76a9154
  0xa76a9127: mov    (%esp),%eax
  0xa76a912a: pusha  
  0xa76a912b: pushf  
  0xa76a912c: sub    $0x10,%esp
  0xa76a912f: vmovsd %xmm0,(%esp)
  0xa76a9134: vmovsd %xmm1,0x8(%esp)
  0xa76a913a: push   %eax
  0xa76a913b: push   %ebx
  0xa76a913c: call   0xb71d62fc
  0xa76a9141: add    $0x8,%esp
  0xa76a9144: vmovsd (%esp),%xmm0
  0xa76a9149: vmovsd 0x8(%esp),%xmm1
  0xa76a914f: add    $0x10,%esp
  0xa76a9152: popf   
  0xa76a9153: popa   
  0xa76a9154: pop    %eax
  0xa76a9155: mov    %esp,%esi
  0xa76a9157: sub    $0xc,%esp
  0xa76a915a: mov    %ecx,0x8(%esp)
  0xa76a915e: mov    %edx,0x4(%esp)
  0xa76a9162: mov    0xc(%esp),%edi
  0xa76a9166: mov    %edi,(%esp)
  0xa76a9169: mov    0x28(%ebx),%ecx
  0xa76a916c: push   %eax
  0xa76a916d: jmp    *%ecx

AHE@0xb6681ed0: 0xaabe0000 i2c: 0xa76a9200 c2i: 0xa76a92a1 c2iUV: 0xa76a9280
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)I (254 bytes generated)
c2i argument handler starts at 0xa76a92a1
  0xa76a9200: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9203: mov    $0xa75b1ac0,%edi
  0xa76a9208: cmp    %edi,%eax
  0xa76a920a: jbe    0xa76a921d
  0xa76a9210: mov    $0xa7691ac0,%edi
  0xa76a9215: cmp    %edi,%eax
  0xa76a9217: jb     0xa76a9248
  0xa76a921d: mov    $0xa75af400,%edi
  0xa76a9222: cmp    %edi,%eax
  0xa76a9224: jbe    0xa76a9237
  0xa76a922a: mov    $0xa75b1728,%edi
  0xa76a922f: cmp    %edi,%eax
  0xa76a9231: jb     0xa76a9248
  ;; i2c adapter must return to an interpreter frame
  0xa76a9237: push   $0xb75a2830
  0xa76a923c: call   0xa76a9241
  0xa76a9241: pusha  
  0xa76a9242: call   0xb7052f32
  0xa76a9247: hlt    
  ;; } verify_i2ce 
  0xa76a9248: mov    %esp,%edi
  0xa76a924a: sub    $0x8,%esp
  0xa76a924d: and    $0xfffffff0,%esp
  0xa76a9250: push   %eax
  0xa76a9251: mov    %edi,%eax
  0xa76a9253: mov    0x30(%ebx),%edi
  0xa76a9256: mov    0x10(%eax),%ecx
  0xa76a9259: mov    0xc(%eax),%edx
  0xa76a925c: mov    0x4(%eax),%esi
  0xa76a925f: mov    %esi,0x4(%esp)
  0xa76a9263: mov    0x8(%eax),%esi
  0xa76a9266: mov    %esi,0x8(%esp)
  0xa76a926a: mov    %esp,%eax
  0xa76a926c: shr    $0xc,%eax
  0xa76a926f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a9276: mov    %ebx,0x16c(%eax)
  0xa76a927c: mov    %ebx,%eax
  0xa76a927e: jmp    *%edi
  0xa76a9280: mov    0x4(%ecx),%ebx
  0xa76a9283: cmp    0x8(%eax),%ebx
  0xa76a9286: mov    0x4(%eax),%ebx
  0xa76a9289: jne    0xa76a929c
  0xa76a928f: cmpl   $0x0,0x34(%ebx)
  0xa76a9296: je     0xa76a92db
  0xa76a929c: jmp    0xa7692560
  0xa76a92a1: cmpl   $0x0,0x34(%ebx)
  0xa76a92a8: je     0xa76a92db
  0xa76a92ae: mov    (%esp),%eax
  0xa76a92b1: pusha  
  0xa76a92b2: pushf  
  0xa76a92b3: sub    $0x10,%esp
  0xa76a92b6: vmovsd %xmm0,(%esp)
  0xa76a92bb: vmovsd %xmm1,0x8(%esp)
  0xa76a92c1: push   %eax
  0xa76a92c2: push   %ebx
  0xa76a92c3: call   0xb71d62fc
  0xa76a92c8: add    $0x8,%esp
  0xa76a92cb: vmovsd (%esp),%xmm0
  0xa76a92d0: vmovsd 0x8(%esp),%xmm1
  0xa76a92d6: add    $0x10,%esp
  0xa76a92d9: popf   
  0xa76a92da: popa   
  0xa76a92db: pop    %eax
  0xa76a92dc: mov    %esp,%esi
  0xa76a92de: sub    $0x10,%esp
  0xa76a92e1: mov    %ecx,0xc(%esp)
  0xa76a92e5: mov    %edx,0x8(%esp)
  0xa76a92e9: mov    0x10(%esp),%edi
  0xa76a92ed: mov    %edi,(%esp)
  0xa76a92f0: mov    0x14(%esp),%edi
  0xa76a92f4: mov    %edi,0x4(%esp)
  0xa76a92f8: mov    0x28(%ebx),%ecx
  0xa76a92fb: push   %eax
  0xa76a92fc: jmp    *%ecx

AHE@0xb6681ef4: 0xaaaa0000 i2c: 0xa76a9380 c2i: 0xa76a9421 c2iUV: 0xa76a9400
i2c argument handler #0 for: receiver (Ljava/lang/Object;IC)V (254 bytes generated)
c2i argument handler starts at 0xa76a9421
  0xa76a9380: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9383: mov    $0xa75b1ac0,%edi
  0xa76a9388: cmp    %edi,%eax
  0xa76a938a: jbe    0xa76a939d
  0xa76a9390: mov    $0xa7691ac0,%edi
  0xa76a9395: cmp    %edi,%eax
  0xa76a9397: jb     0xa76a93c8
  0xa76a939d: mov    $0xa75af400,%edi
  0xa76a93a2: cmp    %edi,%eax
  0xa76a93a4: jbe    0xa76a93b7
  0xa76a93aa: mov    $0xa75b1728,%edi
  0xa76a93af: cmp    %edi,%eax
  0xa76a93b1: jb     0xa76a93c8
  ;; i2c adapter must return to an interpreter frame
  0xa76a93b7: push   $0xb75a2830
  0xa76a93bc: call   0xa76a93c1
  0xa76a93c1: pusha  
  0xa76a93c2: call   0xb7052f32
  0xa76a93c7: hlt    
  ;; } verify_i2ce 
  0xa76a93c8: mov    %esp,%edi
  0xa76a93ca: sub    $0x8,%esp
  0xa76a93cd: and    $0xfffffff0,%esp
  0xa76a93d0: push   %eax
  0xa76a93d1: mov    %edi,%eax
  0xa76a93d3: mov    0x30(%ebx),%edi
  0xa76a93d6: mov    0x10(%eax),%ecx
  0xa76a93d9: mov    0xc(%eax),%edx
  0xa76a93dc: mov    0x8(%eax),%esi
  0xa76a93df: mov    %esi,0x4(%esp)
  0xa76a93e3: mov    0x4(%eax),%esi
  0xa76a93e6: mov    %esi,0x8(%esp)
  0xa76a93ea: mov    %esp,%eax
  0xa76a93ec: shr    $0xc,%eax
  0xa76a93ef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a93f6: mov    %ebx,0x16c(%eax)
  0xa76a93fc: mov    %ebx,%eax
  0xa76a93fe: jmp    *%edi
  0xa76a9400: mov    0x4(%ecx),%ebx
  0xa76a9403: cmp    0x8(%eax),%ebx
  0xa76a9406: mov    0x4(%eax),%ebx
  0xa76a9409: jne    0xa76a941c
  0xa76a940f: cmpl   $0x0,0x34(%ebx)
  0xa76a9416: je     0xa76a945b
  0xa76a941c: jmp    0xa7692560
  0xa76a9421: cmpl   $0x0,0x34(%ebx)
  0xa76a9428: je     0xa76a945b
  0xa76a942e: mov    (%esp),%eax
  0xa76a9431: pusha  
  0xa76a9432: pushf  
  0xa76a9433: sub    $0x10,%esp
  0xa76a9436: vmovsd %xmm0,(%esp)
  0xa76a943b: vmovsd %xmm1,0x8(%esp)
  0xa76a9441: push   %eax
  0xa76a9442: push   %ebx
  0xa76a9443: call   0xb71d62fc
  0xa76a9448: add    $0x8,%esp
  0xa76a944b: vmovsd (%esp),%xmm0
  0xa76a9450: vmovsd 0x8(%esp),%xmm1
  0xa76a9456: add    $0x10,%esp
  0xa76a9459: popf   
  0xa76a945a: popa   
  0xa76a945b: pop    %eax
  0xa76a945c: mov    %esp,%esi
  0xa76a945e: sub    $0x10,%esp
  0xa76a9461: mov    %ecx,0xc(%esp)
  0xa76a9465: mov    %edx,0x8(%esp)
  0xa76a9469: mov    0x10(%esp),%edi
  0xa76a946d: mov    %edi,0x4(%esp)
  0xa76a9471: mov    0x14(%esp),%edi
  0xa76a9475: mov    %edi,(%esp)
  0xa76a9478: mov    0x28(%ebx),%ecx
  0xa76a947b: push   %eax
  0xa76a947c: jmp    *%ecx

AHE@0xb6681f18: 0xaabea000 i2c: 0xa76a9500 c2i: 0xa76a95a8 c2iUV: 0xa76a9587
i2c argument handler #0 for: receiver (Ljava/lang/Object;JC)V (269 bytes generated)
c2i argument handler starts at 0xa76a95a8
  0xa76a9500: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9503: mov    $0xa75b1ac0,%edi
  0xa76a9508: cmp    %edi,%eax
  0xa76a950a: jbe    0xa76a951d
  0xa76a9510: mov    $0xa7691ac0,%edi
  0xa76a9515: cmp    %edi,%eax
  0xa76a9517: jb     0xa76a9548
  0xa76a951d: mov    $0xa75af400,%edi
  0xa76a9522: cmp    %edi,%eax
  0xa76a9524: jbe    0xa76a9537
  0xa76a952a: mov    $0xa75b1728,%edi
  0xa76a952f: cmp    %edi,%eax
  0xa76a9531: jb     0xa76a9548
  ;; i2c adapter must return to an interpreter frame
  0xa76a9537: push   $0xb75a2830
  0xa76a953c: call   0xa76a9541
  0xa76a9541: pusha  
  0xa76a9542: call   0xb7052f32
  0xa76a9547: hlt    
  ;; } verify_i2ce 
  0xa76a9548: mov    %esp,%edi
  0xa76a954a: sub    $0x10,%esp
  0xa76a954d: and    $0xfffffff0,%esp
  0xa76a9550: push   %eax
  0xa76a9551: mov    %edi,%eax
  0xa76a9553: mov    0x30(%ebx),%edi
  0xa76a9556: mov    0x14(%eax),%ecx
  0xa76a9559: mov    0x10(%eax),%edx
  0xa76a955c: mov    0x8(%eax),%esi
  0xa76a955f: mov    %esi,0x4(%esp)
  0xa76a9563: mov    0xc(%eax),%esi
  0xa76a9566: mov    %esi,0x8(%esp)
  0xa76a956a: mov    0x4(%eax),%esi
  0xa76a956d: mov    %esi,0xc(%esp)
  0xa76a9571: mov    %esp,%eax
  0xa76a9573: shr    $0xc,%eax
  0xa76a9576: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a957d: mov    %ebx,0x16c(%eax)
  0xa76a9583: mov    %ebx,%eax
  0xa76a9585: jmp    *%edi
  0xa76a9587: mov    0x4(%ecx),%ebx
  0xa76a958a: cmp    0x8(%eax),%ebx
  0xa76a958d: mov    0x4(%eax),%ebx
  0xa76a9590: jne    0xa76a95a3
  0xa76a9596: cmpl   $0x0,0x34(%ebx)
  0xa76a959d: je     0xa76a95e2
  0xa76a95a3: jmp    0xa7692560
  0xa76a95a8: cmpl   $0x0,0x34(%ebx)
  0xa76a95af: je     0xa76a95e2
  0xa76a95b5: mov    (%esp),%eax
  0xa76a95b8: pusha  
  0xa76a95b9: pushf  
  0xa76a95ba: sub    $0x10,%esp
  0xa76a95bd: vmovsd %xmm0,(%esp)
  0xa76a95c2: vmovsd %xmm1,0x8(%esp)
  0xa76a95c8: push   %eax
  0xa76a95c9: push   %ebx
  0xa76a95ca: call   0xb71d62fc
  0xa76a95cf: add    $0x8,%esp
  0xa76a95d2: vmovsd (%esp),%xmm0
  0xa76a95d7: vmovsd 0x8(%esp),%xmm1
  0xa76a95dd: add    $0x10,%esp
  0xa76a95e0: popf   
  0xa76a95e1: popa   
  0xa76a95e2: pop    %eax
  0xa76a95e3: mov    %esp,%esi
  0xa76a95e5: sub    $0x14,%esp
  0xa76a95e8: mov    %ecx,0x10(%esp)
  0xa76a95ec: mov    %edx,0xc(%esp)
  0xa76a95f0: mov    0x14(%esp),%edi
  0xa76a95f4: mov    %edi,0x4(%esp)
  0xa76a95f8: mov    0x18(%esp),%edi
  0xa76a95fc: mov    %edi,0x8(%esp)
  0xa76a9600: mov    0x1c(%esp),%edi
  0xa76a9604: mov    %edi,(%esp)
  0xa76a9607: mov    0x28(%ebx),%ecx
  0xa76a960a: push   %eax
  0xa76a960b: jmp    *%ecx

AHE@0xb6681f3c: 0xabea0000 i2c: 0xa76a96c0 c2i: 0xa76a9761 c2iUV: 0xa76a9740
i2c argument handler #0 for: receiver (JC)V (254 bytes generated)
c2i argument handler starts at 0xa76a9761
  0xa76a96c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a96c3: mov    $0xa75b1ac0,%edi
  0xa76a96c8: cmp    %edi,%eax
  0xa76a96ca: jbe    0xa76a96dd
  0xa76a96d0: mov    $0xa7691ac0,%edi
  0xa76a96d5: cmp    %edi,%eax
  0xa76a96d7: jb     0xa76a9708
  0xa76a96dd: mov    $0xa75af400,%edi
  0xa76a96e2: cmp    %edi,%eax
  0xa76a96e4: jbe    0xa76a96f7
  0xa76a96ea: mov    $0xa75b1728,%edi
  0xa76a96ef: cmp    %edi,%eax
  0xa76a96f1: jb     0xa76a9708
  ;; i2c adapter must return to an interpreter frame
  0xa76a96f7: push   $0xb75a2830
  0xa76a96fc: call   0xa76a9701
  0xa76a9701: pusha  
  0xa76a9702: call   0xb7052f32
  0xa76a9707: hlt    
  ;; } verify_i2ce 
  0xa76a9708: mov    %esp,%edi
  0xa76a970a: sub    $0x8,%esp
  0xa76a970d: and    $0xfffffff0,%esp
  0xa76a9710: push   %eax
  0xa76a9711: mov    %edi,%eax
  0xa76a9713: mov    0x30(%ebx),%edi
  0xa76a9716: mov    0x10(%eax),%ecx
  0xa76a9719: mov    0x8(%eax),%esi
  0xa76a971c: mov    %esi,0x4(%esp)
  0xa76a9720: mov    0xc(%eax),%esi
  0xa76a9723: mov    %esi,0x8(%esp)
  0xa76a9727: mov    0x4(%eax),%edx
  0xa76a972a: mov    %esp,%eax
  0xa76a972c: shr    $0xc,%eax
  0xa76a972f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a9736: mov    %ebx,0x16c(%eax)
  0xa76a973c: mov    %ebx,%eax
  0xa76a973e: jmp    *%edi
  0xa76a9740: mov    0x4(%ecx),%ebx
  0xa76a9743: cmp    0x8(%eax),%ebx
  0xa76a9746: mov    0x4(%eax),%ebx
  0xa76a9749: jne    0xa76a975c
  0xa76a974f: cmpl   $0x0,0x34(%ebx)
  0xa76a9756: je     0xa76a979b
  0xa76a975c: jmp    0xa7692560
  0xa76a9761: cmpl   $0x0,0x34(%ebx)
  0xa76a9768: je     0xa76a979b
  0xa76a976e: mov    (%esp),%eax
  0xa76a9771: pusha  
  0xa76a9772: pushf  
  0xa76a9773: sub    $0x10,%esp
  0xa76a9776: vmovsd %xmm0,(%esp)
  0xa76a977b: vmovsd %xmm1,0x8(%esp)
  0xa76a9781: push   %eax
  0xa76a9782: push   %ebx
  0xa76a9783: call   0xb71d62fc
  0xa76a9788: add    $0x8,%esp
  0xa76a978b: vmovsd (%esp),%xmm0
  0xa76a9790: vmovsd 0x8(%esp),%xmm1
  0xa76a9796: add    $0x10,%esp
  0xa76a9799: popf   
  0xa76a979a: popa   
  0xa76a979b: pop    %eax
  0xa76a979c: mov    %esp,%esi
  0xa76a979e: sub    $0x10,%esp
  0xa76a97a1: mov    %ecx,0xc(%esp)
  0xa76a97a5: mov    0x10(%esp),%edi
  0xa76a97a9: mov    %edi,0x4(%esp)
  0xa76a97ad: mov    0x14(%esp),%edi
  0xa76a97b1: mov    %edi,0x8(%esp)
  0xa76a97b5: mov    %edx,(%esp)
  0xa76a97b8: mov    0x28(%ebx),%ecx
  0xa76a97bb: push   %eax
  0xa76a97bc: jmp    *%ecx

AHE@0xb6681f60: 0xaaa00000 i2c: 0xa76a9840 c2i: 0xa76a98da c2iUV: 0xa76a98b9
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)C (239 bytes generated)
c2i argument handler starts at 0xa76a98da
  0xa76a9840: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9843: mov    $0xa75b1ac0,%edi
  0xa76a9848: cmp    %edi,%eax
  0xa76a984a: jbe    0xa76a985d
  0xa76a9850: mov    $0xa7691ac0,%edi
  0xa76a9855: cmp    %edi,%eax
  0xa76a9857: jb     0xa76a9888
  0xa76a985d: mov    $0xa75af400,%edi
  0xa76a9862: cmp    %edi,%eax
  0xa76a9864: jbe    0xa76a9877
  0xa76a986a: mov    $0xa75b1728,%edi
  0xa76a986f: cmp    %edi,%eax
  0xa76a9871: jb     0xa76a9888
  ;; i2c adapter must return to an interpreter frame
  0xa76a9877: push   $0xb75a2830
  0xa76a987c: call   0xa76a9881
  0xa76a9881: pusha  
  0xa76a9882: call   0xb7052f32
  0xa76a9887: hlt    
  ;; } verify_i2ce 
  0xa76a9888: mov    %esp,%edi
  0xa76a988a: sub    $0x8,%esp
  0xa76a988d: and    $0xfffffff0,%esp
  0xa76a9890: push   %eax
  0xa76a9891: mov    %edi,%eax
  0xa76a9893: mov    0x30(%ebx),%edi
  0xa76a9896: mov    0xc(%eax),%ecx
  0xa76a9899: mov    0x8(%eax),%edx
  0xa76a989c: mov    0x4(%eax),%esi
  0xa76a989f: mov    %esi,0x4(%esp)
  0xa76a98a3: mov    %esp,%eax
  0xa76a98a5: shr    $0xc,%eax
  0xa76a98a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a98af: mov    %ebx,0x16c(%eax)
  0xa76a98b5: mov    %ebx,%eax
  0xa76a98b7: jmp    *%edi
  0xa76a98b9: mov    0x4(%ecx),%ebx
  0xa76a98bc: cmp    0x8(%eax),%ebx
  0xa76a98bf: mov    0x4(%eax),%ebx
  0xa76a98c2: jne    0xa76a98d5
  0xa76a98c8: cmpl   $0x0,0x34(%ebx)
  0xa76a98cf: je     0xa76a9914
  0xa76a98d5: jmp    0xa7692560
  0xa76a98da: cmpl   $0x0,0x34(%ebx)
  0xa76a98e1: je     0xa76a9914
  0xa76a98e7: mov    (%esp),%eax
  0xa76a98ea: pusha  
  0xa76a98eb: pushf  
  0xa76a98ec: sub    $0x10,%esp
  0xa76a98ef: vmovsd %xmm0,(%esp)
  0xa76a98f4: vmovsd %xmm1,0x8(%esp)
  0xa76a98fa: push   %eax
  0xa76a98fb: push   %ebx
  0xa76a98fc: call   0xb71d62fc
  0xa76a9901: add    $0x8,%esp
  0xa76a9904: vmovsd (%esp),%xmm0
  0xa76a9909: vmovsd 0x8(%esp),%xmm1
  0xa76a990f: add    $0x10,%esp
  0xa76a9912: popf   
  0xa76a9913: popa   
  0xa76a9914: pop    %eax
  0xa76a9915: mov    %esp,%esi
  0xa76a9917: sub    $0xc,%esp
  0xa76a991a: mov    %ecx,0x8(%esp)
  0xa76a991e: mov    %edx,0x4(%esp)
  0xa76a9922: mov    0xc(%esp),%edi
  0xa76a9926: mov    %edi,(%esp)
  0xa76a9929: mov    0x28(%ebx),%ecx
  0xa76a992c: push   %eax
  0xa76a992d: jmp    *%ecx

AHE@0xb6681f84: 0xaabe0000 i2c: 0xa76a99c0 c2i: 0xa76a9a61 c2iUV: 0xa76a9a40
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)C (254 bytes generated)
c2i argument handler starts at 0xa76a9a61
  0xa76a99c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a99c3: mov    $0xa75b1ac0,%edi
  0xa76a99c8: cmp    %edi,%eax
  0xa76a99ca: jbe    0xa76a99dd
  0xa76a99d0: mov    $0xa7691ac0,%edi
  0xa76a99d5: cmp    %edi,%eax
  0xa76a99d7: jb     0xa76a9a08
  0xa76a99dd: mov    $0xa75af400,%edi
  0xa76a99e2: cmp    %edi,%eax
  0xa76a99e4: jbe    0xa76a99f7
  0xa76a99ea: mov    $0xa75b1728,%edi
  0xa76a99ef: cmp    %edi,%eax
  0xa76a99f1: jb     0xa76a9a08
  ;; i2c adapter must return to an interpreter frame
  0xa76a99f7: push   $0xb75a2830
  0xa76a99fc: call   0xa76a9a01
  0xa76a9a01: pusha  
  0xa76a9a02: call   0xb7052f32
  0xa76a9a07: hlt    
  ;; } verify_i2ce 
  0xa76a9a08: mov    %esp,%edi
  0xa76a9a0a: sub    $0x8,%esp
  0xa76a9a0d: and    $0xfffffff0,%esp
  0xa76a9a10: push   %eax
  0xa76a9a11: mov    %edi,%eax
  0xa76a9a13: mov    0x30(%ebx),%edi
  0xa76a9a16: mov    0x10(%eax),%ecx
  0xa76a9a19: mov    0xc(%eax),%edx
  0xa76a9a1c: mov    0x4(%eax),%esi
  0xa76a9a1f: mov    %esi,0x4(%esp)
  0xa76a9a23: mov    0x8(%eax),%esi
  0xa76a9a26: mov    %esi,0x8(%esp)
  0xa76a9a2a: mov    %esp,%eax
  0xa76a9a2c: shr    $0xc,%eax
  0xa76a9a2f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a9a36: mov    %ebx,0x16c(%eax)
  0xa76a9a3c: mov    %ebx,%eax
  0xa76a9a3e: jmp    *%edi
  0xa76a9a40: mov    0x4(%ecx),%ebx
  0xa76a9a43: cmp    0x8(%eax),%ebx
  0xa76a9a46: mov    0x4(%eax),%ebx
  0xa76a9a49: jne    0xa76a9a5c
  0xa76a9a4f: cmpl   $0x0,0x34(%ebx)
  0xa76a9a56: je     0xa76a9a9b
  0xa76a9a5c: jmp    0xa7692560
  0xa76a9a61: cmpl   $0x0,0x34(%ebx)
  0xa76a9a68: je     0xa76a9a9b
  0xa76a9a6e: mov    (%esp),%eax
  0xa76a9a71: pusha  
  0xa76a9a72: pushf  
  0xa76a9a73: sub    $0x10,%esp
  0xa76a9a76: vmovsd %xmm0,(%esp)
  0xa76a9a7b: vmovsd %xmm1,0x8(%esp)
  0xa76a9a81: push   %eax
  0xa76a9a82: push   %ebx
  0xa76a9a83: call   0xb71d62fc
  0xa76a9a88: add    $0x8,%esp
  0xa76a9a8b: vmovsd (%esp),%xmm0
  0xa76a9a90: vmovsd 0x8(%esp),%xmm1
  0xa76a9a96: add    $0x10,%esp
  0xa76a9a99: popf   
  0xa76a9a9a: popa   
  0xa76a9a9b: pop    %eax
  0xa76a9a9c: mov    %esp,%esi
  0xa76a9a9e: sub    $0x10,%esp
  0xa76a9aa1: mov    %ecx,0xc(%esp)
  0xa76a9aa5: mov    %edx,0x8(%esp)
  0xa76a9aa9: mov    0x10(%esp),%edi
  0xa76a9aad: mov    %edi,(%esp)
  0xa76a9ab0: mov    0x14(%esp),%edi
  0xa76a9ab4: mov    %edi,0x4(%esp)
  0xa76a9ab8: mov    0x28(%ebx),%ecx
  0xa76a9abb: push   %eax
  0xa76a9abc: jmp    *%ecx

AHE@0xb6681fa8: 0xabe00000 i2c: 0xa76a9b40 c2i: 0xa76a9bde c2iUV: 0xa76a9bbd
i2c argument handler #0 for: receiver (J)C (247 bytes generated)
c2i argument handler starts at 0xa76a9bde
  0xa76a9b40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9b43: mov    $0xa75b1ac0,%edi
  0xa76a9b48: cmp    %edi,%eax
  0xa76a9b4a: jbe    0xa76a9b5d
  0xa76a9b50: mov    $0xa7691ac0,%edi
  0xa76a9b55: cmp    %edi,%eax
  0xa76a9b57: jb     0xa76a9b88
  0xa76a9b5d: mov    $0xa75af400,%edi
  0xa76a9b62: cmp    %edi,%eax
  0xa76a9b64: jbe    0xa76a9b77
  0xa76a9b6a: mov    $0xa75b1728,%edi
  0xa76a9b6f: cmp    %edi,%eax
  0xa76a9b71: jb     0xa76a9b88
  ;; i2c adapter must return to an interpreter frame
  0xa76a9b77: push   $0xb75a2830
  0xa76a9b7c: call   0xa76a9b81
  0xa76a9b81: pusha  
  0xa76a9b82: call   0xb7052f32
  0xa76a9b87: hlt    
  ;; } verify_i2ce 
  0xa76a9b88: mov    %esp,%edi
  0xa76a9b8a: sub    $0x8,%esp
  0xa76a9b8d: and    $0xfffffff0,%esp
  0xa76a9b90: push   %eax
  0xa76a9b91: mov    %edi,%eax
  0xa76a9b93: mov    0x30(%ebx),%edi
  0xa76a9b96: mov    0xc(%eax),%ecx
  0xa76a9b99: mov    0x4(%eax),%esi
  0xa76a9b9c: mov    %esi,0x4(%esp)
  0xa76a9ba0: mov    0x8(%eax),%esi
  0xa76a9ba3: mov    %esi,0x8(%esp)
  0xa76a9ba7: mov    %esp,%eax
  0xa76a9ba9: shr    $0xc,%eax
  0xa76a9bac: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a9bb3: mov    %ebx,0x16c(%eax)
  0xa76a9bb9: mov    %ebx,%eax
  0xa76a9bbb: jmp    *%edi
  0xa76a9bbd: mov    0x4(%ecx),%ebx
  0xa76a9bc0: cmp    0x8(%eax),%ebx
  0xa76a9bc3: mov    0x4(%eax),%ebx
  0xa76a9bc6: jne    0xa76a9bd9
  0xa76a9bcc: cmpl   $0x0,0x34(%ebx)
  0xa76a9bd3: je     0xa76a9c18
  0xa76a9bd9: jmp    0xa7692560
  0xa76a9bde: cmpl   $0x0,0x34(%ebx)
  0xa76a9be5: je     0xa76a9c18
  0xa76a9beb: mov    (%esp),%eax
  0xa76a9bee: pusha  
  0xa76a9bef: pushf  
  0xa76a9bf0: sub    $0x10,%esp
  0xa76a9bf3: vmovsd %xmm0,(%esp)
  0xa76a9bf8: vmovsd %xmm1,0x8(%esp)
  0xa76a9bfe: push   %eax
  0xa76a9bff: push   %ebx
  0xa76a9c00: call   0xb71d62fc
  0xa76a9c05: add    $0x8,%esp
  0xa76a9c08: vmovsd (%esp),%xmm0
  0xa76a9c0d: vmovsd 0x8(%esp),%xmm1
  0xa76a9c13: add    $0x10,%esp
  0xa76a9c16: popf   
  0xa76a9c17: popa   
  0xa76a9c18: pop    %eax
  0xa76a9c19: mov    %esp,%esi
  0xa76a9c1b: sub    $0xc,%esp
  0xa76a9c1e: mov    %ecx,0x8(%esp)
  0xa76a9c22: mov    0xc(%esp),%edi
  0xa76a9c26: mov    %edi,(%esp)
  0xa76a9c29: mov    0x10(%esp),%edi
  0xa76a9c2d: mov    %edi,0x4(%esp)
  0xa76a9c31: mov    0x28(%ebx),%ecx
  0xa76a9c34: push   %eax
  0xa76a9c35: jmp    *%ecx

AHE@0xb6681fcc: 0xaabea000 i2c: 0xa76a9cc0 c2i: 0xa76a9d68 c2iUV: 0xa76a9d47
i2c argument handler #0 for: receiver (Ljava/lang/Object;JS)V (269 bytes generated)
c2i argument handler starts at 0xa76a9d68
  0xa76a9cc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9cc3: mov    $0xa75b1ac0,%edi
  0xa76a9cc8: cmp    %edi,%eax
  0xa76a9cca: jbe    0xa76a9cdd
  0xa76a9cd0: mov    $0xa7691ac0,%edi
  0xa76a9cd5: cmp    %edi,%eax
  0xa76a9cd7: jb     0xa76a9d08
  0xa76a9cdd: mov    $0xa75af400,%edi
  0xa76a9ce2: cmp    %edi,%eax
  0xa76a9ce4: jbe    0xa76a9cf7
  0xa76a9cea: mov    $0xa75b1728,%edi
  0xa76a9cef: cmp    %edi,%eax
  0xa76a9cf1: jb     0xa76a9d08
  ;; i2c adapter must return to an interpreter frame
  0xa76a9cf7: push   $0xb75a2830
  0xa76a9cfc: call   0xa76a9d01
  0xa76a9d01: pusha  
  0xa76a9d02: call   0xb7052f32
  0xa76a9d07: hlt    
  ;; } verify_i2ce 
  0xa76a9d08: mov    %esp,%edi
  0xa76a9d0a: sub    $0x10,%esp
  0xa76a9d0d: and    $0xfffffff0,%esp
  0xa76a9d10: push   %eax
  0xa76a9d11: mov    %edi,%eax
  0xa76a9d13: mov    0x30(%ebx),%edi
  0xa76a9d16: mov    0x14(%eax),%ecx
  0xa76a9d19: mov    0x10(%eax),%edx
  0xa76a9d1c: mov    0x8(%eax),%esi
  0xa76a9d1f: mov    %esi,0x4(%esp)
  0xa76a9d23: mov    0xc(%eax),%esi
  0xa76a9d26: mov    %esi,0x8(%esp)
  0xa76a9d2a: mov    0x4(%eax),%esi
  0xa76a9d2d: mov    %esi,0xc(%esp)
  0xa76a9d31: mov    %esp,%eax
  0xa76a9d33: shr    $0xc,%eax
  0xa76a9d36: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a9d3d: mov    %ebx,0x16c(%eax)
  0xa76a9d43: mov    %ebx,%eax
  0xa76a9d45: jmp    *%edi
  0xa76a9d47: mov    0x4(%ecx),%ebx
  0xa76a9d4a: cmp    0x8(%eax),%ebx
  0xa76a9d4d: mov    0x4(%eax),%ebx
  0xa76a9d50: jne    0xa76a9d63
  0xa76a9d56: cmpl   $0x0,0x34(%ebx)
  0xa76a9d5d: je     0xa76a9da2
  0xa76a9d63: jmp    0xa7692560
  0xa76a9d68: cmpl   $0x0,0x34(%ebx)
  0xa76a9d6f: je     0xa76a9da2
  0xa76a9d75: mov    (%esp),%eax
  0xa76a9d78: pusha  
  0xa76a9d79: pushf  
  0xa76a9d7a: sub    $0x10,%esp
  0xa76a9d7d: vmovsd %xmm0,(%esp)
  0xa76a9d82: vmovsd %xmm1,0x8(%esp)
  0xa76a9d88: push   %eax
  0xa76a9d89: push   %ebx
  0xa76a9d8a: call   0xb71d62fc
  0xa76a9d8f: add    $0x8,%esp
  0xa76a9d92: vmovsd (%esp),%xmm0
  0xa76a9d97: vmovsd 0x8(%esp),%xmm1
  0xa76a9d9d: add    $0x10,%esp
  0xa76a9da0: popf   
  0xa76a9da1: popa   
  0xa76a9da2: pop    %eax
  0xa76a9da3: mov    %esp,%esi
  0xa76a9da5: sub    $0x14,%esp
  0xa76a9da8: mov    %ecx,0x10(%esp)
  0xa76a9dac: mov    %edx,0xc(%esp)
  0xa76a9db0: mov    0x14(%esp),%edi
  0xa76a9db4: mov    %edi,0x4(%esp)
  0xa76a9db8: mov    0x18(%esp),%edi
  0xa76a9dbc: mov    %edi,0x8(%esp)
  0xa76a9dc0: mov    0x1c(%esp),%edi
  0xa76a9dc4: mov    %edi,(%esp)
  0xa76a9dc7: mov    0x28(%ebx),%ecx
  0xa76a9dca: push   %eax
  0xa76a9dcb: jmp    *%ecx

AHE@0xb6681ff0: 0xabea0000 i2c: 0xa76a9e80 c2i: 0xa76a9f21 c2iUV: 0xa76a9f00
i2c argument handler #0 for: receiver (JS)V (254 bytes generated)
c2i argument handler starts at 0xa76a9f21
  0xa76a9e80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76a9e83: mov    $0xa75b1ac0,%edi
  0xa76a9e88: cmp    %edi,%eax
  0xa76a9e8a: jbe    0xa76a9e9d
  0xa76a9e90: mov    $0xa7691ac0,%edi
  0xa76a9e95: cmp    %edi,%eax
  0xa76a9e97: jb     0xa76a9ec8
  0xa76a9e9d: mov    $0xa75af400,%edi
  0xa76a9ea2: cmp    %edi,%eax
  0xa76a9ea4: jbe    0xa76a9eb7
  0xa76a9eaa: mov    $0xa75b1728,%edi
  0xa76a9eaf: cmp    %edi,%eax
  0xa76a9eb1: jb     0xa76a9ec8
  ;; i2c adapter must return to an interpreter frame
  0xa76a9eb7: push   $0xb75a2830
  0xa76a9ebc: call   0xa76a9ec1
  0xa76a9ec1: pusha  
  0xa76a9ec2: call   0xb7052f32
  0xa76a9ec7: hlt    
  ;; } verify_i2ce 
  0xa76a9ec8: mov    %esp,%edi
  0xa76a9eca: sub    $0x8,%esp
  0xa76a9ecd: and    $0xfffffff0,%esp
  0xa76a9ed0: push   %eax
  0xa76a9ed1: mov    %edi,%eax
  0xa76a9ed3: mov    0x30(%ebx),%edi
  0xa76a9ed6: mov    0x10(%eax),%ecx
  0xa76a9ed9: mov    0x8(%eax),%esi
  0xa76a9edc: mov    %esi,0x4(%esp)
  0xa76a9ee0: mov    0xc(%eax),%esi
  0xa76a9ee3: mov    %esi,0x8(%esp)
  0xa76a9ee7: mov    0x4(%eax),%edx
  0xa76a9eea: mov    %esp,%eax
  0xa76a9eec: shr    $0xc,%eax
  0xa76a9eef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76a9ef6: mov    %ebx,0x16c(%eax)
  0xa76a9efc: mov    %ebx,%eax
  0xa76a9efe: jmp    *%edi
  0xa76a9f00: mov    0x4(%ecx),%ebx
  0xa76a9f03: cmp    0x8(%eax),%ebx
  0xa76a9f06: mov    0x4(%eax),%ebx
  0xa76a9f09: jne    0xa76a9f1c
  0xa76a9f0f: cmpl   $0x0,0x34(%ebx)
  0xa76a9f16: je     0xa76a9f5b
  0xa76a9f1c: jmp    0xa7692560
  0xa76a9f21: cmpl   $0x0,0x34(%ebx)
  0xa76a9f28: je     0xa76a9f5b
  0xa76a9f2e: mov    (%esp),%eax
  0xa76a9f31: pusha  
  0xa76a9f32: pushf  
  0xa76a9f33: sub    $0x10,%esp
  0xa76a9f36: vmovsd %xmm0,(%esp)
  0xa76a9f3b: vmovsd %xmm1,0x8(%esp)
  0xa76a9f41: push   %eax
  0xa76a9f42: push   %ebx
  0xa76a9f43: call   0xb71d62fc
  0xa76a9f48: add    $0x8,%esp
  0xa76a9f4b: vmovsd (%esp),%xmm0
  0xa76a9f50: vmovsd 0x8(%esp),%xmm1
  0xa76a9f56: add    $0x10,%esp
  0xa76a9f59: popf   
  0xa76a9f5a: popa   
  0xa76a9f5b: pop    %eax
  0xa76a9f5c: mov    %esp,%esi
  0xa76a9f5e: sub    $0x10,%esp
  0xa76a9f61: mov    %ecx,0xc(%esp)
  0xa76a9f65: mov    0x10(%esp),%edi
  0xa76a9f69: mov    %edi,0x4(%esp)
  0xa76a9f6d: mov    0x14(%esp),%edi
  0xa76a9f71: mov    %edi,0x8(%esp)
  0xa76a9f75: mov    %edx,(%esp)
  0xa76a9f78: mov    0x28(%ebx),%ecx
  0xa76a9f7b: push   %eax
  0xa76a9f7c: jmp    *%ecx

AHE@0xb6682014: 0xaaaa0000 i2c: 0xa76aa000 c2i: 0xa76aa0a1 c2iUV: 0xa76aa080
i2c argument handler #0 for: receiver (Ljava/lang/Object;IS)V (254 bytes generated)
c2i argument handler starts at 0xa76aa0a1
  0xa76aa000: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aa003: mov    $0xa75b1ac0,%edi
  0xa76aa008: cmp    %edi,%eax
  0xa76aa00a: jbe    0xa76aa01d
  0xa76aa010: mov    $0xa7691ac0,%edi
  0xa76aa015: cmp    %edi,%eax
  0xa76aa017: jb     0xa76aa048
  0xa76aa01d: mov    $0xa75af400,%edi
  0xa76aa022: cmp    %edi,%eax
  0xa76aa024: jbe    0xa76aa037
  0xa76aa02a: mov    $0xa75b1728,%edi
  0xa76aa02f: cmp    %edi,%eax
  0xa76aa031: jb     0xa76aa048
  ;; i2c adapter must return to an interpreter frame
  0xa76aa037: push   $0xb75a2830
  0xa76aa03c: call   0xa76aa041
  0xa76aa041: pusha  
  0xa76aa042: call   0xb7052f32
  0xa76aa047: hlt    
  ;; } verify_i2ce 
  0xa76aa048: mov    %esp,%edi
  0xa76aa04a: sub    $0x8,%esp
  0xa76aa04d: and    $0xfffffff0,%esp
  0xa76aa050: push   %eax
  0xa76aa051: mov    %edi,%eax
  0xa76aa053: mov    0x30(%ebx),%edi
  0xa76aa056: mov    0x10(%eax),%ecx
  0xa76aa059: mov    0xc(%eax),%edx
  0xa76aa05c: mov    0x8(%eax),%esi
  0xa76aa05f: mov    %esi,0x4(%esp)
  0xa76aa063: mov    0x4(%eax),%esi
  0xa76aa066: mov    %esi,0x8(%esp)
  0xa76aa06a: mov    %esp,%eax
  0xa76aa06c: shr    $0xc,%eax
  0xa76aa06f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aa076: mov    %ebx,0x16c(%eax)
  0xa76aa07c: mov    %ebx,%eax
  0xa76aa07e: jmp    *%edi
  0xa76aa080: mov    0x4(%ecx),%ebx
  0xa76aa083: cmp    0x8(%eax),%ebx
  0xa76aa086: mov    0x4(%eax),%ebx
  0xa76aa089: jne    0xa76aa09c
  0xa76aa08f: cmpl   $0x0,0x34(%ebx)
  0xa76aa096: je     0xa76aa0db
  0xa76aa09c: jmp    0xa7692560
  0xa76aa0a1: cmpl   $0x0,0x34(%ebx)
  0xa76aa0a8: je     0xa76aa0db
  0xa76aa0ae: mov    (%esp),%eax
  0xa76aa0b1: pusha  
  0xa76aa0b2: pushf  
  0xa76aa0b3: sub    $0x10,%esp
  0xa76aa0b6: vmovsd %xmm0,(%esp)
  0xa76aa0bb: vmovsd %xmm1,0x8(%esp)
  0xa76aa0c1: push   %eax
  0xa76aa0c2: push   %ebx
  0xa76aa0c3: call   0xb71d62fc
  0xa76aa0c8: add    $0x8,%esp
  0xa76aa0cb: vmovsd (%esp),%xmm0
  0xa76aa0d0: vmovsd 0x8(%esp),%xmm1
  0xa76aa0d6: add    $0x10,%esp
  0xa76aa0d9: popf   
  0xa76aa0da: popa   
  0xa76aa0db: pop    %eax
  0xa76aa0dc: mov    %esp,%esi
  0xa76aa0de: sub    $0x10,%esp
  0xa76aa0e1: mov    %ecx,0xc(%esp)
  0xa76aa0e5: mov    %edx,0x8(%esp)
  0xa76aa0e9: mov    0x10(%esp),%edi
  0xa76aa0ed: mov    %edi,0x4(%esp)
  0xa76aa0f1: mov    0x14(%esp),%edi
  0xa76aa0f5: mov    %edi,(%esp)
  0xa76aa0f8: mov    0x28(%ebx),%ecx
  0xa76aa0fb: push   %eax
  0xa76aa0fc: jmp    *%ecx

AHE@0xb6682038: 0xaabe0000 i2c: 0xa76aa180 c2i: 0xa76aa221 c2iUV: 0xa76aa200
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)S (254 bytes generated)
c2i argument handler starts at 0xa76aa221
  0xa76aa180: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aa183: mov    $0xa75b1ac0,%edi
  0xa76aa188: cmp    %edi,%eax
  0xa76aa18a: jbe    0xa76aa19d
  0xa76aa190: mov    $0xa7691ac0,%edi
  0xa76aa195: cmp    %edi,%eax
  0xa76aa197: jb     0xa76aa1c8
  0xa76aa19d: mov    $0xa75af400,%edi
  0xa76aa1a2: cmp    %edi,%eax
  0xa76aa1a4: jbe    0xa76aa1b7
  0xa76aa1aa: mov    $0xa75b1728,%edi
  0xa76aa1af: cmp    %edi,%eax
  0xa76aa1b1: jb     0xa76aa1c8
  ;; i2c adapter must return to an interpreter frame
  0xa76aa1b7: push   $0xb75a2830
  0xa76aa1bc: call   0xa76aa1c1
  0xa76aa1c1: pusha  
  0xa76aa1c2: call   0xb7052f32
  0xa76aa1c7: hlt    
  ;; } verify_i2ce 
  0xa76aa1c8: mov    %esp,%edi
  0xa76aa1ca: sub    $0x8,%esp
  0xa76aa1cd: and    $0xfffffff0,%esp
  0xa76aa1d0: push   %eax
  0xa76aa1d1: mov    %edi,%eax
  0xa76aa1d3: mov    0x30(%ebx),%edi
  0xa76aa1d6: mov    0x10(%eax),%ecx
  0xa76aa1d9: mov    0xc(%eax),%edx
  0xa76aa1dc: mov    0x4(%eax),%esi
  0xa76aa1df: mov    %esi,0x4(%esp)
  0xa76aa1e3: mov    0x8(%eax),%esi
  0xa76aa1e6: mov    %esi,0x8(%esp)
  0xa76aa1ea: mov    %esp,%eax
  0xa76aa1ec: shr    $0xc,%eax
  0xa76aa1ef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aa1f6: mov    %ebx,0x16c(%eax)
  0xa76aa1fc: mov    %ebx,%eax
  0xa76aa1fe: jmp    *%edi
  0xa76aa200: mov    0x4(%ecx),%ebx
  0xa76aa203: cmp    0x8(%eax),%ebx
  0xa76aa206: mov    0x4(%eax),%ebx
  0xa76aa209: jne    0xa76aa21c
  0xa76aa20f: cmpl   $0x0,0x34(%ebx)
  0xa76aa216: je     0xa76aa25b
  0xa76aa21c: jmp    0xa7692560
  0xa76aa221: cmpl   $0x0,0x34(%ebx)
  0xa76aa228: je     0xa76aa25b
  0xa76aa22e: mov    (%esp),%eax
  0xa76aa231: pusha  
  0xa76aa232: pushf  
  0xa76aa233: sub    $0x10,%esp
  0xa76aa236: vmovsd %xmm0,(%esp)
  0xa76aa23b: vmovsd %xmm1,0x8(%esp)
  0xa76aa241: push   %eax
  0xa76aa242: push   %ebx
  0xa76aa243: call   0xb71d62fc
  0xa76aa248: add    $0x8,%esp
  0xa76aa24b: vmovsd (%esp),%xmm0
  0xa76aa250: vmovsd 0x8(%esp),%xmm1
  0xa76aa256: add    $0x10,%esp
  0xa76aa259: popf   
  0xa76aa25a: popa   
  0xa76aa25b: pop    %eax
  0xa76aa25c: mov    %esp,%esi
  0xa76aa25e: sub    $0x10,%esp
  0xa76aa261: mov    %ecx,0xc(%esp)
  0xa76aa265: mov    %edx,0x8(%esp)
  0xa76aa269: mov    0x10(%esp),%edi
  0xa76aa26d: mov    %edi,(%esp)
  0xa76aa270: mov    0x14(%esp),%edi
  0xa76aa274: mov    %edi,0x4(%esp)
  0xa76aa278: mov    0x28(%ebx),%ecx
  0xa76aa27b: push   %eax
  0xa76aa27c: jmp    *%ecx

AHE@0xb668205c: 0xabe00000 i2c: 0xa76aa300 c2i: 0xa76aa39e c2iUV: 0xa76aa37d
i2c argument handler #0 for: receiver (J)S (247 bytes generated)
c2i argument handler starts at 0xa76aa39e
  0xa76aa300: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aa303: mov    $0xa75b1ac0,%edi
  0xa76aa308: cmp    %edi,%eax
  0xa76aa30a: jbe    0xa76aa31d
  0xa76aa310: mov    $0xa7691ac0,%edi
  0xa76aa315: cmp    %edi,%eax
  0xa76aa317: jb     0xa76aa348
  0xa76aa31d: mov    $0xa75af400,%edi
  0xa76aa322: cmp    %edi,%eax
  0xa76aa324: jbe    0xa76aa337
  0xa76aa32a: mov    $0xa75b1728,%edi
  0xa76aa32f: cmp    %edi,%eax
  0xa76aa331: jb     0xa76aa348
  ;; i2c adapter must return to an interpreter frame
  0xa76aa337: push   $0xb75a2830
  0xa76aa33c: call   0xa76aa341
  0xa76aa341: pusha  
  0xa76aa342: call   0xb7052f32
  0xa76aa347: hlt    
  ;; } verify_i2ce 
  0xa76aa348: mov    %esp,%edi
  0xa76aa34a: sub    $0x8,%esp
  0xa76aa34d: and    $0xfffffff0,%esp
  0xa76aa350: push   %eax
  0xa76aa351: mov    %edi,%eax
  0xa76aa353: mov    0x30(%ebx),%edi
  0xa76aa356: mov    0xc(%eax),%ecx
  0xa76aa359: mov    0x4(%eax),%esi
  0xa76aa35c: mov    %esi,0x4(%esp)
  0xa76aa360: mov    0x8(%eax),%esi
  0xa76aa363: mov    %esi,0x8(%esp)
  0xa76aa367: mov    %esp,%eax
  0xa76aa369: shr    $0xc,%eax
  0xa76aa36c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aa373: mov    %ebx,0x16c(%eax)
  0xa76aa379: mov    %ebx,%eax
  0xa76aa37b: jmp    *%edi
  0xa76aa37d: mov    0x4(%ecx),%ebx
  0xa76aa380: cmp    0x8(%eax),%ebx
  0xa76aa383: mov    0x4(%eax),%ebx
  0xa76aa386: jne    0xa76aa399
  0xa76aa38c: cmpl   $0x0,0x34(%ebx)
  0xa76aa393: je     0xa76aa3d8
  0xa76aa399: jmp    0xa7692560
  0xa76aa39e: cmpl   $0x0,0x34(%ebx)
  0xa76aa3a5: je     0xa76aa3d8
  0xa76aa3ab: mov    (%esp),%eax
  0xa76aa3ae: pusha  
  0xa76aa3af: pushf  
  0xa76aa3b0: sub    $0x10,%esp
  0xa76aa3b3: vmovsd %xmm0,(%esp)
  0xa76aa3b8: vmovsd %xmm1,0x8(%esp)
  0xa76aa3be: push   %eax
  0xa76aa3bf: push   %ebx
  0xa76aa3c0: call   0xb71d62fc
  0xa76aa3c5: add    $0x8,%esp
  0xa76aa3c8: vmovsd (%esp),%xmm0
  0xa76aa3cd: vmovsd 0x8(%esp),%xmm1
  0xa76aa3d3: add    $0x10,%esp
  0xa76aa3d6: popf   
  0xa76aa3d7: popa   
  0xa76aa3d8: pop    %eax
  0xa76aa3d9: mov    %esp,%esi
  0xa76aa3db: sub    $0xc,%esp
  0xa76aa3de: mov    %ecx,0x8(%esp)
  0xa76aa3e2: mov    0xc(%esp),%edi
  0xa76aa3e6: mov    %edi,(%esp)
  0xa76aa3e9: mov    0x10(%esp),%edi
  0xa76aa3ed: mov    %edi,0x4(%esp)
  0xa76aa3f1: mov    0x28(%ebx),%ecx
  0xa76aa3f4: push   %eax
  0xa76aa3f5: jmp    *%ecx

AHE@0xb6682080: 0xaaa00000 i2c: 0xa76aa480 c2i: 0xa76aa51a c2iUV: 0xa76aa4f9
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)S (239 bytes generated)
c2i argument handler starts at 0xa76aa51a
  0xa76aa480: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aa483: mov    $0xa75b1ac0,%edi
  0xa76aa488: cmp    %edi,%eax
  0xa76aa48a: jbe    0xa76aa49d
  0xa76aa490: mov    $0xa7691ac0,%edi
  0xa76aa495: cmp    %edi,%eax
  0xa76aa497: jb     0xa76aa4c8
  0xa76aa49d: mov    $0xa75af400,%edi
  0xa76aa4a2: cmp    %edi,%eax
  0xa76aa4a4: jbe    0xa76aa4b7
  0xa76aa4aa: mov    $0xa75b1728,%edi
  0xa76aa4af: cmp    %edi,%eax
  0xa76aa4b1: jb     0xa76aa4c8
  ;; i2c adapter must return to an interpreter frame
  0xa76aa4b7: push   $0xb75a2830
  0xa76aa4bc: call   0xa76aa4c1
  0xa76aa4c1: pusha  
  0xa76aa4c2: call   0xb7052f32
  0xa76aa4c7: hlt    
  ;; } verify_i2ce 
  0xa76aa4c8: mov    %esp,%edi
  0xa76aa4ca: sub    $0x8,%esp
  0xa76aa4cd: and    $0xfffffff0,%esp
  0xa76aa4d0: push   %eax
  0xa76aa4d1: mov    %edi,%eax
  0xa76aa4d3: mov    0x30(%ebx),%edi
  0xa76aa4d6: mov    0xc(%eax),%ecx
  0xa76aa4d9: mov    0x8(%eax),%edx
  0xa76aa4dc: mov    0x4(%eax),%esi
  0xa76aa4df: mov    %esi,0x4(%esp)
  0xa76aa4e3: mov    %esp,%eax
  0xa76aa4e5: shr    $0xc,%eax
  0xa76aa4e8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aa4ef: mov    %ebx,0x16c(%eax)
  0xa76aa4f5: mov    %ebx,%eax
  0xa76aa4f7: jmp    *%edi
  0xa76aa4f9: mov    0x4(%ecx),%ebx
  0xa76aa4fc: cmp    0x8(%eax),%ebx
  0xa76aa4ff: mov    0x4(%eax),%ebx
  0xa76aa502: jne    0xa76aa515
  0xa76aa508: cmpl   $0x0,0x34(%ebx)
  0xa76aa50f: je     0xa76aa554
  0xa76aa515: jmp    0xa7692560
  0xa76aa51a: cmpl   $0x0,0x34(%ebx)
  0xa76aa521: je     0xa76aa554
  0xa76aa527: mov    (%esp),%eax
  0xa76aa52a: pusha  
  0xa76aa52b: pushf  
  0xa76aa52c: sub    $0x10,%esp
  0xa76aa52f: vmovsd %xmm0,(%esp)
  0xa76aa534: vmovsd %xmm1,0x8(%esp)
  0xa76aa53a: push   %eax
  0xa76aa53b: push   %ebx
  0xa76aa53c: call   0xb71d62fc
  0xa76aa541: add    $0x8,%esp
  0xa76aa544: vmovsd (%esp),%xmm0
  0xa76aa549: vmovsd 0x8(%esp),%xmm1
  0xa76aa54f: add    $0x10,%esp
  0xa76aa552: popf   
  0xa76aa553: popa   
  0xa76aa554: pop    %eax
  0xa76aa555: mov    %esp,%esi
  0xa76aa557: sub    $0xc,%esp
  0xa76aa55a: mov    %ecx,0x8(%esp)
  0xa76aa55e: mov    %edx,0x4(%esp)
  0xa76aa562: mov    0xc(%esp),%edi
  0xa76aa566: mov    %edi,(%esp)
  0xa76aa569: mov    0x28(%ebx),%ecx
  0xa76aa56c: push   %eax
  0xa76aa56d: jmp    *%ecx

AHE@0xb66820a4: 0xaabea000 i2c: 0xa76aa600 c2i: 0xa76aa6a8 c2iUV: 0xa76aa687
i2c argument handler #0 for: receiver (Ljava/lang/Object;JB)V (269 bytes generated)
c2i argument handler starts at 0xa76aa6a8
  0xa76aa600: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aa603: mov    $0xa75b1ac0,%edi
  0xa76aa608: cmp    %edi,%eax
  0xa76aa60a: jbe    0xa76aa61d
  0xa76aa610: mov    $0xa7691ac0,%edi
  0xa76aa615: cmp    %edi,%eax
  0xa76aa617: jb     0xa76aa648
  0xa76aa61d: mov    $0xa75af400,%edi
  0xa76aa622: cmp    %edi,%eax
  0xa76aa624: jbe    0xa76aa637
  0xa76aa62a: mov    $0xa75b1728,%edi
  0xa76aa62f: cmp    %edi,%eax
  0xa76aa631: jb     0xa76aa648
  ;; i2c adapter must return to an interpreter frame
  0xa76aa637: push   $0xb75a2830
  0xa76aa63c: call   0xa76aa641
  0xa76aa641: pusha  
  0xa76aa642: call   0xb7052f32
  0xa76aa647: hlt    
  ;; } verify_i2ce 
  0xa76aa648: mov    %esp,%edi
  0xa76aa64a: sub    $0x10,%esp
  0xa76aa64d: and    $0xfffffff0,%esp
  0xa76aa650: push   %eax
  0xa76aa651: mov    %edi,%eax
  0xa76aa653: mov    0x30(%ebx),%edi
  0xa76aa656: mov    0x14(%eax),%ecx
  0xa76aa659: mov    0x10(%eax),%edx
  0xa76aa65c: mov    0x8(%eax),%esi
  0xa76aa65f: mov    %esi,0x4(%esp)
  0xa76aa663: mov    0xc(%eax),%esi
  0xa76aa666: mov    %esi,0x8(%esp)
  0xa76aa66a: mov    0x4(%eax),%esi
  0xa76aa66d: mov    %esi,0xc(%esp)
  0xa76aa671: mov    %esp,%eax
  0xa76aa673: shr    $0xc,%eax
  0xa76aa676: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aa67d: mov    %ebx,0x16c(%eax)
  0xa76aa683: mov    %ebx,%eax
  0xa76aa685: jmp    *%edi
  0xa76aa687: mov    0x4(%ecx),%ebx
  0xa76aa68a: cmp    0x8(%eax),%ebx
  0xa76aa68d: mov    0x4(%eax),%ebx
  0xa76aa690: jne    0xa76aa6a3
  0xa76aa696: cmpl   $0x0,0x34(%ebx)
  0xa76aa69d: je     0xa76aa6e2
  0xa76aa6a3: jmp    0xa7692560
  0xa76aa6a8: cmpl   $0x0,0x34(%ebx)
  0xa76aa6af: je     0xa76aa6e2
  0xa76aa6b5: mov    (%esp),%eax
  0xa76aa6b8: pusha  
  0xa76aa6b9: pushf  
  0xa76aa6ba: sub    $0x10,%esp
  0xa76aa6bd: vmovsd %xmm0,(%esp)
  0xa76aa6c2: vmovsd %xmm1,0x8(%esp)
  0xa76aa6c8: push   %eax
  0xa76aa6c9: push   %ebx
  0xa76aa6ca: call   0xb71d62fc
  0xa76aa6cf: add    $0x8,%esp
  0xa76aa6d2: vmovsd (%esp),%xmm0
  0xa76aa6d7: vmovsd 0x8(%esp),%xmm1
  0xa76aa6dd: add    $0x10,%esp
  0xa76aa6e0: popf   
  0xa76aa6e1: popa   
  0xa76aa6e2: pop    %eax
  0xa76aa6e3: mov    %esp,%esi
  0xa76aa6e5: sub    $0x14,%esp
  0xa76aa6e8: mov    %ecx,0x10(%esp)
  0xa76aa6ec: mov    %edx,0xc(%esp)
  0xa76aa6f0: mov    0x14(%esp),%edi
  0xa76aa6f4: mov    %edi,0x4(%esp)
  0xa76aa6f8: mov    0x18(%esp),%edi
  0xa76aa6fc: mov    %edi,0x8(%esp)
  0xa76aa700: mov    0x1c(%esp),%edi
  0xa76aa704: mov    %edi,(%esp)
  0xa76aa707: mov    0x28(%ebx),%ecx
  0xa76aa70a: push   %eax
  0xa76aa70b: jmp    *%ecx

AHE@0xb66820c8: 0xaaaa0000 i2c: 0xa76aa7c0 c2i: 0xa76aa861 c2iUV: 0xa76aa840
i2c argument handler #0 for: receiver (Ljava/lang/Object;IB)V (254 bytes generated)
c2i argument handler starts at 0xa76aa861
  0xa76aa7c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aa7c3: mov    $0xa75b1ac0,%edi
  0xa76aa7c8: cmp    %edi,%eax
  0xa76aa7ca: jbe    0xa76aa7dd
  0xa76aa7d0: mov    $0xa7691ac0,%edi
  0xa76aa7d5: cmp    %edi,%eax
  0xa76aa7d7: jb     0xa76aa808
  0xa76aa7dd: mov    $0xa75af400,%edi
  0xa76aa7e2: cmp    %edi,%eax
  0xa76aa7e4: jbe    0xa76aa7f7
  0xa76aa7ea: mov    $0xa75b1728,%edi
  0xa76aa7ef: cmp    %edi,%eax
  0xa76aa7f1: jb     0xa76aa808
  ;; i2c adapter must return to an interpreter frame
  0xa76aa7f7: push   $0xb75a2830
  0xa76aa7fc: call   0xa76aa801
  0xa76aa801: pusha  
  0xa76aa802: call   0xb7052f32
  0xa76aa807: hlt    
  ;; } verify_i2ce 
  0xa76aa808: mov    %esp,%edi
  0xa76aa80a: sub    $0x8,%esp
  0xa76aa80d: and    $0xfffffff0,%esp
  0xa76aa810: push   %eax
  0xa76aa811: mov    %edi,%eax
  0xa76aa813: mov    0x30(%ebx),%edi
  0xa76aa816: mov    0x10(%eax),%ecx
  0xa76aa819: mov    0xc(%eax),%edx
  0xa76aa81c: mov    0x8(%eax),%esi
  0xa76aa81f: mov    %esi,0x4(%esp)
  0xa76aa823: mov    0x4(%eax),%esi
  0xa76aa826: mov    %esi,0x8(%esp)
  0xa76aa82a: mov    %esp,%eax
  0xa76aa82c: shr    $0xc,%eax
  0xa76aa82f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aa836: mov    %ebx,0x16c(%eax)
  0xa76aa83c: mov    %ebx,%eax
  0xa76aa83e: jmp    *%edi
  0xa76aa840: mov    0x4(%ecx),%ebx
  0xa76aa843: cmp    0x8(%eax),%ebx
  0xa76aa846: mov    0x4(%eax),%ebx
  0xa76aa849: jne    0xa76aa85c
  0xa76aa84f: cmpl   $0x0,0x34(%ebx)
  0xa76aa856: je     0xa76aa89b
  0xa76aa85c: jmp    0xa7692560
  0xa76aa861: cmpl   $0x0,0x34(%ebx)
  0xa76aa868: je     0xa76aa89b
  0xa76aa86e: mov    (%esp),%eax
  0xa76aa871: pusha  
  0xa76aa872: pushf  
  0xa76aa873: sub    $0x10,%esp
  0xa76aa876: vmovsd %xmm0,(%esp)
  0xa76aa87b: vmovsd %xmm1,0x8(%esp)
  0xa76aa881: push   %eax
  0xa76aa882: push   %ebx
  0xa76aa883: call   0xb71d62fc
  0xa76aa888: add    $0x8,%esp
  0xa76aa88b: vmovsd (%esp),%xmm0
  0xa76aa890: vmovsd 0x8(%esp),%xmm1
  0xa76aa896: add    $0x10,%esp
  0xa76aa899: popf   
  0xa76aa89a: popa   
  0xa76aa89b: pop    %eax
  0xa76aa89c: mov    %esp,%esi
  0xa76aa89e: sub    $0x10,%esp
  0xa76aa8a1: mov    %ecx,0xc(%esp)
  0xa76aa8a5: mov    %edx,0x8(%esp)
  0xa76aa8a9: mov    0x10(%esp),%edi
  0xa76aa8ad: mov    %edi,0x4(%esp)
  0xa76aa8b1: mov    0x14(%esp),%edi
  0xa76aa8b5: mov    %edi,(%esp)
  0xa76aa8b8: mov    0x28(%ebx),%ecx
  0xa76aa8bb: push   %eax
  0xa76aa8bc: jmp    *%ecx

AHE@0xb66820ec: 0xabea0000 i2c: 0xa76aa940 c2i: 0xa76aa9e1 c2iUV: 0xa76aa9c0
i2c argument handler #0 for: receiver (JB)V (254 bytes generated)
c2i argument handler starts at 0xa76aa9e1
  0xa76aa940: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aa943: mov    $0xa75b1ac0,%edi
  0xa76aa948: cmp    %edi,%eax
  0xa76aa94a: jbe    0xa76aa95d
  0xa76aa950: mov    $0xa7691ac0,%edi
  0xa76aa955: cmp    %edi,%eax
  0xa76aa957: jb     0xa76aa988
  0xa76aa95d: mov    $0xa75af400,%edi
  0xa76aa962: cmp    %edi,%eax
  0xa76aa964: jbe    0xa76aa977
  0xa76aa96a: mov    $0xa75b1728,%edi
  0xa76aa96f: cmp    %edi,%eax
  0xa76aa971: jb     0xa76aa988
  ;; i2c adapter must return to an interpreter frame
  0xa76aa977: push   $0xb75a2830
  0xa76aa97c: call   0xa76aa981
  0xa76aa981: pusha  
  0xa76aa982: call   0xb7052f32
  0xa76aa987: hlt    
  ;; } verify_i2ce 
  0xa76aa988: mov    %esp,%edi
  0xa76aa98a: sub    $0x8,%esp
  0xa76aa98d: and    $0xfffffff0,%esp
  0xa76aa990: push   %eax
  0xa76aa991: mov    %edi,%eax
  0xa76aa993: mov    0x30(%ebx),%edi
  0xa76aa996: mov    0x10(%eax),%ecx
  0xa76aa999: mov    0x8(%eax),%esi
  0xa76aa99c: mov    %esi,0x4(%esp)
  0xa76aa9a0: mov    0xc(%eax),%esi
  0xa76aa9a3: mov    %esi,0x8(%esp)
  0xa76aa9a7: mov    0x4(%eax),%edx
  0xa76aa9aa: mov    %esp,%eax
  0xa76aa9ac: shr    $0xc,%eax
  0xa76aa9af: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aa9b6: mov    %ebx,0x16c(%eax)
  0xa76aa9bc: mov    %ebx,%eax
  0xa76aa9be: jmp    *%edi
  0xa76aa9c0: mov    0x4(%ecx),%ebx
  0xa76aa9c3: cmp    0x8(%eax),%ebx
  0xa76aa9c6: mov    0x4(%eax),%ebx
  0xa76aa9c9: jne    0xa76aa9dc
  0xa76aa9cf: cmpl   $0x0,0x34(%ebx)
  0xa76aa9d6: je     0xa76aaa1b
  0xa76aa9dc: jmp    0xa7692560
  0xa76aa9e1: cmpl   $0x0,0x34(%ebx)
  0xa76aa9e8: je     0xa76aaa1b
  0xa76aa9ee: mov    (%esp),%eax
  0xa76aa9f1: pusha  
  0xa76aa9f2: pushf  
  0xa76aa9f3: sub    $0x10,%esp
  0xa76aa9f6: vmovsd %xmm0,(%esp)
  0xa76aa9fb: vmovsd %xmm1,0x8(%esp)
  0xa76aaa01: push   %eax
  0xa76aaa02: push   %ebx
  0xa76aaa03: call   0xb71d62fc
  0xa76aaa08: add    $0x8,%esp
  0xa76aaa0b: vmovsd (%esp),%xmm0
  0xa76aaa10: vmovsd 0x8(%esp),%xmm1
  0xa76aaa16: add    $0x10,%esp
  0xa76aaa19: popf   
  0xa76aaa1a: popa   
  0xa76aaa1b: pop    %eax
  0xa76aaa1c: mov    %esp,%esi
  0xa76aaa1e: sub    $0x10,%esp
  0xa76aaa21: mov    %ecx,0xc(%esp)
  0xa76aaa25: mov    0x10(%esp),%edi
  0xa76aaa29: mov    %edi,0x4(%esp)
  0xa76aaa2d: mov    0x14(%esp),%edi
  0xa76aaa31: mov    %edi,0x8(%esp)
  0xa76aaa35: mov    %edx,(%esp)
  0xa76aaa38: mov    0x28(%ebx),%ecx
  0xa76aaa3b: push   %eax
  0xa76aaa3c: jmp    *%ecx

AHE@0xb6682110: 0xaaa00000 i2c: 0xa76aaac0 c2i: 0xa76aab5a c2iUV: 0xa76aab39
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)B (239 bytes generated)
c2i argument handler starts at 0xa76aab5a
  0xa76aaac0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aaac3: mov    $0xa75b1ac0,%edi
  0xa76aaac8: cmp    %edi,%eax
  0xa76aaaca: jbe    0xa76aaadd
  0xa76aaad0: mov    $0xa7691ac0,%edi
  0xa76aaad5: cmp    %edi,%eax
  0xa76aaad7: jb     0xa76aab08
  0xa76aaadd: mov    $0xa75af400,%edi
  0xa76aaae2: cmp    %edi,%eax
  0xa76aaae4: jbe    0xa76aaaf7
  0xa76aaaea: mov    $0xa75b1728,%edi
  0xa76aaaef: cmp    %edi,%eax
  0xa76aaaf1: jb     0xa76aab08
  ;; i2c adapter must return to an interpreter frame
  0xa76aaaf7: push   $0xb75a2830
  0xa76aaafc: call   0xa76aab01
  0xa76aab01: pusha  
  0xa76aab02: call   0xb7052f32
  0xa76aab07: hlt    
  ;; } verify_i2ce 
  0xa76aab08: mov    %esp,%edi
  0xa76aab0a: sub    $0x8,%esp
  0xa76aab0d: and    $0xfffffff0,%esp
  0xa76aab10: push   %eax
  0xa76aab11: mov    %edi,%eax
  0xa76aab13: mov    0x30(%ebx),%edi
  0xa76aab16: mov    0xc(%eax),%ecx
  0xa76aab19: mov    0x8(%eax),%edx
  0xa76aab1c: mov    0x4(%eax),%esi
  0xa76aab1f: mov    %esi,0x4(%esp)
  0xa76aab23: mov    %esp,%eax
  0xa76aab25: shr    $0xc,%eax
  0xa76aab28: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aab2f: mov    %ebx,0x16c(%eax)
  0xa76aab35: mov    %ebx,%eax
  0xa76aab37: jmp    *%edi
  0xa76aab39: mov    0x4(%ecx),%ebx
  0xa76aab3c: cmp    0x8(%eax),%ebx
  0xa76aab3f: mov    0x4(%eax),%ebx
  0xa76aab42: jne    0xa76aab55
  0xa76aab48: cmpl   $0x0,0x34(%ebx)
  0xa76aab4f: je     0xa76aab94
  0xa76aab55: jmp    0xa7692560
  0xa76aab5a: cmpl   $0x0,0x34(%ebx)
  0xa76aab61: je     0xa76aab94
  0xa76aab67: mov    (%esp),%eax
  0xa76aab6a: pusha  
  0xa76aab6b: pushf  
  0xa76aab6c: sub    $0x10,%esp
  0xa76aab6f: vmovsd %xmm0,(%esp)
  0xa76aab74: vmovsd %xmm1,0x8(%esp)
  0xa76aab7a: push   %eax
  0xa76aab7b: push   %ebx
  0xa76aab7c: call   0xb71d62fc
  0xa76aab81: add    $0x8,%esp
  0xa76aab84: vmovsd (%esp),%xmm0
  0xa76aab89: vmovsd 0x8(%esp),%xmm1
  0xa76aab8f: add    $0x10,%esp
  0xa76aab92: popf   
  0xa76aab93: popa   
  0xa76aab94: pop    %eax
  0xa76aab95: mov    %esp,%esi
  0xa76aab97: sub    $0xc,%esp
  0xa76aab9a: mov    %ecx,0x8(%esp)
  0xa76aab9e: mov    %edx,0x4(%esp)
  0xa76aaba2: mov    0xc(%esp),%edi
  0xa76aaba6: mov    %edi,(%esp)
  0xa76aaba9: mov    0x28(%ebx),%ecx
  0xa76aabac: push   %eax
  0xa76aabad: jmp    *%ecx

AHE@0xb6682134: 0xaabe0000 i2c: 0xa76aac40 c2i: 0xa76aace1 c2iUV: 0xa76aacc0
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)B (254 bytes generated)
c2i argument handler starts at 0xa76aace1
  0xa76aac40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aac43: mov    $0xa75b1ac0,%edi
  0xa76aac48: cmp    %edi,%eax
  0xa76aac4a: jbe    0xa76aac5d
  0xa76aac50: mov    $0xa7691ac0,%edi
  0xa76aac55: cmp    %edi,%eax
  0xa76aac57: jb     0xa76aac88
  0xa76aac5d: mov    $0xa75af400,%edi
  0xa76aac62: cmp    %edi,%eax
  0xa76aac64: jbe    0xa76aac77
  0xa76aac6a: mov    $0xa75b1728,%edi
  0xa76aac6f: cmp    %edi,%eax
  0xa76aac71: jb     0xa76aac88
  ;; i2c adapter must return to an interpreter frame
  0xa76aac77: push   $0xb75a2830
  0xa76aac7c: call   0xa76aac81
  0xa76aac81: pusha  
  0xa76aac82: call   0xb7052f32
  0xa76aac87: hlt    
  ;; } verify_i2ce 
  0xa76aac88: mov    %esp,%edi
  0xa76aac8a: sub    $0x8,%esp
  0xa76aac8d: and    $0xfffffff0,%esp
  0xa76aac90: push   %eax
  0xa76aac91: mov    %edi,%eax
  0xa76aac93: mov    0x30(%ebx),%edi
  0xa76aac96: mov    0x10(%eax),%ecx
  0xa76aac99: mov    0xc(%eax),%edx
  0xa76aac9c: mov    0x4(%eax),%esi
  0xa76aac9f: mov    %esi,0x4(%esp)
  0xa76aaca3: mov    0x8(%eax),%esi
  0xa76aaca6: mov    %esi,0x8(%esp)
  0xa76aacaa: mov    %esp,%eax
  0xa76aacac: shr    $0xc,%eax
  0xa76aacaf: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aacb6: mov    %ebx,0x16c(%eax)
  0xa76aacbc: mov    %ebx,%eax
  0xa76aacbe: jmp    *%edi
  0xa76aacc0: mov    0x4(%ecx),%ebx
  0xa76aacc3: cmp    0x8(%eax),%ebx
  0xa76aacc6: mov    0x4(%eax),%ebx
  0xa76aacc9: jne    0xa76aacdc
  0xa76aaccf: cmpl   $0x0,0x34(%ebx)
  0xa76aacd6: je     0xa76aad1b
  0xa76aacdc: jmp    0xa7692560
  0xa76aace1: cmpl   $0x0,0x34(%ebx)
  0xa76aace8: je     0xa76aad1b
  0xa76aacee: mov    (%esp),%eax
  0xa76aacf1: pusha  
  0xa76aacf2: pushf  
  0xa76aacf3: sub    $0x10,%esp
  0xa76aacf6: vmovsd %xmm0,(%esp)
  0xa76aacfb: vmovsd %xmm1,0x8(%esp)
  0xa76aad01: push   %eax
  0xa76aad02: push   %ebx
  0xa76aad03: call   0xb71d62fc
  0xa76aad08: add    $0x8,%esp
  0xa76aad0b: vmovsd (%esp),%xmm0
  0xa76aad10: vmovsd 0x8(%esp),%xmm1
  0xa76aad16: add    $0x10,%esp
  0xa76aad19: popf   
  0xa76aad1a: popa   
  0xa76aad1b: pop    %eax
  0xa76aad1c: mov    %esp,%esi
  0xa76aad1e: sub    $0x10,%esp
  0xa76aad21: mov    %ecx,0xc(%esp)
  0xa76aad25: mov    %edx,0x8(%esp)
  0xa76aad29: mov    0x10(%esp),%edi
  0xa76aad2d: mov    %edi,(%esp)
  0xa76aad30: mov    0x14(%esp),%edi
  0xa76aad34: mov    %edi,0x4(%esp)
  0xa76aad38: mov    0x28(%ebx),%ecx
  0xa76aad3b: push   %eax
  0xa76aad3c: jmp    *%ecx

AHE@0xb6682158: 0xabe00000 i2c: 0xa76aadc0 c2i: 0xa76aae5e c2iUV: 0xa76aae3d
i2c argument handler #0 for: receiver (J)B (247 bytes generated)
c2i argument handler starts at 0xa76aae5e
  0xa76aadc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aadc3: mov    $0xa75b1ac0,%edi
  0xa76aadc8: cmp    %edi,%eax
  0xa76aadca: jbe    0xa76aaddd
  0xa76aadd0: mov    $0xa7691ac0,%edi
  0xa76aadd5: cmp    %edi,%eax
  0xa76aadd7: jb     0xa76aae08
  0xa76aaddd: mov    $0xa75af400,%edi
  0xa76aade2: cmp    %edi,%eax
  0xa76aade4: jbe    0xa76aadf7
  0xa76aadea: mov    $0xa75b1728,%edi
  0xa76aadef: cmp    %edi,%eax
  0xa76aadf1: jb     0xa76aae08
  ;; i2c adapter must return to an interpreter frame
  0xa76aadf7: push   $0xb75a2830
  0xa76aadfc: call   0xa76aae01
  0xa76aae01: pusha  
  0xa76aae02: call   0xb7052f32
  0xa76aae07: hlt    
  ;; } verify_i2ce 
  0xa76aae08: mov    %esp,%edi
  0xa76aae0a: sub    $0x8,%esp
  0xa76aae0d: and    $0xfffffff0,%esp
  0xa76aae10: push   %eax
  0xa76aae11: mov    %edi,%eax
  0xa76aae13: mov    0x30(%ebx),%edi
  0xa76aae16: mov    0xc(%eax),%ecx
  0xa76aae19: mov    0x4(%eax),%esi
  0xa76aae1c: mov    %esi,0x4(%esp)
  0xa76aae20: mov    0x8(%eax),%esi
  0xa76aae23: mov    %esi,0x8(%esp)
  0xa76aae27: mov    %esp,%eax
  0xa76aae29: shr    $0xc,%eax
  0xa76aae2c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aae33: mov    %ebx,0x16c(%eax)
  0xa76aae39: mov    %ebx,%eax
  0xa76aae3b: jmp    *%edi
  0xa76aae3d: mov    0x4(%ecx),%ebx
  0xa76aae40: cmp    0x8(%eax),%ebx
  0xa76aae43: mov    0x4(%eax),%ebx
  0xa76aae46: jne    0xa76aae59
  0xa76aae4c: cmpl   $0x0,0x34(%ebx)
  0xa76aae53: je     0xa76aae98
  0xa76aae59: jmp    0xa7692560
  0xa76aae5e: cmpl   $0x0,0x34(%ebx)
  0xa76aae65: je     0xa76aae98
  0xa76aae6b: mov    (%esp),%eax
  0xa76aae6e: pusha  
  0xa76aae6f: pushf  
  0xa76aae70: sub    $0x10,%esp
  0xa76aae73: vmovsd %xmm0,(%esp)
  0xa76aae78: vmovsd %xmm1,0x8(%esp)
  0xa76aae7e: push   %eax
  0xa76aae7f: push   %ebx
  0xa76aae80: call   0xb71d62fc
  0xa76aae85: add    $0x8,%esp
  0xa76aae88: vmovsd (%esp),%xmm0
  0xa76aae8d: vmovsd 0x8(%esp),%xmm1
  0xa76aae93: add    $0x10,%esp
  0xa76aae96: popf   
  0xa76aae97: popa   
  0xa76aae98: pop    %eax
  0xa76aae99: mov    %esp,%esi
  0xa76aae9b: sub    $0xc,%esp
  0xa76aae9e: mov    %ecx,0x8(%esp)
  0xa76aaea2: mov    0xc(%esp),%edi
  0xa76aaea6: mov    %edi,(%esp)
  0xa76aaea9: mov    0x10(%esp),%edi
  0xa76aaead: mov    %edi,0x4(%esp)
  0xa76aaeb1: mov    0x28(%ebx),%ecx
  0xa76aaeb4: push   %eax
  0xa76aaeb5: jmp    *%ecx

AHE@0xb668217c: 0xaabea000 i2c: 0xa76aaf40 c2i: 0xa76aafe8 c2iUV: 0xa76aafc7
i2c argument handler #0 for: receiver (Ljava/lang/Object;JZ)V (269 bytes generated)
c2i argument handler starts at 0xa76aafe8
  0xa76aaf40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aaf43: mov    $0xa75b1ac0,%edi
  0xa76aaf48: cmp    %edi,%eax
  0xa76aaf4a: jbe    0xa76aaf5d
  0xa76aaf50: mov    $0xa7691ac0,%edi
  0xa76aaf55: cmp    %edi,%eax
  0xa76aaf57: jb     0xa76aaf88
  0xa76aaf5d: mov    $0xa75af400,%edi
  0xa76aaf62: cmp    %edi,%eax
  0xa76aaf64: jbe    0xa76aaf77
  0xa76aaf6a: mov    $0xa75b1728,%edi
  0xa76aaf6f: cmp    %edi,%eax
  0xa76aaf71: jb     0xa76aaf88
  ;; i2c adapter must return to an interpreter frame
  0xa76aaf77: push   $0xb75a2830
  0xa76aaf7c: call   0xa76aaf81
  0xa76aaf81: pusha  
  0xa76aaf82: call   0xb7052f32
  0xa76aaf87: hlt    
  ;; } verify_i2ce 
  0xa76aaf88: mov    %esp,%edi
  0xa76aaf8a: sub    $0x10,%esp
  0xa76aaf8d: and    $0xfffffff0,%esp
  0xa76aaf90: push   %eax
  0xa76aaf91: mov    %edi,%eax
  0xa76aaf93: mov    0x30(%ebx),%edi
  0xa76aaf96: mov    0x14(%eax),%ecx
  0xa76aaf99: mov    0x10(%eax),%edx
  0xa76aaf9c: mov    0x8(%eax),%esi
  0xa76aaf9f: mov    %esi,0x4(%esp)
  0xa76aafa3: mov    0xc(%eax),%esi
  0xa76aafa6: mov    %esi,0x8(%esp)
  0xa76aafaa: mov    0x4(%eax),%esi
  0xa76aafad: mov    %esi,0xc(%esp)
  0xa76aafb1: mov    %esp,%eax
  0xa76aafb3: shr    $0xc,%eax
  0xa76aafb6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aafbd: mov    %ebx,0x16c(%eax)
  0xa76aafc3: mov    %ebx,%eax
  0xa76aafc5: jmp    *%edi
  0xa76aafc7: mov    0x4(%ecx),%ebx
  0xa76aafca: cmp    0x8(%eax),%ebx
  0xa76aafcd: mov    0x4(%eax),%ebx
  0xa76aafd0: jne    0xa76aafe3
  0xa76aafd6: cmpl   $0x0,0x34(%ebx)
  0xa76aafdd: je     0xa76ab022
  0xa76aafe3: jmp    0xa7692560
  0xa76aafe8: cmpl   $0x0,0x34(%ebx)
  0xa76aafef: je     0xa76ab022
  0xa76aaff5: mov    (%esp),%eax
  0xa76aaff8: pusha  
  0xa76aaff9: pushf  
  0xa76aaffa: sub    $0x10,%esp
  0xa76aaffd: vmovsd %xmm0,(%esp)
  0xa76ab002: vmovsd %xmm1,0x8(%esp)
  0xa76ab008: push   %eax
  0xa76ab009: push   %ebx
  0xa76ab00a: call   0xb71d62fc
  0xa76ab00f: add    $0x8,%esp
  0xa76ab012: vmovsd (%esp),%xmm0
  0xa76ab017: vmovsd 0x8(%esp),%xmm1
  0xa76ab01d: add    $0x10,%esp
  0xa76ab020: popf   
  0xa76ab021: popa   
  0xa76ab022: pop    %eax
  0xa76ab023: mov    %esp,%esi
  0xa76ab025: sub    $0x14,%esp
  0xa76ab028: mov    %ecx,0x10(%esp)
  0xa76ab02c: mov    %edx,0xc(%esp)
  0xa76ab030: mov    0x14(%esp),%edi
  0xa76ab034: mov    %edi,0x4(%esp)
  0xa76ab038: mov    0x18(%esp),%edi
  0xa76ab03c: mov    %edi,0x8(%esp)
  0xa76ab040: mov    0x1c(%esp),%edi
  0xa76ab044: mov    %edi,(%esp)
  0xa76ab047: mov    0x28(%ebx),%ecx
  0xa76ab04a: push   %eax
  0xa76ab04b: jmp    *%ecx

AHE@0xb66821a0: 0xaaaa0000 i2c: 0xa76ab100 c2i: 0xa76ab1a1 c2iUV: 0xa76ab180
i2c argument handler #0 for: receiver (Ljava/lang/Object;IZ)V (254 bytes generated)
c2i argument handler starts at 0xa76ab1a1
  0xa76ab100: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ab103: mov    $0xa75b1ac0,%edi
  0xa76ab108: cmp    %edi,%eax
  0xa76ab10a: jbe    0xa76ab11d
  0xa76ab110: mov    $0xa7691ac0,%edi
  0xa76ab115: cmp    %edi,%eax
  0xa76ab117: jb     0xa76ab148
  0xa76ab11d: mov    $0xa75af400,%edi
  0xa76ab122: cmp    %edi,%eax
  0xa76ab124: jbe    0xa76ab137
  0xa76ab12a: mov    $0xa75b1728,%edi
  0xa76ab12f: cmp    %edi,%eax
  0xa76ab131: jb     0xa76ab148
  ;; i2c adapter must return to an interpreter frame
  0xa76ab137: push   $0xb75a2830
  0xa76ab13c: call   0xa76ab141
  0xa76ab141: pusha  
  0xa76ab142: call   0xb7052f32
  0xa76ab147: hlt    
  ;; } verify_i2ce 
  0xa76ab148: mov    %esp,%edi
  0xa76ab14a: sub    $0x8,%esp
  0xa76ab14d: and    $0xfffffff0,%esp
  0xa76ab150: push   %eax
  0xa76ab151: mov    %edi,%eax
  0xa76ab153: mov    0x30(%ebx),%edi
  0xa76ab156: mov    0x10(%eax),%ecx
  0xa76ab159: mov    0xc(%eax),%edx
  0xa76ab15c: mov    0x8(%eax),%esi
  0xa76ab15f: mov    %esi,0x4(%esp)
  0xa76ab163: mov    0x4(%eax),%esi
  0xa76ab166: mov    %esi,0x8(%esp)
  0xa76ab16a: mov    %esp,%eax
  0xa76ab16c: shr    $0xc,%eax
  0xa76ab16f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ab176: mov    %ebx,0x16c(%eax)
  0xa76ab17c: mov    %ebx,%eax
  0xa76ab17e: jmp    *%edi
  0xa76ab180: mov    0x4(%ecx),%ebx
  0xa76ab183: cmp    0x8(%eax),%ebx
  0xa76ab186: mov    0x4(%eax),%ebx
  0xa76ab189: jne    0xa76ab19c
  0xa76ab18f: cmpl   $0x0,0x34(%ebx)
  0xa76ab196: je     0xa76ab1db
  0xa76ab19c: jmp    0xa7692560
  0xa76ab1a1: cmpl   $0x0,0x34(%ebx)
  0xa76ab1a8: je     0xa76ab1db
  0xa76ab1ae: mov    (%esp),%eax
  0xa76ab1b1: pusha  
  0xa76ab1b2: pushf  
  0xa76ab1b3: sub    $0x10,%esp
  0xa76ab1b6: vmovsd %xmm0,(%esp)
  0xa76ab1bb: vmovsd %xmm1,0x8(%esp)
  0xa76ab1c1: push   %eax
  0xa76ab1c2: push   %ebx
  0xa76ab1c3: call   0xb71d62fc
  0xa76ab1c8: add    $0x8,%esp
  0xa76ab1cb: vmovsd (%esp),%xmm0
  0xa76ab1d0: vmovsd 0x8(%esp),%xmm1
  0xa76ab1d6: add    $0x10,%esp
  0xa76ab1d9: popf   
  0xa76ab1da: popa   
  0xa76ab1db: pop    %eax
  0xa76ab1dc: mov    %esp,%esi
  0xa76ab1de: sub    $0x10,%esp
  0xa76ab1e1: mov    %ecx,0xc(%esp)
  0xa76ab1e5: mov    %edx,0x8(%esp)
  0xa76ab1e9: mov    0x10(%esp),%edi
  0xa76ab1ed: mov    %edi,0x4(%esp)
  0xa76ab1f1: mov    0x14(%esp),%edi
  0xa76ab1f5: mov    %edi,(%esp)
  0xa76ab1f8: mov    0x28(%ebx),%ecx
  0xa76ab1fb: push   %eax
  0xa76ab1fc: jmp    *%ecx

AHE@0xb66821c4: 0xaabe0000 i2c: 0xa76ab280 c2i: 0xa76ab321 c2iUV: 0xa76ab300
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Z (254 bytes generated)
c2i argument handler starts at 0xa76ab321
  0xa76ab280: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ab283: mov    $0xa75b1ac0,%edi
  0xa76ab288: cmp    %edi,%eax
  0xa76ab28a: jbe    0xa76ab29d
  0xa76ab290: mov    $0xa7691ac0,%edi
  0xa76ab295: cmp    %edi,%eax
  0xa76ab297: jb     0xa76ab2c8
  0xa76ab29d: mov    $0xa75af400,%edi
  0xa76ab2a2: cmp    %edi,%eax
  0xa76ab2a4: jbe    0xa76ab2b7
  0xa76ab2aa: mov    $0xa75b1728,%edi
  0xa76ab2af: cmp    %edi,%eax
  0xa76ab2b1: jb     0xa76ab2c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ab2b7: push   $0xb75a2830
  0xa76ab2bc: call   0xa76ab2c1
  0xa76ab2c1: pusha  
  0xa76ab2c2: call   0xb7052f32
  0xa76ab2c7: hlt    
  ;; } verify_i2ce 
  0xa76ab2c8: mov    %esp,%edi
  0xa76ab2ca: sub    $0x8,%esp
  0xa76ab2cd: and    $0xfffffff0,%esp
  0xa76ab2d0: push   %eax
  0xa76ab2d1: mov    %edi,%eax
  0xa76ab2d3: mov    0x30(%ebx),%edi
  0xa76ab2d6: mov    0x10(%eax),%ecx
  0xa76ab2d9: mov    0xc(%eax),%edx
  0xa76ab2dc: mov    0x4(%eax),%esi
  0xa76ab2df: mov    %esi,0x4(%esp)
  0xa76ab2e3: mov    0x8(%eax),%esi
  0xa76ab2e6: mov    %esi,0x8(%esp)
  0xa76ab2ea: mov    %esp,%eax
  0xa76ab2ec: shr    $0xc,%eax
  0xa76ab2ef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ab2f6: mov    %ebx,0x16c(%eax)
  0xa76ab2fc: mov    %ebx,%eax
  0xa76ab2fe: jmp    *%edi
  0xa76ab300: mov    0x4(%ecx),%ebx
  0xa76ab303: cmp    0x8(%eax),%ebx
  0xa76ab306: mov    0x4(%eax),%ebx
  0xa76ab309: jne    0xa76ab31c
  0xa76ab30f: cmpl   $0x0,0x34(%ebx)
  0xa76ab316: je     0xa76ab35b
  0xa76ab31c: jmp    0xa7692560
  0xa76ab321: cmpl   $0x0,0x34(%ebx)
  0xa76ab328: je     0xa76ab35b
  0xa76ab32e: mov    (%esp),%eax
  0xa76ab331: pusha  
  0xa76ab332: pushf  
  0xa76ab333: sub    $0x10,%esp
  0xa76ab336: vmovsd %xmm0,(%esp)
  0xa76ab33b: vmovsd %xmm1,0x8(%esp)
  0xa76ab341: push   %eax
  0xa76ab342: push   %ebx
  0xa76ab343: call   0xb71d62fc
  0xa76ab348: add    $0x8,%esp
  0xa76ab34b: vmovsd (%esp),%xmm0
  0xa76ab350: vmovsd 0x8(%esp),%xmm1
  0xa76ab356: add    $0x10,%esp
  0xa76ab359: popf   
  0xa76ab35a: popa   
  0xa76ab35b: pop    %eax
  0xa76ab35c: mov    %esp,%esi
  0xa76ab35e: sub    $0x10,%esp
  0xa76ab361: mov    %ecx,0xc(%esp)
  0xa76ab365: mov    %edx,0x8(%esp)
  0xa76ab369: mov    0x10(%esp),%edi
  0xa76ab36d: mov    %edi,(%esp)
  0xa76ab370: mov    0x14(%esp),%edi
  0xa76ab374: mov    %edi,0x4(%esp)
  0xa76ab378: mov    0x28(%ebx),%ecx
  0xa76ab37b: push   %eax
  0xa76ab37c: jmp    *%ecx

AHE@0xb66821e8: 0xaaa00000 i2c: 0xa76ab400 c2i: 0xa76ab49a c2iUV: 0xa76ab479
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)Z (239 bytes generated)
c2i argument handler starts at 0xa76ab49a
  0xa76ab400: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ab403: mov    $0xa75b1ac0,%edi
  0xa76ab408: cmp    %edi,%eax
  0xa76ab40a: jbe    0xa76ab41d
  0xa76ab410: mov    $0xa7691ac0,%edi
  0xa76ab415: cmp    %edi,%eax
  0xa76ab417: jb     0xa76ab448
  0xa76ab41d: mov    $0xa75af400,%edi
  0xa76ab422: cmp    %edi,%eax
  0xa76ab424: jbe    0xa76ab437
  0xa76ab42a: mov    $0xa75b1728,%edi
  0xa76ab42f: cmp    %edi,%eax
  0xa76ab431: jb     0xa76ab448
  ;; i2c adapter must return to an interpreter frame
  0xa76ab437: push   $0xb75a2830
  0xa76ab43c: call   0xa76ab441
  0xa76ab441: pusha  
  0xa76ab442: call   0xb7052f32
  0xa76ab447: hlt    
  ;; } verify_i2ce 
  0xa76ab448: mov    %esp,%edi
  0xa76ab44a: sub    $0x8,%esp
  0xa76ab44d: and    $0xfffffff0,%esp
  0xa76ab450: push   %eax
  0xa76ab451: mov    %edi,%eax
  0xa76ab453: mov    0x30(%ebx),%edi
  0xa76ab456: mov    0xc(%eax),%ecx
  0xa76ab459: mov    0x8(%eax),%edx
  0xa76ab45c: mov    0x4(%eax),%esi
  0xa76ab45f: mov    %esi,0x4(%esp)
  0xa76ab463: mov    %esp,%eax
  0xa76ab465: shr    $0xc,%eax
  0xa76ab468: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ab46f: mov    %ebx,0x16c(%eax)
  0xa76ab475: mov    %ebx,%eax
  0xa76ab477: jmp    *%edi
  0xa76ab479: mov    0x4(%ecx),%ebx
  0xa76ab47c: cmp    0x8(%eax),%ebx
  0xa76ab47f: mov    0x4(%eax),%ebx
  0xa76ab482: jne    0xa76ab495
  0xa76ab488: cmpl   $0x0,0x34(%ebx)
  0xa76ab48f: je     0xa76ab4d4
  0xa76ab495: jmp    0xa7692560
  0xa76ab49a: cmpl   $0x0,0x34(%ebx)
  0xa76ab4a1: je     0xa76ab4d4
  0xa76ab4a7: mov    (%esp),%eax
  0xa76ab4aa: pusha  
  0xa76ab4ab: pushf  
  0xa76ab4ac: sub    $0x10,%esp
  0xa76ab4af: vmovsd %xmm0,(%esp)
  0xa76ab4b4: vmovsd %xmm1,0x8(%esp)
  0xa76ab4ba: push   %eax
  0xa76ab4bb: push   %ebx
  0xa76ab4bc: call   0xb71d62fc
  0xa76ab4c1: add    $0x8,%esp
  0xa76ab4c4: vmovsd (%esp),%xmm0
  0xa76ab4c9: vmovsd 0x8(%esp),%xmm1
  0xa76ab4cf: add    $0x10,%esp
  0xa76ab4d2: popf   
  0xa76ab4d3: popa   
  0xa76ab4d4: pop    %eax
  0xa76ab4d5: mov    %esp,%esi
  0xa76ab4d7: sub    $0xc,%esp
  0xa76ab4da: mov    %ecx,0x8(%esp)
  0xa76ab4de: mov    %edx,0x4(%esp)
  0xa76ab4e2: mov    0xc(%esp),%edi
  0xa76ab4e6: mov    %edi,(%esp)
  0xa76ab4e9: mov    0x28(%ebx),%ecx
  0xa76ab4ec: push   %eax
  0xa76ab4ed: jmp    *%ecx

AHE@0xb668220c: 0xaaaa0000 i2c: 0xa76ab580 c2i: 0xa76ab621 c2iUV: 0xa76ab600
i2c argument handler #0 for: receiver (Ljava/lang/Object;ILjava/lang/Object;)V (254 bytes generated)
c2i argument handler starts at 0xa76ab621
  0xa76ab580: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ab583: mov    $0xa75b1ac0,%edi
  0xa76ab588: cmp    %edi,%eax
  0xa76ab58a: jbe    0xa76ab59d
  0xa76ab590: mov    $0xa7691ac0,%edi
  0xa76ab595: cmp    %edi,%eax
  0xa76ab597: jb     0xa76ab5c8
  0xa76ab59d: mov    $0xa75af400,%edi
  0xa76ab5a2: cmp    %edi,%eax
  0xa76ab5a4: jbe    0xa76ab5b7
  0xa76ab5aa: mov    $0xa75b1728,%edi
  0xa76ab5af: cmp    %edi,%eax
  0xa76ab5b1: jb     0xa76ab5c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ab5b7: push   $0xb75a2830
  0xa76ab5bc: call   0xa76ab5c1
  0xa76ab5c1: pusha  
  0xa76ab5c2: call   0xb7052f32
  0xa76ab5c7: hlt    
  ;; } verify_i2ce 
  0xa76ab5c8: mov    %esp,%edi
  0xa76ab5ca: sub    $0x8,%esp
  0xa76ab5cd: and    $0xfffffff0,%esp
  0xa76ab5d0: push   %eax
  0xa76ab5d1: mov    %edi,%eax
  0xa76ab5d3: mov    0x30(%ebx),%edi
  0xa76ab5d6: mov    0x10(%eax),%ecx
  0xa76ab5d9: mov    0xc(%eax),%edx
  0xa76ab5dc: mov    0x8(%eax),%esi
  0xa76ab5df: mov    %esi,0x4(%esp)
  0xa76ab5e3: mov    0x4(%eax),%esi
  0xa76ab5e6: mov    %esi,0x8(%esp)
  0xa76ab5ea: mov    %esp,%eax
  0xa76ab5ec: shr    $0xc,%eax
  0xa76ab5ef: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ab5f6: mov    %ebx,0x16c(%eax)
  0xa76ab5fc: mov    %ebx,%eax
  0xa76ab5fe: jmp    *%edi
  0xa76ab600: mov    0x4(%ecx),%ebx
  0xa76ab603: cmp    0x8(%eax),%ebx
  0xa76ab606: mov    0x4(%eax),%ebx
  0xa76ab609: jne    0xa76ab61c
  0xa76ab60f: cmpl   $0x0,0x34(%ebx)
  0xa76ab616: je     0xa76ab65b
  0xa76ab61c: jmp    0xa7692560
  0xa76ab621: cmpl   $0x0,0x34(%ebx)
  0xa76ab628: je     0xa76ab65b
  0xa76ab62e: mov    (%esp),%eax
  0xa76ab631: pusha  
  0xa76ab632: pushf  
  0xa76ab633: sub    $0x10,%esp
  0xa76ab636: vmovsd %xmm0,(%esp)
  0xa76ab63b: vmovsd %xmm1,0x8(%esp)
  0xa76ab641: push   %eax
  0xa76ab642: push   %ebx
  0xa76ab643: call   0xb71d62fc
  0xa76ab648: add    $0x8,%esp
  0xa76ab64b: vmovsd (%esp),%xmm0
  0xa76ab650: vmovsd 0x8(%esp),%xmm1
  0xa76ab656: add    $0x10,%esp
  0xa76ab659: popf   
  0xa76ab65a: popa   
  0xa76ab65b: pop    %eax
  0xa76ab65c: mov    %esp,%esi
  0xa76ab65e: sub    $0x10,%esp
  0xa76ab661: mov    %ecx,0xc(%esp)
  0xa76ab665: mov    %edx,0x8(%esp)
  0xa76ab669: mov    0x10(%esp),%edi
  0xa76ab66d: mov    %edi,0x4(%esp)
  0xa76ab671: mov    0x14(%esp),%edi
  0xa76ab675: mov    %edi,(%esp)
  0xa76ab678: mov    0x28(%ebx),%ecx
  0xa76ab67b: push   %eax
  0xa76ab67c: jmp    *%ecx

AHE@0xb6682230: 0xaabea000 i2c: 0xa76ab700 c2i: 0xa76ab7a8 c2iUV: 0xa76ab787
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;)V (269 bytes generated)
c2i argument handler starts at 0xa76ab7a8
  0xa76ab700: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ab703: mov    $0xa75b1ac0,%edi
  0xa76ab708: cmp    %edi,%eax
  0xa76ab70a: jbe    0xa76ab71d
  0xa76ab710: mov    $0xa7691ac0,%edi
  0xa76ab715: cmp    %edi,%eax
  0xa76ab717: jb     0xa76ab748
  0xa76ab71d: mov    $0xa75af400,%edi
  0xa76ab722: cmp    %edi,%eax
  0xa76ab724: jbe    0xa76ab737
  0xa76ab72a: mov    $0xa75b1728,%edi
  0xa76ab72f: cmp    %edi,%eax
  0xa76ab731: jb     0xa76ab748
  ;; i2c adapter must return to an interpreter frame
  0xa76ab737: push   $0xb75a2830
  0xa76ab73c: call   0xa76ab741
  0xa76ab741: pusha  
  0xa76ab742: call   0xb7052f32
  0xa76ab747: hlt    
  ;; } verify_i2ce 
  0xa76ab748: mov    %esp,%edi
  0xa76ab74a: sub    $0x10,%esp
  0xa76ab74d: and    $0xfffffff0,%esp
  0xa76ab750: push   %eax
  0xa76ab751: mov    %edi,%eax
  0xa76ab753: mov    0x30(%ebx),%edi
  0xa76ab756: mov    0x14(%eax),%ecx
  0xa76ab759: mov    0x10(%eax),%edx
  0xa76ab75c: mov    0x8(%eax),%esi
  0xa76ab75f: mov    %esi,0x4(%esp)
  0xa76ab763: mov    0xc(%eax),%esi
  0xa76ab766: mov    %esi,0x8(%esp)
  0xa76ab76a: mov    0x4(%eax),%esi
  0xa76ab76d: mov    %esi,0xc(%esp)
  0xa76ab771: mov    %esp,%eax
  0xa76ab773: shr    $0xc,%eax
  0xa76ab776: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ab77d: mov    %ebx,0x16c(%eax)
  0xa76ab783: mov    %ebx,%eax
  0xa76ab785: jmp    *%edi
  0xa76ab787: mov    0x4(%ecx),%ebx
  0xa76ab78a: cmp    0x8(%eax),%ebx
  0xa76ab78d: mov    0x4(%eax),%ebx
  0xa76ab790: jne    0xa76ab7a3
  0xa76ab796: cmpl   $0x0,0x34(%ebx)
  0xa76ab79d: je     0xa76ab7e2
  0xa76ab7a3: jmp    0xa7692560
  0xa76ab7a8: cmpl   $0x0,0x34(%ebx)
  0xa76ab7af: je     0xa76ab7e2
  0xa76ab7b5: mov    (%esp),%eax
  0xa76ab7b8: pusha  
  0xa76ab7b9: pushf  
  0xa76ab7ba: sub    $0x10,%esp
  0xa76ab7bd: vmovsd %xmm0,(%esp)
  0xa76ab7c2: vmovsd %xmm1,0x8(%esp)
  0xa76ab7c8: push   %eax
  0xa76ab7c9: push   %ebx
  0xa76ab7ca: call   0xb71d62fc
  0xa76ab7cf: add    $0x8,%esp
  0xa76ab7d2: vmovsd (%esp),%xmm0
  0xa76ab7d7: vmovsd 0x8(%esp),%xmm1
  0xa76ab7dd: add    $0x10,%esp
  0xa76ab7e0: popf   
  0xa76ab7e1: popa   
  0xa76ab7e2: pop    %eax
  0xa76ab7e3: mov    %esp,%esi
  0xa76ab7e5: sub    $0x14,%esp
  0xa76ab7e8: mov    %ecx,0x10(%esp)
  0xa76ab7ec: mov    %edx,0xc(%esp)
  0xa76ab7f0: mov    0x14(%esp),%edi
  0xa76ab7f4: mov    %edi,0x4(%esp)
  0xa76ab7f8: mov    0x18(%esp),%edi
  0xa76ab7fc: mov    %edi,0x8(%esp)
  0xa76ab800: mov    0x1c(%esp),%edi
  0xa76ab804: mov    %edi,(%esp)
  0xa76ab807: mov    0x28(%ebx),%ecx
  0xa76ab80a: push   %eax
  0xa76ab80b: jmp    *%ecx

AHE@0xb6682254: 0xaaa00000 i2c: 0xa76ab8c0 c2i: 0xa76ab95a c2iUV: 0xa76ab939
i2c argument handler #0 for: receiver (Ljava/lang/Object;I)Ljava/lang/Object; (239 bytes generated)
c2i argument handler starts at 0xa76ab95a
  0xa76ab8c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ab8c3: mov    $0xa75b1ac0,%edi
  0xa76ab8c8: cmp    %edi,%eax
  0xa76ab8ca: jbe    0xa76ab8dd
  0xa76ab8d0: mov    $0xa7691ac0,%edi
  0xa76ab8d5: cmp    %edi,%eax
  0xa76ab8d7: jb     0xa76ab908
  0xa76ab8dd: mov    $0xa75af400,%edi
  0xa76ab8e2: cmp    %edi,%eax
  0xa76ab8e4: jbe    0xa76ab8f7
  0xa76ab8ea: mov    $0xa75b1728,%edi
  0xa76ab8ef: cmp    %edi,%eax
  0xa76ab8f1: jb     0xa76ab908
  ;; i2c adapter must return to an interpreter frame
  0xa76ab8f7: push   $0xb75a2830
  0xa76ab8fc: call   0xa76ab901
  0xa76ab901: pusha  
  0xa76ab902: call   0xb7052f32
  0xa76ab907: hlt    
  ;; } verify_i2ce 
  0xa76ab908: mov    %esp,%edi
  0xa76ab90a: sub    $0x8,%esp
  0xa76ab90d: and    $0xfffffff0,%esp
  0xa76ab910: push   %eax
  0xa76ab911: mov    %edi,%eax
  0xa76ab913: mov    0x30(%ebx),%edi
  0xa76ab916: mov    0xc(%eax),%ecx
  0xa76ab919: mov    0x8(%eax),%edx
  0xa76ab91c: mov    0x4(%eax),%esi
  0xa76ab91f: mov    %esi,0x4(%esp)
  0xa76ab923: mov    %esp,%eax
  0xa76ab925: shr    $0xc,%eax
  0xa76ab928: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ab92f: mov    %ebx,0x16c(%eax)
  0xa76ab935: mov    %ebx,%eax
  0xa76ab937: jmp    *%edi
  0xa76ab939: mov    0x4(%ecx),%ebx
  0xa76ab93c: cmp    0x8(%eax),%ebx
  0xa76ab93f: mov    0x4(%eax),%ebx
  0xa76ab942: jne    0xa76ab955
  0xa76ab948: cmpl   $0x0,0x34(%ebx)
  0xa76ab94f: je     0xa76ab994
  0xa76ab955: jmp    0xa7692560
  0xa76ab95a: cmpl   $0x0,0x34(%ebx)
  0xa76ab961: je     0xa76ab994
  0xa76ab967: mov    (%esp),%eax
  0xa76ab96a: pusha  
  0xa76ab96b: pushf  
  0xa76ab96c: sub    $0x10,%esp
  0xa76ab96f: vmovsd %xmm0,(%esp)
  0xa76ab974: vmovsd %xmm1,0x8(%esp)
  0xa76ab97a: push   %eax
  0xa76ab97b: push   %ebx
  0xa76ab97c: call   0xb71d62fc
  0xa76ab981: add    $0x8,%esp
  0xa76ab984: vmovsd (%esp),%xmm0
  0xa76ab989: vmovsd 0x8(%esp),%xmm1
  0xa76ab98f: add    $0x10,%esp
  0xa76ab992: popf   
  0xa76ab993: popa   
  0xa76ab994: pop    %eax
  0xa76ab995: mov    %esp,%esi
  0xa76ab997: sub    $0xc,%esp
  0xa76ab99a: mov    %ecx,0x8(%esp)
  0xa76ab99e: mov    %edx,0x4(%esp)
  0xa76ab9a2: mov    0xc(%esp),%edi
  0xa76ab9a6: mov    %edi,(%esp)
  0xa76ab9a9: mov    0x28(%ebx),%ecx
  0xa76ab9ac: push   %eax
  0xa76ab9ad: jmp    *%ecx

AHE@0xb6682278: 0xaabe0000 i2c: 0xa76aba40 c2i: 0xa76abae1 c2iUV: 0xa76abac0
i2c argument handler #0 for: receiver (Ljava/lang/Object;J)Ljava/lang/Object; (254 bytes generated)
c2i argument handler starts at 0xa76abae1
  0xa76aba40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aba43: mov    $0xa75b1ac0,%edi
  0xa76aba48: cmp    %edi,%eax
  0xa76aba4a: jbe    0xa76aba5d
  0xa76aba50: mov    $0xa7691ac0,%edi
  0xa76aba55: cmp    %edi,%eax
  0xa76aba57: jb     0xa76aba88
  0xa76aba5d: mov    $0xa75af400,%edi
  0xa76aba62: cmp    %edi,%eax
  0xa76aba64: jbe    0xa76aba77
  0xa76aba6a: mov    $0xa75b1728,%edi
  0xa76aba6f: cmp    %edi,%eax
  0xa76aba71: jb     0xa76aba88
  ;; i2c adapter must return to an interpreter frame
  0xa76aba77: push   $0xb75a2830
  0xa76aba7c: call   0xa76aba81
  0xa76aba81: pusha  
  0xa76aba82: call   0xb7052f32
  0xa76aba87: hlt    
  ;; } verify_i2ce 
  0xa76aba88: mov    %esp,%edi
  0xa76aba8a: sub    $0x8,%esp
  0xa76aba8d: and    $0xfffffff0,%esp
  0xa76aba90: push   %eax
  0xa76aba91: mov    %edi,%eax
  0xa76aba93: mov    0x30(%ebx),%edi
  0xa76aba96: mov    0x10(%eax),%ecx
  0xa76aba99: mov    0xc(%eax),%edx
  0xa76aba9c: mov    0x4(%eax),%esi
  0xa76aba9f: mov    %esi,0x4(%esp)
  0xa76abaa3: mov    0x8(%eax),%esi
  0xa76abaa6: mov    %esi,0x8(%esp)
  0xa76abaaa: mov    %esp,%eax
  0xa76abaac: shr    $0xc,%eax
  0xa76abaaf: mov    -0x486bdba0(,%eax,4),%eax
  0xa76abab6: mov    %ebx,0x16c(%eax)
  0xa76ababc: mov    %ebx,%eax
  0xa76ababe: jmp    *%edi
  0xa76abac0: mov    0x4(%ecx),%ebx
  0xa76abac3: cmp    0x8(%eax),%ebx
  0xa76abac6: mov    0x4(%eax),%ebx
  0xa76abac9: jne    0xa76abadc
  0xa76abacf: cmpl   $0x0,0x34(%ebx)
  0xa76abad6: je     0xa76abb1b
  0xa76abadc: jmp    0xa7692560
  0xa76abae1: cmpl   $0x0,0x34(%ebx)
  0xa76abae8: je     0xa76abb1b
  0xa76abaee: mov    (%esp),%eax
  0xa76abaf1: pusha  
  0xa76abaf2: pushf  
  0xa76abaf3: sub    $0x10,%esp
  0xa76abaf6: vmovsd %xmm0,(%esp)
  0xa76abafb: vmovsd %xmm1,0x8(%esp)
  0xa76abb01: push   %eax
  0xa76abb02: push   %ebx
  0xa76abb03: call   0xb71d62fc
  0xa76abb08: add    $0x8,%esp
  0xa76abb0b: vmovsd (%esp),%xmm0
  0xa76abb10: vmovsd 0x8(%esp),%xmm1
  0xa76abb16: add    $0x10,%esp
  0xa76abb19: popf   
  0xa76abb1a: popa   
  0xa76abb1b: pop    %eax
  0xa76abb1c: mov    %esp,%esi
  0xa76abb1e: sub    $0x10,%esp
  0xa76abb21: mov    %ecx,0xc(%esp)
  0xa76abb25: mov    %edx,0x8(%esp)
  0xa76abb29: mov    0x10(%esp),%edi
  0xa76abb2d: mov    %edi,(%esp)
  0xa76abb30: mov    0x14(%esp),%edi
  0xa76abb34: mov    %edi,0x4(%esp)
  0xa76abb38: mov    0x28(%ebx),%ecx
  0xa76abb3b: push   %eax
  0xa76abb3c: jmp    *%ecx

AHE@0xb668229c: 0xa0000000 i2c: 0xa76abbc0 c2i: 0xa76abc4d c2iUV: 0xa76abc2c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76abc4d
  0xa76abbc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76abbc3: mov    $0xa75b1ac0,%edi
  0xa76abbc8: cmp    %edi,%eax
  0xa76abbca: jbe    0xa76abbdd
  0xa76abbd0: mov    $0xa7691ac0,%edi
  0xa76abbd5: cmp    %edi,%eax
  0xa76abbd7: jb     0xa76abc08
  0xa76abbdd: mov    $0xa75af400,%edi
  0xa76abbe2: cmp    %edi,%eax
  0xa76abbe4: jbe    0xa76abbf7
  0xa76abbea: mov    $0xa75b1728,%edi
  0xa76abbef: cmp    %edi,%eax
  0xa76abbf1: jb     0xa76abc08
  ;; i2c adapter must return to an interpreter frame
  0xa76abbf7: push   $0xb75a2830
  0xa76abbfc: call   0xa76abc01
  0xa76abc01: pusha  
  0xa76abc02: call   0xb7052f32
  0xa76abc07: hlt    
  ;; } verify_i2ce 
  0xa76abc08: mov    %esp,%edi
  0xa76abc0a: and    $0xfffffff0,%esp
  0xa76abc0d: push   %eax
  0xa76abc0e: mov    %edi,%eax
  0xa76abc10: mov    0x30(%ebx),%edi
  0xa76abc13: mov    0x4(%eax),%ecx
  0xa76abc16: mov    %esp,%eax
  0xa76abc18: shr    $0xc,%eax
  0xa76abc1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76abc22: mov    %ebx,0x16c(%eax)
  0xa76abc28: mov    %ebx,%eax
  0xa76abc2a: jmp    *%edi
  0xa76abc2c: mov    0x4(%ecx),%ebx
  0xa76abc2f: cmp    0x8(%eax),%ebx
  0xa76abc32: mov    0x4(%eax),%ebx
  0xa76abc35: jne    0xa76abc48
  0xa76abc3b: cmpl   $0x0,0x34(%ebx)
  0xa76abc42: je     0xa76abc87
  0xa76abc48: jmp    0xa7692560
  0xa76abc4d: cmpl   $0x0,0x34(%ebx)
  0xa76abc54: je     0xa76abc87
  0xa76abc5a: mov    (%esp),%eax
  0xa76abc5d: pusha  
  0xa76abc5e: pushf  
  0xa76abc5f: sub    $0x10,%esp
  0xa76abc62: vmovsd %xmm0,(%esp)
  0xa76abc67: vmovsd %xmm1,0x8(%esp)
  0xa76abc6d: push   %eax
  0xa76abc6e: push   %ebx
  0xa76abc6f: call   0xb71d62fc
  0xa76abc74: add    $0x8,%esp
  0xa76abc77: vmovsd (%esp),%xmm0
  0xa76abc7c: vmovsd 0x8(%esp),%xmm1
  0xa76abc82: add    $0x10,%esp
  0xa76abc85: popf   
  0xa76abc86: popa   
  0xa76abc87: pop    %eax
  0xa76abc88: mov    %esp,%esi
  0xa76abc8a: sub    $0x4,%esp
  0xa76abc8d: mov    %ecx,(%esp)
  0xa76abc90: mov    0x28(%ebx),%ecx
  0xa76abc93: push   %eax
  0xa76abc94: jmp    *%ecx

AHE@0xb66822c0: 0xa0000000 i2c: 0xa76abd40 c2i: 0xa76abdcd c2iUV: 0xa76abdac
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76abdcd
  0xa76abd40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76abd43: mov    $0xa75b1ac0,%edi
  0xa76abd48: cmp    %edi,%eax
  0xa76abd4a: jbe    0xa76abd5d
  0xa76abd50: mov    $0xa7691ac0,%edi
  0xa76abd55: cmp    %edi,%eax
  0xa76abd57: jb     0xa76abd88
  0xa76abd5d: mov    $0xa75af400,%edi
  0xa76abd62: cmp    %edi,%eax
  0xa76abd64: jbe    0xa76abd77
  0xa76abd6a: mov    $0xa75b1728,%edi
  0xa76abd6f: cmp    %edi,%eax
  0xa76abd71: jb     0xa76abd88
  ;; i2c adapter must return to an interpreter frame
  0xa76abd77: push   $0xb75a2830
  0xa76abd7c: call   0xa76abd81
  0xa76abd81: pusha  
  0xa76abd82: call   0xb7052f32
  0xa76abd87: hlt    
  ;; } verify_i2ce 
  0xa76abd88: mov    %esp,%edi
  0xa76abd8a: and    $0xfffffff0,%esp
  0xa76abd8d: push   %eax
  0xa76abd8e: mov    %edi,%eax
  0xa76abd90: mov    0x30(%ebx),%edi
  0xa76abd93: mov    0x4(%eax),%ecx
  0xa76abd96: mov    %esp,%eax
  0xa76abd98: shr    $0xc,%eax
  0xa76abd9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76abda2: mov    %ebx,0x16c(%eax)
  0xa76abda8: mov    %ebx,%eax
  0xa76abdaa: jmp    *%edi
  0xa76abdac: mov    0x4(%ecx),%ebx
  0xa76abdaf: cmp    0x8(%eax),%ebx
  0xa76abdb2: mov    0x4(%eax),%ebx
  0xa76abdb5: jne    0xa76abdc8
  0xa76abdbb: cmpl   $0x0,0x34(%ebx)
  0xa76abdc2: je     0xa76abe07
  0xa76abdc8: jmp    0xa7692560
  0xa76abdcd: cmpl   $0x0,0x34(%ebx)
  0xa76abdd4: je     0xa76abe07
  0xa76abdda: mov    (%esp),%eax
  0xa76abddd: pusha  
  0xa76abdde: pushf  
  0xa76abddf: sub    $0x10,%esp
  0xa76abde2: vmovsd %xmm0,(%esp)
  0xa76abde7: vmovsd %xmm1,0x8(%esp)
  0xa76abded: push   %eax
  0xa76abdee: push   %ebx
  0xa76abdef: call   0xb71d62fc
  0xa76abdf4: add    $0x8,%esp
  0xa76abdf7: vmovsd (%esp),%xmm0
  0xa76abdfc: vmovsd 0x8(%esp),%xmm1
  0xa76abe02: add    $0x10,%esp
  0xa76abe05: popf   
  0xa76abe06: popa   
  0xa76abe07: pop    %eax
  0xa76abe08: mov    %esp,%esi
  0xa76abe0a: sub    $0x4,%esp
  0xa76abe0d: mov    %ecx,(%esp)
  0xa76abe10: mov    0x28(%ebx),%ecx
  0xa76abe13: push   %eax
  0xa76abe14: jmp    *%ecx

AHE@0xb66822e4: 0xa0000000 i2c: 0xa76abec0 c2i: 0xa76abf4d c2iUV: 0xa76abf2c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76abf4d
  0xa76abec0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76abec3: mov    $0xa75b1ac0,%edi
  0xa76abec8: cmp    %edi,%eax
  0xa76abeca: jbe    0xa76abedd
  0xa76abed0: mov    $0xa7691ac0,%edi
  0xa76abed5: cmp    %edi,%eax
  0xa76abed7: jb     0xa76abf08
  0xa76abedd: mov    $0xa75af400,%edi
  0xa76abee2: cmp    %edi,%eax
  0xa76abee4: jbe    0xa76abef7
  0xa76abeea: mov    $0xa75b1728,%edi
  0xa76abeef: cmp    %edi,%eax
  0xa76abef1: jb     0xa76abf08
  ;; i2c adapter must return to an interpreter frame
  0xa76abef7: push   $0xb75a2830
  0xa76abefc: call   0xa76abf01
  0xa76abf01: pusha  
  0xa76abf02: call   0xb7052f32
  0xa76abf07: hlt    
  ;; } verify_i2ce 
  0xa76abf08: mov    %esp,%edi
  0xa76abf0a: and    $0xfffffff0,%esp
  0xa76abf0d: push   %eax
  0xa76abf0e: mov    %edi,%eax
  0xa76abf10: mov    0x30(%ebx),%edi
  0xa76abf13: mov    0x4(%eax),%ecx
  0xa76abf16: mov    %esp,%eax
  0xa76abf18: shr    $0xc,%eax
  0xa76abf1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76abf22: mov    %ebx,0x16c(%eax)
  0xa76abf28: mov    %ebx,%eax
  0xa76abf2a: jmp    *%edi
  0xa76abf2c: mov    0x4(%ecx),%ebx
  0xa76abf2f: cmp    0x8(%eax),%ebx
  0xa76abf32: mov    0x4(%eax),%ebx
  0xa76abf35: jne    0xa76abf48
  0xa76abf3b: cmpl   $0x0,0x34(%ebx)
  0xa76abf42: je     0xa76abf87
  0xa76abf48: jmp    0xa7692560
  0xa76abf4d: cmpl   $0x0,0x34(%ebx)
  0xa76abf54: je     0xa76abf87
  0xa76abf5a: mov    (%esp),%eax
  0xa76abf5d: pusha  
  0xa76abf5e: pushf  
  0xa76abf5f: sub    $0x10,%esp
  0xa76abf62: vmovsd %xmm0,(%esp)
  0xa76abf67: vmovsd %xmm1,0x8(%esp)
  0xa76abf6d: push   %eax
  0xa76abf6e: push   %ebx
  0xa76abf6f: call   0xb71d62fc
  0xa76abf74: add    $0x8,%esp
  0xa76abf77: vmovsd (%esp),%xmm0
  0xa76abf7c: vmovsd 0x8(%esp),%xmm1
  0xa76abf82: add    $0x10,%esp
  0xa76abf85: popf   
  0xa76abf86: popa   
  0xa76abf87: pop    %eax
  0xa76abf88: mov    %esp,%esi
  0xa76abf8a: sub    $0x4,%esp
  0xa76abf8d: mov    %ecx,(%esp)
  0xa76abf90: mov    0x28(%ebx),%ecx
  0xa76abf93: push   %eax
  0xa76abf94: jmp    *%ecx

AHE@0xb6682308: 0xaa000000 i2c: 0xa76ac040 c2i: 0xa76ac0d0 c2iUV: 0xa76ac0af
i2c argument handler #0 for: receiver (Ljava/lang/Object;)V (221 bytes generated)
c2i argument handler starts at 0xa76ac0d0
  0xa76ac040: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ac043: mov    $0xa75b1ac0,%edi
  0xa76ac048: cmp    %edi,%eax
  0xa76ac04a: jbe    0xa76ac05d
  0xa76ac050: mov    $0xa7691ac0,%edi
  0xa76ac055: cmp    %edi,%eax
  0xa76ac057: jb     0xa76ac088
  0xa76ac05d: mov    $0xa75af400,%edi
  0xa76ac062: cmp    %edi,%eax
  0xa76ac064: jbe    0xa76ac077
  0xa76ac06a: mov    $0xa75b1728,%edi
  0xa76ac06f: cmp    %edi,%eax
  0xa76ac071: jb     0xa76ac088
  ;; i2c adapter must return to an interpreter frame
  0xa76ac077: push   $0xb75a2830
  0xa76ac07c: call   0xa76ac081
  0xa76ac081: pusha  
  0xa76ac082: call   0xb7052f32
  0xa76ac087: hlt    
  ;; } verify_i2ce 
  0xa76ac088: mov    %esp,%edi
  0xa76ac08a: and    $0xfffffff0,%esp
  0xa76ac08d: push   %eax
  0xa76ac08e: mov    %edi,%eax
  0xa76ac090: mov    0x30(%ebx),%edi
  0xa76ac093: mov    0x8(%eax),%ecx
  0xa76ac096: mov    0x4(%eax),%edx
  0xa76ac099: mov    %esp,%eax
  0xa76ac09b: shr    $0xc,%eax
  0xa76ac09e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ac0a5: mov    %ebx,0x16c(%eax)
  0xa76ac0ab: mov    %ebx,%eax
  0xa76ac0ad: jmp    *%edi
  0xa76ac0af: mov    0x4(%ecx),%ebx
  0xa76ac0b2: cmp    0x8(%eax),%ebx
  0xa76ac0b5: mov    0x4(%eax),%ebx
  0xa76ac0b8: jne    0xa76ac0cb
  0xa76ac0be: cmpl   $0x0,0x34(%ebx)
  0xa76ac0c5: je     0xa76ac10a
  0xa76ac0cb: jmp    0xa7692560
  0xa76ac0d0: cmpl   $0x0,0x34(%ebx)
  0xa76ac0d7: je     0xa76ac10a
  0xa76ac0dd: mov    (%esp),%eax
  0xa76ac0e0: pusha  
  0xa76ac0e1: pushf  
  0xa76ac0e2: sub    $0x10,%esp
  0xa76ac0e5: vmovsd %xmm0,(%esp)
  0xa76ac0ea: vmovsd %xmm1,0x8(%esp)
  0xa76ac0f0: push   %eax
  0xa76ac0f1: push   %ebx
  0xa76ac0f2: call   0xb71d62fc
  0xa76ac0f7: add    $0x8,%esp
  0xa76ac0fa: vmovsd (%esp),%xmm0
  0xa76ac0ff: vmovsd 0x8(%esp),%xmm1
  0xa76ac105: add    $0x10,%esp
  0xa76ac108: popf   
  0xa76ac109: popa   
  0xa76ac10a: pop    %eax
  0xa76ac10b: mov    %esp,%esi
  0xa76ac10d: sub    $0x8,%esp
  0xa76ac110: mov    %ecx,0x4(%esp)
  0xa76ac114: mov    %edx,(%esp)
  0xa76ac117: mov    0x28(%ebx),%ecx
  0xa76ac11a: push   %eax
  0xa76ac11b: jmp    *%ecx

AHE@0xb668232c: 0xaabe0000 i2c: 0xa76ac1c0 c2i: 0xa76ac261 c2iUV: 0xa76ac240
i2c argument handler #0 for: receiver (ZJ)V (254 bytes generated)
c2i argument handler starts at 0xa76ac261
  0xa76ac1c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ac1c3: mov    $0xa75b1ac0,%edi
  0xa76ac1c8: cmp    %edi,%eax
  0xa76ac1ca: jbe    0xa76ac1dd
  0xa76ac1d0: mov    $0xa7691ac0,%edi
  0xa76ac1d5: cmp    %edi,%eax
  0xa76ac1d7: jb     0xa76ac208
  0xa76ac1dd: mov    $0xa75af400,%edi
  0xa76ac1e2: cmp    %edi,%eax
  0xa76ac1e4: jbe    0xa76ac1f7
  0xa76ac1ea: mov    $0xa75b1728,%edi
  0xa76ac1ef: cmp    %edi,%eax
  0xa76ac1f1: jb     0xa76ac208
  ;; i2c adapter must return to an interpreter frame
  0xa76ac1f7: push   $0xb75a2830
  0xa76ac1fc: call   0xa76ac201
  0xa76ac201: pusha  
  0xa76ac202: call   0xb7052f32
  0xa76ac207: hlt    
  ;; } verify_i2ce 
  0xa76ac208: mov    %esp,%edi
  0xa76ac20a: sub    $0x8,%esp
  0xa76ac20d: and    $0xfffffff0,%esp
  0xa76ac210: push   %eax
  0xa76ac211: mov    %edi,%eax
  0xa76ac213: mov    0x30(%ebx),%edi
  0xa76ac216: mov    0x10(%eax),%ecx
  0xa76ac219: mov    0xc(%eax),%edx
  0xa76ac21c: mov    0x4(%eax),%esi
  0xa76ac21f: mov    %esi,0x4(%esp)
  0xa76ac223: mov    0x8(%eax),%esi
  0xa76ac226: mov    %esi,0x8(%esp)
  0xa76ac22a: mov    %esp,%eax
  0xa76ac22c: shr    $0xc,%eax
  0xa76ac22f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ac236: mov    %ebx,0x16c(%eax)
  0xa76ac23c: mov    %ebx,%eax
  0xa76ac23e: jmp    *%edi
  0xa76ac240: mov    0x4(%ecx),%ebx
  0xa76ac243: cmp    0x8(%eax),%ebx
  0xa76ac246: mov    0x4(%eax),%ebx
  0xa76ac249: jne    0xa76ac25c
  0xa76ac24f: cmpl   $0x0,0x34(%ebx)
  0xa76ac256: je     0xa76ac29b
  0xa76ac25c: jmp    0xa7692560
  0xa76ac261: cmpl   $0x0,0x34(%ebx)
  0xa76ac268: je     0xa76ac29b
  0xa76ac26e: mov    (%esp),%eax
  0xa76ac271: pusha  
  0xa76ac272: pushf  
  0xa76ac273: sub    $0x10,%esp
  0xa76ac276: vmovsd %xmm0,(%esp)
  0xa76ac27b: vmovsd %xmm1,0x8(%esp)
  0xa76ac281: push   %eax
  0xa76ac282: push   %ebx
  0xa76ac283: call   0xb71d62fc
  0xa76ac288: add    $0x8,%esp
  0xa76ac28b: vmovsd (%esp),%xmm0
  0xa76ac290: vmovsd 0x8(%esp),%xmm1
  0xa76ac296: add    $0x10,%esp
  0xa76ac299: popf   
  0xa76ac29a: popa   
  0xa76ac29b: pop    %eax
  0xa76ac29c: mov    %esp,%esi
  0xa76ac29e: sub    $0x10,%esp
  0xa76ac2a1: mov    %ecx,0xc(%esp)
  0xa76ac2a5: mov    %edx,0x8(%esp)
  0xa76ac2a9: mov    0x10(%esp),%edi
  0xa76ac2ad: mov    %edi,(%esp)
  0xa76ac2b0: mov    0x14(%esp),%edi
  0xa76ac2b4: mov    %edi,0x4(%esp)
  0xa76ac2b8: mov    0x28(%ebx),%ecx
  0xa76ac2bb: push   %eax
  0xa76ac2bc: jmp    *%ecx

AHE@0xb6682350: 0xaabeabebe0000000 i2c: 0xa76ac340 c2i: 0xa76ac404 c2iUV: 0xa76ac3e3
i2c argument handler #0 for: receiver (Ljava/lang/Object;JLjava/lang/Object;JJ)V (329 bytes generated)
c2i argument handler starts at 0xa76ac404
  0xa76ac340: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ac343: mov    $0xa75b1ac0,%edi
  0xa76ac348: cmp    %edi,%eax
  0xa76ac34a: jbe    0xa76ac35d
  0xa76ac350: mov    $0xa7691ac0,%edi
  0xa76ac355: cmp    %edi,%eax
  0xa76ac357: jb     0xa76ac388
  0xa76ac35d: mov    $0xa75af400,%edi
  0xa76ac362: cmp    %edi,%eax
  0xa76ac364: jbe    0xa76ac377
  0xa76ac36a: mov    $0xa75b1728,%edi
  0xa76ac36f: cmp    %edi,%eax
  0xa76ac371: jb     0xa76ac388
  ;; i2c adapter must return to an interpreter frame
  0xa76ac377: push   $0xb75a2830
  0xa76ac37c: call   0xa76ac381
  0xa76ac381: pusha  
  0xa76ac382: call   0xb7052f32
  0xa76ac387: hlt    
  ;; } verify_i2ce 
  0xa76ac388: mov    %esp,%edi
  0xa76ac38a: sub    $0x20,%esp
  0xa76ac38d: and    $0xfffffff0,%esp
  0xa76ac390: push   %eax
  0xa76ac391: mov    %edi,%eax
  0xa76ac393: mov    0x30(%ebx),%edi
  0xa76ac396: mov    0x24(%eax),%ecx
  0xa76ac399: mov    0x20(%eax),%edx
  0xa76ac39c: mov    0x18(%eax),%esi
  0xa76ac39f: mov    %esi,0x4(%esp)
  0xa76ac3a3: mov    0x1c(%eax),%esi
  0xa76ac3a6: mov    %esi,0x8(%esp)
  0xa76ac3aa: mov    0x14(%eax),%esi
  0xa76ac3ad: mov    %esi,0x1c(%esp)
  0xa76ac3b1: mov    0xc(%eax),%esi
  0xa76ac3b4: mov    %esi,0xc(%esp)
  0xa76ac3b8: mov    0x10(%eax),%esi
  0xa76ac3bb: mov    %esi,0x10(%esp)
  0xa76ac3bf: mov    0x4(%eax),%esi
  0xa76ac3c2: mov    %esi,0x14(%esp)
  0xa76ac3c6: mov    0x8(%eax),%esi
  0xa76ac3c9: mov    %esi,0x18(%esp)
  0xa76ac3cd: mov    %esp,%eax
  0xa76ac3cf: shr    $0xc,%eax
  0xa76ac3d2: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ac3d9: mov    %ebx,0x16c(%eax)
  0xa76ac3df: mov    %ebx,%eax
  0xa76ac3e1: jmp    *%edi
  0xa76ac3e3: mov    0x4(%ecx),%ebx
  0xa76ac3e6: cmp    0x8(%eax),%ebx
  0xa76ac3e9: mov    0x4(%eax),%ebx
  0xa76ac3ec: jne    0xa76ac3ff
  0xa76ac3f2: cmpl   $0x0,0x34(%ebx)
  0xa76ac3f9: je     0xa76ac43e
  0xa76ac3ff: jmp    0xa7692560
  0xa76ac404: cmpl   $0x0,0x34(%ebx)
  0xa76ac40b: je     0xa76ac43e
  0xa76ac411: mov    (%esp),%eax
  0xa76ac414: pusha  
  0xa76ac415: pushf  
  0xa76ac416: sub    $0x10,%esp
  0xa76ac419: vmovsd %xmm0,(%esp)
  0xa76ac41e: vmovsd %xmm1,0x8(%esp)
  0xa76ac424: push   %eax
  0xa76ac425: push   %ebx
  0xa76ac426: call   0xb71d62fc
  0xa76ac42b: add    $0x8,%esp
  0xa76ac42e: vmovsd (%esp),%xmm0
  0xa76ac433: vmovsd 0x8(%esp),%xmm1
  0xa76ac439: add    $0x10,%esp
  0xa76ac43c: popf   
  0xa76ac43d: popa   
  0xa76ac43e: pop    %eax
  0xa76ac43f: mov    %esp,%esi
  0xa76ac441: sub    $0x24,%esp
  0xa76ac444: mov    %ecx,0x20(%esp)
  0xa76ac448: mov    %edx,0x1c(%esp)
  0xa76ac44c: mov    0x24(%esp),%edi
  0xa76ac450: mov    %edi,0x14(%esp)
  0xa76ac454: mov    0x28(%esp),%edi
  0xa76ac458: mov    %edi,0x18(%esp)
  0xa76ac45c: mov    0x3c(%esp),%edi
  0xa76ac460: mov    %edi,0x10(%esp)
  0xa76ac464: mov    0x2c(%esp),%edi
  0xa76ac468: mov    %edi,0x8(%esp)
  0xa76ac46c: mov    0x30(%esp),%edi
  0xa76ac470: mov    %edi,0xc(%esp)
  0xa76ac474: mov    0x34(%esp),%edi
  0xa76ac478: mov    %edi,(%esp)
  0xa76ac47b: mov    0x38(%esp),%edi
  0xa76ac47f: mov    %edi,0x4(%esp)
  0xa76ac483: mov    0x28(%ebx),%ecx
  0xa76ac486: push   %eax
  0xa76ac487: jmp    *%ecx

AHE@0xb6682374: 0xabebebe0 i2c: 0xa76ac540 c2i: 0xa76ac5fa c2iUV: 0xa76ac5d9
i2c argument handler #0 for: receiver (JJJ)V (307 bytes generated)
c2i argument handler starts at 0xa76ac5fa
  0xa76ac540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ac543: mov    $0xa75b1ac0,%edi
  0xa76ac548: cmp    %edi,%eax
  0xa76ac54a: jbe    0xa76ac55d
  0xa76ac550: mov    $0xa7691ac0,%edi
  0xa76ac555: cmp    %edi,%eax
  0xa76ac557: jb     0xa76ac588
  0xa76ac55d: mov    $0xa75af400,%edi
  0xa76ac562: cmp    %edi,%eax
  0xa76ac564: jbe    0xa76ac577
  0xa76ac56a: mov    $0xa75b1728,%edi
  0xa76ac56f: cmp    %edi,%eax
  0xa76ac571: jb     0xa76ac588
  ;; i2c adapter must return to an interpreter frame
  0xa76ac577: push   $0xb75a2830
  0xa76ac57c: call   0xa76ac581
  0xa76ac581: pusha  
  0xa76ac582: call   0xb7052f32
  0xa76ac587: hlt    
  ;; } verify_i2ce 
  0xa76ac588: mov    %esp,%edi
  0xa76ac58a: sub    $0x18,%esp
  0xa76ac58d: and    $0xfffffff0,%esp
  0xa76ac590: push   %eax
  0xa76ac591: mov    %edi,%eax
  0xa76ac593: mov    0x30(%ebx),%edi
  0xa76ac596: mov    0x1c(%eax),%ecx
  0xa76ac599: mov    0x14(%eax),%esi
  0xa76ac59c: mov    %esi,0x4(%esp)
  0xa76ac5a0: mov    0x18(%eax),%esi
  0xa76ac5a3: mov    %esi,0x8(%esp)
  0xa76ac5a7: mov    0xc(%eax),%esi
  0xa76ac5aa: mov    %esi,0xc(%esp)
  0xa76ac5ae: mov    0x10(%eax),%esi
  0xa76ac5b1: mov    %esi,0x10(%esp)
  0xa76ac5b5: mov    0x4(%eax),%esi
  0xa76ac5b8: mov    %esi,0x14(%esp)
  0xa76ac5bc: mov    0x8(%eax),%esi
  0xa76ac5bf: mov    %esi,0x18(%esp)
  0xa76ac5c3: mov    %esp,%eax
  0xa76ac5c5: shr    $0xc,%eax
  0xa76ac5c8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ac5cf: mov    %ebx,0x16c(%eax)
  0xa76ac5d5: mov    %ebx,%eax
  0xa76ac5d7: jmp    *%edi
  0xa76ac5d9: mov    0x4(%ecx),%ebx
  0xa76ac5dc: cmp    0x8(%eax),%ebx
  0xa76ac5df: mov    0x4(%eax),%ebx
  0xa76ac5e2: jne    0xa76ac5f5
  0xa76ac5e8: cmpl   $0x0,0x34(%ebx)
  0xa76ac5ef: je     0xa76ac634
  0xa76ac5f5: jmp    0xa7692560
  0xa76ac5fa: cmpl   $0x0,0x34(%ebx)
  0xa76ac601: je     0xa76ac634
  0xa76ac607: mov    (%esp),%eax
  0xa76ac60a: pusha  
  0xa76ac60b: pushf  
  0xa76ac60c: sub    $0x10,%esp
  0xa76ac60f: vmovsd %xmm0,(%esp)
  0xa76ac614: vmovsd %xmm1,0x8(%esp)
  0xa76ac61a: push   %eax
  0xa76ac61b: push   %ebx
  0xa76ac61c: call   0xb71d62fc
  0xa76ac621: add    $0x8,%esp
  0xa76ac624: vmovsd (%esp),%xmm0
  0xa76ac629: vmovsd 0x8(%esp),%xmm1
  0xa76ac62f: add    $0x10,%esp
  0xa76ac632: popf   
  0xa76ac633: popa   
  0xa76ac634: pop    %eax
  0xa76ac635: mov    %esp,%esi
  0xa76ac637: sub    $0x1c,%esp
  0xa76ac63a: mov    %ecx,0x18(%esp)
  0xa76ac63e: mov    0x1c(%esp),%edi
  0xa76ac642: mov    %edi,0x10(%esp)
  0xa76ac646: mov    0x20(%esp),%edi
  0xa76ac64a: mov    %edi,0x14(%esp)
  0xa76ac64e: mov    0x24(%esp),%edi
  0xa76ac652: mov    %edi,0x8(%esp)
  0xa76ac656: mov    0x28(%esp),%edi
  0xa76ac65a: mov    %edi,0xc(%esp)
  0xa76ac65e: mov    0x2c(%esp),%edi
  0xa76ac662: mov    %edi,(%esp)
  0xa76ac665: mov    0x30(%esp),%edi
  0xa76ac669: mov    %edi,0x4(%esp)
  0xa76ac66d: mov    0x28(%ebx),%ecx
  0xa76ac670: push   %eax
  0xa76ac671: jmp    *%ecx

AHE@0xb6682398: 0xaa000000 i2c: 0xa76ac700 c2i: 0xa76ac790 c2iUV: 0xa76ac76f
i2c argument handler #0 for: receiver (Ljava/lang/Class;)Ljava/lang/Object; (221 bytes generated)
c2i argument handler starts at 0xa76ac790
  0xa76ac700: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ac703: mov    $0xa75b1ac0,%edi
  0xa76ac708: cmp    %edi,%eax
  0xa76ac70a: jbe    0xa76ac71d
  0xa76ac710: mov    $0xa7691ac0,%edi
  0xa76ac715: cmp    %edi,%eax
  0xa76ac717: jb     0xa76ac748
  0xa76ac71d: mov    $0xa75af400,%edi
  0xa76ac722: cmp    %edi,%eax
  0xa76ac724: jbe    0xa76ac737
  0xa76ac72a: mov    $0xa75b1728,%edi
  0xa76ac72f: cmp    %edi,%eax
  0xa76ac731: jb     0xa76ac748
  ;; i2c adapter must return to an interpreter frame
  0xa76ac737: push   $0xb75a2830
  0xa76ac73c: call   0xa76ac741
  0xa76ac741: pusha  
  0xa76ac742: call   0xb7052f32
  0xa76ac747: hlt    
  ;; } verify_i2ce 
  0xa76ac748: mov    %esp,%edi
  0xa76ac74a: and    $0xfffffff0,%esp
  0xa76ac74d: push   %eax
  0xa76ac74e: mov    %edi,%eax
  0xa76ac750: mov    0x30(%ebx),%edi
  0xa76ac753: mov    0x8(%eax),%ecx
  0xa76ac756: mov    0x4(%eax),%edx
  0xa76ac759: mov    %esp,%eax
  0xa76ac75b: shr    $0xc,%eax
  0xa76ac75e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ac765: mov    %ebx,0x16c(%eax)
  0xa76ac76b: mov    %ebx,%eax
  0xa76ac76d: jmp    *%edi
  0xa76ac76f: mov    0x4(%ecx),%ebx
  0xa76ac772: cmp    0x8(%eax),%ebx
  0xa76ac775: mov    0x4(%eax),%ebx
  0xa76ac778: jne    0xa76ac78b
  0xa76ac77e: cmpl   $0x0,0x34(%ebx)
  0xa76ac785: je     0xa76ac7ca
  0xa76ac78b: jmp    0xa7692560
  0xa76ac790: cmpl   $0x0,0x34(%ebx)
  0xa76ac797: je     0xa76ac7ca
  0xa76ac79d: mov    (%esp),%eax
  0xa76ac7a0: pusha  
  0xa76ac7a1: pushf  
  0xa76ac7a2: sub    $0x10,%esp
  0xa76ac7a5: vmovsd %xmm0,(%esp)
  0xa76ac7aa: vmovsd %xmm1,0x8(%esp)
  0xa76ac7b0: push   %eax
  0xa76ac7b1: push   %ebx
  0xa76ac7b2: call   0xb71d62fc
  0xa76ac7b7: add    $0x8,%esp
  0xa76ac7ba: vmovsd (%esp),%xmm0
  0xa76ac7bf: vmovsd 0x8(%esp),%xmm1
  0xa76ac7c5: add    $0x10,%esp
  0xa76ac7c8: popf   
  0xa76ac7c9: popa   
  0xa76ac7ca: pop    %eax
  0xa76ac7cb: mov    %esp,%esi
  0xa76ac7cd: sub    $0x8,%esp
  0xa76ac7d0: mov    %ecx,0x4(%esp)
  0xa76ac7d4: mov    %edx,(%esp)
  0xa76ac7d7: mov    0x28(%ebx),%ecx
  0xa76ac7da: push   %eax
  0xa76ac7db: jmp    *%ecx

AHE@0xb66823bc: 0x i2c: 0xa76ac880 c2i: 0xa76ac90a c2iUV: 0xa76ac8e9
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76ac90a
  0xa76ac880: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ac883: mov    $0xa75b1ac0,%edi
  0xa76ac888: cmp    %edi,%eax
  0xa76ac88a: jbe    0xa76ac89d
  0xa76ac890: mov    $0xa7691ac0,%edi
  0xa76ac895: cmp    %edi,%eax
  0xa76ac897: jb     0xa76ac8c8
  0xa76ac89d: mov    $0xa75af400,%edi
  0xa76ac8a2: cmp    %edi,%eax
  0xa76ac8a4: jbe    0xa76ac8b7
  0xa76ac8aa: mov    $0xa75b1728,%edi
  0xa76ac8af: cmp    %edi,%eax
  0xa76ac8b1: jb     0xa76ac8c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ac8b7: push   $0xb75a2830
  0xa76ac8bc: call   0xa76ac8c1
  0xa76ac8c1: pusha  
  0xa76ac8c2: call   0xb7052f32
  0xa76ac8c7: hlt    
  ;; } verify_i2ce 
  0xa76ac8c8: mov    %esp,%edi
  0xa76ac8ca: and    $0xfffffff0,%esp
  0xa76ac8cd: push   %eax
  0xa76ac8ce: mov    %edi,%eax
  0xa76ac8d0: mov    0x30(%ebx),%edi
  0xa76ac8d3: mov    %esp,%eax
  0xa76ac8d5: shr    $0xc,%eax
  0xa76ac8d8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ac8df: mov    %ebx,0x16c(%eax)
  0xa76ac8e5: mov    %ebx,%eax
  0xa76ac8e7: jmp    *%edi
  0xa76ac8e9: mov    0x4(%ecx),%ebx
  0xa76ac8ec: cmp    0x8(%eax),%ebx
  0xa76ac8ef: mov    0x4(%eax),%ebx
  0xa76ac8f2: jne    0xa76ac905
  0xa76ac8f8: cmpl   $0x0,0x34(%ebx)
  0xa76ac8ff: je     0xa76ac944
  0xa76ac905: jmp    0xa7692560
  0xa76ac90a: cmpl   $0x0,0x34(%ebx)
  0xa76ac911: je     0xa76ac944
  0xa76ac917: mov    (%esp),%eax
  0xa76ac91a: pusha  
  0xa76ac91b: pushf  
  0xa76ac91c: sub    $0x10,%esp
  0xa76ac91f: vmovsd %xmm0,(%esp)
  0xa76ac924: vmovsd %xmm1,0x8(%esp)
  0xa76ac92a: push   %eax
  0xa76ac92b: push   %ebx
  0xa76ac92c: call   0xb71d62fc
  0xa76ac931: add    $0x8,%esp
  0xa76ac934: vmovsd (%esp),%xmm0
  0xa76ac939: vmovsd 0x8(%esp),%xmm1
  0xa76ac93f: add    $0x10,%esp
  0xa76ac942: popf   
  0xa76ac943: popa   
  0xa76ac944: pop    %eax
  0xa76ac945: mov    %esp,%esi
  0xa76ac947: sub    $0x0,%esp
  0xa76ac94a: mov    0x28(%ebx),%ecx
  0xa76ac94d: push   %eax
  0xa76ac94e: jmp    *%ecx

AHE@0xb66823e0: 0x i2c: 0xa76aca00 c2i: 0xa76aca8a c2iUV: 0xa76aca69
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76aca8a
  0xa76aca00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aca03: mov    $0xa75b1ac0,%edi
  0xa76aca08: cmp    %edi,%eax
  0xa76aca0a: jbe    0xa76aca1d
  0xa76aca10: mov    $0xa7691ac0,%edi
  0xa76aca15: cmp    %edi,%eax
  0xa76aca17: jb     0xa76aca48
  0xa76aca1d: mov    $0xa75af400,%edi
  0xa76aca22: cmp    %edi,%eax
  0xa76aca24: jbe    0xa76aca37
  0xa76aca2a: mov    $0xa75b1728,%edi
  0xa76aca2f: cmp    %edi,%eax
  0xa76aca31: jb     0xa76aca48
  ;; i2c adapter must return to an interpreter frame
  0xa76aca37: push   $0xb75a2830
  0xa76aca3c: call   0xa76aca41
  0xa76aca41: pusha  
  0xa76aca42: call   0xb7052f32
  0xa76aca47: hlt    
  ;; } verify_i2ce 
  0xa76aca48: mov    %esp,%edi
  0xa76aca4a: and    $0xfffffff0,%esp
  0xa76aca4d: push   %eax
  0xa76aca4e: mov    %edi,%eax
  0xa76aca50: mov    0x30(%ebx),%edi
  0xa76aca53: mov    %esp,%eax
  0xa76aca55: shr    $0xc,%eax
  0xa76aca58: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aca5f: mov    %ebx,0x16c(%eax)
  0xa76aca65: mov    %ebx,%eax
  0xa76aca67: jmp    *%edi
  0xa76aca69: mov    0x4(%ecx),%ebx
  0xa76aca6c: cmp    0x8(%eax),%ebx
  0xa76aca6f: mov    0x4(%eax),%ebx
  0xa76aca72: jne    0xa76aca85
  0xa76aca78: cmpl   $0x0,0x34(%ebx)
  0xa76aca7f: je     0xa76acac4
  0xa76aca85: jmp    0xa7692560
  0xa76aca8a: cmpl   $0x0,0x34(%ebx)
  0xa76aca91: je     0xa76acac4
  0xa76aca97: mov    (%esp),%eax
  0xa76aca9a: pusha  
  0xa76aca9b: pushf  
  0xa76aca9c: sub    $0x10,%esp
  0xa76aca9f: vmovsd %xmm0,(%esp)
  0xa76acaa4: vmovsd %xmm1,0x8(%esp)
  0xa76acaaa: push   %eax
  0xa76acaab: push   %ebx
  0xa76acaac: call   0xb71d62fc
  0xa76acab1: add    $0x8,%esp
  0xa76acab4: vmovsd (%esp),%xmm0
  0xa76acab9: vmovsd 0x8(%esp),%xmm1
  0xa76acabf: add    $0x10,%esp
  0xa76acac2: popf   
  0xa76acac3: popa   
  0xa76acac4: pop    %eax
  0xa76acac5: mov    %esp,%esi
  0xa76acac7: sub    $0x0,%esp
  0xa76acaca: mov    0x28(%ebx),%ecx
  0xa76acacd: push   %eax
  0xa76acace: jmp    *%ecx

AHE@0xb6682404: 0xa0000000 i2c: 0xa76acb80 c2i: 0xa76acc0d c2iUV: 0xa76acbec
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76acc0d
  0xa76acb80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76acb83: mov    $0xa75b1ac0,%edi
  0xa76acb88: cmp    %edi,%eax
  0xa76acb8a: jbe    0xa76acb9d
  0xa76acb90: mov    $0xa7691ac0,%edi
  0xa76acb95: cmp    %edi,%eax
  0xa76acb97: jb     0xa76acbc8
  0xa76acb9d: mov    $0xa75af400,%edi
  0xa76acba2: cmp    %edi,%eax
  0xa76acba4: jbe    0xa76acbb7
  0xa76acbaa: mov    $0xa75b1728,%edi
  0xa76acbaf: cmp    %edi,%eax
  0xa76acbb1: jb     0xa76acbc8
  ;; i2c adapter must return to an interpreter frame
  0xa76acbb7: push   $0xb75a2830
  0xa76acbbc: call   0xa76acbc1
  0xa76acbc1: pusha  
  0xa76acbc2: call   0xb7052f32
  0xa76acbc7: hlt    
  ;; } verify_i2ce 
  0xa76acbc8: mov    %esp,%edi
  0xa76acbca: and    $0xfffffff0,%esp
  0xa76acbcd: push   %eax
  0xa76acbce: mov    %edi,%eax
  0xa76acbd0: mov    0x30(%ebx),%edi
  0xa76acbd3: mov    0x4(%eax),%ecx
  0xa76acbd6: mov    %esp,%eax
  0xa76acbd8: shr    $0xc,%eax
  0xa76acbdb: mov    -0x486bdba0(,%eax,4),%eax
  0xa76acbe2: mov    %ebx,0x16c(%eax)
  0xa76acbe8: mov    %ebx,%eax
  0xa76acbea: jmp    *%edi
  0xa76acbec: mov    0x4(%ecx),%ebx
  0xa76acbef: cmp    0x8(%eax),%ebx
  0xa76acbf2: mov    0x4(%eax),%ebx
  0xa76acbf5: jne    0xa76acc08
  0xa76acbfb: cmpl   $0x0,0x34(%ebx)
  0xa76acc02: je     0xa76acc47
  0xa76acc08: jmp    0xa7692560
  0xa76acc0d: cmpl   $0x0,0x34(%ebx)
  0xa76acc14: je     0xa76acc47
  0xa76acc1a: mov    (%esp),%eax
  0xa76acc1d: pusha  
  0xa76acc1e: pushf  
  0xa76acc1f: sub    $0x10,%esp
  0xa76acc22: vmovsd %xmm0,(%esp)
  0xa76acc27: vmovsd %xmm1,0x8(%esp)
  0xa76acc2d: push   %eax
  0xa76acc2e: push   %ebx
  0xa76acc2f: call   0xb71d62fc
  0xa76acc34: add    $0x8,%esp
  0xa76acc37: vmovsd (%esp),%xmm0
  0xa76acc3c: vmovsd 0x8(%esp),%xmm1
  0xa76acc42: add    $0x10,%esp
  0xa76acc45: popf   
  0xa76acc46: popa   
  0xa76acc47: pop    %eax
  0xa76acc48: mov    %esp,%esi
  0xa76acc4a: sub    $0x4,%esp
  0xa76acc4d: mov    %ecx,(%esp)
  0xa76acc50: mov    0x28(%ebx),%ecx
  0xa76acc53: push   %eax
  0xa76acc54: jmp    *%ecx

AHE@0xb6682428: 0x i2c: 0xa76acd00 c2i: 0xa76acd8a c2iUV: 0xa76acd69
i2c argument handler #0 for: static ()Ljava/util/Vector; (208 bytes generated)
c2i argument handler starts at 0xa76acd8a
  0xa76acd00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76acd03: mov    $0xa75b1ac0,%edi
  0xa76acd08: cmp    %edi,%eax
  0xa76acd0a: jbe    0xa76acd1d
  0xa76acd10: mov    $0xa7691ac0,%edi
  0xa76acd15: cmp    %edi,%eax
  0xa76acd17: jb     0xa76acd48
  0xa76acd1d: mov    $0xa75af400,%edi
  0xa76acd22: cmp    %edi,%eax
  0xa76acd24: jbe    0xa76acd37
  0xa76acd2a: mov    $0xa75b1728,%edi
  0xa76acd2f: cmp    %edi,%eax
  0xa76acd31: jb     0xa76acd48
  ;; i2c adapter must return to an interpreter frame
  0xa76acd37: push   $0xb75a2830
  0xa76acd3c: call   0xa76acd41
  0xa76acd41: pusha  
  0xa76acd42: call   0xb7052f32
  0xa76acd47: hlt    
  ;; } verify_i2ce 
  0xa76acd48: mov    %esp,%edi
  0xa76acd4a: and    $0xfffffff0,%esp
  0xa76acd4d: push   %eax
  0xa76acd4e: mov    %edi,%eax
  0xa76acd50: mov    0x30(%ebx),%edi
  0xa76acd53: mov    %esp,%eax
  0xa76acd55: shr    $0xc,%eax
  0xa76acd58: mov    -0x486bdba0(,%eax,4),%eax
  0xa76acd5f: mov    %ebx,0x16c(%eax)
  0xa76acd65: mov    %ebx,%eax
  0xa76acd67: jmp    *%edi
  0xa76acd69: mov    0x4(%ecx),%ebx
  0xa76acd6c: cmp    0x8(%eax),%ebx
  0xa76acd6f: mov    0x4(%eax),%ebx
  0xa76acd72: jne    0xa76acd85
  0xa76acd78: cmpl   $0x0,0x34(%ebx)
  0xa76acd7f: je     0xa76acdc4
  0xa76acd85: jmp    0xa7692560
  0xa76acd8a: cmpl   $0x0,0x34(%ebx)
  0xa76acd91: je     0xa76acdc4
  0xa76acd97: mov    (%esp),%eax
  0xa76acd9a: pusha  
  0xa76acd9b: pushf  
  0xa76acd9c: sub    $0x10,%esp
  0xa76acd9f: vmovsd %xmm0,(%esp)
  0xa76acda4: vmovsd %xmm1,0x8(%esp)
  0xa76acdaa: push   %eax
  0xa76acdab: push   %ebx
  0xa76acdac: call   0xb71d62fc
  0xa76acdb1: add    $0x8,%esp
  0xa76acdb4: vmovsd (%esp),%xmm0
  0xa76acdb9: vmovsd 0x8(%esp),%xmm1
  0xa76acdbf: add    $0x10,%esp
  0xa76acdc2: popf   
  0xa76acdc3: popa   
  0xa76acdc4: pop    %eax
  0xa76acdc5: mov    %esp,%esi
  0xa76acdc7: sub    $0x0,%esp
  0xa76acdca: mov    0x28(%ebx),%ecx
  0xa76acdcd: push   %eax
  0xa76acdce: jmp    *%ecx

AHE@0xb668244c: 0x i2c: 0xa76ace80 c2i: 0xa76acf0a c2iUV: 0xa76acee9
i2c argument handler #0 for: static ()Ljava/lang/AssertionStatusDirectives; (208 bytes generated)
c2i argument handler starts at 0xa76acf0a
  0xa76ace80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ace83: mov    $0xa75b1ac0,%edi
  0xa76ace88: cmp    %edi,%eax
  0xa76ace8a: jbe    0xa76ace9d
  0xa76ace90: mov    $0xa7691ac0,%edi
  0xa76ace95: cmp    %edi,%eax
  0xa76ace97: jb     0xa76acec8
  0xa76ace9d: mov    $0xa75af400,%edi
  0xa76acea2: cmp    %edi,%eax
  0xa76acea4: jbe    0xa76aceb7
  0xa76aceaa: mov    $0xa75b1728,%edi
  0xa76aceaf: cmp    %edi,%eax
  0xa76aceb1: jb     0xa76acec8
  ;; i2c adapter must return to an interpreter frame
  0xa76aceb7: push   $0xb75a2830
  0xa76acebc: call   0xa76acec1
  0xa76acec1: pusha  
  0xa76acec2: call   0xb7052f32
  0xa76acec7: hlt    
  ;; } verify_i2ce 
  0xa76acec8: mov    %esp,%edi
  0xa76aceca: and    $0xfffffff0,%esp
  0xa76acecd: push   %eax
  0xa76acece: mov    %edi,%eax
  0xa76aced0: mov    0x30(%ebx),%edi
  0xa76aced3: mov    %esp,%eax
  0xa76aced5: shr    $0xc,%eax
  0xa76aced8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76acedf: mov    %ebx,0x16c(%eax)
  0xa76acee5: mov    %ebx,%eax
  0xa76acee7: jmp    *%edi
  0xa76acee9: mov    0x4(%ecx),%ebx
  0xa76aceec: cmp    0x8(%eax),%ebx
  0xa76aceef: mov    0x4(%eax),%ebx
  0xa76acef2: jne    0xa76acf05
  0xa76acef8: cmpl   $0x0,0x34(%ebx)
  0xa76aceff: je     0xa76acf44
  0xa76acf05: jmp    0xa7692560
  0xa76acf0a: cmpl   $0x0,0x34(%ebx)
  0xa76acf11: je     0xa76acf44
  0xa76acf17: mov    (%esp),%eax
  0xa76acf1a: pusha  
  0xa76acf1b: pushf  
  0xa76acf1c: sub    $0x10,%esp
  0xa76acf1f: vmovsd %xmm0,(%esp)
  0xa76acf24: vmovsd %xmm1,0x8(%esp)
  0xa76acf2a: push   %eax
  0xa76acf2b: push   %ebx
  0xa76acf2c: call   0xb71d62fc
  0xa76acf31: add    $0x8,%esp
  0xa76acf34: vmovsd (%esp),%xmm0
  0xa76acf39: vmovsd 0x8(%esp),%xmm1
  0xa76acf3f: add    $0x10,%esp
  0xa76acf42: popf   
  0xa76acf43: popa   
  0xa76acf44: pop    %eax
  0xa76acf45: mov    %esp,%esi
  0xa76acf47: sub    $0x0,%esp
  0xa76acf4a: mov    0x28(%ebx),%ecx
  0xa76acf4d: push   %eax
  0xa76acf4e: jmp    *%ecx

AHE@0xb6682470: 0xa0000000 i2c: 0xa76ad000 c2i: 0xa76ad08d c2iUV: 0xa76ad06c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76ad08d
  0xa76ad000: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ad003: mov    $0xa75b1ac0,%edi
  0xa76ad008: cmp    %edi,%eax
  0xa76ad00a: jbe    0xa76ad01d
  0xa76ad010: mov    $0xa7691ac0,%edi
  0xa76ad015: cmp    %edi,%eax
  0xa76ad017: jb     0xa76ad048
  0xa76ad01d: mov    $0xa75af400,%edi
  0xa76ad022: cmp    %edi,%eax
  0xa76ad024: jbe    0xa76ad037
  0xa76ad02a: mov    $0xa75b1728,%edi
  0xa76ad02f: cmp    %edi,%eax
  0xa76ad031: jb     0xa76ad048
  ;; i2c adapter must return to an interpreter frame
  0xa76ad037: push   $0xb75a2830
  0xa76ad03c: call   0xa76ad041
  0xa76ad041: pusha  
  0xa76ad042: call   0xb7052f32
  0xa76ad047: hlt    
  ;; } verify_i2ce 
  0xa76ad048: mov    %esp,%edi
  0xa76ad04a: and    $0xfffffff0,%esp
  0xa76ad04d: push   %eax
  0xa76ad04e: mov    %edi,%eax
  0xa76ad050: mov    0x30(%ebx),%edi
  0xa76ad053: mov    0x4(%eax),%ecx
  0xa76ad056: mov    %esp,%eax
  0xa76ad058: shr    $0xc,%eax
  0xa76ad05b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ad062: mov    %ebx,0x16c(%eax)
  0xa76ad068: mov    %ebx,%eax
  0xa76ad06a: jmp    *%edi
  0xa76ad06c: mov    0x4(%ecx),%ebx
  0xa76ad06f: cmp    0x8(%eax),%ebx
  0xa76ad072: mov    0x4(%eax),%ebx
  0xa76ad075: jne    0xa76ad088
  0xa76ad07b: cmpl   $0x0,0x34(%ebx)
  0xa76ad082: je     0xa76ad0c7
  0xa76ad088: jmp    0xa7692560
  0xa76ad08d: cmpl   $0x0,0x34(%ebx)
  0xa76ad094: je     0xa76ad0c7
  0xa76ad09a: mov    (%esp),%eax
  0xa76ad09d: pusha  
  0xa76ad09e: pushf  
  0xa76ad09f: sub    $0x10,%esp
  0xa76ad0a2: vmovsd %xmm0,(%esp)
  0xa76ad0a7: vmovsd %xmm1,0x8(%esp)
  0xa76ad0ad: push   %eax
  0xa76ad0ae: push   %ebx
  0xa76ad0af: call   0xb71d62fc
  0xa76ad0b4: add    $0x8,%esp
  0xa76ad0b7: vmovsd (%esp),%xmm0
  0xa76ad0bc: vmovsd 0x8(%esp),%xmm1
  0xa76ad0c2: add    $0x10,%esp
  0xa76ad0c5: popf   
  0xa76ad0c6: popa   
  0xa76ad0c7: pop    %eax
  0xa76ad0c8: mov    %esp,%esi
  0xa76ad0ca: sub    $0x4,%esp
  0xa76ad0cd: mov    %ecx,(%esp)
  0xa76ad0d0: mov    0x28(%ebx),%ecx
  0xa76ad0d3: push   %eax
  0xa76ad0d4: jmp    *%ecx

AHE@0xb6682494: 0xa0000000 i2c: 0xa76ad180 c2i: 0xa76ad20d c2iUV: 0xa76ad1ec
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76ad20d
  0xa76ad180: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ad183: mov    $0xa75b1ac0,%edi
  0xa76ad188: cmp    %edi,%eax
  0xa76ad18a: jbe    0xa76ad19d
  0xa76ad190: mov    $0xa7691ac0,%edi
  0xa76ad195: cmp    %edi,%eax
  0xa76ad197: jb     0xa76ad1c8
  0xa76ad19d: mov    $0xa75af400,%edi
  0xa76ad1a2: cmp    %edi,%eax
  0xa76ad1a4: jbe    0xa76ad1b7
  0xa76ad1aa: mov    $0xa75b1728,%edi
  0xa76ad1af: cmp    %edi,%eax
  0xa76ad1b1: jb     0xa76ad1c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ad1b7: push   $0xb75a2830
  0xa76ad1bc: call   0xa76ad1c1
  0xa76ad1c1: pusha  
  0xa76ad1c2: call   0xb7052f32
  0xa76ad1c7: hlt    
  ;; } verify_i2ce 
  0xa76ad1c8: mov    %esp,%edi
  0xa76ad1ca: and    $0xfffffff0,%esp
  0xa76ad1cd: push   %eax
  0xa76ad1ce: mov    %edi,%eax
  0xa76ad1d0: mov    0x30(%ebx),%edi
  0xa76ad1d3: mov    0x4(%eax),%ecx
  0xa76ad1d6: mov    %esp,%eax
  0xa76ad1d8: shr    $0xc,%eax
  0xa76ad1db: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ad1e2: mov    %ebx,0x16c(%eax)
  0xa76ad1e8: mov    %ebx,%eax
  0xa76ad1ea: jmp    *%edi
  0xa76ad1ec: mov    0x4(%ecx),%ebx
  0xa76ad1ef: cmp    0x8(%eax),%ebx
  0xa76ad1f2: mov    0x4(%eax),%ebx
  0xa76ad1f5: jne    0xa76ad208
  0xa76ad1fb: cmpl   $0x0,0x34(%ebx)
  0xa76ad202: je     0xa76ad247
  0xa76ad208: jmp    0xa7692560
  0xa76ad20d: cmpl   $0x0,0x34(%ebx)
  0xa76ad214: je     0xa76ad247
  0xa76ad21a: mov    (%esp),%eax
  0xa76ad21d: pusha  
  0xa76ad21e: pushf  
  0xa76ad21f: sub    $0x10,%esp
  0xa76ad222: vmovsd %xmm0,(%esp)
  0xa76ad227: vmovsd %xmm1,0x8(%esp)
  0xa76ad22d: push   %eax
  0xa76ad22e: push   %ebx
  0xa76ad22f: call   0xb71d62fc
  0xa76ad234: add    $0x8,%esp
  0xa76ad237: vmovsd (%esp),%xmm0
  0xa76ad23c: vmovsd 0x8(%esp),%xmm1
  0xa76ad242: add    $0x10,%esp
  0xa76ad245: popf   
  0xa76ad246: popa   
  0xa76ad247: pop    %eax
  0xa76ad248: mov    %esp,%esi
  0xa76ad24a: sub    $0x4,%esp
  0xa76ad24d: mov    %ecx,(%esp)
  0xa76ad250: mov    0x28(%ebx),%ecx
  0xa76ad253: push   %eax
  0xa76ad254: jmp    *%ecx

AHE@0xb66824b8: 0xaaa00000 i2c: 0xa76ad300 c2i: 0xa76ad39a c2iUV: 0xa76ad379
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)V (239 bytes generated)
c2i argument handler starts at 0xa76ad39a
  0xa76ad300: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ad303: mov    $0xa75b1ac0,%edi
  0xa76ad308: cmp    %edi,%eax
  0xa76ad30a: jbe    0xa76ad31d
  0xa76ad310: mov    $0xa7691ac0,%edi
  0xa76ad315: cmp    %edi,%eax
  0xa76ad317: jb     0xa76ad348
  0xa76ad31d: mov    $0xa75af400,%edi
  0xa76ad322: cmp    %edi,%eax
  0xa76ad324: jbe    0xa76ad337
  0xa76ad32a: mov    $0xa75b1728,%edi
  0xa76ad32f: cmp    %edi,%eax
  0xa76ad331: jb     0xa76ad348
  ;; i2c adapter must return to an interpreter frame
  0xa76ad337: push   $0xb75a2830
  0xa76ad33c: call   0xa76ad341
  0xa76ad341: pusha  
  0xa76ad342: call   0xb7052f32
  0xa76ad347: hlt    
  ;; } verify_i2ce 
  0xa76ad348: mov    %esp,%edi
  0xa76ad34a: sub    $0x8,%esp
  0xa76ad34d: and    $0xfffffff0,%esp
  0xa76ad350: push   %eax
  0xa76ad351: mov    %edi,%eax
  0xa76ad353: mov    0x30(%ebx),%edi
  0xa76ad356: mov    0xc(%eax),%ecx
  0xa76ad359: mov    0x8(%eax),%edx
  0xa76ad35c: mov    0x4(%eax),%esi
  0xa76ad35f: mov    %esi,0x4(%esp)
  0xa76ad363: mov    %esp,%eax
  0xa76ad365: shr    $0xc,%eax
  0xa76ad368: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ad36f: mov    %ebx,0x16c(%eax)
  0xa76ad375: mov    %ebx,%eax
  0xa76ad377: jmp    *%edi
  0xa76ad379: mov    0x4(%ecx),%ebx
  0xa76ad37c: cmp    0x8(%eax),%ebx
  0xa76ad37f: mov    0x4(%eax),%ebx
  0xa76ad382: jne    0xa76ad395
  0xa76ad388: cmpl   $0x0,0x34(%ebx)
  0xa76ad38f: je     0xa76ad3d4
  0xa76ad395: jmp    0xa7692560
  0xa76ad39a: cmpl   $0x0,0x34(%ebx)
  0xa76ad3a1: je     0xa76ad3d4
  0xa76ad3a7: mov    (%esp),%eax
  0xa76ad3aa: pusha  
  0xa76ad3ab: pushf  
  0xa76ad3ac: sub    $0x10,%esp
  0xa76ad3af: vmovsd %xmm0,(%esp)
  0xa76ad3b4: vmovsd %xmm1,0x8(%esp)
  0xa76ad3ba: push   %eax
  0xa76ad3bb: push   %ebx
  0xa76ad3bc: call   0xb71d62fc
  0xa76ad3c1: add    $0x8,%esp
  0xa76ad3c4: vmovsd (%esp),%xmm0
  0xa76ad3c9: vmovsd 0x8(%esp),%xmm1
  0xa76ad3cf: add    $0x10,%esp
  0xa76ad3d2: popf   
  0xa76ad3d3: popa   
  0xa76ad3d4: pop    %eax
  0xa76ad3d5: mov    %esp,%esi
  0xa76ad3d7: sub    $0xc,%esp
  0xa76ad3da: mov    %ecx,0x8(%esp)
  0xa76ad3de: mov    %edx,0x4(%esp)
  0xa76ad3e2: mov    0xc(%esp),%edi
  0xa76ad3e6: mov    %edi,(%esp)
  0xa76ad3e9: mov    0x28(%ebx),%ecx
  0xa76ad3ec: push   %eax
  0xa76ad3ed: jmp    *%ecx

AHE@0xb66824dc: 0xaaa00000 i2c: 0xa76ad480 c2i: 0xa76ad51a c2iUV: 0xa76ad4f9
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)V (239 bytes generated)
c2i argument handler starts at 0xa76ad51a
  0xa76ad480: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ad483: mov    $0xa75b1ac0,%edi
  0xa76ad488: cmp    %edi,%eax
  0xa76ad48a: jbe    0xa76ad49d
  0xa76ad490: mov    $0xa7691ac0,%edi
  0xa76ad495: cmp    %edi,%eax
  0xa76ad497: jb     0xa76ad4c8
  0xa76ad49d: mov    $0xa75af400,%edi
  0xa76ad4a2: cmp    %edi,%eax
  0xa76ad4a4: jbe    0xa76ad4b7
  0xa76ad4aa: mov    $0xa75b1728,%edi
  0xa76ad4af: cmp    %edi,%eax
  0xa76ad4b1: jb     0xa76ad4c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ad4b7: push   $0xb75a2830
  0xa76ad4bc: call   0xa76ad4c1
  0xa76ad4c1: pusha  
  0xa76ad4c2: call   0xb7052f32
  0xa76ad4c7: hlt    
  ;; } verify_i2ce 
  0xa76ad4c8: mov    %esp,%edi
  0xa76ad4ca: sub    $0x8,%esp
  0xa76ad4cd: and    $0xfffffff0,%esp
  0xa76ad4d0: push   %eax
  0xa76ad4d1: mov    %edi,%eax
  0xa76ad4d3: mov    0x30(%ebx),%edi
  0xa76ad4d6: mov    0xc(%eax),%ecx
  0xa76ad4d9: mov    0x8(%eax),%edx
  0xa76ad4dc: mov    0x4(%eax),%esi
  0xa76ad4df: mov    %esi,0x4(%esp)
  0xa76ad4e3: mov    %esp,%eax
  0xa76ad4e5: shr    $0xc,%eax
  0xa76ad4e8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ad4ef: mov    %ebx,0x16c(%eax)
  0xa76ad4f5: mov    %ebx,%eax
  0xa76ad4f7: jmp    *%edi
  0xa76ad4f9: mov    0x4(%ecx),%ebx
  0xa76ad4fc: cmp    0x8(%eax),%ebx
  0xa76ad4ff: mov    0x4(%eax),%ebx
  0xa76ad502: jne    0xa76ad515
  0xa76ad508: cmpl   $0x0,0x34(%ebx)
  0xa76ad50f: je     0xa76ad554
  0xa76ad515: jmp    0xa7692560
  0xa76ad51a: cmpl   $0x0,0x34(%ebx)
  0xa76ad521: je     0xa76ad554
  0xa76ad527: mov    (%esp),%eax
  0xa76ad52a: pusha  
  0xa76ad52b: pushf  
  0xa76ad52c: sub    $0x10,%esp
  0xa76ad52f: vmovsd %xmm0,(%esp)
  0xa76ad534: vmovsd %xmm1,0x8(%esp)
  0xa76ad53a: push   %eax
  0xa76ad53b: push   %ebx
  0xa76ad53c: call   0xb71d62fc
  0xa76ad541: add    $0x8,%esp
  0xa76ad544: vmovsd (%esp),%xmm0
  0xa76ad549: vmovsd 0x8(%esp),%xmm1
  0xa76ad54f: add    $0x10,%esp
  0xa76ad552: popf   
  0xa76ad553: popa   
  0xa76ad554: pop    %eax
  0xa76ad555: mov    %esp,%esi
  0xa76ad557: sub    $0xc,%esp
  0xa76ad55a: mov    %ecx,0x8(%esp)
  0xa76ad55e: mov    %edx,0x4(%esp)
  0xa76ad562: mov    0xc(%esp),%edi
  0xa76ad566: mov    %edi,(%esp)
  0xa76ad569: mov    0x28(%ebx),%ecx
  0xa76ad56c: push   %eax
  0xa76ad56d: jmp    *%ecx

AHE@0xb6682500: 0xaa000000 i2c: 0xa76ad600 c2i: 0xa76ad690 c2iUV: 0xa76ad66f
i2c argument handler #0 for: receiver (Z)V (221 bytes generated)
c2i argument handler starts at 0xa76ad690
  0xa76ad600: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ad603: mov    $0xa75b1ac0,%edi
  0xa76ad608: cmp    %edi,%eax
  0xa76ad60a: jbe    0xa76ad61d
  0xa76ad610: mov    $0xa7691ac0,%edi
  0xa76ad615: cmp    %edi,%eax
  0xa76ad617: jb     0xa76ad648
  0xa76ad61d: mov    $0xa75af400,%edi
  0xa76ad622: cmp    %edi,%eax
  0xa76ad624: jbe    0xa76ad637
  0xa76ad62a: mov    $0xa75b1728,%edi
  0xa76ad62f: cmp    %edi,%eax
  0xa76ad631: jb     0xa76ad648
  ;; i2c adapter must return to an interpreter frame
  0xa76ad637: push   $0xb75a2830
  0xa76ad63c: call   0xa76ad641
  0xa76ad641: pusha  
  0xa76ad642: call   0xb7052f32
  0xa76ad647: hlt    
  ;; } verify_i2ce 
  0xa76ad648: mov    %esp,%edi
  0xa76ad64a: and    $0xfffffff0,%esp
  0xa76ad64d: push   %eax
  0xa76ad64e: mov    %edi,%eax
  0xa76ad650: mov    0x30(%ebx),%edi
  0xa76ad653: mov    0x8(%eax),%ecx
  0xa76ad656: mov    0x4(%eax),%edx
  0xa76ad659: mov    %esp,%eax
  0xa76ad65b: shr    $0xc,%eax
  0xa76ad65e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ad665: mov    %ebx,0x16c(%eax)
  0xa76ad66b: mov    %ebx,%eax
  0xa76ad66d: jmp    *%edi
  0xa76ad66f: mov    0x4(%ecx),%ebx
  0xa76ad672: cmp    0x8(%eax),%ebx
  0xa76ad675: mov    0x4(%eax),%ebx
  0xa76ad678: jne    0xa76ad68b
  0xa76ad67e: cmpl   $0x0,0x34(%ebx)
  0xa76ad685: je     0xa76ad6ca
  0xa76ad68b: jmp    0xa7692560
  0xa76ad690: cmpl   $0x0,0x34(%ebx)
  0xa76ad697: je     0xa76ad6ca
  0xa76ad69d: mov    (%esp),%eax
  0xa76ad6a0: pusha  
  0xa76ad6a1: pushf  
  0xa76ad6a2: sub    $0x10,%esp
  0xa76ad6a5: vmovsd %xmm0,(%esp)
  0xa76ad6aa: vmovsd %xmm1,0x8(%esp)
  0xa76ad6b0: push   %eax
  0xa76ad6b1: push   %ebx
  0xa76ad6b2: call   0xb71d62fc
  0xa76ad6b7: add    $0x8,%esp
  0xa76ad6ba: vmovsd (%esp),%xmm0
  0xa76ad6bf: vmovsd 0x8(%esp),%xmm1
  0xa76ad6c5: add    $0x10,%esp
  0xa76ad6c8: popf   
  0xa76ad6c9: popa   
  0xa76ad6ca: pop    %eax
  0xa76ad6cb: mov    %esp,%esi
  0xa76ad6cd: sub    $0x8,%esp
  0xa76ad6d0: mov    %ecx,0x4(%esp)
  0xa76ad6d4: mov    %edx,(%esp)
  0xa76ad6d7: mov    0x28(%ebx),%ecx
  0xa76ad6da: push   %eax
  0xa76ad6db: jmp    *%ecx

AHE@0xb6682524: 0xaa000000 i2c: 0xa76ad780 c2i: 0xa76ad810 c2iUV: 0xa76ad7ef
i2c argument handler #0 for: static (Ljava/lang/Class;Ljava/io/File;)Z (221 bytes generated)
c2i argument handler starts at 0xa76ad810
  0xa76ad780: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ad783: mov    $0xa75b1ac0,%edi
  0xa76ad788: cmp    %edi,%eax
  0xa76ad78a: jbe    0xa76ad79d
  0xa76ad790: mov    $0xa7691ac0,%edi
  0xa76ad795: cmp    %edi,%eax
  0xa76ad797: jb     0xa76ad7c8
  0xa76ad79d: mov    $0xa75af400,%edi
  0xa76ad7a2: cmp    %edi,%eax
  0xa76ad7a4: jbe    0xa76ad7b7
  0xa76ad7aa: mov    $0xa75b1728,%edi
  0xa76ad7af: cmp    %edi,%eax
  0xa76ad7b1: jb     0xa76ad7c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ad7b7: push   $0xb75a2830
  0xa76ad7bc: call   0xa76ad7c1
  0xa76ad7c1: pusha  
  0xa76ad7c2: call   0xb7052f32
  0xa76ad7c7: hlt    
  ;; } verify_i2ce 
  0xa76ad7c8: mov    %esp,%edi
  0xa76ad7ca: and    $0xfffffff0,%esp
  0xa76ad7cd: push   %eax
  0xa76ad7ce: mov    %edi,%eax
  0xa76ad7d0: mov    0x30(%ebx),%edi
  0xa76ad7d3: mov    0x8(%eax),%ecx
  0xa76ad7d6: mov    0x4(%eax),%edx
  0xa76ad7d9: mov    %esp,%eax
  0xa76ad7db: shr    $0xc,%eax
  0xa76ad7de: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ad7e5: mov    %ebx,0x16c(%eax)
  0xa76ad7eb: mov    %ebx,%eax
  0xa76ad7ed: jmp    *%edi
  0xa76ad7ef: mov    0x4(%ecx),%ebx
  0xa76ad7f2: cmp    0x8(%eax),%ebx
  0xa76ad7f5: mov    0x4(%eax),%ebx
  0xa76ad7f8: jne    0xa76ad80b
  0xa76ad7fe: cmpl   $0x0,0x34(%ebx)
  0xa76ad805: je     0xa76ad84a
  0xa76ad80b: jmp    0xa7692560
  0xa76ad810: cmpl   $0x0,0x34(%ebx)
  0xa76ad817: je     0xa76ad84a
  0xa76ad81d: mov    (%esp),%eax
  0xa76ad820: pusha  
  0xa76ad821: pushf  
  0xa76ad822: sub    $0x10,%esp
  0xa76ad825: vmovsd %xmm0,(%esp)
  0xa76ad82a: vmovsd %xmm1,0x8(%esp)
  0xa76ad830: push   %eax
  0xa76ad831: push   %ebx
  0xa76ad832: call   0xb71d62fc
  0xa76ad837: add    $0x8,%esp
  0xa76ad83a: vmovsd (%esp),%xmm0
  0xa76ad83f: vmovsd 0x8(%esp),%xmm1
  0xa76ad845: add    $0x10,%esp
  0xa76ad848: popf   
  0xa76ad849: popa   
  0xa76ad84a: pop    %eax
  0xa76ad84b: mov    %esp,%esi
  0xa76ad84d: sub    $0x8,%esp
  0xa76ad850: mov    %ecx,0x4(%esp)
  0xa76ad854: mov    %edx,(%esp)
  0xa76ad857: mov    0x28(%ebx),%ecx
  0xa76ad85a: push   %eax
  0xa76ad85b: jmp    *%ecx

AHE@0xb6682548: 0xa0000000 i2c: 0xa76ad900 c2i: 0xa76ad98d c2iUV: 0xa76ad96c
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/lang/String; (214 bytes generated)
c2i argument handler starts at 0xa76ad98d
  0xa76ad900: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ad903: mov    $0xa75b1ac0,%edi
  0xa76ad908: cmp    %edi,%eax
  0xa76ad90a: jbe    0xa76ad91d
  0xa76ad910: mov    $0xa7691ac0,%edi
  0xa76ad915: cmp    %edi,%eax
  0xa76ad917: jb     0xa76ad948
  0xa76ad91d: mov    $0xa75af400,%edi
  0xa76ad922: cmp    %edi,%eax
  0xa76ad924: jbe    0xa76ad937
  0xa76ad92a: mov    $0xa75b1728,%edi
  0xa76ad92f: cmp    %edi,%eax
  0xa76ad931: jb     0xa76ad948
  ;; i2c adapter must return to an interpreter frame
  0xa76ad937: push   $0xb75a2830
  0xa76ad93c: call   0xa76ad941
  0xa76ad941: pusha  
  0xa76ad942: call   0xb7052f32
  0xa76ad947: hlt    
  ;; } verify_i2ce 
  0xa76ad948: mov    %esp,%edi
  0xa76ad94a: and    $0xfffffff0,%esp
  0xa76ad94d: push   %eax
  0xa76ad94e: mov    %edi,%eax
  0xa76ad950: mov    0x30(%ebx),%edi
  0xa76ad953: mov    0x4(%eax),%ecx
  0xa76ad956: mov    %esp,%eax
  0xa76ad958: shr    $0xc,%eax
  0xa76ad95b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ad962: mov    %ebx,0x16c(%eax)
  0xa76ad968: mov    %ebx,%eax
  0xa76ad96a: jmp    *%edi
  0xa76ad96c: mov    0x4(%ecx),%ebx
  0xa76ad96f: cmp    0x8(%eax),%ebx
  0xa76ad972: mov    0x4(%eax),%ebx
  0xa76ad975: jne    0xa76ad988
  0xa76ad97b: cmpl   $0x0,0x34(%ebx)
  0xa76ad982: je     0xa76ad9c7
  0xa76ad988: jmp    0xa7692560
  0xa76ad98d: cmpl   $0x0,0x34(%ebx)
  0xa76ad994: je     0xa76ad9c7
  0xa76ad99a: mov    (%esp),%eax
  0xa76ad99d: pusha  
  0xa76ad99e: pushf  
  0xa76ad99f: sub    $0x10,%esp
  0xa76ad9a2: vmovsd %xmm0,(%esp)
  0xa76ad9a7: vmovsd %xmm1,0x8(%esp)
  0xa76ad9ad: push   %eax
  0xa76ad9ae: push   %ebx
  0xa76ad9af: call   0xb71d62fc
  0xa76ad9b4: add    $0x8,%esp
  0xa76ad9b7: vmovsd (%esp),%xmm0
  0xa76ad9bc: vmovsd 0x8(%esp),%xmm1
  0xa76ad9c2: add    $0x10,%esp
  0xa76ad9c5: popf   
  0xa76ad9c6: popa   
  0xa76ad9c7: pop    %eax
  0xa76ad9c8: mov    %esp,%esi
  0xa76ad9ca: sub    $0x4,%esp
  0xa76ad9cd: mov    %ecx,(%esp)
  0xa76ad9d0: mov    0x28(%ebx),%ecx
  0xa76ad9d3: push   %eax
  0xa76ad9d4: jmp    *%ecx

AHE@0xb668256c: 0xaaa00000 i2c: 0xa76ada80 c2i: 0xa76adb1a c2iUV: 0xa76adaf9
i2c argument handler #0 for: static (Ljava/lang/Class;Ljava/lang/String;Z)V (239 bytes generated)
c2i argument handler starts at 0xa76adb1a
  0xa76ada80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ada83: mov    $0xa75b1ac0,%edi
  0xa76ada88: cmp    %edi,%eax
  0xa76ada8a: jbe    0xa76ada9d
  0xa76ada90: mov    $0xa7691ac0,%edi
  0xa76ada95: cmp    %edi,%eax
  0xa76ada97: jb     0xa76adac8
  0xa76ada9d: mov    $0xa75af400,%edi
  0xa76adaa2: cmp    %edi,%eax
  0xa76adaa4: jbe    0xa76adab7
  0xa76adaaa: mov    $0xa75b1728,%edi
  0xa76adaaf: cmp    %edi,%eax
  0xa76adab1: jb     0xa76adac8
  ;; i2c adapter must return to an interpreter frame
  0xa76adab7: push   $0xb75a2830
  0xa76adabc: call   0xa76adac1
  0xa76adac1: pusha  
  0xa76adac2: call   0xb7052f32
  0xa76adac7: hlt    
  ;; } verify_i2ce 
  0xa76adac8: mov    %esp,%edi
  0xa76adaca: sub    $0x8,%esp
  0xa76adacd: and    $0xfffffff0,%esp
  0xa76adad0: push   %eax
  0xa76adad1: mov    %edi,%eax
  0xa76adad3: mov    0x30(%ebx),%edi
  0xa76adad6: mov    0xc(%eax),%ecx
  0xa76adad9: mov    0x8(%eax),%edx
  0xa76adadc: mov    0x4(%eax),%esi
  0xa76adadf: mov    %esi,0x4(%esp)
  0xa76adae3: mov    %esp,%eax
  0xa76adae5: shr    $0xc,%eax
  0xa76adae8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76adaef: mov    %ebx,0x16c(%eax)
  0xa76adaf5: mov    %ebx,%eax
  0xa76adaf7: jmp    *%edi
  0xa76adaf9: mov    0x4(%ecx),%ebx
  0xa76adafc: cmp    0x8(%eax),%ebx
  0xa76adaff: mov    0x4(%eax),%ebx
  0xa76adb02: jne    0xa76adb15
  0xa76adb08: cmpl   $0x0,0x34(%ebx)
  0xa76adb0f: je     0xa76adb54
  0xa76adb15: jmp    0xa7692560
  0xa76adb1a: cmpl   $0x0,0x34(%ebx)
  0xa76adb21: je     0xa76adb54
  0xa76adb27: mov    (%esp),%eax
  0xa76adb2a: pusha  
  0xa76adb2b: pushf  
  0xa76adb2c: sub    $0x10,%esp
  0xa76adb2f: vmovsd %xmm0,(%esp)
  0xa76adb34: vmovsd %xmm1,0x8(%esp)
  0xa76adb3a: push   %eax
  0xa76adb3b: push   %ebx
  0xa76adb3c: call   0xb71d62fc
  0xa76adb41: add    $0x8,%esp
  0xa76adb44: vmovsd (%esp),%xmm0
  0xa76adb49: vmovsd 0x8(%esp),%xmm1
  0xa76adb4f: add    $0x10,%esp
  0xa76adb52: popf   
  0xa76adb53: popa   
  0xa76adb54: pop    %eax
  0xa76adb55: mov    %esp,%esi
  0xa76adb57: sub    $0xc,%esp
  0xa76adb5a: mov    %ecx,0x8(%esp)
  0xa76adb5e: mov    %edx,0x4(%esp)
  0xa76adb62: mov    0xc(%esp),%edi
  0xa76adb66: mov    %edi,(%esp)
  0xa76adb69: mov    0x28(%ebx),%ecx
  0xa76adb6c: push   %eax
  0xa76adb6d: jmp    *%ecx

AHE@0xb6682590: 0xa0000000 i2c: 0xa76adc00 c2i: 0xa76adc8d c2iUV: 0xa76adc6c
i2c argument handler #0 for: static (Ljava/lang/String;)[Ljava/lang/String; (214 bytes generated)
c2i argument handler starts at 0xa76adc8d
  0xa76adc00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76adc03: mov    $0xa75b1ac0,%edi
  0xa76adc08: cmp    %edi,%eax
  0xa76adc0a: jbe    0xa76adc1d
  0xa76adc10: mov    $0xa7691ac0,%edi
  0xa76adc15: cmp    %edi,%eax
  0xa76adc17: jb     0xa76adc48
  0xa76adc1d: mov    $0xa75af400,%edi
  0xa76adc22: cmp    %edi,%eax
  0xa76adc24: jbe    0xa76adc37
  0xa76adc2a: mov    $0xa75b1728,%edi
  0xa76adc2f: cmp    %edi,%eax
  0xa76adc31: jb     0xa76adc48
  ;; i2c adapter must return to an interpreter frame
  0xa76adc37: push   $0xb75a2830
  0xa76adc3c: call   0xa76adc41
  0xa76adc41: pusha  
  0xa76adc42: call   0xb7052f32
  0xa76adc47: hlt    
  ;; } verify_i2ce 
  0xa76adc48: mov    %esp,%edi
  0xa76adc4a: and    $0xfffffff0,%esp
  0xa76adc4d: push   %eax
  0xa76adc4e: mov    %edi,%eax
  0xa76adc50: mov    0x30(%ebx),%edi
  0xa76adc53: mov    0x4(%eax),%ecx
  0xa76adc56: mov    %esp,%eax
  0xa76adc58: shr    $0xc,%eax
  0xa76adc5b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76adc62: mov    %ebx,0x16c(%eax)
  0xa76adc68: mov    %ebx,%eax
  0xa76adc6a: jmp    *%edi
  0xa76adc6c: mov    0x4(%ecx),%ebx
  0xa76adc6f: cmp    0x8(%eax),%ebx
  0xa76adc72: mov    0x4(%eax),%ebx
  0xa76adc75: jne    0xa76adc88
  0xa76adc7b: cmpl   $0x0,0x34(%ebx)
  0xa76adc82: je     0xa76adcc7
  0xa76adc88: jmp    0xa7692560
  0xa76adc8d: cmpl   $0x0,0x34(%ebx)
  0xa76adc94: je     0xa76adcc7
  0xa76adc9a: mov    (%esp),%eax
  0xa76adc9d: pusha  
  0xa76adc9e: pushf  
  0xa76adc9f: sub    $0x10,%esp
  0xa76adca2: vmovsd %xmm0,(%esp)
  0xa76adca7: vmovsd %xmm1,0x8(%esp)
  0xa76adcad: push   %eax
  0xa76adcae: push   %ebx
  0xa76adcaf: call   0xb71d62fc
  0xa76adcb4: add    $0x8,%esp
  0xa76adcb7: vmovsd (%esp),%xmm0
  0xa76adcbc: vmovsd 0x8(%esp),%xmm1
  0xa76adcc2: add    $0x10,%esp
  0xa76adcc5: popf   
  0xa76adcc6: popa   
  0xa76adcc7: pop    %eax
  0xa76adcc8: mov    %esp,%esi
  0xa76adcca: sub    $0x4,%esp
  0xa76adccd: mov    %ecx,(%esp)
  0xa76adcd0: mov    0x28(%ebx),%ecx
  0xa76adcd3: push   %eax
  0xa76adcd4: jmp    *%ecx

AHE@0xb66825b4: 0xaa000000 i2c: 0xa76add80 c2i: 0xa76ade10 c2iUV: 0xa76addef
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/String; (221 bytes generated)
c2i argument handler starts at 0xa76ade10
  0xa76add80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76add83: mov    $0xa75b1ac0,%edi
  0xa76add88: cmp    %edi,%eax
  0xa76add8a: jbe    0xa76add9d
  0xa76add90: mov    $0xa7691ac0,%edi
  0xa76add95: cmp    %edi,%eax
  0xa76add97: jb     0xa76addc8
  0xa76add9d: mov    $0xa75af400,%edi
  0xa76adda2: cmp    %edi,%eax
  0xa76adda4: jbe    0xa76addb7
  0xa76addaa: mov    $0xa75b1728,%edi
  0xa76addaf: cmp    %edi,%eax
  0xa76addb1: jb     0xa76addc8
  ;; i2c adapter must return to an interpreter frame
  0xa76addb7: push   $0xb75a2830
  0xa76addbc: call   0xa76addc1
  0xa76addc1: pusha  
  0xa76addc2: call   0xb7052f32
  0xa76addc7: hlt    
  ;; } verify_i2ce 
  0xa76addc8: mov    %esp,%edi
  0xa76addca: and    $0xfffffff0,%esp
  0xa76addcd: push   %eax
  0xa76addce: mov    %edi,%eax
  0xa76addd0: mov    0x30(%ebx),%edi
  0xa76addd3: mov    0x8(%eax),%ecx
  0xa76addd6: mov    0x4(%eax),%edx
  0xa76addd9: mov    %esp,%eax
  0xa76adddb: shr    $0xc,%eax
  0xa76addde: mov    -0x486bdba0(,%eax,4),%eax
  0xa76adde5: mov    %ebx,0x16c(%eax)
  0xa76addeb: mov    %ebx,%eax
  0xa76added: jmp    *%edi
  0xa76addef: mov    0x4(%ecx),%ebx
  0xa76addf2: cmp    0x8(%eax),%ebx
  0xa76addf5: mov    0x4(%eax),%ebx
  0xa76addf8: jne    0xa76ade0b
  0xa76addfe: cmpl   $0x0,0x34(%ebx)
  0xa76ade05: je     0xa76ade4a
  0xa76ade0b: jmp    0xa7692560
  0xa76ade10: cmpl   $0x0,0x34(%ebx)
  0xa76ade17: je     0xa76ade4a
  0xa76ade1d: mov    (%esp),%eax
  0xa76ade20: pusha  
  0xa76ade21: pushf  
  0xa76ade22: sub    $0x10,%esp
  0xa76ade25: vmovsd %xmm0,(%esp)
  0xa76ade2a: vmovsd %xmm1,0x8(%esp)
  0xa76ade30: push   %eax
  0xa76ade31: push   %ebx
  0xa76ade32: call   0xb71d62fc
  0xa76ade37: add    $0x8,%esp
  0xa76ade3a: vmovsd (%esp),%xmm0
  0xa76ade3f: vmovsd 0x8(%esp),%xmm1
  0xa76ade45: add    $0x10,%esp
  0xa76ade48: popf   
  0xa76ade49: popa   
  0xa76ade4a: pop    %eax
  0xa76ade4b: mov    %esp,%esi
  0xa76ade4d: sub    $0x8,%esp
  0xa76ade50: mov    %ecx,0x4(%esp)
  0xa76ade54: mov    %edx,(%esp)
  0xa76ade57: mov    0x28(%ebx),%ecx
  0xa76ade5a: push   %eax
  0xa76ade5b: jmp    *%ecx

AHE@0xb66825d8: 0xa0000000 i2c: 0xa76adf00 c2i: 0xa76adf8d c2iUV: 0xa76adf6c
i2c argument handler #0 for: receiver ()[Ljava/lang/Package; (214 bytes generated)
c2i argument handler starts at 0xa76adf8d
  0xa76adf00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76adf03: mov    $0xa75b1ac0,%edi
  0xa76adf08: cmp    %edi,%eax
  0xa76adf0a: jbe    0xa76adf1d
  0xa76adf10: mov    $0xa7691ac0,%edi
  0xa76adf15: cmp    %edi,%eax
  0xa76adf17: jb     0xa76adf48
  0xa76adf1d: mov    $0xa75af400,%edi
  0xa76adf22: cmp    %edi,%eax
  0xa76adf24: jbe    0xa76adf37
  0xa76adf2a: mov    $0xa75b1728,%edi
  0xa76adf2f: cmp    %edi,%eax
  0xa76adf31: jb     0xa76adf48
  ;; i2c adapter must return to an interpreter frame
  0xa76adf37: push   $0xb75a2830
  0xa76adf3c: call   0xa76adf41
  0xa76adf41: pusha  
  0xa76adf42: call   0xb7052f32
  0xa76adf47: hlt    
  ;; } verify_i2ce 
  0xa76adf48: mov    %esp,%edi
  0xa76adf4a: and    $0xfffffff0,%esp
  0xa76adf4d: push   %eax
  0xa76adf4e: mov    %edi,%eax
  0xa76adf50: mov    0x30(%ebx),%edi
  0xa76adf53: mov    0x4(%eax),%ecx
  0xa76adf56: mov    %esp,%eax
  0xa76adf58: shr    $0xc,%eax
  0xa76adf5b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76adf62: mov    %ebx,0x16c(%eax)
  0xa76adf68: mov    %ebx,%eax
  0xa76adf6a: jmp    *%edi
  0xa76adf6c: mov    0x4(%ecx),%ebx
  0xa76adf6f: cmp    0x8(%eax),%ebx
  0xa76adf72: mov    0x4(%eax),%ebx
  0xa76adf75: jne    0xa76adf88
  0xa76adf7b: cmpl   $0x0,0x34(%ebx)
  0xa76adf82: je     0xa76adfc7
  0xa76adf88: jmp    0xa7692560
  0xa76adf8d: cmpl   $0x0,0x34(%ebx)
  0xa76adf94: je     0xa76adfc7
  0xa76adf9a: mov    (%esp),%eax
  0xa76adf9d: pusha  
  0xa76adf9e: pushf  
  0xa76adf9f: sub    $0x10,%esp
  0xa76adfa2: vmovsd %xmm0,(%esp)
  0xa76adfa7: vmovsd %xmm1,0x8(%esp)
  0xa76adfad: push   %eax
  0xa76adfae: push   %ebx
  0xa76adfaf: call   0xb71d62fc
  0xa76adfb4: add    $0x8,%esp
  0xa76adfb7: vmovsd (%esp),%xmm0
  0xa76adfbc: vmovsd 0x8(%esp),%xmm1
  0xa76adfc2: add    $0x10,%esp
  0xa76adfc5: popf   
  0xa76adfc6: popa   
  0xa76adfc7: pop    %eax
  0xa76adfc8: mov    %esp,%esi
  0xa76adfca: sub    $0x4,%esp
  0xa76adfcd: mov    %ecx,(%esp)
  0xa76adfd0: mov    0x28(%ebx),%ecx
  0xa76adfd3: push   %eax
  0xa76adfd4: jmp    *%ecx

AHE@0xb66825fc: 0xaaaaaaaaa0000000 i2c: 0xa76ae080 c2i: 0xa76ae144 c2iUV: 0xa76ae123
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package; (329 bytes generated)
c2i argument handler starts at 0xa76ae144
  0xa76ae080: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ae083: mov    $0xa75b1ac0,%edi
  0xa76ae088: cmp    %edi,%eax
  0xa76ae08a: jbe    0xa76ae09d
  0xa76ae090: mov    $0xa7691ac0,%edi
  0xa76ae095: cmp    %edi,%eax
  0xa76ae097: jb     0xa76ae0c8
  0xa76ae09d: mov    $0xa75af400,%edi
  0xa76ae0a2: cmp    %edi,%eax
  0xa76ae0a4: jbe    0xa76ae0b7
  0xa76ae0aa: mov    $0xa75b1728,%edi
  0xa76ae0af: cmp    %edi,%eax
  0xa76ae0b1: jb     0xa76ae0c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ae0b7: push   $0xb75a2830
  0xa76ae0bc: call   0xa76ae0c1
  0xa76ae0c1: pusha  
  0xa76ae0c2: call   0xb7052f32
  0xa76ae0c7: hlt    
  ;; } verify_i2ce 
  0xa76ae0c8: mov    %esp,%edi
  0xa76ae0ca: sub    $0x20,%esp
  0xa76ae0cd: and    $0xfffffff0,%esp
  0xa76ae0d0: push   %eax
  0xa76ae0d1: mov    %edi,%eax
  0xa76ae0d3: mov    0x30(%ebx),%edi
  0xa76ae0d6: mov    0x24(%eax),%ecx
  0xa76ae0d9: mov    0x20(%eax),%edx
  0xa76ae0dc: mov    0x1c(%eax),%esi
  0xa76ae0df: mov    %esi,0x4(%esp)
  0xa76ae0e3: mov    0x18(%eax),%esi
  0xa76ae0e6: mov    %esi,0x8(%esp)
  0xa76ae0ea: mov    0x14(%eax),%esi
  0xa76ae0ed: mov    %esi,0xc(%esp)
  0xa76ae0f1: mov    0x10(%eax),%esi
  0xa76ae0f4: mov    %esi,0x10(%esp)
  0xa76ae0f8: mov    0xc(%eax),%esi
  0xa76ae0fb: mov    %esi,0x14(%esp)
  0xa76ae0ff: mov    0x8(%eax),%esi
  0xa76ae102: mov    %esi,0x18(%esp)
  0xa76ae106: mov    0x4(%eax),%esi
  0xa76ae109: mov    %esi,0x1c(%esp)
  0xa76ae10d: mov    %esp,%eax
  0xa76ae10f: shr    $0xc,%eax
  0xa76ae112: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ae119: mov    %ebx,0x16c(%eax)
  0xa76ae11f: mov    %ebx,%eax
  0xa76ae121: jmp    *%edi
  0xa76ae123: mov    0x4(%ecx),%ebx
  0xa76ae126: cmp    0x8(%eax),%ebx
  0xa76ae129: mov    0x4(%eax),%ebx
  0xa76ae12c: jne    0xa76ae13f
  0xa76ae132: cmpl   $0x0,0x34(%ebx)
  0xa76ae139: je     0xa76ae17e
  0xa76ae13f: jmp    0xa7692560
  0xa76ae144: cmpl   $0x0,0x34(%ebx)
  0xa76ae14b: je     0xa76ae17e
  0xa76ae151: mov    (%esp),%eax
  0xa76ae154: pusha  
  0xa76ae155: pushf  
  0xa76ae156: sub    $0x10,%esp
  0xa76ae159: vmovsd %xmm0,(%esp)
  0xa76ae15e: vmovsd %xmm1,0x8(%esp)
  0xa76ae164: push   %eax
  0xa76ae165: push   %ebx
  0xa76ae166: call   0xb71d62fc
  0xa76ae16b: add    $0x8,%esp
  0xa76ae16e: vmovsd (%esp),%xmm0
  0xa76ae173: vmovsd 0x8(%esp),%xmm1
  0xa76ae179: add    $0x10,%esp
  0xa76ae17c: popf   
  0xa76ae17d: popa   
  0xa76ae17e: pop    %eax
  0xa76ae17f: mov    %esp,%esi
  0xa76ae181: sub    $0x24,%esp
  0xa76ae184: mov    %ecx,0x20(%esp)
  0xa76ae188: mov    %edx,0x1c(%esp)
  0xa76ae18c: mov    0x24(%esp),%edi
  0xa76ae190: mov    %edi,0x18(%esp)
  0xa76ae194: mov    0x28(%esp),%edi
  0xa76ae198: mov    %edi,0x14(%esp)
  0xa76ae19c: mov    0x2c(%esp),%edi
  0xa76ae1a0: mov    %edi,0x10(%esp)
  0xa76ae1a4: mov    0x30(%esp),%edi
  0xa76ae1a8: mov    %edi,0xc(%esp)
  0xa76ae1ac: mov    0x34(%esp),%edi
  0xa76ae1b0: mov    %edi,0x8(%esp)
  0xa76ae1b4: mov    0x38(%esp),%edi
  0xa76ae1b8: mov    %edi,0x4(%esp)
  0xa76ae1bc: mov    0x3c(%esp),%edi
  0xa76ae1c0: mov    %edi,(%esp)
  0xa76ae1c3: mov    0x28(%ebx),%ecx
  0xa76ae1c6: push   %eax
  0xa76ae1c7: jmp    *%ecx

AHE@0xb6682620: 0xaa000000 i2c: 0xa76ae280 c2i: 0xa76ae310 c2iUV: 0xa76ae2ef
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z (221 bytes generated)
c2i argument handler starts at 0xa76ae310
  0xa76ae280: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ae283: mov    $0xa75b1ac0,%edi
  0xa76ae288: cmp    %edi,%eax
  0xa76ae28a: jbe    0xa76ae29d
  0xa76ae290: mov    $0xa7691ac0,%edi
  0xa76ae295: cmp    %edi,%eax
  0xa76ae297: jb     0xa76ae2c8
  0xa76ae29d: mov    $0xa75af400,%edi
  0xa76ae2a2: cmp    %edi,%eax
  0xa76ae2a4: jbe    0xa76ae2b7
  0xa76ae2aa: mov    $0xa75b1728,%edi
  0xa76ae2af: cmp    %edi,%eax
  0xa76ae2b1: jb     0xa76ae2c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ae2b7: push   $0xb75a2830
  0xa76ae2bc: call   0xa76ae2c1
  0xa76ae2c1: pusha  
  0xa76ae2c2: call   0xb7052f32
  0xa76ae2c7: hlt    
  ;; } verify_i2ce 
  0xa76ae2c8: mov    %esp,%edi
  0xa76ae2ca: and    $0xfffffff0,%esp
  0xa76ae2cd: push   %eax
  0xa76ae2ce: mov    %edi,%eax
  0xa76ae2d0: mov    0x30(%ebx),%edi
  0xa76ae2d3: mov    0x8(%eax),%ecx
  0xa76ae2d6: mov    0x4(%eax),%edx
  0xa76ae2d9: mov    %esp,%eax
  0xa76ae2db: shr    $0xc,%eax
  0xa76ae2de: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ae2e5: mov    %ebx,0x16c(%eax)
  0xa76ae2eb: mov    %ebx,%eax
  0xa76ae2ed: jmp    *%edi
  0xa76ae2ef: mov    0x4(%ecx),%ebx
  0xa76ae2f2: cmp    0x8(%eax),%ebx
  0xa76ae2f5: mov    0x4(%eax),%ebx
  0xa76ae2f8: jne    0xa76ae30b
  0xa76ae2fe: cmpl   $0x0,0x34(%ebx)
  0xa76ae305: je     0xa76ae34a
  0xa76ae30b: jmp    0xa7692560
  0xa76ae310: cmpl   $0x0,0x34(%ebx)
  0xa76ae317: je     0xa76ae34a
  0xa76ae31d: mov    (%esp),%eax
  0xa76ae320: pusha  
  0xa76ae321: pushf  
  0xa76ae322: sub    $0x10,%esp
  0xa76ae325: vmovsd %xmm0,(%esp)
  0xa76ae32a: vmovsd %xmm1,0x8(%esp)
  0xa76ae330: push   %eax
  0xa76ae331: push   %ebx
  0xa76ae332: call   0xb71d62fc
  0xa76ae337: add    $0x8,%esp
  0xa76ae33a: vmovsd (%esp),%xmm0
  0xa76ae33f: vmovsd 0x8(%esp),%xmm1
  0xa76ae345: add    $0x10,%esp
  0xa76ae348: popf   
  0xa76ae349: popa   
  0xa76ae34a: pop    %eax
  0xa76ae34b: mov    %esp,%esi
  0xa76ae34d: sub    $0x8,%esp
  0xa76ae350: mov    %ecx,0x4(%esp)
  0xa76ae354: mov    %edx,(%esp)
  0xa76ae357: mov    0x28(%ebx),%ecx
  0xa76ae35a: push   %eax
  0xa76ae35b: jmp    *%ecx

AHE@0xb6682644: 0xaa000000 i2c: 0xa76ae400 c2i: 0xa76ae490 c2iUV: 0xa76ae46f
i2c argument handler #0 for: receiver (Ljava/lang/ClassLoader;)Z (221 bytes generated)
c2i argument handler starts at 0xa76ae490
  0xa76ae400: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ae403: mov    $0xa75b1ac0,%edi
  0xa76ae408: cmp    %edi,%eax
  0xa76ae40a: jbe    0xa76ae41d
  0xa76ae410: mov    $0xa7691ac0,%edi
  0xa76ae415: cmp    %edi,%eax
  0xa76ae417: jb     0xa76ae448
  0xa76ae41d: mov    $0xa75af400,%edi
  0xa76ae422: cmp    %edi,%eax
  0xa76ae424: jbe    0xa76ae437
  0xa76ae42a: mov    $0xa75b1728,%edi
  0xa76ae42f: cmp    %edi,%eax
  0xa76ae431: jb     0xa76ae448
  ;; i2c adapter must return to an interpreter frame
  0xa76ae437: push   $0xb75a2830
  0xa76ae43c: call   0xa76ae441
  0xa76ae441: pusha  
  0xa76ae442: call   0xb7052f32
  0xa76ae447: hlt    
  ;; } verify_i2ce 
  0xa76ae448: mov    %esp,%edi
  0xa76ae44a: and    $0xfffffff0,%esp
  0xa76ae44d: push   %eax
  0xa76ae44e: mov    %edi,%eax
  0xa76ae450: mov    0x30(%ebx),%edi
  0xa76ae453: mov    0x8(%eax),%ecx
  0xa76ae456: mov    0x4(%eax),%edx
  0xa76ae459: mov    %esp,%eax
  0xa76ae45b: shr    $0xc,%eax
  0xa76ae45e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ae465: mov    %ebx,0x16c(%eax)
  0xa76ae46b: mov    %ebx,%eax
  0xa76ae46d: jmp    *%edi
  0xa76ae46f: mov    0x4(%ecx),%ebx
  0xa76ae472: cmp    0x8(%eax),%ebx
  0xa76ae475: mov    0x4(%eax),%ebx
  0xa76ae478: jne    0xa76ae48b
  0xa76ae47e: cmpl   $0x0,0x34(%ebx)
  0xa76ae485: je     0xa76ae4ca
  0xa76ae48b: jmp    0xa7692560
  0xa76ae490: cmpl   $0x0,0x34(%ebx)
  0xa76ae497: je     0xa76ae4ca
  0xa76ae49d: mov    (%esp),%eax
  0xa76ae4a0: pusha  
  0xa76ae4a1: pushf  
  0xa76ae4a2: sub    $0x10,%esp
  0xa76ae4a5: vmovsd %xmm0,(%esp)
  0xa76ae4aa: vmovsd %xmm1,0x8(%esp)
  0xa76ae4b0: push   %eax
  0xa76ae4b1: push   %ebx
  0xa76ae4b2: call   0xb71d62fc
  0xa76ae4b7: add    $0x8,%esp
  0xa76ae4ba: vmovsd (%esp),%xmm0
  0xa76ae4bf: vmovsd 0x8(%esp),%xmm1
  0xa76ae4c5: add    $0x10,%esp
  0xa76ae4c8: popf   
  0xa76ae4c9: popa   
  0xa76ae4ca: pop    %eax
  0xa76ae4cb: mov    %esp,%esi
  0xa76ae4cd: sub    $0x8,%esp
  0xa76ae4d0: mov    %ecx,0x4(%esp)
  0xa76ae4d4: mov    %edx,(%esp)
  0xa76ae4d7: mov    0x28(%ebx),%ecx
  0xa76ae4da: push   %eax
  0xa76ae4db: jmp    *%ecx

AHE@0xb6682668: 0x i2c: 0xa76ae580 c2i: 0xa76ae60a c2iUV: 0xa76ae5e9
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76ae60a
  0xa76ae580: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ae583: mov    $0xa75b1ac0,%edi
  0xa76ae588: cmp    %edi,%eax
  0xa76ae58a: jbe    0xa76ae59d
  0xa76ae590: mov    $0xa7691ac0,%edi
  0xa76ae595: cmp    %edi,%eax
  0xa76ae597: jb     0xa76ae5c8
  0xa76ae59d: mov    $0xa75af400,%edi
  0xa76ae5a2: cmp    %edi,%eax
  0xa76ae5a4: jbe    0xa76ae5b7
  0xa76ae5aa: mov    $0xa75b1728,%edi
  0xa76ae5af: cmp    %edi,%eax
  0xa76ae5b1: jb     0xa76ae5c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ae5b7: push   $0xb75a2830
  0xa76ae5bc: call   0xa76ae5c1
  0xa76ae5c1: pusha  
  0xa76ae5c2: call   0xb7052f32
  0xa76ae5c7: hlt    
  ;; } verify_i2ce 
  0xa76ae5c8: mov    %esp,%edi
  0xa76ae5ca: and    $0xfffffff0,%esp
  0xa76ae5cd: push   %eax
  0xa76ae5ce: mov    %edi,%eax
  0xa76ae5d0: mov    0x30(%ebx),%edi
  0xa76ae5d3: mov    %esp,%eax
  0xa76ae5d5: shr    $0xc,%eax
  0xa76ae5d8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ae5df: mov    %ebx,0x16c(%eax)
  0xa76ae5e5: mov    %ebx,%eax
  0xa76ae5e7: jmp    *%edi
  0xa76ae5e9: mov    0x4(%ecx),%ebx
  0xa76ae5ec: cmp    0x8(%eax),%ebx
  0xa76ae5ef: mov    0x4(%eax),%ebx
  0xa76ae5f2: jne    0xa76ae605
  0xa76ae5f8: cmpl   $0x0,0x34(%ebx)
  0xa76ae5ff: je     0xa76ae644
  0xa76ae605: jmp    0xa7692560
  0xa76ae60a: cmpl   $0x0,0x34(%ebx)
  0xa76ae611: je     0xa76ae644
  0xa76ae617: mov    (%esp),%eax
  0xa76ae61a: pusha  
  0xa76ae61b: pushf  
  0xa76ae61c: sub    $0x10,%esp
  0xa76ae61f: vmovsd %xmm0,(%esp)
  0xa76ae624: vmovsd %xmm1,0x8(%esp)
  0xa76ae62a: push   %eax
  0xa76ae62b: push   %ebx
  0xa76ae62c: call   0xb71d62fc
  0xa76ae631: add    $0x8,%esp
  0xa76ae634: vmovsd (%esp),%xmm0
  0xa76ae639: vmovsd 0x8(%esp),%xmm1
  0xa76ae63f: add    $0x10,%esp
  0xa76ae642: popf   
  0xa76ae643: popa   
  0xa76ae644: pop    %eax
  0xa76ae645: mov    %esp,%esi
  0xa76ae647: sub    $0x0,%esp
  0xa76ae64a: mov    0x28(%ebx),%ecx
  0xa76ae64d: push   %eax
  0xa76ae64e: jmp    *%ecx

AHE@0xb668268c: 0x i2c: 0xa76ae700 c2i: 0xa76ae78a c2iUV: 0xa76ae769
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76ae78a
  0xa76ae700: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ae703: mov    $0xa75b1ac0,%edi
  0xa76ae708: cmp    %edi,%eax
  0xa76ae70a: jbe    0xa76ae71d
  0xa76ae710: mov    $0xa7691ac0,%edi
  0xa76ae715: cmp    %edi,%eax
  0xa76ae717: jb     0xa76ae748
  0xa76ae71d: mov    $0xa75af400,%edi
  0xa76ae722: cmp    %edi,%eax
  0xa76ae724: jbe    0xa76ae737
  0xa76ae72a: mov    $0xa75b1728,%edi
  0xa76ae72f: cmp    %edi,%eax
  0xa76ae731: jb     0xa76ae748
  ;; i2c adapter must return to an interpreter frame
  0xa76ae737: push   $0xb75a2830
  0xa76ae73c: call   0xa76ae741
  0xa76ae741: pusha  
  0xa76ae742: call   0xb7052f32
  0xa76ae747: hlt    
  ;; } verify_i2ce 
  0xa76ae748: mov    %esp,%edi
  0xa76ae74a: and    $0xfffffff0,%esp
  0xa76ae74d: push   %eax
  0xa76ae74e: mov    %edi,%eax
  0xa76ae750: mov    0x30(%ebx),%edi
  0xa76ae753: mov    %esp,%eax
  0xa76ae755: shr    $0xc,%eax
  0xa76ae758: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ae75f: mov    %ebx,0x16c(%eax)
  0xa76ae765: mov    %ebx,%eax
  0xa76ae767: jmp    *%edi
  0xa76ae769: mov    0x4(%ecx),%ebx
  0xa76ae76c: cmp    0x8(%eax),%ebx
  0xa76ae76f: mov    0x4(%eax),%ebx
  0xa76ae772: jne    0xa76ae785
  0xa76ae778: cmpl   $0x0,0x34(%ebx)
  0xa76ae77f: je     0xa76ae7c4
  0xa76ae785: jmp    0xa7692560
  0xa76ae78a: cmpl   $0x0,0x34(%ebx)
  0xa76ae791: je     0xa76ae7c4
  0xa76ae797: mov    (%esp),%eax
  0xa76ae79a: pusha  
  0xa76ae79b: pushf  
  0xa76ae79c: sub    $0x10,%esp
  0xa76ae79f: vmovsd %xmm0,(%esp)
  0xa76ae7a4: vmovsd %xmm1,0x8(%esp)
  0xa76ae7aa: push   %eax
  0xa76ae7ab: push   %ebx
  0xa76ae7ac: call   0xb71d62fc
  0xa76ae7b1: add    $0x8,%esp
  0xa76ae7b4: vmovsd (%esp),%xmm0
  0xa76ae7b9: vmovsd 0x8(%esp),%xmm1
  0xa76ae7bf: add    $0x10,%esp
  0xa76ae7c2: popf   
  0xa76ae7c3: popa   
  0xa76ae7c4: pop    %eax
  0xa76ae7c5: mov    %esp,%esi
  0xa76ae7c7: sub    $0x0,%esp
  0xa76ae7ca: mov    0x28(%ebx),%ecx
  0xa76ae7cd: push   %eax
  0xa76ae7ce: jmp    *%ecx

AHE@0xb66826b0: 0xa0000000 i2c: 0xa76ae880 c2i: 0xa76ae90d c2iUV: 0xa76ae8ec
i2c argument handler #0 for: receiver ()Ljava/lang/ClassLoader; (214 bytes generated)
c2i argument handler starts at 0xa76ae90d
  0xa76ae880: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ae883: mov    $0xa75b1ac0,%edi
  0xa76ae888: cmp    %edi,%eax
  0xa76ae88a: jbe    0xa76ae89d
  0xa76ae890: mov    $0xa7691ac0,%edi
  0xa76ae895: cmp    %edi,%eax
  0xa76ae897: jb     0xa76ae8c8
  0xa76ae89d: mov    $0xa75af400,%edi
  0xa76ae8a2: cmp    %edi,%eax
  0xa76ae8a4: jbe    0xa76ae8b7
  0xa76ae8aa: mov    $0xa75b1728,%edi
  0xa76ae8af: cmp    %edi,%eax
  0xa76ae8b1: jb     0xa76ae8c8
  ;; i2c adapter must return to an interpreter frame
  0xa76ae8b7: push   $0xb75a2830
  0xa76ae8bc: call   0xa76ae8c1
  0xa76ae8c1: pusha  
  0xa76ae8c2: call   0xb7052f32
  0xa76ae8c7: hlt    
  ;; } verify_i2ce 
  0xa76ae8c8: mov    %esp,%edi
  0xa76ae8ca: and    $0xfffffff0,%esp
  0xa76ae8cd: push   %eax
  0xa76ae8ce: mov    %edi,%eax
  0xa76ae8d0: mov    0x30(%ebx),%edi
  0xa76ae8d3: mov    0x4(%eax),%ecx
  0xa76ae8d6: mov    %esp,%eax
  0xa76ae8d8: shr    $0xc,%eax
  0xa76ae8db: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ae8e2: mov    %ebx,0x16c(%eax)
  0xa76ae8e8: mov    %ebx,%eax
  0xa76ae8ea: jmp    *%edi
  0xa76ae8ec: mov    0x4(%ecx),%ebx
  0xa76ae8ef: cmp    0x8(%eax),%ebx
  0xa76ae8f2: mov    0x4(%eax),%ebx
  0xa76ae8f5: jne    0xa76ae908
  0xa76ae8fb: cmpl   $0x0,0x34(%ebx)
  0xa76ae902: je     0xa76ae947
  0xa76ae908: jmp    0xa7692560
  0xa76ae90d: cmpl   $0x0,0x34(%ebx)
  0xa76ae914: je     0xa76ae947
  0xa76ae91a: mov    (%esp),%eax
  0xa76ae91d: pusha  
  0xa76ae91e: pushf  
  0xa76ae91f: sub    $0x10,%esp
  0xa76ae922: vmovsd %xmm0,(%esp)
  0xa76ae927: vmovsd %xmm1,0x8(%esp)
  0xa76ae92d: push   %eax
  0xa76ae92e: push   %ebx
  0xa76ae92f: call   0xb71d62fc
  0xa76ae934: add    $0x8,%esp
  0xa76ae937: vmovsd (%esp),%xmm0
  0xa76ae93c: vmovsd 0x8(%esp),%xmm1
  0xa76ae942: add    $0x10,%esp
  0xa76ae945: popf   
  0xa76ae946: popa   
  0xa76ae947: pop    %eax
  0xa76ae948: mov    %esp,%esi
  0xa76ae94a: sub    $0x4,%esp
  0xa76ae94d: mov    %ecx,(%esp)
  0xa76ae950: mov    0x28(%ebx),%ecx
  0xa76ae953: push   %eax
  0xa76ae954: jmp    *%ecx

AHE@0xb66826d4: 0x i2c: 0xa76aea00 c2i: 0xa76aea8a c2iUV: 0xa76aea69
i2c argument handler #0 for: static ()Lsun/misc/URLClassPath; (208 bytes generated)
c2i argument handler starts at 0xa76aea8a
  0xa76aea00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aea03: mov    $0xa75b1ac0,%edi
  0xa76aea08: cmp    %edi,%eax
  0xa76aea0a: jbe    0xa76aea1d
  0xa76aea10: mov    $0xa7691ac0,%edi
  0xa76aea15: cmp    %edi,%eax
  0xa76aea17: jb     0xa76aea48
  0xa76aea1d: mov    $0xa75af400,%edi
  0xa76aea22: cmp    %edi,%eax
  0xa76aea24: jbe    0xa76aea37
  0xa76aea2a: mov    $0xa75b1728,%edi
  0xa76aea2f: cmp    %edi,%eax
  0xa76aea31: jb     0xa76aea48
  ;; i2c adapter must return to an interpreter frame
  0xa76aea37: push   $0xb75a2830
  0xa76aea3c: call   0xa76aea41
  0xa76aea41: pusha  
  0xa76aea42: call   0xb7052f32
  0xa76aea47: hlt    
  ;; } verify_i2ce 
  0xa76aea48: mov    %esp,%edi
  0xa76aea4a: and    $0xfffffff0,%esp
  0xa76aea4d: push   %eax
  0xa76aea4e: mov    %edi,%eax
  0xa76aea50: mov    0x30(%ebx),%edi
  0xa76aea53: mov    %esp,%eax
  0xa76aea55: shr    $0xc,%eax
  0xa76aea58: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aea5f: mov    %ebx,0x16c(%eax)
  0xa76aea65: mov    %ebx,%eax
  0xa76aea67: jmp    *%edi
  0xa76aea69: mov    0x4(%ecx),%ebx
  0xa76aea6c: cmp    0x8(%eax),%ebx
  0xa76aea6f: mov    0x4(%eax),%ebx
  0xa76aea72: jne    0xa76aea85
  0xa76aea78: cmpl   $0x0,0x34(%ebx)
  0xa76aea7f: je     0xa76aeac4
  0xa76aea85: jmp    0xa7692560
  0xa76aea8a: cmpl   $0x0,0x34(%ebx)
  0xa76aea91: je     0xa76aeac4
  0xa76aea97: mov    (%esp),%eax
  0xa76aea9a: pusha  
  0xa76aea9b: pushf  
  0xa76aea9c: sub    $0x10,%esp
  0xa76aea9f: vmovsd %xmm0,(%esp)
  0xa76aeaa4: vmovsd %xmm1,0x8(%esp)
  0xa76aeaaa: push   %eax
  0xa76aeaab: push   %ebx
  0xa76aeaac: call   0xb71d62fc
  0xa76aeab1: add    $0x8,%esp
  0xa76aeab4: vmovsd (%esp),%xmm0
  0xa76aeab9: vmovsd 0x8(%esp),%xmm1
  0xa76aeabf: add    $0x10,%esp
  0xa76aeac2: popf   
  0xa76aeac3: popa   
  0xa76aeac4: pop    %eax
  0xa76aeac5: mov    %esp,%esi
  0xa76aeac7: sub    $0x0,%esp
  0xa76aeaca: mov    0x28(%ebx),%ecx
  0xa76aeacd: push   %eax
  0xa76aeace: jmp    *%ecx

AHE@0xb66826f8: 0xa0000000 i2c: 0xa76aeb80 c2i: 0xa76aec0d c2iUV: 0xa76aebec
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/util/Enumeration; (214 bytes generated)
c2i argument handler starts at 0xa76aec0d
  0xa76aeb80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aeb83: mov    $0xa75b1ac0,%edi
  0xa76aeb88: cmp    %edi,%eax
  0xa76aeb8a: jbe    0xa76aeb9d
  0xa76aeb90: mov    $0xa7691ac0,%edi
  0xa76aeb95: cmp    %edi,%eax
  0xa76aeb97: jb     0xa76aebc8
  0xa76aeb9d: mov    $0xa75af400,%edi
  0xa76aeba2: cmp    %edi,%eax
  0xa76aeba4: jbe    0xa76aebb7
  0xa76aebaa: mov    $0xa75b1728,%edi
  0xa76aebaf: cmp    %edi,%eax
  0xa76aebb1: jb     0xa76aebc8
  ;; i2c adapter must return to an interpreter frame
  0xa76aebb7: push   $0xb75a2830
  0xa76aebbc: call   0xa76aebc1
  0xa76aebc1: pusha  
  0xa76aebc2: call   0xb7052f32
  0xa76aebc7: hlt    
  ;; } verify_i2ce 
  0xa76aebc8: mov    %esp,%edi
  0xa76aebca: and    $0xfffffff0,%esp
  0xa76aebcd: push   %eax
  0xa76aebce: mov    %edi,%eax
  0xa76aebd0: mov    0x30(%ebx),%edi
  0xa76aebd3: mov    0x4(%eax),%ecx
  0xa76aebd6: mov    %esp,%eax
  0xa76aebd8: shr    $0xc,%eax
  0xa76aebdb: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aebe2: mov    %ebx,0x16c(%eax)
  0xa76aebe8: mov    %ebx,%eax
  0xa76aebea: jmp    *%edi
  0xa76aebec: mov    0x4(%ecx),%ebx
  0xa76aebef: cmp    0x8(%eax),%ebx
  0xa76aebf2: mov    0x4(%eax),%ebx
  0xa76aebf5: jne    0xa76aec08
  0xa76aebfb: cmpl   $0x0,0x34(%ebx)
  0xa76aec02: je     0xa76aec47
  0xa76aec08: jmp    0xa7692560
  0xa76aec0d: cmpl   $0x0,0x34(%ebx)
  0xa76aec14: je     0xa76aec47
  0xa76aec1a: mov    (%esp),%eax
  0xa76aec1d: pusha  
  0xa76aec1e: pushf  
  0xa76aec1f: sub    $0x10,%esp
  0xa76aec22: vmovsd %xmm0,(%esp)
  0xa76aec27: vmovsd %xmm1,0x8(%esp)
  0xa76aec2d: push   %eax
  0xa76aec2e: push   %ebx
  0xa76aec2f: call   0xb71d62fc
  0xa76aec34: add    $0x8,%esp
  0xa76aec37: vmovsd (%esp),%xmm0
  0xa76aec3c: vmovsd 0x8(%esp),%xmm1
  0xa76aec42: add    $0x10,%esp
  0xa76aec45: popf   
  0xa76aec46: popa   
  0xa76aec47: pop    %eax
  0xa76aec48: mov    %esp,%esi
  0xa76aec4a: sub    $0x4,%esp
  0xa76aec4d: mov    %ecx,(%esp)
  0xa76aec50: mov    0x28(%ebx),%ecx
  0xa76aec53: push   %eax
  0xa76aec54: jmp    *%ecx

AHE@0xb668271c: 0xa0000000 i2c: 0xa76aed00 c2i: 0xa76aed8d c2iUV: 0xa76aed6c
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/net/URL; (214 bytes generated)
c2i argument handler starts at 0xa76aed8d
  0xa76aed00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aed03: mov    $0xa75b1ac0,%edi
  0xa76aed08: cmp    %edi,%eax
  0xa76aed0a: jbe    0xa76aed1d
  0xa76aed10: mov    $0xa7691ac0,%edi
  0xa76aed15: cmp    %edi,%eax
  0xa76aed17: jb     0xa76aed48
  0xa76aed1d: mov    $0xa75af400,%edi
  0xa76aed22: cmp    %edi,%eax
  0xa76aed24: jbe    0xa76aed37
  0xa76aed2a: mov    $0xa75b1728,%edi
  0xa76aed2f: cmp    %edi,%eax
  0xa76aed31: jb     0xa76aed48
  ;; i2c adapter must return to an interpreter frame
  0xa76aed37: push   $0xb75a2830
  0xa76aed3c: call   0xa76aed41
  0xa76aed41: pusha  
  0xa76aed42: call   0xb7052f32
  0xa76aed47: hlt    
  ;; } verify_i2ce 
  0xa76aed48: mov    %esp,%edi
  0xa76aed4a: and    $0xfffffff0,%esp
  0xa76aed4d: push   %eax
  0xa76aed4e: mov    %edi,%eax
  0xa76aed50: mov    0x30(%ebx),%edi
  0xa76aed53: mov    0x4(%eax),%ecx
  0xa76aed56: mov    %esp,%eax
  0xa76aed58: shr    $0xc,%eax
  0xa76aed5b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aed62: mov    %ebx,0x16c(%eax)
  0xa76aed68: mov    %ebx,%eax
  0xa76aed6a: jmp    *%edi
  0xa76aed6c: mov    0x4(%ecx),%ebx
  0xa76aed6f: cmp    0x8(%eax),%ebx
  0xa76aed72: mov    0x4(%eax),%ebx
  0xa76aed75: jne    0xa76aed88
  0xa76aed7b: cmpl   $0x0,0x34(%ebx)
  0xa76aed82: je     0xa76aedc7
  0xa76aed88: jmp    0xa7692560
  0xa76aed8d: cmpl   $0x0,0x34(%ebx)
  0xa76aed94: je     0xa76aedc7
  0xa76aed9a: mov    (%esp),%eax
  0xa76aed9d: pusha  
  0xa76aed9e: pushf  
  0xa76aed9f: sub    $0x10,%esp
  0xa76aeda2: vmovsd %xmm0,(%esp)
  0xa76aeda7: vmovsd %xmm1,0x8(%esp)
  0xa76aedad: push   %eax
  0xa76aedae: push   %ebx
  0xa76aedaf: call   0xb71d62fc
  0xa76aedb4: add    $0x8,%esp
  0xa76aedb7: vmovsd (%esp),%xmm0
  0xa76aedbc: vmovsd 0x8(%esp),%xmm1
  0xa76aedc2: add    $0x10,%esp
  0xa76aedc5: popf   
  0xa76aedc6: popa   
  0xa76aedc7: pop    %eax
  0xa76aedc8: mov    %esp,%esi
  0xa76aedca: sub    $0x4,%esp
  0xa76aedcd: mov    %ecx,(%esp)
  0xa76aedd0: mov    0x28(%ebx),%ecx
  0xa76aedd3: push   %eax
  0xa76aedd4: jmp    *%ecx

AHE@0xb6682740: 0xa0000000 i2c: 0xa76aee80 c2i: 0xa76aef0d c2iUV: 0xa76aeeec
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/util/Enumeration; (214 bytes generated)
c2i argument handler starts at 0xa76aef0d
  0xa76aee80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aee83: mov    $0xa75b1ac0,%edi
  0xa76aee88: cmp    %edi,%eax
  0xa76aee8a: jbe    0xa76aee9d
  0xa76aee90: mov    $0xa7691ac0,%edi
  0xa76aee95: cmp    %edi,%eax
  0xa76aee97: jb     0xa76aeec8
  0xa76aee9d: mov    $0xa75af400,%edi
  0xa76aeea2: cmp    %edi,%eax
  0xa76aeea4: jbe    0xa76aeeb7
  0xa76aeeaa: mov    $0xa75b1728,%edi
  0xa76aeeaf: cmp    %edi,%eax
  0xa76aeeb1: jb     0xa76aeec8
  ;; i2c adapter must return to an interpreter frame
  0xa76aeeb7: push   $0xb75a2830
  0xa76aeebc: call   0xa76aeec1
  0xa76aeec1: pusha  
  0xa76aeec2: call   0xb7052f32
  0xa76aeec7: hlt    
  ;; } verify_i2ce 
  0xa76aeec8: mov    %esp,%edi
  0xa76aeeca: and    $0xfffffff0,%esp
  0xa76aeecd: push   %eax
  0xa76aeece: mov    %edi,%eax
  0xa76aeed0: mov    0x30(%ebx),%edi
  0xa76aeed3: mov    0x4(%eax),%ecx
  0xa76aeed6: mov    %esp,%eax
  0xa76aeed8: shr    $0xc,%eax
  0xa76aeedb: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aeee2: mov    %ebx,0x16c(%eax)
  0xa76aeee8: mov    %ebx,%eax
  0xa76aeeea: jmp    *%edi
  0xa76aeeec: mov    0x4(%ecx),%ebx
  0xa76aeeef: cmp    0x8(%eax),%ebx
  0xa76aeef2: mov    0x4(%eax),%ebx
  0xa76aeef5: jne    0xa76aef08
  0xa76aeefb: cmpl   $0x0,0x34(%ebx)
  0xa76aef02: je     0xa76aef47
  0xa76aef08: jmp    0xa7692560
  0xa76aef0d: cmpl   $0x0,0x34(%ebx)
  0xa76aef14: je     0xa76aef47
  0xa76aef1a: mov    (%esp),%eax
  0xa76aef1d: pusha  
  0xa76aef1e: pushf  
  0xa76aef1f: sub    $0x10,%esp
  0xa76aef22: vmovsd %xmm0,(%esp)
  0xa76aef27: vmovsd %xmm1,0x8(%esp)
  0xa76aef2d: push   %eax
  0xa76aef2e: push   %ebx
  0xa76aef2f: call   0xb71d62fc
  0xa76aef34: add    $0x8,%esp
  0xa76aef37: vmovsd (%esp),%xmm0
  0xa76aef3c: vmovsd 0x8(%esp),%xmm1
  0xa76aef42: add    $0x10,%esp
  0xa76aef45: popf   
  0xa76aef46: popa   
  0xa76aef47: pop    %eax
  0xa76aef48: mov    %esp,%esi
  0xa76aef4a: sub    $0x4,%esp
  0xa76aef4d: mov    %ecx,(%esp)
  0xa76aef50: mov    0x28(%ebx),%ecx
  0xa76aef53: push   %eax
  0xa76aef54: jmp    *%ecx

AHE@0xb6682764: 0x i2c: 0xa76af000 c2i: 0xa76af08a c2iUV: 0xa76af069
i2c argument handler #0 for: static ()Z (208 bytes generated)
c2i argument handler starts at 0xa76af08a
  0xa76af000: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76af003: mov    $0xa75b1ac0,%edi
  0xa76af008: cmp    %edi,%eax
  0xa76af00a: jbe    0xa76af01d
  0xa76af010: mov    $0xa7691ac0,%edi
  0xa76af015: cmp    %edi,%eax
  0xa76af017: jb     0xa76af048
  0xa76af01d: mov    $0xa75af400,%edi
  0xa76af022: cmp    %edi,%eax
  0xa76af024: jbe    0xa76af037
  0xa76af02a: mov    $0xa75b1728,%edi
  0xa76af02f: cmp    %edi,%eax
  0xa76af031: jb     0xa76af048
  ;; i2c adapter must return to an interpreter frame
  0xa76af037: push   $0xb75a2830
  0xa76af03c: call   0xa76af041
  0xa76af041: pusha  
  0xa76af042: call   0xb7052f32
  0xa76af047: hlt    
  ;; } verify_i2ce 
  0xa76af048: mov    %esp,%edi
  0xa76af04a: and    $0xfffffff0,%esp
  0xa76af04d: push   %eax
  0xa76af04e: mov    %edi,%eax
  0xa76af050: mov    0x30(%ebx),%edi
  0xa76af053: mov    %esp,%eax
  0xa76af055: shr    $0xc,%eax
  0xa76af058: mov    -0x486bdba0(,%eax,4),%eax
  0xa76af05f: mov    %ebx,0x16c(%eax)
  0xa76af065: mov    %ebx,%eax
  0xa76af067: jmp    *%edi
  0xa76af069: mov    0x4(%ecx),%ebx
  0xa76af06c: cmp    0x8(%eax),%ebx
  0xa76af06f: mov    0x4(%eax),%ebx
  0xa76af072: jne    0xa76af085
  0xa76af078: cmpl   $0x0,0x34(%ebx)
  0xa76af07f: je     0xa76af0c4
  0xa76af085: jmp    0xa7692560
  0xa76af08a: cmpl   $0x0,0x34(%ebx)
  0xa76af091: je     0xa76af0c4
  0xa76af097: mov    (%esp),%eax
  0xa76af09a: pusha  
  0xa76af09b: pushf  
  0xa76af09c: sub    $0x10,%esp
  0xa76af09f: vmovsd %xmm0,(%esp)
  0xa76af0a4: vmovsd %xmm1,0x8(%esp)
  0xa76af0aa: push   %eax
  0xa76af0ab: push   %ebx
  0xa76af0ac: call   0xb71d62fc
  0xa76af0b1: add    $0x8,%esp
  0xa76af0b4: vmovsd (%esp),%xmm0
  0xa76af0b9: vmovsd 0x8(%esp),%xmm1
  0xa76af0bf: add    $0x10,%esp
  0xa76af0c2: popf   
  0xa76af0c3: popa   
  0xa76af0c4: pop    %eax
  0xa76af0c5: mov    %esp,%esi
  0xa76af0c7: sub    $0x0,%esp
  0xa76af0ca: mov    0x28(%ebx),%ecx
  0xa76af0cd: push   %eax
  0xa76af0ce: jmp    *%ecx

AHE@0xb6682788: 0xaa000000 i2c: 0xa76af180 c2i: 0xa76af210 c2iUV: 0xa76af1ef
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/util/Enumeration; (221 bytes generated)
c2i argument handler starts at 0xa76af210
  0xa76af180: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76af183: mov    $0xa75b1ac0,%edi
  0xa76af188: cmp    %edi,%eax
  0xa76af18a: jbe    0xa76af19d
  0xa76af190: mov    $0xa7691ac0,%edi
  0xa76af195: cmp    %edi,%eax
  0xa76af197: jb     0xa76af1c8
  0xa76af19d: mov    $0xa75af400,%edi
  0xa76af1a2: cmp    %edi,%eax
  0xa76af1a4: jbe    0xa76af1b7
  0xa76af1aa: mov    $0xa75b1728,%edi
  0xa76af1af: cmp    %edi,%eax
  0xa76af1b1: jb     0xa76af1c8
  ;; i2c adapter must return to an interpreter frame
  0xa76af1b7: push   $0xb75a2830
  0xa76af1bc: call   0xa76af1c1
  0xa76af1c1: pusha  
  0xa76af1c2: call   0xb7052f32
  0xa76af1c7: hlt    
  ;; } verify_i2ce 
  0xa76af1c8: mov    %esp,%edi
  0xa76af1ca: and    $0xfffffff0,%esp
  0xa76af1cd: push   %eax
  0xa76af1ce: mov    %edi,%eax
  0xa76af1d0: mov    0x30(%ebx),%edi
  0xa76af1d3: mov    0x8(%eax),%ecx
  0xa76af1d6: mov    0x4(%eax),%edx
  0xa76af1d9: mov    %esp,%eax
  0xa76af1db: shr    $0xc,%eax
  0xa76af1de: mov    -0x486bdba0(,%eax,4),%eax
  0xa76af1e5: mov    %ebx,0x16c(%eax)
  0xa76af1eb: mov    %ebx,%eax
  0xa76af1ed: jmp    *%edi
  0xa76af1ef: mov    0x4(%ecx),%ebx
  0xa76af1f2: cmp    0x8(%eax),%ebx
  0xa76af1f5: mov    0x4(%eax),%ebx
  0xa76af1f8: jne    0xa76af20b
  0xa76af1fe: cmpl   $0x0,0x34(%ebx)
  0xa76af205: je     0xa76af24a
  0xa76af20b: jmp    0xa7692560
  0xa76af210: cmpl   $0x0,0x34(%ebx)
  0xa76af217: je     0xa76af24a
  0xa76af21d: mov    (%esp),%eax
  0xa76af220: pusha  
  0xa76af221: pushf  
  0xa76af222: sub    $0x10,%esp
  0xa76af225: vmovsd %xmm0,(%esp)
  0xa76af22a: vmovsd %xmm1,0x8(%esp)
  0xa76af230: push   %eax
  0xa76af231: push   %ebx
  0xa76af232: call   0xb71d62fc
  0xa76af237: add    $0x8,%esp
  0xa76af23a: vmovsd (%esp),%xmm0
  0xa76af23f: vmovsd 0x8(%esp),%xmm1
  0xa76af245: add    $0x10,%esp
  0xa76af248: popf   
  0xa76af249: popa   
  0xa76af24a: pop    %eax
  0xa76af24b: mov    %esp,%esi
  0xa76af24d: sub    $0x8,%esp
  0xa76af250: mov    %ecx,0x4(%esp)
  0xa76af254: mov    %edx,(%esp)
  0xa76af257: mov    0x28(%ebx),%ecx
  0xa76af25a: push   %eax
  0xa76af25b: jmp    *%ecx

AHE@0xb66827ac: 0xaa000000 i2c: 0xa76af300 c2i: 0xa76af390 c2iUV: 0xa76af36f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/net/URL; (221 bytes generated)
c2i argument handler starts at 0xa76af390
  0xa76af300: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76af303: mov    $0xa75b1ac0,%edi
  0xa76af308: cmp    %edi,%eax
  0xa76af30a: jbe    0xa76af31d
  0xa76af310: mov    $0xa7691ac0,%edi
  0xa76af315: cmp    %edi,%eax
  0xa76af317: jb     0xa76af348
  0xa76af31d: mov    $0xa75af400,%edi
  0xa76af322: cmp    %edi,%eax
  0xa76af324: jbe    0xa76af337
  0xa76af32a: mov    $0xa75b1728,%edi
  0xa76af32f: cmp    %edi,%eax
  0xa76af331: jb     0xa76af348
  ;; i2c adapter must return to an interpreter frame
  0xa76af337: push   $0xb75a2830
  0xa76af33c: call   0xa76af341
  0xa76af341: pusha  
  0xa76af342: call   0xb7052f32
  0xa76af347: hlt    
  ;; } verify_i2ce 
  0xa76af348: mov    %esp,%edi
  0xa76af34a: and    $0xfffffff0,%esp
  0xa76af34d: push   %eax
  0xa76af34e: mov    %edi,%eax
  0xa76af350: mov    0x30(%ebx),%edi
  0xa76af353: mov    0x8(%eax),%ecx
  0xa76af356: mov    0x4(%eax),%edx
  0xa76af359: mov    %esp,%eax
  0xa76af35b: shr    $0xc,%eax
  0xa76af35e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76af365: mov    %ebx,0x16c(%eax)
  0xa76af36b: mov    %ebx,%eax
  0xa76af36d: jmp    *%edi
  0xa76af36f: mov    0x4(%ecx),%ebx
  0xa76af372: cmp    0x8(%eax),%ebx
  0xa76af375: mov    0x4(%eax),%ebx
  0xa76af378: jne    0xa76af38b
  0xa76af37e: cmpl   $0x0,0x34(%ebx)
  0xa76af385: je     0xa76af3ca
  0xa76af38b: jmp    0xa7692560
  0xa76af390: cmpl   $0x0,0x34(%ebx)
  0xa76af397: je     0xa76af3ca
  0xa76af39d: mov    (%esp),%eax
  0xa76af3a0: pusha  
  0xa76af3a1: pushf  
  0xa76af3a2: sub    $0x10,%esp
  0xa76af3a5: vmovsd %xmm0,(%esp)
  0xa76af3aa: vmovsd %xmm1,0x8(%esp)
  0xa76af3b0: push   %eax
  0xa76af3b1: push   %ebx
  0xa76af3b2: call   0xb71d62fc
  0xa76af3b7: add    $0x8,%esp
  0xa76af3ba: vmovsd (%esp),%xmm0
  0xa76af3bf: vmovsd 0x8(%esp),%xmm1
  0xa76af3c5: add    $0x10,%esp
  0xa76af3c8: popf   
  0xa76af3c9: popa   
  0xa76af3ca: pop    %eax
  0xa76af3cb: mov    %esp,%esi
  0xa76af3cd: sub    $0x8,%esp
  0xa76af3d0: mov    %ecx,0x4(%esp)
  0xa76af3d4: mov    %edx,(%esp)
  0xa76af3d7: mov    0x28(%ebx),%ecx
  0xa76af3da: push   %eax
  0xa76af3db: jmp    *%ecx

AHE@0xb66827d0: 0xaa000000 i2c: 0xa76af480 c2i: 0xa76af510 c2iUV: 0xa76af4ef
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/util/Enumeration; (221 bytes generated)
c2i argument handler starts at 0xa76af510
  0xa76af480: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76af483: mov    $0xa75b1ac0,%edi
  0xa76af488: cmp    %edi,%eax
  0xa76af48a: jbe    0xa76af49d
  0xa76af490: mov    $0xa7691ac0,%edi
  0xa76af495: cmp    %edi,%eax
  0xa76af497: jb     0xa76af4c8
  0xa76af49d: mov    $0xa75af400,%edi
  0xa76af4a2: cmp    %edi,%eax
  0xa76af4a4: jbe    0xa76af4b7
  0xa76af4aa: mov    $0xa75b1728,%edi
  0xa76af4af: cmp    %edi,%eax
  0xa76af4b1: jb     0xa76af4c8
  ;; i2c adapter must return to an interpreter frame
  0xa76af4b7: push   $0xb75a2830
  0xa76af4bc: call   0xa76af4c1
  0xa76af4c1: pusha  
  0xa76af4c2: call   0xb7052f32
  0xa76af4c7: hlt    
  ;; } verify_i2ce 
  0xa76af4c8: mov    %esp,%edi
  0xa76af4ca: and    $0xfffffff0,%esp
  0xa76af4cd: push   %eax
  0xa76af4ce: mov    %edi,%eax
  0xa76af4d0: mov    0x30(%ebx),%edi
  0xa76af4d3: mov    0x8(%eax),%ecx
  0xa76af4d6: mov    0x4(%eax),%edx
  0xa76af4d9: mov    %esp,%eax
  0xa76af4db: shr    $0xc,%eax
  0xa76af4de: mov    -0x486bdba0(,%eax,4),%eax
  0xa76af4e5: mov    %ebx,0x16c(%eax)
  0xa76af4eb: mov    %ebx,%eax
  0xa76af4ed: jmp    *%edi
  0xa76af4ef: mov    0x4(%ecx),%ebx
  0xa76af4f2: cmp    0x8(%eax),%ebx
  0xa76af4f5: mov    0x4(%eax),%ebx
  0xa76af4f8: jne    0xa76af50b
  0xa76af4fe: cmpl   $0x0,0x34(%ebx)
  0xa76af505: je     0xa76af54a
  0xa76af50b: jmp    0xa7692560
  0xa76af510: cmpl   $0x0,0x34(%ebx)
  0xa76af517: je     0xa76af54a
  0xa76af51d: mov    (%esp),%eax
  0xa76af520: pusha  
  0xa76af521: pushf  
  0xa76af522: sub    $0x10,%esp
  0xa76af525: vmovsd %xmm0,(%esp)
  0xa76af52a: vmovsd %xmm1,0x8(%esp)
  0xa76af530: push   %eax
  0xa76af531: push   %ebx
  0xa76af532: call   0xb71d62fc
  0xa76af537: add    $0x8,%esp
  0xa76af53a: vmovsd (%esp),%xmm0
  0xa76af53f: vmovsd 0x8(%esp),%xmm1
  0xa76af545: add    $0x10,%esp
  0xa76af548: popf   
  0xa76af549: popa   
  0xa76af54a: pop    %eax
  0xa76af54b: mov    %esp,%esi
  0xa76af54d: sub    $0x8,%esp
  0xa76af550: mov    %ecx,0x4(%esp)
  0xa76af554: mov    %edx,(%esp)
  0xa76af557: mov    0x28(%ebx),%ecx
  0xa76af55a: push   %eax
  0xa76af55b: jmp    *%ecx

AHE@0xb66827f4: 0xaa000000 i2c: 0xa76af600 c2i: 0xa76af690 c2iUV: 0xa76af66f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76af690
  0xa76af600: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76af603: mov    $0xa75b1ac0,%edi
  0xa76af608: cmp    %edi,%eax
  0xa76af60a: jbe    0xa76af61d
  0xa76af610: mov    $0xa7691ac0,%edi
  0xa76af615: cmp    %edi,%eax
  0xa76af617: jb     0xa76af648
  0xa76af61d: mov    $0xa75af400,%edi
  0xa76af622: cmp    %edi,%eax
  0xa76af624: jbe    0xa76af637
  0xa76af62a: mov    $0xa75b1728,%edi
  0xa76af62f: cmp    %edi,%eax
  0xa76af631: jb     0xa76af648
  ;; i2c adapter must return to an interpreter frame
  0xa76af637: push   $0xb75a2830
  0xa76af63c: call   0xa76af641
  0xa76af641: pusha  
  0xa76af642: call   0xb7052f32
  0xa76af647: hlt    
  ;; } verify_i2ce 
  0xa76af648: mov    %esp,%edi
  0xa76af64a: and    $0xfffffff0,%esp
  0xa76af64d: push   %eax
  0xa76af64e: mov    %edi,%eax
  0xa76af650: mov    0x30(%ebx),%edi
  0xa76af653: mov    0x8(%eax),%ecx
  0xa76af656: mov    0x4(%eax),%edx
  0xa76af659: mov    %esp,%eax
  0xa76af65b: shr    $0xc,%eax
  0xa76af65e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76af665: mov    %ebx,0x16c(%eax)
  0xa76af66b: mov    %ebx,%eax
  0xa76af66d: jmp    *%edi
  0xa76af66f: mov    0x4(%ecx),%ebx
  0xa76af672: cmp    0x8(%eax),%ebx
  0xa76af675: mov    0x4(%eax),%ebx
  0xa76af678: jne    0xa76af68b
  0xa76af67e: cmpl   $0x0,0x34(%ebx)
  0xa76af685: je     0xa76af6ca
  0xa76af68b: jmp    0xa7692560
  0xa76af690: cmpl   $0x0,0x34(%ebx)
  0xa76af697: je     0xa76af6ca
  0xa76af69d: mov    (%esp),%eax
  0xa76af6a0: pusha  
  0xa76af6a1: pushf  
  0xa76af6a2: sub    $0x10,%esp
  0xa76af6a5: vmovsd %xmm0,(%esp)
  0xa76af6aa: vmovsd %xmm1,0x8(%esp)
  0xa76af6b0: push   %eax
  0xa76af6b1: push   %ebx
  0xa76af6b2: call   0xb71d62fc
  0xa76af6b7: add    $0x8,%esp
  0xa76af6ba: vmovsd (%esp),%xmm0
  0xa76af6bf: vmovsd 0x8(%esp),%xmm1
  0xa76af6c5: add    $0x10,%esp
  0xa76af6c8: popf   
  0xa76af6c9: popa   
  0xa76af6ca: pop    %eax
  0xa76af6cb: mov    %esp,%esi
  0xa76af6cd: sub    $0x8,%esp
  0xa76af6d0: mov    %ecx,0x4(%esp)
  0xa76af6d4: mov    %edx,(%esp)
  0xa76af6d7: mov    0x28(%ebx),%ecx
  0xa76af6da: push   %eax
  0xa76af6db: jmp    *%ecx

AHE@0xb6682818: 0xaa000000 i2c: 0xa76af780 c2i: 0xa76af810 c2iUV: 0xa76af7ef
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76af810
  0xa76af780: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76af783: mov    $0xa75b1ac0,%edi
  0xa76af788: cmp    %edi,%eax
  0xa76af78a: jbe    0xa76af79d
  0xa76af790: mov    $0xa7691ac0,%edi
  0xa76af795: cmp    %edi,%eax
  0xa76af797: jb     0xa76af7c8
  0xa76af79d: mov    $0xa75af400,%edi
  0xa76af7a2: cmp    %edi,%eax
  0xa76af7a4: jbe    0xa76af7b7
  0xa76af7aa: mov    $0xa75b1728,%edi
  0xa76af7af: cmp    %edi,%eax
  0xa76af7b1: jb     0xa76af7c8
  ;; i2c adapter must return to an interpreter frame
  0xa76af7b7: push   $0xb75a2830
  0xa76af7bc: call   0xa76af7c1
  0xa76af7c1: pusha  
  0xa76af7c2: call   0xb7052f32
  0xa76af7c7: hlt    
  ;; } verify_i2ce 
  0xa76af7c8: mov    %esp,%edi
  0xa76af7ca: and    $0xfffffff0,%esp
  0xa76af7cd: push   %eax
  0xa76af7ce: mov    %edi,%eax
  0xa76af7d0: mov    0x30(%ebx),%edi
  0xa76af7d3: mov    0x8(%eax),%ecx
  0xa76af7d6: mov    0x4(%eax),%edx
  0xa76af7d9: mov    %esp,%eax
  0xa76af7db: shr    $0xc,%eax
  0xa76af7de: mov    -0x486bdba0(,%eax,4),%eax
  0xa76af7e5: mov    %ebx,0x16c(%eax)
  0xa76af7eb: mov    %ebx,%eax
  0xa76af7ed: jmp    *%edi
  0xa76af7ef: mov    0x4(%ecx),%ebx
  0xa76af7f2: cmp    0x8(%eax),%ebx
  0xa76af7f5: mov    0x4(%eax),%ebx
  0xa76af7f8: jne    0xa76af80b
  0xa76af7fe: cmpl   $0x0,0x34(%ebx)
  0xa76af805: je     0xa76af84a
  0xa76af80b: jmp    0xa7692560
  0xa76af810: cmpl   $0x0,0x34(%ebx)
  0xa76af817: je     0xa76af84a
  0xa76af81d: mov    (%esp),%eax
  0xa76af820: pusha  
  0xa76af821: pushf  
  0xa76af822: sub    $0x10,%esp
  0xa76af825: vmovsd %xmm0,(%esp)
  0xa76af82a: vmovsd %xmm1,0x8(%esp)
  0xa76af830: push   %eax
  0xa76af831: push   %ebx
  0xa76af832: call   0xb71d62fc
  0xa76af837: add    $0x8,%esp
  0xa76af83a: vmovsd (%esp),%xmm0
  0xa76af83f: vmovsd 0x8(%esp),%xmm1
  0xa76af845: add    $0x10,%esp
  0xa76af848: popf   
  0xa76af849: popa   
  0xa76af84a: pop    %eax
  0xa76af84b: mov    %esp,%esi
  0xa76af84d: sub    $0x8,%esp
  0xa76af850: mov    %ecx,0x4(%esp)
  0xa76af854: mov    %edx,(%esp)
  0xa76af857: mov    0x28(%ebx),%ecx
  0xa76af85a: push   %eax
  0xa76af85b: jmp    *%ecx

AHE@0xb668283c: 0xaa000000 i2c: 0xa76af900 c2i: 0xa76af990 c2iUV: 0xa76af96f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76af990
  0xa76af900: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76af903: mov    $0xa75b1ac0,%edi
  0xa76af908: cmp    %edi,%eax
  0xa76af90a: jbe    0xa76af91d
  0xa76af910: mov    $0xa7691ac0,%edi
  0xa76af915: cmp    %edi,%eax
  0xa76af917: jb     0xa76af948
  0xa76af91d: mov    $0xa75af400,%edi
  0xa76af922: cmp    %edi,%eax
  0xa76af924: jbe    0xa76af937
  0xa76af92a: mov    $0xa75b1728,%edi
  0xa76af92f: cmp    %edi,%eax
  0xa76af931: jb     0xa76af948
  ;; i2c adapter must return to an interpreter frame
  0xa76af937: push   $0xb75a2830
  0xa76af93c: call   0xa76af941
  0xa76af941: pusha  
  0xa76af942: call   0xb7052f32
  0xa76af947: hlt    
  ;; } verify_i2ce 
  0xa76af948: mov    %esp,%edi
  0xa76af94a: and    $0xfffffff0,%esp
  0xa76af94d: push   %eax
  0xa76af94e: mov    %edi,%eax
  0xa76af950: mov    0x30(%ebx),%edi
  0xa76af953: mov    0x8(%eax),%ecx
  0xa76af956: mov    0x4(%eax),%edx
  0xa76af959: mov    %esp,%eax
  0xa76af95b: shr    $0xc,%eax
  0xa76af95e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76af965: mov    %ebx,0x16c(%eax)
  0xa76af96b: mov    %ebx,%eax
  0xa76af96d: jmp    *%edi
  0xa76af96f: mov    0x4(%ecx),%ebx
  0xa76af972: cmp    0x8(%eax),%ebx
  0xa76af975: mov    0x4(%eax),%ebx
  0xa76af978: jne    0xa76af98b
  0xa76af97e: cmpl   $0x0,0x34(%ebx)
  0xa76af985: je     0xa76af9ca
  0xa76af98b: jmp    0xa7692560
  0xa76af990: cmpl   $0x0,0x34(%ebx)
  0xa76af997: je     0xa76af9ca
  0xa76af99d: mov    (%esp),%eax
  0xa76af9a0: pusha  
  0xa76af9a1: pushf  
  0xa76af9a2: sub    $0x10,%esp
  0xa76af9a5: vmovsd %xmm0,(%esp)
  0xa76af9aa: vmovsd %xmm1,0x8(%esp)
  0xa76af9b0: push   %eax
  0xa76af9b1: push   %ebx
  0xa76af9b2: call   0xb71d62fc
  0xa76af9b7: add    $0x8,%esp
  0xa76af9ba: vmovsd (%esp),%xmm0
  0xa76af9bf: vmovsd 0x8(%esp),%xmm1
  0xa76af9c5: add    $0x10,%esp
  0xa76af9c8: popf   
  0xa76af9c9: popa   
  0xa76af9ca: pop    %eax
  0xa76af9cb: mov    %esp,%esi
  0xa76af9cd: sub    $0x8,%esp
  0xa76af9d0: mov    %ecx,0x4(%esp)
  0xa76af9d4: mov    %edx,(%esp)
  0xa76af9d7: mov    0x28(%ebx),%ecx
  0xa76af9da: push   %eax
  0xa76af9db: jmp    *%ecx

AHE@0xb6682860: 0xaa000000 i2c: 0xa76afa80 c2i: 0xa76afb10 c2iUV: 0xa76afaef
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76afb10
  0xa76afa80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76afa83: mov    $0xa75b1ac0,%edi
  0xa76afa88: cmp    %edi,%eax
  0xa76afa8a: jbe    0xa76afa9d
  0xa76afa90: mov    $0xa7691ac0,%edi
  0xa76afa95: cmp    %edi,%eax
  0xa76afa97: jb     0xa76afac8
  0xa76afa9d: mov    $0xa75af400,%edi
  0xa76afaa2: cmp    %edi,%eax
  0xa76afaa4: jbe    0xa76afab7
  0xa76afaaa: mov    $0xa75b1728,%edi
  0xa76afaaf: cmp    %edi,%eax
  0xa76afab1: jb     0xa76afac8
  ;; i2c adapter must return to an interpreter frame
  0xa76afab7: push   $0xb75a2830
  0xa76afabc: call   0xa76afac1
  0xa76afac1: pusha  
  0xa76afac2: call   0xb7052f32
  0xa76afac7: hlt    
  ;; } verify_i2ce 
  0xa76afac8: mov    %esp,%edi
  0xa76afaca: and    $0xfffffff0,%esp
  0xa76afacd: push   %eax
  0xa76aface: mov    %edi,%eax
  0xa76afad0: mov    0x30(%ebx),%edi
  0xa76afad3: mov    0x8(%eax),%ecx
  0xa76afad6: mov    0x4(%eax),%edx
  0xa76afad9: mov    %esp,%eax
  0xa76afadb: shr    $0xc,%eax
  0xa76afade: mov    -0x486bdba0(,%eax,4),%eax
  0xa76afae5: mov    %ebx,0x16c(%eax)
  0xa76afaeb: mov    %ebx,%eax
  0xa76afaed: jmp    *%edi
  0xa76afaef: mov    0x4(%ecx),%ebx
  0xa76afaf2: cmp    0x8(%eax),%ebx
  0xa76afaf5: mov    0x4(%eax),%ebx
  0xa76afaf8: jne    0xa76afb0b
  0xa76afafe: cmpl   $0x0,0x34(%ebx)
  0xa76afb05: je     0xa76afb4a
  0xa76afb0b: jmp    0xa7692560
  0xa76afb10: cmpl   $0x0,0x34(%ebx)
  0xa76afb17: je     0xa76afb4a
  0xa76afb1d: mov    (%esp),%eax
  0xa76afb20: pusha  
  0xa76afb21: pushf  
  0xa76afb22: sub    $0x10,%esp
  0xa76afb25: vmovsd %xmm0,(%esp)
  0xa76afb2a: vmovsd %xmm1,0x8(%esp)
  0xa76afb30: push   %eax
  0xa76afb31: push   %ebx
  0xa76afb32: call   0xb71d62fc
  0xa76afb37: add    $0x8,%esp
  0xa76afb3a: vmovsd (%esp),%xmm0
  0xa76afb3f: vmovsd 0x8(%esp),%xmm1
  0xa76afb45: add    $0x10,%esp
  0xa76afb48: popf   
  0xa76afb49: popa   
  0xa76afb4a: pop    %eax
  0xa76afb4b: mov    %esp,%esi
  0xa76afb4d: sub    $0x8,%esp
  0xa76afb50: mov    %ecx,0x4(%esp)
  0xa76afb54: mov    %edx,(%esp)
  0xa76afb57: mov    0x28(%ebx),%ecx
  0xa76afb5a: push   %eax
  0xa76afb5b: jmp    *%ecx

AHE@0xb668fcb0: 0xaa000000 i2c: 0xa76afc00 c2i: 0xa76afc90 c2iUV: 0xa76afc6f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76afc90
  0xa76afc00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76afc03: mov    $0xa75b1ac0,%edi
  0xa76afc08: cmp    %edi,%eax
  0xa76afc0a: jbe    0xa76afc1d
  0xa76afc10: mov    $0xa7691ac0,%edi
  0xa76afc15: cmp    %edi,%eax
  0xa76afc17: jb     0xa76afc48
  0xa76afc1d: mov    $0xa75af400,%edi
  0xa76afc22: cmp    %edi,%eax
  0xa76afc24: jbe    0xa76afc37
  0xa76afc2a: mov    $0xa75b1728,%edi
  0xa76afc2f: cmp    %edi,%eax
  0xa76afc31: jb     0xa76afc48
  ;; i2c adapter must return to an interpreter frame
  0xa76afc37: push   $0xb75a2830
  0xa76afc3c: call   0xa76afc41
  0xa76afc41: pusha  
  0xa76afc42: call   0xb7052f32
  0xa76afc47: hlt    
  ;; } verify_i2ce 
  0xa76afc48: mov    %esp,%edi
  0xa76afc4a: and    $0xfffffff0,%esp
  0xa76afc4d: push   %eax
  0xa76afc4e: mov    %edi,%eax
  0xa76afc50: mov    0x30(%ebx),%edi
  0xa76afc53: mov    0x8(%eax),%ecx
  0xa76afc56: mov    0x4(%eax),%edx
  0xa76afc59: mov    %esp,%eax
  0xa76afc5b: shr    $0xc,%eax
  0xa76afc5e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76afc65: mov    %ebx,0x16c(%eax)
  0xa76afc6b: mov    %ebx,%eax
  0xa76afc6d: jmp    *%edi
  0xa76afc6f: mov    0x4(%ecx),%ebx
  0xa76afc72: cmp    0x8(%eax),%ebx
  0xa76afc75: mov    0x4(%eax),%ebx
  0xa76afc78: jne    0xa76afc8b
  0xa76afc7e: cmpl   $0x0,0x34(%ebx)
  0xa76afc85: je     0xa76afcca
  0xa76afc8b: jmp    0xa7692560
  0xa76afc90: cmpl   $0x0,0x34(%ebx)
  0xa76afc97: je     0xa76afcca
  0xa76afc9d: mov    (%esp),%eax
  0xa76afca0: pusha  
  0xa76afca1: pushf  
  0xa76afca2: sub    $0x10,%esp
  0xa76afca5: vmovsd %xmm0,(%esp)
  0xa76afcaa: vmovsd %xmm1,0x8(%esp)
  0xa76afcb0: push   %eax
  0xa76afcb1: push   %ebx
  0xa76afcb2: call   0xb71d62fc
  0xa76afcb7: add    $0x8,%esp
  0xa76afcba: vmovsd (%esp),%xmm0
  0xa76afcbf: vmovsd 0x8(%esp),%xmm1
  0xa76afcc5: add    $0x10,%esp
  0xa76afcc8: popf   
  0xa76afcc9: popa   
  0xa76afcca: pop    %eax
  0xa76afccb: mov    %esp,%esi
  0xa76afccd: sub    $0x8,%esp
  0xa76afcd0: mov    %ecx,0x4(%esp)
  0xa76afcd4: mov    %edx,(%esp)
  0xa76afcd7: mov    0x28(%ebx),%ecx
  0xa76afcda: push   %eax
  0xa76afcdb: jmp    *%ecx

AHE@0xb668fcd4: 0xaa000000 i2c: 0xa76afd80 c2i: 0xa76afe10 c2iUV: 0xa76afdef
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (221 bytes generated)
c2i argument handler starts at 0xa76afe10
  0xa76afd80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76afd83: mov    $0xa75b1ac0,%edi
  0xa76afd88: cmp    %edi,%eax
  0xa76afd8a: jbe    0xa76afd9d
  0xa76afd90: mov    $0xa7691ac0,%edi
  0xa76afd95: cmp    %edi,%eax
  0xa76afd97: jb     0xa76afdc8
  0xa76afd9d: mov    $0xa75af400,%edi
  0xa76afda2: cmp    %edi,%eax
  0xa76afda4: jbe    0xa76afdb7
  0xa76afdaa: mov    $0xa75b1728,%edi
  0xa76afdaf: cmp    %edi,%eax
  0xa76afdb1: jb     0xa76afdc8
  ;; i2c adapter must return to an interpreter frame
  0xa76afdb7: push   $0xb75a2830
  0xa76afdbc: call   0xa76afdc1
  0xa76afdc1: pusha  
  0xa76afdc2: call   0xb7052f32
  0xa76afdc7: hlt    
  ;; } verify_i2ce 
  0xa76afdc8: mov    %esp,%edi
  0xa76afdca: and    $0xfffffff0,%esp
  0xa76afdcd: push   %eax
  0xa76afdce: mov    %edi,%eax
  0xa76afdd0: mov    0x30(%ebx),%edi
  0xa76afdd3: mov    0x8(%eax),%ecx
  0xa76afdd6: mov    0x4(%eax),%edx
  0xa76afdd9: mov    %esp,%eax
  0xa76afddb: shr    $0xc,%eax
  0xa76afdde: mov    -0x486bdba0(,%eax,4),%eax
  0xa76afde5: mov    %ebx,0x16c(%eax)
  0xa76afdeb: mov    %ebx,%eax
  0xa76afded: jmp    *%edi
  0xa76afdef: mov    0x4(%ecx),%ebx
  0xa76afdf2: cmp    0x8(%eax),%ebx
  0xa76afdf5: mov    0x4(%eax),%ebx
  0xa76afdf8: jne    0xa76afe0b
  0xa76afdfe: cmpl   $0x0,0x34(%ebx)
  0xa76afe05: je     0xa76afe4a
  0xa76afe0b: jmp    0xa7692560
  0xa76afe10: cmpl   $0x0,0x34(%ebx)
  0xa76afe17: je     0xa76afe4a
  0xa76afe1d: mov    (%esp),%eax
  0xa76afe20: pusha  
  0xa76afe21: pushf  
  0xa76afe22: sub    $0x10,%esp
  0xa76afe25: vmovsd %xmm0,(%esp)
  0xa76afe2a: vmovsd %xmm1,0x8(%esp)
  0xa76afe30: push   %eax
  0xa76afe31: push   %ebx
  0xa76afe32: call   0xb71d62fc
  0xa76afe37: add    $0x8,%esp
  0xa76afe3a: vmovsd (%esp),%xmm0
  0xa76afe3f: vmovsd 0x8(%esp),%xmm1
  0xa76afe45: add    $0x10,%esp
  0xa76afe48: popf   
  0xa76afe49: popa   
  0xa76afe4a: pop    %eax
  0xa76afe4b: mov    %esp,%esi
  0xa76afe4d: sub    $0x8,%esp
  0xa76afe50: mov    %ecx,0x4(%esp)
  0xa76afe54: mov    %edx,(%esp)
  0xa76afe57: mov    0x28(%ebx),%ecx
  0xa76afe5a: push   %eax
  0xa76afe5b: jmp    *%ecx

AHE@0xb668fcf8: 0xaa000000 i2c: 0xa76aff00 c2i: 0xa76aff90 c2iUV: 0xa76aff6f
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (221 bytes generated)
c2i argument handler starts at 0xa76aff90
  0xa76aff00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76aff03: mov    $0xa75b1ac0,%edi
  0xa76aff08: cmp    %edi,%eax
  0xa76aff0a: jbe    0xa76aff1d
  0xa76aff10: mov    $0xa7691ac0,%edi
  0xa76aff15: cmp    %edi,%eax
  0xa76aff17: jb     0xa76aff48
  0xa76aff1d: mov    $0xa75af400,%edi
  0xa76aff22: cmp    %edi,%eax
  0xa76aff24: jbe    0xa76aff37
  0xa76aff2a: mov    $0xa75b1728,%edi
  0xa76aff2f: cmp    %edi,%eax
  0xa76aff31: jb     0xa76aff48
  ;; i2c adapter must return to an interpreter frame
  0xa76aff37: push   $0xb75a2830
  0xa76aff3c: call   0xa76aff41
  0xa76aff41: pusha  
  0xa76aff42: call   0xb7052f32
  0xa76aff47: hlt    
  ;; } verify_i2ce 
  0xa76aff48: mov    %esp,%edi
  0xa76aff4a: and    $0xfffffff0,%esp
  0xa76aff4d: push   %eax
  0xa76aff4e: mov    %edi,%eax
  0xa76aff50: mov    0x30(%ebx),%edi
  0xa76aff53: mov    0x8(%eax),%ecx
  0xa76aff56: mov    0x4(%eax),%edx
  0xa76aff59: mov    %esp,%eax
  0xa76aff5b: shr    $0xc,%eax
  0xa76aff5e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76aff65: mov    %ebx,0x16c(%eax)
  0xa76aff6b: mov    %ebx,%eax
  0xa76aff6d: jmp    *%edi
  0xa76aff6f: mov    0x4(%ecx),%ebx
  0xa76aff72: cmp    0x8(%eax),%ebx
  0xa76aff75: mov    0x4(%eax),%ebx
  0xa76aff78: jne    0xa76aff8b
  0xa76aff7e: cmpl   $0x0,0x34(%ebx)
  0xa76aff85: je     0xa76affca
  0xa76aff8b: jmp    0xa7692560
  0xa76aff90: cmpl   $0x0,0x34(%ebx)
  0xa76aff97: je     0xa76affca
  0xa76aff9d: mov    (%esp),%eax
  0xa76affa0: pusha  
  0xa76affa1: pushf  
  0xa76affa2: sub    $0x10,%esp
  0xa76affa5: vmovsd %xmm0,(%esp)
  0xa76affaa: vmovsd %xmm1,0x8(%esp)
  0xa76affb0: push   %eax
  0xa76affb1: push   %ebx
  0xa76affb2: call   0xb71d62fc
  0xa76affb7: add    $0x8,%esp
  0xa76affba: vmovsd (%esp),%xmm0
  0xa76affbf: vmovsd 0x8(%esp),%xmm1
  0xa76affc5: add    $0x10,%esp
  0xa76affc8: popf   
  0xa76affc9: popa   
  0xa76affca: pop    %eax
  0xa76affcb: mov    %esp,%esi
  0xa76affcd: sub    $0x8,%esp
  0xa76affd0: mov    %ecx,0x4(%esp)
  0xa76affd4: mov    %edx,(%esp)
  0xa76affd7: mov    0x28(%ebx),%ecx
  0xa76affda: push   %eax
  0xa76affdb: jmp    *%ecx

AHE@0xb668fd1c: 0xaaa00000 i2c: 0xa76b0080 c2i: 0xa76b011a c2iUV: 0xa76b00f9
i2c argument handler #0 for: receiver ([Ljava/security/cert/Certificate;[Ljava/security/cert/Certificate;)Z (239 bytes generated)
c2i argument handler starts at 0xa76b011a
  0xa76b0080: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0083: mov    $0xa75b1ac0,%edi
  0xa76b0088: cmp    %edi,%eax
  0xa76b008a: jbe    0xa76b009d
  0xa76b0090: mov    $0xa7691ac0,%edi
  0xa76b0095: cmp    %edi,%eax
  0xa76b0097: jb     0xa76b00c8
  0xa76b009d: mov    $0xa75af400,%edi
  0xa76b00a2: cmp    %edi,%eax
  0xa76b00a4: jbe    0xa76b00b7
  0xa76b00aa: mov    $0xa75b1728,%edi
  0xa76b00af: cmp    %edi,%eax
  0xa76b00b1: jb     0xa76b00c8
  ;; i2c adapter must return to an interpreter frame
  0xa76b00b7: push   $0xb75a2830
  0xa76b00bc: call   0xa76b00c1
  0xa76b00c1: pusha  
  0xa76b00c2: call   0xb7052f32
  0xa76b00c7: hlt    
  ;; } verify_i2ce 
  0xa76b00c8: mov    %esp,%edi
  0xa76b00ca: sub    $0x8,%esp
  0xa76b00cd: and    $0xfffffff0,%esp
  0xa76b00d0: push   %eax
  0xa76b00d1: mov    %edi,%eax
  0xa76b00d3: mov    0x30(%ebx),%edi
  0xa76b00d6: mov    0xc(%eax),%ecx
  0xa76b00d9: mov    0x8(%eax),%edx
  0xa76b00dc: mov    0x4(%eax),%esi
  0xa76b00df: mov    %esi,0x4(%esp)
  0xa76b00e3: mov    %esp,%eax
  0xa76b00e5: shr    $0xc,%eax
  0xa76b00e8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b00ef: mov    %ebx,0x16c(%eax)
  0xa76b00f5: mov    %ebx,%eax
  0xa76b00f7: jmp    *%edi
  0xa76b00f9: mov    0x4(%ecx),%ebx
  0xa76b00fc: cmp    0x8(%eax),%ebx
  0xa76b00ff: mov    0x4(%eax),%ebx
  0xa76b0102: jne    0xa76b0115
  0xa76b0108: cmpl   $0x0,0x34(%ebx)
  0xa76b010f: je     0xa76b0154
  0xa76b0115: jmp    0xa7692560
  0xa76b011a: cmpl   $0x0,0x34(%ebx)
  0xa76b0121: je     0xa76b0154
  0xa76b0127: mov    (%esp),%eax
  0xa76b012a: pusha  
  0xa76b012b: pushf  
  0xa76b012c: sub    $0x10,%esp
  0xa76b012f: vmovsd %xmm0,(%esp)
  0xa76b0134: vmovsd %xmm1,0x8(%esp)
  0xa76b013a: push   %eax
  0xa76b013b: push   %ebx
  0xa76b013c: call   0xb71d62fc
  0xa76b0141: add    $0x8,%esp
  0xa76b0144: vmovsd (%esp),%xmm0
  0xa76b0149: vmovsd 0x8(%esp),%xmm1
  0xa76b014f: add    $0x10,%esp
  0xa76b0152: popf   
  0xa76b0153: popa   
  0xa76b0154: pop    %eax
  0xa76b0155: mov    %esp,%esi
  0xa76b0157: sub    $0xc,%esp
  0xa76b015a: mov    %ecx,0x8(%esp)
  0xa76b015e: mov    %edx,0x4(%esp)
  0xa76b0162: mov    0xc(%esp),%edi
  0xa76b0166: mov    %edi,(%esp)
  0xa76b0169: mov    0x28(%ebx),%ecx
  0xa76b016c: push   %eax
  0xa76b016d: jmp    *%ecx

AHE@0xb668fd40: 0xaaa00000 i2c: 0xa76b0200 c2i: 0xa76b029a c2iUV: 0xa76b0279
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/security/CodeSource;)V (239 bytes generated)
c2i argument handler starts at 0xa76b029a
  0xa76b0200: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0203: mov    $0xa75b1ac0,%edi
  0xa76b0208: cmp    %edi,%eax
  0xa76b020a: jbe    0xa76b021d
  0xa76b0210: mov    $0xa7691ac0,%edi
  0xa76b0215: cmp    %edi,%eax
  0xa76b0217: jb     0xa76b0248
  0xa76b021d: mov    $0xa75af400,%edi
  0xa76b0222: cmp    %edi,%eax
  0xa76b0224: jbe    0xa76b0237
  0xa76b022a: mov    $0xa75b1728,%edi
  0xa76b022f: cmp    %edi,%eax
  0xa76b0231: jb     0xa76b0248
  ;; i2c adapter must return to an interpreter frame
  0xa76b0237: push   $0xb75a2830
  0xa76b023c: call   0xa76b0241
  0xa76b0241: pusha  
  0xa76b0242: call   0xb7052f32
  0xa76b0247: hlt    
  ;; } verify_i2ce 
  0xa76b0248: mov    %esp,%edi
  0xa76b024a: sub    $0x8,%esp
  0xa76b024d: and    $0xfffffff0,%esp
  0xa76b0250: push   %eax
  0xa76b0251: mov    %edi,%eax
  0xa76b0253: mov    0x30(%ebx),%edi
  0xa76b0256: mov    0xc(%eax),%ecx
  0xa76b0259: mov    0x8(%eax),%edx
  0xa76b025c: mov    0x4(%eax),%esi
  0xa76b025f: mov    %esi,0x4(%esp)
  0xa76b0263: mov    %esp,%eax
  0xa76b0265: shr    $0xc,%eax
  0xa76b0268: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b026f: mov    %ebx,0x16c(%eax)
  0xa76b0275: mov    %ebx,%eax
  0xa76b0277: jmp    *%edi
  0xa76b0279: mov    0x4(%ecx),%ebx
  0xa76b027c: cmp    0x8(%eax),%ebx
  0xa76b027f: mov    0x4(%eax),%ebx
  0xa76b0282: jne    0xa76b0295
  0xa76b0288: cmpl   $0x0,0x34(%ebx)
  0xa76b028f: je     0xa76b02d4
  0xa76b0295: jmp    0xa7692560
  0xa76b029a: cmpl   $0x0,0x34(%ebx)
  0xa76b02a1: je     0xa76b02d4
  0xa76b02a7: mov    (%esp),%eax
  0xa76b02aa: pusha  
  0xa76b02ab: pushf  
  0xa76b02ac: sub    $0x10,%esp
  0xa76b02af: vmovsd %xmm0,(%esp)
  0xa76b02b4: vmovsd %xmm1,0x8(%esp)
  0xa76b02ba: push   %eax
  0xa76b02bb: push   %ebx
  0xa76b02bc: call   0xb71d62fc
  0xa76b02c1: add    $0x8,%esp
  0xa76b02c4: vmovsd (%esp),%xmm0
  0xa76b02c9: vmovsd 0x8(%esp),%xmm1
  0xa76b02cf: add    $0x10,%esp
  0xa76b02d2: popf   
  0xa76b02d3: popa   
  0xa76b02d4: pop    %eax
  0xa76b02d5: mov    %esp,%esi
  0xa76b02d7: sub    $0xc,%esp
  0xa76b02da: mov    %ecx,0x8(%esp)
  0xa76b02de: mov    %edx,0x4(%esp)
  0xa76b02e2: mov    0xc(%esp),%edi
  0xa76b02e6: mov    %edi,(%esp)
  0xa76b02e9: mov    0x28(%ebx),%ecx
  0xa76b02ec: push   %eax
  0xa76b02ed: jmp    *%ecx

AHE@0xb668fd64: 0xaa000000 i2c: 0xa76b0380 c2i: 0xa76b0410 c2iUV: 0xa76b03ef
i2c argument handler #0 for: receiver (Ljava/lang/String;)Z (221 bytes generated)
c2i argument handler starts at 0xa76b0410
  0xa76b0380: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0383: mov    $0xa75b1ac0,%edi
  0xa76b0388: cmp    %edi,%eax
  0xa76b038a: jbe    0xa76b039d
  0xa76b0390: mov    $0xa7691ac0,%edi
  0xa76b0395: cmp    %edi,%eax
  0xa76b0397: jb     0xa76b03c8
  0xa76b039d: mov    $0xa75af400,%edi
  0xa76b03a2: cmp    %edi,%eax
  0xa76b03a4: jbe    0xa76b03b7
  0xa76b03aa: mov    $0xa75b1728,%edi
  0xa76b03af: cmp    %edi,%eax
  0xa76b03b1: jb     0xa76b03c8
  ;; i2c adapter must return to an interpreter frame
  0xa76b03b7: push   $0xb75a2830
  0xa76b03bc: call   0xa76b03c1
  0xa76b03c1: pusha  
  0xa76b03c2: call   0xb7052f32
  0xa76b03c7: hlt    
  ;; } verify_i2ce 
  0xa76b03c8: mov    %esp,%edi
  0xa76b03ca: and    $0xfffffff0,%esp
  0xa76b03cd: push   %eax
  0xa76b03ce: mov    %edi,%eax
  0xa76b03d0: mov    0x30(%ebx),%edi
  0xa76b03d3: mov    0x8(%eax),%ecx
  0xa76b03d6: mov    0x4(%eax),%edx
  0xa76b03d9: mov    %esp,%eax
  0xa76b03db: shr    $0xc,%eax
  0xa76b03de: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b03e5: mov    %ebx,0x16c(%eax)
  0xa76b03eb: mov    %ebx,%eax
  0xa76b03ed: jmp    *%edi
  0xa76b03ef: mov    0x4(%ecx),%ebx
  0xa76b03f2: cmp    0x8(%eax),%ebx
  0xa76b03f5: mov    0x4(%eax),%ebx
  0xa76b03f8: jne    0xa76b040b
  0xa76b03fe: cmpl   $0x0,0x34(%ebx)
  0xa76b0405: je     0xa76b044a
  0xa76b040b: jmp    0xa7692560
  0xa76b0410: cmpl   $0x0,0x34(%ebx)
  0xa76b0417: je     0xa76b044a
  0xa76b041d: mov    (%esp),%eax
  0xa76b0420: pusha  
  0xa76b0421: pushf  
  0xa76b0422: sub    $0x10,%esp
  0xa76b0425: vmovsd %xmm0,(%esp)
  0xa76b042a: vmovsd %xmm1,0x8(%esp)
  0xa76b0430: push   %eax
  0xa76b0431: push   %ebx
  0xa76b0432: call   0xb71d62fc
  0xa76b0437: add    $0x8,%esp
  0xa76b043a: vmovsd (%esp),%xmm0
  0xa76b043f: vmovsd 0x8(%esp),%xmm1
  0xa76b0445: add    $0x10,%esp
  0xa76b0448: popf   
  0xa76b0449: popa   
  0xa76b044a: pop    %eax
  0xa76b044b: mov    %esp,%esi
  0xa76b044d: sub    $0x8,%esp
  0xa76b0450: mov    %ecx,0x4(%esp)
  0xa76b0454: mov    %edx,(%esp)
  0xa76b0457: mov    0x28(%ebx),%ecx
  0xa76b045a: push   %eax
  0xa76b045b: jmp    *%ecx

AHE@0xb668fd88: 0xaaaaaaa0 i2c: 0xa76b0500 c2i: 0xa76b05b6 c2iUV: 0xa76b0595
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; (299 bytes generated)
c2i argument handler starts at 0xa76b05b6
  0xa76b0500: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0503: mov    $0xa75b1ac0,%edi
  0xa76b0508: cmp    %edi,%eax
  0xa76b050a: jbe    0xa76b051d
  0xa76b0510: mov    $0xa7691ac0,%edi
  0xa76b0515: cmp    %edi,%eax
  0xa76b0517: jb     0xa76b0548
  0xa76b051d: mov    $0xa75af400,%edi
  0xa76b0522: cmp    %edi,%eax
  0xa76b0524: jbe    0xa76b0537
  0xa76b052a: mov    $0xa75b1728,%edi
  0xa76b052f: cmp    %edi,%eax
  0xa76b0531: jb     0xa76b0548
  ;; i2c adapter must return to an interpreter frame
  0xa76b0537: push   $0xb75a2830
  0xa76b053c: call   0xa76b0541
  0xa76b0541: pusha  
  0xa76b0542: call   0xb7052f32
  0xa76b0547: hlt    
  ;; } verify_i2ce 
  0xa76b0548: mov    %esp,%edi
  0xa76b054a: sub    $0x18,%esp
  0xa76b054d: and    $0xfffffff0,%esp
  0xa76b0550: push   %eax
  0xa76b0551: mov    %edi,%eax
  0xa76b0553: mov    0x30(%ebx),%edi
  0xa76b0556: mov    0x1c(%eax),%ecx
  0xa76b0559: mov    0x18(%eax),%edx
  0xa76b055c: mov    0x14(%eax),%esi
  0xa76b055f: mov    %esi,0x4(%esp)
  0xa76b0563: mov    0x10(%eax),%esi
  0xa76b0566: mov    %esi,0x8(%esp)
  0xa76b056a: mov    0xc(%eax),%esi
  0xa76b056d: mov    %esi,0xc(%esp)
  0xa76b0571: mov    0x8(%eax),%esi
  0xa76b0574: mov    %esi,0x10(%esp)
  0xa76b0578: mov    0x4(%eax),%esi
  0xa76b057b: mov    %esi,0x14(%esp)
  0xa76b057f: mov    %esp,%eax
  0xa76b0581: shr    $0xc,%eax
  0xa76b0584: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b058b: mov    %ebx,0x16c(%eax)
  0xa76b0591: mov    %ebx,%eax
  0xa76b0593: jmp    *%edi
  0xa76b0595: mov    0x4(%ecx),%ebx
  0xa76b0598: cmp    0x8(%eax),%ebx
  0xa76b059b: mov    0x4(%eax),%ebx
  0xa76b059e: jne    0xa76b05b1
  0xa76b05a4: cmpl   $0x0,0x34(%ebx)
  0xa76b05ab: je     0xa76b05f0
  0xa76b05b1: jmp    0xa7692560
  0xa76b05b6: cmpl   $0x0,0x34(%ebx)
  0xa76b05bd: je     0xa76b05f0
  0xa76b05c3: mov    (%esp),%eax
  0xa76b05c6: pusha  
  0xa76b05c7: pushf  
  0xa76b05c8: sub    $0x10,%esp
  0xa76b05cb: vmovsd %xmm0,(%esp)
  0xa76b05d0: vmovsd %xmm1,0x8(%esp)
  0xa76b05d6: push   %eax
  0xa76b05d7: push   %ebx
  0xa76b05d8: call   0xb71d62fc
  0xa76b05dd: add    $0x8,%esp
  0xa76b05e0: vmovsd (%esp),%xmm0
  0xa76b05e5: vmovsd 0x8(%esp),%xmm1
  0xa76b05eb: add    $0x10,%esp
  0xa76b05ee: popf   
  0xa76b05ef: popa   
  0xa76b05f0: pop    %eax
  0xa76b05f1: mov    %esp,%esi
  0xa76b05f3: sub    $0x1c,%esp
  0xa76b05f6: mov    %ecx,0x18(%esp)
  0xa76b05fa: mov    %edx,0x14(%esp)
  0xa76b05fe: mov    0x1c(%esp),%edi
  0xa76b0602: mov    %edi,0x10(%esp)
  0xa76b0606: mov    0x20(%esp),%edi
  0xa76b060a: mov    %edi,0xc(%esp)
  0xa76b060e: mov    0x24(%esp),%edi
  0xa76b0612: mov    %edi,0x8(%esp)
  0xa76b0616: mov    0x28(%esp),%edi
  0xa76b061a: mov    %edi,0x4(%esp)
  0xa76b061e: mov    0x2c(%esp),%edi
  0xa76b0622: mov    %edi,(%esp)
  0xa76b0625: mov    0x28(%ebx),%ecx
  0xa76b0628: push   %eax
  0xa76b0629: jmp    *%ecx

AHE@0xb668fdac: 0xaaaaaaa0 i2c: 0xa76b06c0 c2i: 0xa76b0776 c2iUV: 0xa76b0755
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; (299 bytes generated)
c2i argument handler starts at 0xa76b0776
  0xa76b06c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b06c3: mov    $0xa75b1ac0,%edi
  0xa76b06c8: cmp    %edi,%eax
  0xa76b06ca: jbe    0xa76b06dd
  0xa76b06d0: mov    $0xa7691ac0,%edi
  0xa76b06d5: cmp    %edi,%eax
  0xa76b06d7: jb     0xa76b0708
  0xa76b06dd: mov    $0xa75af400,%edi
  0xa76b06e2: cmp    %edi,%eax
  0xa76b06e4: jbe    0xa76b06f7
  0xa76b06ea: mov    $0xa75b1728,%edi
  0xa76b06ef: cmp    %edi,%eax
  0xa76b06f1: jb     0xa76b0708
  ;; i2c adapter must return to an interpreter frame
  0xa76b06f7: push   $0xb75a2830
  0xa76b06fc: call   0xa76b0701
  0xa76b0701: pusha  
  0xa76b0702: call   0xb7052f32
  0xa76b0707: hlt    
  ;; } verify_i2ce 
  0xa76b0708: mov    %esp,%edi
  0xa76b070a: sub    $0x18,%esp
  0xa76b070d: and    $0xfffffff0,%esp
  0xa76b0710: push   %eax
  0xa76b0711: mov    %edi,%eax
  0xa76b0713: mov    0x30(%ebx),%edi
  0xa76b0716: mov    0x1c(%eax),%ecx
  0xa76b0719: mov    0x18(%eax),%edx
  0xa76b071c: mov    0x14(%eax),%esi
  0xa76b071f: mov    %esi,0x4(%esp)
  0xa76b0723: mov    0x10(%eax),%esi
  0xa76b0726: mov    %esi,0x8(%esp)
  0xa76b072a: mov    0xc(%eax),%esi
  0xa76b072d: mov    %esi,0xc(%esp)
  0xa76b0731: mov    0x8(%eax),%esi
  0xa76b0734: mov    %esi,0x10(%esp)
  0xa76b0738: mov    0x4(%eax),%esi
  0xa76b073b: mov    %esi,0x14(%esp)
  0xa76b073f: mov    %esp,%eax
  0xa76b0741: shr    $0xc,%eax
  0xa76b0744: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b074b: mov    %ebx,0x16c(%eax)
  0xa76b0751: mov    %ebx,%eax
  0xa76b0753: jmp    *%edi
  0xa76b0755: mov    0x4(%ecx),%ebx
  0xa76b0758: cmp    0x8(%eax),%ebx
  0xa76b075b: mov    0x4(%eax),%ebx
  0xa76b075e: jne    0xa76b0771
  0xa76b0764: cmpl   $0x0,0x34(%ebx)
  0xa76b076b: je     0xa76b07b0
  0xa76b0771: jmp    0xa7692560
  0xa76b0776: cmpl   $0x0,0x34(%ebx)
  0xa76b077d: je     0xa76b07b0
  0xa76b0783: mov    (%esp),%eax
  0xa76b0786: pusha  
  0xa76b0787: pushf  
  0xa76b0788: sub    $0x10,%esp
  0xa76b078b: vmovsd %xmm0,(%esp)
  0xa76b0790: vmovsd %xmm1,0x8(%esp)
  0xa76b0796: push   %eax
  0xa76b0797: push   %ebx
  0xa76b0798: call   0xb71d62fc
  0xa76b079d: add    $0x8,%esp
  0xa76b07a0: vmovsd (%esp),%xmm0
  0xa76b07a5: vmovsd 0x8(%esp),%xmm1
  0xa76b07ab: add    $0x10,%esp
  0xa76b07ae: popf   
  0xa76b07af: popa   
  0xa76b07b0: pop    %eax
  0xa76b07b1: mov    %esp,%esi
  0xa76b07b3: sub    $0x1c,%esp
  0xa76b07b6: mov    %ecx,0x18(%esp)
  0xa76b07ba: mov    %edx,0x14(%esp)
  0xa76b07be: mov    0x1c(%esp),%edi
  0xa76b07c2: mov    %edi,0x10(%esp)
  0xa76b07c6: mov    0x20(%esp),%edi
  0xa76b07ca: mov    %edi,0xc(%esp)
  0xa76b07ce: mov    0x24(%esp),%edi
  0xa76b07d2: mov    %edi,0x8(%esp)
  0xa76b07d6: mov    0x28(%esp),%edi
  0xa76b07da: mov    %edi,0x4(%esp)
  0xa76b07de: mov    0x2c(%esp),%edi
  0xa76b07e2: mov    %edi,(%esp)
  0xa76b07e5: mov    0x28(%ebx),%ecx
  0xa76b07e8: push   %eax
  0xa76b07e9: jmp    *%ecx

AHE@0xb668fdd0: 0xaaaaaa00 i2c: 0xa76b0880 c2i: 0xa76b092f c2iUV: 0xa76b090e
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; (284 bytes generated)
c2i argument handler starts at 0xa76b092f
  0xa76b0880: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0883: mov    $0xa75b1ac0,%edi
  0xa76b0888: cmp    %edi,%eax
  0xa76b088a: jbe    0xa76b089d
  0xa76b0890: mov    $0xa7691ac0,%edi
  0xa76b0895: cmp    %edi,%eax
  0xa76b0897: jb     0xa76b08c8
  0xa76b089d: mov    $0xa75af400,%edi
  0xa76b08a2: cmp    %edi,%eax
  0xa76b08a4: jbe    0xa76b08b7
  0xa76b08aa: mov    $0xa75b1728,%edi
  0xa76b08af: cmp    %edi,%eax
  0xa76b08b1: jb     0xa76b08c8
  ;; i2c adapter must return to an interpreter frame
  0xa76b08b7: push   $0xb75a2830
  0xa76b08bc: call   0xa76b08c1
  0xa76b08c1: pusha  
  0xa76b08c2: call   0xb7052f32
  0xa76b08c7: hlt    
  ;; } verify_i2ce 
  0xa76b08c8: mov    %esp,%edi
  0xa76b08ca: sub    $0x10,%esp
  0xa76b08cd: and    $0xfffffff0,%esp
  0xa76b08d0: push   %eax
  0xa76b08d1: mov    %edi,%eax
  0xa76b08d3: mov    0x30(%ebx),%edi
  0xa76b08d6: mov    0x18(%eax),%ecx
  0xa76b08d9: mov    0x14(%eax),%edx
  0xa76b08dc: mov    0x10(%eax),%esi
  0xa76b08df: mov    %esi,0x4(%esp)
  0xa76b08e3: mov    0xc(%eax),%esi
  0xa76b08e6: mov    %esi,0x8(%esp)
  0xa76b08ea: mov    0x8(%eax),%esi
  0xa76b08ed: mov    %esi,0xc(%esp)
  0xa76b08f1: mov    0x4(%eax),%esi
  0xa76b08f4: mov    %esi,0x10(%esp)
  0xa76b08f8: mov    %esp,%eax
  0xa76b08fa: shr    $0xc,%eax
  0xa76b08fd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b0904: mov    %ebx,0x16c(%eax)
  0xa76b090a: mov    %ebx,%eax
  0xa76b090c: jmp    *%edi
  0xa76b090e: mov    0x4(%ecx),%ebx
  0xa76b0911: cmp    0x8(%eax),%ebx
  0xa76b0914: mov    0x4(%eax),%ebx
  0xa76b0917: jne    0xa76b092a
  0xa76b091d: cmpl   $0x0,0x34(%ebx)
  0xa76b0924: je     0xa76b0969
  0xa76b092a: jmp    0xa7692560
  0xa76b092f: cmpl   $0x0,0x34(%ebx)
  0xa76b0936: je     0xa76b0969
  0xa76b093c: mov    (%esp),%eax
  0xa76b093f: pusha  
  0xa76b0940: pushf  
  0xa76b0941: sub    $0x10,%esp
  0xa76b0944: vmovsd %xmm0,(%esp)
  0xa76b0949: vmovsd %xmm1,0x8(%esp)
  0xa76b094f: push   %eax
  0xa76b0950: push   %ebx
  0xa76b0951: call   0xb71d62fc
  0xa76b0956: add    $0x8,%esp
  0xa76b0959: vmovsd (%esp),%xmm0
  0xa76b095e: vmovsd 0x8(%esp),%xmm1
  0xa76b0964: add    $0x10,%esp
  0xa76b0967: popf   
  0xa76b0968: popa   
  0xa76b0969: pop    %eax
  0xa76b096a: mov    %esp,%esi
  0xa76b096c: sub    $0x18,%esp
  0xa76b096f: mov    %ecx,0x14(%esp)
  0xa76b0973: mov    %edx,0x10(%esp)
  0xa76b0977: mov    0x18(%esp),%edi
  0xa76b097b: mov    %edi,0xc(%esp)
  0xa76b097f: mov    0x1c(%esp),%edi
  0xa76b0983: mov    %edi,0x8(%esp)
  0xa76b0987: mov    0x20(%esp),%edi
  0xa76b098b: mov    %edi,0x4(%esp)
  0xa76b098f: mov    0x24(%esp),%edi
  0xa76b0993: mov    %edi,(%esp)
  0xa76b0996: mov    0x28(%ebx),%ecx
  0xa76b0999: push   %eax
  0xa76b099a: jmp    *%ecx

AHE@0xb668fdf4: 0xaaa00000 i2c: 0xa76b0a40 c2i: 0xa76b0ada c2iUV: 0xa76b0ab9
i2c argument handler #0 for: receiver (Ljava/lang/Class;Ljava/security/ProtectionDomain;)V (239 bytes generated)
c2i argument handler starts at 0xa76b0ada
  0xa76b0a40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0a43: mov    $0xa75b1ac0,%edi
  0xa76b0a48: cmp    %edi,%eax
  0xa76b0a4a: jbe    0xa76b0a5d
  0xa76b0a50: mov    $0xa7691ac0,%edi
  0xa76b0a55: cmp    %edi,%eax
  0xa76b0a57: jb     0xa76b0a88
  0xa76b0a5d: mov    $0xa75af400,%edi
  0xa76b0a62: cmp    %edi,%eax
  0xa76b0a64: jbe    0xa76b0a77
  0xa76b0a6a: mov    $0xa75b1728,%edi
  0xa76b0a6f: cmp    %edi,%eax
  0xa76b0a71: jb     0xa76b0a88
  ;; i2c adapter must return to an interpreter frame
  0xa76b0a77: push   $0xb75a2830
  0xa76b0a7c: call   0xa76b0a81
  0xa76b0a81: pusha  
  0xa76b0a82: call   0xb7052f32
  0xa76b0a87: hlt    
  ;; } verify_i2ce 
  0xa76b0a88: mov    %esp,%edi
  0xa76b0a8a: sub    $0x8,%esp
  0xa76b0a8d: and    $0xfffffff0,%esp
  0xa76b0a90: push   %eax
  0xa76b0a91: mov    %edi,%eax
  0xa76b0a93: mov    0x30(%ebx),%edi
  0xa76b0a96: mov    0xc(%eax),%ecx
  0xa76b0a99: mov    0x8(%eax),%edx
  0xa76b0a9c: mov    0x4(%eax),%esi
  0xa76b0a9f: mov    %esi,0x4(%esp)
  0xa76b0aa3: mov    %esp,%eax
  0xa76b0aa5: shr    $0xc,%eax
  0xa76b0aa8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b0aaf: mov    %ebx,0x16c(%eax)
  0xa76b0ab5: mov    %ebx,%eax
  0xa76b0ab7: jmp    *%edi
  0xa76b0ab9: mov    0x4(%ecx),%ebx
  0xa76b0abc: cmp    0x8(%eax),%ebx
  0xa76b0abf: mov    0x4(%eax),%ebx
  0xa76b0ac2: jne    0xa76b0ad5
  0xa76b0ac8: cmpl   $0x0,0x34(%ebx)
  0xa76b0acf: je     0xa76b0b14
  0xa76b0ad5: jmp    0xa7692560
  0xa76b0ada: cmpl   $0x0,0x34(%ebx)
  0xa76b0ae1: je     0xa76b0b14
  0xa76b0ae7: mov    (%esp),%eax
  0xa76b0aea: pusha  
  0xa76b0aeb: pushf  
  0xa76b0aec: sub    $0x10,%esp
  0xa76b0aef: vmovsd %xmm0,(%esp)
  0xa76b0af4: vmovsd %xmm1,0x8(%esp)
  0xa76b0afa: push   %eax
  0xa76b0afb: push   %ebx
  0xa76b0afc: call   0xb71d62fc
  0xa76b0b01: add    $0x8,%esp
  0xa76b0b04: vmovsd (%esp),%xmm0
  0xa76b0b09: vmovsd 0x8(%esp),%xmm1
  0xa76b0b0f: add    $0x10,%esp
  0xa76b0b12: popf   
  0xa76b0b13: popa   
  0xa76b0b14: pop    %eax
  0xa76b0b15: mov    %esp,%esi
  0xa76b0b17: sub    $0xc,%esp
  0xa76b0b1a: mov    %ecx,0x8(%esp)
  0xa76b0b1e: mov    %edx,0x4(%esp)
  0xa76b0b22: mov    0xc(%esp),%edi
  0xa76b0b26: mov    %edi,(%esp)
  0xa76b0b29: mov    0x28(%ebx),%ecx
  0xa76b0b2c: push   %eax
  0xa76b0b2d: jmp    *%ecx

AHE@0xb668fe18: 0xaa000000 i2c: 0xa76b0bc0 c2i: 0xa76b0c50 c2iUV: 0xa76b0c2f
i2c argument handler #0 for: receiver (Ljava/security/ProtectionDomain;)Ljava/lang/String; (221 bytes generated)
c2i argument handler starts at 0xa76b0c50
  0xa76b0bc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0bc3: mov    $0xa75b1ac0,%edi
  0xa76b0bc8: cmp    %edi,%eax
  0xa76b0bca: jbe    0xa76b0bdd
  0xa76b0bd0: mov    $0xa7691ac0,%edi
  0xa76b0bd5: cmp    %edi,%eax
  0xa76b0bd7: jb     0xa76b0c08
  0xa76b0bdd: mov    $0xa75af400,%edi
  0xa76b0be2: cmp    %edi,%eax
  0xa76b0be4: jbe    0xa76b0bf7
  0xa76b0bea: mov    $0xa75b1728,%edi
  0xa76b0bef: cmp    %edi,%eax
  0xa76b0bf1: jb     0xa76b0c08
  ;; i2c adapter must return to an interpreter frame
  0xa76b0bf7: push   $0xb75a2830
  0xa76b0bfc: call   0xa76b0c01
  0xa76b0c01: pusha  
  0xa76b0c02: call   0xb7052f32
  0xa76b0c07: hlt    
  ;; } verify_i2ce 
  0xa76b0c08: mov    %esp,%edi
  0xa76b0c0a: and    $0xfffffff0,%esp
  0xa76b0c0d: push   %eax
  0xa76b0c0e: mov    %edi,%eax
  0xa76b0c10: mov    0x30(%ebx),%edi
  0xa76b0c13: mov    0x8(%eax),%ecx
  0xa76b0c16: mov    0x4(%eax),%edx
  0xa76b0c19: mov    %esp,%eax
  0xa76b0c1b: shr    $0xc,%eax
  0xa76b0c1e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b0c25: mov    %ebx,0x16c(%eax)
  0xa76b0c2b: mov    %ebx,%eax
  0xa76b0c2d: jmp    *%edi
  0xa76b0c2f: mov    0x4(%ecx),%ebx
  0xa76b0c32: cmp    0x8(%eax),%ebx
  0xa76b0c35: mov    0x4(%eax),%ebx
  0xa76b0c38: jne    0xa76b0c4b
  0xa76b0c3e: cmpl   $0x0,0x34(%ebx)
  0xa76b0c45: je     0xa76b0c8a
  0xa76b0c4b: jmp    0xa7692560
  0xa76b0c50: cmpl   $0x0,0x34(%ebx)
  0xa76b0c57: je     0xa76b0c8a
  0xa76b0c5d: mov    (%esp),%eax
  0xa76b0c60: pusha  
  0xa76b0c61: pushf  
  0xa76b0c62: sub    $0x10,%esp
  0xa76b0c65: vmovsd %xmm0,(%esp)
  0xa76b0c6a: vmovsd %xmm1,0x8(%esp)
  0xa76b0c70: push   %eax
  0xa76b0c71: push   %ebx
  0xa76b0c72: call   0xb71d62fc
  0xa76b0c77: add    $0x8,%esp
  0xa76b0c7a: vmovsd (%esp),%xmm0
  0xa76b0c7f: vmovsd 0x8(%esp),%xmm1
  0xa76b0c85: add    $0x10,%esp
  0xa76b0c88: popf   
  0xa76b0c89: popa   
  0xa76b0c8a: pop    %eax
  0xa76b0c8b: mov    %esp,%esi
  0xa76b0c8d: sub    $0x8,%esp
  0xa76b0c90: mov    %ecx,0x4(%esp)
  0xa76b0c94: mov    %edx,(%esp)
  0xa76b0c97: mov    0x28(%ebx),%ecx
  0xa76b0c9a: push   %eax
  0xa76b0c9b: jmp    *%ecx

AHE@0xb668fe3c: 0xaaa00000 i2c: 0xa76b0d40 c2i: 0xa76b0dda c2iUV: 0xa76b0db9
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain; (239 bytes generated)
c2i argument handler starts at 0xa76b0dda
  0xa76b0d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0d43: mov    $0xa75b1ac0,%edi
  0xa76b0d48: cmp    %edi,%eax
  0xa76b0d4a: jbe    0xa76b0d5d
  0xa76b0d50: mov    $0xa7691ac0,%edi
  0xa76b0d55: cmp    %edi,%eax
  0xa76b0d57: jb     0xa76b0d88
  0xa76b0d5d: mov    $0xa75af400,%edi
  0xa76b0d62: cmp    %edi,%eax
  0xa76b0d64: jbe    0xa76b0d77
  0xa76b0d6a: mov    $0xa75b1728,%edi
  0xa76b0d6f: cmp    %edi,%eax
  0xa76b0d71: jb     0xa76b0d88
  ;; i2c adapter must return to an interpreter frame
  0xa76b0d77: push   $0xb75a2830
  0xa76b0d7c: call   0xa76b0d81
  0xa76b0d81: pusha  
  0xa76b0d82: call   0xb7052f32
  0xa76b0d87: hlt    
  ;; } verify_i2ce 
  0xa76b0d88: mov    %esp,%edi
  0xa76b0d8a: sub    $0x8,%esp
  0xa76b0d8d: and    $0xfffffff0,%esp
  0xa76b0d90: push   %eax
  0xa76b0d91: mov    %edi,%eax
  0xa76b0d93: mov    0x30(%ebx),%edi
  0xa76b0d96: mov    0xc(%eax),%ecx
  0xa76b0d99: mov    0x8(%eax),%edx
  0xa76b0d9c: mov    0x4(%eax),%esi
  0xa76b0d9f: mov    %esi,0x4(%esp)
  0xa76b0da3: mov    %esp,%eax
  0xa76b0da5: shr    $0xc,%eax
  0xa76b0da8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b0daf: mov    %ebx,0x16c(%eax)
  0xa76b0db5: mov    %ebx,%eax
  0xa76b0db7: jmp    *%edi
  0xa76b0db9: mov    0x4(%ecx),%ebx
  0xa76b0dbc: cmp    0x8(%eax),%ebx
  0xa76b0dbf: mov    0x4(%eax),%ebx
  0xa76b0dc2: jne    0xa76b0dd5
  0xa76b0dc8: cmpl   $0x0,0x34(%ebx)
  0xa76b0dcf: je     0xa76b0e14
  0xa76b0dd5: jmp    0xa7692560
  0xa76b0dda: cmpl   $0x0,0x34(%ebx)
  0xa76b0de1: je     0xa76b0e14
  0xa76b0de7: mov    (%esp),%eax
  0xa76b0dea: pusha  
  0xa76b0deb: pushf  
  0xa76b0dec: sub    $0x10,%esp
  0xa76b0def: vmovsd %xmm0,(%esp)
  0xa76b0df4: vmovsd %xmm1,0x8(%esp)
  0xa76b0dfa: push   %eax
  0xa76b0dfb: push   %ebx
  0xa76b0dfc: call   0xb71d62fc
  0xa76b0e01: add    $0x8,%esp
  0xa76b0e04: vmovsd (%esp),%xmm0
  0xa76b0e09: vmovsd 0x8(%esp),%xmm1
  0xa76b0e0f: add    $0x10,%esp
  0xa76b0e12: popf   
  0xa76b0e13: popa   
  0xa76b0e14: pop    %eax
  0xa76b0e15: mov    %esp,%esi
  0xa76b0e17: sub    $0xc,%esp
  0xa76b0e1a: mov    %ecx,0x8(%esp)
  0xa76b0e1e: mov    %edx,0x4(%esp)
  0xa76b0e22: mov    0xc(%esp),%edi
  0xa76b0e26: mov    %edi,(%esp)
  0xa76b0e29: mov    0x28(%ebx),%ecx
  0xa76b0e2c: push   %eax
  0xa76b0e2d: jmp    *%ecx

AHE@0xb668fe60: 0xaaaa0000 i2c: 0xa76b0ec0 c2i: 0xa76b0f61 c2iUV: 0xa76b0f40
i2c argument handler #0 for: receiver (Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class; (254 bytes generated)
c2i argument handler starts at 0xa76b0f61
  0xa76b0ec0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b0ec3: mov    $0xa75b1ac0,%edi
  0xa76b0ec8: cmp    %edi,%eax
  0xa76b0eca: jbe    0xa76b0edd
  0xa76b0ed0: mov    $0xa7691ac0,%edi
  0xa76b0ed5: cmp    %edi,%eax
  0xa76b0ed7: jb     0xa76b0f08
  0xa76b0edd: mov    $0xa75af400,%edi
  0xa76b0ee2: cmp    %edi,%eax
  0xa76b0ee4: jbe    0xa76b0ef7
  0xa76b0eea: mov    $0xa75b1728,%edi
  0xa76b0eef: cmp    %edi,%eax
  0xa76b0ef1: jb     0xa76b0f08
  ;; i2c adapter must return to an interpreter frame
  0xa76b0ef7: push   $0xb75a2830
  0xa76b0efc: call   0xa76b0f01
  0xa76b0f01: pusha  
  0xa76b0f02: call   0xb7052f32
  0xa76b0f07: hlt    
  ;; } verify_i2ce 
  0xa76b0f08: mov    %esp,%edi
  0xa76b0f0a: sub    $0x8,%esp
  0xa76b0f0d: and    $0xfffffff0,%esp
  0xa76b0f10: push   %eax
  0xa76b0f11: mov    %edi,%eax
  0xa76b0f13: mov    0x30(%ebx),%edi
  0xa76b0f16: mov    0x10(%eax),%ecx
  0xa76b0f19: mov    0xc(%eax),%edx
  0xa76b0f1c: mov    0x8(%eax),%esi
  0xa76b0f1f: mov    %esi,0x4(%esp)
  0xa76b0f23: mov    0x4(%eax),%esi
  0xa76b0f26: mov    %esi,0x8(%esp)
  0xa76b0f2a: mov    %esp,%eax
  0xa76b0f2c: shr    $0xc,%eax
  0xa76b0f2f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b0f36: mov    %ebx,0x16c(%eax)
  0xa76b0f3c: mov    %ebx,%eax
  0xa76b0f3e: jmp    *%edi
  0xa76b0f40: mov    0x4(%ecx),%ebx
  0xa76b0f43: cmp    0x8(%eax),%ebx
  0xa76b0f46: mov    0x4(%eax),%ebx
  0xa76b0f49: jne    0xa76b0f5c
  0xa76b0f4f: cmpl   $0x0,0x34(%ebx)
  0xa76b0f56: je     0xa76b0f9b
  0xa76b0f5c: jmp    0xa7692560
  0xa76b0f61: cmpl   $0x0,0x34(%ebx)
  0xa76b0f68: je     0xa76b0f9b
  0xa76b0f6e: mov    (%esp),%eax
  0xa76b0f71: pusha  
  0xa76b0f72: pushf  
  0xa76b0f73: sub    $0x10,%esp
  0xa76b0f76: vmovsd %xmm0,(%esp)
  0xa76b0f7b: vmovsd %xmm1,0x8(%esp)
  0xa76b0f81: push   %eax
  0xa76b0f82: push   %ebx
  0xa76b0f83: call   0xb71d62fc
  0xa76b0f88: add    $0x8,%esp
  0xa76b0f8b: vmovsd (%esp),%xmm0
  0xa76b0f90: vmovsd 0x8(%esp),%xmm1
  0xa76b0f96: add    $0x10,%esp
  0xa76b0f99: popf   
  0xa76b0f9a: popa   
  0xa76b0f9b: pop    %eax
  0xa76b0f9c: mov    %esp,%esi
  0xa76b0f9e: sub    $0x10,%esp
  0xa76b0fa1: mov    %ecx,0xc(%esp)
  0xa76b0fa5: mov    %edx,0x8(%esp)
  0xa76b0fa9: mov    0x10(%esp),%edi
  0xa76b0fad: mov    %edi,0x4(%esp)
  0xa76b0fb1: mov    0x14(%esp),%edi
  0xa76b0fb5: mov    %edi,(%esp)
  0xa76b0fb8: mov    0x28(%ebx),%ecx
  0xa76b0fbb: push   %eax
  0xa76b0fbc: jmp    *%ecx

AHE@0xb668fe84: 0xaaaaa000 i2c: 0xa76b1040 c2i: 0xa76b10e8 c2iUV: 0xa76b10c7
i2c argument handler #0 for: receiver (Ljava/lang/String;[BII)Ljava/lang/Class; (269 bytes generated)
c2i argument handler starts at 0xa76b10e8
  0xa76b1040: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1043: mov    $0xa75b1ac0,%edi
  0xa76b1048: cmp    %edi,%eax
  0xa76b104a: jbe    0xa76b105d
  0xa76b1050: mov    $0xa7691ac0,%edi
  0xa76b1055: cmp    %edi,%eax
  0xa76b1057: jb     0xa76b1088
  0xa76b105d: mov    $0xa75af400,%edi
  0xa76b1062: cmp    %edi,%eax
  0xa76b1064: jbe    0xa76b1077
  0xa76b106a: mov    $0xa75b1728,%edi
  0xa76b106f: cmp    %edi,%eax
  0xa76b1071: jb     0xa76b1088
  ;; i2c adapter must return to an interpreter frame
  0xa76b1077: push   $0xb75a2830
  0xa76b107c: call   0xa76b1081
  0xa76b1081: pusha  
  0xa76b1082: call   0xb7052f32
  0xa76b1087: hlt    
  ;; } verify_i2ce 
  0xa76b1088: mov    %esp,%edi
  0xa76b108a: sub    $0x10,%esp
  0xa76b108d: and    $0xfffffff0,%esp
  0xa76b1090: push   %eax
  0xa76b1091: mov    %edi,%eax
  0xa76b1093: mov    0x30(%ebx),%edi
  0xa76b1096: mov    0x14(%eax),%ecx
  0xa76b1099: mov    0x10(%eax),%edx
  0xa76b109c: mov    0xc(%eax),%esi
  0xa76b109f: mov    %esi,0x4(%esp)
  0xa76b10a3: mov    0x8(%eax),%esi
  0xa76b10a6: mov    %esi,0x8(%esp)
  0xa76b10aa: mov    0x4(%eax),%esi
  0xa76b10ad: mov    %esi,0xc(%esp)
  0xa76b10b1: mov    %esp,%eax
  0xa76b10b3: shr    $0xc,%eax
  0xa76b10b6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b10bd: mov    %ebx,0x16c(%eax)
  0xa76b10c3: mov    %ebx,%eax
  0xa76b10c5: jmp    *%edi
  0xa76b10c7: mov    0x4(%ecx),%ebx
  0xa76b10ca: cmp    0x8(%eax),%ebx
  0xa76b10cd: mov    0x4(%eax),%ebx
  0xa76b10d0: jne    0xa76b10e3
  0xa76b10d6: cmpl   $0x0,0x34(%ebx)
  0xa76b10dd: je     0xa76b1122
  0xa76b10e3: jmp    0xa7692560
  0xa76b10e8: cmpl   $0x0,0x34(%ebx)
  0xa76b10ef: je     0xa76b1122
  0xa76b10f5: mov    (%esp),%eax
  0xa76b10f8: pusha  
  0xa76b10f9: pushf  
  0xa76b10fa: sub    $0x10,%esp
  0xa76b10fd: vmovsd %xmm0,(%esp)
  0xa76b1102: vmovsd %xmm1,0x8(%esp)
  0xa76b1108: push   %eax
  0xa76b1109: push   %ebx
  0xa76b110a: call   0xb71d62fc
  0xa76b110f: add    $0x8,%esp
  0xa76b1112: vmovsd (%esp),%xmm0
  0xa76b1117: vmovsd 0x8(%esp),%xmm1
  0xa76b111d: add    $0x10,%esp
  0xa76b1120: popf   
  0xa76b1121: popa   
  0xa76b1122: pop    %eax
  0xa76b1123: mov    %esp,%esi
  0xa76b1125: sub    $0x14,%esp
  0xa76b1128: mov    %ecx,0x10(%esp)
  0xa76b112c: mov    %edx,0xc(%esp)
  0xa76b1130: mov    0x14(%esp),%edi
  0xa76b1134: mov    %edi,0x8(%esp)
  0xa76b1138: mov    0x18(%esp),%edi
  0xa76b113c: mov    %edi,0x4(%esp)
  0xa76b1140: mov    0x1c(%esp),%edi
  0xa76b1144: mov    %edi,(%esp)
  0xa76b1147: mov    0x28(%ebx),%ecx
  0xa76b114a: push   %eax
  0xa76b114b: jmp    *%ecx

AHE@0xb668fea8: 0xaaaaaa00 i2c: 0xa76b1200 c2i: 0xa76b12af c2iUV: 0xa76b128e
i2c argument handler #0 for: receiver (Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class; (284 bytes generated)
c2i argument handler starts at 0xa76b12af
  0xa76b1200: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1203: mov    $0xa75b1ac0,%edi
  0xa76b1208: cmp    %edi,%eax
  0xa76b120a: jbe    0xa76b121d
  0xa76b1210: mov    $0xa7691ac0,%edi
  0xa76b1215: cmp    %edi,%eax
  0xa76b1217: jb     0xa76b1248
  0xa76b121d: mov    $0xa75af400,%edi
  0xa76b1222: cmp    %edi,%eax
  0xa76b1224: jbe    0xa76b1237
  0xa76b122a: mov    $0xa75b1728,%edi
  0xa76b122f: cmp    %edi,%eax
  0xa76b1231: jb     0xa76b1248
  ;; i2c adapter must return to an interpreter frame
  0xa76b1237: push   $0xb75a2830
  0xa76b123c: call   0xa76b1241
  0xa76b1241: pusha  
  0xa76b1242: call   0xb7052f32
  0xa76b1247: hlt    
  ;; } verify_i2ce 
  0xa76b1248: mov    %esp,%edi
  0xa76b124a: sub    $0x10,%esp
  0xa76b124d: and    $0xfffffff0,%esp
  0xa76b1250: push   %eax
  0xa76b1251: mov    %edi,%eax
  0xa76b1253: mov    0x30(%ebx),%edi
  0xa76b1256: mov    0x18(%eax),%ecx
  0xa76b1259: mov    0x14(%eax),%edx
  0xa76b125c: mov    0x10(%eax),%esi
  0xa76b125f: mov    %esi,0x4(%esp)
  0xa76b1263: mov    0xc(%eax),%esi
  0xa76b1266: mov    %esi,0x8(%esp)
  0xa76b126a: mov    0x8(%eax),%esi
  0xa76b126d: mov    %esi,0xc(%esp)
  0xa76b1271: mov    0x4(%eax),%esi
  0xa76b1274: mov    %esi,0x10(%esp)
  0xa76b1278: mov    %esp,%eax
  0xa76b127a: shr    $0xc,%eax
  0xa76b127d: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b1284: mov    %ebx,0x16c(%eax)
  0xa76b128a: mov    %ebx,%eax
  0xa76b128c: jmp    *%edi
  0xa76b128e: mov    0x4(%ecx),%ebx
  0xa76b1291: cmp    0x8(%eax),%ebx
  0xa76b1294: mov    0x4(%eax),%ebx
  0xa76b1297: jne    0xa76b12aa
  0xa76b129d: cmpl   $0x0,0x34(%ebx)
  0xa76b12a4: je     0xa76b12e9
  0xa76b12aa: jmp    0xa7692560
  0xa76b12af: cmpl   $0x0,0x34(%ebx)
  0xa76b12b6: je     0xa76b12e9
  0xa76b12bc: mov    (%esp),%eax
  0xa76b12bf: pusha  
  0xa76b12c0: pushf  
  0xa76b12c1: sub    $0x10,%esp
  0xa76b12c4: vmovsd %xmm0,(%esp)
  0xa76b12c9: vmovsd %xmm1,0x8(%esp)
  0xa76b12cf: push   %eax
  0xa76b12d0: push   %ebx
  0xa76b12d1: call   0xb71d62fc
  0xa76b12d6: add    $0x8,%esp
  0xa76b12d9: vmovsd (%esp),%xmm0
  0xa76b12de: vmovsd 0x8(%esp),%xmm1
  0xa76b12e4: add    $0x10,%esp
  0xa76b12e7: popf   
  0xa76b12e8: popa   
  0xa76b12e9: pop    %eax
  0xa76b12ea: mov    %esp,%esi
  0xa76b12ec: sub    $0x18,%esp
  0xa76b12ef: mov    %ecx,0x14(%esp)
  0xa76b12f3: mov    %edx,0x10(%esp)
  0xa76b12f7: mov    0x18(%esp),%edi
  0xa76b12fb: mov    %edi,0xc(%esp)
  0xa76b12ff: mov    0x1c(%esp),%edi
  0xa76b1303: mov    %edi,0x8(%esp)
  0xa76b1307: mov    0x20(%esp),%edi
  0xa76b130b: mov    %edi,0x4(%esp)
  0xa76b130f: mov    0x24(%esp),%edi
  0xa76b1313: mov    %edi,(%esp)
  0xa76b1316: mov    0x28(%ebx),%ecx
  0xa76b1319: push   %eax
  0xa76b131a: jmp    *%ecx

AHE@0xb668fecc: 0xaaaa0000 i2c: 0xa76b13c0 c2i: 0xa76b1461 c2iUV: 0xa76b1440
i2c argument handler #0 for: receiver ([BII)Ljava/lang/Class; (254 bytes generated)
c2i argument handler starts at 0xa76b1461
  0xa76b13c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b13c3: mov    $0xa75b1ac0,%edi
  0xa76b13c8: cmp    %edi,%eax
  0xa76b13ca: jbe    0xa76b13dd
  0xa76b13d0: mov    $0xa7691ac0,%edi
  0xa76b13d5: cmp    %edi,%eax
  0xa76b13d7: jb     0xa76b1408
  0xa76b13dd: mov    $0xa75af400,%edi
  0xa76b13e2: cmp    %edi,%eax
  0xa76b13e4: jbe    0xa76b13f7
  0xa76b13ea: mov    $0xa75b1728,%edi
  0xa76b13ef: cmp    %edi,%eax
  0xa76b13f1: jb     0xa76b1408
  ;; i2c adapter must return to an interpreter frame
  0xa76b13f7: push   $0xb75a2830
  0xa76b13fc: call   0xa76b1401
  0xa76b1401: pusha  
  0xa76b1402: call   0xb7052f32
  0xa76b1407: hlt    
  ;; } verify_i2ce 
  0xa76b1408: mov    %esp,%edi
  0xa76b140a: sub    $0x8,%esp
  0xa76b140d: and    $0xfffffff0,%esp
  0xa76b1410: push   %eax
  0xa76b1411: mov    %edi,%eax
  0xa76b1413: mov    0x30(%ebx),%edi
  0xa76b1416: mov    0x10(%eax),%ecx
  0xa76b1419: mov    0xc(%eax),%edx
  0xa76b141c: mov    0x8(%eax),%esi
  0xa76b141f: mov    %esi,0x4(%esp)
  0xa76b1423: mov    0x4(%eax),%esi
  0xa76b1426: mov    %esi,0x8(%esp)
  0xa76b142a: mov    %esp,%eax
  0xa76b142c: shr    $0xc,%eax
  0xa76b142f: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b1436: mov    %ebx,0x16c(%eax)
  0xa76b143c: mov    %ebx,%eax
  0xa76b143e: jmp    *%edi
  0xa76b1440: mov    0x4(%ecx),%ebx
  0xa76b1443: cmp    0x8(%eax),%ebx
  0xa76b1446: mov    0x4(%eax),%ebx
  0xa76b1449: jne    0xa76b145c
  0xa76b144f: cmpl   $0x0,0x34(%ebx)
  0xa76b1456: je     0xa76b149b
  0xa76b145c: jmp    0xa7692560
  0xa76b1461: cmpl   $0x0,0x34(%ebx)
  0xa76b1468: je     0xa76b149b
  0xa76b146e: mov    (%esp),%eax
  0xa76b1471: pusha  
  0xa76b1472: pushf  
  0xa76b1473: sub    $0x10,%esp
  0xa76b1476: vmovsd %xmm0,(%esp)
  0xa76b147b: vmovsd %xmm1,0x8(%esp)
  0xa76b1481: push   %eax
  0xa76b1482: push   %ebx
  0xa76b1483: call   0xb71d62fc
  0xa76b1488: add    $0x8,%esp
  0xa76b148b: vmovsd (%esp),%xmm0
  0xa76b1490: vmovsd 0x8(%esp),%xmm1
  0xa76b1496: add    $0x10,%esp
  0xa76b1499: popf   
  0xa76b149a: popa   
  0xa76b149b: pop    %eax
  0xa76b149c: mov    %esp,%esi
  0xa76b149e: sub    $0x10,%esp
  0xa76b14a1: mov    %ecx,0xc(%esp)
  0xa76b14a5: mov    %edx,0x8(%esp)
  0xa76b14a9: mov    0x10(%esp),%edi
  0xa76b14ad: mov    %edi,0x4(%esp)
  0xa76b14b1: mov    0x14(%esp),%edi
  0xa76b14b5: mov    %edi,(%esp)
  0xa76b14b8: mov    0x28(%ebx),%ecx
  0xa76b14bb: push   %eax
  0xa76b14bc: jmp    *%ecx

AHE@0xb668fef0: 0xaa000000 i2c: 0xa76b1540 c2i: 0xa76b15d0 c2iUV: 0xa76b15af
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76b15d0
  0xa76b1540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1543: mov    $0xa75b1ac0,%edi
  0xa76b1548: cmp    %edi,%eax
  0xa76b154a: jbe    0xa76b155d
  0xa76b1550: mov    $0xa7691ac0,%edi
  0xa76b1555: cmp    %edi,%eax
  0xa76b1557: jb     0xa76b1588
  0xa76b155d: mov    $0xa75af400,%edi
  0xa76b1562: cmp    %edi,%eax
  0xa76b1564: jbe    0xa76b1577
  0xa76b156a: mov    $0xa75b1728,%edi
  0xa76b156f: cmp    %edi,%eax
  0xa76b1571: jb     0xa76b1588
  ;; i2c adapter must return to an interpreter frame
  0xa76b1577: push   $0xb75a2830
  0xa76b157c: call   0xa76b1581
  0xa76b1581: pusha  
  0xa76b1582: call   0xb7052f32
  0xa76b1587: hlt    
  ;; } verify_i2ce 
  0xa76b1588: mov    %esp,%edi
  0xa76b158a: and    $0xfffffff0,%esp
  0xa76b158d: push   %eax
  0xa76b158e: mov    %edi,%eax
  0xa76b1590: mov    0x30(%ebx),%edi
  0xa76b1593: mov    0x8(%eax),%ecx
  0xa76b1596: mov    0x4(%eax),%edx
  0xa76b1599: mov    %esp,%eax
  0xa76b159b: shr    $0xc,%eax
  0xa76b159e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b15a5: mov    %ebx,0x16c(%eax)
  0xa76b15ab: mov    %ebx,%eax
  0xa76b15ad: jmp    *%edi
  0xa76b15af: mov    0x4(%ecx),%ebx
  0xa76b15b2: cmp    0x8(%eax),%ebx
  0xa76b15b5: mov    0x4(%eax),%ebx
  0xa76b15b8: jne    0xa76b15cb
  0xa76b15be: cmpl   $0x0,0x34(%ebx)
  0xa76b15c5: je     0xa76b160a
  0xa76b15cb: jmp    0xa7692560
  0xa76b15d0: cmpl   $0x0,0x34(%ebx)
  0xa76b15d7: je     0xa76b160a
  0xa76b15dd: mov    (%esp),%eax
  0xa76b15e0: pusha  
  0xa76b15e1: pushf  
  0xa76b15e2: sub    $0x10,%esp
  0xa76b15e5: vmovsd %xmm0,(%esp)
  0xa76b15ea: vmovsd %xmm1,0x8(%esp)
  0xa76b15f0: push   %eax
  0xa76b15f1: push   %ebx
  0xa76b15f2: call   0xb71d62fc
  0xa76b15f7: add    $0x8,%esp
  0xa76b15fa: vmovsd (%esp),%xmm0
  0xa76b15ff: vmovsd 0x8(%esp),%xmm1
  0xa76b1605: add    $0x10,%esp
  0xa76b1608: popf   
  0xa76b1609: popa   
  0xa76b160a: pop    %eax
  0xa76b160b: mov    %esp,%esi
  0xa76b160d: sub    $0x8,%esp
  0xa76b1610: mov    %ecx,0x4(%esp)
  0xa76b1614: mov    %edx,(%esp)
  0xa76b1617: mov    0x28(%ebx),%ecx
  0xa76b161a: push   %eax
  0xa76b161b: jmp    *%ecx

AHE@0xb668ff14: 0xaa000000 i2c: 0xa76b16c0 c2i: 0xa76b1750 c2iUV: 0xa76b172f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Object; (221 bytes generated)
c2i argument handler starts at 0xa76b1750
  0xa76b16c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b16c3: mov    $0xa75b1ac0,%edi
  0xa76b16c8: cmp    %edi,%eax
  0xa76b16ca: jbe    0xa76b16dd
  0xa76b16d0: mov    $0xa7691ac0,%edi
  0xa76b16d5: cmp    %edi,%eax
  0xa76b16d7: jb     0xa76b1708
  0xa76b16dd: mov    $0xa75af400,%edi
  0xa76b16e2: cmp    %edi,%eax
  0xa76b16e4: jbe    0xa76b16f7
  0xa76b16ea: mov    $0xa75b1728,%edi
  0xa76b16ef: cmp    %edi,%eax
  0xa76b16f1: jb     0xa76b1708
  ;; i2c adapter must return to an interpreter frame
  0xa76b16f7: push   $0xb75a2830
  0xa76b16fc: call   0xa76b1701
  0xa76b1701: pusha  
  0xa76b1702: call   0xb7052f32
  0xa76b1707: hlt    
  ;; } verify_i2ce 
  0xa76b1708: mov    %esp,%edi
  0xa76b170a: and    $0xfffffff0,%esp
  0xa76b170d: push   %eax
  0xa76b170e: mov    %edi,%eax
  0xa76b1710: mov    0x30(%ebx),%edi
  0xa76b1713: mov    0x8(%eax),%ecx
  0xa76b1716: mov    0x4(%eax),%edx
  0xa76b1719: mov    %esp,%eax
  0xa76b171b: shr    $0xc,%eax
  0xa76b171e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b1725: mov    %ebx,0x16c(%eax)
  0xa76b172b: mov    %ebx,%eax
  0xa76b172d: jmp    *%edi
  0xa76b172f: mov    0x4(%ecx),%ebx
  0xa76b1732: cmp    0x8(%eax),%ebx
  0xa76b1735: mov    0x4(%eax),%ebx
  0xa76b1738: jne    0xa76b174b
  0xa76b173e: cmpl   $0x0,0x34(%ebx)
  0xa76b1745: je     0xa76b178a
  0xa76b174b: jmp    0xa7692560
  0xa76b1750: cmpl   $0x0,0x34(%ebx)
  0xa76b1757: je     0xa76b178a
  0xa76b175d: mov    (%esp),%eax
  0xa76b1760: pusha  
  0xa76b1761: pushf  
  0xa76b1762: sub    $0x10,%esp
  0xa76b1765: vmovsd %xmm0,(%esp)
  0xa76b176a: vmovsd %xmm1,0x8(%esp)
  0xa76b1770: push   %eax
  0xa76b1771: push   %ebx
  0xa76b1772: call   0xb71d62fc
  0xa76b1777: add    $0x8,%esp
  0xa76b177a: vmovsd (%esp),%xmm0
  0xa76b177f: vmovsd 0x8(%esp),%xmm1
  0xa76b1785: add    $0x10,%esp
  0xa76b1788: popf   
  0xa76b1789: popa   
  0xa76b178a: pop    %eax
  0xa76b178b: mov    %esp,%esi
  0xa76b178d: sub    $0x8,%esp
  0xa76b1790: mov    %ecx,0x4(%esp)
  0xa76b1794: mov    %edx,(%esp)
  0xa76b1797: mov    0x28(%ebx),%ecx
  0xa76b179a: push   %eax
  0xa76b179b: jmp    *%ecx

AHE@0xb668ff38: 0x i2c: 0xa76b1840 c2i: 0xa76b18ca c2iUV: 0xa76b18a9
i2c argument handler #0 for: static ()Ljava/lang/Void; (208 bytes generated)
c2i argument handler starts at 0xa76b18ca
  0xa76b1840: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1843: mov    $0xa75b1ac0,%edi
  0xa76b1848: cmp    %edi,%eax
  0xa76b184a: jbe    0xa76b185d
  0xa76b1850: mov    $0xa7691ac0,%edi
  0xa76b1855: cmp    %edi,%eax
  0xa76b1857: jb     0xa76b1888
  0xa76b185d: mov    $0xa75af400,%edi
  0xa76b1862: cmp    %edi,%eax
  0xa76b1864: jbe    0xa76b1877
  0xa76b186a: mov    $0xa75b1728,%edi
  0xa76b186f: cmp    %edi,%eax
  0xa76b1871: jb     0xa76b1888
  ;; i2c adapter must return to an interpreter frame
  0xa76b1877: push   $0xb75a2830
  0xa76b187c: call   0xa76b1881
  0xa76b1881: pusha  
  0xa76b1882: call   0xb7052f32
  0xa76b1887: hlt    
  ;; } verify_i2ce 
  0xa76b1888: mov    %esp,%edi
  0xa76b188a: and    $0xfffffff0,%esp
  0xa76b188d: push   %eax
  0xa76b188e: mov    %edi,%eax
  0xa76b1890: mov    0x30(%ebx),%edi
  0xa76b1893: mov    %esp,%eax
  0xa76b1895: shr    $0xc,%eax
  0xa76b1898: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b189f: mov    %ebx,0x16c(%eax)
  0xa76b18a5: mov    %ebx,%eax
  0xa76b18a7: jmp    *%edi
  0xa76b18a9: mov    0x4(%ecx),%ebx
  0xa76b18ac: cmp    0x8(%eax),%ebx
  0xa76b18af: mov    0x4(%eax),%ebx
  0xa76b18b2: jne    0xa76b18c5
  0xa76b18b8: cmpl   $0x0,0x34(%ebx)
  0xa76b18bf: je     0xa76b1904
  0xa76b18c5: jmp    0xa7692560
  0xa76b18ca: cmpl   $0x0,0x34(%ebx)
  0xa76b18d1: je     0xa76b1904
  0xa76b18d7: mov    (%esp),%eax
  0xa76b18da: pusha  
  0xa76b18db: pushf  
  0xa76b18dc: sub    $0x10,%esp
  0xa76b18df: vmovsd %xmm0,(%esp)
  0xa76b18e4: vmovsd %xmm1,0x8(%esp)
  0xa76b18ea: push   %eax
  0xa76b18eb: push   %ebx
  0xa76b18ec: call   0xb71d62fc
  0xa76b18f1: add    $0x8,%esp
  0xa76b18f4: vmovsd (%esp),%xmm0
  0xa76b18f9: vmovsd 0x8(%esp),%xmm1
  0xa76b18ff: add    $0x10,%esp
  0xa76b1902: popf   
  0xa76b1903: popa   
  0xa76b1904: pop    %eax
  0xa76b1905: mov    %esp,%esi
  0xa76b1907: sub    $0x0,%esp
  0xa76b190a: mov    0x28(%ebx),%ecx
  0xa76b190d: push   %eax
  0xa76b190e: jmp    *%ecx

AHE@0xb668ff5c: 0xa0000000 i2c: 0xa76b19c0 c2i: 0xa76b1a4d c2iUV: 0xa76b1a2c
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/net/URL; (214 bytes generated)
c2i argument handler starts at 0xa76b1a4d
  0xa76b19c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b19c3: mov    $0xa75b1ac0,%edi
  0xa76b19c8: cmp    %edi,%eax
  0xa76b19ca: jbe    0xa76b19dd
  0xa76b19d0: mov    $0xa7691ac0,%edi
  0xa76b19d5: cmp    %edi,%eax
  0xa76b19d7: jb     0xa76b1a08
  0xa76b19dd: mov    $0xa75af400,%edi
  0xa76b19e2: cmp    %edi,%eax
  0xa76b19e4: jbe    0xa76b19f7
  0xa76b19ea: mov    $0xa75b1728,%edi
  0xa76b19ef: cmp    %edi,%eax
  0xa76b19f1: jb     0xa76b1a08
  ;; i2c adapter must return to an interpreter frame
  0xa76b19f7: push   $0xb75a2830
  0xa76b19fc: call   0xa76b1a01
  0xa76b1a01: pusha  
  0xa76b1a02: call   0xb7052f32
  0xa76b1a07: hlt    
  ;; } verify_i2ce 
  0xa76b1a08: mov    %esp,%edi
  0xa76b1a0a: and    $0xfffffff0,%esp
  0xa76b1a0d: push   %eax
  0xa76b1a0e: mov    %edi,%eax
  0xa76b1a10: mov    0x30(%ebx),%edi
  0xa76b1a13: mov    0x4(%eax),%ecx
  0xa76b1a16: mov    %esp,%eax
  0xa76b1a18: shr    $0xc,%eax
  0xa76b1a1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b1a22: mov    %ebx,0x16c(%eax)
  0xa76b1a28: mov    %ebx,%eax
  0xa76b1a2a: jmp    *%edi
  0xa76b1a2c: mov    0x4(%ecx),%ebx
  0xa76b1a2f: cmp    0x8(%eax),%ebx
  0xa76b1a32: mov    0x4(%eax),%ebx
  0xa76b1a35: jne    0xa76b1a48
  0xa76b1a3b: cmpl   $0x0,0x34(%ebx)
  0xa76b1a42: je     0xa76b1a87
  0xa76b1a48: jmp    0xa7692560
  0xa76b1a4d: cmpl   $0x0,0x34(%ebx)
  0xa76b1a54: je     0xa76b1a87
  0xa76b1a5a: mov    (%esp),%eax
  0xa76b1a5d: pusha  
  0xa76b1a5e: pushf  
  0xa76b1a5f: sub    $0x10,%esp
  0xa76b1a62: vmovsd %xmm0,(%esp)
  0xa76b1a67: vmovsd %xmm1,0x8(%esp)
  0xa76b1a6d: push   %eax
  0xa76b1a6e: push   %ebx
  0xa76b1a6f: call   0xb71d62fc
  0xa76b1a74: add    $0x8,%esp
  0xa76b1a77: vmovsd (%esp),%xmm0
  0xa76b1a7c: vmovsd 0x8(%esp),%xmm1
  0xa76b1a82: add    $0x10,%esp
  0xa76b1a85: popf   
  0xa76b1a86: popa   
  0xa76b1a87: pop    %eax
  0xa76b1a88: mov    %esp,%esi
  0xa76b1a8a: sub    $0x4,%esp
  0xa76b1a8d: mov    %ecx,(%esp)
  0xa76b1a90: mov    0x28(%ebx),%ecx
  0xa76b1a93: push   %eax
  0xa76b1a94: jmp    *%ecx

AHE@0xb668ff80: 0xa0000000 i2c: 0xa76b1b40 c2i: 0xa76b1bcd c2iUV: 0xa76b1bac
i2c argument handler #0 for: static (Ljava/lang/String;)Ljava/io/InputStream; (214 bytes generated)
c2i argument handler starts at 0xa76b1bcd
  0xa76b1b40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1b43: mov    $0xa75b1ac0,%edi
  0xa76b1b48: cmp    %edi,%eax
  0xa76b1b4a: jbe    0xa76b1b5d
  0xa76b1b50: mov    $0xa7691ac0,%edi
  0xa76b1b55: cmp    %edi,%eax
  0xa76b1b57: jb     0xa76b1b88
  0xa76b1b5d: mov    $0xa75af400,%edi
  0xa76b1b62: cmp    %edi,%eax
  0xa76b1b64: jbe    0xa76b1b77
  0xa76b1b6a: mov    $0xa75b1728,%edi
  0xa76b1b6f: cmp    %edi,%eax
  0xa76b1b71: jb     0xa76b1b88
  ;; i2c adapter must return to an interpreter frame
  0xa76b1b77: push   $0xb75a2830
  0xa76b1b7c: call   0xa76b1b81
  0xa76b1b81: pusha  
  0xa76b1b82: call   0xb7052f32
  0xa76b1b87: hlt    
  ;; } verify_i2ce 
  0xa76b1b88: mov    %esp,%edi
  0xa76b1b8a: and    $0xfffffff0,%esp
  0xa76b1b8d: push   %eax
  0xa76b1b8e: mov    %edi,%eax
  0xa76b1b90: mov    0x30(%ebx),%edi
  0xa76b1b93: mov    0x4(%eax),%ecx
  0xa76b1b96: mov    %esp,%eax
  0xa76b1b98: shr    $0xc,%eax
  0xa76b1b9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b1ba2: mov    %ebx,0x16c(%eax)
  0xa76b1ba8: mov    %ebx,%eax
  0xa76b1baa: jmp    *%edi
  0xa76b1bac: mov    0x4(%ecx),%ebx
  0xa76b1baf: cmp    0x8(%eax),%ebx
  0xa76b1bb2: mov    0x4(%eax),%ebx
  0xa76b1bb5: jne    0xa76b1bc8
  0xa76b1bbb: cmpl   $0x0,0x34(%ebx)
  0xa76b1bc2: je     0xa76b1c07
  0xa76b1bc8: jmp    0xa7692560
  0xa76b1bcd: cmpl   $0x0,0x34(%ebx)
  0xa76b1bd4: je     0xa76b1c07
  0xa76b1bda: mov    (%esp),%eax
  0xa76b1bdd: pusha  
  0xa76b1bde: pushf  
  0xa76b1bdf: sub    $0x10,%esp
  0xa76b1be2: vmovsd %xmm0,(%esp)
  0xa76b1be7: vmovsd %xmm1,0x8(%esp)
  0xa76b1bed: push   %eax
  0xa76b1bee: push   %ebx
  0xa76b1bef: call   0xb71d62fc
  0xa76b1bf4: add    $0x8,%esp
  0xa76b1bf7: vmovsd (%esp),%xmm0
  0xa76b1bfc: vmovsd 0x8(%esp),%xmm1
  0xa76b1c02: add    $0x10,%esp
  0xa76b1c05: popf   
  0xa76b1c06: popa   
  0xa76b1c07: pop    %eax
  0xa76b1c08: mov    %esp,%esi
  0xa76b1c0a: sub    $0x4,%esp
  0xa76b1c0d: mov    %ecx,(%esp)
  0xa76b1c10: mov    0x28(%ebx),%ecx
  0xa76b1c13: push   %eax
  0xa76b1c14: jmp    *%ecx

AHE@0xb668ffa4: 0xaa000000 i2c: 0xa76b1cc0 c2i: 0xa76b1d50 c2iUV: 0xa76b1d2f
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/Class;)V (221 bytes generated)
c2i argument handler starts at 0xa76b1d50
  0xa76b1cc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1cc3: mov    $0xa75b1ac0,%edi
  0xa76b1cc8: cmp    %edi,%eax
  0xa76b1cca: jbe    0xa76b1cdd
  0xa76b1cd0: mov    $0xa7691ac0,%edi
  0xa76b1cd5: cmp    %edi,%eax
  0xa76b1cd7: jb     0xa76b1d08
  0xa76b1cdd: mov    $0xa75af400,%edi
  0xa76b1ce2: cmp    %edi,%eax
  0xa76b1ce4: jbe    0xa76b1cf7
  0xa76b1cea: mov    $0xa75b1728,%edi
  0xa76b1cef: cmp    %edi,%eax
  0xa76b1cf1: jb     0xa76b1d08
  ;; i2c adapter must return to an interpreter frame
  0xa76b1cf7: push   $0xb75a2830
  0xa76b1cfc: call   0xa76b1d01
  0xa76b1d01: pusha  
  0xa76b1d02: call   0xb7052f32
  0xa76b1d07: hlt    
  ;; } verify_i2ce 
  0xa76b1d08: mov    %esp,%edi
  0xa76b1d0a: and    $0xfffffff0,%esp
  0xa76b1d0d: push   %eax
  0xa76b1d0e: mov    %edi,%eax
  0xa76b1d10: mov    0x30(%ebx),%edi
  0xa76b1d13: mov    0x8(%eax),%ecx
  0xa76b1d16: mov    0x4(%eax),%edx
  0xa76b1d19: mov    %esp,%eax
  0xa76b1d1b: shr    $0xc,%eax
  0xa76b1d1e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b1d25: mov    %ebx,0x16c(%eax)
  0xa76b1d2b: mov    %ebx,%eax
  0xa76b1d2d: jmp    *%edi
  0xa76b1d2f: mov    0x4(%ecx),%ebx
  0xa76b1d32: cmp    0x8(%eax),%ebx
  0xa76b1d35: mov    0x4(%eax),%ebx
  0xa76b1d38: jne    0xa76b1d4b
  0xa76b1d3e: cmpl   $0x0,0x34(%ebx)
  0xa76b1d45: je     0xa76b1d8a
  0xa76b1d4b: jmp    0xa7692560
  0xa76b1d50: cmpl   $0x0,0x34(%ebx)
  0xa76b1d57: je     0xa76b1d8a
  0xa76b1d5d: mov    (%esp),%eax
  0xa76b1d60: pusha  
  0xa76b1d61: pushf  
  0xa76b1d62: sub    $0x10,%esp
  0xa76b1d65: vmovsd %xmm0,(%esp)
  0xa76b1d6a: vmovsd %xmm1,0x8(%esp)
  0xa76b1d70: push   %eax
  0xa76b1d71: push   %ebx
  0xa76b1d72: call   0xb71d62fc
  0xa76b1d77: add    $0x8,%esp
  0xa76b1d7a: vmovsd (%esp),%xmm0
  0xa76b1d7f: vmovsd 0x8(%esp),%xmm1
  0xa76b1d85: add    $0x10,%esp
  0xa76b1d88: popf   
  0xa76b1d89: popa   
  0xa76b1d8a: pop    %eax
  0xa76b1d8b: mov    %esp,%esi
  0xa76b1d8d: sub    $0x8,%esp
  0xa76b1d90: mov    %ecx,0x4(%esp)
  0xa76b1d94: mov    %edx,(%esp)
  0xa76b1d97: mov    0x28(%ebx),%ecx
  0xa76b1d9a: push   %eax
  0xa76b1d9b: jmp    *%ecx

AHE@0xb668ffc8: 0x i2c: 0xa76b1e40 c2i: 0xa76b1eca c2iUV: 0xa76b1ea9
i2c argument handler #0 for: static ()Ljava/util/Stack; (208 bytes generated)
c2i argument handler starts at 0xa76b1eca
  0xa76b1e40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1e43: mov    $0xa75b1ac0,%edi
  0xa76b1e48: cmp    %edi,%eax
  0xa76b1e4a: jbe    0xa76b1e5d
  0xa76b1e50: mov    $0xa7691ac0,%edi
  0xa76b1e55: cmp    %edi,%eax
  0xa76b1e57: jb     0xa76b1e88
  0xa76b1e5d: mov    $0xa75af400,%edi
  0xa76b1e62: cmp    %edi,%eax
  0xa76b1e64: jbe    0xa76b1e77
  0xa76b1e6a: mov    $0xa75b1728,%edi
  0xa76b1e6f: cmp    %edi,%eax
  0xa76b1e71: jb     0xa76b1e88
  ;; i2c adapter must return to an interpreter frame
  0xa76b1e77: push   $0xb75a2830
  0xa76b1e7c: call   0xa76b1e81
  0xa76b1e81: pusha  
  0xa76b1e82: call   0xb7052f32
  0xa76b1e87: hlt    
  ;; } verify_i2ce 
  0xa76b1e88: mov    %esp,%edi
  0xa76b1e8a: and    $0xfffffff0,%esp
  0xa76b1e8d: push   %eax
  0xa76b1e8e: mov    %edi,%eax
  0xa76b1e90: mov    0x30(%ebx),%edi
  0xa76b1e93: mov    %esp,%eax
  0xa76b1e95: shr    $0xc,%eax
  0xa76b1e98: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b1e9f: mov    %ebx,0x16c(%eax)
  0xa76b1ea5: mov    %ebx,%eax
  0xa76b1ea7: jmp    *%edi
  0xa76b1ea9: mov    0x4(%ecx),%ebx
  0xa76b1eac: cmp    0x8(%eax),%ebx
  0xa76b1eaf: mov    0x4(%eax),%ebx
  0xa76b1eb2: jne    0xa76b1ec5
  0xa76b1eb8: cmpl   $0x0,0x34(%ebx)
  0xa76b1ebf: je     0xa76b1f04
  0xa76b1ec5: jmp    0xa7692560
  0xa76b1eca: cmpl   $0x0,0x34(%ebx)
  0xa76b1ed1: je     0xa76b1f04
  0xa76b1ed7: mov    (%esp),%eax
  0xa76b1eda: pusha  
  0xa76b1edb: pushf  
  0xa76b1edc: sub    $0x10,%esp
  0xa76b1edf: vmovsd %xmm0,(%esp)
  0xa76b1ee4: vmovsd %xmm1,0x8(%esp)
  0xa76b1eea: push   %eax
  0xa76b1eeb: push   %ebx
  0xa76b1eec: call   0xb71d62fc
  0xa76b1ef1: add    $0x8,%esp
  0xa76b1ef4: vmovsd (%esp),%xmm0
  0xa76b1ef9: vmovsd 0x8(%esp),%xmm1
  0xa76b1eff: add    $0x10,%esp
  0xa76b1f02: popf   
  0xa76b1f03: popa   
  0xa76b1f04: pop    %eax
  0xa76b1f05: mov    %esp,%esi
  0xa76b1f07: sub    $0x0,%esp
  0xa76b1f0a: mov    0x28(%ebx),%ecx
  0xa76b1f0d: push   %eax
  0xa76b1f0e: jmp    *%ecx

AHE@0xb668ffec: 0xaa000000 i2c: 0xa76b1fc0 c2i: 0xa76b2050 c2iUV: 0xa76b202f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Z (221 bytes generated)
c2i argument handler starts at 0xa76b2050
  0xa76b1fc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b1fc3: mov    $0xa75b1ac0,%edi
  0xa76b1fc8: cmp    %edi,%eax
  0xa76b1fca: jbe    0xa76b1fdd
  0xa76b1fd0: mov    $0xa7691ac0,%edi
  0xa76b1fd5: cmp    %edi,%eax
  0xa76b1fd7: jb     0xa76b2008
  0xa76b1fdd: mov    $0xa75af400,%edi
  0xa76b1fe2: cmp    %edi,%eax
  0xa76b1fe4: jbe    0xa76b1ff7
  0xa76b1fea: mov    $0xa75b1728,%edi
  0xa76b1fef: cmp    %edi,%eax
  0xa76b1ff1: jb     0xa76b2008
  ;; i2c adapter must return to an interpreter frame
  0xa76b1ff7: push   $0xb75a2830
  0xa76b1ffc: call   0xa76b2001
  0xa76b2001: pusha  
  0xa76b2002: call   0xb7052f32
  0xa76b2007: hlt    
  ;; } verify_i2ce 
  0xa76b2008: mov    %esp,%edi
  0xa76b200a: and    $0xfffffff0,%esp
  0xa76b200d: push   %eax
  0xa76b200e: mov    %edi,%eax
  0xa76b2010: mov    0x30(%ebx),%edi
  0xa76b2013: mov    0x8(%eax),%ecx
  0xa76b2016: mov    0x4(%eax),%edx
  0xa76b2019: mov    %esp,%eax
  0xa76b201b: shr    $0xc,%eax
  0xa76b201e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b2025: mov    %ebx,0x16c(%eax)
  0xa76b202b: mov    %ebx,%eax
  0xa76b202d: jmp    *%edi
  0xa76b202f: mov    0x4(%ecx),%ebx
  0xa76b2032: cmp    0x8(%eax),%ebx
  0xa76b2035: mov    0x4(%eax),%ebx
  0xa76b2038: jne    0xa76b204b
  0xa76b203e: cmpl   $0x0,0x34(%ebx)
  0xa76b2045: je     0xa76b208a
  0xa76b204b: jmp    0xa7692560
  0xa76b2050: cmpl   $0x0,0x34(%ebx)
  0xa76b2057: je     0xa76b208a
  0xa76b205d: mov    (%esp),%eax
  0xa76b2060: pusha  
  0xa76b2061: pushf  
  0xa76b2062: sub    $0x10,%esp
  0xa76b2065: vmovsd %xmm0,(%esp)
  0xa76b206a: vmovsd %xmm1,0x8(%esp)
  0xa76b2070: push   %eax
  0xa76b2071: push   %ebx
  0xa76b2072: call   0xb71d62fc
  0xa76b2077: add    $0x8,%esp
  0xa76b207a: vmovsd (%esp),%xmm0
  0xa76b207f: vmovsd 0x8(%esp),%xmm1
  0xa76b2085: add    $0x10,%esp
  0xa76b2088: popf   
  0xa76b2089: popa   
  0xa76b208a: pop    %eax
  0xa76b208b: mov    %esp,%esi
  0xa76b208d: sub    $0x8,%esp
  0xa76b2090: mov    %ecx,0x4(%esp)
  0xa76b2094: mov    %edx,(%esp)
  0xa76b2097: mov    0x28(%ebx),%ecx
  0xa76b209a: push   %eax
  0xa76b209b: jmp    *%ecx

AHE@0xb6690010: 0xaa000000 i2c: 0xa76b2140 c2i: 0xa76b21d0 c2iUV: 0xa76b21af
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/net/URL; (221 bytes generated)
c2i argument handler starts at 0xa76b21d0
  0xa76b2140: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b2143: mov    $0xa75b1ac0,%edi
  0xa76b2148: cmp    %edi,%eax
  0xa76b214a: jbe    0xa76b215d
  0xa76b2150: mov    $0xa7691ac0,%edi
  0xa76b2155: cmp    %edi,%eax
  0xa76b2157: jb     0xa76b2188
  0xa76b215d: mov    $0xa75af400,%edi
  0xa76b2162: cmp    %edi,%eax
  0xa76b2164: jbe    0xa76b2177
  0xa76b216a: mov    $0xa75b1728,%edi
  0xa76b216f: cmp    %edi,%eax
  0xa76b2171: jb     0xa76b2188
  ;; i2c adapter must return to an interpreter frame
  0xa76b2177: push   $0xb75a2830
  0xa76b217c: call   0xa76b2181
  0xa76b2181: pusha  
  0xa76b2182: call   0xb7052f32
  0xa76b2187: hlt    
  ;; } verify_i2ce 
  0xa76b2188: mov    %esp,%edi
  0xa76b218a: and    $0xfffffff0,%esp
  0xa76b218d: push   %eax
  0xa76b218e: mov    %edi,%eax
  0xa76b2190: mov    0x30(%ebx),%edi
  0xa76b2193: mov    0x8(%eax),%ecx
  0xa76b2196: mov    0x4(%eax),%edx
  0xa76b2199: mov    %esp,%eax
  0xa76b219b: shr    $0xc,%eax
  0xa76b219e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b21a5: mov    %ebx,0x16c(%eax)
  0xa76b21ab: mov    %ebx,%eax
  0xa76b21ad: jmp    *%edi
  0xa76b21af: mov    0x4(%ecx),%ebx
  0xa76b21b2: cmp    0x8(%eax),%ebx
  0xa76b21b5: mov    0x4(%eax),%ebx
  0xa76b21b8: jne    0xa76b21cb
  0xa76b21be: cmpl   $0x0,0x34(%ebx)
  0xa76b21c5: je     0xa76b220a
  0xa76b21cb: jmp    0xa7692560
  0xa76b21d0: cmpl   $0x0,0x34(%ebx)
  0xa76b21d7: je     0xa76b220a
  0xa76b21dd: mov    (%esp),%eax
  0xa76b21e0: pusha  
  0xa76b21e1: pushf  
  0xa76b21e2: sub    $0x10,%esp
  0xa76b21e5: vmovsd %xmm0,(%esp)
  0xa76b21ea: vmovsd %xmm1,0x8(%esp)
  0xa76b21f0: push   %eax
  0xa76b21f1: push   %ebx
  0xa76b21f2: call   0xb71d62fc
  0xa76b21f7: add    $0x8,%esp
  0xa76b21fa: vmovsd (%esp),%xmm0
  0xa76b21ff: vmovsd 0x8(%esp),%xmm1
  0xa76b2205: add    $0x10,%esp
  0xa76b2208: popf   
  0xa76b2209: popa   
  0xa76b220a: pop    %eax
  0xa76b220b: mov    %esp,%esi
  0xa76b220d: sub    $0x8,%esp
  0xa76b2210: mov    %ecx,0x4(%esp)
  0xa76b2214: mov    %edx,(%esp)
  0xa76b2217: mov    0x28(%ebx),%ecx
  0xa76b221a: push   %eax
  0xa76b221b: jmp    *%ecx

AHE@0xb6690034: 0xaa000000 i2c: 0xa76b22c0 c2i: 0xa76b2350 c2iUV: 0xa76b232f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/io/InputStream; (221 bytes generated)
c2i argument handler starts at 0xa76b2350
  0xa76b22c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b22c3: mov    $0xa75b1ac0,%edi
  0xa76b22c8: cmp    %edi,%eax
  0xa76b22ca: jbe    0xa76b22dd
  0xa76b22d0: mov    $0xa7691ac0,%edi
  0xa76b22d5: cmp    %edi,%eax
  0xa76b22d7: jb     0xa76b2308
  0xa76b22dd: mov    $0xa75af400,%edi
  0xa76b22e2: cmp    %edi,%eax
  0xa76b22e4: jbe    0xa76b22f7
  0xa76b22ea: mov    $0xa75b1728,%edi
  0xa76b22ef: cmp    %edi,%eax
  0xa76b22f1: jb     0xa76b2308
  ;; i2c adapter must return to an interpreter frame
  0xa76b22f7: push   $0xb75a2830
  0xa76b22fc: call   0xa76b2301
  0xa76b2301: pusha  
  0xa76b2302: call   0xb7052f32
  0xa76b2307: hlt    
  ;; } verify_i2ce 
  0xa76b2308: mov    %esp,%edi
  0xa76b230a: and    $0xfffffff0,%esp
  0xa76b230d: push   %eax
  0xa76b230e: mov    %edi,%eax
  0xa76b2310: mov    0x30(%ebx),%edi
  0xa76b2313: mov    0x8(%eax),%ecx
  0xa76b2316: mov    0x4(%eax),%edx
  0xa76b2319: mov    %esp,%eax
  0xa76b231b: shr    $0xc,%eax
  0xa76b231e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b2325: mov    %ebx,0x16c(%eax)
  0xa76b232b: mov    %ebx,%eax
  0xa76b232d: jmp    *%edi
  0xa76b232f: mov    0x4(%ecx),%ebx
  0xa76b2332: cmp    0x8(%eax),%ebx
  0xa76b2335: mov    0x4(%eax),%ebx
  0xa76b2338: jne    0xa76b234b
  0xa76b233e: cmpl   $0x0,0x34(%ebx)
  0xa76b2345: je     0xa76b238a
  0xa76b234b: jmp    0xa7692560
  0xa76b2350: cmpl   $0x0,0x34(%ebx)
  0xa76b2357: je     0xa76b238a
  0xa76b235d: mov    (%esp),%eax
  0xa76b2360: pusha  
  0xa76b2361: pushf  
  0xa76b2362: sub    $0x10,%esp
  0xa76b2365: vmovsd %xmm0,(%esp)
  0xa76b236a: vmovsd %xmm1,0x8(%esp)
  0xa76b2370: push   %eax
  0xa76b2371: push   %ebx
  0xa76b2372: call   0xb71d62fc
  0xa76b2377: add    $0x8,%esp
  0xa76b237a: vmovsd (%esp),%xmm0
  0xa76b237f: vmovsd 0x8(%esp),%xmm1
  0xa76b2385: add    $0x10,%esp
  0xa76b2388: popf   
  0xa76b2389: popa   
  0xa76b238a: pop    %eax
  0xa76b238b: mov    %esp,%esi
  0xa76b238d: sub    $0x8,%esp
  0xa76b2390: mov    %ecx,0x4(%esp)
  0xa76b2394: mov    %edx,(%esp)
  0xa76b2397: mov    0x28(%ebx),%ecx
  0xa76b239a: push   %eax
  0xa76b239b: jmp    *%ecx

AHE@0xb6690058: 0xaaa00000 i2c: 0xa76b2440 c2i: 0xa76b24da c2iUV: 0xa76b24b9
i2c argument handler #0 for: receiver (Ljava/lang/Class;[Ljava/lang/Object;)V (239 bytes generated)
c2i argument handler starts at 0xa76b24da
  0xa76b2440: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b2443: mov    $0xa75b1ac0,%edi
  0xa76b2448: cmp    %edi,%eax
  0xa76b244a: jbe    0xa76b245d
  0xa76b2450: mov    $0xa7691ac0,%edi
  0xa76b2455: cmp    %edi,%eax
  0xa76b2457: jb     0xa76b2488
  0xa76b245d: mov    $0xa75af400,%edi
  0xa76b2462: cmp    %edi,%eax
  0xa76b2464: jbe    0xa76b2477
  0xa76b246a: mov    $0xa75b1728,%edi
  0xa76b246f: cmp    %edi,%eax
  0xa76b2471: jb     0xa76b2488
  ;; i2c adapter must return to an interpreter frame
  0xa76b2477: push   $0xb75a2830
  0xa76b247c: call   0xa76b2481
  0xa76b2481: pusha  
  0xa76b2482: call   0xb7052f32
  0xa76b2487: hlt    
  ;; } verify_i2ce 
  0xa76b2488: mov    %esp,%edi
  0xa76b248a: sub    $0x8,%esp
  0xa76b248d: and    $0xfffffff0,%esp
  0xa76b2490: push   %eax
  0xa76b2491: mov    %edi,%eax
  0xa76b2493: mov    0x30(%ebx),%edi
  0xa76b2496: mov    0xc(%eax),%ecx
  0xa76b2499: mov    0x8(%eax),%edx
  0xa76b249c: mov    0x4(%eax),%esi
  0xa76b249f: mov    %esi,0x4(%esp)
  0xa76b24a3: mov    %esp,%eax
  0xa76b24a5: shr    $0xc,%eax
  0xa76b24a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b24af: mov    %ebx,0x16c(%eax)
  0xa76b24b5: mov    %ebx,%eax
  0xa76b24b7: jmp    *%edi
  0xa76b24b9: mov    0x4(%ecx),%ebx
  0xa76b24bc: cmp    0x8(%eax),%ebx
  0xa76b24bf: mov    0x4(%eax),%ebx
  0xa76b24c2: jne    0xa76b24d5
  0xa76b24c8: cmpl   $0x0,0x34(%ebx)
  0xa76b24cf: je     0xa76b2514
  0xa76b24d5: jmp    0xa7692560
  0xa76b24da: cmpl   $0x0,0x34(%ebx)
  0xa76b24e1: je     0xa76b2514
  0xa76b24e7: mov    (%esp),%eax
  0xa76b24ea: pusha  
  0xa76b24eb: pushf  
  0xa76b24ec: sub    $0x10,%esp
  0xa76b24ef: vmovsd %xmm0,(%esp)
  0xa76b24f4: vmovsd %xmm1,0x8(%esp)
  0xa76b24fa: push   %eax
  0xa76b24fb: push   %ebx
  0xa76b24fc: call   0xb71d62fc
  0xa76b2501: add    $0x8,%esp
  0xa76b2504: vmovsd (%esp),%xmm0
  0xa76b2509: vmovsd 0x8(%esp),%xmm1
  0xa76b250f: add    $0x10,%esp
  0xa76b2512: popf   
  0xa76b2513: popa   
  0xa76b2514: pop    %eax
  0xa76b2515: mov    %esp,%esi
  0xa76b2517: sub    $0xc,%esp
  0xa76b251a: mov    %ecx,0x8(%esp)
  0xa76b251e: mov    %edx,0x4(%esp)
  0xa76b2522: mov    0xc(%esp),%edi
  0xa76b2526: mov    %edi,(%esp)
  0xa76b2529: mov    0x28(%ebx),%ecx
  0xa76b252c: push   %eax
  0xa76b252d: jmp    *%ecx

AHE@0xb669007c: 0xaa000000 i2c: 0xa76b25c0 c2i: 0xa76b2650 c2iUV: 0xa76b262f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Package; (221 bytes generated)
c2i argument handler starts at 0xa76b2650
  0xa76b25c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b25c3: mov    $0xa75b1ac0,%edi
  0xa76b25c8: cmp    %edi,%eax
  0xa76b25ca: jbe    0xa76b25dd
  0xa76b25d0: mov    $0xa7691ac0,%edi
  0xa76b25d5: cmp    %edi,%eax
  0xa76b25d7: jb     0xa76b2608
  0xa76b25dd: mov    $0xa75af400,%edi
  0xa76b25e2: cmp    %edi,%eax
  0xa76b25e4: jbe    0xa76b25f7
  0xa76b25ea: mov    $0xa75b1728,%edi
  0xa76b25ef: cmp    %edi,%eax
  0xa76b25f1: jb     0xa76b2608
  ;; i2c adapter must return to an interpreter frame
  0xa76b25f7: push   $0xb75a2830
  0xa76b25fc: call   0xa76b2601
  0xa76b2601: pusha  
  0xa76b2602: call   0xb7052f32
  0xa76b2607: hlt    
  ;; } verify_i2ce 
  0xa76b2608: mov    %esp,%edi
  0xa76b260a: and    $0xfffffff0,%esp
  0xa76b260d: push   %eax
  0xa76b260e: mov    %edi,%eax
  0xa76b2610: mov    0x30(%ebx),%edi
  0xa76b2613: mov    0x8(%eax),%ecx
  0xa76b2616: mov    0x4(%eax),%edx
  0xa76b2619: mov    %esp,%eax
  0xa76b261b: shr    $0xc,%eax
  0xa76b261e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b2625: mov    %ebx,0x16c(%eax)
  0xa76b262b: mov    %ebx,%eax
  0xa76b262d: jmp    *%edi
  0xa76b262f: mov    0x4(%ecx),%ebx
  0xa76b2632: cmp    0x8(%eax),%ebx
  0xa76b2635: mov    0x4(%eax),%ebx
  0xa76b2638: jne    0xa76b264b
  0xa76b263e: cmpl   $0x0,0x34(%ebx)
  0xa76b2645: je     0xa76b268a
  0xa76b264b: jmp    0xa7692560
  0xa76b2650: cmpl   $0x0,0x34(%ebx)
  0xa76b2657: je     0xa76b268a
  0xa76b265d: mov    (%esp),%eax
  0xa76b2660: pusha  
  0xa76b2661: pushf  
  0xa76b2662: sub    $0x10,%esp
  0xa76b2665: vmovsd %xmm0,(%esp)
  0xa76b266a: vmovsd %xmm1,0x8(%esp)
  0xa76b2670: push   %eax
  0xa76b2671: push   %ebx
  0xa76b2672: call   0xb71d62fc
  0xa76b2677: add    $0x8,%esp
  0xa76b267a: vmovsd (%esp),%xmm0
  0xa76b267f: vmovsd 0x8(%esp),%xmm1
  0xa76b2685: add    $0x10,%esp
  0xa76b2688: popf   
  0xa76b2689: popa   
  0xa76b268a: pop    %eax
  0xa76b268b: mov    %esp,%esi
  0xa76b268d: sub    $0x8,%esp
  0xa76b2690: mov    %ecx,0x4(%esp)
  0xa76b2694: mov    %edx,(%esp)
  0xa76b2697: mov    0x28(%ebx),%ecx
  0xa76b269a: push   %eax
  0xa76b269b: jmp    *%ecx

AHE@0xb66900a0: 0xa0000000 i2c: 0xa76b2740 c2i: 0xa76b27cd c2iUV: 0xa76b27ac
i2c argument handler #0 for: static (Ljava/lang/Class;)Ljava/lang/ClassLoader; (214 bytes generated)
c2i argument handler starts at 0xa76b27cd
  0xa76b2740: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b2743: mov    $0xa75b1ac0,%edi
  0xa76b2748: cmp    %edi,%eax
  0xa76b274a: jbe    0xa76b275d
  0xa76b2750: mov    $0xa7691ac0,%edi
  0xa76b2755: cmp    %edi,%eax
  0xa76b2757: jb     0xa76b2788
  0xa76b275d: mov    $0xa75af400,%edi
  0xa76b2762: cmp    %edi,%eax
  0xa76b2764: jbe    0xa76b2777
  0xa76b276a: mov    $0xa75b1728,%edi
  0xa76b276f: cmp    %edi,%eax
  0xa76b2771: jb     0xa76b2788
  ;; i2c adapter must return to an interpreter frame
  0xa76b2777: push   $0xb75a2830
  0xa76b277c: call   0xa76b2781
  0xa76b2781: pusha  
  0xa76b2782: call   0xb7052f32
  0xa76b2787: hlt    
  ;; } verify_i2ce 
  0xa76b2788: mov    %esp,%edi
  0xa76b278a: and    $0xfffffff0,%esp
  0xa76b278d: push   %eax
  0xa76b278e: mov    %edi,%eax
  0xa76b2790: mov    0x30(%ebx),%edi
  0xa76b2793: mov    0x4(%eax),%ecx
  0xa76b2796: mov    %esp,%eax
  0xa76b2798: shr    $0xc,%eax
  0xa76b279b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b27a2: mov    %ebx,0x16c(%eax)
  0xa76b27a8: mov    %ebx,%eax
  0xa76b27aa: jmp    *%edi
  0xa76b27ac: mov    0x4(%ecx),%ebx
  0xa76b27af: cmp    0x8(%eax),%ebx
  0xa76b27b2: mov    0x4(%eax),%ebx
  0xa76b27b5: jne    0xa76b27c8
  0xa76b27bb: cmpl   $0x0,0x34(%ebx)
  0xa76b27c2: je     0xa76b2807
  0xa76b27c8: jmp    0xa7692560
  0xa76b27cd: cmpl   $0x0,0x34(%ebx)
  0xa76b27d4: je     0xa76b2807
  0xa76b27da: mov    (%esp),%eax
  0xa76b27dd: pusha  
  0xa76b27de: pushf  
  0xa76b27df: sub    $0x10,%esp
  0xa76b27e2: vmovsd %xmm0,(%esp)
  0xa76b27e7: vmovsd %xmm1,0x8(%esp)
  0xa76b27ed: push   %eax
  0xa76b27ee: push   %ebx
  0xa76b27ef: call   0xb71d62fc
  0xa76b27f4: add    $0x8,%esp
  0xa76b27f7: vmovsd (%esp),%xmm0
  0xa76b27fc: vmovsd 0x8(%esp),%xmm1
  0xa76b2802: add    $0x10,%esp
  0xa76b2805: popf   
  0xa76b2806: popa   
  0xa76b2807: pop    %eax
  0xa76b2808: mov    %esp,%esi
  0xa76b280a: sub    $0x4,%esp
  0xa76b280d: mov    %ecx,(%esp)
  0xa76b2810: mov    0x28(%ebx),%ecx
  0xa76b2813: push   %eax
  0xa76b2814: jmp    *%ecx

AHE@0xb66900c4: 0x i2c: 0xa76b28c0 c2i: 0xa76b294a c2iUV: 0xa76b2929
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76b294a
  0xa76b28c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b28c3: mov    $0xa75b1ac0,%edi
  0xa76b28c8: cmp    %edi,%eax
  0xa76b28ca: jbe    0xa76b28dd
  0xa76b28d0: mov    $0xa7691ac0,%edi
  0xa76b28d5: cmp    %edi,%eax
  0xa76b28d7: jb     0xa76b2908
  0xa76b28dd: mov    $0xa75af400,%edi
  0xa76b28e2: cmp    %edi,%eax
  0xa76b28e4: jbe    0xa76b28f7
  0xa76b28ea: mov    $0xa75b1728,%edi
  0xa76b28ef: cmp    %edi,%eax
  0xa76b28f1: jb     0xa76b2908
  ;; i2c adapter must return to an interpreter frame
  0xa76b28f7: push   $0xb75a2830
  0xa76b28fc: call   0xa76b2901
  0xa76b2901: pusha  
  0xa76b2902: call   0xb7052f32
  0xa76b2907: hlt    
  ;; } verify_i2ce 
  0xa76b2908: mov    %esp,%edi
  0xa76b290a: and    $0xfffffff0,%esp
  0xa76b290d: push   %eax
  0xa76b290e: mov    %edi,%eax
  0xa76b2910: mov    0x30(%ebx),%edi
  0xa76b2913: mov    %esp,%eax
  0xa76b2915: shr    $0xc,%eax
  0xa76b2918: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b291f: mov    %ebx,0x16c(%eax)
  0xa76b2925: mov    %ebx,%eax
  0xa76b2927: jmp    *%edi
  0xa76b2929: mov    0x4(%ecx),%ebx
  0xa76b292c: cmp    0x8(%eax),%ebx
  0xa76b292f: mov    0x4(%eax),%ebx
  0xa76b2932: jne    0xa76b2945
  0xa76b2938: cmpl   $0x0,0x34(%ebx)
  0xa76b293f: je     0xa76b2984
  0xa76b2945: jmp    0xa7692560
  0xa76b294a: cmpl   $0x0,0x34(%ebx)
  0xa76b2951: je     0xa76b2984
  0xa76b2957: mov    (%esp),%eax
  0xa76b295a: pusha  
  0xa76b295b: pushf  
  0xa76b295c: sub    $0x10,%esp
  0xa76b295f: vmovsd %xmm0,(%esp)
  0xa76b2964: vmovsd %xmm1,0x8(%esp)
  0xa76b296a: push   %eax
  0xa76b296b: push   %ebx
  0xa76b296c: call   0xb71d62fc
  0xa76b2971: add    $0x8,%esp
  0xa76b2974: vmovsd (%esp),%xmm0
  0xa76b2979: vmovsd 0x8(%esp),%xmm1
  0xa76b297f: add    $0x10,%esp
  0xa76b2982: popf   
  0xa76b2983: popa   
  0xa76b2984: pop    %eax
  0xa76b2985: mov    %esp,%esi
  0xa76b2987: sub    $0x0,%esp
  0xa76b298a: mov    0x28(%ebx),%ecx
  0xa76b298d: push   %eax
  0xa76b298e: jmp    *%ecx

AHE@0xb66900e8: 0xaaa00000 i2c: 0xa76b2a40 c2i: 0xa76b2ada c2iUV: 0xa76b2ab9
i2c argument handler #0 for: receiver (Ljava/lang/Class;Ljava/security/ProtectionDomain;)V (239 bytes generated)
c2i argument handler starts at 0xa76b2ada
  0xa76b2a40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b2a43: mov    $0xa75b1ac0,%edi
  0xa76b2a48: cmp    %edi,%eax
  0xa76b2a4a: jbe    0xa76b2a5d
  0xa76b2a50: mov    $0xa7691ac0,%edi
  0xa76b2a55: cmp    %edi,%eax
  0xa76b2a57: jb     0xa76b2a88
  0xa76b2a5d: mov    $0xa75af400,%edi
  0xa76b2a62: cmp    %edi,%eax
  0xa76b2a64: jbe    0xa76b2a77
  0xa76b2a6a: mov    $0xa75b1728,%edi
  0xa76b2a6f: cmp    %edi,%eax
  0xa76b2a71: jb     0xa76b2a88
  ;; i2c adapter must return to an interpreter frame
  0xa76b2a77: push   $0xb75a2830
  0xa76b2a7c: call   0xa76b2a81
  0xa76b2a81: pusha  
  0xa76b2a82: call   0xb7052f32
  0xa76b2a87: hlt    
  ;; } verify_i2ce 
  0xa76b2a88: mov    %esp,%edi
  0xa76b2a8a: sub    $0x8,%esp
  0xa76b2a8d: and    $0xfffffff0,%esp
  0xa76b2a90: push   %eax
  0xa76b2a91: mov    %edi,%eax
  0xa76b2a93: mov    0x30(%ebx),%edi
  0xa76b2a96: mov    0xc(%eax),%ecx
  0xa76b2a99: mov    0x8(%eax),%edx
  0xa76b2a9c: mov    0x4(%eax),%esi
  0xa76b2a9f: mov    %esi,0x4(%esp)
  0xa76b2aa3: mov    %esp,%eax
  0xa76b2aa5: shr    $0xc,%eax
  0xa76b2aa8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b2aaf: mov    %ebx,0x16c(%eax)
  0xa76b2ab5: mov    %ebx,%eax
  0xa76b2ab7: jmp    *%edi
  0xa76b2ab9: mov    0x4(%ecx),%ebx
  0xa76b2abc: cmp    0x8(%eax),%ebx
  0xa76b2abf: mov    0x4(%eax),%ebx
  0xa76b2ac2: jne    0xa76b2ad5
  0xa76b2ac8: cmpl   $0x0,0x34(%ebx)
  0xa76b2acf: je     0xa76b2b14
  0xa76b2ad5: jmp    0xa7692560
  0xa76b2ada: cmpl   $0x0,0x34(%ebx)
  0xa76b2ae1: je     0xa76b2b14
  0xa76b2ae7: mov    (%esp),%eax
  0xa76b2aea: pusha  
  0xa76b2aeb: pushf  
  0xa76b2aec: sub    $0x10,%esp
  0xa76b2aef: vmovsd %xmm0,(%esp)
  0xa76b2af4: vmovsd %xmm1,0x8(%esp)
  0xa76b2afa: push   %eax
  0xa76b2afb: push   %ebx
  0xa76b2afc: call   0xb71d62fc
  0xa76b2b01: add    $0x8,%esp
  0xa76b2b04: vmovsd (%esp),%xmm0
  0xa76b2b09: vmovsd 0x8(%esp),%xmm1
  0xa76b2b0f: add    $0x10,%esp
  0xa76b2b12: popf   
  0xa76b2b13: popa   
  0xa76b2b14: pop    %eax
  0xa76b2b15: mov    %esp,%esi
  0xa76b2b17: sub    $0xc,%esp
  0xa76b2b1a: mov    %ecx,0x8(%esp)
  0xa76b2b1e: mov    %edx,0x4(%esp)
  0xa76b2b22: mov    0xc(%esp),%edi
  0xa76b2b26: mov    %edi,(%esp)
  0xa76b2b29: mov    0x28(%ebx),%ecx
  0xa76b2b2c: push   %eax
  0xa76b2b2d: jmp    *%ecx

AHE@0xb669010c: 0x i2c: 0xa76b2bc0 c2i: 0xa76b2c4a c2iUV: 0xa76b2c29
i2c argument handler #0 for: static ()Ljava/lang/ClassLoader; (208 bytes generated)
c2i argument handler starts at 0xa76b2c4a
  0xa76b2bc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b2bc3: mov    $0xa75b1ac0,%edi
  0xa76b2bc8: cmp    %edi,%eax
  0xa76b2bca: jbe    0xa76b2bdd
  0xa76b2bd0: mov    $0xa7691ac0,%edi
  0xa76b2bd5: cmp    %edi,%eax
  0xa76b2bd7: jb     0xa76b2c08
  0xa76b2bdd: mov    $0xa75af400,%edi
  0xa76b2be2: cmp    %edi,%eax
  0xa76b2be4: jbe    0xa76b2bf7
  0xa76b2bea: mov    $0xa75b1728,%edi
  0xa76b2bef: cmp    %edi,%eax
  0xa76b2bf1: jb     0xa76b2c08
  ;; i2c adapter must return to an interpreter frame
  0xa76b2bf7: push   $0xb75a2830
  0xa76b2bfc: call   0xa76b2c01
  0xa76b2c01: pusha  
  0xa76b2c02: call   0xb7052f32
  0xa76b2c07: hlt    
  ;; } verify_i2ce 
  0xa76b2c08: mov    %esp,%edi
  0xa76b2c0a: and    $0xfffffff0,%esp
  0xa76b2c0d: push   %eax
  0xa76b2c0e: mov    %edi,%eax
  0xa76b2c10: mov    0x30(%ebx),%edi
  0xa76b2c13: mov    %esp,%eax
  0xa76b2c15: shr    $0xc,%eax
  0xa76b2c18: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b2c1f: mov    %ebx,0x16c(%eax)
  0xa76b2c25: mov    %ebx,%eax
  0xa76b2c27: jmp    *%edi
  0xa76b2c29: mov    0x4(%ecx),%ebx
  0xa76b2c2c: cmp    0x8(%eax),%ebx
  0xa76b2c2f: mov    0x4(%eax),%ebx
  0xa76b2c32: jne    0xa76b2c45
  0xa76b2c38: cmpl   $0x0,0x34(%ebx)
  0xa76b2c3f: je     0xa76b2c84
  0xa76b2c45: jmp    0xa7692560
  0xa76b2c4a: cmpl   $0x0,0x34(%ebx)
  0xa76b2c51: je     0xa76b2c84
  0xa76b2c57: mov    (%esp),%eax
  0xa76b2c5a: pusha  
  0xa76b2c5b: pushf  
  0xa76b2c5c: sub    $0x10,%esp
  0xa76b2c5f: vmovsd %xmm0,(%esp)
  0xa76b2c64: vmovsd %xmm1,0x8(%esp)
  0xa76b2c6a: push   %eax
  0xa76b2c6b: push   %ebx
  0xa76b2c6c: call   0xb71d62fc
  0xa76b2c71: add    $0x8,%esp
  0xa76b2c74: vmovsd (%esp),%xmm0
  0xa76b2c79: vmovsd 0x8(%esp),%xmm1
  0xa76b2c7f: add    $0x10,%esp
  0xa76b2c82: popf   
  0xa76b2c83: popa   
  0xa76b2c84: pop    %eax
  0xa76b2c85: mov    %esp,%esi
  0xa76b2c87: sub    $0x0,%esp
  0xa76b2c8a: mov    0x28(%ebx),%ecx
  0xa76b2c8d: push   %eax
  0xa76b2c8e: jmp    *%ecx

AHE@0xb6690130: 0xaa000000 i2c: 0xa76b2d40 c2i: 0xa76b2dd0 c2iUV: 0xa76b2daf
i2c argument handler #0 for: receiver (Ljava/lang/Class;)V (221 bytes generated)
c2i argument handler starts at 0xa76b2dd0
  0xa76b2d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b2d43: mov    $0xa75b1ac0,%edi
  0xa76b2d48: cmp    %edi,%eax
  0xa76b2d4a: jbe    0xa76b2d5d
  0xa76b2d50: mov    $0xa7691ac0,%edi
  0xa76b2d55: cmp    %edi,%eax
  0xa76b2d57: jb     0xa76b2d88
  0xa76b2d5d: mov    $0xa75af400,%edi
  0xa76b2d62: cmp    %edi,%eax
  0xa76b2d64: jbe    0xa76b2d77
  0xa76b2d6a: mov    $0xa75b1728,%edi
  0xa76b2d6f: cmp    %edi,%eax
  0xa76b2d71: jb     0xa76b2d88
  ;; i2c adapter must return to an interpreter frame
  0xa76b2d77: push   $0xb75a2830
  0xa76b2d7c: call   0xa76b2d81
  0xa76b2d81: pusha  
  0xa76b2d82: call   0xb7052f32
  0xa76b2d87: hlt    
  ;; } verify_i2ce 
  0xa76b2d88: mov    %esp,%edi
  0xa76b2d8a: and    $0xfffffff0,%esp
  0xa76b2d8d: push   %eax
  0xa76b2d8e: mov    %edi,%eax
  0xa76b2d90: mov    0x30(%ebx),%edi
  0xa76b2d93: mov    0x8(%eax),%ecx
  0xa76b2d96: mov    0x4(%eax),%edx
  0xa76b2d99: mov    %esp,%eax
  0xa76b2d9b: shr    $0xc,%eax
  0xa76b2d9e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b2da5: mov    %ebx,0x16c(%eax)
  0xa76b2dab: mov    %ebx,%eax
  0xa76b2dad: jmp    *%edi
  0xa76b2daf: mov    0x4(%ecx),%ebx
  0xa76b2db2: cmp    0x8(%eax),%ebx
  0xa76b2db5: mov    0x4(%eax),%ebx
  0xa76b2db8: jne    0xa76b2dcb
  0xa76b2dbe: cmpl   $0x0,0x34(%ebx)
  0xa76b2dc5: je     0xa76b2e0a
  0xa76b2dcb: jmp    0xa7692560
  0xa76b2dd0: cmpl   $0x0,0x34(%ebx)
  0xa76b2dd7: je     0xa76b2e0a
  0xa76b2ddd: mov    (%esp),%eax
  0xa76b2de0: pusha  
  0xa76b2de1: pushf  
  0xa76b2de2: sub    $0x10,%esp
  0xa76b2de5: vmovsd %xmm0,(%esp)
  0xa76b2dea: vmovsd %xmm1,0x8(%esp)
  0xa76b2df0: push   %eax
  0xa76b2df1: push   %ebx
  0xa76b2df2: call   0xb71d62fc
  0xa76b2df7: add    $0x8,%esp
  0xa76b2dfa: vmovsd (%esp),%xmm0
  0xa76b2dff: vmovsd 0x8(%esp),%xmm1
  0xa76b2e05: add    $0x10,%esp
  0xa76b2e08: popf   
  0xa76b2e09: popa   
  0xa76b2e0a: pop    %eax
  0xa76b2e0b: mov    %esp,%esi
  0xa76b2e0d: sub    $0x8,%esp
  0xa76b2e10: mov    %ecx,0x4(%esp)
  0xa76b2e14: mov    %edx,(%esp)
  0xa76b2e17: mov    0x28(%ebx),%ecx
  0xa76b2e1a: push   %eax
  0xa76b2e1b: jmp    *%ecx

AHE@0xb6690154: 0xaa000000 i2c: 0xa76b2ec0 c2i: 0xa76b2f50 c2iUV: 0xa76b2f2f
i2c argument handler #0 for: static (Ljava/lang/ClassLoader;Ljava/lang/String;)J (221 bytes generated)
c2i argument handler starts at 0xa76b2f50
  0xa76b2ec0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b2ec3: mov    $0xa75b1ac0,%edi
  0xa76b2ec8: cmp    %edi,%eax
  0xa76b2eca: jbe    0xa76b2edd
  0xa76b2ed0: mov    $0xa7691ac0,%edi
  0xa76b2ed5: cmp    %edi,%eax
  0xa76b2ed7: jb     0xa76b2f08
  0xa76b2edd: mov    $0xa75af400,%edi
  0xa76b2ee2: cmp    %edi,%eax
  0xa76b2ee4: jbe    0xa76b2ef7
  0xa76b2eea: mov    $0xa75b1728,%edi
  0xa76b2eef: cmp    %edi,%eax
  0xa76b2ef1: jb     0xa76b2f08
  ;; i2c adapter must return to an interpreter frame
  0xa76b2ef7: push   $0xb75a2830
  0xa76b2efc: call   0xa76b2f01
  0xa76b2f01: pusha  
  0xa76b2f02: call   0xb7052f32
  0xa76b2f07: hlt    
  ;; } verify_i2ce 
  0xa76b2f08: mov    %esp,%edi
  0xa76b2f0a: and    $0xfffffff0,%esp
  0xa76b2f0d: push   %eax
  0xa76b2f0e: mov    %edi,%eax
  0xa76b2f10: mov    0x30(%ebx),%edi
  0xa76b2f13: mov    0x8(%eax),%ecx
  0xa76b2f16: mov    0x4(%eax),%edx
  0xa76b2f19: mov    %esp,%eax
  0xa76b2f1b: shr    $0xc,%eax
  0xa76b2f1e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b2f25: mov    %ebx,0x16c(%eax)
  0xa76b2f2b: mov    %ebx,%eax
  0xa76b2f2d: jmp    *%edi
  0xa76b2f2f: mov    0x4(%ecx),%ebx
  0xa76b2f32: cmp    0x8(%eax),%ebx
  0xa76b2f35: mov    0x4(%eax),%ebx
  0xa76b2f38: jne    0xa76b2f4b
  0xa76b2f3e: cmpl   $0x0,0x34(%ebx)
  0xa76b2f45: je     0xa76b2f8a
  0xa76b2f4b: jmp    0xa7692560
  0xa76b2f50: cmpl   $0x0,0x34(%ebx)
  0xa76b2f57: je     0xa76b2f8a
  0xa76b2f5d: mov    (%esp),%eax
  0xa76b2f60: pusha  
  0xa76b2f61: pushf  
  0xa76b2f62: sub    $0x10,%esp
  0xa76b2f65: vmovsd %xmm0,(%esp)
  0xa76b2f6a: vmovsd %xmm1,0x8(%esp)
  0xa76b2f70: push   %eax
  0xa76b2f71: push   %ebx
  0xa76b2f72: call   0xb71d62fc
  0xa76b2f77: add    $0x8,%esp
  0xa76b2f7a: vmovsd (%esp),%xmm0
  0xa76b2f7f: vmovsd 0x8(%esp),%xmm1
  0xa76b2f85: add    $0x10,%esp
  0xa76b2f88: popf   
  0xa76b2f89: popa   
  0xa76b2f8a: pop    %eax
  0xa76b2f8b: mov    %esp,%esi
  0xa76b2f8d: sub    $0x8,%esp
  0xa76b2f90: mov    %ecx,0x4(%esp)
  0xa76b2f94: mov    %edx,(%esp)
  0xa76b2f97: mov    0x28(%ebx),%ecx
  0xa76b2f9a: push   %eax
  0xa76b2f9b: jmp    *%ecx

AHE@0xb6690178: 0xaa000000 i2c: 0xa76b3040 c2i: 0xa76b30d0 c2iUV: 0xa76b30af
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76b30d0
  0xa76b3040: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3043: mov    $0xa75b1ac0,%edi
  0xa76b3048: cmp    %edi,%eax
  0xa76b304a: jbe    0xa76b305d
  0xa76b3050: mov    $0xa7691ac0,%edi
  0xa76b3055: cmp    %edi,%eax
  0xa76b3057: jb     0xa76b3088
  0xa76b305d: mov    $0xa75af400,%edi
  0xa76b3062: cmp    %edi,%eax
  0xa76b3064: jbe    0xa76b3077
  0xa76b306a: mov    $0xa75b1728,%edi
  0xa76b306f: cmp    %edi,%eax
  0xa76b3071: jb     0xa76b3088
  ;; i2c adapter must return to an interpreter frame
  0xa76b3077: push   $0xb75a2830
  0xa76b307c: call   0xa76b3081
  0xa76b3081: pusha  
  0xa76b3082: call   0xb7052f32
  0xa76b3087: hlt    
  ;; } verify_i2ce 
  0xa76b3088: mov    %esp,%edi
  0xa76b308a: and    $0xfffffff0,%esp
  0xa76b308d: push   %eax
  0xa76b308e: mov    %edi,%eax
  0xa76b3090: mov    0x30(%ebx),%edi
  0xa76b3093: mov    0x8(%eax),%ecx
  0xa76b3096: mov    0x4(%eax),%edx
  0xa76b3099: mov    %esp,%eax
  0xa76b309b: shr    $0xc,%eax
  0xa76b309e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b30a5: mov    %ebx,0x16c(%eax)
  0xa76b30ab: mov    %ebx,%eax
  0xa76b30ad: jmp    *%edi
  0xa76b30af: mov    0x4(%ecx),%ebx
  0xa76b30b2: cmp    0x8(%eax),%ebx
  0xa76b30b5: mov    0x4(%eax),%ebx
  0xa76b30b8: jne    0xa76b30cb
  0xa76b30be: cmpl   $0x0,0x34(%ebx)
  0xa76b30c5: je     0xa76b310a
  0xa76b30cb: jmp    0xa7692560
  0xa76b30d0: cmpl   $0x0,0x34(%ebx)
  0xa76b30d7: je     0xa76b310a
  0xa76b30dd: mov    (%esp),%eax
  0xa76b30e0: pusha  
  0xa76b30e1: pushf  
  0xa76b30e2: sub    $0x10,%esp
  0xa76b30e5: vmovsd %xmm0,(%esp)
  0xa76b30ea: vmovsd %xmm1,0x8(%esp)
  0xa76b30f0: push   %eax
  0xa76b30f1: push   %ebx
  0xa76b30f2: call   0xb71d62fc
  0xa76b30f7: add    $0x8,%esp
  0xa76b30fa: vmovsd (%esp),%xmm0
  0xa76b30ff: vmovsd 0x8(%esp),%xmm1
  0xa76b3105: add    $0x10,%esp
  0xa76b3108: popf   
  0xa76b3109: popa   
  0xa76b310a: pop    %eax
  0xa76b310b: mov    %esp,%esi
  0xa76b310d: sub    $0x8,%esp
  0xa76b3110: mov    %ecx,0x4(%esp)
  0xa76b3114: mov    %edx,(%esp)
  0xa76b3117: mov    0x28(%ebx),%ecx
  0xa76b311a: push   %eax
  0xa76b311b: jmp    *%ecx

AHE@0xb669019c: 0xaa000000 i2c: 0xa76b31c0 c2i: 0xa76b3250 c2iUV: 0xa76b322f
i2c argument handler #0 for: receiver (Ljava/lang/String;)Ljava/lang/Class; (221 bytes generated)
c2i argument handler starts at 0xa76b3250
  0xa76b31c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b31c3: mov    $0xa75b1ac0,%edi
  0xa76b31c8: cmp    %edi,%eax
  0xa76b31ca: jbe    0xa76b31dd
  0xa76b31d0: mov    $0xa7691ac0,%edi
  0xa76b31d5: cmp    %edi,%eax
  0xa76b31d7: jb     0xa76b3208
  0xa76b31dd: mov    $0xa75af400,%edi
  0xa76b31e2: cmp    %edi,%eax
  0xa76b31e4: jbe    0xa76b31f7
  0xa76b31ea: mov    $0xa75b1728,%edi
  0xa76b31ef: cmp    %edi,%eax
  0xa76b31f1: jb     0xa76b3208
  ;; i2c adapter must return to an interpreter frame
  0xa76b31f7: push   $0xb75a2830
  0xa76b31fc: call   0xa76b3201
  0xa76b3201: pusha  
  0xa76b3202: call   0xb7052f32
  0xa76b3207: hlt    
  ;; } verify_i2ce 
  0xa76b3208: mov    %esp,%edi
  0xa76b320a: and    $0xfffffff0,%esp
  0xa76b320d: push   %eax
  0xa76b320e: mov    %edi,%eax
  0xa76b3210: mov    0x30(%ebx),%edi
  0xa76b3213: mov    0x8(%eax),%ecx
  0xa76b3216: mov    0x4(%eax),%edx
  0xa76b3219: mov    %esp,%eax
  0xa76b321b: shr    $0xc,%eax
  0xa76b321e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b3225: mov    %ebx,0x16c(%eax)
  0xa76b322b: mov    %ebx,%eax
  0xa76b322d: jmp    *%edi
  0xa76b322f: mov    0x4(%ecx),%ebx
  0xa76b3232: cmp    0x8(%eax),%ebx
  0xa76b3235: mov    0x4(%eax),%ebx
  0xa76b3238: jne    0xa76b324b
  0xa76b323e: cmpl   $0x0,0x34(%ebx)
  0xa76b3245: je     0xa76b328a
  0xa76b324b: jmp    0xa7692560
  0xa76b3250: cmpl   $0x0,0x34(%ebx)
  0xa76b3257: je     0xa76b328a
  0xa76b325d: mov    (%esp),%eax
  0xa76b3260: pusha  
  0xa76b3261: pushf  
  0xa76b3262: sub    $0x10,%esp
  0xa76b3265: vmovsd %xmm0,(%esp)
  0xa76b326a: vmovsd %xmm1,0x8(%esp)
  0xa76b3270: push   %eax
  0xa76b3271: push   %ebx
  0xa76b3272: call   0xb71d62fc
  0xa76b3277: add    $0x8,%esp
  0xa76b327a: vmovsd (%esp),%xmm0
  0xa76b327f: vmovsd 0x8(%esp),%xmm1
  0xa76b3285: add    $0x10,%esp
  0xa76b3288: popf   
  0xa76b3289: popa   
  0xa76b328a: pop    %eax
  0xa76b328b: mov    %esp,%esi
  0xa76b328d: sub    $0x8,%esp
  0xa76b3290: mov    %ecx,0x4(%esp)
  0xa76b3294: mov    %edx,(%esp)
  0xa76b3297: mov    0x28(%ebx),%ecx
  0xa76b329a: push   %eax
  0xa76b329b: jmp    *%ecx

AHE@0xb66901c0: 0xaaa00000 i2c: 0xa76b3340 c2i: 0xa76b33da c2iUV: 0xa76b33b9
i2c argument handler #0 for: receiver (Ljava/lang/String;Z)Ljava/lang/Class; (239 bytes generated)
c2i argument handler starts at 0xa76b33da
  0xa76b3340: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3343: mov    $0xa75b1ac0,%edi
  0xa76b3348: cmp    %edi,%eax
  0xa76b334a: jbe    0xa76b335d
  0xa76b3350: mov    $0xa7691ac0,%edi
  0xa76b3355: cmp    %edi,%eax
  0xa76b3357: jb     0xa76b3388
  0xa76b335d: mov    $0xa75af400,%edi
  0xa76b3362: cmp    %edi,%eax
  0xa76b3364: jbe    0xa76b3377
  0xa76b336a: mov    $0xa75b1728,%edi
  0xa76b336f: cmp    %edi,%eax
  0xa76b3371: jb     0xa76b3388
  ;; i2c adapter must return to an interpreter frame
  0xa76b3377: push   $0xb75a2830
  0xa76b337c: call   0xa76b3381
  0xa76b3381: pusha  
  0xa76b3382: call   0xb7052f32
  0xa76b3387: hlt    
  ;; } verify_i2ce 
  0xa76b3388: mov    %esp,%edi
  0xa76b338a: sub    $0x8,%esp
  0xa76b338d: and    $0xfffffff0,%esp
  0xa76b3390: push   %eax
  0xa76b3391: mov    %edi,%eax
  0xa76b3393: mov    0x30(%ebx),%edi
  0xa76b3396: mov    0xc(%eax),%ecx
  0xa76b3399: mov    0x8(%eax),%edx
  0xa76b339c: mov    0x4(%eax),%esi
  0xa76b339f: mov    %esi,0x4(%esp)
  0xa76b33a3: mov    %esp,%eax
  0xa76b33a5: shr    $0xc,%eax
  0xa76b33a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b33af: mov    %ebx,0x16c(%eax)
  0xa76b33b5: mov    %ebx,%eax
  0xa76b33b7: jmp    *%edi
  0xa76b33b9: mov    0x4(%ecx),%ebx
  0xa76b33bc: cmp    0x8(%eax),%ebx
  0xa76b33bf: mov    0x4(%eax),%ebx
  0xa76b33c2: jne    0xa76b33d5
  0xa76b33c8: cmpl   $0x0,0x34(%ebx)
  0xa76b33cf: je     0xa76b3414
  0xa76b33d5: jmp    0xa7692560
  0xa76b33da: cmpl   $0x0,0x34(%ebx)
  0xa76b33e1: je     0xa76b3414
  0xa76b33e7: mov    (%esp),%eax
  0xa76b33ea: pusha  
  0xa76b33eb: pushf  
  0xa76b33ec: sub    $0x10,%esp
  0xa76b33ef: vmovsd %xmm0,(%esp)
  0xa76b33f4: vmovsd %xmm1,0x8(%esp)
  0xa76b33fa: push   %eax
  0xa76b33fb: push   %ebx
  0xa76b33fc: call   0xb71d62fc
  0xa76b3401: add    $0x8,%esp
  0xa76b3404: vmovsd (%esp),%xmm0
  0xa76b3409: vmovsd 0x8(%esp),%xmm1
  0xa76b340f: add    $0x10,%esp
  0xa76b3412: popf   
  0xa76b3413: popa   
  0xa76b3414: pop    %eax
  0xa76b3415: mov    %esp,%esi
  0xa76b3417: sub    $0xc,%esp
  0xa76b341a: mov    %ecx,0x8(%esp)
  0xa76b341e: mov    %edx,0x4(%esp)
  0xa76b3422: mov    0xc(%esp),%edi
  0xa76b3426: mov    %edi,(%esp)
  0xa76b3429: mov    0x28(%ebx),%ecx
  0xa76b342c: push   %eax
  0xa76b342d: jmp    *%ecx

AHE@0xb66901e4: 0x i2c: 0xa76b34c0 c2i: 0xa76b354a c2iUV: 0xa76b3529
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76b354a
  0xa76b34c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b34c3: mov    $0xa75b1ac0,%edi
  0xa76b34c8: cmp    %edi,%eax
  0xa76b34ca: jbe    0xa76b34dd
  0xa76b34d0: mov    $0xa7691ac0,%edi
  0xa76b34d5: cmp    %edi,%eax
  0xa76b34d7: jb     0xa76b3508
  0xa76b34dd: mov    $0xa75af400,%edi
  0xa76b34e2: cmp    %edi,%eax
  0xa76b34e4: jbe    0xa76b34f7
  0xa76b34ea: mov    $0xa75b1728,%edi
  0xa76b34ef: cmp    %edi,%eax
  0xa76b34f1: jb     0xa76b3508
  ;; i2c adapter must return to an interpreter frame
  0xa76b34f7: push   $0xb75a2830
  0xa76b34fc: call   0xa76b3501
  0xa76b3501: pusha  
  0xa76b3502: call   0xb7052f32
  0xa76b3507: hlt    
  ;; } verify_i2ce 
  0xa76b3508: mov    %esp,%edi
  0xa76b350a: and    $0xfffffff0,%esp
  0xa76b350d: push   %eax
  0xa76b350e: mov    %edi,%eax
  0xa76b3510: mov    0x30(%ebx),%edi
  0xa76b3513: mov    %esp,%eax
  0xa76b3515: shr    $0xc,%eax
  0xa76b3518: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b351f: mov    %ebx,0x16c(%eax)
  0xa76b3525: mov    %ebx,%eax
  0xa76b3527: jmp    *%edi
  0xa76b3529: mov    0x4(%ecx),%ebx
  0xa76b352c: cmp    0x8(%eax),%ebx
  0xa76b352f: mov    0x4(%eax),%ebx
  0xa76b3532: jne    0xa76b3545
  0xa76b3538: cmpl   $0x0,0x34(%ebx)
  0xa76b353f: je     0xa76b3584
  0xa76b3545: jmp    0xa7692560
  0xa76b354a: cmpl   $0x0,0x34(%ebx)
  0xa76b3551: je     0xa76b3584
  0xa76b3557: mov    (%esp),%eax
  0xa76b355a: pusha  
  0xa76b355b: pushf  
  0xa76b355c: sub    $0x10,%esp
  0xa76b355f: vmovsd %xmm0,(%esp)
  0xa76b3564: vmovsd %xmm1,0x8(%esp)
  0xa76b356a: push   %eax
  0xa76b356b: push   %ebx
  0xa76b356c: call   0xb71d62fc
  0xa76b3571: add    $0x8,%esp
  0xa76b3574: vmovsd (%esp),%xmm0
  0xa76b3579: vmovsd 0x8(%esp),%xmm1
  0xa76b357f: add    $0x10,%esp
  0xa76b3582: popf   
  0xa76b3583: popa   
  0xa76b3584: pop    %eax
  0xa76b3585: mov    %esp,%esi
  0xa76b3587: sub    $0x0,%esp
  0xa76b358a: mov    0x28(%ebx),%ecx
  0xa76b358d: push   %eax
  0xa76b358e: jmp    *%ecx

AHE@0xb6690208: 0xaaa00000 i2c: 0xa76b3640 c2i: 0xa76b36da c2iUV: 0xa76b36b9
i2c argument handler #0 for: receiver (Ljava/lang/Void;Ljava/lang/ClassLoader;)V (239 bytes generated)
c2i argument handler starts at 0xa76b36da
  0xa76b3640: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3643: mov    $0xa75b1ac0,%edi
  0xa76b3648: cmp    %edi,%eax
  0xa76b364a: jbe    0xa76b365d
  0xa76b3650: mov    $0xa7691ac0,%edi
  0xa76b3655: cmp    %edi,%eax
  0xa76b3657: jb     0xa76b3688
  0xa76b365d: mov    $0xa75af400,%edi
  0xa76b3662: cmp    %edi,%eax
  0xa76b3664: jbe    0xa76b3677
  0xa76b366a: mov    $0xa75b1728,%edi
  0xa76b366f: cmp    %edi,%eax
  0xa76b3671: jb     0xa76b3688
  ;; i2c adapter must return to an interpreter frame
  0xa76b3677: push   $0xb75a2830
  0xa76b367c: call   0xa76b3681
  0xa76b3681: pusha  
  0xa76b3682: call   0xb7052f32
  0xa76b3687: hlt    
  ;; } verify_i2ce 
  0xa76b3688: mov    %esp,%edi
  0xa76b368a: sub    $0x8,%esp
  0xa76b368d: and    $0xfffffff0,%esp
  0xa76b3690: push   %eax
  0xa76b3691: mov    %edi,%eax
  0xa76b3693: mov    0x30(%ebx),%edi
  0xa76b3696: mov    0xc(%eax),%ecx
  0xa76b3699: mov    0x8(%eax),%edx
  0xa76b369c: mov    0x4(%eax),%esi
  0xa76b369f: mov    %esi,0x4(%esp)
  0xa76b36a3: mov    %esp,%eax
  0xa76b36a5: shr    $0xc,%eax
  0xa76b36a8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b36af: mov    %ebx,0x16c(%eax)
  0xa76b36b5: mov    %ebx,%eax
  0xa76b36b7: jmp    *%edi
  0xa76b36b9: mov    0x4(%ecx),%ebx
  0xa76b36bc: cmp    0x8(%eax),%ebx
  0xa76b36bf: mov    0x4(%eax),%ebx
  0xa76b36c2: jne    0xa76b36d5
  0xa76b36c8: cmpl   $0x0,0x34(%ebx)
  0xa76b36cf: je     0xa76b3714
  0xa76b36d5: jmp    0xa7692560
  0xa76b36da: cmpl   $0x0,0x34(%ebx)
  0xa76b36e1: je     0xa76b3714
  0xa76b36e7: mov    (%esp),%eax
  0xa76b36ea: pusha  
  0xa76b36eb: pushf  
  0xa76b36ec: sub    $0x10,%esp
  0xa76b36ef: vmovsd %xmm0,(%esp)
  0xa76b36f4: vmovsd %xmm1,0x8(%esp)
  0xa76b36fa: push   %eax
  0xa76b36fb: push   %ebx
  0xa76b36fc: call   0xb71d62fc
  0xa76b3701: add    $0x8,%esp
  0xa76b3704: vmovsd (%esp),%xmm0
  0xa76b3709: vmovsd 0x8(%esp),%xmm1
  0xa76b370f: add    $0x10,%esp
  0xa76b3712: popf   
  0xa76b3713: popa   
  0xa76b3714: pop    %eax
  0xa76b3715: mov    %esp,%esi
  0xa76b3717: sub    $0xc,%esp
  0xa76b371a: mov    %ecx,0x8(%esp)
  0xa76b371e: mov    %edx,0x4(%esp)
  0xa76b3722: mov    0xc(%esp),%edi
  0xa76b3726: mov    %edi,(%esp)
  0xa76b3729: mov    0x28(%ebx),%ecx
  0xa76b372c: push   %eax
  0xa76b372d: jmp    *%ecx

AHE@0xb669022c: 0xa0000000 i2c: 0xa76b37c0 c2i: 0xa76b384d c2iUV: 0xa76b382c
i2c argument handler #0 for: receiver ()V (214 bytes generated)
c2i argument handler starts at 0xa76b384d
  0xa76b37c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b37c3: mov    $0xa75b1ac0,%edi
  0xa76b37c8: cmp    %edi,%eax
  0xa76b37ca: jbe    0xa76b37dd
  0xa76b37d0: mov    $0xa7691ac0,%edi
  0xa76b37d5: cmp    %edi,%eax
  0xa76b37d7: jb     0xa76b3808
  0xa76b37dd: mov    $0xa75af400,%edi
  0xa76b37e2: cmp    %edi,%eax
  0xa76b37e4: jbe    0xa76b37f7
  0xa76b37ea: mov    $0xa75b1728,%edi
  0xa76b37ef: cmp    %edi,%eax
  0xa76b37f1: jb     0xa76b3808
  ;; i2c adapter must return to an interpreter frame
  0xa76b37f7: push   $0xb75a2830
  0xa76b37fc: call   0xa76b3801
  0xa76b3801: pusha  
  0xa76b3802: call   0xb7052f32
  0xa76b3807: hlt    
  ;; } verify_i2ce 
  0xa76b3808: mov    %esp,%edi
  0xa76b380a: and    $0xfffffff0,%esp
  0xa76b380d: push   %eax
  0xa76b380e: mov    %edi,%eax
  0xa76b3810: mov    0x30(%ebx),%edi
  0xa76b3813: mov    0x4(%eax),%ecx
  0xa76b3816: mov    %esp,%eax
  0xa76b3818: shr    $0xc,%eax
  0xa76b381b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b3822: mov    %ebx,0x16c(%eax)
  0xa76b3828: mov    %ebx,%eax
  0xa76b382a: jmp    *%edi
  0xa76b382c: mov    0x4(%ecx),%ebx
  0xa76b382f: cmp    0x8(%eax),%ebx
  0xa76b3832: mov    0x4(%eax),%ebx
  0xa76b3835: jne    0xa76b3848
  0xa76b383b: cmpl   $0x0,0x34(%ebx)
  0xa76b3842: je     0xa76b3887
  0xa76b3848: jmp    0xa7692560
  0xa76b384d: cmpl   $0x0,0x34(%ebx)
  0xa76b3854: je     0xa76b3887
  0xa76b385a: mov    (%esp),%eax
  0xa76b385d: pusha  
  0xa76b385e: pushf  
  0xa76b385f: sub    $0x10,%esp
  0xa76b3862: vmovsd %xmm0,(%esp)
  0xa76b3867: vmovsd %xmm1,0x8(%esp)
  0xa76b386d: push   %eax
  0xa76b386e: push   %ebx
  0xa76b386f: call   0xb71d62fc
  0xa76b3874: add    $0x8,%esp
  0xa76b3877: vmovsd (%esp),%xmm0
  0xa76b387c: vmovsd 0x8(%esp),%xmm1
  0xa76b3882: add    $0x10,%esp
  0xa76b3885: popf   
  0xa76b3886: popa   
  0xa76b3887: pop    %eax
  0xa76b3888: mov    %esp,%esi
  0xa76b388a: sub    $0x4,%esp
  0xa76b388d: mov    %ecx,(%esp)
  0xa76b3890: mov    0x28(%ebx),%ecx
  0xa76b3893: push   %eax
  0xa76b3894: jmp    *%ecx

AHE@0xb6690250: 0xaa000000 i2c: 0xa76b3940 c2i: 0xa76b39d0 c2iUV: 0xa76b39af
i2c argument handler #0 for: receiver (Ljava/lang/ClassLoader;)V (221 bytes generated)
c2i argument handler starts at 0xa76b39d0
  0xa76b3940: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3943: mov    $0xa75b1ac0,%edi
  0xa76b3948: cmp    %edi,%eax
  0xa76b394a: jbe    0xa76b395d
  0xa76b3950: mov    $0xa7691ac0,%edi
  0xa76b3955: cmp    %edi,%eax
  0xa76b3957: jb     0xa76b3988
  0xa76b395d: mov    $0xa75af400,%edi
  0xa76b3962: cmp    %edi,%eax
  0xa76b3964: jbe    0xa76b3977
  0xa76b396a: mov    $0xa75b1728,%edi
  0xa76b396f: cmp    %edi,%eax
  0xa76b3971: jb     0xa76b3988
  ;; i2c adapter must return to an interpreter frame
  0xa76b3977: push   $0xb75a2830
  0xa76b397c: call   0xa76b3981
  0xa76b3981: pusha  
  0xa76b3982: call   0xb7052f32
  0xa76b3987: hlt    
  ;; } verify_i2ce 
  0xa76b3988: mov    %esp,%edi
  0xa76b398a: and    $0xfffffff0,%esp
  0xa76b398d: push   %eax
  0xa76b398e: mov    %edi,%eax
  0xa76b3990: mov    0x30(%ebx),%edi
  0xa76b3993: mov    0x8(%eax),%ecx
  0xa76b3996: mov    0x4(%eax),%edx
  0xa76b3999: mov    %esp,%eax
  0xa76b399b: shr    $0xc,%eax
  0xa76b399e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b39a5: mov    %ebx,0x16c(%eax)
  0xa76b39ab: mov    %ebx,%eax
  0xa76b39ad: jmp    *%edi
  0xa76b39af: mov    0x4(%ecx),%ebx
  0xa76b39b2: cmp    0x8(%eax),%ebx
  0xa76b39b5: mov    0x4(%eax),%ebx
  0xa76b39b8: jne    0xa76b39cb
  0xa76b39be: cmpl   $0x0,0x34(%ebx)
  0xa76b39c5: je     0xa76b3a0a
  0xa76b39cb: jmp    0xa7692560
  0xa76b39d0: cmpl   $0x0,0x34(%ebx)
  0xa76b39d7: je     0xa76b3a0a
  0xa76b39dd: mov    (%esp),%eax
  0xa76b39e0: pusha  
  0xa76b39e1: pushf  
  0xa76b39e2: sub    $0x10,%esp
  0xa76b39e5: vmovsd %xmm0,(%esp)
  0xa76b39ea: vmovsd %xmm1,0x8(%esp)
  0xa76b39f0: push   %eax
  0xa76b39f1: push   %ebx
  0xa76b39f2: call   0xb71d62fc
  0xa76b39f7: add    $0x8,%esp
  0xa76b39fa: vmovsd (%esp),%xmm0
  0xa76b39ff: vmovsd 0x8(%esp),%xmm1
  0xa76b3a05: add    $0x10,%esp
  0xa76b3a08: popf   
  0xa76b3a09: popa   
  0xa76b3a0a: pop    %eax
  0xa76b3a0b: mov    %esp,%esi
  0xa76b3a0d: sub    $0x8,%esp
  0xa76b3a10: mov    %ecx,0x4(%esp)
  0xa76b3a14: mov    %edx,(%esp)
  0xa76b3a17: mov    0x28(%ebx),%ecx
  0xa76b3a1a: push   %eax
  0xa76b3a1b: jmp    *%ecx

AHE@0xb6690274: 0xa0000000 i2c: 0xa76b3ac0 c2i: 0xa76b3b4d c2iUV: 0xa76b3b2c
i2c argument handler #0 for: receiver ()Ljava/security/PermissionCollection; (214 bytes generated)
c2i argument handler starts at 0xa76b3b4d
  0xa76b3ac0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3ac3: mov    $0xa75b1ac0,%edi
  0xa76b3ac8: cmp    %edi,%eax
  0xa76b3aca: jbe    0xa76b3add
  0xa76b3ad0: mov    $0xa7691ac0,%edi
  0xa76b3ad5: cmp    %edi,%eax
  0xa76b3ad7: jb     0xa76b3b08
  0xa76b3add: mov    $0xa75af400,%edi
  0xa76b3ae2: cmp    %edi,%eax
  0xa76b3ae4: jbe    0xa76b3af7
  0xa76b3aea: mov    $0xa75b1728,%edi
  0xa76b3aef: cmp    %edi,%eax
  0xa76b3af1: jb     0xa76b3b08
  ;; i2c adapter must return to an interpreter frame
  0xa76b3af7: push   $0xb75a2830
  0xa76b3afc: call   0xa76b3b01
  0xa76b3b01: pusha  
  0xa76b3b02: call   0xb7052f32
  0xa76b3b07: hlt    
  ;; } verify_i2ce 
  0xa76b3b08: mov    %esp,%edi
  0xa76b3b0a: and    $0xfffffff0,%esp
  0xa76b3b0d: push   %eax
  0xa76b3b0e: mov    %edi,%eax
  0xa76b3b10: mov    0x30(%ebx),%edi
  0xa76b3b13: mov    0x4(%eax),%ecx
  0xa76b3b16: mov    %esp,%eax
  0xa76b3b18: shr    $0xc,%eax
  0xa76b3b1b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b3b22: mov    %ebx,0x16c(%eax)
  0xa76b3b28: mov    %ebx,%eax
  0xa76b3b2a: jmp    *%edi
  0xa76b3b2c: mov    0x4(%ecx),%ebx
  0xa76b3b2f: cmp    0x8(%eax),%ebx
  0xa76b3b32: mov    0x4(%eax),%ebx
  0xa76b3b35: jne    0xa76b3b48
  0xa76b3b3b: cmpl   $0x0,0x34(%ebx)
  0xa76b3b42: je     0xa76b3b87
  0xa76b3b48: jmp    0xa7692560
  0xa76b3b4d: cmpl   $0x0,0x34(%ebx)
  0xa76b3b54: je     0xa76b3b87
  0xa76b3b5a: mov    (%esp),%eax
  0xa76b3b5d: pusha  
  0xa76b3b5e: pushf  
  0xa76b3b5f: sub    $0x10,%esp
  0xa76b3b62: vmovsd %xmm0,(%esp)
  0xa76b3b67: vmovsd %xmm1,0x8(%esp)
  0xa76b3b6d: push   %eax
  0xa76b3b6e: push   %ebx
  0xa76b3b6f: call   0xb71d62fc
  0xa76b3b74: add    $0x8,%esp
  0xa76b3b77: vmovsd (%esp),%xmm0
  0xa76b3b7c: vmovsd 0x8(%esp),%xmm1
  0xa76b3b82: add    $0x10,%esp
  0xa76b3b85: popf   
  0xa76b3b86: popa   
  0xa76b3b87: pop    %eax
  0xa76b3b88: mov    %esp,%esi
  0xa76b3b8a: sub    $0x4,%esp
  0xa76b3b8d: mov    %ecx,(%esp)
  0xa76b3b90: mov    0x28(%ebx),%ecx
  0xa76b3b93: push   %eax
  0xa76b3b94: jmp    *%ecx

AHE@0xb6690298: 0x i2c: 0xa76b3c40 c2i: 0xa76b3cca c2iUV: 0xa76b3ca9
i2c argument handler #0 for: static ()Z (208 bytes generated)
c2i argument handler starts at 0xa76b3cca
  0xa76b3c40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3c43: mov    $0xa75b1ac0,%edi
  0xa76b3c48: cmp    %edi,%eax
  0xa76b3c4a: jbe    0xa76b3c5d
  0xa76b3c50: mov    $0xa7691ac0,%edi
  0xa76b3c55: cmp    %edi,%eax
  0xa76b3c57: jb     0xa76b3c88
  0xa76b3c5d: mov    $0xa75af400,%edi
  0xa76b3c62: cmp    %edi,%eax
  0xa76b3c64: jbe    0xa76b3c77
  0xa76b3c6a: mov    $0xa75b1728,%edi
  0xa76b3c6f: cmp    %edi,%eax
  0xa76b3c71: jb     0xa76b3c88
  ;; i2c adapter must return to an interpreter frame
  0xa76b3c77: push   $0xb75a2830
  0xa76b3c7c: call   0xa76b3c81
  0xa76b3c81: pusha  
  0xa76b3c82: call   0xb7052f32
  0xa76b3c87: hlt    
  ;; } verify_i2ce 
  0xa76b3c88: mov    %esp,%edi
  0xa76b3c8a: and    $0xfffffff0,%esp
  0xa76b3c8d: push   %eax
  0xa76b3c8e: mov    %edi,%eax
  0xa76b3c90: mov    0x30(%ebx),%edi
  0xa76b3c93: mov    %esp,%eax
  0xa76b3c95: shr    $0xc,%eax
  0xa76b3c98: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b3c9f: mov    %ebx,0x16c(%eax)
  0xa76b3ca5: mov    %ebx,%eax
  0xa76b3ca7: jmp    *%edi
  0xa76b3ca9: mov    0x4(%ecx),%ebx
  0xa76b3cac: cmp    0x8(%eax),%ebx
  0xa76b3caf: mov    0x4(%eax),%ebx
  0xa76b3cb2: jne    0xa76b3cc5
  0xa76b3cb8: cmpl   $0x0,0x34(%ebx)
  0xa76b3cbf: je     0xa76b3d04
  0xa76b3cc5: jmp    0xa7692560
  0xa76b3cca: cmpl   $0x0,0x34(%ebx)
  0xa76b3cd1: je     0xa76b3d04
  0xa76b3cd7: mov    (%esp),%eax
  0xa76b3cda: pusha  
  0xa76b3cdb: pushf  
  0xa76b3cdc: sub    $0x10,%esp
  0xa76b3cdf: vmovsd %xmm0,(%esp)
  0xa76b3ce4: vmovsd %xmm1,0x8(%esp)
  0xa76b3cea: push   %eax
  0xa76b3ceb: push   %ebx
  0xa76b3cec: call   0xb71d62fc
  0xa76b3cf1: add    $0x8,%esp
  0xa76b3cf4: vmovsd (%esp),%xmm0
  0xa76b3cf9: vmovsd 0x8(%esp),%xmm1
  0xa76b3cff: add    $0x10,%esp
  0xa76b3d02: popf   
  0xa76b3d03: popa   
  0xa76b3d04: pop    %eax
  0xa76b3d05: mov    %esp,%esi
  0xa76b3d07: sub    $0x0,%esp
  0xa76b3d0a: mov    0x28(%ebx),%ecx
  0xa76b3d0d: push   %eax
  0xa76b3d0e: jmp    *%ecx

AHE@0xb66902bc: 0xaa000000 i2c: 0xa76b3dc0 c2i: 0xa76b3e50 c2iUV: 0xa76b3e2f
i2c argument handler #0 for: receiver (Ljava/security/Permission;)Z (221 bytes generated)
c2i argument handler starts at 0xa76b3e50
  0xa76b3dc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3dc3: mov    $0xa75b1ac0,%edi
  0xa76b3dc8: cmp    %edi,%eax
  0xa76b3dca: jbe    0xa76b3ddd
  0xa76b3dd0: mov    $0xa7691ac0,%edi
  0xa76b3dd5: cmp    %edi,%eax
  0xa76b3dd7: jb     0xa76b3e08
  0xa76b3ddd: mov    $0xa75af400,%edi
  0xa76b3de2: cmp    %edi,%eax
  0xa76b3de4: jbe    0xa76b3df7
  0xa76b3dea: mov    $0xa75b1728,%edi
  0xa76b3def: cmp    %edi,%eax
  0xa76b3df1: jb     0xa76b3e08
  ;; i2c adapter must return to an interpreter frame
  0xa76b3df7: push   $0xb75a2830
  0xa76b3dfc: call   0xa76b3e01
  0xa76b3e01: pusha  
  0xa76b3e02: call   0xb7052f32
  0xa76b3e07: hlt    
  ;; } verify_i2ce 
  0xa76b3e08: mov    %esp,%edi
  0xa76b3e0a: and    $0xfffffff0,%esp
  0xa76b3e0d: push   %eax
  0xa76b3e0e: mov    %edi,%eax
  0xa76b3e10: mov    0x30(%ebx),%edi
  0xa76b3e13: mov    0x8(%eax),%ecx
  0xa76b3e16: mov    0x4(%eax),%edx
  0xa76b3e19: mov    %esp,%eax
  0xa76b3e1b: shr    $0xc,%eax
  0xa76b3e1e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b3e25: mov    %ebx,0x16c(%eax)
  0xa76b3e2b: mov    %ebx,%eax
  0xa76b3e2d: jmp    *%edi
  0xa76b3e2f: mov    0x4(%ecx),%ebx
  0xa76b3e32: cmp    0x8(%eax),%ebx
  0xa76b3e35: mov    0x4(%eax),%ebx
  0xa76b3e38: jne    0xa76b3e4b
  0xa76b3e3e: cmpl   $0x0,0x34(%ebx)
  0xa76b3e45: je     0xa76b3e8a
  0xa76b3e4b: jmp    0xa7692560
  0xa76b3e50: cmpl   $0x0,0x34(%ebx)
  0xa76b3e57: je     0xa76b3e8a
  0xa76b3e5d: mov    (%esp),%eax
  0xa76b3e60: pusha  
  0xa76b3e61: pushf  
  0xa76b3e62: sub    $0x10,%esp
  0xa76b3e65: vmovsd %xmm0,(%esp)
  0xa76b3e6a: vmovsd %xmm1,0x8(%esp)
  0xa76b3e70: push   %eax
  0xa76b3e71: push   %ebx
  0xa76b3e72: call   0xb71d62fc
  0xa76b3e77: add    $0x8,%esp
  0xa76b3e7a: vmovsd (%esp),%xmm0
  0xa76b3e7f: vmovsd 0x8(%esp),%xmm1
  0xa76b3e85: add    $0x10,%esp
  0xa76b3e88: popf   
  0xa76b3e89: popa   
  0xa76b3e8a: pop    %eax
  0xa76b3e8b: mov    %esp,%esi
  0xa76b3e8d: sub    $0x8,%esp
  0xa76b3e90: mov    %ecx,0x4(%esp)
  0xa76b3e94: mov    %edx,(%esp)
  0xa76b3e97: mov    0x28(%ebx),%ecx
  0xa76b3e9a: push   %eax
  0xa76b3e9b: jmp    *%ecx

AHE@0xb66902e0: 0xa0000000 i2c: 0xa76b3f40 c2i: 0xa76b3fcd c2iUV: 0xa76b3fac
i2c argument handler #0 for: receiver ()Ljava/security/PermissionCollection; (214 bytes generated)
c2i argument handler starts at 0xa76b3fcd
  0xa76b3f40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b3f43: mov    $0xa75b1ac0,%edi
  0xa76b3f48: cmp    %edi,%eax
  0xa76b3f4a: jbe    0xa76b3f5d
  0xa76b3f50: mov    $0xa7691ac0,%edi
  0xa76b3f55: cmp    %edi,%eax
  0xa76b3f57: jb     0xa76b3f88
  0xa76b3f5d: mov    $0xa75af400,%edi
  0xa76b3f62: cmp    %edi,%eax
  0xa76b3f64: jbe    0xa76b3f77
  0xa76b3f6a: mov    $0xa75b1728,%edi
  0xa76b3f6f: cmp    %edi,%eax
  0xa76b3f71: jb     0xa76b3f88
  ;; i2c adapter must return to an interpreter frame
  0xa76b3f77: push   $0xb75a2830
  0xa76b3f7c: call   0xa76b3f81
  0xa76b3f81: pusha  
  0xa76b3f82: call   0xb7052f32
  0xa76b3f87: hlt    
  ;; } verify_i2ce 
  0xa76b3f88: mov    %esp,%edi
  0xa76b3f8a: and    $0xfffffff0,%esp
  0xa76b3f8d: push   %eax
  0xa76b3f8e: mov    %edi,%eax
  0xa76b3f90: mov    0x30(%ebx),%edi
  0xa76b3f93: mov    0x4(%eax),%ecx
  0xa76b3f96: mov    %esp,%eax
  0xa76b3f98: shr    $0xc,%eax
  0xa76b3f9b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b3fa2: mov    %ebx,0x16c(%eax)
  0xa76b3fa8: mov    %ebx,%eax
  0xa76b3faa: jmp    *%edi
  0xa76b3fac: mov    0x4(%ecx),%ebx
  0xa76b3faf: cmp    0x8(%eax),%ebx
  0xa76b3fb2: mov    0x4(%eax),%ebx
  0xa76b3fb5: jne    0xa76b3fc8
  0xa76b3fbb: cmpl   $0x0,0x34(%ebx)
  0xa76b3fc2: je     0xa76b4007
  0xa76b3fc8: jmp    0xa7692560
  0xa76b3fcd: cmpl   $0x0,0x34(%ebx)
  0xa76b3fd4: je     0xa76b4007
  0xa76b3fda: mov    (%esp),%eax
  0xa76b3fdd: pusha  
  0xa76b3fde: pushf  
  0xa76b3fdf: sub    $0x10,%esp
  0xa76b3fe2: vmovsd %xmm0,(%esp)
  0xa76b3fe7: vmovsd %xmm1,0x8(%esp)
  0xa76b3fed: push   %eax
  0xa76b3fee: push   %ebx
  0xa76b3fef: call   0xb71d62fc
  0xa76b3ff4: add    $0x8,%esp
  0xa76b3ff7: vmovsd (%esp),%xmm0
  0xa76b3ffc: vmovsd 0x8(%esp),%xmm1
  0xa76b4002: add    $0x10,%esp
  0xa76b4005: popf   
  0xa76b4006: popa   
  0xa76b4007: pop    %eax
  0xa76b4008: mov    %esp,%esi
  0xa76b400a: sub    $0x4,%esp
  0xa76b400d: mov    %ecx,(%esp)
  0xa76b4010: mov    0x28(%ebx),%ecx
  0xa76b4013: push   %eax
  0xa76b4014: jmp    *%ecx

AHE@0xb6690304: 0xa0000000 i2c: 0xa76b40c0 c2i: 0xa76b414d c2iUV: 0xa76b412c
i2c argument handler #0 for: receiver ()[Ljava/security/Principal; (214 bytes generated)
c2i argument handler starts at 0xa76b414d
  0xa76b40c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b40c3: mov    $0xa75b1ac0,%edi
  0xa76b40c8: cmp    %edi,%eax
  0xa76b40ca: jbe    0xa76b40dd
  0xa76b40d0: mov    $0xa7691ac0,%edi
  0xa76b40d5: cmp    %edi,%eax
  0xa76b40d7: jb     0xa76b4108
  0xa76b40dd: mov    $0xa75af400,%edi
  0xa76b40e2: cmp    %edi,%eax
  0xa76b40e4: jbe    0xa76b40f7
  0xa76b40ea: mov    $0xa75b1728,%edi
  0xa76b40ef: cmp    %edi,%eax
  0xa76b40f1: jb     0xa76b4108
  ;; i2c adapter must return to an interpreter frame
  0xa76b40f7: push   $0xb75a2830
  0xa76b40fc: call   0xa76b4101
  0xa76b4101: pusha  
  0xa76b4102: call   0xb7052f32
  0xa76b4107: hlt    
  ;; } verify_i2ce 
  0xa76b4108: mov    %esp,%edi
  0xa76b410a: and    $0xfffffff0,%esp
  0xa76b410d: push   %eax
  0xa76b410e: mov    %edi,%eax
  0xa76b4110: mov    0x30(%ebx),%edi
  0xa76b4113: mov    0x4(%eax),%ecx
  0xa76b4116: mov    %esp,%eax
  0xa76b4118: shr    $0xc,%eax
  0xa76b411b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b4122: mov    %ebx,0x16c(%eax)
  0xa76b4128: mov    %ebx,%eax
  0xa76b412a: jmp    *%edi
  0xa76b412c: mov    0x4(%ecx),%ebx
  0xa76b412f: cmp    0x8(%eax),%ebx
  0xa76b4132: mov    0x4(%eax),%ebx
  0xa76b4135: jne    0xa76b4148
  0xa76b413b: cmpl   $0x0,0x34(%ebx)
  0xa76b4142: je     0xa76b4187
  0xa76b4148: jmp    0xa7692560
  0xa76b414d: cmpl   $0x0,0x34(%ebx)
  0xa76b4154: je     0xa76b4187
  0xa76b415a: mov    (%esp),%eax
  0xa76b415d: pusha  
  0xa76b415e: pushf  
  0xa76b415f: sub    $0x10,%esp
  0xa76b4162: vmovsd %xmm0,(%esp)
  0xa76b4167: vmovsd %xmm1,0x8(%esp)
  0xa76b416d: push   %eax
  0xa76b416e: push   %ebx
  0xa76b416f: call   0xb71d62fc
  0xa76b4174: add    $0x8,%esp
  0xa76b4177: vmovsd (%esp),%xmm0
  0xa76b417c: vmovsd 0x8(%esp),%xmm1
  0xa76b4182: add    $0x10,%esp
  0xa76b4185: popf   
  0xa76b4186: popa   
  0xa76b4187: pop    %eax
  0xa76b4188: mov    %esp,%esi
  0xa76b418a: sub    $0x4,%esp
  0xa76b418d: mov    %ecx,(%esp)
  0xa76b4190: mov    0x28(%ebx),%ecx
  0xa76b4193: push   %eax
  0xa76b4194: jmp    *%ecx

AHE@0xb6690328: 0xa0000000 i2c: 0xa76b4240 c2i: 0xa76b42cd c2iUV: 0xa76b42ac
i2c argument handler #0 for: receiver ()Ljava/security/CodeSource; (214 bytes generated)
c2i argument handler starts at 0xa76b42cd
  0xa76b4240: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b4243: mov    $0xa75b1ac0,%edi
  0xa76b4248: cmp    %edi,%eax
  0xa76b424a: jbe    0xa76b425d
  0xa76b4250: mov    $0xa7691ac0,%edi
  0xa76b4255: cmp    %edi,%eax
  0xa76b4257: jb     0xa76b4288
  0xa76b425d: mov    $0xa75af400,%edi
  0xa76b4262: cmp    %edi,%eax
  0xa76b4264: jbe    0xa76b4277
  0xa76b426a: mov    $0xa75b1728,%edi
  0xa76b426f: cmp    %edi,%eax
  0xa76b4271: jb     0xa76b4288
  ;; i2c adapter must return to an interpreter frame
  0xa76b4277: push   $0xb75a2830
  0xa76b427c: call   0xa76b4281
  0xa76b4281: pusha  
  0xa76b4282: call   0xb7052f32
  0xa76b4287: hlt    
  ;; } verify_i2ce 
  0xa76b4288: mov    %esp,%edi
  0xa76b428a: and    $0xfffffff0,%esp
  0xa76b428d: push   %eax
  0xa76b428e: mov    %edi,%eax
  0xa76b4290: mov    0x30(%ebx),%edi
  0xa76b4293: mov    0x4(%eax),%ecx
  0xa76b4296: mov    %esp,%eax
  0xa76b4298: shr    $0xc,%eax
  0xa76b429b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b42a2: mov    %ebx,0x16c(%eax)
  0xa76b42a8: mov    %ebx,%eax
  0xa76b42aa: jmp    *%edi
  0xa76b42ac: mov    0x4(%ecx),%ebx
  0xa76b42af: cmp    0x8(%eax),%ebx
  0xa76b42b2: mov    0x4(%eax),%ebx
  0xa76b42b5: jne    0xa76b42c8
  0xa76b42bb: cmpl   $0x0,0x34(%ebx)
  0xa76b42c2: je     0xa76b4307
  0xa76b42c8: jmp    0xa7692560
  0xa76b42cd: cmpl   $0x0,0x34(%ebx)
  0xa76b42d4: je     0xa76b4307
  0xa76b42da: mov    (%esp),%eax
  0xa76b42dd: pusha  
  0xa76b42de: pushf  
  0xa76b42df: sub    $0x10,%esp
  0xa76b42e2: vmovsd %xmm0,(%esp)
  0xa76b42e7: vmovsd %xmm1,0x8(%esp)
  0xa76b42ed: push   %eax
  0xa76b42ee: push   %ebx
  0xa76b42ef: call   0xb71d62fc
  0xa76b42f4: add    $0x8,%esp
  0xa76b42f7: vmovsd (%esp),%xmm0
  0xa76b42fc: vmovsd 0x8(%esp),%xmm1
  0xa76b4302: add    $0x10,%esp
  0xa76b4305: popf   
  0xa76b4306: popa   
  0xa76b4307: pop    %eax
  0xa76b4308: mov    %esp,%esi
  0xa76b430a: sub    $0x4,%esp
  0xa76b430d: mov    %ecx,(%esp)
  0xa76b4310: mov    0x28(%ebx),%ecx
  0xa76b4313: push   %eax
  0xa76b4314: jmp    *%ecx

AHE@0xb669034c: 0xa0000000 i2c: 0xa76b43c0 c2i: 0xa76b444d c2iUV: 0xa76b442c
i2c argument handler #0 for: static (Ljava/security/ProtectionDomain;)Z (214 bytes generated)
c2i argument handler starts at 0xa76b444d
  0xa76b43c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b43c3: mov    $0xa75b1ac0,%edi
  0xa76b43c8: cmp    %edi,%eax
  0xa76b43ca: jbe    0xa76b43dd
  0xa76b43d0: mov    $0xa7691ac0,%edi
  0xa76b43d5: cmp    %edi,%eax
  0xa76b43d7: jb     0xa76b4408
  0xa76b43dd: mov    $0xa75af400,%edi
  0xa76b43e2: cmp    %edi,%eax
  0xa76b43e4: jbe    0xa76b43f7
  0xa76b43ea: mov    $0xa75b1728,%edi
  0xa76b43ef: cmp    %edi,%eax
  0xa76b43f1: jb     0xa76b4408
  ;; i2c adapter must return to an interpreter frame
  0xa76b43f7: push   $0xb75a2830
  0xa76b43fc: call   0xa76b4401
  0xa76b4401: pusha  
  0xa76b4402: call   0xb7052f32
  0xa76b4407: hlt    
  ;; } verify_i2ce 
  0xa76b4408: mov    %esp,%edi
  0xa76b440a: and    $0xfffffff0,%esp
  0xa76b440d: push   %eax
  0xa76b440e: mov    %edi,%eax
  0xa76b4410: mov    0x30(%ebx),%edi
  0xa76b4413: mov    0x4(%eax),%ecx
  0xa76b4416: mov    %esp,%eax
  0xa76b4418: shr    $0xc,%eax
  0xa76b441b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b4422: mov    %ebx,0x16c(%eax)
  0xa76b4428: mov    %ebx,%eax
  0xa76b442a: jmp    *%edi
  0xa76b442c: mov    0x4(%ecx),%ebx
  0xa76b442f: cmp    0x8(%eax),%ebx
  0xa76b4432: mov    0x4(%eax),%ebx
  0xa76b4435: jne    0xa76b4448
  0xa76b443b: cmpl   $0x0,0x34(%ebx)
  0xa76b4442: je     0xa76b4487
  0xa76b4448: jmp    0xa7692560
  0xa76b444d: cmpl   $0x0,0x34(%ebx)
  0xa76b4454: je     0xa76b4487
  0xa76b445a: mov    (%esp),%eax
  0xa76b445d: pusha  
  0xa76b445e: pushf  
  0xa76b445f: sub    $0x10,%esp
  0xa76b4462: vmovsd %xmm0,(%esp)
  0xa76b4467: vmovsd %xmm1,0x8(%esp)
  0xa76b446d: push   %eax
  0xa76b446e: push   %ebx
  0xa76b446f: call   0xb71d62fc
  0xa76b4474: add    $0x8,%esp
  0xa76b4477: vmovsd (%esp),%xmm0
  0xa76b447c: vmovsd 0x8(%esp),%xmm1
  0xa76b4482: add    $0x10,%esp
  0xa76b4485: popf   
  0xa76b4486: popa   
  0xa76b4487: pop    %eax
  0xa76b4488: mov    %esp,%esi
  0xa76b448a: sub    $0x4,%esp
  0xa76b448d: mov    %ecx,(%esp)
  0xa76b4490: mov    0x28(%ebx),%ecx
  0xa76b4493: push   %eax
  0xa76b4494: jmp    *%ecx

AHE@0xb6690370: 0xa0000000 i2c: 0xa76b4540 c2i: 0xa76b45cd c2iUV: 0xa76b45ac
i2c argument handler #0 for: receiver ()Ljava/lang/ClassLoader; (214 bytes generated)
c2i argument handler starts at 0xa76b45cd
  0xa76b4540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b4543: mov    $0xa75b1ac0,%edi
  0xa76b4548: cmp    %edi,%eax
  0xa76b454a: jbe    0xa76b455d
  0xa76b4550: mov    $0xa7691ac0,%edi
  0xa76b4555: cmp    %edi,%eax
  0xa76b4557: jb     0xa76b4588
  0xa76b455d: mov    $0xa75af400,%edi
  0xa76b4562: cmp    %edi,%eax
  0xa76b4564: jbe    0xa76b4577
  0xa76b456a: mov    $0xa75b1728,%edi
  0xa76b456f: cmp    %edi,%eax
  0xa76b4571: jb     0xa76b4588
  ;; i2c adapter must return to an interpreter frame
  0xa76b4577: push   $0xb75a2830
  0xa76b457c: call   0xa76b4581
  0xa76b4581: pusha  
  0xa76b4582: call   0xb7052f32
  0xa76b4587: hlt    
  ;; } verify_i2ce 
  0xa76b4588: mov    %esp,%edi
  0xa76b458a: and    $0xfffffff0,%esp
  0xa76b458d: push   %eax
  0xa76b458e: mov    %edi,%eax
  0xa76b4590: mov    0x30(%ebx),%edi
  0xa76b4593: mov    0x4(%eax),%ecx
  0xa76b4596: mov    %esp,%eax
  0xa76b4598: shr    $0xc,%eax
  0xa76b459b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b45a2: mov    %ebx,0x16c(%eax)
  0xa76b45a8: mov    %ebx,%eax
  0xa76b45aa: jmp    *%edi
  0xa76b45ac: mov    0x4(%ecx),%ebx
  0xa76b45af: cmp    0x8(%eax),%ebx
  0xa76b45b2: mov    0x4(%eax),%ebx
  0xa76b45b5: jne    0xa76b45c8
  0xa76b45bb: cmpl   $0x0,0x34(%ebx)
  0xa76b45c2: je     0xa76b4607
  0xa76b45c8: jmp    0xa7692560
  0xa76b45cd: cmpl   $0x0,0x34(%ebx)
  0xa76b45d4: je     0xa76b4607
  0xa76b45da: mov    (%esp),%eax
  0xa76b45dd: pusha  
  0xa76b45de: pushf  
  0xa76b45df: sub    $0x10,%esp
  0xa76b45e2: vmovsd %xmm0,(%esp)
  0xa76b45e7: vmovsd %xmm1,0x8(%esp)
  0xa76b45ed: push   %eax
  0xa76b45ee: push   %ebx
  0xa76b45ef: call   0xb71d62fc
  0xa76b45f4: add    $0x8,%esp
  0xa76b45f7: vmovsd (%esp),%xmm0
  0xa76b45fc: vmovsd 0x8(%esp),%xmm1
  0xa76b4602: add    $0x10,%esp
  0xa76b4605: popf   
  0xa76b4606: popa   
  0xa76b4607: pop    %eax
  0xa76b4608: mov    %esp,%esi
  0xa76b460a: sub    $0x4,%esp
  0xa76b460d: mov    %ecx,(%esp)
  0xa76b4610: mov    0x28(%ebx),%ecx
  0xa76b4613: push   %eax
  0xa76b4614: jmp    *%ecx

AHE@0xb6690394: 0xa0000000 i2c: 0xa76b46c0 c2i: 0xa76b474d c2iUV: 0xa76b472c
i2c argument handler #0 for: receiver ()Ljava/lang/String; (214 bytes generated)
c2i argument handler starts at 0xa76b474d
  0xa76b46c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b46c3: mov    $0xa75b1ac0,%edi
  0xa76b46c8: cmp    %edi,%eax
  0xa76b46ca: jbe    0xa76b46dd
  0xa76b46d0: mov    $0xa7691ac0,%edi
  0xa76b46d5: cmp    %edi,%eax
  0xa76b46d7: jb     0xa76b4708
  0xa76b46dd: mov    $0xa75af400,%edi
  0xa76b46e2: cmp    %edi,%eax
  0xa76b46e4: jbe    0xa76b46f7
  0xa76b46ea: mov    $0xa75b1728,%edi
  0xa76b46ef: cmp    %edi,%eax
  0xa76b46f1: jb     0xa76b4708
  ;; i2c adapter must return to an interpreter frame
  0xa76b46f7: push   $0xb75a2830
  0xa76b46fc: call   0xa76b4701
  0xa76b4701: pusha  
  0xa76b4702: call   0xb7052f32
  0xa76b4707: hlt    
  ;; } verify_i2ce 
  0xa76b4708: mov    %esp,%edi
  0xa76b470a: and    $0xfffffff0,%esp
  0xa76b470d: push   %eax
  0xa76b470e: mov    %edi,%eax
  0xa76b4710: mov    0x30(%ebx),%edi
  0xa76b4713: mov    0x4(%eax),%ecx
  0xa76b4716: mov    %esp,%eax
  0xa76b4718: shr    $0xc,%eax
  0xa76b471b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b4722: mov    %ebx,0x16c(%eax)
  0xa76b4728: mov    %ebx,%eax
  0xa76b472a: jmp    *%edi
  0xa76b472c: mov    0x4(%ecx),%ebx
  0xa76b472f: cmp    0x8(%eax),%ebx
  0xa76b4732: mov    0x4(%eax),%ebx
  0xa76b4735: jne    0xa76b4748
  0xa76b473b: cmpl   $0x0,0x34(%ebx)
  0xa76b4742: je     0xa76b4787
  0xa76b4748: jmp    0xa7692560
  0xa76b474d: cmpl   $0x0,0x34(%ebx)
  0xa76b4754: je     0xa76b4787
  0xa76b475a: mov    (%esp),%eax
  0xa76b475d: pusha  
  0xa76b475e: pushf  
  0xa76b475f: sub    $0x10,%esp
  0xa76b4762: vmovsd %xmm0,(%esp)
  0xa76b4767: vmovsd %xmm1,0x8(%esp)
  0xa76b476d: push   %eax
  0xa76b476e: push   %ebx
  0xa76b476f: call   0xb71d62fc
  0xa76b4774: add    $0x8,%esp
  0xa76b4777: vmovsd (%esp),%xmm0
  0xa76b477c: vmovsd 0x8(%esp),%xmm1
  0xa76b4782: add    $0x10,%esp
  0xa76b4785: popf   
  0xa76b4786: popa   
  0xa76b4787: pop    %eax
  0xa76b4788: mov    %esp,%esi
  0xa76b478a: sub    $0x4,%esp
  0xa76b478d: mov    %ecx,(%esp)
  0xa76b4790: mov    0x28(%ebx),%ecx
  0xa76b4793: push   %eax
  0xa76b4794: jmp    *%ecx

AHE@0xb66903b8: 0x i2c: 0xa76b4840 c2i: 0xa76b48ca c2iUV: 0xa76b48a9
i2c argument handler #0 for: static ()V (208 bytes generated)
c2i argument handler starts at 0xa76b48ca
  0xa76b4840: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b4843: mov    $0xa75b1ac0,%edi
  0xa76b4848: cmp    %edi,%eax
  0xa76b484a: jbe    0xa76b485d
  0xa76b4850: mov    $0xa7691ac0,%edi
  0xa76b4855: cmp    %edi,%eax
  0xa76b4857: jb     0xa76b4888
  0xa76b485d: mov    $0xa75af400,%edi
  0xa76b4862: cmp    %edi,%eax
  0xa76b4864: jbe    0xa76b4877
  0xa76b486a: mov    $0xa75b1728,%edi
  0xa76b486f: cmp    %edi,%eax
  0xa76b4871: jb     0xa76b4888
  ;; i2c adapter must return to an interpreter frame
  0xa76b4877: push   $0xb75a2830
  0xa76b487c: call   0xa76b4881
  0xa76b4881: pusha  
  0xa76b4882: call   0xb7052f32
  0xa76b4887: hlt    
  ;; } verify_i2ce 
  0xa76b4888: mov    %esp,%edi
  0xa76b488a: and    $0xfffffff0,%esp
  0xa76b488d: push   %eax
  0xa76b488e: mov    %edi,%eax
  0xa76b4890: mov    0x30(%ebx),%edi
  0xa76b4893: mov    %esp,%eax
  0xa76b4895: shr    $0xc,%eax
  0xa76b4898: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b489f: mov    %ebx,0x16c(%eax)
  0xa76b48a5: mov    %ebx,%eax
  0xa76b48a7: jmp    *%edi
  0xa76b48a9: mov    0x4(%ecx),%ebx
  0xa76b48ac: cmp    0x8(%eax),%ebx
  0xa76b48af: mov    0x4(%eax),%ebx
  0xa76b48b2: jne    0xa76b48c5
  0xa76b48b8: cmpl   $0x0,0x34(%ebx)
  0xa76b48bf: je     0xa76b4904
  0xa76b48c5: jmp    0xa7692560
  0xa76b48ca: cmpl   $0x0,0x34(%ebx)
  0xa76b48d1: je     0xa76b4904
  0xa76b48d7: mov    (%esp),%eax
  0xa76b48da: pusha  
  0xa76b48db: pushf  
  0xa76b48dc: sub    $0x10,%esp
  0xa76b48df: vmovsd %xmm0,(%esp)
  0xa76b48e4: vmovsd %xmm1,0x8(%esp)
  0xa76b48ea: push   %eax
  0xa76b48eb: push   %ebx
  0xa76b48ec: call   0xb71d62fc
  0xa76b48f1: add    $0x8,%esp
  0xa76b48f4: vmovsd (%esp),%xmm0
  0xa76b48f9: vmovsd 0x8(%esp),%xmm1
  0xa76b48ff: add    $0x10,%esp
  0xa76b4902: popf   
  0xa76b4903: popa   
  0xa76b4904: pop    %eax
  0xa76b4905: mov    %esp,%esi
  0xa76b4907: sub    $0x0,%esp
  0xa76b490a: mov    0x28(%ebx),%ecx
  0xa76b490d: push   %eax
  0xa76b490e: jmp    *%ecx

AHE@0xb66903dc: 0xaaaaa000 i2c: 0xa76b49c0 c2i: 0xa76b4a68 c2iUV: 0xa76b4a47
i2c argument handler #0 for: receiver (Ljava/security/CodeSource;Ljava/security/PermissionCollection;Ljava/lang/ClassLoader;[Ljava/security/Principal;)V (269 bytes generated)
c2i argument handler starts at 0xa76b4a68
  0xa76b49c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b49c3: mov    $0xa75b1ac0,%edi
  0xa76b49c8: cmp    %edi,%eax
  0xa76b49ca: jbe    0xa76b49dd
  0xa76b49d0: mov    $0xa7691ac0,%edi
  0xa76b49d5: cmp    %edi,%eax
  0xa76b49d7: jb     0xa76b4a08
  0xa76b49dd: mov    $0xa75af400,%edi
  0xa76b49e2: cmp    %edi,%eax
  0xa76b49e4: jbe    0xa76b49f7
  0xa76b49ea: mov    $0xa75b1728,%edi
  0xa76b49ef: cmp    %edi,%eax
  0xa76b49f1: jb     0xa76b4a08
  ;; i2c adapter must return to an interpreter frame
  0xa76b49f7: push   $0xb75a2830
  0xa76b49fc: call   0xa76b4a01
  0xa76b4a01: pusha  
  0xa76b4a02: call   0xb7052f32
  0xa76b4a07: hlt    
  ;; } verify_i2ce 
  0xa76b4a08: mov    %esp,%edi
  0xa76b4a0a: sub    $0x10,%esp
  0xa76b4a0d: and    $0xfffffff0,%esp
  0xa76b4a10: push   %eax
  0xa76b4a11: mov    %edi,%eax
  0xa76b4a13: mov    0x30(%ebx),%edi
  0xa76b4a16: mov    0x14(%eax),%ecx
  0xa76b4a19: mov    0x10(%eax),%edx
  0xa76b4a1c: mov    0xc(%eax),%esi
  0xa76b4a1f: mov    %esi,0x4(%esp)
  0xa76b4a23: mov    0x8(%eax),%esi
  0xa76b4a26: mov    %esi,0x8(%esp)
  0xa76b4a2a: mov    0x4(%eax),%esi
  0xa76b4a2d: mov    %esi,0xc(%esp)
  0xa76b4a31: mov    %esp,%eax
  0xa76b4a33: shr    $0xc,%eax
  0xa76b4a36: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b4a3d: mov    %ebx,0x16c(%eax)
  0xa76b4a43: mov    %ebx,%eax
  0xa76b4a45: jmp    *%edi
  0xa76b4a47: mov    0x4(%ecx),%ebx
  0xa76b4a4a: cmp    0x8(%eax),%ebx
  0xa76b4a4d: mov    0x4(%eax),%ebx
  0xa76b4a50: jne    0xa76b4a63
  0xa76b4a56: cmpl   $0x0,0x34(%ebx)
  0xa76b4a5d: je     0xa76b4aa2
  0xa76b4a63: jmp    0xa7692560
  0xa76b4a68: cmpl   $0x0,0x34(%ebx)
  0xa76b4a6f: je     0xa76b4aa2
  0xa76b4a75: mov    (%esp),%eax
  0xa76b4a78: pusha  
  0xa76b4a79: pushf  
  0xa76b4a7a: sub    $0x10,%esp
  0xa76b4a7d: vmovsd %xmm0,(%esp)
  0xa76b4a82: vmovsd %xmm1,0x8(%esp)
  0xa76b4a88: push   %eax
  0xa76b4a89: push   %ebx
  0xa76b4a8a: call   0xb71d62fc
  0xa76b4a8f: add    $0x8,%esp
  0xa76b4a92: vmovsd (%esp),%xmm0
  0xa76b4a97: vmovsd 0x8(%esp),%xmm1
  0xa76b4a9d: add    $0x10,%esp
  0xa76b4aa0: popf   
  0xa76b4aa1: popa   
  0xa76b4aa2: pop    %eax
  0xa76b4aa3: mov    %esp,%esi
  0xa76b4aa5: sub    $0x14,%esp
  0xa76b4aa8: mov    %ecx,0x10(%esp)
  0xa76b4aac: mov    %edx,0xc(%esp)
  0xa76b4ab0: mov    0x14(%esp),%edi
  0xa76b4ab4: mov    %edi,0x8(%esp)
  0xa76b4ab8: mov    0x18(%esp),%edi
  0xa76b4abc: mov    %edi,0x4(%esp)
  0xa76b4ac0: mov    0x1c(%esp),%edi
  0xa76b4ac4: mov    %edi,(%esp)
  0xa76b4ac7: mov    0x28(%ebx),%ecx
  0xa76b4aca: push   %eax
  0xa76b4acb: jmp    *%ecx

AHE@0xb6690400: 0xaaa00000 i2c: 0xa76b4b80 c2i: 0xa76b4c1a c2iUV: 0xa76b4bf9
i2c argument handler #0 for: receiver (Ljava/security/CodeSource;Ljava/security/PermissionCollection;)V (239 bytes generated)
c2i argument handler starts at 0xa76b4c1a
  0xa76b4b80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b4b83: mov    $0xa75b1ac0,%edi
  0xa76b4b88: cmp    %edi,%eax
  0xa76b4b8a: jbe    0xa76b4b9d
  0xa76b4b90: mov    $0xa7691ac0,%edi
  0xa76b4b95: cmp    %edi,%eax
  0xa76b4b97: jb     0xa76b4bc8
  0xa76b4b9d: mov    $0xa75af400,%edi
  0xa76b4ba2: cmp    %edi,%eax
  0xa76b4ba4: jbe    0xa76b4bb7
  0xa76b4baa: mov    $0xa75b1728,%edi
  0xa76b4baf: cmp    %edi,%eax
  0xa76b4bb1: jb     0xa76b4bc8
  ;; i2c adapter must return to an interpreter frame
  0xa76b4bb7: push   $0xb75a2830
  0xa76b4bbc: call   0xa76b4bc1
  0xa76b4bc1: pusha  
  0xa76b4bc2: call   0xb7052f32
  0xa76b4bc7: hlt    
  ;; } verify_i2ce 
  0xa76b4bc8: mov    %esp,%edi
  0xa76b4bca: sub    $0x8,%esp
  0xa76b4bcd: and    $0xfffffff0,%esp
  0xa76b4bd0: push   %eax
  0xa76b4bd1: mov    %edi,%eax
  0xa76b4bd3: mov    0x30(%ebx),%edi
  0xa76b4bd6: mov    0xc(%eax),%ecx
  0xa76b4bd9: mov    0x8(%eax),%edx
  0xa76b4bdc: mov    0x4(%eax),%esi
  0xa76b4bdf: mov    %esi,0x4(%esp)
  0xa76b4be3: mov    %esp,%eax
  0xa76b4be5: shr    $0xc,%eax
  0xa76b4be8: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b4bef: mov    %ebx,0x16c(%eax)
  0xa76b4bf5: mov    %ebx,%eax
  0xa76b4bf7: jmp    *%edi
  0xa76b4bf9: mov    0x4(%ecx),%ebx
  0xa76b4bfc: cmp    0x8(%eax),%ebx
  0xa76b4bff: mov    0x4(%eax),%ebx
  0xa76b4c02: jne    0xa76b4c15
  0xa76b4c08: cmpl   $0x0,0x34(%ebx)
  0xa76b4c0f: je     0xa76b4c54
  0xa76b4c15: jmp    0xa7692560
  0xa76b4c1a: cmpl   $0x0,0x34(%ebx)
  0xa76b4c21: je     0xa76b4c54
  0xa76b4c27: mov    (%esp),%eax
  0xa76b4c2a: pusha  
  0xa76b4c2b: pushf  
  0xa76b4c2c: sub    $0x10,%esp
  0xa76b4c2f: vmovsd %xmm0,(%esp)
  0xa76b4c34: vmovsd %xmm1,0x8(%esp)
  0xa76b4c3a: push   %eax
  0xa76b4c3b: push   %ebx
  0xa76b4c3c: call   0xb71d62fc
  0xa76b4c41: add    $0x8,%esp
  0xa76b4c44: vmovsd (%esp),%xmm0
  0xa76b4c49: vmovsd 0x8(%esp),%xmm1
  0xa76b4c4f: add    $0x10,%esp
  0xa76b4c52: popf   
  0xa76b4c53: popa   
  0xa76b4c54: pop    %eax
  0xa76b4c55: mov    %esp,%esi
  0xa76b4c57: sub    $0xc,%esp
  0xa76b4c5a: mov    %ecx,0x8(%esp)
  0xa76b4c5e: mov    %edx,0x4(%esp)
  0xa76b4c62: mov    0xc(%esp),%edi
  0xa76b4c66: mov    %edi,(%esp)
  0xa76b4c69: mov    0x28(%ebx),%ecx
  0xa76b4c6c: push   %eax
  0xa76b4c6d: jmp    *%ecx

AHE@0xb6690424: 0xa0000000 i2c: 0xa76b4d00 c2i: 0xa76b4d8d c2iUV: 0xa76b4d6c
i2c argument handler #0 for: receiver ()Z (214 bytes generated)
c2i argument handler starts at 0xa76b4d8d
  0xa76b4d00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76b4d03: mov    $0xa75b1ac0,%edi
  0xa76b4d08: cmp    %edi,%eax
  0xa76b4d0a: jbe    0xa76b4d1d
  0xa76b4d10: mov    $0xa7691ac0,%edi
  0xa76b4d15: cmp    %edi,%eax
  0xa76b4d17: jb     0xa76b4d48
  0xa76b4d1d: mov    $0xa75af400,%edi
  0xa76b4d22: cmp    %edi,%eax
  0xa76b4d24: jbe    0xa76b4d37
  0xa76b4d2a: mov    $0xa75b1728,%edi
  0xa76b4d2f: cmp    %edi,%eax
  0xa76b4d31: jb     0xa76b4d48
  ;; i2c adapter must return to an interpreter frame
  0xa76b4d37: push   $0xb75a2830
  0xa76b4d3c: call   0xa76b4d41
  0xa76b4d41: pusha  
  0xa76b4d42: call   0xb7052f32
  0xa76b4d47: hlt    
  ;; } verify_i2ce 
  0xa76b4d48: mov    %esp,%edi
  0xa76b4d4a: and    $0xfffffff0,%esp
  0xa76b4d4d: push   %eax
  0xa76b4d4e: mov    %edi,%eax
  0xa76b4d50: mov    0x30(%ebx),%edi
  0xa76b4d53: mov    0x4(%eax),%ecx
  0xa76b4d56: mov    %esp,%eax
  0xa76b4d58: shr    $0xc,%eax
  0xa76b4d5b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76b4d62: mov    %ebx,0x16c(%eax)
  0xa76b4d68: mov    %ebx,%eax
  0xa76b4d6a: jmp    *%edi
  0xa76b4d6c: mov    0x4(%ecx),%ebx
  0xa76b4d6f: cmp    0x8(%eax),%ebx
  0xa76b4d72: mov    0x4(%eax),%ebx
  0xa76b4d75: jne    0xa76b4d88
  0xa76b4d7b: cmpl   $0x0,0x34(%ebx)
  0xa76b4d82: je     0xa76b4dc7
  0xa76b4d88: jmp    0xa7692560
  0xa76b4d8d: cmpl   $0x0,0x34(%ebx)
  0xa76b4d94: je     0xa76b4dc7
  0xa76b4d9a: mov    (%esp),%eax
  0xa76b4d9d: pusha  
  0xa76b4d9e: pushf  
  0xa76b4d9f: sub    $0x10,%esp
  0xa76b4da2: vmovsd %xmm0,(%esp)
  0xa76b4da7: vmovsd %xmm1,0x8(%esp)
  0xa76b4dad: push   %eax
  0xa76b4dae: push   %ebx
  0xa76b4daf: call   0xb71d62fc
  0xa76b4db4: add    $0x8,%esp
  0xa76b4db7: vmovsd (%esp),%xmm0
  0xa76b4dbc: vmovsd 0x8(%esp),%xmm1
  0xa76b4dc2: add    $0x10,%esp
  0xa76b4dc5: popf   
  0xa76b4dc6: popa   
  0xa76b4dc7: pop    %eax
  0xa76b4dc8: mov    %esp,%esi
  0xa76b4dca: sub    $0x4,%esp
  0xa76b4dcd: mov    %ecx,(%esp)
  0xa76b4dd0: mov    0x28(%ebx),%ecx
  0xa76b4dd3: push   %eax
  0xa76b4dd4: jmp    *%ecx

Decoding RuntimeStub - AbstractMethodError throw_exception 0xa76ba688
  0xa76ba6e0: mov    %esp,%ebx
  0xa76ba6e2: shr    $0xc,%ebx
  0xa76ba6e5: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76ba6ec: push   %ebp
  0xa76ba6ed: mov    %esp,%ebp
  0xa76ba6ef: sub    $0xc,%esp
  0xa76ba6f2: mov    %ebx,(%esp)
  0xa76ba6f5: mov    %ebp,0x148(%ebx)
  0xa76ba6fb: mov    %esp,0x140(%ebx)
  ;; call runtime_entry
  0xa76ba701: call   0xb71d0fb6
  0xa76ba706: mov    %esp,%ebx
  0xa76ba708: shr    $0xc,%ebx
  0xa76ba70b: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76ba712: movl   $0x0,0x140(%ebx)
  0xa76ba71c: movl   $0x0,0x148(%ebx)
  0xa76ba726: movl   $0x0,0x144(%ebx)
  0xa76ba730: mov    %ebp,%esp
  0xa76ba732: pop    %ebp
  0xa76ba733: cmpl   $0x0,0x4(%ebx)
  0xa76ba73a: jne    0xa76ba751
  0xa76ba740: push   $0xb735fe8b
  0xa76ba745: call   0xa76ba74a
  0xa76ba74a: pusha  
  0xa76ba74b: call   0xb7052f32
  0xa76ba750: hlt    
  0xa76ba751: jmp    Stub::forward exception
  0xa76ba756: hlt    
  0xa76ba757: hlt    

Decoding RuntimeStub - IncompatibleClassChangeError throw_exception 0xa76ba788
  0xa76ba7e0: mov    %esp,%ebx
  0xa76ba7e2: shr    $0xc,%ebx
  0xa76ba7e5: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76ba7ec: push   %ebp
  0xa76ba7ed: mov    %esp,%ebp
  0xa76ba7ef: sub    $0xc,%esp
  0xa76ba7f2: mov    %ebx,(%esp)
  0xa76ba7f5: mov    %ebp,0x148(%ebx)
  0xa76ba7fb: mov    %esp,0x140(%ebx)
  ;; call runtime_entry
  0xa76ba801: call   0xb71d112c
  0xa76ba806: mov    %esp,%ebx
  0xa76ba808: shr    $0xc,%ebx
  0xa76ba80b: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76ba812: movl   $0x0,0x140(%ebx)
  0xa76ba81c: movl   $0x0,0x148(%ebx)
  0xa76ba826: movl   $0x0,0x144(%ebx)
  0xa76ba830: mov    %ebp,%esp
  0xa76ba832: pop    %ebp
  0xa76ba833: cmpl   $0x0,0x4(%ebx)
  0xa76ba83a: jne    0xa76ba851
  0xa76ba840: push   $0xb735fe8b
  0xa76ba845: call   0xa76ba84a
  0xa76ba84a: pusha  
  0xa76ba84b: call   0xb7052f32
  0xa76ba850: hlt    
  0xa76ba851: jmp    Stub::forward exception
  0xa76ba856: hlt    
  0xa76ba857: hlt    

Decoding RuntimeStub - NullPointerException at call throw_exception 0xa76ba888
  0xa76ba8e0: mov    %esp,%ebx
  0xa76ba8e2: shr    $0xc,%ebx
  0xa76ba8e5: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76ba8ec: push   %ebp
  0xa76ba8ed: mov    %esp,%ebp
  0xa76ba8ef: sub    $0xc,%esp
  0xa76ba8f2: mov    %ebx,(%esp)
  0xa76ba8f5: mov    %ebp,0x148(%ebx)
  0xa76ba8fb: mov    %esp,0x140(%ebx)
  ;; call runtime_entry
  0xa76ba901: call   0xb71d1596
  0xa76ba906: mov    %esp,%ebx
  0xa76ba908: shr    $0xc,%ebx
  0xa76ba90b: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76ba912: movl   $0x0,0x140(%ebx)
  0xa76ba91c: movl   $0x0,0x148(%ebx)
  0xa76ba926: movl   $0x0,0x144(%ebx)
  0xa76ba930: mov    %ebp,%esp
  0xa76ba932: pop    %ebp
  0xa76ba933: cmpl   $0x0,0x4(%ebx)
  0xa76ba93a: jne    0xa76ba951
  0xa76ba940: push   $0xb735fe8b
  0xa76ba945: call   0xa76ba94a
  0xa76ba94a: pusha  
  0xa76ba94b: call   0xb7052f32
  0xa76ba950: hlt    
  0xa76ba951: jmp    Stub::forward exception
  0xa76ba956: hlt    
  0xa76ba957: hlt    

StubRoutines::verify_oop [0xa76b4e40, 0xa76b4e86[ (70 bytes)
  0xa76b4e40: pushf  
  0xa76b4e41: incl   0xb792d0e4
  0xa76b4e47: push   %edx
  0xa76b4e48: mov    0x10(%esp),%eax
  0xa76b4e4c: test   %eax,%eax
  0xa76b4e4e: je     Stub::verify_oop+45 0x0xa76b4e6d
  0xa76b4e54: mov    %eax,%edx
  0xa76b4e56: and    $0x7,%edx
  0xa76b4e59: cmp    $0x0,%edx
  0xa76b4e5c: jne    Stub::verify_oop+54 0x0xa76b4e76
  0xa76b4e62: mov    0x4(%eax),%eax
  0xa76b4e65: test   %eax,%eax
  0xa76b4e67: je     Stub::verify_oop+54 0x0xa76b4e76
  0xa76b4e6d: mov    0x14(%esp),%eax
  0xa76b4e71: pop    %edx
  0xa76b4e72: popf   
  0xa76b4e73: ret    $0xc
  0xa76b4e76: mov    0x14(%esp),%eax
  0xa76b4e7a: pop    %edx
  0xa76b4e7b: popf   
  0xa76b4e7c: pusha  
  ;; call MacroAssembler::debug
  0xa76b4e7d: call   0xb7052f32
  0xa76b4e82: popa   
  0xa76b4e83: ret    $0xc

StubRoutines::arrayof_jbyte_disjoint_arraycopy [0xa76b4ea0, 0xa76b4f8f[ (239 bytes)
  0xa76b4ea0: push   %ebp
  0xa76b4ea1: mov    %esp,%ebp
  0xa76b4ea3: push   %esi
  0xa76b4ea4: push   %edi
  0xa76b4ea5: mov    0x10(%esp),%esi
  0xa76b4ea9: mov    0x14(%esp),%edi
  0xa76b4ead: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b4eb1: sub    %esi,%edi
  0xa76b4eb3: cmp    $0x8,%ecx
  0xa76b4eb6: jb     Stub::arrayof_jbyte_disjoint_arraycopy+178 0x0xa76b4f52
  0xa76b4ebc: test   $0x4,%esi
  0xa76b4ec2: je     Stub::arrayof_jbyte_disjoint_arraycopy+47 0x0xa76b4ecf
  0xa76b4ec4: mov    (%esi),%eax
  0xa76b4ec6: mov    %eax,(%esi,%edi,1)
  0xa76b4ec9: add    $0x4,%esi
  0xa76b4ecc: sub    $0x4,%ecx
  ;; L_copy_64_bytes:
  0xa76b4ecf: mov    %ecx,%eax
  0xa76b4ed1: shr    $0x3,%eax
  0xa76b4ed4: jmp    Stub::arrayof_jbyte_disjoint_arraycopy+153 0x0xa76b4f39
  0xa76b4ed6: nop
  0xa76b4ed7: nop
  0xa76b4ed8: nop
  0xa76b4ed9: nop
  0xa76b4eda: nop
  0xa76b4edb: nop
  0xa76b4edc: nop
  0xa76b4edd: nop
  0xa76b4ede: nop
  0xa76b4edf: nop
  ;; L_copy_64_bytes_loop:
  0xa76b4ee0: vmovq  (%esi),%xmm0
  0xa76b4ee4: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b4ee9: vmovq  0x8(%esi),%xmm1
  0xa76b4eee: vmovq  %xmm1,0x8(%esi,%edi,1)
  0xa76b4ef4: vmovq  0x10(%esi),%xmm2
  0xa76b4ef9: vmovq  %xmm2,0x10(%esi,%edi,1)
  0xa76b4eff: vmovq  0x18(%esi),%xmm3
  0xa76b4f04: vmovq  %xmm3,0x18(%esi,%edi,1)
  0xa76b4f0a: vmovq  0x20(%esi),%xmm4
  0xa76b4f0f: vmovq  %xmm4,0x20(%esi,%edi,1)
  0xa76b4f15: vmovq  0x28(%esi),%xmm5
  0xa76b4f1a: vmovq  %xmm5,0x28(%esi,%edi,1)
  0xa76b4f20: vmovq  0x30(%esi),%xmm6
  0xa76b4f25: vmovq  %xmm6,0x30(%esi,%edi,1)
  0xa76b4f2b: vmovq  0x38(%esi),%xmm7
  0xa76b4f30: vmovq  %xmm7,0x38(%esi,%edi,1)
  0xa76b4f36: add    $0x40,%esi
  ;; L_copy_64_bytes:
  0xa76b4f39: sub    $0x8,%eax
  0xa76b4f3c: jge    Stub::arrayof_jbyte_disjoint_arraycopy+64 0x0xa76b4ee0
  0xa76b4f3e: add    $0x8,%eax
  0xa76b4f41: je     Stub::arrayof_jbyte_disjoint_arraycopy+178 0x0xa76b4f52
  ;; L_copy_8_bytes:
  0xa76b4f43: vmovq  (%esi),%xmm0
  0xa76b4f47: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b4f4c: add    $0x8,%esi
  0xa76b4f4f: dec    %eax
  0xa76b4f50: jg     Stub::arrayof_jbyte_disjoint_arraycopy+163 0x0xa76b4f43
  ;; L_exit:
  ;; L_copy_4_bytes:
  0xa76b4f52: test   $0x4,%ecx
  0xa76b4f58: je     Stub::arrayof_jbyte_disjoint_arraycopy+194 0x0xa76b4f62
  0xa76b4f5a: mov    (%esi),%eax
  0xa76b4f5c: mov    %eax,(%esi,%edi,1)
  0xa76b4f5f: add    $0x4,%esi
  ;; L_copy_2_bytes:
  0xa76b4f62: test   $0x2,%ecx
  0xa76b4f68: je     Stub::arrayof_jbyte_disjoint_arraycopy+212 0x0xa76b4f74
  0xa76b4f6a: mov    (%esi),%ax
  0xa76b4f6d: mov    %ax,(%esi,%edi,1)
  0xa76b4f71: add    $0x2,%esi
  ;; L_copy_byte:
  0xa76b4f74: test   $0x1,%ecx
  0xa76b4f7a: je     Stub::arrayof_jbyte_disjoint_arraycopy+225 0x0xa76b4f81
  0xa76b4f7c: mov    (%esi),%al
  0xa76b4f7e: mov    %al,(%esi,%edi,1)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0xa76b4f81: incl   0xb792c2a8
  0xa76b4f87: pop    %edi
  0xa76b4f88: pop    %esi
  0xa76b4f89: mov    %ebp,%esp
  0xa76b4f8b: pop    %ebp
  0xa76b4f8c: xor    %eax,%eax
  0xa76b4f8e: ret    

StubRoutines::arrayof_jbyte_arraycopy [0xa76b4fa0, 0xa76b5064[ (196 bytes)
  0xa76b4fa0: push   %ebp
  0xa76b4fa1: mov    %esp,%ebp
  0xa76b4fa3: push   %esi
  0xa76b4fa4: push   %edi
  0xa76b4fa5: mov    0x10(%esp),%eax
  0xa76b4fa9: mov    0x14(%esp),%edx
  0xa76b4fad: mov    0x18(%esp),%ecx
  0xa76b4fb1: mov    %eax,%esi
  0xa76b4fb3: mov    %edx,%edi
  0xa76b4fb5: cmp    %eax,%edx
  0xa76b4fb7: lea    (%eax,%ecx,1),%eax
  0xa76b4fba: jbe    Stub::arrayof_jbyte_disjoint_arraycopy+17 0x0xa76b4eb1
  0xa76b4fc0: cmp    %eax,%edx
  0xa76b4fc2: jae    Stub::arrayof_jbyte_disjoint_arraycopy+17 0x0xa76b4eb1
  0xa76b4fc8: cmp    $0x8,%ecx
  0xa76b4fcb: jb     Stub::arrayof_jbyte_arraycopy+130 0x0xa76b5022
  0xa76b4fd1: lea    (%edx,%ecx,1),%eax
  0xa76b4fd4: test   $0x1,%eax
  0xa76b4fd9: je     Stub::arrayof_jbyte_arraycopy+66 0x0xa76b4fe2
  0xa76b4fdb: dec    %ecx
  0xa76b4fdc: mov    (%esi,%ecx,1),%dl
  0xa76b4fdf: mov    %dl,(%edi,%ecx,1)
  ;; L_skip_align1:
  0xa76b4fe2: test   $0x2,%eax
  0xa76b4fe7: je     Stub::arrayof_jbyte_arraycopy+84 0x0xa76b4ff4
  0xa76b4fe9: sub    $0x2,%ecx
  0xa76b4fec: mov    (%esi,%ecx,1),%dx
  0xa76b4ff0: mov    %dx,(%edi,%ecx,1)
  ;; L_skip_align2:
  0xa76b4ff4: cmp    $0x8,%ecx
  0xa76b4ff7: jb     Stub::arrayof_jbyte_arraycopy+130 0x0xa76b5022
  0xa76b4ffd: test   $0x4,%eax
  0xa76b5002: je     Stub::arrayof_jbyte_arraycopy+122 0x0xa76b501a
  0xa76b5004: sub    $0x4,%ecx
  0xa76b5007: mov    (%esi,%ecx,1),%edx
  0xa76b500a: mov    %edx,(%edi,%ecx,1)
  0xa76b500d: jmp    Stub::arrayof_jbyte_arraycopy+122 0x0xa76b501a
  0xa76b500f: nop
  ;; L_copy_8_bytes_loop:
  0xa76b5010: vmovq  (%esi,%ecx,1),%xmm0
  0xa76b5015: vmovq  %xmm0,(%edi,%ecx,1)
  ;; L_copy_8_bytes:
  0xa76b501a: sub    $0x8,%ecx
  0xa76b501d: jge    Stub::arrayof_jbyte_arraycopy+112 0x0xa76b5010
  0xa76b501f: add    $0x8,%ecx
  ;; L_copy_4_bytes:
  0xa76b5022: test   $0x4,%ecx
  0xa76b5028: je     Stub::arrayof_jbyte_arraycopy+149 0x0xa76b5035
  0xa76b502a: mov    -0x4(%esi,%ecx,1),%edx
  0xa76b502e: mov    %edx,-0x4(%edi,%ecx,1)
  0xa76b5032: sub    $0x4,%ecx
  ;; L_copy_2_bytes:
  0xa76b5035: test   $0x2,%ecx
  0xa76b503b: je     Stub::arrayof_jbyte_arraycopy+170 0x0xa76b504a
  0xa76b503d: mov    -0x2(%esi,%ecx,1),%dx
  0xa76b5042: mov    %dx,-0x2(%edi,%ecx,1)
  0xa76b5047: sub    $0x2,%ecx
  ;; L_copy_byte:
  0xa76b504a: test   $0x1,%ecx
  0xa76b5050: je     Stub::arrayof_jbyte_arraycopy+182 0x0xa76b5056
  0xa76b5052: mov    (%esi),%dl
  0xa76b5054: mov    %dl,(%edi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0xa76b5056: incl   0xb792c2a8
  0xa76b505c: pop    %edi
  0xa76b505d: pop    %esi
  0xa76b505e: mov    %ebp,%esp
  0xa76b5060: pop    %ebp
  0xa76b5061: xor    %eax,%eax
  0xa76b5063: ret    

StubRoutines::jbyte_disjoint_arraycopy [0xa76b5080, 0xa76b518f[ (271 bytes)
  0xa76b5080: push   %ebp
  0xa76b5081: mov    %esp,%ebp
  0xa76b5083: push   %esi
  0xa76b5084: push   %edi
  0xa76b5085: mov    0x10(%esp),%esi
  0xa76b5089: mov    0x14(%esp),%edi
  0xa76b508d: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b5091: sub    %esi,%edi
  0xa76b5093: cmp    $0x8,%ecx
  0xa76b5096: jb     Stub::jbyte_disjoint_arraycopy+210 0x0xa76b5152
  0xa76b509c: test   $0x1,%esi
  0xa76b50a2: je     Stub::jbyte_disjoint_arraycopy+43 0x0xa76b50ab
  0xa76b50a4: mov    (%esi),%al
  0xa76b50a6: mov    %al,(%esi,%edi,1)
  0xa76b50a9: inc    %esi
  0xa76b50aa: dec    %ecx
  ;; L_skip_align1:
  0xa76b50ab: test   $0x2,%esi
  0xa76b50b1: je     Stub::jbyte_disjoint_arraycopy+64 0x0xa76b50c0
  0xa76b50b3: mov    (%esi),%ax
  0xa76b50b6: mov    %ax,(%esi,%edi,1)
  0xa76b50ba: add    $0x2,%esi
  0xa76b50bd: sub    $0x2,%ecx
  ;; L_skip_align2:
  0xa76b50c0: test   $0x4,%esi
  0xa76b50c6: je     Stub::jbyte_disjoint_arraycopy+83 0x0xa76b50d3
  0xa76b50c8: mov    (%esi),%eax
  0xa76b50ca: mov    %eax,(%esi,%edi,1)
  0xa76b50cd: add    $0x4,%esi
  0xa76b50d0: sub    $0x4,%ecx
  ;; L_copy_64_bytes:
  0xa76b50d3: mov    %ecx,%eax
  0xa76b50d5: shr    $0x3,%eax
  0xa76b50d8: jmp    Stub::jbyte_disjoint_arraycopy+185 0x0xa76b5139
  0xa76b50da: nop
  0xa76b50db: nop
  0xa76b50dc: nop
  0xa76b50dd: nop
  0xa76b50de: nop
  0xa76b50df: nop
  ;; L_copy_64_bytes_loop:
  0xa76b50e0: vmovq  (%esi),%xmm0
  0xa76b50e4: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b50e9: vmovq  0x8(%esi),%xmm1
  0xa76b50ee: vmovq  %xmm1,0x8(%esi,%edi,1)
  0xa76b50f4: vmovq  0x10(%esi),%xmm2
  0xa76b50f9: vmovq  %xmm2,0x10(%esi,%edi,1)
  0xa76b50ff: vmovq  0x18(%esi),%xmm3
  0xa76b5104: vmovq  %xmm3,0x18(%esi,%edi,1)
  0xa76b510a: vmovq  0x20(%esi),%xmm4
  0xa76b510f: vmovq  %xmm4,0x20(%esi,%edi,1)
  0xa76b5115: vmovq  0x28(%esi),%xmm5
  0xa76b511a: vmovq  %xmm5,0x28(%esi,%edi,1)
  0xa76b5120: vmovq  0x30(%esi),%xmm6
  0xa76b5125: vmovq  %xmm6,0x30(%esi,%edi,1)
  0xa76b512b: vmovq  0x38(%esi),%xmm7
  0xa76b5130: vmovq  %xmm7,0x38(%esi,%edi,1)
  0xa76b5136: add    $0x40,%esi
  ;; L_copy_64_bytes:
  0xa76b5139: sub    $0x8,%eax
  0xa76b513c: jge    Stub::jbyte_disjoint_arraycopy+96 0x0xa76b50e0
  0xa76b513e: add    $0x8,%eax
  0xa76b5141: je     Stub::jbyte_disjoint_arraycopy+210 0x0xa76b5152
  ;; L_copy_8_bytes:
  0xa76b5143: vmovq  (%esi),%xmm0
  0xa76b5147: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b514c: add    $0x8,%esi
  0xa76b514f: dec    %eax
  0xa76b5150: jg     Stub::jbyte_disjoint_arraycopy+195 0x0xa76b5143
  ;; L_exit:
  ;; L_copy_4_bytes:
  0xa76b5152: test   $0x4,%ecx
  0xa76b5158: je     Stub::jbyte_disjoint_arraycopy+226 0x0xa76b5162
  0xa76b515a: mov    (%esi),%eax
  0xa76b515c: mov    %eax,(%esi,%edi,1)
  0xa76b515f: add    $0x4,%esi
  ;; L_copy_2_bytes:
  0xa76b5162: test   $0x2,%ecx
  0xa76b5168: je     Stub::jbyte_disjoint_arraycopy+244 0x0xa76b5174
  0xa76b516a: mov    (%esi),%ax
  0xa76b516d: mov    %ax,(%esi,%edi,1)
  0xa76b5171: add    $0x2,%esi
  ;; L_copy_byte:
  0xa76b5174: test   $0x1,%ecx
  0xa76b517a: je     Stub::jbyte_disjoint_arraycopy+257 0x0xa76b5181
  0xa76b517c: mov    (%esi),%al
  0xa76b517e: mov    %al,(%esi,%edi,1)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0xa76b5181: incl   0xb792c2a8
  0xa76b5187: pop    %edi
  0xa76b5188: pop    %esi
  0xa76b5189: mov    %ebp,%esp
  0xa76b518b: pop    %ebp
  0xa76b518c: xor    %eax,%eax
  0xa76b518e: ret    

StubRoutines::jbyte_arraycopy [0xa76b51a0, 0xa76b5264[ (196 bytes)
  0xa76b51a0: push   %ebp
  0xa76b51a1: mov    %esp,%ebp
  0xa76b51a3: push   %esi
  0xa76b51a4: push   %edi
  0xa76b51a5: mov    0x10(%esp),%eax
  0xa76b51a9: mov    0x14(%esp),%edx
  0xa76b51ad: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b51b1: mov    %eax,%esi
  0xa76b51b3: mov    %edx,%edi
  0xa76b51b5: cmp    %eax,%edx
  0xa76b51b7: lea    (%eax,%ecx,1),%eax
  0xa76b51ba: jbe    Stub::jbyte_disjoint_arraycopy+17 0x0xa76b5091
  0xa76b51c0: cmp    %eax,%edx
  0xa76b51c2: jae    Stub::jbyte_disjoint_arraycopy+17 0x0xa76b5091
  0xa76b51c8: cmp    $0x8,%ecx
  0xa76b51cb: jb     Stub::jbyte_arraycopy+130 0x0xa76b5222
  0xa76b51d1: lea    (%edx,%ecx,1),%eax
  0xa76b51d4: test   $0x1,%eax
  0xa76b51d9: je     Stub::jbyte_arraycopy+66 0x0xa76b51e2
  0xa76b51db: dec    %ecx
  0xa76b51dc: mov    (%esi,%ecx,1),%dl
  0xa76b51df: mov    %dl,(%edi,%ecx,1)
  ;; L_skip_align1:
  0xa76b51e2: test   $0x2,%eax
  0xa76b51e7: je     Stub::jbyte_arraycopy+84 0x0xa76b51f4
  0xa76b51e9: sub    $0x2,%ecx
  0xa76b51ec: mov    (%esi,%ecx,1),%dx
  0xa76b51f0: mov    %dx,(%edi,%ecx,1)
  ;; L_skip_align2:
  0xa76b51f4: cmp    $0x8,%ecx
  0xa76b51f7: jb     Stub::jbyte_arraycopy+130 0x0xa76b5222
  0xa76b51fd: test   $0x4,%eax
  0xa76b5202: je     Stub::jbyte_arraycopy+122 0x0xa76b521a
  0xa76b5204: sub    $0x4,%ecx
  0xa76b5207: mov    (%esi,%ecx,1),%edx
  0xa76b520a: mov    %edx,(%edi,%ecx,1)
  0xa76b520d: jmp    Stub::jbyte_arraycopy+122 0x0xa76b521a
  0xa76b520f: nop
  ;; L_copy_8_bytes_loop:
  0xa76b5210: vmovq  (%esi,%ecx,1),%xmm0
  0xa76b5215: vmovq  %xmm0,(%edi,%ecx,1)
  ;; L_copy_8_bytes:
  0xa76b521a: sub    $0x8,%ecx
  0xa76b521d: jge    Stub::jbyte_arraycopy+112 0x0xa76b5210
  0xa76b521f: add    $0x8,%ecx
  ;; L_copy_4_bytes:
  0xa76b5222: test   $0x4,%ecx
  0xa76b5228: je     Stub::jbyte_arraycopy+149 0x0xa76b5235
  0xa76b522a: mov    -0x4(%esi,%ecx,1),%edx
  0xa76b522e: mov    %edx,-0x4(%edi,%ecx,1)
  0xa76b5232: sub    $0x4,%ecx
  ;; L_copy_2_bytes:
  0xa76b5235: test   $0x2,%ecx
  0xa76b523b: je     Stub::jbyte_arraycopy+170 0x0xa76b524a
  0xa76b523d: mov    -0x2(%esi,%ecx,1),%dx
  0xa76b5242: mov    %dx,-0x2(%edi,%ecx,1)
  0xa76b5247: sub    $0x2,%ecx
  ;; L_copy_byte:
  0xa76b524a: test   $0x1,%ecx
  0xa76b5250: je     Stub::jbyte_arraycopy+182 0x0xa76b5256
  0xa76b5252: mov    (%esi),%dl
  0xa76b5254: mov    %dl,(%edi)
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jbyte_array_copy_ctr
  0xa76b5256: incl   0xb792c2a8
  0xa76b525c: pop    %edi
  0xa76b525d: pop    %esi
  0xa76b525e: mov    %ebp,%esp
  0xa76b5260: pop    %ebp
  0xa76b5261: xor    %eax,%eax
  0xa76b5263: ret    

StubRoutines::arrayof_jshort_disjoint_arraycopy [0xa76b5280, 0xa76b535f[ (223 bytes)
  0xa76b5280: push   %ebp
  0xa76b5281: mov    %esp,%ebp
  0xa76b5283: push   %esi
  0xa76b5284: push   %edi
  0xa76b5285: mov    0x10(%esp),%esi
  0xa76b5289: mov    0x14(%esp),%edi
  0xa76b528d: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b5291: sub    %esi,%edi
  0xa76b5293: cmp    $0x4,%ecx
  0xa76b5296: jb     Stub::arrayof_jshort_disjoint_arraycopy+178 0x0xa76b5332
  0xa76b529c: test   $0x4,%esi
  0xa76b52a2: je     Stub::arrayof_jshort_disjoint_arraycopy+47 0x0xa76b52af
  0xa76b52a4: mov    (%esi),%eax
  0xa76b52a6: mov    %eax,(%esi,%edi,1)
  0xa76b52a9: add    $0x4,%esi
  0xa76b52ac: sub    $0x2,%ecx
  ;; L_copy_64_bytes:
  0xa76b52af: mov    %ecx,%eax
  0xa76b52b1: shr    $0x2,%eax
  0xa76b52b4: jmp    Stub::arrayof_jshort_disjoint_arraycopy+153 0x0xa76b5319
  0xa76b52b6: nop
  0xa76b52b7: nop
  0xa76b52b8: nop
  0xa76b52b9: nop
  0xa76b52ba: nop
  0xa76b52bb: nop
  0xa76b52bc: nop
  0xa76b52bd: nop
  0xa76b52be: nop
  0xa76b52bf: nop
  ;; L_copy_64_bytes_loop:
  0xa76b52c0: vmovq  (%esi),%xmm0
  0xa76b52c4: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b52c9: vmovq  0x8(%esi),%xmm1
  0xa76b52ce: vmovq  %xmm1,0x8(%esi,%edi,1)
  0xa76b52d4: vmovq  0x10(%esi),%xmm2
  0xa76b52d9: vmovq  %xmm2,0x10(%esi,%edi,1)
  0xa76b52df: vmovq  0x18(%esi),%xmm3
  0xa76b52e4: vmovq  %xmm3,0x18(%esi,%edi,1)
  0xa76b52ea: vmovq  0x20(%esi),%xmm4
  0xa76b52ef: vmovq  %xmm4,0x20(%esi,%edi,1)
  0xa76b52f5: vmovq  0x28(%esi),%xmm5
  0xa76b52fa: vmovq  %xmm5,0x28(%esi,%edi,1)
  0xa76b5300: vmovq  0x30(%esi),%xmm6
  0xa76b5305: vmovq  %xmm6,0x30(%esi,%edi,1)
  0xa76b530b: vmovq  0x38(%esi),%xmm7
  0xa76b5310: vmovq  %xmm7,0x38(%esi,%edi,1)
  0xa76b5316: add    $0x40,%esi
  ;; L_copy_64_bytes:
  0xa76b5319: sub    $0x8,%eax
  0xa76b531c: jge    Stub::arrayof_jshort_disjoint_arraycopy+64 0x0xa76b52c0
  0xa76b531e: add    $0x8,%eax
  0xa76b5321: je     Stub::arrayof_jshort_disjoint_arraycopy+178 0x0xa76b5332
  ;; L_copy_8_bytes:
  0xa76b5323: vmovq  (%esi),%xmm0
  0xa76b5327: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b532c: add    $0x8,%esi
  0xa76b532f: dec    %eax
  0xa76b5330: jg     Stub::arrayof_jshort_disjoint_arraycopy+163 0x0xa76b5323
  ;; L_exit:
  ;; L_copy_4_bytes:
  0xa76b5332: test   $0x2,%ecx
  0xa76b5338: je     Stub::arrayof_jshort_disjoint_arraycopy+194 0x0xa76b5342
  0xa76b533a: mov    (%esi),%eax
  0xa76b533c: mov    %eax,(%esi,%edi,1)
  0xa76b533f: add    $0x4,%esi
  ;; L_copy_2_bytes:
  0xa76b5342: test   $0x1,%ecx
  0xa76b5348: je     Stub::arrayof_jshort_disjoint_arraycopy+209 0x0xa76b5351
  0xa76b534a: mov    (%esi),%ax
  0xa76b534d: mov    %ax,(%esi,%edi,1)
  ;; L_copy_byte:
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0xa76b5351: incl   0xb792c2ac
  0xa76b5357: pop    %edi
  0xa76b5358: pop    %esi
  0xa76b5359: mov    %ebp,%esp
  0xa76b535b: pop    %ebp
  0xa76b535c: xor    %eax,%eax
  0xa76b535e: ret    

StubRoutines::arrayof_jshort_arraycopy [0xa76b5360, 0xa76b5415[ (181 bytes)
  0xa76b5360: push   %ebp
  0xa76b5361: mov    %esp,%ebp
  0xa76b5363: push   %esi
  0xa76b5364: push   %edi
  0xa76b5365: mov    0x10(%esp),%eax
  0xa76b5369: mov    0x14(%esp),%edx
  0xa76b536d: mov    0x18(%esp),%ecx
  0xa76b5371: mov    %eax,%esi
  0xa76b5373: mov    %edx,%edi
  0xa76b5375: cmp    %eax,%edx
  0xa76b5377: lea    (%eax,%ecx,2),%eax
  0xa76b537a: jbe    Stub::arrayof_jshort_disjoint_arraycopy+17 0x0xa76b5291
  0xa76b5380: cmp    %eax,%edx
  0xa76b5382: jae    Stub::arrayof_jshort_disjoint_arraycopy+17 0x0xa76b5291
  0xa76b5388: cmp    $0x4,%ecx
  0xa76b538b: jb     Stub::arrayof_jshort_arraycopy+130 0x0xa76b53e2
  0xa76b5391: lea    (%edx,%ecx,2),%eax
  0xa76b5394: test   $0x2,%eax
  0xa76b5399: je     Stub::arrayof_jshort_arraycopy+70 0x0xa76b53a6
  0xa76b539b: sub    $0x1,%ecx
  0xa76b539e: mov    (%esi,%ecx,2),%dx
  0xa76b53a2: mov    %dx,(%edi,%ecx,2)
  ;; L_skip_align2:
  0xa76b53a6: cmp    $0x4,%ecx
  0xa76b53a9: jb     Stub::arrayof_jshort_arraycopy+130 0x0xa76b53e2
  0xa76b53af: test   $0x4,%eax
  0xa76b53b4: je     Stub::arrayof_jshort_arraycopy+122 0x0xa76b53da
  0xa76b53b6: sub    $0x2,%ecx
  0xa76b53b9: mov    (%esi,%ecx,2),%edx
  0xa76b53bc: mov    %edx,(%edi,%ecx,2)
  0xa76b53bf: jmp    Stub::arrayof_jshort_arraycopy+122 0x0xa76b53da
  0xa76b53c1: nop
  0xa76b53c2: nop
  0xa76b53c3: nop
  0xa76b53c4: nop
  0xa76b53c5: nop
  0xa76b53c6: nop
  0xa76b53c7: nop
  0xa76b53c8: nop
  0xa76b53c9: nop
  0xa76b53ca: nop
  0xa76b53cb: nop
  0xa76b53cc: nop
  0xa76b53cd: nop
  0xa76b53ce: nop
  0xa76b53cf: nop
  ;; L_copy_8_bytes_loop:
  0xa76b53d0: vmovq  (%esi,%ecx,2),%xmm0
  0xa76b53d5: vmovq  %xmm0,(%edi,%ecx,2)
  ;; L_copy_8_bytes:
  0xa76b53da: sub    $0x4,%ecx
  0xa76b53dd: jge    Stub::arrayof_jshort_arraycopy+112 0x0xa76b53d0
  0xa76b53df: add    $0x4,%ecx
  ;; L_copy_4_bytes:
  0xa76b53e2: test   $0x2,%ecx
  0xa76b53e8: je     Stub::arrayof_jshort_arraycopy+149 0x0xa76b53f5
  0xa76b53ea: mov    -0x4(%esi,%ecx,2),%edx
  0xa76b53ee: mov    %edx,-0x4(%edi,%ecx,2)
  0xa76b53f2: sub    $0x2,%ecx
  ;; L_copy_2_bytes:
  0xa76b53f5: test   $0x1,%ecx
  0xa76b53fb: je     Stub::arrayof_jshort_arraycopy+167 0x0xa76b5407
  0xa76b53fd: mov    -0x2(%esi,%ecx,2),%dx
  0xa76b5402: mov    %dx,-0x2(%edi,%ecx,2)
  ;; L_copy_byte:
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0xa76b5407: incl   0xb792c2ac
  0xa76b540d: pop    %edi
  0xa76b540e: pop    %esi
  0xa76b540f: mov    %ebp,%esp
  0xa76b5411: pop    %ebp
  0xa76b5412: xor    %eax,%eax
  0xa76b5414: ret    

StubRoutines::jshort_disjoint_arraycopy [0xa76b5420, 0xa76b550f[ (239 bytes)
  0xa76b5420: push   %ebp
  0xa76b5421: mov    %esp,%ebp
  0xa76b5423: push   %esi
  0xa76b5424: push   %edi
  0xa76b5425: mov    0x10(%esp),%esi
  0xa76b5429: mov    0x14(%esp),%edi
  0xa76b542d: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b5431: sub    %esi,%edi
  0xa76b5433: cmp    $0x4,%ecx
  0xa76b5436: jb     Stub::jshort_disjoint_arraycopy+194 0x0xa76b54e2
  0xa76b543c: test   $0x2,%esi
  0xa76b5442: je     Stub::jshort_disjoint_arraycopy+49 0x0xa76b5451
  0xa76b5444: mov    (%esi),%ax
  0xa76b5447: mov    %ax,(%esi,%edi,1)
  0xa76b544b: add    $0x2,%esi
  0xa76b544e: sub    $0x1,%ecx
  ;; L_skip_align2:
  0xa76b5451: test   $0x4,%esi
  0xa76b5457: je     Stub::jshort_disjoint_arraycopy+68 0x0xa76b5464
  0xa76b5459: mov    (%esi),%eax
  0xa76b545b: mov    %eax,(%esi,%edi,1)
  0xa76b545e: add    $0x4,%esi
  0xa76b5461: sub    $0x2,%ecx
  ;; L_copy_64_bytes:
  0xa76b5464: mov    %ecx,%eax
  0xa76b5466: shr    $0x2,%eax
  0xa76b5469: jmp    Stub::jshort_disjoint_arraycopy+169 0x0xa76b54c9
  0xa76b546b: nop
  0xa76b546c: nop
  0xa76b546d: nop
  0xa76b546e: nop
  0xa76b546f: nop
  ;; L_copy_64_bytes_loop:
  0xa76b5470: vmovq  (%esi),%xmm0
  0xa76b5474: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b5479: vmovq  0x8(%esi),%xmm1
  0xa76b547e: vmovq  %xmm1,0x8(%esi,%edi,1)
  0xa76b5484: vmovq  0x10(%esi),%xmm2
  0xa76b5489: vmovq  %xmm2,0x10(%esi,%edi,1)
  0xa76b548f: vmovq  0x18(%esi),%xmm3
  0xa76b5494: vmovq  %xmm3,0x18(%esi,%edi,1)
  0xa76b549a: vmovq  0x20(%esi),%xmm4
  0xa76b549f: vmovq  %xmm4,0x20(%esi,%edi,1)
  0xa76b54a5: vmovq  0x28(%esi),%xmm5
  0xa76b54aa: vmovq  %xmm5,0x28(%esi,%edi,1)
  0xa76b54b0: vmovq  0x30(%esi),%xmm6
  0xa76b54b5: vmovq  %xmm6,0x30(%esi,%edi,1)
  0xa76b54bb: vmovq  0x38(%esi),%xmm7
  0xa76b54c0: vmovq  %xmm7,0x38(%esi,%edi,1)
  0xa76b54c6: add    $0x40,%esi
  ;; L_copy_64_bytes:
  0xa76b54c9: sub    $0x8,%eax
  0xa76b54cc: jge    Stub::jshort_disjoint_arraycopy+80 0x0xa76b5470
  0xa76b54ce: add    $0x8,%eax
  0xa76b54d1: je     Stub::jshort_disjoint_arraycopy+194 0x0xa76b54e2
  ;; L_copy_8_bytes:
  0xa76b54d3: vmovq  (%esi),%xmm0
  0xa76b54d7: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b54dc: add    $0x8,%esi
  0xa76b54df: dec    %eax
  0xa76b54e0: jg     Stub::jshort_disjoint_arraycopy+179 0x0xa76b54d3
  ;; L_exit:
  ;; L_copy_4_bytes:
  0xa76b54e2: test   $0x2,%ecx
  0xa76b54e8: je     Stub::jshort_disjoint_arraycopy+210 0x0xa76b54f2
  0xa76b54ea: mov    (%esi),%eax
  0xa76b54ec: mov    %eax,(%esi,%edi,1)
  0xa76b54ef: add    $0x4,%esi
  ;; L_copy_2_bytes:
  0xa76b54f2: test   $0x1,%ecx
  0xa76b54f8: je     Stub::jshort_disjoint_arraycopy+225 0x0xa76b5501
  0xa76b54fa: mov    (%esi),%ax
  0xa76b54fd: mov    %ax,(%esi,%edi,1)
  ;; L_copy_byte:
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0xa76b5501: incl   0xb792c2ac
  0xa76b5507: pop    %edi
  0xa76b5508: pop    %esi
  0xa76b5509: mov    %ebp,%esp
  0xa76b550b: pop    %ebp
  0xa76b550c: xor    %eax,%eax
  0xa76b550e: ret    

StubRoutines::jshort_arraycopy [0xa76b5520, 0xa76b55d5[ (181 bytes)
  0xa76b5520: push   %ebp
  0xa76b5521: mov    %esp,%ebp
  0xa76b5523: push   %esi
  0xa76b5524: push   %edi
  0xa76b5525: mov    0x10(%esp),%eax
  0xa76b5529: mov    0x14(%esp),%edx
  0xa76b552d: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b5531: mov    %eax,%esi
  0xa76b5533: mov    %edx,%edi
  0xa76b5535: cmp    %eax,%edx
  0xa76b5537: lea    (%eax,%ecx,2),%eax
  0xa76b553a: jbe    Stub::jshort_disjoint_arraycopy+17 0x0xa76b5431
  0xa76b5540: cmp    %eax,%edx
  0xa76b5542: jae    Stub::jshort_disjoint_arraycopy+17 0x0xa76b5431
  0xa76b5548: cmp    $0x4,%ecx
  0xa76b554b: jb     Stub::jshort_arraycopy+130 0x0xa76b55a2
  0xa76b5551: lea    (%edx,%ecx,2),%eax
  0xa76b5554: test   $0x2,%eax
  0xa76b5559: je     Stub::jshort_arraycopy+70 0x0xa76b5566
  0xa76b555b: sub    $0x1,%ecx
  0xa76b555e: mov    (%esi,%ecx,2),%dx
  0xa76b5562: mov    %dx,(%edi,%ecx,2)
  ;; L_skip_align2:
  0xa76b5566: cmp    $0x4,%ecx
  0xa76b5569: jb     Stub::jshort_arraycopy+130 0x0xa76b55a2
  0xa76b556f: test   $0x4,%eax
  0xa76b5574: je     Stub::jshort_arraycopy+122 0x0xa76b559a
  0xa76b5576: sub    $0x2,%ecx
  0xa76b5579: mov    (%esi,%ecx,2),%edx
  0xa76b557c: mov    %edx,(%edi,%ecx,2)
  0xa76b557f: jmp    Stub::jshort_arraycopy+122 0x0xa76b559a
  0xa76b5581: nop
  0xa76b5582: nop
  0xa76b5583: nop
  0xa76b5584: nop
  0xa76b5585: nop
  0xa76b5586: nop
  0xa76b5587: nop
  0xa76b5588: nop
  0xa76b5589: nop
  0xa76b558a: nop
  0xa76b558b: nop
  0xa76b558c: nop
  0xa76b558d: nop
  0xa76b558e: nop
  0xa76b558f: nop
  ;; L_copy_8_bytes_loop:
  0xa76b5590: vmovq  (%esi,%ecx,2),%xmm0
  0xa76b5595: vmovq  %xmm0,(%edi,%ecx,2)
  ;; L_copy_8_bytes:
  0xa76b559a: sub    $0x4,%ecx
  0xa76b559d: jge    Stub::jshort_arraycopy+112 0x0xa76b5590
  0xa76b559f: add    $0x4,%ecx
  ;; L_copy_4_bytes:
  0xa76b55a2: test   $0x2,%ecx
  0xa76b55a8: je     Stub::jshort_arraycopy+149 0x0xa76b55b5
  0xa76b55aa: mov    -0x4(%esi,%ecx,2),%edx
  0xa76b55ae: mov    %edx,-0x4(%edi,%ecx,2)
  0xa76b55b2: sub    $0x2,%ecx
  ;; L_copy_2_bytes:
  0xa76b55b5: test   $0x1,%ecx
  0xa76b55bb: je     Stub::jshort_arraycopy+167 0x0xa76b55c7
  0xa76b55bd: mov    -0x2(%esi,%ecx,2),%dx
  0xa76b55c2: mov    %dx,-0x2(%edi,%ecx,2)
  ;; L_copy_byte:
  ;; inc_counter SharedRuntime::_jshort_array_copy_ctr
  0xa76b55c7: incl   0xb792c2ac
  0xa76b55cd: pop    %edi
  0xa76b55ce: pop    %esi
  0xa76b55cf: mov    %ebp,%esp
  0xa76b55d1: pop    %ebp
  0xa76b55d2: xor    %eax,%eax
  0xa76b55d4: ret    

StubRoutines::jint_disjoint_arraycopy [0xa76b55e0, 0xa76b56ad[ (205 bytes)
  0xa76b55e0: push   %ebp
  0xa76b55e1: mov    %esp,%ebp
  0xa76b55e3: push   %esi
  0xa76b55e4: push   %edi
  0xa76b55e5: mov    0x10(%esp),%esi
  0xa76b55e9: mov    0x14(%esp),%edi
  0xa76b55ed: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b55f1: sub    %esi,%edi
  0xa76b55f3: cmp    $0x2,%ecx
  0xa76b55f6: jb     Stub::jint_disjoint_arraycopy+178 0x0xa76b5692
  0xa76b55fc: test   $0x4,%esi
  0xa76b5602: je     Stub::jint_disjoint_arraycopy+47 0x0xa76b560f
  0xa76b5604: mov    (%esi),%eax
  0xa76b5606: mov    %eax,(%esi,%edi,1)
  0xa76b5609: add    $0x4,%esi
  0xa76b560c: sub    $0x1,%ecx
  ;; L_copy_64_bytes:
  0xa76b560f: mov    %ecx,%eax
  0xa76b5611: shr    $0x1,%eax
  0xa76b5614: jmp    Stub::jint_disjoint_arraycopy+153 0x0xa76b5679
  0xa76b5616: nop
  0xa76b5617: nop
  0xa76b5618: nop
  0xa76b5619: nop
  0xa76b561a: nop
  0xa76b561b: nop
  0xa76b561c: nop
  0xa76b561d: nop
  0xa76b561e: nop
  0xa76b561f: nop
  ;; L_copy_64_bytes_loop:
  0xa76b5620: vmovq  (%esi),%xmm0
  0xa76b5624: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b5629: vmovq  0x8(%esi),%xmm1
  0xa76b562e: vmovq  %xmm1,0x8(%esi,%edi,1)
  0xa76b5634: vmovq  0x10(%esi),%xmm2
  0xa76b5639: vmovq  %xmm2,0x10(%esi,%edi,1)
  0xa76b563f: vmovq  0x18(%esi),%xmm3
  0xa76b5644: vmovq  %xmm3,0x18(%esi,%edi,1)
  0xa76b564a: vmovq  0x20(%esi),%xmm4
  0xa76b564f: vmovq  %xmm4,0x20(%esi,%edi,1)
  0xa76b5655: vmovq  0x28(%esi),%xmm5
  0xa76b565a: vmovq  %xmm5,0x28(%esi,%edi,1)
  0xa76b5660: vmovq  0x30(%esi),%xmm6
  0xa76b5665: vmovq  %xmm6,0x30(%esi,%edi,1)
  0xa76b566b: vmovq  0x38(%esi),%xmm7
  0xa76b5670: vmovq  %xmm7,0x38(%esi,%edi,1)
  0xa76b5676: add    $0x40,%esi
  ;; L_copy_64_bytes:
  0xa76b5679: sub    $0x8,%eax
  0xa76b567c: jge    Stub::jint_disjoint_arraycopy+64 0x0xa76b5620
  0xa76b567e: add    $0x8,%eax
  0xa76b5681: je     Stub::jint_disjoint_arraycopy+178 0x0xa76b5692
  ;; L_copy_8_bytes:
  0xa76b5683: vmovq  (%esi),%xmm0
  0xa76b5687: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b568c: add    $0x8,%esi
  0xa76b568f: dec    %eax
  0xa76b5690: jg     Stub::jint_disjoint_arraycopy+163 0x0xa76b5683
  ;; L_exit:
  ;; L_copy_4_bytes:
  0xa76b5692: test   $0x1,%ecx
  0xa76b5698: je     Stub::jint_disjoint_arraycopy+191 0x0xa76b569f
  0xa76b569a: mov    (%esi),%eax
  0xa76b569c: mov    %eax,(%esi,%edi,1)
  ;; L_copy_2_bytes:
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0xa76b569f: incl   0xb792c2b0
  0xa76b56a5: pop    %edi
  0xa76b56a6: pop    %esi
  0xa76b56a7: mov    %ebp,%esp
  0xa76b56a9: pop    %ebp
  0xa76b56aa: xor    %eax,%eax
  0xa76b56ac: ret    

StubRoutines::jint_arraycopy [0xa76b56c0, 0xa76b5740[ (128 bytes)
  0xa76b56c0: push   %ebp
  0xa76b56c1: mov    %esp,%ebp
  0xa76b56c3: push   %esi
  0xa76b56c4: push   %edi
  0xa76b56c5: mov    0x10(%esp),%eax
  0xa76b56c9: mov    0x14(%esp),%edx
  0xa76b56cd: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b56d1: mov    %eax,%esi
  0xa76b56d3: mov    %edx,%edi
  0xa76b56d5: cmp    %eax,%edx
  0xa76b56d7: lea    (%eax,%ecx,4),%eax
  0xa76b56da: jbe    Stub::jint_disjoint_arraycopy+17 0x0xa76b55f1
  0xa76b56e0: cmp    %eax,%edx
  0xa76b56e2: jae    Stub::jint_disjoint_arraycopy+17 0x0xa76b55f1
  0xa76b56e8: cmp    $0x2,%ecx
  0xa76b56eb: jb     Stub::jint_arraycopy+98 0x0xa76b5722
  0xa76b56f1: test   $0x4,%eax
  0xa76b56f6: je     Stub::jint_arraycopy+90 0x0xa76b571a
  0xa76b56f8: sub    $0x1,%ecx
  0xa76b56fb: mov    (%esi,%ecx,4),%edx
  0xa76b56fe: mov    %edx,(%edi,%ecx,4)
  0xa76b5701: jmp    Stub::jint_arraycopy+90 0x0xa76b571a
  0xa76b5703: nop
  0xa76b5704: nop
  0xa76b5705: nop
  0xa76b5706: nop
  0xa76b5707: nop
  0xa76b5708: nop
  0xa76b5709: nop
  0xa76b570a: nop
  0xa76b570b: nop
  0xa76b570c: nop
  0xa76b570d: nop
  0xa76b570e: nop
  0xa76b570f: nop
  ;; L_copy_8_bytes_loop:
  0xa76b5710: vmovq  (%esi,%ecx,4),%xmm0
  0xa76b5715: vmovq  %xmm0,(%edi,%ecx,4)
  ;; L_copy_8_bytes:
  0xa76b571a: sub    $0x2,%ecx
  0xa76b571d: jge    Stub::jint_arraycopy+80 0x0xa76b5710
  0xa76b571f: add    $0x2,%ecx
  ;; L_copy_4_bytes:
  0xa76b5722: test   $0x1,%ecx
  0xa76b5728: je     Stub::jint_arraycopy+114 0x0xa76b5732
  0xa76b572a: mov    -0x4(%esi,%ecx,4),%edx
  0xa76b572e: mov    %edx,-0x4(%edi,%ecx,4)
  ;; L_copy_2_bytes:
  ;; inc_counter SharedRuntime::_jint_array_copy_ctr
  0xa76b5732: incl   0xb792c2b0
  0xa76b5738: pop    %edi
  0xa76b5739: pop    %esi
  0xa76b573a: mov    %ebp,%esp
  0xa76b573c: pop    %ebp
  0xa76b573d: xor    %eax,%eax
  0xa76b573f: ret    

StubRoutines::oop_disjoint_arraycopy [0xa76b5740, 0xa76b582a[ (234 bytes)
  0xa76b5740: push   %ebp
  0xa76b5741: mov    %esp,%ebp
  0xa76b5743: push   %esi
  0xa76b5744: push   %edi
  0xa76b5745: mov    0x10(%esp),%esi
  0xa76b5749: mov    0x14(%esp),%edi
  0xa76b574d: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b5751: test   %ecx,%ecx
  0xa76b5753: je     Stub::oop_disjoint_arraycopy+220 0x0xa76b581c
  0xa76b5759: mov    %edi,%edx
  0xa76b575b: sub    %esi,%edi
  0xa76b575d: cmp    $0x2,%ecx
  0xa76b5760: jb     Stub::oop_disjoint_arraycopy+178 0x0xa76b57f2
  0xa76b5766: test   $0x4,%esi
  0xa76b576c: je     Stub::oop_disjoint_arraycopy+57 0x0xa76b5779
  0xa76b576e: mov    (%esi),%eax
  0xa76b5770: mov    %eax,(%esi,%edi,1)
  0xa76b5773: add    $0x4,%esi
  0xa76b5776: sub    $0x1,%ecx
  ;; L_copy_64_bytes:
  0xa76b5779: mov    %ecx,%eax
  0xa76b577b: shr    $0x1,%eax
  0xa76b577e: jmp    Stub::oop_disjoint_arraycopy+153 0x0xa76b57d9
  ;; L_copy_64_bytes_loop:
  0xa76b5780: vmovq  (%esi),%xmm0
  0xa76b5784: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b5789: vmovq  0x8(%esi),%xmm1
  0xa76b578e: vmovq  %xmm1,0x8(%esi,%edi,1)
  0xa76b5794: vmovq  0x10(%esi),%xmm2
  0xa76b5799: vmovq  %xmm2,0x10(%esi,%edi,1)
  0xa76b579f: vmovq  0x18(%esi),%xmm3
  0xa76b57a4: vmovq  %xmm3,0x18(%esi,%edi,1)
  0xa76b57aa: vmovq  0x20(%esi),%xmm4
  0xa76b57af: vmovq  %xmm4,0x20(%esi,%edi,1)
  0xa76b57b5: vmovq  0x28(%esi),%xmm5
  0xa76b57ba: vmovq  %xmm5,0x28(%esi,%edi,1)
  0xa76b57c0: vmovq  0x30(%esi),%xmm6
  0xa76b57c5: vmovq  %xmm6,0x30(%esi,%edi,1)
  0xa76b57cb: vmovq  0x38(%esi),%xmm7
  0xa76b57d0: vmovq  %xmm7,0x38(%esi,%edi,1)
  0xa76b57d6: add    $0x40,%esi
  ;; L_copy_64_bytes:
  0xa76b57d9: sub    $0x8,%eax
  0xa76b57dc: jge    Stub::oop_disjoint_arraycopy+64 0x0xa76b5780
  0xa76b57de: add    $0x8,%eax
  0xa76b57e1: je     Stub::oop_disjoint_arraycopy+178 0x0xa76b57f2
  ;; L_copy_8_bytes:
  0xa76b57e3: vmovq  (%esi),%xmm0
  0xa76b57e7: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b57ec: add    $0x8,%esi
  0xa76b57ef: dec    %eax
  0xa76b57f0: jg     Stub::oop_disjoint_arraycopy+163 0x0xa76b57e3
  ;; L_exit:
  ;; L_copy_4_bytes:
  0xa76b57f2: test   $0x1,%ecx
  0xa76b57f8: je     Stub::oop_disjoint_arraycopy+191 0x0xa76b57ff
  0xa76b57fa: mov    (%esi),%eax
  0xa76b57fc: mov    %eax,(%esi,%edi,1)
  ;; L_copy_2_bytes:
  0xa76b57ff: mov    0x18(%esp),%ecx
  0xa76b5803: mov    %edx,%edi
  0xa76b5805: lea    -0x4(%edi,%ecx,4),%ecx
  0xa76b5809: shr    $0x9,%edi
  0xa76b580c: shr    $0x9,%ecx
  0xa76b580f: sub    %edi,%ecx
  ;; L_loop:
  0xa76b5811: movb   $0x0,0x66ac7000(%edi,%ecx,1)
  0xa76b5819: dec    %ecx
  0xa76b581a: jge    Stub::oop_disjoint_arraycopy+209 0x0xa76b5811
  ;; L_0_count:
  ;; inc_counter SharedRuntime::_oop_array_copy_ctr
  0xa76b581c: incl   0xb792c2b8
  0xa76b5822: pop    %edi
  0xa76b5823: pop    %esi
  0xa76b5824: mov    %ebp,%esp
  0xa76b5826: pop    %ebp
  0xa76b5827: xor    %eax,%eax
  0xa76b5829: ret    

StubRoutines::oop_arraycopy [0xa76b5840, 0xa76b58db[ (155 bytes)
  0xa76b5840: push   %ebp
  0xa76b5841: mov    %esp,%ebp
  0xa76b5843: push   %esi
  0xa76b5844: push   %edi
  0xa76b5845: mov    0x10(%esp),%eax
  0xa76b5849: mov    0x14(%esp),%edx
  0xa76b584d: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b5851: mov    %eax,%esi
  0xa76b5853: mov    %edx,%edi
  0xa76b5855: cmp    %eax,%edx
  0xa76b5857: lea    (%eax,%ecx,4),%eax
  0xa76b585a: jbe    Stub::oop_disjoint_arraycopy+17 0x0xa76b5751
  0xa76b5860: cmp    %eax,%edx
  0xa76b5862: jae    Stub::oop_disjoint_arraycopy+17 0x0xa76b5751
  0xa76b5868: test   %ecx,%ecx
  0xa76b586a: je     Stub::oop_arraycopy+141 0x0xa76b58cd
  0xa76b5870: cmp    $0x2,%ecx
  0xa76b5873: jb     Stub::oop_arraycopy+98 0x0xa76b58a2
  0xa76b5879: test   $0x4,%eax
  0xa76b587e: je     Stub::oop_arraycopy+90 0x0xa76b589a
  0xa76b5880: sub    $0x1,%ecx
  0xa76b5883: mov    (%esi,%ecx,4),%edx
  0xa76b5886: mov    %edx,(%edi,%ecx,4)
  0xa76b5889: jmp    Stub::oop_arraycopy+90 0x0xa76b589a
  0xa76b588b: nop
  0xa76b588c: nop
  0xa76b588d: nop
  0xa76b588e: nop
  0xa76b588f: nop
  ;; L_copy_8_bytes_loop:
  0xa76b5890: vmovq  (%esi,%ecx,4),%xmm0
  0xa76b5895: vmovq  %xmm0,(%edi,%ecx,4)
  ;; L_copy_8_bytes:
  0xa76b589a: sub    $0x2,%ecx
  0xa76b589d: jge    Stub::oop_arraycopy+80 0x0xa76b5890
  0xa76b589f: add    $0x2,%ecx
  ;; L_copy_4_bytes:
  0xa76b58a2: test   $0x1,%ecx
  0xa76b58a8: je     Stub::oop_arraycopy+114 0x0xa76b58b2
  0xa76b58aa: mov    -0x4(%esi,%ecx,4),%edx
  0xa76b58ae: mov    %edx,-0x4(%edi,%ecx,4)
  ;; L_copy_2_bytes:
  0xa76b58b2: mov    0x18(%esp),%ecx
  0xa76b58b6: lea    -0x4(%edi,%ecx,4),%ecx
  0xa76b58ba: shr    $0x9,%edi
  0xa76b58bd: shr    $0x9,%ecx
  0xa76b58c0: sub    %edi,%ecx
  ;; L_loop:
  0xa76b58c2: movb   $0x0,0x66ac7000(%edi,%ecx,1)
  0xa76b58ca: dec    %ecx
  0xa76b58cb: jge    Stub::oop_arraycopy+130 0x0xa76b58c2
  ;; L_0_count:
  ;; inc_counter SharedRuntime::_oop_array_copy_ctr
  0xa76b58cd: incl   0xb792c2b8
  0xa76b58d3: pop    %edi
  0xa76b58d4: pop    %esi
  0xa76b58d5: mov    %ebp,%esp
  0xa76b58d7: pop    %ebp
  0xa76b58d8: xor    %eax,%eax
  0xa76b58da: ret    

StubRoutines::oop_disjoint_arraycopy_uninit [0xa76b58e0, 0xa76b59ca[ (234 bytes)
  0xa76b58e0: push   %ebp
  0xa76b58e1: mov    %esp,%ebp
  0xa76b58e3: push   %esi
  0xa76b58e4: push   %edi
  0xa76b58e5: mov    0x10(%esp),%esi
  0xa76b58e9: mov    0x14(%esp),%edi
  0xa76b58ed: mov    0x18(%esp),%ecx
  ;; Entry:
  0xa76b58f1: test   %ecx,%ecx
  0xa76b58f3: je     Stub::oop_disjoint_arraycopy_uninit+220 0x0xa76b59bc
  0xa76b58f9: mov    %edi,%edx
  0xa76b58fb: sub    %esi,%edi
  0xa76b58fd: cmp    $0x2,%ecx
  0xa76b5900: jb     Stub::oop_disjoint_arraycopy_uninit+178 0x0xa76b5992
  0xa76b5906: test   $0x4,%esi
  0xa76b590c: je     Stub::oop_disjoint_arraycopy_uninit+57 0x0xa76b5919
  0xa76b590e: mov    (%esi),%eax
  0xa76b5910: mov    %eax,(%esi,%edi,1)
  0xa76b5913: add    $0x4,%esi
  0xa76b5916: sub    $0x1,%ecx
  ;; L_copy_64_bytes:
  0xa76b5919: mov    %ecx,%eax
  0xa76b591b: shr    $0x1,%eax
  0xa76b591e: jmp    Stub::oop_disjoint_arraycopy_uninit+153 0x0xa76b5979
  ;; L_copy_64_bytes_loop:
  0xa76b5920: vmovq  (%esi),%xmm0
  0xa76b5924: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b5929: vmovq  0x8(%esi),%xmm1
  0xa76b592e: vmovq  %xmm1,0x8(%esi,%edi,1)
  0xa76b5934: vmovq  0x10(%esi),%xmm2
  0xa76b5939: vmovq  %xmm2,0x10(%esi,%edi,1)
  0xa76b593f: vmovq  0x18(%esi),%xmm3
  0xa76b5944: vmovq  %xmm3,0x18(%esi,%edi,1)
  0xa76b594a: vmovq  0x20(%esi),%xmm4
  0xa76b594f: vmovq  %xmm4,0x20(%esi,%edi,1)
  0xa76b5955: vmovq  0x28(%esi),%xmm5
  0xa76b595a: vmovq  %xmm5,0x28(%esi,%edi,1)
  0xa76b5960: vmovq  0x30(%esi),%xmm6
  0xa76b5965: vmovq  %xmm6,0x30(%esi,%edi,1)
  0xa76b596b: vmovq  0x38(%esi),%xmm7
  0xa76b5970: vmovq  %xmm7,0x38(%esi,%edi,1)
  0xa76b5976: add    $0x40,%esi
  ;; L_copy_64_bytes:
  0xa76b5979: sub    $0x8,%eax
  0xa76b597c: jge    Stub::oop_disjoint_arraycopy_uninit+64 0x0xa76b5920
  0xa76b597e: add    $0x8,%eax
  0xa76b5981: je     Stub::oop_disjoint_arraycopy_uninit+178 0x0xa76b5992
  ;; L_copy_8_bytes:
  0xa76b5983: vmovq  (%esi),%xmm0
  0xa76b5987: vmovq  %xmm0,(%esi,%edi,1)
  0xa76b598c: add    $0x8,%esi
  0xa76b598f: dec    %eax
  0xa76b5990: jg     Stub::oop_disjoint_arraycopy_uninit+163 0x0xa76b5983
  ;; L_exit:
  ;; L_copy_4_bytes:
  0xa76b5992: test   $0x1,%ecx
  0xa76b5998: je     Stub::oop_disjoint_arraycopy_uninit+191 0x0xa76b599f
  0xa76b599a: mov    (%esi),%eax
  0xa76b599c: mov    %eax,(%esi,%edi,1)
  ;; L_copy_2_bytes:
  0xa76b599f: mov    0x18(%esp),%ecx
  0xa76b59a3: mov    %edx,%edi
  0xa76b59a5: lea    -0x4(%edi,%ecx,4),%ecx
  0xa76b59a9: shr    $0x9,%edi
  0xa76b59ac: shr    $0x9,%ecx
  0xa76b59af: sub    %edi,%ecx
  ;; L_loop:
  0xa76b59b1: movb   $0x0,0x66ac7000(%edi,%ecx,1)
  0xa76b59b9: dec    %ecx
  0xa76b59ba: jge    Stub::oop_disjoint_arraycopy_uninit+209 0x0xa76b59b1
  ;; L_0_count:
  ;; inc_counter SharedRuntime::_oop_array_copy_ctr
  0xa76b59bc: incl   0xb792c2b8
  0xa76b59c2: pop    %edi
  0xa76b59c3: pop    %esi
  0xa76b59c4: mov    %ebp,%esp
  0xa76b59c6: pop    %ebp
  0xa76b59c7: xor    %eax,%eax
  0xa76b59c9: ret    

StubRoutines::oop_arraycopy_uninit [0xa76b59e0, 0xa76b5a7b[ (155 bytes)
  0xa76b59e0: push   %ebp
  0xa76b59e1: mov    %esp,%ebp
  0xa76b59e3: push   %esi
  0xa76b59e4: push   %edi
  0xa76b59e5: mov    0x10(%esp),%eax
  0xa76b59e9: mov    0x14(%esp),%edx
  0xa76b59ed: mov    0x18(%esp),%ecx
  0xa76b59f1: mov    %eax,%esi
  0xa76b59f3: mov    %edx,%edi
  0xa76b59f5: cmp    %eax,%edx
  0xa76b59f7: lea    (%eax,%ecx,4),%eax
  0xa76b59fa: jbe    Stub::oop_disjoint_arraycopy_uninit+17 0x0xa76b58f1
  0xa76b5a00: cmp    %eax,%edx
  0xa76b5a02: jae    Stub::oop_disjoint_arraycopy_uninit+17 0x0xa76b58f1
  0xa76b5a08: test   %ecx,%ecx
  0xa76b5a0a: je     Stub::oop_arraycopy_uninit+141 0x0xa76b5a6d
  0xa76b5a10: cmp    $0x2,%ecx
  0xa76b5a13: jb     Stub::oop_arraycopy_uninit+98 0x0xa76b5a42
  0xa76b5a19: test   $0x4,%eax
  0xa76b5a1e: je     Stub::oop_arraycopy_uninit+90 0x0xa76b5a3a
  0xa76b5a20: sub    $0x1,%ecx
  0xa76b5a23: mov    (%esi,%ecx,4),%edx
  0xa76b5a26: mov    %edx,(%edi,%ecx,4)
  0xa76b5a29: jmp    Stub::oop_arraycopy_uninit+90 0x0xa76b5a3a
  0xa76b5a2b: nop
  0xa76b5a2c: nop
  0xa76b5a2d: nop
  0xa76b5a2e: nop
  0xa76b5a2f: nop
  ;; L_copy_8_bytes_loop:
  0xa76b5a30: vmovq  (%esi,%ecx,4),%xmm0
  0xa76b5a35: vmovq  %xmm0,(%edi,%ecx,4)
  ;; L_copy_8_bytes:
  0xa76b5a3a: sub    $0x2,%ecx
  0xa76b5a3d: jge    Stub::oop_arraycopy_uninit+80 0x0xa76b5a30
  0xa76b5a3f: add    $0x2,%ecx
  ;; L_copy_4_bytes:
  0xa76b5a42: test   $0x1,%ecx
  0xa76b5a48: je     Stub::oop_arraycopy_uninit+114 0x0xa76b5a52
  0xa76b5a4a: mov    -0x4(%esi,%ecx,4),%edx
  0xa76b5a4e: mov    %edx,-0x4(%edi,%ecx,4)
  ;; L_copy_2_bytes:
  0xa76b5a52: mov    0x18(%esp),%ecx
  0xa76b5a56: lea    -0x4(%edi,%ecx,4),%ecx
  0xa76b5a5a: shr    $0x9,%edi
  0xa76b5a5d: shr    $0x9,%ecx
  0xa76b5a60: sub    %edi,%ecx
  ;; L_loop:
  0xa76b5a62: movb   $0x0,0x66ac7000(%edi,%ecx,1)
  0xa76b5a6a: dec    %ecx
  0xa76b5a6b: jge    Stub::oop_arraycopy_uninit+130 0x0xa76b5a62
  ;; L_0_count:
  ;; inc_counter SharedRuntime::_oop_array_copy_ctr
  0xa76b5a6d: incl   0xb792c2b8
  0xa76b5a73: pop    %edi
  0xa76b5a74: pop    %esi
  0xa76b5a75: mov    %ebp,%esp
  0xa76b5a77: pop    %ebp
  0xa76b5a78: xor    %eax,%eax
  0xa76b5a7a: ret    

StubRoutines::jlong_disjoint_arraycopy [0xa76b5a80, 0xa76b5b1e[ (158 bytes)
  0xa76b5a80: push   %ebp
  0xa76b5a81: mov    %esp,%ebp
  0xa76b5a83: mov    0x8(%esp),%eax
  0xa76b5a87: mov    0xc(%esp),%edx
  0xa76b5a8b: mov    0x10(%esp),%ecx
  ;; Entry:
  0xa76b5a8f: sub    %eax,%edx
  0xa76b5a91: jmp    Stub::jlong_disjoint_arraycopy+121 0x0xa76b5af9
  0xa76b5a93: nop
  0xa76b5a94: nop
  0xa76b5a95: nop
  0xa76b5a96: nop
  0xa76b5a97: nop
  0xa76b5a98: nop
  0xa76b5a99: nop
  0xa76b5a9a: nop
  0xa76b5a9b: nop
  0xa76b5a9c: nop
  0xa76b5a9d: nop
  0xa76b5a9e: nop
  0xa76b5a9f: nop
  ;; L_copy_64_bytes_loop:
  0xa76b5aa0: vmovq  (%eax),%xmm0
  0xa76b5aa4: vmovq  %xmm0,(%eax,%edx,1)
  0xa76b5aa9: vmovq  0x8(%eax),%xmm1
  0xa76b5aae: vmovq  %xmm1,0x8(%eax,%edx,1)
  0xa76b5ab4: vmovq  0x10(%eax),%xmm2
  0xa76b5ab9: vmovq  %xmm2,0x10(%eax,%edx,1)
  0xa76b5abf: vmovq  0x18(%eax),%xmm3
  0xa76b5ac4: vmovq  %xmm3,0x18(%eax,%edx,1)
  0xa76b5aca: vmovq  0x20(%eax),%xmm4
  0xa76b5acf: vmovq  %xmm4,0x20(%eax,%edx,1)
  0xa76b5ad5: vmovq  0x28(%eax),%xmm5
  0xa76b5ada: vmovq  %xmm5,0x28(%eax,%edx,1)
  0xa76b5ae0: vmovq  0x30(%eax),%xmm6
  0xa76b5ae5: vmovq  %xmm6,0x30(%eax,%edx,1)
  0xa76b5aeb: vmovq  0x38(%eax),%xmm7
  0xa76b5af0: vmovq  %xmm7,0x38(%eax,%edx,1)
  0xa76b5af6: add    $0x40,%eax
  ;; L_copy_64_bytes:
  0xa76b5af9: sub    $0x8,%ecx
  0xa76b5afc: jge    Stub::jlong_disjoint_arraycopy+32 0x0xa76b5aa0
  0xa76b5afe: add    $0x8,%ecx
  0xa76b5b01: je     Stub::jlong_disjoint_arraycopy+146 0x0xa76b5b12
  ;; L_copy_8_bytes:
  0xa76b5b03: vmovq  (%eax),%xmm0
  0xa76b5b07: vmovq  %xmm0,(%eax,%edx,1)
  0xa76b5b0c: add    $0x8,%eax
  0xa76b5b0f: dec    %ecx
  0xa76b5b10: jg     Stub::jlong_disjoint_arraycopy+131 0x0xa76b5b03
  ;; L_exit:
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0xa76b5b12: incl   0xb792c2b4
  0xa76b5b18: mov    %ebp,%esp
  0xa76b5b1a: pop    %ebp
  0xa76b5b1b: xor    %eax,%eax
  0xa76b5b1d: ret    

StubRoutines::jlong_arraycopy [0xa76b5b20, 0xa76b5b69[ (73 bytes)
  0xa76b5b20: push   %ebp
  0xa76b5b21: mov    %esp,%ebp
  0xa76b5b23: mov    0x8(%esp),%eax
  0xa76b5b27: mov    0xc(%esp),%edx
  0xa76b5b2b: mov    0x10(%esp),%ecx
  ;; Entry:
  0xa76b5b2f: cmp    %eax,%edx
  0xa76b5b31: jbe    Stub::jlong_disjoint_arraycopy+15 0x0xa76b5a8f
  0xa76b5b37: lea    (%eax,%ecx,8),%eax
  0xa76b5b3a: cmp    %eax,%edx
  0xa76b5b3c: mov    0x8(%esp),%eax
  0xa76b5b40: jae    Stub::jlong_disjoint_arraycopy+15 0x0xa76b5a8f
  0xa76b5b46: jmp    Stub::jlong_arraycopy+58 0x0xa76b5b5a
  0xa76b5b48: nop
  0xa76b5b49: nop
  0xa76b5b4a: nop
  0xa76b5b4b: nop
  0xa76b5b4c: nop
  0xa76b5b4d: nop
  0xa76b5b4e: nop
  0xa76b5b4f: nop
  ;; L_copy_8_bytes_loop:
  0xa76b5b50: vmovq  (%eax,%ecx,8),%xmm0
  0xa76b5b55: vmovq  %xmm0,(%edx,%ecx,8)
  ;; L_copy_8_bytes:
  0xa76b5b5a: dec    %ecx
  0xa76b5b5b: jge    Stub::jlong_arraycopy+48 0x0xa76b5b50
  ;; inc_counter SharedRuntime::_jlong_array_copy_ctr
  0xa76b5b5d: incl   0xb792c2b4
  0xa76b5b63: mov    %ebp,%esp
  0xa76b5b65: pop    %ebp
  0xa76b5b66: xor    %eax,%eax
  0xa76b5b68: ret    

StubRoutines::jbyte_fill [0xa76b5b80, 0xa76b5c49[ (201 bytes)
  ;; Entry:
  0xa76b5b80: push   %ebp
  0xa76b5b81: mov    %esp,%ebp
  0xa76b5b83: push   %esi
  0xa76b5b84: push   %edi
  0xa76b5b85: mov    0x10(%esp),%edi
  0xa76b5b89: mov    0x14(%esp),%edx
  0xa76b5b8d: mov    0x18(%esp),%esi
  0xa76b5b91: and    $0xff,%edx
  0xa76b5b97: mov    %edx,%eax
  0xa76b5b99: shl    $0x8,%eax
  0xa76b5b9c: or     %eax,%edx
  0xa76b5b9e: mov    %edx,%eax
  0xa76b5ba0: shl    $0x10,%eax
  0xa76b5ba3: or     %eax,%edx
  0xa76b5ba5: cmp    $0x8,%esi
  0xa76b5ba8: jb     Stub::jbyte_fill+158 0x0xa76b5c1e
  0xa76b5bae: test   $0x1,%edi
  0xa76b5bb4: je     Stub::jbyte_fill+58 0x0xa76b5bba
  0xa76b5bb6: mov    %dl,(%edi)
  0xa76b5bb8: inc    %edi
  0xa76b5bb9: dec    %esi
  ;; L_skip_align1:
  0xa76b5bba: test   $0x2,%edi
  0xa76b5bc0: je     Stub::jbyte_fill+75 0x0xa76b5bcb
  0xa76b5bc2: mov    %dx,(%edi)
  0xa76b5bc5: add    $0x2,%edi
  0xa76b5bc8: sub    $0x2,%esi
  ;; L_skip_align2:
  0xa76b5bcb: test   $0x4,%edi
  0xa76b5bd1: je     Stub::jbyte_fill+91 0x0xa76b5bdb
  0xa76b5bd3: mov    %edx,(%edi)
  0xa76b5bd5: add    $0x4,%edi
  0xa76b5bd8: sub    $0x4,%esi
  ;; L_fill_32_bytes:
  0xa76b5bdb: vmovd  %edx,%xmm0
  0xa76b5bdf: vpshufd $0x0,%xmm0,%xmm0
  0xa76b5be4: sub    $0x20,%esi
  0xa76b5be7: jl     Stub::jbyte_fill+139 0x0xa76b5c0b
  0xa76b5bed: nop
  0xa76b5bee: nop
  0xa76b5bef: nop
  ;; L_fill_32_bytes_loop:
  0xa76b5bf0: vmovq  %xmm0,(%edi)
  0xa76b5bf4: vmovq  %xmm0,0x8(%edi)
  0xa76b5bf9: vmovq  %xmm0,0x10(%edi)
  0xa76b5bfe: vmovq  %xmm0,0x18(%edi)
  0xa76b5c03: add    $0x20,%edi
  0xa76b5c06: sub    $0x20,%esi
  0xa76b5c09: jge    Stub::jbyte_fill+112 0x0xa76b5bf0
  ;; L_check_fill_8_bytes:
  0xa76b5c0b: add    $0x20,%esi
  0xa76b5c0e: je     Stub::jbyte_fill+195 0x0xa76b5c43
  0xa76b5c10: jmp    Stub::jbyte_fill+153 0x0xa76b5c19
  ;; L_fill_8_bytes_loop:
  0xa76b5c12: vmovq  %xmm0,(%edi)
  0xa76b5c16: add    $0x8,%edi
  ;; L_fill_8_bytes:
  0xa76b5c19: sub    $0x8,%esi
  0xa76b5c1c: jge    Stub::jbyte_fill+146 0x0xa76b5c12
  ;; L_fill_4_bytes:
  0xa76b5c1e: test   $0x4,%esi
  0xa76b5c24: je     Stub::jbyte_fill+171 0x0xa76b5c2b
  0xa76b5c26: mov    %edx,(%edi)
  0xa76b5c28: add    $0x4,%edi
  ;; L_fill_2_bytes:
  0xa76b5c2b: test   $0x2,%esi
  0xa76b5c31: je     Stub::jbyte_fill+185 0x0xa76b5c39
  0xa76b5c33: mov    %dx,(%edi)
  0xa76b5c36: add    $0x2,%edi
  ;; L_fill_byte:
  0xa76b5c39: test   $0x1,%esi
  0xa76b5c3f: je     Stub::jbyte_fill+195 0x0xa76b5c43
  0xa76b5c41: mov    %dl,(%edi)
  ;; L_exit:
  0xa76b5c43: pop    %edi
  0xa76b5c44: pop    %esi
  0xa76b5c45: mov    %ebp,%esp
  0xa76b5c47: pop    %ebp
  0xa76b5c48: ret    

StubRoutines::jshort_fill [0xa76b5c60, 0xa76b5d0c[ (172 bytes)
  ;; Entry:
  0xa76b5c60: push   %ebp
  0xa76b5c61: mov    %esp,%ebp
  0xa76b5c63: push   %esi
  0xa76b5c64: push   %edi
  0xa76b5c65: mov    0x10(%esp),%edi
  0xa76b5c69: mov    0x14(%esp),%edx
  0xa76b5c6d: mov    0x18(%esp),%esi
  0xa76b5c71: and    $0xffff,%edx
  0xa76b5c77: mov    %edx,%eax
  0xa76b5c79: shl    $0x10,%eax
  0xa76b5c7c: or     %eax,%edx
  0xa76b5c7e: cmp    $0x4,%esi
  0xa76b5c81: jb     Stub::jshort_fill+142 0x0xa76b5cee
  0xa76b5c87: test   $0x2,%edi
  0xa76b5c8d: je     Stub::jshort_fill+56 0x0xa76b5c98
  0xa76b5c8f: mov    %dx,(%edi)
  0xa76b5c92: add    $0x2,%edi
  0xa76b5c95: sub    $0x1,%esi
  ;; L_skip_align2:
  0xa76b5c98: test   $0x4,%edi
  0xa76b5c9e: je     Stub::jshort_fill+72 0x0xa76b5ca8
  0xa76b5ca0: mov    %edx,(%edi)
  0xa76b5ca2: add    $0x4,%edi
  0xa76b5ca5: sub    $0x2,%esi
  ;; L_fill_32_bytes:
  0xa76b5ca8: vmovd  %edx,%xmm0
  0xa76b5cac: vpshufd $0x0,%xmm0,%xmm0
  0xa76b5cb1: sub    $0x10,%esi
  0xa76b5cb4: jl     Stub::jshort_fill+123 0x0xa76b5cdb
  0xa76b5cba: nop
  0xa76b5cbb: nop
  0xa76b5cbc: nop
  0xa76b5cbd: nop
  0xa76b5cbe: nop
  0xa76b5cbf: nop
  ;; L_fill_32_bytes_loop:
  0xa76b5cc0: vmovq  %xmm0,(%edi)
  0xa76b5cc4: vmovq  %xmm0,0x8(%edi)
  0xa76b5cc9: vmovq  %xmm0,0x10(%edi)
  0xa76b5cce: vmovq  %xmm0,0x18(%edi)
  0xa76b5cd3: add    $0x20,%edi
  0xa76b5cd6: sub    $0x10,%esi
  0xa76b5cd9: jge    Stub::jshort_fill+96 0x0xa76b5cc0
  ;; L_check_fill_8_bytes:
  0xa76b5cdb: add    $0x10,%esi
  0xa76b5cde: je     Stub::jshort_fill+166 0x0xa76b5d06
  0xa76b5ce0: jmp    Stub::jshort_fill+137 0x0xa76b5ce9
  ;; L_fill_8_bytes_loop:
  0xa76b5ce2: vmovq  %xmm0,(%edi)
  0xa76b5ce6: add    $0x8,%edi
  ;; L_fill_8_bytes:
  0xa76b5ce9: sub    $0x4,%esi
  0xa76b5cec: jge    Stub::jshort_fill+130 0x0xa76b5ce2
  ;; L_fill_4_bytes:
  0xa76b5cee: test   $0x2,%esi
  0xa76b5cf4: je     Stub::jshort_fill+155 0x0xa76b5cfb
  0xa76b5cf6: mov    %edx,(%edi)
  0xa76b5cf8: add    $0x4,%edi
  ;; L_fill_2_bytes:
  0xa76b5cfb: test   $0x1,%esi
  0xa76b5d01: je     Stub::jshort_fill+166 0x0xa76b5d06
  0xa76b5d03: mov    %dx,(%edi)
  ;; L_fill_byte:
  ;; L_exit:
  0xa76b5d06: pop    %edi
  0xa76b5d07: pop    %esi
  0xa76b5d08: mov    %ebp,%esp
  0xa76b5d0a: pop    %ebp
  0xa76b5d0b: ret    

StubRoutines::jint_fill [0xa76b5d20, 0xa76b5d9e[ (126 bytes)
  ;; Entry:
  0xa76b5d20: push   %ebp
  0xa76b5d21: mov    %esp,%ebp
  0xa76b5d23: push   %esi
  0xa76b5d24: push   %edi
  0xa76b5d25: mov    0x10(%esp),%edi
  0xa76b5d29: mov    0x14(%esp),%edx
  0xa76b5d2d: mov    0x18(%esp),%esi
  0xa76b5d31: cmp    $0x2,%esi
  0xa76b5d34: jb     Stub::jint_fill+110 0x0xa76b5d8e
  0xa76b5d3a: test   $0x4,%edi
  0xa76b5d40: je     Stub::jint_fill+42 0x0xa76b5d4a
  0xa76b5d42: mov    %edx,(%edi)
  0xa76b5d44: add    $0x4,%edi
  0xa76b5d47: sub    $0x1,%esi
  ;; L_fill_32_bytes:
  0xa76b5d4a: vmovd  %edx,%xmm0
  0xa76b5d4e: vpshufd $0x0,%xmm0,%xmm0
  0xa76b5d53: sub    $0x8,%esi
  0xa76b5d56: jl     Stub::jint_fill+91 0x0xa76b5d7b
  0xa76b5d5c: nop
  0xa76b5d5d: nop
  0xa76b5d5e: nop
  0xa76b5d5f: nop
  ;; L_fill_32_bytes_loop:
  0xa76b5d60: vmovq  %xmm0,(%edi)
  0xa76b5d64: vmovq  %xmm0,0x8(%edi)
  0xa76b5d69: vmovq  %xmm0,0x10(%edi)
  0xa76b5d6e: vmovq  %xmm0,0x18(%edi)
  0xa76b5d73: add    $0x20,%edi
  0xa76b5d76: sub    $0x8,%esi
  0xa76b5d79: jge    Stub::jint_fill+64 0x0xa76b5d60
  ;; L_check_fill_8_bytes:
  0xa76b5d7b: add    $0x8,%esi
  0xa76b5d7e: je     Stub::jint_fill+120 0x0xa76b5d98
  0xa76b5d80: jmp    Stub::jint_fill+105 0x0xa76b5d89
  ;; L_fill_8_bytes_loop:
  0xa76b5d82: vmovq  %xmm0,(%edi)
  0xa76b5d86: add    $0x8,%edi
  ;; L_fill_8_bytes:
  0xa76b5d89: sub    $0x2,%esi
  0xa76b5d8c: jge    Stub::jint_fill+98 0x0xa76b5d82
  ;; L_fill_4_bytes:
  0xa76b5d8e: test   $0x1,%esi
  0xa76b5d94: je     Stub::jint_fill+120 0x0xa76b5d98
  0xa76b5d96: mov    %edx,(%edi)
  ;; L_fill_2_bytes:
  ;; L_exit:
  0xa76b5d98: pop    %edi
  0xa76b5d99: pop    %esi
  0xa76b5d9a: mov    %ebp,%esp
  0xa76b5d9c: pop    %ebp
  0xa76b5d9d: ret    

StubRoutines::arrayof_jbyte_fill [0xa76b5da0, 0xa76b5e49[ (169 bytes)
  ;; Entry:
  0xa76b5da0: push   %ebp
  0xa76b5da1: mov    %esp,%ebp
  0xa76b5da3: push   %esi
  0xa76b5da4: push   %edi
  0xa76b5da5: mov    0x10(%esp),%edi
  0xa76b5da9: mov    0x14(%esp),%edx
  0xa76b5dad: mov    0x18(%esp),%esi
  0xa76b5db1: and    $0xff,%edx
  0xa76b5db7: mov    %edx,%eax
  0xa76b5db9: shl    $0x8,%eax
  0xa76b5dbc: or     %eax,%edx
  0xa76b5dbe: mov    %edx,%eax
  0xa76b5dc0: shl    $0x10,%eax
  0xa76b5dc3: or     %eax,%edx
  0xa76b5dc5: cmp    $0x8,%esi
  0xa76b5dc8: jb     Stub::arrayof_jbyte_fill+126 0x0xa76b5e1e
  0xa76b5dce: test   $0x4,%edi
  0xa76b5dd4: je     Stub::arrayof_jbyte_fill+62 0x0xa76b5dde
  0xa76b5dd6: mov    %edx,(%edi)
  0xa76b5dd8: add    $0x4,%edi
  0xa76b5ddb: sub    $0x4,%esi
  ;; L_fill_32_bytes:
  0xa76b5dde: vmovd  %edx,%xmm0
  0xa76b5de2: vpshufd $0x0,%xmm0,%xmm0
  0xa76b5de7: sub    $0x20,%esi
  0xa76b5dea: jl     Stub::arrayof_jbyte_fill+107 0x0xa76b5e0b
  ;; L_fill_32_bytes_loop:
  0xa76b5df0: vmovq  %xmm0,(%edi)
  0xa76b5df4: vmovq  %xmm0,0x8(%edi)
  0xa76b5df9: vmovq  %xmm0,0x10(%edi)
  0xa76b5dfe: vmovq  %xmm0,0x18(%edi)
  0xa76b5e03: add    $0x20,%edi
  0xa76b5e06: sub    $0x20,%esi
  0xa76b5e09: jge    Stub::arrayof_jbyte_fill+80 0x0xa76b5df0
  ;; L_check_fill_8_bytes:
  0xa76b5e0b: add    $0x20,%esi
  0xa76b5e0e: je     Stub::arrayof_jbyte_fill+163 0x0xa76b5e43
  0xa76b5e10: jmp    Stub::arrayof_jbyte_fill+121 0x0xa76b5e19
  ;; L_fill_8_bytes_loop:
  0xa76b5e12: vmovq  %xmm0,(%edi)
  0xa76b5e16: add    $0x8,%edi
  ;; L_fill_8_bytes:
  0xa76b5e19: sub    $0x8,%esi
  0xa76b5e1c: jge    Stub::arrayof_jbyte_fill+114 0x0xa76b5e12
  ;; L_fill_4_bytes:
  0xa76b5e1e: test   $0x4,%esi
  0xa76b5e24: je     Stub::arrayof_jbyte_fill+139 0x0xa76b5e2b
  0xa76b5e26: mov    %edx,(%edi)
  0xa76b5e28: add    $0x4,%edi
  ;; L_fill_2_bytes:
  0xa76b5e2b: test   $0x2,%esi
  0xa76b5e31: je     Stub::arrayof_jbyte_fill+153 0x0xa76b5e39
  0xa76b5e33: mov    %dx,(%edi)
  0xa76b5e36: add    $0x2,%edi
  ;; L_fill_byte:
  0xa76b5e39: test   $0x1,%esi
  0xa76b5e3f: je     Stub::arrayof_jbyte_fill+163 0x0xa76b5e43
  0xa76b5e41: mov    %dl,(%edi)
  ;; L_exit:
  0xa76b5e43: pop    %edi
  0xa76b5e44: pop    %esi
  0xa76b5e45: mov    %ebp,%esp
  0xa76b5e47: pop    %ebp
  0xa76b5e48: ret    

StubRoutines::arrayof_jshort_fill [0xa76b5e60, 0xa76b5efc[ (156 bytes)
  ;; Entry:
  0xa76b5e60: push   %ebp
  0xa76b5e61: mov    %esp,%ebp
  0xa76b5e63: push   %esi
  0xa76b5e64: push   %edi
  0xa76b5e65: mov    0x10(%esp),%edi
  0xa76b5e69: mov    0x14(%esp),%edx
  0xa76b5e6d: mov    0x18(%esp),%esi
  0xa76b5e71: and    $0xffff,%edx
  0xa76b5e77: mov    %edx,%eax
  0xa76b5e79: shl    $0x10,%eax
  0xa76b5e7c: or     %eax,%edx
  0xa76b5e7e: cmp    $0x4,%esi
  0xa76b5e81: jb     Stub::arrayof_jshort_fill+126 0x0xa76b5ede
  0xa76b5e87: test   $0x4,%edi
  0xa76b5e8d: je     Stub::arrayof_jshort_fill+55 0x0xa76b5e97
  0xa76b5e8f: mov    %edx,(%edi)
  0xa76b5e91: add    $0x4,%edi
  0xa76b5e94: sub    $0x2,%esi
  ;; L_fill_32_bytes:
  0xa76b5e97: vmovd  %edx,%xmm0
  0xa76b5e9b: vpshufd $0x0,%xmm0,%xmm0
  0xa76b5ea0: sub    $0x10,%esi
  0xa76b5ea3: jl     Stub::arrayof_jshort_fill+107 0x0xa76b5ecb
  0xa76b5ea9: nop
  0xa76b5eaa: nop
  0xa76b5eab: nop
  0xa76b5eac: nop
  0xa76b5ead: nop
  0xa76b5eae: nop
  0xa76b5eaf: nop
  ;; L_fill_32_bytes_loop:
  0xa76b5eb0: vmovq  %xmm0,(%edi)
  0xa76b5eb4: vmovq  %xmm0,0x8(%edi)
  0xa76b5eb9: vmovq  %xmm0,0x10(%edi)
  0xa76b5ebe: vmovq  %xmm0,0x18(%edi)
  0xa76b5ec3: add    $0x20,%edi
  0xa76b5ec6: sub    $0x10,%esi
  0xa76b5ec9: jge    Stub::arrayof_jshort_fill+80 0x0xa76b5eb0
  ;; L_check_fill_8_bytes:
  0xa76b5ecb: add    $0x10,%esi
  0xa76b5ece: je     Stub::arrayof_jshort_fill+150 0x0xa76b5ef6
  0xa76b5ed0: jmp    Stub::arrayof_jshort_fill+121 0x0xa76b5ed9
  ;; L_fill_8_bytes_loop:
  0xa76b5ed2: vmovq  %xmm0,(%edi)
  0xa76b5ed6: add    $0x8,%edi
  ;; L_fill_8_bytes:
  0xa76b5ed9: sub    $0x4,%esi
  0xa76b5edc: jge    Stub::arrayof_jshort_fill+114 0x0xa76b5ed2
  ;; L_fill_4_bytes:
  0xa76b5ede: test   $0x2,%esi
  0xa76b5ee4: je     Stub::arrayof_jshort_fill+139 0x0xa76b5eeb
  0xa76b5ee6: mov    %edx,(%edi)
  0xa76b5ee8: add    $0x4,%edi
  ;; L_fill_2_bytes:
  0xa76b5eeb: test   $0x1,%esi
  0xa76b5ef1: je     Stub::arrayof_jshort_fill+150 0x0xa76b5ef6
  0xa76b5ef3: mov    %dx,(%edi)
  ;; L_fill_byte:
  ;; L_exit:
  0xa76b5ef6: pop    %edi
  0xa76b5ef7: pop    %esi
  0xa76b5ef8: mov    %ebp,%esp
  0xa76b5efa: pop    %ebp
  0xa76b5efb: ret    

StubRoutines::arrayof_jint_fill [0xa76b5f00, 0xa76b5f7e[ (126 bytes)
  ;; Entry:
  0xa76b5f00: push   %ebp
  0xa76b5f01: mov    %esp,%ebp
  0xa76b5f03: push   %esi
  0xa76b5f04: push   %edi
  0xa76b5f05: mov    0x10(%esp),%edi
  0xa76b5f09: mov    0x14(%esp),%edx
  0xa76b5f0d: mov    0x18(%esp),%esi
  0xa76b5f11: cmp    $0x2,%esi
  0xa76b5f14: jb     Stub::arrayof_jint_fill+110 0x0xa76b5f6e
  0xa76b5f1a: test   $0x4,%edi
  0xa76b5f20: je     Stub::arrayof_jint_fill+42 0x0xa76b5f2a
  0xa76b5f22: mov    %edx,(%edi)
  0xa76b5f24: add    $0x4,%edi
  0xa76b5f27: sub    $0x1,%esi
  ;; L_fill_32_bytes:
  0xa76b5f2a: vmovd  %edx,%xmm0
  0xa76b5f2e: vpshufd $0x0,%xmm0,%xmm0
  0xa76b5f33: sub    $0x8,%esi
  0xa76b5f36: jl     Stub::arrayof_jint_fill+91 0x0xa76b5f5b
  0xa76b5f3c: nop
  0xa76b5f3d: nop
  0xa76b5f3e: nop
  0xa76b5f3f: nop
  ;; L_fill_32_bytes_loop:
  0xa76b5f40: vmovq  %xmm0,(%edi)
  0xa76b5f44: vmovq  %xmm0,0x8(%edi)
  0xa76b5f49: vmovq  %xmm0,0x10(%edi)
  0xa76b5f4e: vmovq  %xmm0,0x18(%edi)
  0xa76b5f53: add    $0x20,%edi
  0xa76b5f56: sub    $0x8,%esi
  0xa76b5f59: jge    Stub::arrayof_jint_fill+64 0x0xa76b5f40
  ;; L_check_fill_8_bytes:
  0xa76b5f5b: add    $0x8,%esi
  0xa76b5f5e: je     Stub::arrayof_jint_fill+120 0x0xa76b5f78
  0xa76b5f60: jmp    Stub::arrayof_jint_fill+105 0x0xa76b5f69
  ;; L_fill_8_bytes_loop:
  0xa76b5f62: vmovq  %xmm0,(%edi)
  0xa76b5f66: add    $0x8,%edi
  ;; L_fill_8_bytes:
  0xa76b5f69: sub    $0x2,%esi
  0xa76b5f6c: jge    Stub::arrayof_jint_fill+98 0x0xa76b5f62
  ;; L_fill_4_bytes:
  0xa76b5f6e: test   $0x1,%esi
  0xa76b5f74: je     Stub::arrayof_jint_fill+120 0x0xa76b5f78
  0xa76b5f76: mov    %edx,(%edi)
  ;; L_fill_2_bytes:
  ;; L_exit:
  0xa76b5f78: pop    %edi
  0xa76b5f79: pop    %esi
  0xa76b5f7a: mov    %ebp,%esp
  0xa76b5f7c: pop    %ebp
  0xa76b5f7d: ret    

StubRoutines::checkcast_arraycopy [0xa76b5f80, 0xa76b6043[ (195 bytes)
  0xa76b5f80: push   %ebp
  0xa76b5f81: mov    %esp,%ebp
  0xa76b5f83: push   %esi
  0xa76b5f84: push   %edi
  0xa76b5f85: push   %ebx
  0xa76b5f86: mov    0x14(%esp),%eax
  0xa76b5f8a: mov    0x18(%esp),%edx
  0xa76b5f8e: mov    0x1c(%esp),%ecx
  ;; Entry:
  0xa76b5f92: lea    (%eax,%ecx,4),%eax
  0xa76b5f95: lea    (%edx,%ecx,4),%edx
  0xa76b5f98: neg    %ecx
  0xa76b5f9a: jne    Stub::checkcast_arraycopy+54 0x0xa76b5fb6
  0xa76b5f9c: xor    %eax,%eax
  0xa76b5f9e: jmp    Stub::checkcast_arraycopy+182 0x0xa76b6036
  0xa76b5fa3: nop
  0xa76b5fa4: nop
  0xa76b5fa5: nop
  0xa76b5fa6: nop
  0xa76b5fa7: nop
  0xa76b5fa8: nop
  0xa76b5fa9: nop
  0xa76b5faa: nop
  0xa76b5fab: nop
  0xa76b5fac: nop
  0xa76b5fad: nop
  0xa76b5fae: nop
  0xa76b5faf: nop
  ;; L_store_element:
  0xa76b5fb0: mov    %edi,(%edx,%ecx,4)
  0xa76b5fb3: inc    %ecx
  0xa76b5fb4: je     Stub::checkcast_arraycopy+149 0x0xa76b6015
  ;; L_load_element:
  0xa76b5fb6: mov    (%eax,%ecx,4),%edi
  0xa76b5fb9: test   %edi,%edi
  0xa76b5fbb: je     Stub::checkcast_arraycopy+48 0x0xa76b5fb0
  0xa76b5fbd: mov    0x4(%edi),%esi
  ;; type_check:
  0xa76b5fc0: cmp    0x24(%esp),%esi
  0xa76b5fc4: je     Stub::checkcast_arraycopy+48 0x0xa76b5fb0
  0xa76b5fc6: mov    0x20(%esp),%ebx
  0xa76b5fca: mov    (%esi,%ebx,1),%ebx
  0xa76b5fcd: cmp    0x24(%esp),%ebx
  0xa76b5fd1: je     Stub::checkcast_arraycopy+48 0x0xa76b5fb0
  0xa76b5fd3: cmpl   $0x14,0x20(%esp)
  0xa76b5fdb: jne    Stub::checkcast_arraycopy+134 0x0xa76b6006
  0xa76b5fe1: mov    0x24(%esp),%ebx
  0xa76b5fe5: push   %eax
  0xa76b5fe6: mov    %ebx,%eax
  0xa76b5fe8: push   %ecx
  0xa76b5fe9: push   %edi
  0xa76b5fea: incl   0xb792c2a4
  0xa76b5ff0: mov    0x18(%esi),%edi
  0xa76b5ff3: mov    (%edi),%ecx
  0xa76b5ff5: add    $0x4,%edi
  0xa76b5ff8: test   %eax,%eax
  0xa76b5ffa: repnz scas %es:(%edi),%eax
  0xa76b5ffc: pop    %edi
  0xa76b5ffd: pop    %ecx
  0xa76b5ffe: pop    %eax
  0xa76b5fff: jne    Stub::checkcast_arraycopy+134 0x0xa76b6006
  0xa76b6001: mov    %ebx,0x14(%esi)
  0xa76b6004: jmp    Stub::checkcast_arraycopy+48 0x0xa76b5fb0
  ;; L_failure:
  0xa76b6006: add    0x1c(%esp),%ecx
  0xa76b600a: mov    %ecx,%eax
  0xa76b600c: not    %eax
  0xa76b600e: jne    Stub::checkcast_arraycopy+155 0x0xa76b601b
  0xa76b6010: jmp    Stub::checkcast_arraycopy+182 0x0xa76b6036
  ;; L_do_card_marks:
  0xa76b6015: xor    %eax,%eax
  0xa76b6017: mov    0x1c(%esp),%ecx
  ;; L_post_barrier:
  0xa76b601b: mov    0x18(%esp),%edx
  0xa76b601f: lea    -0x4(%edx,%ecx,4),%ecx
  0xa76b6023: shr    $0x9,%edx
  0xa76b6026: shr    $0x9,%ecx
  0xa76b6029: sub    %edx,%ecx
  ;; L_loop:
  0xa76b602b: movb   $0x0,0x66ac7000(%edx,%ecx,1)
  0xa76b6033: dec    %ecx
  0xa76b6034: jge    Stub::checkcast_arraycopy+171 0x0xa76b602b
  ;; L_done:
  0xa76b6036: pop    %ebx
  0xa76b6037: pop    %edi
  0xa76b6038: pop    %esi
  ;; inc_counter SharedRuntime::_checkcast_array_copy_ctr
  0xa76b6039: incl   0xb792c2bc
  0xa76b603f: mov    %ebp,%esp
  0xa76b6041: pop    %ebp
  0xa76b6042: ret    

StubRoutines::checkcast_arraycopy_uninit [0xa76b6060, 0xa76b6123[ (195 bytes)
  0xa76b6060: push   %ebp
  0xa76b6061: mov    %esp,%ebp
  0xa76b6063: push   %esi
  0xa76b6064: push   %edi
  0xa76b6065: push   %ebx
  0xa76b6066: mov    0x14(%esp),%eax
  0xa76b606a: mov    0x18(%esp),%edx
  0xa76b606e: mov    0x1c(%esp),%ecx
  0xa76b6072: lea    (%eax,%ecx,4),%eax
  0xa76b6075: lea    (%edx,%ecx,4),%edx
  0xa76b6078: neg    %ecx
  0xa76b607a: jne    Stub::checkcast_arraycopy_uninit+54 0x0xa76b6096
  0xa76b607c: xor    %eax,%eax
  0xa76b607e: jmp    Stub::checkcast_arraycopy_uninit+182 0x0xa76b6116
  0xa76b6083: nop
  0xa76b6084: nop
  0xa76b6085: nop
  0xa76b6086: nop
  0xa76b6087: nop
  0xa76b6088: nop
  0xa76b6089: nop
  0xa76b608a: nop
  0xa76b608b: nop
  0xa76b608c: nop
  0xa76b608d: nop
  0xa76b608e: nop
  0xa76b608f: nop
  ;; L_store_element:
  0xa76b6090: mov    %edi,(%edx,%ecx,4)
  0xa76b6093: inc    %ecx
  0xa76b6094: je     Stub::checkcast_arraycopy_uninit+149 0x0xa76b60f5
  ;; L_load_element:
  0xa76b6096: mov    (%eax,%ecx,4),%edi
  0xa76b6099: test   %edi,%edi
  0xa76b609b: je     Stub::checkcast_arraycopy_uninit+48 0x0xa76b6090
  0xa76b609d: mov    0x4(%edi),%esi
  ;; type_check:
  0xa76b60a0: cmp    0x24(%esp),%esi
  0xa76b60a4: je     Stub::checkcast_arraycopy_uninit+48 0x0xa76b6090
  0xa76b60a6: mov    0x20(%esp),%ebx
  0xa76b60aa: mov    (%esi,%ebx,1),%ebx
  0xa76b60ad: cmp    0x24(%esp),%ebx
  0xa76b60b1: je     Stub::checkcast_arraycopy_uninit+48 0x0xa76b6090
  0xa76b60b3: cmpl   $0x14,0x20(%esp)
  0xa76b60bb: jne    Stub::checkcast_arraycopy_uninit+134 0x0xa76b60e6
  0xa76b60c1: mov    0x24(%esp),%ebx
  0xa76b60c5: push   %eax
  0xa76b60c6: mov    %ebx,%eax
  0xa76b60c8: push   %ecx
  0xa76b60c9: push   %edi
  0xa76b60ca: incl   0xb792c2a4
  0xa76b60d0: mov    0x18(%esi),%edi
  0xa76b60d3: mov    (%edi),%ecx
  0xa76b60d5: add    $0x4,%edi
  0xa76b60d8: test   %eax,%eax
  0xa76b60da: repnz scas %es:(%edi),%eax
  0xa76b60dc: pop    %edi
  0xa76b60dd: pop    %ecx
  0xa76b60de: pop    %eax
  0xa76b60df: jne    Stub::checkcast_arraycopy_uninit+134 0x0xa76b60e6
  0xa76b60e1: mov    %ebx,0x14(%esi)
  0xa76b60e4: jmp    Stub::checkcast_arraycopy_uninit+48 0x0xa76b6090
  ;; L_failure:
  0xa76b60e6: add    0x1c(%esp),%ecx
  0xa76b60ea: mov    %ecx,%eax
  0xa76b60ec: not    %eax
  0xa76b60ee: jne    Stub::checkcast_arraycopy_uninit+155 0x0xa76b60fb
  0xa76b60f0: jmp    Stub::checkcast_arraycopy_uninit+182 0x0xa76b6116
  ;; L_do_card_marks:
  0xa76b60f5: xor    %eax,%eax
  0xa76b60f7: mov    0x1c(%esp),%ecx
  ;; L_post_barrier:
  0xa76b60fb: mov    0x18(%esp),%edx
  0xa76b60ff: lea    -0x4(%edx,%ecx,4),%ecx
  0xa76b6103: shr    $0x9,%edx
  0xa76b6106: shr    $0x9,%ecx
  0xa76b6109: sub    %edx,%ecx
  ;; L_loop:
  0xa76b610b: movb   $0x0,0x66ac7000(%edx,%ecx,1)
  0xa76b6113: dec    %ecx
  0xa76b6114: jge    Stub::checkcast_arraycopy_uninit+171 0x0xa76b610b
  ;; L_done:
  0xa76b6116: pop    %ebx
  0xa76b6117: pop    %edi
  0xa76b6118: pop    %esi
  ;; inc_counter SharedRuntime::_checkcast_array_copy_ctr
  0xa76b6119: incl   0xb792c2bc
  0xa76b611f: mov    %ebp,%esp
  0xa76b6121: pop    %ebp
  0xa76b6122: ret    

StubRoutines::unsafe_arraycopy [0xa76b6140, 0xa76b619f[ (95 bytes)
  0xa76b6140: push   %ebp
  0xa76b6141: mov    %esp,%ebp
  0xa76b6143: push   %esi
  0xa76b6144: push   %edi
  0xa76b6145: mov    0x10(%esp),%eax
  0xa76b6149: mov    0x14(%esp),%edx
  0xa76b614d: mov    0x18(%esp),%ecx
  ;; inc_counter SharedRuntime::_unsafe_array_copy_ctr
  0xa76b6151: incl   0xb792c2c0
  0xa76b6157: mov    %eax,%esi
  0xa76b6159: or     %edx,%esi
  0xa76b615b: or     %ecx,%esi
  0xa76b615d: test   $0x7,%esi
  0xa76b6163: je     Stub::unsafe_arraycopy+81 0x0xa76b6191
  0xa76b6165: test   $0x3,%esi
  0xa76b616b: je     Stub::unsafe_arraycopy+69 0x0xa76b6185
  0xa76b616d: test   $0x1,%esi
  0xa76b6173: jne    Stub::jbyte_arraycopy+17 0x0xa76b51b1
  ;; L_short_aligned:
  0xa76b6179: shr    $0x1,%ecx
  0xa76b617c: mov    %ecx,0x18(%esp)
  0xa76b6180: jmp    Stub::jshort_arraycopy+17 0x0xa76b5531
  ;; L_int_aligned:
  0xa76b6185: shr    $0x2,%ecx
  0xa76b6188: mov    %ecx,0x18(%esp)
  0xa76b618c: jmp    Stub::jint_arraycopy+17 0x0xa76b56d1
  ;; L_long_aligned:
  0xa76b6191: shr    $0x3,%ecx
  0xa76b6194: mov    %ecx,0x18(%esp)
  0xa76b6198: pop    %edi
  0xa76b6199: pop    %esi
  0xa76b619a: jmp    Stub::jlong_arraycopy+15 0x0xa76b5b2f

StubRoutines::generic_arraycopy [0xa76b61bb, 0xa76b63ad[ (498 bytes)
  ;; L_failed_0:
  0xa76b61bb: jmp    Stub::generic_arraycopy+253 0x0xa76b62b8
  0xa76b61c0: push   %ebp
  0xa76b61c1: mov    %esp,%ebp
  0xa76b61c3: push   %esi
  0xa76b61c4: push   %edi
  ;; inc_counter SharedRuntime::_generic_array_copy_ctr
  0xa76b61c5: incl   0xb792c2c4
  0xa76b61cb: mov    0x10(%esp),%eax
  0xa76b61cf: test   %eax,%eax
  0xa76b61d1: je     Stub::generic_arraycopy
  0xa76b61d3: mov    0x14(%esp),%esi
  0xa76b61d7: test   %esi,%esi
  0xa76b61d9: js     Stub::generic_arraycopy
  0xa76b61db: mov    0x18(%esp),%edx
  0xa76b61df: test   %edx,%edx
  0xa76b61e1: je     Stub::generic_arraycopy
  0xa76b61e3: mov    0x1c(%esp),%edi
  0xa76b61e7: test   %edi,%edi
  0xa76b61e9: js     Stub::generic_arraycopy
  0xa76b61eb: mov    0x20(%esp),%ecx
  0xa76b61ef: test   %ecx,%ecx
  0xa76b61f1: js     Stub::generic_arraycopy
  0xa76b61f3: mov    0x4(%eax),%ecx
  ;; assert klasses not null
  0xa76b61f6: test   %ecx,%ecx
  0xa76b61f8: jne    Stub::generic_arraycopy+80 0x0xa76b620b
  0xa76b61fa: push   $0xb75aef4f
  0xa76b61ff: call   Stub::generic_arraycopy+73 0x0xa76b6204
  0xa76b6204: pusha  
  0xa76b6205: call   0xb7052f32
  0xa76b620a: hlt    
  0xa76b620b: cmpl   $0x0,0x4(%edx)
  0xa76b6212: je     Stub::generic_arraycopy+63 0x0xa76b61fa
  ;; assert done
  0xa76b6214: cmpl   $0x800c0c02,0x8(%ecx)
  0xa76b621b: je     Stub::generic_arraycopy+263 0x0xa76b62c2
  0xa76b6221: cmp    0x4(%edx),%ecx
  0xa76b6224: jne    Stub::generic_arraycopy
  0xa76b6226: mov    0x8(%ecx),%ecx
  0xa76b6229: cmp    $0x0,%ecx
  0xa76b622c: jge    Stub::generic_arraycopy
  0xa76b622e: cmp    $0xc0000000,%ecx
  0xa76b6234: jge    Stub::generic_arraycopy+144 0x0xa76b624b
  0xa76b623a: push   $0xb75aefa3
  0xa76b623f: call   Stub::generic_arraycopy+137 0x0xa76b6244
  0xa76b6244: pusha  
  0xa76b6245: call   0xb7052f32
  0xa76b624a: hlt    
  ;; arraycopy_range_checks:
  0xa76b624b: add    0x20(%esp),%esi
  0xa76b624f: add    0x20(%esp),%edi
  0xa76b6253: cmp    0x8(%eax),%esi
  0xa76b6256: ja     Stub::generic_arraycopy+253 0x0xa76b62b8
  0xa76b625c: cmp    0x8(%edx),%edi
  0xa76b625f: ja     Stub::generic_arraycopy+253 0x0xa76b62b8
  ;; arraycopy_range_checks done
  0xa76b6265: mov    %ecx,%esi
  0xa76b6267: shr    $0x10,%esi
  0xa76b626a: and    $0xff,%esi
  0xa76b6270: add    %esi,%eax
  0xa76b6272: add    %esi,%edx
  0xa76b6274: and    $0x3f,%ecx
  ;; scale indexes to element size
  0xa76b6277: mov    0x14(%esp),%esi
  0xa76b627b: shl    %cl,%esi
  0xa76b627d: add    %esi,%eax
  0xa76b627f: mov    0x1c(%esp),%edi
  0xa76b6283: shl    %cl,%edi
  0xa76b6285: add    %edi,%edx
  0xa76b6287: mov    %eax,0x10(%esp)
  0xa76b628b: mov    %ecx,%edi
  0xa76b628d: mov    0x20(%esp),%ecx
  ;; choose copy loop based on element size
  0xa76b6291: cmp    $0x0,%edi
  0xa76b6294: je     Stub::jbyte_arraycopy+17 0x0xa76b51b1
  0xa76b629a: cmp    $0x1,%edi
  0xa76b629d: je     Stub::jshort_arraycopy+17 0x0xa76b5531
  0xa76b62a3: cmp    $0x2,%edi
  0xa76b62a6: je     Stub::jint_arraycopy+17 0x0xa76b56d1
  0xa76b62ac: cmp    $0x3,%edi
  0xa76b62af: jne    Stub::generic_arraycopy+253 0x0xa76b62b8
  0xa76b62b1: pop    %edi
  0xa76b62b2: pop    %esi
  0xa76b62b3: jmp    Stub::jlong_arraycopy+15 0x0xa76b5b2f
  ;; L_failed:
  0xa76b62b8: xor    %eax,%eax
  0xa76b62ba: not    %eax
  0xa76b62bc: pop    %edi
  0xa76b62bd: pop    %esi
  0xa76b62be: mov    %ebp,%esp
  0xa76b62c0: pop    %ebp
  0xa76b62c1: ret    
  ;; L_objArray:
  0xa76b62c2: cmp    0x4(%edx),%ecx
  0xa76b62c5: jne    Stub::generic_arraycopy+323 0x0xa76b62fe
  ;; arraycopy_range_checks:
  0xa76b62c7: add    0x20(%esp),%esi
  0xa76b62cb: add    0x20(%esp),%edi
  0xa76b62cf: cmp    0x8(%eax),%esi
  0xa76b62d2: ja     Stub::generic_arraycopy+253 0x0xa76b62b8
  0xa76b62d4: cmp    0x8(%edx),%edi
  0xa76b62d7: ja     Stub::generic_arraycopy+253 0x0xa76b62b8
  ;; arraycopy_range_checks done
  ;; L_plain_copy:
  0xa76b62d9: mov    0x20(%esp),%ecx
  0xa76b62dd: mov    0x14(%esp),%esi
  0xa76b62e1: lea    0xc(%eax,%esi,4),%eax
  0xa76b62e5: mov    0x1c(%esp),%edi
  0xa76b62e9: lea    0xc(%edx,%edi,4),%edx
  0xa76b62ed: mov    %eax,0x10(%esp)
  0xa76b62f1: mov    %edx,0x14(%esp)
  0xa76b62f5: mov    %ecx,0x18(%esp)
  0xa76b62f9: jmp    Stub::oop_arraycopy+17 0x0xa76b5851
  ;; L_checkcast_copy:
  0xa76b62fe: mov    0x4(%edx),%esi
  0xa76b6301: cmpl   $0x800c0c02,0x8(%esi)
  0xa76b6308: jne    Stub::generic_arraycopy+253 0x0xa76b62b8
  0xa76b630a: mov    0x14(%esp),%esi
  ;; arraycopy_range_checks:
  0xa76b630e: add    0x20(%esp),%esi
  0xa76b6312: add    0x20(%esp),%edi
  0xa76b6316: cmp    0x8(%eax),%esi
  0xa76b6319: ja     Stub::generic_arraycopy+253 0x0xa76b62b8
  0xa76b631b: cmp    0x8(%edx),%edi
  0xa76b631e: ja     Stub::generic_arraycopy+253 0x0xa76b62b8
  ;; arraycopy_range_checks done
  0xa76b6320: push   %ebx
  0xa76b6321: mov    %ecx,%ebx
  0xa76b6323: mov    0x4(%edx),%esi
  ;; type_check:
  0xa76b6326: cmp    0x4(%edx),%ebx
  0xa76b6329: je     Stub::generic_arraycopy+438 0x0xa76b6371
  0xa76b632f: mov    0xc(%esi),%edi
  0xa76b6332: mov    (%ebx,%edi,1),%edi
  0xa76b6335: cmp    0x4(%edx),%edi
  0xa76b6338: je     Stub::generic_arraycopy+438 0x0xa76b6371
  0xa76b633e: cmpl   $0x14,0xc(%esi)
  0xa76b6345: jne    Stub::generic_arraycopy+444 0x0xa76b6377
  0xa76b634b: mov    0x4(%edx),%edi
  0xa76b634e: push   %eax
  0xa76b634f: mov    %edi,%eax
  0xa76b6351: push   %ecx
  0xa76b6352: push   %edi
  0xa76b6353: incl   0xb792c2a4
  0xa76b6359: mov    0x18(%ebx),%edi
  0xa76b635c: mov    (%edi),%ecx
  0xa76b635e: add    $0x4,%edi
  0xa76b6361: test   %eax,%eax
  0xa76b6363: repnz scas %es:(%edi),%eax
  0xa76b6365: pop    %edi
  0xa76b6366: pop    %ecx
  0xa76b6367: pop    %eax
  0xa76b6368: jne    Stub::generic_arraycopy+444 0x0xa76b6377
  0xa76b636e: mov    %edi,0x14(%ebx)
  ;; L_success:
  0xa76b6371: pop    %ebx
  0xa76b6372: jmp    Stub::generic_arraycopy+286 0x0xa76b62d9
  ;; L_fail_array_check:
  0xa76b6377: mov    0x84(%esi),%ebx
  0xa76b637d: mov    0x24(%esp),%ecx
  0xa76b6381: mov    0x18(%esp),%esi
  0xa76b6385: mov    0x20(%esp),%edi
  0xa76b6389: mov    %ebx,0x24(%esp)
  0xa76b638d: mov    0xc(%ebx),%ebx
  0xa76b6390: mov    %ebx,0x20(%esp)
  0xa76b6394: mov    %ecx,0x1c(%esp)
  0xa76b6398: lea    0xc(%eax,%esi,4),%eax
  0xa76b639c: mov    %eax,0x14(%esp)
  0xa76b63a0: lea    0xc(%edx,%edi,4),%edx
  0xa76b63a4: mov    %edx,0x18(%esp)
  0xa76b63a8: jmp    Stub::checkcast_arraycopy+18 0x0xa76b5f92

StubRoutines::log [0xa76b63ad, 0xa76b63b8[ (11 bytes)
  0xa76b63ad: fldl   0x4(%esp)
  0xa76b63b1: fldln2 
  0xa76b63b3: fxch   %st(1)
  0xa76b63b5: fyl2x  
  0xa76b63b7: ret    

StubRoutines::log10 [0xa76b63b8, 0xa76b63c3[ (11 bytes)
  0xa76b63b8: fldl   0x4(%esp)
  0xa76b63bc: fldlg2 
  0xa76b63be: fxch   %st(1)
  0xa76b63c0: fyl2x  
  0xa76b63c2: ret    

StubRoutines::sin [0xa76b63c3, 0xa76b64e9[ (294 bytes)
  0xa76b63c3: fldl   0x4(%esp)
  0xa76b63c7: fldl   0xb750a448
  0xa76b63cd: fld    %st(1)
  0xa76b63cf: fabs   
  0xa76b63d1: fucomip %st(1),%st
  0xa76b63d3: ffree  %st(0)
  0xa76b63d5: fincstp 
  0xa76b63d7: ja     Stub::sin+33 0x0xa76b63e4
  0xa76b63dd: fsin   
  0xa76b63df: jmp    Stub::sin+293 0x0xa76b64e8
  0xa76b63e4: pusha  
  0xa76b63e5: sub    $0x80,%esp
  0xa76b63eb: vextractf128 $0x1,%ymm0,(%esp)
  0xa76b63f2: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa76b63fa: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa76b6402: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa76b640a: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa76b6412: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa76b641a: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa76b6422: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa76b642a: sub    $0x80,%esp
  0xa76b6430: vmovdqu %xmm0,(%esp)
  0xa76b6435: vmovdqu %xmm1,0x10(%esp)
  0xa76b643b: vmovdqu %xmm2,0x20(%esp)
  0xa76b6441: vmovdqu %xmm3,0x30(%esp)
  0xa76b6447: vmovdqu %xmm4,0x40(%esp)
  0xa76b644d: vmovdqu %xmm5,0x50(%esp)
  0xa76b6453: vmovdqu %xmm6,0x60(%esp)
  0xa76b6459: vmovdqu %xmm7,0x70(%esp)
  0xa76b645f: sub    $0x8,%esp
  0xa76b6462: fstpl  (%esp)
  0xa76b6465: call   0xb71de978
  0xa76b646a: add    $0x8,%esp
  0xa76b646d: vmovdqu (%esp),%xmm0
  0xa76b6472: vmovdqu 0x10(%esp),%xmm1
  0xa76b6478: vmovdqu 0x20(%esp),%xmm2
  0xa76b647e: vmovdqu 0x30(%esp),%xmm3
  0xa76b6484: vmovdqu 0x40(%esp),%xmm4
  0xa76b648a: vmovdqu 0x50(%esp),%xmm5
  0xa76b6490: vmovdqu 0x60(%esp),%xmm6
  0xa76b6496: vmovdqu 0x70(%esp),%xmm7
  0xa76b649c: add    $0x80,%esp
  0xa76b64a2: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa76b64a9: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa76b64b1: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa76b64b9: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa76b64c1: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa76b64c9: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa76b64d1: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa76b64d9: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa76b64e1: add    $0x80,%esp
  0xa76b64e7: popa   
  0xa76b64e8: ret    

StubRoutines::cos [0xa76b64e9, 0xa76b660f[ (294 bytes)
  0xa76b64e9: fldl   0x4(%esp)
  0xa76b64ed: fldl   0xb750a448
  0xa76b64f3: fld    %st(1)
  0xa76b64f5: fabs   
  0xa76b64f7: fucomip %st(1),%st
  0xa76b64f9: ffree  %st(0)
  0xa76b64fb: fincstp 
  0xa76b64fd: ja     Stub::cos+33 0x0xa76b650a
  0xa76b6503: fcos   
  0xa76b6505: jmp    Stub::cos+293 0x0xa76b660e
  0xa76b650a: pusha  
  0xa76b650b: sub    $0x80,%esp
  0xa76b6511: vextractf128 $0x1,%ymm0,(%esp)
  0xa76b6518: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa76b6520: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa76b6528: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa76b6530: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa76b6538: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa76b6540: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa76b6548: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa76b6550: sub    $0x80,%esp
  0xa76b6556: vmovdqu %xmm0,(%esp)
  0xa76b655b: vmovdqu %xmm1,0x10(%esp)
  0xa76b6561: vmovdqu %xmm2,0x20(%esp)
  0xa76b6567: vmovdqu %xmm3,0x30(%esp)
  0xa76b656d: vmovdqu %xmm4,0x40(%esp)
  0xa76b6573: vmovdqu %xmm5,0x50(%esp)
  0xa76b6579: vmovdqu %xmm6,0x60(%esp)
  0xa76b657f: vmovdqu %xmm7,0x70(%esp)
  0xa76b6585: sub    $0x8,%esp
  0xa76b6588: fstpl  (%esp)
  0xa76b658b: call   0xb71debe0
  0xa76b6590: add    $0x8,%esp
  0xa76b6593: vmovdqu (%esp),%xmm0
  0xa76b6598: vmovdqu 0x10(%esp),%xmm1
  0xa76b659e: vmovdqu 0x20(%esp),%xmm2
  0xa76b65a4: vmovdqu 0x30(%esp),%xmm3
  0xa76b65aa: vmovdqu 0x40(%esp),%xmm4
  0xa76b65b0: vmovdqu 0x50(%esp),%xmm5
  0xa76b65b6: vmovdqu 0x60(%esp),%xmm6
  0xa76b65bc: vmovdqu 0x70(%esp),%xmm7
  0xa76b65c2: add    $0x80,%esp
  0xa76b65c8: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa76b65cf: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa76b65d7: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa76b65df: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa76b65e7: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa76b65ef: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa76b65f7: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa76b65ff: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa76b6607: add    $0x80,%esp
  0xa76b660d: popa   
  0xa76b660e: ret    

StubRoutines::tan [0xa76b660f, 0xa76b6737[ (296 bytes)
  0xa76b660f: fldl   0x4(%esp)
  0xa76b6613: fldl   0xb750a448
  0xa76b6619: fld    %st(1)
  0xa76b661b: fabs   
  0xa76b661d: fucomip %st(1),%st
  0xa76b661f: ffree  %st(0)
  0xa76b6621: fincstp 
  0xa76b6623: ja     Stub::tan+35 0x0xa76b6632
  0xa76b6629: fptan  
  0xa76b662b: fstp   %st(0)
  0xa76b662d: jmp    Stub::tan+295 0x0xa76b6736
  0xa76b6632: pusha  
  0xa76b6633: sub    $0x80,%esp
  0xa76b6639: vextractf128 $0x1,%ymm0,(%esp)
  0xa76b6640: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa76b6648: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa76b6650: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa76b6658: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa76b6660: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa76b6668: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa76b6670: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa76b6678: sub    $0x80,%esp
  0xa76b667e: vmovdqu %xmm0,(%esp)
  0xa76b6683: vmovdqu %xmm1,0x10(%esp)
  0xa76b6689: vmovdqu %xmm2,0x20(%esp)
  0xa76b668f: vmovdqu %xmm3,0x30(%esp)
  0xa76b6695: vmovdqu %xmm4,0x40(%esp)
  0xa76b669b: vmovdqu %xmm5,0x50(%esp)
  0xa76b66a1: vmovdqu %xmm6,0x60(%esp)
  0xa76b66a7: vmovdqu %xmm7,0x70(%esp)
  0xa76b66ad: sub    $0x8,%esp
  0xa76b66b0: fstpl  (%esp)
  0xa76b66b3: call   0xb71dee44
  0xa76b66b8: add    $0x8,%esp
  0xa76b66bb: vmovdqu (%esp),%xmm0
  0xa76b66c0: vmovdqu 0x10(%esp),%xmm1
  0xa76b66c6: vmovdqu 0x20(%esp),%xmm2
  0xa76b66cc: vmovdqu 0x30(%esp),%xmm3
  0xa76b66d2: vmovdqu 0x40(%esp),%xmm4
  0xa76b66d8: vmovdqu 0x50(%esp),%xmm5
  0xa76b66de: vmovdqu 0x60(%esp),%xmm6
  0xa76b66e4: vmovdqu 0x70(%esp),%xmm7
  0xa76b66ea: add    $0x80,%esp
  0xa76b66f0: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa76b66f7: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa76b66ff: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa76b6707: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa76b670f: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa76b6717: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa76b671f: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa76b6727: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa76b672f: add    $0x80,%esp
  0xa76b6735: popa   
  0xa76b6736: ret    

StubRoutines::exp [0xa76b6737, 0xa76b68bb[ (388 bytes)
  0xa76b6737: fldl   0x4(%esp)
  0xa76b673b: fld    %st(0)
  0xa76b673d: sub    $0x4,%esp
  0xa76b6740: fstcw  (%esp)
  0xa76b6744: mov    (%esp),%eax
  0xa76b6747: or     $0x300,%eax
  0xa76b674d: push   %eax
  0xa76b674e: fldcw  (%esp)
  0xa76b6751: pop    %eax
  0xa76b6752: fldl2e 
  0xa76b6754: fmulp  %st,%st(1)
  0xa76b6756: sub    $0x8,%esp
  0xa76b6759: fld    %st(0)
  0xa76b675b: frndint 
  0xa76b675d: fsubr  %st,%st(1)
  0xa76b675f: fistpl (%esp)
  0xa76b6762: f2xm1  
  0xa76b6764: fld1   
  0xa76b6766: faddp  %st,%st(1)
  0xa76b6768: mov    (%esp),%eax
  0xa76b676b: mov    $0xfffff800,%ecx
  0xa76b6770: add    $0x3ff,%eax
  0xa76b6776: mov    %eax,%edx
  0xa76b6778: shl    $0x14,%eax
  0xa76b677b: add    $0x1,%edx
  0xa76b677e: cmove  %ecx,%eax
  0xa76b6781: cmp    $0x1,%edx
  0xa76b6784: cmove  %ecx,%eax
  0xa76b6787: test   %edx,%ecx
  0xa76b6789: cmovne %ecx,%eax
  0xa76b678c: mov    %eax,0x4(%esp)
  0xa76b6790: movl   $0x0,(%esp)
  0xa76b6797: fmull  (%esp)
  0xa76b679a: add    $0x8,%esp
  0xa76b679d: fldcw  (%esp)
  0xa76b67a0: add    $0x4,%esp
  0xa76b67a3: fucomi %st(0),%st
  0xa76b67a5: jp     Stub::exp+123 0x0xa76b67b2
  0xa76b67ab: ffree  %st(1)
  0xa76b67ad: jmp    Stub::exp+387 0x0xa76b68ba
  0xa76b67b2: ffree  %st(0)
  0xa76b67b4: fincstp 
  0xa76b67b6: pusha  
  0xa76b67b7: sub    $0x80,%esp
  0xa76b67bd: vextractf128 $0x1,%ymm0,(%esp)
  0xa76b67c4: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa76b67cc: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa76b67d4: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa76b67dc: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa76b67e4: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa76b67ec: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa76b67f4: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa76b67fc: sub    $0x80,%esp
  0xa76b6802: vmovdqu %xmm0,(%esp)
  0xa76b6807: vmovdqu %xmm1,0x10(%esp)
  0xa76b680d: vmovdqu %xmm2,0x20(%esp)
  0xa76b6813: vmovdqu %xmm3,0x30(%esp)
  0xa76b6819: vmovdqu %xmm4,0x40(%esp)
  0xa76b681f: vmovdqu %xmm5,0x50(%esp)
  0xa76b6825: vmovdqu %xmm6,0x60(%esp)
  0xa76b682b: vmovdqu %xmm7,0x70(%esp)
  0xa76b6831: sub    $0x8,%esp
  0xa76b6834: fstpl  (%esp)
  0xa76b6837: call   0xb71dbfa6
  0xa76b683c: add    $0x8,%esp
  0xa76b683f: vmovdqu (%esp),%xmm0
  0xa76b6844: vmovdqu 0x10(%esp),%xmm1
  0xa76b684a: vmovdqu 0x20(%esp),%xmm2
  0xa76b6850: vmovdqu 0x30(%esp),%xmm3
  0xa76b6856: vmovdqu 0x40(%esp),%xmm4
  0xa76b685c: vmovdqu 0x50(%esp),%xmm5
  0xa76b6862: vmovdqu 0x60(%esp),%xmm6
  0xa76b6868: vmovdqu 0x70(%esp),%xmm7
  0xa76b686e: add    $0x80,%esp
  0xa76b6874: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa76b687b: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa76b6883: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa76b688b: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa76b6893: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa76b689b: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa76b68a3: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa76b68ab: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa76b68b3: add    $0x80,%esp
  0xa76b68b9: popa   
  0xa76b68ba: ret    

StubRoutines::pow [0xa76b68bb, 0xa76b6b51[ (662 bytes)
  0xa76b68bb: fldl   0xc(%esp)
  0xa76b68bf: fldl   0x4(%esp)
  0xa76b68c3: mov    $0xb78c79c0,%eax
  0xa76b68c8: fldl   (%eax)
  0xa76b68ca: fucomip %st(2),%st
  0xa76b68cc: jp     Stub::pow+42 0x0xa76b68e5
  0xa76b68d2: jne    Stub::pow+42 0x0xa76b68e5
  0xa76b68d8: fxch   %st(1)
  0xa76b68da: ffree  %st(0)
  0xa76b68dc: fincstp 
  0xa76b68de: fmul   %st(0),%st
  0xa76b68e0: jmp    Stub::pow+661 0x0xa76b6b50
  0xa76b68e5: fldz   
  0xa76b68e7: fucomip %st(1),%st
  0xa76b68e9: ja     Stub::pow+173 0x0xa76b6968
  0xa76b68ef: fld    %st(1)
  0xa76b68f1: fld    %st(1)
  ;; fast_pow {
  0xa76b68f3: sub    $0x4,%esp
  0xa76b68f6: fstcw  (%esp)
  0xa76b68fa: mov    (%esp),%eax
  0xa76b68fd: or     $0x300,%eax
  0xa76b6903: push   %eax
  0xa76b6904: fldcw  (%esp)
  0xa76b6907: pop    %eax
  0xa76b6908: fyl2x  
  0xa76b690a: sub    $0x8,%esp
  0xa76b690d: fld    %st(0)
  0xa76b690f: frndint 
  0xa76b6911: fsubr  %st,%st(1)
  0xa76b6913: fistpl (%esp)
  0xa76b6916: f2xm1  
  0xa76b6918: fld1   
  0xa76b691a: faddp  %st,%st(1)
  0xa76b691c: mov    (%esp),%eax
  0xa76b691f: mov    $0xfffff800,%ecx
  0xa76b6924: add    $0x3ff,%eax
  0xa76b692a: mov    %eax,%edx
  0xa76b692c: shl    $0x14,%eax
  0xa76b692f: add    $0x1,%edx
  0xa76b6932: cmove  %ecx,%eax
  0xa76b6935: cmp    $0x1,%edx
  0xa76b6938: cmove  %ecx,%eax
  0xa76b693b: test   %edx,%ecx
  0xa76b693d: cmovne %ecx,%eax
  0xa76b6940: mov    %eax,0x4(%esp)
  0xa76b6944: movl   $0x0,(%esp)
  0xa76b694b: fmull  (%esp)
  0xa76b694e: add    $0x8,%esp
  0xa76b6951: fldcw  (%esp)
  0xa76b6954: add    $0x4,%esp
  ;; } fast_pow
  0xa76b6957: fucomi %st(0),%st
  0xa76b6959: jp     Stub::pow+393 0x0xa76b6a44
  0xa76b695f: ffree  %st(2)
  0xa76b6961: ffree  %st(1)
  0xa76b6963: jmp    Stub::pow+661 0x0xa76b6b50
  0xa76b6968: fld    %st(1)
  0xa76b696a: frndint 
  0xa76b696c: fucomi %st(2),%st
  0xa76b696e: jne    Stub::pow+393 0x0xa76b6a44
  0xa76b6974: sub    $0x8,%esp
  0xa76b6977: fld1   
  0xa76b6979: fadd   %st(1),%st
  0xa76b697b: fucomip %st(1),%st
  0xa76b697d: fistpll (%esp)
  0xa76b6980: jne    Stub::pow+218 0x0xa76b6995
  0xa76b6986: movl   $0x0,(%esp)
  0xa76b698d: movl   $0x0,0x4(%esp)
  0xa76b6995: fld    %st(1)
  0xa76b6997: fld    %st(1)
  0xa76b6999: fabs   
  ;; fast_pow {
  0xa76b699b: sub    $0x4,%esp
  0xa76b699e: fstcw  (%esp)
  0xa76b69a2: mov    (%esp),%eax
  0xa76b69a5: or     $0x300,%eax
  0xa76b69ab: push   %eax
  0xa76b69ac: fldcw  (%esp)
  0xa76b69af: pop    %eax
  0xa76b69b0: fyl2x  
  0xa76b69b2: sub    $0x8,%esp
  0xa76b69b5: fld    %st(0)
  0xa76b69b7: frndint 
  0xa76b69b9: fsubr  %st,%st(1)
  0xa76b69bb: fistpl (%esp)
  0xa76b69be: f2xm1  
  0xa76b69c0: fld1   
  0xa76b69c2: faddp  %st,%st(1)
  0xa76b69c4: mov    (%esp),%eax
  0xa76b69c7: mov    $0xfffff800,%ecx
  0xa76b69cc: add    $0x3ff,%eax
  0xa76b69d2: mov    %eax,%edx
  0xa76b69d4: shl    $0x14,%eax
  0xa76b69d7: add    $0x1,%edx
  0xa76b69da: cmove  %ecx,%eax
  0xa76b69dd: cmp    $0x1,%edx
  0xa76b69e0: cmove  %ecx,%eax
  0xa76b69e3: test   %edx,%ecx
  0xa76b69e5: cmovne %ecx,%eax
  0xa76b69e8: mov    %eax,0x4(%esp)
  0xa76b69ec: movl   $0x0,(%esp)
  0xa76b69f3: fmull  (%esp)
  0xa76b69f6: add    $0x8,%esp
  0xa76b69f9: fldcw  (%esp)
  0xa76b69fc: add    $0x4,%esp
  ;; } fast_pow
  0xa76b69ff: fucomi %st(0),%st
  0xa76b6a01: pop    %eax
  0xa76b6a02: pop    %ecx
  0xa76b6a03: jp     Stub::pow+393 0x0xa76b6a44
  0xa76b6a09: test   %eax,%eax
  0xa76b6a0b: jne    Stub::pow+371 0x0xa76b6a2e
  0xa76b6a11: cmp    $0x80000000,%ecx
  0xa76b6a17: jne    Stub::pow+371 0x0xa76b6a2e
  ;; integer indefinite value shouldn't be seen here
  0xa76b6a1d: push   $0xb750a190
  0xa76b6a22: call   Stub::pow+364 0x0xa76b6a27
  0xa76b6a27: pusha  
  0xa76b6a28: call   0xb7052f32
  0xa76b6a2d: hlt    
  0xa76b6a2e: ffree  %st(2)
  0xa76b6a30: ffree  %st(1)
  0xa76b6a32: test   $0x1,%eax
  0xa76b6a37: je     Stub::pow+661 0x0xa76b6b50
  0xa76b6a3d: fchs   
  0xa76b6a3f: jmp    Stub::pow+661 0x0xa76b6b50
  0xa76b6a44: ffree  %st(0)
  0xa76b6a46: fincstp 
  0xa76b6a48: pusha  
  0xa76b6a49: sub    $0x80,%esp
  0xa76b6a4f: vextractf128 $0x1,%ymm0,(%esp)
  0xa76b6a56: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa76b6a5e: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa76b6a66: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa76b6a6e: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa76b6a76: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa76b6a7e: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa76b6a86: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa76b6a8e: sub    $0x80,%esp
  0xa76b6a94: vmovdqu %xmm0,(%esp)
  0xa76b6a99: vmovdqu %xmm1,0x10(%esp)
  0xa76b6a9f: vmovdqu %xmm2,0x20(%esp)
  0xa76b6aa5: vmovdqu %xmm3,0x30(%esp)
  0xa76b6aab: vmovdqu %xmm4,0x40(%esp)
  0xa76b6ab1: vmovdqu %xmm5,0x50(%esp)
  0xa76b6ab7: vmovdqu %xmm6,0x60(%esp)
  0xa76b6abd: vmovdqu %xmm7,0x70(%esp)
  0xa76b6ac3: sub    $0x10,%esp
  0xa76b6ac6: fstpl  (%esp)
  0xa76b6ac9: fstpl  0x8(%esp)
  0xa76b6acd: call   0xb71dce80
  0xa76b6ad2: add    $0x10,%esp
  0xa76b6ad5: vmovdqu (%esp),%xmm0
  0xa76b6ada: vmovdqu 0x10(%esp),%xmm1
  0xa76b6ae0: vmovdqu 0x20(%esp),%xmm2
  0xa76b6ae6: vmovdqu 0x30(%esp),%xmm3
  0xa76b6aec: vmovdqu 0x40(%esp),%xmm4
  0xa76b6af2: vmovdqu 0x50(%esp),%xmm5
  0xa76b6af8: vmovdqu 0x60(%esp),%xmm6
  0xa76b6afe: vmovdqu 0x70(%esp),%xmm7
  0xa76b6b04: add    $0x80,%esp
  0xa76b6b0a: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa76b6b11: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa76b6b19: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa76b6b21: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa76b6b29: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa76b6b31: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa76b6b39: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa76b6b41: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa76b6b49: add    $0x80,%esp
  0xa76b6b4f: popa   
  0xa76b6b50: ret    

StubRoutines::key_shuffle_mask [0xa76b6b60, 0xa76b6b70[ (16 bytes)
  0xa76b6b60: add    (%edx),%eax
  0xa76b6b62: add    %eax,(%eax)
  0xa76b6b64: pop    %es
  0xa76b6b65: push   %es
  0xa76b6b66: add    $0x90a0b04,%eax
  0xa76b6b6b: or     %cl,(%edi)
  0xa76b6b6d: push   %cs
  0xa76b6b6e: .byte 0xd
  0xa76b6b6f: .byte 0xc

StubRoutines::aescrypt_encryptBlock [0xa76b6b80, 0xa76b6ca3[ (291 bytes)
  0xa76b6b80: push   %ebp
  0xa76b6b81: mov    %esp,%ebp
  0xa76b6b83: mov    0x8(%ebp),%edx
  0xa76b6b86: mov    0x10(%ebp),%ecx
  0xa76b6b89: mov    -0x4(%ecx),%eax
  0xa76b6b8c: vmovdqu 0xa76b6b60,%xmm1
  0xa76b6b94: vmovdqu (%edx),%xmm0
  0xa76b6b98: mov    0xc(%ebp),%edx
  0xa76b6b9b: vmovdqu (%ecx),%xmm2
  0xa76b6b9f: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6ba4: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b6ba8: vmovdqu 0x10(%ecx),%xmm2
  0xa76b6bad: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6bb2: vmovdqu 0x20(%ecx),%xmm3
  0xa76b6bb7: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6bbc: vmovdqu 0x30(%ecx),%xmm4
  0xa76b6bc1: vpshufb %xmm1,%xmm4,%xmm4
  0xa76b6bc6: vmovdqu 0x40(%ecx),%xmm5
  0xa76b6bcb: vpshufb %xmm1,%xmm5,%xmm5
  0xa76b6bd0: vaesenc %xmm2,%xmm0,%xmm0
  0xa76b6bd5: vaesenc %xmm3,%xmm0,%xmm0
  0xa76b6bda: vaesenc %xmm4,%xmm0,%xmm0
  0xa76b6bdf: vaesenc %xmm5,%xmm0,%xmm0
  0xa76b6be4: vmovdqu 0x50(%ecx),%xmm2
  0xa76b6be9: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6bee: vmovdqu 0x60(%ecx),%xmm3
  0xa76b6bf3: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6bf8: vmovdqu 0x70(%ecx),%xmm4
  0xa76b6bfd: vpshufb %xmm1,%xmm4,%xmm4
  0xa76b6c02: vmovdqu 0x80(%ecx),%xmm5
  0xa76b6c0a: vpshufb %xmm1,%xmm5,%xmm5
  0xa76b6c0f: vaesenc %xmm2,%xmm0,%xmm0
  0xa76b6c14: vaesenc %xmm3,%xmm0,%xmm0
  0xa76b6c19: vaesenc %xmm4,%xmm0,%xmm0
  0xa76b6c1e: vaesenc %xmm5,%xmm0,%xmm0
  0xa76b6c23: vmovdqu 0x90(%ecx),%xmm2
  0xa76b6c2b: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6c30: vmovdqu 0xa0(%ecx),%xmm3
  0xa76b6c38: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6c3d: cmp    $0x2c,%eax
  0xa76b6c40: je     Stub::aescrypt_encryptBlock+271 0x0xa76b6c8f
  0xa76b6c42: vaesenc %xmm2,%xmm0,%xmm0
  0xa76b6c47: vaesenc %xmm3,%xmm0,%xmm0
  0xa76b6c4c: vmovdqu 0xb0(%ecx),%xmm2
  0xa76b6c54: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6c59: vmovdqu 0xc0(%ecx),%xmm3
  0xa76b6c61: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6c66: cmp    $0x34,%eax
  0xa76b6c69: je     Stub::aescrypt_encryptBlock+271 0x0xa76b6c8f
  0xa76b6c6b: vaesenc %xmm2,%xmm0,%xmm0
  0xa76b6c70: vaesenc %xmm3,%xmm0,%xmm0
  0xa76b6c75: vmovdqu 0xd0(%ecx),%xmm2
  0xa76b6c7d: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6c82: vmovdqu 0xe0(%ecx),%xmm3
  0xa76b6c8a: vpshufb %xmm1,%xmm3,%xmm3
  ;; L_doLast:
  0xa76b6c8f: vaesenc %xmm2,%xmm0,%xmm0
  0xa76b6c94: vaesenclast %xmm3,%xmm0,%xmm0
  0xa76b6c99: vmovdqu %xmm0,(%edx)
  0xa76b6c9d: xor    %eax,%eax
  0xa76b6c9f: mov    %ebp,%esp
  0xa76b6ca1: pop    %ebp
  0xa76b6ca2: ret    

StubRoutines::aescrypt_decryptBlock [0xa76b6cc0, 0xa76b6de3[ (291 bytes)
  0xa76b6cc0: push   %ebp
  0xa76b6cc1: mov    %esp,%ebp
  0xa76b6cc3: mov    0x8(%ebp),%edx
  0xa76b6cc6: mov    0x10(%ebp),%ecx
  0xa76b6cc9: mov    -0x4(%ecx),%eax
  0xa76b6ccc: vmovdqu 0xa76b6b60,%xmm1
  0xa76b6cd4: vmovdqu (%edx),%xmm0
  0xa76b6cd8: mov    0xc(%ebp),%edx
  0xa76b6cdb: vmovdqu 0x10(%ecx),%xmm2
  0xa76b6ce0: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6ce5: vmovdqu 0x20(%ecx),%xmm3
  0xa76b6cea: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6cef: vmovdqu 0x30(%ecx),%xmm4
  0xa76b6cf4: vpshufb %xmm1,%xmm4,%xmm4
  0xa76b6cf9: vmovdqu 0x40(%ecx),%xmm5
  0xa76b6cfe: vpshufb %xmm1,%xmm5,%xmm5
  0xa76b6d03: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b6d07: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b6d0c: vaesdec %xmm4,%xmm0,%xmm0
  0xa76b6d11: vaesdec %xmm5,%xmm0,%xmm0
  0xa76b6d16: vmovdqu 0x50(%ecx),%xmm2
  0xa76b6d1b: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6d20: vmovdqu 0x60(%ecx),%xmm3
  0xa76b6d25: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6d2a: vmovdqu 0x70(%ecx),%xmm4
  0xa76b6d2f: vpshufb %xmm1,%xmm4,%xmm4
  0xa76b6d34: vmovdqu 0x80(%ecx),%xmm5
  0xa76b6d3c: vpshufb %xmm1,%xmm5,%xmm5
  0xa76b6d41: vaesdec %xmm2,%xmm0,%xmm0
  0xa76b6d46: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b6d4b: vaesdec %xmm4,%xmm0,%xmm0
  0xa76b6d50: vaesdec %xmm5,%xmm0,%xmm0
  0xa76b6d55: vmovdqu 0x90(%ecx),%xmm2
  0xa76b6d5d: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6d62: vmovdqu 0xa0(%ecx),%xmm3
  0xa76b6d6a: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6d6f: vmovdqu (%ecx),%xmm4
  0xa76b6d73: vpshufb %xmm1,%xmm4,%xmm4
  0xa76b6d78: cmp    $0x2c,%eax
  0xa76b6d7b: je     Stub::aescrypt_decryptBlock+266 0x0xa76b6dca
  0xa76b6d7d: vaesdec %xmm2,%xmm0,%xmm0
  0xa76b6d82: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b6d87: vmovdqu 0xb0(%ecx),%xmm2
  0xa76b6d8f: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6d94: vmovdqu 0xc0(%ecx),%xmm3
  0xa76b6d9c: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6da1: cmp    $0x34,%eax
  0xa76b6da4: je     Stub::aescrypt_decryptBlock+266 0x0xa76b6dca
  0xa76b6da6: vaesdec %xmm2,%xmm0,%xmm0
  0xa76b6dab: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b6db0: vmovdqu 0xd0(%ecx),%xmm2
  0xa76b6db8: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6dbd: vmovdqu 0xe0(%ecx),%xmm3
  0xa76b6dc5: vpshufb %xmm1,%xmm3,%xmm3
  ;; L_doLast:
  0xa76b6dca: vaesdec %xmm2,%xmm0,%xmm0
  0xa76b6dcf: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b6dd4: vaesdeclast %xmm4,%xmm0,%xmm0
  0xa76b6dd9: vmovdqu %xmm0,(%edx)
  0xa76b6ddd: xor    %eax,%eax
  0xa76b6ddf: mov    %ebp,%esp
  0xa76b6de1: pop    %ebp
  0xa76b6de2: ret    

StubRoutines::cipherBlockChaining_encryptAESCrypt [0xa76b6e00, 0xa76b712c[ (812 bytes)
  0xa76b6e00: push   %ebp
  0xa76b6e01: mov    %esp,%ebp
  0xa76b6e03: sub    $0x10,%esp
  0xa76b6e06: mov    %esi,-0x8(%ebp)
  0xa76b6e09: mov    %edi,-0x4(%ebp)
  0xa76b6e0c: mov    %ebx,-0xc(%ebp)
  0xa76b6e0f: mov    0x8(%ebp),%esi
  0xa76b6e12: mov    0xc(%ebp),%edx
  0xa76b6e15: mov    0x10(%ebp),%ecx
  0xa76b6e18: mov    0x14(%ebp),%edi
  0xa76b6e1b: mov    0x18(%ebp),%ebx
  0xa76b6e1e: vmovdqu 0xa76b6b60,%xmm1
  0xa76b6e26: vmovdqu (%ecx),%xmm2
  0xa76b6e2a: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b6e2f: vmovdqu 0x10(%ecx),%xmm3
  0xa76b6e34: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b6e39: vmovdqu 0x20(%ecx),%xmm4
  0xa76b6e3e: vpshufb %xmm1,%xmm4,%xmm4
  0xa76b6e43: vmovdqu 0x30(%ecx),%xmm5
  0xa76b6e48: vpshufb %xmm1,%xmm5,%xmm5
  0xa76b6e4d: vmovdqu 0x40(%ecx),%xmm6
  0xa76b6e52: vpshufb %xmm1,%xmm6,%xmm6
  0xa76b6e57: vmovdqu 0x50(%ecx),%xmm7
  0xa76b6e5c: vpshufb %xmm1,%xmm7,%xmm7
  0xa76b6e61: vmovdqu (%edi),%xmm0
  0xa76b6e65: mov    -0x4(%ecx),%eax
  0xa76b6e68: cmp    $0x2c,%eax
  0xa76b6e6b: jne    Stub::cipherBlockChaining_encryptAESCrypt+307 0x0xa76b6f33
  0xa76b6e71: mov    $0x0,%eax
  0xa76b6e76: nop
  0xa76b6e77: nop
  0xa76b6e78: nop
  0xa76b6e79: nop
  0xa76b6e7a: nop
  0xa76b6e7b: nop
  0xa76b6e7c: nop
  0xa76b6e7d: nop
  0xa76b6e7e: nop
  0xa76b6e7f: nop
  ;; L_loopTop_128:
  0xa76b6e80: vmovdqu (%esi,%eax,1),%xmm1
  0xa76b6e85: vpxor  %xmm1,%xmm0,%xmm0
  0xa76b6e89: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b6e8d: vaesenc %xmm3,%xmm0,%xmm0
  0xa76b6e92: vaesenc %xmm4,%xmm0,%xmm0
  0xa76b6e97: vaesenc %xmm5,%xmm0,%xmm0
  0xa76b6e9c: vaesenc %xmm6,%xmm0,%xmm0
  0xa76b6ea1: vaesenc %xmm7,%xmm0,%xmm0
  0xa76b6ea6: vmovdqu 0x60(%ecx),%xmm1
  0xa76b6eab: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6eb4: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6eb9: vmovdqu 0x70(%ecx),%xmm1
  0xa76b6ebe: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6ec7: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6ecc: vmovdqu 0x80(%ecx),%xmm1
  0xa76b6ed4: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6edd: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6ee2: vmovdqu 0x90(%ecx),%xmm1
  0xa76b6eea: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6ef3: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6ef8: vmovdqu 0xa0(%ecx),%xmm1
  0xa76b6f00: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6f09: vaesenclast %xmm1,%xmm0,%xmm0
  0xa76b6f0e: vmovdqu %xmm0,(%edx,%eax,1)
  0xa76b6f13: add    $0x10,%eax
  0xa76b6f16: sub    $0x10,%ebx
  0xa76b6f19: jne    Stub::cipherBlockChaining_encryptAESCrypt+128 0x0xa76b6e80
  ;; L_exit:
  0xa76b6f1f: vmovdqu %xmm0,(%edi)
  0xa76b6f23: mov    -0x8(%ebp),%esi
  0xa76b6f26: mov    -0x4(%ebp),%edi
  0xa76b6f29: mov    -0xc(%ebp),%ebx
  0xa76b6f2c: mov    0x18(%ebp),%eax
  0xa76b6f2f: mov    %ebp,%esp
  0xa76b6f31: pop    %ebp
  0xa76b6f32: ret    
  ;; L_key_192_256:
  0xa76b6f33: cmp    $0x34,%eax
  0xa76b6f36: jne    Stub::cipherBlockChaining_encryptAESCrypt+544 0x0xa76b7020
  0xa76b6f3c: mov    $0x0,%eax
  0xa76b6f41: nop
  0xa76b6f42: nop
  0xa76b6f43: nop
  0xa76b6f44: nop
  0xa76b6f45: nop
  0xa76b6f46: nop
  0xa76b6f47: nop
  0xa76b6f48: nop
  0xa76b6f49: nop
  0xa76b6f4a: nop
  0xa76b6f4b: nop
  0xa76b6f4c: nop
  0xa76b6f4d: nop
  0xa76b6f4e: nop
  0xa76b6f4f: nop
  ;; L_loopTop_192:
  0xa76b6f50: vmovdqu (%esi,%eax,1),%xmm1
  0xa76b6f55: vpxor  %xmm1,%xmm0,%xmm0
  0xa76b6f59: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b6f5d: vaesenc %xmm3,%xmm0,%xmm0
  0xa76b6f62: vaesenc %xmm4,%xmm0,%xmm0
  0xa76b6f67: vaesenc %xmm5,%xmm0,%xmm0
  0xa76b6f6c: vaesenc %xmm6,%xmm0,%xmm0
  0xa76b6f71: vaesenc %xmm7,%xmm0,%xmm0
  0xa76b6f76: vmovdqu 0x60(%ecx),%xmm1
  0xa76b6f7b: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6f84: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6f89: vmovdqu 0x70(%ecx),%xmm1
  0xa76b6f8e: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6f97: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6f9c: vmovdqu 0x80(%ecx),%xmm1
  0xa76b6fa4: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6fad: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6fb2: vmovdqu 0x90(%ecx),%xmm1
  0xa76b6fba: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6fc3: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6fc8: vmovdqu 0xa0(%ecx),%xmm1
  0xa76b6fd0: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6fd9: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6fde: vmovdqu 0xb0(%ecx),%xmm1
  0xa76b6fe6: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b6fef: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b6ff4: vmovdqu 0xc0(%ecx),%xmm1
  0xa76b6ffc: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7005: vaesenclast %xmm1,%xmm0,%xmm0
  0xa76b700a: vmovdqu %xmm0,(%edx,%eax,1)
  0xa76b700f: add    $0x10,%eax
  0xa76b7012: sub    $0x10,%ebx
  0xa76b7015: jne    Stub::cipherBlockChaining_encryptAESCrypt+336 0x0xa76b6f50
  0xa76b701b: jmp    Stub::cipherBlockChaining_encryptAESCrypt+287 0x0xa76b6f1f
  ;; L_key_256:
  0xa76b7020: mov    $0x0,%eax
  0xa76b7025: nop
  0xa76b7026: nop
  0xa76b7027: nop
  0xa76b7028: nop
  0xa76b7029: nop
  0xa76b702a: nop
  0xa76b702b: nop
  0xa76b702c: nop
  0xa76b702d: nop
  0xa76b702e: nop
  0xa76b702f: nop
  ;; L_loopTop_256:
  0xa76b7030: vmovdqu (%esi,%eax,1),%xmm1
  0xa76b7035: vpxor  %xmm1,%xmm0,%xmm0
  0xa76b7039: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b703d: vaesenc %xmm3,%xmm0,%xmm0
  0xa76b7042: vaesenc %xmm4,%xmm0,%xmm0
  0xa76b7047: vaesenc %xmm5,%xmm0,%xmm0
  0xa76b704c: vaesenc %xmm6,%xmm0,%xmm0
  0xa76b7051: vaesenc %xmm7,%xmm0,%xmm0
  0xa76b7056: vmovdqu 0x60(%ecx),%xmm1
  0xa76b705b: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7064: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b7069: vmovdqu 0x70(%ecx),%xmm1
  0xa76b706e: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7077: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b707c: vmovdqu 0x80(%ecx),%xmm1
  0xa76b7084: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b708d: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b7092: vmovdqu 0x90(%ecx),%xmm1
  0xa76b709a: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b70a3: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b70a8: vmovdqu 0xa0(%ecx),%xmm1
  0xa76b70b0: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b70b9: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b70be: vmovdqu 0xb0(%ecx),%xmm1
  0xa76b70c6: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b70cf: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b70d4: vmovdqu 0xc0(%ecx),%xmm1
  0xa76b70dc: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b70e5: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b70ea: vmovdqu 0xd0(%ecx),%xmm1
  0xa76b70f2: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b70fb: vaesenc %xmm1,%xmm0,%xmm0
  0xa76b7100: vmovdqu 0xe0(%ecx),%xmm1
  0xa76b7108: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7111: vaesenclast %xmm1,%xmm0,%xmm0
  0xa76b7116: vmovdqu %xmm0,(%edx,%eax,1)
  0xa76b711b: add    $0x10,%eax
  0xa76b711e: sub    $0x10,%ebx
  0xa76b7121: jne    Stub::cipherBlockChaining_encryptAESCrypt+560 0x0xa76b7030
  0xa76b7127: jmp    Stub::cipherBlockChaining_encryptAESCrypt+287 0x0xa76b6f1f

StubRoutines::cipherBlockChaining_decryptAESCrypt [0xa76b7140, 0xa76b7482[ (834 bytes)
  0xa76b7140: push   %ebp
  0xa76b7141: mov    %esp,%ebp
  0xa76b7143: sub    $0x10,%esp
  0xa76b7146: mov    %esi,-0x8(%ebp)
  0xa76b7149: mov    %edi,-0x4(%ebp)
  0xa76b714c: mov    %ebx,-0xc(%ebp)
  0xa76b714f: mov    0x8(%ebp),%esi
  0xa76b7152: mov    0xc(%ebp),%edx
  0xa76b7155: mov    0x10(%ebp),%ecx
  0xa76b7158: mov    0x14(%ebp),%edi
  0xa76b715b: mov    0x18(%ebp),%ebx
  0xa76b715e: vmovdqu 0xa76b6b60,%xmm1
  0xa76b7166: vmovdqu 0x10(%ecx),%xmm2
  0xa76b716b: vpshufb %xmm1,%xmm2,%xmm2
  0xa76b7170: vmovdqu 0x20(%ecx),%xmm3
  0xa76b7175: vpshufb %xmm1,%xmm3,%xmm3
  0xa76b717a: vmovdqu 0x30(%ecx),%xmm4
  0xa76b717f: vpshufb %xmm1,%xmm4,%xmm4
  0xa76b7184: vmovdqu 0x40(%ecx),%xmm5
  0xa76b7189: vpshufb %xmm1,%xmm5,%xmm5
  0xa76b718e: vmovdqu 0x50(%ecx),%xmm6
  0xa76b7193: vpshufb %xmm1,%xmm6,%xmm6
  0xa76b7198: vmovdqu 0x60(%ecx),%xmm7
  0xa76b719d: vpshufb %xmm1,%xmm7,%xmm7
  0xa76b71a2: mov    -0x4(%ecx),%eax
  0xa76b71a5: cmp    $0x2c,%eax
  0xa76b71a8: jne    Stub::cipherBlockChaining_decryptAESCrypt+328 0x0xa76b7288
  0xa76b71ae: mov    $0x0,%eax
  0xa76b71b3: nop
  0xa76b71b4: nop
  0xa76b71b5: nop
  0xa76b71b6: nop
  0xa76b71b7: nop
  0xa76b71b8: nop
  0xa76b71b9: nop
  0xa76b71ba: nop
  0xa76b71bb: nop
  0xa76b71bc: nop
  0xa76b71bd: nop
  0xa76b71be: nop
  0xa76b71bf: nop
  ;; L_singleBlock_loopTop_128:
  0xa76b71c0: cmp    $0x0,%ebx
  0xa76b71c3: je     Stub::cipherBlockChaining_decryptAESCrypt+301 0x0xa76b726d
  0xa76b71c9: vmovdqu (%esi,%eax,1),%xmm0
  0xa76b71ce: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b71d2: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b71d7: vaesdec %xmm4,%xmm0,%xmm0
  0xa76b71dc: vaesdec %xmm5,%xmm0,%xmm0
  0xa76b71e1: vaesdec %xmm6,%xmm0,%xmm0
  0xa76b71e6: vaesdec %xmm7,%xmm0,%xmm0
  0xa76b71eb: vmovdqu 0x70(%ecx),%xmm1
  0xa76b71f0: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b71f9: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b71fe: vmovdqu 0x80(%ecx),%xmm1
  0xa76b7206: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b720f: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b7214: vmovdqu 0x90(%ecx),%xmm1
  0xa76b721c: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7225: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b722a: vmovdqu 0xa0(%ecx),%xmm1
  0xa76b7232: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b723b: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b7240: vmovdqu (%ecx),%xmm1
  0xa76b7244: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b724d: vaesdeclast %xmm1,%xmm0,%xmm0
  0xa76b7252: vmovdqu (%edi),%xmm1
  0xa76b7256: vpxor  %xmm1,%xmm0,%xmm0
  0xa76b725a: vmovdqu %xmm0,(%edx,%eax,1)
  0xa76b725f: lea    (%esi,%eax,1),%edi
  0xa76b7262: add    $0x10,%eax
  0xa76b7265: sub    $0x10,%ebx
  0xa76b7268: jmp    Stub::cipherBlockChaining_decryptAESCrypt+128 0x0xa76b71c0
  ;; L_exit:
  0xa76b726d: vmovdqu (%edi),%xmm1
  0xa76b7271: mov    0x14(%ebp),%edi
  0xa76b7274: vmovdqu %xmm1,(%edi)
  0xa76b7278: mov    -0x8(%ebp),%esi
  0xa76b727b: mov    -0x4(%ebp),%edi
  0xa76b727e: mov    -0xc(%ebp),%ebx
  0xa76b7281: mov    0x18(%ebp),%eax
  0xa76b7284: mov    %ebp,%esp
  0xa76b7286: pop    %ebp
  0xa76b7287: ret    
  ;; L_key_192_256:
  0xa76b7288: cmp    $0x34,%eax
  0xa76b728b: jne    Stub::cipherBlockChaining_decryptAESCrypt+566 0x0xa76b7376
  0xa76b7291: mov    $0x0,%eax
  0xa76b7296: nop
  0xa76b7297: nop
  0xa76b7298: nop
  0xa76b7299: nop
  0xa76b729a: nop
  0xa76b729b: nop
  0xa76b729c: nop
  0xa76b729d: nop
  0xa76b729e: nop
  0xa76b729f: nop
  ;; L_singleBlock_loopTop_192:
  0xa76b72a0: vmovdqu (%esi,%eax,1),%xmm0
  0xa76b72a5: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b72a9: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b72ae: vaesdec %xmm4,%xmm0,%xmm0
  0xa76b72b3: vaesdec %xmm5,%xmm0,%xmm0
  0xa76b72b8: vaesdec %xmm6,%xmm0,%xmm0
  0xa76b72bd: vaesdec %xmm7,%xmm0,%xmm0
  0xa76b72c2: vmovdqu 0x70(%ecx),%xmm1
  0xa76b72c7: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b72d0: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b72d5: vmovdqu 0x80(%ecx),%xmm1
  0xa76b72dd: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b72e6: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b72eb: vmovdqu 0x90(%ecx),%xmm1
  0xa76b72f3: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b72fc: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b7301: vmovdqu 0xa0(%ecx),%xmm1
  0xa76b7309: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7312: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b7317: vmovdqu 0xb0(%ecx),%xmm1
  0xa76b731f: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7328: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b732d: vmovdqu 0xc0(%ecx),%xmm1
  0xa76b7335: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b733e: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b7343: vmovdqu (%ecx),%xmm1
  0xa76b7347: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7350: vaesdeclast %xmm1,%xmm0,%xmm0
  0xa76b7355: vmovdqu (%edi),%xmm1
  0xa76b7359: vpxor  %xmm1,%xmm0,%xmm0
  0xa76b735d: vmovdqu %xmm0,(%edx,%eax,1)
  0xa76b7362: lea    (%esi,%eax,1),%edi
  0xa76b7365: add    $0x10,%eax
  0xa76b7368: sub    $0x10,%ebx
  0xa76b736b: jne    Stub::cipherBlockChaining_decryptAESCrypt+352 0x0xa76b72a0
  0xa76b7371: jmp    Stub::cipherBlockChaining_decryptAESCrypt+301 0x0xa76b726d
  ;; L_key_256:
  0xa76b7376: mov    $0x0,%eax
  0xa76b737b: nop
  0xa76b737c: nop
  0xa76b737d: nop
  0xa76b737e: nop
  0xa76b737f: nop
  ;; L_singleBlock_loopTop_256:
  0xa76b7380: vmovdqu (%esi,%eax,1),%xmm0
  0xa76b7385: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b7389: vaesdec %xmm3,%xmm0,%xmm0
  0xa76b738e: vaesdec %xmm4,%xmm0,%xmm0
  0xa76b7393: vaesdec %xmm5,%xmm0,%xmm0
  0xa76b7398: vaesdec %xmm6,%xmm0,%xmm0
  0xa76b739d: vaesdec %xmm7,%xmm0,%xmm0
  0xa76b73a2: vmovdqu 0x70(%ecx),%xmm1
  0xa76b73a7: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b73b0: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b73b5: vmovdqu 0x80(%ecx),%xmm1
  0xa76b73bd: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b73c6: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b73cb: vmovdqu 0x90(%ecx),%xmm1
  0xa76b73d3: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b73dc: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b73e1: vmovdqu 0xa0(%ecx),%xmm1
  0xa76b73e9: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b73f2: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b73f7: vmovdqu 0xb0(%ecx),%xmm1
  0xa76b73ff: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7408: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b740d: vmovdqu 0xc0(%ecx),%xmm1
  0xa76b7415: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b741e: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b7423: vmovdqu 0xd0(%ecx),%xmm1
  0xa76b742b: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b7434: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b7439: vmovdqu 0xe0(%ecx),%xmm1
  0xa76b7441: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b744a: vaesdec %xmm1,%xmm0,%xmm0
  0xa76b744f: vmovdqu (%ecx),%xmm1
  0xa76b7453: vpshufb 0xa76b6b60,%xmm1,%xmm1
  0xa76b745c: vaesdeclast %xmm1,%xmm0,%xmm0
  0xa76b7461: vmovdqu (%edi),%xmm1
  0xa76b7465: vpxor  %xmm1,%xmm0,%xmm0
  0xa76b7469: vmovdqu %xmm0,(%edx,%eax,1)
  0xa76b746e: lea    (%esi,%eax,1),%edi
  0xa76b7471: add    $0x10,%eax
  0xa76b7474: sub    $0x10,%ebx
  0xa76b7477: jne    Stub::cipherBlockChaining_decryptAESCrypt+576 0x0xa76b7380
  0xa76b747d: jmp    Stub::cipherBlockChaining_decryptAESCrypt+301 0x0xa76b726d

StubRoutines::ghash_long_swap_mask [0xa76b74a0, 0xa76b74b0[ (16 bytes)
  0xa76b74a0: or     %cl,(%ecx)
  0xa76b74a2: or     (%ebx),%cl
  0xa76b74a4: or     $0xd,%al
  0xa76b74a6: push   %cs
  0xa76b74a7: sldt   (%ecx)
  0xa76b74aa: add    (%ebx),%al
  0xa76b74ac: add    $0x5,%al
  0xa76b74ae: push   %es
  0xa76b74af: pop    %es

StubRoutines::ghash_byte_swap_mask [0xa76b74c0, 0xa76b74d0[ (16 bytes)
  0xa76b74c0: femms  
  0xa76b74c2: or     $0x90a0b0c,%eax
  0xa76b74c7: or     %al,(%edi)
  0xa76b74c9: push   %es
  0xa76b74ca: add    $0x1020304,%eax
  0xa76b74cf: .byte 0x0

StubRoutines::ghash_processBlocks [0xa76b74e0, 0xa76b7634[ (340 bytes)
  0xa76b74e0: push   %ebp
  0xa76b74e1: mov    %esp,%ebp
  0xa76b74e3: sub    $0x10,%esp
  0xa76b74e6: mov    %esi,-0x8(%ebp)
  0xa76b74e9: mov    %edi,-0x4(%ebp)
  0xa76b74ec: mov    %ebx,-0xc(%ebp)
  0xa76b74ef: mov    0x8(%ebp),%edi
  0xa76b74f2: mov    0xc(%ebp),%esi
  0xa76b74f5: mov    0x10(%ebp),%edx
  0xa76b74f8: mov    0x14(%ebp),%ecx
  0xa76b74fb: vmovdqu (%edi),%xmm0
  0xa76b74ff: vpshufb 0xa76b74a0,%xmm0,%xmm0
  0xa76b7508: vmovdqu (%esi),%xmm1
  0xa76b750c: vpshufb 0xa76b74a0,%xmm1,%xmm1
  ;; L_ghash_loop:
  0xa76b7515: vmovdqu (%edx),%xmm2
  0xa76b7519: vpshufb 0xa76b74c0,%xmm2,%xmm2
  0xa76b7522: vpxor  %xmm2,%xmm0,%xmm0
  0xa76b7526: vmovdqu %xmm0,%xmm3
  0xa76b752a: vpclmullqlqdq %xmm1,%xmm3,%xmm3
  0xa76b7530: vmovdqu %xmm0,%xmm4
  0xa76b7534: vpclmullqhqdq %xmm1,%xmm4,%xmm4
  0xa76b753a: vmovdqu %xmm0,%xmm5
  0xa76b753e: vpclmulhqlqdq %xmm1,%xmm5,%xmm5
  0xa76b7544: vmovdqu %xmm0,%xmm6
  0xa76b7548: vpclmulhqhqdq %xmm1,%xmm6,%xmm6
  0xa76b754e: vpxor  %xmm5,%xmm4,%xmm4
  0xa76b7552: vmovdqu %xmm4,%xmm5
  0xa76b7556: vpsrldq $0x8,%xmm4,%xmm4
  0xa76b755b: vpslldq $0x8,%xmm5,%xmm5
  0xa76b7560: vpxor  %xmm5,%xmm3,%xmm3
  0xa76b7564: vpxor  %xmm4,%xmm6,%xmm6
  0xa76b7568: vmovdqu %xmm3,%xmm7
  0xa76b756c: vmovdqu %xmm6,%xmm4
  0xa76b7570: vpslld $0x1,%xmm3,%xmm3
  0xa76b7575: vpslld $0x1,%xmm6,%xmm6
  0xa76b757a: vpsrld $0x1f,%xmm7,%xmm7
  0xa76b757f: vpsrld $0x1f,%xmm4,%xmm4
  0xa76b7584: vmovdqu %xmm7,%xmm5
  0xa76b7588: vpslldq $0x4,%xmm4,%xmm4
  0xa76b758d: vpslldq $0x4,%xmm7,%xmm7
  0xa76b7592: vpsrldq $0xc,%xmm5,%xmm5
  0xa76b7597: vpor   %xmm7,%xmm3,%xmm3
  0xa76b759b: vpor   %xmm4,%xmm6,%xmm6
  0xa76b759f: vpor   %xmm5,%xmm6,%xmm6
  0xa76b75a3: vmovdqu %xmm3,%xmm7
  0xa76b75a7: vmovdqu %xmm3,%xmm4
  0xa76b75ab: vmovdqu %xmm3,%xmm5
  0xa76b75af: vpslld $0x1f,%xmm7,%xmm7
  0xa76b75b4: vpslld $0x1e,%xmm4,%xmm4
  0xa76b75b9: vpslld $0x19,%xmm5,%xmm5
  0xa76b75be: vpxor  %xmm4,%xmm7,%xmm7
  0xa76b75c2: vpxor  %xmm5,%xmm7,%xmm7
  0xa76b75c6: vmovdqu %xmm7,%xmm4
  0xa76b75ca: vpslldq $0xc,%xmm7,%xmm7
  0xa76b75cf: vpsrldq $0x4,%xmm4,%xmm4
  0xa76b75d4: vpxor  %xmm7,%xmm3,%xmm3
  0xa76b75d8: vmovdqu %xmm3,%xmm2
  0xa76b75dc: vmovdqu %xmm3,%xmm7
  0xa76b75e0: vmovdqu %xmm3,%xmm5
  0xa76b75e4: vpsrld $0x1,%xmm2,%xmm2
  0xa76b75e9: vpsrld $0x2,%xmm7,%xmm7
  0xa76b75ee: vpsrld $0x7,%xmm5,%xmm5
  0xa76b75f3: vpxor  %xmm7,%xmm2,%xmm2
  0xa76b75f7: vpxor  %xmm5,%xmm2,%xmm2
  0xa76b75fb: vpxor  %xmm4,%xmm2,%xmm2
  0xa76b75ff: vpxor  %xmm2,%xmm3,%xmm3
  0xa76b7603: vpxor  %xmm3,%xmm6,%xmm6
  0xa76b7607: dec    %ecx
  0xa76b7608: je     Stub::ghash_processBlocks+314 0x0xa76b761a
  0xa76b760e: vmovdqu %xmm6,%xmm0
  0xa76b7612: add    $0x10,%edx
  0xa76b7615: jmp    Stub::ghash_processBlocks+53 0x0xa76b7515
  ;; L_exit:
  0xa76b761a: vpshufb 0xa76b74a0,%xmm6,%xmm6
  0xa76b7623: vmovdqu %xmm6,(%edi)
  0xa76b7627: mov    -0x8(%ebp),%esi
  0xa76b762a: mov    -0x4(%ebp),%edi
  0xa76b762d: mov    -0xc(%ebp),%ebx
  0xa76b7630: mov    %ebp,%esp
  0xa76b7632: pop    %ebp
  0xa76b7633: ret    

StubRoutines::SafeFetch32 [0xa76b7634, 0xa76b763f[ (11 bytes)
  0xa76b7634: mov    0x8(%esp),%eax
  0xa76b7638: mov    0x4(%esp),%ecx
  0xa76b763c: mov    (%ecx),%eax
  0xa76b763e: ret    

AHE@0xb6690448: 0xa0000000 i2c: 0xa76ba4c0 c2i: 0xa76ba567 c2iUV: 0xa76ba546
i2c argument handler #0 for: receiver ()Ljava/util/Spliterator$OfInt; (240 bytes generated)
c2i argument handler starts at 0xa76ba567
  0xa76ba4c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76ba4c3: mov    $0xa75b1ac0,%edi
  0xa76ba4c8: cmp    %edi,%eax
  0xa76ba4ca: jbe    0xa76ba4dd
  0xa76ba4d0: mov    $0xa7691ac0,%edi
  0xa76ba4d5: cmp    %edi,%eax
  0xa76ba4d7: jb     0xa76ba522
  0xa76ba4dd: mov    $0xa75af400,%edi
  0xa76ba4e2: cmp    %edi,%eax
  0xa76ba4e4: jbe    0xa76ba4f7
  0xa76ba4ea: mov    $0xa75b1728,%edi
  0xa76ba4ef: cmp    %edi,%eax
  0xa76ba4f1: jb     0xa76ba522
  0xa76ba4f7: mov    $0xa76b4e40,%edi
  0xa76ba4fc: cmp    %edi,%eax
  0xa76ba4fe: jbe    0xa76ba511
  0xa76ba504: mov    $0xa76ba430,%edi
  0xa76ba509: cmp    %edi,%eax
  0xa76ba50b: jb     0xa76ba522
  ;; i2c adapter must return to an interpreter frame
  0xa76ba511: push   $0xb75a2830
  0xa76ba516: call   0xa76ba51b
  0xa76ba51b: pusha  
  0xa76ba51c: call   0xb7052f32
  0xa76ba521: hlt    
  ;; } verify_i2ce 
  0xa76ba522: mov    %esp,%edi
  0xa76ba524: and    $0xfffffff0,%esp
  0xa76ba527: push   %eax
  0xa76ba528: mov    %edi,%eax
  0xa76ba52a: mov    0x30(%ebx),%edi
  0xa76ba52d: mov    0x4(%eax),%ecx
  0xa76ba530: mov    %esp,%eax
  0xa76ba532: shr    $0xc,%eax
  0xa76ba535: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ba53c: mov    %ebx,0x16c(%eax)
  0xa76ba542: mov    %ebx,%eax
  0xa76ba544: jmp    *%edi
  0xa76ba546: mov    0x4(%ecx),%ebx
  0xa76ba549: cmp    0x8(%eax),%ebx
  0xa76ba54c: mov    0x4(%eax),%ebx
  0xa76ba54f: jne    0xa76ba562
  0xa76ba555: cmpl   $0x0,0x34(%ebx)
  0xa76ba55c: je     0xa76ba5a1
  0xa76ba562: jmp    0xa7692560
  0xa76ba567: cmpl   $0x0,0x34(%ebx)
  0xa76ba56e: je     0xa76ba5a1
  0xa76ba574: mov    (%esp),%eax
  0xa76ba577: pusha  
  0xa76ba578: pushf  
  0xa76ba579: sub    $0x10,%esp
  0xa76ba57c: vmovsd %xmm0,(%esp)
  0xa76ba581: vmovsd %xmm1,0x8(%esp)
  0xa76ba587: push   %eax
  0xa76ba588: push   %ebx
  0xa76ba589: call   0xb71d62fc
  0xa76ba58e: add    $0x8,%esp
  0xa76ba591: vmovsd (%esp),%xmm0
  0xa76ba596: vmovsd 0x8(%esp),%xmm1
  0xa76ba59c: add    $0x10,%esp
  0xa76ba59f: popf   
  0xa76ba5a0: popa   
  0xa76ba5a1: pop    %eax
  0xa76ba5a2: mov    %esp,%esi
  0xa76ba5a4: sub    $0x4,%esp
  0xa76ba5a7: mov    %ecx,(%esp)
  0xa76ba5aa: mov    0x28(%ebx),%ecx
  0xa76ba5ad: push   %eax
  0xa76ba5ae: jmp    *%ecx

AHE@0xb669046c: 0xaaa00000 i2c: 0xa76baa00 c2i: 0xa76baab4 c2iUV: 0xa76baa93
i2c argument handler #1 for: static ([CII)Ljava/lang/String; (265 bytes generated)
c2i argument handler starts at 0xa76baab4
  0xa76baa00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76baa03: mov    $0xa75b1ac0,%edi
  0xa76baa08: cmp    %edi,%eax
  0xa76baa0a: jbe    0xa76baa1d
  0xa76baa10: mov    $0xa7691ac0,%edi
  0xa76baa15: cmp    %edi,%eax
  0xa76baa17: jb     0xa76baa62
  0xa76baa1d: mov    $0xa75af400,%edi
  0xa76baa22: cmp    %edi,%eax
  0xa76baa24: jbe    0xa76baa37
  0xa76baa2a: mov    $0xa75b1728,%edi
  0xa76baa2f: cmp    %edi,%eax
  0xa76baa31: jb     0xa76baa62
  0xa76baa37: mov    $0xa76b4e40,%edi
  0xa76baa3c: cmp    %edi,%eax
  0xa76baa3e: jbe    0xa76baa51
  0xa76baa44: mov    $0xa76ba430,%edi
  0xa76baa49: cmp    %edi,%eax
  0xa76baa4b: jb     0xa76baa62
  ;; i2c adapter must return to an interpreter frame
  0xa76baa51: push   $0xb75a2830
  0xa76baa56: call   0xa76baa5b
  0xa76baa5b: pusha  
  0xa76baa5c: call   0xb7052f32
  0xa76baa61: hlt    
  ;; } verify_i2ce 
  0xa76baa62: mov    %esp,%edi
  0xa76baa64: sub    $0x8,%esp
  0xa76baa67: and    $0xfffffff0,%esp
  0xa76baa6a: push   %eax
  0xa76baa6b: mov    %edi,%eax
  0xa76baa6d: mov    0x30(%ebx),%edi
  0xa76baa70: mov    0xc(%eax),%ecx
  0xa76baa73: mov    0x8(%eax),%edx
  0xa76baa76: mov    0x4(%eax),%esi
  0xa76baa79: mov    %esi,0x4(%esp)
  0xa76baa7d: mov    %esp,%eax
  0xa76baa7f: shr    $0xc,%eax
  0xa76baa82: mov    -0x486bdba0(,%eax,4),%eax
  0xa76baa89: mov    %ebx,0x16c(%eax)
  0xa76baa8f: mov    %ebx,%eax
  0xa76baa91: jmp    *%edi
  0xa76baa93: mov    0x4(%ecx),%ebx
  0xa76baa96: cmp    0x8(%eax),%ebx
  0xa76baa99: mov    0x4(%eax),%ebx
  0xa76baa9c: jne    0xa76baaaf
  0xa76baaa2: cmpl   $0x0,0x34(%ebx)
  0xa76baaa9: je     0xa76baaee
  0xa76baaaf: jmp    0xa7692560
  0xa76baab4: cmpl   $0x0,0x34(%ebx)
  0xa76baabb: je     0xa76baaee
  0xa76baac1: mov    (%esp),%eax
  0xa76baac4: pusha  
  0xa76baac5: pushf  
  0xa76baac6: sub    $0x10,%esp
  0xa76baac9: vmovsd %xmm0,(%esp)
  0xa76baace: vmovsd %xmm1,0x8(%esp)
  0xa76baad4: push   %eax
  0xa76baad5: push   %ebx
  0xa76baad6: call   0xb71d62fc
  0xa76baadb: add    $0x8,%esp
  0xa76baade: vmovsd (%esp),%xmm0
  0xa76baae3: vmovsd 0x8(%esp),%xmm1
  0xa76baae9: add    $0x10,%esp
  0xa76baaec: popf   
  0xa76baaed: popa   
  0xa76baaee: pop    %eax
  0xa76baaef: mov    %esp,%esi
  0xa76baaf1: sub    $0xc,%esp
  0xa76baaf4: mov    %ecx,0x8(%esp)
  0xa76baaf8: mov    %edx,0x4(%esp)
  0xa76baafc: mov    0xc(%esp),%edi
  0xa76bab00: mov    %edi,(%esp)
  0xa76bab03: mov    0x28(%ebx),%ecx
  0xa76bab06: push   %eax
  0xa76bab07: jmp    *%ecx

AHE@0xb6690490: 0xaa000000 i2c: 0xa76babc0 c2i: 0xa76bac6a c2iUV: 0xa76bac49
i2c argument handler #2 for: receiver (Ljava/util/Locale;)Ljava/lang/String; (247 bytes generated)
c2i argument handler starts at 0xa76bac6a
  0xa76babc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76babc3: mov    $0xa75b1ac0,%edi
  0xa76babc8: cmp    %edi,%eax
  0xa76babca: jbe    0xa76babdd
  0xa76babd0: mov    $0xa7691ac0,%edi
  0xa76babd5: cmp    %edi,%eax
  0xa76babd7: jb     0xa76bac22
  0xa76babdd: mov    $0xa75af400,%edi
  0xa76babe2: cmp    %edi,%eax
  0xa76babe4: jbe    0xa76babf7
  0xa76babea: mov    $0xa75b1728,%edi
  0xa76babef: cmp    %edi,%eax
  0xa76babf1: jb     0xa76bac22
  0xa76babf7: mov    $0xa76b4e40,%edi
  0xa76babfc: cmp    %edi,%eax
  0xa76babfe: jbe    0xa76bac11
  0xa76bac04: mov    $0xa76ba430,%edi
  0xa76bac09: cmp    %edi,%eax
  0xa76bac0b: jb     0xa76bac22
  ;; i2c adapter must return to an interpreter frame
  0xa76bac11: push   $0xb75a2830
  0xa76bac16: call   0xa76bac1b
  0xa76bac1b: pusha  
  0xa76bac1c: call   0xb7052f32
  0xa76bac21: hlt    
  ;; } verify_i2ce 
  0xa76bac22: mov    %esp,%edi
  0xa76bac24: and    $0xfffffff0,%esp
  0xa76bac27: push   %eax
  0xa76bac28: mov    %edi,%eax
  0xa76bac2a: mov    0x30(%ebx),%edi
  0xa76bac2d: mov    0x8(%eax),%ecx
  0xa76bac30: mov    0x4(%eax),%edx
  0xa76bac33: mov    %esp,%eax
  0xa76bac35: shr    $0xc,%eax
  0xa76bac38: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bac3f: mov    %ebx,0x16c(%eax)
  0xa76bac45: mov    %ebx,%eax
  0xa76bac47: jmp    *%edi
  0xa76bac49: mov    0x4(%ecx),%ebx
  0xa76bac4c: cmp    0x8(%eax),%ebx
  0xa76bac4f: mov    0x4(%eax),%ebx
  0xa76bac52: jne    0xa76bac65
  0xa76bac58: cmpl   $0x0,0x34(%ebx)
  0xa76bac5f: je     0xa76baca4
  0xa76bac65: jmp    0xa7692560
  0xa76bac6a: cmpl   $0x0,0x34(%ebx)
  0xa76bac71: je     0xa76baca4
  0xa76bac77: mov    (%esp),%eax
  0xa76bac7a: pusha  
  0xa76bac7b: pushf  
  0xa76bac7c: sub    $0x10,%esp
  0xa76bac7f: vmovsd %xmm0,(%esp)
  0xa76bac84: vmovsd %xmm1,0x8(%esp)
  0xa76bac8a: push   %eax
  0xa76bac8b: push   %ebx
  0xa76bac8c: call   0xb71d62fc
  0xa76bac91: add    $0x8,%esp
  0xa76bac94: vmovsd (%esp),%xmm0
  0xa76bac99: vmovsd 0x8(%esp),%xmm1
  0xa76bac9f: add    $0x10,%esp
  0xa76baca2: popf   
  0xa76baca3: popa   
  0xa76baca4: pop    %eax
  0xa76baca5: mov    %esp,%esi
  0xa76baca7: sub    $0x8,%esp
  0xa76bacaa: mov    %ecx,0x4(%esp)
  0xa76bacae: mov    %edx,(%esp)
  0xa76bacb1: mov    0x28(%ebx),%ecx
  0xa76bacb4: push   %eax
  0xa76bacb5: jmp    *%ecx

AHE@0xb66904b4: 0xaaaaaaa0 i2c: 0xa76bad40 c2i: 0xa76bae10 c2iUV: 0xa76badef
i2c argument handler #3 for: static ([CII[CIII)I (325 bytes generated)
c2i argument handler starts at 0xa76bae10
  0xa76bad40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76bad43: mov    $0xa75b1ac0,%edi
  0xa76bad48: cmp    %edi,%eax
  0xa76bad4a: jbe    0xa76bad5d
  0xa76bad50: mov    $0xa7691ac0,%edi
  0xa76bad55: cmp    %edi,%eax
  0xa76bad57: jb     0xa76bada2
  0xa76bad5d: mov    $0xa75af400,%edi
  0xa76bad62: cmp    %edi,%eax
  0xa76bad64: jbe    0xa76bad77
  0xa76bad6a: mov    $0xa75b1728,%edi
  0xa76bad6f: cmp    %edi,%eax
  0xa76bad71: jb     0xa76bada2
  0xa76bad77: mov    $0xa76b4e40,%edi
  0xa76bad7c: cmp    %edi,%eax
  0xa76bad7e: jbe    0xa76bad91
  0xa76bad84: mov    $0xa76ba430,%edi
  0xa76bad89: cmp    %edi,%eax
  0xa76bad8b: jb     0xa76bada2
  ;; i2c adapter must return to an interpreter frame
  0xa76bad91: push   $0xb75a2830
  0xa76bad96: call   0xa76bad9b
  0xa76bad9b: pusha  
  0xa76bad9c: call   0xb7052f32
  0xa76bada1: hlt    
  ;; } verify_i2ce 
  0xa76bada2: mov    %esp,%edi
  0xa76bada4: sub    $0x18,%esp
  0xa76bada7: and    $0xfffffff0,%esp
  0xa76badaa: push   %eax
  0xa76badab: mov    %edi,%eax
  0xa76badad: mov    0x30(%ebx),%edi
  0xa76badb0: mov    0x1c(%eax),%ecx
  0xa76badb3: mov    0x18(%eax),%edx
  0xa76badb6: mov    0x14(%eax),%esi
  0xa76badb9: mov    %esi,0x4(%esp)
  0xa76badbd: mov    0x10(%eax),%esi
  0xa76badc0: mov    %esi,0x8(%esp)
  0xa76badc4: mov    0xc(%eax),%esi
  0xa76badc7: mov    %esi,0xc(%esp)
  0xa76badcb: mov    0x8(%eax),%esi
  0xa76badce: mov    %esi,0x10(%esp)
  0xa76badd2: mov    0x4(%eax),%esi
  0xa76badd5: mov    %esi,0x14(%esp)
  0xa76badd9: mov    %esp,%eax
  0xa76baddb: shr    $0xc,%eax
  0xa76badde: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bade5: mov    %ebx,0x16c(%eax)
  0xa76badeb: mov    %ebx,%eax
  0xa76baded: jmp    *%edi
  0xa76badef: mov    0x4(%ecx),%ebx
  0xa76badf2: cmp    0x8(%eax),%ebx
  0xa76badf5: mov    0x4(%eax),%ebx
  0xa76badf8: jne    0xa76bae0b
  0xa76badfe: cmpl   $0x0,0x34(%ebx)
  0xa76bae05: je     0xa76bae4a
  0xa76bae0b: jmp    0xa7692560
  0xa76bae10: cmpl   $0x0,0x34(%ebx)
  0xa76bae17: je     0xa76bae4a
  0xa76bae1d: mov    (%esp),%eax
  0xa76bae20: pusha  
  0xa76bae21: pushf  
  0xa76bae22: sub    $0x10,%esp
  0xa76bae25: vmovsd %xmm0,(%esp)
  0xa76bae2a: vmovsd %xmm1,0x8(%esp)
  0xa76bae30: push   %eax
  0xa76bae31: push   %ebx
  0xa76bae32: call   0xb71d62fc
  0xa76bae37: add    $0x8,%esp
  0xa76bae3a: vmovsd (%esp),%xmm0
  0xa76bae3f: vmovsd 0x8(%esp),%xmm1
  0xa76bae45: add    $0x10,%esp
  0xa76bae48: popf   
  0xa76bae49: popa   
  0xa76bae4a: pop    %eax
  0xa76bae4b: mov    %esp,%esi
  0xa76bae4d: sub    $0x1c,%esp
  0xa76bae50: mov    %ecx,0x18(%esp)
  0xa76bae54: mov    %edx,0x14(%esp)
  0xa76bae58: mov    0x1c(%esp),%edi
  0xa76bae5c: mov    %edi,0x10(%esp)
  0xa76bae60: mov    0x20(%esp),%edi
  0xa76bae64: mov    %edi,0xc(%esp)
  0xa76bae68: mov    0x24(%esp),%edi
  0xa76bae6c: mov    %edi,0x8(%esp)
  0xa76bae70: mov    0x28(%esp),%edi
  0xa76bae74: mov    %edi,0x4(%esp)
  0xa76bae78: mov    0x2c(%esp),%edi
  0xa76bae7c: mov    %edi,(%esp)
  0xa76bae7f: mov    0x28(%ebx),%ecx
  0xa76bae82: push   %eax
  0xa76bae83: jmp    *%ecx

AHE@0xb66904d8: 0xaaaaa000 i2c: 0xa76baf40 c2i: 0xa76bb002 c2iUV: 0xa76bafe1
i2c argument handler #4 for: static ([CIILjava/lang/String;I)I (295 bytes generated)
c2i argument handler starts at 0xa76bb002
  0xa76baf40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76baf43: mov    $0xa75b1ac0,%edi
  0xa76baf48: cmp    %edi,%eax
  0xa76baf4a: jbe    0xa76baf5d
  0xa76baf50: mov    $0xa7691ac0,%edi
  0xa76baf55: cmp    %edi,%eax
  0xa76baf57: jb     0xa76bafa2
  0xa76baf5d: mov    $0xa75af400,%edi
  0xa76baf62: cmp    %edi,%eax
  0xa76baf64: jbe    0xa76baf77
  0xa76baf6a: mov    $0xa75b1728,%edi
  0xa76baf6f: cmp    %edi,%eax
  0xa76baf71: jb     0xa76bafa2
  0xa76baf77: mov    $0xa76b4e40,%edi
  0xa76baf7c: cmp    %edi,%eax
  0xa76baf7e: jbe    0xa76baf91
  0xa76baf84: mov    $0xa76ba430,%edi
  0xa76baf89: cmp    %edi,%eax
  0xa76baf8b: jb     0xa76bafa2
  ;; i2c adapter must return to an interpreter frame
  0xa76baf91: push   $0xb75a2830
  0xa76baf96: call   0xa76baf9b
  0xa76baf9b: pusha  
  0xa76baf9c: call   0xb7052f32
  0xa76bafa1: hlt    
  ;; } verify_i2ce 
  0xa76bafa2: mov    %esp,%edi
  0xa76bafa4: sub    $0x10,%esp
  0xa76bafa7: and    $0xfffffff0,%esp
  0xa76bafaa: push   %eax
  0xa76bafab: mov    %edi,%eax
  0xa76bafad: mov    0x30(%ebx),%edi
  0xa76bafb0: mov    0x14(%eax),%ecx
  0xa76bafb3: mov    0x10(%eax),%edx
  0xa76bafb6: mov    0xc(%eax),%esi
  0xa76bafb9: mov    %esi,0x4(%esp)
  0xa76bafbd: mov    0x8(%eax),%esi
  0xa76bafc0: mov    %esi,0x8(%esp)
  0xa76bafc4: mov    0x4(%eax),%esi
  0xa76bafc7: mov    %esi,0xc(%esp)
  0xa76bafcb: mov    %esp,%eax
  0xa76bafcd: shr    $0xc,%eax
  0xa76bafd0: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bafd7: mov    %ebx,0x16c(%eax)
  0xa76bafdd: mov    %ebx,%eax
  0xa76bafdf: jmp    *%edi
  0xa76bafe1: mov    0x4(%ecx),%ebx
  0xa76bafe4: cmp    0x8(%eax),%ebx
  0xa76bafe7: mov    0x4(%eax),%ebx
  0xa76bafea: jne    0xa76baffd
  0xa76baff0: cmpl   $0x0,0x34(%ebx)
  0xa76baff7: je     0xa76bb03c
  0xa76baffd: jmp    0xa7692560
  0xa76bb002: cmpl   $0x0,0x34(%ebx)
  0xa76bb009: je     0xa76bb03c
  0xa76bb00f: mov    (%esp),%eax
  0xa76bb012: pusha  
  0xa76bb013: pushf  
  0xa76bb014: sub    $0x10,%esp
  0xa76bb017: vmovsd %xmm0,(%esp)
  0xa76bb01c: vmovsd %xmm1,0x8(%esp)
  0xa76bb022: push   %eax
  0xa76bb023: push   %ebx
  0xa76bb024: call   0xb71d62fc
  0xa76bb029: add    $0x8,%esp
  0xa76bb02c: vmovsd (%esp),%xmm0
  0xa76bb031: vmovsd 0x8(%esp),%xmm1
  0xa76bb037: add    $0x10,%esp
  0xa76bb03a: popf   
  0xa76bb03b: popa   
  0xa76bb03c: pop    %eax
  0xa76bb03d: mov    %esp,%esi
  0xa76bb03f: sub    $0x14,%esp
  0xa76bb042: mov    %ecx,0x10(%esp)
  0xa76bb046: mov    %edx,0xc(%esp)
  0xa76bb04a: mov    0x14(%esp),%edi
  0xa76bb04e: mov    %edi,0x8(%esp)
  0xa76bb052: mov    0x18(%esp),%edi
  0xa76bb056: mov    %edi,0x4(%esp)
  0xa76bb05a: mov    0x1c(%esp),%edi
  0xa76bb05e: mov    %edi,(%esp)
  0xa76bb061: mov    0x28(%ebx),%ecx
  0xa76bb064: push   %eax
  0xa76bb065: jmp    *%ecx

AHE@0xb66904fc: 0xaaaaaa00 i2c: 0xa76bb100 c2i: 0xa76bb1c9 c2iUV: 0xa76bb1a8
i2c argument handler #5 for: receiver (ZILjava/lang/String;II)Z (310 bytes generated)
c2i argument handler starts at 0xa76bb1c9
  0xa76bb100: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76bb103: mov    $0xa75b1ac0,%edi
  0xa76bb108: cmp    %edi,%eax
  0xa76bb10a: jbe    0xa76bb11d
  0xa76bb110: mov    $0xa7691ac0,%edi
  0xa76bb115: cmp    %edi,%eax
  0xa76bb117: jb     0xa76bb162
  0xa76bb11d: mov    $0xa75af400,%edi
  0xa76bb122: cmp    %edi,%eax
  0xa76bb124: jbe    0xa76bb137
  0xa76bb12a: mov    $0xa75b1728,%edi
  0xa76bb12f: cmp    %edi,%eax
  0xa76bb131: jb     0xa76bb162
  0xa76bb137: mov    $0xa76b4e40,%edi
  0xa76bb13c: cmp    %edi,%eax
  0xa76bb13e: jbe    0xa76bb151
  0xa76bb144: mov    $0xa76ba430,%edi
  0xa76bb149: cmp    %edi,%eax
  0xa76bb14b: jb     0xa76bb162
  ;; i2c adapter must return to an interpreter frame
  0xa76bb151: push   $0xb75a2830
  0xa76bb156: call   0xa76bb15b
  0xa76bb15b: pusha  
  0xa76bb15c: call   0xb7052f32
  0xa76bb161: hlt    
  ;; } verify_i2ce 
  0xa76bb162: mov    %esp,%edi
  0xa76bb164: sub    $0x10,%esp
  0xa76bb167: and    $0xfffffff0,%esp
  0xa76bb16a: push   %eax
  0xa76bb16b: mov    %edi,%eax
  0xa76bb16d: mov    0x30(%ebx),%edi
  0xa76bb170: mov    0x18(%eax),%ecx
  0xa76bb173: mov    0x14(%eax),%edx
  0xa76bb176: mov    0x10(%eax),%esi
  0xa76bb179: mov    %esi,0x4(%esp)
  0xa76bb17d: mov    0xc(%eax),%esi
  0xa76bb180: mov    %esi,0x8(%esp)
  0xa76bb184: mov    0x8(%eax),%esi
  0xa76bb187: mov    %esi,0xc(%esp)
  0xa76bb18b: mov    0x4(%eax),%esi
  0xa76bb18e: mov    %esi,0x10(%esp)
  0xa76bb192: mov    %esp,%eax
  0xa76bb194: shr    $0xc,%eax
  0xa76bb197: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bb19e: mov    %ebx,0x16c(%eax)
  0xa76bb1a4: mov    %ebx,%eax
  0xa76bb1a6: jmp    *%edi
  0xa76bb1a8: mov    0x4(%ecx),%ebx
  0xa76bb1ab: cmp    0x8(%eax),%ebx
  0xa76bb1ae: mov    0x4(%eax),%ebx
  0xa76bb1b1: jne    0xa76bb1c4
  0xa76bb1b7: cmpl   $0x0,0x34(%ebx)
  0xa76bb1be: je     0xa76bb203
  0xa76bb1c4: jmp    0xa7692560
  0xa76bb1c9: cmpl   $0x0,0x34(%ebx)
  0xa76bb1d0: je     0xa76bb203
  0xa76bb1d6: mov    (%esp),%eax
  0xa76bb1d9: pusha  
  0xa76bb1da: pushf  
  0xa76bb1db: sub    $0x10,%esp
  0xa76bb1de: vmovsd %xmm0,(%esp)
  0xa76bb1e3: vmovsd %xmm1,0x8(%esp)
  0xa76bb1e9: push   %eax
  0xa76bb1ea: push   %ebx
  0xa76bb1eb: call   0xb71d62fc
  0xa76bb1f0: add    $0x8,%esp
  0xa76bb1f3: vmovsd (%esp),%xmm0
  0xa76bb1f8: vmovsd 0x8(%esp),%xmm1
  0xa76bb1fe: add    $0x10,%esp
  0xa76bb201: popf   
  0xa76bb202: popa   
  0xa76bb203: pop    %eax
  0xa76bb204: mov    %esp,%esi
  0xa76bb206: sub    $0x18,%esp
  0xa76bb209: mov    %ecx,0x14(%esp)
  0xa76bb20d: mov    %edx,0x10(%esp)
  0xa76bb211: mov    0x18(%esp),%edi
  0xa76bb215: mov    %edi,0xc(%esp)
  0xa76bb219: mov    0x1c(%esp),%edi
  0xa76bb21d: mov    %edi,0x8(%esp)
  0xa76bb221: mov    0x20(%esp),%edi
  0xa76bb225: mov    %edi,0x4(%esp)
  0xa76bb229: mov    0x24(%esp),%edi
  0xa76bb22d: mov    %edi,(%esp)
  0xa76bb230: mov    0x28(%ebx),%ecx
  0xa76bb233: push   %eax
  0xa76bb234: jmp    *%ecx

AHE@0xb6690520: 0xbe000000 i2c: 0xa76bb2c0 c2i: 0xa76bb375 c2iUV: 0xa76bb354
i2c argument handler #6 for: static (J)Ljava/lang/String; (266 bytes generated)
c2i argument handler starts at 0xa76bb375
  0xa76bb2c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76bb2c3: mov    $0xa75b1ac0,%edi
  0xa76bb2c8: cmp    %edi,%eax
  0xa76bb2ca: jbe    0xa76bb2dd
  0xa76bb2d0: mov    $0xa7691ac0,%edi
  0xa76bb2d5: cmp    %edi,%eax
  0xa76bb2d7: jb     0xa76bb322
  0xa76bb2dd: mov    $0xa75af400,%edi
  0xa76bb2e2: cmp    %edi,%eax
  0xa76bb2e4: jbe    0xa76bb2f7
  0xa76bb2ea: mov    $0xa75b1728,%edi
  0xa76bb2ef: cmp    %edi,%eax
  0xa76bb2f1: jb     0xa76bb322
  0xa76bb2f7: mov    $0xa76b4e40,%edi
  0xa76bb2fc: cmp    %edi,%eax
  0xa76bb2fe: jbe    0xa76bb311
  0xa76bb304: mov    $0xa76ba430,%edi
  0xa76bb309: cmp    %edi,%eax
  0xa76bb30b: jb     0xa76bb322
  ;; i2c adapter must return to an interpreter frame
  0xa76bb311: push   $0xb75a2830
  0xa76bb316: call   0xa76bb31b
  0xa76bb31b: pusha  
  0xa76bb31c: call   0xb7052f32
  0xa76bb321: hlt    
  ;; } verify_i2ce 
  0xa76bb322: mov    %esp,%edi
  0xa76bb324: sub    $0x8,%esp
  0xa76bb327: and    $0xfffffff0,%esp
  0xa76bb32a: push   %eax
  0xa76bb32b: mov    %edi,%eax
  0xa76bb32d: mov    0x30(%ebx),%edi
  0xa76bb330: mov    0x4(%eax),%esi
  0xa76bb333: mov    %esi,0x4(%esp)
  0xa76bb337: mov    0x8(%eax),%esi
  0xa76bb33a: mov    %esi,0x8(%esp)
  0xa76bb33e: mov    %esp,%eax
  0xa76bb340: shr    $0xc,%eax
  0xa76bb343: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bb34a: mov    %ebx,0x16c(%eax)
  0xa76bb350: mov    %ebx,%eax
  0xa76bb352: jmp    *%edi
  0xa76bb354: mov    0x4(%ecx),%ebx
  0xa76bb357: cmp    0x8(%eax),%ebx
  0xa76bb35a: mov    0x4(%eax),%ebx
  0xa76bb35d: jne    0xa76bb370
  0xa76bb363: cmpl   $0x0,0x34(%ebx)
  0xa76bb36a: je     0xa76bb3af
  0xa76bb370: jmp    0xa7692560
  0xa76bb375: cmpl   $0x0,0x34(%ebx)
  0xa76bb37c: je     0xa76bb3af
  0xa76bb382: mov    (%esp),%eax
  0xa76bb385: pusha  
  0xa76bb386: pushf  
  0xa76bb387: sub    $0x10,%esp
  0xa76bb38a: vmovsd %xmm0,(%esp)
  0xa76bb38f: vmovsd %xmm1,0x8(%esp)
  0xa76bb395: push   %eax
  0xa76bb396: push   %ebx
  0xa76bb397: call   0xb71d62fc
  0xa76bb39c: add    $0x8,%esp
  0xa76bb39f: vmovsd (%esp),%xmm0
  0xa76bb3a4: vmovsd 0x8(%esp),%xmm1
  0xa76bb3aa: add    $0x10,%esp
  0xa76bb3ad: popf   
  0xa76bb3ae: popa   
  0xa76bb3af: pop    %eax
  0xa76bb3b0: mov    %esp,%esi
  0xa76bb3b2: sub    $0x8,%esp
  0xa76bb3b5: mov    0x8(%esp),%edi
  0xa76bb3b9: mov    %edi,(%esp)
  0xa76bb3bc: mov    0xc(%esp),%edi
  0xa76bb3c0: mov    %edi,0x4(%esp)
  0xa76bb3c4: mov    0x28(%ebx),%ecx
  0xa76bb3c7: push   %eax
  0xa76bb3c8: jmp    *%ecx

AHE@0xb6690544: 0x60000000 i2c: 0xa76bb480 c2i: 0xa76bb529 c2iUV: 0xa76bb508
i2c argument handler #7 for: static (F)Ljava/lang/String; (244 bytes generated)
c2i argument handler starts at 0xa76bb529
  0xa76bb480: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76bb483: mov    $0xa75b1ac0,%edi
  0xa76bb488: cmp    %edi,%eax
  0xa76bb48a: jbe    0xa76bb49d
  0xa76bb490: mov    $0xa7691ac0,%edi
  0xa76bb495: cmp    %edi,%eax
  0xa76bb497: jb     0xa76bb4e2
  0xa76bb49d: mov    $0xa75af400,%edi
  0xa76bb4a2: cmp    %edi,%eax
  0xa76bb4a4: jbe    0xa76bb4b7
  0xa76bb4aa: mov    $0xa75b1728,%edi
  0xa76bb4af: cmp    %edi,%eax
  0xa76bb4b1: jb     0xa76bb4e2
  0xa76bb4b7: mov    $0xa76b4e40,%edi
  0xa76bb4bc: cmp    %edi,%eax
  0xa76bb4be: jbe    0xa76bb4d1
  0xa76bb4c4: mov    $0xa76ba430,%edi
  0xa76bb4c9: cmp    %edi,%eax
  0xa76bb4cb: jb     0xa76bb4e2
  ;; i2c adapter must return to an interpreter frame
  0xa76bb4d1: push   $0xb75a2830
  0xa76bb4d6: call   0xa76bb4db
  0xa76bb4db: pusha  
  0xa76bb4dc: call   0xb7052f32
  0xa76bb4e1: hlt    
  ;; } verify_i2ce 
  0xa76bb4e2: mov    %esp,%edi
  0xa76bb4e4: and    $0xfffffff0,%esp
  0xa76bb4e7: push   %eax
  0xa76bb4e8: mov    %edi,%eax
  0xa76bb4ea: mov    0x30(%ebx),%edi
  0xa76bb4ed: vmovss 0x4(%eax),%xmm0
  0xa76bb4f2: mov    %esp,%eax
  0xa76bb4f4: shr    $0xc,%eax
  0xa76bb4f7: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bb4fe: mov    %ebx,0x16c(%eax)
  0xa76bb504: mov    %ebx,%eax
  0xa76bb506: jmp    *%edi
  0xa76bb508: mov    0x4(%ecx),%ebx
  0xa76bb50b: cmp    0x8(%eax),%ebx
  0xa76bb50e: mov    0x4(%eax),%ebx
  0xa76bb511: jne    0xa76bb524
  0xa76bb517: cmpl   $0x0,0x34(%ebx)
  0xa76bb51e: je     0xa76bb563
  0xa76bb524: jmp    0xa7692560
  0xa76bb529: cmpl   $0x0,0x34(%ebx)
  0xa76bb530: je     0xa76bb563
  0xa76bb536: mov    (%esp),%eax
  0xa76bb539: pusha  
  0xa76bb53a: pushf  
  0xa76bb53b: sub    $0x10,%esp
  0xa76bb53e: vmovsd %xmm0,(%esp)
  0xa76bb543: vmovsd %xmm1,0x8(%esp)
  0xa76bb549: push   %eax
  0xa76bb54a: push   %ebx
  0xa76bb54b: call   0xb71d62fc
  0xa76bb550: add    $0x8,%esp
  0xa76bb553: vmovsd (%esp),%xmm0
  0xa76bb558: vmovsd 0x8(%esp),%xmm1
  0xa76bb55e: add    $0x10,%esp
  0xa76bb561: popf   
  0xa76bb562: popa   
  0xa76bb563: pop    %eax
  0xa76bb564: mov    %esp,%esi
  0xa76bb566: sub    $0x4,%esp
  0xa76bb569: vmovss %xmm0,(%esp)
  0xa76bb56e: mov    0x28(%ebx),%ecx
  0xa76bb571: push   %eax
  0xa76bb572: jmp    *%ecx

AHE@0xb6690568: 0x7e000000 i2c: 0xa76bb600 c2i: 0xa76bb6a9 c2iUV: 0xa76bb688
i2c argument handler #8 for: static (D)Ljava/lang/String; (244 bytes generated)
c2i argument handler starts at 0xa76bb6a9
  0xa76bb600: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76bb603: mov    $0xa75b1ac0,%edi
  0xa76bb608: cmp    %edi,%eax
  0xa76bb60a: jbe    0xa76bb61d
  0xa76bb610: mov    $0xa7691ac0,%edi
  0xa76bb615: cmp    %edi,%eax
  0xa76bb617: jb     0xa76bb662
  0xa76bb61d: mov    $0xa75af400,%edi
  0xa76bb622: cmp    %edi,%eax
  0xa76bb624: jbe    0xa76bb637
  0xa76bb62a: mov    $0xa75b1728,%edi
  0xa76bb62f: cmp    %edi,%eax
  0xa76bb631: jb     0xa76bb662
  0xa76bb637: mov    $0xa76b4e40,%edi
  0xa76bb63c: cmp    %edi,%eax
  0xa76bb63e: jbe    0xa76bb651
  0xa76bb644: mov    $0xa76ba430,%edi
  0xa76bb649: cmp    %edi,%eax
  0xa76bb64b: jb     0xa76bb662
  ;; i2c adapter must return to an interpreter frame
  0xa76bb651: push   $0xb75a2830
  0xa76bb656: call   0xa76bb65b
  0xa76bb65b: pusha  
  0xa76bb65c: call   0xb7052f32
  0xa76bb661: hlt    
  ;; } verify_i2ce 
  0xa76bb662: mov    %esp,%edi
  0xa76bb664: and    $0xfffffff0,%esp
  0xa76bb667: push   %eax
  0xa76bb668: mov    %edi,%eax
  0xa76bb66a: mov    0x30(%ebx),%edi
  0xa76bb66d: vmovsd 0x4(%eax),%xmm0
  0xa76bb672: mov    %esp,%eax
  0xa76bb674: shr    $0xc,%eax
  0xa76bb677: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bb67e: mov    %ebx,0x16c(%eax)
  0xa76bb684: mov    %ebx,%eax
  0xa76bb686: jmp    *%edi
  0xa76bb688: mov    0x4(%ecx),%ebx
  0xa76bb68b: cmp    0x8(%eax),%ebx
  0xa76bb68e: mov    0x4(%eax),%ebx
  0xa76bb691: jne    0xa76bb6a4
  0xa76bb697: cmpl   $0x0,0x34(%ebx)
  0xa76bb69e: je     0xa76bb6e3
  0xa76bb6a4: jmp    0xa7692560
  0xa76bb6a9: cmpl   $0x0,0x34(%ebx)
  0xa76bb6b0: je     0xa76bb6e3
  0xa76bb6b6: mov    (%esp),%eax
  0xa76bb6b9: pusha  
  0xa76bb6ba: pushf  
  0xa76bb6bb: sub    $0x10,%esp
  0xa76bb6be: vmovsd %xmm0,(%esp)
  0xa76bb6c3: vmovsd %xmm1,0x8(%esp)
  0xa76bb6c9: push   %eax
  0xa76bb6ca: push   %ebx
  0xa76bb6cb: call   0xb71d62fc
  0xa76bb6d0: add    $0x8,%esp
  0xa76bb6d3: vmovsd (%esp),%xmm0
  0xa76bb6d8: vmovsd 0x8(%esp),%xmm1
  0xa76bb6de: add    $0x10,%esp
  0xa76bb6e1: popf   
  0xa76bb6e2: popa   
  0xa76bb6e3: pop    %eax
  0xa76bb6e4: mov    %esp,%esi
  0xa76bb6e6: sub    $0x8,%esp
  0xa76bb6e9: vmovsd %xmm0,(%esp)
  0xa76bb6ee: mov    0x28(%ebx),%ecx
  0xa76bb6f1: push   %eax
  0xa76bb6f2: jmp    *%ecx

AHE@0xb669058c: 0x i2c: 0xa76bb780 c2i: 0xa76bb824 c2iUV: 0xa76bb803
i2c argument handler #9 for: static ()V (234 bytes generated)
c2i argument handler starts at 0xa76bb824
  0xa76bb780: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76bb783: mov    $0xa75b1ac0,%edi
  0xa76bb788: cmp    %edi,%eax
  0xa76bb78a: jbe    0xa76bb79d
  0xa76bb790: mov    $0xa7691ac0,%edi
  0xa76bb795: cmp    %edi,%eax
  0xa76bb797: jb     0xa76bb7e2
  0xa76bb79d: mov    $0xa75af400,%edi
  0xa76bb7a2: cmp    %edi,%eax
  0xa76bb7a4: jbe    0xa76bb7b7
  0xa76bb7aa: mov    $0xa75b1728,%edi
  0xa76bb7af: cmp    %edi,%eax
  0xa76bb7b1: jb     0xa76bb7e2
  0xa76bb7b7: mov    $0xa76b4e40,%edi
  0xa76bb7bc: cmp    %edi,%eax
  0xa76bb7be: jbe    0xa76bb7d1
  0xa76bb7c4: mov    $0xa76ba430,%edi
  0xa76bb7c9: cmp    %edi,%eax
  0xa76bb7cb: jb     0xa76bb7e2
  ;; i2c adapter must return to an interpreter frame
  0xa76bb7d1: push   $0xb75a2830
  0xa76bb7d6: call   0xa76bb7db
  0xa76bb7db: pusha  
  0xa76bb7dc: call   0xb7052f32
  0xa76bb7e1: hlt    
  ;; } verify_i2ce 
  0xa76bb7e2: mov    %esp,%edi
  0xa76bb7e4: and    $0xfffffff0,%esp
  0xa76bb7e7: push   %eax
  0xa76bb7e8: mov    %edi,%eax
  0xa76bb7ea: mov    0x30(%ebx),%edi
  0xa76bb7ed: mov    %esp,%eax
  0xa76bb7ef: shr    $0xc,%eax
  0xa76bb7f2: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bb7f9: mov    %ebx,0x16c(%eax)
  0xa76bb7ff: mov    %ebx,%eax
  0xa76bb801: jmp    *%edi
  0xa76bb803: mov    0x4(%ecx),%ebx
  0xa76bb806: cmp    0x8(%eax),%ebx
  0xa76bb809: mov    0x4(%eax),%ebx
  0xa76bb80c: jne    0xa76bb81f
  0xa76bb812: cmpl   $0x0,0x34(%ebx)
  0xa76bb819: je     0xa76bb85e
  0xa76bb81f: jmp    0xa7692560
  0xa76bb824: cmpl   $0x0,0x34(%ebx)
  0xa76bb82b: je     0xa76bb85e
  0xa76bb831: mov    (%esp),%eax
  0xa76bb834: pusha  
  0xa76bb835: pushf  
  0xa76bb836: sub    $0x10,%esp
  0xa76bb839: vmovsd %xmm0,(%esp)
  0xa76bb83e: vmovsd %xmm1,0x8(%esp)
  0xa76bb844: push   %eax
  0xa76bb845: push   %ebx
  0xa76bb846: call   0xb71d62fc
  0xa76bb84b: add    $0x8,%esp
  0xa76bb84e: vmovsd (%esp),%xmm0
  0xa76bb853: vmovsd 0x8(%esp),%xmm1
  0xa76bb859: add    $0x10,%esp
  0xa76bb85c: popf   
  0xa76bb85d: popa   
  0xa76bb85e: pop    %eax
  0xa76bb85f: mov    %esp,%esi
  0xa76bb861: sub    $0x0,%esp
  0xa76bb864: mov    0x28(%ebx),%ecx
  0xa76bb867: push   %eax
  0xa76bb868: jmp    *%ecx

AHE@0xb66905b0: 0xaaaa0000 i2c: 0xa76bb900 c2i: 0xa76bb9bb c2iUV: 0xa76bb99a
i2c argument handler #10 for: receiver ([CII)V (280 bytes generated)
c2i argument handler starts at 0xa76bb9bb
  0xa76bb900: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76bb903: mov    $0xa75b1ac0,%edi
  0xa76bb908: cmp    %edi,%eax
  0xa76bb90a: jbe    0xa76bb91d
  0xa76bb910: mov    $0xa7691ac0,%edi
  0xa76bb915: cmp    %edi,%eax
  0xa76bb917: jb     0xa76bb962
  0xa76bb91d: mov    $0xa75af400,%edi
  0xa76bb922: cmp    %edi,%eax
  0xa76bb924: jbe    0xa76bb937
  0xa76bb92a: mov    $0xa75b1728,%edi
  0xa76bb92f: cmp    %edi,%eax
  0xa76bb931: jb     0xa76bb962
  0xa76bb937: mov    $0xa76b4e40,%edi
  0xa76bb93c: cmp    %edi,%eax
  0xa76bb93e: jbe    0xa76bb951
  0xa76bb944: mov    $0xa76ba430,%edi
  0xa76bb949: cmp    %edi,%eax
  0xa76bb94b: jb     0xa76bb962
  ;; i2c adapter must return to an interpreter frame
  0xa76bb951: push   $0xb75a2830
  0xa76bb956: call   0xa76bb95b
  0xa76bb95b: pusha  
  0xa76bb95c: call   0xb7052f32
  0xa76bb961: hlt    
  ;; } verify_i2ce 
  0xa76bb962: mov    %esp,%edi
  0xa76bb964: sub    $0x8,%esp
  0xa76bb967: and    $0xfffffff0,%esp
  0xa76bb96a: push   %eax
  0xa76bb96b: mov    %edi,%eax
  0xa76bb96d: mov    0x30(%ebx),%edi
  0xa76bb970: mov    0x10(%eax),%ecx
  0xa76bb973: mov    0xc(%eax),%edx
  0xa76bb976: mov    0x8(%eax),%esi
  0xa76bb979: mov    %esi,0x4(%esp)
  0xa76bb97d: mov    0x4(%eax),%esi
  0xa76bb980: mov    %esi,0x8(%esp)
  0xa76bb984: mov    %esp,%eax
  0xa76bb986: shr    $0xc,%eax
  0xa76bb989: mov    -0x486bdba0(,%eax,4),%eax
  0xa76bb990: mov    %ebx,0x16c(%eax)
  0xa76bb996: mov    %ebx,%eax
  0xa76bb998: jmp    *%edi
  0xa76bb99a: mov    0x4(%ecx),%ebx
  0xa76bb99d: cmp    0x8(%eax),%ebx
  0xa76bb9a0: mov    0x4(%eax),%ebx
  0xa76bb9a3: jne    0xa76bb9b6
  0xa76bb9a9: cmpl   $0x0,0x34(%ebx)
  0xa76bb9b0: je     0xa76bb9f5
  0xa76bb9b6: jmp    0xa7692560
  0xa76bb9bb: cmpl   $0x0,0x34(%ebx)
  0xa76bb9c2: je     0xa76bb9f5
  0xa76bb9c8: mov    (%esp),%eax
  0xa76bb9cb: pusha  
  0xa76bb9cc: pushf  
  0xa76bb9cd: sub    $0x10,%esp
  0xa76bb9d0: vmovsd %xmm0,(%esp)
  0xa76bb9d5: vmovsd %xmm1,0x8(%esp)
  0xa76bb9db: push   %eax
  0xa76bb9dc: push   %ebx
  0xa76bb9dd: call   0xb71d62fc
  0xa76bb9e2: add    $0x8,%esp
  0xa76bb9e5: vmovsd (%esp),%xmm0
  0xa76bb9ea: vmovsd 0x8(%esp),%xmm1
  0xa76bb9f0: add    $0x10,%esp
  0xa76bb9f3: popf   
  0xa76bb9f4: popa   
  0xa76bb9f5: pop    %eax
  0xa76bb9f6: mov    %esp,%esi
  0xa76bb9f8: sub    $0x10,%esp
  0xa76bb9fb: mov    %ecx,0xc(%esp)
  0xa76bb9ff: mov    %edx,0x8(%esp)
  0xa76bba03: mov    0x10(%esp),%edi
  0xa76bba07: mov    %edi,0x4(%esp)
  0xa76bba0b: mov    0x14(%esp),%edi
  0xa76bba0f: mov    %edi,(%esp)
  0xa76bba12: mov    0x28(%ebx),%ecx
  0xa76bba15: push   %eax
  0xa76bba16: jmp    *%ecx

AHE@0xb66905d4: 0xbea00000 i2c: 0xa76c3f40 c2i: 0xa76c3ff8 c2iUV: 0xa76c3fd7
i2c argument handler #11 for: static (JI)V (273 bytes generated)
c2i argument handler starts at 0xa76c3ff8
  0xa76c3f40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c3f43: mov    $0xa75b1ac0,%edi
  0xa76c3f48: cmp    %edi,%eax
  0xa76c3f4a: jbe    0xa76c3f5d
  0xa76c3f50: mov    $0xa7691ac0,%edi
  0xa76c3f55: cmp    %edi,%eax
  0xa76c3f57: jb     0xa76c3fa2
  0xa76c3f5d: mov    $0xa75af400,%edi
  0xa76c3f62: cmp    %edi,%eax
  0xa76c3f64: jbe    0xa76c3f77
  0xa76c3f6a: mov    $0xa75b1728,%edi
  0xa76c3f6f: cmp    %edi,%eax
  0xa76c3f71: jb     0xa76c3fa2
  0xa76c3f77: mov    $0xa76b4e40,%edi
  0xa76c3f7c: cmp    %edi,%eax
  0xa76c3f7e: jbe    0xa76c3f91
  0xa76c3f84: mov    $0xa76ba430,%edi
  0xa76c3f89: cmp    %edi,%eax
  0xa76c3f8b: jb     0xa76c3fa2
  ;; i2c adapter must return to an interpreter frame
  0xa76c3f91: push   $0xb75a2830
  0xa76c3f96: call   0xa76c3f9b
  0xa76c3f9b: pusha  
  0xa76c3f9c: call   0xb7052f32
  0xa76c3fa1: hlt    
  ;; } verify_i2ce 
  0xa76c3fa2: mov    %esp,%edi
  0xa76c3fa4: sub    $0x8,%esp
  0xa76c3fa7: and    $0xfffffff0,%esp
  0xa76c3faa: push   %eax
  0xa76c3fab: mov    %edi,%eax
  0xa76c3fad: mov    0x30(%ebx),%edi
  0xa76c3fb0: mov    0x8(%eax),%esi
  0xa76c3fb3: mov    %esi,0x4(%esp)
  0xa76c3fb7: mov    0xc(%eax),%esi
  0xa76c3fba: mov    %esi,0x8(%esp)
  0xa76c3fbe: mov    0x4(%eax),%ecx
  0xa76c3fc1: mov    %esp,%eax
  0xa76c3fc3: shr    $0xc,%eax
  0xa76c3fc6: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c3fcd: mov    %ebx,0x16c(%eax)
  0xa76c3fd3: mov    %ebx,%eax
  0xa76c3fd5: jmp    *%edi
  0xa76c3fd7: mov    0x4(%ecx),%ebx
  0xa76c3fda: cmp    0x8(%eax),%ebx
  0xa76c3fdd: mov    0x4(%eax),%ebx
  0xa76c3fe0: jne    0xa76c3ff3
  0xa76c3fe6: cmpl   $0x0,0x34(%ebx)
  0xa76c3fed: je     0xa76c4032
  0xa76c3ff3: jmp    0xa7692560
  0xa76c3ff8: cmpl   $0x0,0x34(%ebx)
  0xa76c3fff: je     0xa76c4032
  0xa76c4005: mov    (%esp),%eax
  0xa76c4008: pusha  
  0xa76c4009: pushf  
  0xa76c400a: sub    $0x10,%esp
  0xa76c400d: vmovsd %xmm0,(%esp)
  0xa76c4012: vmovsd %xmm1,0x8(%esp)
  0xa76c4018: push   %eax
  0xa76c4019: push   %ebx
  0xa76c401a: call   0xb71d62fc
  0xa76c401f: add    $0x8,%esp
  0xa76c4022: vmovsd (%esp),%xmm0
  0xa76c4027: vmovsd 0x8(%esp),%xmm1
  0xa76c402d: add    $0x10,%esp
  0xa76c4030: popf   
  0xa76c4031: popa   
  0xa76c4032: pop    %eax
  0xa76c4033: mov    %esp,%esi
  0xa76c4035: sub    $0xc,%esp
  0xa76c4038: mov    0xc(%esp),%edi
  0xa76c403c: mov    %edi,0x4(%esp)
  0xa76c4040: mov    0x10(%esp),%edi
  0xa76c4044: mov    %edi,0x8(%esp)
  0xa76c4048: mov    %ecx,(%esp)
  0xa76c404b: mov    0x28(%ebx),%ecx
  0xa76c404e: push   %eax
  0xa76c404f: jmp    *%ecx

AHE@0xb66905f8: 0xaaaabe00 i2c: 0xa76c4100 c2i: 0xa76c41c9 c2iUV: 0xa76c41a8
i2c argument handler #12 for: receiver (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V (310 bytes generated)
c2i argument handler starts at 0xa76c41c9
  0xa76c4100: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c4103: mov    $0xa75b1ac0,%edi
  0xa76c4108: cmp    %edi,%eax
  0xa76c410a: jbe    0xa76c411d
  0xa76c4110: mov    $0xa7691ac0,%edi
  0xa76c4115: cmp    %edi,%eax
  0xa76c4117: jb     0xa76c4162
  0xa76c411d: mov    $0xa75af400,%edi
  0xa76c4122: cmp    %edi,%eax
  0xa76c4124: jbe    0xa76c4137
  0xa76c412a: mov    $0xa75b1728,%edi
  0xa76c412f: cmp    %edi,%eax
  0xa76c4131: jb     0xa76c4162
  0xa76c4137: mov    $0xa76b4e40,%edi
  0xa76c413c: cmp    %edi,%eax
  0xa76c413e: jbe    0xa76c4151
  0xa76c4144: mov    $0xa76ba430,%edi
  0xa76c4149: cmp    %edi,%eax
  0xa76c414b: jb     0xa76c4162
  ;; i2c adapter must return to an interpreter frame
  0xa76c4151: push   $0xb75a2830
  0xa76c4156: call   0xa76c415b
  0xa76c415b: pusha  
  0xa76c415c: call   0xb7052f32
  0xa76c4161: hlt    
  ;; } verify_i2ce 
  0xa76c4162: mov    %esp,%edi
  0xa76c4164: sub    $0x10,%esp
  0xa76c4167: and    $0xfffffff0,%esp
  0xa76c416a: push   %eax
  0xa76c416b: mov    %edi,%eax
  0xa76c416d: mov    0x30(%ebx),%edi
  0xa76c4170: mov    0x18(%eax),%ecx
  0xa76c4173: mov    0x14(%eax),%edx
  0xa76c4176: mov    0x10(%eax),%esi
  0xa76c4179: mov    %esi,0xc(%esp)
  0xa76c417d: mov    0xc(%eax),%esi
  0xa76c4180: mov    %esi,0x10(%esp)
  0xa76c4184: mov    0x4(%eax),%esi
  0xa76c4187: mov    %esi,0x4(%esp)
  0xa76c418b: mov    0x8(%eax),%esi
  0xa76c418e: mov    %esi,0x8(%esp)
  0xa76c4192: mov    %esp,%eax
  0xa76c4194: shr    $0xc,%eax
  0xa76c4197: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c419e: mov    %ebx,0x16c(%eax)
  0xa76c41a4: mov    %ebx,%eax
  0xa76c41a6: jmp    *%edi
  0xa76c41a8: mov    0x4(%ecx),%ebx
  0xa76c41ab: cmp    0x8(%eax),%ebx
  0xa76c41ae: mov    0x4(%eax),%ebx
  0xa76c41b1: jne    0xa76c41c4
  0xa76c41b7: cmpl   $0x0,0x34(%ebx)
  0xa76c41be: je     0xa76c4203
  0xa76c41c4: jmp    0xa7692560
  0xa76c41c9: cmpl   $0x0,0x34(%ebx)
  0xa76c41d0: je     0xa76c4203
  0xa76c41d6: mov    (%esp),%eax
  0xa76c41d9: pusha  
  0xa76c41da: pushf  
  0xa76c41db: sub    $0x10,%esp
  0xa76c41de: vmovsd %xmm0,(%esp)
  0xa76c41e3: vmovsd %xmm1,0x8(%esp)
  0xa76c41e9: push   %eax
  0xa76c41ea: push   %ebx
  0xa76c41eb: call   0xb71d62fc
  0xa76c41f0: add    $0x8,%esp
  0xa76c41f3: vmovsd (%esp),%xmm0
  0xa76c41f8: vmovsd 0x8(%esp),%xmm1
  0xa76c41fe: add    $0x10,%esp
  0xa76c4201: popf   
  0xa76c4202: popa   
  0xa76c4203: pop    %eax
  0xa76c4204: mov    %esp,%esi
  0xa76c4206: sub    $0x18,%esp
  0xa76c4209: mov    %ecx,0x14(%esp)
  0xa76c420d: mov    %edx,0x10(%esp)
  0xa76c4211: mov    0x20(%esp),%edi
  0xa76c4215: mov    %edi,0xc(%esp)
  0xa76c4219: mov    0x24(%esp),%edi
  0xa76c421d: mov    %edi,0x8(%esp)
  0xa76c4221: mov    0x18(%esp),%edi
  0xa76c4225: mov    %edi,(%esp)
  0xa76c4228: mov    0x1c(%esp),%edi
  0xa76c422c: mov    %edi,0x4(%esp)
  0xa76c4230: mov    0x28(%ebx),%ecx
  0xa76c4233: push   %eax
  0xa76c4234: jmp    *%ecx

AHE@0xb669061c: 0xaaaabeaa i2c: 0xa76c42c0 c2i: 0xa76c4397 c2iUV: 0xa76c4376
i2c argument handler #13 for: receiver (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;Z)V (340 bytes generated)
c2i argument handler starts at 0xa76c4397
  0xa76c42c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c42c3: mov    $0xa75b1ac0,%edi
  0xa76c42c8: cmp    %edi,%eax
  0xa76c42ca: jbe    0xa76c42dd
  0xa76c42d0: mov    $0xa7691ac0,%edi
  0xa76c42d5: cmp    %edi,%eax
  0xa76c42d7: jb     0xa76c4322
  0xa76c42dd: mov    $0xa75af400,%edi
  0xa76c42e2: cmp    %edi,%eax
  0xa76c42e4: jbe    0xa76c42f7
  0xa76c42ea: mov    $0xa75b1728,%edi
  0xa76c42ef: cmp    %edi,%eax
  0xa76c42f1: jb     0xa76c4322
  0xa76c42f7: mov    $0xa76b4e40,%edi
  0xa76c42fc: cmp    %edi,%eax
  0xa76c42fe: jbe    0xa76c4311
  0xa76c4304: mov    $0xa76ba430,%edi
  0xa76c4309: cmp    %edi,%eax
  0xa76c430b: jb     0xa76c4322
  ;; i2c adapter must return to an interpreter frame
  0xa76c4311: push   $0xb75a2830
  0xa76c4316: call   0xa76c431b
  0xa76c431b: pusha  
  0xa76c431c: call   0xb7052f32
  0xa76c4321: hlt    
  ;; } verify_i2ce 
  0xa76c4322: mov    %esp,%edi
  0xa76c4324: sub    $0x18,%esp
  0xa76c4327: and    $0xfffffff0,%esp
  0xa76c432a: push   %eax
  0xa76c432b: mov    %edi,%eax
  0xa76c432d: mov    0x30(%ebx),%edi
  0xa76c4330: mov    0x20(%eax),%ecx
  0xa76c4333: mov    0x1c(%eax),%edx
  0xa76c4336: mov    0x18(%eax),%esi
  0xa76c4339: mov    %esi,0xc(%esp)
  0xa76c433d: mov    0x14(%eax),%esi
  0xa76c4340: mov    %esi,0x10(%esp)
  0xa76c4344: mov    0xc(%eax),%esi
  0xa76c4347: mov    %esi,0x4(%esp)
  0xa76c434b: mov    0x10(%eax),%esi
  0xa76c434e: mov    %esi,0x8(%esp)
  0xa76c4352: mov    0x8(%eax),%esi
  0xa76c4355: mov    %esi,0x14(%esp)
  0xa76c4359: mov    0x4(%eax),%esi
  0xa76c435c: mov    %esi,0x18(%esp)
  0xa76c4360: mov    %esp,%eax
  0xa76c4362: shr    $0xc,%eax
  0xa76c4365: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c436c: mov    %ebx,0x16c(%eax)
  0xa76c4372: mov    %ebx,%eax
  0xa76c4374: jmp    *%edi
  0xa76c4376: mov    0x4(%ecx),%ebx
  0xa76c4379: cmp    0x8(%eax),%ebx
  0xa76c437c: mov    0x4(%eax),%ebx
  0xa76c437f: jne    0xa76c4392
  0xa76c4385: cmpl   $0x0,0x34(%ebx)
  0xa76c438c: je     0xa76c43d1
  0xa76c4392: jmp    0xa7692560
  0xa76c4397: cmpl   $0x0,0x34(%ebx)
  0xa76c439e: je     0xa76c43d1
  0xa76c43a4: mov    (%esp),%eax
  0xa76c43a7: pusha  
  0xa76c43a8: pushf  
  0xa76c43a9: sub    $0x10,%esp
  0xa76c43ac: vmovsd %xmm0,(%esp)
  0xa76c43b1: vmovsd %xmm1,0x8(%esp)
  0xa76c43b7: push   %eax
  0xa76c43b8: push   %ebx
  0xa76c43b9: call   0xb71d62fc
  0xa76c43be: add    $0x8,%esp
  0xa76c43c1: vmovsd (%esp),%xmm0
  0xa76c43c6: vmovsd 0x8(%esp),%xmm1
  0xa76c43cc: add    $0x10,%esp
  0xa76c43cf: popf   
  0xa76c43d0: popa   
  0xa76c43d1: pop    %eax
  0xa76c43d2: mov    %esp,%esi
  0xa76c43d4: sub    $0x20,%esp
  0xa76c43d7: mov    %ecx,0x1c(%esp)
  0xa76c43db: mov    %edx,0x18(%esp)
  0xa76c43df: mov    0x28(%esp),%edi
  0xa76c43e3: mov    %edi,0x14(%esp)
  0xa76c43e7: mov    0x2c(%esp),%edi
  0xa76c43eb: mov    %edi,0x10(%esp)
  0xa76c43ef: mov    0x20(%esp),%edi
  0xa76c43f3: mov    %edi,0x8(%esp)
  0xa76c43f7: mov    0x24(%esp),%edi
  0xa76c43fb: mov    %edi,0xc(%esp)
  0xa76c43ff: mov    0x30(%esp),%edi
  0xa76c4403: mov    %edi,0x4(%esp)
  0xa76c4407: mov    0x34(%esp),%edi
  0xa76c440b: mov    %edi,(%esp)
  0xa76c440e: mov    0x28(%ebx),%ecx
  0xa76c4411: push   %eax
  0xa76c4412: jmp    *%ecx

AHE@0xb6690640: 0xabe00000 i2c: 0xa76c44c0 c2i: 0xa76c4578 c2iUV: 0xa76c4557
i2c argument handler #14 for: receiver (J)V (273 bytes generated)
c2i argument handler starts at 0xa76c4578
  0xa76c44c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c44c3: mov    $0xa75b1ac0,%edi
  0xa76c44c8: cmp    %edi,%eax
  0xa76c44ca: jbe    0xa76c44dd
  0xa76c44d0: mov    $0xa7691ac0,%edi
  0xa76c44d5: cmp    %edi,%eax
  0xa76c44d7: jb     0xa76c4522
  0xa76c44dd: mov    $0xa75af400,%edi
  0xa76c44e2: cmp    %edi,%eax
  0xa76c44e4: jbe    0xa76c44f7
  0xa76c44ea: mov    $0xa75b1728,%edi
  0xa76c44ef: cmp    %edi,%eax
  0xa76c44f1: jb     0xa76c4522
  0xa76c44f7: mov    $0xa76b4e40,%edi
  0xa76c44fc: cmp    %edi,%eax
  0xa76c44fe: jbe    0xa76c4511
  0xa76c4504: mov    $0xa76ba430,%edi
  0xa76c4509: cmp    %edi,%eax
  0xa76c450b: jb     0xa76c4522
  ;; i2c adapter must return to an interpreter frame
  0xa76c4511: push   $0xb75a2830
  0xa76c4516: call   0xa76c451b
  0xa76c451b: pusha  
  0xa76c451c: call   0xb7052f32
  0xa76c4521: hlt    
  ;; } verify_i2ce 
  0xa76c4522: mov    %esp,%edi
  0xa76c4524: sub    $0x8,%esp
  0xa76c4527: and    $0xfffffff0,%esp
  0xa76c452a: push   %eax
  0xa76c452b: mov    %edi,%eax
  0xa76c452d: mov    0x30(%ebx),%edi
  0xa76c4530: mov    0xc(%eax),%ecx
  0xa76c4533: mov    0x4(%eax),%esi
  0xa76c4536: mov    %esi,0x4(%esp)
  0xa76c453a: mov    0x8(%eax),%esi
  0xa76c453d: mov    %esi,0x8(%esp)
  0xa76c4541: mov    %esp,%eax
  0xa76c4543: shr    $0xc,%eax
  0xa76c4546: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c454d: mov    %ebx,0x16c(%eax)
  0xa76c4553: mov    %ebx,%eax
  0xa76c4555: jmp    *%edi
  0xa76c4557: mov    0x4(%ecx),%ebx
  0xa76c455a: cmp    0x8(%eax),%ebx
  0xa76c455d: mov    0x4(%eax),%ebx
  0xa76c4560: jne    0xa76c4573
  0xa76c4566: cmpl   $0x0,0x34(%ebx)
  0xa76c456d: je     0xa76c45b2
  0xa76c4573: jmp    0xa7692560
  0xa76c4578: cmpl   $0x0,0x34(%ebx)
  0xa76c457f: je     0xa76c45b2
  0xa76c4585: mov    (%esp),%eax
  0xa76c4588: pusha  
  0xa76c4589: pushf  
  0xa76c458a: sub    $0x10,%esp
  0xa76c458d: vmovsd %xmm0,(%esp)
  0xa76c4592: vmovsd %xmm1,0x8(%esp)
  0xa76c4598: push   %eax
  0xa76c4599: push   %ebx
  0xa76c459a: call   0xb71d62fc
  0xa76c459f: add    $0x8,%esp
  0xa76c45a2: vmovsd (%esp),%xmm0
  0xa76c45a7: vmovsd 0x8(%esp),%xmm1
  0xa76c45ad: add    $0x10,%esp
  0xa76c45b0: popf   
  0xa76c45b1: popa   
  0xa76c45b2: pop    %eax
  0xa76c45b3: mov    %esp,%esi
  0xa76c45b5: sub    $0xc,%esp
  0xa76c45b8: mov    %ecx,0x8(%esp)
  0xa76c45bc: mov    0xc(%esp),%edi
  0xa76c45c0: mov    %edi,(%esp)
  0xa76c45c3: mov    0x10(%esp),%edi
  0xa76c45c7: mov    %edi,0x4(%esp)
  0xa76c45cb: mov    0x28(%ebx),%ecx
  0xa76c45ce: push   %eax
  0xa76c45cf: jmp    *%ecx

AHE@0xb6690664: 0xabea0000 i2c: 0xa76c4680 c2i: 0xa76c473b c2iUV: 0xa76c471a
i2c argument handler #15 for: receiver (JI)V (280 bytes generated)
c2i argument handler starts at 0xa76c473b
  0xa76c4680: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c4683: mov    $0xa75b1ac0,%edi
  0xa76c4688: cmp    %edi,%eax
  0xa76c468a: jbe    0xa76c469d
  0xa76c4690: mov    $0xa7691ac0,%edi
  0xa76c4695: cmp    %edi,%eax
  0xa76c4697: jb     0xa76c46e2
  0xa76c469d: mov    $0xa75af400,%edi
  0xa76c46a2: cmp    %edi,%eax
  0xa76c46a4: jbe    0xa76c46b7
  0xa76c46aa: mov    $0xa75b1728,%edi
  0xa76c46af: cmp    %edi,%eax
  0xa76c46b1: jb     0xa76c46e2
  0xa76c46b7: mov    $0xa76b4e40,%edi
  0xa76c46bc: cmp    %edi,%eax
  0xa76c46be: jbe    0xa76c46d1
  0xa76c46c4: mov    $0xa76ba430,%edi
  0xa76c46c9: cmp    %edi,%eax
  0xa76c46cb: jb     0xa76c46e2
  ;; i2c adapter must return to an interpreter frame
  0xa76c46d1: push   $0xb75a2830
  0xa76c46d6: call   0xa76c46db
  0xa76c46db: pusha  
  0xa76c46dc: call   0xb7052f32
  0xa76c46e1: hlt    
  ;; } verify_i2ce 
  0xa76c46e2: mov    %esp,%edi
  0xa76c46e4: sub    $0x8,%esp
  0xa76c46e7: and    $0xfffffff0,%esp
  0xa76c46ea: push   %eax
  0xa76c46eb: mov    %edi,%eax
  0xa76c46ed: mov    0x30(%ebx),%edi
  0xa76c46f0: mov    0x10(%eax),%ecx
  0xa76c46f3: mov    0x8(%eax),%esi
  0xa76c46f6: mov    %esi,0x4(%esp)
  0xa76c46fa: mov    0xc(%eax),%esi
  0xa76c46fd: mov    %esi,0x8(%esp)
  0xa76c4701: mov    0x4(%eax),%edx
  0xa76c4704: mov    %esp,%eax
  0xa76c4706: shr    $0xc,%eax
  0xa76c4709: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c4710: mov    %ebx,0x16c(%eax)
  0xa76c4716: mov    %ebx,%eax
  0xa76c4718: jmp    *%edi
  0xa76c471a: mov    0x4(%ecx),%ebx
  0xa76c471d: cmp    0x8(%eax),%ebx
  0xa76c4720: mov    0x4(%eax),%ebx
  0xa76c4723: jne    0xa76c4736
  0xa76c4729: cmpl   $0x0,0x34(%ebx)
  0xa76c4730: je     0xa76c4775
  0xa76c4736: jmp    0xa7692560
  0xa76c473b: cmpl   $0x0,0x34(%ebx)
  0xa76c4742: je     0xa76c4775
  0xa76c4748: mov    (%esp),%eax
  0xa76c474b: pusha  
  0xa76c474c: pushf  
  0xa76c474d: sub    $0x10,%esp
  0xa76c4750: vmovsd %xmm0,(%esp)
  0xa76c4755: vmovsd %xmm1,0x8(%esp)
  0xa76c475b: push   %eax
  0xa76c475c: push   %ebx
  0xa76c475d: call   0xb71d62fc
  0xa76c4762: add    $0x8,%esp
  0xa76c4765: vmovsd (%esp),%xmm0
  0xa76c476a: vmovsd 0x8(%esp),%xmm1
  0xa76c4770: add    $0x10,%esp
  0xa76c4773: popf   
  0xa76c4774: popa   
  0xa76c4775: pop    %eax
  0xa76c4776: mov    %esp,%esi
  0xa76c4778: sub    $0x10,%esp
  0xa76c477b: mov    %ecx,0xc(%esp)
  0xa76c477f: mov    0x10(%esp),%edi
  0xa76c4783: mov    %edi,0x4(%esp)
  0xa76c4787: mov    0x14(%esp),%edi
  0xa76c478b: mov    %edi,0x8(%esp)
  0xa76c478f: mov    %edx,(%esp)
  0xa76c4792: mov    0x28(%ebx),%ecx
  0xa76c4795: push   %eax
  0xa76c4796: jmp    *%ecx

AHE@0xb6690688: 0xaaaaaaaaaaaa0000 i2c: 0xa76c4840 c2i: 0xa76c4933 c2iUV: 0xa76c4912
i2c argument handler #16 for: receiver (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B[B)V (400 bytes generated)
c2i argument handler starts at 0xa76c4933
  0xa76c4840: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c4843: mov    $0xa75b1ac0,%edi
  0xa76c4848: cmp    %edi,%eax
  0xa76c484a: jbe    0xa76c485d
  0xa76c4850: mov    $0xa7691ac0,%edi
  0xa76c4855: cmp    %edi,%eax
  0xa76c4857: jb     0xa76c48a2
  0xa76c485d: mov    $0xa75af400,%edi
  0xa76c4862: cmp    %edi,%eax
  0xa76c4864: jbe    0xa76c4877
  0xa76c486a: mov    $0xa75b1728,%edi
  0xa76c486f: cmp    %edi,%eax
  0xa76c4871: jb     0xa76c48a2
  0xa76c4877: mov    $0xa76b4e40,%edi
  0xa76c487c: cmp    %edi,%eax
  0xa76c487e: jbe    0xa76c4891
  0xa76c4884: mov    $0xa76ba430,%edi
  0xa76c4889: cmp    %edi,%eax
  0xa76c488b: jb     0xa76c48a2
  ;; i2c adapter must return to an interpreter frame
  0xa76c4891: push   $0xb75a2830
  0xa76c4896: call   0xa76c489b
  0xa76c489b: pusha  
  0xa76c489c: call   0xb7052f32
  0xa76c48a1: hlt    
  ;; } verify_i2ce 
  0xa76c48a2: mov    %esp,%edi
  0xa76c48a4: sub    $0x28,%esp
  0xa76c48a7: and    $0xfffffff0,%esp
  0xa76c48aa: push   %eax
  0xa76c48ab: mov    %edi,%eax
  0xa76c48ad: mov    0x30(%ebx),%edi
  0xa76c48b0: mov    0x30(%eax),%ecx
  0xa76c48b3: mov    0x2c(%eax),%edx
  0xa76c48b6: mov    0x28(%eax),%esi
  0xa76c48b9: mov    %esi,0x4(%esp)
  0xa76c48bd: mov    0x24(%eax),%esi
  0xa76c48c0: mov    %esi,0x8(%esp)
  0xa76c48c4: mov    0x20(%eax),%esi
  0xa76c48c7: mov    %esi,0xc(%esp)
  0xa76c48cb: mov    0x1c(%eax),%esi
  0xa76c48ce: mov    %esi,0x10(%esp)
  0xa76c48d2: mov    0x18(%eax),%esi
  0xa76c48d5: mov    %esi,0x14(%esp)
  0xa76c48d9: mov    0x14(%eax),%esi
  0xa76c48dc: mov    %esi,0x18(%esp)
  0xa76c48e0: mov    0x10(%eax),%esi
  0xa76c48e3: mov    %esi,0x1c(%esp)
  0xa76c48e7: mov    0xc(%eax),%esi
  0xa76c48ea: mov    %esi,0x20(%esp)
  0xa76c48ee: mov    0x8(%eax),%esi
  0xa76c48f1: mov    %esi,0x24(%esp)
  0xa76c48f5: mov    0x4(%eax),%esi
  0xa76c48f8: mov    %esi,0x28(%esp)
  0xa76c48fc: mov    %esp,%eax
  0xa76c48fe: shr    $0xc,%eax
  0xa76c4901: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c4908: mov    %ebx,0x16c(%eax)
  0xa76c490e: mov    %ebx,%eax
  0xa76c4910: jmp    *%edi
  0xa76c4912: mov    0x4(%ecx),%ebx
  0xa76c4915: cmp    0x8(%eax),%ebx
  0xa76c4918: mov    0x4(%eax),%ebx
  0xa76c491b: jne    0xa76c492e
  0xa76c4921: cmpl   $0x0,0x34(%ebx)
  0xa76c4928: je     0xa76c496d
  0xa76c492e: jmp    0xa7692560
  0xa76c4933: cmpl   $0x0,0x34(%ebx)
  0xa76c493a: je     0xa76c496d
  0xa76c4940: mov    (%esp),%eax
  0xa76c4943: pusha  
  0xa76c4944: pushf  
  0xa76c4945: sub    $0x10,%esp
  0xa76c4948: vmovsd %xmm0,(%esp)
  0xa76c494d: vmovsd %xmm1,0x8(%esp)
  0xa76c4953: push   %eax
  0xa76c4954: push   %ebx
  0xa76c4955: call   0xb71d62fc
  0xa76c495a: add    $0x8,%esp
  0xa76c495d: vmovsd (%esp),%xmm0
  0xa76c4962: vmovsd 0x8(%esp),%xmm1
  0xa76c4968: add    $0x10,%esp
  0xa76c496b: popf   
  0xa76c496c: popa   
  0xa76c496d: pop    %eax
  0xa76c496e: mov    %esp,%esi
  0xa76c4970: sub    $0x30,%esp
  0xa76c4973: mov    %ecx,0x2c(%esp)
  0xa76c4977: mov    %edx,0x28(%esp)
  0xa76c497b: mov    0x30(%esp),%edi
  0xa76c497f: mov    %edi,0x24(%esp)
  0xa76c4983: mov    0x34(%esp),%edi
  0xa76c4987: mov    %edi,0x20(%esp)
  0xa76c498b: mov    0x38(%esp),%edi
  0xa76c498f: mov    %edi,0x1c(%esp)
  0xa76c4993: mov    0x3c(%esp),%edi
  0xa76c4997: mov    %edi,0x18(%esp)
  0xa76c499b: mov    0x40(%esp),%edi
  0xa76c499f: mov    %edi,0x14(%esp)
  0xa76c49a3: mov    0x44(%esp),%edi
  0xa76c49a7: mov    %edi,0x10(%esp)
  0xa76c49ab: mov    0x48(%esp),%edi
  0xa76c49af: mov    %edi,0xc(%esp)
  0xa76c49b3: mov    0x4c(%esp),%edi
  0xa76c49b7: mov    %edi,0x8(%esp)
  0xa76c49bb: mov    0x50(%esp),%edi
  0xa76c49bf: mov    %edi,0x4(%esp)
  0xa76c49c3: mov    0x54(%esp),%edi
  0xa76c49c7: mov    %edi,(%esp)
  0xa76c49ca: mov    0x28(%ebx),%ecx
  0xa76c49cd: push   %eax
  0xa76c49ce: jmp    *%ecx

AHE@0xb66906ac: 0xaaaaaaaa i2c: 0xa76c4a80 c2i: 0xa76c4b57 c2iUV: 0xa76c4b36
i2c argument handler #17 for: receiver (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;IILjava/lang/String;[B)Ljava/lang/reflect/Field; (340 bytes generated)
c2i argument handler starts at 0xa76c4b57
  0xa76c4a80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c4a83: mov    $0xa75b1ac0,%edi
  0xa76c4a88: cmp    %edi,%eax
  0xa76c4a8a: jbe    0xa76c4a9d
  0xa76c4a90: mov    $0xa7691ac0,%edi
  0xa76c4a95: cmp    %edi,%eax
  0xa76c4a97: jb     0xa76c4ae2
  0xa76c4a9d: mov    $0xa75af400,%edi
  0xa76c4aa2: cmp    %edi,%eax
  0xa76c4aa4: jbe    0xa76c4ab7
  0xa76c4aaa: mov    $0xa75b1728,%edi
  0xa76c4aaf: cmp    %edi,%eax
  0xa76c4ab1: jb     0xa76c4ae2
  0xa76c4ab7: mov    $0xa76b4e40,%edi
  0xa76c4abc: cmp    %edi,%eax
  0xa76c4abe: jbe    0xa76c4ad1
  0xa76c4ac4: mov    $0xa76ba430,%edi
  0xa76c4ac9: cmp    %edi,%eax
  0xa76c4acb: jb     0xa76c4ae2
  ;; i2c adapter must return to an interpreter frame
  0xa76c4ad1: push   $0xb75a2830
  0xa76c4ad6: call   0xa76c4adb
  0xa76c4adb: pusha  
  0xa76c4adc: call   0xb7052f32
  0xa76c4ae1: hlt    
  ;; } verify_i2ce 
  0xa76c4ae2: mov    %esp,%edi
  0xa76c4ae4: sub    $0x18,%esp
  0xa76c4ae7: and    $0xfffffff0,%esp
  0xa76c4aea: push   %eax
  0xa76c4aeb: mov    %edi,%eax
  0xa76c4aed: mov    0x30(%ebx),%edi
  0xa76c4af0: mov    0x20(%eax),%ecx
  0xa76c4af3: mov    0x1c(%eax),%edx
  0xa76c4af6: mov    0x18(%eax),%esi
  0xa76c4af9: mov    %esi,0x4(%esp)
  0xa76c4afd: mov    0x14(%eax),%esi
  0xa76c4b00: mov    %esi,0x8(%esp)
  0xa76c4b04: mov    0x10(%eax),%esi
  0xa76c4b07: mov    %esi,0xc(%esp)
  0xa76c4b0b: mov    0xc(%eax),%esi
  0xa76c4b0e: mov    %esi,0x10(%esp)
  0xa76c4b12: mov    0x8(%eax),%esi
  0xa76c4b15: mov    %esi,0x14(%esp)
  0xa76c4b19: mov    0x4(%eax),%esi
  0xa76c4b1c: mov    %esi,0x18(%esp)
  0xa76c4b20: mov    %esp,%eax
  0xa76c4b22: shr    $0xc,%eax
  0xa76c4b25: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c4b2c: mov    %ebx,0x16c(%eax)
  0xa76c4b32: mov    %ebx,%eax
  0xa76c4b34: jmp    *%edi
  0xa76c4b36: mov    0x4(%ecx),%ebx
  0xa76c4b39: cmp    0x8(%eax),%ebx
  0xa76c4b3c: mov    0x4(%eax),%ebx
  0xa76c4b3f: jne    0xa76c4b52
  0xa76c4b45: cmpl   $0x0,0x34(%ebx)
  0xa76c4b4c: je     0xa76c4b91
  0xa76c4b52: jmp    0xa7692560
  0xa76c4b57: cmpl   $0x0,0x34(%ebx)
  0xa76c4b5e: je     0xa76c4b91
  0xa76c4b64: mov    (%esp),%eax
  0xa76c4b67: pusha  
  0xa76c4b68: pushf  
  0xa76c4b69: sub    $0x10,%esp
  0xa76c4b6c: vmovsd %xmm0,(%esp)
  0xa76c4b71: vmovsd %xmm1,0x8(%esp)
  0xa76c4b77: push   %eax
  0xa76c4b78: push   %ebx
  0xa76c4b79: call   0xb71d62fc
  0xa76c4b7e: add    $0x8,%esp
  0xa76c4b81: vmovsd (%esp),%xmm0
  0xa76c4b86: vmovsd 0x8(%esp),%xmm1
  0xa76c4b8c: add    $0x10,%esp
  0xa76c4b8f: popf   
  0xa76c4b90: popa   
  0xa76c4b91: pop    %eax
  0xa76c4b92: mov    %esp,%esi
  0xa76c4b94: sub    $0x20,%esp
  0xa76c4b97: mov    %ecx,0x1c(%esp)
  0xa76c4b9b: mov    %edx,0x18(%esp)
  0xa76c4b9f: mov    0x20(%esp),%edi
  0xa76c4ba3: mov    %edi,0x14(%esp)
  0xa76c4ba7: mov    0x24(%esp),%edi
  0xa76c4bab: mov    %edi,0x10(%esp)
  0xa76c4baf: mov    0x28(%esp),%edi
  0xa76c4bb3: mov    %edi,0xc(%esp)
  0xa76c4bb7: mov    0x2c(%esp),%edi
  0xa76c4bbb: mov    %edi,0x8(%esp)
  0xa76c4bbf: mov    0x30(%esp),%edi
  0xa76c4bc3: mov    %edi,0x4(%esp)
  0xa76c4bc7: mov    0x34(%esp),%edi
  0xa76c4bcb: mov    %edi,(%esp)
  0xa76c4bce: mov    0x28(%ebx),%ecx
  0xa76c4bd1: push   %eax
  0xa76c4bd2: jmp    *%ecx

AHE@0xb66906d0: 0xaaaaaaaaa0000000 i2c: 0xa76c4c80 c2i: 0xa76c4d5e c2iUV: 0xa76c4d3d
i2c argument handler #18 for: receiver (Ljava/lang/Class;[Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B)Ljava/lang/reflect/Constructor; (355 bytes generated)
c2i argument handler starts at 0xa76c4d5e
  0xa76c4c80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c4c83: mov    $0xa75b1ac0,%edi
  0xa76c4c88: cmp    %edi,%eax
  0xa76c4c8a: jbe    0xa76c4c9d
  0xa76c4c90: mov    $0xa7691ac0,%edi
  0xa76c4c95: cmp    %edi,%eax
  0xa76c4c97: jb     0xa76c4ce2
  0xa76c4c9d: mov    $0xa75af400,%edi
  0xa76c4ca2: cmp    %edi,%eax
  0xa76c4ca4: jbe    0xa76c4cb7
  0xa76c4caa: mov    $0xa75b1728,%edi
  0xa76c4caf: cmp    %edi,%eax
  0xa76c4cb1: jb     0xa76c4ce2
  0xa76c4cb7: mov    $0xa76b4e40,%edi
  0xa76c4cbc: cmp    %edi,%eax
  0xa76c4cbe: jbe    0xa76c4cd1
  0xa76c4cc4: mov    $0xa76ba430,%edi
  0xa76c4cc9: cmp    %edi,%eax
  0xa76c4ccb: jb     0xa76c4ce2
  ;; i2c adapter must return to an interpreter frame
  0xa76c4cd1: push   $0xb75a2830
  0xa76c4cd6: call   0xa76c4cdb
  0xa76c4cdb: pusha  
  0xa76c4cdc: call   0xb7052f32
  0xa76c4ce1: hlt    
  ;; } verify_i2ce 
  0xa76c4ce2: mov    %esp,%edi
  0xa76c4ce4: sub    $0x20,%esp
  0xa76c4ce7: and    $0xfffffff0,%esp
  0xa76c4cea: push   %eax
  0xa76c4ceb: mov    %edi,%eax
  0xa76c4ced: mov    0x30(%ebx),%edi
  0xa76c4cf0: mov    0x24(%eax),%ecx
  0xa76c4cf3: mov    0x20(%eax),%edx
  0xa76c4cf6: mov    0x1c(%eax),%esi
  0xa76c4cf9: mov    %esi,0x4(%esp)
  0xa76c4cfd: mov    0x18(%eax),%esi
  0xa76c4d00: mov    %esi,0x8(%esp)
  0xa76c4d04: mov    0x14(%eax),%esi
  0xa76c4d07: mov    %esi,0xc(%esp)
  0xa76c4d0b: mov    0x10(%eax),%esi
  0xa76c4d0e: mov    %esi,0x10(%esp)
  0xa76c4d12: mov    0xc(%eax),%esi
  0xa76c4d15: mov    %esi,0x14(%esp)
  0xa76c4d19: mov    0x8(%eax),%esi
  0xa76c4d1c: mov    %esi,0x18(%esp)
  0xa76c4d20: mov    0x4(%eax),%esi
  0xa76c4d23: mov    %esi,0x1c(%esp)
  0xa76c4d27: mov    %esp,%eax
  0xa76c4d29: shr    $0xc,%eax
  0xa76c4d2c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c4d33: mov    %ebx,0x16c(%eax)
  0xa76c4d39: mov    %ebx,%eax
  0xa76c4d3b: jmp    *%edi
  0xa76c4d3d: mov    0x4(%ecx),%ebx
  0xa76c4d40: cmp    0x8(%eax),%ebx
  0xa76c4d43: mov    0x4(%eax),%ebx
  0xa76c4d46: jne    0xa76c4d59
  0xa76c4d4c: cmpl   $0x0,0x34(%ebx)
  0xa76c4d53: je     0xa76c4d98
  0xa76c4d59: jmp    0xa7692560
  0xa76c4d5e: cmpl   $0x0,0x34(%ebx)
  0xa76c4d65: je     0xa76c4d98
  0xa76c4d6b: mov    (%esp),%eax
  0xa76c4d6e: pusha  
  0xa76c4d6f: pushf  
  0xa76c4d70: sub    $0x10,%esp
  0xa76c4d73: vmovsd %xmm0,(%esp)
  0xa76c4d78: vmovsd %xmm1,0x8(%esp)
  0xa76c4d7e: push   %eax
  0xa76c4d7f: push   %ebx
  0xa76c4d80: call   0xb71d62fc
  0xa76c4d85: add    $0x8,%esp
  0xa76c4d88: vmovsd (%esp),%xmm0
  0xa76c4d8d: vmovsd 0x8(%esp),%xmm1
  0xa76c4d93: add    $0x10,%esp
  0xa76c4d96: popf   
  0xa76c4d97: popa   
  0xa76c4d98: pop    %eax
  0xa76c4d99: mov    %esp,%esi
  0xa76c4d9b: sub    $0x24,%esp
  0xa76c4d9e: mov    %ecx,0x20(%esp)
  0xa76c4da2: mov    %edx,0x1c(%esp)
  0xa76c4da6: mov    0x24(%esp),%edi
  0xa76c4daa: mov    %edi,0x18(%esp)
  0xa76c4dae: mov    0x28(%esp),%edi
  0xa76c4db2: mov    %edi,0x14(%esp)
  0xa76c4db6: mov    0x2c(%esp),%edi
  0xa76c4dba: mov    %edi,0x10(%esp)
  0xa76c4dbe: mov    0x30(%esp),%edi
  0xa76c4dc2: mov    %edi,0xc(%esp)
  0xa76c4dc6: mov    0x34(%esp),%edi
  0xa76c4dca: mov    %edi,0x8(%esp)
  0xa76c4dce: mov    0x38(%esp),%edi
  0xa76c4dd2: mov    %edi,0x4(%esp)
  0xa76c4dd6: mov    0x3c(%esp),%edi
  0xa76c4dda: mov    %edi,(%esp)
  0xa76c4ddd: mov    0x28(%ebx),%ecx
  0xa76c4de0: push   %eax
  0xa76c4de1: jmp    *%ecx

AHE@0xb66906f4: 0xaa600000 i2c: 0xa76c4e80 c2i: 0xa76c4f2f c2iUV: 0xa76c4f0e
i2c argument handler #19 for: receiver (IF)V (258 bytes generated)
c2i argument handler starts at 0xa76c4f2f
  0xa76c4e80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c4e83: mov    $0xa75b1ac0,%edi
  0xa76c4e88: cmp    %edi,%eax
  0xa76c4e8a: jbe    0xa76c4e9d
  0xa76c4e90: mov    $0xa7691ac0,%edi
  0xa76c4e95: cmp    %edi,%eax
  0xa76c4e97: jb     0xa76c4ee2
  0xa76c4e9d: mov    $0xa75af400,%edi
  0xa76c4ea2: cmp    %edi,%eax
  0xa76c4ea4: jbe    0xa76c4eb7
  0xa76c4eaa: mov    $0xa75b1728,%edi
  0xa76c4eaf: cmp    %edi,%eax
  0xa76c4eb1: jb     0xa76c4ee2
  0xa76c4eb7: mov    $0xa76b4e40,%edi
  0xa76c4ebc: cmp    %edi,%eax
  0xa76c4ebe: jbe    0xa76c4ed1
  0xa76c4ec4: mov    $0xa76ba430,%edi
  0xa76c4ec9: cmp    %edi,%eax
  0xa76c4ecb: jb     0xa76c4ee2
  ;; i2c adapter must return to an interpreter frame
  0xa76c4ed1: push   $0xb75a2830
  0xa76c4ed6: call   0xa76c4edb
  0xa76c4edb: pusha  
  0xa76c4edc: call   0xb7052f32
  0xa76c4ee1: hlt    
  ;; } verify_i2ce 
  0xa76c4ee2: mov    %esp,%edi
  0xa76c4ee4: and    $0xfffffff0,%esp
  0xa76c4ee7: push   %eax
  0xa76c4ee8: mov    %edi,%eax
  0xa76c4eea: mov    0x30(%ebx),%edi
  0xa76c4eed: mov    0xc(%eax),%ecx
  0xa76c4ef0: mov    0x8(%eax),%edx
  0xa76c4ef3: vmovss 0x4(%eax),%xmm0
  0xa76c4ef8: mov    %esp,%eax
  0xa76c4efa: shr    $0xc,%eax
  0xa76c4efd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c4f04: mov    %ebx,0x16c(%eax)
  0xa76c4f0a: mov    %ebx,%eax
  0xa76c4f0c: jmp    *%edi
  0xa76c4f0e: mov    0x4(%ecx),%ebx
  0xa76c4f11: cmp    0x8(%eax),%ebx
  0xa76c4f14: mov    0x4(%eax),%ebx
  0xa76c4f17: jne    0xa76c4f2a
  0xa76c4f1d: cmpl   $0x0,0x34(%ebx)
  0xa76c4f24: je     0xa76c4f69
  0xa76c4f2a: jmp    0xa7692560
  0xa76c4f2f: cmpl   $0x0,0x34(%ebx)
  0xa76c4f36: je     0xa76c4f69
  0xa76c4f3c: mov    (%esp),%eax
  0xa76c4f3f: pusha  
  0xa76c4f40: pushf  
  0xa76c4f41: sub    $0x10,%esp
  0xa76c4f44: vmovsd %xmm0,(%esp)
  0xa76c4f49: vmovsd %xmm1,0x8(%esp)
  0xa76c4f4f: push   %eax
  0xa76c4f50: push   %ebx
  0xa76c4f51: call   0xb71d62fc
  0xa76c4f56: add    $0x8,%esp
  0xa76c4f59: vmovsd (%esp),%xmm0
  0xa76c4f5e: vmovsd 0x8(%esp),%xmm1
  0xa76c4f64: add    $0x10,%esp
  0xa76c4f67: popf   
  0xa76c4f68: popa   
  0xa76c4f69: pop    %eax
  0xa76c4f6a: mov    %esp,%esi
  0xa76c4f6c: sub    $0xc,%esp
  0xa76c4f6f: mov    %ecx,0x8(%esp)
  0xa76c4f73: mov    %edx,0x4(%esp)
  0xa76c4f77: vmovss %xmm0,(%esp)
  0xa76c4f7c: mov    0x28(%ebx),%ecx
  0xa76c4f7f: push   %eax
  0xa76c4f80: jmp    *%ecx

AHE@0xb6690718: 0x66000000 i2c: 0xa76c5040 c2i: 0xa76c50ee c2iUV: 0xa76c50cd
i2c argument handler #20 for: static (FF)F (255 bytes generated)
c2i argument handler starts at 0xa76c50ee
  0xa76c5040: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c5043: mov    $0xa75b1ac0,%edi
  0xa76c5048: cmp    %edi,%eax
  0xa76c504a: jbe    0xa76c505d
  0xa76c5050: mov    $0xa7691ac0,%edi
  0xa76c5055: cmp    %edi,%eax
  0xa76c5057: jb     0xa76c50a2
  0xa76c505d: mov    $0xa75af400,%edi
  0xa76c5062: cmp    %edi,%eax
  0xa76c5064: jbe    0xa76c5077
  0xa76c506a: mov    $0xa75b1728,%edi
  0xa76c506f: cmp    %edi,%eax
  0xa76c5071: jb     0xa76c50a2
  0xa76c5077: mov    $0xa76b4e40,%edi
  0xa76c507c: cmp    %edi,%eax
  0xa76c507e: jbe    0xa76c5091
  0xa76c5084: mov    $0xa76ba430,%edi
  0xa76c5089: cmp    %edi,%eax
  0xa76c508b: jb     0xa76c50a2
  ;; i2c adapter must return to an interpreter frame
  0xa76c5091: push   $0xb75a2830
  0xa76c5096: call   0xa76c509b
  0xa76c509b: pusha  
  0xa76c509c: call   0xb7052f32
  0xa76c50a1: hlt    
  ;; } verify_i2ce 
  0xa76c50a2: mov    %esp,%edi
  0xa76c50a4: and    $0xfffffff0,%esp
  0xa76c50a7: push   %eax
  0xa76c50a8: mov    %edi,%eax
  0xa76c50aa: mov    0x30(%ebx),%edi
  0xa76c50ad: vmovss 0x8(%eax),%xmm0
  0xa76c50b2: vmovss 0x4(%eax),%xmm1
  0xa76c50b7: mov    %esp,%eax
  0xa76c50b9: shr    $0xc,%eax
  0xa76c50bc: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c50c3: mov    %ebx,0x16c(%eax)
  0xa76c50c9: mov    %ebx,%eax
  0xa76c50cb: jmp    *%edi
  0xa76c50cd: mov    0x4(%ecx),%ebx
  0xa76c50d0: cmp    0x8(%eax),%ebx
  0xa76c50d3: mov    0x4(%eax),%ebx
  0xa76c50d6: jne    0xa76c50e9
  0xa76c50dc: cmpl   $0x0,0x34(%ebx)
  0xa76c50e3: je     0xa76c5128
  0xa76c50e9: jmp    0xa7692560
  0xa76c50ee: cmpl   $0x0,0x34(%ebx)
  0xa76c50f5: je     0xa76c5128
  0xa76c50fb: mov    (%esp),%eax
  0xa76c50fe: pusha  
  0xa76c50ff: pushf  
  0xa76c5100: sub    $0x10,%esp
  0xa76c5103: vmovsd %xmm0,(%esp)
  0xa76c5108: vmovsd %xmm1,0x8(%esp)
  0xa76c510e: push   %eax
  0xa76c510f: push   %ebx
  0xa76c5110: call   0xb71d62fc
  0xa76c5115: add    $0x8,%esp
  0xa76c5118: vmovsd (%esp),%xmm0
  0xa76c511d: vmovsd 0x8(%esp),%xmm1
  0xa76c5123: add    $0x10,%esp
  0xa76c5126: popf   
  0xa76c5127: popa   
  0xa76c5128: pop    %eax
  0xa76c5129: mov    %esp,%esi
  0xa76c512b: sub    $0x8,%esp
  0xa76c512e: vmovss %xmm0,0x4(%esp)
  0xa76c5134: vmovss %xmm1,(%esp)
  0xa76c5139: mov    0x28(%ebx),%ecx
  0xa76c513c: push   %eax
  0xa76c513d: jmp    *%ecx

AHE@0xb669073c: 0xa6000000 i2c: 0xa76c51c0 c2i: 0xa76c526c c2iUV: 0xa76c524b
i2c argument handler #21 for: receiver (F)V (251 bytes generated)
c2i argument handler starts at 0xa76c526c
  0xa76c51c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c51c3: mov    $0xa75b1ac0,%edi
  0xa76c51c8: cmp    %edi,%eax
  0xa76c51ca: jbe    0xa76c51dd
  0xa76c51d0: mov    $0xa7691ac0,%edi
  0xa76c51d5: cmp    %edi,%eax
  0xa76c51d7: jb     0xa76c5222
  0xa76c51dd: mov    $0xa75af400,%edi
  0xa76c51e2: cmp    %edi,%eax
  0xa76c51e4: jbe    0xa76c51f7
  0xa76c51ea: mov    $0xa75b1728,%edi
  0xa76c51ef: cmp    %edi,%eax
  0xa76c51f1: jb     0xa76c5222
  0xa76c51f7: mov    $0xa76b4e40,%edi
  0xa76c51fc: cmp    %edi,%eax
  0xa76c51fe: jbe    0xa76c5211
  0xa76c5204: mov    $0xa76ba430,%edi
  0xa76c5209: cmp    %edi,%eax
  0xa76c520b: jb     0xa76c5222
  ;; i2c adapter must return to an interpreter frame
  0xa76c5211: push   $0xb75a2830
  0xa76c5216: call   0xa76c521b
  0xa76c521b: pusha  
  0xa76c521c: call   0xb7052f32
  0xa76c5221: hlt    
  ;; } verify_i2ce 
  0xa76c5222: mov    %esp,%edi
  0xa76c5224: and    $0xfffffff0,%esp
  0xa76c5227: push   %eax
  0xa76c5228: mov    %edi,%eax
  0xa76c522a: mov    0x30(%ebx),%edi
  0xa76c522d: mov    0x8(%eax),%ecx
  0xa76c5230: vmovss 0x4(%eax),%xmm0
  0xa76c5235: mov    %esp,%eax
  0xa76c5237: shr    $0xc,%eax
  0xa76c523a: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c5241: mov    %ebx,0x16c(%eax)
  0xa76c5247: mov    %ebx,%eax
  0xa76c5249: jmp    *%edi
  0xa76c524b: mov    0x4(%ecx),%ebx
  0xa76c524e: cmp    0x8(%eax),%ebx
  0xa76c5251: mov    0x4(%eax),%ebx
  0xa76c5254: jne    0xa76c5267
  0xa76c525a: cmpl   $0x0,0x34(%ebx)
  0xa76c5261: je     0xa76c52a6
  0xa76c5267: jmp    0xa7692560
  0xa76c526c: cmpl   $0x0,0x34(%ebx)
  0xa76c5273: je     0xa76c52a6
  0xa76c5279: mov    (%esp),%eax
  0xa76c527c: pusha  
  0xa76c527d: pushf  
  0xa76c527e: sub    $0x10,%esp
  0xa76c5281: vmovsd %xmm0,(%esp)
  0xa76c5286: vmovsd %xmm1,0x8(%esp)
  0xa76c528c: push   %eax
  0xa76c528d: push   %ebx
  0xa76c528e: call   0xb71d62fc
  0xa76c5293: add    $0x8,%esp
  0xa76c5296: vmovsd (%esp),%xmm0
  0xa76c529b: vmovsd 0x8(%esp),%xmm1
  0xa76c52a1: add    $0x10,%esp
  0xa76c52a4: popf   
  0xa76c52a5: popa   
  0xa76c52a6: pop    %eax
  0xa76c52a7: mov    %esp,%esi
  0xa76c52a9: sub    $0x8,%esp
  0xa76c52ac: mov    %ecx,0x4(%esp)
  0xa76c52b0: vmovss %xmm0,(%esp)
  0xa76c52b5: mov    0x28(%ebx),%ecx
  0xa76c52b8: push   %eax
  0xa76c52b9: jmp    *%ecx

AHE@0xb6690760: 0xa7e00000 i2c: 0xa76c5340 c2i: 0xa76c53ec c2iUV: 0xa76c53cb
i2c argument handler #22 for: receiver (D)V (251 bytes generated)
c2i argument handler starts at 0xa76c53ec
  0xa76c5340: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c5343: mov    $0xa75b1ac0,%edi
  0xa76c5348: cmp    %edi,%eax
  0xa76c534a: jbe    0xa76c535d
  0xa76c5350: mov    $0xa7691ac0,%edi
  0xa76c5355: cmp    %edi,%eax
  0xa76c5357: jb     0xa76c53a2
  0xa76c535d: mov    $0xa75af400,%edi
  0xa76c5362: cmp    %edi,%eax
  0xa76c5364: jbe    0xa76c5377
  0xa76c536a: mov    $0xa75b1728,%edi
  0xa76c536f: cmp    %edi,%eax
  0xa76c5371: jb     0xa76c53a2
  0xa76c5377: mov    $0xa76b4e40,%edi
  0xa76c537c: cmp    %edi,%eax
  0xa76c537e: jbe    0xa76c5391
  0xa76c5384: mov    $0xa76ba430,%edi
  0xa76c5389: cmp    %edi,%eax
  0xa76c538b: jb     0xa76c53a2
  ;; i2c adapter must return to an interpreter frame
  0xa76c5391: push   $0xb75a2830
  0xa76c5396: call   0xa76c539b
  0xa76c539b: pusha  
  0xa76c539c: call   0xb7052f32
  0xa76c53a1: hlt    
  ;; } verify_i2ce 
  0xa76c53a2: mov    %esp,%edi
  0xa76c53a4: and    $0xfffffff0,%esp
  0xa76c53a7: push   %eax
  0xa76c53a8: mov    %edi,%eax
  0xa76c53aa: mov    0x30(%ebx),%edi
  0xa76c53ad: mov    0xc(%eax),%ecx
  0xa76c53b0: vmovsd 0x4(%eax),%xmm0
  0xa76c53b5: mov    %esp,%eax
  0xa76c53b7: shr    $0xc,%eax
  0xa76c53ba: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c53c1: mov    %ebx,0x16c(%eax)
  0xa76c53c7: mov    %ebx,%eax
  0xa76c53c9: jmp    *%edi
  0xa76c53cb: mov    0x4(%ecx),%ebx
  0xa76c53ce: cmp    0x8(%eax),%ebx
  0xa76c53d1: mov    0x4(%eax),%ebx
  0xa76c53d4: jne    0xa76c53e7
  0xa76c53da: cmpl   $0x0,0x34(%ebx)
  0xa76c53e1: je     0xa76c5426
  0xa76c53e7: jmp    0xa7692560
  0xa76c53ec: cmpl   $0x0,0x34(%ebx)
  0xa76c53f3: je     0xa76c5426
  0xa76c53f9: mov    (%esp),%eax
  0xa76c53fc: pusha  
  0xa76c53fd: pushf  
  0xa76c53fe: sub    $0x10,%esp
  0xa76c5401: vmovsd %xmm0,(%esp)
  0xa76c5406: vmovsd %xmm1,0x8(%esp)
  0xa76c540c: push   %eax
  0xa76c540d: push   %ebx
  0xa76c540e: call   0xb71d62fc
  0xa76c5413: add    $0x8,%esp
  0xa76c5416: vmovsd (%esp),%xmm0
  0xa76c541b: vmovsd 0x8(%esp),%xmm1
  0xa76c5421: add    $0x10,%esp
  0xa76c5424: popf   
  0xa76c5425: popa   
  0xa76c5426: pop    %eax
  0xa76c5427: mov    %esp,%esi
  0xa76c5429: sub    $0xc,%esp
  0xa76c542c: mov    %ecx,0x8(%esp)
  0xa76c5430: vmovsd %xmm0,(%esp)
  0xa76c5435: mov    0x28(%ebx),%ecx
  0xa76c5438: push   %eax
  0xa76c5439: jmp    *%ecx

AHE@0xb6690784: 0x67e00000 i2c: 0xa76c54c0 c2i: 0xa76c556e c2iUV: 0xa76c554d
i2c argument handler #23 for: static (FD)F (255 bytes generated)
c2i argument handler starts at 0xa76c556e
  0xa76c54c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c54c3: mov    $0xa75b1ac0,%edi
  0xa76c54c8: cmp    %edi,%eax
  0xa76c54ca: jbe    0xa76c54dd
  0xa76c54d0: mov    $0xa7691ac0,%edi
  0xa76c54d5: cmp    %edi,%eax
  0xa76c54d7: jb     0xa76c5522
  0xa76c54dd: mov    $0xa75af400,%edi
  0xa76c54e2: cmp    %edi,%eax
  0xa76c54e4: jbe    0xa76c54f7
  0xa76c54ea: mov    $0xa75b1728,%edi
  0xa76c54ef: cmp    %edi,%eax
  0xa76c54f1: jb     0xa76c5522
  0xa76c54f7: mov    $0xa76b4e40,%edi
  0xa76c54fc: cmp    %edi,%eax
  0xa76c54fe: jbe    0xa76c5511
  0xa76c5504: mov    $0xa76ba430,%edi
  0xa76c5509: cmp    %edi,%eax
  0xa76c550b: jb     0xa76c5522
  ;; i2c adapter must return to an interpreter frame
  0xa76c5511: push   $0xb75a2830
  0xa76c5516: call   0xa76c551b
  0xa76c551b: pusha  
  0xa76c551c: call   0xb7052f32
  0xa76c5521: hlt    
  ;; } verify_i2ce 
  0xa76c5522: mov    %esp,%edi
  0xa76c5524: and    $0xfffffff0,%esp
  0xa76c5527: push   %eax
  0xa76c5528: mov    %edi,%eax
  0xa76c552a: mov    0x30(%ebx),%edi
  0xa76c552d: vmovss 0xc(%eax),%xmm1
  0xa76c5532: vmovsd 0x4(%eax),%xmm0
  0xa76c5537: mov    %esp,%eax
  0xa76c5539: shr    $0xc,%eax
  0xa76c553c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c5543: mov    %ebx,0x16c(%eax)
  0xa76c5549: mov    %ebx,%eax
  0xa76c554b: jmp    *%edi
  0xa76c554d: mov    0x4(%ecx),%ebx
  0xa76c5550: cmp    0x8(%eax),%ebx
  0xa76c5553: mov    0x4(%eax),%ebx
  0xa76c5556: jne    0xa76c5569
  0xa76c555c: cmpl   $0x0,0x34(%ebx)
  0xa76c5563: je     0xa76c55a8
  0xa76c5569: jmp    0xa7692560
  0xa76c556e: cmpl   $0x0,0x34(%ebx)
  0xa76c5575: je     0xa76c55a8
  0xa76c557b: mov    (%esp),%eax
  0xa76c557e: pusha  
  0xa76c557f: pushf  
  0xa76c5580: sub    $0x10,%esp
  0xa76c5583: vmovsd %xmm0,(%esp)
  0xa76c5588: vmovsd %xmm1,0x8(%esp)
  0xa76c558e: push   %eax
  0xa76c558f: push   %ebx
  0xa76c5590: call   0xb71d62fc
  0xa76c5595: add    $0x8,%esp
  0xa76c5598: vmovsd (%esp),%xmm0
  0xa76c559d: vmovsd 0x8(%esp),%xmm1
  0xa76c55a3: add    $0x10,%esp
  0xa76c55a6: popf   
  0xa76c55a7: popa   
  0xa76c55a8: pop    %eax
  0xa76c55a9: mov    %esp,%esi
  0xa76c55ab: sub    $0xc,%esp
  0xa76c55ae: vmovss %xmm1,0x8(%esp)
  0xa76c55b4: vmovsd %xmm0,(%esp)
  0xa76c55b9: mov    0x28(%ebx),%ecx
  0xa76c55bc: push   %eax
  0xa76c55bd: jmp    *%ecx

AHE@0xb66907a8: 0x7e7e0000 i2c: 0xa76c5640 c2i: 0xa76c56ee c2iUV: 0xa76c56cd
i2c argument handler #24 for: static (DD)D (255 bytes generated)
c2i argument handler starts at 0xa76c56ee
  0xa76c5640: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c5643: mov    $0xa75b1ac0,%edi
  0xa76c5648: cmp    %edi,%eax
  0xa76c564a: jbe    0xa76c565d
  0xa76c5650: mov    $0xa7691ac0,%edi
  0xa76c5655: cmp    %edi,%eax
  0xa76c5657: jb     0xa76c56a2
  0xa76c565d: mov    $0xa75af400,%edi
  0xa76c5662: cmp    %edi,%eax
  0xa76c5664: jbe    0xa76c5677
  0xa76c566a: mov    $0xa75b1728,%edi
  0xa76c566f: cmp    %edi,%eax
  0xa76c5671: jb     0xa76c56a2
  0xa76c5677: mov    $0xa76b4e40,%edi
  0xa76c567c: cmp    %edi,%eax
  0xa76c567e: jbe    0xa76c5691
  0xa76c5684: mov    $0xa76ba430,%edi
  0xa76c5689: cmp    %edi,%eax
  0xa76c568b: jb     0xa76c56a2
  ;; i2c adapter must return to an interpreter frame
  0xa76c5691: push   $0xb75a2830
  0xa76c5696: call   0xa76c569b
  0xa76c569b: pusha  
  0xa76c569c: call   0xb7052f32
  0xa76c56a1: hlt    
  ;; } verify_i2ce 
  0xa76c56a2: mov    %esp,%edi
  0xa76c56a4: and    $0xfffffff0,%esp
  0xa76c56a7: push   %eax
  0xa76c56a8: mov    %edi,%eax
  0xa76c56aa: mov    0x30(%ebx),%edi
  0xa76c56ad: vmovsd 0xc(%eax),%xmm0
  0xa76c56b2: vmovsd 0x4(%eax),%xmm1
  0xa76c56b7: mov    %esp,%eax
  0xa76c56b9: shr    $0xc,%eax
  0xa76c56bc: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c56c3: mov    %ebx,0x16c(%eax)
  0xa76c56c9: mov    %ebx,%eax
  0xa76c56cb: jmp    *%edi
  0xa76c56cd: mov    0x4(%ecx),%ebx
  0xa76c56d0: cmp    0x8(%eax),%ebx
  0xa76c56d3: mov    0x4(%eax),%ebx
  0xa76c56d6: jne    0xa76c56e9
  0xa76c56dc: cmpl   $0x0,0x34(%ebx)
  0xa76c56e3: je     0xa76c5728
  0xa76c56e9: jmp    0xa7692560
  0xa76c56ee: cmpl   $0x0,0x34(%ebx)
  0xa76c56f5: je     0xa76c5728
  0xa76c56fb: mov    (%esp),%eax
  0xa76c56fe: pusha  
  0xa76c56ff: pushf  
  0xa76c5700: sub    $0x10,%esp
  0xa76c5703: vmovsd %xmm0,(%esp)
  0xa76c5708: vmovsd %xmm1,0x8(%esp)
  0xa76c570e: push   %eax
  0xa76c570f: push   %ebx
  0xa76c5710: call   0xb71d62fc
  0xa76c5715: add    $0x8,%esp
  0xa76c5718: vmovsd (%esp),%xmm0
  0xa76c571d: vmovsd 0x8(%esp),%xmm1
  0xa76c5723: add    $0x10,%esp
  0xa76c5726: popf   
  0xa76c5727: popa   
  0xa76c5728: pop    %eax
  0xa76c5729: mov    %esp,%esi
  0xa76c572b: sub    $0x10,%esp
  0xa76c572e: vmovsd %xmm0,0x8(%esp)
  0xa76c5734: vmovsd %xmm1,(%esp)
  0xa76c5739: mov    0x28(%ebx),%ecx
  0xa76c573c: push   %eax
  0xa76c573d: jmp    *%ecx

AHE@0xb66907cc: 0xbebe0000 i2c: 0xa76c57c0 c2i: 0xa76c5883 c2iUV: 0xa76c5862
i2c argument handler #25 for: static (JJ)J (296 bytes generated)
c2i argument handler starts at 0xa76c5883
  0xa76c57c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c57c3: mov    $0xa75b1ac0,%edi
  0xa76c57c8: cmp    %edi,%eax
  0xa76c57ca: jbe    0xa76c57dd
  0xa76c57d0: mov    $0xa7691ac0,%edi
  0xa76c57d5: cmp    %edi,%eax
  0xa76c57d7: jb     0xa76c5822
  0xa76c57dd: mov    $0xa75af400,%edi
  0xa76c57e2: cmp    %edi,%eax
  0xa76c57e4: jbe    0xa76c57f7
  0xa76c57ea: mov    $0xa75b1728,%edi
  0xa76c57ef: cmp    %edi,%eax
  0xa76c57f1: jb     0xa76c5822
  0xa76c57f7: mov    $0xa76b4e40,%edi
  0xa76c57fc: cmp    %edi,%eax
  0xa76c57fe: jbe    0xa76c5811
  0xa76c5804: mov    $0xa76ba430,%edi
  0xa76c5809: cmp    %edi,%eax
  0xa76c580b: jb     0xa76c5822
  ;; i2c adapter must return to an interpreter frame
  0xa76c5811: push   $0xb75a2830
  0xa76c5816: call   0xa76c581b
  0xa76c581b: pusha  
  0xa76c581c: call   0xb7052f32
  0xa76c5821: hlt    
  ;; } verify_i2ce 
  0xa76c5822: mov    %esp,%edi
  0xa76c5824: sub    $0x10,%esp
  0xa76c5827: and    $0xfffffff0,%esp
  0xa76c582a: push   %eax
  0xa76c582b: mov    %edi,%eax
  0xa76c582d: mov    0x30(%ebx),%edi
  0xa76c5830: mov    0xc(%eax),%esi
  0xa76c5833: mov    %esi,0x4(%esp)
  0xa76c5837: mov    0x10(%eax),%esi
  0xa76c583a: mov    %esi,0x8(%esp)
  0xa76c583e: mov    0x4(%eax),%esi
  0xa76c5841: mov    %esi,0xc(%esp)
  0xa76c5845: mov    0x8(%eax),%esi
  0xa76c5848: mov    %esi,0x10(%esp)
  0xa76c584c: mov    %esp,%eax
  0xa76c584e: shr    $0xc,%eax
  0xa76c5851: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c5858: mov    %ebx,0x16c(%eax)
  0xa76c585e: mov    %ebx,%eax
  0xa76c5860: jmp    *%edi
  0xa76c5862: mov    0x4(%ecx),%ebx
  0xa76c5865: cmp    0x8(%eax),%ebx
  0xa76c5868: mov    0x4(%eax),%ebx
  0xa76c586b: jne    0xa76c587e
  0xa76c5871: cmpl   $0x0,0x34(%ebx)
  0xa76c5878: je     0xa76c58bd
  0xa76c587e: jmp    0xa7692560
  0xa76c5883: cmpl   $0x0,0x34(%ebx)
  0xa76c588a: je     0xa76c58bd
  0xa76c5890: mov    (%esp),%eax
  0xa76c5893: pusha  
  0xa76c5894: pushf  
  0xa76c5895: sub    $0x10,%esp
  0xa76c5898: vmovsd %xmm0,(%esp)
  0xa76c589d: vmovsd %xmm1,0x8(%esp)
  0xa76c58a3: push   %eax
  0xa76c58a4: push   %ebx
  0xa76c58a5: call   0xb71d62fc
  0xa76c58aa: add    $0x8,%esp
  0xa76c58ad: vmovsd (%esp),%xmm0
  0xa76c58b2: vmovsd 0x8(%esp),%xmm1
  0xa76c58b8: add    $0x10,%esp
  0xa76c58bb: popf   
  0xa76c58bc: popa   
  0xa76c58bd: pop    %eax
  0xa76c58be: mov    %esp,%esi
  0xa76c58c0: sub    $0x10,%esp
  0xa76c58c3: mov    0x10(%esp),%edi
  0xa76c58c7: mov    %edi,0x8(%esp)
  0xa76c58cb: mov    0x14(%esp),%edi
  0xa76c58cf: mov    %edi,0xc(%esp)
  0xa76c58d3: mov    0x18(%esp),%edi
  0xa76c58d7: mov    %edi,(%esp)
  0xa76c58da: mov    0x1c(%esp),%edi
  0xa76c58de: mov    %edi,0x4(%esp)
  0xa76c58e2: mov    0x28(%ebx),%ecx
  0xa76c58e5: push   %eax
  0xa76c58e6: jmp    *%ecx

AHE@0xb66907f0: 0x6a000000 i2c: 0xa76c5980 c2i: 0xa76c5a2c c2iUV: 0xa76c5a0b
i2c argument handler #26 for: static (FI)F (251 bytes generated)
c2i argument handler starts at 0xa76c5a2c
  0xa76c5980: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c5983: mov    $0xa75b1ac0,%edi
  0xa76c5988: cmp    %edi,%eax
  0xa76c598a: jbe    0xa76c599d
  0xa76c5990: mov    $0xa7691ac0,%edi
  0xa76c5995: cmp    %edi,%eax
  0xa76c5997: jb     0xa76c59e2
  0xa76c599d: mov    $0xa75af400,%edi
  0xa76c59a2: cmp    %edi,%eax
  0xa76c59a4: jbe    0xa76c59b7
  0xa76c59aa: mov    $0xa75b1728,%edi
  0xa76c59af: cmp    %edi,%eax
  0xa76c59b1: jb     0xa76c59e2
  0xa76c59b7: mov    $0xa76b4e40,%edi
  0xa76c59bc: cmp    %edi,%eax
  0xa76c59be: jbe    0xa76c59d1
  0xa76c59c4: mov    $0xa76ba430,%edi
  0xa76c59c9: cmp    %edi,%eax
  0xa76c59cb: jb     0xa76c59e2
  ;; i2c adapter must return to an interpreter frame
  0xa76c59d1: push   $0xb75a2830
  0xa76c59d6: call   0xa76c59db
  0xa76c59db: pusha  
  0xa76c59dc: call   0xb7052f32
  0xa76c59e1: hlt    
  ;; } verify_i2ce 
  0xa76c59e2: mov    %esp,%edi
  0xa76c59e4: and    $0xfffffff0,%esp
  0xa76c59e7: push   %eax
  0xa76c59e8: mov    %edi,%eax
  0xa76c59ea: mov    0x30(%ebx),%edi
  0xa76c59ed: vmovss 0x8(%eax),%xmm0
  0xa76c59f2: mov    0x4(%eax),%ecx
  0xa76c59f5: mov    %esp,%eax
  0xa76c59f7: shr    $0xc,%eax
  0xa76c59fa: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c5a01: mov    %ebx,0x16c(%eax)
  0xa76c5a07: mov    %ebx,%eax
  0xa76c5a09: jmp    *%edi
  0xa76c5a0b: mov    0x4(%ecx),%ebx
  0xa76c5a0e: cmp    0x8(%eax),%ebx
  0xa76c5a11: mov    0x4(%eax),%ebx
  0xa76c5a14: jne    0xa76c5a27
  0xa76c5a1a: cmpl   $0x0,0x34(%ebx)
  0xa76c5a21: je     0xa76c5a66
  0xa76c5a27: jmp    0xa7692560
  0xa76c5a2c: cmpl   $0x0,0x34(%ebx)
  0xa76c5a33: je     0xa76c5a66
  0xa76c5a39: mov    (%esp),%eax
  0xa76c5a3c: pusha  
  0xa76c5a3d: pushf  
  0xa76c5a3e: sub    $0x10,%esp
  0xa76c5a41: vmovsd %xmm0,(%esp)
  0xa76c5a46: vmovsd %xmm1,0x8(%esp)
  0xa76c5a4c: push   %eax
  0xa76c5a4d: push   %ebx
  0xa76c5a4e: call   0xb71d62fc
  0xa76c5a53: add    $0x8,%esp
  0xa76c5a56: vmovsd (%esp),%xmm0
  0xa76c5a5b: vmovsd 0x8(%esp),%xmm1
  0xa76c5a61: add    $0x10,%esp
  0xa76c5a64: popf   
  0xa76c5a65: popa   
  0xa76c5a66: pop    %eax
  0xa76c5a67: mov    %esp,%esi
  0xa76c5a69: sub    $0x8,%esp
  0xa76c5a6c: vmovss %xmm0,0x4(%esp)
  0xa76c5a72: mov    %ecx,(%esp)
  0xa76c5a75: mov    0x28(%ebx),%ecx
  0xa76c5a78: push   %eax
  0xa76c5a79: jmp    *%ecx

AHE@0xb6690814: 0x7ea00000 i2c: 0xa76c5b00 c2i: 0xa76c5bac c2iUV: 0xa76c5b8b
i2c argument handler #27 for: static (DI)D (251 bytes generated)
c2i argument handler starts at 0xa76c5bac
  0xa76c5b00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c5b03: mov    $0xa75b1ac0,%edi
  0xa76c5b08: cmp    %edi,%eax
  0xa76c5b0a: jbe    0xa76c5b1d
  0xa76c5b10: mov    $0xa7691ac0,%edi
  0xa76c5b15: cmp    %edi,%eax
  0xa76c5b17: jb     0xa76c5b62
  0xa76c5b1d: mov    $0xa75af400,%edi
  0xa76c5b22: cmp    %edi,%eax
  0xa76c5b24: jbe    0xa76c5b37
  0xa76c5b2a: mov    $0xa75b1728,%edi
  0xa76c5b2f: cmp    %edi,%eax
  0xa76c5b31: jb     0xa76c5b62
  0xa76c5b37: mov    $0xa76b4e40,%edi
  0xa76c5b3c: cmp    %edi,%eax
  0xa76c5b3e: jbe    0xa76c5b51
  0xa76c5b44: mov    $0xa76ba430,%edi
  0xa76c5b49: cmp    %edi,%eax
  0xa76c5b4b: jb     0xa76c5b62
  ;; i2c adapter must return to an interpreter frame
  0xa76c5b51: push   $0xb75a2830
  0xa76c5b56: call   0xa76c5b5b
  0xa76c5b5b: pusha  
  0xa76c5b5c: call   0xb7052f32
  0xa76c5b61: hlt    
  ;; } verify_i2ce 
  0xa76c5b62: mov    %esp,%edi
  0xa76c5b64: and    $0xfffffff0,%esp
  0xa76c5b67: push   %eax
  0xa76c5b68: mov    %edi,%eax
  0xa76c5b6a: mov    0x30(%ebx),%edi
  0xa76c5b6d: vmovsd 0x8(%eax),%xmm0
  0xa76c5b72: mov    0x4(%eax),%ecx
  0xa76c5b75: mov    %esp,%eax
  0xa76c5b77: shr    $0xc,%eax
  0xa76c5b7a: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c5b81: mov    %ebx,0x16c(%eax)
  0xa76c5b87: mov    %ebx,%eax
  0xa76c5b89: jmp    *%edi
  0xa76c5b8b: mov    0x4(%ecx),%ebx
  0xa76c5b8e: cmp    0x8(%eax),%ebx
  0xa76c5b91: mov    0x4(%eax),%ebx
  0xa76c5b94: jne    0xa76c5ba7
  0xa76c5b9a: cmpl   $0x0,0x34(%ebx)
  0xa76c5ba1: je     0xa76c5be6
  0xa76c5ba7: jmp    0xa7692560
  0xa76c5bac: cmpl   $0x0,0x34(%ebx)
  0xa76c5bb3: je     0xa76c5be6
  0xa76c5bb9: mov    (%esp),%eax
  0xa76c5bbc: pusha  
  0xa76c5bbd: pushf  
  0xa76c5bbe: sub    $0x10,%esp
  0xa76c5bc1: vmovsd %xmm0,(%esp)
  0xa76c5bc6: vmovsd %xmm1,0x8(%esp)
  0xa76c5bcc: push   %eax
  0xa76c5bcd: push   %ebx
  0xa76c5bce: call   0xb71d62fc
  0xa76c5bd3: add    $0x8,%esp
  0xa76c5bd6: vmovsd (%esp),%xmm0
  0xa76c5bdb: vmovsd 0x8(%esp),%xmm1
  0xa76c5be1: add    $0x10,%esp
  0xa76c5be4: popf   
  0xa76c5be5: popa   
  0xa76c5be6: pop    %eax
  0xa76c5be7: mov    %esp,%esi
  0xa76c5be9: sub    $0xc,%esp
  0xa76c5bec: vmovsd %xmm0,0x4(%esp)
  0xa76c5bf2: mov    %ecx,(%esp)
  0xa76c5bf5: mov    0x28(%ebx),%ecx
  0xa76c5bf8: push   %eax
  0xa76c5bf9: jmp    *%ecx

AHE@0xb6690838: 0xaa7e0000 i2c: 0xa76c5c80 c2i: 0xa76c5d2f c2iUV: 0xa76c5d0e
i2c argument handler #28 for: receiver (Ljava/lang/Object;D)V (258 bytes generated)
c2i argument handler starts at 0xa76c5d2f
  0xa76c5c80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c5c83: mov    $0xa75b1ac0,%edi
  0xa76c5c88: cmp    %edi,%eax
  0xa76c5c8a: jbe    0xa76c5c9d
  0xa76c5c90: mov    $0xa7691ac0,%edi
  0xa76c5c95: cmp    %edi,%eax
  0xa76c5c97: jb     0xa76c5ce2
  0xa76c5c9d: mov    $0xa75af400,%edi
  0xa76c5ca2: cmp    %edi,%eax
  0xa76c5ca4: jbe    0xa76c5cb7
  0xa76c5caa: mov    $0xa75b1728,%edi
  0xa76c5caf: cmp    %edi,%eax
  0xa76c5cb1: jb     0xa76c5ce2
  0xa76c5cb7: mov    $0xa76b4e40,%edi
  0xa76c5cbc: cmp    %edi,%eax
  0xa76c5cbe: jbe    0xa76c5cd1
  0xa76c5cc4: mov    $0xa76ba430,%edi
  0xa76c5cc9: cmp    %edi,%eax
  0xa76c5ccb: jb     0xa76c5ce2
  ;; i2c adapter must return to an interpreter frame
  0xa76c5cd1: push   $0xb75a2830
  0xa76c5cd6: call   0xa76c5cdb
  0xa76c5cdb: pusha  
  0xa76c5cdc: call   0xb7052f32
  0xa76c5ce1: hlt    
  ;; } verify_i2ce 
  0xa76c5ce2: mov    %esp,%edi
  0xa76c5ce4: and    $0xfffffff0,%esp
  0xa76c5ce7: push   %eax
  0xa76c5ce8: mov    %edi,%eax
  0xa76c5cea: mov    0x30(%ebx),%edi
  0xa76c5ced: mov    0x10(%eax),%ecx
  0xa76c5cf0: mov    0xc(%eax),%edx
  0xa76c5cf3: vmovsd 0x4(%eax),%xmm0
  0xa76c5cf8: mov    %esp,%eax
  0xa76c5cfa: shr    $0xc,%eax
  0xa76c5cfd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c5d04: mov    %ebx,0x16c(%eax)
  0xa76c5d0a: mov    %ebx,%eax
  0xa76c5d0c: jmp    *%edi
  0xa76c5d0e: mov    0x4(%ecx),%ebx
  0xa76c5d11: cmp    0x8(%eax),%ebx
  0xa76c5d14: mov    0x4(%eax),%ebx
  0xa76c5d17: jne    0xa76c5d2a
  0xa76c5d1d: cmpl   $0x0,0x34(%ebx)
  0xa76c5d24: je     0xa76c5d69
  0xa76c5d2a: jmp    0xa7692560
  0xa76c5d2f: cmpl   $0x0,0x34(%ebx)
  0xa76c5d36: je     0xa76c5d69
  0xa76c5d3c: mov    (%esp),%eax
  0xa76c5d3f: pusha  
  0xa76c5d40: pushf  
  0xa76c5d41: sub    $0x10,%esp
  0xa76c5d44: vmovsd %xmm0,(%esp)
  0xa76c5d49: vmovsd %xmm1,0x8(%esp)
  0xa76c5d4f: push   %eax
  0xa76c5d50: push   %ebx
  0xa76c5d51: call   0xb71d62fc
  0xa76c5d56: add    $0x8,%esp
  0xa76c5d59: vmovsd (%esp),%xmm0
  0xa76c5d5e: vmovsd 0x8(%esp),%xmm1
  0xa76c5d64: add    $0x10,%esp
  0xa76c5d67: popf   
  0xa76c5d68: popa   
  0xa76c5d69: pop    %eax
  0xa76c5d6a: mov    %esp,%esi
  0xa76c5d6c: sub    $0x10,%esp
  0xa76c5d6f: mov    %ecx,0xc(%esp)
  0xa76c5d73: mov    %edx,0x8(%esp)
  0xa76c5d77: vmovsd %xmm0,(%esp)
  0xa76c5d7c: mov    0x28(%ebx),%ecx
  0xa76c5d7f: push   %eax
  0xa76c5d80: jmp    *%ecx

AHE@0xb669085c: 0xaabe0000 i2c: 0xa76c5e40 c2i: 0xa76c5efb c2iUV: 0xa76c5eda
i2c argument handler #29 for: receiver (Ljava/lang/Object;J)V (280 bytes generated)
c2i argument handler starts at 0xa76c5efb
  0xa76c5e40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c5e43: mov    $0xa75b1ac0,%edi
  0xa76c5e48: cmp    %edi,%eax
  0xa76c5e4a: jbe    0xa76c5e5d
  0xa76c5e50: mov    $0xa7691ac0,%edi
  0xa76c5e55: cmp    %edi,%eax
  0xa76c5e57: jb     0xa76c5ea2
  0xa76c5e5d: mov    $0xa75af400,%edi
  0xa76c5e62: cmp    %edi,%eax
  0xa76c5e64: jbe    0xa76c5e77
  0xa76c5e6a: mov    $0xa75b1728,%edi
  0xa76c5e6f: cmp    %edi,%eax
  0xa76c5e71: jb     0xa76c5ea2
  0xa76c5e77: mov    $0xa76b4e40,%edi
  0xa76c5e7c: cmp    %edi,%eax
  0xa76c5e7e: jbe    0xa76c5e91
  0xa76c5e84: mov    $0xa76ba430,%edi
  0xa76c5e89: cmp    %edi,%eax
  0xa76c5e8b: jb     0xa76c5ea2
  ;; i2c adapter must return to an interpreter frame
  0xa76c5e91: push   $0xb75a2830
  0xa76c5e96: call   0xa76c5e9b
  0xa76c5e9b: pusha  
  0xa76c5e9c: call   0xb7052f32
  0xa76c5ea1: hlt    
  ;; } verify_i2ce 
  0xa76c5ea2: mov    %esp,%edi
  0xa76c5ea4: sub    $0x8,%esp
  0xa76c5ea7: and    $0xfffffff0,%esp
  0xa76c5eaa: push   %eax
  0xa76c5eab: mov    %edi,%eax
  0xa76c5ead: mov    0x30(%ebx),%edi
  0xa76c5eb0: mov    0x10(%eax),%ecx
  0xa76c5eb3: mov    0xc(%eax),%edx
  0xa76c5eb6: mov    0x4(%eax),%esi
  0xa76c5eb9: mov    %esi,0x4(%esp)
  0xa76c5ebd: mov    0x8(%eax),%esi
  0xa76c5ec0: mov    %esi,0x8(%esp)
  0xa76c5ec4: mov    %esp,%eax
  0xa76c5ec6: shr    $0xc,%eax
  0xa76c5ec9: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c5ed0: mov    %ebx,0x16c(%eax)
  0xa76c5ed6: mov    %ebx,%eax
  0xa76c5ed8: jmp    *%edi
  0xa76c5eda: mov    0x4(%ecx),%ebx
  0xa76c5edd: cmp    0x8(%eax),%ebx
  0xa76c5ee0: mov    0x4(%eax),%ebx
  0xa76c5ee3: jne    0xa76c5ef6
  0xa76c5ee9: cmpl   $0x0,0x34(%ebx)
  0xa76c5ef0: je     0xa76c5f35
  0xa76c5ef6: jmp    0xa7692560
  0xa76c5efb: cmpl   $0x0,0x34(%ebx)
  0xa76c5f02: je     0xa76c5f35
  0xa76c5f08: mov    (%esp),%eax
  0xa76c5f0b: pusha  
  0xa76c5f0c: pushf  
  0xa76c5f0d: sub    $0x10,%esp
  0xa76c5f10: vmovsd %xmm0,(%esp)
  0xa76c5f15: vmovsd %xmm1,0x8(%esp)
  0xa76c5f1b: push   %eax
  0xa76c5f1c: push   %ebx
  0xa76c5f1d: call   0xb71d62fc
  0xa76c5f22: add    $0x8,%esp
  0xa76c5f25: vmovsd (%esp),%xmm0
  0xa76c5f2a: vmovsd 0x8(%esp),%xmm1
  0xa76c5f30: add    $0x10,%esp
  0xa76c5f33: popf   
  0xa76c5f34: popa   
  0xa76c5f35: pop    %eax
  0xa76c5f36: mov    %esp,%esi
  0xa76c5f38: sub    $0x10,%esp
  0xa76c5f3b: mov    %ecx,0xc(%esp)
  0xa76c5f3f: mov    %edx,0x8(%esp)
  0xa76c5f43: mov    0x10(%esp),%edi
  0xa76c5f47: mov    %edi,(%esp)
  0xa76c5f4a: mov    0x14(%esp),%edi
  0xa76c5f4e: mov    %edi,0x4(%esp)
  0xa76c5f52: mov    0x28(%ebx),%ecx
  0xa76c5f55: push   %eax
  0xa76c5f56: jmp    *%ecx

AHE@0xb6690880: 0xaaabe000 i2c: 0xa76c6000 c2i: 0xa76c60c2 c2iUV: 0xa76c60a1
i2c argument handler #30 for: static ([JIIJ)I (295 bytes generated)
c2i argument handler starts at 0xa76c60c2
  0xa76c6000: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c6003: mov    $0xa75b1ac0,%edi
  0xa76c6008: cmp    %edi,%eax
  0xa76c600a: jbe    0xa76c601d
  0xa76c6010: mov    $0xa7691ac0,%edi
  0xa76c6015: cmp    %edi,%eax
  0xa76c6017: jb     0xa76c6062
  0xa76c601d: mov    $0xa75af400,%edi
  0xa76c6022: cmp    %edi,%eax
  0xa76c6024: jbe    0xa76c6037
  0xa76c602a: mov    $0xa75b1728,%edi
  0xa76c602f: cmp    %edi,%eax
  0xa76c6031: jb     0xa76c6062
  0xa76c6037: mov    $0xa76b4e40,%edi
  0xa76c603c: cmp    %edi,%eax
  0xa76c603e: jbe    0xa76c6051
  0xa76c6044: mov    $0xa76ba430,%edi
  0xa76c6049: cmp    %edi,%eax
  0xa76c604b: jb     0xa76c6062
  ;; i2c adapter must return to an interpreter frame
  0xa76c6051: push   $0xb75a2830
  0xa76c6056: call   0xa76c605b
  0xa76c605b: pusha  
  0xa76c605c: call   0xb7052f32
  0xa76c6061: hlt    
  ;; } verify_i2ce 
  0xa76c6062: mov    %esp,%edi
  0xa76c6064: sub    $0x10,%esp
  0xa76c6067: and    $0xfffffff0,%esp
  0xa76c606a: push   %eax
  0xa76c606b: mov    %edi,%eax
  0xa76c606d: mov    0x30(%ebx),%edi
  0xa76c6070: mov    0x14(%eax),%ecx
  0xa76c6073: mov    0x10(%eax),%edx
  0xa76c6076: mov    0xc(%eax),%esi
  0xa76c6079: mov    %esi,0xc(%esp)
  0xa76c607d: mov    0x4(%eax),%esi
  0xa76c6080: mov    %esi,0x4(%esp)
  0xa76c6084: mov    0x8(%eax),%esi
  0xa76c6087: mov    %esi,0x8(%esp)
  0xa76c608b: mov    %esp,%eax
  0xa76c608d: shr    $0xc,%eax
  0xa76c6090: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c6097: mov    %ebx,0x16c(%eax)
  0xa76c609d: mov    %ebx,%eax
  0xa76c609f: jmp    *%edi
  0xa76c60a1: mov    0x4(%ecx),%ebx
  0xa76c60a4: cmp    0x8(%eax),%ebx
  0xa76c60a7: mov    0x4(%eax),%ebx
  0xa76c60aa: jne    0xa76c60bd
  0xa76c60b0: cmpl   $0x0,0x34(%ebx)
  0xa76c60b7: je     0xa76c60fc
  0xa76c60bd: jmp    0xa7692560
  0xa76c60c2: cmpl   $0x0,0x34(%ebx)
  0xa76c60c9: je     0xa76c60fc
  0xa76c60cf: mov    (%esp),%eax
  0xa76c60d2: pusha  
  0xa76c60d3: pushf  
  0xa76c60d4: sub    $0x10,%esp
  0xa76c60d7: vmovsd %xmm0,(%esp)
  0xa76c60dc: vmovsd %xmm1,0x8(%esp)
  0xa76c60e2: push   %eax
  0xa76c60e3: push   %ebx
  0xa76c60e4: call   0xb71d62fc
  0xa76c60e9: add    $0x8,%esp
  0xa76c60ec: vmovsd (%esp),%xmm0
  0xa76c60f1: vmovsd 0x8(%esp),%xmm1
  0xa76c60f7: add    $0x10,%esp
  0xa76c60fa: popf   
  0xa76c60fb: popa   
  0xa76c60fc: pop    %eax
  0xa76c60fd: mov    %esp,%esi
  0xa76c60ff: sub    $0x14,%esp
  0xa76c6102: mov    %ecx,0x10(%esp)
  0xa76c6106: mov    %edx,0xc(%esp)
  0xa76c610a: mov    0x1c(%esp),%edi
  0xa76c610e: mov    %edi,0x8(%esp)
  0xa76c6112: mov    0x14(%esp),%edi
  0xa76c6116: mov    %edi,(%esp)
  0xa76c6119: mov    0x18(%esp),%edi
  0xa76c611d: mov    %edi,0x4(%esp)
  0xa76c6121: mov    0x28(%ebx),%ecx
  0xa76c6124: push   %eax
  0xa76c6125: jmp    *%ecx

AHE@0xb66908a4: 0xaaa7e000 i2c: 0xa76c61c0 c2i: 0xa76c6279 c2iUV: 0xa76c6258
i2c argument handler #31 for: static ([DIID)I (276 bytes generated)
c2i argument handler starts at 0xa76c6279
  0xa76c61c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c61c3: mov    $0xa75b1ac0,%edi
  0xa76c61c8: cmp    %edi,%eax
  0xa76c61ca: jbe    0xa76c61dd
  0xa76c61d0: mov    $0xa7691ac0,%edi
  0xa76c61d5: cmp    %edi,%eax
  0xa76c61d7: jb     0xa76c6222
  0xa76c61dd: mov    $0xa75af400,%edi
  0xa76c61e2: cmp    %edi,%eax
  0xa76c61e4: jbe    0xa76c61f7
  0xa76c61ea: mov    $0xa75b1728,%edi
  0xa76c61ef: cmp    %edi,%eax
  0xa76c61f1: jb     0xa76c6222
  0xa76c61f7: mov    $0xa76b4e40,%edi
  0xa76c61fc: cmp    %edi,%eax
  0xa76c61fe: jbe    0xa76c6211
  0xa76c6204: mov    $0xa76ba430,%edi
  0xa76c6209: cmp    %edi,%eax
  0xa76c620b: jb     0xa76c6222
  ;; i2c adapter must return to an interpreter frame
  0xa76c6211: push   $0xb75a2830
  0xa76c6216: call   0xa76c621b
  0xa76c621b: pusha  
  0xa76c621c: call   0xb7052f32
  0xa76c6221: hlt    
  ;; } verify_i2ce 
  0xa76c6222: mov    %esp,%edi
  0xa76c6224: sub    $0x8,%esp
  0xa76c6227: and    $0xfffffff0,%esp
  0xa76c622a: push   %eax
  0xa76c622b: mov    %edi,%eax
  0xa76c622d: mov    0x30(%ebx),%edi
  0xa76c6230: mov    0x14(%eax),%ecx
  0xa76c6233: mov    0x10(%eax),%edx
  0xa76c6236: mov    0xc(%eax),%esi
  0xa76c6239: mov    %esi,0x4(%esp)
  0xa76c623d: vmovsd 0x4(%eax),%xmm0
  0xa76c6242: mov    %esp,%eax
  0xa76c6244: shr    $0xc,%eax
  0xa76c6247: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c624e: mov    %ebx,0x16c(%eax)
  0xa76c6254: mov    %ebx,%eax
  0xa76c6256: jmp    *%edi
  0xa76c6258: mov    0x4(%ecx),%ebx
  0xa76c625b: cmp    0x8(%eax),%ebx
  0xa76c625e: mov    0x4(%eax),%ebx
  0xa76c6261: jne    0xa76c6274
  0xa76c6267: cmpl   $0x0,0x34(%ebx)
  0xa76c626e: je     0xa76c62b3
  0xa76c6274: jmp    0xa7692560
  0xa76c6279: cmpl   $0x0,0x34(%ebx)
  0xa76c6280: je     0xa76c62b3
  0xa76c6286: mov    (%esp),%eax
  0xa76c6289: pusha  
  0xa76c628a: pushf  
  0xa76c628b: sub    $0x10,%esp
  0xa76c628e: vmovsd %xmm0,(%esp)
  0xa76c6293: vmovsd %xmm1,0x8(%esp)
  0xa76c6299: push   %eax
  0xa76c629a: push   %ebx
  0xa76c629b: call   0xb71d62fc
  0xa76c62a0: add    $0x8,%esp
  0xa76c62a3: vmovsd (%esp),%xmm0
  0xa76c62a8: vmovsd 0x8(%esp),%xmm1
  0xa76c62ae: add    $0x10,%esp
  0xa76c62b1: popf   
  0xa76c62b2: popa   
  0xa76c62b3: pop    %eax
  0xa76c62b4: mov    %esp,%esi
  0xa76c62b6: sub    $0x14,%esp
  0xa76c62b9: mov    %ecx,0x10(%esp)
  0xa76c62bd: mov    %edx,0xc(%esp)
  0xa76c62c1: mov    0x14(%esp),%edi
  0xa76c62c5: mov    %edi,0x8(%esp)
  0xa76c62c9: vmovsd %xmm0,(%esp)
  0xa76c62ce: mov    0x28(%ebx),%ecx
  0xa76c62d1: push   %eax
  0xa76c62d2: jmp    *%ecx

AHE@0xb66908c8: 0xaaa60000 i2c: 0xa76c6380 c2i: 0xa76c6439 c2iUV: 0xa76c6418
i2c argument handler #32 for: static ([FIIF)I (276 bytes generated)
c2i argument handler starts at 0xa76c6439
  0xa76c6380: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c6383: mov    $0xa75b1ac0,%edi
  0xa76c6388: cmp    %edi,%eax
  0xa76c638a: jbe    0xa76c639d
  0xa76c6390: mov    $0xa7691ac0,%edi
  0xa76c6395: cmp    %edi,%eax
  0xa76c6397: jb     0xa76c63e2
  0xa76c639d: mov    $0xa75af400,%edi
  0xa76c63a2: cmp    %edi,%eax
  0xa76c63a4: jbe    0xa76c63b7
  0xa76c63aa: mov    $0xa75b1728,%edi
  0xa76c63af: cmp    %edi,%eax
  0xa76c63b1: jb     0xa76c63e2
  0xa76c63b7: mov    $0xa76b4e40,%edi
  0xa76c63bc: cmp    %edi,%eax
  0xa76c63be: jbe    0xa76c63d1
  0xa76c63c4: mov    $0xa76ba430,%edi
  0xa76c63c9: cmp    %edi,%eax
  0xa76c63cb: jb     0xa76c63e2
  ;; i2c adapter must return to an interpreter frame
  0xa76c63d1: push   $0xb75a2830
  0xa76c63d6: call   0xa76c63db
  0xa76c63db: pusha  
  0xa76c63dc: call   0xb7052f32
  0xa76c63e1: hlt    
  ;; } verify_i2ce 
  0xa76c63e2: mov    %esp,%edi
  0xa76c63e4: sub    $0x8,%esp
  0xa76c63e7: and    $0xfffffff0,%esp
  0xa76c63ea: push   %eax
  0xa76c63eb: mov    %edi,%eax
  0xa76c63ed: mov    0x30(%ebx),%edi
  0xa76c63f0: mov    0x10(%eax),%ecx
  0xa76c63f3: mov    0xc(%eax),%edx
  0xa76c63f6: mov    0x8(%eax),%esi
  0xa76c63f9: mov    %esi,0x4(%esp)
  0xa76c63fd: vmovss 0x4(%eax),%xmm0
  0xa76c6402: mov    %esp,%eax
  0xa76c6404: shr    $0xc,%eax
  0xa76c6407: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c640e: mov    %ebx,0x16c(%eax)
  0xa76c6414: mov    %ebx,%eax
  0xa76c6416: jmp    *%edi
  0xa76c6418: mov    0x4(%ecx),%ebx
  0xa76c641b: cmp    0x8(%eax),%ebx
  0xa76c641e: mov    0x4(%eax),%ebx
  0xa76c6421: jne    0xa76c6434
  0xa76c6427: cmpl   $0x0,0x34(%ebx)
  0xa76c642e: je     0xa76c6473
  0xa76c6434: jmp    0xa7692560
  0xa76c6439: cmpl   $0x0,0x34(%ebx)
  0xa76c6440: je     0xa76c6473
  0xa76c6446: mov    (%esp),%eax
  0xa76c6449: pusha  
  0xa76c644a: pushf  
  0xa76c644b: sub    $0x10,%esp
  0xa76c644e: vmovsd %xmm0,(%esp)
  0xa76c6453: vmovsd %xmm1,0x8(%esp)
  0xa76c6459: push   %eax
  0xa76c645a: push   %ebx
  0xa76c645b: call   0xb71d62fc
  0xa76c6460: add    $0x8,%esp
  0xa76c6463: vmovsd (%esp),%xmm0
  0xa76c6468: vmovsd 0x8(%esp),%xmm1
  0xa76c646e: add    $0x10,%esp
  0xa76c6471: popf   
  0xa76c6472: popa   
  0xa76c6473: pop    %eax
  0xa76c6474: mov    %esp,%esi
  0xa76c6476: sub    $0x10,%esp
  0xa76c6479: mov    %ecx,0xc(%esp)
  0xa76c647d: mov    %edx,0x8(%esp)
  0xa76c6481: mov    0x10(%esp),%edi
  0xa76c6485: mov    %edi,0x4(%esp)
  0xa76c6489: vmovss %xmm0,(%esp)
  0xa76c648e: mov    0x28(%ebx),%ecx
  0xa76c6491: push   %eax
  0xa76c6492: jmp    *%ecx

AHE@0xb66908ec: 0xaa660000 i2c: 0xa76c6540 c2i: 0xa76c65f4 c2iUV: 0xa76c65d3
i2c argument handler #33 for: receiver (Ljava/nio/charset/Charset;FF)V (269 bytes generated)
c2i argument handler starts at 0xa76c65f4
  0xa76c6540: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c6543: mov    $0xa75b1ac0,%edi
  0xa76c6548: cmp    %edi,%eax
  0xa76c654a: jbe    0xa76c655d
  0xa76c6550: mov    $0xa7691ac0,%edi
  0xa76c6555: cmp    %edi,%eax
  0xa76c6557: jb     0xa76c65a2
  0xa76c655d: mov    $0xa75af400,%edi
  0xa76c6562: cmp    %edi,%eax
  0xa76c6564: jbe    0xa76c6577
  0xa76c656a: mov    $0xa75b1728,%edi
  0xa76c656f: cmp    %edi,%eax
  0xa76c6571: jb     0xa76c65a2
  0xa76c6577: mov    $0xa76b4e40,%edi
  0xa76c657c: cmp    %edi,%eax
  0xa76c657e: jbe    0xa76c6591
  0xa76c6584: mov    $0xa76ba430,%edi
  0xa76c6589: cmp    %edi,%eax
  0xa76c658b: jb     0xa76c65a2
  ;; i2c adapter must return to an interpreter frame
  0xa76c6591: push   $0xb75a2830
  0xa76c6596: call   0xa76c659b
  0xa76c659b: pusha  
  0xa76c659c: call   0xb7052f32
  0xa76c65a1: hlt    
  ;; } verify_i2ce 
  0xa76c65a2: mov    %esp,%edi
  0xa76c65a4: and    $0xfffffff0,%esp
  0xa76c65a7: push   %eax
  0xa76c65a8: mov    %edi,%eax
  0xa76c65aa: mov    0x30(%ebx),%edi
  0xa76c65ad: mov    0x10(%eax),%ecx
  0xa76c65b0: mov    0xc(%eax),%edx
  0xa76c65b3: vmovss 0x8(%eax),%xmm0
  0xa76c65b8: vmovss 0x4(%eax),%xmm1
  0xa76c65bd: mov    %esp,%eax
  0xa76c65bf: shr    $0xc,%eax
  0xa76c65c2: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c65c9: mov    %ebx,0x16c(%eax)
  0xa76c65cf: mov    %ebx,%eax
  0xa76c65d1: jmp    *%edi
  0xa76c65d3: mov    0x4(%ecx),%ebx
  0xa76c65d6: cmp    0x8(%eax),%ebx
  0xa76c65d9: mov    0x4(%eax),%ebx
  0xa76c65dc: jne    0xa76c65ef
  0xa76c65e2: cmpl   $0x0,0x34(%ebx)
  0xa76c65e9: je     0xa76c662e
  0xa76c65ef: jmp    0xa7692560
  0xa76c65f4: cmpl   $0x0,0x34(%ebx)
  0xa76c65fb: je     0xa76c662e
  0xa76c6601: mov    (%esp),%eax
  0xa76c6604: pusha  
  0xa76c6605: pushf  
  0xa76c6606: sub    $0x10,%esp
  0xa76c6609: vmovsd %xmm0,(%esp)
  0xa76c660e: vmovsd %xmm1,0x8(%esp)
  0xa76c6614: push   %eax
  0xa76c6615: push   %ebx
  0xa76c6616: call   0xb71d62fc
  0xa76c661b: add    $0x8,%esp
  0xa76c661e: vmovsd (%esp),%xmm0
  0xa76c6623: vmovsd 0x8(%esp),%xmm1
  0xa76c6629: add    $0x10,%esp
  0xa76c662c: popf   
  0xa76c662d: popa   
  0xa76c662e: pop    %eax
  0xa76c662f: mov    %esp,%esi
  0xa76c6631: sub    $0x10,%esp
  0xa76c6634: mov    %ecx,0xc(%esp)
  0xa76c6638: mov    %edx,0x8(%esp)
  0xa76c663c: vmovss %xmm0,0x4(%esp)
  0xa76c6642: vmovss %xmm1,(%esp)
  0xa76c6647: mov    0x28(%ebx),%ecx
  0xa76c664a: push   %eax
  0xa76c664b: jmp    *%ecx

AHE@0xb6690910: 0xaa66a000 i2c: 0xa76c6700 c2i: 0xa76c67be c2iUV: 0xa76c679d
i2c argument handler #34 for: receiver (Ljava/nio/charset/Charset;FFLjava/lang/String;)V (287 bytes generated)
c2i argument handler starts at 0xa76c67be
  0xa76c6700: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c6703: mov    $0xa75b1ac0,%edi
  0xa76c6708: cmp    %edi,%eax
  0xa76c670a: jbe    0xa76c671d
  0xa76c6710: mov    $0xa7691ac0,%edi
  0xa76c6715: cmp    %edi,%eax
  0xa76c6717: jb     0xa76c6762
  0xa76c671d: mov    $0xa75af400,%edi
  0xa76c6722: cmp    %edi,%eax
  0xa76c6724: jbe    0xa76c6737
  0xa76c672a: mov    $0xa75b1728,%edi
  0xa76c672f: cmp    %edi,%eax
  0xa76c6731: jb     0xa76c6762
  0xa76c6737: mov    $0xa76b4e40,%edi
  0xa76c673c: cmp    %edi,%eax
  0xa76c673e: jbe    0xa76c6751
  0xa76c6744: mov    $0xa76ba430,%edi
  0xa76c6749: cmp    %edi,%eax
  0xa76c674b: jb     0xa76c6762
  ;; i2c adapter must return to an interpreter frame
  0xa76c6751: push   $0xb75a2830
  0xa76c6756: call   0xa76c675b
  0xa76c675b: pusha  
  0xa76c675c: call   0xb7052f32
  0xa76c6761: hlt    
  ;; } verify_i2ce 
  0xa76c6762: mov    %esp,%edi
  0xa76c6764: sub    $0x8,%esp
  0xa76c6767: and    $0xfffffff0,%esp
  0xa76c676a: push   %eax
  0xa76c676b: mov    %edi,%eax
  0xa76c676d: mov    0x30(%ebx),%edi
  0xa76c6770: mov    0x14(%eax),%ecx
  0xa76c6773: mov    0x10(%eax),%edx
  0xa76c6776: vmovss 0xc(%eax),%xmm0
  0xa76c677b: vmovss 0x8(%eax),%xmm1
  0xa76c6780: mov    0x4(%eax),%esi
  0xa76c6783: mov    %esi,0x4(%esp)
  0xa76c6787: mov    %esp,%eax
  0xa76c6789: shr    $0xc,%eax
  0xa76c678c: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c6793: mov    %ebx,0x16c(%eax)
  0xa76c6799: mov    %ebx,%eax
  0xa76c679b: jmp    *%edi
  0xa76c679d: mov    0x4(%ecx),%ebx
  0xa76c67a0: cmp    0x8(%eax),%ebx
  0xa76c67a3: mov    0x4(%eax),%ebx
  0xa76c67a6: jne    0xa76c67b9
  0xa76c67ac: cmpl   $0x0,0x34(%ebx)
  0xa76c67b3: je     0xa76c67f8
  0xa76c67b9: jmp    0xa7692560
  0xa76c67be: cmpl   $0x0,0x34(%ebx)
  0xa76c67c5: je     0xa76c67f8
  0xa76c67cb: mov    (%esp),%eax
  0xa76c67ce: pusha  
  0xa76c67cf: pushf  
  0xa76c67d0: sub    $0x10,%esp
  0xa76c67d3: vmovsd %xmm0,(%esp)
  0xa76c67d8: vmovsd %xmm1,0x8(%esp)
  0xa76c67de: push   %eax
  0xa76c67df: push   %ebx
  0xa76c67e0: call   0xb71d62fc
  0xa76c67e5: add    $0x8,%esp
  0xa76c67e8: vmovsd (%esp),%xmm0
  0xa76c67ed: vmovsd 0x8(%esp),%xmm1
  0xa76c67f3: add    $0x10,%esp
  0xa76c67f6: popf   
  0xa76c67f7: popa   
  0xa76c67f8: pop    %eax
  0xa76c67f9: mov    %esp,%esi
  0xa76c67fb: sub    $0x14,%esp
  0xa76c67fe: mov    %ecx,0x10(%esp)
  0xa76c6802: mov    %edx,0xc(%esp)
  0xa76c6806: vmovss %xmm0,0x8(%esp)
  0xa76c680c: vmovss %xmm1,0x4(%esp)
  0xa76c6812: mov    0x14(%esp),%edi
  0xa76c6816: mov    %edi,(%esp)
  0xa76c6819: mov    0x28(%ebx),%ecx
  0xa76c681c: push   %eax
  0xa76c681d: jmp    *%ecx

AHE@0xb6690934: 0xabeabebebe000000 i2c: 0xa76c68c0 c2i: 0xa76c69a5 c2iUV: 0xa76c6984
i2c argument handler #35 for: static (Ljava/lang/Object;JLjava/lang/Object;JJJ)V (370 bytes generated)
c2i argument handler starts at 0xa76c69a5
  0xa76c68c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c68c3: mov    $0xa75b1ac0,%edi
  0xa76c68c8: cmp    %edi,%eax
  0xa76c68ca: jbe    0xa76c68dd
  0xa76c68d0: mov    $0xa7691ac0,%edi
  0xa76c68d5: cmp    %edi,%eax
  0xa76c68d7: jb     0xa76c6922
  0xa76c68dd: mov    $0xa75af400,%edi
  0xa76c68e2: cmp    %edi,%eax
  0xa76c68e4: jbe    0xa76c68f7
  0xa76c68ea: mov    $0xa75b1728,%edi
  0xa76c68ef: cmp    %edi,%eax
  0xa76c68f1: jb     0xa76c6922
  0xa76c68f7: mov    $0xa76b4e40,%edi
  0xa76c68fc: cmp    %edi,%eax
  0xa76c68fe: jbe    0xa76c6911
  0xa76c6904: mov    $0xa76ba430,%edi
  0xa76c6909: cmp    %edi,%eax
  0xa76c690b: jb     0xa76c6922
  ;; i2c adapter must return to an interpreter frame
  0xa76c6911: push   $0xb75a2830
  0xa76c6916: call   0xa76c691b
  0xa76c691b: pusha  
  0xa76c691c: call   0xb7052f32
  0xa76c6921: hlt    
  ;; } verify_i2ce 
  0xa76c6922: mov    %esp,%edi
  0xa76c6924: sub    $0x20,%esp
  0xa76c6927: and    $0xfffffff0,%esp
  0xa76c692a: push   %eax
  0xa76c692b: mov    %edi,%eax
  0xa76c692d: mov    0x30(%ebx),%edi
  0xa76c6930: mov    0x28(%eax),%ecx
  0xa76c6933: mov    0x20(%eax),%esi
  0xa76c6936: mov    %esi,0x4(%esp)
  0xa76c693a: mov    0x24(%eax),%esi
  0xa76c693d: mov    %esi,0x8(%esp)
  0xa76c6941: mov    0x1c(%eax),%edx
  0xa76c6944: mov    0x14(%eax),%esi
  0xa76c6947: mov    %esi,0xc(%esp)
  0xa76c694b: mov    0x18(%eax),%esi
  0xa76c694e: mov    %esi,0x10(%esp)
  0xa76c6952: mov    0xc(%eax),%esi
  0xa76c6955: mov    %esi,0x14(%esp)
  0xa76c6959: mov    0x10(%eax),%esi
  0xa76c695c: mov    %esi,0x18(%esp)
  0xa76c6960: mov    0x4(%eax),%esi
  0xa76c6963: mov    %esi,0x1c(%esp)
  0xa76c6967: mov    0x8(%eax),%esi
  0xa76c696a: mov    %esi,0x20(%esp)
  0xa76c696e: mov    %esp,%eax
  0xa76c6970: shr    $0xc,%eax
  0xa76c6973: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c697a: mov    %ebx,0x16c(%eax)
  0xa76c6980: mov    %ebx,%eax
  0xa76c6982: jmp    *%edi
  0xa76c6984: mov    0x4(%ecx),%ebx
  0xa76c6987: cmp    0x8(%eax),%ebx
  0xa76c698a: mov    0x4(%eax),%ebx
  0xa76c698d: jne    0xa76c69a0
  0xa76c6993: cmpl   $0x0,0x34(%ebx)
  0xa76c699a: je     0xa76c69df
  0xa76c69a0: jmp    0xa7692560
  0xa76c69a5: cmpl   $0x0,0x34(%ebx)
  0xa76c69ac: je     0xa76c69df
  0xa76c69b2: mov    (%esp),%eax
  0xa76c69b5: pusha  
  0xa76c69b6: pushf  
  0xa76c69b7: sub    $0x10,%esp
  0xa76c69ba: vmovsd %xmm0,(%esp)
  0xa76c69bf: vmovsd %xmm1,0x8(%esp)
  0xa76c69c5: push   %eax
  0xa76c69c6: push   %ebx
  0xa76c69c7: call   0xb71d62fc
  0xa76c69cc: add    $0x8,%esp
  0xa76c69cf: vmovsd (%esp),%xmm0
  0xa76c69d4: vmovsd 0x8(%esp),%xmm1
  0xa76c69da: add    $0x10,%esp
  0xa76c69dd: popf   
  0xa76c69de: popa   
  0xa76c69df: pop    %eax
  0xa76c69e0: mov    %esp,%esi
  0xa76c69e2: sub    $0x28,%esp
  0xa76c69e5: mov    %ecx,0x24(%esp)
  0xa76c69e9: mov    0x28(%esp),%edi
  0xa76c69ed: mov    %edi,0x1c(%esp)
  0xa76c69f1: mov    0x2c(%esp),%edi
  0xa76c69f5: mov    %edi,0x20(%esp)
  0xa76c69f9: mov    %edx,0x18(%esp)
  0xa76c69fd: mov    0x30(%esp),%edi
  0xa76c6a01: mov    %edi,0x10(%esp)
  0xa76c6a05: mov    0x34(%esp),%edi
  0xa76c6a09: mov    %edi,0x14(%esp)
  0xa76c6a0d: mov    0x38(%esp),%edi
  0xa76c6a11: mov    %edi,0x8(%esp)
  0xa76c6a15: mov    0x3c(%esp),%edi
  0xa76c6a19: mov    %edi,0xc(%esp)
  0xa76c6a1d: mov    0x40(%esp),%edi
  0xa76c6a21: mov    %edi,(%esp)
  0xa76c6a24: mov    0x44(%esp),%edi
  0xa76c6a28: mov    %edi,0x4(%esp)
  0xa76c6a2c: mov    0x28(%ebx),%ecx
  0xa76c6a2f: push   %eax
  0xa76c6a30: jmp    *%ecx

AHE@0xb6690958: 0xbeabebe0 i2c: 0xa76c6ac0 c2i: 0xa76c6b94 c2iUV: 0xa76c6b73
i2c argument handler #36 for: static (JLjava/lang/Object;JJ)V (333 bytes generated)
c2i argument handler starts at 0xa76c6b94
  0xa76c6ac0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c6ac3: mov    $0xa75b1ac0,%edi
  0xa76c6ac8: cmp    %edi,%eax
  0xa76c6aca: jbe    0xa76c6add
  0xa76c6ad0: mov    $0xa7691ac0,%edi
  0xa76c6ad5: cmp    %edi,%eax
  0xa76c6ad7: jb     0xa76c6b22
  0xa76c6add: mov    $0xa75af400,%edi
  0xa76c6ae2: cmp    %edi,%eax
  0xa76c6ae4: jbe    0xa76c6af7
  0xa76c6aea: mov    $0xa75b1728,%edi
  0xa76c6aef: cmp    %edi,%eax
  0xa76c6af1: jb     0xa76c6b22
  0xa76c6af7: mov    $0xa76b4e40,%edi
  0xa76c6afc: cmp    %edi,%eax
  0xa76c6afe: jbe    0xa76c6b11
  0xa76c6b04: mov    $0xa76ba430,%edi
  0xa76c6b09: cmp    %edi,%eax
  0xa76c6b0b: jb     0xa76c6b22
  ;; i2c adapter must return to an interpreter frame
  0xa76c6b11: push   $0xb75a2830
  0xa76c6b16: call   0xa76c6b1b
  0xa76c6b1b: pusha  
  0xa76c6b1c: call   0xb7052f32
  0xa76c6b21: hlt    
  ;; } verify_i2ce 
  0xa76c6b22: mov    %esp,%edi
  0xa76c6b24: sub    $0x18,%esp
  0xa76c6b27: and    $0xfffffff0,%esp
  0xa76c6b2a: push   %eax
  0xa76c6b2b: mov    %edi,%eax
  0xa76c6b2d: mov    0x30(%ebx),%edi
  0xa76c6b30: mov    0x18(%eax),%esi
  0xa76c6b33: mov    %esi,0x4(%esp)
  0xa76c6b37: mov    0x1c(%eax),%esi
  0xa76c6b3a: mov    %esi,0x8(%esp)
  0xa76c6b3e: mov    0x14(%eax),%ecx
  0xa76c6b41: mov    0xc(%eax),%esi
  0xa76c6b44: mov    %esi,0xc(%esp)
  0xa76c6b48: mov    0x10(%eax),%esi
  0xa76c6b4b: mov    %esi,0x10(%esp)
  0xa76c6b4f: mov    0x4(%eax),%esi
  0xa76c6b52: mov    %esi,0x14(%esp)
  0xa76c6b56: mov    0x8(%eax),%esi
  0xa76c6b59: mov    %esi,0x18(%esp)
  0xa76c6b5d: mov    %esp,%eax
  0xa76c6b5f: shr    $0xc,%eax
  0xa76c6b62: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c6b69: mov    %ebx,0x16c(%eax)
  0xa76c6b6f: mov    %ebx,%eax
  0xa76c6b71: jmp    *%edi
  0xa76c6b73: mov    0x4(%ecx),%ebx
  0xa76c6b76: cmp    0x8(%eax),%ebx
  0xa76c6b79: mov    0x4(%eax),%ebx
  0xa76c6b7c: jne    0xa76c6b8f
  0xa76c6b82: cmpl   $0x0,0x34(%ebx)
  0xa76c6b89: je     0xa76c6bce
  0xa76c6b8f: jmp    0xa7692560
  0xa76c6b94: cmpl   $0x0,0x34(%ebx)
  0xa76c6b9b: je     0xa76c6bce
  0xa76c6ba1: mov    (%esp),%eax
  0xa76c6ba4: pusha  
  0xa76c6ba5: pushf  
  0xa76c6ba6: sub    $0x10,%esp
  0xa76c6ba9: vmovsd %xmm0,(%esp)
  0xa76c6bae: vmovsd %xmm1,0x8(%esp)
  0xa76c6bb4: push   %eax
  0xa76c6bb5: push   %ebx
  0xa76c6bb6: call   0xb71d62fc
  0xa76c6bbb: add    $0x8,%esp
  0xa76c6bbe: vmovsd (%esp),%xmm0
  0xa76c6bc3: vmovsd 0x8(%esp),%xmm1
  0xa76c6bc9: add    $0x10,%esp
  0xa76c6bcc: popf   
  0xa76c6bcd: popa   
  0xa76c6bce: pop    %eax
  0xa76c6bcf: mov    %esp,%esi
  0xa76c6bd1: sub    $0x1c,%esp
  0xa76c6bd4: mov    0x1c(%esp),%edi
  0xa76c6bd8: mov    %edi,0x14(%esp)
  0xa76c6bdc: mov    0x20(%esp),%edi
  0xa76c6be0: mov    %edi,0x18(%esp)
  0xa76c6be4: mov    %ecx,0x10(%esp)
  0xa76c6be8: mov    0x24(%esp),%edi
  0xa76c6bec: mov    %edi,0x8(%esp)
  0xa76c6bf0: mov    0x28(%esp),%edi
  0xa76c6bf4: mov    %edi,0xc(%esp)
  0xa76c6bf8: mov    0x2c(%esp),%edi
  0xa76c6bfc: mov    %edi,(%esp)
  0xa76c6bff: mov    0x30(%esp),%edi
  0xa76c6c03: mov    %edi,0x4(%esp)
  0xa76c6c07: mov    0x28(%ebx),%ecx
  0xa76c6c0a: push   %eax
  0xa76c6c0b: jmp    *%ecx

AHE@0xb669097c: 0xabebebe0 i2c: 0xa76c6cc0 c2i: 0xa76c6d94 c2iUV: 0xa76c6d73
i2c argument handler #37 for: static (Ljava/lang/Object;JJJ)V (333 bytes generated)
c2i argument handler starts at 0xa76c6d94
  0xa76c6cc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c6cc3: mov    $0xa75b1ac0,%edi
  0xa76c6cc8: cmp    %edi,%eax
  0xa76c6cca: jbe    0xa76c6cdd
  0xa76c6cd0: mov    $0xa7691ac0,%edi
  0xa76c6cd5: cmp    %edi,%eax
  0xa76c6cd7: jb     0xa76c6d22
  0xa76c6cdd: mov    $0xa75af400,%edi
  0xa76c6ce2: cmp    %edi,%eax
  0xa76c6ce4: jbe    0xa76c6cf7
  0xa76c6cea: mov    $0xa75b1728,%edi
  0xa76c6cef: cmp    %edi,%eax
  0xa76c6cf1: jb     0xa76c6d22
  0xa76c6cf7: mov    $0xa76b4e40,%edi
  0xa76c6cfc: cmp    %edi,%eax
  0xa76c6cfe: jbe    0xa76c6d11
  0xa76c6d04: mov    $0xa76ba430,%edi
  0xa76c6d09: cmp    %edi,%eax
  0xa76c6d0b: jb     0xa76c6d22
  ;; i2c adapter must return to an interpreter frame
  0xa76c6d11: push   $0xb75a2830
  0xa76c6d16: call   0xa76c6d1b
  0xa76c6d1b: pusha  
  0xa76c6d1c: call   0xb7052f32
  0xa76c6d21: hlt    
  ;; } verify_i2ce 
  0xa76c6d22: mov    %esp,%edi
  0xa76c6d24: sub    $0x18,%esp
  0xa76c6d27: and    $0xfffffff0,%esp
  0xa76c6d2a: push   %eax
  0xa76c6d2b: mov    %edi,%eax
  0xa76c6d2d: mov    0x30(%ebx),%edi
  0xa76c6d30: mov    0x1c(%eax),%ecx
  0xa76c6d33: mov    0x14(%eax),%esi
  0xa76c6d36: mov    %esi,0x4(%esp)
  0xa76c6d3a: mov    0x18(%eax),%esi
  0xa76c6d3d: mov    %esi,0x8(%esp)
  0xa76c6d41: mov    0xc(%eax),%esi
  0xa76c6d44: mov    %esi,0xc(%esp)
  0xa76c6d48: mov    0x10(%eax),%esi
  0xa76c6d4b: mov    %esi,0x10(%esp)
  0xa76c6d4f: mov    0x4(%eax),%esi
  0xa76c6d52: mov    %esi,0x14(%esp)
  0xa76c6d56: mov    0x8(%eax),%esi
  0xa76c6d59: mov    %esi,0x18(%esp)
  0xa76c6d5d: mov    %esp,%eax
  0xa76c6d5f: shr    $0xc,%eax
  0xa76c6d62: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c6d69: mov    %ebx,0x16c(%eax)
  0xa76c6d6f: mov    %ebx,%eax
  0xa76c6d71: jmp    *%edi
  0xa76c6d73: mov    0x4(%ecx),%ebx
  0xa76c6d76: cmp    0x8(%eax),%ebx
  0xa76c6d79: mov    0x4(%eax),%ebx
  0xa76c6d7c: jne    0xa76c6d8f
  0xa76c6d82: cmpl   $0x0,0x34(%ebx)
  0xa76c6d89: je     0xa76c6dce
  0xa76c6d8f: jmp    0xa7692560
  0xa76c6d94: cmpl   $0x0,0x34(%ebx)
  0xa76c6d9b: je     0xa76c6dce
  0xa76c6da1: mov    (%esp),%eax
  0xa76c6da4: pusha  
  0xa76c6da5: pushf  
  0xa76c6da6: sub    $0x10,%esp
  0xa76c6da9: vmovsd %xmm0,(%esp)
  0xa76c6dae: vmovsd %xmm1,0x8(%esp)
  0xa76c6db4: push   %eax
  0xa76c6db5: push   %ebx
  0xa76c6db6: call   0xb71d62fc
  0xa76c6dbb: add    $0x8,%esp
  0xa76c6dbe: vmovsd (%esp),%xmm0
  0xa76c6dc3: vmovsd 0x8(%esp),%xmm1
  0xa76c6dc9: add    $0x10,%esp
  0xa76c6dcc: popf   
  0xa76c6dcd: popa   
  0xa76c6dce: pop    %eax
  0xa76c6dcf: mov    %esp,%esi
  0xa76c6dd1: sub    $0x1c,%esp
  0xa76c6dd4: mov    %ecx,0x18(%esp)
  0xa76c6dd8: mov    0x1c(%esp),%edi
  0xa76c6ddc: mov    %edi,0x10(%esp)
  0xa76c6de0: mov    0x20(%esp),%edi
  0xa76c6de4: mov    %edi,0x14(%esp)
  0xa76c6de8: mov    0x24(%esp),%edi
  0xa76c6dec: mov    %edi,0x8(%esp)
  0xa76c6df0: mov    0x28(%esp),%edi
  0xa76c6df4: mov    %edi,0xc(%esp)
  0xa76c6df8: mov    0x2c(%esp),%edi
  0xa76c6dfc: mov    %edi,(%esp)
  0xa76c6dff: mov    0x30(%esp),%edi
  0xa76c6e03: mov    %edi,0x4(%esp)
  0xa76c6e07: mov    0x28(%ebx),%ecx
  0xa76c6e0a: push   %eax
  0xa76c6e0b: jmp    *%ecx

AHE@0xb66909a0: 0xbeabebebe0000000 i2c: 0xa76c6ec0 c2i: 0xa76c6fa2 c2iUV: 0xa76c6f81
i2c argument handler #38 for: static (JLjava/lang/Object;JJJ)V (363 bytes generated)
c2i argument handler starts at 0xa76c6fa2
  0xa76c6ec0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c6ec3: mov    $0xa75b1ac0,%edi
  0xa76c6ec8: cmp    %edi,%eax
  0xa76c6eca: jbe    0xa76c6edd
  0xa76c6ed0: mov    $0xa7691ac0,%edi
  0xa76c6ed5: cmp    %edi,%eax
  0xa76c6ed7: jb     0xa76c6f22
  0xa76c6edd: mov    $0xa75af400,%edi
  0xa76c6ee2: cmp    %edi,%eax
  0xa76c6ee4: jbe    0xa76c6ef7
  0xa76c6eea: mov    $0xa75b1728,%edi
  0xa76c6eef: cmp    %edi,%eax
  0xa76c6ef1: jb     0xa76c6f22
  0xa76c6ef7: mov    $0xa76b4e40,%edi
  0xa76c6efc: cmp    %edi,%eax
  0xa76c6efe: jbe    0xa76c6f11
  0xa76c6f04: mov    $0xa76ba430,%edi
  0xa76c6f09: cmp    %edi,%eax
  0xa76c6f0b: jb     0xa76c6f22
  ;; i2c adapter must return to an interpreter frame
  0xa76c6f11: push   $0xb75a2830
  0xa76c6f16: call   0xa76c6f1b
  0xa76c6f1b: pusha  
  0xa76c6f1c: call   0xb7052f32
  0xa76c6f21: hlt    
  ;; } verify_i2ce 
  0xa76c6f22: mov    %esp,%edi
  0xa76c6f24: sub    $0x20,%esp
  0xa76c6f27: and    $0xfffffff0,%esp
  0xa76c6f2a: push   %eax
  0xa76c6f2b: mov    %edi,%eax
  0xa76c6f2d: mov    0x30(%ebx),%edi
  0xa76c6f30: mov    0x20(%eax),%esi
  0xa76c6f33: mov    %esi,0x4(%esp)
  0xa76c6f37: mov    0x24(%eax),%esi
  0xa76c6f3a: mov    %esi,0x8(%esp)
  0xa76c6f3e: mov    0x1c(%eax),%ecx
  0xa76c6f41: mov    0x14(%eax),%esi
  0xa76c6f44: mov    %esi,0xc(%esp)
  0xa76c6f48: mov    0x18(%eax),%esi
  0xa76c6f4b: mov    %esi,0x10(%esp)
  0xa76c6f4f: mov    0xc(%eax),%esi
  0xa76c6f52: mov    %esi,0x14(%esp)
  0xa76c6f56: mov    0x10(%eax),%esi
  0xa76c6f59: mov    %esi,0x18(%esp)
  0xa76c6f5d: mov    0x4(%eax),%esi
  0xa76c6f60: mov    %esi,0x1c(%esp)
  0xa76c6f64: mov    0x8(%eax),%esi
  0xa76c6f67: mov    %esi,0x20(%esp)
  0xa76c6f6b: mov    %esp,%eax
  0xa76c6f6d: shr    $0xc,%eax
  0xa76c6f70: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c6f77: mov    %ebx,0x16c(%eax)
  0xa76c6f7d: mov    %ebx,%eax
  0xa76c6f7f: jmp    *%edi
  0xa76c6f81: mov    0x4(%ecx),%ebx
  0xa76c6f84: cmp    0x8(%eax),%ebx
  0xa76c6f87: mov    0x4(%eax),%ebx
  0xa76c6f8a: jne    0xa76c6f9d
  0xa76c6f90: cmpl   $0x0,0x34(%ebx)
  0xa76c6f97: je     0xa76c6fdc
  0xa76c6f9d: jmp    0xa7692560
  0xa76c6fa2: cmpl   $0x0,0x34(%ebx)
  0xa76c6fa9: je     0xa76c6fdc
  0xa76c6faf: mov    (%esp),%eax
  0xa76c6fb2: pusha  
  0xa76c6fb3: pushf  
  0xa76c6fb4: sub    $0x10,%esp
  0xa76c6fb7: vmovsd %xmm0,(%esp)
  0xa76c6fbc: vmovsd %xmm1,0x8(%esp)
  0xa76c6fc2: push   %eax
  0xa76c6fc3: push   %ebx
  0xa76c6fc4: call   0xb71d62fc
  0xa76c6fc9: add    $0x8,%esp
  0xa76c6fcc: vmovsd (%esp),%xmm0
  0xa76c6fd1: vmovsd 0x8(%esp),%xmm1
  0xa76c6fd7: add    $0x10,%esp
  0xa76c6fda: popf   
  0xa76c6fdb: popa   
  0xa76c6fdc: pop    %eax
  0xa76c6fdd: mov    %esp,%esi
  0xa76c6fdf: sub    $0x24,%esp
  0xa76c6fe2: mov    0x24(%esp),%edi
  0xa76c6fe6: mov    %edi,0x1c(%esp)
  0xa76c6fea: mov    0x28(%esp),%edi
  0xa76c6fee: mov    %edi,0x20(%esp)
  0xa76c6ff2: mov    %ecx,0x18(%esp)
  0xa76c6ff6: mov    0x2c(%esp),%edi
  0xa76c6ffa: mov    %edi,0x10(%esp)
  0xa76c6ffe: mov    0x30(%esp),%edi
  0xa76c7002: mov    %edi,0x14(%esp)
  0xa76c7006: mov    0x34(%esp),%edi
  0xa76c700a: mov    %edi,0x8(%esp)
  0xa76c700e: mov    0x38(%esp),%edi
  0xa76c7012: mov    %edi,0xc(%esp)
  0xa76c7016: mov    0x3c(%esp),%edi
  0xa76c701a: mov    %edi,(%esp)
  0xa76c701d: mov    0x40(%esp),%edi
  0xa76c7021: mov    %edi,0x4(%esp)
  0xa76c7025: mov    0x28(%ebx),%ecx
  0xa76c7028: push   %eax
  0xa76c7029: jmp    *%ecx

AHE@0xb66909c4: 0xabebebebe0000000 i2c: 0xa76c70c0 c2i: 0xa76c71a2 c2iUV: 0xa76c7181
i2c argument handler #39 for: static (Ljava/lang/Object;JJJJ)V (363 bytes generated)
c2i argument handler starts at 0xa76c71a2
  0xa76c70c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c70c3: mov    $0xa75b1ac0,%edi
  0xa76c70c8: cmp    %edi,%eax
  0xa76c70ca: jbe    0xa76c70dd
  0xa76c70d0: mov    $0xa7691ac0,%edi
  0xa76c70d5: cmp    %edi,%eax
  0xa76c70d7: jb     0xa76c7122
  0xa76c70dd: mov    $0xa75af400,%edi
  0xa76c70e2: cmp    %edi,%eax
  0xa76c70e4: jbe    0xa76c70f7
  0xa76c70ea: mov    $0xa75b1728,%edi
  0xa76c70ef: cmp    %edi,%eax
  0xa76c70f1: jb     0xa76c7122
  0xa76c70f7: mov    $0xa76b4e40,%edi
  0xa76c70fc: cmp    %edi,%eax
  0xa76c70fe: jbe    0xa76c7111
  0xa76c7104: mov    $0xa76ba430,%edi
  0xa76c7109: cmp    %edi,%eax
  0xa76c710b: jb     0xa76c7122
  ;; i2c adapter must return to an interpreter frame
  0xa76c7111: push   $0xb75a2830
  0xa76c7116: call   0xa76c711b
  0xa76c711b: pusha  
  0xa76c711c: call   0xb7052f32
  0xa76c7121: hlt    
  ;; } verify_i2ce 
  0xa76c7122: mov    %esp,%edi
  0xa76c7124: sub    $0x20,%esp
  0xa76c7127: and    $0xfffffff0,%esp
  0xa76c712a: push   %eax
  0xa76c712b: mov    %edi,%eax
  0xa76c712d: mov    0x30(%ebx),%edi
  0xa76c7130: mov    0x24(%eax),%ecx
  0xa76c7133: mov    0x1c(%eax),%esi
  0xa76c7136: mov    %esi,0x4(%esp)
  0xa76c713a: mov    0x20(%eax),%esi
  0xa76c713d: mov    %esi,0x8(%esp)
  0xa76c7141: mov    0x14(%eax),%esi
  0xa76c7144: mov    %esi,0xc(%esp)
  0xa76c7148: mov    0x18(%eax),%esi
  0xa76c714b: mov    %esi,0x10(%esp)
  0xa76c714f: mov    0xc(%eax),%esi
  0xa76c7152: mov    %esi,0x14(%esp)
  0xa76c7156: mov    0x10(%eax),%esi
  0xa76c7159: mov    %esi,0x18(%esp)
  0xa76c715d: mov    0x4(%eax),%esi
  0xa76c7160: mov    %esi,0x1c(%esp)
  0xa76c7164: mov    0x8(%eax),%esi
  0xa76c7167: mov    %esi,0x20(%esp)
  0xa76c716b: mov    %esp,%eax
  0xa76c716d: shr    $0xc,%eax
  0xa76c7170: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c7177: mov    %ebx,0x16c(%eax)
  0xa76c717d: mov    %ebx,%eax
  0xa76c717f: jmp    *%edi
  0xa76c7181: mov    0x4(%ecx),%ebx
  0xa76c7184: cmp    0x8(%eax),%ebx
  0xa76c7187: mov    0x4(%eax),%ebx
  0xa76c718a: jne    0xa76c719d
  0xa76c7190: cmpl   $0x0,0x34(%ebx)
  0xa76c7197: je     0xa76c71dc
  0xa76c719d: jmp    0xa7692560
  0xa76c71a2: cmpl   $0x0,0x34(%ebx)
  0xa76c71a9: je     0xa76c71dc
  0xa76c71af: mov    (%esp),%eax
  0xa76c71b2: pusha  
  0xa76c71b3: pushf  
  0xa76c71b4: sub    $0x10,%esp
  0xa76c71b7: vmovsd %xmm0,(%esp)
  0xa76c71bc: vmovsd %xmm1,0x8(%esp)
  0xa76c71c2: push   %eax
  0xa76c71c3: push   %ebx
  0xa76c71c4: call   0xb71d62fc
  0xa76c71c9: add    $0x8,%esp
  0xa76c71cc: vmovsd (%esp),%xmm0
  0xa76c71d1: vmovsd 0x8(%esp),%xmm1
  0xa76c71d7: add    $0x10,%esp
  0xa76c71da: popf   
  0xa76c71db: popa   
  0xa76c71dc: pop    %eax
  0xa76c71dd: mov    %esp,%esi
  0xa76c71df: sub    $0x24,%esp
  0xa76c71e2: mov    %ecx,0x20(%esp)
  0xa76c71e6: mov    0x24(%esp),%edi
  0xa76c71ea: mov    %edi,0x18(%esp)
  0xa76c71ee: mov    0x28(%esp),%edi
  0xa76c71f2: mov    %edi,0x1c(%esp)
  0xa76c71f6: mov    0x2c(%esp),%edi
  0xa76c71fa: mov    %edi,0x10(%esp)
  0xa76c71fe: mov    0x30(%esp),%edi
  0xa76c7202: mov    %edi,0x14(%esp)
  0xa76c7206: mov    0x34(%esp),%edi
  0xa76c720a: mov    %edi,0x8(%esp)
  0xa76c720e: mov    0x38(%esp),%edi
  0xa76c7212: mov    %edi,0xc(%esp)
  0xa76c7216: mov    0x3c(%esp),%edi
  0xa76c721a: mov    %edi,(%esp)
  0xa76c721d: mov    0x40(%esp),%edi
  0xa76c7221: mov    %edi,0x4(%esp)
  0xa76c7225: mov    0x28(%ebx),%ecx
  0xa76c7228: push   %eax
  0xa76c7229: jmp    *%ecx

AHE@0xb66909e8: 0xbe7e0000 i2c: 0xa76c72c0 c2i: 0xa76c737a c2iUV: 0xa76c7359
i2c argument handler #40 for: static (JD)V (277 bytes generated)
c2i argument handler starts at 0xa76c737a
  0xa76c72c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c72c3: mov    $0xa75b1ac0,%edi
  0xa76c72c8: cmp    %edi,%eax
  0xa76c72ca: jbe    0xa76c72dd
  0xa76c72d0: mov    $0xa7691ac0,%edi
  0xa76c72d5: cmp    %edi,%eax
  0xa76c72d7: jb     0xa76c7322
  0xa76c72dd: mov    $0xa75af400,%edi
  0xa76c72e2: cmp    %edi,%eax
  0xa76c72e4: jbe    0xa76c72f7
  0xa76c72ea: mov    $0xa75b1728,%edi
  0xa76c72ef: cmp    %edi,%eax
  0xa76c72f1: jb     0xa76c7322
  0xa76c72f7: mov    $0xa76b4e40,%edi
  0xa76c72fc: cmp    %edi,%eax
  0xa76c72fe: jbe    0xa76c7311
  0xa76c7304: mov    $0xa76ba430,%edi
  0xa76c7309: cmp    %edi,%eax
  0xa76c730b: jb     0xa76c7322
  ;; i2c adapter must return to an interpreter frame
  0xa76c7311: push   $0xb75a2830
  0xa76c7316: call   0xa76c731b
  0xa76c731b: pusha  
  0xa76c731c: call   0xb7052f32
  0xa76c7321: hlt    
  ;; } verify_i2ce 
  0xa76c7322: mov    %esp,%edi
  0xa76c7324: sub    $0x8,%esp
  0xa76c7327: and    $0xfffffff0,%esp
  0xa76c732a: push   %eax
  0xa76c732b: mov    %edi,%eax
  0xa76c732d: mov    0x30(%ebx),%edi
  0xa76c7330: mov    0xc(%eax),%esi
  0xa76c7333: mov    %esi,0x4(%esp)
  0xa76c7337: mov    0x10(%eax),%esi
  0xa76c733a: mov    %esi,0x8(%esp)
  0xa76c733e: vmovsd 0x4(%eax),%xmm0
  0xa76c7343: mov    %esp,%eax
  0xa76c7345: shr    $0xc,%eax
  0xa76c7348: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c734f: mov    %ebx,0x16c(%eax)
  0xa76c7355: mov    %ebx,%eax
  0xa76c7357: jmp    *%edi
  0xa76c7359: mov    0x4(%ecx),%ebx
  0xa76c735c: cmp    0x8(%eax),%ebx
  0xa76c735f: mov    0x4(%eax),%ebx
  0xa76c7362: jne    0xa76c7375
  0xa76c7368: cmpl   $0x0,0x34(%ebx)
  0xa76c736f: je     0xa76c73b4
  0xa76c7375: jmp    0xa7692560
  0xa76c737a: cmpl   $0x0,0x34(%ebx)
  0xa76c7381: je     0xa76c73b4
  0xa76c7387: mov    (%esp),%eax
  0xa76c738a: pusha  
  0xa76c738b: pushf  
  0xa76c738c: sub    $0x10,%esp
  0xa76c738f: vmovsd %xmm0,(%esp)
  0xa76c7394: vmovsd %xmm1,0x8(%esp)
  0xa76c739a: push   %eax
  0xa76c739b: push   %ebx
  0xa76c739c: call   0xb71d62fc
  0xa76c73a1: add    $0x8,%esp
  0xa76c73a4: vmovsd (%esp),%xmm0
  0xa76c73a9: vmovsd 0x8(%esp),%xmm1
  0xa76c73af: add    $0x10,%esp
  0xa76c73b2: popf   
  0xa76c73b3: popa   
  0xa76c73b4: pop    %eax
  0xa76c73b5: mov    %esp,%esi
  0xa76c73b7: sub    $0x10,%esp
  0xa76c73ba: mov    0x10(%esp),%edi
  0xa76c73be: mov    %edi,0x8(%esp)
  0xa76c73c2: mov    0x14(%esp),%edi
  0xa76c73c6: mov    %edi,0xc(%esp)
  0xa76c73ca: vmovsd %xmm0,(%esp)
  0xa76c73cf: mov    0x28(%ebx),%ecx
  0xa76c73d2: push   %eax
  0xa76c73d3: jmp    *%ecx

AHE@0xb6690a0c: 0xbe600000 i2c: 0xa76c7480 c2i: 0xa76c753a c2iUV: 0xa76c7519
i2c argument handler #41 for: static (JF)V (277 bytes generated)
c2i argument handler starts at 0xa76c753a
  0xa76c7480: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c7483: mov    $0xa75b1ac0,%edi
  0xa76c7488: cmp    %edi,%eax
  0xa76c748a: jbe    0xa76c749d
  0xa76c7490: mov    $0xa7691ac0,%edi
  0xa76c7495: cmp    %edi,%eax
  0xa76c7497: jb     0xa76c74e2
  0xa76c749d: mov    $0xa75af400,%edi
  0xa76c74a2: cmp    %edi,%eax
  0xa76c74a4: jbe    0xa76c74b7
  0xa76c74aa: mov    $0xa75b1728,%edi
  0xa76c74af: cmp    %edi,%eax
  0xa76c74b1: jb     0xa76c74e2
  0xa76c74b7: mov    $0xa76b4e40,%edi
  0xa76c74bc: cmp    %edi,%eax
  0xa76c74be: jbe    0xa76c74d1
  0xa76c74c4: mov    $0xa76ba430,%edi
  0xa76c74c9: cmp    %edi,%eax
  0xa76c74cb: jb     0xa76c74e2
  ;; i2c adapter must return to an interpreter frame
  0xa76c74d1: push   $0xb75a2830
  0xa76c74d6: call   0xa76c74db
  0xa76c74db: pusha  
  0xa76c74dc: call   0xb7052f32
  0xa76c74e1: hlt    
  ;; } verify_i2ce 
  0xa76c74e2: mov    %esp,%edi
  0xa76c74e4: sub    $0x8,%esp
  0xa76c74e7: and    $0xfffffff0,%esp
  0xa76c74ea: push   %eax
  0xa76c74eb: mov    %edi,%eax
  0xa76c74ed: mov    0x30(%ebx),%edi
  0xa76c74f0: mov    0x8(%eax),%esi
  0xa76c74f3: mov    %esi,0x4(%esp)
  0xa76c74f7: mov    0xc(%eax),%esi
  0xa76c74fa: mov    %esi,0x8(%esp)
  0xa76c74fe: vmovss 0x4(%eax),%xmm0
  0xa76c7503: mov    %esp,%eax
  0xa76c7505: shr    $0xc,%eax
  0xa76c7508: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c750f: mov    %ebx,0x16c(%eax)
  0xa76c7515: mov    %ebx,%eax
  0xa76c7517: jmp    *%edi
  0xa76c7519: mov    0x4(%ecx),%ebx
  0xa76c751c: cmp    0x8(%eax),%ebx
  0xa76c751f: mov    0x4(%eax),%ebx
  0xa76c7522: jne    0xa76c7535
  0xa76c7528: cmpl   $0x0,0x34(%ebx)
  0xa76c752f: je     0xa76c7574
  0xa76c7535: jmp    0xa7692560
  0xa76c753a: cmpl   $0x0,0x34(%ebx)
  0xa76c7541: je     0xa76c7574
  0xa76c7547: mov    (%esp),%eax
  0xa76c754a: pusha  
  0xa76c754b: pushf  
  0xa76c754c: sub    $0x10,%esp
  0xa76c754f: vmovsd %xmm0,(%esp)
  0xa76c7554: vmovsd %xmm1,0x8(%esp)
  0xa76c755a: push   %eax
  0xa76c755b: push   %ebx
  0xa76c755c: call   0xb71d62fc
  0xa76c7561: add    $0x8,%esp
  0xa76c7564: vmovsd (%esp),%xmm0
  0xa76c7569: vmovsd 0x8(%esp),%xmm1
  0xa76c756f: add    $0x10,%esp
  0xa76c7572: popf   
  0xa76c7573: popa   
  0xa76c7574: pop    %eax
  0xa76c7575: mov    %esp,%esi
  0xa76c7577: sub    $0xc,%esp
  0xa76c757a: mov    0xc(%esp),%edi
  0xa76c757e: mov    %edi,0x4(%esp)
  0xa76c7582: mov    0x10(%esp),%edi
  0xa76c7586: mov    %edi,0x8(%esp)
  0xa76c758a: vmovss %xmm0,(%esp)
  0xa76c758f: mov    0x28(%ebx),%ecx
  0xa76c7592: push   %eax
  0xa76c7593: jmp    *%ecx

AHE@0xb6690a30: 0xbe7ea000 i2c: 0xa76c7640 c2i: 0xa76c76fd c2iUV: 0xa76c76dc
i2c argument handler #42 for: static (JDZ)V (284 bytes generated)
c2i argument handler starts at 0xa76c76fd
  0xa76c7640: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c7643: mov    $0xa75b1ac0,%edi
  0xa76c7648: cmp    %edi,%eax
  0xa76c764a: jbe    0xa76c765d
  0xa76c7650: mov    $0xa7691ac0,%edi
  0xa76c7655: cmp    %edi,%eax
  0xa76c7657: jb     0xa76c76a2
  0xa76c765d: mov    $0xa75af400,%edi
  0xa76c7662: cmp    %edi,%eax
  0xa76c7664: jbe    0xa76c7677
  0xa76c766a: mov    $0xa75b1728,%edi
  0xa76c766f: cmp    %edi,%eax
  0xa76c7671: jb     0xa76c76a2
  0xa76c7677: mov    $0xa76b4e40,%edi
  0xa76c767c: cmp    %edi,%eax
  0xa76c767e: jbe    0xa76c7691
  0xa76c7684: mov    $0xa76ba430,%edi
  0xa76c7689: cmp    %edi,%eax
  0xa76c768b: jb     0xa76c76a2
  ;; i2c adapter must return to an interpreter frame
  0xa76c7691: push   $0xb75a2830
  0xa76c7696: call   0xa76c769b
  0xa76c769b: pusha  
  0xa76c769c: call   0xb7052f32
  0xa76c76a1: hlt    
  ;; } verify_i2ce 
  0xa76c76a2: mov    %esp,%edi
  0xa76c76a4: sub    $0x8,%esp
  0xa76c76a7: and    $0xfffffff0,%esp
  0xa76c76aa: push   %eax
  0xa76c76ab: mov    %edi,%eax
  0xa76c76ad: mov    0x30(%ebx),%edi
  0xa76c76b0: mov    0x10(%eax),%esi
  0xa76c76b3: mov    %esi,0x4(%esp)
  0xa76c76b7: mov    0x14(%eax),%esi
  0xa76c76ba: mov    %esi,0x8(%esp)
  0xa76c76be: vmovsd 0x8(%eax),%xmm0
  0xa76c76c3: mov    0x4(%eax),%ecx
  0xa76c76c6: mov    %esp,%eax
  0xa76c76c8: shr    $0xc,%eax
  0xa76c76cb: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c76d2: mov    %ebx,0x16c(%eax)
  0xa76c76d8: mov    %ebx,%eax
  0xa76c76da: jmp    *%edi
  0xa76c76dc: mov    0x4(%ecx),%ebx
  0xa76c76df: cmp    0x8(%eax),%ebx
  0xa76c76e2: mov    0x4(%eax),%ebx
  0xa76c76e5: jne    0xa76c76f8
  0xa76c76eb: cmpl   $0x0,0x34(%ebx)
  0xa76c76f2: je     0xa76c7737
  0xa76c76f8: jmp    0xa7692560
  0xa76c76fd: cmpl   $0x0,0x34(%ebx)
  0xa76c7704: je     0xa76c7737
  0xa76c770a: mov    (%esp),%eax
  0xa76c770d: pusha  
  0xa76c770e: pushf  
  0xa76c770f: sub    $0x10,%esp
  0xa76c7712: vmovsd %xmm0,(%esp)
  0xa76c7717: vmovsd %xmm1,0x8(%esp)
  0xa76c771d: push   %eax
  0xa76c771e: push   %ebx
  0xa76c771f: call   0xb71d62fc
  0xa76c7724: add    $0x8,%esp
  0xa76c7727: vmovsd (%esp),%xmm0
  0xa76c772c: vmovsd 0x8(%esp),%xmm1
  0xa76c7732: add    $0x10,%esp
  0xa76c7735: popf   
  0xa76c7736: popa   
  0xa76c7737: pop    %eax
  0xa76c7738: mov    %esp,%esi
  0xa76c773a: sub    $0x14,%esp
  0xa76c773d: mov    0x14(%esp),%edi
  0xa76c7741: mov    %edi,0xc(%esp)
  0xa76c7745: mov    0x18(%esp),%edi
  0xa76c7749: mov    %edi,0x10(%esp)
  0xa76c774d: vmovsd %xmm0,0x4(%esp)
  0xa76c7753: mov    %ecx,(%esp)
  0xa76c7756: mov    0x28(%ebx),%ecx
  0xa76c7759: push   %eax
  0xa76c775a: jmp    *%ecx

AHE@0xb6690a54: 0xaa7ea000 i2c: 0xa76c7800 c2i: 0xa76c78b9 c2iUV: 0xa76c7898
i2c argument handler #43 for: static (Ljava/nio/ByteBuffer;IDZ)V (276 bytes generated)
c2i argument handler starts at 0xa76c78b9
  0xa76c7800: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c7803: mov    $0xa75b1ac0,%edi
  0xa76c7808: cmp    %edi,%eax
  0xa76c780a: jbe    0xa76c781d
  0xa76c7810: mov    $0xa7691ac0,%edi
  0xa76c7815: cmp    %edi,%eax
  0xa76c7817: jb     0xa76c7862
  0xa76c781d: mov    $0xa75af400,%edi
  0xa76c7822: cmp    %edi,%eax
  0xa76c7824: jbe    0xa76c7837
  0xa76c782a: mov    $0xa75b1728,%edi
  0xa76c782f: cmp    %edi,%eax
  0xa76c7831: jb     0xa76c7862
  0xa76c7837: mov    $0xa76b4e40,%edi
  0xa76c783c: cmp    %edi,%eax
  0xa76c783e: jbe    0xa76c7851
  0xa76c7844: mov    $0xa76ba430,%edi
  0xa76c7849: cmp    %edi,%eax
  0xa76c784b: jb     0xa76c7862
  ;; i2c adapter must return to an interpreter frame
  0xa76c7851: push   $0xb75a2830
  0xa76c7856: call   0xa76c785b
  0xa76c785b: pusha  
  0xa76c785c: call   0xb7052f32
  0xa76c7861: hlt    
  ;; } verify_i2ce 
  0xa76c7862: mov    %esp,%edi
  0xa76c7864: sub    $0x8,%esp
  0xa76c7867: and    $0xfffffff0,%esp
  0xa76c786a: push   %eax
  0xa76c786b: mov    %edi,%eax
  0xa76c786d: mov    0x30(%ebx),%edi
  0xa76c7870: mov    0x14(%eax),%ecx
  0xa76c7873: mov    0x10(%eax),%edx
  0xa76c7876: vmovsd 0x8(%eax),%xmm0
  0xa76c787b: mov    0x4(%eax),%esi
  0xa76c787e: mov    %esi,0x4(%esp)
  0xa76c7882: mov    %esp,%eax
  0xa76c7884: shr    $0xc,%eax
  0xa76c7887: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c788e: mov    %ebx,0x16c(%eax)
  0xa76c7894: mov    %ebx,%eax
  0xa76c7896: jmp    *%edi
  0xa76c7898: mov    0x4(%ecx),%ebx
  0xa76c789b: cmp    0x8(%eax),%ebx
  0xa76c789e: mov    0x4(%eax),%ebx
  0xa76c78a1: jne    0xa76c78b4
  0xa76c78a7: cmpl   $0x0,0x34(%ebx)
  0xa76c78ae: je     0xa76c78f3
  0xa76c78b4: jmp    0xa7692560
  0xa76c78b9: cmpl   $0x0,0x34(%ebx)
  0xa76c78c0: je     0xa76c78f3
  0xa76c78c6: mov    (%esp),%eax
  0xa76c78c9: pusha  
  0xa76c78ca: pushf  
  0xa76c78cb: sub    $0x10,%esp
  0xa76c78ce: vmovsd %xmm0,(%esp)
  0xa76c78d3: vmovsd %xmm1,0x8(%esp)
  0xa76c78d9: push   %eax
  0xa76c78da: push   %ebx
  0xa76c78db: call   0xb71d62fc
  0xa76c78e0: add    $0x8,%esp
  0xa76c78e3: vmovsd (%esp),%xmm0
  0xa76c78e8: vmovsd 0x8(%esp),%xmm1
  0xa76c78ee: add    $0x10,%esp
  0xa76c78f1: popf   
  0xa76c78f2: popa   
  0xa76c78f3: pop    %eax
  0xa76c78f4: mov    %esp,%esi
  0xa76c78f6: sub    $0x14,%esp
  0xa76c78f9: mov    %ecx,0x10(%esp)
  0xa76c78fd: mov    %edx,0xc(%esp)
  0xa76c7901: vmovsd %xmm0,0x4(%esp)
  0xa76c7907: mov    0x14(%esp),%edi
  0xa76c790b: mov    %edi,(%esp)
  0xa76c790e: mov    0x28(%ebx),%ecx
  0xa76c7911: push   %eax
  0xa76c7912: jmp    *%ecx

AHE@0xb6690a78: 0xbe6a0000 i2c: 0xa76c79c0 c2i: 0xa76c7a7d c2iUV: 0xa76c7a5c
i2c argument handler #44 for: static (JFZ)V (284 bytes generated)
c2i argument handler starts at 0xa76c7a7d
  0xa76c79c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c79c3: mov    $0xa75b1ac0,%edi
  0xa76c79c8: cmp    %edi,%eax
  0xa76c79ca: jbe    0xa76c79dd
  0xa76c79d0: mov    $0xa7691ac0,%edi
  0xa76c79d5: cmp    %edi,%eax
  0xa76c79d7: jb     0xa76c7a22
  0xa76c79dd: mov    $0xa75af400,%edi
  0xa76c79e2: cmp    %edi,%eax
  0xa76c79e4: jbe    0xa76c79f7
  0xa76c79ea: mov    $0xa75b1728,%edi
  0xa76c79ef: cmp    %edi,%eax
  0xa76c79f1: jb     0xa76c7a22
  0xa76c79f7: mov    $0xa76b4e40,%edi
  0xa76c79fc: cmp    %edi,%eax
  0xa76c79fe: jbe    0xa76c7a11
  0xa76c7a04: mov    $0xa76ba430,%edi
  0xa76c7a09: cmp    %edi,%eax
  0xa76c7a0b: jb     0xa76c7a22
  ;; i2c adapter must return to an interpreter frame
  0xa76c7a11: push   $0xb75a2830
  0xa76c7a16: call   0xa76c7a1b
  0xa76c7a1b: pusha  
  0xa76c7a1c: call   0xb7052f32
  0xa76c7a21: hlt    
  ;; } verify_i2ce 
  0xa76c7a22: mov    %esp,%edi
  0xa76c7a24: sub    $0x8,%esp
  0xa76c7a27: and    $0xfffffff0,%esp
  0xa76c7a2a: push   %eax
  0xa76c7a2b: mov    %edi,%eax
  0xa76c7a2d: mov    0x30(%ebx),%edi
  0xa76c7a30: mov    0xc(%eax),%esi
  0xa76c7a33: mov    %esi,0x4(%esp)
  0xa76c7a37: mov    0x10(%eax),%esi
  0xa76c7a3a: mov    %esi,0x8(%esp)
  0xa76c7a3e: vmovss 0x8(%eax),%xmm0
  0xa76c7a43: mov    0x4(%eax),%ecx
  0xa76c7a46: mov    %esp,%eax
  0xa76c7a48: shr    $0xc,%eax
  0xa76c7a4b: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c7a52: mov    %ebx,0x16c(%eax)
  0xa76c7a58: mov    %ebx,%eax
  0xa76c7a5a: jmp    *%edi
  0xa76c7a5c: mov    0x4(%ecx),%ebx
  0xa76c7a5f: cmp    0x8(%eax),%ebx
  0xa76c7a62: mov    0x4(%eax),%ebx
  0xa76c7a65: jne    0xa76c7a78
  0xa76c7a6b: cmpl   $0x0,0x34(%ebx)
  0xa76c7a72: je     0xa76c7ab7
  0xa76c7a78: jmp    0xa7692560
  0xa76c7a7d: cmpl   $0x0,0x34(%ebx)
  0xa76c7a84: je     0xa76c7ab7
  0xa76c7a8a: mov    (%esp),%eax
  0xa76c7a8d: pusha  
  0xa76c7a8e: pushf  
  0xa76c7a8f: sub    $0x10,%esp
  0xa76c7a92: vmovsd %xmm0,(%esp)
  0xa76c7a97: vmovsd %xmm1,0x8(%esp)
  0xa76c7a9d: push   %eax
  0xa76c7a9e: push   %ebx
  0xa76c7a9f: call   0xb71d62fc
  0xa76c7aa4: add    $0x8,%esp
  0xa76c7aa7: vmovsd (%esp),%xmm0
  0xa76c7aac: vmovsd 0x8(%esp),%xmm1
  0xa76c7ab2: add    $0x10,%esp
  0xa76c7ab5: popf   
  0xa76c7ab6: popa   
  0xa76c7ab7: pop    %eax
  0xa76c7ab8: mov    %esp,%esi
  0xa76c7aba: sub    $0x10,%esp
  0xa76c7abd: mov    0x10(%esp),%edi
  0xa76c7ac1: mov    %edi,0x8(%esp)
  0xa76c7ac5: mov    0x14(%esp),%edi
  0xa76c7ac9: mov    %edi,0xc(%esp)
  0xa76c7acd: vmovss %xmm0,0x4(%esp)
  0xa76c7ad3: mov    %ecx,(%esp)
  0xa76c7ad6: mov    0x28(%ebx),%ecx
  0xa76c7ad9: push   %eax
  0xa76c7ada: jmp    *%ecx

AHE@0xb6690a9c: 0xaa6a0000 i2c: 0xa76c7b80 c2i: 0xa76c7c39 c2iUV: 0xa76c7c18
i2c argument handler #45 for: static (Ljava/nio/ByteBuffer;IFZ)V (276 bytes generated)
c2i argument handler starts at 0xa76c7c39
  0xa76c7b80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c7b83: mov    $0xa75b1ac0,%edi
  0xa76c7b88: cmp    %edi,%eax
  0xa76c7b8a: jbe    0xa76c7b9d
  0xa76c7b90: mov    $0xa7691ac0,%edi
  0xa76c7b95: cmp    %edi,%eax
  0xa76c7b97: jb     0xa76c7be2
  0xa76c7b9d: mov    $0xa75af400,%edi
  0xa76c7ba2: cmp    %edi,%eax
  0xa76c7ba4: jbe    0xa76c7bb7
  0xa76c7baa: mov    $0xa75b1728,%edi
  0xa76c7baf: cmp    %edi,%eax
  0xa76c7bb1: jb     0xa76c7be2
  0xa76c7bb7: mov    $0xa76b4e40,%edi
  0xa76c7bbc: cmp    %edi,%eax
  0xa76c7bbe: jbe    0xa76c7bd1
  0xa76c7bc4: mov    $0xa76ba430,%edi
  0xa76c7bc9: cmp    %edi,%eax
  0xa76c7bcb: jb     0xa76c7be2
  ;; i2c adapter must return to an interpreter frame
  0xa76c7bd1: push   $0xb75a2830
  0xa76c7bd6: call   0xa76c7bdb
  0xa76c7bdb: pusha  
  0xa76c7bdc: call   0xb7052f32
  0xa76c7be1: hlt    
  ;; } verify_i2ce 
  0xa76c7be2: mov    %esp,%edi
  0xa76c7be4: sub    $0x8,%esp
  0xa76c7be7: and    $0xfffffff0,%esp
  0xa76c7bea: push   %eax
  0xa76c7beb: mov    %edi,%eax
  0xa76c7bed: mov    0x30(%ebx),%edi
  0xa76c7bf0: mov    0x10(%eax),%ecx
  0xa76c7bf3: mov    0xc(%eax),%edx
  0xa76c7bf6: vmovss 0x8(%eax),%xmm0
  0xa76c7bfb: mov    0x4(%eax),%esi
  0xa76c7bfe: mov    %esi,0x4(%esp)
  0xa76c7c02: mov    %esp,%eax
  0xa76c7c04: shr    $0xc,%eax
  0xa76c7c07: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c7c0e: mov    %ebx,0x16c(%eax)
  0xa76c7c14: mov    %ebx,%eax
  0xa76c7c16: jmp    *%edi
  0xa76c7c18: mov    0x4(%ecx),%ebx
  0xa76c7c1b: cmp    0x8(%eax),%ebx
  0xa76c7c1e: mov    0x4(%eax),%ebx
  0xa76c7c21: jne    0xa76c7c34
  0xa76c7c27: cmpl   $0x0,0x34(%ebx)
  0xa76c7c2e: je     0xa76c7c73
  0xa76c7c34: jmp    0xa7692560
  0xa76c7c39: cmpl   $0x0,0x34(%ebx)
  0xa76c7c40: je     0xa76c7c73
  0xa76c7c46: mov    (%esp),%eax
  0xa76c7c49: pusha  
  0xa76c7c4a: pushf  
  0xa76c7c4b: sub    $0x10,%esp
  0xa76c7c4e: vmovsd %xmm0,(%esp)
  0xa76c7c53: vmovsd %xmm1,0x8(%esp)
  0xa76c7c59: push   %eax
  0xa76c7c5a: push   %ebx
  0xa76c7c5b: call   0xb71d62fc
  0xa76c7c60: add    $0x8,%esp
  0xa76c7c63: vmovsd (%esp),%xmm0
  0xa76c7c68: vmovsd 0x8(%esp),%xmm1
  0xa76c7c6e: add    $0x10,%esp
  0xa76c7c71: popf   
  0xa76c7c72: popa   
  0xa76c7c73: pop    %eax
  0xa76c7c74: mov    %esp,%esi
  0xa76c7c76: sub    $0x10,%esp
  0xa76c7c79: mov    %ecx,0xc(%esp)
  0xa76c7c7d: mov    %edx,0x8(%esp)
  0xa76c7c81: vmovss %xmm0,0x4(%esp)
  0xa76c7c87: mov    0x10(%esp),%edi
  0xa76c7c8b: mov    %edi,(%esp)
  0xa76c7c8e: mov    0x28(%ebx),%ecx
  0xa76c7c91: push   %eax
  0xa76c7c92: jmp    *%ecx

AHE@0xb6690ac0: 0xbebea000 i2c: 0xa76c7d40 c2i: 0xa76c7e06 c2iUV: 0xa76c7de5
i2c argument handler #46 for: static (JJZ)V (303 bytes generated)
c2i argument handler starts at 0xa76c7e06
  0xa76c7d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c7d43: mov    $0xa75b1ac0,%edi
  0xa76c7d48: cmp    %edi,%eax
  0xa76c7d4a: jbe    0xa76c7d5d
  0xa76c7d50: mov    $0xa7691ac0,%edi
  0xa76c7d55: cmp    %edi,%eax
  0xa76c7d57: jb     0xa76c7da2
  0xa76c7d5d: mov    $0xa75af400,%edi
  0xa76c7d62: cmp    %edi,%eax
  0xa76c7d64: jbe    0xa76c7d77
  0xa76c7d6a: mov    $0xa75b1728,%edi
  0xa76c7d6f: cmp    %edi,%eax
  0xa76c7d71: jb     0xa76c7da2
  0xa76c7d77: mov    $0xa76b4e40,%edi
  0xa76c7d7c: cmp    %edi,%eax
  0xa76c7d7e: jbe    0xa76c7d91
  0xa76c7d84: mov    $0xa76ba430,%edi
  0xa76c7d89: cmp    %edi,%eax
  0xa76c7d8b: jb     0xa76c7da2
  ;; i2c adapter must return to an interpreter frame
  0xa76c7d91: push   $0xb75a2830
  0xa76c7d96: call   0xa76c7d9b
  0xa76c7d9b: pusha  
  0xa76c7d9c: call   0xb7052f32
  0xa76c7da1: hlt    
  ;; } verify_i2ce 
  0xa76c7da2: mov    %esp,%edi
  0xa76c7da4: sub    $0x10,%esp
  0xa76c7da7: and    $0xfffffff0,%esp
  0xa76c7daa: push   %eax
  0xa76c7dab: mov    %edi,%eax
  0xa76c7dad: mov    0x30(%ebx),%edi
  0xa76c7db0: mov    0x10(%eax),%esi
  0xa76c7db3: mov    %esi,0x4(%esp)
  0xa76c7db7: mov    0x14(%eax),%esi
  0xa76c7dba: mov    %esi,0x8(%esp)
  0xa76c7dbe: mov    0x8(%eax),%esi
  0xa76c7dc1: mov    %esi,0xc(%esp)
  0xa76c7dc5: mov    0xc(%eax),%esi
  0xa76c7dc8: mov    %esi,0x10(%esp)
  0xa76c7dcc: mov    0x4(%eax),%ecx
  0xa76c7dcf: mov    %esp,%eax
  0xa76c7dd1: shr    $0xc,%eax
  0xa76c7dd4: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c7ddb: mov    %ebx,0x16c(%eax)
  0xa76c7de1: mov    %ebx,%eax
  0xa76c7de3: jmp    *%edi
  0xa76c7de5: mov    0x4(%ecx),%ebx
  0xa76c7de8: cmp    0x8(%eax),%ebx
  0xa76c7deb: mov    0x4(%eax),%ebx
  0xa76c7dee: jne    0xa76c7e01
  0xa76c7df4: cmpl   $0x0,0x34(%ebx)
  0xa76c7dfb: je     0xa76c7e40
  0xa76c7e01: jmp    0xa7692560
  0xa76c7e06: cmpl   $0x0,0x34(%ebx)
  0xa76c7e0d: je     0xa76c7e40
  0xa76c7e13: mov    (%esp),%eax
  0xa76c7e16: pusha  
  0xa76c7e17: pushf  
  0xa76c7e18: sub    $0x10,%esp
  0xa76c7e1b: vmovsd %xmm0,(%esp)
  0xa76c7e20: vmovsd %xmm1,0x8(%esp)
  0xa76c7e26: push   %eax
  0xa76c7e27: push   %ebx
  0xa76c7e28: call   0xb71d62fc
  0xa76c7e2d: add    $0x8,%esp
  0xa76c7e30: vmovsd (%esp),%xmm0
  0xa76c7e35: vmovsd 0x8(%esp),%xmm1
  0xa76c7e3b: add    $0x10,%esp
  0xa76c7e3e: popf   
  0xa76c7e3f: popa   
  0xa76c7e40: pop    %eax
  0xa76c7e41: mov    %esp,%esi
  0xa76c7e43: sub    $0x14,%esp
  0xa76c7e46: mov    0x14(%esp),%edi
  0xa76c7e4a: mov    %edi,0xc(%esp)
  0xa76c7e4e: mov    0x18(%esp),%edi
  0xa76c7e52: mov    %edi,0x10(%esp)
  0xa76c7e56: mov    0x1c(%esp),%edi
  0xa76c7e5a: mov    %edi,0x4(%esp)
  0xa76c7e5e: mov    0x20(%esp),%edi
  0xa76c7e62: mov    %edi,0x8(%esp)
  0xa76c7e66: mov    %ecx,(%esp)
  0xa76c7e69: mov    0x28(%ebx),%ecx
  0xa76c7e6c: push   %eax
  0xa76c7e6d: jmp    *%ecx

AHE@0xb6690ae4: 0xaabea000 i2c: 0xa76c7f00 c2i: 0xa76c7fc2 c2iUV: 0xa76c7fa1
i2c argument handler #47 for: static (Ljava/nio/ByteBuffer;IJZ)V (295 bytes generated)
c2i argument handler starts at 0xa76c7fc2
  0xa76c7f00: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c7f03: mov    $0xa75b1ac0,%edi
  0xa76c7f08: cmp    %edi,%eax
  0xa76c7f0a: jbe    0xa76c7f1d
  0xa76c7f10: mov    $0xa7691ac0,%edi
  0xa76c7f15: cmp    %edi,%eax
  0xa76c7f17: jb     0xa76c7f62
  0xa76c7f1d: mov    $0xa75af400,%edi
  0xa76c7f22: cmp    %edi,%eax
  0xa76c7f24: jbe    0xa76c7f37
  0xa76c7f2a: mov    $0xa75b1728,%edi
  0xa76c7f2f: cmp    %edi,%eax
  0xa76c7f31: jb     0xa76c7f62
  0xa76c7f37: mov    $0xa76b4e40,%edi
  0xa76c7f3c: cmp    %edi,%eax
  0xa76c7f3e: jbe    0xa76c7f51
  0xa76c7f44: mov    $0xa76ba430,%edi
  0xa76c7f49: cmp    %edi,%eax
  0xa76c7f4b: jb     0xa76c7f62
  ;; i2c adapter must return to an interpreter frame
  0xa76c7f51: push   $0xb75a2830
  0xa76c7f56: call   0xa76c7f5b
  0xa76c7f5b: pusha  
  0xa76c7f5c: call   0xb7052f32
  0xa76c7f61: hlt    
  ;; } verify_i2ce 
  0xa76c7f62: mov    %esp,%edi
  0xa76c7f64: sub    $0x10,%esp
  0xa76c7f67: and    $0xfffffff0,%esp
  0xa76c7f6a: push   %eax
  0xa76c7f6b: mov    %edi,%eax
  0xa76c7f6d: mov    0x30(%ebx),%edi
  0xa76c7f70: mov    0x14(%eax),%ecx
  0xa76c7f73: mov    0x10(%eax),%edx
  0xa76c7f76: mov    0x8(%eax),%esi
  0xa76c7f79: mov    %esi,0x4(%esp)
  0xa76c7f7d: mov    0xc(%eax),%esi
  0xa76c7f80: mov    %esi,0x8(%esp)
  0xa76c7f84: mov    0x4(%eax),%esi
  0xa76c7f87: mov    %esi,0xc(%esp)
  0xa76c7f8b: mov    %esp,%eax
  0xa76c7f8d: shr    $0xc,%eax
  0xa76c7f90: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c7f97: mov    %ebx,0x16c(%eax)
  0xa76c7f9d: mov    %ebx,%eax
  0xa76c7f9f: jmp    *%edi
  0xa76c7fa1: mov    0x4(%ecx),%ebx
  0xa76c7fa4: cmp    0x8(%eax),%ebx
  0xa76c7fa7: mov    0x4(%eax),%ebx
  0xa76c7faa: jne    0xa76c7fbd
  0xa76c7fb0: cmpl   $0x0,0x34(%ebx)
  0xa76c7fb7: je     0xa76c7ffc
  0xa76c7fbd: jmp    0xa7692560
  0xa76c7fc2: cmpl   $0x0,0x34(%ebx)
  0xa76c7fc9: je     0xa76c7ffc
  0xa76c7fcf: mov    (%esp),%eax
  0xa76c7fd2: pusha  
  0xa76c7fd3: pushf  
  0xa76c7fd4: sub    $0x10,%esp
  0xa76c7fd7: vmovsd %xmm0,(%esp)
  0xa76c7fdc: vmovsd %xmm1,0x8(%esp)
  0xa76c7fe2: push   %eax
  0xa76c7fe3: push   %ebx
  0xa76c7fe4: call   0xb71d62fc
  0xa76c7fe9: add    $0x8,%esp
  0xa76c7fec: vmovsd (%esp),%xmm0
  0xa76c7ff1: vmovsd 0x8(%esp),%xmm1
  0xa76c7ff7: add    $0x10,%esp
  0xa76c7ffa: popf   
  0xa76c7ffb: popa   
  0xa76c7ffc: pop    %eax
  0xa76c7ffd: mov    %esp,%esi
  0xa76c7fff: sub    $0x14,%esp
  0xa76c8002: mov    %ecx,0x10(%esp)
  0xa76c8006: mov    %edx,0xc(%esp)
  0xa76c800a: mov    0x14(%esp),%edi
  0xa76c800e: mov    %edi,0x4(%esp)
  0xa76c8012: mov    0x18(%esp),%edi
  0xa76c8016: mov    %edi,0x8(%esp)
  0xa76c801a: mov    0x1c(%esp),%edi
  0xa76c801e: mov    %edi,(%esp)
  0xa76c8021: mov    0x28(%ebx),%ecx
  0xa76c8024: push   %eax
  0xa76c8025: jmp    *%ecx

AHE@0xb6690b08: 0xbeaa0000 i2c: 0xa76c80c0 c2i: 0xa76c817b c2iUV: 0xa76c815a
i2c argument handler #48 for: static (JIZ)V (280 bytes generated)
c2i argument handler starts at 0xa76c817b
  0xa76c80c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c80c3: mov    $0xa75b1ac0,%edi
  0xa76c80c8: cmp    %edi,%eax
  0xa76c80ca: jbe    0xa76c80dd
  0xa76c80d0: mov    $0xa7691ac0,%edi
  0xa76c80d5: cmp    %edi,%eax
  0xa76c80d7: jb     0xa76c8122
  0xa76c80dd: mov    $0xa75af400,%edi
  0xa76c80e2: cmp    %edi,%eax
  0xa76c80e4: jbe    0xa76c80f7
  0xa76c80ea: mov    $0xa75b1728,%edi
  0xa76c80ef: cmp    %edi,%eax
  0xa76c80f1: jb     0xa76c8122
  0xa76c80f7: mov    $0xa76b4e40,%edi
  0xa76c80fc: cmp    %edi,%eax
  0xa76c80fe: jbe    0xa76c8111
  0xa76c8104: mov    $0xa76ba430,%edi
  0xa76c8109: cmp    %edi,%eax
  0xa76c810b: jb     0xa76c8122
  ;; i2c adapter must return to an interpreter frame
  0xa76c8111: push   $0xb75a2830
  0xa76c8116: call   0xa76c811b
  0xa76c811b: pusha  
  0xa76c811c: call   0xb7052f32
  0xa76c8121: hlt    
  ;; } verify_i2ce 
  0xa76c8122: mov    %esp,%edi
  0xa76c8124: sub    $0x8,%esp
  0xa76c8127: and    $0xfffffff0,%esp
  0xa76c812a: push   %eax
  0xa76c812b: mov    %edi,%eax
  0xa76c812d: mov    0x30(%ebx),%edi
  0xa76c8130: mov    0xc(%eax),%esi
  0xa76c8133: mov    %esi,0x4(%esp)
  0xa76c8137: mov    0x10(%eax),%esi
  0xa76c813a: mov    %esi,0x8(%esp)
  0xa76c813e: mov    0x8(%eax),%ecx
  0xa76c8141: mov    0x4(%eax),%edx
  0xa76c8144: mov    %esp,%eax
  0xa76c8146: shr    $0xc,%eax
  0xa76c8149: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c8150: mov    %ebx,0x16c(%eax)
  0xa76c8156: mov    %ebx,%eax
  0xa76c8158: jmp    *%edi
  0xa76c815a: mov    0x4(%ecx),%ebx
  0xa76c815d: cmp    0x8(%eax),%ebx
  0xa76c8160: mov    0x4(%eax),%ebx
  0xa76c8163: jne    0xa76c8176
  0xa76c8169: cmpl   $0x0,0x34(%ebx)
  0xa76c8170: je     0xa76c81b5
  0xa76c8176: jmp    0xa7692560
  0xa76c817b: cmpl   $0x0,0x34(%ebx)
  0xa76c8182: je     0xa76c81b5
  0xa76c8188: mov    (%esp),%eax
  0xa76c818b: pusha  
  0xa76c818c: pushf  
  0xa76c818d: sub    $0x10,%esp
  0xa76c8190: vmovsd %xmm0,(%esp)
  0xa76c8195: vmovsd %xmm1,0x8(%esp)
  0xa76c819b: push   %eax
  0xa76c819c: push   %ebx
  0xa76c819d: call   0xb71d62fc
  0xa76c81a2: add    $0x8,%esp
  0xa76c81a5: vmovsd (%esp),%xmm0
  0xa76c81aa: vmovsd 0x8(%esp),%xmm1
  0xa76c81b0: add    $0x10,%esp
  0xa76c81b3: popf   
  0xa76c81b4: popa   
  0xa76c81b5: pop    %eax
  0xa76c81b6: mov    %esp,%esi
  0xa76c81b8: sub    $0x10,%esp
  0xa76c81bb: mov    0x10(%esp),%edi
  0xa76c81bf: mov    %edi,0x8(%esp)
  0xa76c81c3: mov    0x14(%esp),%edi
  0xa76c81c7: mov    %edi,0xc(%esp)
  0xa76c81cb: mov    %ecx,0x4(%esp)
  0xa76c81cf: mov    %edx,(%esp)
  0xa76c81d2: mov    0x28(%ebx),%ecx
  0xa76c81d5: push   %eax
  0xa76c81d6: jmp    *%ecx

AHE@0xb6690b2c: 0xabebe000 i2c: 0xa76c8280 c2i: 0xa76c8346 c2iUV: 0xa76c8325
i2c argument handler #49 for: receiver (JJ)Z (303 bytes generated)
c2i argument handler starts at 0xa76c8346
  0xa76c8280: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c8283: mov    $0xa75b1ac0,%edi
  0xa76c8288: cmp    %edi,%eax
  0xa76c828a: jbe    0xa76c829d
  0xa76c8290: mov    $0xa7691ac0,%edi
  0xa76c8295: cmp    %edi,%eax
  0xa76c8297: jb     0xa76c82e2
  0xa76c829d: mov    $0xa75af400,%edi
  0xa76c82a2: cmp    %edi,%eax
  0xa76c82a4: jbe    0xa76c82b7
  0xa76c82aa: mov    $0xa75b1728,%edi
  0xa76c82af: cmp    %edi,%eax
  0xa76c82b1: jb     0xa76c82e2
  0xa76c82b7: mov    $0xa76b4e40,%edi
  0xa76c82bc: cmp    %edi,%eax
  0xa76c82be: jbe    0xa76c82d1
  0xa76c82c4: mov    $0xa76ba430,%edi
  0xa76c82c9: cmp    %edi,%eax
  0xa76c82cb: jb     0xa76c82e2
  ;; i2c adapter must return to an interpreter frame
  0xa76c82d1: push   $0xb75a2830
  0xa76c82d6: call   0xa76c82db
  0xa76c82db: pusha  
  0xa76c82dc: call   0xb7052f32
  0xa76c82e1: hlt    
  ;; } verify_i2ce 
  0xa76c82e2: mov    %esp,%edi
  0xa76c82e4: sub    $0x10,%esp
  0xa76c82e7: and    $0xfffffff0,%esp
  0xa76c82ea: push   %eax
  0xa76c82eb: mov    %edi,%eax
  0xa76c82ed: mov    0x30(%ebx),%edi
  0xa76c82f0: mov    0x14(%eax),%ecx
  0xa76c82f3: mov    0xc(%eax),%esi
  0xa76c82f6: mov    %esi,0x4(%esp)
  0xa76c82fa: mov    0x10(%eax),%esi
  0xa76c82fd: mov    %esi,0x8(%esp)
  0xa76c8301: mov    0x4(%eax),%esi
  0xa76c8304: mov    %esi,0xc(%esp)
  0xa76c8308: mov    0x8(%eax),%esi
  0xa76c830b: mov    %esi,0x10(%esp)
  0xa76c830f: mov    %esp,%eax
  0xa76c8311: shr    $0xc,%eax
  0xa76c8314: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c831b: mov    %ebx,0x16c(%eax)
  0xa76c8321: mov    %ebx,%eax
  0xa76c8323: jmp    *%edi
  0xa76c8325: mov    0x4(%ecx),%ebx
  0xa76c8328: cmp    0x8(%eax),%ebx
  0xa76c832b: mov    0x4(%eax),%ebx
  0xa76c832e: jne    0xa76c8341
  0xa76c8334: cmpl   $0x0,0x34(%ebx)
  0xa76c833b: je     0xa76c8380
  0xa76c8341: jmp    0xa7692560
  0xa76c8346: cmpl   $0x0,0x34(%ebx)
  0xa76c834d: je     0xa76c8380
  0xa76c8353: mov    (%esp),%eax
  0xa76c8356: pusha  
  0xa76c8357: pushf  
  0xa76c8358: sub    $0x10,%esp
  0xa76c835b: vmovsd %xmm0,(%esp)
  0xa76c8360: vmovsd %xmm1,0x8(%esp)
  0xa76c8366: push   %eax
  0xa76c8367: push   %ebx
  0xa76c8368: call   0xb71d62fc
  0xa76c836d: add    $0x8,%esp
  0xa76c8370: vmovsd (%esp),%xmm0
  0xa76c8375: vmovsd 0x8(%esp),%xmm1
  0xa76c837b: add    $0x10,%esp
  0xa76c837e: popf   
  0xa76c837f: popa   
  0xa76c8380: pop    %eax
  0xa76c8381: mov    %esp,%esi
  0xa76c8383: sub    $0x14,%esp
  0xa76c8386: mov    %ecx,0x10(%esp)
  0xa76c838a: mov    0x14(%esp),%edi
  0xa76c838e: mov    %edi,0x8(%esp)
  0xa76c8392: mov    0x18(%esp),%edi
  0xa76c8396: mov    %edi,0xc(%esp)
  0xa76c839a: mov    0x1c(%esp),%edi
  0xa76c839e: mov    %edi,(%esp)
  0xa76c83a1: mov    0x20(%esp),%edi
  0xa76c83a5: mov    %edi,0x4(%esp)
  0xa76c83a9: mov    0x28(%ebx),%ecx
  0xa76c83ac: push   %eax
  0xa76c83ad: jmp    *%ecx

AHE@0xb6690b50: 0xabeaa000 i2c: 0xa76c8440 c2i: 0xa76c8502 c2iUV: 0xa76c84e1
i2c argument handler #50 for: receiver (JILjava/lang/Object;)Ljava/nio/ByteBuffer; (295 bytes generated)
c2i argument handler starts at 0xa76c8502
  0xa76c8440: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c8443: mov    $0xa75b1ac0,%edi
  0xa76c8448: cmp    %edi,%eax
  0xa76c844a: jbe    0xa76c845d
  0xa76c8450: mov    $0xa7691ac0,%edi
  0xa76c8455: cmp    %edi,%eax
  0xa76c8457: jb     0xa76c84a2
  0xa76c845d: mov    $0xa75af400,%edi
  0xa76c8462: cmp    %edi,%eax
  0xa76c8464: jbe    0xa76c8477
  0xa76c846a: mov    $0xa75b1728,%edi
  0xa76c846f: cmp    %edi,%eax
  0xa76c8471: jb     0xa76c84a2
  0xa76c8477: mov    $0xa76b4e40,%edi
  0xa76c847c: cmp    %edi,%eax
  0xa76c847e: jbe    0xa76c8491
  0xa76c8484: mov    $0xa76ba430,%edi
  0xa76c8489: cmp    %edi,%eax
  0xa76c848b: jb     0xa76c84a2
  ;; i2c adapter must return to an interpreter frame
  0xa76c8491: push   $0xb75a2830
  0xa76c8496: call   0xa76c849b
  0xa76c849b: pusha  
  0xa76c849c: call   0xb7052f32
  0xa76c84a1: hlt    
  ;; } verify_i2ce 
  0xa76c84a2: mov    %esp,%edi
  0xa76c84a4: sub    $0x10,%esp
  0xa76c84a7: and    $0xfffffff0,%esp
  0xa76c84aa: push   %eax
  0xa76c84ab: mov    %edi,%eax
  0xa76c84ad: mov    0x30(%ebx),%edi
  0xa76c84b0: mov    0x14(%eax),%ecx
  0xa76c84b3: mov    0xc(%eax),%esi
  0xa76c84b6: mov    %esi,0x4(%esp)
  0xa76c84ba: mov    0x10(%eax),%esi
  0xa76c84bd: mov    %esi,0x8(%esp)
  0xa76c84c1: mov    0x8(%eax),%edx
  0xa76c84c4: mov    0x4(%eax),%esi
  0xa76c84c7: mov    %esi,0xc(%esp)
  0xa76c84cb: mov    %esp,%eax
  0xa76c84cd: shr    $0xc,%eax
  0xa76c84d0: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c84d7: mov    %ebx,0x16c(%eax)
  0xa76c84dd: mov    %ebx,%eax
  0xa76c84df: jmp    *%edi
  0xa76c84e1: mov    0x4(%ecx),%ebx
  0xa76c84e4: cmp    0x8(%eax),%ebx
  0xa76c84e7: mov    0x4(%eax),%ebx
  0xa76c84ea: jne    0xa76c84fd
  0xa76c84f0: cmpl   $0x0,0x34(%ebx)
  0xa76c84f7: je     0xa76c853c
  0xa76c84fd: jmp    0xa7692560
  0xa76c8502: cmpl   $0x0,0x34(%ebx)
  0xa76c8509: je     0xa76c853c
  0xa76c850f: mov    (%esp),%eax
  0xa76c8512: pusha  
  0xa76c8513: pushf  
  0xa76c8514: sub    $0x10,%esp
  0xa76c8517: vmovsd %xmm0,(%esp)
  0xa76c851c: vmovsd %xmm1,0x8(%esp)
  0xa76c8522: push   %eax
  0xa76c8523: push   %ebx
  0xa76c8524: call   0xb71d62fc
  0xa76c8529: add    $0x8,%esp
  0xa76c852c: vmovsd (%esp),%xmm0
  0xa76c8531: vmovsd 0x8(%esp),%xmm1
  0xa76c8537: add    $0x10,%esp
  0xa76c853a: popf   
  0xa76c853b: popa   
  0xa76c853c: pop    %eax
  0xa76c853d: mov    %esp,%esi
  0xa76c853f: sub    $0x14,%esp
  0xa76c8542: mov    %ecx,0x10(%esp)
  0xa76c8546: mov    0x14(%esp),%edi
  0xa76c854a: mov    %edi,0x8(%esp)
  0xa76c854e: mov    0x18(%esp),%edi
  0xa76c8552: mov    %edi,0xc(%esp)
  0xa76c8556: mov    %edx,0x4(%esp)
  0xa76c855a: mov    0x1c(%esp),%edi
  0xa76c855e: mov    %edi,(%esp)
  0xa76c8561: mov    0x28(%ebx),%ecx
  0xa76c8564: push   %eax
  0xa76c8565: jmp    *%ecx

AHE@0xb6690b74: 0xbeaaaa00 i2c: 0xa76c8600 c2i: 0xa76c86c9 c2iUV: 0xa76c86a8
i2c argument handler #51 for: static (JI[CII)I (310 bytes generated)
c2i argument handler starts at 0xa76c86c9
  0xa76c8600: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c8603: mov    $0xa75b1ac0,%edi
  0xa76c8608: cmp    %edi,%eax
  0xa76c860a: jbe    0xa76c861d
  0xa76c8610: mov    $0xa7691ac0,%edi
  0xa76c8615: cmp    %edi,%eax
  0xa76c8617: jb     0xa76c8662
  0xa76c861d: mov    $0xa75af400,%edi
  0xa76c8622: cmp    %edi,%eax
  0xa76c8624: jbe    0xa76c8637
  0xa76c862a: mov    $0xa75b1728,%edi
  0xa76c862f: cmp    %edi,%eax
  0xa76c8631: jb     0xa76c8662
  0xa76c8637: mov    $0xa76b4e40,%edi
  0xa76c863c: cmp    %edi,%eax
  0xa76c863e: jbe    0xa76c8651
  0xa76c8644: mov    $0xa76ba430,%edi
  0xa76c8649: cmp    %edi,%eax
  0xa76c864b: jb     0xa76c8662
  ;; i2c adapter must return to an interpreter frame
  0xa76c8651: push   $0xb75a2830
  0xa76c8656: call   0xa76c865b
  0xa76c865b: pusha  
  0xa76c865c: call   0xb7052f32
  0xa76c8661: hlt    
  ;; } verify_i2ce 
  0xa76c8662: mov    %esp,%edi
  0xa76c8664: sub    $0x10,%esp
  0xa76c8667: and    $0xfffffff0,%esp
  0xa76c866a: push   %eax
  0xa76c866b: mov    %edi,%eax
  0xa76c866d: mov    0x30(%ebx),%edi
  0xa76c8670: mov    0x14(%eax),%esi
  0xa76c8673: mov    %esi,0x4(%esp)
  0xa76c8677: mov    0x18(%eax),%esi
  0xa76c867a: mov    %esi,0x8(%esp)
  0xa76c867e: mov    0x10(%eax),%ecx
  0xa76c8681: mov    0xc(%eax),%edx
  0xa76c8684: mov    0x8(%eax),%esi
  0xa76c8687: mov    %esi,0xc(%esp)
  0xa76c868b: mov    0x4(%eax),%esi
  0xa76c868e: mov    %esi,0x10(%esp)
  0xa76c8692: mov    %esp,%eax
  0xa76c8694: shr    $0xc,%eax
  0xa76c8697: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c869e: mov    %ebx,0x16c(%eax)
  0xa76c86a4: mov    %ebx,%eax
  0xa76c86a6: jmp    *%edi
  0xa76c86a8: mov    0x4(%ecx),%ebx
  0xa76c86ab: cmp    0x8(%eax),%ebx
  0xa76c86ae: mov    0x4(%eax),%ebx
  0xa76c86b1: jne    0xa76c86c4
  0xa76c86b7: cmpl   $0x0,0x34(%ebx)
  0xa76c86be: je     0xa76c8703
  0xa76c86c4: jmp    0xa7692560
  0xa76c86c9: cmpl   $0x0,0x34(%ebx)
  0xa76c86d0: je     0xa76c8703
  0xa76c86d6: mov    (%esp),%eax
  0xa76c86d9: pusha  
  0xa76c86da: pushf  
  0xa76c86db: sub    $0x10,%esp
  0xa76c86de: vmovsd %xmm0,(%esp)
  0xa76c86e3: vmovsd %xmm1,0x8(%esp)
  0xa76c86e9: push   %eax
  0xa76c86ea: push   %ebx
  0xa76c86eb: call   0xb71d62fc
  0xa76c86f0: add    $0x8,%esp
  0xa76c86f3: vmovsd (%esp),%xmm0
  0xa76c86f8: vmovsd 0x8(%esp),%xmm1
  0xa76c86fe: add    $0x10,%esp
  0xa76c8701: popf   
  0xa76c8702: popa   
  0xa76c8703: pop    %eax
  0xa76c8704: mov    %esp,%esi
  0xa76c8706: sub    $0x18,%esp
  0xa76c8709: mov    0x18(%esp),%edi
  0xa76c870d: mov    %edi,0x10(%esp)
  0xa76c8711: mov    0x1c(%esp),%edi
  0xa76c8715: mov    %edi,0x14(%esp)
  0xa76c8719: mov    %ecx,0xc(%esp)
  0xa76c871d: mov    %edx,0x8(%esp)
  0xa76c8721: mov    0x20(%esp),%edi
  0xa76c8725: mov    %edi,0x4(%esp)
  0xa76c8729: mov    0x24(%esp),%edi
  0xa76c872d: mov    %edi,(%esp)
  0xa76c8730: mov    0x28(%ebx),%ecx
  0xa76c8733: push   %eax
  0xa76c8734: jmp    *%ecx

AHE@0xb6690b98: 0xabeaaa00 i2c: 0xa76c87c0 c2i: 0xa76c8889 c2iUV: 0xa76c8868
i2c argument handler #52 for: receiver (JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I (310 bytes generated)
c2i argument handler starts at 0xa76c8889
  0xa76c87c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c87c3: mov    $0xa75b1ac0,%edi
  0xa76c87c8: cmp    %edi,%eax
  0xa76c87ca: jbe    0xa76c87dd
  0xa76c87d0: mov    $0xa7691ac0,%edi
  0xa76c87d5: cmp    %edi,%eax
  0xa76c87d7: jb     0xa76c8822
  0xa76c87dd: mov    $0xa75af400,%edi
  0xa76c87e2: cmp    %edi,%eax
  0xa76c87e4: jbe    0xa76c87f7
  0xa76c87ea: mov    $0xa75b1728,%edi
  0xa76c87ef: cmp    %edi,%eax
  0xa76c87f1: jb     0xa76c8822
  0xa76c87f7: mov    $0xa76b4e40,%edi
  0xa76c87fc: cmp    %edi,%eax
  0xa76c87fe: jbe    0xa76c8811
  0xa76c8804: mov    $0xa76ba430,%edi
  0xa76c8809: cmp    %edi,%eax
  0xa76c880b: jb     0xa76c8822
  ;; i2c adapter must return to an interpreter frame
  0xa76c8811: push   $0xb75a2830
  0xa76c8816: call   0xa76c881b
  0xa76c881b: pusha  
  0xa76c881c: call   0xb7052f32
  0xa76c8821: hlt    
  ;; } verify_i2ce 
  0xa76c8822: mov    %esp,%edi
  0xa76c8824: sub    $0x10,%esp
  0xa76c8827: and    $0xfffffff0,%esp
  0xa76c882a: push   %eax
  0xa76c882b: mov    %edi,%eax
  0xa76c882d: mov    0x30(%ebx),%edi
  0xa76c8830: mov    0x18(%eax),%ecx
  0xa76c8833: mov    0x10(%eax),%esi
  0xa76c8836: mov    %esi,0x4(%esp)
  0xa76c883a: mov    0x14(%eax),%esi
  0xa76c883d: mov    %esi,0x8(%esp)
  0xa76c8841: mov    0xc(%eax),%edx
  0xa76c8844: mov    0x8(%eax),%esi
  0xa76c8847: mov    %esi,0xc(%esp)
  0xa76c884b: mov    0x4(%eax),%esi
  0xa76c884e: mov    %esi,0x10(%esp)
  0xa76c8852: mov    %esp,%eax
  0xa76c8854: shr    $0xc,%eax
  0xa76c8857: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c885e: mov    %ebx,0x16c(%eax)
  0xa76c8864: mov    %ebx,%eax
  0xa76c8866: jmp    *%edi
  0xa76c8868: mov    0x4(%ecx),%ebx
  0xa76c886b: cmp    0x8(%eax),%ebx
  0xa76c886e: mov    0x4(%eax),%ebx
  0xa76c8871: jne    0xa76c8884
  0xa76c8877: cmpl   $0x0,0x34(%ebx)
  0xa76c887e: je     0xa76c88c3
  0xa76c8884: jmp    0xa7692560
  0xa76c8889: cmpl   $0x0,0x34(%ebx)
  0xa76c8890: je     0xa76c88c3
  0xa76c8896: mov    (%esp),%eax
  0xa76c8899: pusha  
  0xa76c889a: pushf  
  0xa76c889b: sub    $0x10,%esp
  0xa76c889e: vmovsd %xmm0,(%esp)
  0xa76c88a3: vmovsd %xmm1,0x8(%esp)
  0xa76c88a9: push   %eax
  0xa76c88aa: push   %ebx
  0xa76c88ab: call   0xb71d62fc
  0xa76c88b0: add    $0x8,%esp
  0xa76c88b3: vmovsd (%esp),%xmm0
  0xa76c88b8: vmovsd 0x8(%esp),%xmm1
  0xa76c88be: add    $0x10,%esp
  0xa76c88c1: popf   
  0xa76c88c2: popa   
  0xa76c88c3: pop    %eax
  0xa76c88c4: mov    %esp,%esi
  0xa76c88c6: sub    $0x18,%esp
  0xa76c88c9: mov    %ecx,0x14(%esp)
  0xa76c88cd: mov    0x18(%esp),%edi
  0xa76c88d1: mov    %edi,0xc(%esp)
  0xa76c88d5: mov    0x1c(%esp),%edi
  0xa76c88d9: mov    %edi,0x10(%esp)
  0xa76c88dd: mov    %edx,0x8(%esp)
  0xa76c88e1: mov    0x20(%esp),%edi
  0xa76c88e5: mov    %edi,0x4(%esp)
  0xa76c88e9: mov    0x24(%esp),%edi
  0xa76c88ed: mov    %edi,(%esp)
  0xa76c88f0: mov    0x28(%ebx),%ecx
  0xa76c88f3: push   %eax
  0xa76c88f4: jmp    *%ecx

AHE@0xb6690bbc: 0xabeabea0 i2c: 0xa76c8980 c2i: 0xa76c8a50 c2iUV: 0xa76c8a2f
i2c argument handler #53 for: receiver (JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J (325 bytes generated)
c2i argument handler starts at 0xa76c8a50
  0xa76c8980: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c8983: mov    $0xa75b1ac0,%edi
  0xa76c8988: cmp    %edi,%eax
  0xa76c898a: jbe    0xa76c899d
  0xa76c8990: mov    $0xa7691ac0,%edi
  0xa76c8995: cmp    %edi,%eax
  0xa76c8997: jb     0xa76c89e2
  0xa76c899d: mov    $0xa75af400,%edi
  0xa76c89a2: cmp    %edi,%eax
  0xa76c89a4: jbe    0xa76c89b7
  0xa76c89aa: mov    $0xa75b1728,%edi
  0xa76c89af: cmp    %edi,%eax
  0xa76c89b1: jb     0xa76c89e2
  0xa76c89b7: mov    $0xa76b4e40,%edi
  0xa76c89bc: cmp    %edi,%eax
  0xa76c89be: jbe    0xa76c89d1
  0xa76c89c4: mov    $0xa76ba430,%edi
  0xa76c89c9: cmp    %edi,%eax
  0xa76c89cb: jb     0xa76c89e2
  ;; i2c adapter must return to an interpreter frame
  0xa76c89d1: push   $0xb75a2830
  0xa76c89d6: call   0xa76c89db
  0xa76c89db: pusha  
  0xa76c89dc: call   0xb7052f32
  0xa76c89e1: hlt    
  ;; } verify_i2ce 
  0xa76c89e2: mov    %esp,%edi
  0xa76c89e4: sub    $0x18,%esp
  0xa76c89e7: and    $0xfffffff0,%esp
  0xa76c89ea: push   %eax
  0xa76c89eb: mov    %edi,%eax
  0xa76c89ed: mov    0x30(%ebx),%edi
  0xa76c89f0: mov    0x1c(%eax),%ecx
  0xa76c89f3: mov    0x14(%eax),%esi
  0xa76c89f6: mov    %esi,0x4(%esp)
  0xa76c89fa: mov    0x18(%eax),%esi
  0xa76c89fd: mov    %esi,0x8(%esp)
  0xa76c8a01: mov    0x10(%eax),%edx
  0xa76c8a04: mov    0x8(%eax),%esi
  0xa76c8a07: mov    %esi,0xc(%esp)
  0xa76c8a0b: mov    0xc(%eax),%esi
  0xa76c8a0e: mov    %esi,0x10(%esp)
  0xa76c8a12: mov    0x4(%eax),%esi
  0xa76c8a15: mov    %esi,0x14(%esp)
  0xa76c8a19: mov    %esp,%eax
  0xa76c8a1b: shr    $0xc,%eax
  0xa76c8a1e: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c8a25: mov    %ebx,0x16c(%eax)
  0xa76c8a2b: mov    %ebx,%eax
  0xa76c8a2d: jmp    *%edi
  0xa76c8a2f: mov    0x4(%ecx),%ebx
  0xa76c8a32: cmp    0x8(%eax),%ebx
  0xa76c8a35: mov    0x4(%eax),%ebx
  0xa76c8a38: jne    0xa76c8a4b
  0xa76c8a3e: cmpl   $0x0,0x34(%ebx)
  0xa76c8a45: je     0xa76c8a8a
  0xa76c8a4b: jmp    0xa7692560
  0xa76c8a50: cmpl   $0x0,0x34(%ebx)
  0xa76c8a57: je     0xa76c8a8a
  0xa76c8a5d: mov    (%esp),%eax
  0xa76c8a60: pusha  
  0xa76c8a61: pushf  
  0xa76c8a62: sub    $0x10,%esp
  0xa76c8a65: vmovsd %xmm0,(%esp)
  0xa76c8a6a: vmovsd %xmm1,0x8(%esp)
  0xa76c8a70: push   %eax
  0xa76c8a71: push   %ebx
  0xa76c8a72: call   0xb71d62fc
  0xa76c8a77: add    $0x8,%esp
  0xa76c8a7a: vmovsd (%esp),%xmm0
  0xa76c8a7f: vmovsd 0x8(%esp),%xmm1
  0xa76c8a85: add    $0x10,%esp
  0xa76c8a88: popf   
  0xa76c8a89: popa   
  0xa76c8a8a: pop    %eax
  0xa76c8a8b: mov    %esp,%esi
  0xa76c8a8d: sub    $0x1c,%esp
  0xa76c8a90: mov    %ecx,0x18(%esp)
  0xa76c8a94: mov    0x1c(%esp),%edi
  0xa76c8a98: mov    %edi,0x10(%esp)
  0xa76c8a9c: mov    0x20(%esp),%edi
  0xa76c8aa0: mov    %edi,0x14(%esp)
  0xa76c8aa4: mov    %edx,0xc(%esp)
  0xa76c8aa8: mov    0x24(%esp),%edi
  0xa76c8aac: mov    %edi,0x4(%esp)
  0xa76c8ab0: mov    0x28(%esp),%edi
  0xa76c8ab4: mov    %edi,0x8(%esp)
  0xa76c8ab8: mov    0x2c(%esp),%edi
  0xa76c8abc: mov    %edi,(%esp)
  0xa76c8abf: mov    0x28(%ebx),%ecx
  0xa76c8ac2: push   %eax
  0xa76c8ac3: jmp    *%ecx

AHE@0xb6690be0: 0xabea7ea0 i2c: 0xa76c8b80 c2i: 0xa76c8c47 c2iUV: 0xa76c8c26
i2c argument handler #54 for: receiver (JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D (306 bytes generated)
c2i argument handler starts at 0xa76c8c47
  0xa76c8b80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c8b83: mov    $0xa75b1ac0,%edi
  0xa76c8b88: cmp    %edi,%eax
  0xa76c8b8a: jbe    0xa76c8b9d
  0xa76c8b90: mov    $0xa7691ac0,%edi
  0xa76c8b95: cmp    %edi,%eax
  0xa76c8b97: jb     0xa76c8be2
  0xa76c8b9d: mov    $0xa75af400,%edi
  0xa76c8ba2: cmp    %edi,%eax
  0xa76c8ba4: jbe    0xa76c8bb7
  0xa76c8baa: mov    $0xa75b1728,%edi
  0xa76c8baf: cmp    %edi,%eax
  0xa76c8bb1: jb     0xa76c8be2
  0xa76c8bb7: mov    $0xa76b4e40,%edi
  0xa76c8bbc: cmp    %edi,%eax
  0xa76c8bbe: jbe    0xa76c8bd1
  0xa76c8bc4: mov    $0xa76ba430,%edi
  0xa76c8bc9: cmp    %edi,%eax
  0xa76c8bcb: jb     0xa76c8be2
  ;; i2c adapter must return to an interpreter frame
  0xa76c8bd1: push   $0xb75a2830
  0xa76c8bd6: call   0xa76c8bdb
  0xa76c8bdb: pusha  
  0xa76c8bdc: call   0xb7052f32
  0xa76c8be1: hlt    
  ;; } verify_i2ce 
  0xa76c8be2: mov    %esp,%edi
  0xa76c8be4: sub    $0x10,%esp
  0xa76c8be7: and    $0xfffffff0,%esp
  0xa76c8bea: push   %eax
  0xa76c8beb: mov    %edi,%eax
  0xa76c8bed: mov    0x30(%ebx),%edi
  0xa76c8bf0: mov    0x1c(%eax),%ecx
  0xa76c8bf3: mov    0x14(%eax),%esi
  0xa76c8bf6: mov    %esi,0x4(%esp)
  0xa76c8bfa: mov    0x18(%eax),%esi
  0xa76c8bfd: mov    %esi,0x8(%esp)
  0xa76c8c01: mov    0x10(%eax),%edx
  0xa76c8c04: vmovsd 0x8(%eax),%xmm0
  0xa76c8c09: mov    0x4(%eax),%esi
  0xa76c8c0c: mov    %esi,0xc(%esp)
  0xa76c8c10: mov    %esp,%eax
  0xa76c8c12: shr    $0xc,%eax
  0xa76c8c15: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c8c1c: mov    %ebx,0x16c(%eax)
  0xa76c8c22: mov    %ebx,%eax
  0xa76c8c24: jmp    *%edi
  0xa76c8c26: mov    0x4(%ecx),%ebx
  0xa76c8c29: cmp    0x8(%eax),%ebx
  0xa76c8c2c: mov    0x4(%eax),%ebx
  0xa76c8c2f: jne    0xa76c8c42
  0xa76c8c35: cmpl   $0x0,0x34(%ebx)
  0xa76c8c3c: je     0xa76c8c81
  0xa76c8c42: jmp    0xa7692560
  0xa76c8c47: cmpl   $0x0,0x34(%ebx)
  0xa76c8c4e: je     0xa76c8c81
  0xa76c8c54: mov    (%esp),%eax
  0xa76c8c57: pusha  
  0xa76c8c58: pushf  
  0xa76c8c59: sub    $0x10,%esp
  0xa76c8c5c: vmovsd %xmm0,(%esp)
  0xa76c8c61: vmovsd %xmm1,0x8(%esp)
  0xa76c8c67: push   %eax
  0xa76c8c68: push   %ebx
  0xa76c8c69: call   0xb71d62fc
  0xa76c8c6e: add    $0x8,%esp
  0xa76c8c71: vmovsd (%esp),%xmm0
  0xa76c8c76: vmovsd 0x8(%esp),%xmm1
  0xa76c8c7c: add    $0x10,%esp
  0xa76c8c7f: popf   
  0xa76c8c80: popa   
  0xa76c8c81: pop    %eax
  0xa76c8c82: mov    %esp,%esi
  0xa76c8c84: sub    $0x1c,%esp
  0xa76c8c87: mov    %ecx,0x18(%esp)
  0xa76c8c8b: mov    0x1c(%esp),%edi
  0xa76c8c8f: mov    %edi,0x10(%esp)
  0xa76c8c93: mov    0x20(%esp),%edi
  0xa76c8c97: mov    %edi,0x14(%esp)
  0xa76c8c9b: mov    %edx,0xc(%esp)
  0xa76c8c9f: vmovsd %xmm0,0x4(%esp)
  0xa76c8ca5: mov    0x24(%esp),%edi
  0xa76c8ca9: mov    %edi,(%esp)
  0xa76c8cac: mov    0x28(%ebx),%ecx
  0xa76c8caf: push   %eax
  0xa76c8cb0: jmp    *%ecx

AHE@0xb6690c04: 0xaaaaaaaaaa000000 i2c: 0xa76c8d40 c2i: 0xa76c8e25 c2iUV: 0xa76c8e04
i2c argument handler #55 for: receiver (Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V (370 bytes generated)
c2i argument handler starts at 0xa76c8e25
  0xa76c8d40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c8d43: mov    $0xa75b1ac0,%edi
  0xa76c8d48: cmp    %edi,%eax
  0xa76c8d4a: jbe    0xa76c8d5d
  0xa76c8d50: mov    $0xa7691ac0,%edi
  0xa76c8d55: cmp    %edi,%eax
  0xa76c8d57: jb     0xa76c8da2
  0xa76c8d5d: mov    $0xa75af400,%edi
  0xa76c8d62: cmp    %edi,%eax
  0xa76c8d64: jbe    0xa76c8d77
  0xa76c8d6a: mov    $0xa75b1728,%edi
  0xa76c8d6f: cmp    %edi,%eax
  0xa76c8d71: jb     0xa76c8da2
  0xa76c8d77: mov    $0xa76b4e40,%edi
  0xa76c8d7c: cmp    %edi,%eax
  0xa76c8d7e: jbe    0xa76c8d91
  0xa76c8d84: mov    $0xa76ba430,%edi
  0xa76c8d89: cmp    %edi,%eax
  0xa76c8d8b: jb     0xa76c8da2
  ;; i2c adapter must return to an interpreter frame
  0xa76c8d91: push   $0xb75a2830
  0xa76c8d96: call   0xa76c8d9b
  0xa76c8d9b: pusha  
  0xa76c8d9c: call   0xb7052f32
  0xa76c8da1: hlt    
  ;; } verify_i2ce 
  0xa76c8da2: mov    %esp,%edi
  0xa76c8da4: sub    $0x20,%esp
  0xa76c8da7: and    $0xfffffff0,%esp
  0xa76c8daa: push   %eax
  0xa76c8dab: mov    %edi,%eax
  0xa76c8dad: mov    0x30(%ebx),%edi
  0xa76c8db0: mov    0x28(%eax),%ecx
  0xa76c8db3: mov    0x24(%eax),%edx
  0xa76c8db6: mov    0x20(%eax),%esi
  0xa76c8db9: mov    %esi,0x4(%esp)
  0xa76c8dbd: mov    0x1c(%eax),%esi
  0xa76c8dc0: mov    %esi,0x8(%esp)
  0xa76c8dc4: mov    0x18(%eax),%esi
  0xa76c8dc7: mov    %esi,0xc(%esp)
  0xa76c8dcb: mov    0x14(%eax),%esi
  0xa76c8dce: mov    %esi,0x10(%esp)
  0xa76c8dd2: mov    0x10(%eax),%esi
  0xa76c8dd5: mov    %esi,0x14(%esp)
  0xa76c8dd9: mov    0xc(%eax),%esi
  0xa76c8ddc: mov    %esi,0x18(%esp)
  0xa76c8de0: mov    0x8(%eax),%esi
  0xa76c8de3: mov    %esi,0x1c(%esp)
  0xa76c8de7: mov    0x4(%eax),%esi
  0xa76c8dea: mov    %esi,0x20(%esp)
  0xa76c8dee: mov    %esp,%eax
  0xa76c8df0: shr    $0xc,%eax
  0xa76c8df3: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c8dfa: mov    %ebx,0x16c(%eax)
  0xa76c8e00: mov    %ebx,%eax
  0xa76c8e02: jmp    *%edi
  0xa76c8e04: mov    0x4(%ecx),%ebx
  0xa76c8e07: cmp    0x8(%eax),%ebx
  0xa76c8e0a: mov    0x4(%eax),%ebx
  0xa76c8e0d: jne    0xa76c8e20
  0xa76c8e13: cmpl   $0x0,0x34(%ebx)
  0xa76c8e1a: je     0xa76c8e5f
  0xa76c8e20: jmp    0xa7692560
  0xa76c8e25: cmpl   $0x0,0x34(%ebx)
  0xa76c8e2c: je     0xa76c8e5f
  0xa76c8e32: mov    (%esp),%eax
  0xa76c8e35: pusha  
  0xa76c8e36: pushf  
  0xa76c8e37: sub    $0x10,%esp
  0xa76c8e3a: vmovsd %xmm0,(%esp)
  0xa76c8e3f: vmovsd %xmm1,0x8(%esp)
  0xa76c8e45: push   %eax
  0xa76c8e46: push   %ebx
  0xa76c8e47: call   0xb71d62fc
  0xa76c8e4c: add    $0x8,%esp
  0xa76c8e4f: vmovsd (%esp),%xmm0
  0xa76c8e54: vmovsd 0x8(%esp),%xmm1
  0xa76c8e5a: add    $0x10,%esp
  0xa76c8e5d: popf   
  0xa76c8e5e: popa   
  0xa76c8e5f: pop    %eax
  0xa76c8e60: mov    %esp,%esi
  0xa76c8e62: sub    $0x28,%esp
  0xa76c8e65: mov    %ecx,0x24(%esp)
  0xa76c8e69: mov    %edx,0x20(%esp)
  0xa76c8e6d: mov    0x28(%esp),%edi
  0xa76c8e71: mov    %edi,0x1c(%esp)
  0xa76c8e75: mov    0x2c(%esp),%edi
  0xa76c8e79: mov    %edi,0x18(%esp)
  0xa76c8e7d: mov    0x30(%esp),%edi
  0xa76c8e81: mov    %edi,0x14(%esp)
  0xa76c8e85: mov    0x34(%esp),%edi
  0xa76c8e89: mov    %edi,0x10(%esp)
  0xa76c8e8d: mov    0x38(%esp),%edi
  0xa76c8e91: mov    %edi,0xc(%esp)
  0xa76c8e95: mov    0x3c(%esp),%edi
  0xa76c8e99: mov    %edi,0x8(%esp)
  0xa76c8e9d: mov    0x40(%esp),%edi
  0xa76c8ea1: mov    %edi,0x4(%esp)
  0xa76c8ea5: mov    0x44(%esp),%edi
  0xa76c8ea9: mov    %edi,(%esp)
  0xa76c8eac: mov    0x28(%ebx),%ecx
  0xa76c8eaf: push   %eax
  0xa76c8eb0: jmp    *%ecx

AHE@0xb6690c28: 0xabebea00 i2c: 0xa76c8f40 c2i: 0xa76c9009 c2iUV: 0xa76c8fe8
i2c argument handler #56 for: static (Ljava/lang/String;JJ[C)I (310 bytes generated)
c2i argument handler starts at 0xa76c9009
  0xa76c8f40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c8f43: mov    $0xa75b1ac0,%edi
  0xa76c8f48: cmp    %edi,%eax
  0xa76c8f4a: jbe    0xa76c8f5d
  0xa76c8f50: mov    $0xa7691ac0,%edi
  0xa76c8f55: cmp    %edi,%eax
  0xa76c8f57: jb     0xa76c8fa2
  0xa76c8f5d: mov    $0xa75af400,%edi
  0xa76c8f62: cmp    %edi,%eax
  0xa76c8f64: jbe    0xa76c8f77
  0xa76c8f6a: mov    $0xa75b1728,%edi
  0xa76c8f6f: cmp    %edi,%eax
  0xa76c8f71: jb     0xa76c8fa2
  0xa76c8f77: mov    $0xa76b4e40,%edi
  0xa76c8f7c: cmp    %edi,%eax
  0xa76c8f7e: jbe    0xa76c8f91
  0xa76c8f84: mov    $0xa76ba430,%edi
  0xa76c8f89: cmp    %edi,%eax
  0xa76c8f8b: jb     0xa76c8fa2
  ;; i2c adapter must return to an interpreter frame
  0xa76c8f91: push   $0xb75a2830
  0xa76c8f96: call   0xa76c8f9b
  0xa76c8f9b: pusha  
  0xa76c8f9c: call   0xb7052f32
  0xa76c8fa1: hlt    
  ;; } verify_i2ce 
  0xa76c8fa2: mov    %esp,%edi
  0xa76c8fa4: sub    $0x10,%esp
  0xa76c8fa7: and    $0xfffffff0,%esp
  0xa76c8faa: push   %eax
  0xa76c8fab: mov    %edi,%eax
  0xa76c8fad: mov    0x30(%ebx),%edi
  0xa76c8fb0: mov    0x18(%eax),%ecx
  0xa76c8fb3: mov    0x10(%eax),%esi
  0xa76c8fb6: mov    %esi,0x4(%esp)
  0xa76c8fba: mov    0x14(%eax),%esi
  0xa76c8fbd: mov    %esi,0x8(%esp)
  0xa76c8fc1: mov    0x8(%eax),%esi
  0xa76c8fc4: mov    %esi,0xc(%esp)
  0xa76c8fc8: mov    0xc(%eax),%esi
  0xa76c8fcb: mov    %esi,0x10(%esp)
  0xa76c8fcf: mov    0x4(%eax),%edx
  0xa76c8fd2: mov    %esp,%eax
  0xa76c8fd4: shr    $0xc,%eax
  0xa76c8fd7: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c8fde: mov    %ebx,0x16c(%eax)
  0xa76c8fe4: mov    %ebx,%eax
  0xa76c8fe6: jmp    *%edi
  0xa76c8fe8: mov    0x4(%ecx),%ebx
  0xa76c8feb: cmp    0x8(%eax),%ebx
  0xa76c8fee: mov    0x4(%eax),%ebx
  0xa76c8ff1: jne    0xa76c9004
  0xa76c8ff7: cmpl   $0x0,0x34(%ebx)
  0xa76c8ffe: je     0xa76c9043
  0xa76c9004: jmp    0xa7692560
  0xa76c9009: cmpl   $0x0,0x34(%ebx)
  0xa76c9010: je     0xa76c9043
  0xa76c9016: mov    (%esp),%eax
  0xa76c9019: pusha  
  0xa76c901a: pushf  
  0xa76c901b: sub    $0x10,%esp
  0xa76c901e: vmovsd %xmm0,(%esp)
  0xa76c9023: vmovsd %xmm1,0x8(%esp)
  0xa76c9029: push   %eax
  0xa76c902a: push   %ebx
  0xa76c902b: call   0xb71d62fc
  0xa76c9030: add    $0x8,%esp
  0xa76c9033: vmovsd (%esp),%xmm0
  0xa76c9038: vmovsd 0x8(%esp),%xmm1
  0xa76c903e: add    $0x10,%esp
  0xa76c9041: popf   
  0xa76c9042: popa   
  0xa76c9043: pop    %eax
  0xa76c9044: mov    %esp,%esi
  0xa76c9046: sub    $0x18,%esp
  0xa76c9049: mov    %ecx,0x14(%esp)
  0xa76c904d: mov    0x18(%esp),%edi
  0xa76c9051: mov    %edi,0xc(%esp)
  0xa76c9055: mov    0x1c(%esp),%edi
  0xa76c9059: mov    %edi,0x10(%esp)
  0xa76c905d: mov    0x20(%esp),%edi
  0xa76c9061: mov    %edi,0x4(%esp)
  0xa76c9065: mov    0x24(%esp),%edi
  0xa76c9069: mov    %edi,0x8(%esp)
  0xa76c906d: mov    %edx,(%esp)
  0xa76c9070: mov    0x28(%ebx),%ecx
  0xa76c9073: push   %eax
  0xa76c9074: jmp    *%ecx

Decoding ExceptionBlob 0xa76c93c8
  0xa76c9420: push   %edx
  0xa76c9421: sub    $0x8,%esp
  0xa76c9424: mov    %ebp,0x4(%esp)
  0xa76c9428: mov    %esp,%ecx
  0xa76c942a: shr    $0xc,%ecx
  0xa76c942d: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa76c9434: mov    %eax,0x1b4(%ecx)
  0xa76c943a: mov    %edx,0x1b8(%ecx)
  0xa76c9440: mov    %ecx,(%esp)
  0xa76c9443: mov    %esp,0x140(%ecx)
  0xa76c9449: call   0xb71c5790
  0xa76c944e: mov    %esp,%ecx
  0xa76c9450: shr    $0xc,%ecx
  0xa76c9453: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa76c945a: movl   $0x0,0x140(%ecx)
  0xa76c9464: movl   $0x0,0x144(%ecx)
  0xa76c946e: mov    0x4(%esp),%ebp
  0xa76c9472: add    $0x8,%esp
  0xa76c9475: pop    %edx
  0xa76c9476: push   %eax
  0xa76c9477: mov    0x1b4(%ecx),%eax
  0xa76c947d: mov    0x1b8(%ecx),%edx
  0xa76c9483: movl   $0x0,0x1bc(%ecx)
  0xa76c948d: movl   $0x0,0x1b8(%ecx)
  0xa76c9497: movl   $0x0,0x1b4(%ecx)
  0xa76c94a1: pop    %ecx
  0xa76c94a2: jmp    *%ecx

Decoding RuntimeStub - _new_instance_Java 0xa76c92c8
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76c9320: sub    $0x1c,%esp
  0xa76c9326: mov    %ebp,0x18(%esp)
  0xa76c932a: mov    %esp,%ebp
  0xa76c932c: shr    $0xc,%ebp
  0xa76c932f: mov    -0x486bdba0(,%ebp,4),%ebp
  0xa76c9336: mov    %esp,0x140(%ebp)
  0xa76c933c: mov    %ebp,0x8(%esp)
  0xa76c9340: mov    %ecx,(%esp)
  0xa76c9343: mov    %ebp,0x4(%esp)
  0xa76c9347: call   0xb71c19e6
  0xa76c934c: mov    0x8(%esp),%ecx
  0xa76c9350: movl   $0x0,0x140(%ecx)
  0xa76c935a: movl   $0x0,0x144(%ecx)
  0xa76c9364: mov    0x170(%ecx),%eax
  0xa76c936a: movl   $0x0,0x170(%ecx)
  0xa76c9374: mov    0x4(%ecx),%ecx
  0xa76c9377: test   %ecx,%ecx
  0xa76c9379: jne    0xa76c9380
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76c937b: add    $0x18,%esp
  0xa76c937e: pop    %ebp
  0xa76c937f: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76c9380: mov    $0xa75af400,%edi
  0xa76c9385: mov    $0x0,%ebx
  0xa76c938a: add    $0x18,%esp
  0xa76c938d: pop    %ebp
  0xa76c938e: jmp    *%edi

AHE@0xb6690c4c: 0xaaaaaaaaaaa00000 i2c: 0xa76c9100 c2i: 0xa76c91ec c2iUV: 0xa76c91cb
i2c argument handler #57 for: static (Ljava/lang/Integer;[Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object; (385 bytes generated)
c2i argument handler starts at 0xa76c91ec
  0xa76c9100: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa76c9103: mov    $0xa75b1ac0,%edi
  0xa76c9108: cmp    %edi,%eax
  0xa76c910a: jbe    0xa76c911d
  0xa76c9110: mov    $0xa7691ac0,%edi
  0xa76c9115: cmp    %edi,%eax
  0xa76c9117: jb     0xa76c9162
  0xa76c911d: mov    $0xa75af400,%edi
  0xa76c9122: cmp    %edi,%eax
  0xa76c9124: jbe    0xa76c9137
  0xa76c912a: mov    $0xa75b1728,%edi
  0xa76c912f: cmp    %edi,%eax
  0xa76c9131: jb     0xa76c9162
  0xa76c9137: mov    $0xa76b4e40,%edi
  0xa76c913c: cmp    %edi,%eax
  0xa76c913e: jbe    0xa76c9151
  0xa76c9144: mov    $0xa76ba430,%edi
  0xa76c9149: cmp    %edi,%eax
  0xa76c914b: jb     0xa76c9162
  ;; i2c adapter must return to an interpreter frame
  0xa76c9151: push   $0xb75a2830
  0xa76c9156: call   0xa76c915b
  0xa76c915b: pusha  
  0xa76c915c: call   0xb7052f32
  0xa76c9161: hlt    
  ;; } verify_i2ce 
  0xa76c9162: mov    %esp,%edi
  0xa76c9164: sub    $0x28,%esp
  0xa76c9167: and    $0xfffffff0,%esp
  0xa76c916a: push   %eax
  0xa76c916b: mov    %edi,%eax
  0xa76c916d: mov    0x30(%ebx),%edi
  0xa76c9170: mov    0x2c(%eax),%ecx
  0xa76c9173: mov    0x28(%eax),%edx
  0xa76c9176: mov    0x24(%eax),%esi
  0xa76c9179: mov    %esi,0x4(%esp)
  0xa76c917d: mov    0x20(%eax),%esi
  0xa76c9180: mov    %esi,0x8(%esp)
  0xa76c9184: mov    0x1c(%eax),%esi
  0xa76c9187: mov    %esi,0xc(%esp)
  0xa76c918b: mov    0x18(%eax),%esi
  0xa76c918e: mov    %esi,0x10(%esp)
  0xa76c9192: mov    0x14(%eax),%esi
  0xa76c9195: mov    %esi,0x14(%esp)
  0xa76c9199: mov    0x10(%eax),%esi
  0xa76c919c: mov    %esi,0x18(%esp)
  0xa76c91a0: mov    0xc(%eax),%esi
  0xa76c91a3: mov    %esi,0x1c(%esp)
  0xa76c91a7: mov    0x8(%eax),%esi
  0xa76c91aa: mov    %esi,0x20(%esp)
  0xa76c91ae: mov    0x4(%eax),%esi
  0xa76c91b1: mov    %esi,0x24(%esp)
  0xa76c91b5: mov    %esp,%eax
  0xa76c91b7: shr    $0xc,%eax
  0xa76c91ba: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c91c1: mov    %ebx,0x16c(%eax)
  0xa76c91c7: mov    %ebx,%eax
  0xa76c91c9: jmp    *%edi
  0xa76c91cb: mov    0x4(%ecx),%ebx
  0xa76c91ce: cmp    0x8(%eax),%ebx
  0xa76c91d1: mov    0x4(%eax),%ebx
  0xa76c91d4: jne    0xa76c91e7
  0xa76c91da: cmpl   $0x0,0x34(%ebx)
  0xa76c91e1: je     0xa76c9226
  0xa76c91e7: jmp    0xa7692560
  0xa76c91ec: cmpl   $0x0,0x34(%ebx)
  0xa76c91f3: je     0xa76c9226
  0xa76c91f9: mov    (%esp),%eax
  0xa76c91fc: pusha  
  0xa76c91fd: pushf  
  0xa76c91fe: sub    $0x10,%esp
  0xa76c9201: vmovsd %xmm0,(%esp)
  0xa76c9206: vmovsd %xmm1,0x8(%esp)
  0xa76c920c: push   %eax
  0xa76c920d: push   %ebx
  0xa76c920e: call   0xb71d62fc
  0xa76c9213: add    $0x8,%esp
  0xa76c9216: vmovsd (%esp),%xmm0
  0xa76c921b: vmovsd 0x8(%esp),%xmm1
  0xa76c9221: add    $0x10,%esp
  0xa76c9224: popf   
  0xa76c9225: popa   
  0xa76c9226: pop    %eax
  0xa76c9227: mov    %esp,%esi
  0xa76c9229: sub    $0x2c,%esp
  0xa76c922c: mov    %ecx,0x28(%esp)
  0xa76c9230: mov    %edx,0x24(%esp)
  0xa76c9234: mov    0x2c(%esp),%edi
  0xa76c9238: mov    %edi,0x20(%esp)
  0xa76c923c: mov    0x30(%esp),%edi
  0xa76c9240: mov    %edi,0x1c(%esp)
  0xa76c9244: mov    0x34(%esp),%edi
  0xa76c9248: mov    %edi,0x18(%esp)
  0xa76c924c: mov    0x38(%esp),%edi
  0xa76c9250: mov    %edi,0x14(%esp)
  0xa76c9254: mov    0x3c(%esp),%edi
  0xa76c9258: mov    %edi,0x10(%esp)
  0xa76c925c: mov    0x40(%esp),%edi
  0xa76c9260: mov    %edi,0xc(%esp)
  0xa76c9264: mov    0x44(%esp),%edi
  0xa76c9268: mov    %edi,0x8(%esp)
  0xa76c926c: mov    0x48(%esp),%edi
  0xa76c9270: mov    %edi,0x4(%esp)
  0xa76c9274: mov    0x4c(%esp),%edi
  0xa76c9278: mov    %edi,(%esp)
  0xa76c927b: mov    0x28(%ebx),%ecx
  0xa76c927e: push   %eax
  0xa76c927f: jmp    *%ecx

Decoding RuntimeStub - _new_array_Java 0xa76cc108
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76cc160: sub    $0x1c,%esp
  0xa76cc166: mov    %ebp,0x18(%esp)
  0xa76cc16a: mov    %esp,%ebx
  0xa76cc16c: shr    $0xc,%ebx
  0xa76cc16f: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76cc176: mov    %esp,0x140(%ebx)
  0xa76cc17c: mov    %ebx,0xc(%esp)
  0xa76cc180: mov    %ecx,(%esp)
  0xa76cc183: mov    %edx,0x4(%esp)
  0xa76cc187: mov    %ebx,0x8(%esp)
  0xa76cc18b: call   0xb71c1cfc
  0xa76cc190: mov    0xc(%esp),%ebx
  0xa76cc194: movl   $0x0,0x140(%ebx)
  0xa76cc19e: movl   $0x0,0x144(%ebx)
  0xa76cc1a8: mov    0x170(%ebx),%eax
  0xa76cc1ae: movl   $0x0,0x170(%ebx)
  0xa76cc1b8: mov    0x4(%ebx),%ebx
  0xa76cc1bb: test   %ebx,%ebx
  0xa76cc1bd: jne    0xa76cc1c4
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76cc1bf: add    $0x18,%esp
  0xa76cc1c2: pop    %ebp
  0xa76cc1c3: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76cc1c4: mov    $0xa75af400,%ecx
  0xa76cc1c9: mov    $0x0,%ebx
  0xa76cc1ce: add    $0x18,%esp
  0xa76cc1d1: pop    %ebp
  0xa76cc1d2: jmp    *%ecx

Decoding RuntimeStub - _new_array_nozero_Java 0xa76cc208
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76cc260: sub    $0x1c,%esp
  0xa76cc266: mov    %ebp,0x18(%esp)
  0xa76cc26a: mov    %esp,%ebx
  0xa76cc26c: shr    $0xc,%ebx
  0xa76cc26f: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76cc276: mov    %esp,0x140(%ebx)
  0xa76cc27c: mov    %ebx,0xc(%esp)
  0xa76cc280: mov    %ecx,(%esp)
  0xa76cc283: mov    %edx,0x4(%esp)
  0xa76cc287: mov    %ebx,0x8(%esp)
  0xa76cc28b: call   0xb71c1f94
  0xa76cc290: mov    0xc(%esp),%ebx
  0xa76cc294: movl   $0x0,0x140(%ebx)
  0xa76cc29e: movl   $0x0,0x144(%ebx)
  0xa76cc2a8: mov    0x170(%ebx),%eax
  0xa76cc2ae: movl   $0x0,0x170(%ebx)
  0xa76cc2b8: mov    0x4(%ebx),%ebx
  0xa76cc2bb: test   %ebx,%ebx
  0xa76cc2bd: jne    0xa76cc2c4
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76cc2bf: add    $0x18,%esp
  0xa76cc2c2: pop    %ebp
  0xa76cc2c3: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76cc2c4: mov    $0xa75af400,%ecx
  0xa76cc2c9: mov    $0x0,%ebx
  0xa76cc2ce: add    $0x18,%esp
  0xa76cc2d1: pop    %ebp
  0xa76cc2d2: jmp    *%ecx

Decoding RuntimeStub - dtrace_object_alloc Runtime1 stub 0xa76cbfc8
  0xa76cc020: push   %ebp
  0xa76cc021: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cc023: pusha  
  0xa76cc024: sub    $0xf0,%esp
  0xa76cc02a: movl   $0xfeedbeef,0xec(%esp)
  0xa76cc035: vmovsd %xmm0,(%esp)
  0xa76cc03a: vmovsd %xmm1,0x8(%esp)
  0xa76cc040: vmovsd %xmm2,0x10(%esp)
  0xa76cc046: vmovsd %xmm3,0x18(%esp)
  0xa76cc04c: vmovsd %xmm4,0x20(%esp)
  0xa76cc052: vmovsd %xmm5,0x28(%esp)
  0xa76cc058: vmovsd %xmm6,0x30(%esp)
  0xa76cc05e: vmovsd %xmm7,0x38(%esp)
  0xa76cc064: push   %eax
  0xa76cc065: call   0xb71d2732
  0xa76cc06a: pop    %eax
  ;; restore_live_registers
  0xa76cc06b: vmovsd (%esp),%xmm0
  0xa76cc070: vmovsd 0x8(%esp),%xmm1
  0xa76cc076: vmovsd 0x10(%esp),%xmm2
  0xa76cc07c: vmovsd 0x18(%esp),%xmm3
  0xa76cc082: vmovsd 0x20(%esp),%xmm4
  0xa76cc088: vmovsd 0x28(%esp),%xmm5
  0xa76cc08e: vmovsd 0x30(%esp),%xmm6
  0xa76cc094: vmovsd 0x38(%esp),%xmm7
  0xa76cc09a: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76cc0a5: je     0xa76cc0bc
  0xa76cc0ab: push   $0xb7391c83
  0xa76cc0b0: call   0xa76cc0b5
  0xa76cc0b5: pusha  
  0xa76cc0b6: call   0xb7052f32
  0xa76cc0bb: hlt    
  0xa76cc0bc: add    $0xf0,%esp
  0xa76cc0c2: popa   
  0xa76cc0c3: mov    %ebp,%esp
  0xa76cc0c5: pop    %ebp
  0xa76cc0c6: ret    
  0xa76cc0c7: nop

Decoding RuntimeStub - unwind_exception Runtime1 stub 0xa76cbe88
  0xa76cbf00: mov    $0xdead,%ebx
  0xa76cbf05: mov    $0xdead,%ecx
  0xa76cbf0a: mov    $0xdead,%edx
  0xa76cbf0f: mov    $0xdead,%esi
  0xa76cbf14: mov    $0xdead,%edi
  0xa76cbf19: mov    %esp,%edi
  0xa76cbf1b: shr    $0xc,%edi
  0xa76cbf1e: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cbf25: cmpl   $0x0,0x1b4(%edi)
  0xa76cbf2f: je     0xa76cbf46
  0xa76cbf35: push   $0xb7391d07
  0xa76cbf3a: call   0xa76cbf3f
  0xa76cbf3f: pusha  
  0xa76cbf40: call   0xb7052f32
  0xa76cbf45: hlt    
  0xa76cbf46: cmpl   $0x0,0x1b8(%edi)
  0xa76cbf50: je     0xa76cbf67
  0xa76cbf56: push   $0xb7391d23
  0xa76cbf5b: call   0xa76cbf60
  0xa76cbf60: pusha  
  0xa76cbf61: call   0xb7052f32
  0xa76cbf66: hlt    
  0xa76cbf67: emms   
  0xa76cbf69: mov    %eax,%esi
  0xa76cbf6b: mov    %esp,%edi
  0xa76cbf6d: shr    $0xc,%edi
  0xa76cbf70: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cbf77: mov    (%esp),%edx
  0xa76cbf7a: push   %edx
  0xa76cbf7b: push   %edi
  0xa76cbf7c: call   0xb71d0228
  0xa76cbf81: add    $0x8,%esp
  0xa76cbf84: mov    $0xdead,%ebx
  0xa76cbf89: mov    $0xdead,%ecx
  0xa76cbf8e: mov    $0xdead,%edx
  0xa76cbf93: mov    $0xdead,%edi
  0xa76cbf98: mov    %eax,%ebx
  0xa76cbf9a: mov    %esi,%eax
  0xa76cbf9c: pop    %edx
  0xa76cbf9d: jmp    *%ebx
  0xa76cbf9f: nop

Decoding RuntimeStub - forward_exception Runtime1 stub 0xa76cbc48
  ;; generate_handle_exception
  0xa76cbce0: mov    0x4(%edi),%eax
  0xa76cbce3: movl   $0x0,0x4(%edi)
  0xa76cbcea: mov    0x4(%ebp),%edx
  0xa76cbced: movl   $0x0,0x170(%edi)
  0xa76cbcf7: movl   $0x0,0x174(%edi)
  0xa76cbd01: mov    $0xdead,%ebx
  0xa76cbd06: mov    $0xdead,%ecx
  0xa76cbd0b: mov    $0xdead,%esi
  0xa76cbd10: mov    $0xdead,%edi
  0xa76cbd15: mov    %esp,%edi
  0xa76cbd17: shr    $0xc,%edi
  0xa76cbd1a: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cbd21: cmpl   $0x0,0x1b4(%edi)
  0xa76cbd2b: je     0xa76cbd42
  0xa76cbd31: push   $0xb7391cd4
  0xa76cbd36: call   0xa76cbd3b
  0xa76cbd3b: pusha  
  0xa76cbd3c: call   0xb7052f32
  0xa76cbd41: hlt    
  0xa76cbd42: cmpl   $0x0,0x1b8(%edi)
  0xa76cbd4c: je     0xa76cbd63
  0xa76cbd52: push   $0xb7391cee
  0xa76cbd57: call   0xa76cbd5c
  0xa76cbd5c: pusha  
  0xa76cbd5d: call   0xb7052f32
  0xa76cbd62: hlt    
  0xa76cbd63: mov    %eax,0x1b4(%edi)
  0xa76cbd69: mov    %edx,0x1b8(%edi)
  0xa76cbd6f: mov    %edx,0x4(%ebp)
  0xa76cbd72: mov    %esp,%edi
  0xa76cbd74: shr    $0xc,%edi
  0xa76cbd77: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cbd7e: push   %edi
  0xa76cbd7f: mov    %ebp,0x148(%edi)
  0xa76cbd85: mov    %esp,0x140(%edi)
  0xa76cbd8b: call   0xb6bb66be
  0xa76cbd90: push   %eax
  0xa76cbd91: mov    %esp,%eax
  0xa76cbd93: shr    $0xc,%eax
  0xa76cbd96: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cbd9d: cmp    %eax,%edi
  0xa76cbd9f: je     0xa76cbdbb
  0xa76cbda5: call   0xb711bdac
  0xa76cbdaa: push   $0xb7391b5c
  0xa76cbdaf: call   0xa76cbdb4
  0xa76cbdb4: pusha  
  0xa76cbdb5: call   0xb7052f32
  0xa76cbdba: hlt    
  0xa76cbdbb: pop    %eax
  0xa76cbdbc: movl   $0x0,0x140(%edi)
  0xa76cbdc6: movl   $0x0,0x148(%edi)
  0xa76cbdd0: movl   $0x0,0x144(%edi)
  0xa76cbdda: add    $0x4,%esp
  0xa76cbddd: cmpl   $0x0,0x4(%edi)
  0xa76cbde4: je     0xa76cbdfe
  0xa76cbdea: mov    0x4(%edi),%eax
  0xa76cbded: push   $0xb735fe8b
  0xa76cbdf2: call   0xa76cbdf7
  0xa76cbdf7: pusha  
  0xa76cbdf8: call   0xb7052f32
  0xa76cbdfd: hlt    
  0xa76cbdfe: mov    $0xdead,%ebx
  0xa76cbe03: mov    $0xdead,%ecx
  0xa76cbe08: mov    $0xdead,%edx
  0xa76cbe0d: mov    $0xdead,%esi
  0xa76cbe12: mov    $0xdead,%edi
  0xa76cbe17: mov    %eax,0x4(%ebp)
  ;; restore_live_registers
  0xa76cbe1a: vmovsd (%esp),%xmm0
  0xa76cbe1f: vmovsd 0x8(%esp),%xmm1
  0xa76cbe25: vmovsd 0x10(%esp),%xmm2
  0xa76cbe2b: vmovsd 0x18(%esp),%xmm3
  0xa76cbe31: vmovsd 0x20(%esp),%xmm4
  0xa76cbe37: vmovsd 0x28(%esp),%xmm5
  0xa76cbe3d: vmovsd 0x30(%esp),%xmm6
  0xa76cbe43: vmovsd 0x38(%esp),%xmm7
  0xa76cbe49: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76cbe54: je     0xa76cbe6b
  0xa76cbe5a: push   $0xb7391c83
  0xa76cbe5f: call   0xa76cbe64
  0xa76cbe64: pusha  
  0xa76cbe65: call   0xb7052f32
  0xa76cbe6a: hlt    
  0xa76cbe6b: add    $0xf0,%esp
  0xa76cbe71: popa   
  0xa76cbe72: mov    %ebp,%esp
  0xa76cbe74: pop    %ebp
  0xa76cbe75: ret    
  0xa76cbe76: nop
  0xa76cbe77: nop

Decoding RuntimeStub - throw_range_check_failed Runtime1 stub 0xa76cbac8
  0xa76cbb40: push   %ebp
  0xa76cbb41: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cbb43: pusha  
  0xa76cbb44: sub    $0xf0,%esp
  0xa76cbb4a: movl   $0xfeedbeef,0xec(%esp)
  0xa76cbb55: vmovsd %xmm0,(%esp)
  0xa76cbb5a: vmovsd %xmm1,0x8(%esp)
  0xa76cbb60: vmovsd %xmm2,0x10(%esp)
  0xa76cbb66: vmovsd %xmm3,0x18(%esp)
  0xa76cbb6c: vmovsd %xmm4,0x20(%esp)
  0xa76cbb72: vmovsd %xmm5,0x28(%esp)
  0xa76cbb78: vmovsd %xmm6,0x30(%esp)
  0xa76cbb7e: vmovsd %xmm7,0x38(%esp)
  0xa76cbb84: mov    $0xdead,%eax
  0xa76cbb89: mov    $0xdead,%ebx
  0xa76cbb8e: mov    $0xdead,%ecx
  0xa76cbb93: mov    $0xdead,%edx
  0xa76cbb98: mov    $0xdead,%esi
  0xa76cbb9d: mov    $0xdead,%edi
  0xa76cbba2: mov    0x8(%ebp),%ebx
  0xa76cbba5: push   %ebx
  0xa76cbba6: mov    %esp,%edi
  0xa76cbba8: shr    $0xc,%edi
  0xa76cbbab: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cbbb2: push   %edi
  0xa76cbbb3: mov    %ebp,0x148(%edi)
  0xa76cbbb9: mov    %esp,0x140(%edi)
  0xa76cbbbf: call   0xb6bb67bc
  0xa76cbbc4: push   %eax
  0xa76cbbc5: mov    %esp,%eax
  0xa76cbbc7: shr    $0xc,%eax
  0xa76cbbca: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cbbd1: cmp    %eax,%edi
  0xa76cbbd3: je     0xa76cbbef
  0xa76cbbd9: call   0xb711bdac
  0xa76cbbde: push   $0xb7391b5c
  0xa76cbbe3: call   0xa76cbbe8
  0xa76cbbe8: pusha  
  0xa76cbbe9: call   0xb7052f32
  0xa76cbbee: hlt    
  0xa76cbbef: pop    %eax
  0xa76cbbf0: movl   $0x0,0x140(%edi)
  0xa76cbbfa: movl   $0x0,0x148(%edi)
  0xa76cbc04: movl   $0x0,0x144(%edi)
  0xa76cbc0e: add    $0x8,%esp
  0xa76cbc11: cmpl   $0x0,0x4(%edi)
  0xa76cbc18: je     0xa76cbc26
  0xa76cbc1e: mov    0x4(%edi),%eax
  0xa76cbc21: jmp    0xa76cbce0
  0xa76cbc26: push   $0xb73919c8
  0xa76cbc2b: call   0xa76cbc30
  0xa76cbc30: pusha  
  0xa76cbc31: call   0xb7052f32
  0xa76cbc36: hlt    
  0xa76cbc37: mov    %ebp,%esp
  0xa76cbc39: pop    %ebp
  0xa76cbc3a: ret    
  0xa76cbc3b: nop

Decoding RuntimeStub - throw_index_exception Runtime1 stub 0xa76cb948
  0xa76cb9c0: push   %ebp
  0xa76cb9c1: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cb9c3: pusha  
  0xa76cb9c4: sub    $0xf0,%esp
  0xa76cb9ca: movl   $0xfeedbeef,0xec(%esp)
  0xa76cb9d5: vmovsd %xmm0,(%esp)
  0xa76cb9da: vmovsd %xmm1,0x8(%esp)
  0xa76cb9e0: vmovsd %xmm2,0x10(%esp)
  0xa76cb9e6: vmovsd %xmm3,0x18(%esp)
  0xa76cb9ec: vmovsd %xmm4,0x20(%esp)
  0xa76cb9f2: vmovsd %xmm5,0x28(%esp)
  0xa76cb9f8: vmovsd %xmm6,0x30(%esp)
  0xa76cb9fe: vmovsd %xmm7,0x38(%esp)
  0xa76cba04: mov    $0xdead,%eax
  0xa76cba09: mov    $0xdead,%ebx
  0xa76cba0e: mov    $0xdead,%ecx
  0xa76cba13: mov    $0xdead,%edx
  0xa76cba18: mov    $0xdead,%esi
  0xa76cba1d: mov    $0xdead,%edi
  0xa76cba22: mov    0x8(%ebp),%ebx
  0xa76cba25: push   %ebx
  0xa76cba26: mov    %esp,%edi
  0xa76cba28: shr    $0xc,%edi
  0xa76cba2b: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cba32: push   %edi
  0xa76cba33: mov    %ebp,0x148(%edi)
  0xa76cba39: mov    %esp,0x140(%edi)
  0xa76cba3f: call   0xb6bb697c
  0xa76cba44: push   %eax
  0xa76cba45: mov    %esp,%eax
  0xa76cba47: shr    $0xc,%eax
  0xa76cba4a: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cba51: cmp    %eax,%edi
  0xa76cba53: je     0xa76cba6f
  0xa76cba59: call   0xb711bdac
  0xa76cba5e: push   $0xb7391b5c
  0xa76cba63: call   0xa76cba68
  0xa76cba68: pusha  
  0xa76cba69: call   0xb7052f32
  0xa76cba6e: hlt    
  0xa76cba6f: pop    %eax
  0xa76cba70: movl   $0x0,0x140(%edi)
  0xa76cba7a: movl   $0x0,0x148(%edi)
  0xa76cba84: movl   $0x0,0x144(%edi)
  0xa76cba8e: add    $0x8,%esp
  0xa76cba91: cmpl   $0x0,0x4(%edi)
  0xa76cba98: je     0xa76cbaa6
  0xa76cba9e: mov    0x4(%edi),%eax
  0xa76cbaa1: jmp    0xa76cbce0
  0xa76cbaa6: push   $0xb73919c8
  0xa76cbaab: call   0xa76cbab0
  0xa76cbab0: pusha  
  0xa76cbab1: call   0xb7052f32
  0xa76cbab6: hlt    
  0xa76cbab7: mov    %ebp,%esp
  0xa76cbab9: pop    %ebp
  0xa76cbaba: ret    
  0xa76cbabb: nop

Decoding RuntimeStub - throw_div0_exception Runtime1 stub 0xa76ca308
  0xa76ca380: push   %ebp
  0xa76ca381: mov    %esp,%ebp
  ;; save_live_registers
  0xa76ca383: pusha  
  0xa76ca384: sub    $0xf0,%esp
  0xa76ca38a: movl   $0xfeedbeef,0xec(%esp)
  0xa76ca395: vmovsd %xmm0,(%esp)
  0xa76ca39a: vmovsd %xmm1,0x8(%esp)
  0xa76ca3a0: vmovsd %xmm2,0x10(%esp)
  0xa76ca3a6: vmovsd %xmm3,0x18(%esp)
  0xa76ca3ac: vmovsd %xmm4,0x20(%esp)
  0xa76ca3b2: vmovsd %xmm5,0x28(%esp)
  0xa76ca3b8: vmovsd %xmm6,0x30(%esp)
  0xa76ca3be: vmovsd %xmm7,0x38(%esp)
  0xa76ca3c4: mov    $0xdead,%eax
  0xa76ca3c9: mov    $0xdead,%ebx
  0xa76ca3ce: mov    $0xdead,%ecx
  0xa76ca3d3: mov    $0xdead,%edx
  0xa76ca3d8: mov    $0xdead,%esi
  0xa76ca3dd: mov    $0xdead,%edi
  0xa76ca3e2: mov    %esp,%edi
  0xa76ca3e4: shr    $0xc,%edi
  0xa76ca3e7: mov    -0x486bdba0(,%edi,4),%edi
  0xa76ca3ee: push   %edi
  0xa76ca3ef: mov    %ebp,0x148(%edi)
  0xa76ca3f5: mov    %esp,0x140(%edi)
  0xa76ca3fb: call   0xb6bb6b3c
  0xa76ca400: push   %eax
  0xa76ca401: mov    %esp,%eax
  0xa76ca403: shr    $0xc,%eax
  0xa76ca406: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ca40d: cmp    %eax,%edi
  0xa76ca40f: je     0xa76ca42b
  0xa76ca415: call   0xb711bdac
  0xa76ca41a: push   $0xb7391b5c
  0xa76ca41f: call   0xa76ca424
  0xa76ca424: pusha  
  0xa76ca425: call   0xb7052f32
  0xa76ca42a: hlt    
  0xa76ca42b: pop    %eax
  0xa76ca42c: movl   $0x0,0x140(%edi)
  0xa76ca436: movl   $0x0,0x148(%edi)
  0xa76ca440: movl   $0x0,0x144(%edi)
  0xa76ca44a: add    $0x4,%esp
  0xa76ca44d: cmpl   $0x0,0x4(%edi)
  0xa76ca454: je     0xa76ca462
  0xa76ca45a: mov    0x4(%edi),%eax
  0xa76ca45d: jmp    0xa76cbce0
  0xa76ca462: push   $0xb73919c8
  0xa76ca467: call   0xa76ca46c
  0xa76ca46c: pusha  
  0xa76ca46d: call   0xb7052f32
  0xa76ca472: hlt    
  0xa76ca473: mov    %ebp,%esp
  0xa76ca475: pop    %ebp
  0xa76ca476: ret    
  0xa76ca477: nop

Decoding RuntimeStub - throw_null_pointer_exception Runtime1 stub 0xa76ca088
  0xa76ca100: push   %ebp
  0xa76ca101: mov    %esp,%ebp
  ;; save_live_registers
  0xa76ca103: pusha  
  0xa76ca104: sub    $0xf0,%esp
  0xa76ca10a: movl   $0xfeedbeef,0xec(%esp)
  0xa76ca115: vmovsd %xmm0,(%esp)
  0xa76ca11a: vmovsd %xmm1,0x8(%esp)
  0xa76ca120: vmovsd %xmm2,0x10(%esp)
  0xa76ca126: vmovsd %xmm3,0x18(%esp)
  0xa76ca12c: vmovsd %xmm4,0x20(%esp)
  0xa76ca132: vmovsd %xmm5,0x28(%esp)
  0xa76ca138: vmovsd %xmm6,0x30(%esp)
  0xa76ca13e: vmovsd %xmm7,0x38(%esp)
  0xa76ca144: mov    $0xdead,%eax
  0xa76ca149: mov    $0xdead,%ebx
  0xa76ca14e: mov    $0xdead,%ecx
  0xa76ca153: mov    $0xdead,%edx
  0xa76ca158: mov    $0xdead,%esi
  0xa76ca15d: mov    $0xdead,%edi
  0xa76ca162: mov    %esp,%edi
  0xa76ca164: shr    $0xc,%edi
  0xa76ca167: mov    -0x486bdba0(,%edi,4),%edi
  0xa76ca16e: push   %edi
  0xa76ca16f: mov    %ebp,0x148(%edi)
  0xa76ca175: mov    %esp,0x140(%edi)
  0xa76ca17b: call   0xb6bb6cc4
  0xa76ca180: push   %eax
  0xa76ca181: mov    %esp,%eax
  0xa76ca183: shr    $0xc,%eax
  0xa76ca186: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ca18d: cmp    %eax,%edi
  0xa76ca18f: je     0xa76ca1ab
  0xa76ca195: call   0xb711bdac
  0xa76ca19a: push   $0xb7391b5c
  0xa76ca19f: call   0xa76ca1a4
  0xa76ca1a4: pusha  
  0xa76ca1a5: call   0xb7052f32
  0xa76ca1aa: hlt    
  0xa76ca1ab: pop    %eax
  0xa76ca1ac: movl   $0x0,0x140(%edi)
  0xa76ca1b6: movl   $0x0,0x148(%edi)
  0xa76ca1c0: movl   $0x0,0x144(%edi)
  0xa76ca1ca: add    $0x4,%esp
  0xa76ca1cd: cmpl   $0x0,0x4(%edi)
  0xa76ca1d4: je     0xa76ca1e2
  0xa76ca1da: mov    0x4(%edi),%eax
  0xa76ca1dd: jmp    0xa76cbce0
  0xa76ca1e2: push   $0xb73919c8
  0xa76ca1e7: call   0xa76ca1ec
  0xa76ca1ec: pusha  
  0xa76ca1ed: call   0xb7052f32
  0xa76ca1f2: hlt    
  0xa76ca1f3: mov    %ebp,%esp
  0xa76ca1f5: pop    %ebp
  0xa76ca1f6: ret    
  0xa76ca1f7: nop

Decoding RuntimeStub - _multianewarray2_Java 0xa76ca208
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76ca260: sub    $0x2c,%esp
  0xa76ca266: mov    %ebp,0x28(%esp)
  0xa76ca26a: mov    %esp,%ebx
  0xa76ca26c: shr    $0xc,%ebx
  0xa76ca26f: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76ca276: mov    %esp,0x140(%ebx)
  0xa76ca27c: mov    %ebx,0x10(%esp)
  0xa76ca280: mov    %ecx,(%esp)
  0xa76ca283: mov    %edx,0x4(%esp)
  0xa76ca287: pushl  0x30(%esp)
  0xa76ca28b: popl   0x8(%esp)
  0xa76ca28f: mov    %ebx,0xc(%esp)
  0xa76ca293: call   0xb71c22da
  0xa76ca298: mov    0x10(%esp),%ebx
  0xa76ca29c: movl   $0x0,0x140(%ebx)
  0xa76ca2a6: movl   $0x0,0x144(%ebx)
  0xa76ca2b0: mov    0x170(%ebx),%eax
  0xa76ca2b6: movl   $0x0,0x170(%ebx)
  0xa76ca2c0: mov    0x4(%ebx),%ebx
  0xa76ca2c3: test   %ebx,%ebx
  0xa76ca2c5: jne    0xa76ca2cc
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76ca2c7: add    $0x28,%esp
  0xa76ca2ca: pop    %ebp
  0xa76ca2cb: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76ca2cc: mov    $0xa75af400,%ecx
  0xa76ca2d1: mov    $0x0,%ebx
  0xa76ca2d6: add    $0x28,%esp
  0xa76ca2d9: pop    %ebp
  0xa76ca2da: jmp    *%ecx

Decoding RuntimeStub - register_finalizer Runtime1 stub 0xa76c9ec8
  0xa76c9f40: mov    0x4(%esp),%eax
  0xa76c9f44: mov    0x4(%eax),%esi
  0xa76c9f47: mov    0x58(%esi),%esi
  0xa76c9f4a: test   $0x40000000,%esi
  0xa76c9f50: jne    0xa76c9f57
  0xa76c9f56: ret    
  0xa76c9f57: push   %ebp
  0xa76c9f58: mov    %esp,%ebp
  ;; save_live_registers
  0xa76c9f5a: pusha  
  0xa76c9f5b: sub    $0xf0,%esp
  0xa76c9f61: movl   $0xfeedbeef,0xec(%esp)
  0xa76c9f6c: vmovsd %xmm0,(%esp)
  0xa76c9f71: vmovsd %xmm1,0x8(%esp)
  0xa76c9f77: vmovsd %xmm2,0x10(%esp)
  0xa76c9f7d: vmovsd %xmm3,0x18(%esp)
  0xa76c9f83: vmovsd %xmm4,0x20(%esp)
  0xa76c9f89: vmovsd %xmm5,0x28(%esp)
  0xa76c9f8f: vmovsd %xmm6,0x30(%esp)
  0xa76c9f95: vmovsd %xmm7,0x38(%esp)
  0xa76c9f9b: push   %eax
  0xa76c9f9c: mov    %esp,%edi
  0xa76c9f9e: shr    $0xc,%edi
  0xa76c9fa1: mov    -0x486bdba0(,%edi,4),%edi
  0xa76c9fa8: push   %edi
  0xa76c9fa9: mov    %ebp,0x148(%edi)
  0xa76c9faf: mov    %esp,0x140(%edi)
  0xa76c9fb5: call   0xb71d2482
  0xa76c9fba: push   %eax
  0xa76c9fbb: mov    %esp,%eax
  0xa76c9fbd: shr    $0xc,%eax
  0xa76c9fc0: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c9fc7: cmp    %eax,%edi
  0xa76c9fc9: je     0xa76c9fe5
  0xa76c9fcf: call   0xb711bdac
  0xa76c9fd4: push   $0xb7391b5c
  0xa76c9fd9: call   0xa76c9fde
  0xa76c9fde: pusha  
  0xa76c9fdf: call   0xb7052f32
  0xa76c9fe4: hlt    
  0xa76c9fe5: pop    %eax
  0xa76c9fe6: movl   $0x0,0x140(%edi)
  0xa76c9ff0: movl   $0x0,0x148(%edi)
  0xa76c9ffa: movl   $0x0,0x144(%edi)
  0xa76ca004: add    $0x8,%esp
  0xa76ca007: cmpl   $0x0,0x4(%edi)
  0xa76ca00e: je     0xa76ca01c
  0xa76ca014: mov    0x4(%edi),%eax
  0xa76ca017: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa76ca01c: vmovsd (%esp),%xmm0
  0xa76ca021: vmovsd 0x8(%esp),%xmm1
  0xa76ca027: vmovsd 0x10(%esp),%xmm2
  0xa76ca02d: vmovsd 0x18(%esp),%xmm3
  0xa76ca033: vmovsd 0x20(%esp),%xmm4
  0xa76ca039: vmovsd 0x28(%esp),%xmm5
  0xa76ca03f: vmovsd 0x30(%esp),%xmm6
  0xa76ca045: vmovsd 0x38(%esp),%xmm7
  0xa76ca04b: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76ca056: je     0xa76ca06d
  0xa76ca05c: push   $0xb7391c83
  0xa76ca061: call   0xa76ca066
  0xa76ca066: pusha  
  0xa76ca067: call   0xb7052f32
  0xa76ca06c: hlt    
  0xa76ca06d: add    $0xf0,%esp
  0xa76ca073: popa   
  0xa76ca074: mov    %ebp,%esp
  0xa76ca076: pop    %ebp
  0xa76ca077: ret    

Decoding RuntimeStub - _multianewarray3_Java 0xa76c9dc8
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76c9e20: sub    $0x2c,%esp
  0xa76c9e26: mov    %ebp,0x28(%esp)
  0xa76c9e2a: mov    %esp,%ebx
  0xa76c9e2c: shr    $0xc,%ebx
  0xa76c9e2f: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76c9e36: mov    %esp,0x140(%ebx)
  0xa76c9e3c: mov    %ebx,0x14(%esp)
  0xa76c9e40: mov    %ecx,(%esp)
  0xa76c9e43: mov    %edx,0x4(%esp)
  0xa76c9e47: pushl  0x30(%esp)
  0xa76c9e4b: popl   0x8(%esp)
  0xa76c9e4f: pushl  0x34(%esp)
  0xa76c9e53: popl   0xc(%esp)
  0xa76c9e57: mov    %ebx,0x10(%esp)
  0xa76c9e5b: call   0xb71c255c
  0xa76c9e60: mov    0x14(%esp),%ebx
  0xa76c9e64: movl   $0x0,0x140(%ebx)
  0xa76c9e6e: movl   $0x0,0x144(%ebx)
  0xa76c9e78: mov    0x170(%ebx),%eax
  0xa76c9e7e: movl   $0x0,0x170(%ebx)
  0xa76c9e88: mov    0x4(%ebx),%ebx
  0xa76c9e8b: test   %ebx,%ebx
  0xa76c9e8d: jne    0xa76c9e94
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76c9e8f: add    $0x28,%esp
  0xa76c9e92: pop    %ebp
  0xa76c9e93: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76c9e94: mov    $0xa75af400,%ecx
  0xa76c9e99: mov    $0x0,%ebx
  0xa76c9e9e: add    $0x28,%esp
  0xa76c9ea1: pop    %ebp
  0xa76c9ea2: jmp    *%ecx

Decoding RuntimeStub - _multianewarray4_Java 0xa76c9ac8
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76c9b20: sub    $0x2c,%esp
  0xa76c9b26: mov    %ebp,0x28(%esp)
  0xa76c9b2a: mov    %esp,%ebx
  0xa76c9b2c: shr    $0xc,%ebx
  0xa76c9b2f: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76c9b36: mov    %esp,0x140(%ebx)
  0xa76c9b3c: mov    %ebx,0x18(%esp)
  0xa76c9b40: mov    %ecx,(%esp)
  0xa76c9b43: mov    %edx,0x4(%esp)
  0xa76c9b47: pushl  0x30(%esp)
  0xa76c9b4b: popl   0x8(%esp)
  0xa76c9b4f: pushl  0x34(%esp)
  0xa76c9b53: popl   0xc(%esp)
  0xa76c9b57: pushl  0x38(%esp)
  0xa76c9b5b: popl   0x10(%esp)
  0xa76c9b5f: mov    %ebx,0x14(%esp)
  0xa76c9b63: call   0xb71c27e4
  0xa76c9b68: mov    0x18(%esp),%ebx
  0xa76c9b6c: movl   $0x0,0x140(%ebx)
  0xa76c9b76: movl   $0x0,0x144(%ebx)
  0xa76c9b80: mov    0x170(%ebx),%eax
  0xa76c9b86: movl   $0x0,0x170(%ebx)
  0xa76c9b90: mov    0x4(%ebx),%ebx
  0xa76c9b93: test   %ebx,%ebx
  0xa76c9b95: jne    0xa76c9b9c
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76c9b97: add    $0x28,%esp
  0xa76c9b9a: pop    %ebp
  0xa76c9b9b: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76c9b9c: mov    $0xa75af400,%ecx
  0xa76c9ba1: mov    $0x0,%ebx
  0xa76c9ba6: add    $0x28,%esp
  0xa76c9ba9: pop    %ebp
  0xa76c9baa: jmp    *%ecx

Decoding RuntimeStub - new_instance Runtime1 stub 0xa76c9bc8
  0xa76c9c40: push   %ebp
  0xa76c9c41: mov    %esp,%ebp
  ;; save_live_registers
  0xa76c9c43: pusha  
  0xa76c9c44: sub    $0xf0,%esp
  0xa76c9c4a: movl   $0xfeedbeef,0xec(%esp)
  0xa76c9c55: vmovsd %xmm0,(%esp)
  0xa76c9c5a: vmovsd %xmm1,0x8(%esp)
  0xa76c9c60: vmovsd %xmm2,0x10(%esp)
  0xa76c9c66: vmovsd %xmm3,0x18(%esp)
  0xa76c9c6c: vmovsd %xmm4,0x20(%esp)
  0xa76c9c72: vmovsd %xmm5,0x28(%esp)
  0xa76c9c78: vmovsd %xmm6,0x30(%esp)
  0xa76c9c7e: vmovsd %xmm7,0x38(%esp)
  0xa76c9c84: push   %edx
  0xa76c9c85: mov    %esp,%edi
  0xa76c9c87: shr    $0xc,%edi
  0xa76c9c8a: mov    -0x486bdba0(,%edi,4),%edi
  0xa76c9c91: push   %edi
  0xa76c9c92: mov    %ebp,0x148(%edi)
  0xa76c9c98: mov    %esp,0x140(%edi)
  0xa76c9c9e: call   0xb6bb4c56
  0xa76c9ca3: push   %eax
  0xa76c9ca4: mov    %esp,%eax
  0xa76c9ca6: shr    $0xc,%eax
  0xa76c9ca9: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c9cb0: cmp    %eax,%edi
  0xa76c9cb2: je     0xa76c9cce
  0xa76c9cb8: call   0xb711bdac
  0xa76c9cbd: push   $0xb7391b5c
  0xa76c9cc2: call   0xa76c9cc7
  0xa76c9cc7: pusha  
  0xa76c9cc8: call   0xb7052f32
  0xa76c9ccd: hlt    
  0xa76c9cce: pop    %eax
  0xa76c9ccf: movl   $0x0,0x140(%edi)
  0xa76c9cd9: movl   $0x0,0x148(%edi)
  0xa76c9ce3: movl   $0x0,0x144(%edi)
  0xa76c9ced: add    $0x8,%esp
  0xa76c9cf0: cmpl   $0x0,0x4(%edi)
  0xa76c9cf7: je     0xa76c9d0f
  0xa76c9cfd: mov    0x4(%edi),%eax
  0xa76c9d00: movl   $0x0,0x170(%edi)
  0xa76c9d0a: jmp    0xa76cbce0
  0xa76c9d0f: mov    0x170(%edi),%eax
  0xa76c9d15: movl   $0x0,0x170(%edi)
  ;; restore_live_registers_except_rax
  0xa76c9d1f: vmovsd (%esp),%xmm0
  0xa76c9d24: vmovsd 0x8(%esp),%xmm1
  0xa76c9d2a: vmovsd 0x10(%esp),%xmm2
  0xa76c9d30: vmovsd 0x18(%esp),%xmm3
  0xa76c9d36: vmovsd 0x20(%esp),%xmm4
  0xa76c9d3c: vmovsd 0x28(%esp),%xmm5
  0xa76c9d42: vmovsd 0x30(%esp),%xmm6
  0xa76c9d48: vmovsd 0x38(%esp),%xmm7
  0xa76c9d4e: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76c9d59: je     0xa76c9d70
  0xa76c9d5f: push   $0xb7391c83
  0xa76c9d64: call   0xa76c9d69
  0xa76c9d69: pusha  
  0xa76c9d6a: call   0xb7052f32
  0xa76c9d6f: hlt    
  0xa76c9d70: add    $0xf0,%esp
  0xa76c9d76: pop    %edi
  0xa76c9d77: pop    %esi
  0xa76c9d78: pop    %ebp
  0xa76c9d79: pop    %ebx
  0xa76c9d7a: pop    %ebx
  0xa76c9d7b: pop    %edx
  0xa76c9d7c: pop    %ecx
  0xa76c9d7d: add    $0x4,%esp
  0xa76c9d80: mov    %ebp,%esp
  0xa76c9d82: pop    %ebp
  0xa76c9d83: ret    

Decoding RuntimeStub - _multianewarray5_Java 0xa76c99c8
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76c9a20: sub    $0x2c,%esp
  0xa76c9a26: mov    %ebp,0x28(%esp)
  0xa76c9a2a: mov    %esp,%ebx
  0xa76c9a2c: shr    $0xc,%ebx
  0xa76c9a2f: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76c9a36: mov    %esp,0x140(%ebx)
  0xa76c9a3c: mov    %ebx,0x1c(%esp)
  0xa76c9a40: mov    %ecx,(%esp)
  0xa76c9a43: mov    %edx,0x4(%esp)
  0xa76c9a47: pushl  0x30(%esp)
  0xa76c9a4b: popl   0x8(%esp)
  0xa76c9a4f: pushl  0x34(%esp)
  0xa76c9a53: popl   0xc(%esp)
  0xa76c9a57: pushl  0x38(%esp)
  0xa76c9a5b: popl   0x10(%esp)
  0xa76c9a5f: pushl  0x3c(%esp)
  0xa76c9a63: popl   0x14(%esp)
  0xa76c9a67: mov    %ebx,0x18(%esp)
  0xa76c9a6b: call   0xb71c2a72
  0xa76c9a70: mov    0x1c(%esp),%ebx
  0xa76c9a74: movl   $0x0,0x140(%ebx)
  0xa76c9a7e: movl   $0x0,0x144(%ebx)
  0xa76c9a88: mov    0x170(%ebx),%eax
  0xa76c9a8e: movl   $0x0,0x170(%ebx)
  0xa76c9a98: mov    0x4(%ebx),%ebx
  0xa76c9a9b: test   %ebx,%ebx
  0xa76c9a9d: jne    0xa76c9aa4
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76c9a9f: add    $0x28,%esp
  0xa76c9aa2: pop    %ebp
  0xa76c9aa3: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76c9aa4: mov    $0xa75af400,%ecx
  0xa76c9aa9: mov    $0x0,%ebx
  0xa76c9aae: add    $0x28,%esp
  0xa76c9ab1: pop    %ebp
  0xa76c9ab2: jmp    *%ecx

MethodHandle::interpreter_entry::_invokeGeneric [0xa7714180, 0xa7714181[ (1 bytes)
  0xa7714180: hlt    

MethodHandle::interpreter_entry::_invokeBasic [0xa7714181, 0xa7714202[ (129 bytes)
  0xa7714181: nop
  0xa7714182: nop
  0xa7714183: nop
  0xa7714184: nop
  0xa7714185: nop
  0xa7714186: nop
  0xa7714187: nop
  0xa7714188: nop
  0xa7714189: nop
  0xa771418a: nop
  0xa771418b: nop
  0xa771418c: nop
  0xa771418d: nop
  0xa771418e: nop
  0xa771418f: nop
  0xa7714190: nop
  0xa7714191: nop
  0xa7714192: nop
  0xa7714193: nop
  0xa7714194: nop
  0xa7714195: nop
  0xa7714196: nop
  0xa7714197: nop
  0xa7714198: nop
  0xa7714199: nop
  0xa771419a: nop
  0xa771419b: nop
  0xa771419c: nop
  0xa771419d: nop
  0xa771419e: nop
  0xa771419f: nop
  ;; verify_intrinsic_id {
  0xa77141a0: cmpb   $0xb7,0x1e(%ebx)
  0xa77141a4: je     0xa77141bb
  ;; bad Method*::intrinsic_id
  0xa77141aa: push   $0xb752e0e5
  0xa77141af: call   0xa77141b4
  0xa77141b4: pusha  
  0xa77141b5: call   0xb7052f32
  0xa77141ba: hlt    
  ;; } verify_intrinsic_id
  0xa77141bb: mov    0x8(%ebx),%edx
  0xa77141be: movzwl 0x24(%edx),%edx
  0xa77141c2: mov    (%esp,%edx,4),%ecx
  ;; jump_to_lambda_form {
  0xa77141c5: mov    0x10(%ecx),%ebx
  0xa77141c8: mov    0x24(%ebx),%ebx
  0xa77141cb: mov    0x10(%ebx),%ebx
  0xa77141ce: mov    0x8(%ebx),%edx
  0xa77141d1: movzwl 0x24(%edx),%edx
  0xa77141d5: cmp    (%esp,%edx,4),%ecx
  0xa77141d8: je     0xa77141f2
  0xa77141de: mov    (%esp,%edx,4),%eax
  ;; receiver not on stack
  0xa77141e1: push   $0xb752e08c
  0xa77141e6: call   0xa77141eb
  0xa77141eb: pusha  
  0xa77141ec: call   0xb7052f32
  0xa77141f1: hlt    
  ;; L:
  0xa77141f2: test   %ebx,%ebx
  0xa77141f4: je     0xa77141fd
  0xa77141fa: jmp    *0x38(%ebx)
Decoding RuntimeStub - fast_new_instance Runtime1 stub 0xa76c94c8
  0xa76c95c0: push   %edi
  0xa76c95c1: push   %ebx
  0xa76c95c2: mov    0x8(%edx),%ecx
  0xa76c95c5: cmp    $0x0,%ecx
  0xa76c95c8: jle    0xa76c95da
  0xa76c95ce: test   $0x1,%ecx
  0xa76c95d4: je     0xa76c95fc
  0xa76c95da: push   $0xb7391e40
  0xa76c95df: call   0xa76c95e4
  0xa76c95e4: pusha  
  0xa76c95e5: call   0xb7052f32
  0xa76c95ea: hlt    
  0xa76c95eb: push   $0xb735fe8b
  0xa76c95f0: call   0xa76c95f5
  0xa76c95f5: pusha  
  0xa76c95f6: call   0xb7052f32
  0xa76c95fb: hlt    
  0xa76c95fc: mov    %esp,%edi
  0xa76c95fe: shr    $0xc,%edi
  0xa76c9601: mov    -0x486bdba0(,%edi,4),%edi
  0xa76c9608: mov    0x44(%edi),%eax
  0xa76c960b: mov    0x4c(%edi),%ecx
  0xa76c960e: sub    %eax,%ecx
  0xa76c9610: shr    $0x2,%ecx
  0xa76c9613: cmp    0x54(%edi),%ecx
  0xa76c9616: jle    0xa76c962d
  0xa76c961c: mov    $0x4,%esi
  0xa76c9621: add    %esi,0x54(%edi)
  0xa76c9624: addl   $0x1,0x6c(%edi)
  0xa76c9628: jmp    0xa76c974e
  0xa76c962d: addl   $0x1,0x5c(%edi)
  0xa76c9631: add    %ecx,0x60(%edi)
  0xa76c9634: test   %eax,%eax
  0xa76c9636: je     0xa76c9669
  0xa76c963c: movl   $0x101,(%eax)
  0xa76c9642: sub    $0x3,%ecx
  0xa76c9645: add    $0x4,%ecx
  0xa76c9648: shl    $0x0,%ecx
  0xa76c964b: mov    %ecx,0x8(%eax)
  0xa76c964e: mov    0xb7d427cc,%ecx
  0xa76c9654: mov    %ecx,0x4(%eax)
  0xa76c9657: mov    %eax,%ecx
  0xa76c9659: sub    0x40(%edi),%ecx
  0xa76c965c: add    %ecx,0x88(%edi)
  0xa76c9662: adcl   $0x0,0x8c(%edi)
  0xa76c9669: mov    0x50(%edi),%ecx
  0xa76c966c: shl    $0x2,%ecx
  0xa76c966f: mov    0xb6613dd4,%eax
  0xa76c9675: lea    (%eax,%ecx,1),%esi
  0xa76c9678: cmp    %eax,%esi
  0xa76c967a: jb     0xa76c97d7
  0xa76c9680: cmp    0xb6613dc0,%esi
  0xa76c9686: ja     0xa76c97d7
  0xa76c968c: lock cmpxchg %esi,0xb6613dd4
  0xa76c9694: jne    0xa76c966f
  0xa76c9696: push   %esi
  0xa76c9697: mov    0x50(%edi),%esi
  0xa76c969a: shl    $0x2,%esi
  0xa76c969d: cmp    %esi,%ecx
  0xa76c969f: je     0xa76c96c7
  ;; assert(t1 != tlab size)
  0xa76c96a5: push   $0xb750a3b5
  0xa76c96aa: call   0xa76c96af
  0xa76c96af: pusha  
  0xa76c96b0: call   0xb7052f32
  0xa76c96b5: hlt    
  0xa76c96b6: push   $0xb735fe8b
  0xa76c96bb: call   0xa76c96c0
  0xa76c96c0: pusha  
  0xa76c96c1: call   0xb7052f32
  0xa76c96c6: hlt    
  0xa76c96c7: pop    %esi
  0xa76c96c8: mov    %eax,0x40(%edi)
  0xa76c96cb: mov    %eax,0x44(%edi)
  0xa76c96ce: add    %ecx,%eax
  0xa76c96d0: sub    $0x10,%eax
  0xa76c96d3: mov    %eax,0x4c(%edi)
  0xa76c96d6: jmp    0xa76c96db
  0xa76c96db: mov    0x8(%edx),%ecx
  0xa76c96de: mov    %esp,%ebx
  0xa76c96e0: shr    $0xc,%ebx
  0xa76c96e3: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76c96ea: mov    0x44(%ebx),%eax
  0xa76c96ed: lea    (%eax,%ecx,1),%esi
  0xa76c96f0: cmp    0x4c(%ebx),%esi
  0xa76c96f3: ja     0xa76c97d7
  0xa76c96f9: mov    %esi,0x44(%ebx)
  0xa76c96fc: mov    0x64(%edx),%ebx
  0xa76c96ff: mov    %ebx,(%eax)
  0xa76c9701: mov    %edx,0x4(%eax)
  0xa76c9704: mov    %ecx,%esi
  0xa76c9706: sub    $0x8,%esi
  0xa76c9709: je     0xa76c974b
  0xa76c970f: test   $0x3,%esi
  0xa76c9715: je     0xa76c972c
  0xa76c971b: push   $0xb738916c
  0xa76c9720: call   0xa76c9725
  0xa76c9725: pusha  
  0xa76c9726: call   0xb7052f32
  0xa76c972b: hlt    
  0xa76c972c: xor    %ebx,%ebx
  0xa76c972e: shr    $0x3,%esi
  0xa76c9731: jae    0xa76c9741
  0xa76c9737: mov    %ebx,0x8(%eax,%esi,8)
  0xa76c973b: je     0xa76c974b
  0xa76c9741: mov    %ebx,0x4(%eax,%esi,8)
  0xa76c9745: mov    %ebx,(%eax,%esi,8)
  0xa76c9748: dec    %esi
  0xa76c9749: jne    0xa76c9741
  0xa76c974b: pop    %ebx
  0xa76c974c: pop    %edi
  0xa76c974d: ret    
  0xa76c974e: mov    0x8(%edx),%ecx
  0xa76c9751: mov    0xb6613dd4,%eax
  0xa76c9757: lea    (%eax,%ecx,1),%ebx
  0xa76c975a: cmp    %eax,%ebx
  0xa76c975c: jb     0xa76c97d7
  0xa76c9762: cmp    0xb6613dc0,%ebx
  0xa76c9768: ja     0xa76c97d7
  0xa76c976e: lock cmpxchg %ebx,0xb6613dd4
  0xa76c9776: jne    0xa76c9751
  0xa76c9778: add    %ecx,0x88(%edi)
  0xa76c977e: adcl   $0x0,0x8c(%edi)
  0xa76c9785: mov    0x64(%edx),%ebx
  0xa76c9788: mov    %ebx,(%eax)
  0xa76c978a: mov    %edx,0x4(%eax)
  0xa76c978d: mov    %ecx,%esi
  0xa76c978f: sub    $0x8,%esi
  0xa76c9792: je     0xa76c97d4
  0xa76c9798: test   $0x3,%esi
  0xa76c979e: je     0xa76c97b5
  0xa76c97a4: push   $0xb738916c
  0xa76c97a9: call   0xa76c97ae
  0xa76c97ae: pusha  
  0xa76c97af: call   0xb7052f32
  0xa76c97b4: hlt    
  0xa76c97b5: xor    %ebx,%ebx
  0xa76c97b7: shr    $0x3,%esi
  0xa76c97ba: jae    0xa76c97ca
  0xa76c97c0: mov    %ebx,0x8(%eax,%esi,8)
  0xa76c97c4: je     0xa76c97d4
  0xa76c97ca: mov    %ebx,0x4(%eax,%esi,8)
  0xa76c97ce: mov    %ebx,(%eax,%esi,8)
  0xa76c97d1: dec    %esi
  0xa76c97d2: jne    0xa76c97ca
  0xa76c97d4: pop    %ebx
  0xa76c97d5: pop    %edi
  0xa76c97d6: ret    
  0xa76c97d7: pop    %ebx
  0xa76c97d8: pop    %edi
  0xa76c97d9: push   %ebp
  0xa76c97da: mov    %esp,%ebp
  ;; save_live_registers
  0xa76c97dc: pusha  
  0xa76c97dd: sub    $0xf0,%esp
  0xa76c97e3: movl   $0xfeedbeef,0xec(%esp)
  0xa76c97ee: vmovsd %xmm0,(%esp)
  0xa76c97f3: vmovsd %xmm1,0x8(%esp)
  0xa76c97f9: vmovsd %xmm2,0x10(%esp)
  0xa76c97ff: vmovsd %xmm3,0x18(%esp)
  0xa76c9805: vmovsd %xmm4,0x20(%esp)
  0xa76c980b: vmovsd %xmm5,0x28(%esp)
  0xa76c9811: vmovsd %xmm6,0x30(%esp)
  0xa76c9817: vmovsd %xmm7,0x38(%esp)
  0xa76c981d: push   %edx
  0xa76c981e: mov    %esp,%edi
  0xa76c9820: shr    $0xc,%edi
  0xa76c9823: mov    -0x486bdba0(,%edi,4),%edi
  0xa76c982a: push   %edi
  0xa76c982b: mov    %ebp,0x148(%edi)
  0xa76c9831: mov    %esp,0x140(%edi)
  0xa76c9837: call   0xb6bb4c56
  0xa76c983c: push   %eax
  0xa76c983d: mov    %esp,%eax
  0xa76c983f: shr    $0xc,%eax
  0xa76c9842: mov    -0x486bdba0(,%eax,4),%eax
  0xa76c9849: cmp    %eax,%edi
  0xa76c984b: je     0xa76c9867
  0xa76c9851: call   0xb711bdac
  0xa76c9856: push   $0xb7391b5c
  0xa76c985b: call   0xa76c9860
  0xa76c9860: pusha  
  0xa76c9861: call   0xb7052f32
  0xa76c9866: hlt    
  0xa76c9867: pop    %eax
  0xa76c9868: movl   $0x0,0x140(%edi)
  0xa76c9872: movl   $0x0,0x148(%edi)
  0xa76c987c: movl   $0x0,0x144(%edi)
  0xa76c9886: add    $0x8,%esp
  0xa76c9889: cmpl   $0x0,0x4(%edi)
  0xa76c9890: je     0xa76c98a8
  0xa76c9896: mov    0x4(%edi),%eax
  0xa76c9899: movl   $0x0,0x170(%edi)
  0xa76c98a3: jmp    0xa76cbce0
  0xa76c98a8: mov    0x170(%edi),%eax
  0xa76c98ae: movl   $0x0,0x170(%edi)
  ;; restore_live_registers_except_rax
  0xa76c98b8: vmovsd (%esp),%xmm0
  0xa76c98bd: vmovsd 0x8(%esp),%xmm1
  0xa76c98c3: vmovsd 0x10(%esp),%xmm2
  0xa76c98c9: vmovsd 0x18(%esp),%xmm3
  0xa76c98cf: vmovsd 0x20(%esp),%xmm4
  0xa76c98d5: vmovsd 0x28(%esp),%xmm5
  0xa76c98db: vmovsd 0x30(%esp),%xmm6
  0xa76c98e1: vmovsd 0x38(%esp),%xmm7
  0xa76c98e7: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76c98f2: je     0xa76c9909
  0xa76c98f8: push   $0xb7391c83
  0xa76c98fd: call   0xa76c9902
  0xa76c9902: pusha  
  0xa76c9903: call   0xb7052f32
  0xa76c9908: hlt    
  0xa76c9909: add    $0xf0,%esp
  0xa76c990f: pop    %edi
  0xa76c9910: pop    %esi
  0xa76c9911: pop    %ebp
  0xa76c9912: pop    %ebx
  0xa76c9913: pop    %ebx
  0xa76c9914: pop    %edx
  0xa76c9915: pop    %ecx
  0xa76c9916: add    $0x4,%esp
  0xa76c9919: mov    %ebp,%esp
  0xa76c991b: pop    %ebp
  0xa76c991c: ret    
  0xa76c991d: nop
  0xa76c991e: nop
  0xa76c991f: nop

Decoding RuntimeStub - _multianewarrayN_Java 0xa771e1c8
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa771e220: sub    $0x1c,%esp
  0xa771e226: mov    %ebp,0x18(%esp)
  0xa771e22a: mov    %esp,%ebx
  0xa771e22c: shr    $0xc,%ebx
  0xa771e22f: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa771e236: mov    %esp,0x140(%ebx)
  0xa771e23c: mov    %ebx,0xc(%esp)
  0xa771e240: mov    %ecx,(%esp)
  0xa771e243: mov    %edx,0x4(%esp)
  0xa771e247: mov    %ebx,0x8(%esp)
  0xa771e24b: call   0xb71c2d06
  0xa771e250: mov    0xc(%esp),%ebx
  0xa771e254: movl   $0x0,0x140(%ebx)
  0xa771e25e: movl   $0x0,0x144(%ebx)
  0xa771e268: mov    0x170(%ebx),%eax
  0xa771e26e: movl   $0x0,0x170(%ebx)
  0xa771e278: mov    0x4(%ebx),%ebx
  0xa771e27b: test   %ebx,%ebx
  0xa771e27d: jne    0xa771e284
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa771e27f: add    $0x18,%esp
  0xa771e282: pop    %ebp
  0xa771e283: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa771e284: mov    $0xa75af400,%ecx
  0xa771e289: mov    $0x0,%ebx
  0xa771e28e: add    $0x18,%esp
  0xa771e291: pop    %ebp
  0xa771e292: jmp    *%ecx

Decoding RuntimeStub - _g1_wb_pre_Java 0xa771e748
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa771e7a0: sub    $0x1c,%esp
  0xa771e7a6: mov    %ebp,0x18(%esp)
  0xa771e7aa: mov    %esp,%ebp
  0xa771e7ac: shr    $0xc,%ebp
  0xa771e7af: mov    -0x486bdba0(,%ebp,4),%ebp
  0xa771e7b6: mov    %esp,0x140(%ebp)
  0xa771e7bc: mov    %ebp,0xc(%esp)
  0xa771e7c0: mov    %ecx,(%esp)
  0xa771e7c3: mov    %edx,0x4(%esp)
  0xa771e7c7: mov    %ebp,0x8(%esp)
  0xa771e7cb: call   0xb71ce87e
  0xa771e7d0: mov    0xc(%esp),%ecx
  0xa771e7d4: movl   $0x0,0x140(%ecx)
  0xa771e7de: movl   $0x0,0x144(%ecx)
  0xa771e7e8: mov    0x4(%ecx),%ecx
  0xa771e7eb: test   %ecx,%ecx
  0xa771e7ed: jne    0xa771e7f4
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa771e7ef: add    $0x18,%esp
  0xa771e7f2: pop    %ebp
  0xa771e7f3: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa771e7f4: mov    $0xa75af400,%edi
  0xa771e7f9: mov    $0x0,%ebx
  0xa771e7fe: add    $0x18,%esp
  0xa771e801: pop    %ebp
  0xa771e802: jmp    *%edi

Decoding RuntimeStub - _g1_wb_post_Java 0xa771e848
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa771e8a0: sub    $0x1c,%esp
  0xa771e8a6: mov    %ebp,0x18(%esp)
  0xa771e8aa: mov    %esp,%ebp
  0xa771e8ac: shr    $0xc,%ebp
  0xa771e8af: mov    -0x486bdba0(,%ebp,4),%ebp
  0xa771e8b6: mov    %esp,0x140(%ebp)
  0xa771e8bc: mov    %ebp,0xc(%esp)
  0xa771e8c0: mov    %ecx,(%esp)
  0xa771e8c3: mov    %edx,0x4(%esp)
  0xa771e8c7: mov    %ebp,0x8(%esp)
  0xa771e8cb: call   0xb71cea5c
  0xa771e8d0: mov    0xc(%esp),%ecx
  0xa771e8d4: movl   $0x0,0x140(%ecx)
  0xa771e8de: movl   $0x0,0x144(%ecx)
  0xa771e8e8: mov    0x4(%ecx),%ecx
  0xa771e8eb: test   %ecx,%ecx
  0xa771e8ed: jne    0xa771e8f4
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa771e8ef: add    $0x18,%esp
  0xa771e8f2: pop    %ebp
  0xa771e8f3: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa771e8f4: mov    $0xa75af400,%edi
  0xa771e8f9: mov    $0x0,%ebx
  0xa771e8fe: add    $0x18,%esp
  0xa771e901: pop    %ebp
  0xa771e902: jmp    *%edi

Decoding RuntimeStub - _complete_monitor_locking_Java 0xa771e948
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa771e9a0: sub    $0x1c,%esp
  0xa771e9a6: mov    %ebp,0x18(%esp)
  0xa771e9aa: mov    %esp,%ebp
  0xa771e9ac: shr    $0xc,%ebp
  0xa771e9af: mov    -0x486bdba0(,%ebp,4),%ebp
  0xa771e9b6: mov    %esp,0x140(%ebp)
  0xa771e9bc: mov    %ebp,0xc(%esp)
  0xa771e9c0: mov    %ecx,(%esp)
  0xa771e9c3: mov    %edx,0x4(%esp)
  0xa771e9c7: mov    %ebp,0x8(%esp)
  0xa771e9cb: call   0xb71d6d70
  0xa771e9d0: mov    0xc(%esp),%ecx
  0xa771e9d4: movl   $0x0,0x140(%ecx)
  0xa771e9de: movl   $0x0,0x144(%ecx)
  0xa771e9e8: mov    0x4(%ecx),%ecx
  0xa771e9eb: test   %ecx,%ecx
  0xa771e9ed: jne    0xa771e9f4
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa771e9ef: add    $0x18,%esp
  0xa771e9f2: pop    %ebp
  0xa771e9f3: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa771e9f4: mov    $0xa75af400,%edi
  0xa771e9f9: mov    $0x0,%ebx
  0xa771e9fe: add    $0x18,%esp
  0xa771ea01: pop    %ebp
  0xa771ea02: jmp    *%edi

  0xa77141fd: jmp    0xa76ba6e0

MethodHandle::interpreter_entry::_linkToVirtual [0xa7714202, 0xa771436c[ (362 bytes)
Decoding RuntimeStub - fast_new_instance_init_check Runtime1 stub 0xa771e2c8
  0xa771e3c0: push   %edi
  0xa771e3c1: push   %ebx
  0xa771e3c2: cmpb   $0x4,0xda(%edx)
  0xa771e3c9: jne    0xa771e5e4
  0xa771e3cf: mov    0x8(%edx),%ecx
  0xa771e3d2: cmp    $0x0,%ecx
  0xa771e3d5: jle    0xa771e3e7
  0xa771e3db: test   $0x1,%ecx
  0xa771e3e1: je     0xa771e409
  0xa771e3e7: push   $0xb7391e40
  0xa771e3ec: call   0xa771e3f1
  0xa771e3f1: pusha  
  0xa771e3f2: call   0xb7052f32
  0xa771e3f7: hlt    
  0xa771e3f8: push   $0xb735fe8b
  0xa771e3fd: call   0xa771e402
  0xa771e402: pusha  
  0xa771e403: call   0xb7052f32
  0xa771e408: hlt    
  0xa771e409: mov    %esp,%edi
  0xa771e40b: shr    $0xc,%edi
  0xa771e40e: mov    -0x486bdba0(,%edi,4),%edi
  0xa771e415: mov    0x44(%edi),%eax
  0xa771e418: mov    0x4c(%edi),%ecx
  0xa771e41b: sub    %eax,%ecx
  0xa771e41d: shr    $0x2,%ecx
  0xa771e420: cmp    0x54(%edi),%ecx
  0xa771e423: jle    0xa771e43a
  0xa771e429: mov    $0x4,%esi
  0xa771e42e: add    %esi,0x54(%edi)
  0xa771e431: addl   $0x1,0x6c(%edi)
  0xa771e435: jmp    0xa771e55b
  0xa771e43a: addl   $0x1,0x5c(%edi)
  0xa771e43e: add    %ecx,0x60(%edi)
  0xa771e441: test   %eax,%eax
  0xa771e443: je     0xa771e476
  0xa771e449: movl   $0x101,(%eax)
  0xa771e44f: sub    $0x3,%ecx
  0xa771e452: add    $0x4,%ecx
  0xa771e455: shl    $0x0,%ecx
  0xa771e458: mov    %ecx,0x8(%eax)
  0xa771e45b: mov    0xb7d427cc,%ecx
  0xa771e461: mov    %ecx,0x4(%eax)
  0xa771e464: mov    %eax,%ecx
  0xa771e466: sub    0x40(%edi),%ecx
  0xa771e469: add    %ecx,0x88(%edi)
  0xa771e46f: adcl   $0x0,0x8c(%edi)
  0xa771e476: mov    0x50(%edi),%ecx
  0xa771e479: shl    $0x2,%ecx
  0xa771e47c: mov    0xb6613dd4,%eax
  0xa771e482: lea    (%eax,%ecx,1),%esi
  0xa771e485: cmp    %eax,%esi
  0xa771e487: jb     0xa771e5e4
  0xa771e48d: cmp    0xb6613dc0,%esi
  0xa771e493: ja     0xa771e5e4
  0xa771e499: lock cmpxchg %esi,0xb6613dd4
  0xa771e4a1: jne    0xa771e47c
  0xa771e4a3: push   %esi
  0xa771e4a4: mov    0x50(%edi),%esi
  0xa771e4a7: shl    $0x2,%esi
  0xa771e4aa: cmp    %esi,%ecx
  0xa771e4ac: je     0xa771e4d4
  ;; assert(t1 != tlab size)
  0xa771e4b2: push   $0xb750a3b5
  0xa771e4b7: call   0xa771e4bc
  0xa771e4bc: pusha  
  0xa771e4bd: call   0xb7052f32
  0xa771e4c2: hlt    
  0xa771e4c3: push   $0xb735fe8b
  0xa771e4c8: call   0xa771e4cd
  0xa771e4cd: pusha  
  0xa771e4ce: call   0xb7052f32
  0xa771e4d3: hlt    
  0xa771e4d4: pop    %esi
  0xa771e4d5: mov    %eax,0x40(%edi)
  0xa771e4d8: mov    %eax,0x44(%edi)
  0xa771e4db: add    %ecx,%eax
  0xa771e4dd: sub    $0x10,%eax
  0xa771e4e0: mov    %eax,0x4c(%edi)
  0xa771e4e3: jmp    0xa771e4e8
  0xa771e4e8: mov    0x8(%edx),%ecx
  0xa771e4eb: mov    %esp,%ebx
  0xa771e4ed: shr    $0xc,%ebx
  0xa771e4f0: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa771e4f7: mov    0x44(%ebx),%eax
  0xa771e4fa: lea    (%eax,%ecx,1),%esi
  0xa771e4fd: cmp    0x4c(%ebx),%esi
  0xa771e500: ja     0xa771e5e4
  0xa771e506: mov    %esi,0x44(%ebx)
  0xa771e509: mov    0x64(%edx),%ebx
  0xa771e50c: mov    %ebx,(%eax)
  0xa771e50e: mov    %edx,0x4(%eax)
  0xa771e511: mov    %ecx,%esi
  0xa771e513: sub    $0x8,%esi
  0xa771e516: je     0xa771e558
  0xa771e51c: test   $0x3,%esi
  0xa771e522: je     0xa771e539
  0xa771e528: push   $0xb738916c
  0xa771e52d: call   0xa771e532
  0xa771e532: pusha  
  0xa771e533: call   0xb7052f32
  0xa771e538: hlt    
  0xa771e539: xor    %ebx,%ebx
  0xa771e53b: shr    $0x3,%esi
  0xa771e53e: jae    0xa771e54e
  0xa771e544: mov    %ebx,0x8(%eax,%esi,8)
  0xa771e548: je     0xa771e558
  0xa771e54e: mov    %ebx,0x4(%eax,%esi,8)
  0xa771e552: mov    %ebx,(%eax,%esi,8)
  0xa771e555: dec    %esi
  0xa771e556: jne    0xa771e54e
  0xa771e558: pop    %ebx
  0xa771e559: pop    %edi
  0xa771e55a: ret    
  0xa771e55b: mov    0x8(%edx),%ecx
  0xa771e55e: mov    0xb6613dd4,%eax
  0xa771e564: lea    (%eax,%ecx,1),%ebx
  0xa771e567: cmp    %eax,%ebx
  0xa771e569: jb     0xa771e5e4
  0xa771e56f: cmp    0xb6613dc0,%ebx
  0xa771e575: ja     0xa771e5e4
  0xa771e57b: lock cmpxchg %ebx,0xb6613dd4
  0xa771e583: jne    0xa771e55e
  0xa771e585: add    %ecx,0x88(%edi)
  0xa771e58b: adcl   $0x0,0x8c(%edi)
  0xa771e592: mov    0x64(%edx),%ebx
  0xa771e595: mov    %ebx,(%eax)
  0xa771e597: mov    %edx,0x4(%eax)
  0xa771e59a: mov    %ecx,%esi
  0xa771e59c: sub    $0x8,%esi
  0xa771e59f: je     0xa771e5e1
  0xa771e5a5: test   $0x3,%esi
  0xa771e5ab: je     0xa771e5c2
  0xa771e5b1: push   $0xb738916c
  0xa771e5b6: call   0xa771e5bb
  0xa771e5bb: pusha  
  0xa771e5bc: call   0xb7052f32
  0xa771e5c1: hlt    
  0xa771e5c2: xor    %ebx,%ebx
  0xa771e5c4: shr    $0x3,%esi
  0xa771e5c7: jae    0xa771e5d7
  0xa771e5cd: mov    %ebx,0x8(%eax,%esi,8)
  0xa771e5d1: je     0xa771e5e1
  0xa771e5d7: mov    %ebx,0x4(%eax,%esi,8)
  0xa771e5db: mov    %ebx,(%eax,%esi,8)
  0xa771e5de: dec    %esi
  0xa771e5df: jne    0xa771e5d7
  0xa771e5e1: pop    %ebx
  0xa771e5e2: pop    %edi
  0xa771e5e3: ret    
  0xa771e5e4: pop    %ebx
  0xa771e5e5: pop    %edi
  0xa771e5e6: push   %ebp
  0xa771e5e7: mov    %esp,%ebp
  ;; save_live_registers
  0xa771e5e9: pusha  
  0xa771e5ea: sub    $0xf0,%esp
  0xa771e5f0: movl   $0xfeedbeef,0xec(%esp)
  0xa771e5fb: vmovsd %xmm0,(%esp)
  0xa771e600: vmovsd %xmm1,0x8(%esp)
  0xa771e606: vmovsd %xmm2,0x10(%esp)
  0xa771e60c: vmovsd %xmm3,0x18(%esp)
  0xa771e612: vmovsd %xmm4,0x20(%esp)
  0xa771e618: vmovsd %xmm5,0x28(%esp)
  0xa771e61e: vmovsd %xmm6,0x30(%esp)
  0xa771e624: vmovsd %xmm7,0x38(%esp)
  0xa771e62a: push   %edx
  0xa771e62b: mov    %esp,%edi
  0xa771e62d: shr    $0xc,%edi
  0xa771e630: mov    -0x486bdba0(,%edi,4),%edi
  0xa771e637: push   %edi
  0xa771e638: mov    %ebp,0x148(%edi)
  0xa771e63e: mov    %esp,0x140(%edi)
  0xa771e644: call   0xb6bb4c56
  0xa771e649: push   %eax
  0xa771e64a: mov    %esp,%eax
  0xa771e64c: shr    $0xc,%eax
  0xa771e64f: mov    -0x486bdba0(,%eax,4),%eax
  0xa771e656: cmp    %eax,%edi
  0xa771e658: je     0xa771e674
  0xa771e65e: call   0xb711bdac
  0xa771e663: push   $0xb7391b5c
  0xa771e668: call   0xa771e66d
  0xa771e66d: pusha  
  0xa771e66e: call   0xb7052f32
  0xa771e673: hlt    
  0xa771e674: pop    %eax
  0xa771e675: movl   $0x0,0x140(%edi)
  0xa771e67f: movl   $0x0,0x148(%edi)
  0xa771e689: movl   $0x0,0x144(%edi)
  0xa771e693: add    $0x8,%esp
  0xa771e696: cmpl   $0x0,0x4(%edi)
  0xa771e69d: je     0xa771e6b5
  0xa771e6a3: mov    0x4(%edi),%eax
  0xa771e6a6: movl   $0x0,0x170(%edi)
  0xa771e6b0: jmp    0xa76cbce0
  0xa771e6b5: mov    0x170(%edi),%eax
  0xa771e6bb: movl   $0x0,0x170(%edi)
  ;; restore_live_registers_except_rax
  0xa771e6c5: vmovsd (%esp),%xmm0
  0xa771e6ca: vmovsd 0x8(%esp),%xmm1
  0xa771e6d0: vmovsd 0x10(%esp),%xmm2
  0xa771e6d6: vmovsd 0x18(%esp),%xmm3
  0xa771e6dc: vmovsd 0x20(%esp),%xmm4
  0xa771e6e2: vmovsd 0x28(%esp),%xmm5
  0xa771e6e8: vmovsd 0x30(%esp),%xmm6
  0xa771e6ee: vmovsd 0x38(%esp),%xmm7
  0xa771e6f4: cmpl   $0xfeedbeef,0xec(%esp)
  0xa771e6ff: je     0xa771e716
  0xa771e705: push   $0xb7391c83
  0xa771e70a: call   0xa771e70f
  0xa771e70f: pusha  
  0xa771e710: call   0xb7052f32
  0xa771e715: hlt    
  0xa771e716: add    $0xf0,%esp
  0xa771e71c: pop    %edi
  0xa771e71d: pop    %esi
  0xa771e71e: pop    %ebp
  0xa771e71f: pop    %ebx
  0xa771e720: pop    %ebx
  0xa771e721: pop    %edx
  0xa771e722: pop    %ecx
  0xa771e723: add    $0x4,%esp
  0xa771e726: mov    %ebp,%esp
  0xa771e728: pop    %ebp
  0xa771e729: ret    
  0xa771e72a: nop
  0xa771e72b: nop

Decoding RuntimeStub - new_type_array Runtime1 stub 0xa771eb48
  0xa771ec40: mov    0x8(%edx),%eax
  0xa771ec43: sar    $0x1e,%eax
  0xa771ec46: cmp    $0xffffffff,%eax
  0xa771ec49: je     0xa771ec71
  0xa771ec4f: push   $0xb7391e8e
  0xa771ec54: call   0xa771ec59
  0xa771ec59: pusha  
  0xa771ec5a: call   0xb7052f32
  0xa771ec5f: hlt    
  0xa771ec60: push   $0xb735fe8b
  0xa771ec65: call   0xa771ec6a
  0xa771ec6a: pusha  
  0xa771ec6b: call   0xb7052f32
  0xa771ec70: hlt    
  0xa771ec71: cmp    $0xffffff,%ebx
  0xa771ec77: ja     0xa771ee9c
  0xa771ec7d: mov    %esp,%edi
  0xa771ec7f: shr    $0xc,%edi
  0xa771ec82: mov    -0x486bdba0(,%edi,4),%edi
  0xa771ec89: mov    0x44(%edi),%eax
  0xa771ec8c: mov    0x4c(%edi),%ecx
  0xa771ec8f: sub    %eax,%ecx
  0xa771ec91: shr    $0x2,%ecx
  0xa771ec94: cmp    0x54(%edi),%ecx
  0xa771ec97: jle    0xa771ecae
  0xa771ec9d: mov    $0x4,%esi
  0xa771eca2: add    %esi,0x54(%edi)
  0xa771eca5: addl   $0x1,0x6c(%edi)
  0xa771eca9: jmp    0xa771edf1
  0xa771ecae: addl   $0x1,0x5c(%edi)
  0xa771ecb2: add    %ecx,0x60(%edi)
  0xa771ecb5: test   %eax,%eax
  0xa771ecb7: je     0xa771ecea
  0xa771ecbd: movl   $0x101,(%eax)
  0xa771ecc3: sub    $0x3,%ecx
  0xa771ecc6: add    $0x4,%ecx
  0xa771ecc9: shl    $0x0,%ecx
  0xa771eccc: mov    %ecx,0x8(%eax)
  0xa771eccf: mov    0xb7d427cc,%ecx
  0xa771ecd5: mov    %ecx,0x4(%eax)
  0xa771ecd8: mov    %eax,%ecx
  0xa771ecda: sub    0x40(%edi),%ecx
  0xa771ecdd: add    %ecx,0x88(%edi)
  0xa771ece3: adcl   $0x0,0x8c(%edi)
  0xa771ecea: mov    0x50(%edi),%ecx
  0xa771eced: shl    $0x2,%ecx
  0xa771ecf0: mov    0xb6613dd4,%eax
  0xa771ecf6: lea    (%eax,%ecx,1),%esi
  0xa771ecf9: cmp    %eax,%esi
  0xa771ecfb: jb     0xa771ee9c
  0xa771ed01: cmp    0xb6613dc0,%esi
  0xa771ed07: ja     0xa771ee9c
  0xa771ed0d: lock cmpxchg %esi,0xb6613dd4
  0xa771ed15: jne    0xa771ecf0
  0xa771ed17: push   %esi
  0xa771ed18: mov    0x50(%edi),%esi
  0xa771ed1b: shl    $0x2,%esi
  0xa771ed1e: cmp    %esi,%ecx
  0xa771ed20: je     0xa771ed48
  ;; assert(t1 != tlab size)
  0xa771ed26: push   $0xb750a3b5
  0xa771ed2b: call   0xa771ed30
  0xa771ed30: pusha  
  0xa771ed31: call   0xb7052f32
  0xa771ed36: hlt    
  0xa771ed37: push   $0xb735fe8b
  0xa771ed3c: call   0xa771ed41
  0xa771ed41: pusha  
  0xa771ed42: call   0xb7052f32
  0xa771ed47: hlt    
  0xa771ed48: pop    %esi
  0xa771ed49: mov    %eax,0x40(%edi)
  0xa771ed4c: mov    %eax,0x44(%edi)
  0xa771ed4f: add    %ecx,%eax
  0xa771ed51: sub    $0x10,%eax
  0xa771ed54: mov    %eax,0x4c(%edi)
  0xa771ed57: jmp    0xa771ed5c
  0xa771ed5c: mov    0x8(%edx),%ecx
  0xa771ed5f: mov    %ebx,%esi
  0xa771ed61: shl    %cl,%esi
  0xa771ed63: shr    $0x10,%ecx
  0xa771ed66: and    $0xff,%ecx
  0xa771ed6c: add    %ecx,%esi
  0xa771ed6e: add    $0x7,%esi
  0xa771ed71: and    $0xfffffff8,%esi
  0xa771ed74: mov    %esp,%ecx
  0xa771ed76: shr    $0xc,%ecx
  0xa771ed79: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa771ed80: mov    0x44(%ecx),%eax
  0xa771ed83: lea    (%eax,%esi,1),%edi
  0xa771ed86: cmp    0x4c(%ecx),%edi
  0xa771ed89: ja     0xa771ee9c
  0xa771ed8f: mov    %edi,0x44(%ecx)
  0xa771ed92: movl   $0x1,(%eax)
  0xa771ed98: mov    %edx,0x4(%eax)
  0xa771ed9b: mov    %ebx,0x8(%eax)
  0xa771ed9e: mov    0xa(%edx),%cl
  0xa771eda1: and    $0xff,%ecx
  0xa771eda7: sub    %ecx,%esi
  0xa771eda9: add    %eax,%ecx
  0xa771edab: sub    $0x0,%esi
  0xa771edae: je     0xa771edf0
  0xa771edb4: test   $0x3,%esi
  0xa771edba: je     0xa771edd1
  0xa771edc0: push   $0xb738916c
  0xa771edc5: call   0xa771edca
  0xa771edca: pusha  
  0xa771edcb: call   0xb7052f32
  0xa771edd0: hlt    
  0xa771edd1: xor    %edi,%edi
  0xa771edd3: shr    $0x3,%esi
  0xa771edd6: jae    0xa771ede5
  0xa771eddc: mov    %edi,(%ecx,%esi,8)
  0xa771eddf: je     0xa771edf0
  0xa771ede5: mov    %edi,-0x4(%ecx,%esi,8)
  0xa771ede9: mov    %edi,-0x8(%ecx,%esi,8)
  0xa771eded: dec    %esi
  0xa771edee: jne    0xa771ede5
  0xa771edf0: ret    
  0xa771edf1: mov    0x8(%edx),%ecx
  0xa771edf4: mov    %ebx,%esi
  0xa771edf6: shl    %cl,%esi
  0xa771edf8: shr    $0x10,%ecx
  0xa771edfb: and    $0xff,%ecx
  0xa771ee01: add    %ecx,%esi
  0xa771ee03: add    $0x7,%esi
  0xa771ee06: and    $0xfffffff8,%esi
  0xa771ee09: mov    0xb6613dd4,%eax
  0xa771ee0f: lea    (%eax,%esi,1),%ecx
  0xa771ee12: cmp    %eax,%ecx
  0xa771ee14: jb     0xa771ee9c
  0xa771ee1a: cmp    0xb6613dc0,%ecx
  0xa771ee20: ja     0xa771ee9c
  0xa771ee26: lock cmpxchg %ecx,0xb6613dd4
  0xa771ee2e: jne    0xa771ee09
  0xa771ee30: add    %esi,0x88(%edi)
  0xa771ee36: adcl   $0x0,0x8c(%edi)
  0xa771ee3d: movl   $0x1,(%eax)
  0xa771ee43: mov    %edx,0x4(%eax)
  0xa771ee46: mov    %ebx,0x8(%eax)
  0xa771ee49: mov    0xa(%edx),%cl
  0xa771ee4c: and    $0xff,%ecx
  0xa771ee52: sub    %ecx,%esi
  0xa771ee54: add    %eax,%ecx
  0xa771ee56: sub    $0x0,%esi
  0xa771ee59: je     0xa771ee9b
  0xa771ee5f: test   $0x3,%esi
  0xa771ee65: je     0xa771ee7c
  0xa771ee6b: push   $0xb738916c
  0xa771ee70: call   0xa771ee75
  0xa771ee75: pusha  
  0xa771ee76: call   0xb7052f32
  0xa771ee7b: hlt    
  0xa771ee7c: xor    %edi,%edi
  0xa771ee7e: shr    $0x3,%esi
  0xa771ee81: jae    0xa771ee90
  0xa771ee87: mov    %edi,(%ecx,%esi,8)
  0xa771ee8a: je     0xa771ee9b
  0xa771ee90: mov    %edi,-0x4(%ecx,%esi,8)
  0xa771ee94: mov    %edi,-0x8(%ecx,%esi,8)
  0xa771ee98: dec    %esi
  0xa771ee99: jne    0xa771ee90
  0xa771ee9b: ret    
  0xa771ee9c: push   %ebp
  0xa771ee9d: mov    %esp,%ebp
  ;; save_live_registers
  0xa771ee9f: pusha  
  0xa771eea0: sub    $0xf0,%esp
  0xa771eea6: movl   $0xfeedbeef,0xec(%esp)
  0xa771eeb1: vmovsd %xmm0,(%esp)
  0xa771eeb6: vmovsd %xmm1,0x8(%esp)
  0xa771eebc: vmovsd %xmm2,0x10(%esp)
  0xa771eec2: vmovsd %xmm3,0x18(%esp)
  0xa771eec8: vmovsd %xmm4,0x20(%esp)
  0xa771eece: vmovsd %xmm5,0x28(%esp)
  0xa771eed4: vmovsd %xmm6,0x30(%esp)
  0xa771eeda: vmovsd %xmm7,0x38(%esp)
  0xa771eee0: push   %ebx
  0xa771eee1: push   %edx
  0xa771eee2: mov    %esp,%edi
  0xa771eee4: shr    $0xc,%edi
  0xa771eee7: mov    -0x486bdba0(,%edi,4),%edi
  0xa771eeee: push   %edi
  0xa771eeef: mov    %ebp,0x148(%edi)
  0xa771eef5: mov    %esp,0x140(%edi)
  0xa771eefb: call   0xb6bb4f34
  0xa771ef00: push   %eax
  0xa771ef01: mov    %esp,%eax
  0xa771ef03: shr    $0xc,%eax
  0xa771ef06: mov    -0x486bdba0(,%eax,4),%eax
  0xa771ef0d: cmp    %eax,%edi
  0xa771ef0f: je     0xa771ef2b
  0xa771ef15: call   0xb711bdac
  0xa771ef1a: push   $0xb7391b5c
  0xa771ef1f: call   0xa771ef24
  0xa771ef24: pusha  
  0xa771ef25: call   0xb7052f32
  0xa771ef2a: hlt    
  0xa771ef2b: pop    %eax
  0xa771ef2c: movl   $0x0,0x140(%edi)
  0xa771ef36: movl   $0x0,0x148(%edi)
  0xa771ef40: movl   $0x0,0x144(%edi)
  0xa771ef4a: add    $0xc,%esp
  0xa771ef4d: cmpl   $0x0,0x4(%edi)
  0xa771ef54: je     0xa771ef6c
  0xa771ef5a: mov    0x4(%edi),%eax
  0xa771ef5d: movl   $0x0,0x170(%edi)
  0xa771ef67: jmp    0xa76cbce0
  0xa771ef6c: mov    0x170(%edi),%eax
  0xa771ef72: movl   $0x0,0x170(%edi)
  ;; restore_live_registers_except_rax
  0xa771ef7c: vmovsd (%esp),%xmm0
  0xa771ef81: vmovsd 0x8(%esp),%xmm1
  0xa771ef87: vmovsd 0x10(%esp),%xmm2
  0xa771ef8d: vmovsd 0x18(%esp),%xmm3
  0xa771ef93: vmovsd 0x20(%esp),%xmm4
  0xa771ef99: vmovsd 0x28(%esp),%xmm5
  0xa771ef9f: vmovsd 0x30(%esp),%xmm6
  0xa771efa5: vmovsd 0x38(%esp),%xmm7
  0xa771efab: cmpl   $0xfeedbeef,0xec(%esp)
  0xa771efb6: je     0xa771efcd
  0xa771efbc: push   $0xb7391c83
  0xa771efc1: call   0xa771efc6
  0xa771efc6: pusha  
  0xa771efc7: call   0xb7052f32
  0xa771efcc: hlt    
  0xa771efcd: add    $0xf0,%esp
  0xa771efd3: pop    %edi
  0xa771efd4: pop    %esi
  0xa771efd5: pop    %ebp
  0xa771efd6: pop    %ebx
  0xa771efd7: pop    %ebx
  0xa771efd8: pop    %edx
  0xa771efd9: pop    %ecx
  0xa771efda: add    $0x4,%esp
  0xa771efdd: mov    %ebp,%esp
  0xa771efdf: pop    %ebp
  0xa771efe0: ret    
  0xa771efe1: nop
  0xa771efe2: nop
  0xa771efe3: nop

Decoding RuntimeStub - new_object_array Runtime1 stub 0xa771f008
  0xa771f100: mov    0x8(%edx),%eax
  0xa771f103: sar    $0x1e,%eax
  0xa771f106: cmp    $0xfffffffe,%eax
  0xa771f109: je     0xa771f131
  0xa771f10f: push   $0xb7391e8e
  0xa771f114: call   0xa771f119
  0xa771f119: pusha  
  0xa771f11a: call   0xb7052f32
  0xa771f11f: hlt    
  0xa771f120: push   $0xb735fe8b
  0xa771f125: call   0xa771f12a
  0xa771f12a: pusha  
  0xa771f12b: call   0xb7052f32
  0xa771f130: hlt    
  0xa771f131: cmp    $0xffffff,%ebx
  0xa771f137: ja     0xa771f35c
  0xa771f13d: mov    %esp,%edi
  0xa771f13f: shr    $0xc,%edi
  0xa771f142: mov    -0x486bdba0(,%edi,4),%edi
  0xa771f149: mov    0x44(%edi),%eax
  0xa771f14c: mov    0x4c(%edi),%ecx
  0xa771f14f: sub    %eax,%ecx
  0xa771f151: shr    $0x2,%ecx
  0xa771f154: cmp    0x54(%edi),%ecx
  0xa771f157: jle    0xa771f16e
  0xa771f15d: mov    $0x4,%esi
  0xa771f162: add    %esi,0x54(%edi)
  0xa771f165: addl   $0x1,0x6c(%edi)
  0xa771f169: jmp    0xa771f2b1
  0xa771f16e: addl   $0x1,0x5c(%edi)
  0xa771f172: add    %ecx,0x60(%edi)
  0xa771f175: test   %eax,%eax
  0xa771f177: je     0xa771f1aa
  0xa771f17d: movl   $0x101,(%eax)
  0xa771f183: sub    $0x3,%ecx
  0xa771f186: add    $0x4,%ecx
  0xa771f189: shl    $0x0,%ecx
  0xa771f18c: mov    %ecx,0x8(%eax)
  0xa771f18f: mov    0xb7d427cc,%ecx
  0xa771f195: mov    %ecx,0x4(%eax)
  0xa771f198: mov    %eax,%ecx
  0xa771f19a: sub    0x40(%edi),%ecx
  0xa771f19d: add    %ecx,0x88(%edi)
  0xa771f1a3: adcl   $0x0,0x8c(%edi)
  0xa771f1aa: mov    0x50(%edi),%ecx
  0xa771f1ad: shl    $0x2,%ecx
  0xa771f1b0: mov    0xb6613dd4,%eax
  0xa771f1b6: lea    (%eax,%ecx,1),%esi
  0xa771f1b9: cmp    %eax,%esi
  0xa771f1bb: jb     0xa771f35c
  0xa771f1c1: cmp    0xb6613dc0,%esi
  0xa771f1c7: ja     0xa771f35c
  0xa771f1cd: lock cmpxchg %esi,0xb6613dd4
  0xa771f1d5: jne    0xa771f1b0
  0xa771f1d7: push   %esi
  0xa771f1d8: mov    0x50(%edi),%esi
  0xa771f1db: shl    $0x2,%esi
  0xa771f1de: cmp    %esi,%ecx
  0xa771f1e0: je     0xa771f208
  ;; assert(t1 != tlab size)
  0xa771f1e6: push   $0xb750a3b5
  0xa771f1eb: call   0xa771f1f0
  0xa771f1f0: pusha  
  0xa771f1f1: call   0xb7052f32
  0xa771f1f6: hlt    
  0xa771f1f7: push   $0xb735fe8b
  0xa771f1fc: call   0xa771f201
  0xa771f201: pusha  
  0xa771f202: call   0xb7052f32
  0xa771f207: hlt    
  0xa771f208: pop    %esi
  0xa771f209: mov    %eax,0x40(%edi)
  0xa771f20c: mov    %eax,0x44(%edi)
  0xa771f20f: add    %ecx,%eax
  0xa771f211: sub    $0x10,%eax
  0xa771f214: mov    %eax,0x4c(%edi)
  0xa771f217: jmp    0xa771f21c
  0xa771f21c: mov    0x8(%edx),%ecx
  0xa771f21f: mov    %ebx,%esi
  0xa771f221: shl    %cl,%esi
  0xa771f223: shr    $0x10,%ecx
  0xa771f226: and    $0xff,%ecx
  0xa771f22c: add    %ecx,%esi
  0xa771f22e: add    $0x7,%esi
  0xa771f231: and    $0xfffffff8,%esi
  0xa771f234: mov    %esp,%ecx
  0xa771f236: shr    $0xc,%ecx
  0xa771f239: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa771f240: mov    0x44(%ecx),%eax
  0xa771f243: lea    (%eax,%esi,1),%edi
  0xa771f246: cmp    0x4c(%ecx),%edi
  0xa771f249: ja     0xa771f35c
  0xa771f24f: mov    %edi,0x44(%ecx)
  0xa771f252: movl   $0x1,(%eax)
  0xa771f258: mov    %edx,0x4(%eax)
  0xa771f25b: mov    %ebx,0x8(%eax)
  0xa771f25e: mov    0xa(%edx),%cl
  0xa771f261: and    $0xff,%ecx
  0xa771f267: sub    %ecx,%esi
  0xa771f269: add    %eax,%ecx
  0xa771f26b: sub    $0x0,%esi
  0xa771f26e: je     0xa771f2b0
  0xa771f274: test   $0x3,%esi
  0xa771f27a: je     0xa771f291
  0xa771f280: push   $0xb738916c
  0xa771f285: call   0xa771f28a
  0xa771f28a: pusha  
  0xa771f28b: call   0xb7052f32
  0xa771f290: hlt    
  0xa771f291: xor    %edi,%edi
  0xa771f293: shr    $0x3,%esi
  0xa771f296: jae    0xa771f2a5
  0xa771f29c: mov    %edi,(%ecx,%esi,8)
  0xa771f29f: je     0xa771f2b0
  0xa771f2a5: mov    %edi,-0x4(%ecx,%esi,8)
  0xa771f2a9: mov    %edi,-0x8(%ecx,%esi,8)
  0xa771f2ad: dec    %esi
  0xa771f2ae: jne    0xa771f2a5
  0xa771f2b0: ret    
  0xa771f2b1: mov    0x8(%edx),%ecx
  0xa771f2b4: mov    %ebx,%esi
  0xa771f2b6: shl    %cl,%esi
  0xa771f2b8: shr    $0x10,%ecx
  0xa771f2bb: and    $0xff,%ecx
  0xa771f2c1: add    %ecx,%esi
  0xa771f2c3: add    $0x7,%esi
  0xa771f2c6: and    $0xfffffff8,%esi
  0xa771f2c9: mov    0xb6613dd4,%eax
  0xa771f2cf: lea    (%eax,%esi,1),%ecx
  0xa771f2d2: cmp    %eax,%ecx
  0xa771f2d4: jb     0xa771f35c
  0xa771f2da: cmp    0xb6613dc0,%ecx
  0xa771f2e0: ja     0xa771f35c
  0xa771f2e6: lock cmpxchg %ecx,0xb6613dd4
  0xa771f2ee: jne    0xa771f2c9
  0xa771f2f0: add    %esi,0x88(%edi)
  0xa771f2f6: adcl   $0x0,0x8c(%edi)
  0xa771f2fd: movl   $0x1,(%eax)
  0xa771f303: mov    %edx,0x4(%eax)
  0xa771f306: mov    %ebx,0x8(%eax)
  0xa771f309: mov    0xa(%edx),%cl
  0xa771f30c: and    $0xff,%ecx
  0xa771f312: sub    %ecx,%esi
  0xa771f314: add    %eax,%ecx
  0xa771f316: sub    $0x0,%esi
  0xa771f319: je     0xa771f35b
  0xa771f31f: test   $0x3,%esi
  0xa771f325: je     0xa771f33c
  0xa771f32b: push   $0xb738916c
  0xa771f330: call   0xa771f335
  0xa771f335: pusha  
  0xa771f336: call   0xb7052f32
  0xa771f33b: hlt    
  0xa771f33c: xor    %edi,%edi
  0xa771f33e: shr    $0x3,%esi
  0xa771f341: jae    0xa771f350
  0xa771f347: mov    %edi,(%ecx,%esi,8)
  0xa771f34a: je     0xa771f35b
  0xa771f350: mov    %edi,-0x4(%ecx,%esi,8)
  0xa771f354: mov    %edi,-0x8(%ecx,%esi,8)
  0xa771f358: dec    %esi
  0xa771f359: jne    0xa771f350
  0xa771f35b: ret    
  0xa771f35c: push   %ebp
  0xa771f35d: mov    %esp,%ebp
  ;; save_live_registers
  0xa771f35f: pusha  
  0xa771f360: sub    $0xf0,%esp
  0xa771f366: movl   $0xfeedbeef,0xec(%esp)
  0xa771f371: vmovsd %xmm0,(%esp)
  0xa771f376: vmovsd %xmm1,0x8(%esp)
  0xa771f37c: vmovsd %xmm2,0x10(%esp)
  0xa771f382: vmovsd %xmm3,0x18(%esp)
  0xa771f388: vmovsd %xmm4,0x20(%esp)
  0xa771f38e: vmovsd %xmm5,0x28(%esp)
  0xa771f394: vmovsd %xmm6,0x30(%esp)
  0xa771f39a: vmovsd %xmm7,0x38(%esp)
  0xa771f3a0: push   %ebx
  0xa771f3a1: push   %edx
  0xa771f3a2: mov    %esp,%edi
  0xa771f3a4: shr    $0xc,%edi
  0xa771f3a7: mov    -0x486bdba0(,%edi,4),%edi
  0xa771f3ae: push   %edi
  0xa771f3af: mov    %ebp,0x148(%edi)
  0xa771f3b5: mov    %esp,0x140(%edi)
  0xa771f3bb: call   0xb6bb517e
  0xa771f3c0: push   %eax
  0xa771f3c1: mov    %esp,%eax
  0xa771f3c3: shr    $0xc,%eax
  0xa771f3c6: mov    -0x486bdba0(,%eax,4),%eax
  0xa771f3cd: cmp    %eax,%edi
  0xa771f3cf: je     0xa771f3eb
  0xa771f3d5: call   0xb711bdac
  0xa771f3da: push   $0xb7391b5c
  0xa771f3df: call   0xa771f3e4
  0xa771f3e4: pusha  
  0xa771f3e5: call   0xb7052f32
  0xa771f3ea: hlt    
  0xa771f3eb: pop    %eax
  0xa771f3ec: movl   $0x0,0x140(%edi)
  0xa771f3f6: movl   $0x0,0x148(%edi)
  0xa771f400: movl   $0x0,0x144(%edi)
  0xa771f40a: add    $0xc,%esp
  0xa771f40d: cmpl   $0x0,0x4(%edi)
  0xa771f414: je     0xa771f42c
  0xa771f41a: mov    0x4(%edi),%eax
  0xa771f41d: movl   $0x0,0x170(%edi)
  0xa771f427: jmp    0xa76cbce0
  0xa771f42c: mov    0x170(%edi),%eax
  0xa771f432: movl   $0x0,0x170(%edi)
  ;; restore_live_registers_except_rax
  0xa771f43c: vmovsd (%esp),%xmm0
  0xa771f441: vmovsd 0x8(%esp),%xmm1
  0xa771f447: vmovsd 0x10(%esp),%xmm2
  0xa771f44d: vmovsd 0x18(%esp),%xmm3
  0xa771f453: vmovsd 0x20(%esp),%xmm4
  0xa771f459: vmovsd 0x28(%esp),%xmm5
  0xa771f45f: vmovsd 0x30(%esp),%xmm6
  0xa771f465: vmovsd 0x38(%esp),%xmm7
  0xa771f46b: cmpl   $0xfeedbeef,0xec(%esp)
  0xa771f476: je     0xa771f48d
  0xa771f47c: push   $0xb7391c83
  0xa771f481: call   0xa771f486
  0xa771f486: pusha  
  0xa771f487: call   0xb7052f32
  0xa771f48c: hlt    
  0xa771f48d: add    $0xf0,%esp
  0xa771f493: pop    %edi
  0xa771f494: pop    %esi
  0xa771f495: pop    %ebp
  0xa771f496: pop    %ebx
  0xa771f497: pop    %ebx
  0xa771f498: pop    %edx
  0xa771f499: pop    %ecx
  0xa771f49a: add    $0x4,%esp
  0xa771f49d: mov    %ebp,%esp
  0xa771f49f: pop    %ebp
  0xa771f4a0: ret    
  0xa771f4a1: nop
  0xa771f4a2: nop
  0xa771f4a3: nop

Decoding RuntimeStub - new_multi_array Runtime1 stub 0xa771f4c8
  0xa771f540: push   %ebp
  0xa771f541: mov    %esp,%ebp
  ;; save_live_registers
  0xa771f543: pusha  
  0xa771f544: sub    $0xf0,%esp
  0xa771f54a: movl   $0xfeedbeef,0xec(%esp)
  0xa771f555: vmovsd %xmm0,(%esp)
  0xa771f55a: vmovsd %xmm1,0x8(%esp)
  0xa771f560: vmovsd %xmm2,0x10(%esp)
  0xa771f566: vmovsd %xmm3,0x18(%esp)
  0xa771f56c: vmovsd %xmm4,0x20(%esp)
  0xa771f572: vmovsd %xmm5,0x28(%esp)
  0xa771f578: vmovsd %xmm6,0x30(%esp)
  0xa771f57e: vmovsd %xmm7,0x38(%esp)
  0xa771f584: push   %ecx
  0xa771f585: push   %ebx
  0xa771f586: push   %eax
  0xa771f587: mov    %esp,%edi
  0xa771f589: shr    $0xc,%edi
  0xa771f58c: mov    -0x486bdba0(,%edi,4),%edi
  0xa771f593: push   %edi
  0xa771f594: mov    %ebp,0x148(%edi)
  0xa771f59a: mov    %esp,0x140(%edi)
  0xa771f5a0: call   0xb6bb53f0
  0xa771f5a5: push   %eax
  0xa771f5a6: mov    %esp,%eax
  0xa771f5a8: shr    $0xc,%eax
  0xa771f5ab: mov    -0x486bdba0(,%eax,4),%eax
  0xa771f5b2: cmp    %eax,%edi
  0xa771f5b4: je     0xa771f5d0
  0xa771f5ba: call   0xb711bdac
  0xa771f5bf: push   $0xb7391b5c
  0xa771f5c4: call   0xa771f5c9
  0xa771f5c9: pusha  
  0xa771f5ca: call   0xb7052f32
  0xa771f5cf: hlt    
  0xa771f5d0: pop    %eax
  0xa771f5d1: movl   $0x0,0x140(%edi)
  0xa771f5db: movl   $0x0,0x148(%edi)
  0xa771f5e5: movl   $0x0,0x144(%edi)
  0xa771f5ef: add    $0x10,%esp
  0xa771f5f2: cmpl   $0x0,0x4(%edi)
  0xa771f5f9: je     0xa771f611
  0xa771f5ff: mov    0x4(%edi),%eax
  0xa771f602: movl   $0x0,0x170(%edi)
  0xa771f60c: jmp    0xa76cbce0
  0xa771f611: mov    0x170(%edi),%eax
  0xa771f617: movl   $0x0,0x170(%edi)
  ;; restore_live_registers_except_rax
  0xa771f621: vmovsd (%esp),%xmm0
  0xa771f626: vmovsd 0x8(%esp),%xmm1
  0xa771f62c: vmovsd 0x10(%esp),%xmm2
  0xa771f632: vmovsd 0x18(%esp),%xmm3
  0xa771f638: vmovsd 0x20(%esp),%xmm4
  0xa771f63e: vmovsd 0x28(%esp),%xmm5
  0xa771f644: vmovsd 0x30(%esp),%xmm6
  0xa771f64a: vmovsd 0x38(%esp),%xmm7
  0xa771f650: cmpl   $0xfeedbeef,0xec(%esp)
  0xa771f65b: je     0xa771f672
  0xa771f661: push   $0xb7391c83
  0xa771f666: call   0xa771f66b
  0xa771f66b: pusha  
  0xa771f66c: call   0xb7052f32
  0xa771f671: hlt    
  0xa771f672: add    $0xf0,%esp
  0xa771f678: pop    %edi
  0xa771f679: pop    %esi
  0xa771f67a: pop    %ebp
  0xa771f67b: pop    %ebx
  0xa771f67c: pop    %ebx
  0xa771f67d: pop    %edx
  0xa771f67e: pop    %ecx
  0xa771f67f: add    $0x4,%esp
  0xa771f682: mov    %ebp,%esp
  0xa771f684: pop    %ebp
  0xa771f685: ret    
  0xa771f686: nop
  0xa771f687: nop

Decoding RuntimeStub - handle_exception_nofpu Runtime1 stub 0xa771f6c8
  0xa771f760: push   %ebp
  0xa771f761: mov    %esp,%ebp
  ;; generate_handle_exception
  ;; save_live_registers
  0xa771f763: pusha  
  0xa771f764: sub    $0xf0,%esp
  0xa771f76a: movl   $0xfeedbeef,0xec(%esp)
  0xa771f775: mov    $0xdead,%ebx
  0xa771f77a: mov    $0xdead,%ecx
  0xa771f77f: mov    $0xdead,%esi
  0xa771f784: mov    $0xdead,%edi
  0xa771f789: mov    %esp,%edi
  0xa771f78b: shr    $0xc,%edi
  0xa771f78e: mov    -0x486bdba0(,%edi,4),%edi
  0xa771f795: cmpl   $0x0,0x1b4(%edi)
  0xa771f79f: je     0xa771f7b6
  0xa771f7a5: push   $0xb7391cd4
  0xa771f7aa: call   0xa771f7af
  0xa771f7af: pusha  
  0xa771f7b0: call   0xb7052f32
  0xa771f7b5: hlt    
  0xa771f7b6: cmpl   $0x0,0x1b8(%edi)
  0xa771f7c0: je     0xa771f7d7
  0xa771f7c6: push   $0xb7391cee
  0xa771f7cb: call   0xa771f7d0
  0xa771f7d0: pusha  
  0xa771f7d1: call   0xb7052f32
  0xa771f7d6: hlt    
  0xa771f7d7: mov    %eax,0x1b4(%edi)
  0xa771f7dd: mov    %edx,0x1b8(%edi)
  0xa771f7e3: mov    %edx,0x4(%ebp)
  0xa771f7e6: mov    %esp,%edi
  0xa771f7e8: shr    $0xc,%edi
  0xa771f7eb: mov    -0x486bdba0(,%edi,4),%edi
  0xa771f7f2: push   %edi
  0xa771f7f3: mov    %ebp,0x148(%edi)
  0xa771f7f9: mov    %esp,0x140(%edi)
  0xa771f7ff: call   0xb6bb66be
  0xa771f804: push   %eax
  0xa771f805: mov    %esp,%eax
  0xa771f807: shr    $0xc,%eax
  0xa771f80a: mov    -0x486bdba0(,%eax,4),%eax
  0xa771f811: cmp    %eax,%edi
  0xa771f813: je     0xa771f82f
  0xa771f819: call   0xb711bdac
  0xa771f81e: push   $0xb7391b5c
  0xa771f823: call   0xa771f828
  0xa771f828: pusha  
  0xa771f829: call   0xb7052f32
  0xa771f82e: hlt    
  0xa771f82f: pop    %eax
  0xa771f830: movl   $0x0,0x140(%edi)
  0xa771f83a: movl   $0x0,0x148(%edi)
  0xa771f844: movl   $0x0,0x144(%edi)
  0xa771f84e: add    $0x4,%esp
  0xa771f851: cmpl   $0x0,0x4(%edi)
  0xa771f858: je     0xa771f866
  0xa771f85e: mov    0x4(%edi),%eax
  0xa771f861: jmp    0xa76cbce0
  0xa771f866: mov    $0xdead,%ebx
  0xa771f86b: mov    $0xdead,%ecx
  0xa771f870: mov    $0xdead,%edx
  0xa771f875: mov    $0xdead,%esi
  0xa771f87a: mov    $0xdead,%edi
  0xa771f87f: mov    %eax,0x4(%ebp)
  ;; restore_live_registers
  0xa771f882: cmpl   $0xfeedbeef,0xec(%esp)
  0xa771f88d: je     0xa771f8a4
  0xa771f893: push   $0xb7391c83
  0xa771f898: call   0xa771f89d
  0xa771f89d: pusha  
  0xa771f89e: call   0xb7052f32
  0xa771f8a3: hlt    
  0xa771f8a4: add    $0xf0,%esp
  0xa771f8aa: popa   
  0xa771f8ab: mov    %ebp,%esp
  0xa771f8ad: pop    %ebp
  0xa771f8ae: ret    
  0xa771f8af: nop

Decoding RuntimeStub - handle_exception Runtime1 stub 0xa771f8c8
  0xa771f960: push   %ebp
  0xa771f961: mov    %esp,%ebp
  ;; generate_handle_exception
  ;; save_live_registers
  0xa771f963: pusha  
  0xa771f964: sub    $0xf0,%esp
  0xa771f96a: movl   $0xfeedbeef,0xec(%esp)
  0xa771f975: vmovsd %xmm0,(%esp)
  0xa771f97a: vmovsd %xmm1,0x8(%esp)
  0xa771f980: vmovsd %xmm2,0x10(%esp)
  0xa771f986: vmovsd %xmm3,0x18(%esp)
  0xa771f98c: vmovsd %xmm4,0x20(%esp)
  0xa771f992: vmovsd %xmm5,0x28(%esp)
  0xa771f998: vmovsd %xmm6,0x30(%esp)
  0xa771f99e: vmovsd %xmm7,0x38(%esp)
  0xa771f9a4: mov    $0xdead,%ebx
  0xa771f9a9: mov    $0xdead,%ecx
  0xa771f9ae: mov    $0xdead,%esi
  0xa771f9b3: mov    $0xdead,%edi
  0xa771f9b8: mov    %esp,%edi
  0xa771f9ba: shr    $0xc,%edi
  0xa771f9bd: mov    -0x486bdba0(,%edi,4),%edi
  0xa771f9c4: cmpl   $0x0,0x1b4(%edi)
  0xa771f9ce: je     0xa771f9e5
  0xa771f9d4: push   $0xb7391cd4
  0xa771f9d9: call   0xa771f9de
  0xa771f9de: pusha  
  0xa771f9df: call   0xb7052f32
  0xa771f9e4: hlt    
  0xa771f9e5: cmpl   $0x0,0x1b8(%edi)
  0xa771f9ef: je     0xa771fa06
  0xa771f9f5: push   $0xb7391cee
  0xa771f9fa: call   0xa771f9ff
  0xa771f9ff: pusha  
  0xa771fa00: call   0xb7052f32
  0xa771fa05: hlt    
  0xa771fa06: mov    %eax,0x1b4(%edi)
  0xa771fa0c: mov    %edx,0x1b8(%edi)
  0xa771fa12: mov    %edx,0x4(%ebp)
  0xa771fa15: mov    %esp,%edi
  0xa771fa17: shr    $0xc,%edi
  0xa771fa1a: mov    -0x486bdba0(,%edi,4),%edi
  0xa771fa21: push   %edi
  0xa771fa22: mov    %ebp,0x148(%edi)
  0xa771fa28: mov    %esp,0x140(%edi)
  0xa771fa2e: call   0xb6bb66be
  0xa771fa33: push   %eax
  0xa771fa34: mov    %esp,%eax
  0xa771fa36: shr    $0xc,%eax
  0xa771fa39: mov    -0x486bdba0(,%eax,4),%eax
  0xa771fa40: cmp    %eax,%edi
  0xa771fa42: je     0xa771fa5e
  0xa771fa48: call   0xb711bdac
  0xa771fa4d: push   $0xb7391b5c
  0xa771fa52: call   0xa771fa57
  0xa771fa57: pusha  
  0xa771fa58: call   0xb7052f32
  0xa771fa5d: hlt    
  0xa771fa5e: pop    %eax
  0xa771fa5f: movl   $0x0,0x140(%edi)
  0xa771fa69: movl   $0x0,0x148(%edi)
  0xa771fa73: movl   $0x0,0x144(%edi)
  0xa771fa7d: add    $0x4,%esp
  0xa771fa80: cmpl   $0x0,0x4(%edi)
  0xa771fa87: je     0xa771fa95
  0xa771fa8d: mov    0x4(%edi),%eax
  0xa771fa90: jmp    0xa76cbce0
  0xa771fa95: mov    $0xdead,%ebx
  0xa771fa9a: mov    $0xdead,%ecx
  0xa771fa9f: mov    $0xdead,%edx
  0xa771faa4: mov    $0xdead,%esi
  0xa771faa9: mov    $0xdead,%edi
  0xa771faae: mov    %eax,0x4(%ebp)
  ;; restore_live_registers
  0xa771fab1: vmovsd (%esp),%xmm0
  0xa771fab6: vmovsd 0x8(%esp),%xmm1
  0xa771fabc: vmovsd 0x10(%esp),%xmm2
  0xa771fac2: vmovsd 0x18(%esp),%xmm3
  0xa771fac8: vmovsd 0x20(%esp),%xmm4
  0xa771face: vmovsd 0x28(%esp),%xmm5
  0xa771fad4: vmovsd 0x30(%esp),%xmm6
  0xa771fada: vmovsd 0x38(%esp),%xmm7
  0xa771fae0: cmpl   $0xfeedbeef,0xec(%esp)
  0xa771faeb: je     0xa771fb02
  0xa771faf1: push   $0xb7391c83
  0xa771faf6: call   0xa771fafb
  0xa771fafb: pusha  
  0xa771fafc: call   0xb7052f32
  0xa771fb01: hlt    
  0xa771fb02: add    $0xf0,%esp
  0xa771fb08: popa   
  0xa771fb09: mov    %ebp,%esp
  0xa771fb0b: pop    %ebp
  0xa771fb0c: ret    
  0xa771fb0d: nop
  0xa771fb0e: nop
  0xa771fb0f: nop

Decoding RuntimeStub - _rethrow_Java 0xa771ea48
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa771eaa0: sub    $0x2c,%esp
  0xa771eaa6: mov    %ebp,0x28(%esp)
  0xa771eaaa: pushl  0x2c(%esp)
  0xa771eaae: popl   0xc(%esp)
  0xa771eab2: mov    %esp,%ebx
  0xa771eab4: shr    $0xc,%ebx
  0xa771eab7: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa771eabe: mov    %esp,0x140(%ebx)
  0xa771eac4: mov    %ebx,0x10(%esp)
  0xa771eac8: mov    %ecx,(%esp)
  0xa771eacb: mov    %ebx,0x4(%esp)
  0xa771eacf: pushl  0xc(%esp)
  0xa771ead3: popl   0x8(%esp)
  0xa771ead7: call   0xb71c5906
  0xa771eadc: mov    %eax,%ecx
  0xa771eade: mov    0x10(%esp),%ebp
  0xa771eae2: movl   $0x0,0x140(%ebp)
  0xa771eaec: mov    %ebp,%ebx
  0xa771eaee: movl   $0x0,0x144(%ebx)
  0xa771eaf8: mov    0x170(%ebx),%eax
  0xa771eafe: movl   $0x0,0x170(%ebx)
  0xa771eb08: mov    0x4(%ebx),%ebp
  0xa771eb0b: test   %ebp,%ebp
  0xa771eb0d: jne    0xa771eb16
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa771eb0f: add    $0x28,%esp
  0xa771eb12: pop    %ebp
  0xa771eb13: pop    %edx
  0xa771eb14: jmp    *%ecx
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa771eb16: mov    $0xa75af400,%ecx
  0xa771eb1b: mov    $0x0,%ebx
  0xa771eb20: add    $0x28,%esp
  0xa771eb23: pop    %ebp
  0xa771eb24: jmp    *%ecx
  0xa771eb26: hlt    
  0xa771eb27: hlt    

  ;; } jump_to_lambda_form
  0xa7714202: nop
  0xa7714203: Decoding RuntimeStub - handle_exception_from_callee Runtime1 stub 0xa771fb48
  0xa771fbc0: push   %ebp
  0xa771fbc1: mov    %esp,%ebp
  ;; generate_handle_exception
  0xa771fbc3: mov    $0xdead,%ebx
  0xa771fbc8: mov    $0xdead,%ecx
  0xa771fbcd: mov    $0xdead,%esi
  0xa771fbd2: mov    $0xdead,%edi
  0xa771fbd7: mov    %esp,%edi
  0xa771fbd9: shr    $0xc,%edi
  0xa771fbdc: mov    -0x486bdba0(,%edi,4),%edi
  0xa771fbe3: cmpl   $0x0,0x1b4(%edi)
  0xa771fbed: je     0xa771fc04
  0xa771fbf3: push   $0xb7391cd4
  0xa771fbf8: call   0xa771fbfd
  0xa771fbfd: pusha  
  0xa771fbfe: call   0xb7052f32
  0xa771fc03: hlt    
  0xa771fc04: cmpl   $0x0,0x1b8(%edi)
  0xa771fc0e: je     0xa771fc25
  0xa771fc14: push   $0xb7391cee
  0xa771fc19: call   0xa771fc1e
  0xa771fc1e: pusha  
  0xa771fc1f: call   0xb7052f32
  0xa771fc24: hlt    
  0xa771fc25: mov    %eax,0x1b4(%edi)
  0xa771fc2b: mov    %edx,0x1b8(%edi)
  0xa771fc31: mov    %edx,0x4(%ebp)
  0xa771fc34: mov    %esp,%edi
  0xa771fc36: shr    $0xc,%edi
  0xa771fc39: mov    -0x486bdba0(,%edi,4),%edi
  0xa771fc40: push   %edi
  0xa771fc41: mov    %ebp,0x148(%edi)
  0xa771fc47: mov    %esp,0x140(%edi)
  0xa771fc4d: call   0xb6bb66be
  0xa771fc52: push   %eax
  0xa771fc53: mov    %esp,%eax
  0xa771fc55: shr    $0xc,%eax
  0xa771fc58: mov    -0x486bdba0(,%eax,4),%eax
  0xa771fc5f: cmp    %eax,%edi
  0xa771fc61: je     0xa771fc7d
  0xa771fc67: call   0xb711bdac
  0xa771fc6c: push   $0xb7391b5c
  0xa771fc71: call   0xa771fc76
  0xa771fc76: pusha  
  0xa771fc77: call   0xb7052f32
  0xa771fc7c: hlt    
  0xa771fc7d: pop    %eax
  0xa771fc7e: movl   $0x0,0x140(%edi)
  0xa771fc88: movl   $0x0,0x148(%edi)
  0xa771fc92: movl   $0x0,0x144(%edi)
  0xa771fc9c: add    $0x4,%esp
  0xa771fc9f: cmpl   $0x0,0x4(%edi)
  0xa771fca6: je     0xa771fcb4
  0xa771fcac: mov    0x4(%edi),%eax
  0xa771fcaf: jmp    0xa76cbce0
  0xa771fcb4: mov    $0xdead,%ebx
  0xa771fcb9: mov    $0xdead,%ecx
  0xa771fcbe: mov    $0xdead,%edx
  0xa771fcc3: mov    $0xdead,%esi
  0xa771fcc8: mov    $0xdead,%edi
  0xa771fccd: mov    %eax,0x4(%ebp)
  0xa771fcd0: mov    %ebp,%esp
  0xa771fcd2: pop    %ebp
  0xa771fcd3: pop    %ecx
  0xa771fcd4: jmp    *%ecx
  0xa771fcd6: mov    %ebp,%esp
  0xa771fcd8: pop    %ebp
  0xa771fcd9: ret    
  0xa771fcda: nop
  0xa771fcdb: nop

nop
MethodHandle::interpreter_entry::_linkToStatic [0xa771436c, 0xa771440e[ (162 bytes)
  0xa771436c: nop
  0xa771436d: nop
  0xa771436e: nop
  0xa771436f: nop
  0xa7714370: nop
  0xa7714371: nopDecoding RuntimeStub - throw_array_store_exception Runtime1 stub 0xa76cb7c8
  0xa76cb840: push   %ebp
  0xa76cb841: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cb843: pusha  
  0xa76cb844: sub    $0xf0,%esp
  0xa76cb84a: movl   $0xfeedbeef,0xec(%esp)
  0xa76cb855: vmovsd %xmm0,(%esp)
  0xa76cb85a: vmovsd %xmm1,0x8(%esp)
  0xa76cb860: vmovsd %xmm2,0x10(%esp)
  0xa76cb866: vmovsd %xmm3,0x18(%esp)
  0xa76cb86c: vmovsd %xmm4,0x20(%esp)
  0xa76cb872: vmovsd %xmm5,0x28(%esp)
  0xa76cb878: vmovsd %xmm6,0x30(%esp)
  0xa76cb87e: vmovsd %xmm7,0x38(%esp)
  0xa76cb884: mov    $0xdead,%eax
  0xa76cb889: mov    $0xdead,%ebx
  0xa76cb88e: mov    $0xdead,%ecx
  0xa76cb893: mov    $0xdead,%edx
  0xa76cb898: mov    $0xdead,%esi
  0xa76cb89d: mov    $0xdead,%edi
  0xa76cb8a2: mov    0x8(%ebp),%ebx
  0xa76cb8a5: push   %ebx
  0xa76cb8a6: mov    %esp,%edi
  0xa76cb8a8: shr    $0xc,%edi
  0xa76cb8ab: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cb8b2: push   %edi
  0xa76cb8b3: mov    %ebp,0x148(%edi)
  0xa76cb8b9: mov    %esp,0x140(%edi)
  0xa76cb8bf: call   0xb6bb57f2
  0xa76cb8c4: push   %eax
  0xa76cb8c5: mov    %esp,%eax
  0xa76cb8c7: shr    $0xc,%eax
  0xa76cb8ca: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cb8d1: cmp    %eax,%edi
  0xa76cb8d3: je     0xa76cb8ef
  0xa76cb8d9: call   0xb711bdac
  0xa76cb8de: push   $0xb7391b5c
  0xa76cb8e3: call   0xa76cb8e8
  0xa76cb8e8: pusha  
  0xa76cb8e9: call   0xb7052f32
  0xa76cb8ee: hlt    
  0xa76cb8ef: pop    %eax
  0xa76cb8f0: movl   $0x0,0x140(%edi)
  0xa76cb8fa: movl   $0x0,0x148(%edi)
  0xa76cb904: movl   $0x0,0x144(%edi)
  0xa76cb90e: add    $0x8,%esp
  0xa76cb911: cmpl   $0x0,0x4(%edi)
  0xa76cb918: je     0xa76cb926
  0xa76cb91e: mov    0x4(%edi),%eax
  0xa76cb921: jmp    0xa76cbce0
  0xa76cb926: push   $0xb73919c8
  0xa76cb92b: call   0xa76cb930
  0xa76cb930: pusha  
  0xa76cb931: call   0xb7052f32
  0xa76cb936: hlt    
  0xa76cb937: mov    %ebp,%esp
  0xa76cb939: pop    %ebp
  0xa76cb93a: ret    
  0xa76cb93b: nop

Decoding RuntimeStub - _slow_arraycopy_Java 0xa7712b88
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa7712be0: sub    $0x2c,%esp
  0xa7712be6: mov    %ebp,0x28(%esp)
  0xa7712bea: mov    %esp,%ebp
  0xa7712bec: shr    $0xc,%ebp
  0xa7712bef: mov    -0x486bdba0(,%ebp,4),%ebp
  0xa7712bf6: mov    %esp,0x140(%ebp)
  0xa7712bfc: mov    %ebp,0x18(%esp)
  0xa7712c00: mov    %ecx,(%esp)
  0xa7712c03: mov    %edx,0x4(%esp)
  0xa7712c07: pushl  0x30(%esp)
  0xa7712c0b: popl   0x8(%esp)
  0xa7712c0f: pushl  0x34(%esp)
  0xa7712c13: popl   0xc(%esp)
  0xa7712c17: pushl  0x38(%esp)
  0xa7712c1b: popl   0x10(%esp)
  0xa7712c1f: mov    %ebp,0x14(%esp)
  0xa7712c23: call   0xb71d685c
  0xa7712c28: mov    0x18(%esp),%ecx
  0xa7712c2c: movl   $0x0,0x140(%ecx)
  0xa7712c36: movl   $0x0,0x144(%ecx)
  0xa7712c40: mov    0x4(%ecx),%ecx
  0xa7712c43: test   %ecx,%ecx
  0xa7712c45: jne    0xa7712c4c
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa7712c47: add    $0x28,%esp
  0xa7712c4a: pop    %ebp
  0xa7712c4b: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa7712c4c: mov    $0xa75af400,%edi
  0xa7712c51: mov    $0x0,%ebx
  0xa7712c56: add    $0x28,%esp
  0xa7712c59: pop    %ebp
  0xa7712c5a: jmp    *%edi


  0xa7714372: nop
  0xa7714373: nop
  0xa7714374: nop
  0xa7714375: nop
  0xa7714376: nop
  0xa7714377: nop
  0xa7714378: nop
  0xa7714379: nop
  0xa771437a: nop
  0xa771437b: nop
  0xa771437c: nop
  0xa771437d: nop
  0xa771437e: nop
  0xa771437f: nop
  ;; verify_intrinsic_id {
  0xa7714380: cmpb   $0xb9,0x1e(%ebx)
  0xa7714384: je     Decoding RuntimeStub - throw_class_cast_exception Runtime1 stub 0xa77129c8
  0xa7712a40: push   %ebp
  0xa7712a41: mov    %esp,%ebp
  ;; save_live_registers
  0xa7712a43: pusha  
  0xa7712a44: sub    $0xf0,%esp
  0xa7712a4a: movl   $0xfeedbeef,0xec(%esp)
  0xa7712a55: vmovsd %xmm0,(%esp)
  0xa7712a5a: vmovsd %xmm1,0x8(%esp)
  0xa7712a60: vmovsd %xmm2,0x10(%esp)
  0xa7712a66: vmovsd %xmm3,0x18(%esp)
  0xa7712a6c: vmovsd %xmm4,0x20(%esp)
  0xa7712a72: vmovsd %xmm5,0x28(%esp)
  0xa7712a78: vmovsd %xmm6,0x30(%esp)
  0xa7712a7e: vmovsd %xmm7,0x38(%esp)
  0xa7712a84: mov    $0xdead,%eax
  0xa7712a89: mov    $0xdead,%ebx
  0xa7712a8e: mov    $0xdead,%ecx
  0xa7712a93: mov    $0xdead,%edx
  0xa7712a98: mov    $0xdead,%esi
  0xa7712a9d: mov    $0xdead,%edi
  0xa7712aa2: mov    0x8(%ebp),%ebx
  0xa7712aa5: push   %ebx
  0xa7712aa6: mov    %esp,%edi
  0xa7712aa8: shr    $0xc,%edi
  0xa7712aab: mov    -0x486bdba0(,%edi,4),%edi
  0xa7712ab2: push   %edi
  0xa7712ab3: mov    %ebp,0x148(%edi)
  0xa7712ab9: mov    %esp,0x140(%edi)
  0xa7712abf: call   0xb6bb6e46
  0xa7712ac4: push   %eax
  0xa7712ac5: mov    %esp,%eax
  0xa7712ac7: shr    $0xc,%eax
  0xa7712aca: mov    -0x486bdba0(,%eax,4),%eax
  0xa7712ad1: cmp    %eax,%edi
  0xa7712ad3: je     0xa7712aef
  0xa7712ad9: call   0xb711bdac
  0xa7712ade: push   $0xb7391b5c
  0xa7712ae3: call   0xa7712ae8
  0xa7712ae8: pusha  
  0xa7712ae9: call   0xb7052f32
  0xa7712aee: hlt    
  0xa7712aef: pop    %eax
  0xa7712af0: movl   $0x0,0x140(%edi)
  0xa7712afa: movl   $0x0,0x148(%edi)
  0xa7712b04: movl   $0x0,0x144(%edi)
  0xa7712b0e: add    $0x8,%esp
  0xa7712b11: cmpl   $0x0,0x4(%edi)
  0xa7712b18: je     0xa7712b26
  0xa7712b1e: mov    0x4(%edi),%eax
  0xa7712b21: jmp    0xa76cbce0
  0xa7712b26: push   $0xb73919c8
  0xa7712b2b: call   0xa7712b30
  0xa7712b30: pusha  
  0xa7712b31: call   0xb7052f32
  0xa7712b36: hlt    
  0xa7712b37: mov    %ebp,%esp
  0xa7712b39: pop    %ebp
  0xa7712b3a: ret    
  0xa7712b3b: nop

0xa771439b
MethodHandle::interpreter_entry::_linkToSpecial [0xa771440e, 0xa771454d[ (319 bytes)
  0xa771440e: nop
  0xa771440f: nop
  0xa7714410: nop
  0xa7714411: nop
  0xa7714412: nop
  0xa7714413: nop
  0xa7714414: nop
  0xa7714415: nop
  0xa7714416: nop
  0xa7714417: Decoding RuntimeStub - throw_incompatible_class_change_error Runtime1 stub 0xa76cb648
  0xa76cb6c0: push   %ebp
  0xa76cb6c1: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cb6c3: pusha  
  0xa76cb6c4: sub    $0xf0,%esp
  0xa76cb6ca: movl   $0xfeedbeef,0xec(%esp)
  0xa76cb6d5: vmovsd %xmm0,(%esp)
  0xa76cb6da: vmovsd %xmm1,0x8(%esp)
  0xa76cb6e0: vmovsd %xmm2,0x10(%esp)
  0xa76cb6e6: vmovsd %xmm3,0x18(%esp)
  0xa76cb6ec: vmovsd %xmm4,0x20(%esp)
  0xa76cb6f2: vmovsd %xmm5,0x28(%esp)
  0xa76cb6f8: vmovsd %xmm6,0x30(%esp)
  0xa76cb6fe: vmovsd %xmm7,0x38(%esp)
  0xa76cb704: mov    $0xdead,%eax
  0xa76cb709: mov    $0xdead,%ebx
  0xa76cb70e: mov    $0xdead,%ecx
  0xa76cb713: mov    $0xdead,%edx
  0xa76cb718: mov    $0xdead,%esi
  0xa76cb71d: mov    $0xdead,%edi
  0xa76cb722: mov    %esp,%edi
  0xa76cb724: shr    $0xc,%edi
  0xa76cb727: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cb72e: push   %edi
  0xa76cb72f: mov    %ebp,0x148(%edi)
  0xa76cb735: mov    %esp,0x140(%edi)
  0xa76cb73b: call   0xb6bb7016
  0xa76cb740: push   %eax
  0xa76cb741: mov    %esp,%eax
  0xa76cb743: shr    $0xc,%eax
  0xa76cb746: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cb74d: cmp    %eax,%edi
  0xa76cb74f: je     0xa76cb76b
  0xa76cb755: call   0xb711bdac
  0xa76cb75a: push   $0xb7391b5c
  0xa76cb75f: call   0xa76cb764
  0xa76cb764: pusha  
  0xa76cb765: call   0xb7052f32
  0xa76cb76a: hlt    
  0xa76cb76b: pop    %eax
  0xa76cb76c: movl   $0x0,0x140(%edi)
  0xa76cb776: movl   $0x0,0x148(%edi)
  0xa76cb780: movl   $0x0,0x144(%edi)
  0xa76cb78a: add    $0x4,%esp
  0xa76cb78d: cmpl   $0x0,0x4(%edi)
  0xa76cb794: je     0xa76cb7a2
  0xa76cb79a: mov    0x4(%edi),%eax
  0xa76cb79d: jmp    0xa76cbce0
  0xa76cb7a2: push   $0xb73919c8
  0xa76cb7a7: call   0xa76cb7ac
  0xa76cb7ac: pusha  
  0xa76cb7ad: call   0xb7052f32
  0xa76cb7b2: hlt    
  0xa76cb7b3: mov    %ebp,%esp
  0xa76cb7b5: pop    %ebp
  0xa76cb7b6: ret    
  0xa76cb7b7: nop

Decoding RuntimeStub - _register_finalizer_Java 0xa76cb588
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76cb5e0: sub    $0x1c,%esp
  0xa76cb5e6: mov    %ebp,0x18(%esp)
  0xa76cb5ea: mov    %esp,%ebx
  0xa76cb5ec: shr    $0xc,%ebx
  0xa76cb5ef: mov    -0x486bdba0(,%ebx,4),%ebx
  0xa76cb5f6: mov    %esp,0x140(%ebx)
  0xa76cb5fc: mov    %ebx,0x8(%esp)
  0xa76cb600: mov    %ecx,(%esp)
  0xa76cb603: mov    %ebx,0x4(%esp)
  0xa76cb607: call   0xb71c5e0e
  0xa76cb60c: mov    0x8(%esp),%ebx
  0xa76cb610: movl   $0x0,0x140(%ebx)
  0xa76cb61a: movl   $0x0,0x144(%ebx)
  0xa76cb624: mov    0x4(%ebx),%ebx
  0xa76cb627: test   %ebx,%ebx
  0xa76cb629: jne    0xa76cb630
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76cb62b: add    $0x18,%esp
  0xa76cb62e: pop    %ebp
  0xa76cb62f: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76cb630: mov    $0xa75af400,%ecx
  0xa76cb635: mov    $0x0,%ebx
  0xa76cb63a: add    $0x18,%esp
  0xa76cb63d: pop    %ebp
  0xa76cb63e: jmp    *%ecx

Decoding RuntimeStub - slow_subtype_check Runtime1 stub 0xa76cb4c8
  0xa76cb520: push   %edi
  0xa76cb521: push   %esi
  0xa76cb522: push   %ecx
  0xa76cb523: push   %eax
  0xa76cb524: mov    0x18(%esp),%esi
  0xa76cb528: mov    0x14(%esp),%eax
  0xa76cb52c: incl   0xb792c2a4
  0xa76cb532: mov    0x18(%esi),%edi
  0xa76cb535: mov    (%edi),%ecx
  0xa76cb537: add    $0x4,%edi
  0xa76cb53a: test   %eax,%eax
  0xa76cb53c: repnz scas %es:(%edi),%eax
  0xa76cb53e: jne    0xa76cb554
  0xa76cb544: mov    %eax,0x14(%esi)
  0xa76cb547: movl   $0x1,0x18(%esp)
  0xa76cb54f: pop    %eax
  0xa76cb550: pop    %ecx
  0xa76cb551: pop    %esi
  0xa76cb552: pop    %edi
  0xa76cb553: ret    
  0xa76cb554: movl   $0x0,0x18(%esp)
  0xa76cb55c: pop    %eax
  0xa76cb55d: pop    %ecx
  0xa76cb55e: pop    %esi
  0xa76cb55f: pop    %edi
  0xa76cb560: ret    
  0xa76cb561: nop
  0xa76cb562: nop
  0xa76cb563: nop

nop
MethodHandle::interpreter_entry::_linkToInterface [0xa771454d, 0xa771468d[ (320 bytes)
  0xa771454d: nop
  0xa771454e: nop
  0xa771454f: nop
  0xa7714550: nop
  0xa7714551: nop
  0xa7714552: nop
  0xa7714553: nop
  0xa7714554: nop
  0xa7714555: nop
  0xa7714556: nop
  0xa7714557: nop
  0xa7714558: nop
  0xa7714559: nop
Decoding RuntimeStub - monitorenter Runtime1 stub 0xa76cb308
  0xa76cb380: push   %ebp
  0xa76cb381: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cb383: pusha  
  0xa76cb384: sub    $0xf0,%esp
  0xa76cb38a: movl   $0xfeedbeef,0xec(%esp)
  0xa76cb395: vmovsd %xmm0,(%esp)
  0xa76cb39a: vmovsd %xmm1,0x8(%esp)
  0xa76cb3a0: vmovsd %xmm2,0x10(%esp)
  0xa76cb3a6: vmovsd %xmm3,0x18(%esp)
  0xa76cb3ac: vmovsd %xmm4,0x20(%esp)
  0xa76cb3b2: vmovsd %xmm5,0x28(%esp)
  0xa76cb3b8: vmovsd %xmm6,0x30(%esp)
  0xa76cb3be: vmovsd %xmm7,0x38(%esp)
  0xa76cb3c4: mov    0xc(%ebp),%eax
  0xa76cb3c7: mov    0x8(%ebp),%ebx
  0xa76cb3ca: push   %ebx
  0xa76cb3cb: push   %eax
  0xa76cb3cc: mov    %esp,%edi
  0xa76cb3ce: shr    $0xc,%edi
  0xa76cb3d1: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cb3d8: push   %edi
  0xa76cb3d9: mov    %ebp,0x148(%edi)
  0xa76cb3df: mov    %esp,0x140(%edi)
  0xa76cb3e5: call   0xb6bb71ba
  0xa76cb3ea: push   %eax
  0xa76cb3eb: mov    %esp,%eax
  0xa76cb3ed: shr    $0xc,%eax
  0xa76cb3f0: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cb3f7: cmp    %eax,%edi
  0xa76cb3f9: je     0xa76cb415
  0xa76cb3ff: call   0xb711bdac
  0xa76cb404: push   $0xb7391b5c
  0xa76cb409: call   0xa76cb40e
  0xa76cb40e: pusha  
  0xa76cb40f: call   0xb7052f32
  0xa76cb414: hlt    
  0xa76cb415: pop    %eax
  0xa76cb416: movl   $0x0,0x140(%edi)
  0xa76cb420: movl   $0x0,0x148(%edi)
  0xa76cb42a: movl   $0x0,0x144(%edi)
  0xa76cb434: add    $0xc,%esp
  0xa76cb437: cmpl   $0x0,0x4(%edi)
  0xa76cb43e: je     0xa76cb44c
  0xa76cb444: mov    0x4(%edi),%eax
  0xa76cb447: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa76cb44c: vmovsd (%esp),%xmm0
  0xa76cb451: vmovsd 0x8(%esp),%xmm1
  0xa76cb457: vmovsd 0x10(%esp),%xmm2
  0xa76cb45d: vmovsd 0x18(%esp),%xmm3
  0xa76cb463: vmovsd 0x20(%esp),%xmm4
  0xa76cb469: vmovsd 0x28(%esp),%xmm5
  0xa76cb46f: vmovsd 0x30(%esp),%xmm6
  0xa76cb475: vmovsd 0x38(%esp),%xmm7
  0xa76cb47b: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76cb486: je     0xa76cb49d
  0xa76cb48c: push   $0xb7391c83
  0xa76cb491: call   0xa76cb496
  0xa76cb496: pusha  
  0xa76cb497: call   0xb7052f32
  0xa76cb49c: hlt    
  0xa76cb49d: add    $0xf0,%esp
  0xa76cb4a3: popa   
  0xa76cb4a4: mov    %ebp,%esp
  0xa76cb4a6: pop    %ebp
  0xa76cb4a7: ret    

Decoding RuntimeStub - _zap_dead_Java_locals_Java 0xa76cb208
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76cb260: sub    $0x2c,%esp
  0xa76cb266: mov    %ebp,0x28(%esp)
  0xa76cb26a: vmovsd %xmm1,0x18(%esp)
  0xa76cb270: vmovsd %xmm0,0x10(%esp)
  0xa76cb276: mov    %edx,0x8(%esp)
  0xa76cb27a: mov    %ecx,0x4(%esp)
  0xa76cb27e: mov    %esp,%ecx
  0xa76cb280: shr    $0xc,%ecx
  0xa76cb283: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa76cb28a: mov    %esp,0x140(%ecx)
  0xa76cb290: mov    %ecx,0xc(%esp)
  0xa76cb294: mov    %ecx,(%esp)
  0xa76cb297: call   0xb71c6906
  0xa76cb29c: mov    0xc(%esp),%ebx
  0xa76cb2a0: movl   $0x0,0x140(%ebx)
  0xa76cb2aa: mov    %ebx,%ecx
  0xa76cb2ac: movl   $0x0,0x144(%ecx)
  0xa76cb2b6: mov    0x4(%ecx),%ebx
  0xa76cb2b9: test   %ebx,%ebx
  0xa76cb2bb: jne    0xa76cb2d6
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76cb2bd: mov    0x4(%esp),%ecx
  0xa76cb2c1: mov    0x8(%esp),%edx
  0xa76cb2c5: vmovsd 0x10(%esp),%xmm0
  0xa76cb2cb: vmovsd 0x18(%esp),%xmm1
  0xa76cb2d1: add    $0x28,%esp
  0xa76cb2d4: pop    %ebp
  0xa76cb2d5: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76cb2d6: mov    $0xa75af400,%edi
  0xa76cb2db: mov    $0x0,%ebx
  0xa76cb2e0: mov    0x4(%esp),%ecx
  0xa76cb2e4: mov    0x8(%esp),%edx
  0xa76cb2e8: vmovsd 0x10(%esp),%xmm0
  0xa76cb2ee: vmovsd 0x18(%esp),%xmm1
  0xa76cb2f4: add    $0x28,%esp
  0xa76cb2f7: pop    %ebp
  0xa76cb2f8: jmp    *%edi
  0xa76cb2fa: hlt    
  0xa76cb2fb: hlt    

  0xa771455a: nop
  0xa771455b: nop
  0xa771455c: nop
  0xa771455d: nop
  0xa771455e: nop
  0xa771455f: Decoding RuntimeStub - monitorenter_nofpu Runtime1 stub 0xa76cb088
  0xa76cb100: push   %ebp
  0xa76cb101: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cb103: pusha  
  0xa76cb104: sub    $0xf0,%esp
  0xa76cb10a: movl   $0xfeedbeef,0xec(%esp)
  0xa76cb115: mov    0xc(%ebp),%eax
  0xa76cb118: mov    0x8(%ebp),%ebx
  0xa76cb11b: push   %ebx
  0xa76cb11c: push   %eax
  0xa76cb11d: mov    %esp,%edi
  0xa76cb11f: shr    $0xc,%edi
  0xa76cb122: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cb129: push   %edi
  0xa76cb12a: mov    %ebp,0x148(%edi)
  0xa76cb130: mov    %esp,0x140(%edi)
  0xa76cb136: call   0xb6bb71ba
  0xa76cb13b: push   %eax
  0xa76cb13c: mov    %esp,%eax
  0xa76cb13e: shr    $0xc,%eax
  0xa76cb141: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cb148: cmp    %eax,%edi
  0xa76cb14a: je     0xa76cb166
  0xa76cb150: call   0xb711bdac
  0xa76cb155: push   $0xb7391b5c
  0xa76cb15a: call   0xa76cb15f
  0xa76cb15f: pusha  
  0xa76cb160: call   0xb7052f32
  0xa76cb165: hlt    
  0xa76cb166: pop    %eax
  0xa76cb167: movl   $0x0,0x140(%edi)
  0xa76cb171: movl   $0x0,0x148(%edi)
  0xa76cb17b: movl   $0x0,0x144(%edi)
  0xa76cb185: add    $0xc,%esp
  0xa76cb188: cmpl   $0x0,0x4(%edi)
  0xa76cb18f: je     0xa76cb19d
  0xa76cb195: mov    0x4(%edi),%eax
  0xa76cb198: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa76cb19d: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76cb1a8: je     0xa76cb1bf
  0xa76cb1ae: push   $0xb7391c83
  0xa76cb1b3: call   0xa76cb1b8
  0xa76cb1b8: pusha  
  0xa76cb1b9: call   0xb7052f32
  0xa76cb1be: hlt    
  0xa76cb1bf: add    $0xf0,%esp
  0xa76cb1c5: popa   
  0xa76cb1c6: mov    %ebp,%esp
  0xa76cb1c8: pop    %ebp
  0xa76cb1c9: ret    
  0xa76cb1ca: nop
  0xa76cb1cb: nop

nop
Decoding RuntimeStub - monitorexit Runtime1 stub 0xa76caec8
  0xa76caf40: push   %ebp
  0xa76caf41: mov    %esp,%ebp
  ;; save_live_registers
  0xa76caf43: pusha  
  0xa76caf44: sub    $0xf0,%esp
  0xa76caf4a: movl   $0xfeedbeef,0xec(%esp)
  0xa76caf55: vmovsd %xmm0,(%esp)
  0xa76caf5a: vmovsd %xmm1,0x8(%esp)
  0xa76caf60: vmovsd %xmm2,0x10(%esp)
  0xa76caf66: vmovsd %xmm3,0x18(%esp)
  0xa76caf6c: vmovsd %xmm4,0x20(%esp)
  0xa76caf72: vmovsd %xmm5,0x28(%esp)
  0xa76caf78: vmovsd %xmm6,0x30(%esp)
  0xa76caf7e: vmovsd %xmm7,0x38(%esp)
  0xa76caf84: mov    0x8(%ebp),%eax
  0xa76caf87: push   %eax
  0xa76caf88: mov    %esp,%edi
  0xa76caf8a: shr    $0xc,%edi
  0xa76caf8d: mov    -0x486bdba0(,%edi,4),%edi
  0xa76caf94: push   %edi
  0xa76caf95: mov    %ebp,0x148(%edi)
  0xa76caf9b: mov    %esp,0x140(%edi)
  0xa76cafa1: call   0xb6bb74b8
  0xa76cafa6: push   %eax
  0xa76cafa7: mov    %esp,%eax
  0xa76cafa9: shr    $0xc,%eax
  0xa76cafac: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cafb3: cmp    %eax,%edi
  0xa76cafb5: je     0xa76cafd1
  0xa76cafbb: call   0xb711bdac
  0xa76cafc0: push   $0xb7391b5c
  0xa76cafc5: call   0xa76cafca
  0xa76cafca: pusha  
  0xa76cafcb: call   0xb7052f32
  0xa76cafd0: hlt    
  0xa76cafd1: pop    %eax
  0xa76cafd2: movl   $0x0,0x140(%edi)
  0xa76cafdc: movl   $0x0,0x148(%edi)
  0xa76cafe6: movl   $0x0,0x144(%edi)
  0xa76caff0: add    $0x8,%esp
  0xa76caff3: cmpl   $0x0,0x4(%edi)
  0xa76caffa: je     0xa76cb008
  0xa76cb000: mov    0x4(%edi),%eax
  0xa76cb003: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa76cb008: vmovsd (%esp),%xmm0
  0xa76cb00d: vmovsd 0x8(%esp),%xmm1
  0xa76cb013: vmovsd 0x10(%esp),%xmm2
  0xa76cb019: vmovsd 0x18(%esp),%xmm3
  0xa76cb01f: vmovsd 0x20(%esp),%xmm4
  0xa76cb025: vmovsd 0x28(%esp),%xmm5
  0xa76cb02b: vmovsd 0x30(%esp),%xmm6
  0xa76cb031: vmovsd 0x38(%esp),%xmm7
  0xa76cb037: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76cb042: je     0xa76cb059
  0xa76cb048: push   $0xb7391c83
  0xa76cb04d: call   0xa76cb052
  0xa76cb052: pusha  
  0xa76cb053: call   0xb7052f32
  0xa76cb058: hlt    
  0xa76cb059: add    $0xf0,%esp
  0xa76cb05f: popa   
  0xa76cb060: mov    %ebp,%esp
  0xa76cb062: pop    %ebp
  0xa76cb063: ret    

Decoding RuntimeStub - _zap_dead_native_locals_Java 0xa76cadc8
  ;; N1: #	B1 <- B3 B2  Freq: 1

  ;; B1: #	B3 B2 <- BLOCK HEAD IS JUNK   Freq: 1

  0xa76cae20: sub    $0x2c,%esp
  0xa76cae26: mov    %ebp,0x28(%esp)
  0xa76cae2a: vmovsd %xmm1,0x18(%esp)
  0xa76cae30: vmovsd %xmm0,0x10(%esp)
  0xa76cae36: mov    %edx,0x8(%esp)
  0xa76cae3a: mov    %ecx,0x4(%esp)
  0xa76cae3e: mov    %esp,%ecx
  0xa76cae40: shr    $0xc,%ecx
  0xa76cae43: mov    -0x486bdba0(,%ecx,4),%ecx
  0xa76cae4a: mov    %esp,0x140(%ecx)
  0xa76cae50: mov    %ecx,0xc(%esp)
  0xa76cae54: mov    %ecx,(%esp)
  0xa76cae57: call   0xb71c6a50
  0xa76cae5c: mov    0xc(%esp),%ebx
  0xa76cae60: movl   $0x0,0x140(%ebx)
  0xa76cae6a: mov    %ebx,%ecx
  0xa76cae6c: movl   $0x0,0x144(%ecx)
  0xa76cae76: mov    0x4(%ecx),%ebx
  0xa76cae79: test   %ebx,%ebx
  0xa76cae7b: jne    0xa76cae96
  ;; B2: #	N1 <- B1  Freq: 0.999999

  0xa76cae7d: mov    0x4(%esp),%ecx
  0xa76cae81: mov    0x8(%esp),%edx
  0xa76cae85: vmovsd 0x10(%esp),%xmm0
  0xa76cae8b: vmovsd 0x18(%esp),%xmm1
  0xa76cae91: add    $0x28,%esp
  0xa76cae94: pop    %ebp
  0xa76cae95: ret    
  ;; B3: #	N1 <- B1  Freq: 1e-06

  0xa76cae96: mov    $0xa75af400,%edi
  0xa76cae9b: mov    $0x0,%ebx
  0xa76caea0: mov    0x4(%esp),%ecx
  0xa76caea4: mov    0x8(%esp),%edx
  0xa76caea8: vmovsd 0x10(%esp),%xmm0
  0xa76caeae: vmovsd 0x18(%esp),%xmm1
  0xa76caeb4: add    $0x28,%esp
  0xa76caeb7: pop    %ebp
  0xa76caeb8: jmp    *%edi
  0xa76caeba: hlt    
  0xa76caebb: hlt    

Decoding RuntimeStub - monitorexit_nofpu Runtime1 stub 0xa76cac48
  0xa76cacc0: push   %ebp
  0xa76cacc1: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cacc3: pusha  
  0xa76cacc4: sub    $0xf0,%esp
  0xa76cacca: movl   $0xfeedbeef,0xec(%esp)
  0xa76cacd5: mov    0x8(%ebp),%eax
  0xa76cacd8: push   %eax
  0xa76cacd9: mov    %esp,%edi
  0xa76cacdb: shr    $0xc,%edi
  0xa76cacde: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cace5: push   %edi
  0xa76cace6: mov    %ebp,0x148(%edi)
  0xa76cacec: mov    %esp,0x140(%edi)
  0xa76cacf2: call   0xb6bb74b8
  0xa76cacf7: push   %eax
  0xa76cacf8: mov    %esp,%eax
  0xa76cacfa: shr    $0xc,%eax
  0xa76cacfd: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cad04: cmp    %eax,%edi
  0xa76cad06: je     0xa76cad22
  0xa76cad0c: call   0xb711bdac
  0xa76cad11: push   $0xb7391b5c
  0xa76cad16: call   0xa76cad1b
  0xa76cad1b: pusha  
  0xa76cad1c: call   0xb7052f32
  0xa76cad21: hlt    
  0xa76cad22: pop    %eax
  0xa76cad23: movl   $0x0,0x140(%edi)
  0xa76cad2d: movl   $0x0,0x148(%edi)
  0xa76cad37: movl   $0x0,0x144(%edi)
  0xa76cad41: add    $0x8,%esp
  0xa76cad44: cmpl   $0x0,0x4(%edi)
  0xa76cad4b: je     0xa76cad59
  0xa76cad51: mov    0x4(%edi),%eax
  0xa76cad54: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa76cad59: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76cad64: je     0xa76cad7b
  0xa76cad6a: push   $0xb7391c83
  0xa76cad6f: call   0xa76cad74
  0xa76cad74: pusha  
  0xa76cad75: call   0xb7052f32
  0xa76cad7a: hlt    
  0xa76cad7b: add    $0xf0,%esp
  0xa76cad81: popa   
  0xa76cad82: mov    %ebp,%esp
  0xa76cad84: pop    %ebp
  0xa76cad85: ret    
  0xa76cad86: nop
  0xa76cad87: nop

Decoding RuntimeStub - deoptimize Runtime1 stub 0xa76caa88
  0xa76cab00: push   %ebp
  0xa76cab01: mov    %esp,%ebp
  ;; save_live_registers
  0xa76cab03: pusha  
  0xa76cab04: sub    $0xf0,%esp
  0xa76cab0a: movl   $0xfeedbeef,0xec(%esp)
  0xa76cab15: vmovsd %xmm0,(%esp)
  0xa76cab1a: vmovsd %xmm1,0x8(%esp)
  0xa76cab20: vmovsd %xmm2,0x10(%esp)
  0xa76cab26: vmovsd %xmm3,0x18(%esp)
  0xa76cab2c: vmovsd %xmm4,0x20(%esp)
  0xa76cab32: vmovsd %xmm5,0x28(%esp)
  0xa76cab38: vmovsd %xmm6,0x30(%esp)
  0xa76cab3e: vmovsd %xmm7,0x38(%esp)
  0xa76cab44: mov    %esp,%edi
  0xa76cab46: shr    $0xc,%edi
  0xa76cab49: mov    -0x486bdba0(,%edi,4),%edi
  0xa76cab50: push   %edi
  0xa76cab51: mov    %ebp,0x148(%edi)
  0xa76cab57: mov    %esp,0x140(%edi)
  0xa76cab5d: call   0xb6bb7736
  0xa76cab62: push   %eax
  0xa76cab63: mov    %esp,%eax
  0xa76cab65: shr    $0xc,%eax
  0xa76cab68: mov    -0x486bdba0(,%eax,4),%eax
  0xa76cab6f: cmp    %eax,%edi
  0xa76cab71: je     0xa76cab8d
  0xa76cab77: call   0xb711bdac
  0xa76cab7c: push   $0xb7391b5c
  0xa76cab81: call   0xa76cab86
  0xa76cab86: pusha  
  0xa76cab87: call   0xb7052f32
  0xa76cab8c: hlt    
  0xa76cab8d: pop    %eax
  0xa76cab8e: movl   $0x0,0x140(%edi)
  0xa76cab98: movl   $0x0,0x148(%edi)
  0xa76caba2: movl   $0x0,0x144(%edi)
  0xa76cabac: add    $0x4,%esp
  0xa76cabaf: cmpl   $0x0,0x4(%edi)
  0xa76cabb6: je     0xa76cabc4
  0xa76cabbc: mov    0x4(%edi),%eax
  0xa76cabbf: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa76cabc4: vmovsd (%esp),%xmm0
  0xa76cabc9: vmovsd 0x8(%esp),%xmm1
  0xa76cabcf: vmovsd 0x10(%esp),%xmm2
  0xa76cabd5: vmovsd 0x18(%esp),%xmm3
  0xa76cabdb: vmovsd 0x20(%esp),%xmm4
  0xa76cabe1: vmovsd 0x28(%esp),%xmm5
  0xa76cabe7: vmovsd 0x30(%esp),%xmm6
  0xa76cabed: vmovsd 0x38(%esp),%xmm7
  0xa76cabf3: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76cabfe: je     0xa76cac15
  0xa76cac04: push   $0xb7391c83
  0xa76cac09: call   0xa76cac0e
  0xa76cac0e: pusha  
  0xa76cac0f: call   0xb7052f32
  0xa76cac14: hlt    
  0xa76cac15: add    $0xf0,%esp
  0xa76cac1b: popa   
  0xa76cac1c: mov    %ebp,%esp
  0xa76cac1e: pop    %ebp
  0xa76cac1f: jmp    0xa769355f
  0xa76cac24: mov    %ebp,%esp
  0xa76cac26: pop    %ebp
  0xa76cac27: ret    

Decoding RuntimeStub - access_field_patching Runtime1 stub 0xa76ca788
  0xa76ca820: push   %ebp
  0xa76ca821: mov    %esp,%ebp
  ;; save_live_registers
  0xa76ca823: pusha  
  0xa76ca824: sub    $0xf0,%esp
  0xa76ca82a: movl   $0xfeedbeef,0xec(%esp)
  0xa76ca835: vmovsd %xmm0,(%esp)
  0xa76ca83a: vmovsd %xmm1,0x8(%esp)
  0xa76ca840: vmovsd %xmm2,0x10(%esp)
  0xa76ca846: vmovsd %xmm3,0x18(%esp)
  0xa76ca84c: vmovsd %xmm4,0x20(%esp)
  0xa76ca852: vmovsd %xmm5,0x28(%esp)
  0xa76ca858: vmovsd %xmm6,0x30(%esp)
  0xa76ca85e: vmovsd %xmm7,0x38(%esp)
  0xa76ca864: push   %eax
  0xa76ca865: mov    %esp,%edi
  0xa76ca867: shr    $0xc,%edi
  0xa76ca86a: mov    -0x486bdba0(,%edi,4),%edi
  0xa76ca871: push   %edi
  0xa76ca872: mov    %ebp,0x148(%edi)
  0xa76ca878: mov    %esp,0x140(%edi)
  0xa76ca87e: call   0xb6bb976a
  0xa76ca883: push   %eax
  0xa76ca884: mov    %esp,%eax
  0xa76ca886: shr    $0xc,%eax
  0xa76ca889: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ca890: cmp    %eax,%edi
  0xa76ca892: je     0xa76ca8a9
  0xa76ca898: push   $0xb7391d90
  0xa76ca89d: call   0xa76ca8a2
  0xa76ca8a2: pusha  
  0xa76ca8a3: call   0xb7052f32
  0xa76ca8a8: hlt    
  0xa76ca8a9: pop    %eax
  0xa76ca8aa: movl   $0x0,0x140(%edi)
  0xa76ca8b4: movl   $0x0,0x148(%edi)
  0xa76ca8be: movl   $0x0,0x144(%edi)
  0xa76ca8c8: pop    %ecx
  0xa76ca8c9: pop    %ecx
  0xa76ca8ca: cmpl   $0x0,0x4(%edi)
  0xa76ca8d1: je     0xa76ca9a1
  0xa76ca8d7: test   %eax,%eax
  0xa76ca8d9: je     0xa76cbce0
  0xa76ca8df: mov    0x4(%edi),%eax
  0xa76ca8e2: movl   $0x0,0x4(%edi)
  0xa76ca8e9: mov    0x114(%esp),%edx
  0xa76ca8f0: cmpl   $0x0,0x1b4(%edi)
  0xa76ca8fa: je     0xa76ca911
  0xa76ca900: push   $0xb7391d07
  0xa76ca905: call   0xa76ca90a
  0xa76ca90a: pusha  
  0xa76ca90b: call   0xb7052f32
  0xa76ca910: hlt    
  0xa76ca911: cmpl   $0x0,0x1b8(%edi)
  0xa76ca91b: je     0xa76ca932
  0xa76ca921: push   $0xb7391d23
  0xa76ca926: call   0xa76ca92b
  0xa76ca92b: pusha  
  0xa76ca92c: call   0xb7052f32
  0xa76ca931: hlt    
  0xa76ca932: mov    %eax,0x1b4(%edi)
  0xa76ca938: mov    %edx,0x1b8(%edi)
  ;; restore_live_registers
  0xa76ca93e: vmovsd (%esp),%xmm0
  0xa76ca943: vmovsd 0x8(%esp),%xmm1
  0xa76ca949: vmovsd 0x10(%esp),%xmm2
  0xa76ca94f: vmovsd 0x18(%esp),%xmm3
  0xa76ca955: vmovsd 0x20(%esp),%xmm4
  0xa76ca95b: vmovsd 0x28(%esp),%xmm5
  0xa76ca961: vmovsd 0x30(%esp),%xmm6
  0xa76ca967: vmovsd 0x38(%esp),%xmm7
  0xa76ca96d: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76ca978: je     0xa76ca98f
  0xa76ca97e: push   $0xb7391c83
  0xa76ca983: call   0xa76ca988
  0xa76ca988: pusha  
  0xa76ca989: call   0xb7052f32
  0xa76ca98e: hlt    
  0xa76ca98f: add    $0xf0,%esp
  0xa76ca995: popa   
  0xa76ca996: mov    %ebp,%esp
  0xa76ca998: pop    %ebp
  0xa76ca999: add    $0x4,%esp
  0xa76ca99c: jmp    0xa7693616
  0xa76ca9a1: test   %eax,%eax
  0xa76ca9a3: je     0xa76caa09
  ;; restore_live_registers
  0xa76ca9a9: vmovsd (%esp),%xmm0
  0xa76ca9ae: vmovsd 0x8(%esp),%xmm1
  0xa76ca9b4: vmovsd 0x10(%esp),%xmm2
  0xa76ca9ba: vmovsd 0x18(%esp),%xmm3
  0xa76ca9c0: vmovsd 0x20(%esp),%xmm4
  0xa76ca9c6: vmovsd 0x28(%esp),%xmm5
  0xa76ca9cc: vmovsd 0x30(%esp),%xmm6
  0xa76ca9d2: vmovsd 0x38(%esp),%xmm7
  0xa76ca9d8: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76ca9e3: je     0xa76ca9fa
  0xa76ca9e9: push   $0xb7391c83
  0xa76ca9ee: call   0xa76ca9f3
  0xa76ca9f3: pusha  
  0xa76ca9f4: call   0xb7052f32
  0xa76ca9f9: hlt    
  0xa76ca9fa: add    $0xf0,%esp
  0xa76caa00: popa   
  0xa76caa01: mov    %ebp,%esp
  0xa76caa03: pop    %ebp
  0xa76caa04: jmp    0xa769355f
  ;; restore_live_registers
  0xa76caa09: vmovsd (%esp),%xmm0
  0xa76caa0e: vmovsd 0x8(%esp),%xmm1
  0xa76caa14: vmovsd 0x10(%esp),%xmm2
  0xa76caa1a: vmovsd 0x18(%esp),%xmm3
  0xa76caa20: vmovsd 0x20(%esp),%xmm4
  0xa76caa26: vmovsd 0x28(%esp),%xmm5
  0xa76caa2c: vmovsd 0x30(%esp),%xmm6
  0xa76caa32: vmovsd 0x38(%esp),%xmm7
  0xa76caa38: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76caa43: je     0xa76caa5a
  0xa76caa49: push   $0xb7391c83
  0xa76caa4e: call   0xa76caa53
  0xa76caa53: pusha  
  0xa76caa54: call   0xb7052f32
  0xa76caa59: hlt    
  0xa76caa5a: add    $0xf0,%esp
  0xa76caa60: popa   
  0xa76caa61: mov    %ebp,%esp
  0xa76caa63: pop    %ebp
  0xa76caa64: ret    
  0xa76caa65: mov    %ebp,%esp
  0xa76caa67: pop    %ebp
  0xa76caa68: ret    
  0xa76caa69: nop
  0xa76caa6a: nop
  0xa76caa6b: nop

Decoding RuntimeStub - load_klass_patching Runtime1 stub 0xa76ca488
  0xa76ca520: push   %ebp
  0xa76ca521: mov    %esp,%ebp
  ;; save_live_registers
  0xa76ca523: pusha  
  0xa76ca524: sub    $0xf0,%esp
  0xa76ca52a: movl   $0xfeedbeef,0xec(%esp)
  0xa76ca535: vmovsd %xmm0,(%esp)
  0xa76ca53a: vmovsd %xmm1,0x8(%esp)
  0xa76ca540: vmovsd %xmm2,0x10(%esp)
  0xa76ca546: vmovsd %xmm3,0x18(%esp)
  0xa76ca54c: vmovsd %xmm4,0x20(%esp)
  0xa76ca552: vmovsd %xmm5,0x28(%esp)
  0xa76ca558: vmovsd %xmm6,0x30(%esp)
  0xa76ca55e: vmovsd %xmm7,0x38(%esp)
  0xa76ca564: push   %eax
  0xa76ca565: mov    %esp,%edi
  0xa76ca567: shr    $0xc,%edi
  0xa76ca56a: mov    -0x486bdba0(,%edi,4),%edi
  0xa76ca571: push   %edi
  0xa76ca572: mov    %ebp,0x148(%edi)
  0xa76ca578: mov    %esp,0x140(%edi)
  0xa76ca57e: call   0xb6bb95f6
  0xa76ca583: push   %eax
  0xa76ca584: mov    %esp,%eax
  0xa76ca586: shr    $0xc,%eax
  0xa76ca589: mov    -0x486bdba0(,%eax,4),%eax
  0xa76ca590: cmp    %eax,%edi
  0xa76ca592: je     0xa76ca5a9
  0xa76ca598: push   $0xb7391d90
  0xa76ca59d: call   0xa76ca5a2
  0xa76ca5a2: pusha  
  0xa76ca5a3: call   0xb7052f32
  0xa76ca5a8: hlt    
  0xa76ca5a9: pop    %eax
  0xa76ca5aa: movl   $0x0,0x140(%edi)
  0xa76ca5b4: movl   $0x0,0x148(%edi)
  0xa76ca5be: movl   $0x0,0x144(%edi)
  0xa76ca5c8: pop    %ecx
  0xa76ca5c9: pop    %ecx
  0xa76ca5ca: cmpl   $0x0,0x4(%edi)
  0xa76ca5d1: je     0xa76ca6a1
  0xa76ca5d7: test   %eax,%eax
  0xa76ca5d9: je     0xa76cbce0
  0xa76ca5df: mov    0x4(%edi),%eax
  0xa76ca5e2: movl   $0x0,0x4(%edi)
  0xa76ca5e9: mov    0x114(%esp),%edx
  0xa76ca5f0: cmpl   $0x0,0x1b4(%edi)
  0xa76ca5fa: je     0xa76ca611
  0xa76ca600: push   $0xb7391d07
  0xa76ca605: call   0xa76ca60a
  0xa76ca60a: pusha  
  0xa76ca60b: call   0xb7052f32
  0xa76ca610: hlt    
  0xa76ca611: cmpl   $0x0,0x1b8(%edi)
  0xa76ca61b: je     0xa76ca632
  0xa76ca621: push   $0xb7391d23
  0xa76ca626: call   0xa76ca62b
  0xa76ca62b: pusha  
  0xa76ca62c: call   0xb7052f32
  0xa76ca631: hlt    
  0xa76ca632: mov    %eax,0x1b4(%edi)
  0xa76ca638: mov    %edx,0x1b8(%edi)
  ;; restore_live_registers
  0xa76ca63e: vmovsd (%esp),%xmm0
  0xa76ca643: vmovsd 0x8(%esp),%xmm1
  0xa76ca649: vmovsd 0x10(%esp),%xmm2
  0xa76ca64f: vmovsd 0x18(%esp),%xmm3
  0xa76ca655: vmovsd 0x20(%esp),%xmm4
  0xa76ca65b: vmovsd 0x28(%esp),%xmm5
  0xa76ca661: vmovsd 0x30(%esp),%xmm6
  0xa76ca667: vmovsd 0x38(%esp),%xmm7
  0xa76ca66d: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76ca678: je     0xa76ca68f
  0xa76ca67e: push   $0xb7391c83
  0xa76ca683: call   0xa76ca688
  0xa76ca688: pusha  
  0xa76ca689: call   0xb7052f32
  0xa76ca68e: hlt    
  0xa76ca68f: add    $0xf0,%esp
  0xa76ca695: popa   
  0xa76ca696: mov    %ebp,%esp
  0xa76ca698: pop    %ebp
  0xa76ca699: add    $0x4,%esp
  0xa76ca69c: jmp    0xa7693616
  0xa76ca6a1: test   %eax,%eax
  0xa76ca6a3: je     0xa76ca709
  ;; restore_live_registers
  0xa76ca6a9: vmovsd (%esp),%xmm0
  0xa76ca6ae: vmovsd 0x8(%esp),%xmm1
  0xa76ca6b4: vmovsd 0x10(%esp),%xmm2
  0xa76ca6ba: vmovsd 0x18(%esp),%xmm3
  0xa76ca6c0: vmovsd 0x20(%esp),%xmm4
  0xa76ca6c6: vmovsd 0x28(%esp),%xmm5
  0xa76ca6cc: vmovsd 0x30(%esp),%xmm6
  0xa76ca6d2: vmovsd 0x38(%esp),%xmm7
  0xa76ca6d8: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76ca6e3: je     0xa76ca6fa
  0xa76ca6e9: push   $0xb7391c83
  0xa76ca6ee: call   0xa76ca6f3
  0xa76ca6f3: pusha  
  0xa76ca6f4: call   0xb7052f32
  0xa76ca6f9: hlt    
  0xa76ca6fa: add    $0xf0,%esp
  0xa76ca700: popa   
  0xa76ca701: mov    %ebp,%esp
  0xa76ca703: pop    %ebp
  0xa76ca704: jmp    0xa769355f
  ;; restore_live_registers
  0xa76ca709: vmovsd (%esp),%xmm0
  0xa76ca70e: vmovsd 0x8(%esp),%xmm1
  0xa76ca714: vmovsd 0x10(%esp),%xmm2
  0xa76ca71a: vmovsd 0x18(%esp),%xmm3
  0xa76ca720: vmovsd 0x20(%esp),%xmm4
  0xa76ca726: vmovsd 0x28(%esp),%xmm5
  0xa76ca72c: vmovsd 0x30(%esp),%xmm6
  0xa76ca732: vmovsd 0x38(%esp),%xmm7
  0xa76ca738: cmpl   $0xfeedbeef,0xec(%esp)
  0xa76ca743: je     0xa76ca75a
  0xa76ca749: push   $0xb7391c83
  0xa76ca74e: call   0xa76ca753
  0xa76ca753: pusha  
  0xa76ca754: call   0xb7052f32
  0xa76ca759: hlt    
  0xa76ca75a: add    $0xf0,%esp
  0xa76ca760: popa   
  0xa76ca761: mov    %ebp,%esp
  0xa76ca763: pop    %ebp
  0xa76ca764: ret    
  0xa76ca765: mov    %ebp,%esp
  0xa76ca767: pop    %ebp
  0xa76ca768: ret    
  0xa76ca769: nop
  0xa76ca76a: nop
  0xa76ca76b: nop

Decoding RuntimeStub - load_mirror_patching Runtime1 stub 0xa7713e48
  0xa7713ee0: push   %ebp
  0xa7713ee1: mov    %esp,%ebp
  ;; save_live_registers
  0xa7713ee3: pusha  
  0xa7713ee4: sub    $0xf0,%esp
  0xa7713eea: movl   $0xfeedbeef,0xec(%esp)
  0xa7713ef5: vmovsd %xmm0,(%esp)
  0xa7713efa: vmovsd %xmm1,0x8(%esp)
  0xa7713f00: vmovsd %xmm2,0x10(%esp)
  0xa7713f06: vmovsd %xmm3,0x18(%esp)
  0xa7713f0c: vmovsd %xmm4,0x20(%esp)
  0xa7713f12: vmovsd %xmm5,0x28(%esp)
  0xa7713f18: vmovsd %xmm6,0x30(%esp)
  0xa7713f1e: vmovsd %xmm7,0x38(%esp)
  0xa7713f24: push   %eax
  0xa7713f25: mov    %esp,%edi
  0xa7713f27: shr    $0xc,%edi
  0xa7713f2a: mov    -0x486bdba0(,%edi,4),%edi
  0xa7713f31: push   %edi
  0xa7713f32: mov    %ebp,0x148(%edi)
  0xa7713f38: mov    %esp,0x140(%edi)
  0xa7713f3e: call   0xb6bb9672
  0xa7713f43: push   %eax
  0xa7713f44: mov    %esp,%eax
  0xa7713f46: shr    $0xc,%eax
  0xa7713f49: mov    -0x486bdba0(,%eax,4),%eax
  0xa7713f50: cmp    %eax,%edi
  0xa7713f52: je     0xa7713f69
  0xa7713f58: push   $0xb7391d90
  0xa7713f5d: call   0xa7713f62
  0xa7713f62: pusha  
  0xa7713f63: call   0xb7052f32
  0xa7713f68: hlt    
  0xa7713f69: pop    %eax
  0xa7713f6a: movl   $0x0,0x140(%edi)
  0xa7713f74: movl   $0x0,0x148(%edi)
  0xa7713f7e: movl   $0x0,0x144(%edi)
  0xa7713f88: pop    %ecx
  0xa7713f89: pop    %ecx
  0xa7713f8a: cmpl   $0x0,0x4(%edi)
  0xa7713f91: je     0xa7714061
  0xa7713f97: test   %eax,%eax
  0xa7713f99: je     0xa76cbce0
  0xa7713f9f: mov    0x4(%edi),%eax
  0xa7713fa2: movl   $0x0,0x4(%edi)
  0xa7713fa9: mov    0x114(%esp),%edx
  0xa7713fb0: cmpl   $0x0,0x1b4(%edi)
  0xa7713fba: je     0xa7713fd1
  0xa7713fc0: push   $0xb7391d07
  0xa7713fc5: call   0xa7713fca
  0xa7713fca: pusha  
  0xa7713fcb: call   0xb7052f32
  0xa7713fd0: hlt    
  0xa7713fd1: cmpl   $0x0,0x1b8(%edi)
  0xa7713fdb: je     0xa7713ff2
  0xa7713fe1: push   $0xb7391d23
  0xa7713fe6: call   0xa7713feb
  0xa7713feb: pusha  
  0xa7713fec: call   0xb7052f32
  0xa7713ff1: hlt    
  0xa7713ff2: mov    %eax,0x1b4(%edi)
  0xa7713ff8: mov    %edx,0x1b8(%edi)
  ;; restore_live_registers
  0xa7713ffe: vmovsd (%esp),%xmm0
  0xa7714003: vmovsd 0x8(%esp),%xmm1
  0xa7714009: vmovsd 0x10(%esp),%xmm2
  0xa771400f: vmovsd 0x18(%esp),%xmm3
  0xa7714015: vmovsd 0x20(%esp),%xmm4
  0xa771401b: vmovsd 0x28(%esp),%xmm5
  0xa7714021: vmovsd 0x30(%esp),%xmm6
  0xa7714027: vmovsd 0x38(%esp),%xmm7
  0xa771402d: cmpl   $0xfeedbeef,0xec(%esp)
  0xa7714038: je     0xa771404f
  0xa771403e: push   $0xb7391c83
  0xa7714043: call   0xa7714048
  0xa7714048: pusha  
  0xa7714049: call   0xb7052f32
  0xa771404e: hlt    
  0xa771404f: add    $0xf0,%esp
  0xa7714055: popa   
  0xa7714056: mov    %ebp,%esp
  0xa7714058: pop    %ebp
  0xa7714059: add    $0x4,%esp
  0xa771405c: jmp    0xa7693616
  0xa7714061: test   %eax,%eax
  0xa7714063: je     0xa77140c9
  ;; restore_live_registers
  0xa7714069: vmovsd (%esp),%xmm0
  0xa771406e: vmovsd 0x8(%esp),%xmm1
  0xa7714074: vmovsd 0x10(%esp),%xmm2
  0xa771407a: vmovsd 0x18(%esp),%xmm3
  0xa7714080: vmovsd 0x20(%esp),%xmm4
  0xa7714086: vmovsd 0x28(%esp),%xmm5
  0xa771408c: vmovsd 0x30(%esp),%xmm6
  0xa7714092: vmovsd 0x38(%esp),%xmm7
  0xa7714098: cmpl   $0xfeedbeef,0xec(%esp)
  0xa77140a3: je     0xa77140ba
  0xa77140a9: push   $0xb7391c83
  0xa77140ae: call   0xa77140b3
  0xa77140b3: pusha  
  0xa77140b4: call   0xb7052f32
  0xa77140b9: hlt    
  0xa77140ba: add    $0xf0,%esp
  0xa77140c0: popa   
  0xa77140c1: mov    %ebp,%esp
  0xa77140c3: pop    %ebp
  0xa77140c4: jmp    0xa769355f
  ;; restore_live_registers
  0xa77140c9: vmovsd (%esp),%xmm0
  0xa77140ce: vmovsd 0x8(%esp),%xmm1
  0xa77140d4: vmovsd 0x10(%esp),%xmm2
  0xa77140da: vmovsd 0x18(%esp),%xmm3
  0xa77140e0: vmovsd 0x20(%esp),%xmm4
  0xa77140e6: vmovsd 0x28(%esp),%xmm5
  0xa77140ec: vmovsd 0x30(%esp),%xmm6
  0xa77140f2: vmovsd 0x38(%esp),%xmm7
  0xa77140f8: cmpl   $0xfeedbeef,0xec(%esp)
  0xa7714103: je     0xa771411a
  0xa7714109: push   $0xb7391c83
  0xa771410e: call   0xa7714113
  0xa7714113: pusha  
  0xa7714114: call   0xb7052f32
  0xa7714119: hlt    
  0xa771411a: add    $0xf0,%esp
  0xa7714120: popa   
  0xa7714121: mov    %ebp,%esp
  0xa7714123: pop    %ebp
  0xa7714124: ret    
  0xa7714125: mov    %ebp,%esp
  0xa7714127: pop    %ebp
  0xa7714128: ret    
  0xa7714129: nop
  0xa771412a: nop
  0xa771412b: nop

AHE@0xb6690c70: 0xbebebea0 i2c: 0xa7713cc0 c2i: 0xa7713d94 c2iUV: 0xa7713d73
i2c argument handler #58 for: static (JJJZ)V (333 bytes generated)
c2i argument handler starts at 0xa7713d94
  0xa7713cc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7713cc3: mov    $0xa75b1ac0,%edi
  0xa7713cc8: cmp    %edi,%eax
  0xa7713cca: jbe    0xa7713cdd
  0xa7713cd0: mov    $0xa7691ac0,%edi
  0xa7713cd5: cmp    %edi,%eax
  0xa7713cd7: jb     0xa7713d22
  0xa7713cdd: mov    $0xa75af400,%edi
  0xa7713ce2: cmp    %edi,%eax
  0xa7713ce4: jbe    0xa7713cf7
  0xa7713cea: mov    $0xa75b1728,%edi
  0xa7713cef: cmp    %edi,%eax
  0xa7713cf1: jb     0xa7713d22
  0xa7713cf7: mov    $0xa76b4e40,%edi
  0xa7713cfc: cmp    %edi,%eax
  0xa7713cfe: jbe    0xa7713d11
  0xa7713d04: mov    $0xa76ba430,%edi
  0xa7713d09: cmp    %edi,%eax
  0xa7713d0b: jb     0xa7713d22
  ;; i2c adapter must return to an interpreter frame
  0xa7713d11: push   $0xb75a2830
  0xa7713d16: call   0xa7713d1b
  0xa7713d1b: pusha  
  0xa7713d1c: call   0xb7052f32
  0xa7713d21: hlt    
  ;; } verify_i2ce 
  0xa7713d22: mov    %esp,%edi
  0xa7713d24: sub    $0x18,%esp
  0xa7713d27: and    $0xfffffff0,%esp
  0xa7713d2a: push   %eax
  0xa7713d2b: mov    %edi,%eax
  0xa7713d2d: mov    0x30(%ebx),%edi
  0xa7713d30: mov    0x18(%eax),%esi
  0xa7713d33: mov    %esi,0x4(%esp)
  0xa7713d37: mov    0x1c(%eax),%esi
  0xa7713d3a: mov    %esi,0x8(%esp)
  0xa7713d3e: mov    0x10(%eax),%esi
  0xa7713d41: mov    %esi,0xc(%esp)
  0xa7713d45: mov    0x14(%eax),%esi
  0xa7713d48: mov    %esi,0x10(%esp)
  0xa7713d4c: mov    0x8(%eax),%esi
  0xa7713d4f: mov    %esi,0x14(%esp)
  0xa7713d53: mov    0xc(%eax),%esi
  0xa7713d56: mov    %esi,0x18(%esp)
  0xa7713d5a: mov    0x4(%eax),%ecx
  0xa7713d5d: mov    %esp,%eax
  0xa7713d5f: shr    $0xc,%eax
  0xa7713d62: mov    -0x486bdba0(,%eax,4),%eax
  0xa7713d69: mov    %ebx,0x16c(%eax)
  0xa7713d6f: mov    %ebx,%eax
  0xa7713d71: jmp    *%edi
  0xa7713d73: mov    0x4(%ecx),%ebx
  0xa7713d76: cmp    0x8(%eax),%ebx
  0xa7713d79: mov    0x4(%eax),%ebx
  0xa7713d7c: jne    0xa7713d8f
  0xa7713d82: cmpl   $0x0,0x34(%ebx)
  0xa7713d89: je     0xa7713dce
  0xa7713d8f: jmp    0xa7692560
  0xa7713d94: cmpl   $0x0,0x34(%ebx)
  0xa7713d9b: je     0xa7713dce
  0xa7713da1: mov    (%esp),%eax
  0xa7713da4: pusha  
  0xa7713da5: pushf  
  0xa7713da6: sub    $0x10,%esp
  0xa7713da9: vmovsd %xmm0,(%esp)
  0xa7713dae: vmovsd %xmm1,0x8(%esp)
  0xa7713db4: push   %eax
  0xa7713db5: push   %ebx
  0xa7713db6: call   0xb71d62fc
  0xa7713dbb: add    $0x8,%esp
  0xa7713dbe: vmovsd (%esp),%xmm0
  0xa7713dc3: vmovsd 0x8(%esp),%xmm1
  0xa7713dc9: add    $0x10,%esp
  0xa7713dcc: popf   
  0xa7713dcd: popa   
  0xa7713dce: pop    %eax
  0xa7713dcf: mov    %esp,%esi
  0xa7713dd1: sub    $0x1c,%esp
  0xa7713dd4: mov    0x1c(%esp),%edi
  0xa7713dd8: mov    %edi,0x14(%esp)
  0xa7713ddc: mov    0x20(%esp),%edi
  0xa7713de0: mov    %edi,0x18(%esp)
  0xa7713de4: mov    0x24(%esp),%edi
  0xa7713de8: mov    %edi,0xc(%esp)
  0xa7713dec: mov    0x28(%esp),%edi
  0xa7713df0: mov    %edi,0x10(%esp)
  0xa7713df4: mov    0x2c(%esp),%edi
  0xa7713df8: mov    %edi,0x4(%esp)
  0xa7713dfc: mov    0x30(%esp),%edi
  0xa7713e00: mov    %edi,0x8(%esp)
  0xa7713e04: mov    %ecx,(%esp)
  0xa7713e07: mov    0x28(%ebx),%ecx
  0xa7713e0a: push   %eax
  0xa7713e0b: jmp    *%ecx

Decoding RuntimeStub - load_appendix_patching Runtime1 stub 0xa7713948
  0xa77139e0: push   %ebp
  0xa77139e1: mov    %esp,%ebp
  ;; save_live_registers
  0xa77139e3: pusha  
  0xa77139e4: sub    $0xf0,%esp
  0xa77139ea: movl   $0xfeedbeef,0xec(%esp)
  0xa77139f5: vmovsd %xmm0,(%esp)
  0xa77139fa: vmovsd %xmm1,0x8(%esp)
  0xa7713a00: vmovsd %xmm2,0x10(%esp)
  0xa7713a06: vmovsd %xmm3,0x18(%esp)
  0xa7713a0c: vmovsd %xmm4,0x20(%esp)
  0xa7713a12: vmovsd %xmm5,0x28(%esp)
  0xa7713a18: vmovsd %xmm6,0x30(%esp)
  0xa7713a1e: vmovsd %xmm7,0x38(%esp)
  0xa7713a24: push   %eax
  0xa7713a25: mov    %esp,%edi
  0xa7713a27: shr    $0xc,%edi
  0xa7713a2a: mov    -0x486bdba0(,%edi,4),%edi
  0xa7713a31: push   %edi
  0xa7713a32: mov    %ebp,0x148(%edi)
  0xa7713a38: mov    %esp,0x140(%edi)
  0xa7713a3e: call   0xb6bb96ee
  0xa7713a43: push   %eax
  0xa7713a44: mov    %esp,%eax
  0xa7713a46: shr    $0xc,%eax
  0xa7713a49: mov    -0x486bdba0(,%eax,4),%eax
  0xa7713a50: cmp    %eax,%edi
  0xa7713a52: je     0xa7713a69
  0xa7713a58: push   $0xb7391d90
  0xa7713a5d: call   0xa7713a62
  0xa7713a62: pusha  
  0xa7713a63: call   0xb7052f32
  0xa7713a68: hlt    
  0xa7713a69: pop    %eax
  0xa7713a6a: movl   $0x0,0x140(%edi)
  0xa7713a74: movl   $0x0,0x148(%edi)
  0xa7713a7e: movl   $0x0,0x144(%edi)
  0xa7713a88: pop    %ecx
  0xa7713a89: pop    %ecx
  0xa7713a8a: cmpl   $0x0,0x4(%edi)
  0xa7713a91: je     0xa7713b61
  0xa7713a97: test   %eax,%eax
  0xa7713a99: je     0xa76cbce0
  0xa7713a9f: mov    0x4(%edi),%eax
  0xa7713aa2: movl   $0x0,0x4(%edi)
  0xa7713aa9: mov    0x114(%esp),%edx
  0xa7713ab0: cmpl   $0x0,0x1b4(%edi)
  0xa7713aba: je     0xa7713ad1
  0xa7713ac0: push   $0xb7391d07
  0xa7713ac5: call   0xa7713aca
  0xa7713aca: pusha  
  0xa7713acb: call   0xb7052f32
  0xa7713ad0: hlt    
  0xa7713ad1: cmpl   $0x0,0x1b8(%edi)
  0xa7713adb: je     0xa7713af2
  0xa7713ae1: push   $0xb7391d23
  0xa7713ae6: call   0xa7713aeb
  0xa7713aeb: pusha  
  0xa7713aec: call   0xb7052f32
  0xa7713af1: hlt    
  0xa7713af2: mov    %eax,0x1b4(%edi)
  0xa7713af8: mov    %edx,0x1b8(%edi)
  ;; restore_live_registers
  0xa7713afe: vmovsd (%esp),%xmm0
  0xa7713b03: vmovsd 0x8(%esp),%xmm1
  0xa7713b09: vmovsd 0x10(%esp),%xmm2
  0xa7713b0f: vmovsd 0x18(%esp),%xmm3
  0xa7713b15: vmovsd 0x20(%esp),%xmm4
  0xa7713b1b: vmovsd 0x28(%esp),%xmm5
  0xa7713b21: vmovsd 0x30(%esp),%xmm6
  0xa7713b27: vmovsd 0x38(%esp),%xmm7
  0xa7713b2d: cmpl   $0xfeedbeef,0xec(%esp)
  0xa7713b38: je     0xa7713b4f
  0xa7713b3e: push   $0xb7391c83
  0xa7713b43: call   0xa7713b48
  0xa7713b48: pusha  
  0xa7713b49: call   0xb7052f32
  0xa7713b4e: hlt    
  0xa7713b4f: add    $0xf0,%esp
  0xa7713b55: popa   
  0xa7713b56: mov    %ebp,%esp
  0xa7713b58: pop    %ebp
  0xa7713b59: add    $0x4,%esp
  0xa7713b5c: jmp    0xa7693616
  0xa7713b61: test   %eax,%eax
  0xa7713b63: je     0xa7713bc9
  ;; restore_live_registers
  0xa7713b69: vmovsd (%esp),%xmm0
  0xa7713b6e: vmovsd 0x8(%esp),%xmm1
  0xa7713b74: vmovsd 0x10(%esp),%xmm2
  0xa7713b7a: vmovsd 0x18(%esp),%xmm3
  0xa7713b80: vmovsd 0x20(%esp),%xmm4
  0xa7713b86: vmovsd 0x28(%esp),%xmm5
  0xa7713b8c: vmovsd 0x30(%esp),%xmm6
  0xa7713b92: vmovsd 0x38(%esp),%xmm7
  0xa7713b98: cmpl   $0xfeedbeef,0xec(%esp)
  0xa7713ba3: je     0xa7713bba
  0xa7713ba9: push   $0xb7391c83
  0xa7713bae: call   0xa7713bb3
  0xa7713bb3: pusha  
  0xa7713bb4: call   0xb7052f32
  0xa7713bb9: hlt    
  0xa7713bba: add    $0xf0,%esp
  0xa7713bc0: popa   
  0xa7713bc1: mov    %ebp,%esp
  0xa7713bc3: pop    %ebp
  0xa7713bc4: jmp    0xa769355f
  ;; restore_live_registers
  0xa7713bc9: vmovsd (%esp),%xmm0
  0xa7713bce: vmovsd 0x8(%esp),%xmm1
  0xa7713bd4: vmovsd 0x10(%esp),%xmm2
  0xa7713bda: vmovsd 0x18(%esp),%xmm3
  0xa7713be0: vmovsd 0x20(%esp),%xmm4
  0xa7713be6: vmovsd 0x28(%esp),%xmm5
  0xa7713bec: vmovsd 0x30(%esp),%xmm6
  0xa7713bf2: vmovsd 0x38(%esp),%xmm7
  0xa7713bf8: cmpl   $0xfeedbeef,0xec(%esp)
  0xa7713c03: je     0xa7713c1a
  0xa7713c09: push   $0xb7391c83
  0xa7713c0e: call   0xa7713c13
  0xa7713c13: pusha  
  0xa7713c14: call   0xb7052f32
  0xa7713c19: hlt    
  0xa7713c1a: add    $0xf0,%esp
  0xa7713c20: popa   
  0xa7713c21: mov    %ebp,%esp
  0xa7713c23: pop    %ebp
  0xa7713c24: ret    
  0xa7713c25: mov    %ebp,%esp
  0xa7713c27: pop    %ebp
  0xa7713c28: ret    
  0xa7713c29: nop
  0xa7713c2a: nop
  0xa7713c2b: nop

AHE@0x63406840: 0xaabebebea0000000 i2c: 0xa77137c0 c2i: 0xa771389e c2iUV: 0xa771387d
i2c argument handler #59 for: static (ZLjava/lang/String;JJJZ)V (355 bytes generated)
c2i argument handler starts at 0xa771389e
  0xa77137c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa77137c3: mov    $0xa75b1ac0,%edi
  0xa77137c8: cmp    %edi,%eax
  0xa77137ca: jbe    0xa77137dd
  0xa77137d0: mov    $0xa7691ac0,%edi
  0xa77137d5: cmp    %edi,%eax
  0xa77137d7: jb     0xa7713822
  0xa77137dd: mov    $0xa75af400,%edi
  0xa77137e2: cmp    %edi,%eax
  0xa77137e4: jbe    0xa77137f7
  0xa77137ea: mov    $0xa75b1728,%edi
  0xa77137ef: cmp    %edi,%eax
  0xa77137f1: jb     0xa7713822
  0xa77137f7: mov    $0xa76b4e40,%edi
  0xa77137fc: cmp    %edi,%eax
  0xa77137fe: jbe    0xa7713811
  0xa7713804: mov    $0xa76ba430,%edi
  0xa7713809: cmp    %edi,%eax
  0xa771380b: jb     0xa7713822
  ;; i2c adapter must return to an interpreter frame
  0xa7713811: push   $0xb75a2830
  0xa7713816: call   0xa771381b
  0xa771381b: pusha  
  0xa771381c: call   0xb7052f32
  0xa7713821: hlt    
  ;; } verify_i2ce 
  0xa7713822: mov    %esp,%edi
  0xa7713824: sub    $0x20,%esp
  0xa7713827: and    $0xfffffff0,%esp
  0xa771382a: push   %eax
  0xa771382b: mov    %edi,%eax
  0xa771382d: mov    0x30(%ebx),%edi
  0xa7713830: mov    0x24(%eax),%ecx
  0xa7713833: mov    0x20(%eax),%edx
  0xa7713836: mov    0x18(%eax),%esi
  0xa7713839: mov    %esi,0x4(%esp)
  0xa771383d: mov    0x1c(%eax),%esi
  0xa7713840: mov    %esi,0x8(%esp)
  0xa7713844: mov    0x10(%eax),%esi
  0xa7713847: mov    %esi,0xc(%esp)
  0xa771384b: mov    0x14(%eax),%esi
  0xa771384e: mov    %esi,0x10(%esp)
  0xa7713852: mov    0x8(%eax),%esi
  0xa7713855: mov    %esi,0x14(%esp)
  0xa7713859: mov    0xc(%eax),%esi
  0xa771385c: mov    %esi,0x18(%esp)
  0xa7713860: mov    0x4(%eax),%esi
  0xa7713863: mov    %esi,0x1c(%esp)
  0xa7713867: mov    %esp,%eax
  0xa7713869: shr    $0xc,%eax
  0xa771386c: mov    -0x486bdba0(,%eax,4),%eax
  0xa7713873: mov    %ebx,0x16c(%eax)
  0xa7713879: mov    %ebx,%eax
  0xa771387b: jmp    *%edi
  0xa771387d: mov    0x4(%ecx),%ebx
  0xa7713880: cmp    0x8(%eax),%ebx
  0xa7713883: mov    0x4(%eax),%ebx
  0xa7713886: jne    0xa7713899
  0xa771388c: cmpl   $0x0,0x34(%ebx)
  0xa7713893: je     0xa77138d8
  0xa7713899: jmp    0xa7692560
  0xa771389e: cmpl   $0x0,0x34(%ebx)
  0xa77138a5: je     0xa77138d8
  0xa77138ab: mov    (%esp),%eax
  0xa77138ae: pusha  
  0xa77138af: pushf  
  0xa77138b0: sub    $0x10,%esp
  0xa77138b3: vmovsd %xmm0,(%esp)
  0xa77138b8: vmovsd %xmm1,0x8(%esp)
  0xa77138be: push   %eax
  0xa77138bf: push   %ebx
  0xa77138c0: call   0xb71d62fc
  0xa77138c5: add    $0x8,%esp
  0xa77138c8: vmovsd (%esp),%xmm0
  0xa77138cd: vmovsd 0x8(%esp),%xmm1
  0xa77138d3: add    $0x10,%esp
  0xa77138d6: popf   
  0xa77138d7: popa   
  0xa77138d8: pop    %eax
  0xa77138d9: mov    %esp,%esi
  0xa77138db: sub    $0x24,%esp
  0xa77138de: mov    %ecx,0x20(%esp)
  0xa77138e2: mov    %edx,0x1c(%esp)
  0xa77138e6: mov    0x24(%esp),%edi
  0xa77138ea: mov    %edi,0x14(%esp)
  0xa77138ee: mov    0x28(%esp),%edi
  0xa77138f2: mov    %edi,0x18(%esp)
  0xa77138f6: mov    0x2c(%esp),%edi
  0xa77138fa: mov    %edi,0xc(%esp)
  0xa77138fe: mov    0x30(%esp),%edi
  0xa7713902: mov    %edi,0x10(%esp)
  0xa7713906: mov    0x34(%esp),%edi
  0xa771390a: mov    %edi,0x4(%esp)
  0xa771390e: mov    0x38(%esp),%edi
  0xa7713912: mov    %edi,0x8(%esp)
  0xa7713916: mov    0x3c(%esp),%edi
  0xa771391a: mov    %edi,(%esp)
  0xa771391d: mov    0x28(%ebx),%ecx
  0xa7713920: push   %eax
  0xa7713921: jmp    *%ecx

Decoding RuntimeStub - g1_pre_barrier_slow Runtime1 stub 0xa7713608
  0xa7713680: push   %ebp
  0xa7713681: mov    %esp,%ebp
  0xa7713683: mov    $0x1e,%eax
  0xa7713688: push   %eax
  0xa7713689: mov    %esp,%edi
  0xa771368b: shr    $0xc,%edi
  0xa771368e: mov    -0x486bdba0(,%edi,4),%edi
  0xa7713695: push   %edi
  0xa7713696: mov    %ebp,0x148(%edi)
  0xa771369c: mov    %esp,0x140(%edi)
  0xa77136a2: call   0xb6bb5674
  0xa77136a7: push   %eax
  0xa77136a8: mov    %esp,%eax
  0xa77136aa: shr    $0xc,%eax
  0xa77136ad: mov    -0x486bdba0(,%eax,4),%eax
  0xa77136b4: cmp    %eax,%edi
  0xa77136b6: je     0xa77136d2
  0xa77136bc: call   0xb711bdac
  0xa77136c1: push   $0xb7391b5c
  0xa77136c6: call   0xa77136cb
  0xa77136cb: pusha  
  0xa77136cc: call   0xb7052f32
  0xa77136d1: hlt    
  0xa77136d2: pop    %eax
  0xa77136d3: movl   $0x0,0x140(%edi)
  0xa77136dd: movl   $0x0,0x148(%edi)
  0xa77136e7: movl   $0x0,0x144(%edi)
  0xa77136f1: add    $0x8,%esp
  0xa77136f4: cmpl   $0x0,0x4(%edi)
  0xa77136fb: je     0xa771370c
  0xa7713701: mov    0x4(%edi),%eax
  0xa7713704: mov    %ebp,%esp
  0xa7713706: pop    %ebp
  0xa7713707: jmp    Stub::forward exception
  0xa771370c: push   $0xb735fe8b
  0xa7713711: call   0xa7713716
  0xa7713716: pusha  
  0xa7713717: call   0xb7052f32
  0xa771371c: hlt    
  0xa771371d: mov    %ebp,%esp
  0xa771371f: pop    %ebp
  0xa7713720: ret    
  0xa7713721: nop
  0xa7713722: nop
  0xa7713723: nop

Decoding RuntimeStub - g1_post_barrier_slow Runtime1 stub 0xa7713488
  0xa77134e0: push   %ebp
  0xa77134e1: mov    %esp,%ebp
  0xa77134e3: push   %eax
  0xa77134e4: push   %ecx
  0xa77134e5: mov    0x8(%ebp),%ecx
  0xa77134e8: shr    $0x9,%ecx
  0xa77134eb: mov    $0x66ac7000,%eax
  0xa77134f0: add    %eax,%ecx
  0xa77134f2: mov    %esp,%eax
  0xa77134f4: shr    $0xc,%eax
  0xa77134f7: mov    -0x486bdba0(,%eax,4),%eax
  0xa77134fe: cmpb   $0x20,(%ecx)
  0xa7713501: je     0xa77135e9
  0xa7713507: lock addl $0x0,(%esp)
  0xa771350c: cmpb   $0x0,(%ecx)
  0xa771350f: je     0xa77135e9
  0xa7713515: movb   $0x0,(%ecx)
  0xa7713518: cmpl   $0x0,0x30c(%eax)
  0xa7713522: je     0xa7713544
  0xa7713528: subl   $0x4,0x30c(%eax)
  0xa771352f: push   %ebx
  0xa7713530: mov    0x308(%eax),%ebx
  0xa7713536: add    0x30c(%eax),%ebx
  0xa771353c: mov    %ecx,(%ebx)
  0xa771353e: pop    %ebx
  0xa771353f: jmp    0xa77135e9
  0xa7713544: push   %edx
  ;; save_live_registers
  0xa7713545: pusha  
  0xa7713546: sub    $0xf0,%esp
  0xa771354c: movl   $0xfeedbeef,0xec(%esp)
  0xa7713557: vmovsd %xmm0,(%esp)
  0xa771355c: vmovsd %xmm1,0x8(%esp)
  0xa7713562: vmovsd %xmm2,0x10(%esp)
  0xa7713568: vmovsd %xmm3,0x18(%esp)
  0xa771356e: vmovsd %xmm4,0x20(%esp)
  0xa7713574: vmovsd %xmm5,0x28(%esp)
  0xa771357a: vmovsd %xmm6,0x30(%esp)
  0xa7713580: vmovsd %xmm7,0x38(%esp)
  0xa7713586: push   %eax
  0xa7713587: push   %ecx
  0xa7713588: call   0xb71cea5c
  0xa771358d: add    $0x8,%esp
  ;; restore_live_registers
  0xa7713590: vmovsd (%esp),%xmm0
  0xa7713595: vmovsd 0x8(%esp),%xmm1
  0xa771359b: vmovsd 0x10(%esp),%xmm2
  0xa77135a1: vmovsd 0x18(%esp),%xmm3
  0xa77135a7: vmovsd 0x20(%esp),%xmm4
  0xa77135ad: vmovsd 0x28(%esp),%xmm5
  0xa77135b3: vmovsd 0x30(%esp),%xmm6
  0xa77135b9: vmovsd 0x38(%esp),%xmm7
  0xa77135bf: cmpl   $0xfeedbeef,0xec(%esp)
  0xa77135ca: je     0xa77135e1
  0xa77135d0: push   $0xb7391c83
  0xa77135d5: call   0xa77135da
  0xa77135da: pusha  
  0xa77135db: call   0xb7052f32
  0xa77135e0: hlt    
  0xa77135e1: add    $0xf0,%esp
  0xa77135e7: popa   
  0xa77135e8: pop    %edx
  0xa77135e9: pop    %ecx
  0xa77135ea: pop    %eax
  0xa77135eb: mov    %ebp,%esp
  0xa77135ed: pop    %ebp
  0xa77135ee: ret    
  0xa77135ef: nop

Decoding RuntimeStub - fpu2long_stub Runtime1 stub 0xa7713388
  0xa77133c0: push   %esi
  0xa77133c1: push   %ecx
  0xa77133c2: sub    $0x20,%esp
  0xa77133c5: fstl   0x4(%esp)
  0xa77133c9: mov    0x8(%esp),%eax
  0xa77133cd: and    $0x7ff00000,%eax
  0xa77133d3: cmp    $0x7ff00000,%eax
  0xa77133d9: jne    0xa77133f3
  0xa77133df: mov    0x8(%esp),%eax
  0xa77133e3: and    $0xfffff,%eax
  0xa77133e9: or     0x4(%esp),%eax
  0xa77133ed: jne    0xa7713459
  0xa77133f3: fstcw  (%esp)
  0xa77133f7: movzwl (%esp),%eax
  0xa77133fb: or     $0xc00,%eax
  0xa7713401: mov    %ax,0x2(%esp)
  0xa7713406: fldcw  0x2(%esp)
  0xa771340a: fistpll 0xc(%esp)
  0xa771340f: fldcw  (%esp)
  0xa7713412: fwait
  0xa7713413: mov    0xc(%esp),%eax
  0xa7713417: mov    0x10(%esp),%edx
  0xa771341b: mov    %eax,%ecx
  0xa771341d: xor    $0x0,%ecx
  0xa7713420: mov    $0x80000000,%esi
  0xa7713425: xor    %edx,%esi
  0xa7713427: or     %esi,%ecx
  0xa7713429: jne    0xa7713461
  0xa771342f: fldz   
  0xa7713431: fcompl 0x4(%esp)
  0xa7713435: fnstsw %ax
  0xa7713437: sahf   
  0xa7713438: ja     0xa771344d
  0xa771343e: mov    $0x7fffffff,%edx
  0xa7713443: mov    $0xffffffff,%eax
  0xa7713448: jmp    0xa7713461
  0xa771344d: mov    $0x80000000,%edx
  0xa7713452: xor    %eax,%eax
  0xa7713454: jmp    0xa7713461
  0xa7713459: ffree  %st(0)
  0xa771345b: fincstp 
  0xa771345d: xor    %edx,%edx
  0xa771345f: xor    %eax,%eax
  0xa7713461: add    $0x20,%esp
  0xa7713464: pop    %ecx
  0xa7713465: pop    %esi
  0xa7713466: ret    
  0xa7713467: nop

Decoding RuntimeStub - counter_overflow Runtime1 stub 0xa77131c8
  0xa7713240: push   %ebp
  0xa7713241: mov    %esp,%ebp
  ;; save_live_registers
  0xa7713243: pusha  
  0xa7713244: sub    $0xf0,%esp
  0xa771324a: movl   $0xfeedbeef,0xec(%esp)
  0xa7713255: vmovsd %xmm0,(%esp)
  0xa771325a: vmovsd %xmm1,0x8(%esp)
  0xa7713260: vmovsd %xmm2,0x10(%esp)
  0xa7713266: vmovsd %xmm3,0x18(%esp)
  0xa771326c: vmovsd %xmm4,0x20(%esp)
  0xa7713272: vmovsd %xmm5,0x28(%esp)
  0xa7713278: vmovsd %xmm6,0x30(%esp)
  0xa771327e: vmovsd %xmm7,0x38(%esp)
  0xa7713284: mov    0x8(%ebp),%eax
  0xa7713287: mov    0xc(%ebp),%ebx
  0xa771328a: push   %ebx
  0xa771328b: push   %eax
  0xa771328c: mov    %esp,%edi
  0xa771328e: shr    $0xc,%edi
  0xa7713291: mov    -0x486bdba0(,%edi,4),%edi
  0xa7713298: push   %edi
  0xa7713299: mov    %ebp,0x148(%edi)
  0xa771329f: mov    %esp,0x140(%edi)
  0xa77132a5: call   0xb6bb5cf2
  0xa77132aa: push   %eax
  0xa77132ab: mov    %esp,%eax
  0xa77132ad: shr    $0xc,%eax
  0xa77132b0: mov    -0x486bdba0(,%eax,4),%eax
  0xa77132b7: cmp    %eax,%edi
  0xa77132b9: je     0xa77132d5
  0xa77132bf: call   0xb711bdac
  0xa77132c4: push   $0xb7391b5c
  0xa77132c9: call   0xa77132ce
  0xa77132ce: pusha  
  0xa77132cf: call   0xb7052f32
  0xa77132d4: hlt    
  0xa77132d5: pop    %eax
  0xa77132d6: movl   $0x0,0x140(%edi)
  0xa77132e0: movl   $0x0,0x148(%edi)
  0xa77132ea: movl   $0x0,0x144(%edi)
  0xa77132f4: add    $0xc,%esp
  0xa77132f7: cmpl   $0x0,0x4(%edi)
  0xa77132fe: je     0xa771330c
  0xa7713304: mov    0x4(%edi),%eax
  0xa7713307: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa771330c: vmovsd (%esp),%xmm0
  0xa7713311: vmovsd 0x8(%esp),%xmm1
  0xa7713317: vmovsd 0x10(%esp),%xmm2
  0xa771331d: vmovsd 0x18(%esp),%xmm3
  0xa7713323: vmovsd 0x20(%esp),%xmm4
  0xa7713329: vmovsd 0x28(%esp),%xmm5
  0xa771332f: vmovsd 0x30(%esp),%xmm6
  0xa7713335: vmovsd 0x38(%esp),%xmm7
  0xa771333b: cmpl   $0xfeedbeef,0xec(%esp)
  0xa7713346: je     0xa771335d
  0xa771334c: push   $0xb7391c83
  0xa7713351: call   0xa7713356
  0xa7713356: pusha  
  0xa7713357: call   0xb7052f32
  0xa771335c: hlt    
  0xa771335d: add    $0xf0,%esp
  0xa7713363: popa   
  0xa7713364: mov    %ebp,%esp
  0xa7713366: pop    %ebp
  0xa7713367: ret    

Decoding RuntimeStub - predicate_failed_trap Runtime1 stub 0xa7713008
  0xa7713080: push   %ebp
  0xa7713081: mov    %esp,%ebp
  ;; save_live_registers
  0xa7713083: pusha  
  0xa7713084: sub    $0xf0,%esp
  0xa771308a: movl   $0xfeedbeef,0xec(%esp)
  0xa7713095: vmovsd %xmm0,(%esp)
  0xa771309a: vmovsd %xmm1,0x8(%esp)
  0xa77130a0: vmovsd %xmm2,0x10(%esp)
  0xa77130a6: vmovsd %xmm3,0x18(%esp)
  0xa77130ac: vmovsd %xmm4,0x20(%esp)
  0xa77130b2: vmovsd %xmm5,0x28(%esp)
  0xa77130b8: vmovsd %xmm6,0x30(%esp)
  0xa77130be: vmovsd %xmm7,0x38(%esp)
  0xa77130c4: mov    %esp,%edi
  0xa77130c6: shr    $0xc,%edi
  0xa77130c9: mov    -0x486bdba0(,%edi,4),%edi
  0xa77130d0: push   %edi
  0xa77130d1: mov    %ebp,0x148(%edi)
  0xa77130d7: mov    %esp,0x140(%edi)
  0xa77130dd: call   0xb6bba21e
  0xa77130e2: push   %eax
  0xa77130e3: mov    %esp,%eax
  0xa77130e5: shr    $0xc,%eax
  0xa77130e8: mov    -0x486bdba0(,%eax,4),%eax
  0xa77130ef: cmp    %eax,%edi
  0xa77130f1: je     0xa771310d
  0xa77130f7: call   0xb711bdac
  0xa77130fc: push   $0xb7391b5c
  0xa7713101: call   0xa7713106
  0xa7713106: pusha  
  0xa7713107: call   0xb7052f32
  0xa771310c: hlt    
  0xa771310d: pop    %eax
  0xa771310e: movl   $0x0,0x140(%edi)
  0xa7713118: movl   $0x0,0x148(%edi)
  0xa7713122: movl   $0x0,0x144(%edi)
  0xa771312c: add    $0x4,%esp
  0xa771312f: cmpl   $0x0,0x4(%edi)
  0xa7713136: je     0xa7713144
  0xa771313c: mov    0x4(%edi),%eax
  0xa771313f: jmp    0xa76cbce0
  ;; restore_live_registers
  0xa7713144: vmovsd (%esp),%xmm0
  0xa7713149: vmovsd 0x8(%esp),%xmm1
  0xa771314f: vmovsd 0x10(%esp),%xmm2
  0xa7713155: vmovsd 0x18(%esp),%xmm3
  0xa771315b: vmovsd 0x20(%esp),%xmm4
  0xa7713161: vmovsd 0x28(%esp),%xmm5
  0xa7713167: vmovsd 0x30(%esp),%xmm6
  0xa771316d: vmovsd 0x38(%esp),%xmm7
  0xa7713173: cmpl   $0xfeedbeef,0xec(%esp)
  0xa771317e: je     0xa7713195
  0xa7713184: push   $0xb7391c83
  0xa7713189: call   0xa771318e
  0xa771318e: pusha  
  0xa771318f: call   0xb7052f32
  0xa7713194: hlt    
  0xa7713195: add    $0xf0,%esp
  0xa771319b: popa   
  0xa771319c: mov    %ebp,%esp
  0xa771319e: pop    %ebp
  0xa771319f: jmp    0xa769355f
  0xa77131a4: mov    %ebp,%esp
  0xa77131a6: pop    %ebp
  0xa77131a7: ret    

AHE@0x63406864: 0xbebebeaaa0000000 i2c: 0xa7712e80 c2i: 0xa7712f5e c2iUV: 0xa7712f3d
i2c argument handler #60 for: static (JJJ[BII)I (355 bytes generated)
c2i argument handler starts at 0xa7712f5e
  0xa7712e80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7712e83: mov    $0xa75b1ac0,%edi
  0xa7712e88: cmp    %edi,%eax
  0xa7712e8a: jbe    0xa7712e9d
  0xa7712e90: mov    $0xa7691ac0,%edi
  0xa7712e95: cmp    %edi,%eax
  0xa7712e97: jb     0xa7712ee2
  0xa7712e9d: mov    $0xa75af400,%edi
  0xa7712ea2: cmp    %edi,%eax
  0xa7712ea4: jbe    0xa7712eb7
  0xa7712eaa: mov    $0xa75b1728,%edi
  0xa7712eaf: cmp    %edi,%eax
  0xa7712eb1: jb     0xa7712ee2
  0xa7712eb7: mov    $0xa76b4e40,%edi
  0xa7712ebc: cmp    %edi,%eax
  0xa7712ebe: jbe    0xa7712ed1
  0xa7712ec4: mov    $0xa76ba430,%edi
  0xa7712ec9: cmp    %edi,%eax
  0xa7712ecb: jb     0xa7712ee2
  ;; i2c adapter must return to an interpreter frame
  0xa7712ed1: push   $0xb75a2830
  0xa7712ed6: call   0xa7712edb
  0xa7712edb: pusha  
  0xa7712edc: call   0xb7052f32
  0xa7712ee1: hlt    
  ;; } verify_i2ce 
  0xa7712ee2: mov    %esp,%edi
  0xa7712ee4: sub    $0x20,%esp
  0xa7712ee7: and    $0xfffffff0,%esp
  0xa7712eea: push   %eax
  0xa7712eeb: mov    %edi,%eax
  0xa7712eed: mov    0x30(%ebx),%edi
  0xa7712ef0: mov    0x20(%eax),%esi
  0xa7712ef3: mov    %esi,0x4(%esp)
  0xa7712ef7: mov    0x24(%eax),%esi
  0xa7712efa: mov    %esi,0x8(%esp)
  0xa7712efe: mov    0x18(%eax),%esi
  0xa7712f01: mov    %esi,0xc(%esp)
  0xa7712f05: mov    0x1c(%eax),%esi
  0xa7712f08: mov    %esi,0x10(%esp)
  0xa7712f0c: mov    0x10(%eax),%esi
  0xa7712f0f: mov    %esi,0x14(%esp)
  0xa7712f13: mov    0x14(%eax),%esi
  0xa7712f16: mov    %esi,0x18(%esp)
  0xa7712f1a: mov    0xc(%eax),%ecx
  0xa7712f1d: mov    0x8(%eax),%edx
  0xa7712f20: mov    0x4(%eax),%esi
  0xa7712f23: mov    %esi,0x1c(%esp)
  0xa7712f27: mov    %esp,%eax
  0xa7712f29: shr    $0xc,%eax
  0xa7712f2c: mov    -0x486bdba0(,%eax,4),%eax
  0xa7712f33: mov    %ebx,0x16c(%eax)
  0xa7712f39: mov    %ebx,%eax
  0xa7712f3b: jmp    *%edi
  0xa7712f3d: mov    0x4(%ecx),%ebx
  0xa7712f40: cmp    0x8(%eax),%ebx
  0xa7712f43: mov    0x4(%eax),%ebx
  0xa7712f46: jne    0xa7712f59
  0xa7712f4c: cmpl   $0x0,0x34(%ebx)
  0xa7712f53: je     0xa7712f98
  0xa7712f59: jmp    0xa7692560
  0xa7712f5e: cmpl   $0x0,0x34(%ebx)
  0xa7712f65: je     0xa7712f98
  0xa7712f6b: mov    (%esp),%eax
  0xa7712f6e: pusha  
  0xa7712f6f: pushf  
  0xa7712f70: sub    $0x10,%esp
  0xa7712f73: vmovsd %xmm0,(%esp)
  0xa7712f78: vmovsd %xmm1,0x8(%esp)
  0xa7712f7e: push   %eax
  0xa7712f7f: push   %ebx
  0xa7712f80: call   0xb71d62fc
  0xa7712f85: add    $0x8,%esp
  0xa7712f88: vmovsd (%esp),%xmm0
  0xa7712f8d: vmovsd 0x8(%esp),%xmm1
  0xa7712f93: add    $0x10,%esp
  0xa7712f96: popf   
  0xa7712f97: popa   
  0xa7712f98: pop    %eax
  0xa7712f99: mov    %esp,%esi
  0xa7712f9b: sub    $0x24,%esp
  0xa7712f9e: mov    0x24(%esp),%edi
  0xa7712fa2: mov    %edi,0x1c(%esp)
  0xa7712fa6: mov    0x28(%esp),%edi
  0xa7712faa: mov    %edi,0x20(%esp)
  0xa7712fae: mov    0x2c(%esp),%edi
  0xa7712fb2: mov    %edi,0x14(%esp)
  0xa7712fb6: mov    0x30(%esp),%edi
  0xa7712fba: mov    %edi,0x18(%esp)
  0xa7712fbe: mov    0x34(%esp),%edi
  0xa7712fc2: mov    %edi,0xc(%esp)
  0xa7712fc6: mov    0x38(%esp),%edi
  0xa7712fca: mov    %edi,0x10(%esp)
  0xa7712fce: mov    %ecx,0x8(%esp)
  0xa7712fd2: mov    %edx,0x4(%esp)
  0xa7712fd6: mov    0x3c(%esp),%edi
  0xa7712fda: mov    %edi,(%esp)
  0xa7712fdd: mov    0x28(%ebx),%ecx
  0xa7712fe0: push   %eax
  0xa7712fe1: jmp    *%ecx

AHE@0x63406888: 0xaabebe00 i2c: 0xa771fd80 c2i: 0xa771fe49 c2iUV: 0xa771fe28
i2c argument handler #61 for: receiver (Ljava/io/FileDescriptor;JJ)V (310 bytes generated)
c2i argument handler starts at 0xa771fe49
  0xa771fd80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa771fd83: mov    $0xa75b1ac0,%edi
  0xa771fd88: cmp    %edi,%eax
  0xa771fd8a: jbe    0xa771fd9d
  0xa771fd90: mov    $0xa7691ac0,%edi
  0xa771fd95: cmp    %edi,%eax
  0xa771fd97: jb     0xa771fde2
  0xa771fd9d: mov    $0xa75af400,%edi
  0xa771fda2: cmp    %edi,%eax
  0xa771fda4: jbe    0xa771fdb7
  0xa771fdaa: mov    $0xa75b1728,%edi
  0xa771fdaf: cmp    %edi,%eax
  0xa771fdb1: jb     0xa771fde2
  0xa771fdb7: mov    $0xa76b4e40,%edi
  0xa771fdbc: cmp    %edi,%eax
  0xa771fdbe: jbe    0xa771fdd1
  0xa771fdc4: mov    $0xa76ba430,%edi
  0xa771fdc9: cmp    %edi,%eax
  0xa771fdcb: jb     0xa771fde2
  ;; i2c adapter must return to an interpreter frame
  0xa771fdd1: push   $0xb75a2830
  0xa771fdd6: call   0xa771fddb
  0xa771fddb: pusha  
  0xa771fddc: call   0xb7052f32
  0xa771fde1: hlt    
  ;; } verify_i2ce 
  0xa771fde2: mov    %esp,%edi
  0xa771fde4: sub    $0x10,%esp
  0xa771fde7: and    $0xfffffff0,%esp
  0xa771fdea: push   %eax
  0xa771fdeb: mov    %edi,%eax
  0xa771fded: mov    0x30(%ebx),%edi
  0xa771fdf0: mov    0x18(%eax),%ecx
  0xa771fdf3: mov    0x14(%eax),%edx
  0xa771fdf6: mov    0xc(%eax),%esi
  0xa771fdf9: mov    %esi,0x4(%esp)
  0xa771fdfd: mov    0x10(%eax),%esi
  0xa771fe00: mov    %esi,0x8(%esp)
  0xa771fe04: mov    0x4(%eax),%esi
  0xa771fe07: mov    %esi,0xc(%esp)
  0xa771fe0b: mov    0x8(%eax),%esi
  0xa771fe0e: mov    %esi,0x10(%esp)
  0xa771fe12: mov    %esp,%eax
  0xa771fe14: shr    $0xc,%eax
  0xa771fe17: mov    -0x486bdba0(,%eax,4),%eax
  0xa771fe1e: mov    %ebx,0x16c(%eax)
  0xa771fe24: mov    %ebx,%eax
  0xa771fe26: jmp    *%edi
  0xa771fe28: mov    0x4(%ecx),%ebx
  0xa771fe2b: cmp    0x8(%eax),%ebx
  0xa771fe2e: mov    0x4(%eax),%ebx
  0xa771fe31: jne    0xa771fe44
  0xa771fe37: cmpl   $0x0,0x34(%ebx)
  0xa771fe3e: je     0xa771fe83
  0xa771fe44: jmp    0xa7692560
  0xa771fe49: cmpl   $0x0,0x34(%ebx)
  0xa771fe50: je     0xa771fe83
  0xa771fe56: mov    (%esp),%eax
  0xa771fe59: pusha  
  0xa771fe5a: pushf  
  0xa771fe5b: sub    $0x10,%esp
  0xa771fe5e: vmovsd %xmm0,(%esp)
  0xa771fe63: vmovsd %xmm1,0x8(%esp)
  0xa771fe69: push   %eax
  0xa771fe6a: push   %ebx
  0xa771fe6b: call   0xb71d62fc
  0xa771fe70: add    $0x8,%esp
  0xa771fe73: vmovsd (%esp),%xmm0
  0xa771fe78: vmovsd 0x8(%esp),%xmm1
  0xa771fe7e: add    $0x10,%esp
  0xa771fe81: popf   
  0xa771fe82: popa   
  0xa771fe83: pop    %eax
  0xa771fe84: mov    %esp,%esi
  0xa771fe86: sub    $0x18,%esp
  0xa771fe89: mov    %ecx,0x14(%esp)
  0xa771fe8d: mov    %edx,0x10(%esp)
  0xa771fe91: mov    0x18(%esp),%edi
  0xa771fe95: mov    %edi,0x8(%esp)
  0xa771fe99: mov    0x1c(%esp),%edi
  0xa771fe9d: mov    %edi,0xc(%esp)
  0xa771fea1: mov    0x20(%esp),%edi
  0xa771fea5: mov    %edi,(%esp)
  0xa771fea8: mov    0x24(%esp),%edi
  0xa771feac: mov    %edi,0x4(%esp)
  0xa771feb0: mov    0x28(%ebx),%ecx
  0xa771feb3: push   %eax
  0xa771feb4: jmp    *%ecx

AHE@0x634068ac: 0xabe7e000 i2c: 0xa77217c0 c2i: 0xa772187d c2iUV: 0xa772185c
i2c argument handler #62 for: receiver (JD)Ljava/nio/ByteBuffer; (284 bytes generated)
c2i argument handler starts at 0xa772187d
  0xa77217c0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa77217c3: mov    $0xa75b1ac0,%edi
  0xa77217c8: cmp    %edi,%eax
  0xa77217ca: jbe    0xa77217dd
  0xa77217d0: mov    $0xa7691ac0,%edi
  0xa77217d5: cmp    %edi,%eax
  0xa77217d7: jb     0xa7721822
  0xa77217dd: mov    $0xa75af400,%edi
  0xa77217e2: cmp    %edi,%eax
  0xa77217e4: jbe    0xa77217f7
  0xa77217ea: mov    $0xa75b1728,%edi
  0xa77217ef: cmp    %edi,%eax
  0xa77217f1: jb     0xa7721822
  0xa77217f7: mov    $0xa76b4e40,%edi
  0xa77217fc: cmp    %edi,%eax
  0xa77217fe: jbe    0xa7721811
  0xa7721804: mov    $0xa76ba430,%edi
  0xa7721809: cmp    %edi,%eax
  0xa772180b: jb     0xa7721822
  ;; i2c adapter must return to an interpreter frame
  0xa7721811: push   $0xb75a2830
  0xa7721816: call   0xa772181b
  0xa772181b: pusha  
  0xa772181c: call   0xb7052f32
  0xa7721821: hlt    
  ;; } verify_i2ce 
  0xa7721822: mov    %esp,%edi
  0xa7721824: sub    $0x8,%esp
  0xa7721827: and    $0xfffffff0,%esp
  0xa772182a: push   %eax
  0xa772182b: mov    %edi,%eax
  0xa772182d: mov    0x30(%ebx),%edi
  0xa7721830: mov    0x14(%eax),%ecx
  0xa7721833: mov    0xc(%eax),%esi
  0xa7721836: mov    %esi,0x4(%esp)
  0xa772183a: mov    0x10(%eax),%esi
  0xa772183d: mov    %esi,0x8(%esp)
  0xa7721841: vmovsd 0x4(%eax),%xmm0
  0xa7721846: mov    %esp,%eax
  0xa7721848: shr    $0xc,%eax
  0xa772184b: mov    -0x486bdba0(,%eax,4),%eax
  0xa7721852: mov    %ebx,0x16c(%eax)
  0xa7721858: mov    %ebx,%eax
  0xa772185a: jmp    *%edi
  0xa772185c: mov    0x4(%ecx),%ebx
  0xa772185f: cmp    0x8(%eax),%ebx
  0xa7721862: mov    0x4(%eax),%ebx
  0xa7721865: jne    0xa7721878
  0xa772186b: cmpl   $0x0,0x34(%ebx)
  0xa7721872: je     0xa77218b7
  0xa7721878: jmp    0xa7692560
  0xa772187d: cmpl   $0x0,0x34(%ebx)
  0xa7721884: je     0xa77218b7
  0xa772188a: mov    (%esp),%eax
  0xa772188d: pusha  
  0xa772188e: pushf  
  0xa772188f: sub    $0x10,%esp
  0xa7721892: vmovsd %xmm0,(%esp)
  0xa7721897: vmovsd %xmm1,0x8(%esp)
  0xa772189d: push   %eax
  0xa772189e: push   %ebx
  0xa772189f: call   0xb71d62fc
  0xa77218a4: add    $0x8,%esp
  0xa77218a7: vmovsd (%esp),%xmm0
  0xa77218ac: vmovsd 0x8(%esp),%xmm1
  0xa77218b2: add    $0x10,%esp
  0xa77218b5: popf   
  0xa77218b6: popa   
  0xa77218b7: pop    %eax
  0xa77218b8: mov    %esp,%esi
  0xa77218ba: sub    $0x14,%esp
  0xa77218bd: mov    %ecx,0x10(%esp)
  0xa77218c1: mov    0x14(%esp),%edi
  0xa77218c5: mov    %edi,0x8(%esp)
  0xa77218c9: mov    0x18(%esp),%edi
  0xa77218cd: mov    %edi,0xc(%esp)
  0xa77218d1: vmovsd %xmm0,(%esp)
  0xa77218d6: mov    0x28(%ebx),%ecx
  0xa77218d9: push   %eax
  0xa77218da: jmp    *%ecx

AHE@0x634068d0: 0xabe60000 i2c: 0xa7721980 c2i: 0xa7721a3d c2iUV: 0xa7721a1c
i2c argument handler #63 for: receiver (JF)Ljava/nio/ByteBuffer; (284 bytes generated)
c2i argument handler starts at 0xa7721a3d
  0xa7721980: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7721983: mov    $0xa75b1ac0,%edi
  0xa7721988: cmp    %edi,%eax
  0xa772198a: jbe    0xa772199d
  0xa7721990: mov    $0xa7691ac0,%edi
  0xa7721995: cmp    %edi,%eax
  0xa7721997: jb     0xa77219e2
  0xa772199d: mov    $0xa75af400,%edi
  0xa77219a2: cmp    %edi,%eax
  0xa77219a4: jbe    0xa77219b7
  0xa77219aa: mov    $0xa75b1728,%edi
  0xa77219af: cmp    %edi,%eax
  0xa77219b1: jb     0xa77219e2
  0xa77219b7: mov    $0xa76b4e40,%edi
  0xa77219bc: cmp    %edi,%eax
  0xa77219be: jbe    0xa77219d1
  0xa77219c4: mov    $0xa76ba430,%edi
  0xa77219c9: cmp    %edi,%eax
  0xa77219cb: jb     0xa77219e2
  ;; i2c adapter must return to an interpreter frame
  0xa77219d1: push   $0xb75a2830
  0xa77219d6: call   0xa77219db
  0xa77219db: pusha  
  0xa77219dc: call   0xb7052f32
  0xa77219e1: hlt    
  ;; } verify_i2ce 
  0xa77219e2: mov    %esp,%edi
  0xa77219e4: sub    $0x8,%esp
  0xa77219e7: and    $0xfffffff0,%esp
  0xa77219ea: push   %eax
  0xa77219eb: mov    %edi,%eax
  0xa77219ed: mov    0x30(%ebx),%edi
  0xa77219f0: mov    0x10(%eax),%ecx
  0xa77219f3: mov    0x8(%eax),%esi
  0xa77219f6: mov    %esi,0x4(%esp)
  0xa77219fa: mov    0xc(%eax),%esi
  0xa77219fd: mov    %esi,0x8(%esp)
  0xa7721a01: vmovss 0x4(%eax),%xmm0
  0xa7721a06: mov    %esp,%eax
  0xa7721a08: shr    $0xc,%eax
  0xa7721a0b: mov    -0x486bdba0(,%eax,4),%eax
  0xa7721a12: mov    %ebx,0x16c(%eax)
  0xa7721a18: mov    %ebx,%eax
  0xa7721a1a: jmp    *%edi
  0xa7721a1c: mov    0x4(%ecx),%ebx
  0xa7721a1f: cmp    0x8(%eax),%ebx
  0xa7721a22: mov    0x4(%eax),%ebx
  0xa7721a25: jne    0xa7721a38
  0xa7721a2b: cmpl   $0x0,0x34(%ebx)
  0xa7721a32: je     0xa7721a77
  0xa7721a38: jmp    0xa7692560
  0xa7721a3d: cmpl   $0x0,0x34(%ebx)
  0xa7721a44: je     0xa7721a77
  0xa7721a4a: mov    (%esp),%eax
  0xa7721a4d: pusha  
  0xa7721a4e: pushf  
  0xa7721a4f: sub    $0x10,%esp
  0xa7721a52: vmovsd %xmm0,(%esp)
  0xa7721a57: vmovsd %xmm1,0x8(%esp)
  0xa7721a5d: push   %eax
  0xa7721a5e: push   %ebx
  0xa7721a5f: call   0xb71d62fc
  0xa7721a64: add    $0x8,%esp
  0xa7721a67: vmovsd (%esp),%xmm0
  0xa7721a6c: vmovsd 0x8(%esp),%xmm1
  0xa7721a72: add    $0x10,%esp
  0xa7721a75: popf   
  0xa7721a76: popa   
  0xa7721a77: pop    %eax
  0xa7721a78: mov    %esp,%esi
  0xa7721a7a: sub    $0x10,%esp
  0xa7721a7d: mov    %ecx,0xc(%esp)
  0xa7721a81: mov    0x10(%esp),%edi
  0xa7721a85: mov    %edi,0x4(%esp)
  0xa7721a89: mov    0x14(%esp),%edi
  0xa7721a8d: mov    %edi,0x8(%esp)
  0xa7721a91: vmovss %xmm0,(%esp)
  0xa7721a96: mov    0x28(%ebx),%ecx
  0xa7721a99: push   %eax
  0xa7721a9a: jmp    *%ecx

AHE@0x634068f4: 0xaabeaa00 i2c: 0xa7721b40 c2i: 0xa7721c09 c2iUV: 0xa7721be8
i2c argument handler #64 for: receiver (IJLjava/io/FileDescriptor;Ljava/lang/Runnable;)V (310 bytes generated)
c2i argument handler starts at 0xa7721c09
  0xa7721b40: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7721b43: mov    $0xa75b1ac0,%edi
  0xa7721b48: cmp    %edi,%eax
  0xa7721b4a: jbe    0xa7721b5d
  0xa7721b50: mov    $0xa7691ac0,%edi
  0xa7721b55: cmp    %edi,%eax
  0xa7721b57: jb     0xa7721ba2
  0xa7721b5d: mov    $0xa75af400,%edi
  0xa7721b62: cmp    %edi,%eax
  0xa7721b64: jbe    0xa7721b77
  0xa7721b6a: mov    $0xa75b1728,%edi
  0xa7721b6f: cmp    %edi,%eax
  0xa7721b71: jb     0xa7721ba2
  0xa7721b77: mov    $0xa76b4e40,%edi
  0xa7721b7c: cmp    %edi,%eax
  0xa7721b7e: jbe    0xa7721b91
  0xa7721b84: mov    $0xa76ba430,%edi
  0xa7721b89: cmp    %edi,%eax
  0xa7721b8b: jb     0xa7721ba2
  ;; i2c adapter must return to an interpreter frame
  0xa7721b91: push   $0xb75a2830
  0xa7721b96: call   0xa7721b9b
  0xa7721b9b: pusha  
  0xa7721b9c: call   0xb7052f32
  0xa7721ba1: hlt    
  ;; } verify_i2ce 
  0xa7721ba2: mov    %esp,%edi
  0xa7721ba4: sub    $0x10,%esp
  0xa7721ba7: and    $0xfffffff0,%esp
  0xa7721baa: push   %eax
  0xa7721bab: mov    %edi,%eax
  0xa7721bad: mov    0x30(%ebx),%edi
  0xa7721bb0: mov    0x18(%eax),%ecx
  0xa7721bb3: mov    0x14(%eax),%edx
  0xa7721bb6: mov    0xc(%eax),%esi
  0xa7721bb9: mov    %esi,0x4(%esp)
  0xa7721bbd: mov    0x10(%eax),%esi
  0xa7721bc0: mov    %esi,0x8(%esp)
  0xa7721bc4: mov    0x8(%eax),%esi
  0xa7721bc7: mov    %esi,0xc(%esp)
  0xa7721bcb: mov    0x4(%eax),%esi
  0xa7721bce: mov    %esi,0x10(%esp)
  0xa7721bd2: mov    %esp,%eax
  0xa7721bd4: shr    $0xc,%eax
  0xa7721bd7: mov    -0x486bdba0(,%eax,4),%eax
  0xa7721bde: mov    %ebx,0x16c(%eax)
  0xa7721be4: mov    %ebx,%eax
  0xa7721be6: jmp    *%edi
  0xa7721be8: mov    0x4(%ecx),%ebx
  0xa7721beb: cmp    0x8(%eax),%ebx
  0xa7721bee: mov    0x4(%eax),%ebx
  0xa7721bf1: jne    0xa7721c04
  0xa7721bf7: cmpl   $0x0,0x34(%ebx)
  0xa7721bfe: je     0xa7721c43
  0xa7721c04: jmp    0xa7692560
  0xa7721c09: cmpl   $0x0,0x34(%ebx)
  0xa7721c10: je     0xa7721c43
  0xa7721c16: mov    (%esp),%eax
  0xa7721c19: pusha  
  0xa7721c1a: pushf  
  0xa7721c1b: sub    $0x10,%esp
  0xa7721c1e: vmovsd %xmm0,(%esp)
  0xa7721c23: vmovsd %xmm1,0x8(%esp)
  0xa7721c29: push   %eax
  0xa7721c2a: push   %ebx
  0xa7721c2b: call   0xb71d62fc
  0xa7721c30: add    $0x8,%esp
  0xa7721c33: vmovsd (%esp),%xmm0
  0xa7721c38: vmovsd 0x8(%esp),%xmm1
  0xa7721c3e: add    $0x10,%esp
  0xa7721c41: popf   
  0xa7721c42: popa   
  0xa7721c43: pop    %eax
  0xa7721c44: mov    %esp,%esi
  0xa7721c46: sub    $0x18,%esp
  0xa7721c49: mov    %ecx,0x14(%esp)
  0xa7721c4d: mov    %edx,0x10(%esp)
  0xa7721c51: mov    0x18(%esp),%edi
  0xa7721c55: mov    %edi,0x8(%esp)
  0xa7721c59: mov    0x1c(%esp),%edi
  0xa7721c5d: mov    %edi,0xc(%esp)
  0xa7721c61: mov    0x20(%esp),%edi
  0xa7721c65: mov    %edi,0x4(%esp)
  0xa7721c69: mov    0x24(%esp),%edi
  0xa7721c6d: mov    %edi,(%esp)
  0xa7721c70: mov    0x28(%ebx),%ecx
  0xa7721c73: push   %eax
  0xa7721c74: jmp    *%ecx

AHE@0x63406918: 0xbeaaa000 i2c: 0xa7721fc0 c2i: 0xa7722082 c2iUV: 0xa7722061
i2c argument handler #65 for: static (J[BII)V (295 bytes generated)
c2i argument handler starts at 0xa7722082
  0xa7721fc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7721fc3: mov    $0xa75b1ac0,%edi
  0xa7721fc8: cmp    %edi,%eax
  0xa7721fca: jbe    0xa7721fdd
  0xa7721fd0: mov    $0xa7691ac0,%edi
  0xa7721fd5: cmp    %edi,%eax
  0xa7721fd7: jb     0xa7722022
  0xa7721fdd: mov    $0xa75af400,%edi
  0xa7721fe2: cmp    %edi,%eax
  0xa7721fe4: jbe    0xa7721ff7
  0xa7721fea: mov    $0xa75b1728,%edi
  0xa7721fef: cmp    %edi,%eax
  0xa7721ff1: jb     0xa7722022
  0xa7721ff7: mov    $0xa76b4e40,%edi
  0xa7721ffc: cmp    %edi,%eax
  0xa7721ffe: jbe    0xa7722011
  0xa7722004: mov    $0xa76ba430,%edi
  0xa7722009: cmp    %edi,%eax
  0xa772200b: jb     0xa7722022
  ;; i2c adapter must return to an interpreter frame
  0xa7722011: push   $0xb75a2830
  0xa7722016: call   0xa772201b
  0xa772201b: pusha  
  0xa772201c: call   0xb7052f32
  0xa7722021: hlt    
  ;; } verify_i2ce 
  0xa7722022: mov    %esp,%edi
  0xa7722024: sub    $0x10,%esp
  0xa7722027: and    $0xfffffff0,%esp
  0xa772202a: push   %eax
  0xa772202b: mov    %edi,%eax
  0xa772202d: mov    0x30(%ebx),%edi
  0xa7722030: mov    0x10(%eax),%esi
  0xa7722033: mov    %esi,0x4(%esp)
  0xa7722037: mov    0x14(%eax),%esi
  0xa772203a: mov    %esi,0x8(%esp)
  0xa772203e: mov    0xc(%eax),%ecx
  0xa7722041: mov    0x8(%eax),%edx
  0xa7722044: mov    0x4(%eax),%esi
  0xa7722047: mov    %esi,0xc(%esp)
  0xa772204b: mov    %esp,%eax
  0xa772204d: shr    $0xc,%eax
  0xa7722050: mov    -0x486bdba0(,%eax,4),%eax
  0xa7722057: mov    %ebx,0x16c(%eax)
  0xa772205d: mov    %ebx,%eax
  0xa772205f: jmp    *%edi
  0xa7722061: mov    0x4(%ecx),%ebx
  0xa7722064: cmp    0x8(%eax),%ebx
  0xa7722067: mov    0x4(%eax),%ebx
  0xa772206a: jne    0xa772207d
  0xa7722070: cmpl   $0x0,0x34(%ebx)
  0xa7722077: je     0xa77220bc
  0xa772207d: jmp    0xa7692560
  0xa7722082: cmpl   $0x0,0x34(%ebx)
  0xa7722089: je     0xa77220bc
  0xa772208f: mov    (%esp),%eax
  0xa7722092: pusha  
  0xa7722093: pushf  
  0xa7722094: sub    $0x10,%esp
  0xa7722097: vmovsd %xmm0,(%esp)
  0xa772209c: vmovsd %xmm1,0x8(%esp)
  0xa77220a2: push   %eax
  0xa77220a3: push   %ebx
  0xa77220a4: call   0xb71d62fc
  0xa77220a9: add    $0x8,%esp
  0xa77220ac: vmovsd (%esp),%xmm0
  0xa77220b1: vmovsd 0x8(%esp),%xmm1
  0xa77220b7: add    $0x10,%esp
  0xa77220ba: popf   
  0xa77220bb: popa   
  0xa77220bc: pop    %eax
  0xa77220bd: mov    %esp,%esi
  0xa77220bf: sub    $0x14,%esp
  0xa77220c2: mov    0x14(%esp),%edi
  0xa77220c6: mov    %edi,0xc(%esp)
  0xa77220ca: mov    0x18(%esp),%edi
  0xa77220ce: mov    %edi,0x10(%esp)
  0xa77220d2: mov    %ecx,0x8(%esp)
  0xa77220d6: mov    %edx,0x4(%esp)
  0xa77220da: mov    0x1c(%esp),%edi
  0xa77220de: mov    %edi,(%esp)
  0xa77220e1: mov    0x28(%ebx),%ecx
  0xa77220e4: push   %eax
  0xa77220e5: jmp    *%ecx

AHE@0x6340693c: 0xbebebe00 i2c: 0xa7722ac0 c2i: 0xa7722b91 c2iUV: 0xa7722b70
i2c argument handler #66 for: static (JJJ)V (326 bytes generated)
c2i argument handler starts at 0xa7722b91
  0xa7722ac0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7722ac3: mov    $0xa75b1ac0,%edi
  0xa7722ac8: cmp    %edi,%eax
  0xa7722aca: jbe    0xa7722add
  0xa7722ad0: mov    $0xa7691ac0,%edi
  0xa7722ad5: cmp    %edi,%eax
  0xa7722ad7: jb     0xa7722b22
  0xa7722add: mov    $0xa75af400,%edi
  0xa7722ae2: cmp    %edi,%eax
  0xa7722ae4: jbe    0xa7722af7
  0xa7722aea: mov    $0xa75b1728,%edi
  0xa7722aef: cmp    %edi,%eax
  0xa7722af1: jb     0xa7722b22
  0xa7722af7: mov    $0xa76b4e40,%edi
  0xa7722afc: cmp    %edi,%eax
  0xa7722afe: jbe    0xa7722b11
  0xa7722b04: mov    $0xa76ba430,%edi
  0xa7722b09: cmp    %edi,%eax
  0xa7722b0b: jb     0xa7722b22
  ;; i2c adapter must return to an interpreter frame
  0xa7722b11: push   $0xb75a2830
  0xa7722b16: call   0xa7722b1b
  0xa7722b1b: pusha  
  0xa7722b1c: call   0xb7052f32
  0xa7722b21: hlt    
  ;; } verify_i2ce 
  0xa7722b22: mov    %esp,%edi
  0xa7722b24: sub    $0x18,%esp
  0xa7722b27: and    $0xfffffff0,%esp
  0xa7722b2a: push   %eax
  0xa7722b2b: mov    %edi,%eax
  0xa7722b2d: mov    0x30(%ebx),%edi
  0xa7722b30: mov    0x14(%eax),%esi
  0xa7722b33: mov    %esi,0x4(%esp)
  0xa7722b37: mov    0x18(%eax),%esi
  0xa7722b3a: mov    %esi,0x8(%esp)
  0xa7722b3e: mov    0xc(%eax),%esi
  0xa7722b41: mov    %esi,0xc(%esp)
  0xa7722b45: mov    0x10(%eax),%esi
  0xa7722b48: mov    %esi,0x10(%esp)
  0xa7722b4c: mov    0x4(%eax),%esi
  0xa7722b4f: mov    %esi,0x14(%esp)
  0xa7722b53: mov    0x8(%eax),%esi
  0xa7722b56: mov    %esi,0x18(%esp)
  0xa7722b5a: mov    %esp,%eax
  0xa7722b5c: shr    $0xc,%eax
  0xa7722b5f: mov    -0x486bdba0(,%eax,4),%eax
  0xa7722b66: mov    %ebx,0x16c(%eax)
  0xa7722b6c: mov    %ebx,%eax
  0xa7722b6e: jmp    *%edi
  0xa7722b70: mov    0x4(%ecx),%ebx
  0xa7722b73: cmp    0x8(%eax),%ebx
  0xa7722b76: mov    0x4(%eax),%ebx
  0xa7722b79: jne    0xa7722b8c
  0xa7722b7f: cmpl   $0x0,0x34(%ebx)
  0xa7722b86: je     0xa7722bcb
  0xa7722b8c: jmp    0xa7692560
  0xa7722b91: cmpl   $0x0,0x34(%ebx)
  0xa7722b98: je     0xa7722bcb
  0xa7722b9e: mov    (%esp),%eax
  0xa7722ba1: pusha  
  0xa7722ba2: pushf  
  0xa7722ba3: sub    $0x10,%esp
  0xa7722ba6: vmovsd %xmm0,(%esp)
  0xa7722bab: vmovsd %xmm1,0x8(%esp)
  0xa7722bb1: push   %eax
  0xa7722bb2: push   %ebx
  0xa7722bb3: call   0xb71d62fc
  0xa7722bb8: add    $0x8,%esp
  0xa7722bbb: vmovsd (%esp),%xmm0
  0xa7722bc0: vmovsd 0x8(%esp),%xmm1
  0xa7722bc6: add    $0x10,%esp
  0xa7722bc9: popf   
  0xa7722bca: popa   
  0xa7722bcb: pop    %eax
  0xa7722bcc: mov    %esp,%esi
  0xa7722bce: sub    $0x18,%esp
  0xa7722bd1: mov    0x18(%esp),%edi
  0xa7722bd5: mov    %edi,0x10(%esp)
  0xa7722bd9: mov    0x1c(%esp),%edi
  0xa7722bdd: mov    %edi,0x14(%esp)
  0xa7722be1: mov    0x20(%esp),%edi
  0xa7722be5: mov    %edi,0x8(%esp)
  0xa7722be9: mov    0x24(%esp),%edi
  0xa7722bed: mov    %edi,0xc(%esp)
  0xa7722bf1: mov    0x28(%esp),%edi
  0xa7722bf5: mov    %edi,(%esp)
  0xa7722bf8: mov    0x2c(%esp),%edi
  0xa7722bfc: mov    %edi,0x4(%esp)
  0xa7722c00: mov    0x28(%ebx),%ecx
  0xa7722c03: push   %eax
  0xa7722c04: jmp    *%ecx

AHE@0x63406960: 0xabeabe00 i2c: 0xa7722cc0 c2i: 0xa7722d89 c2iUV: 0xa7722d68
i2c argument handler #67 for: static (IJIJ)V (310 bytes generated)
c2i argument handler starts at 0xa7722d89
  0xa7722cc0: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7722cc3: mov    $0xa75b1ac0,%edi
  0xa7722cc8: cmp    %edi,%eax
  0xa7722cca: jbe    0xa7722cdd
  0xa7722cd0: mov    $0xa7691ac0,%edi
  0xa7722cd5: cmp    %edi,%eax
  0xa7722cd7: jb     0xa7722d22
  0xa7722cdd: mov    $0xa75af400,%edi
  0xa7722ce2: cmp    %edi,%eax
  0xa7722ce4: jbe    0xa7722cf7
  0xa7722cea: mov    $0xa75b1728,%edi
  0xa7722cef: cmp    %edi,%eax
  0xa7722cf1: jb     0xa7722d22
  0xa7722cf7: mov    $0xa76b4e40,%edi
  0xa7722cfc: cmp    %edi,%eax
  0xa7722cfe: jbe    0xa7722d11
  0xa7722d04: mov    $0xa76ba430,%edi
  0xa7722d09: cmp    %edi,%eax
  0xa7722d0b: jb     0xa7722d22
  ;; i2c adapter must return to an interpreter frame
  0xa7722d11: push   $0xb75a2830
  0xa7722d16: call   0xa7722d1b
  0xa7722d1b: pusha  
  0xa7722d1c: call   0xb7052f32
  0xa7722d21: hlt    
  ;; } verify_i2ce 
  0xa7722d22: mov    %esp,%edi
  0xa7722d24: sub    $0x10,%esp
  0xa7722d27: and    $0xfffffff0,%esp
  0xa7722d2a: push   %eax
  0xa7722d2b: mov    %edi,%eax
  0xa7722d2d: mov    0x30(%ebx),%edi
  0xa7722d30: mov    0x18(%eax),%ecx
  0xa7722d33: mov    0x10(%eax),%esi
  0xa7722d36: mov    %esi,0x4(%esp)
  0xa7722d3a: mov    0x14(%eax),%esi
  0xa7722d3d: mov    %esi,0x8(%esp)
  0xa7722d41: mov    0xc(%eax),%edx
  0xa7722d44: mov    0x4(%eax),%esi
  0xa7722d47: mov    %esi,0xc(%esp)
  0xa7722d4b: mov    0x8(%eax),%esi
  0xa7722d4e: mov    %esi,0x10(%esp)
  0xa7722d52: mov    %esp,%eax
  0xa7722d54: shr    $0xc,%eax
  0xa7722d57: mov    -0x486bdba0(,%eax,4),%eax
  0xa7722d5e: mov    %ebx,0x16c(%eax)
  0xa7722d64: mov    %ebx,%eax
  0xa7722d66: jmp    *%edi
  0xa7722d68: mov    0x4(%ecx),%ebx
  0xa7722d6b: cmp    0x8(%eax),%ebx
  0xa7722d6e: mov    0x4(%eax),%ebx
  0xa7722d71: jne    0xa7722d84
  0xa7722d77: cmpl   $0x0,0x34(%ebx)
  0xa7722d7e: je     0xa7722dc3
  0xa7722d84: jmp    0xa7692560
  0xa7722d89: cmpl   $0x0,0x34(%ebx)
  0xa7722d90: je     0xa7722dc3
  0xa7722d96: mov    (%esp),%eax
  0xa7722d99: pusha  
  0xa7722d9a: pushf  
  0xa7722d9b: sub    $0x10,%esp
  0xa7722d9e: vmovsd %xmm0,(%esp)
  0xa7722da3: vmovsd %xmm1,0x8(%esp)
  0xa7722da9: push   %eax
  0xa7722daa: push   %ebx
  0xa7722dab: call   0xb71d62fc
  0xa7722db0: add    $0x8,%esp
  0xa7722db3: vmovsd (%esp),%xmm0
  0xa7722db8: vmovsd 0x8(%esp),%xmm1
  0xa7722dbe: add    $0x10,%esp
  0xa7722dc1: popf   
  0xa7722dc2: popa   
  0xa7722dc3: pop    %eax
  0xa7722dc4: mov    %esp,%esi
  0xa7722dc6: sub    $0x18,%esp
  0xa7722dc9: mov    %ecx,0x14(%esp)
  0xa7722dcd: mov    0x18(%esp),%edi
  0xa7722dd1: mov    %edi,0xc(%esp)
  0xa7722dd5: mov    0x1c(%esp),%edi
  0xa7722dd9: mov    %edi,0x10(%esp)
  0xa7722ddd: mov    %edx,0x8(%esp)
  0xa7722de1: mov    0x20(%esp),%edi
  0xa7722de5: mov    %edi,(%esp)
  0xa7722de8: mov    0x24(%esp),%edi
  0xa7722dec: mov    %edi,0x4(%esp)
  0xa7722df0: mov    0x28(%ebx),%ecx
  0xa7722df3: push   %eax
  0xa7722df4: jmp    *%ecx

AHE@0x63406984: 0xbeabe000 i2c: 0xa7722e80 c2i: 0xa7722f46 c2iUV: 0xa7722f25
i2c argument handler #68 for: static (JIJ)V (303 bytes generated)
c2i argument handler starts at 0xa7722f46
  0xa7722e80: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7722e83: mov    $0xa75b1ac0,%edi
  0xa7722e88: cmp    %edi,%eax
  0xa7722e8a: jbe    0xa7722e9d
  0xa7722e90: mov    $0xa7691ac0,%edi
  0xa7722e95: cmp    %edi,%eax
  0xa7722e97: jb     0xa7722ee2
  0xa7722e9d: mov    $0xa75af400,%edi
  0xa7722ea2: cmp    %edi,%eax
  0xa7722ea4: jbe    0xa7722eb7
  0xa7722eaa: mov    $0xa75b1728,%edi
  0xa7722eaf: cmp    %edi,%eax
  0xa7722eb1: jb     0xa7722ee2
  0xa7722eb7: mov    $0xa76b4e40,%edi
  0xa7722ebc: cmp    %edi,%eax
  0xa7722ebe: jbe    0xa7722ed1
  0xa7722ec4: mov    $0xa76ba430,%edi
  0xa7722ec9: cmp    %edi,%eax
  0xa7722ecb: jb     0xa7722ee2
  ;; i2c adapter must return to an interpreter frame
  0xa7722ed1: push   $0xb75a2830
  0xa7722ed6: call   0xa7722edb
  0xa7722edb: pusha  
  0xa7722edc: call   0xb7052f32
  0xa7722ee1: hlt    
  ;; } verify_i2ce 
  0xa7722ee2: mov    %esp,%edi
  0xa7722ee4: sub    $0x10,%esp
  0xa7722ee7: and    $0xfffffff0,%esp
  0xa7722eea: push   %eax
  0xa7722eeb: mov    %edi,%eax
  0xa7722eed: mov    0x30(%ebx),%edi
  0xa7722ef0: mov    0x10(%eax),%esi
  0xa7722ef3: mov    %esi,0x4(%esp)
  0xa7722ef7: mov    0x14(%eax),%esi
  0xa7722efa: mov    %esi,0x8(%esp)
  0xa7722efe: mov    0xc(%eax),%ecx
  0xa7722f01: mov    0x4(%eax),%esi
  0xa7722f04: mov    %esi,0xc(%esp)
  0xa7722f08: mov    0x8(%eax),%esi
  0xa7722f0b: mov    %esi,0x10(%esp)
  0xa7722f0f: mov    %esp,%eax
  0xa7722f11: shr    $0xc,%eax
  0xa7722f14: mov    -0x486bdba0(,%eax,4),%eax
  0xa7722f1b: mov    %ebx,0x16c(%eax)
  0xa7722f21: mov    %ebx,%eax
  0xa7722f23: jmp    *%edi
  0xa7722f25: mov    0x4(%ecx),%ebx
  0xa7722f28: cmp    0x8(%eax),%ebx
  0xa7722f2b: mov    0x4(%eax),%ebx
  0xa7722f2e: jne    0xa7722f41
  0xa7722f34: cmpl   $0x0,0x34(%ebx)
  0xa7722f3b: je     0xa7722f80
  0xa7722f41: jmp    0xa7692560
  0xa7722f46: cmpl   $0x0,0x34(%ebx)
  0xa7722f4d: je     0xa7722f80
  0xa7722f53: mov    (%esp),%eax
  0xa7722f56: pusha  
  0xa7722f57: pushf  
  0xa7722f58: sub    $0x10,%esp
  0xa7722f5b: vmovsd %xmm0,(%esp)
  0xa7722f60: vmovsd %xmm1,0x8(%esp)
  0xa7722f66: push   %eax
  0xa7722f67: push   %ebx
  0xa7722f68: call   0xb71d62fc
  0xa7722f6d: add    $0x8,%esp
  0xa7722f70: vmovsd (%esp),%xmm0
  0xa7722f75: vmovsd 0x8(%esp),%xmm1
  0xa7722f7b: add    $0x10,%esp
  0xa7722f7e: popf   
  0xa7722f7f: popa   
  0xa7722f80: pop    %eax
  0xa7722f81: mov    %esp,%esi
  0xa7722f83: sub    $0x14,%esp
  0xa7722f86: mov    0x14(%esp),%edi
  0xa7722f8a: mov    %edi,0xc(%esp)
  0xa7722f8e: mov    0x18(%esp),%edi
  0xa7722f92: mov    %edi,0x10(%esp)
  0xa7722f96: mov    %ecx,0x8(%esp)
  0xa7722f9a: mov    0x1c(%esp),%edi
  0xa7722f9e: mov    %edi,(%esp)
  0xa7722fa1: mov    0x20(%esp),%edi
  0xa7722fa5: mov    %edi,0x4(%esp)
  0xa7722fa9: mov    0x28(%ebx),%ecx
  0xa7722fac: push   %eax
  0xa7722fad: jmp    *%ecx

AHE@0x634069a8: 0xaaabebe0 i2c: 0xa7723040 c2i: 0xa7723110 c2iUV: 0xa77230ef
i2c argument handler #69 for: receiver (IIJJ)I (325 bytes generated)
c2i argument handler starts at 0xa7723110
  0xa7723040: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7723043: mov    $0xa75b1ac0,%edi
  0xa7723048: cmp    %edi,%eax
  0xa772304a: jbe    0xa772305d
  0xa7723050: mov    $0xa7691ac0,%edi
  0xa7723055: cmp    %edi,%eax
  0xa7723057: jb     0xa77230a2
  0xa772305d: mov    $0xa75af400,%edi
  0xa7723062: cmp    %edi,%eax
  0xa7723064: jbe    0xa7723077
  0xa772306a: mov    $0xa75b1728,%edi
  0xa772306f: cmp    %edi,%eax
  0xa7723071: jb     0xa77230a2
  0xa7723077: mov    $0xa76b4e40,%edi
  0xa772307c: cmp    %edi,%eax
  0xa772307e: jbe    0xa7723091
  0xa7723084: mov    $0xa76ba430,%edi
  0xa7723089: cmp    %edi,%eax
  0xa772308b: jb     0xa77230a2
  ;; i2c adapter must return to an interpreter frame
  0xa7723091: push   $0xb75a2830
  0xa7723096: call   0xa772309b
  0xa772309b: pusha  
  0xa772309c: call   0xb7052f32
  0xa77230a1: hlt    
  ;; } verify_i2ce 
  0xa77230a2: mov    %esp,%edi
  0xa77230a4: sub    $0x18,%esp
  0xa77230a7: and    $0xfffffff0,%esp
  0xa77230aa: push   %eax
  0xa77230ab: mov    %edi,%eax
  0xa77230ad: mov    0x30(%ebx),%edi
  0xa77230b0: mov    0x1c(%eax),%ecx
  0xa77230b3: mov    0x18(%eax),%edx
  0xa77230b6: mov    0x14(%eax),%esi
  0xa77230b9: mov    %esi,0x14(%esp)
  0xa77230bd: mov    0xc(%eax),%esi
  0xa77230c0: mov    %esi,0x4(%esp)
  0xa77230c4: mov    0x10(%eax),%esi
  0xa77230c7: mov    %esi,0x8(%esp)
  0xa77230cb: mov    0x4(%eax),%esi
  0xa77230ce: mov    %esi,0xc(%esp)
  0xa77230d2: mov    0x8(%eax),%esi
  0xa77230d5: mov    %esi,0x10(%esp)
  0xa77230d9: mov    %esp,%eax
  0xa77230db: shr    $0xc,%eax
  0xa77230de: mov    -0x486bdba0(,%eax,4),%eax
  0xa77230e5: mov    %ebx,0x16c(%eax)
  0xa77230eb: mov    %ebx,%eax
  0xa77230ed: jmp    *%edi
  0xa77230ef: mov    0x4(%ecx),%ebx
  0xa77230f2: cmp    0x8(%eax),%ebx
  0xa77230f5: mov    0x4(%eax),%ebx
  0xa77230f8: jne    0xa772310b
  0xa77230fe: cmpl   $0x0,0x34(%ebx)
  0xa7723105: je     0xa772314a
  0xa772310b: jmp    0xa7692560
  0xa7723110: cmpl   $0x0,0x34(%ebx)
  0xa7723117: je     0xa772314a
  0xa772311d: mov    (%esp),%eax
  0xa7723120: pusha  
  0xa7723121: pushf  
  0xa7723122: sub    $0x10,%esp
  0xa7723125: vmovsd %xmm0,(%esp)
  0xa772312a: vmovsd %xmm1,0x8(%esp)
  0xa7723130: push   %eax
  0xa7723131: push   %ebx
  0xa7723132: call   0xb71d62fc
  0xa7723137: add    $0x8,%esp
  0xa772313a: vmovsd (%esp),%xmm0
  0xa772313f: vmovsd 0x8(%esp),%xmm1
  0xa7723145: add    $0x10,%esp
  0xa7723148: popf   
  0xa7723149: popa   
  0xa772314a: pop    %eax
  0xa772314b: mov    %esp,%esi
  0xa772314d: sub    $0x1c,%esp
  0xa7723150: mov    %ecx,0x18(%esp)
  0xa7723154: mov    %edx,0x14(%esp)
  0xa7723158: mov    0x2c(%esp),%edi
  0xa772315c: mov    %edi,0x10(%esp)
  0xa7723160: mov    0x1c(%esp),%edi
  0xa7723164: mov    %edi,0x8(%esp)
  0xa7723168: mov    0x20(%esp),%edi
  0xa772316c: mov    %edi,0xc(%esp)
  0xa7723170: mov    0x24(%esp),%edi
  0xa7723174: mov    %edi,(%esp)
  0xa7723177: mov    0x28(%esp),%edi
  0xa772317b: mov    %edi,0x4(%esp)
  0xa772317f: mov    0x28(%ebx),%ecx
  0xa7723182: push   %eax
  0xa7723183: jmp    *%ecx

AHE@0x634069cc: 0xaabebea0 i2c: 0xa7723240 c2i: 0xa7723310 c2iUV: 0xa77232ef
i2c argument handler #70 for: receiver (IJJLjava/lang/String;)V (325 bytes generated)
c2i argument handler starts at 0xa7723310
  0xa7723240: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7723243: mov    $0xa75b1ac0,%edi
  0xa7723248: cmp    %edi,%eax
  0xa772324a: jbe    0xa772325d
  0xa7723250: mov    $0xa7691ac0,%edi
  0xa7723255: cmp    %edi,%eax
  0xa7723257: jb     0xa77232a2
  0xa772325d: mov    $0xa75af400,%edi
  0xa7723262: cmp    %edi,%eax
  0xa7723264: jbe    0xa7723277
  0xa772326a: mov    $0xa75b1728,%edi
  0xa772326f: cmp    %edi,%eax
  0xa7723271: jb     0xa77232a2
  0xa7723277: mov    $0xa76b4e40,%edi
  0xa772327c: cmp    %edi,%eax
  0xa772327e: jbe    0xa7723291
  0xa7723284: mov    $0xa76ba430,%edi
  0xa7723289: cmp    %edi,%eax
  0xa772328b: jb     0xa77232a2
  ;; i2c adapter must return to an interpreter frame
  0xa7723291: push   $0xb75a2830
  0xa7723296: call   0xa772329b
  0xa772329b: pusha  
  0xa772329c: call   0xb7052f32
  0xa77232a1: hlt    
  ;; } verify_i2ce 
  0xa77232a2: mov    %esp,%edi
  0xa77232a4: sub    $0x18,%esp
  0xa77232a7: and    $0xfffffff0,%esp
  0xa77232aa: push   %eax
  0xa77232ab: mov    %edi,%eax
  0xa77232ad: mov    0x30(%ebx),%edi
  0xa77232b0: mov    0x1c(%eax),%ecx
  0xa77232b3: mov    0x18(%eax),%edx
  0xa77232b6: mov    0x10(%eax),%esi
  0xa77232b9: mov    %esi,0x4(%esp)
  0xa77232bd: mov    0x14(%eax),%esi
  0xa77232c0: mov    %esi,0x8(%esp)
  0xa77232c4: mov    0x8(%eax),%esi
  0xa77232c7: mov    %esi,0xc(%esp)
  0xa77232cb: mov    0xc(%eax),%esi
  0xa77232ce: mov    %esi,0x10(%esp)
  0xa77232d2: mov    0x4(%eax),%esi
  0xa77232d5: mov    %esi,0x14(%esp)
  0xa77232d9: mov    %esp,%eax
  0xa77232db: shr    $0xc,%eax
  0xa77232de: mov    -0x486bdba0(,%eax,4),%eax
  0xa77232e5: mov    %ebx,0x16c(%eax)
  0xa77232eb: mov    %ebx,%eax
  0xa77232ed: jmp    *%edi
  0xa77232ef: mov    0x4(%ecx),%ebx
  0xa77232f2: cmp    0x8(%eax),%ebx
  0xa77232f5: mov    0x4(%eax),%ebx
  0xa77232f8: jne    0xa772330b
  0xa77232fe: cmpl   $0x0,0x34(%ebx)
  0xa7723305: je     0xa772334a
  0xa772330b: jmp    0xa7692560
  0xa7723310: cmpl   $0x0,0x34(%ebx)
  0xa7723317: je     0xa772334a
  0xa772331d: mov    (%esp),%eax
  0xa7723320: pusha  
  0xa7723321: pushf  
  0xa7723322: sub    $0x10,%esp
  0xa7723325: vmovsd %xmm0,(%esp)
  0xa772332a: vmovsd %xmm1,0x8(%esp)
  0xa7723330: push   %eax
  0xa7723331: push   %ebx
  0xa7723332: call   0xb71d62fc
  0xa7723337: add    $0x8,%esp
  0xa772333a: vmovsd (%esp),%xmm0
  0xa772333f: vmovsd 0x8(%esp),%xmm1
  0xa7723345: add    $0x10,%esp
  0xa7723348: popf   
  0xa7723349: popa   
  0xa772334a: pop    %eax
  0xa772334b: mov    %esp,%esi
  0xa772334d: sub    $0x1c,%esp
  0xa7723350: mov    %ecx,0x18(%esp)
  0xa7723354: mov    %edx,0x14(%esp)
  0xa7723358: mov    0x1c(%esp),%edi
  0xa772335c: mov    %edi,0xc(%esp)
  0xa7723360: mov    0x20(%esp),%edi
  0xa7723364: mov    %edi,0x10(%esp)
  0xa7723368: mov    0x24(%esp),%edi
  0xa772336c: mov    %edi,0x4(%esp)
  0xa7723370: mov    0x28(%esp),%edi
  0xa7723374: mov    %edi,0x8(%esp)
  0xa7723378: mov    0x2c(%esp),%edi
  0xa772337c: mov    %edi,(%esp)
  0xa772337f: mov    0x28(%ebx),%ecx
  0xa7723382: push   %eax
  0xa7723383: jmp    *%ecx

AHE@0x634069f0: 0xaaabebea i2c: 0xa7723440 c2i: 0xa7723517 c2iUV: 0xa77234f6
i2c argument handler #71 for: receiver (IIJJLjava/lang/String;)V (340 bytes generated)
c2i argument handler starts at 0xa7723517
  0xa7723440: mov    (%esp),%eax
  ;; verify_i2c { 
  0xa7723443: mov    $0xa75b1ac0,%edi
  0xa7723448: cmp    %edi,%eax
  0xa772344a: jbe    0xa772345d
  0xa7723450: mov    $0xa7691ac0,%edi
  0xa7723455: cmp    %edi,%eax
  0xa7723457: jb     0xa77234a2
  0xa772345d: mov    $0xa75af400,%edi
  0xa7723462: cmp    %edi,%eax
  0xa7723464: jbe    0xa7723477
  0xa772346a: mov    $0xa75b1728,%edi
  0xa772346f: cmp    %edi,%eax
  0xa7723471: jb     0xa77234a2
  0xa7723477: mov    $0xa76b4e40,%edi
  0xa772347c: cmp    %edi,%eax
  0xa772347e: jbe    0xa7723491
  0xa7723484: mov    $0xa76ba430,%edi
  0xa7723489: cmp    %edi,%eax
  0xa772348b: jb     0xa77234a2
  ;; i2c adapter must return to an interpreter frame
  0xa7723491: push   $0xb75a2830
  0xa7723496: call   0xa772349b
  0xa772349b: pusha  
  0xa772349c: call   0xb7052f32
  0xa77234a1: hlt    
  ;; } verify_i2ce 
  0xa77234a2: mov    %esp,%edi
  0xa77234a4: sub    $0x18,%esp
  0xa77234a7: and    $0xfffffff0,%esp
  0xa77234aa: push   %eax
  0xa77234ab: mov    %edi,%eax
  0xa77234ad: mov    0x30(%ebx),%edi
  0xa77234b0: mov    0x20(%eax),%ecx
  0xa77234b3: mov    0x1c(%eax),%edx
  0xa77234b6: mov    0x18(%eax),%esi
  0xa77234b9: mov    %esi,0x14(%esp)
  0xa77234bd: mov    0x10(%eax),%esi
  0xa77234c0: mov    %esi,0x4(%esp)
  0xa77234c4: mov    0x14(%eax),%esi
  0xa77234c7: mov    %esi,0x8(%esp)
  0xa77234cb: mov    0x8(%eax),%esi
  0xa77234ce: mov    %esi,0xc(%esp)
  0xa77234d2: mov    0xc(%eax),%esi
  0xa77234d5: mov    %esi,0x10(%esp)
  0xa77234d9: mov    0x4(%eax),%esi
  0xa77234dc: mov    %esi,0x18(%esp)
  0xa77234e0: mov    %esp,%eax
  0xa77234e2: shr    $0xc,%eax
  0xa77234e5: mov    -0x486bdba0(,%eax,4),%eax
  0xa77234ec: mov    %ebx,0x16c(%eax)
  0xa77234f2: mov    %ebx,%eax
  0xa77234f4: jmp    *%edi
  0xa77234f6: mov    0x4(%ecx),%ebx
  0xa77234f9: cmp    0x8(%eax),%ebx
  0xa77234fc: mov    0x4(%eax),%ebx
  0xa77234ff: jne    0xa7723512
  0xa7723505: cmpl   $0x0,0x34(%ebx)
  0xa772350c: je     0xa7723551
  0xa7723512: jmp    0xa7692560
  0xa7723517: cmpl   $0x0,0x34(%ebx)
  0xa772351e: je     0xa7723551
  0xa7723524: mov    (%esp),%eax
  0xa7723527: pusha  
  0xa7723528: pushf  
  0xa7723529: sub    $0x10,%esp
  0xa772352c: vmovsd %xmm0,(%esp)
  0xa7723531: vmovsd %xmm1,0x8(%esp)
  0xa7723537: push   %eax
  0xa7723538: push   %ebx
  0xa7723539: call   0xb71d62fc
  0xa772353e: add    $0x8,%esp
  0xa7723541: vmovsd (%esp),%xmm0
  0xa7723546: vmovsd 0x8(%esp),%xmm1
  0xa772354c: add    $0x10,%esp
  0xa772354f: popf   
  0xa7723550: popa   
  0xa7723551: pop    %eax
  0xa7723552: mov    %esp,%esi
  0xa7723554: sub    $0x20,%esp
  0xa7723557: mov    %ecx,0x1c(%esp)
  0xa772355b: mov    %edx,0x18(%esp)
  0xa772355f: mov    0x30(%esp),%edi
  0xa7723563: mov    %edi,0x14(%esp)
  0xa7723567: mov    0x20(%esp),%edi
  0xa772356b: mov    %edi,0xc(%esp)
  0xa772356f: mov    0x24(%esp),%edi
  0xa7723573: mov    %edi,0x10(%esp)
  0xa7723577: mov    0x28(%esp),%edi
  0xa772357b: mov    %edi,0x4(%esp)
  0xa772357f: mov    0x2c(%esp),%edi
  0xa7723583: mov    %edi,0x8(%esp)
  0xa7723587: mov    0x34(%esp),%edi
  0xa772358b: mov    %edi,(%esp)
  0xa772358e: mov    0x28(%ebx),%ecx
  0xa7723591: push   %eax
  0xa7723592: jmp    *%ecx

hello world!

RUN FINISHED; exit value 0; real time: 1s; user: 190ms; system: 570ms
