
----------------------------------------------------------------------
Interpreter

code size        =    126K bytes
total space      =    895K bytes
wasted space     =    769K bytes

# of codelets    =    266
avg codelet size =    487 bytes


----------------------------------------------------------------------
slow signature handler  [0xa7558ae0, 0xa7558ba0]  192 bytes

Loaded disassembler from /home/zbhuang/OpenJDK/jdk8u/build/linux-x86-normal-server-slowdebug/jdk/lib/i386/hsdis-i386.so
[Disassembling for mach='i386']
  0xa7558ae0: mov    %esp,%ecx
  0xa7558ae2: call   0xa7558aec
  0xa7558ae7: jmp    0xa7558b8e
  0xa7558aec: push   %ecx
  0xa7558aed: push   %edi
  0xa7558aee: push   %ebx
  0xa7558aef: lea    0x10(%esp),%eax
  0xa7558af3: cmpl   $0x0,-0x8(%ebp)
  0xa7558afa: je     0xa7558b11
  0xa7558b00: push   $0xb7449b58
  0xa7558b05: call   0xa7558b0a
  0xa7558b0a: pusha  
  0xa7558b0b: call   0xb6ff5f32
  0xa7558b10: hlt    
  0xa7558b11: mov    %esi,-0x1c(%ebp)
  0xa7558b14: mov    %esp,%edi
  0xa7558b16: shr    $0xc,%edi
  0xa7558b19: mov    -0x4871aba0(,%edi,4),%edi
  0xa7558b20: push   %edi
  0xa7558b21: mov    %ebp,0x148(%edi)
  0xa7558b27: mov    %eax,0x140(%edi)
  0xa7558b2d: call   0xb6e5aaf8
  0xa7558b32: add    $0x10,%esp
  0xa7558b35: push   %eax
  0xa7558b36: mov    %esp,%eax
  0xa7558b38: shr    $0xc,%eax
  0xa7558b3b: mov    -0x4871aba0(,%eax,4),%eax
  0xa7558b42: cmp    %eax,%edi
  0xa7558b44: je     0xa7558b5b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7558b4a: push   $0xb74acf8c
  0xa7558b4f: call   0xa7558b54
  0xa7558b54: pusha  
  0xa7558b55: call   0xb6ff5f32
  0xa7558b5a: hlt    
  0xa7558b5b: pop    %eax
  0xa7558b5c: movl   $0x0,0x140(%edi)
  0xa7558b66: movl   $0x0,0x148(%edi)
  0xa7558b70: movl   $0x0,0x144(%edi)
  0xa7558b7a: cmpl   $0x0,0x4(%edi)
  0xa7558b81: jne    0xa7556400
  0xa7558b87: mov    -0x1c(%ebp),%esi
  0xa7558b8a: mov    -0x18(%ebp),%edi
  0xa7558b8d: ret    
  0xa7558b8e: ret    
  0xa7558b8f: nop
  0xa7558b90: int3   
  0xa7558b91: int3   
  0xa7558b92: int3   
  0xa7558b93: int3   
  0xa7558b94: int3   
  0xa7558b95: int3   
  0xa7558b96: int3   
  0xa7558b97: int3   
  0xa7558b98: int3   
  0xa7558b99: int3   
  0xa7558b9a: int3   
  0xa7558b9b: int3   
  0xa7558b9c: int3   
  0xa7558b9d: int3   
  0xa7558b9e: int3   
  0xa7558b9f: int3   

----------------------------------------------------------------------
error exits  [0xa7558bc0, 0xa7558c00]  64 bytes

  0xa7558bc0: push   $0xb7560c14
  0xa7558bc5: call   0xa7558bca
  0xa7558bca: pusha  
  0xa7558bcb: call   0xb6ff5f32
  0xa7558bd0: hlt    
  0xa7558bd1: push   $0xb7560c2c
  0xa7558bd6: call   0xa7558bdb
  0xa7558bdb: pusha  
  0xa7558bdc: call   0xb6ff5f32
  0xa7558be1: hlt    
  0xa7558be2: nop
  0xa7558be3: nop
  0xa7558be4: int3   
  0xa7558be5: int3   
  0xa7558be6: int3   
  0xa7558be7: int3   
  0xa7558be8: int3   
  0xa7558be9: int3   
  0xa7558bea: int3   
  0xa7558beb: int3   
  0xa7558bec: int3   
  0xa7558bed: int3   
  0xa7558bee: int3   
  0xa7558bef: int3   
  0xa7558bf0: int3   
  0xa7558bf1: int3   
  0xa7558bf2: int3   
  0xa7558bf3: int3   
  0xa7558bf4: int3   
  0xa7558bf5: int3   
  0xa7558bf6: int3   
  0xa7558bf7: int3   
  0xa7558bf8: int3   
  0xa7558bf9: int3   
  0xa7558bfa: int3   
  0xa7558bfb: int3   
  0xa7558bfc: int3   
  0xa7558bfd: int3   
  0xa7558bfe: int3   
  0xa7558bff: int3   

----------------------------------------------------------------------
return entry points  [0xa7558c20, 0xa755a640]  6688 bytes

  0xa7558c20: mov    -0x8(%ebp),%esp
  0xa7558c23: movl   $0x0,-0x8(%ebp)
  0xa7558c2a: mov    -0x1c(%ebp),%esi
  0xa7558c2d: mov    -0x18(%ebp),%edi
  0xa7558c30: movzwl 0x1(%esi),%ecx
  0xa7558c34: mov    -0x14(%ebp),%ebx
  0xa7558c37: shl    $0x2,%ecx
  0xa7558c3a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558c3e: and    $0xff,%ebx
  0xa7558c44: lea    (%esp,%ebx,4),%esp
  0xa7558c47: movzbl (%esi),%ebx
  0xa7558c4a: jmp    *-0x48722ae0(,%ebx,4)
  0xa7558c51: sub    $0x8,%esp
  0xa7558c54: vmovsd %xmm0,(%esp)
  0xa7558c59: fldl   (%esp)
  0xa7558c5c: add    $0x8,%esp
  0xa7558c5f: mov    -0x8(%ebp),%esp
  0xa7558c62: movl   $0x0,-0x8(%ebp)
  0xa7558c69: mov    -0x1c(%ebp),%esi
  0xa7558c6c: mov    -0x18(%ebp),%edi
  0xa7558c6f: movzwl 0x1(%esi),%ecx
  0xa7558c73: mov    -0x14(%ebp),%ebx
  0xa7558c76: shl    $0x2,%ecx
  0xa7558c79: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558c7d: and    $0xff,%ebx
  0xa7558c83: lea    (%esp,%ebx,4),%esp
  0xa7558c86: movzbl (%esi),%ebx
  0xa7558c89: jmp    *-0x487232e0(,%ebx,4)
  0xa7558c90: sub    $0x4,%esp
  0xa7558c93: vmovss %xmm0,(%esp)
  0xa7558c98: flds   (%esp)
  0xa7558c9b: add    $0x4,%esp
  0xa7558c9e: mov    -0x8(%ebp),%esp
  0xa7558ca1: movl   $0x0,-0x8(%ebp)
  0xa7558ca8: mov    -0x1c(%ebp),%esi
  0xa7558cab: mov    -0x18(%ebp),%edi
  0xa7558cae: movzwl 0x1(%esi),%ecx
  0xa7558cb2: mov    -0x14(%ebp),%ebx
  0xa7558cb5: shl    $0x2,%ecx
  0xa7558cb8: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558cbc: and    $0xff,%ebx
  0xa7558cc2: lea    (%esp,%ebx,4),%esp
  0xa7558cc5: movzbl (%esi),%ebx
  0xa7558cc8: jmp    *-0x487236e0(,%ebx,4)
  0xa7558ccf: mov    -0x8(%ebp),%esp
  0xa7558cd2: movl   $0x0,-0x8(%ebp)
  0xa7558cd9: mov    -0x1c(%ebp),%esi
  0xa7558cdc: mov    -0x18(%ebp),%edi
  0xa7558cdf: movzwl 0x1(%esi),%ecx
  0xa7558ce3: mov    -0x14(%ebp),%ebx
  0xa7558ce6: shl    $0x2,%ecx
  0xa7558ce9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558ced: and    $0xff,%ebx
  0xa7558cf3: lea    (%esp,%ebx,4),%esp
  0xa7558cf6: movzbl (%esi),%ebx
  0xa7558cf9: jmp    *-0x48723ae0(,%ebx,4)
  0xa7558d00: mov    -0x8(%ebp),%esp
  0xa7558d03: movl   $0x0,-0x8(%ebp)
  0xa7558d0a: mov    -0x1c(%ebp),%esi
  0xa7558d0d: mov    -0x18(%ebp),%edi
  0xa7558d10: movzwl 0x1(%esi),%ecx
  0xa7558d14: mov    -0x14(%ebp),%ebx
  0xa7558d17: shl    $0x2,%ecx
  0xa7558d1a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558d1e: and    $0xff,%ebx
  0xa7558d24: lea    (%esp,%ebx,4),%esp
  0xa7558d27: movzbl (%esi),%ebx
  0xa7558d2a: jmp    *-0x48723ee0(,%ebx,4)
  0xa7558d31: mov    -0x8(%ebp),%esp
  0xa7558d34: movl   $0x0,-0x8(%ebp)
  0xa7558d3b: mov    -0x1c(%ebp),%esi
  0xa7558d3e: mov    -0x18(%ebp),%edi
  0xa7558d41: mov    -0x10(%ebp),%ebx
  0xa7558d44: test   %ebx,%ebx
  0xa7558d46: je     0xa7558db3
  0xa7558d4c: cmpb   $0xba,(%esi)
  0xa7558d4f: je     0xa7558d6b
  0xa7558d55: cmpb   $0xe9,(%esi)
  0xa7558d58: je     0xa7558d6b
  0xa7558d5e: mov    -0xc(%ebp),%ecx
  0xa7558d61: cmpb   $0xbc,0x1e(%ecx)
  0xa7558d65: jne    0xa7558db3
  0xa7558d6b: mov    %eax,%ecx
  0xa7558d6d: test   %ecx,%ecx
  0xa7558d6f: jne    0xa7558d77
  0xa7558d71: orl    $0x1,-0x4(%ebx)
  0xa7558d75: jmp    0xa7558db3
  0xa7558d77: mov    0x4(%ecx),%ecx
  0xa7558d7a: xor    -0x4(%ebx),%ecx
  0xa7558d7d: test   $0xfffffffc,%ecx
  0xa7558d83: je     0xa7558db3
  0xa7558d85: test   $0x2,%ecx
  0xa7558d8b: jne    0xa7558db3
  0xa7558d8d: cmpl   $0x0,-0x4(%ebx)
  0xa7558d94: je     0xa7558db0
  0xa7558d96: cmpl   $0x1,-0x4(%ebx)
  0xa7558d9d: je     0xa7558db0
  0xa7558d9f: xor    -0x4(%ebx),%ecx
  0xa7558da2: test   $0xfffffffc,%ecx
  0xa7558da8: je     0xa7558db3
  0xa7558daa: orl    $0x2,-0x4(%ebx)
  0xa7558dae: jmp    0xa7558db3
  0xa7558db0: mov    %ecx,-0x4(%ebx)
  0xa7558db3: movzwl 0x1(%esi),%ecx
  0xa7558db7: mov    -0x14(%ebp),%ebx
  0xa7558dba: shl    $0x2,%ecx
  0xa7558dbd: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558dc1: and    $0xff,%ebx
  0xa7558dc7: lea    (%esp,%ebx,4),%esp
  0xa7558dca: movzbl (%esi),%ebx
  0xa7558dcd: jmp    *-0x48722ee0(,%ebx,4)
  0xa7558dd4: mov    -0x8(%ebp),%esp
  0xa7558dd7: movl   $0x0,-0x8(%ebp)
  0xa7558dde: mov    -0x1c(%ebp),%esi
  0xa7558de1: mov    -0x18(%ebp),%edi
  0xa7558de4: movzwl 0x1(%esi),%ecx
  0xa7558de8: mov    -0x14(%ebp),%ebx
  0xa7558deb: shl    $0x2,%ecx
  0xa7558dee: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558df2: and    $0xff,%ebx
  0xa7558df8: lea    (%esp,%ebx,4),%esp
  0xa7558dfb: movzbl (%esi),%ebx
  0xa7558dfe: jmp    *-0x48723ee0(,%ebx,4)
  0xa7558e05: mov    -0x8(%ebp),%esp
  0xa7558e08: movl   $0x0,-0x8(%ebp)
  0xa7558e0f: mov    -0x1c(%ebp),%esi
  0xa7558e12: mov    -0x18(%ebp),%edi
  0xa7558e15: movzwl 0x1(%esi),%ecx
  0xa7558e19: mov    -0x14(%ebp),%ebx
  0xa7558e1c: shl    $0x2,%ecx
  0xa7558e1f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558e23: and    $0xff,%ebx
  0xa7558e29: lea    (%esp,%ebx,4),%esp
  0xa7558e2c: movzbl (%esi),%ebx
  0xa7558e2f: jmp    *-0x48723ee0(,%ebx,4)
  0xa7558e36: mov    -0x8(%ebp),%esp
  0xa7558e39: movl   $0x0,-0x8(%ebp)
  0xa7558e40: mov    -0x1c(%ebp),%esi
  0xa7558e43: mov    -0x18(%ebp),%edi
  0xa7558e46: movzwl 0x1(%esi),%ecx
  0xa7558e4a: mov    -0x14(%ebp),%ebx
  0xa7558e4d: shl    $0x2,%ecx
  0xa7558e50: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558e54: and    $0xff,%ebx
  0xa7558e5a: lea    (%esp,%ebx,4),%esp
  0xa7558e5d: movzbl (%esi),%ebx
  0xa7558e60: jmp    *-0x48723ee0(,%ebx,4)
  0xa7558e67: mov    -0x8(%ebp),%esp
  0xa7558e6a: movl   $0x0,-0x8(%ebp)
  0xa7558e71: mov    -0x1c(%ebp),%esi
  0xa7558e74: mov    -0x18(%ebp),%edi
  0xa7558e77: movzwl 0x1(%esi),%ecx
  0xa7558e7b: mov    -0x14(%ebp),%ebx
  0xa7558e7e: shl    $0x2,%ecx
  0xa7558e81: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558e85: and    $0xff,%ebx
  0xa7558e8b: lea    (%esp,%ebx,4),%esp
  0xa7558e8e: movzbl (%esi),%ebx
  0xa7558e91: jmp    *-0x48723ee0(,%ebx,4)
  0xa7558e98: mov    -0x8(%ebp),%esp
  0xa7558e9b: movl   $0x0,-0x8(%ebp)
  0xa7558ea2: mov    -0x1c(%ebp),%esi
  0xa7558ea5: mov    -0x18(%ebp),%edi
  0xa7558ea8: movzwl 0x1(%esi),%ecx
  0xa7558eac: mov    -0x14(%ebp),%ebx
  0xa7558eaf: shl    $0x2,%ecx
  0xa7558eb2: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558eb6: and    $0xff,%ebx
  0xa7558ebc: lea    (%esp,%ebx,4),%esp
  0xa7558ebf: movzbl 0x1(%esi),%ebx
  0xa7558ec3: inc    %esi
  0xa7558ec4: jmp    *-0x48722ae0(,%ebx,4)
  0xa7558ecb: sub    $0x8,%esp
  0xa7558ece: vmovsd %xmm0,(%esp)
  0xa7558ed3: fldl   (%esp)
  0xa7558ed6: add    $0x8,%esp
  0xa7558ed9: mov    -0x8(%ebp),%esp
  0xa7558edc: movl   $0x0,-0x8(%ebp)
  0xa7558ee3: mov    -0x1c(%ebp),%esi
  0xa7558ee6: mov    -0x18(%ebp),%edi
  0xa7558ee9: movzwl 0x1(%esi),%ecx
  0xa7558eed: mov    -0x14(%ebp),%ebx
  0xa7558ef0: shl    $0x2,%ecx
  0xa7558ef3: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558ef7: and    $0xff,%ebx
  0xa7558efd: lea    (%esp,%ebx,4),%esp
  0xa7558f00: movzbl 0x1(%esi),%ebx
  0xa7558f04: inc    %esi
  0xa7558f05: jmp    *-0x487232e0(,%ebx,4)
  0xa7558f0c: sub    $0x4,%esp
  0xa7558f0f: vmovss %xmm0,(%esp)
  0xa7558f14: flds   (%esp)
  0xa7558f17: add    $0x4,%esp
  0xa7558f1a: mov    -0x8(%ebp),%esp
  0xa7558f1d: movl   $0x0,-0x8(%ebp)
  0xa7558f24: mov    -0x1c(%ebp),%esi
  0xa7558f27: mov    -0x18(%ebp),%edi
  0xa7558f2a: movzwl 0x1(%esi),%ecx
  0xa7558f2e: mov    -0x14(%ebp),%ebx
  0xa7558f31: shl    $0x2,%ecx
  0xa7558f34: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558f38: and    $0xff,%ebx
  0xa7558f3e: lea    (%esp,%ebx,4),%esp
  0xa7558f41: movzbl 0x1(%esi),%ebx
  0xa7558f45: inc    %esi
  0xa7558f46: jmp    *-0x487236e0(,%ebx,4)
  0xa7558f4d: mov    -0x8(%ebp),%esp
  0xa7558f50: movl   $0x0,-0x8(%ebp)
  0xa7558f57: mov    -0x1c(%ebp),%esi
  0xa7558f5a: mov    -0x18(%ebp),%edi
  0xa7558f5d: movzwl 0x1(%esi),%ecx
  0xa7558f61: mov    -0x14(%ebp),%ebx
  0xa7558f64: shl    $0x2,%ecx
  0xa7558f67: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558f6b: and    $0xff,%ebx
  0xa7558f71: lea    (%esp,%ebx,4),%esp
  0xa7558f74: movzbl 0x1(%esi),%ebx
  0xa7558f78: inc    %esi
  0xa7558f79: jmp    *-0x48723ae0(,%ebx,4)
  0xa7558f80: mov    -0x8(%ebp),%esp
  0xa7558f83: movl   $0x0,-0x8(%ebp)
  0xa7558f8a: mov    -0x1c(%ebp),%esi
  0xa7558f8d: mov    -0x18(%ebp),%edi
  0xa7558f90: movzwl 0x1(%esi),%ecx
  0xa7558f94: mov    -0x14(%ebp),%ebx
  0xa7558f97: shl    $0x2,%ecx
  0xa7558f9a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7558f9e: and    $0xff,%ebx
  0xa7558fa4: lea    (%esp,%ebx,4),%esp
  0xa7558fa7: movzbl 0x1(%esi),%ebx
  0xa7558fab: inc    %esi
  0xa7558fac: jmp    *-0x48723ee0(,%ebx,4)
  0xa7558fb3: mov    -0x8(%ebp),%esp
  0xa7558fb6: movl   $0x0,-0x8(%ebp)
  0xa7558fbd: mov    -0x1c(%ebp),%esi
  0xa7558fc0: mov    -0x18(%ebp),%edi
  0xa7558fc3: mov    -0x10(%ebp),%ebx
  0xa7558fc6: test   %ebx,%ebx
  0xa7558fc8: je     0xa7559035
  0xa7558fce: cmpb   $0xba,(%esi)
  0xa7558fd1: je     0xa7558fed
  0xa7558fd7: cmpb   $0xe9,(%esi)
  0xa7558fda: je     0xa7558fed
  0xa7558fe0: mov    -0xc(%ebp),%ecx
  0xa7558fe3: cmpb   $0xbc,0x1e(%ecx)
  0xa7558fe7: jne    0xa7559035
  0xa7558fed: mov    %eax,%ecx
  0xa7558fef: test   %ecx,%ecx
  0xa7558ff1: jne    0xa7558ff9
  0xa7558ff3: orl    $0x1,-0x4(%ebx)
  0xa7558ff7: jmp    0xa7559035
  0xa7558ff9: mov    0x4(%ecx),%ecx
  0xa7558ffc: xor    -0x4(%ebx),%ecx
  0xa7558fff: test   $0xfffffffc,%ecx
  0xa7559005: je     0xa7559035
  0xa7559007: test   $0x2,%ecx
  0xa755900d: jne    0xa7559035
  0xa755900f: cmpl   $0x0,-0x4(%ebx)
  0xa7559016: je     0xa7559032
  0xa7559018: cmpl   $0x1,-0x4(%ebx)
  0xa755901f: je     0xa7559032
  0xa7559021: xor    -0x4(%ebx),%ecx
  0xa7559024: test   $0xfffffffc,%ecx
  0xa755902a: je     0xa7559035
  0xa755902c: orl    $0x2,-0x4(%ebx)
  0xa7559030: jmp    0xa7559035
  0xa7559032: mov    %ecx,-0x4(%ebx)
  0xa7559035: movzwl 0x1(%esi),%ecx
  0xa7559039: mov    -0x14(%ebp),%ebx
  0xa755903c: shl    $0x2,%ecx
  0xa755903f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559043: and    $0xff,%ebx
  0xa7559049: lea    (%esp,%ebx,4),%esp
  0xa755904c: movzbl 0x1(%esi),%ebx
  0xa7559050: inc    %esi
  0xa7559051: jmp    *-0x48722ee0(,%ebx,4)
  0xa7559058: mov    -0x8(%ebp),%esp
  0xa755905b: movl   $0x0,-0x8(%ebp)
  0xa7559062: mov    -0x1c(%ebp),%esi
  0xa7559065: mov    -0x18(%ebp),%edi
  0xa7559068: movzwl 0x1(%esi),%ecx
  0xa755906c: mov    -0x14(%ebp),%ebx
  0xa755906f: shl    $0x2,%ecx
  0xa7559072: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559076: and    $0xff,%ebx
  0xa755907c: lea    (%esp,%ebx,4),%esp
  0xa755907f: movzbl 0x1(%esi),%ebx
  0xa7559083: inc    %esi
  0xa7559084: jmp    *-0x48723ee0(,%ebx,4)
  0xa755908b: mov    -0x8(%ebp),%esp
  0xa755908e: movl   $0x0,-0x8(%ebp)
  0xa7559095: mov    -0x1c(%ebp),%esi
  0xa7559098: mov    -0x18(%ebp),%edi
  0xa755909b: movzwl 0x1(%esi),%ecx
  0xa755909f: mov    -0x14(%ebp),%ebx
  0xa75590a2: shl    $0x2,%ecx
  0xa75590a5: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75590a9: and    $0xff,%ebx
  0xa75590af: lea    (%esp,%ebx,4),%esp
  0xa75590b2: movzbl 0x1(%esi),%ebx
  0xa75590b6: inc    %esi
  0xa75590b7: jmp    *-0x48723ee0(,%ebx,4)
  0xa75590be: mov    -0x8(%ebp),%esp
  0xa75590c1: movl   $0x0,-0x8(%ebp)
  0xa75590c8: mov    -0x1c(%ebp),%esi
  0xa75590cb: mov    -0x18(%ebp),%edi
  0xa75590ce: movzwl 0x1(%esi),%ecx
  0xa75590d2: mov    -0x14(%ebp),%ebx
  0xa75590d5: shl    $0x2,%ecx
  0xa75590d8: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75590dc: and    $0xff,%ebx
  0xa75590e2: lea    (%esp,%ebx,4),%esp
  0xa75590e5: movzbl 0x1(%esi),%ebx
  0xa75590e9: inc    %esi
  0xa75590ea: jmp    *-0x48723ee0(,%ebx,4)
  0xa75590f1: mov    -0x8(%ebp),%esp
  0xa75590f4: movl   $0x0,-0x8(%ebp)
  0xa75590fb: mov    -0x1c(%ebp),%esi
  0xa75590fe: mov    -0x18(%ebp),%edi
  0xa7559101: movzwl 0x1(%esi),%ecx
  0xa7559105: mov    -0x14(%ebp),%ebx
  0xa7559108: shl    $0x2,%ecx
  0xa755910b: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755910f: and    $0xff,%ebx
  0xa7559115: lea    (%esp,%ebx,4),%esp
  0xa7559118: movzbl 0x1(%esi),%ebx
  0xa755911c: inc    %esi
  0xa755911d: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559124: mov    -0x8(%ebp),%esp
  0xa7559127: movl   $0x0,-0x8(%ebp)
  0xa755912e: mov    -0x1c(%ebp),%esi
  0xa7559131: mov    -0x18(%ebp),%edi
  0xa7559134: movzwl 0x1(%esi),%ecx
  0xa7559138: mov    -0x14(%ebp),%ebx
  0xa755913b: shl    $0x2,%ecx
  0xa755913e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559142: and    $0xff,%ebx
  0xa7559148: lea    (%esp,%ebx,4),%esp
  0xa755914b: movzbl 0x2(%esi),%ebx
  0xa755914f: add    $0x2,%esi
  0xa7559152: jmp    *-0x48722ae0(,%ebx,4)
  0xa7559159: sub    $0x8,%esp
  0xa755915c: vmovsd %xmm0,(%esp)
  0xa7559161: fldl   (%esp)
  0xa7559164: add    $0x8,%esp
  0xa7559167: mov    -0x8(%ebp),%esp
  0xa755916a: movl   $0x0,-0x8(%ebp)
  0xa7559171: mov    -0x1c(%ebp),%esi
  0xa7559174: mov    -0x18(%ebp),%edi
  0xa7559177: movzwl 0x1(%esi),%ecx
  0xa755917b: mov    -0x14(%ebp),%ebx
  0xa755917e: shl    $0x2,%ecx
  0xa7559181: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559185: and    $0xff,%ebx
  0xa755918b: lea    (%esp,%ebx,4),%esp
  0xa755918e: movzbl 0x2(%esi),%ebx
  0xa7559192: add    $0x2,%esi
  0xa7559195: jmp    *-0x487232e0(,%ebx,4)
  0xa755919c: sub    $0x4,%esp
  0xa755919f: vmovss %xmm0,(%esp)
  0xa75591a4: flds   (%esp)
  0xa75591a7: add    $0x4,%esp
  0xa75591aa: mov    -0x8(%ebp),%esp
  0xa75591ad: movl   $0x0,-0x8(%ebp)
  0xa75591b4: mov    -0x1c(%ebp),%esi
  0xa75591b7: mov    -0x18(%ebp),%edi
  0xa75591ba: movzwl 0x1(%esi),%ecx
  0xa75591be: mov    -0x14(%ebp),%ebx
  0xa75591c1: shl    $0x2,%ecx
  0xa75591c4: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75591c8: and    $0xff,%ebx
  0xa75591ce: lea    (%esp,%ebx,4),%esp
  0xa75591d1: movzbl 0x2(%esi),%ebx
  0xa75591d5: add    $0x2,%esi
  0xa75591d8: jmp    *-0x487236e0(,%ebx,4)
  0xa75591df: mov    -0x8(%ebp),%esp
  0xa75591e2: movl   $0x0,-0x8(%ebp)
  0xa75591e9: mov    -0x1c(%ebp),%esi
  0xa75591ec: mov    -0x18(%ebp),%edi
  0xa75591ef: movzwl 0x1(%esi),%ecx
  0xa75591f3: mov    -0x14(%ebp),%ebx
  0xa75591f6: shl    $0x2,%ecx
  0xa75591f9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75591fd: and    $0xff,%ebx
  0xa7559203: lea    (%esp,%ebx,4),%esp
  0xa7559206: movzbl 0x2(%esi),%ebx
  0xa755920a: add    $0x2,%esi
  0xa755920d: jmp    *-0x48723ae0(,%ebx,4)
  0xa7559214: mov    -0x8(%ebp),%esp
  0xa7559217: movl   $0x0,-0x8(%ebp)
  0xa755921e: mov    -0x1c(%ebp),%esi
  0xa7559221: mov    -0x18(%ebp),%edi
  0xa7559224: movzwl 0x1(%esi),%ecx
  0xa7559228: mov    -0x14(%ebp),%ebx
  0xa755922b: shl    $0x2,%ecx
  0xa755922e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559232: and    $0xff,%ebx
  0xa7559238: lea    (%esp,%ebx,4),%esp
  0xa755923b: movzbl 0x2(%esi),%ebx
  0xa755923f: add    $0x2,%esi
  0xa7559242: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559249: mov    -0x8(%ebp),%esp
  0xa755924c: movl   $0x0,-0x8(%ebp)
  0xa7559253: mov    -0x1c(%ebp),%esi
  0xa7559256: mov    -0x18(%ebp),%edi
  0xa7559259: mov    -0x10(%ebp),%ebx
  0xa755925c: test   %ebx,%ebx
  0xa755925e: je     0xa75592cb
  0xa7559264: cmpb   $0xba,(%esi)
  0xa7559267: je     0xa7559283
  0xa755926d: cmpb   $0xe9,(%esi)
  0xa7559270: je     0xa7559283
  0xa7559276: mov    -0xc(%ebp),%ecx
  0xa7559279: cmpb   $0xbc,0x1e(%ecx)
  0xa755927d: jne    0xa75592cb
  0xa7559283: mov    %eax,%ecx
  0xa7559285: test   %ecx,%ecx
  0xa7559287: jne    0xa755928f
  0xa7559289: orl    $0x1,-0x4(%ebx)
  0xa755928d: jmp    0xa75592cb
  0xa755928f: mov    0x4(%ecx),%ecx
  0xa7559292: xor    -0x4(%ebx),%ecx
  0xa7559295: test   $0xfffffffc,%ecx
  0xa755929b: je     0xa75592cb
  0xa755929d: test   $0x2,%ecx
  0xa75592a3: jne    0xa75592cb
  0xa75592a5: cmpl   $0x0,-0x4(%ebx)
  0xa75592ac: je     0xa75592c8
  0xa75592ae: cmpl   $0x1,-0x4(%ebx)
  0xa75592b5: je     0xa75592c8
  0xa75592b7: xor    -0x4(%ebx),%ecx
  0xa75592ba: test   $0xfffffffc,%ecx
  0xa75592c0: je     0xa75592cb
  0xa75592c2: orl    $0x2,-0x4(%ebx)
  0xa75592c6: jmp    0xa75592cb
  0xa75592c8: mov    %ecx,-0x4(%ebx)
  0xa75592cb: movzwl 0x1(%esi),%ecx
  0xa75592cf: mov    -0x14(%ebp),%ebx
  0xa75592d2: shl    $0x2,%ecx
  0xa75592d5: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75592d9: and    $0xff,%ebx
  0xa75592df: lea    (%esp,%ebx,4),%esp
  0xa75592e2: movzbl 0x2(%esi),%ebx
  0xa75592e6: add    $0x2,%esi
  0xa75592e9: jmp    *-0x48722ee0(,%ebx,4)
  0xa75592f0: mov    -0x8(%ebp),%esp
  0xa75592f3: movl   $0x0,-0x8(%ebp)
  0xa75592fa: mov    -0x1c(%ebp),%esi
  0xa75592fd: mov    -0x18(%ebp),%edi
  0xa7559300: movzwl 0x1(%esi),%ecx
  0xa7559304: mov    -0x14(%ebp),%ebx
  0xa7559307: shl    $0x2,%ecx
  0xa755930a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755930e: and    $0xff,%ebx
  0xa7559314: lea    (%esp,%ebx,4),%esp
  0xa7559317: movzbl 0x2(%esi),%ebx
  0xa755931b: add    $0x2,%esi
  0xa755931e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559325: mov    -0x8(%ebp),%esp
  0xa7559328: movl   $0x0,-0x8(%ebp)
  0xa755932f: mov    -0x1c(%ebp),%esi
  0xa7559332: mov    -0x18(%ebp),%edi
  0xa7559335: movzwl 0x1(%esi),%ecx
  0xa7559339: mov    -0x14(%ebp),%ebx
  0xa755933c: shl    $0x2,%ecx
  0xa755933f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559343: and    $0xff,%ebx
  0xa7559349: lea    (%esp,%ebx,4),%esp
  0xa755934c: movzbl 0x2(%esi),%ebx
  0xa7559350: add    $0x2,%esi
  0xa7559353: jmp    *-0x48723ee0(,%ebx,4)
  0xa755935a: mov    -0x8(%ebp),%esp
  0xa755935d: movl   $0x0,-0x8(%ebp)
  0xa7559364: mov    -0x1c(%ebp),%esi
  0xa7559367: mov    -0x18(%ebp),%edi
  0xa755936a: movzwl 0x1(%esi),%ecx
  0xa755936e: mov    -0x14(%ebp),%ebx
  0xa7559371: shl    $0x2,%ecx
  0xa7559374: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559378: and    $0xff,%ebx
  0xa755937e: lea    (%esp,%ebx,4),%esp
  0xa7559381: movzbl 0x2(%esi),%ebx
  0xa7559385: add    $0x2,%esi
  0xa7559388: jmp    *-0x48723ee0(,%ebx,4)
  0xa755938f: mov    -0x8(%ebp),%esp
  0xa7559392: movl   $0x0,-0x8(%ebp)
  0xa7559399: mov    -0x1c(%ebp),%esi
  0xa755939c: mov    -0x18(%ebp),%edi
  0xa755939f: movzwl 0x1(%esi),%ecx
  0xa75593a3: mov    -0x14(%ebp),%ebx
  0xa75593a6: shl    $0x2,%ecx
  0xa75593a9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75593ad: and    $0xff,%ebx
  0xa75593b3: lea    (%esp,%ebx,4),%esp
  0xa75593b6: movzbl 0x2(%esi),%ebx
  0xa75593ba: add    $0x2,%esi
  0xa75593bd: jmp    *-0x48723ee0(,%ebx,4)
  0xa75593c4: mov    -0x8(%ebp),%esp
  0xa75593c7: movl   $0x0,-0x8(%ebp)
  0xa75593ce: mov    -0x1c(%ebp),%esi
  0xa75593d1: mov    -0x18(%ebp),%edi
  0xa75593d4: movzwl 0x1(%esi),%ecx
  0xa75593d8: mov    -0x14(%ebp),%ebx
  0xa75593db: shl    $0x2,%ecx
  0xa75593de: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75593e2: and    $0xff,%ebx
  0xa75593e8: lea    (%esp,%ebx,4),%esp
  0xa75593eb: movzbl 0x3(%esi),%ebx
  0xa75593ef: add    $0x3,%esi
  0xa75593f2: jmp    *-0x48722ae0(,%ebx,4)
  0xa75593f9: sub    $0x8,%esp
  0xa75593fc: vmovsd %xmm0,(%esp)
  0xa7559401: fldl   (%esp)
  0xa7559404: add    $0x8,%esp
  0xa7559407: mov    -0x8(%ebp),%esp
  0xa755940a: movl   $0x0,-0x8(%ebp)
  0xa7559411: mov    -0x1c(%ebp),%esi
  0xa7559414: mov    -0x18(%ebp),%edi
  0xa7559417: movzwl 0x1(%esi),%ecx
  0xa755941b: mov    -0x14(%ebp),%ebx
  0xa755941e: shl    $0x2,%ecx
  0xa7559421: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559425: and    $0xff,%ebx
  0xa755942b: lea    (%esp,%ebx,4),%esp
  0xa755942e: movzbl 0x3(%esi),%ebx
  0xa7559432: add    $0x3,%esi
  0xa7559435: jmp    *-0x487232e0(,%ebx,4)
  0xa755943c: sub    $0x4,%esp
  0xa755943f: vmovss %xmm0,(%esp)
  0xa7559444: flds   (%esp)
  0xa7559447: add    $0x4,%esp
  0xa755944a: mov    -0x8(%ebp),%esp
  0xa755944d: movl   $0x0,-0x8(%ebp)
  0xa7559454: mov    -0x1c(%ebp),%esi
  0xa7559457: mov    -0x18(%ebp),%edi
  0xa755945a: movzwl 0x1(%esi),%ecx
  0xa755945e: mov    -0x14(%ebp),%ebx
  0xa7559461: shl    $0x2,%ecx
  0xa7559464: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559468: and    $0xff,%ebx
  0xa755946e: lea    (%esp,%ebx,4),%esp
  0xa7559471: movzbl 0x3(%esi),%ebx
  0xa7559475: add    $0x3,%esi
  0xa7559478: jmp    *-0x487236e0(,%ebx,4)
  0xa755947f: mov    -0x8(%ebp),%esp
  0xa7559482: movl   $0x0,-0x8(%ebp)
  0xa7559489: mov    -0x1c(%ebp),%esi
  0xa755948c: mov    -0x18(%ebp),%edi
  0xa755948f: movzwl 0x1(%esi),%ecx
  0xa7559493: mov    -0x14(%ebp),%ebx
  0xa7559496: shl    $0x2,%ecx
  0xa7559499: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755949d: and    $0xff,%ebx
  0xa75594a3: lea    (%esp,%ebx,4),%esp
  0xa75594a6: movzbl 0x3(%esi),%ebx
  0xa75594aa: add    $0x3,%esi
  0xa75594ad: jmp    *-0x48723ae0(,%ebx,4)
  0xa75594b4: mov    -0x8(%ebp),%esp
  0xa75594b7: movl   $0x0,-0x8(%ebp)
  0xa75594be: mov    -0x1c(%ebp),%esi
  0xa75594c1: mov    -0x18(%ebp),%edi
  0xa75594c4: movzwl 0x1(%esi),%ecx
  0xa75594c8: mov    -0x14(%ebp),%ebx
  0xa75594cb: shl    $0x2,%ecx
  0xa75594ce: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75594d2: and    $0xff,%ebx
  0xa75594d8: lea    (%esp,%ebx,4),%esp
  0xa75594db: movzbl 0x3(%esi),%ebx
  0xa75594df: add    $0x3,%esi
  0xa75594e2: jmp    *-0x48723ee0(,%ebx,4)
  0xa75594e9: mov    -0x8(%ebp),%esp
  0xa75594ec: movl   $0x0,-0x8(%ebp)
  0xa75594f3: mov    -0x1c(%ebp),%esi
  0xa75594f6: mov    -0x18(%ebp),%edi
  0xa75594f9: mov    -0x10(%ebp),%ebx
  0xa75594fc: test   %ebx,%ebx
  0xa75594fe: je     0xa755956b
  0xa7559504: cmpb   $0xba,(%esi)
  0xa7559507: je     0xa7559523
  0xa755950d: cmpb   $0xe9,(%esi)
  0xa7559510: je     0xa7559523
  0xa7559516: mov    -0xc(%ebp),%ecx
  0xa7559519: cmpb   $0xbc,0x1e(%ecx)
  0xa755951d: jne    0xa755956b
  0xa7559523: mov    %eax,%ecx
  0xa7559525: test   %ecx,%ecx
  0xa7559527: jne    0xa755952f
  0xa7559529: orl    $0x1,-0x4(%ebx)
  0xa755952d: jmp    0xa755956b
  0xa755952f: mov    0x4(%ecx),%ecx
  0xa7559532: xor    -0x4(%ebx),%ecx
  0xa7559535: test   $0xfffffffc,%ecx
  0xa755953b: je     0xa755956b
  0xa755953d: test   $0x2,%ecx
  0xa7559543: jne    0xa755956b
  0xa7559545: cmpl   $0x0,-0x4(%ebx)
  0xa755954c: je     0xa7559568
  0xa755954e: cmpl   $0x1,-0x4(%ebx)
  0xa7559555: je     0xa7559568
  0xa7559557: xor    -0x4(%ebx),%ecx
  0xa755955a: test   $0xfffffffc,%ecx
  0xa7559560: je     0xa755956b
  0xa7559562: orl    $0x2,-0x4(%ebx)
  0xa7559566: jmp    0xa755956b
  0xa7559568: mov    %ecx,-0x4(%ebx)
  0xa755956b: movzwl 0x1(%esi),%ecx
  0xa755956f: mov    -0x14(%ebp),%ebx
  0xa7559572: shl    $0x2,%ecx
  0xa7559575: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559579: and    $0xff,%ebx
  0xa755957f: lea    (%esp,%ebx,4),%esp
  0xa7559582: movzbl 0x3(%esi),%ebx
  0xa7559586: add    $0x3,%esi
  0xa7559589: jmp    *-0x48722ee0(,%ebx,4)
  0xa7559590: mov    -0x8(%ebp),%esp
  0xa7559593: movl   $0x0,-0x8(%ebp)
  0xa755959a: mov    -0x1c(%ebp),%esi
  0xa755959d: mov    -0x18(%ebp),%edi
  0xa75595a0: movzwl 0x1(%esi),%ecx
  0xa75595a4: mov    -0x14(%ebp),%ebx
  0xa75595a7: shl    $0x2,%ecx
  0xa75595aa: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75595ae: and    $0xff,%ebx
  0xa75595b4: lea    (%esp,%ebx,4),%esp
  0xa75595b7: movzbl 0x3(%esi),%ebx
  0xa75595bb: add    $0x3,%esi
  0xa75595be: jmp    *-0x48723ee0(,%ebx,4)
  0xa75595c5: mov    -0x8(%ebp),%esp
  0xa75595c8: movl   $0x0,-0x8(%ebp)
  0xa75595cf: mov    -0x1c(%ebp),%esi
  0xa75595d2: mov    -0x18(%ebp),%edi
  0xa75595d5: movzwl 0x1(%esi),%ecx
  0xa75595d9: mov    -0x14(%ebp),%ebx
  0xa75595dc: shl    $0x2,%ecx
  0xa75595df: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75595e3: and    $0xff,%ebx
  0xa75595e9: lea    (%esp,%ebx,4),%esp
  0xa75595ec: movzbl 0x3(%esi),%ebx
  0xa75595f0: add    $0x3,%esi
  0xa75595f3: jmp    *-0x48723ee0(,%ebx,4)
  0xa75595fa: mov    -0x8(%ebp),%esp
  0xa75595fd: movl   $0x0,-0x8(%ebp)
  0xa7559604: mov    -0x1c(%ebp),%esi
  0xa7559607: mov    -0x18(%ebp),%edi
  0xa755960a: movzwl 0x1(%esi),%ecx
  0xa755960e: mov    -0x14(%ebp),%ebx
  0xa7559611: shl    $0x2,%ecx
  0xa7559614: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559618: and    $0xff,%ebx
  0xa755961e: lea    (%esp,%ebx,4),%esp
  0xa7559621: movzbl 0x3(%esi),%ebx
  0xa7559625: add    $0x3,%esi
  0xa7559628: jmp    *-0x48723ee0(,%ebx,4)
  0xa755962f: mov    -0x8(%ebp),%esp
  0xa7559632: movl   $0x0,-0x8(%ebp)
  0xa7559639: mov    -0x1c(%ebp),%esi
  0xa755963c: mov    -0x18(%ebp),%edi
  0xa755963f: movzwl 0x1(%esi),%ecx
  0xa7559643: mov    -0x14(%ebp),%ebx
  0xa7559646: shl    $0x2,%ecx
  0xa7559649: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755964d: and    $0xff,%ebx
  0xa7559653: lea    (%esp,%ebx,4),%esp
  0xa7559656: movzbl 0x3(%esi),%ebx
  0xa755965a: add    $0x3,%esi
  0xa755965d: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559664: mov    -0x8(%ebp),%esp
  0xa7559667: movl   $0x0,-0x8(%ebp)
  0xa755966e: mov    -0x1c(%ebp),%esi
  0xa7559671: mov    -0x18(%ebp),%edi
  0xa7559674: movzwl 0x1(%esi),%ecx
  0xa7559678: mov    -0x14(%ebp),%ebx
  0xa755967b: shl    $0x2,%ecx
  0xa755967e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559682: and    $0xff,%ebx
  0xa7559688: lea    (%esp,%ebx,4),%esp
  0xa755968b: movzbl 0x4(%esi),%ebx
  0xa755968f: add    $0x4,%esi
  0xa7559692: jmp    *-0x48722ae0(,%ebx,4)
  0xa7559699: sub    $0x8,%esp
  0xa755969c: vmovsd %xmm0,(%esp)
  0xa75596a1: fldl   (%esp)
  0xa75596a4: add    $0x8,%esp
  0xa75596a7: mov    -0x8(%ebp),%esp
  0xa75596aa: movl   $0x0,-0x8(%ebp)
  0xa75596b1: mov    -0x1c(%ebp),%esi
  0xa75596b4: mov    -0x18(%ebp),%edi
  0xa75596b7: movzwl 0x1(%esi),%ecx
  0xa75596bb: mov    -0x14(%ebp),%ebx
  0xa75596be: shl    $0x2,%ecx
  0xa75596c1: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75596c5: and    $0xff,%ebx
  0xa75596cb: lea    (%esp,%ebx,4),%esp
  0xa75596ce: movzbl 0x4(%esi),%ebx
  0xa75596d2: add    $0x4,%esi
  0xa75596d5: jmp    *-0x487232e0(,%ebx,4)
  0xa75596dc: sub    $0x4,%esp
  0xa75596df: vmovss %xmm0,(%esp)
  0xa75596e4: flds   (%esp)
  0xa75596e7: add    $0x4,%esp
  0xa75596ea: mov    -0x8(%ebp),%esp
  0xa75596ed: movl   $0x0,-0x8(%ebp)
  0xa75596f4: mov    -0x1c(%ebp),%esi
  0xa75596f7: mov    -0x18(%ebp),%edi
  0xa75596fa: movzwl 0x1(%esi),%ecx
  0xa75596fe: mov    -0x14(%ebp),%ebx
  0xa7559701: shl    $0x2,%ecx
  0xa7559704: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559708: and    $0xff,%ebx
  0xa755970e: lea    (%esp,%ebx,4),%esp
  0xa7559711: movzbl 0x4(%esi),%ebx
  0xa7559715: add    $0x4,%esi
  0xa7559718: jmp    *-0x487236e0(,%ebx,4)
  0xa755971f: mov    -0x8(%ebp),%esp
  0xa7559722: movl   $0x0,-0x8(%ebp)
  0xa7559729: mov    -0x1c(%ebp),%esi
  0xa755972c: mov    -0x18(%ebp),%edi
  0xa755972f: movzwl 0x1(%esi),%ecx
  0xa7559733: mov    -0x14(%ebp),%ebx
  0xa7559736: shl    $0x2,%ecx
  0xa7559739: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755973d: and    $0xff,%ebx
  0xa7559743: lea    (%esp,%ebx,4),%esp
  0xa7559746: movzbl 0x4(%esi),%ebx
  0xa755974a: add    $0x4,%esi
  0xa755974d: jmp    *-0x48723ae0(,%ebx,4)
  0xa7559754: mov    -0x8(%ebp),%esp
  0xa7559757: movl   $0x0,-0x8(%ebp)
  0xa755975e: mov    -0x1c(%ebp),%esi
  0xa7559761: mov    -0x18(%ebp),%edi
  0xa7559764: movzwl 0x1(%esi),%ecx
  0xa7559768: mov    -0x14(%ebp),%ebx
  0xa755976b: shl    $0x2,%ecx
  0xa755976e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559772: and    $0xff,%ebx
  0xa7559778: lea    (%esp,%ebx,4),%esp
  0xa755977b: movzbl 0x4(%esi),%ebx
  0xa755977f: add    $0x4,%esi
  0xa7559782: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559789: mov    -0x8(%ebp),%esp
  0xa755978c: movl   $0x0,-0x8(%ebp)
  0xa7559793: mov    -0x1c(%ebp),%esi
  0xa7559796: mov    -0x18(%ebp),%edi
  0xa7559799: mov    -0x10(%ebp),%ebx
  0xa755979c: test   %ebx,%ebx
  0xa755979e: je     0xa755980b
  0xa75597a4: cmpb   $0xba,(%esi)
  0xa75597a7: je     0xa75597c3
  0xa75597ad: cmpb   $0xe9,(%esi)
  0xa75597b0: je     0xa75597c3
  0xa75597b6: mov    -0xc(%ebp),%ecx
  0xa75597b9: cmpb   $0xbc,0x1e(%ecx)
  0xa75597bd: jne    0xa755980b
  0xa75597c3: mov    %eax,%ecx
  0xa75597c5: test   %ecx,%ecx
  0xa75597c7: jne    0xa75597cf
  0xa75597c9: orl    $0x1,-0x4(%ebx)
  0xa75597cd: jmp    0xa755980b
  0xa75597cf: mov    0x4(%ecx),%ecx
  0xa75597d2: xor    -0x4(%ebx),%ecx
  0xa75597d5: test   $0xfffffffc,%ecx
  0xa75597db: je     0xa755980b
  0xa75597dd: test   $0x2,%ecx
  0xa75597e3: jne    0xa755980b
  0xa75597e5: cmpl   $0x0,-0x4(%ebx)
  0xa75597ec: je     0xa7559808
  0xa75597ee: cmpl   $0x1,-0x4(%ebx)
  0xa75597f5: je     0xa7559808
  0xa75597f7: xor    -0x4(%ebx),%ecx
  0xa75597fa: test   $0xfffffffc,%ecx
  0xa7559800: je     0xa755980b
  0xa7559802: orl    $0x2,-0x4(%ebx)
  0xa7559806: jmp    0xa755980b
  0xa7559808: mov    %ecx,-0x4(%ebx)
  0xa755980b: movzwl 0x1(%esi),%ecx
  0xa755980f: mov    -0x14(%ebp),%ebx
  0xa7559812: shl    $0x2,%ecx
  0xa7559815: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559819: and    $0xff,%ebx
  0xa755981f: lea    (%esp,%ebx,4),%esp
  0xa7559822: movzbl 0x4(%esi),%ebx
  0xa7559826: add    $0x4,%esi
  0xa7559829: jmp    *-0x48722ee0(,%ebx,4)
  0xa7559830: mov    -0x8(%ebp),%esp
  0xa7559833: movl   $0x0,-0x8(%ebp)
  0xa755983a: mov    -0x1c(%ebp),%esi
  0xa755983d: mov    -0x18(%ebp),%edi
  0xa7559840: movzwl 0x1(%esi),%ecx
  0xa7559844: mov    -0x14(%ebp),%ebx
  0xa7559847: shl    $0x2,%ecx
  0xa755984a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755984e: and    $0xff,%ebx
  0xa7559854: lea    (%esp,%ebx,4),%esp
  0xa7559857: movzbl 0x4(%esi),%ebx
  0xa755985b: add    $0x4,%esi
  0xa755985e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559865: mov    -0x8(%ebp),%esp
  0xa7559868: movl   $0x0,-0x8(%ebp)
  0xa755986f: mov    -0x1c(%ebp),%esi
  0xa7559872: mov    -0x18(%ebp),%edi
  0xa7559875: movzwl 0x1(%esi),%ecx
  0xa7559879: mov    -0x14(%ebp),%ebx
  0xa755987c: shl    $0x2,%ecx
  0xa755987f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559883: and    $0xff,%ebx
  0xa7559889: lea    (%esp,%ebx,4),%esp
  0xa755988c: movzbl 0x4(%esi),%ebx
  0xa7559890: add    $0x4,%esi
  0xa7559893: jmp    *-0x48723ee0(,%ebx,4)
  0xa755989a: mov    -0x8(%ebp),%esp
  0xa755989d: movl   $0x0,-0x8(%ebp)
  0xa75598a4: mov    -0x1c(%ebp),%esi
  0xa75598a7: mov    -0x18(%ebp),%edi
  0xa75598aa: movzwl 0x1(%esi),%ecx
  0xa75598ae: mov    -0x14(%ebp),%ebx
  0xa75598b1: shl    $0x2,%ecx
  0xa75598b4: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75598b8: and    $0xff,%ebx
  0xa75598be: lea    (%esp,%ebx,4),%esp
  0xa75598c1: movzbl 0x4(%esi),%ebx
  0xa75598c5: add    $0x4,%esi
  0xa75598c8: jmp    *-0x48723ee0(,%ebx,4)
  0xa75598cf: mov    -0x8(%ebp),%esp
  0xa75598d2: movl   $0x0,-0x8(%ebp)
  0xa75598d9: mov    -0x1c(%ebp),%esi
  0xa75598dc: mov    -0x18(%ebp),%edi
  0xa75598df: movzwl 0x1(%esi),%ecx
  0xa75598e3: mov    -0x14(%ebp),%ebx
  0xa75598e6: shl    $0x2,%ecx
  0xa75598e9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75598ed: and    $0xff,%ebx
  0xa75598f3: lea    (%esp,%ebx,4),%esp
  0xa75598f6: movzbl 0x4(%esi),%ebx
  0xa75598fa: add    $0x4,%esi
  0xa75598fd: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559904: mov    -0x8(%ebp),%esp
  0xa7559907: movl   $0x0,-0x8(%ebp)
  0xa755990e: mov    -0x1c(%ebp),%esi
  0xa7559911: mov    -0x18(%ebp),%edi
  0xa7559914: movzwl 0x1(%esi),%ecx
  0xa7559918: mov    -0x14(%ebp),%ebx
  0xa755991b: shl    $0x2,%ecx
  0xa755991e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559922: and    $0xff,%ebx
  0xa7559928: lea    (%esp,%ebx,4),%esp
  0xa755992b: movzbl 0x5(%esi),%ebx
  0xa755992f: add    $0x5,%esi
  0xa7559932: jmp    *-0x48722ae0(,%ebx,4)
  0xa7559939: sub    $0x8,%esp
  0xa755993c: vmovsd %xmm0,(%esp)
  0xa7559941: fldl   (%esp)
  0xa7559944: add    $0x8,%esp
  0xa7559947: mov    -0x8(%ebp),%esp
  0xa755994a: movl   $0x0,-0x8(%ebp)
  0xa7559951: mov    -0x1c(%ebp),%esi
  0xa7559954: mov    -0x18(%ebp),%edi
  0xa7559957: movzwl 0x1(%esi),%ecx
  0xa755995b: mov    -0x14(%ebp),%ebx
  0xa755995e: shl    $0x2,%ecx
  0xa7559961: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559965: and    $0xff,%ebx
  0xa755996b: lea    (%esp,%ebx,4),%esp
  0xa755996e: movzbl 0x5(%esi),%ebx
  0xa7559972: add    $0x5,%esi
  0xa7559975: jmp    *-0x487232e0(,%ebx,4)
  0xa755997c: sub    $0x4,%esp
  0xa755997f: vmovss %xmm0,(%esp)
  0xa7559984: flds   (%esp)
  0xa7559987: add    $0x4,%esp
  0xa755998a: mov    -0x8(%ebp),%esp
  0xa755998d: movl   $0x0,-0x8(%ebp)
  0xa7559994: mov    -0x1c(%ebp),%esi
  0xa7559997: mov    -0x18(%ebp),%edi
  0xa755999a: movzwl 0x1(%esi),%ecx
  0xa755999e: mov    -0x14(%ebp),%ebx
  0xa75599a1: shl    $0x2,%ecx
  0xa75599a4: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75599a8: and    $0xff,%ebx
  0xa75599ae: lea    (%esp,%ebx,4),%esp
  0xa75599b1: movzbl 0x5(%esi),%ebx
  0xa75599b5: add    $0x5,%esi
  0xa75599b8: jmp    *-0x487236e0(,%ebx,4)
  0xa75599bf: mov    -0x8(%ebp),%esp
  0xa75599c2: movl   $0x0,-0x8(%ebp)
  0xa75599c9: mov    -0x1c(%ebp),%esi
  0xa75599cc: mov    -0x18(%ebp),%edi
  0xa75599cf: movzwl 0x1(%esi),%ecx
  0xa75599d3: mov    -0x14(%ebp),%ebx
  0xa75599d6: shl    $0x2,%ecx
  0xa75599d9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa75599dd: and    $0xff,%ebx
  0xa75599e3: lea    (%esp,%ebx,4),%esp
  0xa75599e6: movzbl 0x5(%esi),%ebx
  0xa75599ea: add    $0x5,%esi
  0xa75599ed: jmp    *-0x48723ae0(,%ebx,4)
  0xa75599f4: mov    -0x8(%ebp),%esp
  0xa75599f7: movl   $0x0,-0x8(%ebp)
  0xa75599fe: mov    -0x1c(%ebp),%esi
  0xa7559a01: mov    -0x18(%ebp),%edi
  0xa7559a04: movzwl 0x1(%esi),%ecx
  0xa7559a08: mov    -0x14(%ebp),%ebx
  0xa7559a0b: shl    $0x2,%ecx
  0xa7559a0e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559a12: and    $0xff,%ebx
  0xa7559a18: lea    (%esp,%ebx,4),%esp
  0xa7559a1b: movzbl 0x5(%esi),%ebx
  0xa7559a1f: add    $0x5,%esi
  0xa7559a22: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559a29: mov    -0x8(%ebp),%esp
  0xa7559a2c: movl   $0x0,-0x8(%ebp)
  0xa7559a33: mov    -0x1c(%ebp),%esi
  0xa7559a36: mov    -0x18(%ebp),%edi
  0xa7559a39: mov    -0x10(%ebp),%ebx
  0xa7559a3c: test   %ebx,%ebx
  0xa7559a3e: je     0xa7559aab
  0xa7559a44: cmpb   $0xba,(%esi)
  0xa7559a47: je     0xa7559a63
  0xa7559a4d: cmpb   $0xe9,(%esi)
  0xa7559a50: je     0xa7559a63
  0xa7559a56: mov    -0xc(%ebp),%ecx
  0xa7559a59: cmpb   $0xbc,0x1e(%ecx)
  0xa7559a5d: jne    0xa7559aab
  0xa7559a63: mov    %eax,%ecx
  0xa7559a65: test   %ecx,%ecx
  0xa7559a67: jne    0xa7559a6f
  0xa7559a69: orl    $0x1,-0x4(%ebx)
  0xa7559a6d: jmp    0xa7559aab
  0xa7559a6f: mov    0x4(%ecx),%ecx
  0xa7559a72: xor    -0x4(%ebx),%ecx
  0xa7559a75: test   $0xfffffffc,%ecx
  0xa7559a7b: je     0xa7559aab
  0xa7559a7d: test   $0x2,%ecx
  0xa7559a83: jne    0xa7559aab
  0xa7559a85: cmpl   $0x0,-0x4(%ebx)
  0xa7559a8c: je     0xa7559aa8
  0xa7559a8e: cmpl   $0x1,-0x4(%ebx)
  0xa7559a95: je     0xa7559aa8
  0xa7559a97: xor    -0x4(%ebx),%ecx
  0xa7559a9a: test   $0xfffffffc,%ecx
  0xa7559aa0: je     0xa7559aab
  0xa7559aa2: orl    $0x2,-0x4(%ebx)
  0xa7559aa6: jmp    0xa7559aab
  0xa7559aa8: mov    %ecx,-0x4(%ebx)
  0xa7559aab: movzwl 0x1(%esi),%ecx
  0xa7559aaf: mov    -0x14(%ebp),%ebx
  0xa7559ab2: shl    $0x2,%ecx
  0xa7559ab5: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559ab9: and    $0xff,%ebx
  0xa7559abf: lea    (%esp,%ebx,4),%esp
  0xa7559ac2: movzbl 0x5(%esi),%ebx
  0xa7559ac6: add    $0x5,%esi
  0xa7559ac9: jmp    *-0x48722ee0(,%ebx,4)
  0xa7559ad0: mov    -0x8(%ebp),%esp
  0xa7559ad3: movl   $0x0,-0x8(%ebp)
  0xa7559ada: mov    -0x1c(%ebp),%esi
  0xa7559add: mov    -0x18(%ebp),%edi
  0xa7559ae0: movzwl 0x1(%esi),%ecx
  0xa7559ae4: mov    -0x14(%ebp),%ebx
  0xa7559ae7: shl    $0x2,%ecx
  0xa7559aea: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559aee: and    $0xff,%ebx
  0xa7559af4: lea    (%esp,%ebx,4),%esp
  0xa7559af7: movzbl 0x5(%esi),%ebx
  0xa7559afb: add    $0x5,%esi
  0xa7559afe: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559b05: mov    -0x8(%ebp),%esp
  0xa7559b08: movl   $0x0,-0x8(%ebp)
  0xa7559b0f: mov    -0x1c(%ebp),%esi
  0xa7559b12: mov    -0x18(%ebp),%edi
  0xa7559b15: movzwl 0x1(%esi),%ecx
  0xa7559b19: mov    -0x14(%ebp),%ebx
  0xa7559b1c: shl    $0x2,%ecx
  0xa7559b1f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559b23: and    $0xff,%ebx
  0xa7559b29: lea    (%esp,%ebx,4),%esp
  0xa7559b2c: movzbl 0x5(%esi),%ebx
  0xa7559b30: add    $0x5,%esi
  0xa7559b33: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559b3a: mov    -0x8(%ebp),%esp
  0xa7559b3d: movl   $0x0,-0x8(%ebp)
  0xa7559b44: mov    -0x1c(%ebp),%esi
  0xa7559b47: mov    -0x18(%ebp),%edi
  0xa7559b4a: movzwl 0x1(%esi),%ecx
  0xa7559b4e: mov    -0x14(%ebp),%ebx
  0xa7559b51: shl    $0x2,%ecx
  0xa7559b54: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559b58: and    $0xff,%ebx
  0xa7559b5e: lea    (%esp,%ebx,4),%esp
  0xa7559b61: movzbl 0x5(%esi),%ebx
  0xa7559b65: add    $0x5,%esi
  0xa7559b68: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559b6f: mov    -0x8(%ebp),%esp
  0xa7559b72: movl   $0x0,-0x8(%ebp)
  0xa7559b79: mov    -0x1c(%ebp),%esi
  0xa7559b7c: mov    -0x18(%ebp),%edi
  0xa7559b7f: movzwl 0x1(%esi),%ecx
  0xa7559b83: mov    -0x14(%ebp),%ebx
  0xa7559b86: shl    $0x2,%ecx
  0xa7559b89: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559b8d: and    $0xff,%ebx
  0xa7559b93: lea    (%esp,%ebx,4),%esp
  0xa7559b96: movzbl 0x5(%esi),%ebx
  0xa7559b9a: add    $0x5,%esi
  0xa7559b9d: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559ba4: mov    -0x8(%ebp),%esp
  0xa7559ba7: movl   $0x0,-0x8(%ebp)
  0xa7559bae: mov    -0x1c(%ebp),%esi
  0xa7559bb1: mov    -0x18(%ebp),%edi
  0xa7559bb4: movzwl 0x1(%esi),%ecx
  0xa7559bb8: mov    -0x14(%ebp),%ebx
  0xa7559bbb: shl    $0x2,%ecx
  0xa7559bbe: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559bc2: and    $0xff,%ebx
  0xa7559bc8: lea    (%esp,%ebx,4),%esp
  0xa7559bcb: movzbl 0x6(%esi),%ebx
  0xa7559bcf: add    $0x6,%esi
  0xa7559bd2: jmp    *-0x48722ae0(,%ebx,4)
  0xa7559bd9: sub    $0x8,%esp
  0xa7559bdc: vmovsd %xmm0,(%esp)
  0xa7559be1: fldl   (%esp)
  0xa7559be4: add    $0x8,%esp
  0xa7559be7: mov    -0x8(%ebp),%esp
  0xa7559bea: movl   $0x0,-0x8(%ebp)
  0xa7559bf1: mov    -0x1c(%ebp),%esi
  0xa7559bf4: mov    -0x18(%ebp),%edi
  0xa7559bf7: movzwl 0x1(%esi),%ecx
  0xa7559bfb: mov    -0x14(%ebp),%ebx
  0xa7559bfe: shl    $0x2,%ecx
  0xa7559c01: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559c05: and    $0xff,%ebx
  0xa7559c0b: lea    (%esp,%ebx,4),%esp
  0xa7559c0e: movzbl 0x6(%esi),%ebx
  0xa7559c12: add    $0x6,%esi
  0xa7559c15: jmp    *-0x487232e0(,%ebx,4)
  0xa7559c1c: sub    $0x4,%esp
  0xa7559c1f: vmovss %xmm0,(%esp)
  0xa7559c24: flds   (%esp)
  0xa7559c27: add    $0x4,%esp
  0xa7559c2a: mov    -0x8(%ebp),%esp
  0xa7559c2d: movl   $0x0,-0x8(%ebp)
  0xa7559c34: mov    -0x1c(%ebp),%esi
  0xa7559c37: mov    -0x18(%ebp),%edi
  0xa7559c3a: movzwl 0x1(%esi),%ecx
  0xa7559c3e: mov    -0x14(%ebp),%ebx
  0xa7559c41: shl    $0x2,%ecx
  0xa7559c44: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559c48: and    $0xff,%ebx
  0xa7559c4e: lea    (%esp,%ebx,4),%esp
  0xa7559c51: movzbl 0x6(%esi),%ebx
  0xa7559c55: add    $0x6,%esi
  0xa7559c58: jmp    *-0x487236e0(,%ebx,4)
  0xa7559c5f: mov    -0x8(%ebp),%esp
  0xa7559c62: movl   $0x0,-0x8(%ebp)
  0xa7559c69: mov    -0x1c(%ebp),%esi
  0xa7559c6c: mov    -0x18(%ebp),%edi
  0xa7559c6f: movzwl 0x1(%esi),%ecx
  0xa7559c73: mov    -0x14(%ebp),%ebx
  0xa7559c76: shl    $0x2,%ecx
  0xa7559c79: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559c7d: and    $0xff,%ebx
  0xa7559c83: lea    (%esp,%ebx,4),%esp
  0xa7559c86: movzbl 0x6(%esi),%ebx
  0xa7559c8a: add    $0x6,%esi
  0xa7559c8d: jmp    *-0x48723ae0(,%ebx,4)
  0xa7559c94: mov    -0x8(%ebp),%esp
  0xa7559c97: movl   $0x0,-0x8(%ebp)
  0xa7559c9e: mov    -0x1c(%ebp),%esi
  0xa7559ca1: mov    -0x18(%ebp),%edi
  0xa7559ca4: movzwl 0x1(%esi),%ecx
  0xa7559ca8: mov    -0x14(%ebp),%ebx
  0xa7559cab: shl    $0x2,%ecx
  0xa7559cae: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559cb2: and    $0xff,%ebx
  0xa7559cb8: lea    (%esp,%ebx,4),%esp
  0xa7559cbb: movzbl 0x6(%esi),%ebx
  0xa7559cbf: add    $0x6,%esi
  0xa7559cc2: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559cc9: mov    -0x8(%ebp),%esp
  0xa7559ccc: movl   $0x0,-0x8(%ebp)
  0xa7559cd3: mov    -0x1c(%ebp),%esi
  0xa7559cd6: mov    -0x18(%ebp),%edi
  0xa7559cd9: mov    -0x10(%ebp),%ebx
  0xa7559cdc: test   %ebx,%ebx
  0xa7559cde: je     0xa7559d4b
  0xa7559ce4: cmpb   $0xba,(%esi)
  0xa7559ce7: je     0xa7559d03
  0xa7559ced: cmpb   $0xe9,(%esi)
  0xa7559cf0: je     0xa7559d03
  0xa7559cf6: mov    -0xc(%ebp),%ecx
  0xa7559cf9: cmpb   $0xbc,0x1e(%ecx)
  0xa7559cfd: jne    0xa7559d4b
  0xa7559d03: mov    %eax,%ecx
  0xa7559d05: test   %ecx,%ecx
  0xa7559d07: jne    0xa7559d0f
  0xa7559d09: orl    $0x1,-0x4(%ebx)
  0xa7559d0d: jmp    0xa7559d4b
  0xa7559d0f: mov    0x4(%ecx),%ecx
  0xa7559d12: xor    -0x4(%ebx),%ecx
  0xa7559d15: test   $0xfffffffc,%ecx
  0xa7559d1b: je     0xa7559d4b
  0xa7559d1d: test   $0x2,%ecx
  0xa7559d23: jne    0xa7559d4b
  0xa7559d25: cmpl   $0x0,-0x4(%ebx)
  0xa7559d2c: je     0xa7559d48
  0xa7559d2e: cmpl   $0x1,-0x4(%ebx)
  0xa7559d35: je     0xa7559d48
  0xa7559d37: xor    -0x4(%ebx),%ecx
  0xa7559d3a: test   $0xfffffffc,%ecx
  0xa7559d40: je     0xa7559d4b
  0xa7559d42: orl    $0x2,-0x4(%ebx)
  0xa7559d46: jmp    0xa7559d4b
  0xa7559d48: mov    %ecx,-0x4(%ebx)
  0xa7559d4b: movzwl 0x1(%esi),%ecx
  0xa7559d4f: mov    -0x14(%ebp),%ebx
  0xa7559d52: shl    $0x2,%ecx
  0xa7559d55: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559d59: and    $0xff,%ebx
  0xa7559d5f: lea    (%esp,%ebx,4),%esp
  0xa7559d62: movzbl 0x6(%esi),%ebx
  0xa7559d66: add    $0x6,%esi
  0xa7559d69: jmp    *-0x48722ee0(,%ebx,4)
  0xa7559d70: mov    -0x8(%ebp),%esp
  0xa7559d73: movl   $0x0,-0x8(%ebp)
  0xa7559d7a: mov    -0x1c(%ebp),%esi
  0xa7559d7d: mov    -0x18(%ebp),%edi
  0xa7559d80: movzwl 0x1(%esi),%ecx
  0xa7559d84: mov    -0x14(%ebp),%ebx
  0xa7559d87: shl    $0x2,%ecx
  0xa7559d8a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559d8e: and    $0xff,%ebx
  0xa7559d94: lea    (%esp,%ebx,4),%esp
  0xa7559d97: movzbl 0x6(%esi),%ebx
  0xa7559d9b: add    $0x6,%esi
  0xa7559d9e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559da5: mov    -0x8(%ebp),%esp
  0xa7559da8: movl   $0x0,-0x8(%ebp)
  0xa7559daf: mov    -0x1c(%ebp),%esi
  0xa7559db2: mov    -0x18(%ebp),%edi
  0xa7559db5: movzwl 0x1(%esi),%ecx
  0xa7559db9: mov    -0x14(%ebp),%ebx
  0xa7559dbc: shl    $0x2,%ecx
  0xa7559dbf: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559dc3: and    $0xff,%ebx
  0xa7559dc9: lea    (%esp,%ebx,4),%esp
  0xa7559dcc: movzbl 0x6(%esi),%ebx
  0xa7559dd0: add    $0x6,%esi
  0xa7559dd3: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559dda: mov    -0x8(%ebp),%esp
  0xa7559ddd: movl   $0x0,-0x8(%ebp)
  0xa7559de4: mov    -0x1c(%ebp),%esi
  0xa7559de7: mov    -0x18(%ebp),%edi
  0xa7559dea: movzwl 0x1(%esi),%ecx
  0xa7559dee: mov    -0x14(%ebp),%ebx
  0xa7559df1: shl    $0x2,%ecx
  0xa7559df4: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559df8: and    $0xff,%ebx
  0xa7559dfe: lea    (%esp,%ebx,4),%esp
  0xa7559e01: movzbl 0x6(%esi),%ebx
  0xa7559e05: add    $0x6,%esi
  0xa7559e08: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559e0f: mov    -0x8(%ebp),%esp
  0xa7559e12: movl   $0x0,-0x8(%ebp)
  0xa7559e19: mov    -0x1c(%ebp),%esi
  0xa7559e1c: mov    -0x18(%ebp),%edi
  0xa7559e1f: movzwl 0x1(%esi),%ecx
  0xa7559e23: mov    -0x14(%ebp),%ebx
  0xa7559e26: shl    $0x2,%ecx
  0xa7559e29: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559e2d: and    $0xff,%ebx
  0xa7559e33: lea    (%esp,%ebx,4),%esp
  0xa7559e36: movzbl 0x6(%esi),%ebx
  0xa7559e3a: add    $0x6,%esi
  0xa7559e3d: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559e44: mov    -0x8(%ebp),%esp
  0xa7559e47: movl   $0x0,-0x8(%ebp)
  0xa7559e4e: mov    -0x1c(%ebp),%esi
  0xa7559e51: mov    -0x18(%ebp),%edi
  0xa7559e54: movzwl 0x1(%esi),%ecx
  0xa7559e58: mov    -0x14(%ebp),%ebx
  0xa7559e5b: shl    $0x2,%ecx
  0xa7559e5e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559e62: and    $0xff,%ebx
  0xa7559e68: lea    (%esp,%ebx,4),%esp
  0xa7559e6b: movzbl 0x7(%esi),%ebx
  0xa7559e6f: add    $0x7,%esi
  0xa7559e72: jmp    *-0x48722ae0(,%ebx,4)
  0xa7559e79: sub    $0x8,%esp
  0xa7559e7c: vmovsd %xmm0,(%esp)
  0xa7559e81: fldl   (%esp)
  0xa7559e84: add    $0x8,%esp
  0xa7559e87: mov    -0x8(%ebp),%esp
  0xa7559e8a: movl   $0x0,-0x8(%ebp)
  0xa7559e91: mov    -0x1c(%ebp),%esi
  0xa7559e94: mov    -0x18(%ebp),%edi
  0xa7559e97: movzwl 0x1(%esi),%ecx
  0xa7559e9b: mov    -0x14(%ebp),%ebx
  0xa7559e9e: shl    $0x2,%ecx
  0xa7559ea1: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559ea5: and    $0xff,%ebx
  0xa7559eab: lea    (%esp,%ebx,4),%esp
  0xa7559eae: movzbl 0x7(%esi),%ebx
  0xa7559eb2: add    $0x7,%esi
  0xa7559eb5: jmp    *-0x487232e0(,%ebx,4)
  0xa7559ebc: sub    $0x4,%esp
  0xa7559ebf: vmovss %xmm0,(%esp)
  0xa7559ec4: flds   (%esp)
  0xa7559ec7: add    $0x4,%esp
  0xa7559eca: mov    -0x8(%ebp),%esp
  0xa7559ecd: movl   $0x0,-0x8(%ebp)
  0xa7559ed4: mov    -0x1c(%ebp),%esi
  0xa7559ed7: mov    -0x18(%ebp),%edi
  0xa7559eda: movzwl 0x1(%esi),%ecx
  0xa7559ede: mov    -0x14(%ebp),%ebx
  0xa7559ee1: shl    $0x2,%ecx
  0xa7559ee4: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559ee8: and    $0xff,%ebx
  0xa7559eee: lea    (%esp,%ebx,4),%esp
  0xa7559ef1: movzbl 0x7(%esi),%ebx
  0xa7559ef5: add    $0x7,%esi
  0xa7559ef8: jmp    *-0x487236e0(,%ebx,4)
  0xa7559eff: mov    -0x8(%ebp),%esp
  0xa7559f02: movl   $0x0,-0x8(%ebp)
  0xa7559f09: mov    -0x1c(%ebp),%esi
  0xa7559f0c: mov    -0x18(%ebp),%edi
  0xa7559f0f: movzwl 0x1(%esi),%ecx
  0xa7559f13: mov    -0x14(%ebp),%ebx
  0xa7559f16: shl    $0x2,%ecx
  0xa7559f19: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559f1d: and    $0xff,%ebx
  0xa7559f23: lea    (%esp,%ebx,4),%esp
  0xa7559f26: movzbl 0x7(%esi),%ebx
  0xa7559f2a: add    $0x7,%esi
  0xa7559f2d: jmp    *-0x48723ae0(,%ebx,4)
  0xa7559f34: mov    -0x8(%ebp),%esp
  0xa7559f37: movl   $0x0,-0x8(%ebp)
  0xa7559f3e: mov    -0x1c(%ebp),%esi
  0xa7559f41: mov    -0x18(%ebp),%edi
  0xa7559f44: movzwl 0x1(%esi),%ecx
  0xa7559f48: mov    -0x14(%ebp),%ebx
  0xa7559f4b: shl    $0x2,%ecx
  0xa7559f4e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559f52: and    $0xff,%ebx
  0xa7559f58: lea    (%esp,%ebx,4),%esp
  0xa7559f5b: movzbl 0x7(%esi),%ebx
  0xa7559f5f: add    $0x7,%esi
  0xa7559f62: jmp    *-0x48723ee0(,%ebx,4)
  0xa7559f69: mov    -0x8(%ebp),%esp
  0xa7559f6c: movl   $0x0,-0x8(%ebp)
  0xa7559f73: mov    -0x1c(%ebp),%esi
  0xa7559f76: mov    -0x18(%ebp),%edi
  0xa7559f79: mov    -0x10(%ebp),%ebx
  0xa7559f7c: test   %ebx,%ebx
  0xa7559f7e: je     0xa7559feb
  0xa7559f84: cmpb   $0xba,(%esi)
  0xa7559f87: je     0xa7559fa3
  0xa7559f8d: cmpb   $0xe9,(%esi)
  0xa7559f90: je     0xa7559fa3
  0xa7559f96: mov    -0xc(%ebp),%ecx
  0xa7559f99: cmpb   $0xbc,0x1e(%ecx)
  0xa7559f9d: jne    0xa7559feb
  0xa7559fa3: mov    %eax,%ecx
  0xa7559fa5: test   %ecx,%ecx
  0xa7559fa7: jne    0xa7559faf
  0xa7559fa9: orl    $0x1,-0x4(%ebx)
  0xa7559fad: jmp    0xa7559feb
  0xa7559faf: mov    0x4(%ecx),%ecx
  0xa7559fb2: xor    -0x4(%ebx),%ecx
  0xa7559fb5: test   $0xfffffffc,%ecx
  0xa7559fbb: je     0xa7559feb
  0xa7559fbd: test   $0x2,%ecx
  0xa7559fc3: jne    0xa7559feb
  0xa7559fc5: cmpl   $0x0,-0x4(%ebx)
  0xa7559fcc: je     0xa7559fe8
  0xa7559fce: cmpl   $0x1,-0x4(%ebx)
  0xa7559fd5: je     0xa7559fe8
  0xa7559fd7: xor    -0x4(%ebx),%ecx
  0xa7559fda: test   $0xfffffffc,%ecx
  0xa7559fe0: je     0xa7559feb
  0xa7559fe2: orl    $0x2,-0x4(%ebx)
  0xa7559fe6: jmp    0xa7559feb
  0xa7559fe8: mov    %ecx,-0x4(%ebx)
  0xa7559feb: movzwl 0x1(%esi),%ecx
  0xa7559fef: mov    -0x14(%ebp),%ebx
  0xa7559ff2: shl    $0x2,%ecx
  0xa7559ff5: mov    0x14(%ebx,%ecx,4),%ebx
  0xa7559ff9: and    $0xff,%ebx
  0xa7559fff: lea    (%esp,%ebx,4),%esp
  0xa755a002: movzbl 0x7(%esi),%ebx
  0xa755a006: add    $0x7,%esi
  0xa755a009: jmp    *-0x48722ee0(,%ebx,4)
  0xa755a010: mov    -0x8(%ebp),%esp
  0xa755a013: movl   $0x0,-0x8(%ebp)
  0xa755a01a: mov    -0x1c(%ebp),%esi
  0xa755a01d: mov    -0x18(%ebp),%edi
  0xa755a020: movzwl 0x1(%esi),%ecx
  0xa755a024: mov    -0x14(%ebp),%ebx
  0xa755a027: shl    $0x2,%ecx
  0xa755a02a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a02e: and    $0xff,%ebx
  0xa755a034: lea    (%esp,%ebx,4),%esp
  0xa755a037: movzbl 0x7(%esi),%ebx
  0xa755a03b: add    $0x7,%esi
  0xa755a03e: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a045: mov    -0x8(%ebp),%esp
  0xa755a048: movl   $0x0,-0x8(%ebp)
  0xa755a04f: mov    -0x1c(%ebp),%esi
  0xa755a052: mov    -0x18(%ebp),%edi
  0xa755a055: movzwl 0x1(%esi),%ecx
  0xa755a059: mov    -0x14(%ebp),%ebx
  0xa755a05c: shl    $0x2,%ecx
  0xa755a05f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a063: and    $0xff,%ebx
  0xa755a069: lea    (%esp,%ebx,4),%esp
  0xa755a06c: movzbl 0x7(%esi),%ebx
  0xa755a070: add    $0x7,%esi
  0xa755a073: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a07a: mov    -0x8(%ebp),%esp
  0xa755a07d: movl   $0x0,-0x8(%ebp)
  0xa755a084: mov    -0x1c(%ebp),%esi
  0xa755a087: mov    -0x18(%ebp),%edi
  0xa755a08a: movzwl 0x1(%esi),%ecx
  0xa755a08e: mov    -0x14(%ebp),%ebx
  0xa755a091: shl    $0x2,%ecx
  0xa755a094: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a098: and    $0xff,%ebx
  0xa755a09e: lea    (%esp,%ebx,4),%esp
  0xa755a0a1: movzbl 0x7(%esi),%ebx
  0xa755a0a5: add    $0x7,%esi
  0xa755a0a8: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a0af: mov    -0x8(%ebp),%esp
  0xa755a0b2: movl   $0x0,-0x8(%ebp)
  0xa755a0b9: mov    -0x1c(%ebp),%esi
  0xa755a0bc: mov    -0x18(%ebp),%edi
  0xa755a0bf: movzwl 0x1(%esi),%ecx
  0xa755a0c3: mov    -0x14(%ebp),%ebx
  0xa755a0c6: shl    $0x2,%ecx
  0xa755a0c9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a0cd: and    $0xff,%ebx
  0xa755a0d3: lea    (%esp,%ebx,4),%esp
  0xa755a0d6: movzbl 0x7(%esi),%ebx
  0xa755a0da: add    $0x7,%esi
  0xa755a0dd: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a0e4: mov    -0x8(%ebp),%esp
  0xa755a0e7: movl   $0x0,-0x8(%ebp)
  0xa755a0ee: mov    -0x1c(%ebp),%esi
  0xa755a0f1: mov    -0x18(%ebp),%edi
  0xa755a0f4: movzwl 0x1(%esi),%ecx
  0xa755a0f8: mov    -0x14(%ebp),%ebx
  0xa755a0fb: shl    $0x2,%ecx
  0xa755a0fe: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a102: and    $0xff,%ebx
  0xa755a108: lea    (%esp,%ebx,4),%esp
  0xa755a10b: movzbl 0x8(%esi),%ebx
  0xa755a10f: add    $0x8,%esi
  0xa755a112: jmp    *-0x48722ae0(,%ebx,4)
  0xa755a119: sub    $0x8,%esp
  0xa755a11c: vmovsd %xmm0,(%esp)
  0xa755a121: fldl   (%esp)
  0xa755a124: add    $0x8,%esp
  0xa755a127: mov    -0x8(%ebp),%esp
  0xa755a12a: movl   $0x0,-0x8(%ebp)
  0xa755a131: mov    -0x1c(%ebp),%esi
  0xa755a134: mov    -0x18(%ebp),%edi
  0xa755a137: movzwl 0x1(%esi),%ecx
  0xa755a13b: mov    -0x14(%ebp),%ebx
  0xa755a13e: shl    $0x2,%ecx
  0xa755a141: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a145: and    $0xff,%ebx
  0xa755a14b: lea    (%esp,%ebx,4),%esp
  0xa755a14e: movzbl 0x8(%esi),%ebx
  0xa755a152: add    $0x8,%esi
  0xa755a155: jmp    *-0x487232e0(,%ebx,4)
  0xa755a15c: sub    $0x4,%esp
  0xa755a15f: vmovss %xmm0,(%esp)
  0xa755a164: flds   (%esp)
  0xa755a167: add    $0x4,%esp
  0xa755a16a: mov    -0x8(%ebp),%esp
  0xa755a16d: movl   $0x0,-0x8(%ebp)
  0xa755a174: mov    -0x1c(%ebp),%esi
  0xa755a177: mov    -0x18(%ebp),%edi
  0xa755a17a: movzwl 0x1(%esi),%ecx
  0xa755a17e: mov    -0x14(%ebp),%ebx
  0xa755a181: shl    $0x2,%ecx
  0xa755a184: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a188: and    $0xff,%ebx
  0xa755a18e: lea    (%esp,%ebx,4),%esp
  0xa755a191: movzbl 0x8(%esi),%ebx
  0xa755a195: add    $0x8,%esi
  0xa755a198: jmp    *-0x487236e0(,%ebx,4)
  0xa755a19f: mov    -0x8(%ebp),%esp
  0xa755a1a2: movl   $0x0,-0x8(%ebp)
  0xa755a1a9: mov    -0x1c(%ebp),%esi
  0xa755a1ac: mov    -0x18(%ebp),%edi
  0xa755a1af: movzwl 0x1(%esi),%ecx
  0xa755a1b3: mov    -0x14(%ebp),%ebx
  0xa755a1b6: shl    $0x2,%ecx
  0xa755a1b9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a1bd: and    $0xff,%ebx
  0xa755a1c3: lea    (%esp,%ebx,4),%esp
  0xa755a1c6: movzbl 0x8(%esi),%ebx
  0xa755a1ca: add    $0x8,%esi
  0xa755a1cd: jmp    *-0x48723ae0(,%ebx,4)
  0xa755a1d4: mov    -0x8(%ebp),%esp
  0xa755a1d7: movl   $0x0,-0x8(%ebp)
  0xa755a1de: mov    -0x1c(%ebp),%esi
  0xa755a1e1: mov    -0x18(%ebp),%edi
  0xa755a1e4: movzwl 0x1(%esi),%ecx
  0xa755a1e8: mov    -0x14(%ebp),%ebx
  0xa755a1eb: shl    $0x2,%ecx
  0xa755a1ee: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a1f2: and    $0xff,%ebx
  0xa755a1f8: lea    (%esp,%ebx,4),%esp
  0xa755a1fb: movzbl 0x8(%esi),%ebx
  0xa755a1ff: add    $0x8,%esi
  0xa755a202: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a209: mov    -0x8(%ebp),%esp
  0xa755a20c: movl   $0x0,-0x8(%ebp)
  0xa755a213: mov    -0x1c(%ebp),%esi
  0xa755a216: mov    -0x18(%ebp),%edi
  0xa755a219: mov    -0x10(%ebp),%ebx
  0xa755a21c: test   %ebx,%ebx
  0xa755a21e: je     0xa755a28b
  0xa755a224: cmpb   $0xba,(%esi)
  0xa755a227: je     0xa755a243
  0xa755a22d: cmpb   $0xe9,(%esi)
  0xa755a230: je     0xa755a243
  0xa755a236: mov    -0xc(%ebp),%ecx
  0xa755a239: cmpb   $0xbc,0x1e(%ecx)
  0xa755a23d: jne    0xa755a28b
  0xa755a243: mov    %eax,%ecx
  0xa755a245: test   %ecx,%ecx
  0xa755a247: jne    0xa755a24f
  0xa755a249: orl    $0x1,-0x4(%ebx)
  0xa755a24d: jmp    0xa755a28b
  0xa755a24f: mov    0x4(%ecx),%ecx
  0xa755a252: xor    -0x4(%ebx),%ecx
  0xa755a255: test   $0xfffffffc,%ecx
  0xa755a25b: je     0xa755a28b
  0xa755a25d: test   $0x2,%ecx
  0xa755a263: jne    0xa755a28b
  0xa755a265: cmpl   $0x0,-0x4(%ebx)
  0xa755a26c: je     0xa755a288
  0xa755a26e: cmpl   $0x1,-0x4(%ebx)
  0xa755a275: je     0xa755a288
  0xa755a277: xor    -0x4(%ebx),%ecx
  0xa755a27a: test   $0xfffffffc,%ecx
  0xa755a280: je     0xa755a28b
  0xa755a282: orl    $0x2,-0x4(%ebx)
  0xa755a286: jmp    0xa755a28b
  0xa755a288: mov    %ecx,-0x4(%ebx)
  0xa755a28b: movzwl 0x1(%esi),%ecx
  0xa755a28f: mov    -0x14(%ebp),%ebx
  0xa755a292: shl    $0x2,%ecx
  0xa755a295: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a299: and    $0xff,%ebx
  0xa755a29f: lea    (%esp,%ebx,4),%esp
  0xa755a2a2: movzbl 0x8(%esi),%ebx
  0xa755a2a6: add    $0x8,%esi
  0xa755a2a9: jmp    *-0x48722ee0(,%ebx,4)
  0xa755a2b0: mov    -0x8(%ebp),%esp
  0xa755a2b3: movl   $0x0,-0x8(%ebp)
  0xa755a2ba: mov    -0x1c(%ebp),%esi
  0xa755a2bd: mov    -0x18(%ebp),%edi
  0xa755a2c0: movzwl 0x1(%esi),%ecx
  0xa755a2c4: mov    -0x14(%ebp),%ebx
  0xa755a2c7: shl    $0x2,%ecx
  0xa755a2ca: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a2ce: and    $0xff,%ebx
  0xa755a2d4: lea    (%esp,%ebx,4),%esp
  0xa755a2d7: movzbl 0x8(%esi),%ebx
  0xa755a2db: add    $0x8,%esi
  0xa755a2de: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a2e5: mov    -0x8(%ebp),%esp
  0xa755a2e8: movl   $0x0,-0x8(%ebp)
  0xa755a2ef: mov    -0x1c(%ebp),%esi
  0xa755a2f2: mov    -0x18(%ebp),%edi
  0xa755a2f5: movzwl 0x1(%esi),%ecx
  0xa755a2f9: mov    -0x14(%ebp),%ebx
  0xa755a2fc: shl    $0x2,%ecx
  0xa755a2ff: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a303: and    $0xff,%ebx
  0xa755a309: lea    (%esp,%ebx,4),%esp
  0xa755a30c: movzbl 0x8(%esi),%ebx
  0xa755a310: add    $0x8,%esi
  0xa755a313: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a31a: mov    -0x8(%ebp),%esp
  0xa755a31d: movl   $0x0,-0x8(%ebp)
  0xa755a324: mov    -0x1c(%ebp),%esi
  0xa755a327: mov    -0x18(%ebp),%edi
  0xa755a32a: movzwl 0x1(%esi),%ecx
  0xa755a32e: mov    -0x14(%ebp),%ebx
  0xa755a331: shl    $0x2,%ecx
  0xa755a334: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a338: and    $0xff,%ebx
  0xa755a33e: lea    (%esp,%ebx,4),%esp
  0xa755a341: movzbl 0x8(%esi),%ebx
  0xa755a345: add    $0x8,%esi
  0xa755a348: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a34f: mov    -0x8(%ebp),%esp
  0xa755a352: movl   $0x0,-0x8(%ebp)
  0xa755a359: mov    -0x1c(%ebp),%esi
  0xa755a35c: mov    -0x18(%ebp),%edi
  0xa755a35f: movzwl 0x1(%esi),%ecx
  0xa755a363: mov    -0x14(%ebp),%ebx
  0xa755a366: shl    $0x2,%ecx
  0xa755a369: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a36d: and    $0xff,%ebx
  0xa755a373: lea    (%esp,%ebx,4),%esp
  0xa755a376: movzbl 0x8(%esi),%ebx
  0xa755a37a: add    $0x8,%esi
  0xa755a37d: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a384: mov    -0x8(%ebp),%esp
  0xa755a387: movl   $0x0,-0x8(%ebp)
  0xa755a38e: mov    -0x1c(%ebp),%esi
  0xa755a391: mov    -0x18(%ebp),%edi
  0xa755a394: movzwl 0x1(%esi),%ecx
  0xa755a398: mov    -0x14(%ebp),%ebx
  0xa755a39b: shl    $0x2,%ecx
  0xa755a39e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a3a2: and    $0xff,%ebx
  0xa755a3a8: lea    (%esp,%ebx,4),%esp
  0xa755a3ab: movzbl 0x9(%esi),%ebx
  0xa755a3af: add    $0x9,%esi
  0xa755a3b2: jmp    *-0x48722ae0(,%ebx,4)
  0xa755a3b9: sub    $0x8,%esp
  0xa755a3bc: vmovsd %xmm0,(%esp)
  0xa755a3c1: fldl   (%esp)
  0xa755a3c4: add    $0x8,%esp
  0xa755a3c7: mov    -0x8(%ebp),%esp
  0xa755a3ca: movl   $0x0,-0x8(%ebp)
  0xa755a3d1: mov    -0x1c(%ebp),%esi
  0xa755a3d4: mov    -0x18(%ebp),%edi
  0xa755a3d7: movzwl 0x1(%esi),%ecx
  0xa755a3db: mov    -0x14(%ebp),%ebx
  0xa755a3de: shl    $0x2,%ecx
  0xa755a3e1: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a3e5: and    $0xff,%ebx
  0xa755a3eb: lea    (%esp,%ebx,4),%esp
  0xa755a3ee: movzbl 0x9(%esi),%ebx
  0xa755a3f2: add    $0x9,%esi
  0xa755a3f5: jmp    *-0x487232e0(,%ebx,4)
  0xa755a3fc: sub    $0x4,%esp
  0xa755a3ff: vmovss %xmm0,(%esp)
  0xa755a404: flds   (%esp)
  0xa755a407: add    $0x4,%esp
  0xa755a40a: mov    -0x8(%ebp),%esp
  0xa755a40d: movl   $0x0,-0x8(%ebp)
  0xa755a414: mov    -0x1c(%ebp),%esi
  0xa755a417: mov    -0x18(%ebp),%edi
  0xa755a41a: movzwl 0x1(%esi),%ecx
  0xa755a41e: mov    -0x14(%ebp),%ebx
  0xa755a421: shl    $0x2,%ecx
  0xa755a424: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a428: and    $0xff,%ebx
  0xa755a42e: lea    (%esp,%ebx,4),%esp
  0xa755a431: movzbl 0x9(%esi),%ebx
  0xa755a435: add    $0x9,%esi
  0xa755a438: jmp    *-0x487236e0(,%ebx,4)
  0xa755a43f: mov    -0x8(%ebp),%esp
  0xa755a442: movl   $0x0,-0x8(%ebp)
  0xa755a449: mov    -0x1c(%ebp),%esi
  0xa755a44c: mov    -0x18(%ebp),%edi
  0xa755a44f: movzwl 0x1(%esi),%ecx
  0xa755a453: mov    -0x14(%ebp),%ebx
  0xa755a456: shl    $0x2,%ecx
  0xa755a459: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a45d: and    $0xff,%ebx
  0xa755a463: lea    (%esp,%ebx,4),%esp
  0xa755a466: movzbl 0x9(%esi),%ebx
  0xa755a46a: add    $0x9,%esi
  0xa755a46d: jmp    *-0x48723ae0(,%ebx,4)
  0xa755a474: mov    -0x8(%ebp),%esp
  0xa755a477: movl   $0x0,-0x8(%ebp)
  0xa755a47e: mov    -0x1c(%ebp),%esi
  0xa755a481: mov    -0x18(%ebp),%edi
  0xa755a484: movzwl 0x1(%esi),%ecx
  0xa755a488: mov    -0x14(%ebp),%ebx
  0xa755a48b: shl    $0x2,%ecx
  0xa755a48e: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a492: and    $0xff,%ebx
  0xa755a498: lea    (%esp,%ebx,4),%esp
  0xa755a49b: movzbl 0x9(%esi),%ebx
  0xa755a49f: add    $0x9,%esi
  0xa755a4a2: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a4a9: mov    -0x8(%ebp),%esp
  0xa755a4ac: movl   $0x0,-0x8(%ebp)
  0xa755a4b3: mov    -0x1c(%ebp),%esi
  0xa755a4b6: mov    -0x18(%ebp),%edi
  0xa755a4b9: mov    -0x10(%ebp),%ebx
  0xa755a4bc: test   %ebx,%ebx
  0xa755a4be: je     0xa755a52b
  0xa755a4c4: cmpb   $0xba,(%esi)
  0xa755a4c7: je     0xa755a4e3
  0xa755a4cd: cmpb   $0xe9,(%esi)
  0xa755a4d0: je     0xa755a4e3
  0xa755a4d6: mov    -0xc(%ebp),%ecx
  0xa755a4d9: cmpb   $0xbc,0x1e(%ecx)
  0xa755a4dd: jne    0xa755a52b
  0xa755a4e3: mov    %eax,%ecx
  0xa755a4e5: test   %ecx,%ecx
  0xa755a4e7: jne    0xa755a4ef
  0xa755a4e9: orl    $0x1,-0x4(%ebx)
  0xa755a4ed: jmp    0xa755a52b
  0xa755a4ef: mov    0x4(%ecx),%ecx
  0xa755a4f2: xor    -0x4(%ebx),%ecx
  0xa755a4f5: test   $0xfffffffc,%ecx
  0xa755a4fb: je     0xa755a52b
  0xa755a4fd: test   $0x2,%ecx
  0xa755a503: jne    0xa755a52b
  0xa755a505: cmpl   $0x0,-0x4(%ebx)
  0xa755a50c: je     0xa755a528
  0xa755a50e: cmpl   $0x1,-0x4(%ebx)
  0xa755a515: je     0xa755a528
  0xa755a517: xor    -0x4(%ebx),%ecx
  0xa755a51a: test   $0xfffffffc,%ecx
  0xa755a520: je     0xa755a52b
  0xa755a522: orl    $0x2,-0x4(%ebx)
  0xa755a526: jmp    0xa755a52b
  0xa755a528: mov    %ecx,-0x4(%ebx)
  0xa755a52b: movzwl 0x1(%esi),%ecx
  0xa755a52f: mov    -0x14(%ebp),%ebx
  0xa755a532: shl    $0x2,%ecx
  0xa755a535: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a539: and    $0xff,%ebx
  0xa755a53f: lea    (%esp,%ebx,4),%esp
  0xa755a542: movzbl 0x9(%esi),%ebx
  0xa755a546: add    $0x9,%esi
  0xa755a549: jmp    *-0x48722ee0(,%ebx,4)
  0xa755a550: mov    -0x8(%ebp),%esp
  0xa755a553: movl   $0x0,-0x8(%ebp)
  0xa755a55a: mov    -0x1c(%ebp),%esi
  0xa755a55d: mov    -0x18(%ebp),%edi
  0xa755a560: movzwl 0x1(%esi),%ecx
  0xa755a564: mov    -0x14(%ebp),%ebx
  0xa755a567: shl    $0x2,%ecx
  0xa755a56a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a56e: and    $0xff,%ebx
  0xa755a574: lea    (%esp,%ebx,4),%esp
  0xa755a577: movzbl 0x9(%esi),%ebx
  0xa755a57b: add    $0x9,%esi
  0xa755a57e: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a585: mov    -0x8(%ebp),%esp
  0xa755a588: movl   $0x0,-0x8(%ebp)
  0xa755a58f: mov    -0x1c(%ebp),%esi
  0xa755a592: mov    -0x18(%ebp),%edi
  0xa755a595: movzwl 0x1(%esi),%ecx
  0xa755a599: mov    -0x14(%ebp),%ebx
  0xa755a59c: shl    $0x2,%ecx
  0xa755a59f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a5a3: and    $0xff,%ebx
  0xa755a5a9: lea    (%esp,%ebx,4),%esp
  0xa755a5ac: movzbl 0x9(%esi),%ebx
  0xa755a5b0: add    $0x9,%esi
  0xa755a5b3: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a5ba: mov    -0x8(%ebp),%esp
  0xa755a5bd: movl   $0x0,-0x8(%ebp)
  0xa755a5c4: mov    -0x1c(%ebp),%esi
  0xa755a5c7: mov    -0x18(%ebp),%edi
  0xa755a5ca: movzwl 0x1(%esi),%ecx
  0xa755a5ce: mov    -0x14(%ebp),%ebx
  0xa755a5d1: shl    $0x2,%ecx
  0xa755a5d4: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a5d8: and    $0xff,%ebx
  0xa755a5de: lea    (%esp,%ebx,4),%esp
  0xa755a5e1: movzbl 0x9(%esi),%ebx
  0xa755a5e5: add    $0x9,%esi
  0xa755a5e8: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a5ef: mov    -0x8(%ebp),%esp
  0xa755a5f2: movl   $0x0,-0x8(%ebp)
  0xa755a5f9: mov    -0x1c(%ebp),%esi
  0xa755a5fc: mov    -0x18(%ebp),%edi
  0xa755a5ff: movzwl 0x1(%esi),%ecx
  0xa755a603: mov    -0x14(%ebp),%ebx
  0xa755a606: shl    $0x2,%ecx
  0xa755a609: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a60d: and    $0xff,%ebx
  0xa755a613: lea    (%esp,%ebx,4),%esp
  0xa755a616: movzbl 0x9(%esi),%ebx
  0xa755a61a: add    $0x9,%esi
  0xa755a61d: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a624: int3   
  0xa755a625: int3   
  0xa755a626: int3   
  0xa755a627: int3   
  0xa755a628: int3   
  0xa755a629: int3   
  0xa755a62a: int3   
  0xa755a62b: int3   
  0xa755a62c: int3   
  0xa755a62d: int3   
  0xa755a62e: int3   
  0xa755a62f: int3   
  0xa755a630: int3   
  0xa755a631: int3   
  0xa755a632: int3   
  0xa755a633: int3   
  0xa755a634: int3   
  0xa755a635: int3   
  0xa755a636: int3   
  0xa755a637: int3   
  0xa755a638: int3   
  0xa755a639: int3   
  0xa755a63a: int3   
  0xa755a63b: int3   
  0xa755a63c: int3   
  0xa755a63d: int3   
  0xa755a63e: int3   
  0xa755a63f: int3   

----------------------------------------------------------------------
invoke return entry points  [0xa755a660, 0xa755ae60]  2048 bytes

  0xa755a660: mov    -0x8(%ebp),%esp
  0xa755a663: movl   $0x0,-0x8(%ebp)
  0xa755a66a: mov    -0x1c(%ebp),%esi
  0xa755a66d: mov    -0x18(%ebp),%edi
  0xa755a670: movzwl 0x1(%esi),%ecx
  0xa755a674: mov    -0x14(%ebp),%ebx
  0xa755a677: shl    $0x2,%ecx
  0xa755a67a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a67e: and    $0xff,%ebx
  0xa755a684: lea    (%esp,%ebx,4),%esp
  0xa755a687: movzbl 0x3(%esi),%ebx
  0xa755a68b: add    $0x3,%esi
  0xa755a68e: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a695: mov    -0x8(%ebp),%esp
  0xa755a698: movl   $0x0,-0x8(%ebp)
  0xa755a69f: mov    -0x1c(%ebp),%esi
  0xa755a6a2: mov    -0x18(%ebp),%edi
  0xa755a6a5: movzwl 0x1(%esi),%ecx
  0xa755a6a9: mov    -0x14(%ebp),%ebx
  0xa755a6ac: shl    $0x2,%ecx
  0xa755a6af: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a6b3: and    $0xff,%ebx
  0xa755a6b9: lea    (%esp,%ebx,4),%esp
  0xa755a6bc: movzbl 0x5(%esi),%ebx
  0xa755a6c0: add    $0x5,%esi
  0xa755a6c3: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a6ca: mov    -0x8(%ebp),%esp
  0xa755a6cd: movl   $0x0,-0x8(%ebp)
  0xa755a6d4: mov    -0x1c(%ebp),%esi
  0xa755a6d7: mov    -0x18(%ebp),%edi
  0xa755a6da: mov    0x1(%esi),%ecx
  0xa755a6dd: not    %ecx
  0xa755a6df: mov    -0x14(%ebp),%ebx
  0xa755a6e2: shl    $0x2,%ecx
  0xa755a6e5: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a6e9: and    $0xff,%ebx
  0xa755a6ef: lea    (%esp,%ebx,4),%esp
  0xa755a6f2: movzbl 0x5(%esi),%ebx
  0xa755a6f6: add    $0x5,%esi
  0xa755a6f9: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a700: mov    -0x8(%ebp),%esp
  0xa755a703: movl   $0x0,-0x8(%ebp)
  0xa755a70a: mov    -0x1c(%ebp),%esi
  0xa755a70d: mov    -0x18(%ebp),%edi
  0xa755a710: movzwl 0x1(%esi),%ecx
  0xa755a714: mov    -0x14(%ebp),%ebx
  0xa755a717: shl    $0x2,%ecx
  0xa755a71a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a71e: and    $0xff,%ebx
  0xa755a724: lea    (%esp,%ebx,4),%esp
  0xa755a727: movzbl 0x3(%esi),%ebx
  0xa755a72b: add    $0x3,%esi
  0xa755a72e: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a735: mov    -0x8(%ebp),%esp
  0xa755a738: movl   $0x0,-0x8(%ebp)
  0xa755a73f: mov    -0x1c(%ebp),%esi
  0xa755a742: mov    -0x18(%ebp),%edi
  0xa755a745: movzwl 0x1(%esi),%ecx
  0xa755a749: mov    -0x14(%ebp),%ebx
  0xa755a74c: shl    $0x2,%ecx
  0xa755a74f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a753: and    $0xff,%ebx
  0xa755a759: lea    (%esp,%ebx,4),%esp
  0xa755a75c: movzbl 0x5(%esi),%ebx
  0xa755a760: add    $0x5,%esi
  0xa755a763: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a76a: mov    -0x8(%ebp),%esp
  0xa755a76d: movl   $0x0,-0x8(%ebp)
  0xa755a774: mov    -0x1c(%ebp),%esi
  0xa755a777: mov    -0x18(%ebp),%edi
  0xa755a77a: mov    0x1(%esi),%ecx
  0xa755a77d: not    %ecx
  0xa755a77f: mov    -0x14(%ebp),%ebx
  0xa755a782: shl    $0x2,%ecx
  0xa755a785: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a789: and    $0xff,%ebx
  0xa755a78f: lea    (%esp,%ebx,4),%esp
  0xa755a792: movzbl 0x5(%esi),%ebx
  0xa755a796: add    $0x5,%esi
  0xa755a799: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a7a0: mov    -0x8(%ebp),%esp
  0xa755a7a3: movl   $0x0,-0x8(%ebp)
  0xa755a7aa: mov    -0x1c(%ebp),%esi
  0xa755a7ad: mov    -0x18(%ebp),%edi
  0xa755a7b0: movzwl 0x1(%esi),%ecx
  0xa755a7b4: mov    -0x14(%ebp),%ebx
  0xa755a7b7: shl    $0x2,%ecx
  0xa755a7ba: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a7be: and    $0xff,%ebx
  0xa755a7c4: lea    (%esp,%ebx,4),%esp
  0xa755a7c7: movzbl 0x3(%esi),%ebx
  0xa755a7cb: add    $0x3,%esi
  0xa755a7ce: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a7d5: mov    -0x8(%ebp),%esp
  0xa755a7d8: movl   $0x0,-0x8(%ebp)
  0xa755a7df: mov    -0x1c(%ebp),%esi
  0xa755a7e2: mov    -0x18(%ebp),%edi
  0xa755a7e5: movzwl 0x1(%esi),%ecx
  0xa755a7e9: mov    -0x14(%ebp),%ebx
  0xa755a7ec: shl    $0x2,%ecx
  0xa755a7ef: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a7f3: and    $0xff,%ebx
  0xa755a7f9: lea    (%esp,%ebx,4),%esp
  0xa755a7fc: movzbl 0x5(%esi),%ebx
  0xa755a800: add    $0x5,%esi
  0xa755a803: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a80a: mov    -0x8(%ebp),%esp
  0xa755a80d: movl   $0x0,-0x8(%ebp)
  0xa755a814: mov    -0x1c(%ebp),%esi
  0xa755a817: mov    -0x18(%ebp),%edi
  0xa755a81a: mov    0x1(%esi),%ecx
  0xa755a81d: not    %ecx
  0xa755a81f: mov    -0x14(%ebp),%ebx
  0xa755a822: shl    $0x2,%ecx
  0xa755a825: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a829: and    $0xff,%ebx
  0xa755a82f: lea    (%esp,%ebx,4),%esp
  0xa755a832: movzbl 0x5(%esi),%ebx
  0xa755a836: add    $0x5,%esi
  0xa755a839: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a840: mov    -0x8(%ebp),%esp
  0xa755a843: movl   $0x0,-0x8(%ebp)
  0xa755a84a: mov    -0x1c(%ebp),%esi
  0xa755a84d: mov    -0x18(%ebp),%edi
  0xa755a850: movzwl 0x1(%esi),%ecx
  0xa755a854: mov    -0x14(%ebp),%ebx
  0xa755a857: shl    $0x2,%ecx
  0xa755a85a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a85e: and    $0xff,%ebx
  0xa755a864: lea    (%esp,%ebx,4),%esp
  0xa755a867: movzbl 0x3(%esi),%ebx
  0xa755a86b: add    $0x3,%esi
  0xa755a86e: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a875: mov    -0x8(%ebp),%esp
  0xa755a878: movl   $0x0,-0x8(%ebp)
  0xa755a87f: mov    -0x1c(%ebp),%esi
  0xa755a882: mov    -0x18(%ebp),%edi
  0xa755a885: movzwl 0x1(%esi),%ecx
  0xa755a889: mov    -0x14(%ebp),%ebx
  0xa755a88c: shl    $0x2,%ecx
  0xa755a88f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a893: and    $0xff,%ebx
  0xa755a899: lea    (%esp,%ebx,4),%esp
  0xa755a89c: movzbl 0x5(%esi),%ebx
  0xa755a8a0: add    $0x5,%esi
  0xa755a8a3: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a8aa: mov    -0x8(%ebp),%esp
  0xa755a8ad: movl   $0x0,-0x8(%ebp)
  0xa755a8b4: mov    -0x1c(%ebp),%esi
  0xa755a8b7: mov    -0x18(%ebp),%edi
  0xa755a8ba: mov    0x1(%esi),%ecx
  0xa755a8bd: not    %ecx
  0xa755a8bf: mov    -0x14(%ebp),%ebx
  0xa755a8c2: shl    $0x2,%ecx
  0xa755a8c5: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a8c9: and    $0xff,%ebx
  0xa755a8cf: lea    (%esp,%ebx,4),%esp
  0xa755a8d2: movzbl 0x5(%esi),%ebx
  0xa755a8d6: add    $0x5,%esi
  0xa755a8d9: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a8e0: mov    -0x8(%ebp),%esp
  0xa755a8e3: movl   $0x0,-0x8(%ebp)
  0xa755a8ea: mov    -0x1c(%ebp),%esi
  0xa755a8ed: mov    -0x18(%ebp),%edi
  0xa755a8f0: movzwl 0x1(%esi),%ecx
  0xa755a8f4: mov    -0x14(%ebp),%ebx
  0xa755a8f7: shl    $0x2,%ecx
  0xa755a8fa: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a8fe: and    $0xff,%ebx
  0xa755a904: lea    (%esp,%ebx,4),%esp
  0xa755a907: movzbl 0x3(%esi),%ebx
  0xa755a90b: add    $0x3,%esi
  0xa755a90e: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a915: mov    -0x8(%ebp),%esp
  0xa755a918: movl   $0x0,-0x8(%ebp)
  0xa755a91f: mov    -0x1c(%ebp),%esi
  0xa755a922: mov    -0x18(%ebp),%edi
  0xa755a925: movzwl 0x1(%esi),%ecx
  0xa755a929: mov    -0x14(%ebp),%ebx
  0xa755a92c: shl    $0x2,%ecx
  0xa755a92f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a933: and    $0xff,%ebx
  0xa755a939: lea    (%esp,%ebx,4),%esp
  0xa755a93c: movzbl 0x5(%esi),%ebx
  0xa755a940: add    $0x5,%esi
  0xa755a943: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a94a: mov    -0x8(%ebp),%esp
  0xa755a94d: movl   $0x0,-0x8(%ebp)
  0xa755a954: mov    -0x1c(%ebp),%esi
  0xa755a957: mov    -0x18(%ebp),%edi
  0xa755a95a: mov    0x1(%esi),%ecx
  0xa755a95d: not    %ecx
  0xa755a95f: mov    -0x14(%ebp),%ebx
  0xa755a962: shl    $0x2,%ecx
  0xa755a965: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a969: and    $0xff,%ebx
  0xa755a96f: lea    (%esp,%ebx,4),%esp
  0xa755a972: movzbl 0x5(%esi),%ebx
  0xa755a976: add    $0x5,%esi
  0xa755a979: jmp    *-0x48723ee0(,%ebx,4)
  0xa755a980: mov    -0x8(%ebp),%esp
  0xa755a983: movl   $0x0,-0x8(%ebp)
  0xa755a98a: mov    -0x1c(%ebp),%esi
  0xa755a98d: mov    -0x18(%ebp),%edi
  0xa755a990: movzwl 0x1(%esi),%ecx
  0xa755a994: mov    -0x14(%ebp),%ebx
  0xa755a997: shl    $0x2,%ecx
  0xa755a99a: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a99e: and    $0xff,%ebx
  0xa755a9a4: lea    (%esp,%ebx,4),%esp
  0xa755a9a7: movzbl 0x3(%esi),%ebx
  0xa755a9ab: add    $0x3,%esi
  0xa755a9ae: jmp    *-0x48723ae0(,%ebx,4)
  0xa755a9b5: mov    -0x8(%ebp),%esp
  0xa755a9b8: movl   $0x0,-0x8(%ebp)
  0xa755a9bf: mov    -0x1c(%ebp),%esi
  0xa755a9c2: mov    -0x18(%ebp),%edi
  0xa755a9c5: movzwl 0x1(%esi),%ecx
  0xa755a9c9: mov    -0x14(%ebp),%ebx
  0xa755a9cc: shl    $0x2,%ecx
  0xa755a9cf: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755a9d3: and    $0xff,%ebx
  0xa755a9d9: lea    (%esp,%ebx,4),%esp
  0xa755a9dc: movzbl 0x5(%esi),%ebx
  0xa755a9e0: add    $0x5,%esi
  0xa755a9e3: jmp    *-0x48723ae0(,%ebx,4)
  0xa755a9ea: mov    -0x8(%ebp),%esp
  0xa755a9ed: movl   $0x0,-0x8(%ebp)
  0xa755a9f4: mov    -0x1c(%ebp),%esi
  0xa755a9f7: mov    -0x18(%ebp),%edi
  0xa755a9fa: mov    0x1(%esi),%ecx
  0xa755a9fd: not    %ecx
  0xa755a9ff: mov    -0x14(%ebp),%ebx
  0xa755aa02: shl    $0x2,%ecx
  0xa755aa05: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755aa09: and    $0xff,%ebx
  0xa755aa0f: lea    (%esp,%ebx,4),%esp
  0xa755aa12: movzbl 0x5(%esi),%ebx
  0xa755aa16: add    $0x5,%esi
  0xa755aa19: jmp    *-0x48723ae0(,%ebx,4)
  0xa755aa20: sub    $0x4,%esp
  0xa755aa23: vmovss %xmm0,(%esp)
  0xa755aa28: flds   (%esp)
  0xa755aa2b: add    $0x4,%esp
  0xa755aa2e: mov    -0x8(%ebp),%esp
  0xa755aa31: movl   $0x0,-0x8(%ebp)
  0xa755aa38: mov    -0x1c(%ebp),%esi
  0xa755aa3b: mov    -0x18(%ebp),%edi
  0xa755aa3e: movzwl 0x1(%esi),%ecx
  0xa755aa42: mov    -0x14(%ebp),%ebx
  0xa755aa45: shl    $0x2,%ecx
  0xa755aa48: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755aa4c: and    $0xff,%ebx
  0xa755aa52: lea    (%esp,%ebx,4),%esp
  0xa755aa55: movzbl 0x3(%esi),%ebx
  0xa755aa59: add    $0x3,%esi
  0xa755aa5c: jmp    *-0x487236e0(,%ebx,4)
  0xa755aa63: sub    $0x4,%esp
  0xa755aa66: vmovss %xmm0,(%esp)
  0xa755aa6b: flds   (%esp)
  0xa755aa6e: add    $0x4,%esp
  0xa755aa71: mov    -0x8(%ebp),%esp
  0xa755aa74: movl   $0x0,-0x8(%ebp)
  0xa755aa7b: mov    -0x1c(%ebp),%esi
  0xa755aa7e: mov    -0x18(%ebp),%edi
  0xa755aa81: movzwl 0x1(%esi),%ecx
  0xa755aa85: mov    -0x14(%ebp),%ebx
  0xa755aa88: shl    $0x2,%ecx
  0xa755aa8b: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755aa8f: and    $0xff,%ebx
  0xa755aa95: lea    (%esp,%ebx,4),%esp
  0xa755aa98: movzbl 0x5(%esi),%ebx
  0xa755aa9c: add    $0x5,%esi
  0xa755aa9f: jmp    *-0x487236e0(,%ebx,4)
  0xa755aaa6: sub    $0x4,%esp
  0xa755aaa9: vmovss %xmm0,(%esp)
  0xa755aaae: flds   (%esp)
  0xa755aab1: add    $0x4,%esp
  0xa755aab4: mov    -0x8(%ebp),%esp
  0xa755aab7: movl   $0x0,-0x8(%ebp)
  0xa755aabe: mov    -0x1c(%ebp),%esi
  0xa755aac1: mov    -0x18(%ebp),%edi
  0xa755aac4: mov    0x1(%esi),%ecx
  0xa755aac7: not    %ecx
  0xa755aac9: mov    -0x14(%ebp),%ebx
  0xa755aacc: shl    $0x2,%ecx
  0xa755aacf: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755aad3: and    $0xff,%ebx
  0xa755aad9: lea    (%esp,%ebx,4),%esp
  0xa755aadc: movzbl 0x5(%esi),%ebx
  0xa755aae0: add    $0x5,%esi
  0xa755aae3: jmp    *-0x487236e0(,%ebx,4)
  0xa755aaea: sub    $0x8,%esp
  0xa755aaed: vmovsd %xmm0,(%esp)
  0xa755aaf2: fldl   (%esp)
  0xa755aaf5: add    $0x8,%esp
  0xa755aaf8: mov    -0x8(%ebp),%esp
  0xa755aafb: movl   $0x0,-0x8(%ebp)
  0xa755ab02: mov    -0x1c(%ebp),%esi
  0xa755ab05: mov    -0x18(%ebp),%edi
  0xa755ab08: movzwl 0x1(%esi),%ecx
  0xa755ab0c: mov    -0x14(%ebp),%ebx
  0xa755ab0f: shl    $0x2,%ecx
  0xa755ab12: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755ab16: and    $0xff,%ebx
  0xa755ab1c: lea    (%esp,%ebx,4),%esp
  0xa755ab1f: movzbl 0x3(%esi),%ebx
  0xa755ab23: add    $0x3,%esi
  0xa755ab26: jmp    *-0x487232e0(,%ebx,4)
  0xa755ab2d: sub    $0x8,%esp
  0xa755ab30: vmovsd %xmm0,(%esp)
  0xa755ab35: fldl   (%esp)
  0xa755ab38: add    $0x8,%esp
  0xa755ab3b: mov    -0x8(%ebp),%esp
  0xa755ab3e: movl   $0x0,-0x8(%ebp)
  0xa755ab45: mov    -0x1c(%ebp),%esi
  0xa755ab48: mov    -0x18(%ebp),%edi
  0xa755ab4b: movzwl 0x1(%esi),%ecx
  0xa755ab4f: mov    -0x14(%ebp),%ebx
  0xa755ab52: shl    $0x2,%ecx
  0xa755ab55: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755ab59: and    $0xff,%ebx
  0xa755ab5f: lea    (%esp,%ebx,4),%esp
  0xa755ab62: movzbl 0x5(%esi),%ebx
  0xa755ab66: add    $0x5,%esi
  0xa755ab69: jmp    *-0x487232e0(,%ebx,4)
  0xa755ab70: sub    $0x8,%esp
  0xa755ab73: vmovsd %xmm0,(%esp)
  0xa755ab78: fldl   (%esp)
  0xa755ab7b: add    $0x8,%esp
  0xa755ab7e: mov    -0x8(%ebp),%esp
  0xa755ab81: movl   $0x0,-0x8(%ebp)
  0xa755ab88: mov    -0x1c(%ebp),%esi
  0xa755ab8b: mov    -0x18(%ebp),%edi
  0xa755ab8e: mov    0x1(%esi),%ecx
  0xa755ab91: not    %ecx
  0xa755ab93: mov    -0x14(%ebp),%ebx
  0xa755ab96: shl    $0x2,%ecx
  0xa755ab99: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755ab9d: and    $0xff,%ebx
  0xa755aba3: lea    (%esp,%ebx,4),%esp
  0xa755aba6: movzbl 0x5(%esi),%ebx
  0xa755abaa: add    $0x5,%esi
  0xa755abad: jmp    *-0x487232e0(,%ebx,4)
  0xa755abb4: mov    -0x8(%ebp),%esp
  0xa755abb7: movl   $0x0,-0x8(%ebp)
  0xa755abbe: mov    -0x1c(%ebp),%esi
  0xa755abc1: mov    -0x18(%ebp),%edi
  0xa755abc4: mov    -0x10(%ebp),%ebx
  0xa755abc7: test   %ebx,%ebx
  0xa755abc9: je     0xa755ac36
  0xa755abcf: cmpb   $0xba,(%esi)
  0xa755abd2: je     0xa755abee
  0xa755abd8: cmpb   $0xe9,(%esi)
  0xa755abdb: je     0xa755abee
  0xa755abe1: mov    -0xc(%ebp),%ecx
  0xa755abe4: cmpb   $0xbc,0x1e(%ecx)
  0xa755abe8: jne    0xa755ac36
  0xa755abee: mov    %eax,%ecx
  0xa755abf0: test   %ecx,%ecx
  0xa755abf2: jne    0xa755abfa
  0xa755abf4: orl    $0x1,-0x4(%ebx)
  0xa755abf8: jmp    0xa755ac36
  0xa755abfa: mov    0x4(%ecx),%ecx
  0xa755abfd: xor    -0x4(%ebx),%ecx
  0xa755ac00: test   $0xfffffffc,%ecx
  0xa755ac06: je     0xa755ac36
  0xa755ac08: test   $0x2,%ecx
  0xa755ac0e: jne    0xa755ac36
  0xa755ac10: cmpl   $0x0,-0x4(%ebx)
  0xa755ac17: je     0xa755ac33
  0xa755ac19: cmpl   $0x1,-0x4(%ebx)
  0xa755ac20: je     0xa755ac33
  0xa755ac22: xor    -0x4(%ebx),%ecx
  0xa755ac25: test   $0xfffffffc,%ecx
  0xa755ac2b: je     0xa755ac36
  0xa755ac2d: orl    $0x2,-0x4(%ebx)
  0xa755ac31: jmp    0xa755ac36
  0xa755ac33: mov    %ecx,-0x4(%ebx)
  0xa755ac36: movzwl 0x1(%esi),%ecx
  0xa755ac3a: mov    -0x14(%ebp),%ebx
  0xa755ac3d: shl    $0x2,%ecx
  0xa755ac40: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755ac44: and    $0xff,%ebx
  0xa755ac4a: lea    (%esp,%ebx,4),%esp
  0xa755ac4d: movzbl 0x3(%esi),%ebx
  0xa755ac51: add    $0x3,%esi
  0xa755ac54: jmp    *-0x48722ee0(,%ebx,4)
  0xa755ac5b: mov    -0x8(%ebp),%esp
  0xa755ac5e: movl   $0x0,-0x8(%ebp)
  0xa755ac65: mov    -0x1c(%ebp),%esi
  0xa755ac68: mov    -0x18(%ebp),%edi
  0xa755ac6b: mov    -0x10(%ebp),%ebx
  0xa755ac6e: test   %ebx,%ebx
  0xa755ac70: je     0xa755acdd
  0xa755ac76: cmpb   $0xba,(%esi)
  0xa755ac79: je     0xa755ac95
  0xa755ac7f: cmpb   $0xe9,(%esi)
  0xa755ac82: je     0xa755ac95
  0xa755ac88: mov    -0xc(%ebp),%ecx
  0xa755ac8b: cmpb   $0xbc,0x1e(%ecx)
  0xa755ac8f: jne    0xa755acdd
  0xa755ac95: mov    %eax,%ecx
  0xa755ac97: test   %ecx,%ecx
  0xa755ac99: jne    0xa755aca1
  0xa755ac9b: orl    $0x1,-0x4(%ebx)
  0xa755ac9f: jmp    0xa755acdd
  0xa755aca1: mov    0x4(%ecx),%ecx
  0xa755aca4: xor    -0x4(%ebx),%ecx
  0xa755aca7: test   $0xfffffffc,%ecx
  0xa755acad: je     0xa755acdd
  0xa755acaf: test   $0x2,%ecx
  0xa755acb5: jne    0xa755acdd
  0xa755acb7: cmpl   $0x0,-0x4(%ebx)
  0xa755acbe: je     0xa755acda
  0xa755acc0: cmpl   $0x1,-0x4(%ebx)
  0xa755acc7: je     0xa755acda
  0xa755acc9: xor    -0x4(%ebx),%ecx
  0xa755accc: test   $0xfffffffc,%ecx
  0xa755acd2: je     0xa755acdd
  0xa755acd4: orl    $0x2,-0x4(%ebx)
  0xa755acd8: jmp    0xa755acdd
  0xa755acda: mov    %ecx,-0x4(%ebx)
  0xa755acdd: movzwl 0x1(%esi),%ecx
  0xa755ace1: mov    -0x14(%ebp),%ebx
  0xa755ace4: shl    $0x2,%ecx
  0xa755ace7: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755aceb: and    $0xff,%ebx
  0xa755acf1: lea    (%esp,%ebx,4),%esp
  0xa755acf4: movzbl 0x5(%esi),%ebx
  0xa755acf8: add    $0x5,%esi
  0xa755acfb: jmp    *-0x48722ee0(,%ebx,4)
  0xa755ad02: mov    -0x8(%ebp),%esp
  0xa755ad05: movl   $0x0,-0x8(%ebp)
  0xa755ad0c: mov    -0x1c(%ebp),%esi
  0xa755ad0f: mov    -0x18(%ebp),%edi
  0xa755ad12: mov    -0x10(%ebp),%ebx
  0xa755ad15: test   %ebx,%ebx
  0xa755ad17: je     0xa755ad84
  0xa755ad1d: cmpb   $0xba,(%esi)
  0xa755ad20: je     0xa755ad3c
  0xa755ad26: cmpb   $0xe9,(%esi)
  0xa755ad29: je     0xa755ad3c
  0xa755ad2f: mov    -0xc(%ebp),%ecx
  0xa755ad32: cmpb   $0xbc,0x1e(%ecx)
  0xa755ad36: jne    0xa755ad84
  0xa755ad3c: mov    %eax,%ecx
  0xa755ad3e: test   %ecx,%ecx
  0xa755ad40: jne    0xa755ad48
  0xa755ad42: orl    $0x1,-0x4(%ebx)
  0xa755ad46: jmp    0xa755ad84
  0xa755ad48: mov    0x4(%ecx),%ecx
  0xa755ad4b: xor    -0x4(%ebx),%ecx
  0xa755ad4e: test   $0xfffffffc,%ecx
  0xa755ad54: je     0xa755ad84
  0xa755ad56: test   $0x2,%ecx
  0xa755ad5c: jne    0xa755ad84
  0xa755ad5e: cmpl   $0x0,-0x4(%ebx)
  0xa755ad65: je     0xa755ad81
  0xa755ad67: cmpl   $0x1,-0x4(%ebx)
  0xa755ad6e: je     0xa755ad81
  0xa755ad70: xor    -0x4(%ebx),%ecx
  0xa755ad73: test   $0xfffffffc,%ecx
  0xa755ad79: je     0xa755ad84
  0xa755ad7b: orl    $0x2,-0x4(%ebx)
  0xa755ad7f: jmp    0xa755ad84
  0xa755ad81: mov    %ecx,-0x4(%ebx)
  0xa755ad84: mov    0x1(%esi),%ecx
  0xa755ad87: not    %ecx
  0xa755ad89: mov    -0x14(%ebp),%ebx
  0xa755ad8c: shl    $0x2,%ecx
  0xa755ad8f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755ad93: and    $0xff,%ebx
  0xa755ad99: lea    (%esp,%ebx,4),%esp
  0xa755ad9c: movzbl 0x5(%esi),%ebx
  0xa755ada0: add    $0x5,%esi
  0xa755ada3: jmp    *-0x48722ee0(,%ebx,4)
  0xa755adaa: mov    -0x8(%ebp),%esp
  0xa755adad: movl   $0x0,-0x8(%ebp)
  0xa755adb4: mov    -0x1c(%ebp),%esi
  0xa755adb7: mov    -0x18(%ebp),%edi
  0xa755adba: movzwl 0x1(%esi),%ecx
  0xa755adbe: mov    -0x14(%ebp),%ebx
  0xa755adc1: shl    $0x2,%ecx
  0xa755adc4: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755adc8: and    $0xff,%ebx
  0xa755adce: lea    (%esp,%ebx,4),%esp
  0xa755add1: movzbl 0x3(%esi),%ebx
  0xa755add5: add    $0x3,%esi
  0xa755add8: jmp    *-0x48722ae0(,%ebx,4)
  0xa755addf: mov    -0x8(%ebp),%esp
  0xa755ade2: movl   $0x0,-0x8(%ebp)
  0xa755ade9: mov    -0x1c(%ebp),%esi
  0xa755adec: mov    -0x18(%ebp),%edi
  0xa755adef: movzwl 0x1(%esi),%ecx
  0xa755adf3: mov    -0x14(%ebp),%ebx
  0xa755adf6: shl    $0x2,%ecx
  0xa755adf9: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755adfd: and    $0xff,%ebx
  0xa755ae03: lea    (%esp,%ebx,4),%esp
  0xa755ae06: movzbl 0x5(%esi),%ebx
  0xa755ae0a: add    $0x5,%esi
  0xa755ae0d: jmp    *-0x48722ae0(,%ebx,4)
  0xa755ae14: mov    -0x8(%ebp),%esp
  0xa755ae17: movl   $0x0,-0x8(%ebp)
  0xa755ae1e: mov    -0x1c(%ebp),%esi
  0xa755ae21: mov    -0x18(%ebp),%edi
  0xa755ae24: mov    0x1(%esi),%ecx
  0xa755ae27: not    %ecx
  0xa755ae29: mov    -0x14(%ebp),%ebx
  0xa755ae2c: shl    $0x2,%ecx
  0xa755ae2f: mov    0x14(%ebx,%ecx,4),%ebx
  0xa755ae33: and    $0xff,%ebx
  0xa755ae39: lea    (%esp,%ebx,4),%esp
  0xa755ae3c: movzbl 0x5(%esi),%ebx
  0xa755ae40: add    $0x5,%esi
  0xa755ae43: jmp    *-0x48722ae0(,%ebx,4)
  0xa755ae4a: nop
  0xa755ae4b: nop
  0xa755ae4c: int3   
  0xa755ae4d: int3   
  0xa755ae4e: int3   
  0xa755ae4f: int3   
  0xa755ae50: int3   
  0xa755ae51: int3   
  0xa755ae52: int3   
  0xa755ae53: int3   
  0xa755ae54: int3   
  0xa755ae55: int3   
  0xa755ae56: int3   
  0xa755ae57: int3   
  0xa755ae58: int3   
  0xa755ae59: int3   
  0xa755ae5a: int3   
  0xa755ae5b: int3   
  0xa755ae5c: int3   
  0xa755ae5d: int3   
  0xa755ae5e: int3   
  0xa755ae5f: int3   

----------------------------------------------------------------------
earlyret entry points  [0xa755ae80, 0xa755cba0]  7456 bytes

  0xa755ae80: mov    -0x1c(%ebp),%esi
  0xa755ae83: mov    -0x18(%ebp),%edi
  0xa755ae86: mov    -0x20(%ebp),%esp
  0xa755ae89: movl   $0x0,-0x8(%ebp)
  0xa755ae90: emms   
  0xa755ae92: mov    %esp,%ecx
  0xa755ae94: shr    $0xc,%ecx
  0xa755ae97: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ae9e: mov    0x330(%ecx),%ecx
  0xa755aea4: movl   $0xb,0x50(%ecx)
  0xa755aeab: movl   $0x0,0x54(%ecx)
  0xa755aeb2: movl   $0x0,0x58(%ecx)
  0xa755aeb9: mov    %esp,%ecx
  0xa755aebb: shr    $0xc,%ecx
  0xa755aebe: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755aec5: mov    0x330(%ecx),%ecx
  0xa755aecb: movl   $0x0,0x4c(%ecx)
  0xa755aed2: mov    %esp,%ecx
  0xa755aed4: shr    $0xc,%ecx
  0xa755aed7: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755aede: mov    0x1a5(%ecx),%bl
  0xa755aee4: mov    %ebx,%edi
  0xa755aee6: movb   $0x0,0x1a5(%ecx)
  0xa755aeed: mov    -0xc(%ebp),%ebx
  0xa755aef0: mov    0x14(%ebx),%ecx
  0xa755aef3: test   $0x20,%ecx
  0xa755aef9: je     0xa755affe
  0xa755aeff: mov    %edi,%ecx
  0xa755af01: test   $0xff,%cl
  0xa755af04: jne    0xa755b105
  0xa755af0a: lea    -0x28(%ebp),%edx
  0xa755af0d: mov    0x4(%edx),%eax
  0xa755af10: test   %eax,%eax
  0xa755af12: jne    0xa755af1d
  0xa755af18: jmp    0xa755affe
  0xa755af1d: mov    %esi,-0x1c(%ebp)
  0xa755af20: lea    (%edx),%eax
  0xa755af22: mov    0x4(%edx),%ecx
  0xa755af25: movl   $0x0,0x4(%edx)
  0xa755af2c: mov    (%ecx),%ebx
  0xa755af2e: and    $0x7,%ebx
  0xa755af31: cmp    $0x5,%ebx
  0xa755af34: je     0xa755affb
  0xa755af3a: mov    (%eax),%ebx
  0xa755af3c: test   %ebx,%ebx
  0xa755af3e: je     0xa755affb
  0xa755af44: lock cmpxchg %ebx,(%ecx)
  0xa755af48: je     0xa755affb
  0xa755af4e: mov    %ecx,0x4(%edx)
  0xa755af51: call   0xa755af5b
  0xa755af56: jmp    0xa755affb
  0xa755af5b: push   %edx
  0xa755af5c: lea    0x8(%esp),%eax
  0xa755af60: cmpl   $0x0,-0x8(%ebp)
  0xa755af67: je     0xa755af7e
  0xa755af6d: push   $0xb7449b58
  0xa755af72: call   0xa755af77
  0xa755af77: pusha  
  0xa755af78: call   0xb6ff5f32
  0xa755af7d: hlt    
  0xa755af7e: mov    %esi,-0x1c(%ebp)
  0xa755af81: mov    %esp,%edi
  0xa755af83: shr    $0xc,%edi
  0xa755af86: mov    -0x4871aba0(,%edi,4),%edi
  0xa755af8d: push   %edi
  0xa755af8e: mov    %ebp,0x148(%edi)
  0xa755af94: mov    %eax,0x140(%edi)
  0xa755af9a: call   0xb6e5ed36
  0xa755af9f: add    $0x8,%esp
  0xa755afa2: push   %eax
  0xa755afa3: mov    %esp,%eax
  0xa755afa5: shr    $0xc,%eax
  0xa755afa8: mov    -0x4871aba0(,%eax,4),%eax
  0xa755afaf: cmp    %eax,%edi
  0xa755afb1: je     0xa755afc8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755afb7: push   $0xb74acf8c
  0xa755afbc: call   0xa755afc1
  0xa755afc1: pusha  
  0xa755afc2: call   0xb6ff5f32
  0xa755afc7: hlt    
  0xa755afc8: pop    %eax
  0xa755afc9: movl   $0x0,0x140(%edi)
  0xa755afd3: movl   $0x0,0x148(%edi)
  0xa755afdd: movl   $0x0,0x144(%edi)
  0xa755afe7: cmpl   $0x0,0x4(%edi)
  0xa755afee: jne    0xa7556400
  0xa755aff4: mov    -0x1c(%ebp),%esi
  0xa755aff7: mov    -0x18(%ebp),%edi
  0xa755affa: ret    
  0xa755affb: mov    -0x1c(%ebp),%esi
  0xa755affe: mov    -0x20(%ebp),%ecx
  0xa755b001: lea    -0x20(%ebp),%ebx
  0xa755b004: jmp    0xa755b101
  0xa755b009: mov    %ecx,%edx
  0xa755b00b: mov    %esi,-0x1c(%ebp)
  0xa755b00e: lea    (%edx),%eax
  0xa755b010: mov    0x4(%edx),%ecx
  0xa755b013: movl   $0x0,0x4(%edx)
  0xa755b01a: mov    (%ecx),%ebx
  0xa755b01c: and    $0x7,%ebx
  0xa755b01f: cmp    $0x5,%ebx
  0xa755b022: je     0xa755b0e9
  0xa755b028: mov    (%eax),%ebx
  0xa755b02a: test   %ebx,%ebx
  0xa755b02c: je     0xa755b0e9
  0xa755b032: lock cmpxchg %ebx,(%ecx)
  0xa755b036: je     0xa755b0e9
  0xa755b03c: mov    %ecx,0x4(%edx)
  0xa755b03f: call   0xa755b049
  0xa755b044: jmp    0xa755b0e9
  0xa755b049: push   %edx
  0xa755b04a: lea    0x8(%esp),%eax
  0xa755b04e: cmpl   $0x0,-0x8(%ebp)
  0xa755b055: je     0xa755b06c
  0xa755b05b: push   $0xb7449b58
  0xa755b060: call   0xa755b065
  0xa755b065: pusha  
  0xa755b066: call   0xb6ff5f32
  0xa755b06b: hlt    
  0xa755b06c: mov    %esi,-0x1c(%ebp)
  0xa755b06f: mov    %esp,%edi
  0xa755b071: shr    $0xc,%edi
  0xa755b074: mov    -0x4871aba0(,%edi,4),%edi
  0xa755b07b: push   %edi
  0xa755b07c: mov    %ebp,0x148(%edi)
  0xa755b082: mov    %eax,0x140(%edi)
  0xa755b088: call   0xb6e5ed36
  0xa755b08d: add    $0x8,%esp
  0xa755b090: push   %eax
  0xa755b091: mov    %esp,%eax
  0xa755b093: shr    $0xc,%eax
  0xa755b096: mov    -0x4871aba0(,%eax,4),%eax
  0xa755b09d: cmp    %eax,%edi
  0xa755b09f: je     0xa755b0b6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755b0a5: push   $0xb74acf8c
  0xa755b0aa: call   0xa755b0af
  0xa755b0af: pusha  
  0xa755b0b0: call   0xb6ff5f32
  0xa755b0b5: hlt    
  0xa755b0b6: pop    %eax
  0xa755b0b7: movl   $0x0,0x140(%edi)
  0xa755b0c1: movl   $0x0,0x148(%edi)
  0xa755b0cb: movl   $0x0,0x144(%edi)
  0xa755b0d5: cmpl   $0x0,0x4(%edi)
  0xa755b0dc: jne    0xa7556400
  0xa755b0e2: mov    -0x1c(%ebp),%esi
  0xa755b0e5: mov    -0x18(%ebp),%edi
  0xa755b0e8: ret    
  0xa755b0e9: mov    -0x1c(%ebp),%esi
  0xa755b0ec: jmp    0xa755affe
  0xa755b0f1: cmpl   $0x0,0x4(%ecx)
  0xa755b0f8: jne    0xa755b009
  0xa755b0fe: add    $0x8,%ecx
  0xa755b101: cmp    %ebx,%ecx
  0xa755b103: jne    0xa755b0f1
  0xa755b105: cmpb   $0x0,0xb78c1e7e
  0xa755b10c: je     0xa755b149
  0xa755b112: mov    %esp,%ebx
  0xa755b114: shr    $0xc,%ebx
  0xa755b117: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755b11e: mov    -0xc(%ebp),%ecx
  0xa755b121: push   %ecx
  0xa755b122: push   %ebx
  0xa755b123: cmpl   $0x0,-0x8(%ebp)
  0xa755b12a: je     0xa755b141
  0xa755b130: push   $0xb7449b18
  0xa755b135: call   0xa755b13a
  0xa755b13a: pusha  
  0xa755b13b: call   0xb6ff5f32
  0xa755b140: hlt    
  0xa755b141: call   0xb7175974
  0xa755b146: add    $0x8,%esp
  0xa755b149: mov    -0x4(%ebp),%ebx
  0xa755b14c: mov    %ebp,%esp
  0xa755b14e: pop    %ebp
  0xa755b14f: pop    %esi
  0xa755b150: mov    %ebx,%esp
  0xa755b152: jmp    *%esi
  0xa755b154: mov    -0x1c(%ebp),%esi
  0xa755b157: mov    -0x18(%ebp),%edi
  0xa755b15a: mov    -0x20(%ebp),%esp
  0xa755b15d: movl   $0x0,-0x8(%ebp)
  0xa755b164: emms   
  0xa755b166: mov    %esp,%ecx
  0xa755b168: shr    $0xc,%ecx
  0xa755b16b: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b172: mov    0x330(%ecx),%ecx
  0xa755b178: fldl   0x54(%ecx)
  0xa755b17b: movl   $0xb,0x50(%ecx)
  0xa755b182: movl   $0x0,0x54(%ecx)
  0xa755b189: movl   $0x0,0x58(%ecx)
  0xa755b190: mov    %esp,%ecx
  0xa755b192: shr    $0xc,%ecx
  0xa755b195: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b19c: mov    0x330(%ecx),%ecx
  0xa755b1a2: movl   $0x0,0x4c(%ecx)
  0xa755b1a9: mov    %esp,%ecx
  0xa755b1ab: shr    $0xc,%ecx
  0xa755b1ae: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b1b5: mov    0x1a5(%ecx),%bl
  0xa755b1bb: mov    %ebx,%edi
  0xa755b1bd: movb   $0x0,0x1a5(%ecx)
  0xa755b1c4: mov    -0xc(%ebp),%ebx
  0xa755b1c7: mov    0x14(%ebx),%ecx
  0xa755b1ca: test   $0x20,%ecx
  0xa755b1d0: je     0xa755b2e7
  0xa755b1d6: mov    %edi,%ecx
  0xa755b1d8: test   $0xff,%cl
  0xa755b1db: jne    0xa755b3fa
  0xa755b1e1: sub    $0x8,%esp
  0xa755b1e4: fstpl  (%esp)
  0xa755b1e7: lea    -0x28(%ebp),%edx
  0xa755b1ea: mov    0x4(%edx),%eax
  0xa755b1ed: test   %eax,%eax
  0xa755b1ef: jne    0xa755b200
  0xa755b1f5: fldl   (%esp)
  0xa755b1f8: add    $0x8,%esp
  0xa755b1fb: jmp    0xa755b2e7
  0xa755b200: mov    %esi,-0x1c(%ebp)
  0xa755b203: lea    (%edx),%eax
  0xa755b205: mov    0x4(%edx),%ecx
  0xa755b208: movl   $0x0,0x4(%edx)
  0xa755b20f: mov    (%ecx),%ebx
  0xa755b211: and    $0x7,%ebx
  0xa755b214: cmp    $0x5,%ebx
  0xa755b217: je     0xa755b2de
  0xa755b21d: mov    (%eax),%ebx
  0xa755b21f: test   %ebx,%ebx
  0xa755b221: je     0xa755b2de
  0xa755b227: lock cmpxchg %ebx,(%ecx)
  0xa755b22b: je     0xa755b2de
  0xa755b231: mov    %ecx,0x4(%edx)
  0xa755b234: call   0xa755b23e
  0xa755b239: jmp    0xa755b2de
  0xa755b23e: push   %edx
  0xa755b23f: lea    0x8(%esp),%eax
  0xa755b243: cmpl   $0x0,-0x8(%ebp)
  0xa755b24a: je     0xa755b261
  0xa755b250: push   $0xb7449b58
  0xa755b255: call   0xa755b25a
  0xa755b25a: pusha  
  0xa755b25b: call   0xb6ff5f32
  0xa755b260: hlt    
  0xa755b261: mov    %esi,-0x1c(%ebp)
  0xa755b264: mov    %esp,%edi
  0xa755b266: shr    $0xc,%edi
  0xa755b269: mov    -0x4871aba0(,%edi,4),%edi
  0xa755b270: push   %edi
  0xa755b271: mov    %ebp,0x148(%edi)
  0xa755b277: mov    %eax,0x140(%edi)
  0xa755b27d: call   0xb6e5ed36
  0xa755b282: add    $0x8,%esp
  0xa755b285: push   %eax
  0xa755b286: mov    %esp,%eax
  0xa755b288: shr    $0xc,%eax
  0xa755b28b: mov    -0x4871aba0(,%eax,4),%eax
  0xa755b292: cmp    %eax,%edi
  0xa755b294: je     0xa755b2ab
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755b29a: push   $0xb74acf8c
  0xa755b29f: call   0xa755b2a4
  0xa755b2a4: pusha  
  0xa755b2a5: call   0xb6ff5f32
  0xa755b2aa: hlt    
  0xa755b2ab: pop    %eax
  0xa755b2ac: movl   $0x0,0x140(%edi)
  0xa755b2b6: movl   $0x0,0x148(%edi)
  0xa755b2c0: movl   $0x0,0x144(%edi)
  0xa755b2ca: cmpl   $0x0,0x4(%edi)
  0xa755b2d1: jne    0xa7556400
  0xa755b2d7: mov    -0x1c(%ebp),%esi
  0xa755b2da: mov    -0x18(%ebp),%edi
  0xa755b2dd: ret    
  0xa755b2de: mov    -0x1c(%ebp),%esi
  0xa755b2e1: fldl   (%esp)
  0xa755b2e4: add    $0x8,%esp
  0xa755b2e7: mov    -0x20(%ebp),%ecx
  0xa755b2ea: lea    -0x20(%ebp),%ebx
  0xa755b2ed: jmp    0xa755b3f6
  0xa755b2f2: sub    $0x8,%esp
  0xa755b2f5: fstpl  (%esp)
  0xa755b2f8: mov    %ecx,%edx
  0xa755b2fa: mov    %esi,-0x1c(%ebp)
  0xa755b2fd: lea    (%edx),%eax
  0xa755b2ff: mov    0x4(%edx),%ecx
  0xa755b302: movl   $0x0,0x4(%edx)
  0xa755b309: mov    (%ecx),%ebx
  0xa755b30b: and    $0x7,%ebx
  0xa755b30e: cmp    $0x5,%ebx
  0xa755b311: je     0xa755b3d8
  0xa755b317: mov    (%eax),%ebx
  0xa755b319: test   %ebx,%ebx
  0xa755b31b: je     0xa755b3d8
  0xa755b321: lock cmpxchg %ebx,(%ecx)
  0xa755b325: je     0xa755b3d8
  0xa755b32b: mov    %ecx,0x4(%edx)
  0xa755b32e: call   0xa755b338
  0xa755b333: jmp    0xa755b3d8
  0xa755b338: push   %edx
  0xa755b339: lea    0x8(%esp),%eax
  0xa755b33d: cmpl   $0x0,-0x8(%ebp)
  0xa755b344: je     0xa755b35b
  0xa755b34a: push   $0xb7449b58
  0xa755b34f: call   0xa755b354
  0xa755b354: pusha  
  0xa755b355: call   0xb6ff5f32
  0xa755b35a: hlt    
  0xa755b35b: mov    %esi,-0x1c(%ebp)
  0xa755b35e: mov    %esp,%edi
  0xa755b360: shr    $0xc,%edi
  0xa755b363: mov    -0x4871aba0(,%edi,4),%edi
  0xa755b36a: push   %edi
  0xa755b36b: mov    %ebp,0x148(%edi)
  0xa755b371: mov    %eax,0x140(%edi)
  0xa755b377: call   0xb6e5ed36
  0xa755b37c: add    $0x8,%esp
  0xa755b37f: push   %eax
  0xa755b380: mov    %esp,%eax
  0xa755b382: shr    $0xc,%eax
  0xa755b385: mov    -0x4871aba0(,%eax,4),%eax
  0xa755b38c: cmp    %eax,%edi
  0xa755b38e: je     0xa755b3a5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755b394: push   $0xb74acf8c
  0xa755b399: call   0xa755b39e
  0xa755b39e: pusha  
  0xa755b39f: call   0xb6ff5f32
  0xa755b3a4: hlt    
  0xa755b3a5: pop    %eax
  0xa755b3a6: movl   $0x0,0x140(%edi)
  0xa755b3b0: movl   $0x0,0x148(%edi)
  0xa755b3ba: movl   $0x0,0x144(%edi)
  0xa755b3c4: cmpl   $0x0,0x4(%edi)
  0xa755b3cb: jne    0xa7556400
  0xa755b3d1: mov    -0x1c(%ebp),%esi
  0xa755b3d4: mov    -0x18(%ebp),%edi
  0xa755b3d7: ret    
  0xa755b3d8: mov    -0x1c(%ebp),%esi
  0xa755b3db: fldl   (%esp)
  0xa755b3de: add    $0x8,%esp
  0xa755b3e1: jmp    0xa755b2e7
  0xa755b3e6: cmpl   $0x0,0x4(%ecx)
  0xa755b3ed: jne    0xa755b2f2
  0xa755b3f3: add    $0x8,%ecx
  0xa755b3f6: cmp    %ebx,%ecx
  0xa755b3f8: jne    0xa755b3e6
  0xa755b3fa: cmpb   $0x0,0xb78c1e7e
  0xa755b401: je     0xa755b44a
  0xa755b407: sub    $0x8,%esp
  0xa755b40a: fstpl  (%esp)
  0xa755b40d: mov    %esp,%ebx
  0xa755b40f: shr    $0xc,%ebx
  0xa755b412: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755b419: mov    -0xc(%ebp),%ecx
  0xa755b41c: push   %ecx
  0xa755b41d: push   %ebx
  0xa755b41e: cmpl   $0x0,-0x8(%ebp)
  0xa755b425: je     0xa755b43c
  0xa755b42b: push   $0xb7449b18
  0xa755b430: call   0xa755b435
  0xa755b435: pusha  
  0xa755b436: call   0xb6ff5f32
  0xa755b43b: hlt    
  0xa755b43c: call   0xb7175974
  0xa755b441: add    $0x8,%esp
  0xa755b444: fldl   (%esp)
  0xa755b447: add    $0x8,%esp
  0xa755b44a: mov    -0x4(%ebp),%ebx
  0xa755b44d: mov    %ebp,%esp
  0xa755b44f: pop    %ebp
  0xa755b450: pop    %esi
  0xa755b451: mov    %ebx,%esp
  0xa755b453: sub    $0x8,%esp
  0xa755b456: fstpl  (%esp)
  0xa755b459: vmovsd (%esp),%xmm0
  0xa755b45e: add    $0x8,%esp
  0xa755b461: jmp    *%esi
  0xa755b463: mov    -0x1c(%ebp),%esi
  0xa755b466: mov    -0x18(%ebp),%edi
  0xa755b469: mov    -0x20(%ebp),%esp
  0xa755b46c: movl   $0x0,-0x8(%ebp)
  0xa755b473: emms   
  0xa755b475: mov    %esp,%ecx
  0xa755b477: shr    $0xc,%ecx
  0xa755b47a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b481: mov    0x330(%ecx),%ecx
  0xa755b487: flds   0x54(%ecx)
  0xa755b48a: movl   $0xb,0x50(%ecx)
  0xa755b491: movl   $0x0,0x54(%ecx)
  0xa755b498: movl   $0x0,0x58(%ecx)
  0xa755b49f: mov    %esp,%ecx
  0xa755b4a1: shr    $0xc,%ecx
  0xa755b4a4: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b4ab: mov    0x330(%ecx),%ecx
  0xa755b4b1: movl   $0x0,0x4c(%ecx)
  0xa755b4b8: mov    %esp,%ecx
  0xa755b4ba: shr    $0xc,%ecx
  0xa755b4bd: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b4c4: mov    0x1a5(%ecx),%bl
  0xa755b4ca: mov    %ebx,%edi
  0xa755b4cc: movb   $0x0,0x1a5(%ecx)
  0xa755b4d3: mov    -0xc(%ebp),%ebx
  0xa755b4d6: mov    0x14(%ebx),%ecx
  0xa755b4d9: test   $0x20,%ecx
  0xa755b4df: je     0xa755b5f6
  0xa755b4e5: mov    %edi,%ecx
  0xa755b4e7: test   $0xff,%cl
  0xa755b4ea: jne    0xa755b709
  0xa755b4f0: sub    $0x4,%esp
  0xa755b4f3: fstps  (%esp)
  0xa755b4f6: lea    -0x28(%ebp),%edx
  0xa755b4f9: mov    0x4(%edx),%eax
  0xa755b4fc: test   %eax,%eax
  0xa755b4fe: jne    0xa755b50f
  0xa755b504: flds   (%esp)
  0xa755b507: add    $0x4,%esp
  0xa755b50a: jmp    0xa755b5f6
  0xa755b50f: mov    %esi,-0x1c(%ebp)
  0xa755b512: lea    (%edx),%eax
  0xa755b514: mov    0x4(%edx),%ecx
  0xa755b517: movl   $0x0,0x4(%edx)
  0xa755b51e: mov    (%ecx),%ebx
  0xa755b520: and    $0x7,%ebx
  0xa755b523: cmp    $0x5,%ebx
  0xa755b526: je     0xa755b5ed
  0xa755b52c: mov    (%eax),%ebx
  0xa755b52e: test   %ebx,%ebx
  0xa755b530: je     0xa755b5ed
  0xa755b536: lock cmpxchg %ebx,(%ecx)
  0xa755b53a: je     0xa755b5ed
  0xa755b540: mov    %ecx,0x4(%edx)
  0xa755b543: call   0xa755b54d
  0xa755b548: jmp    0xa755b5ed
  0xa755b54d: push   %edx
  0xa755b54e: lea    0x8(%esp),%eax
  0xa755b552: cmpl   $0x0,-0x8(%ebp)
  0xa755b559: je     0xa755b570
  0xa755b55f: push   $0xb7449b58
  0xa755b564: call   0xa755b569
  0xa755b569: pusha  
  0xa755b56a: call   0xb6ff5f32
  0xa755b56f: hlt    
  0xa755b570: mov    %esi,-0x1c(%ebp)
  0xa755b573: mov    %esp,%edi
  0xa755b575: shr    $0xc,%edi
  0xa755b578: mov    -0x4871aba0(,%edi,4),%edi
  0xa755b57f: push   %edi
  0xa755b580: mov    %ebp,0x148(%edi)
  0xa755b586: mov    %eax,0x140(%edi)
  0xa755b58c: call   0xb6e5ed36
  0xa755b591: add    $0x8,%esp
  0xa755b594: push   %eax
  0xa755b595: mov    %esp,%eax
  0xa755b597: shr    $0xc,%eax
  0xa755b59a: mov    -0x4871aba0(,%eax,4),%eax
  0xa755b5a1: cmp    %eax,%edi
  0xa755b5a3: je     0xa755b5ba
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755b5a9: push   $0xb74acf8c
  0xa755b5ae: call   0xa755b5b3
  0xa755b5b3: pusha  
  0xa755b5b4: call   0xb6ff5f32
  0xa755b5b9: hlt    
  0xa755b5ba: pop    %eax
  0xa755b5bb: movl   $0x0,0x140(%edi)
  0xa755b5c5: movl   $0x0,0x148(%edi)
  0xa755b5cf: movl   $0x0,0x144(%edi)
  0xa755b5d9: cmpl   $0x0,0x4(%edi)
  0xa755b5e0: jne    0xa7556400
  0xa755b5e6: mov    -0x1c(%ebp),%esi
  0xa755b5e9: mov    -0x18(%ebp),%edi
  0xa755b5ec: ret    
  0xa755b5ed: mov    -0x1c(%ebp),%esi
  0xa755b5f0: flds   (%esp)
  0xa755b5f3: add    $0x4,%esp
  0xa755b5f6: mov    -0x20(%ebp),%ecx
  0xa755b5f9: lea    -0x20(%ebp),%ebx
  0xa755b5fc: jmp    0xa755b705
  0xa755b601: sub    $0x4,%esp
  0xa755b604: fstps  (%esp)
  0xa755b607: mov    %ecx,%edx
  0xa755b609: mov    %esi,-0x1c(%ebp)
  0xa755b60c: lea    (%edx),%eax
  0xa755b60e: mov    0x4(%edx),%ecx
  0xa755b611: movl   $0x0,0x4(%edx)
  0xa755b618: mov    (%ecx),%ebx
  0xa755b61a: and    $0x7,%ebx
  0xa755b61d: cmp    $0x5,%ebx
  0xa755b620: je     0xa755b6e7
  0xa755b626: mov    (%eax),%ebx
  0xa755b628: test   %ebx,%ebx
  0xa755b62a: je     0xa755b6e7
  0xa755b630: lock cmpxchg %ebx,(%ecx)
  0xa755b634: je     0xa755b6e7
  0xa755b63a: mov    %ecx,0x4(%edx)
  0xa755b63d: call   0xa755b647
  0xa755b642: jmp    0xa755b6e7
  0xa755b647: push   %edx
  0xa755b648: lea    0x8(%esp),%eax
  0xa755b64c: cmpl   $0x0,-0x8(%ebp)
  0xa755b653: je     0xa755b66a
  0xa755b659: push   $0xb7449b58
  0xa755b65e: call   0xa755b663
  0xa755b663: pusha  
  0xa755b664: call   0xb6ff5f32
  0xa755b669: hlt    
  0xa755b66a: mov    %esi,-0x1c(%ebp)
  0xa755b66d: mov    %esp,%edi
  0xa755b66f: shr    $0xc,%edi
  0xa755b672: mov    -0x4871aba0(,%edi,4),%edi
  0xa755b679: push   %edi
  0xa755b67a: mov    %ebp,0x148(%edi)
  0xa755b680: mov    %eax,0x140(%edi)
  0xa755b686: call   0xb6e5ed36
  0xa755b68b: add    $0x8,%esp
  0xa755b68e: push   %eax
  0xa755b68f: mov    %esp,%eax
  0xa755b691: shr    $0xc,%eax
  0xa755b694: mov    -0x4871aba0(,%eax,4),%eax
  0xa755b69b: cmp    %eax,%edi
  0xa755b69d: je     0xa755b6b4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755b6a3: push   $0xb74acf8c
  0xa755b6a8: call   0xa755b6ad
  0xa755b6ad: pusha  
  0xa755b6ae: call   0xb6ff5f32
  0xa755b6b3: hlt    
  0xa755b6b4: pop    %eax
  0xa755b6b5: movl   $0x0,0x140(%edi)
  0xa755b6bf: movl   $0x0,0x148(%edi)
  0xa755b6c9: movl   $0x0,0x144(%edi)
  0xa755b6d3: cmpl   $0x0,0x4(%edi)
  0xa755b6da: jne    0xa7556400
  0xa755b6e0: mov    -0x1c(%ebp),%esi
  0xa755b6e3: mov    -0x18(%ebp),%edi
  0xa755b6e6: ret    
  0xa755b6e7: mov    -0x1c(%ebp),%esi
  0xa755b6ea: flds   (%esp)
  0xa755b6ed: add    $0x4,%esp
  0xa755b6f0: jmp    0xa755b5f6
  0xa755b6f5: cmpl   $0x0,0x4(%ecx)
  0xa755b6fc: jne    0xa755b601
  0xa755b702: add    $0x8,%ecx
  0xa755b705: cmp    %ebx,%ecx
  0xa755b707: jne    0xa755b6f5
  0xa755b709: cmpb   $0x0,0xb78c1e7e
  0xa755b710: je     0xa755b759
  0xa755b716: sub    $0x4,%esp
  0xa755b719: fstps  (%esp)
  0xa755b71c: mov    %esp,%ebx
  0xa755b71e: shr    $0xc,%ebx
  0xa755b721: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755b728: mov    -0xc(%ebp),%ecx
  0xa755b72b: push   %ecx
  0xa755b72c: push   %ebx
  0xa755b72d: cmpl   $0x0,-0x8(%ebp)
  0xa755b734: je     0xa755b74b
  0xa755b73a: push   $0xb7449b18
  0xa755b73f: call   0xa755b744
  0xa755b744: pusha  
  0xa755b745: call   0xb6ff5f32
  0xa755b74a: hlt    
  0xa755b74b: call   0xb7175974
  0xa755b750: add    $0x8,%esp
  0xa755b753: flds   (%esp)
  0xa755b756: add    $0x4,%esp
  0xa755b759: mov    -0x4(%ebp),%ebx
  0xa755b75c: mov    %ebp,%esp
  0xa755b75e: pop    %ebp
  0xa755b75f: pop    %esi
  0xa755b760: mov    %ebx,%esp
  0xa755b762: sub    $0x4,%esp
  0xa755b765: fstps  (%esp)
  0xa755b768: vmovss (%esp),%xmm0
  0xa755b76d: add    $0x4,%esp
  0xa755b770: jmp    *%esi
  0xa755b772: mov    -0x1c(%ebp),%esi
  0xa755b775: mov    -0x18(%ebp),%edi
  0xa755b778: mov    -0x20(%ebp),%esp
  0xa755b77b: movl   $0x0,-0x8(%ebp)
  0xa755b782: emms   
  0xa755b784: mov    %esp,%ecx
  0xa755b786: shr    $0xc,%ecx
  0xa755b789: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b790: mov    0x330(%ecx),%ecx
  0xa755b796: mov    0x58(%ecx),%edx
  0xa755b799: mov    0x54(%ecx),%eax
  0xa755b79c: movl   $0xb,0x50(%ecx)
  0xa755b7a3: movl   $0x0,0x54(%ecx)
  0xa755b7aa: movl   $0x0,0x58(%ecx)
  0xa755b7b1: mov    %esp,%ecx
  0xa755b7b3: shr    $0xc,%ecx
  0xa755b7b6: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b7bd: mov    0x330(%ecx),%ecx
  0xa755b7c3: movl   $0x0,0x4c(%ecx)
  0xa755b7ca: mov    %esp,%ecx
  0xa755b7cc: shr    $0xc,%ecx
  0xa755b7cf: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755b7d6: mov    0x1a5(%ecx),%bl
  0xa755b7dc: mov    %ebx,%edi
  0xa755b7de: movb   $0x0,0x1a5(%ecx)
  0xa755b7e5: mov    -0xc(%ebp),%ebx
  0xa755b7e8: mov    0x14(%ebx),%ecx
  0xa755b7eb: test   $0x20,%ecx
  0xa755b7f1: je     0xa755b8fc
  0xa755b7f7: mov    %edi,%ecx
  0xa755b7f9: test   $0xff,%cl
  0xa755b7fc: jne    0xa755ba07
  0xa755b802: push   %edx
  0xa755b803: push   %eax
  0xa755b804: lea    -0x28(%ebp),%edx
  0xa755b807: mov    0x4(%edx),%eax
  0xa755b80a: test   %eax,%eax
  0xa755b80c: jne    0xa755b819
  0xa755b812: pop    %eax
  0xa755b813: pop    %edx
  0xa755b814: jmp    0xa755b8fc
  0xa755b819: mov    %esi,-0x1c(%ebp)
  0xa755b81c: lea    (%edx),%eax
  0xa755b81e: mov    0x4(%edx),%ecx
  0xa755b821: movl   $0x0,0x4(%edx)
  0xa755b828: mov    (%ecx),%ebx
  0xa755b82a: and    $0x7,%ebx
  0xa755b82d: cmp    $0x5,%ebx
  0xa755b830: je     0xa755b8f7
  0xa755b836: mov    (%eax),%ebx
  0xa755b838: test   %ebx,%ebx
  0xa755b83a: je     0xa755b8f7
  0xa755b840: lock cmpxchg %ebx,(%ecx)
  0xa755b844: je     0xa755b8f7
  0xa755b84a: mov    %ecx,0x4(%edx)
  0xa755b84d: call   0xa755b857
  0xa755b852: jmp    0xa755b8f7
  0xa755b857: push   %edx
  0xa755b858: lea    0x8(%esp),%eax
  0xa755b85c: cmpl   $0x0,-0x8(%ebp)
  0xa755b863: je     0xa755b87a
  0xa755b869: push   $0xb7449b58
  0xa755b86e: call   0xa755b873
  0xa755b873: pusha  
  0xa755b874: call   0xb6ff5f32
  0xa755b879: hlt    
  0xa755b87a: mov    %esi,-0x1c(%ebp)
  0xa755b87d: mov    %esp,%edi
  0xa755b87f: shr    $0xc,%edi
  0xa755b882: mov    -0x4871aba0(,%edi,4),%edi
  0xa755b889: push   %edi
  0xa755b88a: mov    %ebp,0x148(%edi)
  0xa755b890: mov    %eax,0x140(%edi)
  0xa755b896: call   0xb6e5ed36
  0xa755b89b: add    $0x8,%esp
  0xa755b89e: push   %eax
  0xa755b89f: mov    %esp,%eax
  0xa755b8a1: shr    $0xc,%eax
  0xa755b8a4: mov    -0x4871aba0(,%eax,4),%eax
  0xa755b8ab: cmp    %eax,%edi
  0xa755b8ad: je     0xa755b8c4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755b8b3: push   $0xb74acf8c
  0xa755b8b8: call   0xa755b8bd
  0xa755b8bd: pusha  
  0xa755b8be: call   0xb6ff5f32
  0xa755b8c3: hlt    
  0xa755b8c4: pop    %eax
  0xa755b8c5: movl   $0x0,0x140(%edi)
  0xa755b8cf: movl   $0x0,0x148(%edi)
  0xa755b8d9: movl   $0x0,0x144(%edi)
  0xa755b8e3: cmpl   $0x0,0x4(%edi)
  0xa755b8ea: jne    0xa7556400
  0xa755b8f0: mov    -0x1c(%ebp),%esi
  0xa755b8f3: mov    -0x18(%ebp),%edi
  0xa755b8f6: ret    
  0xa755b8f7: mov    -0x1c(%ebp),%esi
  0xa755b8fa: pop    %eax
  0xa755b8fb: pop    %edx
  0xa755b8fc: mov    -0x20(%ebp),%ecx
  0xa755b8ff: lea    -0x20(%ebp),%ebx
  0xa755b902: jmp    0xa755ba03
  0xa755b907: push   %edx
  0xa755b908: push   %eax
  0xa755b909: mov    %ecx,%edx
  0xa755b90b: mov    %esi,-0x1c(%ebp)
  0xa755b90e: lea    (%edx),%eax
  0xa755b910: mov    0x4(%edx),%ecx
  0xa755b913: movl   $0x0,0x4(%edx)
  0xa755b91a: mov    (%ecx),%ebx
  0xa755b91c: and    $0x7,%ebx
  0xa755b91f: cmp    $0x5,%ebx
  0xa755b922: je     0xa755b9e9
  0xa755b928: mov    (%eax),%ebx
  0xa755b92a: test   %ebx,%ebx
  0xa755b92c: je     0xa755b9e9
  0xa755b932: lock cmpxchg %ebx,(%ecx)
  0xa755b936: je     0xa755b9e9
  0xa755b93c: mov    %ecx,0x4(%edx)
  0xa755b93f: call   0xa755b949
  0xa755b944: jmp    0xa755b9e9
  0xa755b949: push   %edx
  0xa755b94a: lea    0x8(%esp),%eax
  0xa755b94e: cmpl   $0x0,-0x8(%ebp)
  0xa755b955: je     0xa755b96c
  0xa755b95b: push   $0xb7449b58
  0xa755b960: call   0xa755b965
  0xa755b965: pusha  
  0xa755b966: call   0xb6ff5f32
  0xa755b96b: hlt    
  0xa755b96c: mov    %esi,-0x1c(%ebp)
  0xa755b96f: mov    %esp,%edi
  0xa755b971: shr    $0xc,%edi
  0xa755b974: mov    -0x4871aba0(,%edi,4),%edi
  0xa755b97b: push   %edi
  0xa755b97c: mov    %ebp,0x148(%edi)
  0xa755b982: mov    %eax,0x140(%edi)
  0xa755b988: call   0xb6e5ed36
  0xa755b98d: add    $0x8,%esp
  0xa755b990: push   %eax
  0xa755b991: mov    %esp,%eax
  0xa755b993: shr    $0xc,%eax
  0xa755b996: mov    -0x4871aba0(,%eax,4),%eax
  0xa755b99d: cmp    %eax,%edi
  0xa755b99f: je     0xa755b9b6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755b9a5: push   $0xb74acf8c
  0xa755b9aa: call   0xa755b9af
  0xa755b9af: pusha  
  0xa755b9b0: call   0xb6ff5f32
  0xa755b9b5: hlt    
  0xa755b9b6: pop    %eax
  0xa755b9b7: movl   $0x0,0x140(%edi)
  0xa755b9c1: movl   $0x0,0x148(%edi)
  0xa755b9cb: movl   $0x0,0x144(%edi)
  0xa755b9d5: cmpl   $0x0,0x4(%edi)
  0xa755b9dc: jne    0xa7556400
  0xa755b9e2: mov    -0x1c(%ebp),%esi
  0xa755b9e5: mov    -0x18(%ebp),%edi
  0xa755b9e8: ret    
  0xa755b9e9: mov    -0x1c(%ebp),%esi
  0xa755b9ec: pop    %eax
  0xa755b9ed: pop    %edx
  0xa755b9ee: jmp    0xa755b8fc
  0xa755b9f3: cmpl   $0x0,0x4(%ecx)
  0xa755b9fa: jne    0xa755b907
  0xa755ba00: add    $0x8,%ecx
  0xa755ba03: cmp    %ebx,%ecx
  0xa755ba05: jne    0xa755b9f3
  0xa755ba07: cmpb   $0x0,0xb78c1e7e
  0xa755ba0e: je     0xa755ba4f
  0xa755ba14: push   %edx
  0xa755ba15: push   %eax
  0xa755ba16: mov    %esp,%ebx
  0xa755ba18: shr    $0xc,%ebx
  0xa755ba1b: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755ba22: mov    -0xc(%ebp),%ecx
  0xa755ba25: push   %ecx
  0xa755ba26: push   %ebx
  0xa755ba27: cmpl   $0x0,-0x8(%ebp)
  0xa755ba2e: je     0xa755ba45
  0xa755ba34: push   $0xb7449b18
  0xa755ba39: call   0xa755ba3e
  0xa755ba3e: pusha  
  0xa755ba3f: call   0xb6ff5f32
  0xa755ba44: hlt    
  0xa755ba45: call   0xb7175974
  0xa755ba4a: add    $0x8,%esp
  0xa755ba4d: pop    %eax
  0xa755ba4e: pop    %edx
  0xa755ba4f: mov    -0x4(%ebp),%ebx
  0xa755ba52: mov    %ebp,%esp
  0xa755ba54: pop    %ebp
  0xa755ba55: pop    %esi
  0xa755ba56: mov    %ebx,%esp
  0xa755ba58: jmp    *%esi
  0xa755ba5a: mov    -0x1c(%ebp),%esi
  0xa755ba5d: mov    -0x18(%ebp),%edi
  0xa755ba60: mov    -0x20(%ebp),%esp
  0xa755ba63: movl   $0x0,-0x8(%ebp)
  0xa755ba6a: emms   
  0xa755ba6c: mov    %esp,%ecx
  0xa755ba6e: shr    $0xc,%ecx
  0xa755ba71: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ba78: mov    0x330(%ecx),%ecx
  0xa755ba7e: mov    0x54(%ecx),%eax
  0xa755ba81: movl   $0xb,0x50(%ecx)
  0xa755ba88: movl   $0x0,0x54(%ecx)
  0xa755ba8f: movl   $0x0,0x58(%ecx)
  0xa755ba96: mov    %esp,%ecx
  0xa755ba98: shr    $0xc,%ecx
  0xa755ba9b: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755baa2: mov    0x330(%ecx),%ecx
  0xa755baa8: movl   $0x0,0x4c(%ecx)
  0xa755baaf: mov    %esp,%ecx
  0xa755bab1: shr    $0xc,%ecx
  0xa755bab4: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755babb: mov    0x1a5(%ecx),%bl
  0xa755bac1: mov    %ebx,%edi
  0xa755bac3: movb   $0x0,0x1a5(%ecx)
  0xa755baca: mov    -0xc(%ebp),%ebx
  0xa755bacd: mov    0x14(%ebx),%ecx
  0xa755bad0: test   $0x20,%ecx
  0xa755bad6: je     0xa755bbde
  0xa755badc: mov    %edi,%ecx
  0xa755bade: test   $0xff,%cl
  0xa755bae1: jne    0xa755bce7
  0xa755bae7: push   %eax
  0xa755bae8: lea    -0x28(%ebp),%edx
  0xa755baeb: mov    0x4(%edx),%eax
  0xa755baee: test   %eax,%eax
  0xa755baf0: jne    0xa755bafc
  0xa755baf6: pop    %eax
  0xa755baf7: jmp    0xa755bbde
  0xa755bafc: mov    %esi,-0x1c(%ebp)
  0xa755baff: lea    (%edx),%eax
  0xa755bb01: mov    0x4(%edx),%ecx
  0xa755bb04: movl   $0x0,0x4(%edx)
  0xa755bb0b: mov    (%ecx),%ebx
  0xa755bb0d: and    $0x7,%ebx
  0xa755bb10: cmp    $0x5,%ebx
  0xa755bb13: je     0xa755bbda
  0xa755bb19: mov    (%eax),%ebx
  0xa755bb1b: test   %ebx,%ebx
  0xa755bb1d: je     0xa755bbda
  0xa755bb23: lock cmpxchg %ebx,(%ecx)
  0xa755bb27: je     0xa755bbda
  0xa755bb2d: mov    %ecx,0x4(%edx)
  0xa755bb30: call   0xa755bb3a
  0xa755bb35: jmp    0xa755bbda
  0xa755bb3a: push   %edx
  0xa755bb3b: lea    0x8(%esp),%eax
  0xa755bb3f: cmpl   $0x0,-0x8(%ebp)
  0xa755bb46: je     0xa755bb5d
  0xa755bb4c: push   $0xb7449b58
  0xa755bb51: call   0xa755bb56
  0xa755bb56: pusha  
  0xa755bb57: call   0xb6ff5f32
  0xa755bb5c: hlt    
  0xa755bb5d: mov    %esi,-0x1c(%ebp)
  0xa755bb60: mov    %esp,%edi
  0xa755bb62: shr    $0xc,%edi
  0xa755bb65: mov    -0x4871aba0(,%edi,4),%edi
  0xa755bb6c: push   %edi
  0xa755bb6d: mov    %ebp,0x148(%edi)
  0xa755bb73: mov    %eax,0x140(%edi)
  0xa755bb79: call   0xb6e5ed36
  0xa755bb7e: add    $0x8,%esp
  0xa755bb81: push   %eax
  0xa755bb82: mov    %esp,%eax
  0xa755bb84: shr    $0xc,%eax
  0xa755bb87: mov    -0x4871aba0(,%eax,4),%eax
  0xa755bb8e: cmp    %eax,%edi
  0xa755bb90: je     0xa755bba7
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755bb96: push   $0xb74acf8c
  0xa755bb9b: call   0xa755bba0
  0xa755bba0: pusha  
  0xa755bba1: call   0xb6ff5f32
  0xa755bba6: hlt    
  0xa755bba7: pop    %eax
  0xa755bba8: movl   $0x0,0x140(%edi)
  0xa755bbb2: movl   $0x0,0x148(%edi)
  0xa755bbbc: movl   $0x0,0x144(%edi)
  0xa755bbc6: cmpl   $0x0,0x4(%edi)
  0xa755bbcd: jne    0xa7556400
  0xa755bbd3: mov    -0x1c(%ebp),%esi
  0xa755bbd6: mov    -0x18(%ebp),%edi
  0xa755bbd9: ret    
  0xa755bbda: mov    -0x1c(%ebp),%esi
  0xa755bbdd: pop    %eax
  0xa755bbde: mov    -0x20(%ebp),%ecx
  0xa755bbe1: lea    -0x20(%ebp),%ebx
  0xa755bbe4: jmp    0xa755bce3
  0xa755bbe9: push   %eax
  0xa755bbea: mov    %ecx,%edx
  0xa755bbec: mov    %esi,-0x1c(%ebp)
  0xa755bbef: lea    (%edx),%eax
  0xa755bbf1: mov    0x4(%edx),%ecx
  0xa755bbf4: movl   $0x0,0x4(%edx)
  0xa755bbfb: mov    (%ecx),%ebx
  0xa755bbfd: and    $0x7,%ebx
  0xa755bc00: cmp    $0x5,%ebx
  0xa755bc03: je     0xa755bcca
  0xa755bc09: mov    (%eax),%ebx
  0xa755bc0b: test   %ebx,%ebx
  0xa755bc0d: je     0xa755bcca
  0xa755bc13: lock cmpxchg %ebx,(%ecx)
  0xa755bc17: je     0xa755bcca
  0xa755bc1d: mov    %ecx,0x4(%edx)
  0xa755bc20: call   0xa755bc2a
  0xa755bc25: jmp    0xa755bcca
  0xa755bc2a: push   %edx
  0xa755bc2b: lea    0x8(%esp),%eax
  0xa755bc2f: cmpl   $0x0,-0x8(%ebp)
  0xa755bc36: je     0xa755bc4d
  0xa755bc3c: push   $0xb7449b58
  0xa755bc41: call   0xa755bc46
  0xa755bc46: pusha  
  0xa755bc47: call   0xb6ff5f32
  0xa755bc4c: hlt    
  0xa755bc4d: mov    %esi,-0x1c(%ebp)
  0xa755bc50: mov    %esp,%edi
  0xa755bc52: shr    $0xc,%edi
  0xa755bc55: mov    -0x4871aba0(,%edi,4),%edi
  0xa755bc5c: push   %edi
  0xa755bc5d: mov    %ebp,0x148(%edi)
  0xa755bc63: mov    %eax,0x140(%edi)
  0xa755bc69: call   0xb6e5ed36
  0xa755bc6e: add    $0x8,%esp
  0xa755bc71: push   %eax
  0xa755bc72: mov    %esp,%eax
  0xa755bc74: shr    $0xc,%eax
  0xa755bc77: mov    -0x4871aba0(,%eax,4),%eax
  0xa755bc7e: cmp    %eax,%edi
  0xa755bc80: je     0xa755bc97
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755bc86: push   $0xb74acf8c
  0xa755bc8b: call   0xa755bc90
  0xa755bc90: pusha  
  0xa755bc91: call   0xb6ff5f32
  0xa755bc96: hlt    
  0xa755bc97: pop    %eax
  0xa755bc98: movl   $0x0,0x140(%edi)
  0xa755bca2: movl   $0x0,0x148(%edi)
  0xa755bcac: movl   $0x0,0x144(%edi)
  0xa755bcb6: cmpl   $0x0,0x4(%edi)
  0xa755bcbd: jne    0xa7556400
  0xa755bcc3: mov    -0x1c(%ebp),%esi
  0xa755bcc6: mov    -0x18(%ebp),%edi
  0xa755bcc9: ret    
  0xa755bcca: mov    -0x1c(%ebp),%esi
  0xa755bccd: pop    %eax
  0xa755bcce: jmp    0xa755bbde
  0xa755bcd3: cmpl   $0x0,0x4(%ecx)
  0xa755bcda: jne    0xa755bbe9
  0xa755bce0: add    $0x8,%ecx
  0xa755bce3: cmp    %ebx,%ecx
  0xa755bce5: jne    0xa755bcd3
  0xa755bce7: cmpb   $0x0,0xb78c1e7e
  0xa755bcee: je     0xa755bd2d
  0xa755bcf4: push   %eax
  0xa755bcf5: mov    %esp,%ebx
  0xa755bcf7: shr    $0xc,%ebx
  0xa755bcfa: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755bd01: mov    -0xc(%ebp),%ecx
  0xa755bd04: push   %ecx
  0xa755bd05: push   %ebx
  0xa755bd06: cmpl   $0x0,-0x8(%ebp)
  0xa755bd0d: je     0xa755bd24
  0xa755bd13: push   $0xb7449b18
  0xa755bd18: call   0xa755bd1d
  0xa755bd1d: pusha  
  0xa755bd1e: call   0xb6ff5f32
  0xa755bd23: hlt    
  0xa755bd24: call   0xb7175974
  0xa755bd29: add    $0x8,%esp
  0xa755bd2c: pop    %eax
  0xa755bd2d: mov    -0x4(%ebp),%ebx
  0xa755bd30: mov    %ebp,%esp
  0xa755bd32: pop    %ebp
  0xa755bd33: pop    %esi
  0xa755bd34: mov    %ebx,%esp
  0xa755bd36: jmp    *%esi
  0xa755bd38: mov    -0x1c(%ebp),%esi
  0xa755bd3b: mov    -0x18(%ebp),%edi
  0xa755bd3e: mov    -0x20(%ebp),%esp
  0xa755bd41: movl   $0x0,-0x8(%ebp)
  0xa755bd48: emms   
  0xa755bd4a: mov    %esp,%ecx
  0xa755bd4c: shr    $0xc,%ecx
  0xa755bd4f: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755bd56: mov    0x330(%ecx),%ecx
  0xa755bd5c: mov    0x5c(%ecx),%eax
  0xa755bd5f: movl   $0x0,0x5c(%ecx)
  0xa755bd66: movl   $0xb,0x50(%ecx)
  0xa755bd6d: movl   $0x0,0x54(%ecx)
  0xa755bd74: movl   $0x0,0x58(%ecx)
  0xa755bd7b: mov    %esp,%ecx
  0xa755bd7d: shr    $0xc,%ecx
  0xa755bd80: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755bd87: mov    0x330(%ecx),%ecx
  0xa755bd8d: movl   $0x0,0x4c(%ecx)
  0xa755bd94: mov    %esp,%ecx
  0xa755bd96: shr    $0xc,%ecx
  0xa755bd99: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755bda0: mov    0x1a5(%ecx),%bl
  0xa755bda6: mov    %ebx,%edi
  0xa755bda8: movb   $0x0,0x1a5(%ecx)
  0xa755bdaf: mov    -0xc(%ebp),%ebx
  0xa755bdb2: mov    0x14(%ebx),%ecx
  0xa755bdb5: test   $0x20,%ecx
  0xa755bdbb: je     0xa755bec3
  0xa755bdc1: mov    %edi,%ecx
  0xa755bdc3: test   $0xff,%cl
  0xa755bdc6: jne    0xa755bfcc
  0xa755bdcc: push   %eax
  0xa755bdcd: lea    -0x28(%ebp),%edx
  0xa755bdd0: mov    0x4(%edx),%eax
  0xa755bdd3: test   %eax,%eax
  0xa755bdd5: jne    0xa755bde1
  0xa755bddb: pop    %eax
  0xa755bddc: jmp    0xa755bec3
  0xa755bde1: mov    %esi,-0x1c(%ebp)
  0xa755bde4: lea    (%edx),%eax
  0xa755bde6: mov    0x4(%edx),%ecx
  0xa755bde9: movl   $0x0,0x4(%edx)
  0xa755bdf0: mov    (%ecx),%ebx
  0xa755bdf2: and    $0x7,%ebx
  0xa755bdf5: cmp    $0x5,%ebx
  0xa755bdf8: je     0xa755bebf
  0xa755bdfe: mov    (%eax),%ebx
  0xa755be00: test   %ebx,%ebx
  0xa755be02: je     0xa755bebf
  0xa755be08: lock cmpxchg %ebx,(%ecx)
  0xa755be0c: je     0xa755bebf
  0xa755be12: mov    %ecx,0x4(%edx)
  0xa755be15: call   0xa755be1f
  0xa755be1a: jmp    0xa755bebf
  0xa755be1f: push   %edx
  0xa755be20: lea    0x8(%esp),%eax
  0xa755be24: cmpl   $0x0,-0x8(%ebp)
  0xa755be2b: je     0xa755be42
  0xa755be31: push   $0xb7449b58
  0xa755be36: call   0xa755be3b
  0xa755be3b: pusha  
  0xa755be3c: call   0xb6ff5f32
  0xa755be41: hlt    
  0xa755be42: mov    %esi,-0x1c(%ebp)
  0xa755be45: mov    %esp,%edi
  0xa755be47: shr    $0xc,%edi
  0xa755be4a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755be51: push   %edi
  0xa755be52: mov    %ebp,0x148(%edi)
  0xa755be58: mov    %eax,0x140(%edi)
  0xa755be5e: call   0xb6e5ed36
  0xa755be63: add    $0x8,%esp
  0xa755be66: push   %eax
  0xa755be67: mov    %esp,%eax
  0xa755be69: shr    $0xc,%eax
  0xa755be6c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755be73: cmp    %eax,%edi
  0xa755be75: je     0xa755be8c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755be7b: push   $0xb74acf8c
  0xa755be80: call   0xa755be85
  0xa755be85: pusha  
  0xa755be86: call   0xb6ff5f32
  0xa755be8b: hlt    
  0xa755be8c: pop    %eax
  0xa755be8d: movl   $0x0,0x140(%edi)
  0xa755be97: movl   $0x0,0x148(%edi)
  0xa755bea1: movl   $0x0,0x144(%edi)
  0xa755beab: cmpl   $0x0,0x4(%edi)
  0xa755beb2: jne    0xa7556400
  0xa755beb8: mov    -0x1c(%ebp),%esi
  0xa755bebb: mov    -0x18(%ebp),%edi
  0xa755bebe: ret    
  0xa755bebf: mov    -0x1c(%ebp),%esi
  0xa755bec2: pop    %eax
  0xa755bec3: mov    -0x20(%ebp),%ecx
  0xa755bec6: lea    -0x20(%ebp),%ebx
  0xa755bec9: jmp    0xa755bfc8
  0xa755bece: push   %eax
  0xa755becf: mov    %ecx,%edx
  0xa755bed1: mov    %esi,-0x1c(%ebp)
  0xa755bed4: lea    (%edx),%eax
  0xa755bed6: mov    0x4(%edx),%ecx
  0xa755bed9: movl   $0x0,0x4(%edx)
  0xa755bee0: mov    (%ecx),%ebx
  0xa755bee2: and    $0x7,%ebx
  0xa755bee5: cmp    $0x5,%ebx
  0xa755bee8: je     0xa755bfaf
  0xa755beee: mov    (%eax),%ebx
  0xa755bef0: test   %ebx,%ebx
  0xa755bef2: je     0xa755bfaf
  0xa755bef8: lock cmpxchg %ebx,(%ecx)
  0xa755befc: je     0xa755bfaf
  0xa755bf02: mov    %ecx,0x4(%edx)
  0xa755bf05: call   0xa755bf0f
  0xa755bf0a: jmp    0xa755bfaf
  0xa755bf0f: push   %edx
  0xa755bf10: lea    0x8(%esp),%eax
  0xa755bf14: cmpl   $0x0,-0x8(%ebp)
  0xa755bf1b: je     0xa755bf32
  0xa755bf21: push   $0xb7449b58
  0xa755bf26: call   0xa755bf2b
  0xa755bf2b: pusha  
  0xa755bf2c: call   0xb6ff5f32
  0xa755bf31: hlt    
  0xa755bf32: mov    %esi,-0x1c(%ebp)
  0xa755bf35: mov    %esp,%edi
  0xa755bf37: shr    $0xc,%edi
  0xa755bf3a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755bf41: push   %edi
  0xa755bf42: mov    %ebp,0x148(%edi)
  0xa755bf48: mov    %eax,0x140(%edi)
  0xa755bf4e: call   0xb6e5ed36
  0xa755bf53: add    $0x8,%esp
  0xa755bf56: push   %eax
  0xa755bf57: mov    %esp,%eax
  0xa755bf59: shr    $0xc,%eax
  0xa755bf5c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755bf63: cmp    %eax,%edi
  0xa755bf65: je     0xa755bf7c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755bf6b: push   $0xb74acf8c
  0xa755bf70: call   0xa755bf75
  0xa755bf75: pusha  
  0xa755bf76: call   0xb6ff5f32
  0xa755bf7b: hlt    
  0xa755bf7c: pop    %eax
  0xa755bf7d: movl   $0x0,0x140(%edi)
  0xa755bf87: movl   $0x0,0x148(%edi)
  0xa755bf91: movl   $0x0,0x144(%edi)
  0xa755bf9b: cmpl   $0x0,0x4(%edi)
  0xa755bfa2: jne    0xa7556400
  0xa755bfa8: mov    -0x1c(%ebp),%esi
  0xa755bfab: mov    -0x18(%ebp),%edi
  0xa755bfae: ret    
  0xa755bfaf: mov    -0x1c(%ebp),%esi
  0xa755bfb2: pop    %eax
  0xa755bfb3: jmp    0xa755bec3
  0xa755bfb8: cmpl   $0x0,0x4(%ecx)
  0xa755bfbf: jne    0xa755bece
  0xa755bfc5: add    $0x8,%ecx
  0xa755bfc8: cmp    %ebx,%ecx
  0xa755bfca: jne    0xa755bfb8
  0xa755bfcc: cmpb   $0x0,0xb78c1e7e
  0xa755bfd3: je     0xa755c012
  0xa755bfd9: push   %eax
  0xa755bfda: mov    %esp,%ebx
  0xa755bfdc: shr    $0xc,%ebx
  0xa755bfdf: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755bfe6: mov    -0xc(%ebp),%ecx
  0xa755bfe9: push   %ecx
  0xa755bfea: push   %ebx
  0xa755bfeb: cmpl   $0x0,-0x8(%ebp)
  0xa755bff2: je     0xa755c009
  0xa755bff8: push   $0xb7449b18
  0xa755bffd: call   0xa755c002
  0xa755c002: pusha  
  0xa755c003: call   0xb6ff5f32
  0xa755c008: hlt    
  0xa755c009: call   0xb7175974
  0xa755c00e: add    $0x8,%esp
  0xa755c011: pop    %eax
  0xa755c012: mov    -0x4(%ebp),%ebx
  0xa755c015: mov    %ebp,%esp
  0xa755c017: pop    %ebp
  0xa755c018: pop    %esi
  0xa755c019: mov    %ebx,%esp
  0xa755c01b: jmp    *%esi
  0xa755c01d: mov    -0x1c(%ebp),%esi
  0xa755c020: mov    -0x18(%ebp),%edi
  0xa755c023: mov    -0x20(%ebp),%esp
  0xa755c026: movl   $0x0,-0x8(%ebp)
  0xa755c02d: emms   
  0xa755c02f: mov    %esp,%ecx
  0xa755c031: shr    $0xc,%ecx
  0xa755c034: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c03b: mov    0x330(%ecx),%ecx
  0xa755c041: mov    0x54(%ecx),%eax
  0xa755c044: movl   $0xb,0x50(%ecx)
  0xa755c04b: movl   $0x0,0x54(%ecx)
  0xa755c052: movl   $0x0,0x58(%ecx)
  0xa755c059: mov    %esp,%ecx
  0xa755c05b: shr    $0xc,%ecx
  0xa755c05e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c065: mov    0x330(%ecx),%ecx
  0xa755c06b: movl   $0x0,0x4c(%ecx)
  0xa755c072: mov    %esp,%ecx
  0xa755c074: shr    $0xc,%ecx
  0xa755c077: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c07e: mov    0x1a5(%ecx),%bl
  0xa755c084: mov    %ebx,%edi
  0xa755c086: movb   $0x0,0x1a5(%ecx)
  0xa755c08d: mov    -0xc(%ebp),%ebx
  0xa755c090: mov    0x14(%ebx),%ecx
  0xa755c093: test   $0x20,%ecx
  0xa755c099: je     0xa755c1a1
  0xa755c09f: mov    %edi,%ecx
  0xa755c0a1: test   $0xff,%cl
  0xa755c0a4: jne    0xa755c2aa
  0xa755c0aa: push   %eax
  0xa755c0ab: lea    -0x28(%ebp),%edx
  0xa755c0ae: mov    0x4(%edx),%eax
  0xa755c0b1: test   %eax,%eax
  0xa755c0b3: jne    0xa755c0bf
  0xa755c0b9: pop    %eax
  0xa755c0ba: jmp    0xa755c1a1
  0xa755c0bf: mov    %esi,-0x1c(%ebp)
  0xa755c0c2: lea    (%edx),%eax
  0xa755c0c4: mov    0x4(%edx),%ecx
  0xa755c0c7: movl   $0x0,0x4(%edx)
  0xa755c0ce: mov    (%ecx),%ebx
  0xa755c0d0: and    $0x7,%ebx
  0xa755c0d3: cmp    $0x5,%ebx
  0xa755c0d6: je     0xa755c19d
  0xa755c0dc: mov    (%eax),%ebx
  0xa755c0de: test   %ebx,%ebx
  0xa755c0e0: je     0xa755c19d
  0xa755c0e6: lock cmpxchg %ebx,(%ecx)
  0xa755c0ea: je     0xa755c19d
  0xa755c0f0: mov    %ecx,0x4(%edx)
  0xa755c0f3: call   0xa755c0fd
  0xa755c0f8: jmp    0xa755c19d
  0xa755c0fd: push   %edx
  0xa755c0fe: lea    0x8(%esp),%eax
  0xa755c102: cmpl   $0x0,-0x8(%ebp)
  0xa755c109: je     0xa755c120
  0xa755c10f: push   $0xb7449b58
  0xa755c114: call   0xa755c119
  0xa755c119: pusha  
  0xa755c11a: call   0xb6ff5f32
  0xa755c11f: hlt    
  0xa755c120: mov    %esi,-0x1c(%ebp)
  0xa755c123: mov    %esp,%edi
  0xa755c125: shr    $0xc,%edi
  0xa755c128: mov    -0x4871aba0(,%edi,4),%edi
  0xa755c12f: push   %edi
  0xa755c130: mov    %ebp,0x148(%edi)
  0xa755c136: mov    %eax,0x140(%edi)
  0xa755c13c: call   0xb6e5ed36
  0xa755c141: add    $0x8,%esp
  0xa755c144: push   %eax
  0xa755c145: mov    %esp,%eax
  0xa755c147: shr    $0xc,%eax
  0xa755c14a: mov    -0x4871aba0(,%eax,4),%eax
  0xa755c151: cmp    %eax,%edi
  0xa755c153: je     0xa755c16a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755c159: push   $0xb74acf8c
  0xa755c15e: call   0xa755c163
  0xa755c163: pusha  
  0xa755c164: call   0xb6ff5f32
  0xa755c169: hlt    
  0xa755c16a: pop    %eax
  0xa755c16b: movl   $0x0,0x140(%edi)
  0xa755c175: movl   $0x0,0x148(%edi)
  0xa755c17f: movl   $0x0,0x144(%edi)
  0xa755c189: cmpl   $0x0,0x4(%edi)
  0xa755c190: jne    0xa7556400
  0xa755c196: mov    -0x1c(%ebp),%esi
  0xa755c199: mov    -0x18(%ebp),%edi
  0xa755c19c: ret    
  0xa755c19d: mov    -0x1c(%ebp),%esi
  0xa755c1a0: pop    %eax
  0xa755c1a1: mov    -0x20(%ebp),%ecx
  0xa755c1a4: lea    -0x20(%ebp),%ebx
  0xa755c1a7: jmp    0xa755c2a6
  0xa755c1ac: push   %eax
  0xa755c1ad: mov    %ecx,%edx
  0xa755c1af: mov    %esi,-0x1c(%ebp)
  0xa755c1b2: lea    (%edx),%eax
  0xa755c1b4: mov    0x4(%edx),%ecx
  0xa755c1b7: movl   $0x0,0x4(%edx)
  0xa755c1be: mov    (%ecx),%ebx
  0xa755c1c0: and    $0x7,%ebx
  0xa755c1c3: cmp    $0x5,%ebx
  0xa755c1c6: je     0xa755c28d
  0xa755c1cc: mov    (%eax),%ebx
  0xa755c1ce: test   %ebx,%ebx
  0xa755c1d0: je     0xa755c28d
  0xa755c1d6: lock cmpxchg %ebx,(%ecx)
  0xa755c1da: je     0xa755c28d
  0xa755c1e0: mov    %ecx,0x4(%edx)
  0xa755c1e3: call   0xa755c1ed
  0xa755c1e8: jmp    0xa755c28d
  0xa755c1ed: push   %edx
  0xa755c1ee: lea    0x8(%esp),%eax
  0xa755c1f2: cmpl   $0x0,-0x8(%ebp)
  0xa755c1f9: je     0xa755c210
  0xa755c1ff: push   $0xb7449b58
  0xa755c204: call   0xa755c209
  0xa755c209: pusha  
  0xa755c20a: call   0xb6ff5f32
  0xa755c20f: hlt    
  0xa755c210: mov    %esi,-0x1c(%ebp)
  0xa755c213: mov    %esp,%edi
  0xa755c215: shr    $0xc,%edi
  0xa755c218: mov    -0x4871aba0(,%edi,4),%edi
  0xa755c21f: push   %edi
  0xa755c220: mov    %ebp,0x148(%edi)
  0xa755c226: mov    %eax,0x140(%edi)
  0xa755c22c: call   0xb6e5ed36
  0xa755c231: add    $0x8,%esp
  0xa755c234: push   %eax
  0xa755c235: mov    %esp,%eax
  0xa755c237: shr    $0xc,%eax
  0xa755c23a: mov    -0x4871aba0(,%eax,4),%eax
  0xa755c241: cmp    %eax,%edi
  0xa755c243: je     0xa755c25a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755c249: push   $0xb74acf8c
  0xa755c24e: call   0xa755c253
  0xa755c253: pusha  
  0xa755c254: call   0xb6ff5f32
  0xa755c259: hlt    
  0xa755c25a: pop    %eax
  0xa755c25b: movl   $0x0,0x140(%edi)
  0xa755c265: movl   $0x0,0x148(%edi)
  0xa755c26f: movl   $0x0,0x144(%edi)
  0xa755c279: cmpl   $0x0,0x4(%edi)
  0xa755c280: jne    0xa7556400
  0xa755c286: mov    -0x1c(%ebp),%esi
  0xa755c289: mov    -0x18(%ebp),%edi
  0xa755c28c: ret    
  0xa755c28d: mov    -0x1c(%ebp),%esi
  0xa755c290: pop    %eax
  0xa755c291: jmp    0xa755c1a1
  0xa755c296: cmpl   $0x0,0x4(%ecx)
  0xa755c29d: jne    0xa755c1ac
  0xa755c2a3: add    $0x8,%ecx
  0xa755c2a6: cmp    %ebx,%ecx
  0xa755c2a8: jne    0xa755c296
  0xa755c2aa: cmpb   $0x0,0xb78c1e7e
  0xa755c2b1: je     0xa755c2f0
  0xa755c2b7: push   %eax
  0xa755c2b8: mov    %esp,%ebx
  0xa755c2ba: shr    $0xc,%ebx
  0xa755c2bd: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755c2c4: mov    -0xc(%ebp),%ecx
  0xa755c2c7: push   %ecx
  0xa755c2c8: push   %ebx
  0xa755c2c9: cmpl   $0x0,-0x8(%ebp)
  0xa755c2d0: je     0xa755c2e7
  0xa755c2d6: push   $0xb7449b18
  0xa755c2db: call   0xa755c2e0
  0xa755c2e0: pusha  
  0xa755c2e1: call   0xb6ff5f32
  0xa755c2e6: hlt    
  0xa755c2e7: call   0xb7175974
  0xa755c2ec: add    $0x8,%esp
  0xa755c2ef: pop    %eax
  0xa755c2f0: mov    -0x4(%ebp),%ebx
  0xa755c2f3: mov    %ebp,%esp
  0xa755c2f5: pop    %ebp
  0xa755c2f6: pop    %esi
  0xa755c2f7: mov    %ebx,%esp
  0xa755c2f9: jmp    *%esi
  0xa755c2fb: mov    -0x1c(%ebp),%esi
  0xa755c2fe: mov    -0x18(%ebp),%edi
  0xa755c301: mov    -0x20(%ebp),%esp
  0xa755c304: movl   $0x0,-0x8(%ebp)
  0xa755c30b: emms   
  0xa755c30d: mov    %esp,%ecx
  0xa755c30f: shr    $0xc,%ecx
  0xa755c312: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c319: mov    0x330(%ecx),%ecx
  0xa755c31f: mov    0x54(%ecx),%eax
  0xa755c322: movl   $0xb,0x50(%ecx)
  0xa755c329: movl   $0x0,0x54(%ecx)
  0xa755c330: movl   $0x0,0x58(%ecx)
  0xa755c337: mov    %esp,%ecx
  0xa755c339: shr    $0xc,%ecx
  0xa755c33c: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c343: mov    0x330(%ecx),%ecx
  0xa755c349: movl   $0x0,0x4c(%ecx)
  0xa755c350: mov    %esp,%ecx
  0xa755c352: shr    $0xc,%ecx
  0xa755c355: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c35c: mov    0x1a5(%ecx),%bl
  0xa755c362: mov    %ebx,%edi
  0xa755c364: movb   $0x0,0x1a5(%ecx)
  0xa755c36b: mov    -0xc(%ebp),%ebx
  0xa755c36e: mov    0x14(%ebx),%ecx
  0xa755c371: test   $0x20,%ecx
  0xa755c377: je     0xa755c47f
  0xa755c37d: mov    %edi,%ecx
  0xa755c37f: test   $0xff,%cl
  0xa755c382: jne    0xa755c588
  0xa755c388: push   %eax
  0xa755c389: lea    -0x28(%ebp),%edx
  0xa755c38c: mov    0x4(%edx),%eax
  0xa755c38f: test   %eax,%eax
  0xa755c391: jne    0xa755c39d
  0xa755c397: pop    %eax
  0xa755c398: jmp    0xa755c47f
  0xa755c39d: mov    %esi,-0x1c(%ebp)
  0xa755c3a0: lea    (%edx),%eax
  0xa755c3a2: mov    0x4(%edx),%ecx
  0xa755c3a5: movl   $0x0,0x4(%edx)
  0xa755c3ac: mov    (%ecx),%ebx
  0xa755c3ae: and    $0x7,%ebx
  0xa755c3b1: cmp    $0x5,%ebx
  0xa755c3b4: je     0xa755c47b
  0xa755c3ba: mov    (%eax),%ebx
  0xa755c3bc: test   %ebx,%ebx
  0xa755c3be: je     0xa755c47b
  0xa755c3c4: lock cmpxchg %ebx,(%ecx)
  0xa755c3c8: je     0xa755c47b
  0xa755c3ce: mov    %ecx,0x4(%edx)
  0xa755c3d1: call   0xa755c3db
  0xa755c3d6: jmp    0xa755c47b
  0xa755c3db: push   %edx
  0xa755c3dc: lea    0x8(%esp),%eax
  0xa755c3e0: cmpl   $0x0,-0x8(%ebp)
  0xa755c3e7: je     0xa755c3fe
  0xa755c3ed: push   $0xb7449b58
  0xa755c3f2: call   0xa755c3f7
  0xa755c3f7: pusha  
  0xa755c3f8: call   0xb6ff5f32
  0xa755c3fd: hlt    
  0xa755c3fe: mov    %esi,-0x1c(%ebp)
  0xa755c401: mov    %esp,%edi
  0xa755c403: shr    $0xc,%edi
  0xa755c406: mov    -0x4871aba0(,%edi,4),%edi
  0xa755c40d: push   %edi
  0xa755c40e: mov    %ebp,0x148(%edi)
  0xa755c414: mov    %eax,0x140(%edi)
  0xa755c41a: call   0xb6e5ed36
  0xa755c41f: add    $0x8,%esp
  0xa755c422: push   %eax
  0xa755c423: mov    %esp,%eax
  0xa755c425: shr    $0xc,%eax
  0xa755c428: mov    -0x4871aba0(,%eax,4),%eax
  0xa755c42f: cmp    %eax,%edi
  0xa755c431: je     0xa755c448
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755c437: push   $0xb74acf8c
  0xa755c43c: call   0xa755c441
  0xa755c441: pusha  
  0xa755c442: call   0xb6ff5f32
  0xa755c447: hlt    
  0xa755c448: pop    %eax
  0xa755c449: movl   $0x0,0x140(%edi)
  0xa755c453: movl   $0x0,0x148(%edi)
  0xa755c45d: movl   $0x0,0x144(%edi)
  0xa755c467: cmpl   $0x0,0x4(%edi)
  0xa755c46e: jne    0xa7556400
  0xa755c474: mov    -0x1c(%ebp),%esi
  0xa755c477: mov    -0x18(%ebp),%edi
  0xa755c47a: ret    
  0xa755c47b: mov    -0x1c(%ebp),%esi
  0xa755c47e: pop    %eax
  0xa755c47f: mov    -0x20(%ebp),%ecx
  0xa755c482: lea    -0x20(%ebp),%ebx
  0xa755c485: jmp    0xa755c584
  0xa755c48a: push   %eax
  0xa755c48b: mov    %ecx,%edx
  0xa755c48d: mov    %esi,-0x1c(%ebp)
  0xa755c490: lea    (%edx),%eax
  0xa755c492: mov    0x4(%edx),%ecx
  0xa755c495: movl   $0x0,0x4(%edx)
  0xa755c49c: mov    (%ecx),%ebx
  0xa755c49e: and    $0x7,%ebx
  0xa755c4a1: cmp    $0x5,%ebx
  0xa755c4a4: je     0xa755c56b
  0xa755c4aa: mov    (%eax),%ebx
  0xa755c4ac: test   %ebx,%ebx
  0xa755c4ae: je     0xa755c56b
  0xa755c4b4: lock cmpxchg %ebx,(%ecx)
  0xa755c4b8: je     0xa755c56b
  0xa755c4be: mov    %ecx,0x4(%edx)
  0xa755c4c1: call   0xa755c4cb
  0xa755c4c6: jmp    0xa755c56b
  0xa755c4cb: push   %edx
  0xa755c4cc: lea    0x8(%esp),%eax
  0xa755c4d0: cmpl   $0x0,-0x8(%ebp)
  0xa755c4d7: je     0xa755c4ee
  0xa755c4dd: push   $0xb7449b58
  0xa755c4e2: call   0xa755c4e7
  0xa755c4e7: pusha  
  0xa755c4e8: call   0xb6ff5f32
  0xa755c4ed: hlt    
  0xa755c4ee: mov    %esi,-0x1c(%ebp)
  0xa755c4f1: mov    %esp,%edi
  0xa755c4f3: shr    $0xc,%edi
  0xa755c4f6: mov    -0x4871aba0(,%edi,4),%edi
  0xa755c4fd: push   %edi
  0xa755c4fe: mov    %ebp,0x148(%edi)
  0xa755c504: mov    %eax,0x140(%edi)
  0xa755c50a: call   0xb6e5ed36
  0xa755c50f: add    $0x8,%esp
  0xa755c512: push   %eax
  0xa755c513: mov    %esp,%eax
  0xa755c515: shr    $0xc,%eax
  0xa755c518: mov    -0x4871aba0(,%eax,4),%eax
  0xa755c51f: cmp    %eax,%edi
  0xa755c521: je     0xa755c538
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755c527: push   $0xb74acf8c
  0xa755c52c: call   0xa755c531
  0xa755c531: pusha  
  0xa755c532: call   0xb6ff5f32
  0xa755c537: hlt    
  0xa755c538: pop    %eax
  0xa755c539: movl   $0x0,0x140(%edi)
  0xa755c543: movl   $0x0,0x148(%edi)
  0xa755c54d: movl   $0x0,0x144(%edi)
  0xa755c557: cmpl   $0x0,0x4(%edi)
  0xa755c55e: jne    0xa7556400
  0xa755c564: mov    -0x1c(%ebp),%esi
  0xa755c567: mov    -0x18(%ebp),%edi
  0xa755c56a: ret    
  0xa755c56b: mov    -0x1c(%ebp),%esi
  0xa755c56e: pop    %eax
  0xa755c56f: jmp    0xa755c47f
  0xa755c574: cmpl   $0x0,0x4(%ecx)
  0xa755c57b: jne    0xa755c48a
  0xa755c581: add    $0x8,%ecx
  0xa755c584: cmp    %ebx,%ecx
  0xa755c586: jne    0xa755c574
  0xa755c588: cmpb   $0x0,0xb78c1e7e
  0xa755c58f: je     0xa755c5ce
  0xa755c595: push   %eax
  0xa755c596: mov    %esp,%ebx
  0xa755c598: shr    $0xc,%ebx
  0xa755c59b: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755c5a2: mov    -0xc(%ebp),%ecx
  0xa755c5a5: push   %ecx
  0xa755c5a6: push   %ebx
  0xa755c5a7: cmpl   $0x0,-0x8(%ebp)
  0xa755c5ae: je     0xa755c5c5
  0xa755c5b4: push   $0xb7449b18
  0xa755c5b9: call   0xa755c5be
  0xa755c5be: pusha  
  0xa755c5bf: call   0xb6ff5f32
  0xa755c5c4: hlt    
  0xa755c5c5: call   0xb7175974
  0xa755c5ca: add    $0x8,%esp
  0xa755c5cd: pop    %eax
  0xa755c5ce: mov    -0x4(%ebp),%ebx
  0xa755c5d1: mov    %ebp,%esp
  0xa755c5d3: pop    %ebp
  0xa755c5d4: pop    %esi
  0xa755c5d5: mov    %ebx,%esp
  0xa755c5d7: jmp    *%esi
  0xa755c5d9: mov    -0x1c(%ebp),%esi
  0xa755c5dc: mov    -0x18(%ebp),%edi
  0xa755c5df: mov    -0x20(%ebp),%esp
  0xa755c5e2: movl   $0x0,-0x8(%ebp)
  0xa755c5e9: emms   
  0xa755c5eb: mov    %esp,%ecx
  0xa755c5ed: shr    $0xc,%ecx
  0xa755c5f0: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c5f7: mov    0x330(%ecx),%ecx
  0xa755c5fd: mov    0x54(%ecx),%eax
  0xa755c600: movl   $0xb,0x50(%ecx)
  0xa755c607: movl   $0x0,0x54(%ecx)
  0xa755c60e: movl   $0x0,0x58(%ecx)
  0xa755c615: mov    %esp,%ecx
  0xa755c617: shr    $0xc,%ecx
  0xa755c61a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c621: mov    0x330(%ecx),%ecx
  0xa755c627: movl   $0x0,0x4c(%ecx)
  0xa755c62e: mov    %esp,%ecx
  0xa755c630: shr    $0xc,%ecx
  0xa755c633: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c63a: mov    0x1a5(%ecx),%bl
  0xa755c640: mov    %ebx,%edi
  0xa755c642: movb   $0x0,0x1a5(%ecx)
  0xa755c649: mov    -0xc(%ebp),%ebx
  0xa755c64c: mov    0x14(%ebx),%ecx
  0xa755c64f: test   $0x20,%ecx
  0xa755c655: je     0xa755c75d
  0xa755c65b: mov    %edi,%ecx
  0xa755c65d: test   $0xff,%cl
  0xa755c660: jne    0xa755c866
  0xa755c666: push   %eax
  0xa755c667: lea    -0x28(%ebp),%edx
  0xa755c66a: mov    0x4(%edx),%eax
  0xa755c66d: test   %eax,%eax
  0xa755c66f: jne    0xa755c67b
  0xa755c675: pop    %eax
  0xa755c676: jmp    0xa755c75d
  0xa755c67b: mov    %esi,-0x1c(%ebp)
  0xa755c67e: lea    (%edx),%eax
  0xa755c680: mov    0x4(%edx),%ecx
  0xa755c683: movl   $0x0,0x4(%edx)
  0xa755c68a: mov    (%ecx),%ebx
  0xa755c68c: and    $0x7,%ebx
  0xa755c68f: cmp    $0x5,%ebx
  0xa755c692: je     0xa755c759
  0xa755c698: mov    (%eax),%ebx
  0xa755c69a: test   %ebx,%ebx
  0xa755c69c: je     0xa755c759
  0xa755c6a2: lock cmpxchg %ebx,(%ecx)
  0xa755c6a6: je     0xa755c759
  0xa755c6ac: mov    %ecx,0x4(%edx)
  0xa755c6af: call   0xa755c6b9
  0xa755c6b4: jmp    0xa755c759
  0xa755c6b9: push   %edx
  0xa755c6ba: lea    0x8(%esp),%eax
  0xa755c6be: cmpl   $0x0,-0x8(%ebp)
  0xa755c6c5: je     0xa755c6dc
  0xa755c6cb: push   $0xb7449b58
  0xa755c6d0: call   0xa755c6d5
  0xa755c6d5: pusha  
  0xa755c6d6: call   0xb6ff5f32
  0xa755c6db: hlt    
  0xa755c6dc: mov    %esi,-0x1c(%ebp)
  0xa755c6df: mov    %esp,%edi
  0xa755c6e1: shr    $0xc,%edi
  0xa755c6e4: mov    -0x4871aba0(,%edi,4),%edi
  0xa755c6eb: push   %edi
  0xa755c6ec: mov    %ebp,0x148(%edi)
  0xa755c6f2: mov    %eax,0x140(%edi)
  0xa755c6f8: call   0xb6e5ed36
  0xa755c6fd: add    $0x8,%esp
  0xa755c700: push   %eax
  0xa755c701: mov    %esp,%eax
  0xa755c703: shr    $0xc,%eax
  0xa755c706: mov    -0x4871aba0(,%eax,4),%eax
  0xa755c70d: cmp    %eax,%edi
  0xa755c70f: je     0xa755c726
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755c715: push   $0xb74acf8c
  0xa755c71a: call   0xa755c71f
  0xa755c71f: pusha  
  0xa755c720: call   0xb6ff5f32
  0xa755c725: hlt    
  0xa755c726: pop    %eax
  0xa755c727: movl   $0x0,0x140(%edi)
  0xa755c731: movl   $0x0,0x148(%edi)
  0xa755c73b: movl   $0x0,0x144(%edi)
  0xa755c745: cmpl   $0x0,0x4(%edi)
  0xa755c74c: jne    0xa7556400
  0xa755c752: mov    -0x1c(%ebp),%esi
  0xa755c755: mov    -0x18(%ebp),%edi
  0xa755c758: ret    
  0xa755c759: mov    -0x1c(%ebp),%esi
  0xa755c75c: pop    %eax
  0xa755c75d: mov    -0x20(%ebp),%ecx
  0xa755c760: lea    -0x20(%ebp),%ebx
  0xa755c763: jmp    0xa755c862
  0xa755c768: push   %eax
  0xa755c769: mov    %ecx,%edx
  0xa755c76b: mov    %esi,-0x1c(%ebp)
  0xa755c76e: lea    (%edx),%eax
  0xa755c770: mov    0x4(%edx),%ecx
  0xa755c773: movl   $0x0,0x4(%edx)
  0xa755c77a: mov    (%ecx),%ebx
  0xa755c77c: and    $0x7,%ebx
  0xa755c77f: cmp    $0x5,%ebx
  0xa755c782: je     0xa755c849
  0xa755c788: mov    (%eax),%ebx
  0xa755c78a: test   %ebx,%ebx
  0xa755c78c: je     0xa755c849
  0xa755c792: lock cmpxchg %ebx,(%ecx)
  0xa755c796: je     0xa755c849
  0xa755c79c: mov    %ecx,0x4(%edx)
  0xa755c79f: call   0xa755c7a9
  0xa755c7a4: jmp    0xa755c849
  0xa755c7a9: push   %edx
  0xa755c7aa: lea    0x8(%esp),%eax
  0xa755c7ae: cmpl   $0x0,-0x8(%ebp)
  0xa755c7b5: je     0xa755c7cc
  0xa755c7bb: push   $0xb7449b58
  0xa755c7c0: call   0xa755c7c5
  0xa755c7c5: pusha  
  0xa755c7c6: call   0xb6ff5f32
  0xa755c7cb: hlt    
  0xa755c7cc: mov    %esi,-0x1c(%ebp)
  0xa755c7cf: mov    %esp,%edi
  0xa755c7d1: shr    $0xc,%edi
  0xa755c7d4: mov    -0x4871aba0(,%edi,4),%edi
  0xa755c7db: push   %edi
  0xa755c7dc: mov    %ebp,0x148(%edi)
  0xa755c7e2: mov    %eax,0x140(%edi)
  0xa755c7e8: call   0xb6e5ed36
  0xa755c7ed: add    $0x8,%esp
  0xa755c7f0: push   %eax
  0xa755c7f1: mov    %esp,%eax
  0xa755c7f3: shr    $0xc,%eax
  0xa755c7f6: mov    -0x4871aba0(,%eax,4),%eax
  0xa755c7fd: cmp    %eax,%edi
  0xa755c7ff: je     0xa755c816
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755c805: push   $0xb74acf8c
  0xa755c80a: call   0xa755c80f
  0xa755c80f: pusha  
  0xa755c810: call   0xb6ff5f32
  0xa755c815: hlt    
  0xa755c816: pop    %eax
  0xa755c817: movl   $0x0,0x140(%edi)
  0xa755c821: movl   $0x0,0x148(%edi)
  0xa755c82b: movl   $0x0,0x144(%edi)
  0xa755c835: cmpl   $0x0,0x4(%edi)
  0xa755c83c: jne    0xa7556400
  0xa755c842: mov    -0x1c(%ebp),%esi
  0xa755c845: mov    -0x18(%ebp),%edi
  0xa755c848: ret    
  0xa755c849: mov    -0x1c(%ebp),%esi
  0xa755c84c: pop    %eax
  0xa755c84d: jmp    0xa755c75d
  0xa755c852: cmpl   $0x0,0x4(%ecx)
  0xa755c859: jne    0xa755c768
  0xa755c85f: add    $0x8,%ecx
  0xa755c862: cmp    %ebx,%ecx
  0xa755c864: jne    0xa755c852
  0xa755c866: cmpb   $0x0,0xb78c1e7e
  0xa755c86d: je     0xa755c8ac
  0xa755c873: push   %eax
  0xa755c874: mov    %esp,%ebx
  0xa755c876: shr    $0xc,%ebx
  0xa755c879: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755c880: mov    -0xc(%ebp),%ecx
  0xa755c883: push   %ecx
  0xa755c884: push   %ebx
  0xa755c885: cmpl   $0x0,-0x8(%ebp)
  0xa755c88c: je     0xa755c8a3
  0xa755c892: push   $0xb7449b18
  0xa755c897: call   0xa755c89c
  0xa755c89c: pusha  
  0xa755c89d: call   0xb6ff5f32
  0xa755c8a2: hlt    
  0xa755c8a3: call   0xb7175974
  0xa755c8a8: add    $0x8,%esp
  0xa755c8ab: pop    %eax
  0xa755c8ac: mov    -0x4(%ebp),%ebx
  0xa755c8af: mov    %ebp,%esp
  0xa755c8b1: pop    %ebp
  0xa755c8b2: pop    %esi
  0xa755c8b3: mov    %ebx,%esp
  0xa755c8b5: jmp    *%esi
  0xa755c8b7: mov    -0x1c(%ebp),%esi
  0xa755c8ba: mov    -0x18(%ebp),%edi
  0xa755c8bd: mov    -0x20(%ebp),%esp
  0xa755c8c0: movl   $0x0,-0x8(%ebp)
  0xa755c8c7: emms   
  0xa755c8c9: mov    %esp,%ecx
  0xa755c8cb: shr    $0xc,%ecx
  0xa755c8ce: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c8d5: mov    0x330(%ecx),%ecx
  0xa755c8db: mov    0x54(%ecx),%eax
  0xa755c8de: movl   $0xb,0x50(%ecx)
  0xa755c8e5: movl   $0x0,0x54(%ecx)
  0xa755c8ec: movl   $0x0,0x58(%ecx)
  0xa755c8f3: mov    %esp,%ecx
  0xa755c8f5: shr    $0xc,%ecx
  0xa755c8f8: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c8ff: mov    0x330(%ecx),%ecx
  0xa755c905: movl   $0x0,0x4c(%ecx)
  0xa755c90c: mov    %esp,%ecx
  0xa755c90e: shr    $0xc,%ecx
  0xa755c911: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755c918: mov    0x1a5(%ecx),%bl
  0xa755c91e: mov    %ebx,%edi
  0xa755c920: movb   $0x0,0x1a5(%ecx)
  0xa755c927: mov    -0xc(%ebp),%ebx
  0xa755c92a: mov    0x14(%ebx),%ecx
  0xa755c92d: test   $0x20,%ecx
  0xa755c933: je     0xa755ca3b
  0xa755c939: mov    %edi,%ecx
  0xa755c93b: test   $0xff,%cl
  0xa755c93e: jne    0xa755cb44
  0xa755c944: push   %eax
  0xa755c945: lea    -0x28(%ebp),%edx
  0xa755c948: mov    0x4(%edx),%eax
  0xa755c94b: test   %eax,%eax
  0xa755c94d: jne    0xa755c959
  0xa755c953: pop    %eax
  0xa755c954: jmp    0xa755ca3b
  0xa755c959: mov    %esi,-0x1c(%ebp)
  0xa755c95c: lea    (%edx),%eax
  0xa755c95e: mov    0x4(%edx),%ecx
  0xa755c961: movl   $0x0,0x4(%edx)
  0xa755c968: mov    (%ecx),%ebx
  0xa755c96a: and    $0x7,%ebx
  0xa755c96d: cmp    $0x5,%ebx
  0xa755c970: je     0xa755ca37
  0xa755c976: mov    (%eax),%ebx
  0xa755c978: test   %ebx,%ebx
  0xa755c97a: je     0xa755ca37
  0xa755c980: lock cmpxchg %ebx,(%ecx)
  0xa755c984: je     0xa755ca37
  0xa755c98a: mov    %ecx,0x4(%edx)
  0xa755c98d: call   0xa755c997
  0xa755c992: jmp    0xa755ca37
  0xa755c997: push   %edx
  0xa755c998: lea    0x8(%esp),%eax
  0xa755c99c: cmpl   $0x0,-0x8(%ebp)
  0xa755c9a3: je     0xa755c9ba
  0xa755c9a9: push   $0xb7449b58
  0xa755c9ae: call   0xa755c9b3
  0xa755c9b3: pusha  
  0xa755c9b4: call   0xb6ff5f32
  0xa755c9b9: hlt    
  0xa755c9ba: mov    %esi,-0x1c(%ebp)
  0xa755c9bd: mov    %esp,%edi
  0xa755c9bf: shr    $0xc,%edi
  0xa755c9c2: mov    -0x4871aba0(,%edi,4),%edi
  0xa755c9c9: push   %edi
  0xa755c9ca: mov    %ebp,0x148(%edi)
  0xa755c9d0: mov    %eax,0x140(%edi)
  0xa755c9d6: call   0xb6e5ed36
  0xa755c9db: add    $0x8,%esp
  0xa755c9de: push   %eax
  0xa755c9df: mov    %esp,%eax
  0xa755c9e1: shr    $0xc,%eax
  0xa755c9e4: mov    -0x4871aba0(,%eax,4),%eax
  0xa755c9eb: cmp    %eax,%edi
  0xa755c9ed: je     0xa755ca04
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755c9f3: push   $0xb74acf8c
  0xa755c9f8: call   0xa755c9fd
  0xa755c9fd: pusha  
  0xa755c9fe: call   0xb6ff5f32
  0xa755ca03: hlt    
  0xa755ca04: pop    %eax
  0xa755ca05: movl   $0x0,0x140(%edi)
  0xa755ca0f: movl   $0x0,0x148(%edi)
  0xa755ca19: movl   $0x0,0x144(%edi)
  0xa755ca23: cmpl   $0x0,0x4(%edi)
  0xa755ca2a: jne    0xa7556400
  0xa755ca30: mov    -0x1c(%ebp),%esi
  0xa755ca33: mov    -0x18(%ebp),%edi
  0xa755ca36: ret    
  0xa755ca37: mov    -0x1c(%ebp),%esi
  0xa755ca3a: pop    %eax
  0xa755ca3b: mov    -0x20(%ebp),%ecx
  0xa755ca3e: lea    -0x20(%ebp),%ebx
  0xa755ca41: jmp    0xa755cb40
  0xa755ca46: push   %eax
  0xa755ca47: mov    %ecx,%edx
  0xa755ca49: mov    %esi,-0x1c(%ebp)
  0xa755ca4c: lea    (%edx),%eax
  0xa755ca4e: mov    0x4(%edx),%ecx
  0xa755ca51: movl   $0x0,0x4(%edx)
  0xa755ca58: mov    (%ecx),%ebx
  0xa755ca5a: and    $0x7,%ebx
  0xa755ca5d: cmp    $0x5,%ebx
  0xa755ca60: je     0xa755cb27
  0xa755ca66: mov    (%eax),%ebx
  0xa755ca68: test   %ebx,%ebx
  0xa755ca6a: je     0xa755cb27
  0xa755ca70: lock cmpxchg %ebx,(%ecx)
  0xa755ca74: je     0xa755cb27
  0xa755ca7a: mov    %ecx,0x4(%edx)
  0xa755ca7d: call   0xa755ca87
  0xa755ca82: jmp    0xa755cb27
  0xa755ca87: push   %edx
  0xa755ca88: lea    0x8(%esp),%eax
  0xa755ca8c: cmpl   $0x0,-0x8(%ebp)
  0xa755ca93: je     0xa755caaa
  0xa755ca99: push   $0xb7449b58
  0xa755ca9e: call   0xa755caa3
  0xa755caa3: pusha  
  0xa755caa4: call   0xb6ff5f32
  0xa755caa9: hlt    
  0xa755caaa: mov    %esi,-0x1c(%ebp)
  0xa755caad: mov    %esp,%edi
  0xa755caaf: shr    $0xc,%edi
  0xa755cab2: mov    -0x4871aba0(,%edi,4),%edi
  0xa755cab9: push   %edi
  0xa755caba: mov    %ebp,0x148(%edi)
  0xa755cac0: mov    %eax,0x140(%edi)
  0xa755cac6: call   0xb6e5ed36
  0xa755cacb: add    $0x8,%esp
  0xa755cace: push   %eax
  0xa755cacf: mov    %esp,%eax
  0xa755cad1: shr    $0xc,%eax
  0xa755cad4: mov    -0x4871aba0(,%eax,4),%eax
  0xa755cadb: cmp    %eax,%edi
  0xa755cadd: je     0xa755caf4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755cae3: push   $0xb74acf8c
  0xa755cae8: call   0xa755caed
  0xa755caed: pusha  
  0xa755caee: call   0xb6ff5f32
  0xa755caf3: hlt    
  0xa755caf4: pop    %eax
  0xa755caf5: movl   $0x0,0x140(%edi)
  0xa755caff: movl   $0x0,0x148(%edi)
  0xa755cb09: movl   $0x0,0x144(%edi)
  0xa755cb13: cmpl   $0x0,0x4(%edi)
  0xa755cb1a: jne    0xa7556400
  0xa755cb20: mov    -0x1c(%ebp),%esi
  0xa755cb23: mov    -0x18(%ebp),%edi
  0xa755cb26: ret    
  0xa755cb27: mov    -0x1c(%ebp),%esi
  0xa755cb2a: pop    %eax
  0xa755cb2b: jmp    0xa755ca3b
  0xa755cb30: cmpl   $0x0,0x4(%ecx)
  0xa755cb37: jne    0xa755ca46
  0xa755cb3d: add    $0x8,%ecx
  0xa755cb40: cmp    %ebx,%ecx
  0xa755cb42: jne    0xa755cb30
  0xa755cb44: cmpb   $0x0,0xb78c1e7e
  0xa755cb4b: je     0xa755cb8a
  0xa755cb51: push   %eax
  0xa755cb52: mov    %esp,%ebx
  0xa755cb54: shr    $0xc,%ebx
  0xa755cb57: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa755cb5e: mov    -0xc(%ebp),%ecx
  0xa755cb61: push   %ecx
  0xa755cb62: push   %ebx
  0xa755cb63: cmpl   $0x0,-0x8(%ebp)
  0xa755cb6a: je     0xa755cb81
  0xa755cb70: push   $0xb7449b18
  0xa755cb75: call   0xa755cb7a
  0xa755cb7a: pusha  
  0xa755cb7b: call   0xb6ff5f32
  0xa755cb80: hlt    
  0xa755cb81: call   0xb7175974
  0xa755cb86: add    $0x8,%esp
  0xa755cb89: pop    %eax
  0xa755cb8a: mov    -0x4(%ebp),%ebx
  0xa755cb8d: mov    %ebp,%esp
  0xa755cb8f: pop    %ebp
  0xa755cb90: pop    %esi
  0xa755cb91: mov    %ebx,%esp
  0xa755cb93: jmp    *%esi
  0xa755cb95: nop
  0xa755cb96: nop
  0xa755cb97: nop
  0xa755cb98: int3   
  0xa755cb99: int3   
  0xa755cb9a: int3   
  0xa755cb9b: int3   
  0xa755cb9c: int3   
  0xa755cb9d: int3   
  0xa755cb9e: int3   
  0xa755cb9f: int3   

----------------------------------------------------------------------
deoptimization entry points  [0xa755cbc0, 0xa75629a0]  24032 bytes

  0xa755cbc0: movl   $0x0,-0x8(%ebp)
  0xa755cbc7: mov    -0x1c(%ebp),%esi
  0xa755cbca: mov    -0x18(%ebp),%edi
  0xa755cbcd: mov    %esp,%ecx
  0xa755cbcf: shr    $0xc,%ecx
  0xa755cbd2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755cbd9: cmpl   $0x0,0x4(%ecx)
  0xa755cbe0: je     0xa755cca0
  0xa755cbe6: call   0xa755cbf0
  0xa755cbeb: jmp    0xa755cc8f
  0xa755cbf0: lea    0x4(%esp),%eax
  0xa755cbf4: cmpl   $0x0,-0x8(%ebp)
  0xa755cbfb: je     0xa755cc12
  0xa755cc01: push   $0xb7449b58
  0xa755cc06: call   0xa755cc0b
  0xa755cc0b: pusha  
  0xa755cc0c: call   0xb6ff5f32
  0xa755cc11: hlt    
  0xa755cc12: mov    %esi,-0x1c(%ebp)
  0xa755cc15: mov    %esp,%edi
  0xa755cc17: shr    $0xc,%edi
  0xa755cc1a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755cc21: push   %edi
  0xa755cc22: mov    %ebp,0x148(%edi)
  0xa755cc28: mov    %eax,0x140(%edi)
  0xa755cc2e: call   0xb6e5e068
  0xa755cc33: add    $0x4,%esp
  0xa755cc36: push   %eax
  0xa755cc37: mov    %esp,%eax
  0xa755cc39: shr    $0xc,%eax
  0xa755cc3c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755cc43: cmp    %eax,%edi
  0xa755cc45: je     0xa755cc5c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755cc4b: push   $0xb74acf8c
  0xa755cc50: call   0xa755cc55
  0xa755cc55: pusha  
  0xa755cc56: call   0xb6ff5f32
  0xa755cc5b: hlt    
  0xa755cc5c: pop    %eax
  0xa755cc5d: movl   $0x0,0x140(%edi)
  0xa755cc67: movl   $0x0,0x148(%edi)
  0xa755cc71: movl   $0x0,0x144(%edi)
  0xa755cc7b: cmpl   $0x0,0x4(%edi)
  0xa755cc82: jne    0xa7556400
  0xa755cc88: mov    -0x1c(%ebp),%esi
  0xa755cc8b: mov    -0x18(%ebp),%edi
  0xa755cc8e: ret    
  0xa755cc8f: push   $0xb7302e8b
  0xa755cc94: call   0xa755cc99
  0xa755cc99: pusha  
  0xa755cc9a: call   0xb6ff5f32
  0xa755cc9f: hlt    
  0xa755cca0: movzbl (%esi),%ebx
  0xa755cca3: jmp    *-0x48722ae0(,%ebx,4)
  0xa755ccaa: sub    $0x8,%esp
  0xa755ccad: vmovsd %xmm0,(%esp)
  0xa755ccb2: fldl   (%esp)
  0xa755ccb5: add    $0x8,%esp
  0xa755ccb8: movl   $0x0,-0x8(%ebp)
  0xa755ccbf: mov    -0x1c(%ebp),%esi
  0xa755ccc2: mov    -0x18(%ebp),%edi
  0xa755ccc5: mov    %esp,%ecx
  0xa755ccc7: shr    $0xc,%ecx
  0xa755ccca: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ccd1: cmpl   $0x0,0x4(%ecx)
  0xa755ccd8: je     0xa755cd98
  0xa755ccde: call   0xa755cce8
  0xa755cce3: jmp    0xa755cd87
  0xa755cce8: lea    0x4(%esp),%eax
  0xa755ccec: cmpl   $0x0,-0x8(%ebp)
  0xa755ccf3: je     0xa755cd0a
  0xa755ccf9: push   $0xb7449b58
  0xa755ccfe: call   0xa755cd03
  0xa755cd03: pusha  
  0xa755cd04: call   0xb6ff5f32
  0xa755cd09: hlt    
  0xa755cd0a: mov    %esi,-0x1c(%ebp)
  0xa755cd0d: mov    %esp,%edi
  0xa755cd0f: shr    $0xc,%edi
  0xa755cd12: mov    -0x4871aba0(,%edi,4),%edi
  0xa755cd19: push   %edi
  0xa755cd1a: mov    %ebp,0x148(%edi)
  0xa755cd20: mov    %eax,0x140(%edi)
  0xa755cd26: call   0xb6e5e068
  0xa755cd2b: add    $0x4,%esp
  0xa755cd2e: push   %eax
  0xa755cd2f: mov    %esp,%eax
  0xa755cd31: shr    $0xc,%eax
  0xa755cd34: mov    -0x4871aba0(,%eax,4),%eax
  0xa755cd3b: cmp    %eax,%edi
  0xa755cd3d: je     0xa755cd54
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755cd43: push   $0xb74acf8c
  0xa755cd48: call   0xa755cd4d
  0xa755cd4d: pusha  
  0xa755cd4e: call   0xb6ff5f32
  0xa755cd53: hlt    
  0xa755cd54: pop    %eax
  0xa755cd55: movl   $0x0,0x140(%edi)
  0xa755cd5f: movl   $0x0,0x148(%edi)
  0xa755cd69: movl   $0x0,0x144(%edi)
  0xa755cd73: cmpl   $0x0,0x4(%edi)
  0xa755cd7a: jne    0xa7556400
  0xa755cd80: mov    -0x1c(%ebp),%esi
  0xa755cd83: mov    -0x18(%ebp),%edi
  0xa755cd86: ret    
  0xa755cd87: push   $0xb7302e8b
  0xa755cd8c: call   0xa755cd91
  0xa755cd91: pusha  
  0xa755cd92: call   0xb6ff5f32
  0xa755cd97: hlt    
  0xa755cd98: movzbl (%esi),%ebx
  0xa755cd9b: jmp    *-0x487232e0(,%ebx,4)
  0xa755cda2: sub    $0x4,%esp
  0xa755cda5: vmovss %xmm0,(%esp)
  0xa755cdaa: flds   (%esp)
  0xa755cdad: add    $0x4,%esp
  0xa755cdb0: movl   $0x0,-0x8(%ebp)
  0xa755cdb7: mov    -0x1c(%ebp),%esi
  0xa755cdba: mov    -0x18(%ebp),%edi
  0xa755cdbd: mov    %esp,%ecx
  0xa755cdbf: shr    $0xc,%ecx
  0xa755cdc2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755cdc9: cmpl   $0x0,0x4(%ecx)
  0xa755cdd0: je     0xa755ce90
  0xa755cdd6: call   0xa755cde0
  0xa755cddb: jmp    0xa755ce7f
  0xa755cde0: lea    0x4(%esp),%eax
  0xa755cde4: cmpl   $0x0,-0x8(%ebp)
  0xa755cdeb: je     0xa755ce02
  0xa755cdf1: push   $0xb7449b58
  0xa755cdf6: call   0xa755cdfb
  0xa755cdfb: pusha  
  0xa755cdfc: call   0xb6ff5f32
  0xa755ce01: hlt    
  0xa755ce02: mov    %esi,-0x1c(%ebp)
  0xa755ce05: mov    %esp,%edi
  0xa755ce07: shr    $0xc,%edi
  0xa755ce0a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755ce11: push   %edi
  0xa755ce12: mov    %ebp,0x148(%edi)
  0xa755ce18: mov    %eax,0x140(%edi)
  0xa755ce1e: call   0xb6e5e068
  0xa755ce23: add    $0x4,%esp
  0xa755ce26: push   %eax
  0xa755ce27: mov    %esp,%eax
  0xa755ce29: shr    $0xc,%eax
  0xa755ce2c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755ce33: cmp    %eax,%edi
  0xa755ce35: je     0xa755ce4c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755ce3b: push   $0xb74acf8c
  0xa755ce40: call   0xa755ce45
  0xa755ce45: pusha  
  0xa755ce46: call   0xb6ff5f32
  0xa755ce4b: hlt    
  0xa755ce4c: pop    %eax
  0xa755ce4d: movl   $0x0,0x140(%edi)
  0xa755ce57: movl   $0x0,0x148(%edi)
  0xa755ce61: movl   $0x0,0x144(%edi)
  0xa755ce6b: cmpl   $0x0,0x4(%edi)
  0xa755ce72: jne    0xa7556400
  0xa755ce78: mov    -0x1c(%ebp),%esi
  0xa755ce7b: mov    -0x18(%ebp),%edi
  0xa755ce7e: ret    
  0xa755ce7f: push   $0xb7302e8b
  0xa755ce84: call   0xa755ce89
  0xa755ce89: pusha  
  0xa755ce8a: call   0xb6ff5f32
  0xa755ce8f: hlt    
  0xa755ce90: movzbl (%esi),%ebx
  0xa755ce93: jmp    *-0x487236e0(,%ebx,4)
  0xa755ce9a: movl   $0x0,-0x8(%ebp)
  0xa755cea1: mov    -0x1c(%ebp),%esi
  0xa755cea4: mov    -0x18(%ebp),%edi
  0xa755cea7: mov    %esp,%ecx
  0xa755cea9: shr    $0xc,%ecx
  0xa755ceac: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ceb3: cmpl   $0x0,0x4(%ecx)
  0xa755ceba: je     0xa755cf7a
  0xa755cec0: call   0xa755ceca
  0xa755cec5: jmp    0xa755cf69
  0xa755ceca: lea    0x4(%esp),%eax
  0xa755cece: cmpl   $0x0,-0x8(%ebp)
  0xa755ced5: je     0xa755ceec
  0xa755cedb: push   $0xb7449b58
  0xa755cee0: call   0xa755cee5
  0xa755cee5: pusha  
  0xa755cee6: call   0xb6ff5f32
  0xa755ceeb: hlt    
  0xa755ceec: mov    %esi,-0x1c(%ebp)
  0xa755ceef: mov    %esp,%edi
  0xa755cef1: shr    $0xc,%edi
  0xa755cef4: mov    -0x4871aba0(,%edi,4),%edi
  0xa755cefb: push   %edi
  0xa755cefc: mov    %ebp,0x148(%edi)
  0xa755cf02: mov    %eax,0x140(%edi)
  0xa755cf08: call   0xb6e5e068
  0xa755cf0d: add    $0x4,%esp
  0xa755cf10: push   %eax
  0xa755cf11: mov    %esp,%eax
  0xa755cf13: shr    $0xc,%eax
  0xa755cf16: mov    -0x4871aba0(,%eax,4),%eax
  0xa755cf1d: cmp    %eax,%edi
  0xa755cf1f: je     0xa755cf36
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755cf25: push   $0xb74acf8c
  0xa755cf2a: call   0xa755cf2f
  0xa755cf2f: pusha  
  0xa755cf30: call   0xb6ff5f32
  0xa755cf35: hlt    
  0xa755cf36: pop    %eax
  0xa755cf37: movl   $0x0,0x140(%edi)
  0xa755cf41: movl   $0x0,0x148(%edi)
  0xa755cf4b: movl   $0x0,0x144(%edi)
  0xa755cf55: cmpl   $0x0,0x4(%edi)
  0xa755cf5c: jne    0xa7556400
  0xa755cf62: mov    -0x1c(%ebp),%esi
  0xa755cf65: mov    -0x18(%ebp),%edi
  0xa755cf68: ret    
  0xa755cf69: push   $0xb7302e8b
  0xa755cf6e: call   0xa755cf73
  0xa755cf73: pusha  
  0xa755cf74: call   0xb6ff5f32
  0xa755cf79: hlt    
  0xa755cf7a: movzbl (%esi),%ebx
  0xa755cf7d: jmp    *-0x48723ae0(,%ebx,4)
  0xa755cf84: movl   $0x0,-0x8(%ebp)
  0xa755cf8b: mov    -0x1c(%ebp),%esi
  0xa755cf8e: mov    -0x18(%ebp),%edi
  0xa755cf91: mov    %esp,%ecx
  0xa755cf93: shr    $0xc,%ecx
  0xa755cf96: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755cf9d: cmpl   $0x0,0x4(%ecx)
  0xa755cfa4: je     0xa755d064
  0xa755cfaa: call   0xa755cfb4
  0xa755cfaf: jmp    0xa755d053
  0xa755cfb4: lea    0x4(%esp),%eax
  0xa755cfb8: cmpl   $0x0,-0x8(%ebp)
  0xa755cfbf: je     0xa755cfd6
  0xa755cfc5: push   $0xb7449b58
  0xa755cfca: call   0xa755cfcf
  0xa755cfcf: pusha  
  0xa755cfd0: call   0xb6ff5f32
  0xa755cfd5: hlt    
  0xa755cfd6: mov    %esi,-0x1c(%ebp)
  0xa755cfd9: mov    %esp,%edi
  0xa755cfdb: shr    $0xc,%edi
  0xa755cfde: mov    -0x4871aba0(,%edi,4),%edi
  0xa755cfe5: push   %edi
  0xa755cfe6: mov    %ebp,0x148(%edi)
  0xa755cfec: mov    %eax,0x140(%edi)
  0xa755cff2: call   0xb6e5e068
  0xa755cff7: add    $0x4,%esp
  0xa755cffa: push   %eax
  0xa755cffb: mov    %esp,%eax
  0xa755cffd: shr    $0xc,%eax
  0xa755d000: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d007: cmp    %eax,%edi
  0xa755d009: je     0xa755d020
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d00f: push   $0xb74acf8c
  0xa755d014: call   0xa755d019
  0xa755d019: pusha  
  0xa755d01a: call   0xb6ff5f32
  0xa755d01f: hlt    
  0xa755d020: pop    %eax
  0xa755d021: movl   $0x0,0x140(%edi)
  0xa755d02b: movl   $0x0,0x148(%edi)
  0xa755d035: movl   $0x0,0x144(%edi)
  0xa755d03f: cmpl   $0x0,0x4(%edi)
  0xa755d046: jne    0xa7556400
  0xa755d04c: mov    -0x1c(%ebp),%esi
  0xa755d04f: mov    -0x18(%ebp),%edi
  0xa755d052: ret    
  0xa755d053: push   $0xb7302e8b
  0xa755d058: call   0xa755d05d
  0xa755d05d: pusha  
  0xa755d05e: call   0xb6ff5f32
  0xa755d063: hlt    
  0xa755d064: movzbl (%esi),%ebx
  0xa755d067: jmp    *-0x48723ee0(,%ebx,4)
  0xa755d06e: movl   $0x0,-0x8(%ebp)
  0xa755d075: mov    -0x1c(%ebp),%esi
  0xa755d078: mov    -0x18(%ebp),%edi
  0xa755d07b: mov    %esp,%ecx
  0xa755d07d: shr    $0xc,%ecx
  0xa755d080: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d087: cmpl   $0x0,0x4(%ecx)
  0xa755d08e: je     0xa755d14e
  0xa755d094: call   0xa755d09e
  0xa755d099: jmp    0xa755d13d
  0xa755d09e: lea    0x4(%esp),%eax
  0xa755d0a2: cmpl   $0x0,-0x8(%ebp)
  0xa755d0a9: je     0xa755d0c0
  0xa755d0af: push   $0xb7449b58
  0xa755d0b4: call   0xa755d0b9
  0xa755d0b9: pusha  
  0xa755d0ba: call   0xb6ff5f32
  0xa755d0bf: hlt    
  0xa755d0c0: mov    %esi,-0x1c(%ebp)
  0xa755d0c3: mov    %esp,%edi
  0xa755d0c5: shr    $0xc,%edi
  0xa755d0c8: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d0cf: push   %edi
  0xa755d0d0: mov    %ebp,0x148(%edi)
  0xa755d0d6: mov    %eax,0x140(%edi)
  0xa755d0dc: call   0xb6e5e068
  0xa755d0e1: add    $0x4,%esp
  0xa755d0e4: push   %eax
  0xa755d0e5: mov    %esp,%eax
  0xa755d0e7: shr    $0xc,%eax
  0xa755d0ea: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d0f1: cmp    %eax,%edi
  0xa755d0f3: je     0xa755d10a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d0f9: push   $0xb74acf8c
  0xa755d0fe: call   0xa755d103
  0xa755d103: pusha  
  0xa755d104: call   0xb6ff5f32
  0xa755d109: hlt    
  0xa755d10a: pop    %eax
  0xa755d10b: movl   $0x0,0x140(%edi)
  0xa755d115: movl   $0x0,0x148(%edi)
  0xa755d11f: movl   $0x0,0x144(%edi)
  0xa755d129: cmpl   $0x0,0x4(%edi)
  0xa755d130: jne    0xa7556400
  0xa755d136: mov    -0x1c(%ebp),%esi
  0xa755d139: mov    -0x18(%ebp),%edi
  0xa755d13c: ret    
  0xa755d13d: push   $0xb7302e8b
  0xa755d142: call   0xa755d147
  0xa755d147: pusha  
  0xa755d148: call   0xb6ff5f32
  0xa755d14d: hlt    
  0xa755d14e: movzbl (%esi),%ebx
  0xa755d151: jmp    *-0x48722ee0(,%ebx,4)
  0xa755d158: movl   $0x0,-0x8(%ebp)
  0xa755d15f: mov    -0x1c(%ebp),%esi
  0xa755d162: mov    -0x18(%ebp),%edi
  0xa755d165: mov    %esp,%ecx
  0xa755d167: shr    $0xc,%ecx
  0xa755d16a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d171: cmpl   $0x0,0x4(%ecx)
  0xa755d178: je     0xa755d238
  0xa755d17e: call   0xa755d188
  0xa755d183: jmp    0xa755d227
  0xa755d188: lea    0x4(%esp),%eax
  0xa755d18c: cmpl   $0x0,-0x8(%ebp)
  0xa755d193: je     0xa755d1aa
  0xa755d199: push   $0xb7449b58
  0xa755d19e: call   0xa755d1a3
  0xa755d1a3: pusha  
  0xa755d1a4: call   0xb6ff5f32
  0xa755d1a9: hlt    
  0xa755d1aa: mov    %esi,-0x1c(%ebp)
  0xa755d1ad: mov    %esp,%edi
  0xa755d1af: shr    $0xc,%edi
  0xa755d1b2: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d1b9: push   %edi
  0xa755d1ba: mov    %ebp,0x148(%edi)
  0xa755d1c0: mov    %eax,0x140(%edi)
  0xa755d1c6: call   0xb6e5e068
  0xa755d1cb: add    $0x4,%esp
  0xa755d1ce: push   %eax
  0xa755d1cf: mov    %esp,%eax
  0xa755d1d1: shr    $0xc,%eax
  0xa755d1d4: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d1db: cmp    %eax,%edi
  0xa755d1dd: je     0xa755d1f4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d1e3: push   $0xb74acf8c
  0xa755d1e8: call   0xa755d1ed
  0xa755d1ed: pusha  
  0xa755d1ee: call   0xb6ff5f32
  0xa755d1f3: hlt    
  0xa755d1f4: pop    %eax
  0xa755d1f5: movl   $0x0,0x140(%edi)
  0xa755d1ff: movl   $0x0,0x148(%edi)
  0xa755d209: movl   $0x0,0x144(%edi)
  0xa755d213: cmpl   $0x0,0x4(%edi)
  0xa755d21a: jne    0xa7556400
  0xa755d220: mov    -0x1c(%ebp),%esi
  0xa755d223: mov    -0x18(%ebp),%edi
  0xa755d226: ret    
  0xa755d227: push   $0xb7302e8b
  0xa755d22c: call   0xa755d231
  0xa755d231: pusha  
  0xa755d232: call   0xb6ff5f32
  0xa755d237: hlt    
  0xa755d238: movzbl (%esi),%ebx
  0xa755d23b: jmp    *-0x48723ee0(,%ebx,4)
  0xa755d242: movl   $0x0,-0x8(%ebp)
  0xa755d249: mov    -0x1c(%ebp),%esi
  0xa755d24c: mov    -0x18(%ebp),%edi
  0xa755d24f: mov    %esp,%ecx
  0xa755d251: shr    $0xc,%ecx
  0xa755d254: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d25b: cmpl   $0x0,0x4(%ecx)
  0xa755d262: je     0xa755d322
  0xa755d268: call   0xa755d272
  0xa755d26d: jmp    0xa755d311
  0xa755d272: lea    0x4(%esp),%eax
  0xa755d276: cmpl   $0x0,-0x8(%ebp)
  0xa755d27d: je     0xa755d294
  0xa755d283: push   $0xb7449b58
  0xa755d288: call   0xa755d28d
  0xa755d28d: pusha  
  0xa755d28e: call   0xb6ff5f32
  0xa755d293: hlt    
  0xa755d294: mov    %esi,-0x1c(%ebp)
  0xa755d297: mov    %esp,%edi
  0xa755d299: shr    $0xc,%edi
  0xa755d29c: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d2a3: push   %edi
  0xa755d2a4: mov    %ebp,0x148(%edi)
  0xa755d2aa: mov    %eax,0x140(%edi)
  0xa755d2b0: call   0xb6e5e068
  0xa755d2b5: add    $0x4,%esp
  0xa755d2b8: push   %eax
  0xa755d2b9: mov    %esp,%eax
  0xa755d2bb: shr    $0xc,%eax
  0xa755d2be: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d2c5: cmp    %eax,%edi
  0xa755d2c7: je     0xa755d2de
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d2cd: push   $0xb74acf8c
  0xa755d2d2: call   0xa755d2d7
  0xa755d2d7: pusha  
  0xa755d2d8: call   0xb6ff5f32
  0xa755d2dd: hlt    
  0xa755d2de: pop    %eax
  0xa755d2df: movl   $0x0,0x140(%edi)
  0xa755d2e9: movl   $0x0,0x148(%edi)
  0xa755d2f3: movl   $0x0,0x144(%edi)
  0xa755d2fd: cmpl   $0x0,0x4(%edi)
  0xa755d304: jne    0xa7556400
  0xa755d30a: mov    -0x1c(%ebp),%esi
  0xa755d30d: mov    -0x18(%ebp),%edi
  0xa755d310: ret    
  0xa755d311: push   $0xb7302e8b
  0xa755d316: call   0xa755d31b
  0xa755d31b: pusha  
  0xa755d31c: call   0xb6ff5f32
  0xa755d321: hlt    
  0xa755d322: movzbl (%esi),%ebx
  0xa755d325: jmp    *-0x48723ee0(,%ebx,4)
  0xa755d32c: movl   $0x0,-0x8(%ebp)
  0xa755d333: mov    -0x1c(%ebp),%esi
  0xa755d336: mov    -0x18(%ebp),%edi
  0xa755d339: mov    %esp,%ecx
  0xa755d33b: shr    $0xc,%ecx
  0xa755d33e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d345: cmpl   $0x0,0x4(%ecx)
  0xa755d34c: je     0xa755d40c
  0xa755d352: call   0xa755d35c
  0xa755d357: jmp    0xa755d3fb
  0xa755d35c: lea    0x4(%esp),%eax
  0xa755d360: cmpl   $0x0,-0x8(%ebp)
  0xa755d367: je     0xa755d37e
  0xa755d36d: push   $0xb7449b58
  0xa755d372: call   0xa755d377
  0xa755d377: pusha  
  0xa755d378: call   0xb6ff5f32
  0xa755d37d: hlt    
  0xa755d37e: mov    %esi,-0x1c(%ebp)
  0xa755d381: mov    %esp,%edi
  0xa755d383: shr    $0xc,%edi
  0xa755d386: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d38d: push   %edi
  0xa755d38e: mov    %ebp,0x148(%edi)
  0xa755d394: mov    %eax,0x140(%edi)
  0xa755d39a: call   0xb6e5e068
  0xa755d39f: add    $0x4,%esp
  0xa755d3a2: push   %eax
  0xa755d3a3: mov    %esp,%eax
  0xa755d3a5: shr    $0xc,%eax
  0xa755d3a8: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d3af: cmp    %eax,%edi
  0xa755d3b1: je     0xa755d3c8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d3b7: push   $0xb74acf8c
  0xa755d3bc: call   0xa755d3c1
  0xa755d3c1: pusha  
  0xa755d3c2: call   0xb6ff5f32
  0xa755d3c7: hlt    
  0xa755d3c8: pop    %eax
  0xa755d3c9: movl   $0x0,0x140(%edi)
  0xa755d3d3: movl   $0x0,0x148(%edi)
  0xa755d3dd: movl   $0x0,0x144(%edi)
  0xa755d3e7: cmpl   $0x0,0x4(%edi)
  0xa755d3ee: jne    0xa7556400
  0xa755d3f4: mov    -0x1c(%ebp),%esi
  0xa755d3f7: mov    -0x18(%ebp),%edi
  0xa755d3fa: ret    
  0xa755d3fb: push   $0xb7302e8b
  0xa755d400: call   0xa755d405
  0xa755d405: pusha  
  0xa755d406: call   0xb6ff5f32
  0xa755d40b: hlt    
  0xa755d40c: movzbl (%esi),%ebx
  0xa755d40f: jmp    *-0x48723ee0(,%ebx,4)
  0xa755d416: movl   $0x0,-0x8(%ebp)
  0xa755d41d: mov    -0x1c(%ebp),%esi
  0xa755d420: mov    -0x18(%ebp),%edi
  0xa755d423: mov    %esp,%ecx
  0xa755d425: shr    $0xc,%ecx
  0xa755d428: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d42f: cmpl   $0x0,0x4(%ecx)
  0xa755d436: je     0xa755d4f6
  0xa755d43c: call   0xa755d446
  0xa755d441: jmp    0xa755d4e5
  0xa755d446: lea    0x4(%esp),%eax
  0xa755d44a: cmpl   $0x0,-0x8(%ebp)
  0xa755d451: je     0xa755d468
  0xa755d457: push   $0xb7449b58
  0xa755d45c: call   0xa755d461
  0xa755d461: pusha  
  0xa755d462: call   0xb6ff5f32
  0xa755d467: hlt    
  0xa755d468: mov    %esi,-0x1c(%ebp)
  0xa755d46b: mov    %esp,%edi
  0xa755d46d: shr    $0xc,%edi
  0xa755d470: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d477: push   %edi
  0xa755d478: mov    %ebp,0x148(%edi)
  0xa755d47e: mov    %eax,0x140(%edi)
  0xa755d484: call   0xb6e5e068
  0xa755d489: add    $0x4,%esp
  0xa755d48c: push   %eax
  0xa755d48d: mov    %esp,%eax
  0xa755d48f: shr    $0xc,%eax
  0xa755d492: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d499: cmp    %eax,%edi
  0xa755d49b: je     0xa755d4b2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d4a1: push   $0xb74acf8c
  0xa755d4a6: call   0xa755d4ab
  0xa755d4ab: pusha  
  0xa755d4ac: call   0xb6ff5f32
  0xa755d4b1: hlt    
  0xa755d4b2: pop    %eax
  0xa755d4b3: movl   $0x0,0x140(%edi)
  0xa755d4bd: movl   $0x0,0x148(%edi)
  0xa755d4c7: movl   $0x0,0x144(%edi)
  0xa755d4d1: cmpl   $0x0,0x4(%edi)
  0xa755d4d8: jne    0xa7556400
  0xa755d4de: mov    -0x1c(%ebp),%esi
  0xa755d4e1: mov    -0x18(%ebp),%edi
  0xa755d4e4: ret    
  0xa755d4e5: push   $0xb7302e8b
  0xa755d4ea: call   0xa755d4ef
  0xa755d4ef: pusha  
  0xa755d4f0: call   0xb6ff5f32
  0xa755d4f5: hlt    
  0xa755d4f6: movzbl (%esi),%ebx
  0xa755d4f9: jmp    *-0x48723ee0(,%ebx,4)
  0xa755d500: movl   $0x0,-0x8(%ebp)
  0xa755d507: mov    -0x1c(%ebp),%esi
  0xa755d50a: mov    -0x18(%ebp),%edi
  0xa755d50d: mov    %esp,%ecx
  0xa755d50f: shr    $0xc,%ecx
  0xa755d512: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d519: cmpl   $0x0,0x4(%ecx)
  0xa755d520: je     0xa755d5e0
  0xa755d526: call   0xa755d530
  0xa755d52b: jmp    0xa755d5cf
  0xa755d530: lea    0x4(%esp),%eax
  0xa755d534: cmpl   $0x0,-0x8(%ebp)
  0xa755d53b: je     0xa755d552
  0xa755d541: push   $0xb7449b58
  0xa755d546: call   0xa755d54b
  0xa755d54b: pusha  
  0xa755d54c: call   0xb6ff5f32
  0xa755d551: hlt    
  0xa755d552: mov    %esi,-0x1c(%ebp)
  0xa755d555: mov    %esp,%edi
  0xa755d557: shr    $0xc,%edi
  0xa755d55a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d561: push   %edi
  0xa755d562: mov    %ebp,0x148(%edi)
  0xa755d568: mov    %eax,0x140(%edi)
  0xa755d56e: call   0xb6e5e068
  0xa755d573: add    $0x4,%esp
  0xa755d576: push   %eax
  0xa755d577: mov    %esp,%eax
  0xa755d579: shr    $0xc,%eax
  0xa755d57c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d583: cmp    %eax,%edi
  0xa755d585: je     0xa755d59c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d58b: push   $0xb74acf8c
  0xa755d590: call   0xa755d595
  0xa755d595: pusha  
  0xa755d596: call   0xb6ff5f32
  0xa755d59b: hlt    
  0xa755d59c: pop    %eax
  0xa755d59d: movl   $0x0,0x140(%edi)
  0xa755d5a7: movl   $0x0,0x148(%edi)
  0xa755d5b1: movl   $0x0,0x144(%edi)
  0xa755d5bb: cmpl   $0x0,0x4(%edi)
  0xa755d5c2: jne    0xa7556400
  0xa755d5c8: mov    -0x1c(%ebp),%esi
  0xa755d5cb: mov    -0x18(%ebp),%edi
  0xa755d5ce: ret    
  0xa755d5cf: push   $0xb7302e8b
  0xa755d5d4: call   0xa755d5d9
  0xa755d5d9: pusha  
  0xa755d5da: call   0xb6ff5f32
  0xa755d5df: hlt    
  0xa755d5e0: movzbl 0x1(%esi),%ebx
  0xa755d5e4: inc    %esi
  0xa755d5e5: jmp    *-0x48722ae0(,%ebx,4)
  0xa755d5ec: sub    $0x8,%esp
  0xa755d5ef: vmovsd %xmm0,(%esp)
  0xa755d5f4: fldl   (%esp)
  0xa755d5f7: add    $0x8,%esp
  0xa755d5fa: movl   $0x0,-0x8(%ebp)
  0xa755d601: mov    -0x1c(%ebp),%esi
  0xa755d604: mov    -0x18(%ebp),%edi
  0xa755d607: mov    %esp,%ecx
  0xa755d609: shr    $0xc,%ecx
  0xa755d60c: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d613: cmpl   $0x0,0x4(%ecx)
  0xa755d61a: je     0xa755d6da
  0xa755d620: call   0xa755d62a
  0xa755d625: jmp    0xa755d6c9
  0xa755d62a: lea    0x4(%esp),%eax
  0xa755d62e: cmpl   $0x0,-0x8(%ebp)
  0xa755d635: je     0xa755d64c
  0xa755d63b: push   $0xb7449b58
  0xa755d640: call   0xa755d645
  0xa755d645: pusha  
  0xa755d646: call   0xb6ff5f32
  0xa755d64b: hlt    
  0xa755d64c: mov    %esi,-0x1c(%ebp)
  0xa755d64f: mov    %esp,%edi
  0xa755d651: shr    $0xc,%edi
  0xa755d654: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d65b: push   %edi
  0xa755d65c: mov    %ebp,0x148(%edi)
  0xa755d662: mov    %eax,0x140(%edi)
  0xa755d668: call   0xb6e5e068
  0xa755d66d: add    $0x4,%esp
  0xa755d670: push   %eax
  0xa755d671: mov    %esp,%eax
  0xa755d673: shr    $0xc,%eax
  0xa755d676: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d67d: cmp    %eax,%edi
  0xa755d67f: je     0xa755d696
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d685: push   $0xb74acf8c
  0xa755d68a: call   0xa755d68f
  0xa755d68f: pusha  
  0xa755d690: call   0xb6ff5f32
  0xa755d695: hlt    
  0xa755d696: pop    %eax
  0xa755d697: movl   $0x0,0x140(%edi)
  0xa755d6a1: movl   $0x0,0x148(%edi)
  0xa755d6ab: movl   $0x0,0x144(%edi)
  0xa755d6b5: cmpl   $0x0,0x4(%edi)
  0xa755d6bc: jne    0xa7556400
  0xa755d6c2: mov    -0x1c(%ebp),%esi
  0xa755d6c5: mov    -0x18(%ebp),%edi
  0xa755d6c8: ret    
  0xa755d6c9: push   $0xb7302e8b
  0xa755d6ce: call   0xa755d6d3
  0xa755d6d3: pusha  
  0xa755d6d4: call   0xb6ff5f32
  0xa755d6d9: hlt    
  0xa755d6da: movzbl 0x1(%esi),%ebx
  0xa755d6de: inc    %esi
  0xa755d6df: jmp    *-0x487232e0(,%ebx,4)
  0xa755d6e6: sub    $0x4,%esp
  0xa755d6e9: vmovss %xmm0,(%esp)
  0xa755d6ee: flds   (%esp)
  0xa755d6f1: add    $0x4,%esp
  0xa755d6f4: movl   $0x0,-0x8(%ebp)
  0xa755d6fb: mov    -0x1c(%ebp),%esi
  0xa755d6fe: mov    -0x18(%ebp),%edi
  0xa755d701: mov    %esp,%ecx
  0xa755d703: shr    $0xc,%ecx
  0xa755d706: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d70d: cmpl   $0x0,0x4(%ecx)
  0xa755d714: je     0xa755d7d4
  0xa755d71a: call   0xa755d724
  0xa755d71f: jmp    0xa755d7c3
  0xa755d724: lea    0x4(%esp),%eax
  0xa755d728: cmpl   $0x0,-0x8(%ebp)
  0xa755d72f: je     0xa755d746
  0xa755d735: push   $0xb7449b58
  0xa755d73a: call   0xa755d73f
  0xa755d73f: pusha  
  0xa755d740: call   0xb6ff5f32
  0xa755d745: hlt    
  0xa755d746: mov    %esi,-0x1c(%ebp)
  0xa755d749: mov    %esp,%edi
  0xa755d74b: shr    $0xc,%edi
  0xa755d74e: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d755: push   %edi
  0xa755d756: mov    %ebp,0x148(%edi)
  0xa755d75c: mov    %eax,0x140(%edi)
  0xa755d762: call   0xb6e5e068
  0xa755d767: add    $0x4,%esp
  0xa755d76a: push   %eax
  0xa755d76b: mov    %esp,%eax
  0xa755d76d: shr    $0xc,%eax
  0xa755d770: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d777: cmp    %eax,%edi
  0xa755d779: je     0xa755d790
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d77f: push   $0xb74acf8c
  0xa755d784: call   0xa755d789
  0xa755d789: pusha  
  0xa755d78a: call   0xb6ff5f32
  0xa755d78f: hlt    
  0xa755d790: pop    %eax
  0xa755d791: movl   $0x0,0x140(%edi)
  0xa755d79b: movl   $0x0,0x148(%edi)
  0xa755d7a5: movl   $0x0,0x144(%edi)
  0xa755d7af: cmpl   $0x0,0x4(%edi)
  0xa755d7b6: jne    0xa7556400
  0xa755d7bc: mov    -0x1c(%ebp),%esi
  0xa755d7bf: mov    -0x18(%ebp),%edi
  0xa755d7c2: ret    
  0xa755d7c3: push   $0xb7302e8b
  0xa755d7c8: call   0xa755d7cd
  0xa755d7cd: pusha  
  0xa755d7ce: call   0xb6ff5f32
  0xa755d7d3: hlt    
  0xa755d7d4: movzbl 0x1(%esi),%ebx
  0xa755d7d8: inc    %esi
  0xa755d7d9: jmp    *-0x487236e0(,%ebx,4)
  0xa755d7e0: movl   $0x0,-0x8(%ebp)
  0xa755d7e7: mov    -0x1c(%ebp),%esi
  0xa755d7ea: mov    -0x18(%ebp),%edi
  0xa755d7ed: mov    %esp,%ecx
  0xa755d7ef: shr    $0xc,%ecx
  0xa755d7f2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d7f9: cmpl   $0x0,0x4(%ecx)
  0xa755d800: je     0xa755d8c0
  0xa755d806: call   0xa755d810
  0xa755d80b: jmp    0xa755d8af
  0xa755d810: lea    0x4(%esp),%eax
  0xa755d814: cmpl   $0x0,-0x8(%ebp)
  0xa755d81b: je     0xa755d832
  0xa755d821: push   $0xb7449b58
  0xa755d826: call   0xa755d82b
  0xa755d82b: pusha  
  0xa755d82c: call   0xb6ff5f32
  0xa755d831: hlt    
  0xa755d832: mov    %esi,-0x1c(%ebp)
  0xa755d835: mov    %esp,%edi
  0xa755d837: shr    $0xc,%edi
  0xa755d83a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d841: push   %edi
  0xa755d842: mov    %ebp,0x148(%edi)
  0xa755d848: mov    %eax,0x140(%edi)
  0xa755d84e: call   0xb6e5e068
  0xa755d853: add    $0x4,%esp
  0xa755d856: push   %eax
  0xa755d857: mov    %esp,%eax
  0xa755d859: shr    $0xc,%eax
  0xa755d85c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d863: cmp    %eax,%edi
  0xa755d865: je     0xa755d87c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d86b: push   $0xb74acf8c
  0xa755d870: call   0xa755d875
  0xa755d875: pusha  
  0xa755d876: call   0xb6ff5f32
  0xa755d87b: hlt    
  0xa755d87c: pop    %eax
  0xa755d87d: movl   $0x0,0x140(%edi)
  0xa755d887: movl   $0x0,0x148(%edi)
  0xa755d891: movl   $0x0,0x144(%edi)
  0xa755d89b: cmpl   $0x0,0x4(%edi)
  0xa755d8a2: jne    0xa7556400
  0xa755d8a8: mov    -0x1c(%ebp),%esi
  0xa755d8ab: mov    -0x18(%ebp),%edi
  0xa755d8ae: ret    
  0xa755d8af: push   $0xb7302e8b
  0xa755d8b4: call   0xa755d8b9
  0xa755d8b9: pusha  
  0xa755d8ba: call   0xb6ff5f32
  0xa755d8bf: hlt    
  0xa755d8c0: movzbl 0x1(%esi),%ebx
  0xa755d8c4: inc    %esi
  0xa755d8c5: jmp    *-0x48723ae0(,%ebx,4)
  0xa755d8cc: movl   $0x0,-0x8(%ebp)
  0xa755d8d3: mov    -0x1c(%ebp),%esi
  0xa755d8d6: mov    -0x18(%ebp),%edi
  0xa755d8d9: mov    %esp,%ecx
  0xa755d8db: shr    $0xc,%ecx
  0xa755d8de: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d8e5: cmpl   $0x0,0x4(%ecx)
  0xa755d8ec: je     0xa755d9ac
  0xa755d8f2: call   0xa755d8fc
  0xa755d8f7: jmp    0xa755d99b
  0xa755d8fc: lea    0x4(%esp),%eax
  0xa755d900: cmpl   $0x0,-0x8(%ebp)
  0xa755d907: je     0xa755d91e
  0xa755d90d: push   $0xb7449b58
  0xa755d912: call   0xa755d917
  0xa755d917: pusha  
  0xa755d918: call   0xb6ff5f32
  0xa755d91d: hlt    
  0xa755d91e: mov    %esi,-0x1c(%ebp)
  0xa755d921: mov    %esp,%edi
  0xa755d923: shr    $0xc,%edi
  0xa755d926: mov    -0x4871aba0(,%edi,4),%edi
  0xa755d92d: push   %edi
  0xa755d92e: mov    %ebp,0x148(%edi)
  0xa755d934: mov    %eax,0x140(%edi)
  0xa755d93a: call   0xb6e5e068
  0xa755d93f: add    $0x4,%esp
  0xa755d942: push   %eax
  0xa755d943: mov    %esp,%eax
  0xa755d945: shr    $0xc,%eax
  0xa755d948: mov    -0x4871aba0(,%eax,4),%eax
  0xa755d94f: cmp    %eax,%edi
  0xa755d951: je     0xa755d968
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755d957: push   $0xb74acf8c
  0xa755d95c: call   0xa755d961
  0xa755d961: pusha  
  0xa755d962: call   0xb6ff5f32
  0xa755d967: hlt    
  0xa755d968: pop    %eax
  0xa755d969: movl   $0x0,0x140(%edi)
  0xa755d973: movl   $0x0,0x148(%edi)
  0xa755d97d: movl   $0x0,0x144(%edi)
  0xa755d987: cmpl   $0x0,0x4(%edi)
  0xa755d98e: jne    0xa7556400
  0xa755d994: mov    -0x1c(%ebp),%esi
  0xa755d997: mov    -0x18(%ebp),%edi
  0xa755d99a: ret    
  0xa755d99b: push   $0xb7302e8b
  0xa755d9a0: call   0xa755d9a5
  0xa755d9a5: pusha  
  0xa755d9a6: call   0xb6ff5f32
  0xa755d9ab: hlt    
  0xa755d9ac: movzbl 0x1(%esi),%ebx
  0xa755d9b0: inc    %esi
  0xa755d9b1: jmp    *-0x48723ee0(,%ebx,4)
  0xa755d9b8: movl   $0x0,-0x8(%ebp)
  0xa755d9bf: mov    -0x1c(%ebp),%esi
  0xa755d9c2: mov    -0x18(%ebp),%edi
  0xa755d9c5: mov    %esp,%ecx
  0xa755d9c7: shr    $0xc,%ecx
  0xa755d9ca: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755d9d1: cmpl   $0x0,0x4(%ecx)
  0xa755d9d8: je     0xa755da98
  0xa755d9de: call   0xa755d9e8
  0xa755d9e3: jmp    0xa755da87
  0xa755d9e8: lea    0x4(%esp),%eax
  0xa755d9ec: cmpl   $0x0,-0x8(%ebp)
  0xa755d9f3: je     0xa755da0a
  0xa755d9f9: push   $0xb7449b58
  0xa755d9fe: call   0xa755da03
  0xa755da03: pusha  
  0xa755da04: call   0xb6ff5f32
  0xa755da09: hlt    
  0xa755da0a: mov    %esi,-0x1c(%ebp)
  0xa755da0d: mov    %esp,%edi
  0xa755da0f: shr    $0xc,%edi
  0xa755da12: mov    -0x4871aba0(,%edi,4),%edi
  0xa755da19: push   %edi
  0xa755da1a: mov    %ebp,0x148(%edi)
  0xa755da20: mov    %eax,0x140(%edi)
  0xa755da26: call   0xb6e5e068
  0xa755da2b: add    $0x4,%esp
  0xa755da2e: push   %eax
  0xa755da2f: mov    %esp,%eax
  0xa755da31: shr    $0xc,%eax
  0xa755da34: mov    -0x4871aba0(,%eax,4),%eax
  0xa755da3b: cmp    %eax,%edi
  0xa755da3d: je     0xa755da54
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755da43: push   $0xb74acf8c
  0xa755da48: call   0xa755da4d
  0xa755da4d: pusha  
  0xa755da4e: call   0xb6ff5f32
  0xa755da53: hlt    
  0xa755da54: pop    %eax
  0xa755da55: movl   $0x0,0x140(%edi)
  0xa755da5f: movl   $0x0,0x148(%edi)
  0xa755da69: movl   $0x0,0x144(%edi)
  0xa755da73: cmpl   $0x0,0x4(%edi)
  0xa755da7a: jne    0xa7556400
  0xa755da80: mov    -0x1c(%ebp),%esi
  0xa755da83: mov    -0x18(%ebp),%edi
  0xa755da86: ret    
  0xa755da87: push   $0xb7302e8b
  0xa755da8c: call   0xa755da91
  0xa755da91: pusha  
  0xa755da92: call   0xb6ff5f32
  0xa755da97: hlt    
  0xa755da98: movzbl 0x1(%esi),%ebx
  0xa755da9c: inc    %esi
  0xa755da9d: jmp    *-0x48722ee0(,%ebx,4)
  0xa755daa4: movl   $0x0,-0x8(%ebp)
  0xa755daab: mov    -0x1c(%ebp),%esi
  0xa755daae: mov    -0x18(%ebp),%edi
  0xa755dab1: mov    %esp,%ecx
  0xa755dab3: shr    $0xc,%ecx
  0xa755dab6: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755dabd: cmpl   $0x0,0x4(%ecx)
  0xa755dac4: je     0xa755db84
  0xa755daca: call   0xa755dad4
  0xa755dacf: jmp    0xa755db73
  0xa755dad4: lea    0x4(%esp),%eax
  0xa755dad8: cmpl   $0x0,-0x8(%ebp)
  0xa755dadf: je     0xa755daf6
  0xa755dae5: push   $0xb7449b58
  0xa755daea: call   0xa755daef
  0xa755daef: pusha  
  0xa755daf0: call   0xb6ff5f32
  0xa755daf5: hlt    
  0xa755daf6: mov    %esi,-0x1c(%ebp)
  0xa755daf9: mov    %esp,%edi
  0xa755dafb: shr    $0xc,%edi
  0xa755dafe: mov    -0x4871aba0(,%edi,4),%edi
  0xa755db05: push   %edi
  0xa755db06: mov    %ebp,0x148(%edi)
  0xa755db0c: mov    %eax,0x140(%edi)
  0xa755db12: call   0xb6e5e068
  0xa755db17: add    $0x4,%esp
  0xa755db1a: push   %eax
  0xa755db1b: mov    %esp,%eax
  0xa755db1d: shr    $0xc,%eax
  0xa755db20: mov    -0x4871aba0(,%eax,4),%eax
  0xa755db27: cmp    %eax,%edi
  0xa755db29: je     0xa755db40
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755db2f: push   $0xb74acf8c
  0xa755db34: call   0xa755db39
  0xa755db39: pusha  
  0xa755db3a: call   0xb6ff5f32
  0xa755db3f: hlt    
  0xa755db40: pop    %eax
  0xa755db41: movl   $0x0,0x140(%edi)
  0xa755db4b: movl   $0x0,0x148(%edi)
  0xa755db55: movl   $0x0,0x144(%edi)
  0xa755db5f: cmpl   $0x0,0x4(%edi)
  0xa755db66: jne    0xa7556400
  0xa755db6c: mov    -0x1c(%ebp),%esi
  0xa755db6f: mov    -0x18(%ebp),%edi
  0xa755db72: ret    
  0xa755db73: push   $0xb7302e8b
  0xa755db78: call   0xa755db7d
  0xa755db7d: pusha  
  0xa755db7e: call   0xb6ff5f32
  0xa755db83: hlt    
  0xa755db84: movzbl 0x1(%esi),%ebx
  0xa755db88: inc    %esi
  0xa755db89: jmp    *-0x48723ee0(,%ebx,4)
  0xa755db90: movl   $0x0,-0x8(%ebp)
  0xa755db97: mov    -0x1c(%ebp),%esi
  0xa755db9a: mov    -0x18(%ebp),%edi
  0xa755db9d: mov    %esp,%ecx
  0xa755db9f: shr    $0xc,%ecx
  0xa755dba2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755dba9: cmpl   $0x0,0x4(%ecx)
  0xa755dbb0: je     0xa755dc70
  0xa755dbb6: call   0xa755dbc0
  0xa755dbbb: jmp    0xa755dc5f
  0xa755dbc0: lea    0x4(%esp),%eax
  0xa755dbc4: cmpl   $0x0,-0x8(%ebp)
  0xa755dbcb: je     0xa755dbe2
  0xa755dbd1: push   $0xb7449b58
  0xa755dbd6: call   0xa755dbdb
  0xa755dbdb: pusha  
  0xa755dbdc: call   0xb6ff5f32
  0xa755dbe1: hlt    
  0xa755dbe2: mov    %esi,-0x1c(%ebp)
  0xa755dbe5: mov    %esp,%edi
  0xa755dbe7: shr    $0xc,%edi
  0xa755dbea: mov    -0x4871aba0(,%edi,4),%edi
  0xa755dbf1: push   %edi
  0xa755dbf2: mov    %ebp,0x148(%edi)
  0xa755dbf8: mov    %eax,0x140(%edi)
  0xa755dbfe: call   0xb6e5e068
  0xa755dc03: add    $0x4,%esp
  0xa755dc06: push   %eax
  0xa755dc07: mov    %esp,%eax
  0xa755dc09: shr    $0xc,%eax
  0xa755dc0c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755dc13: cmp    %eax,%edi
  0xa755dc15: je     0xa755dc2c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755dc1b: push   $0xb74acf8c
  0xa755dc20: call   0xa755dc25
  0xa755dc25: pusha  
  0xa755dc26: call   0xb6ff5f32
  0xa755dc2b: hlt    
  0xa755dc2c: pop    %eax
  0xa755dc2d: movl   $0x0,0x140(%edi)
  0xa755dc37: movl   $0x0,0x148(%edi)
  0xa755dc41: movl   $0x0,0x144(%edi)
  0xa755dc4b: cmpl   $0x0,0x4(%edi)
  0xa755dc52: jne    0xa7556400
  0xa755dc58: mov    -0x1c(%ebp),%esi
  0xa755dc5b: mov    -0x18(%ebp),%edi
  0xa755dc5e: ret    
  0xa755dc5f: push   $0xb7302e8b
  0xa755dc64: call   0xa755dc69
  0xa755dc69: pusha  
  0xa755dc6a: call   0xb6ff5f32
  0xa755dc6f: hlt    
  0xa755dc70: movzbl 0x1(%esi),%ebx
  0xa755dc74: inc    %esi
  0xa755dc75: jmp    *-0x48723ee0(,%ebx,4)
  0xa755dc7c: movl   $0x0,-0x8(%ebp)
  0xa755dc83: mov    -0x1c(%ebp),%esi
  0xa755dc86: mov    -0x18(%ebp),%edi
  0xa755dc89: mov    %esp,%ecx
  0xa755dc8b: shr    $0xc,%ecx
  0xa755dc8e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755dc95: cmpl   $0x0,0x4(%ecx)
  0xa755dc9c: je     0xa755dd5c
  0xa755dca2: call   0xa755dcac
  0xa755dca7: jmp    0xa755dd4b
  0xa755dcac: lea    0x4(%esp),%eax
  0xa755dcb0: cmpl   $0x0,-0x8(%ebp)
  0xa755dcb7: je     0xa755dcce
  0xa755dcbd: push   $0xb7449b58
  0xa755dcc2: call   0xa755dcc7
  0xa755dcc7: pusha  
  0xa755dcc8: call   0xb6ff5f32
  0xa755dccd: hlt    
  0xa755dcce: mov    %esi,-0x1c(%ebp)
  0xa755dcd1: mov    %esp,%edi
  0xa755dcd3: shr    $0xc,%edi
  0xa755dcd6: mov    -0x4871aba0(,%edi,4),%edi
  0xa755dcdd: push   %edi
  0xa755dcde: mov    %ebp,0x148(%edi)
  0xa755dce4: mov    %eax,0x140(%edi)
  0xa755dcea: call   0xb6e5e068
  0xa755dcef: add    $0x4,%esp
  0xa755dcf2: push   %eax
  0xa755dcf3: mov    %esp,%eax
  0xa755dcf5: shr    $0xc,%eax
  0xa755dcf8: mov    -0x4871aba0(,%eax,4),%eax
  0xa755dcff: cmp    %eax,%edi
  0xa755dd01: je     0xa755dd18
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755dd07: push   $0xb74acf8c
  0xa755dd0c: call   0xa755dd11
  0xa755dd11: pusha  
  0xa755dd12: call   0xb6ff5f32
  0xa755dd17: hlt    
  0xa755dd18: pop    %eax
  0xa755dd19: movl   $0x0,0x140(%edi)
  0xa755dd23: movl   $0x0,0x148(%edi)
  0xa755dd2d: movl   $0x0,0x144(%edi)
  0xa755dd37: cmpl   $0x0,0x4(%edi)
  0xa755dd3e: jne    0xa7556400
  0xa755dd44: mov    -0x1c(%ebp),%esi
  0xa755dd47: mov    -0x18(%ebp),%edi
  0xa755dd4a: ret    
  0xa755dd4b: push   $0xb7302e8b
  0xa755dd50: call   0xa755dd55
  0xa755dd55: pusha  
  0xa755dd56: call   0xb6ff5f32
  0xa755dd5b: hlt    
  0xa755dd5c: movzbl 0x1(%esi),%ebx
  0xa755dd60: inc    %esi
  0xa755dd61: jmp    *-0x48723ee0(,%ebx,4)
  0xa755dd68: movl   $0x0,-0x8(%ebp)
  0xa755dd6f: mov    -0x1c(%ebp),%esi
  0xa755dd72: mov    -0x18(%ebp),%edi
  0xa755dd75: mov    %esp,%ecx
  0xa755dd77: shr    $0xc,%ecx
  0xa755dd7a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755dd81: cmpl   $0x0,0x4(%ecx)
  0xa755dd88: je     0xa755de48
  0xa755dd8e: call   0xa755dd98
  0xa755dd93: jmp    0xa755de37
  0xa755dd98: lea    0x4(%esp),%eax
  0xa755dd9c: cmpl   $0x0,-0x8(%ebp)
  0xa755dda3: je     0xa755ddba
  0xa755dda9: push   $0xb7449b58
  0xa755ddae: call   0xa755ddb3
  0xa755ddb3: pusha  
  0xa755ddb4: call   0xb6ff5f32
  0xa755ddb9: hlt    
  0xa755ddba: mov    %esi,-0x1c(%ebp)
  0xa755ddbd: mov    %esp,%edi
  0xa755ddbf: shr    $0xc,%edi
  0xa755ddc2: mov    -0x4871aba0(,%edi,4),%edi
  0xa755ddc9: push   %edi
  0xa755ddca: mov    %ebp,0x148(%edi)
  0xa755ddd0: mov    %eax,0x140(%edi)
  0xa755ddd6: call   0xb6e5e068
  0xa755dddb: add    $0x4,%esp
  0xa755ddde: push   %eax
  0xa755dddf: mov    %esp,%eax
  0xa755dde1: shr    $0xc,%eax
  0xa755dde4: mov    -0x4871aba0(,%eax,4),%eax
  0xa755ddeb: cmp    %eax,%edi
  0xa755dded: je     0xa755de04
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755ddf3: push   $0xb74acf8c
  0xa755ddf8: call   0xa755ddfd
  0xa755ddfd: pusha  
  0xa755ddfe: call   0xb6ff5f32
  0xa755de03: hlt    
  0xa755de04: pop    %eax
  0xa755de05: movl   $0x0,0x140(%edi)
  0xa755de0f: movl   $0x0,0x148(%edi)
  0xa755de19: movl   $0x0,0x144(%edi)
  0xa755de23: cmpl   $0x0,0x4(%edi)
  0xa755de2a: jne    0xa7556400
  0xa755de30: mov    -0x1c(%ebp),%esi
  0xa755de33: mov    -0x18(%ebp),%edi
  0xa755de36: ret    
  0xa755de37: push   $0xb7302e8b
  0xa755de3c: call   0xa755de41
  0xa755de41: pusha  
  0xa755de42: call   0xb6ff5f32
  0xa755de47: hlt    
  0xa755de48: movzbl 0x1(%esi),%ebx
  0xa755de4c: inc    %esi
  0xa755de4d: jmp    *-0x48723ee0(,%ebx,4)
  0xa755de54: movl   $0x0,-0x8(%ebp)
  0xa755de5b: mov    -0x1c(%ebp),%esi
  0xa755de5e: mov    -0x18(%ebp),%edi
  0xa755de61: mov    %esp,%ecx
  0xa755de63: shr    $0xc,%ecx
  0xa755de66: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755de6d: cmpl   $0x0,0x4(%ecx)
  0xa755de74: je     0xa755df34
  0xa755de7a: call   0xa755de84
  0xa755de7f: jmp    0xa755df23
  0xa755de84: lea    0x4(%esp),%eax
  0xa755de88: cmpl   $0x0,-0x8(%ebp)
  0xa755de8f: je     0xa755dea6
  0xa755de95: push   $0xb7449b58
  0xa755de9a: call   0xa755de9f
  0xa755de9f: pusha  
  0xa755dea0: call   0xb6ff5f32
  0xa755dea5: hlt    
  0xa755dea6: mov    %esi,-0x1c(%ebp)
  0xa755dea9: mov    %esp,%edi
  0xa755deab: shr    $0xc,%edi
  0xa755deae: mov    -0x4871aba0(,%edi,4),%edi
  0xa755deb5: push   %edi
  0xa755deb6: mov    %ebp,0x148(%edi)
  0xa755debc: mov    %eax,0x140(%edi)
  0xa755dec2: call   0xb6e5e068
  0xa755dec7: add    $0x4,%esp
  0xa755deca: push   %eax
  0xa755decb: mov    %esp,%eax
  0xa755decd: shr    $0xc,%eax
  0xa755ded0: mov    -0x4871aba0(,%eax,4),%eax
  0xa755ded7: cmp    %eax,%edi
  0xa755ded9: je     0xa755def0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755dedf: push   $0xb74acf8c
  0xa755dee4: call   0xa755dee9
  0xa755dee9: pusha  
  0xa755deea: call   0xb6ff5f32
  0xa755deef: hlt    
  0xa755def0: pop    %eax
  0xa755def1: movl   $0x0,0x140(%edi)
  0xa755defb: movl   $0x0,0x148(%edi)
  0xa755df05: movl   $0x0,0x144(%edi)
  0xa755df0f: cmpl   $0x0,0x4(%edi)
  0xa755df16: jne    0xa7556400
  0xa755df1c: mov    -0x1c(%ebp),%esi
  0xa755df1f: mov    -0x18(%ebp),%edi
  0xa755df22: ret    
  0xa755df23: push   $0xb7302e8b
  0xa755df28: call   0xa755df2d
  0xa755df2d: pusha  
  0xa755df2e: call   0xb6ff5f32
  0xa755df33: hlt    
  0xa755df34: movzbl 0x2(%esi),%ebx
  0xa755df38: add    $0x2,%esi
  0xa755df3b: jmp    *-0x48722ae0(,%ebx,4)
  0xa755df42: sub    $0x8,%esp
  0xa755df45: vmovsd %xmm0,(%esp)
  0xa755df4a: fldl   (%esp)
  0xa755df4d: add    $0x8,%esp
  0xa755df50: movl   $0x0,-0x8(%ebp)
  0xa755df57: mov    -0x1c(%ebp),%esi
  0xa755df5a: mov    -0x18(%ebp),%edi
  0xa755df5d: mov    %esp,%ecx
  0xa755df5f: shr    $0xc,%ecx
  0xa755df62: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755df69: cmpl   $0x0,0x4(%ecx)
  0xa755df70: je     0xa755e030
  0xa755df76: call   0xa755df80
  0xa755df7b: jmp    0xa755e01f
  0xa755df80: lea    0x4(%esp),%eax
  0xa755df84: cmpl   $0x0,-0x8(%ebp)
  0xa755df8b: je     0xa755dfa2
  0xa755df91: push   $0xb7449b58
  0xa755df96: call   0xa755df9b
  0xa755df9b: pusha  
  0xa755df9c: call   0xb6ff5f32
  0xa755dfa1: hlt    
  0xa755dfa2: mov    %esi,-0x1c(%ebp)
  0xa755dfa5: mov    %esp,%edi
  0xa755dfa7: shr    $0xc,%edi
  0xa755dfaa: mov    -0x4871aba0(,%edi,4),%edi
  0xa755dfb1: push   %edi
  0xa755dfb2: mov    %ebp,0x148(%edi)
  0xa755dfb8: mov    %eax,0x140(%edi)
  0xa755dfbe: call   0xb6e5e068
  0xa755dfc3: add    $0x4,%esp
  0xa755dfc6: push   %eax
  0xa755dfc7: mov    %esp,%eax
  0xa755dfc9: shr    $0xc,%eax
  0xa755dfcc: mov    -0x4871aba0(,%eax,4),%eax
  0xa755dfd3: cmp    %eax,%edi
  0xa755dfd5: je     0xa755dfec
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755dfdb: push   $0xb74acf8c
  0xa755dfe0: call   0xa755dfe5
  0xa755dfe5: pusha  
  0xa755dfe6: call   0xb6ff5f32
  0xa755dfeb: hlt    
  0xa755dfec: pop    %eax
  0xa755dfed: movl   $0x0,0x140(%edi)
  0xa755dff7: movl   $0x0,0x148(%edi)
  0xa755e001: movl   $0x0,0x144(%edi)
  0xa755e00b: cmpl   $0x0,0x4(%edi)
  0xa755e012: jne    0xa7556400
  0xa755e018: mov    -0x1c(%ebp),%esi
  0xa755e01b: mov    -0x18(%ebp),%edi
  0xa755e01e: ret    
  0xa755e01f: push   $0xb7302e8b
  0xa755e024: call   0xa755e029
  0xa755e029: pusha  
  0xa755e02a: call   0xb6ff5f32
  0xa755e02f: hlt    
  0xa755e030: movzbl 0x2(%esi),%ebx
  0xa755e034: add    $0x2,%esi
  0xa755e037: jmp    *-0x487232e0(,%ebx,4)
  0xa755e03e: sub    $0x4,%esp
  0xa755e041: vmovss %xmm0,(%esp)
  0xa755e046: flds   (%esp)
  0xa755e049: add    $0x4,%esp
  0xa755e04c: movl   $0x0,-0x8(%ebp)
  0xa755e053: mov    -0x1c(%ebp),%esi
  0xa755e056: mov    -0x18(%ebp),%edi
  0xa755e059: mov    %esp,%ecx
  0xa755e05b: shr    $0xc,%ecx
  0xa755e05e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e065: cmpl   $0x0,0x4(%ecx)
  0xa755e06c: je     0xa755e12c
  0xa755e072: call   0xa755e07c
  0xa755e077: jmp    0xa755e11b
  0xa755e07c: lea    0x4(%esp),%eax
  0xa755e080: cmpl   $0x0,-0x8(%ebp)
  0xa755e087: je     0xa755e09e
  0xa755e08d: push   $0xb7449b58
  0xa755e092: call   0xa755e097
  0xa755e097: pusha  
  0xa755e098: call   0xb6ff5f32
  0xa755e09d: hlt    
  0xa755e09e: mov    %esi,-0x1c(%ebp)
  0xa755e0a1: mov    %esp,%edi
  0xa755e0a3: shr    $0xc,%edi
  0xa755e0a6: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e0ad: push   %edi
  0xa755e0ae: mov    %ebp,0x148(%edi)
  0xa755e0b4: mov    %eax,0x140(%edi)
  0xa755e0ba: call   0xb6e5e068
  0xa755e0bf: add    $0x4,%esp
  0xa755e0c2: push   %eax
  0xa755e0c3: mov    %esp,%eax
  0xa755e0c5: shr    $0xc,%eax
  0xa755e0c8: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e0cf: cmp    %eax,%edi
  0xa755e0d1: je     0xa755e0e8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e0d7: push   $0xb74acf8c
  0xa755e0dc: call   0xa755e0e1
  0xa755e0e1: pusha  
  0xa755e0e2: call   0xb6ff5f32
  0xa755e0e7: hlt    
  0xa755e0e8: pop    %eax
  0xa755e0e9: movl   $0x0,0x140(%edi)
  0xa755e0f3: movl   $0x0,0x148(%edi)
  0xa755e0fd: movl   $0x0,0x144(%edi)
  0xa755e107: cmpl   $0x0,0x4(%edi)
  0xa755e10e: jne    0xa7556400
  0xa755e114: mov    -0x1c(%ebp),%esi
  0xa755e117: mov    -0x18(%ebp),%edi
  0xa755e11a: ret    
  0xa755e11b: push   $0xb7302e8b
  0xa755e120: call   0xa755e125
  0xa755e125: pusha  
  0xa755e126: call   0xb6ff5f32
  0xa755e12b: hlt    
  0xa755e12c: movzbl 0x2(%esi),%ebx
  0xa755e130: add    $0x2,%esi
  0xa755e133: jmp    *-0x487236e0(,%ebx,4)
  0xa755e13a: movl   $0x0,-0x8(%ebp)
  0xa755e141: mov    -0x1c(%ebp),%esi
  0xa755e144: mov    -0x18(%ebp),%edi
  0xa755e147: mov    %esp,%ecx
  0xa755e149: shr    $0xc,%ecx
  0xa755e14c: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e153: cmpl   $0x0,0x4(%ecx)
  0xa755e15a: je     0xa755e21a
  0xa755e160: call   0xa755e16a
  0xa755e165: jmp    0xa755e209
  0xa755e16a: lea    0x4(%esp),%eax
  0xa755e16e: cmpl   $0x0,-0x8(%ebp)
  0xa755e175: je     0xa755e18c
  0xa755e17b: push   $0xb7449b58
  0xa755e180: call   0xa755e185
  0xa755e185: pusha  
  0xa755e186: call   0xb6ff5f32
  0xa755e18b: hlt    
  0xa755e18c: mov    %esi,-0x1c(%ebp)
  0xa755e18f: mov    %esp,%edi
  0xa755e191: shr    $0xc,%edi
  0xa755e194: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e19b: push   %edi
  0xa755e19c: mov    %ebp,0x148(%edi)
  0xa755e1a2: mov    %eax,0x140(%edi)
  0xa755e1a8: call   0xb6e5e068
  0xa755e1ad: add    $0x4,%esp
  0xa755e1b0: push   %eax
  0xa755e1b1: mov    %esp,%eax
  0xa755e1b3: shr    $0xc,%eax
  0xa755e1b6: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e1bd: cmp    %eax,%edi
  0xa755e1bf: je     0xa755e1d6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e1c5: push   $0xb74acf8c
  0xa755e1ca: call   0xa755e1cf
  0xa755e1cf: pusha  
  0xa755e1d0: call   0xb6ff5f32
  0xa755e1d5: hlt    
  0xa755e1d6: pop    %eax
  0xa755e1d7: movl   $0x0,0x140(%edi)
  0xa755e1e1: movl   $0x0,0x148(%edi)
  0xa755e1eb: movl   $0x0,0x144(%edi)
  0xa755e1f5: cmpl   $0x0,0x4(%edi)
  0xa755e1fc: jne    0xa7556400
  0xa755e202: mov    -0x1c(%ebp),%esi
  0xa755e205: mov    -0x18(%ebp),%edi
  0xa755e208: ret    
  0xa755e209: push   $0xb7302e8b
  0xa755e20e: call   0xa755e213
  0xa755e213: pusha  
  0xa755e214: call   0xb6ff5f32
  0xa755e219: hlt    
  0xa755e21a: movzbl 0x2(%esi),%ebx
  0xa755e21e: add    $0x2,%esi
  0xa755e221: jmp    *-0x48723ae0(,%ebx,4)
  0xa755e228: movl   $0x0,-0x8(%ebp)
  0xa755e22f: mov    -0x1c(%ebp),%esi
  0xa755e232: mov    -0x18(%ebp),%edi
  0xa755e235: mov    %esp,%ecx
  0xa755e237: shr    $0xc,%ecx
  0xa755e23a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e241: cmpl   $0x0,0x4(%ecx)
  0xa755e248: je     0xa755e308
  0xa755e24e: call   0xa755e258
  0xa755e253: jmp    0xa755e2f7
  0xa755e258: lea    0x4(%esp),%eax
  0xa755e25c: cmpl   $0x0,-0x8(%ebp)
  0xa755e263: je     0xa755e27a
  0xa755e269: push   $0xb7449b58
  0xa755e26e: call   0xa755e273
  0xa755e273: pusha  
  0xa755e274: call   0xb6ff5f32
  0xa755e279: hlt    
  0xa755e27a: mov    %esi,-0x1c(%ebp)
  0xa755e27d: mov    %esp,%edi
  0xa755e27f: shr    $0xc,%edi
  0xa755e282: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e289: push   %edi
  0xa755e28a: mov    %ebp,0x148(%edi)
  0xa755e290: mov    %eax,0x140(%edi)
  0xa755e296: call   0xb6e5e068
  0xa755e29b: add    $0x4,%esp
  0xa755e29e: push   %eax
  0xa755e29f: mov    %esp,%eax
  0xa755e2a1: shr    $0xc,%eax
  0xa755e2a4: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e2ab: cmp    %eax,%edi
  0xa755e2ad: je     0xa755e2c4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e2b3: push   $0xb74acf8c
  0xa755e2b8: call   0xa755e2bd
  0xa755e2bd: pusha  
  0xa755e2be: call   0xb6ff5f32
  0xa755e2c3: hlt    
  0xa755e2c4: pop    %eax
  0xa755e2c5: movl   $0x0,0x140(%edi)
  0xa755e2cf: movl   $0x0,0x148(%edi)
  0xa755e2d9: movl   $0x0,0x144(%edi)
  0xa755e2e3: cmpl   $0x0,0x4(%edi)
  0xa755e2ea: jne    0xa7556400
  0xa755e2f0: mov    -0x1c(%ebp),%esi
  0xa755e2f3: mov    -0x18(%ebp),%edi
  0xa755e2f6: ret    
  0xa755e2f7: push   $0xb7302e8b
  0xa755e2fc: call   0xa755e301
  0xa755e301: pusha  
  0xa755e302: call   0xb6ff5f32
  0xa755e307: hlt    
  0xa755e308: movzbl 0x2(%esi),%ebx
  0xa755e30c: add    $0x2,%esi
  0xa755e30f: jmp    *-0x48723ee0(,%ebx,4)
  0xa755e316: movl   $0x0,-0x8(%ebp)
  0xa755e31d: mov    -0x1c(%ebp),%esi
  0xa755e320: mov    -0x18(%ebp),%edi
  0xa755e323: mov    %esp,%ecx
  0xa755e325: shr    $0xc,%ecx
  0xa755e328: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e32f: cmpl   $0x0,0x4(%ecx)
  0xa755e336: je     0xa755e3f6
  0xa755e33c: call   0xa755e346
  0xa755e341: jmp    0xa755e3e5
  0xa755e346: lea    0x4(%esp),%eax
  0xa755e34a: cmpl   $0x0,-0x8(%ebp)
  0xa755e351: je     0xa755e368
  0xa755e357: push   $0xb7449b58
  0xa755e35c: call   0xa755e361
  0xa755e361: pusha  
  0xa755e362: call   0xb6ff5f32
  0xa755e367: hlt    
  0xa755e368: mov    %esi,-0x1c(%ebp)
  0xa755e36b: mov    %esp,%edi
  0xa755e36d: shr    $0xc,%edi
  0xa755e370: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e377: push   %edi
  0xa755e378: mov    %ebp,0x148(%edi)
  0xa755e37e: mov    %eax,0x140(%edi)
  0xa755e384: call   0xb6e5e068
  0xa755e389: add    $0x4,%esp
  0xa755e38c: push   %eax
  0xa755e38d: mov    %esp,%eax
  0xa755e38f: shr    $0xc,%eax
  0xa755e392: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e399: cmp    %eax,%edi
  0xa755e39b: je     0xa755e3b2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e3a1: push   $0xb74acf8c
  0xa755e3a6: call   0xa755e3ab
  0xa755e3ab: pusha  
  0xa755e3ac: call   0xb6ff5f32
  0xa755e3b1: hlt    
  0xa755e3b2: pop    %eax
  0xa755e3b3: movl   $0x0,0x140(%edi)
  0xa755e3bd: movl   $0x0,0x148(%edi)
  0xa755e3c7: movl   $0x0,0x144(%edi)
  0xa755e3d1: cmpl   $0x0,0x4(%edi)
  0xa755e3d8: jne    0xa7556400
  0xa755e3de: mov    -0x1c(%ebp),%esi
  0xa755e3e1: mov    -0x18(%ebp),%edi
  0xa755e3e4: ret    
  0xa755e3e5: push   $0xb7302e8b
  0xa755e3ea: call   0xa755e3ef
  0xa755e3ef: pusha  
  0xa755e3f0: call   0xb6ff5f32
  0xa755e3f5: hlt    
  0xa755e3f6: movzbl 0x2(%esi),%ebx
  0xa755e3fa: add    $0x2,%esi
  0xa755e3fd: jmp    *-0x48722ee0(,%ebx,4)
  0xa755e404: movl   $0x0,-0x8(%ebp)
  0xa755e40b: mov    -0x1c(%ebp),%esi
  0xa755e40e: mov    -0x18(%ebp),%edi
  0xa755e411: mov    %esp,%ecx
  0xa755e413: shr    $0xc,%ecx
  0xa755e416: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e41d: cmpl   $0x0,0x4(%ecx)
  0xa755e424: je     0xa755e4e4
  0xa755e42a: call   0xa755e434
  0xa755e42f: jmp    0xa755e4d3
  0xa755e434: lea    0x4(%esp),%eax
  0xa755e438: cmpl   $0x0,-0x8(%ebp)
  0xa755e43f: je     0xa755e456
  0xa755e445: push   $0xb7449b58
  0xa755e44a: call   0xa755e44f
  0xa755e44f: pusha  
  0xa755e450: call   0xb6ff5f32
  0xa755e455: hlt    
  0xa755e456: mov    %esi,-0x1c(%ebp)
  0xa755e459: mov    %esp,%edi
  0xa755e45b: shr    $0xc,%edi
  0xa755e45e: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e465: push   %edi
  0xa755e466: mov    %ebp,0x148(%edi)
  0xa755e46c: mov    %eax,0x140(%edi)
  0xa755e472: call   0xb6e5e068
  0xa755e477: add    $0x4,%esp
  0xa755e47a: push   %eax
  0xa755e47b: mov    %esp,%eax
  0xa755e47d: shr    $0xc,%eax
  0xa755e480: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e487: cmp    %eax,%edi
  0xa755e489: je     0xa755e4a0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e48f: push   $0xb74acf8c
  0xa755e494: call   0xa755e499
  0xa755e499: pusha  
  0xa755e49a: call   0xb6ff5f32
  0xa755e49f: hlt    
  0xa755e4a0: pop    %eax
  0xa755e4a1: movl   $0x0,0x140(%edi)
  0xa755e4ab: movl   $0x0,0x148(%edi)
  0xa755e4b5: movl   $0x0,0x144(%edi)
  0xa755e4bf: cmpl   $0x0,0x4(%edi)
  0xa755e4c6: jne    0xa7556400
  0xa755e4cc: mov    -0x1c(%ebp),%esi
  0xa755e4cf: mov    -0x18(%ebp),%edi
  0xa755e4d2: ret    
  0xa755e4d3: push   $0xb7302e8b
  0xa755e4d8: call   0xa755e4dd
  0xa755e4dd: pusha  
  0xa755e4de: call   0xb6ff5f32
  0xa755e4e3: hlt    
  0xa755e4e4: movzbl 0x2(%esi),%ebx
  0xa755e4e8: add    $0x2,%esi
  0xa755e4eb: jmp    *-0x48723ee0(,%ebx,4)
  0xa755e4f2: movl   $0x0,-0x8(%ebp)
  0xa755e4f9: mov    -0x1c(%ebp),%esi
  0xa755e4fc: mov    -0x18(%ebp),%edi
  0xa755e4ff: mov    %esp,%ecx
  0xa755e501: shr    $0xc,%ecx
  0xa755e504: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e50b: cmpl   $0x0,0x4(%ecx)
  0xa755e512: je     0xa755e5d2
  0xa755e518: call   0xa755e522
  0xa755e51d: jmp    0xa755e5c1
  0xa755e522: lea    0x4(%esp),%eax
  0xa755e526: cmpl   $0x0,-0x8(%ebp)
  0xa755e52d: je     0xa755e544
  0xa755e533: push   $0xb7449b58
  0xa755e538: call   0xa755e53d
  0xa755e53d: pusha  
  0xa755e53e: call   0xb6ff5f32
  0xa755e543: hlt    
  0xa755e544: mov    %esi,-0x1c(%ebp)
  0xa755e547: mov    %esp,%edi
  0xa755e549: shr    $0xc,%edi
  0xa755e54c: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e553: push   %edi
  0xa755e554: mov    %ebp,0x148(%edi)
  0xa755e55a: mov    %eax,0x140(%edi)
  0xa755e560: call   0xb6e5e068
  0xa755e565: add    $0x4,%esp
  0xa755e568: push   %eax
  0xa755e569: mov    %esp,%eax
  0xa755e56b: shr    $0xc,%eax
  0xa755e56e: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e575: cmp    %eax,%edi
  0xa755e577: je     0xa755e58e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e57d: push   $0xb74acf8c
  0xa755e582: call   0xa755e587
  0xa755e587: pusha  
  0xa755e588: call   0xb6ff5f32
  0xa755e58d: hlt    
  0xa755e58e: pop    %eax
  0xa755e58f: movl   $0x0,0x140(%edi)
  0xa755e599: movl   $0x0,0x148(%edi)
  0xa755e5a3: movl   $0x0,0x144(%edi)
  0xa755e5ad: cmpl   $0x0,0x4(%edi)
  0xa755e5b4: jne    0xa7556400
  0xa755e5ba: mov    -0x1c(%ebp),%esi
  0xa755e5bd: mov    -0x18(%ebp),%edi
  0xa755e5c0: ret    
  0xa755e5c1: push   $0xb7302e8b
  0xa755e5c6: call   0xa755e5cb
  0xa755e5cb: pusha  
  0xa755e5cc: call   0xb6ff5f32
  0xa755e5d1: hlt    
  0xa755e5d2: movzbl 0x2(%esi),%ebx
  0xa755e5d6: add    $0x2,%esi
  0xa755e5d9: jmp    *-0x48723ee0(,%ebx,4)
  0xa755e5e0: movl   $0x0,-0x8(%ebp)
  0xa755e5e7: mov    -0x1c(%ebp),%esi
  0xa755e5ea: mov    -0x18(%ebp),%edi
  0xa755e5ed: mov    %esp,%ecx
  0xa755e5ef: shr    $0xc,%ecx
  0xa755e5f2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e5f9: cmpl   $0x0,0x4(%ecx)
  0xa755e600: je     0xa755e6c0
  0xa755e606: call   0xa755e610
  0xa755e60b: jmp    0xa755e6af
  0xa755e610: lea    0x4(%esp),%eax
  0xa755e614: cmpl   $0x0,-0x8(%ebp)
  0xa755e61b: je     0xa755e632
  0xa755e621: push   $0xb7449b58
  0xa755e626: call   0xa755e62b
  0xa755e62b: pusha  
  0xa755e62c: call   0xb6ff5f32
  0xa755e631: hlt    
  0xa755e632: mov    %esi,-0x1c(%ebp)
  0xa755e635: mov    %esp,%edi
  0xa755e637: shr    $0xc,%edi
  0xa755e63a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e641: push   %edi
  0xa755e642: mov    %ebp,0x148(%edi)
  0xa755e648: mov    %eax,0x140(%edi)
  0xa755e64e: call   0xb6e5e068
  0xa755e653: add    $0x4,%esp
  0xa755e656: push   %eax
  0xa755e657: mov    %esp,%eax
  0xa755e659: shr    $0xc,%eax
  0xa755e65c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e663: cmp    %eax,%edi
  0xa755e665: je     0xa755e67c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e66b: push   $0xb74acf8c
  0xa755e670: call   0xa755e675
  0xa755e675: pusha  
  0xa755e676: call   0xb6ff5f32
  0xa755e67b: hlt    
  0xa755e67c: pop    %eax
  0xa755e67d: movl   $0x0,0x140(%edi)
  0xa755e687: movl   $0x0,0x148(%edi)
  0xa755e691: movl   $0x0,0x144(%edi)
  0xa755e69b: cmpl   $0x0,0x4(%edi)
  0xa755e6a2: jne    0xa7556400
  0xa755e6a8: mov    -0x1c(%ebp),%esi
  0xa755e6ab: mov    -0x18(%ebp),%edi
  0xa755e6ae: ret    
  0xa755e6af: push   $0xb7302e8b
  0xa755e6b4: call   0xa755e6b9
  0xa755e6b9: pusha  
  0xa755e6ba: call   0xb6ff5f32
  0xa755e6bf: hlt    
  0xa755e6c0: movzbl 0x2(%esi),%ebx
  0xa755e6c4: add    $0x2,%esi
  0xa755e6c7: jmp    *-0x48723ee0(,%ebx,4)
  0xa755e6ce: movl   $0x0,-0x8(%ebp)
  0xa755e6d5: mov    -0x1c(%ebp),%esi
  0xa755e6d8: mov    -0x18(%ebp),%edi
  0xa755e6db: mov    %esp,%ecx
  0xa755e6dd: shr    $0xc,%ecx
  0xa755e6e0: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e6e7: cmpl   $0x0,0x4(%ecx)
  0xa755e6ee: je     0xa755e7ae
  0xa755e6f4: call   0xa755e6fe
  0xa755e6f9: jmp    0xa755e79d
  0xa755e6fe: lea    0x4(%esp),%eax
  0xa755e702: cmpl   $0x0,-0x8(%ebp)
  0xa755e709: je     0xa755e720
  0xa755e70f: push   $0xb7449b58
  0xa755e714: call   0xa755e719
  0xa755e719: pusha  
  0xa755e71a: call   0xb6ff5f32
  0xa755e71f: hlt    
  0xa755e720: mov    %esi,-0x1c(%ebp)
  0xa755e723: mov    %esp,%edi
  0xa755e725: shr    $0xc,%edi
  0xa755e728: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e72f: push   %edi
  0xa755e730: mov    %ebp,0x148(%edi)
  0xa755e736: mov    %eax,0x140(%edi)
  0xa755e73c: call   0xb6e5e068
  0xa755e741: add    $0x4,%esp
  0xa755e744: push   %eax
  0xa755e745: mov    %esp,%eax
  0xa755e747: shr    $0xc,%eax
  0xa755e74a: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e751: cmp    %eax,%edi
  0xa755e753: je     0xa755e76a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e759: push   $0xb74acf8c
  0xa755e75e: call   0xa755e763
  0xa755e763: pusha  
  0xa755e764: call   0xb6ff5f32
  0xa755e769: hlt    
  0xa755e76a: pop    %eax
  0xa755e76b: movl   $0x0,0x140(%edi)
  0xa755e775: movl   $0x0,0x148(%edi)
  0xa755e77f: movl   $0x0,0x144(%edi)
  0xa755e789: cmpl   $0x0,0x4(%edi)
  0xa755e790: jne    0xa7556400
  0xa755e796: mov    -0x1c(%ebp),%esi
  0xa755e799: mov    -0x18(%ebp),%edi
  0xa755e79c: ret    
  0xa755e79d: push   $0xb7302e8b
  0xa755e7a2: call   0xa755e7a7
  0xa755e7a7: pusha  
  0xa755e7a8: call   0xb6ff5f32
  0xa755e7ad: hlt    
  0xa755e7ae: movzbl 0x2(%esi),%ebx
  0xa755e7b2: add    $0x2,%esi
  0xa755e7b5: jmp    *-0x48723ee0(,%ebx,4)
  0xa755e7bc: movl   $0x0,-0x8(%ebp)
  0xa755e7c3: mov    -0x1c(%ebp),%esi
  0xa755e7c6: mov    -0x18(%ebp),%edi
  0xa755e7c9: mov    %esp,%ecx
  0xa755e7cb: shr    $0xc,%ecx
  0xa755e7ce: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e7d5: cmpl   $0x0,0x4(%ecx)
  0xa755e7dc: je     0xa755e89c
  0xa755e7e2: call   0xa755e7ec
  0xa755e7e7: jmp    0xa755e88b
  0xa755e7ec: lea    0x4(%esp),%eax
  0xa755e7f0: cmpl   $0x0,-0x8(%ebp)
  0xa755e7f7: je     0xa755e80e
  0xa755e7fd: push   $0xb7449b58
  0xa755e802: call   0xa755e807
  0xa755e807: pusha  
  0xa755e808: call   0xb6ff5f32
  0xa755e80d: hlt    
  0xa755e80e: mov    %esi,-0x1c(%ebp)
  0xa755e811: mov    %esp,%edi
  0xa755e813: shr    $0xc,%edi
  0xa755e816: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e81d: push   %edi
  0xa755e81e: mov    %ebp,0x148(%edi)
  0xa755e824: mov    %eax,0x140(%edi)
  0xa755e82a: call   0xb6e5e068
  0xa755e82f: add    $0x4,%esp
  0xa755e832: push   %eax
  0xa755e833: mov    %esp,%eax
  0xa755e835: shr    $0xc,%eax
  0xa755e838: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e83f: cmp    %eax,%edi
  0xa755e841: je     0xa755e858
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e847: push   $0xb74acf8c
  0xa755e84c: call   0xa755e851
  0xa755e851: pusha  
  0xa755e852: call   0xb6ff5f32
  0xa755e857: hlt    
  0xa755e858: pop    %eax
  0xa755e859: movl   $0x0,0x140(%edi)
  0xa755e863: movl   $0x0,0x148(%edi)
  0xa755e86d: movl   $0x0,0x144(%edi)
  0xa755e877: cmpl   $0x0,0x4(%edi)
  0xa755e87e: jne    0xa7556400
  0xa755e884: mov    -0x1c(%ebp),%esi
  0xa755e887: mov    -0x18(%ebp),%edi
  0xa755e88a: ret    
  0xa755e88b: push   $0xb7302e8b
  0xa755e890: call   0xa755e895
  0xa755e895: pusha  
  0xa755e896: call   0xb6ff5f32
  0xa755e89b: hlt    
  0xa755e89c: movzbl 0x3(%esi),%ebx
  0xa755e8a0: add    $0x3,%esi
  0xa755e8a3: jmp    *-0x48722ae0(,%ebx,4)
  0xa755e8aa: sub    $0x8,%esp
  0xa755e8ad: vmovsd %xmm0,(%esp)
  0xa755e8b2: fldl   (%esp)
  0xa755e8b5: add    $0x8,%esp
  0xa755e8b8: movl   $0x0,-0x8(%ebp)
  0xa755e8bf: mov    -0x1c(%ebp),%esi
  0xa755e8c2: mov    -0x18(%ebp),%edi
  0xa755e8c5: mov    %esp,%ecx
  0xa755e8c7: shr    $0xc,%ecx
  0xa755e8ca: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e8d1: cmpl   $0x0,0x4(%ecx)
  0xa755e8d8: je     0xa755e998
  0xa755e8de: call   0xa755e8e8
  0xa755e8e3: jmp    0xa755e987
  0xa755e8e8: lea    0x4(%esp),%eax
  0xa755e8ec: cmpl   $0x0,-0x8(%ebp)
  0xa755e8f3: je     0xa755e90a
  0xa755e8f9: push   $0xb7449b58
  0xa755e8fe: call   0xa755e903
  0xa755e903: pusha  
  0xa755e904: call   0xb6ff5f32
  0xa755e909: hlt    
  0xa755e90a: mov    %esi,-0x1c(%ebp)
  0xa755e90d: mov    %esp,%edi
  0xa755e90f: shr    $0xc,%edi
  0xa755e912: mov    -0x4871aba0(,%edi,4),%edi
  0xa755e919: push   %edi
  0xa755e91a: mov    %ebp,0x148(%edi)
  0xa755e920: mov    %eax,0x140(%edi)
  0xa755e926: call   0xb6e5e068
  0xa755e92b: add    $0x4,%esp
  0xa755e92e: push   %eax
  0xa755e92f: mov    %esp,%eax
  0xa755e931: shr    $0xc,%eax
  0xa755e934: mov    -0x4871aba0(,%eax,4),%eax
  0xa755e93b: cmp    %eax,%edi
  0xa755e93d: je     0xa755e954
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755e943: push   $0xb74acf8c
  0xa755e948: call   0xa755e94d
  0xa755e94d: pusha  
  0xa755e94e: call   0xb6ff5f32
  0xa755e953: hlt    
  0xa755e954: pop    %eax
  0xa755e955: movl   $0x0,0x140(%edi)
  0xa755e95f: movl   $0x0,0x148(%edi)
  0xa755e969: movl   $0x0,0x144(%edi)
  0xa755e973: cmpl   $0x0,0x4(%edi)
  0xa755e97a: jne    0xa7556400
  0xa755e980: mov    -0x1c(%ebp),%esi
  0xa755e983: mov    -0x18(%ebp),%edi
  0xa755e986: ret    
  0xa755e987: push   $0xb7302e8b
  0xa755e98c: call   0xa755e991
  0xa755e991: pusha  
  0xa755e992: call   0xb6ff5f32
  0xa755e997: hlt    
  0xa755e998: movzbl 0x3(%esi),%ebx
  0xa755e99c: add    $0x3,%esi
  0xa755e99f: jmp    *-0x487232e0(,%ebx,4)
  0xa755e9a6: sub    $0x4,%esp
  0xa755e9a9: vmovss %xmm0,(%esp)
  0xa755e9ae: flds   (%esp)
  0xa755e9b1: add    $0x4,%esp
  0xa755e9b4: movl   $0x0,-0x8(%ebp)
  0xa755e9bb: mov    -0x1c(%ebp),%esi
  0xa755e9be: mov    -0x18(%ebp),%edi
  0xa755e9c1: mov    %esp,%ecx
  0xa755e9c3: shr    $0xc,%ecx
  0xa755e9c6: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755e9cd: cmpl   $0x0,0x4(%ecx)
  0xa755e9d4: je     0xa755ea94
  0xa755e9da: call   0xa755e9e4
  0xa755e9df: jmp    0xa755ea83
  0xa755e9e4: lea    0x4(%esp),%eax
  0xa755e9e8: cmpl   $0x0,-0x8(%ebp)
  0xa755e9ef: je     0xa755ea06
  0xa755e9f5: push   $0xb7449b58
  0xa755e9fa: call   0xa755e9ff
  0xa755e9ff: pusha  
  0xa755ea00: call   0xb6ff5f32
  0xa755ea05: hlt    
  0xa755ea06: mov    %esi,-0x1c(%ebp)
  0xa755ea09: mov    %esp,%edi
  0xa755ea0b: shr    $0xc,%edi
  0xa755ea0e: mov    -0x4871aba0(,%edi,4),%edi
  0xa755ea15: push   %edi
  0xa755ea16: mov    %ebp,0x148(%edi)
  0xa755ea1c: mov    %eax,0x140(%edi)
  0xa755ea22: call   0xb6e5e068
  0xa755ea27: add    $0x4,%esp
  0xa755ea2a: push   %eax
  0xa755ea2b: mov    %esp,%eax
  0xa755ea2d: shr    $0xc,%eax
  0xa755ea30: mov    -0x4871aba0(,%eax,4),%eax
  0xa755ea37: cmp    %eax,%edi
  0xa755ea39: je     0xa755ea50
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755ea3f: push   $0xb74acf8c
  0xa755ea44: call   0xa755ea49
  0xa755ea49: pusha  
  0xa755ea4a: call   0xb6ff5f32
  0xa755ea4f: hlt    
  0xa755ea50: pop    %eax
  0xa755ea51: movl   $0x0,0x140(%edi)
  0xa755ea5b: movl   $0x0,0x148(%edi)
  0xa755ea65: movl   $0x0,0x144(%edi)
  0xa755ea6f: cmpl   $0x0,0x4(%edi)
  0xa755ea76: jne    0xa7556400
  0xa755ea7c: mov    -0x1c(%ebp),%esi
  0xa755ea7f: mov    -0x18(%ebp),%edi
  0xa755ea82: ret    
  0xa755ea83: push   $0xb7302e8b
  0xa755ea88: call   0xa755ea8d
  0xa755ea8d: pusha  
  0xa755ea8e: call   0xb6ff5f32
  0xa755ea93: hlt    
  0xa755ea94: movzbl 0x3(%esi),%ebx
  0xa755ea98: add    $0x3,%esi
  0xa755ea9b: jmp    *-0x487236e0(,%ebx,4)
  0xa755eaa2: movl   $0x0,-0x8(%ebp)
  0xa755eaa9: mov    -0x1c(%ebp),%esi
  0xa755eaac: mov    -0x18(%ebp),%edi
  0xa755eaaf: mov    %esp,%ecx
  0xa755eab1: shr    $0xc,%ecx
  0xa755eab4: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755eabb: cmpl   $0x0,0x4(%ecx)
  0xa755eac2: je     0xa755eb82
  0xa755eac8: call   0xa755ead2
  0xa755eacd: jmp    0xa755eb71
  0xa755ead2: lea    0x4(%esp),%eax
  0xa755ead6: cmpl   $0x0,-0x8(%ebp)
  0xa755eadd: je     0xa755eaf4
  0xa755eae3: push   $0xb7449b58
  0xa755eae8: call   0xa755eaed
  0xa755eaed: pusha  
  0xa755eaee: call   0xb6ff5f32
  0xa755eaf3: hlt    
  0xa755eaf4: mov    %esi,-0x1c(%ebp)
  0xa755eaf7: mov    %esp,%edi
  0xa755eaf9: shr    $0xc,%edi
  0xa755eafc: mov    -0x4871aba0(,%edi,4),%edi
  0xa755eb03: push   %edi
  0xa755eb04: mov    %ebp,0x148(%edi)
  0xa755eb0a: mov    %eax,0x140(%edi)
  0xa755eb10: call   0xb6e5e068
  0xa755eb15: add    $0x4,%esp
  0xa755eb18: push   %eax
  0xa755eb19: mov    %esp,%eax
  0xa755eb1b: shr    $0xc,%eax
  0xa755eb1e: mov    -0x4871aba0(,%eax,4),%eax
  0xa755eb25: cmp    %eax,%edi
  0xa755eb27: je     0xa755eb3e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755eb2d: push   $0xb74acf8c
  0xa755eb32: call   0xa755eb37
  0xa755eb37: pusha  
  0xa755eb38: call   0xb6ff5f32
  0xa755eb3d: hlt    
  0xa755eb3e: pop    %eax
  0xa755eb3f: movl   $0x0,0x140(%edi)
  0xa755eb49: movl   $0x0,0x148(%edi)
  0xa755eb53: movl   $0x0,0x144(%edi)
  0xa755eb5d: cmpl   $0x0,0x4(%edi)
  0xa755eb64: jne    0xa7556400
  0xa755eb6a: mov    -0x1c(%ebp),%esi
  0xa755eb6d: mov    -0x18(%ebp),%edi
  0xa755eb70: ret    
  0xa755eb71: push   $0xb7302e8b
  0xa755eb76: call   0xa755eb7b
  0xa755eb7b: pusha  
  0xa755eb7c: call   0xb6ff5f32
  0xa755eb81: hlt    
  0xa755eb82: movzbl 0x3(%esi),%ebx
  0xa755eb86: add    $0x3,%esi
  0xa755eb89: jmp    *-0x48723ae0(,%ebx,4)
  0xa755eb90: movl   $0x0,-0x8(%ebp)
  0xa755eb97: mov    -0x1c(%ebp),%esi
  0xa755eb9a: mov    -0x18(%ebp),%edi
  0xa755eb9d: mov    %esp,%ecx
  0xa755eb9f: shr    $0xc,%ecx
  0xa755eba2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755eba9: cmpl   $0x0,0x4(%ecx)
  0xa755ebb0: je     0xa755ec70
  0xa755ebb6: call   0xa755ebc0
  0xa755ebbb: jmp    0xa755ec5f
  0xa755ebc0: lea    0x4(%esp),%eax
  0xa755ebc4: cmpl   $0x0,-0x8(%ebp)
  0xa755ebcb: je     0xa755ebe2
  0xa755ebd1: push   $0xb7449b58
  0xa755ebd6: call   0xa755ebdb
  0xa755ebdb: pusha  
  0xa755ebdc: call   0xb6ff5f32
  0xa755ebe1: hlt    
  0xa755ebe2: mov    %esi,-0x1c(%ebp)
  0xa755ebe5: mov    %esp,%edi
  0xa755ebe7: shr    $0xc,%edi
  0xa755ebea: mov    -0x4871aba0(,%edi,4),%edi
  0xa755ebf1: push   %edi
  0xa755ebf2: mov    %ebp,0x148(%edi)
  0xa755ebf8: mov    %eax,0x140(%edi)
  0xa755ebfe: call   0xb6e5e068
  0xa755ec03: add    $0x4,%esp
  0xa755ec06: push   %eax
  0xa755ec07: mov    %esp,%eax
  0xa755ec09: shr    $0xc,%eax
  0xa755ec0c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755ec13: cmp    %eax,%edi
  0xa755ec15: je     0xa755ec2c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755ec1b: push   $0xb74acf8c
  0xa755ec20: call   0xa755ec25
  0xa755ec25: pusha  
  0xa755ec26: call   0xb6ff5f32
  0xa755ec2b: hlt    
  0xa755ec2c: pop    %eax
  0xa755ec2d: movl   $0x0,0x140(%edi)
  0xa755ec37: movl   $0x0,0x148(%edi)
  0xa755ec41: movl   $0x0,0x144(%edi)
  0xa755ec4b: cmpl   $0x0,0x4(%edi)
  0xa755ec52: jne    0xa7556400
  0xa755ec58: mov    -0x1c(%ebp),%esi
  0xa755ec5b: mov    -0x18(%ebp),%edi
  0xa755ec5e: ret    
  0xa755ec5f: push   $0xb7302e8b
  0xa755ec64: call   0xa755ec69
  0xa755ec69: pusha  
  0xa755ec6a: call   0xb6ff5f32
  0xa755ec6f: hlt    
  0xa755ec70: movzbl 0x3(%esi),%ebx
  0xa755ec74: add    $0x3,%esi
  0xa755ec77: jmp    *-0x48723ee0(,%ebx,4)
  0xa755ec7e: movl   $0x0,-0x8(%ebp)
  0xa755ec85: mov    -0x1c(%ebp),%esi
  0xa755ec88: mov    -0x18(%ebp),%edi
  0xa755ec8b: mov    %esp,%ecx
  0xa755ec8d: shr    $0xc,%ecx
  0xa755ec90: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ec97: cmpl   $0x0,0x4(%ecx)
  0xa755ec9e: je     0xa755ed5e
  0xa755eca4: call   0xa755ecae
  0xa755eca9: jmp    0xa755ed4d
  0xa755ecae: lea    0x4(%esp),%eax
  0xa755ecb2: cmpl   $0x0,-0x8(%ebp)
  0xa755ecb9: je     0xa755ecd0
  0xa755ecbf: push   $0xb7449b58
  0xa755ecc4: call   0xa755ecc9
  0xa755ecc9: pusha  
  0xa755ecca: call   0xb6ff5f32
  0xa755eccf: hlt    
  0xa755ecd0: mov    %esi,-0x1c(%ebp)
  0xa755ecd3: mov    %esp,%edi
  0xa755ecd5: shr    $0xc,%edi
  0xa755ecd8: mov    -0x4871aba0(,%edi,4),%edi
  0xa755ecdf: push   %edi
  0xa755ece0: mov    %ebp,0x148(%edi)
  0xa755ece6: mov    %eax,0x140(%edi)
  0xa755ecec: call   0xb6e5e068
  0xa755ecf1: add    $0x4,%esp
  0xa755ecf4: push   %eax
  0xa755ecf5: mov    %esp,%eax
  0xa755ecf7: shr    $0xc,%eax
  0xa755ecfa: mov    -0x4871aba0(,%eax,4),%eax
  0xa755ed01: cmp    %eax,%edi
  0xa755ed03: je     0xa755ed1a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755ed09: push   $0xb74acf8c
  0xa755ed0e: call   0xa755ed13
  0xa755ed13: pusha  
  0xa755ed14: call   0xb6ff5f32
  0xa755ed19: hlt    
  0xa755ed1a: pop    %eax
  0xa755ed1b: movl   $0x0,0x140(%edi)
  0xa755ed25: movl   $0x0,0x148(%edi)
  0xa755ed2f: movl   $0x0,0x144(%edi)
  0xa755ed39: cmpl   $0x0,0x4(%edi)
  0xa755ed40: jne    0xa7556400
  0xa755ed46: mov    -0x1c(%ebp),%esi
  0xa755ed49: mov    -0x18(%ebp),%edi
  0xa755ed4c: ret    
  0xa755ed4d: push   $0xb7302e8b
  0xa755ed52: call   0xa755ed57
  0xa755ed57: pusha  
  0xa755ed58: call   0xb6ff5f32
  0xa755ed5d: hlt    
  0xa755ed5e: movzbl 0x3(%esi),%ebx
  0xa755ed62: add    $0x3,%esi
  0xa755ed65: jmp    *-0x48722ee0(,%ebx,4)
  0xa755ed6c: movl   $0x0,-0x8(%ebp)
  0xa755ed73: mov    -0x1c(%ebp),%esi
  0xa755ed76: mov    -0x18(%ebp),%edi
  0xa755ed79: mov    %esp,%ecx
  0xa755ed7b: shr    $0xc,%ecx
  0xa755ed7e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ed85: cmpl   $0x0,0x4(%ecx)
  0xa755ed8c: je     0xa755ee4c
  0xa755ed92: call   0xa755ed9c
  0xa755ed97: jmp    0xa755ee3b
  0xa755ed9c: lea    0x4(%esp),%eax
  0xa755eda0: cmpl   $0x0,-0x8(%ebp)
  0xa755eda7: je     0xa755edbe
  0xa755edad: push   $0xb7449b58
  0xa755edb2: call   0xa755edb7
  0xa755edb7: pusha  
  0xa755edb8: call   0xb6ff5f32
  0xa755edbd: hlt    
  0xa755edbe: mov    %esi,-0x1c(%ebp)
  0xa755edc1: mov    %esp,%edi
  0xa755edc3: shr    $0xc,%edi
  0xa755edc6: mov    -0x4871aba0(,%edi,4),%edi
  0xa755edcd: push   %edi
  0xa755edce: mov    %ebp,0x148(%edi)
  0xa755edd4: mov    %eax,0x140(%edi)
  0xa755edda: call   0xb6e5e068
  0xa755eddf: add    $0x4,%esp
  0xa755ede2: push   %eax
  0xa755ede3: mov    %esp,%eax
  0xa755ede5: shr    $0xc,%eax
  0xa755ede8: mov    -0x4871aba0(,%eax,4),%eax
  0xa755edef: cmp    %eax,%edi
  0xa755edf1: je     0xa755ee08
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755edf7: push   $0xb74acf8c
  0xa755edfc: call   0xa755ee01
  0xa755ee01: pusha  
  0xa755ee02: call   0xb6ff5f32
  0xa755ee07: hlt    
  0xa755ee08: pop    %eax
  0xa755ee09: movl   $0x0,0x140(%edi)
  0xa755ee13: movl   $0x0,0x148(%edi)
  0xa755ee1d: movl   $0x0,0x144(%edi)
  0xa755ee27: cmpl   $0x0,0x4(%edi)
  0xa755ee2e: jne    0xa7556400
  0xa755ee34: mov    -0x1c(%ebp),%esi
  0xa755ee37: mov    -0x18(%ebp),%edi
  0xa755ee3a: ret    
  0xa755ee3b: push   $0xb7302e8b
  0xa755ee40: call   0xa755ee45
  0xa755ee45: pusha  
  0xa755ee46: call   0xb6ff5f32
  0xa755ee4b: hlt    
  0xa755ee4c: movzbl 0x3(%esi),%ebx
  0xa755ee50: add    $0x3,%esi
  0xa755ee53: jmp    *-0x48723ee0(,%ebx,4)
  0xa755ee5a: movl   $0x0,-0x8(%ebp)
  0xa755ee61: mov    -0x1c(%ebp),%esi
  0xa755ee64: mov    -0x18(%ebp),%edi
  0xa755ee67: mov    %esp,%ecx
  0xa755ee69: shr    $0xc,%ecx
  0xa755ee6c: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ee73: cmpl   $0x0,0x4(%ecx)
  0xa755ee7a: je     0xa755ef3a
  0xa755ee80: call   0xa755ee8a
  0xa755ee85: jmp    0xa755ef29
  0xa755ee8a: lea    0x4(%esp),%eax
  0xa755ee8e: cmpl   $0x0,-0x8(%ebp)
  0xa755ee95: je     0xa755eeac
  0xa755ee9b: push   $0xb7449b58
  0xa755eea0: call   0xa755eea5
  0xa755eea5: pusha  
  0xa755eea6: call   0xb6ff5f32
  0xa755eeab: hlt    
  0xa755eeac: mov    %esi,-0x1c(%ebp)
  0xa755eeaf: mov    %esp,%edi
  0xa755eeb1: shr    $0xc,%edi
  0xa755eeb4: mov    -0x4871aba0(,%edi,4),%edi
  0xa755eebb: push   %edi
  0xa755eebc: mov    %ebp,0x148(%edi)
  0xa755eec2: mov    %eax,0x140(%edi)
  0xa755eec8: call   0xb6e5e068
  0xa755eecd: add    $0x4,%esp
  0xa755eed0: push   %eax
  0xa755eed1: mov    %esp,%eax
  0xa755eed3: shr    $0xc,%eax
  0xa755eed6: mov    -0x4871aba0(,%eax,4),%eax
  0xa755eedd: cmp    %eax,%edi
  0xa755eedf: je     0xa755eef6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755eee5: push   $0xb74acf8c
  0xa755eeea: call   0xa755eeef
  0xa755eeef: pusha  
  0xa755eef0: call   0xb6ff5f32
  0xa755eef5: hlt    
  0xa755eef6: pop    %eax
  0xa755eef7: movl   $0x0,0x140(%edi)
  0xa755ef01: movl   $0x0,0x148(%edi)
  0xa755ef0b: movl   $0x0,0x144(%edi)
  0xa755ef15: cmpl   $0x0,0x4(%edi)
  0xa755ef1c: jne    0xa7556400
  0xa755ef22: mov    -0x1c(%ebp),%esi
  0xa755ef25: mov    -0x18(%ebp),%edi
  0xa755ef28: ret    
  0xa755ef29: push   $0xb7302e8b
  0xa755ef2e: call   0xa755ef33
  0xa755ef33: pusha  
  0xa755ef34: call   0xb6ff5f32
  0xa755ef39: hlt    
  0xa755ef3a: movzbl 0x3(%esi),%ebx
  0xa755ef3e: add    $0x3,%esi
  0xa755ef41: jmp    *-0x48723ee0(,%ebx,4)
  0xa755ef48: movl   $0x0,-0x8(%ebp)
  0xa755ef4f: mov    -0x1c(%ebp),%esi
  0xa755ef52: mov    -0x18(%ebp),%edi
  0xa755ef55: mov    %esp,%ecx
  0xa755ef57: shr    $0xc,%ecx
  0xa755ef5a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ef61: cmpl   $0x0,0x4(%ecx)
  0xa755ef68: je     0xa755f028
  0xa755ef6e: call   0xa755ef78
  0xa755ef73: jmp    0xa755f017
  0xa755ef78: lea    0x4(%esp),%eax
  0xa755ef7c: cmpl   $0x0,-0x8(%ebp)
  0xa755ef83: je     0xa755ef9a
  0xa755ef89: push   $0xb7449b58
  0xa755ef8e: call   0xa755ef93
  0xa755ef93: pusha  
  0xa755ef94: call   0xb6ff5f32
  0xa755ef99: hlt    
  0xa755ef9a: mov    %esi,-0x1c(%ebp)
  0xa755ef9d: mov    %esp,%edi
  0xa755ef9f: shr    $0xc,%edi
  0xa755efa2: mov    -0x4871aba0(,%edi,4),%edi
  0xa755efa9: push   %edi
  0xa755efaa: mov    %ebp,0x148(%edi)
  0xa755efb0: mov    %eax,0x140(%edi)
  0xa755efb6: call   0xb6e5e068
  0xa755efbb: add    $0x4,%esp
  0xa755efbe: push   %eax
  0xa755efbf: mov    %esp,%eax
  0xa755efc1: shr    $0xc,%eax
  0xa755efc4: mov    -0x4871aba0(,%eax,4),%eax
  0xa755efcb: cmp    %eax,%edi
  0xa755efcd: je     0xa755efe4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755efd3: push   $0xb74acf8c
  0xa755efd8: call   0xa755efdd
  0xa755efdd: pusha  
  0xa755efde: call   0xb6ff5f32
  0xa755efe3: hlt    
  0xa755efe4: pop    %eax
  0xa755efe5: movl   $0x0,0x140(%edi)
  0xa755efef: movl   $0x0,0x148(%edi)
  0xa755eff9: movl   $0x0,0x144(%edi)
  0xa755f003: cmpl   $0x0,0x4(%edi)
  0xa755f00a: jne    0xa7556400
  0xa755f010: mov    -0x1c(%ebp),%esi
  0xa755f013: mov    -0x18(%ebp),%edi
  0xa755f016: ret    
  0xa755f017: push   $0xb7302e8b
  0xa755f01c: call   0xa755f021
  0xa755f021: pusha  
  0xa755f022: call   0xb6ff5f32
  0xa755f027: hlt    
  0xa755f028: movzbl 0x3(%esi),%ebx
  0xa755f02c: add    $0x3,%esi
  0xa755f02f: jmp    *-0x48723ee0(,%ebx,4)
  0xa755f036: movl   $0x0,-0x8(%ebp)
  0xa755f03d: mov    -0x1c(%ebp),%esi
  0xa755f040: mov    -0x18(%ebp),%edi
  0xa755f043: mov    %esp,%ecx
  0xa755f045: shr    $0xc,%ecx
  0xa755f048: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f04f: cmpl   $0x0,0x4(%ecx)
  0xa755f056: je     0xa755f116
  0xa755f05c: call   0xa755f066
  0xa755f061: jmp    0xa755f105
  0xa755f066: lea    0x4(%esp),%eax
  0xa755f06a: cmpl   $0x0,-0x8(%ebp)
  0xa755f071: je     0xa755f088
  0xa755f077: push   $0xb7449b58
  0xa755f07c: call   0xa755f081
  0xa755f081: pusha  
  0xa755f082: call   0xb6ff5f32
  0xa755f087: hlt    
  0xa755f088: mov    %esi,-0x1c(%ebp)
  0xa755f08b: mov    %esp,%edi
  0xa755f08d: shr    $0xc,%edi
  0xa755f090: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f097: push   %edi
  0xa755f098: mov    %ebp,0x148(%edi)
  0xa755f09e: mov    %eax,0x140(%edi)
  0xa755f0a4: call   0xb6e5e068
  0xa755f0a9: add    $0x4,%esp
  0xa755f0ac: push   %eax
  0xa755f0ad: mov    %esp,%eax
  0xa755f0af: shr    $0xc,%eax
  0xa755f0b2: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f0b9: cmp    %eax,%edi
  0xa755f0bb: je     0xa755f0d2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f0c1: push   $0xb74acf8c
  0xa755f0c6: call   0xa755f0cb
  0xa755f0cb: pusha  
  0xa755f0cc: call   0xb6ff5f32
  0xa755f0d1: hlt    
  0xa755f0d2: pop    %eax
  0xa755f0d3: movl   $0x0,0x140(%edi)
  0xa755f0dd: movl   $0x0,0x148(%edi)
  0xa755f0e7: movl   $0x0,0x144(%edi)
  0xa755f0f1: cmpl   $0x0,0x4(%edi)
  0xa755f0f8: jne    0xa7556400
  0xa755f0fe: mov    -0x1c(%ebp),%esi
  0xa755f101: mov    -0x18(%ebp),%edi
  0xa755f104: ret    
  0xa755f105: push   $0xb7302e8b
  0xa755f10a: call   0xa755f10f
  0xa755f10f: pusha  
  0xa755f110: call   0xb6ff5f32
  0xa755f115: hlt    
  0xa755f116: movzbl 0x3(%esi),%ebx
  0xa755f11a: add    $0x3,%esi
  0xa755f11d: jmp    *-0x48723ee0(,%ebx,4)
  0xa755f124: movl   $0x0,-0x8(%ebp)
  0xa755f12b: mov    -0x1c(%ebp),%esi
  0xa755f12e: mov    -0x18(%ebp),%edi
  0xa755f131: mov    %esp,%ecx
  0xa755f133: shr    $0xc,%ecx
  0xa755f136: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f13d: cmpl   $0x0,0x4(%ecx)
  0xa755f144: je     0xa755f204
  0xa755f14a: call   0xa755f154
  0xa755f14f: jmp    0xa755f1f3
  0xa755f154: lea    0x4(%esp),%eax
  0xa755f158: cmpl   $0x0,-0x8(%ebp)
  0xa755f15f: je     0xa755f176
  0xa755f165: push   $0xb7449b58
  0xa755f16a: call   0xa755f16f
  0xa755f16f: pusha  
  0xa755f170: call   0xb6ff5f32
  0xa755f175: hlt    
  0xa755f176: mov    %esi,-0x1c(%ebp)
  0xa755f179: mov    %esp,%edi
  0xa755f17b: shr    $0xc,%edi
  0xa755f17e: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f185: push   %edi
  0xa755f186: mov    %ebp,0x148(%edi)
  0xa755f18c: mov    %eax,0x140(%edi)
  0xa755f192: call   0xb6e5e068
  0xa755f197: add    $0x4,%esp
  0xa755f19a: push   %eax
  0xa755f19b: mov    %esp,%eax
  0xa755f19d: shr    $0xc,%eax
  0xa755f1a0: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f1a7: cmp    %eax,%edi
  0xa755f1a9: je     0xa755f1c0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f1af: push   $0xb74acf8c
  0xa755f1b4: call   0xa755f1b9
  0xa755f1b9: pusha  
  0xa755f1ba: call   0xb6ff5f32
  0xa755f1bf: hlt    
  0xa755f1c0: pop    %eax
  0xa755f1c1: movl   $0x0,0x140(%edi)
  0xa755f1cb: movl   $0x0,0x148(%edi)
  0xa755f1d5: movl   $0x0,0x144(%edi)
  0xa755f1df: cmpl   $0x0,0x4(%edi)
  0xa755f1e6: jne    0xa7556400
  0xa755f1ec: mov    -0x1c(%ebp),%esi
  0xa755f1ef: mov    -0x18(%ebp),%edi
  0xa755f1f2: ret    
  0xa755f1f3: push   $0xb7302e8b
  0xa755f1f8: call   0xa755f1fd
  0xa755f1fd: pusha  
  0xa755f1fe: call   0xb6ff5f32
  0xa755f203: hlt    
  0xa755f204: movzbl 0x4(%esi),%ebx
  0xa755f208: add    $0x4,%esi
  0xa755f20b: jmp    *-0x48722ae0(,%ebx,4)
  0xa755f212: sub    $0x8,%esp
  0xa755f215: vmovsd %xmm0,(%esp)
  0xa755f21a: fldl   (%esp)
  0xa755f21d: add    $0x8,%esp
  0xa755f220: movl   $0x0,-0x8(%ebp)
  0xa755f227: mov    -0x1c(%ebp),%esi
  0xa755f22a: mov    -0x18(%ebp),%edi
  0xa755f22d: mov    %esp,%ecx
  0xa755f22f: shr    $0xc,%ecx
  0xa755f232: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f239: cmpl   $0x0,0x4(%ecx)
  0xa755f240: je     0xa755f300
  0xa755f246: call   0xa755f250
  0xa755f24b: jmp    0xa755f2ef
  0xa755f250: lea    0x4(%esp),%eax
  0xa755f254: cmpl   $0x0,-0x8(%ebp)
  0xa755f25b: je     0xa755f272
  0xa755f261: push   $0xb7449b58
  0xa755f266: call   0xa755f26b
  0xa755f26b: pusha  
  0xa755f26c: call   0xb6ff5f32
  0xa755f271: hlt    
  0xa755f272: mov    %esi,-0x1c(%ebp)
  0xa755f275: mov    %esp,%edi
  0xa755f277: shr    $0xc,%edi
  0xa755f27a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f281: push   %edi
  0xa755f282: mov    %ebp,0x148(%edi)
  0xa755f288: mov    %eax,0x140(%edi)
  0xa755f28e: call   0xb6e5e068
  0xa755f293: add    $0x4,%esp
  0xa755f296: push   %eax
  0xa755f297: mov    %esp,%eax
  0xa755f299: shr    $0xc,%eax
  0xa755f29c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f2a3: cmp    %eax,%edi
  0xa755f2a5: je     0xa755f2bc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f2ab: push   $0xb74acf8c
  0xa755f2b0: call   0xa755f2b5
  0xa755f2b5: pusha  
  0xa755f2b6: call   0xb6ff5f32
  0xa755f2bb: hlt    
  0xa755f2bc: pop    %eax
  0xa755f2bd: movl   $0x0,0x140(%edi)
  0xa755f2c7: movl   $0x0,0x148(%edi)
  0xa755f2d1: movl   $0x0,0x144(%edi)
  0xa755f2db: cmpl   $0x0,0x4(%edi)
  0xa755f2e2: jne    0xa7556400
  0xa755f2e8: mov    -0x1c(%ebp),%esi
  0xa755f2eb: mov    -0x18(%ebp),%edi
  0xa755f2ee: ret    
  0xa755f2ef: push   $0xb7302e8b
  0xa755f2f4: call   0xa755f2f9
  0xa755f2f9: pusha  
  0xa755f2fa: call   0xb6ff5f32
  0xa755f2ff: hlt    
  0xa755f300: movzbl 0x4(%esi),%ebx
  0xa755f304: add    $0x4,%esi
  0xa755f307: jmp    *-0x487232e0(,%ebx,4)
  0xa755f30e: sub    $0x4,%esp
  0xa755f311: vmovss %xmm0,(%esp)
  0xa755f316: flds   (%esp)
  0xa755f319: add    $0x4,%esp
  0xa755f31c: movl   $0x0,-0x8(%ebp)
  0xa755f323: mov    -0x1c(%ebp),%esi
  0xa755f326: mov    -0x18(%ebp),%edi
  0xa755f329: mov    %esp,%ecx
  0xa755f32b: shr    $0xc,%ecx
  0xa755f32e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f335: cmpl   $0x0,0x4(%ecx)
  0xa755f33c: je     0xa755f3fc
  0xa755f342: call   0xa755f34c
  0xa755f347: jmp    0xa755f3eb
  0xa755f34c: lea    0x4(%esp),%eax
  0xa755f350: cmpl   $0x0,-0x8(%ebp)
  0xa755f357: je     0xa755f36e
  0xa755f35d: push   $0xb7449b58
  0xa755f362: call   0xa755f367
  0xa755f367: pusha  
  0xa755f368: call   0xb6ff5f32
  0xa755f36d: hlt    
  0xa755f36e: mov    %esi,-0x1c(%ebp)
  0xa755f371: mov    %esp,%edi
  0xa755f373: shr    $0xc,%edi
  0xa755f376: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f37d: push   %edi
  0xa755f37e: mov    %ebp,0x148(%edi)
  0xa755f384: mov    %eax,0x140(%edi)
  0xa755f38a: call   0xb6e5e068
  0xa755f38f: add    $0x4,%esp
  0xa755f392: push   %eax
  0xa755f393: mov    %esp,%eax
  0xa755f395: shr    $0xc,%eax
  0xa755f398: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f39f: cmp    %eax,%edi
  0xa755f3a1: je     0xa755f3b8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f3a7: push   $0xb74acf8c
  0xa755f3ac: call   0xa755f3b1
  0xa755f3b1: pusha  
  0xa755f3b2: call   0xb6ff5f32
  0xa755f3b7: hlt    
  0xa755f3b8: pop    %eax
  0xa755f3b9: movl   $0x0,0x140(%edi)
  0xa755f3c3: movl   $0x0,0x148(%edi)
  0xa755f3cd: movl   $0x0,0x144(%edi)
  0xa755f3d7: cmpl   $0x0,0x4(%edi)
  0xa755f3de: jne    0xa7556400
  0xa755f3e4: mov    -0x1c(%ebp),%esi
  0xa755f3e7: mov    -0x18(%ebp),%edi
  0xa755f3ea: ret    
  0xa755f3eb: push   $0xb7302e8b
  0xa755f3f0: call   0xa755f3f5
  0xa755f3f5: pusha  
  0xa755f3f6: call   0xb6ff5f32
  0xa755f3fb: hlt    
  0xa755f3fc: movzbl 0x4(%esi),%ebx
  0xa755f400: add    $0x4,%esi
  0xa755f403: jmp    *-0x487236e0(,%ebx,4)
  0xa755f40a: movl   $0x0,-0x8(%ebp)
  0xa755f411: mov    -0x1c(%ebp),%esi
  0xa755f414: mov    -0x18(%ebp),%edi
  0xa755f417: mov    %esp,%ecx
  0xa755f419: shr    $0xc,%ecx
  0xa755f41c: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f423: cmpl   $0x0,0x4(%ecx)
  0xa755f42a: je     0xa755f4ea
  0xa755f430: call   0xa755f43a
  0xa755f435: jmp    0xa755f4d9
  0xa755f43a: lea    0x4(%esp),%eax
  0xa755f43e: cmpl   $0x0,-0x8(%ebp)
  0xa755f445: je     0xa755f45c
  0xa755f44b: push   $0xb7449b58
  0xa755f450: call   0xa755f455
  0xa755f455: pusha  
  0xa755f456: call   0xb6ff5f32
  0xa755f45b: hlt    
  0xa755f45c: mov    %esi,-0x1c(%ebp)
  0xa755f45f: mov    %esp,%edi
  0xa755f461: shr    $0xc,%edi
  0xa755f464: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f46b: push   %edi
  0xa755f46c: mov    %ebp,0x148(%edi)
  0xa755f472: mov    %eax,0x140(%edi)
  0xa755f478: call   0xb6e5e068
  0xa755f47d: add    $0x4,%esp
  0xa755f480: push   %eax
  0xa755f481: mov    %esp,%eax
  0xa755f483: shr    $0xc,%eax
  0xa755f486: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f48d: cmp    %eax,%edi
  0xa755f48f: je     0xa755f4a6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f495: push   $0xb74acf8c
  0xa755f49a: call   0xa755f49f
  0xa755f49f: pusha  
  0xa755f4a0: call   0xb6ff5f32
  0xa755f4a5: hlt    
  0xa755f4a6: pop    %eax
  0xa755f4a7: movl   $0x0,0x140(%edi)
  0xa755f4b1: movl   $0x0,0x148(%edi)
  0xa755f4bb: movl   $0x0,0x144(%edi)
  0xa755f4c5: cmpl   $0x0,0x4(%edi)
  0xa755f4cc: jne    0xa7556400
  0xa755f4d2: mov    -0x1c(%ebp),%esi
  0xa755f4d5: mov    -0x18(%ebp),%edi
  0xa755f4d8: ret    
  0xa755f4d9: push   $0xb7302e8b
  0xa755f4de: call   0xa755f4e3
  0xa755f4e3: pusha  
  0xa755f4e4: call   0xb6ff5f32
  0xa755f4e9: hlt    
  0xa755f4ea: movzbl 0x4(%esi),%ebx
  0xa755f4ee: add    $0x4,%esi
  0xa755f4f1: jmp    *-0x48723ae0(,%ebx,4)
  0xa755f4f8: movl   $0x0,-0x8(%ebp)
  0xa755f4ff: mov    -0x1c(%ebp),%esi
  0xa755f502: mov    -0x18(%ebp),%edi
  0xa755f505: mov    %esp,%ecx
  0xa755f507: shr    $0xc,%ecx
  0xa755f50a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f511: cmpl   $0x0,0x4(%ecx)
  0xa755f518: je     0xa755f5d8
  0xa755f51e: call   0xa755f528
  0xa755f523: jmp    0xa755f5c7
  0xa755f528: lea    0x4(%esp),%eax
  0xa755f52c: cmpl   $0x0,-0x8(%ebp)
  0xa755f533: je     0xa755f54a
  0xa755f539: push   $0xb7449b58
  0xa755f53e: call   0xa755f543
  0xa755f543: pusha  
  0xa755f544: call   0xb6ff5f32
  0xa755f549: hlt    
  0xa755f54a: mov    %esi,-0x1c(%ebp)
  0xa755f54d: mov    %esp,%edi
  0xa755f54f: shr    $0xc,%edi
  0xa755f552: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f559: push   %edi
  0xa755f55a: mov    %ebp,0x148(%edi)
  0xa755f560: mov    %eax,0x140(%edi)
  0xa755f566: call   0xb6e5e068
  0xa755f56b: add    $0x4,%esp
  0xa755f56e: push   %eax
  0xa755f56f: mov    %esp,%eax
  0xa755f571: shr    $0xc,%eax
  0xa755f574: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f57b: cmp    %eax,%edi
  0xa755f57d: je     0xa755f594
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f583: push   $0xb74acf8c
  0xa755f588: call   0xa755f58d
  0xa755f58d: pusha  
  0xa755f58e: call   0xb6ff5f32
  0xa755f593: hlt    
  0xa755f594: pop    %eax
  0xa755f595: movl   $0x0,0x140(%edi)
  0xa755f59f: movl   $0x0,0x148(%edi)
  0xa755f5a9: movl   $0x0,0x144(%edi)
  0xa755f5b3: cmpl   $0x0,0x4(%edi)
  0xa755f5ba: jne    0xa7556400
  0xa755f5c0: mov    -0x1c(%ebp),%esi
  0xa755f5c3: mov    -0x18(%ebp),%edi
  0xa755f5c6: ret    
  0xa755f5c7: push   $0xb7302e8b
  0xa755f5cc: call   0xa755f5d1
  0xa755f5d1: pusha  
  0xa755f5d2: call   0xb6ff5f32
  0xa755f5d7: hlt    
  0xa755f5d8: movzbl 0x4(%esi),%ebx
  0xa755f5dc: add    $0x4,%esi
  0xa755f5df: jmp    *-0x48723ee0(,%ebx,4)
  0xa755f5e6: movl   $0x0,-0x8(%ebp)
  0xa755f5ed: mov    -0x1c(%ebp),%esi
  0xa755f5f0: mov    -0x18(%ebp),%edi
  0xa755f5f3: mov    %esp,%ecx
  0xa755f5f5: shr    $0xc,%ecx
  0xa755f5f8: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f5ff: cmpl   $0x0,0x4(%ecx)
  0xa755f606: je     0xa755f6c6
  0xa755f60c: call   0xa755f616
  0xa755f611: jmp    0xa755f6b5
  0xa755f616: lea    0x4(%esp),%eax
  0xa755f61a: cmpl   $0x0,-0x8(%ebp)
  0xa755f621: je     0xa755f638
  0xa755f627: push   $0xb7449b58
  0xa755f62c: call   0xa755f631
  0xa755f631: pusha  
  0xa755f632: call   0xb6ff5f32
  0xa755f637: hlt    
  0xa755f638: mov    %esi,-0x1c(%ebp)
  0xa755f63b: mov    %esp,%edi
  0xa755f63d: shr    $0xc,%edi
  0xa755f640: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f647: push   %edi
  0xa755f648: mov    %ebp,0x148(%edi)
  0xa755f64e: mov    %eax,0x140(%edi)
  0xa755f654: call   0xb6e5e068
  0xa755f659: add    $0x4,%esp
  0xa755f65c: push   %eax
  0xa755f65d: mov    %esp,%eax
  0xa755f65f: shr    $0xc,%eax
  0xa755f662: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f669: cmp    %eax,%edi
  0xa755f66b: je     0xa755f682
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f671: push   $0xb74acf8c
  0xa755f676: call   0xa755f67b
  0xa755f67b: pusha  
  0xa755f67c: call   0xb6ff5f32
  0xa755f681: hlt    
  0xa755f682: pop    %eax
  0xa755f683: movl   $0x0,0x140(%edi)
  0xa755f68d: movl   $0x0,0x148(%edi)
  0xa755f697: movl   $0x0,0x144(%edi)
  0xa755f6a1: cmpl   $0x0,0x4(%edi)
  0xa755f6a8: jne    0xa7556400
  0xa755f6ae: mov    -0x1c(%ebp),%esi
  0xa755f6b1: mov    -0x18(%ebp),%edi
  0xa755f6b4: ret    
  0xa755f6b5: push   $0xb7302e8b
  0xa755f6ba: call   0xa755f6bf
  0xa755f6bf: pusha  
  0xa755f6c0: call   0xb6ff5f32
  0xa755f6c5: hlt    
  0xa755f6c6: movzbl 0x4(%esi),%ebx
  0xa755f6ca: add    $0x4,%esi
  0xa755f6cd: jmp    *-0x48722ee0(,%ebx,4)
  0xa755f6d4: movl   $0x0,-0x8(%ebp)
  0xa755f6db: mov    -0x1c(%ebp),%esi
  0xa755f6de: mov    -0x18(%ebp),%edi
  0xa755f6e1: mov    %esp,%ecx
  0xa755f6e3: shr    $0xc,%ecx
  0xa755f6e6: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f6ed: cmpl   $0x0,0x4(%ecx)
  0xa755f6f4: je     0xa755f7b4
  0xa755f6fa: call   0xa755f704
  0xa755f6ff: jmp    0xa755f7a3
  0xa755f704: lea    0x4(%esp),%eax
  0xa755f708: cmpl   $0x0,-0x8(%ebp)
  0xa755f70f: je     0xa755f726
  0xa755f715: push   $0xb7449b58
  0xa755f71a: call   0xa755f71f
  0xa755f71f: pusha  
  0xa755f720: call   0xb6ff5f32
  0xa755f725: hlt    
  0xa755f726: mov    %esi,-0x1c(%ebp)
  0xa755f729: mov    %esp,%edi
  0xa755f72b: shr    $0xc,%edi
  0xa755f72e: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f735: push   %edi
  0xa755f736: mov    %ebp,0x148(%edi)
  0xa755f73c: mov    %eax,0x140(%edi)
  0xa755f742: call   0xb6e5e068
  0xa755f747: add    $0x4,%esp
  0xa755f74a: push   %eax
  0xa755f74b: mov    %esp,%eax
  0xa755f74d: shr    $0xc,%eax
  0xa755f750: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f757: cmp    %eax,%edi
  0xa755f759: je     0xa755f770
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f75f: push   $0xb74acf8c
  0xa755f764: call   0xa755f769
  0xa755f769: pusha  
  0xa755f76a: call   0xb6ff5f32
  0xa755f76f: hlt    
  0xa755f770: pop    %eax
  0xa755f771: movl   $0x0,0x140(%edi)
  0xa755f77b: movl   $0x0,0x148(%edi)
  0xa755f785: movl   $0x0,0x144(%edi)
  0xa755f78f: cmpl   $0x0,0x4(%edi)
  0xa755f796: jne    0xa7556400
  0xa755f79c: mov    -0x1c(%ebp),%esi
  0xa755f79f: mov    -0x18(%ebp),%edi
  0xa755f7a2: ret    
  0xa755f7a3: push   $0xb7302e8b
  0xa755f7a8: call   0xa755f7ad
  0xa755f7ad: pusha  
  0xa755f7ae: call   0xb6ff5f32
  0xa755f7b3: hlt    
  0xa755f7b4: movzbl 0x4(%esi),%ebx
  0xa755f7b8: add    $0x4,%esi
  0xa755f7bb: jmp    *-0x48723ee0(,%ebx,4)
  0xa755f7c2: movl   $0x0,-0x8(%ebp)
  0xa755f7c9: mov    -0x1c(%ebp),%esi
  0xa755f7cc: mov    -0x18(%ebp),%edi
  0xa755f7cf: mov    %esp,%ecx
  0xa755f7d1: shr    $0xc,%ecx
  0xa755f7d4: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f7db: cmpl   $0x0,0x4(%ecx)
  0xa755f7e2: je     0xa755f8a2
  0xa755f7e8: call   0xa755f7f2
  0xa755f7ed: jmp    0xa755f891
  0xa755f7f2: lea    0x4(%esp),%eax
  0xa755f7f6: cmpl   $0x0,-0x8(%ebp)
  0xa755f7fd: je     0xa755f814
  0xa755f803: push   $0xb7449b58
  0xa755f808: call   0xa755f80d
  0xa755f80d: pusha  
  0xa755f80e: call   0xb6ff5f32
  0xa755f813: hlt    
  0xa755f814: mov    %esi,-0x1c(%ebp)
  0xa755f817: mov    %esp,%edi
  0xa755f819: shr    $0xc,%edi
  0xa755f81c: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f823: push   %edi
  0xa755f824: mov    %ebp,0x148(%edi)
  0xa755f82a: mov    %eax,0x140(%edi)
  0xa755f830: call   0xb6e5e068
  0xa755f835: add    $0x4,%esp
  0xa755f838: push   %eax
  0xa755f839: mov    %esp,%eax
  0xa755f83b: shr    $0xc,%eax
  0xa755f83e: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f845: cmp    %eax,%edi
  0xa755f847: je     0xa755f85e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f84d: push   $0xb74acf8c
  0xa755f852: call   0xa755f857
  0xa755f857: pusha  
  0xa755f858: call   0xb6ff5f32
  0xa755f85d: hlt    
  0xa755f85e: pop    %eax
  0xa755f85f: movl   $0x0,0x140(%edi)
  0xa755f869: movl   $0x0,0x148(%edi)
  0xa755f873: movl   $0x0,0x144(%edi)
  0xa755f87d: cmpl   $0x0,0x4(%edi)
  0xa755f884: jne    0xa7556400
  0xa755f88a: mov    -0x1c(%ebp),%esi
  0xa755f88d: mov    -0x18(%ebp),%edi
  0xa755f890: ret    
  0xa755f891: push   $0xb7302e8b
  0xa755f896: call   0xa755f89b
  0xa755f89b: pusha  
  0xa755f89c: call   0xb6ff5f32
  0xa755f8a1: hlt    
  0xa755f8a2: movzbl 0x4(%esi),%ebx
  0xa755f8a6: add    $0x4,%esi
  0xa755f8a9: jmp    *-0x48723ee0(,%ebx,4)
  0xa755f8b0: movl   $0x0,-0x8(%ebp)
  0xa755f8b7: mov    -0x1c(%ebp),%esi
  0xa755f8ba: mov    -0x18(%ebp),%edi
  0xa755f8bd: mov    %esp,%ecx
  0xa755f8bf: shr    $0xc,%ecx
  0xa755f8c2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f8c9: cmpl   $0x0,0x4(%ecx)
  0xa755f8d0: je     0xa755f990
  0xa755f8d6: call   0xa755f8e0
  0xa755f8db: jmp    0xa755f97f
  0xa755f8e0: lea    0x4(%esp),%eax
  0xa755f8e4: cmpl   $0x0,-0x8(%ebp)
  0xa755f8eb: je     0xa755f902
  0xa755f8f1: push   $0xb7449b58
  0xa755f8f6: call   0xa755f8fb
  0xa755f8fb: pusha  
  0xa755f8fc: call   0xb6ff5f32
  0xa755f901: hlt    
  0xa755f902: mov    %esi,-0x1c(%ebp)
  0xa755f905: mov    %esp,%edi
  0xa755f907: shr    $0xc,%edi
  0xa755f90a: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f911: push   %edi
  0xa755f912: mov    %ebp,0x148(%edi)
  0xa755f918: mov    %eax,0x140(%edi)
  0xa755f91e: call   0xb6e5e068
  0xa755f923: add    $0x4,%esp
  0xa755f926: push   %eax
  0xa755f927: mov    %esp,%eax
  0xa755f929: shr    $0xc,%eax
  0xa755f92c: mov    -0x4871aba0(,%eax,4),%eax
  0xa755f933: cmp    %eax,%edi
  0xa755f935: je     0xa755f94c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755f93b: push   $0xb74acf8c
  0xa755f940: call   0xa755f945
  0xa755f945: pusha  
  0xa755f946: call   0xb6ff5f32
  0xa755f94b: hlt    
  0xa755f94c: pop    %eax
  0xa755f94d: movl   $0x0,0x140(%edi)
  0xa755f957: movl   $0x0,0x148(%edi)
  0xa755f961: movl   $0x0,0x144(%edi)
  0xa755f96b: cmpl   $0x0,0x4(%edi)
  0xa755f972: jne    0xa7556400
  0xa755f978: mov    -0x1c(%ebp),%esi
  0xa755f97b: mov    -0x18(%ebp),%edi
  0xa755f97e: ret    
  0xa755f97f: push   $0xb7302e8b
  0xa755f984: call   0xa755f989
  0xa755f989: pusha  
  0xa755f98a: call   0xb6ff5f32
  0xa755f98f: hlt    
  0xa755f990: movzbl 0x4(%esi),%ebx
  0xa755f994: add    $0x4,%esi
  0xa755f997: jmp    *-0x48723ee0(,%ebx,4)
  0xa755f99e: movl   $0x0,-0x8(%ebp)
  0xa755f9a5: mov    -0x1c(%ebp),%esi
  0xa755f9a8: mov    -0x18(%ebp),%edi
  0xa755f9ab: mov    %esp,%ecx
  0xa755f9ad: shr    $0xc,%ecx
  0xa755f9b0: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755f9b7: cmpl   $0x0,0x4(%ecx)
  0xa755f9be: je     0xa755fa7e
  0xa755f9c4: call   0xa755f9ce
  0xa755f9c9: jmp    0xa755fa6d
  0xa755f9ce: lea    0x4(%esp),%eax
  0xa755f9d2: cmpl   $0x0,-0x8(%ebp)
  0xa755f9d9: je     0xa755f9f0
  0xa755f9df: push   $0xb7449b58
  0xa755f9e4: call   0xa755f9e9
  0xa755f9e9: pusha  
  0xa755f9ea: call   0xb6ff5f32
  0xa755f9ef: hlt    
  0xa755f9f0: mov    %esi,-0x1c(%ebp)
  0xa755f9f3: mov    %esp,%edi
  0xa755f9f5: shr    $0xc,%edi
  0xa755f9f8: mov    -0x4871aba0(,%edi,4),%edi
  0xa755f9ff: push   %edi
  0xa755fa00: mov    %ebp,0x148(%edi)
  0xa755fa06: mov    %eax,0x140(%edi)
  0xa755fa0c: call   0xb6e5e068
  0xa755fa11: add    $0x4,%esp
  0xa755fa14: push   %eax
  0xa755fa15: mov    %esp,%eax
  0xa755fa17: shr    $0xc,%eax
  0xa755fa1a: mov    -0x4871aba0(,%eax,4),%eax
  0xa755fa21: cmp    %eax,%edi
  0xa755fa23: je     0xa755fa3a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755fa29: push   $0xb74acf8c
  0xa755fa2e: call   0xa755fa33
  0xa755fa33: pusha  
  0xa755fa34: call   0xb6ff5f32
  0xa755fa39: hlt    
  0xa755fa3a: pop    %eax
  0xa755fa3b: movl   $0x0,0x140(%edi)
  0xa755fa45: movl   $0x0,0x148(%edi)
  0xa755fa4f: movl   $0x0,0x144(%edi)
  0xa755fa59: cmpl   $0x0,0x4(%edi)
  0xa755fa60: jne    0xa7556400
  0xa755fa66: mov    -0x1c(%ebp),%esi
  0xa755fa69: mov    -0x18(%ebp),%edi
  0xa755fa6c: ret    
  0xa755fa6d: push   $0xb7302e8b
  0xa755fa72: call   0xa755fa77
  0xa755fa77: pusha  
  0xa755fa78: call   0xb6ff5f32
  0xa755fa7d: hlt    
  0xa755fa7e: movzbl 0x4(%esi),%ebx
  0xa755fa82: add    $0x4,%esi
  0xa755fa85: jmp    *-0x48723ee0(,%ebx,4)
  0xa755fa8c: movl   $0x0,-0x8(%ebp)
  0xa755fa93: mov    -0x1c(%ebp),%esi
  0xa755fa96: mov    -0x18(%ebp),%edi
  0xa755fa99: mov    %esp,%ecx
  0xa755fa9b: shr    $0xc,%ecx
  0xa755fa9e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755faa5: cmpl   $0x0,0x4(%ecx)
  0xa755faac: je     0xa755fb6c
  0xa755fab2: call   0xa755fabc
  0xa755fab7: jmp    0xa755fb5b
  0xa755fabc: lea    0x4(%esp),%eax
  0xa755fac0: cmpl   $0x0,-0x8(%ebp)
  0xa755fac7: je     0xa755fade
  0xa755facd: push   $0xb7449b58
  0xa755fad2: call   0xa755fad7
  0xa755fad7: pusha  
  0xa755fad8: call   0xb6ff5f32
  0xa755fadd: hlt    
  0xa755fade: mov    %esi,-0x1c(%ebp)
  0xa755fae1: mov    %esp,%edi
  0xa755fae3: shr    $0xc,%edi
  0xa755fae6: mov    -0x4871aba0(,%edi,4),%edi
  0xa755faed: push   %edi
  0xa755faee: mov    %ebp,0x148(%edi)
  0xa755faf4: mov    %eax,0x140(%edi)
  0xa755fafa: call   0xb6e5e068
  0xa755faff: add    $0x4,%esp
  0xa755fb02: push   %eax
  0xa755fb03: mov    %esp,%eax
  0xa755fb05: shr    $0xc,%eax
  0xa755fb08: mov    -0x4871aba0(,%eax,4),%eax
  0xa755fb0f: cmp    %eax,%edi
  0xa755fb11: je     0xa755fb28
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755fb17: push   $0xb74acf8c
  0xa755fb1c: call   0xa755fb21
  0xa755fb21: pusha  
  0xa755fb22: call   0xb6ff5f32
  0xa755fb27: hlt    
  0xa755fb28: pop    %eax
  0xa755fb29: movl   $0x0,0x140(%edi)
  0xa755fb33: movl   $0x0,0x148(%edi)
  0xa755fb3d: movl   $0x0,0x144(%edi)
  0xa755fb47: cmpl   $0x0,0x4(%edi)
  0xa755fb4e: jne    0xa7556400
  0xa755fb54: mov    -0x1c(%ebp),%esi
  0xa755fb57: mov    -0x18(%ebp),%edi
  0xa755fb5a: ret    
  0xa755fb5b: push   $0xb7302e8b
  0xa755fb60: call   0xa755fb65
  0xa755fb65: pusha  
  0xa755fb66: call   0xb6ff5f32
  0xa755fb6b: hlt    
  0xa755fb6c: movzbl 0x5(%esi),%ebx
  0xa755fb70: add    $0x5,%esi
  0xa755fb73: jmp    *-0x48722ae0(,%ebx,4)
  0xa755fb7a: sub    $0x8,%esp
  0xa755fb7d: vmovsd %xmm0,(%esp)
  0xa755fb82: fldl   (%esp)
  0xa755fb85: add    $0x8,%esp
  0xa755fb88: movl   $0x0,-0x8(%ebp)
  0xa755fb8f: mov    -0x1c(%ebp),%esi
  0xa755fb92: mov    -0x18(%ebp),%edi
  0xa755fb95: mov    %esp,%ecx
  0xa755fb97: shr    $0xc,%ecx
  0xa755fb9a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755fba1: cmpl   $0x0,0x4(%ecx)
  0xa755fba8: je     0xa755fc68
  0xa755fbae: call   0xa755fbb8
  0xa755fbb3: jmp    0xa755fc57
  0xa755fbb8: lea    0x4(%esp),%eax
  0xa755fbbc: cmpl   $0x0,-0x8(%ebp)
  0xa755fbc3: je     0xa755fbda
  0xa755fbc9: push   $0xb7449b58
  0xa755fbce: call   0xa755fbd3
  0xa755fbd3: pusha  
  0xa755fbd4: call   0xb6ff5f32
  0xa755fbd9: hlt    
  0xa755fbda: mov    %esi,-0x1c(%ebp)
  0xa755fbdd: mov    %esp,%edi
  0xa755fbdf: shr    $0xc,%edi
  0xa755fbe2: mov    -0x4871aba0(,%edi,4),%edi
  0xa755fbe9: push   %edi
  0xa755fbea: mov    %ebp,0x148(%edi)
  0xa755fbf0: mov    %eax,0x140(%edi)
  0xa755fbf6: call   0xb6e5e068
  0xa755fbfb: add    $0x4,%esp
  0xa755fbfe: push   %eax
  0xa755fbff: mov    %esp,%eax
  0xa755fc01: shr    $0xc,%eax
  0xa755fc04: mov    -0x4871aba0(,%eax,4),%eax
  0xa755fc0b: cmp    %eax,%edi
  0xa755fc0d: je     0xa755fc24
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755fc13: push   $0xb74acf8c
  0xa755fc18: call   0xa755fc1d
  0xa755fc1d: pusha  
  0xa755fc1e: call   0xb6ff5f32
  0xa755fc23: hlt    
  0xa755fc24: pop    %eax
  0xa755fc25: movl   $0x0,0x140(%edi)
  0xa755fc2f: movl   $0x0,0x148(%edi)
  0xa755fc39: movl   $0x0,0x144(%edi)
  0xa755fc43: cmpl   $0x0,0x4(%edi)
  0xa755fc4a: jne    0xa7556400
  0xa755fc50: mov    -0x1c(%ebp),%esi
  0xa755fc53: mov    -0x18(%ebp),%edi
  0xa755fc56: ret    
  0xa755fc57: push   $0xb7302e8b
  0xa755fc5c: call   0xa755fc61
  0xa755fc61: pusha  
  0xa755fc62: call   0xb6ff5f32
  0xa755fc67: hlt    
  0xa755fc68: movzbl 0x5(%esi),%ebx
  0xa755fc6c: add    $0x5,%esi
  0xa755fc6f: jmp    *-0x487232e0(,%ebx,4)
  0xa755fc76: sub    $0x4,%esp
  0xa755fc79: vmovss %xmm0,(%esp)
  0xa755fc7e: flds   (%esp)
  0xa755fc81: add    $0x4,%esp
  0xa755fc84: movl   $0x0,-0x8(%ebp)
  0xa755fc8b: mov    -0x1c(%ebp),%esi
  0xa755fc8e: mov    -0x18(%ebp),%edi
  0xa755fc91: mov    %esp,%ecx
  0xa755fc93: shr    $0xc,%ecx
  0xa755fc96: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755fc9d: cmpl   $0x0,0x4(%ecx)
  0xa755fca4: je     0xa755fd64
  0xa755fcaa: call   0xa755fcb4
  0xa755fcaf: jmp    0xa755fd53
  0xa755fcb4: lea    0x4(%esp),%eax
  0xa755fcb8: cmpl   $0x0,-0x8(%ebp)
  0xa755fcbf: je     0xa755fcd6
  0xa755fcc5: push   $0xb7449b58
  0xa755fcca: call   0xa755fccf
  0xa755fccf: pusha  
  0xa755fcd0: call   0xb6ff5f32
  0xa755fcd5: hlt    
  0xa755fcd6: mov    %esi,-0x1c(%ebp)
  0xa755fcd9: mov    %esp,%edi
  0xa755fcdb: shr    $0xc,%edi
  0xa755fcde: mov    -0x4871aba0(,%edi,4),%edi
  0xa755fce5: push   %edi
  0xa755fce6: mov    %ebp,0x148(%edi)
  0xa755fcec: mov    %eax,0x140(%edi)
  0xa755fcf2: call   0xb6e5e068
  0xa755fcf7: add    $0x4,%esp
  0xa755fcfa: push   %eax
  0xa755fcfb: mov    %esp,%eax
  0xa755fcfd: shr    $0xc,%eax
  0xa755fd00: mov    -0x4871aba0(,%eax,4),%eax
  0xa755fd07: cmp    %eax,%edi
  0xa755fd09: je     0xa755fd20
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755fd0f: push   $0xb74acf8c
  0xa755fd14: call   0xa755fd19
  0xa755fd19: pusha  
  0xa755fd1a: call   0xb6ff5f32
  0xa755fd1f: hlt    
  0xa755fd20: pop    %eax
  0xa755fd21: movl   $0x0,0x140(%edi)
  0xa755fd2b: movl   $0x0,0x148(%edi)
  0xa755fd35: movl   $0x0,0x144(%edi)
  0xa755fd3f: cmpl   $0x0,0x4(%edi)
  0xa755fd46: jne    0xa7556400
  0xa755fd4c: mov    -0x1c(%ebp),%esi
  0xa755fd4f: mov    -0x18(%ebp),%edi
  0xa755fd52: ret    
  0xa755fd53: push   $0xb7302e8b
  0xa755fd58: call   0xa755fd5d
  0xa755fd5d: pusha  
  0xa755fd5e: call   0xb6ff5f32
  0xa755fd63: hlt    
  0xa755fd64: movzbl 0x5(%esi),%ebx
  0xa755fd68: add    $0x5,%esi
  0xa755fd6b: jmp    *-0x487236e0(,%ebx,4)
  0xa755fd72: movl   $0x0,-0x8(%ebp)
  0xa755fd79: mov    -0x1c(%ebp),%esi
  0xa755fd7c: mov    -0x18(%ebp),%edi
  0xa755fd7f: mov    %esp,%ecx
  0xa755fd81: shr    $0xc,%ecx
  0xa755fd84: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755fd8b: cmpl   $0x0,0x4(%ecx)
  0xa755fd92: je     0xa755fe52
  0xa755fd98: call   0xa755fda2
  0xa755fd9d: jmp    0xa755fe41
  0xa755fda2: lea    0x4(%esp),%eax
  0xa755fda6: cmpl   $0x0,-0x8(%ebp)
  0xa755fdad: je     0xa755fdc4
  0xa755fdb3: push   $0xb7449b58
  0xa755fdb8: call   0xa755fdbd
  0xa755fdbd: pusha  
  0xa755fdbe: call   0xb6ff5f32
  0xa755fdc3: hlt    
  0xa755fdc4: mov    %esi,-0x1c(%ebp)
  0xa755fdc7: mov    %esp,%edi
  0xa755fdc9: shr    $0xc,%edi
  0xa755fdcc: mov    -0x4871aba0(,%edi,4),%edi
  0xa755fdd3: push   %edi
  0xa755fdd4: mov    %ebp,0x148(%edi)
  0xa755fdda: mov    %eax,0x140(%edi)
  0xa755fde0: call   0xb6e5e068
  0xa755fde5: add    $0x4,%esp
  0xa755fde8: push   %eax
  0xa755fde9: mov    %esp,%eax
  0xa755fdeb: shr    $0xc,%eax
  0xa755fdee: mov    -0x4871aba0(,%eax,4),%eax
  0xa755fdf5: cmp    %eax,%edi
  0xa755fdf7: je     0xa755fe0e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755fdfd: push   $0xb74acf8c
  0xa755fe02: call   0xa755fe07
  0xa755fe07: pusha  
  0xa755fe08: call   0xb6ff5f32
  0xa755fe0d: hlt    
  0xa755fe0e: pop    %eax
  0xa755fe0f: movl   $0x0,0x140(%edi)
  0xa755fe19: movl   $0x0,0x148(%edi)
  0xa755fe23: movl   $0x0,0x144(%edi)
  0xa755fe2d: cmpl   $0x0,0x4(%edi)
  0xa755fe34: jne    0xa7556400
  0xa755fe3a: mov    -0x1c(%ebp),%esi
  0xa755fe3d: mov    -0x18(%ebp),%edi
  0xa755fe40: ret    
  0xa755fe41: push   $0xb7302e8b
  0xa755fe46: call   0xa755fe4b
  0xa755fe4b: pusha  
  0xa755fe4c: call   0xb6ff5f32
  0xa755fe51: hlt    
  0xa755fe52: movzbl 0x5(%esi),%ebx
  0xa755fe56: add    $0x5,%esi
  0xa755fe59: jmp    *-0x48723ae0(,%ebx,4)
  0xa755fe60: movl   $0x0,-0x8(%ebp)
  0xa755fe67: mov    -0x1c(%ebp),%esi
  0xa755fe6a: mov    -0x18(%ebp),%edi
  0xa755fe6d: mov    %esp,%ecx
  0xa755fe6f: shr    $0xc,%ecx
  0xa755fe72: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755fe79: cmpl   $0x0,0x4(%ecx)
  0xa755fe80: je     0xa755ff40
  0xa755fe86: call   0xa755fe90
  0xa755fe8b: jmp    0xa755ff2f
  0xa755fe90: lea    0x4(%esp),%eax
  0xa755fe94: cmpl   $0x0,-0x8(%ebp)
  0xa755fe9b: je     0xa755feb2
  0xa755fea1: push   $0xb7449b58
  0xa755fea6: call   0xa755feab
  0xa755feab: pusha  
  0xa755feac: call   0xb6ff5f32
  0xa755feb1: hlt    
  0xa755feb2: mov    %esi,-0x1c(%ebp)
  0xa755feb5: mov    %esp,%edi
  0xa755feb7: shr    $0xc,%edi
  0xa755feba: mov    -0x4871aba0(,%edi,4),%edi
  0xa755fec1: push   %edi
  0xa755fec2: mov    %ebp,0x148(%edi)
  0xa755fec8: mov    %eax,0x140(%edi)
  0xa755fece: call   0xb6e5e068
  0xa755fed3: add    $0x4,%esp
  0xa755fed6: push   %eax
  0xa755fed7: mov    %esp,%eax
  0xa755fed9: shr    $0xc,%eax
  0xa755fedc: mov    -0x4871aba0(,%eax,4),%eax
  0xa755fee3: cmp    %eax,%edi
  0xa755fee5: je     0xa755fefc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755feeb: push   $0xb74acf8c
  0xa755fef0: call   0xa755fef5
  0xa755fef5: pusha  
  0xa755fef6: call   0xb6ff5f32
  0xa755fefb: hlt    
  0xa755fefc: pop    %eax
  0xa755fefd: movl   $0x0,0x140(%edi)
  0xa755ff07: movl   $0x0,0x148(%edi)
  0xa755ff11: movl   $0x0,0x144(%edi)
  0xa755ff1b: cmpl   $0x0,0x4(%edi)
  0xa755ff22: jne    0xa7556400
  0xa755ff28: mov    -0x1c(%ebp),%esi
  0xa755ff2b: mov    -0x18(%ebp),%edi
  0xa755ff2e: ret    
  0xa755ff2f: push   $0xb7302e8b
  0xa755ff34: call   0xa755ff39
  0xa755ff39: pusha  
  0xa755ff3a: call   0xb6ff5f32
  0xa755ff3f: hlt    
  0xa755ff40: movzbl 0x5(%esi),%ebx
  0xa755ff44: add    $0x5,%esi
  0xa755ff47: jmp    *-0x48723ee0(,%ebx,4)
  0xa755ff4e: movl   $0x0,-0x8(%ebp)
  0xa755ff55: mov    -0x1c(%ebp),%esi
  0xa755ff58: mov    -0x18(%ebp),%edi
  0xa755ff5b: mov    %esp,%ecx
  0xa755ff5d: shr    $0xc,%ecx
  0xa755ff60: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa755ff67: cmpl   $0x0,0x4(%ecx)
  0xa755ff6e: je     0xa756002e
  0xa755ff74: call   0xa755ff7e
  0xa755ff79: jmp    0xa756001d
  0xa755ff7e: lea    0x4(%esp),%eax
  0xa755ff82: cmpl   $0x0,-0x8(%ebp)
  0xa755ff89: je     0xa755ffa0
  0xa755ff8f: push   $0xb7449b58
  0xa755ff94: call   0xa755ff99
  0xa755ff99: pusha  
  0xa755ff9a: call   0xb6ff5f32
  0xa755ff9f: hlt    
  0xa755ffa0: mov    %esi,-0x1c(%ebp)
  0xa755ffa3: mov    %esp,%edi
  0xa755ffa5: shr    $0xc,%edi
  0xa755ffa8: mov    -0x4871aba0(,%edi,4),%edi
  0xa755ffaf: push   %edi
  0xa755ffb0: mov    %ebp,0x148(%edi)
  0xa755ffb6: mov    %eax,0x140(%edi)
  0xa755ffbc: call   0xb6e5e068
  0xa755ffc1: add    $0x4,%esp
  0xa755ffc4: push   %eax
  0xa755ffc5: mov    %esp,%eax
  0xa755ffc7: shr    $0xc,%eax
  0xa755ffca: mov    -0x4871aba0(,%eax,4),%eax
  0xa755ffd1: cmp    %eax,%edi
  0xa755ffd3: je     0xa755ffea
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa755ffd9: push   $0xb74acf8c
  0xa755ffde: call   0xa755ffe3
  0xa755ffe3: pusha  
  0xa755ffe4: call   0xb6ff5f32
  0xa755ffe9: hlt    
  0xa755ffea: pop    %eax
  0xa755ffeb: movl   $0x0,0x140(%edi)
  0xa755fff5: movl   $0x0,0x148(%edi)
  0xa755ffff: movl   $0x0,0x144(%edi)
  0xa7560009: cmpl   $0x0,0x4(%edi)
  0xa7560010: jne    0xa7556400
  0xa7560016: mov    -0x1c(%ebp),%esi
  0xa7560019: mov    -0x18(%ebp),%edi
  0xa756001c: ret    
  0xa756001d: push   $0xb7302e8b
  0xa7560022: call   0xa7560027
  0xa7560027: pusha  
  0xa7560028: call   0xb6ff5f32
  0xa756002d: hlt    
  0xa756002e: movzbl 0x5(%esi),%ebx
  0xa7560032: add    $0x5,%esi
  0xa7560035: jmp    *-0x48722ee0(,%ebx,4)
  0xa756003c: movl   $0x0,-0x8(%ebp)
  0xa7560043: mov    -0x1c(%ebp),%esi
  0xa7560046: mov    -0x18(%ebp),%edi
  0xa7560049: mov    %esp,%ecx
  0xa756004b: shr    $0xc,%ecx
  0xa756004e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560055: cmpl   $0x0,0x4(%ecx)
  0xa756005c: je     0xa756011c
  0xa7560062: call   0xa756006c
  0xa7560067: jmp    0xa756010b
  0xa756006c: lea    0x4(%esp),%eax
  0xa7560070: cmpl   $0x0,-0x8(%ebp)
  0xa7560077: je     0xa756008e
  0xa756007d: push   $0xb7449b58
  0xa7560082: call   0xa7560087
  0xa7560087: pusha  
  0xa7560088: call   0xb6ff5f32
  0xa756008d: hlt    
  0xa756008e: mov    %esi,-0x1c(%ebp)
  0xa7560091: mov    %esp,%edi
  0xa7560093: shr    $0xc,%edi
  0xa7560096: mov    -0x4871aba0(,%edi,4),%edi
  0xa756009d: push   %edi
  0xa756009e: mov    %ebp,0x148(%edi)
  0xa75600a4: mov    %eax,0x140(%edi)
  0xa75600aa: call   0xb6e5e068
  0xa75600af: add    $0x4,%esp
  0xa75600b2: push   %eax
  0xa75600b3: mov    %esp,%eax
  0xa75600b5: shr    $0xc,%eax
  0xa75600b8: mov    -0x4871aba0(,%eax,4),%eax
  0xa75600bf: cmp    %eax,%edi
  0xa75600c1: je     0xa75600d8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75600c7: push   $0xb74acf8c
  0xa75600cc: call   0xa75600d1
  0xa75600d1: pusha  
  0xa75600d2: call   0xb6ff5f32
  0xa75600d7: hlt    
  0xa75600d8: pop    %eax
  0xa75600d9: movl   $0x0,0x140(%edi)
  0xa75600e3: movl   $0x0,0x148(%edi)
  0xa75600ed: movl   $0x0,0x144(%edi)
  0xa75600f7: cmpl   $0x0,0x4(%edi)
  0xa75600fe: jne    0xa7556400
  0xa7560104: mov    -0x1c(%ebp),%esi
  0xa7560107: mov    -0x18(%ebp),%edi
  0xa756010a: ret    
  0xa756010b: push   $0xb7302e8b
  0xa7560110: call   0xa7560115
  0xa7560115: pusha  
  0xa7560116: call   0xb6ff5f32
  0xa756011b: hlt    
  0xa756011c: movzbl 0x5(%esi),%ebx
  0xa7560120: add    $0x5,%esi
  0xa7560123: jmp    *-0x48723ee0(,%ebx,4)
  0xa756012a: movl   $0x0,-0x8(%ebp)
  0xa7560131: mov    -0x1c(%ebp),%esi
  0xa7560134: mov    -0x18(%ebp),%edi
  0xa7560137: mov    %esp,%ecx
  0xa7560139: shr    $0xc,%ecx
  0xa756013c: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560143: cmpl   $0x0,0x4(%ecx)
  0xa756014a: je     0xa756020a
  0xa7560150: call   0xa756015a
  0xa7560155: jmp    0xa75601f9
  0xa756015a: lea    0x4(%esp),%eax
  0xa756015e: cmpl   $0x0,-0x8(%ebp)
  0xa7560165: je     0xa756017c
  0xa756016b: push   $0xb7449b58
  0xa7560170: call   0xa7560175
  0xa7560175: pusha  
  0xa7560176: call   0xb6ff5f32
  0xa756017b: hlt    
  0xa756017c: mov    %esi,-0x1c(%ebp)
  0xa756017f: mov    %esp,%edi
  0xa7560181: shr    $0xc,%edi
  0xa7560184: mov    -0x4871aba0(,%edi,4),%edi
  0xa756018b: push   %edi
  0xa756018c: mov    %ebp,0x148(%edi)
  0xa7560192: mov    %eax,0x140(%edi)
  0xa7560198: call   0xb6e5e068
  0xa756019d: add    $0x4,%esp
  0xa75601a0: push   %eax
  0xa75601a1: mov    %esp,%eax
  0xa75601a3: shr    $0xc,%eax
  0xa75601a6: mov    -0x4871aba0(,%eax,4),%eax
  0xa75601ad: cmp    %eax,%edi
  0xa75601af: je     0xa75601c6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75601b5: push   $0xb74acf8c
  0xa75601ba: call   0xa75601bf
  0xa75601bf: pusha  
  0xa75601c0: call   0xb6ff5f32
  0xa75601c5: hlt    
  0xa75601c6: pop    %eax
  0xa75601c7: movl   $0x0,0x140(%edi)
  0xa75601d1: movl   $0x0,0x148(%edi)
  0xa75601db: movl   $0x0,0x144(%edi)
  0xa75601e5: cmpl   $0x0,0x4(%edi)
  0xa75601ec: jne    0xa7556400
  0xa75601f2: mov    -0x1c(%ebp),%esi
  0xa75601f5: mov    -0x18(%ebp),%edi
  0xa75601f8: ret    
  0xa75601f9: push   $0xb7302e8b
  0xa75601fe: call   0xa7560203
  0xa7560203: pusha  
  0xa7560204: call   0xb6ff5f32
  0xa7560209: hlt    
  0xa756020a: movzbl 0x5(%esi),%ebx
  0xa756020e: add    $0x5,%esi
  0xa7560211: jmp    *-0x48723ee0(,%ebx,4)
  0xa7560218: movl   $0x0,-0x8(%ebp)
  0xa756021f: mov    -0x1c(%ebp),%esi
  0xa7560222: mov    -0x18(%ebp),%edi
  0xa7560225: mov    %esp,%ecx
  0xa7560227: shr    $0xc,%ecx
  0xa756022a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560231: cmpl   $0x0,0x4(%ecx)
  0xa7560238: je     0xa75602f8
  0xa756023e: call   0xa7560248
  0xa7560243: jmp    0xa75602e7
  0xa7560248: lea    0x4(%esp),%eax
  0xa756024c: cmpl   $0x0,-0x8(%ebp)
  0xa7560253: je     0xa756026a
  0xa7560259: push   $0xb7449b58
  0xa756025e: call   0xa7560263
  0xa7560263: pusha  
  0xa7560264: call   0xb6ff5f32
  0xa7560269: hlt    
  0xa756026a: mov    %esi,-0x1c(%ebp)
  0xa756026d: mov    %esp,%edi
  0xa756026f: shr    $0xc,%edi
  0xa7560272: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560279: push   %edi
  0xa756027a: mov    %ebp,0x148(%edi)
  0xa7560280: mov    %eax,0x140(%edi)
  0xa7560286: call   0xb6e5e068
  0xa756028b: add    $0x4,%esp
  0xa756028e: push   %eax
  0xa756028f: mov    %esp,%eax
  0xa7560291: shr    $0xc,%eax
  0xa7560294: mov    -0x4871aba0(,%eax,4),%eax
  0xa756029b: cmp    %eax,%edi
  0xa756029d: je     0xa75602b4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75602a3: push   $0xb74acf8c
  0xa75602a8: call   0xa75602ad
  0xa75602ad: pusha  
  0xa75602ae: call   0xb6ff5f32
  0xa75602b3: hlt    
  0xa75602b4: pop    %eax
  0xa75602b5: movl   $0x0,0x140(%edi)
  0xa75602bf: movl   $0x0,0x148(%edi)
  0xa75602c9: movl   $0x0,0x144(%edi)
  0xa75602d3: cmpl   $0x0,0x4(%edi)
  0xa75602da: jne    0xa7556400
  0xa75602e0: mov    -0x1c(%ebp),%esi
  0xa75602e3: mov    -0x18(%ebp),%edi
  0xa75602e6: ret    
  0xa75602e7: push   $0xb7302e8b
  0xa75602ec: call   0xa75602f1
  0xa75602f1: pusha  
  0xa75602f2: call   0xb6ff5f32
  0xa75602f7: hlt    
  0xa75602f8: movzbl 0x5(%esi),%ebx
  0xa75602fc: add    $0x5,%esi
  0xa75602ff: jmp    *-0x48723ee0(,%ebx,4)
  0xa7560306: movl   $0x0,-0x8(%ebp)
  0xa756030d: mov    -0x1c(%ebp),%esi
  0xa7560310: mov    -0x18(%ebp),%edi
  0xa7560313: mov    %esp,%ecx
  0xa7560315: shr    $0xc,%ecx
  0xa7560318: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756031f: cmpl   $0x0,0x4(%ecx)
  0xa7560326: je     0xa75603e6
  0xa756032c: call   0xa7560336
  0xa7560331: jmp    0xa75603d5
  0xa7560336: lea    0x4(%esp),%eax
  0xa756033a: cmpl   $0x0,-0x8(%ebp)
  0xa7560341: je     0xa7560358
  0xa7560347: push   $0xb7449b58
  0xa756034c: call   0xa7560351
  0xa7560351: pusha  
  0xa7560352: call   0xb6ff5f32
  0xa7560357: hlt    
  0xa7560358: mov    %esi,-0x1c(%ebp)
  0xa756035b: mov    %esp,%edi
  0xa756035d: shr    $0xc,%edi
  0xa7560360: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560367: push   %edi
  0xa7560368: mov    %ebp,0x148(%edi)
  0xa756036e: mov    %eax,0x140(%edi)
  0xa7560374: call   0xb6e5e068
  0xa7560379: add    $0x4,%esp
  0xa756037c: push   %eax
  0xa756037d: mov    %esp,%eax
  0xa756037f: shr    $0xc,%eax
  0xa7560382: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560389: cmp    %eax,%edi
  0xa756038b: je     0xa75603a2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560391: push   $0xb74acf8c
  0xa7560396: call   0xa756039b
  0xa756039b: pusha  
  0xa756039c: call   0xb6ff5f32
  0xa75603a1: hlt    
  0xa75603a2: pop    %eax
  0xa75603a3: movl   $0x0,0x140(%edi)
  0xa75603ad: movl   $0x0,0x148(%edi)
  0xa75603b7: movl   $0x0,0x144(%edi)
  0xa75603c1: cmpl   $0x0,0x4(%edi)
  0xa75603c8: jne    0xa7556400
  0xa75603ce: mov    -0x1c(%ebp),%esi
  0xa75603d1: mov    -0x18(%ebp),%edi
  0xa75603d4: ret    
  0xa75603d5: push   $0xb7302e8b
  0xa75603da: call   0xa75603df
  0xa75603df: pusha  
  0xa75603e0: call   0xb6ff5f32
  0xa75603e5: hlt    
  0xa75603e6: movzbl 0x5(%esi),%ebx
  0xa75603ea: add    $0x5,%esi
  0xa75603ed: jmp    *-0x48723ee0(,%ebx,4)
  0xa75603f4: movl   $0x0,-0x8(%ebp)
  0xa75603fb: mov    -0x1c(%ebp),%esi
  0xa75603fe: mov    -0x18(%ebp),%edi
  0xa7560401: mov    %esp,%ecx
  0xa7560403: shr    $0xc,%ecx
  0xa7560406: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756040d: cmpl   $0x0,0x4(%ecx)
  0xa7560414: je     0xa75604d4
  0xa756041a: call   0xa7560424
  0xa756041f: jmp    0xa75604c3
  0xa7560424: lea    0x4(%esp),%eax
  0xa7560428: cmpl   $0x0,-0x8(%ebp)
  0xa756042f: je     0xa7560446
  0xa7560435: push   $0xb7449b58
  0xa756043a: call   0xa756043f
  0xa756043f: pusha  
  0xa7560440: call   0xb6ff5f32
  0xa7560445: hlt    
  0xa7560446: mov    %esi,-0x1c(%ebp)
  0xa7560449: mov    %esp,%edi
  0xa756044b: shr    $0xc,%edi
  0xa756044e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560455: push   %edi
  0xa7560456: mov    %ebp,0x148(%edi)
  0xa756045c: mov    %eax,0x140(%edi)
  0xa7560462: call   0xb6e5e068
  0xa7560467: add    $0x4,%esp
  0xa756046a: push   %eax
  0xa756046b: mov    %esp,%eax
  0xa756046d: shr    $0xc,%eax
  0xa7560470: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560477: cmp    %eax,%edi
  0xa7560479: je     0xa7560490
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756047f: push   $0xb74acf8c
  0xa7560484: call   0xa7560489
  0xa7560489: pusha  
  0xa756048a: call   0xb6ff5f32
  0xa756048f: hlt    
  0xa7560490: pop    %eax
  0xa7560491: movl   $0x0,0x140(%edi)
  0xa756049b: movl   $0x0,0x148(%edi)
  0xa75604a5: movl   $0x0,0x144(%edi)
  0xa75604af: cmpl   $0x0,0x4(%edi)
  0xa75604b6: jne    0xa7556400
  0xa75604bc: mov    -0x1c(%ebp),%esi
  0xa75604bf: mov    -0x18(%ebp),%edi
  0xa75604c2: ret    
  0xa75604c3: push   $0xb7302e8b
  0xa75604c8: call   0xa75604cd
  0xa75604cd: pusha  
  0xa75604ce: call   0xb6ff5f32
  0xa75604d3: hlt    
  0xa75604d4: movzbl 0x6(%esi),%ebx
  0xa75604d8: add    $0x6,%esi
  0xa75604db: jmp    *-0x48722ae0(,%ebx,4)
  0xa75604e2: sub    $0x8,%esp
  0xa75604e5: vmovsd %xmm0,(%esp)
  0xa75604ea: fldl   (%esp)
  0xa75604ed: add    $0x8,%esp
  0xa75604f0: movl   $0x0,-0x8(%ebp)
  0xa75604f7: mov    -0x1c(%ebp),%esi
  0xa75604fa: mov    -0x18(%ebp),%edi
  0xa75604fd: mov    %esp,%ecx
  0xa75604ff: shr    $0xc,%ecx
  0xa7560502: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560509: cmpl   $0x0,0x4(%ecx)
  0xa7560510: je     0xa75605d0
  0xa7560516: call   0xa7560520
  0xa756051b: jmp    0xa75605bf
  0xa7560520: lea    0x4(%esp),%eax
  0xa7560524: cmpl   $0x0,-0x8(%ebp)
  0xa756052b: je     0xa7560542
  0xa7560531: push   $0xb7449b58
  0xa7560536: call   0xa756053b
  0xa756053b: pusha  
  0xa756053c: call   0xb6ff5f32
  0xa7560541: hlt    
  0xa7560542: mov    %esi,-0x1c(%ebp)
  0xa7560545: mov    %esp,%edi
  0xa7560547: shr    $0xc,%edi
  0xa756054a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560551: push   %edi
  0xa7560552: mov    %ebp,0x148(%edi)
  0xa7560558: mov    %eax,0x140(%edi)
  0xa756055e: call   0xb6e5e068
  0xa7560563: add    $0x4,%esp
  0xa7560566: push   %eax
  0xa7560567: mov    %esp,%eax
  0xa7560569: shr    $0xc,%eax
  0xa756056c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560573: cmp    %eax,%edi
  0xa7560575: je     0xa756058c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756057b: push   $0xb74acf8c
  0xa7560580: call   0xa7560585
  0xa7560585: pusha  
  0xa7560586: call   0xb6ff5f32
  0xa756058b: hlt    
  0xa756058c: pop    %eax
  0xa756058d: movl   $0x0,0x140(%edi)
  0xa7560597: movl   $0x0,0x148(%edi)
  0xa75605a1: movl   $0x0,0x144(%edi)
  0xa75605ab: cmpl   $0x0,0x4(%edi)
  0xa75605b2: jne    0xa7556400
  0xa75605b8: mov    -0x1c(%ebp),%esi
  0xa75605bb: mov    -0x18(%ebp),%edi
  0xa75605be: ret    
  0xa75605bf: push   $0xb7302e8b
  0xa75605c4: call   0xa75605c9
  0xa75605c9: pusha  
  0xa75605ca: call   0xb6ff5f32
  0xa75605cf: hlt    
  0xa75605d0: movzbl 0x6(%esi),%ebx
  0xa75605d4: add    $0x6,%esi
  0xa75605d7: jmp    *-0x487232e0(,%ebx,4)
  0xa75605de: sub    $0x4,%esp
  0xa75605e1: vmovss %xmm0,(%esp)
  0xa75605e6: flds   (%esp)
  0xa75605e9: add    $0x4,%esp
  0xa75605ec: movl   $0x0,-0x8(%ebp)
  0xa75605f3: mov    -0x1c(%ebp),%esi
  0xa75605f6: mov    -0x18(%ebp),%edi
  0xa75605f9: mov    %esp,%ecx
  0xa75605fb: shr    $0xc,%ecx
  0xa75605fe: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560605: cmpl   $0x0,0x4(%ecx)
  0xa756060c: je     0xa75606cc
  0xa7560612: call   0xa756061c
  0xa7560617: jmp    0xa75606bb
  0xa756061c: lea    0x4(%esp),%eax
  0xa7560620: cmpl   $0x0,-0x8(%ebp)
  0xa7560627: je     0xa756063e
  0xa756062d: push   $0xb7449b58
  0xa7560632: call   0xa7560637
  0xa7560637: pusha  
  0xa7560638: call   0xb6ff5f32
  0xa756063d: hlt    
  0xa756063e: mov    %esi,-0x1c(%ebp)
  0xa7560641: mov    %esp,%edi
  0xa7560643: shr    $0xc,%edi
  0xa7560646: mov    -0x4871aba0(,%edi,4),%edi
  0xa756064d: push   %edi
  0xa756064e: mov    %ebp,0x148(%edi)
  0xa7560654: mov    %eax,0x140(%edi)
  0xa756065a: call   0xb6e5e068
  0xa756065f: add    $0x4,%esp
  0xa7560662: push   %eax
  0xa7560663: mov    %esp,%eax
  0xa7560665: shr    $0xc,%eax
  0xa7560668: mov    -0x4871aba0(,%eax,4),%eax
  0xa756066f: cmp    %eax,%edi
  0xa7560671: je     0xa7560688
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560677: push   $0xb74acf8c
  0xa756067c: call   0xa7560681
  0xa7560681: pusha  
  0xa7560682: call   0xb6ff5f32
  0xa7560687: hlt    
  0xa7560688: pop    %eax
  0xa7560689: movl   $0x0,0x140(%edi)
  0xa7560693: movl   $0x0,0x148(%edi)
  0xa756069d: movl   $0x0,0x144(%edi)
  0xa75606a7: cmpl   $0x0,0x4(%edi)
  0xa75606ae: jne    0xa7556400
  0xa75606b4: mov    -0x1c(%ebp),%esi
  0xa75606b7: mov    -0x18(%ebp),%edi
  0xa75606ba: ret    
  0xa75606bb: push   $0xb7302e8b
  0xa75606c0: call   0xa75606c5
  0xa75606c5: pusha  
  0xa75606c6: call   0xb6ff5f32
  0xa75606cb: hlt    
  0xa75606cc: movzbl 0x6(%esi),%ebx
  0xa75606d0: add    $0x6,%esi
  0xa75606d3: jmp    *-0x487236e0(,%ebx,4)
  0xa75606da: movl   $0x0,-0x8(%ebp)
  0xa75606e1: mov    -0x1c(%ebp),%esi
  0xa75606e4: mov    -0x18(%ebp),%edi
  0xa75606e7: mov    %esp,%ecx
  0xa75606e9: shr    $0xc,%ecx
  0xa75606ec: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75606f3: cmpl   $0x0,0x4(%ecx)
  0xa75606fa: je     0xa75607ba
  0xa7560700: call   0xa756070a
  0xa7560705: jmp    0xa75607a9
  0xa756070a: lea    0x4(%esp),%eax
  0xa756070e: cmpl   $0x0,-0x8(%ebp)
  0xa7560715: je     0xa756072c
  0xa756071b: push   $0xb7449b58
  0xa7560720: call   0xa7560725
  0xa7560725: pusha  
  0xa7560726: call   0xb6ff5f32
  0xa756072b: hlt    
  0xa756072c: mov    %esi,-0x1c(%ebp)
  0xa756072f: mov    %esp,%edi
  0xa7560731: shr    $0xc,%edi
  0xa7560734: mov    -0x4871aba0(,%edi,4),%edi
  0xa756073b: push   %edi
  0xa756073c: mov    %ebp,0x148(%edi)
  0xa7560742: mov    %eax,0x140(%edi)
  0xa7560748: call   0xb6e5e068
  0xa756074d: add    $0x4,%esp
  0xa7560750: push   %eax
  0xa7560751: mov    %esp,%eax
  0xa7560753: shr    $0xc,%eax
  0xa7560756: mov    -0x4871aba0(,%eax,4),%eax
  0xa756075d: cmp    %eax,%edi
  0xa756075f: je     0xa7560776
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560765: push   $0xb74acf8c
  0xa756076a: call   0xa756076f
  0xa756076f: pusha  
  0xa7560770: call   0xb6ff5f32
  0xa7560775: hlt    
  0xa7560776: pop    %eax
  0xa7560777: movl   $0x0,0x140(%edi)
  0xa7560781: movl   $0x0,0x148(%edi)
  0xa756078b: movl   $0x0,0x144(%edi)
  0xa7560795: cmpl   $0x0,0x4(%edi)
  0xa756079c: jne    0xa7556400
  0xa75607a2: mov    -0x1c(%ebp),%esi
  0xa75607a5: mov    -0x18(%ebp),%edi
  0xa75607a8: ret    
  0xa75607a9: push   $0xb7302e8b
  0xa75607ae: call   0xa75607b3
  0xa75607b3: pusha  
  0xa75607b4: call   0xb6ff5f32
  0xa75607b9: hlt    
  0xa75607ba: movzbl 0x6(%esi),%ebx
  0xa75607be: add    $0x6,%esi
  0xa75607c1: jmp    *-0x48723ae0(,%ebx,4)
  0xa75607c8: movl   $0x0,-0x8(%ebp)
  0xa75607cf: mov    -0x1c(%ebp),%esi
  0xa75607d2: mov    -0x18(%ebp),%edi
  0xa75607d5: mov    %esp,%ecx
  0xa75607d7: shr    $0xc,%ecx
  0xa75607da: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75607e1: cmpl   $0x0,0x4(%ecx)
  0xa75607e8: je     0xa75608a8
  0xa75607ee: call   0xa75607f8
  0xa75607f3: jmp    0xa7560897
  0xa75607f8: lea    0x4(%esp),%eax
  0xa75607fc: cmpl   $0x0,-0x8(%ebp)
  0xa7560803: je     0xa756081a
  0xa7560809: push   $0xb7449b58
  0xa756080e: call   0xa7560813
  0xa7560813: pusha  
  0xa7560814: call   0xb6ff5f32
  0xa7560819: hlt    
  0xa756081a: mov    %esi,-0x1c(%ebp)
  0xa756081d: mov    %esp,%edi
  0xa756081f: shr    $0xc,%edi
  0xa7560822: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560829: push   %edi
  0xa756082a: mov    %ebp,0x148(%edi)
  0xa7560830: mov    %eax,0x140(%edi)
  0xa7560836: call   0xb6e5e068
  0xa756083b: add    $0x4,%esp
  0xa756083e: push   %eax
  0xa756083f: mov    %esp,%eax
  0xa7560841: shr    $0xc,%eax
  0xa7560844: mov    -0x4871aba0(,%eax,4),%eax
  0xa756084b: cmp    %eax,%edi
  0xa756084d: je     0xa7560864
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560853: push   $0xb74acf8c
  0xa7560858: call   0xa756085d
  0xa756085d: pusha  
  0xa756085e: call   0xb6ff5f32
  0xa7560863: hlt    
  0xa7560864: pop    %eax
  0xa7560865: movl   $0x0,0x140(%edi)
  0xa756086f: movl   $0x0,0x148(%edi)
  0xa7560879: movl   $0x0,0x144(%edi)
  0xa7560883: cmpl   $0x0,0x4(%edi)
  0xa756088a: jne    0xa7556400
  0xa7560890: mov    -0x1c(%ebp),%esi
  0xa7560893: mov    -0x18(%ebp),%edi
  0xa7560896: ret    
  0xa7560897: push   $0xb7302e8b
  0xa756089c: call   0xa75608a1
  0xa75608a1: pusha  
  0xa75608a2: call   0xb6ff5f32
  0xa75608a7: hlt    
  0xa75608a8: movzbl 0x6(%esi),%ebx
  0xa75608ac: add    $0x6,%esi
  0xa75608af: jmp    *-0x48723ee0(,%ebx,4)
  0xa75608b6: movl   $0x0,-0x8(%ebp)
  0xa75608bd: mov    -0x1c(%ebp),%esi
  0xa75608c0: mov    -0x18(%ebp),%edi
  0xa75608c3: mov    %esp,%ecx
  0xa75608c5: shr    $0xc,%ecx
  0xa75608c8: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75608cf: cmpl   $0x0,0x4(%ecx)
  0xa75608d6: je     0xa7560996
  0xa75608dc: call   0xa75608e6
  0xa75608e1: jmp    0xa7560985
  0xa75608e6: lea    0x4(%esp),%eax
  0xa75608ea: cmpl   $0x0,-0x8(%ebp)
  0xa75608f1: je     0xa7560908
  0xa75608f7: push   $0xb7449b58
  0xa75608fc: call   0xa7560901
  0xa7560901: pusha  
  0xa7560902: call   0xb6ff5f32
  0xa7560907: hlt    
  0xa7560908: mov    %esi,-0x1c(%ebp)
  0xa756090b: mov    %esp,%edi
  0xa756090d: shr    $0xc,%edi
  0xa7560910: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560917: push   %edi
  0xa7560918: mov    %ebp,0x148(%edi)
  0xa756091e: mov    %eax,0x140(%edi)
  0xa7560924: call   0xb6e5e068
  0xa7560929: add    $0x4,%esp
  0xa756092c: push   %eax
  0xa756092d: mov    %esp,%eax
  0xa756092f: shr    $0xc,%eax
  0xa7560932: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560939: cmp    %eax,%edi
  0xa756093b: je     0xa7560952
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560941: push   $0xb74acf8c
  0xa7560946: call   0xa756094b
  0xa756094b: pusha  
  0xa756094c: call   0xb6ff5f32
  0xa7560951: hlt    
  0xa7560952: pop    %eax
  0xa7560953: movl   $0x0,0x140(%edi)
  0xa756095d: movl   $0x0,0x148(%edi)
  0xa7560967: movl   $0x0,0x144(%edi)
  0xa7560971: cmpl   $0x0,0x4(%edi)
  0xa7560978: jne    0xa7556400
  0xa756097e: mov    -0x1c(%ebp),%esi
  0xa7560981: mov    -0x18(%ebp),%edi
  0xa7560984: ret    
  0xa7560985: push   $0xb7302e8b
  0xa756098a: call   0xa756098f
  0xa756098f: pusha  
  0xa7560990: call   0xb6ff5f32
  0xa7560995: hlt    
  0xa7560996: movzbl 0x6(%esi),%ebx
  0xa756099a: add    $0x6,%esi
  0xa756099d: jmp    *-0x48722ee0(,%ebx,4)
  0xa75609a4: movl   $0x0,-0x8(%ebp)
  0xa75609ab: mov    -0x1c(%ebp),%esi
  0xa75609ae: mov    -0x18(%ebp),%edi
  0xa75609b1: mov    %esp,%ecx
  0xa75609b3: shr    $0xc,%ecx
  0xa75609b6: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75609bd: cmpl   $0x0,0x4(%ecx)
  0xa75609c4: je     0xa7560a84
  0xa75609ca: call   0xa75609d4
  0xa75609cf: jmp    0xa7560a73
  0xa75609d4: lea    0x4(%esp),%eax
  0xa75609d8: cmpl   $0x0,-0x8(%ebp)
  0xa75609df: je     0xa75609f6
  0xa75609e5: push   $0xb7449b58
  0xa75609ea: call   0xa75609ef
  0xa75609ef: pusha  
  0xa75609f0: call   0xb6ff5f32
  0xa75609f5: hlt    
  0xa75609f6: mov    %esi,-0x1c(%ebp)
  0xa75609f9: mov    %esp,%edi
  0xa75609fb: shr    $0xc,%edi
  0xa75609fe: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560a05: push   %edi
  0xa7560a06: mov    %ebp,0x148(%edi)
  0xa7560a0c: mov    %eax,0x140(%edi)
  0xa7560a12: call   0xb6e5e068
  0xa7560a17: add    $0x4,%esp
  0xa7560a1a: push   %eax
  0xa7560a1b: mov    %esp,%eax
  0xa7560a1d: shr    $0xc,%eax
  0xa7560a20: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560a27: cmp    %eax,%edi
  0xa7560a29: je     0xa7560a40
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560a2f: push   $0xb74acf8c
  0xa7560a34: call   0xa7560a39
  0xa7560a39: pusha  
  0xa7560a3a: call   0xb6ff5f32
  0xa7560a3f: hlt    
  0xa7560a40: pop    %eax
  0xa7560a41: movl   $0x0,0x140(%edi)
  0xa7560a4b: movl   $0x0,0x148(%edi)
  0xa7560a55: movl   $0x0,0x144(%edi)
  0xa7560a5f: cmpl   $0x0,0x4(%edi)
  0xa7560a66: jne    0xa7556400
  0xa7560a6c: mov    -0x1c(%ebp),%esi
  0xa7560a6f: mov    -0x18(%ebp),%edi
  0xa7560a72: ret    
  0xa7560a73: push   $0xb7302e8b
  0xa7560a78: call   0xa7560a7d
  0xa7560a7d: pusha  
  0xa7560a7e: call   0xb6ff5f32
  0xa7560a83: hlt    
  0xa7560a84: movzbl 0x6(%esi),%ebx
  0xa7560a88: add    $0x6,%esi
  0xa7560a8b: jmp    *-0x48723ee0(,%ebx,4)
  0xa7560a92: movl   $0x0,-0x8(%ebp)
  0xa7560a99: mov    -0x1c(%ebp),%esi
  0xa7560a9c: mov    -0x18(%ebp),%edi
  0xa7560a9f: mov    %esp,%ecx
  0xa7560aa1: shr    $0xc,%ecx
  0xa7560aa4: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560aab: cmpl   $0x0,0x4(%ecx)
  0xa7560ab2: je     0xa7560b72
  0xa7560ab8: call   0xa7560ac2
  0xa7560abd: jmp    0xa7560b61
  0xa7560ac2: lea    0x4(%esp),%eax
  0xa7560ac6: cmpl   $0x0,-0x8(%ebp)
  0xa7560acd: je     0xa7560ae4
  0xa7560ad3: push   $0xb7449b58
  0xa7560ad8: call   0xa7560add
  0xa7560add: pusha  
  0xa7560ade: call   0xb6ff5f32
  0xa7560ae3: hlt    
  0xa7560ae4: mov    %esi,-0x1c(%ebp)
  0xa7560ae7: mov    %esp,%edi
  0xa7560ae9: shr    $0xc,%edi
  0xa7560aec: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560af3: push   %edi
  0xa7560af4: mov    %ebp,0x148(%edi)
  0xa7560afa: mov    %eax,0x140(%edi)
  0xa7560b00: call   0xb6e5e068
  0xa7560b05: add    $0x4,%esp
  0xa7560b08: push   %eax
  0xa7560b09: mov    %esp,%eax
  0xa7560b0b: shr    $0xc,%eax
  0xa7560b0e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560b15: cmp    %eax,%edi
  0xa7560b17: je     0xa7560b2e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560b1d: push   $0xb74acf8c
  0xa7560b22: call   0xa7560b27
  0xa7560b27: pusha  
  0xa7560b28: call   0xb6ff5f32
  0xa7560b2d: hlt    
  0xa7560b2e: pop    %eax
  0xa7560b2f: movl   $0x0,0x140(%edi)
  0xa7560b39: movl   $0x0,0x148(%edi)
  0xa7560b43: movl   $0x0,0x144(%edi)
  0xa7560b4d: cmpl   $0x0,0x4(%edi)
  0xa7560b54: jne    0xa7556400
  0xa7560b5a: mov    -0x1c(%ebp),%esi
  0xa7560b5d: mov    -0x18(%ebp),%edi
  0xa7560b60: ret    
  0xa7560b61: push   $0xb7302e8b
  0xa7560b66: call   0xa7560b6b
  0xa7560b6b: pusha  
  0xa7560b6c: call   0xb6ff5f32
  0xa7560b71: hlt    
  0xa7560b72: movzbl 0x6(%esi),%ebx
  0xa7560b76: add    $0x6,%esi
  0xa7560b79: jmp    *-0x48723ee0(,%ebx,4)
  0xa7560b80: movl   $0x0,-0x8(%ebp)
  0xa7560b87: mov    -0x1c(%ebp),%esi
  0xa7560b8a: mov    -0x18(%ebp),%edi
  0xa7560b8d: mov    %esp,%ecx
  0xa7560b8f: shr    $0xc,%ecx
  0xa7560b92: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560b99: cmpl   $0x0,0x4(%ecx)
  0xa7560ba0: je     0xa7560c60
  0xa7560ba6: call   0xa7560bb0
  0xa7560bab: jmp    0xa7560c4f
  0xa7560bb0: lea    0x4(%esp),%eax
  0xa7560bb4: cmpl   $0x0,-0x8(%ebp)
  0xa7560bbb: je     0xa7560bd2
  0xa7560bc1: push   $0xb7449b58
  0xa7560bc6: call   0xa7560bcb
  0xa7560bcb: pusha  
  0xa7560bcc: call   0xb6ff5f32
  0xa7560bd1: hlt    
  0xa7560bd2: mov    %esi,-0x1c(%ebp)
  0xa7560bd5: mov    %esp,%edi
  0xa7560bd7: shr    $0xc,%edi
  0xa7560bda: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560be1: push   %edi
  0xa7560be2: mov    %ebp,0x148(%edi)
  0xa7560be8: mov    %eax,0x140(%edi)
  0xa7560bee: call   0xb6e5e068
  0xa7560bf3: add    $0x4,%esp
  0xa7560bf6: push   %eax
  0xa7560bf7: mov    %esp,%eax
  0xa7560bf9: shr    $0xc,%eax
  0xa7560bfc: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560c03: cmp    %eax,%edi
  0xa7560c05: je     0xa7560c1c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560c0b: push   $0xb74acf8c
  0xa7560c10: call   0xa7560c15
  0xa7560c15: pusha  
  0xa7560c16: call   0xb6ff5f32
  0xa7560c1b: hlt    
  0xa7560c1c: pop    %eax
  0xa7560c1d: movl   $0x0,0x140(%edi)
  0xa7560c27: movl   $0x0,0x148(%edi)
  0xa7560c31: movl   $0x0,0x144(%edi)
  0xa7560c3b: cmpl   $0x0,0x4(%edi)
  0xa7560c42: jne    0xa7556400
  0xa7560c48: mov    -0x1c(%ebp),%esi
  0xa7560c4b: mov    -0x18(%ebp),%edi
  0xa7560c4e: ret    
  0xa7560c4f: push   $0xb7302e8b
  0xa7560c54: call   0xa7560c59
  0xa7560c59: pusha  
  0xa7560c5a: call   0xb6ff5f32
  0xa7560c5f: hlt    
  0xa7560c60: movzbl 0x6(%esi),%ebx
  0xa7560c64: add    $0x6,%esi
  0xa7560c67: jmp    *-0x48723ee0(,%ebx,4)
  0xa7560c6e: movl   $0x0,-0x8(%ebp)
  0xa7560c75: mov    -0x1c(%ebp),%esi
  0xa7560c78: mov    -0x18(%ebp),%edi
  0xa7560c7b: mov    %esp,%ecx
  0xa7560c7d: shr    $0xc,%ecx
  0xa7560c80: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560c87: cmpl   $0x0,0x4(%ecx)
  0xa7560c8e: je     0xa7560d4e
  0xa7560c94: call   0xa7560c9e
  0xa7560c99: jmp    0xa7560d3d
  0xa7560c9e: lea    0x4(%esp),%eax
  0xa7560ca2: cmpl   $0x0,-0x8(%ebp)
  0xa7560ca9: je     0xa7560cc0
  0xa7560caf: push   $0xb7449b58
  0xa7560cb4: call   0xa7560cb9
  0xa7560cb9: pusha  
  0xa7560cba: call   0xb6ff5f32
  0xa7560cbf: hlt    
  0xa7560cc0: mov    %esi,-0x1c(%ebp)
  0xa7560cc3: mov    %esp,%edi
  0xa7560cc5: shr    $0xc,%edi
  0xa7560cc8: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560ccf: push   %edi
  0xa7560cd0: mov    %ebp,0x148(%edi)
  0xa7560cd6: mov    %eax,0x140(%edi)
  0xa7560cdc: call   0xb6e5e068
  0xa7560ce1: add    $0x4,%esp
  0xa7560ce4: push   %eax
  0xa7560ce5: mov    %esp,%eax
  0xa7560ce7: shr    $0xc,%eax
  0xa7560cea: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560cf1: cmp    %eax,%edi
  0xa7560cf3: je     0xa7560d0a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560cf9: push   $0xb74acf8c
  0xa7560cfe: call   0xa7560d03
  0xa7560d03: pusha  
  0xa7560d04: call   0xb6ff5f32
  0xa7560d09: hlt    
  0xa7560d0a: pop    %eax
  0xa7560d0b: movl   $0x0,0x140(%edi)
  0xa7560d15: movl   $0x0,0x148(%edi)
  0xa7560d1f: movl   $0x0,0x144(%edi)
  0xa7560d29: cmpl   $0x0,0x4(%edi)
  0xa7560d30: jne    0xa7556400
  0xa7560d36: mov    -0x1c(%ebp),%esi
  0xa7560d39: mov    -0x18(%ebp),%edi
  0xa7560d3c: ret    
  0xa7560d3d: push   $0xb7302e8b
  0xa7560d42: call   0xa7560d47
  0xa7560d47: pusha  
  0xa7560d48: call   0xb6ff5f32
  0xa7560d4d: hlt    
  0xa7560d4e: movzbl 0x6(%esi),%ebx
  0xa7560d52: add    $0x6,%esi
  0xa7560d55: jmp    *-0x48723ee0(,%ebx,4)
  0xa7560d5c: movl   $0x0,-0x8(%ebp)
  0xa7560d63: mov    -0x1c(%ebp),%esi
  0xa7560d66: mov    -0x18(%ebp),%edi
  0xa7560d69: mov    %esp,%ecx
  0xa7560d6b: shr    $0xc,%ecx
  0xa7560d6e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560d75: cmpl   $0x0,0x4(%ecx)
  0xa7560d7c: je     0xa7560e3c
  0xa7560d82: call   0xa7560d8c
  0xa7560d87: jmp    0xa7560e2b
  0xa7560d8c: lea    0x4(%esp),%eax
  0xa7560d90: cmpl   $0x0,-0x8(%ebp)
  0xa7560d97: je     0xa7560dae
  0xa7560d9d: push   $0xb7449b58
  0xa7560da2: call   0xa7560da7
  0xa7560da7: pusha  
  0xa7560da8: call   0xb6ff5f32
  0xa7560dad: hlt    
  0xa7560dae: mov    %esi,-0x1c(%ebp)
  0xa7560db1: mov    %esp,%edi
  0xa7560db3: shr    $0xc,%edi
  0xa7560db6: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560dbd: push   %edi
  0xa7560dbe: mov    %ebp,0x148(%edi)
  0xa7560dc4: mov    %eax,0x140(%edi)
  0xa7560dca: call   0xb6e5e068
  0xa7560dcf: add    $0x4,%esp
  0xa7560dd2: push   %eax
  0xa7560dd3: mov    %esp,%eax
  0xa7560dd5: shr    $0xc,%eax
  0xa7560dd8: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560ddf: cmp    %eax,%edi
  0xa7560de1: je     0xa7560df8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560de7: push   $0xb74acf8c
  0xa7560dec: call   0xa7560df1
  0xa7560df1: pusha  
  0xa7560df2: call   0xb6ff5f32
  0xa7560df7: hlt    
  0xa7560df8: pop    %eax
  0xa7560df9: movl   $0x0,0x140(%edi)
  0xa7560e03: movl   $0x0,0x148(%edi)
  0xa7560e0d: movl   $0x0,0x144(%edi)
  0xa7560e17: cmpl   $0x0,0x4(%edi)
  0xa7560e1e: jne    0xa7556400
  0xa7560e24: mov    -0x1c(%ebp),%esi
  0xa7560e27: mov    -0x18(%ebp),%edi
  0xa7560e2a: ret    
  0xa7560e2b: push   $0xb7302e8b
  0xa7560e30: call   0xa7560e35
  0xa7560e35: pusha  
  0xa7560e36: call   0xb6ff5f32
  0xa7560e3b: hlt    
  0xa7560e3c: movzbl 0x7(%esi),%ebx
  0xa7560e40: add    $0x7,%esi
  0xa7560e43: jmp    *-0x48722ae0(,%ebx,4)
  0xa7560e4a: sub    $0x8,%esp
  0xa7560e4d: vmovsd %xmm0,(%esp)
  0xa7560e52: fldl   (%esp)
  0xa7560e55: add    $0x8,%esp
  0xa7560e58: movl   $0x0,-0x8(%ebp)
  0xa7560e5f: mov    -0x1c(%ebp),%esi
  0xa7560e62: mov    -0x18(%ebp),%edi
  0xa7560e65: mov    %esp,%ecx
  0xa7560e67: shr    $0xc,%ecx
  0xa7560e6a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560e71: cmpl   $0x0,0x4(%ecx)
  0xa7560e78: je     0xa7560f38
  0xa7560e7e: call   0xa7560e88
  0xa7560e83: jmp    0xa7560f27
  0xa7560e88: lea    0x4(%esp),%eax
  0xa7560e8c: cmpl   $0x0,-0x8(%ebp)
  0xa7560e93: je     0xa7560eaa
  0xa7560e99: push   $0xb7449b58
  0xa7560e9e: call   0xa7560ea3
  0xa7560ea3: pusha  
  0xa7560ea4: call   0xb6ff5f32
  0xa7560ea9: hlt    
  0xa7560eaa: mov    %esi,-0x1c(%ebp)
  0xa7560ead: mov    %esp,%edi
  0xa7560eaf: shr    $0xc,%edi
  0xa7560eb2: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560eb9: push   %edi
  0xa7560eba: mov    %ebp,0x148(%edi)
  0xa7560ec0: mov    %eax,0x140(%edi)
  0xa7560ec6: call   0xb6e5e068
  0xa7560ecb: add    $0x4,%esp
  0xa7560ece: push   %eax
  0xa7560ecf: mov    %esp,%eax
  0xa7560ed1: shr    $0xc,%eax
  0xa7560ed4: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560edb: cmp    %eax,%edi
  0xa7560edd: je     0xa7560ef4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560ee3: push   $0xb74acf8c
  0xa7560ee8: call   0xa7560eed
  0xa7560eed: pusha  
  0xa7560eee: call   0xb6ff5f32
  0xa7560ef3: hlt    
  0xa7560ef4: pop    %eax
  0xa7560ef5: movl   $0x0,0x140(%edi)
  0xa7560eff: movl   $0x0,0x148(%edi)
  0xa7560f09: movl   $0x0,0x144(%edi)
  0xa7560f13: cmpl   $0x0,0x4(%edi)
  0xa7560f1a: jne    0xa7556400
  0xa7560f20: mov    -0x1c(%ebp),%esi
  0xa7560f23: mov    -0x18(%ebp),%edi
  0xa7560f26: ret    
  0xa7560f27: push   $0xb7302e8b
  0xa7560f2c: call   0xa7560f31
  0xa7560f31: pusha  
  0xa7560f32: call   0xb6ff5f32
  0xa7560f37: hlt    
  0xa7560f38: movzbl 0x7(%esi),%ebx
  0xa7560f3c: add    $0x7,%esi
  0xa7560f3f: jmp    *-0x487232e0(,%ebx,4)
  0xa7560f46: sub    $0x4,%esp
  0xa7560f49: vmovss %xmm0,(%esp)
  0xa7560f4e: flds   (%esp)
  0xa7560f51: add    $0x4,%esp
  0xa7560f54: movl   $0x0,-0x8(%ebp)
  0xa7560f5b: mov    -0x1c(%ebp),%esi
  0xa7560f5e: mov    -0x18(%ebp),%edi
  0xa7560f61: mov    %esp,%ecx
  0xa7560f63: shr    $0xc,%ecx
  0xa7560f66: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7560f6d: cmpl   $0x0,0x4(%ecx)
  0xa7560f74: je     0xa7561034
  0xa7560f7a: call   0xa7560f84
  0xa7560f7f: jmp    0xa7561023
  0xa7560f84: lea    0x4(%esp),%eax
  0xa7560f88: cmpl   $0x0,-0x8(%ebp)
  0xa7560f8f: je     0xa7560fa6
  0xa7560f95: push   $0xb7449b58
  0xa7560f9a: call   0xa7560f9f
  0xa7560f9f: pusha  
  0xa7560fa0: call   0xb6ff5f32
  0xa7560fa5: hlt    
  0xa7560fa6: mov    %esi,-0x1c(%ebp)
  0xa7560fa9: mov    %esp,%edi
  0xa7560fab: shr    $0xc,%edi
  0xa7560fae: mov    -0x4871aba0(,%edi,4),%edi
  0xa7560fb5: push   %edi
  0xa7560fb6: mov    %ebp,0x148(%edi)
  0xa7560fbc: mov    %eax,0x140(%edi)
  0xa7560fc2: call   0xb6e5e068
  0xa7560fc7: add    $0x4,%esp
  0xa7560fca: push   %eax
  0xa7560fcb: mov    %esp,%eax
  0xa7560fcd: shr    $0xc,%eax
  0xa7560fd0: mov    -0x4871aba0(,%eax,4),%eax
  0xa7560fd7: cmp    %eax,%edi
  0xa7560fd9: je     0xa7560ff0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7560fdf: push   $0xb74acf8c
  0xa7560fe4: call   0xa7560fe9
  0xa7560fe9: pusha  
  0xa7560fea: call   0xb6ff5f32
  0xa7560fef: hlt    
  0xa7560ff0: pop    %eax
  0xa7560ff1: movl   $0x0,0x140(%edi)
  0xa7560ffb: movl   $0x0,0x148(%edi)
  0xa7561005: movl   $0x0,0x144(%edi)
  0xa756100f: cmpl   $0x0,0x4(%edi)
  0xa7561016: jne    0xa7556400
  0xa756101c: mov    -0x1c(%ebp),%esi
  0xa756101f: mov    -0x18(%ebp),%edi
  0xa7561022: ret    
  0xa7561023: push   $0xb7302e8b
  0xa7561028: call   0xa756102d
  0xa756102d: pusha  
  0xa756102e: call   0xb6ff5f32
  0xa7561033: hlt    
  0xa7561034: movzbl 0x7(%esi),%ebx
  0xa7561038: add    $0x7,%esi
  0xa756103b: jmp    *-0x487236e0(,%ebx,4)
  0xa7561042: movl   $0x0,-0x8(%ebp)
  0xa7561049: mov    -0x1c(%ebp),%esi
  0xa756104c: mov    -0x18(%ebp),%edi
  0xa756104f: mov    %esp,%ecx
  0xa7561051: shr    $0xc,%ecx
  0xa7561054: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756105b: cmpl   $0x0,0x4(%ecx)
  0xa7561062: je     0xa7561122
  0xa7561068: call   0xa7561072
  0xa756106d: jmp    0xa7561111
  0xa7561072: lea    0x4(%esp),%eax
  0xa7561076: cmpl   $0x0,-0x8(%ebp)
  0xa756107d: je     0xa7561094
  0xa7561083: push   $0xb7449b58
  0xa7561088: call   0xa756108d
  0xa756108d: pusha  
  0xa756108e: call   0xb6ff5f32
  0xa7561093: hlt    
  0xa7561094: mov    %esi,-0x1c(%ebp)
  0xa7561097: mov    %esp,%edi
  0xa7561099: shr    $0xc,%edi
  0xa756109c: mov    -0x4871aba0(,%edi,4),%edi
  0xa75610a3: push   %edi
  0xa75610a4: mov    %ebp,0x148(%edi)
  0xa75610aa: mov    %eax,0x140(%edi)
  0xa75610b0: call   0xb6e5e068
  0xa75610b5: add    $0x4,%esp
  0xa75610b8: push   %eax
  0xa75610b9: mov    %esp,%eax
  0xa75610bb: shr    $0xc,%eax
  0xa75610be: mov    -0x4871aba0(,%eax,4),%eax
  0xa75610c5: cmp    %eax,%edi
  0xa75610c7: je     0xa75610de
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75610cd: push   $0xb74acf8c
  0xa75610d2: call   0xa75610d7
  0xa75610d7: pusha  
  0xa75610d8: call   0xb6ff5f32
  0xa75610dd: hlt    
  0xa75610de: pop    %eax
  0xa75610df: movl   $0x0,0x140(%edi)
  0xa75610e9: movl   $0x0,0x148(%edi)
  0xa75610f3: movl   $0x0,0x144(%edi)
  0xa75610fd: cmpl   $0x0,0x4(%edi)
  0xa7561104: jne    0xa7556400
  0xa756110a: mov    -0x1c(%ebp),%esi
  0xa756110d: mov    -0x18(%ebp),%edi
  0xa7561110: ret    
  0xa7561111: push   $0xb7302e8b
  0xa7561116: call   0xa756111b
  0xa756111b: pusha  
  0xa756111c: call   0xb6ff5f32
  0xa7561121: hlt    
  0xa7561122: movzbl 0x7(%esi),%ebx
  0xa7561126: add    $0x7,%esi
  0xa7561129: jmp    *-0x48723ae0(,%ebx,4)
  0xa7561130: movl   $0x0,-0x8(%ebp)
  0xa7561137: mov    -0x1c(%ebp),%esi
  0xa756113a: mov    -0x18(%ebp),%edi
  0xa756113d: mov    %esp,%ecx
  0xa756113f: shr    $0xc,%ecx
  0xa7561142: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561149: cmpl   $0x0,0x4(%ecx)
  0xa7561150: je     0xa7561210
  0xa7561156: call   0xa7561160
  0xa756115b: jmp    0xa75611ff
  0xa7561160: lea    0x4(%esp),%eax
  0xa7561164: cmpl   $0x0,-0x8(%ebp)
  0xa756116b: je     0xa7561182
  0xa7561171: push   $0xb7449b58
  0xa7561176: call   0xa756117b
  0xa756117b: pusha  
  0xa756117c: call   0xb6ff5f32
  0xa7561181: hlt    
  0xa7561182: mov    %esi,-0x1c(%ebp)
  0xa7561185: mov    %esp,%edi
  0xa7561187: shr    $0xc,%edi
  0xa756118a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561191: push   %edi
  0xa7561192: mov    %ebp,0x148(%edi)
  0xa7561198: mov    %eax,0x140(%edi)
  0xa756119e: call   0xb6e5e068
  0xa75611a3: add    $0x4,%esp
  0xa75611a6: push   %eax
  0xa75611a7: mov    %esp,%eax
  0xa75611a9: shr    $0xc,%eax
  0xa75611ac: mov    -0x4871aba0(,%eax,4),%eax
  0xa75611b3: cmp    %eax,%edi
  0xa75611b5: je     0xa75611cc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75611bb: push   $0xb74acf8c
  0xa75611c0: call   0xa75611c5
  0xa75611c5: pusha  
  0xa75611c6: call   0xb6ff5f32
  0xa75611cb: hlt    
  0xa75611cc: pop    %eax
  0xa75611cd: movl   $0x0,0x140(%edi)
  0xa75611d7: movl   $0x0,0x148(%edi)
  0xa75611e1: movl   $0x0,0x144(%edi)
  0xa75611eb: cmpl   $0x0,0x4(%edi)
  0xa75611f2: jne    0xa7556400
  0xa75611f8: mov    -0x1c(%ebp),%esi
  0xa75611fb: mov    -0x18(%ebp),%edi
  0xa75611fe: ret    
  0xa75611ff: push   $0xb7302e8b
  0xa7561204: call   0xa7561209
  0xa7561209: pusha  
  0xa756120a: call   0xb6ff5f32
  0xa756120f: hlt    
  0xa7561210: movzbl 0x7(%esi),%ebx
  0xa7561214: add    $0x7,%esi
  0xa7561217: jmp    *-0x48723ee0(,%ebx,4)
  0xa756121e: movl   $0x0,-0x8(%ebp)
  0xa7561225: mov    -0x1c(%ebp),%esi
  0xa7561228: mov    -0x18(%ebp),%edi
  0xa756122b: mov    %esp,%ecx
  0xa756122d: shr    $0xc,%ecx
  0xa7561230: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561237: cmpl   $0x0,0x4(%ecx)
  0xa756123e: je     0xa75612fe
  0xa7561244: call   0xa756124e
  0xa7561249: jmp    0xa75612ed
  0xa756124e: lea    0x4(%esp),%eax
  0xa7561252: cmpl   $0x0,-0x8(%ebp)
  0xa7561259: je     0xa7561270
  0xa756125f: push   $0xb7449b58
  0xa7561264: call   0xa7561269
  0xa7561269: pusha  
  0xa756126a: call   0xb6ff5f32
  0xa756126f: hlt    
  0xa7561270: mov    %esi,-0x1c(%ebp)
  0xa7561273: mov    %esp,%edi
  0xa7561275: shr    $0xc,%edi
  0xa7561278: mov    -0x4871aba0(,%edi,4),%edi
  0xa756127f: push   %edi
  0xa7561280: mov    %ebp,0x148(%edi)
  0xa7561286: mov    %eax,0x140(%edi)
  0xa756128c: call   0xb6e5e068
  0xa7561291: add    $0x4,%esp
  0xa7561294: push   %eax
  0xa7561295: mov    %esp,%eax
  0xa7561297: shr    $0xc,%eax
  0xa756129a: mov    -0x4871aba0(,%eax,4),%eax
  0xa75612a1: cmp    %eax,%edi
  0xa75612a3: je     0xa75612ba
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75612a9: push   $0xb74acf8c
  0xa75612ae: call   0xa75612b3
  0xa75612b3: pusha  
  0xa75612b4: call   0xb6ff5f32
  0xa75612b9: hlt    
  0xa75612ba: pop    %eax
  0xa75612bb: movl   $0x0,0x140(%edi)
  0xa75612c5: movl   $0x0,0x148(%edi)
  0xa75612cf: movl   $0x0,0x144(%edi)
  0xa75612d9: cmpl   $0x0,0x4(%edi)
  0xa75612e0: jne    0xa7556400
  0xa75612e6: mov    -0x1c(%ebp),%esi
  0xa75612e9: mov    -0x18(%ebp),%edi
  0xa75612ec: ret    
  0xa75612ed: push   $0xb7302e8b
  0xa75612f2: call   0xa75612f7
  0xa75612f7: pusha  
  0xa75612f8: call   0xb6ff5f32
  0xa75612fd: hlt    
  0xa75612fe: movzbl 0x7(%esi),%ebx
  0xa7561302: add    $0x7,%esi
  0xa7561305: jmp    *-0x48722ee0(,%ebx,4)
  0xa756130c: movl   $0x0,-0x8(%ebp)
  0xa7561313: mov    -0x1c(%ebp),%esi
  0xa7561316: mov    -0x18(%ebp),%edi
  0xa7561319: mov    %esp,%ecx
  0xa756131b: shr    $0xc,%ecx
  0xa756131e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561325: cmpl   $0x0,0x4(%ecx)
  0xa756132c: je     0xa75613ec
  0xa7561332: call   0xa756133c
  0xa7561337: jmp    0xa75613db
  0xa756133c: lea    0x4(%esp),%eax
  0xa7561340: cmpl   $0x0,-0x8(%ebp)
  0xa7561347: je     0xa756135e
  0xa756134d: push   $0xb7449b58
  0xa7561352: call   0xa7561357
  0xa7561357: pusha  
  0xa7561358: call   0xb6ff5f32
  0xa756135d: hlt    
  0xa756135e: mov    %esi,-0x1c(%ebp)
  0xa7561361: mov    %esp,%edi
  0xa7561363: shr    $0xc,%edi
  0xa7561366: mov    -0x4871aba0(,%edi,4),%edi
  0xa756136d: push   %edi
  0xa756136e: mov    %ebp,0x148(%edi)
  0xa7561374: mov    %eax,0x140(%edi)
  0xa756137a: call   0xb6e5e068
  0xa756137f: add    $0x4,%esp
  0xa7561382: push   %eax
  0xa7561383: mov    %esp,%eax
  0xa7561385: shr    $0xc,%eax
  0xa7561388: mov    -0x4871aba0(,%eax,4),%eax
  0xa756138f: cmp    %eax,%edi
  0xa7561391: je     0xa75613a8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561397: push   $0xb74acf8c
  0xa756139c: call   0xa75613a1
  0xa75613a1: pusha  
  0xa75613a2: call   0xb6ff5f32
  0xa75613a7: hlt    
  0xa75613a8: pop    %eax
  0xa75613a9: movl   $0x0,0x140(%edi)
  0xa75613b3: movl   $0x0,0x148(%edi)
  0xa75613bd: movl   $0x0,0x144(%edi)
  0xa75613c7: cmpl   $0x0,0x4(%edi)
  0xa75613ce: jne    0xa7556400
  0xa75613d4: mov    -0x1c(%ebp),%esi
  0xa75613d7: mov    -0x18(%ebp),%edi
  0xa75613da: ret    
  0xa75613db: push   $0xb7302e8b
  0xa75613e0: call   0xa75613e5
  0xa75613e5: pusha  
  0xa75613e6: call   0xb6ff5f32
  0xa75613eb: hlt    
  0xa75613ec: movzbl 0x7(%esi),%ebx
  0xa75613f0: add    $0x7,%esi
  0xa75613f3: jmp    *-0x48723ee0(,%ebx,4)
  0xa75613fa: movl   $0x0,-0x8(%ebp)
  0xa7561401: mov    -0x1c(%ebp),%esi
  0xa7561404: mov    -0x18(%ebp),%edi
  0xa7561407: mov    %esp,%ecx
  0xa7561409: shr    $0xc,%ecx
  0xa756140c: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561413: cmpl   $0x0,0x4(%ecx)
  0xa756141a: je     0xa75614da
  0xa7561420: call   0xa756142a
  0xa7561425: jmp    0xa75614c9
  0xa756142a: lea    0x4(%esp),%eax
  0xa756142e: cmpl   $0x0,-0x8(%ebp)
  0xa7561435: je     0xa756144c
  0xa756143b: push   $0xb7449b58
  0xa7561440: call   0xa7561445
  0xa7561445: pusha  
  0xa7561446: call   0xb6ff5f32
  0xa756144b: hlt    
  0xa756144c: mov    %esi,-0x1c(%ebp)
  0xa756144f: mov    %esp,%edi
  0xa7561451: shr    $0xc,%edi
  0xa7561454: mov    -0x4871aba0(,%edi,4),%edi
  0xa756145b: push   %edi
  0xa756145c: mov    %ebp,0x148(%edi)
  0xa7561462: mov    %eax,0x140(%edi)
  0xa7561468: call   0xb6e5e068
  0xa756146d: add    $0x4,%esp
  0xa7561470: push   %eax
  0xa7561471: mov    %esp,%eax
  0xa7561473: shr    $0xc,%eax
  0xa7561476: mov    -0x4871aba0(,%eax,4),%eax
  0xa756147d: cmp    %eax,%edi
  0xa756147f: je     0xa7561496
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561485: push   $0xb74acf8c
  0xa756148a: call   0xa756148f
  0xa756148f: pusha  
  0xa7561490: call   0xb6ff5f32
  0xa7561495: hlt    
  0xa7561496: pop    %eax
  0xa7561497: movl   $0x0,0x140(%edi)
  0xa75614a1: movl   $0x0,0x148(%edi)
  0xa75614ab: movl   $0x0,0x144(%edi)
  0xa75614b5: cmpl   $0x0,0x4(%edi)
  0xa75614bc: jne    0xa7556400
  0xa75614c2: mov    -0x1c(%ebp),%esi
  0xa75614c5: mov    -0x18(%ebp),%edi
  0xa75614c8: ret    
  0xa75614c9: push   $0xb7302e8b
  0xa75614ce: call   0xa75614d3
  0xa75614d3: pusha  
  0xa75614d4: call   0xb6ff5f32
  0xa75614d9: hlt    
  0xa75614da: movzbl 0x7(%esi),%ebx
  0xa75614de: add    $0x7,%esi
  0xa75614e1: jmp    *-0x48723ee0(,%ebx,4)
  0xa75614e8: movl   $0x0,-0x8(%ebp)
  0xa75614ef: mov    -0x1c(%ebp),%esi
  0xa75614f2: mov    -0x18(%ebp),%edi
  0xa75614f5: mov    %esp,%ecx
  0xa75614f7: shr    $0xc,%ecx
  0xa75614fa: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561501: cmpl   $0x0,0x4(%ecx)
  0xa7561508: je     0xa75615c8
  0xa756150e: call   0xa7561518
  0xa7561513: jmp    0xa75615b7
  0xa7561518: lea    0x4(%esp),%eax
  0xa756151c: cmpl   $0x0,-0x8(%ebp)
  0xa7561523: je     0xa756153a
  0xa7561529: push   $0xb7449b58
  0xa756152e: call   0xa7561533
  0xa7561533: pusha  
  0xa7561534: call   0xb6ff5f32
  0xa7561539: hlt    
  0xa756153a: mov    %esi,-0x1c(%ebp)
  0xa756153d: mov    %esp,%edi
  0xa756153f: shr    $0xc,%edi
  0xa7561542: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561549: push   %edi
  0xa756154a: mov    %ebp,0x148(%edi)
  0xa7561550: mov    %eax,0x140(%edi)
  0xa7561556: call   0xb6e5e068
  0xa756155b: add    $0x4,%esp
  0xa756155e: push   %eax
  0xa756155f: mov    %esp,%eax
  0xa7561561: shr    $0xc,%eax
  0xa7561564: mov    -0x4871aba0(,%eax,4),%eax
  0xa756156b: cmp    %eax,%edi
  0xa756156d: je     0xa7561584
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561573: push   $0xb74acf8c
  0xa7561578: call   0xa756157d
  0xa756157d: pusha  
  0xa756157e: call   0xb6ff5f32
  0xa7561583: hlt    
  0xa7561584: pop    %eax
  0xa7561585: movl   $0x0,0x140(%edi)
  0xa756158f: movl   $0x0,0x148(%edi)
  0xa7561599: movl   $0x0,0x144(%edi)
  0xa75615a3: cmpl   $0x0,0x4(%edi)
  0xa75615aa: jne    0xa7556400
  0xa75615b0: mov    -0x1c(%ebp),%esi
  0xa75615b3: mov    -0x18(%ebp),%edi
  0xa75615b6: ret    
  0xa75615b7: push   $0xb7302e8b
  0xa75615bc: call   0xa75615c1
  0xa75615c1: pusha  
  0xa75615c2: call   0xb6ff5f32
  0xa75615c7: hlt    
  0xa75615c8: movzbl 0x7(%esi),%ebx
  0xa75615cc: add    $0x7,%esi
  0xa75615cf: jmp    *-0x48723ee0(,%ebx,4)
  0xa75615d6: movl   $0x0,-0x8(%ebp)
  0xa75615dd: mov    -0x1c(%ebp),%esi
  0xa75615e0: mov    -0x18(%ebp),%edi
  0xa75615e3: mov    %esp,%ecx
  0xa75615e5: shr    $0xc,%ecx
  0xa75615e8: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75615ef: cmpl   $0x0,0x4(%ecx)
  0xa75615f6: je     0xa75616b6
  0xa75615fc: call   0xa7561606
  0xa7561601: jmp    0xa75616a5
  0xa7561606: lea    0x4(%esp),%eax
  0xa756160a: cmpl   $0x0,-0x8(%ebp)
  0xa7561611: je     0xa7561628
  0xa7561617: push   $0xb7449b58
  0xa756161c: call   0xa7561621
  0xa7561621: pusha  
  0xa7561622: call   0xb6ff5f32
  0xa7561627: hlt    
  0xa7561628: mov    %esi,-0x1c(%ebp)
  0xa756162b: mov    %esp,%edi
  0xa756162d: shr    $0xc,%edi
  0xa7561630: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561637: push   %edi
  0xa7561638: mov    %ebp,0x148(%edi)
  0xa756163e: mov    %eax,0x140(%edi)
  0xa7561644: call   0xb6e5e068
  0xa7561649: add    $0x4,%esp
  0xa756164c: push   %eax
  0xa756164d: mov    %esp,%eax
  0xa756164f: shr    $0xc,%eax
  0xa7561652: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561659: cmp    %eax,%edi
  0xa756165b: je     0xa7561672
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561661: push   $0xb74acf8c
  0xa7561666: call   0xa756166b
  0xa756166b: pusha  
  0xa756166c: call   0xb6ff5f32
  0xa7561671: hlt    
  0xa7561672: pop    %eax
  0xa7561673: movl   $0x0,0x140(%edi)
  0xa756167d: movl   $0x0,0x148(%edi)
  0xa7561687: movl   $0x0,0x144(%edi)
  0xa7561691: cmpl   $0x0,0x4(%edi)
  0xa7561698: jne    0xa7556400
  0xa756169e: mov    -0x1c(%ebp),%esi
  0xa75616a1: mov    -0x18(%ebp),%edi
  0xa75616a4: ret    
  0xa75616a5: push   $0xb7302e8b
  0xa75616aa: call   0xa75616af
  0xa75616af: pusha  
  0xa75616b0: call   0xb6ff5f32
  0xa75616b5: hlt    
  0xa75616b6: movzbl 0x7(%esi),%ebx
  0xa75616ba: add    $0x7,%esi
  0xa75616bd: jmp    *-0x48723ee0(,%ebx,4)
  0xa75616c4: movl   $0x0,-0x8(%ebp)
  0xa75616cb: mov    -0x1c(%ebp),%esi
  0xa75616ce: mov    -0x18(%ebp),%edi
  0xa75616d1: mov    %esp,%ecx
  0xa75616d3: shr    $0xc,%ecx
  0xa75616d6: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75616dd: cmpl   $0x0,0x4(%ecx)
  0xa75616e4: je     0xa75617a4
  0xa75616ea: call   0xa75616f4
  0xa75616ef: jmp    0xa7561793
  0xa75616f4: lea    0x4(%esp),%eax
  0xa75616f8: cmpl   $0x0,-0x8(%ebp)
  0xa75616ff: je     0xa7561716
  0xa7561705: push   $0xb7449b58
  0xa756170a: call   0xa756170f
  0xa756170f: pusha  
  0xa7561710: call   0xb6ff5f32
  0xa7561715: hlt    
  0xa7561716: mov    %esi,-0x1c(%ebp)
  0xa7561719: mov    %esp,%edi
  0xa756171b: shr    $0xc,%edi
  0xa756171e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561725: push   %edi
  0xa7561726: mov    %ebp,0x148(%edi)
  0xa756172c: mov    %eax,0x140(%edi)
  0xa7561732: call   0xb6e5e068
  0xa7561737: add    $0x4,%esp
  0xa756173a: push   %eax
  0xa756173b: mov    %esp,%eax
  0xa756173d: shr    $0xc,%eax
  0xa7561740: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561747: cmp    %eax,%edi
  0xa7561749: je     0xa7561760
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756174f: push   $0xb74acf8c
  0xa7561754: call   0xa7561759
  0xa7561759: pusha  
  0xa756175a: call   0xb6ff5f32
  0xa756175f: hlt    
  0xa7561760: pop    %eax
  0xa7561761: movl   $0x0,0x140(%edi)
  0xa756176b: movl   $0x0,0x148(%edi)
  0xa7561775: movl   $0x0,0x144(%edi)
  0xa756177f: cmpl   $0x0,0x4(%edi)
  0xa7561786: jne    0xa7556400
  0xa756178c: mov    -0x1c(%ebp),%esi
  0xa756178f: mov    -0x18(%ebp),%edi
  0xa7561792: ret    
  0xa7561793: push   $0xb7302e8b
  0xa7561798: call   0xa756179d
  0xa756179d: pusha  
  0xa756179e: call   0xb6ff5f32
  0xa75617a3: hlt    
  0xa75617a4: movzbl 0x8(%esi),%ebx
  0xa75617a8: add    $0x8,%esi
  0xa75617ab: jmp    *-0x48722ae0(,%ebx,4)
  0xa75617b2: sub    $0x8,%esp
  0xa75617b5: vmovsd %xmm0,(%esp)
  0xa75617ba: fldl   (%esp)
  0xa75617bd: add    $0x8,%esp
  0xa75617c0: movl   $0x0,-0x8(%ebp)
  0xa75617c7: mov    -0x1c(%ebp),%esi
  0xa75617ca: mov    -0x18(%ebp),%edi
  0xa75617cd: mov    %esp,%ecx
  0xa75617cf: shr    $0xc,%ecx
  0xa75617d2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75617d9: cmpl   $0x0,0x4(%ecx)
  0xa75617e0: je     0xa75618a0
  0xa75617e6: call   0xa75617f0
  0xa75617eb: jmp    0xa756188f
  0xa75617f0: lea    0x4(%esp),%eax
  0xa75617f4: cmpl   $0x0,-0x8(%ebp)
  0xa75617fb: je     0xa7561812
  0xa7561801: push   $0xb7449b58
  0xa7561806: call   0xa756180b
  0xa756180b: pusha  
  0xa756180c: call   0xb6ff5f32
  0xa7561811: hlt    
  0xa7561812: mov    %esi,-0x1c(%ebp)
  0xa7561815: mov    %esp,%edi
  0xa7561817: shr    $0xc,%edi
  0xa756181a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561821: push   %edi
  0xa7561822: mov    %ebp,0x148(%edi)
  0xa7561828: mov    %eax,0x140(%edi)
  0xa756182e: call   0xb6e5e068
  0xa7561833: add    $0x4,%esp
  0xa7561836: push   %eax
  0xa7561837: mov    %esp,%eax
  0xa7561839: shr    $0xc,%eax
  0xa756183c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561843: cmp    %eax,%edi
  0xa7561845: je     0xa756185c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756184b: push   $0xb74acf8c
  0xa7561850: call   0xa7561855
  0xa7561855: pusha  
  0xa7561856: call   0xb6ff5f32
  0xa756185b: hlt    
  0xa756185c: pop    %eax
  0xa756185d: movl   $0x0,0x140(%edi)
  0xa7561867: movl   $0x0,0x148(%edi)
  0xa7561871: movl   $0x0,0x144(%edi)
  0xa756187b: cmpl   $0x0,0x4(%edi)
  0xa7561882: jne    0xa7556400
  0xa7561888: mov    -0x1c(%ebp),%esi
  0xa756188b: mov    -0x18(%ebp),%edi
  0xa756188e: ret    
  0xa756188f: push   $0xb7302e8b
  0xa7561894: call   0xa7561899
  0xa7561899: pusha  
  0xa756189a: call   0xb6ff5f32
  0xa756189f: hlt    
  0xa75618a0: movzbl 0x8(%esi),%ebx
  0xa75618a4: add    $0x8,%esi
  0xa75618a7: jmp    *-0x487232e0(,%ebx,4)
  0xa75618ae: sub    $0x4,%esp
  0xa75618b1: vmovss %xmm0,(%esp)
  0xa75618b6: flds   (%esp)
  0xa75618b9: add    $0x4,%esp
  0xa75618bc: movl   $0x0,-0x8(%ebp)
  0xa75618c3: mov    -0x1c(%ebp),%esi
  0xa75618c6: mov    -0x18(%ebp),%edi
  0xa75618c9: mov    %esp,%ecx
  0xa75618cb: shr    $0xc,%ecx
  0xa75618ce: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75618d5: cmpl   $0x0,0x4(%ecx)
  0xa75618dc: je     0xa756199c
  0xa75618e2: call   0xa75618ec
  0xa75618e7: jmp    0xa756198b
  0xa75618ec: lea    0x4(%esp),%eax
  0xa75618f0: cmpl   $0x0,-0x8(%ebp)
  0xa75618f7: je     0xa756190e
  0xa75618fd: push   $0xb7449b58
  0xa7561902: call   0xa7561907
  0xa7561907: pusha  
  0xa7561908: call   0xb6ff5f32
  0xa756190d: hlt    
  0xa756190e: mov    %esi,-0x1c(%ebp)
  0xa7561911: mov    %esp,%edi
  0xa7561913: shr    $0xc,%edi
  0xa7561916: mov    -0x4871aba0(,%edi,4),%edi
  0xa756191d: push   %edi
  0xa756191e: mov    %ebp,0x148(%edi)
  0xa7561924: mov    %eax,0x140(%edi)
  0xa756192a: call   0xb6e5e068
  0xa756192f: add    $0x4,%esp
  0xa7561932: push   %eax
  0xa7561933: mov    %esp,%eax
  0xa7561935: shr    $0xc,%eax
  0xa7561938: mov    -0x4871aba0(,%eax,4),%eax
  0xa756193f: cmp    %eax,%edi
  0xa7561941: je     0xa7561958
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561947: push   $0xb74acf8c
  0xa756194c: call   0xa7561951
  0xa7561951: pusha  
  0xa7561952: call   0xb6ff5f32
  0xa7561957: hlt    
  0xa7561958: pop    %eax
  0xa7561959: movl   $0x0,0x140(%edi)
  0xa7561963: movl   $0x0,0x148(%edi)
  0xa756196d: movl   $0x0,0x144(%edi)
  0xa7561977: cmpl   $0x0,0x4(%edi)
  0xa756197e: jne    0xa7556400
  0xa7561984: mov    -0x1c(%ebp),%esi
  0xa7561987: mov    -0x18(%ebp),%edi
  0xa756198a: ret    
  0xa756198b: push   $0xb7302e8b
  0xa7561990: call   0xa7561995
  0xa7561995: pusha  
  0xa7561996: call   0xb6ff5f32
  0xa756199b: hlt    
  0xa756199c: movzbl 0x8(%esi),%ebx
  0xa75619a0: add    $0x8,%esi
  0xa75619a3: jmp    *-0x487236e0(,%ebx,4)
  0xa75619aa: movl   $0x0,-0x8(%ebp)
  0xa75619b1: mov    -0x1c(%ebp),%esi
  0xa75619b4: mov    -0x18(%ebp),%edi
  0xa75619b7: mov    %esp,%ecx
  0xa75619b9: shr    $0xc,%ecx
  0xa75619bc: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75619c3: cmpl   $0x0,0x4(%ecx)
  0xa75619ca: je     0xa7561a8a
  0xa75619d0: call   0xa75619da
  0xa75619d5: jmp    0xa7561a79
  0xa75619da: lea    0x4(%esp),%eax
  0xa75619de: cmpl   $0x0,-0x8(%ebp)
  0xa75619e5: je     0xa75619fc
  0xa75619eb: push   $0xb7449b58
  0xa75619f0: call   0xa75619f5
  0xa75619f5: pusha  
  0xa75619f6: call   0xb6ff5f32
  0xa75619fb: hlt    
  0xa75619fc: mov    %esi,-0x1c(%ebp)
  0xa75619ff: mov    %esp,%edi
  0xa7561a01: shr    $0xc,%edi
  0xa7561a04: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561a0b: push   %edi
  0xa7561a0c: mov    %ebp,0x148(%edi)
  0xa7561a12: mov    %eax,0x140(%edi)
  0xa7561a18: call   0xb6e5e068
  0xa7561a1d: add    $0x4,%esp
  0xa7561a20: push   %eax
  0xa7561a21: mov    %esp,%eax
  0xa7561a23: shr    $0xc,%eax
  0xa7561a26: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561a2d: cmp    %eax,%edi
  0xa7561a2f: je     0xa7561a46
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561a35: push   $0xb74acf8c
  0xa7561a3a: call   0xa7561a3f
  0xa7561a3f: pusha  
  0xa7561a40: call   0xb6ff5f32
  0xa7561a45: hlt    
  0xa7561a46: pop    %eax
  0xa7561a47: movl   $0x0,0x140(%edi)
  0xa7561a51: movl   $0x0,0x148(%edi)
  0xa7561a5b: movl   $0x0,0x144(%edi)
  0xa7561a65: cmpl   $0x0,0x4(%edi)
  0xa7561a6c: jne    0xa7556400
  0xa7561a72: mov    -0x1c(%ebp),%esi
  0xa7561a75: mov    -0x18(%ebp),%edi
  0xa7561a78: ret    
  0xa7561a79: push   $0xb7302e8b
  0xa7561a7e: call   0xa7561a83
  0xa7561a83: pusha  
  0xa7561a84: call   0xb6ff5f32
  0xa7561a89: hlt    
  0xa7561a8a: movzbl 0x8(%esi),%ebx
  0xa7561a8e: add    $0x8,%esi
  0xa7561a91: jmp    *-0x48723ae0(,%ebx,4)
  0xa7561a98: movl   $0x0,-0x8(%ebp)
  0xa7561a9f: mov    -0x1c(%ebp),%esi
  0xa7561aa2: mov    -0x18(%ebp),%edi
  0xa7561aa5: mov    %esp,%ecx
  0xa7561aa7: shr    $0xc,%ecx
  0xa7561aaa: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561ab1: cmpl   $0x0,0x4(%ecx)
  0xa7561ab8: je     0xa7561b78
  0xa7561abe: call   0xa7561ac8
  0xa7561ac3: jmp    0xa7561b67
  0xa7561ac8: lea    0x4(%esp),%eax
  0xa7561acc: cmpl   $0x0,-0x8(%ebp)
  0xa7561ad3: je     0xa7561aea
  0xa7561ad9: push   $0xb7449b58
  0xa7561ade: call   0xa7561ae3
  0xa7561ae3: pusha  
  0xa7561ae4: call   0xb6ff5f32
  0xa7561ae9: hlt    
  0xa7561aea: mov    %esi,-0x1c(%ebp)
  0xa7561aed: mov    %esp,%edi
  0xa7561aef: shr    $0xc,%edi
  0xa7561af2: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561af9: push   %edi
  0xa7561afa: mov    %ebp,0x148(%edi)
  0xa7561b00: mov    %eax,0x140(%edi)
  0xa7561b06: call   0xb6e5e068
  0xa7561b0b: add    $0x4,%esp
  0xa7561b0e: push   %eax
  0xa7561b0f: mov    %esp,%eax
  0xa7561b11: shr    $0xc,%eax
  0xa7561b14: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561b1b: cmp    %eax,%edi
  0xa7561b1d: je     0xa7561b34
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561b23: push   $0xb74acf8c
  0xa7561b28: call   0xa7561b2d
  0xa7561b2d: pusha  
  0xa7561b2e: call   0xb6ff5f32
  0xa7561b33: hlt    
  0xa7561b34: pop    %eax
  0xa7561b35: movl   $0x0,0x140(%edi)
  0xa7561b3f: movl   $0x0,0x148(%edi)
  0xa7561b49: movl   $0x0,0x144(%edi)
  0xa7561b53: cmpl   $0x0,0x4(%edi)
  0xa7561b5a: jne    0xa7556400
  0xa7561b60: mov    -0x1c(%ebp),%esi
  0xa7561b63: mov    -0x18(%ebp),%edi
  0xa7561b66: ret    
  0xa7561b67: push   $0xb7302e8b
  0xa7561b6c: call   0xa7561b71
  0xa7561b71: pusha  
  0xa7561b72: call   0xb6ff5f32
  0xa7561b77: hlt    
  0xa7561b78: movzbl 0x8(%esi),%ebx
  0xa7561b7c: add    $0x8,%esi
  0xa7561b7f: jmp    *-0x48723ee0(,%ebx,4)
  0xa7561b86: movl   $0x0,-0x8(%ebp)
  0xa7561b8d: mov    -0x1c(%ebp),%esi
  0xa7561b90: mov    -0x18(%ebp),%edi
  0xa7561b93: mov    %esp,%ecx
  0xa7561b95: shr    $0xc,%ecx
  0xa7561b98: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561b9f: cmpl   $0x0,0x4(%ecx)
  0xa7561ba6: je     0xa7561c66
  0xa7561bac: call   0xa7561bb6
  0xa7561bb1: jmp    0xa7561c55
  0xa7561bb6: lea    0x4(%esp),%eax
  0xa7561bba: cmpl   $0x0,-0x8(%ebp)
  0xa7561bc1: je     0xa7561bd8
  0xa7561bc7: push   $0xb7449b58
  0xa7561bcc: call   0xa7561bd1
  0xa7561bd1: pusha  
  0xa7561bd2: call   0xb6ff5f32
  0xa7561bd7: hlt    
  0xa7561bd8: mov    %esi,-0x1c(%ebp)
  0xa7561bdb: mov    %esp,%edi
  0xa7561bdd: shr    $0xc,%edi
  0xa7561be0: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561be7: push   %edi
  0xa7561be8: mov    %ebp,0x148(%edi)
  0xa7561bee: mov    %eax,0x140(%edi)
  0xa7561bf4: call   0xb6e5e068
  0xa7561bf9: add    $0x4,%esp
  0xa7561bfc: push   %eax
  0xa7561bfd: mov    %esp,%eax
  0xa7561bff: shr    $0xc,%eax
  0xa7561c02: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561c09: cmp    %eax,%edi
  0xa7561c0b: je     0xa7561c22
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561c11: push   $0xb74acf8c
  0xa7561c16: call   0xa7561c1b
  0xa7561c1b: pusha  
  0xa7561c1c: call   0xb6ff5f32
  0xa7561c21: hlt    
  0xa7561c22: pop    %eax
  0xa7561c23: movl   $0x0,0x140(%edi)
  0xa7561c2d: movl   $0x0,0x148(%edi)
  0xa7561c37: movl   $0x0,0x144(%edi)
  0xa7561c41: cmpl   $0x0,0x4(%edi)
  0xa7561c48: jne    0xa7556400
  0xa7561c4e: mov    -0x1c(%ebp),%esi
  0xa7561c51: mov    -0x18(%ebp),%edi
  0xa7561c54: ret    
  0xa7561c55: push   $0xb7302e8b
  0xa7561c5a: call   0xa7561c5f
  0xa7561c5f: pusha  
  0xa7561c60: call   0xb6ff5f32
  0xa7561c65: hlt    
  0xa7561c66: movzbl 0x8(%esi),%ebx
  0xa7561c6a: add    $0x8,%esi
  0xa7561c6d: jmp    *-0x48722ee0(,%ebx,4)
  0xa7561c74: movl   $0x0,-0x8(%ebp)
  0xa7561c7b: mov    -0x1c(%ebp),%esi
  0xa7561c7e: mov    -0x18(%ebp),%edi
  0xa7561c81: mov    %esp,%ecx
  0xa7561c83: shr    $0xc,%ecx
  0xa7561c86: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561c8d: cmpl   $0x0,0x4(%ecx)
  0xa7561c94: je     0xa7561d54
  0xa7561c9a: call   0xa7561ca4
  0xa7561c9f: jmp    0xa7561d43
  0xa7561ca4: lea    0x4(%esp),%eax
  0xa7561ca8: cmpl   $0x0,-0x8(%ebp)
  0xa7561caf: je     0xa7561cc6
  0xa7561cb5: push   $0xb7449b58
  0xa7561cba: call   0xa7561cbf
  0xa7561cbf: pusha  
  0xa7561cc0: call   0xb6ff5f32
  0xa7561cc5: hlt    
  0xa7561cc6: mov    %esi,-0x1c(%ebp)
  0xa7561cc9: mov    %esp,%edi
  0xa7561ccb: shr    $0xc,%edi
  0xa7561cce: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561cd5: push   %edi
  0xa7561cd6: mov    %ebp,0x148(%edi)
  0xa7561cdc: mov    %eax,0x140(%edi)
  0xa7561ce2: call   0xb6e5e068
  0xa7561ce7: add    $0x4,%esp
  0xa7561cea: push   %eax
  0xa7561ceb: mov    %esp,%eax
  0xa7561ced: shr    $0xc,%eax
  0xa7561cf0: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561cf7: cmp    %eax,%edi
  0xa7561cf9: je     0xa7561d10
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561cff: push   $0xb74acf8c
  0xa7561d04: call   0xa7561d09
  0xa7561d09: pusha  
  0xa7561d0a: call   0xb6ff5f32
  0xa7561d0f: hlt    
  0xa7561d10: pop    %eax
  0xa7561d11: movl   $0x0,0x140(%edi)
  0xa7561d1b: movl   $0x0,0x148(%edi)
  0xa7561d25: movl   $0x0,0x144(%edi)
  0xa7561d2f: cmpl   $0x0,0x4(%edi)
  0xa7561d36: jne    0xa7556400
  0xa7561d3c: mov    -0x1c(%ebp),%esi
  0xa7561d3f: mov    -0x18(%ebp),%edi
  0xa7561d42: ret    
  0xa7561d43: push   $0xb7302e8b
  0xa7561d48: call   0xa7561d4d
  0xa7561d4d: pusha  
  0xa7561d4e: call   0xb6ff5f32
  0xa7561d53: hlt    
  0xa7561d54: movzbl 0x8(%esi),%ebx
  0xa7561d58: add    $0x8,%esi
  0xa7561d5b: jmp    *-0x48723ee0(,%ebx,4)
  0xa7561d62: movl   $0x0,-0x8(%ebp)
  0xa7561d69: mov    -0x1c(%ebp),%esi
  0xa7561d6c: mov    -0x18(%ebp),%edi
  0xa7561d6f: mov    %esp,%ecx
  0xa7561d71: shr    $0xc,%ecx
  0xa7561d74: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561d7b: cmpl   $0x0,0x4(%ecx)
  0xa7561d82: je     0xa7561e42
  0xa7561d88: call   0xa7561d92
  0xa7561d8d: jmp    0xa7561e31
  0xa7561d92: lea    0x4(%esp),%eax
  0xa7561d96: cmpl   $0x0,-0x8(%ebp)
  0xa7561d9d: je     0xa7561db4
  0xa7561da3: push   $0xb7449b58
  0xa7561da8: call   0xa7561dad
  0xa7561dad: pusha  
  0xa7561dae: call   0xb6ff5f32
  0xa7561db3: hlt    
  0xa7561db4: mov    %esi,-0x1c(%ebp)
  0xa7561db7: mov    %esp,%edi
  0xa7561db9: shr    $0xc,%edi
  0xa7561dbc: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561dc3: push   %edi
  0xa7561dc4: mov    %ebp,0x148(%edi)
  0xa7561dca: mov    %eax,0x140(%edi)
  0xa7561dd0: call   0xb6e5e068
  0xa7561dd5: add    $0x4,%esp
  0xa7561dd8: push   %eax
  0xa7561dd9: mov    %esp,%eax
  0xa7561ddb: shr    $0xc,%eax
  0xa7561dde: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561de5: cmp    %eax,%edi
  0xa7561de7: je     0xa7561dfe
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561ded: push   $0xb74acf8c
  0xa7561df2: call   0xa7561df7
  0xa7561df7: pusha  
  0xa7561df8: call   0xb6ff5f32
  0xa7561dfd: hlt    
  0xa7561dfe: pop    %eax
  0xa7561dff: movl   $0x0,0x140(%edi)
  0xa7561e09: movl   $0x0,0x148(%edi)
  0xa7561e13: movl   $0x0,0x144(%edi)
  0xa7561e1d: cmpl   $0x0,0x4(%edi)
  0xa7561e24: jne    0xa7556400
  0xa7561e2a: mov    -0x1c(%ebp),%esi
  0xa7561e2d: mov    -0x18(%ebp),%edi
  0xa7561e30: ret    
  0xa7561e31: push   $0xb7302e8b
  0xa7561e36: call   0xa7561e3b
  0xa7561e3b: pusha  
  0xa7561e3c: call   0xb6ff5f32
  0xa7561e41: hlt    
  0xa7561e42: movzbl 0x8(%esi),%ebx
  0xa7561e46: add    $0x8,%esi
  0xa7561e49: jmp    *-0x48723ee0(,%ebx,4)
  0xa7561e50: movl   $0x0,-0x8(%ebp)
  0xa7561e57: mov    -0x1c(%ebp),%esi
  0xa7561e5a: mov    -0x18(%ebp),%edi
  0xa7561e5d: mov    %esp,%ecx
  0xa7561e5f: shr    $0xc,%ecx
  0xa7561e62: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561e69: cmpl   $0x0,0x4(%ecx)
  0xa7561e70: je     0xa7561f30
  0xa7561e76: call   0xa7561e80
  0xa7561e7b: jmp    0xa7561f1f
  0xa7561e80: lea    0x4(%esp),%eax
  0xa7561e84: cmpl   $0x0,-0x8(%ebp)
  0xa7561e8b: je     0xa7561ea2
  0xa7561e91: push   $0xb7449b58
  0xa7561e96: call   0xa7561e9b
  0xa7561e9b: pusha  
  0xa7561e9c: call   0xb6ff5f32
  0xa7561ea1: hlt    
  0xa7561ea2: mov    %esi,-0x1c(%ebp)
  0xa7561ea5: mov    %esp,%edi
  0xa7561ea7: shr    $0xc,%edi
  0xa7561eaa: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561eb1: push   %edi
  0xa7561eb2: mov    %ebp,0x148(%edi)
  0xa7561eb8: mov    %eax,0x140(%edi)
  0xa7561ebe: call   0xb6e5e068
  0xa7561ec3: add    $0x4,%esp
  0xa7561ec6: push   %eax
  0xa7561ec7: mov    %esp,%eax
  0xa7561ec9: shr    $0xc,%eax
  0xa7561ecc: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561ed3: cmp    %eax,%edi
  0xa7561ed5: je     0xa7561eec
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561edb: push   $0xb74acf8c
  0xa7561ee0: call   0xa7561ee5
  0xa7561ee5: pusha  
  0xa7561ee6: call   0xb6ff5f32
  0xa7561eeb: hlt    
  0xa7561eec: pop    %eax
  0xa7561eed: movl   $0x0,0x140(%edi)
  0xa7561ef7: movl   $0x0,0x148(%edi)
  0xa7561f01: movl   $0x0,0x144(%edi)
  0xa7561f0b: cmpl   $0x0,0x4(%edi)
  0xa7561f12: jne    0xa7556400
  0xa7561f18: mov    -0x1c(%ebp),%esi
  0xa7561f1b: mov    -0x18(%ebp),%edi
  0xa7561f1e: ret    
  0xa7561f1f: push   $0xb7302e8b
  0xa7561f24: call   0xa7561f29
  0xa7561f29: pusha  
  0xa7561f2a: call   0xb6ff5f32
  0xa7561f2f: hlt    
  0xa7561f30: movzbl 0x8(%esi),%ebx
  0xa7561f34: add    $0x8,%esi
  0xa7561f37: jmp    *-0x48723ee0(,%ebx,4)
  0xa7561f3e: movl   $0x0,-0x8(%ebp)
  0xa7561f45: mov    -0x1c(%ebp),%esi
  0xa7561f48: mov    -0x18(%ebp),%edi
  0xa7561f4b: mov    %esp,%ecx
  0xa7561f4d: shr    $0xc,%ecx
  0xa7561f50: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7561f57: cmpl   $0x0,0x4(%ecx)
  0xa7561f5e: je     0xa756201e
  0xa7561f64: call   0xa7561f6e
  0xa7561f69: jmp    0xa756200d
  0xa7561f6e: lea    0x4(%esp),%eax
  0xa7561f72: cmpl   $0x0,-0x8(%ebp)
  0xa7561f79: je     0xa7561f90
  0xa7561f7f: push   $0xb7449b58
  0xa7561f84: call   0xa7561f89
  0xa7561f89: pusha  
  0xa7561f8a: call   0xb6ff5f32
  0xa7561f8f: hlt    
  0xa7561f90: mov    %esi,-0x1c(%ebp)
  0xa7561f93: mov    %esp,%edi
  0xa7561f95: shr    $0xc,%edi
  0xa7561f98: mov    -0x4871aba0(,%edi,4),%edi
  0xa7561f9f: push   %edi
  0xa7561fa0: mov    %ebp,0x148(%edi)
  0xa7561fa6: mov    %eax,0x140(%edi)
  0xa7561fac: call   0xb6e5e068
  0xa7561fb1: add    $0x4,%esp
  0xa7561fb4: push   %eax
  0xa7561fb5: mov    %esp,%eax
  0xa7561fb7: shr    $0xc,%eax
  0xa7561fba: mov    -0x4871aba0(,%eax,4),%eax
  0xa7561fc1: cmp    %eax,%edi
  0xa7561fc3: je     0xa7561fda
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7561fc9: push   $0xb74acf8c
  0xa7561fce: call   0xa7561fd3
  0xa7561fd3: pusha  
  0xa7561fd4: call   0xb6ff5f32
  0xa7561fd9: hlt    
  0xa7561fda: pop    %eax
  0xa7561fdb: movl   $0x0,0x140(%edi)
  0xa7561fe5: movl   $0x0,0x148(%edi)
  0xa7561fef: movl   $0x0,0x144(%edi)
  0xa7561ff9: cmpl   $0x0,0x4(%edi)
  0xa7562000: jne    0xa7556400
  0xa7562006: mov    -0x1c(%ebp),%esi
  0xa7562009: mov    -0x18(%ebp),%edi
  0xa756200c: ret    
  0xa756200d: push   $0xb7302e8b
  0xa7562012: call   0xa7562017
  0xa7562017: pusha  
  0xa7562018: call   0xb6ff5f32
  0xa756201d: hlt    
  0xa756201e: movzbl 0x8(%esi),%ebx
  0xa7562022: add    $0x8,%esi
  0xa7562025: jmp    *-0x48723ee0(,%ebx,4)
  0xa756202c: movl   $0x0,-0x8(%ebp)
  0xa7562033: mov    -0x1c(%ebp),%esi
  0xa7562036: mov    -0x18(%ebp),%edi
  0xa7562039: mov    %esp,%ecx
  0xa756203b: shr    $0xc,%ecx
  0xa756203e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7562045: cmpl   $0x0,0x4(%ecx)
  0xa756204c: je     0xa756210c
  0xa7562052: call   0xa756205c
  0xa7562057: jmp    0xa75620fb
  0xa756205c: lea    0x4(%esp),%eax
  0xa7562060: cmpl   $0x0,-0x8(%ebp)
  0xa7562067: je     0xa756207e
  0xa756206d: push   $0xb7449b58
  0xa7562072: call   0xa7562077
  0xa7562077: pusha  
  0xa7562078: call   0xb6ff5f32
  0xa756207d: hlt    
  0xa756207e: mov    %esi,-0x1c(%ebp)
  0xa7562081: mov    %esp,%edi
  0xa7562083: shr    $0xc,%edi
  0xa7562086: mov    -0x4871aba0(,%edi,4),%edi
  0xa756208d: push   %edi
  0xa756208e: mov    %ebp,0x148(%edi)
  0xa7562094: mov    %eax,0x140(%edi)
  0xa756209a: call   0xb6e5e068
  0xa756209f: add    $0x4,%esp
  0xa75620a2: push   %eax
  0xa75620a3: mov    %esp,%eax
  0xa75620a5: shr    $0xc,%eax
  0xa75620a8: mov    -0x4871aba0(,%eax,4),%eax
  0xa75620af: cmp    %eax,%edi
  0xa75620b1: je     0xa75620c8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75620b7: push   $0xb74acf8c
  0xa75620bc: call   0xa75620c1
  0xa75620c1: pusha  
  0xa75620c2: call   0xb6ff5f32
  0xa75620c7: hlt    
  0xa75620c8: pop    %eax
  0xa75620c9: movl   $0x0,0x140(%edi)
  0xa75620d3: movl   $0x0,0x148(%edi)
  0xa75620dd: movl   $0x0,0x144(%edi)
  0xa75620e7: cmpl   $0x0,0x4(%edi)
  0xa75620ee: jne    0xa7556400
  0xa75620f4: mov    -0x1c(%ebp),%esi
  0xa75620f7: mov    -0x18(%ebp),%edi
  0xa75620fa: ret    
  0xa75620fb: push   $0xb7302e8b
  0xa7562100: call   0xa7562105
  0xa7562105: pusha  
  0xa7562106: call   0xb6ff5f32
  0xa756210b: hlt    
  0xa756210c: movzbl 0x9(%esi),%ebx
  0xa7562110: add    $0x9,%esi
  0xa7562113: jmp    *-0x48722ae0(,%ebx,4)
  0xa756211a: sub    $0x8,%esp
  0xa756211d: vmovsd %xmm0,(%esp)
  0xa7562122: fldl   (%esp)
  0xa7562125: add    $0x8,%esp
  0xa7562128: movl   $0x0,-0x8(%ebp)
  0xa756212f: mov    -0x1c(%ebp),%esi
  0xa7562132: mov    -0x18(%ebp),%edi
  0xa7562135: mov    %esp,%ecx
  0xa7562137: shr    $0xc,%ecx
  0xa756213a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7562141: cmpl   $0x0,0x4(%ecx)
  0xa7562148: je     0xa7562208
  0xa756214e: call   0xa7562158
  0xa7562153: jmp    0xa75621f7
  0xa7562158: lea    0x4(%esp),%eax
  0xa756215c: cmpl   $0x0,-0x8(%ebp)
  0xa7562163: je     0xa756217a
  0xa7562169: push   $0xb7449b58
  0xa756216e: call   0xa7562173
  0xa7562173: pusha  
  0xa7562174: call   0xb6ff5f32
  0xa7562179: hlt    
  0xa756217a: mov    %esi,-0x1c(%ebp)
  0xa756217d: mov    %esp,%edi
  0xa756217f: shr    $0xc,%edi
  0xa7562182: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562189: push   %edi
  0xa756218a: mov    %ebp,0x148(%edi)
  0xa7562190: mov    %eax,0x140(%edi)
  0xa7562196: call   0xb6e5e068
  0xa756219b: add    $0x4,%esp
  0xa756219e: push   %eax
  0xa756219f: mov    %esp,%eax
  0xa75621a1: shr    $0xc,%eax
  0xa75621a4: mov    -0x4871aba0(,%eax,4),%eax
  0xa75621ab: cmp    %eax,%edi
  0xa75621ad: je     0xa75621c4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75621b3: push   $0xb74acf8c
  0xa75621b8: call   0xa75621bd
  0xa75621bd: pusha  
  0xa75621be: call   0xb6ff5f32
  0xa75621c3: hlt    
  0xa75621c4: pop    %eax
  0xa75621c5: movl   $0x0,0x140(%edi)
  0xa75621cf: movl   $0x0,0x148(%edi)
  0xa75621d9: movl   $0x0,0x144(%edi)
  0xa75621e3: cmpl   $0x0,0x4(%edi)
  0xa75621ea: jne    0xa7556400
  0xa75621f0: mov    -0x1c(%ebp),%esi
  0xa75621f3: mov    -0x18(%ebp),%edi
  0xa75621f6: ret    
  0xa75621f7: push   $0xb7302e8b
  0xa75621fc: call   0xa7562201
  0xa7562201: pusha  
  0xa7562202: call   0xb6ff5f32
  0xa7562207: hlt    
  0xa7562208: movzbl 0x9(%esi),%ebx
  0xa756220c: add    $0x9,%esi
  0xa756220f: jmp    *-0x487232e0(,%ebx,4)
  0xa7562216: sub    $0x4,%esp
  0xa7562219: vmovss %xmm0,(%esp)
  0xa756221e: flds   (%esp)
  0xa7562221: add    $0x4,%esp
  0xa7562224: movl   $0x0,-0x8(%ebp)
  0xa756222b: mov    -0x1c(%ebp),%esi
  0xa756222e: mov    -0x18(%ebp),%edi
  0xa7562231: mov    %esp,%ecx
  0xa7562233: shr    $0xc,%ecx
  0xa7562236: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756223d: cmpl   $0x0,0x4(%ecx)
  0xa7562244: je     0xa7562304
  0xa756224a: call   0xa7562254
  0xa756224f: jmp    0xa75622f3
  0xa7562254: lea    0x4(%esp),%eax
  0xa7562258: cmpl   $0x0,-0x8(%ebp)
  0xa756225f: je     0xa7562276
  0xa7562265: push   $0xb7449b58
  0xa756226a: call   0xa756226f
  0xa756226f: pusha  
  0xa7562270: call   0xb6ff5f32
  0xa7562275: hlt    
  0xa7562276: mov    %esi,-0x1c(%ebp)
  0xa7562279: mov    %esp,%edi
  0xa756227b: shr    $0xc,%edi
  0xa756227e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562285: push   %edi
  0xa7562286: mov    %ebp,0x148(%edi)
  0xa756228c: mov    %eax,0x140(%edi)
  0xa7562292: call   0xb6e5e068
  0xa7562297: add    $0x4,%esp
  0xa756229a: push   %eax
  0xa756229b: mov    %esp,%eax
  0xa756229d: shr    $0xc,%eax
  0xa75622a0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75622a7: cmp    %eax,%edi
  0xa75622a9: je     0xa75622c0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75622af: push   $0xb74acf8c
  0xa75622b4: call   0xa75622b9
  0xa75622b9: pusha  
  0xa75622ba: call   0xb6ff5f32
  0xa75622bf: hlt    
  0xa75622c0: pop    %eax
  0xa75622c1: movl   $0x0,0x140(%edi)
  0xa75622cb: movl   $0x0,0x148(%edi)
  0xa75622d5: movl   $0x0,0x144(%edi)
  0xa75622df: cmpl   $0x0,0x4(%edi)
  0xa75622e6: jne    0xa7556400
  0xa75622ec: mov    -0x1c(%ebp),%esi
  0xa75622ef: mov    -0x18(%ebp),%edi
  0xa75622f2: ret    
  0xa75622f3: push   $0xb7302e8b
  0xa75622f8: call   0xa75622fd
  0xa75622fd: pusha  
  0xa75622fe: call   0xb6ff5f32
  0xa7562303: hlt    
  0xa7562304: movzbl 0x9(%esi),%ebx
  0xa7562308: add    $0x9,%esi
  0xa756230b: jmp    *-0x487236e0(,%ebx,4)
  0xa7562312: movl   $0x0,-0x8(%ebp)
  0xa7562319: mov    -0x1c(%ebp),%esi
  0xa756231c: mov    -0x18(%ebp),%edi
  0xa756231f: mov    %esp,%ecx
  0xa7562321: shr    $0xc,%ecx
  0xa7562324: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756232b: cmpl   $0x0,0x4(%ecx)
  0xa7562332: je     0xa75623f2
  0xa7562338: call   0xa7562342
  0xa756233d: jmp    0xa75623e1
  0xa7562342: lea    0x4(%esp),%eax
  0xa7562346: cmpl   $0x0,-0x8(%ebp)
  0xa756234d: je     0xa7562364
  0xa7562353: push   $0xb7449b58
  0xa7562358: call   0xa756235d
  0xa756235d: pusha  
  0xa756235e: call   0xb6ff5f32
  0xa7562363: hlt    
  0xa7562364: mov    %esi,-0x1c(%ebp)
  0xa7562367: mov    %esp,%edi
  0xa7562369: shr    $0xc,%edi
  0xa756236c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562373: push   %edi
  0xa7562374: mov    %ebp,0x148(%edi)
  0xa756237a: mov    %eax,0x140(%edi)
  0xa7562380: call   0xb6e5e068
  0xa7562385: add    $0x4,%esp
  0xa7562388: push   %eax
  0xa7562389: mov    %esp,%eax
  0xa756238b: shr    $0xc,%eax
  0xa756238e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562395: cmp    %eax,%edi
  0xa7562397: je     0xa75623ae
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756239d: push   $0xb74acf8c
  0xa75623a2: call   0xa75623a7
  0xa75623a7: pusha  
  0xa75623a8: call   0xb6ff5f32
  0xa75623ad: hlt    
  0xa75623ae: pop    %eax
  0xa75623af: movl   $0x0,0x140(%edi)
  0xa75623b9: movl   $0x0,0x148(%edi)
  0xa75623c3: movl   $0x0,0x144(%edi)
  0xa75623cd: cmpl   $0x0,0x4(%edi)
  0xa75623d4: jne    0xa7556400
  0xa75623da: mov    -0x1c(%ebp),%esi
  0xa75623dd: mov    -0x18(%ebp),%edi
  0xa75623e0: ret    
  0xa75623e1: push   $0xb7302e8b
  0xa75623e6: call   0xa75623eb
  0xa75623eb: pusha  
  0xa75623ec: call   0xb6ff5f32
  0xa75623f1: hlt    
  0xa75623f2: movzbl 0x9(%esi),%ebx
  0xa75623f6: add    $0x9,%esi
  0xa75623f9: jmp    *-0x48723ae0(,%ebx,4)
  0xa7562400: movl   $0x0,-0x8(%ebp)
  0xa7562407: mov    -0x1c(%ebp),%esi
  0xa756240a: mov    -0x18(%ebp),%edi
  0xa756240d: mov    %esp,%ecx
  0xa756240f: shr    $0xc,%ecx
  0xa7562412: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7562419: cmpl   $0x0,0x4(%ecx)
  0xa7562420: je     0xa75624e0
  0xa7562426: call   0xa7562430
  0xa756242b: jmp    0xa75624cf
  0xa7562430: lea    0x4(%esp),%eax
  0xa7562434: cmpl   $0x0,-0x8(%ebp)
  0xa756243b: je     0xa7562452
  0xa7562441: push   $0xb7449b58
  0xa7562446: call   0xa756244b
  0xa756244b: pusha  
  0xa756244c: call   0xb6ff5f32
  0xa7562451: hlt    
  0xa7562452: mov    %esi,-0x1c(%ebp)
  0xa7562455: mov    %esp,%edi
  0xa7562457: shr    $0xc,%edi
  0xa756245a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562461: push   %edi
  0xa7562462: mov    %ebp,0x148(%edi)
  0xa7562468: mov    %eax,0x140(%edi)
  0xa756246e: call   0xb6e5e068
  0xa7562473: add    $0x4,%esp
  0xa7562476: push   %eax
  0xa7562477: mov    %esp,%eax
  0xa7562479: shr    $0xc,%eax
  0xa756247c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562483: cmp    %eax,%edi
  0xa7562485: je     0xa756249c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756248b: push   $0xb74acf8c
  0xa7562490: call   0xa7562495
  0xa7562495: pusha  
  0xa7562496: call   0xb6ff5f32
  0xa756249b: hlt    
  0xa756249c: pop    %eax
  0xa756249d: movl   $0x0,0x140(%edi)
  0xa75624a7: movl   $0x0,0x148(%edi)
  0xa75624b1: movl   $0x0,0x144(%edi)
  0xa75624bb: cmpl   $0x0,0x4(%edi)
  0xa75624c2: jne    0xa7556400
  0xa75624c8: mov    -0x1c(%ebp),%esi
  0xa75624cb: mov    -0x18(%ebp),%edi
  0xa75624ce: ret    
  0xa75624cf: push   $0xb7302e8b
  0xa75624d4: call   0xa75624d9
  0xa75624d9: pusha  
  0xa75624da: call   0xb6ff5f32
  0xa75624df: hlt    
  0xa75624e0: movzbl 0x9(%esi),%ebx
  0xa75624e4: add    $0x9,%esi
  0xa75624e7: jmp    *-0x48723ee0(,%ebx,4)
  0xa75624ee: movl   $0x0,-0x8(%ebp)
  0xa75624f5: mov    -0x1c(%ebp),%esi
  0xa75624f8: mov    -0x18(%ebp),%edi
  0xa75624fb: mov    %esp,%ecx
  0xa75624fd: shr    $0xc,%ecx
  0xa7562500: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7562507: cmpl   $0x0,0x4(%ecx)
  0xa756250e: je     0xa75625ce
  0xa7562514: call   0xa756251e
  0xa7562519: jmp    0xa75625bd
  0xa756251e: lea    0x4(%esp),%eax
  0xa7562522: cmpl   $0x0,-0x8(%ebp)
  0xa7562529: je     0xa7562540
  0xa756252f: push   $0xb7449b58
  0xa7562534: call   0xa7562539
  0xa7562539: pusha  
  0xa756253a: call   0xb6ff5f32
  0xa756253f: hlt    
  0xa7562540: mov    %esi,-0x1c(%ebp)
  0xa7562543: mov    %esp,%edi
  0xa7562545: shr    $0xc,%edi
  0xa7562548: mov    -0x4871aba0(,%edi,4),%edi
  0xa756254f: push   %edi
  0xa7562550: mov    %ebp,0x148(%edi)
  0xa7562556: mov    %eax,0x140(%edi)
  0xa756255c: call   0xb6e5e068
  0xa7562561: add    $0x4,%esp
  0xa7562564: push   %eax
  0xa7562565: mov    %esp,%eax
  0xa7562567: shr    $0xc,%eax
  0xa756256a: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562571: cmp    %eax,%edi
  0xa7562573: je     0xa756258a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562579: push   $0xb74acf8c
  0xa756257e: call   0xa7562583
  0xa7562583: pusha  
  0xa7562584: call   0xb6ff5f32
  0xa7562589: hlt    
  0xa756258a: pop    %eax
  0xa756258b: movl   $0x0,0x140(%edi)
  0xa7562595: movl   $0x0,0x148(%edi)
  0xa756259f: movl   $0x0,0x144(%edi)
  0xa75625a9: cmpl   $0x0,0x4(%edi)
  0xa75625b0: jne    0xa7556400
  0xa75625b6: mov    -0x1c(%ebp),%esi
  0xa75625b9: mov    -0x18(%ebp),%edi
  0xa75625bc: ret    
  0xa75625bd: push   $0xb7302e8b
  0xa75625c2: call   0xa75625c7
  0xa75625c7: pusha  
  0xa75625c8: call   0xb6ff5f32
  0xa75625cd: hlt    
  0xa75625ce: movzbl 0x9(%esi),%ebx
  0xa75625d2: add    $0x9,%esi
  0xa75625d5: jmp    *-0x48722ee0(,%ebx,4)
  0xa75625dc: movl   $0x0,-0x8(%ebp)
  0xa75625e3: mov    -0x1c(%ebp),%esi
  0xa75625e6: mov    -0x18(%ebp),%edi
  0xa75625e9: mov    %esp,%ecx
  0xa75625eb: shr    $0xc,%ecx
  0xa75625ee: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75625f5: cmpl   $0x0,0x4(%ecx)
  0xa75625fc: je     0xa75626bc
  0xa7562602: call   0xa756260c
  0xa7562607: jmp    0xa75626ab
  0xa756260c: lea    0x4(%esp),%eax
  0xa7562610: cmpl   $0x0,-0x8(%ebp)
  0xa7562617: je     0xa756262e
  0xa756261d: push   $0xb7449b58
  0xa7562622: call   0xa7562627
  0xa7562627: pusha  
  0xa7562628: call   0xb6ff5f32
  0xa756262d: hlt    
  0xa756262e: mov    %esi,-0x1c(%ebp)
  0xa7562631: mov    %esp,%edi
  0xa7562633: shr    $0xc,%edi
  0xa7562636: mov    -0x4871aba0(,%edi,4),%edi
  0xa756263d: push   %edi
  0xa756263e: mov    %ebp,0x148(%edi)
  0xa7562644: mov    %eax,0x140(%edi)
  0xa756264a: call   0xb6e5e068
  0xa756264f: add    $0x4,%esp
  0xa7562652: push   %eax
  0xa7562653: mov    %esp,%eax
  0xa7562655: shr    $0xc,%eax
  0xa7562658: mov    -0x4871aba0(,%eax,4),%eax
  0xa756265f: cmp    %eax,%edi
  0xa7562661: je     0xa7562678
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562667: push   $0xb74acf8c
  0xa756266c: call   0xa7562671
  0xa7562671: pusha  
  0xa7562672: call   0xb6ff5f32
  0xa7562677: hlt    
  0xa7562678: pop    %eax
  0xa7562679: movl   $0x0,0x140(%edi)
  0xa7562683: movl   $0x0,0x148(%edi)
  0xa756268d: movl   $0x0,0x144(%edi)
  0xa7562697: cmpl   $0x0,0x4(%edi)
  0xa756269e: jne    0xa7556400
  0xa75626a4: mov    -0x1c(%ebp),%esi
  0xa75626a7: mov    -0x18(%ebp),%edi
  0xa75626aa: ret    
  0xa75626ab: push   $0xb7302e8b
  0xa75626b0: call   0xa75626b5
  0xa75626b5: pusha  
  0xa75626b6: call   0xb6ff5f32
  0xa75626bb: hlt    
  0xa75626bc: movzbl 0x9(%esi),%ebx
  0xa75626c0: add    $0x9,%esi
  0xa75626c3: jmp    *-0x48723ee0(,%ebx,4)
  0xa75626ca: movl   $0x0,-0x8(%ebp)
  0xa75626d1: mov    -0x1c(%ebp),%esi
  0xa75626d4: mov    -0x18(%ebp),%edi
  0xa75626d7: mov    %esp,%ecx
  0xa75626d9: shr    $0xc,%ecx
  0xa75626dc: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75626e3: cmpl   $0x0,0x4(%ecx)
  0xa75626ea: je     0xa75627aa
  0xa75626f0: call   0xa75626fa
  0xa75626f5: jmp    0xa7562799
  0xa75626fa: lea    0x4(%esp),%eax
  0xa75626fe: cmpl   $0x0,-0x8(%ebp)
  0xa7562705: je     0xa756271c
  0xa756270b: push   $0xb7449b58
  0xa7562710: call   0xa7562715
  0xa7562715: pusha  
  0xa7562716: call   0xb6ff5f32
  0xa756271b: hlt    
  0xa756271c: mov    %esi,-0x1c(%ebp)
  0xa756271f: mov    %esp,%edi
  0xa7562721: shr    $0xc,%edi
  0xa7562724: mov    -0x4871aba0(,%edi,4),%edi
  0xa756272b: push   %edi
  0xa756272c: mov    %ebp,0x148(%edi)
  0xa7562732: mov    %eax,0x140(%edi)
  0xa7562738: call   0xb6e5e068
  0xa756273d: add    $0x4,%esp
  0xa7562740: push   %eax
  0xa7562741: mov    %esp,%eax
  0xa7562743: shr    $0xc,%eax
  0xa7562746: mov    -0x4871aba0(,%eax,4),%eax
  0xa756274d: cmp    %eax,%edi
  0xa756274f: je     0xa7562766
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562755: push   $0xb74acf8c
  0xa756275a: call   0xa756275f
  0xa756275f: pusha  
  0xa7562760: call   0xb6ff5f32
  0xa7562765: hlt    
  0xa7562766: pop    %eax
  0xa7562767: movl   $0x0,0x140(%edi)
  0xa7562771: movl   $0x0,0x148(%edi)
  0xa756277b: movl   $0x0,0x144(%edi)
  0xa7562785: cmpl   $0x0,0x4(%edi)
  0xa756278c: jne    0xa7556400
  0xa7562792: mov    -0x1c(%ebp),%esi
  0xa7562795: mov    -0x18(%ebp),%edi
  0xa7562798: ret    
  0xa7562799: push   $0xb7302e8b
  0xa756279e: call   0xa75627a3
  0xa75627a3: pusha  
  0xa75627a4: call   0xb6ff5f32
  0xa75627a9: hlt    
  0xa75627aa: movzbl 0x9(%esi),%ebx
  0xa75627ae: add    $0x9,%esi
  0xa75627b1: jmp    *-0x48723ee0(,%ebx,4)
  0xa75627b8: movl   $0x0,-0x8(%ebp)
  0xa75627bf: mov    -0x1c(%ebp),%esi
  0xa75627c2: mov    -0x18(%ebp),%edi
  0xa75627c5: mov    %esp,%ecx
  0xa75627c7: shr    $0xc,%ecx
  0xa75627ca: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75627d1: cmpl   $0x0,0x4(%ecx)
  0xa75627d8: je     0xa7562898
  0xa75627de: call   0xa75627e8
  0xa75627e3: jmp    0xa7562887
  0xa75627e8: lea    0x4(%esp),%eax
  0xa75627ec: cmpl   $0x0,-0x8(%ebp)
  0xa75627f3: je     0xa756280a
  0xa75627f9: push   $0xb7449b58
  0xa75627fe: call   0xa7562803
  0xa7562803: pusha  
  0xa7562804: call   0xb6ff5f32
  0xa7562809: hlt    
  0xa756280a: mov    %esi,-0x1c(%ebp)
  0xa756280d: mov    %esp,%edi
  0xa756280f: shr    $0xc,%edi
  0xa7562812: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562819: push   %edi
  0xa756281a: mov    %ebp,0x148(%edi)
  0xa7562820: mov    %eax,0x140(%edi)
  0xa7562826: call   0xb6e5e068
  0xa756282b: add    $0x4,%esp
  0xa756282e: push   %eax
  0xa756282f: mov    %esp,%eax
  0xa7562831: shr    $0xc,%eax
  0xa7562834: mov    -0x4871aba0(,%eax,4),%eax
  0xa756283b: cmp    %eax,%edi
  0xa756283d: je     0xa7562854
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562843: push   $0xb74acf8c
  0xa7562848: call   0xa756284d
  0xa756284d: pusha  
  0xa756284e: call   0xb6ff5f32
  0xa7562853: hlt    
  0xa7562854: pop    %eax
  0xa7562855: movl   $0x0,0x140(%edi)
  0xa756285f: movl   $0x0,0x148(%edi)
  0xa7562869: movl   $0x0,0x144(%edi)
  0xa7562873: cmpl   $0x0,0x4(%edi)
  0xa756287a: jne    0xa7556400
  0xa7562880: mov    -0x1c(%ebp),%esi
  0xa7562883: mov    -0x18(%ebp),%edi
  0xa7562886: ret    
  0xa7562887: push   $0xb7302e8b
  0xa756288c: call   0xa7562891
  0xa7562891: pusha  
  0xa7562892: call   0xb6ff5f32
  0xa7562897: hlt    
  0xa7562898: movzbl 0x9(%esi),%ebx
  0xa756289c: add    $0x9,%esi
  0xa756289f: jmp    *-0x48723ee0(,%ebx,4)
  0xa75628a6: movl   $0x0,-0x8(%ebp)
  0xa75628ad: mov    -0x1c(%ebp),%esi
  0xa75628b0: mov    -0x18(%ebp),%edi
  0xa75628b3: mov    %esp,%ecx
  0xa75628b5: shr    $0xc,%ecx
  0xa75628b8: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75628bf: cmpl   $0x0,0x4(%ecx)
  0xa75628c6: je     0xa7562986
  0xa75628cc: call   0xa75628d6
  0xa75628d1: jmp    0xa7562975
  0xa75628d6: lea    0x4(%esp),%eax
  0xa75628da: cmpl   $0x0,-0x8(%ebp)
  0xa75628e1: je     0xa75628f8
  0xa75628e7: push   $0xb7449b58
  0xa75628ec: call   0xa75628f1
  0xa75628f1: pusha  
  0xa75628f2: call   0xb6ff5f32
  0xa75628f7: hlt    
  0xa75628f8: mov    %esi,-0x1c(%ebp)
  0xa75628fb: mov    %esp,%edi
  0xa75628fd: shr    $0xc,%edi
  0xa7562900: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562907: push   %edi
  0xa7562908: mov    %ebp,0x148(%edi)
  0xa756290e: mov    %eax,0x140(%edi)
  0xa7562914: call   0xb6e5e068
  0xa7562919: add    $0x4,%esp
  0xa756291c: push   %eax
  0xa756291d: mov    %esp,%eax
  0xa756291f: shr    $0xc,%eax
  0xa7562922: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562929: cmp    %eax,%edi
  0xa756292b: je     0xa7562942
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562931: push   $0xb74acf8c
  0xa7562936: call   0xa756293b
  0xa756293b: pusha  
  0xa756293c: call   0xb6ff5f32
  0xa7562941: hlt    
  0xa7562942: pop    %eax
  0xa7562943: movl   $0x0,0x140(%edi)
  0xa756294d: movl   $0x0,0x148(%edi)
  0xa7562957: movl   $0x0,0x144(%edi)
  0xa7562961: cmpl   $0x0,0x4(%edi)
  0xa7562968: jne    0xa7556400
  0xa756296e: mov    -0x1c(%ebp),%esi
  0xa7562971: mov    -0x18(%ebp),%edi
  0xa7562974: ret    
  0xa7562975: push   $0xb7302e8b
  0xa756297a: call   0xa756297f
  0xa756297f: pusha  
  0xa7562980: call   0xb6ff5f32
  0xa7562985: hlt    
  0xa7562986: movzbl 0x9(%esi),%ebx
  0xa756298a: add    $0x9,%esi
  0xa756298d: jmp    *-0x48723ee0(,%ebx,4)
  0xa7562994: int3   
  0xa7562995: int3   
  0xa7562996: int3   
  0xa7562997: int3   
  0xa7562998: int3   
  0xa7562999: int3   
  0xa756299a: int3   
  0xa756299b: int3   
  0xa756299c: int3   
  0xa756299d: int3   
  0xa756299e: int3   
  0xa756299f: int3   

----------------------------------------------------------------------
result handlers for native calls  [0xa75629c0, 0xa7562a00]  64 bytes

  0xa75629c0: and    $0xff,%eax
  0xa75629c6: setne  %al
  0xa75629c9: ret    
  0xa75629ca: and    $0xffff,%eax
  0xa75629d0: ret    
  0xa75629d1: movsbl %al,%eax
  0xa75629d4: ret    
  0xa75629d5: movswl %ax,%eax
  0xa75629d8: ret    
  0xa75629d9: ret    
  0xa75629da: pop    %ecx
  0xa75629db: fldl   (%esp)
  0xa75629de: fstps  (%esp)
  0xa75629e1: vmovss (%esp),%xmm0
  0xa75629e6: add    $0x8,%esp
  0xa75629e9: push   %ecx
  0xa75629ea: ret    
  0xa75629eb: pop    %ecx
  0xa75629ec: vmovsd (%esp),%xmm0
  0xa75629f1: add    $0x8,%esp
  0xa75629f4: push   %ecx
  0xa75629f5: ret    
  0xa75629f6: mov    0x8(%ebp),%eax
  0xa75629f9: ret    
  0xa75629fa: nop
  0xa75629fb: nop
  0xa75629fc: int3   
  0xa75629fd: int3   
  0xa75629fe: int3   
  0xa75629ff: int3   

----------------------------------------------------------------------
continuation entry points  [0xa7562a20, 0xa7562ae0]  192 bytes

  0xa7562a20: movl   $0x0,-0x8(%ebp)
  0xa7562a27: movzbl (%esi),%ebx
  0xa7562a2a: jmp    *-0x48722ae0(,%ebx,4)
  0xa7562a31: movl   $0x0,-0x8(%ebp)
  0xa7562a38: movzbl (%esi),%ebx
  0xa7562a3b: jmp    *-0x487232e0(,%ebx,4)
  0xa7562a42: movl   $0x0,-0x8(%ebp)
  0xa7562a49: movzbl (%esi),%ebx
  0xa7562a4c: jmp    *-0x487236e0(,%ebx,4)
  0xa7562a53: movl   $0x0,-0x8(%ebp)
  0xa7562a5a: movzbl (%esi),%ebx
  0xa7562a5d: jmp    *-0x48723ae0(,%ebx,4)
  0xa7562a64: movl   $0x0,-0x8(%ebp)
  0xa7562a6b: movzbl (%esi),%ebx
  0xa7562a6e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7562a75: movl   $0x0,-0x8(%ebp)
  0xa7562a7c: movzbl (%esi),%ebx
  0xa7562a7f: jmp    *-0x48722ee0(,%ebx,4)
  0xa7562a86: movl   $0x0,-0x8(%ebp)
  0xa7562a8d: movzbl (%esi),%ebx
  0xa7562a90: jmp    *-0x487242e0(,%ebx,4)
  0xa7562a97: movl   $0x0,-0x8(%ebp)
  0xa7562a9e: movzbl (%esi),%ebx
  0xa7562aa1: jmp    *-0x487246e0(,%ebx,4)
  0xa7562aa8: movl   $0x0,-0x8(%ebp)
  0xa7562aaf: movzbl (%esi),%ebx
  0xa7562ab2: jmp    *-0x48724ae0(,%ebx,4)
  0xa7562ab9: movl   $0x0,-0x8(%ebp)
  0xa7562ac0: movzbl (%esi),%ebx
  0xa7562ac3: jmp    *-0x48724ee0(,%ebx,4)
  0xa7562aca: nop
  0xa7562acb: nop
  0xa7562acc: int3   
  0xa7562acd: int3   
  0xa7562ace: int3   
  0xa7562acf: int3   
  0xa7562ad0: int3   
  0xa7562ad1: int3   
  0xa7562ad2: int3   
  0xa7562ad3: int3   
  0xa7562ad4: int3   
  0xa7562ad5: int3   
  0xa7562ad6: int3   
  0xa7562ad7: int3   
  0xa7562ad8: int3   
  0xa7562ad9: int3   
  0xa7562ada: int3   
  0xa7562adb: int3   
  0xa7562adc: int3   
  0xa7562add: int3   
  0xa7562ade: int3   
  0xa7562adf: int3   

----------------------------------------------------------------------
safepoint entry points  [0xa7562b00, 0xa7563220]  1824 bytes

  0xa7562b00: call   0xa7562b0a
  0xa7562b05: jmp    0xa7562ba9
  0xa7562b0a: lea    0x4(%esp),%eax
  0xa7562b0e: cmpl   $0x0,-0x8(%ebp)
  0xa7562b15: je     0xa7562b2c
  0xa7562b1b: push   $0xb7449b58
  0xa7562b20: call   0xa7562b25
  0xa7562b25: pusha  
  0xa7562b26: call   0xb6ff5f32
  0xa7562b2b: hlt    
  0xa7562b2c: mov    %esi,-0x1c(%ebp)
  0xa7562b2f: mov    %esp,%edi
  0xa7562b31: shr    $0xc,%edi
  0xa7562b34: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562b3b: push   %edi
  0xa7562b3c: mov    %ebp,0x148(%edi)
  0xa7562b42: mov    %eax,0x140(%edi)
  0xa7562b48: call   0xb6e61e7a
  0xa7562b4d: add    $0x4,%esp
  0xa7562b50: push   %eax
  0xa7562b51: mov    %esp,%eax
  0xa7562b53: shr    $0xc,%eax
  0xa7562b56: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562b5d: cmp    %eax,%edi
  0xa7562b5f: je     0xa7562b76
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562b65: push   $0xb74acf8c
  0xa7562b6a: call   0xa7562b6f
  0xa7562b6f: pusha  
  0xa7562b70: call   0xb6ff5f32
  0xa7562b75: hlt    
  0xa7562b76: pop    %eax
  0xa7562b77: movl   $0x0,0x140(%edi)
  0xa7562b81: movl   $0x0,0x148(%edi)
  0xa7562b8b: movl   $0x0,0x144(%edi)
  0xa7562b95: cmpl   $0x0,0x4(%edi)
  0xa7562b9c: jne    0xa7556400
  0xa7562ba2: mov    -0x1c(%ebp),%esi
  0xa7562ba5: mov    -0x18(%ebp),%edi
  0xa7562ba8: ret    
  0xa7562ba9: movzbl (%esi),%ebx
  0xa7562bac: jmp    *-0x487202e0(,%ebx,4)
  0xa7562bb3: sub    $0x8,%esp
  0xa7562bb6: fstpl  (%esp)
  0xa7562bb9: call   0xa7562bc3
  0xa7562bbe: jmp    0xa7562c62
  0xa7562bc3: lea    0x4(%esp),%eax
  0xa7562bc7: cmpl   $0x0,-0x8(%ebp)
  0xa7562bce: je     0xa7562be5
  0xa7562bd4: push   $0xb7449b58
  0xa7562bd9: call   0xa7562bde
  0xa7562bde: pusha  
  0xa7562bdf: call   0xb6ff5f32
  0xa7562be4: hlt    
  0xa7562be5: mov    %esi,-0x1c(%ebp)
  0xa7562be8: mov    %esp,%edi
  0xa7562bea: shr    $0xc,%edi
  0xa7562bed: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562bf4: push   %edi
  0xa7562bf5: mov    %ebp,0x148(%edi)
  0xa7562bfb: mov    %eax,0x140(%edi)
  0xa7562c01: call   0xb6e61e7a
  0xa7562c06: add    $0x4,%esp
  0xa7562c09: push   %eax
  0xa7562c0a: mov    %esp,%eax
  0xa7562c0c: shr    $0xc,%eax
  0xa7562c0f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562c16: cmp    %eax,%edi
  0xa7562c18: je     0xa7562c2f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562c1e: push   $0xb74acf8c
  0xa7562c23: call   0xa7562c28
  0xa7562c28: pusha  
  0xa7562c29: call   0xb6ff5f32
  0xa7562c2e: hlt    
  0xa7562c2f: pop    %eax
  0xa7562c30: movl   $0x0,0x140(%edi)
  0xa7562c3a: movl   $0x0,0x148(%edi)
  0xa7562c44: movl   $0x0,0x144(%edi)
  0xa7562c4e: cmpl   $0x0,0x4(%edi)
  0xa7562c55: jne    0xa7556400
  0xa7562c5b: mov    -0x1c(%ebp),%esi
  0xa7562c5e: mov    -0x18(%ebp),%edi
  0xa7562c61: ret    
  0xa7562c62: movzbl (%esi),%ebx
  0xa7562c65: jmp    *-0x487202e0(,%ebx,4)
  0xa7562c6c: sub    $0x4,%esp
  0xa7562c6f: fstps  (%esp)
  0xa7562c72: call   0xa7562c7c
  0xa7562c77: jmp    0xa7562d1b
  0xa7562c7c: lea    0x4(%esp),%eax
  0xa7562c80: cmpl   $0x0,-0x8(%ebp)
  0xa7562c87: je     0xa7562c9e
  0xa7562c8d: push   $0xb7449b58
  0xa7562c92: call   0xa7562c97
  0xa7562c97: pusha  
  0xa7562c98: call   0xb6ff5f32
  0xa7562c9d: hlt    
  0xa7562c9e: mov    %esi,-0x1c(%ebp)
  0xa7562ca1: mov    %esp,%edi
  0xa7562ca3: shr    $0xc,%edi
  0xa7562ca6: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562cad: push   %edi
  0xa7562cae: mov    %ebp,0x148(%edi)
  0xa7562cb4: mov    %eax,0x140(%edi)
  0xa7562cba: call   0xb6e61e7a
  0xa7562cbf: add    $0x4,%esp
  0xa7562cc2: push   %eax
  0xa7562cc3: mov    %esp,%eax
  0xa7562cc5: shr    $0xc,%eax
  0xa7562cc8: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562ccf: cmp    %eax,%edi
  0xa7562cd1: je     0xa7562ce8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562cd7: push   $0xb74acf8c
  0xa7562cdc: call   0xa7562ce1
  0xa7562ce1: pusha  
  0xa7562ce2: call   0xb6ff5f32
  0xa7562ce7: hlt    
  0xa7562ce8: pop    %eax
  0xa7562ce9: movl   $0x0,0x140(%edi)
  0xa7562cf3: movl   $0x0,0x148(%edi)
  0xa7562cfd: movl   $0x0,0x144(%edi)
  0xa7562d07: cmpl   $0x0,0x4(%edi)
  0xa7562d0e: jne    0xa7556400
  0xa7562d14: mov    -0x1c(%ebp),%esi
  0xa7562d17: mov    -0x18(%ebp),%edi
  0xa7562d1a: ret    
  0xa7562d1b: movzbl (%esi),%ebx
  0xa7562d1e: jmp    *-0x487202e0(,%ebx,4)
  0xa7562d25: push   %edx
  0xa7562d26: push   %eax
  0xa7562d27: call   0xa7562d31
  0xa7562d2c: jmp    0xa7562dd0
  0xa7562d31: lea    0x4(%esp),%eax
  0xa7562d35: cmpl   $0x0,-0x8(%ebp)
  0xa7562d3c: je     0xa7562d53
  0xa7562d42: push   $0xb7449b58
  0xa7562d47: call   0xa7562d4c
  0xa7562d4c: pusha  
  0xa7562d4d: call   0xb6ff5f32
  0xa7562d52: hlt    
  0xa7562d53: mov    %esi,-0x1c(%ebp)
  0xa7562d56: mov    %esp,%edi
  0xa7562d58: shr    $0xc,%edi
  0xa7562d5b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562d62: push   %edi
  0xa7562d63: mov    %ebp,0x148(%edi)
  0xa7562d69: mov    %eax,0x140(%edi)
  0xa7562d6f: call   0xb6e61e7a
  0xa7562d74: add    $0x4,%esp
  0xa7562d77: push   %eax
  0xa7562d78: mov    %esp,%eax
  0xa7562d7a: shr    $0xc,%eax
  0xa7562d7d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562d84: cmp    %eax,%edi
  0xa7562d86: je     0xa7562d9d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562d8c: push   $0xb74acf8c
  0xa7562d91: call   0xa7562d96
  0xa7562d96: pusha  
  0xa7562d97: call   0xb6ff5f32
  0xa7562d9c: hlt    
  0xa7562d9d: pop    %eax
  0xa7562d9e: movl   $0x0,0x140(%edi)
  0xa7562da8: movl   $0x0,0x148(%edi)
  0xa7562db2: movl   $0x0,0x144(%edi)
  0xa7562dbc: cmpl   $0x0,0x4(%edi)
  0xa7562dc3: jne    0xa7556400
  0xa7562dc9: mov    -0x1c(%ebp),%esi
  0xa7562dcc: mov    -0x18(%ebp),%edi
  0xa7562dcf: ret    
  0xa7562dd0: movzbl (%esi),%ebx
  0xa7562dd3: jmp    *-0x487202e0(,%ebx,4)
  0xa7562dda: push   %eax
  0xa7562ddb: call   0xa7562de5
  0xa7562de0: jmp    0xa7562e84
  0xa7562de5: lea    0x4(%esp),%eax
  0xa7562de9: cmpl   $0x0,-0x8(%ebp)
  0xa7562df0: je     0xa7562e07
  0xa7562df6: push   $0xb7449b58
  0xa7562dfb: call   0xa7562e00
  0xa7562e00: pusha  
  0xa7562e01: call   0xb6ff5f32
  0xa7562e06: hlt    
  0xa7562e07: mov    %esi,-0x1c(%ebp)
  0xa7562e0a: mov    %esp,%edi
  0xa7562e0c: shr    $0xc,%edi
  0xa7562e0f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562e16: push   %edi
  0xa7562e17: mov    %ebp,0x148(%edi)
  0xa7562e1d: mov    %eax,0x140(%edi)
  0xa7562e23: call   0xb6e61e7a
  0xa7562e28: add    $0x4,%esp
  0xa7562e2b: push   %eax
  0xa7562e2c: mov    %esp,%eax
  0xa7562e2e: shr    $0xc,%eax
  0xa7562e31: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562e38: cmp    %eax,%edi
  0xa7562e3a: je     0xa7562e51
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562e40: push   $0xb74acf8c
  0xa7562e45: call   0xa7562e4a
  0xa7562e4a: pusha  
  0xa7562e4b: call   0xb6ff5f32
  0xa7562e50: hlt    
  0xa7562e51: pop    %eax
  0xa7562e52: movl   $0x0,0x140(%edi)
  0xa7562e5c: movl   $0x0,0x148(%edi)
  0xa7562e66: movl   $0x0,0x144(%edi)
  0xa7562e70: cmpl   $0x0,0x4(%edi)
  0xa7562e77: jne    0xa7556400
  0xa7562e7d: mov    -0x1c(%ebp),%esi
  0xa7562e80: mov    -0x18(%ebp),%edi
  0xa7562e83: ret    
  0xa7562e84: movzbl (%esi),%ebx
  0xa7562e87: jmp    *-0x487202e0(,%ebx,4)
  0xa7562e8e: push   %eax
  0xa7562e8f: call   0xa7562e99
  0xa7562e94: jmp    0xa7562f38
  0xa7562e99: lea    0x4(%esp),%eax
  0xa7562e9d: cmpl   $0x0,-0x8(%ebp)
  0xa7562ea4: je     0xa7562ebb
  0xa7562eaa: push   $0xb7449b58
  0xa7562eaf: call   0xa7562eb4
  0xa7562eb4: pusha  
  0xa7562eb5: call   0xb6ff5f32
  0xa7562eba: hlt    
  0xa7562ebb: mov    %esi,-0x1c(%ebp)
  0xa7562ebe: mov    %esp,%edi
  0xa7562ec0: shr    $0xc,%edi
  0xa7562ec3: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562eca: push   %edi
  0xa7562ecb: mov    %ebp,0x148(%edi)
  0xa7562ed1: mov    %eax,0x140(%edi)
  0xa7562ed7: call   0xb6e61e7a
  0xa7562edc: add    $0x4,%esp
  0xa7562edf: push   %eax
  0xa7562ee0: mov    %esp,%eax
  0xa7562ee2: shr    $0xc,%eax
  0xa7562ee5: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562eec: cmp    %eax,%edi
  0xa7562eee: je     0xa7562f05
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562ef4: push   $0xb74acf8c
  0xa7562ef9: call   0xa7562efe
  0xa7562efe: pusha  
  0xa7562eff: call   0xb6ff5f32
  0xa7562f04: hlt    
  0xa7562f05: pop    %eax
  0xa7562f06: movl   $0x0,0x140(%edi)
  0xa7562f10: movl   $0x0,0x148(%edi)
  0xa7562f1a: movl   $0x0,0x144(%edi)
  0xa7562f24: cmpl   $0x0,0x4(%edi)
  0xa7562f2b: jne    0xa7556400
  0xa7562f31: mov    -0x1c(%ebp),%esi
  0xa7562f34: mov    -0x18(%ebp),%edi
  0xa7562f37: ret    
  0xa7562f38: movzbl (%esi),%ebx
  0xa7562f3b: jmp    *-0x487202e0(,%ebx,4)
  0xa7562f42: push   %eax
  0xa7562f43: call   0xa7562f4d
  0xa7562f48: jmp    0xa7562fec
  0xa7562f4d: lea    0x4(%esp),%eax
  0xa7562f51: cmpl   $0x0,-0x8(%ebp)
  0xa7562f58: je     0xa7562f6f
  0xa7562f5e: push   $0xb7449b58
  0xa7562f63: call   0xa7562f68
  0xa7562f68: pusha  
  0xa7562f69: call   0xb6ff5f32
  0xa7562f6e: hlt    
  0xa7562f6f: mov    %esi,-0x1c(%ebp)
  0xa7562f72: mov    %esp,%edi
  0xa7562f74: shr    $0xc,%edi
  0xa7562f77: mov    -0x4871aba0(,%edi,4),%edi
  0xa7562f7e: push   %edi
  0xa7562f7f: mov    %ebp,0x148(%edi)
  0xa7562f85: mov    %eax,0x140(%edi)
  0xa7562f8b: call   0xb6e61e7a
  0xa7562f90: add    $0x4,%esp
  0xa7562f93: push   %eax
  0xa7562f94: mov    %esp,%eax
  0xa7562f96: shr    $0xc,%eax
  0xa7562f99: mov    -0x4871aba0(,%eax,4),%eax
  0xa7562fa0: cmp    %eax,%edi
  0xa7562fa2: je     0xa7562fb9
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7562fa8: push   $0xb74acf8c
  0xa7562fad: call   0xa7562fb2
  0xa7562fb2: pusha  
  0xa7562fb3: call   0xb6ff5f32
  0xa7562fb8: hlt    
  0xa7562fb9: pop    %eax
  0xa7562fba: movl   $0x0,0x140(%edi)
  0xa7562fc4: movl   $0x0,0x148(%edi)
  0xa7562fce: movl   $0x0,0x144(%edi)
  0xa7562fd8: cmpl   $0x0,0x4(%edi)
  0xa7562fdf: jne    0xa7556400
  0xa7562fe5: mov    -0x1c(%ebp),%esi
  0xa7562fe8: mov    -0x18(%ebp),%edi
  0xa7562feb: ret    
  0xa7562fec: movzbl (%esi),%ebx
  0xa7562fef: jmp    *-0x487202e0(,%ebx,4)
  0xa7562ff6: push   %eax
  0xa7562ff7: call   0xa7563001
  0xa7562ffc: jmp    0xa75630a0
  0xa7563001: lea    0x4(%esp),%eax
  0xa7563005: cmpl   $0x0,-0x8(%ebp)
  0xa756300c: je     0xa7563023
  0xa7563012: push   $0xb7449b58
  0xa7563017: call   0xa756301c
  0xa756301c: pusha  
  0xa756301d: call   0xb6ff5f32
  0xa7563022: hlt    
  0xa7563023: mov    %esi,-0x1c(%ebp)
  0xa7563026: mov    %esp,%edi
  0xa7563028: shr    $0xc,%edi
  0xa756302b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563032: push   %edi
  0xa7563033: mov    %ebp,0x148(%edi)
  0xa7563039: mov    %eax,0x140(%edi)
  0xa756303f: call   0xb6e61e7a
  0xa7563044: add    $0x4,%esp
  0xa7563047: push   %eax
  0xa7563048: mov    %esp,%eax
  0xa756304a: shr    $0xc,%eax
  0xa756304d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563054: cmp    %eax,%edi
  0xa7563056: je     0xa756306d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756305c: push   $0xb74acf8c
  0xa7563061: call   0xa7563066
  0xa7563066: pusha  
  0xa7563067: call   0xb6ff5f32
  0xa756306c: hlt    
  0xa756306d: pop    %eax
  0xa756306e: movl   $0x0,0x140(%edi)
  0xa7563078: movl   $0x0,0x148(%edi)
  0xa7563082: movl   $0x0,0x144(%edi)
  0xa756308c: cmpl   $0x0,0x4(%edi)
  0xa7563093: jne    0xa7556400
  0xa7563099: mov    -0x1c(%ebp),%esi
  0xa756309c: mov    -0x18(%ebp),%edi
  0xa756309f: ret    
  0xa75630a0: movzbl (%esi),%ebx
  0xa75630a3: jmp    *-0x487202e0(,%ebx,4)
  0xa75630aa: push   %eax
  0xa75630ab: call   0xa75630b5
  0xa75630b0: jmp    0xa7563154
  0xa75630b5: lea    0x4(%esp),%eax
  0xa75630b9: cmpl   $0x0,-0x8(%ebp)
  0xa75630c0: je     0xa75630d7
  0xa75630c6: push   $0xb7449b58
  0xa75630cb: call   0xa75630d0
  0xa75630d0: pusha  
  0xa75630d1: call   0xb6ff5f32
  0xa75630d6: hlt    
  0xa75630d7: mov    %esi,-0x1c(%ebp)
  0xa75630da: mov    %esp,%edi
  0xa75630dc: shr    $0xc,%edi
  0xa75630df: mov    -0x4871aba0(,%edi,4),%edi
  0xa75630e6: push   %edi
  0xa75630e7: mov    %ebp,0x148(%edi)
  0xa75630ed: mov    %eax,0x140(%edi)
  0xa75630f3: call   0xb6e61e7a
  0xa75630f8: add    $0x4,%esp
  0xa75630fb: push   %eax
  0xa75630fc: mov    %esp,%eax
  0xa75630fe: shr    $0xc,%eax
  0xa7563101: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563108: cmp    %eax,%edi
  0xa756310a: je     0xa7563121
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563110: push   $0xb74acf8c
  0xa7563115: call   0xa756311a
  0xa756311a: pusha  
  0xa756311b: call   0xb6ff5f32
  0xa7563120: hlt    
  0xa7563121: pop    %eax
  0xa7563122: movl   $0x0,0x140(%edi)
  0xa756312c: movl   $0x0,0x148(%edi)
  0xa7563136: movl   $0x0,0x144(%edi)
  0xa7563140: cmpl   $0x0,0x4(%edi)
  0xa7563147: jne    0xa7556400
  0xa756314d: mov    -0x1c(%ebp),%esi
  0xa7563150: mov    -0x18(%ebp),%edi
  0xa7563153: ret    
  0xa7563154: movzbl (%esi),%ebx
  0xa7563157: jmp    *-0x487202e0(,%ebx,4)
  0xa756315e: push   %eax
  0xa756315f: call   0xa7563169
  0xa7563164: jmp    0xa7563208
  0xa7563169: lea    0x4(%esp),%eax
  0xa756316d: cmpl   $0x0,-0x8(%ebp)
  0xa7563174: je     0xa756318b
  0xa756317a: push   $0xb7449b58
  0xa756317f: call   0xa7563184
  0xa7563184: pusha  
  0xa7563185: call   0xb6ff5f32
  0xa756318a: hlt    
  0xa756318b: mov    %esi,-0x1c(%ebp)
  0xa756318e: mov    %esp,%edi
  0xa7563190: shr    $0xc,%edi
  0xa7563193: mov    -0x4871aba0(,%edi,4),%edi
  0xa756319a: push   %edi
  0xa756319b: mov    %ebp,0x148(%edi)
  0xa75631a1: mov    %eax,0x140(%edi)
  0xa75631a7: call   0xb6e61e7a
  0xa75631ac: add    $0x4,%esp
  0xa75631af: push   %eax
  0xa75631b0: mov    %esp,%eax
  0xa75631b2: shr    $0xc,%eax
  0xa75631b5: mov    -0x4871aba0(,%eax,4),%eax
  0xa75631bc: cmp    %eax,%edi
  0xa75631be: je     0xa75631d5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75631c4: push   $0xb74acf8c
  0xa75631c9: call   0xa75631ce
  0xa75631ce: pusha  
  0xa75631cf: call   0xb6ff5f32
  0xa75631d4: hlt    
  0xa75631d5: pop    %eax
  0xa75631d6: movl   $0x0,0x140(%edi)
  0xa75631e0: movl   $0x0,0x148(%edi)
  0xa75631ea: movl   $0x0,0x144(%edi)
  0xa75631f4: cmpl   $0x0,0x4(%edi)
  0xa75631fb: jne    0xa7556400
  0xa7563201: mov    -0x1c(%ebp),%esi
  0xa7563204: mov    -0x18(%ebp),%edi
  0xa7563207: ret    
  0xa7563208: movzbl (%esi),%ebx
  0xa756320b: jmp    *-0x487202e0(,%ebx,4)
  0xa7563212: nop
  0xa7563213: nop
  0xa7563214: int3   
  0xa7563215: int3   
  0xa7563216: int3   
  0xa7563217: int3   
  0xa7563218: int3   
  0xa7563219: int3   
  0xa756321a: int3   
  0xa756321b: int3   
  0xa756321c: int3   
  0xa756321d: int3   
  0xa756321e: int3   
  0xa756321f: int3   

----------------------------------------------------------------------
exception handling  [0xa7563240, 0xa7563e60]  3104 bytes

  0xa7563240: movl   $0x0,-0x8(%ebp)
  0xa7563247: mov    -0x1c(%ebp),%esi
  0xa756324a: mov    -0x18(%ebp),%edi
  0xa756324d: mov    -0x20(%ebp),%esp
  0xa7563250: movl   $0x0,-0x8(%ebp)
  0xa7563257: emms   
  0xa7563259: call   0xa7563263
  0xa756325e: jmp    0xa7563313
  0xa7563263: push   %eax
  0xa7563264: lea    0x8(%esp),%eax
  0xa7563268: cmpl   $0x0,-0x8(%ebp)
  0xa756326f: je     0xa7563286
  0xa7563275: push   $0xb7449b58
  0xa756327a: call   0xa756327f
  0xa756327f: pusha  
  0xa7563280: call   0xb6ff5f32
  0xa7563285: hlt    
  0xa7563286: mov    %esi,-0x1c(%ebp)
  0xa7563289: mov    %esp,%edi
  0xa756328b: shr    $0xc,%edi
  0xa756328e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563295: push   %edi
  0xa7563296: mov    %ebp,0x148(%edi)
  0xa756329c: mov    %eax,0x140(%edi)
  0xa75632a2: call   0xb6e5d932
  0xa75632a7: add    $0x8,%esp
  0xa75632aa: push   %eax
  0xa75632ab: mov    %esp,%eax
  0xa75632ad: shr    $0xc,%eax
  0xa75632b0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75632b7: cmp    %eax,%edi
  0xa75632b9: je     0xa75632d0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75632bf: push   $0xb74acf8c
  0xa75632c4: call   0xa75632c9
  0xa75632c9: pusha  
  0xa75632ca: call   0xb6ff5f32
  0xa75632cf: hlt    
  0xa75632d0: pop    %eax
  0xa75632d1: movl   $0x0,0x140(%edi)
  0xa75632db: movl   $0x0,0x148(%edi)
  0xa75632e5: movl   $0x0,0x144(%edi)
  0xa75632ef: cmpl   $0x0,0x4(%edi)
  0xa75632f6: jne    0xa7556400
  0xa75632fc: mov    0x170(%edi),%edx
  0xa7563302: movl   $0x0,0x170(%edi)
  0xa756330c: mov    -0x1c(%ebp),%esi
  0xa756330f: mov    -0x18(%ebp),%edi
  0xa7563312: ret    
  0xa7563313: push   %edx
  0xa7563314: jmp    *%eax
  0xa7563316: mov    -0x20(%ebp),%esp
  0xa7563319: movl   $0x0,-0x8(%ebp)
  0xa7563320: emms   
  0xa7563322: mov    %esp,%ecx
  0xa7563324: shr    $0xc,%ecx
  0xa7563327: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756332e: mov    0x1d0(%ecx),%edx
  0xa7563334: or     $0x2,%edx
  0xa7563337: mov    %edx,0x1d0(%ecx)
  0xa756333d: mov    0x4(%ebp),%edx
  0xa7563340: push   %edx
  0xa7563341: call   0xb6e62a52
  0xa7563346: add    $0x4,%esp
  0xa7563349: test   %eax,%eax
  0xa756334b: jne    0xa7563615
  0xa7563351: mov    -0xc(%ebp),%eax
  0xa7563354: mov    0x8(%eax),%eax
  0xa7563357: movzwl 0x24(%eax),%eax
  0xa756335b: shl    $0x2,%eax
  0xa756335e: mov    -0x18(%ebp),%edi
  0xa7563361: sub    %eax,%edi
  0xa7563363: add    $0x4,%edi
  0xa7563366: mov    %esp,%ecx
  0xa7563368: shr    $0xc,%ecx
  0xa756336b: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563372: push   %edi
  0xa7563373: push   %eax
  0xa7563374: push   %ecx
  0xa7563375: call   0xb6cb66fa
  0xa756337a: add    $0xc,%esp
  0xa756337d: mov    %esp,%ecx
  0xa756337f: shr    $0xc,%ecx
  0xa7563382: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563389: mov    0x1a5(%ecx),%bl
  0xa756338f: mov    %ebx,%edi
  0xa7563391: movb   $0x0,0x1a5(%ecx)
  0xa7563398: mov    -0xc(%ebp),%ebx
  0xa756339b: mov    0x14(%ebx),%ecx
  0xa756339e: test   $0x20,%ecx
  0xa75633a4: je     0xa75634a9
  0xa75633aa: mov    %edi,%ecx
  0xa75633ac: test   $0xff,%cl
  0xa75633af: jne    0xa75635b0
  0xa75633b5: lea    -0x28(%ebp),%edx
  0xa75633b8: mov    0x4(%edx),%eax
  0xa75633bb: test   %eax,%eax
  0xa75633bd: jne    0xa75633c8
  0xa75633c3: jmp    0xa75634a9
  0xa75633c8: mov    %esi,-0x1c(%ebp)
  0xa75633cb: lea    (%edx),%eax
  0xa75633cd: mov    0x4(%edx),%ecx
  0xa75633d0: movl   $0x0,0x4(%edx)
  0xa75633d7: mov    (%ecx),%ebx
  0xa75633d9: and    $0x7,%ebx
  0xa75633dc: cmp    $0x5,%ebx
  0xa75633df: je     0xa75634a6
  0xa75633e5: mov    (%eax),%ebx
  0xa75633e7: test   %ebx,%ebx
  0xa75633e9: je     0xa75634a6
  0xa75633ef: lock cmpxchg %ebx,(%ecx)
  0xa75633f3: je     0xa75634a6
  0xa75633f9: mov    %ecx,0x4(%edx)
  0xa75633fc: call   0xa7563406
  0xa7563401: jmp    0xa75634a6
  0xa7563406: push   %edx
  0xa7563407: lea    0x8(%esp),%eax
  0xa756340b: cmpl   $0x0,-0x8(%ebp)
  0xa7563412: je     0xa7563429
  0xa7563418: push   $0xb7449b58
  0xa756341d: call   0xa7563422
  0xa7563422: pusha  
  0xa7563423: call   0xb6ff5f32
  0xa7563428: hlt    
  0xa7563429: mov    %esi,-0x1c(%ebp)
  0xa756342c: mov    %esp,%edi
  0xa756342e: shr    $0xc,%edi
  0xa7563431: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563438: push   %edi
  0xa7563439: mov    %ebp,0x148(%edi)
  0xa756343f: mov    %eax,0x140(%edi)
  0xa7563445: call   0xb6e5ed36
  0xa756344a: add    $0x8,%esp
  0xa756344d: push   %eax
  0xa756344e: mov    %esp,%eax
  0xa7563450: shr    $0xc,%eax
  0xa7563453: mov    -0x4871aba0(,%eax,4),%eax
  0xa756345a: cmp    %eax,%edi
  0xa756345c: je     0xa7563473
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563462: push   $0xb74acf8c
  0xa7563467: call   0xa756346c
  0xa756346c: pusha  
  0xa756346d: call   0xb6ff5f32
  0xa7563472: hlt    
  0xa7563473: pop    %eax
  0xa7563474: movl   $0x0,0x140(%edi)
  0xa756347e: movl   $0x0,0x148(%edi)
  0xa7563488: movl   $0x0,0x144(%edi)
  0xa7563492: cmpl   $0x0,0x4(%edi)
  0xa7563499: jne    0xa7556400
  0xa756349f: mov    -0x1c(%ebp),%esi
  0xa75634a2: mov    -0x18(%ebp),%edi
  0xa75634a5: ret    
  0xa75634a6: mov    -0x1c(%ebp),%esi
  0xa75634a9: mov    -0x20(%ebp),%ecx
  0xa75634ac: lea    -0x20(%ebp),%ebx
  0xa75634af: jmp    0xa75635ac
  0xa75634b4: mov    %ecx,%edx
  0xa75634b6: mov    %esi,-0x1c(%ebp)
  0xa75634b9: lea    (%edx),%eax
  0xa75634bb: mov    0x4(%edx),%ecx
  0xa75634be: movl   $0x0,0x4(%edx)
  0xa75634c5: mov    (%ecx),%ebx
  0xa75634c7: and    $0x7,%ebx
  0xa75634ca: cmp    $0x5,%ebx
  0xa75634cd: je     0xa7563594
  0xa75634d3: mov    (%eax),%ebx
  0xa75634d5: test   %ebx,%ebx
  0xa75634d7: je     0xa7563594
  0xa75634dd: lock cmpxchg %ebx,(%ecx)
  0xa75634e1: je     0xa7563594
  0xa75634e7: mov    %ecx,0x4(%edx)
  0xa75634ea: call   0xa75634f4
  0xa75634ef: jmp    0xa7563594
  0xa75634f4: push   %edx
  0xa75634f5: lea    0x8(%esp),%eax
  0xa75634f9: cmpl   $0x0,-0x8(%ebp)
  0xa7563500: je     0xa7563517
  0xa7563506: push   $0xb7449b58
  0xa756350b: call   0xa7563510
  0xa7563510: pusha  
  0xa7563511: call   0xb6ff5f32
  0xa7563516: hlt    
  0xa7563517: mov    %esi,-0x1c(%ebp)
  0xa756351a: mov    %esp,%edi
  0xa756351c: shr    $0xc,%edi
  0xa756351f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563526: push   %edi
  0xa7563527: mov    %ebp,0x148(%edi)
  0xa756352d: mov    %eax,0x140(%edi)
  0xa7563533: call   0xb6e5ed36
  0xa7563538: add    $0x8,%esp
  0xa756353b: push   %eax
  0xa756353c: mov    %esp,%eax
  0xa756353e: shr    $0xc,%eax
  0xa7563541: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563548: cmp    %eax,%edi
  0xa756354a: je     0xa7563561
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563550: push   $0xb74acf8c
  0xa7563555: call   0xa756355a
  0xa756355a: pusha  
  0xa756355b: call   0xb6ff5f32
  0xa7563560: hlt    
  0xa7563561: pop    %eax
  0xa7563562: movl   $0x0,0x140(%edi)
  0xa756356c: movl   $0x0,0x148(%edi)
  0xa7563576: movl   $0x0,0x144(%edi)
  0xa7563580: cmpl   $0x0,0x4(%edi)
  0xa7563587: jne    0xa7556400
  0xa756358d: mov    -0x1c(%ebp),%esi
  0xa7563590: mov    -0x18(%ebp),%edi
  0xa7563593: ret    
  0xa7563594: mov    -0x1c(%ebp),%esi
  0xa7563597: jmp    0xa75634a9
  0xa756359c: cmpl   $0x0,0x4(%ecx)
  0xa75635a3: jne    0xa75634b4
  0xa75635a9: add    $0x8,%ecx
  0xa75635ac: cmp    %ebx,%ecx
  0xa75635ae: jne    0xa756359c
  0xa75635b0: cmpb   $0x0,0xb78c1e7e
  0xa75635b7: je     0xa75635f4
  0xa75635bd: mov    %esp,%ebx
  0xa75635bf: shr    $0xc,%ebx
  0xa75635c2: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa75635c9: mov    -0xc(%ebp),%ecx
  0xa75635cc: push   %ecx
  0xa75635cd: push   %ebx
  0xa75635ce: cmpl   $0x0,-0x8(%ebp)
  0xa75635d5: je     0xa75635ec
  0xa75635db: push   $0xb7449b18
  0xa75635e0: call   0xa75635e5
  0xa75635e5: pusha  
  0xa75635e6: call   0xb6ff5f32
  0xa75635eb: hlt    
  0xa75635ec: call   0xb7175974
  0xa75635f1: add    $0x8,%esp
  0xa75635f4: mov    -0x4(%ebp),%ebx
  0xa75635f7: mov    %ebp,%esp
  0xa75635f9: pop    %ebp
  0xa75635fa: pop    %edx
  0xa75635fb: mov    %ebx,%esp
  0xa75635fd: mov    %esp,%ecx
  0xa75635ff: shr    $0xc,%ecx
  0xa7563602: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563609: movl   $0x4,0x1d0(%ecx)
  0xa7563613: jmp    *%edx
  0xa7563615: mov    %esp,%ecx
  0xa7563617: shr    $0xc,%ecx
  0xa756361a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563621: mov    0x1a5(%ecx),%bl
  0xa7563627: mov    %ebx,%edi
  0xa7563629: movb   $0x0,0x1a5(%ecx)
  0xa7563630: mov    -0xc(%ebp),%ebx
  0xa7563633: mov    0x14(%ebx),%ecx
  0xa7563636: test   $0x20,%ecx
  0xa756363c: je     0xa7563741
  0xa7563642: mov    %edi,%ecx
  0xa7563644: test   $0xff,%cl
  0xa7563647: jne    0xa7563848
  0xa756364d: lea    -0x28(%ebp),%edx
  0xa7563650: mov    0x4(%edx),%eax
  0xa7563653: test   %eax,%eax
  0xa7563655: jne    0xa7563660
  0xa756365b: jmp    0xa7563741
  0xa7563660: mov    %esi,-0x1c(%ebp)
  0xa7563663: lea    (%edx),%eax
  0xa7563665: mov    0x4(%edx),%ecx
  0xa7563668: movl   $0x0,0x4(%edx)
  0xa756366f: mov    (%ecx),%ebx
  0xa7563671: and    $0x7,%ebx
  0xa7563674: cmp    $0x5,%ebx
  0xa7563677: je     0xa756373e
  0xa756367d: mov    (%eax),%ebx
  0xa756367f: test   %ebx,%ebx
  0xa7563681: je     0xa756373e
  0xa7563687: lock cmpxchg %ebx,(%ecx)
  0xa756368b: je     0xa756373e
  0xa7563691: mov    %ecx,0x4(%edx)
  0xa7563694: call   0xa756369e
  0xa7563699: jmp    0xa756373e
  0xa756369e: push   %edx
  0xa756369f: lea    0x8(%esp),%eax
  0xa75636a3: cmpl   $0x0,-0x8(%ebp)
  0xa75636aa: je     0xa75636c1
  0xa75636b0: push   $0xb7449b58
  0xa75636b5: call   0xa75636ba
  0xa75636ba: pusha  
  0xa75636bb: call   0xb6ff5f32
  0xa75636c0: hlt    
  0xa75636c1: mov    %esi,-0x1c(%ebp)
  0xa75636c4: mov    %esp,%edi
  0xa75636c6: shr    $0xc,%edi
  0xa75636c9: mov    -0x4871aba0(,%edi,4),%edi
  0xa75636d0: push   %edi
  0xa75636d1: mov    %ebp,0x148(%edi)
  0xa75636d7: mov    %eax,0x140(%edi)
  0xa75636dd: call   0xb6e5ed36
  0xa75636e2: add    $0x8,%esp
  0xa75636e5: push   %eax
  0xa75636e6: mov    %esp,%eax
  0xa75636e8: shr    $0xc,%eax
  0xa75636eb: mov    -0x4871aba0(,%eax,4),%eax
  0xa75636f2: cmp    %eax,%edi
  0xa75636f4: je     0xa756370b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75636fa: push   $0xb74acf8c
  0xa75636ff: call   0xa7563704
  0xa7563704: pusha  
  0xa7563705: call   0xb6ff5f32
  0xa756370a: hlt    
  0xa756370b: pop    %eax
  0xa756370c: movl   $0x0,0x140(%edi)
  0xa7563716: movl   $0x0,0x148(%edi)
  0xa7563720: movl   $0x0,0x144(%edi)
  0xa756372a: cmpl   $0x0,0x4(%edi)
  0xa7563731: jne    0xa7556400
  0xa7563737: mov    -0x1c(%ebp),%esi
  0xa756373a: mov    -0x18(%ebp),%edi
  0xa756373d: ret    
  0xa756373e: mov    -0x1c(%ebp),%esi
  0xa7563741: mov    -0x20(%ebp),%ecx
  0xa7563744: lea    -0x20(%ebp),%ebx
  0xa7563747: jmp    0xa7563844
  0xa756374c: mov    %ecx,%edx
  0xa756374e: mov    %esi,-0x1c(%ebp)
  0xa7563751: lea    (%edx),%eax
  0xa7563753: mov    0x4(%edx),%ecx
  0xa7563756: movl   $0x0,0x4(%edx)
  0xa756375d: mov    (%ecx),%ebx
  0xa756375f: and    $0x7,%ebx
  0xa7563762: cmp    $0x5,%ebx
  0xa7563765: je     0xa756382c
  0xa756376b: mov    (%eax),%ebx
  0xa756376d: test   %ebx,%ebx
  0xa756376f: je     0xa756382c
  0xa7563775: lock cmpxchg %ebx,(%ecx)
  0xa7563779: je     0xa756382c
  0xa756377f: mov    %ecx,0x4(%edx)
  0xa7563782: call   0xa756378c
  0xa7563787: jmp    0xa756382c
  0xa756378c: push   %edx
  0xa756378d: lea    0x8(%esp),%eax
  0xa7563791: cmpl   $0x0,-0x8(%ebp)
  0xa7563798: je     0xa75637af
  0xa756379e: push   $0xb7449b58
  0xa75637a3: call   0xa75637a8
  0xa75637a8: pusha  
  0xa75637a9: call   0xb6ff5f32
  0xa75637ae: hlt    
  0xa75637af: mov    %esi,-0x1c(%ebp)
  0xa75637b2: mov    %esp,%edi
  0xa75637b4: shr    $0xc,%edi
  0xa75637b7: mov    -0x4871aba0(,%edi,4),%edi
  0xa75637be: push   %edi
  0xa75637bf: mov    %ebp,0x148(%edi)
  0xa75637c5: mov    %eax,0x140(%edi)
  0xa75637cb: call   0xb6e5ed36
  0xa75637d0: add    $0x8,%esp
  0xa75637d3: push   %eax
  0xa75637d4: mov    %esp,%eax
  0xa75637d6: shr    $0xc,%eax
  0xa75637d9: mov    -0x4871aba0(,%eax,4),%eax
  0xa75637e0: cmp    %eax,%edi
  0xa75637e2: je     0xa75637f9
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75637e8: push   $0xb74acf8c
  0xa75637ed: call   0xa75637f2
  0xa75637f2: pusha  
  0xa75637f3: call   0xb6ff5f32
  0xa75637f8: hlt    
  0xa75637f9: pop    %eax
  0xa75637fa: movl   $0x0,0x140(%edi)
  0xa7563804: movl   $0x0,0x148(%edi)
  0xa756380e: movl   $0x0,0x144(%edi)
  0xa7563818: cmpl   $0x0,0x4(%edi)
  0xa756381f: jne    0xa7556400
  0xa7563825: mov    -0x1c(%ebp),%esi
  0xa7563828: mov    -0x18(%ebp),%edi
  0xa756382b: ret    
  0xa756382c: mov    -0x1c(%ebp),%esi
  0xa756382f: jmp    0xa7563741
  0xa7563834: cmpl   $0x0,0x4(%ecx)
  0xa756383b: jne    0xa756374c
  0xa7563841: add    $0x8,%ecx
  0xa7563844: cmp    %ebx,%ecx
  0xa7563846: jne    0xa7563834
  0xa7563848: cmpb   $0x0,0xb78c1e7e
  0xa756384f: je     0xa756388c
  0xa7563855: mov    %esp,%ebx
  0xa7563857: shr    $0xc,%ebx
  0xa756385a: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7563861: mov    -0xc(%ebp),%ecx
  0xa7563864: push   %ecx
  0xa7563865: push   %ebx
  0xa7563866: cmpl   $0x0,-0x8(%ebp)
  0xa756386d: je     0xa7563884
  0xa7563873: push   $0xb7449b18
  0xa7563878: call   0xa756387d
  0xa756387d: pusha  
  0xa756387e: call   0xb6ff5f32
  0xa7563883: hlt    
  0xa7563884: call   0xb7175974
  0xa7563889: add    $0x8,%esp
  0xa756388c: mov    -0x4(%ebp),%ebx
  0xa756388f: mov    %ebp,%esp
  0xa7563891: pop    %ebp
  0xa7563892: pop    %edx
  0xa7563893: mov    %ebx,%esp
  0xa7563895: mov    %esp,%eax
  0xa7563897: mov    -0x8(%ebp),%ebx
  0xa756389a: mov    %esp,%ecx
  0xa756389c: shr    $0xc,%ecx
  0xa756389f: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75638a6: mov    %ebp,0x148(%ecx)
  0xa75638ac: movl   $0xa75638a6,0x144(%ecx)
  0xa75638b6: mov    %esp,0x140(%ecx)
  0xa75638bc: push   %ebx
  0xa75638bd: push   %eax
  0xa75638be: push   %ecx
  0xa75638bf: call   0xb6e63788
  0xa75638c4: add    $0xc,%esp
  0xa75638c7: mov    %esp,%ecx
  0xa75638c9: shr    $0xc,%ecx
  0xa75638cc: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75638d3: movl   $0x0,0x140(%ecx)
  0xa75638dd: movl   $0x0,0x148(%ecx)
  0xa75638e7: movl   $0x0,0x144(%ecx)
  0xa75638f1: mov    -0x8(%ebp),%esp
  0xa75638f4: movl   $0x0,-0x8(%ebp)
  0xa75638fb: mov    -0x1c(%ebp),%esi
  0xa75638fe: mov    -0x18(%ebp),%edi
  0xa7563901: push   %eax
  0xa7563902: push   %ebx
  0xa7563903: mov    -0xc(%ebp),%ebx
  0xa7563906: mov    0xc(%ebx),%eax
  0xa7563909: test   %eax,%eax
  0xa756390b: je     0xa7563944
  0xa7563911: push   %esi
  0xa7563912: push   %ebx
  0xa7563913: cmpl   $0x0,-0x8(%ebp)
  0xa756391a: je     0xa7563931
  0xa7563920: push   $0xb7449b18
  0xa7563925: call   0xa756392a
  0xa756392a: pusha  
  0xa756392b: call   0xb6ff5f32
  0xa7563930: hlt    
  0xa7563931: call   0xb6e61172
  0xa7563936: add    $0x8,%esp
  0xa7563939: mov    0xc(%ebx),%ebx
  0xa756393c: add    $0xe0,%ebx
  0xa7563942: add    %ebx,%eax
  0xa7563944: mov    %eax,-0x10(%ebp)
  0xa7563947: pop    %ebx
  0xa7563948: pop    %eax
  0xa7563949: mov    %esp,%ecx
  0xa756394b: shr    $0xc,%ecx
  0xa756394e: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563955: movl   $0x0,0x1d0(%ecx)
  0xa756395f: cmpb   $0xb8,(%esi)
  0xa7563962: jne    0xa7563a33
  0xa7563968: mov    -0xc(%ebp),%edx
  0xa756396b: mov    (%edi),%eax
  0xa756396d: call   0xa7563977
  0xa7563972: jmp    0xa7563a29
  0xa7563977: push   %esi
  0xa7563978: push   %edx
  0xa7563979: push   %eax
  0xa756397a: lea    0x10(%esp),%eax
  0xa756397e: cmpl   $0x0,-0x8(%ebp)
  0xa7563985: je     0xa756399c
  0xa756398b: push   $0xb7449b58
  0xa7563990: call   0xa7563995
  0xa7563995: pusha  
  0xa7563996: call   0xb6ff5f32
  0xa756399b: hlt    
  0xa756399c: mov    %esi,-0x1c(%ebp)
  0xa756399f: mov    %esp,%edi
  0xa75639a1: shr    $0xc,%edi
  0xa75639a4: mov    -0x4871aba0(,%edi,4),%edi
  0xa75639ab: push   %edi
  0xa75639ac: mov    %ebp,0x148(%edi)
  0xa75639b2: mov    %eax,0x140(%edi)
  0xa75639b8: call   0xb6e63ad2
  0xa75639bd: add    $0x10,%esp
  0xa75639c0: push   %eax
  0xa75639c1: mov    %esp,%eax
  0xa75639c3: shr    $0xc,%eax
  0xa75639c6: mov    -0x4871aba0(,%eax,4),%eax
  0xa75639cd: cmp    %eax,%edi
  0xa75639cf: je     0xa75639e6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75639d5: push   $0xb74acf8c
  0xa75639da: call   0xa75639df
  0xa75639df: pusha  
  0xa75639e0: call   0xb6ff5f32
  0xa75639e5: hlt    
  0xa75639e6: pop    %eax
  0xa75639e7: movl   $0x0,0x140(%edi)
  0xa75639f1: movl   $0x0,0x148(%edi)
  0xa75639fb: movl   $0x0,0x144(%edi)
  0xa7563a05: cmpl   $0x0,0x4(%edi)
  0xa7563a0c: jne    0xa7556400
  0xa7563a12: mov    0x170(%edi),%eax
  0xa7563a18: movl   $0x0,0x170(%edi)
  0xa7563a22: mov    -0x1c(%ebp),%esi
  0xa7563a25: mov    -0x18(%ebp),%edi
  0xa7563a28: ret    
  0xa7563a29: test   %eax,%eax
  0xa7563a2b: je     0xa7563a33
  0xa7563a31: mov    %eax,(%ebx)
  0xa7563a33: movzbl (%esi),%ebx
  0xa7563a36: jmp    *-0x48722ae0(,%ebx,4)
  0xa7563a3d: pop    %eax
  0xa7563a3e: mov    %esp,%ecx
  0xa7563a40: shr    $0xc,%ecx
  0xa7563a43: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563a4a: mov    %eax,0x170(%ecx)
  0xa7563a50: mov    %esp,%ecx
  0xa7563a52: shr    $0xc,%ecx
  0xa7563a55: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563a5c: mov    0x1a5(%ecx),%bl
  0xa7563a62: mov    %ebx,%edi
  0xa7563a64: movb   $0x0,0x1a5(%ecx)
  0xa7563a6b: mov    -0xc(%ebp),%ebx
  0xa7563a6e: mov    0x14(%ebx),%ecx
  0xa7563a71: test   $0x20,%ecx
  0xa7563a77: je     0xa7563c27
  0xa7563a7d: mov    %edi,%ecx
  0xa7563a7f: test   $0xff,%cl
  0xa7563a82: jne    0xa7563dd9
  0xa7563a88: lea    -0x28(%ebp),%edx
  0xa7563a8b: mov    0x4(%edx),%eax
  0xa7563a8e: test   %eax,%eax
  0xa7563a90: jne    0xa7563b46
  0xa7563a96: emms   
  0xa7563a98: call   0xa7563aa2
  0xa7563a9d: jmp    0xa7563b41
  0xa7563aa2: lea    0x4(%esp),%eax
  0xa7563aa6: cmpl   $0x0,-0x8(%ebp)
  0xa7563aad: je     0xa7563ac4
  0xa7563ab3: push   $0xb7449b58
  0xa7563ab8: call   0xa7563abd
  0xa7563abd: pusha  
  0xa7563abe: call   0xb6ff5f32
  0xa7563ac3: hlt    
  0xa7563ac4: mov    %esi,-0x1c(%ebp)
  0xa7563ac7: mov    %esp,%edi
  0xa7563ac9: shr    $0xc,%edi
  0xa7563acc: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563ad3: push   %edi
  0xa7563ad4: mov    %ebp,0x148(%edi)
  0xa7563ada: mov    %eax,0x140(%edi)
  0xa7563ae0: call   0xb6e5f194
  0xa7563ae5: add    $0x4,%esp
  0xa7563ae8: push   %eax
  0xa7563ae9: mov    %esp,%eax
  0xa7563aeb: shr    $0xc,%eax
  0xa7563aee: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563af5: cmp    %eax,%edi
  0xa7563af7: je     0xa7563b0e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563afd: push   $0xb74acf8c
  0xa7563b02: call   0xa7563b07
  0xa7563b07: pusha  
  0xa7563b08: call   0xb6ff5f32
  0xa7563b0d: hlt    
  0xa7563b0e: pop    %eax
  0xa7563b0f: movl   $0x0,0x140(%edi)
  0xa7563b19: movl   $0x0,0x148(%edi)
  0xa7563b23: movl   $0x0,0x144(%edi)
  0xa7563b2d: cmpl   $0x0,0x4(%edi)
  0xa7563b34: jne    0xa7556400
  0xa7563b3a: mov    -0x1c(%ebp),%esi
  0xa7563b3d: mov    -0x18(%ebp),%edi
  0xa7563b40: ret    
  0xa7563b41: jmp    0xa7563c27
  0xa7563b46: mov    %esi,-0x1c(%ebp)
  0xa7563b49: lea    (%edx),%eax
  0xa7563b4b: mov    0x4(%edx),%ecx
  0xa7563b4e: movl   $0x0,0x4(%edx)
  0xa7563b55: mov    (%ecx),%ebx
  0xa7563b57: and    $0x7,%ebx
  0xa7563b5a: cmp    $0x5,%ebx
  0xa7563b5d: je     0xa7563c24
  0xa7563b63: mov    (%eax),%ebx
  0xa7563b65: test   %ebx,%ebx
  0xa7563b67: je     0xa7563c24
  0xa7563b6d: lock cmpxchg %ebx,(%ecx)
  0xa7563b71: je     0xa7563c24
  0xa7563b77: mov    %ecx,0x4(%edx)
  0xa7563b7a: call   0xa7563b84
  0xa7563b7f: jmp    0xa7563c24
  0xa7563b84: push   %edx
  0xa7563b85: lea    0x8(%esp),%eax
  0xa7563b89: cmpl   $0x0,-0x8(%ebp)
  0xa7563b90: je     0xa7563ba7
  0xa7563b96: push   $0xb7449b58
  0xa7563b9b: call   0xa7563ba0
  0xa7563ba0: pusha  
  0xa7563ba1: call   0xb6ff5f32
  0xa7563ba6: hlt    
  0xa7563ba7: mov    %esi,-0x1c(%ebp)
  0xa7563baa: mov    %esp,%edi
  0xa7563bac: shr    $0xc,%edi
  0xa7563baf: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563bb6: push   %edi
  0xa7563bb7: mov    %ebp,0x148(%edi)
  0xa7563bbd: mov    %eax,0x140(%edi)
  0xa7563bc3: call   0xb6e5ed36
  0xa7563bc8: add    $0x8,%esp
  0xa7563bcb: push   %eax
  0xa7563bcc: mov    %esp,%eax
  0xa7563bce: shr    $0xc,%eax
  0xa7563bd1: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563bd8: cmp    %eax,%edi
  0xa7563bda: je     0xa7563bf1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563be0: push   $0xb74acf8c
  0xa7563be5: call   0xa7563bea
  0xa7563bea: pusha  
  0xa7563beb: call   0xb6ff5f32
  0xa7563bf0: hlt    
  0xa7563bf1: pop    %eax
  0xa7563bf2: movl   $0x0,0x140(%edi)
  0xa7563bfc: movl   $0x0,0x148(%edi)
  0xa7563c06: movl   $0x0,0x144(%edi)
  0xa7563c10: cmpl   $0x0,0x4(%edi)
  0xa7563c17: jne    0xa7556400
  0xa7563c1d: mov    -0x1c(%ebp),%esi
  0xa7563c20: mov    -0x18(%ebp),%edi
  0xa7563c23: ret    
  0xa7563c24: mov    -0x1c(%ebp),%esi
  0xa7563c27: mov    -0x20(%ebp),%ecx
  0xa7563c2a: lea    -0x20(%ebp),%ebx
  0xa7563c2d: jmp    0xa7563dd5
  0xa7563c32: mov    %ecx,%edx
  0xa7563c34: mov    %esi,-0x1c(%ebp)
  0xa7563c37: lea    (%edx),%eax
  0xa7563c39: mov    0x4(%edx),%ecx
  0xa7563c3c: movl   $0x0,0x4(%edx)
  0xa7563c43: mov    (%ecx),%ebx
  0xa7563c45: and    $0x7,%ebx
  0xa7563c48: cmp    $0x5,%ebx
  0xa7563c4b: je     0xa7563d12
  0xa7563c51: mov    (%eax),%ebx
  0xa7563c53: test   %ebx,%ebx
  0xa7563c55: je     0xa7563d12
  0xa7563c5b: lock cmpxchg %ebx,(%ecx)
  0xa7563c5f: je     0xa7563d12
  0xa7563c65: mov    %ecx,0x4(%edx)
  0xa7563c68: call   0xa7563c72
  0xa7563c6d: jmp    0xa7563d12
  0xa7563c72: push   %edx
  0xa7563c73: lea    0x8(%esp),%eax
  0xa7563c77: cmpl   $0x0,-0x8(%ebp)
  0xa7563c7e: je     0xa7563c95
  0xa7563c84: push   $0xb7449b58
  0xa7563c89: call   0xa7563c8e
  0xa7563c8e: pusha  
  0xa7563c8f: call   0xb6ff5f32
  0xa7563c94: hlt    
  0xa7563c95: mov    %esi,-0x1c(%ebp)
  0xa7563c98: mov    %esp,%edi
  0xa7563c9a: shr    $0xc,%edi
  0xa7563c9d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563ca4: push   %edi
  0xa7563ca5: mov    %ebp,0x148(%edi)
  0xa7563cab: mov    %eax,0x140(%edi)
  0xa7563cb1: call   0xb6e5ed36
  0xa7563cb6: add    $0x8,%esp
  0xa7563cb9: push   %eax
  0xa7563cba: mov    %esp,%eax
  0xa7563cbc: shr    $0xc,%eax
  0xa7563cbf: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563cc6: cmp    %eax,%edi
  0xa7563cc8: je     0xa7563cdf
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563cce: push   $0xb74acf8c
  0xa7563cd3: call   0xa7563cd8
  0xa7563cd8: pusha  
  0xa7563cd9: call   0xb6ff5f32
  0xa7563cde: hlt    
  0xa7563cdf: pop    %eax
  0xa7563ce0: movl   $0x0,0x140(%edi)
  0xa7563cea: movl   $0x0,0x148(%edi)
  0xa7563cf4: movl   $0x0,0x144(%edi)
  0xa7563cfe: cmpl   $0x0,0x4(%edi)
  0xa7563d05: jne    0xa7556400
  0xa7563d0b: mov    -0x1c(%ebp),%esi
  0xa7563d0e: mov    -0x18(%ebp),%edi
  0xa7563d11: ret    
  0xa7563d12: mov    -0x1c(%ebp),%esi
  0xa7563d15: emms   
  0xa7563d17: call   0xa7563d21
  0xa7563d1c: jmp    0xa7563dc0
  0xa7563d21: lea    0x4(%esp),%eax
  0xa7563d25: cmpl   $0x0,-0x8(%ebp)
  0xa7563d2c: je     0xa7563d43
  0xa7563d32: push   $0xb7449b58
  0xa7563d37: call   0xa7563d3c
  0xa7563d3c: pusha  
  0xa7563d3d: call   0xb6ff5f32
  0xa7563d42: hlt    
  0xa7563d43: mov    %esi,-0x1c(%ebp)
  0xa7563d46: mov    %esp,%edi
  0xa7563d48: shr    $0xc,%edi
  0xa7563d4b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563d52: push   %edi
  0xa7563d53: mov    %ebp,0x148(%edi)
  0xa7563d59: mov    %eax,0x140(%edi)
  0xa7563d5f: call   0xb6e5f194
  0xa7563d64: add    $0x4,%esp
  0xa7563d67: push   %eax
  0xa7563d68: mov    %esp,%eax
  0xa7563d6a: shr    $0xc,%eax
  0xa7563d6d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563d74: cmp    %eax,%edi
  0xa7563d76: je     0xa7563d8d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563d7c: push   $0xb74acf8c
  0xa7563d81: call   0xa7563d86
  0xa7563d86: pusha  
  0xa7563d87: call   0xb6ff5f32
  0xa7563d8c: hlt    
  0xa7563d8d: pop    %eax
  0xa7563d8e: movl   $0x0,0x140(%edi)
  0xa7563d98: movl   $0x0,0x148(%edi)
  0xa7563da2: movl   $0x0,0x144(%edi)
  0xa7563dac: cmpl   $0x0,0x4(%edi)
  0xa7563db3: jne    0xa7556400
  0xa7563db9: mov    -0x1c(%ebp),%esi
  0xa7563dbc: mov    -0x18(%ebp),%edi
  0xa7563dbf: ret    
  0xa7563dc0: jmp    0xa7563c27
  0xa7563dc5: cmpl   $0x0,0x4(%ecx)
  0xa7563dcc: jne    0xa7563c32
  0xa7563dd2: add    $0x8,%ecx
  0xa7563dd5: cmp    %ebx,%ecx
  0xa7563dd7: jne    0xa7563dc5
  0xa7563dd9: cmpb   $0x0,0xb78c1e7e
  0xa7563de0: je     0xa7563e1d
  0xa7563de6: mov    %esp,%ebx
  0xa7563de8: shr    $0xc,%ebx
  0xa7563deb: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7563df2: mov    -0xc(%ebp),%ecx
  0xa7563df5: push   %ecx
  0xa7563df6: push   %ebx
  0xa7563df7: cmpl   $0x0,-0x8(%ebp)
  0xa7563dfe: je     0xa7563e15
  0xa7563e04: push   $0xb7449b18
  0xa7563e09: call   0xa7563e0e
  0xa7563e0e: pusha  
  0xa7563e0f: call   0xb6ff5f32
  0xa7563e14: hlt    
  0xa7563e15: call   0xb7175974
  0xa7563e1a: add    $0x8,%esp
  0xa7563e1d: mov    -0x4(%ebp),%ebx
  0xa7563e20: mov    %ebp,%esp
  0xa7563e22: pop    %ebp
  0xa7563e23: pop    %edx
  0xa7563e24: mov    %ebx,%esp
  0xa7563e26: mov    %esp,%ecx
  0xa7563e28: shr    $0xc,%ecx
  0xa7563e2b: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7563e32: mov    0x170(%ecx),%eax
  0xa7563e38: movl   $0x0,0x170(%ecx)
  0xa7563e42: push   %eax
  0xa7563e43: push   %edx
  0xa7563e44: push   %edx
  0xa7563e45: push   %ecx
  0xa7563e46: call   0xb7173228
  0xa7563e4b: add    $0x8,%esp
  0xa7563e4e: mov    %eax,%ebx
  0xa7563e50: pop    %edx
  0xa7563e51: pop    %eax
  0xa7563e52: jmp    *%ebx
  0xa7563e54: int3   
  0xa7563e55: int3   
  0xa7563e56: int3   
  0xa7563e57: int3   
  0xa7563e58: int3   
  0xa7563e59: int3   
  0xa7563e5a: int3   
  0xa7563e5b: int3   
  0xa7563e5c: int3   
  0xa7563e5d: int3   
  0xa7563e5e: int3   
  0xa7563e5f: int3   

----------------------------------------------------------------------
throw exception entrypoints  [0xa7563e80, 0xa7564360]  1248 bytes

  0xa7563e80: mov    -0x20(%ebp),%esp
  0xa7563e83: movl   $0x0,-0x8(%ebp)
  0xa7563e8a: emms   
  0xa7563e8c: mov    $0xb7560d94,%eax
  0xa7563e91: call   0xa7563e9b
  0xa7563e96: jmp    0xa7563f3c
  0xa7563e9b: push   %ebx
  0xa7563e9c: push   %eax
  0xa7563e9d: lea    0xc(%esp),%eax
  0xa7563ea1: cmpl   $0x0,-0x8(%ebp)
  0xa7563ea8: je     0xa7563ebf
  0xa7563eae: push   $0xb7449b58
  0xa7563eb3: call   0xa7563eb8
  0xa7563eb8: pusha  
  0xa7563eb9: call   0xb6ff5f32
  0xa7563ebe: hlt    
  0xa7563ebf: mov    %esi,-0x1c(%ebp)
  0xa7563ec2: mov    %esp,%edi
  0xa7563ec4: shr    $0xc,%edi
  0xa7563ec7: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563ece: push   %edi
  0xa7563ecf: mov    %ebp,0x148(%edi)
  0xa7563ed5: mov    %eax,0x140(%edi)
  0xa7563edb: call   0xb6e5d4ea
  0xa7563ee0: add    $0xc,%esp
  0xa7563ee3: push   %eax
  0xa7563ee4: mov    %esp,%eax
  0xa7563ee6: shr    $0xc,%eax
  0xa7563ee9: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563ef0: cmp    %eax,%edi
  0xa7563ef2: je     0xa7563f09
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563ef8: push   $0xb74acf8c
  0xa7563efd: call   0xa7563f02
  0xa7563f02: pusha  
  0xa7563f03: call   0xb6ff5f32
  0xa7563f08: hlt    
  0xa7563f09: pop    %eax
  0xa7563f0a: movl   $0x0,0x140(%edi)
  0xa7563f14: movl   $0x0,0x148(%edi)
  0xa7563f1e: movl   $0x0,0x144(%edi)
  0xa7563f28: cmpl   $0x0,0x4(%edi)
  0xa7563f2f: jne    0xa7556400
  0xa7563f35: mov    -0x1c(%ebp),%esi
  0xa7563f38: mov    -0x18(%ebp),%edi
  0xa7563f3b: ret    
  0xa7563f3c: pop    %ebx
  0xa7563f3d: mov    -0x20(%ebp),%esp
  0xa7563f40: movl   $0x0,-0x8(%ebp)
  0xa7563f47: emms   
  0xa7563f49: mov    $0xb7560dbd,%eax
  0xa7563f4e: call   0xa7563f58
  0xa7563f53: jmp    0xa7564009
  0xa7563f58: push   %ebx
  0xa7563f59: push   %eax
  0xa7563f5a: lea    0xc(%esp),%eax
  0xa7563f5e: cmpl   $0x0,-0x8(%ebp)
  0xa7563f65: je     0xa7563f7c
  0xa7563f6b: push   $0xb7449b58
  0xa7563f70: call   0xa7563f75
  0xa7563f75: pusha  
  0xa7563f76: call   0xb6ff5f32
  0xa7563f7b: hlt    
  0xa7563f7c: mov    %esi,-0x1c(%ebp)
  0xa7563f7f: mov    %esp,%edi
  0xa7563f81: shr    $0xc,%edi
  0xa7563f84: mov    -0x4871aba0(,%edi,4),%edi
  0xa7563f8b: push   %edi
  0xa7563f8c: mov    %ebp,0x148(%edi)
  0xa7563f92: mov    %eax,0x140(%edi)
  0xa7563f98: call   0xb6e5d232
  0xa7563f9d: add    $0xc,%esp
  0xa7563fa0: push   %eax
  0xa7563fa1: mov    %esp,%eax
  0xa7563fa3: shr    $0xc,%eax
  0xa7563fa6: mov    -0x4871aba0(,%eax,4),%eax
  0xa7563fad: cmp    %eax,%edi
  0xa7563faf: je     0xa7563fc6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7563fb5: push   $0xb74acf8c
  0xa7563fba: call   0xa7563fbf
  0xa7563fbf: pusha  
  0xa7563fc0: call   0xb6ff5f32
  0xa7563fc5: hlt    
  0xa7563fc6: pop    %eax
  0xa7563fc7: movl   $0x0,0x140(%edi)
  0xa7563fd1: movl   $0x0,0x148(%edi)
  0xa7563fdb: movl   $0x0,0x144(%edi)
  0xa7563fe5: cmpl   $0x0,0x4(%edi)
  0xa7563fec: jne    0xa7556400
  0xa7563ff2: mov    0x170(%edi),%eax
  0xa7563ff8: movl   $0x0,0x170(%edi)
  0xa7564002: mov    -0x1c(%ebp),%esi
  0xa7564005: mov    -0x18(%ebp),%edi
  0xa7564008: ret    
  0xa7564009: jmp    0xa756324d
  0xa756400e: mov    -0x20(%ebp),%esp
  0xa7564011: movl   $0x0,-0x8(%ebp)
  0xa7564018: emms   
  0xa756401a: mov    $0xb7560de5,%eax
  0xa756401f: mov    $0xb7560ddb,%ebx
  0xa7564024: call   0xa756402e
  0xa7564029: jmp    0xa75640df
  0xa756402e: push   %ebx
  0xa756402f: push   %eax
  0xa7564030: lea    0xc(%esp),%eax
  0xa7564034: cmpl   $0x0,-0x8(%ebp)
  0xa756403b: je     0xa7564052
  0xa7564041: push   $0xb7449b58
  0xa7564046: call   0xa756404b
  0xa756404b: pusha  
  0xa756404c: call   0xb6ff5f32
  0xa7564051: hlt    
  0xa7564052: mov    %esi,-0x1c(%ebp)
  0xa7564055: mov    %esp,%edi
  0xa7564057: shr    $0xc,%edi
  0xa756405a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564061: push   %edi
  0xa7564062: mov    %ebp,0x148(%edi)
  0xa7564068: mov    %eax,0x140(%edi)
  0xa756406e: call   0xb6e5cf64
  0xa7564073: add    $0xc,%esp
  0xa7564076: push   %eax
  0xa7564077: mov    %esp,%eax
  0xa7564079: shr    $0xc,%eax
  0xa756407c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564083: cmp    %eax,%edi
  0xa7564085: je     0xa756409c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756408b: push   $0xb74acf8c
  0xa7564090: call   0xa7564095
  0xa7564095: pusha  
  0xa7564096: call   0xb6ff5f32
  0xa756409b: hlt    
  0xa756409c: pop    %eax
  0xa756409d: movl   $0x0,0x140(%edi)
  0xa75640a7: movl   $0x0,0x148(%edi)
  0xa75640b1: movl   $0x0,0x144(%edi)
  0xa75640bb: cmpl   $0x0,0x4(%edi)
  0xa75640c2: jne    0xa7556400
  0xa75640c8: mov    0x170(%edi),%eax
  0xa75640ce: movl   $0x0,0x170(%edi)
  0xa75640d8: mov    -0x1c(%ebp),%esi
  0xa75640db: mov    -0x18(%ebp),%edi
  0xa75640de: ret    
  0xa75640df: jmp    0xa756324d
  0xa75640e4: pop    %eax
  0xa75640e5: mov    -0x20(%ebp),%esp
  0xa75640e8: movl   $0x0,-0x8(%ebp)
  0xa75640ef: emms   
  0xa75640f1: call   0xa75640fb
  0xa75640f6: jmp    0xa756419b
  0xa75640fb: push   %eax
  0xa75640fc: lea    0x8(%esp),%eax
  0xa7564100: cmpl   $0x0,-0x8(%ebp)
  0xa7564107: je     0xa756411e
  0xa756410d: push   $0xb7449b58
  0xa7564112: call   0xa7564117
  0xa7564117: pusha  
  0xa7564118: call   0xb6ff5f32
  0xa756411d: hlt    
  0xa756411e: mov    %esi,-0x1c(%ebp)
  0xa7564121: mov    %esp,%edi
  0xa7564123: shr    $0xc,%edi
  0xa7564126: mov    -0x4871aba0(,%edi,4),%edi
  0xa756412d: push   %edi
  0xa756412e: mov    %ebp,0x148(%edi)
  0xa7564134: mov    %eax,0x140(%edi)
  0xa756413a: call   0xb6e5d730
  0xa756413f: add    $0x8,%esp
  0xa7564142: push   %eax
  0xa7564143: mov    %esp,%eax
  0xa7564145: shr    $0xc,%eax
  0xa7564148: mov    -0x4871aba0(,%eax,4),%eax
  0xa756414f: cmp    %eax,%edi
  0xa7564151: je     0xa7564168
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564157: push   $0xb74acf8c
  0xa756415c: call   0xa7564161
  0xa7564161: pusha  
  0xa7564162: call   0xb6ff5f32
  0xa7564167: hlt    
  0xa7564168: pop    %eax
  0xa7564169: movl   $0x0,0x140(%edi)
  0xa7564173: movl   $0x0,0x148(%edi)
  0xa756417d: movl   $0x0,0x144(%edi)
  0xa7564187: cmpl   $0x0,0x4(%edi)
  0xa756418e: jne    0xa7556400
  0xa7564194: mov    -0x1c(%ebp),%esi
  0xa7564197: mov    -0x18(%ebp),%edi
  0xa756419a: ret    
  0xa756419b: mov    -0x20(%ebp),%esp
  0xa756419e: movl   $0x0,-0x8(%ebp)
  0xa75641a5: emms   
  0xa75641a7: mov    $0xb7560e04,%eax
  0xa75641ac: mov    $0x0,%ebx
  0xa75641b1: call   0xa75641bb
  0xa75641b6: jmp    0xa756426c
  0xa75641bb: push   %ebx
  0xa75641bc: push   %eax
  0xa75641bd: lea    0xc(%esp),%eax
  0xa75641c1: cmpl   $0x0,-0x8(%ebp)
  0xa75641c8: je     0xa75641df
  0xa75641ce: push   $0xb7449b58
  0xa75641d3: call   0xa75641d8
  0xa75641d8: pusha  
  0xa75641d9: call   0xb6ff5f32
  0xa75641de: hlt    
  0xa75641df: mov    %esi,-0x1c(%ebp)
  0xa75641e2: mov    %esp,%edi
  0xa75641e4: shr    $0xc,%edi
  0xa75641e7: mov    -0x4871aba0(,%edi,4),%edi
  0xa75641ee: push   %edi
  0xa75641ef: mov    %ebp,0x148(%edi)
  0xa75641f5: mov    %eax,0x140(%edi)
  0xa75641fb: call   0xb6e5cf64
  0xa7564200: add    $0xc,%esp
  0xa7564203: push   %eax
  0xa7564204: mov    %esp,%eax
  0xa7564206: shr    $0xc,%eax
  0xa7564209: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564210: cmp    %eax,%edi
  0xa7564212: je     0xa7564229
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564218: push   $0xb74acf8c
  0xa756421d: call   0xa7564222
  0xa7564222: pusha  
  0xa7564223: call   0xb6ff5f32
  0xa7564228: hlt    
  0xa7564229: pop    %eax
  0xa756422a: movl   $0x0,0x140(%edi)
  0xa7564234: movl   $0x0,0x148(%edi)
  0xa756423e: movl   $0x0,0x144(%edi)
  0xa7564248: cmpl   $0x0,0x4(%edi)
  0xa756424f: jne    0xa7556400
  0xa7564255: mov    0x170(%edi),%eax
  0xa756425b: movl   $0x0,0x170(%edi)
  0xa7564265: mov    -0x1c(%ebp),%esi
  0xa7564268: mov    -0x18(%ebp),%edi
  0xa756426b: ret    
  0xa756426c: jmp    0xa756324d
  0xa7564271: lea    -0x20(%ebp),%eax
  0xa7564274: cmp    %esp,%eax
  0xa7564276: jae    0xa756428d
  0xa756427c: push   $0xb7562030
  0xa7564281: call   0xa7564286
  0xa7564286: pusha  
  0xa7564287: call   0xb6ff5f32
  0xa756428c: hlt    
  0xa756428d: mov    -0x1c(%ebp),%esi
  0xa7564290: mov    -0x20(%ebp),%esp
  0xa7564293: movl   $0x0,-0x8(%ebp)
  0xa756429a: emms   
  0xa756429c: call   0xa75642a6
  0xa75642a1: jmp    0xa7564345
  0xa75642a6: lea    0x4(%esp),%eax
  0xa75642aa: cmpl   $0x0,-0x8(%ebp)
  0xa75642b1: je     0xa75642c8
  0xa75642b7: push   $0xb7449b58
  0xa75642bc: call   0xa75642c1
  0xa75642c1: pusha  
  0xa75642c2: call   0xb6ff5f32
  0xa75642c7: hlt    
  0xa75642c8: mov    %esi,-0x1c(%ebp)
  0xa75642cb: mov    %esp,%edi
  0xa75642cd: shr    $0xc,%edi
  0xa75642d0: mov    -0x4871aba0(,%edi,4),%edi
  0xa75642d7: push   %edi
  0xa75642d8: mov    %ebp,0x148(%edi)
  0xa75642de: mov    %eax,0x140(%edi)
  0xa75642e4: call   0xb6e5cda6
  0xa75642e9: add    $0x4,%esp
  0xa75642ec: push   %eax
  0xa75642ed: mov    %esp,%eax
  0xa75642ef: shr    $0xc,%eax
  0xa75642f2: mov    -0x4871aba0(,%eax,4),%eax
  0xa75642f9: cmp    %eax,%edi
  0xa75642fb: je     0xa7564312
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564301: push   $0xb74acf8c
  0xa7564306: call   0xa756430b
  0xa756430b: pusha  
  0xa756430c: call   0xb6ff5f32
  0xa7564311: hlt    
  0xa7564312: pop    %eax
  0xa7564313: movl   $0x0,0x140(%edi)
  0xa756431d: movl   $0x0,0x148(%edi)
  0xa7564327: movl   $0x0,0x144(%edi)
  0xa7564331: cmpl   $0x0,0x4(%edi)
  0xa7564338: jne    0xa7556400
  0xa756433e: mov    -0x1c(%ebp),%esi
  0xa7564341: mov    -0x18(%ebp),%edi
  0xa7564344: ret    
  0xa7564345: nop
  0xa7564346: nop
  0xa7564347: nop
  0xa7564348: int3   
  0xa7564349: int3   
  0xa756434a: int3   
  0xa756434b: int3   
  0xa756434c: int3   
  0xa756434d: int3   
  0xa756434e: int3   
  0xa756434f: int3   
  0xa7564350: int3   
  0xa7564351: int3   
  0xa7564352: int3   
  0xa7564353: int3   
  0xa7564354: int3   
  0xa7564355: int3   
  0xa7564356: int3   
  0xa7564357: int3   
  0xa7564358: int3   
  0xa7564359: int3   
  0xa756435a: int3   
  0xa756435b: int3   
  0xa756435c: int3   
  0xa756435d: int3   
  0xa756435e: int3   
  0xa756435f: int3   

----------------------------------------------------------------------
method entry point (kind = zerolocals)  [0xa7564380, 0xa75648c0]  1344 bytes

  0xa7564380: mov    0x8(%ebx),%edx
  0xa7564383: movzwl 0x24(%edx),%ecx
  0xa7564387: movzwl 0x22(%edx),%edx
  0xa756438b: sub    %ecx,%edx
  0xa756438d: cmp    $0x3f6,%edx
  0xa7564393: jbe    0xa7564414
  0xa7564399: push   %esi
  0xa756439a: mov    %esp,%esi
  0xa756439c: shr    $0xc,%esi
  0xa756439f: mov    -0x4871aba0(,%esi,4),%esi
  0xa75643a6: lea    0x28(,%edx,4),%eax
  0xa75643ad: cmpl   $0x0,0xd8(%esi)
  0xa75643b7: jne    0xa75643ce
  0xa75643bd: push   $0xb756221c
  0xa75643c2: call   0xa75643c7
  0xa75643c7: pusha  
  0xa75643c8: call   0xb6ff5f32
  0xa75643cd: hlt    
  0xa75643ce: cmpl   $0x0,0xdc(%esi)
  0xa75643d8: jne    0xa75643ef
  0xa75643de: push   $0xb756222f
  0xa75643e3: call   0xa75643e8
  0xa75643e8: pusha  
  0xa75643e9: call   0xb6ff5f32
  0xa75643ee: hlt    
  0xa75643ef: add    0xd8(%esi),%eax
  0xa75643f5: sub    0xdc(%esi),%eax
  0xa75643fb: add    $0x9000,%eax
  0xa7564401: cmp    %eax,%esp
  0xa7564403: ja     0xa7564413
  0xa7564409: pop    %esi
  0xa756440a: pop    %eax
  0xa756440b: mov    %esi,%esp
  0xa756440d: push   %eax
  0xa756440e: jmp    0xa75589e0
  0xa7564413: pop    %esi
  0xa7564414: pop    %eax
  0xa7564415: lea    -0x4(%esp,%ecx,4),%edi
  0xa7564419: test   %edx,%edx
  0xa756441b: jle    0xa7564429
  0xa7564421: push   $0x0
  0xa7564426: dec    %edx
  0xa7564427: jg     0xa7564421
  0xa7564429: push   %eax
  0xa756442a: push   %ebp
  0xa756442b: mov    %esp,%ebp
  0xa756442d: push   %esi
  0xa756442e: push   $0x0
  0xa7564433: mov    0x8(%ebx),%esi
  0xa7564436: lea    0x28(%esi),%esi
  0xa7564439: push   %ebx
  0xa756443a: mov    0xc(%ebx),%edx
  0xa756443d: test   %edx,%edx
  0xa756443f: je     0xa756444b
  0xa7564445: add    $0xe0,%edx
  0xa756444b: push   %edx
  0xa756444c: mov    0x8(%ebx),%edx
  0xa756444f: mov    0x8(%edx),%edx
  0xa7564452: mov    0xc(%edx),%edx
  0xa7564455: push   %edx
  0xa7564456: push   %edi
  0xa7564457: push   %esi
  0xa7564458: push   $0x0
  0xa756445d: mov    %esp,(%esp)
  0xa7564460: mov    0x14(%ebx),%eax
  0xa7564463: test   $0x100,%eax
  0xa7564468: je     0xa756447f
  0xa756446e: push   $0xb7562538
  0xa7564473: call   0xa7564478
  0xa7564478: pusha  
  0xa7564479: call   0xb6ff5f32
  0xa756447e: hlt    
  0xa756447f: test   $0x400,%eax
  0xa7564484: je     0xa756449b
  0xa756448a: push   $0xb75623a4
  0xa756448f: call   0xa7564494
  0xa7564494: pusha  
  0xa7564495: call   0xb6ff5f32
  0xa756449a: hlt    
  0xa756449b: mov    %esp,%eax
  0xa756449d: shr    $0xc,%eax
  0xa75644a0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75644a7: movb   $0x1,0x1a5(%eax)
  0xa75644ae: mov    -0x10(%ebp),%eax
  0xa75644b1: test   %eax,%eax
  0xa75644b3: je     0xa7564527
  0xa75644b9: mov    -0x4(%eax),%ecx
  0xa75644bc: test   %ecx,%ecx
  0xa75644be: js     0xa7564527
  0xa75644c4: add    %ecx,%eax
  0xa75644c6: mov    0x4(%eax),%ecx
  0xa75644c9: sub    $0x2,%ecx
  0xa75644cc: mov    0x8(%eax,%ecx,4),%edx
  0xa75644d0: neg    %edx
  0xa75644d2: mov    (%edi,%edx,4),%edx
  0xa75644d5: test   %edx,%edx
  0xa75644d7: jne    0xa75644e0
  0xa75644d9: orl    $0x1,0xc(%eax,%ecx,4)
  0xa75644de: jmp    0xa7564522
  0xa75644e0: mov    0x4(%edx),%edx
  0xa75644e3: xor    0xc(%eax,%ecx,4),%edx
  0xa75644e7: test   $0xfffffffc,%edx
  0xa75644ed: je     0xa7564522
  0xa75644ef: test   $0x2,%edx
  0xa75644f5: jne    0xa7564522
  0xa75644f7: cmpl   $0x0,0xc(%eax,%ecx,4)
  0xa75644ff: je     0xa756451e
  0xa7564501: cmpl   $0x1,0xc(%eax,%ecx,4)
  0xa7564509: je     0xa756451e
  0xa756450b: xor    0xc(%eax,%ecx,4),%edx
  0xa756450f: test   $0xfffffffc,%edx
  0xa7564515: je     0xa7564522
  0xa7564517: orl    $0x2,0xc(%eax,%ecx,4)
  0xa756451c: jmp    0xa7564522
  0xa756451e: mov    %edx,0xc(%eax,%ecx,4)
  0xa7564522: sub    $0x2,%ecx
  0xa7564525: jns    0xa75644cc
  0xa7564527: mov    0xc(%ebx),%eax
  0xa756452a: test   %eax,%eax
  0xa756452c: je     0xa756454e
  0xa756452e: mov    0xbc(%eax),%ecx
  0xa7564534: add    $0x8,%ecx
  0xa7564537: mov    %ecx,0xbc(%eax)
  0xa756453d: and    $0x3f8,%ecx
  0xa7564543: je     0xa75647f7
  0xa7564549: jmp    0xa7564623
  0xa756454e: mov    0x10(%ebx),%eax
  0xa7564551: test   %eax,%eax
  0xa7564553: jne    0xa756460e
  0xa7564559: call   0xa7564563
  0xa756455e: jmp    0xa7564603
  0xa7564563: push   %ebx
  0xa7564564: lea    0x8(%esp),%eax
  0xa7564568: cmpl   $0x0,-0x8(%ebp)
  0xa756456f: je     0xa7564586
  0xa7564575: push   $0xb7449b58
  0xa756457a: call   0xa756457f
  0xa756457f: pusha  
  0xa7564580: call   0xb6ff5f32
  0xa7564585: hlt    
  0xa7564586: mov    %esi,-0x1c(%ebp)
  0xa7564589: mov    %esp,%edi
  0xa756458b: shr    $0xc,%edi
  0xa756458e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564595: push   %edi
  0xa7564596: mov    %ebp,0x148(%edi)
  0xa756459c: mov    %eax,0x140(%edi)
  0xa75645a2: call   0xb6e61c92
  0xa75645a7: add    $0x8,%esp
  0xa75645aa: push   %eax
  0xa75645ab: mov    %esp,%eax
  0xa75645ad: shr    $0xc,%eax
  0xa75645b0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75645b7: cmp    %eax,%edi
  0xa75645b9: je     0xa75645d0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75645bf: push   $0xb74acf8c
  0xa75645c4: call   0xa75645c9
  0xa75645c9: pusha  
  0xa75645ca: call   0xb6ff5f32
  0xa75645cf: hlt    
  0xa75645d0: pop    %eax
  0xa75645d1: movl   $0x0,0x140(%edi)
  0xa75645db: movl   $0x0,0x148(%edi)
  0xa75645e5: movl   $0x0,0x144(%edi)
  0xa75645ef: cmpl   $0x0,0x4(%edi)
  0xa75645f6: jne    0xa7556400
  0xa75645fc: mov    -0x1c(%ebp),%esi
  0xa75645ff: mov    -0x18(%ebp),%edi
  0xa7564602: ret    
  0xa7564603: mov    0x10(%ebx),%eax
  0xa7564606: test   %eax,%eax
  0xa7564608: je     0xa7564623
  0xa756460e: mov    0x8(%eax),%ecx
  0xa7564611: add    $0x8,%ecx
  0xa7564614: mov    %ecx,0x8(%eax)
  0xa7564617: and    $0x3f8,%ecx
  0xa756461d: je     0xa75647f7
  0xa7564623: mov    %eax,-0x1000(%esp)
  0xa756462a: mov    %eax,-0x2000(%esp)
  0xa7564631: mov    %eax,-0x3000(%esp)
  0xa7564638: mov    %eax,-0x4000(%esp)
  0xa756463f: mov    %eax,-0x5000(%esp)
  0xa7564646: mov    %eax,-0x6000(%esp)
  0xa756464d: mov    %eax,-0x7000(%esp)
  0xa7564654: mov    %eax,-0x8000(%esp)
  0xa756465b: mov    %eax,-0x9000(%esp)
  0xa7564662: mov    %esp,%eax
  0xa7564664: shr    $0xc,%eax
  0xa7564667: mov    -0x4871aba0(,%eax,4),%eax
  0xa756466e: movb   $0x0,0x1a5(%eax)
  0xa7564675: mov    0x14(%ebx),%eax
  0xa7564678: test   $0x20,%eax
  0xa756467d: je     0xa7564694
  0xa7564683: push   $0xb75623d4
  0xa7564688: call   0xa756468d
  0xa756468d: pusha  
  0xa756468e: call   0xb6ff5f32
  0xa7564693: hlt    
  0xa7564694: mov    -0x20(%ebp),%eax
  0xa7564697: cmp    %esp,%eax
  0xa7564699: je     0xa75646b0
  0xa756469f: push   $0xb75623f4
  0xa75646a4: call   0xa75646a9
  0xa75646a9: pusha  
  0xa75646aa: call   0xb6ff5f32
  0xa75646af: hlt    
  0xa75646b0: cmpb   $0x0,0xb78c1e7e
  0xa75646b7: je     0xa75646f4
  0xa75646bd: mov    %esp,%ecx
  0xa75646bf: shr    $0xc,%ecx
  0xa75646c2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75646c9: mov    -0xc(%ebp),%ebx
  0xa75646cc: push   %ebx
  0xa75646cd: push   %ecx
  0xa75646ce: cmpl   $0x0,-0x8(%ebp)
  0xa75646d5: je     0xa75646ec
  0xa75646db: push   $0xb7449b18
  0xa75646e0: call   0xa75646e5
  0xa75646e5: pusha  
  0xa75646e6: call   0xb6ff5f32
  0xa75646eb: hlt    
  0xa75646ec: call   0xb71757d0
  0xa75646f1: add    $0x8,%esp
  0xa75646f4: movzbl (%esi),%ebx
  0xa75646f7: jmp    *-0x48722ae0(,%ebx,4)
  0xa75646fe: call   0xa7564708
  0xa7564703: jmp    0xa75647a7
  0xa7564708: lea    0x4(%esp),%eax
  0xa756470c: cmpl   $0x0,-0x8(%ebp)
  0xa7564713: je     0xa756472a
  0xa7564719: push   $0xb7449b58
  0xa756471e: call   0xa7564723
  0xa7564723: pusha  
  0xa7564724: call   0xb6ff5f32
  0xa7564729: hlt    
  0xa756472a: mov    %esi,-0x1c(%ebp)
  0xa756472d: mov    %esp,%edi
  0xa756472f: shr    $0xc,%edi
  0xa7564732: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564739: push   %edi
  0xa756473a: mov    %ebp,0x148(%edi)
  0xa7564740: mov    %eax,0x140(%edi)
  0xa7564746: call   0xb6e61328
  0xa756474b: add    $0x4,%esp
  0xa756474e: push   %eax
  0xa756474f: mov    %esp,%eax
  0xa7564751: shr    $0xc,%eax
  0xa7564754: mov    -0x4871aba0(,%eax,4),%eax
  0xa756475b: cmp    %eax,%edi
  0xa756475d: je     0xa7564774
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564763: push   $0xb74acf8c
  0xa7564768: call   0xa756476d
  0xa756476d: pusha  
  0xa756476e: call   0xb6ff5f32
  0xa7564773: hlt    
  0xa7564774: pop    %eax
  0xa7564775: movl   $0x0,0x140(%edi)
  0xa756477f: movl   $0x0,0x148(%edi)
  0xa7564789: movl   $0x0,0x144(%edi)
  0xa7564793: cmpl   $0x0,0x4(%edi)
  0xa756479a: jne    0xa7556400
  0xa75647a0: mov    -0x1c(%ebp),%esi
  0xa75647a3: mov    -0x18(%ebp),%edi
  0xa75647a6: ret    
  0xa75647a7: push   %eax
  0xa75647a8: push   %ebx
  0xa75647a9: mov    -0xc(%ebp),%ebx
  0xa75647ac: mov    0xc(%ebx),%eax
  0xa75647af: test   %eax,%eax
  0xa75647b1: je     0xa75647ea
  0xa75647b7: push   %esi
  0xa75647b8: push   %ebx
  0xa75647b9: cmpl   $0x0,-0x8(%ebp)
  0xa75647c0: je     0xa75647d7
  0xa75647c6: push   $0xb7449b18
  0xa75647cb: call   0xa75647d0
  0xa75647d0: pusha  
  0xa75647d1: call   0xb6ff5f32
  0xa75647d6: hlt    
  0xa75647d7: call   0xb6e61172
  0xa75647dc: add    $0x8,%esp
  0xa75647df: mov    0xc(%ebx),%ebx
  0xa75647e2: add    $0xe0,%ebx
  0xa75647e8: add    %ebx,%eax
  0xa75647ea: mov    %eax,-0x10(%ebp)
  0xa75647ed: pop    %ebx
  0xa75647ee: pop    %eax
  0xa75647ef: mov    -0xc(%ebp),%ebx
  0xa75647f2: jmp    0xa7564623
  0xa75647f7: mov    $0x0,%eax
  0xa75647fc: call   0xa7564806
  0xa7564801: jmp    0xa75648a6
  0xa7564806: push   %eax
  0xa7564807: lea    0x8(%esp),%eax
  0xa756480b: cmpl   $0x0,-0x8(%ebp)
  0xa7564812: je     0xa7564829
  0xa7564818: push   $0xb7449b58
  0xa756481d: call   0xa7564822
  0xa7564822: pusha  
  0xa7564823: call   0xb6ff5f32
  0xa7564828: hlt    
  0xa7564829: mov    %esi,-0x1c(%ebp)
  0xa756482c: mov    %esp,%edi
  0xa756482e: shr    $0xc,%edi
  0xa7564831: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564838: push   %edi
  0xa7564839: mov    %ebp,0x148(%edi)
  0xa756483f: mov    %eax,0x140(%edi)
  0xa7564845: call   0xb6e60bc8
  0xa756484a: add    $0x8,%esp
  0xa756484d: push   %eax
  0xa756484e: mov    %esp,%eax
  0xa7564850: shr    $0xc,%eax
  0xa7564853: mov    -0x4871aba0(,%eax,4),%eax
  0xa756485a: cmp    %eax,%edi
  0xa756485c: je     0xa7564873
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564862: push   $0xb74acf8c
  0xa7564867: call   0xa756486c
  0xa756486c: pusha  
  0xa756486d: call   0xb6ff5f32
  0xa7564872: hlt    
  0xa7564873: pop    %eax
  0xa7564874: movl   $0x0,0x140(%edi)
  0xa756487e: movl   $0x0,0x148(%edi)
  0xa7564888: movl   $0x0,0x144(%edi)
  0xa7564892: cmpl   $0x0,0x4(%edi)
  0xa7564899: jne    0xa7556400
  0xa756489f: mov    -0x1c(%ebp),%esi
  0xa75648a2: mov    -0x18(%ebp),%edi
  0xa75648a5: ret    
  0xa75648a6: mov    -0xc(%ebp),%ebx
  0xa75648a9: jmp    0xa7564623
  0xa75648ae: nop
  0xa75648af: nop
  0xa75648b0: int3   
  0xa75648b1: int3   
  0xa75648b2: int3   
  0xa75648b3: int3   
  0xa75648b4: int3   
  0xa75648b5: int3   
  0xa75648b6: int3   
  0xa75648b7: int3   
  0xa75648b8: int3   
  0xa75648b9: int3   
  0xa75648ba: int3   
  0xa75648bb: int3   
  0xa75648bc: int3   
  0xa75648bd: int3   
  0xa75648be: int3   
  0xa75648bf: int3   

----------------------------------------------------------------------
method entry point (kind = zerolocals_synchronized)  [0xa75648e0, 0xa7564fc0]  1760 bytes

  0xa75648e0: mov    0x8(%ebx),%edx
  0xa75648e3: movzwl 0x24(%edx),%ecx
  0xa75648e7: movzwl 0x22(%edx),%edx
  0xa75648eb: sub    %ecx,%edx
  0xa75648ed: cmp    $0x3f6,%edx
  0xa75648f3: jbe    0xa7564974
  0xa75648f9: push   %esi
  0xa75648fa: mov    %esp,%esi
  0xa75648fc: shr    $0xc,%esi
  0xa75648ff: mov    -0x4871aba0(,%esi,4),%esi
  0xa7564906: lea    0x28(,%edx,4),%eax
  0xa756490d: cmpl   $0x0,0xd8(%esi)
  0xa7564917: jne    0xa756492e
  0xa756491d: push   $0xb756221c
  0xa7564922: call   0xa7564927
  0xa7564927: pusha  
  0xa7564928: call   0xb6ff5f32
  0xa756492d: hlt    
  0xa756492e: cmpl   $0x0,0xdc(%esi)
  0xa7564938: jne    0xa756494f
  0xa756493e: push   $0xb756222f
  0xa7564943: call   0xa7564948
  0xa7564948: pusha  
  0xa7564949: call   0xb6ff5f32
  0xa756494e: hlt    
  0xa756494f: add    0xd8(%esi),%eax
  0xa7564955: sub    0xdc(%esi),%eax
  0xa756495b: add    $0x9000,%eax
  0xa7564961: cmp    %eax,%esp
  0xa7564963: ja     0xa7564973
  0xa7564969: pop    %esi
  0xa756496a: pop    %eax
  0xa756496b: mov    %esi,%esp
  0xa756496d: push   %eax
  0xa756496e: jmp    0xa75589e0
  0xa7564973: pop    %esi
  0xa7564974: pop    %eax
  0xa7564975: lea    -0x4(%esp,%ecx,4),%edi
  0xa7564979: test   %edx,%edx
  0xa756497b: jle    0xa7564989
  0xa7564981: push   $0x0
  0xa7564986: dec    %edx
  0xa7564987: jg     0xa7564981
  0xa7564989: push   %eax
  0xa756498a: push   %ebp
  0xa756498b: mov    %esp,%ebp
  0xa756498d: push   %esi
  0xa756498e: push   $0x0
  0xa7564993: mov    0x8(%ebx),%esi
  0xa7564996: lea    0x28(%esi),%esi
  0xa7564999: push   %ebx
  0xa756499a: mov    0xc(%ebx),%edx
  0xa756499d: test   %edx,%edx
  0xa756499f: je     0xa75649ab
  0xa75649a5: add    $0xe0,%edx
  0xa75649ab: push   %edx
  0xa75649ac: mov    0x8(%ebx),%edx
  0xa75649af: mov    0x8(%edx),%edx
  0xa75649b2: mov    0xc(%edx),%edx
  0xa75649b5: push   %edx
  0xa75649b6: push   %edi
  0xa75649b7: push   %esi
  0xa75649b8: push   $0x0
  0xa75649bd: mov    %esp,(%esp)
  0xa75649c0: mov    0x14(%ebx),%eax
  0xa75649c3: test   $0x100,%eax
  0xa75649c8: je     0xa75649df
  0xa75649ce: push   $0xb7562538
  0xa75649d3: call   0xa75649d8
  0xa75649d8: pusha  
  0xa75649d9: call   0xb6ff5f32
  0xa75649de: hlt    
  0xa75649df: test   $0x400,%eax
  0xa75649e4: je     0xa75649fb
  0xa75649ea: push   $0xb75623a4
  0xa75649ef: call   0xa75649f4
  0xa75649f4: pusha  
  0xa75649f5: call   0xb6ff5f32
  0xa75649fa: hlt    
  0xa75649fb: mov    %esp,%eax
  0xa75649fd: shr    $0xc,%eax
  0xa7564a00: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564a07: movb   $0x1,0x1a5(%eax)
  0xa7564a0e: mov    -0x10(%ebp),%eax
  0xa7564a11: test   %eax,%eax
  0xa7564a13: je     0xa7564a87
  0xa7564a19: mov    -0x4(%eax),%ecx
  0xa7564a1c: test   %ecx,%ecx
  0xa7564a1e: js     0xa7564a87
  0xa7564a24: add    %ecx,%eax
  0xa7564a26: mov    0x4(%eax),%ecx
  0xa7564a29: sub    $0x2,%ecx
  0xa7564a2c: mov    0x8(%eax,%ecx,4),%edx
  0xa7564a30: neg    %edx
  0xa7564a32: mov    (%edi,%edx,4),%edx
  0xa7564a35: test   %edx,%edx
  0xa7564a37: jne    0xa7564a40
  0xa7564a39: orl    $0x1,0xc(%eax,%ecx,4)
  0xa7564a3e: jmp    0xa7564a82
  0xa7564a40: mov    0x4(%edx),%edx
  0xa7564a43: xor    0xc(%eax,%ecx,4),%edx
  0xa7564a47: test   $0xfffffffc,%edx
  0xa7564a4d: je     0xa7564a82
  0xa7564a4f: test   $0x2,%edx
  0xa7564a55: jne    0xa7564a82
  0xa7564a57: cmpl   $0x0,0xc(%eax,%ecx,4)
  0xa7564a5f: je     0xa7564a7e
  0xa7564a61: cmpl   $0x1,0xc(%eax,%ecx,4)
  0xa7564a69: je     0xa7564a7e
  0xa7564a6b: xor    0xc(%eax,%ecx,4),%edx
  0xa7564a6f: test   $0xfffffffc,%edx
  0xa7564a75: je     0xa7564a82
  0xa7564a77: orl    $0x2,0xc(%eax,%ecx,4)
  0xa7564a7c: jmp    0xa7564a82
  0xa7564a7e: mov    %edx,0xc(%eax,%ecx,4)
  0xa7564a82: sub    $0x2,%ecx
  0xa7564a85: jns    0xa7564a2c
  0xa7564a87: mov    0xc(%ebx),%eax
  0xa7564a8a: test   %eax,%eax
  0xa7564a8c: je     0xa7564aae
  0xa7564a8e: mov    0xbc(%eax),%ecx
  0xa7564a94: add    $0x8,%ecx
  0xa7564a97: mov    %ecx,0xbc(%eax)
  0xa7564a9d: and    $0x3f8,%ecx
  0xa7564aa3: je     0xa7564eee
  0xa7564aa9: jmp    0xa7564b83
  0xa7564aae: mov    0x10(%ebx),%eax
  0xa7564ab1: test   %eax,%eax
  0xa7564ab3: jne    0xa7564b6e
  0xa7564ab9: call   0xa7564ac3
  0xa7564abe: jmp    0xa7564b63
  0xa7564ac3: push   %ebx
  0xa7564ac4: lea    0x8(%esp),%eax
  0xa7564ac8: cmpl   $0x0,-0x8(%ebp)
  0xa7564acf: je     0xa7564ae6
  0xa7564ad5: push   $0xb7449b58
  0xa7564ada: call   0xa7564adf
  0xa7564adf: pusha  
  0xa7564ae0: call   0xb6ff5f32
  0xa7564ae5: hlt    
  0xa7564ae6: mov    %esi,-0x1c(%ebp)
  0xa7564ae9: mov    %esp,%edi
  0xa7564aeb: shr    $0xc,%edi
  0xa7564aee: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564af5: push   %edi
  0xa7564af6: mov    %ebp,0x148(%edi)
  0xa7564afc: mov    %eax,0x140(%edi)
  0xa7564b02: call   0xb6e61c92
  0xa7564b07: add    $0x8,%esp
  0xa7564b0a: push   %eax
  0xa7564b0b: mov    %esp,%eax
  0xa7564b0d: shr    $0xc,%eax
  0xa7564b10: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564b17: cmp    %eax,%edi
  0xa7564b19: je     0xa7564b30
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564b1f: push   $0xb74acf8c
  0xa7564b24: call   0xa7564b29
  0xa7564b29: pusha  
  0xa7564b2a: call   0xb6ff5f32
  0xa7564b2f: hlt    
  0xa7564b30: pop    %eax
  0xa7564b31: movl   $0x0,0x140(%edi)
  0xa7564b3b: movl   $0x0,0x148(%edi)
  0xa7564b45: movl   $0x0,0x144(%edi)
  0xa7564b4f: cmpl   $0x0,0x4(%edi)
  0xa7564b56: jne    0xa7556400
  0xa7564b5c: mov    -0x1c(%ebp),%esi
  0xa7564b5f: mov    -0x18(%ebp),%edi
  0xa7564b62: ret    
  0xa7564b63: mov    0x10(%ebx),%eax
  0xa7564b66: test   %eax,%eax
  0xa7564b68: je     0xa7564b83
  0xa7564b6e: mov    0x8(%eax),%ecx
  0xa7564b71: add    $0x8,%ecx
  0xa7564b74: mov    %ecx,0x8(%eax)
  0xa7564b77: and    $0x3f8,%ecx
  0xa7564b7d: je     0xa7564eee
  0xa7564b83: mov    %eax,-0x1000(%esp)
  0xa7564b8a: mov    %eax,-0x2000(%esp)
  0xa7564b91: mov    %eax,-0x3000(%esp)
  0xa7564b98: mov    %eax,-0x4000(%esp)
  0xa7564b9f: mov    %eax,-0x5000(%esp)
  0xa7564ba6: mov    %eax,-0x6000(%esp)
  0xa7564bad: mov    %eax,-0x7000(%esp)
  0xa7564bb4: mov    %eax,-0x8000(%esp)
  0xa7564bbb: mov    %eax,-0x9000(%esp)
  0xa7564bc2: mov    %esp,%eax
  0xa7564bc4: shr    $0xc,%eax
  0xa7564bc7: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564bce: movb   $0x0,0x1a5(%eax)
  0xa7564bd5: mov    0x14(%ebx),%eax
  0xa7564bd8: test   $0x20,%eax
  0xa7564bdd: jne    0xa7564bf4
  0xa7564be3: push   $0xb75622a4
  0xa7564be8: call   0xa7564bed
  0xa7564bed: pusha  
  0xa7564bee: call   0xb6ff5f32
  0xa7564bf3: hlt    
  0xa7564bf4: mov    0x14(%ebx),%eax
  0xa7564bf7: test   $0x8,%eax
  0xa7564bfc: mov    (%edi),%eax
  0xa7564bfe: je     0xa7564c10
  0xa7564c04: mov    0x8(%ebx),%eax
  0xa7564c07: mov    0x8(%eax),%eax
  0xa7564c0a: mov    0x10(%eax),%eax
  0xa7564c0d: mov    0x3c(%eax),%eax
  0xa7564c10: sub    $0x8,%esp
  0xa7564c13: mov    %esp,-0x20(%ebp)
  0xa7564c16: mov    %eax,0x4(%esp)
  0xa7564c1a: mov    %esp,%edx
  0xa7564c1c: mov    0x4(%edx),%ecx
  0xa7564c1f: mov    (%ecx),%eax
  0xa7564c21: push   %edx
  0xa7564c22: mov    %eax,%edx
  0xa7564c24: and    $0x7,%edx
  0xa7564c27: cmp    $0x5,%edx
  0xa7564c2a: pop    %edx
  0xa7564c2b: jne    0xa7564cbe
  0xa7564c31: mov    %eax,(%edx)
  0xa7564c33: push   %edx
  0xa7564c34: mov    0x4(%ecx),%edx
  0xa7564c37: mov    0x64(%edx),%edx
  0xa7564c3a: xor    %eax,%edx
  0xa7564c3c: mov    %esp,%eax
  0xa7564c3e: shr    $0xc,%eax
  0xa7564c41: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564c48: xor    %edx,%eax
  0xa7564c4a: and    $0xffffff87,%eax
  0xa7564c4d: pop    %edx
  0xa7564c4e: je     0xa7564d8b
  0xa7564c54: test   $0x7,%eax
  0xa7564c59: jne    0xa7564cb0
  0xa7564c5b: test   $0x180,%eax
  0xa7564c60: jne    0xa7564c89
  0xa7564c62: mov    (%edx),%eax
  0xa7564c64: and    $0x1ff,%eax
  0xa7564c6a: push   %edx
  0xa7564c6b: mov    %esp,%edx
  0xa7564c6d: shr    $0xc,%edx
  0xa7564c70: mov    -0x4871aba0(,%edx,4),%edx
  0xa7564c77: or     %eax,%edx
  0xa7564c79: lock cmpxchg %edx,(%ecx)
  0xa7564c7d: pop    %edx
  0xa7564c7e: jne    0xa7564ce1
  0xa7564c84: jmp    0xa7564d8b
  0xa7564c89: push   %edx
  0xa7564c8a: mov    0x4(%ecx),%edx
  0xa7564c8d: mov    0x64(%edx),%edx
  0xa7564c90: mov    %esp,%eax
  0xa7564c92: shr    $0xc,%eax
  0xa7564c95: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564c9c: or     %eax,%edx
  0xa7564c9e: mov    (%edx),%eax
  0xa7564ca0: lock cmpxchg %edx,(%ecx)
  0xa7564ca4: pop    %edx
  0xa7564ca5: jne    0xa7564ce1
  0xa7564cab: jmp    0xa7564d8b
  0xa7564cb0: mov    (%edx),%eax
  0xa7564cb2: push   %edx
  0xa7564cb3: mov    0x4(%ecx),%edx
  0xa7564cb6: mov    0x64(%edx),%edx
  0xa7564cb9: lock cmpxchg %edx,(%ecx)
  0xa7564cbd: pop    %edx
  0xa7564cbe: mov    $0x1,%eax
  0xa7564cc3: or     (%ecx),%eax
  0xa7564cc5: mov    %eax,(%edx)
  0xa7564cc7: lock cmpxchg %edx,(%ecx)
  0xa7564ccb: je     0xa7564d8b
  0xa7564cd1: sub    %esp,%eax
  0xa7564cd3: and    $0xfffff003,%eax
  0xa7564cd9: mov    %eax,(%edx)
  0xa7564cdb: je     0xa7564d8b
  0xa7564ce1: call   0xa7564ceb
  0xa7564ce6: jmp    0xa7564d8b
  0xa7564ceb: push   %edx
  0xa7564cec: lea    0x8(%esp),%eax
  0xa7564cf0: cmpl   $0x0,-0x8(%ebp)
  0xa7564cf7: je     0xa7564d0e
  0xa7564cfd: push   $0xb7449b58
  0xa7564d02: call   0xa7564d07
  0xa7564d07: pusha  
  0xa7564d08: call   0xb6ff5f32
  0xa7564d0d: hlt    
  0xa7564d0e: mov    %esi,-0x1c(%ebp)
  0xa7564d11: mov    %esp,%edi
  0xa7564d13: shr    $0xc,%edi
  0xa7564d16: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564d1d: push   %edi
  0xa7564d1e: mov    %ebp,0x148(%edi)
  0xa7564d24: mov    %eax,0x140(%edi)
  0xa7564d2a: call   0xb6e5ea04
  0xa7564d2f: add    $0x8,%esp
  0xa7564d32: push   %eax
  0xa7564d33: mov    %esp,%eax
  0xa7564d35: shr    $0xc,%eax
  0xa7564d38: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564d3f: cmp    %eax,%edi
  0xa7564d41: je     0xa7564d58
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564d47: push   $0xb74acf8c
  0xa7564d4c: call   0xa7564d51
  0xa7564d51: pusha  
  0xa7564d52: call   0xb6ff5f32
  0xa7564d57: hlt    
  0xa7564d58: pop    %eax
  0xa7564d59: movl   $0x0,0x140(%edi)
  0xa7564d63: movl   $0x0,0x148(%edi)
  0xa7564d6d: movl   $0x0,0x144(%edi)
  0xa7564d77: cmpl   $0x0,0x4(%edi)
  0xa7564d7e: jne    0xa7556400
  0xa7564d84: mov    -0x1c(%ebp),%esi
  0xa7564d87: mov    -0x18(%ebp),%edi
  0xa7564d8a: ret    
  0xa7564d8b: mov    -0x20(%ebp),%eax
  0xa7564d8e: cmp    %esp,%eax
  0xa7564d90: je     0xa7564da7
  0xa7564d96: push   $0xb75623f4
  0xa7564d9b: call   0xa7564da0
  0xa7564da0: pusha  
  0xa7564da1: call   0xb6ff5f32
  0xa7564da6: hlt    
  0xa7564da7: cmpb   $0x0,0xb78c1e7e
  0xa7564dae: je     0xa7564deb
  0xa7564db4: mov    %esp,%ecx
  0xa7564db6: shr    $0xc,%ecx
  0xa7564db9: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7564dc0: mov    -0xc(%ebp),%ebx
  0xa7564dc3: push   %ebx
  0xa7564dc4: push   %ecx
  0xa7564dc5: cmpl   $0x0,-0x8(%ebp)
  0xa7564dcc: je     0xa7564de3
  0xa7564dd2: push   $0xb7449b18
  0xa7564dd7: call   0xa7564ddc
  0xa7564ddc: pusha  
  0xa7564ddd: call   0xb6ff5f32
  0xa7564de2: hlt    
  0xa7564de3: call   0xb71757d0
  0xa7564de8: add    $0x8,%esp
  0xa7564deb: movzbl (%esi),%ebx
  0xa7564dee: jmp    *-0x48722ae0(,%ebx,4)
  0xa7564df5: call   0xa7564dff
  0xa7564dfa: jmp    0xa7564e9e
  0xa7564dff: lea    0x4(%esp),%eax
  0xa7564e03: cmpl   $0x0,-0x8(%ebp)
  0xa7564e0a: je     0xa7564e21
  0xa7564e10: push   $0xb7449b58
  0xa7564e15: call   0xa7564e1a
  0xa7564e1a: pusha  
  0xa7564e1b: call   0xb6ff5f32
  0xa7564e20: hlt    
  0xa7564e21: mov    %esi,-0x1c(%ebp)
  0xa7564e24: mov    %esp,%edi
  0xa7564e26: shr    $0xc,%edi
  0xa7564e29: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564e30: push   %edi
  0xa7564e31: mov    %ebp,0x148(%edi)
  0xa7564e37: mov    %eax,0x140(%edi)
  0xa7564e3d: call   0xb6e61328
  0xa7564e42: add    $0x4,%esp
  0xa7564e45: push   %eax
  0xa7564e46: mov    %esp,%eax
  0xa7564e48: shr    $0xc,%eax
  0xa7564e4b: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564e52: cmp    %eax,%edi
  0xa7564e54: je     0xa7564e6b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564e5a: push   $0xb74acf8c
  0xa7564e5f: call   0xa7564e64
  0xa7564e64: pusha  
  0xa7564e65: call   0xb6ff5f32
  0xa7564e6a: hlt    
  0xa7564e6b: pop    %eax
  0xa7564e6c: movl   $0x0,0x140(%edi)
  0xa7564e76: movl   $0x0,0x148(%edi)
  0xa7564e80: movl   $0x0,0x144(%edi)
  0xa7564e8a: cmpl   $0x0,0x4(%edi)
  0xa7564e91: jne    0xa7556400
  0xa7564e97: mov    -0x1c(%ebp),%esi
  0xa7564e9a: mov    -0x18(%ebp),%edi
  0xa7564e9d: ret    
  0xa7564e9e: push   %eax
  0xa7564e9f: push   %ebx
  0xa7564ea0: mov    -0xc(%ebp),%ebx
  0xa7564ea3: mov    0xc(%ebx),%eax
  0xa7564ea6: test   %eax,%eax
  0xa7564ea8: je     0xa7564ee1
  0xa7564eae: push   %esi
  0xa7564eaf: push   %ebx
  0xa7564eb0: cmpl   $0x0,-0x8(%ebp)
  0xa7564eb7: je     0xa7564ece
  0xa7564ebd: push   $0xb7449b18
  0xa7564ec2: call   0xa7564ec7
  0xa7564ec7: pusha  
  0xa7564ec8: call   0xb6ff5f32
  0xa7564ecd: hlt    
  0xa7564ece: call   0xb6e61172
  0xa7564ed3: add    $0x8,%esp
  0xa7564ed6: mov    0xc(%ebx),%ebx
  0xa7564ed9: add    $0xe0,%ebx
  0xa7564edf: add    %ebx,%eax
  0xa7564ee1: mov    %eax,-0x10(%ebp)
  0xa7564ee4: pop    %ebx
  0xa7564ee5: pop    %eax
  0xa7564ee6: mov    -0xc(%ebp),%ebx
  0xa7564ee9: jmp    0xa7564b83
  0xa7564eee: mov    $0x0,%eax
  0xa7564ef3: call   0xa7564efd
  0xa7564ef8: jmp    0xa7564f9d
  0xa7564efd: push   %eax
  0xa7564efe: lea    0x8(%esp),%eax
  0xa7564f02: cmpl   $0x0,-0x8(%ebp)
  0xa7564f09: je     0xa7564f20
  0xa7564f0f: push   $0xb7449b58
  0xa7564f14: call   0xa7564f19
  0xa7564f19: pusha  
  0xa7564f1a: call   0xb6ff5f32
  0xa7564f1f: hlt    
  0xa7564f20: mov    %esi,-0x1c(%ebp)
  0xa7564f23: mov    %esp,%edi
  0xa7564f25: shr    $0xc,%edi
  0xa7564f28: mov    -0x4871aba0(,%edi,4),%edi
  0xa7564f2f: push   %edi
  0xa7564f30: mov    %ebp,0x148(%edi)
  0xa7564f36: mov    %eax,0x140(%edi)
  0xa7564f3c: call   0xb6e60bc8
  0xa7564f41: add    $0x8,%esp
  0xa7564f44: push   %eax
  0xa7564f45: mov    %esp,%eax
  0xa7564f47: shr    $0xc,%eax
  0xa7564f4a: mov    -0x4871aba0(,%eax,4),%eax
  0xa7564f51: cmp    %eax,%edi
  0xa7564f53: je     0xa7564f6a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7564f59: push   $0xb74acf8c
  0xa7564f5e: call   0xa7564f63
  0xa7564f63: pusha  
  0xa7564f64: call   0xb6ff5f32
  0xa7564f69: hlt    
  0xa7564f6a: pop    %eax
  0xa7564f6b: movl   $0x0,0x140(%edi)
  0xa7564f75: movl   $0x0,0x148(%edi)
  0xa7564f7f: movl   $0x0,0x144(%edi)
  0xa7564f89: cmpl   $0x0,0x4(%edi)
  0xa7564f90: jne    0xa7556400
  0xa7564f96: mov    -0x1c(%ebp),%esi
  0xa7564f99: mov    -0x18(%ebp),%edi
  0xa7564f9c: ret    
  0xa7564f9d: mov    -0xc(%ebp),%ebx
  0xa7564fa0: jmp    0xa7564b83
  0xa7564fa5: nop
  0xa7564fa6: nop
  0xa7564fa7: nop
  0xa7564fa8: int3   
  0xa7564fa9: int3   
  0xa7564faa: int3   
  0xa7564fab: int3   
  0xa7564fac: int3   
  0xa7564fad: int3   
  0xa7564fae: int3   
  0xa7564faf: int3   
  0xa7564fb0: int3   
  0xa7564fb1: int3   
  0xa7564fb2: int3   
  0xa7564fb3: int3   
  0xa7564fb4: int3   
  0xa7564fb5: int3   
  0xa7564fb6: int3   
  0xa7564fb7: int3   
  0xa7564fb8: int3   
  0xa7564fb9: int3   
  0xa7564fba: int3   
  0xa7564fbb: int3   
  0xa7564fbc: int3   
  0xa7564fbd: int3   
  0xa7564fbe: int3   
  0xa7564fbf: int3   

----------------------------------------------------------------------
method entry point (kind = empty)  [0xa7564fe0, 0xa7565520]  1344 bytes

  0xa7564fe0: mov    0x8(%ebx),%edx
  0xa7564fe3: movzwl 0x24(%edx),%ecx
  0xa7564fe7: movzwl 0x22(%edx),%edx
  0xa7564feb: sub    %ecx,%edx
  0xa7564fed: cmp    $0x3f6,%edx
  0xa7564ff3: jbe    0xa7565074
  0xa7564ff9: push   %esi
  0xa7564ffa: mov    %esp,%esi
  0xa7564ffc: shr    $0xc,%esi
  0xa7564fff: mov    -0x4871aba0(,%esi,4),%esi
  0xa7565006: lea    0x28(,%edx,4),%eax
  0xa756500d: cmpl   $0x0,0xd8(%esi)
  0xa7565017: jne    0xa756502e
  0xa756501d: push   $0xb756221c
  0xa7565022: call   0xa7565027
  0xa7565027: pusha  
  0xa7565028: call   0xb6ff5f32
  0xa756502d: hlt    
  0xa756502e: cmpl   $0x0,0xdc(%esi)
  0xa7565038: jne    0xa756504f
  0xa756503e: push   $0xb756222f
  0xa7565043: call   0xa7565048
  0xa7565048: pusha  
  0xa7565049: call   0xb6ff5f32
  0xa756504e: hlt    
  0xa756504f: add    0xd8(%esi),%eax
  0xa7565055: sub    0xdc(%esi),%eax
  0xa756505b: add    $0x9000,%eax
  0xa7565061: cmp    %eax,%esp
  0xa7565063: ja     0xa7565073
  0xa7565069: pop    %esi
  0xa756506a: pop    %eax
  0xa756506b: mov    %esi,%esp
  0xa756506d: push   %eax
  0xa756506e: jmp    0xa75589e0
  0xa7565073: pop    %esi
  0xa7565074: pop    %eax
  0xa7565075: lea    -0x4(%esp,%ecx,4),%edi
  0xa7565079: test   %edx,%edx
  0xa756507b: jle    0xa7565089
  0xa7565081: push   $0x0
  0xa7565086: dec    %edx
  0xa7565087: jg     0xa7565081
  0xa7565089: push   %eax
  0xa756508a: push   %ebp
  0xa756508b: mov    %esp,%ebp
  0xa756508d: push   %esi
  0xa756508e: push   $0x0
  0xa7565093: mov    0x8(%ebx),%esi
  0xa7565096: lea    0x28(%esi),%esi
  0xa7565099: push   %ebx
  0xa756509a: mov    0xc(%ebx),%edx
  0xa756509d: test   %edx,%edx
  0xa756509f: je     0xa75650ab
  0xa75650a5: add    $0xe0,%edx
  0xa75650ab: push   %edx
  0xa75650ac: mov    0x8(%ebx),%edx
  0xa75650af: mov    0x8(%edx),%edx
  0xa75650b2: mov    0xc(%edx),%edx
  0xa75650b5: push   %edx
  0xa75650b6: push   %edi
  0xa75650b7: push   %esi
  0xa75650b8: push   $0x0
  0xa75650bd: mov    %esp,(%esp)
  0xa75650c0: mov    0x14(%ebx),%eax
  0xa75650c3: test   $0x100,%eax
  0xa75650c8: je     0xa75650df
  0xa75650ce: push   $0xb7562538
  0xa75650d3: call   0xa75650d8
  0xa75650d8: pusha  
  0xa75650d9: call   0xb6ff5f32
  0xa75650de: hlt    
  0xa75650df: test   $0x400,%eax
  0xa75650e4: je     0xa75650fb
  0xa75650ea: push   $0xb75623a4
  0xa75650ef: call   0xa75650f4
  0xa75650f4: pusha  
  0xa75650f5: call   0xb6ff5f32
  0xa75650fa: hlt    
  0xa75650fb: mov    %esp,%eax
  0xa75650fd: shr    $0xc,%eax
  0xa7565100: mov    -0x4871aba0(,%eax,4),%eax
  0xa7565107: movb   $0x1,0x1a5(%eax)
  0xa756510e: mov    -0x10(%ebp),%eax
  0xa7565111: test   %eax,%eax
  0xa7565113: je     0xa7565187
  0xa7565119: mov    -0x4(%eax),%ecx
  0xa756511c: test   %ecx,%ecx
  0xa756511e: js     0xa7565187
  0xa7565124: add    %ecx,%eax
  0xa7565126: mov    0x4(%eax),%ecx
  0xa7565129: sub    $0x2,%ecx
  0xa756512c: mov    0x8(%eax,%ecx,4),%edx
  0xa7565130: neg    %edx
  0xa7565132: mov    (%edi,%edx,4),%edx
  0xa7565135: test   %edx,%edx
  0xa7565137: jne    0xa7565140
  0xa7565139: orl    $0x1,0xc(%eax,%ecx,4)
  0xa756513e: jmp    0xa7565182
  0xa7565140: mov    0x4(%edx),%edx
  0xa7565143: xor    0xc(%eax,%ecx,4),%edx
  0xa7565147: test   $0xfffffffc,%edx
  0xa756514d: je     0xa7565182
  0xa756514f: test   $0x2,%edx
  0xa7565155: jne    0xa7565182
  0xa7565157: cmpl   $0x0,0xc(%eax,%ecx,4)
  0xa756515f: je     0xa756517e
  0xa7565161: cmpl   $0x1,0xc(%eax,%ecx,4)
  0xa7565169: je     0xa756517e
  0xa756516b: xor    0xc(%eax,%ecx,4),%edx
  0xa756516f: test   $0xfffffffc,%edx
  0xa7565175: je     0xa7565182
  0xa7565177: orl    $0x2,0xc(%eax,%ecx,4)
  0xa756517c: jmp    0xa7565182
  0xa756517e: mov    %edx,0xc(%eax,%ecx,4)
  0xa7565182: sub    $0x2,%ecx
  0xa7565185: jns    0xa756512c
  0xa7565187: mov    0xc(%ebx),%eax
  0xa756518a: test   %eax,%eax
  0xa756518c: je     0xa75651ae
  0xa756518e: mov    0xbc(%eax),%ecx
  0xa7565194: add    $0x8,%ecx
  0xa7565197: mov    %ecx,0xbc(%eax)
  0xa756519d: and    $0x3f8,%ecx
  0xa75651a3: je     0xa7565457
  0xa75651a9: jmp    0xa7565283
  0xa75651ae: mov    0x10(%ebx),%eax
  0xa75651b1: test   %eax,%eax
  0xa75651b3: jne    0xa756526e
  0xa75651b9: call   0xa75651c3
  0xa75651be: jmp    0xa7565263
  0xa75651c3: push   %ebx
  0xa75651c4: lea    0x8(%esp),%eax
  0xa75651c8: cmpl   $0x0,-0x8(%ebp)
  0xa75651cf: je     0xa75651e6
  0xa75651d5: push   $0xb7449b58
  0xa75651da: call   0xa75651df
  0xa75651df: pusha  
  0xa75651e0: call   0xb6ff5f32
  0xa75651e5: hlt    
  0xa75651e6: mov    %esi,-0x1c(%ebp)
  0xa75651e9: mov    %esp,%edi
  0xa75651eb: shr    $0xc,%edi
  0xa75651ee: mov    -0x4871aba0(,%edi,4),%edi
  0xa75651f5: push   %edi
  0xa75651f6: mov    %ebp,0x148(%edi)
  0xa75651fc: mov    %eax,0x140(%edi)
  0xa7565202: call   0xb6e61c92
  0xa7565207: add    $0x8,%esp
  0xa756520a: push   %eax
  0xa756520b: mov    %esp,%eax
  0xa756520d: shr    $0xc,%eax
  0xa7565210: mov    -0x4871aba0(,%eax,4),%eax
  0xa7565217: cmp    %eax,%edi
  0xa7565219: je     0xa7565230
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756521f: push   $0xb74acf8c
  0xa7565224: call   0xa7565229
  0xa7565229: pusha  
  0xa756522a: call   0xb6ff5f32
  0xa756522f: hlt    
  0xa7565230: pop    %eax
  0xa7565231: movl   $0x0,0x140(%edi)
  0xa756523b: movl   $0x0,0x148(%edi)
  0xa7565245: movl   $0x0,0x144(%edi)
  0xa756524f: cmpl   $0x0,0x4(%edi)
  0xa7565256: jne    0xa7556400
  0xa756525c: mov    -0x1c(%ebp),%esi
  0xa756525f: mov    -0x18(%ebp),%edi
  0xa7565262: ret    
  0xa7565263: mov    0x10(%ebx),%eax
  0xa7565266: test   %eax,%eax
  0xa7565268: je     0xa7565283
  0xa756526e: mov    0x8(%eax),%ecx
  0xa7565271: add    $0x8,%ecx
  0xa7565274: mov    %ecx,0x8(%eax)
  0xa7565277: and    $0x3f8,%ecx
  0xa756527d: je     0xa7565457
  0xa7565283: mov    %eax,-0x1000(%esp)
  0xa756528a: mov    %eax,-0x2000(%esp)
  0xa7565291: mov    %eax,-0x3000(%esp)
  0xa7565298: mov    %eax,-0x4000(%esp)
  0xa756529f: mov    %eax,-0x5000(%esp)
  0xa75652a6: mov    %eax,-0x6000(%esp)
  0xa75652ad: mov    %eax,-0x7000(%esp)
  0xa75652b4: mov    %eax,-0x8000(%esp)
  0xa75652bb: mov    %eax,-0x9000(%esp)
  0xa75652c2: mov    %esp,%eax
  0xa75652c4: shr    $0xc,%eax
  0xa75652c7: mov    -0x4871aba0(,%eax,4),%eax
  0xa75652ce: movb   $0x0,0x1a5(%eax)
  0xa75652d5: mov    0x14(%ebx),%eax
  0xa75652d8: test   $0x20,%eax
  0xa75652dd: je     0xa75652f4
  0xa75652e3: push   $0xb75623d4
  0xa75652e8: call   0xa75652ed
  0xa75652ed: pusha  
  0xa75652ee: call   0xb6ff5f32
  0xa75652f3: hlt    
  0xa75652f4: mov    -0x20(%ebp),%eax
  0xa75652f7: cmp    %esp,%eax
  0xa75652f9: je     0xa7565310
  0xa75652ff: push   $0xb75623f4
  0xa7565304: call   0xa7565309
  0xa7565309: pusha  
  0xa756530a: call   0xb6ff5f32
  0xa756530f: hlt    
  0xa7565310: cmpb   $0x0,0xb78c1e7e
  0xa7565317: je     0xa7565354
  0xa756531d: mov    %esp,%ecx
  0xa756531f: shr    $0xc,%ecx
  0xa7565322: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7565329: mov    -0xc(%ebp),%ebx
  0xa756532c: push   %ebx
  0xa756532d: push   %ecx
  0xa756532e: cmpl   $0x0,-0x8(%ebp)
  0xa7565335: je     0xa756534c
  0xa756533b: push   $0xb7449b18
  0xa7565340: call   0xa7565345
  0xa7565345: pusha  
  0xa7565346: call   0xb6ff5f32
  0xa756534b: hlt    
  0xa756534c: call   0xb71757d0
  0xa7565351: add    $0x8,%esp
  0xa7565354: movzbl (%esi),%ebx
  0xa7565357: jmp    *-0x48722ae0(,%ebx,4)
  0xa756535e: call   0xa7565368
  0xa7565363: jmp    0xa7565407
  0xa7565368: lea    0x4(%esp),%eax
  0xa756536c: cmpl   $0x0,-0x8(%ebp)
  0xa7565373: je     0xa756538a
  0xa7565379: push   $0xb7449b58
  0xa756537e: call   0xa7565383
  0xa7565383: pusha  
  0xa7565384: call   0xb6ff5f32
  0xa7565389: hlt    
  0xa756538a: mov    %esi,-0x1c(%ebp)
  0xa756538d: mov    %esp,%edi
  0xa756538f: shr    $0xc,%edi
  0xa7565392: mov    -0x4871aba0(,%edi,4),%edi
  0xa7565399: push   %edi
  0xa756539a: mov    %ebp,0x148(%edi)
  0xa75653a0: mov    %eax,0x140(%edi)
  0xa75653a6: call   0xb6e61328
  0xa75653ab: add    $0x4,%esp
  0xa75653ae: push   %eax
  0xa75653af: mov    %esp,%eax
  0xa75653b1: shr    $0xc,%eax
  0xa75653b4: mov    -0x4871aba0(,%eax,4),%eax
  0xa75653bb: cmp    %eax,%edi
  0xa75653bd: je     0xa75653d4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75653c3: push   $0xb74acf8c
  0xa75653c8: call   0xa75653cd
  0xa75653cd: pusha  
  0xa75653ce: call   0xb6ff5f32
  0xa75653d3: hlt    
  0xa75653d4: pop    %eax
  0xa75653d5: movl   $0x0,0x140(%edi)
  0xa75653df: movl   $0x0,0x148(%edi)
  0xa75653e9: movl   $0x0,0x144(%edi)
  0xa75653f3: cmpl   $0x0,0x4(%edi)
  0xa75653fa: jne    0xa7556400
  0xa7565400: mov    -0x1c(%ebp),%esi
  0xa7565403: mov    -0x18(%ebp),%edi
  0xa7565406: ret    
  0xa7565407: push   %eax
  0xa7565408: push   %ebx
  0xa7565409: mov    -0xc(%ebp),%ebx
  0xa756540c: mov    0xc(%ebx),%eax
  0xa756540f: test   %eax,%eax
  0xa7565411: je     0xa756544a
  0xa7565417: push   %esi
  0xa7565418: push   %ebx
  0xa7565419: cmpl   $0x0,-0x8(%ebp)
  0xa7565420: je     0xa7565437
  0xa7565426: push   $0xb7449b18
  0xa756542b: call   0xa7565430
  0xa7565430: pusha  
  0xa7565431: call   0xb6ff5f32
  0xa7565436: hlt    
  0xa7565437: call   0xb6e61172
  0xa756543c: add    $0x8,%esp
  0xa756543f: mov    0xc(%ebx),%ebx
  0xa7565442: add    $0xe0,%ebx
  0xa7565448: add    %ebx,%eax
  0xa756544a: mov    %eax,-0x10(%ebp)
  0xa756544d: pop    %ebx
  0xa756544e: pop    %eax
  0xa756544f: mov    -0xc(%ebp),%ebx
  0xa7565452: jmp    0xa7565283
  0xa7565457: mov    $0x0,%eax
  0xa756545c: call   0xa7565466
  0xa7565461: jmp    0xa7565506
  0xa7565466: push   %eax
  0xa7565467: lea    0x8(%esp),%eax
  0xa756546b: cmpl   $0x0,-0x8(%ebp)
  0xa7565472: je     0xa7565489
  0xa7565478: push   $0xb7449b58
  0xa756547d: call   0xa7565482
  0xa7565482: pusha  
  0xa7565483: call   0xb6ff5f32
  0xa7565488: hlt    
  0xa7565489: mov    %esi,-0x1c(%ebp)
  0xa756548c: mov    %esp,%edi
  0xa756548e: shr    $0xc,%edi
  0xa7565491: mov    -0x4871aba0(,%edi,4),%edi
  0xa7565498: push   %edi
  0xa7565499: mov    %ebp,0x148(%edi)
  0xa756549f: mov    %eax,0x140(%edi)
  0xa75654a5: call   0xb6e60bc8
  0xa75654aa: add    $0x8,%esp
  0xa75654ad: push   %eax
  0xa75654ae: mov    %esp,%eax
  0xa75654b0: shr    $0xc,%eax
  0xa75654b3: mov    -0x4871aba0(,%eax,4),%eax
  0xa75654ba: cmp    %eax,%edi
  0xa75654bc: je     0xa75654d3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75654c2: push   $0xb74acf8c
  0xa75654c7: call   0xa75654cc
  0xa75654cc: pusha  
  0xa75654cd: call   0xb6ff5f32
  0xa75654d2: hlt    
  0xa75654d3: pop    %eax
  0xa75654d4: movl   $0x0,0x140(%edi)
  0xa75654de: movl   $0x0,0x148(%edi)
  0xa75654e8: movl   $0x0,0x144(%edi)
  0xa75654f2: cmpl   $0x0,0x4(%edi)
  0xa75654f9: jne    0xa7556400
  0xa75654ff: mov    -0x1c(%ebp),%esi
  0xa7565502: mov    -0x18(%ebp),%edi
  0xa7565505: ret    
  0xa7565506: mov    -0xc(%ebp),%ebx
  0xa7565509: jmp    0xa7565283
  0xa756550e: nop
  0xa756550f: nop
  0xa7565510: int3   
  0xa7565511: int3   
  0xa7565512: int3   
  0xa7565513: int3   
  0xa7565514: int3   
  0xa7565515: int3   
  0xa7565516: int3   
  0xa7565517: int3   
  0xa7565518: int3   
  0xa7565519: int3   
  0xa756551a: int3   
  0xa756551b: int3   
  0xa756551c: int3   
  0xa756551d: int3   
  0xa756551e: int3   
  0xa756551f: int3   

----------------------------------------------------------------------
method entry point (kind = accessor)  [0xa7565540, 0xa7565a80]  1344 bytes

  0xa7565540: mov    0x8(%ebx),%edx
  0xa7565543: movzwl 0x24(%edx),%ecx
  0xa7565547: movzwl 0x22(%edx),%edx
  0xa756554b: sub    %ecx,%edx
  0xa756554d: cmp    $0x3f6,%edx
  0xa7565553: jbe    0xa75655d4
  0xa7565559: push   %esi
  0xa756555a: mov    %esp,%esi
  0xa756555c: shr    $0xc,%esi
  0xa756555f: mov    -0x4871aba0(,%esi,4),%esi
  0xa7565566: lea    0x28(,%edx,4),%eax
  0xa756556d: cmpl   $0x0,0xd8(%esi)
  0xa7565577: jne    0xa756558e
  0xa756557d: push   $0xb756221c
  0xa7565582: call   0xa7565587
  0xa7565587: pusha  
  0xa7565588: call   0xb6ff5f32
  0xa756558d: hlt    
  0xa756558e: cmpl   $0x0,0xdc(%esi)
  0xa7565598: jne    0xa75655af
  0xa756559e: push   $0xb756222f
  0xa75655a3: call   0xa75655a8
  0xa75655a8: pusha  
  0xa75655a9: call   0xb6ff5f32
  0xa75655ae: hlt    
  0xa75655af: add    0xd8(%esi),%eax
  0xa75655b5: sub    0xdc(%esi),%eax
  0xa75655bb: add    $0x9000,%eax
  0xa75655c1: cmp    %eax,%esp
  0xa75655c3: ja     0xa75655d3
  0xa75655c9: pop    %esi
  0xa75655ca: pop    %eax
  0xa75655cb: mov    %esi,%esp
  0xa75655cd: push   %eax
  0xa75655ce: jmp    0xa75589e0
  0xa75655d3: pop    %esi
  0xa75655d4: pop    %eax
  0xa75655d5: lea    -0x4(%esp,%ecx,4),%edi
  0xa75655d9: test   %edx,%edx
  0xa75655db: jle    0xa75655e9
  0xa75655e1: push   $0x0
  0xa75655e6: dec    %edx
  0xa75655e7: jg     0xa75655e1
  0xa75655e9: push   %eax
  0xa75655ea: push   %ebp
  0xa75655eb: mov    %esp,%ebp
  0xa75655ed: push   %esi
  0xa75655ee: push   $0x0
  0xa75655f3: mov    0x8(%ebx),%esi
  0xa75655f6: lea    0x28(%esi),%esi
  0xa75655f9: push   %ebx
  0xa75655fa: mov    0xc(%ebx),%edx
  0xa75655fd: test   %edx,%edx
  0xa75655ff: je     0xa756560b
  0xa7565605: add    $0xe0,%edx
  0xa756560b: push   %edx
  0xa756560c: mov    0x8(%ebx),%edx
  0xa756560f: mov    0x8(%edx),%edx
  0xa7565612: mov    0xc(%edx),%edx
  0xa7565615: push   %edx
  0xa7565616: push   %edi
  0xa7565617: push   %esi
  0xa7565618: push   $0x0
  0xa756561d: mov    %esp,(%esp)
  0xa7565620: mov    0x14(%ebx),%eax
  0xa7565623: test   $0x100,%eax
  0xa7565628: je     0xa756563f
  0xa756562e: push   $0xb7562538
  0xa7565633: call   0xa7565638
  0xa7565638: pusha  
  0xa7565639: call   0xb6ff5f32
  0xa756563e: hlt    
  0xa756563f: test   $0x400,%eax
  0xa7565644: je     0xa756565b
  0xa756564a: push   $0xb75623a4
  0xa756564f: call   0xa7565654
  0xa7565654: pusha  
  0xa7565655: call   0xb6ff5f32
  0xa756565a: hlt    
  0xa756565b: mov    %esp,%eax
  0xa756565d: shr    $0xc,%eax
  0xa7565660: mov    -0x4871aba0(,%eax,4),%eax
  0xa7565667: movb   $0x1,0x1a5(%eax)
  0xa756566e: mov    -0x10(%ebp),%eax
  0xa7565671: test   %eax,%eax
  0xa7565673: je     0xa75656e7
  0xa7565679: mov    -0x4(%eax),%ecx
  0xa756567c: test   %ecx,%ecx
  0xa756567e: js     0xa75656e7
  0xa7565684: add    %ecx,%eax
  0xa7565686: mov    0x4(%eax),%ecx
  0xa7565689: sub    $0x2,%ecx
  0xa756568c: mov    0x8(%eax,%ecx,4),%edx
  0xa7565690: neg    %edx
  0xa7565692: mov    (%edi,%edx,4),%edx
  0xa7565695: test   %edx,%edx
  0xa7565697: jne    0xa75656a0
  0xa7565699: orl    $0x1,0xc(%eax,%ecx,4)
  0xa756569e: jmp    0xa75656e2
  0xa75656a0: mov    0x4(%edx),%edx
  0xa75656a3: xor    0xc(%eax,%ecx,4),%edx
  0xa75656a7: test   $0xfffffffc,%edx
  0xa75656ad: je     0xa75656e2
  0xa75656af: test   $0x2,%edx
  0xa75656b5: jne    0xa75656e2
  0xa75656b7: cmpl   $0x0,0xc(%eax,%ecx,4)
  0xa75656bf: je     0xa75656de
  0xa75656c1: cmpl   $0x1,0xc(%eax,%ecx,4)
  0xa75656c9: je     0xa75656de
  0xa75656cb: xor    0xc(%eax,%ecx,4),%edx
  0xa75656cf: test   $0xfffffffc,%edx
  0xa75656d5: je     0xa75656e2
  0xa75656d7: orl    $0x2,0xc(%eax,%ecx,4)
  0xa75656dc: jmp    0xa75656e2
  0xa75656de: mov    %edx,0xc(%eax,%ecx,4)
  0xa75656e2: sub    $0x2,%ecx
  0xa75656e5: jns    0xa756568c
  0xa75656e7: mov    0xc(%ebx),%eax
  0xa75656ea: test   %eax,%eax
  0xa75656ec: je     0xa756570e
  0xa75656ee: mov    0xbc(%eax),%ecx
  0xa75656f4: add    $0x8,%ecx
  0xa75656f7: mov    %ecx,0xbc(%eax)
  0xa75656fd: and    $0x3f8,%ecx
  0xa7565703: je     0xa75659b7
  0xa7565709: jmp    0xa75657e3
  0xa756570e: mov    0x10(%ebx),%eax
  0xa7565711: test   %eax,%eax
  0xa7565713: jne    0xa75657ce
  0xa7565719: call   0xa7565723
  0xa756571e: jmp    0xa75657c3
  0xa7565723: push   %ebx
  0xa7565724: lea    0x8(%esp),%eax
  0xa7565728: cmpl   $0x0,-0x8(%ebp)
  0xa756572f: je     0xa7565746
  0xa7565735: push   $0xb7449b58
  0xa756573a: call   0xa756573f
  0xa756573f: pusha  
  0xa7565740: call   0xb6ff5f32
  0xa7565745: hlt    
  0xa7565746: mov    %esi,-0x1c(%ebp)
  0xa7565749: mov    %esp,%edi
  0xa756574b: shr    $0xc,%edi
  0xa756574e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7565755: push   %edi
  0xa7565756: mov    %ebp,0x148(%edi)
  0xa756575c: mov    %eax,0x140(%edi)
  0xa7565762: call   0xb6e61c92
  0xa7565767: add    $0x8,%esp
  0xa756576a: push   %eax
  0xa756576b: mov    %esp,%eax
  0xa756576d: shr    $0xc,%eax
  0xa7565770: mov    -0x4871aba0(,%eax,4),%eax
  0xa7565777: cmp    %eax,%edi
  0xa7565779: je     0xa7565790
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756577f: push   $0xb74acf8c
  0xa7565784: call   0xa7565789
  0xa7565789: pusha  
  0xa756578a: call   0xb6ff5f32
  0xa756578f: hlt    
  0xa7565790: pop    %eax
  0xa7565791: movl   $0x0,0x140(%edi)
  0xa756579b: movl   $0x0,0x148(%edi)
  0xa75657a5: movl   $0x0,0x144(%edi)
  0xa75657af: cmpl   $0x0,0x4(%edi)
  0xa75657b6: jne    0xa7556400
  0xa75657bc: mov    -0x1c(%ebp),%esi
  0xa75657bf: mov    -0x18(%ebp),%edi
  0xa75657c2: ret    
  0xa75657c3: mov    0x10(%ebx),%eax
  0xa75657c6: test   %eax,%eax
  0xa75657c8: je     0xa75657e3
  0xa75657ce: mov    0x8(%eax),%ecx
  0xa75657d1: add    $0x8,%ecx
  0xa75657d4: mov    %ecx,0x8(%eax)
  0xa75657d7: and    $0x3f8,%ecx
  0xa75657dd: je     0xa75659b7
  0xa75657e3: mov    %eax,-0x1000(%esp)
  0xa75657ea: mov    %eax,-0x2000(%esp)
  0xa75657f1: mov    %eax,-0x3000(%esp)
  0xa75657f8: mov    %eax,-0x4000(%esp)
  0xa75657ff: mov    %eax,-0x5000(%esp)
  0xa7565806: mov    %eax,-0x6000(%esp)
  0xa756580d: mov    %eax,-0x7000(%esp)
  0xa7565814: mov    %eax,-0x8000(%esp)
  0xa756581b: mov    %eax,-0x9000(%esp)
  0xa7565822: mov    %esp,%eax
  0xa7565824: shr    $0xc,%eax
  0xa7565827: mov    -0x4871aba0(,%eax,4),%eax
  0xa756582e: movb   $0x0,0x1a5(%eax)
  0xa7565835: mov    0x14(%ebx),%eax
  0xa7565838: test   $0x20,%eax
  0xa756583d: je     0xa7565854
  0xa7565843: push   $0xb75623d4
  0xa7565848: call   0xa756584d
  0xa756584d: pusha  
  0xa756584e: call   0xb6ff5f32
  0xa7565853: hlt    
  0xa7565854: mov    -0x20(%ebp),%eax
  0xa7565857: cmp    %esp,%eax
  0xa7565859: je     0xa7565870
  0xa756585f: push   $0xb75623f4
  0xa7565864: call   0xa7565869
  0xa7565869: pusha  
  0xa756586a: call   0xb6ff5f32
  0xa756586f: hlt    
  0xa7565870: cmpb   $0x0,0xb78c1e7e
  0xa7565877: je     0xa75658b4
  0xa756587d: mov    %esp,%ecx
  0xa756587f: shr    $0xc,%ecx
  0xa7565882: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7565889: mov    -0xc(%ebp),%ebx
  0xa756588c: push   %ebx
  0xa756588d: push   %ecx
  0xa756588e: cmpl   $0x0,-0x8(%ebp)
  0xa7565895: je     0xa75658ac
  0xa756589b: push   $0xb7449b18
  0xa75658a0: call   0xa75658a5
  0xa75658a5: pusha  
  0xa75658a6: call   0xb6ff5f32
  0xa75658ab: hlt    
  0xa75658ac: call   0xb71757d0
  0xa75658b1: add    $0x8,%esp
  0xa75658b4: movzbl (%esi),%ebx
  0xa75658b7: jmp    *-0x48722ae0(,%ebx,4)
  0xa75658be: call   0xa75658c8
  0xa75658c3: jmp    0xa7565967
  0xa75658c8: lea    0x4(%esp),%eax
  0xa75658cc: cmpl   $0x0,-0x8(%ebp)
  0xa75658d3: je     0xa75658ea
  0xa75658d9: push   $0xb7449b58
  0xa75658de: call   0xa75658e3
  0xa75658e3: pusha  
  0xa75658e4: call   0xb6ff5f32
  0xa75658e9: hlt    
  0xa75658ea: mov    %esi,-0x1c(%ebp)
  0xa75658ed: mov    %esp,%edi
  0xa75658ef: shr    $0xc,%edi
  0xa75658f2: mov    -0x4871aba0(,%edi,4),%edi
  0xa75658f9: push   %edi
  0xa75658fa: mov    %ebp,0x148(%edi)
  0xa7565900: mov    %eax,0x140(%edi)
  0xa7565906: call   0xb6e61328
  0xa756590b: add    $0x4,%esp
  0xa756590e: push   %eax
  0xa756590f: mov    %esp,%eax
  0xa7565911: shr    $0xc,%eax
  0xa7565914: mov    -0x4871aba0(,%eax,4),%eax
  0xa756591b: cmp    %eax,%edi
  0xa756591d: je     0xa7565934
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7565923: push   $0xb74acf8c
  0xa7565928: call   0xa756592d
  0xa756592d: pusha  
  0xa756592e: call   0xb6ff5f32
  0xa7565933: hlt    
  0xa7565934: pop    %eax
  0xa7565935: movl   $0x0,0x140(%edi)
  0xa756593f: movl   $0x0,0x148(%edi)
  0xa7565949: movl   $0x0,0x144(%edi)
  0xa7565953: cmpl   $0x0,0x4(%edi)
  0xa756595a: jne    0xa7556400
  0xa7565960: mov    -0x1c(%ebp),%esi
  0xa7565963: mov    -0x18(%ebp),%edi
  0xa7565966: ret    
  0xa7565967: push   %eax
  0xa7565968: push   %ebx
  0xa7565969: mov    -0xc(%ebp),%ebx
  0xa756596c: mov    0xc(%ebx),%eax
  0xa756596f: test   %eax,%eax
  0xa7565971: je     0xa75659aa
  0xa7565977: push   %esi
  0xa7565978: push   %ebx
  0xa7565979: cmpl   $0x0,-0x8(%ebp)
  0xa7565980: je     0xa7565997
  0xa7565986: push   $0xb7449b18
  0xa756598b: call   0xa7565990
  0xa7565990: pusha  
  0xa7565991: call   0xb6ff5f32
  0xa7565996: hlt    
  0xa7565997: call   0xb6e61172
  0xa756599c: add    $0x8,%esp
  0xa756599f: mov    0xc(%ebx),%ebx
  0xa75659a2: add    $0xe0,%ebx
  0xa75659a8: add    %ebx,%eax
  0xa75659aa: mov    %eax,-0x10(%ebp)
  0xa75659ad: pop    %ebx
  0xa75659ae: pop    %eax
  0xa75659af: mov    -0xc(%ebp),%ebx
  0xa75659b2: jmp    0xa75657e3
  0xa75659b7: mov    $0x0,%eax
  0xa75659bc: call   0xa75659c6
  0xa75659c1: jmp    0xa7565a66
  0xa75659c6: push   %eax
  0xa75659c7: lea    0x8(%esp),%eax
  0xa75659cb: cmpl   $0x0,-0x8(%ebp)
  0xa75659d2: je     0xa75659e9
  0xa75659d8: push   $0xb7449b58
  0xa75659dd: call   0xa75659e2
  0xa75659e2: pusha  
  0xa75659e3: call   0xb6ff5f32
  0xa75659e8: hlt    
  0xa75659e9: mov    %esi,-0x1c(%ebp)
  0xa75659ec: mov    %esp,%edi
  0xa75659ee: shr    $0xc,%edi
  0xa75659f1: mov    -0x4871aba0(,%edi,4),%edi
  0xa75659f8: push   %edi
  0xa75659f9: mov    %ebp,0x148(%edi)
  0xa75659ff: mov    %eax,0x140(%edi)
  0xa7565a05: call   0xb6e60bc8
  0xa7565a0a: add    $0x8,%esp
  0xa7565a0d: push   %eax
  0xa7565a0e: mov    %esp,%eax
  0xa7565a10: shr    $0xc,%eax
  0xa7565a13: mov    -0x4871aba0(,%eax,4),%eax
  0xa7565a1a: cmp    %eax,%edi
  0xa7565a1c: je     0xa7565a33
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7565a22: push   $0xb74acf8c
  0xa7565a27: call   0xa7565a2c
  0xa7565a2c: pusha  
  0xa7565a2d: call   0xb6ff5f32
  0xa7565a32: hlt    
  0xa7565a33: pop    %eax
  0xa7565a34: movl   $0x0,0x140(%edi)
  0xa7565a3e: movl   $0x0,0x148(%edi)
  0xa7565a48: movl   $0x0,0x144(%edi)
  0xa7565a52: cmpl   $0x0,0x4(%edi)
  0xa7565a59: jne    0xa7556400
  0xa7565a5f: mov    -0x1c(%ebp),%esi
  0xa7565a62: mov    -0x18(%ebp),%edi
  0xa7565a65: ret    
  0xa7565a66: mov    -0xc(%ebp),%ebx
  0xa7565a69: jmp    0xa75657e3
  0xa7565a6e: nop
  0xa7565a6f: nop
  0xa7565a70: int3   
  0xa7565a71: int3   
  0xa7565a72: int3   
  0xa7565a73: int3   
  0xa7565a74: int3   
  0xa7565a75: int3   
  0xa7565a76: int3   
  0xa7565a77: int3   
  0xa7565a78: int3   
  0xa7565a79: int3   
  0xa7565a7a: int3   
  0xa7565a7b: int3   
  0xa7565a7c: int3   
  0xa7565a7d: int3   
  0xa7565a7e: int3   
  0xa7565a7f: int3   

----------------------------------------------------------------------
method entry point (kind = abstract)  [0xa7565aa0, 0xa7565b80]  224 bytes

  0xa7565aa0: mov    -0x20(%ebp),%esp
  0xa7565aa3: movl   $0x0,-0x8(%ebp)
  0xa7565aaa: mov    -0x1c(%ebp),%esi
  0xa7565aad: mov    -0x18(%ebp),%edi
  0xa7565ab0: call   0xa7565aba
  0xa7565ab5: jmp    0xa7565b59
  0xa7565aba: lea    0x4(%esp),%eax
  0xa7565abe: cmpl   $0x0,-0x8(%ebp)
  0xa7565ac5: je     0xa7565adc
  0xa7565acb: push   $0xb7449b58
  0xa7565ad0: call   0xa7565ad5
  0xa7565ad5: pusha  
  0xa7565ad6: call   0xb6ff5f32
  0xa7565adb: hlt    
  0xa7565adc: mov    %esi,-0x1c(%ebp)
  0xa7565adf: mov    %esp,%edi
  0xa7565ae1: shr    $0xc,%edi
  0xa7565ae4: mov    -0x4871aba0(,%edi,4),%edi
  0xa7565aeb: push   %edi
  0xa7565aec: mov    %ebp,0x148(%edi)
  0xa7565af2: mov    %eax,0x140(%edi)
  0xa7565af8: call   0xb6e5e204
  0xa7565afd: add    $0x4,%esp
  0xa7565b00: push   %eax
  0xa7565b01: mov    %esp,%eax
  0xa7565b03: shr    $0xc,%eax
  0xa7565b06: mov    -0x4871aba0(,%eax,4),%eax
  0xa7565b0d: cmp    %eax,%edi
  0xa7565b0f: je     0xa7565b26
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7565b15: push   $0xb74acf8c
  0xa7565b1a: call   0xa7565b1f
  0xa7565b1f: pusha  
  0xa7565b20: call   0xb6ff5f32
  0xa7565b25: hlt    
  0xa7565b26: pop    %eax
  0xa7565b27: movl   $0x0,0x140(%edi)
  0xa7565b31: movl   $0x0,0x148(%edi)
  0xa7565b3b: movl   $0x0,0x144(%edi)
  0xa7565b45: cmpl   $0x0,0x4(%edi)
  0xa7565b4c: jne    0xa7556400
  0xa7565b52: mov    -0x1c(%ebp),%esi
  0xa7565b55: mov    -0x18(%ebp),%edi
  0xa7565b58: ret    
  0xa7565b59: push   $0xb7302e8b
  0xa7565b5e: call   0xa7565b63
  0xa7565b63: pusha  
  0xa7565b64: call   0xb6ff5f32
  0xa7565b69: hlt    
  0xa7565b6a: nop
  0xa7565b6b: nop
  0xa7565b6c: int3   
  0xa7565b6d: int3   
  0xa7565b6e: int3   
  0xa7565b6f: int3   
  0xa7565b70: int3   
  0xa7565b71: int3   
  0xa7565b72: int3   
  0xa7565b73: int3   
  0xa7565b74: int3   
  0xa7565b75: int3   
  0xa7565b76: int3   
  0xa7565b77: int3   
  0xa7565b78: int3   
  0xa7565b79: int3   
  0xa7565b7a: int3   
  0xa7565b7b: int3   
  0xa7565b7c: int3   
  0xa7565b7d: int3   
  0xa7565b7e: int3   
  0xa7565b7f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sin)  [0xa7565ba0, 0xa7565ce0]  320 bytes

  0xa7565ba0: fldl   0x4(%esp)
  0xa7565ba4: fldl   0xb74ad448
  0xa7565baa: fld    %st(1)
  0xa7565bac: fabs   
  0xa7565bae: fucomip %st(1),%st
  0xa7565bb0: ffree  %st(0)
  0xa7565bb2: fincstp 
  0xa7565bb4: ja     0xa7565bc1
  0xa7565bba: fsin   
  0xa7565bbc: jmp    0xa7565cc5
  0xa7565bc1: pusha  
  0xa7565bc2: sub    $0x80,%esp
  0xa7565bc8: vextractf128 $0x1,%ymm0,(%esp)
  0xa7565bcf: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa7565bd7: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa7565bdf: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa7565be7: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa7565bef: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa7565bf7: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa7565bff: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa7565c07: sub    $0x80,%esp
  0xa7565c0d: vmovdqu %xmm0,(%esp)
  0xa7565c12: vmovdqu %xmm1,0x10(%esp)
  0xa7565c18: vmovdqu %xmm2,0x20(%esp)
  0xa7565c1e: vmovdqu %xmm3,0x30(%esp)
  0xa7565c24: vmovdqu %xmm4,0x40(%esp)
  0xa7565c2a: vmovdqu %xmm5,0x50(%esp)
  0xa7565c30: vmovdqu %xmm6,0x60(%esp)
  0xa7565c36: vmovdqu %xmm7,0x70(%esp)
  0xa7565c3c: sub    $0x8,%esp
  0xa7565c3f: fstpl  (%esp)
  0xa7565c42: call   0xb7181978
  0xa7565c47: add    $0x8,%esp
  0xa7565c4a: vmovdqu (%esp),%xmm0
  0xa7565c4f: vmovdqu 0x10(%esp),%xmm1
  0xa7565c55: vmovdqu 0x20(%esp),%xmm2
  0xa7565c5b: vmovdqu 0x30(%esp),%xmm3
  0xa7565c61: vmovdqu 0x40(%esp),%xmm4
  0xa7565c67: vmovdqu 0x50(%esp),%xmm5
  0xa7565c6d: vmovdqu 0x60(%esp),%xmm6
  0xa7565c73: vmovdqu 0x70(%esp),%xmm7
  0xa7565c79: add    $0x80,%esp
  0xa7565c7f: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa7565c86: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa7565c8e: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa7565c96: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa7565c9e: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa7565ca6: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa7565cae: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa7565cb6: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa7565cbe: add    $0x80,%esp
  0xa7565cc4: popa   
  0xa7565cc5: sub    $0x8,%esp
  0xa7565cc8: fstpl  (%esp)
  0xa7565ccb: vmovsd (%esp),%xmm0
  0xa7565cd0: add    $0x8,%esp
  0xa7565cd3: pop    %edi
  0xa7565cd4: mov    %esi,%esp
  0xa7565cd6: jmp    *%edi
  0xa7565cd8: int3   
  0xa7565cd9: int3   
  0xa7565cda: int3   
  0xa7565cdb: int3   
  0xa7565cdc: int3   
  0xa7565cdd: int3   
  0xa7565cde: int3   
  0xa7565cdf: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_cos)  [0xa7565d00, 0xa7565e40]  320 bytes

  0xa7565d00: fldl   0x4(%esp)
  0xa7565d04: fldl   0xb74ad448
  0xa7565d0a: fld    %st(1)
  0xa7565d0c: fabs   
  0xa7565d0e: fucomip %st(1),%st
  0xa7565d10: ffree  %st(0)
  0xa7565d12: fincstp 
  0xa7565d14: ja     0xa7565d21
  0xa7565d1a: fcos   
  0xa7565d1c: jmp    0xa7565e25
  0xa7565d21: pusha  
  0xa7565d22: sub    $0x80,%esp
  0xa7565d28: vextractf128 $0x1,%ymm0,(%esp)
  0xa7565d2f: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa7565d37: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa7565d3f: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa7565d47: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa7565d4f: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa7565d57: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa7565d5f: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa7565d67: sub    $0x80,%esp
  0xa7565d6d: vmovdqu %xmm0,(%esp)
  0xa7565d72: vmovdqu %xmm1,0x10(%esp)
  0xa7565d78: vmovdqu %xmm2,0x20(%esp)
  0xa7565d7e: vmovdqu %xmm3,0x30(%esp)
  0xa7565d84: vmovdqu %xmm4,0x40(%esp)
  0xa7565d8a: vmovdqu %xmm5,0x50(%esp)
  0xa7565d90: vmovdqu %xmm6,0x60(%esp)
  0xa7565d96: vmovdqu %xmm7,0x70(%esp)
  0xa7565d9c: sub    $0x8,%esp
  0xa7565d9f: fstpl  (%esp)
  0xa7565da2: call   0xb7181be0
  0xa7565da7: add    $0x8,%esp
  0xa7565daa: vmovdqu (%esp),%xmm0
  0xa7565daf: vmovdqu 0x10(%esp),%xmm1
  0xa7565db5: vmovdqu 0x20(%esp),%xmm2
  0xa7565dbb: vmovdqu 0x30(%esp),%xmm3
  0xa7565dc1: vmovdqu 0x40(%esp),%xmm4
  0xa7565dc7: vmovdqu 0x50(%esp),%xmm5
  0xa7565dcd: vmovdqu 0x60(%esp),%xmm6
  0xa7565dd3: vmovdqu 0x70(%esp),%xmm7
  0xa7565dd9: add    $0x80,%esp
  0xa7565ddf: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa7565de6: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa7565dee: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa7565df6: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa7565dfe: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa7565e06: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa7565e0e: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa7565e16: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa7565e1e: add    $0x80,%esp
  0xa7565e24: popa   
  0xa7565e25: sub    $0x8,%esp
  0xa7565e28: fstpl  (%esp)
  0xa7565e2b: vmovsd (%esp),%xmm0
  0xa7565e30: add    $0x8,%esp
  0xa7565e33: pop    %edi
  0xa7565e34: mov    %esi,%esp
  0xa7565e36: jmp    *%edi
  0xa7565e38: int3   
  0xa7565e39: int3   
  0xa7565e3a: int3   
  0xa7565e3b: int3   
  0xa7565e3c: int3   
  0xa7565e3d: int3   
  0xa7565e3e: int3   
  0xa7565e3f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_tan)  [0xa7565e60, 0xa7565fa0]  320 bytes

  0xa7565e60: fldl   0x4(%esp)
  0xa7565e64: fldl   0xb74ad448
  0xa7565e6a: fld    %st(1)
  0xa7565e6c: fabs   
  0xa7565e6e: fucomip %st(1),%st
  0xa7565e70: ffree  %st(0)
  0xa7565e72: fincstp 
  0xa7565e74: ja     0xa7565e83
  0xa7565e7a: fptan  
  0xa7565e7c: fstp   %st(0)
  0xa7565e7e: jmp    0xa7565f87
  0xa7565e83: pusha  
  0xa7565e84: sub    $0x80,%esp
  0xa7565e8a: vextractf128 $0x1,%ymm0,(%esp)
  0xa7565e91: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa7565e99: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa7565ea1: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa7565ea9: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa7565eb1: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa7565eb9: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa7565ec1: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa7565ec9: sub    $0x80,%esp
  0xa7565ecf: vmovdqu %xmm0,(%esp)
  0xa7565ed4: vmovdqu %xmm1,0x10(%esp)
  0xa7565eda: vmovdqu %xmm2,0x20(%esp)
  0xa7565ee0: vmovdqu %xmm3,0x30(%esp)
  0xa7565ee6: vmovdqu %xmm4,0x40(%esp)
  0xa7565eec: vmovdqu %xmm5,0x50(%esp)
  0xa7565ef2: vmovdqu %xmm6,0x60(%esp)
  0xa7565ef8: vmovdqu %xmm7,0x70(%esp)
  0xa7565efe: sub    $0x8,%esp
  0xa7565f01: fstpl  (%esp)
  0xa7565f04: call   0xb7181e44
  0xa7565f09: add    $0x8,%esp
  0xa7565f0c: vmovdqu (%esp),%xmm0
  0xa7565f11: vmovdqu 0x10(%esp),%xmm1
  0xa7565f17: vmovdqu 0x20(%esp),%xmm2
  0xa7565f1d: vmovdqu 0x30(%esp),%xmm3
  0xa7565f23: vmovdqu 0x40(%esp),%xmm4
  0xa7565f29: vmovdqu 0x50(%esp),%xmm5
  0xa7565f2f: vmovdqu 0x60(%esp),%xmm6
  0xa7565f35: vmovdqu 0x70(%esp),%xmm7
  0xa7565f3b: add    $0x80,%esp
  0xa7565f41: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa7565f48: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa7565f50: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa7565f58: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa7565f60: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa7565f68: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa7565f70: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa7565f78: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa7565f80: add    $0x80,%esp
  0xa7565f86: popa   
  0xa7565f87: sub    $0x8,%esp
  0xa7565f8a: fstpl  (%esp)
  0xa7565f8d: vmovsd (%esp),%xmm0
  0xa7565f92: add    $0x8,%esp
  0xa7565f95: pop    %edi
  0xa7565f96: mov    %esi,%esp
  0xa7565f98: jmp    *%edi
  0xa7565f9a: nop
  0xa7565f9b: nop
  0xa7565f9c: int3   
  0xa7565f9d: int3   
  0xa7565f9e: int3   
  0xa7565f9f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_abs)  [0xa7565fc0, 0xa7565fe0]  32 bytes

  0xa7565fc0: fldl   0x4(%esp)
  0xa7565fc4: fabs   
  0xa7565fc6: sub    $0x8,%esp
  0xa7565fc9: fstpl  (%esp)
  0xa7565fcc: vmovsd (%esp),%xmm0
  0xa7565fd1: add    $0x8,%esp
  0xa7565fd4: pop    %edi
  0xa7565fd5: mov    %esi,%esp
  0xa7565fd7: jmp    *%edi
  0xa7565fd9: nop
  0xa7565fda: nop
  0xa7565fdb: nop
  0xa7565fdc: int3   
  0xa7565fdd: int3   
  0xa7565fde: int3   
  0xa7565fdf: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sqrt)  [0xa7566000, 0xa7566020]  32 bytes

  0xa7566000: fldl   0x4(%esp)
  0xa7566004: fsqrt  
  0xa7566006: sub    $0x8,%esp
  0xa7566009: fstpl  (%esp)
  0xa756600c: vmovsd (%esp),%xmm0
  0xa7566011: add    $0x8,%esp
  0xa7566014: pop    %edi
  0xa7566015: mov    %esi,%esp
  0xa7566017: jmp    *%edi
  0xa7566019: nop
  0xa756601a: nop
  0xa756601b: nop
  0xa756601c: int3   
  0xa756601d: int3   
  0xa756601e: int3   
  0xa756601f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log)  [0xa7566040, 0xa7566080]  64 bytes

  0xa7566040: fldl   0x4(%esp)
  0xa7566044: fldln2 
  0xa7566046: fxch   %st(1)
  0xa7566048: fyl2x  
  0xa756604a: sub    $0x8,%esp
  0xa756604d: fstpl  (%esp)
  0xa7566050: fldl   (%esp)
  0xa7566053: add    $0x8,%esp
  0xa7566056: sub    $0x8,%esp
  0xa7566059: fstpl  (%esp)
  0xa756605c: vmovsd (%esp),%xmm0
  0xa7566061: add    $0x8,%esp
  0xa7566064: pop    %edi
  0xa7566065: mov    %esi,%esp
  0xa7566067: jmp    *%edi
  0xa7566069: nop
  0xa756606a: nop
  0xa756606b: nop
  0xa756606c: int3   
  0xa756606d: int3   
  0xa756606e: int3   
  0xa756606f: int3   
  0xa7566070: int3   
  0xa7566071: int3   
  0xa7566072: int3   
  0xa7566073: int3   
  0xa7566074: int3   
  0xa7566075: int3   
  0xa7566076: int3   
  0xa7566077: int3   
  0xa7566078: int3   
  0xa7566079: int3   
  0xa756607a: int3   
  0xa756607b: int3   
  0xa756607c: int3   
  0xa756607d: int3   
  0xa756607e: int3   
  0xa756607f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log10)  [0xa75660a0, 0xa75660e0]  64 bytes

  0xa75660a0: fldl   0x4(%esp)
  0xa75660a4: fldlg2 
  0xa75660a6: fxch   %st(1)
  0xa75660a8: fyl2x  
  0xa75660aa: sub    $0x8,%esp
  0xa75660ad: fstpl  (%esp)
  0xa75660b0: fldl   (%esp)
  0xa75660b3: add    $0x8,%esp
  0xa75660b6: sub    $0x8,%esp
  0xa75660b9: fstpl  (%esp)
  0xa75660bc: vmovsd (%esp),%xmm0
  0xa75660c1: add    $0x8,%esp
  0xa75660c4: pop    %edi
  0xa75660c5: mov    %esi,%esp
  0xa75660c7: jmp    *%edi
  0xa75660c9: nop
  0xa75660ca: nop
  0xa75660cb: nop
  0xa75660cc: int3   
  0xa75660cd: int3   
  0xa75660ce: int3   
  0xa75660cf: int3   
  0xa75660d0: int3   
  0xa75660d1: int3   
  0xa75660d2: int3   
  0xa75660d3: int3   
  0xa75660d4: int3   
  0xa75660d5: int3   
  0xa75660d6: int3   
  0xa75660d7: int3   
  0xa75660d8: int3   
  0xa75660d9: int3   
  0xa75660da: int3   
  0xa75660db: int3   
  0xa75660dc: int3   
  0xa75660dd: int3   
  0xa75660de: int3   
  0xa75660df: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_exp)  [0xa7566100, 0xa75662c0]  448 bytes

  0xa7566100: fldl   0x4(%esp)
  0xa7566104: fld    %st(0)
  0xa7566106: sub    $0x4,%esp
  0xa7566109: fstcw  (%esp)
  0xa756610d: mov    (%esp),%eax
  0xa7566110: or     $0x300,%eax
  0xa7566116: push   %eax
  0xa7566117: fldcw  (%esp)
  0xa756611a: pop    %eax
  0xa756611b: fldl2e 
  0xa756611d: fmulp  %st,%st(1)
  0xa756611f: sub    $0x8,%esp
  0xa7566122: fld    %st(0)
  0xa7566124: frndint 
  0xa7566126: fsubr  %st,%st(1)
  0xa7566128: fistpl (%esp)
  0xa756612b: f2xm1  
  0xa756612d: fld1   
  0xa756612f: faddp  %st,%st(1)
  0xa7566131: mov    (%esp),%eax
  0xa7566134: mov    $0xfffff800,%ecx
  0xa7566139: add    $0x3ff,%eax
  0xa756613f: mov    %eax,%edx
  0xa7566141: shl    $0x14,%eax
  0xa7566144: add    $0x1,%edx
  0xa7566147: cmove  %ecx,%eax
  0xa756614a: cmp    $0x1,%edx
  0xa756614d: cmove  %ecx,%eax
  0xa7566150: test   %edx,%ecx
  0xa7566152: cmovne %ecx,%eax
  0xa7566155: mov    %eax,0x4(%esp)
  0xa7566159: movl   $0x0,(%esp)
  0xa7566160: fmull  (%esp)
  0xa7566163: add    $0x8,%esp
  0xa7566166: fldcw  (%esp)
  0xa7566169: add    $0x4,%esp
  0xa756616c: fucomi %st(0),%st
  0xa756616e: jp     0xa756617b
  0xa7566174: ffree  %st(1)
  0xa7566176: jmp    0xa7566283
  0xa756617b: ffree  %st(0)
  0xa756617d: fincstp 
  0xa756617f: pusha  
  0xa7566180: sub    $0x80,%esp
  0xa7566186: vextractf128 $0x1,%ymm0,(%esp)
  0xa756618d: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa7566195: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa756619d: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa75661a5: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa75661ad: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa75661b5: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa75661bd: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa75661c5: sub    $0x80,%esp
  0xa75661cb: vmovdqu %xmm0,(%esp)
  0xa75661d0: vmovdqu %xmm1,0x10(%esp)
  0xa75661d6: vmovdqu %xmm2,0x20(%esp)
  0xa75661dc: vmovdqu %xmm3,0x30(%esp)
  0xa75661e2: vmovdqu %xmm4,0x40(%esp)
  0xa75661e8: vmovdqu %xmm5,0x50(%esp)
  0xa75661ee: vmovdqu %xmm6,0x60(%esp)
  0xa75661f4: vmovdqu %xmm7,0x70(%esp)
  0xa75661fa: sub    $0x8,%esp
  0xa75661fd: fstpl  (%esp)
  0xa7566200: call   0xb717efa6
  0xa7566205: add    $0x8,%esp
  0xa7566208: vmovdqu (%esp),%xmm0
  0xa756620d: vmovdqu 0x10(%esp),%xmm1
  0xa7566213: vmovdqu 0x20(%esp),%xmm2
  0xa7566219: vmovdqu 0x30(%esp),%xmm3
  0xa756621f: vmovdqu 0x40(%esp),%xmm4
  0xa7566225: vmovdqu 0x50(%esp),%xmm5
  0xa756622b: vmovdqu 0x60(%esp),%xmm6
  0xa7566231: vmovdqu 0x70(%esp),%xmm7
  0xa7566237: add    $0x80,%esp
  0xa756623d: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa7566244: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa756624c: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa7566254: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa756625c: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa7566264: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa756626c: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa7566274: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa756627c: add    $0x80,%esp
  0xa7566282: popa   
  0xa7566283: sub    $0x8,%esp
  0xa7566286: fstpl  (%esp)
  0xa7566289: fldl   (%esp)
  0xa756628c: add    $0x8,%esp
  0xa756628f: sub    $0x8,%esp
  0xa7566292: fstpl  (%esp)
  0xa7566295: vmovsd (%esp),%xmm0
  0xa756629a: add    $0x8,%esp
  0xa756629d: pop    %edi
  0xa756629e: mov    %esi,%esp
  0xa75662a0: jmp    *%edi
  0xa75662a2: nop
  0xa75662a3: nop
  0xa75662a4: int3   
  0xa75662a5: int3   
  0xa75662a6: int3   
  0xa75662a7: int3   
  0xa75662a8: int3   
  0xa75662a9: int3   
  0xa75662aa: int3   
  0xa75662ab: int3   
  0xa75662ac: int3   
  0xa75662ad: int3   
  0xa75662ae: int3   
  0xa75662af: int3   
  0xa75662b0: int3   
  0xa75662b1: int3   
  0xa75662b2: int3   
  0xa75662b3: int3   
  0xa75662b4: int3   
  0xa75662b5: int3   
  0xa75662b6: int3   
  0xa75662b7: int3   
  0xa75662b8: int3   
  0xa75662b9: int3   
  0xa75662ba: int3   
  0xa75662bb: int3   
  0xa75662bc: int3   
  0xa75662bd: int3   
  0xa75662be: int3   
  0xa75662bf: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_pow)  [0xa75662e0, 0xa75665a0]  704 bytes

  0xa75662e0: fldl   0x4(%esp)
  0xa75662e4: fldl   0xc(%esp)
  0xa75662e8: mov    $0xb786a9c0,%eax
  0xa75662ed: fldl   (%eax)
  0xa75662ef: fucomip %st(2),%st
  0xa75662f1: jp     0xa756630a
  0xa75662f7: jne    0xa756630a
  0xa75662fd: fxch   %st(1)
  0xa75662ff: ffree  %st(0)
  0xa7566301: fincstp 
  0xa7566303: fmul   %st(0),%st
  0xa7566305: jmp    0xa7566575
  0xa756630a: fldz   
  0xa756630c: fucomip %st(1),%st
  0xa756630e: ja     0xa756638d
  0xa7566314: fld    %st(1)
  0xa7566316: fld    %st(1)
  ;; fast_pow {
  0xa7566318: sub    $0x4,%esp
  0xa756631b: fstcw  (%esp)
  0xa756631f: mov    (%esp),%eax
  0xa7566322: or     $0x300,%eax
  0xa7566328: push   %eax
  0xa7566329: fldcw  (%esp)
  0xa756632c: pop    %eax
  0xa756632d: fyl2x  
  0xa756632f: sub    $0x8,%esp
  0xa7566332: fld    %st(0)
  0xa7566334: frndint 
  0xa7566336: fsubr  %st,%st(1)
  0xa7566338: fistpl (%esp)
  0xa756633b: f2xm1  
  0xa756633d: fld1   
  0xa756633f: faddp  %st,%st(1)
  0xa7566341: mov    (%esp),%eax
  0xa7566344: mov    $0xfffff800,%ecx
  0xa7566349: add    $0x3ff,%eax
  0xa756634f: mov    %eax,%edx
  0xa7566351: shl    $0x14,%eax
  0xa7566354: add    $0x1,%edx
  0xa7566357: cmove  %ecx,%eax
  0xa756635a: cmp    $0x1,%edx
  0xa756635d: cmove  %ecx,%eax
  0xa7566360: test   %edx,%ecx
  0xa7566362: cmovne %ecx,%eax
  0xa7566365: mov    %eax,0x4(%esp)
  0xa7566369: movl   $0x0,(%esp)
  0xa7566370: fmull  (%esp)
  0xa7566373: add    $0x8,%esp
  0xa7566376: fldcw  (%esp)
  0xa7566379: add    $0x4,%esp
  ;; } fast_pow
  0xa756637c: fucomi %st(0),%st
  0xa756637e: jp     0xa7566469
  0xa7566384: ffree  %st(2)
  0xa7566386: ffree  %st(1)
  0xa7566388: jmp    0xa7566575
  0xa756638d: fld    %st(1)
  0xa756638f: frndint 
  0xa7566391: fucomi %st(2),%st
  0xa7566393: jne    0xa7566469
  0xa7566399: sub    $0x8,%esp
  0xa756639c: fld1   
  0xa756639e: fadd   %st(1),%st
  0xa75663a0: fucomip %st(1),%st
  0xa75663a2: fistpll (%esp)
  0xa75663a5: jne    0xa75663ba
  0xa75663ab: movl   $0x0,(%esp)
  0xa75663b2: movl   $0x0,0x4(%esp)
  0xa75663ba: fld    %st(1)
  0xa75663bc: fld    %st(1)
  0xa75663be: fabs   
  ;; fast_pow {
  0xa75663c0: sub    $0x4,%esp
  0xa75663c3: fstcw  (%esp)
  0xa75663c7: mov    (%esp),%eax
  0xa75663ca: or     $0x300,%eax
  0xa75663d0: push   %eax
  0xa75663d1: fldcw  (%esp)
  0xa75663d4: pop    %eax
  0xa75663d5: fyl2x  
  0xa75663d7: sub    $0x8,%esp
  0xa75663da: fld    %st(0)
  0xa75663dc: frndint 
  0xa75663de: fsubr  %st,%st(1)
  0xa75663e0: fistpl (%esp)
  0xa75663e3: f2xm1  
  0xa75663e5: fld1   
  0xa75663e7: faddp  %st,%st(1)
  0xa75663e9: mov    (%esp),%eax
  0xa75663ec: mov    $0xfffff800,%ecx
  0xa75663f1: add    $0x3ff,%eax
  0xa75663f7: mov    %eax,%edx
  0xa75663f9: shl    $0x14,%eax
  0xa75663fc: add    $0x1,%edx
  0xa75663ff: cmove  %ecx,%eax
  0xa7566402: cmp    $0x1,%edx
  0xa7566405: cmove  %ecx,%eax
  0xa7566408: test   %edx,%ecx
  0xa756640a: cmovne %ecx,%eax
  0xa756640d: mov    %eax,0x4(%esp)
  0xa7566411: movl   $0x0,(%esp)
  0xa7566418: fmull  (%esp)
  0xa756641b: add    $0x8,%esp
  0xa756641e: fldcw  (%esp)
  0xa7566421: add    $0x4,%esp
  ;; } fast_pow
  0xa7566424: fucomi %st(0),%st
  0xa7566426: pop    %eax
  0xa7566427: pop    %ecx
  0xa7566428: jp     0xa7566469
  0xa756642e: test   %eax,%eax
  0xa7566430: jne    0xa7566453
  0xa7566436: cmp    $0x80000000,%ecx
  0xa756643c: jne    0xa7566453
  ;; integer indefinite value shouldn't be seen here
  0xa7566442: push   $0xb74ad190
  0xa7566447: call   0xa756644c
  0xa756644c: pusha  
  0xa756644d: call   0xb6ff5f32
  0xa7566452: hlt    
  0xa7566453: ffree  %st(2)
  0xa7566455: ffree  %st(1)
  0xa7566457: test   $0x1,%eax
  0xa756645c: je     0xa7566575
  0xa7566462: fchs   
  0xa7566464: jmp    0xa7566575
  0xa7566469: ffree  %st(0)
  0xa756646b: fincstp 
  0xa756646d: pusha  
  0xa756646e: sub    $0x80,%esp
  0xa7566474: vextractf128 $0x1,%ymm0,(%esp)
  0xa756647b: vextractf128 $0x1,%ymm1,0x10(%esp)
  0xa7566483: vextractf128 $0x1,%ymm2,0x20(%esp)
  0xa756648b: vextractf128 $0x1,%ymm3,0x30(%esp)
  0xa7566493: vextractf128 $0x1,%ymm4,0x40(%esp)
  0xa756649b: vextractf128 $0x1,%ymm5,0x50(%esp)
  0xa75664a3: vextractf128 $0x1,%ymm6,0x60(%esp)
  0xa75664ab: vextractf128 $0x1,%ymm7,0x70(%esp)
  0xa75664b3: sub    $0x80,%esp
  0xa75664b9: vmovdqu %xmm0,(%esp)
  0xa75664be: vmovdqu %xmm1,0x10(%esp)
  0xa75664c4: vmovdqu %xmm2,0x20(%esp)
  0xa75664ca: vmovdqu %xmm3,0x30(%esp)
  0xa75664d0: vmovdqu %xmm4,0x40(%esp)
  0xa75664d6: vmovdqu %xmm5,0x50(%esp)
  0xa75664dc: vmovdqu %xmm6,0x60(%esp)
  0xa75664e2: vmovdqu %xmm7,0x70(%esp)
  0xa75664e8: sub    $0x10,%esp
  0xa75664eb: fstpl  (%esp)
  0xa75664ee: fstpl  0x8(%esp)
  0xa75664f2: call   0xb717fe80
  0xa75664f7: add    $0x10,%esp
  0xa75664fa: vmovdqu (%esp),%xmm0
  0xa75664ff: vmovdqu 0x10(%esp),%xmm1
  0xa7566505: vmovdqu 0x20(%esp),%xmm2
  0xa756650b: vmovdqu 0x30(%esp),%xmm3
  0xa7566511: vmovdqu 0x40(%esp),%xmm4
  0xa7566517: vmovdqu 0x50(%esp),%xmm5
  0xa756651d: vmovdqu 0x60(%esp),%xmm6
  0xa7566523: vmovdqu 0x70(%esp),%xmm7
  0xa7566529: add    $0x80,%esp
  0xa756652f: vinsertf128 $0x1,(%esp),%ymm0,%ymm0
  0xa7566536: vinsertf128 $0x1,0x10(%esp),%ymm1,%ymm1
  0xa756653e: vinsertf128 $0x1,0x20(%esp),%ymm2,%ymm2
  0xa7566546: vinsertf128 $0x1,0x30(%esp),%ymm3,%ymm3
  0xa756654e: vinsertf128 $0x1,0x40(%esp),%ymm4,%ymm4
  0xa7566556: vinsertf128 $0x1,0x50(%esp),%ymm5,%ymm5
  0xa756655e: vinsertf128 $0x1,0x60(%esp),%ymm6,%ymm6
  0xa7566566: vinsertf128 $0x1,0x70(%esp),%ymm7,%ymm7
  0xa756656e: add    $0x80,%esp
  0xa7566574: popa   
  0xa7566575: sub    $0x8,%esp
  0xa7566578: fstpl  (%esp)
  0xa756657b: fldl   (%esp)
  0xa756657e: add    $0x8,%esp
  0xa7566581: sub    $0x8,%esp
  0xa7566584: fstpl  (%esp)
  0xa7566587: vmovsd (%esp),%xmm0
  0xa756658c: add    $0x8,%esp
  0xa756658f: pop    %edi
  0xa7566590: mov    %esi,%esp
  0xa7566592: jmp    *%edi
  0xa7566594: int3   
  0xa7566595: int3   
  0xa7566596: int3   
  0xa7566597: int3   
  0xa7566598: int3   
  0xa7566599: int3   
  0xa756659a: int3   
  0xa756659b: int3   
  0xa756659c: int3   
  0xa756659d: int3   
  0xa756659e: int3   
  0xa756659f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_ref_reference_get)  [0xa75665c0, 0xa7566b00]  1344 bytes

  0xa75665c0: mov    0x8(%ebx),%edx
  0xa75665c3: movzwl 0x24(%edx),%ecx
  0xa75665c7: movzwl 0x22(%edx),%edx
  0xa75665cb: sub    %ecx,%edx
  0xa75665cd: cmp    $0x3f6,%edx
  0xa75665d3: jbe    0xa7566654
  0xa75665d9: push   %esi
  0xa75665da: mov    %esp,%esi
  0xa75665dc: shr    $0xc,%esi
  0xa75665df: mov    -0x4871aba0(,%esi,4),%esi
  0xa75665e6: lea    0x28(,%edx,4),%eax
  0xa75665ed: cmpl   $0x0,0xd8(%esi)
  0xa75665f7: jne    0xa756660e
  0xa75665fd: push   $0xb756221c
  0xa7566602: call   0xa7566607
  0xa7566607: pusha  
  0xa7566608: call   0xb6ff5f32
  0xa756660d: hlt    
  0xa756660e: cmpl   $0x0,0xdc(%esi)
  0xa7566618: jne    0xa756662f
  0xa756661e: push   $0xb756222f
  0xa7566623: call   0xa7566628
  0xa7566628: pusha  
  0xa7566629: call   0xb6ff5f32
  0xa756662e: hlt    
  0xa756662f: add    0xd8(%esi),%eax
  0xa7566635: sub    0xdc(%esi),%eax
  0xa756663b: add    $0x9000,%eax
  0xa7566641: cmp    %eax,%esp
  0xa7566643: ja     0xa7566653
  0xa7566649: pop    %esi
  0xa756664a: pop    %eax
  0xa756664b: mov    %esi,%esp
  0xa756664d: push   %eax
  0xa756664e: jmp    0xa75589e0
  0xa7566653: pop    %esi
  0xa7566654: pop    %eax
  0xa7566655: lea    -0x4(%esp,%ecx,4),%edi
  0xa7566659: test   %edx,%edx
  0xa756665b: jle    0xa7566669
  0xa7566661: push   $0x0
  0xa7566666: dec    %edx
  0xa7566667: jg     0xa7566661
  0xa7566669: push   %eax
  0xa756666a: push   %ebp
  0xa756666b: mov    %esp,%ebp
  0xa756666d: push   %esi
  0xa756666e: push   $0x0
  0xa7566673: mov    0x8(%ebx),%esi
  0xa7566676: lea    0x28(%esi),%esi
  0xa7566679: push   %ebx
  0xa756667a: mov    0xc(%ebx),%edx
  0xa756667d: test   %edx,%edx
  0xa756667f: je     0xa756668b
  0xa7566685: add    $0xe0,%edx
  0xa756668b: push   %edx
  0xa756668c: mov    0x8(%ebx),%edx
  0xa756668f: mov    0x8(%edx),%edx
  0xa7566692: mov    0xc(%edx),%edx
  0xa7566695: push   %edx
  0xa7566696: push   %edi
  0xa7566697: push   %esi
  0xa7566698: push   $0x0
  0xa756669d: mov    %esp,(%esp)
  0xa75666a0: mov    0x14(%ebx),%eax
  0xa75666a3: test   $0x100,%eax
  0xa75666a8: je     0xa75666bf
  0xa75666ae: push   $0xb7562538
  0xa75666b3: call   0xa75666b8
  0xa75666b8: pusha  
  0xa75666b9: call   0xb6ff5f32
  0xa75666be: hlt    
  0xa75666bf: test   $0x400,%eax
  0xa75666c4: je     0xa75666db
  0xa75666ca: push   $0xb75623a4
  0xa75666cf: call   0xa75666d4
  0xa75666d4: pusha  
  0xa75666d5: call   0xb6ff5f32
  0xa75666da: hlt    
  0xa75666db: mov    %esp,%eax
  0xa75666dd: shr    $0xc,%eax
  0xa75666e0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75666e7: movb   $0x1,0x1a5(%eax)
  0xa75666ee: mov    -0x10(%ebp),%eax
  0xa75666f1: test   %eax,%eax
  0xa75666f3: je     0xa7566767
  0xa75666f9: mov    -0x4(%eax),%ecx
  0xa75666fc: test   %ecx,%ecx
  0xa75666fe: js     0xa7566767
  0xa7566704: add    %ecx,%eax
  0xa7566706: mov    0x4(%eax),%ecx
  0xa7566709: sub    $0x2,%ecx
  0xa756670c: mov    0x8(%eax,%ecx,4),%edx
  0xa7566710: neg    %edx
  0xa7566712: mov    (%edi,%edx,4),%edx
  0xa7566715: test   %edx,%edx
  0xa7566717: jne    0xa7566720
  0xa7566719: orl    $0x1,0xc(%eax,%ecx,4)
  0xa756671e: jmp    0xa7566762
  0xa7566720: mov    0x4(%edx),%edx
  0xa7566723: xor    0xc(%eax,%ecx,4),%edx
  0xa7566727: test   $0xfffffffc,%edx
  0xa756672d: je     0xa7566762
  0xa756672f: test   $0x2,%edx
  0xa7566735: jne    0xa7566762
  0xa7566737: cmpl   $0x0,0xc(%eax,%ecx,4)
  0xa756673f: je     0xa756675e
  0xa7566741: cmpl   $0x1,0xc(%eax,%ecx,4)
  0xa7566749: je     0xa756675e
  0xa756674b: xor    0xc(%eax,%ecx,4),%edx
  0xa756674f: test   $0xfffffffc,%edx
  0xa7566755: je     0xa7566762
  0xa7566757: orl    $0x2,0xc(%eax,%ecx,4)
  0xa756675c: jmp    0xa7566762
  0xa756675e: mov    %edx,0xc(%eax,%ecx,4)
  0xa7566762: sub    $0x2,%ecx
  0xa7566765: jns    0xa756670c
  0xa7566767: mov    0xc(%ebx),%eax
  0xa756676a: test   %eax,%eax
  0xa756676c: je     0xa756678e
  0xa756676e: mov    0xbc(%eax),%ecx
  0xa7566774: add    $0x8,%ecx
  0xa7566777: mov    %ecx,0xbc(%eax)
  0xa756677d: and    $0x3f8,%ecx
  0xa7566783: je     0xa7566a37
  0xa7566789: jmp    0xa7566863
  0xa756678e: mov    0x10(%ebx),%eax
  0xa7566791: test   %eax,%eax
  0xa7566793: jne    0xa756684e
  0xa7566799: call   0xa75667a3
  0xa756679e: jmp    0xa7566843
  0xa75667a3: push   %ebx
  0xa75667a4: lea    0x8(%esp),%eax
  0xa75667a8: cmpl   $0x0,-0x8(%ebp)
  0xa75667af: je     0xa75667c6
  0xa75667b5: push   $0xb7449b58
  0xa75667ba: call   0xa75667bf
  0xa75667bf: pusha  
  0xa75667c0: call   0xb6ff5f32
  0xa75667c5: hlt    
  0xa75667c6: mov    %esi,-0x1c(%ebp)
  0xa75667c9: mov    %esp,%edi
  0xa75667cb: shr    $0xc,%edi
  0xa75667ce: mov    -0x4871aba0(,%edi,4),%edi
  0xa75667d5: push   %edi
  0xa75667d6: mov    %ebp,0x148(%edi)
  0xa75667dc: mov    %eax,0x140(%edi)
  0xa75667e2: call   0xb6e61c92
  0xa75667e7: add    $0x8,%esp
  0xa75667ea: push   %eax
  0xa75667eb: mov    %esp,%eax
  0xa75667ed: shr    $0xc,%eax
  0xa75667f0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75667f7: cmp    %eax,%edi
  0xa75667f9: je     0xa7566810
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75667ff: push   $0xb74acf8c
  0xa7566804: call   0xa7566809
  0xa7566809: pusha  
  0xa756680a: call   0xb6ff5f32
  0xa756680f: hlt    
  0xa7566810: pop    %eax
  0xa7566811: movl   $0x0,0x140(%edi)
  0xa756681b: movl   $0x0,0x148(%edi)
  0xa7566825: movl   $0x0,0x144(%edi)
  0xa756682f: cmpl   $0x0,0x4(%edi)
  0xa7566836: jne    0xa7556400
  0xa756683c: mov    -0x1c(%ebp),%esi
  0xa756683f: mov    -0x18(%ebp),%edi
  0xa7566842: ret    
  0xa7566843: mov    0x10(%ebx),%eax
  0xa7566846: test   %eax,%eax
  0xa7566848: je     0xa7566863
  0xa756684e: mov    0x8(%eax),%ecx
  0xa7566851: add    $0x8,%ecx
  0xa7566854: mov    %ecx,0x8(%eax)
  0xa7566857: and    $0x3f8,%ecx
  0xa756685d: je     0xa7566a37
  0xa7566863: mov    %eax,-0x1000(%esp)
  0xa756686a: mov    %eax,-0x2000(%esp)
  0xa7566871: mov    %eax,-0x3000(%esp)
  0xa7566878: mov    %eax,-0x4000(%esp)
  0xa756687f: mov    %eax,-0x5000(%esp)
  0xa7566886: mov    %eax,-0x6000(%esp)
  0xa756688d: mov    %eax,-0x7000(%esp)
  0xa7566894: mov    %eax,-0x8000(%esp)
  0xa756689b: mov    %eax,-0x9000(%esp)
  0xa75668a2: mov    %esp,%eax
  0xa75668a4: shr    $0xc,%eax
  0xa75668a7: mov    -0x4871aba0(,%eax,4),%eax
  0xa75668ae: movb   $0x0,0x1a5(%eax)
  0xa75668b5: mov    0x14(%ebx),%eax
  0xa75668b8: test   $0x20,%eax
  0xa75668bd: je     0xa75668d4
  0xa75668c3: push   $0xb75623d4
  0xa75668c8: call   0xa75668cd
  0xa75668cd: pusha  
  0xa75668ce: call   0xb6ff5f32
  0xa75668d3: hlt    
  0xa75668d4: mov    -0x20(%ebp),%eax
  0xa75668d7: cmp    %esp,%eax
  0xa75668d9: je     0xa75668f0
  0xa75668df: push   $0xb75623f4
  0xa75668e4: call   0xa75668e9
  0xa75668e9: pusha  
  0xa75668ea: call   0xb6ff5f32
  0xa75668ef: hlt    
  0xa75668f0: cmpb   $0x0,0xb78c1e7e
  0xa75668f7: je     0xa7566934
  0xa75668fd: mov    %esp,%ecx
  0xa75668ff: shr    $0xc,%ecx
  0xa7566902: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7566909: mov    -0xc(%ebp),%ebx
  0xa756690c: push   %ebx
  0xa756690d: push   %ecx
  0xa756690e: cmpl   $0x0,-0x8(%ebp)
  0xa7566915: je     0xa756692c
  0xa756691b: push   $0xb7449b18
  0xa7566920: call   0xa7566925
  0xa7566925: pusha  
  0xa7566926: call   0xb6ff5f32
  0xa756692b: hlt    
  0xa756692c: call   0xb71757d0
  0xa7566931: add    $0x8,%esp
  0xa7566934: movzbl (%esi),%ebx
  0xa7566937: jmp    *-0x48722ae0(,%ebx,4)
  0xa756693e: call   0xa7566948
  0xa7566943: jmp    0xa75669e7
  0xa7566948: lea    0x4(%esp),%eax
  0xa756694c: cmpl   $0x0,-0x8(%ebp)
  0xa7566953: je     0xa756696a
  0xa7566959: push   $0xb7449b58
  0xa756695e: call   0xa7566963
  0xa7566963: pusha  
  0xa7566964: call   0xb6ff5f32
  0xa7566969: hlt    
  0xa756696a: mov    %esi,-0x1c(%ebp)
  0xa756696d: mov    %esp,%edi
  0xa756696f: shr    $0xc,%edi
  0xa7566972: mov    -0x4871aba0(,%edi,4),%edi
  0xa7566979: push   %edi
  0xa756697a: mov    %ebp,0x148(%edi)
  0xa7566980: mov    %eax,0x140(%edi)
  0xa7566986: call   0xb6e61328
  0xa756698b: add    $0x4,%esp
  0xa756698e: push   %eax
  0xa756698f: mov    %esp,%eax
  0xa7566991: shr    $0xc,%eax
  0xa7566994: mov    -0x4871aba0(,%eax,4),%eax
  0xa756699b: cmp    %eax,%edi
  0xa756699d: je     0xa75669b4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75669a3: push   $0xb74acf8c
  0xa75669a8: call   0xa75669ad
  0xa75669ad: pusha  
  0xa75669ae: call   0xb6ff5f32
  0xa75669b3: hlt    
  0xa75669b4: pop    %eax
  0xa75669b5: movl   $0x0,0x140(%edi)
  0xa75669bf: movl   $0x0,0x148(%edi)
  0xa75669c9: movl   $0x0,0x144(%edi)
  0xa75669d3: cmpl   $0x0,0x4(%edi)
  0xa75669da: jne    0xa7556400
  0xa75669e0: mov    -0x1c(%ebp),%esi
  0xa75669e3: mov    -0x18(%ebp),%edi
  0xa75669e6: ret    
  0xa75669e7: push   %eax
  0xa75669e8: push   %ebx
  0xa75669e9: mov    -0xc(%ebp),%ebx
  0xa75669ec: mov    0xc(%ebx),%eax
  0xa75669ef: test   %eax,%eax
  0xa75669f1: je     0xa7566a2a
  0xa75669f7: push   %esi
  0xa75669f8: push   %ebx
  0xa75669f9: cmpl   $0x0,-0x8(%ebp)
  0xa7566a00: je     0xa7566a17
  0xa7566a06: push   $0xb7449b18
  0xa7566a0b: call   0xa7566a10
  0xa7566a10: pusha  
  0xa7566a11: call   0xb6ff5f32
  0xa7566a16: hlt    
  0xa7566a17: call   0xb6e61172
  0xa7566a1c: add    $0x8,%esp
  0xa7566a1f: mov    0xc(%ebx),%ebx
  0xa7566a22: add    $0xe0,%ebx
  0xa7566a28: add    %ebx,%eax
  0xa7566a2a: mov    %eax,-0x10(%ebp)
  0xa7566a2d: pop    %ebx
  0xa7566a2e: pop    %eax
  0xa7566a2f: mov    -0xc(%ebp),%ebx
  0xa7566a32: jmp    0xa7566863
  0xa7566a37: mov    $0x0,%eax
  0xa7566a3c: call   0xa7566a46
  0xa7566a41: jmp    0xa7566ae6
  0xa7566a46: push   %eax
  0xa7566a47: lea    0x8(%esp),%eax
  0xa7566a4b: cmpl   $0x0,-0x8(%ebp)
  0xa7566a52: je     0xa7566a69
  0xa7566a58: push   $0xb7449b58
  0xa7566a5d: call   0xa7566a62
  0xa7566a62: pusha  
  0xa7566a63: call   0xb6ff5f32
  0xa7566a68: hlt    
  0xa7566a69: mov    %esi,-0x1c(%ebp)
  0xa7566a6c: mov    %esp,%edi
  0xa7566a6e: shr    $0xc,%edi
  0xa7566a71: mov    -0x4871aba0(,%edi,4),%edi
  0xa7566a78: push   %edi
  0xa7566a79: mov    %ebp,0x148(%edi)
  0xa7566a7f: mov    %eax,0x140(%edi)
  0xa7566a85: call   0xb6e60bc8
  0xa7566a8a: add    $0x8,%esp
  0xa7566a8d: push   %eax
  0xa7566a8e: mov    %esp,%eax
  0xa7566a90: shr    $0xc,%eax
  0xa7566a93: mov    -0x4871aba0(,%eax,4),%eax
  0xa7566a9a: cmp    %eax,%edi
  0xa7566a9c: je     0xa7566ab3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7566aa2: push   $0xb74acf8c
  0xa7566aa7: call   0xa7566aac
  0xa7566aac: pusha  
  0xa7566aad: call   0xb6ff5f32
  0xa7566ab2: hlt    
  0xa7566ab3: pop    %eax
  0xa7566ab4: movl   $0x0,0x140(%edi)
  0xa7566abe: movl   $0x0,0x148(%edi)
  0xa7566ac8: movl   $0x0,0x144(%edi)
  0xa7566ad2: cmpl   $0x0,0x4(%edi)
  0xa7566ad9: jne    0xa7556400
  0xa7566adf: mov    -0x1c(%ebp),%esi
  0xa7566ae2: mov    -0x18(%ebp),%edi
  0xa7566ae5: ret    
  0xa7566ae6: mov    -0xc(%ebp),%ebx
  0xa7566ae9: jmp    0xa7566863
  0xa7566aee: nop
  0xa7566aef: nop
  0xa7566af0: int3   
  0xa7566af1: int3   
  0xa7566af2: int3   
  0xa7566af3: int3   
  0xa7566af4: int3   
  0xa7566af5: int3   
  0xa7566af6: int3   
  0xa7566af7: int3   
  0xa7566af8: int3   
  0xa7566af9: int3   
  0xa7566afa: int3   
  0xa7566afb: int3   
  0xa7566afc: int3   
  0xa7566afd: int3   
  0xa7566afe: int3   
  0xa7566aff: int3   

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_update)  [0xa7566b20, 0xa7567440]  2336 bytes

  0xa7566b20: cmpl   $0x0,0xb78cefa0
  0xa7566b2a: jne    0xa7566b54
  0xa7566b30: mov    0x4(%esp),%edx
  0xa7566b34: mov    0x8(%esp),%eax
  0xa7566b38: mov    $0xb786b680,%edi
  0xa7566b3d: not    %eax
  0xa7566b3f: xor    %eax,%edx
  0xa7566b41: and    $0xff,%edx
  0xa7566b47: shr    $0x8,%eax
  0xa7566b4a: xor    (%edi,%edx,4),%eax
  0xa7566b4d: not    %eax
  0xa7566b4f: pop    %edi
  0xa7566b50: mov    %esi,%esp
  0xa7566b52: jmp    *%edi
  0xa7566b54: mov    0x8(%ebx),%ecx
  0xa7566b57: movzwl 0x24(%ecx),%ecx
  0xa7566b5b: pop    %eax
  0xa7566b5c: lea    -0x4(%esp,%ecx,4),%edi
  0xa7566b60: push   $0x0
  0xa7566b65: push   $0x0
  0xa7566b6a: push   %eax
  0xa7566b6b: push   %ebp
  0xa7566b6c: mov    %esp,%ebp
  0xa7566b6e: push   %esi
  0xa7566b6f: push   $0x0
  0xa7566b74: mov    0x8(%ebx),%esi
  0xa7566b77: lea    0x28(%esi),%esi
  0xa7566b7a: push   %ebx
  0xa7566b7b: mov    0xc(%ebx),%edx
  0xa7566b7e: test   %edx,%edx
  0xa7566b80: je     0xa7566b8c
  0xa7566b86: add    $0xe0,%edx
  0xa7566b8c: push   %edx
  0xa7566b8d: mov    0x8(%ebx),%edx
  0xa7566b90: mov    0x8(%edx),%edx
  0xa7566b93: mov    0xc(%edx),%edx
  0xa7566b96: push   %edx
  0xa7566b97: push   %edi
  0xa7566b98: push   $0x0
  0xa7566b9d: push   $0x0
  0xa7566ba2: mov    %esp,(%esp)
  0xa7566ba5: mov    0x14(%ebx),%eax
  0xa7566ba8: test   $0x100,%eax
  0xa7566bad: jne    0xa7566bc4
  0xa7566bb3: push   $0xb7562374
  0xa7566bb8: call   0xa7566bbd
  0xa7566bbd: pusha  
  0xa7566bbe: call   0xb6ff5f32
  0xa7566bc3: hlt    
  0xa7566bc4: test   $0x400,%eax
  0xa7566bc9: je     0xa7566be0
  0xa7566bcf: push   $0xb75623a4
  0xa7566bd4: call   0xa7566bd9
  0xa7566bd9: pusha  
  0xa7566bda: call   0xb6ff5f32
  0xa7566bdf: hlt    
  0xa7566be0: mov    %esp,%eax
  0xa7566be2: shr    $0xc,%eax
  0xa7566be5: mov    -0x4871aba0(,%eax,4),%eax
  0xa7566bec: movb   $0x1,0x1a5(%eax)
  0xa7566bf3: mov    0xc(%ebx),%eax
  0xa7566bf6: test   %eax,%eax
  0xa7566bf8: je     0xa7566c1a
  0xa7566bfa: mov    0xbc(%eax),%ecx
  0xa7566c00: add    $0x8,%ecx
  0xa7566c03: mov    %ecx,0xbc(%eax)
  0xa7566c09: and    $0x3f8,%ecx
  0xa7566c0f: je     0xa756737c
  0xa7566c15: jmp    0xa7566cef
  0xa7566c1a: mov    0x10(%ebx),%eax
  0xa7566c1d: test   %eax,%eax
  0xa7566c1f: jne    0xa7566cda
  0xa7566c25: call   0xa7566c2f
  0xa7566c2a: jmp    0xa7566ccf
  0xa7566c2f: push   %ebx
  0xa7566c30: lea    0x8(%esp),%eax
  0xa7566c34: cmpl   $0x0,-0x8(%ebp)
  0xa7566c3b: je     0xa7566c52
  0xa7566c41: push   $0xb7449b58
  0xa7566c46: call   0xa7566c4b
  0xa7566c4b: pusha  
  0xa7566c4c: call   0xb6ff5f32
  0xa7566c51: hlt    
  0xa7566c52: mov    %esi,-0x1c(%ebp)
  0xa7566c55: mov    %esp,%edi
  0xa7566c57: shr    $0xc,%edi
  0xa7566c5a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7566c61: push   %edi
  0xa7566c62: mov    %ebp,0x148(%edi)
  0xa7566c68: mov    %eax,0x140(%edi)
  0xa7566c6e: call   0xb6e61c92
  0xa7566c73: add    $0x8,%esp
  0xa7566c76: push   %eax
  0xa7566c77: mov    %esp,%eax
  0xa7566c79: shr    $0xc,%eax
  0xa7566c7c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7566c83: cmp    %eax,%edi
  0xa7566c85: je     0xa7566c9c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7566c8b: push   $0xb74acf8c
  0xa7566c90: call   0xa7566c95
  0xa7566c95: pusha  
  0xa7566c96: call   0xb6ff5f32
  0xa7566c9b: hlt    
  0xa7566c9c: pop    %eax
  0xa7566c9d: movl   $0x0,0x140(%edi)
  0xa7566ca7: movl   $0x0,0x148(%edi)
  0xa7566cb1: movl   $0x0,0x144(%edi)
  0xa7566cbb: cmpl   $0x0,0x4(%edi)
  0xa7566cc2: jne    0xa7556400
  0xa7566cc8: mov    -0x1c(%ebp),%esi
  0xa7566ccb: mov    -0x18(%ebp),%edi
  0xa7566cce: ret    
  0xa7566ccf: mov    0x10(%ebx),%eax
  0xa7566cd2: test   %eax,%eax
  0xa7566cd4: je     0xa7566cef
  0xa7566cda: mov    0x8(%eax),%ecx
  0xa7566cdd: add    $0x8,%ecx
  0xa7566ce0: mov    %ecx,0x8(%eax)
  0xa7566ce3: and    $0x3f8,%ecx
  0xa7566ce9: je     0xa756737c
  0xa7566cef: mov    %eax,-0x9000(%esp)
  0xa7566cf6: mov    %esp,%eax
  0xa7566cf8: shr    $0xc,%eax
  0xa7566cfb: mov    -0x4871aba0(,%eax,4),%eax
  0xa7566d02: movb   $0x0,0x1a5(%eax)
  0xa7566d09: mov    0x14(%ebx),%eax
  0xa7566d0c: test   $0x20,%eax
  0xa7566d11: je     0xa7566d28
  0xa7566d17: push   $0xb75623d4
  0xa7566d1c: call   0xa7566d21
  0xa7566d21: pusha  
  0xa7566d22: call   0xb6ff5f32
  0xa7566d27: hlt    
  0xa7566d28: mov    -0x20(%ebp),%eax
  0xa7566d2b: cmp    %esp,%eax
  0xa7566d2d: je     0xa7566d44
  0xa7566d33: push   $0xb75623f4
  0xa7566d38: call   0xa7566d3d
  0xa7566d3d: pusha  
  0xa7566d3e: call   0xb6ff5f32
  0xa7566d43: hlt    
  0xa7566d44: cmpb   $0x0,0xb78c1e7e
  0xa7566d4b: je     0xa7566d88
  0xa7566d51: mov    %esp,%ecx
  0xa7566d53: shr    $0xc,%ecx
  0xa7566d56: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7566d5d: mov    -0xc(%ebp),%ebx
  0xa7566d60: push   %ebx
  0xa7566d61: push   %ecx
  0xa7566d62: cmpl   $0x0,-0x8(%ebp)
  0xa7566d69: je     0xa7566d80
  0xa7566d6f: push   $0xb7449b18
  0xa7566d74: call   0xa7566d79
  0xa7566d79: pusha  
  0xa7566d7a: call   0xb6ff5f32
  0xa7566d7f: hlt    
  0xa7566d80: call   0xb71757d0
  0xa7566d85: add    $0x8,%esp
  0xa7566d88: mov    -0xc(%ebp),%ebx
  0xa7566d8b: mov    0x8(%ebx),%ecx
  0xa7566d8e: movzwl 0x24(%ecx),%ecx
  0xa7566d92: shl    $0x2,%ecx
  0xa7566d95: add    $0x8,%ecx
  0xa7566d98: sub    %ecx,%esp
  0xa7566d9a: and    $0xfffffff0,%esp
  0xa7566d9d: mov    0x40(%ebx),%ecx
  0xa7566da0: test   %ecx,%ecx
  0xa7566da2: jne    0xa7566e58
  0xa7566da8: call   0xa7566db2
  0xa7566dad: jmp    0xa7566e52
  0xa7566db2: push   %ebx
  0xa7566db3: lea    0x8(%esp),%eax
  0xa7566db7: cmpl   $0x0,-0x8(%ebp)
  0xa7566dbe: je     0xa7566dd5
  0xa7566dc4: push   $0xb7449b58
  0xa7566dc9: call   0xa7566dce
  0xa7566dce: pusha  
  0xa7566dcf: call   0xb6ff5f32
  0xa7566dd4: hlt    
  0xa7566dd5: mov    %esi,-0x1c(%ebp)
  0xa7566dd8: mov    %esp,%edi
  0xa7566dda: shr    $0xc,%edi
  0xa7566ddd: mov    -0x4871aba0(,%edi,4),%edi
  0xa7566de4: push   %edi
  0xa7566de5: mov    %ebp,0x148(%edi)
  0xa7566deb: mov    %eax,0x140(%edi)
  0xa7566df1: call   0xb6e634da
  0xa7566df6: add    $0x8,%esp
  0xa7566df9: push   %eax
  0xa7566dfa: mov    %esp,%eax
  0xa7566dfc: shr    $0xc,%eax
  0xa7566dff: mov    -0x4871aba0(,%eax,4),%eax
  0xa7566e06: cmp    %eax,%edi
  0xa7566e08: je     0xa7566e1f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7566e0e: push   $0xb74acf8c
  0xa7566e13: call   0xa7566e18
  0xa7566e18: pusha  
  0xa7566e19: call   0xb6ff5f32
  0xa7566e1e: hlt    
  0xa7566e1f: pop    %eax
  0xa7566e20: movl   $0x0,0x140(%edi)
  0xa7566e2a: movl   $0x0,0x148(%edi)
  0xa7566e34: movl   $0x0,0x144(%edi)
  0xa7566e3e: cmpl   $0x0,0x4(%edi)
  0xa7566e45: jne    0xa7556400
  0xa7566e4b: mov    -0x1c(%ebp),%esi
  0xa7566e4e: mov    -0x18(%ebp),%edi
  0xa7566e51: ret    
  0xa7566e52: mov    -0xc(%ebp),%ebx
  0xa7566e55: mov    0x40(%ebx),%ecx
  0xa7566e58: call   *%ecx
  0xa7566e5a: mov    -0xc(%ebp),%ebx
  0xa7566e5d: mov    %eax,0xc(%ebp)
  0xa7566e60: mov    0x14(%ebx),%ecx
  0xa7566e63: test   $0x8,%ecx
  0xa7566e69: je     0xa7566e85
  0xa7566e6f: mov    0x8(%ebx),%ecx
  0xa7566e72: mov    0x8(%ecx),%ecx
  0xa7566e75: mov    0x10(%ecx),%ecx
  0xa7566e78: mov    0x3c(%ecx),%ecx
  0xa7566e7b: mov    %ecx,0x8(%ebp)
  0xa7566e7e: lea    0x8(%ebp),%ecx
  0xa7566e81: mov    %ecx,0x4(%esp)
  0xa7566e85: mov    0x3c(%ebx),%eax
  0xa7566e88: cmp    $0xb7174eac,%eax
  0xa7566e8e: jne    0xa7566f44
  0xa7566e94: call   0xa7566e9e
  0xa7566e99: jmp    0xa7566f3e
  0xa7566e9e: push   %ebx
  0xa7566e9f: lea    0x8(%esp),%eax
  0xa7566ea3: cmpl   $0x0,-0x8(%ebp)
  0xa7566eaa: je     0xa7566ec1
  0xa7566eb0: push   $0xb7449b58
  0xa7566eb5: call   0xa7566eba
  0xa7566eba: pusha  
  0xa7566ebb: call   0xb6ff5f32
  0xa7566ec0: hlt    
  0xa7566ec1: mov    %esi,-0x1c(%ebp)
  0xa7566ec4: mov    %esp,%edi
  0xa7566ec6: shr    $0xc,%edi
  0xa7566ec9: mov    -0x4871aba0(,%edi,4),%edi
  0xa7566ed0: push   %edi
  0xa7566ed1: mov    %ebp,0x148(%edi)
  0xa7566ed7: mov    %eax,0x140(%edi)
  0xa7566edd: call   0xb6e634da
  0xa7566ee2: add    $0x8,%esp
  0xa7566ee5: push   %eax
  0xa7566ee6: mov    %esp,%eax
  0xa7566ee8: shr    $0xc,%eax
  0xa7566eeb: mov    -0x4871aba0(,%eax,4),%eax
  0xa7566ef2: cmp    %eax,%edi
  0xa7566ef4: je     0xa7566f0b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7566efa: push   $0xb74acf8c
  0xa7566eff: call   0xa7566f04
  0xa7566f04: pusha  
  0xa7566f05: call   0xb6ff5f32
  0xa7566f0a: hlt    
  0xa7566f0b: pop    %eax
  0xa7566f0c: movl   $0x0,0x140(%edi)
  0xa7566f16: movl   $0x0,0x148(%edi)
  0xa7566f20: movl   $0x0,0x144(%edi)
  0xa7566f2a: cmpl   $0x0,0x4(%edi)
  0xa7566f31: jne    0xa7556400
  0xa7566f37: mov    -0x1c(%ebp),%esi
  0xa7566f3a: mov    -0x18(%ebp),%edi
  0xa7566f3d: ret    
  0xa7566f3e: mov    -0xc(%ebp),%ebx
  0xa7566f41: mov    0x3c(%ebx),%eax
  0xa7566f44: mov    %esp,%edi
  0xa7566f46: shr    $0xc,%edi
  0xa7566f49: mov    -0x4871aba0(,%edi,4),%edi
  0xa7566f50: lea    0x150(%edi),%ecx
  0xa7566f56: mov    %ecx,(%esp)
  0xa7566f59: mov    %ebp,0x148(%edi)
  0xa7566f5f: movl   $0xa7566f59,0x144(%edi)
  0xa7566f69: mov    %esp,0x140(%edi)
  0xa7566f6f: mov    0x18c(%edi),%ecx
  0xa7566f75: cmp    $0x8,%ecx
  0xa7566f78: je     0xa7566f8f
  0xa7566f7e: push   $0xb7562514
  0xa7566f83: call   0xa7566f88
  0xa7566f88: pusha  
  0xa7566f89: call   0xb6ff5f32
  0xa7566f8e: hlt    
  0xa7566f8f: movl   $0x4,0x18c(%edi)
  0xa7566f99: call   *%eax
  0xa7566f9b: vzeroupper 
  0xa7566f9e: cmpl   $0xa75629da,0xc(%ebp)
  0xa7566fa5: je     0xa7566fb8
  0xa7566fab: cmpl   $0xa75629eb,0xc(%ebp)
  0xa7566fb2: jne    0xa7566fbe
  0xa7566fb8: sub    $0x8,%esp
  0xa7566fbb: fstpl  (%esp)
  0xa7566fbe: push   %edx
  0xa7566fbf: push   %eax
  0xa7566fc0: mov    %esp,%edi
  0xa7566fc2: shr    $0xc,%edi
  0xa7566fc5: mov    -0x4871aba0(,%edi,4),%edi
  0xa7566fcc: movl   $0x5,0x18c(%edi)
  0xa7566fd6: mov    %edi,%ecx
  0xa7566fd8: shr    $0x3,%ecx
  0xa7566fdb: and    $0xffc,%ecx
  0xa7566fe1: mov    %ecx,-0x48137000(,%ecx,1)
  0xa7566fe8: cmpl   $0x0,0xb78cefa0
  0xa7566ff2: jne    0xa7567005
  0xa7566ff8: cmpl   $0x0,0x18(%edi)
  0xa7566fff: je     0xa756701a
  0xa7567005: push   %edi
  0xa7567006: call   0xb720cf66
  0xa756700b: add    $0x4,%esp
  0xa756700e: mov    %esp,%edi
  0xa7567010: shr    $0xc,%edi
  0xa7567013: mov    -0x4871aba0(,%edi,4),%edi
  0xa756701a: movl   $0x8,0x18c(%edi)
  0xa7567024: movl   $0x0,0x140(%edi)
  0xa756702e: movl   $0x0,0x148(%edi)
  0xa7567038: movl   $0x0,0x144(%edi)
  0xa7567042: mov    0x20(%edi),%ecx
  0xa7567045: movl   $0x0,0x84(%ecx)
  0xa756704f: cmpl   $0xa75629f6,0xc(%ebp)
  0xa7567056: jne    0xa7567087
  0xa756705c: cmpl   $0x0,(%esp)
  0xa7567063: pop    %eax
  0xa7567064: pop    %edx
  0xa7567065: test   %eax,%eax
  0xa7567067: je     0xa7567082
  0xa756706d: test   $0x1,%eax
  0xa7567072: je     0xa7567080
  0xa7567078: mov    -0x1(%eax),%eax
  0xa756707b: jmp    0xa7567082
  0xa7567080: mov    (%eax),%eax
  0xa7567082: mov    %eax,0x8(%ebp)
  0xa7567085: push   %edx
  0xa7567086: push   %eax
  0xa7567087: cmpl   $0x1,0x1ac(%edi)
  0xa7567091: jne    0xa756709e
  0xa7567097: pusha  
  0xa7567098: call   0xb7179c2a
  0xa756709d: popa   
  0xa756709e: mov    -0xc(%ebp),%ebx
  0xa75670a1: mov    0x8(%ebx),%esi
  0xa75670a4: lea    0x28(%esi),%esi
  0xa75670a7: cmpl   $0x0,0x4(%edi)
  0xa75670ae: je     0xa756716e
  0xa75670b4: call   0xa75670be
  0xa75670b9: jmp    0xa756715d
  0xa75670be: lea    0x4(%esp),%eax
  0xa75670c2: cmpl   $0x0,-0x8(%ebp)
  0xa75670c9: je     0xa75670e0
  0xa75670cf: push   $0xb7449b58
  0xa75670d4: call   0xa75670d9
  0xa75670d9: pusha  
  0xa75670da: call   0xb6ff5f32
  0xa75670df: hlt    
  0xa75670e0: mov    %esi,-0x1c(%ebp)
  0xa75670e3: mov    %esp,%edi
  0xa75670e5: shr    $0xc,%edi
  0xa75670e8: mov    -0x4871aba0(,%edi,4),%edi
  0xa75670ef: push   %edi
  0xa75670f0: mov    %ebp,0x148(%edi)
  0xa75670f6: mov    %eax,0x140(%edi)
  0xa75670fc: call   0xb6e5e068
  0xa7567101: add    $0x4,%esp
  0xa7567104: push   %eax
  0xa7567105: mov    %esp,%eax
  0xa7567107: shr    $0xc,%eax
  0xa756710a: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567111: cmp    %eax,%edi
  0xa7567113: je     0xa756712a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7567119: push   $0xb74acf8c
  0xa756711e: call   0xa7567123
  0xa7567123: pusha  
  0xa7567124: call   0xb6ff5f32
  0xa7567129: hlt    
  0xa756712a: pop    %eax
  0xa756712b: movl   $0x0,0x140(%edi)
  0xa7567135: movl   $0x0,0x148(%edi)
  0xa756713f: movl   $0x0,0x144(%edi)
  0xa7567149: cmpl   $0x0,0x4(%edi)
  0xa7567150: jne    0xa7556400
  0xa7567156: mov    -0x1c(%ebp),%esi
  0xa7567159: mov    -0x18(%ebp),%edi
  0xa756715c: ret    
  0xa756715d: push   $0xb7302e8b
  0xa7567162: call   0xa7567167
  0xa7567167: pusha  
  0xa7567168: call   0xb6ff5f32
  0xa756716d: hlt    
  0xa756716e: mov    0x14(%ebx),%ecx
  0xa7567171: test   $0x20,%ecx
  0xa7567177: je     0xa7567326
  0xa756717d: lea    -0x28(%ebp),%edx
  0xa7567180: mov    0x4(%edx),%ecx
  0xa7567183: test   %ecx,%ecx
  0xa7567185: jne    0xa7567245
  0xa756718b: call   0xa7567195
  0xa7567190: jmp    0xa7567234
  0xa7567195: lea    0x4(%esp),%eax
  0xa7567199: cmpl   $0x0,-0x8(%ebp)
  0xa75671a0: je     0xa75671b7
  0xa75671a6: push   $0xb7449b58
  0xa75671ab: call   0xa75671b0
  0xa75671b0: pusha  
  0xa75671b1: call   0xb6ff5f32
  0xa75671b6: hlt    
  0xa75671b7: mov    %esi,-0x1c(%ebp)
  0xa75671ba: mov    %esp,%edi
  0xa75671bc: shr    $0xc,%edi
  0xa75671bf: mov    -0x4871aba0(,%edi,4),%edi
  0xa75671c6: push   %edi
  0xa75671c7: mov    %ebp,0x148(%edi)
  0xa75671cd: mov    %eax,0x140(%edi)
  0xa75671d3: call   0xb6e5f012
  0xa75671d8: add    $0x4,%esp
  0xa75671db: push   %eax
  0xa75671dc: mov    %esp,%eax
  0xa75671de: shr    $0xc,%eax
  0xa75671e1: mov    -0x4871aba0(,%eax,4),%eax
  0xa75671e8: cmp    %eax,%edi
  0xa75671ea: je     0xa7567201
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75671f0: push   $0xb74acf8c
  0xa75671f5: call   0xa75671fa
  0xa75671fa: pusha  
  0xa75671fb: call   0xb6ff5f32
  0xa7567200: hlt    
  0xa7567201: pop    %eax
  0xa7567202: movl   $0x0,0x140(%edi)
  0xa756720c: movl   $0x0,0x148(%edi)
  0xa7567216: movl   $0x0,0x144(%edi)
  0xa7567220: cmpl   $0x0,0x4(%edi)
  0xa7567227: jne    0xa7556400
  0xa756722d: mov    -0x1c(%ebp),%esi
  0xa7567230: mov    -0x18(%ebp),%edi
  0xa7567233: ret    
  0xa7567234: push   $0xb7302e8b
  0xa7567239: call   0xa756723e
  0xa756723e: pusha  
  0xa756723f: call   0xb6ff5f32
  0xa7567244: hlt    
  0xa7567245: mov    %esi,-0x1c(%ebp)
  0xa7567248: lea    (%edx),%eax
  0xa756724a: mov    0x4(%edx),%ecx
  0xa756724d: movl   $0x0,0x4(%edx)
  0xa7567254: mov    (%ecx),%ebx
  0xa7567256: and    $0x7,%ebx
  0xa7567259: cmp    $0x5,%ebx
  0xa756725c: je     0xa7567323
  0xa7567262: mov    (%eax),%ebx
  0xa7567264: test   %ebx,%ebx
  0xa7567266: je     0xa7567323
  0xa756726c: lock cmpxchg %ebx,(%ecx)
  0xa7567270: je     0xa7567323
  0xa7567276: mov    %ecx,0x4(%edx)
  0xa7567279: call   0xa7567283
  0xa756727e: jmp    0xa7567323
  0xa7567283: push   %edx
  0xa7567284: lea    0x8(%esp),%eax
  0xa7567288: cmpl   $0x0,-0x8(%ebp)
  0xa756728f: je     0xa75672a6
  0xa7567295: push   $0xb7449b58
  0xa756729a: call   0xa756729f
  0xa756729f: pusha  
  0xa75672a0: call   0xb6ff5f32
  0xa75672a5: hlt    
  0xa75672a6: mov    %esi,-0x1c(%ebp)
  0xa75672a9: mov    %esp,%edi
  0xa75672ab: shr    $0xc,%edi
  0xa75672ae: mov    -0x4871aba0(,%edi,4),%edi
  0xa75672b5: push   %edi
  0xa75672b6: mov    %ebp,0x148(%edi)
  0xa75672bc: mov    %eax,0x140(%edi)
  0xa75672c2: call   0xb6e5ed36
  0xa75672c7: add    $0x8,%esp
  0xa75672ca: push   %eax
  0xa75672cb: mov    %esp,%eax
  0xa75672cd: shr    $0xc,%eax
  0xa75672d0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75672d7: cmp    %eax,%edi
  0xa75672d9: je     0xa75672f0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75672df: push   $0xb74acf8c
  0xa75672e4: call   0xa75672e9
  0xa75672e9: pusha  
  0xa75672ea: call   0xb6ff5f32
  0xa75672ef: hlt    
  0xa75672f0: pop    %eax
  0xa75672f1: movl   $0x0,0x140(%edi)
  0xa75672fb: movl   $0x0,0x148(%edi)
  0xa7567305: movl   $0x0,0x144(%edi)
  0xa756730f: cmpl   $0x0,0x4(%edi)
  0xa7567316: jne    0xa7556400
  0xa756731c: mov    -0x1c(%ebp),%esi
  0xa756731f: mov    -0x18(%ebp),%edi
  0xa7567322: ret    
  0xa7567323: mov    -0x1c(%ebp),%esi
  0xa7567326: cmpb   $0x0,0xb78c1e7e
  0xa756732d: je     0xa756736a
  0xa7567333: mov    %esp,%ebx
  0xa7567335: shr    $0xc,%ebx
  0xa7567338: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa756733f: mov    -0xc(%ebp),%ecx
  0xa7567342: push   %ecx
  0xa7567343: push   %ebx
  0xa7567344: cmpl   $0x0,-0x8(%ebp)
  0xa756734b: je     0xa7567362
  0xa7567351: push   $0xb7449b18
  0xa7567356: call   0xa756735b
  0xa756735b: pusha  
  0xa756735c: call   0xb6ff5f32
  0xa7567361: hlt    
  0xa7567362: call   0xb7175974
  0xa7567367: add    $0x8,%esp
  0xa756736a: pop    %eax
  0xa756736b: pop    %edx
  0xa756736c: mov    0xc(%ebp),%ecx
  0xa756736f: call   *%ecx
  0xa7567371: mov    -0x4(%ebp),%ecx
  0xa7567374: mov    %ebp,%esp
  0xa7567376: pop    %ebp
  0xa7567377: pop    %edi
  0xa7567378: mov    %ecx,%esp
  0xa756737a: jmp    *%edi
  0xa756737c: mov    $0x0,%eax
  0xa7567381: call   0xa756738b
  0xa7567386: jmp    0xa756742b
  0xa756738b: push   %eax
  0xa756738c: lea    0x8(%esp),%eax
  0xa7567390: cmpl   $0x0,-0x8(%ebp)
  0xa7567397: je     0xa75673ae
  0xa756739d: push   $0xb7449b58
  0xa75673a2: call   0xa75673a7
  0xa75673a7: pusha  
  0xa75673a8: call   0xb6ff5f32
  0xa75673ad: hlt    
  0xa75673ae: mov    %esi,-0x1c(%ebp)
  0xa75673b1: mov    %esp,%edi
  0xa75673b3: shr    $0xc,%edi
  0xa75673b6: mov    -0x4871aba0(,%edi,4),%edi
  0xa75673bd: push   %edi
  0xa75673be: mov    %ebp,0x148(%edi)
  0xa75673c4: mov    %eax,0x140(%edi)
  0xa75673ca: call   0xb6e60bc8
  0xa75673cf: add    $0x8,%esp
  0xa75673d2: push   %eax
  0xa75673d3: mov    %esp,%eax
  0xa75673d5: shr    $0xc,%eax
  0xa75673d8: mov    -0x4871aba0(,%eax,4),%eax
  0xa75673df: cmp    %eax,%edi
  0xa75673e1: je     0xa75673f8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75673e7: push   $0xb74acf8c
  0xa75673ec: call   0xa75673f1
  0xa75673f1: pusha  
  0xa75673f2: call   0xb6ff5f32
  0xa75673f7: hlt    
  0xa75673f8: pop    %eax
  0xa75673f9: movl   $0x0,0x140(%edi)
  0xa7567403: movl   $0x0,0x148(%edi)
  0xa756740d: movl   $0x0,0x144(%edi)
  0xa7567417: cmpl   $0x0,0x4(%edi)
  0xa756741e: jne    0xa7556400
  0xa7567424: mov    -0x1c(%ebp),%esi
  0xa7567427: mov    -0x18(%ebp),%edi
  0xa756742a: ret    
  0xa756742b: mov    -0xc(%ebp),%ebx
  0xa756742e: jmp    0xa7566cef
  0xa7567433: nop
  0xa7567434: int3   
  0xa7567435: int3   
  0xa7567436: int3   
  0xa7567437: int3   
  0xa7567438: int3   
  0xa7567439: int3   
  0xa756743a: int3   
  0xa756743b: int3   
  0xa756743c: int3   
  0xa756743d: int3   
  0xa756743e: int3   
  0xa756743f: int3   

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateBytes)  [0xa7567460, 0xa7567d80]  2336 bytes

  0xa7567460: cmpl   $0x0,0xb78cefa0
  0xa756746a: jne    0xa7567493
  0xa7567470: mov    0x4(%esp),%edi
  0xa7567474: mov    0xc(%esp),%edx
  0xa7567478: add    $0xc,%edx
  0xa756747b: add    0x8(%esp),%edx
  0xa756747f: mov    0x10(%esp),%eax
  0xa7567483: push   %edi
  0xa7567484: push   %edx
  0xa7567485: push   %eax
  0xa7567486: call   0xa7556620
  0xa756748b: add    $0xc,%esp
  0xa756748e: pop    %edi
  0xa756748f: mov    %esi,%esp
  0xa7567491: jmp    *%edi
  0xa7567493: mov    0x8(%ebx),%ecx
  0xa7567496: movzwl 0x24(%ecx),%ecx
  0xa756749a: pop    %eax
  0xa756749b: lea    -0x4(%esp,%ecx,4),%edi
  0xa756749f: push   $0x0
  0xa75674a4: push   $0x0
  0xa75674a9: push   %eax
  0xa75674aa: push   %ebp
  0xa75674ab: mov    %esp,%ebp
  0xa75674ad: push   %esi
  0xa75674ae: push   $0x0
  0xa75674b3: mov    0x8(%ebx),%esi
  0xa75674b6: lea    0x28(%esi),%esi
  0xa75674b9: push   %ebx
  0xa75674ba: mov    0xc(%ebx),%edx
  0xa75674bd: test   %edx,%edx
  0xa75674bf: je     0xa75674cb
  0xa75674c5: add    $0xe0,%edx
  0xa75674cb: push   %edx
  0xa75674cc: mov    0x8(%ebx),%edx
  0xa75674cf: mov    0x8(%edx),%edx
  0xa75674d2: mov    0xc(%edx),%edx
  0xa75674d5: push   %edx
  0xa75674d6: push   %edi
  0xa75674d7: push   $0x0
  0xa75674dc: push   $0x0
  0xa75674e1: mov    %esp,(%esp)
  0xa75674e4: mov    0x14(%ebx),%eax
  0xa75674e7: test   $0x100,%eax
  0xa75674ec: jne    0xa7567503
  0xa75674f2: push   $0xb7562374
  0xa75674f7: call   0xa75674fc
  0xa75674fc: pusha  
  0xa75674fd: call   0xb6ff5f32
  0xa7567502: hlt    
  0xa7567503: test   $0x400,%eax
  0xa7567508: je     0xa756751f
  0xa756750e: push   $0xb75623a4
  0xa7567513: call   0xa7567518
  0xa7567518: pusha  
  0xa7567519: call   0xb6ff5f32
  0xa756751e: hlt    
  0xa756751f: mov    %esp,%eax
  0xa7567521: shr    $0xc,%eax
  0xa7567524: mov    -0x4871aba0(,%eax,4),%eax
  0xa756752b: movb   $0x1,0x1a5(%eax)
  0xa7567532: mov    0xc(%ebx),%eax
  0xa7567535: test   %eax,%eax
  0xa7567537: je     0xa7567559
  0xa7567539: mov    0xbc(%eax),%ecx
  0xa756753f: add    $0x8,%ecx
  0xa7567542: mov    %ecx,0xbc(%eax)
  0xa7567548: and    $0x3f8,%ecx
  0xa756754e: je     0xa7567cbb
  0xa7567554: jmp    0xa756762e
  0xa7567559: mov    0x10(%ebx),%eax
  0xa756755c: test   %eax,%eax
  0xa756755e: jne    0xa7567619
  0xa7567564: call   0xa756756e
  0xa7567569: jmp    0xa756760e
  0xa756756e: push   %ebx
  0xa756756f: lea    0x8(%esp),%eax
  0xa7567573: cmpl   $0x0,-0x8(%ebp)
  0xa756757a: je     0xa7567591
  0xa7567580: push   $0xb7449b58
  0xa7567585: call   0xa756758a
  0xa756758a: pusha  
  0xa756758b: call   0xb6ff5f32
  0xa7567590: hlt    
  0xa7567591: mov    %esi,-0x1c(%ebp)
  0xa7567594: mov    %esp,%edi
  0xa7567596: shr    $0xc,%edi
  0xa7567599: mov    -0x4871aba0(,%edi,4),%edi
  0xa75675a0: push   %edi
  0xa75675a1: mov    %ebp,0x148(%edi)
  0xa75675a7: mov    %eax,0x140(%edi)
  0xa75675ad: call   0xb6e61c92
  0xa75675b2: add    $0x8,%esp
  0xa75675b5: push   %eax
  0xa75675b6: mov    %esp,%eax
  0xa75675b8: shr    $0xc,%eax
  0xa75675bb: mov    -0x4871aba0(,%eax,4),%eax
  0xa75675c2: cmp    %eax,%edi
  0xa75675c4: je     0xa75675db
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75675ca: push   $0xb74acf8c
  0xa75675cf: call   0xa75675d4
  0xa75675d4: pusha  
  0xa75675d5: call   0xb6ff5f32
  0xa75675da: hlt    
  0xa75675db: pop    %eax
  0xa75675dc: movl   $0x0,0x140(%edi)
  0xa75675e6: movl   $0x0,0x148(%edi)
  0xa75675f0: movl   $0x0,0x144(%edi)
  0xa75675fa: cmpl   $0x0,0x4(%edi)
  0xa7567601: jne    0xa7556400
  0xa7567607: mov    -0x1c(%ebp),%esi
  0xa756760a: mov    -0x18(%ebp),%edi
  0xa756760d: ret    
  0xa756760e: mov    0x10(%ebx),%eax
  0xa7567611: test   %eax,%eax
  0xa7567613: je     0xa756762e
  0xa7567619: mov    0x8(%eax),%ecx
  0xa756761c: add    $0x8,%ecx
  0xa756761f: mov    %ecx,0x8(%eax)
  0xa7567622: and    $0x3f8,%ecx
  0xa7567628: je     0xa7567cbb
  0xa756762e: mov    %eax,-0x9000(%esp)
  0xa7567635: mov    %esp,%eax
  0xa7567637: shr    $0xc,%eax
  0xa756763a: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567641: movb   $0x0,0x1a5(%eax)
  0xa7567648: mov    0x14(%ebx),%eax
  0xa756764b: test   $0x20,%eax
  0xa7567650: je     0xa7567667
  0xa7567656: push   $0xb75623d4
  0xa756765b: call   0xa7567660
  0xa7567660: pusha  
  0xa7567661: call   0xb6ff5f32
  0xa7567666: hlt    
  0xa7567667: mov    -0x20(%ebp),%eax
  0xa756766a: cmp    %esp,%eax
  0xa756766c: je     0xa7567683
  0xa7567672: push   $0xb75623f4
  0xa7567677: call   0xa756767c
  0xa756767c: pusha  
  0xa756767d: call   0xb6ff5f32
  0xa7567682: hlt    
  0xa7567683: cmpb   $0x0,0xb78c1e7e
  0xa756768a: je     0xa75676c7
  0xa7567690: mov    %esp,%ecx
  0xa7567692: shr    $0xc,%ecx
  0xa7567695: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756769c: mov    -0xc(%ebp),%ebx
  0xa756769f: push   %ebx
  0xa75676a0: push   %ecx
  0xa75676a1: cmpl   $0x0,-0x8(%ebp)
  0xa75676a8: je     0xa75676bf
  0xa75676ae: push   $0xb7449b18
  0xa75676b3: call   0xa75676b8
  0xa75676b8: pusha  
  0xa75676b9: call   0xb6ff5f32
  0xa75676be: hlt    
  0xa75676bf: call   0xb71757d0
  0xa75676c4: add    $0x8,%esp
  0xa75676c7: mov    -0xc(%ebp),%ebx
  0xa75676ca: mov    0x8(%ebx),%ecx
  0xa75676cd: movzwl 0x24(%ecx),%ecx
  0xa75676d1: shl    $0x2,%ecx
  0xa75676d4: add    $0x8,%ecx
  0xa75676d7: sub    %ecx,%esp
  0xa75676d9: and    $0xfffffff0,%esp
  0xa75676dc: mov    0x40(%ebx),%ecx
  0xa75676df: test   %ecx,%ecx
  0xa75676e1: jne    0xa7567797
  0xa75676e7: call   0xa75676f1
  0xa75676ec: jmp    0xa7567791
  0xa75676f1: push   %ebx
  0xa75676f2: lea    0x8(%esp),%eax
  0xa75676f6: cmpl   $0x0,-0x8(%ebp)
  0xa75676fd: je     0xa7567714
  0xa7567703: push   $0xb7449b58
  0xa7567708: call   0xa756770d
  0xa756770d: pusha  
  0xa756770e: call   0xb6ff5f32
  0xa7567713: hlt    
  0xa7567714: mov    %esi,-0x1c(%ebp)
  0xa7567717: mov    %esp,%edi
  0xa7567719: shr    $0xc,%edi
  0xa756771c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7567723: push   %edi
  0xa7567724: mov    %ebp,0x148(%edi)
  0xa756772a: mov    %eax,0x140(%edi)
  0xa7567730: call   0xb6e634da
  0xa7567735: add    $0x8,%esp
  0xa7567738: push   %eax
  0xa7567739: mov    %esp,%eax
  0xa756773b: shr    $0xc,%eax
  0xa756773e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567745: cmp    %eax,%edi
  0xa7567747: je     0xa756775e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756774d: push   $0xb74acf8c
  0xa7567752: call   0xa7567757
  0xa7567757: pusha  
  0xa7567758: call   0xb6ff5f32
  0xa756775d: hlt    
  0xa756775e: pop    %eax
  0xa756775f: movl   $0x0,0x140(%edi)
  0xa7567769: movl   $0x0,0x148(%edi)
  0xa7567773: movl   $0x0,0x144(%edi)
  0xa756777d: cmpl   $0x0,0x4(%edi)
  0xa7567784: jne    0xa7556400
  0xa756778a: mov    -0x1c(%ebp),%esi
  0xa756778d: mov    -0x18(%ebp),%edi
  0xa7567790: ret    
  0xa7567791: mov    -0xc(%ebp),%ebx
  0xa7567794: mov    0x40(%ebx),%ecx
  0xa7567797: call   *%ecx
  0xa7567799: mov    -0xc(%ebp),%ebx
  0xa756779c: mov    %eax,0xc(%ebp)
  0xa756779f: mov    0x14(%ebx),%ecx
  0xa75677a2: test   $0x8,%ecx
  0xa75677a8: je     0xa75677c4
  0xa75677ae: mov    0x8(%ebx),%ecx
  0xa75677b1: mov    0x8(%ecx),%ecx
  0xa75677b4: mov    0x10(%ecx),%ecx
  0xa75677b7: mov    0x3c(%ecx),%ecx
  0xa75677ba: mov    %ecx,0x8(%ebp)
  0xa75677bd: lea    0x8(%ebp),%ecx
  0xa75677c0: mov    %ecx,0x4(%esp)
  0xa75677c4: mov    0x3c(%ebx),%eax
  0xa75677c7: cmp    $0xb7174eac,%eax
  0xa75677cd: jne    0xa7567883
  0xa75677d3: call   0xa75677dd
  0xa75677d8: jmp    0xa756787d
  0xa75677dd: push   %ebx
  0xa75677de: lea    0x8(%esp),%eax
  0xa75677e2: cmpl   $0x0,-0x8(%ebp)
  0xa75677e9: je     0xa7567800
  0xa75677ef: push   $0xb7449b58
  0xa75677f4: call   0xa75677f9
  0xa75677f9: pusha  
  0xa75677fa: call   0xb6ff5f32
  0xa75677ff: hlt    
  0xa7567800: mov    %esi,-0x1c(%ebp)
  0xa7567803: mov    %esp,%edi
  0xa7567805: shr    $0xc,%edi
  0xa7567808: mov    -0x4871aba0(,%edi,4),%edi
  0xa756780f: push   %edi
  0xa7567810: mov    %ebp,0x148(%edi)
  0xa7567816: mov    %eax,0x140(%edi)
  0xa756781c: call   0xb6e634da
  0xa7567821: add    $0x8,%esp
  0xa7567824: push   %eax
  0xa7567825: mov    %esp,%eax
  0xa7567827: shr    $0xc,%eax
  0xa756782a: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567831: cmp    %eax,%edi
  0xa7567833: je     0xa756784a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7567839: push   $0xb74acf8c
  0xa756783e: call   0xa7567843
  0xa7567843: pusha  
  0xa7567844: call   0xb6ff5f32
  0xa7567849: hlt    
  0xa756784a: pop    %eax
  0xa756784b: movl   $0x0,0x140(%edi)
  0xa7567855: movl   $0x0,0x148(%edi)
  0xa756785f: movl   $0x0,0x144(%edi)
  0xa7567869: cmpl   $0x0,0x4(%edi)
  0xa7567870: jne    0xa7556400
  0xa7567876: mov    -0x1c(%ebp),%esi
  0xa7567879: mov    -0x18(%ebp),%edi
  0xa756787c: ret    
  0xa756787d: mov    -0xc(%ebp),%ebx
  0xa7567880: mov    0x3c(%ebx),%eax
  0xa7567883: mov    %esp,%edi
  0xa7567885: shr    $0xc,%edi
  0xa7567888: mov    -0x4871aba0(,%edi,4),%edi
  0xa756788f: lea    0x150(%edi),%ecx
  0xa7567895: mov    %ecx,(%esp)
  0xa7567898: mov    %ebp,0x148(%edi)
  0xa756789e: movl   $0xa7567898,0x144(%edi)
  0xa75678a8: mov    %esp,0x140(%edi)
  0xa75678ae: mov    0x18c(%edi),%ecx
  0xa75678b4: cmp    $0x8,%ecx
  0xa75678b7: je     0xa75678ce
  0xa75678bd: push   $0xb7562514
  0xa75678c2: call   0xa75678c7
  0xa75678c7: pusha  
  0xa75678c8: call   0xb6ff5f32
  0xa75678cd: hlt    
  0xa75678ce: movl   $0x4,0x18c(%edi)
  0xa75678d8: call   *%eax
  0xa75678da: vzeroupper 
  0xa75678dd: cmpl   $0xa75629da,0xc(%ebp)
  0xa75678e4: je     0xa75678f7
  0xa75678ea: cmpl   $0xa75629eb,0xc(%ebp)
  0xa75678f1: jne    0xa75678fd
  0xa75678f7: sub    $0x8,%esp
  0xa75678fa: fstpl  (%esp)
  0xa75678fd: push   %edx
  0xa75678fe: push   %eax
  0xa75678ff: mov    %esp,%edi
  0xa7567901: shr    $0xc,%edi
  0xa7567904: mov    -0x4871aba0(,%edi,4),%edi
  0xa756790b: movl   $0x5,0x18c(%edi)
  0xa7567915: mov    %edi,%ecx
  0xa7567917: shr    $0x3,%ecx
  0xa756791a: and    $0xffc,%ecx
  0xa7567920: mov    %ecx,-0x48137000(,%ecx,1)
  0xa7567927: cmpl   $0x0,0xb78cefa0
  0xa7567931: jne    0xa7567944
  0xa7567937: cmpl   $0x0,0x18(%edi)
  0xa756793e: je     0xa7567959
  0xa7567944: push   %edi
  0xa7567945: call   0xb720cf66
  0xa756794a: add    $0x4,%esp
  0xa756794d: mov    %esp,%edi
  0xa756794f: shr    $0xc,%edi
  0xa7567952: mov    -0x4871aba0(,%edi,4),%edi
  0xa7567959: movl   $0x8,0x18c(%edi)
  0xa7567963: movl   $0x0,0x140(%edi)
  0xa756796d: movl   $0x0,0x148(%edi)
  0xa7567977: movl   $0x0,0x144(%edi)
  0xa7567981: mov    0x20(%edi),%ecx
  0xa7567984: movl   $0x0,0x84(%ecx)
  0xa756798e: cmpl   $0xa75629f6,0xc(%ebp)
  0xa7567995: jne    0xa75679c6
  0xa756799b: cmpl   $0x0,(%esp)
  0xa75679a2: pop    %eax
  0xa75679a3: pop    %edx
  0xa75679a4: test   %eax,%eax
  0xa75679a6: je     0xa75679c1
  0xa75679ac: test   $0x1,%eax
  0xa75679b1: je     0xa75679bf
  0xa75679b7: mov    -0x1(%eax),%eax
  0xa75679ba: jmp    0xa75679c1
  0xa75679bf: mov    (%eax),%eax
  0xa75679c1: mov    %eax,0x8(%ebp)
  0xa75679c4: push   %edx
  0xa75679c5: push   %eax
  0xa75679c6: cmpl   $0x1,0x1ac(%edi)
  0xa75679d0: jne    0xa75679dd
  0xa75679d6: pusha  
  0xa75679d7: call   0xb7179c2a
  0xa75679dc: popa   
  0xa75679dd: mov    -0xc(%ebp),%ebx
  0xa75679e0: mov    0x8(%ebx),%esi
  0xa75679e3: lea    0x28(%esi),%esi
  0xa75679e6: cmpl   $0x0,0x4(%edi)
  0xa75679ed: je     0xa7567aad
  0xa75679f3: call   0xa75679fd
  0xa75679f8: jmp    0xa7567a9c
  0xa75679fd: lea    0x4(%esp),%eax
  0xa7567a01: cmpl   $0x0,-0x8(%ebp)
  0xa7567a08: je     0xa7567a1f
  0xa7567a0e: push   $0xb7449b58
  0xa7567a13: call   0xa7567a18
  0xa7567a18: pusha  
  0xa7567a19: call   0xb6ff5f32
  0xa7567a1e: hlt    
  0xa7567a1f: mov    %esi,-0x1c(%ebp)
  0xa7567a22: mov    %esp,%edi
  0xa7567a24: shr    $0xc,%edi
  0xa7567a27: mov    -0x4871aba0(,%edi,4),%edi
  0xa7567a2e: push   %edi
  0xa7567a2f: mov    %ebp,0x148(%edi)
  0xa7567a35: mov    %eax,0x140(%edi)
  0xa7567a3b: call   0xb6e5e068
  0xa7567a40: add    $0x4,%esp
  0xa7567a43: push   %eax
  0xa7567a44: mov    %esp,%eax
  0xa7567a46: shr    $0xc,%eax
  0xa7567a49: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567a50: cmp    %eax,%edi
  0xa7567a52: je     0xa7567a69
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7567a58: push   $0xb74acf8c
  0xa7567a5d: call   0xa7567a62
  0xa7567a62: pusha  
  0xa7567a63: call   0xb6ff5f32
  0xa7567a68: hlt    
  0xa7567a69: pop    %eax
  0xa7567a6a: movl   $0x0,0x140(%edi)
  0xa7567a74: movl   $0x0,0x148(%edi)
  0xa7567a7e: movl   $0x0,0x144(%edi)
  0xa7567a88: cmpl   $0x0,0x4(%edi)
  0xa7567a8f: jne    0xa7556400
  0xa7567a95: mov    -0x1c(%ebp),%esi
  0xa7567a98: mov    -0x18(%ebp),%edi
  0xa7567a9b: ret    
  0xa7567a9c: push   $0xb7302e8b
  0xa7567aa1: call   0xa7567aa6
  0xa7567aa6: pusha  
  0xa7567aa7: call   0xb6ff5f32
  0xa7567aac: hlt    
  0xa7567aad: mov    0x14(%ebx),%ecx
  0xa7567ab0: test   $0x20,%ecx
  0xa7567ab6: je     0xa7567c65
  0xa7567abc: lea    -0x28(%ebp),%edx
  0xa7567abf: mov    0x4(%edx),%ecx
  0xa7567ac2: test   %ecx,%ecx
  0xa7567ac4: jne    0xa7567b84
  0xa7567aca: call   0xa7567ad4
  0xa7567acf: jmp    0xa7567b73
  0xa7567ad4: lea    0x4(%esp),%eax
  0xa7567ad8: cmpl   $0x0,-0x8(%ebp)
  0xa7567adf: je     0xa7567af6
  0xa7567ae5: push   $0xb7449b58
  0xa7567aea: call   0xa7567aef
  0xa7567aef: pusha  
  0xa7567af0: call   0xb6ff5f32
  0xa7567af5: hlt    
  0xa7567af6: mov    %esi,-0x1c(%ebp)
  0xa7567af9: mov    %esp,%edi
  0xa7567afb: shr    $0xc,%edi
  0xa7567afe: mov    -0x4871aba0(,%edi,4),%edi
  0xa7567b05: push   %edi
  0xa7567b06: mov    %ebp,0x148(%edi)
  0xa7567b0c: mov    %eax,0x140(%edi)
  0xa7567b12: call   0xb6e5f012
  0xa7567b17: add    $0x4,%esp
  0xa7567b1a: push   %eax
  0xa7567b1b: mov    %esp,%eax
  0xa7567b1d: shr    $0xc,%eax
  0xa7567b20: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567b27: cmp    %eax,%edi
  0xa7567b29: je     0xa7567b40
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7567b2f: push   $0xb74acf8c
  0xa7567b34: call   0xa7567b39
  0xa7567b39: pusha  
  0xa7567b3a: call   0xb6ff5f32
  0xa7567b3f: hlt    
  0xa7567b40: pop    %eax
  0xa7567b41: movl   $0x0,0x140(%edi)
  0xa7567b4b: movl   $0x0,0x148(%edi)
  0xa7567b55: movl   $0x0,0x144(%edi)
  0xa7567b5f: cmpl   $0x0,0x4(%edi)
  0xa7567b66: jne    0xa7556400
  0xa7567b6c: mov    -0x1c(%ebp),%esi
  0xa7567b6f: mov    -0x18(%ebp),%edi
  0xa7567b72: ret    
  0xa7567b73: push   $0xb7302e8b
  0xa7567b78: call   0xa7567b7d
  0xa7567b7d: pusha  
  0xa7567b7e: call   0xb6ff5f32
  0xa7567b83: hlt    
  0xa7567b84: mov    %esi,-0x1c(%ebp)
  0xa7567b87: lea    (%edx),%eax
  0xa7567b89: mov    0x4(%edx),%ecx
  0xa7567b8c: movl   $0x0,0x4(%edx)
  0xa7567b93: mov    (%ecx),%ebx
  0xa7567b95: and    $0x7,%ebx
  0xa7567b98: cmp    $0x5,%ebx
  0xa7567b9b: je     0xa7567c62
  0xa7567ba1: mov    (%eax),%ebx
  0xa7567ba3: test   %ebx,%ebx
  0xa7567ba5: je     0xa7567c62
  0xa7567bab: lock cmpxchg %ebx,(%ecx)
  0xa7567baf: je     0xa7567c62
  0xa7567bb5: mov    %ecx,0x4(%edx)
  0xa7567bb8: call   0xa7567bc2
  0xa7567bbd: jmp    0xa7567c62
  0xa7567bc2: push   %edx
  0xa7567bc3: lea    0x8(%esp),%eax
  0xa7567bc7: cmpl   $0x0,-0x8(%ebp)
  0xa7567bce: je     0xa7567be5
  0xa7567bd4: push   $0xb7449b58
  0xa7567bd9: call   0xa7567bde
  0xa7567bde: pusha  
  0xa7567bdf: call   0xb6ff5f32
  0xa7567be4: hlt    
  0xa7567be5: mov    %esi,-0x1c(%ebp)
  0xa7567be8: mov    %esp,%edi
  0xa7567bea: shr    $0xc,%edi
  0xa7567bed: mov    -0x4871aba0(,%edi,4),%edi
  0xa7567bf4: push   %edi
  0xa7567bf5: mov    %ebp,0x148(%edi)
  0xa7567bfb: mov    %eax,0x140(%edi)
  0xa7567c01: call   0xb6e5ed36
  0xa7567c06: add    $0x8,%esp
  0xa7567c09: push   %eax
  0xa7567c0a: mov    %esp,%eax
  0xa7567c0c: shr    $0xc,%eax
  0xa7567c0f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567c16: cmp    %eax,%edi
  0xa7567c18: je     0xa7567c2f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7567c1e: push   $0xb74acf8c
  0xa7567c23: call   0xa7567c28
  0xa7567c28: pusha  
  0xa7567c29: call   0xb6ff5f32
  0xa7567c2e: hlt    
  0xa7567c2f: pop    %eax
  0xa7567c30: movl   $0x0,0x140(%edi)
  0xa7567c3a: movl   $0x0,0x148(%edi)
  0xa7567c44: movl   $0x0,0x144(%edi)
  0xa7567c4e: cmpl   $0x0,0x4(%edi)
  0xa7567c55: jne    0xa7556400
  0xa7567c5b: mov    -0x1c(%ebp),%esi
  0xa7567c5e: mov    -0x18(%ebp),%edi
  0xa7567c61: ret    
  0xa7567c62: mov    -0x1c(%ebp),%esi
  0xa7567c65: cmpb   $0x0,0xb78c1e7e
  0xa7567c6c: je     0xa7567ca9
  0xa7567c72: mov    %esp,%ebx
  0xa7567c74: shr    $0xc,%ebx
  0xa7567c77: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7567c7e: mov    -0xc(%ebp),%ecx
  0xa7567c81: push   %ecx
  0xa7567c82: push   %ebx
  0xa7567c83: cmpl   $0x0,-0x8(%ebp)
  0xa7567c8a: je     0xa7567ca1
  0xa7567c90: push   $0xb7449b18
  0xa7567c95: call   0xa7567c9a
  0xa7567c9a: pusha  
  0xa7567c9b: call   0xb6ff5f32
  0xa7567ca0: hlt    
  0xa7567ca1: call   0xb7175974
  0xa7567ca6: add    $0x8,%esp
  0xa7567ca9: pop    %eax
  0xa7567caa: pop    %edx
  0xa7567cab: mov    0xc(%ebp),%ecx
  0xa7567cae: call   *%ecx
  0xa7567cb0: mov    -0x4(%ebp),%ecx
  0xa7567cb3: mov    %ebp,%esp
  0xa7567cb5: pop    %ebp
  0xa7567cb6: pop    %edi
  0xa7567cb7: mov    %ecx,%esp
  0xa7567cb9: jmp    *%edi
  0xa7567cbb: mov    $0x0,%eax
  0xa7567cc0: call   0xa7567cca
  0xa7567cc5: jmp    0xa7567d6a
  0xa7567cca: push   %eax
  0xa7567ccb: lea    0x8(%esp),%eax
  0xa7567ccf: cmpl   $0x0,-0x8(%ebp)
  0xa7567cd6: je     0xa7567ced
  0xa7567cdc: push   $0xb7449b58
  0xa7567ce1: call   0xa7567ce6
  0xa7567ce6: pusha  
  0xa7567ce7: call   0xb6ff5f32
  0xa7567cec: hlt    
  0xa7567ced: mov    %esi,-0x1c(%ebp)
  0xa7567cf0: mov    %esp,%edi
  0xa7567cf2: shr    $0xc,%edi
  0xa7567cf5: mov    -0x4871aba0(,%edi,4),%edi
  0xa7567cfc: push   %edi
  0xa7567cfd: mov    %ebp,0x148(%edi)
  0xa7567d03: mov    %eax,0x140(%edi)
  0xa7567d09: call   0xb6e60bc8
  0xa7567d0e: add    $0x8,%esp
  0xa7567d11: push   %eax
  0xa7567d12: mov    %esp,%eax
  0xa7567d14: shr    $0xc,%eax
  0xa7567d17: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567d1e: cmp    %eax,%edi
  0xa7567d20: je     0xa7567d37
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7567d26: push   $0xb74acf8c
  0xa7567d2b: call   0xa7567d30
  0xa7567d30: pusha  
  0xa7567d31: call   0xb6ff5f32
  0xa7567d36: hlt    
  0xa7567d37: pop    %eax
  0xa7567d38: movl   $0x0,0x140(%edi)
  0xa7567d42: movl   $0x0,0x148(%edi)
  0xa7567d4c: movl   $0x0,0x144(%edi)
  0xa7567d56: cmpl   $0x0,0x4(%edi)
  0xa7567d5d: jne    0xa7556400
  0xa7567d63: mov    -0x1c(%ebp),%esi
  0xa7567d66: mov    -0x18(%ebp),%edi
  0xa7567d69: ret    
  0xa7567d6a: mov    -0xc(%ebp),%ebx
  0xa7567d6d: jmp    0xa756762e
  0xa7567d72: nop
  0xa7567d73: nop
  0xa7567d74: int3   
  0xa7567d75: int3   
  0xa7567d76: int3   
  0xa7567d77: int3   
  0xa7567d78: int3   
  0xa7567d79: int3   
  0xa7567d7a: int3   
  0xa7567d7b: int3   
  0xa7567d7c: int3   
  0xa7567d7d: int3   
  0xa7567d7e: int3   
  0xa7567d7f: int3   

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateByteBuffer)  [0xa7567da0, 0xa75686c0]  2336 bytes

  0xa7567da0: cmpl   $0x0,0xb78cefa0
  0xa7567daa: jne    0xa7567dd0
  0xa7567db0: mov    0x4(%esp),%edi
  0xa7567db4: mov    0xc(%esp),%edx
  0xa7567db8: add    0x8(%esp),%edx
  0xa7567dbc: mov    0x14(%esp),%eax
  0xa7567dc0: push   %edi
  0xa7567dc1: push   %edx
  0xa7567dc2: push   %eax
  0xa7567dc3: call   0xa7556620
  0xa7567dc8: add    $0xc,%esp
  0xa7567dcb: pop    %edi
  0xa7567dcc: mov    %esi,%esp
  0xa7567dce: jmp    *%edi
  0xa7567dd0: mov    0x8(%ebx),%ecx
  0xa7567dd3: movzwl 0x24(%ecx),%ecx
  0xa7567dd7: pop    %eax
  0xa7567dd8: lea    -0x4(%esp,%ecx,4),%edi
  0xa7567ddc: push   $0x0
  0xa7567de1: push   $0x0
  0xa7567de6: push   %eax
  0xa7567de7: push   %ebp
  0xa7567de8: mov    %esp,%ebp
  0xa7567dea: push   %esi
  0xa7567deb: push   $0x0
  0xa7567df0: mov    0x8(%ebx),%esi
  0xa7567df3: lea    0x28(%esi),%esi
  0xa7567df6: push   %ebx
  0xa7567df7: mov    0xc(%ebx),%edx
  0xa7567dfa: test   %edx,%edx
  0xa7567dfc: je     0xa7567e08
  0xa7567e02: add    $0xe0,%edx
  0xa7567e08: push   %edx
  0xa7567e09: mov    0x8(%ebx),%edx
  0xa7567e0c: mov    0x8(%edx),%edx
  0xa7567e0f: mov    0xc(%edx),%edx
  0xa7567e12: push   %edx
  0xa7567e13: push   %edi
  0xa7567e14: push   $0x0
  0xa7567e19: push   $0x0
  0xa7567e1e: mov    %esp,(%esp)
  0xa7567e21: mov    0x14(%ebx),%eax
  0xa7567e24: test   $0x100,%eax
  0xa7567e29: jne    0xa7567e40
  0xa7567e2f: push   $0xb7562374
  0xa7567e34: call   0xa7567e39
  0xa7567e39: pusha  
  0xa7567e3a: call   0xb6ff5f32
  0xa7567e3f: hlt    
  0xa7567e40: test   $0x400,%eax
  0xa7567e45: je     0xa7567e5c
  0xa7567e4b: push   $0xb75623a4
  0xa7567e50: call   0xa7567e55
  0xa7567e55: pusha  
  0xa7567e56: call   0xb6ff5f32
  0xa7567e5b: hlt    
  0xa7567e5c: mov    %esp,%eax
  0xa7567e5e: shr    $0xc,%eax
  0xa7567e61: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567e68: movb   $0x1,0x1a5(%eax)
  0xa7567e6f: mov    0xc(%ebx),%eax
  0xa7567e72: test   %eax,%eax
  0xa7567e74: je     0xa7567e96
  0xa7567e76: mov    0xbc(%eax),%ecx
  0xa7567e7c: add    $0x8,%ecx
  0xa7567e7f: mov    %ecx,0xbc(%eax)
  0xa7567e85: and    $0x3f8,%ecx
  0xa7567e8b: je     0xa75685f8
  0xa7567e91: jmp    0xa7567f6b
  0xa7567e96: mov    0x10(%ebx),%eax
  0xa7567e99: test   %eax,%eax
  0xa7567e9b: jne    0xa7567f56
  0xa7567ea1: call   0xa7567eab
  0xa7567ea6: jmp    0xa7567f4b
  0xa7567eab: push   %ebx
  0xa7567eac: lea    0x8(%esp),%eax
  0xa7567eb0: cmpl   $0x0,-0x8(%ebp)
  0xa7567eb7: je     0xa7567ece
  0xa7567ebd: push   $0xb7449b58
  0xa7567ec2: call   0xa7567ec7
  0xa7567ec7: pusha  
  0xa7567ec8: call   0xb6ff5f32
  0xa7567ecd: hlt    
  0xa7567ece: mov    %esi,-0x1c(%ebp)
  0xa7567ed1: mov    %esp,%edi
  0xa7567ed3: shr    $0xc,%edi
  0xa7567ed6: mov    -0x4871aba0(,%edi,4),%edi
  0xa7567edd: push   %edi
  0xa7567ede: mov    %ebp,0x148(%edi)
  0xa7567ee4: mov    %eax,0x140(%edi)
  0xa7567eea: call   0xb6e61c92
  0xa7567eef: add    $0x8,%esp
  0xa7567ef2: push   %eax
  0xa7567ef3: mov    %esp,%eax
  0xa7567ef5: shr    $0xc,%eax
  0xa7567ef8: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567eff: cmp    %eax,%edi
  0xa7567f01: je     0xa7567f18
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7567f07: push   $0xb74acf8c
  0xa7567f0c: call   0xa7567f11
  0xa7567f11: pusha  
  0xa7567f12: call   0xb6ff5f32
  0xa7567f17: hlt    
  0xa7567f18: pop    %eax
  0xa7567f19: movl   $0x0,0x140(%edi)
  0xa7567f23: movl   $0x0,0x148(%edi)
  0xa7567f2d: movl   $0x0,0x144(%edi)
  0xa7567f37: cmpl   $0x0,0x4(%edi)
  0xa7567f3e: jne    0xa7556400
  0xa7567f44: mov    -0x1c(%ebp),%esi
  0xa7567f47: mov    -0x18(%ebp),%edi
  0xa7567f4a: ret    
  0xa7567f4b: mov    0x10(%ebx),%eax
  0xa7567f4e: test   %eax,%eax
  0xa7567f50: je     0xa7567f6b
  0xa7567f56: mov    0x8(%eax),%ecx
  0xa7567f59: add    $0x8,%ecx
  0xa7567f5c: mov    %ecx,0x8(%eax)
  0xa7567f5f: and    $0x3f8,%ecx
  0xa7567f65: je     0xa75685f8
  0xa7567f6b: mov    %eax,-0x9000(%esp)
  0xa7567f72: mov    %esp,%eax
  0xa7567f74: shr    $0xc,%eax
  0xa7567f77: mov    -0x4871aba0(,%eax,4),%eax
  0xa7567f7e: movb   $0x0,0x1a5(%eax)
  0xa7567f85: mov    0x14(%ebx),%eax
  0xa7567f88: test   $0x20,%eax
  0xa7567f8d: je     0xa7567fa4
  0xa7567f93: push   $0xb75623d4
  0xa7567f98: call   0xa7567f9d
  0xa7567f9d: pusha  
  0xa7567f9e: call   0xb6ff5f32
  0xa7567fa3: hlt    
  0xa7567fa4: mov    -0x20(%ebp),%eax
  0xa7567fa7: cmp    %esp,%eax
  0xa7567fa9: je     0xa7567fc0
  0xa7567faf: push   $0xb75623f4
  0xa7567fb4: call   0xa7567fb9
  0xa7567fb9: pusha  
  0xa7567fba: call   0xb6ff5f32
  0xa7567fbf: hlt    
  0xa7567fc0: cmpb   $0x0,0xb78c1e7e
  0xa7567fc7: je     0xa7568004
  0xa7567fcd: mov    %esp,%ecx
  0xa7567fcf: shr    $0xc,%ecx
  0xa7567fd2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7567fd9: mov    -0xc(%ebp),%ebx
  0xa7567fdc: push   %ebx
  0xa7567fdd: push   %ecx
  0xa7567fde: cmpl   $0x0,-0x8(%ebp)
  0xa7567fe5: je     0xa7567ffc
  0xa7567feb: push   $0xb7449b18
  0xa7567ff0: call   0xa7567ff5
  0xa7567ff5: pusha  
  0xa7567ff6: call   0xb6ff5f32
  0xa7567ffb: hlt    
  0xa7567ffc: call   0xb71757d0
  0xa7568001: add    $0x8,%esp
  0xa7568004: mov    -0xc(%ebp),%ebx
  0xa7568007: mov    0x8(%ebx),%ecx
  0xa756800a: movzwl 0x24(%ecx),%ecx
  0xa756800e: shl    $0x2,%ecx
  0xa7568011: add    $0x8,%ecx
  0xa7568014: sub    %ecx,%esp
  0xa7568016: and    $0xfffffff0,%esp
  0xa7568019: mov    0x40(%ebx),%ecx
  0xa756801c: test   %ecx,%ecx
  0xa756801e: jne    0xa75680d4
  0xa7568024: call   0xa756802e
  0xa7568029: jmp    0xa75680ce
  0xa756802e: push   %ebx
  0xa756802f: lea    0x8(%esp),%eax
  0xa7568033: cmpl   $0x0,-0x8(%ebp)
  0xa756803a: je     0xa7568051
  0xa7568040: push   $0xb7449b58
  0xa7568045: call   0xa756804a
  0xa756804a: pusha  
  0xa756804b: call   0xb6ff5f32
  0xa7568050: hlt    
  0xa7568051: mov    %esi,-0x1c(%ebp)
  0xa7568054: mov    %esp,%edi
  0xa7568056: shr    $0xc,%edi
  0xa7568059: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568060: push   %edi
  0xa7568061: mov    %ebp,0x148(%edi)
  0xa7568067: mov    %eax,0x140(%edi)
  0xa756806d: call   0xb6e634da
  0xa7568072: add    $0x8,%esp
  0xa7568075: push   %eax
  0xa7568076: mov    %esp,%eax
  0xa7568078: shr    $0xc,%eax
  0xa756807b: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568082: cmp    %eax,%edi
  0xa7568084: je     0xa756809b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756808a: push   $0xb74acf8c
  0xa756808f: call   0xa7568094
  0xa7568094: pusha  
  0xa7568095: call   0xb6ff5f32
  0xa756809a: hlt    
  0xa756809b: pop    %eax
  0xa756809c: movl   $0x0,0x140(%edi)
  0xa75680a6: movl   $0x0,0x148(%edi)
  0xa75680b0: movl   $0x0,0x144(%edi)
  0xa75680ba: cmpl   $0x0,0x4(%edi)
  0xa75680c1: jne    0xa7556400
  0xa75680c7: mov    -0x1c(%ebp),%esi
  0xa75680ca: mov    -0x18(%ebp),%edi
  0xa75680cd: ret    
  0xa75680ce: mov    -0xc(%ebp),%ebx
  0xa75680d1: mov    0x40(%ebx),%ecx
  0xa75680d4: call   *%ecx
  0xa75680d6: mov    -0xc(%ebp),%ebx
  0xa75680d9: mov    %eax,0xc(%ebp)
  0xa75680dc: mov    0x14(%ebx),%ecx
  0xa75680df: test   $0x8,%ecx
  0xa75680e5: je     0xa7568101
  0xa75680eb: mov    0x8(%ebx),%ecx
  0xa75680ee: mov    0x8(%ecx),%ecx
  0xa75680f1: mov    0x10(%ecx),%ecx
  0xa75680f4: mov    0x3c(%ecx),%ecx
  0xa75680f7: mov    %ecx,0x8(%ebp)
  0xa75680fa: lea    0x8(%ebp),%ecx
  0xa75680fd: mov    %ecx,0x4(%esp)
  0xa7568101: mov    0x3c(%ebx),%eax
  0xa7568104: cmp    $0xb7174eac,%eax
  0xa756810a: jne    0xa75681c0
  0xa7568110: call   0xa756811a
  0xa7568115: jmp    0xa75681ba
  0xa756811a: push   %ebx
  0xa756811b: lea    0x8(%esp),%eax
  0xa756811f: cmpl   $0x0,-0x8(%ebp)
  0xa7568126: je     0xa756813d
  0xa756812c: push   $0xb7449b58
  0xa7568131: call   0xa7568136
  0xa7568136: pusha  
  0xa7568137: call   0xb6ff5f32
  0xa756813c: hlt    
  0xa756813d: mov    %esi,-0x1c(%ebp)
  0xa7568140: mov    %esp,%edi
  0xa7568142: shr    $0xc,%edi
  0xa7568145: mov    -0x4871aba0(,%edi,4),%edi
  0xa756814c: push   %edi
  0xa756814d: mov    %ebp,0x148(%edi)
  0xa7568153: mov    %eax,0x140(%edi)
  0xa7568159: call   0xb6e634da
  0xa756815e: add    $0x8,%esp
  0xa7568161: push   %eax
  0xa7568162: mov    %esp,%eax
  0xa7568164: shr    $0xc,%eax
  0xa7568167: mov    -0x4871aba0(,%eax,4),%eax
  0xa756816e: cmp    %eax,%edi
  0xa7568170: je     0xa7568187
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568176: push   $0xb74acf8c
  0xa756817b: call   0xa7568180
  0xa7568180: pusha  
  0xa7568181: call   0xb6ff5f32
  0xa7568186: hlt    
  0xa7568187: pop    %eax
  0xa7568188: movl   $0x0,0x140(%edi)
  0xa7568192: movl   $0x0,0x148(%edi)
  0xa756819c: movl   $0x0,0x144(%edi)
  0xa75681a6: cmpl   $0x0,0x4(%edi)
  0xa75681ad: jne    0xa7556400
  0xa75681b3: mov    -0x1c(%ebp),%esi
  0xa75681b6: mov    -0x18(%ebp),%edi
  0xa75681b9: ret    
  0xa75681ba: mov    -0xc(%ebp),%ebx
  0xa75681bd: mov    0x3c(%ebx),%eax
  0xa75681c0: mov    %esp,%edi
  0xa75681c2: shr    $0xc,%edi
  0xa75681c5: mov    -0x4871aba0(,%edi,4),%edi
  0xa75681cc: lea    0x150(%edi),%ecx
  0xa75681d2: mov    %ecx,(%esp)
  0xa75681d5: mov    %ebp,0x148(%edi)
  0xa75681db: movl   $0xa75681d5,0x144(%edi)
  0xa75681e5: mov    %esp,0x140(%edi)
  0xa75681eb: mov    0x18c(%edi),%ecx
  0xa75681f1: cmp    $0x8,%ecx
  0xa75681f4: je     0xa756820b
  0xa75681fa: push   $0xb7562514
  0xa75681ff: call   0xa7568204
  0xa7568204: pusha  
  0xa7568205: call   0xb6ff5f32
  0xa756820a: hlt    
  0xa756820b: movl   $0x4,0x18c(%edi)
  0xa7568215: call   *%eax
  0xa7568217: vzeroupper 
  0xa756821a: cmpl   $0xa75629da,0xc(%ebp)
  0xa7568221: je     0xa7568234
  0xa7568227: cmpl   $0xa75629eb,0xc(%ebp)
  0xa756822e: jne    0xa756823a
  0xa7568234: sub    $0x8,%esp
  0xa7568237: fstpl  (%esp)
  0xa756823a: push   %edx
  0xa756823b: push   %eax
  0xa756823c: mov    %esp,%edi
  0xa756823e: shr    $0xc,%edi
  0xa7568241: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568248: movl   $0x5,0x18c(%edi)
  0xa7568252: mov    %edi,%ecx
  0xa7568254: shr    $0x3,%ecx
  0xa7568257: and    $0xffc,%ecx
  0xa756825d: mov    %ecx,-0x48137000(,%ecx,1)
  0xa7568264: cmpl   $0x0,0xb78cefa0
  0xa756826e: jne    0xa7568281
  0xa7568274: cmpl   $0x0,0x18(%edi)
  0xa756827b: je     0xa7568296
  0xa7568281: push   %edi
  0xa7568282: call   0xb720cf66
  0xa7568287: add    $0x4,%esp
  0xa756828a: mov    %esp,%edi
  0xa756828c: shr    $0xc,%edi
  0xa756828f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568296: movl   $0x8,0x18c(%edi)
  0xa75682a0: movl   $0x0,0x140(%edi)
  0xa75682aa: movl   $0x0,0x148(%edi)
  0xa75682b4: movl   $0x0,0x144(%edi)
  0xa75682be: mov    0x20(%edi),%ecx
  0xa75682c1: movl   $0x0,0x84(%ecx)
  0xa75682cb: cmpl   $0xa75629f6,0xc(%ebp)
  0xa75682d2: jne    0xa7568303
  0xa75682d8: cmpl   $0x0,(%esp)
  0xa75682df: pop    %eax
  0xa75682e0: pop    %edx
  0xa75682e1: test   %eax,%eax
  0xa75682e3: je     0xa75682fe
  0xa75682e9: test   $0x1,%eax
  0xa75682ee: je     0xa75682fc
  0xa75682f4: mov    -0x1(%eax),%eax
  0xa75682f7: jmp    0xa75682fe
  0xa75682fc: mov    (%eax),%eax
  0xa75682fe: mov    %eax,0x8(%ebp)
  0xa7568301: push   %edx
  0xa7568302: push   %eax
  0xa7568303: cmpl   $0x1,0x1ac(%edi)
  0xa756830d: jne    0xa756831a
  0xa7568313: pusha  
  0xa7568314: call   0xb7179c2a
  0xa7568319: popa   
  0xa756831a: mov    -0xc(%ebp),%ebx
  0xa756831d: mov    0x8(%ebx),%esi
  0xa7568320: lea    0x28(%esi),%esi
  0xa7568323: cmpl   $0x0,0x4(%edi)
  0xa756832a: je     0xa75683ea
  0xa7568330: call   0xa756833a
  0xa7568335: jmp    0xa75683d9
  0xa756833a: lea    0x4(%esp),%eax
  0xa756833e: cmpl   $0x0,-0x8(%ebp)
  0xa7568345: je     0xa756835c
  0xa756834b: push   $0xb7449b58
  0xa7568350: call   0xa7568355
  0xa7568355: pusha  
  0xa7568356: call   0xb6ff5f32
  0xa756835b: hlt    
  0xa756835c: mov    %esi,-0x1c(%ebp)
  0xa756835f: mov    %esp,%edi
  0xa7568361: shr    $0xc,%edi
  0xa7568364: mov    -0x4871aba0(,%edi,4),%edi
  0xa756836b: push   %edi
  0xa756836c: mov    %ebp,0x148(%edi)
  0xa7568372: mov    %eax,0x140(%edi)
  0xa7568378: call   0xb6e5e068
  0xa756837d: add    $0x4,%esp
  0xa7568380: push   %eax
  0xa7568381: mov    %esp,%eax
  0xa7568383: shr    $0xc,%eax
  0xa7568386: mov    -0x4871aba0(,%eax,4),%eax
  0xa756838d: cmp    %eax,%edi
  0xa756838f: je     0xa75683a6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568395: push   $0xb74acf8c
  0xa756839a: call   0xa756839f
  0xa756839f: pusha  
  0xa75683a0: call   0xb6ff5f32
  0xa75683a5: hlt    
  0xa75683a6: pop    %eax
  0xa75683a7: movl   $0x0,0x140(%edi)
  0xa75683b1: movl   $0x0,0x148(%edi)
  0xa75683bb: movl   $0x0,0x144(%edi)
  0xa75683c5: cmpl   $0x0,0x4(%edi)
  0xa75683cc: jne    0xa7556400
  0xa75683d2: mov    -0x1c(%ebp),%esi
  0xa75683d5: mov    -0x18(%ebp),%edi
  0xa75683d8: ret    
  0xa75683d9: push   $0xb7302e8b
  0xa75683de: call   0xa75683e3
  0xa75683e3: pusha  
  0xa75683e4: call   0xb6ff5f32
  0xa75683e9: hlt    
  0xa75683ea: mov    0x14(%ebx),%ecx
  0xa75683ed: test   $0x20,%ecx
  0xa75683f3: je     0xa75685a2
  0xa75683f9: lea    -0x28(%ebp),%edx
  0xa75683fc: mov    0x4(%edx),%ecx
  0xa75683ff: test   %ecx,%ecx
  0xa7568401: jne    0xa75684c1
  0xa7568407: call   0xa7568411
  0xa756840c: jmp    0xa75684b0
  0xa7568411: lea    0x4(%esp),%eax
  0xa7568415: cmpl   $0x0,-0x8(%ebp)
  0xa756841c: je     0xa7568433
  0xa7568422: push   $0xb7449b58
  0xa7568427: call   0xa756842c
  0xa756842c: pusha  
  0xa756842d: call   0xb6ff5f32
  0xa7568432: hlt    
  0xa7568433: mov    %esi,-0x1c(%ebp)
  0xa7568436: mov    %esp,%edi
  0xa7568438: shr    $0xc,%edi
  0xa756843b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568442: push   %edi
  0xa7568443: mov    %ebp,0x148(%edi)
  0xa7568449: mov    %eax,0x140(%edi)
  0xa756844f: call   0xb6e5f012
  0xa7568454: add    $0x4,%esp
  0xa7568457: push   %eax
  0xa7568458: mov    %esp,%eax
  0xa756845a: shr    $0xc,%eax
  0xa756845d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568464: cmp    %eax,%edi
  0xa7568466: je     0xa756847d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756846c: push   $0xb74acf8c
  0xa7568471: call   0xa7568476
  0xa7568476: pusha  
  0xa7568477: call   0xb6ff5f32
  0xa756847c: hlt    
  0xa756847d: pop    %eax
  0xa756847e: movl   $0x0,0x140(%edi)
  0xa7568488: movl   $0x0,0x148(%edi)
  0xa7568492: movl   $0x0,0x144(%edi)
  0xa756849c: cmpl   $0x0,0x4(%edi)
  0xa75684a3: jne    0xa7556400
  0xa75684a9: mov    -0x1c(%ebp),%esi
  0xa75684ac: mov    -0x18(%ebp),%edi
  0xa75684af: ret    
  0xa75684b0: push   $0xb7302e8b
  0xa75684b5: call   0xa75684ba
  0xa75684ba: pusha  
  0xa75684bb: call   0xb6ff5f32
  0xa75684c0: hlt    
  0xa75684c1: mov    %esi,-0x1c(%ebp)
  0xa75684c4: lea    (%edx),%eax
  0xa75684c6: mov    0x4(%edx),%ecx
  0xa75684c9: movl   $0x0,0x4(%edx)
  0xa75684d0: mov    (%ecx),%ebx
  0xa75684d2: and    $0x7,%ebx
  0xa75684d5: cmp    $0x5,%ebx
  0xa75684d8: je     0xa756859f
  0xa75684de: mov    (%eax),%ebx
  0xa75684e0: test   %ebx,%ebx
  0xa75684e2: je     0xa756859f
  0xa75684e8: lock cmpxchg %ebx,(%ecx)
  0xa75684ec: je     0xa756859f
  0xa75684f2: mov    %ecx,0x4(%edx)
  0xa75684f5: call   0xa75684ff
  0xa75684fa: jmp    0xa756859f
  0xa75684ff: push   %edx
  0xa7568500: lea    0x8(%esp),%eax
  0xa7568504: cmpl   $0x0,-0x8(%ebp)
  0xa756850b: je     0xa7568522
  0xa7568511: push   $0xb7449b58
  0xa7568516: call   0xa756851b
  0xa756851b: pusha  
  0xa756851c: call   0xb6ff5f32
  0xa7568521: hlt    
  0xa7568522: mov    %esi,-0x1c(%ebp)
  0xa7568525: mov    %esp,%edi
  0xa7568527: shr    $0xc,%edi
  0xa756852a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568531: push   %edi
  0xa7568532: mov    %ebp,0x148(%edi)
  0xa7568538: mov    %eax,0x140(%edi)
  0xa756853e: call   0xb6e5ed36
  0xa7568543: add    $0x8,%esp
  0xa7568546: push   %eax
  0xa7568547: mov    %esp,%eax
  0xa7568549: shr    $0xc,%eax
  0xa756854c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568553: cmp    %eax,%edi
  0xa7568555: je     0xa756856c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756855b: push   $0xb74acf8c
  0xa7568560: call   0xa7568565
  0xa7568565: pusha  
  0xa7568566: call   0xb6ff5f32
  0xa756856b: hlt    
  0xa756856c: pop    %eax
  0xa756856d: movl   $0x0,0x140(%edi)
  0xa7568577: movl   $0x0,0x148(%edi)
  0xa7568581: movl   $0x0,0x144(%edi)
  0xa756858b: cmpl   $0x0,0x4(%edi)
  0xa7568592: jne    0xa7556400
  0xa7568598: mov    -0x1c(%ebp),%esi
  0xa756859b: mov    -0x18(%ebp),%edi
  0xa756859e: ret    
  0xa756859f: mov    -0x1c(%ebp),%esi
  0xa75685a2: cmpb   $0x0,0xb78c1e7e
  0xa75685a9: je     0xa75685e6
  0xa75685af: mov    %esp,%ebx
  0xa75685b1: shr    $0xc,%ebx
  0xa75685b4: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa75685bb: mov    -0xc(%ebp),%ecx
  0xa75685be: push   %ecx
  0xa75685bf: push   %ebx
  0xa75685c0: cmpl   $0x0,-0x8(%ebp)
  0xa75685c7: je     0xa75685de
  0xa75685cd: push   $0xb7449b18
  0xa75685d2: call   0xa75685d7
  0xa75685d7: pusha  
  0xa75685d8: call   0xb6ff5f32
  0xa75685dd: hlt    
  0xa75685de: call   0xb7175974
  0xa75685e3: add    $0x8,%esp
  0xa75685e6: pop    %eax
  0xa75685e7: pop    %edx
  0xa75685e8: mov    0xc(%ebp),%ecx
  0xa75685eb: call   *%ecx
  0xa75685ed: mov    -0x4(%ebp),%ecx
  0xa75685f0: mov    %ebp,%esp
  0xa75685f2: pop    %ebp
  0xa75685f3: pop    %edi
  0xa75685f4: mov    %ecx,%esp
  0xa75685f6: jmp    *%edi
  0xa75685f8: mov    $0x0,%eax
  0xa75685fd: call   0xa7568607
  0xa7568602: jmp    0xa75686a7
  0xa7568607: push   %eax
  0xa7568608: lea    0x8(%esp),%eax
  0xa756860c: cmpl   $0x0,-0x8(%ebp)
  0xa7568613: je     0xa756862a
  0xa7568619: push   $0xb7449b58
  0xa756861e: call   0xa7568623
  0xa7568623: pusha  
  0xa7568624: call   0xb6ff5f32
  0xa7568629: hlt    
  0xa756862a: mov    %esi,-0x1c(%ebp)
  0xa756862d: mov    %esp,%edi
  0xa756862f: shr    $0xc,%edi
  0xa7568632: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568639: push   %edi
  0xa756863a: mov    %ebp,0x148(%edi)
  0xa7568640: mov    %eax,0x140(%edi)
  0xa7568646: call   0xb6e60bc8
  0xa756864b: add    $0x8,%esp
  0xa756864e: push   %eax
  0xa756864f: mov    %esp,%eax
  0xa7568651: shr    $0xc,%eax
  0xa7568654: mov    -0x4871aba0(,%eax,4),%eax
  0xa756865b: cmp    %eax,%edi
  0xa756865d: je     0xa7568674
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568663: push   $0xb74acf8c
  0xa7568668: call   0xa756866d
  0xa756866d: pusha  
  0xa756866e: call   0xb6ff5f32
  0xa7568673: hlt    
  0xa7568674: pop    %eax
  0xa7568675: movl   $0x0,0x140(%edi)
  0xa756867f: movl   $0x0,0x148(%edi)
  0xa7568689: movl   $0x0,0x144(%edi)
  0xa7568693: cmpl   $0x0,0x4(%edi)
  0xa756869a: jne    0xa7556400
  0xa75686a0: mov    -0x1c(%ebp),%esi
  0xa75686a3: mov    -0x18(%ebp),%edi
  0xa75686a6: ret    
  0xa75686a7: mov    -0xc(%ebp),%ebx
  0xa75686aa: jmp    0xa7567f6b
  0xa75686af: nop
  0xa75686b0: int3   
  0xa75686b1: int3   
  0xa75686b2: int3   
  0xa75686b3: int3   
  0xa75686b4: int3   
  0xa75686b5: int3   
  0xa75686b6: int3   
  0xa75686b7: int3   
  0xa75686b8: int3   
  0xa75686b9: int3   
  0xa75686ba: int3   
  0xa75686bb: int3   
  0xa75686bc: int3   
  0xa75686bd: int3   
  0xa75686be: int3   
  0xa75686bf: int3   

----------------------------------------------------------------------
method entry point (kind = native)  [0xa75686e0, 0xa7568fc0]  2272 bytes

  0xa75686e0: mov    0x8(%ebx),%ecx
  0xa75686e3: movzwl 0x24(%ecx),%ecx
  0xa75686e7: pop    %eax
  0xa75686e8: lea    -0x4(%esp,%ecx,4),%edi
  0xa75686ec: push   $0x0
  0xa75686f1: push   $0x0
  0xa75686f6: push   %eax
  0xa75686f7: push   %ebp
  0xa75686f8: mov    %esp,%ebp
  0xa75686fa: push   %esi
  0xa75686fb: push   $0x0
  0xa7568700: mov    0x8(%ebx),%esi
  0xa7568703: lea    0x28(%esi),%esi
  0xa7568706: push   %ebx
  0xa7568707: mov    0xc(%ebx),%edx
  0xa756870a: test   %edx,%edx
  0xa756870c: je     0xa7568718
  0xa7568712: add    $0xe0,%edx
  0xa7568718: push   %edx
  0xa7568719: mov    0x8(%ebx),%edx
  0xa756871c: mov    0x8(%edx),%edx
  0xa756871f: mov    0xc(%edx),%edx
  0xa7568722: push   %edx
  0xa7568723: push   %edi
  0xa7568724: push   $0x0
  0xa7568729: push   $0x0
  0xa756872e: mov    %esp,(%esp)
  0xa7568731: mov    0x14(%ebx),%eax
  0xa7568734: test   $0x100,%eax
  0xa7568739: jne    0xa7568750
  0xa756873f: push   $0xb7562374
  0xa7568744: call   0xa7568749
  0xa7568749: pusha  
  0xa756874a: call   0xb6ff5f32
  0xa756874f: hlt    
  0xa7568750: test   $0x400,%eax
  0xa7568755: je     0xa756876c
  0xa756875b: push   $0xb75623a4
  0xa7568760: call   0xa7568765
  0xa7568765: pusha  
  0xa7568766: call   0xb6ff5f32
  0xa756876b: hlt    
  0xa756876c: mov    %esp,%eax
  0xa756876e: shr    $0xc,%eax
  0xa7568771: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568778: movb   $0x1,0x1a5(%eax)
  0xa756877f: mov    0xc(%ebx),%eax
  0xa7568782: test   %eax,%eax
  0xa7568784: je     0xa75687a6
  0xa7568786: mov    0xbc(%eax),%ecx
  0xa756878c: add    $0x8,%ecx
  0xa756878f: mov    %ecx,0xbc(%eax)
  0xa7568795: and    $0x3f8,%ecx
  0xa756879b: je     0xa7568f08
  0xa75687a1: jmp    0xa756887b
  0xa75687a6: mov    0x10(%ebx),%eax
  0xa75687a9: test   %eax,%eax
  0xa75687ab: jne    0xa7568866
  0xa75687b1: call   0xa75687bb
  0xa75687b6: jmp    0xa756885b
  0xa75687bb: push   %ebx
  0xa75687bc: lea    0x8(%esp),%eax
  0xa75687c0: cmpl   $0x0,-0x8(%ebp)
  0xa75687c7: je     0xa75687de
  0xa75687cd: push   $0xb7449b58
  0xa75687d2: call   0xa75687d7
  0xa75687d7: pusha  
  0xa75687d8: call   0xb6ff5f32
  0xa75687dd: hlt    
  0xa75687de: mov    %esi,-0x1c(%ebp)
  0xa75687e1: mov    %esp,%edi
  0xa75687e3: shr    $0xc,%edi
  0xa75687e6: mov    -0x4871aba0(,%edi,4),%edi
  0xa75687ed: push   %edi
  0xa75687ee: mov    %ebp,0x148(%edi)
  0xa75687f4: mov    %eax,0x140(%edi)
  0xa75687fa: call   0xb6e61c92
  0xa75687ff: add    $0x8,%esp
  0xa7568802: push   %eax
  0xa7568803: mov    %esp,%eax
  0xa7568805: shr    $0xc,%eax
  0xa7568808: mov    -0x4871aba0(,%eax,4),%eax
  0xa756880f: cmp    %eax,%edi
  0xa7568811: je     0xa7568828
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568817: push   $0xb74acf8c
  0xa756881c: call   0xa7568821
  0xa7568821: pusha  
  0xa7568822: call   0xb6ff5f32
  0xa7568827: hlt    
  0xa7568828: pop    %eax
  0xa7568829: movl   $0x0,0x140(%edi)
  0xa7568833: movl   $0x0,0x148(%edi)
  0xa756883d: movl   $0x0,0x144(%edi)
  0xa7568847: cmpl   $0x0,0x4(%edi)
  0xa756884e: jne    0xa7556400
  0xa7568854: mov    -0x1c(%ebp),%esi
  0xa7568857: mov    -0x18(%ebp),%edi
  0xa756885a: ret    
  0xa756885b: mov    0x10(%ebx),%eax
  0xa756885e: test   %eax,%eax
  0xa7568860: je     0xa756887b
  0xa7568866: mov    0x8(%eax),%ecx
  0xa7568869: add    $0x8,%ecx
  0xa756886c: mov    %ecx,0x8(%eax)
  0xa756886f: and    $0x3f8,%ecx
  0xa7568875: je     0xa7568f08
  0xa756887b: mov    %eax,-0x9000(%esp)
  0xa7568882: mov    %esp,%eax
  0xa7568884: shr    $0xc,%eax
  0xa7568887: mov    -0x4871aba0(,%eax,4),%eax
  0xa756888e: movb   $0x0,0x1a5(%eax)
  0xa7568895: mov    0x14(%ebx),%eax
  0xa7568898: test   $0x20,%eax
  0xa756889d: je     0xa75688b4
  0xa75688a3: push   $0xb75623d4
  0xa75688a8: call   0xa75688ad
  0xa75688ad: pusha  
  0xa75688ae: call   0xb6ff5f32
  0xa75688b3: hlt    
  0xa75688b4: mov    -0x20(%ebp),%eax
  0xa75688b7: cmp    %esp,%eax
  0xa75688b9: je     0xa75688d0
  0xa75688bf: push   $0xb75623f4
  0xa75688c4: call   0xa75688c9
  0xa75688c9: pusha  
  0xa75688ca: call   0xb6ff5f32
  0xa75688cf: hlt    
  0xa75688d0: cmpb   $0x0,0xb78c1e7e
  0xa75688d7: je     0xa7568914
  0xa75688dd: mov    %esp,%ecx
  0xa75688df: shr    $0xc,%ecx
  0xa75688e2: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75688e9: mov    -0xc(%ebp),%ebx
  0xa75688ec: push   %ebx
  0xa75688ed: push   %ecx
  0xa75688ee: cmpl   $0x0,-0x8(%ebp)
  0xa75688f5: je     0xa756890c
  0xa75688fb: push   $0xb7449b18
  0xa7568900: call   0xa7568905
  0xa7568905: pusha  
  0xa7568906: call   0xb6ff5f32
  0xa756890b: hlt    
  0xa756890c: call   0xb71757d0
  0xa7568911: add    $0x8,%esp
  0xa7568914: mov    -0xc(%ebp),%ebx
  0xa7568917: mov    0x8(%ebx),%ecx
  0xa756891a: movzwl 0x24(%ecx),%ecx
  0xa756891e: shl    $0x2,%ecx
  0xa7568921: add    $0x8,%ecx
  0xa7568924: sub    %ecx,%esp
  0xa7568926: and    $0xfffffff0,%esp
  0xa7568929: mov    0x40(%ebx),%ecx
  0xa756892c: test   %ecx,%ecx
  0xa756892e: jne    0xa75689e4
  0xa7568934: call   0xa756893e
  0xa7568939: jmp    0xa75689de
  0xa756893e: push   %ebx
  0xa756893f: lea    0x8(%esp),%eax
  0xa7568943: cmpl   $0x0,-0x8(%ebp)
  0xa756894a: je     0xa7568961
  0xa7568950: push   $0xb7449b58
  0xa7568955: call   0xa756895a
  0xa756895a: pusha  
  0xa756895b: call   0xb6ff5f32
  0xa7568960: hlt    
  0xa7568961: mov    %esi,-0x1c(%ebp)
  0xa7568964: mov    %esp,%edi
  0xa7568966: shr    $0xc,%edi
  0xa7568969: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568970: push   %edi
  0xa7568971: mov    %ebp,0x148(%edi)
  0xa7568977: mov    %eax,0x140(%edi)
  0xa756897d: call   0xb6e634da
  0xa7568982: add    $0x8,%esp
  0xa7568985: push   %eax
  0xa7568986: mov    %esp,%eax
  0xa7568988: shr    $0xc,%eax
  0xa756898b: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568992: cmp    %eax,%edi
  0xa7568994: je     0xa75689ab
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756899a: push   $0xb74acf8c
  0xa756899f: call   0xa75689a4
  0xa75689a4: pusha  
  0xa75689a5: call   0xb6ff5f32
  0xa75689aa: hlt    
  0xa75689ab: pop    %eax
  0xa75689ac: movl   $0x0,0x140(%edi)
  0xa75689b6: movl   $0x0,0x148(%edi)
  0xa75689c0: movl   $0x0,0x144(%edi)
  0xa75689ca: cmpl   $0x0,0x4(%edi)
  0xa75689d1: jne    0xa7556400
  0xa75689d7: mov    -0x1c(%ebp),%esi
  0xa75689da: mov    -0x18(%ebp),%edi
  0xa75689dd: ret    
  0xa75689de: mov    -0xc(%ebp),%ebx
  0xa75689e1: mov    0x40(%ebx),%ecx
  0xa75689e4: call   *%ecx
  0xa75689e6: mov    -0xc(%ebp),%ebx
  0xa75689e9: mov    %eax,0xc(%ebp)
  0xa75689ec: mov    0x14(%ebx),%ecx
  0xa75689ef: test   $0x8,%ecx
  0xa75689f5: je     0xa7568a11
  0xa75689fb: mov    0x8(%ebx),%ecx
  0xa75689fe: mov    0x8(%ecx),%ecx
  0xa7568a01: mov    0x10(%ecx),%ecx
  0xa7568a04: mov    0x3c(%ecx),%ecx
  0xa7568a07: mov    %ecx,0x8(%ebp)
  0xa7568a0a: lea    0x8(%ebp),%ecx
  0xa7568a0d: mov    %ecx,0x4(%esp)
  0xa7568a11: mov    0x3c(%ebx),%eax
  0xa7568a14: cmp    $0xb7174eac,%eax
  0xa7568a1a: jne    0xa7568ad0
  0xa7568a20: call   0xa7568a2a
  0xa7568a25: jmp    0xa7568aca
  0xa7568a2a: push   %ebx
  0xa7568a2b: lea    0x8(%esp),%eax
  0xa7568a2f: cmpl   $0x0,-0x8(%ebp)
  0xa7568a36: je     0xa7568a4d
  0xa7568a3c: push   $0xb7449b58
  0xa7568a41: call   0xa7568a46
  0xa7568a46: pusha  
  0xa7568a47: call   0xb6ff5f32
  0xa7568a4c: hlt    
  0xa7568a4d: mov    %esi,-0x1c(%ebp)
  0xa7568a50: mov    %esp,%edi
  0xa7568a52: shr    $0xc,%edi
  0xa7568a55: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568a5c: push   %edi
  0xa7568a5d: mov    %ebp,0x148(%edi)
  0xa7568a63: mov    %eax,0x140(%edi)
  0xa7568a69: call   0xb6e634da
  0xa7568a6e: add    $0x8,%esp
  0xa7568a71: push   %eax
  0xa7568a72: mov    %esp,%eax
  0xa7568a74: shr    $0xc,%eax
  0xa7568a77: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568a7e: cmp    %eax,%edi
  0xa7568a80: je     0xa7568a97
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568a86: push   $0xb74acf8c
  0xa7568a8b: call   0xa7568a90
  0xa7568a90: pusha  
  0xa7568a91: call   0xb6ff5f32
  0xa7568a96: hlt    
  0xa7568a97: pop    %eax
  0xa7568a98: movl   $0x0,0x140(%edi)
  0xa7568aa2: movl   $0x0,0x148(%edi)
  0xa7568aac: movl   $0x0,0x144(%edi)
  0xa7568ab6: cmpl   $0x0,0x4(%edi)
  0xa7568abd: jne    0xa7556400
  0xa7568ac3: mov    -0x1c(%ebp),%esi
  0xa7568ac6: mov    -0x18(%ebp),%edi
  0xa7568ac9: ret    
  0xa7568aca: mov    -0xc(%ebp),%ebx
  0xa7568acd: mov    0x3c(%ebx),%eax
  0xa7568ad0: mov    %esp,%edi
  0xa7568ad2: shr    $0xc,%edi
  0xa7568ad5: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568adc: lea    0x150(%edi),%ecx
  0xa7568ae2: mov    %ecx,(%esp)
  0xa7568ae5: mov    %ebp,0x148(%edi)
  0xa7568aeb: movl   $0xa7568ae5,0x144(%edi)
  0xa7568af5: mov    %esp,0x140(%edi)
  0xa7568afb: mov    0x18c(%edi),%ecx
  0xa7568b01: cmp    $0x8,%ecx
  0xa7568b04: je     0xa7568b1b
  0xa7568b0a: push   $0xb7562514
  0xa7568b0f: call   0xa7568b14
  0xa7568b14: pusha  
  0xa7568b15: call   0xb6ff5f32
  0xa7568b1a: hlt    
  0xa7568b1b: movl   $0x4,0x18c(%edi)
  0xa7568b25: call   *%eax
  0xa7568b27: vzeroupper 
  0xa7568b2a: cmpl   $0xa75629da,0xc(%ebp)
  0xa7568b31: je     0xa7568b44
  0xa7568b37: cmpl   $0xa75629eb,0xc(%ebp)
  0xa7568b3e: jne    0xa7568b4a
  0xa7568b44: sub    $0x8,%esp
  0xa7568b47: fstpl  (%esp)
  0xa7568b4a: push   %edx
  0xa7568b4b: push   %eax
  0xa7568b4c: mov    %esp,%edi
  0xa7568b4e: shr    $0xc,%edi
  0xa7568b51: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568b58: movl   $0x5,0x18c(%edi)
  0xa7568b62: mov    %edi,%ecx
  0xa7568b64: shr    $0x3,%ecx
  0xa7568b67: and    $0xffc,%ecx
  0xa7568b6d: mov    %ecx,-0x48137000(,%ecx,1)
  0xa7568b74: cmpl   $0x0,0xb78cefa0
  0xa7568b7e: jne    0xa7568b91
  0xa7568b84: cmpl   $0x0,0x18(%edi)
  0xa7568b8b: je     0xa7568ba6
  0xa7568b91: push   %edi
  0xa7568b92: call   0xb720cf66
  0xa7568b97: add    $0x4,%esp
  0xa7568b9a: mov    %esp,%edi
  0xa7568b9c: shr    $0xc,%edi
  0xa7568b9f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568ba6: movl   $0x8,0x18c(%edi)
  0xa7568bb0: movl   $0x0,0x140(%edi)
  0xa7568bba: movl   $0x0,0x148(%edi)
  0xa7568bc4: movl   $0x0,0x144(%edi)
  0xa7568bce: mov    0x20(%edi),%ecx
  0xa7568bd1: movl   $0x0,0x84(%ecx)
  0xa7568bdb: cmpl   $0xa75629f6,0xc(%ebp)
  0xa7568be2: jne    0xa7568c13
  0xa7568be8: cmpl   $0x0,(%esp)
  0xa7568bef: pop    %eax
  0xa7568bf0: pop    %edx
  0xa7568bf1: test   %eax,%eax
  0xa7568bf3: je     0xa7568c0e
  0xa7568bf9: test   $0x1,%eax
  0xa7568bfe: je     0xa7568c0c
  0xa7568c04: mov    -0x1(%eax),%eax
  0xa7568c07: jmp    0xa7568c0e
  0xa7568c0c: mov    (%eax),%eax
  0xa7568c0e: mov    %eax,0x8(%ebp)
  0xa7568c11: push   %edx
  0xa7568c12: push   %eax
  0xa7568c13: cmpl   $0x1,0x1ac(%edi)
  0xa7568c1d: jne    0xa7568c2a
  0xa7568c23: pusha  
  0xa7568c24: call   0xb7179c2a
  0xa7568c29: popa   
  0xa7568c2a: mov    -0xc(%ebp),%ebx
  0xa7568c2d: mov    0x8(%ebx),%esi
  0xa7568c30: lea    0x28(%esi),%esi
  0xa7568c33: cmpl   $0x0,0x4(%edi)
  0xa7568c3a: je     0xa7568cfa
  0xa7568c40: call   0xa7568c4a
  0xa7568c45: jmp    0xa7568ce9
  0xa7568c4a: lea    0x4(%esp),%eax
  0xa7568c4e: cmpl   $0x0,-0x8(%ebp)
  0xa7568c55: je     0xa7568c6c
  0xa7568c5b: push   $0xb7449b58
  0xa7568c60: call   0xa7568c65
  0xa7568c65: pusha  
  0xa7568c66: call   0xb6ff5f32
  0xa7568c6b: hlt    
  0xa7568c6c: mov    %esi,-0x1c(%ebp)
  0xa7568c6f: mov    %esp,%edi
  0xa7568c71: shr    $0xc,%edi
  0xa7568c74: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568c7b: push   %edi
  0xa7568c7c: mov    %ebp,0x148(%edi)
  0xa7568c82: mov    %eax,0x140(%edi)
  0xa7568c88: call   0xb6e5e068
  0xa7568c8d: add    $0x4,%esp
  0xa7568c90: push   %eax
  0xa7568c91: mov    %esp,%eax
  0xa7568c93: shr    $0xc,%eax
  0xa7568c96: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568c9d: cmp    %eax,%edi
  0xa7568c9f: je     0xa7568cb6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568ca5: push   $0xb74acf8c
  0xa7568caa: call   0xa7568caf
  0xa7568caf: pusha  
  0xa7568cb0: call   0xb6ff5f32
  0xa7568cb5: hlt    
  0xa7568cb6: pop    %eax
  0xa7568cb7: movl   $0x0,0x140(%edi)
  0xa7568cc1: movl   $0x0,0x148(%edi)
  0xa7568ccb: movl   $0x0,0x144(%edi)
  0xa7568cd5: cmpl   $0x0,0x4(%edi)
  0xa7568cdc: jne    0xa7556400
  0xa7568ce2: mov    -0x1c(%ebp),%esi
  0xa7568ce5: mov    -0x18(%ebp),%edi
  0xa7568ce8: ret    
  0xa7568ce9: push   $0xb7302e8b
  0xa7568cee: call   0xa7568cf3
  0xa7568cf3: pusha  
  0xa7568cf4: call   0xb6ff5f32
  0xa7568cf9: hlt    
  0xa7568cfa: mov    0x14(%ebx),%ecx
  0xa7568cfd: test   $0x20,%ecx
  0xa7568d03: je     0xa7568eb2
  0xa7568d09: lea    -0x28(%ebp),%edx
  0xa7568d0c: mov    0x4(%edx),%ecx
  0xa7568d0f: test   %ecx,%ecx
  0xa7568d11: jne    0xa7568dd1
  0xa7568d17: call   0xa7568d21
  0xa7568d1c: jmp    0xa7568dc0
  0xa7568d21: lea    0x4(%esp),%eax
  0xa7568d25: cmpl   $0x0,-0x8(%ebp)
  0xa7568d2c: je     0xa7568d43
  0xa7568d32: push   $0xb7449b58
  0xa7568d37: call   0xa7568d3c
  0xa7568d3c: pusha  
  0xa7568d3d: call   0xb6ff5f32
  0xa7568d42: hlt    
  0xa7568d43: mov    %esi,-0x1c(%ebp)
  0xa7568d46: mov    %esp,%edi
  0xa7568d48: shr    $0xc,%edi
  0xa7568d4b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568d52: push   %edi
  0xa7568d53: mov    %ebp,0x148(%edi)
  0xa7568d59: mov    %eax,0x140(%edi)
  0xa7568d5f: call   0xb6e5f012
  0xa7568d64: add    $0x4,%esp
  0xa7568d67: push   %eax
  0xa7568d68: mov    %esp,%eax
  0xa7568d6a: shr    $0xc,%eax
  0xa7568d6d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568d74: cmp    %eax,%edi
  0xa7568d76: je     0xa7568d8d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568d7c: push   $0xb74acf8c
  0xa7568d81: call   0xa7568d86
  0xa7568d86: pusha  
  0xa7568d87: call   0xb6ff5f32
  0xa7568d8c: hlt    
  0xa7568d8d: pop    %eax
  0xa7568d8e: movl   $0x0,0x140(%edi)
  0xa7568d98: movl   $0x0,0x148(%edi)
  0xa7568da2: movl   $0x0,0x144(%edi)
  0xa7568dac: cmpl   $0x0,0x4(%edi)
  0xa7568db3: jne    0xa7556400
  0xa7568db9: mov    -0x1c(%ebp),%esi
  0xa7568dbc: mov    -0x18(%ebp),%edi
  0xa7568dbf: ret    
  0xa7568dc0: push   $0xb7302e8b
  0xa7568dc5: call   0xa7568dca
  0xa7568dca: pusha  
  0xa7568dcb: call   0xb6ff5f32
  0xa7568dd0: hlt    
  0xa7568dd1: mov    %esi,-0x1c(%ebp)
  0xa7568dd4: lea    (%edx),%eax
  0xa7568dd6: mov    0x4(%edx),%ecx
  0xa7568dd9: movl   $0x0,0x4(%edx)
  0xa7568de0: mov    (%ecx),%ebx
  0xa7568de2: and    $0x7,%ebx
  0xa7568de5: cmp    $0x5,%ebx
  0xa7568de8: je     0xa7568eaf
  0xa7568dee: mov    (%eax),%ebx
  0xa7568df0: test   %ebx,%ebx
  0xa7568df2: je     0xa7568eaf
  0xa7568df8: lock cmpxchg %ebx,(%ecx)
  0xa7568dfc: je     0xa7568eaf
  0xa7568e02: mov    %ecx,0x4(%edx)
  0xa7568e05: call   0xa7568e0f
  0xa7568e0a: jmp    0xa7568eaf
  0xa7568e0f: push   %edx
  0xa7568e10: lea    0x8(%esp),%eax
  0xa7568e14: cmpl   $0x0,-0x8(%ebp)
  0xa7568e1b: je     0xa7568e32
  0xa7568e21: push   $0xb7449b58
  0xa7568e26: call   0xa7568e2b
  0xa7568e2b: pusha  
  0xa7568e2c: call   0xb6ff5f32
  0xa7568e31: hlt    
  0xa7568e32: mov    %esi,-0x1c(%ebp)
  0xa7568e35: mov    %esp,%edi
  0xa7568e37: shr    $0xc,%edi
  0xa7568e3a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568e41: push   %edi
  0xa7568e42: mov    %ebp,0x148(%edi)
  0xa7568e48: mov    %eax,0x140(%edi)
  0xa7568e4e: call   0xb6e5ed36
  0xa7568e53: add    $0x8,%esp
  0xa7568e56: push   %eax
  0xa7568e57: mov    %esp,%eax
  0xa7568e59: shr    $0xc,%eax
  0xa7568e5c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568e63: cmp    %eax,%edi
  0xa7568e65: je     0xa7568e7c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568e6b: push   $0xb74acf8c
  0xa7568e70: call   0xa7568e75
  0xa7568e75: pusha  
  0xa7568e76: call   0xb6ff5f32
  0xa7568e7b: hlt    
  0xa7568e7c: pop    %eax
  0xa7568e7d: movl   $0x0,0x140(%edi)
  0xa7568e87: movl   $0x0,0x148(%edi)
  0xa7568e91: movl   $0x0,0x144(%edi)
  0xa7568e9b: cmpl   $0x0,0x4(%edi)
  0xa7568ea2: jne    0xa7556400
  0xa7568ea8: mov    -0x1c(%ebp),%esi
  0xa7568eab: mov    -0x18(%ebp),%edi
  0xa7568eae: ret    
  0xa7568eaf: mov    -0x1c(%ebp),%esi
  0xa7568eb2: cmpb   $0x0,0xb78c1e7e
  0xa7568eb9: je     0xa7568ef6
  0xa7568ebf: mov    %esp,%ebx
  0xa7568ec1: shr    $0xc,%ebx
  0xa7568ec4: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7568ecb: mov    -0xc(%ebp),%ecx
  0xa7568ece: push   %ecx
  0xa7568ecf: push   %ebx
  0xa7568ed0: cmpl   $0x0,-0x8(%ebp)
  0xa7568ed7: je     0xa7568eee
  0xa7568edd: push   $0xb7449b18
  0xa7568ee2: call   0xa7568ee7
  0xa7568ee7: pusha  
  0xa7568ee8: call   0xb6ff5f32
  0xa7568eed: hlt    
  0xa7568eee: call   0xb7175974
  0xa7568ef3: add    $0x8,%esp
  0xa7568ef6: pop    %eax
  0xa7568ef7: pop    %edx
  0xa7568ef8: mov    0xc(%ebp),%ecx
  0xa7568efb: call   *%ecx
  0xa7568efd: mov    -0x4(%ebp),%ecx
  0xa7568f00: mov    %ebp,%esp
  0xa7568f02: pop    %ebp
  0xa7568f03: pop    %edi
  0xa7568f04: mov    %ecx,%esp
  0xa7568f06: jmp    *%edi
  0xa7568f08: mov    $0x0,%eax
  0xa7568f0d: call   0xa7568f17
  0xa7568f12: jmp    0xa7568fb7
  0xa7568f17: push   %eax
  0xa7568f18: lea    0x8(%esp),%eax
  0xa7568f1c: cmpl   $0x0,-0x8(%ebp)
  0xa7568f23: je     0xa7568f3a
  0xa7568f29: push   $0xb7449b58
  0xa7568f2e: call   0xa7568f33
  0xa7568f33: pusha  
  0xa7568f34: call   0xb6ff5f32
  0xa7568f39: hlt    
  0xa7568f3a: mov    %esi,-0x1c(%ebp)
  0xa7568f3d: mov    %esp,%edi
  0xa7568f3f: shr    $0xc,%edi
  0xa7568f42: mov    -0x4871aba0(,%edi,4),%edi
  0xa7568f49: push   %edi
  0xa7568f4a: mov    %ebp,0x148(%edi)
  0xa7568f50: mov    %eax,0x140(%edi)
  0xa7568f56: call   0xb6e60bc8
  0xa7568f5b: add    $0x8,%esp
  0xa7568f5e: push   %eax
  0xa7568f5f: mov    %esp,%eax
  0xa7568f61: shr    $0xc,%eax
  0xa7568f64: mov    -0x4871aba0(,%eax,4),%eax
  0xa7568f6b: cmp    %eax,%edi
  0xa7568f6d: je     0xa7568f84
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7568f73: push   $0xb74acf8c
  0xa7568f78: call   0xa7568f7d
  0xa7568f7d: pusha  
  0xa7568f7e: call   0xb6ff5f32
  0xa7568f83: hlt    
  0xa7568f84: pop    %eax
  0xa7568f85: movl   $0x0,0x140(%edi)
  0xa7568f8f: movl   $0x0,0x148(%edi)
  0xa7568f99: movl   $0x0,0x144(%edi)
  0xa7568fa3: cmpl   $0x0,0x4(%edi)
  0xa7568faa: jne    0xa7556400
  0xa7568fb0: mov    -0x1c(%ebp),%esi
  0xa7568fb3: mov    -0x18(%ebp),%edi
  0xa7568fb6: ret    
  0xa7568fb7: mov    -0xc(%ebp),%ebx
  0xa7568fba: jmp    0xa756887b
  0xa7568fbf: nop

----------------------------------------------------------------------
method entry point (kind = native_synchronized)  [0xa7568fe0, 0xa7569a60]  2688 bytes

  0xa7568fe0: mov    0x8(%ebx),%ecx
  0xa7568fe3: movzwl 0x24(%ecx),%ecx
  0xa7568fe7: pop    %eax
  0xa7568fe8: lea    -0x4(%esp,%ecx,4),%edi
  0xa7568fec: push   $0x0
  0xa7568ff1: push   $0x0
  0xa7568ff6: push   %eax
  0xa7568ff7: push   %ebp
  0xa7568ff8: mov    %esp,%ebp
  0xa7568ffa: push   %esi
  0xa7568ffb: push   $0x0
  0xa7569000: mov    0x8(%ebx),%esi
  0xa7569003: lea    0x28(%esi),%esi
  0xa7569006: push   %ebx
  0xa7569007: mov    0xc(%ebx),%edx
  0xa756900a: test   %edx,%edx
  0xa756900c: je     0xa7569018
  0xa7569012: add    $0xe0,%edx
  0xa7569018: push   %edx
  0xa7569019: mov    0x8(%ebx),%edx
  0xa756901c: mov    0x8(%edx),%edx
  0xa756901f: mov    0xc(%edx),%edx
  0xa7569022: push   %edx
  0xa7569023: push   %edi
  0xa7569024: push   $0x0
  0xa7569029: push   $0x0
  0xa756902e: mov    %esp,(%esp)
  0xa7569031: mov    0x14(%ebx),%eax
  0xa7569034: test   $0x100,%eax
  0xa7569039: jne    0xa7569050
  0xa756903f: push   $0xb7562374
  0xa7569044: call   0xa7569049
  0xa7569049: pusha  
  0xa756904a: call   0xb6ff5f32
  0xa756904f: hlt    
  0xa7569050: test   $0x400,%eax
  0xa7569055: je     0xa756906c
  0xa756905b: push   $0xb75623a4
  0xa7569060: call   0xa7569065
  0xa7569065: pusha  
  0xa7569066: call   0xb6ff5f32
  0xa756906b: hlt    
  0xa756906c: mov    %esp,%eax
  0xa756906e: shr    $0xc,%eax
  0xa7569071: mov    -0x4871aba0(,%eax,4),%eax
  0xa7569078: movb   $0x1,0x1a5(%eax)
  0xa756907f: mov    0xc(%ebx),%eax
  0xa7569082: test   %eax,%eax
  0xa7569084: je     0xa75690a6
  0xa7569086: mov    0xbc(%eax),%ecx
  0xa756908c: add    $0x8,%ecx
  0xa756908f: mov    %ecx,0xbc(%eax)
  0xa7569095: and    $0x3f8,%ecx
  0xa756909b: je     0xa756999f
  0xa75690a1: jmp    0xa756917b
  0xa75690a6: mov    0x10(%ebx),%eax
  0xa75690a9: test   %eax,%eax
  0xa75690ab: jne    0xa7569166
  0xa75690b1: call   0xa75690bb
  0xa75690b6: jmp    0xa756915b
  0xa75690bb: push   %ebx
  0xa75690bc: lea    0x8(%esp),%eax
  0xa75690c0: cmpl   $0x0,-0x8(%ebp)
  0xa75690c7: je     0xa75690de
  0xa75690cd: push   $0xb7449b58
  0xa75690d2: call   0xa75690d7
  0xa75690d7: pusha  
  0xa75690d8: call   0xb6ff5f32
  0xa75690dd: hlt    
  0xa75690de: mov    %esi,-0x1c(%ebp)
  0xa75690e1: mov    %esp,%edi
  0xa75690e3: shr    $0xc,%edi
  0xa75690e6: mov    -0x4871aba0(,%edi,4),%edi
  0xa75690ed: push   %edi
  0xa75690ee: mov    %ebp,0x148(%edi)
  0xa75690f4: mov    %eax,0x140(%edi)
  0xa75690fa: call   0xb6e61c92
  0xa75690ff: add    $0x8,%esp
  0xa7569102: push   %eax
  0xa7569103: mov    %esp,%eax
  0xa7569105: shr    $0xc,%eax
  0xa7569108: mov    -0x4871aba0(,%eax,4),%eax
  0xa756910f: cmp    %eax,%edi
  0xa7569111: je     0xa7569128
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7569117: push   $0xb74acf8c
  0xa756911c: call   0xa7569121
  0xa7569121: pusha  
  0xa7569122: call   0xb6ff5f32
  0xa7569127: hlt    
  0xa7569128: pop    %eax
  0xa7569129: movl   $0x0,0x140(%edi)
  0xa7569133: movl   $0x0,0x148(%edi)
  0xa756913d: movl   $0x0,0x144(%edi)
  0xa7569147: cmpl   $0x0,0x4(%edi)
  0xa756914e: jne    0xa7556400
  0xa7569154: mov    -0x1c(%ebp),%esi
  0xa7569157: mov    -0x18(%ebp),%edi
  0xa756915a: ret    
  0xa756915b: mov    0x10(%ebx),%eax
  0xa756915e: test   %eax,%eax
  0xa7569160: je     0xa756917b
  0xa7569166: mov    0x8(%eax),%ecx
  0xa7569169: add    $0x8,%ecx
  0xa756916c: mov    %ecx,0x8(%eax)
  0xa756916f: and    $0x3f8,%ecx
  0xa7569175: je     0xa756999f
  0xa756917b: mov    %eax,-0x9000(%esp)
  0xa7569182: mov    %esp,%eax
  0xa7569184: shr    $0xc,%eax
  0xa7569187: mov    -0x4871aba0(,%eax,4),%eax
  0xa756918e: movb   $0x0,0x1a5(%eax)
  0xa7569195: mov    0x14(%ebx),%eax
  0xa7569198: test   $0x20,%eax
  0xa756919d: jne    0xa75691b4
  0xa75691a3: push   $0xb75622a4
  0xa75691a8: call   0xa75691ad
  0xa75691ad: pusha  
  0xa75691ae: call   0xb6ff5f32
  0xa75691b3: hlt    
  0xa75691b4: mov    0x14(%ebx),%eax
  0xa75691b7: test   $0x8,%eax
  0xa75691bc: mov    (%edi),%eax
  0xa75691be: je     0xa75691d0
  0xa75691c4: mov    0x8(%ebx),%eax
  0xa75691c7: mov    0x8(%eax),%eax
  0xa75691ca: mov    0x10(%eax),%eax
  0xa75691cd: mov    0x3c(%eax),%eax
  0xa75691d0: sub    $0x8,%esp
  0xa75691d3: mov    %esp,-0x20(%ebp)
  0xa75691d6: mov    %eax,0x4(%esp)
  0xa75691da: mov    %esp,%edx
  0xa75691dc: mov    0x4(%edx),%ecx
  0xa75691df: mov    (%ecx),%eax
  0xa75691e1: push   %edx
  0xa75691e2: mov    %eax,%edx
  0xa75691e4: and    $0x7,%edx
  0xa75691e7: cmp    $0x5,%edx
  0xa75691ea: pop    %edx
  0xa75691eb: jne    0xa756927e
  0xa75691f1: mov    %eax,(%edx)
  0xa75691f3: push   %edx
  0xa75691f4: mov    0x4(%ecx),%edx
  0xa75691f7: mov    0x64(%edx),%edx
  0xa75691fa: xor    %eax,%edx
  0xa75691fc: mov    %esp,%eax
  0xa75691fe: shr    $0xc,%eax
  0xa7569201: mov    -0x4871aba0(,%eax,4),%eax
  0xa7569208: xor    %edx,%eax
  0xa756920a: and    $0xffffff87,%eax
  0xa756920d: pop    %edx
  0xa756920e: je     0xa756934b
  0xa7569214: test   $0x7,%eax
  0xa7569219: jne    0xa7569270
  0xa756921b: test   $0x180,%eax
  0xa7569220: jne    0xa7569249
  0xa7569222: mov    (%edx),%eax
  0xa7569224: and    $0x1ff,%eax
  0xa756922a: push   %edx
  0xa756922b: mov    %esp,%edx
  0xa756922d: shr    $0xc,%edx
  0xa7569230: mov    -0x4871aba0(,%edx,4),%edx
  0xa7569237: or     %eax,%edx
  0xa7569239: lock cmpxchg %edx,(%ecx)
  0xa756923d: pop    %edx
  0xa756923e: jne    0xa75692a1
  0xa7569244: jmp    0xa756934b
  0xa7569249: push   %edx
  0xa756924a: mov    0x4(%ecx),%edx
  0xa756924d: mov    0x64(%edx),%edx
  0xa7569250: mov    %esp,%eax
  0xa7569252: shr    $0xc,%eax
  0xa7569255: mov    -0x4871aba0(,%eax,4),%eax
  0xa756925c: or     %eax,%edx
  0xa756925e: mov    (%edx),%eax
  0xa7569260: lock cmpxchg %edx,(%ecx)
  0xa7569264: pop    %edx
  0xa7569265: jne    0xa75692a1
  0xa756926b: jmp    0xa756934b
  0xa7569270: mov    (%edx),%eax
  0xa7569272: push   %edx
  0xa7569273: mov    0x4(%ecx),%edx
  0xa7569276: mov    0x64(%edx),%edx
  0xa7569279: lock cmpxchg %edx,(%ecx)
  0xa756927d: pop    %edx
  0xa756927e: mov    $0x1,%eax
  0xa7569283: or     (%ecx),%eax
  0xa7569285: mov    %eax,(%edx)
  0xa7569287: lock cmpxchg %edx,(%ecx)
  0xa756928b: je     0xa756934b
  0xa7569291: sub    %esp,%eax
  0xa7569293: and    $0xfffff003,%eax
  0xa7569299: mov    %eax,(%edx)
  0xa756929b: je     0xa756934b
  0xa75692a1: call   0xa75692ab
  0xa75692a6: jmp    0xa756934b
  0xa75692ab: push   %edx
  0xa75692ac: lea    0x8(%esp),%eax
  0xa75692b0: cmpl   $0x0,-0x8(%ebp)
  0xa75692b7: je     0xa75692ce
  0xa75692bd: push   $0xb7449b58
  0xa75692c2: call   0xa75692c7
  0xa75692c7: pusha  
  0xa75692c8: call   0xb6ff5f32
  0xa75692cd: hlt    
  0xa75692ce: mov    %esi,-0x1c(%ebp)
  0xa75692d1: mov    %esp,%edi
  0xa75692d3: shr    $0xc,%edi
  0xa75692d6: mov    -0x4871aba0(,%edi,4),%edi
  0xa75692dd: push   %edi
  0xa75692de: mov    %ebp,0x148(%edi)
  0xa75692e4: mov    %eax,0x140(%edi)
  0xa75692ea: call   0xb6e5ea04
  0xa75692ef: add    $0x8,%esp
  0xa75692f2: push   %eax
  0xa75692f3: mov    %esp,%eax
  0xa75692f5: shr    $0xc,%eax
  0xa75692f8: mov    -0x4871aba0(,%eax,4),%eax
  0xa75692ff: cmp    %eax,%edi
  0xa7569301: je     0xa7569318
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7569307: push   $0xb74acf8c
  0xa756930c: call   0xa7569311
  0xa7569311: pusha  
  0xa7569312: call   0xb6ff5f32
  0xa7569317: hlt    
  0xa7569318: pop    %eax
  0xa7569319: movl   $0x0,0x140(%edi)
  0xa7569323: movl   $0x0,0x148(%edi)
  0xa756932d: movl   $0x0,0x144(%edi)
  0xa7569337: cmpl   $0x0,0x4(%edi)
  0xa756933e: jne    0xa7556400
  0xa7569344: mov    -0x1c(%ebp),%esi
  0xa7569347: mov    -0x18(%ebp),%edi
  0xa756934a: ret    
  0xa756934b: mov    -0x20(%ebp),%eax
  0xa756934e: cmp    %esp,%eax
  0xa7569350: je     0xa7569367
  0xa7569356: push   $0xb75623f4
  0xa756935b: call   0xa7569360
  0xa7569360: pusha  
  0xa7569361: call   0xb6ff5f32
  0xa7569366: hlt    
  0xa7569367: cmpb   $0x0,0xb78c1e7e
  0xa756936e: je     0xa75693ab
  0xa7569374: mov    %esp,%ecx
  0xa7569376: shr    $0xc,%ecx
  0xa7569379: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7569380: mov    -0xc(%ebp),%ebx
  0xa7569383: push   %ebx
  0xa7569384: push   %ecx
  0xa7569385: cmpl   $0x0,-0x8(%ebp)
  0xa756938c: je     0xa75693a3
  0xa7569392: push   $0xb7449b18
  0xa7569397: call   0xa756939c
  0xa756939c: pusha  
  0xa756939d: call   0xb6ff5f32
  0xa75693a2: hlt    
  0xa75693a3: call   0xb71757d0
  0xa75693a8: add    $0x8,%esp
  0xa75693ab: mov    -0xc(%ebp),%ebx
  0xa75693ae: mov    0x8(%ebx),%ecx
  0xa75693b1: movzwl 0x24(%ecx),%ecx
  0xa75693b5: shl    $0x2,%ecx
  0xa75693b8: add    $0x8,%ecx
  0xa75693bb: sub    %ecx,%esp
  0xa75693bd: and    $0xfffffff0,%esp
  0xa75693c0: mov    0x40(%ebx),%ecx
  0xa75693c3: test   %ecx,%ecx
  0xa75693c5: jne    0xa756947b
  0xa75693cb: call   0xa75693d5
  0xa75693d0: jmp    0xa7569475
  0xa75693d5: push   %ebx
  0xa75693d6: lea    0x8(%esp),%eax
  0xa75693da: cmpl   $0x0,-0x8(%ebp)
  0xa75693e1: je     0xa75693f8
  0xa75693e7: push   $0xb7449b58
  0xa75693ec: call   0xa75693f1
  0xa75693f1: pusha  
  0xa75693f2: call   0xb6ff5f32
  0xa75693f7: hlt    
  0xa75693f8: mov    %esi,-0x1c(%ebp)
  0xa75693fb: mov    %esp,%edi
  0xa75693fd: shr    $0xc,%edi
  0xa7569400: mov    -0x4871aba0(,%edi,4),%edi
  0xa7569407: push   %edi
  0xa7569408: mov    %ebp,0x148(%edi)
  0xa756940e: mov    %eax,0x140(%edi)
  0xa7569414: call   0xb6e634da
  0xa7569419: add    $0x8,%esp
  0xa756941c: push   %eax
  0xa756941d: mov    %esp,%eax
  0xa756941f: shr    $0xc,%eax
  0xa7569422: mov    -0x4871aba0(,%eax,4),%eax
  0xa7569429: cmp    %eax,%edi
  0xa756942b: je     0xa7569442
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7569431: push   $0xb74acf8c
  0xa7569436: call   0xa756943b
  0xa756943b: pusha  
  0xa756943c: call   0xb6ff5f32
  0xa7569441: hlt    
  0xa7569442: pop    %eax
  0xa7569443: movl   $0x0,0x140(%edi)
  0xa756944d: movl   $0x0,0x148(%edi)
  0xa7569457: movl   $0x0,0x144(%edi)
  0xa7569461: cmpl   $0x0,0x4(%edi)
  0xa7569468: jne    0xa7556400
  0xa756946e: mov    -0x1c(%ebp),%esi
  0xa7569471: mov    -0x18(%ebp),%edi
  0xa7569474: ret    
  0xa7569475: mov    -0xc(%ebp),%ebx
  0xa7569478: mov    0x40(%ebx),%ecx
  0xa756947b: call   *%ecx
  0xa756947d: mov    -0xc(%ebp),%ebx
  0xa7569480: mov    %eax,0xc(%ebp)
  0xa7569483: mov    0x14(%ebx),%ecx
  0xa7569486: test   $0x8,%ecx
  0xa756948c: je     0xa75694a8
  0xa7569492: mov    0x8(%ebx),%ecx
  0xa7569495: mov    0x8(%ecx),%ecx
  0xa7569498: mov    0x10(%ecx),%ecx
  0xa756949b: mov    0x3c(%ecx),%ecx
  0xa756949e: mov    %ecx,0x8(%ebp)
  0xa75694a1: lea    0x8(%ebp),%ecx
  0xa75694a4: mov    %ecx,0x4(%esp)
  0xa75694a8: mov    0x3c(%ebx),%eax
  0xa75694ab: cmp    $0xb7174eac,%eax
  0xa75694b1: jne    0xa7569567
  0xa75694b7: call   0xa75694c1
  0xa75694bc: jmp    0xa7569561
  0xa75694c1: push   %ebx
  0xa75694c2: lea    0x8(%esp),%eax
  0xa75694c6: cmpl   $0x0,-0x8(%ebp)
  0xa75694cd: je     0xa75694e4
  0xa75694d3: push   $0xb7449b58
  0xa75694d8: call   0xa75694dd
  0xa75694dd: pusha  
  0xa75694de: call   0xb6ff5f32
  0xa75694e3: hlt    
  0xa75694e4: mov    %esi,-0x1c(%ebp)
  0xa75694e7: mov    %esp,%edi
  0xa75694e9: shr    $0xc,%edi
  0xa75694ec: mov    -0x4871aba0(,%edi,4),%edi
  0xa75694f3: push   %edi
  0xa75694f4: mov    %ebp,0x148(%edi)
  0xa75694fa: mov    %eax,0x140(%edi)
  0xa7569500: call   0xb6e634da
  0xa7569505: add    $0x8,%esp
  0xa7569508: push   %eax
  0xa7569509: mov    %esp,%eax
  0xa756950b: shr    $0xc,%eax
  0xa756950e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7569515: cmp    %eax,%edi
  0xa7569517: je     0xa756952e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756951d: push   $0xb74acf8c
  0xa7569522: call   0xa7569527
  0xa7569527: pusha  
  0xa7569528: call   0xb6ff5f32
  0xa756952d: hlt    
  0xa756952e: pop    %eax
  0xa756952f: movl   $0x0,0x140(%edi)
  0xa7569539: movl   $0x0,0x148(%edi)
  0xa7569543: movl   $0x0,0x144(%edi)
  0xa756954d: cmpl   $0x0,0x4(%edi)
  0xa7569554: jne    0xa7556400
  0xa756955a: mov    -0x1c(%ebp),%esi
  0xa756955d: mov    -0x18(%ebp),%edi
  0xa7569560: ret    
  0xa7569561: mov    -0xc(%ebp),%ebx
  0xa7569564: mov    0x3c(%ebx),%eax
  0xa7569567: mov    %esp,%edi
  0xa7569569: shr    $0xc,%edi
  0xa756956c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7569573: lea    0x150(%edi),%ecx
  0xa7569579: mov    %ecx,(%esp)
  0xa756957c: mov    %ebp,0x148(%edi)
  0xa7569582: movl   $0xa756957c,0x144(%edi)
  0xa756958c: mov    %esp,0x140(%edi)
  0xa7569592: mov    0x18c(%edi),%ecx
  0xa7569598: cmp    $0x8,%ecx
  0xa756959b: je     0xa75695b2
  0xa75695a1: push   $0xb7562514
  0xa75695a6: call   0xa75695ab
  0xa75695ab: pusha  
  0xa75695ac: call   0xb6ff5f32
  0xa75695b1: hlt    
  0xa75695b2: movl   $0x4,0x18c(%edi)
  0xa75695bc: call   *%eax
  0xa75695be: vzeroupper 
  0xa75695c1: cmpl   $0xa75629da,0xc(%ebp)
  0xa75695c8: je     0xa75695db
  0xa75695ce: cmpl   $0xa75629eb,0xc(%ebp)
  0xa75695d5: jne    0xa75695e1
  0xa75695db: sub    $0x8,%esp
  0xa75695de: fstpl  (%esp)
  0xa75695e1: push   %edx
  0xa75695e2: push   %eax
  0xa75695e3: mov    %esp,%edi
  0xa75695e5: shr    $0xc,%edi
  0xa75695e8: mov    -0x4871aba0(,%edi,4),%edi
  0xa75695ef: movl   $0x5,0x18c(%edi)
  0xa75695f9: mov    %edi,%ecx
  0xa75695fb: shr    $0x3,%ecx
  0xa75695fe: and    $0xffc,%ecx
  0xa7569604: mov    %ecx,-0x48137000(,%ecx,1)
  0xa756960b: cmpl   $0x0,0xb78cefa0
  0xa7569615: jne    0xa7569628
  0xa756961b: cmpl   $0x0,0x18(%edi)
  0xa7569622: je     0xa756963d
  0xa7569628: push   %edi
  0xa7569629: call   0xb720cf66
  0xa756962e: add    $0x4,%esp
  0xa7569631: mov    %esp,%edi
  0xa7569633: shr    $0xc,%edi
  0xa7569636: mov    -0x4871aba0(,%edi,4),%edi
  0xa756963d: movl   $0x8,0x18c(%edi)
  0xa7569647: movl   $0x0,0x140(%edi)
  0xa7569651: movl   $0x0,0x148(%edi)
  0xa756965b: movl   $0x0,0x144(%edi)
  0xa7569665: mov    0x20(%edi),%ecx
  0xa7569668: movl   $0x0,0x84(%ecx)
  0xa7569672: cmpl   $0xa75629f6,0xc(%ebp)
  0xa7569679: jne    0xa75696aa
  0xa756967f: cmpl   $0x0,(%esp)
  0xa7569686: pop    %eax
  0xa7569687: pop    %edx
  0xa7569688: test   %eax,%eax
  0xa756968a: je     0xa75696a5
  0xa7569690: test   $0x1,%eax
  0xa7569695: je     0xa75696a3
  0xa756969b: mov    -0x1(%eax),%eax
  0xa756969e: jmp    0xa75696a5
  0xa75696a3: mov    (%eax),%eax
  0xa75696a5: mov    %eax,0x8(%ebp)
  0xa75696a8: push   %edx
  0xa75696a9: push   %eax
  0xa75696aa: cmpl   $0x1,0x1ac(%edi)
  0xa75696b4: jne    0xa75696c1
  0xa75696ba: pusha  
  0xa75696bb: call   0xb7179c2a
  0xa75696c0: popa   
  0xa75696c1: mov    -0xc(%ebp),%ebx
  0xa75696c4: mov    0x8(%ebx),%esi
  0xa75696c7: lea    0x28(%esi),%esi
  0xa75696ca: cmpl   $0x0,0x4(%edi)
  0xa75696d1: je     0xa7569791
  0xa75696d7: call   0xa75696e1
  0xa75696dc: jmp    0xa7569780
  0xa75696e1: lea    0x4(%esp),%eax
  0xa75696e5: cmpl   $0x0,-0x8(%ebp)
  0xa75696ec: je     0xa7569703
  0xa75696f2: push   $0xb7449b58
  0xa75696f7: call   0xa75696fc
  0xa75696fc: pusha  
  0xa75696fd: call   0xb6ff5f32
  0xa7569702: hlt    
  0xa7569703: mov    %esi,-0x1c(%ebp)
  0xa7569706: mov    %esp,%edi
  0xa7569708: shr    $0xc,%edi
  0xa756970b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7569712: push   %edi
  0xa7569713: mov    %ebp,0x148(%edi)
  0xa7569719: mov    %eax,0x140(%edi)
  0xa756971f: call   0xb6e5e068
  0xa7569724: add    $0x4,%esp
  0xa7569727: push   %eax
  0xa7569728: mov    %esp,%eax
  0xa756972a: shr    $0xc,%eax
  0xa756972d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7569734: cmp    %eax,%edi
  0xa7569736: je     0xa756974d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756973c: push   $0xb74acf8c
  0xa7569741: call   0xa7569746
  0xa7569746: pusha  
  0xa7569747: call   0xb6ff5f32
  0xa756974c: hlt    
  0xa756974d: pop    %eax
  0xa756974e: movl   $0x0,0x140(%edi)
  0xa7569758: movl   $0x0,0x148(%edi)
  0xa7569762: movl   $0x0,0x144(%edi)
  0xa756976c: cmpl   $0x0,0x4(%edi)
  0xa7569773: jne    0xa7556400
  0xa7569779: mov    -0x1c(%ebp),%esi
  0xa756977c: mov    -0x18(%ebp),%edi
  0xa756977f: ret    
  0xa7569780: push   $0xb7302e8b
  0xa7569785: call   0xa756978a
  0xa756978a: pusha  
  0xa756978b: call   0xb6ff5f32
  0xa7569790: hlt    
  0xa7569791: mov    0x14(%ebx),%ecx
  0xa7569794: test   $0x20,%ecx
  0xa756979a: je     0xa7569949
  0xa75697a0: lea    -0x28(%ebp),%edx
  0xa75697a3: mov    0x4(%edx),%ecx
  0xa75697a6: test   %ecx,%ecx
  0xa75697a8: jne    0xa7569868
  0xa75697ae: call   0xa75697b8
  0xa75697b3: jmp    0xa7569857
  0xa75697b8: lea    0x4(%esp),%eax
  0xa75697bc: cmpl   $0x0,-0x8(%ebp)
  0xa75697c3: je     0xa75697da
  0xa75697c9: push   $0xb7449b58
  0xa75697ce: call   0xa75697d3
  0xa75697d3: pusha  
  0xa75697d4: call   0xb6ff5f32
  0xa75697d9: hlt    
  0xa75697da: mov    %esi,-0x1c(%ebp)
  0xa75697dd: mov    %esp,%edi
  0xa75697df: shr    $0xc,%edi
  0xa75697e2: mov    -0x4871aba0(,%edi,4),%edi
  0xa75697e9: push   %edi
  0xa75697ea: mov    %ebp,0x148(%edi)
  0xa75697f0: mov    %eax,0x140(%edi)
  0xa75697f6: call   0xb6e5f012
  0xa75697fb: add    $0x4,%esp
  0xa75697fe: push   %eax
  0xa75697ff: mov    %esp,%eax
  0xa7569801: shr    $0xc,%eax
  0xa7569804: mov    -0x4871aba0(,%eax,4),%eax
  0xa756980b: cmp    %eax,%edi
  0xa756980d: je     0xa7569824
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7569813: push   $0xb74acf8c
  0xa7569818: call   0xa756981d
  0xa756981d: pusha  
  0xa756981e: call   0xb6ff5f32
  0xa7569823: hlt    
  0xa7569824: pop    %eax
  0xa7569825: movl   $0x0,0x140(%edi)
  0xa756982f: movl   $0x0,0x148(%edi)
  0xa7569839: movl   $0x0,0x144(%edi)
  0xa7569843: cmpl   $0x0,0x4(%edi)
  0xa756984a: jne    0xa7556400
  0xa7569850: mov    -0x1c(%ebp),%esi
  0xa7569853: mov    -0x18(%ebp),%edi
  0xa7569856: ret    
  0xa7569857: push   $0xb7302e8b
  0xa756985c: call   0xa7569861
  0xa7569861: pusha  
  0xa7569862: call   0xb6ff5f32
  0xa7569867: hlt    
  0xa7569868: mov    %esi,-0x1c(%ebp)
  0xa756986b: lea    (%edx),%eax
  0xa756986d: mov    0x4(%edx),%ecx
  0xa7569870: movl   $0x0,0x4(%edx)
  0xa7569877: mov    (%ecx),%ebx
  0xa7569879: and    $0x7,%ebx
  0xa756987c: cmp    $0x5,%ebx
  0xa756987f: je     0xa7569946
  0xa7569885: mov    (%eax),%ebx
  0xa7569887: test   %ebx,%ebx
  0xa7569889: je     0xa7569946
  0xa756988f: lock cmpxchg %ebx,(%ecx)
  0xa7569893: je     0xa7569946
  0xa7569899: mov    %ecx,0x4(%edx)
  0xa756989c: call   0xa75698a6
  0xa75698a1: jmp    0xa7569946
  0xa75698a6: push   %edx
  0xa75698a7: lea    0x8(%esp),%eax
  0xa75698ab: cmpl   $0x0,-0x8(%ebp)
  0xa75698b2: je     0xa75698c9
  0xa75698b8: push   $0xb7449b58
  0xa75698bd: call   0xa75698c2
  0xa75698c2: pusha  
  0xa75698c3: call   0xb6ff5f32
  0xa75698c8: hlt    
  0xa75698c9: mov    %esi,-0x1c(%ebp)
  0xa75698cc: mov    %esp,%edi
  0xa75698ce: shr    $0xc,%edi
  0xa75698d1: mov    -0x4871aba0(,%edi,4),%edi
  0xa75698d8: push   %edi
  0xa75698d9: mov    %ebp,0x148(%edi)
  0xa75698df: mov    %eax,0x140(%edi)
  0xa75698e5: call   0xb6e5ed36
  0xa75698ea: add    $0x8,%esp
  0xa75698ed: push   %eax
  0xa75698ee: mov    %esp,%eax
  0xa75698f0: shr    $0xc,%eax
  0xa75698f3: mov    -0x4871aba0(,%eax,4),%eax
  0xa75698fa: cmp    %eax,%edi
  0xa75698fc: je     0xa7569913
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7569902: push   $0xb74acf8c
  0xa7569907: call   0xa756990c
  0xa756990c: pusha  
  0xa756990d: call   0xb6ff5f32
  0xa7569912: hlt    
  0xa7569913: pop    %eax
  0xa7569914: movl   $0x0,0x140(%edi)
  0xa756991e: movl   $0x0,0x148(%edi)
  0xa7569928: movl   $0x0,0x144(%edi)
  0xa7569932: cmpl   $0x0,0x4(%edi)
  0xa7569939: jne    0xa7556400
  0xa756993f: mov    -0x1c(%ebp),%esi
  0xa7569942: mov    -0x18(%ebp),%edi
  0xa7569945: ret    
  0xa7569946: mov    -0x1c(%ebp),%esi
  0xa7569949: cmpb   $0x0,0xb78c1e7e
  0xa7569950: je     0xa756998d
  0xa7569956: mov    %esp,%ebx
  0xa7569958: shr    $0xc,%ebx
  0xa756995b: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7569962: mov    -0xc(%ebp),%ecx
  0xa7569965: push   %ecx
  0xa7569966: push   %ebx
  0xa7569967: cmpl   $0x0,-0x8(%ebp)
  0xa756996e: je     0xa7569985
  0xa7569974: push   $0xb7449b18
  0xa7569979: call   0xa756997e
  0xa756997e: pusha  
  0xa756997f: call   0xb6ff5f32
  0xa7569984: hlt    
  0xa7569985: call   0xb7175974
  0xa756998a: add    $0x8,%esp
  0xa756998d: pop    %eax
  0xa756998e: pop    %edx
  0xa756998f: mov    0xc(%ebp),%ecx
  0xa7569992: call   *%ecx
  0xa7569994: mov    -0x4(%ebp),%ecx
  0xa7569997: mov    %ebp,%esp
  0xa7569999: pop    %ebp
  0xa756999a: pop    %edi
  0xa756999b: mov    %ecx,%esp
  0xa756999d: jmp    *%edi
  0xa756999f: mov    $0x0,%eax
  0xa75699a4: call   0xa75699ae
  0xa75699a9: jmp    0xa7569a4e
  0xa75699ae: push   %eax
  0xa75699af: lea    0x8(%esp),%eax
  0xa75699b3: cmpl   $0x0,-0x8(%ebp)
  0xa75699ba: je     0xa75699d1
  0xa75699c0: push   $0xb7449b58
  0xa75699c5: call   0xa75699ca
  0xa75699ca: pusha  
  0xa75699cb: call   0xb6ff5f32
  0xa75699d0: hlt    
  0xa75699d1: mov    %esi,-0x1c(%ebp)
  0xa75699d4: mov    %esp,%edi
  0xa75699d6: shr    $0xc,%edi
  0xa75699d9: mov    -0x4871aba0(,%edi,4),%edi
  0xa75699e0: push   %edi
  0xa75699e1: mov    %ebp,0x148(%edi)
  0xa75699e7: mov    %eax,0x140(%edi)
  0xa75699ed: call   0xb6e60bc8
  0xa75699f2: add    $0x8,%esp
  0xa75699f5: push   %eax
  0xa75699f6: mov    %esp,%eax
  0xa75699f8: shr    $0xc,%eax
  0xa75699fb: mov    -0x4871aba0(,%eax,4),%eax
  0xa7569a02: cmp    %eax,%edi
  0xa7569a04: je     0xa7569a1b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7569a0a: push   $0xb74acf8c
  0xa7569a0f: call   0xa7569a14
  0xa7569a14: pusha  
  0xa7569a15: call   0xb6ff5f32
  0xa7569a1a: hlt    
  0xa7569a1b: pop    %eax
  0xa7569a1c: movl   $0x0,0x140(%edi)
  0xa7569a26: movl   $0x0,0x148(%edi)
  0xa7569a30: movl   $0x0,0x144(%edi)
  0xa7569a3a: cmpl   $0x0,0x4(%edi)
  0xa7569a41: jne    0xa7556400
  0xa7569a47: mov    -0x1c(%ebp),%esi
  0xa7569a4a: mov    -0x18(%ebp),%edi
  0xa7569a4d: ret    
  0xa7569a4e: mov    -0xc(%ebp),%ebx
  0xa7569a51: jmp    0xa756917b
  0xa7569a56: nop
  0xa7569a57: nop
  0xa7569a58: int3   
  0xa7569a59: int3   
  0xa7569a5a: int3   
  0xa7569a5b: int3   
  0xa7569a5c: int3   
  0xa7569a5d: int3   
  0xa7569a5e: int3   
  0xa7569a5f: int3   

----------------------------------------------------------------------
nop  0 nop  [0xa7569a80, 0xa7569ac0]  64 bytes

  0xa7569a80: sub    $0x4,%esp
  0xa7569a83: fstps  (%esp)
  0xa7569a86: jmp    0xa7569aa4
  0xa7569a8b: sub    $0x8,%esp
  0xa7569a8e: fstpl  (%esp)
  0xa7569a91: jmp    0xa7569aa4
  0xa7569a96: push   %edx
  0xa7569a97: push   %eax
  0xa7569a98: jmp    0xa7569aa4
  0xa7569a9d: push   %eax
  0xa7569a9e: jmp    0xa7569aa4
  0xa7569aa3: push   %eax
  0xa7569aa4: movzbl 0x1(%esi),%ebx
  0xa7569aa8: inc    %esi
  0xa7569aa9: jmp    *-0x48722ae0(,%ebx,4)
  0xa7569ab0: int3   
  0xa7569ab1: int3   
  0xa7569ab2: int3   
  0xa7569ab3: int3   
  0xa7569ab4: int3   
  0xa7569ab5: int3   
  0xa7569ab6: int3   
  0xa7569ab7: int3   
  0xa7569ab8: int3   
  0xa7569ab9: int3   
  0xa7569aba: int3   
  0xa7569abb: int3   
  0xa7569abc: int3   
  0xa7569abd: int3   
  0xa7569abe: int3   
  0xa7569abf: int3   

----------------------------------------------------------------------
aconst_null  1 aconst_null  [0xa7569ae0, 0xa7569b20]  64 bytes

  0xa7569ae0: sub    $0x4,%esp
  0xa7569ae3: fstps  (%esp)
  0xa7569ae6: jmp    0xa7569b04
  0xa7569aeb: sub    $0x8,%esp
  0xa7569aee: fstpl  (%esp)
  0xa7569af1: jmp    0xa7569b04
  0xa7569af6: push   %edx
  0xa7569af7: push   %eax
  0xa7569af8: jmp    0xa7569b04
  0xa7569afd: push   %eax
  0xa7569afe: jmp    0xa7569b04
  0xa7569b03: push   %eax
  0xa7569b04: xor    %eax,%eax
  0xa7569b06: movzbl 0x1(%esi),%ebx
  0xa7569b0a: inc    %esi
  0xa7569b0b: jmp    *-0x48722ee0(,%ebx,4)
  0xa7569b12: nop
  0xa7569b13: nop
  0xa7569b14: int3   
  0xa7569b15: int3   
  0xa7569b16: int3   
  0xa7569b17: int3   
  0xa7569b18: int3   
  0xa7569b19: int3   
  0xa7569b1a: int3   
  0xa7569b1b: int3   
  0xa7569b1c: int3   
  0xa7569b1d: int3   
  0xa7569b1e: int3   
  0xa7569b1f: int3   

----------------------------------------------------------------------
iconst_m1  2 iconst_m1  [0xa7569b40, 0xa7569b80]  64 bytes

  0xa7569b40: sub    $0x4,%esp
  0xa7569b43: fstps  (%esp)
  0xa7569b46: jmp    0xa7569b64
  0xa7569b4b: sub    $0x8,%esp
  0xa7569b4e: fstpl  (%esp)
  0xa7569b51: jmp    0xa7569b64
  0xa7569b56: push   %edx
  0xa7569b57: push   %eax
  0xa7569b58: jmp    0xa7569b64
  0xa7569b5d: push   %eax
  0xa7569b5e: jmp    0xa7569b64
  0xa7569b63: push   %eax
  0xa7569b64: mov    $0xffffffff,%eax
  0xa7569b69: movzbl 0x1(%esi),%ebx
  0xa7569b6d: inc    %esi
  0xa7569b6e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7569b75: nop
  0xa7569b76: nop
  0xa7569b77: nop
  0xa7569b78: int3   
  0xa7569b79: int3   
  0xa7569b7a: int3   
  0xa7569b7b: int3   
  0xa7569b7c: int3   
  0xa7569b7d: int3   
  0xa7569b7e: int3   
  0xa7569b7f: int3   

----------------------------------------------------------------------
iconst_0  3 iconst_0  [0xa7569ba0, 0xa7569be0]  64 bytes

  0xa7569ba0: sub    $0x4,%esp
  0xa7569ba3: fstps  (%esp)
  0xa7569ba6: jmp    0xa7569bc4
  0xa7569bab: sub    $0x8,%esp
  0xa7569bae: fstpl  (%esp)
  0xa7569bb1: jmp    0xa7569bc4
  0xa7569bb6: push   %edx
  0xa7569bb7: push   %eax
  0xa7569bb8: jmp    0xa7569bc4
  0xa7569bbd: push   %eax
  0xa7569bbe: jmp    0xa7569bc4
  0xa7569bc3: push   %eax
  0xa7569bc4: xor    %eax,%eax
  0xa7569bc6: movzbl 0x1(%esi),%ebx
  0xa7569bca: inc    %esi
  0xa7569bcb: jmp    *-0x48723ee0(,%ebx,4)
  0xa7569bd2: nop
  0xa7569bd3: nop
  0xa7569bd4: int3   
  0xa7569bd5: int3   
  0xa7569bd6: int3   
  0xa7569bd7: int3   
  0xa7569bd8: int3   
  0xa7569bd9: int3   
  0xa7569bda: int3   
  0xa7569bdb: int3   
  0xa7569bdc: int3   
  0xa7569bdd: int3   
  0xa7569bde: int3   
  0xa7569bdf: int3   

----------------------------------------------------------------------
iconst_1  4 iconst_1  [0xa7569c00, 0xa7569c40]  64 bytes

  0xa7569c00: sub    $0x4,%esp
  0xa7569c03: fstps  (%esp)
  0xa7569c06: jmp    0xa7569c24
  0xa7569c0b: sub    $0x8,%esp
  0xa7569c0e: fstpl  (%esp)
  0xa7569c11: jmp    0xa7569c24
  0xa7569c16: push   %edx
  0xa7569c17: push   %eax
  0xa7569c18: jmp    0xa7569c24
  0xa7569c1d: push   %eax
  0xa7569c1e: jmp    0xa7569c24
  0xa7569c23: push   %eax
  0xa7569c24: mov    $0x1,%eax
  0xa7569c29: movzbl 0x1(%esi),%ebx
  0xa7569c2d: inc    %esi
  0xa7569c2e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7569c35: nop
  0xa7569c36: nop
  0xa7569c37: nop
  0xa7569c38: int3   
  0xa7569c39: int3   
  0xa7569c3a: int3   
  0xa7569c3b: int3   
  0xa7569c3c: int3   
  0xa7569c3d: int3   
  0xa7569c3e: int3   
  0xa7569c3f: int3   

----------------------------------------------------------------------
iconst_2  5 iconst_2  [0xa7569c60, 0xa7569ca0]  64 bytes

  0xa7569c60: sub    $0x4,%esp
  0xa7569c63: fstps  (%esp)
  0xa7569c66: jmp    0xa7569c84
  0xa7569c6b: sub    $0x8,%esp
  0xa7569c6e: fstpl  (%esp)
  0xa7569c71: jmp    0xa7569c84
  0xa7569c76: push   %edx
  0xa7569c77: push   %eax
  0xa7569c78: jmp    0xa7569c84
  0xa7569c7d: push   %eax
  0xa7569c7e: jmp    0xa7569c84
  0xa7569c83: push   %eax
  0xa7569c84: mov    $0x2,%eax
  0xa7569c89: movzbl 0x1(%esi),%ebx
  0xa7569c8d: inc    %esi
  0xa7569c8e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7569c95: nop
  0xa7569c96: nop
  0xa7569c97: nop
  0xa7569c98: int3   
  0xa7569c99: int3   
  0xa7569c9a: int3   
  0xa7569c9b: int3   
  0xa7569c9c: int3   
  0xa7569c9d: int3   
  0xa7569c9e: int3   
  0xa7569c9f: int3   

----------------------------------------------------------------------
iconst_3  6 iconst_3  [0xa7569cc0, 0xa7569d00]  64 bytes

  0xa7569cc0: sub    $0x4,%esp
  0xa7569cc3: fstps  (%esp)
  0xa7569cc6: jmp    0xa7569ce4
  0xa7569ccb: sub    $0x8,%esp
  0xa7569cce: fstpl  (%esp)
  0xa7569cd1: jmp    0xa7569ce4
  0xa7569cd6: push   %edx
  0xa7569cd7: push   %eax
  0xa7569cd8: jmp    0xa7569ce4
  0xa7569cdd: push   %eax
  0xa7569cde: jmp    0xa7569ce4
  0xa7569ce3: push   %eax
  0xa7569ce4: mov    $0x3,%eax
  0xa7569ce9: movzbl 0x1(%esi),%ebx
  0xa7569ced: inc    %esi
  0xa7569cee: jmp    *-0x48723ee0(,%ebx,4)
  0xa7569cf5: nop
  0xa7569cf6: nop
  0xa7569cf7: nop
  0xa7569cf8: int3   
  0xa7569cf9: int3   
  0xa7569cfa: int3   
  0xa7569cfb: int3   
  0xa7569cfc: int3   
  0xa7569cfd: int3   
  0xa7569cfe: int3   
  0xa7569cff: int3   

----------------------------------------------------------------------
iconst_4  7 iconst_4  [0xa7569d20, 0xa7569d60]  64 bytes

  0xa7569d20: sub    $0x4,%esp
  0xa7569d23: fstps  (%esp)
  0xa7569d26: jmp    0xa7569d44
  0xa7569d2b: sub    $0x8,%esp
  0xa7569d2e: fstpl  (%esp)
  0xa7569d31: jmp    0xa7569d44
  0xa7569d36: push   %edx
  0xa7569d37: push   %eax
  0xa7569d38: jmp    0xa7569d44
  0xa7569d3d: push   %eax
  0xa7569d3e: jmp    0xa7569d44
  0xa7569d43: push   %eax
  0xa7569d44: mov    $0x4,%eax
  0xa7569d49: movzbl 0x1(%esi),%ebx
  0xa7569d4d: inc    %esi
  0xa7569d4e: jmp    *-0x48723ee0(,%ebx,4)
  0xa7569d55: nop
  0xa7569d56: nop
  0xa7569d57: nop
  0xa7569d58: int3   
  0xa7569d59: int3   
  0xa7569d5a: int3   
  0xa7569d5b: int3   
  0xa7569d5c: int3   
  0xa7569d5d: int3   
  0xa7569d5e: int3   
  0xa7569d5f: int3   

----------------------------------------------------------------------
iconst_5  8 iconst_5  [0xa7569d80, 0xa7569dc0]  64 bytes

  0xa7569d80: sub    $0x4,%esp
  0xa7569d83: fstps  (%esp)
  0xa7569d86: jmp    0xa7569da4
  0xa7569d8b: sub    $0x8,%esp
  0xa7569d8e: fstpl  (%esp)
  0xa7569d91: jmp    0xa7569da4
  0xa7569d96: push   %edx
  0xa7569d97: push   %eax
  0xa7569d98: jmp    0xa7569da4
  0xa7569d9d: push   %eax
  0xa7569d9e: jmp    0xa7569da4
  0xa7569da3: push   %eax
  0xa7569da4: mov    $0x5,%eax
  0xa7569da9: movzbl 0x1(%esi),%ebx
  0xa7569dad: inc    %esi
  0xa7569dae: jmp    *-0x48723ee0(,%ebx,4)
  0xa7569db5: nop
  0xa7569db6: nop
  0xa7569db7: nop
  0xa7569db8: int3   
  0xa7569db9: int3   
  0xa7569dba: int3   
  0xa7569dbb: int3   
  0xa7569dbc: int3   
  0xa7569dbd: int3   
  0xa7569dbe: int3   
  0xa7569dbf: int3   

----------------------------------------------------------------------
lconst_0  9 lconst_0  [0xa7569de0, 0xa7569e20]  64 bytes

  0xa7569de0: sub    $0x4,%esp
  0xa7569de3: fstps  (%esp)
  0xa7569de6: jmp    0xa7569e04
  0xa7569deb: sub    $0x8,%esp
  0xa7569dee: fstpl  (%esp)
  0xa7569df1: jmp    0xa7569e04
  0xa7569df6: push   %edx
  0xa7569df7: push   %eax
  0xa7569df8: jmp    0xa7569e04
  0xa7569dfd: push   %eax
  0xa7569dfe: jmp    0xa7569e04
  0xa7569e03: push   %eax
  0xa7569e04: xor    %eax,%eax
  0xa7569e06: xor    %edx,%edx
  0xa7569e08: movzbl 0x1(%esi),%ebx
  0xa7569e0c: inc    %esi
  0xa7569e0d: jmp    *-0x48723ae0(,%ebx,4)
  0xa7569e14: int3   
  0xa7569e15: int3   
  0xa7569e16: int3   
  0xa7569e17: int3   
  0xa7569e18: int3   
  0xa7569e19: int3   
  0xa7569e1a: int3   
  0xa7569e1b: int3   
  0xa7569e1c: int3   
  0xa7569e1d: int3   
  0xa7569e1e: int3   
  0xa7569e1f: int3   

----------------------------------------------------------------------
lconst_1  10 lconst_1  [0xa7569e40, 0xa7569e80]  64 bytes

  0xa7569e40: sub    $0x4,%esp
  0xa7569e43: fstps  (%esp)
  0xa7569e46: jmp    0xa7569e64
  0xa7569e4b: sub    $0x8,%esp
  0xa7569e4e: fstpl  (%esp)
  0xa7569e51: jmp    0xa7569e64
  0xa7569e56: push   %edx
  0xa7569e57: push   %eax
  0xa7569e58: jmp    0xa7569e64
  0xa7569e5d: push   %eax
  0xa7569e5e: jmp    0xa7569e64
  0xa7569e63: push   %eax
  0xa7569e64: mov    $0x1,%eax
  0xa7569e69: xor    %edx,%edx
  0xa7569e6b: movzbl 0x1(%esi),%ebx
  0xa7569e6f: inc    %esi
  0xa7569e70: jmp    *-0x48723ae0(,%ebx,4)
  0xa7569e77: nop
  0xa7569e78: int3   
  0xa7569e79: int3   
  0xa7569e7a: int3   
  0xa7569e7b: int3   
  0xa7569e7c: int3   
  0xa7569e7d: int3   
  0xa7569e7e: int3   
  0xa7569e7f: int3   

----------------------------------------------------------------------
fconst_0  11 fconst_0  [0xa7569ea0, 0xa7569ee0]  64 bytes

  0xa7569ea0: sub    $0x4,%esp
  0xa7569ea3: fstps  (%esp)
  0xa7569ea6: jmp    0xa7569ec4
  0xa7569eab: sub    $0x8,%esp
  0xa7569eae: fstpl  (%esp)
  0xa7569eb1: jmp    0xa7569ec4
  0xa7569eb6: push   %edx
  0xa7569eb7: push   %eax
  0xa7569eb8: jmp    0xa7569ec4
  0xa7569ebd: push   %eax
  0xa7569ebe: jmp    0xa7569ec4
  0xa7569ec3: push   %eax
  0xa7569ec4: fldz   
  0xa7569ec6: movzbl 0x1(%esi),%ebx
  0xa7569eca: inc    %esi
  0xa7569ecb: jmp    *-0x487236e0(,%ebx,4)
  0xa7569ed2: nop
  0xa7569ed3: nop
  0xa7569ed4: int3   
  0xa7569ed5: int3   
  0xa7569ed6: int3   
  0xa7569ed7: int3   
  0xa7569ed8: int3   
  0xa7569ed9: int3   
  0xa7569eda: int3   
  0xa7569edb: int3   
  0xa7569edc: int3   
  0xa7569edd: int3   
  0xa7569ede: int3   
  0xa7569edf: int3   

----------------------------------------------------------------------
fconst_1  12 fconst_1  [0xa7569f00, 0xa7569f40]  64 bytes

  0xa7569f00: sub    $0x4,%esp
  0xa7569f03: fstps  (%esp)
  0xa7569f06: jmp    0xa7569f24
  0xa7569f0b: sub    $0x8,%esp
  0xa7569f0e: fstpl  (%esp)
  0xa7569f11: jmp    0xa7569f24
  0xa7569f16: push   %edx
  0xa7569f17: push   %eax
  0xa7569f18: jmp    0xa7569f24
  0xa7569f1d: push   %eax
  0xa7569f1e: jmp    0xa7569f24
  0xa7569f23: push   %eax
  0xa7569f24: fld1   
  0xa7569f26: movzbl 0x1(%esi),%ebx
  0xa7569f2a: inc    %esi
  0xa7569f2b: jmp    *-0x487236e0(,%ebx,4)
  0xa7569f32: nop
  0xa7569f33: nop
  0xa7569f34: int3   
  0xa7569f35: int3   
  0xa7569f36: int3   
  0xa7569f37: int3   
  0xa7569f38: int3   
  0xa7569f39: int3   
  0xa7569f3a: int3   
  0xa7569f3b: int3   
  0xa7569f3c: int3   
  0xa7569f3d: int3   
  0xa7569f3e: int3   
  0xa7569f3f: int3   

----------------------------------------------------------------------
fconst_2  13 fconst_2  [0xa7569f60, 0xa7569fa0]  64 bytes

  0xa7569f60: sub    $0x4,%esp
  0xa7569f63: fstps  (%esp)
  0xa7569f66: jmp    0xa7569f84
  0xa7569f6b: sub    $0x8,%esp
  0xa7569f6e: fstpl  (%esp)
  0xa7569f71: jmp    0xa7569f84
  0xa7569f76: push   %edx
  0xa7569f77: push   %eax
  0xa7569f78: jmp    0xa7569f84
  0xa7569f7d: push   %eax
  0xa7569f7e: jmp    0xa7569f84
  0xa7569f83: push   %eax
  0xa7569f84: fld1   
  0xa7569f86: fld1   
  0xa7569f88: faddp  %st,%st(1)
  0xa7569f8a: movzbl 0x1(%esi),%ebx
  0xa7569f8e: inc    %esi
  0xa7569f8f: jmp    *-0x487236e0(,%ebx,4)
  0xa7569f96: nop
  0xa7569f97: nop
  0xa7569f98: int3   
  0xa7569f99: int3   
  0xa7569f9a: int3   
  0xa7569f9b: int3   
  0xa7569f9c: int3   
  0xa7569f9d: int3   
  0xa7569f9e: int3   
  0xa7569f9f: int3   

----------------------------------------------------------------------
dconst_0  14 dconst_0  [0xa7569fc0, 0xa756a000]  64 bytes

  0xa7569fc0: sub    $0x4,%esp
  0xa7569fc3: fstps  (%esp)
  0xa7569fc6: jmp    0xa7569fe4
  0xa7569fcb: sub    $0x8,%esp
  0xa7569fce: fstpl  (%esp)
  0xa7569fd1: jmp    0xa7569fe4
  0xa7569fd6: push   %edx
  0xa7569fd7: push   %eax
  0xa7569fd8: jmp    0xa7569fe4
  0xa7569fdd: push   %eax
  0xa7569fde: jmp    0xa7569fe4
  0xa7569fe3: push   %eax
  0xa7569fe4: fldz   
  0xa7569fe6: movzbl 0x1(%esi),%ebx
  0xa7569fea: inc    %esi
  0xa7569feb: jmp    *-0x487232e0(,%ebx,4)
  0xa7569ff2: nop
  0xa7569ff3: nop
  0xa7569ff4: int3   
  0xa7569ff5: int3   
  0xa7569ff6: int3   
  0xa7569ff7: int3   
  0xa7569ff8: int3   
  0xa7569ff9: int3   
  0xa7569ffa: int3   
  0xa7569ffb: int3   
  0xa7569ffc: int3   
  0xa7569ffd: int3   
  0xa7569ffe: int3   
  0xa7569fff: int3   

----------------------------------------------------------------------
dconst_1  15 dconst_1  [0xa756a020, 0xa756a060]  64 bytes

  0xa756a020: sub    $0x4,%esp
  0xa756a023: fstps  (%esp)
  0xa756a026: jmp    0xa756a044
  0xa756a02b: sub    $0x8,%esp
  0xa756a02e: fstpl  (%esp)
  0xa756a031: jmp    0xa756a044
  0xa756a036: push   %edx
  0xa756a037: push   %eax
  0xa756a038: jmp    0xa756a044
  0xa756a03d: push   %eax
  0xa756a03e: jmp    0xa756a044
  0xa756a043: push   %eax
  0xa756a044: fld1   
  0xa756a046: movzbl 0x1(%esi),%ebx
  0xa756a04a: inc    %esi
  0xa756a04b: jmp    *-0x487232e0(,%ebx,4)
  0xa756a052: nop
  0xa756a053: nop
  0xa756a054: int3   
  0xa756a055: int3   
  0xa756a056: int3   
  0xa756a057: int3   
  0xa756a058: int3   
  0xa756a059: int3   
  0xa756a05a: int3   
  0xa756a05b: int3   
  0xa756a05c: int3   
  0xa756a05d: int3   
  0xa756a05e: int3   
  0xa756a05f: int3   

----------------------------------------------------------------------
bipush  16 bipush  [0xa756a080, 0xa756a0c0]  64 bytes

  0xa756a080: sub    $0x4,%esp
  0xa756a083: fstps  (%esp)
  0xa756a086: jmp    0xa756a0a4
  0xa756a08b: sub    $0x8,%esp
  0xa756a08e: fstpl  (%esp)
  0xa756a091: jmp    0xa756a0a4
  0xa756a096: push   %edx
  0xa756a097: push   %eax
  0xa756a098: jmp    0xa756a0a4
  0xa756a09d: push   %eax
  0xa756a09e: jmp    0xa756a0a4
  0xa756a0a3: push   %eax
  0xa756a0a4: movsbl 0x1(%esi),%eax
  0xa756a0a8: movzbl 0x2(%esi),%ebx
  0xa756a0ac: add    $0x2,%esi
  0xa756a0af: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a0b6: nop
  0xa756a0b7: nop
  0xa756a0b8: int3   
  0xa756a0b9: int3   
  0xa756a0ba: int3   
  0xa756a0bb: int3   
  0xa756a0bc: int3   
  0xa756a0bd: int3   
  0xa756a0be: int3   
  0xa756a0bf: int3   

----------------------------------------------------------------------
sipush  17 sipush  [0xa756a0e0, 0xa756a120]  64 bytes

  0xa756a0e0: sub    $0x4,%esp
  0xa756a0e3: fstps  (%esp)
  0xa756a0e6: jmp    0xa756a104
  0xa756a0eb: sub    $0x8,%esp
  0xa756a0ee: fstpl  (%esp)
  0xa756a0f1: jmp    0xa756a104
  0xa756a0f6: push   %edx
  0xa756a0f7: push   %eax
  0xa756a0f8: jmp    0xa756a104
  0xa756a0fd: push   %eax
  0xa756a0fe: jmp    0xa756a104
  0xa756a103: push   %eax
  0xa756a104: movzwl 0x1(%esi),%eax
  0xa756a108: bswap  %eax
  0xa756a10a: sar    $0x10,%eax
  0xa756a10d: movzbl 0x3(%esi),%ebx
  0xa756a111: add    $0x3,%esi
  0xa756a114: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a11b: nop
  0xa756a11c: int3   
  0xa756a11d: int3   
  0xa756a11e: int3   
  0xa756a11f: int3   

----------------------------------------------------------------------
ldc  18 ldc  [0xa756a140, 0xa756a2a0]  352 bytes

  0xa756a140: sub    $0x4,%esp
  0xa756a143: fstps  (%esp)
  0xa756a146: jmp    0xa756a164
  0xa756a14b: sub    $0x8,%esp
  0xa756a14e: fstpl  (%esp)
  0xa756a151: jmp    0xa756a164
  0xa756a156: push   %edx
  0xa756a157: push   %eax
  0xa756a158: jmp    0xa756a164
  0xa756a15d: push   %eax
  0xa756a15e: jmp    0xa756a164
  0xa756a163: push   %eax
  0xa756a164: movzbl 0x1(%esi),%ebx
  0xa756a168: mov    -0xc(%ebp),%ecx
  0xa756a16b: mov    0x8(%ecx),%ecx
  0xa756a16e: mov    0x8(%ecx),%ecx
  0xa756a171: mov    0x8(%ecx),%eax
  0xa756a174: xor    %edx,%edx
  0xa756a176: mov    0x4(%eax,%ebx,1),%dl
  0xa756a17a: cmp    $0x64,%edx
  0xa756a17d: je     0xa756a18d
  0xa756a17f: cmp    $0x67,%edx
  0xa756a182: je     0xa756a18d
  0xa756a184: cmp    $0x7,%edx
  0xa756a187: jne    0xa756a252
  0xa756a18d: mov    $0x0,%ecx
  0xa756a192: call   0xa756a19c
  0xa756a197: jmp    0xa756a24c
  0xa756a19c: push   %ecx
  0xa756a19d: lea    0x8(%esp),%eax
  0xa756a1a1: cmpl   $0x0,-0x8(%ebp)
  0xa756a1a8: je     0xa756a1bf
  0xa756a1ae: push   $0xb7449b58
  0xa756a1b3: call   0xa756a1b8
  0xa756a1b8: pusha  
  0xa756a1b9: call   0xb6ff5f32
  0xa756a1be: hlt    
  0xa756a1bf: mov    %esi,-0x1c(%ebp)
  0xa756a1c2: mov    %esp,%edi
  0xa756a1c4: shr    $0xc,%edi
  0xa756a1c7: mov    -0x4871aba0(,%edi,4),%edi
  0xa756a1ce: push   %edi
  0xa756a1cf: mov    %ebp,0x148(%edi)
  0xa756a1d5: mov    %eax,0x140(%edi)
  0xa756a1db: call   0xb6e5b5e4
  0xa756a1e0: add    $0x8,%esp
  0xa756a1e3: push   %eax
  0xa756a1e4: mov    %esp,%eax
  0xa756a1e6: shr    $0xc,%eax
  0xa756a1e9: mov    -0x4871aba0(,%eax,4),%eax
  0xa756a1f0: cmp    %eax,%edi
  0xa756a1f2: je     0xa756a209
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756a1f8: push   $0xb74acf8c
  0xa756a1fd: call   0xa756a202
  0xa756a202: pusha  
  0xa756a203: call   0xb6ff5f32
  0xa756a208: hlt    
  0xa756a209: pop    %eax
  0xa756a20a: movl   $0x0,0x140(%edi)
  0xa756a214: movl   $0x0,0x148(%edi)
  0xa756a21e: movl   $0x0,0x144(%edi)
  0xa756a228: cmpl   $0x0,0x4(%edi)
  0xa756a22f: jne    0xa7556400
  0xa756a235: mov    0x170(%edi),%eax
  0xa756a23b: movl   $0x0,0x170(%edi)
  0xa756a245: mov    -0x1c(%ebp),%esi
  0xa756a248: mov    -0x18(%ebp),%edi
  0xa756a24b: ret    
  0xa756a24c: push   %eax
  0xa756a24d: jmp    0xa756a285
  0xa756a252: cmp    $0x4,%edx
  0xa756a255: jne    0xa756a266
  0xa756a257: flds   0x30(%ecx,%ebx,4)
  0xa756a25b: sub    $0x4,%esp
  0xa756a25e: fstps  (%esp)
  0xa756a261: jmp    0xa756a285
  0xa756a266: cmp    $0x3,%edx
  0xa756a269: je     0xa756a280
  0xa756a26f: push   $0xb7563661
  0xa756a274: call   0xa756a279
  0xa756a279: pusha  
  0xa756a27a: call   0xb6ff5f32
  0xa756a27f: hlt    
  0xa756a280: mov    0x30(%ecx,%ebx,4),%eax
  0xa756a284: push   %eax
  0xa756a285: movzbl 0x2(%esi),%ebx
  0xa756a289: add    $0x2,%esi
  0xa756a28c: jmp    *-0x48722ae0(,%ebx,4)
  0xa756a293: nop
  0xa756a294: int3   
  0xa756a295: int3   
  0xa756a296: int3   
  0xa756a297: int3   
  0xa756a298: int3   
  0xa756a299: int3   
  0xa756a29a: int3   
  0xa756a29b: int3   
  0xa756a29c: int3   
  0xa756a29d: int3   
  0xa756a29e: int3   
  0xa756a29f: int3   

----------------------------------------------------------------------
ldc_w  19 ldc_w  [0xa756a2c0, 0xa756a420]  352 bytes

  0xa756a2c0: sub    $0x4,%esp
  0xa756a2c3: fstps  (%esp)
  0xa756a2c6: jmp    0xa756a2e4
  0xa756a2cb: sub    $0x8,%esp
  0xa756a2ce: fstpl  (%esp)
  0xa756a2d1: jmp    0xa756a2e4
  0xa756a2d6: push   %edx
  0xa756a2d7: push   %eax
  0xa756a2d8: jmp    0xa756a2e4
  0xa756a2dd: push   %eax
  0xa756a2de: jmp    0xa756a2e4
  0xa756a2e3: push   %eax
  0xa756a2e4: movzwl 0x1(%esi),%ebx
  0xa756a2e8: bswap  %ebx
  0xa756a2ea: shr    $0x10,%ebx
  0xa756a2ed: mov    -0xc(%ebp),%ecx
  0xa756a2f0: mov    0x8(%ecx),%ecx
  0xa756a2f3: mov    0x8(%ecx),%ecx
  0xa756a2f6: mov    0x8(%ecx),%eax
  0xa756a2f9: xor    %edx,%edx
  0xa756a2fb: mov    0x4(%eax,%ebx,1),%dl
  0xa756a2ff: cmp    $0x64,%edx
  0xa756a302: je     0xa756a312
  0xa756a304: cmp    $0x67,%edx
  0xa756a307: je     0xa756a312
  0xa756a309: cmp    $0x7,%edx
  0xa756a30c: jne    0xa756a3d7
  0xa756a312: mov    $0x1,%ecx
  0xa756a317: call   0xa756a321
  0xa756a31c: jmp    0xa756a3d1
  0xa756a321: push   %ecx
  0xa756a322: lea    0x8(%esp),%eax
  0xa756a326: cmpl   $0x0,-0x8(%ebp)
  0xa756a32d: je     0xa756a344
  0xa756a333: push   $0xb7449b58
  0xa756a338: call   0xa756a33d
  0xa756a33d: pusha  
  0xa756a33e: call   0xb6ff5f32
  0xa756a343: hlt    
  0xa756a344: mov    %esi,-0x1c(%ebp)
  0xa756a347: mov    %esp,%edi
  0xa756a349: shr    $0xc,%edi
  0xa756a34c: mov    -0x4871aba0(,%edi,4),%edi
  0xa756a353: push   %edi
  0xa756a354: mov    %ebp,0x148(%edi)
  0xa756a35a: mov    %eax,0x140(%edi)
  0xa756a360: call   0xb6e5b5e4
  0xa756a365: add    $0x8,%esp
  0xa756a368: push   %eax
  0xa756a369: mov    %esp,%eax
  0xa756a36b: shr    $0xc,%eax
  0xa756a36e: mov    -0x4871aba0(,%eax,4),%eax
  0xa756a375: cmp    %eax,%edi
  0xa756a377: je     0xa756a38e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756a37d: push   $0xb74acf8c
  0xa756a382: call   0xa756a387
  0xa756a387: pusha  
  0xa756a388: call   0xb6ff5f32
  0xa756a38d: hlt    
  0xa756a38e: pop    %eax
  0xa756a38f: movl   $0x0,0x140(%edi)
  0xa756a399: movl   $0x0,0x148(%edi)
  0xa756a3a3: movl   $0x0,0x144(%edi)
  0xa756a3ad: cmpl   $0x0,0x4(%edi)
  0xa756a3b4: jne    0xa7556400
  0xa756a3ba: mov    0x170(%edi),%eax
  0xa756a3c0: movl   $0x0,0x170(%edi)
  0xa756a3ca: mov    -0x1c(%ebp),%esi
  0xa756a3cd: mov    -0x18(%ebp),%edi
  0xa756a3d0: ret    
  0xa756a3d1: push   %eax
  0xa756a3d2: jmp    0xa756a40a
  0xa756a3d7: cmp    $0x4,%edx
  0xa756a3da: jne    0xa756a3eb
  0xa756a3dc: flds   0x30(%ecx,%ebx,4)
  0xa756a3e0: sub    $0x4,%esp
  0xa756a3e3: fstps  (%esp)
  0xa756a3e6: jmp    0xa756a40a
  0xa756a3eb: cmp    $0x3,%edx
  0xa756a3ee: je     0xa756a405
  0xa756a3f4: push   $0xb7563661
  0xa756a3f9: call   0xa756a3fe
  0xa756a3fe: pusha  
  0xa756a3ff: call   0xb6ff5f32
  0xa756a404: hlt    
  0xa756a405: mov    0x30(%ecx,%ebx,4),%eax
  0xa756a409: push   %eax
  0xa756a40a: movzbl 0x3(%esi),%ebx
  0xa756a40e: add    $0x3,%esi
  0xa756a411: jmp    *-0x48722ae0(,%ebx,4)
  0xa756a418: int3   
  0xa756a419: int3   
  0xa756a41a: int3   
  0xa756a41b: int3   
  0xa756a41c: int3   
  0xa756a41d: int3   
  0xa756a41e: int3   
  0xa756a41f: int3   

----------------------------------------------------------------------
ldc2_w  20 ldc2_w  [0xa756a440, 0xa756a4c0]  128 bytes

  0xa756a440: sub    $0x4,%esp
  0xa756a443: fstps  (%esp)
  0xa756a446: jmp    0xa756a464
  0xa756a44b: sub    $0x8,%esp
  0xa756a44e: fstpl  (%esp)
  0xa756a451: jmp    0xa756a464
  0xa756a456: push   %edx
  0xa756a457: push   %eax
  0xa756a458: jmp    0xa756a464
  0xa756a45d: push   %eax
  0xa756a45e: jmp    0xa756a464
  0xa756a463: push   %eax
  0xa756a464: movzwl 0x1(%esi),%ebx
  0xa756a468: bswap  %ebx
  0xa756a46a: shr    $0x10,%ebx
  0xa756a46d: mov    -0xc(%ebp),%ecx
  0xa756a470: mov    0x8(%ecx),%ecx
  0xa756a473: mov    0x8(%ecx),%ecx
  0xa756a476: mov    0x8(%ecx),%eax
  0xa756a479: cmpb   $0x6,0x4(%eax,%ebx,1)
  0xa756a47e: jne    0xa756a48c
  0xa756a480: fldl   0x30(%ecx,%ebx,4)
  0xa756a484: sub    $0x8,%esp
  0xa756a487: fstpl  (%esp)
  0xa756a48a: jmp    0xa756a496
  0xa756a48c: mov    0x30(%ecx,%ebx,4),%eax
  0xa756a490: mov    0x34(%ecx,%ebx,4),%edx
  0xa756a494: push   %edx
  0xa756a495: push   %eax
  0xa756a496: movzbl 0x3(%esi),%ebx
  0xa756a49a: add    $0x3,%esi
  0xa756a49d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756a4a4: int3   
  0xa756a4a5: int3   
  0xa756a4a6: int3   
  0xa756a4a7: int3   
  0xa756a4a8: int3   
  0xa756a4a9: int3   
  0xa756a4aa: int3   
  0xa756a4ab: int3   
  0xa756a4ac: int3   
  0xa756a4ad: int3   
  0xa756a4ae: int3   
  0xa756a4af: int3   
  0xa756a4b0: int3   
  0xa756a4b1: int3   
  0xa756a4b2: int3   
  0xa756a4b3: int3   
  0xa756a4b4: int3   
  0xa756a4b5: int3   
  0xa756a4b6: int3   
  0xa756a4b7: int3   
  0xa756a4b8: int3   
  0xa756a4b9: int3   
  0xa756a4ba: int3   
  0xa756a4bb: int3   
  0xa756a4bc: int3   
  0xa756a4bd: int3   
  0xa756a4be: int3   
  0xa756a4bf: int3   

----------------------------------------------------------------------
iload  21 iload  [0xa756a4e0, 0xa756a5a0]  192 bytes

  0xa756a4e0: sub    $0x4,%esp
  0xa756a4e3: fstps  (%esp)
  0xa756a4e6: jmp    0xa756a504
  0xa756a4eb: sub    $0x8,%esp
  0xa756a4ee: fstpl  (%esp)
  0xa756a4f1: jmp    0xa756a504
  0xa756a4f6: push   %edx
  0xa756a4f7: push   %eax
  0xa756a4f8: jmp    0xa756a504
  0xa756a4fd: push   %eax
  0xa756a4fe: jmp    0xa756a504
  0xa756a503: push   %eax
  0xa756a504: movzbl 0x2(%esi),%ebx
  0xa756a508: cmp    $0x15,%ebx
  0xa756a50b: je     0xa756a550
  0xa756a511: cmp    $0xe0,%ebx
  0xa756a517: mov    $0xe1,%ecx
  0xa756a51c: je     0xa756a52d
  0xa756a51e: cmp    $0x34,%ebx
  0xa756a521: mov    $0xe2,%ecx
  0xa756a526: je     0xa756a52d
  0xa756a528: mov    $0xe0,%ecx
  0xa756a52d: movzbl (%esi),%ebx
  0xa756a530: cmp    $0x15,%ebx
  0xa756a533: je     0xa756a54e
  0xa756a535: cmp    %ecx,%ebx
  0xa756a537: je     0xa756a54e
  0xa756a53d: push   $0xb75635ff
  0xa756a542: call   0xa756a547
  0xa756a547: pusha  
  0xa756a548: call   0xb6ff5f32
  0xa756a54d: hlt    
  0xa756a54e: mov    %cl,(%esi)
  0xa756a550: movzbl 0x1(%esi),%ebx
  0xa756a554: neg    %ebx
  0xa756a556: mov    (%edi,%ebx,4),%eax
  0xa756a559: movzbl 0x2(%esi),%ebx
  0xa756a55d: add    $0x2,%esi
  0xa756a560: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a567: movzwl 0x2(%esi),%ebx
  0xa756a56b: bswap  %ebx
  0xa756a56d: shr    $0x10,%ebx
  0xa756a570: neg    %ebx
  0xa756a572: mov    (%edi,%ebx,4),%eax
  0xa756a575: movzbl 0x4(%esi),%ebx
  0xa756a579: add    $0x4,%esi
  0xa756a57c: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a583: nop
  0xa756a584: int3   
  0xa756a585: int3   
  0xa756a586: int3   
  0xa756a587: int3   
  0xa756a588: int3   
  0xa756a589: int3   
  0xa756a58a: int3   
  0xa756a58b: int3   
  0xa756a58c: int3   
  0xa756a58d: int3   
  0xa756a58e: int3   
  0xa756a58f: int3   
  0xa756a590: int3   
  0xa756a591: int3   
  0xa756a592: int3   
  0xa756a593: int3   
  0xa756a594: int3   
  0xa756a595: int3   
  0xa756a596: int3   
  0xa756a597: int3   
  0xa756a598: int3   
  0xa756a599: int3   
  0xa756a59a: int3   
  0xa756a59b: int3   
  0xa756a59c: int3   
  0xa756a59d: int3   
  0xa756a59e: int3   
  0xa756a59f: int3   

----------------------------------------------------------------------
lload  22 lload  [0xa756a5c0, 0xa756a620]  96 bytes

  0xa756a5c0: sub    $0x4,%esp
  0xa756a5c3: fstps  (%esp)
  0xa756a5c6: jmp    0xa756a5e4
  0xa756a5cb: sub    $0x8,%esp
  0xa756a5ce: fstpl  (%esp)
  0xa756a5d1: jmp    0xa756a5e4
  0xa756a5d6: push   %edx
  0xa756a5d7: push   %eax
  0xa756a5d8: jmp    0xa756a5e4
  0xa756a5dd: push   %eax
  0xa756a5de: jmp    0xa756a5e4
  0xa756a5e3: push   %eax
  0xa756a5e4: movzbl 0x1(%esi),%ebx
  0xa756a5e8: neg    %ebx
  0xa756a5ea: mov    -0x4(%edi,%ebx,4),%eax
  0xa756a5ee: mov    (%edi,%ebx,4),%edx
  0xa756a5f1: movzbl 0x2(%esi),%ebx
  0xa756a5f5: add    $0x2,%esi
  0xa756a5f8: jmp    *-0x48723ae0(,%ebx,4)
  0xa756a5ff: movzwl 0x2(%esi),%ebx
  0xa756a603: bswap  %ebx
  0xa756a605: shr    $0x10,%ebx
  0xa756a608: neg    %ebx
  0xa756a60a: mov    -0x4(%edi,%ebx,4),%eax
  0xa756a60e: mov    (%edi,%ebx,4),%edx
  0xa756a611: movzbl 0x4(%esi),%ebx
  0xa756a615: add    $0x4,%esi
  0xa756a618: jmp    *-0x48723ae0(,%ebx,4)
  0xa756a61f: nop

----------------------------------------------------------------------
fload  23 fload  [0xa756a640, 0xa756a6a0]  96 bytes

  0xa756a640: sub    $0x4,%esp
  0xa756a643: fstps  (%esp)
  0xa756a646: jmp    0xa756a664
  0xa756a64b: sub    $0x8,%esp
  0xa756a64e: fstpl  (%esp)
  0xa756a651: jmp    0xa756a664
  0xa756a656: push   %edx
  0xa756a657: push   %eax
  0xa756a658: jmp    0xa756a664
  0xa756a65d: push   %eax
  0xa756a65e: jmp    0xa756a664
  0xa756a663: push   %eax
  0xa756a664: movzbl 0x1(%esi),%ebx
  0xa756a668: neg    %ebx
  0xa756a66a: flds   (%edi,%ebx,4)
  0xa756a66d: movzbl 0x2(%esi),%ebx
  0xa756a671: add    $0x2,%esi
  0xa756a674: jmp    *-0x487236e0(,%ebx,4)
  0xa756a67b: movzwl 0x2(%esi),%ebx
  0xa756a67f: bswap  %ebx
  0xa756a681: shr    $0x10,%ebx
  0xa756a684: neg    %ebx
  0xa756a686: flds   (%edi,%ebx,4)
  0xa756a689: movzbl 0x4(%esi),%ebx
  0xa756a68d: add    $0x4,%esi
  0xa756a690: jmp    *-0x487236e0(,%ebx,4)
  0xa756a697: nop
  0xa756a698: int3   
  0xa756a699: int3   
  0xa756a69a: int3   
  0xa756a69b: int3   
  0xa756a69c: int3   
  0xa756a69d: int3   
  0xa756a69e: int3   
  0xa756a69f: int3   

----------------------------------------------------------------------
dload  24 dload  [0xa756a6c0, 0xa756a720]  96 bytes

  0xa756a6c0: sub    $0x4,%esp
  0xa756a6c3: fstps  (%esp)
  0xa756a6c6: jmp    0xa756a6e4
  0xa756a6cb: sub    $0x8,%esp
  0xa756a6ce: fstpl  (%esp)
  0xa756a6d1: jmp    0xa756a6e4
  0xa756a6d6: push   %edx
  0xa756a6d7: push   %eax
  0xa756a6d8: jmp    0xa756a6e4
  0xa756a6dd: push   %eax
  0xa756a6de: jmp    0xa756a6e4
  0xa756a6e3: push   %eax
  0xa756a6e4: movzbl 0x1(%esi),%ebx
  0xa756a6e8: neg    %ebx
  0xa756a6ea: fldl   -0x4(%edi,%ebx,4)
  0xa756a6ee: movzbl 0x2(%esi),%ebx
  0xa756a6f2: add    $0x2,%esi
  0xa756a6f5: jmp    *-0x487232e0(,%ebx,4)
  0xa756a6fc: movzwl 0x2(%esi),%ebx
  0xa756a700: bswap  %ebx
  0xa756a702: shr    $0x10,%ebx
  0xa756a705: neg    %ebx
  0xa756a707: fldl   -0x4(%edi,%ebx,4)
  0xa756a70b: movzbl 0x4(%esi),%ebx
  0xa756a70f: add    $0x4,%esi
  0xa756a712: jmp    *-0x487232e0(,%ebx,4)
  0xa756a719: nop
  0xa756a71a: nop
  0xa756a71b: nop
  0xa756a71c: int3   
  0xa756a71d: int3   
  0xa756a71e: int3   
  0xa756a71f: int3   

----------------------------------------------------------------------
aload  25 aload  [0xa756a740, 0xa756a7a0]  96 bytes

  0xa756a740: sub    $0x4,%esp
  0xa756a743: fstps  (%esp)
  0xa756a746: jmp    0xa756a764
  0xa756a74b: sub    $0x8,%esp
  0xa756a74e: fstpl  (%esp)
  0xa756a751: jmp    0xa756a764
  0xa756a756: push   %edx
  0xa756a757: push   %eax
  0xa756a758: jmp    0xa756a764
  0xa756a75d: push   %eax
  0xa756a75e: jmp    0xa756a764
  0xa756a763: push   %eax
  0xa756a764: movzbl 0x1(%esi),%ebx
  0xa756a768: neg    %ebx
  0xa756a76a: mov    (%edi,%ebx,4),%eax
  0xa756a76d: movzbl 0x2(%esi),%ebx
  0xa756a771: add    $0x2,%esi
  0xa756a774: jmp    *-0x48722ee0(,%ebx,4)
  0xa756a77b: movzwl 0x2(%esi),%ebx
  0xa756a77f: bswap  %ebx
  0xa756a781: shr    $0x10,%ebx
  0xa756a784: neg    %ebx
  0xa756a786: mov    (%edi,%ebx,4),%eax
  0xa756a789: movzbl 0x4(%esi),%ebx
  0xa756a78d: add    $0x4,%esi
  0xa756a790: jmp    *-0x48722ee0(,%ebx,4)
  0xa756a797: nop
  0xa756a798: int3   
  0xa756a799: int3   
  0xa756a79a: int3   
  0xa756a79b: int3   
  0xa756a79c: int3   
  0xa756a79d: int3   
  0xa756a79e: int3   
  0xa756a79f: int3   

----------------------------------------------------------------------
iload_0  26 iload_0  [0xa756a7c0, 0xa756a800]  64 bytes

  0xa756a7c0: sub    $0x4,%esp
  0xa756a7c3: fstps  (%esp)
  0xa756a7c6: jmp    0xa756a7e4
  0xa756a7cb: sub    $0x8,%esp
  0xa756a7ce: fstpl  (%esp)
  0xa756a7d1: jmp    0xa756a7e4
  0xa756a7d6: push   %edx
  0xa756a7d7: push   %eax
  0xa756a7d8: jmp    0xa756a7e4
  0xa756a7dd: push   %eax
  0xa756a7de: jmp    0xa756a7e4
  0xa756a7e3: push   %eax
  0xa756a7e4: mov    (%edi),%eax
  0xa756a7e6: movzbl 0x1(%esi),%ebx
  0xa756a7ea: inc    %esi
  0xa756a7eb: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a7f2: nop
  0xa756a7f3: nop
  0xa756a7f4: int3   
  0xa756a7f5: int3   
  0xa756a7f6: int3   
  0xa756a7f7: int3   
  0xa756a7f8: int3   
  0xa756a7f9: int3   
  0xa756a7fa: int3   
  0xa756a7fb: int3   
  0xa756a7fc: int3   
  0xa756a7fd: int3   
  0xa756a7fe: int3   
  0xa756a7ff: int3   

----------------------------------------------------------------------
iload_1  27 iload_1  [0xa756a820, 0xa756a860]  64 bytes

  0xa756a820: sub    $0x4,%esp
  0xa756a823: fstps  (%esp)
  0xa756a826: jmp    0xa756a844
  0xa756a82b: sub    $0x8,%esp
  0xa756a82e: fstpl  (%esp)
  0xa756a831: jmp    0xa756a844
  0xa756a836: push   %edx
  0xa756a837: push   %eax
  0xa756a838: jmp    0xa756a844
  0xa756a83d: push   %eax
  0xa756a83e: jmp    0xa756a844
  0xa756a843: push   %eax
  0xa756a844: mov    -0x4(%edi),%eax
  0xa756a847: movzbl 0x1(%esi),%ebx
  0xa756a84b: inc    %esi
  0xa756a84c: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a853: nop
  0xa756a854: int3   
  0xa756a855: int3   
  0xa756a856: int3   
  0xa756a857: int3   
  0xa756a858: int3   
  0xa756a859: int3   
  0xa756a85a: int3   
  0xa756a85b: int3   
  0xa756a85c: int3   
  0xa756a85d: int3   
  0xa756a85e: int3   
  0xa756a85f: int3   

----------------------------------------------------------------------
iload_2  28 iload_2  [0xa756a880, 0xa756a8c0]  64 bytes

  0xa756a880: sub    $0x4,%esp
  0xa756a883: fstps  (%esp)
  0xa756a886: jmp    0xa756a8a4
  0xa756a88b: sub    $0x8,%esp
  0xa756a88e: fstpl  (%esp)
  0xa756a891: jmp    0xa756a8a4
  0xa756a896: push   %edx
  0xa756a897: push   %eax
  0xa756a898: jmp    0xa756a8a4
  0xa756a89d: push   %eax
  0xa756a89e: jmp    0xa756a8a4
  0xa756a8a3: push   %eax
  0xa756a8a4: mov    -0x8(%edi),%eax
  0xa756a8a7: movzbl 0x1(%esi),%ebx
  0xa756a8ab: inc    %esi
  0xa756a8ac: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a8b3: nop
  0xa756a8b4: int3   
  0xa756a8b5: int3   
  0xa756a8b6: int3   
  0xa756a8b7: int3   
  0xa756a8b8: int3   
  0xa756a8b9: int3   
  0xa756a8ba: int3   
  0xa756a8bb: int3   
  0xa756a8bc: int3   
  0xa756a8bd: int3   
  0xa756a8be: int3   
  0xa756a8bf: int3   

----------------------------------------------------------------------
iload_3  29 iload_3  [0xa756a8e0, 0xa756a920]  64 bytes

  0xa756a8e0: sub    $0x4,%esp
  0xa756a8e3: fstps  (%esp)
  0xa756a8e6: jmp    0xa756a904
  0xa756a8eb: sub    $0x8,%esp
  0xa756a8ee: fstpl  (%esp)
  0xa756a8f1: jmp    0xa756a904
  0xa756a8f6: push   %edx
  0xa756a8f7: push   %eax
  0xa756a8f8: jmp    0xa756a904
  0xa756a8fd: push   %eax
  0xa756a8fe: jmp    0xa756a904
  0xa756a903: push   %eax
  0xa756a904: mov    -0xc(%edi),%eax
  0xa756a907: movzbl 0x1(%esi),%ebx
  0xa756a90b: inc    %esi
  0xa756a90c: jmp    *-0x48723ee0(,%ebx,4)
  0xa756a913: nop
  0xa756a914: int3   
  0xa756a915: int3   
  0xa756a916: int3   
  0xa756a917: int3   
  0xa756a918: int3   
  0xa756a919: int3   
  0xa756a91a: int3   
  0xa756a91b: int3   
  0xa756a91c: int3   
  0xa756a91d: int3   
  0xa756a91e: int3   
  0xa756a91f: int3   

----------------------------------------------------------------------
lload_0  30 lload_0  [0xa756a940, 0xa756a980]  64 bytes

  0xa756a940: sub    $0x4,%esp
  0xa756a943: fstps  (%esp)
  0xa756a946: jmp    0xa756a964
  0xa756a94b: sub    $0x8,%esp
  0xa756a94e: fstpl  (%esp)
  0xa756a951: jmp    0xa756a964
  0xa756a956: push   %edx
  0xa756a957: push   %eax
  0xa756a958: jmp    0xa756a964
  0xa756a95d: push   %eax
  0xa756a95e: jmp    0xa756a964
  0xa756a963: push   %eax
  0xa756a964: mov    -0x4(%edi),%eax
  0xa756a967: mov    (%edi),%edx
  0xa756a969: movzbl 0x1(%esi),%ebx
  0xa756a96d: inc    %esi
  0xa756a96e: jmp    *-0x48723ae0(,%ebx,4)
  0xa756a975: nop
  0xa756a976: nop
  0xa756a977: nop
  0xa756a978: int3   
  0xa756a979: int3   
  0xa756a97a: int3   
  0xa756a97b: int3   
  0xa756a97c: int3   
  0xa756a97d: int3   
  0xa756a97e: int3   
  0xa756a97f: int3   

----------------------------------------------------------------------
lload_1  31 lload_1  [0xa756a9a0, 0xa756a9e0]  64 bytes

  0xa756a9a0: sub    $0x4,%esp
  0xa756a9a3: fstps  (%esp)
  0xa756a9a6: jmp    0xa756a9c4
  0xa756a9ab: sub    $0x8,%esp
  0xa756a9ae: fstpl  (%esp)
  0xa756a9b1: jmp    0xa756a9c4
  0xa756a9b6: push   %edx
  0xa756a9b7: push   %eax
  0xa756a9b8: jmp    0xa756a9c4
  0xa756a9bd: push   %eax
  0xa756a9be: jmp    0xa756a9c4
  0xa756a9c3: push   %eax
  0xa756a9c4: mov    -0x8(%edi),%eax
  0xa756a9c7: mov    -0x4(%edi),%edx
  0xa756a9ca: movzbl 0x1(%esi),%ebx
  0xa756a9ce: inc    %esi
  0xa756a9cf: jmp    *-0x48723ae0(,%ebx,4)
  0xa756a9d6: nop
  0xa756a9d7: nop
  0xa756a9d8: int3   
  0xa756a9d9: int3   
  0xa756a9da: int3   
  0xa756a9db: int3   
  0xa756a9dc: int3   
  0xa756a9dd: int3   
  0xa756a9de: int3   
  0xa756a9df: int3   

----------------------------------------------------------------------
lload_2  32 lload_2  [0xa756aa00, 0xa756aa40]  64 bytes

  0xa756aa00: sub    $0x4,%esp
  0xa756aa03: fstps  (%esp)
  0xa756aa06: jmp    0xa756aa24
  0xa756aa0b: sub    $0x8,%esp
  0xa756aa0e: fstpl  (%esp)
  0xa756aa11: jmp    0xa756aa24
  0xa756aa16: push   %edx
  0xa756aa17: push   %eax
  0xa756aa18: jmp    0xa756aa24
  0xa756aa1d: push   %eax
  0xa756aa1e: jmp    0xa756aa24
  0xa756aa23: push   %eax
  0xa756aa24: mov    -0xc(%edi),%eax
  0xa756aa27: mov    -0x8(%edi),%edx
  0xa756aa2a: movzbl 0x1(%esi),%ebx
  0xa756aa2e: inc    %esi
  0xa756aa2f: jmp    *-0x48723ae0(,%ebx,4)
  0xa756aa36: nop
  0xa756aa37: nop
  0xa756aa38: int3   
  0xa756aa39: int3   
  0xa756aa3a: int3   
  0xa756aa3b: int3   
  0xa756aa3c: int3   
  0xa756aa3d: int3   
  0xa756aa3e: int3   
  0xa756aa3f: int3   

----------------------------------------------------------------------
lload_3  33 lload_3  [0xa756aa60, 0xa756aaa0]  64 bytes

  0xa756aa60: sub    $0x4,%esp
  0xa756aa63: fstps  (%esp)
  0xa756aa66: jmp    0xa756aa84
  0xa756aa6b: sub    $0x8,%esp
  0xa756aa6e: fstpl  (%esp)
  0xa756aa71: jmp    0xa756aa84
  0xa756aa76: push   %edx
  0xa756aa77: push   %eax
  0xa756aa78: jmp    0xa756aa84
  0xa756aa7d: push   %eax
  0xa756aa7e: jmp    0xa756aa84
  0xa756aa83: push   %eax
  0xa756aa84: mov    -0x10(%edi),%eax
  0xa756aa87: mov    -0xc(%edi),%edx
  0xa756aa8a: movzbl 0x1(%esi),%ebx
  0xa756aa8e: inc    %esi
  0xa756aa8f: jmp    *-0x48723ae0(,%ebx,4)
  0xa756aa96: nop
  0xa756aa97: nop
  0xa756aa98: int3   
  0xa756aa99: int3   
  0xa756aa9a: int3   
  0xa756aa9b: int3   
  0xa756aa9c: int3   
  0xa756aa9d: int3   
  0xa756aa9e: int3   
  0xa756aa9f: int3   

----------------------------------------------------------------------
fload_0  34 fload_0  [0xa756aac0, 0xa756ab00]  64 bytes

  0xa756aac0: sub    $0x4,%esp
  0xa756aac3: fstps  (%esp)
  0xa756aac6: jmp    0xa756aae4
  0xa756aacb: sub    $0x8,%esp
  0xa756aace: fstpl  (%esp)
  0xa756aad1: jmp    0xa756aae4
  0xa756aad6: push   %edx
  0xa756aad7: push   %eax
  0xa756aad8: jmp    0xa756aae4
  0xa756aadd: push   %eax
  0xa756aade: jmp    0xa756aae4
  0xa756aae3: push   %eax
  0xa756aae4: flds   (%edi)
  0xa756aae6: movzbl 0x1(%esi),%ebx
  0xa756aaea: inc    %esi
  0xa756aaeb: jmp    *-0x487236e0(,%ebx,4)
  0xa756aaf2: nop
  0xa756aaf3: nop
  0xa756aaf4: int3   
  0xa756aaf5: int3   
  0xa756aaf6: int3   
  0xa756aaf7: int3   
  0xa756aaf8: int3   
  0xa756aaf9: int3   
  0xa756aafa: int3   
  0xa756aafb: int3   
  0xa756aafc: int3   
  0xa756aafd: int3   
  0xa756aafe: int3   
  0xa756aaff: int3   

----------------------------------------------------------------------
fload_1  35 fload_1  [0xa756ab20, 0xa756ab60]  64 bytes

  0xa756ab20: sub    $0x4,%esp
  0xa756ab23: fstps  (%esp)
  0xa756ab26: jmp    0xa756ab44
  0xa756ab2b: sub    $0x8,%esp
  0xa756ab2e: fstpl  (%esp)
  0xa756ab31: jmp    0xa756ab44
  0xa756ab36: push   %edx
  0xa756ab37: push   %eax
  0xa756ab38: jmp    0xa756ab44
  0xa756ab3d: push   %eax
  0xa756ab3e: jmp    0xa756ab44
  0xa756ab43: push   %eax
  0xa756ab44: flds   -0x4(%edi)
  0xa756ab47: movzbl 0x1(%esi),%ebx
  0xa756ab4b: inc    %esi
  0xa756ab4c: jmp    *-0x487236e0(,%ebx,4)
  0xa756ab53: nop
  0xa756ab54: int3   
  0xa756ab55: int3   
  0xa756ab56: int3   
  0xa756ab57: int3   
  0xa756ab58: int3   
  0xa756ab59: int3   
  0xa756ab5a: int3   
  0xa756ab5b: int3   
  0xa756ab5c: int3   
  0xa756ab5d: int3   
  0xa756ab5e: int3   
  0xa756ab5f: int3   

----------------------------------------------------------------------
fload_2  36 fload_2  [0xa756ab80, 0xa756abc0]  64 bytes

  0xa756ab80: sub    $0x4,%esp
  0xa756ab83: fstps  (%esp)
  0xa756ab86: jmp    0xa756aba4
  0xa756ab8b: sub    $0x8,%esp
  0xa756ab8e: fstpl  (%esp)
  0xa756ab91: jmp    0xa756aba4
  0xa756ab96: push   %edx
  0xa756ab97: push   %eax
  0xa756ab98: jmp    0xa756aba4
  0xa756ab9d: push   %eax
  0xa756ab9e: jmp    0xa756aba4
  0xa756aba3: push   %eax
  0xa756aba4: flds   -0x8(%edi)
  0xa756aba7: movzbl 0x1(%esi),%ebx
  0xa756abab: inc    %esi
  0xa756abac: jmp    *-0x487236e0(,%ebx,4)
  0xa756abb3: nop
  0xa756abb4: int3   
  0xa756abb5: int3   
  0xa756abb6: int3   
  0xa756abb7: int3   
  0xa756abb8: int3   
  0xa756abb9: int3   
  0xa756abba: int3   
  0xa756abbb: int3   
  0xa756abbc: int3   
  0xa756abbd: int3   
  0xa756abbe: int3   
  0xa756abbf: int3   

----------------------------------------------------------------------
fload_3  37 fload_3  [0xa756abe0, 0xa756ac20]  64 bytes

  0xa756abe0: sub    $0x4,%esp
  0xa756abe3: fstps  (%esp)
  0xa756abe6: jmp    0xa756ac04
  0xa756abeb: sub    $0x8,%esp
  0xa756abee: fstpl  (%esp)
  0xa756abf1: jmp    0xa756ac04
  0xa756abf6: push   %edx
  0xa756abf7: push   %eax
  0xa756abf8: jmp    0xa756ac04
  0xa756abfd: push   %eax
  0xa756abfe: jmp    0xa756ac04
  0xa756ac03: push   %eax
  0xa756ac04: flds   -0xc(%edi)
  0xa756ac07: movzbl 0x1(%esi),%ebx
  0xa756ac0b: inc    %esi
  0xa756ac0c: jmp    *-0x487236e0(,%ebx,4)
  0xa756ac13: nop
  0xa756ac14: int3   
  0xa756ac15: int3   
  0xa756ac16: int3   
  0xa756ac17: int3   
  0xa756ac18: int3   
  0xa756ac19: int3   
  0xa756ac1a: int3   
  0xa756ac1b: int3   
  0xa756ac1c: int3   
  0xa756ac1d: int3   
  0xa756ac1e: int3   
  0xa756ac1f: int3   

----------------------------------------------------------------------
dload_0  38 dload_0  [0xa756ac40, 0xa756ac80]  64 bytes

  0xa756ac40: sub    $0x4,%esp
  0xa756ac43: fstps  (%esp)
  0xa756ac46: jmp    0xa756ac64
  0xa756ac4b: sub    $0x8,%esp
  0xa756ac4e: fstpl  (%esp)
  0xa756ac51: jmp    0xa756ac64
  0xa756ac56: push   %edx
  0xa756ac57: push   %eax
  0xa756ac58: jmp    0xa756ac64
  0xa756ac5d: push   %eax
  0xa756ac5e: jmp    0xa756ac64
  0xa756ac63: push   %eax
  0xa756ac64: fldl   -0x4(%edi)
  0xa756ac67: movzbl 0x1(%esi),%ebx
  0xa756ac6b: inc    %esi
  0xa756ac6c: jmp    *-0x487232e0(,%ebx,4)
  0xa756ac73: nop
  0xa756ac74: int3   
  0xa756ac75: int3   
  0xa756ac76: int3   
  0xa756ac77: int3   
  0xa756ac78: int3   
  0xa756ac79: int3   
  0xa756ac7a: int3   
  0xa756ac7b: int3   
  0xa756ac7c: int3   
  0xa756ac7d: int3   
  0xa756ac7e: int3   
  0xa756ac7f: int3   

----------------------------------------------------------------------
dload_1  39 dload_1  [0xa756aca0, 0xa756ace0]  64 bytes

  0xa756aca0: sub    $0x4,%esp
  0xa756aca3: fstps  (%esp)
  0xa756aca6: jmp    0xa756acc4
  0xa756acab: sub    $0x8,%esp
  0xa756acae: fstpl  (%esp)
  0xa756acb1: jmp    0xa756acc4
  0xa756acb6: push   %edx
  0xa756acb7: push   %eax
  0xa756acb8: jmp    0xa756acc4
  0xa756acbd: push   %eax
  0xa756acbe: jmp    0xa756acc4
  0xa756acc3: push   %eax
  0xa756acc4: fldl   -0x8(%edi)
  0xa756acc7: movzbl 0x1(%esi),%ebx
  0xa756accb: inc    %esi
  0xa756accc: jmp    *-0x487232e0(,%ebx,4)
  0xa756acd3: nop
  0xa756acd4: int3   
  0xa756acd5: int3   
  0xa756acd6: int3   
  0xa756acd7: int3   
  0xa756acd8: int3   
  0xa756acd9: int3   
  0xa756acda: int3   
  0xa756acdb: int3   
  0xa756acdc: int3   
  0xa756acdd: int3   
  0xa756acde: int3   
  0xa756acdf: int3   

----------------------------------------------------------------------
dload_2  40 dload_2  [0xa756ad00, 0xa756ad40]  64 bytes

  0xa756ad00: sub    $0x4,%esp
  0xa756ad03: fstps  (%esp)
  0xa756ad06: jmp    0xa756ad24
  0xa756ad0b: sub    $0x8,%esp
  0xa756ad0e: fstpl  (%esp)
  0xa756ad11: jmp    0xa756ad24
  0xa756ad16: push   %edx
  0xa756ad17: push   %eax
  0xa756ad18: jmp    0xa756ad24
  0xa756ad1d: push   %eax
  0xa756ad1e: jmp    0xa756ad24
  0xa756ad23: push   %eax
  0xa756ad24: fldl   -0xc(%edi)
  0xa756ad27: movzbl 0x1(%esi),%ebx
  0xa756ad2b: inc    %esi
  0xa756ad2c: jmp    *-0x487232e0(,%ebx,4)
  0xa756ad33: nop
  0xa756ad34: int3   
  0xa756ad35: int3   
  0xa756ad36: int3   
  0xa756ad37: int3   
  0xa756ad38: int3   
  0xa756ad39: int3   
  0xa756ad3a: int3   
  0xa756ad3b: int3   
  0xa756ad3c: int3   
  0xa756ad3d: int3   
  0xa756ad3e: int3   
  0xa756ad3f: int3   

----------------------------------------------------------------------
dload_3  41 dload_3  [0xa756ad60, 0xa756ada0]  64 bytes

  0xa756ad60: sub    $0x4,%esp
  0xa756ad63: fstps  (%esp)
  0xa756ad66: jmp    0xa756ad84
  0xa756ad6b: sub    $0x8,%esp
  0xa756ad6e: fstpl  (%esp)
  0xa756ad71: jmp    0xa756ad84
  0xa756ad76: push   %edx
  0xa756ad77: push   %eax
  0xa756ad78: jmp    0xa756ad84
  0xa756ad7d: push   %eax
  0xa756ad7e: jmp    0xa756ad84
  0xa756ad83: push   %eax
  0xa756ad84: fldl   -0x10(%edi)
  0xa756ad87: movzbl 0x1(%esi),%ebx
  0xa756ad8b: inc    %esi
  0xa756ad8c: jmp    *-0x487232e0(,%ebx,4)
  0xa756ad93: nop
  0xa756ad94: int3   
  0xa756ad95: int3   
  0xa756ad96: int3   
  0xa756ad97: int3   
  0xa756ad98: int3   
  0xa756ad99: int3   
  0xa756ad9a: int3   
  0xa756ad9b: int3   
  0xa756ad9c: int3   
  0xa756ad9d: int3   
  0xa756ad9e: int3   
  0xa756ad9f: int3   

----------------------------------------------------------------------
aload_0  42 aload_0  [0xa756adc0, 0xa756ae60]  160 bytes

  0xa756adc0: sub    $0x4,%esp
  0xa756adc3: fstps  (%esp)
  0xa756adc6: jmp    0xa756ade4
  0xa756adcb: sub    $0x8,%esp
  0xa756adce: fstpl  (%esp)
  0xa756add1: jmp    0xa756ade4
  0xa756add6: push   %edx
  0xa756add7: push   %eax
  0xa756add8: jmp    0xa756ade4
  0xa756addd: push   %eax
  0xa756adde: jmp    0xa756ade4
  0xa756ade3: push   %eax
  0xa756ade4: movzbl 0x1(%esi),%ebx
  0xa756ade8: mov    (%edi),%eax
  0xa756adea: cmp    $0xb4,%ebx
  0xa756adf0: je     0xa756ae45
  0xa756adf6: cmp    $0xd0,%ebx
  0xa756adfc: mov    $0xdd,%ecx
  0xa756ae01: je     0xa756ae22
  0xa756ae03: cmp    $0xcb,%ebx
  0xa756ae09: mov    $0xde,%ecx
  0xa756ae0e: je     0xa756ae22
  0xa756ae10: cmp    $0xcf,%ebx
  0xa756ae16: mov    $0xdf,%ecx
  0xa756ae1b: je     0xa756ae22
  0xa756ae1d: mov    $0xdc,%ecx
  0xa756ae22: movzbl (%esi),%ebx
  0xa756ae25: cmp    $0x2a,%ebx
  0xa756ae28: je     0xa756ae43
  0xa756ae2a: cmp    %ecx,%ebx
  0xa756ae2c: je     0xa756ae43
  0xa756ae32: push   $0xb75635ff
  0xa756ae37: call   0xa756ae3c
  0xa756ae3c: pusha  
  0xa756ae3d: call   0xb6ff5f32
  0xa756ae42: hlt    
  0xa756ae43: mov    %cl,(%esi)
  0xa756ae45: movzbl 0x1(%esi),%ebx
  0xa756ae49: inc    %esi
  0xa756ae4a: jmp    *-0x48722ee0(,%ebx,4)
  0xa756ae51: nop
  0xa756ae52: nop
  0xa756ae53: nop
  0xa756ae54: int3   
  0xa756ae55: int3   
  0xa756ae56: int3   
  0xa756ae57: int3   
  0xa756ae58: int3   
  0xa756ae59: int3   
  0xa756ae5a: int3   
  0xa756ae5b: int3   
  0xa756ae5c: int3   
  0xa756ae5d: int3   
  0xa756ae5e: int3   
  0xa756ae5f: int3   

----------------------------------------------------------------------
aload_1  43 aload_1  [0xa756ae80, 0xa756aec0]  64 bytes

  0xa756ae80: sub    $0x4,%esp
  0xa756ae83: fstps  (%esp)
  0xa756ae86: jmp    0xa756aea4
  0xa756ae8b: sub    $0x8,%esp
  0xa756ae8e: fstpl  (%esp)
  0xa756ae91: jmp    0xa756aea4
  0xa756ae96: push   %edx
  0xa756ae97: push   %eax
  0xa756ae98: jmp    0xa756aea4
  0xa756ae9d: push   %eax
  0xa756ae9e: jmp    0xa756aea4
  0xa756aea3: push   %eax
  0xa756aea4: mov    -0x4(%edi),%eax
  0xa756aea7: movzbl 0x1(%esi),%ebx
  0xa756aeab: inc    %esi
  0xa756aeac: jmp    *-0x48722ee0(,%ebx,4)
  0xa756aeb3: nop
  0xa756aeb4: int3   
  0xa756aeb5: int3   
  0xa756aeb6: int3   
  0xa756aeb7: int3   
  0xa756aeb8: int3   
  0xa756aeb9: int3   
  0xa756aeba: int3   
  0xa756aebb: int3   
  0xa756aebc: int3   
  0xa756aebd: int3   
  0xa756aebe: int3   
  0xa756aebf: int3   

----------------------------------------------------------------------
aload_2  44 aload_2  [0xa756aee0, 0xa756af20]  64 bytes

  0xa756aee0: sub    $0x4,%esp
  0xa756aee3: fstps  (%esp)
  0xa756aee6: jmp    0xa756af04
  0xa756aeeb: sub    $0x8,%esp
  0xa756aeee: fstpl  (%esp)
  0xa756aef1: jmp    0xa756af04
  0xa756aef6: push   %edx
  0xa756aef7: push   %eax
  0xa756aef8: jmp    0xa756af04
  0xa756aefd: push   %eax
  0xa756aefe: jmp    0xa756af04
  0xa756af03: push   %eax
  0xa756af04: mov    -0x8(%edi),%eax
  0xa756af07: movzbl 0x1(%esi),%ebx
  0xa756af0b: inc    %esi
  0xa756af0c: jmp    *-0x48722ee0(,%ebx,4)
  0xa756af13: nop
  0xa756af14: int3   
  0xa756af15: int3   
  0xa756af16: int3   
  0xa756af17: int3   
  0xa756af18: int3   
  0xa756af19: int3   
  0xa756af1a: int3   
  0xa756af1b: int3   
  0xa756af1c: int3   
  0xa756af1d: int3   
  0xa756af1e: int3   
  0xa756af1f: int3   

----------------------------------------------------------------------
aload_3  45 aload_3  [0xa756af40, 0xa756af80]  64 bytes

  0xa756af40: sub    $0x4,%esp
  0xa756af43: fstps  (%esp)
  0xa756af46: jmp    0xa756af64
  0xa756af4b: sub    $0x8,%esp
  0xa756af4e: fstpl  (%esp)
  0xa756af51: jmp    0xa756af64
  0xa756af56: push   %edx
  0xa756af57: push   %eax
  0xa756af58: jmp    0xa756af64
  0xa756af5d: push   %eax
  0xa756af5e: jmp    0xa756af64
  0xa756af63: push   %eax
  0xa756af64: mov    -0xc(%edi),%eax
  0xa756af67: movzbl 0x1(%esi),%ebx
  0xa756af6b: inc    %esi
  0xa756af6c: jmp    *-0x48722ee0(,%ebx,4)
  0xa756af73: nop
  0xa756af74: int3   
  0xa756af75: int3   
  0xa756af76: int3   
  0xa756af77: int3   
  0xa756af78: int3   
  0xa756af79: int3   
  0xa756af7a: int3   
  0xa756af7b: int3   
  0xa756af7c: int3   
  0xa756af7d: int3   
  0xa756af7e: int3   
  0xa756af7f: int3   

----------------------------------------------------------------------
iaload  46 iaload  [0xa756afa0, 0xa756afc0]  32 bytes

  0xa756afa0: pop    %eax
  0xa756afa1: pop    %edx
  0xa756afa2: cmp    0x8(%edx),%eax
  0xa756afa5: mov    %eax,%ebx
  0xa756afa7: jae    0xa7563e80
  0xa756afad: mov    0xc(%edx,%eax,4),%eax
  0xa756afb1: movzbl 0x1(%esi),%ebx
  0xa756afb5: inc    %esi
  0xa756afb6: jmp    *-0x48723ee0(,%ebx,4)
  0xa756afbd: nop
  0xa756afbe: nop
  0xa756afbf: nop

----------------------------------------------------------------------
laload  47 laload  [0xa756afe0, 0xa756b020]  64 bytes

  0xa756afe0: pop    %eax
  0xa756afe1: pop    %edx
  0xa756afe2: cmp    0x8(%edx),%eax
  0xa756afe5: mov    %eax,%ebx
  0xa756afe7: jae    0xa7563e80
  0xa756afed: mov    %eax,%ebx
  0xa756afef: mov    0x10(%edx,%ebx,8),%eax
  0xa756aff3: mov    0x14(%edx,%ebx,8),%edx
  0xa756aff7: movzbl 0x1(%esi),%ebx
  0xa756affb: inc    %esi
  0xa756affc: jmp    *-0x48723ae0(,%ebx,4)
  0xa756b003: nop
  0xa756b004: int3   
  0xa756b005: int3   
  0xa756b006: int3   
  0xa756b007: int3   
  0xa756b008: int3   
  0xa756b009: int3   
  0xa756b00a: int3   
  0xa756b00b: int3   
  0xa756b00c: int3   
  0xa756b00d: int3   
  0xa756b00e: int3   
  0xa756b00f: int3   
  0xa756b010: int3   
  0xa756b011: int3   
  0xa756b012: int3   
  0xa756b013: int3   
  0xa756b014: int3   
  0xa756b015: int3   
  0xa756b016: int3   
  0xa756b017: int3   
  0xa756b018: int3   
  0xa756b019: int3   
  0xa756b01a: int3   
  0xa756b01b: int3   
  0xa756b01c: int3   
  0xa756b01d: int3   
  0xa756b01e: int3   
  0xa756b01f: int3   

----------------------------------------------------------------------
faload  48 faload  [0xa756b040, 0xa756b060]  32 bytes

  0xa756b040: pop    %eax
  0xa756b041: pop    %edx
  0xa756b042: cmp    0x8(%edx),%eax
  0xa756b045: mov    %eax,%ebx
  0xa756b047: jae    0xa7563e80
  0xa756b04d: flds   0xc(%edx,%eax,4)
  0xa756b051: movzbl 0x1(%esi),%ebx
  0xa756b055: inc    %esi
  0xa756b056: jmp    *-0x487236e0(,%ebx,4)
  0xa756b05d: nop
  0xa756b05e: nop
  0xa756b05f: nop

----------------------------------------------------------------------
daload  49 daload  [0xa756b080, 0xa756b0a0]  32 bytes

  0xa756b080: pop    %eax
  0xa756b081: pop    %edx
  0xa756b082: cmp    0x8(%edx),%eax
  0xa756b085: mov    %eax,%ebx
  0xa756b087: jae    0xa7563e80
  0xa756b08d: fldl   0x10(%edx,%eax,8)
  0xa756b091: movzbl 0x1(%esi),%ebx
  0xa756b095: inc    %esi
  0xa756b096: jmp    *-0x487232e0(,%ebx,4)
  0xa756b09d: nop
  0xa756b09e: nop
  0xa756b09f: nop

----------------------------------------------------------------------
aaload  50 aaload  [0xa756b0c0, 0xa756b0e0]  32 bytes

  0xa756b0c0: pop    %eax
  0xa756b0c1: pop    %edx
  0xa756b0c2: cmp    0x8(%edx),%eax
  0xa756b0c5: mov    %eax,%ebx
  0xa756b0c7: jae    0xa7563e80
  0xa756b0cd: mov    0xc(%edx,%eax,4),%eax
  0xa756b0d1: movzbl 0x1(%esi),%ebx
  0xa756b0d5: inc    %esi
  0xa756b0d6: jmp    *-0x48722ee0(,%ebx,4)
  0xa756b0dd: nop
  0xa756b0de: nop
  0xa756b0df: nop

----------------------------------------------------------------------
baload  51 baload  [0xa756b100, 0xa756b120]  32 bytes

  0xa756b100: pop    %eax
  0xa756b101: pop    %edx
  0xa756b102: cmp    0x8(%edx),%eax
  0xa756b105: mov    %eax,%ebx
  0xa756b107: jae    0xa7563e80
  0xa756b10d: movsbl 0xc(%edx,%eax,1),%ebx
  0xa756b112: mov    %ebx,%eax
  0xa756b114: movzbl 0x1(%esi),%ebx
  0xa756b118: inc    %esi
  0xa756b119: jmp    *-0x48723ee0(,%ebx,4)

----------------------------------------------------------------------
caload  52 caload  [0xa756b140, 0xa756b160]  32 bytes

  0xa756b140: pop    %eax
  0xa756b141: pop    %edx
  0xa756b142: cmp    0x8(%edx),%eax
  0xa756b145: mov    %eax,%ebx
  0xa756b147: jae    0xa7563e80
  0xa756b14d: movzwl 0xc(%edx,%eax,2),%ebx
  0xa756b152: mov    %ebx,%eax
  0xa756b154: movzbl 0x1(%esi),%ebx
  0xa756b158: inc    %esi
  0xa756b159: jmp    *-0x48723ee0(,%ebx,4)

----------------------------------------------------------------------
saload  53 saload  [0xa756b180, 0xa756b1a0]  32 bytes

  0xa756b180: pop    %eax
  0xa756b181: pop    %edx
  0xa756b182: cmp    0x8(%edx),%eax
  0xa756b185: mov    %eax,%ebx
  0xa756b187: jae    0xa7563e80
  0xa756b18d: movswl 0xc(%edx,%eax,2),%ebx
  0xa756b192: mov    %ebx,%eax
  0xa756b194: movzbl 0x1(%esi),%ebx
  0xa756b198: inc    %esi
  0xa756b199: jmp    *-0x48723ee0(,%ebx,4)

----------------------------------------------------------------------
istore  54 istore  [0xa756b1c0, 0xa756b200]  64 bytes

  0xa756b1c0: pop    %eax
  0xa756b1c1: movzbl 0x1(%esi),%ebx
  0xa756b1c5: neg    %ebx
  0xa756b1c7: mov    %eax,(%edi,%ebx,4)
  0xa756b1ca: movzbl 0x2(%esi),%ebx
  0xa756b1ce: add    $0x2,%esi
  0xa756b1d1: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b1d8: pop    %eax
  0xa756b1d9: movzwl 0x2(%esi),%ebx
  0xa756b1dd: bswap  %ebx
  0xa756b1df: shr    $0x10,%ebx
  0xa756b1e2: neg    %ebx
  0xa756b1e4: mov    %eax,(%edi,%ebx,4)
  0xa756b1e7: movzbl 0x4(%esi),%ebx
  0xa756b1eb: add    $0x4,%esi
  0xa756b1ee: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b1f5: nop
  0xa756b1f6: nop
  0xa756b1f7: nop
  0xa756b1f8: int3   
  0xa756b1f9: int3   
  0xa756b1fa: int3   
  0xa756b1fb: int3   
  0xa756b1fc: int3   
  0xa756b1fd: int3   
  0xa756b1fe: int3   
  0xa756b1ff: int3   

----------------------------------------------------------------------
lstore  55 lstore  [0xa756b220, 0xa756b260]  64 bytes

  0xa756b220: pop    %eax
  0xa756b221: pop    %edx
  0xa756b222: movzbl 0x1(%esi),%ebx
  0xa756b226: neg    %ebx
  0xa756b228: mov    %eax,-0x4(%edi,%ebx,4)
  0xa756b22c: mov    %edx,(%edi,%ebx,4)
  0xa756b22f: movzbl 0x2(%esi),%ebx
  0xa756b233: add    $0x2,%esi
  0xa756b236: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b23d: pop    %eax
  0xa756b23e: pop    %edx
  0xa756b23f: movzwl 0x2(%esi),%ebx
  0xa756b243: bswap  %ebx
  0xa756b245: shr    $0x10,%ebx
  0xa756b248: neg    %ebx
  0xa756b24a: mov    %eax,-0x4(%edi,%ebx,4)
  0xa756b24e: mov    %edx,(%edi,%ebx,4)
  0xa756b251: movzbl 0x4(%esi),%ebx
  0xa756b255: add    $0x4,%esi
  0xa756b258: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b25f: nop

----------------------------------------------------------------------
fstore  56 fstore  [0xa756b280, 0xa756b2c0]  64 bytes

  0xa756b280: flds   (%esp)
  0xa756b283: add    $0x4,%esp
  0xa756b286: movzbl 0x1(%esi),%ebx
  0xa756b28a: neg    %ebx
  0xa756b28c: fstps  (%edi,%ebx,4)
  0xa756b28f: movzbl 0x2(%esi),%ebx
  0xa756b293: add    $0x2,%esi
  0xa756b296: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b29d: pop    %eax
  0xa756b29e: movzwl 0x2(%esi),%ebx
  0xa756b2a2: bswap  %ebx
  0xa756b2a4: shr    $0x10,%ebx
  0xa756b2a7: neg    %ebx
  0xa756b2a9: mov    %eax,(%edi,%ebx,4)
  0xa756b2ac: movzbl 0x4(%esi),%ebx
  0xa756b2b0: add    $0x4,%esi
  0xa756b2b3: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b2ba: nop
  0xa756b2bb: nop
  0xa756b2bc: int3   
  0xa756b2bd: int3   
  0xa756b2be: int3   
  0xa756b2bf: int3   

----------------------------------------------------------------------
dstore  57 dstore  [0xa756b2e0, 0xa756b320]  64 bytes

  0xa756b2e0: fldl   (%esp)
  0xa756b2e3: add    $0x8,%esp
  0xa756b2e6: movzbl 0x1(%esi),%ebx
  0xa756b2ea: neg    %ebx
  0xa756b2ec: fstpl  -0x4(%edi,%ebx,4)
  0xa756b2f0: movzbl 0x2(%esi),%ebx
  0xa756b2f4: add    $0x2,%esi
  0xa756b2f7: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b2fe: pop    %eax
  0xa756b2ff: pop    %edx
  0xa756b300: movzwl 0x2(%esi),%ebx
  0xa756b304: bswap  %ebx
  0xa756b306: shr    $0x10,%ebx
  0xa756b309: neg    %ebx
  0xa756b30b: mov    %eax,-0x4(%edi,%ebx,4)
  0xa756b30f: mov    %edx,(%edi,%ebx,4)
  0xa756b312: movzbl 0x4(%esi),%ebx
  0xa756b316: add    $0x4,%esi
  0xa756b319: jmp    *-0x48722ae0(,%ebx,4)

----------------------------------------------------------------------
astore  58 astore  [0xa756b340, 0xa756b3a0]  96 bytes

  0xa756b340: sub    $0x4,%esp
  0xa756b343: fstps  (%esp)
  0xa756b346: jmp    0xa756b364
  0xa756b34b: sub    $0x8,%esp
  0xa756b34e: fstpl  (%esp)
  0xa756b351: jmp    0xa756b364
  0xa756b356: push   %edx
  0xa756b357: push   %eax
  0xa756b358: jmp    0xa756b364
  0xa756b35d: push   %eax
  0xa756b35e: jmp    0xa756b364
  0xa756b363: push   %eax
  0xa756b364: pop    %eax
  0xa756b365: movzbl 0x1(%esi),%ebx
  0xa756b369: neg    %ebx
  0xa756b36b: mov    %eax,(%edi,%ebx,4)
  0xa756b36e: movzbl 0x2(%esi),%ebx
  0xa756b372: add    $0x2,%esi
  0xa756b375: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b37c: pop    %eax
  0xa756b37d: movzwl 0x2(%esi),%ebx
  0xa756b381: bswap  %ebx
  0xa756b383: shr    $0x10,%ebx
  0xa756b386: neg    %ebx
  0xa756b388: mov    %eax,(%edi,%ebx,4)
  0xa756b38b: movzbl 0x4(%esi),%ebx
  0xa756b38f: add    $0x4,%esi
  0xa756b392: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b399: nop
  0xa756b39a: nop
  0xa756b39b: nop
  0xa756b39c: int3   
  0xa756b39d: int3   
  0xa756b39e: int3   
  0xa756b39f: int3   

----------------------------------------------------------------------
istore_0  59 istore_0  [0xa756b3c0, 0xa756b3e0]  32 bytes

  0xa756b3c0: pop    %eax
  0xa756b3c1: mov    %eax,(%edi)
  0xa756b3c3: movzbl 0x1(%esi),%ebx
  0xa756b3c7: inc    %esi
  0xa756b3c8: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b3cf: nop
  0xa756b3d0: int3   
  0xa756b3d1: int3   
  0xa756b3d2: int3   
  0xa756b3d3: int3   
  0xa756b3d4: int3   
  0xa756b3d5: int3   
  0xa756b3d6: int3   
  0xa756b3d7: int3   
  0xa756b3d8: int3   
  0xa756b3d9: int3   
  0xa756b3da: int3   
  0xa756b3db: int3   
  0xa756b3dc: int3   
  0xa756b3dd: int3   
  0xa756b3de: int3   
  0xa756b3df: int3   

----------------------------------------------------------------------
istore_1  60 istore_1  [0xa756b400, 0xa756b420]  32 bytes

  0xa756b400: pop    %eax
  0xa756b401: mov    %eax,-0x4(%edi)
  0xa756b404: movzbl 0x1(%esi),%ebx
  0xa756b408: inc    %esi
  0xa756b409: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b410: int3   
  0xa756b411: int3   
  0xa756b412: int3   
  0xa756b413: int3   
  0xa756b414: int3   
  0xa756b415: int3   
  0xa756b416: int3   
  0xa756b417: int3   
  0xa756b418: int3   
  0xa756b419: int3   
  0xa756b41a: int3   
  0xa756b41b: int3   
  0xa756b41c: int3   
  0xa756b41d: int3   
  0xa756b41e: int3   
  0xa756b41f: int3   

----------------------------------------------------------------------
istore_2  61 istore_2  [0xa756b440, 0xa756b460]  32 bytes

  0xa756b440: pop    %eax
  0xa756b441: mov    %eax,-0x8(%edi)
  0xa756b444: movzbl 0x1(%esi),%ebx
  0xa756b448: inc    %esi
  0xa756b449: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b450: int3   
  0xa756b451: int3   
  0xa756b452: int3   
  0xa756b453: int3   
  0xa756b454: int3   
  0xa756b455: int3   
  0xa756b456: int3   
  0xa756b457: int3   
  0xa756b458: int3   
  0xa756b459: int3   
  0xa756b45a: int3   
  0xa756b45b: int3   
  0xa756b45c: int3   
  0xa756b45d: int3   
  0xa756b45e: int3   
  0xa756b45f: int3   

----------------------------------------------------------------------
istore_3  62 istore_3  [0xa756b480, 0xa756b4a0]  32 bytes

  0xa756b480: pop    %eax
  0xa756b481: mov    %eax,-0xc(%edi)
  0xa756b484: movzbl 0x1(%esi),%ebx
  0xa756b488: inc    %esi
  0xa756b489: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b490: int3   
  0xa756b491: int3   
  0xa756b492: int3   
  0xa756b493: int3   
  0xa756b494: int3   
  0xa756b495: int3   
  0xa756b496: int3   
  0xa756b497: int3   
  0xa756b498: int3   
  0xa756b499: int3   
  0xa756b49a: int3   
  0xa756b49b: int3   
  0xa756b49c: int3   
  0xa756b49d: int3   
  0xa756b49e: int3   
  0xa756b49f: int3   

----------------------------------------------------------------------
lstore_0  63 lstore_0  [0xa756b4c0, 0xa756b4e0]  32 bytes

  0xa756b4c0: pop    %eax
  0xa756b4c1: pop    %edx
  0xa756b4c2: mov    %eax,-0x4(%edi)
  0xa756b4c5: mov    %edx,(%edi)
  0xa756b4c7: movzbl 0x1(%esi),%ebx
  0xa756b4cb: inc    %esi
  0xa756b4cc: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b4d3: nop
  0xa756b4d4: int3   
  0xa756b4d5: int3   
  0xa756b4d6: int3   
  0xa756b4d7: int3   
  0xa756b4d8: int3   
  0xa756b4d9: int3   
  0xa756b4da: int3   
  0xa756b4db: int3   
  0xa756b4dc: int3   
  0xa756b4dd: int3   
  0xa756b4de: int3   
  0xa756b4df: int3   

----------------------------------------------------------------------
lstore_1  64 lstore_1  [0xa756b500, 0xa756b520]  32 bytes

  0xa756b500: pop    %eax
  0xa756b501: pop    %edx
  0xa756b502: mov    %eax,-0x8(%edi)
  0xa756b505: mov    %edx,-0x4(%edi)
  0xa756b508: movzbl 0x1(%esi),%ebx
  0xa756b50c: inc    %esi
  0xa756b50d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b514: int3   
  0xa756b515: int3   
  0xa756b516: int3   
  0xa756b517: int3   
  0xa756b518: int3   
  0xa756b519: int3   
  0xa756b51a: int3   
  0xa756b51b: int3   
  0xa756b51c: int3   
  0xa756b51d: int3   
  0xa756b51e: int3   
  0xa756b51f: int3   

----------------------------------------------------------------------
lstore_2  65 lstore_2  [0xa756b540, 0xa756b560]  32 bytes

  0xa756b540: pop    %eax
  0xa756b541: pop    %edx
  0xa756b542: mov    %eax,-0xc(%edi)
  0xa756b545: mov    %edx,-0x8(%edi)
  0xa756b548: movzbl 0x1(%esi),%ebx
  0xa756b54c: inc    %esi
  0xa756b54d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b554: int3   
  0xa756b555: int3   
  0xa756b556: int3   
  0xa756b557: int3   
  0xa756b558: int3   
  0xa756b559: int3   
  0xa756b55a: int3   
  0xa756b55b: int3   
  0xa756b55c: int3   
  0xa756b55d: int3   
  0xa756b55e: int3   
  0xa756b55f: int3   

----------------------------------------------------------------------
lstore_3  66 lstore_3  [0xa756b580, 0xa756b5a0]  32 bytes

  0xa756b580: pop    %eax
  0xa756b581: pop    %edx
  0xa756b582: mov    %eax,-0x10(%edi)
  0xa756b585: mov    %edx,-0xc(%edi)
  0xa756b588: movzbl 0x1(%esi),%ebx
  0xa756b58c: inc    %esi
  0xa756b58d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b594: int3   
  0xa756b595: int3   
  0xa756b596: int3   
  0xa756b597: int3   
  0xa756b598: int3   
  0xa756b599: int3   
  0xa756b59a: int3   
  0xa756b59b: int3   
  0xa756b59c: int3   
  0xa756b59d: int3   
  0xa756b59e: int3   
  0xa756b59f: int3   

----------------------------------------------------------------------
fstore_0  67 fstore_0  [0xa756b5c0, 0xa756b5e0]  32 bytes

  0xa756b5c0: flds   (%esp)
  0xa756b5c3: add    $0x4,%esp
  0xa756b5c6: fstps  (%edi)
  0xa756b5c8: movzbl 0x1(%esi),%ebx
  0xa756b5cc: inc    %esi
  0xa756b5cd: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b5d4: int3   
  0xa756b5d5: int3   
  0xa756b5d6: int3   
  0xa756b5d7: int3   
  0xa756b5d8: int3   
  0xa756b5d9: int3   
  0xa756b5da: int3   
  0xa756b5db: int3   
  0xa756b5dc: int3   
  0xa756b5dd: int3   
  0xa756b5de: int3   
  0xa756b5df: int3   

----------------------------------------------------------------------
fstore_1  68 fstore_1  [0xa756b600, 0xa756b620]  32 bytes

  0xa756b600: flds   (%esp)
  0xa756b603: add    $0x4,%esp
  0xa756b606: fstps  -0x4(%edi)
  0xa756b609: movzbl 0x1(%esi),%ebx
  0xa756b60d: inc    %esi
  0xa756b60e: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b615: nop
  0xa756b616: nop
  0xa756b617: nop
  0xa756b618: int3   
  0xa756b619: int3   
  0xa756b61a: int3   
  0xa756b61b: int3   
  0xa756b61c: int3   
  0xa756b61d: int3   
  0xa756b61e: int3   
  0xa756b61f: int3   

----------------------------------------------------------------------
fstore_2  69 fstore_2  [0xa756b640, 0xa756b660]  32 bytes

  0xa756b640: flds   (%esp)
  0xa756b643: add    $0x4,%esp
  0xa756b646: fstps  -0x8(%edi)
  0xa756b649: movzbl 0x1(%esi),%ebx
  0xa756b64d: inc    %esi
  0xa756b64e: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b655: nop
  0xa756b656: nop
  0xa756b657: nop
  0xa756b658: int3   
  0xa756b659: int3   
  0xa756b65a: int3   
  0xa756b65b: int3   
  0xa756b65c: int3   
  0xa756b65d: int3   
  0xa756b65e: int3   
  0xa756b65f: int3   

----------------------------------------------------------------------
fstore_3  70 fstore_3  [0xa756b680, 0xa756b6a0]  32 bytes

  0xa756b680: flds   (%esp)
  0xa756b683: add    $0x4,%esp
  0xa756b686: fstps  -0xc(%edi)
  0xa756b689: movzbl 0x1(%esi),%ebx
  0xa756b68d: inc    %esi
  0xa756b68e: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b695: nop
  0xa756b696: nop
  0xa756b697: nop
  0xa756b698: int3   
  0xa756b699: int3   
  0xa756b69a: int3   
  0xa756b69b: int3   
  0xa756b69c: int3   
  0xa756b69d: int3   
  0xa756b69e: int3   
  0xa756b69f: int3   

----------------------------------------------------------------------
dstore_0  71 dstore_0  [0xa756b6c0, 0xa756b6e0]  32 bytes

  0xa756b6c0: fldl   (%esp)
  0xa756b6c3: add    $0x8,%esp
  0xa756b6c6: fstpl  -0x4(%edi)
  0xa756b6c9: movzbl 0x1(%esi),%ebx
  0xa756b6cd: inc    %esi
  0xa756b6ce: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b6d5: nop
  0xa756b6d6: nop
  0xa756b6d7: nop
  0xa756b6d8: int3   
  0xa756b6d9: int3   
  0xa756b6da: int3   
  0xa756b6db: int3   
  0xa756b6dc: int3   
  0xa756b6dd: int3   
  0xa756b6de: int3   
  0xa756b6df: int3   

----------------------------------------------------------------------
dstore_1  72 dstore_1  [0xa756b700, 0xa756b720]  32 bytes

  0xa756b700: fldl   (%esp)
  0xa756b703: add    $0x8,%esp
  0xa756b706: fstpl  -0x8(%edi)
  0xa756b709: movzbl 0x1(%esi),%ebx
  0xa756b70d: inc    %esi
  0xa756b70e: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b715: nop
  0xa756b716: nop
  0xa756b717: nop
  0xa756b718: int3   
  0xa756b719: int3   
  0xa756b71a: int3   
  0xa756b71b: int3   
  0xa756b71c: int3   
  0xa756b71d: int3   
  0xa756b71e: int3   
  0xa756b71f: int3   

----------------------------------------------------------------------
dstore_2  73 dstore_2  [0xa756b740, 0xa756b760]  32 bytes

  0xa756b740: fldl   (%esp)
  0xa756b743: add    $0x8,%esp
  0xa756b746: fstpl  -0xc(%edi)
  0xa756b749: movzbl 0x1(%esi),%ebx
  0xa756b74d: inc    %esi
  0xa756b74e: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b755: nop
  0xa756b756: nop
  0xa756b757: nop
  0xa756b758: int3   
  0xa756b759: int3   
  0xa756b75a: int3   
  0xa756b75b: int3   
  0xa756b75c: int3   
  0xa756b75d: int3   
  0xa756b75e: int3   
  0xa756b75f: int3   

----------------------------------------------------------------------
dstore_3  74 dstore_3  [0xa756b780, 0xa756b7a0]  32 bytes

  0xa756b780: fldl   (%esp)
  0xa756b783: add    $0x8,%esp
  0xa756b786: fstpl  -0x10(%edi)
  0xa756b789: movzbl 0x1(%esi),%ebx
  0xa756b78d: inc    %esi
  0xa756b78e: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b795: nop
  0xa756b796: nop
  0xa756b797: nop
  0xa756b798: int3   
  0xa756b799: int3   
  0xa756b79a: int3   
  0xa756b79b: int3   
  0xa756b79c: int3   
  0xa756b79d: int3   
  0xa756b79e: int3   
  0xa756b79f: int3   

----------------------------------------------------------------------
astore_0  75 astore_0  [0xa756b7c0, 0xa756b800]  64 bytes

  0xa756b7c0: sub    $0x4,%esp
  0xa756b7c3: fstps  (%esp)
  0xa756b7c6: jmp    0xa756b7e4
  0xa756b7cb: sub    $0x8,%esp
  0xa756b7ce: fstpl  (%esp)
  0xa756b7d1: jmp    0xa756b7e4
  0xa756b7d6: push   %edx
  0xa756b7d7: push   %eax
  0xa756b7d8: jmp    0xa756b7e4
  0xa756b7dd: push   %eax
  0xa756b7de: jmp    0xa756b7e4
  0xa756b7e3: push   %eax
  0xa756b7e4: pop    %eax
  0xa756b7e5: mov    %eax,(%edi)
  0xa756b7e7: movzbl 0x1(%esi),%ebx
  0xa756b7eb: inc    %esi
  0xa756b7ec: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b7f3: nop
  0xa756b7f4: int3   
  0xa756b7f5: int3   
  0xa756b7f6: int3   
  0xa756b7f7: int3   
  0xa756b7f8: int3   
  0xa756b7f9: int3   
  0xa756b7fa: int3   
  0xa756b7fb: int3   
  0xa756b7fc: int3   
  0xa756b7fd: int3   
  0xa756b7fe: int3   
  0xa756b7ff: int3   

----------------------------------------------------------------------
astore_1  76 astore_1  [0xa756b820, 0xa756b860]  64 bytes

  0xa756b820: sub    $0x4,%esp
  0xa756b823: fstps  (%esp)
  0xa756b826: jmp    0xa756b844
  0xa756b82b: sub    $0x8,%esp
  0xa756b82e: fstpl  (%esp)
  0xa756b831: jmp    0xa756b844
  0xa756b836: push   %edx
  0xa756b837: push   %eax
  0xa756b838: jmp    0xa756b844
  0xa756b83d: push   %eax
  0xa756b83e: jmp    0xa756b844
  0xa756b843: push   %eax
  0xa756b844: pop    %eax
  0xa756b845: mov    %eax,-0x4(%edi)
  0xa756b848: movzbl 0x1(%esi),%ebx
  0xa756b84c: inc    %esi
  0xa756b84d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b854: int3   
  0xa756b855: int3   
  0xa756b856: int3   
  0xa756b857: int3   
  0xa756b858: int3   
  0xa756b859: int3   
  0xa756b85a: int3   
  0xa756b85b: int3   
  0xa756b85c: int3   
  0xa756b85d: int3   
  0xa756b85e: int3   
  0xa756b85f: int3   

----------------------------------------------------------------------
astore_2  77 astore_2  [0xa756b880, 0xa756b8c0]  64 bytes

  0xa756b880: sub    $0x4,%esp
  0xa756b883: fstps  (%esp)
  0xa756b886: jmp    0xa756b8a4
  0xa756b88b: sub    $0x8,%esp
  0xa756b88e: fstpl  (%esp)
  0xa756b891: jmp    0xa756b8a4
  0xa756b896: push   %edx
  0xa756b897: push   %eax
  0xa756b898: jmp    0xa756b8a4
  0xa756b89d: push   %eax
  0xa756b89e: jmp    0xa756b8a4
  0xa756b8a3: push   %eax
  0xa756b8a4: pop    %eax
  0xa756b8a5: mov    %eax,-0x8(%edi)
  0xa756b8a8: movzbl 0x1(%esi),%ebx
  0xa756b8ac: inc    %esi
  0xa756b8ad: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b8b4: int3   
  0xa756b8b5: int3   
  0xa756b8b6: int3   
  0xa756b8b7: int3   
  0xa756b8b8: int3   
  0xa756b8b9: int3   
  0xa756b8ba: int3   
  0xa756b8bb: int3   
  0xa756b8bc: int3   
  0xa756b8bd: int3   
  0xa756b8be: int3   
  0xa756b8bf: int3   

----------------------------------------------------------------------
astore_3  78 astore_3  [0xa756b8e0, 0xa756b920]  64 bytes

  0xa756b8e0: sub    $0x4,%esp
  0xa756b8e3: fstps  (%esp)
  0xa756b8e6: jmp    0xa756b904
  0xa756b8eb: sub    $0x8,%esp
  0xa756b8ee: fstpl  (%esp)
  0xa756b8f1: jmp    0xa756b904
  0xa756b8f6: push   %edx
  0xa756b8f7: push   %eax
  0xa756b8f8: jmp    0xa756b904
  0xa756b8fd: push   %eax
  0xa756b8fe: jmp    0xa756b904
  0xa756b903: push   %eax
  0xa756b904: pop    %eax
  0xa756b905: mov    %eax,-0xc(%edi)
  0xa756b908: movzbl 0x1(%esi),%ebx
  0xa756b90c: inc    %esi
  0xa756b90d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b914: int3   
  0xa756b915: int3   
  0xa756b916: int3   
  0xa756b917: int3   
  0xa756b918: int3   
  0xa756b919: int3   
  0xa756b91a: int3   
  0xa756b91b: int3   
  0xa756b91c: int3   
  0xa756b91d: int3   
  0xa756b91e: int3   
  0xa756b91f: int3   

----------------------------------------------------------------------
iastore  79 iastore  [0xa756b940, 0xa756b960]  32 bytes

  0xa756b940: pop    %eax
  0xa756b941: pop    %ebx
  0xa756b942: pop    %edx
  0xa756b943: cmp    0x8(%edx),%ebx
  0xa756b946: jae    0xa7563e80
  0xa756b94c: mov    %eax,0xc(%edx,%ebx,4)
  0xa756b950: movzbl 0x1(%esi),%ebx
  0xa756b954: inc    %esi
  0xa756b955: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b95c: int3   
  0xa756b95d: int3   
  0xa756b95e: int3   
  0xa756b95f: int3   

----------------------------------------------------------------------
lastore  80 lastore  [0xa756b980, 0xa756b9c0]  64 bytes

  0xa756b980: pop    %eax
  0xa756b981: pop    %edx
  0xa756b982: pop    %ebx
  0xa756b983: pop    %ecx
  0xa756b984: cmp    0x8(%ecx),%ebx
  0xa756b987: jae    0xa7563e80
  0xa756b98d: mov    %eax,0x10(%ecx,%ebx,8)
  0xa756b991: mov    %edx,0x14(%ecx,%ebx,8)
  0xa756b995: movzbl 0x1(%esi),%ebx
  0xa756b999: inc    %esi
  0xa756b99a: jmp    *-0x48722ae0(,%ebx,4)
  0xa756b9a1: nop
  0xa756b9a2: nop
  0xa756b9a3: nop
  0xa756b9a4: int3   
  0xa756b9a5: int3   
  0xa756b9a6: int3   
  0xa756b9a7: int3   
  0xa756b9a8: int3   
  0xa756b9a9: int3   
  0xa756b9aa: int3   
  0xa756b9ab: int3   
  0xa756b9ac: int3   
  0xa756b9ad: int3   
  0xa756b9ae: int3   
  0xa756b9af: int3   
  0xa756b9b0: int3   
  0xa756b9b1: int3   
  0xa756b9b2: int3   
  0xa756b9b3: int3   
  0xa756b9b4: int3   
  0xa756b9b5: int3   
  0xa756b9b6: int3   
  0xa756b9b7: int3   
  0xa756b9b8: int3   
  0xa756b9b9: int3   
  0xa756b9ba: int3   
  0xa756b9bb: int3   
  0xa756b9bc: int3   
  0xa756b9bd: int3   
  0xa756b9be: int3   
  0xa756b9bf: int3   

----------------------------------------------------------------------
fastore  81 fastore  [0xa756b9e0, 0xa756ba20]  64 bytes

  0xa756b9e0: flds   (%esp)
  0xa756b9e3: add    $0x4,%esp
  0xa756b9e6: pop    %ebx
  0xa756b9e7: pop    %edx
  0xa756b9e8: cmp    0x8(%edx),%ebx
  0xa756b9eb: jae    0xa7563e80
  0xa756b9f1: fstps  0xc(%edx,%ebx,4)
  0xa756b9f5: movzbl 0x1(%esi),%ebx
  0xa756b9f9: inc    %esi
  0xa756b9fa: jmp    *-0x48722ae0(,%ebx,4)
  0xa756ba01: nop
  0xa756ba02: nop
  0xa756ba03: nop
  0xa756ba04: int3   
  0xa756ba05: int3   
  0xa756ba06: int3   
  0xa756ba07: int3   
  0xa756ba08: int3   
  0xa756ba09: int3   
  0xa756ba0a: int3   
  0xa756ba0b: int3   
  0xa756ba0c: int3   
  0xa756ba0d: int3   
  0xa756ba0e: int3   
  0xa756ba0f: int3   
  0xa756ba10: int3   
  0xa756ba11: int3   
  0xa756ba12: int3   
  0xa756ba13: int3   
  0xa756ba14: int3   
  0xa756ba15: int3   
  0xa756ba16: int3   
  0xa756ba17: int3   
  0xa756ba18: int3   
  0xa756ba19: int3   
  0xa756ba1a: int3   
  0xa756ba1b: int3   
  0xa756ba1c: int3   
  0xa756ba1d: int3   
  0xa756ba1e: int3   
  0xa756ba1f: int3   

----------------------------------------------------------------------
dastore  82 dastore  [0xa756ba40, 0xa756ba80]  64 bytes

  0xa756ba40: fldl   (%esp)
  0xa756ba43: add    $0x8,%esp
  0xa756ba46: pop    %ebx
  0xa756ba47: pop    %edx
  0xa756ba48: cmp    0x8(%edx),%ebx
  0xa756ba4b: jae    0xa7563e80
  0xa756ba51: fstpl  0x10(%edx,%ebx,8)
  0xa756ba55: movzbl 0x1(%esi),%ebx
  0xa756ba59: inc    %esi
  0xa756ba5a: jmp    *-0x48722ae0(,%ebx,4)
  0xa756ba61: nop
  0xa756ba62: nop
  0xa756ba63: nop
  0xa756ba64: int3   
  0xa756ba65: int3   
  0xa756ba66: int3   
  0xa756ba67: int3   
  0xa756ba68: int3   
  0xa756ba69: int3   
  0xa756ba6a: int3   
  0xa756ba6b: int3   
  0xa756ba6c: int3   
  0xa756ba6d: int3   
  0xa756ba6e: int3   
  0xa756ba6f: int3   
  0xa756ba70: int3   
  0xa756ba71: int3   
  0xa756ba72: int3   
  0xa756ba73: int3   
  0xa756ba74: int3   
  0xa756ba75: int3   
  0xa756ba76: int3   
  0xa756ba77: int3   
  0xa756ba78: int3   
  0xa756ba79: int3   
  0xa756ba7a: int3   
  0xa756ba7b: int3   
  0xa756ba7c: int3   
  0xa756ba7d: int3   
  0xa756ba7e: int3   
  0xa756ba7f: int3   

----------------------------------------------------------------------
aastore  83 aastore  [0xa756baa0, 0xa756bc80]  480 bytes

  0xa756baa0: sub    $0x4,%esp
  0xa756baa3: fstps  (%esp)
  0xa756baa6: jmp    0xa756bac4
  0xa756baab: sub    $0x8,%esp
  0xa756baae: fstpl  (%esp)
  0xa756bab1: jmp    0xa756bac4
  0xa756bab6: push   %edx
  0xa756bab7: push   %eax
  0xa756bab8: jmp    0xa756bac4
  0xa756babd: push   %eax
  0xa756babe: jmp    0xa756bac4
  0xa756bac3: push   %eax
  0xa756bac4: push   %eax
  0xa756bac5: push   %ebx
  0xa756bac6: push   %ecx
  0xa756bac7: push   %edx
  0xa756bac8: mov    -0x10(%ebp),%ecx
  0xa756bacb: test   %ecx,%ecx
  0xa756bacd: je     0xa756bb11
  0xa756bad3: mov    -0xc(%ebp),%ebx
  0xa756bad6: movzwl 0x2(%ecx),%edx
  0xa756bada: add    0x8(%ebx),%edx
  0xa756badd: lea    0x28(%edx),%edx
  0xa756bae0: cmp    %esi,%edx
  0xa756bae2: je     0xa756bb11
  0xa756bae8: push   %ecx
  0xa756bae9: push   %esi
  0xa756baea: push   %ebx
  0xa756baeb: cmpl   $0x0,-0x8(%ebp)
  0xa756baf2: je     0xa756bb09
  0xa756baf8: push   $0xb7449b18
  0xa756bafd: call   0xa756bb02
  0xa756bb02: pusha  
  0xa756bb03: call   0xb6ff5f32
  0xa756bb08: hlt    
  0xa756bb09: call   0xb6e61602
  0xa756bb0e: add    $0xc,%esp
  0xa756bb11: pop    %edx
  0xa756bb12: pop    %ecx
  0xa756bb13: pop    %ebx
  0xa756bb14: pop    %eax
  0xa756bb15: mov    (%esp),%eax
  0xa756bb18: mov    0x4(%esp),%ecx
  0xa756bb1c: mov    0x8(%esp),%edx
  0xa756bb20: cmp    0x8(%edx),%ecx
  0xa756bb23: mov    %ecx,%ebx
  0xa756bb25: jae    0xa7563e80
  0xa756bb2b: test   %eax,%eax
  0xa756bb2d: je     0xa756bc36
  0xa756bb33: mov    0x4(%eax),%ebx
  0xa756bb36: mov    0x4(%edx),%eax
  0xa756bb39: mov    0x84(%eax),%eax
  0xa756bb3f: lea    0xc(%edx,%ecx,4),%edx
  0xa756bb43: mov    -0x10(%ebp),%ecx
  0xa756bb46: test   %ecx,%ecx
  0xa756bb48: je     0xa756bbc8
  0xa756bb4e: mov    0x8(%ecx),%edi
  0xa756bb51: cmp    %ebx,%edi
  0xa756bb53: jne    0xa756bb66
  0xa756bb59: addl   $0x1,0xc(%ecx)
  0xa756bb5d: sbbl   $0x0,0xc(%ecx)
  0xa756bb61: jmp    0xa756bbbf
  0xa756bb66: test   %edi,%edi
  0xa756bb68: je     0xa756bb9e
  0xa756bb6e: mov    0x10(%ecx),%edi
  0xa756bb71: cmp    %ebx,%edi
  0xa756bb73: jne    0xa756bb86
  0xa756bb79: addl   $0x1,0x14(%ecx)
  0xa756bb7d: sbbl   $0x0,0x14(%ecx)
  0xa756bb81: jmp    0xa756bbbf
  0xa756bb86: test   %edi,%edi
  0xa756bb88: jne    0xa756bbbf
  0xa756bb8e: mov    %ebx,0x10(%ecx)
  0xa756bb91: mov    $0x1,%edi
  0xa756bb96: mov    %edi,0x14(%ecx)
  0xa756bb99: jmp    0xa756bbbf
  0xa756bb9e: cmp    0x10(%ecx),%ebx
  0xa756bba1: jne    0xa756bbb4
  0xa756bba7: addl   $0x1,0x14(%ecx)
  0xa756bbab: sbbl   $0x0,0x14(%ecx)
  0xa756bbaf: jmp    0xa756bbbf
  0xa756bbb4: mov    %ebx,0x8(%ecx)
  0xa756bbb7: mov    $0x1,%edi
  0xa756bbbc: mov    %edi,0xc(%ecx)
  0xa756bbbf: mov    -0x18(%ebp),%edi
  0xa756bbc2: add    $0x18,%ecx
  0xa756bbc5: mov    %ecx,-0x10(%ebp)
  0xa756bbc8: cmp    %eax,%ebx
  0xa756bbca: je     0xa756bc21
  0xa756bbd0: mov    0xc(%eax),%ecx
  0xa756bbd3: cmp    (%ebx,%ecx,1),%eax
  0xa756bbd6: je     0xa756bc21
  0xa756bbdc: cmp    $0x14,%ecx
  0xa756bbdf: jne    0xa756bc03
  0xa756bbe5: push   %edi
  0xa756bbe6: incl   0xb78cf2a4
  0xa756bbec: mov    0x18(%ebx),%edi
  0xa756bbef: mov    (%edi),%ecx
  0xa756bbf1: add    $0x4,%edi
  0xa756bbf4: test   %eax,%eax
  0xa756bbf6: repnz scas %es:(%edi),%eax
  0xa756bbf8: pop    %edi
  0xa756bbf9: jne    0xa756bc03
  0xa756bbfb: mov    %eax,0x14(%ebx)
  0xa756bbfe: jmp    0xa756bc21
  0xa756bc03: mov    -0x10(%ebp),%ecx
  0xa756bc06: test   %ecx,%ecx
  0xa756bc08: je     0xa756bc1c
  0xa756bc0e: addl   $0xffffffff,-0x14(%ecx)
  0xa756bc12: js     0xa756bc1c
  0xa756bc18: addl   $0x1,-0x14(%ecx)
  0xa756bc1c: jmp    0xa7563f3c
  0xa756bc21: mov    (%esp),%eax
  0xa756bc24: mov    %eax,(%edx)
  0xa756bc26: shr    $0x9,%edx
  0xa756bc29: movb   $0x0,0x688c7000(,%edx,1)
  0xa756bc31: jmp    0xa756bc55
  0xa756bc36: mov    -0x10(%ebp),%ebx
  0xa756bc39: test   %ebx,%ebx
  0xa756bc3b: je     0xa756bc4d
  0xa756bc41: orl    $0x100,(%ebx)
  0xa756bc47: add    $0x18,%ebx
  0xa756bc4a: mov    %ebx,-0x10(%ebp)
  0xa756bc4d: movl   $0x0,0xc(%edx,%ecx,4)
  0xa756bc55: add    $0xc,%esp
  0xa756bc58: movzbl 0x1(%esi),%ebx
  0xa756bc5c: inc    %esi
  0xa756bc5d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bc64: int3   
  0xa756bc65: int3   
  0xa756bc66: int3   
  0xa756bc67: int3   
  0xa756bc68: int3   
  0xa756bc69: int3   
  0xa756bc6a: int3   
  0xa756bc6b: int3   
  0xa756bc6c: int3   
  0xa756bc6d: int3   
  0xa756bc6e: int3   
  0xa756bc6f: int3   
  0xa756bc70: int3   
  0xa756bc71: int3   
  0xa756bc72: int3   
  0xa756bc73: int3   
  0xa756bc74: int3   
  0xa756bc75: int3   
  0xa756bc76: int3   
  0xa756bc77: int3   
  0xa756bc78: int3   
  0xa756bc79: int3   
  0xa756bc7a: int3   
  0xa756bc7b: int3   
  0xa756bc7c: int3   
  0xa756bc7d: int3   
  0xa756bc7e: int3   
  0xa756bc7f: int3   

----------------------------------------------------------------------
bastore  84 bastore  [0xa756bca0, 0xa756bce0]  64 bytes

  0xa756bca0: pop    %eax
  0xa756bca1: pop    %ebx
  0xa756bca2: pop    %edx
  0xa756bca3: cmp    0x8(%edx),%ebx
  0xa756bca6: jae    0xa7563e80
  0xa756bcac: mov    0x4(%edx),%ecx
  0xa756bcaf: mov    0x8(%ecx),%ecx
  0xa756bcb2: test   $0x400,%ecx
  0xa756bcb8: je     0xa756bcbd
  0xa756bcba: and    $0x1,%eax
  0xa756bcbd: mov    %al,0xc(%edx,%ebx,1)
  0xa756bcc1: movzbl 0x1(%esi),%ebx
  0xa756bcc5: inc    %esi
  0xa756bcc6: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bccd: nop
  0xa756bcce: nop
  0xa756bccf: nop
  0xa756bcd0: int3   
  0xa756bcd1: int3   
  0xa756bcd2: int3   
  0xa756bcd3: int3   
  0xa756bcd4: int3   
  0xa756bcd5: int3   
  0xa756bcd6: int3   
  0xa756bcd7: int3   
  0xa756bcd8: int3   
  0xa756bcd9: int3   
  0xa756bcda: int3   
  0xa756bcdb: int3   
  0xa756bcdc: int3   
  0xa756bcdd: int3   
  0xa756bcde: int3   
  0xa756bcdf: int3   

----------------------------------------------------------------------
castore  85 castore  [0xa756bd00, 0xa756bd20]  32 bytes

  0xa756bd00: pop    %eax
  0xa756bd01: pop    %ebx
  0xa756bd02: pop    %edx
  0xa756bd03: cmp    0x8(%edx),%ebx
  0xa756bd06: jae    0xa7563e80
  0xa756bd0c: mov    %ax,0xc(%edx,%ebx,2)
  0xa756bd11: movzbl 0x1(%esi),%ebx
  0xa756bd15: inc    %esi
  0xa756bd16: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bd1d: nop
  0xa756bd1e: nop
  0xa756bd1f: nop

----------------------------------------------------------------------
sastore  86 sastore  [0xa756bd40, 0xa756bd60]  32 bytes

  0xa756bd40: pop    %eax
  0xa756bd41: pop    %ebx
  0xa756bd42: pop    %edx
  0xa756bd43: cmp    0x8(%edx),%ebx
  0xa756bd46: jae    0xa7563e80
  0xa756bd4c: mov    %ax,0xc(%edx,%ebx,2)
  0xa756bd51: movzbl 0x1(%esi),%ebx
  0xa756bd55: inc    %esi
  0xa756bd56: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bd5d: nop
  0xa756bd5e: nop
  0xa756bd5f: nop

----------------------------------------------------------------------
pop  87 pop  [0xa756bd80, 0xa756bdc0]  64 bytes

  0xa756bd80: sub    $0x4,%esp
  0xa756bd83: fstps  (%esp)
  0xa756bd86: jmp    0xa756bda4
  0xa756bd8b: sub    $0x8,%esp
  0xa756bd8e: fstpl  (%esp)
  0xa756bd91: jmp    0xa756bda4
  0xa756bd96: push   %edx
  0xa756bd97: push   %eax
  0xa756bd98: jmp    0xa756bda4
  0xa756bd9d: push   %eax
  0xa756bd9e: jmp    0xa756bda4
  0xa756bda3: push   %eax
  0xa756bda4: add    $0x4,%esp
  0xa756bda7: movzbl 0x1(%esi),%ebx
  0xa756bdab: inc    %esi
  0xa756bdac: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bdb3: nop
  0xa756bdb4: int3   
  0xa756bdb5: int3   
  0xa756bdb6: int3   
  0xa756bdb7: int3   
  0xa756bdb8: int3   
  0xa756bdb9: int3   
  0xa756bdba: int3   
  0xa756bdbb: int3   
  0xa756bdbc: int3   
  0xa756bdbd: int3   
  0xa756bdbe: int3   
  0xa756bdbf: int3   

----------------------------------------------------------------------
pop2  88 pop2  [0xa756bde0, 0xa756be20]  64 bytes

  0xa756bde0: sub    $0x4,%esp
  0xa756bde3: fstps  (%esp)
  0xa756bde6: jmp    0xa756be04
  0xa756bdeb: sub    $0x8,%esp
  0xa756bdee: fstpl  (%esp)
  0xa756bdf1: jmp    0xa756be04
  0xa756bdf6: push   %edx
  0xa756bdf7: push   %eax
  0xa756bdf8: jmp    0xa756be04
  0xa756bdfd: push   %eax
  0xa756bdfe: jmp    0xa756be04
  0xa756be03: push   %eax
  0xa756be04: add    $0x8,%esp
  0xa756be07: movzbl 0x1(%esi),%ebx
  0xa756be0b: inc    %esi
  0xa756be0c: jmp    *-0x48722ae0(,%ebx,4)
  0xa756be13: nop
  0xa756be14: int3   
  0xa756be15: int3   
  0xa756be16: int3   
  0xa756be17: int3   
  0xa756be18: int3   
  0xa756be19: int3   
  0xa756be1a: int3   
  0xa756be1b: int3   
  0xa756be1c: int3   
  0xa756be1d: int3   
  0xa756be1e: int3   
  0xa756be1f: int3   

----------------------------------------------------------------------
dup  89 dup  [0xa756be40, 0xa756be80]  64 bytes

  0xa756be40: sub    $0x4,%esp
  0xa756be43: fstps  (%esp)
  0xa756be46: jmp    0xa756be64
  0xa756be4b: sub    $0x8,%esp
  0xa756be4e: fstpl  (%esp)
  0xa756be51: jmp    0xa756be64
  0xa756be56: push   %edx
  0xa756be57: push   %eax
  0xa756be58: jmp    0xa756be64
  0xa756be5d: push   %eax
  0xa756be5e: jmp    0xa756be64
  0xa756be63: push   %eax
  0xa756be64: mov    (%esp),%eax
  0xa756be67: push   %eax
  0xa756be68: movzbl 0x1(%esi),%ebx
  0xa756be6c: inc    %esi
  0xa756be6d: jmp    *-0x48722ae0(,%ebx,4)
  0xa756be74: int3   
  0xa756be75: int3   
  0xa756be76: int3   
  0xa756be77: int3   
  0xa756be78: int3   
  0xa756be79: int3   
  0xa756be7a: int3   
  0xa756be7b: int3   
  0xa756be7c: int3   
  0xa756be7d: int3   
  0xa756be7e: int3   
  0xa756be7f: int3   

----------------------------------------------------------------------
dup_x1  90 dup_x1  [0xa756bea0, 0xa756bee0]  64 bytes

  0xa756bea0: sub    $0x4,%esp
  0xa756bea3: fstps  (%esp)
  0xa756bea6: jmp    0xa756bec4
  0xa756beab: sub    $0x8,%esp
  0xa756beae: fstpl  (%esp)
  0xa756beb1: jmp    0xa756bec4
  0xa756beb6: push   %edx
  0xa756beb7: push   %eax
  0xa756beb8: jmp    0xa756bec4
  0xa756bebd: push   %eax
  0xa756bebe: jmp    0xa756bec4
  0xa756bec3: push   %eax
  0xa756bec4: mov    (%esp),%eax
  0xa756bec7: mov    0x4(%esp),%ecx
  0xa756becb: mov    %eax,0x4(%esp)
  0xa756becf: mov    %ecx,(%esp)
  0xa756bed2: push   %eax
  0xa756bed3: movzbl 0x1(%esi),%ebx
  0xa756bed7: inc    %esi
  0xa756bed8: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bedf: nop

----------------------------------------------------------------------
dup_x2  91 dup_x2  [0xa756bf00, 0xa756bf60]  96 bytes

  0xa756bf00: sub    $0x4,%esp
  0xa756bf03: fstps  (%esp)
  0xa756bf06: jmp    0xa756bf24
  0xa756bf0b: sub    $0x8,%esp
  0xa756bf0e: fstpl  (%esp)
  0xa756bf11: jmp    0xa756bf24
  0xa756bf16: push   %edx
  0xa756bf17: push   %eax
  0xa756bf18: jmp    0xa756bf24
  0xa756bf1d: push   %eax
  0xa756bf1e: jmp    0xa756bf24
  0xa756bf23: push   %eax
  0xa756bf24: mov    (%esp),%eax
  0xa756bf27: mov    0x8(%esp),%ecx
  0xa756bf2b: mov    %eax,0x8(%esp)
  0xa756bf2f: push   %eax
  0xa756bf30: mov    0x8(%esp),%eax
  0xa756bf34: mov    %ecx,0x8(%esp)
  0xa756bf38: mov    %eax,0x4(%esp)
  0xa756bf3c: movzbl 0x1(%esi),%ebx
  0xa756bf40: inc    %esi
  0xa756bf41: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bf48: int3   
  0xa756bf49: int3   
  0xa756bf4a: int3   
  0xa756bf4b: int3   
  0xa756bf4c: int3   
  0xa756bf4d: int3   
  0xa756bf4e: int3   
  0xa756bf4f: int3   
  0xa756bf50: int3   
  0xa756bf51: int3   
  0xa756bf52: int3   
  0xa756bf53: int3   
  0xa756bf54: int3   
  0xa756bf55: int3   
  0xa756bf56: int3   
  0xa756bf57: int3   
  0xa756bf58: int3   
  0xa756bf59: int3   
  0xa756bf5a: int3   
  0xa756bf5b: int3   
  0xa756bf5c: int3   
  0xa756bf5d: int3   
  0xa756bf5e: int3   
  0xa756bf5f: int3   

----------------------------------------------------------------------
dup2  92 dup2  [0xa756bf80, 0xa756bfc0]  64 bytes

  0xa756bf80: sub    $0x4,%esp
  0xa756bf83: fstps  (%esp)
  0xa756bf86: jmp    0xa756bfa4
  0xa756bf8b: sub    $0x8,%esp
  0xa756bf8e: fstpl  (%esp)
  0xa756bf91: jmp    0xa756bfa4
  0xa756bf96: push   %edx
  0xa756bf97: push   %eax
  0xa756bf98: jmp    0xa756bfa4
  0xa756bf9d: push   %eax
  0xa756bf9e: jmp    0xa756bfa4
  0xa756bfa3: push   %eax
  0xa756bfa4: mov    0x4(%esp),%eax
  0xa756bfa8: push   %eax
  0xa756bfa9: mov    0x4(%esp),%eax
  0xa756bfad: push   %eax
  0xa756bfae: movzbl 0x1(%esi),%ebx
  0xa756bfb2: inc    %esi
  0xa756bfb3: jmp    *-0x48722ae0(,%ebx,4)
  0xa756bfba: nop
  0xa756bfbb: nop
  0xa756bfbc: int3   
  0xa756bfbd: int3   
  0xa756bfbe: int3   
  0xa756bfbf: int3   

----------------------------------------------------------------------
dup2_x1  93 dup2_x1  [0xa756bfe0, 0xa756c040]  96 bytes

  0xa756bfe0: sub    $0x4,%esp
  0xa756bfe3: fstps  (%esp)
  0xa756bfe6: jmp    0xa756c004
  0xa756bfeb: sub    $0x8,%esp
  0xa756bfee: fstpl  (%esp)
  0xa756bff1: jmp    0xa756c004
  0xa756bff6: push   %edx
  0xa756bff7: push   %eax
  0xa756bff8: jmp    0xa756c004
  0xa756bffd: push   %eax
  0xa756bffe: jmp    0xa756c004
  0xa756c003: push   %eax
  0xa756c004: mov    (%esp),%ecx
  0xa756c007: mov    0x4(%esp),%eax
  0xa756c00b: push   %eax
  0xa756c00c: push   %ecx
  0xa756c00d: mov    %ecx,0xc(%esp)
  0xa756c011: mov    0x10(%esp),%ecx
  0xa756c015: mov    %ecx,0x8(%esp)
  0xa756c019: mov    %eax,0x10(%esp)
  0xa756c01d: movzbl 0x1(%esi),%ebx
  0xa756c021: inc    %esi
  0xa756c022: jmp    *-0x48722ae0(,%ebx,4)
  0xa756c029: nop
  0xa756c02a: nop
  0xa756c02b: nop
  0xa756c02c: int3   
  0xa756c02d: int3   
  0xa756c02e: int3   
  0xa756c02f: int3   
  0xa756c030: int3   
  0xa756c031: int3   
  0xa756c032: int3   
  0xa756c033: int3   
  0xa756c034: int3   
  0xa756c035: int3   
  0xa756c036: int3   
  0xa756c037: int3   
  0xa756c038: int3   
  0xa756c039: int3   
  0xa756c03a: int3   
  0xa756c03b: int3   
  0xa756c03c: int3   
  0xa756c03d: int3   
  0xa756c03e: int3   
  0xa756c03f: int3   

----------------------------------------------------------------------
dup2_x2  94 dup2_x2  [0xa756c060, 0xa756c0c0]  96 bytes

  0xa756c060: sub    $0x4,%esp
  0xa756c063: fstps  (%esp)
  0xa756c066: jmp    0xa756c084
  0xa756c06b: sub    $0x8,%esp
  0xa756c06e: fstpl  (%esp)
  0xa756c071: jmp    0xa756c084
  0xa756c076: push   %edx
  0xa756c077: push   %eax
  0xa756c078: jmp    0xa756c084
  0xa756c07d: push   %eax
  0xa756c07e: jmp    0xa756c084
  0xa756c083: push   %eax
  0xa756c084: mov    (%esp),%ecx
  0xa756c087: mov    0x4(%esp),%eax
  0xa756c08b: push   %eax
  0xa756c08c: push   %ecx
  0xa756c08d: mov    0x10(%esp),%eax
  0xa756c091: mov    %eax,0x8(%esp)
  0xa756c095: mov    %ecx,0x10(%esp)
  0xa756c099: mov    0x14(%esp),%ecx
  0xa756c09d: mov    0xc(%esp),%eax
  0xa756c0a1: mov    %ecx,0xc(%esp)
  0xa756c0a5: mov    %eax,0x14(%esp)
  0xa756c0a9: movzbl 0x1(%esi),%ebx
  0xa756c0ad: inc    %esi
  0xa756c0ae: jmp    *-0x48722ae0(,%ebx,4)
  0xa756c0b5: nop
  0xa756c0b6: nop
  0xa756c0b7: nop
  0xa756c0b8: int3   
  0xa756c0b9: int3   
  0xa756c0ba: int3   
  0xa756c0bb: int3   
  0xa756c0bc: int3   
  0xa756c0bd: int3   
  0xa756c0be: int3   
  0xa756c0bf: int3   

----------------------------------------------------------------------
swap  95 swap  [0xa756c0e0, 0xa756c120]  64 bytes

  0xa756c0e0: sub    $0x4,%esp
  0xa756c0e3: fstps  (%esp)
  0xa756c0e6: jmp    0xa756c104
  0xa756c0eb: sub    $0x8,%esp
  0xa756c0ee: fstpl  (%esp)
  0xa756c0f1: jmp    0xa756c104
  0xa756c0f6: push   %edx
  0xa756c0f7: push   %eax
  0xa756c0f8: jmp    0xa756c104
  0xa756c0fd: push   %eax
  0xa756c0fe: jmp    0xa756c104
  0xa756c103: push   %eax
  0xa756c104: mov    0x4(%esp),%ecx
  0xa756c108: mov    (%esp),%eax
  0xa756c10b: mov    %ecx,(%esp)
  0xa756c10e: mov    %eax,0x4(%esp)
  0xa756c112: movzbl 0x1(%esi),%ebx
  0xa756c116: inc    %esi
  0xa756c117: jmp    *-0x48722ae0(,%ebx,4)
  0xa756c11e: nop
  0xa756c11f: nop

----------------------------------------------------------------------
iadd  96 iadd  [0xa756c140, 0xa756c160]  32 bytes

  0xa756c140: pop    %eax
  0xa756c141: pop    %edx
  0xa756c142: add    %edx,%eax
  0xa756c144: movzbl 0x1(%esi),%ebx
  0xa756c148: inc    %esi
  0xa756c149: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c150: int3   
  0xa756c151: int3   
  0xa756c152: int3   
  0xa756c153: int3   
  0xa756c154: int3   
  0xa756c155: int3   
  0xa756c156: int3   
  0xa756c157: int3   
  0xa756c158: int3   
  0xa756c159: int3   
  0xa756c15a: int3   
  0xa756c15b: int3   
  0xa756c15c: int3   
  0xa756c15d: int3   
  0xa756c15e: int3   
  0xa756c15f: int3   

----------------------------------------------------------------------
ladd  97 ladd  [0xa756c180, 0xa756c1a0]  32 bytes

  0xa756c180: pop    %eax
  0xa756c181: pop    %edx
  0xa756c182: pop    %ebx
  0xa756c183: pop    %ecx
  0xa756c184: add    %ebx,%eax
  0xa756c186: adc    %ecx,%edx
  0xa756c188: movzbl 0x1(%esi),%ebx
  0xa756c18c: inc    %esi
  0xa756c18d: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c194: int3   
  0xa756c195: int3   
  0xa756c196: int3   
  0xa756c197: int3   
  0xa756c198: int3   
  0xa756c199: int3   
  0xa756c19a: int3   
  0xa756c19b: int3   
  0xa756c19c: int3   
  0xa756c19d: int3   
  0xa756c19e: int3   
  0xa756c19f: int3   

----------------------------------------------------------------------
fadd  98 fadd  [0xa756c1c0, 0xa756c1e0]  32 bytes

  0xa756c1c0: flds   (%esp)
  0xa756c1c3: add    $0x4,%esp
  0xa756c1c6: fadds  (%esp)
  0xa756c1c9: fstps  (%esp)
  0xa756c1cc: flds   (%esp)
  0xa756c1cf: pop    %eax
  0xa756c1d0: movzbl 0x1(%esi),%ebx
  0xa756c1d4: inc    %esi
  0xa756c1d5: jmp    *-0x487236e0(,%ebx,4)
  0xa756c1dc: int3   
  0xa756c1dd: int3   
  0xa756c1de: int3   
  0xa756c1df: int3   

----------------------------------------------------------------------
dadd  99 dadd  [0xa756c200, 0xa756c220]  32 bytes

  0xa756c200: fldl   (%esp)
  0xa756c203: add    $0x8,%esp
  0xa756c206: faddl  (%esp)
  0xa756c209: fstpl  (%esp)
  0xa756c20c: fldl   (%esp)
  0xa756c20f: pop    %eax
  0xa756c210: pop    %edx
  0xa756c211: movzbl 0x1(%esi),%ebx
  0xa756c215: inc    %esi
  0xa756c216: jmp    *-0x487232e0(,%ebx,4)
  0xa756c21d: nop
  0xa756c21e: nop
  0xa756c21f: nop

----------------------------------------------------------------------
isub  100 isub  [0xa756c240, 0xa756c260]  32 bytes

  0xa756c240: pop    %eax
  0xa756c241: mov    %eax,%edx
  0xa756c243: pop    %eax
  0xa756c244: sub    %edx,%eax
  0xa756c246: movzbl 0x1(%esi),%ebx
  0xa756c24a: inc    %esi
  0xa756c24b: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c252: nop
  0xa756c253: nop
  0xa756c254: int3   
  0xa756c255: int3   
  0xa756c256: int3   
  0xa756c257: int3   
  0xa756c258: int3   
  0xa756c259: int3   
  0xa756c25a: int3   
  0xa756c25b: int3   
  0xa756c25c: int3   
  0xa756c25d: int3   
  0xa756c25e: int3   
  0xa756c25f: int3   

----------------------------------------------------------------------
lsub  101 lsub  [0xa756c280, 0xa756c2a0]  32 bytes

  0xa756c280: pop    %eax
  0xa756c281: pop    %edx
  0xa756c282: pop    %ebx
  0xa756c283: pop    %ecx
  0xa756c284: sub    %eax,%ebx
  0xa756c286: sbb    %edx,%ecx
  0xa756c288: mov    %ebx,%eax
  0xa756c28a: mov    %ecx,%edx
  0xa756c28c: movzbl 0x1(%esi),%ebx
  0xa756c290: inc    %esi
  0xa756c291: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c298: int3   
  0xa756c299: int3   
  0xa756c29a: int3   
  0xa756c29b: int3   
  0xa756c29c: int3   
  0xa756c29d: int3   
  0xa756c29e: int3   
  0xa756c29f: int3   

----------------------------------------------------------------------
fsub  102 fsub  [0xa756c2c0, 0xa756c2e0]  32 bytes

  0xa756c2c0: flds   (%esp)
  0xa756c2c3: add    $0x4,%esp
  0xa756c2c6: fsubrs (%esp)
  0xa756c2c9: fstps  (%esp)
  0xa756c2cc: flds   (%esp)
  0xa756c2cf: pop    %eax
  0xa756c2d0: movzbl 0x1(%esi),%ebx
  0xa756c2d4: inc    %esi
  0xa756c2d5: jmp    *-0x487236e0(,%ebx,4)
  0xa756c2dc: int3   
  0xa756c2dd: int3   
  0xa756c2de: int3   
  0xa756c2df: int3   

----------------------------------------------------------------------
dsub  103 dsub  [0xa756c300, 0xa756c320]  32 bytes

  0xa756c300: fldl   (%esp)
  0xa756c303: add    $0x8,%esp
  0xa756c306: fsubrl (%esp)
  0xa756c309: fstpl  (%esp)
  0xa756c30c: fldl   (%esp)
  0xa756c30f: pop    %eax
  0xa756c310: pop    %edx
  0xa756c311: movzbl 0x1(%esi),%ebx
  0xa756c315: inc    %esi
  0xa756c316: jmp    *-0x487232e0(,%ebx,4)
  0xa756c31d: nop
  0xa756c31e: nop
  0xa756c31f: nop

----------------------------------------------------------------------
imul  104 imul  [0xa756c340, 0xa756c360]  32 bytes

  0xa756c340: pop    %eax
  0xa756c341: pop    %edx
  0xa756c342: imul   %edx,%eax
  0xa756c345: movzbl 0x1(%esi),%ebx
  0xa756c349: inc    %esi
  0xa756c34a: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c351: nop
  0xa756c352: nop
  0xa756c353: nop
  0xa756c354: int3   
  0xa756c355: int3   
  0xa756c356: int3   
  0xa756c357: int3   
  0xa756c358: int3   
  0xa756c359: int3   
  0xa756c35a: int3   
  0xa756c35b: int3   
  0xa756c35c: int3   
  0xa756c35d: int3   
  0xa756c35e: int3   
  0xa756c35f: int3   

----------------------------------------------------------------------
lmul  105 lmul  [0xa756c380, 0xa756c3c0]  64 bytes

  0xa756c380: pop    %eax
  0xa756c381: pop    %edx
  0xa756c382: pop    %ebx
  0xa756c383: pop    %ecx
  0xa756c384: push   %ecx
  0xa756c385: push   %ebx
  0xa756c386: push   %edx
  0xa756c387: push   %eax
  0xa756c388: mov    0xc(%esp),%ebx
  0xa756c38c: mov    0x4(%esp),%ecx
  0xa756c390: mov    %ebx,%eax
  0xa756c392: or     %ecx,%ebx
  0xa756c394: je     0xa756c3a7
  0xa756c39a: mull   (%esp)
  0xa756c39d: mov    %eax,%ebx
  0xa756c39f: mov    0x8(%esp),%eax
  0xa756c3a3: mul    %ecx
  0xa756c3a5: add    %eax,%ebx
  0xa756c3a7: mov    0x8(%esp),%eax
  0xa756c3ab: mull   (%esp)
  0xa756c3ae: add    %ebx,%edx
  0xa756c3b0: add    $0x10,%esp
  0xa756c3b3: movzbl 0x1(%esi),%ebx
  0xa756c3b7: inc    %esi
  0xa756c3b8: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c3bf: nop

----------------------------------------------------------------------
fmul  106 fmul  [0xa756c3e0, 0xa756c400]  32 bytes

  0xa756c3e0: flds   (%esp)
  0xa756c3e3: add    $0x4,%esp
  0xa756c3e6: fmuls  (%esp)
  0xa756c3e9: fstps  (%esp)
  0xa756c3ec: flds   (%esp)
  0xa756c3ef: pop    %eax
  0xa756c3f0: movzbl 0x1(%esi),%ebx
  0xa756c3f4: inc    %esi
  0xa756c3f5: jmp    *-0x487236e0(,%ebx,4)
  0xa756c3fc: int3   
  0xa756c3fd: int3   
  0xa756c3fe: int3   
  0xa756c3ff: int3   

----------------------------------------------------------------------
dmul  107 dmul  [0xa756c420, 0xa756c460]  64 bytes

  0xa756c420: fldl   (%esp)
  0xa756c423: add    $0x8,%esp
  0xa756c426: mov    -0xc(%ebp),%ecx
  0xa756c429: mov    0x14(%ecx),%ecx
  0xa756c42c: test   $0x800,%ecx
  0xa756c432: jne    0xa756c439
  0xa756c434: fmull  (%esp)
  0xa756c437: jmp    0xa756c44c
  0xa756c439: fldt   0xb78d0130
  0xa756c43f: fmulp  %st,%st(1)
  0xa756c441: fmull  (%esp)
  0xa756c444: fldt   0xb78d013c
  0xa756c44a: fmulp  %st,%st(1)
  0xa756c44c: fstpl  (%esp)
  0xa756c44f: fldl   (%esp)
  0xa756c452: pop    %eax
  0xa756c453: pop    %edx
  0xa756c454: movzbl 0x1(%esi),%ebx
  0xa756c458: inc    %esi
  0xa756c459: jmp    *-0x487232e0(,%ebx,4)

----------------------------------------------------------------------
idiv  108 idiv  [0xa756c480, 0xa756c4c0]  64 bytes

  0xa756c480: pop    %eax
  0xa756c481: mov    %eax,%ecx
  0xa756c483: pop    %eax
  0xa756c484: cmp    $0x80000000,%eax
  0xa756c48a: jne    0xa756c49b
  0xa756c490: xor    %edx,%edx
  0xa756c492: cmp    $0xffffffff,%ecx
  0xa756c495: je     0xa756c49e
  0xa756c49b: cltd   
  0xa756c49c: idiv   %ecx
  0xa756c49e: movzbl 0x1(%esi),%ebx
  0xa756c4a2: inc    %esi
  0xa756c4a3: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c4aa: nop
  0xa756c4ab: nop
  0xa756c4ac: int3   
  0xa756c4ad: int3   
  0xa756c4ae: int3   
  0xa756c4af: int3   
  0xa756c4b0: int3   
  0xa756c4b1: int3   
  0xa756c4b2: int3   
  0xa756c4b3: int3   
  0xa756c4b4: int3   
  0xa756c4b5: int3   
  0xa756c4b6: int3   
  0xa756c4b7: int3   
  0xa756c4b8: int3   
  0xa756c4b9: int3   
  0xa756c4ba: int3   
  0xa756c4bb: int3   
  0xa756c4bc: int3   
  0xa756c4bd: int3   
  0xa756c4be: int3   
  0xa756c4bf: int3   

----------------------------------------------------------------------
ldiv  109 ldiv  [0xa756c4e0, 0xa756c540]  96 bytes

  0xa756c4e0: pop    %eax
  0xa756c4e1: pop    %edx
  0xa756c4e2: pop    %ebx
  0xa756c4e3: pop    %ecx
  0xa756c4e4: push   %ecx
  0xa756c4e5: push   %ebx
  0xa756c4e6: push   %edx
  0xa756c4e7: push   %eax
  0xa756c4e8: or     %edx,%eax
  0xa756c4ea: je     0xa756400e
  0xa756c4f0: cmpl   $0x0,-0x8(%ebp)
  0xa756c4f7: je     0xa756c50e
  0xa756c4fd: push   $0xb7449b18
  0xa756c502: call   0xa756c507
  0xa756c507: pusha  
  0xa756c508: call   0xb6ff5f32
  0xa756c50d: hlt    
  0xa756c50e: call   0xb7171d24
  0xa756c513: add    $0x10,%esp
  0xa756c516: movzbl 0x1(%esi),%ebx
  0xa756c51a: inc    %esi
  0xa756c51b: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c522: nop
  0xa756c523: nop
  0xa756c524: int3   
  0xa756c525: int3   
  0xa756c526: int3   
  0xa756c527: int3   
  0xa756c528: int3   
  0xa756c529: int3   
  0xa756c52a: int3   
  0xa756c52b: int3   
  0xa756c52c: int3   
  0xa756c52d: int3   
  0xa756c52e: int3   
  0xa756c52f: int3   
  0xa756c530: int3   
  0xa756c531: int3   
  0xa756c532: int3   
  0xa756c533: int3   
  0xa756c534: int3   
  0xa756c535: int3   
  0xa756c536: int3   
  0xa756c537: int3   
  0xa756c538: int3   
  0xa756c539: int3   
  0xa756c53a: int3   
  0xa756c53b: int3   
  0xa756c53c: int3   
  0xa756c53d: int3   
  0xa756c53e: int3   
  0xa756c53f: int3   

----------------------------------------------------------------------
fdiv  110 fdiv  [0xa756c560, 0xa756c580]  32 bytes

  0xa756c560: flds   (%esp)
  0xa756c563: add    $0x4,%esp
  0xa756c566: fdivrs (%esp)
  0xa756c569: fstps  (%esp)
  0xa756c56c: flds   (%esp)
  0xa756c56f: pop    %eax
  0xa756c570: movzbl 0x1(%esi),%ebx
  0xa756c574: inc    %esi
  0xa756c575: jmp    *-0x487236e0(,%ebx,4)
  0xa756c57c: int3   
  0xa756c57d: int3   
  0xa756c57e: int3   
  0xa756c57f: int3   

----------------------------------------------------------------------
ddiv  111 ddiv  [0xa756c5a0, 0xa756c600]  96 bytes

  0xa756c5a0: fldl   (%esp)
  0xa756c5a3: add    $0x8,%esp
  0xa756c5a6: mov    -0xc(%ebp),%ecx
  0xa756c5a9: mov    0x14(%ecx),%ecx
  0xa756c5ac: test   $0x800,%ecx
  0xa756c5b2: jne    0xa756c5bc
  0xa756c5b4: fdivrl (%esp)
  0xa756c5b7: jmp    0xa756c5cf
  0xa756c5bc: fldt   0xb78d0130
  0xa756c5c2: fmull  (%esp)
  0xa756c5c5: fdivp  %st,%st(1)
  0xa756c5c7: fldt   0xb78d013c
  0xa756c5cd: fmulp  %st,%st(1)
  0xa756c5cf: fstpl  (%esp)
  0xa756c5d2: fldl   (%esp)
  0xa756c5d5: pop    %eax
  0xa756c5d6: pop    %edx
  0xa756c5d7: movzbl 0x1(%esi),%ebx
  0xa756c5db: inc    %esi
  0xa756c5dc: jmp    *-0x487232e0(,%ebx,4)
  0xa756c5e3: nop
  0xa756c5e4: int3   
  0xa756c5e5: int3   
  0xa756c5e6: int3   
  0xa756c5e7: int3   
  0xa756c5e8: int3   
  0xa756c5e9: int3   
  0xa756c5ea: int3   
  0xa756c5eb: int3   
  0xa756c5ec: int3   
  0xa756c5ed: int3   
  0xa756c5ee: int3   
  0xa756c5ef: int3   
  0xa756c5f0: int3   
  0xa756c5f1: int3   
  0xa756c5f2: int3   
  0xa756c5f3: int3   
  0xa756c5f4: int3   
  0xa756c5f5: int3   
  0xa756c5f6: int3   
  0xa756c5f7: int3   
  0xa756c5f8: int3   
  0xa756c5f9: int3   
  0xa756c5fa: int3   
  0xa756c5fb: int3   
  0xa756c5fc: int3   
  0xa756c5fd: int3   
  0xa756c5fe: int3   
  0xa756c5ff: int3   

----------------------------------------------------------------------
irem  112 irem  [0xa756c620, 0xa756c660]  64 bytes

  0xa756c620: pop    %eax
  0xa756c621: mov    %eax,%ecx
  0xa756c623: pop    %eax
  0xa756c624: cmp    $0x80000000,%eax
  0xa756c62a: jne    0xa756c63b
  0xa756c630: xor    %edx,%edx
  0xa756c632: cmp    $0xffffffff,%ecx
  0xa756c635: je     0xa756c63e
  0xa756c63b: cltd   
  0xa756c63c: idiv   %ecx
  0xa756c63e: mov    %edx,%eax
  0xa756c640: movzbl 0x1(%esi),%ebx
  0xa756c644: inc    %esi
  0xa756c645: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c64c: int3   
  0xa756c64d: int3   
  0xa756c64e: int3   
  0xa756c64f: int3   
  0xa756c650: int3   
  0xa756c651: int3   
  0xa756c652: int3   
  0xa756c653: int3   
  0xa756c654: int3   
  0xa756c655: int3   
  0xa756c656: int3   
  0xa756c657: int3   
  0xa756c658: int3   
  0xa756c659: int3   
  0xa756c65a: int3   
  0xa756c65b: int3   
  0xa756c65c: int3   
  0xa756c65d: int3   
  0xa756c65e: int3   
  0xa756c65f: int3   

----------------------------------------------------------------------
lrem  113 lrem  [0xa756c680, 0xa756c6e0]  96 bytes

  0xa756c680: pop    %eax
  0xa756c681: pop    %edx
  0xa756c682: pop    %ebx
  0xa756c683: pop    %ecx
  0xa756c684: push   %ecx
  0xa756c685: push   %ebx
  0xa756c686: push   %edx
  0xa756c687: push   %eax
  0xa756c688: or     %edx,%eax
  0xa756c68a: je     0xa756400e
  0xa756c690: cmpl   $0x0,-0x8(%ebp)
  0xa756c697: je     0xa756c6ae
  0xa756c69d: push   $0xb7449b18
  0xa756c6a2: call   0xa756c6a7
  0xa756c6a7: pusha  
  0xa756c6a8: call   0xb6ff5f32
  0xa756c6ad: hlt    
  0xa756c6ae: call   0xb7171eba
  0xa756c6b3: add    $0x10,%esp
  0xa756c6b6: movzbl 0x1(%esi),%ebx
  0xa756c6ba: inc    %esi
  0xa756c6bb: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c6c2: nop
  0xa756c6c3: nop
  0xa756c6c4: int3   
  0xa756c6c5: int3   
  0xa756c6c6: int3   
  0xa756c6c7: int3   
  0xa756c6c8: int3   
  0xa756c6c9: int3   
  0xa756c6ca: int3   
  0xa756c6cb: int3   
  0xa756c6cc: int3   
  0xa756c6cd: int3   
  0xa756c6ce: int3   
  0xa756c6cf: int3   
  0xa756c6d0: int3   
  0xa756c6d1: int3   
  0xa756c6d2: int3   
  0xa756c6d3: int3   
  0xa756c6d4: int3   
  0xa756c6d5: int3   
  0xa756c6d6: int3   
  0xa756c6d7: int3   
  0xa756c6d8: int3   
  0xa756c6d9: int3   
  0xa756c6da: int3   
  0xa756c6db: int3   
  0xa756c6dc: int3   
  0xa756c6dd: int3   
  0xa756c6de: int3   
  0xa756c6df: int3   

----------------------------------------------------------------------
frem  114 frem  [0xa756c700, 0xa756c740]  64 bytes

  0xa756c700: flds   (%esp)
  0xa756c703: add    $0x4,%esp
  0xa756c706: flds   (%esp)
  0xa756c709: fprem  
  0xa756c70b: fstsw  %ax
  0xa756c70e: sahf   
  0xa756c70f: jp     0xa756c709
  0xa756c711: fxch   %st(1)
  0xa756c713: ffree  %st(0)
  0xa756c715: fincstp 
  0xa756c717: fstps  (%esp)
  0xa756c71a: flds   (%esp)
  0xa756c71d: pop    %eax
  0xa756c71e: movzbl 0x1(%esi),%ebx
  0xa756c722: inc    %esi
  0xa756c723: jmp    *-0x487236e0(,%ebx,4)
  0xa756c72a: nop
  0xa756c72b: nop
  0xa756c72c: int3   
  0xa756c72d: int3   
  0xa756c72e: int3   
  0xa756c72f: int3   
  0xa756c730: int3   
  0xa756c731: int3   
  0xa756c732: int3   
  0xa756c733: int3   
  0xa756c734: int3   
  0xa756c735: int3   
  0xa756c736: int3   
  0xa756c737: int3   
  0xa756c738: int3   
  0xa756c739: int3   
  0xa756c73a: int3   
  0xa756c73b: int3   
  0xa756c73c: int3   
  0xa756c73d: int3   
  0xa756c73e: int3   
  0xa756c73f: int3   

----------------------------------------------------------------------
drem  115 drem  [0xa756c760, 0xa756c7a0]  64 bytes

  0xa756c760: fldl   (%esp)
  0xa756c763: add    $0x8,%esp
  0xa756c766: fldl   (%esp)
  0xa756c769: fprem  
  0xa756c76b: fstsw  %ax
  0xa756c76e: sahf   
  0xa756c76f: jp     0xa756c769
  0xa756c771: fxch   %st(1)
  0xa756c773: ffree  %st(0)
  0xa756c775: fincstp 
  0xa756c777: fstpl  (%esp)
  0xa756c77a: fldl   (%esp)
  0xa756c77d: pop    %eax
  0xa756c77e: pop    %edx
  0xa756c77f: movzbl 0x1(%esi),%ebx
  0xa756c783: inc    %esi
  0xa756c784: jmp    *-0x487232e0(,%ebx,4)
  0xa756c78b: nop
  0xa756c78c: int3   
  0xa756c78d: int3   
  0xa756c78e: int3   
  0xa756c78f: int3   
  0xa756c790: int3   
  0xa756c791: int3   
  0xa756c792: int3   
  0xa756c793: int3   
  0xa756c794: int3   
  0xa756c795: int3   
  0xa756c796: int3   
  0xa756c797: int3   
  0xa756c798: int3   
  0xa756c799: int3   
  0xa756c79a: int3   
  0xa756c79b: int3   
  0xa756c79c: int3   
  0xa756c79d: int3   
  0xa756c79e: int3   
  0xa756c79f: int3   

----------------------------------------------------------------------
ineg  116 ineg  [0xa756c7c0, 0xa756c7e0]  32 bytes

  0xa756c7c0: pop    %eax
  0xa756c7c1: neg    %eax
  0xa756c7c3: movzbl 0x1(%esi),%ebx
  0xa756c7c7: inc    %esi
  0xa756c7c8: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c7cf: nop
  0xa756c7d0: int3   
  0xa756c7d1: int3   
  0xa756c7d2: int3   
  0xa756c7d3: int3   
  0xa756c7d4: int3   
  0xa756c7d5: int3   
  0xa756c7d6: int3   
  0xa756c7d7: int3   
  0xa756c7d8: int3   
  0xa756c7d9: int3   
  0xa756c7da: int3   
  0xa756c7db: int3   
  0xa756c7dc: int3   
  0xa756c7dd: int3   
  0xa756c7de: int3   
  0xa756c7df: int3   

----------------------------------------------------------------------
lneg  117 lneg  [0xa756c800, 0xa756c820]  32 bytes

  0xa756c800: pop    %eax
  0xa756c801: pop    %edx
  0xa756c802: neg    %eax
  0xa756c804: adc    $0x0,%edx
  0xa756c807: neg    %edx
  0xa756c809: movzbl 0x1(%esi),%ebx
  0xa756c80d: inc    %esi
  0xa756c80e: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c815: nop
  0xa756c816: nop
  0xa756c817: nop
  0xa756c818: int3   
  0xa756c819: int3   
  0xa756c81a: int3   
  0xa756c81b: int3   
  0xa756c81c: int3   
  0xa756c81d: int3   
  0xa756c81e: int3   
  0xa756c81f: int3   

----------------------------------------------------------------------
fneg  118 fneg  [0xa756c840, 0xa756c860]  32 bytes

  0xa756c840: flds   (%esp)
  0xa756c843: add    $0x4,%esp
  0xa756c846: fchs   
  0xa756c848: movzbl 0x1(%esi),%ebx
  0xa756c84c: inc    %esi
  0xa756c84d: jmp    *-0x487236e0(,%ebx,4)
  0xa756c854: int3   
  0xa756c855: int3   
  0xa756c856: int3   
  0xa756c857: int3   
  0xa756c858: int3   
  0xa756c859: int3   
  0xa756c85a: int3   
  0xa756c85b: int3   
  0xa756c85c: int3   
  0xa756c85d: int3   
  0xa756c85e: int3   
  0xa756c85f: int3   

----------------------------------------------------------------------
dneg  119 dneg  [0xa756c880, 0xa756c8a0]  32 bytes

  0xa756c880: fldl   (%esp)
  0xa756c883: add    $0x8,%esp
  0xa756c886: fchs   
  0xa756c888: movzbl 0x1(%esi),%ebx
  0xa756c88c: inc    %esi
  0xa756c88d: jmp    *-0x487232e0(,%ebx,4)
  0xa756c894: int3   
  0xa756c895: int3   
  0xa756c896: int3   
  0xa756c897: int3   
  0xa756c898: int3   
  0xa756c899: int3   
  0xa756c89a: int3   
  0xa756c89b: int3   
  0xa756c89c: int3   
  0xa756c89d: int3   
  0xa756c89e: int3   
  0xa756c89f: int3   

----------------------------------------------------------------------
ishl  120 ishl  [0xa756c8c0, 0xa756c8e0]  32 bytes

  0xa756c8c0: pop    %eax
  0xa756c8c1: mov    %eax,%ecx
  0xa756c8c3: pop    %eax
  0xa756c8c4: shl    %cl,%eax
  0xa756c8c6: movzbl 0x1(%esi),%ebx
  0xa756c8ca: inc    %esi
  0xa756c8cb: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c8d2: nop
  0xa756c8d3: nop
  0xa756c8d4: int3   
  0xa756c8d5: int3   
  0xa756c8d6: int3   
  0xa756c8d7: int3   
  0xa756c8d8: int3   
  0xa756c8d9: int3   
  0xa756c8da: int3   
  0xa756c8db: int3   
  0xa756c8dc: int3   
  0xa756c8dd: int3   
  0xa756c8de: int3   
  0xa756c8df: int3   

----------------------------------------------------------------------
lshl  121 lshl  [0xa756c900, 0xa756c940]  64 bytes

  0xa756c900: pop    %eax
  0xa756c901: mov    %eax,%ecx
  0xa756c903: pop    %eax
  0xa756c904: pop    %edx
  0xa756c905: and    $0x3f,%ecx
  0xa756c908: cmp    $0x20,%ecx
  0xa756c90b: jl     0xa756c915
  0xa756c911: mov    %eax,%edx
  0xa756c913: xor    %eax,%eax
  0xa756c915: shld   %cl,%eax,%edx
  0xa756c918: shl    %cl,%eax
  0xa756c91a: movzbl 0x1(%esi),%ebx
  0xa756c91e: inc    %esi
  0xa756c91f: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c926: nop
  0xa756c927: nop
  0xa756c928: int3   
  0xa756c929: int3   
  0xa756c92a: int3   
  0xa756c92b: int3   
  0xa756c92c: int3   
  0xa756c92d: int3   
  0xa756c92e: int3   
  0xa756c92f: int3   
  0xa756c930: int3   
  0xa756c931: int3   
  0xa756c932: int3   
  0xa756c933: int3   
  0xa756c934: int3   
  0xa756c935: int3   
  0xa756c936: int3   
  0xa756c937: int3   
  0xa756c938: int3   
  0xa756c939: int3   
  0xa756c93a: int3   
  0xa756c93b: int3   
  0xa756c93c: int3   
  0xa756c93d: int3   
  0xa756c93e: int3   
  0xa756c93f: int3   

----------------------------------------------------------------------
ishr  122 ishr  [0xa756c960, 0xa756c980]  32 bytes

  0xa756c960: pop    %eax
  0xa756c961: mov    %eax,%ecx
  0xa756c963: pop    %eax
  0xa756c964: sar    %cl,%eax
  0xa756c966: movzbl 0x1(%esi),%ebx
  0xa756c96a: inc    %esi
  0xa756c96b: jmp    *-0x48723ee0(,%ebx,4)
  0xa756c972: nop
  0xa756c973: nop
  0xa756c974: int3   
  0xa756c975: int3   
  0xa756c976: int3   
  0xa756c977: int3   
  0xa756c978: int3   
  0xa756c979: int3   
  0xa756c97a: int3   
  0xa756c97b: int3   
  0xa756c97c: int3   
  0xa756c97d: int3   
  0xa756c97e: int3   
  0xa756c97f: int3   

----------------------------------------------------------------------
lshr  123 lshr  [0xa756c9a0, 0xa756c9e0]  64 bytes

  0xa756c9a0: pop    %eax
  0xa756c9a1: mov    %eax,%ecx
  0xa756c9a3: pop    %eax
  0xa756c9a4: pop    %edx
  0xa756c9a5: and    $0x3f,%ecx
  0xa756c9a8: cmp    $0x20,%ecx
  0xa756c9ab: jl     0xa756c9b6
  0xa756c9b1: mov    %edx,%eax
  0xa756c9b3: sar    $0x1f,%edx
  0xa756c9b6: shrd   %cl,%edx,%eax
  0xa756c9b9: sar    %cl,%edx
  0xa756c9bb: movzbl 0x1(%esi),%ebx
  0xa756c9bf: inc    %esi
  0xa756c9c0: jmp    *-0x48723ae0(,%ebx,4)
  0xa756c9c7: nop
  0xa756c9c8: int3   
  0xa756c9c9: int3   
  0xa756c9ca: int3   
  0xa756c9cb: int3   
  0xa756c9cc: int3   
  0xa756c9cd: int3   
  0xa756c9ce: int3   
  0xa756c9cf: int3   
  0xa756c9d0: int3   
  0xa756c9d1: int3   
  0xa756c9d2: int3   
  0xa756c9d3: int3   
  0xa756c9d4: int3   
  0xa756c9d5: int3   
  0xa756c9d6: int3   
  0xa756c9d7: int3   
  0xa756c9d8: int3   
  0xa756c9d9: int3   
  0xa756c9da: int3   
  0xa756c9db: int3   
  0xa756c9dc: int3   
  0xa756c9dd: int3   
  0xa756c9de: int3   
  0xa756c9df: int3   

----------------------------------------------------------------------
iushr  124 iushr  [0xa756ca00, 0xa756ca20]  32 bytes

  0xa756ca00: pop    %eax
  0xa756ca01: mov    %eax,%ecx
  0xa756ca03: pop    %eax
  0xa756ca04: shr    %cl,%eax
  0xa756ca06: movzbl 0x1(%esi),%ebx
  0xa756ca0a: inc    %esi
  0xa756ca0b: jmp    *-0x48723ee0(,%ebx,4)
  0xa756ca12: nop
  0xa756ca13: nop
  0xa756ca14: int3   
  0xa756ca15: int3   
  0xa756ca16: int3   
  0xa756ca17: int3   
  0xa756ca18: int3   
  0xa756ca19: int3   
  0xa756ca1a: int3   
  0xa756ca1b: int3   
  0xa756ca1c: int3   
  0xa756ca1d: int3   
  0xa756ca1e: int3   
  0xa756ca1f: int3   

----------------------------------------------------------------------
lushr  125 lushr  [0xa756ca40, 0xa756ca80]  64 bytes

  0xa756ca40: pop    %eax
  0xa756ca41: mov    %eax,%ecx
  0xa756ca43: pop    %eax
  0xa756ca44: pop    %edx
  0xa756ca45: and    $0x3f,%ecx
  0xa756ca48: cmp    $0x20,%ecx
  0xa756ca4b: jl     0xa756ca55
  0xa756ca51: mov    %edx,%eax
  0xa756ca53: xor    %edx,%edx
  0xa756ca55: shrd   %cl,%edx,%eax
  0xa756ca58: shr    %cl,%edx
  0xa756ca5a: movzbl 0x1(%esi),%ebx
  0xa756ca5e: inc    %esi
  0xa756ca5f: jmp    *-0x48723ae0(,%ebx,4)
  0xa756ca66: nop
  0xa756ca67: nop
  0xa756ca68: int3   
  0xa756ca69: int3   
  0xa756ca6a: int3   
  0xa756ca6b: int3   
  0xa756ca6c: int3   
  0xa756ca6d: int3   
  0xa756ca6e: int3   
  0xa756ca6f: int3   
  0xa756ca70: int3   
  0xa756ca71: int3   
  0xa756ca72: int3   
  0xa756ca73: int3   
  0xa756ca74: int3   
  0xa756ca75: int3   
  0xa756ca76: int3   
  0xa756ca77: int3   
  0xa756ca78: int3   
  0xa756ca79: int3   
  0xa756ca7a: int3   
  0xa756ca7b: int3   
  0xa756ca7c: int3   
  0xa756ca7d: int3   
  0xa756ca7e: int3   
  0xa756ca7f: int3   

----------------------------------------------------------------------
iand  126 iand  [0xa756caa0, 0xa756cac0]  32 bytes

  0xa756caa0: pop    %eax
  0xa756caa1: pop    %edx
  0xa756caa2: and    %edx,%eax
  0xa756caa4: movzbl 0x1(%esi),%ebx
  0xa756caa8: inc    %esi
  0xa756caa9: jmp    *-0x48723ee0(,%ebx,4)
  0xa756cab0: int3   
  0xa756cab1: int3   
  0xa756cab2: int3   
  0xa756cab3: int3   
  0xa756cab4: int3   
  0xa756cab5: int3   
  0xa756cab6: int3   
  0xa756cab7: int3   
  0xa756cab8: int3   
  0xa756cab9: int3   
  0xa756caba: int3   
  0xa756cabb: int3   
  0xa756cabc: int3   
  0xa756cabd: int3   
  0xa756cabe: int3   
  0xa756cabf: int3   

----------------------------------------------------------------------
land  127 land  [0xa756cae0, 0xa756cb00]  32 bytes

  0xa756cae0: pop    %eax
  0xa756cae1: pop    %edx
  0xa756cae2: pop    %ebx
  0xa756cae3: pop    %ecx
  0xa756cae4: and    %ebx,%eax
  0xa756cae6: and    %ecx,%edx
  0xa756cae8: movzbl 0x1(%esi),%ebx
  0xa756caec: inc    %esi
  0xa756caed: jmp    *-0x48723ae0(,%ebx,4)
  0xa756caf4: int3   
  0xa756caf5: int3   
  0xa756caf6: int3   
  0xa756caf7: int3   
  0xa756caf8: int3   
  0xa756caf9: int3   
  0xa756cafa: int3   
  0xa756cafb: int3   
  0xa756cafc: int3   
  0xa756cafd: int3   
  0xa756cafe: int3   
  0xa756caff: int3   

----------------------------------------------------------------------
ior  128 ior  [0xa756cb20, 0xa756cb40]  32 bytes

  0xa756cb20: pop    %eax
  0xa756cb21: pop    %edx
  0xa756cb22: or     %edx,%eax
  0xa756cb24: movzbl 0x1(%esi),%ebx
  0xa756cb28: inc    %esi
  0xa756cb29: jmp    *-0x48723ee0(,%ebx,4)
  0xa756cb30: int3   
  0xa756cb31: int3   
  0xa756cb32: int3   
  0xa756cb33: int3   
  0xa756cb34: int3   
  0xa756cb35: int3   
  0xa756cb36: int3   
  0xa756cb37: int3   
  0xa756cb38: int3   
  0xa756cb39: int3   
  0xa756cb3a: int3   
  0xa756cb3b: int3   
  0xa756cb3c: int3   
  0xa756cb3d: int3   
  0xa756cb3e: int3   
  0xa756cb3f: int3   

----------------------------------------------------------------------
lor  129 lor  [0xa756cb60, 0xa756cb80]  32 bytes

  0xa756cb60: pop    %eax
  0xa756cb61: pop    %edx
  0xa756cb62: pop    %ebx
  0xa756cb63: pop    %ecx
  0xa756cb64: or     %ebx,%eax
  0xa756cb66: or     %ecx,%edx
  0xa756cb68: movzbl 0x1(%esi),%ebx
  0xa756cb6c: inc    %esi
  0xa756cb6d: jmp    *-0x48723ae0(,%ebx,4)
  0xa756cb74: int3   
  0xa756cb75: int3   
  0xa756cb76: int3   
  0xa756cb77: int3   
  0xa756cb78: int3   
  0xa756cb79: int3   
  0xa756cb7a: int3   
  0xa756cb7b: int3   
  0xa756cb7c: int3   
  0xa756cb7d: int3   
  0xa756cb7e: int3   
  0xa756cb7f: int3   

----------------------------------------------------------------------
ixor  130 ixor  [0xa756cba0, 0xa756cbc0]  32 bytes

  0xa756cba0: pop    %eax
  0xa756cba1: pop    %edx
  0xa756cba2: xor    %edx,%eax
  0xa756cba4: movzbl 0x1(%esi),%ebx
  0xa756cba8: inc    %esi
  0xa756cba9: jmp    *-0x48723ee0(,%ebx,4)
  0xa756cbb0: int3   
  0xa756cbb1: int3   
  0xa756cbb2: int3   
  0xa756cbb3: int3   
  0xa756cbb4: int3   
  0xa756cbb5: int3   
  0xa756cbb6: int3   
  0xa756cbb7: int3   
  0xa756cbb8: int3   
  0xa756cbb9: int3   
  0xa756cbba: int3   
  0xa756cbbb: int3   
  0xa756cbbc: int3   
  0xa756cbbd: int3   
  0xa756cbbe: int3   
  0xa756cbbf: int3   

----------------------------------------------------------------------
lxor  131 lxor  [0xa756cbe0, 0xa756cc00]  32 bytes

  0xa756cbe0: pop    %eax
  0xa756cbe1: pop    %edx
  0xa756cbe2: pop    %ebx
  0xa756cbe3: pop    %ecx
  0xa756cbe4: xor    %ebx,%eax
  0xa756cbe6: xor    %ecx,%edx
  0xa756cbe8: movzbl 0x1(%esi),%ebx
  0xa756cbec: inc    %esi
  0xa756cbed: jmp    *-0x48723ae0(,%ebx,4)
  0xa756cbf4: int3   
  0xa756cbf5: int3   
  0xa756cbf6: int3   
  0xa756cbf7: int3   
  0xa756cbf8: int3   
  0xa756cbf9: int3   
  0xa756cbfa: int3   
  0xa756cbfb: int3   
  0xa756cbfc: int3   
  0xa756cbfd: int3   
  0xa756cbfe: int3   
  0xa756cbff: int3   

----------------------------------------------------------------------
iinc  132 iinc  [0xa756cc20, 0xa756cca0]  128 bytes

  0xa756cc20: sub    $0x4,%esp
  0xa756cc23: fstps  (%esp)
  0xa756cc26: jmp    0xa756cc44
  0xa756cc2b: sub    $0x8,%esp
  0xa756cc2e: fstpl  (%esp)
  0xa756cc31: jmp    0xa756cc44
  0xa756cc36: push   %edx
  0xa756cc37: push   %eax
  0xa756cc38: jmp    0xa756cc44
  0xa756cc3d: push   %eax
  0xa756cc3e: jmp    0xa756cc44
  0xa756cc43: push   %eax
  0xa756cc44: movsbl 0x2(%esi),%edx
  0xa756cc48: movzbl 0x1(%esi),%ebx
  0xa756cc4c: neg    %ebx
  0xa756cc4e: add    %edx,(%edi,%ebx,4)
  0xa756cc51: movzbl 0x3(%esi),%ebx
  0xa756cc55: add    $0x3,%esi
  0xa756cc58: jmp    *-0x48722ae0(,%ebx,4)
  0xa756cc5f: mov    0x4(%esi),%edx
  0xa756cc62: movzwl 0x2(%esi),%ebx
  0xa756cc66: bswap  %ebx
  0xa756cc68: shr    $0x10,%ebx
  0xa756cc6b: neg    %ebx
  0xa756cc6d: bswap  %edx
  0xa756cc6f: sar    $0x10,%edx
  0xa756cc72: add    %edx,(%edi,%ebx,4)
  0xa756cc75: movzbl 0x6(%esi),%ebx
  0xa756cc79: add    $0x6,%esi
  0xa756cc7c: jmp    *-0x48722ae0(,%ebx,4)
  0xa756cc83: nop
  0xa756cc84: int3   
  0xa756cc85: int3   
  0xa756cc86: int3   
  0xa756cc87: int3   
  0xa756cc88: int3   
  0xa756cc89: int3   
  0xa756cc8a: int3   
  0xa756cc8b: int3   
  0xa756cc8c: int3   
  0xa756cc8d: int3   
  0xa756cc8e: int3   
  0xa756cc8f: int3   
  0xa756cc90: int3   
  0xa756cc91: int3   
  0xa756cc92: int3   
  0xa756cc93: int3   
  0xa756cc94: int3   
  0xa756cc95: int3   
  0xa756cc96: int3   
  0xa756cc97: int3   
  0xa756cc98: int3   
  0xa756cc99: int3   
  0xa756cc9a: int3   
  0xa756cc9b: int3   
  0xa756cc9c: int3   
  0xa756cc9d: int3   
  0xa756cc9e: int3   
  0xa756cc9f: int3   

----------------------------------------------------------------------
i2l  133 i2l  [0xa756ccc0, 0xa756cce0]  32 bytes

  0xa756ccc0: pop    %eax
  0xa756ccc1: cltd   
  0xa756ccc2: movzbl 0x1(%esi),%ebx
  0xa756ccc6: inc    %esi
  0xa756ccc7: jmp    *-0x48723ae0(,%ebx,4)
  0xa756ccce: nop
  0xa756cccf: nop
  0xa756ccd0: int3   
  0xa756ccd1: int3   
  0xa756ccd2: int3   
  0xa756ccd3: int3   
  0xa756ccd4: int3   
  0xa756ccd5: int3   
  0xa756ccd6: int3   
  0xa756ccd7: int3   
  0xa756ccd8: int3   
  0xa756ccd9: int3   
  0xa756ccda: int3   
  0xa756ccdb: int3   
  0xa756ccdc: int3   
  0xa756ccdd: int3   
  0xa756ccde: int3   
  0xa756ccdf: int3   

----------------------------------------------------------------------
i2f  134 i2f  [0xa756cd00, 0xa756cd20]  32 bytes

  0xa756cd00: pop    %eax
  0xa756cd01: push   %eax
  0xa756cd02: fildl  (%esp)
  0xa756cd05: fstps  (%esp)
  0xa756cd08: flds   (%esp)
  0xa756cd0b: pop    %ecx
  0xa756cd0c: movzbl 0x1(%esi),%ebx
  0xa756cd10: inc    %esi
  0xa756cd11: jmp    *-0x487236e0(,%ebx,4)
  0xa756cd18: int3   
  0xa756cd19: int3   
  0xa756cd1a: int3   
  0xa756cd1b: int3   
  0xa756cd1c: int3   
  0xa756cd1d: int3   
  0xa756cd1e: int3   
  0xa756cd1f: int3   

----------------------------------------------------------------------
i2d  135 i2d  [0xa756cd40, 0xa756cd60]  32 bytes

  0xa756cd40: pop    %eax
  0xa756cd41: push   %eax
  0xa756cd42: push   %eax
  0xa756cd43: fildl  (%esp)
  0xa756cd46: fstpl  (%esp)
  0xa756cd49: fldl   (%esp)
  0xa756cd4c: pop    %ecx
  0xa756cd4d: pop    %ecx
  0xa756cd4e: movzbl 0x1(%esi),%ebx
  0xa756cd52: inc    %esi
  0xa756cd53: jmp    *-0x487232e0(,%ebx,4)
  0xa756cd5a: nop
  0xa756cd5b: nop
  0xa756cd5c: int3   
  0xa756cd5d: int3   
  0xa756cd5e: int3   
  0xa756cd5f: int3   

----------------------------------------------------------------------
l2i  136 l2i  [0xa756cd80, 0xa756cda0]  32 bytes

  0xa756cd80: pop    %eax
  0xa756cd81: pop    %edx
  0xa756cd82: movzbl 0x1(%esi),%ebx
  0xa756cd86: inc    %esi
  0xa756cd87: jmp    *-0x48723ee0(,%ebx,4)
  0xa756cd8e: nop
  0xa756cd8f: nop
  0xa756cd90: int3   
  0xa756cd91: int3   
  0xa756cd92: int3   
  0xa756cd93: int3   
  0xa756cd94: int3   
  0xa756cd95: int3   
  0xa756cd96: int3   
  0xa756cd97: int3   
  0xa756cd98: int3   
  0xa756cd99: int3   
  0xa756cd9a: int3   
  0xa756cd9b: int3   
  0xa756cd9c: int3   
  0xa756cd9d: int3   
  0xa756cd9e: int3   
  0xa756cd9f: int3   

----------------------------------------------------------------------
l2f  137 l2f  [0xa756cdc0, 0xa756cde0]  32 bytes

  0xa756cdc0: pop    %eax
  0xa756cdc1: pop    %edx
  0xa756cdc2: push   %edx
  0xa756cdc3: push   %eax
  0xa756cdc4: fildll (%esp)
  0xa756cdc7: fstps  (%esp)
  0xa756cdca: flds   (%esp)
  0xa756cdcd: pop    %ecx
  0xa756cdce: pop    %ecx
  0xa756cdcf: movzbl 0x1(%esi),%ebx
  0xa756cdd3: inc    %esi
  0xa756cdd4: jmp    *-0x487236e0(,%ebx,4)
  0xa756cddb: nop
  0xa756cddc: int3   
  0xa756cddd: int3   
  0xa756cdde: int3   
  0xa756cddf: int3   

----------------------------------------------------------------------
l2d  138 l2d  [0xa756ce00, 0xa756ce20]  32 bytes

  0xa756ce00: pop    %eax
  0xa756ce01: pop    %edx
  0xa756ce02: push   %edx
  0xa756ce03: push   %eax
  0xa756ce04: fildll (%esp)
  0xa756ce07: fstpl  (%esp)
  0xa756ce0a: fldl   (%esp)
  0xa756ce0d: pop    %ecx
  0xa756ce0e: pop    %ecx
  0xa756ce0f: movzbl 0x1(%esi),%ebx
  0xa756ce13: inc    %esi
  0xa756ce14: jmp    *-0x487232e0(,%ebx,4)
  0xa756ce1b: nop
  0xa756ce1c: int3   
  0xa756ce1d: int3   
  0xa756ce1e: int3   
  0xa756ce1f: int3   

----------------------------------------------------------------------
f2i  139 f2i  [0xa756ce40, 0xa756ce80]  64 bytes

  0xa756ce40: flds   (%esp)
  0xa756ce43: add    $0x4,%esp
  0xa756ce46: push   %ecx
  0xa756ce47: fstps  (%esp)
  0xa756ce4a: cmpl   $0x0,-0x8(%ebp)
  0xa756ce51: je     0xa756ce68
  0xa756ce57: push   $0xb7449b18
  0xa756ce5c: call   0xa756ce61
  0xa756ce61: pusha  
  0xa756ce62: call   0xb6ff5f32
  0xa756ce67: hlt    
  0xa756ce68: call   0xb7172314
  0xa756ce6d: add    $0x4,%esp
  0xa756ce70: movzbl 0x1(%esi),%ebx
  0xa756ce74: inc    %esi
  0xa756ce75: jmp    *-0x48723ee0(,%ebx,4)
  0xa756ce7c: int3   
  0xa756ce7d: int3   
  0xa756ce7e: int3   
  0xa756ce7f: int3   

----------------------------------------------------------------------
f2l  140 f2l  [0xa756cea0, 0xa756cee0]  64 bytes

  0xa756cea0: flds   (%esp)
  0xa756cea3: add    $0x4,%esp
  0xa756cea6: push   %ecx
  0xa756cea7: fstps  (%esp)
  0xa756ceaa: cmpl   $0x0,-0x8(%ebp)
  0xa756ceb1: je     0xa756cec8
  0xa756ceb7: push   $0xb7449b18
  0xa756cebc: call   0xa756cec1
  0xa756cec1: pusha  
  0xa756cec2: call   0xb6ff5f32
  0xa756cec7: hlt    
  0xa756cec8: call   0xb71724b8
  0xa756cecd: add    $0x4,%esp
  0xa756ced0: movzbl 0x1(%esi),%ebx
  0xa756ced4: inc    %esi
  0xa756ced5: jmp    *-0x48723ae0(,%ebx,4)
  0xa756cedc: int3   
  0xa756cedd: int3   
  0xa756cede: int3   
  0xa756cedf: int3   

----------------------------------------------------------------------
f2d  141 f2d  [0xa756cf00, 0xa756cf20]  32 bytes

  0xa756cf00: flds   (%esp)
  0xa756cf03: add    $0x4,%esp
  0xa756cf06: movzbl 0x1(%esi),%ebx
  0xa756cf0a: inc    %esi
  0xa756cf0b: jmp    *-0x487232e0(,%ebx,4)
  0xa756cf12: nop
  0xa756cf13: nop
  0xa756cf14: int3   
  0xa756cf15: int3   
  0xa756cf16: int3   
  0xa756cf17: int3   
  0xa756cf18: int3   
  0xa756cf19: int3   
  0xa756cf1a: int3   
  0xa756cf1b: int3   
  0xa756cf1c: int3   
  0xa756cf1d: int3   
  0xa756cf1e: int3   
  0xa756cf1f: int3   

----------------------------------------------------------------------
d2i  142 d2i  [0xa756cf40, 0xa756cf80]  64 bytes

  0xa756cf40: fldl   (%esp)
  0xa756cf43: add    $0x8,%esp
  0xa756cf46: push   %ecx
  0xa756cf47: push   %ecx
  0xa756cf48: fstpl  (%esp)
  0xa756cf4b: cmpl   $0x0,-0x8(%ebp)
  0xa756cf52: je     0xa756cf69
  0xa756cf58: push   $0xb7449b18
  0xa756cf5d: call   0xa756cf62
  0xa756cf62: pusha  
  0xa756cf63: call   0xb6ff5f32
  0xa756cf68: hlt    
  0xa756cf69: call   0xb7172672
  0xa756cf6e: add    $0x8,%esp
  0xa756cf71: movzbl 0x1(%esi),%ebx
  0xa756cf75: inc    %esi
  0xa756cf76: jmp    *-0x48723ee0(,%ebx,4)
  0xa756cf7d: nop
  0xa756cf7e: nop
  0xa756cf7f: nop

----------------------------------------------------------------------
d2l  143 d2l  [0xa756cfa0, 0xa756cfe0]  64 bytes

  0xa756cfa0: fldl   (%esp)
  0xa756cfa3: add    $0x8,%esp
  0xa756cfa6: push   %ecx
  0xa756cfa7: push   %ecx
  0xa756cfa8: fstpl  (%esp)
  0xa756cfab: cmpl   $0x0,-0x8(%ebp)
  0xa756cfb2: je     0xa756cfc9
  0xa756cfb8: push   $0xb7449b18
  0xa756cfbd: call   0xa756cfc2
  0xa756cfc2: pusha  
  0xa756cfc3: call   0xb6ff5f32
  0xa756cfc8: hlt    
  0xa756cfc9: call   0xb7172826
  0xa756cfce: add    $0x8,%esp
  0xa756cfd1: movzbl 0x1(%esi),%ebx
  0xa756cfd5: inc    %esi
  0xa756cfd6: jmp    *-0x48723ae0(,%ebx,4)
  0xa756cfdd: nop
  0xa756cfde: nop
  0xa756cfdf: nop

----------------------------------------------------------------------
d2f  144 d2f  [0xa756d000, 0xa756d020]  32 bytes

  0xa756d000: fldl   (%esp)
  0xa756d003: add    $0x8,%esp
  0xa756d006: push   %ecx
  0xa756d007: fstps  (%esp)
  0xa756d00a: flds   (%esp)
  0xa756d00d: pop    %ecx
  0xa756d00e: movzbl 0x1(%esi),%ebx
  0xa756d012: inc    %esi
  0xa756d013: jmp    *-0x487236e0(,%ebx,4)
  0xa756d01a: nop
  0xa756d01b: nop
  0xa756d01c: int3   
  0xa756d01d: int3   
  0xa756d01e: int3   
  0xa756d01f: int3   

----------------------------------------------------------------------
i2b  145 i2b  [0xa756d040, 0xa756d060]  32 bytes

  0xa756d040: pop    %eax
  0xa756d041: shl    $0x18,%eax
  0xa756d044: sar    $0x18,%eax
  0xa756d047: movzbl 0x1(%esi),%ebx
  0xa756d04b: inc    %esi
  0xa756d04c: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d053: nop
  0xa756d054: int3   
  0xa756d055: int3   
  0xa756d056: int3   
  0xa756d057: int3   
  0xa756d058: int3   
  0xa756d059: int3   
  0xa756d05a: int3   
  0xa756d05b: int3   
  0xa756d05c: int3   
  0xa756d05d: int3   
  0xa756d05e: int3   
  0xa756d05f: int3   

----------------------------------------------------------------------
i2c  146 i2c  [0xa756d080, 0xa756d0a0]  32 bytes

  0xa756d080: pop    %eax
  0xa756d081: and    $0xffff,%eax
  0xa756d087: movzbl 0x1(%esi),%ebx
  0xa756d08b: inc    %esi
  0xa756d08c: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d093: nop
  0xa756d094: int3   
  0xa756d095: int3   
  0xa756d096: int3   
  0xa756d097: int3   
  0xa756d098: int3   
  0xa756d099: int3   
  0xa756d09a: int3   
  0xa756d09b: int3   
  0xa756d09c: int3   
  0xa756d09d: int3   
  0xa756d09e: int3   
  0xa756d09f: int3   

----------------------------------------------------------------------
i2s  147 i2s  [0xa756d0c0, 0xa756d0e0]  32 bytes

  0xa756d0c0: pop    %eax
  0xa756d0c1: shl    $0x10,%eax
  0xa756d0c4: sar    $0x10,%eax
  0xa756d0c7: movzbl 0x1(%esi),%ebx
  0xa756d0cb: inc    %esi
  0xa756d0cc: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d0d3: nop
  0xa756d0d4: int3   
  0xa756d0d5: int3   
  0xa756d0d6: int3   
  0xa756d0d7: int3   
  0xa756d0d8: int3   
  0xa756d0d9: int3   
  0xa756d0da: int3   
  0xa756d0db: int3   
  0xa756d0dc: int3   
  0xa756d0dd: int3   
  0xa756d0de: int3   
  0xa756d0df: int3   

----------------------------------------------------------------------
lcmp  148 lcmp  [0xa756d100, 0xa756d140]  64 bytes

  0xa756d100: pop    %eax
  0xa756d101: pop    %edx
  0xa756d102: pop    %ebx
  0xa756d103: pop    %ecx
  0xa756d104: cmp    %edx,%ecx
  0xa756d106: jl     0xa756d12a
  0xa756d10c: jg     0xa756d122
  0xa756d112: xor    %ecx,%ecx
  0xa756d114: cmp    %eax,%ebx
  0xa756d116: jb     0xa756d12a
  0xa756d11c: je     0xa756d12d
  0xa756d122: xor    %ecx,%ecx
  0xa756d124: inc    %ecx
  0xa756d125: jmp    0xa756d12d
  0xa756d12a: xor    %ecx,%ecx
  0xa756d12c: dec    %ecx
  0xa756d12d: mov    %ecx,%eax
  0xa756d12f: movzbl 0x1(%esi),%ebx
  0xa756d133: inc    %esi
  0xa756d134: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d13b: nop
  0xa756d13c: int3   
  0xa756d13d: int3   
  0xa756d13e: int3   
  0xa756d13f: int3   

----------------------------------------------------------------------
fcmpl  149 fcmpl  [0xa756d160, 0xa756d1a0]  64 bytes

  0xa756d160: flds   (%esp)
  0xa756d163: add    $0x4,%esp
  0xa756d166: flds   (%esp)
  0xa756d169: pop    %ecx
  0xa756d16a: fucomip %st(1),%st
  0xa756d16c: ffree  %st(0)
  0xa756d16e: fincstp 
  0xa756d170: mov    $0xffffffff,%eax
  0xa756d175: jp     0xa756d18d
  0xa756d17b: jb     0xa756d18d
  0xa756d181: mov    $0x0,%eax
  0xa756d186: je     0xa756d18d
  0xa756d18c: inc    %eax
  0xa756d18d: movzbl 0x1(%esi),%ebx
  0xa756d191: inc    %esi
  0xa756d192: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d199: nop
  0xa756d19a: nop
  0xa756d19b: nop
  0xa756d19c: int3   
  0xa756d19d: int3   
  0xa756d19e: int3   
  0xa756d19f: int3   

----------------------------------------------------------------------
fcmpg  150 fcmpg  [0xa756d1c0, 0xa756d200]  64 bytes

  0xa756d1c0: flds   (%esp)
  0xa756d1c3: add    $0x4,%esp
  0xa756d1c6: flds   (%esp)
  0xa756d1c9: pop    %ecx
  0xa756d1ca: fucomip %st(1),%st
  0xa756d1cc: ffree  %st(0)
  0xa756d1ce: fincstp 
  0xa756d1d0: mov    $0x1,%eax
  0xa756d1d5: jp     0xa756d1ed
  0xa756d1db: ja     0xa756d1ed
  0xa756d1e1: mov    $0x0,%eax
  0xa756d1e6: je     0xa756d1ed
  0xa756d1ec: dec    %eax
  0xa756d1ed: movzbl 0x1(%esi),%ebx
  0xa756d1f1: inc    %esi
  0xa756d1f2: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d1f9: nop
  0xa756d1fa: nop
  0xa756d1fb: nop
  0xa756d1fc: int3   
  0xa756d1fd: int3   
  0xa756d1fe: int3   
  0xa756d1ff: int3   

----------------------------------------------------------------------
dcmpl  151 dcmpl  [0xa756d220, 0xa756d260]  64 bytes

  0xa756d220: fldl   (%esp)
  0xa756d223: add    $0x8,%esp
  0xa756d226: fldl   (%esp)
  0xa756d229: pop    %edx
  0xa756d22a: pop    %ecx
  0xa756d22b: fucomip %st(1),%st
  0xa756d22d: ffree  %st(0)
  0xa756d22f: fincstp 
  0xa756d231: mov    $0xffffffff,%eax
  0xa756d236: jp     0xa756d24e
  0xa756d23c: jb     0xa756d24e
  0xa756d242: mov    $0x0,%eax
  0xa756d247: je     0xa756d24e
  0xa756d24d: inc    %eax
  0xa756d24e: movzbl 0x1(%esi),%ebx
  0xa756d252: inc    %esi
  0xa756d253: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d25a: nop
  0xa756d25b: nop
  0xa756d25c: int3   
  0xa756d25d: int3   
  0xa756d25e: int3   
  0xa756d25f: int3   

----------------------------------------------------------------------
dcmpg  152 dcmpg  [0xa756d280, 0xa756d2c0]  64 bytes

  0xa756d280: fldl   (%esp)
  0xa756d283: add    $0x8,%esp
  0xa756d286: fldl   (%esp)
  0xa756d289: pop    %edx
  0xa756d28a: pop    %ecx
  0xa756d28b: fucomip %st(1),%st
  0xa756d28d: ffree  %st(0)
  0xa756d28f: fincstp 
  0xa756d291: mov    $0x1,%eax
  0xa756d296: jp     0xa756d2ae
  0xa756d29c: ja     0xa756d2ae
  0xa756d2a2: mov    $0x0,%eax
  0xa756d2a7: je     0xa756d2ae
  0xa756d2ad: dec    %eax
  0xa756d2ae: movzbl 0x1(%esi),%ebx
  0xa756d2b2: inc    %esi
  0xa756d2b3: jmp    *-0x48723ee0(,%ebx,4)
  0xa756d2ba: nop
  0xa756d2bb: nop
  0xa756d2bc: int3   
  0xa756d2bd: int3   
  0xa756d2be: int3   
  0xa756d2bf: int3   

----------------------------------------------------------------------
ifeq  153 ifeq  [0xa756d2e0, 0xa756d740]  1120 bytes

  0xa756d2e0: pop    %eax
  0xa756d2e1: push   %eax
  0xa756d2e2: push   %ebx
  0xa756d2e3: push   %ecx
  0xa756d2e4: push   %edx
  0xa756d2e5: mov    -0x10(%ebp),%ecx
  0xa756d2e8: test   %ecx,%ecx
  0xa756d2ea: je     0xa756d32e
  0xa756d2f0: mov    -0xc(%ebp),%ebx
  0xa756d2f3: movzwl 0x2(%ecx),%edx
  0xa756d2f7: add    0x8(%ebx),%edx
  0xa756d2fa: lea    0x28(%edx),%edx
  0xa756d2fd: cmp    %esi,%edx
  0xa756d2ff: je     0xa756d32e
  0xa756d305: push   %ecx
  0xa756d306: push   %esi
  0xa756d307: push   %ebx
  0xa756d308: cmpl   $0x0,-0x8(%ebp)
  0xa756d30f: je     0xa756d326
  0xa756d315: push   $0xb7449b18
  0xa756d31a: call   0xa756d31f
  0xa756d31f: pusha  
  0xa756d320: call   0xb6ff5f32
  0xa756d325: hlt    
  0xa756d326: call   0xb6e61602
  0xa756d32b: add    $0xc,%esp
  0xa756d32e: pop    %edx
  0xa756d32f: pop    %ecx
  0xa756d330: pop    %ebx
  0xa756d331: pop    %eax
  0xa756d332: test   %eax,%eax
  0xa756d334: jne    0xa756d701
  0xa756d33a: mov    -0xc(%ebp),%ecx
  0xa756d33d: mov    -0x10(%ebp),%eax
  0xa756d340: test   %eax,%eax
  0xa756d342: je     0xa756d35a
  0xa756d348: mov    0x4(%eax),%ebx
  0xa756d34b: add    $0x1,%ebx
  0xa756d34e: sbb    $0x0,%ebx
  0xa756d351: mov    %ebx,0x4(%eax)
  0xa756d354: add    0x8(%eax),%eax
  0xa756d357: mov    %eax,-0x10(%ebp)
  0xa756d35a: movswl 0x1(%esi),%edx
  0xa756d35e: bswap  %edx
  0xa756d360: sar    $0x10,%edx
  0xa756d363: add    %edx,%esi
  0xa756d365: test   %edx,%edx
  0xa756d367: jns    0xa756d470
  0xa756d36d: mov    0x10(%ecx),%eax
  0xa756d370: test   %eax,%eax
  0xa756d372: jne    0xa756d431
  0xa756d378: push   %edx
  0xa756d379: push   %ecx
  0xa756d37a: call   0xa756d384
  0xa756d37f: jmp    0xa756d424
  0xa756d384: push   %ecx
  0xa756d385: lea    0x8(%esp),%eax
  0xa756d389: cmpl   $0x0,-0x8(%ebp)
  0xa756d390: je     0xa756d3a7
  0xa756d396: push   $0xb7449b58
  0xa756d39b: call   0xa756d3a0
  0xa756d3a0: pusha  
  0xa756d3a1: call   0xb6ff5f32
  0xa756d3a6: hlt    
  0xa756d3a7: mov    %esi,-0x1c(%ebp)
  0xa756d3aa: mov    %esp,%edi
  0xa756d3ac: shr    $0xc,%edi
  0xa756d3af: mov    -0x4871aba0(,%edi,4),%edi
  0xa756d3b6: push   %edi
  0xa756d3b7: mov    %ebp,0x148(%edi)
  0xa756d3bd: mov    %eax,0x140(%edi)
  0xa756d3c3: call   0xb6e61c92
  0xa756d3c8: add    $0x8,%esp
  0xa756d3cb: push   %eax
  0xa756d3cc: mov    %esp,%eax
  0xa756d3ce: shr    $0xc,%eax
  0xa756d3d1: mov    -0x4871aba0(,%eax,4),%eax
  0xa756d3d8: cmp    %eax,%edi
  0xa756d3da: je     0xa756d3f1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756d3e0: push   $0xb74acf8c
  0xa756d3e5: call   0xa756d3ea
  0xa756d3ea: pusha  
  0xa756d3eb: call   0xb6ff5f32
  0xa756d3f0: hlt    
  0xa756d3f1: pop    %eax
  0xa756d3f2: movl   $0x0,0x140(%edi)
  0xa756d3fc: movl   $0x0,0x148(%edi)
  0xa756d406: movl   $0x0,0x144(%edi)
  0xa756d410: cmpl   $0x0,0x4(%edi)
  0xa756d417: jne    0xa7556400
  0xa756d41d: mov    -0x1c(%ebp),%esi
  0xa756d420: mov    -0x18(%ebp),%edi
  0xa756d423: ret    
  0xa756d424: pop    %ecx
  0xa756d425: pop    %edx
  0xa756d426: mov    0x10(%ecx),%eax
  0xa756d429: test   %eax,%eax
  0xa756d42b: je     0xa756d470
  0xa756d431: mov    0xc(%ecx),%ebx
  0xa756d434: test   %ebx,%ebx
  0xa756d436: je     0xa756d458
  0xa756d438: mov    0xc0(%ebx),%eax
  0xa756d43e: add    $0x8,%eax
  0xa756d441: mov    %eax,0xc0(%ebx)
  0xa756d447: and    $0x1ff8,%eax
  0xa756d44d: je     0xa756d573
  0xa756d453: jmp    0xa756d470
  0xa756d458: mov    0x10(%ecx),%ecx
  0xa756d45b: mov    0xc(%ecx),%eax
  0xa756d45e: add    $0x8,%eax
  0xa756d461: mov    %eax,0xc(%ecx)
  0xa756d464: and    $0x1ff8,%eax
  0xa756d46a: je     0xa756d573
  0xa756d470: movzbl (%esi),%ebx
  0xa756d473: jmp    *-0x48722ae0(,%ebx,4)
  0xa756d47a: call   0xa756d484
  0xa756d47f: jmp    0xa756d523
  0xa756d484: lea    0x4(%esp),%eax
  0xa756d488: cmpl   $0x0,-0x8(%ebp)
  0xa756d48f: je     0xa756d4a6
  0xa756d495: push   $0xb7449b58
  0xa756d49a: call   0xa756d49f
  0xa756d49f: pusha  
  0xa756d4a0: call   0xb6ff5f32
  0xa756d4a5: hlt    
  0xa756d4a6: mov    %esi,-0x1c(%ebp)
  0xa756d4a9: mov    %esp,%edi
  0xa756d4ab: shr    $0xc,%edi
  0xa756d4ae: mov    -0x4871aba0(,%edi,4),%edi
  0xa756d4b5: push   %edi
  0xa756d4b6: mov    %ebp,0x148(%edi)
  0xa756d4bc: mov    %eax,0x140(%edi)
  0xa756d4c2: call   0xb6e61328
  0xa756d4c7: add    $0x4,%esp
  0xa756d4ca: push   %eax
  0xa756d4cb: mov    %esp,%eax
  0xa756d4cd: shr    $0xc,%eax
  0xa756d4d0: mov    -0x4871aba0(,%eax,4),%eax
  0xa756d4d7: cmp    %eax,%edi
  0xa756d4d9: je     0xa756d4f0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756d4df: push   $0xb74acf8c
  0xa756d4e4: call   0xa756d4e9
  0xa756d4e9: pusha  
  0xa756d4ea: call   0xb6ff5f32
  0xa756d4ef: hlt    
  0xa756d4f0: pop    %eax
  0xa756d4f1: movl   $0x0,0x140(%edi)
  0xa756d4fb: movl   $0x0,0x148(%edi)
  0xa756d505: movl   $0x0,0x144(%edi)
  0xa756d50f: cmpl   $0x0,0x4(%edi)
  0xa756d516: jne    0xa7556400
  0xa756d51c: mov    -0x1c(%ebp),%esi
  0xa756d51f: mov    -0x18(%ebp),%edi
  0xa756d522: ret    
  0xa756d523: movzbl (%esi),%ebx
  0xa756d526: push   %eax
  0xa756d527: push   %ebx
  0xa756d528: mov    -0xc(%ebp),%ebx
  0xa756d52b: mov    0xc(%ebx),%eax
  0xa756d52e: test   %eax,%eax
  0xa756d530: je     0xa756d569
  0xa756d536: push   %esi
  0xa756d537: push   %ebx
  0xa756d538: cmpl   $0x0,-0x8(%ebp)
  0xa756d53f: je     0xa756d556
  0xa756d545: push   $0xb7449b18
  0xa756d54a: call   0xa756d54f
  0xa756d54f: pusha  
  0xa756d550: call   0xb6ff5f32
  0xa756d555: hlt    
  0xa756d556: call   0xb6e61172
  0xa756d55b: add    $0x8,%esp
  0xa756d55e: mov    0xc(%ebx),%ebx
  0xa756d561: add    $0xe0,%ebx
  0xa756d567: add    %ebx,%eax
  0xa756d569: mov    %eax,-0x10(%ebp)
  0xa756d56c: pop    %ebx
  0xa756d56d: pop    %eax
  0xa756d56e: jmp    0xa756d470
  0xa756d573: neg    %edx
  0xa756d575: add    %esi,%edx
  0xa756d577: call   0xa756d581
  0xa756d57c: jmp    0xa756d621
  0xa756d581: push   %edx
  0xa756d582: lea    0x8(%esp),%eax
  0xa756d586: cmpl   $0x0,-0x8(%ebp)
  0xa756d58d: je     0xa756d5a4
  0xa756d593: push   $0xb7449b58
  0xa756d598: call   0xa756d59d
  0xa756d59d: pusha  
  0xa756d59e: call   0xb6ff5f32
  0xa756d5a3: hlt    
  0xa756d5a4: mov    %esi,-0x1c(%ebp)
  0xa756d5a7: mov    %esp,%edi
  0xa756d5a9: shr    $0xc,%edi
  0xa756d5ac: mov    -0x4871aba0(,%edi,4),%edi
  0xa756d5b3: push   %edi
  0xa756d5b4: mov    %ebp,0x148(%edi)
  0xa756d5ba: mov    %eax,0x140(%edi)
  0xa756d5c0: call   0xb6e60bc8
  0xa756d5c5: add    $0x8,%esp
  0xa756d5c8: push   %eax
  0xa756d5c9: mov    %esp,%eax
  0xa756d5cb: shr    $0xc,%eax
  0xa756d5ce: mov    -0x4871aba0(,%eax,4),%eax
  0xa756d5d5: cmp    %eax,%edi
  0xa756d5d7: je     0xa756d5ee
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756d5dd: push   $0xb74acf8c
  0xa756d5e2: call   0xa756d5e7
  0xa756d5e7: pusha  
  0xa756d5e8: call   0xb6ff5f32
  0xa756d5ed: hlt    
  0xa756d5ee: pop    %eax
  0xa756d5ef: movl   $0x0,0x140(%edi)
  0xa756d5f9: movl   $0x0,0x148(%edi)
  0xa756d603: movl   $0x0,0x144(%edi)
  0xa756d60d: cmpl   $0x0,0x4(%edi)
  0xa756d614: jne    0xa7556400
  0xa756d61a: mov    -0x1c(%ebp),%esi
  0xa756d61d: mov    -0x18(%ebp),%edi
  0xa756d620: ret    
  0xa756d621: movzbl (%esi),%ebx
  0xa756d624: test   %eax,%eax
  0xa756d626: je     0xa756d470
  0xa756d62c: mov    0x38(%eax),%ecx
  0xa756d62f: cmp    $0xfffffffe,%ecx
  0xa756d632: je     0xa756d470
  0xa756d638: mov    %eax,%ebx
  0xa756d63a: mov    %esp,%ecx
  0xa756d63c: shr    $0xc,%ecx
  0xa756d63f: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756d646: call   0xa756d650
  0xa756d64b: jmp    0xa756d6ef
  0xa756d650: lea    0x4(%esp),%eax
  0xa756d654: cmpl   $0x0,-0x8(%ebp)
  0xa756d65b: je     0xa756d672
  0xa756d661: push   $0xb7449b58
  0xa756d666: call   0xa756d66b
  0xa756d66b: pusha  
  0xa756d66c: call   0xb6ff5f32
  0xa756d671: hlt    
  0xa756d672: mov    %esi,-0x1c(%ebp)
  0xa756d675: mov    %esp,%edi
  0xa756d677: shr    $0xc,%edi
  0xa756d67a: mov    -0x4871aba0(,%edi,4),%edi
  0xa756d681: push   %edi
  0xa756d682: mov    %ebp,0x148(%edi)
  0xa756d688: mov    %eax,0x140(%edi)
  0xa756d68e: call   0xb717c684
  0xa756d693: add    $0x4,%esp
  0xa756d696: push   %eax
  0xa756d697: mov    %esp,%eax
  0xa756d699: shr    $0xc,%eax
  0xa756d69c: mov    -0x4871aba0(,%eax,4),%eax
  0xa756d6a3: cmp    %eax,%edi
  0xa756d6a5: je     0xa756d6bc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756d6ab: push   $0xb74acf8c
  0xa756d6b0: call   0xa756d6b5
  0xa756d6b5: pusha  
  0xa756d6b6: call   0xb6ff5f32
  0xa756d6bb: hlt    
  0xa756d6bc: pop    %eax
  0xa756d6bd: movl   $0x0,0x140(%edi)
  0xa756d6c7: movl   $0x0,0x148(%edi)
  0xa756d6d1: movl   $0x0,0x144(%edi)
  0xa756d6db: cmpl   $0x0,0x4(%edi)
  0xa756d6e2: jne    0xa7556400
  0xa756d6e8: mov    -0x1c(%ebp),%esi
  0xa756d6eb: mov    -0x18(%ebp),%edi
  0xa756d6ee: ret    
  0xa756d6ef: mov    %eax,%ecx
  0xa756d6f1: mov    -0x4(%ebp),%edx
  0xa756d6f4: mov    %ebp,%esp
  0xa756d6f6: pop    %ebp
  0xa756d6f7: pop    %edi
  0xa756d6f8: mov    %edx,%esp
  0xa756d6fa: and    $0xfffffff0,%esp
  0xa756d6fd: push   %edi
  0xa756d6fe: jmp    *0x58(%ebx)
  0xa756d701: mov    -0x10(%ebp),%eax
  0xa756d704: test   %eax,%eax
  0xa756d706: je     0xa756d71a
  0xa756d70c: addl   $0x1,0xc(%eax)
  0xa756d710: sbbl   $0x0,0xc(%eax)
  0xa756d714: add    $0x10,%eax
  0xa756d717: mov    %eax,-0x10(%ebp)
  0xa756d71a: movzbl 0x3(%esi),%ebx
  0xa756d71e: add    $0x3,%esi
  0xa756d721: jmp    *-0x48722ae0(,%ebx,4)
  0xa756d728: int3   
  0xa756d729: int3   
  0xa756d72a: int3   
  0xa756d72b: int3   
  0xa756d72c: int3   
  0xa756d72d: int3   
  0xa756d72e: int3   
  0xa756d72f: int3   
  0xa756d730: int3   
  0xa756d731: int3   
  0xa756d732: int3   
  0xa756d733: int3   
  0xa756d734: int3   
  0xa756d735: int3   
  0xa756d736: int3   
  0xa756d737: int3   
  0xa756d738: int3   
  0xa756d739: int3   
  0xa756d73a: int3   
  0xa756d73b: int3   
  0xa756d73c: int3   
  0xa756d73d: int3   
  0xa756d73e: int3   
  0xa756d73f: int3   

----------------------------------------------------------------------
ifne  154 ifne  [0xa756d760, 0xa756dbc0]  1120 bytes

  0xa756d760: pop    %eax
  0xa756d761: push   %eax
  0xa756d762: push   %ebx
  0xa756d763: push   %ecx
  0xa756d764: push   %edx
  0xa756d765: mov    -0x10(%ebp),%ecx
  0xa756d768: test   %ecx,%ecx
  0xa756d76a: je     0xa756d7ae
  0xa756d770: mov    -0xc(%ebp),%ebx
  0xa756d773: movzwl 0x2(%ecx),%edx
  0xa756d777: add    0x8(%ebx),%edx
  0xa756d77a: lea    0x28(%edx),%edx
  0xa756d77d: cmp    %esi,%edx
  0xa756d77f: je     0xa756d7ae
  0xa756d785: push   %ecx
  0xa756d786: push   %esi
  0xa756d787: push   %ebx
  0xa756d788: cmpl   $0x0,-0x8(%ebp)
  0xa756d78f: je     0xa756d7a6
  0xa756d795: push   $0xb7449b18
  0xa756d79a: call   0xa756d79f
  0xa756d79f: pusha  
  0xa756d7a0: call   0xb6ff5f32
  0xa756d7a5: hlt    
  0xa756d7a6: call   0xb6e61602
  0xa756d7ab: add    $0xc,%esp
  0xa756d7ae: pop    %edx
  0xa756d7af: pop    %ecx
  0xa756d7b0: pop    %ebx
  0xa756d7b1: pop    %eax
  0xa756d7b2: test   %eax,%eax
  0xa756d7b4: je     0xa756db81
  0xa756d7ba: mov    -0xc(%ebp),%ecx
  0xa756d7bd: mov    -0x10(%ebp),%eax
  0xa756d7c0: test   %eax,%eax
  0xa756d7c2: je     0xa756d7da
  0xa756d7c8: mov    0x4(%eax),%ebx
  0xa756d7cb: add    $0x1,%ebx
  0xa756d7ce: sbb    $0x0,%ebx
  0xa756d7d1: mov    %ebx,0x4(%eax)
  0xa756d7d4: add    0x8(%eax),%eax
  0xa756d7d7: mov    %eax,-0x10(%ebp)
  0xa756d7da: movswl 0x1(%esi),%edx
  0xa756d7de: bswap  %edx
  0xa756d7e0: sar    $0x10,%edx
  0xa756d7e3: add    %edx,%esi
  0xa756d7e5: test   %edx,%edx
  0xa756d7e7: jns    0xa756d8f0
  0xa756d7ed: mov    0x10(%ecx),%eax
  0xa756d7f0: test   %eax,%eax
  0xa756d7f2: jne    0xa756d8b1
  0xa756d7f8: push   %edx
  0xa756d7f9: push   %ecx
  0xa756d7fa: call   0xa756d804
  0xa756d7ff: jmp    0xa756d8a4
  0xa756d804: push   %ecx
  0xa756d805: lea    0x8(%esp),%eax
  0xa756d809: cmpl   $0x0,-0x8(%ebp)
  0xa756d810: je     0xa756d827
  0xa756d816: push   $0xb7449b58
  0xa756d81b: call   0xa756d820
  0xa756d820: pusha  
  0xa756d821: call   0xb6ff5f32
  0xa756d826: hlt    
  0xa756d827: mov    %esi,-0x1c(%ebp)
  0xa756d82a: mov    %esp,%edi
  0xa756d82c: shr    $0xc,%edi
  0xa756d82f: mov    -0x4871aba0(,%edi,4),%edi
  0xa756d836: push   %edi
  0xa756d837: mov    %ebp,0x148(%edi)
  0xa756d83d: mov    %eax,0x140(%edi)
  0xa756d843: call   0xb6e61c92
  0xa756d848: add    $0x8,%esp
  0xa756d84b: push   %eax
  0xa756d84c: mov    %esp,%eax
  0xa756d84e: shr    $0xc,%eax
  0xa756d851: mov    -0x4871aba0(,%eax,4),%eax
  0xa756d858: cmp    %eax,%edi
  0xa756d85a: je     0xa756d871
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756d860: push   $0xb74acf8c
  0xa756d865: call   0xa756d86a
  0xa756d86a: pusha  
  0xa756d86b: call   0xb6ff5f32
  0xa756d870: hlt    
  0xa756d871: pop    %eax
  0xa756d872: movl   $0x0,0x140(%edi)
  0xa756d87c: movl   $0x0,0x148(%edi)
  0xa756d886: movl   $0x0,0x144(%edi)
  0xa756d890: cmpl   $0x0,0x4(%edi)
  0xa756d897: jne    0xa7556400
  0xa756d89d: mov    -0x1c(%ebp),%esi
  0xa756d8a0: mov    -0x18(%ebp),%edi
  0xa756d8a3: ret    
  0xa756d8a4: pop    %ecx
  0xa756d8a5: pop    %edx
  0xa756d8a6: mov    0x10(%ecx),%eax
  0xa756d8a9: test   %eax,%eax
  0xa756d8ab: je     0xa756d8f0
  0xa756d8b1: mov    0xc(%ecx),%ebx
  0xa756d8b4: test   %ebx,%ebx
  0xa756d8b6: je     0xa756d8d8
  0xa756d8b8: mov    0xc0(%ebx),%eax
  0xa756d8be: add    $0x8,%eax
  0xa756d8c1: mov    %eax,0xc0(%ebx)
  0xa756d8c7: and    $0x1ff8,%eax
  0xa756d8cd: je     0xa756d9f3
  0xa756d8d3: jmp    0xa756d8f0
  0xa756d8d8: mov    0x10(%ecx),%ecx
  0xa756d8db: mov    0xc(%ecx),%eax
  0xa756d8de: add    $0x8,%eax
  0xa756d8e1: mov    %eax,0xc(%ecx)
  0xa756d8e4: and    $0x1ff8,%eax
  0xa756d8ea: je     0xa756d9f3
  0xa756d8f0: movzbl (%esi),%ebx
  0xa756d8f3: jmp    *-0x48722ae0(,%ebx,4)
  0xa756d8fa: call   0xa756d904
  0xa756d8ff: jmp    0xa756d9a3
  0xa756d904: lea    0x4(%esp),%eax
  0xa756d908: cmpl   $0x0,-0x8(%ebp)
  0xa756d90f: je     0xa756d926
  0xa756d915: push   $0xb7449b58
  0xa756d91a: call   0xa756d91f
  0xa756d91f: pusha  
  0xa756d920: call   0xb6ff5f32
  0xa756d925: hlt    
  0xa756d926: mov    %esi,-0x1c(%ebp)
  0xa756d929: mov    %esp,%edi
  0xa756d92b: shr    $0xc,%edi
  0xa756d92e: mov    -0x4871aba0(,%edi,4),%edi
  0xa756d935: push   %edi
  0xa756d936: mov    %ebp,0x148(%edi)
  0xa756d93c: mov    %eax,0x140(%edi)
  0xa756d942: call   0xb6e61328
  0xa756d947: add    $0x4,%esp
  0xa756d94a: push   %eax
  0xa756d94b: mov    %esp,%eax
  0xa756d94d: shr    $0xc,%eax
  0xa756d950: mov    -0x4871aba0(,%eax,4),%eax
  0xa756d957: cmp    %eax,%edi
  0xa756d959: je     0xa756d970
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756d95f: push   $0xb74acf8c
  0xa756d964: call   0xa756d969
  0xa756d969: pusha  
  0xa756d96a: call   0xb6ff5f32
  0xa756d96f: hlt    
  0xa756d970: pop    %eax
  0xa756d971: movl   $0x0,0x140(%edi)
  0xa756d97b: movl   $0x0,0x148(%edi)
  0xa756d985: movl   $0x0,0x144(%edi)
  0xa756d98f: cmpl   $0x0,0x4(%edi)
  0xa756d996: jne    0xa7556400
  0xa756d99c: mov    -0x1c(%ebp),%esi
  0xa756d99f: mov    -0x18(%ebp),%edi
  0xa756d9a2: ret    
  0xa756d9a3: movzbl (%esi),%ebx
  0xa756d9a6: push   %eax
  0xa756d9a7: push   %ebx
  0xa756d9a8: mov    -0xc(%ebp),%ebx
  0xa756d9ab: mov    0xc(%ebx),%eax
  0xa756d9ae: test   %eax,%eax
  0xa756d9b0: je     0xa756d9e9
  0xa756d9b6: push   %esi
  0xa756d9b7: push   %ebx
  0xa756d9b8: cmpl   $0x0,-0x8(%ebp)
  0xa756d9bf: je     0xa756d9d6
  0xa756d9c5: push   $0xb7449b18
  0xa756d9ca: call   0xa756d9cf
  0xa756d9cf: pusha  
  0xa756d9d0: call   0xb6ff5f32
  0xa756d9d5: hlt    
  0xa756d9d6: call   0xb6e61172
  0xa756d9db: add    $0x8,%esp
  0xa756d9de: mov    0xc(%ebx),%ebx
  0xa756d9e1: add    $0xe0,%ebx
  0xa756d9e7: add    %ebx,%eax
  0xa756d9e9: mov    %eax,-0x10(%ebp)
  0xa756d9ec: pop    %ebx
  0xa756d9ed: pop    %eax
  0xa756d9ee: jmp    0xa756d8f0
  0xa756d9f3: neg    %edx
  0xa756d9f5: add    %esi,%edx
  0xa756d9f7: call   0xa756da01
  0xa756d9fc: jmp    0xa756daa1
  0xa756da01: push   %edx
  0xa756da02: lea    0x8(%esp),%eax
  0xa756da06: cmpl   $0x0,-0x8(%ebp)
  0xa756da0d: je     0xa756da24
  0xa756da13: push   $0xb7449b58
  0xa756da18: call   0xa756da1d
  0xa756da1d: pusha  
  0xa756da1e: call   0xb6ff5f32
  0xa756da23: hlt    
  0xa756da24: mov    %esi,-0x1c(%ebp)
  0xa756da27: mov    %esp,%edi
  0xa756da29: shr    $0xc,%edi
  0xa756da2c: mov    -0x4871aba0(,%edi,4),%edi
  0xa756da33: push   %edi
  0xa756da34: mov    %ebp,0x148(%edi)
  0xa756da3a: mov    %eax,0x140(%edi)
  0xa756da40: call   0xb6e60bc8
  0xa756da45: add    $0x8,%esp
  0xa756da48: push   %eax
  0xa756da49: mov    %esp,%eax
  0xa756da4b: shr    $0xc,%eax
  0xa756da4e: mov    -0x4871aba0(,%eax,4),%eax
  0xa756da55: cmp    %eax,%edi
  0xa756da57: je     0xa756da6e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756da5d: push   $0xb74acf8c
  0xa756da62: call   0xa756da67
  0xa756da67: pusha  
  0xa756da68: call   0xb6ff5f32
  0xa756da6d: hlt    
  0xa756da6e: pop    %eax
  0xa756da6f: movl   $0x0,0x140(%edi)
  0xa756da79: movl   $0x0,0x148(%edi)
  0xa756da83: movl   $0x0,0x144(%edi)
  0xa756da8d: cmpl   $0x0,0x4(%edi)
  0xa756da94: jne    0xa7556400
  0xa756da9a: mov    -0x1c(%ebp),%esi
  0xa756da9d: mov    -0x18(%ebp),%edi
  0xa756daa0: ret    
  0xa756daa1: movzbl (%esi),%ebx
  0xa756daa4: test   %eax,%eax
  0xa756daa6: je     0xa756d8f0
  0xa756daac: mov    0x38(%eax),%ecx
  0xa756daaf: cmp    $0xfffffffe,%ecx
  0xa756dab2: je     0xa756d8f0
  0xa756dab8: mov    %eax,%ebx
  0xa756daba: mov    %esp,%ecx
  0xa756dabc: shr    $0xc,%ecx
  0xa756dabf: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756dac6: call   0xa756dad0
  0xa756dacb: jmp    0xa756db6f
  0xa756dad0: lea    0x4(%esp),%eax
  0xa756dad4: cmpl   $0x0,-0x8(%ebp)
  0xa756dadb: je     0xa756daf2
  0xa756dae1: push   $0xb7449b58
  0xa756dae6: call   0xa756daeb
  0xa756daeb: pusha  
  0xa756daec: call   0xb6ff5f32
  0xa756daf1: hlt    
  0xa756daf2: mov    %esi,-0x1c(%ebp)
  0xa756daf5: mov    %esp,%edi
  0xa756daf7: shr    $0xc,%edi
  0xa756dafa: mov    -0x4871aba0(,%edi,4),%edi
  0xa756db01: push   %edi
  0xa756db02: mov    %ebp,0x148(%edi)
  0xa756db08: mov    %eax,0x140(%edi)
  0xa756db0e: call   0xb717c684
  0xa756db13: add    $0x4,%esp
  0xa756db16: push   %eax
  0xa756db17: mov    %esp,%eax
  0xa756db19: shr    $0xc,%eax
  0xa756db1c: mov    -0x4871aba0(,%eax,4),%eax
  0xa756db23: cmp    %eax,%edi
  0xa756db25: je     0xa756db3c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756db2b: push   $0xb74acf8c
  0xa756db30: call   0xa756db35
  0xa756db35: pusha  
  0xa756db36: call   0xb6ff5f32
  0xa756db3b: hlt    
  0xa756db3c: pop    %eax
  0xa756db3d: movl   $0x0,0x140(%edi)
  0xa756db47: movl   $0x0,0x148(%edi)
  0xa756db51: movl   $0x0,0x144(%edi)
  0xa756db5b: cmpl   $0x0,0x4(%edi)
  0xa756db62: jne    0xa7556400
  0xa756db68: mov    -0x1c(%ebp),%esi
  0xa756db6b: mov    -0x18(%ebp),%edi
  0xa756db6e: ret    
  0xa756db6f: mov    %eax,%ecx
  0xa756db71: mov    -0x4(%ebp),%edx
  0xa756db74: mov    %ebp,%esp
  0xa756db76: pop    %ebp
  0xa756db77: pop    %edi
  0xa756db78: mov    %edx,%esp
  0xa756db7a: and    $0xfffffff0,%esp
  0xa756db7d: push   %edi
  0xa756db7e: jmp    *0x58(%ebx)
  0xa756db81: mov    -0x10(%ebp),%eax
  0xa756db84: test   %eax,%eax
  0xa756db86: je     0xa756db9a
  0xa756db8c: addl   $0x1,0xc(%eax)
  0xa756db90: sbbl   $0x0,0xc(%eax)
  0xa756db94: add    $0x10,%eax
  0xa756db97: mov    %eax,-0x10(%ebp)
  0xa756db9a: movzbl 0x3(%esi),%ebx
  0xa756db9e: add    $0x3,%esi
  0xa756dba1: jmp    *-0x48722ae0(,%ebx,4)
  0xa756dba8: int3   
  0xa756dba9: int3   
  0xa756dbaa: int3   
  0xa756dbab: int3   
  0xa756dbac: int3   
  0xa756dbad: int3   
  0xa756dbae: int3   
  0xa756dbaf: int3   
  0xa756dbb0: int3   
  0xa756dbb1: int3   
  0xa756dbb2: int3   
  0xa756dbb3: int3   
  0xa756dbb4: int3   
  0xa756dbb5: int3   
  0xa756dbb6: int3   
  0xa756dbb7: int3   
  0xa756dbb8: int3   
  0xa756dbb9: int3   
  0xa756dbba: int3   
  0xa756dbbb: int3   
  0xa756dbbc: int3   
  0xa756dbbd: int3   
  0xa756dbbe: int3   
  0xa756dbbf: int3   

----------------------------------------------------------------------
iflt  155 iflt  [0xa756dbe0, 0xa756e040]  1120 bytes

  0xa756dbe0: pop    %eax
  0xa756dbe1: push   %eax
  0xa756dbe2: push   %ebx
  0xa756dbe3: push   %ecx
  0xa756dbe4: push   %edx
  0xa756dbe5: mov    -0x10(%ebp),%ecx
  0xa756dbe8: test   %ecx,%ecx
  0xa756dbea: je     0xa756dc2e
  0xa756dbf0: mov    -0xc(%ebp),%ebx
  0xa756dbf3: movzwl 0x2(%ecx),%edx
  0xa756dbf7: add    0x8(%ebx),%edx
  0xa756dbfa: lea    0x28(%edx),%edx
  0xa756dbfd: cmp    %esi,%edx
  0xa756dbff: je     0xa756dc2e
  0xa756dc05: push   %ecx
  0xa756dc06: push   %esi
  0xa756dc07: push   %ebx
  0xa756dc08: cmpl   $0x0,-0x8(%ebp)
  0xa756dc0f: je     0xa756dc26
  0xa756dc15: push   $0xb7449b18
  0xa756dc1a: call   0xa756dc1f
  0xa756dc1f: pusha  
  0xa756dc20: call   0xb6ff5f32
  0xa756dc25: hlt    
  0xa756dc26: call   0xb6e61602
  0xa756dc2b: add    $0xc,%esp
  0xa756dc2e: pop    %edx
  0xa756dc2f: pop    %ecx
  0xa756dc30: pop    %ebx
  0xa756dc31: pop    %eax
  0xa756dc32: test   %eax,%eax
  0xa756dc34: jge    0xa756e001
  0xa756dc3a: mov    -0xc(%ebp),%ecx
  0xa756dc3d: mov    -0x10(%ebp),%eax
  0xa756dc40: test   %eax,%eax
  0xa756dc42: je     0xa756dc5a
  0xa756dc48: mov    0x4(%eax),%ebx
  0xa756dc4b: add    $0x1,%ebx
  0xa756dc4e: sbb    $0x0,%ebx
  0xa756dc51: mov    %ebx,0x4(%eax)
  0xa756dc54: add    0x8(%eax),%eax
  0xa756dc57: mov    %eax,-0x10(%ebp)
  0xa756dc5a: movswl 0x1(%esi),%edx
  0xa756dc5e: bswap  %edx
  0xa756dc60: sar    $0x10,%edx
  0xa756dc63: add    %edx,%esi
  0xa756dc65: test   %edx,%edx
  0xa756dc67: jns    0xa756dd70
  0xa756dc6d: mov    0x10(%ecx),%eax
  0xa756dc70: test   %eax,%eax
  0xa756dc72: jne    0xa756dd31
  0xa756dc78: push   %edx
  0xa756dc79: push   %ecx
  0xa756dc7a: call   0xa756dc84
  0xa756dc7f: jmp    0xa756dd24
  0xa756dc84: push   %ecx
  0xa756dc85: lea    0x8(%esp),%eax
  0xa756dc89: cmpl   $0x0,-0x8(%ebp)
  0xa756dc90: je     0xa756dca7
  0xa756dc96: push   $0xb7449b58
  0xa756dc9b: call   0xa756dca0
  0xa756dca0: pusha  
  0xa756dca1: call   0xb6ff5f32
  0xa756dca6: hlt    
  0xa756dca7: mov    %esi,-0x1c(%ebp)
  0xa756dcaa: mov    %esp,%edi
  0xa756dcac: shr    $0xc,%edi
  0xa756dcaf: mov    -0x4871aba0(,%edi,4),%edi
  0xa756dcb6: push   %edi
  0xa756dcb7: mov    %ebp,0x148(%edi)
  0xa756dcbd: mov    %eax,0x140(%edi)
  0xa756dcc3: call   0xb6e61c92
  0xa756dcc8: add    $0x8,%esp
  0xa756dccb: push   %eax
  0xa756dccc: mov    %esp,%eax
  0xa756dcce: shr    $0xc,%eax
  0xa756dcd1: mov    -0x4871aba0(,%eax,4),%eax
  0xa756dcd8: cmp    %eax,%edi
  0xa756dcda: je     0xa756dcf1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756dce0: push   $0xb74acf8c
  0xa756dce5: call   0xa756dcea
  0xa756dcea: pusha  
  0xa756dceb: call   0xb6ff5f32
  0xa756dcf0: hlt    
  0xa756dcf1: pop    %eax
  0xa756dcf2: movl   $0x0,0x140(%edi)
  0xa756dcfc: movl   $0x0,0x148(%edi)
  0xa756dd06: movl   $0x0,0x144(%edi)
  0xa756dd10: cmpl   $0x0,0x4(%edi)
  0xa756dd17: jne    0xa7556400
  0xa756dd1d: mov    -0x1c(%ebp),%esi
  0xa756dd20: mov    -0x18(%ebp),%edi
  0xa756dd23: ret    
  0xa756dd24: pop    %ecx
  0xa756dd25: pop    %edx
  0xa756dd26: mov    0x10(%ecx),%eax
  0xa756dd29: test   %eax,%eax
  0xa756dd2b: je     0xa756dd70
  0xa756dd31: mov    0xc(%ecx),%ebx
  0xa756dd34: test   %ebx,%ebx
  0xa756dd36: je     0xa756dd58
  0xa756dd38: mov    0xc0(%ebx),%eax
  0xa756dd3e: add    $0x8,%eax
  0xa756dd41: mov    %eax,0xc0(%ebx)
  0xa756dd47: and    $0x1ff8,%eax
  0xa756dd4d: je     0xa756de73
  0xa756dd53: jmp    0xa756dd70
  0xa756dd58: mov    0x10(%ecx),%ecx
  0xa756dd5b: mov    0xc(%ecx),%eax
  0xa756dd5e: add    $0x8,%eax
  0xa756dd61: mov    %eax,0xc(%ecx)
  0xa756dd64: and    $0x1ff8,%eax
  0xa756dd6a: je     0xa756de73
  0xa756dd70: movzbl (%esi),%ebx
  0xa756dd73: jmp    *-0x48722ae0(,%ebx,4)
  0xa756dd7a: call   0xa756dd84
  0xa756dd7f: jmp    0xa756de23
  0xa756dd84: lea    0x4(%esp),%eax
  0xa756dd88: cmpl   $0x0,-0x8(%ebp)
  0xa756dd8f: je     0xa756dda6
  0xa756dd95: push   $0xb7449b58
  0xa756dd9a: call   0xa756dd9f
  0xa756dd9f: pusha  
  0xa756dda0: call   0xb6ff5f32
  0xa756dda5: hlt    
  0xa756dda6: mov    %esi,-0x1c(%ebp)
  0xa756dda9: mov    %esp,%edi
  0xa756ddab: shr    $0xc,%edi
  0xa756ddae: mov    -0x4871aba0(,%edi,4),%edi
  0xa756ddb5: push   %edi
  0xa756ddb6: mov    %ebp,0x148(%edi)
  0xa756ddbc: mov    %eax,0x140(%edi)
  0xa756ddc2: call   0xb6e61328
  0xa756ddc7: add    $0x4,%esp
  0xa756ddca: push   %eax
  0xa756ddcb: mov    %esp,%eax
  0xa756ddcd: shr    $0xc,%eax
  0xa756ddd0: mov    -0x4871aba0(,%eax,4),%eax
  0xa756ddd7: cmp    %eax,%edi
  0xa756ddd9: je     0xa756ddf0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756dddf: push   $0xb74acf8c
  0xa756dde4: call   0xa756dde9
  0xa756dde9: pusha  
  0xa756ddea: call   0xb6ff5f32
  0xa756ddef: hlt    
  0xa756ddf0: pop    %eax
  0xa756ddf1: movl   $0x0,0x140(%edi)
  0xa756ddfb: movl   $0x0,0x148(%edi)
  0xa756de05: movl   $0x0,0x144(%edi)
  0xa756de0f: cmpl   $0x0,0x4(%edi)
  0xa756de16: jne    0xa7556400
  0xa756de1c: mov    -0x1c(%ebp),%esi
  0xa756de1f: mov    -0x18(%ebp),%edi
  0xa756de22: ret    
  0xa756de23: movzbl (%esi),%ebx
  0xa756de26: push   %eax
  0xa756de27: push   %ebx
  0xa756de28: mov    -0xc(%ebp),%ebx
  0xa756de2b: mov    0xc(%ebx),%eax
  0xa756de2e: test   %eax,%eax
  0xa756de30: je     0xa756de69
  0xa756de36: push   %esi
  0xa756de37: push   %ebx
  0xa756de38: cmpl   $0x0,-0x8(%ebp)
  0xa756de3f: je     0xa756de56
  0xa756de45: push   $0xb7449b18
  0xa756de4a: call   0xa756de4f
  0xa756de4f: pusha  
  0xa756de50: call   0xb6ff5f32
  0xa756de55: hlt    
  0xa756de56: call   0xb6e61172
  0xa756de5b: add    $0x8,%esp
  0xa756de5e: mov    0xc(%ebx),%ebx
  0xa756de61: add    $0xe0,%ebx
  0xa756de67: add    %ebx,%eax
  0xa756de69: mov    %eax,-0x10(%ebp)
  0xa756de6c: pop    %ebx
  0xa756de6d: pop    %eax
  0xa756de6e: jmp    0xa756dd70
  0xa756de73: neg    %edx
  0xa756de75: add    %esi,%edx
  0xa756de77: call   0xa756de81
  0xa756de7c: jmp    0xa756df21
  0xa756de81: push   %edx
  0xa756de82: lea    0x8(%esp),%eax
  0xa756de86: cmpl   $0x0,-0x8(%ebp)
  0xa756de8d: je     0xa756dea4
  0xa756de93: push   $0xb7449b58
  0xa756de98: call   0xa756de9d
  0xa756de9d: pusha  
  0xa756de9e: call   0xb6ff5f32
  0xa756dea3: hlt    
  0xa756dea4: mov    %esi,-0x1c(%ebp)
  0xa756dea7: mov    %esp,%edi
  0xa756dea9: shr    $0xc,%edi
  0xa756deac: mov    -0x4871aba0(,%edi,4),%edi
  0xa756deb3: push   %edi
  0xa756deb4: mov    %ebp,0x148(%edi)
  0xa756deba: mov    %eax,0x140(%edi)
  0xa756dec0: call   0xb6e60bc8
  0xa756dec5: add    $0x8,%esp
  0xa756dec8: push   %eax
  0xa756dec9: mov    %esp,%eax
  0xa756decb: shr    $0xc,%eax
  0xa756dece: mov    -0x4871aba0(,%eax,4),%eax
  0xa756ded5: cmp    %eax,%edi
  0xa756ded7: je     0xa756deee
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756dedd: push   $0xb74acf8c
  0xa756dee2: call   0xa756dee7
  0xa756dee7: pusha  
  0xa756dee8: call   0xb6ff5f32
  0xa756deed: hlt    
  0xa756deee: pop    %eax
  0xa756deef: movl   $0x0,0x140(%edi)
  0xa756def9: movl   $0x0,0x148(%edi)
  0xa756df03: movl   $0x0,0x144(%edi)
  0xa756df0d: cmpl   $0x0,0x4(%edi)
  0xa756df14: jne    0xa7556400
  0xa756df1a: mov    -0x1c(%ebp),%esi
  0xa756df1d: mov    -0x18(%ebp),%edi
  0xa756df20: ret    
  0xa756df21: movzbl (%esi),%ebx
  0xa756df24: test   %eax,%eax
  0xa756df26: je     0xa756dd70
  0xa756df2c: mov    0x38(%eax),%ecx
  0xa756df2f: cmp    $0xfffffffe,%ecx
  0xa756df32: je     0xa756dd70
  0xa756df38: mov    %eax,%ebx
  0xa756df3a: mov    %esp,%ecx
  0xa756df3c: shr    $0xc,%ecx
  0xa756df3f: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756df46: call   0xa756df50
  0xa756df4b: jmp    0xa756dfef
  0xa756df50: lea    0x4(%esp),%eax
  0xa756df54: cmpl   $0x0,-0x8(%ebp)
  0xa756df5b: je     0xa756df72
  0xa756df61: push   $0xb7449b58
  0xa756df66: call   0xa756df6b
  0xa756df6b: pusha  
  0xa756df6c: call   0xb6ff5f32
  0xa756df71: hlt    
  0xa756df72: mov    %esi,-0x1c(%ebp)
  0xa756df75: mov    %esp,%edi
  0xa756df77: shr    $0xc,%edi
  0xa756df7a: mov    -0x4871aba0(,%edi,4),%edi
  0xa756df81: push   %edi
  0xa756df82: mov    %ebp,0x148(%edi)
  0xa756df88: mov    %eax,0x140(%edi)
  0xa756df8e: call   0xb717c684
  0xa756df93: add    $0x4,%esp
  0xa756df96: push   %eax
  0xa756df97: mov    %esp,%eax
  0xa756df99: shr    $0xc,%eax
  0xa756df9c: mov    -0x4871aba0(,%eax,4),%eax
  0xa756dfa3: cmp    %eax,%edi
  0xa756dfa5: je     0xa756dfbc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756dfab: push   $0xb74acf8c
  0xa756dfb0: call   0xa756dfb5
  0xa756dfb5: pusha  
  0xa756dfb6: call   0xb6ff5f32
  0xa756dfbb: hlt    
  0xa756dfbc: pop    %eax
  0xa756dfbd: movl   $0x0,0x140(%edi)
  0xa756dfc7: movl   $0x0,0x148(%edi)
  0xa756dfd1: movl   $0x0,0x144(%edi)
  0xa756dfdb: cmpl   $0x0,0x4(%edi)
  0xa756dfe2: jne    0xa7556400
  0xa756dfe8: mov    -0x1c(%ebp),%esi
  0xa756dfeb: mov    -0x18(%ebp),%edi
  0xa756dfee: ret    
  0xa756dfef: mov    %eax,%ecx
  0xa756dff1: mov    -0x4(%ebp),%edx
  0xa756dff4: mov    %ebp,%esp
  0xa756dff6: pop    %ebp
  0xa756dff7: pop    %edi
  0xa756dff8: mov    %edx,%esp
  0xa756dffa: and    $0xfffffff0,%esp
  0xa756dffd: push   %edi
  0xa756dffe: jmp    *0x58(%ebx)
  0xa756e001: mov    -0x10(%ebp),%eax
  0xa756e004: test   %eax,%eax
  0xa756e006: je     0xa756e01a
  0xa756e00c: addl   $0x1,0xc(%eax)
  0xa756e010: sbbl   $0x0,0xc(%eax)
  0xa756e014: add    $0x10,%eax
  0xa756e017: mov    %eax,-0x10(%ebp)
  0xa756e01a: movzbl 0x3(%esi),%ebx
  0xa756e01e: add    $0x3,%esi
  0xa756e021: jmp    *-0x48722ae0(,%ebx,4)
  0xa756e028: int3   
  0xa756e029: int3   
  0xa756e02a: int3   
  0xa756e02b: int3   
  0xa756e02c: int3   
  0xa756e02d: int3   
  0xa756e02e: int3   
  0xa756e02f: int3   
  0xa756e030: int3   
  0xa756e031: int3   
  0xa756e032: int3   
  0xa756e033: int3   
  0xa756e034: int3   
  0xa756e035: int3   
  0xa756e036: int3   
  0xa756e037: int3   
  0xa756e038: int3   
  0xa756e039: int3   
  0xa756e03a: int3   
  0xa756e03b: int3   
  0xa756e03c: int3   
  0xa756e03d: int3   
  0xa756e03e: int3   
  0xa756e03f: int3   

----------------------------------------------------------------------
ifge  156 ifge  [0xa756e060, 0xa756e4c0]  1120 bytes

  0xa756e060: pop    %eax
  0xa756e061: push   %eax
  0xa756e062: push   %ebx
  0xa756e063: push   %ecx
  0xa756e064: push   %edx
  0xa756e065: mov    -0x10(%ebp),%ecx
  0xa756e068: test   %ecx,%ecx
  0xa756e06a: je     0xa756e0ae
  0xa756e070: mov    -0xc(%ebp),%ebx
  0xa756e073: movzwl 0x2(%ecx),%edx
  0xa756e077: add    0x8(%ebx),%edx
  0xa756e07a: lea    0x28(%edx),%edx
  0xa756e07d: cmp    %esi,%edx
  0xa756e07f: je     0xa756e0ae
  0xa756e085: push   %ecx
  0xa756e086: push   %esi
  0xa756e087: push   %ebx
  0xa756e088: cmpl   $0x0,-0x8(%ebp)
  0xa756e08f: je     0xa756e0a6
  0xa756e095: push   $0xb7449b18
  0xa756e09a: call   0xa756e09f
  0xa756e09f: pusha  
  0xa756e0a0: call   0xb6ff5f32
  0xa756e0a5: hlt    
  0xa756e0a6: call   0xb6e61602
  0xa756e0ab: add    $0xc,%esp
  0xa756e0ae: pop    %edx
  0xa756e0af: pop    %ecx
  0xa756e0b0: pop    %ebx
  0xa756e0b1: pop    %eax
  0xa756e0b2: test   %eax,%eax
  0xa756e0b4: jl     0xa756e481
  0xa756e0ba: mov    -0xc(%ebp),%ecx
  0xa756e0bd: mov    -0x10(%ebp),%eax
  0xa756e0c0: test   %eax,%eax
  0xa756e0c2: je     0xa756e0da
  0xa756e0c8: mov    0x4(%eax),%ebx
  0xa756e0cb: add    $0x1,%ebx
  0xa756e0ce: sbb    $0x0,%ebx
  0xa756e0d1: mov    %ebx,0x4(%eax)
  0xa756e0d4: add    0x8(%eax),%eax
  0xa756e0d7: mov    %eax,-0x10(%ebp)
  0xa756e0da: movswl 0x1(%esi),%edx
  0xa756e0de: bswap  %edx
  0xa756e0e0: sar    $0x10,%edx
  0xa756e0e3: add    %edx,%esi
  0xa756e0e5: test   %edx,%edx
  0xa756e0e7: jns    0xa756e1f0
  0xa756e0ed: mov    0x10(%ecx),%eax
  0xa756e0f0: test   %eax,%eax
  0xa756e0f2: jne    0xa756e1b1
  0xa756e0f8: push   %edx
  0xa756e0f9: push   %ecx
  0xa756e0fa: call   0xa756e104
  0xa756e0ff: jmp    0xa756e1a4
  0xa756e104: push   %ecx
  0xa756e105: lea    0x8(%esp),%eax
  0xa756e109: cmpl   $0x0,-0x8(%ebp)
  0xa756e110: je     0xa756e127
  0xa756e116: push   $0xb7449b58
  0xa756e11b: call   0xa756e120
  0xa756e120: pusha  
  0xa756e121: call   0xb6ff5f32
  0xa756e126: hlt    
  0xa756e127: mov    %esi,-0x1c(%ebp)
  0xa756e12a: mov    %esp,%edi
  0xa756e12c: shr    $0xc,%edi
  0xa756e12f: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e136: push   %edi
  0xa756e137: mov    %ebp,0x148(%edi)
  0xa756e13d: mov    %eax,0x140(%edi)
  0xa756e143: call   0xb6e61c92
  0xa756e148: add    $0x8,%esp
  0xa756e14b: push   %eax
  0xa756e14c: mov    %esp,%eax
  0xa756e14e: shr    $0xc,%eax
  0xa756e151: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e158: cmp    %eax,%edi
  0xa756e15a: je     0xa756e171
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e160: push   $0xb74acf8c
  0xa756e165: call   0xa756e16a
  0xa756e16a: pusha  
  0xa756e16b: call   0xb6ff5f32
  0xa756e170: hlt    
  0xa756e171: pop    %eax
  0xa756e172: movl   $0x0,0x140(%edi)
  0xa756e17c: movl   $0x0,0x148(%edi)
  0xa756e186: movl   $0x0,0x144(%edi)
  0xa756e190: cmpl   $0x0,0x4(%edi)
  0xa756e197: jne    0xa7556400
  0xa756e19d: mov    -0x1c(%ebp),%esi
  0xa756e1a0: mov    -0x18(%ebp),%edi
  0xa756e1a3: ret    
  0xa756e1a4: pop    %ecx
  0xa756e1a5: pop    %edx
  0xa756e1a6: mov    0x10(%ecx),%eax
  0xa756e1a9: test   %eax,%eax
  0xa756e1ab: je     0xa756e1f0
  0xa756e1b1: mov    0xc(%ecx),%ebx
  0xa756e1b4: test   %ebx,%ebx
  0xa756e1b6: je     0xa756e1d8
  0xa756e1b8: mov    0xc0(%ebx),%eax
  0xa756e1be: add    $0x8,%eax
  0xa756e1c1: mov    %eax,0xc0(%ebx)
  0xa756e1c7: and    $0x1ff8,%eax
  0xa756e1cd: je     0xa756e2f3
  0xa756e1d3: jmp    0xa756e1f0
  0xa756e1d8: mov    0x10(%ecx),%ecx
  0xa756e1db: mov    0xc(%ecx),%eax
  0xa756e1de: add    $0x8,%eax
  0xa756e1e1: mov    %eax,0xc(%ecx)
  0xa756e1e4: and    $0x1ff8,%eax
  0xa756e1ea: je     0xa756e2f3
  0xa756e1f0: movzbl (%esi),%ebx
  0xa756e1f3: jmp    *-0x48722ae0(,%ebx,4)
  0xa756e1fa: call   0xa756e204
  0xa756e1ff: jmp    0xa756e2a3
  0xa756e204: lea    0x4(%esp),%eax
  0xa756e208: cmpl   $0x0,-0x8(%ebp)
  0xa756e20f: je     0xa756e226
  0xa756e215: push   $0xb7449b58
  0xa756e21a: call   0xa756e21f
  0xa756e21f: pusha  
  0xa756e220: call   0xb6ff5f32
  0xa756e225: hlt    
  0xa756e226: mov    %esi,-0x1c(%ebp)
  0xa756e229: mov    %esp,%edi
  0xa756e22b: shr    $0xc,%edi
  0xa756e22e: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e235: push   %edi
  0xa756e236: mov    %ebp,0x148(%edi)
  0xa756e23c: mov    %eax,0x140(%edi)
  0xa756e242: call   0xb6e61328
  0xa756e247: add    $0x4,%esp
  0xa756e24a: push   %eax
  0xa756e24b: mov    %esp,%eax
  0xa756e24d: shr    $0xc,%eax
  0xa756e250: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e257: cmp    %eax,%edi
  0xa756e259: je     0xa756e270
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e25f: push   $0xb74acf8c
  0xa756e264: call   0xa756e269
  0xa756e269: pusha  
  0xa756e26a: call   0xb6ff5f32
  0xa756e26f: hlt    
  0xa756e270: pop    %eax
  0xa756e271: movl   $0x0,0x140(%edi)
  0xa756e27b: movl   $0x0,0x148(%edi)
  0xa756e285: movl   $0x0,0x144(%edi)
  0xa756e28f: cmpl   $0x0,0x4(%edi)
  0xa756e296: jne    0xa7556400
  0xa756e29c: mov    -0x1c(%ebp),%esi
  0xa756e29f: mov    -0x18(%ebp),%edi
  0xa756e2a2: ret    
  0xa756e2a3: movzbl (%esi),%ebx
  0xa756e2a6: push   %eax
  0xa756e2a7: push   %ebx
  0xa756e2a8: mov    -0xc(%ebp),%ebx
  0xa756e2ab: mov    0xc(%ebx),%eax
  0xa756e2ae: test   %eax,%eax
  0xa756e2b0: je     0xa756e2e9
  0xa756e2b6: push   %esi
  0xa756e2b7: push   %ebx
  0xa756e2b8: cmpl   $0x0,-0x8(%ebp)
  0xa756e2bf: je     0xa756e2d6
  0xa756e2c5: push   $0xb7449b18
  0xa756e2ca: call   0xa756e2cf
  0xa756e2cf: pusha  
  0xa756e2d0: call   0xb6ff5f32
  0xa756e2d5: hlt    
  0xa756e2d6: call   0xb6e61172
  0xa756e2db: add    $0x8,%esp
  0xa756e2de: mov    0xc(%ebx),%ebx
  0xa756e2e1: add    $0xe0,%ebx
  0xa756e2e7: add    %ebx,%eax
  0xa756e2e9: mov    %eax,-0x10(%ebp)
  0xa756e2ec: pop    %ebx
  0xa756e2ed: pop    %eax
  0xa756e2ee: jmp    0xa756e1f0
  0xa756e2f3: neg    %edx
  0xa756e2f5: add    %esi,%edx
  0xa756e2f7: call   0xa756e301
  0xa756e2fc: jmp    0xa756e3a1
  0xa756e301: push   %edx
  0xa756e302: lea    0x8(%esp),%eax
  0xa756e306: cmpl   $0x0,-0x8(%ebp)
  0xa756e30d: je     0xa756e324
  0xa756e313: push   $0xb7449b58
  0xa756e318: call   0xa756e31d
  0xa756e31d: pusha  
  0xa756e31e: call   0xb6ff5f32
  0xa756e323: hlt    
  0xa756e324: mov    %esi,-0x1c(%ebp)
  0xa756e327: mov    %esp,%edi
  0xa756e329: shr    $0xc,%edi
  0xa756e32c: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e333: push   %edi
  0xa756e334: mov    %ebp,0x148(%edi)
  0xa756e33a: mov    %eax,0x140(%edi)
  0xa756e340: call   0xb6e60bc8
  0xa756e345: add    $0x8,%esp
  0xa756e348: push   %eax
  0xa756e349: mov    %esp,%eax
  0xa756e34b: shr    $0xc,%eax
  0xa756e34e: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e355: cmp    %eax,%edi
  0xa756e357: je     0xa756e36e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e35d: push   $0xb74acf8c
  0xa756e362: call   0xa756e367
  0xa756e367: pusha  
  0xa756e368: call   0xb6ff5f32
  0xa756e36d: hlt    
  0xa756e36e: pop    %eax
  0xa756e36f: movl   $0x0,0x140(%edi)
  0xa756e379: movl   $0x0,0x148(%edi)
  0xa756e383: movl   $0x0,0x144(%edi)
  0xa756e38d: cmpl   $0x0,0x4(%edi)
  0xa756e394: jne    0xa7556400
  0xa756e39a: mov    -0x1c(%ebp),%esi
  0xa756e39d: mov    -0x18(%ebp),%edi
  0xa756e3a0: ret    
  0xa756e3a1: movzbl (%esi),%ebx
  0xa756e3a4: test   %eax,%eax
  0xa756e3a6: je     0xa756e1f0
  0xa756e3ac: mov    0x38(%eax),%ecx
  0xa756e3af: cmp    $0xfffffffe,%ecx
  0xa756e3b2: je     0xa756e1f0
  0xa756e3b8: mov    %eax,%ebx
  0xa756e3ba: mov    %esp,%ecx
  0xa756e3bc: shr    $0xc,%ecx
  0xa756e3bf: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756e3c6: call   0xa756e3d0
  0xa756e3cb: jmp    0xa756e46f
  0xa756e3d0: lea    0x4(%esp),%eax
  0xa756e3d4: cmpl   $0x0,-0x8(%ebp)
  0xa756e3db: je     0xa756e3f2
  0xa756e3e1: push   $0xb7449b58
  0xa756e3e6: call   0xa756e3eb
  0xa756e3eb: pusha  
  0xa756e3ec: call   0xb6ff5f32
  0xa756e3f1: hlt    
  0xa756e3f2: mov    %esi,-0x1c(%ebp)
  0xa756e3f5: mov    %esp,%edi
  0xa756e3f7: shr    $0xc,%edi
  0xa756e3fa: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e401: push   %edi
  0xa756e402: mov    %ebp,0x148(%edi)
  0xa756e408: mov    %eax,0x140(%edi)
  0xa756e40e: call   0xb717c684
  0xa756e413: add    $0x4,%esp
  0xa756e416: push   %eax
  0xa756e417: mov    %esp,%eax
  0xa756e419: shr    $0xc,%eax
  0xa756e41c: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e423: cmp    %eax,%edi
  0xa756e425: je     0xa756e43c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e42b: push   $0xb74acf8c
  0xa756e430: call   0xa756e435
  0xa756e435: pusha  
  0xa756e436: call   0xb6ff5f32
  0xa756e43b: hlt    
  0xa756e43c: pop    %eax
  0xa756e43d: movl   $0x0,0x140(%edi)
  0xa756e447: movl   $0x0,0x148(%edi)
  0xa756e451: movl   $0x0,0x144(%edi)
  0xa756e45b: cmpl   $0x0,0x4(%edi)
  0xa756e462: jne    0xa7556400
  0xa756e468: mov    -0x1c(%ebp),%esi
  0xa756e46b: mov    -0x18(%ebp),%edi
  0xa756e46e: ret    
  0xa756e46f: mov    %eax,%ecx
  0xa756e471: mov    -0x4(%ebp),%edx
  0xa756e474: mov    %ebp,%esp
  0xa756e476: pop    %ebp
  0xa756e477: pop    %edi
  0xa756e478: mov    %edx,%esp
  0xa756e47a: and    $0xfffffff0,%esp
  0xa756e47d: push   %edi
  0xa756e47e: jmp    *0x58(%ebx)
  0xa756e481: mov    -0x10(%ebp),%eax
  0xa756e484: test   %eax,%eax
  0xa756e486: je     0xa756e49a
  0xa756e48c: addl   $0x1,0xc(%eax)
  0xa756e490: sbbl   $0x0,0xc(%eax)
  0xa756e494: add    $0x10,%eax
  0xa756e497: mov    %eax,-0x10(%ebp)
  0xa756e49a: movzbl 0x3(%esi),%ebx
  0xa756e49e: add    $0x3,%esi
  0xa756e4a1: jmp    *-0x48722ae0(,%ebx,4)
  0xa756e4a8: int3   
  0xa756e4a9: int3   
  0xa756e4aa: int3   
  0xa756e4ab: int3   
  0xa756e4ac: int3   
  0xa756e4ad: int3   
  0xa756e4ae: int3   
  0xa756e4af: int3   
  0xa756e4b0: int3   
  0xa756e4b1: int3   
  0xa756e4b2: int3   
  0xa756e4b3: int3   
  0xa756e4b4: int3   
  0xa756e4b5: int3   
  0xa756e4b6: int3   
  0xa756e4b7: int3   
  0xa756e4b8: int3   
  0xa756e4b9: int3   
  0xa756e4ba: int3   
  0xa756e4bb: int3   
  0xa756e4bc: int3   
  0xa756e4bd: int3   
  0xa756e4be: int3   
  0xa756e4bf: int3   

----------------------------------------------------------------------
ifgt  157 ifgt  [0xa756e4e0, 0xa756e940]  1120 bytes

  0xa756e4e0: pop    %eax
  0xa756e4e1: push   %eax
  0xa756e4e2: push   %ebx
  0xa756e4e3: push   %ecx
  0xa756e4e4: push   %edx
  0xa756e4e5: mov    -0x10(%ebp),%ecx
  0xa756e4e8: test   %ecx,%ecx
  0xa756e4ea: je     0xa756e52e
  0xa756e4f0: mov    -0xc(%ebp),%ebx
  0xa756e4f3: movzwl 0x2(%ecx),%edx
  0xa756e4f7: add    0x8(%ebx),%edx
  0xa756e4fa: lea    0x28(%edx),%edx
  0xa756e4fd: cmp    %esi,%edx
  0xa756e4ff: je     0xa756e52e
  0xa756e505: push   %ecx
  0xa756e506: push   %esi
  0xa756e507: push   %ebx
  0xa756e508: cmpl   $0x0,-0x8(%ebp)
  0xa756e50f: je     0xa756e526
  0xa756e515: push   $0xb7449b18
  0xa756e51a: call   0xa756e51f
  0xa756e51f: pusha  
  0xa756e520: call   0xb6ff5f32
  0xa756e525: hlt    
  0xa756e526: call   0xb6e61602
  0xa756e52b: add    $0xc,%esp
  0xa756e52e: pop    %edx
  0xa756e52f: pop    %ecx
  0xa756e530: pop    %ebx
  0xa756e531: pop    %eax
  0xa756e532: test   %eax,%eax
  0xa756e534: jle    0xa756e901
  0xa756e53a: mov    -0xc(%ebp),%ecx
  0xa756e53d: mov    -0x10(%ebp),%eax
  0xa756e540: test   %eax,%eax
  0xa756e542: je     0xa756e55a
  0xa756e548: mov    0x4(%eax),%ebx
  0xa756e54b: add    $0x1,%ebx
  0xa756e54e: sbb    $0x0,%ebx
  0xa756e551: mov    %ebx,0x4(%eax)
  0xa756e554: add    0x8(%eax),%eax
  0xa756e557: mov    %eax,-0x10(%ebp)
  0xa756e55a: movswl 0x1(%esi),%edx
  0xa756e55e: bswap  %edx
  0xa756e560: sar    $0x10,%edx
  0xa756e563: add    %edx,%esi
  0xa756e565: test   %edx,%edx
  0xa756e567: jns    0xa756e670
  0xa756e56d: mov    0x10(%ecx),%eax
  0xa756e570: test   %eax,%eax
  0xa756e572: jne    0xa756e631
  0xa756e578: push   %edx
  0xa756e579: push   %ecx
  0xa756e57a: call   0xa756e584
  0xa756e57f: jmp    0xa756e624
  0xa756e584: push   %ecx
  0xa756e585: lea    0x8(%esp),%eax
  0xa756e589: cmpl   $0x0,-0x8(%ebp)
  0xa756e590: je     0xa756e5a7
  0xa756e596: push   $0xb7449b58
  0xa756e59b: call   0xa756e5a0
  0xa756e5a0: pusha  
  0xa756e5a1: call   0xb6ff5f32
  0xa756e5a6: hlt    
  0xa756e5a7: mov    %esi,-0x1c(%ebp)
  0xa756e5aa: mov    %esp,%edi
  0xa756e5ac: shr    $0xc,%edi
  0xa756e5af: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e5b6: push   %edi
  0xa756e5b7: mov    %ebp,0x148(%edi)
  0xa756e5bd: mov    %eax,0x140(%edi)
  0xa756e5c3: call   0xb6e61c92
  0xa756e5c8: add    $0x8,%esp
  0xa756e5cb: push   %eax
  0xa756e5cc: mov    %esp,%eax
  0xa756e5ce: shr    $0xc,%eax
  0xa756e5d1: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e5d8: cmp    %eax,%edi
  0xa756e5da: je     0xa756e5f1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e5e0: push   $0xb74acf8c
  0xa756e5e5: call   0xa756e5ea
  0xa756e5ea: pusha  
  0xa756e5eb: call   0xb6ff5f32
  0xa756e5f0: hlt    
  0xa756e5f1: pop    %eax
  0xa756e5f2: movl   $0x0,0x140(%edi)
  0xa756e5fc: movl   $0x0,0x148(%edi)
  0xa756e606: movl   $0x0,0x144(%edi)
  0xa756e610: cmpl   $0x0,0x4(%edi)
  0xa756e617: jne    0xa7556400
  0xa756e61d: mov    -0x1c(%ebp),%esi
  0xa756e620: mov    -0x18(%ebp),%edi
  0xa756e623: ret    
  0xa756e624: pop    %ecx
  0xa756e625: pop    %edx
  0xa756e626: mov    0x10(%ecx),%eax
  0xa756e629: test   %eax,%eax
  0xa756e62b: je     0xa756e670
  0xa756e631: mov    0xc(%ecx),%ebx
  0xa756e634: test   %ebx,%ebx
  0xa756e636: je     0xa756e658
  0xa756e638: mov    0xc0(%ebx),%eax
  0xa756e63e: add    $0x8,%eax
  0xa756e641: mov    %eax,0xc0(%ebx)
  0xa756e647: and    $0x1ff8,%eax
  0xa756e64d: je     0xa756e773
  0xa756e653: jmp    0xa756e670
  0xa756e658: mov    0x10(%ecx),%ecx
  0xa756e65b: mov    0xc(%ecx),%eax
  0xa756e65e: add    $0x8,%eax
  0xa756e661: mov    %eax,0xc(%ecx)
  0xa756e664: and    $0x1ff8,%eax
  0xa756e66a: je     0xa756e773
  0xa756e670: movzbl (%esi),%ebx
  0xa756e673: jmp    *-0x48722ae0(,%ebx,4)
  0xa756e67a: call   0xa756e684
  0xa756e67f: jmp    0xa756e723
  0xa756e684: lea    0x4(%esp),%eax
  0xa756e688: cmpl   $0x0,-0x8(%ebp)
  0xa756e68f: je     0xa756e6a6
  0xa756e695: push   $0xb7449b58
  0xa756e69a: call   0xa756e69f
  0xa756e69f: pusha  
  0xa756e6a0: call   0xb6ff5f32
  0xa756e6a5: hlt    
  0xa756e6a6: mov    %esi,-0x1c(%ebp)
  0xa756e6a9: mov    %esp,%edi
  0xa756e6ab: shr    $0xc,%edi
  0xa756e6ae: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e6b5: push   %edi
  0xa756e6b6: mov    %ebp,0x148(%edi)
  0xa756e6bc: mov    %eax,0x140(%edi)
  0xa756e6c2: call   0xb6e61328
  0xa756e6c7: add    $0x4,%esp
  0xa756e6ca: push   %eax
  0xa756e6cb: mov    %esp,%eax
  0xa756e6cd: shr    $0xc,%eax
  0xa756e6d0: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e6d7: cmp    %eax,%edi
  0xa756e6d9: je     0xa756e6f0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e6df: push   $0xb74acf8c
  0xa756e6e4: call   0xa756e6e9
  0xa756e6e9: pusha  
  0xa756e6ea: call   0xb6ff5f32
  0xa756e6ef: hlt    
  0xa756e6f0: pop    %eax
  0xa756e6f1: movl   $0x0,0x140(%edi)
  0xa756e6fb: movl   $0x0,0x148(%edi)
  0xa756e705: movl   $0x0,0x144(%edi)
  0xa756e70f: cmpl   $0x0,0x4(%edi)
  0xa756e716: jne    0xa7556400
  0xa756e71c: mov    -0x1c(%ebp),%esi
  0xa756e71f: mov    -0x18(%ebp),%edi
  0xa756e722: ret    
  0xa756e723: movzbl (%esi),%ebx
  0xa756e726: push   %eax
  0xa756e727: push   %ebx
  0xa756e728: mov    -0xc(%ebp),%ebx
  0xa756e72b: mov    0xc(%ebx),%eax
  0xa756e72e: test   %eax,%eax
  0xa756e730: je     0xa756e769
  0xa756e736: push   %esi
  0xa756e737: push   %ebx
  0xa756e738: cmpl   $0x0,-0x8(%ebp)
  0xa756e73f: je     0xa756e756
  0xa756e745: push   $0xb7449b18
  0xa756e74a: call   0xa756e74f
  0xa756e74f: pusha  
  0xa756e750: call   0xb6ff5f32
  0xa756e755: hlt    
  0xa756e756: call   0xb6e61172
  0xa756e75b: add    $0x8,%esp
  0xa756e75e: mov    0xc(%ebx),%ebx
  0xa756e761: add    $0xe0,%ebx
  0xa756e767: add    %ebx,%eax
  0xa756e769: mov    %eax,-0x10(%ebp)
  0xa756e76c: pop    %ebx
  0xa756e76d: pop    %eax
  0xa756e76e: jmp    0xa756e670
  0xa756e773: neg    %edx
  0xa756e775: add    %esi,%edx
  0xa756e777: call   0xa756e781
  0xa756e77c: jmp    0xa756e821
  0xa756e781: push   %edx
  0xa756e782: lea    0x8(%esp),%eax
  0xa756e786: cmpl   $0x0,-0x8(%ebp)
  0xa756e78d: je     0xa756e7a4
  0xa756e793: push   $0xb7449b58
  0xa756e798: call   0xa756e79d
  0xa756e79d: pusha  
  0xa756e79e: call   0xb6ff5f32
  0xa756e7a3: hlt    
  0xa756e7a4: mov    %esi,-0x1c(%ebp)
  0xa756e7a7: mov    %esp,%edi
  0xa756e7a9: shr    $0xc,%edi
  0xa756e7ac: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e7b3: push   %edi
  0xa756e7b4: mov    %ebp,0x148(%edi)
  0xa756e7ba: mov    %eax,0x140(%edi)
  0xa756e7c0: call   0xb6e60bc8
  0xa756e7c5: add    $0x8,%esp
  0xa756e7c8: push   %eax
  0xa756e7c9: mov    %esp,%eax
  0xa756e7cb: shr    $0xc,%eax
  0xa756e7ce: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e7d5: cmp    %eax,%edi
  0xa756e7d7: je     0xa756e7ee
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e7dd: push   $0xb74acf8c
  0xa756e7e2: call   0xa756e7e7
  0xa756e7e7: pusha  
  0xa756e7e8: call   0xb6ff5f32
  0xa756e7ed: hlt    
  0xa756e7ee: pop    %eax
  0xa756e7ef: movl   $0x0,0x140(%edi)
  0xa756e7f9: movl   $0x0,0x148(%edi)
  0xa756e803: movl   $0x0,0x144(%edi)
  0xa756e80d: cmpl   $0x0,0x4(%edi)
  0xa756e814: jne    0xa7556400
  0xa756e81a: mov    -0x1c(%ebp),%esi
  0xa756e81d: mov    -0x18(%ebp),%edi
  0xa756e820: ret    
  0xa756e821: movzbl (%esi),%ebx
  0xa756e824: test   %eax,%eax
  0xa756e826: je     0xa756e670
  0xa756e82c: mov    0x38(%eax),%ecx
  0xa756e82f: cmp    $0xfffffffe,%ecx
  0xa756e832: je     0xa756e670
  0xa756e838: mov    %eax,%ebx
  0xa756e83a: mov    %esp,%ecx
  0xa756e83c: shr    $0xc,%ecx
  0xa756e83f: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756e846: call   0xa756e850
  0xa756e84b: jmp    0xa756e8ef
  0xa756e850: lea    0x4(%esp),%eax
  0xa756e854: cmpl   $0x0,-0x8(%ebp)
  0xa756e85b: je     0xa756e872
  0xa756e861: push   $0xb7449b58
  0xa756e866: call   0xa756e86b
  0xa756e86b: pusha  
  0xa756e86c: call   0xb6ff5f32
  0xa756e871: hlt    
  0xa756e872: mov    %esi,-0x1c(%ebp)
  0xa756e875: mov    %esp,%edi
  0xa756e877: shr    $0xc,%edi
  0xa756e87a: mov    -0x4871aba0(,%edi,4),%edi
  0xa756e881: push   %edi
  0xa756e882: mov    %ebp,0x148(%edi)
  0xa756e888: mov    %eax,0x140(%edi)
  0xa756e88e: call   0xb717c684
  0xa756e893: add    $0x4,%esp
  0xa756e896: push   %eax
  0xa756e897: mov    %esp,%eax
  0xa756e899: shr    $0xc,%eax
  0xa756e89c: mov    -0x4871aba0(,%eax,4),%eax
  0xa756e8a3: cmp    %eax,%edi
  0xa756e8a5: je     0xa756e8bc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756e8ab: push   $0xb74acf8c
  0xa756e8b0: call   0xa756e8b5
  0xa756e8b5: pusha  
  0xa756e8b6: call   0xb6ff5f32
  0xa756e8bb: hlt    
  0xa756e8bc: pop    %eax
  0xa756e8bd: movl   $0x0,0x140(%edi)
  0xa756e8c7: movl   $0x0,0x148(%edi)
  0xa756e8d1: movl   $0x0,0x144(%edi)
  0xa756e8db: cmpl   $0x0,0x4(%edi)
  0xa756e8e2: jne    0xa7556400
  0xa756e8e8: mov    -0x1c(%ebp),%esi
  0xa756e8eb: mov    -0x18(%ebp),%edi
  0xa756e8ee: ret    
  0xa756e8ef: mov    %eax,%ecx
  0xa756e8f1: mov    -0x4(%ebp),%edx
  0xa756e8f4: mov    %ebp,%esp
  0xa756e8f6: pop    %ebp
  0xa756e8f7: pop    %edi
  0xa756e8f8: mov    %edx,%esp
  0xa756e8fa: and    $0xfffffff0,%esp
  0xa756e8fd: push   %edi
  0xa756e8fe: jmp    *0x58(%ebx)
  0xa756e901: mov    -0x10(%ebp),%eax
  0xa756e904: test   %eax,%eax
  0xa756e906: je     0xa756e91a
  0xa756e90c: addl   $0x1,0xc(%eax)
  0xa756e910: sbbl   $0x0,0xc(%eax)
  0xa756e914: add    $0x10,%eax
  0xa756e917: mov    %eax,-0x10(%ebp)
  0xa756e91a: movzbl 0x3(%esi),%ebx
  0xa756e91e: add    $0x3,%esi
  0xa756e921: jmp    *-0x48722ae0(,%ebx,4)
  0xa756e928: int3   
  0xa756e929: int3   
  0xa756e92a: int3   
  0xa756e92b: int3   
  0xa756e92c: int3   
  0xa756e92d: int3   
  0xa756e92e: int3   
  0xa756e92f: int3   
  0xa756e930: int3   
  0xa756e931: int3   
  0xa756e932: int3   
  0xa756e933: int3   
  0xa756e934: int3   
  0xa756e935: int3   
  0xa756e936: int3   
  0xa756e937: int3   
  0xa756e938: int3   
  0xa756e939: int3   
  0xa756e93a: int3   
  0xa756e93b: int3   
  0xa756e93c: int3   
  0xa756e93d: int3   
  0xa756e93e: int3   
  0xa756e93f: int3   

----------------------------------------------------------------------
ifle  158 ifle  [0xa756e960, 0xa756edc0]  1120 bytes

  0xa756e960: pop    %eax
  0xa756e961: push   %eax
  0xa756e962: push   %ebx
  0xa756e963: push   %ecx
  0xa756e964: push   %edx
  0xa756e965: mov    -0x10(%ebp),%ecx
  0xa756e968: test   %ecx,%ecx
  0xa756e96a: je     0xa756e9ae
  0xa756e970: mov    -0xc(%ebp),%ebx
  0xa756e973: movzwl 0x2(%ecx),%edx
  0xa756e977: add    0x8(%ebx),%edx
  0xa756e97a: lea    0x28(%edx),%edx
  0xa756e97d: cmp    %esi,%edx
  0xa756e97f: je     0xa756e9ae
  0xa756e985: push   %ecx
  0xa756e986: push   %esi
  0xa756e987: push   %ebx
  0xa756e988: cmpl   $0x0,-0x8(%ebp)
  0xa756e98f: je     0xa756e9a6
  0xa756e995: push   $0xb7449b18
  0xa756e99a: call   0xa756e99f
  0xa756e99f: pusha  
  0xa756e9a0: call   0xb6ff5f32
  0xa756e9a5: hlt    
  0xa756e9a6: call   0xb6e61602
  0xa756e9ab: add    $0xc,%esp
  0xa756e9ae: pop    %edx
  0xa756e9af: pop    %ecx
  0xa756e9b0: pop    %ebx
  0xa756e9b1: pop    %eax
  0xa756e9b2: test   %eax,%eax
  0xa756e9b4: jg     0xa756ed81
  0xa756e9ba: mov    -0xc(%ebp),%ecx
  0xa756e9bd: mov    -0x10(%ebp),%eax
  0xa756e9c0: test   %eax,%eax
  0xa756e9c2: je     0xa756e9da
  0xa756e9c8: mov    0x4(%eax),%ebx
  0xa756e9cb: add    $0x1,%ebx
  0xa756e9ce: sbb    $0x0,%ebx
  0xa756e9d1: mov    %ebx,0x4(%eax)
  0xa756e9d4: add    0x8(%eax),%eax
  0xa756e9d7: mov    %eax,-0x10(%ebp)
  0xa756e9da: movswl 0x1(%esi),%edx
  0xa756e9de: bswap  %edx
  0xa756e9e0: sar    $0x10,%edx
  0xa756e9e3: add    %edx,%esi
  0xa756e9e5: test   %edx,%edx
  0xa756e9e7: jns    0xa756eaf0
  0xa756e9ed: mov    0x10(%ecx),%eax
  0xa756e9f0: test   %eax,%eax
  0xa756e9f2: jne    0xa756eab1
  0xa756e9f8: push   %edx
  0xa756e9f9: push   %ecx
  0xa756e9fa: call   0xa756ea04
  0xa756e9ff: jmp    0xa756eaa4
  0xa756ea04: push   %ecx
  0xa756ea05: lea    0x8(%esp),%eax
  0xa756ea09: cmpl   $0x0,-0x8(%ebp)
  0xa756ea10: je     0xa756ea27
  0xa756ea16: push   $0xb7449b58
  0xa756ea1b: call   0xa756ea20
  0xa756ea20: pusha  
  0xa756ea21: call   0xb6ff5f32
  0xa756ea26: hlt    
  0xa756ea27: mov    %esi,-0x1c(%ebp)
  0xa756ea2a: mov    %esp,%edi
  0xa756ea2c: shr    $0xc,%edi
  0xa756ea2f: mov    -0x4871aba0(,%edi,4),%edi
  0xa756ea36: push   %edi
  0xa756ea37: mov    %ebp,0x148(%edi)
  0xa756ea3d: mov    %eax,0x140(%edi)
  0xa756ea43: call   0xb6e61c92
  0xa756ea48: add    $0x8,%esp
  0xa756ea4b: push   %eax
  0xa756ea4c: mov    %esp,%eax
  0xa756ea4e: shr    $0xc,%eax
  0xa756ea51: mov    -0x4871aba0(,%eax,4),%eax
  0xa756ea58: cmp    %eax,%edi
  0xa756ea5a: je     0xa756ea71
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756ea60: push   $0xb74acf8c
  0xa756ea65: call   0xa756ea6a
  0xa756ea6a: pusha  
  0xa756ea6b: call   0xb6ff5f32
  0xa756ea70: hlt    
  0xa756ea71: pop    %eax
  0xa756ea72: movl   $0x0,0x140(%edi)
  0xa756ea7c: movl   $0x0,0x148(%edi)
  0xa756ea86: movl   $0x0,0x144(%edi)
  0xa756ea90: cmpl   $0x0,0x4(%edi)
  0xa756ea97: jne    0xa7556400
  0xa756ea9d: mov    -0x1c(%ebp),%esi
  0xa756eaa0: mov    -0x18(%ebp),%edi
  0xa756eaa3: ret    
  0xa756eaa4: pop    %ecx
  0xa756eaa5: pop    %edx
  0xa756eaa6: mov    0x10(%ecx),%eax
  0xa756eaa9: test   %eax,%eax
  0xa756eaab: je     0xa756eaf0
  0xa756eab1: mov    0xc(%ecx),%ebx
  0xa756eab4: test   %ebx,%ebx
  0xa756eab6: je     0xa756ead8
  0xa756eab8: mov    0xc0(%ebx),%eax
  0xa756eabe: add    $0x8,%eax
  0xa756eac1: mov    %eax,0xc0(%ebx)
  0xa756eac7: and    $0x1ff8,%eax
  0xa756eacd: je     0xa756ebf3
  0xa756ead3: jmp    0xa756eaf0
  0xa756ead8: mov    0x10(%ecx),%ecx
  0xa756eadb: mov    0xc(%ecx),%eax
  0xa756eade: add    $0x8,%eax
  0xa756eae1: mov    %eax,0xc(%ecx)
  0xa756eae4: and    $0x1ff8,%eax
  0xa756eaea: je     0xa756ebf3
  0xa756eaf0: movzbl (%esi),%ebx
  0xa756eaf3: jmp    *-0x48722ae0(,%ebx,4)
  0xa756eafa: call   0xa756eb04
  0xa756eaff: jmp    0xa756eba3
  0xa756eb04: lea    0x4(%esp),%eax
  0xa756eb08: cmpl   $0x0,-0x8(%ebp)
  0xa756eb0f: je     0xa756eb26
  0xa756eb15: push   $0xb7449b58
  0xa756eb1a: call   0xa756eb1f
  0xa756eb1f: pusha  
  0xa756eb20: call   0xb6ff5f32
  0xa756eb25: hlt    
  0xa756eb26: mov    %esi,-0x1c(%ebp)
  0xa756eb29: mov    %esp,%edi
  0xa756eb2b: shr    $0xc,%edi
  0xa756eb2e: mov    -0x4871aba0(,%edi,4),%edi
  0xa756eb35: push   %edi
  0xa756eb36: mov    %ebp,0x148(%edi)
  0xa756eb3c: mov    %eax,0x140(%edi)
  0xa756eb42: call   0xb6e61328
  0xa756eb47: add    $0x4,%esp
  0xa756eb4a: push   %eax
  0xa756eb4b: mov    %esp,%eax
  0xa756eb4d: shr    $0xc,%eax
  0xa756eb50: mov    -0x4871aba0(,%eax,4),%eax
  0xa756eb57: cmp    %eax,%edi
  0xa756eb59: je     0xa756eb70
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756eb5f: push   $0xb74acf8c
  0xa756eb64: call   0xa756eb69
  0xa756eb69: pusha  
  0xa756eb6a: call   0xb6ff5f32
  0xa756eb6f: hlt    
  0xa756eb70: pop    %eax
  0xa756eb71: movl   $0x0,0x140(%edi)
  0xa756eb7b: movl   $0x0,0x148(%edi)
  0xa756eb85: movl   $0x0,0x144(%edi)
  0xa756eb8f: cmpl   $0x0,0x4(%edi)
  0xa756eb96: jne    0xa7556400
  0xa756eb9c: mov    -0x1c(%ebp),%esi
  0xa756eb9f: mov    -0x18(%ebp),%edi
  0xa756eba2: ret    
  0xa756eba3: movzbl (%esi),%ebx
  0xa756eba6: push   %eax
  0xa756eba7: push   %ebx
  0xa756eba8: mov    -0xc(%ebp),%ebx
  0xa756ebab: mov    0xc(%ebx),%eax
  0xa756ebae: test   %eax,%eax
  0xa756ebb0: je     0xa756ebe9
  0xa756ebb6: push   %esi
  0xa756ebb7: push   %ebx
  0xa756ebb8: cmpl   $0x0,-0x8(%ebp)
  0xa756ebbf: je     0xa756ebd6
  0xa756ebc5: push   $0xb7449b18
  0xa756ebca: call   0xa756ebcf
  0xa756ebcf: pusha  
  0xa756ebd0: call   0xb6ff5f32
  0xa756ebd5: hlt    
  0xa756ebd6: call   0xb6e61172
  0xa756ebdb: add    $0x8,%esp
  0xa756ebde: mov    0xc(%ebx),%ebx
  0xa756ebe1: add    $0xe0,%ebx
  0xa756ebe7: add    %ebx,%eax
  0xa756ebe9: mov    %eax,-0x10(%ebp)
  0xa756ebec: pop    %ebx
  0xa756ebed: pop    %eax
  0xa756ebee: jmp    0xa756eaf0
  0xa756ebf3: neg    %edx
  0xa756ebf5: add    %esi,%edx
  0xa756ebf7: call   0xa756ec01
  0xa756ebfc: jmp    0xa756eca1
  0xa756ec01: push   %edx
  0xa756ec02: lea    0x8(%esp),%eax
  0xa756ec06: cmpl   $0x0,-0x8(%ebp)
  0xa756ec0d: je     0xa756ec24
  0xa756ec13: push   $0xb7449b58
  0xa756ec18: call   0xa756ec1d
  0xa756ec1d: pusha  
  0xa756ec1e: call   0xb6ff5f32
  0xa756ec23: hlt    
  0xa756ec24: mov    %esi,-0x1c(%ebp)
  0xa756ec27: mov    %esp,%edi
  0xa756ec29: shr    $0xc,%edi
  0xa756ec2c: mov    -0x4871aba0(,%edi,4),%edi
  0xa756ec33: push   %edi
  0xa756ec34: mov    %ebp,0x148(%edi)
  0xa756ec3a: mov    %eax,0x140(%edi)
  0xa756ec40: call   0xb6e60bc8
  0xa756ec45: add    $0x8,%esp
  0xa756ec48: push   %eax
  0xa756ec49: mov    %esp,%eax
  0xa756ec4b: shr    $0xc,%eax
  0xa756ec4e: mov    -0x4871aba0(,%eax,4),%eax
  0xa756ec55: cmp    %eax,%edi
  0xa756ec57: je     0xa756ec6e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756ec5d: push   $0xb74acf8c
  0xa756ec62: call   0xa756ec67
  0xa756ec67: pusha  
  0xa756ec68: call   0xb6ff5f32
  0xa756ec6d: hlt    
  0xa756ec6e: pop    %eax
  0xa756ec6f: movl   $0x0,0x140(%edi)
  0xa756ec79: movl   $0x0,0x148(%edi)
  0xa756ec83: movl   $0x0,0x144(%edi)
  0xa756ec8d: cmpl   $0x0,0x4(%edi)
  0xa756ec94: jne    0xa7556400
  0xa756ec9a: mov    -0x1c(%ebp),%esi
  0xa756ec9d: mov    -0x18(%ebp),%edi
  0xa756eca0: ret    
  0xa756eca1: movzbl (%esi),%ebx
  0xa756eca4: test   %eax,%eax
  0xa756eca6: je     0xa756eaf0
  0xa756ecac: mov    0x38(%eax),%ecx
  0xa756ecaf: cmp    $0xfffffffe,%ecx
  0xa756ecb2: je     0xa756eaf0
  0xa756ecb8: mov    %eax,%ebx
  0xa756ecba: mov    %esp,%ecx
  0xa756ecbc: shr    $0xc,%ecx
  0xa756ecbf: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756ecc6: call   0xa756ecd0
  0xa756eccb: jmp    0xa756ed6f
  0xa756ecd0: lea    0x4(%esp),%eax
  0xa756ecd4: cmpl   $0x0,-0x8(%ebp)
  0xa756ecdb: je     0xa756ecf2
  0xa756ece1: push   $0xb7449b58
  0xa756ece6: call   0xa756eceb
  0xa756eceb: pusha  
  0xa756ecec: call   0xb6ff5f32
  0xa756ecf1: hlt    
  0xa756ecf2: mov    %esi,-0x1c(%ebp)
  0xa756ecf5: mov    %esp,%edi
  0xa756ecf7: shr    $0xc,%edi
  0xa756ecfa: mov    -0x4871aba0(,%edi,4),%edi
  0xa756ed01: push   %edi
  0xa756ed02: mov    %ebp,0x148(%edi)
  0xa756ed08: mov    %eax,0x140(%edi)
  0xa756ed0e: call   0xb717c684
  0xa756ed13: add    $0x4,%esp
  0xa756ed16: push   %eax
  0xa756ed17: mov    %esp,%eax
  0xa756ed19: shr    $0xc,%eax
  0xa756ed1c: mov    -0x4871aba0(,%eax,4),%eax
  0xa756ed23: cmp    %eax,%edi
  0xa756ed25: je     0xa756ed3c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756ed2b: push   $0xb74acf8c
  0xa756ed30: call   0xa756ed35
  0xa756ed35: pusha  
  0xa756ed36: call   0xb6ff5f32
  0xa756ed3b: hlt    
  0xa756ed3c: pop    %eax
  0xa756ed3d: movl   $0x0,0x140(%edi)
  0xa756ed47: movl   $0x0,0x148(%edi)
  0xa756ed51: movl   $0x0,0x144(%edi)
  0xa756ed5b: cmpl   $0x0,0x4(%edi)
  0xa756ed62: jne    0xa7556400
  0xa756ed68: mov    -0x1c(%ebp),%esi
  0xa756ed6b: mov    -0x18(%ebp),%edi
  0xa756ed6e: ret    
  0xa756ed6f: mov    %eax,%ecx
  0xa756ed71: mov    -0x4(%ebp),%edx
  0xa756ed74: mov    %ebp,%esp
  0xa756ed76: pop    %ebp
  0xa756ed77: pop    %edi
  0xa756ed78: mov    %edx,%esp
  0xa756ed7a: and    $0xfffffff0,%esp
  0xa756ed7d: push   %edi
  0xa756ed7e: jmp    *0x58(%ebx)
  0xa756ed81: mov    -0x10(%ebp),%eax
  0xa756ed84: test   %eax,%eax
  0xa756ed86: je     0xa756ed9a
  0xa756ed8c: addl   $0x1,0xc(%eax)
  0xa756ed90: sbbl   $0x0,0xc(%eax)
  0xa756ed94: add    $0x10,%eax
  0xa756ed97: mov    %eax,-0x10(%ebp)
  0xa756ed9a: movzbl 0x3(%esi),%ebx
  0xa756ed9e: add    $0x3,%esi
  0xa756eda1: jmp    *-0x48722ae0(,%ebx,4)
  0xa756eda8: int3   
  0xa756eda9: int3   
  0xa756edaa: int3   
  0xa756edab: int3   
  0xa756edac: int3   
  0xa756edad: int3   
  0xa756edae: int3   
  0xa756edaf: int3   
  0xa756edb0: int3   
  0xa756edb1: int3   
  0xa756edb2: int3   
  0xa756edb3: int3   
  0xa756edb4: int3   
  0xa756edb5: int3   
  0xa756edb6: int3   
  0xa756edb7: int3   
  0xa756edb8: int3   
  0xa756edb9: int3   
  0xa756edba: int3   
  0xa756edbb: int3   
  0xa756edbc: int3   
  0xa756edbd: int3   
  0xa756edbe: int3   
  0xa756edbf: int3   

----------------------------------------------------------------------
if_icmpeq  159 if_icmpeq  [0xa756ede0, 0xa756f240]  1120 bytes

  0xa756ede0: pop    %eax
  0xa756ede1: push   %eax
  0xa756ede2: push   %ebx
  0xa756ede3: push   %ecx
  0xa756ede4: push   %edx
  0xa756ede5: mov    -0x10(%ebp),%ecx
  0xa756ede8: test   %ecx,%ecx
  0xa756edea: je     0xa756ee2e
  0xa756edf0: mov    -0xc(%ebp),%ebx
  0xa756edf3: movzwl 0x2(%ecx),%edx
  0xa756edf7: add    0x8(%ebx),%edx
  0xa756edfa: lea    0x28(%edx),%edx
  0xa756edfd: cmp    %esi,%edx
  0xa756edff: je     0xa756ee2e
  0xa756ee05: push   %ecx
  0xa756ee06: push   %esi
  0xa756ee07: push   %ebx
  0xa756ee08: cmpl   $0x0,-0x8(%ebp)
  0xa756ee0f: je     0xa756ee26
  0xa756ee15: push   $0xb7449b18
  0xa756ee1a: call   0xa756ee1f
  0xa756ee1f: pusha  
  0xa756ee20: call   0xb6ff5f32
  0xa756ee25: hlt    
  0xa756ee26: call   0xb6e61602
  0xa756ee2b: add    $0xc,%esp
  0xa756ee2e: pop    %edx
  0xa756ee2f: pop    %ecx
  0xa756ee30: pop    %ebx
  0xa756ee31: pop    %eax
  0xa756ee32: pop    %edx
  0xa756ee33: cmp    %eax,%edx
  0xa756ee35: jne    0xa756f202
  0xa756ee3b: mov    -0xc(%ebp),%ecx
  0xa756ee3e: mov    -0x10(%ebp),%eax
  0xa756ee41: test   %eax,%eax
  0xa756ee43: je     0xa756ee5b
  0xa756ee49: mov    0x4(%eax),%ebx
  0xa756ee4c: add    $0x1,%ebx
  0xa756ee4f: sbb    $0x0,%ebx
  0xa756ee52: mov    %ebx,0x4(%eax)
  0xa756ee55: add    0x8(%eax),%eax
  0xa756ee58: mov    %eax,-0x10(%ebp)
  0xa756ee5b: movswl 0x1(%esi),%edx
  0xa756ee5f: bswap  %edx
  0xa756ee61: sar    $0x10,%edx
  0xa756ee64: add    %edx,%esi
  0xa756ee66: test   %edx,%edx
  0xa756ee68: jns    0xa756ef71
  0xa756ee6e: mov    0x10(%ecx),%eax
  0xa756ee71: test   %eax,%eax
  0xa756ee73: jne    0xa756ef32
  0xa756ee79: push   %edx
  0xa756ee7a: push   %ecx
  0xa756ee7b: call   0xa756ee85
  0xa756ee80: jmp    0xa756ef25
  0xa756ee85: push   %ecx
  0xa756ee86: lea    0x8(%esp),%eax
  0xa756ee8a: cmpl   $0x0,-0x8(%ebp)
  0xa756ee91: je     0xa756eea8
  0xa756ee97: push   $0xb7449b58
  0xa756ee9c: call   0xa756eea1
  0xa756eea1: pusha  
  0xa756eea2: call   0xb6ff5f32
  0xa756eea7: hlt    
  0xa756eea8: mov    %esi,-0x1c(%ebp)
  0xa756eeab: mov    %esp,%edi
  0xa756eead: shr    $0xc,%edi
  0xa756eeb0: mov    -0x4871aba0(,%edi,4),%edi
  0xa756eeb7: push   %edi
  0xa756eeb8: mov    %ebp,0x148(%edi)
  0xa756eebe: mov    %eax,0x140(%edi)
  0xa756eec4: call   0xb6e61c92
  0xa756eec9: add    $0x8,%esp
  0xa756eecc: push   %eax
  0xa756eecd: mov    %esp,%eax
  0xa756eecf: shr    $0xc,%eax
  0xa756eed2: mov    -0x4871aba0(,%eax,4),%eax
  0xa756eed9: cmp    %eax,%edi
  0xa756eedb: je     0xa756eef2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756eee1: push   $0xb74acf8c
  0xa756eee6: call   0xa756eeeb
  0xa756eeeb: pusha  
  0xa756eeec: call   0xb6ff5f32
  0xa756eef1: hlt    
  0xa756eef2: pop    %eax
  0xa756eef3: movl   $0x0,0x140(%edi)
  0xa756eefd: movl   $0x0,0x148(%edi)
  0xa756ef07: movl   $0x0,0x144(%edi)
  0xa756ef11: cmpl   $0x0,0x4(%edi)
  0xa756ef18: jne    0xa7556400
  0xa756ef1e: mov    -0x1c(%ebp),%esi
  0xa756ef21: mov    -0x18(%ebp),%edi
  0xa756ef24: ret    
  0xa756ef25: pop    %ecx
  0xa756ef26: pop    %edx
  0xa756ef27: mov    0x10(%ecx),%eax
  0xa756ef2a: test   %eax,%eax
  0xa756ef2c: je     0xa756ef71
  0xa756ef32: mov    0xc(%ecx),%ebx
  0xa756ef35: test   %ebx,%ebx
  0xa756ef37: je     0xa756ef59
  0xa756ef39: mov    0xc0(%ebx),%eax
  0xa756ef3f: add    $0x8,%eax
  0xa756ef42: mov    %eax,0xc0(%ebx)
  0xa756ef48: and    $0x1ff8,%eax
  0xa756ef4e: je     0xa756f074
  0xa756ef54: jmp    0xa756ef71
  0xa756ef59: mov    0x10(%ecx),%ecx
  0xa756ef5c: mov    0xc(%ecx),%eax
  0xa756ef5f: add    $0x8,%eax
  0xa756ef62: mov    %eax,0xc(%ecx)
  0xa756ef65: and    $0x1ff8,%eax
  0xa756ef6b: je     0xa756f074
  0xa756ef71: movzbl (%esi),%ebx
  0xa756ef74: jmp    *-0x48722ae0(,%ebx,4)
  0xa756ef7b: call   0xa756ef85
  0xa756ef80: jmp    0xa756f024
  0xa756ef85: lea    0x4(%esp),%eax
  0xa756ef89: cmpl   $0x0,-0x8(%ebp)
  0xa756ef90: je     0xa756efa7
  0xa756ef96: push   $0xb7449b58
  0xa756ef9b: call   0xa756efa0
  0xa756efa0: pusha  
  0xa756efa1: call   0xb6ff5f32
  0xa756efa6: hlt    
  0xa756efa7: mov    %esi,-0x1c(%ebp)
  0xa756efaa: mov    %esp,%edi
  0xa756efac: shr    $0xc,%edi
  0xa756efaf: mov    -0x4871aba0(,%edi,4),%edi
  0xa756efb6: push   %edi
  0xa756efb7: mov    %ebp,0x148(%edi)
  0xa756efbd: mov    %eax,0x140(%edi)
  0xa756efc3: call   0xb6e61328
  0xa756efc8: add    $0x4,%esp
  0xa756efcb: push   %eax
  0xa756efcc: mov    %esp,%eax
  0xa756efce: shr    $0xc,%eax
  0xa756efd1: mov    -0x4871aba0(,%eax,4),%eax
  0xa756efd8: cmp    %eax,%edi
  0xa756efda: je     0xa756eff1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756efe0: push   $0xb74acf8c
  0xa756efe5: call   0xa756efea
  0xa756efea: pusha  
  0xa756efeb: call   0xb6ff5f32
  0xa756eff0: hlt    
  0xa756eff1: pop    %eax
  0xa756eff2: movl   $0x0,0x140(%edi)
  0xa756effc: movl   $0x0,0x148(%edi)
  0xa756f006: movl   $0x0,0x144(%edi)
  0xa756f010: cmpl   $0x0,0x4(%edi)
  0xa756f017: jne    0xa7556400
  0xa756f01d: mov    -0x1c(%ebp),%esi
  0xa756f020: mov    -0x18(%ebp),%edi
  0xa756f023: ret    
  0xa756f024: movzbl (%esi),%ebx
  0xa756f027: push   %eax
  0xa756f028: push   %ebx
  0xa756f029: mov    -0xc(%ebp),%ebx
  0xa756f02c: mov    0xc(%ebx),%eax
  0xa756f02f: test   %eax,%eax
  0xa756f031: je     0xa756f06a
  0xa756f037: push   %esi
  0xa756f038: push   %ebx
  0xa756f039: cmpl   $0x0,-0x8(%ebp)
  0xa756f040: je     0xa756f057
  0xa756f046: push   $0xb7449b18
  0xa756f04b: call   0xa756f050
  0xa756f050: pusha  
  0xa756f051: call   0xb6ff5f32
  0xa756f056: hlt    
  0xa756f057: call   0xb6e61172
  0xa756f05c: add    $0x8,%esp
  0xa756f05f: mov    0xc(%ebx),%ebx
  0xa756f062: add    $0xe0,%ebx
  0xa756f068: add    %ebx,%eax
  0xa756f06a: mov    %eax,-0x10(%ebp)
  0xa756f06d: pop    %ebx
  0xa756f06e: pop    %eax
  0xa756f06f: jmp    0xa756ef71
  0xa756f074: neg    %edx
  0xa756f076: add    %esi,%edx
  0xa756f078: call   0xa756f082
  0xa756f07d: jmp    0xa756f122
  0xa756f082: push   %edx
  0xa756f083: lea    0x8(%esp),%eax
  0xa756f087: cmpl   $0x0,-0x8(%ebp)
  0xa756f08e: je     0xa756f0a5
  0xa756f094: push   $0xb7449b58
  0xa756f099: call   0xa756f09e
  0xa756f09e: pusha  
  0xa756f09f: call   0xb6ff5f32
  0xa756f0a4: hlt    
  0xa756f0a5: mov    %esi,-0x1c(%ebp)
  0xa756f0a8: mov    %esp,%edi
  0xa756f0aa: shr    $0xc,%edi
  0xa756f0ad: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f0b4: push   %edi
  0xa756f0b5: mov    %ebp,0x148(%edi)
  0xa756f0bb: mov    %eax,0x140(%edi)
  0xa756f0c1: call   0xb6e60bc8
  0xa756f0c6: add    $0x8,%esp
  0xa756f0c9: push   %eax
  0xa756f0ca: mov    %esp,%eax
  0xa756f0cc: shr    $0xc,%eax
  0xa756f0cf: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f0d6: cmp    %eax,%edi
  0xa756f0d8: je     0xa756f0ef
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f0de: push   $0xb74acf8c
  0xa756f0e3: call   0xa756f0e8
  0xa756f0e8: pusha  
  0xa756f0e9: call   0xb6ff5f32
  0xa756f0ee: hlt    
  0xa756f0ef: pop    %eax
  0xa756f0f0: movl   $0x0,0x140(%edi)
  0xa756f0fa: movl   $0x0,0x148(%edi)
  0xa756f104: movl   $0x0,0x144(%edi)
  0xa756f10e: cmpl   $0x0,0x4(%edi)
  0xa756f115: jne    0xa7556400
  0xa756f11b: mov    -0x1c(%ebp),%esi
  0xa756f11e: mov    -0x18(%ebp),%edi
  0xa756f121: ret    
  0xa756f122: movzbl (%esi),%ebx
  0xa756f125: test   %eax,%eax
  0xa756f127: je     0xa756ef71
  0xa756f12d: mov    0x38(%eax),%ecx
  0xa756f130: cmp    $0xfffffffe,%ecx
  0xa756f133: je     0xa756ef71
  0xa756f139: mov    %eax,%ebx
  0xa756f13b: mov    %esp,%ecx
  0xa756f13d: shr    $0xc,%ecx
  0xa756f140: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756f147: call   0xa756f151
  0xa756f14c: jmp    0xa756f1f0
  0xa756f151: lea    0x4(%esp),%eax
  0xa756f155: cmpl   $0x0,-0x8(%ebp)
  0xa756f15c: je     0xa756f173
  0xa756f162: push   $0xb7449b58
  0xa756f167: call   0xa756f16c
  0xa756f16c: pusha  
  0xa756f16d: call   0xb6ff5f32
  0xa756f172: hlt    
  0xa756f173: mov    %esi,-0x1c(%ebp)
  0xa756f176: mov    %esp,%edi
  0xa756f178: shr    $0xc,%edi
  0xa756f17b: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f182: push   %edi
  0xa756f183: mov    %ebp,0x148(%edi)
  0xa756f189: mov    %eax,0x140(%edi)
  0xa756f18f: call   0xb717c684
  0xa756f194: add    $0x4,%esp
  0xa756f197: push   %eax
  0xa756f198: mov    %esp,%eax
  0xa756f19a: shr    $0xc,%eax
  0xa756f19d: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f1a4: cmp    %eax,%edi
  0xa756f1a6: je     0xa756f1bd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f1ac: push   $0xb74acf8c
  0xa756f1b1: call   0xa756f1b6
  0xa756f1b6: pusha  
  0xa756f1b7: call   0xb6ff5f32
  0xa756f1bc: hlt    
  0xa756f1bd: pop    %eax
  0xa756f1be: movl   $0x0,0x140(%edi)
  0xa756f1c8: movl   $0x0,0x148(%edi)
  0xa756f1d2: movl   $0x0,0x144(%edi)
  0xa756f1dc: cmpl   $0x0,0x4(%edi)
  0xa756f1e3: jne    0xa7556400
  0xa756f1e9: mov    -0x1c(%ebp),%esi
  0xa756f1ec: mov    -0x18(%ebp),%edi
  0xa756f1ef: ret    
  0xa756f1f0: mov    %eax,%ecx
  0xa756f1f2: mov    -0x4(%ebp),%edx
  0xa756f1f5: mov    %ebp,%esp
  0xa756f1f7: pop    %ebp
  0xa756f1f8: pop    %edi
  0xa756f1f9: mov    %edx,%esp
  0xa756f1fb: and    $0xfffffff0,%esp
  0xa756f1fe: push   %edi
  0xa756f1ff: jmp    *0x58(%ebx)
  0xa756f202: mov    -0x10(%ebp),%eax
  0xa756f205: test   %eax,%eax
  0xa756f207: je     0xa756f21b
  0xa756f20d: addl   $0x1,0xc(%eax)
  0xa756f211: sbbl   $0x0,0xc(%eax)
  0xa756f215: add    $0x10,%eax
  0xa756f218: mov    %eax,-0x10(%ebp)
  0xa756f21b: movzbl 0x3(%esi),%ebx
  0xa756f21f: add    $0x3,%esi
  0xa756f222: jmp    *-0x48722ae0(,%ebx,4)
  0xa756f229: nop
  0xa756f22a: nop
  0xa756f22b: nop
  0xa756f22c: int3   
  0xa756f22d: int3   
  0xa756f22e: int3   
  0xa756f22f: int3   
  0xa756f230: int3   
  0xa756f231: int3   
  0xa756f232: int3   
  0xa756f233: int3   
  0xa756f234: int3   
  0xa756f235: int3   
  0xa756f236: int3   
  0xa756f237: int3   
  0xa756f238: int3   
  0xa756f239: int3   
  0xa756f23a: int3   
  0xa756f23b: int3   
  0xa756f23c: int3   
  0xa756f23d: int3   
  0xa756f23e: int3   
  0xa756f23f: int3   

----------------------------------------------------------------------
if_icmpne  160 if_icmpne  [0xa756f260, 0xa756f6c0]  1120 bytes

  0xa756f260: pop    %eax
  0xa756f261: push   %eax
  0xa756f262: push   %ebx
  0xa756f263: push   %ecx
  0xa756f264: push   %edx
  0xa756f265: mov    -0x10(%ebp),%ecx
  0xa756f268: test   %ecx,%ecx
  0xa756f26a: je     0xa756f2ae
  0xa756f270: mov    -0xc(%ebp),%ebx
  0xa756f273: movzwl 0x2(%ecx),%edx
  0xa756f277: add    0x8(%ebx),%edx
  0xa756f27a: lea    0x28(%edx),%edx
  0xa756f27d: cmp    %esi,%edx
  0xa756f27f: je     0xa756f2ae
  0xa756f285: push   %ecx
  0xa756f286: push   %esi
  0xa756f287: push   %ebx
  0xa756f288: cmpl   $0x0,-0x8(%ebp)
  0xa756f28f: je     0xa756f2a6
  0xa756f295: push   $0xb7449b18
  0xa756f29a: call   0xa756f29f
  0xa756f29f: pusha  
  0xa756f2a0: call   0xb6ff5f32
  0xa756f2a5: hlt    
  0xa756f2a6: call   0xb6e61602
  0xa756f2ab: add    $0xc,%esp
  0xa756f2ae: pop    %edx
  0xa756f2af: pop    %ecx
  0xa756f2b0: pop    %ebx
  0xa756f2b1: pop    %eax
  0xa756f2b2: pop    %edx
  0xa756f2b3: cmp    %eax,%edx
  0xa756f2b5: je     0xa756f682
  0xa756f2bb: mov    -0xc(%ebp),%ecx
  0xa756f2be: mov    -0x10(%ebp),%eax
  0xa756f2c1: test   %eax,%eax
  0xa756f2c3: je     0xa756f2db
  0xa756f2c9: mov    0x4(%eax),%ebx
  0xa756f2cc: add    $0x1,%ebx
  0xa756f2cf: sbb    $0x0,%ebx
  0xa756f2d2: mov    %ebx,0x4(%eax)
  0xa756f2d5: add    0x8(%eax),%eax
  0xa756f2d8: mov    %eax,-0x10(%ebp)
  0xa756f2db: movswl 0x1(%esi),%edx
  0xa756f2df: bswap  %edx
  0xa756f2e1: sar    $0x10,%edx
  0xa756f2e4: add    %edx,%esi
  0xa756f2e6: test   %edx,%edx
  0xa756f2e8: jns    0xa756f3f1
  0xa756f2ee: mov    0x10(%ecx),%eax
  0xa756f2f1: test   %eax,%eax
  0xa756f2f3: jne    0xa756f3b2
  0xa756f2f9: push   %edx
  0xa756f2fa: push   %ecx
  0xa756f2fb: call   0xa756f305
  0xa756f300: jmp    0xa756f3a5
  0xa756f305: push   %ecx
  0xa756f306: lea    0x8(%esp),%eax
  0xa756f30a: cmpl   $0x0,-0x8(%ebp)
  0xa756f311: je     0xa756f328
  0xa756f317: push   $0xb7449b58
  0xa756f31c: call   0xa756f321
  0xa756f321: pusha  
  0xa756f322: call   0xb6ff5f32
  0xa756f327: hlt    
  0xa756f328: mov    %esi,-0x1c(%ebp)
  0xa756f32b: mov    %esp,%edi
  0xa756f32d: shr    $0xc,%edi
  0xa756f330: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f337: push   %edi
  0xa756f338: mov    %ebp,0x148(%edi)
  0xa756f33e: mov    %eax,0x140(%edi)
  0xa756f344: call   0xb6e61c92
  0xa756f349: add    $0x8,%esp
  0xa756f34c: push   %eax
  0xa756f34d: mov    %esp,%eax
  0xa756f34f: shr    $0xc,%eax
  0xa756f352: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f359: cmp    %eax,%edi
  0xa756f35b: je     0xa756f372
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f361: push   $0xb74acf8c
  0xa756f366: call   0xa756f36b
  0xa756f36b: pusha  
  0xa756f36c: call   0xb6ff5f32
  0xa756f371: hlt    
  0xa756f372: pop    %eax
  0xa756f373: movl   $0x0,0x140(%edi)
  0xa756f37d: movl   $0x0,0x148(%edi)
  0xa756f387: movl   $0x0,0x144(%edi)
  0xa756f391: cmpl   $0x0,0x4(%edi)
  0xa756f398: jne    0xa7556400
  0xa756f39e: mov    -0x1c(%ebp),%esi
  0xa756f3a1: mov    -0x18(%ebp),%edi
  0xa756f3a4: ret    
  0xa756f3a5: pop    %ecx
  0xa756f3a6: pop    %edx
  0xa756f3a7: mov    0x10(%ecx),%eax
  0xa756f3aa: test   %eax,%eax
  0xa756f3ac: je     0xa756f3f1
  0xa756f3b2: mov    0xc(%ecx),%ebx
  0xa756f3b5: test   %ebx,%ebx
  0xa756f3b7: je     0xa756f3d9
  0xa756f3b9: mov    0xc0(%ebx),%eax
  0xa756f3bf: add    $0x8,%eax
  0xa756f3c2: mov    %eax,0xc0(%ebx)
  0xa756f3c8: and    $0x1ff8,%eax
  0xa756f3ce: je     0xa756f4f4
  0xa756f3d4: jmp    0xa756f3f1
  0xa756f3d9: mov    0x10(%ecx),%ecx
  0xa756f3dc: mov    0xc(%ecx),%eax
  0xa756f3df: add    $0x8,%eax
  0xa756f3e2: mov    %eax,0xc(%ecx)
  0xa756f3e5: and    $0x1ff8,%eax
  0xa756f3eb: je     0xa756f4f4
  0xa756f3f1: movzbl (%esi),%ebx
  0xa756f3f4: jmp    *-0x48722ae0(,%ebx,4)
  0xa756f3fb: call   0xa756f405
  0xa756f400: jmp    0xa756f4a4
  0xa756f405: lea    0x4(%esp),%eax
  0xa756f409: cmpl   $0x0,-0x8(%ebp)
  0xa756f410: je     0xa756f427
  0xa756f416: push   $0xb7449b58
  0xa756f41b: call   0xa756f420
  0xa756f420: pusha  
  0xa756f421: call   0xb6ff5f32
  0xa756f426: hlt    
  0xa756f427: mov    %esi,-0x1c(%ebp)
  0xa756f42a: mov    %esp,%edi
  0xa756f42c: shr    $0xc,%edi
  0xa756f42f: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f436: push   %edi
  0xa756f437: mov    %ebp,0x148(%edi)
  0xa756f43d: mov    %eax,0x140(%edi)
  0xa756f443: call   0xb6e61328
  0xa756f448: add    $0x4,%esp
  0xa756f44b: push   %eax
  0xa756f44c: mov    %esp,%eax
  0xa756f44e: shr    $0xc,%eax
  0xa756f451: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f458: cmp    %eax,%edi
  0xa756f45a: je     0xa756f471
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f460: push   $0xb74acf8c
  0xa756f465: call   0xa756f46a
  0xa756f46a: pusha  
  0xa756f46b: call   0xb6ff5f32
  0xa756f470: hlt    
  0xa756f471: pop    %eax
  0xa756f472: movl   $0x0,0x140(%edi)
  0xa756f47c: movl   $0x0,0x148(%edi)
  0xa756f486: movl   $0x0,0x144(%edi)
  0xa756f490: cmpl   $0x0,0x4(%edi)
  0xa756f497: jne    0xa7556400
  0xa756f49d: mov    -0x1c(%ebp),%esi
  0xa756f4a0: mov    -0x18(%ebp),%edi
  0xa756f4a3: ret    
  0xa756f4a4: movzbl (%esi),%ebx
  0xa756f4a7: push   %eax
  0xa756f4a8: push   %ebx
  0xa756f4a9: mov    -0xc(%ebp),%ebx
  0xa756f4ac: mov    0xc(%ebx),%eax
  0xa756f4af: test   %eax,%eax
  0xa756f4b1: je     0xa756f4ea
  0xa756f4b7: push   %esi
  0xa756f4b8: push   %ebx
  0xa756f4b9: cmpl   $0x0,-0x8(%ebp)
  0xa756f4c0: je     0xa756f4d7
  0xa756f4c6: push   $0xb7449b18
  0xa756f4cb: call   0xa756f4d0
  0xa756f4d0: pusha  
  0xa756f4d1: call   0xb6ff5f32
  0xa756f4d6: hlt    
  0xa756f4d7: call   0xb6e61172
  0xa756f4dc: add    $0x8,%esp
  0xa756f4df: mov    0xc(%ebx),%ebx
  0xa756f4e2: add    $0xe0,%ebx
  0xa756f4e8: add    %ebx,%eax
  0xa756f4ea: mov    %eax,-0x10(%ebp)
  0xa756f4ed: pop    %ebx
  0xa756f4ee: pop    %eax
  0xa756f4ef: jmp    0xa756f3f1
  0xa756f4f4: neg    %edx
  0xa756f4f6: add    %esi,%edx
  0xa756f4f8: call   0xa756f502
  0xa756f4fd: jmp    0xa756f5a2
  0xa756f502: push   %edx
  0xa756f503: lea    0x8(%esp),%eax
  0xa756f507: cmpl   $0x0,-0x8(%ebp)
  0xa756f50e: je     0xa756f525
  0xa756f514: push   $0xb7449b58
  0xa756f519: call   0xa756f51e
  0xa756f51e: pusha  
  0xa756f51f: call   0xb6ff5f32
  0xa756f524: hlt    
  0xa756f525: mov    %esi,-0x1c(%ebp)
  0xa756f528: mov    %esp,%edi
  0xa756f52a: shr    $0xc,%edi
  0xa756f52d: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f534: push   %edi
  0xa756f535: mov    %ebp,0x148(%edi)
  0xa756f53b: mov    %eax,0x140(%edi)
  0xa756f541: call   0xb6e60bc8
  0xa756f546: add    $0x8,%esp
  0xa756f549: push   %eax
  0xa756f54a: mov    %esp,%eax
  0xa756f54c: shr    $0xc,%eax
  0xa756f54f: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f556: cmp    %eax,%edi
  0xa756f558: je     0xa756f56f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f55e: push   $0xb74acf8c
  0xa756f563: call   0xa756f568
  0xa756f568: pusha  
  0xa756f569: call   0xb6ff5f32
  0xa756f56e: hlt    
  0xa756f56f: pop    %eax
  0xa756f570: movl   $0x0,0x140(%edi)
  0xa756f57a: movl   $0x0,0x148(%edi)
  0xa756f584: movl   $0x0,0x144(%edi)
  0xa756f58e: cmpl   $0x0,0x4(%edi)
  0xa756f595: jne    0xa7556400
  0xa756f59b: mov    -0x1c(%ebp),%esi
  0xa756f59e: mov    -0x18(%ebp),%edi
  0xa756f5a1: ret    
  0xa756f5a2: movzbl (%esi),%ebx
  0xa756f5a5: test   %eax,%eax
  0xa756f5a7: je     0xa756f3f1
  0xa756f5ad: mov    0x38(%eax),%ecx
  0xa756f5b0: cmp    $0xfffffffe,%ecx
  0xa756f5b3: je     0xa756f3f1
  0xa756f5b9: mov    %eax,%ebx
  0xa756f5bb: mov    %esp,%ecx
  0xa756f5bd: shr    $0xc,%ecx
  0xa756f5c0: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756f5c7: call   0xa756f5d1
  0xa756f5cc: jmp    0xa756f670
  0xa756f5d1: lea    0x4(%esp),%eax
  0xa756f5d5: cmpl   $0x0,-0x8(%ebp)
  0xa756f5dc: je     0xa756f5f3
  0xa756f5e2: push   $0xb7449b58
  0xa756f5e7: call   0xa756f5ec
  0xa756f5ec: pusha  
  0xa756f5ed: call   0xb6ff5f32
  0xa756f5f2: hlt    
  0xa756f5f3: mov    %esi,-0x1c(%ebp)
  0xa756f5f6: mov    %esp,%edi
  0xa756f5f8: shr    $0xc,%edi
  0xa756f5fb: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f602: push   %edi
  0xa756f603: mov    %ebp,0x148(%edi)
  0xa756f609: mov    %eax,0x140(%edi)
  0xa756f60f: call   0xb717c684
  0xa756f614: add    $0x4,%esp
  0xa756f617: push   %eax
  0xa756f618: mov    %esp,%eax
  0xa756f61a: shr    $0xc,%eax
  0xa756f61d: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f624: cmp    %eax,%edi
  0xa756f626: je     0xa756f63d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f62c: push   $0xb74acf8c
  0xa756f631: call   0xa756f636
  0xa756f636: pusha  
  0xa756f637: call   0xb6ff5f32
  0xa756f63c: hlt    
  0xa756f63d: pop    %eax
  0xa756f63e: movl   $0x0,0x140(%edi)
  0xa756f648: movl   $0x0,0x148(%edi)
  0xa756f652: movl   $0x0,0x144(%edi)
  0xa756f65c: cmpl   $0x0,0x4(%edi)
  0xa756f663: jne    0xa7556400
  0xa756f669: mov    -0x1c(%ebp),%esi
  0xa756f66c: mov    -0x18(%ebp),%edi
  0xa756f66f: ret    
  0xa756f670: mov    %eax,%ecx
  0xa756f672: mov    -0x4(%ebp),%edx
  0xa756f675: mov    %ebp,%esp
  0xa756f677: pop    %ebp
  0xa756f678: pop    %edi
  0xa756f679: mov    %edx,%esp
  0xa756f67b: and    $0xfffffff0,%esp
  0xa756f67e: push   %edi
  0xa756f67f: jmp    *0x58(%ebx)
  0xa756f682: mov    -0x10(%ebp),%eax
  0xa756f685: test   %eax,%eax
  0xa756f687: je     0xa756f69b
  0xa756f68d: addl   $0x1,0xc(%eax)
  0xa756f691: sbbl   $0x0,0xc(%eax)
  0xa756f695: add    $0x10,%eax
  0xa756f698: mov    %eax,-0x10(%ebp)
  0xa756f69b: movzbl 0x3(%esi),%ebx
  0xa756f69f: add    $0x3,%esi
  0xa756f6a2: jmp    *-0x48722ae0(,%ebx,4)
  0xa756f6a9: nop
  0xa756f6aa: nop
  0xa756f6ab: nop
  0xa756f6ac: int3   
  0xa756f6ad: int3   
  0xa756f6ae: int3   
  0xa756f6af: int3   
  0xa756f6b0: int3   
  0xa756f6b1: int3   
  0xa756f6b2: int3   
  0xa756f6b3: int3   
  0xa756f6b4: int3   
  0xa756f6b5: int3   
  0xa756f6b6: int3   
  0xa756f6b7: int3   
  0xa756f6b8: int3   
  0xa756f6b9: int3   
  0xa756f6ba: int3   
  0xa756f6bb: int3   
  0xa756f6bc: int3   
  0xa756f6bd: int3   
  0xa756f6be: int3   
  0xa756f6bf: int3   

----------------------------------------------------------------------
if_icmplt  161 if_icmplt  [0xa756f6e0, 0xa756fb40]  1120 bytes

  0xa756f6e0: pop    %eax
  0xa756f6e1: push   %eax
  0xa756f6e2: push   %ebx
  0xa756f6e3: push   %ecx
  0xa756f6e4: push   %edx
  0xa756f6e5: mov    -0x10(%ebp),%ecx
  0xa756f6e8: test   %ecx,%ecx
  0xa756f6ea: je     0xa756f72e
  0xa756f6f0: mov    -0xc(%ebp),%ebx
  0xa756f6f3: movzwl 0x2(%ecx),%edx
  0xa756f6f7: add    0x8(%ebx),%edx
  0xa756f6fa: lea    0x28(%edx),%edx
  0xa756f6fd: cmp    %esi,%edx
  0xa756f6ff: je     0xa756f72e
  0xa756f705: push   %ecx
  0xa756f706: push   %esi
  0xa756f707: push   %ebx
  0xa756f708: cmpl   $0x0,-0x8(%ebp)
  0xa756f70f: je     0xa756f726
  0xa756f715: push   $0xb7449b18
  0xa756f71a: call   0xa756f71f
  0xa756f71f: pusha  
  0xa756f720: call   0xb6ff5f32
  0xa756f725: hlt    
  0xa756f726: call   0xb6e61602
  0xa756f72b: add    $0xc,%esp
  0xa756f72e: pop    %edx
  0xa756f72f: pop    %ecx
  0xa756f730: pop    %ebx
  0xa756f731: pop    %eax
  0xa756f732: pop    %edx
  0xa756f733: cmp    %eax,%edx
  0xa756f735: jge    0xa756fb02
  0xa756f73b: mov    -0xc(%ebp),%ecx
  0xa756f73e: mov    -0x10(%ebp),%eax
  0xa756f741: test   %eax,%eax
  0xa756f743: je     0xa756f75b
  0xa756f749: mov    0x4(%eax),%ebx
  0xa756f74c: add    $0x1,%ebx
  0xa756f74f: sbb    $0x0,%ebx
  0xa756f752: mov    %ebx,0x4(%eax)
  0xa756f755: add    0x8(%eax),%eax
  0xa756f758: mov    %eax,-0x10(%ebp)
  0xa756f75b: movswl 0x1(%esi),%edx
  0xa756f75f: bswap  %edx
  0xa756f761: sar    $0x10,%edx
  0xa756f764: add    %edx,%esi
  0xa756f766: test   %edx,%edx
  0xa756f768: jns    0xa756f871
  0xa756f76e: mov    0x10(%ecx),%eax
  0xa756f771: test   %eax,%eax
  0xa756f773: jne    0xa756f832
  0xa756f779: push   %edx
  0xa756f77a: push   %ecx
  0xa756f77b: call   0xa756f785
  0xa756f780: jmp    0xa756f825
  0xa756f785: push   %ecx
  0xa756f786: lea    0x8(%esp),%eax
  0xa756f78a: cmpl   $0x0,-0x8(%ebp)
  0xa756f791: je     0xa756f7a8
  0xa756f797: push   $0xb7449b58
  0xa756f79c: call   0xa756f7a1
  0xa756f7a1: pusha  
  0xa756f7a2: call   0xb6ff5f32
  0xa756f7a7: hlt    
  0xa756f7a8: mov    %esi,-0x1c(%ebp)
  0xa756f7ab: mov    %esp,%edi
  0xa756f7ad: shr    $0xc,%edi
  0xa756f7b0: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f7b7: push   %edi
  0xa756f7b8: mov    %ebp,0x148(%edi)
  0xa756f7be: mov    %eax,0x140(%edi)
  0xa756f7c4: call   0xb6e61c92
  0xa756f7c9: add    $0x8,%esp
  0xa756f7cc: push   %eax
  0xa756f7cd: mov    %esp,%eax
  0xa756f7cf: shr    $0xc,%eax
  0xa756f7d2: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f7d9: cmp    %eax,%edi
  0xa756f7db: je     0xa756f7f2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f7e1: push   $0xb74acf8c
  0xa756f7e6: call   0xa756f7eb
  0xa756f7eb: pusha  
  0xa756f7ec: call   0xb6ff5f32
  0xa756f7f1: hlt    
  0xa756f7f2: pop    %eax
  0xa756f7f3: movl   $0x0,0x140(%edi)
  0xa756f7fd: movl   $0x0,0x148(%edi)
  0xa756f807: movl   $0x0,0x144(%edi)
  0xa756f811: cmpl   $0x0,0x4(%edi)
  0xa756f818: jne    0xa7556400
  0xa756f81e: mov    -0x1c(%ebp),%esi
  0xa756f821: mov    -0x18(%ebp),%edi
  0xa756f824: ret    
  0xa756f825: pop    %ecx
  0xa756f826: pop    %edx
  0xa756f827: mov    0x10(%ecx),%eax
  0xa756f82a: test   %eax,%eax
  0xa756f82c: je     0xa756f871
  0xa756f832: mov    0xc(%ecx),%ebx
  0xa756f835: test   %ebx,%ebx
  0xa756f837: je     0xa756f859
  0xa756f839: mov    0xc0(%ebx),%eax
  0xa756f83f: add    $0x8,%eax
  0xa756f842: mov    %eax,0xc0(%ebx)
  0xa756f848: and    $0x1ff8,%eax
  0xa756f84e: je     0xa756f974
  0xa756f854: jmp    0xa756f871
  0xa756f859: mov    0x10(%ecx),%ecx
  0xa756f85c: mov    0xc(%ecx),%eax
  0xa756f85f: add    $0x8,%eax
  0xa756f862: mov    %eax,0xc(%ecx)
  0xa756f865: and    $0x1ff8,%eax
  0xa756f86b: je     0xa756f974
  0xa756f871: movzbl (%esi),%ebx
  0xa756f874: jmp    *-0x48722ae0(,%ebx,4)
  0xa756f87b: call   0xa756f885
  0xa756f880: jmp    0xa756f924
  0xa756f885: lea    0x4(%esp),%eax
  0xa756f889: cmpl   $0x0,-0x8(%ebp)
  0xa756f890: je     0xa756f8a7
  0xa756f896: push   $0xb7449b58
  0xa756f89b: call   0xa756f8a0
  0xa756f8a0: pusha  
  0xa756f8a1: call   0xb6ff5f32
  0xa756f8a6: hlt    
  0xa756f8a7: mov    %esi,-0x1c(%ebp)
  0xa756f8aa: mov    %esp,%edi
  0xa756f8ac: shr    $0xc,%edi
  0xa756f8af: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f8b6: push   %edi
  0xa756f8b7: mov    %ebp,0x148(%edi)
  0xa756f8bd: mov    %eax,0x140(%edi)
  0xa756f8c3: call   0xb6e61328
  0xa756f8c8: add    $0x4,%esp
  0xa756f8cb: push   %eax
  0xa756f8cc: mov    %esp,%eax
  0xa756f8ce: shr    $0xc,%eax
  0xa756f8d1: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f8d8: cmp    %eax,%edi
  0xa756f8da: je     0xa756f8f1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f8e0: push   $0xb74acf8c
  0xa756f8e5: call   0xa756f8ea
  0xa756f8ea: pusha  
  0xa756f8eb: call   0xb6ff5f32
  0xa756f8f0: hlt    
  0xa756f8f1: pop    %eax
  0xa756f8f2: movl   $0x0,0x140(%edi)
  0xa756f8fc: movl   $0x0,0x148(%edi)
  0xa756f906: movl   $0x0,0x144(%edi)
  0xa756f910: cmpl   $0x0,0x4(%edi)
  0xa756f917: jne    0xa7556400
  0xa756f91d: mov    -0x1c(%ebp),%esi
  0xa756f920: mov    -0x18(%ebp),%edi
  0xa756f923: ret    
  0xa756f924: movzbl (%esi),%ebx
  0xa756f927: push   %eax
  0xa756f928: push   %ebx
  0xa756f929: mov    -0xc(%ebp),%ebx
  0xa756f92c: mov    0xc(%ebx),%eax
  0xa756f92f: test   %eax,%eax
  0xa756f931: je     0xa756f96a
  0xa756f937: push   %esi
  0xa756f938: push   %ebx
  0xa756f939: cmpl   $0x0,-0x8(%ebp)
  0xa756f940: je     0xa756f957
  0xa756f946: push   $0xb7449b18
  0xa756f94b: call   0xa756f950
  0xa756f950: pusha  
  0xa756f951: call   0xb6ff5f32
  0xa756f956: hlt    
  0xa756f957: call   0xb6e61172
  0xa756f95c: add    $0x8,%esp
  0xa756f95f: mov    0xc(%ebx),%ebx
  0xa756f962: add    $0xe0,%ebx
  0xa756f968: add    %ebx,%eax
  0xa756f96a: mov    %eax,-0x10(%ebp)
  0xa756f96d: pop    %ebx
  0xa756f96e: pop    %eax
  0xa756f96f: jmp    0xa756f871
  0xa756f974: neg    %edx
  0xa756f976: add    %esi,%edx
  0xa756f978: call   0xa756f982
  0xa756f97d: jmp    0xa756fa22
  0xa756f982: push   %edx
  0xa756f983: lea    0x8(%esp),%eax
  0xa756f987: cmpl   $0x0,-0x8(%ebp)
  0xa756f98e: je     0xa756f9a5
  0xa756f994: push   $0xb7449b58
  0xa756f999: call   0xa756f99e
  0xa756f99e: pusha  
  0xa756f99f: call   0xb6ff5f32
  0xa756f9a4: hlt    
  0xa756f9a5: mov    %esi,-0x1c(%ebp)
  0xa756f9a8: mov    %esp,%edi
  0xa756f9aa: shr    $0xc,%edi
  0xa756f9ad: mov    -0x4871aba0(,%edi,4),%edi
  0xa756f9b4: push   %edi
  0xa756f9b5: mov    %ebp,0x148(%edi)
  0xa756f9bb: mov    %eax,0x140(%edi)
  0xa756f9c1: call   0xb6e60bc8
  0xa756f9c6: add    $0x8,%esp
  0xa756f9c9: push   %eax
  0xa756f9ca: mov    %esp,%eax
  0xa756f9cc: shr    $0xc,%eax
  0xa756f9cf: mov    -0x4871aba0(,%eax,4),%eax
  0xa756f9d6: cmp    %eax,%edi
  0xa756f9d8: je     0xa756f9ef
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756f9de: push   $0xb74acf8c
  0xa756f9e3: call   0xa756f9e8
  0xa756f9e8: pusha  
  0xa756f9e9: call   0xb6ff5f32
  0xa756f9ee: hlt    
  0xa756f9ef: pop    %eax
  0xa756f9f0: movl   $0x0,0x140(%edi)
  0xa756f9fa: movl   $0x0,0x148(%edi)
  0xa756fa04: movl   $0x0,0x144(%edi)
  0xa756fa0e: cmpl   $0x0,0x4(%edi)
  0xa756fa15: jne    0xa7556400
  0xa756fa1b: mov    -0x1c(%ebp),%esi
  0xa756fa1e: mov    -0x18(%ebp),%edi
  0xa756fa21: ret    
  0xa756fa22: movzbl (%esi),%ebx
  0xa756fa25: test   %eax,%eax
  0xa756fa27: je     0xa756f871
  0xa756fa2d: mov    0x38(%eax),%ecx
  0xa756fa30: cmp    $0xfffffffe,%ecx
  0xa756fa33: je     0xa756f871
  0xa756fa39: mov    %eax,%ebx
  0xa756fa3b: mov    %esp,%ecx
  0xa756fa3d: shr    $0xc,%ecx
  0xa756fa40: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756fa47: call   0xa756fa51
  0xa756fa4c: jmp    0xa756faf0
  0xa756fa51: lea    0x4(%esp),%eax
  0xa756fa55: cmpl   $0x0,-0x8(%ebp)
  0xa756fa5c: je     0xa756fa73
  0xa756fa62: push   $0xb7449b58
  0xa756fa67: call   0xa756fa6c
  0xa756fa6c: pusha  
  0xa756fa6d: call   0xb6ff5f32
  0xa756fa72: hlt    
  0xa756fa73: mov    %esi,-0x1c(%ebp)
  0xa756fa76: mov    %esp,%edi
  0xa756fa78: shr    $0xc,%edi
  0xa756fa7b: mov    -0x4871aba0(,%edi,4),%edi
  0xa756fa82: push   %edi
  0xa756fa83: mov    %ebp,0x148(%edi)
  0xa756fa89: mov    %eax,0x140(%edi)
  0xa756fa8f: call   0xb717c684
  0xa756fa94: add    $0x4,%esp
  0xa756fa97: push   %eax
  0xa756fa98: mov    %esp,%eax
  0xa756fa9a: shr    $0xc,%eax
  0xa756fa9d: mov    -0x4871aba0(,%eax,4),%eax
  0xa756faa4: cmp    %eax,%edi
  0xa756faa6: je     0xa756fabd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756faac: push   $0xb74acf8c
  0xa756fab1: call   0xa756fab6
  0xa756fab6: pusha  
  0xa756fab7: call   0xb6ff5f32
  0xa756fabc: hlt    
  0xa756fabd: pop    %eax
  0xa756fabe: movl   $0x0,0x140(%edi)
  0xa756fac8: movl   $0x0,0x148(%edi)
  0xa756fad2: movl   $0x0,0x144(%edi)
  0xa756fadc: cmpl   $0x0,0x4(%edi)
  0xa756fae3: jne    0xa7556400
  0xa756fae9: mov    -0x1c(%ebp),%esi
  0xa756faec: mov    -0x18(%ebp),%edi
  0xa756faef: ret    
  0xa756faf0: mov    %eax,%ecx
  0xa756faf2: mov    -0x4(%ebp),%edx
  0xa756faf5: mov    %ebp,%esp
  0xa756faf7: pop    %ebp
  0xa756faf8: pop    %edi
  0xa756faf9: mov    %edx,%esp
  0xa756fafb: and    $0xfffffff0,%esp
  0xa756fafe: push   %edi
  0xa756faff: jmp    *0x58(%ebx)
  0xa756fb02: mov    -0x10(%ebp),%eax
  0xa756fb05: test   %eax,%eax
  0xa756fb07: je     0xa756fb1b
  0xa756fb0d: addl   $0x1,0xc(%eax)
  0xa756fb11: sbbl   $0x0,0xc(%eax)
  0xa756fb15: add    $0x10,%eax
  0xa756fb18: mov    %eax,-0x10(%ebp)
  0xa756fb1b: movzbl 0x3(%esi),%ebx
  0xa756fb1f: add    $0x3,%esi
  0xa756fb22: jmp    *-0x48722ae0(,%ebx,4)
  0xa756fb29: nop
  0xa756fb2a: nop
  0xa756fb2b: nop
  0xa756fb2c: int3   
  0xa756fb2d: int3   
  0xa756fb2e: int3   
  0xa756fb2f: int3   
  0xa756fb30: int3   
  0xa756fb31: int3   
  0xa756fb32: int3   
  0xa756fb33: int3   
  0xa756fb34: int3   
  0xa756fb35: int3   
  0xa756fb36: int3   
  0xa756fb37: int3   
  0xa756fb38: int3   
  0xa756fb39: int3   
  0xa756fb3a: int3   
  0xa756fb3b: int3   
  0xa756fb3c: int3   
  0xa756fb3d: int3   
  0xa756fb3e: int3   
  0xa756fb3f: int3   

----------------------------------------------------------------------
if_icmpge  162 if_icmpge  [0xa756fb60, 0xa756ffc0]  1120 bytes

  0xa756fb60: pop    %eax
  0xa756fb61: push   %eax
  0xa756fb62: push   %ebx
  0xa756fb63: push   %ecx
  0xa756fb64: push   %edx
  0xa756fb65: mov    -0x10(%ebp),%ecx
  0xa756fb68: test   %ecx,%ecx
  0xa756fb6a: je     0xa756fbae
  0xa756fb70: mov    -0xc(%ebp),%ebx
  0xa756fb73: movzwl 0x2(%ecx),%edx
  0xa756fb77: add    0x8(%ebx),%edx
  0xa756fb7a: lea    0x28(%edx),%edx
  0xa756fb7d: cmp    %esi,%edx
  0xa756fb7f: je     0xa756fbae
  0xa756fb85: push   %ecx
  0xa756fb86: push   %esi
  0xa756fb87: push   %ebx
  0xa756fb88: cmpl   $0x0,-0x8(%ebp)
  0xa756fb8f: je     0xa756fba6
  0xa756fb95: push   $0xb7449b18
  0xa756fb9a: call   0xa756fb9f
  0xa756fb9f: pusha  
  0xa756fba0: call   0xb6ff5f32
  0xa756fba5: hlt    
  0xa756fba6: call   0xb6e61602
  0xa756fbab: add    $0xc,%esp
  0xa756fbae: pop    %edx
  0xa756fbaf: pop    %ecx
  0xa756fbb0: pop    %ebx
  0xa756fbb1: pop    %eax
  0xa756fbb2: pop    %edx
  0xa756fbb3: cmp    %eax,%edx
  0xa756fbb5: jl     0xa756ff82
  0xa756fbbb: mov    -0xc(%ebp),%ecx
  0xa756fbbe: mov    -0x10(%ebp),%eax
  0xa756fbc1: test   %eax,%eax
  0xa756fbc3: je     0xa756fbdb
  0xa756fbc9: mov    0x4(%eax),%ebx
  0xa756fbcc: add    $0x1,%ebx
  0xa756fbcf: sbb    $0x0,%ebx
  0xa756fbd2: mov    %ebx,0x4(%eax)
  0xa756fbd5: add    0x8(%eax),%eax
  0xa756fbd8: mov    %eax,-0x10(%ebp)
  0xa756fbdb: movswl 0x1(%esi),%edx
  0xa756fbdf: bswap  %edx
  0xa756fbe1: sar    $0x10,%edx
  0xa756fbe4: add    %edx,%esi
  0xa756fbe6: test   %edx,%edx
  0xa756fbe8: jns    0xa756fcf1
  0xa756fbee: mov    0x10(%ecx),%eax
  0xa756fbf1: test   %eax,%eax
  0xa756fbf3: jne    0xa756fcb2
  0xa756fbf9: push   %edx
  0xa756fbfa: push   %ecx
  0xa756fbfb: call   0xa756fc05
  0xa756fc00: jmp    0xa756fca5
  0xa756fc05: push   %ecx
  0xa756fc06: lea    0x8(%esp),%eax
  0xa756fc0a: cmpl   $0x0,-0x8(%ebp)
  0xa756fc11: je     0xa756fc28
  0xa756fc17: push   $0xb7449b58
  0xa756fc1c: call   0xa756fc21
  0xa756fc21: pusha  
  0xa756fc22: call   0xb6ff5f32
  0xa756fc27: hlt    
  0xa756fc28: mov    %esi,-0x1c(%ebp)
  0xa756fc2b: mov    %esp,%edi
  0xa756fc2d: shr    $0xc,%edi
  0xa756fc30: mov    -0x4871aba0(,%edi,4),%edi
  0xa756fc37: push   %edi
  0xa756fc38: mov    %ebp,0x148(%edi)
  0xa756fc3e: mov    %eax,0x140(%edi)
  0xa756fc44: call   0xb6e61c92
  0xa756fc49: add    $0x8,%esp
  0xa756fc4c: push   %eax
  0xa756fc4d: mov    %esp,%eax
  0xa756fc4f: shr    $0xc,%eax
  0xa756fc52: mov    -0x4871aba0(,%eax,4),%eax
  0xa756fc59: cmp    %eax,%edi
  0xa756fc5b: je     0xa756fc72
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756fc61: push   $0xb74acf8c
  0xa756fc66: call   0xa756fc6b
  0xa756fc6b: pusha  
  0xa756fc6c: call   0xb6ff5f32
  0xa756fc71: hlt    
  0xa756fc72: pop    %eax
  0xa756fc73: movl   $0x0,0x140(%edi)
  0xa756fc7d: movl   $0x0,0x148(%edi)
  0xa756fc87: movl   $0x0,0x144(%edi)
  0xa756fc91: cmpl   $0x0,0x4(%edi)
  0xa756fc98: jne    0xa7556400
  0xa756fc9e: mov    -0x1c(%ebp),%esi
  0xa756fca1: mov    -0x18(%ebp),%edi
  0xa756fca4: ret    
  0xa756fca5: pop    %ecx
  0xa756fca6: pop    %edx
  0xa756fca7: mov    0x10(%ecx),%eax
  0xa756fcaa: test   %eax,%eax
  0xa756fcac: je     0xa756fcf1
  0xa756fcb2: mov    0xc(%ecx),%ebx
  0xa756fcb5: test   %ebx,%ebx
  0xa756fcb7: je     0xa756fcd9
  0xa756fcb9: mov    0xc0(%ebx),%eax
  0xa756fcbf: add    $0x8,%eax
  0xa756fcc2: mov    %eax,0xc0(%ebx)
  0xa756fcc8: and    $0x1ff8,%eax
  0xa756fcce: je     0xa756fdf4
  0xa756fcd4: jmp    0xa756fcf1
  0xa756fcd9: mov    0x10(%ecx),%ecx
  0xa756fcdc: mov    0xc(%ecx),%eax
  0xa756fcdf: add    $0x8,%eax
  0xa756fce2: mov    %eax,0xc(%ecx)
  0xa756fce5: and    $0x1ff8,%eax
  0xa756fceb: je     0xa756fdf4
  0xa756fcf1: movzbl (%esi),%ebx
  0xa756fcf4: jmp    *-0x48722ae0(,%ebx,4)
  0xa756fcfb: call   0xa756fd05
  0xa756fd00: jmp    0xa756fda4
  0xa756fd05: lea    0x4(%esp),%eax
  0xa756fd09: cmpl   $0x0,-0x8(%ebp)
  0xa756fd10: je     0xa756fd27
  0xa756fd16: push   $0xb7449b58
  0xa756fd1b: call   0xa756fd20
  0xa756fd20: pusha  
  0xa756fd21: call   0xb6ff5f32
  0xa756fd26: hlt    
  0xa756fd27: mov    %esi,-0x1c(%ebp)
  0xa756fd2a: mov    %esp,%edi
  0xa756fd2c: shr    $0xc,%edi
  0xa756fd2f: mov    -0x4871aba0(,%edi,4),%edi
  0xa756fd36: push   %edi
  0xa756fd37: mov    %ebp,0x148(%edi)
  0xa756fd3d: mov    %eax,0x140(%edi)
  0xa756fd43: call   0xb6e61328
  0xa756fd48: add    $0x4,%esp
  0xa756fd4b: push   %eax
  0xa756fd4c: mov    %esp,%eax
  0xa756fd4e: shr    $0xc,%eax
  0xa756fd51: mov    -0x4871aba0(,%eax,4),%eax
  0xa756fd58: cmp    %eax,%edi
  0xa756fd5a: je     0xa756fd71
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756fd60: push   $0xb74acf8c
  0xa756fd65: call   0xa756fd6a
  0xa756fd6a: pusha  
  0xa756fd6b: call   0xb6ff5f32
  0xa756fd70: hlt    
  0xa756fd71: pop    %eax
  0xa756fd72: movl   $0x0,0x140(%edi)
  0xa756fd7c: movl   $0x0,0x148(%edi)
  0xa756fd86: movl   $0x0,0x144(%edi)
  0xa756fd90: cmpl   $0x0,0x4(%edi)
  0xa756fd97: jne    0xa7556400
  0xa756fd9d: mov    -0x1c(%ebp),%esi
  0xa756fda0: mov    -0x18(%ebp),%edi
  0xa756fda3: ret    
  0xa756fda4: movzbl (%esi),%ebx
  0xa756fda7: push   %eax
  0xa756fda8: push   %ebx
  0xa756fda9: mov    -0xc(%ebp),%ebx
  0xa756fdac: mov    0xc(%ebx),%eax
  0xa756fdaf: test   %eax,%eax
  0xa756fdb1: je     0xa756fdea
  0xa756fdb7: push   %esi
  0xa756fdb8: push   %ebx
  0xa756fdb9: cmpl   $0x0,-0x8(%ebp)
  0xa756fdc0: je     0xa756fdd7
  0xa756fdc6: push   $0xb7449b18
  0xa756fdcb: call   0xa756fdd0
  0xa756fdd0: pusha  
  0xa756fdd1: call   0xb6ff5f32
  0xa756fdd6: hlt    
  0xa756fdd7: call   0xb6e61172
  0xa756fddc: add    $0x8,%esp
  0xa756fddf: mov    0xc(%ebx),%ebx
  0xa756fde2: add    $0xe0,%ebx
  0xa756fde8: add    %ebx,%eax
  0xa756fdea: mov    %eax,-0x10(%ebp)
  0xa756fded: pop    %ebx
  0xa756fdee: pop    %eax
  0xa756fdef: jmp    0xa756fcf1
  0xa756fdf4: neg    %edx
  0xa756fdf6: add    %esi,%edx
  0xa756fdf8: call   0xa756fe02
  0xa756fdfd: jmp    0xa756fea2
  0xa756fe02: push   %edx
  0xa756fe03: lea    0x8(%esp),%eax
  0xa756fe07: cmpl   $0x0,-0x8(%ebp)
  0xa756fe0e: je     0xa756fe25
  0xa756fe14: push   $0xb7449b58
  0xa756fe19: call   0xa756fe1e
  0xa756fe1e: pusha  
  0xa756fe1f: call   0xb6ff5f32
  0xa756fe24: hlt    
  0xa756fe25: mov    %esi,-0x1c(%ebp)
  0xa756fe28: mov    %esp,%edi
  0xa756fe2a: shr    $0xc,%edi
  0xa756fe2d: mov    -0x4871aba0(,%edi,4),%edi
  0xa756fe34: push   %edi
  0xa756fe35: mov    %ebp,0x148(%edi)
  0xa756fe3b: mov    %eax,0x140(%edi)
  0xa756fe41: call   0xb6e60bc8
  0xa756fe46: add    $0x8,%esp
  0xa756fe49: push   %eax
  0xa756fe4a: mov    %esp,%eax
  0xa756fe4c: shr    $0xc,%eax
  0xa756fe4f: mov    -0x4871aba0(,%eax,4),%eax
  0xa756fe56: cmp    %eax,%edi
  0xa756fe58: je     0xa756fe6f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756fe5e: push   $0xb74acf8c
  0xa756fe63: call   0xa756fe68
  0xa756fe68: pusha  
  0xa756fe69: call   0xb6ff5f32
  0xa756fe6e: hlt    
  0xa756fe6f: pop    %eax
  0xa756fe70: movl   $0x0,0x140(%edi)
  0xa756fe7a: movl   $0x0,0x148(%edi)
  0xa756fe84: movl   $0x0,0x144(%edi)
  0xa756fe8e: cmpl   $0x0,0x4(%edi)
  0xa756fe95: jne    0xa7556400
  0xa756fe9b: mov    -0x1c(%ebp),%esi
  0xa756fe9e: mov    -0x18(%ebp),%edi
  0xa756fea1: ret    
  0xa756fea2: movzbl (%esi),%ebx
  0xa756fea5: test   %eax,%eax
  0xa756fea7: je     0xa756fcf1
  0xa756fead: mov    0x38(%eax),%ecx
  0xa756feb0: cmp    $0xfffffffe,%ecx
  0xa756feb3: je     0xa756fcf1
  0xa756feb9: mov    %eax,%ebx
  0xa756febb: mov    %esp,%ecx
  0xa756febd: shr    $0xc,%ecx
  0xa756fec0: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa756fec7: call   0xa756fed1
  0xa756fecc: jmp    0xa756ff70
  0xa756fed1: lea    0x4(%esp),%eax
  0xa756fed5: cmpl   $0x0,-0x8(%ebp)
  0xa756fedc: je     0xa756fef3
  0xa756fee2: push   $0xb7449b58
  0xa756fee7: call   0xa756feec
  0xa756feec: pusha  
  0xa756feed: call   0xb6ff5f32
  0xa756fef2: hlt    
  0xa756fef3: mov    %esi,-0x1c(%ebp)
  0xa756fef6: mov    %esp,%edi
  0xa756fef8: shr    $0xc,%edi
  0xa756fefb: mov    -0x4871aba0(,%edi,4),%edi
  0xa756ff02: push   %edi
  0xa756ff03: mov    %ebp,0x148(%edi)
  0xa756ff09: mov    %eax,0x140(%edi)
  0xa756ff0f: call   0xb717c684
  0xa756ff14: add    $0x4,%esp
  0xa756ff17: push   %eax
  0xa756ff18: mov    %esp,%eax
  0xa756ff1a: shr    $0xc,%eax
  0xa756ff1d: mov    -0x4871aba0(,%eax,4),%eax
  0xa756ff24: cmp    %eax,%edi
  0xa756ff26: je     0xa756ff3d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa756ff2c: push   $0xb74acf8c
  0xa756ff31: call   0xa756ff36
  0xa756ff36: pusha  
  0xa756ff37: call   0xb6ff5f32
  0xa756ff3c: hlt    
  0xa756ff3d: pop    %eax
  0xa756ff3e: movl   $0x0,0x140(%edi)
  0xa756ff48: movl   $0x0,0x148(%edi)
  0xa756ff52: movl   $0x0,0x144(%edi)
  0xa756ff5c: cmpl   $0x0,0x4(%edi)
  0xa756ff63: jne    0xa7556400
  0xa756ff69: mov    -0x1c(%ebp),%esi
  0xa756ff6c: mov    -0x18(%ebp),%edi
  0xa756ff6f: ret    
  0xa756ff70: mov    %eax,%ecx
  0xa756ff72: mov    -0x4(%ebp),%edx
  0xa756ff75: mov    %ebp,%esp
  0xa756ff77: pop    %ebp
  0xa756ff78: pop    %edi
  0xa756ff79: mov    %edx,%esp
  0xa756ff7b: and    $0xfffffff0,%esp
  0xa756ff7e: push   %edi
  0xa756ff7f: jmp    *0x58(%ebx)
  0xa756ff82: mov    -0x10(%ebp),%eax
  0xa756ff85: test   %eax,%eax
  0xa756ff87: je     0xa756ff9b
  0xa756ff8d: addl   $0x1,0xc(%eax)
  0xa756ff91: sbbl   $0x0,0xc(%eax)
  0xa756ff95: add    $0x10,%eax
  0xa756ff98: mov    %eax,-0x10(%ebp)
  0xa756ff9b: movzbl 0x3(%esi),%ebx
  0xa756ff9f: add    $0x3,%esi
  0xa756ffa2: jmp    *-0x48722ae0(,%ebx,4)
  0xa756ffa9: nop
  0xa756ffaa: nop
  0xa756ffab: nop
  0xa756ffac: int3   
  0xa756ffad: int3   
  0xa756ffae: int3   
  0xa756ffaf: int3   
  0xa756ffb0: int3   
  0xa756ffb1: int3   
  0xa756ffb2: int3   
  0xa756ffb3: int3   
  0xa756ffb4: int3   
  0xa756ffb5: int3   
  0xa756ffb6: int3   
  0xa756ffb7: int3   
  0xa756ffb8: int3   
  0xa756ffb9: int3   
  0xa756ffba: int3   
  0xa756ffbb: int3   
  0xa756ffbc: int3   
  0xa756ffbd: int3   
  0xa756ffbe: int3   
  0xa756ffbf: int3   

----------------------------------------------------------------------
if_icmpgt  163 if_icmpgt  [0xa756ffe0, 0xa7570440]  1120 bytes

  0xa756ffe0: pop    %eax
  0xa756ffe1: push   %eax
  0xa756ffe2: push   %ebx
  0xa756ffe3: push   %ecx
  0xa756ffe4: push   %edx
  0xa756ffe5: mov    -0x10(%ebp),%ecx
  0xa756ffe8: test   %ecx,%ecx
  0xa756ffea: je     0xa757002e
  0xa756fff0: mov    -0xc(%ebp),%ebx
  0xa756fff3: movzwl 0x2(%ecx),%edx
  0xa756fff7: add    0x8(%ebx),%edx
  0xa756fffa: lea    0x28(%edx),%edx
  0xa756fffd: cmp    %esi,%edx
  0xa756ffff: je     0xa757002e
  0xa7570005: push   %ecx
  0xa7570006: push   %esi
  0xa7570007: push   %ebx
  0xa7570008: cmpl   $0x0,-0x8(%ebp)
  0xa757000f: je     0xa7570026
  0xa7570015: push   $0xb7449b18
  0xa757001a: call   0xa757001f
  0xa757001f: pusha  
  0xa7570020: call   0xb6ff5f32
  0xa7570025: hlt    
  0xa7570026: call   0xb6e61602
  0xa757002b: add    $0xc,%esp
  0xa757002e: pop    %edx
  0xa757002f: pop    %ecx
  0xa7570030: pop    %ebx
  0xa7570031: pop    %eax
  0xa7570032: pop    %edx
  0xa7570033: cmp    %eax,%edx
  0xa7570035: jle    0xa7570402
  0xa757003b: mov    -0xc(%ebp),%ecx
  0xa757003e: mov    -0x10(%ebp),%eax
  0xa7570041: test   %eax,%eax
  0xa7570043: je     0xa757005b
  0xa7570049: mov    0x4(%eax),%ebx
  0xa757004c: add    $0x1,%ebx
  0xa757004f: sbb    $0x0,%ebx
  0xa7570052: mov    %ebx,0x4(%eax)
  0xa7570055: add    0x8(%eax),%eax
  0xa7570058: mov    %eax,-0x10(%ebp)
  0xa757005b: movswl 0x1(%esi),%edx
  0xa757005f: bswap  %edx
  0xa7570061: sar    $0x10,%edx
  0xa7570064: add    %edx,%esi
  0xa7570066: test   %edx,%edx
  0xa7570068: jns    0xa7570171
  0xa757006e: mov    0x10(%ecx),%eax
  0xa7570071: test   %eax,%eax
  0xa7570073: jne    0xa7570132
  0xa7570079: push   %edx
  0xa757007a: push   %ecx
  0xa757007b: call   0xa7570085
  0xa7570080: jmp    0xa7570125
  0xa7570085: push   %ecx
  0xa7570086: lea    0x8(%esp),%eax
  0xa757008a: cmpl   $0x0,-0x8(%ebp)
  0xa7570091: je     0xa75700a8
  0xa7570097: push   $0xb7449b58
  0xa757009c: call   0xa75700a1
  0xa75700a1: pusha  
  0xa75700a2: call   0xb6ff5f32
  0xa75700a7: hlt    
  0xa75700a8: mov    %esi,-0x1c(%ebp)
  0xa75700ab: mov    %esp,%edi
  0xa75700ad: shr    $0xc,%edi
  0xa75700b0: mov    -0x4871aba0(,%edi,4),%edi
  0xa75700b7: push   %edi
  0xa75700b8: mov    %ebp,0x148(%edi)
  0xa75700be: mov    %eax,0x140(%edi)
  0xa75700c4: call   0xb6e61c92
  0xa75700c9: add    $0x8,%esp
  0xa75700cc: push   %eax
  0xa75700cd: mov    %esp,%eax
  0xa75700cf: shr    $0xc,%eax
  0xa75700d2: mov    -0x4871aba0(,%eax,4),%eax
  0xa75700d9: cmp    %eax,%edi
  0xa75700db: je     0xa75700f2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75700e1: push   $0xb74acf8c
  0xa75700e6: call   0xa75700eb
  0xa75700eb: pusha  
  0xa75700ec: call   0xb6ff5f32
  0xa75700f1: hlt    
  0xa75700f2: pop    %eax
  0xa75700f3: movl   $0x0,0x140(%edi)
  0xa75700fd: movl   $0x0,0x148(%edi)
  0xa7570107: movl   $0x0,0x144(%edi)
  0xa7570111: cmpl   $0x0,0x4(%edi)
  0xa7570118: jne    0xa7556400
  0xa757011e: mov    -0x1c(%ebp),%esi
  0xa7570121: mov    -0x18(%ebp),%edi
  0xa7570124: ret    
  0xa7570125: pop    %ecx
  0xa7570126: pop    %edx
  0xa7570127: mov    0x10(%ecx),%eax
  0xa757012a: test   %eax,%eax
  0xa757012c: je     0xa7570171
  0xa7570132: mov    0xc(%ecx),%ebx
  0xa7570135: test   %ebx,%ebx
  0xa7570137: je     0xa7570159
  0xa7570139: mov    0xc0(%ebx),%eax
  0xa757013f: add    $0x8,%eax
  0xa7570142: mov    %eax,0xc0(%ebx)
  0xa7570148: and    $0x1ff8,%eax
  0xa757014e: je     0xa7570274
  0xa7570154: jmp    0xa7570171
  0xa7570159: mov    0x10(%ecx),%ecx
  0xa757015c: mov    0xc(%ecx),%eax
  0xa757015f: add    $0x8,%eax
  0xa7570162: mov    %eax,0xc(%ecx)
  0xa7570165: and    $0x1ff8,%eax
  0xa757016b: je     0xa7570274
  0xa7570171: movzbl (%esi),%ebx
  0xa7570174: jmp    *-0x48722ae0(,%ebx,4)
  0xa757017b: call   0xa7570185
  0xa7570180: jmp    0xa7570224
  0xa7570185: lea    0x4(%esp),%eax
  0xa7570189: cmpl   $0x0,-0x8(%ebp)
  0xa7570190: je     0xa75701a7
  0xa7570196: push   $0xb7449b58
  0xa757019b: call   0xa75701a0
  0xa75701a0: pusha  
  0xa75701a1: call   0xb6ff5f32
  0xa75701a6: hlt    
  0xa75701a7: mov    %esi,-0x1c(%ebp)
  0xa75701aa: mov    %esp,%edi
  0xa75701ac: shr    $0xc,%edi
  0xa75701af: mov    -0x4871aba0(,%edi,4),%edi
  0xa75701b6: push   %edi
  0xa75701b7: mov    %ebp,0x148(%edi)
  0xa75701bd: mov    %eax,0x140(%edi)
  0xa75701c3: call   0xb6e61328
  0xa75701c8: add    $0x4,%esp
  0xa75701cb: push   %eax
  0xa75701cc: mov    %esp,%eax
  0xa75701ce: shr    $0xc,%eax
  0xa75701d1: mov    -0x4871aba0(,%eax,4),%eax
  0xa75701d8: cmp    %eax,%edi
  0xa75701da: je     0xa75701f1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75701e0: push   $0xb74acf8c
  0xa75701e5: call   0xa75701ea
  0xa75701ea: pusha  
  0xa75701eb: call   0xb6ff5f32
  0xa75701f0: hlt    
  0xa75701f1: pop    %eax
  0xa75701f2: movl   $0x0,0x140(%edi)
  0xa75701fc: movl   $0x0,0x148(%edi)
  0xa7570206: movl   $0x0,0x144(%edi)
  0xa7570210: cmpl   $0x0,0x4(%edi)
  0xa7570217: jne    0xa7556400
  0xa757021d: mov    -0x1c(%ebp),%esi
  0xa7570220: mov    -0x18(%ebp),%edi
  0xa7570223: ret    
  0xa7570224: movzbl (%esi),%ebx
  0xa7570227: push   %eax
  0xa7570228: push   %ebx
  0xa7570229: mov    -0xc(%ebp),%ebx
  0xa757022c: mov    0xc(%ebx),%eax
  0xa757022f: test   %eax,%eax
  0xa7570231: je     0xa757026a
  0xa7570237: push   %esi
  0xa7570238: push   %ebx
  0xa7570239: cmpl   $0x0,-0x8(%ebp)
  0xa7570240: je     0xa7570257
  0xa7570246: push   $0xb7449b18
  0xa757024b: call   0xa7570250
  0xa7570250: pusha  
  0xa7570251: call   0xb6ff5f32
  0xa7570256: hlt    
  0xa7570257: call   0xb6e61172
  0xa757025c: add    $0x8,%esp
  0xa757025f: mov    0xc(%ebx),%ebx
  0xa7570262: add    $0xe0,%ebx
  0xa7570268: add    %ebx,%eax
  0xa757026a: mov    %eax,-0x10(%ebp)
  0xa757026d: pop    %ebx
  0xa757026e: pop    %eax
  0xa757026f: jmp    0xa7570171
  0xa7570274: neg    %edx
  0xa7570276: add    %esi,%edx
  0xa7570278: call   0xa7570282
  0xa757027d: jmp    0xa7570322
  0xa7570282: push   %edx
  0xa7570283: lea    0x8(%esp),%eax
  0xa7570287: cmpl   $0x0,-0x8(%ebp)
  0xa757028e: je     0xa75702a5
  0xa7570294: push   $0xb7449b58
  0xa7570299: call   0xa757029e
  0xa757029e: pusha  
  0xa757029f: call   0xb6ff5f32
  0xa75702a4: hlt    
  0xa75702a5: mov    %esi,-0x1c(%ebp)
  0xa75702a8: mov    %esp,%edi
  0xa75702aa: shr    $0xc,%edi
  0xa75702ad: mov    -0x4871aba0(,%edi,4),%edi
  0xa75702b4: push   %edi
  0xa75702b5: mov    %ebp,0x148(%edi)
  0xa75702bb: mov    %eax,0x140(%edi)
  0xa75702c1: call   0xb6e60bc8
  0xa75702c6: add    $0x8,%esp
  0xa75702c9: push   %eax
  0xa75702ca: mov    %esp,%eax
  0xa75702cc: shr    $0xc,%eax
  0xa75702cf: mov    -0x4871aba0(,%eax,4),%eax
  0xa75702d6: cmp    %eax,%edi
  0xa75702d8: je     0xa75702ef
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75702de: push   $0xb74acf8c
  0xa75702e3: call   0xa75702e8
  0xa75702e8: pusha  
  0xa75702e9: call   0xb6ff5f32
  0xa75702ee: hlt    
  0xa75702ef: pop    %eax
  0xa75702f0: movl   $0x0,0x140(%edi)
  0xa75702fa: movl   $0x0,0x148(%edi)
  0xa7570304: movl   $0x0,0x144(%edi)
  0xa757030e: cmpl   $0x0,0x4(%edi)
  0xa7570315: jne    0xa7556400
  0xa757031b: mov    -0x1c(%ebp),%esi
  0xa757031e: mov    -0x18(%ebp),%edi
  0xa7570321: ret    
  0xa7570322: movzbl (%esi),%ebx
  0xa7570325: test   %eax,%eax
  0xa7570327: je     0xa7570171
  0xa757032d: mov    0x38(%eax),%ecx
  0xa7570330: cmp    $0xfffffffe,%ecx
  0xa7570333: je     0xa7570171
  0xa7570339: mov    %eax,%ebx
  0xa757033b: mov    %esp,%ecx
  0xa757033d: shr    $0xc,%ecx
  0xa7570340: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7570347: call   0xa7570351
  0xa757034c: jmp    0xa75703f0
  0xa7570351: lea    0x4(%esp),%eax
  0xa7570355: cmpl   $0x0,-0x8(%ebp)
  0xa757035c: je     0xa7570373
  0xa7570362: push   $0xb7449b58
  0xa7570367: call   0xa757036c
  0xa757036c: pusha  
  0xa757036d: call   0xb6ff5f32
  0xa7570372: hlt    
  0xa7570373: mov    %esi,-0x1c(%ebp)
  0xa7570376: mov    %esp,%edi
  0xa7570378: shr    $0xc,%edi
  0xa757037b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570382: push   %edi
  0xa7570383: mov    %ebp,0x148(%edi)
  0xa7570389: mov    %eax,0x140(%edi)
  0xa757038f: call   0xb717c684
  0xa7570394: add    $0x4,%esp
  0xa7570397: push   %eax
  0xa7570398: mov    %esp,%eax
  0xa757039a: shr    $0xc,%eax
  0xa757039d: mov    -0x4871aba0(,%eax,4),%eax
  0xa75703a4: cmp    %eax,%edi
  0xa75703a6: je     0xa75703bd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75703ac: push   $0xb74acf8c
  0xa75703b1: call   0xa75703b6
  0xa75703b6: pusha  
  0xa75703b7: call   0xb6ff5f32
  0xa75703bc: hlt    
  0xa75703bd: pop    %eax
  0xa75703be: movl   $0x0,0x140(%edi)
  0xa75703c8: movl   $0x0,0x148(%edi)
  0xa75703d2: movl   $0x0,0x144(%edi)
  0xa75703dc: cmpl   $0x0,0x4(%edi)
  0xa75703e3: jne    0xa7556400
  0xa75703e9: mov    -0x1c(%ebp),%esi
  0xa75703ec: mov    -0x18(%ebp),%edi
  0xa75703ef: ret    
  0xa75703f0: mov    %eax,%ecx
  0xa75703f2: mov    -0x4(%ebp),%edx
  0xa75703f5: mov    %ebp,%esp
  0xa75703f7: pop    %ebp
  0xa75703f8: pop    %edi
  0xa75703f9: mov    %edx,%esp
  0xa75703fb: and    $0xfffffff0,%esp
  0xa75703fe: push   %edi
  0xa75703ff: jmp    *0x58(%ebx)
  0xa7570402: mov    -0x10(%ebp),%eax
  0xa7570405: test   %eax,%eax
  0xa7570407: je     0xa757041b
  0xa757040d: addl   $0x1,0xc(%eax)
  0xa7570411: sbbl   $0x0,0xc(%eax)
  0xa7570415: add    $0x10,%eax
  0xa7570418: mov    %eax,-0x10(%ebp)
  0xa757041b: movzbl 0x3(%esi),%ebx
  0xa757041f: add    $0x3,%esi
  0xa7570422: jmp    *-0x48722ae0(,%ebx,4)
  0xa7570429: nop
  0xa757042a: nop
  0xa757042b: nop
  0xa757042c: int3   
  0xa757042d: int3   
  0xa757042e: int3   
  0xa757042f: int3   
  0xa7570430: int3   
  0xa7570431: int3   
  0xa7570432: int3   
  0xa7570433: int3   
  0xa7570434: int3   
  0xa7570435: int3   
  0xa7570436: int3   
  0xa7570437: int3   
  0xa7570438: int3   
  0xa7570439: int3   
  0xa757043a: int3   
  0xa757043b: int3   
  0xa757043c: int3   
  0xa757043d: int3   
  0xa757043e: int3   
  0xa757043f: int3   

----------------------------------------------------------------------
if_icmple  164 if_icmple  [0xa7570460, 0xa75708c0]  1120 bytes

  0xa7570460: pop    %eax
  0xa7570461: push   %eax
  0xa7570462: push   %ebx
  0xa7570463: push   %ecx
  0xa7570464: push   %edx
  0xa7570465: mov    -0x10(%ebp),%ecx
  0xa7570468: test   %ecx,%ecx
  0xa757046a: je     0xa75704ae
  0xa7570470: mov    -0xc(%ebp),%ebx
  0xa7570473: movzwl 0x2(%ecx),%edx
  0xa7570477: add    0x8(%ebx),%edx
  0xa757047a: lea    0x28(%edx),%edx
  0xa757047d: cmp    %esi,%edx
  0xa757047f: je     0xa75704ae
  0xa7570485: push   %ecx
  0xa7570486: push   %esi
  0xa7570487: push   %ebx
  0xa7570488: cmpl   $0x0,-0x8(%ebp)
  0xa757048f: je     0xa75704a6
  0xa7570495: push   $0xb7449b18
  0xa757049a: call   0xa757049f
  0xa757049f: pusha  
  0xa75704a0: call   0xb6ff5f32
  0xa75704a5: hlt    
  0xa75704a6: call   0xb6e61602
  0xa75704ab: add    $0xc,%esp
  0xa75704ae: pop    %edx
  0xa75704af: pop    %ecx
  0xa75704b0: pop    %ebx
  0xa75704b1: pop    %eax
  0xa75704b2: pop    %edx
  0xa75704b3: cmp    %eax,%edx
  0xa75704b5: jg     0xa7570882
  0xa75704bb: mov    -0xc(%ebp),%ecx
  0xa75704be: mov    -0x10(%ebp),%eax
  0xa75704c1: test   %eax,%eax
  0xa75704c3: je     0xa75704db
  0xa75704c9: mov    0x4(%eax),%ebx
  0xa75704cc: add    $0x1,%ebx
  0xa75704cf: sbb    $0x0,%ebx
  0xa75704d2: mov    %ebx,0x4(%eax)
  0xa75704d5: add    0x8(%eax),%eax
  0xa75704d8: mov    %eax,-0x10(%ebp)
  0xa75704db: movswl 0x1(%esi),%edx
  0xa75704df: bswap  %edx
  0xa75704e1: sar    $0x10,%edx
  0xa75704e4: add    %edx,%esi
  0xa75704e6: test   %edx,%edx
  0xa75704e8: jns    0xa75705f1
  0xa75704ee: mov    0x10(%ecx),%eax
  0xa75704f1: test   %eax,%eax
  0xa75704f3: jne    0xa75705b2
  0xa75704f9: push   %edx
  0xa75704fa: push   %ecx
  0xa75704fb: call   0xa7570505
  0xa7570500: jmp    0xa75705a5
  0xa7570505: push   %ecx
  0xa7570506: lea    0x8(%esp),%eax
  0xa757050a: cmpl   $0x0,-0x8(%ebp)
  0xa7570511: je     0xa7570528
  0xa7570517: push   $0xb7449b58
  0xa757051c: call   0xa7570521
  0xa7570521: pusha  
  0xa7570522: call   0xb6ff5f32
  0xa7570527: hlt    
  0xa7570528: mov    %esi,-0x1c(%ebp)
  0xa757052b: mov    %esp,%edi
  0xa757052d: shr    $0xc,%edi
  0xa7570530: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570537: push   %edi
  0xa7570538: mov    %ebp,0x148(%edi)
  0xa757053e: mov    %eax,0x140(%edi)
  0xa7570544: call   0xb6e61c92
  0xa7570549: add    $0x8,%esp
  0xa757054c: push   %eax
  0xa757054d: mov    %esp,%eax
  0xa757054f: shr    $0xc,%eax
  0xa7570552: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570559: cmp    %eax,%edi
  0xa757055b: je     0xa7570572
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7570561: push   $0xb74acf8c
  0xa7570566: call   0xa757056b
  0xa757056b: pusha  
  0xa757056c: call   0xb6ff5f32
  0xa7570571: hlt    
  0xa7570572: pop    %eax
  0xa7570573: movl   $0x0,0x140(%edi)
  0xa757057d: movl   $0x0,0x148(%edi)
  0xa7570587: movl   $0x0,0x144(%edi)
  0xa7570591: cmpl   $0x0,0x4(%edi)
  0xa7570598: jne    0xa7556400
  0xa757059e: mov    -0x1c(%ebp),%esi
  0xa75705a1: mov    -0x18(%ebp),%edi
  0xa75705a4: ret    
  0xa75705a5: pop    %ecx
  0xa75705a6: pop    %edx
  0xa75705a7: mov    0x10(%ecx),%eax
  0xa75705aa: test   %eax,%eax
  0xa75705ac: je     0xa75705f1
  0xa75705b2: mov    0xc(%ecx),%ebx
  0xa75705b5: test   %ebx,%ebx
  0xa75705b7: je     0xa75705d9
  0xa75705b9: mov    0xc0(%ebx),%eax
  0xa75705bf: add    $0x8,%eax
  0xa75705c2: mov    %eax,0xc0(%ebx)
  0xa75705c8: and    $0x1ff8,%eax
  0xa75705ce: je     0xa75706f4
  0xa75705d4: jmp    0xa75705f1
  0xa75705d9: mov    0x10(%ecx),%ecx
  0xa75705dc: mov    0xc(%ecx),%eax
  0xa75705df: add    $0x8,%eax
  0xa75705e2: mov    %eax,0xc(%ecx)
  0xa75705e5: and    $0x1ff8,%eax
  0xa75705eb: je     0xa75706f4
  0xa75705f1: movzbl (%esi),%ebx
  0xa75705f4: jmp    *-0x48722ae0(,%ebx,4)
  0xa75705fb: call   0xa7570605
  0xa7570600: jmp    0xa75706a4
  0xa7570605: lea    0x4(%esp),%eax
  0xa7570609: cmpl   $0x0,-0x8(%ebp)
  0xa7570610: je     0xa7570627
  0xa7570616: push   $0xb7449b58
  0xa757061b: call   0xa7570620
  0xa7570620: pusha  
  0xa7570621: call   0xb6ff5f32
  0xa7570626: hlt    
  0xa7570627: mov    %esi,-0x1c(%ebp)
  0xa757062a: mov    %esp,%edi
  0xa757062c: shr    $0xc,%edi
  0xa757062f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570636: push   %edi
  0xa7570637: mov    %ebp,0x148(%edi)
  0xa757063d: mov    %eax,0x140(%edi)
  0xa7570643: call   0xb6e61328
  0xa7570648: add    $0x4,%esp
  0xa757064b: push   %eax
  0xa757064c: mov    %esp,%eax
  0xa757064e: shr    $0xc,%eax
  0xa7570651: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570658: cmp    %eax,%edi
  0xa757065a: je     0xa7570671
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7570660: push   $0xb74acf8c
  0xa7570665: call   0xa757066a
  0xa757066a: pusha  
  0xa757066b: call   0xb6ff5f32
  0xa7570670: hlt    
  0xa7570671: pop    %eax
  0xa7570672: movl   $0x0,0x140(%edi)
  0xa757067c: movl   $0x0,0x148(%edi)
  0xa7570686: movl   $0x0,0x144(%edi)
  0xa7570690: cmpl   $0x0,0x4(%edi)
  0xa7570697: jne    0xa7556400
  0xa757069d: mov    -0x1c(%ebp),%esi
  0xa75706a0: mov    -0x18(%ebp),%edi
  0xa75706a3: ret    
  0xa75706a4: movzbl (%esi),%ebx
  0xa75706a7: push   %eax
  0xa75706a8: push   %ebx
  0xa75706a9: mov    -0xc(%ebp),%ebx
  0xa75706ac: mov    0xc(%ebx),%eax
  0xa75706af: test   %eax,%eax
  0xa75706b1: je     0xa75706ea
  0xa75706b7: push   %esi
  0xa75706b8: push   %ebx
  0xa75706b9: cmpl   $0x0,-0x8(%ebp)
  0xa75706c0: je     0xa75706d7
  0xa75706c6: push   $0xb7449b18
  0xa75706cb: call   0xa75706d0
  0xa75706d0: pusha  
  0xa75706d1: call   0xb6ff5f32
  0xa75706d6: hlt    
  0xa75706d7: call   0xb6e61172
  0xa75706dc: add    $0x8,%esp
  0xa75706df: mov    0xc(%ebx),%ebx
  0xa75706e2: add    $0xe0,%ebx
  0xa75706e8: add    %ebx,%eax
  0xa75706ea: mov    %eax,-0x10(%ebp)
  0xa75706ed: pop    %ebx
  0xa75706ee: pop    %eax
  0xa75706ef: jmp    0xa75705f1
  0xa75706f4: neg    %edx
  0xa75706f6: add    %esi,%edx
  0xa75706f8: call   0xa7570702
  0xa75706fd: jmp    0xa75707a2
  0xa7570702: push   %edx
  0xa7570703: lea    0x8(%esp),%eax
  0xa7570707: cmpl   $0x0,-0x8(%ebp)
  0xa757070e: je     0xa7570725
  0xa7570714: push   $0xb7449b58
  0xa7570719: call   0xa757071e
  0xa757071e: pusha  
  0xa757071f: call   0xb6ff5f32
  0xa7570724: hlt    
  0xa7570725: mov    %esi,-0x1c(%ebp)
  0xa7570728: mov    %esp,%edi
  0xa757072a: shr    $0xc,%edi
  0xa757072d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570734: push   %edi
  0xa7570735: mov    %ebp,0x148(%edi)
  0xa757073b: mov    %eax,0x140(%edi)
  0xa7570741: call   0xb6e60bc8
  0xa7570746: add    $0x8,%esp
  0xa7570749: push   %eax
  0xa757074a: mov    %esp,%eax
  0xa757074c: shr    $0xc,%eax
  0xa757074f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570756: cmp    %eax,%edi
  0xa7570758: je     0xa757076f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757075e: push   $0xb74acf8c
  0xa7570763: call   0xa7570768
  0xa7570768: pusha  
  0xa7570769: call   0xb6ff5f32
  0xa757076e: hlt    
  0xa757076f: pop    %eax
  0xa7570770: movl   $0x0,0x140(%edi)
  0xa757077a: movl   $0x0,0x148(%edi)
  0xa7570784: movl   $0x0,0x144(%edi)
  0xa757078e: cmpl   $0x0,0x4(%edi)
  0xa7570795: jne    0xa7556400
  0xa757079b: mov    -0x1c(%ebp),%esi
  0xa757079e: mov    -0x18(%ebp),%edi
  0xa75707a1: ret    
  0xa75707a2: movzbl (%esi),%ebx
  0xa75707a5: test   %eax,%eax
  0xa75707a7: je     0xa75705f1
  0xa75707ad: mov    0x38(%eax),%ecx
  0xa75707b0: cmp    $0xfffffffe,%ecx
  0xa75707b3: je     0xa75705f1
  0xa75707b9: mov    %eax,%ebx
  0xa75707bb: mov    %esp,%ecx
  0xa75707bd: shr    $0xc,%ecx
  0xa75707c0: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75707c7: call   0xa75707d1
  0xa75707cc: jmp    0xa7570870
  0xa75707d1: lea    0x4(%esp),%eax
  0xa75707d5: cmpl   $0x0,-0x8(%ebp)
  0xa75707dc: je     0xa75707f3
  0xa75707e2: push   $0xb7449b58
  0xa75707e7: call   0xa75707ec
  0xa75707ec: pusha  
  0xa75707ed: call   0xb6ff5f32
  0xa75707f2: hlt    
  0xa75707f3: mov    %esi,-0x1c(%ebp)
  0xa75707f6: mov    %esp,%edi
  0xa75707f8: shr    $0xc,%edi
  0xa75707fb: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570802: push   %edi
  0xa7570803: mov    %ebp,0x148(%edi)
  0xa7570809: mov    %eax,0x140(%edi)
  0xa757080f: call   0xb717c684
  0xa7570814: add    $0x4,%esp
  0xa7570817: push   %eax
  0xa7570818: mov    %esp,%eax
  0xa757081a: shr    $0xc,%eax
  0xa757081d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570824: cmp    %eax,%edi
  0xa7570826: je     0xa757083d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757082c: push   $0xb74acf8c
  0xa7570831: call   0xa7570836
  0xa7570836: pusha  
  0xa7570837: call   0xb6ff5f32
  0xa757083c: hlt    
  0xa757083d: pop    %eax
  0xa757083e: movl   $0x0,0x140(%edi)
  0xa7570848: movl   $0x0,0x148(%edi)
  0xa7570852: movl   $0x0,0x144(%edi)
  0xa757085c: cmpl   $0x0,0x4(%edi)
  0xa7570863: jne    0xa7556400
  0xa7570869: mov    -0x1c(%ebp),%esi
  0xa757086c: mov    -0x18(%ebp),%edi
  0xa757086f: ret    
  0xa7570870: mov    %eax,%ecx
  0xa7570872: mov    -0x4(%ebp),%edx
  0xa7570875: mov    %ebp,%esp
  0xa7570877: pop    %ebp
  0xa7570878: pop    %edi
  0xa7570879: mov    %edx,%esp
  0xa757087b: and    $0xfffffff0,%esp
  0xa757087e: push   %edi
  0xa757087f: jmp    *0x58(%ebx)
  0xa7570882: mov    -0x10(%ebp),%eax
  0xa7570885: test   %eax,%eax
  0xa7570887: je     0xa757089b
  0xa757088d: addl   $0x1,0xc(%eax)
  0xa7570891: sbbl   $0x0,0xc(%eax)
  0xa7570895: add    $0x10,%eax
  0xa7570898: mov    %eax,-0x10(%ebp)
  0xa757089b: movzbl 0x3(%esi),%ebx
  0xa757089f: add    $0x3,%esi
  0xa75708a2: jmp    *-0x48722ae0(,%ebx,4)
  0xa75708a9: nop
  0xa75708aa: nop
  0xa75708ab: nop
  0xa75708ac: int3   
  0xa75708ad: int3   
  0xa75708ae: int3   
  0xa75708af: int3   
  0xa75708b0: int3   
  0xa75708b1: int3   
  0xa75708b2: int3   
  0xa75708b3: int3   
  0xa75708b4: int3   
  0xa75708b5: int3   
  0xa75708b6: int3   
  0xa75708b7: int3   
  0xa75708b8: int3   
  0xa75708b9: int3   
  0xa75708ba: int3   
  0xa75708bb: int3   
  0xa75708bc: int3   
  0xa75708bd: int3   
  0xa75708be: int3   
  0xa75708bf: int3   

----------------------------------------------------------------------
if_acmpeq  165 if_acmpeq  [0xa75708e0, 0xa7570d40]  1120 bytes

  0xa75708e0: pop    %eax
  0xa75708e1: push   %eax
  0xa75708e2: push   %ebx
  0xa75708e3: push   %ecx
  0xa75708e4: push   %edx
  0xa75708e5: mov    -0x10(%ebp),%ecx
  0xa75708e8: test   %ecx,%ecx
  0xa75708ea: je     0xa757092e
  0xa75708f0: mov    -0xc(%ebp),%ebx
  0xa75708f3: movzwl 0x2(%ecx),%edx
  0xa75708f7: add    0x8(%ebx),%edx
  0xa75708fa: lea    0x28(%edx),%edx
  0xa75708fd: cmp    %esi,%edx
  0xa75708ff: je     0xa757092e
  0xa7570905: push   %ecx
  0xa7570906: push   %esi
  0xa7570907: push   %ebx
  0xa7570908: cmpl   $0x0,-0x8(%ebp)
  0xa757090f: je     0xa7570926
  0xa7570915: push   $0xb7449b18
  0xa757091a: call   0xa757091f
  0xa757091f: pusha  
  0xa7570920: call   0xb6ff5f32
  0xa7570925: hlt    
  0xa7570926: call   0xb6e61602
  0xa757092b: add    $0xc,%esp
  0xa757092e: pop    %edx
  0xa757092f: pop    %ecx
  0xa7570930: pop    %ebx
  0xa7570931: pop    %eax
  0xa7570932: pop    %edx
  0xa7570933: cmp    %eax,%edx
  0xa7570935: jne    0xa7570d02
  0xa757093b: mov    -0xc(%ebp),%ecx
  0xa757093e: mov    -0x10(%ebp),%eax
  0xa7570941: test   %eax,%eax
  0xa7570943: je     0xa757095b
  0xa7570949: mov    0x4(%eax),%ebx
  0xa757094c: add    $0x1,%ebx
  0xa757094f: sbb    $0x0,%ebx
  0xa7570952: mov    %ebx,0x4(%eax)
  0xa7570955: add    0x8(%eax),%eax
  0xa7570958: mov    %eax,-0x10(%ebp)
  0xa757095b: movswl 0x1(%esi),%edx
  0xa757095f: bswap  %edx
  0xa7570961: sar    $0x10,%edx
  0xa7570964: add    %edx,%esi
  0xa7570966: test   %edx,%edx
  0xa7570968: jns    0xa7570a71
  0xa757096e: mov    0x10(%ecx),%eax
  0xa7570971: test   %eax,%eax
  0xa7570973: jne    0xa7570a32
  0xa7570979: push   %edx
  0xa757097a: push   %ecx
  0xa757097b: call   0xa7570985
  0xa7570980: jmp    0xa7570a25
  0xa7570985: push   %ecx
  0xa7570986: lea    0x8(%esp),%eax
  0xa757098a: cmpl   $0x0,-0x8(%ebp)
  0xa7570991: je     0xa75709a8
  0xa7570997: push   $0xb7449b58
  0xa757099c: call   0xa75709a1
  0xa75709a1: pusha  
  0xa75709a2: call   0xb6ff5f32
  0xa75709a7: hlt    
  0xa75709a8: mov    %esi,-0x1c(%ebp)
  0xa75709ab: mov    %esp,%edi
  0xa75709ad: shr    $0xc,%edi
  0xa75709b0: mov    -0x4871aba0(,%edi,4),%edi
  0xa75709b7: push   %edi
  0xa75709b8: mov    %ebp,0x148(%edi)
  0xa75709be: mov    %eax,0x140(%edi)
  0xa75709c4: call   0xb6e61c92
  0xa75709c9: add    $0x8,%esp
  0xa75709cc: push   %eax
  0xa75709cd: mov    %esp,%eax
  0xa75709cf: shr    $0xc,%eax
  0xa75709d2: mov    -0x4871aba0(,%eax,4),%eax
  0xa75709d9: cmp    %eax,%edi
  0xa75709db: je     0xa75709f2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75709e1: push   $0xb74acf8c
  0xa75709e6: call   0xa75709eb
  0xa75709eb: pusha  
  0xa75709ec: call   0xb6ff5f32
  0xa75709f1: hlt    
  0xa75709f2: pop    %eax
  0xa75709f3: movl   $0x0,0x140(%edi)
  0xa75709fd: movl   $0x0,0x148(%edi)
  0xa7570a07: movl   $0x0,0x144(%edi)
  0xa7570a11: cmpl   $0x0,0x4(%edi)
  0xa7570a18: jne    0xa7556400
  0xa7570a1e: mov    -0x1c(%ebp),%esi
  0xa7570a21: mov    -0x18(%ebp),%edi
  0xa7570a24: ret    
  0xa7570a25: pop    %ecx
  0xa7570a26: pop    %edx
  0xa7570a27: mov    0x10(%ecx),%eax
  0xa7570a2a: test   %eax,%eax
  0xa7570a2c: je     0xa7570a71
  0xa7570a32: mov    0xc(%ecx),%ebx
  0xa7570a35: test   %ebx,%ebx
  0xa7570a37: je     0xa7570a59
  0xa7570a39: mov    0xc0(%ebx),%eax
  0xa7570a3f: add    $0x8,%eax
  0xa7570a42: mov    %eax,0xc0(%ebx)
  0xa7570a48: and    $0x1ff8,%eax
  0xa7570a4e: je     0xa7570b74
  0xa7570a54: jmp    0xa7570a71
  0xa7570a59: mov    0x10(%ecx),%ecx
  0xa7570a5c: mov    0xc(%ecx),%eax
  0xa7570a5f: add    $0x8,%eax
  0xa7570a62: mov    %eax,0xc(%ecx)
  0xa7570a65: and    $0x1ff8,%eax
  0xa7570a6b: je     0xa7570b74
  0xa7570a71: movzbl (%esi),%ebx
  0xa7570a74: jmp    *-0x48722ae0(,%ebx,4)
  0xa7570a7b: call   0xa7570a85
  0xa7570a80: jmp    0xa7570b24
  0xa7570a85: lea    0x4(%esp),%eax
  0xa7570a89: cmpl   $0x0,-0x8(%ebp)
  0xa7570a90: je     0xa7570aa7
  0xa7570a96: push   $0xb7449b58
  0xa7570a9b: call   0xa7570aa0
  0xa7570aa0: pusha  
  0xa7570aa1: call   0xb6ff5f32
  0xa7570aa6: hlt    
  0xa7570aa7: mov    %esi,-0x1c(%ebp)
  0xa7570aaa: mov    %esp,%edi
  0xa7570aac: shr    $0xc,%edi
  0xa7570aaf: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570ab6: push   %edi
  0xa7570ab7: mov    %ebp,0x148(%edi)
  0xa7570abd: mov    %eax,0x140(%edi)
  0xa7570ac3: call   0xb6e61328
  0xa7570ac8: add    $0x4,%esp
  0xa7570acb: push   %eax
  0xa7570acc: mov    %esp,%eax
  0xa7570ace: shr    $0xc,%eax
  0xa7570ad1: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570ad8: cmp    %eax,%edi
  0xa7570ada: je     0xa7570af1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7570ae0: push   $0xb74acf8c
  0xa7570ae5: call   0xa7570aea
  0xa7570aea: pusha  
  0xa7570aeb: call   0xb6ff5f32
  0xa7570af0: hlt    
  0xa7570af1: pop    %eax
  0xa7570af2: movl   $0x0,0x140(%edi)
  0xa7570afc: movl   $0x0,0x148(%edi)
  0xa7570b06: movl   $0x0,0x144(%edi)
  0xa7570b10: cmpl   $0x0,0x4(%edi)
  0xa7570b17: jne    0xa7556400
  0xa7570b1d: mov    -0x1c(%ebp),%esi
  0xa7570b20: mov    -0x18(%ebp),%edi
  0xa7570b23: ret    
  0xa7570b24: movzbl (%esi),%ebx
  0xa7570b27: push   %eax
  0xa7570b28: push   %ebx
  0xa7570b29: mov    -0xc(%ebp),%ebx
  0xa7570b2c: mov    0xc(%ebx),%eax
  0xa7570b2f: test   %eax,%eax
  0xa7570b31: je     0xa7570b6a
  0xa7570b37: push   %esi
  0xa7570b38: push   %ebx
  0xa7570b39: cmpl   $0x0,-0x8(%ebp)
  0xa7570b40: je     0xa7570b57
  0xa7570b46: push   $0xb7449b18
  0xa7570b4b: call   0xa7570b50
  0xa7570b50: pusha  
  0xa7570b51: call   0xb6ff5f32
  0xa7570b56: hlt    
  0xa7570b57: call   0xb6e61172
  0xa7570b5c: add    $0x8,%esp
  0xa7570b5f: mov    0xc(%ebx),%ebx
  0xa7570b62: add    $0xe0,%ebx
  0xa7570b68: add    %ebx,%eax
  0xa7570b6a: mov    %eax,-0x10(%ebp)
  0xa7570b6d: pop    %ebx
  0xa7570b6e: pop    %eax
  0xa7570b6f: jmp    0xa7570a71
  0xa7570b74: neg    %edx
  0xa7570b76: add    %esi,%edx
  0xa7570b78: call   0xa7570b82
  0xa7570b7d: jmp    0xa7570c22
  0xa7570b82: push   %edx
  0xa7570b83: lea    0x8(%esp),%eax
  0xa7570b87: cmpl   $0x0,-0x8(%ebp)
  0xa7570b8e: je     0xa7570ba5
  0xa7570b94: push   $0xb7449b58
  0xa7570b99: call   0xa7570b9e
  0xa7570b9e: pusha  
  0xa7570b9f: call   0xb6ff5f32
  0xa7570ba4: hlt    
  0xa7570ba5: mov    %esi,-0x1c(%ebp)
  0xa7570ba8: mov    %esp,%edi
  0xa7570baa: shr    $0xc,%edi
  0xa7570bad: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570bb4: push   %edi
  0xa7570bb5: mov    %ebp,0x148(%edi)
  0xa7570bbb: mov    %eax,0x140(%edi)
  0xa7570bc1: call   0xb6e60bc8
  0xa7570bc6: add    $0x8,%esp
  0xa7570bc9: push   %eax
  0xa7570bca: mov    %esp,%eax
  0xa7570bcc: shr    $0xc,%eax
  0xa7570bcf: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570bd6: cmp    %eax,%edi
  0xa7570bd8: je     0xa7570bef
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7570bde: push   $0xb74acf8c
  0xa7570be3: call   0xa7570be8
  0xa7570be8: pusha  
  0xa7570be9: call   0xb6ff5f32
  0xa7570bee: hlt    
  0xa7570bef: pop    %eax
  0xa7570bf0: movl   $0x0,0x140(%edi)
  0xa7570bfa: movl   $0x0,0x148(%edi)
  0xa7570c04: movl   $0x0,0x144(%edi)
  0xa7570c0e: cmpl   $0x0,0x4(%edi)
  0xa7570c15: jne    0xa7556400
  0xa7570c1b: mov    -0x1c(%ebp),%esi
  0xa7570c1e: mov    -0x18(%ebp),%edi
  0xa7570c21: ret    
  0xa7570c22: movzbl (%esi),%ebx
  0xa7570c25: test   %eax,%eax
  0xa7570c27: je     0xa7570a71
  0xa7570c2d: mov    0x38(%eax),%ecx
  0xa7570c30: cmp    $0xfffffffe,%ecx
  0xa7570c33: je     0xa7570a71
  0xa7570c39: mov    %eax,%ebx
  0xa7570c3b: mov    %esp,%ecx
  0xa7570c3d: shr    $0xc,%ecx
  0xa7570c40: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7570c47: call   0xa7570c51
  0xa7570c4c: jmp    0xa7570cf0
  0xa7570c51: lea    0x4(%esp),%eax
  0xa7570c55: cmpl   $0x0,-0x8(%ebp)
  0xa7570c5c: je     0xa7570c73
  0xa7570c62: push   $0xb7449b58
  0xa7570c67: call   0xa7570c6c
  0xa7570c6c: pusha  
  0xa7570c6d: call   0xb6ff5f32
  0xa7570c72: hlt    
  0xa7570c73: mov    %esi,-0x1c(%ebp)
  0xa7570c76: mov    %esp,%edi
  0xa7570c78: shr    $0xc,%edi
  0xa7570c7b: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570c82: push   %edi
  0xa7570c83: mov    %ebp,0x148(%edi)
  0xa7570c89: mov    %eax,0x140(%edi)
  0xa7570c8f: call   0xb717c684
  0xa7570c94: add    $0x4,%esp
  0xa7570c97: push   %eax
  0xa7570c98: mov    %esp,%eax
  0xa7570c9a: shr    $0xc,%eax
  0xa7570c9d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570ca4: cmp    %eax,%edi
  0xa7570ca6: je     0xa7570cbd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7570cac: push   $0xb74acf8c
  0xa7570cb1: call   0xa7570cb6
  0xa7570cb6: pusha  
  0xa7570cb7: call   0xb6ff5f32
  0xa7570cbc: hlt    
  0xa7570cbd: pop    %eax
  0xa7570cbe: movl   $0x0,0x140(%edi)
  0xa7570cc8: movl   $0x0,0x148(%edi)
  0xa7570cd2: movl   $0x0,0x144(%edi)
  0xa7570cdc: cmpl   $0x0,0x4(%edi)
  0xa7570ce3: jne    0xa7556400
  0xa7570ce9: mov    -0x1c(%ebp),%esi
  0xa7570cec: mov    -0x18(%ebp),%edi
  0xa7570cef: ret    
  0xa7570cf0: mov    %eax,%ecx
  0xa7570cf2: mov    -0x4(%ebp),%edx
  0xa7570cf5: mov    %ebp,%esp
  0xa7570cf7: pop    %ebp
  0xa7570cf8: pop    %edi
  0xa7570cf9: mov    %edx,%esp
  0xa7570cfb: and    $0xfffffff0,%esp
  0xa7570cfe: push   %edi
  0xa7570cff: jmp    *0x58(%ebx)
  0xa7570d02: mov    -0x10(%ebp),%eax
  0xa7570d05: test   %eax,%eax
  0xa7570d07: je     0xa7570d1b
  0xa7570d0d: addl   $0x1,0xc(%eax)
  0xa7570d11: sbbl   $0x0,0xc(%eax)
  0xa7570d15: add    $0x10,%eax
  0xa7570d18: mov    %eax,-0x10(%ebp)
  0xa7570d1b: movzbl 0x3(%esi),%ebx
  0xa7570d1f: add    $0x3,%esi
  0xa7570d22: jmp    *-0x48722ae0(,%ebx,4)
  0xa7570d29: nop
  0xa7570d2a: nop
  0xa7570d2b: nop
  0xa7570d2c: int3   
  0xa7570d2d: int3   
  0xa7570d2e: int3   
  0xa7570d2f: int3   
  0xa7570d30: int3   
  0xa7570d31: int3   
  0xa7570d32: int3   
  0xa7570d33: int3   
  0xa7570d34: int3   
  0xa7570d35: int3   
  0xa7570d36: int3   
  0xa7570d37: int3   
  0xa7570d38: int3   
  0xa7570d39: int3   
  0xa7570d3a: int3   
  0xa7570d3b: int3   
  0xa7570d3c: int3   
  0xa7570d3d: int3   
  0xa7570d3e: int3   
  0xa7570d3f: int3   

----------------------------------------------------------------------
if_acmpne  166 if_acmpne  [0xa7570d60, 0xa75711c0]  1120 bytes

  0xa7570d60: pop    %eax
  0xa7570d61: push   %eax
  0xa7570d62: push   %ebx
  0xa7570d63: push   %ecx
  0xa7570d64: push   %edx
  0xa7570d65: mov    -0x10(%ebp),%ecx
  0xa7570d68: test   %ecx,%ecx
  0xa7570d6a: je     0xa7570dae
  0xa7570d70: mov    -0xc(%ebp),%ebx
  0xa7570d73: movzwl 0x2(%ecx),%edx
  0xa7570d77: add    0x8(%ebx),%edx
  0xa7570d7a: lea    0x28(%edx),%edx
  0xa7570d7d: cmp    %esi,%edx
  0xa7570d7f: je     0xa7570dae
  0xa7570d85: push   %ecx
  0xa7570d86: push   %esi
  0xa7570d87: push   %ebx
  0xa7570d88: cmpl   $0x0,-0x8(%ebp)
  0xa7570d8f: je     0xa7570da6
  0xa7570d95: push   $0xb7449b18
  0xa7570d9a: call   0xa7570d9f
  0xa7570d9f: pusha  
  0xa7570da0: call   0xb6ff5f32
  0xa7570da5: hlt    
  0xa7570da6: call   0xb6e61602
  0xa7570dab: add    $0xc,%esp
  0xa7570dae: pop    %edx
  0xa7570daf: pop    %ecx
  0xa7570db0: pop    %ebx
  0xa7570db1: pop    %eax
  0xa7570db2: pop    %edx
  0xa7570db3: cmp    %eax,%edx
  0xa7570db5: je     0xa7571182
  0xa7570dbb: mov    -0xc(%ebp),%ecx
  0xa7570dbe: mov    -0x10(%ebp),%eax
  0xa7570dc1: test   %eax,%eax
  0xa7570dc3: je     0xa7570ddb
  0xa7570dc9: mov    0x4(%eax),%ebx
  0xa7570dcc: add    $0x1,%ebx
  0xa7570dcf: sbb    $0x0,%ebx
  0xa7570dd2: mov    %ebx,0x4(%eax)
  0xa7570dd5: add    0x8(%eax),%eax
  0xa7570dd8: mov    %eax,-0x10(%ebp)
  0xa7570ddb: movswl 0x1(%esi),%edx
  0xa7570ddf: bswap  %edx
  0xa7570de1: sar    $0x10,%edx
  0xa7570de4: add    %edx,%esi
  0xa7570de6: test   %edx,%edx
  0xa7570de8: jns    0xa7570ef1
  0xa7570dee: mov    0x10(%ecx),%eax
  0xa7570df1: test   %eax,%eax
  0xa7570df3: jne    0xa7570eb2
  0xa7570df9: push   %edx
  0xa7570dfa: push   %ecx
  0xa7570dfb: call   0xa7570e05
  0xa7570e00: jmp    0xa7570ea5
  0xa7570e05: push   %ecx
  0xa7570e06: lea    0x8(%esp),%eax
  0xa7570e0a: cmpl   $0x0,-0x8(%ebp)
  0xa7570e11: je     0xa7570e28
  0xa7570e17: push   $0xb7449b58
  0xa7570e1c: call   0xa7570e21
  0xa7570e21: pusha  
  0xa7570e22: call   0xb6ff5f32
  0xa7570e27: hlt    
  0xa7570e28: mov    %esi,-0x1c(%ebp)
  0xa7570e2b: mov    %esp,%edi
  0xa7570e2d: shr    $0xc,%edi
  0xa7570e30: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570e37: push   %edi
  0xa7570e38: mov    %ebp,0x148(%edi)
  0xa7570e3e: mov    %eax,0x140(%edi)
  0xa7570e44: call   0xb6e61c92
  0xa7570e49: add    $0x8,%esp
  0xa7570e4c: push   %eax
  0xa7570e4d: mov    %esp,%eax
  0xa7570e4f: shr    $0xc,%eax
  0xa7570e52: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570e59: cmp    %eax,%edi
  0xa7570e5b: je     0xa7570e72
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7570e61: push   $0xb74acf8c
  0xa7570e66: call   0xa7570e6b
  0xa7570e6b: pusha  
  0xa7570e6c: call   0xb6ff5f32
  0xa7570e71: hlt    
  0xa7570e72: pop    %eax
  0xa7570e73: movl   $0x0,0x140(%edi)
  0xa7570e7d: movl   $0x0,0x148(%edi)
  0xa7570e87: movl   $0x0,0x144(%edi)
  0xa7570e91: cmpl   $0x0,0x4(%edi)
  0xa7570e98: jne    0xa7556400
  0xa7570e9e: mov    -0x1c(%ebp),%esi
  0xa7570ea1: mov    -0x18(%ebp),%edi
  0xa7570ea4: ret    
  0xa7570ea5: pop    %ecx
  0xa7570ea6: pop    %edx
  0xa7570ea7: mov    0x10(%ecx),%eax
  0xa7570eaa: test   %eax,%eax
  0xa7570eac: je     0xa7570ef1
  0xa7570eb2: mov    0xc(%ecx),%ebx
  0xa7570eb5: test   %ebx,%ebx
  0xa7570eb7: je     0xa7570ed9
  0xa7570eb9: mov    0xc0(%ebx),%eax
  0xa7570ebf: add    $0x8,%eax
  0xa7570ec2: mov    %eax,0xc0(%ebx)
  0xa7570ec8: and    $0x1ff8,%eax
  0xa7570ece: je     0xa7570ff4
  0xa7570ed4: jmp    0xa7570ef1
  0xa7570ed9: mov    0x10(%ecx),%ecx
  0xa7570edc: mov    0xc(%ecx),%eax
  0xa7570edf: add    $0x8,%eax
  0xa7570ee2: mov    %eax,0xc(%ecx)
  0xa7570ee5: and    $0x1ff8,%eax
  0xa7570eeb: je     0xa7570ff4
  0xa7570ef1: movzbl (%esi),%ebx
  0xa7570ef4: jmp    *-0x48722ae0(,%ebx,4)
  0xa7570efb: call   0xa7570f05
  0xa7570f00: jmp    0xa7570fa4
  0xa7570f05: lea    0x4(%esp),%eax
  0xa7570f09: cmpl   $0x0,-0x8(%ebp)
  0xa7570f10: je     0xa7570f27
  0xa7570f16: push   $0xb7449b58
  0xa7570f1b: call   0xa7570f20
  0xa7570f20: pusha  
  0xa7570f21: call   0xb6ff5f32
  0xa7570f26: hlt    
  0xa7570f27: mov    %esi,-0x1c(%ebp)
  0xa7570f2a: mov    %esp,%edi
  0xa7570f2c: shr    $0xc,%edi
  0xa7570f2f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7570f36: push   %edi
  0xa7570f37: mov    %ebp,0x148(%edi)
  0xa7570f3d: mov    %eax,0x140(%edi)
  0xa7570f43: call   0xb6e61328
  0xa7570f48: add    $0x4,%esp
  0xa7570f4b: push   %eax
  0xa7570f4c: mov    %esp,%eax
  0xa7570f4e: shr    $0xc,%eax
  0xa7570f51: mov    -0x4871aba0(,%eax,4),%eax
  0xa7570f58: cmp    %eax,%edi
  0xa7570f5a: je     0xa7570f71
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7570f60: push   $0xb74acf8c
  0xa7570f65: call   0xa7570f6a
  0xa7570f6a: pusha  
  0xa7570f6b: call   0xb6ff5f32
  0xa7570f70: hlt    
  0xa7570f71: pop    %eax
  0xa7570f72: movl   $0x0,0x140(%edi)
  0xa7570f7c: movl   $0x0,0x148(%edi)
  0xa7570f86: movl   $0x0,0x144(%edi)
  0xa7570f90: cmpl   $0x0,0x4(%edi)
  0xa7570f97: jne    0xa7556400
  0xa7570f9d: mov    -0x1c(%ebp),%esi
  0xa7570fa0: mov    -0x18(%ebp),%edi
  0xa7570fa3: ret    
  0xa7570fa4: movzbl (%esi),%ebx
  0xa7570fa7: push   %eax
  0xa7570fa8: push   %ebx
  0xa7570fa9: mov    -0xc(%ebp),%ebx
  0xa7570fac: mov    0xc(%ebx),%eax
  0xa7570faf: test   %eax,%eax
  0xa7570fb1: je     0xa7570fea
  0xa7570fb7: push   %esi
  0xa7570fb8: push   %ebx
  0xa7570fb9: cmpl   $0x0,-0x8(%ebp)
  0xa7570fc0: je     0xa7570fd7
  0xa7570fc6: push   $0xb7449b18
  0xa7570fcb: call   0xa7570fd0
  0xa7570fd0: pusha  
  0xa7570fd1: call   0xb6ff5f32
  0xa7570fd6: hlt    
  0xa7570fd7: call   0xb6e61172
  0xa7570fdc: add    $0x8,%esp
  0xa7570fdf: mov    0xc(%ebx),%ebx
  0xa7570fe2: add    $0xe0,%ebx
  0xa7570fe8: add    %ebx,%eax
  0xa7570fea: mov    %eax,-0x10(%ebp)
  0xa7570fed: pop    %ebx
  0xa7570fee: pop    %eax
  0xa7570fef: jmp    0xa7570ef1
  0xa7570ff4: neg    %edx
  0xa7570ff6: add    %esi,%edx
  0xa7570ff8: call   0xa7571002
  0xa7570ffd: jmp    0xa75710a2
  0xa7571002: push   %edx
  0xa7571003: lea    0x8(%esp),%eax
  0xa7571007: cmpl   $0x0,-0x8(%ebp)
  0xa757100e: je     0xa7571025
  0xa7571014: push   $0xb7449b58
  0xa7571019: call   0xa757101e
  0xa757101e: pusha  
  0xa757101f: call   0xb6ff5f32
  0xa7571024: hlt    
  0xa7571025: mov    %esi,-0x1c(%ebp)
  0xa7571028: mov    %esp,%edi
  0xa757102a: shr    $0xc,%edi
  0xa757102d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571034: push   %edi
  0xa7571035: mov    %ebp,0x148(%edi)
  0xa757103b: mov    %eax,0x140(%edi)
  0xa7571041: call   0xb6e60bc8
  0xa7571046: add    $0x8,%esp
  0xa7571049: push   %eax
  0xa757104a: mov    %esp,%eax
  0xa757104c: shr    $0xc,%eax
  0xa757104f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571056: cmp    %eax,%edi
  0xa7571058: je     0xa757106f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757105e: push   $0xb74acf8c
  0xa7571063: call   0xa7571068
  0xa7571068: pusha  
  0xa7571069: call   0xb6ff5f32
  0xa757106e: hlt    
  0xa757106f: pop    %eax
  0xa7571070: movl   $0x0,0x140(%edi)
  0xa757107a: movl   $0x0,0x148(%edi)
  0xa7571084: movl   $0x0,0x144(%edi)
  0xa757108e: cmpl   $0x0,0x4(%edi)
  0xa7571095: jne    0xa7556400
  0xa757109b: mov    -0x1c(%ebp),%esi
  0xa757109e: mov    -0x18(%ebp),%edi
  0xa75710a1: ret    
  0xa75710a2: movzbl (%esi),%ebx
  0xa75710a5: test   %eax,%eax
  0xa75710a7: je     0xa7570ef1
  0xa75710ad: mov    0x38(%eax),%ecx
  0xa75710b0: cmp    $0xfffffffe,%ecx
  0xa75710b3: je     0xa7570ef1
  0xa75710b9: mov    %eax,%ebx
  0xa75710bb: mov    %esp,%ecx
  0xa75710bd: shr    $0xc,%ecx
  0xa75710c0: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75710c7: call   0xa75710d1
  0xa75710cc: jmp    0xa7571170
  0xa75710d1: lea    0x4(%esp),%eax
  0xa75710d5: cmpl   $0x0,-0x8(%ebp)
  0xa75710dc: je     0xa75710f3
  0xa75710e2: push   $0xb7449b58
  0xa75710e7: call   0xa75710ec
  0xa75710ec: pusha  
  0xa75710ed: call   0xb6ff5f32
  0xa75710f2: hlt    
  0xa75710f3: mov    %esi,-0x1c(%ebp)
  0xa75710f6: mov    %esp,%edi
  0xa75710f8: shr    $0xc,%edi
  0xa75710fb: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571102: push   %edi
  0xa7571103: mov    %ebp,0x148(%edi)
  0xa7571109: mov    %eax,0x140(%edi)
  0xa757110f: call   0xb717c684
  0xa7571114: add    $0x4,%esp
  0xa7571117: push   %eax
  0xa7571118: mov    %esp,%eax
  0xa757111a: shr    $0xc,%eax
  0xa757111d: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571124: cmp    %eax,%edi
  0xa7571126: je     0xa757113d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757112c: push   $0xb74acf8c
  0xa7571131: call   0xa7571136
  0xa7571136: pusha  
  0xa7571137: call   0xb6ff5f32
  0xa757113c: hlt    
  0xa757113d: pop    %eax
  0xa757113e: movl   $0x0,0x140(%edi)
  0xa7571148: movl   $0x0,0x148(%edi)
  0xa7571152: movl   $0x0,0x144(%edi)
  0xa757115c: cmpl   $0x0,0x4(%edi)
  0xa7571163: jne    0xa7556400
  0xa7571169: mov    -0x1c(%ebp),%esi
  0xa757116c: mov    -0x18(%ebp),%edi
  0xa757116f: ret    
  0xa7571170: mov    %eax,%ecx
  0xa7571172: mov    -0x4(%ebp),%edx
  0xa7571175: mov    %ebp,%esp
  0xa7571177: pop    %ebp
  0xa7571178: pop    %edi
  0xa7571179: mov    %edx,%esp
  0xa757117b: and    $0xfffffff0,%esp
  0xa757117e: push   %edi
  0xa757117f: jmp    *0x58(%ebx)
  0xa7571182: mov    -0x10(%ebp),%eax
  0xa7571185: test   %eax,%eax
  0xa7571187: je     0xa757119b
  0xa757118d: addl   $0x1,0xc(%eax)
  0xa7571191: sbbl   $0x0,0xc(%eax)
  0xa7571195: add    $0x10,%eax
  0xa7571198: mov    %eax,-0x10(%ebp)
  0xa757119b: movzbl 0x3(%esi),%ebx
  0xa757119f: add    $0x3,%esi
  0xa75711a2: jmp    *-0x48722ae0(,%ebx,4)
  0xa75711a9: nop
  0xa75711aa: nop
  0xa75711ab: nop
  0xa75711ac: int3   
  0xa75711ad: int3   
  0xa75711ae: int3   
  0xa75711af: int3   
  0xa75711b0: int3   
  0xa75711b1: int3   
  0xa75711b2: int3   
  0xa75711b3: int3   
  0xa75711b4: int3   
  0xa75711b5: int3   
  0xa75711b6: int3   
  0xa75711b7: int3   
  0xa75711b8: int3   
  0xa75711b9: int3   
  0xa75711ba: int3   
  0xa75711bb: int3   
  0xa75711bc: int3   
  0xa75711bd: int3   
  0xa75711be: int3   
  0xa75711bf: int3   

----------------------------------------------------------------------
goto  167 goto  [0xa75711e0, 0xa75715e0]  1024 bytes

  0xa75711e0: sub    $0x4,%esp
  0xa75711e3: fstps  (%esp)
  0xa75711e6: jmp    0xa7571204
  0xa75711eb: sub    $0x8,%esp
  0xa75711ee: fstpl  (%esp)
  0xa75711f1: jmp    0xa7571204
  0xa75711f6: push   %edx
  0xa75711f7: push   %eax
  0xa75711f8: jmp    0xa7571204
  0xa75711fd: push   %eax
  0xa75711fe: jmp    0xa7571204
  0xa7571203: push   %eax
  0xa7571204: mov    -0xc(%ebp),%ecx
  0xa7571207: mov    -0x10(%ebp),%eax
  0xa757120a: test   %eax,%eax
  0xa757120c: je     0xa7571224
  0xa7571212: mov    0x4(%eax),%ebx
  0xa7571215: add    $0x1,%ebx
  0xa7571218: sbb    $0x0,%ebx
  0xa757121b: mov    %ebx,0x4(%eax)
  0xa757121e: add    0x8(%eax),%eax
  0xa7571221: mov    %eax,-0x10(%ebp)
  0xa7571224: movswl 0x1(%esi),%edx
  0xa7571228: bswap  %edx
  0xa757122a: sar    $0x10,%edx
  0xa757122d: add    %edx,%esi
  0xa757122f: test   %edx,%edx
  0xa7571231: jns    0xa757133a
  0xa7571237: mov    0x10(%ecx),%eax
  0xa757123a: test   %eax,%eax
  0xa757123c: jne    0xa75712fb
  0xa7571242: push   %edx
  0xa7571243: push   %ecx
  0xa7571244: call   0xa757124e
  0xa7571249: jmp    0xa75712ee
  0xa757124e: push   %ecx
  0xa757124f: lea    0x8(%esp),%eax
  0xa7571253: cmpl   $0x0,-0x8(%ebp)
  0xa757125a: je     0xa7571271
  0xa7571260: push   $0xb7449b58
  0xa7571265: call   0xa757126a
  0xa757126a: pusha  
  0xa757126b: call   0xb6ff5f32
  0xa7571270: hlt    
  0xa7571271: mov    %esi,-0x1c(%ebp)
  0xa7571274: mov    %esp,%edi
  0xa7571276: shr    $0xc,%edi
  0xa7571279: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571280: push   %edi
  0xa7571281: mov    %ebp,0x148(%edi)
  0xa7571287: mov    %eax,0x140(%edi)
  0xa757128d: call   0xb6e61c92
  0xa7571292: add    $0x8,%esp
  0xa7571295: push   %eax
  0xa7571296: mov    %esp,%eax
  0xa7571298: shr    $0xc,%eax
  0xa757129b: mov    -0x4871aba0(,%eax,4),%eax
  0xa75712a2: cmp    %eax,%edi
  0xa75712a4: je     0xa75712bb
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75712aa: push   $0xb74acf8c
  0xa75712af: call   0xa75712b4
  0xa75712b4: pusha  
  0xa75712b5: call   0xb6ff5f32
  0xa75712ba: hlt    
  0xa75712bb: pop    %eax
  0xa75712bc: movl   $0x0,0x140(%edi)
  0xa75712c6: movl   $0x0,0x148(%edi)
  0xa75712d0: movl   $0x0,0x144(%edi)
  0xa75712da: cmpl   $0x0,0x4(%edi)
  0xa75712e1: jne    0xa7556400
  0xa75712e7: mov    -0x1c(%ebp),%esi
  0xa75712ea: mov    -0x18(%ebp),%edi
  0xa75712ed: ret    
  0xa75712ee: pop    %ecx
  0xa75712ef: pop    %edx
  0xa75712f0: mov    0x10(%ecx),%eax
  0xa75712f3: test   %eax,%eax
  0xa75712f5: je     0xa757133a
  0xa75712fb: mov    0xc(%ecx),%ebx
  0xa75712fe: test   %ebx,%ebx
  0xa7571300: je     0xa7571322
  0xa7571302: mov    0xc0(%ebx),%eax
  0xa7571308: add    $0x8,%eax
  0xa757130b: mov    %eax,0xc0(%ebx)
  0xa7571311: and    $0x1ff8,%eax
  0xa7571317: je     0xa757143d
  0xa757131d: jmp    0xa757133a
  0xa7571322: mov    0x10(%ecx),%ecx
  0xa7571325: mov    0xc(%ecx),%eax
  0xa7571328: add    $0x8,%eax
  0xa757132b: mov    %eax,0xc(%ecx)
  0xa757132e: and    $0x1ff8,%eax
  0xa7571334: je     0xa757143d
  0xa757133a: movzbl (%esi),%ebx
  0xa757133d: jmp    *-0x48722ae0(,%ebx,4)
  0xa7571344: call   0xa757134e
  0xa7571349: jmp    0xa75713ed
  0xa757134e: lea    0x4(%esp),%eax
  0xa7571352: cmpl   $0x0,-0x8(%ebp)
  0xa7571359: je     0xa7571370
  0xa757135f: push   $0xb7449b58
  0xa7571364: call   0xa7571369
  0xa7571369: pusha  
  0xa757136a: call   0xb6ff5f32
  0xa757136f: hlt    
  0xa7571370: mov    %esi,-0x1c(%ebp)
  0xa7571373: mov    %esp,%edi
  0xa7571375: shr    $0xc,%edi
  0xa7571378: mov    -0x4871aba0(,%edi,4),%edi
  0xa757137f: push   %edi
  0xa7571380: mov    %ebp,0x148(%edi)
  0xa7571386: mov    %eax,0x140(%edi)
  0xa757138c: call   0xb6e61328
  0xa7571391: add    $0x4,%esp
  0xa7571394: push   %eax
  0xa7571395: mov    %esp,%eax
  0xa7571397: shr    $0xc,%eax
  0xa757139a: mov    -0x4871aba0(,%eax,4),%eax
  0xa75713a1: cmp    %eax,%edi
  0xa75713a3: je     0xa75713ba
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75713a9: push   $0xb74acf8c
  0xa75713ae: call   0xa75713b3
  0xa75713b3: pusha  
  0xa75713b4: call   0xb6ff5f32
  0xa75713b9: hlt    
  0xa75713ba: pop    %eax
  0xa75713bb: movl   $0x0,0x140(%edi)
  0xa75713c5: movl   $0x0,0x148(%edi)
  0xa75713cf: movl   $0x0,0x144(%edi)
  0xa75713d9: cmpl   $0x0,0x4(%edi)
  0xa75713e0: jne    0xa7556400
  0xa75713e6: mov    -0x1c(%ebp),%esi
  0xa75713e9: mov    -0x18(%ebp),%edi
  0xa75713ec: ret    
  0xa75713ed: movzbl (%esi),%ebx
  0xa75713f0: push   %eax
  0xa75713f1: push   %ebx
  0xa75713f2: mov    -0xc(%ebp),%ebx
  0xa75713f5: mov    0xc(%ebx),%eax
  0xa75713f8: test   %eax,%eax
  0xa75713fa: je     0xa7571433
  0xa7571400: push   %esi
  0xa7571401: push   %ebx
  0xa7571402: cmpl   $0x0,-0x8(%ebp)
  0xa7571409: je     0xa7571420
  0xa757140f: push   $0xb7449b18
  0xa7571414: call   0xa7571419
  0xa7571419: pusha  
  0xa757141a: call   0xb6ff5f32
  0xa757141f: hlt    
  0xa7571420: call   0xb6e61172
  0xa7571425: add    $0x8,%esp
  0xa7571428: mov    0xc(%ebx),%ebx
  0xa757142b: add    $0xe0,%ebx
  0xa7571431: add    %ebx,%eax
  0xa7571433: mov    %eax,-0x10(%ebp)
  0xa7571436: pop    %ebx
  0xa7571437: pop    %eax
  0xa7571438: jmp    0xa757133a
  0xa757143d: neg    %edx
  0xa757143f: add    %esi,%edx
  0xa7571441: call   0xa757144b
  0xa7571446: jmp    0xa75714eb
  0xa757144b: push   %edx
  0xa757144c: lea    0x8(%esp),%eax
  0xa7571450: cmpl   $0x0,-0x8(%ebp)
  0xa7571457: je     0xa757146e
  0xa757145d: push   $0xb7449b58
  0xa7571462: call   0xa7571467
  0xa7571467: pusha  
  0xa7571468: call   0xb6ff5f32
  0xa757146d: hlt    
  0xa757146e: mov    %esi,-0x1c(%ebp)
  0xa7571471: mov    %esp,%edi
  0xa7571473: shr    $0xc,%edi
  0xa7571476: mov    -0x4871aba0(,%edi,4),%edi
  0xa757147d: push   %edi
  0xa757147e: mov    %ebp,0x148(%edi)
  0xa7571484: mov    %eax,0x140(%edi)
  0xa757148a: call   0xb6e60bc8
  0xa757148f: add    $0x8,%esp
  0xa7571492: push   %eax
  0xa7571493: mov    %esp,%eax
  0xa7571495: shr    $0xc,%eax
  0xa7571498: mov    -0x4871aba0(,%eax,4),%eax
  0xa757149f: cmp    %eax,%edi
  0xa75714a1: je     0xa75714b8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75714a7: push   $0xb74acf8c
  0xa75714ac: call   0xa75714b1
  0xa75714b1: pusha  
  0xa75714b2: call   0xb6ff5f32
  0xa75714b7: hlt    
  0xa75714b8: pop    %eax
  0xa75714b9: movl   $0x0,0x140(%edi)
  0xa75714c3: movl   $0x0,0x148(%edi)
  0xa75714cd: movl   $0x0,0x144(%edi)
  0xa75714d7: cmpl   $0x0,0x4(%edi)
  0xa75714de: jne    0xa7556400
  0xa75714e4: mov    -0x1c(%ebp),%esi
  0xa75714e7: mov    -0x18(%ebp),%edi
  0xa75714ea: ret    
  0xa75714eb: movzbl (%esi),%ebx
  0xa75714ee: test   %eax,%eax
  0xa75714f0: je     0xa757133a
  0xa75714f6: mov    0x38(%eax),%ecx
  0xa75714f9: cmp    $0xfffffffe,%ecx
  0xa75714fc: je     0xa757133a
  0xa7571502: mov    %eax,%ebx
  0xa7571504: mov    %esp,%ecx
  0xa7571506: shr    $0xc,%ecx
  0xa7571509: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7571510: call   0xa757151a
  0xa7571515: jmp    0xa75715b9
  0xa757151a: lea    0x4(%esp),%eax
  0xa757151e: cmpl   $0x0,-0x8(%ebp)
  0xa7571525: je     0xa757153c
  0xa757152b: push   $0xb7449b58
  0xa7571530: call   0xa7571535
  0xa7571535: pusha  
  0xa7571536: call   0xb6ff5f32
  0xa757153b: hlt    
  0xa757153c: mov    %esi,-0x1c(%ebp)
  0xa757153f: mov    %esp,%edi
  0xa7571541: shr    $0xc,%edi
  0xa7571544: mov    -0x4871aba0(,%edi,4),%edi
  0xa757154b: push   %edi
  0xa757154c: mov    %ebp,0x148(%edi)
  0xa7571552: mov    %eax,0x140(%edi)
  0xa7571558: call   0xb717c684
  0xa757155d: add    $0x4,%esp
  0xa7571560: push   %eax
  0xa7571561: mov    %esp,%eax
  0xa7571563: shr    $0xc,%eax
  0xa7571566: mov    -0x4871aba0(,%eax,4),%eax
  0xa757156d: cmp    %eax,%edi
  0xa757156f: je     0xa7571586
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7571575: push   $0xb74acf8c
  0xa757157a: call   0xa757157f
  0xa757157f: pusha  
  0xa7571580: call   0xb6ff5f32
  0xa7571585: hlt    
  0xa7571586: pop    %eax
  0xa7571587: movl   $0x0,0x140(%edi)
  0xa7571591: movl   $0x0,0x148(%edi)
  0xa757159b: movl   $0x0,0x144(%edi)
  0xa75715a5: cmpl   $0x0,0x4(%edi)
  0xa75715ac: jne    0xa7556400
  0xa75715b2: mov    -0x1c(%ebp),%esi
  0xa75715b5: mov    -0x18(%ebp),%edi
  0xa75715b8: ret    
  0xa75715b9: mov    %eax,%ecx
  0xa75715bb: mov    -0x4(%ebp),%edx
  0xa75715be: mov    %ebp,%esp
  0xa75715c0: pop    %ebp
  0xa75715c1: pop    %edi
  0xa75715c2: mov    %edx,%esp
  0xa75715c4: and    $0xfffffff0,%esp
  0xa75715c7: push   %edi
  0xa75715c8: jmp    *0x58(%ebx)
  0xa75715cb: push   $0xb7302e8b
  0xa75715d0: call   0xa75715d5
  0xa75715d5: pusha  
  0xa75715d6: call   0xb6ff5f32
  0xa75715db: hlt    
  0xa75715dc: int3   
  0xa75715dd: int3   
  0xa75715de: int3   
  0xa75715df: int3   

----------------------------------------------------------------------
jsr  168 jsr  [0xa7571600, 0xa7571680]  128 bytes

  0xa7571600: sub    $0x4,%esp
  0xa7571603: fstps  (%esp)
  0xa7571606: jmp    0xa7571624
  0xa757160b: sub    $0x8,%esp
  0xa757160e: fstpl  (%esp)
  0xa7571611: jmp    0xa7571624
  0xa7571616: push   %edx
  0xa7571617: push   %eax
  0xa7571618: jmp    0xa7571624
  0xa757161d: push   %eax
  0xa757161e: jmp    0xa7571624
  0xa7571623: push   %eax
  0xa7571624: mov    -0xc(%ebp),%ecx
  0xa7571627: mov    -0x10(%ebp),%eax
  0xa757162a: test   %eax,%eax
  0xa757162c: je     0xa7571644
  0xa7571632: mov    0x4(%eax),%ebx
  0xa7571635: add    $0x1,%ebx
  0xa7571638: sbb    $0x0,%ebx
  0xa757163b: mov    %ebx,0x4(%eax)
  0xa757163e: add    0x8(%eax),%eax
  0xa7571641: mov    %eax,-0x10(%ebp)
  0xa7571644: movswl 0x1(%esi),%edx
  0xa7571648: bswap  %edx
  0xa757164a: sar    $0x10,%edx
  0xa757164d: movzbl (%esi,%edx,1),%ebx
  0xa7571651: lea    -0x25(%esi),%eax
  0xa7571654: sub    0x8(%ecx),%eax
  0xa7571657: add    %edx,%esi
  0xa7571659: push   %eax
  0xa757165a: jmp    *-0x487202e0(,%ebx,4)
  0xa7571661: push   $0xb7302e8b
  0xa7571666: call   0xa757166b
  0xa757166b: pusha  
  0xa757166c: call   0xb6ff5f32
  0xa7571671: hlt    
  0xa7571672: nop
  0xa7571673: nop
  0xa7571674: int3   
  0xa7571675: int3   
  0xa7571676: int3   
  0xa7571677: int3   
  0xa7571678: int3   
  0xa7571679: int3   
  0xa757167a: int3   
  0xa757167b: int3   
  0xa757167c: int3   
  0xa757167d: int3   
  0xa757167e: int3   
  0xa757167f: int3   

----------------------------------------------------------------------
ret  169 ret  [0xa75716a0, 0xa7571920]  640 bytes

  0xa75716a0: sub    $0x4,%esp
  0xa75716a3: fstps  (%esp)
  0xa75716a6: jmp    0xa75716c4
  0xa75716ab: sub    $0x8,%esp
  0xa75716ae: fstpl  (%esp)
  0xa75716b1: jmp    0xa75716c4
  0xa75716b6: push   %edx
  0xa75716b7: push   %eax
  0xa75716b8: jmp    0xa75716c4
  0xa75716bd: push   %eax
  0xa75716be: jmp    0xa75716c4
  0xa75716c3: push   %eax
  0xa75716c4: movzbl 0x1(%esi),%ebx
  0xa75716c8: neg    %ebx
  0xa75716ca: mov    (%edi,%ebx,4),%ebx
  0xa75716cd: mov    -0x10(%ebp),%ecx
  0xa75716d0: test   %ecx,%ecx
  0xa75716d2: je     0xa75717c4
  0xa75716d8: addl   $0x1,0x4(%ecx)
  0xa75716dc: sbbl   $0x0,0x4(%ecx)
  0xa75716e0: cmp    0x8(%ecx),%ebx
  0xa75716e3: jne    0xa75716fc
  0xa75716e9: addl   $0x1,0xc(%ecx)
  0xa75716ed: sbbl   $0x0,0xc(%ecx)
  0xa75716f1: add    0x10(%ecx),%ecx
  0xa75716f4: mov    %ecx,-0x10(%ebp)
  0xa75716f7: jmp    0xa75717c4
  0xa75716fc: cmp    0x14(%ecx),%ebx
  0xa75716ff: jne    0xa7571718
  0xa7571705: addl   $0x1,0x18(%ecx)
  0xa7571709: sbbl   $0x0,0x18(%ecx)
  0xa757170d: add    0x1c(%ecx),%ecx
  0xa7571710: mov    %ecx,-0x10(%ebp)
  0xa7571713: jmp    0xa75717c4
  0xa7571718: push   %ebx
  0xa7571719: call   0xa7571723
  0xa757171e: jmp    0xa75717c3
  0xa7571723: push   %ebx
  0xa7571724: lea    0x8(%esp),%eax
  0xa7571728: cmpl   $0x0,-0x8(%ebp)
  0xa757172f: je     0xa7571746
  0xa7571735: push   $0xb7449b58
  0xa757173a: call   0xa757173f
  0xa757173f: pusha  
  0xa7571740: call   0xb6ff5f32
  0xa7571745: hlt    
  0xa7571746: mov    %esi,-0x1c(%ebp)
  0xa7571749: mov    %esp,%edi
  0xa757174b: shr    $0xc,%edi
  0xa757174e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571755: push   %edi
  0xa7571756: mov    %ebp,0x148(%edi)
  0xa757175c: mov    %eax,0x140(%edi)
  0xa7571762: call   0xb6e61978
  0xa7571767: add    $0x8,%esp
  0xa757176a: push   %eax
  0xa757176b: mov    %esp,%eax
  0xa757176d: shr    $0xc,%eax
  0xa7571770: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571777: cmp    %eax,%edi
  0xa7571779: je     0xa7571790
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757177f: push   $0xb74acf8c
  0xa7571784: call   0xa7571789
  0xa7571789: pusha  
  0xa757178a: call   0xb6ff5f32
  0xa757178f: hlt    
  0xa7571790: pop    %eax
  0xa7571791: movl   $0x0,0x140(%edi)
  0xa757179b: movl   $0x0,0x148(%edi)
  0xa75717a5: movl   $0x0,0x144(%edi)
  0xa75717af: cmpl   $0x0,0x4(%edi)
  0xa75717b6: jne    0xa7556400
  0xa75717bc: mov    -0x1c(%ebp),%esi
  0xa75717bf: mov    -0x18(%ebp),%edi
  0xa75717c2: ret    
  0xa75717c3: pop    %ebx
  0xa75717c4: mov    -0xc(%ebp),%eax
  0xa75717c7: mov    0x8(%eax),%esi
  0xa75717ca: lea    0x28(%esi,%ebx,1),%esi
  0xa75717ce: movzbl (%esi),%ebx
  0xa75717d1: jmp    *-0x48722ae0(,%ebx,4)
  0xa75717d8: push   $0xb7302e8b
  0xa75717dd: call   0xa75717e2
  0xa75717e2: pusha  
  0xa75717e3: call   0xb6ff5f32
  0xa75717e8: hlt    
  0xa75717e9: movzwl 0x2(%esi),%ebx
  0xa75717ed: bswap  %ebx
  0xa75717ef: shr    $0x10,%ebx
  0xa75717f2: neg    %ebx
  0xa75717f4: mov    (%edi,%ebx,4),%ebx
  0xa75717f7: mov    -0x10(%ebp),%ecx
  0xa75717fa: test   %ecx,%ecx
  0xa75717fc: je     0xa75718ee
  0xa7571802: addl   $0x1,0x4(%ecx)
  0xa7571806: sbbl   $0x0,0x4(%ecx)
  0xa757180a: cmp    0x8(%ecx),%ebx
  0xa757180d: jne    0xa7571826
  0xa7571813: addl   $0x1,0xc(%ecx)
  0xa7571817: sbbl   $0x0,0xc(%ecx)
  0xa757181b: add    0x10(%ecx),%ecx
  0xa757181e: mov    %ecx,-0x10(%ebp)
  0xa7571821: jmp    0xa75718ee
  0xa7571826: cmp    0x14(%ecx),%ebx
  0xa7571829: jne    0xa7571842
  0xa757182f: addl   $0x1,0x18(%ecx)
  0xa7571833: sbbl   $0x0,0x18(%ecx)
  0xa7571837: add    0x1c(%ecx),%ecx
  0xa757183a: mov    %ecx,-0x10(%ebp)
  0xa757183d: jmp    0xa75718ee
  0xa7571842: push   %ebx
  0xa7571843: call   0xa757184d
  0xa7571848: jmp    0xa75718ed
  0xa757184d: push   %ebx
  0xa757184e: lea    0x8(%esp),%eax
  0xa7571852: cmpl   $0x0,-0x8(%ebp)
  0xa7571859: je     0xa7571870
  0xa757185f: push   $0xb7449b58
  0xa7571864: call   0xa7571869
  0xa7571869: pusha  
  0xa757186a: call   0xb6ff5f32
  0xa757186f: hlt    
  0xa7571870: mov    %esi,-0x1c(%ebp)
  0xa7571873: mov    %esp,%edi
  0xa7571875: shr    $0xc,%edi
  0xa7571878: mov    -0x4871aba0(,%edi,4),%edi
  0xa757187f: push   %edi
  0xa7571880: mov    %ebp,0x148(%edi)
  0xa7571886: mov    %eax,0x140(%edi)
  0xa757188c: call   0xb6e61978
  0xa7571891: add    $0x8,%esp
  0xa7571894: push   %eax
  0xa7571895: mov    %esp,%eax
  0xa7571897: shr    $0xc,%eax
  0xa757189a: mov    -0x4871aba0(,%eax,4),%eax
  0xa75718a1: cmp    %eax,%edi
  0xa75718a3: je     0xa75718ba
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75718a9: push   $0xb74acf8c
  0xa75718ae: call   0xa75718b3
  0xa75718b3: pusha  
  0xa75718b4: call   0xb6ff5f32
  0xa75718b9: hlt    
  0xa75718ba: pop    %eax
  0xa75718bb: movl   $0x0,0x140(%edi)
  0xa75718c5: movl   $0x0,0x148(%edi)
  0xa75718cf: movl   $0x0,0x144(%edi)
  0xa75718d9: cmpl   $0x0,0x4(%edi)
  0xa75718e0: jne    0xa7556400
  0xa75718e6: mov    -0x1c(%ebp),%esi
  0xa75718e9: mov    -0x18(%ebp),%edi
  0xa75718ec: ret    
  0xa75718ed: pop    %ebx
  0xa75718ee: mov    -0xc(%ebp),%eax
  0xa75718f1: mov    0x8(%eax),%esi
  0xa75718f4: lea    0x28(%esi,%ebx,1),%esi
  0xa75718f8: movzbl (%esi),%ebx
  0xa75718fb: jmp    *-0x48722ae0(,%ebx,4)
  0xa7571902: push   $0xb7302e8b
  0xa7571907: call   0xa757190c
  0xa757190c: pusha  
  0xa757190d: call   0xb6ff5f32
  0xa7571912: hlt    
  0xa7571913: nop
  0xa7571914: int3   
  0xa7571915: int3   
  0xa7571916: int3   
  0xa7571917: int3   
  0xa7571918: int3   
  0xa7571919: int3   
  0xa757191a: int3   
  0xa757191b: int3   
  0xa757191c: int3   
  0xa757191d: int3   
  0xa757191e: int3   
  0xa757191f: int3   

----------------------------------------------------------------------
tableswitch  170 tableswitch  [0xa7571940, 0xa75719e0]  160 bytes

  0xa7571940: pop    %eax
  0xa7571941: lea    0x4(%esi),%ebx
  0xa7571944: and    $0xfffffffc,%ebx
  0xa7571947: mov    0x4(%ebx),%ecx
  0xa757194a: mov    0x8(%ebx),%edx
  0xa757194d: bswap  %ecx
  0xa757194f: bswap  %edx
  0xa7571951: cmp    %ecx,%eax
  0xa7571953: jl     0xa7571993
  0xa7571955: cmp    %edx,%eax
  0xa7571957: jg     0xa7571993
  0xa7571959: sub    %ecx,%eax
  0xa757195b: mov    0xc(%ebx,%eax,4),%edx
  0xa757195f: mov    -0x10(%ebp),%ebx
  0xa7571962: test   %ebx,%ebx
  0xa7571964: je     0xa7571984
  0xa757196a: mov    $0x8,%ecx
  0xa757196f: imul   %ecx,%eax
  0xa7571972: add    $0x10,%eax
  0xa7571975: addl   $0x1,(%ebx,%eax,1)
  0xa7571979: sbbl   $0x0,(%ebx,%eax,1)
  0xa757197d: add    0x4(%ebx,%eax,1),%ebx
  0xa7571981: mov    %ebx,-0x10(%ebp)
  0xa7571984: bswap  %edx
  0xa7571986: movzbl (%esi,%edx,1),%ebx
  0xa757198a: add    %edx,%esi
  0xa757198c: jmp    *-0x48722ae0(,%ebx,4)
  0xa7571993: mov    -0x10(%ebp),%eax
  0xa7571996: test   %eax,%eax
  0xa7571998: je     0xa75719ac
  0xa757199e: addl   $0x1,0x8(%eax)
  0xa75719a2: sbbl   $0x0,0x8(%eax)
  0xa75719a6: add    0xc(%eax),%eax
  0xa75719a9: mov    %eax,-0x10(%ebp)
  0xa75719ac: mov    (%ebx),%edx
  0xa75719ae: jmp    0xa7571984
  0xa75719b0: push   $0xb7302e8b
  0xa75719b5: call   0xa75719ba
  0xa75719ba: pusha  
  0xa75719bb: call   0xb6ff5f32
  0xa75719c0: hlt    
  0xa75719c1: nop
  0xa75719c2: nop
  0xa75719c3: nop
  0xa75719c4: int3   
  0xa75719c5: int3   
  0xa75719c6: int3   
  0xa75719c7: int3   
  0xa75719c8: int3   
  0xa75719c9: int3   
  0xa75719ca: int3   
  0xa75719cb: int3   
  0xa75719cc: int3   
  0xa75719cd: int3   
  0xa75719ce: int3   
  0xa75719cf: int3   
  0xa75719d0: int3   
  0xa75719d1: int3   
  0xa75719d2: int3   
  0xa75719d3: int3   
  0xa75719d4: int3   
  0xa75719d5: int3   
  0xa75719d6: int3   
  0xa75719d7: int3   
  0xa75719d8: int3   
  0xa75719d9: int3   
  0xa75719da: int3   
  0xa75719db: int3   
  0xa75719dc: int3   
  0xa75719dd: int3   
  0xa75719de: int3   
  0xa75719df: int3   

----------------------------------------------------------------------
lookupswitch  171 lookupswitch  [0xa7571a00, 0xa7571a40]  64 bytes

  0xa7571a00: pop    %eax
  0xa7571a01: push   $0xb75639b0
  0xa7571a06: call   0xa7571a0b
  0xa7571a0b: pusha  
  0xa7571a0c: call   0xb6ff5f32
  0xa7571a11: hlt    
  0xa7571a12: push   $0xb7302e8b
  0xa7571a17: call   0xa7571a1c
  0xa7571a1c: pusha  
  0xa7571a1d: call   0xb6ff5f32
  0xa7571a22: hlt    
  0xa7571a23: nop
  0xa7571a24: int3   
  0xa7571a25: int3   
  0xa7571a26: int3   
  0xa7571a27: int3   
  0xa7571a28: int3   
  0xa7571a29: int3   
  0xa7571a2a: int3   
  0xa7571a2b: int3   
  0xa7571a2c: int3   
  0xa7571a2d: int3   
  0xa7571a2e: int3   
  0xa7571a2f: int3   
  0xa7571a30: int3   
  0xa7571a31: int3   
  0xa7571a32: int3   
  0xa7571a33: int3   
  0xa7571a34: int3   
  0xa7571a35: int3   
  0xa7571a36: int3   
  0xa7571a37: int3   
  0xa7571a38: int3   
  0xa7571a39: int3   
  0xa7571a3a: int3   
  0xa7571a3b: int3   
  0xa7571a3c: int3   
  0xa7571a3d: int3   
  0xa7571a3e: int3   
  0xa7571a3f: int3   

----------------------------------------------------------------------
ireturn  172 ireturn  [0xa7571a60, 0xa7571de0]  896 bytes

  0xa7571a60: pop    %eax
  0xa7571a61: mov    -0xc(%ebp),%ecx
  0xa7571a64: mov    0x8(%ecx),%ecx
  0xa7571a67: movzbl 0x16(%ecx),%ecx
  0xa7571a6b: cmp    $0xa,%ecx
  0xa7571a6e: je     0xa7571ab3
  0xa7571a74: cmp    $0x4,%ecx
  0xa7571a77: jne    0xa7571a85
  0xa7571a7d: and    $0x1,%eax
  0xa7571a80: jmp    0xa7571ab3
  0xa7571a85: cmp    $0x8,%ecx
  0xa7571a88: jne    0xa7571a99
  0xa7571a8e: shl    $0x18,%eax
  0xa7571a91: sar    $0x18,%eax
  0xa7571a94: jmp    0xa7571ab3
  0xa7571a99: cmp    $0x5,%ecx
  0xa7571a9c: jne    0xa7571aad
  0xa7571aa2: and    $0xffff,%eax
  0xa7571aa8: jmp    0xa7571ab3
  0xa7571aad: shl    $0x10,%eax
  0xa7571ab0: sar    $0x10,%eax
  0xa7571ab3: mov    %esp,%ecx
  0xa7571ab5: shr    $0xc,%ecx
  0xa7571ab8: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7571abf: mov    0x1a5(%ecx),%bl
  0xa7571ac5: mov    %ebx,%edi
  0xa7571ac7: movb   $0x0,0x1a5(%ecx)
  0xa7571ace: mov    -0xc(%ebp),%ebx
  0xa7571ad1: mov    0x14(%ebx),%ecx
  0xa7571ad4: test   $0x20,%ecx
  0xa7571ada: je     0xa7571c99
  0xa7571ae0: mov    %edi,%ecx
  0xa7571ae2: test   $0xff,%cl
  0xa7571ae5: jne    0xa7571d74
  0xa7571aeb: push   %eax
  0xa7571aec: lea    -0x28(%ebp),%edx
  0xa7571aef: mov    0x4(%edx),%eax
  0xa7571af2: test   %eax,%eax
  0xa7571af4: jne    0xa7571bb7
  0xa7571afa: pop    %eax
  0xa7571afb: emms   
  0xa7571afd: call   0xa7571b07
  0xa7571b02: jmp    0xa7571ba6
  0xa7571b07: lea    0x4(%esp),%eax
  0xa7571b0b: cmpl   $0x0,-0x8(%ebp)
  0xa7571b12: je     0xa7571b29
  0xa7571b18: push   $0xb7449b58
  0xa7571b1d: call   0xa7571b22
  0xa7571b22: pusha  
  0xa7571b23: call   0xb6ff5f32
  0xa7571b28: hlt    
  0xa7571b29: mov    %esi,-0x1c(%ebp)
  0xa7571b2c: mov    %esp,%edi
  0xa7571b2e: shr    $0xc,%edi
  0xa7571b31: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571b38: push   %edi
  0xa7571b39: mov    %ebp,0x148(%edi)
  0xa7571b3f: mov    %eax,0x140(%edi)
  0xa7571b45: call   0xb6e5f012
  0xa7571b4a: add    $0x4,%esp
  0xa7571b4d: push   %eax
  0xa7571b4e: mov    %esp,%eax
  0xa7571b50: shr    $0xc,%eax
  0xa7571b53: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571b5a: cmp    %eax,%edi
  0xa7571b5c: je     0xa7571b73
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7571b62: push   $0xb74acf8c
  0xa7571b67: call   0xa7571b6c
  0xa7571b6c: pusha  
  0xa7571b6d: call   0xb6ff5f32
  0xa7571b72: hlt    
  0xa7571b73: pop    %eax
  0xa7571b74: movl   $0x0,0x140(%edi)
  0xa7571b7e: movl   $0x0,0x148(%edi)
  0xa7571b88: movl   $0x0,0x144(%edi)
  0xa7571b92: cmpl   $0x0,0x4(%edi)
  0xa7571b99: jne    0xa7556400
  0xa7571b9f: mov    -0x1c(%ebp),%esi
  0xa7571ba2: mov    -0x18(%ebp),%edi
  0xa7571ba5: ret    
  0xa7571ba6: push   $0xb7302e8b
  0xa7571bab: call   0xa7571bb0
  0xa7571bb0: pusha  
  0xa7571bb1: call   0xb6ff5f32
  0xa7571bb6: hlt    
  0xa7571bb7: mov    %esi,-0x1c(%ebp)
  0xa7571bba: lea    (%edx),%eax
  0xa7571bbc: mov    0x4(%edx),%ecx
  0xa7571bbf: movl   $0x0,0x4(%edx)
  0xa7571bc6: mov    (%ecx),%ebx
  0xa7571bc8: and    $0x7,%ebx
  0xa7571bcb: cmp    $0x5,%ebx
  0xa7571bce: je     0xa7571c95
  0xa7571bd4: mov    (%eax),%ebx
  0xa7571bd6: test   %ebx,%ebx
  0xa7571bd8: je     0xa7571c95
  0xa7571bde: lock cmpxchg %ebx,(%ecx)
  0xa7571be2: je     0xa7571c95
  0xa7571be8: mov    %ecx,0x4(%edx)
  0xa7571beb: call   0xa7571bf5
  0xa7571bf0: jmp    0xa7571c95
  0xa7571bf5: push   %edx
  0xa7571bf6: lea    0x8(%esp),%eax
  0xa7571bfa: cmpl   $0x0,-0x8(%ebp)
  0xa7571c01: je     0xa7571c18
  0xa7571c07: push   $0xb7449b58
  0xa7571c0c: call   0xa7571c11
  0xa7571c11: pusha  
  0xa7571c12: call   0xb6ff5f32
  0xa7571c17: hlt    
  0xa7571c18: mov    %esi,-0x1c(%ebp)
  0xa7571c1b: mov    %esp,%edi
  0xa7571c1d: shr    $0xc,%edi
  0xa7571c20: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571c27: push   %edi
  0xa7571c28: mov    %ebp,0x148(%edi)
  0xa7571c2e: mov    %eax,0x140(%edi)
  0xa7571c34: call   0xb6e5ed36
  0xa7571c39: add    $0x8,%esp
  0xa7571c3c: push   %eax
  0xa7571c3d: mov    %esp,%eax
  0xa7571c3f: shr    $0xc,%eax
  0xa7571c42: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571c49: cmp    %eax,%edi
  0xa7571c4b: je     0xa7571c62
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7571c51: push   $0xb74acf8c
  0xa7571c56: call   0xa7571c5b
  0xa7571c5b: pusha  
  0xa7571c5c: call   0xb6ff5f32
  0xa7571c61: hlt    
  0xa7571c62: pop    %eax
  0xa7571c63: movl   $0x0,0x140(%edi)
  0xa7571c6d: movl   $0x0,0x148(%edi)
  0xa7571c77: movl   $0x0,0x144(%edi)
  0xa7571c81: cmpl   $0x0,0x4(%edi)
  0xa7571c88: jne    0xa7556400
  0xa7571c8e: mov    -0x1c(%ebp),%esi
  0xa7571c91: mov    -0x18(%ebp),%edi
  0xa7571c94: ret    
  0xa7571c95: mov    -0x1c(%ebp),%esi
  0xa7571c98: pop    %eax
  0xa7571c99: mov    -0x20(%ebp),%ecx
  0xa7571c9c: lea    -0x20(%ebp),%ebx
  0xa7571c9f: jmp    0xa7571d70
  0xa7571ca4: emms   
  0xa7571ca6: call   0xa7571cb0
  0xa7571cab: jmp    0xa7571d4f
  0xa7571cb0: lea    0x4(%esp),%eax
  0xa7571cb4: cmpl   $0x0,-0x8(%ebp)
  0xa7571cbb: je     0xa7571cd2
  0xa7571cc1: push   $0xb7449b58
  0xa7571cc6: call   0xa7571ccb
  0xa7571ccb: pusha  
  0xa7571ccc: call   0xb6ff5f32
  0xa7571cd1: hlt    
  0xa7571cd2: mov    %esi,-0x1c(%ebp)
  0xa7571cd5: mov    %esp,%edi
  0xa7571cd7: shr    $0xc,%edi
  0xa7571cda: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571ce1: push   %edi
  0xa7571ce2: mov    %ebp,0x148(%edi)
  0xa7571ce8: mov    %eax,0x140(%edi)
  0xa7571cee: call   0xb6e5f012
  0xa7571cf3: add    $0x4,%esp
  0xa7571cf6: push   %eax
  0xa7571cf7: mov    %esp,%eax
  0xa7571cf9: shr    $0xc,%eax
  0xa7571cfc: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571d03: cmp    %eax,%edi
  0xa7571d05: je     0xa7571d1c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7571d0b: push   $0xb74acf8c
  0xa7571d10: call   0xa7571d15
  0xa7571d15: pusha  
  0xa7571d16: call   0xb6ff5f32
  0xa7571d1b: hlt    
  0xa7571d1c: pop    %eax
  0xa7571d1d: movl   $0x0,0x140(%edi)
  0xa7571d27: movl   $0x0,0x148(%edi)
  0xa7571d31: movl   $0x0,0x144(%edi)
  0xa7571d3b: cmpl   $0x0,0x4(%edi)
  0xa7571d42: jne    0xa7556400
  0xa7571d48: mov    -0x1c(%ebp),%esi
  0xa7571d4b: mov    -0x18(%ebp),%edi
  0xa7571d4e: ret    
  0xa7571d4f: push   $0xb7302e8b
  0xa7571d54: call   0xa7571d59
  0xa7571d59: pusha  
  0xa7571d5a: call   0xb6ff5f32
  0xa7571d5f: hlt    
  0xa7571d60: cmpl   $0x0,0x4(%ecx)
  0xa7571d67: jne    0xa7571ca4
  0xa7571d6d: add    $0x8,%ecx
  0xa7571d70: cmp    %ebx,%ecx
  0xa7571d72: jne    0xa7571d60
  0xa7571d74: cmpb   $0x0,0xb78c1e7e
  0xa7571d7b: je     0xa7571dba
  0xa7571d81: push   %eax
  0xa7571d82: mov    %esp,%ebx
  0xa7571d84: shr    $0xc,%ebx
  0xa7571d87: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7571d8e: mov    -0xc(%ebp),%ecx
  0xa7571d91: push   %ecx
  0xa7571d92: push   %ebx
  0xa7571d93: cmpl   $0x0,-0x8(%ebp)
  0xa7571d9a: je     0xa7571db1
  0xa7571da0: push   $0xb7449b18
  0xa7571da5: call   0xa7571daa
  0xa7571daa: pusha  
  0xa7571dab: call   0xb6ff5f32
  0xa7571db0: hlt    
  0xa7571db1: call   0xb7175974
  0xa7571db6: add    $0x8,%esp
  0xa7571db9: pop    %eax
  0xa7571dba: mov    -0x4(%ebp),%ebx
  0xa7571dbd: mov    %ebp,%esp
  0xa7571dbf: pop    %ebp
  0xa7571dc0: pop    %esi
  0xa7571dc1: mov    %ebx,%esp
  0xa7571dc3: jmp    *%esi
  0xa7571dc5: push   $0xb7302e8b
  0xa7571dca: call   0xa7571dcf
  0xa7571dcf: pusha  
  0xa7571dd0: call   0xb6ff5f32
  0xa7571dd5: hlt    
  0xa7571dd6: nop
  0xa7571dd7: nop
  0xa7571dd8: int3   
  0xa7571dd9: int3   
  0xa7571dda: int3   
  0xa7571ddb: int3   
  0xa7571ddc: int3   
  0xa7571ddd: int3   
  0xa7571dde: int3   
  0xa7571ddf: int3   

----------------------------------------------------------------------
lreturn  173 lreturn  [0xa7571e00, 0xa7572140]  832 bytes

  0xa7571e00: pop    %eax
  0xa7571e01: pop    %edx
  0xa7571e02: mov    %esp,%ecx
  0xa7571e04: shr    $0xc,%ecx
  0xa7571e07: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7571e0e: mov    0x1a5(%ecx),%bl
  0xa7571e14: mov    %ebx,%edi
  0xa7571e16: movb   $0x0,0x1a5(%ecx)
  0xa7571e1d: mov    -0xc(%ebp),%ebx
  0xa7571e20: mov    0x14(%ebx),%ecx
  0xa7571e23: test   $0x20,%ecx
  0xa7571e29: je     0xa7571feb
  0xa7571e2f: mov    %edi,%ecx
  0xa7571e31: test   $0xff,%cl
  0xa7571e34: jne    0xa75720c6
  0xa7571e3a: push   %edx
  0xa7571e3b: push   %eax
  0xa7571e3c: lea    -0x28(%ebp),%edx
  0xa7571e3f: mov    0x4(%edx),%eax
  0xa7571e42: test   %eax,%eax
  0xa7571e44: jne    0xa7571f08
  0xa7571e4a: pop    %eax
  0xa7571e4b: pop    %edx
  0xa7571e4c: emms   
  0xa7571e4e: call   0xa7571e58
  0xa7571e53: jmp    0xa7571ef7
  0xa7571e58: lea    0x4(%esp),%eax
  0xa7571e5c: cmpl   $0x0,-0x8(%ebp)
  0xa7571e63: je     0xa7571e7a
  0xa7571e69: push   $0xb7449b58
  0xa7571e6e: call   0xa7571e73
  0xa7571e73: pusha  
  0xa7571e74: call   0xb6ff5f32
  0xa7571e79: hlt    
  0xa7571e7a: mov    %esi,-0x1c(%ebp)
  0xa7571e7d: mov    %esp,%edi
  0xa7571e7f: shr    $0xc,%edi
  0xa7571e82: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571e89: push   %edi
  0xa7571e8a: mov    %ebp,0x148(%edi)
  0xa7571e90: mov    %eax,0x140(%edi)
  0xa7571e96: call   0xb6e5f012
  0xa7571e9b: add    $0x4,%esp
  0xa7571e9e: push   %eax
  0xa7571e9f: mov    %esp,%eax
  0xa7571ea1: shr    $0xc,%eax
  0xa7571ea4: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571eab: cmp    %eax,%edi
  0xa7571ead: je     0xa7571ec4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7571eb3: push   $0xb74acf8c
  0xa7571eb8: call   0xa7571ebd
  0xa7571ebd: pusha  
  0xa7571ebe: call   0xb6ff5f32
  0xa7571ec3: hlt    
  0xa7571ec4: pop    %eax
  0xa7571ec5: movl   $0x0,0x140(%edi)
  0xa7571ecf: movl   $0x0,0x148(%edi)
  0xa7571ed9: movl   $0x0,0x144(%edi)
  0xa7571ee3: cmpl   $0x0,0x4(%edi)
  0xa7571eea: jne    0xa7556400
  0xa7571ef0: mov    -0x1c(%ebp),%esi
  0xa7571ef3: mov    -0x18(%ebp),%edi
  0xa7571ef6: ret    
  0xa7571ef7: push   $0xb7302e8b
  0xa7571efc: call   0xa7571f01
  0xa7571f01: pusha  
  0xa7571f02: call   0xb6ff5f32
  0xa7571f07: hlt    
  0xa7571f08: mov    %esi,-0x1c(%ebp)
  0xa7571f0b: lea    (%edx),%eax
  0xa7571f0d: mov    0x4(%edx),%ecx
  0xa7571f10: movl   $0x0,0x4(%edx)
  0xa7571f17: mov    (%ecx),%ebx
  0xa7571f19: and    $0x7,%ebx
  0xa7571f1c: cmp    $0x5,%ebx
  0xa7571f1f: je     0xa7571fe6
  0xa7571f25: mov    (%eax),%ebx
  0xa7571f27: test   %ebx,%ebx
  0xa7571f29: je     0xa7571fe6
  0xa7571f2f: lock cmpxchg %ebx,(%ecx)
  0xa7571f33: je     0xa7571fe6
  0xa7571f39: mov    %ecx,0x4(%edx)
  0xa7571f3c: call   0xa7571f46
  0xa7571f41: jmp    0xa7571fe6
  0xa7571f46: push   %edx
  0xa7571f47: lea    0x8(%esp),%eax
  0xa7571f4b: cmpl   $0x0,-0x8(%ebp)
  0xa7571f52: je     0xa7571f69
  0xa7571f58: push   $0xb7449b58
  0xa7571f5d: call   0xa7571f62
  0xa7571f62: pusha  
  0xa7571f63: call   0xb6ff5f32
  0xa7571f68: hlt    
  0xa7571f69: mov    %esi,-0x1c(%ebp)
  0xa7571f6c: mov    %esp,%edi
  0xa7571f6e: shr    $0xc,%edi
  0xa7571f71: mov    -0x4871aba0(,%edi,4),%edi
  0xa7571f78: push   %edi
  0xa7571f79: mov    %ebp,0x148(%edi)
  0xa7571f7f: mov    %eax,0x140(%edi)
  0xa7571f85: call   0xb6e5ed36
  0xa7571f8a: add    $0x8,%esp
  0xa7571f8d: push   %eax
  0xa7571f8e: mov    %esp,%eax
  0xa7571f90: shr    $0xc,%eax
  0xa7571f93: mov    -0x4871aba0(,%eax,4),%eax
  0xa7571f9a: cmp    %eax,%edi
  0xa7571f9c: je     0xa7571fb3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7571fa2: push   $0xb74acf8c
  0xa7571fa7: call   0xa7571fac
  0xa7571fac: pusha  
  0xa7571fad: call   0xb6ff5f32
  0xa7571fb2: hlt    
  0xa7571fb3: pop    %eax
  0xa7571fb4: movl   $0x0,0x140(%edi)
  0xa7571fbe: movl   $0x0,0x148(%edi)
  0xa7571fc8: movl   $0x0,0x144(%edi)
  0xa7571fd2: cmpl   $0x0,0x4(%edi)
  0xa7571fd9: jne    0xa7556400
  0xa7571fdf: mov    -0x1c(%ebp),%esi
  0xa7571fe2: mov    -0x18(%ebp),%edi
  0xa7571fe5: ret    
  0xa7571fe6: mov    -0x1c(%ebp),%esi
  0xa7571fe9: pop    %eax
  0xa7571fea: pop    %edx
  0xa7571feb: mov    -0x20(%ebp),%ecx
  0xa7571fee: lea    -0x20(%ebp),%ebx
  0xa7571ff1: jmp    0xa75720c2
  0xa7571ff6: emms   
  0xa7571ff8: call   0xa7572002
  0xa7571ffd: jmp    0xa75720a1
  0xa7572002: lea    0x4(%esp),%eax
  0xa7572006: cmpl   $0x0,-0x8(%ebp)
  0xa757200d: je     0xa7572024
  0xa7572013: push   $0xb7449b58
  0xa7572018: call   0xa757201d
  0xa757201d: pusha  
  0xa757201e: call   0xb6ff5f32
  0xa7572023: hlt    
  0xa7572024: mov    %esi,-0x1c(%ebp)
  0xa7572027: mov    %esp,%edi
  0xa7572029: shr    $0xc,%edi
  0xa757202c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572033: push   %edi
  0xa7572034: mov    %ebp,0x148(%edi)
  0xa757203a: mov    %eax,0x140(%edi)
  0xa7572040: call   0xb6e5f012
  0xa7572045: add    $0x4,%esp
  0xa7572048: push   %eax
  0xa7572049: mov    %esp,%eax
  0xa757204b: shr    $0xc,%eax
  0xa757204e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572055: cmp    %eax,%edi
  0xa7572057: je     0xa757206e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757205d: push   $0xb74acf8c
  0xa7572062: call   0xa7572067
  0xa7572067: pusha  
  0xa7572068: call   0xb6ff5f32
  0xa757206d: hlt    
  0xa757206e: pop    %eax
  0xa757206f: movl   $0x0,0x140(%edi)
  0xa7572079: movl   $0x0,0x148(%edi)
  0xa7572083: movl   $0x0,0x144(%edi)
  0xa757208d: cmpl   $0x0,0x4(%edi)
  0xa7572094: jne    0xa7556400
  0xa757209a: mov    -0x1c(%ebp),%esi
  0xa757209d: mov    -0x18(%ebp),%edi
  0xa75720a0: ret    
  0xa75720a1: push   $0xb7302e8b
  0xa75720a6: call   0xa75720ab
  0xa75720ab: pusha  
  0xa75720ac: call   0xb6ff5f32
  0xa75720b1: hlt    
  0xa75720b2: cmpl   $0x0,0x4(%ecx)
  0xa75720b9: jne    0xa7571ff6
  0xa75720bf: add    $0x8,%ecx
  0xa75720c2: cmp    %ebx,%ecx
  0xa75720c4: jne    0xa75720b2
  0xa75720c6: cmpb   $0x0,0xb78c1e7e
  0xa75720cd: je     0xa757210e
  0xa75720d3: push   %edx
  0xa75720d4: push   %eax
  0xa75720d5: mov    %esp,%ebx
  0xa75720d7: shr    $0xc,%ebx
  0xa75720da: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa75720e1: mov    -0xc(%ebp),%ecx
  0xa75720e4: push   %ecx
  0xa75720e5: push   %ebx
  0xa75720e6: cmpl   $0x0,-0x8(%ebp)
  0xa75720ed: je     0xa7572104
  0xa75720f3: push   $0xb7449b18
  0xa75720f8: call   0xa75720fd
  0xa75720fd: pusha  
  0xa75720fe: call   0xb6ff5f32
  0xa7572103: hlt    
  0xa7572104: call   0xb7175974
  0xa7572109: add    $0x8,%esp
  0xa757210c: pop    %eax
  0xa757210d: pop    %edx
  0xa757210e: mov    -0x4(%ebp),%ebx
  0xa7572111: mov    %ebp,%esp
  0xa7572113: pop    %ebp
  0xa7572114: pop    %esi
  0xa7572115: mov    %ebx,%esp
  0xa7572117: jmp    *%esi
  0xa7572119: push   $0xb7302e8b
  0xa757211e: call   0xa7572123
  0xa7572123: pusha  
  0xa7572124: call   0xb6ff5f32
  0xa7572129: hlt    
  0xa757212a: nop
  0xa757212b: nop
  0xa757212c: int3   
  0xa757212d: int3   
  0xa757212e: int3   
  0xa757212f: int3   
  0xa7572130: int3   
  0xa7572131: int3   
  0xa7572132: int3   
  0xa7572133: int3   
  0xa7572134: int3   
  0xa7572135: int3   
  0xa7572136: int3   
  0xa7572137: int3   
  0xa7572138: int3   
  0xa7572139: int3   
  0xa757213a: int3   
  0xa757213b: int3   
  0xa757213c: int3   
  0xa757213d: int3   
  0xa757213e: int3   
  0xa757213f: int3   

----------------------------------------------------------------------
freturn  174 freturn  [0xa7572160, 0xa75724c0]  864 bytes

  0xa7572160: flds   (%esp)
  0xa7572163: add    $0x4,%esp
  0xa7572166: mov    %esp,%ecx
  0xa7572168: shr    $0xc,%ecx
  0xa757216b: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7572172: mov    0x1a5(%ecx),%bl
  0xa7572178: mov    %ebx,%edi
  0xa757217a: movb   $0x0,0x1a5(%ecx)
  0xa7572181: mov    -0xc(%ebp),%ebx
  0xa7572184: mov    0x14(%ebx),%ecx
  0xa7572187: test   $0x20,%ecx
  0xa757218d: je     0xa757235b
  0xa7572193: mov    %edi,%ecx
  0xa7572195: test   $0xff,%cl
  0xa7572198: jne    0xa7572436
  0xa757219e: sub    $0x4,%esp
  0xa75721a1: fstps  (%esp)
  0xa75721a4: lea    -0x28(%ebp),%edx
  0xa75721a7: mov    0x4(%edx),%eax
  0xa75721aa: test   %eax,%eax
  0xa75721ac: jne    0xa7572274
  0xa75721b2: flds   (%esp)
  0xa75721b5: add    $0x4,%esp
  0xa75721b8: emms   
  0xa75721ba: call   0xa75721c4
  0xa75721bf: jmp    0xa7572263
  0xa75721c4: lea    0x4(%esp),%eax
  0xa75721c8: cmpl   $0x0,-0x8(%ebp)
  0xa75721cf: je     0xa75721e6
  0xa75721d5: push   $0xb7449b58
  0xa75721da: call   0xa75721df
  0xa75721df: pusha  
  0xa75721e0: call   0xb6ff5f32
  0xa75721e5: hlt    
  0xa75721e6: mov    %esi,-0x1c(%ebp)
  0xa75721e9: mov    %esp,%edi
  0xa75721eb: shr    $0xc,%edi
  0xa75721ee: mov    -0x4871aba0(,%edi,4),%edi
  0xa75721f5: push   %edi
  0xa75721f6: mov    %ebp,0x148(%edi)
  0xa75721fc: mov    %eax,0x140(%edi)
  0xa7572202: call   0xb6e5f012
  0xa7572207: add    $0x4,%esp
  0xa757220a: push   %eax
  0xa757220b: mov    %esp,%eax
  0xa757220d: shr    $0xc,%eax
  0xa7572210: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572217: cmp    %eax,%edi
  0xa7572219: je     0xa7572230
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757221f: push   $0xb74acf8c
  0xa7572224: call   0xa7572229
  0xa7572229: pusha  
  0xa757222a: call   0xb6ff5f32
  0xa757222f: hlt    
  0xa7572230: pop    %eax
  0xa7572231: movl   $0x0,0x140(%edi)
  0xa757223b: movl   $0x0,0x148(%edi)
  0xa7572245: movl   $0x0,0x144(%edi)
  0xa757224f: cmpl   $0x0,0x4(%edi)
  0xa7572256: jne    0xa7556400
  0xa757225c: mov    -0x1c(%ebp),%esi
  0xa757225f: mov    -0x18(%ebp),%edi
  0xa7572262: ret    
  0xa7572263: push   $0xb7302e8b
  0xa7572268: call   0xa757226d
  0xa757226d: pusha  
  0xa757226e: call   0xb6ff5f32
  0xa7572273: hlt    
  0xa7572274: mov    %esi,-0x1c(%ebp)
  0xa7572277: lea    (%edx),%eax
  0xa7572279: mov    0x4(%edx),%ecx
  0xa757227c: movl   $0x0,0x4(%edx)
  0xa7572283: mov    (%ecx),%ebx
  0xa7572285: and    $0x7,%ebx
  0xa7572288: cmp    $0x5,%ebx
  0xa757228b: je     0xa7572352
  0xa7572291: mov    (%eax),%ebx
  0xa7572293: test   %ebx,%ebx
  0xa7572295: je     0xa7572352
  0xa757229b: lock cmpxchg %ebx,(%ecx)
  0xa757229f: je     0xa7572352
  0xa75722a5: mov    %ecx,0x4(%edx)
  0xa75722a8: call   0xa75722b2
  0xa75722ad: jmp    0xa7572352
  0xa75722b2: push   %edx
  0xa75722b3: lea    0x8(%esp),%eax
  0xa75722b7: cmpl   $0x0,-0x8(%ebp)
  0xa75722be: je     0xa75722d5
  0xa75722c4: push   $0xb7449b58
  0xa75722c9: call   0xa75722ce
  0xa75722ce: pusha  
  0xa75722cf: call   0xb6ff5f32
  0xa75722d4: hlt    
  0xa75722d5: mov    %esi,-0x1c(%ebp)
  0xa75722d8: mov    %esp,%edi
  0xa75722da: shr    $0xc,%edi
  0xa75722dd: mov    -0x4871aba0(,%edi,4),%edi
  0xa75722e4: push   %edi
  0xa75722e5: mov    %ebp,0x148(%edi)
  0xa75722eb: mov    %eax,0x140(%edi)
  0xa75722f1: call   0xb6e5ed36
  0xa75722f6: add    $0x8,%esp
  0xa75722f9: push   %eax
  0xa75722fa: mov    %esp,%eax
  0xa75722fc: shr    $0xc,%eax
  0xa75722ff: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572306: cmp    %eax,%edi
  0xa7572308: je     0xa757231f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757230e: push   $0xb74acf8c
  0xa7572313: call   0xa7572318
  0xa7572318: pusha  
  0xa7572319: call   0xb6ff5f32
  0xa757231e: hlt    
  0xa757231f: pop    %eax
  0xa7572320: movl   $0x0,0x140(%edi)
  0xa757232a: movl   $0x0,0x148(%edi)
  0xa7572334: movl   $0x0,0x144(%edi)
  0xa757233e: cmpl   $0x0,0x4(%edi)
  0xa7572345: jne    0xa7556400
  0xa757234b: mov    -0x1c(%ebp),%esi
  0xa757234e: mov    -0x18(%ebp),%edi
  0xa7572351: ret    
  0xa7572352: mov    -0x1c(%ebp),%esi
  0xa7572355: flds   (%esp)
  0xa7572358: add    $0x4,%esp
  0xa757235b: mov    -0x20(%ebp),%ecx
  0xa757235e: lea    -0x20(%ebp),%ebx
  0xa7572361: jmp    0xa7572432
  0xa7572366: emms   
  0xa7572368: call   0xa7572372
  0xa757236d: jmp    0xa7572411
  0xa7572372: lea    0x4(%esp),%eax
  0xa7572376: cmpl   $0x0,-0x8(%ebp)
  0xa757237d: je     0xa7572394
  0xa7572383: push   $0xb7449b58
  0xa7572388: call   0xa757238d
  0xa757238d: pusha  
  0xa757238e: call   0xb6ff5f32
  0xa7572393: hlt    
  0xa7572394: mov    %esi,-0x1c(%ebp)
  0xa7572397: mov    %esp,%edi
  0xa7572399: shr    $0xc,%edi
  0xa757239c: mov    -0x4871aba0(,%edi,4),%edi
  0xa75723a3: push   %edi
  0xa75723a4: mov    %ebp,0x148(%edi)
  0xa75723aa: mov    %eax,0x140(%edi)
  0xa75723b0: call   0xb6e5f012
  0xa75723b5: add    $0x4,%esp
  0xa75723b8: push   %eax
  0xa75723b9: mov    %esp,%eax
  0xa75723bb: shr    $0xc,%eax
  0xa75723be: mov    -0x4871aba0(,%eax,4),%eax
  0xa75723c5: cmp    %eax,%edi
  0xa75723c7: je     0xa75723de
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75723cd: push   $0xb74acf8c
  0xa75723d2: call   0xa75723d7
  0xa75723d7: pusha  
  0xa75723d8: call   0xb6ff5f32
  0xa75723dd: hlt    
  0xa75723de: pop    %eax
  0xa75723df: movl   $0x0,0x140(%edi)
  0xa75723e9: movl   $0x0,0x148(%edi)
  0xa75723f3: movl   $0x0,0x144(%edi)
  0xa75723fd: cmpl   $0x0,0x4(%edi)
  0xa7572404: jne    0xa7556400
  0xa757240a: mov    -0x1c(%ebp),%esi
  0xa757240d: mov    -0x18(%ebp),%edi
  0xa7572410: ret    
  0xa7572411: push   $0xb7302e8b
  0xa7572416: call   0xa757241b
  0xa757241b: pusha  
  0xa757241c: call   0xb6ff5f32
  0xa7572421: hlt    
  0xa7572422: cmpl   $0x0,0x4(%ecx)
  0xa7572429: jne    0xa7572366
  0xa757242f: add    $0x8,%ecx
  0xa7572432: cmp    %ebx,%ecx
  0xa7572434: jne    0xa7572422
  0xa7572436: cmpb   $0x0,0xb78c1e7e
  0xa757243d: je     0xa7572486
  0xa7572443: sub    $0x4,%esp
  0xa7572446: fstps  (%esp)
  0xa7572449: mov    %esp,%ebx
  0xa757244b: shr    $0xc,%ebx
  0xa757244e: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7572455: mov    -0xc(%ebp),%ecx
  0xa7572458: push   %ecx
  0xa7572459: push   %ebx
  0xa757245a: cmpl   $0x0,-0x8(%ebp)
  0xa7572461: je     0xa7572478
  0xa7572467: push   $0xb7449b18
  0xa757246c: call   0xa7572471
  0xa7572471: pusha  
  0xa7572472: call   0xb6ff5f32
  0xa7572477: hlt    
  0xa7572478: call   0xb7175974
  0xa757247d: add    $0x8,%esp
  0xa7572480: flds   (%esp)
  0xa7572483: add    $0x4,%esp
  0xa7572486: mov    -0x4(%ebp),%ebx
  0xa7572489: mov    %ebp,%esp
  0xa757248b: pop    %ebp
  0xa757248c: pop    %esi
  0xa757248d: mov    %ebx,%esp
  0xa757248f: sub    $0x4,%esp
  0xa7572492: fstps  (%esp)
  0xa7572495: vmovss (%esp),%xmm0
  0xa757249a: add    $0x4,%esp
  0xa757249d: jmp    *%esi
  0xa757249f: push   $0xb7302e8b
  0xa75724a4: call   0xa75724a9
  0xa75724a9: pusha  
  0xa75724aa: call   0xb6ff5f32
  0xa75724af: hlt    
  0xa75724b0: int3   
  0xa75724b1: int3   
  0xa75724b2: int3   
  0xa75724b3: int3   
  0xa75724b4: int3   
  0xa75724b5: int3   
  0xa75724b6: int3   
  0xa75724b7: int3   
  0xa75724b8: int3   
  0xa75724b9: int3   
  0xa75724ba: int3   
  0xa75724bb: int3   
  0xa75724bc: int3   
  0xa75724bd: int3   
  0xa75724be: int3   
  0xa75724bf: int3   

----------------------------------------------------------------------
dreturn  175 dreturn  [0xa75724e0, 0xa7572840]  864 bytes

  0xa75724e0: fldl   (%esp)
  0xa75724e3: add    $0x8,%esp
  0xa75724e6: mov    %esp,%ecx
  0xa75724e8: shr    $0xc,%ecx
  0xa75724eb: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75724f2: mov    0x1a5(%ecx),%bl
  0xa75724f8: mov    %ebx,%edi
  0xa75724fa: movb   $0x0,0x1a5(%ecx)
  0xa7572501: mov    -0xc(%ebp),%ebx
  0xa7572504: mov    0x14(%ebx),%ecx
  0xa7572507: test   $0x20,%ecx
  0xa757250d: je     0xa75726db
  0xa7572513: mov    %edi,%ecx
  0xa7572515: test   $0xff,%cl
  0xa7572518: jne    0xa75727b6
  0xa757251e: sub    $0x8,%esp
  0xa7572521: fstpl  (%esp)
  0xa7572524: lea    -0x28(%ebp),%edx
  0xa7572527: mov    0x4(%edx),%eax
  0xa757252a: test   %eax,%eax
  0xa757252c: jne    0xa75725f4
  0xa7572532: fldl   (%esp)
  0xa7572535: add    $0x8,%esp
  0xa7572538: emms   
  0xa757253a: call   0xa7572544
  0xa757253f: jmp    0xa75725e3
  0xa7572544: lea    0x4(%esp),%eax
  0xa7572548: cmpl   $0x0,-0x8(%ebp)
  0xa757254f: je     0xa7572566
  0xa7572555: push   $0xb7449b58
  0xa757255a: call   0xa757255f
  0xa757255f: pusha  
  0xa7572560: call   0xb6ff5f32
  0xa7572565: hlt    
  0xa7572566: mov    %esi,-0x1c(%ebp)
  0xa7572569: mov    %esp,%edi
  0xa757256b: shr    $0xc,%edi
  0xa757256e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572575: push   %edi
  0xa7572576: mov    %ebp,0x148(%edi)
  0xa757257c: mov    %eax,0x140(%edi)
  0xa7572582: call   0xb6e5f012
  0xa7572587: add    $0x4,%esp
  0xa757258a: push   %eax
  0xa757258b: mov    %esp,%eax
  0xa757258d: shr    $0xc,%eax
  0xa7572590: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572597: cmp    %eax,%edi
  0xa7572599: je     0xa75725b0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757259f: push   $0xb74acf8c
  0xa75725a4: call   0xa75725a9
  0xa75725a9: pusha  
  0xa75725aa: call   0xb6ff5f32
  0xa75725af: hlt    
  0xa75725b0: pop    %eax
  0xa75725b1: movl   $0x0,0x140(%edi)
  0xa75725bb: movl   $0x0,0x148(%edi)
  0xa75725c5: movl   $0x0,0x144(%edi)
  0xa75725cf: cmpl   $0x0,0x4(%edi)
  0xa75725d6: jne    0xa7556400
  0xa75725dc: mov    -0x1c(%ebp),%esi
  0xa75725df: mov    -0x18(%ebp),%edi
  0xa75725e2: ret    
  0xa75725e3: push   $0xb7302e8b
  0xa75725e8: call   0xa75725ed
  0xa75725ed: pusha  
  0xa75725ee: call   0xb6ff5f32
  0xa75725f3: hlt    
  0xa75725f4: mov    %esi,-0x1c(%ebp)
  0xa75725f7: lea    (%edx),%eax
  0xa75725f9: mov    0x4(%edx),%ecx
  0xa75725fc: movl   $0x0,0x4(%edx)
  0xa7572603: mov    (%ecx),%ebx
  0xa7572605: and    $0x7,%ebx
  0xa7572608: cmp    $0x5,%ebx
  0xa757260b: je     0xa75726d2
  0xa7572611: mov    (%eax),%ebx
  0xa7572613: test   %ebx,%ebx
  0xa7572615: je     0xa75726d2
  0xa757261b: lock cmpxchg %ebx,(%ecx)
  0xa757261f: je     0xa75726d2
  0xa7572625: mov    %ecx,0x4(%edx)
  0xa7572628: call   0xa7572632
  0xa757262d: jmp    0xa75726d2
  0xa7572632: push   %edx
  0xa7572633: lea    0x8(%esp),%eax
  0xa7572637: cmpl   $0x0,-0x8(%ebp)
  0xa757263e: je     0xa7572655
  0xa7572644: push   $0xb7449b58
  0xa7572649: call   0xa757264e
  0xa757264e: pusha  
  0xa757264f: call   0xb6ff5f32
  0xa7572654: hlt    
  0xa7572655: mov    %esi,-0x1c(%ebp)
  0xa7572658: mov    %esp,%edi
  0xa757265a: shr    $0xc,%edi
  0xa757265d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572664: push   %edi
  0xa7572665: mov    %ebp,0x148(%edi)
  0xa757266b: mov    %eax,0x140(%edi)
  0xa7572671: call   0xb6e5ed36
  0xa7572676: add    $0x8,%esp
  0xa7572679: push   %eax
  0xa757267a: mov    %esp,%eax
  0xa757267c: shr    $0xc,%eax
  0xa757267f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572686: cmp    %eax,%edi
  0xa7572688: je     0xa757269f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757268e: push   $0xb74acf8c
  0xa7572693: call   0xa7572698
  0xa7572698: pusha  
  0xa7572699: call   0xb6ff5f32
  0xa757269e: hlt    
  0xa757269f: pop    %eax
  0xa75726a0: movl   $0x0,0x140(%edi)
  0xa75726aa: movl   $0x0,0x148(%edi)
  0xa75726b4: movl   $0x0,0x144(%edi)
  0xa75726be: cmpl   $0x0,0x4(%edi)
  0xa75726c5: jne    0xa7556400
  0xa75726cb: mov    -0x1c(%ebp),%esi
  0xa75726ce: mov    -0x18(%ebp),%edi
  0xa75726d1: ret    
  0xa75726d2: mov    -0x1c(%ebp),%esi
  0xa75726d5: fldl   (%esp)
  0xa75726d8: add    $0x8,%esp
  0xa75726db: mov    -0x20(%ebp),%ecx
  0xa75726de: lea    -0x20(%ebp),%ebx
  0xa75726e1: jmp    0xa75727b2
  0xa75726e6: emms   
  0xa75726e8: call   0xa75726f2
  0xa75726ed: jmp    0xa7572791
  0xa75726f2: lea    0x4(%esp),%eax
  0xa75726f6: cmpl   $0x0,-0x8(%ebp)
  0xa75726fd: je     0xa7572714
  0xa7572703: push   $0xb7449b58
  0xa7572708: call   0xa757270d
  0xa757270d: pusha  
  0xa757270e: call   0xb6ff5f32
  0xa7572713: hlt    
  0xa7572714: mov    %esi,-0x1c(%ebp)
  0xa7572717: mov    %esp,%edi
  0xa7572719: shr    $0xc,%edi
  0xa757271c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572723: push   %edi
  0xa7572724: mov    %ebp,0x148(%edi)
  0xa757272a: mov    %eax,0x140(%edi)
  0xa7572730: call   0xb6e5f012
  0xa7572735: add    $0x4,%esp
  0xa7572738: push   %eax
  0xa7572739: mov    %esp,%eax
  0xa757273b: shr    $0xc,%eax
  0xa757273e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572745: cmp    %eax,%edi
  0xa7572747: je     0xa757275e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757274d: push   $0xb74acf8c
  0xa7572752: call   0xa7572757
  0xa7572757: pusha  
  0xa7572758: call   0xb6ff5f32
  0xa757275d: hlt    
  0xa757275e: pop    %eax
  0xa757275f: movl   $0x0,0x140(%edi)
  0xa7572769: movl   $0x0,0x148(%edi)
  0xa7572773: movl   $0x0,0x144(%edi)
  0xa757277d: cmpl   $0x0,0x4(%edi)
  0xa7572784: jne    0xa7556400
  0xa757278a: mov    -0x1c(%ebp),%esi
  0xa757278d: mov    -0x18(%ebp),%edi
  0xa7572790: ret    
  0xa7572791: push   $0xb7302e8b
  0xa7572796: call   0xa757279b
  0xa757279b: pusha  
  0xa757279c: call   0xb6ff5f32
  0xa75727a1: hlt    
  0xa75727a2: cmpl   $0x0,0x4(%ecx)
  0xa75727a9: jne    0xa75726e6
  0xa75727af: add    $0x8,%ecx
  0xa75727b2: cmp    %ebx,%ecx
  0xa75727b4: jne    0xa75727a2
  0xa75727b6: cmpb   $0x0,0xb78c1e7e
  0xa75727bd: je     0xa7572806
  0xa75727c3: sub    $0x8,%esp
  0xa75727c6: fstpl  (%esp)
  0xa75727c9: mov    %esp,%ebx
  0xa75727cb: shr    $0xc,%ebx
  0xa75727ce: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa75727d5: mov    -0xc(%ebp),%ecx
  0xa75727d8: push   %ecx
  0xa75727d9: push   %ebx
  0xa75727da: cmpl   $0x0,-0x8(%ebp)
  0xa75727e1: je     0xa75727f8
  0xa75727e7: push   $0xb7449b18
  0xa75727ec: call   0xa75727f1
  0xa75727f1: pusha  
  0xa75727f2: call   0xb6ff5f32
  0xa75727f7: hlt    
  0xa75727f8: call   0xb7175974
  0xa75727fd: add    $0x8,%esp
  0xa7572800: fldl   (%esp)
  0xa7572803: add    $0x8,%esp
  0xa7572806: mov    -0x4(%ebp),%ebx
  0xa7572809: mov    %ebp,%esp
  0xa757280b: pop    %ebp
  0xa757280c: pop    %esi
  0xa757280d: mov    %ebx,%esp
  0xa757280f: sub    $0x8,%esp
  0xa7572812: fstpl  (%esp)
  0xa7572815: vmovsd (%esp),%xmm0
  0xa757281a: add    $0x8,%esp
  0xa757281d: jmp    *%esi
  0xa757281f: push   $0xb7302e8b
  0xa7572824: call   0xa7572829
  0xa7572829: pusha  
  0xa757282a: call   0xb6ff5f32
  0xa757282f: hlt    
  0xa7572830: int3   
  0xa7572831: int3   
  0xa7572832: int3   
  0xa7572833: int3   
  0xa7572834: int3   
  0xa7572835: int3   
  0xa7572836: int3   
  0xa7572837: int3   
  0xa7572838: int3   
  0xa7572839: int3   
  0xa757283a: int3   
  0xa757283b: int3   
  0xa757283c: int3   
  0xa757283d: int3   
  0xa757283e: int3   
  0xa757283f: int3   

----------------------------------------------------------------------
areturn  176 areturn  [0xa7572860, 0xa7572ba0]  832 bytes

  0xa7572860: pop    %eax
  0xa7572861: mov    %esp,%ecx
  0xa7572863: shr    $0xc,%ecx
  0xa7572866: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa757286d: mov    0x1a5(%ecx),%bl
  0xa7572873: mov    %ebx,%edi
  0xa7572875: movb   $0x0,0x1a5(%ecx)
  0xa757287c: mov    -0xc(%ebp),%ebx
  0xa757287f: mov    0x14(%ebx),%ecx
  0xa7572882: test   $0x20,%ecx
  0xa7572888: je     0xa7572a47
  0xa757288e: mov    %edi,%ecx
  0xa7572890: test   $0xff,%cl
  0xa7572893: jne    0xa7572b22
  0xa7572899: push   %eax
  0xa757289a: lea    -0x28(%ebp),%edx
  0xa757289d: mov    0x4(%edx),%eax
  0xa75728a0: test   %eax,%eax
  0xa75728a2: jne    0xa7572965
  0xa75728a8: pop    %eax
  0xa75728a9: emms   
  0xa75728ab: call   0xa75728b5
  0xa75728b0: jmp    0xa7572954
  0xa75728b5: lea    0x4(%esp),%eax
  0xa75728b9: cmpl   $0x0,-0x8(%ebp)
  0xa75728c0: je     0xa75728d7
  0xa75728c6: push   $0xb7449b58
  0xa75728cb: call   0xa75728d0
  0xa75728d0: pusha  
  0xa75728d1: call   0xb6ff5f32
  0xa75728d6: hlt    
  0xa75728d7: mov    %esi,-0x1c(%ebp)
  0xa75728da: mov    %esp,%edi
  0xa75728dc: shr    $0xc,%edi
  0xa75728df: mov    -0x4871aba0(,%edi,4),%edi
  0xa75728e6: push   %edi
  0xa75728e7: mov    %ebp,0x148(%edi)
  0xa75728ed: mov    %eax,0x140(%edi)
  0xa75728f3: call   0xb6e5f012
  0xa75728f8: add    $0x4,%esp
  0xa75728fb: push   %eax
  0xa75728fc: mov    %esp,%eax
  0xa75728fe: shr    $0xc,%eax
  0xa7572901: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572908: cmp    %eax,%edi
  0xa757290a: je     0xa7572921
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7572910: push   $0xb74acf8c
  0xa7572915: call   0xa757291a
  0xa757291a: pusha  
  0xa757291b: call   0xb6ff5f32
  0xa7572920: hlt    
  0xa7572921: pop    %eax
  0xa7572922: movl   $0x0,0x140(%edi)
  0xa757292c: movl   $0x0,0x148(%edi)
  0xa7572936: movl   $0x0,0x144(%edi)
  0xa7572940: cmpl   $0x0,0x4(%edi)
  0xa7572947: jne    0xa7556400
  0xa757294d: mov    -0x1c(%ebp),%esi
  0xa7572950: mov    -0x18(%ebp),%edi
  0xa7572953: ret    
  0xa7572954: push   $0xb7302e8b
  0xa7572959: call   0xa757295e
  0xa757295e: pusha  
  0xa757295f: call   0xb6ff5f32
  0xa7572964: hlt    
  0xa7572965: mov    %esi,-0x1c(%ebp)
  0xa7572968: lea    (%edx),%eax
  0xa757296a: mov    0x4(%edx),%ecx
  0xa757296d: movl   $0x0,0x4(%edx)
  0xa7572974: mov    (%ecx),%ebx
  0xa7572976: and    $0x7,%ebx
  0xa7572979: cmp    $0x5,%ebx
  0xa757297c: je     0xa7572a43
  0xa7572982: mov    (%eax),%ebx
  0xa7572984: test   %ebx,%ebx
  0xa7572986: je     0xa7572a43
  0xa757298c: lock cmpxchg %ebx,(%ecx)
  0xa7572990: je     0xa7572a43
  0xa7572996: mov    %ecx,0x4(%edx)
  0xa7572999: call   0xa75729a3
  0xa757299e: jmp    0xa7572a43
  0xa75729a3: push   %edx
  0xa75729a4: lea    0x8(%esp),%eax
  0xa75729a8: cmpl   $0x0,-0x8(%ebp)
  0xa75729af: je     0xa75729c6
  0xa75729b5: push   $0xb7449b58
  0xa75729ba: call   0xa75729bf
  0xa75729bf: pusha  
  0xa75729c0: call   0xb6ff5f32
  0xa75729c5: hlt    
  0xa75729c6: mov    %esi,-0x1c(%ebp)
  0xa75729c9: mov    %esp,%edi
  0xa75729cb: shr    $0xc,%edi
  0xa75729ce: mov    -0x4871aba0(,%edi,4),%edi
  0xa75729d5: push   %edi
  0xa75729d6: mov    %ebp,0x148(%edi)
  0xa75729dc: mov    %eax,0x140(%edi)
  0xa75729e2: call   0xb6e5ed36
  0xa75729e7: add    $0x8,%esp
  0xa75729ea: push   %eax
  0xa75729eb: mov    %esp,%eax
  0xa75729ed: shr    $0xc,%eax
  0xa75729f0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75729f7: cmp    %eax,%edi
  0xa75729f9: je     0xa7572a10
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75729ff: push   $0xb74acf8c
  0xa7572a04: call   0xa7572a09
  0xa7572a09: pusha  
  0xa7572a0a: call   0xb6ff5f32
  0xa7572a0f: hlt    
  0xa7572a10: pop    %eax
  0xa7572a11: movl   $0x0,0x140(%edi)
  0xa7572a1b: movl   $0x0,0x148(%edi)
  0xa7572a25: movl   $0x0,0x144(%edi)
  0xa7572a2f: cmpl   $0x0,0x4(%edi)
  0xa7572a36: jne    0xa7556400
  0xa7572a3c: mov    -0x1c(%ebp),%esi
  0xa7572a3f: mov    -0x18(%ebp),%edi
  0xa7572a42: ret    
  0xa7572a43: mov    -0x1c(%ebp),%esi
  0xa7572a46: pop    %eax
  0xa7572a47: mov    -0x20(%ebp),%ecx
  0xa7572a4a: lea    -0x20(%ebp),%ebx
  0xa7572a4d: jmp    0xa7572b1e
  0xa7572a52: emms   
  0xa7572a54: call   0xa7572a5e
  0xa7572a59: jmp    0xa7572afd
  0xa7572a5e: lea    0x4(%esp),%eax
  0xa7572a62: cmpl   $0x0,-0x8(%ebp)
  0xa7572a69: je     0xa7572a80
  0xa7572a6f: push   $0xb7449b58
  0xa7572a74: call   0xa7572a79
  0xa7572a79: pusha  
  0xa7572a7a: call   0xb6ff5f32
  0xa7572a7f: hlt    
  0xa7572a80: mov    %esi,-0x1c(%ebp)
  0xa7572a83: mov    %esp,%edi
  0xa7572a85: shr    $0xc,%edi
  0xa7572a88: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572a8f: push   %edi
  0xa7572a90: mov    %ebp,0x148(%edi)
  0xa7572a96: mov    %eax,0x140(%edi)
  0xa7572a9c: call   0xb6e5f012
  0xa7572aa1: add    $0x4,%esp
  0xa7572aa4: push   %eax
  0xa7572aa5: mov    %esp,%eax
  0xa7572aa7: shr    $0xc,%eax
  0xa7572aaa: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572ab1: cmp    %eax,%edi
  0xa7572ab3: je     0xa7572aca
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7572ab9: push   $0xb74acf8c
  0xa7572abe: call   0xa7572ac3
  0xa7572ac3: pusha  
  0xa7572ac4: call   0xb6ff5f32
  0xa7572ac9: hlt    
  0xa7572aca: pop    %eax
  0xa7572acb: movl   $0x0,0x140(%edi)
  0xa7572ad5: movl   $0x0,0x148(%edi)
  0xa7572adf: movl   $0x0,0x144(%edi)
  0xa7572ae9: cmpl   $0x0,0x4(%edi)
  0xa7572af0: jne    0xa7556400
  0xa7572af6: mov    -0x1c(%ebp),%esi
  0xa7572af9: mov    -0x18(%ebp),%edi
  0xa7572afc: ret    
  0xa7572afd: push   $0xb7302e8b
  0xa7572b02: call   0xa7572b07
  0xa7572b07: pusha  
  0xa7572b08: call   0xb6ff5f32
  0xa7572b0d: hlt    
  0xa7572b0e: cmpl   $0x0,0x4(%ecx)
  0xa7572b15: jne    0xa7572a52
  0xa7572b1b: add    $0x8,%ecx
  0xa7572b1e: cmp    %ebx,%ecx
  0xa7572b20: jne    0xa7572b0e
  0xa7572b22: cmpb   $0x0,0xb78c1e7e
  0xa7572b29: je     0xa7572b68
  0xa7572b2f: push   %eax
  0xa7572b30: mov    %esp,%ebx
  0xa7572b32: shr    $0xc,%ebx
  0xa7572b35: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7572b3c: mov    -0xc(%ebp),%ecx
  0xa7572b3f: push   %ecx
  0xa7572b40: push   %ebx
  0xa7572b41: cmpl   $0x0,-0x8(%ebp)
  0xa7572b48: je     0xa7572b5f
  0xa7572b4e: push   $0xb7449b18
  0xa7572b53: call   0xa7572b58
  0xa7572b58: pusha  
  0xa7572b59: call   0xb6ff5f32
  0xa7572b5e: hlt    
  0xa7572b5f: call   0xb7175974
  0xa7572b64: add    $0x8,%esp
  0xa7572b67: pop    %eax
  0xa7572b68: mov    -0x4(%ebp),%ebx
  0xa7572b6b: mov    %ebp,%esp
  0xa7572b6d: pop    %ebp
  0xa7572b6e: pop    %esi
  0xa7572b6f: mov    %ebx,%esp
  0xa7572b71: jmp    *%esi
  0xa7572b73: push   $0xb7302e8b
  0xa7572b78: call   0xa7572b7d
  0xa7572b7d: pusha  
  0xa7572b7e: call   0xb6ff5f32
  0xa7572b83: hlt    
  0xa7572b84: int3   
  0xa7572b85: int3   
  0xa7572b86: int3   
  0xa7572b87: int3   
  0xa7572b88: int3   
  0xa7572b89: int3   
  0xa7572b8a: int3   
  0xa7572b8b: int3   
  0xa7572b8c: int3   
  0xa7572b8d: int3   
  0xa7572b8e: int3   
  0xa7572b8f: int3   
  0xa7572b90: int3   
  0xa7572b91: int3   
  0xa7572b92: int3   
  0xa7572b93: int3   
  0xa7572b94: int3   
  0xa7572b95: int3   
  0xa7572b96: int3   
  0xa7572b97: int3   
  0xa7572b98: int3   
  0xa7572b99: int3   
  0xa7572b9a: int3   
  0xa7572b9b: int3   
  0xa7572b9c: int3   
  0xa7572b9d: int3   
  0xa7572b9e: int3   
  0xa7572b9f: int3   

----------------------------------------------------------------------
return  177 return  [0xa7572bc0, 0xa7572f20]  864 bytes

  0xa7572bc0: sub    $0x4,%esp
  0xa7572bc3: fstps  (%esp)
  0xa7572bc6: jmp    0xa7572be4
  0xa7572bcb: sub    $0x8,%esp
  0xa7572bce: fstpl  (%esp)
  0xa7572bd1: jmp    0xa7572be4
  0xa7572bd6: push   %edx
  0xa7572bd7: push   %eax
  0xa7572bd8: jmp    0xa7572be4
  0xa7572bdd: push   %eax
  0xa7572bde: jmp    0xa7572be4
  0xa7572be3: push   %eax
  0xa7572be4: mov    %esp,%ecx
  0xa7572be6: shr    $0xc,%ecx
  0xa7572be9: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7572bf0: mov    0x1a5(%ecx),%bl
  0xa7572bf6: mov    %ebx,%edi
  0xa7572bf8: movb   $0x0,0x1a5(%ecx)
  0xa7572bff: mov    -0xc(%ebp),%ebx
  0xa7572c02: mov    0x14(%ebx),%ecx
  0xa7572c05: test   $0x20,%ecx
  0xa7572c0b: je     0xa7572dc7
  0xa7572c11: mov    %edi,%ecx
  0xa7572c13: test   $0xff,%cl
  0xa7572c16: jne    0xa7572ea2
  0xa7572c1c: lea    -0x28(%ebp),%edx
  0xa7572c1f: mov    0x4(%edx),%eax
  0xa7572c22: test   %eax,%eax
  0xa7572c24: jne    0xa7572ce6
  0xa7572c2a: emms   
  0xa7572c2c: call   0xa7572c36
  0xa7572c31: jmp    0xa7572cd5
  0xa7572c36: lea    0x4(%esp),%eax
  0xa7572c3a: cmpl   $0x0,-0x8(%ebp)
  0xa7572c41: je     0xa7572c58
  0xa7572c47: push   $0xb7449b58
  0xa7572c4c: call   0xa7572c51
  0xa7572c51: pusha  
  0xa7572c52: call   0xb6ff5f32
  0xa7572c57: hlt    
  0xa7572c58: mov    %esi,-0x1c(%ebp)
  0xa7572c5b: mov    %esp,%edi
  0xa7572c5d: shr    $0xc,%edi
  0xa7572c60: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572c67: push   %edi
  0xa7572c68: mov    %ebp,0x148(%edi)
  0xa7572c6e: mov    %eax,0x140(%edi)
  0xa7572c74: call   0xb6e5f012
  0xa7572c79: add    $0x4,%esp
  0xa7572c7c: push   %eax
  0xa7572c7d: mov    %esp,%eax
  0xa7572c7f: shr    $0xc,%eax
  0xa7572c82: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572c89: cmp    %eax,%edi
  0xa7572c8b: je     0xa7572ca2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7572c91: push   $0xb74acf8c
  0xa7572c96: call   0xa7572c9b
  0xa7572c9b: pusha  
  0xa7572c9c: call   0xb6ff5f32
  0xa7572ca1: hlt    
  0xa7572ca2: pop    %eax
  0xa7572ca3: movl   $0x0,0x140(%edi)
  0xa7572cad: movl   $0x0,0x148(%edi)
  0xa7572cb7: movl   $0x0,0x144(%edi)
  0xa7572cc1: cmpl   $0x0,0x4(%edi)
  0xa7572cc8: jne    0xa7556400
  0xa7572cce: mov    -0x1c(%ebp),%esi
  0xa7572cd1: mov    -0x18(%ebp),%edi
  0xa7572cd4: ret    
  0xa7572cd5: push   $0xb7302e8b
  0xa7572cda: call   0xa7572cdf
  0xa7572cdf: pusha  
  0xa7572ce0: call   0xb6ff5f32
  0xa7572ce5: hlt    
  0xa7572ce6: mov    %esi,-0x1c(%ebp)
  0xa7572ce9: lea    (%edx),%eax
  0xa7572ceb: mov    0x4(%edx),%ecx
  0xa7572cee: movl   $0x0,0x4(%edx)
  0xa7572cf5: mov    (%ecx),%ebx
  0xa7572cf7: and    $0x7,%ebx
  0xa7572cfa: cmp    $0x5,%ebx
  0xa7572cfd: je     0xa7572dc4
  0xa7572d03: mov    (%eax),%ebx
  0xa7572d05: test   %ebx,%ebx
  0xa7572d07: je     0xa7572dc4
  0xa7572d0d: lock cmpxchg %ebx,(%ecx)
  0xa7572d11: je     0xa7572dc4
  0xa7572d17: mov    %ecx,0x4(%edx)
  0xa7572d1a: call   0xa7572d24
  0xa7572d1f: jmp    0xa7572dc4
  0xa7572d24: push   %edx
  0xa7572d25: lea    0x8(%esp),%eax
  0xa7572d29: cmpl   $0x0,-0x8(%ebp)
  0xa7572d30: je     0xa7572d47
  0xa7572d36: push   $0xb7449b58
  0xa7572d3b: call   0xa7572d40
  0xa7572d40: pusha  
  0xa7572d41: call   0xb6ff5f32
  0xa7572d46: hlt    
  0xa7572d47: mov    %esi,-0x1c(%ebp)
  0xa7572d4a: mov    %esp,%edi
  0xa7572d4c: shr    $0xc,%edi
  0xa7572d4f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572d56: push   %edi
  0xa7572d57: mov    %ebp,0x148(%edi)
  0xa7572d5d: mov    %eax,0x140(%edi)
  0xa7572d63: call   0xb6e5ed36
  0xa7572d68: add    $0x8,%esp
  0xa7572d6b: push   %eax
  0xa7572d6c: mov    %esp,%eax
  0xa7572d6e: shr    $0xc,%eax
  0xa7572d71: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572d78: cmp    %eax,%edi
  0xa7572d7a: je     0xa7572d91
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7572d80: push   $0xb74acf8c
  0xa7572d85: call   0xa7572d8a
  0xa7572d8a: pusha  
  0xa7572d8b: call   0xb6ff5f32
  0xa7572d90: hlt    
  0xa7572d91: pop    %eax
  0xa7572d92: movl   $0x0,0x140(%edi)
  0xa7572d9c: movl   $0x0,0x148(%edi)
  0xa7572da6: movl   $0x0,0x144(%edi)
  0xa7572db0: cmpl   $0x0,0x4(%edi)
  0xa7572db7: jne    0xa7556400
  0xa7572dbd: mov    -0x1c(%ebp),%esi
  0xa7572dc0: mov    -0x18(%ebp),%edi
  0xa7572dc3: ret    
  0xa7572dc4: mov    -0x1c(%ebp),%esi
  0xa7572dc7: mov    -0x20(%ebp),%ecx
  0xa7572dca: lea    -0x20(%ebp),%ebx
  0xa7572dcd: jmp    0xa7572e9e
  0xa7572dd2: emms   
  0xa7572dd4: call   0xa7572dde
  0xa7572dd9: jmp    0xa7572e7d
  0xa7572dde: lea    0x4(%esp),%eax
  0xa7572de2: cmpl   $0x0,-0x8(%ebp)
  0xa7572de9: je     0xa7572e00
  0xa7572def: push   $0xb7449b58
  0xa7572df4: call   0xa7572df9
  0xa7572df9: pusha  
  0xa7572dfa: call   0xb6ff5f32
  0xa7572dff: hlt    
  0xa7572e00: mov    %esi,-0x1c(%ebp)
  0xa7572e03: mov    %esp,%edi
  0xa7572e05: shr    $0xc,%edi
  0xa7572e08: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572e0f: push   %edi
  0xa7572e10: mov    %ebp,0x148(%edi)
  0xa7572e16: mov    %eax,0x140(%edi)
  0xa7572e1c: call   0xb6e5f012
  0xa7572e21: add    $0x4,%esp
  0xa7572e24: push   %eax
  0xa7572e25: mov    %esp,%eax
  0xa7572e27: shr    $0xc,%eax
  0xa7572e2a: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572e31: cmp    %eax,%edi
  0xa7572e33: je     0xa7572e4a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7572e39: push   $0xb74acf8c
  0xa7572e3e: call   0xa7572e43
  0xa7572e43: pusha  
  0xa7572e44: call   0xb6ff5f32
  0xa7572e49: hlt    
  0xa7572e4a: pop    %eax
  0xa7572e4b: movl   $0x0,0x140(%edi)
  0xa7572e55: movl   $0x0,0x148(%edi)
  0xa7572e5f: movl   $0x0,0x144(%edi)
  0xa7572e69: cmpl   $0x0,0x4(%edi)
  0xa7572e70: jne    0xa7556400
  0xa7572e76: mov    -0x1c(%ebp),%esi
  0xa7572e79: mov    -0x18(%ebp),%edi
  0xa7572e7c: ret    
  0xa7572e7d: push   $0xb7302e8b
  0xa7572e82: call   0xa7572e87
  0xa7572e87: pusha  
  0xa7572e88: call   0xb6ff5f32
  0xa7572e8d: hlt    
  0xa7572e8e: cmpl   $0x0,0x4(%ecx)
  0xa7572e95: jne    0xa7572dd2
  0xa7572e9b: add    $0x8,%ecx
  0xa7572e9e: cmp    %ebx,%ecx
  0xa7572ea0: jne    0xa7572e8e
  0xa7572ea2: cmpb   $0x0,0xb78c1e7e
  0xa7572ea9: je     0xa7572ee6
  0xa7572eaf: mov    %esp,%ebx
  0xa7572eb1: shr    $0xc,%ebx
  0xa7572eb4: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa7572ebb: mov    -0xc(%ebp),%ecx
  0xa7572ebe: push   %ecx
  0xa7572ebf: push   %ebx
  0xa7572ec0: cmpl   $0x0,-0x8(%ebp)
  0xa7572ec7: je     0xa7572ede
  0xa7572ecd: push   $0xb7449b18
  0xa7572ed2: call   0xa7572ed7
  0xa7572ed7: pusha  
  0xa7572ed8: call   0xb6ff5f32
  0xa7572edd: hlt    
  0xa7572ede: call   0xb7175974
  0xa7572ee3: add    $0x8,%esp
  0xa7572ee6: mov    -0x4(%ebp),%ebx
  0xa7572ee9: mov    %ebp,%esp
  0xa7572eeb: pop    %ebp
  0xa7572eec: pop    %esi
  0xa7572eed: mov    %ebx,%esp
  0xa7572eef: jmp    *%esi
  0xa7572ef1: push   $0xb7302e8b
  0xa7572ef6: call   0xa7572efb
  0xa7572efb: pusha  
  0xa7572efc: call   0xb6ff5f32
  0xa7572f01: hlt    
  0xa7572f02: nop
  0xa7572f03: nop
  0xa7572f04: int3   
  0xa7572f05: int3   
  0xa7572f06: int3   
  0xa7572f07: int3   
  0xa7572f08: int3   
  0xa7572f09: int3   
  0xa7572f0a: int3   
  0xa7572f0b: int3   
  0xa7572f0c: int3   
  0xa7572f0d: int3   
  0xa7572f0e: int3   
  0xa7572f0f: int3   
  0xa7572f10: int3   
  0xa7572f11: int3   
  0xa7572f12: int3   
  0xa7572f13: int3   
  0xa7572f14: int3   
  0xa7572f15: int3   
  0xa7572f16: int3   
  0xa7572f17: int3   
  0xa7572f18: int3   
  0xa7572f19: int3   
  0xa7572f1a: int3   
  0xa7572f1b: int3   
  0xa7572f1c: int3   
  0xa7572f1d: int3   
  0xa7572f1e: int3   
  0xa7572f1f: int3   

----------------------------------------------------------------------
getstatic  178 getstatic  [0xa7572f40, 0xa7573140]  512 bytes

  0xa7572f40: sub    $0x4,%esp
  0xa7572f43: fstps  (%esp)
  0xa7572f46: jmp    0xa7572f64
  0xa7572f4b: sub    $0x8,%esp
  0xa7572f4e: fstpl  (%esp)
  0xa7572f51: jmp    0xa7572f64
  0xa7572f56: push   %edx
  0xa7572f57: push   %eax
  0xa7572f58: jmp    0xa7572f64
  0xa7572f5d: push   %eax
  0xa7572f5e: jmp    0xa7572f64
  0xa7572f63: push   %eax
  0xa7572f64: movzwl 0x1(%esi),%edx
  0xa7572f68: mov    -0x14(%ebp),%ecx
  0xa7572f6b: shl    $0x2,%edx
  0xa7572f6e: mov    0x8(%ecx,%edx,4),%ebx
  0xa7572f72: shr    $0x10,%ebx
  0xa7572f75: and    $0xff,%ebx
  0xa7572f7b: cmp    $0xb2,%ebx
  0xa7572f81: je     0xa7573040
  0xa7572f87: mov    $0xb2,%ebx
  0xa7572f8c: call   0xa7572f96
  0xa7572f91: jmp    0xa7573036
  0xa7572f96: push   %ebx
  0xa7572f97: lea    0x8(%esp),%eax
  0xa7572f9b: cmpl   $0x0,-0x8(%ebp)
  0xa7572fa2: je     0xa7572fb9
  0xa7572fa8: push   $0xb7449b58
  0xa7572fad: call   0xa7572fb2
  0xa7572fb2: pusha  
  0xa7572fb3: call   0xb6ff5f32
  0xa7572fb8: hlt    
  0xa7572fb9: mov    %esi,-0x1c(%ebp)
  0xa7572fbc: mov    %esp,%edi
  0xa7572fbe: shr    $0xc,%edi
  0xa7572fc1: mov    -0x4871aba0(,%edi,4),%edi
  0xa7572fc8: push   %edi
  0xa7572fc9: mov    %ebp,0x148(%edi)
  0xa7572fcf: mov    %eax,0x140(%edi)
  0xa7572fd5: call   0xb6e5e508
  0xa7572fda: add    $0x8,%esp
  0xa7572fdd: push   %eax
  0xa7572fde: mov    %esp,%eax
  0xa7572fe0: shr    $0xc,%eax
  0xa7572fe3: mov    -0x4871aba0(,%eax,4),%eax
  0xa7572fea: cmp    %eax,%edi
  0xa7572fec: je     0xa7573003
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7572ff2: push   $0xb74acf8c
  0xa7572ff7: call   0xa7572ffc
  0xa7572ffc: pusha  
  0xa7572ffd: call   0xb6ff5f32
  0xa7573002: hlt    
  0xa7573003: pop    %eax
  0xa7573004: movl   $0x0,0x140(%edi)
  0xa757300e: movl   $0x0,0x148(%edi)
  0xa7573018: movl   $0x0,0x144(%edi)
  0xa7573022: cmpl   $0x0,0x4(%edi)
  0xa7573029: jne    0xa7556400
  0xa757302f: mov    -0x1c(%ebp),%esi
  0xa7573032: mov    -0x18(%ebp),%edi
  0xa7573035: ret    
  0xa7573036: movzwl 0x1(%esi),%edx
  0xa757303a: mov    -0x14(%ebp),%ecx
  0xa757303d: shl    $0x2,%edx
  0xa7573040: mov    0x10(%ecx,%edx,4),%ebx
  0xa7573044: mov    0x14(%ecx,%edx,4),%eax
  0xa7573048: mov    0xc(%ecx,%edx,4),%ecx
  0xa757304c: mov    0x3c(%ecx),%ecx
  0xa757304f: shr    $0x1c,%eax
  0xa7573052: and    $0xf,%eax
  0xa7573055: jne    0xa7573065
  0xa757305b: movsbl (%ecx,%ebx,1),%eax
  0xa757305f: push   %eax
  0xa7573060: jmp    0xa7573119
  0xa7573065: cmp    $0x1,%eax
  0xa7573068: jne    0xa7573078
  0xa757306e: movsbl (%ecx,%ebx,1),%eax
  0xa7573072: push   %eax
  0xa7573073: jmp    0xa7573119
  0xa7573078: cmp    $0x4,%eax
  0xa757307b: jne    0xa757308a
  0xa7573081: mov    (%ecx,%ebx,1),%eax
  0xa7573084: push   %eax
  0xa7573085: jmp    0xa7573119
  0xa757308a: cmp    $0x8,%eax
  0xa757308d: jne    0xa757309c
  0xa7573093: mov    (%ecx,%ebx,1),%eax
  0xa7573096: push   %eax
  0xa7573097: jmp    0xa7573119
  0xa757309c: cmp    $0x2,%eax
  0xa757309f: jne    0xa75730af
  0xa75730a5: movzwl (%ecx,%ebx,1),%eax
  0xa75730a9: push   %eax
  0xa75730aa: jmp    0xa7573119
  0xa75730af: cmp    $0x3,%eax
  0xa75730b2: jne    0xa75730c2
  0xa75730b8: movswl (%ecx,%ebx,1),%eax
  0xa75730bc: push   %eax
  0xa75730bd: jmp    0xa7573119
  0xa75730c2: cmp    $0x5,%eax
  0xa75730c5: jne    0xa75730dd
  0xa75730cb: fildll (%ecx,%ebx,1)
  0xa75730ce: sub    $0x8,%esp
  0xa75730d1: fistpll (%esp)
  0xa75730d4: pop    %eax
  0xa75730d5: pop    %edx
  0xa75730d6: push   %edx
  0xa75730d7: push   %eax
  0xa75730d8: jmp    0xa7573119
  0xa75730dd: cmp    $0x6,%eax
  0xa75730e0: jne    0xa75730f4
  0xa75730e6: flds   (%ecx,%ebx,1)
  0xa75730e9: sub    $0x4,%esp
  0xa75730ec: fstps  (%esp)
  0xa75730ef: jmp    0xa7573119
  0xa75730f4: cmp    $0x7,%eax
  0xa75730f7: jne    0xa7573108
  0xa75730fd: fldl   (%ecx,%ebx,1)
  0xa7573100: sub    $0x8,%esp
  0xa7573103: fstpl  (%esp)
  0xa7573106: jmp    0xa7573119
  0xa7573108: push   $0xb7563ba8
  0xa757310d: call   0xa7573112
  0xa7573112: pusha  
  0xa7573113: call   0xb6ff5f32
  0xa7573118: hlt    
  0xa7573119: movzbl 0x3(%esi),%ebx
  0xa757311d: add    $0x3,%esi
  0xa7573120: jmp    *-0x48722ae0(,%ebx,4)
  0xa7573127: nop
  0xa7573128: int3   
  0xa7573129: int3   
  0xa757312a: int3   
  0xa757312b: int3   
  0xa757312c: int3   
  0xa757312d: int3   
  0xa757312e: int3   
  0xa757312f: int3   
  0xa7573130: int3   
  0xa7573131: int3   
  0xa7573132: int3   
  0xa7573133: int3   
  0xa7573134: int3   
  0xa7573135: int3   
  0xa7573136: int3   
  0xa7573137: int3   
  0xa7573138: int3   
  0xa7573139: int3   
  0xa757313a: int3   
  0xa757313b: int3   
  0xa757313c: int3   
  0xa757313d: int3   
  0xa757313e: int3   
  0xa757313f: int3   

----------------------------------------------------------------------
putstatic  179 putstatic  [0xa7573160, 0xa75733a0]  576 bytes

  0xa7573160: sub    $0x4,%esp
  0xa7573163: fstps  (%esp)
  0xa7573166: jmp    0xa7573184
  0xa757316b: sub    $0x8,%esp
  0xa757316e: fstpl  (%esp)
  0xa7573171: jmp    0xa7573184
  0xa7573176: push   %edx
  0xa7573177: push   %eax
  0xa7573178: jmp    0xa7573184
  0xa757317d: push   %eax
  0xa757317e: jmp    0xa7573184
  0xa7573183: push   %eax
  0xa7573184: movzwl 0x1(%esi),%edx
  0xa7573188: mov    -0x14(%ebp),%ecx
  0xa757318b: shl    $0x2,%edx
  0xa757318e: mov    0x8(%ecx,%edx,4),%ebx
  0xa7573192: shr    $0x18,%ebx
  0xa7573195: and    $0xff,%ebx
  0xa757319b: cmp    $0xb3,%ebx
  0xa75731a1: je     0xa7573260
  0xa75731a7: mov    $0xb3,%ebx
  0xa75731ac: call   0xa75731b6
  0xa75731b1: jmp    0xa7573256
  0xa75731b6: push   %ebx
  0xa75731b7: lea    0x8(%esp),%eax
  0xa75731bb: cmpl   $0x0,-0x8(%ebp)
  0xa75731c2: je     0xa75731d9
  0xa75731c8: push   $0xb7449b58
  0xa75731cd: call   0xa75731d2
  0xa75731d2: pusha  
  0xa75731d3: call   0xb6ff5f32
  0xa75731d8: hlt    
  0xa75731d9: mov    %esi,-0x1c(%ebp)
  0xa75731dc: mov    %esp,%edi
  0xa75731de: shr    $0xc,%edi
  0xa75731e1: mov    -0x4871aba0(,%edi,4),%edi
  0xa75731e8: push   %edi
  0xa75731e9: mov    %ebp,0x148(%edi)
  0xa75731ef: mov    %eax,0x140(%edi)
  0xa75731f5: call   0xb6e5e508
  0xa75731fa: add    $0x8,%esp
  0xa75731fd: push   %eax
  0xa75731fe: mov    %esp,%eax
  0xa7573200: shr    $0xc,%eax
  0xa7573203: mov    -0x4871aba0(,%eax,4),%eax
  0xa757320a: cmp    %eax,%edi
  0xa757320c: je     0xa7573223
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7573212: push   $0xb74acf8c
  0xa7573217: call   0xa757321c
  0xa757321c: pusha  
  0xa757321d: call   0xb6ff5f32
  0xa7573222: hlt    
  0xa7573223: pop    %eax
  0xa7573224: movl   $0x0,0x140(%edi)
  0xa757322e: movl   $0x0,0x148(%edi)
  0xa7573238: movl   $0x0,0x144(%edi)
  0xa7573242: cmpl   $0x0,0x4(%edi)
  0xa7573249: jne    0xa7556400
  0xa757324f: mov    -0x1c(%ebp),%esi
  0xa7573252: mov    -0x18(%ebp),%edi
  0xa7573255: ret    
  0xa7573256: movzwl 0x1(%esi),%edx
  0xa757325a: mov    -0x14(%ebp),%ecx
  0xa757325d: shl    $0x2,%edx
  0xa7573260: mov    0x10(%ecx,%edx,4),%ebx
  0xa7573264: mov    0x14(%ecx,%edx,4),%eax
  0xa7573268: mov    0xc(%ecx,%edx,4),%ecx
  0xa757326c: mov    0x3c(%ecx),%ecx
  0xa757326f: mov    %eax,%edx
  0xa7573271: shr    $0x15,%edx
  0xa7573274: and    $0x1,%edx
  0xa7573277: shr    $0x1c,%eax
  0xa757327a: and    $0xf,%eax
  0xa757327d: jne    0xa757328c
  0xa7573283: pop    %eax
  0xa7573284: mov    %al,(%ecx,%ebx,1)
  0xa7573287: jmp    0xa757336b
  0xa757328c: cmp    $0x1,%eax
  0xa757328f: jne    0xa75732a1
  0xa7573295: pop    %eax
  0xa7573296: and    $0x1,%eax
  0xa7573299: mov    %al,(%ecx,%ebx,1)
  0xa757329c: jmp    0xa757336b
  0xa75732a1: cmp    $0x4,%eax
  0xa75732a4: jne    0xa75732b3
  0xa75732aa: pop    %eax
  0xa75732ab: mov    %eax,(%ecx,%ebx,1)
  0xa75732ae: jmp    0xa757336b
  0xa75732b3: cmp    $0x8,%eax
  0xa75732b6: jne    0xa75732d0
  0xa75732bc: pop    %eax
  0xa75732bd: mov    %eax,(%ecx,%ebx,1)
  0xa75732c0: shr    $0x9,%ecx
  0xa75732c3: movb   $0x0,0x688c7000(,%ecx,1)
  0xa75732cb: jmp    0xa757336b
  0xa75732d0: cmp    $0x2,%eax
  0xa75732d3: jne    0xa75732e3
  0xa75732d9: pop    %eax
  0xa75732da: mov    %ax,(%ecx,%ebx,1)
  0xa75732de: jmp    0xa757336b
  0xa75732e3: cmp    $0x3,%eax
  0xa75732e6: jne    0xa75732f6
  0xa75732ec: pop    %eax
  0xa75732ed: mov    %ax,(%ecx,%ebx,1)
  0xa75732f1: jmp    0xa757336b
  0xa75732f6: cmp    $0x5,%eax
  0xa75732f9: jne    0xa757332c
  0xa75732ff: test   %edx,%edx
  0xa7573301: je     0xa757331e
  0xa7573307: pop    %eax
  0xa7573308: pop    %edx
  0xa7573309: push   %edx
  0xa757330a: push   %eax
  0xa757330b: fildll (%esp)
  0xa757330e: fistpll (%ecx,%ebx,1)
  0xa7573311: add    $0x8,%esp
  0xa7573314: lock addl $0x0,(%esp)
  0xa7573319: jmp    0xa7573378
  0xa757331e: pop    %eax
  0xa757331f: pop    %edx
  0xa7573320: mov    %edx,0x4(%ecx,%ebx,1)
  0xa7573324: mov    %eax,(%ecx,%ebx,1)
  0xa7573327: jmp    0xa7573378
  0xa757332c: cmp    $0x6,%eax
  0xa757332f: jne    0xa7573343
  0xa7573335: flds   (%esp)
  0xa7573338: add    $0x4,%esp
  0xa757333b: fstps  (%ecx,%ebx,1)
  0xa757333e: jmp    0xa757336b
  0xa7573343: cmp    $0x7,%eax
  0xa7573346: jne    0xa757335a
  0xa757334c: fldl   (%esp)
  0xa757334f: add    $0x8,%esp
  0xa7573352: fstpl  (%ecx,%ebx,1)
  0xa7573355: jmp    0xa757336b
  0xa757335a: push   $0xb7563ba8
  0xa757335f: call   0xa7573364
  0xa7573364: pusha  
  0xa7573365: call   0xb6ff5f32
  0xa757336a: hlt    
  0xa757336b: test   %edx,%edx
  0xa757336d: je     0xa7573378
  0xa7573373: lock addl $0x0,(%esp)
  0xa7573378: movzbl 0x3(%esi),%ebx
  0xa757337c: add    $0x3,%esi
  0xa757337f: jmp    *-0x48722ae0(,%ebx,4)
  0xa7573386: nop
  0xa7573387: nop
  0xa7573388: int3   
  0xa7573389: int3   
  0xa757338a: int3   
  0xa757338b: int3   
  0xa757338c: int3   
  0xa757338d: int3   
  0xa757338e: int3   
  0xa757338f: int3   
  0xa7573390: int3   
  0xa7573391: int3   
  0xa7573392: int3   
  0xa7573393: int3   
  0xa7573394: int3   
  0xa7573395: int3   
  0xa7573396: int3   
  0xa7573397: int3   
  0xa7573398: int3   
  0xa7573399: int3   
  0xa757339a: int3   
  0xa757339b: int3   
  0xa757339c: int3   
  0xa757339d: int3   
  0xa757339e: int3   
  0xa757339f: int3   

----------------------------------------------------------------------
getfield  180 getfield  [0xa75733c0, 0xa7573700]  832 bytes

  0xa75733c0: sub    $0x4,%esp
  0xa75733c3: fstps  (%esp)
  0xa75733c6: jmp    0xa75733e4
  0xa75733cb: sub    $0x8,%esp
  0xa75733ce: fstpl  (%esp)
  0xa75733d1: jmp    0xa75733e4
  0xa75733d6: push   %edx
  0xa75733d7: push   %eax
  0xa75733d8: jmp    0xa75733e4
  0xa75733dd: push   %eax
  0xa75733de: jmp    0xa75733e4
  0xa75733e3: push   %eax
  0xa75733e4: movzwl 0x1(%esi),%edx
  0xa75733e8: mov    -0x14(%ebp),%ecx
  0xa75733eb: shl    $0x2,%edx
  0xa75733ee: mov    0x8(%ecx,%edx,4),%ebx
  0xa75733f2: shr    $0x10,%ebx
  0xa75733f5: and    $0xff,%ebx
  0xa75733fb: cmp    $0xb4,%ebx
  0xa7573401: je     0xa75734c0
  0xa7573407: mov    $0xb4,%ebx
  0xa757340c: call   0xa7573416
  0xa7573411: jmp    0xa75734b6
  0xa7573416: push   %ebx
  0xa7573417: lea    0x8(%esp),%eax
  0xa757341b: cmpl   $0x0,-0x8(%ebp)
  0xa7573422: je     0xa7573439
  0xa7573428: push   $0xb7449b58
  0xa757342d: call   0xa7573432
  0xa7573432: pusha  
  0xa7573433: call   0xb6ff5f32
  0xa7573438: hlt    
  0xa7573439: mov    %esi,-0x1c(%ebp)
  0xa757343c: mov    %esp,%edi
  0xa757343e: shr    $0xc,%edi
  0xa7573441: mov    -0x4871aba0(,%edi,4),%edi
  0xa7573448: push   %edi
  0xa7573449: mov    %ebp,0x148(%edi)
  0xa757344f: mov    %eax,0x140(%edi)
  0xa7573455: call   0xb6e5e508
  0xa757345a: add    $0x8,%esp
  0xa757345d: push   %eax
  0xa757345e: mov    %esp,%eax
  0xa7573460: shr    $0xc,%eax
  0xa7573463: mov    -0x4871aba0(,%eax,4),%eax
  0xa757346a: cmp    %eax,%edi
  0xa757346c: je     0xa7573483
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7573472: push   $0xb74acf8c
  0xa7573477: call   0xa757347c
  0xa757347c: pusha  
  0xa757347d: call   0xb6ff5f32
  0xa7573482: hlt    
  0xa7573483: pop    %eax
  0xa7573484: movl   $0x0,0x140(%edi)
  0xa757348e: movl   $0x0,0x148(%edi)
  0xa7573498: movl   $0x0,0x144(%edi)
  0xa75734a2: cmpl   $0x0,0x4(%edi)
  0xa75734a9: jne    0xa7556400
  0xa75734af: mov    -0x1c(%ebp),%esi
  0xa75734b2: mov    -0x18(%ebp),%edi
  0xa75734b5: ret    
  0xa75734b6: movzwl 0x1(%esi),%edx
  0xa75734ba: mov    -0x14(%ebp),%ecx
  0xa75734bd: shl    $0x2,%edx
  0xa75734c0: mov    0x10(%ecx,%edx,4),%ebx
  0xa75734c4: mov    0x14(%ecx,%edx,4),%eax
  0xa75734c8: pop    %ecx
  0xa75734c9: cmp    (%ecx),%eax
  0xa75734cb: shr    $0x1c,%eax
  0xa75734ce: and    $0xf,%eax
  0xa75734d1: jne    0xa757350c
  0xa75734d7: movsbl (%ecx,%ebx,1),%eax
  0xa75734db: push   %eax
  0xa75734dc: mov    $0xcc,%ecx
  0xa75734e1: movzbl (%esi),%ebx
  0xa75734e4: cmp    $0xb4,%ebx
  0xa75734ea: je     0xa7573505
  0xa75734ec: cmp    %ecx,%ebx
  0xa75734ee: je     0xa7573505
  0xa75734f4: push   $0xb75635ff
  0xa75734f9: call   0xa75734fe
  0xa75734fe: pusha  
  0xa75734ff: call   0xb6ff5f32
  0xa7573504: hlt    
  0xa7573505: mov    %cl,(%esi)
  0xa7573507: jmp    0xa75736ed
  0xa757350c: cmp    $0x1,%eax
  0xa757350f: jne    0xa757354a
  0xa7573515: movsbl (%ecx,%ebx,1),%eax
  0xa7573519: push   %eax
  0xa757351a: mov    $0xcc,%ecx
  0xa757351f: movzbl (%esi),%ebx
  0xa7573522: cmp    $0xb4,%ebx
  0xa7573528: je     0xa7573543
  0xa757352a: cmp    %ecx,%ebx
  0xa757352c: je     0xa7573543
  0xa7573532: push   $0xb75635ff
  0xa7573537: call   0xa757353c
  0xa757353c: pusha  
  0xa757353d: call   0xb6ff5f32
  0xa7573542: hlt    
  0xa7573543: mov    %cl,(%esi)
  0xa7573545: jmp    0xa75736ed
  0xa757354a: cmp    $0x4,%eax
  0xa757354d: jne    0xa7573587
  0xa7573553: mov    (%ecx,%ebx,1),%eax
  0xa7573556: push   %eax
  0xa7573557: mov    $0xd0,%ecx
  0xa757355c: movzbl (%esi),%ebx
  0xa757355f: cmp    $0xb4,%ebx
  0xa7573565: je     0xa7573580
  0xa7573567: cmp    %ecx,%ebx
  0xa7573569: je     0xa7573580
  0xa757356f: push   $0xb75635ff
  0xa7573574: call   0xa7573579
  0xa7573579: pusha  
  0xa757357a: call   0xb6ff5f32
  0xa757357f: hlt    
  0xa7573580: mov    %cl,(%esi)
  0xa7573582: jmp    0xa75736ed
  0xa7573587: cmp    $0x8,%eax
  0xa757358a: jne    0xa75735c4
  0xa7573590: mov    (%ecx,%ebx,1),%eax
  0xa7573593: push   %eax
  0xa7573594: mov    $0xcb,%ecx
  0xa7573599: movzbl (%esi),%ebx
  0xa757359c: cmp    $0xb4,%ebx
  0xa75735a2: je     0xa75735bd
  0xa75735a4: cmp    %ecx,%ebx
  0xa75735a6: je     0xa75735bd
  0xa75735ac: push   $0xb75635ff
  0xa75735b1: call   0xa75735b6
  0xa75735b6: pusha  
  0xa75735b7: call   0xb6ff5f32
  0xa75735bc: hlt    
  0xa75735bd: mov    %cl,(%esi)
  0xa75735bf: jmp    0xa75736ed
  0xa75735c4: cmp    $0x2,%eax
  0xa75735c7: jne    0xa7573602
  0xa75735cd: movzwl (%ecx,%ebx,1),%eax
  0xa75735d1: push   %eax
  0xa75735d2: mov    $0xcd,%ecx
  0xa75735d7: movzbl (%esi),%ebx
  0xa75735da: cmp    $0xb4,%ebx
  0xa75735e0: je     0xa75735fb
  0xa75735e2: cmp    %ecx,%ebx
  0xa75735e4: je     0xa75735fb
  0xa75735ea: push   $0xb75635ff
  0xa75735ef: call   0xa75735f4
  0xa75735f4: pusha  
  0xa75735f5: call   0xb6ff5f32
  0xa75735fa: hlt    
  0xa75735fb: mov    %cl,(%esi)
  0xa75735fd: jmp    0xa75736ed
  0xa7573602: cmp    $0x3,%eax
  0xa7573605: jne    0xa7573640
  0xa757360b: movswl (%ecx,%ebx,1),%eax
  0xa757360f: push   %eax
  0xa7573610: mov    $0xd2,%ecx
  0xa7573615: movzbl (%esi),%ebx
  0xa7573618: cmp    $0xb4,%ebx
  0xa757361e: je     0xa7573639
  0xa7573620: cmp    %ecx,%ebx
  0xa7573622: je     0xa7573639
  0xa7573628: push   $0xb75635ff
  0xa757362d: call   0xa7573632
  0xa7573632: pusha  
  0xa7573633: call   0xb6ff5f32
  0xa7573638: hlt    
  0xa7573639: mov    %cl,(%esi)
  0xa757363b: jmp    0xa75736ed
  0xa7573640: cmp    $0x5,%eax
  0xa7573643: jne    0xa757365b
  0xa7573649: fildll (%ecx,%ebx,1)
  0xa757364c: sub    $0x8,%esp
  0xa757364f: fistpll (%esp)
  0xa7573652: pop    %eax
  0xa7573653: pop    %edx
  0xa7573654: push   %edx
  0xa7573655: push   %eax
  0xa7573656: jmp    0xa75736ed
  0xa757365b: cmp    $0x6,%eax
  0xa757365e: jne    0xa757369d
  0xa7573664: flds   (%ecx,%ebx,1)
  0xa7573667: sub    $0x4,%esp
  0xa757366a: fstps  (%esp)
  0xa757366d: mov    $0xcf,%ecx
  0xa7573672: movzbl (%esi),%ebx
  0xa7573675: cmp    $0xb4,%ebx
  0xa757367b: je     0xa7573696
  0xa757367d: cmp    %ecx,%ebx
  0xa757367f: je     0xa7573696
  0xa7573685: push   $0xb75635ff
  0xa757368a: call   0xa757368f
  0xa757368f: pusha  
  0xa7573690: call   0xb6ff5f32
  0xa7573695: hlt    
  0xa7573696: mov    %cl,(%esi)
  0xa7573698: jmp    0xa75736ed
  0xa757369d: cmp    $0x7,%eax
  0xa75736a0: jne    0xa75736dc
  0xa75736a6: fldl   (%ecx,%ebx,1)
  0xa75736a9: sub    $0x8,%esp
  0xa75736ac: fstpl  (%esp)
  0xa75736af: mov    $0xce,%ecx
  0xa75736b4: movzbl (%esi),%ebx
  0xa75736b7: cmp    $0xb4,%ebx
  0xa75736bd: je     0xa75736d8
  0xa75736bf: cmp    %ecx,%ebx
  0xa75736c1: je     0xa75736d8
  0xa75736c7: push   $0xb75635ff
  0xa75736cc: call   0xa75736d1
  0xa75736d1: pusha  
  0xa75736d2: call   0xb6ff5f32
  0xa75736d7: hlt    
  0xa75736d8: mov    %cl,(%esi)
  0xa75736da: jmp    0xa75736ed
  0xa75736dc: push   $0xb7563ba8
  0xa75736e1: call   0xa75736e6
  0xa75736e6: pusha  
  0xa75736e7: call   0xb6ff5f32
  0xa75736ec: hlt    
  0xa75736ed: movzbl 0x3(%esi),%ebx
  0xa75736f1: add    $0x3,%esi
  0xa75736f4: jmp    *-0x48722ae0(,%ebx,4)
  0xa75736fb: nop
  0xa75736fc: int3   
  0xa75736fd: int3   
  0xa75736fe: int3   
  0xa75736ff: int3   

----------------------------------------------------------------------
putfield  181 putfield  [0xa7573720, 0xa7573c00]  1248 bytes

  0xa7573720: sub    $0x4,%esp
  0xa7573723: fstps  (%esp)
  0xa7573726: jmp    0xa7573744
  0xa757372b: sub    $0x8,%esp
  0xa757372e: fstpl  (%esp)
  0xa7573731: jmp    0xa7573744
  0xa7573736: push   %edx
  0xa7573737: push   %eax
  0xa7573738: jmp    0xa7573744
  0xa757373d: push   %eax
  0xa757373e: jmp    0xa7573744
  0xa7573743: push   %eax
  0xa7573744: movzwl 0x1(%esi),%edx
  0xa7573748: mov    -0x14(%ebp),%ecx
  0xa757374b: shl    $0x2,%edx
  0xa757374e: mov    0x8(%ecx,%edx,4),%ebx
  0xa7573752: shr    $0x18,%ebx
  0xa7573755: and    $0xff,%ebx
  0xa757375b: cmp    $0xb5,%ebx
  0xa7573761: je     0xa7573820
  0xa7573767: mov    $0xb5,%ebx
  0xa757376c: call   0xa7573776
  0xa7573771: jmp    0xa7573816
  0xa7573776: push   %ebx
  0xa7573777: lea    0x8(%esp),%eax
  0xa757377b: cmpl   $0x0,-0x8(%ebp)
  0xa7573782: je     0xa7573799
  0xa7573788: push   $0xb7449b58
  0xa757378d: call   0xa7573792
  0xa7573792: pusha  
  0xa7573793: call   0xb6ff5f32
  0xa7573798: hlt    
  0xa7573799: mov    %esi,-0x1c(%ebp)
  0xa757379c: mov    %esp,%edi
  0xa757379e: shr    $0xc,%edi
  0xa75737a1: mov    -0x4871aba0(,%edi,4),%edi
  0xa75737a8: push   %edi
  0xa75737a9: mov    %ebp,0x148(%edi)
  0xa75737af: mov    %eax,0x140(%edi)
  0xa75737b5: call   0xb6e5e508
  0xa75737ba: add    $0x8,%esp
  0xa75737bd: push   %eax
  0xa75737be: mov    %esp,%eax
  0xa75737c0: shr    $0xc,%eax
  0xa75737c3: mov    -0x4871aba0(,%eax,4),%eax
  0xa75737ca: cmp    %eax,%edi
  0xa75737cc: je     0xa75737e3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75737d2: push   $0xb74acf8c
  0xa75737d7: call   0xa75737dc
  0xa75737dc: pusha  
  0xa75737dd: call   0xb6ff5f32
  0xa75737e2: hlt    
  0xa75737e3: pop    %eax
  0xa75737e4: movl   $0x0,0x140(%edi)
  0xa75737ee: movl   $0x0,0x148(%edi)
  0xa75737f8: movl   $0x0,0x144(%edi)
  0xa7573802: cmpl   $0x0,0x4(%edi)
  0xa7573809: jne    0xa7556400
  0xa757380f: mov    -0x1c(%ebp),%esi
  0xa7573812: mov    -0x18(%ebp),%edi
  0xa7573815: ret    
  0xa7573816: movzwl 0x1(%esi),%edx
  0xa757381a: mov    -0x14(%ebp),%ecx
  0xa757381d: shl    $0x2,%edx
  0xa7573820: mov    0x10(%ecx,%edx,4),%ebx
  0xa7573824: mov    0x14(%ecx,%edx,4),%eax
  0xa7573828: mov    %eax,%edx
  0xa757382a: shr    $0x15,%edx
  0xa757382d: and    $0x1,%edx
  0xa7573830: shr    $0x1c,%eax
  0xa7573833: and    $0xf,%eax
  0xa7573836: jne    0xa7573893
  0xa757383c: pop    %eax
  0xa757383d: pop    %ecx
  0xa757383e: cmp    (%ecx),%eax
  0xa7573840: mov    %al,(%ecx,%ebx,1)
  0xa7573843: movzwl 0x1(%esi),%ebx
  0xa7573847: mov    -0x14(%ebp),%ecx
  0xa757384a: shl    $0x2,%ebx
  0xa757384d: mov    0x8(%ecx,%ebx,4),%ebx
  0xa7573851: shr    $0x18,%ebx
  0xa7573854: and    $0xff,%ebx
  0xa757385a: mov    $0xd4,%ecx
  0xa757385f: cmp    $0x0,%ebx
  0xa7573862: je     0xa757388e
  0xa7573868: movzbl (%esi),%ebx
  0xa757386b: cmp    $0xb5,%ebx
  0xa7573871: je     0xa757388c
  0xa7573873: cmp    %ecx,%ebx
  0xa7573875: je     0xa757388c
  0xa757387b: push   $0xb75635ff
  0xa7573880: call   0xa7573885
  0xa7573885: pusha  
  0xa7573886: call   0xb6ff5f32
  0xa757388b: hlt    
  0xa757388c: mov    %cl,(%esi)
  0xa757388e: jmp    0xa7573be5
  0xa7573893: cmp    $0x1,%eax
  0xa7573896: jne    0xa75738f6
  0xa757389c: pop    %eax
  0xa757389d: pop    %ecx
  0xa757389e: cmp    (%ecx),%eax
  0xa75738a0: and    $0x1,%eax
  0xa75738a3: mov    %al,(%ecx,%ebx,1)
  0xa75738a6: movzwl 0x1(%esi),%ebx
  0xa75738aa: mov    -0x14(%ebp),%ecx
  0xa75738ad: shl    $0x2,%ebx
  0xa75738b0: mov    0x8(%ecx,%ebx,4),%ebx
  0xa75738b4: shr    $0x18,%ebx
  0xa75738b7: and    $0xff,%ebx
  0xa75738bd: mov    $0xd5,%ecx
  0xa75738c2: cmp    $0x0,%ebx
  0xa75738c5: je     0xa75738f1
  0xa75738cb: movzbl (%esi),%ebx
  0xa75738ce: cmp    $0xb5,%ebx
  0xa75738d4: je     0xa75738ef
  0xa75738d6: cmp    %ecx,%ebx
  0xa75738d8: je     0xa75738ef
  0xa75738de: push   $0xb75635ff
  0xa75738e3: call   0xa75738e8
  0xa75738e8: pusha  
  0xa75738e9: call   0xb6ff5f32
  0xa75738ee: hlt    
  0xa75738ef: mov    %cl,(%esi)
  0xa75738f1: jmp    0xa7573be5
  0xa75738f6: cmp    $0x4,%eax
  0xa75738f9: jne    0xa7573956
  0xa75738ff: pop    %eax
  0xa7573900: pop    %ecx
  0xa7573901: cmp    (%ecx),%eax
  0xa7573903: mov    %eax,(%ecx,%ebx,1)
  0xa7573906: movzwl 0x1(%esi),%ebx
  0xa757390a: mov    -0x14(%ebp),%ecx
  0xa757390d: shl    $0x2,%ebx
  0xa7573910: mov    0x8(%ecx,%ebx,4),%ebx
  0xa7573914: shr    $0x18,%ebx
  0xa7573917: and    $0xff,%ebx
  0xa757391d: mov    $0xd9,%ecx
  0xa7573922: cmp    $0x0,%ebx
  0xa7573925: je     0xa7573951
  0xa757392b: movzbl (%esi),%ebx
  0xa757392e: cmp    $0xb5,%ebx
  0xa7573934: je     0xa757394f
  0xa7573936: cmp    %ecx,%ebx
  0xa7573938: je     0xa757394f
  0xa757393e: push   $0xb75635ff
  0xa7573943: call   0xa7573948
  0xa7573948: pusha  
  0xa7573949: call   0xb6ff5f32
  0xa757394e: hlt    
  0xa757394f: mov    %cl,(%esi)
  0xa7573951: jmp    0xa7573be5
  0xa7573956: cmp    $0x8,%eax
  0xa7573959: jne    0xa75739c1
  0xa757395f: pop    %eax
  0xa7573960: pop    %ecx
  0xa7573961: cmp    (%ecx),%eax
  0xa7573963: mov    %eax,(%ecx,%ebx,1)
  0xa7573966: shr    $0x9,%ecx
  0xa7573969: movb   $0x0,0x688c7000(,%ecx,1)
  0xa7573971: movzwl 0x1(%esi),%ebx
  0xa7573975: mov    -0x14(%ebp),%ecx
  0xa7573978: shl    $0x2,%ebx
  0xa757397b: mov    0x8(%ecx,%ebx,4),%ebx
  0xa757397f: shr    $0x18,%ebx
  0xa7573982: and    $0xff,%ebx
  0xa7573988: mov    $0xd3,%ecx
  0xa757398d: cmp    $0x0,%ebx
  0xa7573990: je     0xa75739bc
  0xa7573996: movzbl (%esi),%ebx
  0xa7573999: cmp    $0xb5,%ebx
  0xa757399f: je     0xa75739ba
  0xa75739a1: cmp    %ecx,%ebx
  0xa75739a3: je     0xa75739ba
  0xa75739a9: push   $0xb75635ff
  0xa75739ae: call   0xa75739b3
  0xa75739b3: pusha  
  0xa75739b4: call   0xb6ff5f32
  0xa75739b9: hlt    
  0xa75739ba: mov    %cl,(%esi)
  0xa75739bc: jmp    0xa7573be5
  0xa75739c1: cmp    $0x2,%eax
  0xa75739c4: jne    0xa7573a22
  0xa75739ca: pop    %eax
  0xa75739cb: pop    %ecx
  0xa75739cc: cmp    (%ecx),%eax
  0xa75739ce: mov    %ax,(%ecx,%ebx,1)
  0xa75739d2: movzwl 0x1(%esi),%ebx
  0xa75739d6: mov    -0x14(%ebp),%ecx
  0xa75739d9: shl    $0x2,%ebx
  0xa75739dc: mov    0x8(%ecx,%ebx,4),%ebx
  0xa75739e0: shr    $0x18,%ebx
  0xa75739e3: and    $0xff,%ebx
  0xa75739e9: mov    $0xd6,%ecx
  0xa75739ee: cmp    $0x0,%ebx
  0xa75739f1: je     0xa7573a1d
  0xa75739f7: movzbl (%esi),%ebx
  0xa75739fa: cmp    $0xb5,%ebx
  0xa7573a00: je     0xa7573a1b
  0xa7573a02: cmp    %ecx,%ebx
  0xa7573a04: je     0xa7573a1b
  0xa7573a0a: push   $0xb75635ff
  0xa7573a0f: call   0xa7573a14
  0xa7573a14: pusha  
  0xa7573a15: call   0xb6ff5f32
  0xa7573a1a: hlt    
  0xa7573a1b: mov    %cl,(%esi)
  0xa7573a1d: jmp    0xa7573be5
  0xa7573a22: cmp    $0x3,%eax
  0xa7573a25: jne    0xa7573a83
  0xa7573a2b: pop    %eax
  0xa7573a2c: pop    %ecx
  0xa7573a2d: cmp    (%ecx),%eax
  0xa7573a2f: mov    %ax,(%ecx,%ebx,1)
  0xa7573a33: movzwl 0x1(%esi),%ebx
  0xa7573a37: mov    -0x14(%ebp),%ecx
  0xa7573a3a: shl    $0x2,%ebx
  0xa7573a3d: mov    0x8(%ecx,%ebx,4),%ebx
  0xa7573a41: shr    $0x18,%ebx
  0xa7573a44: and    $0xff,%ebx
  0xa7573a4a: mov    $0xdb,%ecx
  0xa7573a4f: cmp    $0x0,%ebx
  0xa7573a52: je     0xa7573a7e
  0xa7573a58: movzbl (%esi),%ebx
  0xa7573a5b: cmp    $0xb5,%ebx
  0xa7573a61: je     0xa7573a7c
  0xa7573a63: cmp    %ecx,%ebx
  0xa7573a65: je     0xa7573a7c
  0xa7573a6b: push   $0xb75635ff
  0xa7573a70: call   0xa7573a75
  0xa7573a75: pusha  
  0xa7573a76: call   0xb6ff5f32
  0xa7573a7b: hlt    
  0xa7573a7c: mov    %cl,(%esi)
  0xa7573a7e: jmp    0xa7573be5
  0xa7573a83: cmp    $0x5,%eax
  0xa7573a86: jne    0xa7573b0a
  0xa7573a8c: test   %edx,%edx
  0xa7573a8e: je     0xa7573aae
  0xa7573a94: pop    %eax
  0xa7573a95: pop    %edx
  0xa7573a96: pop    %ecx
  0xa7573a97: cmp    (%ecx),%eax
  0xa7573a99: push   %edx
  0xa7573a9a: push   %eax
  0xa7573a9b: fildll (%esp)
  0xa7573a9e: fistpll (%ecx,%ebx,1)
  0xa7573aa1: add    $0x8,%esp
  0xa7573aa4: lock addl $0x0,(%esp)
  0xa7573aa9: jmp    0xa7573bf2
  0xa7573aae: pop    %eax
  0xa7573aaf: pop    %edx
  0xa7573ab0: pop    %ecx
  0xa7573ab1: cmp    (%ecx),%eax
  0xa7573ab3: mov    %edx,0x4(%ecx,%ebx,1)
  0xa7573ab7: mov    %eax,(%ecx,%ebx,1)
  0xa7573aba: movzwl 0x1(%esi),%ebx
  0xa7573abe: mov    -0x14(%ebp),%ecx
  0xa7573ac1: shl    $0x2,%ebx
  0xa7573ac4: mov    0x8(%ecx,%ebx,4),%ebx
  0xa7573ac8: shr    $0x18,%ebx
  0xa7573acb: and    $0xff,%ebx
  0xa7573ad1: mov    $0xda,%ecx
  0xa7573ad6: cmp    $0x0,%ebx
  0xa7573ad9: je     0xa7573b05
  0xa7573adf: movzbl (%esi),%ebx
  0xa7573ae2: cmp    $0xb5,%ebx
  0xa7573ae8: je     0xa7573b03
  0xa7573aea: cmp    %ecx,%ebx
  0xa7573aec: je     0xa7573b03
  0xa7573af2: push   $0xb75635ff
  0xa7573af7: call   0xa7573afc
  0xa7573afc: pusha  
  0xa7573afd: call   0xb6ff5f32
  0xa7573b02: hlt    
  0xa7573b03: mov    %cl,(%esi)
  0xa7573b05: jmp    0xa7573bf2
  0xa7573b0a: cmp    $0x6,%eax
  0xa7573b0d: jne    0xa7573b6f
  0xa7573b13: flds   (%esp)
  0xa7573b16: add    $0x4,%esp
  0xa7573b19: pop    %ecx
  0xa7573b1a: cmp    (%ecx),%eax
  0xa7573b1c: fstps  (%ecx,%ebx,1)
  0xa7573b1f: movzwl 0x1(%esi),%ebx
  0xa7573b23: mov    -0x14(%ebp),%ecx
  0xa7573b26: shl    $0x2,%ebx
  0xa7573b29: mov    0x8(%ecx,%ebx,4),%ebx
  0xa7573b2d: shr    $0x18,%ebx
  0xa7573b30: and    $0xff,%ebx
  0xa7573b36: mov    $0xd8,%ecx
  0xa7573b3b: cmp    $0x0,%ebx
  0xa7573b3e: je     0xa7573b6a
  0xa7573b44: movzbl (%esi),%ebx
  0xa7573b47: cmp    $0xb5,%ebx
  0xa7573b4d: je     0xa7573b68
  0xa7573b4f: cmp    %ecx,%ebx
  0xa7573b51: je     0xa7573b68
  0xa7573b57: push   $0xb75635ff
  0xa7573b5c: call   0xa7573b61
  0xa7573b61: pusha  
  0xa7573b62: call   0xb6ff5f32
  0xa7573b67: hlt    
  0xa7573b68: mov    %cl,(%esi)
  0xa7573b6a: jmp    0xa7573be5
  0xa7573b6f: cmp    $0x7,%eax
  0xa7573b72: jne    0xa7573bd4
  0xa7573b78: fldl   (%esp)
  0xa7573b7b: add    $0x8,%esp
  0xa7573b7e: pop    %ecx
  0xa7573b7f: cmp    (%ecx),%eax
  0xa7573b81: fstpl  (%ecx,%ebx,1)
  0xa7573b84: movzwl 0x1(%esi),%ebx
  0xa7573b88: mov    -0x14(%ebp),%ecx
  0xa7573b8b: shl    $0x2,%ebx
  0xa7573b8e: mov    0x8(%ecx,%ebx,4),%ebx
  0xa7573b92: shr    $0x18,%ebx
  0xa7573b95: and    $0xff,%ebx
  0xa7573b9b: mov    $0xd7,%ecx
  0xa7573ba0: cmp    $0x0,%ebx
  0xa7573ba3: je     0xa7573bcf
  0xa7573ba9: movzbl (%esi),%ebx
  0xa7573bac: cmp    $0xb5,%ebx
  0xa7573bb2: je     0xa7573bcd
  0xa7573bb4: cmp    %ecx,%ebx
  0xa7573bb6: je     0xa7573bcd
  0xa7573bbc: push   $0xb75635ff
  0xa7573bc1: call   0xa7573bc6
  0xa7573bc6: pusha  
  0xa7573bc7: call   0xb6ff5f32
  0xa7573bcc: hlt    
  0xa7573bcd: mov    %cl,(%esi)
  0xa7573bcf: jmp    0xa7573be5
  0xa7573bd4: push   $0xb7563ba8
  0xa7573bd9: call   0xa7573bde
  0xa7573bde: pusha  
  0xa7573bdf: call   0xb6ff5f32
  0xa7573be4: hlt    
  0xa7573be5: test   %edx,%edx
  0xa7573be7: je     0xa7573bf2
  0xa7573bed: lock addl $0x0,(%esp)
  0xa7573bf2: movzbl 0x3(%esi),%ebx
  0xa7573bf6: add    $0x3,%esi
  0xa7573bf9: jmp    *-0x48722ae0(,%ebx,4)

----------------------------------------------------------------------
invokevirtual  182 invokevirtual  [0xa7573c20, 0xa7574020]  1024 bytes

  0xa7573c20: sub    $0x4,%esp
  0xa7573c23: fstps  (%esp)
  0xa7573c26: jmp    0xa7573c44
  0xa7573c2b: sub    $0x8,%esp
  0xa7573c2e: fstpl  (%esp)
  0xa7573c31: jmp    0xa7573c44
  0xa7573c36: push   %edx
  0xa7573c37: push   %eax
  0xa7573c38: jmp    0xa7573c44
  0xa7573c3d: push   %eax
  0xa7573c3e: jmp    0xa7573c44
  0xa7573c43: push   %eax
  0xa7573c44: mov    %esi,-0x1c(%ebp)
  0xa7573c47: movzwl 0x1(%esi),%edx
  0xa7573c4b: mov    -0x14(%ebp),%ecx
  0xa7573c4e: shl    $0x2,%edx
  0xa7573c51: mov    0x8(%ecx,%edx,4),%ebx
  0xa7573c55: shr    $0x18,%ebx
  0xa7573c58: and    $0xff,%ebx
  0xa7573c5e: cmp    $0xb6,%ebx
  0xa7573c64: je     0xa7573d23
  0xa7573c6a: mov    $0xb6,%ebx
  0xa7573c6f: call   0xa7573c79
  0xa7573c74: jmp    0xa7573d19
  0xa7573c79: push   %ebx
  0xa7573c7a: lea    0x8(%esp),%eax
  0xa7573c7e: cmpl   $0x0,-0x8(%ebp)
  0xa7573c85: je     0xa7573c9c
  0xa7573c8b: push   $0xb7449b58
  0xa7573c90: call   0xa7573c95
  0xa7573c95: pusha  
  0xa7573c96: call   0xb6ff5f32
  0xa7573c9b: hlt    
  0xa7573c9c: mov    %esi,-0x1c(%ebp)
  0xa7573c9f: mov    %esp,%edi
  0xa7573ca1: shr    $0xc,%edi
  0xa7573ca4: mov    -0x4871aba0(,%edi,4),%edi
  0xa7573cab: push   %edi
  0xa7573cac: mov    %ebp,0x148(%edi)
  0xa7573cb2: mov    %eax,0x140(%edi)
  0xa7573cb8: call   0xb6e5f8d8
  0xa7573cbd: add    $0x8,%esp
  0xa7573cc0: push   %eax
  0xa7573cc1: mov    %esp,%eax
  0xa7573cc3: shr    $0xc,%eax
  0xa7573cc6: mov    -0x4871aba0(,%eax,4),%eax
  0xa7573ccd: cmp    %eax,%edi
  0xa7573ccf: je     0xa7573ce6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7573cd5: push   $0xb74acf8c
  0xa7573cda: call   0xa7573cdf
  0xa7573cdf: pusha  
  0xa7573ce0: call   0xb6ff5f32
  0xa7573ce5: hlt    
  0xa7573ce6: pop    %eax
  0xa7573ce7: movl   $0x0,0x140(%edi)
  0xa7573cf1: movl   $0x0,0x148(%edi)
  0xa7573cfb: movl   $0x0,0x144(%edi)
  0xa7573d05: cmpl   $0x0,0x4(%edi)
  0xa7573d0c: jne    0xa7556400
  0xa7573d12: mov    -0x1c(%ebp),%esi
  0xa7573d15: mov    -0x18(%ebp),%edi
  0xa7573d18: ret    
  0xa7573d19: movzwl 0x1(%esi),%edx
  0xa7573d1d: mov    -0x14(%ebp),%ecx
  0xa7573d20: shl    $0x2,%edx
  0xa7573d23: mov    0x10(%ecx,%edx,4),%ebx
  0xa7573d27: mov    0x14(%ecx,%edx,4),%edx
  0xa7573d2b: mov    %edx,%ecx
  0xa7573d2d: and    $0xff,%ecx
  0xa7573d33: mov    -0x4(%esp,%ecx,4),%ecx
  0xa7573d37: mov    %edx,%esi
  0xa7573d39: shr    $0x1c,%edx
  0xa7573d3c: mov    -0x48724fa0(,%edx,4),%edx
  0xa7573d43: push   %edx
  0xa7573d44: mov    %esi,%edx
  0xa7573d46: mov    -0x1c(%ebp),%esi
  0xa7573d49: mov    %edx,%eax
  0xa7573d4b: and    $0x100000,%eax
  0xa7573d51: je     0xa7573e72
  0xa7573d57: cmp    (%ecx),%eax
  0xa7573d59: mov    -0x10(%ebp),%eax
  0xa7573d5c: test   %eax,%eax
  0xa7573d5e: je     0xa7573d72
  0xa7573d64: addl   $0x1,0x4(%eax)
  0xa7573d68: sbbl   $0x0,0x4(%eax)
  0xa7573d6c: add    $0x18,%eax
  0xa7573d6f: mov    %eax,-0x10(%ebp)
  0xa7573d72: mov    -0x10(%ebp),%eax
  0xa7573d75: test   %eax,%eax
  0xa7573d77: je     0xa7573e68
  0xa7573d7d: cmpb   $0xb,-0x18(%eax)
  0xa7573d81: jne    0xa7573e68
  0xa7573d87: add    $0x4,%eax
  0xa7573d8a: mov    -0x4(%eax),%esi
  0xa7573d8d: sub    $0x0,%esi
  0xa7573d90: cmp    $0x2,%esi
  0xa7573d93: jl     0xa7573e60
  0xa7573d99: mov    0x8(%ebx),%esi
  0xa7573d9c: movzwl 0x24(%esi),%esi
  0xa7573da0: sub    (%eax),%esi
  0xa7573da2: sub    $0x1,%esi
  0xa7573da5: mov    0x4(%esp,%esi,4),%esi
  0xa7573da9: test   %esi,%esi
  0xa7573dab: jne    0xa7573db3
  0xa7573dad: orl    $0x1,0x4(%eax)
  0xa7573db1: jmp    0xa7573def
  0xa7573db3: mov    0x4(%esi),%esi
  0xa7573db6: xor    0x4(%eax),%esi
  0xa7573db9: test   $0xfffffffc,%esi
  0xa7573dbf: je     0xa7573def
  0xa7573dc1: test   $0x2,%esi
  0xa7573dc7: jne    0xa7573def
  0xa7573dc9: cmpl   $0x0,0x4(%eax)
  0xa7573dd0: je     0xa7573dec
  0xa7573dd2: cmpl   $0x1,0x4(%eax)
  0xa7573dd9: je     0xa7573dec
  0xa7573ddb: xor    0x4(%eax),%esi
  0xa7573dde: test   $0xfffffffc,%esi
  0xa7573de4: je     0xa7573def
  0xa7573de6: orl    $0x2,0x4(%eax)
  0xa7573dea: jmp    0xa7573def
  0xa7573dec: mov    %esi,0x4(%eax)
  0xa7573def: add    $0x8,%eax
  0xa7573df2: mov    -0xc(%eax),%esi
  0xa7573df5: sub    $0x2,%esi
  0xa7573df8: cmp    $0x2,%esi
  0xa7573dfb: jl     0xa7573e60
  0xa7573e01: mov    0x8(%ebx),%esi
  0xa7573e04: movzwl 0x24(%esi),%esi
  0xa7573e08: sub    (%eax),%esi
  0xa7573e0a: sub    $0x1,%esi
  0xa7573e0d: mov    0x4(%esp,%esi,4),%esi
  0xa7573e11: test   %esi,%esi
  0xa7573e13: jne    0xa7573e1b
  0xa7573e15: orl    $0x1,0x4(%eax)
  0xa7573e19: jmp    0xa7573e57
  0xa7573e1b: mov    0x4(%esi),%esi
  0xa7573e1e: xor    0x4(%eax),%esi
  0xa7573e21: test   $0xfffffffc,%esi
  0xa7573e27: je     0xa7573e57
  0xa7573e29: test   $0x2,%esi
  0xa7573e2f: jne    0xa7573e57
  0xa7573e31: cmpl   $0x0,0x4(%eax)
  0xa7573e38: je     0xa7573e54
  0xa7573e3a: cmpl   $0x1,0x4(%eax)
  0xa7573e41: je     0xa7573e54
  0xa7573e43: xor    0x4(%eax),%esi
  0xa7573e46: test   $0xfffffffc,%esi
  0xa7573e4c: je     0xa7573e57
  0xa7573e4e: orl    $0x2,0x4(%eax)
  0xa7573e52: jmp    0xa7573e57
  0xa7573e54: mov    %esi,0x4(%eax)
  0xa7573e57: add    $0x8,%eax
  0xa7573e5a: mov    -0x14(%eax),%esi
  0xa7573e5d: sub    $0x4,%esi
  0xa7573e60: shl    $0x2,%esi
  0xa7573e63: add    %esi,%eax
  0xa7573e65: mov    %eax,-0x10(%ebp)
  0xa7573e68: lea    0x4(%esp),%esi
  0xa7573e6c: mov    %esi,-0x8(%ebp)
  0xa7573e6f: jmp    *0x38(%ebx)
  0xa7573e72: mov    0x4(%ecx),%eax
  0xa7573e75: mov    -0x10(%ebp),%edi
  0xa7573e78: test   %edi,%edi
  0xa7573e7a: je     0xa7573f00
  0xa7573e80: mov    0x8(%edi),%edx
  0xa7573e83: cmp    %eax,%edx
  0xa7573e85: jne    0xa7573e98
  0xa7573e8b: addl   $0x1,0xc(%edi)
  0xa7573e8f: sbbl   $0x0,0xc(%edi)
  0xa7573e93: jmp    0xa7573efa
  0xa7573e98: test   %edx,%edx
  0xa7573e9a: je     0xa7573ed9
  0xa7573ea0: mov    0x10(%edi),%edx
  0xa7573ea3: cmp    %eax,%edx
  0xa7573ea5: jne    0xa7573eb8
  0xa7573eab: addl   $0x1,0x14(%edi)
  0xa7573eaf: sbbl   $0x0,0x14(%edi)
  0xa7573eb3: jmp    0xa7573efa
  0xa7573eb8: test   %edx,%edx
  0xa7573eba: je     0xa7573ec9
  0xa7573ebc: addl   $0x1,0x4(%edi)
  0xa7573ec0: sbbl   $0x0,0x4(%edi)
  0xa7573ec4: jmp    0xa7573efa
  0xa7573ec9: mov    %eax,0x10(%edi)
  0xa7573ecc: mov    $0x1,%edx
  0xa7573ed1: mov    %edx,0x14(%edi)
  0xa7573ed4: jmp    0xa7573efa
  0xa7573ed9: cmp    0x10(%edi),%eax
  0xa7573edc: jne    0xa7573eef
  0xa7573ee2: addl   $0x1,0x14(%edi)
  0xa7573ee6: sbbl   $0x0,0x14(%edi)
  0xa7573eea: jmp    0xa7573efa
  0xa7573eef: mov    %eax,0x8(%edi)
  0xa7573ef2: mov    $0x1,%edx
  0xa7573ef7: mov    %edx,0xc(%edi)
  0xa7573efa: add    $0x18,%edi
  0xa7573efd: mov    %edi,-0x10(%ebp)
  0xa7573f00: mov    0x100(%eax,%ebx,4),%ebx
  0xa7573f07: mov    -0x10(%ebp),%edx
  0xa7573f0a: test   %edx,%edx
  0xa7573f0c: je     0xa7573ffd
  0xa7573f12: cmpb   $0xb,-0x18(%edx)
  0xa7573f16: jne    0xa7573ffd
  0xa7573f1c: add    $0x4,%edx
  0xa7573f1f: mov    -0x4(%edx),%esi
  0xa7573f22: sub    $0x0,%esi
  0xa7573f25: cmp    $0x2,%esi
  0xa7573f28: jl     0xa7573ff5
  0xa7573f2e: mov    0x8(%ebx),%esi
  0xa7573f31: movzwl 0x24(%esi),%esi
  0xa7573f35: sub    (%edx),%esi
  0xa7573f37: sub    $0x1,%esi
  0xa7573f3a: mov    0x4(%esp,%esi,4),%esi
  0xa7573f3e: test   %esi,%esi
  0xa7573f40: jne    0xa7573f48
  0xa7573f42: orl    $0x1,0x4(%edx)
  0xa7573f46: jmp    0xa7573f84
  0xa7573f48: mov    0x4(%esi),%esi
  0xa7573f4b: xor    0x4(%edx),%esi
  0xa7573f4e: test   $0xfffffffc,%esi
  0xa7573f54: je     0xa7573f84
  0xa7573f56: test   $0x2,%esi
  0xa7573f5c: jne    0xa7573f84
  0xa7573f5e: cmpl   $0x0,0x4(%edx)
  0xa7573f65: je     0xa7573f81
  0xa7573f67: cmpl   $0x1,0x4(%edx)
  0xa7573f6e: je     0xa7573f81
  0xa7573f70: xor    0x4(%edx),%esi
  0xa7573f73: test   $0xfffffffc,%esi
  0xa7573f79: je     0xa7573f84
  0xa7573f7b: orl    $0x2,0x4(%edx)
  0xa7573f7f: jmp    0xa7573f84
  0xa7573f81: mov    %esi,0x4(%edx)
  0xa7573f84: add    $0x8,%edx
  0xa7573f87: mov    -0xc(%edx),%esi
  0xa7573f8a: sub    $0x2,%esi
  0xa7573f8d: cmp    $0x2,%esi
  0xa7573f90: jl     0xa7573ff5
  0xa7573f96: mov    0x8(%ebx),%esi
  0xa7573f99: movzwl 0x24(%esi),%esi
  0xa7573f9d: sub    (%edx),%esi
  0xa7573f9f: sub    $0x1,%esi
  0xa7573fa2: mov    0x4(%esp,%esi,4),%esi
  0xa7573fa6: test   %esi,%esi
  0xa7573fa8: jne    0xa7573fb0
  0xa7573faa: orl    $0x1,0x4(%edx)
  0xa7573fae: jmp    0xa7573fec
  0xa7573fb0: mov    0x4(%esi),%esi
  0xa7573fb3: xor    0x4(%edx),%esi
  0xa7573fb6: test   $0xfffffffc,%esi
  0xa7573fbc: je     0xa7573fec
  0xa7573fbe: test   $0x2,%esi
  0xa7573fc4: jne    0xa7573fec
  0xa7573fc6: cmpl   $0x0,0x4(%edx)
  0xa7573fcd: je     0xa7573fe9
  0xa7573fcf: cmpl   $0x1,0x4(%edx)
  0xa7573fd6: je     0xa7573fe9
  0xa7573fd8: xor    0x4(%edx),%esi
  0xa7573fdb: test   $0xfffffffc,%esi
  0xa7573fe1: je     0xa7573fec
  0xa7573fe3: orl    $0x2,0x4(%edx)
  0xa7573fe7: jmp    0xa7573fec
  0xa7573fe9: mov    %esi,0x4(%edx)
  0xa7573fec: add    $0x8,%edx
  0xa7573fef: mov    -0x14(%edx),%esi
  0xa7573ff2: sub    $0x4,%esi
  0xa7573ff5: shl    $0x2,%esi
  0xa7573ff8: add    %esi,%edx
  0xa7573ffa: mov    %edx,-0x10(%ebp)
  0xa7573ffd: lea    0x4(%esp),%esi
  0xa7574001: mov    %esi,-0x8(%ebp)
  0xa7574004: jmp    *0x38(%ebx)
  0xa7574007: push   $0xb7302e8b
  0xa757400c: call   0xa7574011
  0xa7574011: pusha  
  0xa7574012: call   0xb6ff5f32
  0xa7574017: hlt    
  0xa7574018: int3   
  0xa7574019: int3   
  0xa757401a: int3   
  0xa757401b: int3   
  0xa757401c: int3   
  0xa757401d: int3   
  0xa757401e: int3   
  0xa757401f: int3   

----------------------------------------------------------------------
invokespecial  183 invokespecial  [0xa7574040, 0xa75742a0]  608 bytes

  0xa7574040: sub    $0x4,%esp
  0xa7574043: fstps  (%esp)
  0xa7574046: jmp    0xa7574064
  0xa757404b: sub    $0x8,%esp
  0xa757404e: fstpl  (%esp)
  0xa7574051: jmp    0xa7574064
  0xa7574056: push   %edx
  0xa7574057: push   %eax
  0xa7574058: jmp    0xa7574064
  0xa757405d: push   %eax
  0xa757405e: jmp    0xa7574064
  0xa7574063: push   %eax
  0xa7574064: mov    %esi,-0x1c(%ebp)
  0xa7574067: movzwl 0x1(%esi),%edx
  0xa757406b: mov    -0x14(%ebp),%ecx
  0xa757406e: shl    $0x2,%edx
  0xa7574071: mov    0x8(%ecx,%edx,4),%ebx
  0xa7574075: shr    $0x10,%ebx
  0xa7574078: and    $0xff,%ebx
  0xa757407e: cmp    $0xb7,%ebx
  0xa7574084: je     0xa7574143
  0xa757408a: mov    $0xb7,%ebx
  0xa757408f: call   0xa7574099
  0xa7574094: jmp    0xa7574139
  0xa7574099: push   %ebx
  0xa757409a: lea    0x8(%esp),%eax
  0xa757409e: cmpl   $0x0,-0x8(%ebp)
  0xa75740a5: je     0xa75740bc
  0xa75740ab: push   $0xb7449b58
  0xa75740b0: call   0xa75740b5
  0xa75740b5: pusha  
  0xa75740b6: call   0xb6ff5f32
  0xa75740bb: hlt    
  0xa75740bc: mov    %esi,-0x1c(%ebp)
  0xa75740bf: mov    %esp,%edi
  0xa75740c1: shr    $0xc,%edi
  0xa75740c4: mov    -0x4871aba0(,%edi,4),%edi
  0xa75740cb: push   %edi
  0xa75740cc: mov    %ebp,0x148(%edi)
  0xa75740d2: mov    %eax,0x140(%edi)
  0xa75740d8: call   0xb6e5f8d8
  0xa75740dd: add    $0x8,%esp
  0xa75740e0: push   %eax
  0xa75740e1: mov    %esp,%eax
  0xa75740e3: shr    $0xc,%eax
  0xa75740e6: mov    -0x4871aba0(,%eax,4),%eax
  0xa75740ed: cmp    %eax,%edi
  0xa75740ef: je     0xa7574106
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75740f5: push   $0xb74acf8c
  0xa75740fa: call   0xa75740ff
  0xa75740ff: pusha  
  0xa7574100: call   0xb6ff5f32
  0xa7574105: hlt    
  0xa7574106: pop    %eax
  0xa7574107: movl   $0x0,0x140(%edi)
  0xa7574111: movl   $0x0,0x148(%edi)
  0xa757411b: movl   $0x0,0x144(%edi)
  0xa7574125: cmpl   $0x0,0x4(%edi)
  0xa757412c: jne    0xa7556400
  0xa7574132: mov    -0x1c(%ebp),%esi
  0xa7574135: mov    -0x18(%ebp),%edi
  0xa7574138: ret    
  0xa7574139: movzwl 0x1(%esi),%edx
  0xa757413d: mov    -0x14(%ebp),%ecx
  0xa7574140: shl    $0x2,%edx
  0xa7574143: mov    0xc(%ecx,%edx,4),%ebx
  0xa7574147: mov    0x14(%ecx,%edx,4),%edx
  0xa757414b: mov    %edx,%ecx
  0xa757414d: and    $0xff,%ecx
  0xa7574153: mov    -0x4(%esp,%ecx,4),%ecx
  0xa7574157: shr    $0x1c,%edx
  0xa757415a: mov    -0x48724fa0(,%edx,4),%edx
  0xa7574161: push   %edx
  0xa7574162: cmp    (%ecx),%eax
  0xa7574164: mov    -0x10(%ebp),%eax
  0xa7574167: test   %eax,%eax
  0xa7574169: je     0xa757417d
  0xa757416f: addl   $0x1,0x4(%eax)
  0xa7574173: sbbl   $0x0,0x4(%eax)
  0xa7574177: add    $0x8,%eax
  0xa757417a: mov    %eax,-0x10(%ebp)
  0xa757417d: mov    -0x10(%ebp),%eax
  0xa7574180: test   %eax,%eax
  0xa7574182: je     0xa7574273
  0xa7574188: cmpb   $0xa,-0x8(%eax)
  0xa757418c: jne    0xa7574273
  0xa7574192: add    $0x4,%eax
  0xa7574195: mov    -0x4(%eax),%esi
  0xa7574198: sub    $0x0,%esi
  0xa757419b: cmp    $0x2,%esi
  0xa757419e: jl     0xa757426b
  0xa75741a4: mov    0x8(%ebx),%esi
  0xa75741a7: movzwl 0x24(%esi),%esi
  0xa75741ab: sub    (%eax),%esi
  0xa75741ad: sub    $0x1,%esi
  0xa75741b0: mov    0x4(%esp,%esi,4),%esi
  0xa75741b4: test   %esi,%esi
  0xa75741b6: jne    0xa75741be
  0xa75741b8: orl    $0x1,0x4(%eax)
  0xa75741bc: jmp    0xa75741fa
  0xa75741be: mov    0x4(%esi),%esi
  0xa75741c1: xor    0x4(%eax),%esi
  0xa75741c4: test   $0xfffffffc,%esi
  0xa75741ca: je     0xa75741fa
  0xa75741cc: test   $0x2,%esi
  0xa75741d2: jne    0xa75741fa
  0xa75741d4: cmpl   $0x0,0x4(%eax)
  0xa75741db: je     0xa75741f7
  0xa75741dd: cmpl   $0x1,0x4(%eax)
  0xa75741e4: je     0xa75741f7
  0xa75741e6: xor    0x4(%eax),%esi
  0xa75741e9: test   $0xfffffffc,%esi
  0xa75741ef: je     0xa75741fa
  0xa75741f1: orl    $0x2,0x4(%eax)
  0xa75741f5: jmp    0xa75741fa
  0xa75741f7: mov    %esi,0x4(%eax)
  0xa75741fa: add    $0x8,%eax
  0xa75741fd: mov    -0xc(%eax),%esi
  0xa7574200: sub    $0x2,%esi
  0xa7574203: cmp    $0x2,%esi
  0xa7574206: jl     0xa757426b
  0xa757420c: mov    0x8(%ebx),%esi
  0xa757420f: movzwl 0x24(%esi),%esi
  0xa7574213: sub    (%eax),%esi
  0xa7574215: sub    $0x1,%esi
  0xa7574218: mov    0x4(%esp,%esi,4),%esi
  0xa757421c: test   %esi,%esi
  0xa757421e: jne    0xa7574226
  0xa7574220: orl    $0x1,0x4(%eax)
  0xa7574224: jmp    0xa7574262
  0xa7574226: mov    0x4(%esi),%esi
  0xa7574229: xor    0x4(%eax),%esi
  0xa757422c: test   $0xfffffffc,%esi
  0xa7574232: je     0xa7574262
  0xa7574234: test   $0x2,%esi
  0xa757423a: jne    0xa7574262
  0xa757423c: cmpl   $0x0,0x4(%eax)
  0xa7574243: je     0xa757425f
  0xa7574245: cmpl   $0x1,0x4(%eax)
  0xa757424c: je     0xa757425f
  0xa757424e: xor    0x4(%eax),%esi
  0xa7574251: test   $0xfffffffc,%esi
  0xa7574257: je     0xa7574262
  0xa7574259: orl    $0x2,0x4(%eax)
  0xa757425d: jmp    0xa7574262
  0xa757425f: mov    %esi,0x4(%eax)
  0xa7574262: add    $0x8,%eax
  0xa7574265: mov    -0x14(%eax),%esi
  0xa7574268: sub    $0x4,%esi
  0xa757426b: shl    $0x2,%esi
  0xa757426e: add    %esi,%eax
  0xa7574270: mov    %eax,-0x10(%ebp)
  0xa7574273: lea    0x4(%esp),%esi
  0xa7574277: mov    %esi,-0x8(%ebp)
  0xa757427a: jmp    *0x38(%ebx)
  0xa757427d: push   $0xb7302e8b
  0xa7574282: call   0xa7574287
  0xa7574287: pusha  
  0xa7574288: call   0xb6ff5f32
  0xa757428d: hlt    
  0xa757428e: nop
  0xa757428f: nop
  0xa7574290: int3   
  0xa7574291: int3   
  0xa7574292: int3   
  0xa7574293: int3   
  0xa7574294: int3   
  0xa7574295: int3   
  0xa7574296: int3   
  0xa7574297: int3   
  0xa7574298: int3   
  0xa7574299: int3   
  0xa757429a: int3   
  0xa757429b: int3   
  0xa757429c: int3   
  0xa757429d: int3   
  0xa757429e: int3   
  0xa757429f: int3   

----------------------------------------------------------------------
invokestatic  184 invokestatic  [0xa75742c0, 0xa7574500]  576 bytes

  0xa75742c0: sub    $0x4,%esp
  0xa75742c3: fstps  (%esp)
  0xa75742c6: jmp    0xa75742e4
  0xa75742cb: sub    $0x8,%esp
  0xa75742ce: fstpl  (%esp)
  0xa75742d1: jmp    0xa75742e4
  0xa75742d6: push   %edx
  0xa75742d7: push   %eax
  0xa75742d8: jmp    0xa75742e4
  0xa75742dd: push   %eax
  0xa75742de: jmp    0xa75742e4
  0xa75742e3: push   %eax
  0xa75742e4: mov    %esi,-0x1c(%ebp)
  0xa75742e7: movzwl 0x1(%esi),%edx
  0xa75742eb: mov    -0x14(%ebp),%ecx
  0xa75742ee: shl    $0x2,%edx
  0xa75742f1: mov    0x8(%ecx,%edx,4),%ebx
  0xa75742f5: shr    $0x10,%ebx
  0xa75742f8: and    $0xff,%ebx
  0xa75742fe: cmp    $0xb8,%ebx
  0xa7574304: je     0xa75743c3
  0xa757430a: mov    $0xb8,%ebx
  0xa757430f: call   0xa7574319
  0xa7574314: jmp    0xa75743b9
  0xa7574319: push   %ebx
  0xa757431a: lea    0x8(%esp),%eax
  0xa757431e: cmpl   $0x0,-0x8(%ebp)
  0xa7574325: je     0xa757433c
  0xa757432b: push   $0xb7449b58
  0xa7574330: call   0xa7574335
  0xa7574335: pusha  
  0xa7574336: call   0xb6ff5f32
  0xa757433b: hlt    
  0xa757433c: mov    %esi,-0x1c(%ebp)
  0xa757433f: mov    %esp,%edi
  0xa7574341: shr    $0xc,%edi
  0xa7574344: mov    -0x4871aba0(,%edi,4),%edi
  0xa757434b: push   %edi
  0xa757434c: mov    %ebp,0x148(%edi)
  0xa7574352: mov    %eax,0x140(%edi)
  0xa7574358: call   0xb6e5f8d8
  0xa757435d: add    $0x8,%esp
  0xa7574360: push   %eax
  0xa7574361: mov    %esp,%eax
  0xa7574363: shr    $0xc,%eax
  0xa7574366: mov    -0x4871aba0(,%eax,4),%eax
  0xa757436d: cmp    %eax,%edi
  0xa757436f: je     0xa7574386
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7574375: push   $0xb74acf8c
  0xa757437a: call   0xa757437f
  0xa757437f: pusha  
  0xa7574380: call   0xb6ff5f32
  0xa7574385: hlt    
  0xa7574386: pop    %eax
  0xa7574387: movl   $0x0,0x140(%edi)
  0xa7574391: movl   $0x0,0x148(%edi)
  0xa757439b: movl   $0x0,0x144(%edi)
  0xa75743a5: cmpl   $0x0,0x4(%edi)
  0xa75743ac: jne    0xa7556400
  0xa75743b2: mov    -0x1c(%ebp),%esi
  0xa75743b5: mov    -0x18(%ebp),%edi
  0xa75743b8: ret    
  0xa75743b9: movzwl 0x1(%esi),%edx
  0xa75743bd: mov    -0x14(%ebp),%ecx
  0xa75743c0: shl    $0x2,%edx
  0xa75743c3: mov    0xc(%ecx,%edx,4),%ebx
  0xa75743c7: mov    0x14(%ecx,%edx,4),%edx
  0xa75743cb: shr    $0x1c,%edx
  0xa75743ce: mov    -0x48724fa0(,%edx,4),%edx
  0xa75743d5: push   %edx
  0xa75743d6: mov    -0x10(%ebp),%eax
  0xa75743d9: test   %eax,%eax
  0xa75743db: je     0xa75743ef
  0xa75743e1: addl   $0x1,0x4(%eax)
  0xa75743e5: sbbl   $0x0,0x4(%eax)
  0xa75743e9: add    $0x8,%eax
  0xa75743ec: mov    %eax,-0x10(%ebp)
  0xa75743ef: mov    -0x10(%ebp),%eax
  0xa75743f2: test   %eax,%eax
  0xa75743f4: je     0xa75744e5
  0xa75743fa: cmpb   $0xa,-0x8(%eax)
  0xa75743fe: jne    0xa75744e5
  0xa7574404: add    $0x4,%eax
  0xa7574407: mov    -0x4(%eax),%esi
  0xa757440a: sub    $0x0,%esi
  0xa757440d: cmp    $0x2,%esi
  0xa7574410: jl     0xa75744dd
  0xa7574416: mov    0x8(%ebx),%esi
  0xa7574419: movzwl 0x24(%esi),%esi
  0xa757441d: sub    (%eax),%esi
  0xa757441f: sub    $0x1,%esi
  0xa7574422: mov    0x4(%esp,%esi,4),%esi
  0xa7574426: test   %esi,%esi
  0xa7574428: jne    0xa7574430
  0xa757442a: orl    $0x1,0x4(%eax)
  0xa757442e: jmp    0xa757446c
  0xa7574430: mov    0x4(%esi),%esi
  0xa7574433: xor    0x4(%eax),%esi
  0xa7574436: test   $0xfffffffc,%esi
  0xa757443c: je     0xa757446c
  0xa757443e: test   $0x2,%esi
  0xa7574444: jne    0xa757446c
  0xa7574446: cmpl   $0x0,0x4(%eax)
  0xa757444d: je     0xa7574469
  0xa757444f: cmpl   $0x1,0x4(%eax)
  0xa7574456: je     0xa7574469
  0xa7574458: xor    0x4(%eax),%esi
  0xa757445b: test   $0xfffffffc,%esi
  0xa7574461: je     0xa757446c
  0xa7574463: orl    $0x2,0x4(%eax)
  0xa7574467: jmp    0xa757446c
  0xa7574469: mov    %esi,0x4(%eax)
  0xa757446c: add    $0x8,%eax
  0xa757446f: mov    -0xc(%eax),%esi
  0xa7574472: sub    $0x2,%esi
  0xa7574475: cmp    $0x2,%esi
  0xa7574478: jl     0xa75744dd
  0xa757447e: mov    0x8(%ebx),%esi
  0xa7574481: movzwl 0x24(%esi),%esi
  0xa7574485: sub    (%eax),%esi
  0xa7574487: sub    $0x1,%esi
  0xa757448a: mov    0x4(%esp,%esi,4),%esi
  0xa757448e: test   %esi,%esi
  0xa7574490: jne    0xa7574498
  0xa7574492: orl    $0x1,0x4(%eax)
  0xa7574496: jmp    0xa75744d4
  0xa7574498: mov    0x4(%esi),%esi
  0xa757449b: xor    0x4(%eax),%esi
  0xa757449e: test   $0xfffffffc,%esi
  0xa75744a4: je     0xa75744d4
  0xa75744a6: test   $0x2,%esi
  0xa75744ac: jne    0xa75744d4
  0xa75744ae: cmpl   $0x0,0x4(%eax)
  0xa75744b5: je     0xa75744d1
  0xa75744b7: cmpl   $0x1,0x4(%eax)
  0xa75744be: je     0xa75744d1
  0xa75744c0: xor    0x4(%eax),%esi
  0xa75744c3: test   $0xfffffffc,%esi
  0xa75744c9: je     0xa75744d4
  0xa75744cb: orl    $0x2,0x4(%eax)
  0xa75744cf: jmp    0xa75744d4
  0xa75744d1: mov    %esi,0x4(%eax)
  0xa75744d4: add    $0x8,%eax
  0xa75744d7: mov    -0x14(%eax),%esi
  0xa75744da: sub    $0x4,%esi
  0xa75744dd: shl    $0x2,%esi
  0xa75744e0: add    %esi,%eax
  0xa75744e2: mov    %eax,-0x10(%ebp)
  0xa75744e5: lea    0x4(%esp),%esi
  0xa75744e9: mov    %esi,-0x8(%ebp)
  0xa75744ec: jmp    *0x38(%ebx)
  0xa75744ef: push   $0xb7302e8b
  0xa75744f4: call   0xa75744f9
  0xa75744f9: pusha  
  0xa75744fa: call   0xb6ff5f32
  0xa75744ff: hlt    

----------------------------------------------------------------------
invokeinterface  185 invokeinterface  [0xa7574520, 0xa7574ce0]  1984 bytes

  0xa7574520: sub    $0x4,%esp
  0xa7574523: fstps  (%esp)
  0xa7574526: jmp    0xa7574544
  0xa757452b: sub    $0x8,%esp
  0xa757452e: fstpl  (%esp)
  0xa7574531: jmp    0xa7574544
  0xa7574536: push   %edx
  0xa7574537: push   %eax
  0xa7574538: jmp    0xa7574544
  0xa757453d: push   %eax
  0xa757453e: jmp    0xa7574544
  0xa7574543: push   %eax
  0xa7574544: mov    %esi,-0x1c(%ebp)
  0xa7574547: movzwl 0x1(%esi),%edx
  0xa757454b: mov    -0x14(%ebp),%ecx
  0xa757454e: shl    $0x2,%edx
  0xa7574551: mov    0x8(%ecx,%edx,4),%ebx
  0xa7574555: shr    $0x10,%ebx
  0xa7574558: and    $0xff,%ebx
  0xa757455e: cmp    $0xb9,%ebx
  0xa7574564: je     0xa7574623
  0xa757456a: mov    $0xb9,%ebx
  0xa757456f: call   0xa7574579
  0xa7574574: jmp    0xa7574619
  0xa7574579: push   %ebx
  0xa757457a: lea    0x8(%esp),%eax
  0xa757457e: cmpl   $0x0,-0x8(%ebp)
  0xa7574585: je     0xa757459c
  0xa757458b: push   $0xb7449b58
  0xa7574590: call   0xa7574595
  0xa7574595: pusha  
  0xa7574596: call   0xb6ff5f32
  0xa757459b: hlt    
  0xa757459c: mov    %esi,-0x1c(%ebp)
  0xa757459f: mov    %esp,%edi
  0xa75745a1: shr    $0xc,%edi
  0xa75745a4: mov    -0x4871aba0(,%edi,4),%edi
  0xa75745ab: push   %edi
  0xa75745ac: mov    %ebp,0x148(%edi)
  0xa75745b2: mov    %eax,0x140(%edi)
  0xa75745b8: call   0xb6e5f8d8
  0xa75745bd: add    $0x8,%esp
  0xa75745c0: push   %eax
  0xa75745c1: mov    %esp,%eax
  0xa75745c3: shr    $0xc,%eax
  0xa75745c6: mov    -0x4871aba0(,%eax,4),%eax
  0xa75745cd: cmp    %eax,%edi
  0xa75745cf: je     0xa75745e6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75745d5: push   $0xb74acf8c
  0xa75745da: call   0xa75745df
  0xa75745df: pusha  
  0xa75745e0: call   0xb6ff5f32
  0xa75745e5: hlt    
  0xa75745e6: pop    %eax
  0xa75745e7: movl   $0x0,0x140(%edi)
  0xa75745f1: movl   $0x0,0x148(%edi)
  0xa75745fb: movl   $0x0,0x144(%edi)
  0xa7574605: cmpl   $0x0,0x4(%edi)
  0xa757460c: jne    0xa7556400
  0xa7574612: mov    -0x1c(%ebp),%esi
  0xa7574615: mov    -0x18(%ebp),%edi
  0xa7574618: ret    
  0xa7574619: movzwl 0x1(%esi),%edx
  0xa757461d: mov    -0x14(%ebp),%ecx
  0xa7574620: shl    $0x2,%edx
  0xa7574623: mov    0xc(%ecx,%edx,4),%eax
  0xa7574627: mov    0x10(%ecx,%edx,4),%ebx
  0xa757462b: mov    0x14(%ecx,%edx,4),%edx
  0xa757462f: mov    %edx,%ecx
  0xa7574631: and    $0xff,%ecx
  0xa7574637: mov    -0x4(%esp,%ecx,4),%ecx
  0xa757463b: mov    %edx,%esi
  0xa757463d: shr    $0x1c,%edx
  0xa7574640: mov    -0x48724f60(,%edx,4),%edx
  0xa7574647: push   %edx
  0xa7574648: mov    %esi,%edx
  0xa757464a: mov    -0x1c(%ebp),%esi
  0xa757464d: mov    %edx,%edi
  0xa757464f: and    $0x800000,%edi
  0xa7574655: je     0xa7574919
  0xa757465b: mov    %edx,%eax
  0xa757465d: and    $0x100000,%eax
  0xa7574663: je     0xa7574784
  0xa7574669: cmp    (%ecx),%eax
  0xa757466b: mov    -0x10(%ebp),%eax
  0xa757466e: test   %eax,%eax
  0xa7574670: je     0xa7574684
  0xa7574676: addl   $0x1,0x4(%eax)
  0xa757467a: sbbl   $0x0,0x4(%eax)
  0xa757467e: add    $0x18,%eax
  0xa7574681: mov    %eax,-0x10(%ebp)
  0xa7574684: mov    -0x10(%ebp),%eax
  0xa7574687: test   %eax,%eax
  0xa7574689: je     0xa757477a
  0xa757468f: cmpb   $0xb,-0x18(%eax)
  0xa7574693: jne    0xa757477a
  0xa7574699: add    $0x4,%eax
  0xa757469c: mov    -0x4(%eax),%esi
  0xa757469f: sub    $0x0,%esi
  0xa75746a2: cmp    $0x2,%esi
  0xa75746a5: jl     0xa7574772
  0xa75746ab: mov    0x8(%ebx),%esi
  0xa75746ae: movzwl 0x24(%esi),%esi
  0xa75746b2: sub    (%eax),%esi
  0xa75746b4: sub    $0x1,%esi
  0xa75746b7: mov    0x4(%esp,%esi,4),%esi
  0xa75746bb: test   %esi,%esi
  0xa75746bd: jne    0xa75746c5
  0xa75746bf: orl    $0x1,0x4(%eax)
  0xa75746c3: jmp    0xa7574701
  0xa75746c5: mov    0x4(%esi),%esi
  0xa75746c8: xor    0x4(%eax),%esi
  0xa75746cb: test   $0xfffffffc,%esi
  0xa75746d1: je     0xa7574701
  0xa75746d3: test   $0x2,%esi
  0xa75746d9: jne    0xa7574701
  0xa75746db: cmpl   $0x0,0x4(%eax)
  0xa75746e2: je     0xa75746fe
  0xa75746e4: cmpl   $0x1,0x4(%eax)
  0xa75746eb: je     0xa75746fe
  0xa75746ed: xor    0x4(%eax),%esi
  0xa75746f0: test   $0xfffffffc,%esi
  0xa75746f6: je     0xa7574701
  0xa75746f8: orl    $0x2,0x4(%eax)
  0xa75746fc: jmp    0xa7574701
  0xa75746fe: mov    %esi,0x4(%eax)
  0xa7574701: add    $0x8,%eax
  0xa7574704: mov    -0xc(%eax),%esi
  0xa7574707: sub    $0x2,%esi
  0xa757470a: cmp    $0x2,%esi
  0xa757470d: jl     0xa7574772
  0xa7574713: mov    0x8(%ebx),%esi
  0xa7574716: movzwl 0x24(%esi),%esi
  0xa757471a: sub    (%eax),%esi
  0xa757471c: sub    $0x1,%esi
  0xa757471f: mov    0x4(%esp,%esi,4),%esi
  0xa7574723: test   %esi,%esi
  0xa7574725: jne    0xa757472d
  0xa7574727: orl    $0x1,0x4(%eax)
  0xa757472b: jmp    0xa7574769
  0xa757472d: mov    0x4(%esi),%esi
  0xa7574730: xor    0x4(%eax),%esi
  0xa7574733: test   $0xfffffffc,%esi
  0xa7574739: je     0xa7574769
  0xa757473b: test   $0x2,%esi
  0xa7574741: jne    0xa7574769
  0xa7574743: cmpl   $0x0,0x4(%eax)
  0xa757474a: je     0xa7574766
  0xa757474c: cmpl   $0x1,0x4(%eax)
  0xa7574753: je     0xa7574766
  0xa7574755: xor    0x4(%eax),%esi
  0xa7574758: test   $0xfffffffc,%esi
  0xa757475e: je     0xa7574769
  0xa7574760: orl    $0x2,0x4(%eax)
  0xa7574764: jmp    0xa7574769
  0xa7574766: mov    %esi,0x4(%eax)
  0xa7574769: add    $0x8,%eax
  0xa757476c: mov    -0x14(%eax),%esi
  0xa757476f: sub    $0x4,%esi
  0xa7574772: shl    $0x2,%esi
  0xa7574775: add    %esi,%eax
  0xa7574777: mov    %eax,-0x10(%ebp)
  0xa757477a: lea    0x4(%esp),%esi
  0xa757477e: mov    %esi,-0x8(%ebp)
  0xa7574781: jmp    *0x38(%ebx)
  0xa7574784: mov    0x4(%ecx),%eax
  0xa7574787: mov    -0x10(%ebp),%edi
  0xa757478a: test   %edi,%edi
  0xa757478c: je     0xa7574812
  0xa7574792: mov    0x8(%edi),%edx
  0xa7574795: cmp    %eax,%edx
  0xa7574797: jne    0xa75747aa
  0xa757479d: addl   $0x1,0xc(%edi)
  0xa75747a1: sbbl   $0x0,0xc(%edi)
  0xa75747a5: jmp    0xa757480c
  0xa75747aa: test   %edx,%edx
  0xa75747ac: je     0xa75747eb
  0xa75747b2: mov    0x10(%edi),%edx
  0xa75747b5: cmp    %eax,%edx
  0xa75747b7: jne    0xa75747ca
  0xa75747bd: addl   $0x1,0x14(%edi)
  0xa75747c1: sbbl   $0x0,0x14(%edi)
  0xa75747c5: jmp    0xa757480c
  0xa75747ca: test   %edx,%edx
  0xa75747cc: je     0xa75747db
  0xa75747ce: addl   $0x1,0x4(%edi)
  0xa75747d2: sbbl   $0x0,0x4(%edi)
  0xa75747d6: jmp    0xa757480c
  0xa75747db: mov    %eax,0x10(%edi)
  0xa75747de: mov    $0x1,%edx
  0xa75747e3: mov    %edx,0x14(%edi)
  0xa75747e6: jmp    0xa757480c
  0xa75747eb: cmp    0x10(%edi),%eax
  0xa75747ee: jne    0xa7574801
  0xa75747f4: addl   $0x1,0x14(%edi)
  0xa75747f8: sbbl   $0x0,0x14(%edi)
  0xa75747fc: jmp    0xa757480c
  0xa7574801: mov    %eax,0x8(%edi)
  0xa7574804: mov    $0x1,%edx
  0xa7574809: mov    %edx,0xc(%edi)
  0xa757480c: add    $0x18,%edi
  0xa757480f: mov    %edi,-0x10(%ebp)
  0xa7574812: mov    0x100(%eax,%ebx,4),%ebx
  0xa7574819: mov    -0x10(%ebp),%edx
  0xa757481c: test   %edx,%edx
  0xa757481e: je     0xa757490f
  0xa7574824: cmpb   $0xb,-0x18(%edx)
  0xa7574828: jne    0xa757490f
  0xa757482e: add    $0x4,%edx
  0xa7574831: mov    -0x4(%edx),%esi
  0xa7574834: sub    $0x0,%esi
  0xa7574837: cmp    $0x2,%esi
  0xa757483a: jl     0xa7574907
  0xa7574840: mov    0x8(%ebx),%esi
  0xa7574843: movzwl 0x24(%esi),%esi
  0xa7574847: sub    (%edx),%esi
  0xa7574849: sub    $0x1,%esi
  0xa757484c: mov    0x4(%esp,%esi,4),%esi
  0xa7574850: test   %esi,%esi
  0xa7574852: jne    0xa757485a
  0xa7574854: orl    $0x1,0x4(%edx)
  0xa7574858: jmp    0xa7574896
  0xa757485a: mov    0x4(%esi),%esi
  0xa757485d: xor    0x4(%edx),%esi
  0xa7574860: test   $0xfffffffc,%esi
  0xa7574866: je     0xa7574896
  0xa7574868: test   $0x2,%esi
  0xa757486e: jne    0xa7574896
  0xa7574870: cmpl   $0x0,0x4(%edx)
  0xa7574877: je     0xa7574893
  0xa7574879: cmpl   $0x1,0x4(%edx)
  0xa7574880: je     0xa7574893
  0xa7574882: xor    0x4(%edx),%esi
  0xa7574885: test   $0xfffffffc,%esi
  0xa757488b: je     0xa7574896
  0xa757488d: orl    $0x2,0x4(%edx)
  0xa7574891: jmp    0xa7574896
  0xa7574893: mov    %esi,0x4(%edx)
  0xa7574896: add    $0x8,%edx
  0xa7574899: mov    -0xc(%edx),%esi
  0xa757489c: sub    $0x2,%esi
  0xa757489f: cmp    $0x2,%esi
  0xa75748a2: jl     0xa7574907
  0xa75748a8: mov    0x8(%ebx),%esi
  0xa75748ab: movzwl 0x24(%esi),%esi
  0xa75748af: sub    (%edx),%esi
  0xa75748b1: sub    $0x1,%esi
  0xa75748b4: mov    0x4(%esp,%esi,4),%esi
  0xa75748b8: test   %esi,%esi
  0xa75748ba: jne    0xa75748c2
  0xa75748bc: orl    $0x1,0x4(%edx)
  0xa75748c0: jmp    0xa75748fe
  0xa75748c2: mov    0x4(%esi),%esi
  0xa75748c5: xor    0x4(%edx),%esi
  0xa75748c8: test   $0xfffffffc,%esi
  0xa75748ce: je     0xa75748fe
  0xa75748d0: test   $0x2,%esi
  0xa75748d6: jne    0xa75748fe
  0xa75748d8: cmpl   $0x0,0x4(%edx)
  0xa75748df: je     0xa75748fb
  0xa75748e1: cmpl   $0x1,0x4(%edx)
  0xa75748e8: je     0xa75748fb
  0xa75748ea: xor    0x4(%edx),%esi
  0xa75748ed: test   $0xfffffffc,%esi
  0xa75748f3: je     0xa75748fe
  0xa75748f5: orl    $0x2,0x4(%edx)
  0xa75748f9: jmp    0xa75748fe
  0xa75748fb: mov    %esi,0x4(%edx)
  0xa75748fe: add    $0x8,%edx
  0xa7574901: mov    -0x14(%edx),%esi
  0xa7574904: sub    $0x4,%esi
  0xa7574907: shl    $0x2,%esi
  0xa757490a: add    %esi,%edx
  0xa757490c: mov    %edx,-0x10(%ebp)
  0xa757490f: lea    0x4(%esp),%esi
  0xa7574913: mov    %esi,-0x8(%ebp)
  0xa7574916: jmp    *0x38(%ebx)
  0xa7574919: mov    -0x18(%ebp),%edi
  0xa757491c: mov    0x4(%ecx),%edx
  0xa757491f: mov    0xac(%edx),%edi
  0xa7574925: lea    0x100(%edx,%edi,4),%edi
  0xa757492c: add    $0x7,%edi
  0xa757492f: and    $0xfffffff8,%edi
  0xa7574932: mov    (%edi),%esi
  0xa7574934: cmp    %esi,%eax
  0xa7574936: je     0xa7574949
  0xa7574938: test   %esi,%esi
  0xa757493a: je     0xa7574bf5
  0xa7574940: add    $0x8,%edi
  0xa7574943: mov    (%edi),%esi
  0xa7574945: cmp    %esi,%eax
  0xa7574947: jne    0xa7574938
  0xa7574949: mov    -0x1c(%ebp),%esi
  0xa757494c: mov    -0x10(%ebp),%esi
  0xa757494f: test   %esi,%esi
  0xa7574951: je     0xa75749d7
  0xa7574957: mov    0x8(%esi),%edi
  0xa757495a: cmp    %edx,%edi
  0xa757495c: jne    0xa757496f
  0xa7574962: addl   $0x1,0xc(%esi)
  0xa7574966: sbbl   $0x0,0xc(%esi)
  0xa757496a: jmp    0xa75749d1
  0xa757496f: test   %edi,%edi
  0xa7574971: je     0xa75749b0
  0xa7574977: mov    0x10(%esi),%edi
  0xa757497a: cmp    %edx,%edi
  0xa757497c: jne    0xa757498f
  0xa7574982: addl   $0x1,0x14(%esi)
  0xa7574986: sbbl   $0x0,0x14(%esi)
  0xa757498a: jmp    0xa75749d1
  0xa757498f: test   %edi,%edi
  0xa7574991: je     0xa75749a0
  0xa7574993: addl   $0x1,0x4(%esi)
  0xa7574997: sbbl   $0x0,0x4(%esi)
  0xa757499b: jmp    0xa75749d1
  0xa75749a0: mov    %edx,0x10(%esi)
  0xa75749a3: mov    $0x1,%edi
  0xa75749a8: mov    %edi,0x14(%esi)
  0xa75749ab: jmp    0xa75749d1
  0xa75749b0: cmp    0x10(%esi),%edx
  0xa75749b3: jne    0xa75749c6
  0xa75749b9: addl   $0x1,0x14(%esi)
  0xa75749bd: sbbl   $0x0,0x14(%esi)
  0xa75749c1: jmp    0xa75749d1
  0xa75749c6: mov    %edx,0x8(%esi)
  0xa75749c9: mov    $0x1,%edi
  0xa75749ce: mov    %edi,0xc(%esi)
  0xa75749d1: add    $0x18,%esi
  0xa75749d4: mov    %esi,-0x10(%ebp)
  0xa75749d7: mov    0x8(%ebx),%eax
  0xa75749da: mov    0x8(%eax),%eax
  0xa75749dd: mov    0x10(%eax),%eax
  0xa75749e0: mov    0x18(%ebx),%ebx
  0xa75749e3: sub    $0xfffffff6,%ebx
  0xa75749e6: neg    %ebx
  0xa75749e8: mov    0xac(%edx),%esi
  0xa75749ee: lea    0x100(%edx,%esi,4),%esi
  0xa75749f5: add    $0x7,%esi
  0xa75749f8: and    $0xfffffff8,%esi
  0xa75749fb: lea    (%edx,%ebx,4),%edx
  0xa75749fe: mov    (%esi),%ebx
  0xa7574a00: cmp    %ebx,%eax
  0xa7574a02: je     0xa7574a15
  0xa7574a04: test   %ebx,%ebx
  0xa7574a06: je     0xa7574bf5
  0xa7574a0c: add    $0x8,%esi
  0xa7574a0f: mov    (%esi),%ebx
  0xa7574a11: cmp    %ebx,%eax
  0xa7574a13: jne    0xa7574a04
  0xa7574a15: mov    0x4(%esi),%esi
  0xa7574a18: mov    (%edx,%esi,1),%ebx
  0xa7574a1b: test   %ebx,%ebx
  0xa7574a1d: je     0xa7574b34
  0xa7574a23: mov    -0x10(%ebp),%edx
  0xa7574a26: test   %edx,%edx
  0xa7574a28: je     0xa7574b19
  0xa7574a2e: cmpb   $0xb,-0x18(%edx)
  0xa7574a32: jne    0xa7574b19
  0xa7574a38: add    $0x4,%edx
  0xa7574a3b: mov    -0x4(%edx),%esi
  0xa7574a3e: sub    $0x0,%esi
  0xa7574a41: cmp    $0x2,%esi
  0xa7574a44: jl     0xa7574b11
  0xa7574a4a: mov    0x8(%ebx),%esi
  0xa7574a4d: movzwl 0x24(%esi),%esi
  0xa7574a51: sub    (%edx),%esi
  0xa7574a53: sub    $0x1,%esi
  0xa7574a56: mov    0x4(%esp,%esi,4),%esi
  0xa7574a5a: test   %esi,%esi
  0xa7574a5c: jne    0xa7574a64
  0xa7574a5e: orl    $0x1,0x4(%edx)
  0xa7574a62: jmp    0xa7574aa0
  0xa7574a64: mov    0x4(%esi),%esi
  0xa7574a67: xor    0x4(%edx),%esi
  0xa7574a6a: test   $0xfffffffc,%esi
  0xa7574a70: je     0xa7574aa0
  0xa7574a72: test   $0x2,%esi
  0xa7574a78: jne    0xa7574aa0
  0xa7574a7a: cmpl   $0x0,0x4(%edx)
  0xa7574a81: je     0xa7574a9d
  0xa7574a83: cmpl   $0x1,0x4(%edx)
  0xa7574a8a: je     0xa7574a9d
  0xa7574a8c: xor    0x4(%edx),%esi
  0xa7574a8f: test   $0xfffffffc,%esi
  0xa7574a95: je     0xa7574aa0
  0xa7574a97: orl    $0x2,0x4(%edx)
  0xa7574a9b: jmp    0xa7574aa0
  0xa7574a9d: mov    %esi,0x4(%edx)
  0xa7574aa0: add    $0x8,%edx
  0xa7574aa3: mov    -0xc(%edx),%esi
  0xa7574aa6: sub    $0x2,%esi
  0xa7574aa9: cmp    $0x2,%esi
  0xa7574aac: jl     0xa7574b11
  0xa7574ab2: mov    0x8(%ebx),%esi
  0xa7574ab5: movzwl 0x24(%esi),%esi
  0xa7574ab9: sub    (%edx),%esi
  0xa7574abb: sub    $0x1,%esi
  0xa7574abe: mov    0x4(%esp,%esi,4),%esi
  0xa7574ac2: test   %esi,%esi
  0xa7574ac4: jne    0xa7574acc
  0xa7574ac6: orl    $0x1,0x4(%edx)
  0xa7574aca: jmp    0xa7574b08
  0xa7574acc: mov    0x4(%esi),%esi
  0xa7574acf: xor    0x4(%edx),%esi
  0xa7574ad2: test   $0xfffffffc,%esi
  0xa7574ad8: je     0xa7574b08
  0xa7574ada: test   $0x2,%esi
  0xa7574ae0: jne    0xa7574b08
  0xa7574ae2: cmpl   $0x0,0x4(%edx)
  0xa7574ae9: je     0xa7574b05
  0xa7574aeb: cmpl   $0x1,0x4(%edx)
  0xa7574af2: je     0xa7574b05
  0xa7574af4: xor    0x4(%edx),%esi
  0xa7574af7: test   $0xfffffffc,%esi
  0xa7574afd: je     0xa7574b08
  0xa7574aff: orl    $0x2,0x4(%edx)
  0xa7574b03: jmp    0xa7574b08
  0xa7574b05: mov    %esi,0x4(%edx)
  0xa7574b08: add    $0x8,%edx
  0xa7574b0b: mov    -0x14(%edx),%esi
  0xa7574b0e: sub    $0x4,%esi
  0xa7574b11: shl    $0x2,%esi
  0xa7574b14: add    %esi,%edx
  0xa7574b16: mov    %edx,-0x10(%ebp)
  0xa7574b19: lea    0x4(%esp),%esi
  0xa7574b1d: mov    %esi,-0x8(%ebp)
  0xa7574b20: jmp    *0x38(%ebx)
  0xa7574b23: push   $0xb7302e8b
  0xa7574b28: call   0xa7574b2d
  0xa7574b2d: pusha  
  0xa7574b2e: call   0xb6ff5f32
  0xa7574b33: hlt    
  0xa7574b34: pop    %ebx
  0xa7574b35: mov    -0x1c(%ebp),%esi
  0xa7574b38: mov    -0x18(%ebp),%edi
  0xa7574b3b: call   0xa7574b45
  0xa7574b40: jmp    0xa7574be4
  0xa7574b45: lea    0x4(%esp),%eax
  0xa7574b49: cmpl   $0x0,-0x8(%ebp)
  0xa7574b50: je     0xa7574b67
  0xa7574b56: push   $0xb7449b58
  0xa7574b5b: call   0xa7574b60
  0xa7574b60: pusha  
  0xa7574b61: call   0xb6ff5f32
  0xa7574b66: hlt    
  0xa7574b67: mov    %esi,-0x1c(%ebp)
  0xa7574b6a: mov    %esp,%edi
  0xa7574b6c: shr    $0xc,%edi
  0xa7574b6f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7574b76: push   %edi
  0xa7574b77: mov    %ebp,0x148(%edi)
  0xa7574b7d: mov    %eax,0x140(%edi)
  0xa7574b83: call   0xb6e5e204
  0xa7574b88: add    $0x4,%esp
  0xa7574b8b: push   %eax
  0xa7574b8c: mov    %esp,%eax
  0xa7574b8e: shr    $0xc,%eax
  0xa7574b91: mov    -0x4871aba0(,%eax,4),%eax
  0xa7574b98: cmp    %eax,%edi
  0xa7574b9a: je     0xa7574bb1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7574ba0: push   $0xb74acf8c
  0xa7574ba5: call   0xa7574baa
  0xa7574baa: pusha  
  0xa7574bab: call   0xb6ff5f32
  0xa7574bb0: hlt    
  0xa7574bb1: pop    %eax
  0xa7574bb2: movl   $0x0,0x140(%edi)
  0xa7574bbc: movl   $0x0,0x148(%edi)
  0xa7574bc6: movl   $0x0,0x144(%edi)
  0xa7574bd0: cmpl   $0x0,0x4(%edi)
  0xa7574bd7: jne    0xa7556400
  0xa7574bdd: mov    -0x1c(%ebp),%esi
  0xa7574be0: mov    -0x18(%ebp),%edi
  0xa7574be3: ret    
  0xa7574be4: push   $0xb7302e8b
  0xa7574be9: call   0xa7574bee
  0xa7574bee: pusha  
  0xa7574bef: call   0xb6ff5f32
  0xa7574bf4: hlt    
  0xa7574bf5: pop    %ebx
  0xa7574bf6: mov    -0x1c(%ebp),%esi
  0xa7574bf9: mov    -0x18(%ebp),%edi
  0xa7574bfc: call   0xa7574c06
  0xa7574c01: jmp    0xa7574ca5
  0xa7574c06: lea    0x4(%esp),%eax
  0xa7574c0a: cmpl   $0x0,-0x8(%ebp)
  0xa7574c11: je     0xa7574c28
  0xa7574c17: push   $0xb7449b58
  0xa7574c1c: call   0xa7574c21
  0xa7574c21: pusha  
  0xa7574c22: call   0xb6ff5f32
  0xa7574c27: hlt    
  0xa7574c28: mov    %esi,-0x1c(%ebp)
  0xa7574c2b: mov    %esp,%edi
  0xa7574c2d: shr    $0xc,%edi
  0xa7574c30: mov    -0x4871aba0(,%edi,4),%edi
  0xa7574c37: push   %edi
  0xa7574c38: mov    %ebp,0x148(%edi)
  0xa7574c3e: mov    %eax,0x140(%edi)
  0xa7574c44: call   0xb6e5e386
  0xa7574c49: add    $0x4,%esp
  0xa7574c4c: push   %eax
  0xa7574c4d: mov    %esp,%eax
  0xa7574c4f: shr    $0xc,%eax
  0xa7574c52: mov    -0x4871aba0(,%eax,4),%eax
  0xa7574c59: cmp    %eax,%edi
  0xa7574c5b: je     0xa7574c72
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7574c61: push   $0xb74acf8c
  0xa7574c66: call   0xa7574c6b
  0xa7574c6b: pusha  
  0xa7574c6c: call   0xb6ff5f32
  0xa7574c71: hlt    
  0xa7574c72: pop    %eax
  0xa7574c73: movl   $0x0,0x140(%edi)
  0xa7574c7d: movl   $0x0,0x148(%edi)
  0xa7574c87: movl   $0x0,0x144(%edi)
  0xa7574c91: cmpl   $0x0,0x4(%edi)
  0xa7574c98: jne    0xa7556400
  0xa7574c9e: mov    -0x1c(%ebp),%esi
  0xa7574ca1: mov    -0x18(%ebp),%edi
  0xa7574ca4: ret    
  0xa7574ca5: push   $0xb7302e8b
  0xa7574caa: call   0xa7574caf
  0xa7574caf: pusha  
  0xa7574cb0: call   0xb6ff5f32
  0xa7574cb5: hlt    
  0xa7574cb6: push   $0xb7302e8b
  0xa7574cbb: call   0xa7574cc0
  0xa7574cc0: pusha  
  0xa7574cc1: call   0xb6ff5f32
  0xa7574cc6: hlt    
  0xa7574cc7: nop
  0xa7574cc8: int3   
  0xa7574cc9: int3   
  0xa7574cca: int3   
  0xa7574ccb: int3   
  0xa7574ccc: int3   
  0xa7574ccd: int3   
  0xa7574cce: int3   
  0xa7574ccf: int3   
  0xa7574cd0: int3   
  0xa7574cd1: int3   
  0xa7574cd2: int3   
  0xa7574cd3: int3   
  0xa7574cd4: int3   
  0xa7574cd5: int3   
  0xa7574cd6: int3   
  0xa7574cd7: int3   
  0xa7574cd8: int3   
  0xa7574cd9: int3   
  0xa7574cda: int3   
  0xa7574cdb: int3   
  0xa7574cdc: int3   
  0xa7574cdd: int3   
  0xa7574cde: int3   
  0xa7574cdf: int3   

----------------------------------------------------------------------
invokedynamic  186 invokedynamic  [0xa7574d00, 0xa7574f80]  640 bytes

  0xa7574d00: sub    $0x4,%esp
  0xa7574d03: fstps  (%esp)
  0xa7574d06: jmp    0xa7574d24
  0xa7574d0b: sub    $0x8,%esp
  0xa7574d0e: fstpl  (%esp)
  0xa7574d11: jmp    0xa7574d24
  0xa7574d16: push   %edx
  0xa7574d17: push   %eax
  0xa7574d18: jmp    0xa7574d24
  0xa7574d1d: push   %eax
  0xa7574d1e: jmp    0xa7574d24
  0xa7574d23: push   %eax
  0xa7574d24: mov    %esi,-0x1c(%ebp)
  0xa7574d27: mov    0x1(%esi),%edx
  0xa7574d2a: not    %edx
  0xa7574d2c: mov    -0x14(%ebp),%ecx
  0xa7574d2f: shl    $0x2,%edx
  0xa7574d32: mov    0x8(%ecx,%edx,4),%ebx
  0xa7574d36: shr    $0x10,%ebx
  0xa7574d39: and    $0xff,%ebx
  0xa7574d3f: cmp    $0xba,%ebx
  0xa7574d45: je     0xa7574e05
  0xa7574d4b: mov    $0xba,%ebx
  0xa7574d50: call   0xa7574d5a
  0xa7574d55: jmp    0xa7574dfa
  0xa7574d5a: push   %ebx
  0xa7574d5b: lea    0x8(%esp),%eax
  0xa7574d5f: cmpl   $0x0,-0x8(%ebp)
  0xa7574d66: je     0xa7574d7d
  0xa7574d6c: push   $0xb7449b58
  0xa7574d71: call   0xa7574d76
  0xa7574d76: pusha  
  0xa7574d77: call   0xb6ff5f32
  0xa7574d7c: hlt    
  0xa7574d7d: mov    %esi,-0x1c(%ebp)
  0xa7574d80: mov    %esp,%edi
  0xa7574d82: shr    $0xc,%edi
  0xa7574d85: mov    -0x4871aba0(,%edi,4),%edi
  0xa7574d8c: push   %edi
  0xa7574d8d: mov    %ebp,0x148(%edi)
  0xa7574d93: mov    %eax,0x140(%edi)
  0xa7574d99: call   0xb6e6085c
  0xa7574d9e: add    $0x8,%esp
  0xa7574da1: push   %eax
  0xa7574da2: mov    %esp,%eax
  0xa7574da4: shr    $0xc,%eax
  0xa7574da7: mov    -0x4871aba0(,%eax,4),%eax
  0xa7574dae: cmp    %eax,%edi
  0xa7574db0: je     0xa7574dc7
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7574db6: push   $0xb74acf8c
  0xa7574dbb: call   0xa7574dc0
  0xa7574dc0: pusha  
  0xa7574dc1: call   0xb6ff5f32
  0xa7574dc6: hlt    
  0xa7574dc7: pop    %eax
  0xa7574dc8: movl   $0x0,0x140(%edi)
  0xa7574dd2: movl   $0x0,0x148(%edi)
  0xa7574ddc: movl   $0x0,0x144(%edi)
  0xa7574de6: cmpl   $0x0,0x4(%edi)
  0xa7574ded: jne    0xa7556400
  0xa7574df3: mov    -0x1c(%ebp),%esi
  0xa7574df6: mov    -0x18(%ebp),%edi
  0xa7574df9: ret    
  0xa7574dfa: mov    0x1(%esi),%edx
  0xa7574dfd: not    %edx
  0xa7574dff: mov    -0x14(%ebp),%ecx
  0xa7574e02: shl    $0x2,%edx
  0xa7574e05: mov    0xc(%ecx,%edx,4),%ebx
  0xa7574e09: mov    0x10(%ecx,%edx,4),%eax
  0xa7574e0d: mov    0x14(%ecx,%edx,4),%edx
  0xa7574e11: test   $0x1000000,%edx
  0xa7574e17: je     0xa7574e34
  0xa7574e19: push   %ebx
  0xa7574e1a: mov    %eax,%ebx
  0xa7574e1c: shl    $0x2,%ebx
  0xa7574e1f: mov    -0xc(%ebp),%eax
  0xa7574e22: mov    0x8(%eax),%eax
  0xa7574e25: mov    0x8(%eax),%eax
  0xa7574e28: mov    0x18(%eax),%eax
  0xa7574e2b: mov    (%eax),%eax
  0xa7574e2d: add    %ebx,%eax
  0xa7574e2f: mov    0xc(%eax),%eax
  0xa7574e32: pop    %ebx
  0xa7574e33: push   %eax
  0xa7574e34: shr    $0x1c,%edx
  0xa7574e37: mov    -0x48724f20(,%edx,4),%edx
  0xa7574e3e: push   %edx
  0xa7574e3f: mov    -0x10(%ebp),%esi
  0xa7574e42: test   %esi,%esi
  0xa7574e44: je     0xa7574e58
  0xa7574e4a: addl   $0x1,0x4(%esi)
  0xa7574e4e: sbbl   $0x0,0x4(%esi)
  0xa7574e52: add    $0x8,%esi
  0xa7574e55: mov    %esi,-0x10(%ebp)
  0xa7574e58: mov    -0x10(%ebp),%edx
  0xa7574e5b: test   %edx,%edx
  0xa7574e5d: je     0xa7574f4e
  0xa7574e63: cmpb   $0xa,-0x8(%edx)
  0xa7574e67: jne    0xa7574f4e
  0xa7574e6d: add    $0x4,%edx
  0xa7574e70: mov    -0x4(%edx),%esi
  0xa7574e73: sub    $0x0,%esi
  0xa7574e76: cmp    $0x2,%esi
  0xa7574e79: jl     0xa7574f46
  0xa7574e7f: mov    0x8(%ebx),%esi
  0xa7574e82: movzwl 0x24(%esi),%esi
  0xa7574e86: sub    (%edx),%esi
  0xa7574e88: sub    $0x1,%esi
  0xa7574e8b: mov    0x4(%esp,%esi,4),%esi
  0xa7574e8f: test   %esi,%esi
  0xa7574e91: jne    0xa7574e99
  0xa7574e93: orl    $0x1,0x4(%edx)
  0xa7574e97: jmp    0xa7574ed5
  0xa7574e99: mov    0x4(%esi),%esi
  0xa7574e9c: xor    0x4(%edx),%esi
  0xa7574e9f: test   $0xfffffffc,%esi
  0xa7574ea5: je     0xa7574ed5
  0xa7574ea7: test   $0x2,%esi
  0xa7574ead: jne    0xa7574ed5
  0xa7574eaf: cmpl   $0x0,0x4(%edx)
  0xa7574eb6: je     0xa7574ed2
  0xa7574eb8: cmpl   $0x1,0x4(%edx)
  0xa7574ebf: je     0xa7574ed2
  0xa7574ec1: xor    0x4(%edx),%esi
  0xa7574ec4: test   $0xfffffffc,%esi
  0xa7574eca: je     0xa7574ed5
  0xa7574ecc: orl    $0x2,0x4(%edx)
  0xa7574ed0: jmp    0xa7574ed5
  0xa7574ed2: mov    %esi,0x4(%edx)
  0xa7574ed5: add    $0x8,%edx
  0xa7574ed8: mov    -0xc(%edx),%esi
  0xa7574edb: sub    $0x2,%esi
  0xa7574ede: cmp    $0x2,%esi
  0xa7574ee1: jl     0xa7574f46
  0xa7574ee7: mov    0x8(%ebx),%esi
  0xa7574eea: movzwl 0x24(%esi),%esi
  0xa7574eee: sub    (%edx),%esi
  0xa7574ef0: sub    $0x1,%esi
  0xa7574ef3: mov    0x4(%esp,%esi,4),%esi
  0xa7574ef7: test   %esi,%esi
  0xa7574ef9: jne    0xa7574f01
  0xa7574efb: orl    $0x1,0x4(%edx)
  0xa7574eff: jmp    0xa7574f3d
  0xa7574f01: mov    0x4(%esi),%esi
  0xa7574f04: xor    0x4(%edx),%esi
  0xa7574f07: test   $0xfffffffc,%esi
  0xa7574f0d: je     0xa7574f3d
  0xa7574f0f: test   $0x2,%esi
  0xa7574f15: jne    0xa7574f3d
  0xa7574f17: cmpl   $0x0,0x4(%edx)
  0xa7574f1e: je     0xa7574f3a
  0xa7574f20: cmpl   $0x1,0x4(%edx)
  0xa7574f27: je     0xa7574f3a
  0xa7574f29: xor    0x4(%edx),%esi
  0xa7574f2c: test   $0xfffffffc,%esi
  0xa7574f32: je     0xa7574f3d
  0xa7574f34: orl    $0x2,0x4(%edx)
  0xa7574f38: jmp    0xa7574f3d
  0xa7574f3a: mov    %esi,0x4(%edx)
  0xa7574f3d: add    $0x8,%edx
  0xa7574f40: mov    -0x14(%edx),%esi
  0xa7574f43: sub    $0x4,%esi
  0xa7574f46: shl    $0x2,%esi
  0xa7574f49: add    %esi,%edx
  0xa7574f4b: mov    %edx,-0x10(%ebp)
  0xa7574f4e: lea    0x4(%esp),%esi
  0xa7574f52: mov    %esi,-0x8(%ebp)
  0xa7574f55: jmp    *0x38(%ebx)
  0xa7574f58: push   $0xb7302e8b
  0xa7574f5d: call   0xa7574f62
  0xa7574f62: pusha  
  0xa7574f63: call   0xb6ff5f32
  0xa7574f68: hlt    
  0xa7574f69: nop
  0xa7574f6a: nop
  0xa7574f6b: nop
  0xa7574f6c: int3   
  0xa7574f6d: int3   
  0xa7574f6e: int3   
  0xa7574f6f: int3   
  0xa7574f70: int3   
  0xa7574f71: int3   
  0xa7574f72: int3   
  0xa7574f73: int3   
  0xa7574f74: int3   
  0xa7574f75: int3   
  0xa7574f76: int3   
  0xa7574f77: int3   
  0xa7574f78: int3   
  0xa7574f79: int3   
  0xa7574f7a: int3   
  0xa7574f7b: int3   
  0xa7574f7c: int3   
  0xa7574f7d: int3   
  0xa7574f7e: int3   
  0xa7574f7f: int3   

----------------------------------------------------------------------
new  187 new  [0xa7574fa0, 0xa75751a0]  512 bytes

  0xa7574fa0: sub    $0x4,%esp
  0xa7574fa3: fstps  (%esp)
  0xa7574fa6: jmp    0xa7574fc4
  0xa7574fab: sub    $0x8,%esp
  0xa7574fae: fstpl  (%esp)
  0xa7574fb1: jmp    0xa7574fc4
  0xa7574fb6: push   %edx
  0xa7574fb7: push   %eax
  0xa7574fb8: jmp    0xa7574fc4
  0xa7574fbd: push   %eax
  0xa7574fbe: jmp    0xa7574fc4
  0xa7574fc3: push   %eax
  0xa7574fc4: movzwl 0x1(%esi),%edx
  0xa7574fc8: bswap  %edx
  0xa7574fca: shr    $0x10,%edx
  0xa7574fcd: mov    -0xc(%ebp),%ecx
  0xa7574fd0: mov    0x8(%ecx),%ecx
  0xa7574fd3: mov    0x8(%ecx),%ecx
  0xa7574fd6: mov    0x8(%ecx),%eax
  0xa7574fd9: cmpb   $0x7,0x4(%eax,%edx,1)
  0xa7574fde: jne    0xa75750c4
  0xa7574fe4: mov    0x30(%ecx,%edx,4),%ecx
  0xa7574fe8: push   %ecx
  0xa7574fe9: cmpb   $0x4,0xda(%ecx)
  0xa7574ff0: jne    0xa75750c3
  0xa7574ff6: mov    0x8(%ecx),%edx
  0xa7574ff9: test   $0x1,%edx
  0xa7574fff: jne    0xa75750c3
  0xa7575005: mov    %esp,%ecx
  0xa7575007: shr    $0xc,%ecx
  0xa757500a: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7575011: mov    0x44(%ecx),%eax
  0xa7575014: lea    (%eax,%edx,1),%ebx
  0xa7575017: cmp    0x4c(%ecx),%ebx
  0xa757501a: ja     0xa7575028
  0xa7575020: mov    %ebx,0x44(%ecx)
  0xa7575023: jmp    0xa7575054
  0xa7575028: mov    0xb660fd6c,%eax
  0xa757502e: lea    (%eax,%edx,1),%ebx
  0xa7575031: cmp    0xb660fd58,%ebx
  0xa7575037: ja     0xa75750c3
  0xa757503d: lock cmpxchg %ebx,0xb660fd6c
  0xa7575045: jne    0xa7575028
  0xa7575047: add    %edx,0x88(%ecx)
  0xa757504d: adcl   $0x0,0x8c(%ecx)
  0xa7575054: sub    $0x8,%edx
  0xa7575057: je     0xa757507f
  0xa757505d: xor    %ecx,%ecx
  0xa757505f: shr    $0x3,%edx
  0xa7575062: jae    0xa7575075
  0xa7575064: push   $0xb7563ec8
  0xa7575069: call   0xa757506e
  0xa757506e: pusha  
  0xa757506f: call   0xb6ff5f32
  0xa7575074: hlt    
  0xa7575075: mov    %ecx,0x4(%eax,%edx,8)
  0xa7575079: mov    %ecx,(%eax,%edx,8)
  0xa757507c: dec    %edx
  0xa757507d: jne    0xa7575075
  0xa757507f: pop    %ecx
  0xa7575080: mov    0x64(%ecx),%ebx
  0xa7575083: mov    %ebx,(%eax)
  0xa7575085: mov    %ecx,0x4(%eax)
  0xa7575088: cmpb   $0x0,0xb78c1e7f
  0xa757508f: je     0xa75750be
  0xa7575095: push   %eax
  0xa7575096: push   %eax
  0xa7575097: cmpl   $0x0,-0x8(%ebp)
  0xa757509e: je     0xa75750b5
  0xa75750a4: push   $0xb7449b18
  0xa75750a9: call   0xa75750ae
  0xa75750ae: pusha  
  0xa75750af: call   0xb6ff5f32
  0xa75750b4: hlt    
  0xa75750b5: call   0xb7175732
  0xa75750ba: add    $0x4,%esp
  0xa75750bd: pop    %eax
  0xa75750be: jmp    0xa7575191
  0xa75750c3: pop    %ecx
  0xa75750c4: mov    -0xc(%ebp),%eax
  0xa75750c7: mov    0x8(%eax),%eax
  0xa75750ca: mov    0x8(%eax),%eax
  0xa75750cd: movzwl 0x1(%esi),%edx
  0xa75750d1: bswap  %edx
  0xa75750d3: shr    $0x10,%edx
  0xa75750d6: call   0xa75750e0
  0xa75750db: jmp    0xa7575191
  0xa75750e0: push   %edx
  0xa75750e1: push   %eax
  0xa75750e2: lea    0xc(%esp),%eax
  0xa75750e6: cmpl   $0x0,-0x8(%ebp)
  0xa75750ed: je     0xa7575104
  0xa75750f3: push   $0xb7449b58
  0xa75750f8: call   0xa75750fd
  0xa75750fd: pusha  
  0xa75750fe: call   0xb6ff5f32
  0xa7575103: hlt    
  0xa7575104: mov    %esi,-0x1c(%ebp)
  0xa7575107: mov    %esp,%edi
  0xa7575109: shr    $0xc,%edi
  0xa757510c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575113: push   %edi
  0xa7575114: mov    %ebp,0x148(%edi)
  0xa757511a: mov    %eax,0x140(%edi)
  0xa7575120: call   0xb6e5bc4e
  0xa7575125: add    $0xc,%esp
  0xa7575128: push   %eax
  0xa7575129: mov    %esp,%eax
  0xa757512b: shr    $0xc,%eax
  0xa757512e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575135: cmp    %eax,%edi
  0xa7575137: je     0xa757514e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757513d: push   $0xb74acf8c
  0xa7575142: call   0xa7575147
  0xa7575147: pusha  
  0xa7575148: call   0xb6ff5f32
  0xa757514d: hlt    
  0xa757514e: pop    %eax
  0xa757514f: movl   $0x0,0x140(%edi)
  0xa7575159: movl   $0x0,0x148(%edi)
  0xa7575163: movl   $0x0,0x144(%edi)
  0xa757516d: cmpl   $0x0,0x4(%edi)
  0xa7575174: jne    0xa7556400
  0xa757517a: mov    0x170(%edi),%eax
  0xa7575180: movl   $0x0,0x170(%edi)
  0xa757518a: mov    -0x1c(%ebp),%esi
  0xa757518d: mov    -0x18(%ebp),%edi
  0xa7575190: ret    
  0xa7575191: movzbl 0x3(%esi),%ebx
  0xa7575195: add    $0x3,%esi
  0xa7575198: jmp    *-0x48722ee0(,%ebx,4)
  0xa757519f: nop

----------------------------------------------------------------------
newarray  188 newarray  [0xa75751c0, 0xa75752a0]  224 bytes

  0xa75751c0: pop    %eax
  0xa75751c1: push   %eax
  0xa75751c2: movzbl 0x1(%esi),%edx
  0xa75751c6: call   0xa75751d0
  0xa75751cb: jmp    0xa7575281
  0xa75751d0: push   %eax
  0xa75751d1: push   %edx
  0xa75751d2: lea    0xc(%esp),%eax
  0xa75751d6: cmpl   $0x0,-0x8(%ebp)
  0xa75751dd: je     0xa75751f4
  0xa75751e3: push   $0xb7449b58
  0xa75751e8: call   0xa75751ed
  0xa75751ed: pusha  
  0xa75751ee: call   0xb6ff5f32
  0xa75751f3: hlt    
  0xa75751f4: mov    %esi,-0x1c(%ebp)
  0xa75751f7: mov    %esp,%edi
  0xa75751f9: shr    $0xc,%edi
  0xa75751fc: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575203: push   %edi
  0xa7575204: mov    %ebp,0x148(%edi)
  0xa757520a: mov    %eax,0x140(%edi)
  0xa7575210: call   0xb6e5bee8
  0xa7575215: add    $0xc,%esp
  0xa7575218: push   %eax
  0xa7575219: mov    %esp,%eax
  0xa757521b: shr    $0xc,%eax
  0xa757521e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575225: cmp    %eax,%edi
  0xa7575227: je     0xa757523e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757522d: push   $0xb74acf8c
  0xa7575232: call   0xa7575237
  0xa7575237: pusha  
  0xa7575238: call   0xb6ff5f32
  0xa757523d: hlt    
  0xa757523e: pop    %eax
  0xa757523f: movl   $0x0,0x140(%edi)
  0xa7575249: movl   $0x0,0x148(%edi)
  0xa7575253: movl   $0x0,0x144(%edi)
  0xa757525d: cmpl   $0x0,0x4(%edi)
  0xa7575264: jne    0xa7556400
  0xa757526a: mov    0x170(%edi),%eax
  0xa7575270: movl   $0x0,0x170(%edi)
  0xa757527a: mov    -0x1c(%ebp),%esi
  0xa757527d: mov    -0x18(%ebp),%edi
  0xa7575280: ret    
  0xa7575281: pop    %edx
  0xa7575282: movzbl 0x2(%esi),%ebx
  0xa7575286: add    $0x2,%esi
  0xa7575289: jmp    *-0x48722ee0(,%ebx,4)
  0xa7575290: int3   
  0xa7575291: int3   
  0xa7575292: int3   
  0xa7575293: int3   
  0xa7575294: int3   
  0xa7575295: int3   
  0xa7575296: int3   
  0xa7575297: int3   
  0xa7575298: int3   
  0xa7575299: int3   
  0xa757529a: int3   
  0xa757529b: int3   
  0xa757529c: int3   
  0xa757529d: int3   
  0xa757529e: int3   
  0xa757529f: int3   

----------------------------------------------------------------------
anewarray  189 anewarray  [0xa75752c0, 0xa75753a0]  224 bytes

  0xa75752c0: pop    %eax
  0xa75752c1: movzwl 0x1(%esi),%edx
  0xa75752c5: bswap  %edx
  0xa75752c7: shr    $0x10,%edx
  0xa75752ca: mov    -0xc(%ebp),%ecx
  0xa75752cd: mov    0x8(%ecx),%ecx
  0xa75752d0: mov    0x8(%ecx),%ecx
  0xa75752d3: call   0xa75752dd
  0xa75752d8: jmp    0xa757538f
  0xa75752dd: push   %eax
  0xa75752de: push   %edx
  0xa75752df: push   %ecx
  0xa75752e0: lea    0x10(%esp),%eax
  0xa75752e4: cmpl   $0x0,-0x8(%ebp)
  0xa75752eb: je     0xa7575302
  0xa75752f1: push   $0xb7449b58
  0xa75752f6: call   0xa75752fb
  0xa75752fb: pusha  
  0xa75752fc: call   0xb6ff5f32
  0xa7575301: hlt    
  0xa7575302: mov    %esi,-0x1c(%ebp)
  0xa7575305: mov    %esp,%edi
  0xa7575307: shr    $0xc,%edi
  0xa757530a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575311: push   %edi
  0xa7575312: mov    %ebp,0x148(%edi)
  0xa7575318: mov    %eax,0x140(%edi)
  0xa757531e: call   0xb6e5c0b4
  0xa7575323: add    $0x10,%esp
  0xa7575326: push   %eax
  0xa7575327: mov    %esp,%eax
  0xa7575329: shr    $0xc,%eax
  0xa757532c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575333: cmp    %eax,%edi
  0xa7575335: je     0xa757534c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757533b: push   $0xb74acf8c
  0xa7575340: call   0xa7575345
  0xa7575345: pusha  
  0xa7575346: call   0xb6ff5f32
  0xa757534b: hlt    
  0xa757534c: pop    %eax
  0xa757534d: movl   $0x0,0x140(%edi)
  0xa7575357: movl   $0x0,0x148(%edi)
  0xa7575361: movl   $0x0,0x144(%edi)
  0xa757536b: cmpl   $0x0,0x4(%edi)
  0xa7575372: jne    0xa7556400
  0xa7575378: mov    0x170(%edi),%eax
  0xa757537e: movl   $0x0,0x170(%edi)
  0xa7575388: mov    -0x1c(%ebp),%esi
  0xa757538b: mov    -0x18(%ebp),%edi
  0xa757538e: ret    
  0xa757538f: movzbl 0x3(%esi),%ebx
  0xa7575393: add    $0x3,%esi
  0xa7575396: jmp    *-0x48722ee0(,%ebx,4)
  0xa757539d: nop
  0xa757539e: nop
  0xa757539f: nop

----------------------------------------------------------------------
arraylength  190 arraylength  [0xa75753c0, 0xa75753e0]  32 bytes

  0xa75753c0: pop    %eax
  0xa75753c1: mov    0x8(%eax),%eax
  0xa75753c4: movzbl 0x1(%esi),%ebx
  0xa75753c8: inc    %esi
  0xa75753c9: jmp    *-0x48723ee0(,%ebx,4)
  0xa75753d0: int3   
  0xa75753d1: int3   
  0xa75753d2: int3   
  0xa75753d3: int3   
  0xa75753d4: int3   
  0xa75753d5: int3   
  0xa75753d6: int3   
  0xa75753d7: int3   
  0xa75753d8: int3   
  0xa75753d9: int3   
  0xa75753da: int3   
  0xa75753db: int3   
  0xa75753dc: int3   
  0xa75753dd: int3   
  0xa75753de: int3   
  0xa75753df: int3   

----------------------------------------------------------------------
athrow  191 athrow  [0xa7575400, 0xa7575420]  32 bytes

  0xa7575400: pop    %eax
  0xa7575401: cmp    (%eax),%eax
  0xa7575403: jmp    0xa756324d
  0xa7575408: push   $0xb7302e8b
  0xa757540d: call   0xa7575412
  0xa7575412: pusha  
  0xa7575413: call   0xb6ff5f32
  0xa7575418: hlt    
  0xa7575419: nop
  0xa757541a: nop
  0xa757541b: nop
  0xa757541c: int3   
  0xa757541d: int3   
  0xa757541e: int3   
  0xa757541f: int3   

----------------------------------------------------------------------
checkcast  192 checkcast  [0xa7575440, 0xa75756a0]  608 bytes

  0xa7575440: pop    %eax
  0xa7575441: push   %eax
  0xa7575442: push   %ebx
  0xa7575443: push   %ecx
  0xa7575444: push   %edx
  0xa7575445: mov    -0x10(%ebp),%ecx
  0xa7575448: test   %ecx,%ecx
  0xa757544a: je     0xa757548e
  0xa7575450: mov    -0xc(%ebp),%ebx
  0xa7575453: movzwl 0x2(%ecx),%edx
  0xa7575457: add    0x8(%ebx),%edx
  0xa757545a: lea    0x28(%edx),%edx
  0xa757545d: cmp    %esi,%edx
  0xa757545f: je     0xa757548e
  0xa7575465: push   %ecx
  0xa7575466: push   %esi
  0xa7575467: push   %ebx
  0xa7575468: cmpl   $0x0,-0x8(%ebp)
  0xa757546f: je     0xa7575486
  0xa7575475: push   $0xb7449b18
  0xa757547a: call   0xa757547f
  0xa757547f: pusha  
  0xa7575480: call   0xb6ff5f32
  0xa7575485: hlt    
  0xa7575486: call   0xb6e61602
  0xa757548b: add    $0xc,%esp
  0xa757548e: pop    %edx
  0xa757548f: pop    %ecx
  0xa7575490: pop    %ebx
  0xa7575491: pop    %eax
  0xa7575492: test   %eax,%eax
  0xa7575494: je     0xa7575675
  0xa757549a: mov    -0xc(%ebp),%ecx
  0xa757549d: mov    0x8(%ecx),%ecx
  0xa75754a0: mov    0x8(%ecx),%ecx
  0xa75754a3: mov    0x8(%ecx),%edx
  0xa75754a6: movzwl 0x1(%esi),%ebx
  0xa75754aa: bswap  %ebx
  0xa75754ac: shr    $0x10,%ebx
  0xa75754af: cmpb   $0x7,0x4(%edx,%ebx,1)
  0xa75754b4: je     0xa7575586
  0xa75754ba: push   %eax
  0xa75754bb: call   0xa75754c5
  0xa75754c0: jmp    0xa7575564
  0xa75754c5: lea    0x4(%esp),%eax
  0xa75754c9: cmpl   $0x0,-0x8(%ebp)
  0xa75754d0: je     0xa75754e7
  0xa75754d6: push   $0xb7449b58
  0xa75754db: call   0xa75754e0
  0xa75754e0: pusha  
  0xa75754e1: call   0xb6ff5f32
  0xa75754e6: hlt    
  0xa75754e7: mov    %esi,-0x1c(%ebp)
  0xa75754ea: mov    %esp,%edi
  0xa75754ec: shr    $0xc,%edi
  0xa75754ef: mov    -0x4871aba0(,%edi,4),%edi
  0xa75754f6: push   %edi
  0xa75754f7: mov    %ebp,0x148(%edi)
  0xa75754fd: mov    %eax,0x140(%edi)
  0xa7575503: call   0xb6e5c888
  0xa7575508: add    $0x4,%esp
  0xa757550b: push   %eax
  0xa757550c: mov    %esp,%eax
  0xa757550e: shr    $0xc,%eax
  0xa7575511: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575518: cmp    %eax,%edi
  0xa757551a: je     0xa7575531
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7575520: push   $0xb74acf8c
  0xa7575525: call   0xa757552a
  0xa757552a: pusha  
  0xa757552b: call   0xb6ff5f32
  0xa7575530: hlt    
  0xa7575531: pop    %eax
  0xa7575532: movl   $0x0,0x140(%edi)
  0xa757553c: movl   $0x0,0x148(%edi)
  0xa7575546: movl   $0x0,0x144(%edi)
  0xa7575550: cmpl   $0x0,0x4(%edi)
  0xa7575557: jne    0xa7556400
  0xa757555d: mov    -0x1c(%ebp),%esi
  0xa7575560: mov    -0x18(%ebp),%edi
  0xa7575563: ret    
  0xa7575564: mov    %esp,%edi
  0xa7575566: shr    $0xc,%edi
  0xa7575569: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575570: mov    0x174(%edi),%eax
  0xa7575576: movl   $0x0,0x174(%edi)
  0xa7575580: mov    -0x18(%ebp),%edi
  0xa7575583: pop    %edx
  0xa7575584: jmp    0xa757558c
  0xa7575586: mov    %eax,%edx
  0xa7575588: mov    0x30(%ecx,%ebx,4),%eax
  0xa757558c: mov    0x4(%edx),%ebx
  0xa757558f: mov    -0x10(%ebp),%ecx
  0xa7575592: test   %ecx,%ecx
  0xa7575594: je     0xa7575614
  0xa757559a: mov    0x8(%ecx),%edi
  0xa757559d: cmp    %ebx,%edi
  0xa757559f: jne    0xa75755b2
  0xa75755a5: addl   $0x1,0xc(%ecx)
  0xa75755a9: sbbl   $0x0,0xc(%ecx)
  0xa75755ad: jmp    0xa757560b
  0xa75755b2: test   %edi,%edi
  0xa75755b4: je     0xa75755ea
  0xa75755ba: mov    0x10(%ecx),%edi
  0xa75755bd: cmp    %ebx,%edi
  0xa75755bf: jne    0xa75755d2
  0xa75755c5: addl   $0x1,0x14(%ecx)
  0xa75755c9: sbbl   $0x0,0x14(%ecx)
  0xa75755cd: jmp    0xa757560b
  0xa75755d2: test   %edi,%edi
  0xa75755d4: jne    0xa757560b
  0xa75755da: mov    %ebx,0x10(%ecx)
  0xa75755dd: mov    $0x1,%edi
  0xa75755e2: mov    %edi,0x14(%ecx)
  0xa75755e5: jmp    0xa757560b
  0xa75755ea: cmp    0x10(%ecx),%ebx
  0xa75755ed: jne    0xa7575600
  0xa75755f3: addl   $0x1,0x14(%ecx)
  0xa75755f7: sbbl   $0x0,0x14(%ecx)
  0xa75755fb: jmp    0xa757560b
  0xa7575600: mov    %ebx,0x8(%ecx)
  0xa7575603: mov    $0x1,%edi
  0xa7575608: mov    %edi,0xc(%ecx)
  0xa757560b: mov    -0x18(%ebp),%edi
  0xa757560e: add    $0x18,%ecx
  0xa7575611: mov    %ecx,-0x10(%ebp)
  0xa7575614: cmp    %eax,%ebx
  0xa7575616: je     0xa757566e
  0xa757561c: mov    0xc(%eax),%ecx
  0xa757561f: cmp    (%ebx,%ecx,1),%eax
  0xa7575622: je     0xa757566e
  0xa7575628: cmp    $0x14,%ecx
  0xa757562b: jne    0xa757564f
  0xa7575631: push   %edi
  0xa7575632: incl   0xb78cf2a4
  0xa7575638: mov    0x18(%ebx),%edi
  0xa757563b: mov    (%edi),%ecx
  0xa757563d: add    $0x4,%edi
  0xa7575640: test   %eax,%eax
  0xa7575642: repnz scas %es:(%edi),%eax
  0xa7575644: pop    %edi
  0xa7575645: jne    0xa757564f
  0xa7575647: mov    %eax,0x14(%ebx)
  0xa757564a: jmp    0xa757566e
  0xa757564f: mov    -0x10(%ebp),%ecx
  0xa7575652: test   %ecx,%ecx
  0xa7575654: je     0xa7575668
  0xa757565a: addl   $0xffffffff,-0x14(%ecx)
  0xa757565e: js     0xa7575668
  0xa7575664: addl   $0x1,-0x14(%ecx)
  0xa7575668: push   %edx
  0xa7575669: jmp    0xa75640e4
  0xa757566e: mov    %edx,%eax
  0xa7575670: jmp    0xa757568c
  0xa7575675: mov    -0x10(%ebp),%ecx
  0xa7575678: test   %ecx,%ecx
  0xa757567a: je     0xa757568c
  0xa7575680: orl    $0x100,(%ecx)
  0xa7575686: add    $0x18,%ecx
  0xa7575689: mov    %ecx,-0x10(%ebp)
  0xa757568c: movzbl 0x3(%esi),%ebx
  0xa7575690: add    $0x3,%esi
  0xa7575693: jmp    *-0x48722ee0(,%ebx,4)
  0xa757569a: nop
  0xa757569b: nop
  0xa757569c: int3   
  0xa757569d: int3   
  0xa757569e: int3   
  0xa757569f: int3   

----------------------------------------------------------------------
instanceof  193 instanceof  [0xa75756c0, 0xa7575920]  608 bytes

  0xa75756c0: pop    %eax
  0xa75756c1: push   %eax
  0xa75756c2: push   %ebx
  0xa75756c3: push   %ecx
  0xa75756c4: push   %edx
  0xa75756c5: mov    -0x10(%ebp),%ecx
  0xa75756c8: test   %ecx,%ecx
  0xa75756ca: je     0xa757570e
  0xa75756d0: mov    -0xc(%ebp),%ebx
  0xa75756d3: movzwl 0x2(%ecx),%edx
  0xa75756d7: add    0x8(%ebx),%edx
  0xa75756da: lea    0x28(%edx),%edx
  0xa75756dd: cmp    %esi,%edx
  0xa75756df: je     0xa757570e
  0xa75756e5: push   %ecx
  0xa75756e6: push   %esi
  0xa75756e7: push   %ebx
  0xa75756e8: cmpl   $0x0,-0x8(%ebp)
  0xa75756ef: je     0xa7575706
  0xa75756f5: push   $0xb7449b18
  0xa75756fa: call   0xa75756ff
  0xa75756ff: pusha  
  0xa7575700: call   0xb6ff5f32
  0xa7575705: hlt    
  0xa7575706: call   0xb6e61602
  0xa757570b: add    $0xc,%esp
  0xa757570e: pop    %edx
  0xa757570f: pop    %ecx
  0xa7575710: pop    %ebx
  0xa7575711: pop    %eax
  0xa7575712: test   %eax,%eax
  0xa7575714: je     0xa75758fa
  0xa757571a: mov    -0xc(%ebp),%ecx
  0xa757571d: mov    0x8(%ecx),%ecx
  0xa7575720: mov    0x8(%ecx),%ecx
  0xa7575723: mov    0x8(%ecx),%edx
  0xa7575726: movzwl 0x1(%esi),%ebx
  0xa757572a: bswap  %ebx
  0xa757572c: shr    $0x10,%ebx
  0xa757572f: cmpb   $0x7,0x4(%edx,%ebx,1)
  0xa7575734: je     0xa757580c
  0xa757573a: push   %eax
  0xa757573b: call   0xa7575745
  0xa7575740: jmp    0xa75757e4
  0xa7575745: lea    0x4(%esp),%eax
  0xa7575749: cmpl   $0x0,-0x8(%ebp)
  0xa7575750: je     0xa7575767
  0xa7575756: push   $0xb7449b58
  0xa757575b: call   0xa7575760
  0xa7575760: pusha  
  0xa7575761: call   0xb6ff5f32
  0xa7575766: hlt    
  0xa7575767: mov    %esi,-0x1c(%ebp)
  0xa757576a: mov    %esp,%edi
  0xa757576c: shr    $0xc,%edi
  0xa757576f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575776: push   %edi
  0xa7575777: mov    %ebp,0x148(%edi)
  0xa757577d: mov    %eax,0x140(%edi)
  0xa7575783: call   0xb6e5c888
  0xa7575788: add    $0x4,%esp
  0xa757578b: push   %eax
  0xa757578c: mov    %esp,%eax
  0xa757578e: shr    $0xc,%eax
  0xa7575791: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575798: cmp    %eax,%edi
  0xa757579a: je     0xa75757b1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75757a0: push   $0xb74acf8c
  0xa75757a5: call   0xa75757aa
  0xa75757aa: pusha  
  0xa75757ab: call   0xb6ff5f32
  0xa75757b0: hlt    
  0xa75757b1: pop    %eax
  0xa75757b2: movl   $0x0,0x140(%edi)
  0xa75757bc: movl   $0x0,0x148(%edi)
  0xa75757c6: movl   $0x0,0x144(%edi)
  0xa75757d0: cmpl   $0x0,0x4(%edi)
  0xa75757d7: jne    0xa7556400
  0xa75757dd: mov    -0x1c(%ebp),%esi
  0xa75757e0: mov    -0x18(%ebp),%edi
  0xa75757e3: ret    
  0xa75757e4: mov    %esp,%edi
  0xa75757e6: shr    $0xc,%edi
  0xa75757e9: mov    -0x4871aba0(,%edi,4),%edi
  0xa75757f0: mov    0x174(%edi),%eax
  0xa75757f6: movl   $0x0,0x174(%edi)
  0xa7575800: mov    -0x18(%ebp),%edi
  0xa7575803: pop    %edx
  0xa7575804: mov    0x4(%edx),%edx
  0xa7575807: jmp    0xa7575813
  0xa757580c: mov    0x4(%eax),%edx
  0xa757580f: mov    0x30(%ecx,%ebx,4),%eax
  0xa7575813: mov    -0x10(%ebp),%ecx
  0xa7575816: test   %ecx,%ecx
  0xa7575818: je     0xa7575898
  0xa757581e: mov    0x8(%ecx),%edi
  0xa7575821: cmp    %edx,%edi
  0xa7575823: jne    0xa7575836
  0xa7575829: addl   $0x1,0xc(%ecx)
  0xa757582d: sbbl   $0x0,0xc(%ecx)
  0xa7575831: jmp    0xa757588f
  0xa7575836: test   %edi,%edi
  0xa7575838: je     0xa757586e
  0xa757583e: mov    0x10(%ecx),%edi
  0xa7575841: cmp    %edx,%edi
  0xa7575843: jne    0xa7575856
  0xa7575849: addl   $0x1,0x14(%ecx)
  0xa757584d: sbbl   $0x0,0x14(%ecx)
  0xa7575851: jmp    0xa757588f
  0xa7575856: test   %edi,%edi
  0xa7575858: jne    0xa757588f
  0xa757585e: mov    %edx,0x10(%ecx)
  0xa7575861: mov    $0x1,%edi
  0xa7575866: mov    %edi,0x14(%ecx)
  0xa7575869: jmp    0xa757588f
  0xa757586e: cmp    0x10(%ecx),%edx
  0xa7575871: jne    0xa7575884
  0xa7575877: addl   $0x1,0x14(%ecx)
  0xa757587b: sbbl   $0x0,0x14(%ecx)
  0xa757587f: jmp    0xa757588f
  0xa7575884: mov    %edx,0x8(%ecx)
  0xa7575887: mov    $0x1,%edi
  0xa757588c: mov    %edi,0xc(%ecx)
  0xa757588f: mov    -0x18(%ebp),%edi
  0xa7575892: add    $0x18,%ecx
  0xa7575895: mov    %ecx,-0x10(%ebp)
  0xa7575898: cmp    %eax,%edx
  0xa757589a: je     0xa75758f0
  0xa75758a0: mov    0xc(%eax),%ecx
  0xa75758a3: cmp    (%edx,%ecx,1),%eax
  0xa75758a6: je     0xa75758f0
  0xa75758ac: cmp    $0x14,%ecx
  0xa75758af: jne    0xa75758d3
  0xa75758b5: push   %edi
  0xa75758b6: incl   0xb78cf2a4
  0xa75758bc: mov    0x18(%edx),%edi
  0xa75758bf: mov    (%edi),%ecx
  0xa75758c1: add    $0x4,%edi
  0xa75758c4: test   %eax,%eax
  0xa75758c6: repnz scas %es:(%edi),%eax
  0xa75758c8: pop    %edi
  0xa75758c9: jne    0xa75758d3
  0xa75758cb: mov    %eax,0x14(%edx)
  0xa75758ce: jmp    0xa75758f0
  0xa75758d3: mov    -0x10(%ebp),%ecx
  0xa75758d6: test   %ecx,%ecx
  0xa75758d8: je     0xa75758ec
  0xa75758de: addl   $0xffffffff,-0x14(%ecx)
  0xa75758e2: js     0xa75758ec
  0xa75758e8: addl   $0x1,-0x14(%ecx)
  0xa75758ec: xor    %eax,%eax
  0xa75758ee: jmp    0xa7575911
  0xa75758f0: mov    $0x1,%eax
  0xa75758f5: jmp    0xa7575911
  0xa75758fa: mov    -0x10(%ebp),%ecx
  0xa75758fd: test   %ecx,%ecx
  0xa75758ff: je     0xa7575911
  0xa7575905: orl    $0x100,(%ecx)
  0xa757590b: add    $0x18,%ecx
  0xa757590e: mov    %ecx,-0x10(%ebp)
  0xa7575911: movzbl 0x3(%esi),%ebx
  0xa7575915: add    $0x3,%esi
  0xa7575918: jmp    *-0x48723ee0(,%ebx,4)
  0xa757591f: nop

----------------------------------------------------------------------
monitorenter  194 monitorenter  [0xa7575940, 0xa7575b20]  480 bytes

  0xa7575940: pop    %eax
  0xa7575941: cmp    (%eax),%eax
  0xa7575943: xor    %edx,%edx
  0xa7575945: mov    -0x20(%ebp),%ecx
  0xa7575948: lea    -0x20(%ebp),%ebx
  0xa757594b: jmp    0xa757595f
  0xa757594d: cmpl   $0x0,0x4(%ecx)
  0xa7575954: cmove  %ecx,%edx
  0xa7575957: cmp    0x4(%ecx),%eax
  0xa757595a: je     0xa7575963
  0xa757595c: add    $0x8,%ecx
  0xa757595f: cmp    %ebx,%ecx
  0xa7575961: jne    0xa757594d
  0xa7575963: test   %edx,%edx
  0xa7575965: jne    0xa7575986
  0xa7575967: mov    -0x20(%ebp),%edx
  0xa757596a: sub    $0x8,%esp
  0xa757596d: sub    $0x8,%edx
  0xa7575970: mov    %esp,%ecx
  0xa7575972: mov    %edx,-0x20(%ebp)
  0xa7575975: jmp    0xa7575982
  0xa757597a: mov    0x8(%ecx),%ebx
  0xa757597d: mov    %ebx,(%ecx)
  0xa757597f: add    $0x4,%ecx
  0xa7575982: cmp    %edx,%ecx
  0xa7575984: jne    0xa757597a
  0xa7575986: inc    %esi
  0xa7575987: mov    %eax,0x4(%edx)
  0xa757598a: mov    0x4(%edx),%ecx
  0xa757598d: mov    (%ecx),%eax
  0xa757598f: push   %edx
  0xa7575990: mov    %eax,%edx
  0xa7575992: and    $0x7,%edx
  0xa7575995: cmp    $0x5,%edx
  0xa7575998: pop    %edx
  0xa7575999: jne    0xa7575a2c
  0xa757599f: mov    %eax,(%edx)
  0xa75759a1: push   %edx
  0xa75759a2: mov    0x4(%ecx),%edx
  0xa75759a5: mov    0x64(%edx),%edx
  0xa75759a8: xor    %eax,%edx
  0xa75759aa: mov    %esp,%eax
  0xa75759ac: shr    $0xc,%eax
  0xa75759af: mov    -0x4871aba0(,%eax,4),%eax
  0xa75759b6: xor    %edx,%eax
  0xa75759b8: and    $0xffffff87,%eax
  0xa75759bb: pop    %edx
  0xa75759bc: je     0xa7575af9
  0xa75759c2: test   $0x7,%eax
  0xa75759c7: jne    0xa7575a1e
  0xa75759c9: test   $0x180,%eax
  0xa75759ce: jne    0xa75759f7
  0xa75759d0: mov    (%edx),%eax
  0xa75759d2: and    $0x1ff,%eax
  0xa75759d8: push   %edx
  0xa75759d9: mov    %esp,%edx
  0xa75759db: shr    $0xc,%edx
  0xa75759de: mov    -0x4871aba0(,%edx,4),%edx
  0xa75759e5: or     %eax,%edx
  0xa75759e7: lock cmpxchg %edx,(%ecx)
  0xa75759eb: pop    %edx
  0xa75759ec: jne    0xa7575a4f
  0xa75759f2: jmp    0xa7575af9
  0xa75759f7: push   %edx
  0xa75759f8: mov    0x4(%ecx),%edx
  0xa75759fb: mov    0x64(%edx),%edx
  0xa75759fe: mov    %esp,%eax
  0xa7575a00: shr    $0xc,%eax
  0xa7575a03: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575a0a: or     %eax,%edx
  0xa7575a0c: mov    (%edx),%eax
  0xa7575a0e: lock cmpxchg %edx,(%ecx)
  0xa7575a12: pop    %edx
  0xa7575a13: jne    0xa7575a4f
  0xa7575a19: jmp    0xa7575af9
  0xa7575a1e: mov    (%edx),%eax
  0xa7575a20: push   %edx
  0xa7575a21: mov    0x4(%ecx),%edx
  0xa7575a24: mov    0x64(%edx),%edx
  0xa7575a27: lock cmpxchg %edx,(%ecx)
  0xa7575a2b: pop    %edx
  0xa7575a2c: mov    $0x1,%eax
  0xa7575a31: or     (%ecx),%eax
  0xa7575a33: mov    %eax,(%edx)
  0xa7575a35: lock cmpxchg %edx,(%ecx)
  0xa7575a39: je     0xa7575af9
  0xa7575a3f: sub    %esp,%eax
  0xa7575a41: and    $0xfffff003,%eax
  0xa7575a47: mov    %eax,(%edx)
  0xa7575a49: je     0xa7575af9
  0xa7575a4f: call   0xa7575a59
  0xa7575a54: jmp    0xa7575af9
  0xa7575a59: push   %edx
  0xa7575a5a: lea    0x8(%esp),%eax
  0xa7575a5e: cmpl   $0x0,-0x8(%ebp)
  0xa7575a65: je     0xa7575a7c
  0xa7575a6b: push   $0xb7449b58
  0xa7575a70: call   0xa7575a75
  0xa7575a75: pusha  
  0xa7575a76: call   0xb6ff5f32
  0xa7575a7b: hlt    
  0xa7575a7c: mov    %esi,-0x1c(%ebp)
  0xa7575a7f: mov    %esp,%edi
  0xa7575a81: shr    $0xc,%edi
  0xa7575a84: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575a8b: push   %edi
  0xa7575a8c: mov    %ebp,0x148(%edi)
  0xa7575a92: mov    %eax,0x140(%edi)
  0xa7575a98: call   0xb6e5ea04
  0xa7575a9d: add    $0x8,%esp
  0xa7575aa0: push   %eax
  0xa7575aa1: mov    %esp,%eax
  0xa7575aa3: shr    $0xc,%eax
  0xa7575aa6: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575aad: cmp    %eax,%edi
  0xa7575aaf: je     0xa7575ac6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7575ab5: push   $0xb74acf8c
  0xa7575aba: call   0xa7575abf
  0xa7575abf: pusha  
  0xa7575ac0: call   0xb6ff5f32
  0xa7575ac5: hlt    
  0xa7575ac6: pop    %eax
  0xa7575ac7: movl   $0x0,0x140(%edi)
  0xa7575ad1: movl   $0x0,0x148(%edi)
  0xa7575adb: movl   $0x0,0x144(%edi)
  0xa7575ae5: cmpl   $0x0,0x4(%edi)
  0xa7575aec: jne    0xa7556400
  0xa7575af2: mov    -0x1c(%ebp),%esi
  0xa7575af5: mov    -0x18(%ebp),%edi
  0xa7575af8: ret    
  0xa7575af9: mov    %esi,-0x1c(%ebp)
  0xa7575afc: mov    %eax,-0x9000(%esp)
  0xa7575b03: movzbl (%esi),%ebx
  0xa7575b06: jmp    *-0x48722ae0(,%ebx,4)
  0xa7575b0d: push   $0xb7302e8b
  0xa7575b12: call   0xa7575b17
  0xa7575b17: pusha  
  0xa7575b18: call   0xb6ff5f32
  0xa7575b1d: hlt    
  0xa7575b1e: nop
  0xa7575b1f: nop

----------------------------------------------------------------------
monitorexit  195 monitorexit  [0xa7575b40, 0xa7575d20]  480 bytes

  0xa7575b40: pop    %eax
  0xa7575b41: cmp    (%eax),%eax
  0xa7575b43: mov    -0x20(%ebp),%edx
  0xa7575b46: lea    -0x20(%ebp),%ebx
  0xa7575b49: jmp    0xa7575b57
  0xa7575b4b: cmp    0x4(%edx),%eax
  0xa7575b4e: je     0xa7575c15
  0xa7575b54: add    $0x8,%edx
  0xa7575b57: cmp    %ebx,%edx
  0xa7575b59: jne    0xa7575b4b
  0xa7575b5b: call   0xa7575b65
  0xa7575b60: jmp    0xa7575c04
  0xa7575b65: lea    0x4(%esp),%eax
  0xa7575b69: cmpl   $0x0,-0x8(%ebp)
  0xa7575b70: je     0xa7575b87
  0xa7575b76: push   $0xb7449b58
  0xa7575b7b: call   0xa7575b80
  0xa7575b80: pusha  
  0xa7575b81: call   0xb6ff5f32
  0xa7575b86: hlt    
  0xa7575b87: mov    %esi,-0x1c(%ebp)
  0xa7575b8a: mov    %esp,%edi
  0xa7575b8c: shr    $0xc,%edi
  0xa7575b8f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575b96: push   %edi
  0xa7575b97: mov    %ebp,0x148(%edi)
  0xa7575b9d: mov    %eax,0x140(%edi)
  0xa7575ba3: call   0xb6e5f012
  0xa7575ba8: add    $0x4,%esp
  0xa7575bab: push   %eax
  0xa7575bac: mov    %esp,%eax
  0xa7575bae: shr    $0xc,%eax
  0xa7575bb1: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575bb8: cmp    %eax,%edi
  0xa7575bba: je     0xa7575bd1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7575bc0: push   $0xb74acf8c
  0xa7575bc5: call   0xa7575bca
  0xa7575bca: pusha  
  0xa7575bcb: call   0xb6ff5f32
  0xa7575bd0: hlt    
  0xa7575bd1: pop    %eax
  0xa7575bd2: movl   $0x0,0x140(%edi)
  0xa7575bdc: movl   $0x0,0x148(%edi)
  0xa7575be6: movl   $0x0,0x144(%edi)
  0xa7575bf0: cmpl   $0x0,0x4(%edi)
  0xa7575bf7: jne    0xa7556400
  0xa7575bfd: mov    -0x1c(%ebp),%esi
  0xa7575c00: mov    -0x18(%ebp),%edi
  0xa7575c03: ret    
  0xa7575c04: push   $0xb7302e8b
  0xa7575c09: call   0xa7575c0e
  0xa7575c0e: pusha  
  0xa7575c0f: call   0xb6ff5f32
  0xa7575c14: hlt    
  0xa7575c15: push   %eax
  0xa7575c16: mov    %esi,-0x1c(%ebp)
  0xa7575c19: lea    (%edx),%eax
  0xa7575c1b: mov    0x4(%edx),%ecx
  0xa7575c1e: movl   $0x0,0x4(%edx)
  0xa7575c25: mov    (%ecx),%ebx
  0xa7575c27: and    $0x7,%ebx
  0xa7575c2a: cmp    $0x5,%ebx
  0xa7575c2d: je     0xa7575cf4
  0xa7575c33: mov    (%eax),%ebx
  0xa7575c35: test   %ebx,%ebx
  0xa7575c37: je     0xa7575cf4
  0xa7575c3d: lock cmpxchg %ebx,(%ecx)
  0xa7575c41: je     0xa7575cf4
  0xa7575c47: mov    %ecx,0x4(%edx)
  0xa7575c4a: call   0xa7575c54
  0xa7575c4f: jmp    0xa7575cf4
  0xa7575c54: push   %edx
  0xa7575c55: lea    0x8(%esp),%eax
  0xa7575c59: cmpl   $0x0,-0x8(%ebp)
  0xa7575c60: je     0xa7575c77
  0xa7575c66: push   $0xb7449b58
  0xa7575c6b: call   0xa7575c70
  0xa7575c70: pusha  
  0xa7575c71: call   0xb6ff5f32
  0xa7575c76: hlt    
  0xa7575c77: mov    %esi,-0x1c(%ebp)
  0xa7575c7a: mov    %esp,%edi
  0xa7575c7c: shr    $0xc,%edi
  0xa7575c7f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575c86: push   %edi
  0xa7575c87: mov    %ebp,0x148(%edi)
  0xa7575c8d: mov    %eax,0x140(%edi)
  0xa7575c93: call   0xb6e5ed36
  0xa7575c98: add    $0x8,%esp
  0xa7575c9b: push   %eax
  0xa7575c9c: mov    %esp,%eax
  0xa7575c9e: shr    $0xc,%eax
  0xa7575ca1: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575ca8: cmp    %eax,%edi
  0xa7575caa: je     0xa7575cc1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7575cb0: push   $0xb74acf8c
  0xa7575cb5: call   0xa7575cba
  0xa7575cba: pusha  
  0xa7575cbb: call   0xb6ff5f32
  0xa7575cc0: hlt    
  0xa7575cc1: pop    %eax
  0xa7575cc2: movl   $0x0,0x140(%edi)
  0xa7575ccc: movl   $0x0,0x148(%edi)
  0xa7575cd6: movl   $0x0,0x144(%edi)
  0xa7575ce0: cmpl   $0x0,0x4(%edi)
  0xa7575ce7: jne    0xa7556400
  0xa7575ced: mov    -0x1c(%ebp),%esi
  0xa7575cf0: mov    -0x18(%ebp),%edi
  0xa7575cf3: ret    
  0xa7575cf4: mov    -0x1c(%ebp),%esi
  0xa7575cf7: pop    %eax
  0xa7575cf8: movzbl 0x1(%esi),%ebx
  0xa7575cfc: inc    %esi
  0xa7575cfd: jmp    *-0x48722ae0(,%ebx,4)
  0xa7575d04: int3   
  0xa7575d05: int3   
  0xa7575d06: int3   
  0xa7575d07: int3   
  0xa7575d08: int3   
  0xa7575d09: int3   
  0xa7575d0a: int3   
  0xa7575d0b: int3   
  0xa7575d0c: int3   
  0xa7575d0d: int3   
  0xa7575d0e: int3   
  0xa7575d0f: int3   
  0xa7575d10: int3   
  0xa7575d11: int3   
  0xa7575d12: int3   
  0xa7575d13: int3   
  0xa7575d14: int3   
  0xa7575d15: int3   
  0xa7575d16: int3   
  0xa7575d17: int3   
  0xa7575d18: int3   
  0xa7575d19: int3   
  0xa7575d1a: int3   
  0xa7575d1b: int3   
  0xa7575d1c: int3   
  0xa7575d1d: int3   
  0xa7575d1e: int3   
  0xa7575d1f: int3   

----------------------------------------------------------------------
wide  196 wide  [0xa7575d40, 0xa7575d80]  64 bytes

  0xa7575d40: sub    $0x4,%esp
  0xa7575d43: fstps  (%esp)
  0xa7575d46: jmp    0xa7575d64
  0xa7575d4b: sub    $0x8,%esp
  0xa7575d4e: fstpl  (%esp)
  0xa7575d51: jmp    0xa7575d64
  0xa7575d56: push   %edx
  0xa7575d57: push   %eax
  0xa7575d58: jmp    0xa7575d64
  0xa7575d5d: push   %eax
  0xa7575d5e: jmp    0xa7575d64
  0xa7575d63: push   %eax
  0xa7575d64: movzbl 0x1(%esi),%ebx
  0xa7575d68: jmp    *-0x4871d6e0(,%ebx,4)
  0xa7575d6f: push   $0xb7302e8b
  0xa7575d74: call   0xa7575d79
  0xa7575d79: pusha  
  0xa7575d7a: call   0xb6ff5f32
  0xa7575d7f: hlt    

----------------------------------------------------------------------
multianewarray  197 multianewarray  [0xa7575da0, 0xa7575ea0]  256 bytes

  0xa7575da0: sub    $0x4,%esp
  0xa7575da3: fstps  (%esp)
  0xa7575da6: jmp    0xa7575dc4
  0xa7575dab: sub    $0x8,%esp
  0xa7575dae: fstpl  (%esp)
  0xa7575db1: jmp    0xa7575dc4
  0xa7575db6: push   %edx
  0xa7575db7: push   %eax
  0xa7575db8: jmp    0xa7575dc4
  0xa7575dbd: push   %eax
  0xa7575dbe: jmp    0xa7575dc4
  0xa7575dc3: push   %eax
  0xa7575dc4: movzbl 0x3(%esi),%eax
  0xa7575dc8: lea    -0x4(%esp,%eax,4),%eax
  0xa7575dcc: call   0xa7575dd6
  0xa7575dd1: jmp    0xa7575e86
  0xa7575dd6: push   %eax
  0xa7575dd7: lea    0x8(%esp),%eax
  0xa7575ddb: cmpl   $0x0,-0x8(%ebp)
  0xa7575de2: je     0xa7575df9
  0xa7575de8: push   $0xb7449b58
  0xa7575ded: call   0xa7575df2
  0xa7575df2: pusha  
  0xa7575df3: call   0xb6ff5f32
  0xa7575df8: hlt    
  0xa7575df9: mov    %esi,-0x1c(%ebp)
  0xa7575dfc: mov    %esp,%edi
  0xa7575dfe: shr    $0xc,%edi
  0xa7575e01: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575e08: push   %edi
  0xa7575e09: mov    %ebp,0x148(%edi)
  0xa7575e0f: mov    %eax,0x140(%edi)
  0xa7575e15: call   0xb6e5c2b0
  0xa7575e1a: add    $0x8,%esp
  0xa7575e1d: push   %eax
  0xa7575e1e: mov    %esp,%eax
  0xa7575e20: shr    $0xc,%eax
  0xa7575e23: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575e2a: cmp    %eax,%edi
  0xa7575e2c: je     0xa7575e43
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7575e32: push   $0xb74acf8c
  0xa7575e37: call   0xa7575e3c
  0xa7575e3c: pusha  
  0xa7575e3d: call   0xb6ff5f32
  0xa7575e42: hlt    
  0xa7575e43: pop    %eax
  0xa7575e44: movl   $0x0,0x140(%edi)
  0xa7575e4e: movl   $0x0,0x148(%edi)
  0xa7575e58: movl   $0x0,0x144(%edi)
  0xa7575e62: cmpl   $0x0,0x4(%edi)
  0xa7575e69: jne    0xa7556400
  0xa7575e6f: mov    0x170(%edi),%eax
  0xa7575e75: movl   $0x0,0x170(%edi)
  0xa7575e7f: mov    -0x1c(%ebp),%esi
  0xa7575e82: mov    -0x18(%ebp),%edi
  0xa7575e85: ret    
  0xa7575e86: movzbl 0x3(%esi),%ebx
  0xa7575e8a: lea    (%esp,%ebx,4),%esp
  0xa7575e8d: movzbl 0x4(%esi),%ebx
  0xa7575e91: add    $0x4,%esi
  0xa7575e94: jmp    *-0x48722ee0(,%ebx,4)
  0xa7575e9b: nop
  0xa7575e9c: int3   
  0xa7575e9d: int3   
  0xa7575e9e: int3   
  0xa7575e9f: int3   

----------------------------------------------------------------------
ifnull  198 ifnull  [0xa7575ec0, 0xa7576320]  1120 bytes

  0xa7575ec0: pop    %eax
  0xa7575ec1: push   %eax
  0xa7575ec2: push   %ebx
  0xa7575ec3: push   %ecx
  0xa7575ec4: push   %edx
  0xa7575ec5: mov    -0x10(%ebp),%ecx
  0xa7575ec8: test   %ecx,%ecx
  0xa7575eca: je     0xa7575f0e
  0xa7575ed0: mov    -0xc(%ebp),%ebx
  0xa7575ed3: movzwl 0x2(%ecx),%edx
  0xa7575ed7: add    0x8(%ebx),%edx
  0xa7575eda: lea    0x28(%edx),%edx
  0xa7575edd: cmp    %esi,%edx
  0xa7575edf: je     0xa7575f0e
  0xa7575ee5: push   %ecx
  0xa7575ee6: push   %esi
  0xa7575ee7: push   %ebx
  0xa7575ee8: cmpl   $0x0,-0x8(%ebp)
  0xa7575eef: je     0xa7575f06
  0xa7575ef5: push   $0xb7449b18
  0xa7575efa: call   0xa7575eff
  0xa7575eff: pusha  
  0xa7575f00: call   0xb6ff5f32
  0xa7575f05: hlt    
  0xa7575f06: call   0xb6e61602
  0xa7575f0b: add    $0xc,%esp
  0xa7575f0e: pop    %edx
  0xa7575f0f: pop    %ecx
  0xa7575f10: pop    %ebx
  0xa7575f11: pop    %eax
  0xa7575f12: test   %eax,%eax
  0xa7575f14: jne    0xa75762e1
  0xa7575f1a: mov    -0xc(%ebp),%ecx
  0xa7575f1d: mov    -0x10(%ebp),%eax
  0xa7575f20: test   %eax,%eax
  0xa7575f22: je     0xa7575f3a
  0xa7575f28: mov    0x4(%eax),%ebx
  0xa7575f2b: add    $0x1,%ebx
  0xa7575f2e: sbb    $0x0,%ebx
  0xa7575f31: mov    %ebx,0x4(%eax)
  0xa7575f34: add    0x8(%eax),%eax
  0xa7575f37: mov    %eax,-0x10(%ebp)
  0xa7575f3a: movswl 0x1(%esi),%edx
  0xa7575f3e: bswap  %edx
  0xa7575f40: sar    $0x10,%edx
  0xa7575f43: add    %edx,%esi
  0xa7575f45: test   %edx,%edx
  0xa7575f47: jns    0xa7576050
  0xa7575f4d: mov    0x10(%ecx),%eax
  0xa7575f50: test   %eax,%eax
  0xa7575f52: jne    0xa7576011
  0xa7575f58: push   %edx
  0xa7575f59: push   %ecx
  0xa7575f5a: call   0xa7575f64
  0xa7575f5f: jmp    0xa7576004
  0xa7575f64: push   %ecx
  0xa7575f65: lea    0x8(%esp),%eax
  0xa7575f69: cmpl   $0x0,-0x8(%ebp)
  0xa7575f70: je     0xa7575f87
  0xa7575f76: push   $0xb7449b58
  0xa7575f7b: call   0xa7575f80
  0xa7575f80: pusha  
  0xa7575f81: call   0xb6ff5f32
  0xa7575f86: hlt    
  0xa7575f87: mov    %esi,-0x1c(%ebp)
  0xa7575f8a: mov    %esp,%edi
  0xa7575f8c: shr    $0xc,%edi
  0xa7575f8f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7575f96: push   %edi
  0xa7575f97: mov    %ebp,0x148(%edi)
  0xa7575f9d: mov    %eax,0x140(%edi)
  0xa7575fa3: call   0xb6e61c92
  0xa7575fa8: add    $0x8,%esp
  0xa7575fab: push   %eax
  0xa7575fac: mov    %esp,%eax
  0xa7575fae: shr    $0xc,%eax
  0xa7575fb1: mov    -0x4871aba0(,%eax,4),%eax
  0xa7575fb8: cmp    %eax,%edi
  0xa7575fba: je     0xa7575fd1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7575fc0: push   $0xb74acf8c
  0xa7575fc5: call   0xa7575fca
  0xa7575fca: pusha  
  0xa7575fcb: call   0xb6ff5f32
  0xa7575fd0: hlt    
  0xa7575fd1: pop    %eax
  0xa7575fd2: movl   $0x0,0x140(%edi)
  0xa7575fdc: movl   $0x0,0x148(%edi)
  0xa7575fe6: movl   $0x0,0x144(%edi)
  0xa7575ff0: cmpl   $0x0,0x4(%edi)
  0xa7575ff7: jne    0xa7556400
  0xa7575ffd: mov    -0x1c(%ebp),%esi
  0xa7576000: mov    -0x18(%ebp),%edi
  0xa7576003: ret    
  0xa7576004: pop    %ecx
  0xa7576005: pop    %edx
  0xa7576006: mov    0x10(%ecx),%eax
  0xa7576009: test   %eax,%eax
  0xa757600b: je     0xa7576050
  0xa7576011: mov    0xc(%ecx),%ebx
  0xa7576014: test   %ebx,%ebx
  0xa7576016: je     0xa7576038
  0xa7576018: mov    0xc0(%ebx),%eax
  0xa757601e: add    $0x8,%eax
  0xa7576021: mov    %eax,0xc0(%ebx)
  0xa7576027: and    $0x1ff8,%eax
  0xa757602d: je     0xa7576153
  0xa7576033: jmp    0xa7576050
  0xa7576038: mov    0x10(%ecx),%ecx
  0xa757603b: mov    0xc(%ecx),%eax
  0xa757603e: add    $0x8,%eax
  0xa7576041: mov    %eax,0xc(%ecx)
  0xa7576044: and    $0x1ff8,%eax
  0xa757604a: je     0xa7576153
  0xa7576050: movzbl (%esi),%ebx
  0xa7576053: jmp    *-0x48722ae0(,%ebx,4)
  0xa757605a: call   0xa7576064
  0xa757605f: jmp    0xa7576103
  0xa7576064: lea    0x4(%esp),%eax
  0xa7576068: cmpl   $0x0,-0x8(%ebp)
  0xa757606f: je     0xa7576086
  0xa7576075: push   $0xb7449b58
  0xa757607a: call   0xa757607f
  0xa757607f: pusha  
  0xa7576080: call   0xb6ff5f32
  0xa7576085: hlt    
  0xa7576086: mov    %esi,-0x1c(%ebp)
  0xa7576089: mov    %esp,%edi
  0xa757608b: shr    $0xc,%edi
  0xa757608e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576095: push   %edi
  0xa7576096: mov    %ebp,0x148(%edi)
  0xa757609c: mov    %eax,0x140(%edi)
  0xa75760a2: call   0xb6e61328
  0xa75760a7: add    $0x4,%esp
  0xa75760aa: push   %eax
  0xa75760ab: mov    %esp,%eax
  0xa75760ad: shr    $0xc,%eax
  0xa75760b0: mov    -0x4871aba0(,%eax,4),%eax
  0xa75760b7: cmp    %eax,%edi
  0xa75760b9: je     0xa75760d0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75760bf: push   $0xb74acf8c
  0xa75760c4: call   0xa75760c9
  0xa75760c9: pusha  
  0xa75760ca: call   0xb6ff5f32
  0xa75760cf: hlt    
  0xa75760d0: pop    %eax
  0xa75760d1: movl   $0x0,0x140(%edi)
  0xa75760db: movl   $0x0,0x148(%edi)
  0xa75760e5: movl   $0x0,0x144(%edi)
  0xa75760ef: cmpl   $0x0,0x4(%edi)
  0xa75760f6: jne    0xa7556400
  0xa75760fc: mov    -0x1c(%ebp),%esi
  0xa75760ff: mov    -0x18(%ebp),%edi
  0xa7576102: ret    
  0xa7576103: movzbl (%esi),%ebx
  0xa7576106: push   %eax
  0xa7576107: push   %ebx
  0xa7576108: mov    -0xc(%ebp),%ebx
  0xa757610b: mov    0xc(%ebx),%eax
  0xa757610e: test   %eax,%eax
  0xa7576110: je     0xa7576149
  0xa7576116: push   %esi
  0xa7576117: push   %ebx
  0xa7576118: cmpl   $0x0,-0x8(%ebp)
  0xa757611f: je     0xa7576136
  0xa7576125: push   $0xb7449b18
  0xa757612a: call   0xa757612f
  0xa757612f: pusha  
  0xa7576130: call   0xb6ff5f32
  0xa7576135: hlt    
  0xa7576136: call   0xb6e61172
  0xa757613b: add    $0x8,%esp
  0xa757613e: mov    0xc(%ebx),%ebx
  0xa7576141: add    $0xe0,%ebx
  0xa7576147: add    %ebx,%eax
  0xa7576149: mov    %eax,-0x10(%ebp)
  0xa757614c: pop    %ebx
  0xa757614d: pop    %eax
  0xa757614e: jmp    0xa7576050
  0xa7576153: neg    %edx
  0xa7576155: add    %esi,%edx
  0xa7576157: call   0xa7576161
  0xa757615c: jmp    0xa7576201
  0xa7576161: push   %edx
  0xa7576162: lea    0x8(%esp),%eax
  0xa7576166: cmpl   $0x0,-0x8(%ebp)
  0xa757616d: je     0xa7576184
  0xa7576173: push   $0xb7449b58
  0xa7576178: call   0xa757617d
  0xa757617d: pusha  
  0xa757617e: call   0xb6ff5f32
  0xa7576183: hlt    
  0xa7576184: mov    %esi,-0x1c(%ebp)
  0xa7576187: mov    %esp,%edi
  0xa7576189: shr    $0xc,%edi
  0xa757618c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576193: push   %edi
  0xa7576194: mov    %ebp,0x148(%edi)
  0xa757619a: mov    %eax,0x140(%edi)
  0xa75761a0: call   0xb6e60bc8
  0xa75761a5: add    $0x8,%esp
  0xa75761a8: push   %eax
  0xa75761a9: mov    %esp,%eax
  0xa75761ab: shr    $0xc,%eax
  0xa75761ae: mov    -0x4871aba0(,%eax,4),%eax
  0xa75761b5: cmp    %eax,%edi
  0xa75761b7: je     0xa75761ce
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75761bd: push   $0xb74acf8c
  0xa75761c2: call   0xa75761c7
  0xa75761c7: pusha  
  0xa75761c8: call   0xb6ff5f32
  0xa75761cd: hlt    
  0xa75761ce: pop    %eax
  0xa75761cf: movl   $0x0,0x140(%edi)
  0xa75761d9: movl   $0x0,0x148(%edi)
  0xa75761e3: movl   $0x0,0x144(%edi)
  0xa75761ed: cmpl   $0x0,0x4(%edi)
  0xa75761f4: jne    0xa7556400
  0xa75761fa: mov    -0x1c(%ebp),%esi
  0xa75761fd: mov    -0x18(%ebp),%edi
  0xa7576200: ret    
  0xa7576201: movzbl (%esi),%ebx
  0xa7576204: test   %eax,%eax
  0xa7576206: je     0xa7576050
  0xa757620c: mov    0x38(%eax),%ecx
  0xa757620f: cmp    $0xfffffffe,%ecx
  0xa7576212: je     0xa7576050
  0xa7576218: mov    %eax,%ebx
  0xa757621a: mov    %esp,%ecx
  0xa757621c: shr    $0xc,%ecx
  0xa757621f: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7576226: call   0xa7576230
  0xa757622b: jmp    0xa75762cf
  0xa7576230: lea    0x4(%esp),%eax
  0xa7576234: cmpl   $0x0,-0x8(%ebp)
  0xa757623b: je     0xa7576252
  0xa7576241: push   $0xb7449b58
  0xa7576246: call   0xa757624b
  0xa757624b: pusha  
  0xa757624c: call   0xb6ff5f32
  0xa7576251: hlt    
  0xa7576252: mov    %esi,-0x1c(%ebp)
  0xa7576255: mov    %esp,%edi
  0xa7576257: shr    $0xc,%edi
  0xa757625a: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576261: push   %edi
  0xa7576262: mov    %ebp,0x148(%edi)
  0xa7576268: mov    %eax,0x140(%edi)
  0xa757626e: call   0xb717c684
  0xa7576273: add    $0x4,%esp
  0xa7576276: push   %eax
  0xa7576277: mov    %esp,%eax
  0xa7576279: shr    $0xc,%eax
  0xa757627c: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576283: cmp    %eax,%edi
  0xa7576285: je     0xa757629c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757628b: push   $0xb74acf8c
  0xa7576290: call   0xa7576295
  0xa7576295: pusha  
  0xa7576296: call   0xb6ff5f32
  0xa757629b: hlt    
  0xa757629c: pop    %eax
  0xa757629d: movl   $0x0,0x140(%edi)
  0xa75762a7: movl   $0x0,0x148(%edi)
  0xa75762b1: movl   $0x0,0x144(%edi)
  0xa75762bb: cmpl   $0x0,0x4(%edi)
  0xa75762c2: jne    0xa7556400
  0xa75762c8: mov    -0x1c(%ebp),%esi
  0xa75762cb: mov    -0x18(%ebp),%edi
  0xa75762ce: ret    
  0xa75762cf: mov    %eax,%ecx
  0xa75762d1: mov    -0x4(%ebp),%edx
  0xa75762d4: mov    %ebp,%esp
  0xa75762d6: pop    %ebp
  0xa75762d7: pop    %edi
  0xa75762d8: mov    %edx,%esp
  0xa75762da: and    $0xfffffff0,%esp
  0xa75762dd: push   %edi
  0xa75762de: jmp    *0x58(%ebx)
  0xa75762e1: mov    -0x10(%ebp),%eax
  0xa75762e4: test   %eax,%eax
  0xa75762e6: je     0xa75762fa
  0xa75762ec: addl   $0x1,0xc(%eax)
  0xa75762f0: sbbl   $0x0,0xc(%eax)
  0xa75762f4: add    $0x10,%eax
  0xa75762f7: mov    %eax,-0x10(%ebp)
  0xa75762fa: movzbl 0x3(%esi),%ebx
  0xa75762fe: add    $0x3,%esi
  0xa7576301: jmp    *-0x48722ae0(,%ebx,4)
  0xa7576308: int3   
  0xa7576309: int3   
  0xa757630a: int3   
  0xa757630b: int3   
  0xa757630c: int3   
  0xa757630d: int3   
  0xa757630e: int3   
  0xa757630f: int3   
  0xa7576310: int3   
  0xa7576311: int3   
  0xa7576312: int3   
  0xa7576313: int3   
  0xa7576314: int3   
  0xa7576315: int3   
  0xa7576316: int3   
  0xa7576317: int3   
  0xa7576318: int3   
  0xa7576319: int3   
  0xa757631a: int3   
  0xa757631b: int3   
  0xa757631c: int3   
  0xa757631d: int3   
  0xa757631e: int3   
  0xa757631f: int3   

----------------------------------------------------------------------
ifnonnull  199 ifnonnull  [0xa7576340, 0xa75767a0]  1120 bytes

  0xa7576340: pop    %eax
  0xa7576341: push   %eax
  0xa7576342: push   %ebx
  0xa7576343: push   %ecx
  0xa7576344: push   %edx
  0xa7576345: mov    -0x10(%ebp),%ecx
  0xa7576348: test   %ecx,%ecx
  0xa757634a: je     0xa757638e
  0xa7576350: mov    -0xc(%ebp),%ebx
  0xa7576353: movzwl 0x2(%ecx),%edx
  0xa7576357: add    0x8(%ebx),%edx
  0xa757635a: lea    0x28(%edx),%edx
  0xa757635d: cmp    %esi,%edx
  0xa757635f: je     0xa757638e
  0xa7576365: push   %ecx
  0xa7576366: push   %esi
  0xa7576367: push   %ebx
  0xa7576368: cmpl   $0x0,-0x8(%ebp)
  0xa757636f: je     0xa7576386
  0xa7576375: push   $0xb7449b18
  0xa757637a: call   0xa757637f
  0xa757637f: pusha  
  0xa7576380: call   0xb6ff5f32
  0xa7576385: hlt    
  0xa7576386: call   0xb6e61602
  0xa757638b: add    $0xc,%esp
  0xa757638e: pop    %edx
  0xa757638f: pop    %ecx
  0xa7576390: pop    %ebx
  0xa7576391: pop    %eax
  0xa7576392: test   %eax,%eax
  0xa7576394: je     0xa7576761
  0xa757639a: mov    -0xc(%ebp),%ecx
  0xa757639d: mov    -0x10(%ebp),%eax
  0xa75763a0: test   %eax,%eax
  0xa75763a2: je     0xa75763ba
  0xa75763a8: mov    0x4(%eax),%ebx
  0xa75763ab: add    $0x1,%ebx
  0xa75763ae: sbb    $0x0,%ebx
  0xa75763b1: mov    %ebx,0x4(%eax)
  0xa75763b4: add    0x8(%eax),%eax
  0xa75763b7: mov    %eax,-0x10(%ebp)
  0xa75763ba: movswl 0x1(%esi),%edx
  0xa75763be: bswap  %edx
  0xa75763c0: sar    $0x10,%edx
  0xa75763c3: add    %edx,%esi
  0xa75763c5: test   %edx,%edx
  0xa75763c7: jns    0xa75764d0
  0xa75763cd: mov    0x10(%ecx),%eax
  0xa75763d0: test   %eax,%eax
  0xa75763d2: jne    0xa7576491
  0xa75763d8: push   %edx
  0xa75763d9: push   %ecx
  0xa75763da: call   0xa75763e4
  0xa75763df: jmp    0xa7576484
  0xa75763e4: push   %ecx
  0xa75763e5: lea    0x8(%esp),%eax
  0xa75763e9: cmpl   $0x0,-0x8(%ebp)
  0xa75763f0: je     0xa7576407
  0xa75763f6: push   $0xb7449b58
  0xa75763fb: call   0xa7576400
  0xa7576400: pusha  
  0xa7576401: call   0xb6ff5f32
  0xa7576406: hlt    
  0xa7576407: mov    %esi,-0x1c(%ebp)
  0xa757640a: mov    %esp,%edi
  0xa757640c: shr    $0xc,%edi
  0xa757640f: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576416: push   %edi
  0xa7576417: mov    %ebp,0x148(%edi)
  0xa757641d: mov    %eax,0x140(%edi)
  0xa7576423: call   0xb6e61c92
  0xa7576428: add    $0x8,%esp
  0xa757642b: push   %eax
  0xa757642c: mov    %esp,%eax
  0xa757642e: shr    $0xc,%eax
  0xa7576431: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576438: cmp    %eax,%edi
  0xa757643a: je     0xa7576451
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7576440: push   $0xb74acf8c
  0xa7576445: call   0xa757644a
  0xa757644a: pusha  
  0xa757644b: call   0xb6ff5f32
  0xa7576450: hlt    
  0xa7576451: pop    %eax
  0xa7576452: movl   $0x0,0x140(%edi)
  0xa757645c: movl   $0x0,0x148(%edi)
  0xa7576466: movl   $0x0,0x144(%edi)
  0xa7576470: cmpl   $0x0,0x4(%edi)
  0xa7576477: jne    0xa7556400
  0xa757647d: mov    -0x1c(%ebp),%esi
  0xa7576480: mov    -0x18(%ebp),%edi
  0xa7576483: ret    
  0xa7576484: pop    %ecx
  0xa7576485: pop    %edx
  0xa7576486: mov    0x10(%ecx),%eax
  0xa7576489: test   %eax,%eax
  0xa757648b: je     0xa75764d0
  0xa7576491: mov    0xc(%ecx),%ebx
  0xa7576494: test   %ebx,%ebx
  0xa7576496: je     0xa75764b8
  0xa7576498: mov    0xc0(%ebx),%eax
  0xa757649e: add    $0x8,%eax
  0xa75764a1: mov    %eax,0xc0(%ebx)
  0xa75764a7: and    $0x1ff8,%eax
  0xa75764ad: je     0xa75765d3
  0xa75764b3: jmp    0xa75764d0
  0xa75764b8: mov    0x10(%ecx),%ecx
  0xa75764bb: mov    0xc(%ecx),%eax
  0xa75764be: add    $0x8,%eax
  0xa75764c1: mov    %eax,0xc(%ecx)
  0xa75764c4: and    $0x1ff8,%eax
  0xa75764ca: je     0xa75765d3
  0xa75764d0: movzbl (%esi),%ebx
  0xa75764d3: jmp    *-0x48722ae0(,%ebx,4)
  0xa75764da: call   0xa75764e4
  0xa75764df: jmp    0xa7576583
  0xa75764e4: lea    0x4(%esp),%eax
  0xa75764e8: cmpl   $0x0,-0x8(%ebp)
  0xa75764ef: je     0xa7576506
  0xa75764f5: push   $0xb7449b58
  0xa75764fa: call   0xa75764ff
  0xa75764ff: pusha  
  0xa7576500: call   0xb6ff5f32
  0xa7576505: hlt    
  0xa7576506: mov    %esi,-0x1c(%ebp)
  0xa7576509: mov    %esp,%edi
  0xa757650b: shr    $0xc,%edi
  0xa757650e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576515: push   %edi
  0xa7576516: mov    %ebp,0x148(%edi)
  0xa757651c: mov    %eax,0x140(%edi)
  0xa7576522: call   0xb6e61328
  0xa7576527: add    $0x4,%esp
  0xa757652a: push   %eax
  0xa757652b: mov    %esp,%eax
  0xa757652d: shr    $0xc,%eax
  0xa7576530: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576537: cmp    %eax,%edi
  0xa7576539: je     0xa7576550
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757653f: push   $0xb74acf8c
  0xa7576544: call   0xa7576549
  0xa7576549: pusha  
  0xa757654a: call   0xb6ff5f32
  0xa757654f: hlt    
  0xa7576550: pop    %eax
  0xa7576551: movl   $0x0,0x140(%edi)
  0xa757655b: movl   $0x0,0x148(%edi)
  0xa7576565: movl   $0x0,0x144(%edi)
  0xa757656f: cmpl   $0x0,0x4(%edi)
  0xa7576576: jne    0xa7556400
  0xa757657c: mov    -0x1c(%ebp),%esi
  0xa757657f: mov    -0x18(%ebp),%edi
  0xa7576582: ret    
  0xa7576583: movzbl (%esi),%ebx
  0xa7576586: push   %eax
  0xa7576587: push   %ebx
  0xa7576588: mov    -0xc(%ebp),%ebx
  0xa757658b: mov    0xc(%ebx),%eax
  0xa757658e: test   %eax,%eax
  0xa7576590: je     0xa75765c9
  0xa7576596: push   %esi
  0xa7576597: push   %ebx
  0xa7576598: cmpl   $0x0,-0x8(%ebp)
  0xa757659f: je     0xa75765b6
  0xa75765a5: push   $0xb7449b18
  0xa75765aa: call   0xa75765af
  0xa75765af: pusha  
  0xa75765b0: call   0xb6ff5f32
  0xa75765b5: hlt    
  0xa75765b6: call   0xb6e61172
  0xa75765bb: add    $0x8,%esp
  0xa75765be: mov    0xc(%ebx),%ebx
  0xa75765c1: add    $0xe0,%ebx
  0xa75765c7: add    %ebx,%eax
  0xa75765c9: mov    %eax,-0x10(%ebp)
  0xa75765cc: pop    %ebx
  0xa75765cd: pop    %eax
  0xa75765ce: jmp    0xa75764d0
  0xa75765d3: neg    %edx
  0xa75765d5: add    %esi,%edx
  0xa75765d7: call   0xa75765e1
  0xa75765dc: jmp    0xa7576681
  0xa75765e1: push   %edx
  0xa75765e2: lea    0x8(%esp),%eax
  0xa75765e6: cmpl   $0x0,-0x8(%ebp)
  0xa75765ed: je     0xa7576604
  0xa75765f3: push   $0xb7449b58
  0xa75765f8: call   0xa75765fd
  0xa75765fd: pusha  
  0xa75765fe: call   0xb6ff5f32
  0xa7576603: hlt    
  0xa7576604: mov    %esi,-0x1c(%ebp)
  0xa7576607: mov    %esp,%edi
  0xa7576609: shr    $0xc,%edi
  0xa757660c: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576613: push   %edi
  0xa7576614: mov    %ebp,0x148(%edi)
  0xa757661a: mov    %eax,0x140(%edi)
  0xa7576620: call   0xb6e60bc8
  0xa7576625: add    $0x8,%esp
  0xa7576628: push   %eax
  0xa7576629: mov    %esp,%eax
  0xa757662b: shr    $0xc,%eax
  0xa757662e: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576635: cmp    %eax,%edi
  0xa7576637: je     0xa757664e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757663d: push   $0xb74acf8c
  0xa7576642: call   0xa7576647
  0xa7576647: pusha  
  0xa7576648: call   0xb6ff5f32
  0xa757664d: hlt    
  0xa757664e: pop    %eax
  0xa757664f: movl   $0x0,0x140(%edi)
  0xa7576659: movl   $0x0,0x148(%edi)
  0xa7576663: movl   $0x0,0x144(%edi)
  0xa757666d: cmpl   $0x0,0x4(%edi)
  0xa7576674: jne    0xa7556400
  0xa757667a: mov    -0x1c(%ebp),%esi
  0xa757667d: mov    -0x18(%ebp),%edi
  0xa7576680: ret    
  0xa7576681: movzbl (%esi),%ebx
  0xa7576684: test   %eax,%eax
  0xa7576686: je     0xa75764d0
  0xa757668c: mov    0x38(%eax),%ecx
  0xa757668f: cmp    $0xfffffffe,%ecx
  0xa7576692: je     0xa75764d0
  0xa7576698: mov    %eax,%ebx
  0xa757669a: mov    %esp,%ecx
  0xa757669c: shr    $0xc,%ecx
  0xa757669f: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa75766a6: call   0xa75766b0
  0xa75766ab: jmp    0xa757674f
  0xa75766b0: lea    0x4(%esp),%eax
  0xa75766b4: cmpl   $0x0,-0x8(%ebp)
  0xa75766bb: je     0xa75766d2
  0xa75766c1: push   $0xb7449b58
  0xa75766c6: call   0xa75766cb
  0xa75766cb: pusha  
  0xa75766cc: call   0xb6ff5f32
  0xa75766d1: hlt    
  0xa75766d2: mov    %esi,-0x1c(%ebp)
  0xa75766d5: mov    %esp,%edi
  0xa75766d7: shr    $0xc,%edi
  0xa75766da: mov    -0x4871aba0(,%edi,4),%edi
  0xa75766e1: push   %edi
  0xa75766e2: mov    %ebp,0x148(%edi)
  0xa75766e8: mov    %eax,0x140(%edi)
  0xa75766ee: call   0xb717c684
  0xa75766f3: add    $0x4,%esp
  0xa75766f6: push   %eax
  0xa75766f7: mov    %esp,%eax
  0xa75766f9: shr    $0xc,%eax
  0xa75766fc: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576703: cmp    %eax,%edi
  0xa7576705: je     0xa757671c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757670b: push   $0xb74acf8c
  0xa7576710: call   0xa7576715
  0xa7576715: pusha  
  0xa7576716: call   0xb6ff5f32
  0xa757671b: hlt    
  0xa757671c: pop    %eax
  0xa757671d: movl   $0x0,0x140(%edi)
  0xa7576727: movl   $0x0,0x148(%edi)
  0xa7576731: movl   $0x0,0x144(%edi)
  0xa757673b: cmpl   $0x0,0x4(%edi)
  0xa7576742: jne    0xa7556400
  0xa7576748: mov    -0x1c(%ebp),%esi
  0xa757674b: mov    -0x18(%ebp),%edi
  0xa757674e: ret    
  0xa757674f: mov    %eax,%ecx
  0xa7576751: mov    -0x4(%ebp),%edx
  0xa7576754: mov    %ebp,%esp
  0xa7576756: pop    %ebp
  0xa7576757: pop    %edi
  0xa7576758: mov    %edx,%esp
  0xa757675a: and    $0xfffffff0,%esp
  0xa757675d: push   %edi
  0xa757675e: jmp    *0x58(%ebx)
  0xa7576761: mov    -0x10(%ebp),%eax
  0xa7576764: test   %eax,%eax
  0xa7576766: je     0xa757677a
  0xa757676c: addl   $0x1,0xc(%eax)
  0xa7576770: sbbl   $0x0,0xc(%eax)
  0xa7576774: add    $0x10,%eax
  0xa7576777: mov    %eax,-0x10(%ebp)
  0xa757677a: movzbl 0x3(%esi),%ebx
  0xa757677e: add    $0x3,%esi
  0xa7576781: jmp    *-0x48722ae0(,%ebx,4)
  0xa7576788: int3   
  0xa7576789: int3   
  0xa757678a: int3   
  0xa757678b: int3   
  0xa757678c: int3   
  0xa757678d: int3   
  0xa757678e: int3   
  0xa757678f: int3   
  0xa7576790: int3   
  0xa7576791: int3   
  0xa7576792: int3   
  0xa7576793: int3   
  0xa7576794: int3   
  0xa7576795: int3   
  0xa7576796: int3   
  0xa7576797: int3   
  0xa7576798: int3   
  0xa7576799: int3   
  0xa757679a: int3   
  0xa757679b: int3   
  0xa757679c: int3   
  0xa757679d: int3   
  0xa757679e: int3   
  0xa757679f: int3   

----------------------------------------------------------------------
goto_w  200 goto_w  [0xa75767c0, 0xa7576c20]  1120 bytes

  0xa75767c0: sub    $0x4,%esp
  0xa75767c3: fstps  (%esp)
  0xa75767c6: jmp    0xa75767e4
  0xa75767cb: sub    $0x8,%esp
  0xa75767ce: fstpl  (%esp)
  0xa75767d1: jmp    0xa75767e4
  0xa75767d6: push   %edx
  0xa75767d7: push   %eax
  0xa75767d8: jmp    0xa75767e4
  0xa75767dd: push   %eax
  0xa75767de: jmp    0xa75767e4
  0xa75767e3: push   %eax
  0xa75767e4: push   %eax
  0xa75767e5: push   %ebx
  0xa75767e6: push   %ecx
  0xa75767e7: push   %edx
  0xa75767e8: mov    -0x10(%ebp),%ecx
  0xa75767eb: test   %ecx,%ecx
  0xa75767ed: je     0xa7576831
  0xa75767f3: mov    -0xc(%ebp),%ebx
  0xa75767f6: movzwl 0x2(%ecx),%edx
  0xa75767fa: add    0x8(%ebx),%edx
  0xa75767fd: lea    0x28(%edx),%edx
  0xa7576800: cmp    %esi,%edx
  0xa7576802: je     0xa7576831
  0xa7576808: push   %ecx
  0xa7576809: push   %esi
  0xa757680a: push   %ebx
  0xa757680b: cmpl   $0x0,-0x8(%ebp)
  0xa7576812: je     0xa7576829
  0xa7576818: push   $0xb7449b18
  0xa757681d: call   0xa7576822
  0xa7576822: pusha  
  0xa7576823: call   0xb6ff5f32
  0xa7576828: hlt    
  0xa7576829: call   0xb6e61602
  0xa757682e: add    $0xc,%esp
  0xa7576831: pop    %edx
  0xa7576832: pop    %ecx
  0xa7576833: pop    %ebx
  0xa7576834: pop    %eax
  0xa7576835: mov    -0xc(%ebp),%ecx
  0xa7576838: mov    -0x10(%ebp),%eax
  0xa757683b: test   %eax,%eax
  0xa757683d: je     0xa7576855
  0xa7576843: mov    0x4(%eax),%ebx
  0xa7576846: add    $0x1,%ebx
  0xa7576849: sbb    $0x0,%ebx
  0xa757684c: mov    %ebx,0x4(%eax)
  0xa757684f: add    0x8(%eax),%eax
  0xa7576852: mov    %eax,-0x10(%ebp)
  0xa7576855: mov    0x1(%esi),%edx
  0xa7576858: bswap  %edx
  0xa757685a: add    %edx,%esi
  0xa757685c: test   %edx,%edx
  0xa757685e: jns    0xa7576967
  0xa7576864: mov    0x10(%ecx),%eax
  0xa7576867: test   %eax,%eax
  0xa7576869: jne    0xa7576928
  0xa757686f: push   %edx
  0xa7576870: push   %ecx
  0xa7576871: call   0xa757687b
  0xa7576876: jmp    0xa757691b
  0xa757687b: push   %ecx
  0xa757687c: lea    0x8(%esp),%eax
  0xa7576880: cmpl   $0x0,-0x8(%ebp)
  0xa7576887: je     0xa757689e
  0xa757688d: push   $0xb7449b58
  0xa7576892: call   0xa7576897
  0xa7576897: pusha  
  0xa7576898: call   0xb6ff5f32
  0xa757689d: hlt    
  0xa757689e: mov    %esi,-0x1c(%ebp)
  0xa75768a1: mov    %esp,%edi
  0xa75768a3: shr    $0xc,%edi
  0xa75768a6: mov    -0x4871aba0(,%edi,4),%edi
  0xa75768ad: push   %edi
  0xa75768ae: mov    %ebp,0x148(%edi)
  0xa75768b4: mov    %eax,0x140(%edi)
  0xa75768ba: call   0xb6e61c92
  0xa75768bf: add    $0x8,%esp
  0xa75768c2: push   %eax
  0xa75768c3: mov    %esp,%eax
  0xa75768c5: shr    $0xc,%eax
  0xa75768c8: mov    -0x4871aba0(,%eax,4),%eax
  0xa75768cf: cmp    %eax,%edi
  0xa75768d1: je     0xa75768e8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75768d7: push   $0xb74acf8c
  0xa75768dc: call   0xa75768e1
  0xa75768e1: pusha  
  0xa75768e2: call   0xb6ff5f32
  0xa75768e7: hlt    
  0xa75768e8: pop    %eax
  0xa75768e9: movl   $0x0,0x140(%edi)
  0xa75768f3: movl   $0x0,0x148(%edi)
  0xa75768fd: movl   $0x0,0x144(%edi)
  0xa7576907: cmpl   $0x0,0x4(%edi)
  0xa757690e: jne    0xa7556400
  0xa7576914: mov    -0x1c(%ebp),%esi
  0xa7576917: mov    -0x18(%ebp),%edi
  0xa757691a: ret    
  0xa757691b: pop    %ecx
  0xa757691c: pop    %edx
  0xa757691d: mov    0x10(%ecx),%eax
  0xa7576920: test   %eax,%eax
  0xa7576922: je     0xa7576967
  0xa7576928: mov    0xc(%ecx),%ebx
  0xa757692b: test   %ebx,%ebx
  0xa757692d: je     0xa757694f
  0xa757692f: mov    0xc0(%ebx),%eax
  0xa7576935: add    $0x8,%eax
  0xa7576938: mov    %eax,0xc0(%ebx)
  0xa757693e: and    $0x1ff8,%eax
  0xa7576944: je     0xa7576a6a
  0xa757694a: jmp    0xa7576967
  0xa757694f: mov    0x10(%ecx),%ecx
  0xa7576952: mov    0xc(%ecx),%eax
  0xa7576955: add    $0x8,%eax
  0xa7576958: mov    %eax,0xc(%ecx)
  0xa757695b: and    $0x1ff8,%eax
  0xa7576961: je     0xa7576a6a
  0xa7576967: movzbl (%esi),%ebx
  0xa757696a: jmp    *-0x48722ae0(,%ebx,4)
  0xa7576971: call   0xa757697b
  0xa7576976: jmp    0xa7576a1a
  0xa757697b: lea    0x4(%esp),%eax
  0xa757697f: cmpl   $0x0,-0x8(%ebp)
  0xa7576986: je     0xa757699d
  0xa757698c: push   $0xb7449b58
  0xa7576991: call   0xa7576996
  0xa7576996: pusha  
  0xa7576997: call   0xb6ff5f32
  0xa757699c: hlt    
  0xa757699d: mov    %esi,-0x1c(%ebp)
  0xa75769a0: mov    %esp,%edi
  0xa75769a2: shr    $0xc,%edi
  0xa75769a5: mov    -0x4871aba0(,%edi,4),%edi
  0xa75769ac: push   %edi
  0xa75769ad: mov    %ebp,0x148(%edi)
  0xa75769b3: mov    %eax,0x140(%edi)
  0xa75769b9: call   0xb6e61328
  0xa75769be: add    $0x4,%esp
  0xa75769c1: push   %eax
  0xa75769c2: mov    %esp,%eax
  0xa75769c4: shr    $0xc,%eax
  0xa75769c7: mov    -0x4871aba0(,%eax,4),%eax
  0xa75769ce: cmp    %eax,%edi
  0xa75769d0: je     0xa75769e7
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75769d6: push   $0xb74acf8c
  0xa75769db: call   0xa75769e0
  0xa75769e0: pusha  
  0xa75769e1: call   0xb6ff5f32
  0xa75769e6: hlt    
  0xa75769e7: pop    %eax
  0xa75769e8: movl   $0x0,0x140(%edi)
  0xa75769f2: movl   $0x0,0x148(%edi)
  0xa75769fc: movl   $0x0,0x144(%edi)
  0xa7576a06: cmpl   $0x0,0x4(%edi)
  0xa7576a0d: jne    0xa7556400
  0xa7576a13: mov    -0x1c(%ebp),%esi
  0xa7576a16: mov    -0x18(%ebp),%edi
  0xa7576a19: ret    
  0xa7576a1a: movzbl (%esi),%ebx
  0xa7576a1d: push   %eax
  0xa7576a1e: push   %ebx
  0xa7576a1f: mov    -0xc(%ebp),%ebx
  0xa7576a22: mov    0xc(%ebx),%eax
  0xa7576a25: test   %eax,%eax
  0xa7576a27: je     0xa7576a60
  0xa7576a2d: push   %esi
  0xa7576a2e: push   %ebx
  0xa7576a2f: cmpl   $0x0,-0x8(%ebp)
  0xa7576a36: je     0xa7576a4d
  0xa7576a3c: push   $0xb7449b18
  0xa7576a41: call   0xa7576a46
  0xa7576a46: pusha  
  0xa7576a47: call   0xb6ff5f32
  0xa7576a4c: hlt    
  0xa7576a4d: call   0xb6e61172
  0xa7576a52: add    $0x8,%esp
  0xa7576a55: mov    0xc(%ebx),%ebx
  0xa7576a58: add    $0xe0,%ebx
  0xa7576a5e: add    %ebx,%eax
  0xa7576a60: mov    %eax,-0x10(%ebp)
  0xa7576a63: pop    %ebx
  0xa7576a64: pop    %eax
  0xa7576a65: jmp    0xa7576967
  0xa7576a6a: neg    %edx
  0xa7576a6c: add    %esi,%edx
  0xa7576a6e: call   0xa7576a78
  0xa7576a73: jmp    0xa7576b18
  0xa7576a78: push   %edx
  0xa7576a79: lea    0x8(%esp),%eax
  0xa7576a7d: cmpl   $0x0,-0x8(%ebp)
  0xa7576a84: je     0xa7576a9b
  0xa7576a8a: push   $0xb7449b58
  0xa7576a8f: call   0xa7576a94
  0xa7576a94: pusha  
  0xa7576a95: call   0xb6ff5f32
  0xa7576a9a: hlt    
  0xa7576a9b: mov    %esi,-0x1c(%ebp)
  0xa7576a9e: mov    %esp,%edi
  0xa7576aa0: shr    $0xc,%edi
  0xa7576aa3: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576aaa: push   %edi
  0xa7576aab: mov    %ebp,0x148(%edi)
  0xa7576ab1: mov    %eax,0x140(%edi)
  0xa7576ab7: call   0xb6e60bc8
  0xa7576abc: add    $0x8,%esp
  0xa7576abf: push   %eax
  0xa7576ac0: mov    %esp,%eax
  0xa7576ac2: shr    $0xc,%eax
  0xa7576ac5: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576acc: cmp    %eax,%edi
  0xa7576ace: je     0xa7576ae5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7576ad4: push   $0xb74acf8c
  0xa7576ad9: call   0xa7576ade
  0xa7576ade: pusha  
  0xa7576adf: call   0xb6ff5f32
  0xa7576ae4: hlt    
  0xa7576ae5: pop    %eax
  0xa7576ae6: movl   $0x0,0x140(%edi)
  0xa7576af0: movl   $0x0,0x148(%edi)
  0xa7576afa: movl   $0x0,0x144(%edi)
  0xa7576b04: cmpl   $0x0,0x4(%edi)
  0xa7576b0b: jne    0xa7556400
  0xa7576b11: mov    -0x1c(%ebp),%esi
  0xa7576b14: mov    -0x18(%ebp),%edi
  0xa7576b17: ret    
  0xa7576b18: movzbl (%esi),%ebx
  0xa7576b1b: test   %eax,%eax
  0xa7576b1d: je     0xa7576967
  0xa7576b23: mov    0x38(%eax),%ecx
  0xa7576b26: cmp    $0xfffffffe,%ecx
  0xa7576b29: je     0xa7576967
  0xa7576b2f: mov    %eax,%ebx
  0xa7576b31: mov    %esp,%ecx
  0xa7576b33: shr    $0xc,%ecx
  0xa7576b36: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7576b3d: call   0xa7576b47
  0xa7576b42: jmp    0xa7576be6
  0xa7576b47: lea    0x4(%esp),%eax
  0xa7576b4b: cmpl   $0x0,-0x8(%ebp)
  0xa7576b52: je     0xa7576b69
  0xa7576b58: push   $0xb7449b58
  0xa7576b5d: call   0xa7576b62
  0xa7576b62: pusha  
  0xa7576b63: call   0xb6ff5f32
  0xa7576b68: hlt    
  0xa7576b69: mov    %esi,-0x1c(%ebp)
  0xa7576b6c: mov    %esp,%edi
  0xa7576b6e: shr    $0xc,%edi
  0xa7576b71: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576b78: push   %edi
  0xa7576b79: mov    %ebp,0x148(%edi)
  0xa7576b7f: mov    %eax,0x140(%edi)
  0xa7576b85: call   0xb717c684
  0xa7576b8a: add    $0x4,%esp
  0xa7576b8d: push   %eax
  0xa7576b8e: mov    %esp,%eax
  0xa7576b90: shr    $0xc,%eax
  0xa7576b93: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576b9a: cmp    %eax,%edi
  0xa7576b9c: je     0xa7576bb3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7576ba2: push   $0xb74acf8c
  0xa7576ba7: call   0xa7576bac
  0xa7576bac: pusha  
  0xa7576bad: call   0xb6ff5f32
  0xa7576bb2: hlt    
  0xa7576bb3: pop    %eax
  0xa7576bb4: movl   $0x0,0x140(%edi)
  0xa7576bbe: movl   $0x0,0x148(%edi)
  0xa7576bc8: movl   $0x0,0x144(%edi)
  0xa7576bd2: cmpl   $0x0,0x4(%edi)
  0xa7576bd9: jne    0xa7556400
  0xa7576bdf: mov    -0x1c(%ebp),%esi
  0xa7576be2: mov    -0x18(%ebp),%edi
  0xa7576be5: ret    
  0xa7576be6: mov    %eax,%ecx
  0xa7576be8: mov    -0x4(%ebp),%edx
  0xa7576beb: mov    %ebp,%esp
  0xa7576bed: pop    %ebp
  0xa7576bee: pop    %edi
  0xa7576bef: mov    %edx,%esp
  0xa7576bf1: and    $0xfffffff0,%esp
  0xa7576bf4: push   %edi
  0xa7576bf5: jmp    *0x58(%ebx)
  0xa7576bf8: movzbl 0x5(%esi),%ebx
  0xa7576bfc: add    $0x5,%esi
  0xa7576bff: jmp    *-0x48722ae0(,%ebx,4)
  0xa7576c06: nop
  0xa7576c07: nop
  0xa7576c08: int3   
  0xa7576c09: int3   
  0xa7576c0a: int3   
  0xa7576c0b: int3   
  0xa7576c0c: int3   
  0xa7576c0d: int3   
  0xa7576c0e: int3   
  0xa7576c0f: int3   
  0xa7576c10: int3   
  0xa7576c11: int3   
  0xa7576c12: int3   
  0xa7576c13: int3   
  0xa7576c14: int3   
  0xa7576c15: int3   
  0xa7576c16: int3   
  0xa7576c17: int3   
  0xa7576c18: int3   
  0xa7576c19: int3   
  0xa7576c1a: int3   
  0xa7576c1b: int3   
  0xa7576c1c: int3   
  0xa7576c1d: int3   
  0xa7576c1e: int3   
  0xa7576c1f: int3   

----------------------------------------------------------------------
jsr_w  201 jsr_w  [0xa7576c40, 0xa7576d00]  192 bytes

  0xa7576c40: sub    $0x4,%esp
  0xa7576c43: fstps  (%esp)
  0xa7576c46: jmp    0xa7576c64
  0xa7576c4b: sub    $0x8,%esp
  0xa7576c4e: fstpl  (%esp)
  0xa7576c51: jmp    0xa7576c64
  0xa7576c56: push   %edx
  0xa7576c57: push   %eax
  0xa7576c58: jmp    0xa7576c64
  0xa7576c5d: push   %eax
  0xa7576c5e: jmp    0xa7576c64
  0xa7576c63: push   %eax
  0xa7576c64: push   %eax
  0xa7576c65: push   %ebx
  0xa7576c66: push   %ecx
  0xa7576c67: push   %edx
  0xa7576c68: mov    -0x10(%ebp),%ecx
  0xa7576c6b: test   %ecx,%ecx
  0xa7576c6d: je     0xa7576cb1
  0xa7576c73: mov    -0xc(%ebp),%ebx
  0xa7576c76: movzwl 0x2(%ecx),%edx
  0xa7576c7a: add    0x8(%ebx),%edx
  0xa7576c7d: lea    0x28(%edx),%edx
  0xa7576c80: cmp    %esi,%edx
  0xa7576c82: je     0xa7576cb1
  0xa7576c88: push   %ecx
  0xa7576c89: push   %esi
  0xa7576c8a: push   %ebx
  0xa7576c8b: cmpl   $0x0,-0x8(%ebp)
  0xa7576c92: je     0xa7576ca9
  0xa7576c98: push   $0xb7449b18
  0xa7576c9d: call   0xa7576ca2
  0xa7576ca2: pusha  
  0xa7576ca3: call   0xb6ff5f32
  0xa7576ca8: hlt    
  0xa7576ca9: call   0xb6e61602
  0xa7576cae: add    $0xc,%esp
  0xa7576cb1: pop    %edx
  0xa7576cb2: pop    %ecx
  0xa7576cb3: pop    %ebx
  0xa7576cb4: pop    %eax
  0xa7576cb5: mov    -0xc(%ebp),%ecx
  0xa7576cb8: mov    -0x10(%ebp),%eax
  0xa7576cbb: test   %eax,%eax
  0xa7576cbd: je     0xa7576cd5
  0xa7576cc3: mov    0x4(%eax),%ebx
  0xa7576cc6: add    $0x1,%ebx
  0xa7576cc9: sbb    $0x0,%ebx
  0xa7576ccc: mov    %ebx,0x4(%eax)
  0xa7576ccf: add    0x8(%eax),%eax
  0xa7576cd2: mov    %eax,-0x10(%ebp)
  0xa7576cd5: mov    0x1(%esi),%edx
  0xa7576cd8: bswap  %edx
  0xa7576cda: movzbl (%esi,%edx,1),%ebx
  0xa7576cde: lea    -0x23(%esi),%eax
  0xa7576ce1: sub    0x8(%ecx),%eax
  0xa7576ce4: add    %edx,%esi
  0xa7576ce6: push   %eax
  0xa7576ce7: jmp    *-0x487202e0(,%ebx,4)
  0xa7576cee: movzbl 0x5(%esi),%ebx
  0xa7576cf2: add    $0x5,%esi
  0xa7576cf5: jmp    *-0x48722ae0(,%ebx,4)
  0xa7576cfc: int3   
  0xa7576cfd: int3   
  0xa7576cfe: int3   
  0xa7576cff: int3   

----------------------------------------------------------------------
breakpoint  202 breakpoint  [0xa7576d20, 0xa7576ec0]  416 bytes

  0xa7576d20: sub    $0x4,%esp
  0xa7576d23: fstps  (%esp)
  0xa7576d26: jmp    0xa7576d44
  0xa7576d2b: sub    $0x8,%esp
  0xa7576d2e: fstpl  (%esp)
  0xa7576d31: jmp    0xa7576d44
  0xa7576d36: push   %edx
  0xa7576d37: push   %eax
  0xa7576d38: jmp    0xa7576d44
  0xa7576d3d: push   %eax
  0xa7576d3e: jmp    0xa7576d44
  0xa7576d43: push   %eax
  0xa7576d44: mov    -0xc(%ebp),%ecx
  0xa7576d47: call   0xa7576d51
  0xa7576d4c: jmp    0xa7576df2
  0xa7576d51: push   %esi
  0xa7576d52: push   %ecx
  0xa7576d53: lea    0xc(%esp),%eax
  0xa7576d57: cmpl   $0x0,-0x8(%ebp)
  0xa7576d5e: je     0xa7576d75
  0xa7576d64: push   $0xb7449b58
  0xa7576d69: call   0xa7576d6e
  0xa7576d6e: pusha  
  0xa7576d6f: call   0xb6ff5f32
  0xa7576d74: hlt    
  0xa7576d75: mov    %esi,-0x1c(%ebp)
  0xa7576d78: mov    %esp,%edi
  0xa7576d7a: shr    $0xc,%edi
  0xa7576d7d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576d84: push   %edi
  0xa7576d85: mov    %ebp,0x148(%edi)
  0xa7576d8b: mov    %eax,0x140(%edi)
  0xa7576d91: call   0xb6e5f460
  0xa7576d96: add    $0xc,%esp
  0xa7576d99: push   %eax
  0xa7576d9a: mov    %esp,%eax
  0xa7576d9c: shr    $0xc,%eax
  0xa7576d9f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576da6: cmp    %eax,%edi
  0xa7576da8: je     0xa7576dbf
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7576dae: push   $0xb74acf8c
  0xa7576db3: call   0xa7576db8
  0xa7576db8: pusha  
  0xa7576db9: call   0xb6ff5f32
  0xa7576dbe: hlt    
  0xa7576dbf: pop    %eax
  0xa7576dc0: movl   $0x0,0x140(%edi)
  0xa7576dca: movl   $0x0,0x148(%edi)
  0xa7576dd4: movl   $0x0,0x144(%edi)
  0xa7576dde: cmpl   $0x0,0x4(%edi)
  0xa7576de5: jne    0xa7556400
  0xa7576deb: mov    -0x1c(%ebp),%esi
  0xa7576dee: mov    -0x18(%ebp),%edi
  0xa7576df1: ret    
  0xa7576df2: mov    %eax,%ebx
  0xa7576df4: mov    -0xc(%ebp),%ecx
  0xa7576df7: call   0xa7576e01
  0xa7576dfc: jmp    0xa7576ea2
  0xa7576e01: push   %esi
  0xa7576e02: push   %ecx
  0xa7576e03: lea    0xc(%esp),%eax
  0xa7576e07: cmpl   $0x0,-0x8(%ebp)
  0xa7576e0e: je     0xa7576e25
  0xa7576e14: push   $0xb7449b58
  0xa7576e19: call   0xa7576e1e
  0xa7576e1e: pusha  
  0xa7576e1f: call   0xb6ff5f32
  0xa7576e24: hlt    
  0xa7576e25: mov    %esi,-0x1c(%ebp)
  0xa7576e28: mov    %esp,%edi
  0xa7576e2a: shr    $0xc,%edi
  0xa7576e2d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7576e34: push   %edi
  0xa7576e35: mov    %ebp,0x148(%edi)
  0xa7576e3b: mov    %eax,0x140(%edi)
  0xa7576e41: call   0xb6e5f764
  0xa7576e46: add    $0xc,%esp
  0xa7576e49: push   %eax
  0xa7576e4a: mov    %esp,%eax
  0xa7576e4c: shr    $0xc,%eax
  0xa7576e4f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7576e56: cmp    %eax,%edi
  0xa7576e58: je     0xa7576e6f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7576e5e: push   $0xb74acf8c
  0xa7576e63: call   0xa7576e68
  0xa7576e68: pusha  
  0xa7576e69: call   0xb6ff5f32
  0xa7576e6e: hlt    
  0xa7576e6f: pop    %eax
  0xa7576e70: movl   $0x0,0x140(%edi)
  0xa7576e7a: movl   $0x0,0x148(%edi)
  0xa7576e84: movl   $0x0,0x144(%edi)
  0xa7576e8e: cmpl   $0x0,0x4(%edi)
  0xa7576e95: jne    0xa7556400
  0xa7576e9b: mov    -0x1c(%ebp),%esi
  0xa7576e9e: mov    -0x18(%ebp),%edi
  0xa7576ea1: ret    
  0xa7576ea2: jmp    *-0x487202e0(,%ebx,4)
  0xa7576ea9: push   $0xb7302e8b
  0xa7576eae: call   0xa7576eb3
  0xa7576eb3: pusha  
  0xa7576eb4: call   0xb6ff5f32
  0xa7576eb9: hlt    
  0xa7576eba: nop
  0xa7576ebb: nop
  0xa7576ebc: int3   
  0xa7576ebd: int3   
  0xa7576ebe: int3   
  0xa7576ebf: int3   

----------------------------------------------------------------------
fast_agetfield  203 fast_agetfield  [0xa7576ee0, 0xa7576f20]  64 bytes

  0xa7576ee0: pop    %eax
  0xa7576ee1: movzwl 0x1(%esi),%ebx
  0xa7576ee5: mov    -0x14(%ebp),%ecx
  0xa7576ee8: shl    $0x2,%ebx
  0xa7576eeb: mov    0x10(%ecx,%ebx,4),%ebx
  0xa7576eef: cmp    (%eax),%eax
  0xa7576ef1: mov    (%eax,%ebx,1),%eax
  0xa7576ef4: movzbl 0x3(%esi),%ebx
  0xa7576ef8: add    $0x3,%esi
  0xa7576efb: jmp    *-0x48722ee0(,%ebx,4)
  0xa7576f02: nop
  0xa7576f03: nop
  0xa7576f04: int3   
  0xa7576f05: int3   
  0xa7576f06: int3   
  0xa7576f07: int3   
  0xa7576f08: int3   
  0xa7576f09: int3   
  0xa7576f0a: int3   
  0xa7576f0b: int3   
  0xa7576f0c: int3   
  0xa7576f0d: int3   
  0xa7576f0e: int3   
  0xa7576f0f: int3   
  0xa7576f10: int3   
  0xa7576f11: int3   
  0xa7576f12: int3   
  0xa7576f13: int3   
  0xa7576f14: int3   
  0xa7576f15: int3   
  0xa7576f16: int3   
  0xa7576f17: int3   
  0xa7576f18: int3   
  0xa7576f19: int3   
  0xa7576f1a: int3   
  0xa7576f1b: int3   
  0xa7576f1c: int3   
  0xa7576f1d: int3   
  0xa7576f1e: int3   
  0xa7576f1f: int3   

----------------------------------------------------------------------
fast_bgetfield  204 fast_bgetfield  [0xa7576f40, 0xa7576f80]  64 bytes

  0xa7576f40: pop    %eax
  0xa7576f41: movzwl 0x1(%esi),%ebx
  0xa7576f45: mov    -0x14(%ebp),%ecx
  0xa7576f48: shl    $0x2,%ebx
  0xa7576f4b: mov    0x10(%ecx,%ebx,4),%ebx
  0xa7576f4f: cmp    (%eax),%eax
  0xa7576f51: movsbl (%eax,%ebx,1),%eax
  0xa7576f55: movzbl 0x3(%esi),%ebx
  0xa7576f59: add    $0x3,%esi
  0xa7576f5c: jmp    *-0x48723ee0(,%ebx,4)
  0xa7576f63: nop
  0xa7576f64: int3   
  0xa7576f65: int3   
  0xa7576f66: int3   
  0xa7576f67: int3   
  0xa7576f68: int3   
  0xa7576f69: int3   
  0xa7576f6a: int3   
  0xa7576f6b: int3   
  0xa7576f6c: int3   
  0xa7576f6d: int3   
  0xa7576f6e: int3   
  0xa7576f6f: int3   
  0xa7576f70: int3   
  0xa7576f71: int3   
  0xa7576f72: int3   
  0xa7576f73: int3   
  0xa7576f74: int3   
  0xa7576f75: int3   
  0xa7576f76: int3   
  0xa7576f77: int3   
  0xa7576f78: int3   
  0xa7576f79: int3   
  0xa7576f7a: int3   
  0xa7576f7b: int3   
  0xa7576f7c: int3   
  0xa7576f7d: int3   
  0xa7576f7e: int3   
  0xa7576f7f: int3   

----------------------------------------------------------------------
fast_cgetfield  205 fast_cgetfield  [0xa7576fa0, 0xa7576fe0]  64 bytes

  0xa7576fa0: pop    %eax
  0xa7576fa1: movzwl 0x1(%esi),%ebx
  0xa7576fa5: mov    -0x14(%ebp),%ecx
  0xa7576fa8: shl    $0x2,%ebx
  0xa7576fab: mov    0x10(%ecx,%ebx,4),%ebx
  0xa7576faf: cmp    (%eax),%eax
  0xa7576fb1: movzwl (%eax,%ebx,1),%eax
  0xa7576fb5: movzbl 0x3(%esi),%ebx
  0xa7576fb9: add    $0x3,%esi
  0xa7576fbc: jmp    *-0x48723ee0(,%ebx,4)
  0xa7576fc3: nop
  0xa7576fc4: int3   
  0xa7576fc5: int3   
  0xa7576fc6: int3   
  0xa7576fc7: int3   
  0xa7576fc8: int3   
  0xa7576fc9: int3   
  0xa7576fca: int3   
  0xa7576fcb: int3   
  0xa7576fcc: int3   
  0xa7576fcd: int3   
  0xa7576fce: int3   
  0xa7576fcf: int3   
  0xa7576fd0: int3   
  0xa7576fd1: int3   
  0xa7576fd2: int3   
  0xa7576fd3: int3   
  0xa7576fd4: int3   
  0xa7576fd5: int3   
  0xa7576fd6: int3   
  0xa7576fd7: int3   
  0xa7576fd8: int3   
  0xa7576fd9: int3   
  0xa7576fda: int3   
  0xa7576fdb: int3   
  0xa7576fdc: int3   
  0xa7576fdd: int3   
  0xa7576fde: int3   
  0xa7576fdf: int3   

----------------------------------------------------------------------
fast_dgetfield  206 fast_dgetfield  [0xa7577000, 0xa7577040]  64 bytes

  0xa7577000: pop    %eax
  0xa7577001: movzwl 0x1(%esi),%ebx
  0xa7577005: mov    -0x14(%ebp),%ecx
  0xa7577008: shl    $0x2,%ebx
  0xa757700b: mov    0x10(%ecx,%ebx,4),%ebx
  0xa757700f: cmp    (%eax),%eax
  0xa7577011: fldl   (%eax,%ebx,1)
  0xa7577014: movzbl 0x3(%esi),%ebx
  0xa7577018: add    $0x3,%esi
  0xa757701b: jmp    *-0x487232e0(,%ebx,4)
  0xa7577022: nop
  0xa7577023: nop
  0xa7577024: int3   
  0xa7577025: int3   
  0xa7577026: int3   
  0xa7577027: int3   
  0xa7577028: int3   
  0xa7577029: int3   
  0xa757702a: int3   
  0xa757702b: int3   
  0xa757702c: int3   
  0xa757702d: int3   
  0xa757702e: int3   
  0xa757702f: int3   
  0xa7577030: int3   
  0xa7577031: int3   
  0xa7577032: int3   
  0xa7577033: int3   
  0xa7577034: int3   
  0xa7577035: int3   
  0xa7577036: int3   
  0xa7577037: int3   
  0xa7577038: int3   
  0xa7577039: int3   
  0xa757703a: int3   
  0xa757703b: int3   
  0xa757703c: int3   
  0xa757703d: int3   
  0xa757703e: int3   
  0xa757703f: int3   

----------------------------------------------------------------------
fast_fgetfield  207 fast_fgetfield  [0xa7577060, 0xa75770a0]  64 bytes

  0xa7577060: pop    %eax
  0xa7577061: movzwl 0x1(%esi),%ebx
  0xa7577065: mov    -0x14(%ebp),%ecx
  0xa7577068: shl    $0x2,%ebx
  0xa757706b: mov    0x10(%ecx,%ebx,4),%ebx
  0xa757706f: cmp    (%eax),%eax
  0xa7577071: flds   (%eax,%ebx,1)
  0xa7577074: movzbl 0x3(%esi),%ebx
  0xa7577078: add    $0x3,%esi
  0xa757707b: jmp    *-0x487236e0(,%ebx,4)
  0xa7577082: nop
  0xa7577083: nop
  0xa7577084: int3   
  0xa7577085: int3   
  0xa7577086: int3   
  0xa7577087: int3   
  0xa7577088: int3   
  0xa7577089: int3   
  0xa757708a: int3   
  0xa757708b: int3   
  0xa757708c: int3   
  0xa757708d: int3   
  0xa757708e: int3   
  0xa757708f: int3   
  0xa7577090: int3   
  0xa7577091: int3   
  0xa7577092: int3   
  0xa7577093: int3   
  0xa7577094: int3   
  0xa7577095: int3   
  0xa7577096: int3   
  0xa7577097: int3   
  0xa7577098: int3   
  0xa7577099: int3   
  0xa757709a: int3   
  0xa757709b: int3   
  0xa757709c: int3   
  0xa757709d: int3   
  0xa757709e: int3   
  0xa757709f: int3   

----------------------------------------------------------------------
fast_igetfield  208 fast_igetfield  [0xa75770c0, 0xa7577100]  64 bytes

  0xa75770c0: pop    %eax
  0xa75770c1: movzwl 0x1(%esi),%ebx
  0xa75770c5: mov    -0x14(%ebp),%ecx
  0xa75770c8: shl    $0x2,%ebx
  0xa75770cb: mov    0x10(%ecx,%ebx,4),%ebx
  0xa75770cf: cmp    (%eax),%eax
  0xa75770d1: mov    (%eax,%ebx,1),%eax
  0xa75770d4: movzbl 0x3(%esi),%ebx
  0xa75770d8: add    $0x3,%esi
  0xa75770db: jmp    *-0x48723ee0(,%ebx,4)
  0xa75770e2: nop
  0xa75770e3: nop
  0xa75770e4: int3   
  0xa75770e5: int3   
  0xa75770e6: int3   
  0xa75770e7: int3   
  0xa75770e8: int3   
  0xa75770e9: int3   
  0xa75770ea: int3   
  0xa75770eb: int3   
  0xa75770ec: int3   
  0xa75770ed: int3   
  0xa75770ee: int3   
  0xa75770ef: int3   
  0xa75770f0: int3   
  0xa75770f1: int3   
  0xa75770f2: int3   
  0xa75770f3: int3   
  0xa75770f4: int3   
  0xa75770f5: int3   
  0xa75770f6: int3   
  0xa75770f7: int3   
  0xa75770f8: int3   
  0xa75770f9: int3   
  0xa75770fa: int3   
  0xa75770fb: int3   
  0xa75770fc: int3   
  0xa75770fd: int3   
  0xa75770fe: int3   
  0xa75770ff: int3   

----------------------------------------------------------------------
fast_lgetfield  209 fast_lgetfield  [0xa7577120, 0xa7577160]  64 bytes

  0xa7577120: pop    %eax
  0xa7577121: movzwl 0x1(%esi),%ebx
  0xa7577125: mov    -0x14(%ebp),%ecx
  0xa7577128: shl    $0x2,%ebx
  0xa757712b: mov    0x10(%ecx,%ebx,4),%ebx
  0xa757712f: cmp    (%eax),%eax
  0xa7577131: push   $0xb7563c44
  0xa7577136: call   0xa757713b
  0xa757713b: pusha  
  0xa757713c: call   0xb6ff5f32
  0xa7577141: hlt    
  0xa7577142: movzbl 0x3(%esi),%ebx
  0xa7577146: add    $0x3,%esi
  0xa7577149: jmp    *-0x48723ae0(,%ebx,4)
  0xa7577150: int3   
  0xa7577151: int3   
  0xa7577152: int3   
  0xa7577153: int3   
  0xa7577154: int3   
  0xa7577155: int3   
  0xa7577156: int3   
  0xa7577157: int3   
  0xa7577158: int3   
  0xa7577159: int3   
  0xa757715a: int3   
  0xa757715b: int3   
  0xa757715c: int3   
  0xa757715d: int3   
  0xa757715e: int3   
  0xa757715f: int3   

----------------------------------------------------------------------
fast_sgetfield  210 fast_sgetfield  [0xa7577180, 0xa75771c0]  64 bytes

  0xa7577180: pop    %eax
  0xa7577181: movzwl 0x1(%esi),%ebx
  0xa7577185: mov    -0x14(%ebp),%ecx
  0xa7577188: shl    $0x2,%ebx
  0xa757718b: mov    0x10(%ecx,%ebx,4),%ebx
  0xa757718f: cmp    (%eax),%eax
  0xa7577191: movswl (%eax,%ebx,1),%eax
  0xa7577195: movzbl 0x3(%esi),%ebx
  0xa7577199: add    $0x3,%esi
  0xa757719c: jmp    *-0x48723ee0(,%ebx,4)
  0xa75771a3: nop
  0xa75771a4: int3   
  0xa75771a5: int3   
  0xa75771a6: int3   
  0xa75771a7: int3   
  0xa75771a8: int3   
  0xa75771a9: int3   
  0xa75771aa: int3   
  0xa75771ab: int3   
  0xa75771ac: int3   
  0xa75771ad: int3   
  0xa75771ae: int3   
  0xa75771af: int3   
  0xa75771b0: int3   
  0xa75771b1: int3   
  0xa75771b2: int3   
  0xa75771b3: int3   
  0xa75771b4: int3   
  0xa75771b5: int3   
  0xa75771b6: int3   
  0xa75771b7: int3   
  0xa75771b8: int3   
  0xa75771b9: int3   
  0xa75771ba: int3   
  0xa75771bb: int3   
  0xa75771bc: int3   
  0xa75771bd: int3   
  0xa75771be: int3   
  0xa75771bf: int3   

----------------------------------------------------------------------
fast_aputfield  211 fast_aputfield  [0xa75771e0, 0xa7577240]  96 bytes

  0xa75771e0: pop    %eax
  0xa75771e1: movzwl 0x1(%esi),%ebx
  0xa75771e5: mov    -0x14(%ebp),%ecx
  0xa75771e8: shl    $0x2,%ebx
  0xa75771eb: mov    0x14(%ecx,%ebx,4),%edx
  0xa75771ef: mov    0x10(%ecx,%ebx,4),%ebx
  0xa75771f3: shr    $0x15,%edx
  0xa75771f6: and    $0x1,%edx
  0xa75771f9: test   %edx,%edx
  0xa75771fb: je     0xa757721c
  0xa7577201: pop    %ecx
  0xa7577202: cmp    (%ecx),%eax
  0xa7577204: mov    %eax,(%ecx,%ebx,1)
  0xa7577207: shr    $0x9,%ecx
  0xa757720a: movb   $0x0,0x688c7000(,%ecx,1)
  0xa7577212: lock addl $0x0,(%esp)
  0xa7577217: jmp    0xa757722d
  0xa757721c: pop    %ecx
  0xa757721d: cmp    (%ecx),%eax
  0xa757721f: mov    %eax,(%ecx,%ebx,1)
  0xa7577222: shr    $0x9,%ecx
  0xa7577225: movb   $0x0,0x688c7000(,%ecx,1)
  0xa757722d: movzbl 0x3(%esi),%ebx
  0xa7577231: add    $0x3,%esi
  0xa7577234: jmp    *-0x48722ae0(,%ebx,4)
  0xa757723b: nop
  0xa757723c: int3   
  0xa757723d: int3   
  0xa757723e: int3   
  0xa757723f: int3   

----------------------------------------------------------------------
fast_bputfield  212 fast_bputfield  [0xa7577260, 0xa75772c0]  96 bytes

  0xa7577260: pop    %eax
  0xa7577261: movzwl 0x1(%esi),%ebx
  0xa7577265: mov    -0x14(%ebp),%ecx
  0xa7577268: shl    $0x2,%ebx
  0xa757726b: mov    0x14(%ecx,%ebx,4),%edx
  0xa757726f: mov    0x10(%ecx,%ebx,4),%ebx
  0xa7577273: shr    $0x15,%edx
  0xa7577276: and    $0x1,%edx
  0xa7577279: test   %edx,%edx
  0xa757727b: je     0xa7577291
  0xa7577281: pop    %ecx
  0xa7577282: cmp    (%ecx),%eax
  0xa7577284: mov    %al,(%ecx,%ebx,1)
  0xa7577287: lock addl $0x0,(%esp)
  0xa757728c: jmp    0xa7577297
  0xa7577291: pop    %ecx
  0xa7577292: cmp    (%ecx),%eax
  0xa7577294: mov    %al,(%ecx,%ebx,1)
  0xa7577297: movzbl 0x3(%esi),%ebx
  0xa757729b: add    $0x3,%esi
  0xa757729e: jmp    *-0x48722ae0(,%ebx,4)
  0xa75772a5: nop
  0xa75772a6: nop
  0xa75772a7: nop
  0xa75772a8: int3   
  0xa75772a9: int3   
  0xa75772aa: int3   
  0xa75772ab: int3   
  0xa75772ac: int3   
  0xa75772ad: int3   
  0xa75772ae: int3   
  0xa75772af: int3   
  0xa75772b0: int3   
  0xa75772b1: int3   
  0xa75772b2: int3   
  0xa75772b3: int3   
  0xa75772b4: int3   
  0xa75772b5: int3   
  0xa75772b6: int3   
  0xa75772b7: int3   
  0xa75772b8: int3   
  0xa75772b9: int3   
  0xa75772ba: int3   
  0xa75772bb: int3   
  0xa75772bc: int3   
  0xa75772bd: int3   
  0xa75772be: int3   
  0xa75772bf: int3   

----------------------------------------------------------------------
fast_zputfield  213 fast_zputfield  [0xa75772e0, 0xa7577340]  96 bytes

  0xa75772e0: pop    %eax
  0xa75772e1: movzwl 0x1(%esi),%ebx
  0xa75772e5: mov    -0x14(%ebp),%ecx
  0xa75772e8: shl    $0x2,%ebx
  0xa75772eb: mov    0x14(%ecx,%ebx,4),%edx
  0xa75772ef: mov    0x10(%ecx,%ebx,4),%ebx
  0xa75772f3: shr    $0x15,%edx
  0xa75772f6: and    $0x1,%edx
  0xa75772f9: test   %edx,%edx
  0xa75772fb: je     0xa7577314
  0xa7577301: pop    %ecx
  0xa7577302: cmp    (%ecx),%eax
  0xa7577304: and    $0x1,%eax
  0xa7577307: mov    %al,(%ecx,%ebx,1)
  0xa757730a: lock addl $0x0,(%esp)
  0xa757730f: jmp    0xa757731d
  0xa7577314: pop    %ecx
  0xa7577315: cmp    (%ecx),%eax
  0xa7577317: and    $0x1,%eax
  0xa757731a: mov    %al,(%ecx,%ebx,1)
  0xa757731d: movzbl 0x3(%esi),%ebx
  0xa7577321: add    $0x3,%esi
  0xa7577324: jmp    *-0x48722ae0(,%ebx,4)
  0xa757732b: nop
  0xa757732c: int3   
  0xa757732d: int3   
  0xa757732e: int3   
  0xa757732f: int3   
  0xa7577330: int3   
  0xa7577331: int3   
  0xa7577332: int3   
  0xa7577333: int3   
  0xa7577334: int3   
  0xa7577335: int3   
  0xa7577336: int3   
  0xa7577337: int3   
  0xa7577338: int3   
  0xa7577339: int3   
  0xa757733a: int3   
  0xa757733b: int3   
  0xa757733c: int3   
  0xa757733d: int3   
  0xa757733e: int3   
  0xa757733f: int3   

----------------------------------------------------------------------
fast_cputfield  214 fast_cputfield  [0xa7577360, 0xa75773c0]  96 bytes

  0xa7577360: pop    %eax
  0xa7577361: movzwl 0x1(%esi),%ebx
  0xa7577365: mov    -0x14(%ebp),%ecx
  0xa7577368: shl    $0x2,%ebx
  0xa757736b: mov    0x14(%ecx,%ebx,4),%edx
  0xa757736f: mov    0x10(%ecx,%ebx,4),%ebx
  0xa7577373: shr    $0x15,%edx
  0xa7577376: and    $0x1,%edx
  0xa7577379: test   %edx,%edx
  0xa757737b: je     0xa7577392
  0xa7577381: pop    %ecx
  0xa7577382: cmp    (%ecx),%eax
  0xa7577384: mov    %ax,(%ecx,%ebx,1)
  0xa7577388: lock addl $0x0,(%esp)
  0xa757738d: jmp    0xa7577399
  0xa7577392: pop    %ecx
  0xa7577393: cmp    (%ecx),%eax
  0xa7577395: mov    %ax,(%ecx,%ebx,1)
  0xa7577399: movzbl 0x3(%esi),%ebx
  0xa757739d: add    $0x3,%esi
  0xa75773a0: jmp    *-0x48722ae0(,%ebx,4)
  0xa75773a7: nop
  0xa75773a8: int3   
  0xa75773a9: int3   
  0xa75773aa: int3   
  0xa75773ab: int3   
  0xa75773ac: int3   
  0xa75773ad: int3   
  0xa75773ae: int3   
  0xa75773af: int3   
  0xa75773b0: int3   
  0xa75773b1: int3   
  0xa75773b2: int3   
  0xa75773b3: int3   
  0xa75773b4: int3   
  0xa75773b5: int3   
  0xa75773b6: int3   
  0xa75773b7: int3   
  0xa75773b8: int3   
  0xa75773b9: int3   
  0xa75773ba: int3   
  0xa75773bb: int3   
  0xa75773bc: int3   
  0xa75773bd: int3   
  0xa75773be: int3   
  0xa75773bf: int3   

----------------------------------------------------------------------
fast_dputfield  215 fast_dputfield  [0xa75773e0, 0xa7577440]  96 bytes

  0xa75773e0: fldl   (%esp)
  0xa75773e3: add    $0x8,%esp
  0xa75773e6: movzwl 0x1(%esi),%ebx
  0xa75773ea: mov    -0x14(%ebp),%ecx
  0xa75773ed: shl    $0x2,%ebx
  0xa75773f0: mov    0x14(%ecx,%ebx,4),%edx
  0xa75773f4: mov    0x10(%ecx,%ebx,4),%ebx
  0xa75773f8: shr    $0x15,%edx
  0xa75773fb: and    $0x1,%edx
  0xa75773fe: test   %edx,%edx
  0xa7577400: je     0xa7577416
  0xa7577406: pop    %ecx
  0xa7577407: cmp    (%ecx),%eax
  0xa7577409: fstpl  (%ecx,%ebx,1)
  0xa757740c: lock addl $0x0,(%esp)
  0xa7577411: jmp    0xa757741c
  0xa7577416: pop    %ecx
  0xa7577417: cmp    (%ecx),%eax
  0xa7577419: fstpl  (%ecx,%ebx,1)
  0xa757741c: movzbl 0x3(%esi),%ebx
  0xa7577420: add    $0x3,%esi
  0xa7577423: jmp    *-0x48722ae0(,%ebx,4)
  0xa757742a: nop
  0xa757742b: nop
  0xa757742c: int3   
  0xa757742d: int3   
  0xa757742e: int3   
  0xa757742f: int3   
  0xa7577430: int3   
  0xa7577431: int3   
  0xa7577432: int3   
  0xa7577433: int3   
  0xa7577434: int3   
  0xa7577435: int3   
  0xa7577436: int3   
  0xa7577437: int3   
  0xa7577438: int3   
  0xa7577439: int3   
  0xa757743a: int3   
  0xa757743b: int3   
  0xa757743c: int3   
  0xa757743d: int3   
  0xa757743e: int3   
  0xa757743f: int3   

----------------------------------------------------------------------
fast_fputfield  216 fast_fputfield  [0xa7577460, 0xa75774c0]  96 bytes

  0xa7577460: flds   (%esp)
  0xa7577463: add    $0x4,%esp
  0xa7577466: movzwl 0x1(%esi),%ebx
  0xa757746a: mov    -0x14(%ebp),%ecx
  0xa757746d: shl    $0x2,%ebx
  0xa7577470: mov    0x14(%ecx,%ebx,4),%edx
  0xa7577474: mov    0x10(%ecx,%ebx,4),%ebx
  0xa7577478: shr    $0x15,%edx
  0xa757747b: and    $0x1,%edx
  0xa757747e: test   %edx,%edx
  0xa7577480: je     0xa7577496
  0xa7577486: pop    %ecx
  0xa7577487: cmp    (%ecx),%eax
  0xa7577489: fstps  (%ecx,%ebx,1)
  0xa757748c: lock addl $0x0,(%esp)
  0xa7577491: jmp    0xa757749c
  0xa7577496: pop    %ecx
  0xa7577497: cmp    (%ecx),%eax
  0xa7577499: fstps  (%ecx,%ebx,1)
  0xa757749c: movzbl 0x3(%esi),%ebx
  0xa75774a0: add    $0x3,%esi
  0xa75774a3: jmp    *-0x48722ae0(,%ebx,4)
  0xa75774aa: nop
  0xa75774ab: nop
  0xa75774ac: int3   
  0xa75774ad: int3   
  0xa75774ae: int3   
  0xa75774af: int3   
  0xa75774b0: int3   
  0xa75774b1: int3   
  0xa75774b2: int3   
  0xa75774b3: int3   
  0xa75774b4: int3   
  0xa75774b5: int3   
  0xa75774b6: int3   
  0xa75774b7: int3   
  0xa75774b8: int3   
  0xa75774b9: int3   
  0xa75774ba: int3   
  0xa75774bb: int3   
  0xa75774bc: int3   
  0xa75774bd: int3   
  0xa75774be: int3   
  0xa75774bf: int3   

----------------------------------------------------------------------
fast_iputfield  217 fast_iputfield  [0xa75774e0, 0xa7577540]  96 bytes

  0xa75774e0: pop    %eax
  0xa75774e1: movzwl 0x1(%esi),%ebx
  0xa75774e5: mov    -0x14(%ebp),%ecx
  0xa75774e8: shl    $0x2,%ebx
  0xa75774eb: mov    0x14(%ecx,%ebx,4),%edx
  0xa75774ef: mov    0x10(%ecx,%ebx,4),%ebx
  0xa75774f3: shr    $0x15,%edx
  0xa75774f6: and    $0x1,%edx
  0xa75774f9: test   %edx,%edx
  0xa75774fb: je     0xa7577511
  0xa7577501: pop    %ecx
  0xa7577502: cmp    (%ecx),%eax
  0xa7577504: mov    %eax,(%ecx,%ebx,1)
  0xa7577507: lock addl $0x0,(%esp)
  0xa757750c: jmp    0xa7577517
  0xa7577511: pop    %ecx
  0xa7577512: cmp    (%ecx),%eax
  0xa7577514: mov    %eax,(%ecx,%ebx,1)
  0xa7577517: movzbl 0x3(%esi),%ebx
  0xa757751b: add    $0x3,%esi
  0xa757751e: jmp    *-0x48722ae0(,%ebx,4)
  0xa7577525: nop
  0xa7577526: nop
  0xa7577527: nop
  0xa7577528: int3   
  0xa7577529: int3   
  0xa757752a: int3   
  0xa757752b: int3   
  0xa757752c: int3   
  0xa757752d: int3   
  0xa757752e: int3   
  0xa757752f: int3   
  0xa7577530: int3   
  0xa7577531: int3   
  0xa7577532: int3   
  0xa7577533: int3   
  0xa7577534: int3   
  0xa7577535: int3   
  0xa7577536: int3   
  0xa7577537: int3   
  0xa7577538: int3   
  0xa7577539: int3   
  0xa757753a: int3   
  0xa757753b: int3   
  0xa757753c: int3   
  0xa757753d: int3   
  0xa757753e: int3   
  0xa757753f: int3   

----------------------------------------------------------------------
fast_lputfield  218 fast_lputfield  [0xa7577560, 0xa75775c0]  96 bytes

  0xa7577560: pop    %eax
  0xa7577561: pop    %edx
  0xa7577562: movzwl 0x1(%esi),%ebx
  0xa7577566: mov    -0x14(%ebp),%ecx
  0xa7577569: shl    $0x2,%ebx
  0xa757756c: push   %edx
  0xa757756d: mov    0x14(%ecx,%ebx,4),%edx
  0xa7577571: mov    0x10(%ecx,%ebx,4),%ebx
  0xa7577575: shr    $0x15,%edx
  0xa7577578: and    $0x1,%edx
  0xa757757b: test   %edx,%edx
  0xa757757d: je     0xa7577598
  0xa7577583: pop    %edx
  0xa7577584: pop    %ecx
  0xa7577585: cmp    (%ecx),%eax
  0xa7577587: mov    %edx,0x4(%ecx,%ebx,1)
  0xa757758b: mov    %eax,(%ecx,%ebx,1)
  0xa757758e: lock addl $0x0,(%esp)
  0xa7577593: jmp    0xa75775a3
  0xa7577598: pop    %edx
  0xa7577599: pop    %ecx
  0xa757759a: cmp    (%ecx),%eax
  0xa757759c: mov    %edx,0x4(%ecx,%ebx,1)
  0xa75775a0: mov    %eax,(%ecx,%ebx,1)
  0xa75775a3: movzbl 0x3(%esi),%ebx
  0xa75775a7: add    $0x3,%esi
  0xa75775aa: jmp    *-0x48722ae0(,%ebx,4)
  0xa75775b1: nop
  0xa75775b2: nop
  0xa75775b3: nop
  0xa75775b4: int3   
  0xa75775b5: int3   
  0xa75775b6: int3   
  0xa75775b7: int3   
  0xa75775b8: int3   
  0xa75775b9: int3   
  0xa75775ba: int3   
  0xa75775bb: int3   
  0xa75775bc: int3   
  0xa75775bd: int3   
  0xa75775be: int3   
  0xa75775bf: int3   

----------------------------------------------------------------------
fast_sputfield  219 fast_sputfield  [0xa75775e0, 0xa7577640]  96 bytes

  0xa75775e0: pop    %eax
  0xa75775e1: movzwl 0x1(%esi),%ebx
  0xa75775e5: mov    -0x14(%ebp),%ecx
  0xa75775e8: shl    $0x2,%ebx
  0xa75775eb: mov    0x14(%ecx,%ebx,4),%edx
  0xa75775ef: mov    0x10(%ecx,%ebx,4),%ebx
  0xa75775f3: shr    $0x15,%edx
  0xa75775f6: and    $0x1,%edx
  0xa75775f9: test   %edx,%edx
  0xa75775fb: je     0xa7577612
  0xa7577601: pop    %ecx
  0xa7577602: cmp    (%ecx),%eax
  0xa7577604: mov    %ax,(%ecx,%ebx,1)
  0xa7577608: lock addl $0x0,(%esp)
  0xa757760d: jmp    0xa7577619
  0xa7577612: pop    %ecx
  0xa7577613: cmp    (%ecx),%eax
  0xa7577615: mov    %ax,(%ecx,%ebx,1)
  0xa7577619: movzbl 0x3(%esi),%ebx
  0xa757761d: add    $0x3,%esi
  0xa7577620: jmp    *-0x48722ae0(,%ebx,4)
  0xa7577627: nop
  0xa7577628: int3   
  0xa7577629: int3   
  0xa757762a: int3   
  0xa757762b: int3   
  0xa757762c: int3   
  0xa757762d: int3   
  0xa757762e: int3   
  0xa757762f: int3   
  0xa7577630: int3   
  0xa7577631: int3   
  0xa7577632: int3   
  0xa7577633: int3   
  0xa7577634: int3   
  0xa7577635: int3   
  0xa7577636: int3   
  0xa7577637: int3   
  0xa7577638: int3   
  0xa7577639: int3   
  0xa757763a: int3   
  0xa757763b: int3   
  0xa757763c: int3   
  0xa757763d: int3   
  0xa757763e: int3   
  0xa757763f: int3   

----------------------------------------------------------------------
fast_aload_0  220 fast_aload_0  [0xa7577660, 0xa75776a0]  64 bytes

  0xa7577660: sub    $0x4,%esp
  0xa7577663: fstps  (%esp)
  0xa7577666: jmp    0xa7577684
  0xa757766b: sub    $0x8,%esp
  0xa757766e: fstpl  (%esp)
  0xa7577671: jmp    0xa7577684
  0xa7577676: push   %edx
  0xa7577677: push   %eax
  0xa7577678: jmp    0xa7577684
  0xa757767d: push   %eax
  0xa757767e: jmp    0xa7577684
  0xa7577683: push   %eax
  0xa7577684: mov    (%edi),%eax
  0xa7577686: movzbl 0x1(%esi),%ebx
  0xa757768a: inc    %esi
  0xa757768b: jmp    *-0x48722ee0(,%ebx,4)
  0xa7577692: nop
  0xa7577693: nop
  0xa7577694: int3   
  0xa7577695: int3   
  0xa7577696: int3   
  0xa7577697: int3   
  0xa7577698: int3   
  0xa7577699: int3   
  0xa757769a: int3   
  0xa757769b: int3   
  0xa757769c: int3   
  0xa757769d: int3   
  0xa757769e: int3   
  0xa757769f: int3   

----------------------------------------------------------------------
fast_iaccess_0  221 fast_iaccess_0  [0xa75776c0, 0xa7577720]  96 bytes

  0xa75776c0: sub    $0x4,%esp
  0xa75776c3: fstps  (%esp)
  0xa75776c6: jmp    0xa75776e4
  0xa75776cb: sub    $0x8,%esp
  0xa75776ce: fstpl  (%esp)
  0xa75776d1: jmp    0xa75776e4
  0xa75776d6: push   %edx
  0xa75776d7: push   %eax
  0xa75776d8: jmp    0xa75776e4
  0xa75776dd: push   %eax
  0xa75776de: jmp    0xa75776e4
  0xa75776e3: push   %eax
  0xa75776e4: mov    (%edi),%eax
  0xa75776e6: movzwl 0x2(%esi),%edx
  0xa75776ea: mov    -0x14(%ebp),%ecx
  0xa75776ed: shl    $0x2,%edx
  0xa75776f0: mov    0x10(%ecx,%edx,4),%ebx
  0xa75776f4: inc    %esi
  0xa75776f5: cmp    (%eax),%eax
  0xa75776f7: mov    (%eax,%ebx,1),%eax
  0xa75776fa: dec    %esi
  0xa75776fb: movzbl 0x4(%esi),%ebx
  0xa75776ff: add    $0x4,%esi
  0xa7577702: jmp    *-0x48723ee0(,%ebx,4)
  0xa7577709: nop
  0xa757770a: nop
  0xa757770b: nop
  0xa757770c: int3   
  0xa757770d: int3   
  0xa757770e: int3   
  0xa757770f: int3   
  0xa7577710: int3   
  0xa7577711: int3   
  0xa7577712: int3   
  0xa7577713: int3   
  0xa7577714: int3   
  0xa7577715: int3   
  0xa7577716: int3   
  0xa7577717: int3   
  0xa7577718: int3   
  0xa7577719: int3   
  0xa757771a: int3   
  0xa757771b: int3   
  0xa757771c: int3   
  0xa757771d: int3   
  0xa757771e: int3   
  0xa757771f: int3   

----------------------------------------------------------------------
fast_aaccess_0  222 fast_aaccess_0  [0xa7577740, 0xa75777a0]  96 bytes

  0xa7577740: sub    $0x4,%esp
  0xa7577743: fstps  (%esp)
  0xa7577746: jmp    0xa7577764
  0xa757774b: sub    $0x8,%esp
  0xa757774e: fstpl  (%esp)
  0xa7577751: jmp    0xa7577764
  0xa7577756: push   %edx
  0xa7577757: push   %eax
  0xa7577758: jmp    0xa7577764
  0xa757775d: push   %eax
  0xa757775e: jmp    0xa7577764
  0xa7577763: push   %eax
  0xa7577764: mov    (%edi),%eax
  0xa7577766: movzwl 0x2(%esi),%edx
  0xa757776a: mov    -0x14(%ebp),%ecx
  0xa757776d: shl    $0x2,%edx
  0xa7577770: mov    0x10(%ecx,%edx,4),%ebx
  0xa7577774: inc    %esi
  0xa7577775: cmp    (%eax),%eax
  0xa7577777: mov    (%eax,%ebx,1),%eax
  0xa757777a: dec    %esi
  0xa757777b: movzbl 0x4(%esi),%ebx
  0xa757777f: add    $0x4,%esi
  0xa7577782: jmp    *-0x48722ee0(,%ebx,4)
  0xa7577789: nop
  0xa757778a: nop
  0xa757778b: nop
  0xa757778c: int3   
  0xa757778d: int3   
  0xa757778e: int3   
  0xa757778f: int3   
  0xa7577790: int3   
  0xa7577791: int3   
  0xa7577792: int3   
  0xa7577793: int3   
  0xa7577794: int3   
  0xa7577795: int3   
  0xa7577796: int3   
  0xa7577797: int3   
  0xa7577798: int3   
  0xa7577799: int3   
  0xa757779a: int3   
  0xa757779b: int3   
  0xa757779c: int3   
  0xa757779d: int3   
  0xa757779e: int3   
  0xa757779f: int3   

----------------------------------------------------------------------
fast_faccess_0  223 fast_faccess_0  [0xa75777c0, 0xa7577820]  96 bytes

  0xa75777c0: sub    $0x4,%esp
  0xa75777c3: fstps  (%esp)
  0xa75777c6: jmp    0xa75777e4
  0xa75777cb: sub    $0x8,%esp
  0xa75777ce: fstpl  (%esp)
  0xa75777d1: jmp    0xa75777e4
  0xa75777d6: push   %edx
  0xa75777d7: push   %eax
  0xa75777d8: jmp    0xa75777e4
  0xa75777dd: push   %eax
  0xa75777de: jmp    0xa75777e4
  0xa75777e3: push   %eax
  0xa75777e4: mov    (%edi),%eax
  0xa75777e6: movzwl 0x2(%esi),%edx
  0xa75777ea: mov    -0x14(%ebp),%ecx
  0xa75777ed: shl    $0x2,%edx
  0xa75777f0: mov    0x10(%ecx,%edx,4),%ebx
  0xa75777f4: inc    %esi
  0xa75777f5: cmp    (%eax),%eax
  0xa75777f7: flds   (%eax,%ebx,1)
  0xa75777fa: dec    %esi
  0xa75777fb: movzbl 0x4(%esi),%ebx
  0xa75777ff: add    $0x4,%esi
  0xa7577802: jmp    *-0x487236e0(,%ebx,4)
  0xa7577809: nop
  0xa757780a: nop
  0xa757780b: nop
  0xa757780c: int3   
  0xa757780d: int3   
  0xa757780e: int3   
  0xa757780f: int3   
  0xa7577810: int3   
  0xa7577811: int3   
  0xa7577812: int3   
  0xa7577813: int3   
  0xa7577814: int3   
  0xa7577815: int3   
  0xa7577816: int3   
  0xa7577817: int3   
  0xa7577818: int3   
  0xa7577819: int3   
  0xa757781a: int3   
  0xa757781b: int3   
  0xa757781c: int3   
  0xa757781d: int3   
  0xa757781e: int3   
  0xa757781f: int3   

----------------------------------------------------------------------
fast_iload  224 fast_iload  [0xa7577840, 0xa7577880]  64 bytes

  0xa7577840: sub    $0x4,%esp
  0xa7577843: fstps  (%esp)
  0xa7577846: jmp    0xa7577864
  0xa757784b: sub    $0x8,%esp
  0xa757784e: fstpl  (%esp)
  0xa7577851: jmp    0xa7577864
  0xa7577856: push   %edx
  0xa7577857: push   %eax
  0xa7577858: jmp    0xa7577864
  0xa757785d: push   %eax
  0xa757785e: jmp    0xa7577864
  0xa7577863: push   %eax
  0xa7577864: movzbl 0x1(%esi),%ebx
  0xa7577868: neg    %ebx
  0xa757786a: mov    (%edi,%ebx,4),%eax
  0xa757786d: movzbl 0x2(%esi),%ebx
  0xa7577871: add    $0x2,%esi
  0xa7577874: jmp    *-0x48723ee0(,%ebx,4)
  0xa757787b: nop
  0xa757787c: int3   
  0xa757787d: int3   
  0xa757787e: int3   
  0xa757787f: int3   

----------------------------------------------------------------------
fast_iload2  225 fast_iload2  [0xa75778a0, 0xa7577900]  96 bytes

  0xa75778a0: sub    $0x4,%esp
  0xa75778a3: fstps  (%esp)
  0xa75778a6: jmp    0xa75778c4
  0xa75778ab: sub    $0x8,%esp
  0xa75778ae: fstpl  (%esp)
  0xa75778b1: jmp    0xa75778c4
  0xa75778b6: push   %edx
  0xa75778b7: push   %eax
  0xa75778b8: jmp    0xa75778c4
  0xa75778bd: push   %eax
  0xa75778be: jmp    0xa75778c4
  0xa75778c3: push   %eax
  0xa75778c4: movzbl 0x1(%esi),%ebx
  0xa75778c8: neg    %ebx
  0xa75778ca: mov    (%edi,%ebx,4),%eax
  0xa75778cd: push   %eax
  0xa75778ce: movzbl 0x3(%esi),%ebx
  0xa75778d2: neg    %ebx
  0xa75778d4: mov    (%edi,%ebx,4),%eax
  0xa75778d7: movzbl 0x4(%esi),%ebx
  0xa75778db: add    $0x4,%esi
  0xa75778de: jmp    *-0x48723ee0(,%ebx,4)
  0xa75778e5: nop
  0xa75778e6: nop
  0xa75778e7: nop
  0xa75778e8: int3   
  0xa75778e9: int3   
  0xa75778ea: int3   
  0xa75778eb: int3   
  0xa75778ec: int3   
  0xa75778ed: int3   
  0xa75778ee: int3   
  0xa75778ef: int3   
  0xa75778f0: int3   
  0xa75778f1: int3   
  0xa75778f2: int3   
  0xa75778f3: int3   
  0xa75778f4: int3   
  0xa75778f5: int3   
  0xa75778f6: int3   
  0xa75778f7: int3   
  0xa75778f8: int3   
  0xa75778f9: int3   
  0xa75778fa: int3   
  0xa75778fb: int3   
  0xa75778fc: int3   
  0xa75778fd: int3   
  0xa75778fe: int3   
  0xa75778ff: int3   

----------------------------------------------------------------------
fast_icaload  226 fast_icaload  [0xa7577920, 0xa7577980]  96 bytes

  0xa7577920: sub    $0x4,%esp
  0xa7577923: fstps  (%esp)
  0xa7577926: jmp    0xa7577944
  0xa757792b: sub    $0x8,%esp
  0xa757792e: fstpl  (%esp)
  0xa7577931: jmp    0xa7577944
  0xa7577936: push   %edx
  0xa7577937: push   %eax
  0xa7577938: jmp    0xa7577944
  0xa757793d: push   %eax
  0xa757793e: jmp    0xa7577944
  0xa7577943: push   %eax
  0xa7577944: movzbl 0x1(%esi),%ebx
  0xa7577948: neg    %ebx
  0xa757794a: mov    (%edi,%ebx,4),%eax
  0xa757794d: pop    %edx
  0xa757794e: cmp    0x8(%edx),%eax
  0xa7577951: mov    %eax,%ebx
  0xa7577953: jae    0xa7563e80
  0xa7577959: movzwl 0xc(%edx,%eax,2),%ebx
  0xa757795e: mov    %ebx,%eax
  0xa7577960: movzbl 0x3(%esi),%ebx
  0xa7577964: add    $0x3,%esi
  0xa7577967: jmp    *-0x48723ee0(,%ebx,4)
  0xa757796e: nop
  0xa757796f: nop
  0xa7577970: int3   
  0xa7577971: int3   
  0xa7577972: int3   
  0xa7577973: int3   
  0xa7577974: int3   
  0xa7577975: int3   
  0xa7577976: int3   
  0xa7577977: int3   
  0xa7577978: int3   
  0xa7577979: int3   
  0xa757797a: int3   
  0xa757797b: int3   
  0xa757797c: int3   
  0xa757797d: int3   
  0xa757797e: int3   
  0xa757797f: int3   

----------------------------------------------------------------------
fast_invokevfinal  227 fast_invokevfinal  [0xa75779a0, 0xa7577a00]  96 bytes

  0xa75779a0: sub    $0x4,%esp
  0xa75779a3: fstps  (%esp)
  0xa75779a6: jmp    0xa75779c4
  0xa75779ab: sub    $0x8,%esp
  0xa75779ae: fstpl  (%esp)
  0xa75779b1: jmp    0xa75779c4
  0xa75779b6: push   %edx
  0xa75779b7: push   %eax
  0xa75779b8: jmp    0xa75779c4
  0xa75779bd: push   %eax
  0xa75779be: jmp    0xa75779c4
  0xa75779c3: push   %eax
  0xa75779c4: push   $0xb7563e8c
  0xa75779c9: call   0xa75779ce
  0xa75779ce: pusha  
  0xa75779cf: call   0xb6ff5f32
  0xa75779d4: hlt    
  0xa75779d5: push   $0xb7302e8b
  0xa75779da: call   0xa75779df
  0xa75779df: pusha  
  0xa75779e0: call   0xb6ff5f32
  0xa75779e5: hlt    
  0xa75779e6: nop
  0xa75779e7: nop
  0xa75779e8: int3   
  0xa75779e9: int3   
  0xa75779ea: int3   
  0xa75779eb: int3   
  0xa75779ec: int3   
  0xa75779ed: int3   
  0xa75779ee: int3   
  0xa75779ef: int3   
  0xa75779f0: int3   
  0xa75779f1: int3   
  0xa75779f2: int3   
  0xa75779f3: int3   
  0xa75779f4: int3   
  0xa75779f5: int3   
  0xa75779f6: int3   
  0xa75779f7: int3   
  0xa75779f8: int3   
  0xa75779f9: int3   
  0xa75779fa: int3   
  0xa75779fb: int3   
  0xa75779fc: int3   
  0xa75779fd: int3   
  0xa75779fe: int3   
  0xa75779ff: int3   

----------------------------------------------------------------------
fast_linearswitch  228 fast_linearswitch  [0xa7577a20, 0xa7577aa0]  128 bytes

  0xa7577a20: pop    %eax
  0xa7577a21: bswap  %eax
  0xa7577a23: lea    0x4(%esi),%ebx
  0xa7577a26: and    $0xfffffffc,%ebx
  0xa7577a29: mov    0x4(%ebx),%ecx
  0xa7577a2c: bswap  %ecx
  0xa7577a2e: jmp    0xa7577a36
  0xa7577a30: cmp    0x8(%ebx,%ecx,8),%eax
  0xa7577a34: je     0xa7577a56
  0xa7577a36: dec    %ecx
  0xa7577a37: jge    0xa7577a30
  0xa7577a39: mov    -0x10(%ebp),%eax
  0xa7577a3c: test   %eax,%eax
  0xa7577a3e: je     0xa7577a52
  0xa7577a44: addl   $0x1,0x8(%eax)
  0xa7577a48: sbbl   $0x0,0x8(%eax)
  0xa7577a4c: add    0xc(%eax),%eax
  0xa7577a4f: mov    %eax,-0x10(%ebp)
  0xa7577a52: mov    (%ebx),%edx
  0xa7577a54: jmp    0xa7577a7f
  0xa7577a56: mov    0xc(%ebx,%ecx,8),%edx
  0xa7577a5a: mov    -0x10(%ebp),%eax
  0xa7577a5d: test   %eax,%eax
  0xa7577a5f: je     0xa7577a7f
  0xa7577a65: mov    $0x8,%ebx
  0xa7577a6a: imul   %ebx,%ecx
  0xa7577a6d: add    $0x10,%ecx
  0xa7577a70: addl   $0x1,(%eax,%ecx,1)
  0xa7577a74: sbbl   $0x0,(%eax,%ecx,1)
  0xa7577a78: add    0x4(%eax,%ecx,1),%eax
  0xa7577a7c: mov    %eax,-0x10(%ebp)
  0xa7577a7f: bswap  %edx
  0xa7577a81: movzbl (%esi,%edx,1),%ebx
  0xa7577a85: add    %edx,%esi
  0xa7577a87: jmp    *-0x48722ae0(,%ebx,4)
  0xa7577a8e: push   $0xb7302e8b
  0xa7577a93: call   0xa7577a98
  0xa7577a98: pusha  
  0xa7577a99: call   0xb6ff5f32
  0xa7577a9e: hlt    
  0xa7577a9f: nop

----------------------------------------------------------------------
fast_binaryswitch  229 fast_binaryswitch  [0xa7577ac0, 0xa7577b80]  192 bytes

  0xa7577ac0: pop    %eax
  0xa7577ac1: mov    %esi,-0x1c(%ebp)
  0xa7577ac4: lea    0xc(%esi),%ebx
  0xa7577ac7: and    $0xfffffffc,%ebx
  0xa7577aca: xor    %ecx,%ecx
  0xa7577acc: mov    -0x4(%ebx),%edx
  0xa7577acf: bswap  %edx
  0xa7577ad1: jmp    0xa7577ae8
  0xa7577ad6: lea    (%ecx,%edx,1),%edi
  0xa7577ad9: sar    %edi
  0xa7577adb: mov    (%ebx,%edi,8),%esi
  0xa7577ade: bswap  %esi
  0xa7577ae0: cmp    %esi,%eax
  0xa7577ae2: cmovl  %edi,%edx
  0xa7577ae5: cmovge %edi,%ecx
  0xa7577ae8: lea    0x1(%ecx),%edi
  0xa7577aeb: cmp    %edx,%edi
  0xa7577aed: jl     0xa7577ad6
  0xa7577aef: mov    (%ebx,%ecx,8),%esi
  0xa7577af2: bswap  %esi
  0xa7577af4: cmp    %esi,%eax
  0xa7577af6: jne    0xa7577b3a
  0xa7577afc: mov    0x4(%ebx,%ecx,8),%edx
  0xa7577b00: mov    -0x10(%ebp),%eax
  0xa7577b03: test   %eax,%eax
  0xa7577b05: je     0xa7577b25
  0xa7577b0b: mov    $0x8,%ebx
  0xa7577b10: imul   %ebx,%ecx
  0xa7577b13: add    $0x10,%ecx
  0xa7577b16: addl   $0x1,(%eax,%ecx,1)
  0xa7577b1a: sbbl   $0x0,(%eax,%ecx,1)
  0xa7577b1e: add    0x4(%eax,%ecx,1),%eax
  0xa7577b22: mov    %eax,-0x10(%ebp)
  0xa7577b25: bswap  %edx
  0xa7577b27: mov    -0x1c(%ebp),%esi
  0xa7577b2a: mov    -0x18(%ebp),%edi
  0xa7577b2d: movzbl (%esi,%edx,1),%ebx
  0xa7577b31: add    %edx,%esi
  0xa7577b33: jmp    *-0x48722ae0(,%ebx,4)
  0xa7577b3a: mov    -0x10(%ebp),%ecx
  0xa7577b3d: test   %ecx,%ecx
  0xa7577b3f: je     0xa7577b53
  0xa7577b45: addl   $0x1,0x8(%ecx)
  0xa7577b49: sbbl   $0x0,0x8(%ecx)
  0xa7577b4d: add    0xc(%ecx),%ecx
  0xa7577b50: mov    %ecx,-0x10(%ebp)
  0xa7577b53: mov    -0x8(%ebx),%edx
  0xa7577b56: bswap  %edx
  0xa7577b58: mov    -0x1c(%ebp),%esi
  0xa7577b5b: mov    -0x18(%ebp),%edi
  0xa7577b5e: movzbl (%esi,%edx,1),%ebx
  0xa7577b62: add    %edx,%esi
  0xa7577b64: jmp    *-0x48722ae0(,%ebx,4)
  0xa7577b6b: push   $0xb7302e8b
  0xa7577b70: call   0xa7577b75
  0xa7577b75: pusha  
  0xa7577b76: call   0xb6ff5f32
  0xa7577b7b: hlt    
  0xa7577b7c: int3   
  0xa7577b7d: int3   
  0xa7577b7e: int3   
  0xa7577b7f: int3   

----------------------------------------------------------------------
fast_aldc  230 fast_aldc  [0xa7577ba0, 0xa7577cc0]  288 bytes

  0xa7577ba0: sub    $0x4,%esp
  0xa7577ba3: fstps  (%esp)
  0xa7577ba6: jmp    0xa7577bc4
  0xa7577bab: sub    $0x8,%esp
  0xa7577bae: fstpl  (%esp)
  0xa7577bb1: jmp    0xa7577bc4
  0xa7577bb6: push   %edx
  0xa7577bb7: push   %eax
  0xa7577bb8: jmp    0xa7577bc4
  0xa7577bbd: push   %eax
  0xa7577bbe: jmp    0xa7577bc4
  0xa7577bc3: push   %eax
  0xa7577bc4: movzbl 0x1(%esi),%edx
  0xa7577bc8: shl    $0x2,%edx
  0xa7577bcb: mov    -0xc(%ebp),%eax
  0xa7577bce: mov    0x8(%eax),%eax
  0xa7577bd1: mov    0x8(%eax),%eax
  0xa7577bd4: mov    0x18(%eax),%eax
  0xa7577bd7: mov    (%eax),%eax
  0xa7577bd9: add    %edx,%eax
  0xa7577bdb: mov    0xc(%eax),%eax
  0xa7577bde: test   %eax,%eax
  0xa7577be0: jne    0xa7577ca5
  0xa7577be6: mov    $0xe6,%edx
  0xa7577beb: call   0xa7577bf5
  0xa7577bf0: jmp    0xa7577ca5
  0xa7577bf5: push   %edx
  0xa7577bf6: lea    0x8(%esp),%eax
  0xa7577bfa: cmpl   $0x0,-0x8(%ebp)
  0xa7577c01: je     0xa7577c18
  0xa7577c07: push   $0xb7449b58
  0xa7577c0c: call   0xa7577c11
  0xa7577c11: pusha  
  0xa7577c12: call   0xb6ff5f32
  0xa7577c17: hlt    
  0xa7577c18: mov    %esi,-0x1c(%ebp)
  0xa7577c1b: mov    %esp,%edi
  0xa7577c1d: shr    $0xc,%edi
  0xa7577c20: mov    -0x4871aba0(,%edi,4),%edi
  0xa7577c27: push   %edi
  0xa7577c28: mov    %ebp,0x148(%edi)
  0xa7577c2e: mov    %eax,0x140(%edi)
  0xa7577c34: call   0xb6e5b87e
  0xa7577c39: add    $0x8,%esp
  0xa7577c3c: push   %eax
  0xa7577c3d: mov    %esp,%eax
  0xa7577c3f: shr    $0xc,%eax
  0xa7577c42: mov    -0x4871aba0(,%eax,4),%eax
  0xa7577c49: cmp    %eax,%edi
  0xa7577c4b: je     0xa7577c62
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7577c51: push   $0xb74acf8c
  0xa7577c56: call   0xa7577c5b
  0xa7577c5b: pusha  
  0xa7577c5c: call   0xb6ff5f32
  0xa7577c61: hlt    
  0xa7577c62: pop    %eax
  0xa7577c63: movl   $0x0,0x140(%edi)
  0xa7577c6d: movl   $0x0,0x148(%edi)
  0xa7577c77: movl   $0x0,0x144(%edi)
  0xa7577c81: cmpl   $0x0,0x4(%edi)
  0xa7577c88: jne    0xa7556400
  0xa7577c8e: mov    0x170(%edi),%eax
  0xa7577c94: movl   $0x0,0x170(%edi)
  0xa7577c9e: mov    -0x1c(%ebp),%esi
  0xa7577ca1: mov    -0x18(%ebp),%edi
  0xa7577ca4: ret    
  0xa7577ca5: movzbl 0x2(%esi),%ebx
  0xa7577ca9: add    $0x2,%esi
  0xa7577cac: jmp    *-0x48722ee0(,%ebx,4)
  0xa7577cb3: nop
  0xa7577cb4: int3   
  0xa7577cb5: int3   
  0xa7577cb6: int3   
  0xa7577cb7: int3   
  0xa7577cb8: int3   
  0xa7577cb9: int3   
  0xa7577cba: int3   
  0xa7577cbb: int3   
  0xa7577cbc: int3   
  0xa7577cbd: int3   
  0xa7577cbe: int3   
  0xa7577cbf: int3   

----------------------------------------------------------------------
fast_aldc_w  231 fast_aldc_w  [0xa7577ce0, 0xa7577e00]  288 bytes

  0xa7577ce0: sub    $0x4,%esp
  0xa7577ce3: fstps  (%esp)
  0xa7577ce6: jmp    0xa7577d04
  0xa7577ceb: sub    $0x8,%esp
  0xa7577cee: fstpl  (%esp)
  0xa7577cf1: jmp    0xa7577d04
  0xa7577cf6: push   %edx
  0xa7577cf7: push   %eax
  0xa7577cf8: jmp    0xa7577d04
  0xa7577cfd: push   %eax
  0xa7577cfe: jmp    0xa7577d04
  0xa7577d03: push   %eax
  0xa7577d04: movzwl 0x1(%esi),%edx
  0xa7577d08: shl    $0x2,%edx
  0xa7577d0b: mov    -0xc(%ebp),%eax
  0xa7577d0e: mov    0x8(%eax),%eax
  0xa7577d11: mov    0x8(%eax),%eax
  0xa7577d14: mov    0x18(%eax),%eax
  0xa7577d17: mov    (%eax),%eax
  0xa7577d19: add    %edx,%eax
  0xa7577d1b: mov    0xc(%eax),%eax
  0xa7577d1e: test   %eax,%eax
  0xa7577d20: jne    0xa7577de5
  0xa7577d26: mov    $0xe7,%edx
  0xa7577d2b: call   0xa7577d35
  0xa7577d30: jmp    0xa7577de5
  0xa7577d35: push   %edx
  0xa7577d36: lea    0x8(%esp),%eax
  0xa7577d3a: cmpl   $0x0,-0x8(%ebp)
  0xa7577d41: je     0xa7577d58
  0xa7577d47: push   $0xb7449b58
  0xa7577d4c: call   0xa7577d51
  0xa7577d51: pusha  
  0xa7577d52: call   0xb6ff5f32
  0xa7577d57: hlt    
  0xa7577d58: mov    %esi,-0x1c(%ebp)
  0xa7577d5b: mov    %esp,%edi
  0xa7577d5d: shr    $0xc,%edi
  0xa7577d60: mov    -0x4871aba0(,%edi,4),%edi
  0xa7577d67: push   %edi
  0xa7577d68: mov    %ebp,0x148(%edi)
  0xa7577d6e: mov    %eax,0x140(%edi)
  0xa7577d74: call   0xb6e5b87e
  0xa7577d79: add    $0x8,%esp
  0xa7577d7c: push   %eax
  0xa7577d7d: mov    %esp,%eax
  0xa7577d7f: shr    $0xc,%eax
  0xa7577d82: mov    -0x4871aba0(,%eax,4),%eax
  0xa7577d89: cmp    %eax,%edi
  0xa7577d8b: je     0xa7577da2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7577d91: push   $0xb74acf8c
  0xa7577d96: call   0xa7577d9b
  0xa7577d9b: pusha  
  0xa7577d9c: call   0xb6ff5f32
  0xa7577da1: hlt    
  0xa7577da2: pop    %eax
  0xa7577da3: movl   $0x0,0x140(%edi)
  0xa7577dad: movl   $0x0,0x148(%edi)
  0xa7577db7: movl   $0x0,0x144(%edi)
  0xa7577dc1: cmpl   $0x0,0x4(%edi)
  0xa7577dc8: jne    0xa7556400
  0xa7577dce: mov    0x170(%edi),%eax
  0xa7577dd4: movl   $0x0,0x170(%edi)
  0xa7577dde: mov    -0x1c(%ebp),%esi
  0xa7577de1: mov    -0x18(%ebp),%edi
  0xa7577de4: ret    
  0xa7577de5: movzbl 0x3(%esi),%ebx
  0xa7577de9: add    $0x3,%esi
  0xa7577dec: jmp    *-0x48722ee0(,%ebx,4)
  0xa7577df3: nop
  0xa7577df4: int3   
  0xa7577df5: int3   
  0xa7577df6: int3   
  0xa7577df7: int3   
  0xa7577df8: int3   
  0xa7577df9: int3   
  0xa7577dfa: int3   
  0xa7577dfb: int3   
  0xa7577dfc: int3   
  0xa7577dfd: int3   
  0xa7577dfe: int3   
  0xa7577dff: int3   

----------------------------------------------------------------------
return_register_finalizer  232 return_register_finalizer  [0xa7577e20, 0xa7578220]  1024 bytes

  0xa7577e20: sub    $0x4,%esp
  0xa7577e23: fstps  (%esp)
  0xa7577e26: jmp    0xa7577e44
  0xa7577e2b: sub    $0x8,%esp
  0xa7577e2e: fstpl  (%esp)
  0xa7577e31: jmp    0xa7577e44
  0xa7577e36: push   %edx
  0xa7577e37: push   %eax
  0xa7577e38: jmp    0xa7577e44
  0xa7577e3d: push   %eax
  0xa7577e3e: jmp    0xa7577e44
  0xa7577e43: push   %eax
  0xa7577e44: mov    (%edi),%eax
  0xa7577e46: mov    0x4(%eax),%edi
  0xa7577e49: mov    0x58(%edi),%edi
  0xa7577e4c: test   $0x40000000,%edi
  0xa7577e52: je     0xa7577f02
  0xa7577e58: call   0xa7577e62
  0xa7577e5d: jmp    0xa7577f02
  0xa7577e62: push   %eax
  0xa7577e63: lea    0x8(%esp),%eax
  0xa7577e67: cmpl   $0x0,-0x8(%ebp)
  0xa7577e6e: je     0xa7577e85
  0xa7577e74: push   $0xb7449b58
  0xa7577e79: call   0xa7577e7e
  0xa7577e7e: pusha  
  0xa7577e7f: call   0xb6ff5f32
  0xa7577e84: hlt    
  0xa7577e85: mov    %esi,-0x1c(%ebp)
  0xa7577e88: mov    %esp,%edi
  0xa7577e8a: shr    $0xc,%edi
  0xa7577e8d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7577e94: push   %edi
  0xa7577e95: mov    %ebp,0x148(%edi)
  0xa7577e9b: mov    %eax,0x140(%edi)
  0xa7577ea1: call   0xb6e5c64c
  0xa7577ea6: add    $0x8,%esp
  0xa7577ea9: push   %eax
  0xa7577eaa: mov    %esp,%eax
  0xa7577eac: shr    $0xc,%eax
  0xa7577eaf: mov    -0x4871aba0(,%eax,4),%eax
  0xa7577eb6: cmp    %eax,%edi
  0xa7577eb8: je     0xa7577ecf
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7577ebe: push   $0xb74acf8c
  0xa7577ec3: call   0xa7577ec8
  0xa7577ec8: pusha  
  0xa7577ec9: call   0xb6ff5f32
  0xa7577ece: hlt    
  0xa7577ecf: pop    %eax
  0xa7577ed0: movl   $0x0,0x140(%edi)
  0xa7577eda: movl   $0x0,0x148(%edi)
  0xa7577ee4: movl   $0x0,0x144(%edi)
  0xa7577eee: cmpl   $0x0,0x4(%edi)
  0xa7577ef5: jne    0xa7556400
  0xa7577efb: mov    -0x1c(%ebp),%esi
  0xa7577efe: mov    -0x18(%ebp),%edi
  0xa7577f01: ret    
  0xa7577f02: mov    %esp,%ecx
  0xa7577f04: shr    $0xc,%ecx
  0xa7577f07: mov    -0x4871aba0(,%ecx,4),%ecx
  0xa7577f0e: mov    0x1a5(%ecx),%bl
  0xa7577f14: mov    %ebx,%edi
  0xa7577f16: movb   $0x0,0x1a5(%ecx)
  0xa7577f1d: mov    -0xc(%ebp),%ebx
  0xa7577f20: mov    0x14(%ebx),%ecx
  0xa7577f23: test   $0x20,%ecx
  0xa7577f29: je     0xa75780e5
  0xa7577f2f: mov    %edi,%ecx
  0xa7577f31: test   $0xff,%cl
  0xa7577f34: jne    0xa75781c0
  0xa7577f3a: lea    -0x28(%ebp),%edx
  0xa7577f3d: mov    0x4(%edx),%eax
  0xa7577f40: test   %eax,%eax
  0xa7577f42: jne    0xa7578004
  0xa7577f48: emms   
  0xa7577f4a: call   0xa7577f54
  0xa7577f4f: jmp    0xa7577ff3
  0xa7577f54: lea    0x4(%esp),%eax
  0xa7577f58: cmpl   $0x0,-0x8(%ebp)
  0xa7577f5f: je     0xa7577f76
  0xa7577f65: push   $0xb7449b58
  0xa7577f6a: call   0xa7577f6f
  0xa7577f6f: pusha  
  0xa7577f70: call   0xb6ff5f32
  0xa7577f75: hlt    
  0xa7577f76: mov    %esi,-0x1c(%ebp)
  0xa7577f79: mov    %esp,%edi
  0xa7577f7b: shr    $0xc,%edi
  0xa7577f7e: mov    -0x4871aba0(,%edi,4),%edi
  0xa7577f85: push   %edi
  0xa7577f86: mov    %ebp,0x148(%edi)
  0xa7577f8c: mov    %eax,0x140(%edi)
  0xa7577f92: call   0xb6e5f012
  0xa7577f97: add    $0x4,%esp
  0xa7577f9a: push   %eax
  0xa7577f9b: mov    %esp,%eax
  0xa7577f9d: shr    $0xc,%eax
  0xa7577fa0: mov    -0x4871aba0(,%eax,4),%eax
  0xa7577fa7: cmp    %eax,%edi
  0xa7577fa9: je     0xa7577fc0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7577faf: push   $0xb74acf8c
  0xa7577fb4: call   0xa7577fb9
  0xa7577fb9: pusha  
  0xa7577fba: call   0xb6ff5f32
  0xa7577fbf: hlt    
  0xa7577fc0: pop    %eax
  0xa7577fc1: movl   $0x0,0x140(%edi)
  0xa7577fcb: movl   $0x0,0x148(%edi)
  0xa7577fd5: movl   $0x0,0x144(%edi)
  0xa7577fdf: cmpl   $0x0,0x4(%edi)
  0xa7577fe6: jne    0xa7556400
  0xa7577fec: mov    -0x1c(%ebp),%esi
  0xa7577fef: mov    -0x18(%ebp),%edi
  0xa7577ff2: ret    
  0xa7577ff3: push   $0xb7302e8b
  0xa7577ff8: call   0xa7577ffd
  0xa7577ffd: pusha  
  0xa7577ffe: call   0xb6ff5f32
  0xa7578003: hlt    
  0xa7578004: mov    %esi,-0x1c(%ebp)
  0xa7578007: lea    (%edx),%eax
  0xa7578009: mov    0x4(%edx),%ecx
  0xa757800c: movl   $0x0,0x4(%edx)
  0xa7578013: mov    (%ecx),%ebx
  0xa7578015: and    $0x7,%ebx
  0xa7578018: cmp    $0x5,%ebx
  0xa757801b: je     0xa75780e2
  0xa7578021: mov    (%eax),%ebx
  0xa7578023: test   %ebx,%ebx
  0xa7578025: je     0xa75780e2
  0xa757802b: lock cmpxchg %ebx,(%ecx)
  0xa757802f: je     0xa75780e2
  0xa7578035: mov    %ecx,0x4(%edx)
  0xa7578038: call   0xa7578042
  0xa757803d: jmp    0xa75780e2
  0xa7578042: push   %edx
  0xa7578043: lea    0x8(%esp),%eax
  0xa7578047: cmpl   $0x0,-0x8(%ebp)
  0xa757804e: je     0xa7578065
  0xa7578054: push   $0xb7449b58
  0xa7578059: call   0xa757805e
  0xa757805e: pusha  
  0xa757805f: call   0xb6ff5f32
  0xa7578064: hlt    
  0xa7578065: mov    %esi,-0x1c(%ebp)
  0xa7578068: mov    %esp,%edi
  0xa757806a: shr    $0xc,%edi
  0xa757806d: mov    -0x4871aba0(,%edi,4),%edi
  0xa7578074: push   %edi
  0xa7578075: mov    %ebp,0x148(%edi)
  0xa757807b: mov    %eax,0x140(%edi)
  0xa7578081: call   0xb6e5ed36
  0xa7578086: add    $0x8,%esp
  0xa7578089: push   %eax
  0xa757808a: mov    %esp,%eax
  0xa757808c: shr    $0xc,%eax
  0xa757808f: mov    -0x4871aba0(,%eax,4),%eax
  0xa7578096: cmp    %eax,%edi
  0xa7578098: je     0xa75780af
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa757809e: push   $0xb74acf8c
  0xa75780a3: call   0xa75780a8
  0xa75780a8: pusha  
  0xa75780a9: call   0xb6ff5f32
  0xa75780ae: hlt    
  0xa75780af: pop    %eax
  0xa75780b0: movl   $0x0,0x140(%edi)
  0xa75780ba: movl   $0x0,0x148(%edi)
  0xa75780c4: movl   $0x0,0x144(%edi)
  0xa75780ce: cmpl   $0x0,0x4(%edi)
  0xa75780d5: jne    0xa7556400
  0xa75780db: mov    -0x1c(%ebp),%esi
  0xa75780de: mov    -0x18(%ebp),%edi
  0xa75780e1: ret    
  0xa75780e2: mov    -0x1c(%ebp),%esi
  0xa75780e5: mov    -0x20(%ebp),%ecx
  0xa75780e8: lea    -0x20(%ebp),%ebx
  0xa75780eb: jmp    0xa75781bc
  0xa75780f0: emms   
  0xa75780f2: call   0xa75780fc
  0xa75780f7: jmp    0xa757819b
  0xa75780fc: lea    0x4(%esp),%eax
  0xa7578100: cmpl   $0x0,-0x8(%ebp)
  0xa7578107: je     0xa757811e
  0xa757810d: push   $0xb7449b58
  0xa7578112: call   0xa7578117
  0xa7578117: pusha  
  0xa7578118: call   0xb6ff5f32
  0xa757811d: hlt    
  0xa757811e: mov    %esi,-0x1c(%ebp)
  0xa7578121: mov    %esp,%edi
  0xa7578123: shr    $0xc,%edi
  0xa7578126: mov    -0x4871aba0(,%edi,4),%edi
  0xa757812d: push   %edi
  0xa757812e: mov    %ebp,0x148(%edi)
  0xa7578134: mov    %eax,0x140(%edi)
  0xa757813a: call   0xb6e5f012
  0xa757813f: add    $0x4,%esp
  0xa7578142: push   %eax
  0xa7578143: mov    %esp,%eax
  0xa7578145: shr    $0xc,%eax
  0xa7578148: mov    -0x4871aba0(,%eax,4),%eax
  0xa757814f: cmp    %eax,%edi
  0xa7578151: je     0xa7578168
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa7578157: push   $0xb74acf8c
  0xa757815c: call   0xa7578161
  0xa7578161: pusha  
  0xa7578162: call   0xb6ff5f32
  0xa7578167: hlt    
  0xa7578168: pop    %eax
  0xa7578169: movl   $0x0,0x140(%edi)
  0xa7578173: movl   $0x0,0x148(%edi)
  0xa757817d: movl   $0x0,0x144(%edi)
  0xa7578187: cmpl   $0x0,0x4(%edi)
  0xa757818e: jne    0xa7556400
  0xa7578194: mov    -0x1c(%ebp),%esi
  0xa7578197: mov    -0x18(%ebp),%edi
  0xa757819a: ret    
  0xa757819b: push   $0xb7302e8b
  0xa75781a0: call   0xa75781a5
  0xa75781a5: pusha  
  0xa75781a6: call   0xb6ff5f32
  0xa75781ab: hlt    
  0xa75781ac: cmpl   $0x0,0x4(%ecx)
  0xa75781b3: jne    0xa75780f0
  0xa75781b9: add    $0x8,%ecx
  0xa75781bc: cmp    %ebx,%ecx
  0xa75781be: jne    0xa75781ac
  0xa75781c0: cmpb   $0x0,0xb78c1e7e
  0xa75781c7: je     0xa7578204
  0xa75781cd: mov    %esp,%ebx
  0xa75781cf: shr    $0xc,%ebx
  0xa75781d2: mov    -0x4871aba0(,%ebx,4),%ebx
  0xa75781d9: mov    -0xc(%ebp),%ecx
  0xa75781dc: push   %ecx
  0xa75781dd: push   %ebx
  0xa75781de: cmpl   $0x0,-0x8(%ebp)
  0xa75781e5: je     0xa75781fc
  0xa75781eb: push   $0xb7449b18
  0xa75781f0: call   0xa75781f5
  0xa75781f5: pusha  
  0xa75781f6: call   0xb6ff5f32
  0xa75781fb: hlt    
  0xa75781fc: call   0xb7175974
  0xa7578201: add    $0x8,%esp
  0xa7578204: mov    -0x4(%ebp),%ebx
  0xa7578207: mov    %ebp,%esp
  0xa7578209: pop    %ebp
  0xa757820a: pop    %esi
  0xa757820b: mov    %ebx,%esp
  0xa757820d: jmp    *%esi
  0xa757820f: push   $0xb7302e8b
  0xa7578214: call   0xa7578219
  0xa7578219: pusha  
  0xa757821a: call   0xb6ff5f32
  0xa757821f: hlt    

----------------------------------------------------------------------
invokehandle  233 invokehandle  [0xa7578240, 0xa75784c0]  640 bytes

  0xa7578240: sub    $0x4,%esp
  0xa7578243: fstps  (%esp)
  0xa7578246: jmp    0xa7578264
  0xa757824b: sub    $0x8,%esp
  0xa757824e: fstpl  (%esp)
  0xa7578251: jmp    0xa7578264
  0xa7578256: push   %edx
  0xa7578257: push   %eax
  0xa7578258: jmp    0xa7578264
  0xa757825d: push   %eax
  0xa757825e: jmp    0xa7578264
  0xa7578263: push   %eax
  0xa7578264: mov    %esi,-0x1c(%ebp)
  0xa7578267: movzwl 0x1(%esi),%edx
  0xa757826b: mov    -0x14(%ebp),%ecx
  0xa757826e: shl    $0x2,%edx
  0xa7578271: mov    0x8(%ecx,%edx,4),%ebx
  0xa7578275: shr    $0x10,%ebx
  0xa7578278: and    $0xff,%ebx
  0xa757827e: cmp    $0xe9,%ebx
  0xa7578284: je     0xa7578343
  0xa757828a: mov    $0xe9,%ebx
  0xa757828f: call   0xa7578299
  0xa7578294: jmp    0xa7578339
  0xa7578299: push   %ebx
  0xa757829a: lea    0x8(%esp),%eax
  0xa757829e: cmpl   $0x0,-0x8(%ebp)
  0xa75782a5: je     0xa75782bc
  0xa75782ab: push   $0xb7449b58
  0xa75782b0: call   0xa75782b5
  0xa75782b5: pusha  
  0xa75782b6: call   0xb6ff5f32
  0xa75782bb: hlt    
  0xa75782bc: mov    %esi,-0x1c(%ebp)
  0xa75782bf: mov    %esp,%edi
  0xa75782c1: shr    $0xc,%edi
  0xa75782c4: mov    -0x4871aba0(,%edi,4),%edi
  0xa75782cb: push   %edi
  0xa75782cc: mov    %ebp,0x148(%edi)
  0xa75782d2: mov    %eax,0x140(%edi)
  0xa75782d8: call   0xb6e6051a
  0xa75782dd: add    $0x8,%esp
  0xa75782e0: push   %eax
  0xa75782e1: mov    %esp,%eax
  0xa75782e3: shr    $0xc,%eax
  0xa75782e6: mov    -0x4871aba0(,%eax,4),%eax
  0xa75782ed: cmp    %eax,%edi
  0xa75782ef: je     0xa7578306
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0xa75782f5: push   $0xb74acf8c
  0xa75782fa: call   0xa75782ff
  0xa75782ff: pusha  
  0xa7578300: call   0xb6ff5f32
  0xa7578305: hlt    
  0xa7578306: pop    %eax
  0xa7578307: movl   $0x0,0x140(%edi)
  0xa7578311: movl   $0x0,0x148(%edi)
  0xa757831b: movl   $0x0,0x144(%edi)
  0xa7578325: cmpl   $0x0,0x4(%edi)
  0xa757832c: jne    0xa7556400
  0xa7578332: mov    -0x1c(%ebp),%esi
  0xa7578335: mov    -0x18(%ebp),%edi
  0xa7578338: ret    
  0xa7578339: movzwl 0x1(%esi),%edx
  0xa757833d: mov    -0x14(%ebp),%ecx
  0xa7578340: shl    $0x2,%edx
  0xa7578343: mov    0xc(%ecx,%edx,4),%ebx
  0xa7578347: mov    0x10(%ecx,%edx,4),%eax
  0xa757834b: mov    0x14(%ecx,%edx,4),%edx
  0xa757834f: test   $0x1000000,%edx
  0xa7578355: je     0xa7578372
  0xa7578357: push   %ebx
  0xa7578358: mov    %eax,%ebx
  0xa757835a: shl    $0x2,%ebx
  0xa757835d: mov    -0xc(%ebp),%eax
  0xa7578360: mov    0x8(%eax),%eax
  0xa7578363: mov    0x8(%eax),%eax
  0xa7578366: mov    0x18(%eax),%eax
  0xa7578369: mov    (%eax),%eax
  0xa757836b: add    %ebx,%eax
  0xa757836d: mov    0xc(%eax),%eax
  0xa7578370: pop    %ebx
  0xa7578371: push   %eax
  0xa7578372: mov    %edx,%ecx
  0xa7578374: and    $0xff,%ecx
  0xa757837a: mov    -0x4(%esp,%ecx,4),%ecx
  0xa757837e: shr    $0x1c,%edx
  0xa7578381: mov    -0x48724fa0(,%edx,4),%edx
  0xa7578388: push   %edx
  0xa7578389: cmp    (%ecx),%eax
  0xa757838b: mov    -0x10(%ebp),%eax
  0xa757838e: test   %eax,%eax
  0xa7578390: je     0xa75783a4
  0xa7578396: addl   $0x1,0x4(%eax)
  0xa757839a: sbbl   $0x0,0x4(%eax)
  0xa757839e: add    $0x18,%eax
  0xa75783a1: mov    %eax,-0x10(%ebp)
  0xa75783a4: mov    -0x10(%ebp),%edx
  0xa75783a7: test   %edx,%edx
  0xa75783a9: je     0xa757849a
  0xa75783af: cmpb   $0xb,-0x18(%edx)
  0xa75783b3: jne    0xa757849a
  0xa75783b9: add    $0x4,%edx
  0xa75783bc: mov    -0x4(%edx),%esi
  0xa75783bf: sub    $0x0,%esi
  0xa75783c2: cmp    $0x2,%esi
  0xa75783c5: jl     0xa7578492
  0xa75783cb: mov    0x8(%ebx),%esi
  0xa75783ce: movzwl 0x24(%esi),%esi
  0xa75783d2: sub    (%edx),%esi
  0xa75783d4: sub    $0x1,%esi
  0xa75783d7: mov    0x4(%esp,%esi,4),%esi
  0xa75783db: test   %esi,%esi
  0xa75783dd: jne    0xa75783e5
  0xa75783df: orl    $0x1,0x4(%edx)
  0xa75783e3: jmp    0xa7578421
  0xa75783e5: mov    0x4(%esi),%esi
  0xa75783e8: xor    0x4(%edx),%esi
  0xa75783eb: test   $0xfffffffc,%esi
  0xa75783f1: je     0xa7578421
  0xa75783f3: test   $0x2,%esi
  0xa75783f9: jne    0xa7578421
  0xa75783fb: cmpl   $0x0,0x4(%edx)
  0xa7578402: je     0xa757841e
  0xa7578404: cmpl   $0x1,0x4(%edx)
  0xa757840b: je     0xa757841e
  0xa757840d: xor    0x4(%edx),%esi
  0xa7578410: test   $0xfffffffc,%esi
  0xa7578416: je     0xa7578421
  0xa7578418: orl    $0x2,0x4(%edx)
  0xa757841c: jmp    0xa7578421
  0xa757841e: mov    %esi,0x4(%edx)
  0xa7578421: add    $0x8,%edx
  0xa7578424: mov    -0xc(%edx),%esi
  0xa7578427: sub    $0x2,%esi
  0xa757842a: cmp    $0x2,%esi
  0xa757842d: jl     0xa7578492
  0xa7578433: mov    0x8(%ebx),%esi
  0xa7578436: movzwl 0x24(%esi),%esi
  0xa757843a: sub    (%edx),%esi
  0xa757843c: sub    $0x1,%esi
  0xa757843f: mov    0x4(%esp,%esi,4),%esi
  0xa7578443: test   %esi,%esi
  0xa7578445: jne    0xa757844d
  0xa7578447: orl    $0x1,0x4(%edx)
  0xa757844b: jmp    0xa7578489
  0xa757844d: mov    0x4(%esi),%esi
  0xa7578450: xor    0x4(%edx),%esi
  0xa7578453: test   $0xfffffffc,%esi
  0xa7578459: je     0xa7578489
  0xa757845b: test   $0x2,%esi
  0xa7578461: jne    0xa7578489
  0xa7578463: cmpl   $0x0,0x4(%edx)
  0xa757846a: je     0xa7578486
  0xa757846c: cmpl   $0x1,0x4(%edx)
  0xa7578473: je     0xa7578486
  0xa7578475: xor    0x4(%edx),%esi
  0xa7578478: test   $0xfffffffc,%esi
  0xa757847e: je     0xa7578489
  0xa7578480: orl    $0x2,0x4(%edx)
  0xa7578484: jmp    0xa7578489
  0xa7578486: mov    %esi,0x4(%edx)
  0xa7578489: add    $0x8,%edx
  0xa757848c: mov    -0x14(%edx),%esi
  0xa757848f: sub    $0x4,%esi
  0xa7578492: shl    $0x2,%esi
  0xa7578495: add    %esi,%edx
  0xa7578497: mov    %edx,-0x10(%ebp)
  0xa757849a: lea    0x4(%esp),%esi
  0xa757849e: mov    %esi,-0x8(%ebp)
  0xa75784a1: jmp    *0x38(%ebx)
  0xa75784a4: push   $0xb7302e8b
  0xa75784a9: call   0xa75784ae
  0xa75784ae: pusha  
  0xa75784af: call   0xb6ff5f32
  0xa75784b4: hlt    
  0xa75784b5: nop
  0xa75784b6: nop
  0xa75784b7: nop
  0xa75784b8: int3   
  0xa75784b9: int3   
  0xa75784ba: int3   
  0xa75784bb: int3   
  0xa75784bc: int3   
  0xa75784bd: int3   
  0xa75784be: int3   
  0xa75784bf: int3   

----------------------------------------------------------------------
_shouldnotreachhere  234 _shouldnotreachhere  [0xa75784e0, 0xa7578540]  96 bytes

  0xa75784e0: sub    $0x4,%esp
  0xa75784e3: fstps  (%esp)
  0xa75784e6: jmp    0xa7578504
  0xa75784eb: sub    $0x8,%esp
  0xa75784ee: fstpl  (%esp)
  0xa75784f1: jmp    0xa7578504
  0xa75784f6: push   %edx
  0xa75784f7: push   %eax
  0xa75784f8: jmp    0xa7578504
  0xa75784fd: push   %eax
  0xa75784fe: jmp    0xa7578504
  0xa7578503: push   %eax
  0xa7578504: push   $0xb756361b
  0xa7578509: call   0xa757850e
  0xa757850e: pusha  
  0xa757850f: call   0xb6ff5f32
  0xa7578514: hlt    
  0xa7578515: movzbl 0x1(%esi),%ebx
  0xa7578519: inc    %esi
  0xa757851a: jmp    *-0x48722ae0(,%ebx,4)
  0xa7578521: nop
  0xa7578522: nop
  0xa7578523: nop
  0xa7578524: int3   
  0xa7578525: int3   
  0xa7578526: int3   
  0xa7578527: int3   
  0xa7578528: int3   
  0xa7578529: int3   
  0xa757852a: int3   
  0xa757852b: int3   
  0xa757852c: int3   
  0xa757852d: int3   
  0xa757852e: int3   
  0xa757852f: int3   
  0xa7578530: int3   
  0xa7578531: int3   
  0xa7578532: int3   
  0xa7578533: int3   
  0xa7578534: int3   
  0xa7578535: int3   
  0xa7578536: int3   
  0xa7578537: int3   
  0xa7578538: int3   
  0xa7578539: int3   
  0xa757853a: int3   
  0xa757853b: int3   
  0xa757853c: int3   
  0xa757853d: int3   
  0xa757853e: int3   
  0xa757853f: int3   
----------------------------------------------------------------------

hello world!

RUN FINISHED; exit value 0; real time: 13s; user: 430ms; system: 970ms
